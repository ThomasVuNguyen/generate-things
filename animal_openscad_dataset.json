[
  {
    "animal": "aardvark",
    "openscad_code": "// Aardvark model - medium complexity, realistic style\n// Overall dimensions: ~80mm long\n\n// Body parameters\nbody_length = 45;\nbody_height = 25;\nbody_width = 20;\n\n// Head parameters\nhead_length = 20;\nhead_height = 15;\nhead_width = 12;\n\n// Snout parameters\nsnout_length = 25;\nsnout_diameter = 6;\n\n// Leg parameters\nleg_height = 20;\nleg_width = 6;\nleg_depth = 8;\n\n// Ear parameters\near_length = 8;\near_width = 6;\near_thickness = 2;\n\n// Tail parameters\ntail_length = 30;\ntail_diameter = 5;\n\n// Helper module for rounded box\nmodule rounded_box(w, h, d, r) {\n    translate([0, r, 0])\n    hull() {\n        for(x = [-w/2+r, w/2-r])\n        for(z = [-d/2+r, d/2-r]) {\n            translate([x, 0, z])\n            sphere(r);\n        }\n    }\n    cube([w-2*r, h-r, d], center=true);\n    translate([0, h-r, 0])\n    hull() {\n        for(x = [-w/2+r, w/2-r])\n        for(z = [-d/2+r, d/2-r]) {\n            translate([x, 0, z])\n            sphere(r);\n        }\n    }\n}\n\n// Body module\nmodule body() {\n    union() {\n        // Main body\n        color(\"tan\")\n        rounded_box(body_width, body_height, body_length, 5);\n        \n        // Back hump\n        translate([0, body_height/2, -body_length/4])\n        rotate([0, 0, 0])\n        scale([1, 0.8, 0.6])\n        sphere(body_height/1.5);\n    }\n}\n\n// Head module\nmodule head() {\n    union() {\n        // Main head\n        color(\"tan\")\n        translate([0, body_height/2 + 5, body_length/2 + head_length/2])\n        scale([1, 0.8, 1.2])\n        sphere(head_height/1.2);\n        \n        // Snout\n        color(\"tan\")\n        translate([0, body_height/2 + 5 - head_height/4, body_length/2 + head_length + snout_length/2])\n        rotate([20, 0, 0])\n        cylinder(h=snout_length, d=snout_diameter, $fn=16);\n        \n        // Nose tip\n        translate([0, body_height/2 + 5 - head_height/4 - 3, body_length/2 + head_length + snout_length])\n        sphere(snout_diameter/1.5);\n        \n        // Ears\n        for(side = [-1, 1]) {\n            color(\"tan\")\n            translate([side * head_width/2, body_height/2 + 5 + head_height/2, body_length/2 + head_length/2])\n            rotate([0, -30, side * 30])\n            scale([1, 0.7, 0.3])\n            cylinder(h=ear_length, d=ear_width, $fn=16);\n        }\n        \n        // Eyes\n        for(side = [-1, 1]) {\n            color(\"black\")\n            translate([side * head_width/3, body_height/2 + 5 - head_height/4, body_length/2 + head_length/1.5])\n            sphere(1.5);\n        }\n    }\n}\n\n// Leg module\nmodule leg() {\n    union() {\n        // Upper leg\n        color(\"tan\")\n        cylinder(h=leg_height/2, d1=leg_width+2, d2=leg_width, $fn=16);\n        \n        // Lower leg\n        translate([0, 0, leg_height/2])\n        cylinder(h=leg_height/2, d1=leg_width, d2=leg_width-1, $fn=16);\n        \n        // Foot\n        translate([0, -leg_depth/4, leg_height])\n        scale([1.2, 1, 0.8])\n        sphere(leg_width/1.2);\n    }\n}\n\n// Tail module\nmodule tail() {\n    color(\"tan\")\n    translate([0, body_height/2, -body_length/2 - tail_length/2])\n    rotate([0, 20, 0])\n    cylinder(h=tail_length, d1=tail_diameter, d2=tail_diameter/2, $fn=16);\n}\n\n// Main assembly\nunion() {\n    // Body\n    body();\n    \n    // Head and snout\n    head();\n    \n    // Legs\n    for(pos = [[-body_width/3, 0, body_length/3], \n               [body_width/3, 0, body_length/3],\n               [-body_width/3, 0, -body_length/3],\n               [body_width/3, 0, -body_length/3]]) {\n        translate(pos)\n        translate([0, -body_height/2 - leg_height/2, 0])\n        leg();\n    }\n    \n    // Tail\n    tail();\n}",
    "renders": true
  },
  {
    "animal": "aardwolf",
    "openscad_code": "// Aardwolf - medium complexity realistic model\n// Overall size ~80mm long, 40mm tall\n\n// Body dimensions\nbody_length = 60;\nbody_height = 35;\nbody_width = 25;\n\n// Head dimensions\nhead_length = 20;\nhead_height = 15;\nhead_width = 15;\n\n// Leg dimensions\nleg_height = 20;\nleg_width = 6;\nleg_depth = 8;\n\n// Tail dimensions\ntail_length = 25;\ntail_height = 8;\ntail_width = 6;\n\n// Ear dimensions\near_height = 8;\near_width = 4;\near_depth = 2;\n\n// Mane strip dimensions\nmane_height = 3;\nmane_width = 2;\n\n// Main assembly\nunion() {\n    // Central body\n    translate([-body_length/2, 0, 0])\n    scale([1, 0.8, 0.6])\n    sphere(d=body_width);\n\n    // Extended torso\n    translate([-body_length/3, 0, body_height/4])\n    cube([body_length*0.8, body_width*0.7, body_height*0.5], center=true);\n\n    // Head\n    translate([body_length/2 - 5, 0, body_height/2 + 5])\n    rotate([0, -10, 0])\n    union() {\n        // Main head shape\n        cube([head_length, head_width, head_height], center=true);\n        \n        // Snout extension\n        translate([head_length/2 + 3, 0, -head_height/4])\n        scale([1.5, 0.8, 0.6])\n        sphere(d=head_width);\n        \n        // Nose\n        translate([head_length/2 + 7, 0, -head_height/4])\n        sphere(d=3);\n        \n        // Ears\n        for(side = [-1, 1]) {\n            translate([head_length/4, side*(head_width/2 + ear_width/2), head_height/2])\n            rotate([0, side*10, 0])\n            cube([ear_depth, ear_width, ear_height], center=true);\n        }\n    }\n\n    // Legs\n    for(side = [-1, 1]) {\n        // Front legs\n        translate([body_length/4, side*body_width/2, 0])\n        union() {\n            // Upper leg\n            translate([0, 0, leg_height/2])\n            cube([leg_depth, leg_width, leg_height], center=true);\n            \n            // Paw\n            translate([0, 0, leg_height - 2])\n            sphere(d=leg_width*1.2);\n        }\n        \n        // Rear legs\n        translate([-body_length/3, side*body_width/2, 0])\n        union() {\n            // Upper leg\n            translate([0, 0, leg_height/2])\n            cube([leg_depth*1.2, leg_width*1.1, leg_height*1.1], center=true);\n            \n            // Paw\n            translate([0, 0, leg_height - 2])\n            sphere(d=leg_width*1.2);\n        }\n    }\n\n    // Tail\n    translate([-body_length/2 - tail_length/2, 0, body_height/3])\n    rotate([0, 0, -20])\n    union() {\n        // Tail base\n        cube([tail_length, tail_width, tail_height], center=true);\n        \n        // Tail tip\n        translate([-tail_length/2 - 2, 0, 0])\n        sphere(d=tail_width);\n    }\n\n    // Mane along back\n    for(i = [-body_length/2 + 5 : 5 : body_length/2 - 10]) {\n        translate([i, 0, body_height/2 + mane_height/2])\n        cube([mane_width, body_width*0.8, mane_height], center=true);\n    }\n\n    // Eyes\n    for(side = [-1, 1]) {\n        translate([body_length/2 + 2, side*head_width/3, body_height/2 + 8])\n        sphere(d=2);\n    }\n    \n    // Stripes on body\n    for(i = [-body_length/3 : 8 : body_length/3]) {\n        translate([i, 0, body_height/2 + 1])\n        cube([2, body_width*0.9, 1], center=true);\n    }\n}",
    "renders": true
  },
  {
    "animal": "abalone",
    "openscad_code": "// Abalone shell with realistic features - medium complexity\n// Size: ~70mm length, 3D printable with proper walls\n\n// Shell thickness parameter\nshell_t = 1.5;\n\n// Main shell body module\nmodule shell_body() {\n    difference() {\n        // Outer shell - elliptical dome shape\n        scale([1, 0.7, 0.4])\n        sphere(d=70, $fn=60);\n        \n        // Hollow interior\n        translate([0, 0, -shell_t])\n        scale([0.9, 0.6, 0.35])\n        sphere(d=68, $fn=60);\n    }\n}\n\n// Shell opening (mouth)\nmodule shell_opening() {\n    difference() {\n        // Opening base\n        translate([0, -30, -10])\n        rotate([90, 0, 0])\n        cylinder(h=20, d1=35, d2=25, $fn=40);\n        \n        // Taper the opening\n        translate([0, -35, -10])\n        rotate([90, 0, 0])\n        cylinder(h=25, d1=30, d2=20, $fn=40);\n    }\n}\n\n// Growth rings on shell surface\nmodule growth_rings() {\n    for (i = [1:12]) {\n        rotate([0, 0, i * 15])\n        translate([0, 0, -5 + i * 0.8])\n        scale([1 - i * 0.03, 0.7 - i * 0.02, 0.4])\n        sphere(d=70 - i * 2, $fn=60);\n    }\n}\n\n// Spiral ridges following shell growth\nmodule spiral_ridges() {\n    for (a = [0:30:360]) {\n        rotate([0, 0, a])\n        translate([15, 0, -8])\n        rotate([90, 0, 0])\n        cylinder(h=30, d1=1.5, d2=0.5, $fn=8);\n    }\n    \n    for (a = [15:30:360]) {\n        rotate([0, 0, a])\n        translate([25, 0, -5])\n        rotate([90, 0, 0])\n        cylinder(h=25, d1=1.2, d2=0.4, $fn=8);\n    }\n}\n\n// Muscle attachment scars\nmodule muscle_scars() {\n    // Row of scars near opening\n    for (pos = [[-20, -25, -8], [-10, -28, -8], [0, -30, -8], [10, -28, -8], [20, -25, -8]]) {\n        translate(pos)\n        scale([1.5, 1, 0.5])\n        sphere(d=3, $fn=12);\n    }\n}\n\n// Shell rim/lip\nmodule shell_rim() {\n    difference() {\n        // Outer rim\n        translate([0, -32, -12])\n        rotate([90, 0, 0])\n        cylinder(h=5, d=38, $fn=60);\n        \n        // Inner rim\n        translate([0, -32, -12])\n        rotate([90, 0, 0])\n        cylinder(h=5, d=32, $fn=60);\n    }\n}\n\n// Combine all parts\nunion() {\n    // Main shell structure\n    shell_body();\n    \n    // Add opening\n    shell_opening();\n    \n    // Surface details\n    growth_rings();\n    \n    // Spiral ridges\n    spiral_ridges();\n    \n    // Muscle scars\n    muscle_scars();\n    \n    // Shell rim\n    shell_rim();\n}",
    "renders": true
  },
  {
    "animal": "adder",
    "openscad_code": "// Medium-complexity realistic adder (snake) – 3D printable\n// Overall length ≈ 90 mm, lays flat on the print bed\n// All bridges ≤ 45° or supported by solid material\n\n// Basic parameters\n$fn = 32;               // smooth curves\nbody_len = 90;          // total length\nhead_len = 18;\nhead_w   = 12;\nbody_rad = 6;           // radius of body cross-section\nscale_taper = 0.7;      // tail taper ratio\nsegment_len = 8;        // length of one body segment\nwall = 1.2;             // printable wall thickness\neye_d = 3;\neye_ofs = 4;\n\n// Color definitions (for preview only)\nhead_col = \"darkolivegreen\";\nbody_col = \"olivedrab\";\n\n// Helper: create one body segment with overlapping spheres for smooth joints\nmodule body_segment(idx, total) {\n    // progressive scaling toward tail\n    t = idx / (total - 1);\n    sc = 1 - t * (1 - scale_taper);\n    translate([idx * segment_len * sc, 0, 0])\n        scale([sc, sc, sc])\n        sphere(d = body_rad * 2);\n}\n\n// Head with snout, eyes and forked tongue\nmodule head() {\n    color(head_col)\n    union() {\n        // Main head block\n        translate([0, 0, body_rad])\n            rotate([0, -10, 0])   // slight lift of snout\n            difference() {\n                hull() {\n                    sphere(d = head_w);\n                    translate([head_len - head_w/2, 0, 0])\n                        sphere(d = head_w * 0.7);\n                }\n                // Eye sockets\n                for(side = [-1, 1])\n                    translate([head_len/3, side * eye_ofs, head_w/2 - 1])\n                        rotate([0, 90, 0])\n                        cylinder(h = eye_d + 2, d = eye_d, center = true);\n            }\n\n        // Eyes\n        for(side = [-1, 1])\n            translate([head_len/3, side * eye_ofs, head_w/2 + 0.5])\n                color(\"black\")\n                sphere(d = eye_d);\n\n        // Forked tongue\n        difference() {\n            union() {\n                translate([head_len, 0, 0])\n                    rotate([0, -30, 0])\n                    cube([6, 0.8, 0.8], center = true);\n                translate([head_len + 3, 0, 0])\n                    rotate([0, -30, 0])\n                    cube([4, 0.8, 0.4], center = true);\n            }\n            // split tongue\n            translate([head_len + 3.5, 0, 0])\n                cube([2, 2, 0.5], center = true);\n        }\n    }\n}\n\n// Scaled belly plate to ensure flat bottom\nmodule belly_plate() {\n    color(\"darkgreen\")\n    linear_extrude(height = wall)\n    offset(delta = wall)\n    projection(cut = true)\n    children();\n}\n\n// Main assembly\nunion() {\n    // Head\n    translate([0, 0, body_rad])\n        head();\n\n    // Body segments\n    color(body_col) {\n        segments = floor(body_len / segment_len);\n        for(i = [1 : segments])\n            body_segment(i, segments);\n    }\n\n    // Flattened belly to avoid support\n    translate([0, 0, -body_rad])\n        belly_plate() {\n            union() {\n                // Head underside\n                translate([head_len/2, 0, body_rad])\n                    scale([head_len, head_w, 1])\n                    sphere(d = 2);\n\n                // Body underside\n                segments = floor(body_len / segment_len);\n                for(i = [0 : segments])\n                    body_segment(i, segments);\n            }\n        }\n}",
    "renders": false
  },
  {
    "animal": "agama",
    "openscad_code": "// Realistic Agama Lizard - Medium Complexity\n// 3D printable model with anatomical features\n\n// Global parameters\nbody_length = 60;\nbody_height = 12;\nbody_width = 18;\nhead_length = 15;\nhead_width = 12;\ntail_segments = 15;\nleg_thickness = 5;\n\nmodule agama_body() {\n    // Main torso - elongated ellipsoid\n    difference() {\n        scale([1.8, 1, 0.8])\n            sphere(d=body_width, $fn=32);\n        \n        // Neck transition cut\n        translate([body_length/2 - 5, 0, -body_height/2])\n            cube([10, body_width, body_height], center=true);\n    }\n}\n\nmodule agama_head() {\n    // Triangular head shape\n    union() {\n        // Snout\n        translate([body_length/2 + head_length/2, 0, 0])\n            scale([1.5, 1, 0.7])\n                sphere(d=head_width, $fn=16);\n        \n        // Head base\n        translate([body_length/2, 0, 0])\n            scale([1, 1.2, 0.9])\n                sphere(d=head_width, $fn=16);\n        \n        // Eye ridges\n        for(side = [-1, 1]) {\n            translate([body_length/2 + 3, side * head_width/3, 2])\n                rotate([0, 30, 0])\n                    scale([0.5, 1, 0.3])\n                        sphere(d=3, $fn=8);\n        }\n    }\n}\n\nmodule agama_eyes() {\n    // Eyes with pupils\n    for(side = [-1, 1]) {\n        translate([body_length/2 + 5, side * head_width/3, 1.5])\n            color(\"black\")\n                sphere(d=2, $fn=16);\n        \n        translate([body_length/2 + 5.5, side * head_width/3, 1.7])\n            color(\"white\")\n                sphere(d=0.8, $fn=8);\n    }\n}\n\nmodule agama_limbs() {\n    // Front legs\n    for(side = [-1, 1]) {\n        // Upper arm\n        translate([body_length/4, side * body_width/2, -2])\n            rotate([45, 0, 30 * side])\n                cylinder(h=8, d1=leg_thickness, d2=leg_thickness-1, $fn=8);\n        \n        // Lower arm\n        translate([body_length/4 - 2, side * (body_width/2 + 3), -6])\n            rotate([0, 0, -30 * side])\n                cylinder(h=6, d1=leg_thickness-1, d2=leg_thickness-2, $fn=8);\n        \n        // Front foot\n        translate([body_length/4 - 4, side * (body_width/2 + 5), -8])\n            scale([1.5, 1, 0.5])\n                sphere(d=3, $fn=8);\n    }\n    \n    // Back legs (larger)\n    for(side = [-1, 1]) {\n        // Upper leg\n        translate([-body_length/4, side * body_width/2, -2])\n            rotate([30, 0, -20 * side])\n                cylinder(h=10, d1=leg_thickness+1, d2=leg_thickness, $fn=8);\n        \n        // Lower leg\n        translate([-body_length/4 - 3, side * (body_width/2 + 4), -7])\n            rotate([0, 0, 20 * side])\n                cylinder(h=8, d1=leg_thickness, d2=leg_thickness-1, $fn=8);\n        \n        // Back foot\n        translate([-body_length/4 - 6, side * (body_width/2 + 6), -10])\n            scale([2, 1.2, 0.5])\n                sphere(d=4, $fn=8);\n    }\n}\n\nmodule agama_tail() {\n    // Segmented tail tapering to a point\n    for(i = [0:tail_segments-1]) {\n        translate([-body_length/2 - i * 3, 0, 0])\n            rotate([0, 5 * sin(i*30), 0])\n                scale([1, 1 - i*0.05, 1 - i*0.05])\n                    sphere(d=body_width - i*1.2, $fn=16);\n    }\n}\n\nmodule agama_scales() {\n    // Dorsal ridge scales\n    for(i = [0:8]) {\n        translate([body_length/2 - 5 - i * 5, 0, body_height/2])\n            rotate([0, 0, 0])\n                scale([0.3, 1, 1.5])\n                    cylinder(h=2, d1=2, d2=0.5, $fn=6);\n    }\n    \n    // Lateral body scales\n    for(side = [-1, 1]) {\n        for(i = [0:5]) {\n            translate([body_length/2 - 10 - i * 6, side * body_width/2, 0])\n                rotate([0, 90, 0])\n                    scale([0.5, 0.5, 0.5])\n                        sphere(d=2, $fn=6);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    agama_body();\n    agama_head();\n    agama_eyes();\n    agama_limbs();\n    agama_tail();\n    agama_scales();\n}\n\n// Flat base for 3D printing stability\ntranslate([-body_length/2 - tail_segments*3, 0, -10])\n    cube([body_length + tail_segments*3 + head_length, body_width*2, 2], center=false);",
    "renders": true
  },
  {
    "animal": "agouti",
    "openscad_code": "// Agouti - medium complexity realistic style\n// Designed for 3D printing - 80mm length\n\n// Main dimensions\nbody_length = 70;\nbody_height = 35;\nhead_length = 20;\nhead_height = 18;\nleg_height = 25;\ntail_length = 12;\n\n// Body\nmodule body() {\n    union() {\n        // Main torso\n        translate([0, 0, body_height/2])\n            scale([1, 0.6, 0.5])\n            sphere(d=body_height);\n        \n        // Rump\n        translate([-body_length/2, 0, body_height/2])\n            scale([1.2, 0.7, 0.4])\n            sphere(d=body_height);\n    }\n}\n\n// Head\nmodule head() {\n    translate([body_length/2 + head_length/2, 0, body_height/2 + head_height/4]) {\n        union() {\n            // Skull\n            scale([1.3, 0.9, 0.8])\n            sphere(d=head_height);\n            \n            // Snout\n            translate([head_length/2, 0, -head_height/4])\n                scale([0.8, 0.6, 0.5])\n                sphere(d=head_height);\n            \n            // Ears\n            for(side = [-1, 1]) {\n                translate([0, side*head_height/2, head_height/2])\n                    rotate([0, 15*side, 0])\n                    scale([0.3, 0.1, 0.6])\n                    cylinder(h=head_height/2, d=head_height/3);\n            }\n            \n            // Nose\n            translate([head_length/2 + 2, 0, -head_height/4])\n                sphere(d=3);\n            \n            // Eyes\n            for(side = [-1, 1]) {\n                translate([head_length/2 - 2, side*head_height/3, 0])\n                    sphere(d=2.5);\n            }\n        }\n    }\n}\n\n// Legs\nmodule legs() {\n    for(side = [-1, 1]) {\n        // Front legs\n        translate([body_length/3, side*body_height/4, 0]) {\n            union() {\n                // Upper leg\n                cylinder(h=leg_height/2, d=leg_height/4);\n                // Lower leg\n                translate([0, 0, leg_height/2])\n                    cylinder(h=leg_height/2, d=leg_height/5);\n                // Paw\n                translate([0, 0, leg_height])\n                    sphere(d=leg_height/4);\n            }\n        }\n        \n        // Rear legs\n        translate([-body_length/3, side*body_height/4, 0]) {\n            rotate([10, 0, 0])\n            union() {\n                // Upper leg\n                cylinder(h=leg_height/2, d=leg_height/4);\n                // Lower leg\n                translate([0, 0, leg_height/2])\n                    cylinder(h=leg_height/2, d=leg_height/5);\n                // Paw\n                translate([0, 0, leg_height])\n                    sphere(d=leg_height/4);\n            }\n        }\n    }\n}\n\n// Tail\nmodule tail() {\n    translate([-body_length/2 - tail_length/2, 0, body_height/2]) {\n        rotate([0, -20, 0])\n            scale([1, 0.7, 0.7])\n            cylinder(h=tail_length, d=tail_length);\n    }\n}\n\n// Whiskers\nmodule whiskers() {\n    for(side = [-1, 1]) {\n        for(i = [1:3]) {\n            translate([body_length/2 + head_length/2 + 2, side*head_height/3, -head_height/4 + i*2])\n                rotate([0, side*15, 0])\n                cylinder(h=5, d=0.5);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    legs();\n    tail();\n    whiskers();\n}",
    "renders": true
  },
  {
    "animal": "akita",
    "openscad_code": "// Akita Dog - Realistic Medium Complexity\n// Overall dimensions: ~80mm length x ~40mm width x ~50mm height\n\n$fn = 30; // Increase for smoother curves\n\nmodule akita() {\n    // Main body\n    union() {\n        // Torso\n        translate([0, 0, 15]) \n            scale([1.2, 0.6, 0.8]) \n                sphere(r = 20);\n        \n        // Chest\n        translate([-10, 0, 10]) \n            scale([0.8, 0.5, 0.6]) \n                sphere(r = 15);\n        \n        // Hindquarters\n        translate([15, 0, 12]) \n            scale([0.7, 0.5, 0.6]) \n                sphere(r = 18);\n    }\n    \n    // Neck\n    translate([-20, 0, 25]) \n        rotate([0, 10, 0]) \n            scale([0.5, 0.5, 0.7]) \n                cylinder(r1 = 12, r2 = 8, h = 15);\n    \n    // Head\n    translate([-35, 0, 35]) \n        rotate([0, 10, 0]) {\n            // Skull\n            scale([0.8, 0.7, 0.7]) \n                sphere(r = 15);\n            \n            // Snout\n            translate([-12, 0, -5]) \n                scale([1.2, 0.8, 0.6]) \n                    sphere(r = 8);\n            \n            // Ears\n            for(side = [-1, 1]) {\n                translate([-5, side * 12, 8]) \n                    rotate([0, side * 20, 0]) \n                        scale([0.3, 0.1, 0.8]) \n                            cylinder(r = 8, h = 15);\n            }\n            \n            // Nose\n            translate([-20, 0, -5]) \n                sphere(r = 3);\n        }\n    \n    // Legs module\n    module leg(x_pos, y_pos, angle) {\n        translate([x_pos, y_pos, 0]) {\n            // Upper leg\n            rotate([0, 0, angle]) {\n                translate([0, 0, 10]) \n                    rotate([0, angle, 0]) \n                        scale([0.4, 0.4, 1]) \n                            cylinder(r = 5, h = 15);\n                \n                // Lower leg\n                translate([0, 0, 0]) \n                    rotate([0, angle + 10, 0]) \n                        scale([0.3, 0.3, 0.9]) \n                            cylinder(r = 4, h = 12);\n                \n                // Paw\n                translate([0, 0, -2]) \n                    scale([0.8, 0.8, 0.4]) \n                        sphere(r = 5);\n            }\n        }\n    }\n    \n    // Front legs\n    leg(-15, 12, 15);\n    leg(-15, -12, -15);\n    \n    // Back legs\n    leg(15, 10, -15);\n    leg(15, -10, 15);\n    \n    // Tail\n    translate([25, 0, 25]) \n        rotate([0, 0, 45]) {\n            scale([0.4, 0.4, 1.5]) \n                cylinder(r = 4, h = 20);\n            translate([0, 0, 20]) \n                scale([0.8, 0.8, 0.6]) \n                    sphere(r = 4);\n        }\n}\n\n// Generate the model\nakita();",
    "renders": true
  },
  {
    "animal": "albatross",
    "openscad_code": "// Albatross 3D Model - Medium Complexity Realistic Style\n// Wingspan approximately 80mm, designed for 3D printing\n\n$fn = 32;\n\n// Main module to create the entire albatross\nmodule albatross() {\n    union() {\n        // Body\n        body();\n        \n        // Head and beak\n        translate([15, 0, 8]) head();\n        \n        // Wings\n        translate([-5, 0, 5]) wings();\n        \n        // Tail\n        translate([-18, 0, 3]) tail();\n        \n        // Legs and feet\n        translate([5, 0, -2]) legs();\n    }\n}\n\n// Body module - streamlined oval shape\nmodule body() {\n    // Main body\n    scale([1.8, 1, 1]) sphere(8);\n    \n    // Neck transition\n    translate([10, 0, 6]) \n        scale([1.2, 0.8, 0.8]) \n        sphere(6);\n}\n\n// Head and beak module\nmodule head() {\n    union() {\n        // Head\n        sphere(5);\n        \n        // Beak\n        translate([6, 0, -2]) \n            rotate([0, -15, 0]) \n            scale([1.5, 0.4, 0.4]) \n            cylinder(h=12, r1=3, r2=1);\n        \n        // Eye\n        translate([2, 3.5, 1.5]) \n            sphere(1);\n        \n        // Eye socket\n        translate([2, 3.5, 1.5]) \n            difference() {\n                sphere(1.2);\n                sphere(1.1);\n            }\n    }\n}\n\n// Wings module with feather details\nmodule wings() {\n    // Left wing\n    translate([0, -15, 0]) \n        rotate([0, 0, 20]) \n        wing_half();\n    \n    // Right wing\n    mirror([0, 1, 0]) \n        translate([0, -15, 0]) \n        rotate([0, 0, 20]) \n        wing_half();\n}\n\n// Single wing half\nmodule wing_half() {\n    union() {\n        // Main wing structure\n        translate([20, -15, 0]) \n            rotate([0, 0, -30]) \n            scale([1, 0.2, 0.05]) \n            sphere(20);\n        \n        // Wing tip\n        translate([35, -25, 0]) \n            rotate([0, 0, -45]) \n            scale([0.5, 0.1, 0.05]) \n            sphere(10);\n        \n        // Wing feathers\n        for(i = [1:3]) {\n            translate([15 + i*7, -15 - i*3, -0.5]) \n                rotate([0, 0, -20 - i*5]) \n                scale([0.3, 0.05, 0.02]) \n                cube([8, 2, 1]);\n        }\n    }\n}\n\n// Tail module\nmodule tail() {\n    union() {\n        // Tail base\n        translate([0, 0, 0]) \n            rotate([0, 10, 0]) \n            scale([0.3, 1, 0.1]) \n            sphere(8);\n        \n        // Tail feathers\n        for(i = [-2:2]) {\n            translate([i*2, -8, 0]) \n                rotate([0, 0, i*5]) \n                scale([0.2, 1, 0.05]) \n                cube([3, 10, 1]);\n        }\n    }\n}\n\n// Legs and webbed feet\nmodule legs() {\n    // Left leg\n    translate([0, 3, 0]) leg();\n    \n    // Right leg\n    translate([0, -3, 0]) leg();\n}\n\n// Single leg with foot\nmodule leg() {\n    union() {\n        // Leg\n        translate([0, 0, -5]) \n            rotate([15, 0, 0]) \n            scale([0.3, 0.3, 1]) \n            cylinder(h=8, r=2);\n        \n        // Foot\n        translate([0, 0, -12]) {\n            // Central foot pad\n            scale([1, 0.3, 0.2]) \n            sphere(3);\n            \n            // Toes\n            for(i = [-1, 0, 1]) {\n                translate([i*2.5, 0, -1]) \n                    rotate([0, 0, i*10]) \n                    scale([0.3, 0.2, 0.1]) \n                    cube([4, 1, 0.5]);\n            }\n        }\n    }\n}\n\n// Generate the albatross\nalbatross();",
    "renders": true
  },
  {
    "animal": "alligator",
    "openscad_code": "// Alligator model for 3D printing\n// Medium complexity realistic style using basic primitives\n\n// Parameters for printability\n$fa = 2;\n$fs = 0.5;\nwall_thickness = 2;\nscale_factor = 0.8;\n\nmodule alligator() {\n    // Main body\n    color(\"darkolivegreen\") {\n        // Torso - main body segment\n        union() {\n            // Central body\n            translate([-20, 0, 0]) scale([1.2, 0.8, 0.6]) sphere(d=40);\n            \n            // Tail segments\n            for(i = [0:5]) {\n                translate([-40 - i*8, 0, 0]) \n                rotate([0, -i*5, 0])\n                scale([1 - i*0.1, 1 - i*0.15, 1 - i*0.2])\n                sphere(d=30 - i*3);\n            }\n            \n            // Head\n            translate([15, 0, 5]) \n            scale([1.3, 1, 0.7]) \n            sphere(d=35);\n            \n            // Snout extension\n            translate([30, 0, 3])\n            scale([2, 0.6, 0.4])\n            sphere(d=20);\n        }\n        \n        // Legs\n        module leg(x_pos, y_pos, angle) {\n            translate([x_pos, y_pos, -15]) {\n                rotate([0, 0, angle]) {\n                    // Upper leg\n                    rotate([90, 0, 0])\n                    cylinder(h=15, d1=12, d2=8);\n                    \n                    // Lower leg\n                    translate([0, 0, -12])\n                    rotate([90, 0, 0])\n                    cylinder(h=12, d1=8, d2=6);\n                    \n                    // Foot\n                    translate([0, 0, -20])\n                    scale([2, 1, 0.5])\n                    sphere(d=8);\n                }\n            }\n        }\n        \n        // Front legs\n        leg(0, 12, -30);\n        leg(0, -12, 30);\n        \n        // Rear legs\n        leg(-25, 15, -45);\n        leg(-25, -15, 45);\n        \n        // Eyes\n        translate([28, 8, 15]) sphere(d=6);\n        translate([28, -8, 15]) sphere(d=6);\n        \n        // Eye pupils\n        color(\"black\") {\n            translate([31, 8, 15]) sphere(d=3);\n            translate([31, -8, 15]) sphere(d=3);\n        }\n        \n        // Nostrils\n        translate([38, 3, 8]) sphere(d=3);\n        translate([38, -3, 8]) sphere(d=3);\n        \n        // Back ridges (scutes)\n        for(i = [0:12]) {\n            translate([-35 + i*5, 0, 12])\n            rotate([0, 0, i % 2 == 0 ? 5 : -5])\n            scale([0.8, 0.2, 1])\n            cube([6, 3, 4], center=true);\n        }\n        \n        // Teeth\n        color(\"white\") {\n            // Upper teeth\n            for(i = [0:7]) {\n                translate([33 - i*2, 6, 5])\n                rotate([0, 0, -15])\n                scale([0.3, 1, 0.3])\n                cylinder(h=3, d1=2, d2=1);\n                \n                translate([33 - i*2, -6, 5])\n                rotate([0, 0, 15])\n                scale([0.3, 1, 0.3])\n                cylinder(h=3, d1=2, d2=1);\n            }\n        }\n    }\n}\n\n// Create the alligator\nscale([scale_factor, scale_factor, scale_factor])\nalligator();",
    "renders": true
  },
  {
    "animal": "alpaca",
    "openscad_code": "// Alpaca - medium complexity realistic style\n// Designed for 3D printing with no overhangs\n\nmodule leg() {\n    // Main leg cylinder\n    cylinder(h = 25, r1 = 4, r2 = 3, $fn = 16);\n    // Hoof\n    translate([0, 0, -1])\n        cylinder(h = 3, r1 = 5, r2 = 4, $fn = 16);\n}\n\nmodule ear() {\n    // Ear shape\n    rotate([0, -15, 0])\n        scale([0.6, 1.2, 0.3])\n            sphere(8, $fn = 16);\n}\n\nmodule neck() {\n    // Neck segment\n    rotate([0, -20, 0])\n        cylinder(h = 20, r1 = 6, r2 = 5, $fn = 20);\n    // Neck base\n    translate([0, 0, -5])\n        cylinder(h = 8, r1 = 8, r2 = 6, $fn = 20);\n}\n\nmodule body() {\n    // Main torso\n    scale([1.5, 1, 1.2])\n        sphere(20, $fn = 32);\n    \n    // Chest extension\n    translate([-15, 0, -5])\n        scale([1.2, 0.8, 0.8])\n            sphere(15, $fn = 24);\n    \n    // Rear section\n    translate([15, 0, -3])\n        scale([0.8, 1, 0.9])\n            sphere(18, $fn = 24);\n}\n\nmodule head() {\n    // Head shape\n    scale([1.2, 0.9, 1.1])\n        sphere(12, $fn = 24);\n    \n    // Snout\n    translate([12, 0, -3])\n        scale([1.5, 0.7, 0.6])\n            sphere(8, $fn = 16);\n    \n    // Eyes\n    translate([8, 5, 4])\n        sphere(2, $fn = 8);\n    translate([8, -5, 4])\n        sphere(2, $fn = 8);\n    \n    // Nose\n    translate([15, 0, -2])\n        sphere(3, $fn = 8);\n}\n\nmodule tail() {\n    // Tail base\n    translate([0, 0, -8])\n        rotate([45, 0, 0])\n            cylinder(h = 12, r1 = 4, r2 = 2, $fn = 12);\n}\n\n// Main assembly\nunion() {\n    // Body\n    body();\n    \n    // Neck\n    translate([-20, 0, 15])\n        neck();\n    \n    // Head\n    translate([-25, 0, 25])\n        rotate([0, 20, 0])\n            head();\n    \n    // Ears\n    translate([-25, 7, 32])\n        rotate([0, 0, -30])\n            ear();\n    translate([-25, -7, 32])\n        rotate([0, 0, 30])\n            ear();\n    \n    // Legs\n    // Front left\n    translate([-10, 8, -15])\n        leg();\n    \n    // Front right\n    translate([-10, -8, -15])\n        leg();\n    \n    // Rear left\n    translate([10, 8, -15])\n        leg();\n    \n    // Rear right\n    translate([10, -8, -15])\n        leg();\n    \n    // Tail\n    translate([20, 0, 8])\n        tail();\n}",
    "renders": true
  },
  {
    "animal": "anchovy",
    "openscad_code": "// Anchovy - Realistic Style, Medium Complexity\n// 3D printable model with basic primitives\n\nmodule anchovy_body() {\n    // Main body - elongated ellipsoid\n    translate([0, 0, 0])\n    scale([1, 0.4, 0.3])\n    sphere(r=15, $fn=32);\n    \n    // Tail section - tapered\n    hull() {\n        translate([-25, 0, 0])\n        scale([0.5, 0.2, 0.1])\n        sphere(r=10, $fn=16);\n        \n        translate([-35, 0, 0])\n        scale([0.1, 0.1, 0.05])\n        sphere(r=5, $fn=8);\n    }\n}\n\nmodule dorsal_fin() {\n    // Main dorsal fin - triangular segments\n    for(i=[-15:5:15]) {\n        translate([i, 0, 4])\n        rotate([0, 90, 0])\n        cylinder(h=8, r1=2, r2=0.5, $fn=3);\n    }\n}\n\nmodule pectoral_fin(left=true) {\n    // Side fins - curved\n    rotate([0, 0, left ? 30 : -30])\n    translate([0, left ? 8 : -8, -2])\n    rotate([0, 90, 0])\n    scale([1, 0.5, 1])\n    cylinder(h=10, r1=4, r2=1, $fn=16);\n}\n\nmodule pelvic_fin() {\n    // Small fins underneath\n    for(side=[-1, 1]) {\n        translate([5, side*6, -3])\n        rotate([90, 0, side*30])\n        scale([0.5, 1, 0.3])\n        cylinder(h=6, r1=2, r2=0.5, $fn=8);\n    }\n}\n\nmodule caudal_fin() {\n    // Tail fin - forked\n    // Upper lobe\n    translate([-35, 0, 2])\n    rotate([0, 0, -20])\n    scale([1, 0.2, 1])\n    cylinder(h=12, r1=4, r2=0.5, $fn=3);\n    \n    // Lower lobe\n    translate([-35, 0, -2])\n    rotate([0, 0, 20])\n    scale([1, 0.2, 1])\n    cylinder(h=12, r1=4, rfn=0.5, $fn=3);\n}\n\nmodule head_features() {\n    // Snout - elongated\n    translate([20, 0, 0])\n    scale([1.2, 0.8, 0.8])\n    sphere(r=8, $fn=24);\n    \n    // Mouth line\n    translate([25, 0, -2])\n    rotate([90, 0, 0])\n    scale([0.8, 1, 0.3])\n    cylinder(h=10, r1=1, r2=0.5, $fn=16);\n    \n    // Eye socket\n    for(side=[-1, 1]) {\n        translate([15, side*5, 3])\n        sphere(r=2, $fn=12);\n    }\n}\n\nmodule scales_pattern() {\n    // Simple scale pattern using small spheres\n    for(x=[-25:5:25]) {\n        for(y=[-6:3:6]) {\n            if(y != 0) {\n                translate([x, y, 4.5])\n                sphere(r=0.5, $fn=8);\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    anchovy_body();\n    head_features();\n    dorsal_fin();\n    pectoral_fin(true);\n    pectoral_fin(false);\n    pelvic_fin();\n    caudal_fin();\n    scales_pattern();\n}\n\n// Base for stability\ntranslate([0, 0, -8])\nscale([1.2, 0.6, 0.1])\ncylinder(h=2, r=20, $fn=32);",
    "renders": true
  },
  {
    "animal": "anglerfish",
    "openscad_code": "// Anglerfish - realistic style, medium complexity\n// Approx 80mm long\n\n// Main parameters\nbody_length = 60;\nbody_height = 35;\nhead_radius = 20;\nmouth_width = 30;\nmouth_height = 15;\neye_size = 8;\n\n// Body module\nmodule body() {\n    // Main body - ellipsoid shape\n    scale([1.2, 0.9, 0.7])\n        sphere(r=head_radius, $fn=50);\n    \n    // Belly bulge\n    translate([0, 0, -5])\n        scale([1, 1.2, 0.5])\n            sphere(r=head_radius*0.9, $fn=40);\n    \n    // Tail section\n    translate([-body_length/2, 0, 0])\n        rotate([0, 15, 0])\n            scale([1, 0.6, 0.4])\n                cylinder(h=body_length/2, r=head_radius*0.8, $fn=40);\n}\n\n// Head module\nmodule head() {\n    // Upper head dome\n    translate([head_radius/2, 0, 10])\n        sphere(r=head_radius, $fn=50);\n    \n    // Lower jaw\n    translate([head_radius/2, 0, -mouth_height/2])\n        scale([1.2, 0.8, 0.5])\n            sphere(r=mouth_width/2, $fn=40);\n}\n\n// Mouth module\nmodule mouth() {\n    // Mouth opening\n    difference() {\n        translate([head_radius+5, 0, 0])\n            scale([1.5, 1, 0.6])\n                sphere(r=mouth_width/2, $fn=40);\n        \n        // Teeth pattern\n        for(i = [-10:5:10]) {\n            for(j = [-5:5:5]) {\n                translate([head_radius+mouth_width/2+2, i, j])\n                    rotate([0, 90, 0])\n                        cylinder(h=2, r=1.2, $fn=6);\n            }\n        }\n    }\n}\n\n// Eye module\nmodule eye(pos_x, pos_y) {\n    // Eye socket\n    translate([pos_x, pos_y, 5])\n        sphere(r=eye_size/2+1, $fn=20);\n    \n    // Eyeball\n    difference() {\n        translate([pos_x, pos_y, 5])\n            sphere(r=eye_size/2, $fn=20);\n        \n        // Pupil\n        translate([pos_x+eye_size/3, pos_y, 5])\n            sphere(r=eye_size/4, $fn=15);\n    }\n}\n\n// Lure module (illicium)\nmodule lure() {\n    // Stalk\n    translate([head_radius+10, 0, head_radius+10])\n        rotate([0, 30, 0])\n            cylinder(h=25, r=1.5, $fn=12);\n    \n    // Lure bulb\n    translate([head_radius+30, 0, head_radius+20])\n        sphere(r=4, $fn=20);\n    \n    // Lure details\n    difference() {\n        translate([head_radius+30, 0, head_radius+20])\n            sphere(r=3.5, $fn=20);\n        \n        for(i = [0:60:300]) {\n            rotate([0, 0, i])\n                translate([head_radius+30+2, 0, head_radius+20])\n                    cylinder(h=1, r=0.5, $fn=6);\n        }\n    }\n}\n\n// Fin module\nmodule fin(pos_x, pos_y, angle) {\n    translate([pos_x, pos_y, 0])\n        rotate([0, 0, angle])\n            scale([1, 0.2, 0.4])\n                cylinder(h=15, r=8, $fn=20);\n}\n\n// Dorsal fin\nmodule dorsal_fin() {\n    translate([-10, 0, 20])\n        rotate([15, 0, 0])\n            scale([0.3, 1, 1])\n                cylinder(h=15, r=10, $fn=30);\n}\n\n// Assemble the anglerfish\nunion() {\n    // Main body parts\n    body();\n    head();\n    mouth();\n    \n    // Eyes\n    eye(head_radius/2, -8);\n    eye(head_radius/2, 8);\n    \n    // Lure\n    lure();\n    \n    // Fins\n    fin(-5, -20, -30);\n    fin(-5, 20, 30);\n    \n    // Dorsal fin\n    dorsal_fin();\n    \n    // Pectoral fins\n    translate([0, -25, -10])\n        rotate([0, -20, -90])\n            scale([0.3, 1, 0.5])\n                cylinder(h=20, r=8, $fn=20);\n    \n    translate([0, 25, -10])\n        rotate([0, 20, 90])\n            scale([0.3, 1, 0.5])\n                cylinder(h=20, r=8, $fn=20);\n}",
    "renders": true
  },
  {
    "animal": "anhinga",
    "openscad_code": "// Anhinga (Anhinga anhinga) - Medium complexity realistic model\n// 3D printable, ~80 mm long\n\n$fn = 30; // Resolution for curved surfaces\n\n// Main module\nmodule anhinga() {\n    union() {\n        // Body\n        body();\n        \n        // Neck and head\n        translate([0, 0, 8]) rotate([0, 0, 25]) neck_head();\n        \n        // Tail\n        translate([-32, 0, 2]) rotate([0, 0, -15]) tail();\n        \n        // Wings\n        left_wing();\n        mirror([0,1,0]) left_wing();\n        \n        // Legs and feet\n        translate([20, -5, -4]) rotate([0, 90, 0]) right_leg();\n        translate([20, 5, -4]) rotate([0, -90, 0]) left_leg();\n    }\n}\n\n// Body module\nmodule body() {\n    // Main body - elongated oval\n    scale([1.8, 0.6, 0.7]) sphere(d = 30);\n    \n    // Chest ridge\n    translate([0, 0, 10]) scale([1.4, 0.4, 0.3]) sphere(d = 20);\n    \n    // Back ridge\n    translate([5, 0, 8]) scale([1.5, 0.5, 0.2]) sphere(d = 25);\n}\n\n// Neck and head module\nmodule neck_head() {\n    // Neck - series of decreasing cylinders\n    union() {\n        translate([0, 0, 0]) cylinder(h = 25, d1 = 12, d2 = 8, center = false);\n        translate([0, 0, 20]) cylinder(h = 20, d1 = 8, d2 = 6, center = false);\n        \n        // Head\n        translate([0, 0, 42]) rotate([90, 0, -15]) {\n            // Main head shape\n            scale([1.3, 0.4, 0.5]) sphere(d = 12);\n            \n            // Beak\n            translate([8, 0, 0]) rotate([0, 0, 15]) cylinder(h = 18, d1 = 4, d2 = 1.5, center = false);\n            \n            // Eye\n            translate([4, 3, 2]) sphere(d = 2);\n        }\n    }\n}\n\n// Tail module\nmodule tail() {\n    // Fan tail made of individual feathers\n    for (i = [-4:4]) {\n        translate([i*2, 0, 0]) rotate([0, 0, i*8]) {\n            scale([0.3, 1, 0.1]) cylinder(h = 25, d = 6);\n        }\n    }\n    \n    // Tail base\n    translate([0, 0, 0]) scale([0.8, 0.3, 0.2]) sphere(d = 15);\n}\n\n// Left wing module\nmodule left_wing() {\n    translate([0, -15, 6]) rotate([0, 0, -25]) {\n        // Upper wing\n        scale([1.2, 0.2, 0.4]) sphere(d = 25);\n        \n        // Primary feathers\n        for (i = [1:4]) {\n            translate([-5 + i*2, -8 - i*1.5, 0]) rotate([0, 0, -15 + i*5]) {\n                scale([0.8, 0.1, 0.05]) cylinder(h = 15, d = 3);\n            }\n        }\n        \n        // Secondary feathers\n        for (j = [1:3]) {\n            translate([-8 + j*2, -5 - j*1, 0]) rotate([0, 0, -10 + j*3]) {\n                scale([0.7, 0.1, 0.05]) cylinder(h = 12, d = 2.5);\n            }\n        }\n    }\n}\n\n// Leg module (reused for both legs)\nmodule right_leg() {\n    // Thigh\n    translate([0, 0, 0]) cylinder(h = 8, d = 3);\n    \n    // Lower leg\n    translate([0, 0, 8]) rotate([0, 0, -20]) cylinder(h = 10, d = 2.5);\n    \n    // Foot\n    translate([0, 0, 18]) rotate([0, 0, 20]) {\n        // Main foot\n        scale([1.5, 0.3, 0.2]) sphere(d = 8);\n        \n        // Toes\n        for (k = [0:3]) {\n            translate([k*3, 0, 0]) rotate([0, 0, k*15 - 15]) {\n                scale([0.3, 0.2, 0.1]) cylinder(h = 6, d = 2);\n            }\n        }\n    }\n}\n\n// Scale for 3D printing\nscale(0.8)\nanhinga();",
    "renders": true
  },
  {
    "animal": "anole",
    "openscad_code": "// Realistic Anole Lizard - Medium Complexity\n// Approximate size: 75mm length\n\n$fn = 32;\n\n// Body parameters\nbody_length = 40;\nbody_height = 12;\nbody_width = 18;\n\n// Head parameters\nhead_length = 15;\nhead_width = 12;\nhead_height = 10;\n\n// Tail parameters\ntail_segments = 8;\ntail_base_width = 10;\ntail_base_height = 8;\n\n// Leg parameters\nleg_length = 20;\nleg_width = 4;\nleg_height = 3;\nfoot_length = 8;\ntoe_count = 5;\n\n// Dewlap parameters\ndewlap_radius = 6;\ndewlap_thickness = 2;\n\nmodule anole_body() {\n    // Main body - elongated ellipsoid\n    scale([1.2, 0.8, 0.6])\n    sphere(d = body_length);\n    \n    // Ribbed texture\n    for(i = [0:4]) {\n        translate([i*6 - 12, 0, body_height/2])\n        rotate([90, 0, 0])\n        cylinder(h = body_width*0.8, d1 = 2, d2 = 2.5);\n    }\n}\n\nmodule anole_head() {\n    // Snout\n    translate([body_length/2 + head_length/2, 0, 0])\n    scale([1.5, 1, 1])\n    sphere(d = head_length);\n    \n    // Eye sockets\n    difference() {\n        translate([body_length/2 + head_length/2, 0, head_height/3])\n        sphere(d = head_width);\n        \n        // Left eye\n        translate([body_length/2 + head_length - 3, -head_width/3, head_height/3])\n        rotate([0, 30, 0])\n        sphere(d = 4);\n        \n        // Right eye\n        translate([body_length/2 + head_length - 3, head_width/3, head_height/3])\n        rotate([0, -30, 0])\n        sphere(d = 4);\n    }\n    \n    // Eyes\n    translate([body_length/2 + head_length - 2.5, -head_width/3, head_height/3])\n    sphere(d = 3.5);\n    \n    translate([body_length/2 + head_length - 2.5, head_width/3, head_height/3])\n    sphere(d = 3.5);\n    \n    // Nose\n    translate([body_length/2 + head_length + 5, 0, 0])\n    sphere(d = 3);\n}\n\nmodule anole_tail() {\n    // Segmented tail tapering\n    for(i = [0:tail_segments-1]) {\n        translate([-body_length/2 - i*5, 0, 0])\n        scale([1, 1 - i*0.1, 1 - i*0.1])\n        sphere(d = tail_base_width - i);\n    }\n}\n\nmodule anole_leg(position, angle, side) {\n    translate(position)\n    rotate([0, angle, 0]) {\n        // Upper leg\n        rotate([0, -side*20, 0])\n        cylinder(h = leg_length/2, d1 = leg_width + 2, d2 = leg_width);\n        \n        // Lower leg\n        translate([0, 0, leg_length/2])\n        rotate([0, side*30, 0])\n        cylinder(h = leg_length/2, d1 = leg_width, d2 = leg_width - 1);\n        \n        // Foot\n        translate([0, 0, leg_length])\n        rotate([90, 0, 0])\n        cylinder(h = foot_length, d1 = leg_width - 1, d2 = 2);\n        \n        // Toes\n        for(toe = [0:toe_count-1]) {\n            angle = (toe - 2) * 15;\n            translate([0, sin(angle) * 3, foot_length])\n            rotate([0, angle, 90])\n            cylinder(h = 5, d1 = 1.5, d2 = 0.8);\n        }\n    }\n}\n\nmodule anole_dewlap() {\n    // Throat dewlap\n    translate([body_length/2 - 5, 0, -body_height/2])\n    rotate([0, 0, 90])\n    sphere(d = dewlap_radius);\n    \n    // Support structure\n    translate([body_length/2 - 5, 0, -body_height/2])\n    cylinder(h = dewlap_thickness, d = dewlap_radius);\n}\n\n// Main assembly\nunion() {\n    // Body\n    anole_body();\n    \n    // Head\n    anole_head();\n    \n    // Tail\n    anole_tail();\n    \n    // Dewlap\n    anole_dewlap();\n    \n    // Front legs\n    anole_leg([body_length/3, body_width/2, -body_height/3], 30, 1);\n    anole_leg([body_length/3, -body_width/2, -body_height/3], 30, -1);\n    \n    // Back legs\n    anole_leg([-body_length/3, body_width/2, -body_height/3], -30, 1);\n    anole_leg([-body_length/3, -body_width/2, -body_height/3], -30, -1);\n    \n    // Toes on ground for support\n    translate([body_length/3, body_width/2, -leg_length - 5])\n    sphere(d = 2);\n    translate([body_length/3, -body_width/2, -leg_length - 5])\n    sphere(d = 2);\n    translate([-body_length/3, body_width/2, -leg_length - 5])\n    sphere(d = 2);\n    translate([-body_length/3, -body_width/2, -leg_length - 5])\n    sphere(d = 2);\n}",
    "renders": true
  },
  {
    "animal": "ant",
    "openscad_code": "// Realistic Ant - Medium Complexity\n// Size: ~75mm length\n\n// Body segments\nmodule thorax() {\n    difference() {\n        // Main thorax\n        translate([0, 0, 6]) \n            scale([1.2, 0.8, 0.8])\n            sphere(d=12, $fn=32);\n        \n        // Neck cavity\n        translate([-6, 0, 6])\n            rotate([0, 90, 0])\n            cylinder(h=8, d1=6, d2=4, $fn=16);\n        \n        // Abdomen cavity\n        translate([6, 0, 6])\n            rotate([0, 90, 0])\n            cylinder(h=8, d1=6, d2=4, $fn=16);\n    }\n}\n\nmodule abdomen() {\n    // Abdomen segments\n    for(i = [0:2]) {\n        translate([14 + i*4, 0, 5 - i])\n            scale([1 - i*0.1, 0.9 - i*0.05, 0.8 - i*0.1])\n            sphere(d=10 - i*1.5, $fn=32);\n    }\n}\n\nmodule head() {\n    difference() {\n        // Main head\n        translate([-12, 0, 8])\n            rotate([0, 10, 0])\n            scale([1.2, 1, 0.9])\n            sphere(d=10, $fn=32);\n        \n        // Eye sockets\n        for(side = [-1, 1]) {\n            translate([-14, side*3, 9])\n                sphere(d=3, $fn=16);\n        }\n    }\n    \n    // Eyes\n    for(side = [-1, 1]) {\n        translate([-14.5, side*3, 9])\n            scale([1.1, 1, 0.8])\n            sphere(d=2.5, $fn=16);\n    }\n    \n    // Mandibles\n    for(side = [-1, 1]) {\n        translate([-16, side*1.5, 6])\n            rotate([0, 0, side*20])\n            scale([0.3, 0.3, 1])\n            cylinder(h=6, d1=2, d2=1, $fn=8);\n    }\n}\n\n// Leg segments\nmodule leg_segment(length, angle, thickness) {\n    translate([0, 0, -length/2])\n        rotate([0, angle, 0])\n        cylinder(h=length, d=thickness, $fn=12);\n}\n\nmodule leg(x_pos, side, angle) {\n    translate([x_pos, side*2, 5]) {\n        // Coxa\n        rotate([0, 0, 90])\n            leg_segment(4, 0, 2);\n        \n        // Femur\n        translate([0, side*2, -2])\n            rotate([0, 30, 0])\n            leg_segment(6, 0, 1.5);\n        \n        // Tibia\n        translate([0, side*4, -5])\n            rotate([0, -30, 0])\n            leg_segment(8, 0, 1);\n        \n        // Tarsus segments\n        for(i = [0:2]) {\n            translate([0, side*(6 + i*2), -8 - i*2])\n                rotate([0, -20 - i*10, 0])\n                leg_segment(2, 0, 0.8);\n        }\n    }\n}\n\n// Antenna\nmodule antenna(side) {\n    translate([-12, side*4, 9]) {\n        rotate([0, 0, side*30])\n            leg_segment(8, 0, 0.8);\n        translate([0, side*1, -8])\n            rotate([0, 0, side*20])\n            leg_segment(6, 0, 0.6);\n        translate([0, side*1.5, -14])\n            rotate([0, 0, side*10])\n            leg_segment(4, 0, 0.4);\n    }\n}\n\n// Main assembly\nscale([1.5, 1.5, 1.5]) {\n    // Body\n    union() {\n        head();\n        thorax();\n        abdomen();\n    }\n    \n    // Legs - 3 pairs\n    for(pair = [0:2]) {\n        leg(-8 + pair*8, 1, 0);\n        leg(-8 + pair*8, -1, 0);\n    }\n    \n    // Antennae\n    antenna(1);\n    antenna(-1);\n}",
    "renders": true
  },
  {
    "animal": "anteater",
    "openscad_code": "// Anteater model for 3D printing\n// Medium complexity, realistic style\n\n$fn = 32;\n\nmodule anteater() {\n    // Body\n    color(\"saddlebrown\")\n    translate([0, 0, 15])\n    scale([1.5, 0.8, 0.7])\n    sphere(20);\n\n    // Head/snout\n    color(\"saddlebrown\")\n    translate([-45, 0, 18])\n    rotate([0, 0, -10])\n    scale([4, 0.8, 0.8])\n    cylinder(h = 30, r1 = 5, r2 = 3);\n\n    // Ears\n    color(\"saddlebrown\")\n    for(side = [-1, 1]) {\n        translate([-15, side * 12, 30])\n        rotate([side * 20, 0, 45 * side])\n        scale([1, 0.5, 1])\n        sphere(5);\n    }\n\n    // Eyes\n    color(\"black\")\n    for(side = [-1, 1]) {\n        translate([-35, side * 8, 25])\n        sphere(2);\n    }\n\n    // Legs\n    color(\"saddlebrown\")\n    for(side = [-1, 1]) {\n        // Front legs\n        translate([-20, side * 15, 0])\n        rotate([0, 15, 0])\n        cylinder(h = 20, r = 4);\n        \n        // Front paws\n        translate([-20, side * 15, -2])\n        sphere(5);\n        \n        // Back legs\n        translate([20, side * 12, 0])\n        rotate([0, 15, 0])\n        cylinder(h = 18, r = 4);\n        \n        // Back paws\n        translate([20, side * 12, -2])\n        sphere(5);\n    }\n\n    // Tail\n    color(\"saddlebrown\")\n    translate([35, 0, 20])\n    rotate([30, 0, 0])\n    scale([0.8, 0.8, 1])\n    cylinder(h = 40, r1 = 8, r2 = 4);\n\n    // Claws - small cylinders on paws\n    color(\"darkgray\")\n    for(side = [-1, 1]) {\n        // Front claws\n        for(i = [0:3]) {\n            angle = i * 30 - 45;\n            translate([-20 + cos(angle) * 4, side * 15 + sin(angle) * 4, -4])\n            cylinder(h = 3, r = 0.5);\n        }\n        \n        // Back claws\n        for(i = [0:3]) {\n            angle = i * 30 - 45;\n            translate([20 + cos(angle) * 3.5, side * 12 + sin(angle) * 3.5, -4])\n            cylinder(h = 3, r = 0.5);\n        }\n    }\n\n    // Belly detail\n    color(\"burlywood\")\n    translate([0, 0, 8])\n    scale([1.3, 0.6, 0.3])\n    sphere(15);\n\n    // Snout tip\n    color(\"black\")\n    translate([-58, 0, 18])\n    sphere(2);\n}\n\n// Create the anteater\nanteater();",
    "renders": true
  },
  {
    "animal": "antelope",
    "openscad_code": "// Antelope - Realistic Style, Medium Complexity (50-100 mm)\n// Designed for 3D printing – no steep overhangs, 2 mm wall thickness\n\n$fn = 32;          // Smooth curves\nth = 2;            // Wall thickness for printing\n\nmodule body() {\n    // Main torso\n    difference() {\n        scale([1.5, 0.6, 1]) sphere(d=40);\n        translate([0,0,-20]) cube([50,50,20], center=true);\n    }\n    // Belly bulge\n    translate([0,0,-10]) scale([1.4, 0.8, 0.9]) sphere(d=35);\n}\n\nmodule neck() {\n    translate([-20,0,10]) rotate([0,40,0])\n        scale([0.8,0.8,1.2]) cylinder(h=25, d1=15, d2=10);\n}\n\nmodule head() {\n    translate([-35,0,28]) rotate([0,30,0])\n    union() {\n        // Skull\n        scale([1.5,0.8,1]) sphere(d=14);\n        // Snout\n        translate([-7,0,-3]) scale([1.2,0.6,0.6]) sphere(d=10);\n    }\n}\n\nmodule ears() {\n    // Left ear\n    translate([-32,6,32]) rotate([0,0,-20])\n        scale([0.3,0.1,1]) cylinder(h=8, d1=2, d2=0.5);\n    // Right ear\n    translate([-32,-6,32]) mirror([0,1,0])\n        scale([0.3,0.1,1]) cylinder(h=8, d1=2, d2=0.5);\n}\n\nmodule horns() {\n    // Left horn\n    translate([-30,4,35]) rotate([20,0,-30])\n        cylinder(h=20, d1=2, d2=0.5);\n    // Right horn\n    translate([-30,-4,35]) mirror([0,1,0])\n        cylinder(h=20, d1=2, d2=0.5);\n}\n\nmodule leg(pos, angle) {\n    translate(pos) rotate([angle,0,0])\n    union() {\n        // Upper leg\n        cylinder(h=20, d=5);\n        // Lower leg\n        translate([0,0,-20]) cylinder(h=20, d=4);\n        // Hoof\n        translate([0,0,-40]) cylinder(h=3, d=4);\n    }\n}\n\nmodule legs() {\n    // Front legs\n    leg([-15, 7, -18], 20);\n    leg([-15, -7, -18], 20);\n    // Hind legs\n    leg([15, 7, -18], -20);\n    leg([15, -7, -18], -20);\n}\n\nmodule tail() {\n    translate([22,0,0]) rotate([0,0,30])\n        cylinder(h=12, d1=3, d2=1);\n}\n\n// Assemble the antelope\nunion() {\n    body();\n    neck();\n    head();\n    ears();\n    horns();\n    legs();\n    tail();\n}",
    "renders": true
  },
  {
    "animal": "antlion",
    "openscad_code": "// Realistic Antlion Model - Medium Complexity\n// Basic body length ~60mm\n\n// Parameters\nbody_length = 60;\nbody_width = 25;\nhead_length = 15;\nmandible_length = 18;\nleg_thickness = 1.5;\nleg_length = 35;\nwing_length = 30;\nabdomen_segments = 6;\n$fn = 32;\n\n// Main module\nmodule antlion() {\n    // Central body assembly\n    union() {\n        // Head with mandibles\n        translate([body_length/2 + head_length/2, 0, 0])\n            head();\n        \n        // Thorax\n        translate([0, 0, 0])\n            thorax();\n        \n        // Abdomen\n        translate([-body_length/2 - 5, 0, 0])\n            abdomen();\n        \n        // Legs - 3 pairs\n        for(i = [0:2]) {\n            rotate([0, 0, 120*i + 60])\n                translate([body_length/3, 0, 0])\n                    leg_pair(i);\n        }\n        \n        // Wings folded over back\n        wings();\n    }\n}\n\n// Head module with compound eyes and mandibles\nmodule head() {\n    union() {\n        // Main head capsule\n        scale([1.2, 1, 0.8])\n            sphere(d=head_length);\n        \n        // Compound eyes\n        for(side = [-1, 1]) {\n            translate([head_length/3, side*head_length/3, head_length/4])\n                sphere(d=head_length/3);\n            translate([head_length/3, side*head_length/3, -head_length/4])\n                sphere(d=head_length/3);\n        }\n        \n        // Mandibles\n        for(side = [-1, 1]) {\n            translate([head_length/2 + mandible_length/2, side*head_length/4, 0])\n                rotate([0, 0, side * 20])\n                    cylinder(h=mandible_length, d1=leg_thickness*2, d2=leg_thickness, center=false);\n        }\n    }\n}\n\n// Thorax module\nmodule thorax() {\n    union() {\n        // Main thorax\n        scale([1.5, 1.2, 1])\n            sphere(d=body_width);\n        \n        // Thorax segments\n        for(i = [0:2]) {\n            translate([i*body_width/4 - body_width/2, 0, 0])\n                scale([1.3 - i*0.1, 1.1 - i*0.05, 0.9 - i*0.05])\n                    sphere(d=body_width);\n        }\n    }\n}\n\n// Segmented abdomen\nmodule abdomen() {\n    for(i = [0:abdomen_segments-1]) {\n        translate([-i*body_width/2, 0, 0])\n            scale([1 - i*0.08, 1 - i*0.1, 1 - i*0.05])\n                sphere(d=body_width);\n    }\n}\n\n// Leg pair module\nmodule leg_pair(pair_num) {\n    // Front, middle, and rear leg variations\n    angle_offset = pair_num == 0 ? 30 : pair_num == 1 ? 0 : -30;\n    \n    for(side = [-1, 1]) {\n        // Coxa\n        translate([0, side*body_width/3, 0])\n            rotate([0, 0, side * 30])\n                cylinder(h=leg_thickness*3, d=leg_thickness*2);\n        \n        // Femur\n        translate([0, side*body_width/2, 0])\n            rotate([0, 0, side * (45 + angle_offset)])\n                cylinder(h=leg_length/2, d1=leg_thickness*1.5, d2=leg_thickness);\n        \n        // Tibia\n        translate([cos(side*(45+angle_offset))*leg_length/2, \n                  side*body_width/2 + sin(side*(45+angle_offset))*leg_length/2, 0])\n            rotate([0, 0, side * (90 + angle_offset)])\n                cylinder(h=leg_length/2, d=leg_thickness);\n    }\n}\n\n// Folded wings\nmodule wings() {\n    for(side = [-1, 1]) {\n        translate([0, side*body_width/2, body_width/2])\n            rotate([0, 90, side * 15])\n                scale([1, 0.3, 1])\n                    cylinder(h=wing_length, d=body_width/2);\n    }\n}\n\n// Generate the model\nantlion();",
    "renders": true
  },
  {
    "animal": "armadillo",
    "openscad_code": "$fn = 32;\n\n// Adjustable scale for printing\nscale_factor = 0.5;  // 1.0 = ~100mm length\n\n// Main body parameters\nbody_length = 100 * scale_factor;\nbody_height = 25 * scale_factor;\nbody_width = 40 * scale_factor;\n\n// Head parameters\nhead_length = 25 * scale_factor;\nhead_width = 20 * scale_factor;\nhead_height = 15 * scale_factor;\n\n// Tail parameters\ntail_length = 60 * scale_factor;\ntail_segments = 8;\n\n// Leg parameters\nleg_height = 20 * scale_factor;\nleg_width = 8 * scale_factor;\n\n// Armored shell parameters\nshell_segments = 9;\nsegment_width = body_width * 1.1;\nsegment_height = 8 * scale_factor;\n\nmodule armadillo() {\n    union() {\n        // Central body with armored shell\n        translate([0, 0, leg_height]) {\n            // Main body core\n            color(\"saddlebrown\")\n            difference() {\n                scale([1, 0.7, 0.5])\n                sphere(d = body_width);\n                \n                // Hollow for printing\n                scale([0.8, 0.6, 0.4])\n                sphere(d = body_width * 0.9);\n            }\n            \n            // Armored shell segments\n            for(i = [0:shell_segments-1]) {\n                translate([\n                    -body_length/2 + (i * body_length/(shell_segments-1)),\n                    0,\n                    body_height/2\n                ]) {\n                    rotate([90, 0, 0])\n                    scale([1, 0.3, 1])\n                    cylinder(h = segment_height, d1 = segment_width, d2 = segment_width * 0.8);\n                }\n            }\n            \n            // Side armor bands\n            for(side = [-1, 1]) {\n                for(i = [0:shell_segments-1]) {\n                    translate([\n                        -body_length/2 + (i * body_length/(shell_segments-1)),\n                        side * body_width/2.5,\n                        body_height/2\n                    ]) {\n                        rotate([60 * side, 0, 90])\n                        scale([0.5, 1, 0.5])\n                        cylinder(h = segment_height * 1.5, d1 = segment_width/3, d2 = segment_width/4);\n                    }\n                }\n            }\n        }\n        \n        // Head\n        translate([body_length/2 + head_length/2, 0, leg_height + 5]) {\n            // Snout\n            color(\"tan\")\n            scale([1.5, 0.8, 0.6])\n            sphere(d = head_width);\n            \n            // Ears\n            translate([0, head_width/2, head_height/2]) {\n                rotate([0, 45, 0])\n                cylinder(h = 8 * scale_factor, d1 = 5 * scale_factor, d2 = 3 * scale_factor);\n            }\n            translate([0, -head_width/2, head_height/2]) {\n                rotate([0, -45, 0])\n                cylinder(h = 8 * scale_factor, d1 = 5 * scale_factor, d2 = 3 * scale_factor);\n            }\n            \n            // Eyes\n            translate([head_length/2 - 3, head_width/3, 2]) {\n                sphere(d = 3 * scale_factor);\n            }\n            translate([head_length/2 - 3, -head_width/3, 2]) {\n                sphere(d = 3 * scale_factor);\n            }\n            \n            // Nose\n            translate([head_length/2 + 2, 0, 0]) {\n                sphere(d = 2 * scale_factor);\n            }\n        }\n        \n        // Tail\n        translate([-body_length/2 - tail_length/2, 0, leg_height + 5]) {\n            for(i = [0:tail_segments-1]) {\n                translate([\n                    -i * tail_length/tail_segments,\n                    0,\n                    -i * 2\n                ]) {\n                    rotate([0, 0, -i * 5])\n                    scale([1 - i*0.08, 1 - i*0.08, 1 - i*0.08])\n                    cylinder(h = tail_length/tail_segments + 2, d1 = 12 * scale_factor, d2 = 10 * scale_factor);\n                }\n            }\n        }\n        \n        // Legs\n        for(side = [-1, 1]) {\n            // Front legs\n            translate([body_length/3, side * body_width/2, 0]) {\n                color(\"saddlebrown\")\n                cylinder(h = leg_height, d = leg_width);\n                \n                // Feet\n                translate([0, 0, -1])\n                scale([1.5, 2, 0.5])\n                sphere(d = leg_width);\n            }\n            \n            // Rear legs\n            translate([-body_length/3, side * body_width/2, 0]) {\n                cylinder(h = leg_height, d = leg_width);\n                \n                // Feet\n                translate([0, 0, -1])\n                scale([1.5, 2, 0.5])\n                sphere(d = leg_width);\n            }\n        }\n        \n        // Claws\n        for(side = [-1, 1]) {\n            for(pos = [body_length/3, -body_length/3]) {\n                for(claw = [-1, 0, 1]) {\n                    translate([pos, side * (body_width/2 + 8), 0]) {\n                        rotate([90, 0, 0])\n                        translate([claw * 3, 0, -5])\n                        cylinder(h = 5, d1 = 2, d2 = 0.5);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Generate the model\narmadillo();",
    "renders": true
  },
  {
    "animal": "asp",
    "openscad_code": "// Realistic Asp - Medium Complexity\n// Designed for 3D printing, approximately 80mm length\n\n// Global parameters\nbody_length = 80;\nbody_diameter = 8;\nhead_length = 12;\nhead_diameter = 10;\ntail_taper = 15;\nscale_factor = 1;\n\n// Main asp body\nmodule asp_body() {\n    union() {\n        // Head\n        translate([body_length - head_length/2, 0, 0])\n            rotate([0, -15, 0])\n            scale([1.2, 1, 1.1])\n            sphere(d=head_diameter, $fn=20);\n        \n        // Body segments with taper\n        for(i = [0:4]) {\n            translate([i * (body_length - head_length - tail_taper)/5, 0, 0])\n                scale([1 - i*0.15, 1 - i*0.12, 1 - i*0.12])\n                cylinder(h=(body_length - head_length - tail_taper)/5, d=body_diameter, $fn=16);\n        }\n        \n        // Tail taper\n        translate([body_length - head_length - tail_taper/2, 0, 0])\n            cylinder(h=tail_taper, d1=body_diameter*0.85, d2=2, $fn=12);\n    }\n}\n\n// Eyes with proper positioning\nmodule eyes() {\n    for(side = [-1, 1]) {\n        translate([body_length - head_length*0.7, side * head_diameter/3, head_diameter/4])\n            rotate([0, 90, 0])\n            difference() {\n                cylinder(h=head_diameter/3, d=head_diameter/4, $fn=12);\n                translate([0, 0, -0.1])\n                    cylinder(h=head_diameter/3 + 0.2, d=head_diameter/6, $fn=10);\n            }\n    }\n}\n\n// Hood structure (cobra-like)\nmodule hood() {\n    translate([body_length - head_length*0.8, 0, 0])\n        rotate([0, -20, 0])\n        difference() {\n            // Main hood\n            scale([1.5, 3, 0.5])\n            sphere(d=head_diameter*1.8, $fn=20);\n            \n            // Cutout for neck\n            translate([0, 0, -head_diameter/2])\n                cylinder(h=head_diameter, d=head_diameter*0.8, $fn=16);\n            \n            // Eye cutouts\n            for(side = [-1, 1]) {\n                translate([0, side * head_diameter/2, 0])\n                    sphere(d=head_diameter/2, $fn=12);\n            }\n        }\n}\n\n// Body pattern (scales)\nmodule scales() {\n    for(i = [1:12]) {\n        rotate([0, 0, i * 30])\n        translate([body_length/2 - i*3, 0, body_diameter/2 + 0.5])\n            scale([0.8, 0.4, 0.2])\n            sphere(d=body_diameter/2, $fn=8);\n    }\n}\n\n// Tongue\nmodule tongue() {\n    translate([body_length - head_length + 2, 0, -head_diameter/3])\n        rotate([0, 90, 0])\n        union() {\n            // Base\n            cylinder(h=head_length/2, d=head_diameter/6, $fn=8);\n            \n            // Forked end\n            for(side = [-1, 1]) {\n                translate([head_length/2 - 0.5, side * head_diameter/10, 0])\n                    cylinder(h=head_length/4, d=head_diameter/12, $fn=6);\n            }\n        }\n}\n\n// Assembly\nunion() {\n    // Main body\n    asp_body();\n    \n    // Hood (only on cobras, but adds realism)\n    hood();\n    \n    // Eyes\n    color(\"black\") eyes();\n    \n    // Tongue\n    color(\"red\") tongue();\n    \n    // Scale texture\n    color([0.3, 0.5, 0.3]) scales();\n}\n\n// Base for 3D printing stability\ntranslate([-5, 0, -body_diameter/2 - 1])\n    cube([body_length + 10, body_diameter*1.5, 2]);",
    "renders": true
  },
  {
    "animal": "ass",
    "openscad_code": "// Realistic Ass - Medium Complexity\n// Designed for 3D printing with no overhangs\n\n// Overall dimensions: 80mm width x 60mm depth x 50mm height\n\n$fn = 32;  // Smooth curves\n\nmodule ass() {\n    // Main body - two rounded cheeks\n    union() {\n        // Left cheek\n        translate([-20, 0, 0])\n            scale([1, 0.8, 0.6])\n                sphere(d=50);\n        \n        // Right cheek\n        translate([20, 0, 0])\n            scale([1, 0.8, 0.6])\n                sphere(d=50);\n        \n        // Center connection\n        translate([0, -10, -5])\n            cube([40, 30, 25], center=true);\n    }\n    \n    // Crack between cheeks\n    difference() {\n        // Main body\n        translate([0, 0, -5])\n            cube([38, 30, 30], center=true);\n        \n        // Groove\n        translate([0, 0, 0])\n            rotate([0, 10, 0])\n                cube([3, 35, 35], center=true);\n    }\n    \n    // Lower curves\n    union() {\n        // Left under-curve\n        translate([-25, -15, -15])\n            rotate([0, 0, -15])\n                scale([1, 1.2, 0.8])\n                    cylinder(h=30, d1=25, d2=15);\n        \n        // Right under-curve\n        translate([25, -15, -15])\n            rotate([0, 0, 15])\n                scale([1, 1.2, 0.8])\n                    cylinder(h=30, d1=25, d2=15);\n    }\n    \n    // Upper back curve\n    translate([0, 15, 15])\n        rotate([90, 0, 0])\n            cylinder(h=45, d1=55, d2=45);\n    \n    // Horizontal crease\n    difference() {\n        translate([0, -5, 5])\n            cube([45, 3, 5], center=true);\n        \n        // Smooth the edges\n        translate([0, -5, 7.5])\n            sphere(d=5);\n    }\n    \n    // Side dimples\n    difference() {\n        // Left dimple\n        translate([-35, 5, 0])\n            sphere(d=8);\n        \n        // Right dimple\n        translate([35, 5, 0])\n            sphere(d=8);\n    }\n}\n\n// Create the model\nass();",
    "renders": true
  },
  {
    "animal": "aurochs",
    "openscad_code": "// Aurochs - Extinct wild cattle ancestor\n// Medium complexity realistic style for 3D printing\n\nmodule leg() {\n    // Upper leg\n    translate([0, 0, 8])\n        cylinder(h=15, r1=3, r2=2.5, $fn=12);\n    \n    // Lower leg\n    translate([0, 0, 0])\n        cylinder(h=8, r1=2.5, r2=2, $fn=12);\n    \n    // Hoof\n    translate([0, 0, -2])\n        cylinder(h=3, r1=2, r2=1.5, $fn=8);\n}\n\nmodule horn() {\n    // Base curve\n    rotate([0, 20, 0])\n        cylinder(h=8, r1=2.5, r2=1.5, $fn=8);\n    \n    // Main horn\n    translate([0, 0, 7])\n        rotate([0, 30, 0])\n            cylinder(h=12, r1=1.5, r2=0.5, $fn=8);\n    \n    // Tip\n    translate([0, 0, 18])\n        rotate([0, 45, 0])\n            cylinder(h=3, r1=0.5, r2=0.1, $fn=6);\n}\n\nmodule body() {\n    // Main torso\n    scale([1.5, 1, 1.2])\n        sphere(r=15, $fn=32);\n    \n    // Belly bulge\n    translate([0, 0, -10])\n        scale([1.3, 0.8, 0.6])\n            sphere(r=15, $fn=32);\n    \n    // Hump\n    translate([-10, 0, 5])\n        scale([0.8, 0.8, 1.2])\n            sphere(r=10, $fn=24);\n}\n\nmodule head() {\n    // Skull\n    scale([1.2, 0.9, 0.8])\n        sphere(r=8, $fn=24);\n    \n    // Muzzle\n    translate([8, 0, -2])\n        scale([1, 0.8, 0.8])\n            sphere(r=6, $fn=24);\n    \n    // Nose\n    translate([13, 0, -3])\n        scale([0.5, 0.6, 0.4])\n            sphere(r=3, $fn=16);\n    \n    // Left horn\n    translate([-3, 5, 5])\n        rotate([0, 0, -30])\n            horn();\n    \n    // Right horn\n    translate([-3, -5, 5])\n        rotate([0, 0, 30])\n            mirror([0, 1, 0])\n                horn();\n}\n\nmodule tail() {\n    // Tail base\n    translate([-25, 0, 8])\n        rotate([0, 20, 0])\n            cylinder(h=12, r1=2, r2=1, $fn=8);\n    \n    // Tail tuft\n    translate([-30, 0, 5])\n        sphere(r=2, $fn=12);\n}\n\n// Assembly\nunion() {\n    // Body\n    translate([0, 0, 20])\n        body();\n    \n    // Head\n    translate([20, 0, 30])\n        rotate([0, -20, 0])\n            head();\n    \n    // Legs\n    // Front left\n    translate([15, 8, 15])\n        rotate([10, 0, 0])\n            leg();\n    \n    // Front right\n    translate([15, -8, 15])\n        rotate([10, 0, 0])\n            leg();\n    \n    // Rear left\n    translate([-15, 8, 15])\n        rotate([-10, 0, 0])\n            leg();\n    \n    // Rear right\n    translate([-15, -8, 15])\n        rotate([-10, 0, 0])\n            leg();\n    \n    // Tail\n    tail();\n}",
    "renders": true
  },
  {
    "animal": "avocet",
    "openscad_code": "// Avocet 3D Model - Medium Complexity, Realistic Style\n// Based on pied avocet (Recurvirostra avosetta)\n\n$fn = 32; // Smooth curves for 3D printing\n\n// Main body parameters\nbody_length = 60;\nbody_height = 25;\nbody_width = 15;\n\n// Wing parameters\nwing_length = 35;\nwing_width = 12;\nwing_thickness = 1.5;\n\n// Head parameters\nhead_length = 20;\nhead_height = 12;\nbeak_length = 35;\nbeak_height = 3;\n\n// Leg parameters\nleg_height = 35;\nleg_thickness = 2;\nfoot_length = 8;\nfoot_width = 3;\n\n// Module for the main body\nmodule avocet_body() {\n    // Central body - elliptical shape\n    scale([1, 0.7, 0.5])\n    sphere(d=body_length);\n    \n    // Tail extension\n    translate([-body_length/2 - 5, 0, 0])\n    scale([1.5, 0.3, 0.2])\n    sphere(d=10);\n    \n    // Back ridge\n    translate([0, 0, body_height/4])\n    rotate([90, 0, 0])\n    cylinder(h=body_length/1.5, r1=2, r2=0.5);\n}\n\n// Module for the head and beak\nmodule avocet_head() {\n    // Head\n    translate([body_length/2 + head_length/2, 0, body_height/2])\n    scale([1.2, 0.9, 0.9])\n    sphere(d=head_length);\n    \n    // Beak - curved upward\n    translate([body_length/2 + head_length + beak_length/2, 0, body_height/2])\n    rotate([0, -10, 0])\n    scale([beak_length, beak_height, beak_height])\n    cube([1, 1, 1], center=true);\n    \n    // Beak tip\n    translate([body_length/2 + head_length + beak_length, 0, body_height/2])\n    sphere(d=beak_height);\n    \n    // Eye\n    translate([body_length/2 + head_length/2 - 3, body_height/4, body_height/2])\n    sphere(d=2);\n}\n\n// Module for wings\nmodule avocet_wings() {\n    // Left wing\n    translate([-5, body_width/2 + wing_width/2, body_height/3])\n    rotate([0, 0, -20])\n    scale([1, 0.3, 0.1])\n    difference() {\n        cube([wing_length, wing_width, wing_thickness]);\n        // Wing tip curve\n        translate([wing_length - 5, wing_width/2, 0])\n        sphere(d=10);\n    }\n    \n    // Right wing (mirrored)\n    mirror([0, 1, 0])\n    translate([-5, body_width/2 + wing_width/2, body_height/3])\n    rotate([0, 0, -20])\n    scale([1, 0.3, 0.1])\n    difference() {\n        cube([wing_length, wing_width, wing_thickness]);\n        translate([wing_length - 5, wing_width/2, 0])\n        sphere(d=10);\n    }\n}\n\n// Module for legs and feet\nmodule avocet_legs() {\n    // Left leg\n    translate([body_length/4, body_width/4, -body_height/2 - leg_height/2])\n    cylinder(h=leg_height, r=leg_thickness);\n    \n    // Left foot\n    translate([body_length/4 + foot_length/2, body_width/4 + foot_width/2, -body_height/2 - leg_height])\n    cube([foot_length, foot_width, 2]);\n    \n    // Right leg\n    translate([body_length/4, -body_width/4, -body_height/2 - leg_height/2])\n    cylinder(h=leg_height, r=leg_thickness);\n    \n    // Right foot\n    translate([body_length/4 + foot_length/2, -body_width/4 - foot_width/2, -body_height/2 - leg_height])\n    cube([foot_length, foot_width, 2]);\n}\n\n// Module for neck\nmodule avocet_neck() {\n    translate([body_length/2 - 5, 0, 0])\n    rotate([0, -20, 0])\n    cylinder(h=15, r1=body_width/2, r2=body_width/3);\n}\n\n// Assemble all parts\nunion() {\n    // Main body\n    avocet_body();\n    \n    // Neck\n    avocet_neck();\n    \n    // Head and beak\n    avocet_head();\n    \n    // Wings\n    avocet_wings();\n    \n    // Legs and feet\n    avocet_legs();\n}",
    "renders": true
  },
  {
    "animal": "axolotl",
    "openscad_code": "// Axolotl - Realistic Style, Medium Complexity\n// Designed for 3D printing (no overhangs >45°, 1.2mm walls)\n\nmodule body() {\n    union() {\n        // Main body - egg-shaped\n        scale([1, 0.7, 0.4])\n            sphere(25);\n        \n        // Tail\n        translate([0, -30, 0])\n            rotate([0, 15, 0])\n                scale([0.8, 2.5, 0.3])\n                    sphere(10);\n    }\n}\n\nmodule head() {\n    translate([0, 25, 0])\n    union() {\n        // Head sphere\n        sphere(15);\n        \n        // Snout extension\n        translate([0, 12, 0])\n            scale([0.6, 0.8, 0.6])\n                sphere(10);\n    }\n}\n\nmodule eyes() {\n    for(x = [-7, 7]) {\n        translate([x, 28, 8])\n        union() {\n            // Eye socket\n            difference() {\n                sphere(5);\n                translate([0, 0, 2])\n                    sphere(4.5);\n            }\n            // Eyeball\n            translate([0, 0, 1])\n                sphere(3);\n        }\n    }\n}\n\nmodule gills() {\n    module gill_branch(x, angle) {\n        rotate([0, 0, angle])\n            translate([x, 32, 0])\n                for(i = [0:2]) {\n                    rotate([0, 0, 45 * i])\n                        cylinder(h = 8, r1 = 1.5, r2 = 0.5);\n                }\n    }\n    \n    gill_branch(10, 0);\n    gill_branch(0, 120);\n    gill_branch(-10, 240);\n}\n\nmodule legs() {\n    module leg(x, y, rot) {\n        translate([x, y, -8])\n        rotate([0, 0, rot])\n        union() {\n            // Upper leg\n            cylinder(h = 12, r1 = 4, r2 = 3);\n            \n            // Lower leg\n            translate([0, 12, 0])\n                rotate([0, 30, 0])\n                    cylinder(h = 10, r1 = 3, r2 = 2);\n            \n            // Foot\n            translate([0, 19, 2])\n                rotate([0, -30, 0])\n                    scale([1.5, 0.8, 0.5])\n                        sphere(3);\n        }\n    }\n    \n    // Front legs\n    leg(15, 18, 30);\n    leg(-15, 18, -30);\n    \n    // Back legs\n    leg(12, -15, 45);\n    leg(-12, -15, -45);\n}\n\nmodule toes() {\n    for(side = [-1, 1]) {\n        for(pos = [15, -15]) {\n            translate([side * pos, 18 + (pos < 0 ? -33 : 0), -13])\n            rotate([0, side * 30, side * (pos > 0 ? 30 : 45)])\n            for(i = [-1, 0, 1]) {\n                translate([i * 2, 19, 2])\n                    scale([0.5, 2, 0.3])\n                        sphere(1.5);\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    body();\n    head();\n    eyes();\n    gills();\n    legs();\n    toes();\n}",
    "renders": true
  },
  {
    "animal": "ayeaye",
    "openscad_code": "// Aye-aye (Daubentonia madagascariensis) - medium complexity, realistic style\n// Body length ~70mm, tail adds another 60mm\n\n// Parameters\nbody_length = 35;\nbody_height = 20;\nbody_width = 18;\nhead_length = 20;\nhead_height = 15;\near_size = 12;\nfinger_length = 18;\nfinger_diameter = 1.5;\nleg_length = 12;\ntail_length = 30;\ntail_diameter = 4;\n\n// Wall thickness for 3D printing\nwall = 1.5;\n\nmodule rounded_box(l, w, h, r) {\n    hull() {\n        translate([r, r, r]) sphere(r);\n        translate([l - r, r, r]) sphere(r);\n        translate([l - r, w - r, r]) sphere(r);\n        translate([r, w - r, r]) sphere(r);\n        translate([r, r, h - r]) sphere(r);\n        translate([l - r, r, h - r]) sphere(r);\n        translate([l - r, w - r, h - r]) sphere(r);\n        translate([r, w - r, h - r]) sphere(r);\n    }\n}\n\nmodule body() {\n    union() {\n        // Main torso\n        translate([0, 0, 0])\n            rounded_box(body_length, body_width, body_height, 5);\n        \n        // Rounded back\n        translate([body_length/2, 0, body_height/2])\n            scale([1.2, 1.1, 0.8])\n                sphere(body_height/2);\n    }\n}\n\nmodule head() {\n    translate([body_length, 0, body_height/2]) {\n        rotate([0, -10, 0]) {\n            // Skull shape\n            difference() {\n                hull() {\n                    sphere(head_height/2);\n                    translate([head_length - head_height/2, 0, 0])\n                        sphere(head_height/2);\n                }\n                \n                // Eye sockets\n                translate([head_length - 5, -4, 3])\n                    sphere(2.5);\n                translate([head_length - 5, 4, 3])\n                    sphere(2.5);\n            }\n            \n            // Large ears\n            translate([-2, -ear_size/2, head_height/2])\n                rotate([0, 0, -30])\n                    scale([0.8, 2, 0.3])\n                        sphere(ear_size/2);\n            translate([-2, ear_size/2, head_height/2])\n                rotate([0, 0, 30])\n                    scale([0.8, 2, 0.3])\n                        sphere(ear_size/2);\n            \n            // Long middle finger\n            translate([head_length + 2, 0, -2])\n                rotate([0, 90, 0])\n                    cylinder(h = finger_length, d = finger_diameter, $fn = 8);\n        }\n    }\n}\n\nmodule limbs() {\n    // Front legs\n    for(side = [-1, 1]) {\n        translate([body_length/2 - 5, side * body_width/2, 0])\n            rotate([0, 0, side * 30])\n                cylinder(h = leg_length, d = 4, $fn = 8);\n    }\n    \n    // Hind legs\n    for(side = [-1, 1]) {\n        translate([5, side * body_width/2 + 2, 0])\n            rotate([0, 0, side * 45])\n                cylinder(h = leg_length + 3, d = 5, $fn = 8);\n    }\n}\n\nmodule tail() {\n    translate([0, 0, body_height/2 - 2])\n        rotate([0, 90, 0])\n            cylinder(h = tail_length, d1 = tail_diameter, d2 = 2, $fn = 12);\n    \n    // Tail fur texture\n    for(i = [0:3:tail_length]) {\n        translate([0, 0, i])\n            rotate([0, 90, 0])\n                cylinder(h = 3, d = tail_diameter * 1.3, $fn = 8);\n    }\n}\n\n// Assemble the aye-aye\nunion() {\n    body();\n    head();\n    limbs();\n    tail();\n}",
    "renders": true
  }
]