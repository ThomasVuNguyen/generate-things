[
  {
    "animal": "aardvark",
    "openscad_code": "// Aardvark model - medium complexity, realistic style\n// Overall dimensions: ~80mm long\n\n// Body parameters\nbody_length = 45;\nbody_height = 25;\nbody_width = 20;\n\n// Head parameters\nhead_length = 20;\nhead_height = 15;\nhead_width = 12;\n\n// Snout parameters\nsnout_length = 25;\nsnout_diameter = 6;\n\n// Leg parameters\nleg_height = 20;\nleg_width = 6;\nleg_depth = 8;\n\n// Ear parameters\near_length = 8;\near_width = 6;\near_thickness = 2;\n\n// Tail parameters\ntail_length = 30;\ntail_diameter = 5;\n\n// Helper module for rounded box\nmodule rounded_box(w, h, d, r) {\n    translate([0, r, 0])\n    hull() {\n        for(x = [-w/2+r, w/2-r])\n        for(z = [-d/2+r, d/2-r]) {\n            translate([x, 0, z])\n            sphere(r);\n        }\n    }\n    cube([w-2*r, h-r, d], center=true);\n    translate([0, h-r, 0])\n    hull() {\n        for(x = [-w/2+r, w/2-r])\n        for(z = [-d/2+r, d/2-r]) {\n            translate([x, 0, z])\n            sphere(r);\n        }\n    }\n}\n\n// Body module\nmodule body() {\n    union() {\n        // Main body\n        color(\"tan\")\n        rounded_box(body_width, body_height, body_length, 5);\n        \n        // Back hump\n        translate([0, body_height/2, -body_length/4])\n        rotate([0, 0, 0])\n        scale([1, 0.8, 0.6])\n        sphere(body_height/1.5);\n    }\n}\n\n// Head module\nmodule head() {\n    union() {\n        // Main head\n        color(\"tan\")\n        translate([0, body_height/2 + 5, body_length/2 + head_length/2])\n        scale([1, 0.8, 1.2])\n        sphere(head_height/1.2);\n        \n        // Snout\n        color(\"tan\")\n        translate([0, body_height/2 + 5 - head_height/4, body_length/2 + head_length + snout_length/2])\n        rotate([20, 0, 0])\n        cylinder(h=snout_length, d=snout_diameter, $fn=16);\n        \n        // Nose tip\n        translate([0, body_height/2 + 5 - head_height/4 - 3, body_length/2 + head_length + snout_length])\n        sphere(snout_diameter/1.5);\n        \n        // Ears\n        for(side = [-1, 1]) {\n            color(\"tan\")\n            translate([side * head_width/2, body_height/2 + 5 + head_height/2, body_length/2 + head_length/2])\n            rotate([0, -30, side * 30])\n            scale([1, 0.7, 0.3])\n            cylinder(h=ear_length, d=ear_width, $fn=16);\n        }\n        \n        // Eyes\n        for(side = [-1, 1]) {\n            color(\"black\")\n            translate([side * head_width/3, body_height/2 + 5 - head_height/4, body_length/2 + head_length/1.5])\n            sphere(1.5);\n        }\n    }\n}\n\n// Leg module\nmodule leg() {\n    union() {\n        // Upper leg\n        color(\"tan\")\n        cylinder(h=leg_height/2, d1=leg_width+2, d2=leg_width, $fn=16);\n        \n        // Lower leg\n        translate([0, 0, leg_height/2])\n        cylinder(h=leg_height/2, d1=leg_width, d2=leg_width-1, $fn=16);\n        \n        // Foot\n        translate([0, -leg_depth/4, leg_height])\n        scale([1.2, 1, 0.8])\n        sphere(leg_width/1.2);\n    }\n}\n\n// Tail module\nmodule tail() {\n    color(\"tan\")\n    translate([0, body_height/2, -body_length/2 - tail_length/2])\n    rotate([0, 20, 0])\n    cylinder(h=tail_length, d1=tail_diameter, d2=tail_diameter/2, $fn=16);\n}\n\n// Main assembly\nunion() {\n    // Body\n    body();\n    \n    // Head and snout\n    head();\n    \n    // Legs\n    for(pos = [[-body_width/3, 0, body_length/3], \n               [body_width/3, 0, body_length/3],\n               [-body_width/3, 0, -body_length/3],\n               [body_width/3, 0, -body_length/3]]) {\n        translate(pos)\n        translate([0, -body_height/2 - leg_height/2, 0])\n        leg();\n    }\n    \n    // Tail\n    tail();\n}",
    "renders": true
  },
  {
    "animal": "aardwolf",
    "openscad_code": "// Aardwolf - medium complexity realistic model\n// Overall size ~80mm long, 40mm tall\n\n// Body dimensions\nbody_length = 60;\nbody_height = 35;\nbody_width = 25;\n\n// Head dimensions\nhead_length = 20;\nhead_height = 15;\nhead_width = 15;\n\n// Leg dimensions\nleg_height = 20;\nleg_width = 6;\nleg_depth = 8;\n\n// Tail dimensions\ntail_length = 25;\ntail_height = 8;\ntail_width = 6;\n\n// Ear dimensions\near_height = 8;\near_width = 4;\near_depth = 2;\n\n// Mane strip dimensions\nmane_height = 3;\nmane_width = 2;\n\n// Main assembly\nunion() {\n    // Central body\n    translate([-body_length/2, 0, 0])\n    scale([1, 0.8, 0.6])\n    sphere(d=body_width);\n\n    // Extended torso\n    translate([-body_length/3, 0, body_height/4])\n    cube([body_length*0.8, body_width*0.7, body_height*0.5], center=true);\n\n    // Head\n    translate([body_length/2 - 5, 0, body_height/2 + 5])\n    rotate([0, -10, 0])\n    union() {\n        // Main head shape\n        cube([head_length, head_width, head_height], center=true);\n        \n        // Snout extension\n        translate([head_length/2 + 3, 0, -head_height/4])\n        scale([1.5, 0.8, 0.6])\n        sphere(d=head_width);\n        \n        // Nose\n        translate([head_length/2 + 7, 0, -head_height/4])\n        sphere(d=3);\n        \n        // Ears\n        for(side = [-1, 1]) {\n            translate([head_length/4, side*(head_width/2 + ear_width/2), head_height/2])\n            rotate([0, side*10, 0])\n            cube([ear_depth, ear_width, ear_height], center=true);\n        }\n    }\n\n    // Legs\n    for(side = [-1, 1]) {\n        // Front legs\n        translate([body_length/4, side*body_width/2, 0])\n        union() {\n            // Upper leg\n            translate([0, 0, leg_height/2])\n            cube([leg_depth, leg_width, leg_height], center=true);\n            \n            // Paw\n            translate([0, 0, leg_height - 2])\n            sphere(d=leg_width*1.2);\n        }\n        \n        // Rear legs\n        translate([-body_length/3, side*body_width/2, 0])\n        union() {\n            // Upper leg\n            translate([0, 0, leg_height/2])\n            cube([leg_depth*1.2, leg_width*1.1, leg_height*1.1], center=true);\n            \n            // Paw\n            translate([0, 0, leg_height - 2])\n            sphere(d=leg_width*1.2);\n        }\n    }\n\n    // Tail\n    translate([-body_length/2 - tail_length/2, 0, body_height/3])\n    rotate([0, 0, -20])\n    union() {\n        // Tail base\n        cube([tail_length, tail_width, tail_height], center=true);\n        \n        // Tail tip\n        translate([-tail_length/2 - 2, 0, 0])\n        sphere(d=tail_width);\n    }\n\n    // Mane along back\n    for(i = [-body_length/2 + 5 : 5 : body_length/2 - 10]) {\n        translate([i, 0, body_height/2 + mane_height/2])\n        cube([mane_width, body_width*0.8, mane_height], center=true);\n    }\n\n    // Eyes\n    for(side = [-1, 1]) {\n        translate([body_length/2 + 2, side*head_width/3, body_height/2 + 8])\n        sphere(d=2);\n    }\n    \n    // Stripes on body\n    for(i = [-body_length/3 : 8 : body_length/3]) {\n        translate([i, 0, body_height/2 + 1])\n        cube([2, body_width*0.9, 1], center=true);\n    }\n}",
    "renders": true
  },
  {
    "animal": "abalone",
    "openscad_code": "// Abalone shell with realistic features - medium complexity\n// Size: ~70mm length, 3D printable with proper walls\n\n// Shell thickness parameter\nshell_t = 1.5;\n\n// Main shell body module\nmodule shell_body() {\n    difference() {\n        // Outer shell - elliptical dome shape\n        scale([1, 0.7, 0.4])\n        sphere(d=70, $fn=60);\n        \n        // Hollow interior\n        translate([0, 0, -shell_t])\n        scale([0.9, 0.6, 0.35])\n        sphere(d=68, $fn=60);\n    }\n}\n\n// Shell opening (mouth)\nmodule shell_opening() {\n    difference() {\n        // Opening base\n        translate([0, -30, -10])\n        rotate([90, 0, 0])\n        cylinder(h=20, d1=35, d2=25, $fn=40);\n        \n        // Taper the opening\n        translate([0, -35, -10])\n        rotate([90, 0, 0])\n        cylinder(h=25, d1=30, d2=20, $fn=40);\n    }\n}\n\n// Growth rings on shell surface\nmodule growth_rings() {\n    for (i = [1:12]) {\n        rotate([0, 0, i * 15])\n        translate([0, 0, -5 + i * 0.8])\n        scale([1 - i * 0.03, 0.7 - i * 0.02, 0.4])\n        sphere(d=70 - i * 2, $fn=60);\n    }\n}\n\n// Spiral ridges following shell growth\nmodule spiral_ridges() {\n    for (a = [0:30:360]) {\n        rotate([0, 0, a])\n        translate([15, 0, -8])\n        rotate([90, 0, 0])\n        cylinder(h=30, d1=1.5, d2=0.5, $fn=8);\n    }\n    \n    for (a = [15:30:360]) {\n        rotate([0, 0, a])\n        translate([25, 0, -5])\n        rotate([90, 0, 0])\n        cylinder(h=25, d1=1.2, d2=0.4, $fn=8);\n    }\n}\n\n// Muscle attachment scars\nmodule muscle_scars() {\n    // Row of scars near opening\n    for (pos = [[-20, -25, -8], [-10, -28, -8], [0, -30, -8], [10, -28, -8], [20, -25, -8]]) {\n        translate(pos)\n        scale([1.5, 1, 0.5])\n        sphere(d=3, $fn=12);\n    }\n}\n\n// Shell rim/lip\nmodule shell_rim() {\n    difference() {\n        // Outer rim\n        translate([0, -32, -12])\n        rotate([90, 0, 0])\n        cylinder(h=5, d=38, $fn=60);\n        \n        // Inner rim\n        translate([0, -32, -12])\n        rotate([90, 0, 0])\n        cylinder(h=5, d=32, $fn=60);\n    }\n}\n\n// Combine all parts\nunion() {\n    // Main shell structure\n    shell_body();\n    \n    // Add opening\n    shell_opening();\n    \n    // Surface details\n    growth_rings();\n    \n    // Spiral ridges\n    spiral_ridges();\n    \n    // Muscle scars\n    muscle_scars();\n    \n    // Shell rim\n    shell_rim();\n}",
    "renders": true
  },
  {
    "animal": "adder",
    "openscad_code": "// Medium-complexity realistic adder (snake) – 3D printable\n// Overall length ≈ 90 mm, lays flat on the print bed\n// All bridges ≤ 45° or supported by solid material\n\n// Basic parameters\n$fn = 32;               // smooth curves\nbody_len = 90;          // total length\nhead_len = 18;\nhead_w   = 12;\nbody_rad = 6;           // radius of body cross-section\nscale_taper = 0.7;      // tail taper ratio\nsegment_len = 8;        // length of one body segment\nwall = 1.2;             // printable wall thickness\neye_d = 3;\neye_ofs = 4;\n\n// Color definitions (for preview only)\nhead_col = \"darkolivegreen\";\nbody_col = \"olivedrab\";\n\n// Helper: create one body segment with overlapping spheres for smooth joints\nmodule body_segment(idx, total) {\n    // progressive scaling toward tail\n    t = idx / (total - 1);\n    sc = 1 - t * (1 - scale_taper);\n    translate([idx * segment_len * sc, 0, 0])\n        scale([sc, sc, sc])\n        sphere(d = body_rad * 2);\n}\n\n// Head with snout, eyes and forked tongue\nmodule head() {\n    color(head_col)\n    union() {\n        // Main head block\n        translate([0, 0, body_rad])\n            rotate([0, -10, 0])   // slight lift of snout\n            difference() {\n                hull() {\n                    sphere(d = head_w);\n                    translate([head_len - head_w/2, 0, 0])\n                        sphere(d = head_w * 0.7);\n                }\n                // Eye sockets\n                for(side = [-1, 1])\n                    translate([head_len/3, side * eye_ofs, head_w/2 - 1])\n                        rotate([0, 90, 0])\n                        cylinder(h = eye_d + 2, d = eye_d, center = true);\n            }\n\n        // Eyes\n        for(side = [-1, 1])\n            translate([head_len/3, side * eye_ofs, head_w/2 + 0.5])\n                color(\"black\")\n                sphere(d = eye_d);\n\n        // Forked tongue\n        difference() {\n            union() {\n                translate([head_len, 0, 0])\n                    rotate([0, -30, 0])\n                    cube([6, 0.8, 0.8], center = true);\n                translate([head_len + 3, 0, 0])\n                    rotate([0, -30, 0])\n                    cube([4, 0.8, 0.4], center = true);\n            }\n            // split tongue\n            translate([head_len + 3.5, 0, 0])\n                cube([2, 2, 0.5], center = true);\n        }\n    }\n}\n\n// Scaled belly plate to ensure flat bottom\nmodule belly_plate() {\n    color(\"darkgreen\")\n    linear_extrude(height = wall)\n    offset(delta = wall)\n    projection(cut = true)\n    children();\n}\n\n// Main assembly\nunion() {\n    // Head\n    translate([0, 0, body_rad])\n        head();\n\n    // Body segments\n    color(body_col) {\n        segments = floor(body_len / segment_len);\n        for(i = [1 : segments])\n            body_segment(i, segments);\n    }\n\n    // Flattened belly to avoid support\n    translate([0, 0, -body_rad])\n        belly_plate() {\n            union() {\n                // Head underside\n                translate([head_len/2, 0, body_rad])\n                    scale([head_len, head_w, 1])\n                    sphere(d = 2);\n\n                // Body underside\n                segments = floor(body_len / segment_len);\n                for(i = [0 : segments])\n                    body_segment(i, segments);\n            }\n        }\n}",
    "renders": false
  },
  {
    "animal": "agama",
    "openscad_code": "// Realistic Agama Lizard - Medium Complexity\n// 3D printable model with anatomical features\n\n// Global parameters\nbody_length = 60;\nbody_height = 12;\nbody_width = 18;\nhead_length = 15;\nhead_width = 12;\ntail_segments = 15;\nleg_thickness = 5;\n\nmodule agama_body() {\n    // Main torso - elongated ellipsoid\n    difference() {\n        scale([1.8, 1, 0.8])\n            sphere(d=body_width, $fn=32);\n        \n        // Neck transition cut\n        translate([body_length/2 - 5, 0, -body_height/2])\n            cube([10, body_width, body_height], center=true);\n    }\n}\n\nmodule agama_head() {\n    // Triangular head shape\n    union() {\n        // Snout\n        translate([body_length/2 + head_length/2, 0, 0])\n            scale([1.5, 1, 0.7])\n                sphere(d=head_width, $fn=16);\n        \n        // Head base\n        translate([body_length/2, 0, 0])\n            scale([1, 1.2, 0.9])\n                sphere(d=head_width, $fn=16);\n        \n        // Eye ridges\n        for(side = [-1, 1]) {\n            translate([body_length/2 + 3, side * head_width/3, 2])\n                rotate([0, 30, 0])\n                    scale([0.5, 1, 0.3])\n                        sphere(d=3, $fn=8);\n        }\n    }\n}\n\nmodule agama_eyes() {\n    // Eyes with pupils\n    for(side = [-1, 1]) {\n        translate([body_length/2 + 5, side * head_width/3, 1.5])\n            color(\"black\")\n                sphere(d=2, $fn=16);\n        \n        translate([body_length/2 + 5.5, side * head_width/3, 1.7])\n            color(\"white\")\n                sphere(d=0.8, $fn=8);\n    }\n}\n\nmodule agama_limbs() {\n    // Front legs\n    for(side = [-1, 1]) {\n        // Upper arm\n        translate([body_length/4, side * body_width/2, -2])\n            rotate([45, 0, 30 * side])\n                cylinder(h=8, d1=leg_thickness, d2=leg_thickness-1, $fn=8);\n        \n        // Lower arm\n        translate([body_length/4 - 2, side * (body_width/2 + 3), -6])\n            rotate([0, 0, -30 * side])\n                cylinder(h=6, d1=leg_thickness-1, d2=leg_thickness-2, $fn=8);\n        \n        // Front foot\n        translate([body_length/4 - 4, side * (body_width/2 + 5), -8])\n            scale([1.5, 1, 0.5])\n                sphere(d=3, $fn=8);\n    }\n    \n    // Back legs (larger)\n    for(side = [-1, 1]) {\n        // Upper leg\n        translate([-body_length/4, side * body_width/2, -2])\n            rotate([30, 0, -20 * side])\n                cylinder(h=10, d1=leg_thickness+1, d2=leg_thickness, $fn=8);\n        \n        // Lower leg\n        translate([-body_length/4 - 3, side * (body_width/2 + 4), -7])\n            rotate([0, 0, 20 * side])\n                cylinder(h=8, d1=leg_thickness, d2=leg_thickness-1, $fn=8);\n        \n        // Back foot\n        translate([-body_length/4 - 6, side * (body_width/2 + 6), -10])\n            scale([2, 1.2, 0.5])\n                sphere(d=4, $fn=8);\n    }\n}\n\nmodule agama_tail() {\n    // Segmented tail tapering to a point\n    for(i = [0:tail_segments-1]) {\n        translate([-body_length/2 - i * 3, 0, 0])\n            rotate([0, 5 * sin(i*30), 0])\n                scale([1, 1 - i*0.05, 1 - i*0.05])\n                    sphere(d=body_width - i*1.2, $fn=16);\n    }\n}\n\nmodule agama_scales() {\n    // Dorsal ridge scales\n    for(i = [0:8]) {\n        translate([body_length/2 - 5 - i * 5, 0, body_height/2])\n            rotate([0, 0, 0])\n                scale([0.3, 1, 1.5])\n                    cylinder(h=2, d1=2, d2=0.5, $fn=6);\n    }\n    \n    // Lateral body scales\n    for(side = [-1, 1]) {\n        for(i = [0:5]) {\n            translate([body_length/2 - 10 - i * 6, side * body_width/2, 0])\n                rotate([0, 90, 0])\n                    scale([0.5, 0.5, 0.5])\n                        sphere(d=2, $fn=6);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    agama_body();\n    agama_head();\n    agama_eyes();\n    agama_limbs();\n    agama_tail();\n    agama_scales();\n}\n\n// Flat base for 3D printing stability\ntranslate([-body_length/2 - tail_segments*3, 0, -10])\n    cube([body_length + tail_segments*3 + head_length, body_width*2, 2], center=false);",
    "renders": true
  },
  {
    "animal": "agouti",
    "openscad_code": "// Agouti - medium complexity realistic style\n// Designed for 3D printing - 80mm length\n\n// Main dimensions\nbody_length = 70;\nbody_height = 35;\nhead_length = 20;\nhead_height = 18;\nleg_height = 25;\ntail_length = 12;\n\n// Body\nmodule body() {\n    union() {\n        // Main torso\n        translate([0, 0, body_height/2])\n            scale([1, 0.6, 0.5])\n            sphere(d=body_height);\n        \n        // Rump\n        translate([-body_length/2, 0, body_height/2])\n            scale([1.2, 0.7, 0.4])\n            sphere(d=body_height);\n    }\n}\n\n// Head\nmodule head() {\n    translate([body_length/2 + head_length/2, 0, body_height/2 + head_height/4]) {\n        union() {\n            // Skull\n            scale([1.3, 0.9, 0.8])\n            sphere(d=head_height);\n            \n            // Snout\n            translate([head_length/2, 0, -head_height/4])\n                scale([0.8, 0.6, 0.5])\n                sphere(d=head_height);\n            \n            // Ears\n            for(side = [-1, 1]) {\n                translate([0, side*head_height/2, head_height/2])\n                    rotate([0, 15*side, 0])\n                    scale([0.3, 0.1, 0.6])\n                    cylinder(h=head_height/2, d=head_height/3);\n            }\n            \n            // Nose\n            translate([head_length/2 + 2, 0, -head_height/4])\n                sphere(d=3);\n            \n            // Eyes\n            for(side = [-1, 1]) {\n                translate([head_length/2 - 2, side*head_height/3, 0])\n                    sphere(d=2.5);\n            }\n        }\n    }\n}\n\n// Legs\nmodule legs() {\n    for(side = [-1, 1]) {\n        // Front legs\n        translate([body_length/3, side*body_height/4, 0]) {\n            union() {\n                // Upper leg\n                cylinder(h=leg_height/2, d=leg_height/4);\n                // Lower leg\n                translate([0, 0, leg_height/2])\n                    cylinder(h=leg_height/2, d=leg_height/5);\n                // Paw\n                translate([0, 0, leg_height])\n                    sphere(d=leg_height/4);\n            }\n        }\n        \n        // Rear legs\n        translate([-body_length/3, side*body_height/4, 0]) {\n            rotate([10, 0, 0])\n            union() {\n                // Upper leg\n                cylinder(h=leg_height/2, d=leg_height/4);\n                // Lower leg\n                translate([0, 0, leg_height/2])\n                    cylinder(h=leg_height/2, d=leg_height/5);\n                // Paw\n                translate([0, 0, leg_height])\n                    sphere(d=leg_height/4);\n            }\n        }\n    }\n}\n\n// Tail\nmodule tail() {\n    translate([-body_length/2 - tail_length/2, 0, body_height/2]) {\n        rotate([0, -20, 0])\n            scale([1, 0.7, 0.7])\n            cylinder(h=tail_length, d=tail_length);\n    }\n}\n\n// Whiskers\nmodule whiskers() {\n    for(side = [-1, 1]) {\n        for(i = [1:3]) {\n            translate([body_length/2 + head_length/2 + 2, side*head_height/3, -head_height/4 + i*2])\n                rotate([0, side*15, 0])\n                cylinder(h=5, d=0.5);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    legs();\n    tail();\n    whiskers();\n}",
    "renders": true
  },
  {
    "animal": "akita",
    "openscad_code": "// Akita Dog - Realistic Medium Complexity\n// Overall dimensions: ~80mm length x ~40mm width x ~50mm height\n\n$fn = 30; // Increase for smoother curves\n\nmodule akita() {\n    // Main body\n    union() {\n        // Torso\n        translate([0, 0, 15]) \n            scale([1.2, 0.6, 0.8]) \n                sphere(r = 20);\n        \n        // Chest\n        translate([-10, 0, 10]) \n            scale([0.8, 0.5, 0.6]) \n                sphere(r = 15);\n        \n        // Hindquarters\n        translate([15, 0, 12]) \n            scale([0.7, 0.5, 0.6]) \n                sphere(r = 18);\n    }\n    \n    // Neck\n    translate([-20, 0, 25]) \n        rotate([0, 10, 0]) \n            scale([0.5, 0.5, 0.7]) \n                cylinder(r1 = 12, r2 = 8, h = 15);\n    \n    // Head\n    translate([-35, 0, 35]) \n        rotate([0, 10, 0]) {\n            // Skull\n            scale([0.8, 0.7, 0.7]) \n                sphere(r = 15);\n            \n            // Snout\n            translate([-12, 0, -5]) \n                scale([1.2, 0.8, 0.6]) \n                    sphere(r = 8);\n            \n            // Ears\n            for(side = [-1, 1]) {\n                translate([-5, side * 12, 8]) \n                    rotate([0, side * 20, 0]) \n                        scale([0.3, 0.1, 0.8]) \n                            cylinder(r = 8, h = 15);\n            }\n            \n            // Nose\n            translate([-20, 0, -5]) \n                sphere(r = 3);\n        }\n    \n    // Legs module\n    module leg(x_pos, y_pos, angle) {\n        translate([x_pos, y_pos, 0]) {\n            // Upper leg\n            rotate([0, 0, angle]) {\n                translate([0, 0, 10]) \n                    rotate([0, angle, 0]) \n                        scale([0.4, 0.4, 1]) \n                            cylinder(r = 5, h = 15);\n                \n                // Lower leg\n                translate([0, 0, 0]) \n                    rotate([0, angle + 10, 0]) \n                        scale([0.3, 0.3, 0.9]) \n                            cylinder(r = 4, h = 12);\n                \n                // Paw\n                translate([0, 0, -2]) \n                    scale([0.8, 0.8, 0.4]) \n                        sphere(r = 5);\n            }\n        }\n    }\n    \n    // Front legs\n    leg(-15, 12, 15);\n    leg(-15, -12, -15);\n    \n    // Back legs\n    leg(15, 10, -15);\n    leg(15, -10, 15);\n    \n    // Tail\n    translate([25, 0, 25]) \n        rotate([0, 0, 45]) {\n            scale([0.4, 0.4, 1.5]) \n                cylinder(r = 4, h = 20);\n            translate([0, 0, 20]) \n                scale([0.8, 0.8, 0.6]) \n                    sphere(r = 4);\n        }\n}\n\n// Generate the model\nakita();",
    "renders": true
  },
  {
    "animal": "albatross",
    "openscad_code": "// Albatross 3D Model - Medium Complexity Realistic Style\n// Wingspan approximately 80mm, designed for 3D printing\n\n$fn = 32;\n\n// Main module to create the entire albatross\nmodule albatross() {\n    union() {\n        // Body\n        body();\n        \n        // Head and beak\n        translate([15, 0, 8]) head();\n        \n        // Wings\n        translate([-5, 0, 5]) wings();\n        \n        // Tail\n        translate([-18, 0, 3]) tail();\n        \n        // Legs and feet\n        translate([5, 0, -2]) legs();\n    }\n}\n\n// Body module - streamlined oval shape\nmodule body() {\n    // Main body\n    scale([1.8, 1, 1]) sphere(8);\n    \n    // Neck transition\n    translate([10, 0, 6]) \n        scale([1.2, 0.8, 0.8]) \n        sphere(6);\n}\n\n// Head and beak module\nmodule head() {\n    union() {\n        // Head\n        sphere(5);\n        \n        // Beak\n        translate([6, 0, -2]) \n            rotate([0, -15, 0]) \n            scale([1.5, 0.4, 0.4]) \n            cylinder(h=12, r1=3, r2=1);\n        \n        // Eye\n        translate([2, 3.5, 1.5]) \n            sphere(1);\n        \n        // Eye socket\n        translate([2, 3.5, 1.5]) \n            difference() {\n                sphere(1.2);\n                sphere(1.1);\n            }\n    }\n}\n\n// Wings module with feather details\nmodule wings() {\n    // Left wing\n    translate([0, -15, 0]) \n        rotate([0, 0, 20]) \n        wing_half();\n    \n    // Right wing\n    mirror([0, 1, 0]) \n        translate([0, -15, 0]) \n        rotate([0, 0, 20]) \n        wing_half();\n}\n\n// Single wing half\nmodule wing_half() {\n    union() {\n        // Main wing structure\n        translate([20, -15, 0]) \n            rotate([0, 0, -30]) \n            scale([1, 0.2, 0.05]) \n            sphere(20);\n        \n        // Wing tip\n        translate([35, -25, 0]) \n            rotate([0, 0, -45]) \n            scale([0.5, 0.1, 0.05]) \n            sphere(10);\n        \n        // Wing feathers\n        for(i = [1:3]) {\n            translate([15 + i*7, -15 - i*3, -0.5]) \n                rotate([0, 0, -20 - i*5]) \n                scale([0.3, 0.05, 0.02]) \n                cube([8, 2, 1]);\n        }\n    }\n}\n\n// Tail module\nmodule tail() {\n    union() {\n        // Tail base\n        translate([0, 0, 0]) \n            rotate([0, 10, 0]) \n            scale([0.3, 1, 0.1]) \n            sphere(8);\n        \n        // Tail feathers\n        for(i = [-2:2]) {\n            translate([i*2, -8, 0]) \n                rotate([0, 0, i*5]) \n                scale([0.2, 1, 0.05]) \n                cube([3, 10, 1]);\n        }\n    }\n}\n\n// Legs and webbed feet\nmodule legs() {\n    // Left leg\n    translate([0, 3, 0]) leg();\n    \n    // Right leg\n    translate([0, -3, 0]) leg();\n}\n\n// Single leg with foot\nmodule leg() {\n    union() {\n        // Leg\n        translate([0, 0, -5]) \n            rotate([15, 0, 0]) \n            scale([0.3, 0.3, 1]) \n            cylinder(h=8, r=2);\n        \n        // Foot\n        translate([0, 0, -12]) {\n            // Central foot pad\n            scale([1, 0.3, 0.2]) \n            sphere(3);\n            \n            // Toes\n            for(i = [-1, 0, 1]) {\n                translate([i*2.5, 0, -1]) \n                    rotate([0, 0, i*10]) \n                    scale([0.3, 0.2, 0.1]) \n                    cube([4, 1, 0.5]);\n            }\n        }\n    }\n}\n\n// Generate the albatross\nalbatross();",
    "renders": true
  },
  {
    "animal": "alligator",
    "openscad_code": "// Alligator model for 3D printing\n// Medium complexity realistic style using basic primitives\n\n// Parameters for printability\n$fa = 2;\n$fs = 0.5;\nwall_thickness = 2;\nscale_factor = 0.8;\n\nmodule alligator() {\n    // Main body\n    color(\"darkolivegreen\") {\n        // Torso - main body segment\n        union() {\n            // Central body\n            translate([-20, 0, 0]) scale([1.2, 0.8, 0.6]) sphere(d=40);\n            \n            // Tail segments\n            for(i = [0:5]) {\n                translate([-40 - i*8, 0, 0]) \n                rotate([0, -i*5, 0])\n                scale([1 - i*0.1, 1 - i*0.15, 1 - i*0.2])\n                sphere(d=30 - i*3);\n            }\n            \n            // Head\n            translate([15, 0, 5]) \n            scale([1.3, 1, 0.7]) \n            sphere(d=35);\n            \n            // Snout extension\n            translate([30, 0, 3])\n            scale([2, 0.6, 0.4])\n            sphere(d=20);\n        }\n        \n        // Legs\n        module leg(x_pos, y_pos, angle) {\n            translate([x_pos, y_pos, -15]) {\n                rotate([0, 0, angle]) {\n                    // Upper leg\n                    rotate([90, 0, 0])\n                    cylinder(h=15, d1=12, d2=8);\n                    \n                    // Lower leg\n                    translate([0, 0, -12])\n                    rotate([90, 0, 0])\n                    cylinder(h=12, d1=8, d2=6);\n                    \n                    // Foot\n                    translate([0, 0, -20])\n                    scale([2, 1, 0.5])\n                    sphere(d=8);\n                }\n            }\n        }\n        \n        // Front legs\n        leg(0, 12, -30);\n        leg(0, -12, 30);\n        \n        // Rear legs\n        leg(-25, 15, -45);\n        leg(-25, -15, 45);\n        \n        // Eyes\n        translate([28, 8, 15]) sphere(d=6);\n        translate([28, -8, 15]) sphere(d=6);\n        \n        // Eye pupils\n        color(\"black\") {\n            translate([31, 8, 15]) sphere(d=3);\n            translate([31, -8, 15]) sphere(d=3);\n        }\n        \n        // Nostrils\n        translate([38, 3, 8]) sphere(d=3);\n        translate([38, -3, 8]) sphere(d=3);\n        \n        // Back ridges (scutes)\n        for(i = [0:12]) {\n            translate([-35 + i*5, 0, 12])\n            rotate([0, 0, i % 2 == 0 ? 5 : -5])\n            scale([0.8, 0.2, 1])\n            cube([6, 3, 4], center=true);\n        }\n        \n        // Teeth\n        color(\"white\") {\n            // Upper teeth\n            for(i = [0:7]) {\n                translate([33 - i*2, 6, 5])\n                rotate([0, 0, -15])\n                scale([0.3, 1, 0.3])\n                cylinder(h=3, d1=2, d2=1);\n                \n                translate([33 - i*2, -6, 5])\n                rotate([0, 0, 15])\n                scale([0.3, 1, 0.3])\n                cylinder(h=3, d1=2, d2=1);\n            }\n        }\n    }\n}\n\n// Create the alligator\nscale([scale_factor, scale_factor, scale_factor])\nalligator();",
    "renders": true
  },
  {
    "animal": "alpaca",
    "openscad_code": "// Alpaca - medium complexity realistic style\n// Designed for 3D printing with no overhangs\n\nmodule leg() {\n    // Main leg cylinder\n    cylinder(h = 25, r1 = 4, r2 = 3, $fn = 16);\n    // Hoof\n    translate([0, 0, -1])\n        cylinder(h = 3, r1 = 5, r2 = 4, $fn = 16);\n}\n\nmodule ear() {\n    // Ear shape\n    rotate([0, -15, 0])\n        scale([0.6, 1.2, 0.3])\n            sphere(8, $fn = 16);\n}\n\nmodule neck() {\n    // Neck segment\n    rotate([0, -20, 0])\n        cylinder(h = 20, r1 = 6, r2 = 5, $fn = 20);\n    // Neck base\n    translate([0, 0, -5])\n        cylinder(h = 8, r1 = 8, r2 = 6, $fn = 20);\n}\n\nmodule body() {\n    // Main torso\n    scale([1.5, 1, 1.2])\n        sphere(20, $fn = 32);\n    \n    // Chest extension\n    translate([-15, 0, -5])\n        scale([1.2, 0.8, 0.8])\n            sphere(15, $fn = 24);\n    \n    // Rear section\n    translate([15, 0, -3])\n        scale([0.8, 1, 0.9])\n            sphere(18, $fn = 24);\n}\n\nmodule head() {\n    // Head shape\n    scale([1.2, 0.9, 1.1])\n        sphere(12, $fn = 24);\n    \n    // Snout\n    translate([12, 0, -3])\n        scale([1.5, 0.7, 0.6])\n            sphere(8, $fn = 16);\n    \n    // Eyes\n    translate([8, 5, 4])\n        sphere(2, $fn = 8);\n    translate([8, -5, 4])\n        sphere(2, $fn = 8);\n    \n    // Nose\n    translate([15, 0, -2])\n        sphere(3, $fn = 8);\n}\n\nmodule tail() {\n    // Tail base\n    translate([0, 0, -8])\n        rotate([45, 0, 0])\n            cylinder(h = 12, r1 = 4, r2 = 2, $fn = 12);\n}\n\n// Main assembly\nunion() {\n    // Body\n    body();\n    \n    // Neck\n    translate([-20, 0, 15])\n        neck();\n    \n    // Head\n    translate([-25, 0, 25])\n        rotate([0, 20, 0])\n            head();\n    \n    // Ears\n    translate([-25, 7, 32])\n        rotate([0, 0, -30])\n            ear();\n    translate([-25, -7, 32])\n        rotate([0, 0, 30])\n            ear();\n    \n    // Legs\n    // Front left\n    translate([-10, 8, -15])\n        leg();\n    \n    // Front right\n    translate([-10, -8, -15])\n        leg();\n    \n    // Rear left\n    translate([10, 8, -15])\n        leg();\n    \n    // Rear right\n    translate([10, -8, -15])\n        leg();\n    \n    // Tail\n    translate([20, 0, 8])\n        tail();\n}",
    "renders": true
  },
  {
    "animal": "anchovy",
    "openscad_code": "// Anchovy - Realistic Style, Medium Complexity\n// 3D printable model with basic primitives\n\nmodule anchovy_body() {\n    // Main body - elongated ellipsoid\n    translate([0, 0, 0])\n    scale([1, 0.4, 0.3])\n    sphere(r=15, $fn=32);\n    \n    // Tail section - tapered\n    hull() {\n        translate([-25, 0, 0])\n        scale([0.5, 0.2, 0.1])\n        sphere(r=10, $fn=16);\n        \n        translate([-35, 0, 0])\n        scale([0.1, 0.1, 0.05])\n        sphere(r=5, $fn=8);\n    }\n}\n\nmodule dorsal_fin() {\n    // Main dorsal fin - triangular segments\n    for(i=[-15:5:15]) {\n        translate([i, 0, 4])\n        rotate([0, 90, 0])\n        cylinder(h=8, r1=2, r2=0.5, $fn=3);\n    }\n}\n\nmodule pectoral_fin(left=true) {\n    // Side fins - curved\n    rotate([0, 0, left ? 30 : -30])\n    translate([0, left ? 8 : -8, -2])\n    rotate([0, 90, 0])\n    scale([1, 0.5, 1])\n    cylinder(h=10, r1=4, r2=1, $fn=16);\n}\n\nmodule pelvic_fin() {\n    // Small fins underneath\n    for(side=[-1, 1]) {\n        translate([5, side*6, -3])\n        rotate([90, 0, side*30])\n        scale([0.5, 1, 0.3])\n        cylinder(h=6, r1=2, r2=0.5, $fn=8);\n    }\n}\n\nmodule caudal_fin() {\n    // Tail fin - forked\n    // Upper lobe\n    translate([-35, 0, 2])\n    rotate([0, 0, -20])\n    scale([1, 0.2, 1])\n    cylinder(h=12, r1=4, r2=0.5, $fn=3);\n    \n    // Lower lobe\n    translate([-35, 0, -2])\n    rotate([0, 0, 20])\n    scale([1, 0.2, 1])\n    cylinder(h=12, r1=4, rfn=0.5, $fn=3);\n}\n\nmodule head_features() {\n    // Snout - elongated\n    translate([20, 0, 0])\n    scale([1.2, 0.8, 0.8])\n    sphere(r=8, $fn=24);\n    \n    // Mouth line\n    translate([25, 0, -2])\n    rotate([90, 0, 0])\n    scale([0.8, 1, 0.3])\n    cylinder(h=10, r1=1, r2=0.5, $fn=16);\n    \n    // Eye socket\n    for(side=[-1, 1]) {\n        translate([15, side*5, 3])\n        sphere(r=2, $fn=12);\n    }\n}\n\nmodule scales_pattern() {\n    // Simple scale pattern using small spheres\n    for(x=[-25:5:25]) {\n        for(y=[-6:3:6]) {\n            if(y != 0) {\n                translate([x, y, 4.5])\n                sphere(r=0.5, $fn=8);\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    anchovy_body();\n    head_features();\n    dorsal_fin();\n    pectoral_fin(true);\n    pectoral_fin(false);\n    pelvic_fin();\n    caudal_fin();\n    scales_pattern();\n}\n\n// Base for stability\ntranslate([0, 0, -8])\nscale([1.2, 0.6, 0.1])\ncylinder(h=2, r=20, $fn=32);",
    "renders": true
  },
  {
    "animal": "anglerfish",
    "openscad_code": "// Anglerfish - realistic style, medium complexity\n// Approx 80mm long\n\n// Main parameters\nbody_length = 60;\nbody_height = 35;\nhead_radius = 20;\nmouth_width = 30;\nmouth_height = 15;\neye_size = 8;\n\n// Body module\nmodule body() {\n    // Main body - ellipsoid shape\n    scale([1.2, 0.9, 0.7])\n        sphere(r=head_radius, $fn=50);\n    \n    // Belly bulge\n    translate([0, 0, -5])\n        scale([1, 1.2, 0.5])\n            sphere(r=head_radius*0.9, $fn=40);\n    \n    // Tail section\n    translate([-body_length/2, 0, 0])\n        rotate([0, 15, 0])\n            scale([1, 0.6, 0.4])\n                cylinder(h=body_length/2, r=head_radius*0.8, $fn=40);\n}\n\n// Head module\nmodule head() {\n    // Upper head dome\n    translate([head_radius/2, 0, 10])\n        sphere(r=head_radius, $fn=50);\n    \n    // Lower jaw\n    translate([head_radius/2, 0, -mouth_height/2])\n        scale([1.2, 0.8, 0.5])\n            sphere(r=mouth_width/2, $fn=40);\n}\n\n// Mouth module\nmodule mouth() {\n    // Mouth opening\n    difference() {\n        translate([head_radius+5, 0, 0])\n            scale([1.5, 1, 0.6])\n                sphere(r=mouth_width/2, $fn=40);\n        \n        // Teeth pattern\n        for(i = [-10:5:10]) {\n            for(j = [-5:5:5]) {\n                translate([head_radius+mouth_width/2+2, i, j])\n                    rotate([0, 90, 0])\n                        cylinder(h=2, r=1.2, $fn=6);\n            }\n        }\n    }\n}\n\n// Eye module\nmodule eye(pos_x, pos_y) {\n    // Eye socket\n    translate([pos_x, pos_y, 5])\n        sphere(r=eye_size/2+1, $fn=20);\n    \n    // Eyeball\n    difference() {\n        translate([pos_x, pos_y, 5])\n            sphere(r=eye_size/2, $fn=20);\n        \n        // Pupil\n        translate([pos_x+eye_size/3, pos_y, 5])\n            sphere(r=eye_size/4, $fn=15);\n    }\n}\n\n// Lure module (illicium)\nmodule lure() {\n    // Stalk\n    translate([head_radius+10, 0, head_radius+10])\n        rotate([0, 30, 0])\n            cylinder(h=25, r=1.5, $fn=12);\n    \n    // Lure bulb\n    translate([head_radius+30, 0, head_radius+20])\n        sphere(r=4, $fn=20);\n    \n    // Lure details\n    difference() {\n        translate([head_radius+30, 0, head_radius+20])\n            sphere(r=3.5, $fn=20);\n        \n        for(i = [0:60:300]) {\n            rotate([0, 0, i])\n                translate([head_radius+30+2, 0, head_radius+20])\n                    cylinder(h=1, r=0.5, $fn=6);\n        }\n    }\n}\n\n// Fin module\nmodule fin(pos_x, pos_y, angle) {\n    translate([pos_x, pos_y, 0])\n        rotate([0, 0, angle])\n            scale([1, 0.2, 0.4])\n                cylinder(h=15, r=8, $fn=20);\n}\n\n// Dorsal fin\nmodule dorsal_fin() {\n    translate([-10, 0, 20])\n        rotate([15, 0, 0])\n            scale([0.3, 1, 1])\n                cylinder(h=15, r=10, $fn=30);\n}\n\n// Assemble the anglerfish\nunion() {\n    // Main body parts\n    body();\n    head();\n    mouth();\n    \n    // Eyes\n    eye(head_radius/2, -8);\n    eye(head_radius/2, 8);\n    \n    // Lure\n    lure();\n    \n    // Fins\n    fin(-5, -20, -30);\n    fin(-5, 20, 30);\n    \n    // Dorsal fin\n    dorsal_fin();\n    \n    // Pectoral fins\n    translate([0, -25, -10])\n        rotate([0, -20, -90])\n            scale([0.3, 1, 0.5])\n                cylinder(h=20, r=8, $fn=20);\n    \n    translate([0, 25, -10])\n        rotate([0, 20, 90])\n            scale([0.3, 1, 0.5])\n                cylinder(h=20, r=8, $fn=20);\n}",
    "renders": true
  },
  {
    "animal": "anhinga",
    "openscad_code": "// Anhinga (Anhinga anhinga) - Medium complexity realistic model\n// 3D printable, ~80 mm long\n\n$fn = 30; // Resolution for curved surfaces\n\n// Main module\nmodule anhinga() {\n    union() {\n        // Body\n        body();\n        \n        // Neck and head\n        translate([0, 0, 8]) rotate([0, 0, 25]) neck_head();\n        \n        // Tail\n        translate([-32, 0, 2]) rotate([0, 0, -15]) tail();\n        \n        // Wings\n        left_wing();\n        mirror([0,1,0]) left_wing();\n        \n        // Legs and feet\n        translate([20, -5, -4]) rotate([0, 90, 0]) right_leg();\n        translate([20, 5, -4]) rotate([0, -90, 0]) left_leg();\n    }\n}\n\n// Body module\nmodule body() {\n    // Main body - elongated oval\n    scale([1.8, 0.6, 0.7]) sphere(d = 30);\n    \n    // Chest ridge\n    translate([0, 0, 10]) scale([1.4, 0.4, 0.3]) sphere(d = 20);\n    \n    // Back ridge\n    translate([5, 0, 8]) scale([1.5, 0.5, 0.2]) sphere(d = 25);\n}\n\n// Neck and head module\nmodule neck_head() {\n    // Neck - series of decreasing cylinders\n    union() {\n        translate([0, 0, 0]) cylinder(h = 25, d1 = 12, d2 = 8, center = false);\n        translate([0, 0, 20]) cylinder(h = 20, d1 = 8, d2 = 6, center = false);\n        \n        // Head\n        translate([0, 0, 42]) rotate([90, 0, -15]) {\n            // Main head shape\n            scale([1.3, 0.4, 0.5]) sphere(d = 12);\n            \n            // Beak\n            translate([8, 0, 0]) rotate([0, 0, 15]) cylinder(h = 18, d1 = 4, d2 = 1.5, center = false);\n            \n            // Eye\n            translate([4, 3, 2]) sphere(d = 2);\n        }\n    }\n}\n\n// Tail module\nmodule tail() {\n    // Fan tail made of individual feathers\n    for (i = [-4:4]) {\n        translate([i*2, 0, 0]) rotate([0, 0, i*8]) {\n            scale([0.3, 1, 0.1]) cylinder(h = 25, d = 6);\n        }\n    }\n    \n    // Tail base\n    translate([0, 0, 0]) scale([0.8, 0.3, 0.2]) sphere(d = 15);\n}\n\n// Left wing module\nmodule left_wing() {\n    translate([0, -15, 6]) rotate([0, 0, -25]) {\n        // Upper wing\n        scale([1.2, 0.2, 0.4]) sphere(d = 25);\n        \n        // Primary feathers\n        for (i = [1:4]) {\n            translate([-5 + i*2, -8 - i*1.5, 0]) rotate([0, 0, -15 + i*5]) {\n                scale([0.8, 0.1, 0.05]) cylinder(h = 15, d = 3);\n            }\n        }\n        \n        // Secondary feathers\n        for (j = [1:3]) {\n            translate([-8 + j*2, -5 - j*1, 0]) rotate([0, 0, -10 + j*3]) {\n                scale([0.7, 0.1, 0.05]) cylinder(h = 12, d = 2.5);\n            }\n        }\n    }\n}\n\n// Leg module (reused for both legs)\nmodule right_leg() {\n    // Thigh\n    translate([0, 0, 0]) cylinder(h = 8, d = 3);\n    \n    // Lower leg\n    translate([0, 0, 8]) rotate([0, 0, -20]) cylinder(h = 10, d = 2.5);\n    \n    // Foot\n    translate([0, 0, 18]) rotate([0, 0, 20]) {\n        // Main foot\n        scale([1.5, 0.3, 0.2]) sphere(d = 8);\n        \n        // Toes\n        for (k = [0:3]) {\n            translate([k*3, 0, 0]) rotate([0, 0, k*15 - 15]) {\n                scale([0.3, 0.2, 0.1]) cylinder(h = 6, d = 2);\n            }\n        }\n    }\n}\n\n// Scale for 3D printing\nscale(0.8)\nanhinga();",
    "renders": true
  },
  {
    "animal": "anole",
    "openscad_code": "// Realistic Anole Lizard - Medium Complexity\n// Approximate size: 75mm length\n\n$fn = 32;\n\n// Body parameters\nbody_length = 40;\nbody_height = 12;\nbody_width = 18;\n\n// Head parameters\nhead_length = 15;\nhead_width = 12;\nhead_height = 10;\n\n// Tail parameters\ntail_segments = 8;\ntail_base_width = 10;\ntail_base_height = 8;\n\n// Leg parameters\nleg_length = 20;\nleg_width = 4;\nleg_height = 3;\nfoot_length = 8;\ntoe_count = 5;\n\n// Dewlap parameters\ndewlap_radius = 6;\ndewlap_thickness = 2;\n\nmodule anole_body() {\n    // Main body - elongated ellipsoid\n    scale([1.2, 0.8, 0.6])\n    sphere(d = body_length);\n    \n    // Ribbed texture\n    for(i = [0:4]) {\n        translate([i*6 - 12, 0, body_height/2])\n        rotate([90, 0, 0])\n        cylinder(h = body_width*0.8, d1 = 2, d2 = 2.5);\n    }\n}\n\nmodule anole_head() {\n    // Snout\n    translate([body_length/2 + head_length/2, 0, 0])\n    scale([1.5, 1, 1])\n    sphere(d = head_length);\n    \n    // Eye sockets\n    difference() {\n        translate([body_length/2 + head_length/2, 0, head_height/3])\n        sphere(d = head_width);\n        \n        // Left eye\n        translate([body_length/2 + head_length - 3, -head_width/3, head_height/3])\n        rotate([0, 30, 0])\n        sphere(d = 4);\n        \n        // Right eye\n        translate([body_length/2 + head_length - 3, head_width/3, head_height/3])\n        rotate([0, -30, 0])\n        sphere(d = 4);\n    }\n    \n    // Eyes\n    translate([body_length/2 + head_length - 2.5, -head_width/3, head_height/3])\n    sphere(d = 3.5);\n    \n    translate([body_length/2 + head_length - 2.5, head_width/3, head_height/3])\n    sphere(d = 3.5);\n    \n    // Nose\n    translate([body_length/2 + head_length + 5, 0, 0])\n    sphere(d = 3);\n}\n\nmodule anole_tail() {\n    // Segmented tail tapering\n    for(i = [0:tail_segments-1]) {\n        translate([-body_length/2 - i*5, 0, 0])\n        scale([1, 1 - i*0.1, 1 - i*0.1])\n        sphere(d = tail_base_width - i);\n    }\n}\n\nmodule anole_leg(position, angle, side) {\n    translate(position)\n    rotate([0, angle, 0]) {\n        // Upper leg\n        rotate([0, -side*20, 0])\n        cylinder(h = leg_length/2, d1 = leg_width + 2, d2 = leg_width);\n        \n        // Lower leg\n        translate([0, 0, leg_length/2])\n        rotate([0, side*30, 0])\n        cylinder(h = leg_length/2, d1 = leg_width, d2 = leg_width - 1);\n        \n        // Foot\n        translate([0, 0, leg_length])\n        rotate([90, 0, 0])\n        cylinder(h = foot_length, d1 = leg_width - 1, d2 = 2);\n        \n        // Toes\n        for(toe = [0:toe_count-1]) {\n            angle = (toe - 2) * 15;\n            translate([0, sin(angle) * 3, foot_length])\n            rotate([0, angle, 90])\n            cylinder(h = 5, d1 = 1.5, d2 = 0.8);\n        }\n    }\n}\n\nmodule anole_dewlap() {\n    // Throat dewlap\n    translate([body_length/2 - 5, 0, -body_height/2])\n    rotate([0, 0, 90])\n    sphere(d = dewlap_radius);\n    \n    // Support structure\n    translate([body_length/2 - 5, 0, -body_height/2])\n    cylinder(h = dewlap_thickness, d = dewlap_radius);\n}\n\n// Main assembly\nunion() {\n    // Body\n    anole_body();\n    \n    // Head\n    anole_head();\n    \n    // Tail\n    anole_tail();\n    \n    // Dewlap\n    anole_dewlap();\n    \n    // Front legs\n    anole_leg([body_length/3, body_width/2, -body_height/3], 30, 1);\n    anole_leg([body_length/3, -body_width/2, -body_height/3], 30, -1);\n    \n    // Back legs\n    anole_leg([-body_length/3, body_width/2, -body_height/3], -30, 1);\n    anole_leg([-body_length/3, -body_width/2, -body_height/3], -30, -1);\n    \n    // Toes on ground for support\n    translate([body_length/3, body_width/2, -leg_length - 5])\n    sphere(d = 2);\n    translate([body_length/3, -body_width/2, -leg_length - 5])\n    sphere(d = 2);\n    translate([-body_length/3, body_width/2, -leg_length - 5])\n    sphere(d = 2);\n    translate([-body_length/3, -body_width/2, -leg_length - 5])\n    sphere(d = 2);\n}",
    "renders": true
  },
  {
    "animal": "ant",
    "openscad_code": "// Realistic Ant - Medium Complexity\n// Size: ~75mm length\n\n// Body segments\nmodule thorax() {\n    difference() {\n        // Main thorax\n        translate([0, 0, 6]) \n            scale([1.2, 0.8, 0.8])\n            sphere(d=12, $fn=32);\n        \n        // Neck cavity\n        translate([-6, 0, 6])\n            rotate([0, 90, 0])\n            cylinder(h=8, d1=6, d2=4, $fn=16);\n        \n        // Abdomen cavity\n        translate([6, 0, 6])\n            rotate([0, 90, 0])\n            cylinder(h=8, d1=6, d2=4, $fn=16);\n    }\n}\n\nmodule abdomen() {\n    // Abdomen segments\n    for(i = [0:2]) {\n        translate([14 + i*4, 0, 5 - i])\n            scale([1 - i*0.1, 0.9 - i*0.05, 0.8 - i*0.1])\n            sphere(d=10 - i*1.5, $fn=32);\n    }\n}\n\nmodule head() {\n    difference() {\n        // Main head\n        translate([-12, 0, 8])\n            rotate([0, 10, 0])\n            scale([1.2, 1, 0.9])\n            sphere(d=10, $fn=32);\n        \n        // Eye sockets\n        for(side = [-1, 1]) {\n            translate([-14, side*3, 9])\n                sphere(d=3, $fn=16);\n        }\n    }\n    \n    // Eyes\n    for(side = [-1, 1]) {\n        translate([-14.5, side*3, 9])\n            scale([1.1, 1, 0.8])\n            sphere(d=2.5, $fn=16);\n    }\n    \n    // Mandibles\n    for(side = [-1, 1]) {\n        translate([-16, side*1.5, 6])\n            rotate([0, 0, side*20])\n            scale([0.3, 0.3, 1])\n            cylinder(h=6, d1=2, d2=1, $fn=8);\n    }\n}\n\n// Leg segments\nmodule leg_segment(length, angle, thickness) {\n    translate([0, 0, -length/2])\n        rotate([0, angle, 0])\n        cylinder(h=length, d=thickness, $fn=12);\n}\n\nmodule leg(x_pos, side, angle) {\n    translate([x_pos, side*2, 5]) {\n        // Coxa\n        rotate([0, 0, 90])\n            leg_segment(4, 0, 2);\n        \n        // Femur\n        translate([0, side*2, -2])\n            rotate([0, 30, 0])\n            leg_segment(6, 0, 1.5);\n        \n        // Tibia\n        translate([0, side*4, -5])\n            rotate([0, -30, 0])\n            leg_segment(8, 0, 1);\n        \n        // Tarsus segments\n        for(i = [0:2]) {\n            translate([0, side*(6 + i*2), -8 - i*2])\n                rotate([0, -20 - i*10, 0])\n                leg_segment(2, 0, 0.8);\n        }\n    }\n}\n\n// Antenna\nmodule antenna(side) {\n    translate([-12, side*4, 9]) {\n        rotate([0, 0, side*30])\n            leg_segment(8, 0, 0.8);\n        translate([0, side*1, -8])\n            rotate([0, 0, side*20])\n            leg_segment(6, 0, 0.6);\n        translate([0, side*1.5, -14])\n            rotate([0, 0, side*10])\n            leg_segment(4, 0, 0.4);\n    }\n}\n\n// Main assembly\nscale([1.5, 1.5, 1.5]) {\n    // Body\n    union() {\n        head();\n        thorax();\n        abdomen();\n    }\n    \n    // Legs - 3 pairs\n    for(pair = [0:2]) {\n        leg(-8 + pair*8, 1, 0);\n        leg(-8 + pair*8, -1, 0);\n    }\n    \n    // Antennae\n    antenna(1);\n    antenna(-1);\n}",
    "renders": true
  },
  {
    "animal": "anteater",
    "openscad_code": "// Anteater model for 3D printing\n// Medium complexity, realistic style\n\n$fn = 32;\n\nmodule anteater() {\n    // Body\n    color(\"saddlebrown\")\n    translate([0, 0, 15])\n    scale([1.5, 0.8, 0.7])\n    sphere(20);\n\n    // Head/snout\n    color(\"saddlebrown\")\n    translate([-45, 0, 18])\n    rotate([0, 0, -10])\n    scale([4, 0.8, 0.8])\n    cylinder(h = 30, r1 = 5, r2 = 3);\n\n    // Ears\n    color(\"saddlebrown\")\n    for(side = [-1, 1]) {\n        translate([-15, side * 12, 30])\n        rotate([side * 20, 0, 45 * side])\n        scale([1, 0.5, 1])\n        sphere(5);\n    }\n\n    // Eyes\n    color(\"black\")\n    for(side = [-1, 1]) {\n        translate([-35, side * 8, 25])\n        sphere(2);\n    }\n\n    // Legs\n    color(\"saddlebrown\")\n    for(side = [-1, 1]) {\n        // Front legs\n        translate([-20, side * 15, 0])\n        rotate([0, 15, 0])\n        cylinder(h = 20, r = 4);\n        \n        // Front paws\n        translate([-20, side * 15, -2])\n        sphere(5);\n        \n        // Back legs\n        translate([20, side * 12, 0])\n        rotate([0, 15, 0])\n        cylinder(h = 18, r = 4);\n        \n        // Back paws\n        translate([20, side * 12, -2])\n        sphere(5);\n    }\n\n    // Tail\n    color(\"saddlebrown\")\n    translate([35, 0, 20])\n    rotate([30, 0, 0])\n    scale([0.8, 0.8, 1])\n    cylinder(h = 40, r1 = 8, r2 = 4);\n\n    // Claws - small cylinders on paws\n    color(\"darkgray\")\n    for(side = [-1, 1]) {\n        // Front claws\n        for(i = [0:3]) {\n            angle = i * 30 - 45;\n            translate([-20 + cos(angle) * 4, side * 15 + sin(angle) * 4, -4])\n            cylinder(h = 3, r = 0.5);\n        }\n        \n        // Back claws\n        for(i = [0:3]) {\n            angle = i * 30 - 45;\n            translate([20 + cos(angle) * 3.5, side * 12 + sin(angle) * 3.5, -4])\n            cylinder(h = 3, r = 0.5);\n        }\n    }\n\n    // Belly detail\n    color(\"burlywood\")\n    translate([0, 0, 8])\n    scale([1.3, 0.6, 0.3])\n    sphere(15);\n\n    // Snout tip\n    color(\"black\")\n    translate([-58, 0, 18])\n    sphere(2);\n}\n\n// Create the anteater\nanteater();",
    "renders": true
  },
  {
    "animal": "antelope",
    "openscad_code": "// Antelope - Realistic Style, Medium Complexity (50-100 mm)\n// Designed for 3D printing – no steep overhangs, 2 mm wall thickness\n\n$fn = 32;          // Smooth curves\nth = 2;            // Wall thickness for printing\n\nmodule body() {\n    // Main torso\n    difference() {\n        scale([1.5, 0.6, 1]) sphere(d=40);\n        translate([0,0,-20]) cube([50,50,20], center=true);\n    }\n    // Belly bulge\n    translate([0,0,-10]) scale([1.4, 0.8, 0.9]) sphere(d=35);\n}\n\nmodule neck() {\n    translate([-20,0,10]) rotate([0,40,0])\n        scale([0.8,0.8,1.2]) cylinder(h=25, d1=15, d2=10);\n}\n\nmodule head() {\n    translate([-35,0,28]) rotate([0,30,0])\n    union() {\n        // Skull\n        scale([1.5,0.8,1]) sphere(d=14);\n        // Snout\n        translate([-7,0,-3]) scale([1.2,0.6,0.6]) sphere(d=10);\n    }\n}\n\nmodule ears() {\n    // Left ear\n    translate([-32,6,32]) rotate([0,0,-20])\n        scale([0.3,0.1,1]) cylinder(h=8, d1=2, d2=0.5);\n    // Right ear\n    translate([-32,-6,32]) mirror([0,1,0])\n        scale([0.3,0.1,1]) cylinder(h=8, d1=2, d2=0.5);\n}\n\nmodule horns() {\n    // Left horn\n    translate([-30,4,35]) rotate([20,0,-30])\n        cylinder(h=20, d1=2, d2=0.5);\n    // Right horn\n    translate([-30,-4,35]) mirror([0,1,0])\n        cylinder(h=20, d1=2, d2=0.5);\n}\n\nmodule leg(pos, angle) {\n    translate(pos) rotate([angle,0,0])\n    union() {\n        // Upper leg\n        cylinder(h=20, d=5);\n        // Lower leg\n        translate([0,0,-20]) cylinder(h=20, d=4);\n        // Hoof\n        translate([0,0,-40]) cylinder(h=3, d=4);\n    }\n}\n\nmodule legs() {\n    // Front legs\n    leg([-15, 7, -18], 20);\n    leg([-15, -7, -18], 20);\n    // Hind legs\n    leg([15, 7, -18], -20);\n    leg([15, -7, -18], -20);\n}\n\nmodule tail() {\n    translate([22,0,0]) rotate([0,0,30])\n        cylinder(h=12, d1=3, d2=1);\n}\n\n// Assemble the antelope\nunion() {\n    body();\n    neck();\n    head();\n    ears();\n    horns();\n    legs();\n    tail();\n}",
    "renders": true
  },
  {
    "animal": "antlion",
    "openscad_code": "// Realistic Antlion Model - Medium Complexity\n// Basic body length ~60mm\n\n// Parameters\nbody_length = 60;\nbody_width = 25;\nhead_length = 15;\nmandible_length = 18;\nleg_thickness = 1.5;\nleg_length = 35;\nwing_length = 30;\nabdomen_segments = 6;\n$fn = 32;\n\n// Main module\nmodule antlion() {\n    // Central body assembly\n    union() {\n        // Head with mandibles\n        translate([body_length/2 + head_length/2, 0, 0])\n            head();\n        \n        // Thorax\n        translate([0, 0, 0])\n            thorax();\n        \n        // Abdomen\n        translate([-body_length/2 - 5, 0, 0])\n            abdomen();\n        \n        // Legs - 3 pairs\n        for(i = [0:2]) {\n            rotate([0, 0, 120*i + 60])\n                translate([body_length/3, 0, 0])\n                    leg_pair(i);\n        }\n        \n        // Wings folded over back\n        wings();\n    }\n}\n\n// Head module with compound eyes and mandibles\nmodule head() {\n    union() {\n        // Main head capsule\n        scale([1.2, 1, 0.8])\n            sphere(d=head_length);\n        \n        // Compound eyes\n        for(side = [-1, 1]) {\n            translate([head_length/3, side*head_length/3, head_length/4])\n                sphere(d=head_length/3);\n            translate([head_length/3, side*head_length/3, -head_length/4])\n                sphere(d=head_length/3);\n        }\n        \n        // Mandibles\n        for(side = [-1, 1]) {\n            translate([head_length/2 + mandible_length/2, side*head_length/4, 0])\n                rotate([0, 0, side * 20])\n                    cylinder(h=mandible_length, d1=leg_thickness*2, d2=leg_thickness, center=false);\n        }\n    }\n}\n\n// Thorax module\nmodule thorax() {\n    union() {\n        // Main thorax\n        scale([1.5, 1.2, 1])\n            sphere(d=body_width);\n        \n        // Thorax segments\n        for(i = [0:2]) {\n            translate([i*body_width/4 - body_width/2, 0, 0])\n                scale([1.3 - i*0.1, 1.1 - i*0.05, 0.9 - i*0.05])\n                    sphere(d=body_width);\n        }\n    }\n}\n\n// Segmented abdomen\nmodule abdomen() {\n    for(i = [0:abdomen_segments-1]) {\n        translate([-i*body_width/2, 0, 0])\n            scale([1 - i*0.08, 1 - i*0.1, 1 - i*0.05])\n                sphere(d=body_width);\n    }\n}\n\n// Leg pair module\nmodule leg_pair(pair_num) {\n    // Front, middle, and rear leg variations\n    angle_offset = pair_num == 0 ? 30 : pair_num == 1 ? 0 : -30;\n    \n    for(side = [-1, 1]) {\n        // Coxa\n        translate([0, side*body_width/3, 0])\n            rotate([0, 0, side * 30])\n                cylinder(h=leg_thickness*3, d=leg_thickness*2);\n        \n        // Femur\n        translate([0, side*body_width/2, 0])\n            rotate([0, 0, side * (45 + angle_offset)])\n                cylinder(h=leg_length/2, d1=leg_thickness*1.5, d2=leg_thickness);\n        \n        // Tibia\n        translate([cos(side*(45+angle_offset))*leg_length/2, \n                  side*body_width/2 + sin(side*(45+angle_offset))*leg_length/2, 0])\n            rotate([0, 0, side * (90 + angle_offset)])\n                cylinder(h=leg_length/2, d=leg_thickness);\n    }\n}\n\n// Folded wings\nmodule wings() {\n    for(side = [-1, 1]) {\n        translate([0, side*body_width/2, body_width/2])\n            rotate([0, 90, side * 15])\n                scale([1, 0.3, 1])\n                    cylinder(h=wing_length, d=body_width/2);\n    }\n}\n\n// Generate the model\nantlion();",
    "renders": true
  },
  {
    "animal": "armadillo",
    "openscad_code": "$fn = 32;\n\n// Adjustable scale for printing\nscale_factor = 0.5;  // 1.0 = ~100mm length\n\n// Main body parameters\nbody_length = 100 * scale_factor;\nbody_height = 25 * scale_factor;\nbody_width = 40 * scale_factor;\n\n// Head parameters\nhead_length = 25 * scale_factor;\nhead_width = 20 * scale_factor;\nhead_height = 15 * scale_factor;\n\n// Tail parameters\ntail_length = 60 * scale_factor;\ntail_segments = 8;\n\n// Leg parameters\nleg_height = 20 * scale_factor;\nleg_width = 8 * scale_factor;\n\n// Armored shell parameters\nshell_segments = 9;\nsegment_width = body_width * 1.1;\nsegment_height = 8 * scale_factor;\n\nmodule armadillo() {\n    union() {\n        // Central body with armored shell\n        translate([0, 0, leg_height]) {\n            // Main body core\n            color(\"saddlebrown\")\n            difference() {\n                scale([1, 0.7, 0.5])\n                sphere(d = body_width);\n                \n                // Hollow for printing\n                scale([0.8, 0.6, 0.4])\n                sphere(d = body_width * 0.9);\n            }\n            \n            // Armored shell segments\n            for(i = [0:shell_segments-1]) {\n                translate([\n                    -body_length/2 + (i * body_length/(shell_segments-1)),\n                    0,\n                    body_height/2\n                ]) {\n                    rotate([90, 0, 0])\n                    scale([1, 0.3, 1])\n                    cylinder(h = segment_height, d1 = segment_width, d2 = segment_width * 0.8);\n                }\n            }\n            \n            // Side armor bands\n            for(side = [-1, 1]) {\n                for(i = [0:shell_segments-1]) {\n                    translate([\n                        -body_length/2 + (i * body_length/(shell_segments-1)),\n                        side * body_width/2.5,\n                        body_height/2\n                    ]) {\n                        rotate([60 * side, 0, 90])\n                        scale([0.5, 1, 0.5])\n                        cylinder(h = segment_height * 1.5, d1 = segment_width/3, d2 = segment_width/4);\n                    }\n                }\n            }\n        }\n        \n        // Head\n        translate([body_length/2 + head_length/2, 0, leg_height + 5]) {\n            // Snout\n            color(\"tan\")\n            scale([1.5, 0.8, 0.6])\n            sphere(d = head_width);\n            \n            // Ears\n            translate([0, head_width/2, head_height/2]) {\n                rotate([0, 45, 0])\n                cylinder(h = 8 * scale_factor, d1 = 5 * scale_factor, d2 = 3 * scale_factor);\n            }\n            translate([0, -head_width/2, head_height/2]) {\n                rotate([0, -45, 0])\n                cylinder(h = 8 * scale_factor, d1 = 5 * scale_factor, d2 = 3 * scale_factor);\n            }\n            \n            // Eyes\n            translate([head_length/2 - 3, head_width/3, 2]) {\n                sphere(d = 3 * scale_factor);\n            }\n            translate([head_length/2 - 3, -head_width/3, 2]) {\n                sphere(d = 3 * scale_factor);\n            }\n            \n            // Nose\n            translate([head_length/2 + 2, 0, 0]) {\n                sphere(d = 2 * scale_factor);\n            }\n        }\n        \n        // Tail\n        translate([-body_length/2 - tail_length/2, 0, leg_height + 5]) {\n            for(i = [0:tail_segments-1]) {\n                translate([\n                    -i * tail_length/tail_segments,\n                    0,\n                    -i * 2\n                ]) {\n                    rotate([0, 0, -i * 5])\n                    scale([1 - i*0.08, 1 - i*0.08, 1 - i*0.08])\n                    cylinder(h = tail_length/tail_segments + 2, d1 = 12 * scale_factor, d2 = 10 * scale_factor);\n                }\n            }\n        }\n        \n        // Legs\n        for(side = [-1, 1]) {\n            // Front legs\n            translate([body_length/3, side * body_width/2, 0]) {\n                color(\"saddlebrown\")\n                cylinder(h = leg_height, d = leg_width);\n                \n                // Feet\n                translate([0, 0, -1])\n                scale([1.5, 2, 0.5])\n                sphere(d = leg_width);\n            }\n            \n            // Rear legs\n            translate([-body_length/3, side * body_width/2, 0]) {\n                cylinder(h = leg_height, d = leg_width);\n                \n                // Feet\n                translate([0, 0, -1])\n                scale([1.5, 2, 0.5])\n                sphere(d = leg_width);\n            }\n        }\n        \n        // Claws\n        for(side = [-1, 1]) {\n            for(pos = [body_length/3, -body_length/3]) {\n                for(claw = [-1, 0, 1]) {\n                    translate([pos, side * (body_width/2 + 8), 0]) {\n                        rotate([90, 0, 0])\n                        translate([claw * 3, 0, -5])\n                        cylinder(h = 5, d1 = 2, d2 = 0.5);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Generate the model\narmadillo();",
    "renders": true
  },
  {
    "animal": "asp",
    "openscad_code": "// Realistic Asp - Medium Complexity\n// Designed for 3D printing, approximately 80mm length\n\n// Global parameters\nbody_length = 80;\nbody_diameter = 8;\nhead_length = 12;\nhead_diameter = 10;\ntail_taper = 15;\nscale_factor = 1;\n\n// Main asp body\nmodule asp_body() {\n    union() {\n        // Head\n        translate([body_length - head_length/2, 0, 0])\n            rotate([0, -15, 0])\n            scale([1.2, 1, 1.1])\n            sphere(d=head_diameter, $fn=20);\n        \n        // Body segments with taper\n        for(i = [0:4]) {\n            translate([i * (body_length - head_length - tail_taper)/5, 0, 0])\n                scale([1 - i*0.15, 1 - i*0.12, 1 - i*0.12])\n                cylinder(h=(body_length - head_length - tail_taper)/5, d=body_diameter, $fn=16);\n        }\n        \n        // Tail taper\n        translate([body_length - head_length - tail_taper/2, 0, 0])\n            cylinder(h=tail_taper, d1=body_diameter*0.85, d2=2, $fn=12);\n    }\n}\n\n// Eyes with proper positioning\nmodule eyes() {\n    for(side = [-1, 1]) {\n        translate([body_length - head_length*0.7, side * head_diameter/3, head_diameter/4])\n            rotate([0, 90, 0])\n            difference() {\n                cylinder(h=head_diameter/3, d=head_diameter/4, $fn=12);\n                translate([0, 0, -0.1])\n                    cylinder(h=head_diameter/3 + 0.2, d=head_diameter/6, $fn=10);\n            }\n    }\n}\n\n// Hood structure (cobra-like)\nmodule hood() {\n    translate([body_length - head_length*0.8, 0, 0])\n        rotate([0, -20, 0])\n        difference() {\n            // Main hood\n            scale([1.5, 3, 0.5])\n            sphere(d=head_diameter*1.8, $fn=20);\n            \n            // Cutout for neck\n            translate([0, 0, -head_diameter/2])\n                cylinder(h=head_diameter, d=head_diameter*0.8, $fn=16);\n            \n            // Eye cutouts\n            for(side = [-1, 1]) {\n                translate([0, side * head_diameter/2, 0])\n                    sphere(d=head_diameter/2, $fn=12);\n            }\n        }\n}\n\n// Body pattern (scales)\nmodule scales() {\n    for(i = [1:12]) {\n        rotate([0, 0, i * 30])\n        translate([body_length/2 - i*3, 0, body_diameter/2 + 0.5])\n            scale([0.8, 0.4, 0.2])\n            sphere(d=body_diameter/2, $fn=8);\n    }\n}\n\n// Tongue\nmodule tongue() {\n    translate([body_length - head_length + 2, 0, -head_diameter/3])\n        rotate([0, 90, 0])\n        union() {\n            // Base\n            cylinder(h=head_length/2, d=head_diameter/6, $fn=8);\n            \n            // Forked end\n            for(side = [-1, 1]) {\n                translate([head_length/2 - 0.5, side * head_diameter/10, 0])\n                    cylinder(h=head_length/4, d=head_diameter/12, $fn=6);\n            }\n        }\n}\n\n// Assembly\nunion() {\n    // Main body\n    asp_body();\n    \n    // Hood (only on cobras, but adds realism)\n    hood();\n    \n    // Eyes\n    color(\"black\") eyes();\n    \n    // Tongue\n    color(\"red\") tongue();\n    \n    // Scale texture\n    color([0.3, 0.5, 0.3]) scales();\n}\n\n// Base for 3D printing stability\ntranslate([-5, 0, -body_diameter/2 - 1])\n    cube([body_length + 10, body_diameter*1.5, 2]);",
    "renders": true
  },
  {
    "animal": "ass",
    "openscad_code": "// Realistic Ass - Medium Complexity\n// Designed for 3D printing with no overhangs\n\n// Overall dimensions: 80mm width x 60mm depth x 50mm height\n\n$fn = 32;  // Smooth curves\n\nmodule ass() {\n    // Main body - two rounded cheeks\n    union() {\n        // Left cheek\n        translate([-20, 0, 0])\n            scale([1, 0.8, 0.6])\n                sphere(d=50);\n        \n        // Right cheek\n        translate([20, 0, 0])\n            scale([1, 0.8, 0.6])\n                sphere(d=50);\n        \n        // Center connection\n        translate([0, -10, -5])\n            cube([40, 30, 25], center=true);\n    }\n    \n    // Crack between cheeks\n    difference() {\n        // Main body\n        translate([0, 0, -5])\n            cube([38, 30, 30], center=true);\n        \n        // Groove\n        translate([0, 0, 0])\n            rotate([0, 10, 0])\n                cube([3, 35, 35], center=true);\n    }\n    \n    // Lower curves\n    union() {\n        // Left under-curve\n        translate([-25, -15, -15])\n            rotate([0, 0, -15])\n                scale([1, 1.2, 0.8])\n                    cylinder(h=30, d1=25, d2=15);\n        \n        // Right under-curve\n        translate([25, -15, -15])\n            rotate([0, 0, 15])\n                scale([1, 1.2, 0.8])\n                    cylinder(h=30, d1=25, d2=15);\n    }\n    \n    // Upper back curve\n    translate([0, 15, 15])\n        rotate([90, 0, 0])\n            cylinder(h=45, d1=55, d2=45);\n    \n    // Horizontal crease\n    difference() {\n        translate([0, -5, 5])\n            cube([45, 3, 5], center=true);\n        \n        // Smooth the edges\n        translate([0, -5, 7.5])\n            sphere(d=5);\n    }\n    \n    // Side dimples\n    difference() {\n        // Left dimple\n        translate([-35, 5, 0])\n            sphere(d=8);\n        \n        // Right dimple\n        translate([35, 5, 0])\n            sphere(d=8);\n    }\n}\n\n// Create the model\nass();",
    "renders": true
  },
  {
    "animal": "aurochs",
    "openscad_code": "// Aurochs - Extinct wild cattle ancestor\n// Medium complexity realistic style for 3D printing\n\nmodule leg() {\n    // Upper leg\n    translate([0, 0, 8])\n        cylinder(h=15, r1=3, r2=2.5, $fn=12);\n    \n    // Lower leg\n    translate([0, 0, 0])\n        cylinder(h=8, r1=2.5, r2=2, $fn=12);\n    \n    // Hoof\n    translate([0, 0, -2])\n        cylinder(h=3, r1=2, r2=1.5, $fn=8);\n}\n\nmodule horn() {\n    // Base curve\n    rotate([0, 20, 0])\n        cylinder(h=8, r1=2.5, r2=1.5, $fn=8);\n    \n    // Main horn\n    translate([0, 0, 7])\n        rotate([0, 30, 0])\n            cylinder(h=12, r1=1.5, r2=0.5, $fn=8);\n    \n    // Tip\n    translate([0, 0, 18])\n        rotate([0, 45, 0])\n            cylinder(h=3, r1=0.5, r2=0.1, $fn=6);\n}\n\nmodule body() {\n    // Main torso\n    scale([1.5, 1, 1.2])\n        sphere(r=15, $fn=32);\n    \n    // Belly bulge\n    translate([0, 0, -10])\n        scale([1.3, 0.8, 0.6])\n            sphere(r=15, $fn=32);\n    \n    // Hump\n    translate([-10, 0, 5])\n        scale([0.8, 0.8, 1.2])\n            sphere(r=10, $fn=24);\n}\n\nmodule head() {\n    // Skull\n    scale([1.2, 0.9, 0.8])\n        sphere(r=8, $fn=24);\n    \n    // Muzzle\n    translate([8, 0, -2])\n        scale([1, 0.8, 0.8])\n            sphere(r=6, $fn=24);\n    \n    // Nose\n    translate([13, 0, -3])\n        scale([0.5, 0.6, 0.4])\n            sphere(r=3, $fn=16);\n    \n    // Left horn\n    translate([-3, 5, 5])\n        rotate([0, 0, -30])\n            horn();\n    \n    // Right horn\n    translate([-3, -5, 5])\n        rotate([0, 0, 30])\n            mirror([0, 1, 0])\n                horn();\n}\n\nmodule tail() {\n    // Tail base\n    translate([-25, 0, 8])\n        rotate([0, 20, 0])\n            cylinder(h=12, r1=2, r2=1, $fn=8);\n    \n    // Tail tuft\n    translate([-30, 0, 5])\n        sphere(r=2, $fn=12);\n}\n\n// Assembly\nunion() {\n    // Body\n    translate([0, 0, 20])\n        body();\n    \n    // Head\n    translate([20, 0, 30])\n        rotate([0, -20, 0])\n            head();\n    \n    // Legs\n    // Front left\n    translate([15, 8, 15])\n        rotate([10, 0, 0])\n            leg();\n    \n    // Front right\n    translate([15, -8, 15])\n        rotate([10, 0, 0])\n            leg();\n    \n    // Rear left\n    translate([-15, 8, 15])\n        rotate([-10, 0, 0])\n            leg();\n    \n    // Rear right\n    translate([-15, -8, 15])\n        rotate([-10, 0, 0])\n            leg();\n    \n    // Tail\n    tail();\n}",
    "renders": true
  },
  {
    "animal": "avocet",
    "openscad_code": "// Avocet 3D Model - Medium Complexity, Realistic Style\n// Based on pied avocet (Recurvirostra avosetta)\n\n$fn = 32; // Smooth curves for 3D printing\n\n// Main body parameters\nbody_length = 60;\nbody_height = 25;\nbody_width = 15;\n\n// Wing parameters\nwing_length = 35;\nwing_width = 12;\nwing_thickness = 1.5;\n\n// Head parameters\nhead_length = 20;\nhead_height = 12;\nbeak_length = 35;\nbeak_height = 3;\n\n// Leg parameters\nleg_height = 35;\nleg_thickness = 2;\nfoot_length = 8;\nfoot_width = 3;\n\n// Module for the main body\nmodule avocet_body() {\n    // Central body - elliptical shape\n    scale([1, 0.7, 0.5])\n    sphere(d=body_length);\n    \n    // Tail extension\n    translate([-body_length/2 - 5, 0, 0])\n    scale([1.5, 0.3, 0.2])\n    sphere(d=10);\n    \n    // Back ridge\n    translate([0, 0, body_height/4])\n    rotate([90, 0, 0])\n    cylinder(h=body_length/1.5, r1=2, r2=0.5);\n}\n\n// Module for the head and beak\nmodule avocet_head() {\n    // Head\n    translate([body_length/2 + head_length/2, 0, body_height/2])\n    scale([1.2, 0.9, 0.9])\n    sphere(d=head_length);\n    \n    // Beak - curved upward\n    translate([body_length/2 + head_length + beak_length/2, 0, body_height/2])\n    rotate([0, -10, 0])\n    scale([beak_length, beak_height, beak_height])\n    cube([1, 1, 1], center=true);\n    \n    // Beak tip\n    translate([body_length/2 + head_length + beak_length, 0, body_height/2])\n    sphere(d=beak_height);\n    \n    // Eye\n    translate([body_length/2 + head_length/2 - 3, body_height/4, body_height/2])\n    sphere(d=2);\n}\n\n// Module for wings\nmodule avocet_wings() {\n    // Left wing\n    translate([-5, body_width/2 + wing_width/2, body_height/3])\n    rotate([0, 0, -20])\n    scale([1, 0.3, 0.1])\n    difference() {\n        cube([wing_length, wing_width, wing_thickness]);\n        // Wing tip curve\n        translate([wing_length - 5, wing_width/2, 0])\n        sphere(d=10);\n    }\n    \n    // Right wing (mirrored)\n    mirror([0, 1, 0])\n    translate([-5, body_width/2 + wing_width/2, body_height/3])\n    rotate([0, 0, -20])\n    scale([1, 0.3, 0.1])\n    difference() {\n        cube([wing_length, wing_width, wing_thickness]);\n        translate([wing_length - 5, wing_width/2, 0])\n        sphere(d=10);\n    }\n}\n\n// Module for legs and feet\nmodule avocet_legs() {\n    // Left leg\n    translate([body_length/4, body_width/4, -body_height/2 - leg_height/2])\n    cylinder(h=leg_height, r=leg_thickness);\n    \n    // Left foot\n    translate([body_length/4 + foot_length/2, body_width/4 + foot_width/2, -body_height/2 - leg_height])\n    cube([foot_length, foot_width, 2]);\n    \n    // Right leg\n    translate([body_length/4, -body_width/4, -body_height/2 - leg_height/2])\n    cylinder(h=leg_height, r=leg_thickness);\n    \n    // Right foot\n    translate([body_length/4 + foot_length/2, -body_width/4 - foot_width/2, -body_height/2 - leg_height])\n    cube([foot_length, foot_width, 2]);\n}\n\n// Module for neck\nmodule avocet_neck() {\n    translate([body_length/2 - 5, 0, 0])\n    rotate([0, -20, 0])\n    cylinder(h=15, r1=body_width/2, r2=body_width/3);\n}\n\n// Assemble all parts\nunion() {\n    // Main body\n    avocet_body();\n    \n    // Neck\n    avocet_neck();\n    \n    // Head and beak\n    avocet_head();\n    \n    // Wings\n    avocet_wings();\n    \n    // Legs and feet\n    avocet_legs();\n}",
    "renders": true
  },
  {
    "animal": "axolotl",
    "openscad_code": "// Axolotl - Realistic Style, Medium Complexity\n// Designed for 3D printing (no overhangs >45°, 1.2mm walls)\n\nmodule body() {\n    union() {\n        // Main body - egg-shaped\n        scale([1, 0.7, 0.4])\n            sphere(25);\n        \n        // Tail\n        translate([0, -30, 0])\n            rotate([0, 15, 0])\n                scale([0.8, 2.5, 0.3])\n                    sphere(10);\n    }\n}\n\nmodule head() {\n    translate([0, 25, 0])\n    union() {\n        // Head sphere\n        sphere(15);\n        \n        // Snout extension\n        translate([0, 12, 0])\n            scale([0.6, 0.8, 0.6])\n                sphere(10);\n    }\n}\n\nmodule eyes() {\n    for(x = [-7, 7]) {\n        translate([x, 28, 8])\n        union() {\n            // Eye socket\n            difference() {\n                sphere(5);\n                translate([0, 0, 2])\n                    sphere(4.5);\n            }\n            // Eyeball\n            translate([0, 0, 1])\n                sphere(3);\n        }\n    }\n}\n\nmodule gills() {\n    module gill_branch(x, angle) {\n        rotate([0, 0, angle])\n            translate([x, 32, 0])\n                for(i = [0:2]) {\n                    rotate([0, 0, 45 * i])\n                        cylinder(h = 8, r1 = 1.5, r2 = 0.5);\n                }\n    }\n    \n    gill_branch(10, 0);\n    gill_branch(0, 120);\n    gill_branch(-10, 240);\n}\n\nmodule legs() {\n    module leg(x, y, rot) {\n        translate([x, y, -8])\n        rotate([0, 0, rot])\n        union() {\n            // Upper leg\n            cylinder(h = 12, r1 = 4, r2 = 3);\n            \n            // Lower leg\n            translate([0, 12, 0])\n                rotate([0, 30, 0])\n                    cylinder(h = 10, r1 = 3, r2 = 2);\n            \n            // Foot\n            translate([0, 19, 2])\n                rotate([0, -30, 0])\n                    scale([1.5, 0.8, 0.5])\n                        sphere(3);\n        }\n    }\n    \n    // Front legs\n    leg(15, 18, 30);\n    leg(-15, 18, -30);\n    \n    // Back legs\n    leg(12, -15, 45);\n    leg(-12, -15, -45);\n}\n\nmodule toes() {\n    for(side = [-1, 1]) {\n        for(pos = [15, -15]) {\n            translate([side * pos, 18 + (pos < 0 ? -33 : 0), -13])\n            rotate([0, side * 30, side * (pos > 0 ? 30 : 45)])\n            for(i = [-1, 0, 1]) {\n                translate([i * 2, 19, 2])\n                    scale([0.5, 2, 0.3])\n                        sphere(1.5);\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    body();\n    head();\n    eyes();\n    gills();\n    legs();\n    toes();\n}",
    "renders": true
  },
  {
    "animal": "ayeaye",
    "openscad_code": "// Aye-aye (Daubentonia madagascariensis) - medium complexity, realistic style\n// Body length ~70mm, tail adds another 60mm\n\n// Parameters\nbody_length = 35;\nbody_height = 20;\nbody_width = 18;\nhead_length = 20;\nhead_height = 15;\near_size = 12;\nfinger_length = 18;\nfinger_diameter = 1.5;\nleg_length = 12;\ntail_length = 30;\ntail_diameter = 4;\n\n// Wall thickness for 3D printing\nwall = 1.5;\n\nmodule rounded_box(l, w, h, r) {\n    hull() {\n        translate([r, r, r]) sphere(r);\n        translate([l - r, r, r]) sphere(r);\n        translate([l - r, w - r, r]) sphere(r);\n        translate([r, w - r, r]) sphere(r);\n        translate([r, r, h - r]) sphere(r);\n        translate([l - r, r, h - r]) sphere(r);\n        translate([l - r, w - r, h - r]) sphere(r);\n        translate([r, w - r, h - r]) sphere(r);\n    }\n}\n\nmodule body() {\n    union() {\n        // Main torso\n        translate([0, 0, 0])\n            rounded_box(body_length, body_width, body_height, 5);\n        \n        // Rounded back\n        translate([body_length/2, 0, body_height/2])\n            scale([1.2, 1.1, 0.8])\n                sphere(body_height/2);\n    }\n}\n\nmodule head() {\n    translate([body_length, 0, body_height/2]) {\n        rotate([0, -10, 0]) {\n            // Skull shape\n            difference() {\n                hull() {\n                    sphere(head_height/2);\n                    translate([head_length - head_height/2, 0, 0])\n                        sphere(head_height/2);\n                }\n                \n                // Eye sockets\n                translate([head_length - 5, -4, 3])\n                    sphere(2.5);\n                translate([head_length - 5, 4, 3])\n                    sphere(2.5);\n            }\n            \n            // Large ears\n            translate([-2, -ear_size/2, head_height/2])\n                rotate([0, 0, -30])\n                    scale([0.8, 2, 0.3])\n                        sphere(ear_size/2);\n            translate([-2, ear_size/2, head_height/2])\n                rotate([0, 0, 30])\n                    scale([0.8, 2, 0.3])\n                        sphere(ear_size/2);\n            \n            // Long middle finger\n            translate([head_length + 2, 0, -2])\n                rotate([0, 90, 0])\n                    cylinder(h = finger_length, d = finger_diameter, $fn = 8);\n        }\n    }\n}\n\nmodule limbs() {\n    // Front legs\n    for(side = [-1, 1]) {\n        translate([body_length/2 - 5, side * body_width/2, 0])\n            rotate([0, 0, side * 30])\n                cylinder(h = leg_length, d = 4, $fn = 8);\n    }\n    \n    // Hind legs\n    for(side = [-1, 1]) {\n        translate([5, side * body_width/2 + 2, 0])\n            rotate([0, 0, side * 45])\n                cylinder(h = leg_length + 3, d = 5, $fn = 8);\n    }\n}\n\nmodule tail() {\n    translate([0, 0, body_height/2 - 2])\n        rotate([0, 90, 0])\n            cylinder(h = tail_length, d1 = tail_diameter, d2 = 2, $fn = 12);\n    \n    // Tail fur texture\n    for(i = [0:3:tail_length]) {\n        translate([0, 0, i])\n            rotate([0, 90, 0])\n                cylinder(h = 3, d = tail_diameter * 1.3, $fn = 8);\n    }\n}\n\n// Assemble the aye-aye\nunion() {\n    body();\n    head();\n    limbs();\n    tail();\n}",
    "renders": true
  },
  {
    "animal": "babirusa",
    "openscad_code": "// Babirusa - medium complexity realistic model\n// Total height ~60mm, length ~80mm\n\n$fn = 24;\nbody_length = 80;\nbody_height = 35;\nleg_height = 20;\nhead_length = 25;\ntusk_length = 30;\n\nmodule body() {\n    // Main torso - elongated ellipsoid\n    translate([0, 0, leg_height + body_height/2])\n        scale([1.3, 0.8, 0.6])\n        sphere(d = body_height);\n    \n    // Rump bulge\n    translate([-body_length/2 + 5, 0, leg_height + body_height/3])\n        scale([0.8, 0.9, 0.5])\n        sphere(d = body_height * 0.8);\n    \n    // Belly\n    translate([0, 0, leg_height - 2])\n        cube([body_length * 0.6, body_height * 0.7, 4], center = true);\n}\n\nmodule head() {\n    // Snout - tapered cylinder\n    translate([body_length/2 + head_length/2, 0, leg_height + body_height * 0.7])\n        rotate([0, -10, 0])\n        cylinder(h = head_length, d1 = head_length * 0.6, d2 = head_length * 0.4);\n    \n    // Skull\n    translate([body_length/2 + head_length/4, 0, leg_height + body_height * 0.9])\n        sphere(d = head_length * 0.7);\n    \n    // Ears\n    for(side = [-1, 1])\n        translate([body_length/2, side * head_length/2, leg_height + body_height * 1.1])\n            rotate([0, side * 20, 0])\n            scale([0.3, 0.1, 0.8])\n            sphere(d = head_length * 0.4);\n    \n    // Tusks\n    for(side = [-1, 1])\n        translate([body_length/2 + head_length * 0.7, side * head_length/4, leg_height + body_height * 0.9])\n            rotate([0, -30 * side, 90])\n            cylinder(h = tusk_length, d1 = 3, d2 = 2);\n}\n\nmodule legs() {\n    // Four legs with slight taper\n    for(x = [-body_length/3, body_length/3])\n        for(y = [-body_height/2.5, body_height/2.5]) {\n            translate([x, y, leg_height/2])\n                cylinder(h = leg_height, d1 = 6, d2 = 5);\n            \n            // Hoof\n            translate([x, y, 1])\n                cylinder(h = 2, d = 7);\n        }\n}\n\nmodule tail() {\n    // Thin curved tail\n    translate([-body_length/2 - 5, 0, leg_height + body_height/2])\n        rotate([0, 0, -30])\n        cylinder(h = 15, d1 = 3, d2 = 1);\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    legs();\n    tail();\n}",
    "renders": true
  },
  {
    "animal": "baboon",
    "openscad_code": "// Baboon model - medium complexity realistic style\n// Overall size approximately 80mm tall\n\n// Main dimensions\nbody_h = 35;\nbody_w = 25;\nbody_d = 30;\nhead_r = 12;\nmuzzle_l = 8;\nmuzzle_w = 6;\nmuzzle_h = 5;\nleg_h = 20;\nleg_w = 7;\narm_l = 18;\narm_w = 5;\ntail_l = 30;\ntail_seg = 5;\n\nmodule body() {\n    // Main torso\n    difference() {\n        translate([0, 0, leg_h + body_h/2])\n            scale([1, 0.8, 1.2])\n            sphere(d=body_w);\n        \n        // Chest indentation\n        translate([0, body_d/2, leg_h + body_h/2])\n            rotate([90, 0, 0])\n            cylinder(h=body_d, d1=body_w*0.6, d2=0, $fn=20);\n    }\n    \n    // Back arch\n    translate([0, -body_d/3, leg_h + body_h/2 + 5])\n        rotate([10, 0, 0])\n        cube([body_w*0.8, body_d*0.6, 8], center=true);\n}\n\nmodule head() {\n    // Main head sphere\n    translate([0, body_d/2 + head_r*0.7, leg_h + body_h + head_r*0.8])\n        sphere(r=head_r);\n    \n    // Muzzle\n    translate([0, body_d/2 + head_r + muzzle_l/2, leg_h + body_h + head_r*0.7])\n        scale([1, 1.5, 0.8])\n        cube([muzzle_w, muzzle_l, muzzle_h], center=true);\n    \n    // Nose\n    translate([0, body_d/2 + head_r + muzzle_l, leg_h + body_h + head_r*0.7])\n        sphere(d=3);\n    \n    // Eyes\n    for(x = [-head_r*0.4, head_r*0.4]) {\n        translate([x, body_d/2 + head_r*0.8, leg_h + body_h + head_r*0.9])\n            sphere(d=4);\n        translate([x*1.1, body_d/2 + head_r*0.9, leg_h + body_h + head_r*0.9])\n            sphere(d=2);\n    }\n    \n    // Ears\n    for(x = [-head_r*0.8, head_r*0.8]) {\n        translate([x, body_d/2 + head_r*0.3, leg_h + body_h + head_r*1.2])\n            rotate([0, 10, 0])\n            scale([0.8, 0.5, 1])\n            sphere(d=6);\n    }\n}\n\nmodule limbs() {\n    // Legs with feet\n    for(side = [-1, 1]) {\n        // Leg\n        translate([side * body_w/3, 0, leg_h/2])\n            cylinder(h=leg_h, d=leg_w);\n        \n        // Foot\n        translate([side * body_w/3, body_d/4, 2])\n            scale([1.2, 2, 0.6])\n            cube([leg_w, leg_w*1.5, leg_w], center=true);\n    }\n    \n    // Arms with hands\n    for(side = [-1, 1]) {\n        // Shoulder\n        translate([side * body_w/2, body_d/3, leg_h + body_h - 5])\n            rotate([0, 0, side * -30])\n            cylinder(h=arm_l, d=arm_w);\n        \n        // Hand\n        translate([side * (body_w/2 + arm_l*0.8), body_d/3 + 2, leg_h + body_h - 8])\n            rotate([0, 90, 0])\n            scale([1.2, 1, 0.8])\n            sphere(d=arm_w*1.2);\n    }\n}\n\nmodule tail() {\n    // Segmented tail with gradual curve\n    for(i = [0:5]) {\n        rotate([0, 0, -i*15])\n        translate([0, -body_d/2 - i*tail_seg, leg_h - i*2])\n            rotate([0, 90, 0])\n            cylinder(h=tail_seg, d=tail_seg - i*0.5);\n    }\n}\n\n// Assemble the baboon\nunion() {\n    body();\n    head();\n    limbs();\n    tail();\n}",
    "renders": true
  },
  {
    "animal": "badger",
    "openscad_code": "// Realistic Badger - Medium Complexity\n// 3D printable, ~65mm long\n\nmodule badger() {\n    // Body parameters\n    body_length = 45;\n    body_height = 20;\n    body_width = 25;\n    \n    // Head parameters\n    head_length = 18;\n    head_height = 15;\n    head_width = 15;\n    \n    // Leg parameters\n    leg_height = 12;\n    leg_width = 6;\n    \n    // Tail parameters\n    tail_length = 15;\n    tail_height = 8;\n    \n    // Main body - oval shape\n    union() {\n        // Central body\n        translate([0, 0, leg_height])\n        scale([1, 0.8, 0.6])\n        sphere(d=body_width);\n        \n        // Body extension\n        translate([-body_length/3, 0, leg_height])\n        cube([body_length, body_width*0.7, body_height], center=true);\n        \n        // Head\n        translate([body_length/2 + 5, 0, leg_height + 5])\n        rotate([0, -10, 0])\n        scale([1.2, 1, 1])\n        sphere(d=head_width);\n        \n        // Snout\n        translate([body_length/2 + 15, 0, leg_height + 3])\n        scale([1.5, 0.7, 0.7])\n        sphere(d=10);\n        \n        // Legs\n        for (x = [-body_length/3, body_length/3]) {\n            for (y = [-body_width/3, body_width/3]) {\n                translate([x, y, leg_height/2])\n                cylinder(h=leg_height, d=leg_width, $fn=8);\n            }\n        }\n        \n        // Tail\n        translate([-body_length/2 - tail_length/2, 0, leg_height + 5])\n        rotate([0, 20, 0])\n        scale([1, 0.6, 0.6])\n        cylinder(h=tail_length, d=tail_height, $fn=12);\n        \n        // Ears\n        for (y = [-head_width/3, head_width/3]) {\n            translate([body_length/2 + 5, y, leg_height + head_height])\n            rotate([0, -20, 0])\n            cylinder(h=6, d1=4, d2=2, $fn=6);\n        }\n        \n        // Stripes\n        for (i = [1:3]) {\n            translate([body_length/2 - i*5, 0, leg_height + body_height*0.8])\n            rotate([90, 0, 0])\n            scale([1, 0.3, 0.1])\n            cylinder(h=body_width*1.2, d=8, $fn=3);\n        }\n        \n        // Eyes\n        for (y = [-head_width/4, head_width/4]) {\n            translate([body_length/2 + 12, y, leg_height + 8])\n            sphere(d=2);\n        }\n        \n        // Nose\n        translate([body_length/2 + 18, 0, leg_height + 3])\n        sphere(d=3);\n    }\n}\n\n// Generate the badger\nbadger();",
    "renders": true
  },
  {
    "animal": "bandicoot",
    "openscad_code": "// Bandicoot - Medium complexity realistic style\n// Overall dimensions ~80mm length\n\nmodule bandicoot_body() {\n    // Main torso - elongated oval\n    union() {\n        // Upper torso\n        translate([-5,0,10]) rotate([0,0,0]) scale([1,0.7,0.6]) sphere(r=20);\n        // Lower torso extension\n        translate([5,0,5]) rotate([0,0,0]) scale([1.2,0.8,0.5]) sphere(r=15);\n    }\n}\n\nmodule bandicoot_head() {\n    // Snout and head combined\n    union() {\n        // Main head sphere\n        translate([-25,0,25]) scale([1.1,0.9,0.8]) sphere(r=12);\n        \n        // Elongated snout\n        translate([-38,0,22]) rotate([0,-10,0]) scale([2,0.8,0.8]) sphere(r=8);\n        \n        // Nose at tip\n        translate([-45,0,20]) sphere(r=3);\n        \n        // Ears\n        translate([-30,8,32]) rotate([0,0,20]) cylinder(h=10, r1=4, r2=2);\n        translate([-30,-8,32]) rotate([0,0,-20]) cylinder(h=10, r1=4, r2=2);\n    }\n}\n\nmodule bandicoot_limbs() {\n    // Front legs\n    for(side = [-1, 1]) {\n        translate([-5, side*12, 8]) rotate([10,0,side*15]) \n            cylinder(h=15, r1=5, r2=4);\n        translate([-5, side*12, -6]) rotate([0,side*20,0]) \n            scale([1.5,0.8,0.5]) sphere(r=4);\n    }\n    \n    // Hind legs\n    for(side = [-1, 1]) {\n        translate([20, side*10, 5]) rotate([0,0,side*30]) \n            cylinder(h=20, r1=6, r2=4);\n        translate([20, side*10, -14]) rotate([0,side*30,0]) \n            scale([2,1,0.8]) sphere(r=5);\n    }\n}\n\nmodule bandicoot_tail() {\n    // Curved tail\n    for(i = [0:5]) {\n        rotate([0,0,i*15]) translate([25 + i*3, 0, 5 - i*1]) \n            scale([1.2 - i*0.15, 1 - i*0.15, 1 - i*0.15]) \n            sphere(r=6);\n    }\n}\n\nmodule bandicoot_stripes() {\n    // Back stripes\n    for(i = [1:4]) {\n        translate([15 - i*8, 0, 12]) rotate([0,90,0]) \n            scale([0.3,1,2]) cylinder(h=20, r=3);\n    }\n}\n\nmodule bandicoot_eyes() {\n    // Eyes\n    for(side = [-1, 1]) {\n        translate([-32, side*5, 25]) sphere(r=2.5);\n        translate([-33, side*5, 26]) sphere(r=1.2);\n    }\n}\n\n// Assembly\nunion() {\n    bandicoot_body();\n    bandicoot_head();\n    bandicoot_limbs();\n    bandicoot_tail();\n}\n\n// Stripes as subtractive elements\ndifference() {\n    union();\n    bandicoot_stripes();\n}\n\n// Eyes as separate elements\ncolor(\"black\") bandicoot_eyes();",
    "renders": true
  },
  {
    "animal": "barracuda",
    "openscad_code": "// Barracuda - Realistic Style, Medium Complexity\n// Dimensions: ~80mm long, 20mm tall, 15mm wide\n\n$fn = 32;  // Smooth curves for realistic appearance\nbody_length = 80;\nbody_height = 20;\nbody_width = 15;\n\nmodule barracuda() {\n    // Main body - elongated teardrop shape using hull\n    hull() {\n        translate([-body_length/2, 0, 0]) \n            sphere(d=body_width*0.8);\n        translate([body_length/2-5, 0, 0]) \n            sphere(d=body_width*0.3);\n    }\n    \n    // Upper jaw extension\n    translate([body_length/2-8, 0, body_height/3])\n        rotate([0, -20, 0])\n        scale([1.2, 0.8, 0.6])\n        cylinder(h=15, d1=body_width*0.4, d2=body_width*0.2);\n    \n    // Lower jaw\n    translate([body_length/2-10, 0, -body_height/3])\n        rotate([0, 15, 0])\n        scale([1, 0.7, 0.5])\n        cylinder(h=12, d1=body_width*0.3, d2=body_width*0.15);\n    \n    // Dorsal fin - multiple segments\n    for(i=[-10:5:15]) {\n        translate([i*2, 0, body_height/2])\n            rotate([0, 20-i, 0])\n            scale([0.8, 0.1, 1])\n            cylinder(h=body_height*0.8, d1=body_width*0.3, d2=body_width*0.1);\n    }\n    \n    // Pectoral fins\n    module pectoral_fin(side) {\n        translate([body_length/4, side*body_width/2, -body_height/4])\n            rotate([0, 0, side*30])\n            scale([1, 0.3, 0.7])\n            cylinder(h=body_width*0.8, d1=body_width*0.4, d2=body_width*0.1);\n    }\n    pectoral_fin(1);\n    pectoral_fin(-1);\n    \n    // Tail fin - forked caudal fin\n    module tail_fin() {\n        translate([-body_length/2+2, 0, 0])\n            rotate([0, 0, 0])\n            difference() {\n                // Upper lobe\n                translate([0, 0, body_height/3])\n                    rotate([0, 0, 20])\n                    scale([0.5, 0.2, 1.5])\n                    cylinder(h=body_height*1.2, d1=body_width*0.5, d2=body_width*0.2);\n                \n                // Lower lobe\n                translate([0, 0, -body_height/3])\n                    rotate([0, 0, -20])\n                    scale([0.5, 0.2, 1.5])\n                    cylinder(h=body_height*1.2, d1=body_width*0.5, d2=body_width*0.2);\n            }\n    }\n    tail_fin();\n    \n    // Eyes\n    module eye(side) {\n        translate([body_length/2-15, side*body_width/3, body_height/4])\n            sphere(d=body_width*0.15);\n        translate([body_length/2-14.5, side*body_width/3, body_height/4])\n            sphere(d=body_width*0.07);  // Pupil\n    }\n    eye(1);\n    eye(-1);\n    \n    // Gill slits\n    for(i=[1:3]) {\n        translate([body_length/2-25-i*3, body_width/2, -body_height/4])\n            rotate([0, 90, 0])\n            cylinder(h=body_width*0.1, r=body_width*0.05, $fn=6);\n    }\n    \n    // Anal fin\n    for(i=[-5:5:5]) {\n        translate([i*2, 0, -body_height/2+2])\n            rotate([0, -20, 0])\n            scale([0.6, 0.1, 0.8])\n            cylinder(h=body_height*0.5, d1=body_width*0.3, d2=body_width*0.1);\n    }\n}\n\n// Generate the barracuda centered at origin\nbarracuda();",
    "renders": true
  },
  {
    "animal": "basilisk",
    "openscad_code": "// Basilisk - Realistic style, medium complexity\n// Size: ~70mm long, 25mm tall\n\n$fn = 32;\n\n// Main body\nmodule body() {\n    union() {\n        // Torso\n        translate([0, 0, 12])\n            scale([1, 0.7, 0.6])\n            sphere(15);\n        \n        // Abdomen\n        translate([-20, 0, 10])\n            scale([1.2, 0.8, 0.5])\n            sphere(12);\n        \n        // Neck\n        translate([20, 0, 15])\n            cylinder(h=10, r1=6, r2=8);\n    }\n}\n\n// Head with crest\nmodule head() {\n    union() {\n        // Skull\n        translate([30, 0, 22])\n            rotate([0, -10, 0])\n            scale([1.3, 0.8, 0.9])\n            sphere(10);\n        \n        // Snout\n        translate([42, 0, 22])\n            scale([1, 0.6, 0.6])\n            sphere(6);\n        \n        // Crest plates\n        for(i=[0:3]) {\n            translate([25+i*4, 0, 30+i*2])\n                rotate([0, 10, 0])\n                scale([1, 0.3, 0.1])\n                sphere(8);\n        }\n        \n        // Eyes\n        translate([38, -6, 25])\n            sphere(3);\n        translate([38, 6, 25])\n            sphere(3);\n    }\n}\n\n// Tail segments\nmodule tail() {\n    for(i=[0:5]) {\n        translate([-30-i*8, 0, 12-i*2])\n            scale([1-i*0.1, 1-i*0.1, 1-i*0.1])\n            sphere(12-i*1.5);\n    }\n}\n\n// Leg module\nmodule leg(x, y, angle) {\n    translate([x, y, 0])\n        rotate([0, 0, angle])\n        union() {\n            // Upper leg\n            translate([0, 0, 8])\n                rotate([-30, 0, 0])\n                cylinder(h=12, r=3);\n            \n            // Lower leg\n            translate([0, -6, -2])\n                rotate([30, 0, 0])\n                cylinder(h=10, r=2.5);\n            \n            // Foot\n            translate([0, -9, -8])\n                rotate([0, 30, 0])\n                cube([8, 3, 2], center=true);\n        }\n}\n\n// Spikes along back\nmodule spikes() {\n    for(i=[-25:5:35]) {\n        translate([i, 0, 22+i*0.2])\n            rotate([0, -20, 0])\n            cylinder(h=8, r1=2, r2=0.5);\n    }\n}\n\n// Arms with claws\nmodule arms() {\n    for(side=[-1, 1]) {\n        translate([15, side*10, 18])\n            rotate([0, 0, side*30])\n            union() {\n                // Upper arm\n                cylinder(h=8, r=2.5);\n                \n                // Forearm\n                translate([0, side*6, -6])\n                    rotate([0, 0, side*-30])\n                    cylinder(h=7, r=2);\n                \n                // Claws\n                for(j=[-1:1]) {\n                    translate([0, side*(6+j*2), -11])\n                        rotate([0, -20, 0])\n                        scale([0.3, 0.3, 1])\n                        cylinder(h=5, r=2);\n                }\n            }\n    }\n}\n\n// Main assembly\nunion() {\n    body();\n    head();\n    tail();\n    \n    // Legs\n    leg(10, 12, 30);\n    leg(10, -12, -30);\n    leg(-5, 10, 20);\n    leg(-5, -10, -20);\n    leg(-20, 8, 15);\n    leg(-20, -8, -15);\n    \n    // Spikes and arms\n    spikes();\n    arms();\n}\n\n// Base platform for printing\ntranslate([0, 0, -2])\n    cube([70, 30, 2], center=true);",
    "renders": true
  },
  {
    "animal": "bass",
    "openscad_code": "// Bass guitar - realistic medium complexity\n// Overall length ~90mm, suitable for 3D printing\n\n$fn = 32;\n\n// Body\nmodule body() {\n    difference() {\n        // Main body shape\n        hull() {\n            translate([0, 0, 2]) cube([55, 35, 4], center=true);\n            translate([-20, 0, 2]) cube([25, 20, 4], center=true);\n            translate([20, 0, 2]) cube([25, 28, 4], center=true);\n        }\n        \n        // Cutaways\n        translate([-15, 15, 0]) rotate([0, 0, 30]) cylinder(h=10, r=12);\n        translate([-15, -15, 0]) rotate([0, 0, -30]) cylinder(h=10, r=12);\n        \n        // Electronics cavity\n        translate([5, 0, -1]) cube([30, 18, 3], center=true);\n    }\n}\n\n// Neck\nmodule neck() {\n    translate([0, 0, 4]) {\n        // Neck shaft\n        hull() {\n            translate([0, 0, 0]) cube([60, 5, 3], center=true);\n            translate([30, 0, 0]) cube([50, 4, 3], center=true);\n        }\n        \n        // Headstock\n        translate([40, 0, 0]) {\n            difference() {\n                hull() {\n                    cube([20, 12, 2], center=true);\n                    translate([7, 0, 0]) cube([10, 8, 2], center=true);\n                }\n                \n                // Tuning peg holes\n                for(i = [-1, 1]) {\n                    translate([3, i*4, 0]) cylinder(h=3, r=1);\n                }\n            }\n        }\n    }\n}\n\n// Strings and frets\nmodule strings_and_frets() {\n    // Frets\n    for(i = [0:4:20]) {\n        translate([i - 20, 0, 7.5]) cube([0.5, 6, 0.5], center=true);\n    }\n    \n    // Strings\n    for(i = [0:1.2:4.8]) {\n        translate([0, -2.4 + i, 7.5]) cylinder(h=90, r=0.2);\n    }\n}\n\n// Bridge\nmodule bridge() {\n    translate([-18, 0, 4]) {\n        cube([8, 12, 2], center=true);\n        \n        // Bridge saddles\n        for(i = [0:1.2:4.8]) {\n            translate([0, -2.4 + i, 1]) cube([6, 0.8, 1], center=true);\n        }\n    }\n}\n\n// Pickups\nmodule pickups() {\n    // Neck pickup\n    translate([-5, 0, 4]) {\n        cube([16, 8, 2], center=true);\n        translate([0, 0, 1]) cube([14, 6, 1], center=true);\n    }\n    \n    // Bridge pickup  \n    translate([-15, 0, 4]) {\n        cube([16, 8, 2], center=true);\n        translate([0, 0, 1]) cube([14, 6, 1], center=true);\n    }\n}\n\n// Tuning pegs\nmodule tuning_pegs() {\n    translate([47, 0, 5.5]) {\n        for(i = [-1, 1]) {\n            translate([0, i*4, 0]) {\n                cylinder(h=6, r=1.5);\n                translate([0, 0, 6]) rotate([90, 90, 0]) cylinder(h=4, r=0.5);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    neck();\n    pickups();\n    bridge();\n    tuning_pegs();\n    strings_and_frets();\n}",
    "renders": true
  },
  {
    "animal": "bat",
    "openscad_code": "// Realistic 3D printable bat model\n// Medium complexity - anatomically accurate proportions\n\n// Overall dimensions: ~90mm wingspan, ~40mm body length\n\n// Body module - main torso\nmodule body() {\n    // Main torso segment\n    translate([0, 0, 5]) \n        scale([1.2, 0.8, 1]) \n        sphere(d=18, $fn=16);\n    \n    // Upper chest\n    translate([0, 0, 10]) \n        scale([1, 0.7, 0.8]) \n        sphere(d=15, $fn=16);\n    \n    // Lower abdomen\n    translate([0, 0, 0]) \n        scale([0.9, 0.9, 1.1]) \n        sphere(d=14, $fn=16);\n}\n\n// Head module with ears and snout\nmodule head() {\n    union() {\n        // Main head sphere\n        translate([0, 0, 17]) \n            sphere(d=12, $fn=16);\n        \n        // Snout\n        translate([0, 8, 17]) \n            scale([0.5, 1, 0.6]) \n            sphere(d=8, $fn=16);\n        \n        // Left ear\n        translate([-4, -3, 22]) \n            rotate([0, 20, -20]) \n            scale([0.3, 1, 1.5]) \n            cylinder(d1=5, d2=2, h=8, $fn=8);\n        \n        // Right ear\n        translate([4, -3, 22]) \n            rotate([0, 20, 20]) \n            scale([0.3, 1, 1.5]) \n            cylinder(d1=5, d2=2, h=8, $fn=8);\n        \n        // Eyes\n        translate([-2, 5.5, 17]) \n            sphere(d=1.5, $fn=8);\n        translate([2, 5.5, 17]) \n            sphere(d=1.5, $fn=8);\n    }\n}\n\n// Wing finger module - creates one finger segment\nmodule finger(length, width, thickness) {\n    for(i = [0:2]) {\n        translate([i*length/3, 0, 0]) \n            rotate([0, 0, -15*i]) \n            scale([1, 1 - i*0.15, 1 - i*0.1]) \n            cube([length/3, width, thickness], center=true);\n    }\n}\n\n// Complete wing module\nmodule wing(is_left=true) {\n    side = is_left ? 1 : -1;\n    \n    // Wing membrane base\n    translate([side*15, 0, 8]) \n        rotate([0, 0, is_left ? 15 : -15]) \n        scale([2.5, 1, 0.3]) \n        sphere(d=35, $fn=32);\n    \n    // Wing bones\n    // Thumb\n    translate([side*9, -3, 12]) \n        rotate([0, 0, is_left ? 30 : -30]) \n        finger(8, 3, 2);\n    \n    // Index finger\n    translate([side*7, 0, 10]) \n        rotate([0, 0, is_left ? 20 : -20]) \n        finger(15, 2.5, 1.5);\n    \n    // Middle finger\n    translate([side*7, 3, 10]) \n        rotate([0, 0, is_left ? 10 : -10]) \n        finger(18, 2.5, 1.5);\n    \n    // Ring finger\n    translate([side*7, 6, 10]) \n        rotate([0, 0, is_left ? 0 : 0]) \n        finger(16, 2.5, 1.5);\n    \n    // Pinky finger\n    translate([side*7, 9, 10]) \n        rotate([0, 0, is_left ? -10 : 10]) \n        finger(14, 2.5, 1.5);\n}\n\n// Legs and feet module\nmodule legs() {\n    // Left leg\n    translate([-3, -3, 0]) \n        cylinder(d=3, h=8, $fn=8);\n    \n    // Left foot\n    translate([-3, -3, -4]) \n        rotate([0, 90, 0]) \n        scale([1, 0.4, 0.4]) \n        cylinder(d=6, h=4, $fn=8);\n    \n    // Left toes\n    for(i = [-1:1]) {\n        translate([-3 + i*1.5, -3, -4]) \n            rotate([0, 90, 0]) \n            scale([0.3, 0.3, 0.3]) \n            cylinder(d=3, h=2, $fn=6);\n    }\n    \n    // Right leg\n    translate([3, -3, 0]) \n        cylinder(d=3, h=8, $fn=8);\n    \n    // Right foot\n    translate([3, -3, -4]) \n        rotate([0, 90, 0]) \n        scale([1, 0.4, 0.4]) \n        cylinder(d=6, h=4, $fn=8);\n    \n    // Right toes\n    for(i = [-1:1]) {\n        translate([3 + i*1.5, -3, -4]) \n            rotate([0, 90, 0]) \n            scale([0.3, 0.3, 0.3]) \n            cylinder(d=3, h=2, $fn=6);\n    }\n}\n\n// Tail membrane\nmodule tail() {\n    translate([0, -15, 5]) \n        rotate([0, 30, 0]) \n        scale([0.8, 2, 0.3]) \n        sphere(d=20, $fn=16);\n}\n\n// Main assembly\nunion() {\n    body();\n    head();\n    wing(true);   // Left wing\n    wing(false);  // Right wing\n    legs();\n    tail();\n}\n\n// Base support for 3D printing\ntranslate([0, 0, -5]) \n    cube([60, 60, 1], center=true);",
    "renders": true
  },
  {
    "animal": "bear",
    "openscad_code": "// Realistic 3D printable bear - medium complexity\n// Overall size ~70mm tall\n\n// Body proportions based on brown bear anatomy\n\nmodule bear_body() {\n    // Main torso - oval shape\n    union() {\n        scale([1.2, 0.8, 1]) \n            sphere(d=40, $fn=32);\n        \n        // Chest area slight protrusion\n        translate([0, 8, 4])\n            scale([1.1, 0.9, 0.7])\n                sphere(d=30, $fn=24);\n    }\n}\n\nmodule bear_head() {\n    // Head - sphere with snout\n    union() {\n        // Main head\n        translate([0, -25, 15])\n            sphere(d=28, $fn=32);\n        \n        // Snout\n        translate([0, -35, 12])\n            scale([1, 1.5, 0.8])\n                sphere(d=18, $fn=24);\n        \n        // Nose\n        translate([0, -42, 12])\n            scale([0.6, 0.4, 0.5])\n                sphere(d=8, $fn=16);\n        \n        // Eyes\n        translate([-7, -27, 20])\n            sphere(d=4, $fn=12);\n        translate([7, -27, 20])\n            sphere(d=4, $fn=12);\n        \n        // Ears\n        translate([-10, -20, 27])\n            rotate([30, 0, -30])\n                scale([0.7, 0.5, 1])\n                    sphere(d=12, $fn=16);\n        translate([10, -20, 27])\n            rotate([30, 0, 30])\n                scale([0.7, 0.5, 1])\n                    sphere(d=12, $fn=16);\n    }\n}\n\nmodule bear_leg(side) {\n    // Front leg assembly\n    translate([side * 12, -5, -5]) {\n        // Upper leg\n        rotate([0, 10, 0])\n            cylinder(h=20, d1=12, d2=10, $fn=16);\n        \n        // Lower leg\n        translate([0, 0, -20])\n            rotate([0, 10, 0])\n                cylinder(h=18, d1=10, d2=12, $fn=16);\n        \n        // Paw\n        translate([0, 0, -38])\n            sphere(d=14, $fn=16);\n    }\n}\n\nmodule bear_rear_leg(side) {\n    // Rear leg - thicker\n    translate([side * 14, 15, -8]) {\n        // Upper leg\n        rotate([0, -10, 0])\n            cylinder(h=22, d1=14, d2=12, $fn=16);\n        \n        // Lower leg\n        translate([0, 0, -22])\n            rotate([0, -10, 0])\n                cylinder(h=20, d1=12, d2=14, $fn=16);\n        \n        // Paw\n        translate([0, 0, -42])\n            sphere(d=16, $fn=16);\n    }\n}\n\nmodule bear_arm(side) {\n    // Arm assembly\n    translate([side * 20, -8, 10]) {\n        rotate([0, 0, side * 20])\n            // Upper arm\n            rotate([90, 0, 0])\n                cylinder(h=18, d1=10, d2=8, $fn=16);\n        \n        // Lower arm\n        translate([side * 8, -8, -8])\n            rotate([90, 0, side * 30])\n                cylinder(h=15, d1=8, d2=10, $fn=16);\n        \n        // Paw\n        translate([side * 12, -12, -12])\n            sphere(d=12, $fn=16);\n    }\n}\n\nmodule bear_tail() {\n    // Small tail\n    translate([0, 25, 2])\n        rotate([45, 0, 0])\n            scale([1, 1, 1.5])\n                sphere(d=8, $fn=16);\n}\n\n// Main assembly\nunion() {\n    bear_body();\n    bear_head();\n    \n    // Legs\n    bear_leg(-1);  // Left front\n    bear_leg(1);   // Right front\n    bear_rear_leg(-1);  // Left rear\n    bear_rear_leg(1);   // Right rear\n    \n    // Arms\n    bear_arm(-1);  // Left arm\n    bear_arm(1);   // Right arm\n    \n    bear_tail();\n}\n\n// Base platform for stability\ndifference() {\n    translate([0, 0, -45])\n        cube([60, 80, 5], center=true);\n    \n    // Hollow out base slightly\n    translate([0, 0, -44])\n        cube([50, 70, 5], center=true);\n}",
    "renders": true
  },
  {
    "animal": "beaver",
    "openscad_code": "// Realistic 3D Printable Beaver – OpenSCAD\n// Approx 75 mm long, 40 mm high, 35 mm wide\n// Medium complexity, no overhangs, 1 mm wall thickness assumed\n\n// Main body module\nmodule body() {\n    // Torso – elongated sphere\n    translate([0,0,15]) scale([1.5,1,1]) sphere(15, $fn=30);\n    // Belly – flattened sphere to avoid overhang\n    translate([0,0,8]) scale([1.5,1,0.6]) sphere(15, $fn=30);\n}\n\n// Head module\nmodule head() {\n    union() {\n        // Main head shape\n        translate([-22,0,22]) scale([1.2,1,1.1]) sphere(12, $fn=30);\n        // Muzzle\n        translate([-33,0,18]) scale([1.5,0.9,0.9]) sphere(8, $fn=30);\n    }\n}\n\n// Ears – two small spheres\nmodule ears() {\n    for(side=[-1,1])\n        translate([-25,side*10,32]) sphere(4, $fn=20);\n}\n\n// Eyes – small spheres on muzzle\nmodule eyes() {\n    color(\"black\")\n    for(side=[-1,1])\n        translate([-32,side*5,22]) sphere(2, $fn=20);\n}\n\n// Nose – small flattened sphere\nmodule nose() {\n    color(\"black\")\n    translate([-38,0,19]) scale([1,0.8,0.5]) sphere(3, $fn=20);\n}\n\n// Tail – flat paddle-like tail\nmodule tail() {\n    translate([20,0,8]) rotate([0,90,0]) {\n        difference() {\n            scale([1,2.5,0.5]) sphere(10, $fn=30); // main tail\n            translate([-10,0,-2]) cube([20,20,4], center=true); // flatten bottom\n        }\n    }\n}\n\n// Front paw module\nmodule front_paw() {\n    union() {\n        // Upper arm\n        translate([-5,0,12]) rotate([0,-15,0]) cylinder(h=12, r1=4, r2=3, $fn=20);\n        // Lower arm\n        translate([-12,0,8]) rotate([0,-15,0]) cylinder(h=10, r1=3, r2=2, $fn=20);\n        // Paw\n        translate([-18,0,6]) sphere(3, $fn=20);\n    }\n}\n\n// Rear paw module\nmodule rear_paw() {\n    union() {\n        // Thigh\n        translate([12,0,8]) rotate([0,15,0]) cylinder(h=10, r1=5, r2=4, $fn=20);\n        // Lower leg\n        translate([18,0,5]) rotate([0,15,0]) cylinder(h=8, r1=4, r2=3, $fn=20);\n        // Paw\n        translate([22,0,3]) sphere(4, $fn=20);\n    }\n}\n\n// Teeth – two small cubes\nmodule teeth() {\n    color(\"white\")\n    for(side=[-1,1])\n        translate([-36,side*2,14]) cube([2,1,2]);\n}\n\n// Whiskers – thin cylinders\nmodule whiskers() {\n    for(side=[-1,1])\n        for(angle=[-30,0,30])\n            rotate([0,0,side*angle])\n                translate([-35,side*10,18]) cylinder(h=5, r=0.5, $fn=10);\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    ears();\n    eyes();\n    nose();\n    teeth();\n    whiskers();\n    tail();\n    \n    // Position left and right front paws\n    translate([0,-10,0]) front_paw();\n    translate([0,10,0]) mirror([0,1,0]) front_paw();\n    \n    // Position left and right rear paws\n    translate([0,-8,0]) rear_paw();\n    translate([0,8,0]) mirror([0,1,0]) rear_paw();\n}",
    "renders": true
  },
  {
    "animal": "bee",
    "openscad_code": "// Medium-complexity realistic bee for 3D printing\n// Approx. 70 mm long\n\n// Body parameters\nbody_r = 10;\nthorax_r = 12;\nhead_r = 9;\nab_len = 30;\nstinger_len = 7;\n\n// Wing parameters\nwing_len = 25;\nwing_w = 8;\nwing_t = 0.8;\n\n// Leg parameters\nleg_len = 18;\nleg_seg = 6;\nleg_t = 1.5;\n\n// Antenna parameters\nant_len = 12;\nant_t = 1;\n\n// Stripes\nstripe_w = 3;\nnum_stripes = 4;\n\nmodule body() {\n    // Head\n    translate([-ab_len/2 - head_r*0.7, 0, 0])\n        sphere(r = head_r);\n\n    // Thorax\n    translate([0, 0, 0])\n        sphere(r = thorax_r);\n\n    // Abdomen\n    difference() {\n        union() {\n            translate([ab_len/2, 0, 0])\n                scale([1.3, 1, 1])\n                    sphere(r = body_r);\n            // Stinger\n            translate([ab_len + body_r + stinger_len/2, 0, 0])\n                cylinder(h = stinger_len, r1 = 0.5, r2 = 0, center = true);\n        }\n        // Stripes\n        for(i=[1:num_stripes]) {\n            rotate([0, 90, 0])\n                translate([ab_len/2 + (i - num_stripes/2) * stripe_w*2, 0, 0])\n                    cube([stripe_w, body_r*2.5, body_r*2.5], center = true);\n        }\n    }\n}\n\nmodule wing() {\n    difference() {\n        hull() {\n            translate([0, -wing_w/2, 0])\n                sphere(r = wing_t*2);\n            translate([wing_len, 0, 0])\n                sphere(r = wing_t*2);\n            translate([0, wing_w/2, 0])\n                sphere(r = wing_t*2);\n        }\n        // Wing veins\n        for(i=[1:3]) {\n            translate([wing_len/4 * i, 0, -1])\n                cube([0.5, wing_w*0.8, wing_t+2], center = true);\n        }\n    }\n}\n\nmodule wings() {\n    // Left wings\n    translate([0, 0, thorax_r - 2])\n        rotate([20, 0, 30])\n            wing();\n    translate([5, 0, thorax_r - 3])\n        rotate([10, 0, 20])\n            scale([0.8, 0.8, 1])\n                wing();\n    \n    // Right wings (mirrored)\n    mirror([0, 1, 0]) {\n        translate([0, 0, thorax_r - 2])\n            rotate([20, 0, 30])\n                wing();\n        translate([5, 0, thorax_r - 3])\n            rotate([10, 0, 20])\n                scale([0.8, 0.8, 1])\n                    wing();\n    }\n}\n\nmodule leg() {\n    // Upper segment\n    translate([0, 0, -leg_seg/2])\n        cylinder(h = leg_seg, r = leg_t, center = true);\n    \n    // Joint\n    translate([0, 0, -leg_seg])\n        sphere(r = leg_t*1.2);\n    \n    // Lower segment\n    translate([0, leg_seg/1.5, -leg_seg*1.5])\n        rotate([30, 0, 0])\n            cylinder(h = leg_seg, r = leg_t*0.8, center = true);\n}\n\nmodule legs() {\n    // Front legs\n    for(side=[-1, 1]) {\n        translate([-ab_len/4, side*thorax_r*0.8, -thorax_r*0.5])\n            rotate([0, 40, side*20])\n                leg();\n        \n        // Middle legs\n        translate([0, side*thorax_r*0.9, -thorax_r*0.7])\n            rotate([0, 20, side*30])\n                translate([0, 0, -2])\n                    leg();\n        \n        // Rear legs\n        translate([ab_len/3, side*body_r*0.9, -body_r*0.6])\n            rotate([0, 10, side*40])\n                translate([0, 0, -4])\n                    leg();\n    }\n}\n\nmodule antenna() {\n    // Base\n    translate([0, 0, 0])\n        sphere(r = ant_t*1.5);\n    \n    // Main shaft\n    translate([0, 0, -ant_len/2])\n        cylinder(h = ant_len, r = ant_t, center = true);\n    \n    // Tip\n    translate([0, 0, -ant_len])\n        sphere(r = ant_t*0.8);\n}\n\nmodule antennas() {\n    // Left antenna\n    translate([-ab_len/2 - head_r*0.7, head_r*0.5, head_r*0.5])\n        rotate([30, 0, -30])\n            antenna();\n    \n    // Right antenna\n    translate([-ab_len/2 - head_r*0.7, -head_r*0.5, head_r*0.5])\n        rotate([30, 0, 30])\n            antenna();\n}\n\n// Compound eyes\nmodule eyes() {\n    for(side=[-1, 1]) {\n        translate([-ab_len/2 - head_r*0.5, side*head_r*0.6, head_r*0.3])\n            sphere(r = head_r*0.4);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    wings();\n    legs();\n    antennas();\n    eyes();\n}",
    "renders": true
  },
  {
    "animal": "beetle",
    "openscad_code": "// Realistic beetle model - medium complexity\n// Dimensions in mm, suitable for 3D printing\n\nmodule beetle() {\n    // Overall scale\n    scale(0.5) {\n        \n        // Abdomen (main body)\n        color(\"darkgreen\")\n        translate([0, 0, 10])\n        scale([1.2, 0.8, 0.6])\n        sphere(r=20);\n        \n        // Thorax\n        color(\"darkgreen\")\n        translate([0, 0, 25])\n        scale([1, 0.9, 0.5])\n        sphere(r=15);\n        \n        // Head\n        color(\"darkgreen\")\n        translate([0, 0, 35])\n        scale([0.8, 0.7, 0.4])\n        sphere(r=12);\n        \n        // Mandibles\n        module mandible(side) {\n            translate([side * 8, 0, 32])\n            rotate([0, side * 20, 0])\n            scale([0.3, 0.2, 0.8])\n            cylinder(r1=5, r2=2, h=10);\n        }\n        \n        mandible(1);\n        mandible(-1);\n        \n        // Eyes\n        module eye(side) {\n            color(\"black\")\n            translate([side * 7, 6, 37])\n            sphere(r=3);\n        }\n        \n        eye(1);\n        eye(-1);\n        \n        // Antennae\n        module antenna(side) {\n            translate([side * 6, 4, 40])\n            rotate([0, 30, side * 20])\n            cylinder(r1=1, r2=0.5, h=15);\n            \n            translate([side * 6, 4, 55])\n            rotate([0, 30, side * 20])\n            sphere(r=1.5);\n        }\n        \n        antenna(1);\n        antenna(-1);\n        \n        // Elytra (wing covers)\n        module elytron(side) {\n            color(\"saddlebrown\")\n            translate([side * 10, 0, 15])\n            rotate([0, 0, side * 10])\n            scale([0.8, 1.2, 0.3])\n            cylinder(r1=15, r2=8, h=20);\n        }\n        \n        elytron(1);\n        elytron(-1);\n        \n        // Legs\n        module leg(side, segment, angle) {\n            rotate([0, 0, angle])\n            translate([side * 15, 0, 20 - segment * 3])\n            rotate([0, 0, side * 30])\n            cylinder(r=2, h=8);\n            \n            translate([side * 15, 0, 20 - segment * 3])\n            rotate([0, 0, side * 30])\n            translate([0, 0, 8])\n            rotate([side * 20, 0, 0])\n            cylinder(r=1.5, h=6);\n            \n            translate([side * 15, 0, 20 - segment * 3])\n            rotate([0, 0, side * 30])\n            translate([0, 0, 14])\n            rotate([side * 20, 0, 0])\n            translate([0, 0, 6])\n            scale([0.8, 0.8, 2])\n            sphere(r=1.5);\n        }\n        \n        // Front legs\n        leg(1, 0, 30);\n        leg(-1, 0, -30);\n        \n        // Middle legs\n        leg(1, 1, 0);\n        leg(-1, 1, 0);\n        \n        // Rear legs\n        leg(1, 2, -30);\n        leg(-1, 2, 30);\n        \n        // Segmentation lines on abdomen\n        for (i = [1:3]) {\n            color(\"black\")\n            translate([0, 0, 10 + i * 5])\n            rotate([90, 0, 0])\n            scale([1.2, 0.8, 0.05])\n            cylinder(r=20, h=0.5);\n        }\n        \n        // Small bumps on elytra\n        for (i = [0:5]) {\n            angle = i * 60;\n            color(\"darkgreen\")\n            translate([10 * cos(angle), 10 * sin(angle), 15])\n            sphere(r=1);\n            translate([-10 * cos(angle), 10 * sin(angle), 15])\n            sphere(r=1);\n        }\n    }\n}\n\nbeetle();",
    "renders": true
  },
  {
    "animal": "binturong",
    "openscad_code": "// Binturong (Bearcat) 3D Printable Model\n// Medium complexity realistic style\n\n$fn = 32;\nbody_length = 60;\nbody_height = 35;\nleg_height = 15;\ntail_length = 50;\nhead_size = 20;\n\nmodule ear() {\n    difference() {\n        scale([1, 0.8, 1]) sphere(4);\n        translate([0, 0, -1]) scale([0.7, 0.7, 1]) sphere(3.5);\n    }\n}\n\nmodule leg(is_front = true) {\n    union() {\n        // Upper leg\n        translate([0, 0, leg_height/2]) \n            scale([1.2, 1.2, 1]) \n            cylinder(h=leg_height, r1=4, r2=3);\n        \n        // Lower leg\n        translate([0, 0, -leg_height/2]) \n            cylinder(h=leg_height*0.8, r1=3, r2=2.5);\n        \n        // Paw\n        translate([0, 0, -leg_height-2]) \n            sphere(3);\n    }\n}\n\nmodule tail() {\n    hull() {\n        translate([0, 0, 0]) sphere(6);\n        translate([0, -tail_length, 5]) sphere(4);\n        translate([0, -tail_length*1.2, 8]) sphere(3);\n    }\n}\n\nmodule whiskers() {\n    for(i = [-3:3]) {\n        rotate([0, 0, i*15]) \n            translate([8, 0, 0]) \n            cylinder(h=8, r=0.5);\n    }\n}\n\n// Main body\nunion() {\n    // Torso\n    translate([0, 0, body_height/2]) \n        scale([1.2, 1.5, 0.8]) \n        sphere(body_length/3);\n    \n    // Head\n    translate([0, body_length/3, body_height/2+5]) {\n        scale([1.1, 1.2, 1]) sphere(head_size/2);\n        \n        // Snout\n        translate([0, head_size/2, -2]) \n            scale([0.8, 0.6, 0.6]) sphere(6);\n        \n        // Ears\n        translate([-head_size/2, head_size/3, head_size/2]) ear();\n        translate([head_size/2, head_size/3, head_size/2]) mirror([1,0,0]) ear();\n        \n        // Eyes\n        translate([-head_size/3, head_size/2-2, head_size/4]) \n            color(\"black\") sphere(1.5);\n        translate([head_size/3, head_size/2-2, head_size/4]) \n            color(\"black\") sphere(1.5);\n        \n        // Nose\n        translate([0, head_size/2+3, -1]) \n            color(\"black\") sphere(2);\n        \n        // Whiskers\n        translate([0, head_size/2+2, 0]) whiskers();\n    }\n    \n    // Front legs\n    translate([-body_length/4, body_length/4, -body_height/4]) leg(true);\n    translate([body_length/4, body_length/4, -body_height/4]) leg(true);\n    \n    // Rear legs\n    translate([-body_length/4, -body_length/3, -body_height/4]) leg(false);\n    translate([body_length/4, -body_length/3, -body_height/4]) leg(false);\n    \n    // Tail\n    translate([0, -body_length/2, 0]) \n        rotate([0, 20, 0]) \n        tail();\n    \n    // Body fur texture (subtle)\n    for(i = [0:3]) {\n        rotate([0, 0, i*90]) \n            translate([0, 0, body_height/2]) \n            difference() {\n                sphere(body_length/3+0.5);\n                sphere(body_length/3);\n            }\n    }\n}",
    "renders": true
  },
  {
    "animal": "bison",
    "openscad_code": "// Bison model - medium complexity realistic style\n// Overall size ~70mm length\n\nmodule body() {\n    // Main body - elongated ellipsoid\n    scale([1.4, 1, 0.8]) sphere(d=35);\n    \n    // Hump\n    translate([5, 0, 8]) scale([0.6, 0.8, 0.9]) sphere(d=20);\n}\n\nmodule head() {\n    // Main head shape\n    translate([-20, 0, 5]) rotate([0, 0, -10]) {\n        // Skull\n        scale([1.2, 0.7, 0.6]) sphere(d=25);\n        \n        // Snout extension\n        translate([-8, 0, -2]) scale([0.8, 0.5, 0.4]) sphere(d=20);\n        \n        // Horns\n        for(side = [-1, 1]) {\n            translate([-5, side*6, 12]) rotate([0, side*20, 0]) \n                cylinder(h=15, d1=8, d2=4);\n            translate([-5, side*6, 12]) rotate([0, side*20, 0]) \n                scale([1, 1, 0.7]) sphere(d=8);\n        }\n        \n        // Beard\n        translate([-12, 0, -5]) scale([0.6, 1.2, 0.8]) sphere(d=10);\n    }\n}\n\nmodule legs() {\n    for(side = [-1, 1]) {\n        // Front legs\n        translate([-10, side*8, -15]) rotate([10, 0, 0])\n            cylinder(h=25, d=8);\n        \n        // Rear legs\n        translate([15, side*8, -15]) rotate([10, 0, 0])\n            cylinder(h=25, d=8);\n    }\n}\n\nmodule tail() {\n    translate([22, 0, 0]) rotate([0, 0, 30]) {\n        cylinder(h=15, d=4);\n        translate([0, 0, 15]) sphere(d=6);\n    }\n}\n\nmodule fur_detail() {\n    // Back ridge\n    for(i = [0:5]) {\n        translate([15-i*6, 0, 12]) sphere(d=3);\n    }\n    \n    // Side fur tufts\n    for(i = [0:3]) {\n        angle = i*30;\n        translate([10*cos(angle), 15*sin(angle), 0]) \n            sphere(d=4);\n    }\n}\n\n// Main assembly\nunion() {\n    body();\n    head();\n    legs();\n    tail();\n    fur_detail();\n}\n\n// Base for stability\ntranslate([0, 0, -17]) cube([45, 30, 2], center=true);",
    "renders": true
  },
  {
    "animal": "bittern",
    "openscad_code": "// Bittern bird - realistic style, medium complexity\n// Designed for 3D printing with proper wall thickness and minimal overhangs\n\n// Overall scale factor\nscale_factor = 0.8;\n\n// Helper module for rounded cylinders (beaks, legs)\nmodule rounded_cylinder(h, r1, r2, center=false) {\n    cylinder(h=h, r1=r1, r2=r2, center=center, $fn=20);\n}\n\n// Head with beak\nmodule head() {\n    union() {\n        // Main head sphere\n        translate([0, 0, 8]) \n            sphere(r=6, $fn=32);\n        \n        // Beak\n        translate([6, 0, 6])\n            rotate([0, -15, 0])\n            rounded_cylinder(h=12, r1=3, r2=1.5);\n        \n        // Eye\n        translate([5, 3.5, 9])\n            sphere(r=1.2, $fn=16);\n        \n        // Eye ring\n        translate([5, 3.5, 9])\n            sphere(r=1.5, $fn=16);\n    }\n}\n\n// Neck - slightly curved\nmodule neck() {\n    for(i = [0:3]) {\n        translate([0, 0, i*3])\n            rotate([0, i*3, 0])\n            scale([1 - i*0.05, 1 - i*0.05, 1])\n            sphere(r=4 - i*0.3, $fn=24);\n    }\n}\n\n// Body with tapering shape\nmodule body() {\n    difference() {\n        // Main body\n        union() {\n            // Upper body\n            translate([0, 0, -15])\n                scale([1.2, 0.8, 1.5])\n                sphere(r=12, $fn=32);\n            \n            // Lower body\n            translate([0, 0, -25])\n                scale([1.1, 1, 1.2])\n                sphere(r=10, $fn=32);\n        }\n        \n        // Neck hole\n        translate([0, 0, 5])\n            rotate([0, 20, 0])\n            cylinder(h=15, r=4, $fn=20);\n    }\n}\n\n// Wing module\nmodule wing() {\n    difference() {\n        // Main wing shape\n        translate([-5, 8, -15])\n            rotate([0, 10, 20])\n            scale([1.5, 0.3, 1])\n            sphere(r=12, $fn=24);\n        \n        // Wing tip rounding\n        translate([5, 12, -20])\n            sphere(r=8, $fn=16);\n    }\n}\n\n// Tail\nmodule tail() {\n    union() {\n        // Central tail feathers\n        translate([-15, 0, -25])\n            rotate([0, 0, 5])\n            scale([0.3, 1, 0.1])\n            cube([10, 8, 3]);\n        \n        // Side tail feathers\n        translate([-15, -4, -25])\n            rotate([0, 0, 10])\n            scale([0.3, 0.8, 0.1])\n            cube([8, 6, 2]);\n            \n        translate([-15, 4, -25])\n            rotate([0, 0, -10])\n            scale([0.3, 0.8, 0.1])\n            cube([8, 6, 2]);\n    }\n}\n\n// Leg module\nmodule leg(side) {\n    translate([0, side*5, -30]) {\n        // Upper leg\n        translate([0, 0, 5])\n            rotate([0, side*5, 0])\n            rounded_cylinder(h=12, r1=2, r2=1.5);\n        \n        // Lower leg\n        translate([0, side*2, -2])\n            rotate([0, side*10, 0])\n            rounded_cylinder(h=15, r1=1.5, r2=1);\n        \n        // Foot\n        translate([0, side*4, -10])\n            rotate([0, 0, side*5])\n            union() {\n                // Main foot\n                cube([8, 2, 1]);\n                \n                // Toes\n                for(i = [-1:1]) {\n                    translate([i*2.5, 0, -0.8])\n                        cube([1.5, 0.8, 1.5]);\n                }\n            }\n    }\n}\n\n// Main assembly\nscale(scale_factor) {\n    // Head assembly\n    translate([5, 0, 15]) {\n        rotate([0, -10, 0])\n        head();\n    }\n    \n    // Neck\n    translate([0, 0, 10])\n        neck();\n    \n    // Body\n    body();\n    \n    // Wings\n    wing();\n    mirror([0,1,0])\n        wing();\n    \n    // Tail\n    tail();\n    \n    // Legs\n    leg(1);\n    leg(-1);\n}",
    "renders": true
  },
  {
    "animal": "blowfish",
    "openscad_code": "// Medium-complexity realistic blowfish for 3D printing\n// Approx. 85 mm long, wall thickness 2 mm\n\nmodule spike(d = 4, h = 6) {\n    // tapered spike with 45° safe overhangs\n    cylinder(h1 = h * 0.5, d1 = d, d2 = d * 0.4, $fn = 8);\n    translate([0, 0, h * 0.5])\n        cylinder(h2 = h * 0.5, d1 = d * 0.4, d2 = 0.1, $fn = 8);\n}\n\nmodule spikes_ring(r, count = 12) {\n    for (i = [0 : count - 1]) {\n        angle = i * 360 / count;\n        translate([r * cos(angle), r * sin(angle), 0])\n            rotate([90, 0, angle])\n                spike();\n    }\n}\n\nmodule body_shell() {\n    difference() {\n        // main puffed body\n        sphere(d = 65, $fn = 60);\n        // hollow inside\n        sphere(d = 61, $fn = 60);\n    }\n}\n\nmodule tail_fin() {\n    difference() {\n        // tail base\n        translate([-30, 0, 0])\n            rotate([0, 90, 0])\n                scale([0.8, 1.2, 1])\n                    cylinder(h = 20, d = 30, $fn = 30);\n        // carve fins\n        translate([-35, 0, 0])\n            rotate([0, 90, 0])\n                for (a = [-60 : 30 : 60])\n                    rotate([0, a, 0])\n                        cube([40, 2, 20], center = true);\n    }\n}\n\nmodule eye() {\n    difference() {\n        // outer eye bulb\n        sphere(d = 10, $fn = 20);\n        // pupil\n        color(\"black\")\n            translate([0, 0, 4])\n                sphere(d = 5, $fn = 15);\n    }\n}\n\nmodule mouth() {\n    // puckered lips\n    difference() {\n        translate([31, 0, -5])\n            rotate([90, 0, 0])\n                cylinder(h = 8, d1 = 12, d2 = 8, $fn = 20);\n        // mouth hole\n        translate([35, 0, -5])\n            rotate([90, 0, 0])\n                cylinder(h = 10, d = 6, $fn = 15);\n    }\n}\n\n// ---------- assembly ----------\nunion() {\n    body_shell();\n\n    // dorsal spikes\n    for (z = [15 : 10 : 25])\n        translate([0, 0, z])\n            spikes_ring(25 + z * 0.5, count = 12);\n\n    // lateral spikes\n    for (a = [0 : 30 : 330])\n        rotate([0, 0, a])\n            translate([30, 0, 5])\n                spikes_ring(15, count = 6);\n\n    // tail\n    translate([-32, 0, 0])\n        tail_fin();\n\n    // eyes\n    translate([25, 15, 10])\n        eye();\n    translate([25, -15, 10])\n        mirror([0, 1, 0])\n            eye();\n\n    // mouth\n    mouth();\n}",
    "renders": true
  },
  {
    "animal": "boa",
    "openscad_code": "// Realistic Boa Constructoridae - Medium Complexity\n// A 3D printable constrictor snake model\n\n// Parameters\n$fn = 32;\nbody_length = 80;\nhead_length = 12;\ntail_taper = 0.3;\nbody_thickness = 6;\nscale_size = 0.8;\n\n// Snake body module - creates tapered cylinder segments\nmodule snake_body_segment(length, start_diam, end_diam) {\n    hull() {\n        translate([0, 0, -length/2]) \n            sphere(d=start_diam);\n        translate([0, 0, length/2]) \n            sphere(d=end_diam);\n    }\n}\n\n// Snake scales pattern\nmodule scales(diameter, length) {\n    scale_count = ceil(length / (diameter * 0.6));\n    \n    for(i = [0:scale_count-1]) {\n        z_pos = -length/2 + i * (length/scale_count);\n        rotate([0, 0, i * 15]) \n            translate([0, diameter/2 - 0.3, z_pos])\n                scale([0.3, 0.2, 0.1]) \n                    sphere(d=diameter);\n    }\n}\n\n// Snake head with realistic features\nmodule snake_head() {\n    // Main head shape\n    difference() {\n        union() {\n            // Head body\n            scale([1.2, 0.8, 1]) \n                sphere(d=head_length);\n            \n            // Snout extension\n            translate([head_length/2, 0, 0]) \n                scale([1, 0.8, 0.6]) \n                    sphere(d=head_length * 0.8);\n        }\n        \n        // Eye sockets\n        translate([head_length/3, head_length/3, head_length/4]) \n            sphere(d=head_length/3);\n        translate([head_length/3, -head_length/3, head_length/4]) \n            sphere(d=head_length/3);\n        \n        // Nostrils\n        translate([head_length * 0.7, head_length/4, 0]) \n            rotate([45, 0, 0]) \n                cylinder(h=head_length/4, d1=head_length/6, d2=0);\n        translate([head_length * 0.7, -head_length/4, 0]) \n            rotate([45, 0, 0]) \n                cylinder(h=head_length/4, d1=head_length/6, d2=0);\n    }\n    \n    // Eyes\n    translate([head_length/3, head_length/3, head_length/4]) \n        color(\"black\") \n            sphere(d=head_length/4);\n    translate([head_length/3, -head_length/3, head_length/4]) \n        color(\"black\") \n            sphere(d=head_length/4);\n}\n\n// Main body construction\nmodule snake_body() {\n    segments = 20;\n    segment_length = body_length / segments;\n    \n    // Create tapered body segments\n    for(i = [0:segments-1]) {\n        t = i / (segments - 1);\n        \n        // Calculate diameters along body\n        if(t < 0.1) {\n            // Head transition\n            diam1 = head_length * 0.8;\n            diam2 = body_thickness;\n        } else if(t > 0.85) {\n            // Tail taper\n            diam1 = body_thickness * (1 - (t - 0.85) * 4);\n            diam2 = body_thickness * (1 - (t - 0.85) * 4 - 0.1);\n        } else {\n            // Main body\n            diam1 = body_thickness;\n            diam2 = body_thickness;\n        }\n        \n        // Position segment along S-curve\n        x_pos = sin(t * 3.14 * 2) * 15;\n        y_pos = cos(t * 3.14 * 2) * 8;\n        z_pos = -body_length/2 + i * segment_length;\n        \n        translate([x_pos, y_pos, z_pos]) {\n            rotate([0, 90, 0]) {\n                snake_body_segment(segment_length, diam1, diam2);\n                \n                // Add scales\n                scales(diam1, segment_length);\n            }\n        }\n    }\n}\n\n// Assembly\nscale([scale_size, scale_size, scale_size]) {\n    // Position head\n    translate([0, 0, body_length/2 + head_length/2]) {\n        rotate([0, 90, 0]) {\n            snake_head();\n        }\n    }\n    \n    // Main body\n    snake_body();\n    \n    // Forked tongue\n    translate([body_length/2 + head_length - 1, 0, 0]) {\n        rotate([0, 90, 0]) {\n            // Split tongue\n            translate([0, 0.5, 0]) \n                scale([0.1, 0.05, 1]) \n                    cube([1, 1, 2]);\n            translate([0, -0.5, 0]) \n                scale([0.1, 0.05, 1]) \n                    cube([1, 1, 2]);\n        }\n    }\n}",
    "renders": true
  },
  {
    "animal": "bobcat",
    "openscad_code": "// Bobcat - Realistic Medium Complexity\n// 3D printable bobcat model using basic OpenSCAD primitives\n\n// Overall dimensions: ~80mm long x ~40mm wide x ~50mm tall\n$fn = 32;\n\nmodule bobcat() {\n    // Body core\n    union() {\n        // Main torso\n        translate([0, 0, 15])\n            scale([1.2, 0.8, 1])\n            sphere(d=35);\n            \n        // Lower torso extension\n        translate([0, 0, 8])\n            scale([1.3, 0.7, 0.6])\n            cube([40, 25, 15], center=true);\n            \n        // Head\n        translate([-20, 0, 35])\n            scale([0.9, 0.8, 0.9])\n            sphere(d=25);\n            \n        // Snout\n        translate([-32, 0, 32])\n            scale([0.8, 0.6, 0.5])\n            sphere(d=15);\n            \n        // Tail\n        translate([25, 0, 25])\n            rotate([0, -20, 0])\n            cylinder(h=35, d1=12, d2=6);\n            \n        // Legs\n        for(x = [-15, 15]) {\n            for(y = [-12, 12]) {\n                translate([x, y, 0])\n                    cylinder(h=18, d=8);\n                // Paws\n                translate([x, y, -2])\n                    sphere(d=10);\n            }\n        }\n        \n        // Ears\n        for(y = [-8, 8]) {\n            translate([-20, y, 45])\n                rotate([0, 10, 0])\n                scale([0.3, 0.4, 0.8])\n                cylinder(h=12, d1=8, d2=4);\n        }\n        \n        // Cheek tufts\n        translate([-30, 8, 30])\n            scale([0.5, 0.3, 0.3])\n            sphere(d=8);\n        translate([-30, -8, 30])\n            scale([0.5, 0.3, 0.3])\n            sphere(d=8);\n            \n        // Eyes\n        for(y = [-5, 5]) {\n            translate([-28, y, 35])\n                scale([0.5, 0.8, 0.2])\n                sphere(d=6);\n        }\n        \n        // Nose\n        translate([-36, 0, 32])\n            scale([0.2, 0.4, 0.3])\n            sphere(d=5);\n            \n        // Mouth detail\n        translate([-34, 0, 28])\n            cube([2, 4, 1]);\n            \n        // Stripes on tail\n        for(i = [0:2]) {\n            translate([25 + i*8, 0, 25])\n                rotate([0, -20, 0])\n                difference() {\n                    cylinder(h=2, d=10 - i*2);\n                    translate([0, 0, -1])\n                        cylinder(h=4, d=8 - i*2);\n                }\n        }\n        \n        // Belly fur detail\n        translate([0, 0, 10])\n            difference() {\n                scale([1.1, 0.7, 0.5])\n                sphere(d=30);\n                scale([1.05, 0.65, 0.45])\n                sphere(d=30);\n            }\n    }\n}\n\n// Generate the bobcat\nbobcat();",
    "renders": true
  },
  {
    "animal": "bobolink",
    "openscad_code": "// Bobolink - Medium Complexity Realistic Style\n// Approx 70mm length, 3D printable\n\n$fn=50;\n\n// Main body\nmodule body() {\n    union() {\n        // Main torso\n        translate([0,0,15]) \n            scale([1.2,0.8,1])\n            sphere(12);\n        \n        // Lower body\n        translate([0,0,8])\n            scale([1.3,0.9,0.7])\n            sphere(10);\n            \n        // Tail base\n        translate([-18,0,12])\n            rotate([0,10,0])\n            scale([2,0.4,0.3])\n            cylinder(h=15, r1=6, r2=3);\n    }\n}\n\n// Head with beak\nmodule head() {\n    translate([12,0,22]) {\n        union() {\n            // Head\n            scale([0.9,0.8,0.9])\n            sphere(8);\n            \n            // Beak\n            translate([6,0,0])\n                rotate([0,-20,0])\n                scale([1.5,0.3,0.3])\n                cylinder(h=8, r1=3, r2=0.5);\n                \n            // Eye\n            translate([4,4,2])\n                sphere(1.5);\n            translate([4,-4,2])\n                sphere(1.5);\n                \n            // Crest\n            translate([0,0,6])\n                scale([0.3,0.2,1])\n                cylinder(h=5, r=3);\n        }\n    }\n}\n\n// Wing\nmodule wing(side=1) {\n    translate([0,side*8,18]) {\n        rotate([0,0,side*-10]) {\n            difference() {\n                // Main wing\n                scale([1.2,0.4,0.1])\n                sphere(15);\n                \n                // Wing curve\n                translate([5,side*-8,0])\n                    rotate([0,0,20])\n                    scale([0.8,0.3,0.2])\n                    cube([20,15,5]);\n            }\n        }\n    }\n}\n\n// Leg and foot\nmodule leg(side=1) {\n    translate([2,side*5,5]) {\n        union() {\n            // Upper leg\n            rotate([80,0,0])\n                cylinder(h=8, r=1.5);\n                \n            // Lower leg\n            translate([0,0,-8])\n                rotate([10,0,0])\n                cylinder(h=8, r=1.2);\n                \n            // Foot with toes\n            translate([0,0,-15.5]) {\n                // Main foot\n                cylinder(h=1, r=2);\n                \n                // Toes\n                for(i=[-1,0,1]) {\n                    translate([i*1.5,0,0])\n                        rotate([0,i*15,0])\n                        scale([2,0.3,0.3])\n                        cylinder(h=3, r=0.8);\n                }\n            }\n        }\n    }\n}\n\n// Feather pattern on back\nmodule back_pattern() {\n    translate([-5,0,20]) {\n        for(i=[0:20:140]) {\n            rotate([0,i,0])\n            translate([5*sin(i),0,0])\n                scale([0.2,0.1,1])\n                cylinder(h=8, r=3);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    wing(1);    // Right wing\n    wing(-1);   // Left wing\n    leg(1);     // Right leg\n    leg(-1);    // Left leg\n    back_pattern();\n}",
    "renders": true
  },
  {
    "animal": "bonobo",
    "openscad_code": "$fa=2; $fs=0.5;\n\n// overall scale\nscale(0.35)\ndifference(){\n    union(){\n\n        // --- HEAD ---\n        translate([0,0,43])\n        rotate([0,15,0])\n        union(){\n            // skull\n            sphere(8);\n            // muzzle\n            translate([0,-5,0])\n            scale([1,1.2,0.8])\n            sphere(6);\n            // brow ridge\n            translate([0,4,2])\n            cube([12,3,4], center=true);\n            // ears\n            for(side=[-1,1])\n            translate([side*7,2,0])\n            rotate([0,0,side*20])\n            scale([0.3,1,1])\n            cylinder(h=4, r1=3,r2=2);\n        }\n\n        // --- NECK ---\n        translate([0,0,35])\n        rotate([0,0,0])\n        cylinder(h=6, r1=4, r2=5, center=true);\n\n        // --- TORSO ---\n        translate([0,0,23])\n        scale([1.4,1,1.6])\n        sphere(11);\n\n        // --- ARMS ---\n        module arm(side){\n            translate([side*10,0,25])\n            rotate([0,0,side*20])\n            union(){\n                // upper arm\n                rotate([-80,0,0])\n                cylinder(h=12, r1=2.2, r2=1.8);\n                // lower arm\n                translate([0,0,-12])\n                rotate([90,0,0])\n                cylinder(h=12, r1=1.8, r2=1.4);\n                // hand\n                translate([0,0,-24])\n                sphere(2.5);\n            }\n        }\n        arm(1);\n        arm(-1);\n\n        // --- LEGS ---\n        module leg(side){\n            translate([side*5,0,10])\n            rotate([15,0,0])\n            union(){\n                // thigh\n                cylinder(h=14, r1=3, r2=2.4);\n                // shin\n                translate([0,0,-14])\n                cylinder(h=14, r1=2.4, r2=1.8);\n                // foot\n                translate([0,0,-28])\n                scale([2,3,1])\n                sphere(2.5);\n            }\n        }\n        leg(1);\n        leg(-1);\n\n    }\n\n    // --- REMOVE INTERNAL VOID FOR PRINTABILITY ---\n    // hollow torso\n    translate([0,0,23])\n    scale([1.25,0.85,1.45])\n    sphere(9);\n\n    // hollow head\n    translate([0,0,43])\n    sphere(6);\n\n    // keep limbs solid for strength\n}",
    "renders": true
  },
  {
    "animal": "booby",
    "openscad_code": "// Booby Bird - Realistic Style, Medium Complexity\n\n$fn = 32;  // Smooth curves\n\n// Main dimensions\nbody_length = 45;\nbody_width = 25;\nbody_height = 30;\n\n// Body module - elongated oval shape\nmodule body() {\n    difference() {\n        // Main body\n        scale([1, 0.8, 0.6])\n        sphere(d=body_width);\n        \n        // Neck opening\n        translate([0, body_width/2 - 5, body_height/4])\n        rotate([90, 0, 0])\n        cylinder(h=body_width, d1=12, d2=8, center=true);\n        \n        // Tail opening\n        translate([-body_length/2 + 5, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h=15, d1=10, d2=8, center=true);\n    }\n}\n\n// Head module\nmodule head() {\n    translate([0, body_width/2 - 3, body_height/3 + 5])\n    union() {\n        // Main head shape\n        scale([0.9, 1, 1.1])\n        sphere(d=15);\n        \n        // Beak\n        translate([0, 8, -2])\n        rotate([30, 0, 0])\n        scale([0.3, 0.4, 1])\n        cylinder(h=10, d1=8, d2=0);\n        \n        // Eyes\n        for(x = [-4, 4]) {\n            translate([x, 5, 2])\n            color(\"black\")\n            sphere(d=3);\n        }\n    }\n}\n\n// Wing module\nmodule wing(is_left = true) {\n    side = is_left ? 1 : -1;\n    translate([side * body_width/4, 0, body_height/3])\n    rotate([0, 0, is_left ? 30 : -30])\n    scale([0.8, 2, 0.2])\n    sphere(d=body_width);\n}\n\n// Tail module\nmodule tail() {\n    translate([-body_length/2 + 3, 0, 0])\n    rotate([0, -20, 0])\n    scale([0.5, 2, 0.3])\n    sphere(d=15);\n}\n\n// Feet module\nmodule feet() {\n    for(side = [-1, 1]) {\n        translate([side * 5, body_width/4, -body_height/2 + 3])\n        union() {\n            // Leg\n            cylinder(h=8, d=3);\n            \n            // Webbed foot\n            translate([0, 0, -4])\n            rotate([0, 0, 45])\n            scale([2, 0.3, 0.2])\n            sphere(d=8);\n            \n            // Toes\n            for(angle = [-30, 0, 30]) {\n                translate([0, 0, -6])\n                rotate([0, 0, angle])\n                translate([6, 0, 0])\n                scale([0.5, 0.3, 0.3])\n                sphere(d=6);\n            }\n        }\n    }\n}\n\n// Assembly\ncolor(\"LightBlue\")\nunion() {\n    // Main body\n    body();\n    \n    // Head and neck connection\n    translate([0, body_width/2 - 5, body_height/4])\n    rotate([90, 0, 0])\n    cylinder(h=10, d1=8, d2=12);\n    \n    head();\n    \n    // Wings\n    wing(true);\n    wing(false);\n    \n    // Tail\n    tail();\n    \n    // Feet\n    feet();\n}",
    "renders": true
  },
  {
    "animal": "bowerbird",
    "openscad_code": "// Bowerbird - Medium complexity realistic style\n// Designed for 3D printing, no supports needed\n\n// Overall dimensions: ~70mm length\n\nmodule bowerbird() {\n    // Body parameters\n    body_length = 40;\n    body_width = 25;\n    body_height = 30;\n    \n    // Head parameters\n    head_radius = 12;\n    \n    // Beak parameters\n    beak_length = 15;\n    beak_width = 3;\n    beak_height = 5;\n    \n    // Tail parameters\n    tail_length = 25;\n    tail_width = 20;\n    tail_height = 10;\n    \n    // Leg parameters\n    leg_length = 18;\n    leg_width = 3;\n    foot_length = 8;\n    foot_width = 6;\n    \n    // Wing parameters\n    wing_length = 30;\n    wing_width = 15;\n    wing_thickness = 2;\n    \n    // Main body - elongated sphere\n    translate([0, 0, body_height/2])\n    scale([1.5, 1, 1])\n    sphere(body_width/2);\n    \n    // Head\n    translate([-body_length/2 - head_radius/2, 0, body_height/2 + head_radius/2])\n    sphere(head_radius);\n    \n    // Beak\n    translate([-body_length/2 - head_radius - beak_length/2, 0, body_height/2 + head_radius/2])\n    rotate([0, 0, 0])\n    scale([beak_length/beak_width, 1, beak_height/beak_width])\n    cylinder(h=beak_width, r1=beak_width/2, r2=0);\n    \n    // Tail - fan shape\n    for(i = [-30:10:30]) {\n        rotate([0, i, 0])\n        translate([-body_length/2 - tail_length/2, 0, body_height/2])\n        scale([1, 1 - abs(i)/45, 1])\n        cube([tail_length, tail_width/5, tail_height]);\n    }\n    \n    // Left wing\n    translate([body_length/4, body_width/2 + wing_width/2, body_height/2])\n    rotate([0, 0, 30])\n    scale([1, 0.8, 0.3])\n    cube([wing_length, wing_width, wing_thickness]);\n    \n    // Right wing\n    mirror([0, 1, 0])\n    translate([body_length/4, body_width/2 + wing_width/2, body_height/2])\n    rotate([0, 0, 30])\n    scale([1, 0.8, 0.3])\n    cube([wing_length, wing_width, wing_thickness]);\n    \n    // Legs and feet\n    module leg(position) {\n        translate(position)\n        union() {\n            // Upper leg\n            translate([0, 0, leg_length/2])\n            rotate([0, 20, 0])\n            scale([1, 0.8, 2])\n            sphere(leg_width/2);\n            \n            // Lower leg\n            translate([0, 0, leg_length/4])\n            cylinder(h=leg_length, r1=leg_width/2, r2=leg_width/3);\n            \n            // Foot\n            translate([foot_length/2, 0, 0])\n            scale([foot_length/leg_width, foot_width/leg_width, 1])\n            sphere(leg_width/2);\n        }\n    }\n    \n    // Left leg\n    leg([body_length/4, body_width/4, 0]);\n    \n    // Right leg\n    leg([body_length/4, -body_width/4, 0]);\n    \n    // Eye details\n    module eye(x, y, z) {\n        translate([x, y, z])\n        difference() {\n            sphere(2.5);\n            translate([0, 0, 1.5])\n            sphere(1.5);\n        }\n    }\n    \n    eye(-body_length/2 - head_radius - 1, -head_radius/3, body_height/2 + head_radius/2);\n    eye(-body_length/2 - head_radius - 1, head_radius/3, body_height/2 + head_radius/2);\n}\n\n// Display the bird standing upright\nbowerbird();",
    "renders": true
  },
  {
    "animal": "buffalo",
    "openscad_code": "// Buffalo - Realistic Medium Complexity\n// Dimensions: ~80mm long, ~40mm wide, ~45mm tall\n\nmodule body() {\n    // Main torso - elongated ellipsoid\n    translate([-20, 0, 15]) scale([1.6, 1, 0.8]) sphere(20, $fn=32);\n    \n    // Chest bulge\n    translate([-35, 0, 12]) scale([0.8, 1, 0.6]) sphere(15, $fn=24);\n    \n    // Rump\n    translate([15, 0, 15]) scale([1.2, 1.2, 1]) sphere(18, $fn=24);\n}\n\nmodule legs() {\n    // Front legs\n    for(x = [-25, -15]) {\n        translate([x, 12, 0]) {\n            rotate([0, 10, 0]) cylinder(h=25, r=5, $fn=16);\n            translate([0, 0, 25]) sphere(5.5);\n        }\n        translate([x, -12, 0]) {\n            rotate([0, 10, 0]) cylinder(h=25, r=5, $fn=16);\n            translate([0, 0, 25]) sphere(5.5);\n        }\n    }\n    \n    // Rear legs\n    for(x = [15, 25]) {\n        translate([x, 10, 0]) {\n            rotate([0, -10, 0]) cylinder(h=25, r=5, $fn=16);\n            translate([0, 0, 25]) sphere(5.5);\n        }\n        translate([x, -10, 0]) {\n            rotate([0, -10, 0]) cylinder(h=25, r=5, $fn=16);\n            translate([0, 0, 25]) sphere(5.5);\n        }\n    }\n}\n\nmodule head() {\n    // Main head block\n    translate([-45, 0, 35]) rotate([0, -20, 0]) union() {\n        // Skull\n        scale([1.3, 0.8, 0.7]) sphere(15, $fn=24);\n        \n        // Muzzle\n        translate([-15, 0, -5]) scale([1.2, 0.7, 0.5]) sphere(12, $fn=20);\n        \n        // Forehead hump\n        translate([-5, 0, 8]) sphere(8, $fn=20);\n    }\n}\n\nmodule horns() {\n    // Left horn\n    translate([-35, 10, 45]) rotate([0, 0, -30]) {\n        cylinder(h=15, r1=4, r2=2, $fn=12);\n        translate([0, 0, 15]) rotate([20, 0, 0]) scale([0.8, 0.8, 1]) cylinder(h=12, r1=2, r2=3, $fn=12);\n    }\n    \n    // Right horn\n    translate([-35, -10, 45]) rotate([0, 0, 30]) {\n        cylinder(h=15, r1=4, r2=2, $fn=12);\n        translate([0, 0, 15]) rotate([20, 0, 0]) scale([0.8, 0.8, 1]) cylinder(h=12, r1=2, r2=3, $fn=12);\n    }\n}\n\nmodule tail() {\n    translate([30, 0, 25]) rotate([0, 30, 0]) {\n        // Tail base\n        cylinder(h=10, r=4, $fn=12);\n        \n        // Tail tuft\n        translate([0, 0, 10]) sphere(6, $fn=16);\n    }\n}\n\nmodule ears() {\n    // Left ear\n    translate([-40, 12, 45]) rotate([0, -30, -20]) \n        scale([0.3, 1, 0.8]) sphere(8, $fn=16);\n    \n    // Right ear\n    translate([-40, -12, 45]) rotate([0, -30, 20]) \n        scale([0.3, 1, 0.8]) sphere(8, $fn=16);\n}\n\n// Assembly\nunion() {\n    body();\n    legs();\n    head();\n    horns();\n    tail();\n    ears();\n}",
    "renders": true
  },
  {
    "animal": "bug",
    "openscad_code": "// Realistic Bug - Medium Complexity\n// Dimensions: ~60mm long, ~40mm wide, ~25mm high\n\n// Body segments\nmodule thorax() {\n    // Main thorax segment\n    difference() {\n        scale([1.2, 0.8, 0.6]) sphere(d=20);\n        // Neck cavity\n        translate([10, 0, 0]) rotate([0, 90, 0]) \n            cylinder(h=15, d=8, $fn=20);\n        // Abdomen cavity\n        translate([-10, 0, 0]) rotate([0, 90, 0]) \n            cylinder(h=15, d=10, $fn=20);\n    }\n}\n\nmodule abdomen() {\n    // Abdomen segment with segments\n    union() {\n        // Main abdomen\n        translate([-25, 0, -2]) scale([1.5, 1, 0.8]) sphere(d=18);\n        \n        // Segmented rings\n        for(i = [1:4]) {\n            translate([-28 + i*5, 0, 0]) \n                rotate([90, 0, 0]) \n                cylinder(h=2, d1=18-i*2, d2=16-i*2, $fn=32);\n        }\n    }\n}\n\nmodule head() {\n    // Head with compound eyes\n    union() {\n        // Main head\n        translate([15, 0, 2]) scale([1, 0.9, 0.7]) sphere(d=16);\n        \n        // Compound eyes\n        for(side = [-1, 1]) {\n            translate([18, side*6, 4]) \n                sphere(d=8);\n            // Eye facets\n            for(phi = [0:30:150]) {\n                for(theta = [0:30:150]) {\n                    translate([18 + cos(phi)*3, side*6 + sin(phi)*3, 4 + sin(theta)*2]) \n                        sphere(d=1);\n                }\n            }\n        }\n        \n        // Mandibles\n        for(side = [-1, 1]) {\n            translate([20, side*4, -2]) \n                rotate([0, 0, side*20]) \n                cylinder(h=8, d1=3, d2=1, $fn=8);\n        }\n    }\n}\n\n// Leg segments\nmodule leg_segment(length, thickness) {\n    cylinder(h=length, d=thickness, $fn=8);\n}\n\nmodule leg(side, segment, angle) {\n    // Position legs around body\n    rotate([0, 0, angle]) {\n        translate([0, side*12, -5]) {\n            // Coxa\n            rotate([90, 0, 0]) \n                leg_segment(8, 4);\n            \n            // Femur\n            translate([0, 0, 8]) \n                rotate([30*side, 0, 0]) \n                leg_segment(12, 3);\n            \n            // Tibia\n            translate([0, -10*side, 12]) \n                rotate([60*side, 0, 0]) \n                leg_segment(10, 2);\n            \n            // Tarsus\n            translate([0, -18*side, 18]) \n                rotate([90*side, 0, 0]) \n                leg_segment(8, 1.5);\n        }\n    }\n}\n\n// Wings (elytra)\nmodule wing(side) {\n    translate([0, side*8, 5]) {\n        rotate([0, 30, 0]) {\n            // Main wing\n            translate([-5, 0, 0]) \n                scale([1.2, 0.3, 0.05]) \n                sphere(d=25);\n            \n            // Wing veins\n            for(i = [0:3]) {\n                translate([-5 + i*8, 0, 0]) \n                    rotate([0, 90, 0]) \n                    cylinder(h=25, d=0.5, $fn=4);\n            }\n        }\n    }\n}\n\n// Antennae\nmodule antenna(side) {\n    translate([22, side*4, 8]) {\n        rotate([0, 30*side, 0]) {\n            // Main antenna\n            cylinder(h=15, d=1, $fn=8);\n            \n            // Antennal segments\n            for(i = [1:3]) {\n                translate([0, 0, i*5]) \n                    sphere(d=1.5);\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Body parts\n    thorax();\n    abdomen();\n    head();\n    \n    // 6 legs - 3 per side\n    for(side = [-1, 1]) {\n        for(i = [0:2]) {\n            leg(side, i, -30 + i*30);\n        }\n    }\n    \n    // Wings\n    wing(1);\n    wing(-1);\n    \n    // Antennae\n    antenna(1);\n    antenna(-1);\n}",
    "renders": true
  },
  {
    "animal": "bunting",
    "openscad_code": "// Realistic Bunting - Medium Complexity\n// 3D printable bunting with realistic fabric folds and string\n\n// Parameters\nflag_width = 30;\nflag_height = 25;\nflag_thickness = 2;\nstring_diameter = 2;\nstring_length = 90;\nnum_flags = 5;\nfold_depth = 3;\n\n// Overall scale\nscale_factor = 1.5;\n\n// Flag module with realistic folds\nmodule flag_with_folds() {\n    // Base flag triangle\n    difference() {\n        union() {\n            // Main flag body\n            linear_extrude(height=flag_thickness)\n                polygon(points=[[0,0], [flag_width,0], [flag_width/2,flag_height]]);\n            \n            // Top fold detail\n            translate([flag_width/2, flag_height*0.7, flag_thickness])\n                rotate([90,0,0])\n                    cylinder(h=fold_depth, r1=flag_width/4, r2=flag_width/5, $fn=20);\n            \n            // Side fold\n            translate([flag_width*0.8, flag_height*0.4, 0])\n                rotate([0,0,-30])\n                    cube([flag_width/3, flag_height/4, flag_thickness*2]);\n        }\n        \n        // Hanging loop hole\n        translate([flag_width/2, 0, -1])\n            cylinder(h=flag_thickness+2, r=string_diameter/2+1, $fn=20);\n    }\n}\n\n// String module\nmodule string() {\n    // Main string\n    translate([0, -string_diameter/2, 0])\n        rotate([0,90,0])\n            cylinder(h=string_length, r=string_diameter/2, $fn=20);\n    \n    // Add subtle curve to string\n    for(i=[0:5]) {\n        translate([i*string_length/6, -sin(i*30)*2-string_diameter/2, 0])\n            rotate([0,90,0])\n                cylinder(h=string_length/10, r=string_diameter/2, $fn=20);\n    }\n}\n\n// Main assembly\nscale([scale_factor, scale_factor, scale_factor]) {\n    // Create string first\n    string();\n    \n    // Add flags along string with realistic spacing and slight rotation\n    for(i=[0:num_flags-1]) {\n        translate([(i+0.5)*string_length/num_flags, -string_diameter, 0])\n            rotate([0,0,i*5-10])  // Slight flutter effect\n                flag_with_folds();\n    }\n    \n    // Add connecting knots between flags\n    for(i=[0:num_flags-1]) {\n        translate([(i+0.5)*string_length/num_flags, -string_diameter/2, 0])\n            sphere(r=string_diameter*0.8, $fn=20);\n    }\n    \n    // End details\n    translate([0, -string_diameter/2, 0])\n        sphere(r=string_diameter, $fn=20);\n    translate([string_length, -string_diameter/2, 0])\n        sphere(r=string_diameter, $fn=20);\n}",
    "renders": true
  },
  {
    "animal": "bushbaby",
    "openscad_code": "// Bushbaby (Galago) - Medium complexity realistic style\n// Designed for 3D printing - no overhangs, 60mm height\n\n// Main parameters\nbody_length = 30;\nbody_height = 25;\nhead_size = 15;\near_size = 8;\ntail_length = 40;\nlimb_length = 22;\n\n// Body module\nmodule body() {\n    // Main torso\n    translate([0, 0, body_height/2])\n    scale([1.2, 0.8, 1])\n    sphere(d=body_length, $fn=32);\n    \n    // Chest bulge\n    translate([body_length/3, 0, body_height/2-5])\n    scale([0.8, 0.6, 0.7])\n    sphere(d=body_length*0.6, $fn=24);\n}\n\n// Head module\nmodule head() {\n    translate([-body_length/2 - head_size/2, 0, body_height + head_size/2 - 5])\n    union() {\n        // Main head sphere\n        sphere(d=head_size, $fn=32);\n        \n        // Muzzle\n        translate([-head_size/2, 0, -head_size/4])\n        scale([1.2, 0.7, 0.6])\n        sphere(d=head_size*0.7, $fn=24);\n        \n        // Eyes\n        for(x = [-head_size/3, head_size/3]) {\n            translate([x, head_size/2 - 2, head_size/4])\n            sphere(d=3, $fn=16);\n            \n            // Eye shine\n            translate([x+0.5, head_size/2 - 1.5, head_size/4+1])\n            sphere(d=1, $fn=8);\n        }\n        \n        // Nose\n        translate([-head_size/2 - 2, 0, 0])\n        sphere(d=2, $fn=8);\n    }\n}\n\n// Ear module\nmodule ear(side) {\n    translate([-body_length/2 - head_size/2, side*(head_size/2 + 2), body_height + head_size/2 + 5])\n    rotate([0, 15*side, 0])\n    union() {\n        // Outer ear\n        scale([0.3, 1, 1.5])\n        sphere(d=ear_size, $fn=16);\n        \n        // Inner ear detail\n        translate([0, side*0.5, -1])\n        scale([0.2, 0.8, 1.2])\n        sphere(d=ear_size*0.7, $fn=16);\n    }\n}\n\n// Limb module\nmodule limb(position, angle) {\n    translate([position[0], position[1], position[2]])\n    rotate([0, angle, 0])\n    union() {\n        // Upper arm/leg\n        translate([0, 0, -limb_length/4])\n        cylinder(h=limb_length/2, d1=4, d2=3, $fn=12);\n        \n        // Lower arm/leg\n        translate([0, 0, -limb_length*3/4])\n        cylinder(h=limb_length/2, d1=3, d2=2, $fn=12);\n        \n        // Hand/foot\n        translate([0, 0, -limb_length+1])\n        scale([1.5, 0.8, 0.3])\n        sphere(d=4, $fn=12);\n        \n        // Fingers/toes (simplified as small spheres)\n        for(i = [-1, 0, 1]) {\n            translate([i*1.5, 0, -limb_length-0.5])\n            sphere(d=1.5, $fn=8);\n        }\n    }\n}\n\n// Tail module\nmodule tail() {\n    // Use hull to create curved tail\n    hull() {\n        translate([body_length/2, 0, body_height/2])\n        sphere(d=4, $fn=12);\n        \n        for(i = [1:5]) {\n            translate([body_length/2 + i*tail_length/5, \n                      sin(i*45)*5, \n                      body_height/2 - i*3])\n            sphere(d=max(4 - i*0.5, 1), $fn=12);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Core body parts\n    body();\n    head();\n    ear(1);\n    ear(-1);\n    tail();\n    \n    // Limbs\n    // Front limbs\n    limb([body_length/3, body_height/2 - 5, body_height/2 - 5], 30);\n    limb([body_length/3, -body_height/2 + 5, body_height/2 - 5], 30);\n    \n    // Back limbs\n    limb([-body_length/4, body_height/2 - 3, body_height/2 - 10], -30);\n    limb([-body_length/4, -body_height/2 + 3, body_height/2 - 10], -30);\n}\n\n// Base for stability\ntranslate([0, 0, -2])\ndifference() {\n    cube([body_length + 10, body_height + 5, 2], center=true);\n    translate([0, 0, -1])\n    cube([body_length + 12, body_height + 7, 4], center=true);\n}",
    "renders": true
  },
  {
    "animal": "bushbuck",
    "openscad_code": "// Bushbuck - Medium complexity realistic style\n// Approx 80mm long, 40mm tall\n\n// Main body\nmodule body() {\n    union() {\n        // Torso\n        translate([0, 0, 15]) \n            scale([1.2, 0.6, 0.8]) \n            sphere(d=30, $fn=20);\n        \n        // Belly\n        translate([0, 0, 8]) \n            scale([0.9, 0.5, 0.6]) \n            sphere(d=25, $fn=16);\n    }\n}\n\n// Head with neck\nmodule head_neck() {\n    translate([-25, 0, 28]) {\n        // Neck\n        rotate([0, 10, 0]) \n            cylinder(h=15, d1=8, d2=6, $fn=12);\n        \n        // Head\n        translate([-8, 0, 2]) \n            scale([1.2, 0.7, 0.8]) \n            sphere(d=12, $fn=16);\n        \n        // Muzzle\n        translate([-15, 0, -2]) \n            scale([0.8, 0.5, 0.4]) \n            sphere(d=8, $fn=12);\n        \n        // Ears\n        for(side = [-1, 1]) {\n            translate([-6, side*4, 4]) \n                rotate([0, side*10, 0]) \n                cylinder(h=6, d1=3, d2=2, $fn=8);\n        }\n        \n        // Horns (male)\n        for(side = [-1, 1]) {\n            translate([-2, side*2, 6]) {\n                rotate([0, 20, side*30]) \n                    cylinder(h=8, d1=2, d2=1, $fn=8);\n            }\n        }\n    }\n}\n\n// Leg module\nmodule leg(height, angle) {\n    translate([0, 0, height/2]) {\n        rotate([0, angle, 0]) {\n            // Upper leg\n            cylinder(h=height*0.6, d1=6, d2=4, $fn=12);\n            // Lower leg\n            translate([0, 0, height*0.6]) \n                cylinder(h=height*0.4, d1=4, d2=3, $fn=10);\n            // Hoof\n            translate([0, 0, height-2]) \n                scale([1, 1, 0.5]) \n                sphere(d=4, $fn=8);\n        }\n    }\n}\n\n// Tail\nmodule tail() {\n    translate([15, 0, 22]) {\n        rotate([10, 0, 0]) \n            cylinder(h=12, d1=4, d2=2, $fn=8);\n    }\n}\n\n// White spots pattern\nmodule spots() {\n    for(i = [0:5]) {\n        translate([random(-10, 10), random(-5, 5), random(15, 25)]) \n            scale([1, 0.8, 0.3]) \n            sphere(d=3, $fn=8);\n    }\n}\n\n// Main assembly\nunion() {\n    body();\n    head_neck();\n    \n    // Front legs\n    translate([-10, 8, 0]) leg(20, 0);\n    translate([-10, -8, 0]) leg(20, 0);\n    \n    // Back legs\n    translate([10, 8, 0]) leg(22, 0);\n    translate([10, -8, 0]) leg(22, 0);\n    \n    tail();\n    spots();\n}",
    "renders": true
  },
  {
    "animal": "bustard",
    "openscad_code": "// Bustard (Otis tarda) - Medium complexity 3D printable model\n// Dimensions: ~80mm length, ~50mm height\n\n$fn = 30;\n\n// Main body\nmodule body() {\n    union() {\n        // Torso\n        translate([0, 0, 15])\n        scale([1.2, 0.7, 1])\n        sphere(15);\n        \n        // Lower body\n        translate([0, 0, 5])\n        scale([1.4, 0.9, 0.8])\n        sphere(12);\n    }\n}\n\n// Head and neck\nmodule head_neck() {\n    union() {\n        // Neck\n        translate([-20, 0, 25])\n        rotate([0, 15, 0])\n        scale([0.4, 0.4, 1.2])\n        cylinder(h=15, r=5);\n        \n        // Head\n        translate([-28, 0, 32])\n        scale([0.8, 0.6, 0.7])\n        sphere(8);\n        \n        // Beak\n        translate([-36, 0, 32])\n        rotate([0, -20, 0])\n        scale([1.2, 0.3, 0.3])\n        cylinder(h=10, r=3);\n    }\n}\n\n// Wings\nmodule wing(side) {\n    mirror = side == \"left\" ? [0, 1, 0] : [0, 0, 0];\n    mirror(mirror) {\n        translate([0, 15, 20])\n        rotate([0, 0, -30])\n        scale([1.5, 0.2, 0.8])\n        sphere(10);\n        \n        // Wing feathers\n        for(i = [0:2]) {\n            translate([i*5-5, 20, 20-i*2])\n            rotate([0, 0, -45+i*10])\n            scale([0.8, 0.1, 0.3])\n            sphere(5);\n        }\n    }\n}\n\n// Legs and feet\nmodule leg(side) {\n    mirror = side == \"left\" ? [0, 1, 0] : [0, 0, 0];\n    mirror(mirror) {\n        // Upper leg\n        translate([5, 8, 10])\n        rotate([0, 0, 45])\n        cylinder(h=15, r=2);\n        \n        // Lower leg\n        translate([12, 12, 0])\n        rotate([0, 0, 90])\n        cylinder(h=15, r=1.5);\n        \n        // Foot\n        translate([20, 12, -3])\n        rotate([0, 90, 0])\n        scale([1.2, 0.4, 0.3])\n        cylinder(h=8, r=3);\n        \n        // Toes\n        for(i = [-1:1]) {\n            translate([25, 12+i*3, -3])\n            rotate([0, 90, 0])\n            scale([0.5, 0.2, 0.2])\n            cylinder(h=5, r=2);\n        }\n    }\n}\n\n// Tail\nmodule tail() {\n    translate([20, 0, 15])\n    rotate([0, -10, 0])\n    scale([1.2, 0.3, 0.6])\n    sphere(12);\n}\n\n// Eyes\nmodule eyes() {\n    for(side = [-1:2:1]) {\n        translate([-32, side*3.5, 34])\n        scale([0.4, 0.4, 0.4])\n        sphere(2);\n    }\n}\n\n// Main assembly\nunion() {\n    body();\n    head_neck();\n    wing(\"right\");\n    wing(\"left\");\n    leg(\"right\");\n    leg(\"left\");\n    tail();\n    eyes();\n}\n\n// Base for stability\ntranslate([0, 0, -6])\nscale([1.5, 1, 0.5])\ncylinder(h=3, r=20);",
    "renders": true
  },
  {
    "animal": "butterfly",
    "openscad_code": "// Realistic 3D Printable Butterfly - Medium Complexity\n\n// Overall dimensions\nwing_span = 70;\nbody_length = 40;\nbody_diameter = 6;\n\nmodule wing_base() {\n    difference() {\n        // Main wing shape\n        scale([1, 0.7, 0.2])\n        sphere(r = wing_span / 2);\n        \n        // Remove bottom half\n        translate([0, 0, -wing_span / 2])\n        cube([wing_span * 2, wing_span * 2, wing_span], center = true);\n    }\n}\n\nmodule wing_detail() {\n    // Vein pattern\n    for (i = [0:30:150]) {\n        rotate([0, 0, i])\n        translate([0, 0, 0.5])\n        scale([0.02, 1, 0.05])\n        cylinder(h = wing_span * 0.4, r1 = 0, r2 = 1);\n    }\n    \n    // Wing spots\n    for (pos = [[-10, 5], [-15, 0], [-12, -5]]) {\n        translate([pos[0], pos[1], 0.6])\n        scale([1, 0.7, 0.05])\n        sphere(r = 3);\n    }\n}\n\nmodule left_wing() {\n    translate([-body_diameter, 0, 0])\n    union() {\n        wing_base();\n        wing_detail();\n    }\n}\n\nmodule body_segment(height, radius, offset) {\n    translate([0, 0, offset])\n    cylinder(h = height, r = radius, $fn = 12);\n}\n\nmodule body() {\n    union() {\n        // Head\n        translate([0, 0, body_length - 3])\n        sphere(r = body_diameter * 0.8);\n        \n        // Thorax\n        body_segment(15, body_diameter, 15);\n        \n        // Abdomen segments\n        for (i = [0:2:12]) {\n            scale([1, 1, 0.8])\n            body_segment(2, body_diameter - i * 0.2, 12 - i);\n        }\n    }\n}\n\nmodule antenna() {\n    translate([0, body_diameter * 0.7, body_length - 2])\n    rotate([0, 45, 0])\n    cylinder(h = 15, r = 0.3);\n    \n    translate([0, -body_diameter * 0.7, body_length - 2])\n    rotate([0, -45, 0])\n    cylinder(h = 15, r = 0.3);\n}\n\nmodule butterfly() {\n    union() {\n        // Left wing\n        left_wing();\n        \n        // Right wing (mirrored)\n        mirror([1, 0, 0])\n        left_wing();\n        \n        // Body\n        body();\n        \n        // Antennae\n        antenna();\n    }\n}\n\n// Add support base for 3D printing\ntranslate([0, 0, -1])\ndifference() {\n    cylinder(h = 2, r = 5, $fn = 20);\n    cylinder(h = 2.1, r = 2, $fn = 20);\n}\n\n// Main butterfly\nbutterfly();",
    "renders": true
  },
  {
    "animal": "buzzard",
    "openscad_code": "// Buzzard 3D Model - Realistic Medium Complexity\n// Overall size ~70mm wingspan\n\n$fn = 30; // Smooth curves\n\n// Main module\nmodule buzzard() {\n    // Body\n    union() {\n        body();\n        head();\n        wings();\n        tail();\n        legs();\n    }\n}\n\n// Body section\nmodule body() {\n    // Main torso\n    translate([0, 0, 10])\n        scale([1, 0.7, 1.2])\n        sphere(d = 25);\n    \n    // Chest protrusion\n    translate([0, 7, 8])\n        scale([0.8, 0.5, 0.6])\n        sphere(d = 15);\n    \n    // Back ridge\n    translate([0, -5, 15])\n        rotate([0, 10, 0])\n        scale([0.6, 0.4, 0.3])\n        cylinder(h = 20, d = 10);\n}\n\n// Head and beak\nmodule head() {\n    // Head sphere\n    translate([0, 12, 25])\n        scale([0.9, 1.1, 1])\n        sphere(d = 18);\n    \n    // Beak\n    union() {\n        // Upper beak\n        translate([0, 22, 25])\n            rotate([30, 0, 0])\n            scale([0.8, 0.4, 0.8])\n            cylinder(h = 15, d1 = 8, d2 = 4);\n        \n        // Lower beak\n        translate([0, 22, 23])\n            rotate([10, 0, 0])\n            scale([0.7, 0.3, 0.4])\n            cylinder(h = 12, d1 = 6, d2 = 3);\n    }\n    \n    // Eyes\n    for(side = [-1, 1]) {\n        translate([side * 5, 15, 27])\n            sphere(d = 3);\n    }\n}\n\n// Wing modules\nmodule wings() {\n    // Left wing\n    translate([-15, 0, 18])\n        rotate([0, 0, -20])\n        wing();\n    \n    // Right wing\n    mirror([1, 0, 0])\n        translate([-15, 0, 18])\n        rotate([0, 0, -20])\n        wing();\n}\n\nmodule wing() {\n    // Main wing section\n    union() {\n        // Upper arm\n        translate([0, 0, 0])\n            rotate([0, 0, 30])\n            scale([1, 3, 0.3])\n            sphere(d = 12);\n        \n        // Lower wing section\n        translate([-8, -15, -2])\n            rotate([0, 0, 10])\n            scale([1, 4, 0.2])\n            sphere(d = 10);\n        \n        // Wing tip\n        translate([-12, -25, -3])\n            scale([0.5, 2, 0.15])\n            sphere(d = 8);\n        \n        // Wing feathers (simplified)\n        for(i = [0:3]) {\n            translate([-5 - i*3, -20 - i*2, -3 - i*0.5])\n                rotate([0, 0, -5 - i*2])\n                scale([0.3, 1.5, 0.05])\n                cube([2, 8, 0.5], center = true);\n        }\n    }\n}\n\n// Tail section\nmodule tail() {\n    union() {\n        // Main tail\n        translate([0, -20, 12])\n            rotate([20, 0, 0])\n            scale([1, 2, 0.3])\n            cube([12, 20, 4], center = true);\n        \n        // Tail feathers\n        for(i = [-1, 0, 1]) {\n            translate([i * 4, -25, 10])\n                rotate([15, 0, i * 5])\n                scale([0.8, 1.2, 0.1])\n                cube([6, 15, 2], center = true);\n        }\n    }\n}\n\n// Legs and feet\nmodule legs() {\n    // Left leg\n    translate([-5, 5, 5])\n        leg();\n    \n    // Right leg\n    mirror([1, 0, 0])\n        translate([-5, 5, 5])\n        leg();\n}\n\nmodule leg() {\n    union() {\n        // Upper leg\n        translate([0, 0, 0])\n            rotate([0, 15, 0])\n            cylinder(h = 10, d = 5);\n        \n        // Lower leg\n        translate([0, 5, -5])\n            rotate([0, 30, 0])\n            cylinder(h = 12, d = 4);\n        \n        // Foot\n        translate([0, 10, -10])\n            union() {\n                // Main foot\n                scale([2, 0.5, 0.3])\n                sphere(d = 8);\n                \n                // Toes\n                for(side = [-1, 1]) {\n                    translate([side * 5, 0, 0])\n                        rotate([0, 0, side * 30])\n                        scale([1, 0.3, 0.2])\n                        cylinder(h = 6, d = 3);\n                }\n                \n                // Back toe\n                translate([-2, -2, -1])\n                    rotate([0, 30, 0])\n                    scale([0.8, 0.3, 0.2])\n                    cylinder(h = 5, d = 3);\n            }\n    }\n}\n\n// Generate the model\nbuzzard();",
    "renders": true
  },
  {
    "animal": "caiman",
    "openscad_code": "// Caiman OpenSCAD model - medium complexity realistic style\n// Overall dimensions approximately 90mm long, 25mm wide, 15mm high\n\n$fn=32;\n\n// Main body module\nmodule caiman_body() {\n    // Main torso - elongated ellipsoid\n    scale([1.2, 0.7, 0.4])\n    sphere(r=20);\n    \n    // Tail - tapered cylinder segments\n    for(i=[0:3]) {\n        translate([25+i*10, 0, -i*2])\n        rotate([0, -10-i*5, 0])\n        scale([1-i*0.15, 1-i*0.15, 1-i*0.1])\n        cylinder(h=12, r1=8-i*2, r2=6-i*2);\n    }\n}\n\n// Head module\nmodule caiman_head() {\n    // Main head shape\n    translate([-25, 0, 2])\n    scale([1.5, 0.8, 0.7])\n    sphere(r=12);\n    \n    // Snout extension\n    translate([-40, 0, 0])\n    scale([1.8, 0.5, 0.4])\n    sphere(r=8);\n    \n    // Eye sockets\n    translate([-30, 6, 6])\n    sphere(r=3);\n    translate([-30, -6, 6])\n    sphere(r=3);\n    \n    // Eyes\n    color(\"black\")\n    translate([-31, 6.5, 6.5])\n    sphere(r=1.5);\n    translate([-31, -6.5, 6.5])\n    sphere(r=1.5);\n}\n\n// Leg module - creates one leg, use mirror for others\nmodule caiman_leg(side, front_back) {\n    // Upper leg\n    translate([front_back*10, side*8, -5])\n    rotate([0, 0, side*30])\n    scale([0.8, 0.8, 2])\n    cylinder(h=8, r=3);\n    \n    // Lower leg\n    translate([front_back*10, side*12, -13])\n    rotate([0, 0, side*20])\n    scale([0.7, 0.7, 1.5])\n    cylinder(h=10, r=2.5);\n    \n    // Foot\n    translate([front_back*10, side*15, -20])\n    rotate([0, 0, side*-10])\n    scale([2, 0.8, 0.5])\n    cube([8, 4, 2]);\n    \n    // Toes\n    for(toe=[-1:1]) {\n        translate([front_back*12+toe*2, side*17, -20])\n        scale([0.5, 0.2, 0.3])\n        cube([4, 2, 1]);\n    }\n}\n\n// Scales texture along back\nmodule back_scales() {\n    for(i=[-20:5:30]) {\n        translate([i, 0, 5])\n        scale([1, 0.3, 0.3])\n        sphere(r=2);\n    }\n}\n\n// Jaw line detail\nmodule jaw_detail() {\n    // Upper jaw ridge\n    for(i=[-45:3:-25]) {\n        translate([i, 0, 3])\n        scale([0.5, 0.3, 0.5])\n        sphere(r=1.5);\n    }\n}\n\n// Main assembly\nunion() {\n    // Body and tail\n    caiman_body();\n    \n    // Head\n    caiman_head();\n    \n    // Legs - front and back pairs\n    // Front legs\n    caiman_leg(1, -1);  // Right front\n    caiman_leg(-1, -1); // Left front\n    \n    // Back legs\n    caiman_leg(1, 1);   // Right back\n    caiman_leg(-1, 1);  // Left back\n    \n    // Back scales\n    back_scales();\n    \n    // Jaw detail\n    jaw_detail();\n    \n    // Nostrils\n    translate([-42, 2, 2])\n    sphere(r=1);\n    translate([-42, -2, 2])\n    sphere(r=1);\n}",
    "renders": true
  },
  {
    "animal": "camel",
    "openscad_code": "// Camel - Realistic Style, Medium Complexity\n// Designed for 3D printing (no overhangs, 2mm wall thickness)\n\n// Overall dimensions: ~80mm length, ~60mm height, ~25mm width\n\nmodule camel() {\n    // Main body\n    union() {\n        // Torso\n        translate([-10, 0, 0])\n            scale([1.8, 0.8, 1.2])\n            sphere(r=15, $fn=30);\n        \n        // Chest\n        translate([15, 0, -5])\n            scale([1.2, 0.7, 1])\n            sphere(r=12, $fn=25);\n        \n        // Neck\n        translate([-35, 0, 10])\n            rotate([0, 20, 0])\n            scale([1.2, 0.7, 0.7])\n            cylinder(h=25, r1=8, r2=5, $fn=16);\n        \n        // Head\n        translate([-55, 0, 20])\n            scale([1.5, 0.8, 0.9])\n            sphere(r=10, $fn=25);\n        \n        // Snout\n        translate([-68, 0, 18])\n            scale([1, 0.6, 0.4])\n            rotate([0, -20, 0])\n            cylinder(h=10, r1=5, r2=3, $fn=12);\n        \n        // Hump\n        translate([-5, 0, 15])\n            rotate([0, -10, 0])\n            scale([1, 1, 1.5])\n            sphere(r=12, $fn=25);\n        \n        // Legs\n        for(x = [-20, 10]) {\n            for(z = [-15, 15]) {\n                translate([x, z, -15])\n                    cylinder(h=20, r=5, $fn=12);\n                \n                // Hoof\n                translate([x, z, -25])\n                    cylinder(h=3, r1=5, r2=7, $fn=8);\n            }\n        }\n        \n        // Tail\n        translate([30, 0, 0])\n            rotate([0, 45, 0])\n            cylinder(h=15, r1=3, r2=1, $fn=8);\n        \n        // Eyes\n        for(y = [-5, 5]) {\n            translate([-62, y, 22])\n                sphere(r=2, $fn=12);\n        }\n        \n        // Ears\n        for(y = [-6, 6]) {\n            translate([-58, y, 28])\n                rotate([0, 0, y > 0 ? -30 : 30])\n                scale([0.5, 0.3, 1])\n                cylinder(h=8, r1=3, r2=1, $fn=8);\n        }\n    }\n}\n\n// Position camel on build plate\ntranslate([0, 0, 25])\ncamel();",
    "renders": true
  },
  {
    "animal": "canary",
    "openscad_code": "// Canary bird - Realistic style, medium complexity\n\n// Overall size: ~80mm long\n\n$fn = 32;  // Smooth curves for 3D printing\n\nmodule canary() {\n    // Main body\n    union() {\n        // Body - egg shape\n        scale([1.2, 1, 1.1])\n        sphere(r=10, center=true);\n        \n        // Head - slightly smaller sphere\n        translate([12, 0, 5])\n        sphere(r=8, center=true);\n        \n        // Beak - cone shape\n        translate([21, 0, 5])\n        rotate([0, -90, 0])\n        cylinder(h=8, r1=4, r2=0, center=true);\n        \n        // Wings - flattened ellipsoids\n        // Left wing\n        translate([0, -8, 2])\n        rotate([20, 0, -30])\n        scale([1.5, 0.4, 0.8])\n        sphere(r=10, center=true);\n        \n        // Right wing\n        translate([0, 8, 2])\n        rotate([20, 0, 30])\n        scale([1.5, 0.4, 0.8])\n        sphere(r=10, center=true);\n        \n        // Tail - tapered cylinders\n        for(i = [-20:5:-5]) {\n            translate([i, 0, -1])\n            rotate([0, 10 + (i+20)/2, 0])\n            scale([0.8, 1 - abs(i)/30, 0.3])\n            cylinder(h=3, r=5, center=true);\n        }\n        \n        // Legs - thin cylinders\n        // Left leg\n        translate([-5, -3, -10])\n        cylinder(h=8, r=1.5, center=false);\n        \n        // Right leg\n        translate([-5, 3, -10])\n        cylinder(h=8, r=1.5, center=false);\n        \n        // Feet - small spheres for toes\n        for(side = [-1, 1]) {\n            for(toe = [-1, 0, 1]) {\n                translate([-5 + toe*2, side*5, -10])\n                sphere(r=1.2, center=true);\n            }\n        }\n        \n        // Eyes - small spheres\n        translate([16, -2.5, 7])\n        sphere(r=1.5, center=true);\n        \n        translate([16, 2.5, 7])\n        sphere(r=1.5, center=true);\n    }\n}\n\n// Create the canary\ncanary();",
    "renders": true
  },
  {
    "animal": "capybara",
    "openscad_code": "// Capybara - Realistic Style, Medium Complexity\n// Approximate size: 80mm long, 40mm tall, 35mm wide\n\n$fn = 32;\nwall_thickness = 2;\n\n// Main body module\nmodule capybara() {\n    // Body - elongated ellipsoid\n    translate([0, 0, 10])\n        scale([1.8, 1, 1])\n        sphere(15);\n    \n    // Head\n    translate([-15, 0, 25])\n        scale([1.2, 1, 1])\n        sphere(10);\n    \n    // Snout extension\n    translate([-25, 0, 23])\n        scale([1.5, 0.7, 0.6])\n        sphere(5);\n    \n    // Ears\n    for(side = [-1, 1]) {\n        translate([-12, side * 10, 33])\n            rotate([0, -20, side * 20])\n            scale([0.5, 0.3, 1])\n            sphere(6);\n    }\n    \n    // Eyes\n    for(side = [-1, 1]) {\n        translate([-20, side * 5, 28])\n            sphere(2);\n    }\n    \n    // Nostrils\n    for(side = [-1, 1]) {\n        translate([-28, side * 2, 23])\n            sphere(1);\n    }\n    \n    // Legs\n    for(side = [-1, 1]) {\n        for(pos = [1, -1]) {\n            translate([pos * 10, side * 12, 0])\n                cylinder(h = 10, r1 = 6, r2 = 4);\n        }\n    }\n    \n    // Feet\n    for(side = [-1, 1]) {\n        for(pos = [1, -1]) {\n            translate([pos * 10, side * 12, -2])\n                scale([1.2, 1.5, 0.5])\n                sphere(4);\n        }\n    }\n    \n    // Tail\n    translate([22, 0, 12])\n        rotate([0, 20, 0])\n        cylinder(h = 8, r1 = 3, r2 = 2);\n    \n    // Whiskers\n    for(side = [-1, 1]) {\n        for(i = [1:3]) {\n            translate([-26, side * 5, 23])\n                rotate([0, 0, side * (20 + i * 5)])\n                cylinder(h = 8, r = 0.5);\n        }\n    }\n}\n\n// Create the final model\nunion() {\n    capybara();\n}",
    "renders": true
  },
  {
    "animal": "caracal",
    "openscad_code": "// Caracal - medium complexity, realistic style\n// Designed for 3D printing with no overhangs\n\n$fn = 32; // Smooth curves for printing\n\n// Main body\nmodule body() {\n    // Torso\n    translate([-20, 0, 0])\n        scale([1.5, 0.8, 0.6])\n        sphere(r=15);\n    \n    // Hindquarters\n    translate([-35, 0, -5])\n        scale([1.2, 1, 0.5])\n        rotate([0, 20, 0])\n        sphere(r=12);\n    \n    // Neck\n    translate([-5, 0, 8])\n        scale([0.8, 0.6, 1.2])\n        cylinder(h=15, r1=8, r2=6);\n}\n\n// Head\nmodule head() {\n    // Main head shape\n    translate([10, 0, 15])\n        scale([1, 0.8, 0.7])\n        sphere(r=12);\n    \n    // Snout\n    translate([20, 0, 13])\n        scale([0.8, 0.6, 0.5])\n        sphere(r=8);\n    \n    // Ears (with characteristic caracal tufts)\n    translate([8, 8, 25])\n        rotate([0, -20, 0])\n        scale([0.3, 0.1, 1.2])\n        cylinder(h=15, r=5);\n    \n    translate([8, -8, 25])\n        rotate([0, -20, 0])\n        scale([0.3, 0.1, 1.2])\n        cylinder(h=15, r=5);\n    \n    // Ear tufts\n    translate([11, 10, 37])\n        sphere(r=1.5);\n    \n    translate([11, -10, 37])\n        sphere(r=1.5);\n}\n\n// Legs module\nmodule legs() {\n    // Front legs\n    for(side = [-1, 1]) {\n        // Upper leg\n        translate([0, side*8, 8])\n            rotate([0, 10, 0])\n            scale([0.3, 0.3, 1])\n            cylinder(h=20, r=4);\n        \n        // Lower leg\n        translate([0, side*8, -8])\n            rotate([0, -10, 0])\n            scale([0.25, 0.25, 1])\n            cylinder(h=18, r=3.5);\n        \n        // Paw\n        translate([0, side*8, -18])\n            sphere(r=4);\n    }\n    \n    // Hind legs\n    for(side = [-1, 1]) {\n        // Upper leg\n        translate([-30, side*7, 0])\n            rotate([0, -30, 0])\n            scale([0.4, 0.4, 1])\n            cylinder(h=20, r=5);\n        \n        // Lower leg\n        translate([-35, side*7, -10])\n            rotate([0, 40, 0])\n            scale([0.3, 0.3, 1])\n            cylinder(h=18, r=4);\n        \n        // Paw\n        translate([-38, side*7, -18])\n            sphere(r=4.5);\n    }\n}\n\n// Tail\nmodule tail() {\n    // Base of tail\n    translate([-45, 0, 0])\n        rotate([0, 0, -20])\n        scale([0.4, 0.4, 1])\n        cylinder(h=5, r=5);\n    \n    // Curved tail\n    for(i = [0:5]) {\n        translate([-48 - i*3, 0, -3 - i*2])\n            rotate([0, -i*5, 0])\n            scale([0.4, 0.4, 1])\n            cylinder(h=4, r=4.5 - i*0.3);\n    }\n}\n\n// Eyes\nmodule eyes() {\n    for(side = [-1, 1]) {\n        translate([18, side*5, 16])\n            scale([0.5, 0.5, 0.3])\n            sphere(r=2);\n    }\n}\n\n// Nose\nmodule nose() {\n    translate([23, 0, 13])\n        scale([0.5, 0.8, 0.3])\n        sphere(r=1.5);\n}\n\n// Whiskers\nmodule whiskers() {\n    for(side = [-1, 1]) {\n        for(i = [0:2]) {\n            translate([20, side*(8 + i*2), 12])\n                rotate([0, 0, side*(20 + i*10)])\n                scale([0.1, 0.1, 1])\n                cylinder(h=8, r=0.5);\n        }\n    }\n}\n\n// Assemble the caracal\nunion() {\n    body();\n    head();\n    legs();\n    tail();\n    eyes();\n    nose();\n    whiskers();\n}\n\n// Base for stable printing\ntranslate([-25, 0, -22])\n    cube([50, 20, 2]);",
    "renders": true
  },
  {
    "animal": "cardinal",
    "openscad_code": "$fa = 2;\n$fs = 2;\n\nmodule cardinal_body() {\n    // Main body\n    color(\"red\")\n    difference() {\n        union() {\n            // Torso\n            scale([1.2, 1, 1.3])\n                sphere(d=20);\n            \n            // Back\n            translate([0, 0, 10])\n                scale([1.4, 1.2, 0.8])\n                    sphere(d=15);\n        }\n        \n        // Remove bottom flat\n        translate([0, 0, -10])\n            cube([30, 30, 20], center=true);\n    }\n}\n\nmodule cardinal_head() {\n    // Head\n    color(\"red\")\n    translate([0, 0, 25])\n        scale([0.9, 0.8, 1.1])\n            sphere(d=16);\n    \n    // Crest\n    color(\"red\")\n    translate([0, 0, 32])\n        for(i=[0:6]) {\n            rotate([0, 0, i*15-45])\n                translate([0, 6, 0])\n                    scale([0.3, 1, 0.3])\n                        sphere(d=8);\n        }\n}\n\nmodule cardinal_beak() {\n    // Beak\n    color(\"orange\")\n    translate([0, 12, 24])\n        rotate([90, 0, 0])\n            cylinder(h=12, d1=3, d2=2);\n    \n    // Lower beak\n    translate([0, 12, 21])\n        rotate([90, 0, 0])\n            cylinder(h=8, d1=2, d2=1.5);\n}\n\nmodule cardinal_wings() {\n    // Left wing\n    color(\"red\")\n    translate([-10, 0, 15])\n        rotate([0, 0, 45])\n            scale([1, 0.3, 0.8])\n                sphere(d=18);\n    \n    // Wing detail\n    translate([-12, 0, 14])\n        rotate([0, 0, 45])\n            scale([0.8, 0.2, 0.6])\n                sphere(d=16);\n    \n    // Right wing (mirrored)\n    mirror([1, 0, 0]) {\n        translate([-10, 0, 15])\n            rotate([0, 0, 45])\n                scale([1, 0.3, 0.8])\n                    sphere(d=18);\n        \n        translate([-12, 0, 14])\n            rotate([0, 0, 45])\n                scale([0.8, 0.2, 0.6])\n                    sphere(d=16);\n    }\n}\n\nmodule cardinal_tail() {\n    // Tail feathers\n    color(\"red\")\n    for(i=[-2:2]) {\n        translate([0, -12-i*1.5, 8-i*2])\n            rotate([0, 20-i*5, 0])\n                scale([0.8, 0.2, 1.5])\n                    sphere(d=12);\n    }\n}\n\nmodule cardinal_legs() {\n    // Left leg\n    color(\"orange\")\n    translate([-3, 0, -10])\n        cylinder(h=8, d=2);\n    \n    // Left foot\n    translate([-3, 4, -18])\n        for(i=[-1:1]) {\n            translate([i*2, 0, 0])\n                cylinder(h=4, d=1);\n        }\n    \n    // Right leg\n    translate([3, 0, -10])\n        cylinder(h=8, d=2);\n    \n    // Right foot\n    translate([3, 4, -18])\n        for(i=[-1:1]) {\n            translate([i*2, 0, 0])\n                cylinder(h=4, d=1);\n        }\n}\n\nmodule cardinal_eye() {\n    // Left eye\n    color(\"black\")\n    translate([-4, 9, 26])\n        sphere(d=2);\n    \n    // Eye highlight\n    color(\"white\")\n    translate([-3.5, 9.5, 26.5])\n        sphere(d=0.8);\n    \n    // Right eye\n    color(\"black\")\n    translate([4, 9, 26])\n        sphere(d=2);\n    \n    // Eye highlight\n    color(\"white\")\n    translate([3.5, 9.5, 26.5])\n        sphere(d=0.8);\n}\n\nmodule cardinal() {\n    // Assemble all parts\n    union() {\n        cardinal_body();\n        cardinal_head();\n        cardinal_beak();\n        cardinal_wings();\n        cardinal_tail();\n        cardinal_legs();\n        cardinal_eye();\n    }\n}\n\n// Scale to 70mm height\nscale(70/35)\n    cardinal();",
    "renders": true
  },
  {
    "animal": "caribou",
    "openscad_code": "// Caribou - Realistic Medium Complexity\n// 3D printable model ~80mm length\n\n// Global parameters\nbody_len = 60;\nbody_wid = 25;\nbody_hgt = 30;\nleg_len = 25;\nhead_len = 20;\nhead_wid = 12;\nhead_hgt = 14;\n\nmodule body() {\n    // Main torso\n    translate([0, 0, 12])\n    scale([1, 0.8, 0.9])\n    sphere(d=body_wid, $fn=20);\n    \n    // Rump\n    translate([-body_len/2-5, 0, 8])\n    scale([1.2, 1, 0.8])\n    sphere(d=body_wid+5, $fn=20);\n    \n    // Chest\n    translate([body_len/2, 0, 10])\n    scale([1, 1.1, 1.2])\n    sphere(d=body_wid, $fn=20);\n}\n\nmodule leg(pos, angle) {\n    translate(pos)\n    rotate([0, angle, 0]) {\n        // Upper leg\n        translate([0, 0, 12])\n        cylinder(h=leg_len-5, d1=6, d2=4, $fn=8);\n        \n        // Lower leg\n        translate([0, 0, 12+leg_len-5])\n        cylinder(h=leg_len-5, d1=4, d2=3, $fn=8);\n        \n        // Hoof\n        translate([0, 0, 12+2*leg_len-10])\n        cube([4, 8, 3], center=true);\n    }\n}\n\nmodule antler() {\n    translate([0, 0, 0])\n    rotate([0, -20, 0]) {\n        // Main beam\n        cylinder(h=20, d1=3, d2=2, $fn=6);\n        \n        // Tines\n        for(i=[0:30:120]) {\n            rotate([0, 0, i])\n            translate([0, 0, 5+i/6])\n            rotate([0, 30, 0])\n            cylinder(h=10-i/10, d1=2, d2=1, $fn=5);\n            \n            rotate([0, 0, -i])\n            translate([0, 0, 5+i/6])\n            rotate([0, 30, 0])\n            cylinder(h=8-i/12, d1=2, d2=1, $fn=5);\n        }\n    }\n}\n\nmodule head() {\n    // Skull\n    translate([body_len/2+head_len/2, 0, 25])\n    rotate([0, -20, 0])\n    scale([1.3, 1, 1])\n    sphere(d=head_wid, $fn=20);\n    \n    // Muzzle\n    translate([body_len/2+head_len, 0, 22])\n    scale([2, 0.8, 0.6])\n    sphere(d=head_wid/2, $fn=20);\n    \n    // Ears\n    translate([body_len/2+head_len/2-3, 6, 32])\n    rotate([0, -30, 0])\n    scale([0.5, 1, 2])\n    sphere(d=4, $fn=8);\n    \n    translate([body_len/2+head_len/2-3, -6, 32])\n    rotate([0, -30, 0])\n    scale([0.5, 1, 2])\n    sphere(d=4, $fn=8);\n    \n    // Antlers\n    translate([body_len/2+head_len/2-5, 8, 38])\n    antler();\n    \n    translate([body_len/2+head_len/2-5, -8, 38])\n    mirror([0, 1, 0])\n    antler();\n}\n\nmodule tail() {\n    translate([-body_len/2-7, 0, 18])\n    rotate([0, 40, 0])\n    scale([1, 0.5, 0.3])\n    sphere(d=8, $fn=10);\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    tail();\n    \n    // Legs\n    leg([body_len/2-10, 10, 0], 15);\n    leg([body_len/2-10, -10, 0], 15);\n    leg([-body_len/2+5, 10, 0], -15);\n    leg([-body_len/2+5, -10, 0], -15);\n}",
    "renders": true
  },
  {
    "animal": "carp",
    "openscad_code": "// Realistic 3D-printable carp (medium complexity)\n// Dimensions: ~70 mm long, ~30 mm high, ~20 mm thick\n\n// Overall scale factor\nscale_factor = 1;\n\n// Main carp module\nmodule carp() {\n    // Body - main oval shape\n    difference() {\n        union() {\n            // Main body ellipsoid with flattened sides\n            scale([1.3, 0.6, 0.7])\n                sphere(d=40, $fn=64);\n            \n            // Tail extension\n            translate([-20, 0, 0])\n                scale([0.8, 0.3, 0.4])\n                    sphere(d=30, $fn=32);\n        }\n        \n        // Cut bottom flat for printing\n        translate([0, 0, -15])\n            cube([100, 100, 30], center=true);\n    }\n    \n    // Head section - slightly wider\n    translate([15, 0, 2])\n        scale([1.1, 1.2, 0.9])\n            sphere(d=20, $fn=32);\n    \n    // Mouth - small protrusion\n    translate([22, 0, -2])\n        rotate([0, 20, 0])\n            scale([1, 0.8, 0.6])\n                cylinder(h=8, d1=8, d2=6, $fn=16);\n    \n    // Eyes\n    for(side = [-1, 1]) {\n        translate([18, side*6, 3])\n            sphere(d=4, $fn=16);\n        translate([19, side*6.5, 3.5])\n            sphere(d=2, $fn=8);\n    }\n    \n    // Dorsal fin\n    module dorsal_fin() {\n        for(i = [0:3]) {\n            translate([-5 - i*6, 0, 6 + sin(i*45)*2])\n                rotate([0, 90 - i*10, 0])\n                    scale([0.3, 1, 0.1])\n                        cylinder(h=8, d1=10, d2=2, $fn=3);\n        }\n    }\n    dorsal_fin();\n    \n    // Pectoral fins\n    module pectoral_fin(side) {\n        translate([8, side*10, -2])\n            rotate([0, 0, side*30])\n                scale([1, 0.3, 0.1])\n                    cylinder(h=12, d1=8, d2=4, $fn=3);\n    }\n    pectoral_fin(1);\n    pectoral_fin(-1);\n    \n    // Pelvic fins\n    module pelvic_fin(side) {\n        translate([0, side*8, -3])\n            rotate([0, 0, side*45])\n                scale([0.8, 0.3, 0.1])\n                    cylinder(h=10, d1=6, d2=3, $fn=3);\n    }\n    pelvic_fin(1);\n    pelvic_fin(-1);\n    \n    // Anal fin\n    module anal_fin() {\n        for(i = [0:2]) {\n            translate([-12 - i*4, 0, -4])\n                rotate([0, 90 + i*15, 0])\n                    scale([0.3, 0.8, 0.1])\n                        cylinder(h=6, d1=6, d2=2, $fn=3);\n        }\n    }\n    anal_fin();\n    \n    // Tail fin\n    translate([-30, 0, 0])\n        rotate([0, 90, 0])\n            scale([0.2, 1.5, 1])\n                cylinder(h=15, d1=20, d2=0, $fn=3);\n    \n    // Scales texture - simple pattern\n    module scales() {\n        for(x = [-20:5:15]) {\n            for(y = [-8:4:8]) {\n                for(z = [-5:3:5]) {\n                    if(norm([x,y,z]) < 20) {\n                        translate([x, y, z + sin(x*0.5)*2])\n                            sphere(d=1.5, $fn=8);\n                    }\n                }\n            }\n        }\n    }\n    // scales(); // Uncomment for textured surface\n    \n    // Barbels (whiskers)\n    for(side = [-1, 1]) {\n        translate([20, side*4, -1])\n            rotate([0, 90, side*20])\n                cylinder(h=6, d=0.8, $fn=8);\n    }\n}\n\n// Generate the carp\nscale([scale_factor, scale_factor, scale_factor])\n    carp();",
    "renders": true
  },
  {
    "animal": "cassowary",
    "openscad_code": "// Cassowary - Medium complexity realistic style\n// 3D printable model using basic primitives\n\n$fn = 32;  // Smooth curves for printing\n\n// Main module\nmodule cassowary() {\n    // Scale to ~80mm height\n    scale(0.8) {\n        union() {\n            // Body\n            body();\n            \n            // Head and neck\n            translate([0, 20, 35]) rotate([0, 10, 0]) head_and_neck();\n            \n            // Legs\n            translate([-12, -25, 0]) leg(true);\n            translate([12, -25, 0]) leg(false);\n            \n            // Tail\n            translate([0, -35, 5]) tail();\n        }\n    }\n}\n\n// Main body\nmodule body() {\n    difference() {\n        // Main torso\n        rotate([90, 0, 0]) scale([1.2, 1, 1.5]) cylinder(h=40, r1=15, r2=12);\n        \n        // Neck hole\n        translate([0, 20, 35]) rotate([0, 10, 0]) cylinder(h=20, r=6);\n    }\n    \n    // Back feathers (casque-like structures)\n    for(i = [-2:1:2]) {\n        translate([i*8, -5, 45]) rotate([0, -10, 0]) \n            scale([0.8, 0.8, 1]) cylinder(h=8, r=4);\n    }\n}\n\n// Head and neck assembly\nmodule head_and_neck() {\n    union() {\n        // Neck\n        color(\"dimgray\") \n            rotate([-10, 0, 0]) cylinder(h=25, r1=6, r2=4);\n        \n        // Head\n        translate([0, 0, 25]) {\n            // Main head shape\n            scale([1.2, 1, 0.8]) sphere(r=8);\n            \n            // Beak\n            translate([0, 12, -2]) rotate([20, 0, 0])\n                scale([0.4, 2, 0.3]) cylinder(h=10, r=5);\n            \n            // Casque (helmet)\n            translate([0, 0, 6]) rotate([30, 0, 0])\n                scale([0.8, 1.5, 0.5]) cylinder(h=12, r=5);\n            \n            // Eyes\n            translate([3, 5, 2]) sphere(r=1.5);\n            translate([-3, 5, 2]) sphere(r=1.5);\n            \n            // Wattles\n            color(\"red\") {\n                translate([4, 8, -3]) sphere(r=2);\n                translate([-4, 8, -3]) sphere(r=2);\n            }\n        }\n    }\n}\n\n// Leg module\nmodule leg(left) {\n    mirror([left ? 0 : 1, 0, 0]) {\n        // Upper leg\n        color(\"dimgray\")\n            translate([0, 0, 15]) rotate([10, 0, 10]) \n                cylinder(h=20, r=4);\n        \n        // Lower leg\n        translate([2, 0, -5]) rotate([20, 0, 10])\n            cylinder(h=25, r=3);\n        \n        // Foot\n        translate([4, 0, -30]) {\n            // Main foot\n            scale([2, 1, 0.5]) sphere(r=5);\n            \n            // Toes\n            for(angle = [0:20:40]) {\n                rotate([0, 0, angle]) \n                    translate([8, 0, 0]) scale([1, 0.3, 0.3]) \n                        cylinder(h=8, r=2);\n            }\n            \n            // Inner toe (the dagger)\n            rotate([0, 0, -20]) \n                translate([10, 0, 1]) scale([1.5, 0.3, 1]) \n                    cylinder(h=12, r=1.5);\n        }\n    }\n}\n\n// Tail feathers\nmodule tail() {\n    for(i = [-3:1:3]) {\n        rotate([0, i*10, 0]) {\n            translate([i*2, -8, 0]) \n                scale([1, 0.3, 2]) sphere(r=5);\n        }\n    }\n}\n\n// Generate the model\ncassowary();",
    "renders": true
  },
  {
    "animal": "cat",
    "openscad_code": "// Realistic Cat - Medium Complexity\n// Designed for 3D printing with no overhangs\n\n// Overall dimensions: ~70mm long, ~40mm high, ~35mm wide\n\nmodule cat_body() {\n    // Main torso - oval shape\n    union() {\n        // Torso base\n        scale([1.2, 1, 0.8])\n            sphere(d=30, $fn=32);\n        \n        // Chest extension\n        translate([-10, 0, -5])\n            scale([0.8, 1, 0.6])\n            sphere(d=25, $fn=32);\n    }\n}\n\nmodule cat_head() {\n    // Head with ears and muzzle\n    translate([20, 0, 12]) {\n        rotate([0, -10, 0]) {\n            // Main head sphere\n            sphere(d=20, $fn=32);\n            \n            // Muzzle\n            translate([8, 0, -2])\n                scale([1.2, 0.8, 0.6])\n                sphere(d=12, $fn=32);\n            \n            // Left ear\n            translate([0, -8, 8])\n                rotate([30, 0, -20])\n                scale([0.3, 0.1, 0.8])\n                cylinder(d1=12, d2=6, h=8, $fn=3);\n            \n            // Right ear\n            translate([0, 8, 8])\n                rotate([30, 0, 20])\n                scale([0.3, 0.1, 0.8])\n                cylinder(d1=12, d2=6, h=8, $fn=3);\n            \n            // Eyes (indents)\n            translate([10, -3.5, 2])\n                sphere(d=3, $fn=16);\n            translate([10, 3.5, 2])\n                sphere(d=3, $fn=16);\n            \n            // Nose\n            translate([13, 0, -1])\n                scale([0.8, 0.6, 0.4])\n                sphere(d=4, $fn=16);\n        }\n    }\n}\n\nmodule cat_legs() {\n    // Front legs\n    for(side = [-1, 1]) {\n        translate([10, side*8, -5]) {\n            // Upper leg\n            rotate([0, side*10, 0])\n                cylinder(d1=6, d2=5, h=15, $fn=16);\n            \n            // Paw\n            translate([0, 0, -15])\n                sphere(d=7, $fn=16);\n        }\n    }\n    \n    // Back legs\n    for(side = [-1, 1]) {\n        translate([-15, side*8, -5]) {\n            // Thigh\n            rotate([0, -side*20, 0])\n                scale([1.2, 1, 1])\n                cylinder(d1=7, d2=6, h=12, $fn=16);\n            \n            // Lower leg\n            translate([-3, 0, -12])\n                rotate([30, 0, 0])\n                cylinder(d1=5, d2=4, h=10, $fn=16);\n            \n            // Paw\n            translate([-5, 0, -22])\n                sphere(d=7, $fn=16);\n        }\n    }\n}\n\nmodule cat_tail() {\n    // Tail in relaxed curved position\n    translate([-18, 0, 8]) {\n        rotate([0, 0, -45]) {\n            for(i = [0:5]) {\n                translate([sin(i*15)*3, -cos(i*15)*3, i*3])\n                    rotate([0, 0, i*15])\n                    sphere(d=6-i*0.5, $fn=16);\n            }\n        }\n    }\n}\n\nmodule cat_whiskers() {\n    // Whiskers on muzzle\n    for(side = [-1, 1]) {\n        for(angle = [-30, 0, 30]) {\n            translate([20, side*3, 10]) {\n                rotate([0, 0, side*angle])\n                translate([5, 0, 0])\n                    cylinder(d=0.5, h=8, $fn=8);\n            }\n        }\n    }\n}\n\n// Assemble the cat\nunion() {\n    // Main body parts\n    cat_body();\n    cat_head();\n    cat_legs();\n    cat_tail();\n    \n    // Fine details\n    cat_whiskers();\n}\n\n// Base plate for stability\ntranslate([0, 0, -25])\n    cube([40, 30, 2], center=true);",
    "renders": true
  },
  {
    "animal": "caterpillar",
    "openscad_code": "// Realistic 3D Printable Caterpillar\n// Medium complexity with anatomical features\n\n$fn = 36;\n\n// Main parameters\nbody_length = 80;\nsegment_count = 10;\nsegment_radius = 8;\nhead_radius = 9;\nleg_length = 6;\n\n// Create the complete caterpillar\nmodule caterpillar() {\n    // Body segments\n    for (i = [0:segment_count-1]) {\n        translate([i * (body_length / segment_count), 0, 0]) \n            body_segment(i);\n    }\n    \n    // Head\n    translate([(segment_count) * (body_length / segment_count), 0, 0]) \n        head();\n    \n    // Legs - three pairs per segment\n    for (i = [0:segment_count-1]) {\n        segment_pos = i * (body_length / segment_count);\n        \n        // Left legs\n        translate([segment_pos, segment_radius * 0.8, -segment_radius * 0.3])\n            rotate([0, 90, -30]) leg();\n        translate([segment_pos, segment_radius * 0.8, 0])\n            rotate([0, 90, -45]) leg();\n        translate([segment_pos, segment_radius * 0.8, segment_radius * 0.3])\n            rotate([0, 90, -60]) leg();\n            \n        // Right legs\n        translate([segment_pos, -segment_radius * 0.8, -segment_radius * 0.3])\n            rotate([0, 90, 30]) leg();\n        translate([segment_pos, -segment_radius * 0.8, 0])\n            rotate([0, 90, 45]) leg();\n        translate([segment_pos, -segment_radius * 0.8, segment_radius * 0.3])\n            rotate([0, 90, 60]) leg();\n    }\n}\n\n// Individual body segment with realistic features\nmodule body_segment(index) {\n    segment_width = segment_radius * 2;\n    \n    // Main segment body\n    difference() {\n        // Elliptical segment\n        scale([1.2, 1, 0.8]) \n            sphere(r = segment_radius);\n            \n        // Bottom flat for printing\n        translate([0, 0, -segment_radius]) \n            cube([segment_width * 2, segment_width * 2, segment_radius], center = true);\n    }\n    \n    // Segment ridges for realism\n    for (j = [0:3]) {\n        rotate([0, 0, j * 90]) \n            translate([segment_radius * 0.3, 0, segment_radius * 0.5])\n                scale([0.3, 0.1, 0.3]) \n                    sphere(r = segment_radius * 0.8);\n    }\n    \n    // Spiracles (breathing holes)\n    translate([0, segment_radius * 0.7, segment_radius * 0.2])\n        sphere(r = 0.5);\n    translate([0, -segment_radius * 0.7, segment_radius * 0.2])\n        sphere(r = 0.5);\n}\n\n// Realistic head with mandibles and eyes\nmodule head() {\n    // Main head sphere\n    sphere(r = head_radius);\n    \n    // Eyes - compound eye effect\n    for (eye in [[head_radius * 0.7, head_radius * 0.5, head_radius * 0.6],\n                 [head_radius * 0.7, -head_radius * 0.5, head_radius * 0.6]]) {\n        translate(eye) {\n            difference() {\n                sphere(r = 1.5);\n                // Pupil\n                translate([0.5, 0, 0])\n                    sphere(r = 0.8);\n            }\n        }\n    }\n    \n    // Mandibles\n    translate([head_radius * 0.8, head_radius * 0.4, -head_radius * 0.5])\n        rotate([0, -20, 0])\n            scale([1, 0.4, 0.6])\n                cylinder(r1 = 1.5, r2 = 0.5, h = 3);\n    translate([head_radius * 0.8, -head_radius * 0.4, -head_radius * 0.5])\n        rotate([0, -20, 0])\n            scale([1, 0.4, 0.6])\n                cylinder(r1 = 1.5, r2 = 0.5, h = 3);\n    \n    // Antennae\n    translate([head_radius * 0.5, head_radius * 0.3, head_radius * 0.8])\n        rotate([0, -30, 30])\n            cylinder(r = 0.3, h = 4);\n    translate([head_radius * 0.5, -head_radius * 0.3, head_radius * 0.8])\n        rotate([0, -30, -30])\n            cylinder(r = 0.3, h = 4);\n}\n\n// Realistic leg with segments\nmodule leg() {\n    union() {\n        // Main leg segment\n        cylinder(r1 = 1, r2 = 0.6, h = leg_length);\n        \n        // Foot/claw\n        translate([0, 0, leg_length])\n            sphere(r = 0.7);\n    }\n}\n\n// Generate the caterpillar\ntranslate([-body_length/2, 0, segment_radius]) \n    caterpillar();",
    "renders": true
  },
  {
    "animal": "catfish",
    "openscad_code": "// 3D Printable Realistic Catfish\n// Size: ~80mm long, 25mm wide, 20mm tall\n// Uses only basic primitives and boolean operations\n\n$fn = 30;  // Smooth curves\n\nmodule catfish() {\n    // Main body - elongated ellipsoid\n    scale([1.2, 0.35, 0.25])\n        sphere(25, center=true);\n\n    // Head extension\n    translate([25, 0, -2])\n        scale([1.5, 0.8, 0.8])\n            sphere(15, center=true);\n\n    // Mouth - flattened cylinder\n    translate([35, 0, -5])\n        rotate([90, 0, 0])\n            cylinder(h=8, r1=10, r2=8, center=true);\n\n    // Barbels (whiskers)\n    for(side = [-1, 1]) {\n        // Long outer barbels\n        translate([28, side*12, -3])\n            rotate([0, side*20, 0])\n                cylinder(h=15, r=1.2, center=true);\n        \n        // Short inner barbels\n        translate([30, side*7, -2])\n            rotate([0, side*15, 0])\n                cylinder(h=8, r=1, center=true);\n    }\n\n    // Dorsal fin base\n    translate([-5, 0, 8])\n        rotate([90, 0, 0])\n            cylinder(h=12, r1=2, r2=0.5, center=true);\n\n    // Dorsal fin rays\n    for(i = [-4:1:4]) {\n        translate([-5 + i*1.5, 0, 8])\n            rotate([90, i*10, 0])\n                cylinder(h=10 - abs(i), r=0.8, center=true);\n    }\n\n    // Pectoral fins\n    for(side = [-1, 1]) {\n        translate([15, side*12, -3])\n            rotate([0, side*45, 30])\n                scale([1, 0.3, 0.1])\n                    sphere(8, center=true);\n    }\n\n    // Tail\n    translate([-28, 0, -2])\n        rotate([0, 0, 0])\n            union() {\n                // Upper tail lobe\n                translate([0, 0, 3])\n                    rotate([30, 0, 0])\n                        scale([1.5, 0.3, 0.1])\n                            sphere(12, center=true);\n                \n                // Lower tail lobe\n                translate([0, 0, -3])\n                    rotate([-30, 0, 0])\n                        scale([1.5, 0.3, 0.1])\n                            sphere(12, center=true);\n                \n                // Tail connection\n                cylinder(h=10, r1=8, r2=4, center=true);\n            }\n\n    // Eyes\n    for(side = [-1, 1]) {\n        translate([30, side*8, 2]) {\n            // Eye socket\n            difference() {\n                sphere(3, center=true);\n                translate([1, 0, 0])\n                    sphere(2.5, center=true);\n            }\n            // Pupil\n            translate([2, 0, 0])\n                color(\"black\")\n                    sphere(1.2, center=true);\n        }\n    }\n\n    // Ventral fins\n    for(side = [-1, 1]) {\n        translate([5, side*10, -8])\n            rotate([0, side*30, -20])\n                scale([0.8, 0.2, 0.1])\n                    sphere(6, center=true);\n    }\n\n    // Anal fin\n    translate([-15, 0, -7])\n        rotate([90, 0, 0])\n            scale([1.2, 0.2, 0.1])\n                sphere(8, center=true);\n}\n\n// Generate the catfish\ncatfish();",
    "renders": true
  },
  {
    "animal": "catshark",
    "openscad_code": "$fn = 32;\n\nmodule catshark() {\n    // Overall body\n    difference() {\n        union() {\n            // Main body\n            translate([0, 0, 5])\n                scale([1, 0.4, 0.25])\n                sphere(d=50);\n\n            // Tail extension\n            translate([-35, 0, 0])\n                rotate([0, 0, 10])\n                scale([0.8, 0.3, 0.2])\n                cylinder(h=30, d1=25, d2=5);\n\n            // Head\n            translate([25, 0, 3])\n                scale([0.8, 0.6, 0.6])\n                sphere(d=20);\n\n            // Dorsal fins\n            translate([-15, 0, 10])\n                rotate([0, 0, 0])\n                scale([0.3, 1, 0.5])\n                cylinder(h=12, d1=0, d2=8);\n\n            translate([-5, 0, 10])\n                rotate([0, 0, 0])\n                scale([0.3, 1, 0.5])\n                cylinder(h=10, d1=0, d2=6);\n\n            // Pectoral fins\n            translate([10, 10, 0])\n                rotate([0, 0, -30])\n                scale([1, 0.2, 0.05])\n                cylinder(h=15, d1=10, d2=5);\n\n            mirror([0, 1, 0])\n                translate([10, 10, 0])\n                rotate([0, 0, -30])\n                scale([1, 0.2, 0.05])\n                cylinder(h=15, d1=10, d2=5);\n\n            // Pelvic fins\n            translate([-5, 8, 0])\n                rotate([0, 0, -45])\n                scale([0.8, 0.15, 0.05])\n                cylinder(h=12, d1=8, d2=3);\n\n            mirror([0, 1, 0])\n                translate([-5, 8, 0])\n                rotate([0, 0, -45])\n                scale([0.8, 0.15, 0.05])\n                cylinder(h=12, d1=8, d2=3);\n        }\n\n        // Eye sockets\n        translate([30, 7, 8])\n            sphere(d=4);\n\n        translate([30, -7, 8])\n            sphere(d=4);\n\n        // Mouth opening\n        translate([32, 0, 2])\n            scale([1, 2, 0.5])\n            sphere(d=5);\n\n        // Gill slits\n        for(i = [1:5]) {\n            translate([20 - i*3, 0, 5])\n                rotate([0, 90, 0])\n                scale([0.3, 1, 1])\n                cylinder(h=10, d=2);\n        }\n    }\n\n    // Eyes\n    translate([30, 7, 8])\n        sphere(d=3);\n\n    translate([30, -7, 8])\n        sphere(d=3);\n\n    // Nostrils\n    translate([28, 4, 5])\n        sphere(d=1.5);\n\n    translate([28, -4, 5])\n        sphere(d=1.5);\n\n    // Caudal fin\n    translate([-45, 0, 0])\n        rotate([0, 0, 10])\n        union() {\n            translate([0, 0, 0])\n                rotate([0, 0, 45])\n                scale([0.1, 1, 0.5])\n                cylinder(h=15, d1=0, d2=8);\n\n            translate([0, 0, 0])\n                rotate([0, 0, -45])\n                scale([0.1, 1, 0.5])\n                cylinder(h=15, d1=0, d2=8);\n        }\n}\n\ncatshark();",
    "renders": true
  },
  {
    "animal": "cattle",
    "openscad_code": "// Realistic medium-complexity cattle for 3D printing\n// Dimensions: ~70 mm long\n\nmodule leg() {\n    // Single leg with hoof\n    union() {\n        // Upper leg\n        translate([0,-2,0])\n            scale([1,1,1.5])\n            sphere(4, $fn=12);\n        \n        // Lower leg\n        cylinder(h=12, r1=3, r2=2.5, $fn=8);\n        \n        // Hoof\n        translate([0,0,-7])\n            cylinder(h=3, r1=2.5, r2=2.2, $fn=8);\n    }\n}\n\nmodule ear() {\n    // Realistic curved ear shape\n    difference() {\n        rotate([0,10,0])\n            scale([1,1.5,0.5])\n            sphere(4, $fn=12);\n        \n        translate([0,0,-1])\n            cube([6,6,6], center=true);\n    }\n}\n\nmodule horn() {\n    // Curved horn\n    rotate([0,0,-15])\n        cylinder(h=8, r1=2, r2=0.5, $fn=8);\n}\n\nmodule tail() {\n    // Tail with tuft\n    union() {\n        // Tail stem\n        rotate([0,0,20])\n            cylinder(h=15, r1=1.5, r2=1, $fn=8);\n        \n        // Tuft\n        translate([2,0,16])\n            sphere(3, $fn=8);\n    }\n}\n\nmodule body() {\n    // Main torso\n    union() {\n        // Main body - elliptical shape\n        scale([1.5,1,1.2])\n            sphere(15, $fn=24);\n        \n        // Rump\n        translate([-20,0,0])\n            scale([1.2,1,1])\n            sphere(12, $fn=20);\n        \n        // Chest\n        translate([20,0,-3])\n            scale([1.3,0.9,0.8])\n            sphere(10, $fn=16);\n        \n        // Belly\n        translate([0,0,-10])\n            cube([40,20,10], center=true);\n    }\n}\n\nmodule head() {\n    union() {\n        // Main head\n        translate([25,0,5])\n            scale([1.2,1,0.8])\n            sphere(8, $fn=16);\n        \n        // Muzzle\n        translate([32,0,-2])\n            scale([0.8,0.7,0.6])\n            sphere(6, $fn=12);\n        \n        // Nostrils\n        translate([33,1.5,-3])\n            cylinder(h=1, r=0.5, $fn=8);\n        translate([33,-1.5,-3])\n            cylinder(h=1, r=0.5, $fn=8);\n        \n        // Eyes\n        translate([28,5,2])\n            sphere(1, $fn=8);\n        translate([28,-5,2])\n            sphere(1, $fn=8);\n        \n        // Ears\n        translate([25,6,8])\n            rotate([0,0,-30])\n            ear();\n        translate([25,-6,8])\n            rotate([0,0,30])\n            mirror([0,1,0])\n            ear();\n        \n        // Horns\n        translate([22,3,10])\n            horn();\n        translate([22,-3,10])\n            mirror([0,1,0])\n            horn();\n    }\n}\n\n// Assembly\nunion() {\n    // Body\n    body();\n    \n    // Head\n    head();\n    \n    // Legs - array for positioning\n    for (x = [-15, 15])\n        for (y = [-8, 8]) {\n            translate([x,y,-15])\n                leg();\n        }\n    \n    // Tail\n    translate([-25,0,5])\n        rotate([0,30,0])\n        tail();\n}",
    "renders": true
  },
  {
    "animal": "centipede",
    "openscad_code": "// Centipede - Realistic Style, Medium Complexity\n// 3D printable model ~80mm long\n\n// Body parameters\nbody_segments = 20;\nsegment_length = 3.5;\nsegment_width = 4;\nsegment_height = 3;\nbody_curve = 30; // degrees of overall curve\n\n// Head parameters\nhead_length = 8;\nhead_width = 6;\nhead_height = 5;\n\n// Leg parameters\nlegs_per_side = 2;\nleg_length = 10;\nleg_width = 1.5;\nleg_thickness = 1;\n\n// Antenna parameters\nantenna_length = 12;\nantenna_thickness = 0.8;\n\n// Body wall thickness for 3D printing\nwall_thickness = 1.2;\n\nmodule centipede_body() {\n    // Create main body with segments\n    for (i = [0:body_segments-1]) {\n        // Calculate position along curved body\n        angle = body_curve * (i - body_segments/2) / body_segments;\n        x = i * segment_length * cos(angle) * 0.9;\n        y = i * segment_length * sin(angle) * 0.3;\n        z = 0;\n        \n        // Create segment with realistic ellipsoid shape\n        translate([x, y, z]) {\n            rotate([0, angle, 0]) {\n                // Main segment body\n                scale([1, 0.8, 0.7]) \n                    sphere(d=segment_width, $fn=20);\n                \n                // Segment ridges for texture\n                for (j = [0:2]) {\n                    translate([0, 0, -segment_height/2 + j*1.5])\n                        scale([1, 1.1, 0.2])\n                            sphere(d=segment_width*0.9, $fn=16);\n                }\n            }\n        }\n    }\n}\n\nmodule centipede_head() {\n    // Position head at front\n    translate([-head_length/2 - 5, 0, 0]) {\n        // Main head shape - elongated oval\n        scale([1.3, 1, 1])\n            sphere(d=head_width, $fn=20);\n        \n        // Mandibles\n        translate([head_length/2, head_width/3, -head_height/3])\n            rotate([0, -20, 30])\n                scale([0.3, 0.3, 1])\n                    cylinder(h=leg_length/2, d=leg_width*1.5, $fn=8);\n        \n        translate([head_length/2, -head_width/3, -head_height/3])\n            rotate([0, 20, -30])\n                scale([0.3, 0.3, 1])\n                    cylinder(h=leg_length/2, d=leg_width*1.5, $fn=8);\n        \n        // Eyes\n        translate([head_length/2 - 2, head_width/3, head_height/4])\n            sphere(d=1.5, $fn=10);\n        \n        translate([head_length/2 - 2, -head_width/3, head_height/4])\n            sphere(d=1.5, $fn=10);\n    }\n}\n\nmodule centipede_antennae() {\n    // Left antenna\n    translate([-head_length - 2, head_width/2, head_height/4]) {\n        rotate([0, 20, -20])\n            cylinder(h=antenna_length, d=antenna_thickness, $fn=8);\n        // Antenna segments\n        for (k = [1:3]) {\n            translate([0, 0, k*antenna_length/4])\n                rotate([0, 0, k*15])\n                    cylinder(h=antenna_length/4, d=antenna_thickness, $fn=8);\n        }\n    }\n    \n    // Right antenna\n    translate([-head_length - 2, -head_width/2, head_height/4]) {\n        rotate([0, 20, 20])\n            cylinder(h=antenna_length, d=antenna_thickness, $fn=8);\n        for (k = [1:3]) {\n            translate([0, 0, k*antenna_length/4])\n                rotate([0, 0, -k*15])\n                    cylinder(h=antenna_length/4, d=antenna_thickness, $fn=8);\n        }\n    }\n}\n\nmodule centipede_leg(side, segment) {\n    // Calculate segment position\n    angle = body_curve * (segment - body_segments/2) / body_segments;\n    x = segment * segment_length * cos(angle) * 0.9;\n    y = segment * segment_length * sin(angle) * 0.3;\n    \n    // Create leg with joints\n    translate([x, y, 0]) {\n        rotate([0, angle, 0]) {\n            // Coxa (first leg segment)\n            translate([0, side * segment_width/2, -segment_height/2]) {\n                rotate([0, 90, 0])\n                    cylinder(h=leg_width, d=leg_thickness, $fn=8);\n                \n                // Main leg segments\n                translate([side * leg_width/2, 0, -leg_width/2]) {\n                    rotate([0, 30, 0])\n                        cylinder(h=leg_length/3, d=leg_thickness, $fn=8);\n                    \n                    translate([0, 0, -leg_length/3])\n                        rotate([0, -30, 0])\n                            cylinder(h=leg_length/3, d=leg_thickness*0.8, $fn=8);\n                    \n                    translate([0, 0, -2*leg_length/3])\n                        rotate([0, -30, 0])\n                            cylinder(h=leg_length/3, d=leg_thickness*0.6, $fn=8);\n                }\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Body segments\n    centipede_body();\n    \n    // Head\n    centipede_head();\n    \n    // Antennae\n    centipede_antennae();\n    \n    // Legs - create pairs for each segment\n    for (segment = [2:3:body_segments-1]) {\n        centipede_leg(1, segment);  // Right side\n        centipede_leg(-1, segment); // Left side\n    }\n}",
    "renders": true
  },
  {
    "animal": "chameleon",
    "openscad_code": "$fa = 2;\n$fs = 0.5;\n\nmodule body() {\n    // Main torso\n    hull() {\n        translate([-5,0,3]) sphere(d=8);\n        translate([20,0,3]) sphere(d=12);\n        translate([30,0,0]) sphere(d=10);\n    }\n    \n    // Belly bulge\n    translate([15,-7,0]) rotate([90,0,0]) cylinder(h=20,d1=10,d2=12,$fn=20);\n}\n\nmodule head() {\n    // Skull\n    translate([-8,0,3]) rotate([0,-10,0]) scale([1.2,0.8,0.9]) sphere(d=10);\n    \n    // Snout\n    translate([-14,0,2]) rotate([0,-20,0]) scale([1.5,0.6,0.6]) sphere(d=8);\n    \n    // Eye sockets\n    difference() {\n        translate([-10,4.5,5]) sphere(d=5);\n        translate([-10.5,6,5.5]) sphere(d=2.5);\n    }\n    difference() {\n        translate([-10,-4.5,5]) sphere(d=5);\n        translate([-10.5,-6,5.5]) sphere(d=2.5);\n    }\n    \n    // Eyeballs\n    translate([-10.5,6,5.5]) sphere(d=2);\n    translate([-10.5,-6,5.5]) sphere(d=2);\n    \n    // Casque (head crest)\n    hull() {\n        translate([-12,0,8]) sphere(d=3);\n        translate([-5,0,10]) sphere(d=2);\n    }\n}\n\nmodule limbs() {\n    // Front left leg\n    translate([0,6,0]) {\n        rotate([0,0,20]) {\n            cylinder(h=12,d=4,$fn=8);\n            translate([0,0,12]) rotate([0,30,0]) cylinder(h=10,d=3,$fn=8);\n            translate([0,0,22]) rotate([0,60,0]) cylinder(h=8,d=2.5,$fn=8);\n        }\n    }\n    \n    // Front right leg\n    translate([0,-6,0]) {\n        rotate([0,0,-20]) {\n            cylinder(h=12,d=4,$fn=8);\n            translate([0,0,12]) rotate([0,30,0]) cylinder(h=10,d=3,$fn=8);\n            translate([0,0,22]) rotate([0,60,0]) cylinder(h=8,d=2.5,$fn=8);\n        }\n    }\n    \n    // Back left leg\n    translate([25,8,2]) {\n        rotate([0,0,-30]) {\n            cylinder(h=15,d=5,$fn=8);\n            translate([0,0,15]) rotate([0,-20,0]) cylinder(h=12,d=4,$fn=8);\n            translate([0,0,27]) rotate([0,-40,0]) cylinder(h=10,d=3,$fn=8);\n        }\n    }\n    \n    // Back right leg\n    translate([25,-8,2]) {\n        rotate([0,0,30]) {\n            cylinder(h=15,d=5,$fn=8);\n            translate([0,0,15]) rotate([0,-20,0]) cylinder(h=12,d=4,$fn=8);\n            translate([0,0,27]) rotate([0,-40,0]) cylinder(h=10,d=3,$fn=8);\n        }\n    }\n}\n\nmodule tail() {\n    // Prehensile tail\n    for(i=[0:36]) {\n        translate([30 + i*1.2, 0, -i*0.8]) rotate([i*2,0,0]) \n            scale([1 - i*0.01, 1 - i*0.01, 1]) sphere(d=10 - i*0.2);\n    }\n}\n\nmodule feet() {\n    // Toes for each limb\n    for(side=[-1,1]) {\n        // Front feet\n        translate([0,side*8,0]) {\n            for(angle=[-30,0,30]) {\n                rotate([0,0,angle]) translate([0,side*2,8]) \n                    scale([0.3,0.3,1]) cylinder(h=4,d=2,$fn=6);\n            }\n        }\n        \n        // Back feet\n        translate([25,side*10,0]) {\n            for(angle=[-30,0,30]) {\n                rotate([0,0,angle]) translate([0,side*2.5,10]) \n                    scale([0.4,0.4,1]) cylinder(h=5,d=2.5,$fn=6);\n            }\n        }\n    }\n}\n\nmodule chameleon() {\n    union() {\n        body();\n        head();\n        limbs();\n        tail();\n        feet();\n    }\n}\n\n// Scale to 80mm length\nscale(0.8) chameleon();",
    "renders": true
  },
  {
    "animal": "chamois",
    "openscad_code": "// Chamois (Rupicapra rupicapra) – medium-complexity realistic model\n// 3D-printable, no overhangs ≥45°, wall thickness 1.2 mm\n\nmodule rounded_cylinder(h, r1, r2, vertical=true) {\n    // Helper: cylinder with half-sphere ends for organic joints\n    $fn = 16;\n    if (vertical) {\n        translate([0,0,h/2]) cylinder(h=h, r1=r1, r2=r2);\n        translate([0,0,h]) sphere(r2);\n        translate([0,0,0]) sphere(r1);\n    } else {\n        rotate([0,90,0]) rounded_cylinder(h, r1, r2, vertical=true);\n    }\n}\n\nmodule leg(x, y, angle, scale=1) {\n    translate([x,y,0]) {\n        rotate([0,0,angle]) {\n            scale([scale,scale,scale]) {\n                // Upper leg\n                rounded_cylinder(10, 3.2, 2.2);\n                // Lower leg\n                translate([0,0,10]) rotate([10,0,0]) rounded_cylinder(12, 2.2, 1.8);\n                // Hoof\n                translate([0,0,22]) cylinder(h=4, r1=1.8, r2=2.2, $fn=8);\n            }\n        }\n    }\n}\n\nmodule horn() {\n    // Curved backward horn\n    for (i=[0:3]) {\n        rotate([0,0,-i*8]) translate([0,i*0.8,0]) rotate([15,0,0]) \n            scale([1,1,0.8]) cylinder(h=2, r1=5-i*0.3, r2=4.7-i*0.3, $fn=6);\n    }\n    translate([0,0,8]) sphere(4, $fn=8);\n}\n\nmodule ear() {\n    rotate([0,20,0]) scale([0.6,1,1]) sphere(4, $fn=12);\n}\n\nmodule tail() {\n    translate([0,-18,4]) rotate([30,0,0]) scale([0.8,1,1.2]) sphere(3, $fn=10);\n}\n\ndifference() {\n    // Main body\n    union() {\n        // Torso\n        scale([1,1.5,1]) sphere(12, $fn=32);\n        \n        // Neck\n        translate([0,8,8]) rotate([-30,0,0]) rounded_cylinder(15, 5, 3.5);\n        \n        // Head\n        translate([0,18,10]) rotate([-20,0,0]) scale([0.7,1.2,0.8]) sphere(8, $fn=20);\n        \n        // Rump\n        translate([0,-10,0]) sphere(10, $fn=20);\n        \n        // Legs\n        leg(6, 4, 30, 1);   // front right\n        leg(-6, 4, -30, 1); // front left\n        leg(5, -8, 25, 0.9); // rear right\n        leg(-5, -8, -25, 0.9); // rear left\n        \n        // Horns\n        translate([3,18,14]) horn();\n        translate([-3,18,14]) mirror([1,0,0]) horn();\n        \n        // Ears\n        translate([4,19,16]) ear();\n        translate([-4,19,16]) mirror([1,0,0]) ear();\n        \n        // Tail\n        tail();\n    }\n    \n    // Eye sockets\n    translate([2.5,21,11]) rotate([0,0,-15]) sphere(1.5, $fn=8);\n    translate([-2.5,21,11]) rotate([0,0,15]) sphere(1.5, $fn=8);\n    \n    // Nostrils\n    translate([1,21,7]) rotate([0,-20,0]) cylinder(h=2, r=0.8, $fn=6);\n    translate([-1,21,7]) rotate([0,-20,0]) cylinder(h=2, r=0.8, $fn=6);\n}\n\n// Ground clearance base\ndifference() {\n    translate([0,0,-2]) cube([40,50,2], center=true);\n    translate([0,0,-1.9]) cube([38,48,2], center=true);\n}",
    "renders": true
  },
  {
    "animal": "cheetah",
    "openscad_code": "// Cheetah - Medium complexity realistic style\n// Height ~35mm, Length ~80mm, Width ~25mm\n\n// Main body\nmodule body() {\n    // Torso - elongated oval\n    scale([1.8, 0.7, 0.6])\n        sphere(r=10, $fn=20);\n    \n    // Chest area\n    translate([5, 0, -2])\n        scale([1.2, 0.8, 0.7])\n            sphere(r=8, $fn=20);\n}\n\n// Head with snout\nmodule head() {\n    union() {\n        // Main head\n        translate([-30, 0, 8])\n            scale([0.9, 0.7, 0.7])\n                sphere(r=8, $fn=20);\n        \n        // Snout\n        translate([-38, 0, 6])\n            scale([1.2, 0.5, 0.4])\n                sphere(r=5, $fn=20);\n        \n        // Ears\n        translate([-32, 6, 12])\n            rotate([30, 0, 0])\n                cylinder(h=3, r1=2.5, r2=1.5, $fn=8);\n        translate([-32, -6, 12])\n            rotate([30, 0, 0])\n                cylinder(h=3, r1=2.5, r2=1.5, $fn=8);\n    }\n}\n\n// Leg module\nmodule leg(length, thickness) {\n    // Upper leg\n    cylinder(h=length*0.6, r=thickness, $fn=12);\n    \n    // Lower leg\n    translate([0, 0, -length*0.6])\n        rotate([20, 0, 0])\n            cylinder(h=length*0.5, r=thickness*0.8, $fn=12);\n    \n    // Paw\n    translate([0, 0, -length*0.95])\n        scale([1.2, 1, 0.7])\n            sphere(r=thickness*0.9, $fn=12);\n}\n\n// Tail\nmodule tail() {\n    // Base of tail\n    translate([18, 0, 3])\n        rotate([-20, 0, 0])\n            cylinder(h=5, r1=3.5, r2=2.5, $fn=12);\n    \n    // Tail segments\n    for(i=[1:5]) {\n        translate([18 + i*6, 0, 3 - i*1.5])\n            rotate([-20 - i*5, 0, 0])\n                cylinder(h=6, r1=2.5 - i*0.3, r2=2.2 - i*0.3, $fn=12);\n    }\n}\n\n// Spot pattern\nmodule spots() {\n    // Body spots\n    for(x=[-5:5:20]) {\n        for(y=[-5:5:5]) {\n            translate([x, y, 0])\n                scale([1, 0.7, 0.1])\n                    sphere(r=1.5, $fn=8);\n        }\n    }\n    \n    // Tail spots\n    for(i=[1:3:15]) {\n        translate([20 + i*2, 0, 1 - i*0.5])\n            scale([0.8, 0.6, 0.1])\n                sphere(r=1, $fn=8);\n    }\n}\n\n// Assemble the cheetah\nunion() {\n    // Main body\n    body();\n    \n    // Head\n    head();\n    \n    // Tail\n    tail();\n    \n    // Front legs\n    translate([-15, 7, -5])\n        rotate([15, 0, 0])\n            leg(15, 2.5);\n    translate([-15, -7, -5])\n        rotate([15, 0, 0])\n            leg(15, 2.5);\n    \n    // Hind legs\n    translate([10, 5, -5])\n        rotate([15, 0, 5])\n            leg(18, 3);\n    translate([10, -5, -5])\n        rotate([15, 0, -5])\n            leg(18, 3);\n    \n    // Spots pattern\n    color(\"black\") spots();\n}\n\n// Eyes\ntranslate([-39, 2.5, 7])\n    sphere(r=1, $fn=8);\ntranslate([-39, -2.5, 7])\n    sphere(r=1, $fn=8);\n\n// Nose\ntranslate([-42, 0, 6])\n    sphere(r=0.8, $fn=8);",
    "renders": true
  },
  {
    "animal": "chicken",
    "openscad_code": "// Chicken - Realistic Medium Complexity\n// 3D printable chicken model ~70mm long\n\n// Main parameters\nbody_len = 40;\nbody_h = 25;\nbody_w = 30;\n\nhead_len = 18;\nhead_h = 15;\nhead_w = 14;\n\nleg_len = 20;\nleg_r = 3;\nfoot_len = 12;\nfoot_w = 6;\n\nwing_len = 25;\nwing_w = 12;\nwing_t = 2;\n\ntail_len = 18;\ntail_h = 15;\n\nbeak_len = 8;\nbeak_w = 4;\nbeak_h = 3;\n\ncomb_h = 6;\ncomb_w = 3;\n\neye_r = 2;\n\n// Wall thickness for printing\nwall = 1.5;\n\nmodule chicken() {\n    union() {\n        // Body - egg-like shape\n        difference() {\n            scale([1, 0.8, 1]) sphere(d=body_w);\n            translate([0, 0, -body_h/2]) cube([body_len, body_w, body_h], center=true);\n        }\n        translate([0, 0, -body_h/4]) cube([body_len*0.9, body_w*0.7, body_h*0.8], center=true);\n        \n        // Head\n        translate([body_len/2 + head_len/3, 0, body_h/3]) \n            scale([1.2, 1, 1]) sphere(d=head_w);\n        \n        // Beak\n        translate([body_len/2 + head_len/2 + beak_len/2, 0, body_h/3]) \n            rotate([0, -20, 0]) \n            scale([1, 0.7, 0.7]) \n            cylinder(h=beak_len, r1=beak_w/2, r2=0);\n        \n        // Comb - three parts\n        for(i = [-1:1]) {\n            translate([body_len/2 + head_len/2, i*comb_w, body_h/3 + head_h/2]) \n                rotate([90, 0, 0]) \n                cylinder(h=comb_h, r=comb_w/2);\n        }\n        \n        // Wattles\n        translate([body_len/2 + head_len/2, -head_w/3, body_h/3 - head_h/3]) \n            scale([1, 0.5, 0.7]) sphere(d=6);\n        translate([body_len/2 + head_len/2, head_w/3, body_h/3 - head_h/3]) \n            scale([1, 0.5, 0.7]) sphere(d=6);\n        \n        // Eyes\n        translate([body_len/2 + head_len/3, -head_w/3, body_h/3 + head_h/4]) \n            sphere(d=eye_r);\n        translate([body_len/2 + head_len/3, head_w/3, body_h/3 + head_h/4]) \n            sphere(d=eye_r);\n        \n        // Wings - curved shape\n        for(side = [-1, 1]) {\n            translate([0, side*body_w/3, body_h/4]) {\n                rotate([0, 0, side*10]) {\n                    rotate([0, 90, 0]) {\n                        // Main wing\n                        difference() {\n                            scale([1, 1.2, 1]) cylinder(h=wing_len, r=wing_w/2);\n                            translate([0, 0, -wing_t]) \n                                scale([0.9, 1.1, 1]) \n                                cylinder(h=wing_len+2, r=wing_w/2-wing_t);\n                        }\n                        \n                        // Wing feathers\n                        for(i = [0:2]) {\n                            translate([0, 0, -wing_len/2 + i*wing_len/3]) \n                                rotate([0, i*15-15, 0]) \n                                scale([0.3, 1, 0.1]) \n                                cube([wing_len/3, wing_w, wing_t], center=true);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Tail - fan shape\n        for(i = [-2:2]) {\n            rotate([0, 0, i*20]) {\n                translate([-body_len/2 - tail_len/2, 0, body_h/3]) \n                    rotate([0, -30, 0]) \n                    scale([1, 0.3, 1]) \n                    cylinder(h=tail_len, r1=tail_h/2, r2=0);\n            }\n        }\n        \n        // Legs\n        for(side = [-1, 1]) {\n            translate([0, side*body_w/4, -body_h/2]) {\n                // Upper leg\n                cylinder(h=leg_len/2, r=leg_r);\n                \n                // Lower leg\n                translate([0, 0, -leg_len/2]) {\n                    rotate([15, 0, 0]) {\n                        cylinder(h=leg_len/2, r=leg_r*0.8);\n                        \n                        // Foot\n                        translate([0, 0, -leg_len/2 - foot_len/2]) {\n                            rotate([90, 0, 0]) {\n                                // Main foot\n                                cube([foot_len, foot_w, leg_r*0.8], center=true);\n                                \n                                // Toes\n                                for(j = [-1, 0, 1]) {\n                                    translate([foot_len/2, j*foot_w/3, -leg_r/2]) \n                                        cube([foot_len/3, foot_w/4, leg_r*0.6]);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Generate chicken centered at origin\ntranslate([0, 0, 25]) \n    chicken();",
    "renders": true
  },
  {
    "animal": "chiffchaff",
    "openscad_code": "// Chiffchaff - medium complexity realistic style\n// Overall dimensions ~70mm length\n\n$fn = 32;\n\nmodule bird_body() {\n    // Main body - elongated sphere\n    translate([0, 0, 15]) {\n        scale([1.4, 1, 1.2]) sphere(10);\n    }\n    \n    // Tail - tapered cylinder\n    translate([-17, 0, 12]) {\n        rotate([0, 20, 0]) {\n            cylinder(h=20, r1=6, r2=3);\n        }\n    }\n}\n\nmodule head() {\n    // Head sphere\n    translate([12, 0, 20]) {\n        sphere(7);\n    }\n    \n    // Beak - cone\n    translate([19, 0, 20]) {\n        rotate([0, -10, 0]) {\n            cylinder(h=8, r1=1.5, r2=0);\n        }\n    }\n    \n    // Eye\n    translate([14, 3.5, 21]) {\n        sphere(1.2);\n    }\n    translate([14, -3.5, 21]) {\n        sphere(1.2);\n    }\n}\n\nmodule wing() {\n    // Main wing - elliptical shape\n    translate([0, 9, 18]) {\n        rotate([0, 0, -20]) {\n            scale([1.2, 0.3, 1]) {\n                sphere(7);\n            }\n        }\n    }\n    \n    // Wing tip\n    translate([5, 12, 17]) {\n        rotate([0, -30, -30]) {\n            scale([0.8, 0.2, 0.6]) {\n                sphere(4);\n            }\n        }\n    }\n}\n\nmodule legs() {\n    // Left leg\n    translate([5, 2, 0]) {\n        cylinder(h=12, r=1);\n        translate([0, 0, 12]) {\n            rotate([0, 90, 0]) {\n                cylinder(h=4, r=0.8);\n            }\n        }\n    }\n    \n    // Right leg\n    translate([5, -2, 0]) {\n        cylinder(h=12, r=1);\n        translate([0, 0, 12]) {\n            rotate([0, 90, 0]) {\n                cylinder(h=4, r=0.8);\n            }\n        }\n    }\n}\n\nmodule feathers() {\n    // Tail feathers layers\n    for(i = [0:2]) {\n        translate([-16 - i*2, 0, 10 + i*2]) {\n            rotate([0, 25 - i*5, 0]) {\n                scale([1, 0.1, 0.3]) {\n                    cylinder(h=15 - i*2, r1=5 - i, r2=2 - i*0.5);\n                }\n            }\n        }\n    }\n    \n    // Wing feather detail\n    for(i = [0:3]) {\n        translate([2 + i*3, 9 + i*0.5, 18 - i*1.5]) {\n            rotate([0, -20 + i*5, -20 + i*10]) {\n                scale([0.6, 0.05, 0.3]) {\n                    sphere(3 + i);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    bird_body();\n    head();\n    \n    // Left wing\n    wing();\n    \n    // Right wing (mirrored)\n    mirror([0, 1, 0]) wing();\n    \n    legs();\n    feathers();\n}",
    "renders": true
  },
  {
    "animal": "chihuahua",
    "openscad_code": "// Chihuahua - Realistic style, medium complexity\n// Dimensions: ~65mm long, ~45mm tall, ~30mm wide\n\n$fn = 36;\n\nmodule body() {\n    // Main torso\n    difference() {\n        scale([1.2, 0.7, 0.9]) sphere(d=32);\n        translate([-16, -12, 14]) cube([32, 24, 14]);\n    }\n    \n    // Chest protrusion\n    translate([0, -10, -8]) scale([0.8, 0.5, 0.6]) sphere(d=20);\n}\n\nmodule head() {\n    translate([-22, 0, 8]) rotate([0, 10, 0]) {\n        // Skull\n        difference() {\n            scale([0.9, 0.7, 1.1]) sphere(d=22);\n            // Eye sockets\n            for (x = [-1, 1]) {\n                translate([x * 6, 8, 4]) sphere(d=6);\n            }\n            // Nose cavity\n            translate([10, 0, -2]) sphere(d=4);\n        }\n        \n        // Snout\n        translate([8, 0, -6]) scale([1.2, 0.6, 0.5]) sphere(d=12);\n        \n        // Nose\n        translate([14, 0, -3]) scale([0.5, 0.7, 0.4]) sphere(d=8);\n        \n        // Ears\n        for (x = [-1, 1]) {\n            translate([4, x * 12, 8]) rotate([0, 0, x * -20]) \n                scale([0.2, 1, 2]) cylinder(h=12, d1=6, d2=4);\n        }\n    }\n}\n\nmodule legs() {\n    // Front legs\n    for (x = [-1, 1]) {\n        translate([x * 6, -6, -12]) {\n            // Upper leg\n            rotate([15, 0, x * 10]) \n                cylinder(h=15, d1=8, d2=6);\n            \n            // Lower leg\n            translate([0, 0, -15]) rotate([-30, 0, 0])\n                cylinder(h=12, d1=6, d2=4);\n                \n            // Paw\n            translate([0, 0, -27]) sphere(d=6);\n        }\n    }\n    \n    // Back legs\n    for (x = [-1, 1]) {\n        translate([x * 8, 6, -10]) {\n            // Upper leg\n            rotate([0, 0, x * -20]) \n                scale([0.8, 1, 1]) sphere(d=10);\n            \n            // Lower leg\n            translate([0, 0, -10]) rotate([30, 0, 0])\n                cylinder(h=10, d1=6, d2=4);\n                \n            // Paw\n            translate([0, 0, -20]) sphere(d=6);\n        }\n    }\n}\n\nmodule tail() {\n    translate([18, 0, -2]) rotate([0, 0, 30]) {\n        // Tail base\n        cylinder(h=8, d1=6, d2=4);\n        \n        // Tail curve\n        translate([0, 0, -8]) rotate([20, 0, 0])\n            scale([0.8, 0.8, 1]) cylinder(h=12, d1=4, d2=2);\n    }\n}\n\nmodule eyes() {\n    for (x = [-1, 1]) {\n        translate([-22 + x * 6, 8, 4]) rotate([0, 10, 0])\n            sphere(d=3);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    legs();\n    tail();\n    eyes();\n}",
    "renders": true
  },
  {
    "animal": "chimpanzee",
    "openscad_code": "// Chimpanzee – medium-complexity realistic style\n// Overall height ≈ 75 mm, printable in one piece (no severe overhangs)\n\n// Wall thickness / printability factor\nth = 1.2;\n\nmodule roundedBox(s, r) {\n    // simple rounded box for body parts\n    hull() {\n        for (dx = [0, s.x-2*r], dy = [0, s.y-2*r], dz = [0, s.z-2*r])\n            translate([dx+r, dy+r, dz+r]) sphere(r);\n    }\n}\n\nmodule head() {\n    // cranium\n    translate([0,0,62]) rotate([0,-10,0]) union() {\n        color(\"BurlyWood\") difference() {\n            scale([1, 0.9, 1]) sphere(10);\n            // eye sockets\n            translate([4, 5, 3]) sphere(2.5);\n            translate([-4, 5, 3]) sphere(2.5);\n            // mouth cavity\n            translate([0, 6, -2]) scale([1.2,1,0.8]) sphere(3);\n        }\n        // muzzle\n        translate([0, 7, -2]) scale([1.2, 1.6, 1]) sphere(6);\n        // ears\n        translate([9, 0, 3]) rotate([0,0,20]) scale([1,2.5,0.7]) sphere(3);\n        translate([-9, 0, 3]) rotate([0,0,-20]) scale([1,2.5,0.7]) sphere(3);\n    }\n}\n\nmodule torso() {\n    // rib-cage like rounded box\n    translate([0,0,30]) rotate([0,0,0]) color(\"SaddleBrown\")\n        roundedBox([22, 18, 38], 6);\n}\n\nmodule arm(side) { // side = 1 right, -1 left\n    // shoulder\n    translate([side*11,0,50]) rotate([0,0,side*30]) union() {\n        color(\"SaddleBrown\") sphere(5);\n        // upper arm\n        translate([0,0,-12]) rotate([30,0,0])\n            cylinder(h=18, r1=4, r2=3.5, $fn=16);\n        // lower arm\n        translate([0,0,-12-18]) rotate([20,0,0])\n            cylinder(h=16, r1=3.5, r2=3, $fn=16);\n        // hand\n        translate([0,0,-12-18-16]) rotate([10,0,0]) union() {\n            scale([1.2,0.8,0.6]) sphere(4);\n            // simplified fingers as small cylinders\n            for(i=[-1:1])\n                translate([side*2*i,0,-2]) rotate([0,side*20,0])\n                    cylinder(h=5, r=1.2, $fn=8);\n        }\n    }\n}\n\nmodule leg(side) { // side = 1 right, -1 left\n    translate([side*7,0,8]) rotate([0,0,side*10]) union() {\n        // thigh\n        color(\"SaddleBrown\") cylinder(h=20, r1=5, r2=4.5, $fn=16);\n        // shin\n        translate([0,0,-20]) rotate([15,0,0])\n            cylinder(h=18, r1=4.5, r2=3.5, $fn=16);\n        // foot\n        translate([0,0,-20-18]) rotate([0,0,0]) union() {\n            scale([1.3,2,0.7]) sphere(4);\n            for(i=[-1:1])\n                translate([side*i*2,3,0]) rotate([0,20,0])\n                    cylinder(h=4, r=1.2, $fn=8);\n        }\n    }\n}\n\n// assembly\nunion() {\n    head();\n    torso();\n    arm(1);\n    arm(-1);\n    leg(1);\n    leg(-1);\n}",
    "renders": true
  },
  {
    "animal": "chinchilla",
    "openscad_code": "// Chinchilla - Realistic Medium Complexity\n// Size: ~80mm length, 40mm height\n\n$fn = 36;\n\nmodule chinchilla() {\n    // Body - oval shape\n    difference() {\n        scale([1.3, 0.8, 1]) sphere(d=35);\n        translate([0, 0, -18]) cube([50, 50, 20], center=true);\n    }\n    \n    // Head\n    translate([-25, 0, 12]) {\n        difference() {\n            sphere(d=22);\n            // Eye sockets\n            translate([8, 8, 2]) sphere(d=6);\n            translate([8, -8, 2]) sphere(d=6);\n        }\n        \n        // Ears\n        translate([0, 8, 8]) rotate([0, 30, 0]) \n            scale([0.6, 0.3, 1.5]) sphere(d=8);\n        translate([0, -8, 8]) rotate([0, -30, 0]) \n            scale([0.6, 0.3, 1.5]) sphere(d=8);\n        \n        // Nose\n        translate([11, 0, -2]) sphere(d=3);\n        \n        // Whiskers\n        for(i=[-1,1]) {\n            translate([8, i*5, -3]) rotate([0, 0, i*30]) \n                cylinder(h=12, d=0.8);\n            translate([8, i*5, -3]) rotate([0, 0, i*15]) \n                cylinder(h=10, d=0.8);\n        }\n    }\n    \n    // Tail - bushy\n    translate([20, 0, 5]) rotate([0, 0, 20]) {\n        for(i=[0:30:150]) {\n            rotate([0, 0, i]) \n                translate([0, 0, -i/5]) \n                scale([0.8, 1, 0.8]) \n                sphere(d=12 - i/10);\n        }\n    }\n    \n    // Front legs\n    for(side=[-1,1]) {\n        translate([-15, side*10, -12]) {\n            // Upper leg\n            rotate([0, -side*20, 0]) cylinder(h=12, d=6);\n            // Paw\n            translate([0, 0, -7]) sphere(d=7);\n            // Toes\n            for(j=[-1,0,1]) {\n                translate([j*2, 0, -12]) sphere(d=3);\n            }\n        }\n    }\n    \n    // Hind legs\n    for(side=[-1,1]) {\n        translate([15, side*12, -12]) {\n            // Thigh\n            rotate([0, side*30, 0]) cylinder(h=15, d=8);\n            // Lower leg\n            translate([0, 0, -9]) rotate([0, side*20, 0]) \n                cylinder(h=10, d=6);\n            // Paw\n            translate([0, 0, -16]) sphere(d=8);\n            // Toes\n            for(j=[-1.5,0,1.5]) {\n                translate([j*2.5, 0, -21]) sphere(d=3.5);\n            }\n        }\n    }\n    \n    // Eyes\n    translate([-25, 8, 12]) sphere(d=4);\n    translate([-25, -8, 12]) sphere(d=4);\n    translate([-28, 8, 13]) sphere(d=2);\n    translate([-28, -8, 13]) sphere(d=2);\n}\n\n// Main assembly\nchinchilla();",
    "renders": true
  },
  {
    "animal": "chipmunk",
    "openscad_code": "// Chipmunk - realistic style, medium complexity\n// Designed for 3D printing (no overhangs, 2mm walls)\n\n$fn = 32;\n\nmodule chipmunk() {\n    // Body - main torso\n    color(\"saddlebrown\") {\n        translate([0, 0, 10])\n            scale([1.2, 0.8, 1])\n            sphere(d=30);\n        \n        // Belly lighter color\n        color(\"burlywood\") {\n            translate([0, -10, 8])\n                scale([0.8, 0.6, 0.6])\n                sphere(d=25);\n        }\n    }\n    \n    // Head\n    color(\"saddlebrown\") {\n        translate([0, 20, 25])\n            sphere(d=20);\n    }\n    \n    // Snout\n    color(\"burlywood\") {\n        translate([0, 28, 24])\n            scale([0.7, 0.9, 0.6])\n            sphere(d=12);\n    }\n    \n    // Nose\n    color(\"black\") {\n        translate([0, 32, 25])\n            sphere(d=3);\n    }\n    \n    // Eyes\n    color(\"black\") {\n        for(x=[-5, 5]) {\n            translate([x, 22, 28])\n                sphere(d=3);\n        }\n    }\n    \n    // Ears\n    color(\"saddlebrown\") {\n        for(x=[-8, 8]) {\n            translate([x, 15, 35]) {\n                rotate([0, 20, 0])\n                    scale([0.3, 1, 0.5])\n                    cylinder(d1=10, d2=6, h=8);\n            }\n        }\n    }\n    \n    // Tail\n    color(\"saddlebrown\") {\n        translate([-15, -15, 12]) {\n            rotate([0, 0, -30])\n                scale([0.5, 0.5, 1])\n                cylinder(d=12, h=35);\n            \n            translate([-25, -30, 15]) {\n                rotate([0, 0, -45])\n                    scale([0.4, 0.4, 0.8])\n                    cylinder(d=10, h=30);\n            }\n        }\n    }\n    \n    // Legs\n    module leg(pos, angle) {\n        translate(pos) {\n            rotate([angle, 0, 0]) {\n                color(\"saddlebrown\") {\n                    cylinder(d=6, h=10);\n                    translate([0, 0, -8])\n                        scale([1.5, 1, 0.5])\n                        sphere(d=8);\n                }\n            }\n        }\n    }\n    \n    // Front legs\n    leg([8, 10, 0], 0);\n    leg([-8, 10, 0], 0);\n    \n    // Back legs\n    leg([10, -10, 0], 0);\n    leg([-10, -10, 0], 0);\n    \n    // Stripes on back\n    color(\"darkgoldenrod\") {\n        for(y=[-5, 0, 5]) {\n            translate([0, y, 22]) {\n                scale([0.1, 2, 0.3])\n                    cube([30, 3, 3], center=true);\n            }\n        }\n    }\n    \n    // Cheek pouches\n    color(\"burlywood\") {\n        for(x=[-7, 7]) {\n            translate([x, 25, 22])\n                sphere(d=6);\n        }\n    }\n}\n\n// Main assembly\nchipmunk();",
    "renders": true
  },
  {
    "animal": "cicada",
    "openscad_code": "// Cicada - Realistic style, medium complexity\n// 3D printable model using only basic primitives\n\n// Body dimensions\nbody_length = 50;\nbody_width = 20;\nbody_height = 15;\n\n// Head dimensions\nhead_length = 12;\nhead_width = 15;\nhead_height = 10;\n\n// Wing dimensions\nwing_length = 40;\nwing_width = 15;\nwing_thickness = 1;\n\n// Leg dimensions\nleg_thickness = 2;\nleg_length = 12;\n\n// Overall scaling\nscale_factor = 1.5;\n\n// Main body module\nmodule cicada_body() {\n    // Thorax\n    translate([0, 0, 0])\n    scale([1, 0.8, 0.7])\n    sphere(d=body_height);\n    \n    // Abdomen\n    translate([-body_length/2, 0, -2])\n    scale([1.8, 1, 0.8])\n    sphere(d=body_height);\n    \n    // Segments\n    for (i = [1:5]) {\n        translate([-i*5, 0, -3 - i*0.5])\n        scale([1.5 - i*0.1, 1 - i*0.05, 0.7 - i*0.05])\n        sphere(d=body_height - 2);\n    }\n}\n\n// Head module\nmodule cicada_head() {\n    // Main head\n    translate([head_length + 8, 0, 2])\n    scale([1.2, 1, 0.9])\n    sphere(d=head_height);\n    \n    // Eyes\n    translate([head_length + 12, head_width/2, 2])\n    sphere(d=6);\n    \n    translate([head_length + 12, -head_width/2, 2])\n    sphere(d=6);\n    \n    // Proboscis\n    translate([head_length + 15, 0, -2])\n    rotate([90, 0, 0])\n    cylinder(h=8, d1=3, d2=1);\n}\n\n// Wing module\nmodule cicada_wing() {\n    difference() {\n        // Main wing shape\n        translate([5, 12, 5])\n        rotate([0, -20, 10])\n        scale([1, 0.3, 0.05])\n        sphere(d=wing_length);\n        \n        // Wing veins\n        for (i = [-2:2]) {\n            translate([i*5 + 5, 12 + i*2, 5.5])\n            rotate([0, -20, 10])\n            scale([0.8, 0.02, 0.05])\n            sphere(d=wing_length - 10);\n        }\n    }\n}\n\n// Leg module\nmodule cicada_leg() {\n    // Upper leg\n    rotate([15, 0, 0])\n    cylinder(h=leg_length, d=leg_thickness);\n    \n    // Lower leg\n    translate([0, 0, leg_length])\n    rotate([-30, 0, 0])\n    cylinder(h=leg_length*0.8, d=leg_thickness*0.8);\n    \n    // Foot\n    translate([0, 0, leg_length + leg_length*0.8])\n    rotate([-90, 0, 0])\n    cylinder(h=3, d=leg_thickness*1.2);\n}\n\n// Main assembly\nscale([scale_factor, scale_factor, scale_factor]) {\n    union() {\n        // Body\n        cicada_body();\n        \n        // Head\n        cicada_head();\n        \n        // Wings\n        cicada_wing();\n        mirror([0, 1, 0])\n        cicada_wing();\n        \n        // Legs - 3 pairs\n        // Front legs\n        translate([10, 8, 0])\n        rotate([0, 0, 45])\n        cicada_leg();\n        \n        translate([10, -8, 0])\n        rotate([0, 0, -45])\n        mirror([0, 1, 0])\n        cicada_leg();\n        \n        // Middle legs\n        translate([0, 10, -5])\n        rotate([0, 0, 30])\n        cicada_leg();\n        \n        translate([0, -10, -5])\n        rotate([0, 0, -30])\n        mirror([0, 1, 0])\n        cicada_leg();\n        \n        // Rear legs\n        translate([-10, 12, -5])\n        rotate([0, 0, 15])\n        cicada_leg();\n        \n        translate([-10, -12, -5])\n        rotate([0, 0, -15])\n        mirror([0, 1, 0])\n        cicada_leg();\n    }\n}",
    "renders": true
  },
  {
    "animal": "civet",
    "openscad_code": "// Civet - Realistic Medium Complexity\n// 3D printable model, ~70mm snout-to-tail\n\n// Overall scale\nscale(0.8) {\n\n// Body\nunion() {\n    // Torso\n    translate([0,0,8])\n    scale([1.5,0.8,0.7])\n    sphere(15, $fn=32);\n\n    // Abdomen\n    translate([0,0,3])\n    scale([1.3,0.6,0.5])\n    sphere(12, $fn=32);\n}\n\n// Head\nmodule head() {\n    translate([-20,0,18])\n    rotate([0,-5,0])\n    union() {\n        // Skull\n        scale([1.2,0.9,0.9])\n        sphere(8, $fn=32);\n        \n        // Snout\n        translate([-5,0,-1])\n        scale([1.5,0.6,0.5])\n        cylinder(h=8, r1=4, r2=2, $fn=16);\n        \n        // Ears\n        for(side=[-1,1]) {\n            translate([-2,side*6,6])\n            rotate([0,side*10,0])\n            scale([0.3,1,1.5])\n            sphere(3, $fn=16);\n        }\n        \n        // Nose\n        translate([-12,0,0])\n        sphere(1.5, $fn=16);\n        \n        // Eyes\n        for(side=[-1,1]) {\n            translate([-8,side*5,3])\n            scale([1,1,0.5])\n            sphere(2, $fn=16);\n        }\n    }\n}\nhead();\n\n// Limbs\nmodule limb(offset, angle, length) {\n    translate(offset)\n    rotate(angle)\n    union() {\n        // Upper leg\n        scale([0.8,0.8,1])\n        cylinder(h=length, r=3, $fn=16);\n        \n        // Lower leg\n        translate([0,0,length])\n        cylinder(h=length*0.8, r1=2.5, r2=2, $fn=16);\n        \n        // Paw\n        translate([0,0,length+length*0.8])\n        sphere(2.5, $fn=16);\n    }\n}\n\n// Front legs\nlimb([-12,8,3], [0,0,30], 10);\nlimb([-12,-8,3], [0,0,-30], 10);\n\n// Rear legs\nlimb([12,8,3], [0,0,150], 12);\nlimb([12,-8,3], [0,0,-150], 12);\n\n// Tail\ntranslate([20,0,12])\nrotate([0,0,-20])\nunion() {\n    for(i=[0:5]) {\n        translate([i*2,0,0])\n        rotate([0,i*5,0])\n        scale([1-i*0.1,1-i*0.1,1-i*0.1])\n        sphere(2.5, $fn=16);\n    }\n}\n\n// Stripes\nmodule stripe(pos, angle) {\n    translate(pos)\n    rotate([90,0,angle])\n    scale([0.5,8,0.3])\n    cylinder(h=3, r1=2, r2=0.5, $fn=8);\n}\n\n// Body stripes\nfor(i=[1:8]) {\n    stripe([i*3-12,0,10+i%2], i*20);\n    stripe([i*3-12,0,6], i*20+180);\n}\n\n// Whiskers\nmodule whiskers() {\n    for(side=[-1,1]) {\n        for(angle=[-30,-10,10,30]) {\n            translate([-10,side*4,1])\n            rotate([0,angle,side*10])\n            cylinder(h=8, r=0.3, $fn=8);\n        }\n    }\n}\nwhiskers();\n}",
    "renders": true
  },
  {
    "animal": "clam",
    "openscad_code": "// Realistic 3D printable clam shell\n// Approx 70 mm across when open\n\nmodule clam_half(is_top=true) {\n    // Main shell body - elliptical dome\n    translate([0,0,is_top?0:-2]) \n    scale([35,30,15]) \n    sphere(d=1, $fn=60);\n    \n    // Ridge details on shell\n    for(i=[0:15:75]) {\n        rotate([0,0,i]) \n        translate([0,0,is_top?8:-10]) \n        scale([1,0.8,0.3]) \n        cylinder(h=15, d1=60, d2=50, $fn=4);\n    }\n    \n    // Growth rings\n    for(r=[25:5:55]) {\n        difference() {\n            scale([0.9,0.85,1]) \n            sphere(d=r, $fn=50);\n            scale([0.85,0.8,1]) \n            sphere(d=r-2, $fn=50);\n        }\n    }\n    \n    // Hinge area - cylindrical\n    translate([0,-29,is_top?-2:2]) \n    rotate([90,0,0]) \n    cylinder(h=8, d=10, $fn=30);\n    \n    // Hinge teeth\n    for(i=[-3:3]) {\n        translate([i*2,-29,is_top?-1:1]) \n        cube([1,8,3], center=true);\n    }\n    \n    // Inner shell surface\n    difference() {\n        scale([0.85,0.8,0.8]) \n        sphere(d=65, $fn=50);\n        translate([0,0,is_top?-5:5]) \n        cube(100, center=true);\n    }\n    \n    // Muscle scar\n    translate([0,10,is_top?-8:8]) \n    scale([1,0.7,0.5]) \n    sphere(d=10, $fn=20);\n}\n\n// Bottom shell\nrotate([0,-20,0]) \nclam_half(false);\n\n// Top shell\nrotate([0,20,180]) \nclam_half(true);\n\n// Small foot protrusion\ntranslate([0,15,-12]) \nscale([0.8,1,0.5]) \nsphere(d=15, $fn=30);",
    "renders": true
  },
  {
    "animal": "clownfish",
    "openscad_code": "// Clownfish - Realistic Medium Complexity\n// Approx 70mm long, 3D printable\n\n$fn = 36;\n\n// Main colors\nbody_color = \"#FF6B00\";\nstripe_color = \"#FFFFFF\";\nfin_color = \"#FF4D00\";\neye_color = \"#000000\";\n\n// Overall dimensions\nbody_length = 70;\nbody_height = 35;\nbody_width = 25;\n\nmodule clownfish() {\n    // Body - main oval shape\n    union() {\n        // Main body\n        scale([1, 0.8, 0.6])\n        sphere(d=body_length);\n        \n        // Head bump\n        translate([body_length/2 - 5, 0, 0])\n        sphere(d=body_width * 0.8);\n        \n        // Tail base\n        translate([-body_length/2 + 5, 0, 0])\n        sphere(d=body_width * 0.7);\n    }\n    \n    // White stripes\n    difference() {\n        // Body for stripes\n        scale([1, 0.8, 0.6])\n        sphere(d=body_length);\n        \n        // Stripe 1 - behind head\n        translate([body_length/4, 0, -body_height/2])\n        scale([1.1, 1.1, 0.5])\n        cube([8, body_width * 1.5, body_height], center=true);\n        \n        // Stripe 2 - middle body\n        translate([-body_length/4, 0, -body_height/2])\n        scale([1.1, 1.1, 0.5])\n        cube([8, body_width * 1.5, body_height], center=true);\n        \n        // Stripe 3 - tail base\n        translate([-body_length/2 + 8, 0, -body_height/2])\n        scale([1.1, 1.1, 0.5])\n        cube([6, body_width * 1.3, body_height], center=true);\n    }\n    \n    // Dorsal fin\n    translate([0, 0, body_height/2 - 2])\n    rotate([0, 0, 0])\n    scale([1.2, 0.3, 0.8])\n    cylinder(h=body_length * 0.6, d1=body_width, d2=body_width * 0.6);\n    \n    // Pectoral fins (left and right)\n    for (side = [-1, 1]) {\n        translate([body_length/4, side * body_width/2, -body_height/4])\n        rotate([0, side * 30, 0])\n        scale([0.8, 0.2, 0.6])\n        cylinder(h=body_width * 0.7, d1=body_width * 0.5, d2=body_width * 0.3);\n    }\n    \n    // Anal fin\n    translate([0, 0, -body_height/2 + 2])\n    rotate([0, 0, 0])\n    scale([1, 0.3, 0.6])\n    cylinder(h=body_length * 0.4, d1=body_width * 0.8, d2=body_width * 0.4);\n    \n    // Tail fin\n    translate([-body_length/2 - 5, 0, 0])\n    rotate([0, 90, 0])\n    scale([1.2, 1, 0.1])\n    cylinder(h=body_height * 1.2, d1=body_width * 0.8, d2=body_width * 1.2);\n    \n    // Eyes\n    for (side = [-1, 1]) {\n        // Eye white\n        translate([body_length/2 - 8, side * body_width/3, body_height/4])\n        sphere(d=body_width * 0.2);\n        \n        // Eye pupil\n        translate([body_length/2 - 7, side * body_width/3, body_height/4])\n        sphere(d=body_width * 0.1);\n    }\n    \n    // Mouth\n    translate([body_length/2, 0, -body_height/4])\n    rotate([0, 90, 0])\n    cylinder(h=2, d=body_width * 0.3);\n    \n    // Lips detail\n    translate([body_length/2 + 1, 0, -body_height/4])\n    rotate([0, 90, 0])\n    cylinder(h=1, d=body_width * 0.35);\n}\n\n// Color modules for display\nmodule colored_body() {\n    color(body_color) children();\n}\n\nmodule colored_fin() {\n    color(fin_color) children();\n}\n\nmodule colored_stripe() {\n    color(stripe_color) children();\n}\n\nmodule colored_eye() {\n    color(eye_color) children();\n}\n\n// Assemble with colors\ncolored_body() clownfish();",
    "renders": true
  },
  {
    "animal": "coati",
    "openscad_code": "// Coati 3D model - realistic medium complexity\n// Designed for 3D printing at ~70mm length\n\n// Main body parameters\nbody_length = 35;\nbody_height = 20;\nbody_width = 18;\n\n// Head parameters\nhead_length = 15;\nhead_height = 12;\nhead_width = 10;\n\n// Tail parameters\ntail_segments = 8;\ntail_base = 6;\ntail_tip = 2;\ntail_length = 30;\n\n// Leg parameters\nleg_height = 12;\nleg_width = 4;\nleg_depth = 5;\n\n// Snout parameters\nsnout_length = 14;\nsnout_base = 8;\nsnout_tip = 3;\n\n// Ear parameters\near_size = [5, 3, 2];\n\n// Scale factor for overall size\nscale_factor = 2;\n\nmodule coati_body() {\n    // Main torso\n    translate([0, 0, body_height/2])\n    scale([1.2, 1, 0.8])\n    sphere(d=body_width, $fn=20);\n    \n    // Chest\n    translate([-body_length/4, 0, body_height/3])\n    scale([0.8, 0.9, 0.7])\n    sphere(d=body_width*0.9, $fn=20);\n    \n    // Rump\n    translate([body_length/3, 0, body_height/2.5])\n    scale([0.9, 1.1, 0.9])\n    sphere(d=body_width*1.1, $fn=20);\n}\n\nmodule coati_head() {\n    // Skull\n    translate([-body_length/2 - head_length/2, 0, body_height + head_height/2])\n    scale([1.3, 1, 1])\n    sphere(d=head_width, $fn=20);\n    \n    // Snout\n    translate([-body_length/2 - head_length - snout_length/2, 0, body_height + head_height/2])\n    rotate([0, -15, 0])\n    cylinder(h=snout_length, d1=snout_base, d2=snout_tip, $fn=8);\n    \n    // Nose tip\n    translate([-body_length/2 - head_length - snout_length, 0, body_height + head_height/2 - 2])\n    sphere(d=snout_tip*1.2, $fn=8);\n}\n\nmodule coati_ears() {\n    // Left ear\n    translate([-body_length/2 - head_length/2 - 2, head_width/2, body_height + head_height])\n    rotate([0, 0, 30])\n    scale(ear_size)\n    sphere(d=3, $fn=6);\n    \n    // Right ear\n    translate([-body_length/2 - head_length/2 - 2, -head_width/2, body_height + head_height])\n    rotate([0, 0, -30])\n    scale(ear_size)\n    sphere(d=3, $fn=6);\n}\n\nmodule coati_tail() {\n    // Create tapered tail with segments\n    for(i = [0:tail_segments-1]) {\n        t = i / (tail_segments - 1);\n        segment_length = tail_length / tail_segments;\n        diameter = tail_base - (tail_base - tail_tip) * t;\n        angle = -20 * sin(i * 45);\n        \n        translate([body_length/2 + segment_length * i, 0, body_height/2 + tail_base/2 - diameter/2])\n        rotate([0, angle, 5 * sin(i * 30)])\n        cylinder(h=segment_length + 1, d=diameter, $fn=8);\n    }\n}\n\nmodule coati_legs() {\n    // Front legs\n    for(side = [-1, 1]) {\n        // Left/right positioning\n        translate([-body_length/3, side * body_width/2.5, 0])\n        rotate([0, 10, 0])\n        cylinder(h=leg_height, d=leg_width, $fn=6);\n        \n        // Paw\n        translate([-body_length/3, side * body_width/2.5, -leg_height])\n        sphere(d=leg_width*1.2, $fn=8);\n    }\n    \n    // Hind legs\n    for(side = [-1, 1]) {\n        translate([body_length/4, side * body_width/2.3, 0])\n        rotate([0, -10, 0])\n        cylinder(h=leg_height*1.1, d=leg_width*1.1, $fn=6);\n        \n        // Paw\n        translate([body_length/4, side * body_width/2.3, -leg_height*1.1])\n        sphere(d=leg_width*1.3, $fn=8);\n    }\n}\n\nmodule coati_stripes() {\n    // Tail rings\n    for(i = [1:3]) {\n        ring_pos = body_length/2 + tail_length/4 * i;\n        color_diameter = tail_base - (tail_base - tail_tip) * (i/4);\n        \n        translate([ring_pos, 0, body_height/2])\n        rotate([90, 0, 0])\n        cylinder(h=1.5, d=color_diameter*1.05, center=true, $fn=20);\n    }\n}\n\n// Main assembly\nscale([scale_factor, scale_factor, scale_factor])\nunion() {\n    coati_body();\n    coati_head();\n    coati_ears();\n    coati_tail();\n    coati_legs();\n    coati_stripes();\n}",
    "renders": true
  },
  {
    "animal": "cobra",
    "openscad_code": "// Cobra - realistic style, medium complexity\n// Designed for 3D printing with 1.2mm walls and minimal overhangs\n\n// Overall scale factor\nscale_factor = 0.4;\n\n// Head module\nmodule cobra_head() {\n    // Main head shape\n    translate([0, 0, 5]) {\n        scale([1.2, 0.8, 1]) sphere(8);\n    }\n    \n    // Snout extension\n    translate([8, 0, 4]) {\n        scale([1.5, 0.7, 0.8]) sphere(4);\n    }\n    \n    // Hood\n    difference() {\n        union() {\n            // Left hood\n            translate([-3, 0, 6]) {\n                rotate([0, 0, -30]) \n                scale([2, 0.3, 1.5]) sphere(6);\n            }\n            // Right hood\n            translate([3, 0, 6]) {\n                rotate([0, 0, 30]) \n                scale([2, 0.3, 1.5]) sphere(6);\n            }\n        }\n        \n        // Remove back part of hood\n        translate([0, -8, 6]) cube(20, center=true);\n    }\n    \n    // Eyes\n    for(side = [-1, 1]) {\n        translate([4, side*3.5, 7]) {\n            color(\"black\") sphere(1);\n        }\n    }\n    \n    // Nostrils\n    for(side = [-1, 1]) {\n        translate([10, side*1.5, 5]) {\n            scale([0.5, 0.5, 0.3]) sphere(1);\n        }\n    }\n}\n\n// Body segment generator\nmodule body_segment(radius, length, z_pos) {\n    translate([0, 0, z_pos]) {\n        cylinder(h=length, r=radius, center=true);\n    }\n}\n\n// Tail segment generator (tapered)\nmodule tail_segment(radius, length, z_pos, taper) {\n    translate([0, 0, z_pos]) {\n        cylinder(h=length, r1=radius, r2=radius*taper, center=true);\n    }\n}\n\n// Scale pattern on body\nmodule scales(body_radius, segments) {\n    for(i = [0:segments-1]) {\n        angle = i * 30;\n        z_pos = i * 2 - 20;\n        \n        // Top scales\n        rotate([0, 0, angle]) {\n            translate([0, body_radius * 0.8, z_pos]) {\n                scale([0.3, 0.1, 0.1]) cube([3, 3, 1]);\n            }\n        }\n        \n        // Side scales\n        rotate([0, 0, angle + 15]) {\n            translate([0, body_radius * 0.9, z_pos + 1]) {\n                scale([0.2, 0.1, 0.08]) cube([2, 2, 1]);\n            }\n        }\n    }\n}\n\n// Main cobra assembly\nmodule cobra() {\n    scale(scale_factor) {\n        union() {\n            // Head\n            cobra_head();\n            \n            // Body segments with decreasing radius\n            body_segment(6, 4, 0);\n            body_segment(5.5, 4, -4);\n            body_segment(5, 4, -8);\n            body_segment(4.5, 4, -12);\n            body_segment(4, 4, -16);\n            body_segment(3.5, 4, -20);\n            \n            // Tail segments\n            tail_segment(3, 4, -24, 0.8);\n            tail_segment(2.4, 4, -28, 0.7);\n            tail_segment(1.7, 4, -32, 0.6);\n            tail_segment(1, 4, -36, 0.5);\n            tail_segment(0.5, 4, -40, 0.4);\n            \n            // Scales on body\n            scales(5, 15);\n        }\n    }\n}\n\n// Create the cobra\ncobra();\n\n// Add simple base for stability\ntranslate([0, 0, -23 * scale_factor]) {\n    color(\"darkgreen\") \n    cylinder(h=2 * scale_factor, r=25 * scale_factor);\n}",
    "renders": true
  },
  {
    "animal": "cockatoo",
    "openscad_code": "// Cockatoo 3D Model - Realistic Style, Medium Complexity\n// Size: Approximately 70mm tall\n\n// Main body module\nmodule cockatoo() {\n    // Body - oval shape\n    color(\"white\")\n    translate([0, 0, 20])\n    scale([1.2, 1, 1.3])\n    sphere(15, $fn=32);\n    \n    // Head - slightly smaller sphere\n    color(\"white\")\n    translate([0, 0, 45])\n    sphere(12, $fn=32);\n    \n    // Crest - series of feathers\n    for(i = [0:5]) {\n        rotate([0, 0, (i-2.5)*20])\n        translate([0, 5, 50])\n        rotate([20-i*3, 0, 0])\n        scale([0.3, 1, 2])\n        cylinder(8, 2, 0.5, $fn=6);\n    }\n    \n    // Beak - upper part\n    color(\"yellow\")\n    translate([0, 12, 42])\n    rotate([30, 0, 0])\n    scale([1, 0.8, 1.5])\n    cylinder(12, 3, 0.5, $fn=16);\n    \n    // Beak - lower part\n    color(\"yellow\")\n    translate([0, 12, 39])\n    rotate([-20, 0, 0])\n    scale([0.8, 0.6, 1.2])\n    cylinder(10, 2.5, 0.5, $fn=16);\n    \n    // Eye - left\n    color(\"black\")\n    translate([-4, 10, 45])\n    sphere(1.5, $fn=16);\n    \n    // Eye - right\n    color(\"black\")\n    translate([4, 10, 45])\n    sphere(1.5, $fn=16);\n    \n    // Wing - left\n    color(\"white\")\n    translate([-15, 0, 30])\n    rotate([0, 0, 20])\n    scale([2, 0.5, 1.2])\n    difference() {\n        cube([20, 3, 15], center=true);\n        // Wing feather detail\n        for(j = [0:3]) {\n            translate([j*4-6, 0, 5])\n            rotate([0, 0, -j*10])\n            cube([3, 4, 8], center=true);\n        }\n    }\n    \n    // Wing - right\n    color(\"white\")\n    mirror([1, 0, 0])\n    translate([-15, 0, 30])\n    rotate([0, 0, 20])\n    scale([2, 0.5, 1.2])\n    difference() {\n        cube([20, 3, 15], center=true);\n        // Wing feather detail\n        for(j = [0:3]) {\n            translate([j*4-6, 0, 5])\n            rotate([0, 0, -j*10])\n            cube([3, 4, 8], center=true);\n        }\n    }\n    \n    // Tail\n    color(\"white\")\n    translate([0, -15, 15])\n    rotate([0, 10, 0])\n    scale([1, 0.3, 2])\n    cube([15, 3, 20], center=true);\n    \n    // Legs\n    // Left leg\n    color(\"gray\")\n    translate([-5, 8, 5])\n    rotate([0, 0, -5])\n    cylinder(15, 2, 1.5, $fn=16);\n    \n    // Right leg\n    color(\"gray\")\n    translate([5, 8, 5])\n    rotate([0, 0, 5])\n    cylinder(15, 2, 1.5, $fn=16);\n    \n    // Feet\n    // Left foot\n    translate([-7, 8, 0])\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(8, 2, 1.5, $fn=16);\n        // Toes\n        for(k = [0:3]) {\n            translate([k*3-4.5, 0, 0])\n            cube([1, 6, 2], center=true);\n        }\n    }\n    \n    // Right foot\n    translate([7, 8, 0])\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(8, 2, 1.5, $fn=16);\n        // Toes\n        for(k = [0:3]) {\n            translate([k*3-4.5, 0, 0])\n            cube([1, 6, 2], center=true);\n        }\n    }\n    \n    // Cheek patch (characteristic yellow-orange)\n    color(\"orange\")\n    translate([0, 11, 42])\n    scale([1.2, 0.8, 0.8])\n    sphere(4, $fn=16);\n}\n\n// Render the cockatoo\ncockatoo();",
    "renders": true
  },
  {
    "animal": "cockle",
    "openscad_code": "// Realistic 3D-printable cockle (medium complexity)\n// Shell length ≈ 80 mm, printable without supports\n\n$fn = 36;                    // Smooth curves\n\nmodule cockle() {\n    difference() {\n        // Main shell body\n        scale([1, 0.85, 0.5])\n            sphere(d = 80);  // Oval base\n\n        // Hollow interior\n        translate([0, 0, -2])\n            scale([0.85, 0.75, 0.45])\n                sphere(d = 78);\n    }\n\n    // Radial ribs (15 ribs)\n    for (a = [0:24:359]) {\n        rotate([0, 0, a])\n            translate([0, 0, -1])\n                scale([1, 0.9, 0.05])\n                    cylinder(h = 42, d1 = 2.5, d2 = 0.5);  // Tapered ribs\n    }\n\n    // Growth rings (concentric ridges)\n    for (r = [30:7:72]) {\n        rotate_extrude()\n            translate([r, 0, 0])\n                circle(d = 2.5);\n    }\n\n    // Hinge area thickening\n    translate([0, 0, -20])\n        scale([1, 0.4, 0.3])\n            cylinder(h = 20, d = 30, center = true);\n\n    // Muscular scar (inside)\n    difference() {\n        translate([0, 0, -15])\n            scale([0.7, 0.6, 0.3])\n                sphere(d = 40);\n        translate([0, 0, -14])\n            scale([0.68, 0.58, 0.32])\n                sphere(d = 40);\n    }\n\n    // Scalloped shell margin\n    for (a = [0:15:359]) {\n        rotate([0, 0, a])\n            translate([37, 0, -1])\n                cylinder(h = 3, d = 4);\n    }\n\n    // Small tubercles along ribs\n    for (a = [0:24:359]) {\n        for (d = [20:10:70]) {\n            rotate([0, 0, a])\n                translate([d, 0, sin(d*5)*1.5])\n                    sphere(d = 1.5);\n        }\n    }\n}\n\ncockle();",
    "renders": true
  },
  {
    "animal": "cockroach",
    "openscad_code": "// Cockroach.scad - Realistic style, medium complexity\n\n// Overall size: ~80mm length\n$fn = 30;\n\nmodule cockroach() {\n    // Main body segments\n    union() {\n        // Thorax (middle segment)\n        color(\"brown\")\n        translate([0, 0, 5])\n        rotate([0, 90, 0])\n        scale([1.2, 1, 0.8])\n        cylinder(h = 25, r1 = 8, r2 = 10);\n        \n        // Abdomen (largest segment)\n        color(\"darkbrown\")\n        translate([-20, 0, 6])\n        rotate([0, 90, 0])\n        scale([1, 1, 0.7])\n        cylinder(h = 30, r1 = 10, r2 = 8);\n        \n        // Head\n        color(\"brown\")\n        translate([15, 0, 5])\n        rotate([0, 90, 0])\n        scale([1, 0.9, 0.9])\n        cylinder(h = 12, r1 = 7, r2 = 5);\n        \n        // Wings (elytra)\n        left_wing();\n        right_wing();\n        \n        // Legs\n        left_legs();\n        right_legs();\n        \n        // Antennae\n        left_antenna();\n        right_antenna();\n    }\n}\n\nmodule left_wing() {\n    // Left wing as overlapping plates\n    color(\"brown\")\n    translate([-5, -6, 10])\n    rotate([0, 10, -15])\n    scale([1.2, 0.5, 0.1])\n    cube([25, 12, 1]);\n}\n\nmodule right_wing() {\n    // Right wing (mirror of left)\n    mirror([0, 1, 0])\n    left_wing();\n}\n\nmodule leg_pair(offset, angle) {\n    // Single pair of legs\n    translate([offset, 0, 0])\n    rotate([0, 0, angle])\n    union() {\n        // Coxa (first segment)\n        translate([0, -4, 4])\n        rotate([0, 90, 0])\n        cylinder(h = 8, r = 2);\n        \n        // Femur\n        translate([0, -8, 2])\n        rotate([0, 45, 0])\n        cylinder(h = 12, r = 1.5);\n        \n        // Tibia\n        translate([0, -16, 0])\n        rotate([0, 30, 0])\n        cylinder(h = 10, r = 1);\n        \n        // Tarsus segments\n        for(i = [1:3]) {\n            translate([0, -20 - i*3, -0.5*i])\n            rotate([0, 20, 0])\n            cylinder(h = 3, r = 0.8);\n        }\n    }\n}\n\nmodule left_legs() {\n    // Three legs on left side\n    leg_pair(10, -45);   // Front\n    leg_pair(0, -90);    // Middle\n    leg_pair(-15, -135); // Rear\n}\n\nmodule right_legs() {\n    // Mirror legs to right side\n    mirror([0, 1, 0]) {\n        leg_pair(10, 45);\n        leg_pair(0, 90);\n        leg_pair(-15, 135);\n    }\n}\n\nmodule left_antenna() {\n    // Flexible antenna\n    color(\"black\")\n    translate([18, -3, 8])\n    rotate([0, 0, 30])\n    for(i = [0:5]) {\n        translate([i*2, -i*0.5, 0])\n        rotate([0, 0, -10])\n        cylinder(h = 3, r = 0.3);\n    }\n}\n\nmodule right_antenna() {\n    // Right antenna\n    mirror([0, 1, 0])\n    left_antenna();\n}\n\n// Create the cockroach\nscale(0.8)\ncockroach();",
    "renders": true
  },
  {
    "animal": "cod",
    "openscad_code": "// Cod fish model - realistic style, medium complexity\n// Size: ~80mm long, 3D printable with 1mm wall thickness\n\n$fn = 30;\n\nmodule cod_body() {\n    difference() {\n        // Main body - elongated ellipsoid\n        scale([1.2, 0.6, 0.3])\n            sphere(d=40);\n        \n        // Tail cutout\n        translate([-25, 0, 0])\n            cube([30, 30, 15], center=true);\n    }\n}\n\nmodule cod_head() {\n    // Head section\n    translate([25, 0, 0])\n    rotate([0, -20, 0])\n    scale([1, 0.8, 0.9])\n        sphere(d=20);\n}\n\nmodule cod_mouth() {\n    // Lower jaw\n    translate([30, -5, -5])\n    rotate([0, 30, 0])\n    scale([0.8, 0.4, 0.3])\n        sphere(d=15);\n    \n    // Upper jaw\n    translate([30, 0, 2])\n    rotate([0, -20, 0])\n    scale([0.9, 0.5, 0.3])\n        sphere(d=15);\n}\n\nmodule cod_eye() {\n    // Eye socket\n    translate([28, 7, 4])\n    rotate([0, -20, 0])\n    sphere(d=5);\n    \n    // Eyeball\n    translate([29.5, 7, 4])\n    rotate([0, -20, 0])\n    color(\"black\")\n    sphere(d=2);\n}\n\nmodule cod_tail() {\n    // Tail fin - upper lobe\n    translate([-26, 0, 0])\n    rotate([0, 15, 20])\n    linear_extrude(height=2)\n    polygon(points=[[0,0], [-15,8], [-10,2]]);\n    \n    // Tail fin - lower lobe\n    translate([-26, 0, 0])\n    rotate([0, 15, -20])\n    linear_extrude(height=2)\n    polygon(points=[[0,0], [-15,-8], [-10,-2]]);\n}\n\nmodule cod_dorsal_fin() {\n    // First dorsal fin\n    for(i=[0:2]) {\n        translate([10-i*5, 0, 6+i*2])\n        rotate([0, 0, -10+i*5])\n        linear_extrude(height=1.5)\n        polygon(points=[[0,0], [2,8], [4,0]]);\n    }\n    \n    // Second dorsal fin\n    for(i=[0:3]) {\n        translate([-5-i*5, 0, 5])\n        rotate([0, 0, 5-i*3])\n        linear_extrude(height=1.5)\n        polygon(points=[[0,0], [2,6], [4,0]]);\n    }\n}\n\nmodule cod_anal_fin() {\n    // Anal fin\n    for(i=[0:3]) {\n        translate([-5-i*5, 0, -5])\n        rotate([0, 180, 5-i*3])\n        linear_extrude(height=1.5)\n        polygon(points=[[0,0], [2,6], [4,0]]);\n    }\n}\n\nmodule cod_pectoral_fin() {\n    // Left pectoral fin\n    translate([15, 12, -2])\n    rotate([0, 30, -20])\n    linear_extrude(height=1.5)\n    polygon(points=[[0,0], [8,5], [12,-2], [6,-4]]);\n    \n    // Right pectoral fin\n    translate([15, -12, -2])\n    rotate([0, 30, 20])\n    mirror([0,1,0])\n    linear_extrude(height=1.5)\n    polygon(points=[[0,0], [8,5], [12,-2], [6,-4]]);\n}\n\nmodule cod_lateral_line() {\n    // Lateral line markings\n    for(i=[0:8]) {\n        translate([20-i*5, 0, 1])\n        color(\"gray\")\n        sphere(d=1.5);\n    }\n}\n\nmodule cod_scales_pattern() {\n    // Simple scale pattern on body\n    for(x=[15:-5:-20]) {\n        for(y=[-8:4:8]) {\n            if(y != 0) {\n                translate([x, y, 0.5])\n                color(\"gray\")\n                sphere(d=0.8);\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Body parts\n    cod_body();\n    cod_head();\n    cod_mouth();\n    cod_eye();\n    mirror([0,1,0]) cod_eye();\n    \n    // Fins\n    cod_tail();\n    cod_dorsal_fin();\n    cod_anal_fin();\n    cod_pectoral_fin();\n    \n    // Details\n    cod_lateral_line();\n    cod_scales_pattern();\n}\n\n// Add base for stable printing\ntranslate([0, 0, -8])\ncolor(\"gray\")\ncube([60, 30, 2], center=true);",
    "renders": true
  },
  {
    "animal": "coelacanth",
    "openscad_code": "// Coelacanth - 3D printable medium complexity model\n// Overall dimensions: ~80mm length, ~30mm height, ~15mm thick\n\n// Main body module\nmodule body() {\n    // Central body - elongated oval\n    scale([2.5, 1, 0.8])\n        sphere(10, $fn=32);\n}\n\n// Head with distinctive coelacanth features\nmodule head() {\n    union() {\n        // Main head shape\n        translate([20, 0, 0])\n            scale([1.2, 0.9, 0.7])\n                sphere(8, $fn=32);\n        \n        // Snout extension\n        translate([28, 0, -1])\n            scale([1.5, 0.6, 0.4])\n                sphere(4, $fn=16);\n        \n        // Lower jaw\n        translate([20, 0, -4])\n            rotate([15, 0, 0])\n                scale([1.1, 0.7, 0.3])\n                    sphere(7, $fn=24);\n    }\n}\n\n// Lobed fins - distinctive coelacanth feature\nmodule lobed_fin(x_pos, y_pos, z_pos, angle, scale_factor) {\n    translate([x_pos, y_pos, z_pos])\n        rotate([0, 0, angle])\n            scale([scale_factor, scale_factor, scale_factor])\n                union() {\n                    // Main fin lobe\n                    translate([0, 0, 0])\n                        scale([3, 1, 0.3])\n                            sphere(3, $fn=16);\n                    \n                    // Fin rays\n                    for (i = [-2:1:2]) {\n                        translate([2, i*1.5, -0.5])\n                            scale([2, 0.3, 0.1])\n                                rotate([0, i*10, 0])\n                                    cylinder(h=4, r=0.5, $fn=8);\n                    }\n                }\n}\n\n// Tail fin - three-lobed\nmodule tail_fin() {\n    translate([-25, 0, 0])\n        union() {\n            // Upper lobe\n            translate([0, 0, 3])\n                rotate([30, 0, 0])\n                    scale([1, 0.5, 0.2])\n                        cylinder(h=10, r1=8, r2=2, $fn=16);\n            \n            // Middle lobe\n            translate([0, 0, 0])\n                scale([1, 0.3, 0.2])\n                    cylinder(h=12, r1=6, r2=1, $fn=16);\n            \n            // Lower lobe\n            translate([0, 0, -3])\n                rotate([-30, 0, 0])\n                    scale([1, 0.5, 0.2])\n                        cylinder(h=10, r1=8, r2=2, $fn=16);\n        }\n}\n\n// Dorsal fins\nmodule dorsal_fins() {\n    // First dorsal fin\n    translate([-5, 0, 5])\n        scale([0.8, 0.3, 1])\n            cylinder(h=6, r1=4, r2=1, $fn=16);\n    \n    // Second dorsal fin\n    translate([-15, 0, 5])\n        scale([0.7, 0.3, 0.9])\n            cylinder(h=5, r1=3.5, r2=1, $fn=16);\n}\n\n// Pectoral fins\nmodule pectoral_fins() {\n    // Left pectoral fin\n    translate([10, 8, -2])\n        lobed_fin(0, 0, 0, 90, 1);\n    \n    // Right pectoral fin\n    translate([10, -8, -2])\n        lobed_fin(0, 0, 0, -90, 1);\n}\n\n// Pelvic fins\nmodule pelvic_fins() {\n    // Left pelvic fin\n    translate([-8, 5, -2])\n        lobed_fin(0, 0, 0, 45, 0.7);\n    \n    // Right pelvic fin\n    translate([-8, -5, -2])\n        lobed_fin(0, 0, 0, -45, 0.7);\n}\n\n// Anal fin\nmodule anal_fin() {\n    translate([-20, 0, -4])\n        lobed_fin(0, 0, 0, 0, 0.8);\n}\n\n// Scale texture pattern\nmodule scale_texture() {\n    // Simple scale pattern using small spheres\n    for (i = [0:5:40]) {\n        for (j = [-5:5:5]) {\n            if (i*i + j*j < 400) {\n                translate([i-25, j, 0])\n                    scale([1, 1, 0.2])\n                        sphere(0.5, $fn=8);\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Core body with head\n    body();\n    head();\n    \n    // All fins\n    tail_fin();\n    dorsal_fins();\n    pectoral_fins();\n    pelvic_fins();\n    anal_fin();\n    \n    // Scale texture\n    scale_texture();\n}\n\n// Ensure model sits flat on build plate\ntranslate([0, 0, -8])\n    cube([0.1, 0.1, 0.1], center=true);",
    "renders": true
  },
  {
    "animal": "colobus",
    "openscad_code": "// Colobus Monkey - Realistic Style, Medium Complexity\n// 3D printable model ~80mm in length\n\n// Overall dimensions\nbody_length = 60;\nbody_height = 35;\nbody_width = 25;\nhead_size = 20;\ntail_length = 40;\nlimb_length = 30;\n\n// Wall thickness for 3D printing\nwall = 1.5;\n\nmodule torso() {\n    // Main body - elongated ellipsoid\n    rotate([0, 10, 0])\n    scale([1.2, 0.8, 0.7])\n    sphere(d=body_height, $fn=32);\n    \n    // Chest protrusion\n    translate([body_length/4, 0, -body_height/4])\n    rotate([0, 15, 0])\n    scale([0.4, 0.6, 0.5])\n    sphere(d=body_height/2, $fn=24);\n}\n\nmodule head() {\n    // Skull\n    translate([-body_length/2 - head_size/2, 0, body_height/3])\n    rotate([0, -10, 0])\n    sphere(d=head_size, $fn=32);\n    \n    // Muzzle\n    translate([-body_length/2 - head_size, 0, body_height/3 - head_size/3])\n    rotate([0, -10, 0])\n    scale([0.7, 0.6, 0.5])\n    sphere(d=head_size * 0.8, $fn=24);\n    \n    // Eyes\n    for(side = [-1, 1]) {\n        translate([-body_length/2 - head_size/1.5, side * head_size/3, body_height/3 + head_size/6])\n        sphere(d=head_size/8, $fn=16);\n    }\n    \n    // Nose\n    translate([-body_length/2 - head_size * 1.1, 0, body_height/3 - head_size/6])\n    sphere(d=head_size/12, $fn=12);\n}\n\nmodule limbs() {\n    // Arms\n    for(side = [-1, 1]) {\n        // Upper arm\n        translate([-body_length/4, side * body_width/2, 0])\n        rotate([0, 0, side * 30])\n        rotate([45, 0, 0])\n        cylinder(h=limb_length/2, d1=body_width/3, d2=body_width/4, $fn=12);\n        \n        // Lower arm\n        translate([-body_length/4 - limb_length/3, side * body_width/1.3, -limb_length/3])\n        rotate([0, 0, side * 30])\n        rotate([90, 0, 0])\n        cylinder(h=limb_length/2, d1=body_width/4, d2=body_width/5, $fn=12);\n    }\n    \n    // Legs\n    for(side = [-1, 1]) {\n        // Upper leg\n        translate([body_length/3, side * body_width/2, -body_height/3])\n        rotate([0, 0, side * -20])\n        rotate([30, 0, 0])\n        cylinder(h=limb_length/2, d1=body_width/3, d2=body_width/4, $fn=12);\n        \n        // Lower leg\n        translate([body_length/3 + limb_length/3, side * body_width/1.5, -body_height/2 - limb_length/3])\n        rotate([0, 0, side * -20])\n        rotate([90, 0, 0])\n        cylinder(h=limb_length/2, d1=body_width/4, d2=body_width/5, $fn=12);\n    }\n}\n\nmodule tail() {\n    // Base of tail\n    translate([body_length/2, 0, -body_height/4])\n    rotate([0, 0, -20])\n    cylinder(h=tail_length/4, d1=body_width/3, d2=body_width/4, $fn=12);\n    \n    // Mid tail\n    translate([body_length/2 + tail_length/4, 0, -body_height/3])\n    rotate([0, 0, -30])\n    cylinder(h=tail_length/4, d1=body_width/4, d2=body_width/5, $fn=12);\n    \n    // Tail tip\n    translate([body_length/2 + tail_length/2, 0, -body_height/2])\n    rotate([0, 0, -45])\n    cylinder(h=tail_length/2, d1=body_width/5, d2=body_width/10, $fn=12);\n}\n\nmodule long_fur() {\n    // Back mane\n    for(i = [0:5]) {\n        translate([body_length/2 - i * body_length/5, 0, body_height/3])\n        rotate([0, 90, 0])\n        cylinder(h=body_height/2, d=body_width/6, $fn=8);\n    }\n    \n    // Shoulder fur\n    for(side = [-1, 1]) {\n        translate([-body_length/3, side * body_width/2, -body_height/6])\n        rotate([0, 45, side * 30])\n        cylinder(h=body_height/3, d=body_width/5, $fn=8);\n    }\n}\n\n// Main assembly\nunion() {\n    torso();\n    head();\n    limbs();\n    tail();\n    long_fur();\n}\n\n// Base for printing stability\ntranslate([0, 0, -body_height/2 - 5])\ncube([body_length, body_width * 1.5, 2], center=true);",
    "renders": true
  },
  {
    "animal": "conch",
    "openscad_code": "// Conch shell - medium complexity realistic style\n// Uses basic primitives and transformations to create a 3D printable conch\n\nmodule conch_shell() {\n    // Main body parameters\n    body_length = 60;\n    max_diameter = 25;\n    min_diameter = 8;\n    \n    // Create main spiral body\n    difference() {\n        union() {\n            // Main spiral structure\n            spiral_body();\n            \n            // Opening/lip structure\n            shell_lip();\n            \n            // Spiral ridges\n            spiral_ridges();\n        }\n        \n        // Hollow out the inside\n        hollow_interior();\n    }\n    \n    // Add spire tip\n    spire_tip();\n}\n\nmodule spiral_body() {\n    $fn = 32;\n    \n    // Create spiral using rotated and scaled cylinders\n    for (i = [0:5:360]) {\n        radius = max_diameter - (max_diameter - min_diameter) * (i / 360);\n        height = body_length * (1 - i / 360) * 0.8;\n        translate([\n            cos(i) * (i / 15),\n            sin(i) * (i / 15),\n            height\n        ]) {\n            rotate([90, 0, i]) {\n                cylinder(h = 2, r1 = radius, r2 = radius * 0.9);\n            }\n        }\n    }\n    \n    // Connect spiral segments with ellipsoids\n    for (i = [0:30:360]) {\n        radius = max_diameter - (max_diameter - min_diameter) * (i / 360);\n        translate([\n            cos(i) * (i / 15),\n            sin(i) * (i / 15),\n            body_length * (1 - i / 360) * 0.8\n        ]) {\n            scale([1, 1.2, 0.8]) {\n                sphere(r = radius * 0.7);\n            }\n        }\n    }\n}\n\nmodule shell_lip() {\n    $fn = 32;\n    \n    // Outer lip of the aperture\n    translate([cos(360) * 24, sin(360) * 24, body_length * 0.2]) {\n        rotate([0, -20, 0]) {\n            difference() {\n                // Main lip shape\n                scale([1.5, 1, 1]) {\n                    sphere(r = 12);\n                }\n                \n                // Cut away back\n                translate([-15, 0, 0]) {\n                    cube([30, 30, 30], center = true);\n                }\n            }\n        }\n    }\n}\n\nmodule spiral_ridges() {\n    // Add raised ridges along spiral\n    for (i = [0:45:360]) {\n        for (j = [0:60:360]) {\n            radius = max_diameter - (max_diameter - min_diameter) * (j / 360);\n            translate([\n                cos(j) * (j / 15) + cos(i + j) * radius * 0.6,\n                sin(j) * (j / 15) + sin(i + j) * radius * 0.6,\n                body_length * (1 - j / 360) * 0.8\n            ]) {\n                scale([0.5, 0.5, 1.5]) {\n                    sphere(r = 1.5);\n                }\n            }\n        }\n    }\n}\n\nmodule hollow_interior() {\n    // Hollow out shell for 3D printing\n    for (i = [0:5:360]) {\n        radius = (max_diameter - (max_diameter - min_diameter) * (i / 360)) * 0.7;\n        height = body_length * (1 - i / 360) * 0.8;\n        translate([\n            cos(i) * (i / 15),\n            sin(i) * (i / 15),\n            height\n        ]) {\n            rotate([90, 0, i]) {\n                cylinder(h = 2.2, r1 = radius, r2 = radius * 0.9);\n            }\n        }\n    }\n    \n    // Remove interior from lip\n    translate([cos(360) * 24, sin(360) * 24, body_length * 0.2]) {\n        rotate([0, -20, 0]) {\n            scale([1.2, 0.8, 0.8]) {\n                sphere(r = 10);\n            }\n        }\n    }\n}\n\nmodule spire_tip() {\n    // Pointed spire at top\n    translate([0, 0, body_length * 0.8]) {\n        rotate([0, 180, 0]) {\n            cylinder(h1 = 8, h2 = 0, r1 = 6, r2 = 0, $fn = 6);\n        }\n    }\n}\n\n// Create the conch shell\nconch_shell();",
    "renders": true
  },
  {
    "animal": "condor",
    "openscad_code": "// Condor - Medium complexity realistic style\n// Wingspan ~80mm, suitable for 3D printing\n\n$fn = 32;  // Smooth curves\n\nmodule body() {\n    // Main torso - elongated ellipsoid\n    scale([1.2, 0.8, 1])\n        sphere(12);\n    \n    // Neck extension\n    translate([9, 0, 2])\n        rotate([0, -20, 0])\n        scale([0.8, 0.6, 0.6])\n            cylinder(h=10, r1=4, r2=3);\n}\n\nmodule head() {\n    // Head - slightly squashed sphere\n    translate([18, 0, 3])\n        scale([1.2, 1, 0.9])\n            sphere(5);\n    \n    // Beak\n    translate([23, 0, 2])\n        rotate([0, -15, 0])\n        scale([1, 0.8, 0.6])\n            cylinder(h=8, r1=2, r2=0.5);\n    \n    // Head crest\n    translate([17, 0, 7])\n        rotate([20, 0, 0])\n        scale([0.3, 0.8, 1])\n            cylinder(h=3, r=3);\n}\n\nmodule wing(side) {\n    mirror([side, 0, 0]) {\n        // Shoulder joint\n        translate([-10, 0, 5])\n            sphere(3);\n        \n        // Upper wing\n        translate([-25, -side*25, 2])\n            rotate([0, 0, side*15])\n            scale([2.5, 0.3, 0.8])\n                cylinder(h=25, r=4);\n        \n        // Lower wing\n        translate([-45, -side*35, -2])\n            rotate([0, 0, side*10])\n            scale([2, 0.2, 0.6])\n                cylinder(h=20, r=3);\n        \n        // Wing tip feathers\n        for(i = [0:2]) {\n            translate([-55, -side*(38+i*3), -3])\n                rotate([0, 0, side*(5+i*5)])\n                scale([0.5, 0.1, 0.4])\n                    cylinder(h=8, r=2);\n        }\n    }\n}\n\nmodule tail() {\n    // Tail base\n    translate([-12, 0, -2])\n        rotate([10, 0, 0])\n        scale([1, 0.3, 0.5])\n            cylinder(h=8, r=5);\n    \n    // Tail feathers\n    for(i = [-1:1]) {\n        translate([-15, i*3, -3])\n            rotate([20, 0, 0])\n            scale([1.5, 0.2, 0.3])\n                cylinder(h=12, r=2);\n    }\n}\n\nmodule legs() {\n    // Left leg\n    translate([0, 4, -10])\n        rotate([10, 0, 0])\n        cylinder(h=12, r=1.5);\n    \n    // Left foot\n    translate([0, 4, -22])\n        rotate([90, 0, 0])\n        cylinder(h=8, r=2);\n    \n    // Left toes\n    for(i = [-1:1]) {\n        translate([0, 4+i*1.5, -22])\n            rotate([90, 0, 0])\n            scale([0.3, 0.8, 1])\n                cylinder(h=6, r=0.8);\n    }\n    \n    // Right leg (mirrored)\n    mirror([0, 1, 0]) {\n        translate([0, 4, -10])\n            rotate([10, 0, 0])\n            cylinder(h=12, r=1.5);\n        \n        translate([0, 4, -22])\n            rotate([90, 0, 0])\n            cylinder(h=8, r=2);\n        \n        for(i = [-1:1]) {\n            translate([0, 4+i*1.5, -22])\n                rotate([90, 0, 0])\n                scale([0.3, 0.8, 1])\n                    cylinder(h=6, r=0.8);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    wing(1);    // Right wing\n    wing(-1);   // Left wing\n    tail();\n    legs();\n}",
    "renders": true
  },
  {
    "animal": "conure",
    "openscad_code": "// Conure 3D model - medium complexity realistic style\n// Sized for 3D printing - approximately 70mm tall\n\n$fn = 36;\n\nmodule conure() {\n    // Body\n    union() {\n        // Main body\n        translate([0, 0, 15])\n            scale([1.2, 0.9, 1.3])\n            sphere(15);\n        \n        // Belly\n        translate([0, -12, 8])\n            scale([0.8, 0.7, 0.9])\n            sphere(12);\n        \n        // Back\n        translate([0, 8, 18])\n            scale([1.1, 0.6, 1.2])\n            sphere(10);\n    }\n    \n    // Head\n    translate([0, 0, 40])\n        scale([0.9, 0.9, 1.1])\n        sphere(12);\n    \n    // Beak\n    translate([0, -18, 42])\n        rotate([-30, 0, 0])\n        scale([1, 0.8, 2.5])\n        cylinder(8, 3, 1);\n    \n    // Beak upper part\n    translate([0, -18, 44])\n        rotate([-30, 0, 0])\n        scale([0.8, 0.6, 2])\n        cylinder(7, 2.5, 0.5);\n    \n    // Eyes\n    for(side = [-1, 1]) {\n        translate([side * 5, -10, 42])\n            sphere(2);\n    }\n    \n    // Eye rings\n    for(side = [-1, 1]) {\n        translate([side * 5, -10, 42])\n            scale([1.2, 1, 1])\n            cylinder(0.5, 3.5, 3.5);\n    }\n    \n    // Wings\n    for(side = [-1, 1]) {\n        translate([side * 15, 5, 30])\n            rotate([0, side * 20, 0])\n            scale([0.3, 1.2, 0.8])\n            cylinder(15, 5, 3);\n    }\n    \n    // Tail feathers\n    for(i = [0:2]) {\n        translate([0, 20 - i * 3, 15 - i * 2])\n            rotate([0, 0, -15 + i * 15])\n            scale([0.3, 1, 0.1])\n            cube([2, 20, 5]);\n    }\n    \n    // Feet\n    for(side = [-1, 1]) {\n        // Leg\n        translate([side * 8, -5, 5])\n            cylinder(8, 2, 2);\n        \n        // Toes\n        for(angle = [0, 30, -30]) {\n            translate([side * 8, -5, 0])\n                rotate([0, 0, angle])\n                cylinder(6, 1.5, 1.5);\n        }\n    }\n    \n    // Crest feathers\n    for(i = [0:4]) {\n        translate([0, 0, 52 + i * 3])\n            rotate([0, 0, -20 + i * 10])\n            scale([0.2, 1, 0.1])\n            cube([1, 8, 3]);\n    }\n}\n\n// Generate the conure\nconure();",
    "renders": true
  },
  {
    "animal": "coot",
    "openscad_code": "// Coot (Fulica atra) – realistic medium-complexity OpenSCAD model\n// Overall length ≈ 80 mm, no overhangs > 45°, 1.2 mm wall thickness\n\nbody_len = 60;\nbody_w   = 30;\nbody_h   = 18;\nwall     = 1.2;\n\nmodule oval(t,l,w,h) scale([l,w,h]) sphere(t,$fn=32);\n\n// Main body – tapered oval\nmodule body() {\n    difference(){\n        union(){\n            translate([0,0,body_h/2])\n                oval(body_w/2, body_len, body_w, body_h);\n            // Slight tail rise\n            translate([-body_len/2-5,0,0])\n                rotate([0,15,0])\n                oval(body_w/2,15,body_w*0.7,body_h*0.7);\n        }\n        // Hollow\n        translate([0,0,wall])\n            oval(body_w/2-wall, body_len-wall*2, body_w-wall*2, body_h-wall);\n    }\n}\n\n// Head\nmodule head() {\n    translate([body_len/2+12,0,body_h/2+5])\n    rotate([0,-20,0])\n    difference(){\n        scale([1,0.9,1]) sphere(9,$fn=32);\n        translate([0,0,wall]) sphere(9-wall,$fn=32);\n    }\n}\n\n// Beak with frontal shield\nmodule beak() {\n    translate([body_len/2+24,0,body_h/2+4])\n    rotate([0,-20,0])\n    union(){\n        // Upper mandible\n        translate([4,0,0])\n            rotate([0,20,0])\n            scale([10,3,4])\n            cylinder(h=1,$fn=16);\n        // Lower mandible\n        translate([4,0,-2])\n            rotate([0,-10,0])\n            scale([8,2.5,2])\n            cylinder(h=1,$fn=16);\n        // White frontal shield\n        color(\"white\")\n        translate([0,0,1])\n            scale([6,6,5])\n            sphere(1,$fn=32);\n    }\n}\n\n// Eye\nmodule eye() {\n    translate([body_len/2+14,5.5,body_h/2+7])\n        sphere(1.5,$fn=16);\n    translate([body_len/2+14,-5.5,body_h/2+7])\n        sphere(1.5,$fn=16);\n}\n\n// Leg segment\nmodule leg_seg(len,r){\n    difference(){\n        cylinder(h=len, r=r, $fn=16);\n        translate([0,0,wall]) cylinder(h=len-wall, r=r-wall, $fn=16);\n    }\n}\n\n// Webbed foot\nmodule foot() {\n    translate([0,0,0])\n    difference(){\n        hull(){\n            cube([12,wall*2,4]);\n            translate([9,0,0]) cube([wall*2,18,4]);\n            translate([-9,0,0]) cube([wall*2,18,4]);\n        }\n        // Remove bottom to avoid overhang\n        translate([0,0,-2]) cube([20,20,2.1],center=true);\n    }\n}\n\n// Full leg\nmodule leg(side) {\n    // Thigh\n    translate([body_len/2-5, side*10, -body_h/2-2])\n    rotate([20,0,side*-10])\n    leg_seg(12,2);\n\n    // Shank\n    translate([body_len/2-5+10*cos(20), side*10+side*10*sin(20), -body_h/2-2-12*sin(20)])\n    rotate([0,0,side*-5])\n    leg_seg(15,1.5);\n\n    // Foot\n    translate([body_len/2-5+10*cos(20)+15*sin(0), side*10+side*10*sin(20)+side*15, -body_h/2-2-12*sin(20)-15*cos(0)])\n    rotate([90,0,0])\n    foot();\n}\n\n// Wings – low-profile to avoid steep overhangs\nmodule wing(side) {\n    difference(){\n        translate([0, side*body_w/2, body_h/2])\n        rotate([0,10,0])\n        scale([body_len*0.7,body_w*0.4,body_h*0.3])\n            oval(1,1,1,1);\n        // Hollow\n        translate([0,side*wall,wall])\n        scale([body_len*0.7-wall*2,body_w*0.4-wall*2,body_h*0.3-wall])\n            oval(1,1,1,1);\n    }\n}\n\n// Assembly\nbody();\nhead();\nbeak();\neye();\nwing(1);\nwing(-1);\nleg(1);\nleg(-1);",
    "renders": true
  },
  {
    "animal": "copperhead",
    "openscad_code": "// Copperhead Snake - Realistic Style, Medium Complexity\n// Overall length ~80mm, designed for 3D printing\n\n// Snake body parameters\nbody_length = 75;\nbody_segments = 30;\nsegment_length = body_length / body_segments;\nbase_diameter = 8;\ntail_taper = 0.3;\n\n// Head parameters\nhead_length = 12;\nhead_width = 9;\nhead_height = 7;\nsnout_length = 4;\n\n// Eye parameters\neye_radius = 1.5;\neye_offset = 3.5;\n\n// Scale texture\nscale_size = 1.2;\nscale_depth = 0.3;\n\n// Create the complete copperhead\nmodule copperhead() {\n    union() {\n        // Main body\n        snake_body();\n        \n        // Head\n        snake_head();\n        \n        // Eyes\n        eyes();\n        \n        // Rattle segments (simplified)\n        rattle();\n    }\n}\n\n// Generate the snake body with taper\nmodule snake_body() {\n    for(i = [0:body_segments-1]) {\n        translate([i * segment_length, 0, 0]) {\n            // Calculate diameter based on position\n            progress = i / body_segments;\n            current_diameter = base_diameter * (1 - progress * tail_taper);\n            \n            // Create body segment\n            rotate([0, 90, 0]) \n                cylinder(h=segment_length, d=current_diameter, $fn=16);\n            \n            // Add scale texture rings\n            scale_ring(current_diameter);\n        }\n    }\n}\n\n// Add scale texture to body segments\nmodule scale_ring(diameter) {\n    for(j = [0:5]) {\n        rotate([0, 0, j * 60]) {\n            translate([segment_length/2, diameter/2 - scale_depth, 0])\n                scale([scale_size, scale_depth, scale_size])\n                    sphere(r=1, $fn=6);\n        }\n    }\n}\n\n// Create the distinct copperhead-shaped head\nmodule snake_head() {\n    translate([-head_length/2, 0, 0]) {\n        // Main head shape\n        scale([1, 0.8, 0.7])\n            sphere(r=head_width/2, $fn=32);\n        \n        // Snout extension\n        translate([head_length/2, 0, 0])\n            scale([1.5, 0.6, 0.5])\n                sphere(r=snout_length, $fn=16);\n        \n        // Add distinctive copperhead ridge\n        translate([-head_length/3, 0, head_height/2])\n            scale([1.2, 0.4, 0.3])\n                sphere(r=2, $fn=16);\n    }\n}\n\n// Create the eyes\nmodule eyes() {\n    // Left eye\n    translate([head_length/4, eye_offset, head_height/4])\n        sphere(r=eye_radius, $fn=16);\n    \n    // Right eye\n    translate([head_length/4, -eye_offset, head_height/4])\n        sphere(r=eye_radius, $fn=16);\n    \n    // Eye slits\n    translate([head_length/4 + eye_radius, eye_offset, head_height/4])\n        rotate([0, 90, 0])\n            scale([0.3, 1, 0.1])\n                cylinder(h=eye_radius*1.5, r=eye_radius, $fn=3);\n    \n    translate([head_length/4 + eye_radius, -eye_offset, head_height/4])\n        rotate([0, 90, 0])\n            scale([0.3, 1, 0.1])\n                cylinder(h=eye_radius*1.5, r=eye_radius, $fn=3);\n}\n\n// Simplified rattle at tail end\nmodule rattle() {\n    translate([body_length - 2, 0, 0]) {\n        // First rattle segment\n        cylinder(h=2, d=base_diameter * tail_taper * 0.8, $fn=8);\n        \n        // Second segment\n        translate([1, 0, 0])\n            cylinder(h=1.5, d=base_diameter * tail_taper * 0.6, $fn=8);\n    }\n}\n\n// Position the snake in a natural S-curve\nmodule positioned_snake() {\n    rotate([0, -15, 0]) {\n        translate([0, 0, 10]) {\n            copperhead();\n        }\n    }\n}\n\n// Render the final model\npositioned_snake();",
    "renders": true
  },
  {
    "animal": "coral",
    "openscad_code": "// Realistic branching coral\n// Approx 75 mm tall, designed for 3D printing\n\n$fn = 36;\n\n// Main coral structure\ndifference() {\n    union() {\n        // Base rock\n        translate([0, 0, -5])\n            scale([1.2, 1.2, 0.6])\n                sphere(10);\n\n        // Main trunk\n        translate([0, 0, 0])\n            cylinder(h = 25, r1 = 8, r2 = 4);\n\n        // Primary branches\n        branch(0, 0, 25, 0, 0, 0, 0.9);\n        branch(0, 0, 20, -20, 20, 15, 0.8);\n        branch(0, 0, 18, 30, -15, 10, 0.8);\n        branch(0, 0, 22, -10, -25, -20, 0.7);\n    }\n    \n    // Hollow base for material saving\n    translate([0, 0, -3])\n        cylinder(h = 20, r1 = 7, r2 = 3, $fn = 24);\n}\n\n// Branch generation module\nmodule branch(x, y, z, rot_x, rot_y, rot_z, scale_factor) {\n    translate([x, y, z]) {\n        rotate([rot_x, rot_y, rot_z]) {\n            // Branch segment\n            cylinder(h = 15 * scale_factor, r1 = 3 * scale_factor, r2 = 1.5 * scale_factor);\n            \n            // Secondary branches if scale factor is large enough\n            if (scale_factor > 0.5) {\n                translate([0, 0, 15 * scale_factor])\n                    branch(0, 0, 0, -25 + rand(-10, 10), 20 + rand(-10, 10), 0, scale_factor * 0.7);\n                translate([0, 0, 12 * scale_factor])\n                    branch(0, 0, 0, 30 + rand(-10, 10), -15 + rand(-10, 10), 0, scale_factor * 0.6);\n            }\n            \n            // Coral polyps at tips\n            if (scale_factor <= 0.5) {\n                translate([0, 0, 15 * scale_factor])\n                    polyps(scale_factor);\n            }\n        }\n    }\n}\n\n// Coral polyp cluster module\nmodule polyps(scale_factor) {\n    for (i = [0:7]) {\n        rotate([0, 0, i * 45]) {\n            translate([2 * scale_factor, 0, 0]) {\n                rotate([90 + rand(-20, 20), 0, 0]) {\n                    // Polyp body\n                    cylinder(h = 2 * scale_factor, r1 = 0.8 * scale_factor, r2 = 0.4 * scale_factor);\n                    \n                    // Polyp tentacles\n                    for (j = [0:5]) {\n                        rotate([0, 0, j * 60]) {\n                            translate([0, 0, 2 * scale_factor]) {\n                                rotate([0, 20 + rand(-10, 10), 0]) {\n                                    cylinder(h = 1.5 * scale_factor, r1 = 0.2 * scale_factor, r2 = 0.1 * scale_factor);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Random number generator for natural variation\nfunction rand(min, max) = min + (max - min) * (rands(0, 1, 1)[0]);",
    "renders": true
  },
  {
    "animal": "cormorant",
    "openscad_code": "// Cormorant Model - Realistic Medium Complexity\n// Wings folded, perched pose for easy printing\n\n// Overall scale\nscale_factor = 1.5;\n\n// Body parameters\nbody_length = 40 * scale_factor;\nbody_height = 20 * scale_factor;\nbody_width = 15 * scale_factor;\n\n// Head parameters\nhead_diameter = 12 * scale_factor;\nneck_length = 15 * scale_factor;\nneck_diameter = 5 * scale_factor;\n\n// Beak parameters\nbeak_length = 18 * scale_factor;\nbeak_base = 4 * scale_factor;\nbeak_tip = 1 * scale_factor;\n\n// Tail parameters\ntail_length = 15 * scale_factor;\ntail_width = 20 * scale_factor;\ntail_height = 3 * scale_factor;\n\n// Leg parameters\nleg_length = 18 * scale_factor;\nleg_diameter = 3 * scale_factor;\nfoot_length = 12 * scale_factor;\nfoot_width = 4 * scale_factor;\n\n// Wing parameters\nwing_length = 25 * scale_factor;\nwing_width = 10 * scale_factor;\n\nmodule cormorant_body() {\n    // Main body - elongated ellipsoid\n    scale([1, 0.7, 0.5])\n    sphere(d=body_length, $fn=32);\n    \n    // Chest protrusion\n    translate([body_length/4, 0, -body_height/4])\n    scale([0.6, 0.8, 0.4])\n    sphere(d=body_height * 1.2, $fn=24);\n}\n\nmodule cormorant_neck() {\n    // Neck - tapered cylinder\n    translate([-body_length/2 + 5, 0, body_height/2])\n    rotate([0, -20, 0])\n    cylinder(h=neck_length, d1=neck_diameter*1.2, d2=neck_diameter, $fn=16);\n}\n\nmodule cormorant_head() {\n    // Head - sphere with flattened sides\n    translate([-body_length/2 - neck_length + 2, 0, body_height/2 + neck_length/2])\n    rotate([0, -20, 0])\n    scale([1, 0.8, 0.9])\n    sphere(d=head_diameter, $fn=24);\n    \n    // Eye sockets\n    for(side = [-1, 1]) {\n        translate([-body_length/2 - neck_length, side * head_diameter/3, body_height/2 + neck_length/2])\n        rotate([0, -20, 0])\n        translate([0, -head_diameter/4, head_diameter/4])\n        sphere(d=head_diameter/6, $fn=12);\n    }\n}\n\nmodule cormorant_beak() {\n    // Upper beak\n    translate([-body_length/2 - neck_length - beak_length/2 + 2, 0, body_height/2 + neck_length/2 - 2])\n    rotate([0, -20, 0])\n    rotate([15, 0, 0])\n    scale([1, 0.8, 0.5])\n    cylinder(h=beak_length, d1=beak_base, d2=beak_tip, $fn=16);\n    \n    // Lower beak\n    translate([-body_length/2 - neck_length - beak_length/2 + 2, 0, body_height/2 + neck_length/2 - 4])\n    rotate([0, -20, 0])\n    rotate([-10, 0, 0])\n    scale([1, 0.7, 0.4])\n    cylinder(h=beak_length * 0.9, d1=beak_base * 0.9, d2=beak_tip * 0.8, $fn=16);\n}\n\nmodule cormorant_tail() {\n    // Tail fan\n    translate([body_length/2 - 2, 0, -body_height/4])\n    rotate([0, -30, 0])\n    scale([1, 0.3, 0.5])\n    cube([tail_length, tail_width, tail_height], center=true);\n    \n    // Tail feathers\n    for(i = [-2:2]) {\n        translate([body_length/2 + tail_length/2 - 2, i * 4, -body_height/4])\n        rotate([0, -30 + i * 5, 0])\n        cube([tail_length/2, 2, tail_height/2], center=true);\n    }\n}\n\nmodule cormorant_wing() {\n    // Folded wing - simplified\n    translate([-body_length/4, body_width/2 + 2, 0])\n    rotate([0, 0, -30])\n    scale([1, 0.2, 0.6])\n    cube([wing_length, wing_width, wing_width/2], center=true);\n}\n\nmodule cormorant_leg() {\n    // Upper leg\n    translate([-body_length/4, 0, -body_height/2 - leg_length/2])\n    rotate([15, 0, 0])\n    cylinder(h=leg_length/2, d=leg_diameter, $fn=12);\n    \n    // Lower leg\n    translate([-body_length/4, 0, -body_height/2 - leg_length])\n    rotate([75, 0, 0])\n    cylinder(h=leg_length/2, d=leg_diameter * 0.8, $fn=12);\n    \n    // Webbed foot\n    translate([-body_length/4 - foot_length/2, 0, -body_height/2 - leg_length - 2])\n    rotate([90, 0, 0])\n    scale([1, 0.3, 1])\n    cube([foot_length, foot_width, 2], center=true);\n    \n    // Toes\n    for(i = [-1.5, 0, 1.5]) {\n        translate([-body_length/4 + foot_length/2 - 2, i * foot_width/3, -body_height/2 - leg_length - 2])\n        rotate([90, 0, 0])\n        scale([0.3, 1, 1])\n        cube([6, 1.5, 1.5], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main body parts\n    cormorant_body();\n    cormorant_neck();\n    cormorant_head();\n    cormorant_beak();\n    cormorant_tail();\n    \n    // Wings\n    for(side = [-1, 1]) {\n        mirror([0, side, 0])\n        cormorant_wing();\n    }\n    \n    // Legs\n    for(side = [-1, 1]) {\n        translate([0, side * body_width/3, 0])\n        cormorant_leg();\n    }\n}",
    "renders": true
  },
  {
    "animal": "cougar",
    "openscad_code": "// Cougar - Realistic style, medium complexity\n// Designed for 3D printing with no overhangs\n\n// Main body module\nmodule body() {\n    // Torso - elongated sphere\n    scale([1.5, 0.7, 0.8])\n    sphere(r=15, $fn=32);\n}\n\n// Head module with facial features\nmodule head() {\n    // Main head shape\n    translate([20, 0, 10])\n    scale([1.2, 0.9, 0.7])\n    sphere(r=12, $fn=32);\n    \n    // Snout\n    translate([28, 0, 8])\n    scale([0.8, 0.6, 0.5])\n    sphere(r=8, $fn=32);\n    \n    // Ears\n    for(side = [-1, 1]) {\n        translate([15, side*8, 18])\n        rotate([0, side*15, 0])\n        scale([0.5, 0.3, 1])\n        cylinder(h=6, r1=4, r2=2, $fn=16);\n    }\n    \n    // Eyes\n    for(side = [-1, 1]) {\n        translate([22, side*5, 12])\n        scale([0.3, 0.3, 0.3])\n        sphere(r=2, $fn=16);\n    }\n}\n\n// Leg module - parameterized for all legs\nmodule leg(x_pos, y_pos, z_pos, angle) {\n    translate([x_pos, y_pos, z_pos])\n    rotate([0, 0, angle]) {\n        // Upper leg\n        rotate([-30, 0, 0])\n        cylinder(h=15, r1=4, r2=3, $fn=16);\n        \n        // Lower leg\n        translate([0, -12, -10])\n        rotate([30, 0, 0])\n        cylinder(h=12, r1=3, r2=2, $fn=16);\n        \n        // Paw\n        translate([0, -20, -15])\n        sphere(r=3, $fn=16);\n    }\n}\n\n// Tail module\nmodule tail() {\n    translate([-20, 0, 8])\n    rotate([0, 10, 0])\n    scale([1, 0.8, 0.8]) {\n        for(i = [0:5]) {\n            translate([-i*3, 0, -i*1.5])\n            rotate([0, 15, 0])\n            sphere(r=3-i*0.2, $fn=16);\n        }\n    }\n}\n\n// Combine all parts\nunion() {\n    // Main body\n    body();\n    \n    // Head assembly\n    head();\n    \n    // Four legs\n    leg(10, 8, -5, 15);    // Front right\n    leg(10, -8, -5, -15);   // Front left\n    leg(-10, 6, -5, -15);   // Rear right\n    leg(-10, -6, -5, 15);   // Rear left\n    \n    // Tail\n    tail();\n}\n\n// Add base for stability\ntranslate([0, 0, -8])\nscale([1.2, 0.8, 0.2])\nsphere(r=20, $fn=64);",
    "renders": true
  },
  {
    "animal": "cow",
    "openscad_code": "// Realistic Cow - Medium Complexity\n// Designed for 3D printing with no overhangs\n\n$fn = 32;\n\nmodule leg() {\n    // Main leg\n    translate([0, 0, 10])\n        cylinder(h=40, d1=12, d2=10);\n    \n    // Hoof\n    translate([0, 0, 0])\n        cylinder(h=8, d1=14, d2=12);\n}\n\nmodule udder() {\n    // Main udder\n    translate([0, -25, 20])\n        sphere(d=25);\n    \n    // Teats\n    for(i = [-1, 0, 1]) {\n        translate([i*8, -30, 15])\n            cylinder(h=10, d=6);\n    }\n}\n\nmodule head() {\n    // Main head\n    translate([0, 45, 80])\n        rotate([0, -10, 0])\n        scale([1.2, 1.1, 1])\n        sphere(d=35);\n    \n    // Muzzle\n    translate([0, 55, 75])\n        scale([1.1, 0.8, 0.7])\n        sphere(d=25);\n    \n    // Nostrils\n    for(x = [-6, 6]) {\n        translate([x, 62, 73])\n            rotate([90, 0, 0])\n            cylinder(h=8, d1=5, d2=2);\n    }\n    \n    // Eyes\n    for(x = [-12, 12]) {\n        translate([x, 45, 85])\n            sphere(d=6);\n        translate([x, 45, 87])\n            sphere(d=3);\n    }\n    \n    // Ears\n    for(x = [-15, 15]) {\n        translate([x, 35, 95])\n            rotate([0, 0, x > 0 ? -20 : 20])\n            scale([0.3, 1, 1.5])\n            sphere(d=15);\n    }\n    \n    // Horns\n    for(x = [-10, 10]) {\n        translate([x, 30, 100])\n            rotate([0, 0, x > 0 ? -15 : 15])\n            cylinder(h=15, d1=8, d2=4);\n    }\n}\n\nmodule body() {\n    // Main torso\n    translate([0, 0, 50])\n        scale([1.5, 2, 1])\n        sphere(d=60);\n    \n    // Back hump\n    translate([0, -10, 70])\n        sphere(d=40);\n    \n    // Chest\n    translate([0, 25, 40])\n        sphere(d=45);\n}\n\nmodule tail() {\n    // Tail base\n    translate([0, -45, 60])\n        rotate([0, 0, 20])\n        cylinder(h=30, d=8);\n    \n    // Tail tuft\n    translate([10, -65, 55])\n        sphere(d=12);\n}\n\n// Assemble the cow\nunion() {\n    // Body\n    body();\n    \n    // Head\n    head();\n    \n    // Legs\n    translate([-20, 20, 0]) leg();\n    translate([20, 20, 0]) leg();\n    translate([-20, -20, 0]) leg();\n    translate([20, -20, 0]) leg();\n    \n    // Udder\n    udder();\n    \n    // Tail\n    tail();\n    \n    // Spots pattern\n    for(pos = [[-15, 0, 60], [15, 10, 55], [0, -15, 65], [-10, 20, 70]]) {\n        translate(pos)\n            scale([1.2, 0.8, 0.6])\n            sphere(d=20);\n    }\n}\n\n// Base platform for stability\ntranslate([0, 0, -2])\n    cube([120, 180, 4], center=true);",
    "renders": true
  },
  {
    "animal": "cowbird",
    "openscad_code": "// Cowbird - Medium complexity realistic style\n// Size: ~70mm long, designed for 3D printing\n\n// Body dimensions\nbody_length = 35;\nbody_width = 20;\nbody_height = 25;\n\n// Head dimensions\nhead_diameter = 15;\n\n// Leg dimensions\nleg_length = 12;\nleg_width = 3;\n\n// Wing dimensions\nwing_length = 30;\nwing_width = 15;\n\n// Tail dimensions\ntail_length = 25;\ntail_width = 20;\n\n// Beak dimensions\nbeak_length = 8;\nbeak_width = 4;\nbeak_height = 3;\n\nmodule bird_body() {\n    // Main oval body\n    scale([1.3, 1, 1.1])\n    sphere(d=body_length, $fn=32);\n}\n\nmodule bird_head() {\n    // Slightly flattened sphere for head\n    translate([body_length/2 + head_diameter/3, 0, body_height/3])\n    scale([1.1, 1, 0.9])\n    sphere(d=head_diameter, $fn=32);\n    \n    // Beak - conical\n    translate([body_length/2 + head_diameter/2 + beak_length/2, 0, body_height/3])\n    rotate([0, -10, 0])\n    cylinder(h=beak_length, d1=beak_width, d2=beak_width/2, $fn=8);\n}\n\nmodule bird_wings() {\n    // Left wing\n    translate([body_length/4, -body_width/2 - wing_width/3, body_height/3])\n    rotate([0, 0, -20])\n    scale([1, 0.7, 0.2])\n    difference() {\n        sphere(d=wing_length, $fn=32);\n        translate([wing_length/2, 0, 0])\n        cube([wing_length, wing_width, wing_length], center=true);\n    }\n    \n    // Right wing\n    mirror([0, 1, 0])\n    translate([body_length/4, -body_width/2 - wing_width/3, body_height/3])\n    rotate([0, 0, -20])\n    scale([1, 0.7, 0.2])\n    difference() {\n        sphere(d=wing_length, $fn=32);\n        translate([wing_length/2, 0, 0])\n        cube([wing_length, wing_width, wing_length], center=true);\n    }\n}\n\nmodule bird_tail() {\n    // Fan-shaped tail\n    translate([-body_length/2 - tail_length/2, 0, 0])\n    rotate([0, 30, 0])\n    scale([1, 0.3, 0.8])\n    difference() {\n        sphere(d=tail_length, $fn=32);\n        translate([tail_length/2, 0, 0])\n        cube([tail_length, tail_width, tail_length], center=true);\n    }\n}\n\nmodule bird_legs() {\n    // Left leg\n    translate([0, -body_width/4, -body_height/2 - leg_length/2])\n    rotate([5, 0, 0])\n    cylinder(h=leg_length, d=leg_width, $fn=12);\n    \n    // Left foot\n    translate([0, -body_width/4 - leg_width, -body_height/2 - leg_length])\n    cube([leg_width*2, leg_width*3, leg_width/2]);\n    \n    // Right leg\n    translate([0, body_width/4, -body_height/2 - leg_length/2])\n    rotate([5, 0, 0])\n    cylinder(h=leg_length, d=leg_width, $fn=12);\n    \n    // Right foot\n    translate([0, body_width/4 + leg_width, -body_height/2 - leg_length])\n    cube([leg_width*2, leg_width*3, leg_width/2]);\n}\n\nmodule bird_eyes() {\n    // Left eye\n    translate([body_length/2 + head_diameter/3 + head_diameter/4, \n               -head_diameter/4, \n               body_height/3 + head_diameter/6])\n    sphere(d=2, $fn=16);\n    \n    // Right eye\n    translate([body_length/2 + head_diameter/3 + head_diameter/4, \n               head_diameter/4, \n               body_height/3 + head_diameter/6])\n    sphere(d=2, $fn=16);\n}\n\n// Main assembly\nunion() {\n    bird_body();\n    bird_head();\n    bird_wings();\n    bird_tail();\n    bird_legs();\n    bird_eyes();\n}",
    "renders": true
  },
  {
    "animal": "coyote",
    "openscad_code": "// Coyote Model - Realistic Style, Medium Complexity\n// Designed for 3D printing with minimal overhangs\n\n// Overall dimensions: ~80mm long, ~40mm tall, ~25mm wide\n\nmodule coyote_body() {\n    // Main torso\n    translate([0, 0, 15]) {\n        scale([1.2, 0.7, 1]) {\n            sphere(d=30, $fn=32);\n        }\n    }\n    \n    // Chest\n    translate([-10, 0, 10]) {\n        rotate([0, -10, 0]) {\n            scale([0.8, 0.7, 0.9]) {\n                sphere(d=20, $fn=32);\n            }\n        }\n    }\n    \n    // Rump\n    translate([15, 0, 15]) {\n        rotate([0, 10, 0]) {\n            scale([0.9, 0.8, 0.8]) {\n                sphere(d=25, $fn=32);\n            }\n        }\n    }\n    \n    // Belly\n    translate([0, 0, 8]) {\n        scale([1.1, 0.6, 0.3]) {\n            sphere(d=25, $fn=32);\n        }\n    }\n}\n\nmodule coyote_head() {\n    // Main head\n    translate([-25, 0, 25]) {\n        scale([1.2, 0.8, 0.9]) {\n            sphere(d=20, $fn=32);\n        }\n    }\n    \n    // Snout\n    translate([-35, 0, 22]) {\n        rotate([0, -20, 0]) {\n            scale([1.5, 0.5, 0.5]) {\n                cylinder(h=15, d1=15, d2=10, $fn=32);\n            }\n        }\n    }\n    \n    // Nose\n    translate([-45, 0, 20]) {\n        sphere(d=5, $fn=16);\n    }\n    \n    // Ears (triangular)\n    translate([-28, 7, 32]) {\n        rotate([0, 0, -15]) {\n            linear_extrude(height=2) {\n                polygon(points=[[0,0], [5,-8], [-5,-8]]);\n            }\n        }\n    }\n    \n    translate([-28, -7, 32]) {\n        rotate([0, 0, 15]) {\n            linear_extrude(height=2) {\n                polygon(points=[[0,0], [5,-8], [-5,-8]]);\n            }\n        }\n    }\n    \n    // Eyes\n    translate([-30, 4, 26]) {\n        sphere(d=3, $fn=16);\n    }\n    \n    translate([-30, -4, 26]) {\n        sphere(d=3, $fn=16);\n    }\n}\n\nmodule coyote_legs() {\n    // Front legs\n    for(side = [-1, 1]) {\n        translate([-15, side*6, 10]) {\n            rotate([0, side*5, 0]) {\n                cylinder(h=15, d=6, $fn=16);\n            }\n        }\n        \n        // Front paws\n        translate([-15, side*6, 2]) {\n            scale([1.2, 0.8, 0.5]) {\n                sphere(d=8, $fn=16);\n            }\n        }\n    }\n    \n    // Back legs\n    for(side = [-1, 1]) {\n        translate([15, side*5, 10]) {\n            rotate([0, -side*5, 0]) {\n                cylinder(h=15, d=7, $fn=16);\n            }\n        }\n        \n        // Back paws (larger)\n        translate([15, side*5, 2]) {\n            scale([1.4, 1, 0.5]) {\n                sphere(d=10, $fn=16);\n            }\n        }\n    }\n}\n\nmodule coyote_tail() {\n    // Tail base\n    translate([25, 0, 15]) {\n        rotate([0, 20, 0]) {\n            cylinder(h=20, d1=8, d2=5, $fn=16);\n        }\n    }\n    \n    // Tail tip\n    translate([35, 0, 20]) {\n        sphere(d=5, $fn=16);\n    }\n}\n\n// Combine all parts\nunion() {\n    coyote_body();\n    coyote_head();\n    coyote_legs();\n    coyote_tail();\n}",
    "renders": true
  },
  {
    "animal": "crab",
    "openscad_code": "// Realistic 3D printable crab – medium complexity\n// Overall size ≈ 80 mm across claws\n\n// crab body length = 50 mm\nbody_len = 50;\n// body width = 40 mm\nbody_w   = 40;\n// claw reach adds 15 mm each side\nclaw_reach = 15;\n\n// Wall thickness for printing\nwall = 1.5;\n\n// Main module\nmodule crab() {\n    // Whole crab pivoted slightly for printing\n    rotate([0,15,0])\n    union() {\n        body();\n        legs();\n        claws();\n        eyes();\n    }\n}\n\n// Main cephalothorax shell\nmodule body() {\n    difference() {\n        // Upper domed shell\n        scale([1, 0.8, 0.6])\n            sphere(d = body_w, $fn = 64);\n        // Flat underside\n        translate([0,0,-body_w*0.3])\n            cube([body_w*1.5, body_w*1.5, body_w*0.6], center=true);\n        // Hollow inside\n        scale([1-wall/body_w*2, 0.8-wall/body_w*2, 0.6-wall/body_w*2])\n            sphere(d = body_w-wall, $fn = 64);\n    }\n    // Small abdomen plate under rear\n    translate([0,-body_w*0.4, -body_w*0.25])\n        scale([0.5, 0.3, 0.2])\n            sphere(d = body_w*0.6, $fn = 32);\n}\n\n// Ten legs: 2 claws + 8 walking legs\n// Use same segment module for all\nmodule leg_segment(l=6, r=1.4) {\n    cylinder(h=l, r=r, $fn=12);\n}\n\n// Create one walking leg\nmodule walking_leg(side, seg_len, angles) {\n    translate([side*body_w/2, 0, 0])\n    rotate([90, 0, angles[0]])\n    leg_segment(seg_len, 1.2);\n    translate([side*body_w/2, 0, 0])\n    rotate([90, 0, angles[0]])\n    translate([0,0,seg_len])\n    rotate([angles[1], 0, 0])\n    leg_segment(seg_len*0.9, 1);\n    translate([side*body_w/2, 0, 0])\n    rotate([90, 0, angles[0]])\n    translate([0,0,seg_len])\n    rotate([angles[1], 0, 0])\n    translate([0,0,seg_len*0.9])\n    rotate([angles[2], 0, 0])\n    leg_segment(seg_len*0.7, 0.8);\n}\n\n// Create claws\nmodule claw() {\n    // Two-segment claw arm\n    rotate([90,0,0])\n    union() {\n        // Upper pincer\n        translate([0,0,6])\n            rotate([0,20,0])\n            scale([2.5,1,1])\n                sphere(d=6, $fn=16);\n        // Lower pincer\n        translate([0,0,6])\n            rotate([0,-20,0])\n            scale([2.5,1,1])\n                sphere(d=6, $fn=16);\n        // Arm\n        cylinder(h=12, r1=3.5, r2=2.2, $fn=16);\n    }\n}\n\n// Assemble all legs\nmodule legs() {\n    // Rear four pairs\n    for(i=[1:4])\n        walking_leg( 1, 7, [i*15-30, 20, -30]);\n    for(i=[1:4])\n        walking_leg(-1, 7, [-i*15+30, 20, -30]);\n}\n\n// Assemble claws\nmodule claws() {\n    // Right claw\n    translate([body_w/2+2, 0, 0])\n    rotate([0,0,-30])\n    claw();\n    // Left claw\n    translate([-body_w/2-2, 0, 0])\n    rotate([0,0,30])\n    mirror([1,0,0])\n    claw();\n}\n\n// Eyes on short stalks\nmodule eyes() {\n    // Right eye\n    translate([body_w/4, body_w/3, body_w*0.3])\n    cylinder(h=3, r1=1.2, r2=0.8, $fn=12);\n    translate([body_w/4, body_w/3, body_w*0.3+3])\n    sphere(d=2.4, $fn=16);\n    // Left eye\n    translate([-body_w/4, body_w/3, body_w*0.3])\n    cylinder(h=3, r1=1.2, r2=0.8, $fn=12);\n    translate([-body_w/4, body_w/3, body_w*0.3+3])\n    sphere(d=2.4, $fn=16);\n}\n\n// Render the crab\ncrab();",
    "renders": true
  },
  {
    "animal": "crake",
    "openscad_code": "// Realistic Crake - Medium Complexity\n// 3D printable model with proper wall thickness\n\n// Main parameters\nbody_length = 55;\nbody_height = 25;\nhead_size = 12;\nleg_height = 18;\nwall_thickness = 1.2;\n\n// Module for the main body\nmodule body() {\n    // Main torso - elongated ellipsoid shape\n    difference() {\n        // Main body form\n        hull() {\n            translate([-body_length/2, 0, 0])\n                scale([1.2, 0.8, 0.6])\n                sphere(d=body_height);\n            translate([body_length/2-5, 0, 0])\n                scale([0.8, 0.7, 0.5])\n                sphere(d=body_height*0.8);\n        }\n        \n        // Hollow out for printing\n        translate([0, 0, -2])\n            scale([0.8, 0.7, 0.5])\n            sphere(d=body_height*0.9);\n    }\n}\n\n// Module for the head\nmodule head() {\n    translate([body_length/2+8, 0, body_height/2]) {\n        // Main head shape\n        difference() {\n            rotate([0, -15, 0])\n                scale([0.9, 0.8, 0.7])\n                sphere(d=head_size);\n            \n            // Eye sockets\n            translate([head_size/3, head_size/3, 0])\n                sphere(d=head_size/3);\n            translate([head_size/3, -head_size/3, 0])\n                sphere(d=head_size/3);\n        }\n        \n        // Beak\n        translate([head_size/2, 0, -head_size/4])\n            rotate([0, -30, 0])\n            scale([1.5, 0.3, 0.3])\n            cylinder(h=head_size, d1=head_size/2, d2=0);\n    }\n}\n\n// Module for legs and feet\nmodule legs() {\n    // Left leg\n    translate([-body_length/3, body_height/2, -body_height/2]) {\n        // Upper leg\n        rotate([0, -30, 15])\n            cylinder(h=leg_height/2, d=wall_thickness*1.5);\n        \n        // Lower leg\n        translate([0, -leg_height/4, -leg_height/2.5])\n            rotate([0, 30, 0])\n            cylinder(h=leg_height/2, d=wall_thickness*1.2);\n        \n        // Foot\n        translate([0, -leg_height/2, -leg_height*0.8])\n            rotate([90, 0, 0])\n            scale([2, 0.5, 1])\n            cylinder(h=wall_thickness*2, d=wall_thickness*3);\n        \n        // Toes\n        for(i=[-1, 0, 1]) {\n            translate([i*3, -leg_height/2-3, -leg_height*0.8])\n                rotate([90, 0, 0])\n                scale([1.2, 0.4, 0.6])\n                cylinder(h=4, d=wall_thickness);\n        }\n    }\n    \n    // Right leg (mirror of left)\n    translate([-body_length/3, -body_height/2, -body_height/2]) {\n        mirror([0, 1, 0]) {\n            // Upper leg\n            rotate([0, -30, 15])\n                cylinder(h=leg_height/2, d=wall_thickness*1.5);\n            \n            // Lower leg\n            translate([0, -leg_height/4, -leg_height/2.5])\n                rotate([0, 30, 0])\n                cylinder(h=leg_height/2, d=wall_thickness*1.2);\n            \n            // Foot\n            translate([0, -leg_height/2, -leg_height*0.8])\n                rotate([90, 0, 0])\n                scale([2, 0.5, 1])\n                cylinder(h=wall_thickness*2, d=wall_thickness*3);\n            \n            // Toes\n            for(i=[-1, 0, 1]) {\n                translate([i*3, -leg_height/2-3, -leg_height*0.8])\n                    rotate([90, 0, 0])\n                    scale([1.2, 0.4, 0.6])\n                    cylinder(h=4, d=wall_thickness);\n            }\n        }\n    }\n}\n\n// Module for tail feathers\nmodule tail() {\n    translate([-body_length/2-5, 0, -body_height/4]) {\n        hull() {\n            translate([0, 0, 0])\n                scale([1, 0.3, 0.1])\n                sphere(d=body_height/2);\n            translate([-8, 0, 2])\n                scale([0.5, 0.8, 0.05])\n                sphere(d=body_height/2);\n        }\n    }\n}\n\n// Module for wing feathers\nmodule wings() {\n    // Left wing\n    translate([0, body_height/2+2, body_height/4]) {\n        rotate([0, 0, -20])\n            scale([1.2, 0.3, 0.4])\n            sphere(d=body_height);\n    }\n    \n    // Right wing\n    translate([0, -body_height/2-2, body_height/4]) {\n        rotate([0, 0, 20])\n            mirror([0, 1, 0])\n            scale([1.2, 0.3, 0.4])\n            sphere(d=body_height);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    legs();\n    tail();\n    wings();\n    \n    // Eye details\n    translate([body_length/2+8+head_size/3, head_size/3, body_height/2]) {\n        color(\"black\")\n        sphere(d=head_size/4);\n    }\n    translate([body_length/2+8+head_size/3, -head_size/3, body_height/2]) {\n        color(\"black\")\n        sphere(d=head_size/4);\n    }\n}",
    "renders": true
  },
  {
    "animal": "crane",
    "openscad_code": "// Mobile tower crane, 3D-printable, ~75 mm tall\n// All critical angles ≤ 45°, walls ≥ 1.2 mm\n\n$fn=32;\n\nmodule cab() {\n    // Main cab body\n    difference() {\n        cube([22,15,14], center=true);\n        translate([0,0,7]) cube([20,13,1], center=true);    // roof inset\n        translate([-10,0,0]) rotate([0,90,0]) cylinder(h=16,d=3); // window left\n        translate([10,0,0]) rotate([0,90,0]) cylinder(h=16,d=3);  // window right\n    }\n    // Cab roof with slight slope (printable)\n    translate([0,0,7.5]) cube([22,15,2], center=true);\n}\n\nmodule tower() {\n    // Base frame to avoid overhangs\n    translate([0,0,-1]) cube([28,28,2], center=true);\n\n    // Four legs as simple cylinders\n    for (x=[-10,10])\n        for (y=[-10,10])\n            translate([x,y,0]) cylinder(h=60,d=4);\n    \n    // Cross bracing plates (printable, no overhang)\n    translate([0,0,15]) cube([20,2,30], center=true);\n    translate([0,0,15]) cube([2,20,30], center=true);\n}\n\nmodule boom() {\n    // Main boom truss (triangular cross-section)\n    translate([0,0,60]) rotate([0,-30,0]) union() {\n        // Bottom chord\n        translate([0,-4,0]) cube([40,2,2], center=true);\n        // Top chords\n        translate([0,2,3.5]) cube([40,2,2], center=true);\n        // Vertical struts every 8 mm\n        for (i=[-20:8:20])\n            translate([i,0,1.75]) cube([2,2,3.5], center=true);\n        // Diagonal braces (45° printable)\n        for (i=[-16:8:16])\n            translate([i,-1,1]) rotate([0,0,45]) cube([2.8,2,2], center=true);\n    }\n}\n\nmodule counter_jib() {\n    // Short rear arm with counterweight\n    translate([0,0,60]) rotate([0,30,180]) union() {\n        cube([20,3,3], center=true);                // arm\n        translate([-10,0,0]) cube([6,6,6], center=true); // weight block\n    }\n}\n\nmodule hook_block() {\n    // Simple hook assembly\n    translate([0,0,45]) rotate([0,-30,0]) union() {\n        translate([20,0,0]) cylinder(h=8,d=2);      // cable\n        translate([20,0,-4]) sphere(d=5);           // block\n        translate([20,0,-7]) rotate([0,90,0]) cylinder(h=8,d=1.5); // hook\n    }\n}\n\n// Assemble crane\nunion() {\n    tower();\n    translate([0,0,60]) rotate([0,0,45]) cab();\n    boom();\n    counter_jib();\n    hook_block();\n}",
    "renders": true
  },
  {
    "animal": "crayfish",
    "openscad_code": "// Crayfish (realistic, medium complexity)\n// Overall size ~60 mm\n\n// Shell thickness for 3D printing\nshell = 1.2;\n\n// Main body\nmodule body() {\n    difference() {\n        union() {\n            // Carapace\n            translate([0,0,6])\n                scale([1,0.7,0.5])\n                sphere(d=20, $fn=30);\n            \n            // Abdomen segments\n            for(i=[1:5]) {\n                translate([0,-8-5*i,3])\n                    scale([1-0.1*i,0.7-0.05*i,0.4])\n                    sphere(d=12-2*i, $fn=20);\n            }\n            \n            // Tail fan\n            hull() {\n                translate([0,-35,2])\n                    cube([12,8,4], center=true);\n                translate([0,-35,0])\n                    cube([20,2,1], center=true);\n            }\n        }\n        \n        // Hollow out body\n        translate([0,0,6])\n            scale([1-0.1,0.7-0.1,0.5-0.1])\n            sphere(d=20-2*shell, $fn=30);\n        \n        for(i=[1:5]) {\n            translate([0,-8-5*i,3])\n                scale([1-0.1*i-0.1,0.7-0.05*i-0.1,0.4-0.1])\n                sphere(d=12-2*i-2*shell, $fn=20);\n        }\n    }\n}\n\n// Eye stalk\nmodule eye() {\n    translate([6,5,12])\n        rotate([0,20,0])\n        cylinder(h=6, d1=3, d2=2);\n    translate([6,5,18])\n        sphere(d=2.5);\n}\n\n// Leg segment\nmodule leg_segment(len, dia, angle) {\n    rotate([0,0,angle])\n        translate([len/2,0,0])\n            rotate([0,90,0])\n                cylinder(h=len, d=dia, $fn=8);\n}\n\n// Walking legs\nmodule legs() {\n    for(side=[-1,1]) {\n        mirror([side,0,0]) {\n            // First pair (claws)\n            translate([9,3,5])\n                rotate([0,0,30])\n                claw();\n            \n            // Walking legs\n            for(i=[1:3]) {\n                translate([8-i*2,3-i*2,5-i])\n                    rotate([0,20*i,0])\n                    union() {\n                        leg_segment(8, 2, -30);\n                        translate([8,0,0])\n                            rotate([30,0,0])\n                            leg_segment(6, 1.5, 0);\n                        translate([8+5,0,2])\n                            rotate([60,0,0])\n                            leg_segment(5, 1, 0);\n                    }\n            }\n        }\n    }\n}\n\n// Claw\nmodule claw() {\n    difference() {\n        union() {\n            // Upper claw\n            translate([4,0,0])\n                rotate([90,0,0])\n                cylinder(h=10, d1=4, d2=2, $fn=6);\n            translate([9,0,2])\n                rotate([0,0,10])\n                cube([6,2,4]);\n            \n            // Lower claw\n            mirror([0,0,1]) {\n                translate([4,0,0])\n                    rotate([90,0,0])\n                    cylinder(h=9, d1=4, d2=2, $fn=6);\n                translate([9,0,-2])\n                    rotate([0,0,-10])\n                    cube([6,2,4]);\n            }\n        }\n        \n        // Hollow claws\n        translate([4,0,0])\n            rotate([90,0,0])\n            cylinder(h=10, d1=4-2*shell, d2=2-2*shell, $fn=6);\n        mirror([0,0,1]) {\n            translate([4,0,0])\n                rotate([90,0,0])\n                cylinder(h=9, d1=4-2*shell, d2=2-2*shell, $fn=6);\n        }\n    }\n}\n\n// Antennae\nmodule antennae() {\n    for(side=[-1,1]) {\n        translate([side*4,8,10])\n            rotate([45*side,0,15])\n            cylinder(h=12, d=0.8, $fn=4);\n        translate([side*6,8,10])\n            rotate([30*side,0,-15])\n            cylinder(h=10, d=0.6, $fn=4);\n    }\n}\n\n// Assemble crayfish\nunion() {\n    body();\n    legs();\n    \n    // Eyes and antennae\n    eye();\n    mirror([1,0,0]) eye();\n    antennae();\n}",
    "renders": true
  },
  {
    "animal": "cricket",
    "openscad_code": "// Realistic 3D printable cricket – medium complexity\n// Approximate length: 70 mm (head to wing tip)\n\n$fn = 30; // smooth curves\n\nmodule cricket() {\n    // Body segments\n    color(\"darkolivegreen\")\n    union() {\n        head();\n        thorax();\n        abdomen();\n        legs();\n        wings();\n        antennae();\n    }\n}\n\nmodule head() {\n    // rounded capsule head\n    translate([0, 0, 5])\n    rotate([90, 0, 0])\n    cylinder(h = 12, r1 = 7, r2 = 7, center = true);\n    \n    // compound eyes\n    translate([5, 0, 6])\n    sphere(d = 5);\n    translate([-5, 0, 6])\n    sphere(d = 5);\n    \n    // mandibles\n    translate([3, -5, 3])\n    rotate([0, 30, 0])\n    cube([2, 6, 2], center = true);\n    translate([-3, -5, 3])\n    rotate([0, -30, 0])\n    cube([2, 6, 2], center = true);\n}\n\nmodule thorax() {\n    // prothorax\n    translate([0, 0, -4])\n    rotate([90, 0, 0])\n    cylinder(h = 10, r1 = 6, r2 = 7, center = true);\n}\n\nmodule abdomen() {\n    // six-segment abdomen tapering\n    for (i = [0:5]) {\n        height = -10 - i * 3.5;\n        radius = 7 - i * 0.8;\n        translate([0, 0, height])\n        rotate([90, 0, 0])\n        cylinder(h = 3.2, r1 = radius, r2 = radius - 0.3, center = true);\n    }\n    \n    // ovipositor (female cricket)\n    translate([0, 0, -32])\n    rotate([0, 0, 0])\n    cylinder(h = 12, r1 = 1, r2 = 0.5, center = true);\n}\n\nmodule legs() {\n    // hind legs\n    hind_leg(1);\n    hind_leg(-1);\n    \n    // middle legs\n    middle_leg(1);\n    middle_leg(-1);\n    \n    // front legs\n    front_leg(1);\n    front_leg(-1);\n}\n\nmodule hind_leg(side) {\n    // coxa\n    translate([side * 7, 0, -7])\n    rotate([0, 0, side * -20])\n    cylinder(h = 5, r = 2, center = true);\n    \n    // femur\n    translate([side * 12, side * -10, -12])\n    rotate([90, 0, side * -30])\n    cylinder(h = 20, r1 = 2, r2 = 1.5, center = true);\n    \n    // tibia\n    translate([side * 18, side * -22, -22])\n    rotate([90, 0, side * -35])\n    cylinder(h = 25, r1 = 1.5, r2 = 1, center = true);\n    \n    // tarsi\n    translate([side * 22, side * -35, -28])\n    rotate([90, 0, side * -40])\n    cylinder(h = 8, r = 0.6, center = true);\n}\n\nmodule middle_leg(side) {\n    translate([side * 6, 0, -2])\n    rotate([0, 0, side * -20])\n    cylinder(h = 4, r = 1.5, center = true);\n    \n    translate([side * 9, side * -8, -7])\n    rotate([90, 0, side * -25])\n    cylinder(h = 15, r1 = 1.5, r2 = 1, center = true);\n    \n    translate([side * 12, side * -15, -11])\n    rotate([90, 0, side * -30])\n    cylinder(h = 6, r = 0.6, center = true);\n}\n\nmodule front_leg(side) {\n    translate([side * 5, 0, 2])\n    rotate([0, 0, side * -20])\n    cylinder(h = 3, r = 1.2, center = true);\n    \n    translate([side * 7, side * -5, -1])\n    rotate([90, 0, side * -20])\n    cylinder(h = 10, r1 = 1.2, r2 = 0.8, center = true);\n    \n    translate([side * 9, side * -10, -3])\n    rotate([90, 0, side * -25])\n    cylinder(h = 5, r = 0.5, center = true);\n}\n\nmodule wings() {\n    // tegmina (hardened forewings)\n    translate([0, 0, -8])\n    rotate([0, 0, 0])\n    linear_extrude(height = 0.8)\n    polygon(points = [[0,0], [30,3], [28,8], [5,5], [0,0]]);\n    \n    mirror([1, 0, 0])\n    translate([0, 0, -8])\n    rotate([0, 0, 0])\n    linear_extrude(height = 0.8)\n    polygon(points = [[0,0], [30,3], [28,8], [5,5], [0,0]]);\n}\n\nmodule antennae() {\n    // left antenna\n    translate([4, 0, 11])\n    rotate([0, 0, 30])\n    cylinder(h = 35, r = 0.4, center = true);\n    \n    // right antenna\n    translate([-4, 0, 11])\n    rotate([0, 0, -30])\n    cylinder(h = 35, r = 0.4, center = true);\n}\n\n// Render the cricket scaled to 70 mm\nscale(0.7)\ncricket();",
    "renders": true
  },
  {
    "animal": "crocodile",
    "openscad_code": "// Crocodile model - medium complexity realistic style\n// Dimensions: ~80mm length, 25mm height, 18mm width\n// Wall thickness: 2mm for 3D printing\n\n// Head module with snout details\nmodule head() {\n    // Main head base\n    translate([-15, 0, 3]) rotate([0, 0, 5]) \n    scale([1.2, 0.7, 0.6]) sphere(8, $fn=8);\n    \n    // Snout extension\n    translate([-25, 0, 2.5]) scale([1.8, 0.5, 0.4]) sphere(7, $fn=8);\n    \n    // Eye sockets\n    translate([-12, 5, 6]) sphere(2, $fn=8);\n    translate([-12, -5, 6]) sphere(2, $fn=8);\n    \n    // Nostrils\n    translate([-28, 2.5, 5]) cylinder(h=2, r1=1, r2=0.5);\n    translate([-28, -2.5, 5]) cylinder(h=2, r1=1, r2=0.5);\n}\n\n// Body segments with scutes\nmodule body_segment(pos, scale_factor) {\n    translate(pos) scale([scale_factor, 1, 0.8]) {\n        // Main body segment\n        sphere(6, $fn=8);\n        \n        // Scutes (armor plates) along back\n        for(i = [-3:3]) {\n            translate([0, i*2, 3]) cube([3, 1.5, 1]);\n        }\n    }\n}\n\n// Leg module\nmodule leg(pos, angle, scale_factor) {\n    translate(pos) rotate([0, 0, angle]) {\n        // Upper leg\n        translate([0, 0, -1]) rotate([-90, 0, 0]) \n        cylinder(h=8*scale_factor, r1=3*scale_factor, r2=2*scale_factor);\n        \n        // Lower leg\n        translate([0, 0, -8*scale_factor-1]) rotate([-90, 0, 0])\n        cylinder(h=6*scale_factor, r1=2*scale_factor, r2=1.5*scale_factor);\n        \n        // Foot\n        translate([0, -6*scale_factor-1, -14*scale_factor]) \n        scale([1.5, 2, 0.5]) sphere(2*scale_factor, $fn=6);\n    }\n}\n\n// Tail segments\nmodule tail_segment(pos, scale_factor, angle) {\n    translate(pos) rotate([0, 0, angle]) scale([scale_factor, scale_factor, scale_factor]) {\n        // Main tail segment\n        cube([8, 6, 4], center=true);\n        \n        // Tail ridge\n        translate([0, 0, 2.5]) cube([8, 3, 1], center=true);\n    }\n}\n\n// Teeth module\nmodule teeth(pos, count) {\n    for(i = [1:count]) {\n        translate([pos[0]-i*2, pos[1], pos[2]]) \n        rotate([0, 20, 0]) cylinder(h=2, r1=0.5, r2=0.1);\n    }\n}\n\n// Main assembly\nunion() {\n    // Head\n    head();\n    \n    // Teeth along jaws\n    teeth([-20, 3, 2], 6);\n    teeth([-20, -3, 2], 6);\n    \n    // Body segments with decreasing size\n    body_segment([-5, 0, 3], 1);\n    body_segment([5, 0, 3], 0.9);\n    body_segment([15, 0, 2.8], 0.8);\n    body_segment([25, 0, 2.6], 0.7);\n    \n    // Tail segments\n    tail_segment([35, 0, 2], 0.6, 0);\n    tail_segment([42, 0, 1.8], 0.5, 5);\n    tail_segment([48, 0, 1.6], 0.4, 10);\n    tail_segment([53, 0, 1.4], 0.3, 15);\n    tail_segment([57, 0, 1.2], 0.25, 20);\n    \n    // Legs - front\n    leg([-5, 8, 0], 45, 0.8);\n    leg([-5, -8, 0], -45, 0.8);\n    \n    // Legs - back\n    leg([15, 7, 0], 30, 0.9);\n    leg([15, -7, 0], -30, 0.9);\n}",
    "renders": true
  },
  {
    "animal": "crossbill",
    "openscad_code": "// Crossbill in realistic style with medium complexity\n// Size: ~70mm long, 30mm high, 30mm wide\n\n$fn = 32;\n\n// Main body\nmodule body() {\n    // Torso - slightly curved ellipsoid\n    translate([0, 0, 5])\n    scale([1.2, 0.8, 1])\n    sphere(12);\n    \n    // Back\n    translate([0, 0, 8])\n    scale([1.3, 1, 0.8])\n    sphere(10);\n    \n    // Chest\n    translate([-2, 0, 3])\n    scale([0.9, 0.7, 1.2])\n    sphere(8);\n    \n    // Tail\n    translate([15, 0, 3])\n    rotate([0, -10, 0])\n    scale([1.5, 0.6, 0.3])\n    cylinder(h=12, r1=6, r2=2);\n}\n\n// Head with crossed bill\nmodule head() {\n    // Head sphere\n    translate([-12, 0, 12])\n    sphere(8);\n    \n    // Upper mandible\n    translate([-18, 0, 14])\n    rotate([0, 0, -25])\n    scale([0.3, 0.3, 1])\n    cylinder(h=15, r1=2, r2=1);\n    \n    // Lower mandible (crossed)\n    translate([-18, 0, 10])\n    rotate([0, 0, 45])\n    scale([0.3, 0.3, 1])\n    cylinder(h=15, r1=2, r2=1);\n    \n    // Eye\n    translate([-14, 4, 12])\n    sphere(1.5);\n    \n    // Crest\n    translate([-12, 0, 20])\n    rotate([0, 0, -5])\n    cylinder(h=4, r1=3, r2=1);\n}\n\n// Wing with feather details\nmodule wing() {\n    // Main wing\n    translate([2, 8, 8])\n    rotate([0, 10, 0])\n    scale([1, 0.3, 0.2])\n    cylinder(h=20, r1=8, r2=3);\n    \n    // Wing feathers\n    for(i = [0:3]) {\n        translate([5 + i*3, 10, 8])\n        rotate([0, 10 + i*5, 0])\n        scale([0.8, 0.1, 0.1])\n        cylinder(h=6 - i, r1=4, r2=1);\n    }\n}\n\n// Leg and foot\nmodule leg(side = 1) {\n    // Leg\n    translate([5, side*3, 0])\n    cylinder(h=8, r=1.5);\n    \n    // Foot\n    translate([5, side*3, -1])\n    rotate([0, 0, side*20])\n    scale([0.3, 1, 0.3])\n    cylinder(h=6, r1=2, r2=1);\n    \n    // Toes\n    for(i = [0:2]) {\n        translate([5 + i*2, side*(3 + i), -1])\n        rotate([0, 0, side*(20 + i*10)])\n        scale([0.2, 0.8, 0.2])\n        cylinder(h=4, r1=1.5, r2=0.5);\n    }\n}\n\n// Assemble the bird\nunion() {\n    body();\n    head();\n    wing();\n    mirror([0,1,0]) wing();\n    leg(1);\n    leg(-1);\n}",
    "renders": true
  },
  {
    "animal": "crow",
    "openscad_code": "// Realistic 3D printable crow (medium complexity)\n// Overall length ~70 mm\n\n$fn = 50;  // Smooth curves for printing\n\nmodule crow() {\n    // Body - main oval\n    translate([0, -15, 5]) rotate([90, 0, 0]) scale([1, 0.7, 1.2]) sphere(15);\n    \n    // Head\n    translate([0, 12, 18]) sphere(10);\n    \n    // Beak\n    difference() {\n        translate([-2, 22, 18]) rotate([0, 0, -10]) cylinder(h=12, r1=3, r2=1);\n        translate([-2, 22, 18]) rotate([0, 0, -10]) translate([0, 0, -1]) cylinder(h=14, r1=2.5, r2=0.5);\n    }\n    \n    // Eye\n    translate([4, 14, 20]) sphere(2);\n    \n    // Tail - fan shape\n    for(i = [-20:10:20]) {\n        rotate([0, 0, i]) translate([0, -35, 5]) cube([1, 20, 3]);\n    }\n    \n    // Wings\n    module wing(side) {\n        mirror([side, 0, 0]) {\n            // Main wing\n            translate([-5, -5, 8]) rotate([0, 0, 30]) rotate([30, 0, 0]) \n                scale([1, 0.3, 2]) sphere(10);\n            \n            // Wing feathers\n            for(i = [0:8]) {\n                rotate([0, 0, -20 + i*10]) \n                translate([-15 - i*2, -8 + i, 8 - i*0.5]) \n                cube([2, 12 - i*0.5, 1]);\n            }\n        }\n    }\n    \n    wing(1);\n    wing(-1);\n    \n    // Legs\n    module leg(side) {\n        translate([side*8, 0, 0]) {\n            // Thigh\n            translate([0, -5, 0]) rotate([0, 30, 0]) cylinder(h=8, r=2);\n            \n            // Lower leg\n            translate([0, -5, -6]) rotate([0, 30, 0]) cylinder(h=10, r=1.5);\n            \n            // Feet - 3 toes forward, 1 back\n            translate([0, -5, -16]) {\n                for(angle = [0, 30, -30, 180]) {\n                    rotate([0, 0, angle]) {\n                        rotate([0, 90, 0]) cylinder(h=8, r=1);\n                    }\n                }\n            }\n        }\n    }\n    \n    leg(1);\n    leg(-1);\n}\n\ncrow();",
    "renders": true
  },
  {
    "animal": "cuckoo",
    "openscad_code": "// Medium-complexity realistic cuckoo bird for 3D printing\n// Approx. 65 mm tall, 55 mm long, 35 mm wide\n// Wall thickness ≥ 2 mm for FDM printers\n\n$fn = 36;  // Smooth curves\n\nmodule body() {\n    // Main torso\n    union() {\n        // Chest area\n        translate([0, 0, 20])\n            scale([1, 0.6, 1.2])\n            sphere(d = 30);\n\n        // Abdomen\n        translate([0, 0, 10])\n            scale([1, 0.7, 1])\n            sphere(d = 28);\n\n        // Back\n        translate([0, 0, 25])\n            scale([1.2, 0.6, 1.1])\n            rotate([0, -20, 0])\n            sphere(d = 32);\n    }\n}\n\nmodule head() {\n    translate([-2, 0, 42]) {\n        union() {\n            // Main head\n            scale([0.9, 0.7, 1])\n            sphere(d = 22);\n\n            // Forehead/top\n            translate([0, 0, 4])\n                scale([0.8, 0.6, 0.4])\n                sphere(d = 20);\n        }\n    }\n}\n\nmodule beak() {\n    translate([-12, 0, 42]) {\n        rotate([0, -10, 0]) {\n            // Upper beak\n            translate([0, 0, 2])\n                scale([1, 0.8, 0.7])\n                cylinder(h = 10, d1 = 8, d2 = 2);\n\n            // Lower beak\n            translate([0, 0, -1])\n                scale([1, 0.8, 0.5])\n                cylinder(h = 8, d1 = 6, d2 = 1);\n        }\n    }\n}\n\nmodule tail() {\n    translate([15, 0, 25]) {\n        rotate([0, 30, 0]) {\n            // Tail feathers\n            for (i = [-2:2]) {\n                translate([0, i*3, -i*2])\n                    scale([1.2, 0.3, 0.8])\n                    cube([12, 4, 8], center = true);\n            }\n        }\n    }\n}\n\nmodule wing() {\n    translate([0, 0, 30]) {\n        rotate([0, -20, 30]) {\n            // Wing shape\n            scale([1.5, 0.2, 1])\n            sphere(d = 20);\n\n            // Wing tip\n            translate([8, 0, 0])\n                scale([0.8, 0.8, 0.4])\n                sphere(d = 12);\n        }\n    }\n}\n\nmodule wings() {\n    union() {\n        wing();\n        mirror([0, 1, 0])\n            wing();\n    }\n}\n\nmodule eye() {\n    translate([-9, 3.5, 45]) {\n        // White\n        color(\"white\")\n            sphere(d = 5);\n        \n        // Pupil\n        translate([0, 0, 2.1])\n            color(\"black\")\n            sphere(d = 2.5);\n    }\n}\n\nmodule eyes() {\n    union() {\n        eye();\n        mirror([0, 1, 0])\n            eye();\n    }\n}\n\nmodule legs() {\n    // Left leg\n    translate([0, 4, 0]) {\n        // Thigh\n        translate([0, 0, 8])\n            rotate([0, 0, -15])\n            cylinder(h = 12, d = 4);\n        \n        // Shank\n        translate([0, 0, 2])\n            rotate([0, 0, -15])\n            cylinder(h = 10, d = 3);\n        \n        // Foot\n        translate([0, 4, 0])\n            rotate([90, 0, 0])\n            cylinder(h = 8, d = 3);\n    }\n    \n    // Right leg\n    mirror([0, 1, 0])\n        translate([0, 4, 0]) {\n            // Thigh\n            translate([0, 0, 8])\n                rotate([0, 0, -15])\n                cylinder(h = 12, d = 4);\n            \n            // Shank\n            translate([0, 0, 2])\n                rotate([0, 0, -15])\n                cylinder(h = 10, d = 3);\n            \n            // Foot\n            translate([0, 4, 0])\n                rotate([90, 0, 0])\n                cylinder(h = 8, d = 3);\n        }\n}\n\n// Assemble the cuckoo\nunion() {\n    body();\n    head();\n    beak();\n    tail();\n    wings();\n    eyes();\n    legs();\n}",
    "renders": true
  },
  {
    "animal": "curlew",
    "openscad_code": "// Curlew - Medium complexity realistic style\n// Estimated print size: ~80mm length\n\n// Color constants for preview\n$fa = 2;\n$fs = 0.5;\n\n// Main body\nmodule body() {\n    difference() {\n        union() {\n            // Main torso\n            scale([1.2, 0.8, 1]) sphere(d = 30, center = true);\n            \n            // Extended back/tail\n            translate([10, 0, -5])\n                scale([1.8, 0.6, 0.4])\n                sphere(d = 20, center = true);\n                \n            // Chest area\n            translate([-8, 0, -8])\n                scale([0.8, 0.9, 0.6])\n                sphere(d = 25, center = true);\n        }\n        \n        // Neck hole\n        translate([-15, 0, 5])\n            rotate([0, 15, 0])\n            cylinder(h = 20, d1 = 8, d2 = 12, center = true);\n    }\n}\n\n// Head with long curved beak\nmodule head() {\n    translate([-25, 0, 15])\n    rotate([0, 15, 0])\n    union() {\n        // Head\n        sphere(d = 12, center = true);\n        \n        // Beak base\n        translate([-10, 0, 0])\n            scale([1.5, 0.4, 0.3])\n            sphere(d = 15, center = true);\n            \n        // Beak extension\n        hull() {\n            translate([-10, 0, 0])\n                sphere(d = 5, center = true);\n            translate([-35, 0, 0])\n                scale([0.4, 0.15, 0.15])\n                sphere(d = 10, center = true);\n        }\n        \n        // Eye\n        translate([0, 4, 2])\n            sphere(d = 2, center = true);\n    }\n}\n\n// Wing module\nmodule wing(side) {\n    mirror([side, 0, 0])\n    translate([0, 15, 5])\n    rotate([0, -10, 20])\n    difference() {\n        union() {\n            // Main wing shape\n            scale([1.2, 0.3, 0.8])\n            sphere(d = 25, center = true);\n            \n            // Wing tip\n            translate([15, 0, 5])\n                scale([0.8, 0.2, 0.6])\n                sphere(d = 15, center = true);\n        }\n        \n        // Wing feather detail (subtractive)\n        for(i = [1:3]) {\n            translate([5 + i*3, 0, -2])\n                rotate([0, 0, i*10])\n                scale([0.3, 0.1, 0.5])\n                cube([10, 2, 8], center = true);\n        }\n    }\n}\n\n// Leg module\nmodule leg(side) {\n    mirror([side, 0, 0])\n    translate([-5, 8, -18])\n    union() {\n        // Upper leg\n        cylinder(h = 15, d1 = 4, d2 = 3);\n        \n        // Lower leg\n        translate([0, 0, -16])\n            rotate([10, 0, 0])\n            cylinder(h = 12, d = 2.5);\n            \n        // Foot\n        translate([0, 0, -28])\n        union() {\n            // Main foot\n            scale([1.5, 0.3, 0.2])\n            sphere(d = 8, center = true);\n            \n            // Toes\n            for(i = [-1:1]) {\n                translate([i*3, 0, -1])\n                    scale([0.8, 0.2, 0.1])\n                    sphere(d = 6, center = true);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    wing(1);    // Right wing\n    wing(-1);   // Left wing\n    leg(1);     // Right leg\n    leg(-1);    // Left leg\n}",
    "renders": true
  },
  {
    "animal": "cuttlefish",
    "openscad_code": "// Cuttlefish - Realistic style, medium complexity\n// Body length ~80mm, printable without supports\n\n$fn = 48;\nbody_length = 80;\nmantle_thickness = 3;\nfin_thickness = 2;\n\nmodule mantle() {\n    // Main mantle body - elongated oval\n    difference() {\n        scale([1, 0.7, 1.8]) \n            sphere(d=body_length * 0.6);\n        \n        // Hollow interior for printing\n        translate([0, 0, -5])\n            scale([0.8, 0.5, 1.6])\n                sphere(d=body_length * 0.6 - mantle_thickness*2);\n    }\n}\n\nmodule head() {\n    // Head section with eyes\n    translate([0, 0, -body_length * 0.5]) {\n        // Head bulb\n        scale([0.8, 0.9, 0.6])\n            sphere(d=body_length * 0.4);\n        \n        // Eye sockets\n        for(side = [-1, 1]) {\n            translate([side * body_length * 0.15, 0, -body_length * 0.15]) {\n                rotate([0, 90, 0])\n                    cylinder(h=body_length * 0.3, d=body_length * 0.12);\n            }\n        }\n    }\n}\n\nmodule eyes() {\n    // Eye spheres\n    for(side = [-1, 1]) {\n        translate([side * body_length * 0.15, 0, -body_length * 0.15]) {\n            sphere(d=body_length * 0.1);\n        }\n    }\n}\n\nmodule arms() {\n    // 8 arms in pairs\n    arm_length = body_length * 0.5;\n    \n    for(pair = [0:3]) {\n        angle = pair * 45 + 22.5;\n        for(side = [-1, 1]) {\n            rotate([0, 0, side * angle])\n                translate([0, -body_length * 0.2, -body_length * 0.7]) {\n                    // Base of arm\n                    rotate([90, 0, 0])\n                        cylinder(h=arm_length * 0.3, d=arm_length * 0.12);\n                    \n                    // Suckers along arm\n                    for(i = [1:4]) {\n                        translate([0, 0, -i * arm_length * 0.1])\n                            scale([1, 1, 0.3])\n                                sphere(d=arm_length * 0.08);\n                    }\n                }\n        }\n    }\n    \n    // Two longer tentacles\n    tentacle_length = body_length * 0.8;\n    for(side = [-1, 1]) {\n        rotate([0, 0, side * 15])\n            translate([side * body_length * 0.1, -body_length * 0.2, -body_length * 0.75]) {\n                rotate([90, 0, 0])\n                    cylinder(h=tentacle_length * 0.4, d=arm_length * 0.08);\n                \n                // Tentacle clubs\n                translate([0, 0, -tentacle_length * 0.4])\n                    sphere(d=arm_length * 0.15);\n            }\n    }\n}\n\nmodule fins() {\n    // Side fins\n    fin_width = body_length * 0.4;\n    fin_height = body_length * 0.3;\n    \n    for(side = [-1, 1]) {\n        translate([side * body_length * 0.25, 0, body_length * 0.3]) {\n            rotate([0, side * 15, 0])\n                scale([0.3, 1, 1])\n                    difference() {\n                        sphere(d=fin_width);\n                        \n                        // Thin the fin\n                        translate([0, 0, -fin_height * 0.3])\n                            scale([1.2, 1.2, 0.5])\n                                sphere(d=fin_width);\n                    }\n        }\n    }\n}\n\nmodule siphon() {\n    // Funnel/siphon underneath\n    translate([0, body_length * 0.25, -body_length * 0.3]) {\n        rotate([0, 0, 0])\n            cylinder(h=body_length * 0.2, d1=body_length * 0.15, d2=body_length * 0.08);\n    }\n}\n\nunion() {\n    mantle();\n    head();\n    eyes();\n    arms();\n    fins();\n    siphon();\n}",
    "renders": true
  },
  {
    "animal": "dabchick",
    "openscad_code": "// Dabchick (Little Grebe) 3D Model\n// Medium complexity realistic style\n\n$fn = 32;\n\n// Overall scale\nscale = 1;\n\n// Main body module\nmodule body() {\n    // Central body - elongated ellipsoid\n    translate([0, 0, 15]) \n    scale([1.2, 0.8, 0.6]) \n    sphere(20);\n    \n    // Lower belly bulge\n    translate([0, 0, 8]) \n    scale([1.1, 0.9, 0.4]) \n    sphere(18);\n    \n    // Back hump\n    translate([-5, 0, 20]) \n    scale([0.9, 0.7, 0.5]) \n    sphere(15);\n}\n\n// Head module\nmodule head() {\n    // Main head shape\n    translate([22, 0, 25]) \n    scale([0.9, 0.7, 0.8]) \n    sphere(12);\n    \n    // Crown\n    translate([25, 0, 30]) \n    sphere(5);\n    \n    // Neck connection\n    translate([15, 0, 20]) \n    rotate([0, -10, 0]) \n    scale([1, 1, 0.8]) \n    cylinder(12, 8, 6);\n}\n\n// Beak module\nmodule beak() {\n    // Upper beak\n    translate([30, 0, 25]) \n    rotate([0, -25, 0]) \n    scale([1.5, 0.5, 0.4]) \n    cylinder(10, 3, 0.5);\n    \n    // Lower beak\n    translate([30, 0, 23]) \n    rotate([0, -35, 0]) \n    scale([1.4, 0.4, 0.3]) \n    cylinder(8, 2.5, 0.5);\n}\n\n// Eye module\nmodule eye() {\n    // Eye socket\n    translate([26, 5, 26]) \n    sphere(3);\n    \n    // Eye ball\n    translate([27, 6, 26]) \n    color(\"black\") \n    sphere(2);\n    \n    // Eye highlight\n    translate([27.5, 6.5, 26.5]) \n    color(\"white\") \n    sphere(0.5);\n}\n\n// Wing module\nmodule wing() {\n    // Left wing\n    translate([-5, 10, 22]) \n    rotate([0, 0, 30]) \n    scale([1, 0.2, 0.4]) \n    sphere(15);\n    \n    // Wing detail\n    for(i = [0:2]) {\n        translate([-5, 10, 22 - i*3]) \n        rotate([0, 0, 25 + i*5]) \n        scale([0.8, 0.1, 0.05]) \n        sphere(12);\n    }\n    \n    // Right wing (mirrored)\n    mirror([0, 1, 0]) \n    translate([-5, 10, 22]) \n    rotate([0, 0, 30]) \n    scale([1, 0.2, 0.4]) \n    sphere(15);\n}\n\n// Tail module\nmodule tail() {\n    // Tail feathers\n    translate([-18, 0, 18]) \n    rotate([20, 0, 0]) \n    scale([0.3, 1, 0.2]) \n    sphere(12);\n    \n    // Tail detail\n    for(i = [-8:8]) {\n        translate([-20, i, 18 - abs(i)*0.5]) \n        rotate([15 - abs(i), 0, 0]) \n        scale([0.2, 0.8, 0.1]) \n        cube([3, 2, 0.5]);\n    }\n}\n\n// Leg and foot module\nmodule legs() {\n    // Left leg\n    translate([0, 8, 5]) \n    cylinder(8, 2, 1.5);\n    \n    // Left foot\n    translate([0, 8, 0]) {\n        // Central foot pad\n        scale([1, 1.5, 0.3]) \n        sphere(4);\n        \n        // Toes\n        for(i = [-30, 0, 30]) {\n            rotate([0, 0, i]) \n            translate([3, 0, 0]) \n            scale([1.5, 0.3, 0.2]) \n            sphere(3);\n        }\n    }\n    \n    // Right leg (mirrored)\n    mirror([0, 1, 0]) \n    translate([0, 8, 5]) \n    cylinder(8, 2, 1.5);\n    \n    // Right foot\n    mirror([0, 1, 0]) \n    translate([0, 8, 0]) {\n        scale([1, 1.5, 0.3]) \n        sphere(4);\n        \n        for(i = [-30, 0, 30]) {\n            rotate([0, 0, i]) \n            translate([3, 0, 0]) \n            scale([1.5, 0.3, 0.2]) \n            sphere(3);\n        }\n    }\n}\n\n// Back detail\nmodule back_detail() {\n    // Feather texture\n    for(i = [-4:4]) {\n        for(j = [-2:2]) {\n            translate([-5 + i*3, j*4, 22 - j*2]) \n            scale([0.5, 0.5, 0.1]) \n            sphere(3);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    body();\n    head();\n    beak();\n    eye();\n    wing();\n    tail();\n    legs();\n    back_detail();\n}\n\n// Flat base for printing\ntranslate([-25, -15, -0.5]) \ncube([50, 30, 1]);",
    "renders": true
  },
  {
    "animal": "dace",
    "openscad_code": "// Common Dace (Leuciscus leuciscus) - Medium complexity realistic model\n// Total length ~80 mm, printable in one piece (no support needed)\n\n$fn = 36;               // Smooth curves\nbody_length = 80;\nbody_height = 20;\nbody_width  = 12;\n\n// Main body module\nmodule dace_body() {\n    // Tapered ellipsoid body\n    difference() {\n        scale([1, 0.6, 0.4])\n            sphere(d = body_length);          // Main body shape\n        \n        // Tail cutout\n        translate([body_length/2 - 2, 0, 0])\n            cube([5, body_width*2, body_height*2], center = true);\n    }\n}\n\n// Tail fin - forked\nmodule tail_fin() {\n    union() {\n        // Upper lobe\n        translate([body_length/2 - 2, 0, body_height/4])\n            rotate([0, -20, 0])\n            scale([0.8, 0.15, 0.6])\n                sphere(d = 30);\n        \n        // Lower lobe\n        translate([body_length/2 - 2, 0, -body_height/4])\n            rotate([0, 20, 0])\n            scale([0.8, 0.15, 0.6])\n                sphere(d = 30);\n        \n        // Tail root\n        translate([body_length/2 - 5, 0, 0])\n            scale([0.3, 0.15, 0.3])\n                sphere(d = 15);\n    }\n}\n\n// Dorsal fin\nmodule dorsal_fin() {\n    for(i = [0:3]) {\n        translate([body_length/2 - 20 - i*5, 0, body_height/2])\n            rotate([0, 0, 10 + i*5])\n            scale([0.2, 0.05, 1])\n                cylinder(h = 10, d1 = 8, d2 = 2);\n    }\n}\n\n// Anal fin\nmodule anal_fin() {\n    for(i = [0:2]) {\n        translate([body_length/2 - 25 - i*4, 0, -body_height/2])\n            rotate([0, 0, -10 - i*5])\n            scale([0.2, 0.05, 1])\n                cylinder(h = 8, d1 = 6, d2 = 2);\n    }\n}\n\n// Pectoral fin (left side)\nmodule pectoral_fin() {\n    translate([-body_length/4, body_width/2 + 2, -body_height/4])\n        rotate([0, 0, 45])\n        scale([0.3, 0.1, 0.6])\n            sphere(d = 15);\n}\n\n// Head with mouth\nmodule head() {\n    difference() {\n        // Head shape\n        translate([-body_length/2 + 5, 0, 0])\n            scale([0.8, 0.7, 0.7])\n                sphere(d = 20);\n        \n        // Mouth opening\n        translate([-body_length/2 + 2, 0, -body_height/6])\n            rotate([0, 20, 0])\n            scale([0.5, 0.3, 0.3])\n                cube([5, 3, 2], center = true);\n    }\n    \n    // Eye\n    translate([-body_length/2 + 8, body_width/3, body_height/4])\n        sphere(d = 3);\n    \n    // Eye pupil\n    color(\"black\")\n    translate([-body_length/2 + 9.5, body_width/3, body_height/4])\n        sphere(d = 1.5);\n}\n\n// Lateral line (series of scales)\nmodule lateral_line() {\n    for(i = [0:10]) {\n        translate([-body_length/2 + 15 + i*5, 0, 0])\n            scale([0.1, 1, 0.3])\n                sphere(d = 2);\n    }\n}\n\n// Main assembly\nunion() {\n    dace_body();\n    tail_fin();\n    dorsal_fin();\n    anal_fin();\n    pectoral_fin();\n    mirror([0,1,0]) pectoral_fin();  // Right pectoral fin\n    head();\n    lateral_line();\n}",
    "renders": true
  },
  {
    "animal": "dassie",
    "openscad_code": "// Dassie (Rock Hyrax) - Medium complexity realistic style\n// Approx 70mm long, 40mm high, 30mm wide\n\n// Main body\nmodule body() {\n    difference() {\n        // Main torso\n        scale([1.2, 0.8, 0.7])\n        sphere(d=40, $fn=32);\n        \n        // Belly flattening\n        translate([0, 0, -13])\n        cube([50, 30, 20], center=true);\n        \n        // Neck cavity\n        translate([20, 0, 5])\n        rotate([0, 10, 0])\n        scale([0.8, 0.8, 0.8])\n        sphere(d=20, $fn=16);\n    }\n}\n\n// Head\nmodule head() {\n    translate([25, 0, 15])\n    rotate([0, -10, 0])\n    difference() {\n        // Main head shape\n        scale([0.9, 0.7, 0.8])\n        sphere(d=25, $fn=32);\n        \n        // Snout taper\n        translate([5, 0, 0])\n        scale([1.2, 0.6, 0.5])\n        sphere(d=15, $fn=16);\n        \n        // Eye sockets\n        for(side = [-1, 1]) {\n            translate([8, side*7, 6])\n            sphere(d=5, $fn=8);\n        }\n        \n        // Nostrils\n        for(side = [-1, 1]) {\n            translate([12, side*2, 0])\n            rotate([0, 90, 0])\n            cylinder(h=3, r1=1.5, r2=0, $fn=8);\n        }\n    }\n}\n\n// Eye with pupil\nmodule eye() {\n    difference() {\n        sphere(d=4, $fn=16);\n        translate([1, 0, 0])\n        sphere(d=2, $fn=8);\n    }\n}\n\n// Ear\nmodule ear() {\n    rotate([0, 30, 0])\n    scale([0.3, 1, 0.7])\n    cylinder(h=8, r1=4, r2=2, $fn=8);\n}\n\n// Leg\nmodule leg(length, angle) {\n    translate([0, 0, -length/2])\n    rotate([angle, 0, 0])\n    union() {\n        // Upper leg\n        cylinder(h=length/2, r=4, $fn=12);\n        \n        // Lower leg\n        translate([0, 0, -length/2])\n        rotate([30, 0, 0])\n        cylinder(h=length/2, r=3, $fn=12);\n        \n        // Paw\n        translate([0, 0, -length])\n        scale([1.2, 1, 0.6])\n        sphere(d=7, $fn=8);\n    }\n}\n\n// Tail\nmodule tail() {\n    translate([-20, 0, 5])\n    rotate([0, 20, 0])\n    scale([0.3, 0.3, 1])\n    sphere(d=15, $fn=16);\n}\n\n// Whiskers\nmodule whiskers() {\n    for(side = [-1, 1]) {\n        for(angle = [30, 0, -30]) {\n            translate([10, side*5, 0])\n            rotate([0, 0, side*angle])\n            cylinder(h=8, r1=0.5, r2=0.1);\n        }\n    }\n}\n\n// Assemble the dassie\nunion() {\n    body();\n    \n    head();\n    \n    // Eyes\n    for(side = [-1, 1]) {\n        translate([33, side*7, 21])\n        color(\"black\")\n        eye();\n    }\n    \n    // Ears\n    for(side = [-1, 1]) {\n        translate([20, side*8, 25])\n        rotate([0, 0, side*20])\n        ear();\n    }\n    \n    // Front legs\n    for(side = [-1, 1]) {\n        translate([8, side*12, -5])\n        leg(15, 15);\n    }\n    \n    // Back legs\n    for(side = [-1, 1]) {\n        translate([-8, side*10, -5])\n        leg(18, 25);\n    }\n    \n    tail();\n    \n    // Whiskers\n    translate([30, 0, 15])\n    whiskers();\n}",
    "renders": true
  },
  {
    "animal": "deer",
    "openscad_code": "// Realistic 3D printable deer - medium complexity\n// Overall size: ~80mm long, ~60mm tall\n\n$fn = 24;\n\n// Main assembly\nunion() {\n    // Body\n    translate([0, 0, 15]) \n        scale([1.2, 0.8, 1]) \n        sphere(d = 30);\n    \n    // Neck\n    translate([10, 0, 30]) \n        rotate([0, 15, 0]) \n        cylinder(h = 20, d1 = 14, d2 = 10);\n    \n    // Head\n    translate([20, 0, 42]) \n        rotate([0, 10, 0]) \n        scale([1.4, 0.9, 1.1]) \n        sphere(d = 15);\n    \n    // Snout\n    translate([30, 0, 40]) \n        rotate([0, -5, 0]) \n        cylinder(h = 12, d1 = 8, d2 = 5);\n    \n    // Ears\n    for(side = [-1, 1]) {\n        translate([20, side * 6, 48]) \n            rotate([0, side * -10, side * 20]) \n            scale([0.3, 1, 1.5]) \n            sphere(d = 8);\n    }\n    \n    // Legs\n    module leg(x_pos, z_rot) {\n        translate([x_pos, 0, 0]) \n            rotate([0, 0, z_rot]) \n            cylinder(h = 25, d1 = 8, d2 = 6);\n        \n        // Hoof\n        translate([x_pos + sin(z_rot) * 25, 0, 0]) \n            rotate([90, 0, 0]) \n            cylinder(h = 4, d = 6);\n    }\n    \n    // Front legs\n    leg(-5, 0);\n    leg(5, 0);\n    \n    // Rear legs\n    leg(-15, 5);\n    leg(-5, 5);\n    \n    // Tail\n    translate([-15, 0, 15]) \n        rotate([0, 0, 45]) \n        scale([0.5, 0.3, 1]) \n        sphere(d = 8);\n    \n    // Antlers\n    for(side = [-1, 1]) {\n        translate([20, side * 5, 50]) {\n            // Main branch\n            rotate([0, side * 15, side * 20]) \n                cylinder(h = 18, d = 2.5);\n            \n            // Secondary branches\n            for(i = [0:1]) {\n                translate([0, 0, 6 + i * 6]) \n                    rotate([0, side * 45, side * 20 + i * 15]) \n                    cylinder(h = 8, d = 1.5);\n            }\n        }\n    }\n}\n\n// Eyes\nfor(side = [-1, 1]) {\n    difference() {\n        translate([25, side * 4, 42]) \n            sphere(d = 3);\n        translate([26.5, side * 4, 42]) \n            sphere(d = 1.5);\n    }\n}\n\n// Nose\ntranslate([36, 0, 40]) \n    sphere(d = 3);",
    "renders": true
  },
  {
    "animal": "degus",
    "openscad_code": "$fn = 16;\n\n// Overall scale\nscale_factor = 1.5;\n\n// Body core\nmodule body() {\n    union() {\n        // Torso\n        translate([0,0,15])\n            scale([20,35,25])\n                sphere();\n        \n        // Belly bulge\n        translate([0,0,5])\n            scale([15,25,15])\n                sphere();\n    }\n}\n\n// Head with snout\nmodule head() {\n    union() {\n        // Skull\n        translate([0,40,28])\n            scale([18,18,20])\n                sphere();\n        \n        // Snout\n        translate([0,52,25])\n            scale([12,12,10])\n                sphere();\n        \n        // Nose\n        translate([0,60,25])\n            scale([3,3,3])\n                sphere();\n        \n        // Cheek pouches\n        translate([-8,45,22])\n            scale([5,5,5])\n                sphere();\n        translate([8,45,22])\n            scale([5,5,5])\n                sphere();\n    }\n}\n\n// Ears\nmodule ears() {\n    union() {\n        // Left ear\n        translate([-12,35,42])\n            rotate([0,10,0])\n                scale([4,6,12])\n                    cylinder();\n        \n        // Right ear\n        translate([12,35,42])\n            rotate([0,-10,0])\n                scale([4,6,12])\n                    cylinder();\n        \n        // Inner left ear\n        difference() {\n            translate([-12,35,42])\n                rotate([0,10,0])\n                    scale([4,6,12])\n                        cylinder();\n            translate([-12,35,45])\n                rotate([0,10,0])\n                    scale([2,4,10])\n                        cylinder();\n        }\n        \n        // Inner right ear\n        difference() {\n            translate([12,35,42])\n                rotate([0,-10,0])\n                    scale([4,6,12])\n                        cylinder();\n            translate([12,35,45])\n                rotate([0,-10,0])\n                    scale([2,4,10])\n                        cylinder();\n        }\n    }\n}\n\n// Eyes\nmodule eyes() {\n    union() {\n        // Left eye\n        translate([-7,45,32])\n            scale([3,3,3])\n                sphere();\n        \n        // Right eye\n        translate([7,45,32])\n            scale([3,3,3])\n                sphere();\n        \n        // Pupils\n        translate([-7,47,32])\n            scale([1.5,1.5,1.5])\n                sphere();\n        translate([7,47,32])\n            scale([1.5,1.5,1.5])\n                sphere();\n    }\n}\n\n// Tail\nmodule tail() {\n    union() {\n        // Base\n        translate([0,-30,25])\n            rotate([0,20,0])\n                scale([6,6,40])\n                    cylinder();\n        \n        // Tip\n        translate([0,-55,35])\n            scale([3,3,3])\n                sphere();\n    }\n}\n\n// Paws\nmodule paws() {\n    union() {\n        // Front left\n        translate([-15,30,5])\n            scale([6,8,10])\n                cylinder();\n        \n        // Front right\n        translate([15,30,5])\n            scale([6,8,10])\n                cylinder();\n        \n        // Rear left\n        translate([-12,-25,5])\n            scale([8,10,12])\n                cylinder();\n        \n        // Rear right\n        translate([12,-25,5])\n            scale([8,10,12])\n                cylinder();\n    }\n}\n\n// Whiskers\nmodule whiskers() {\n    for(i=[-1,1]) {\n        for(j=[0:2]) {\n            rotate([0,0,i*20 + j*5])\n                translate([0,60,25])\n                    scale([0.5,8+i*j,0.5])\n                        cube();\n        }\n    }\n}\n\n// Assembly\nscale(scale_factor)\n    union() {\n        body();\n        head();\n        ears();\n        eyes();\n        tail();\n        paws();\n        whiskers();\n    }",
    "renders": true
  },
  {
    "animal": "dikdik",
    "openscad_code": "// Dikdik - OpenSCAD medium complexity realistic model\n// Body proportions based on Madoqua kirkii\n\n$fn = 24; // Smooth curves for 3D printing\n\n// Overall scale - ~80mm nose to tail\nscale_factor = 1;\n\n// Main body\nmodule body() {\n    difference() {\n        union() {\n            // Main torso\n            translate([0, 0, 15])\n            scale([1.2, 0.7, 1])\n            sphere(15);\n            \n            // Rump\n            translate([-20, 0, 12])\n            scale([0.8, 0.6, 0.8])\n            sphere(12);\n            \n            // Chest\n            translate([15, 0, 10])\n            scale([0.9, 0.7, 0.7])\n            sphere(10);\n        }\n        \n        // Leg holes\n        for(side = [-1, 1])\n        translate([5, side*8, 5])\n        rotate([0, 90, 0])\n        cylinder(h=10, d1=6, d2=8);\n    }\n}\n\n// Head with distinctive dikdik features\nmodule head() {\n    translate([25, 0, 22])\n    rotate([0, -10, 0])\n    union() {\n        // Main head\n        scale([1.2, 0.8, 1])\n        sphere(8);\n        \n        // Snout\n        translate([8, 0, -2])\n        scale([1.5, 0.6, 0.4])\n        sphere(6);\n        \n        // Eyes\n        for(side = [-1, 1])\n        translate([4, side*5, 2])\n        sphere(2);\n        \n        // Ears\n        for(side = [-1, 1])\n        translate([0, side*6, 4])\n        rotate([0, 0, side*20])\n        scale([0.3, 0.1, 1])\n        cylinder(h=8, d1=4, d2=2);\n        \n        // Horns (small in females, still present)\n        for(side = [-1, 1])\n        translate([2, side*2, 5])\n        rotate([0, 0, side*10])\n        cylinder(h=6, d1=1.5, d2=0.5);\n    }\n}\n\n// Leg module with hoof\nmodule leg(height, angle) {\n    rotate([0, 0, angle])\n    union() {\n        // Upper leg\n        translate([0, 0, height/2])\n        scale([0.8, 0.8, 1])\n        cylinder(h=height, d1=5, d2=4);\n        \n        // Lower leg\n        translate([0, 0, height-3])\n        cylinder(h=height/2, d1=3.5, d2=3);\n        \n        // Hoof\n        translate([0, 0, height-1])\n        scale([1, 1.2, 0.3])\n        sphere(3);\n    }\n}\n\n// Tail\nmodule tail() {\n    translate([-28, 0, 18])\n    rotate([30, 0, 0])\n    union() {\n        // Tail base\n        cylinder(h=8, d1=4, d2=2);\n        \n        // Tuft\n        translate([0, 0, 8])\n        sphere(3);\n    }\n}\n\n// Assembly\nscale(scale_factor) {\n    body();\n    head();\n    tail();\n    \n    // Front legs\n    translate([15, 8, 5])\n    leg(20, 0);\n    translate([15, -8, 5])\n    leg(20, 0);\n    \n    // Hind legs\n    translate([-12, 8, 5])\n    leg(22, 0);\n    translate([-12, -8, 5])\n    leg(22, 0);\n}",
    "renders": true
  },
  {
    "animal": "dingo",
    "openscad_code": "// Realistic Dingo - Medium Complexity\n// Basic dimensions in mm\nbody_length = 70;\nbody_height = 35;\nbody_width = 25;\nhead_length = 25;\nhead_height = 20;\nleg_height = 25;\nleg_width = 8;\ntail_length = 40;\ntail_width = 8;\n\n// Wall thickness for 3D printing\nwall = 2;\n\nmodule dingo_body() {\n    // Main torso - elongated ellipsoid\n    translate([0, 0, leg_height + body_height/2])\n    scale([1, 0.6, 0.8])\n    sphere(d=body_width, $fn=32);\n    \n    // Chest extension\n    translate([body_length/4, 0, leg_height + body_height/3])\n    scale([0.8, 0.5, 0.6])\n    sphere(d=body_width*1.2, $fn=32);\n    \n    // Belly clearance\n    translate([0, 0, leg_height/2])\n    cube([body_length*1.2, body_width*0.8, leg_height], center=true);\n}\n\nmodule dingo_head() {\n    // Main head shape\n    translate([-body_length/2 - head_length/2, 0, leg_height + body_height*0.8])\n    rotate([0, 15, 0])\n    scale([1.2, 0.8, 1])\n    sphere(d=head_height, $fn=32);\n    \n    // Snout extension\n    translate([-body_length/2 - head_length, 0, leg_height + body_height*0.7])\n    rotate([0, 10, 0])\n    scale([1.5, 0.5, 0.6])\n    sphere(d=head_height*0.8, $fn=32);\n    \n    // Ears (pointed, upright)\n    for(side = [-1, 1]) {\n        translate([-body_length/2 - head_length/3, side*head_height/2, leg_height + body_height + head_height/2])\n        rotate([side*10, 0, 0])\n        cylinder(h=head_height*0.8, d1=head_height*0.3, d2=head_height*0.1, $fn=8);\n    }\n}\n\nmodule dingo_legs() {\n    // Front legs\n    for(x = [body_length/4, -body_length/4]) {\n        translate([x, body_width/3, leg_height/2])\n        cylinder(h=leg_height, d=leg_width, $fn=16);\n        \n        // Paws\n        translate([x, body_width/3, 2])\n        scale([1, 1.2, 0.5])\n        sphere(d=leg_width, $fn=16);\n    }\n    \n    // Hind legs\n    for(x = [body_length/2 - 5, body_length/2 + 5]) {\n        translate([x, -body_width/4, leg_height/2 + 3])\n        rotate([10, 0, 0])\n        cylinder(h=leg_height - 3, d=leg_width*1.2, $fn=16);\n        \n        // Paws\n        translate([x, -body_width/4, 2])\n        scale([1.2, 1.3, 0.5])\n        sphere(d=leg_width*1.1, $fn=16);\n    }\n}\n\nmodule dingo_tail() {\n    // Curved tail\n    translate([body_length/2 + tail_length/2, 0, leg_height + body_height/2])\n    rotate([0, 0, -20])\n    for(i = [0:5]) {\n        translate([i*tail_length/6, 0, sin(i*30)*3])\n        rotate([0, -i*3, 0])\n        scale([1, 0.8 - i*0.1, 0.8 - i*0.1])\n        sphere(d=tail_width, $fn=16);\n    }\n}\n\nmodule dingo_features() {\n    // Eyes\n    for(side = [-1, 1]) {\n        translate([-body_length/2 - head_length*0.8, side*head_height/3, leg_height + body_height*0.9])\n        sphere(d=2, $fn=8);\n    }\n    \n    // Nose\n    translate([-body_length/2 - head_length - 2, 0, leg_height + body_height*0.7])\n    sphere(d=3, $fn=8);\n}\n\n// Assemble the dingo\nunion() {\n    dingo_body();\n    dingo_head();\n    dingo_legs();\n    dingo_tail();\n    dingo_features();\n}",
    "renders": true
  },
  {
    "animal": "dodo",
    "openscad_code": "// Dodo Bird - Realistic Medium Complexity\n// Approx 75mm tall\n\n$fn = 32;\n\nmodule dodo_body() {\n    // Main body - egg shaped\n    translate([0, 0, 25]) {\n        scale([1.2, 1, 1.3]) sphere(r=20);\n    }\n    \n    // Belly bulge\n    translate([0, 10, 20]) {\n        scale([0.8, 0.6, 0.7]) sphere(r=18);\n    }\n}\n\nmodule dodo_head() {\n    // Head sphere\n    translate([0, -25, 45]) {\n        scale([0.9, 1.1, 1]) sphere(r=15);\n    }\n    \n    // Beak\n    translate([0, -40, 42]) {\n        rotate([20, 0, 0]) {\n            scale([0.4, 2, 0.4]) cylinder(r1=8, r2=3, h=18);\n        }\n    }\n    \n    // Beak hook\n    difference() {\n        translate([0, -50, 40]) {\n            rotate([30, 0, 0]) {\n                scale([0.5, 1.5, 0.5]) cylinder(r=6, h=8);\n            }\n        }\n        translate([0, -54, 38]) {\n            sphere(r=6);\n        }\n    }\n}\n\nmodule dodo_eyes() {\n    // Left eye\n    translate([-6, -28, 50]) {\n        sphere(r=2.5);\n    }\n    \n    // Right eye\n    translate([6, -28, 50]) {\n        sphere(r=2.5);\n    }\n}\n\nmodule dodo_wings() {\n    // Left wing\n    translate([-20, -5, 35]) {\n        rotate([0, 0, -20]) {\n            scale([0.3, 1, 0.8]) cylinder(r=15, h=3);\n        }\n    }\n    \n    // Right wing\n    translate([20, -5, 35]) {\n        rotate([0, 0, 20]) {\n            scale([0.3, 1, 0.8]) cylinder(r=15, h=3);\n        }\n    }\n}\n\nmodule dodo_legs() {\n    // Left leg\n    translate([-8, 15, 5]) {\n        cylinder(r=3, h=15);\n        translate([0, 0, 0]) {\n            rotate([0, 90, 0]) {\n                scale([1.5, 0.5, 0.5]) cylinder(r=2, h=8);\n            }\n        }\n    }\n    \n    // Right leg\n    translate([8, 15, 5]) {\n        cylinder(r=3, h=15);\n        translate([0, 0, 0]) {\n            rotate([0, 90, 0]) {\n                scale([1.5, 0.5, 0.5]) cylinder(r=2, h=8);\n            }\n        }\n    }\n}\n\nmodule dodo_tail() {\n    // Tail feathers\n    for(i = [0:2]) {\n        rotate([0, 0, -20 + i*20]) {\n            translate([-15 - i*3, 15, 25]) {\n                scale([0.3, 0.8, 1]) rotate([0, 20, 0]) {\n                    cylinder(r=8 - i*2, h=3);\n                }\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    dodo_body();\n    dodo_head();\n    dodo_eyes();\n    dodo_wings();\n    dodo_legs();\n    dodo_tail();\n}",
    "renders": true
  },
  {
    "animal": "dog",
    "openscad_code": "// Medium-Complexity Realistic Dog – OpenSCAD\n// Body dimensions chosen for 80 mm nose-to-tail length\n\n$fn = 36;          // Good balance between smoothness and printability\nwall = 2;          // 2 mm shell for FDM printing\n\nmodule roundedBox(s, r){\n    // Utility: oblong capsule for torso/limbs\n    hull(){\n        translate([ r,  r,  r]) sphere(r);\n        translate([s.x-r,  r,  r]) sphere(r);\n        translate([ r, s.y-r,  r]) sphere(r);\n        translate([s.x-r, s.y-r,  r]) sphere(r);\n        translate([ r,  r, s.z-r]) sphere(r);\n        translate([s.x-r,  r, s.z-r]) sphere(r);\n        translate([ r, s.y-r, s.z-r]) sphere(r);\n        translate([s.x-r, s.y-r, s.z-r]) sphere(r);\n    }\n}\n\nmodule ear(){\n    // Droopy ear with slight curl\n    difference(){\n        hull(){\n            sphere(5);\n            translate([0,-12,0]) sphere(4);\n            translate([0,-6,-8]) sphere(3);\n        }\n        translate([0,-6,-8]) cube([20,20,8], center=true);  // Remove inner\n    }\n}\n\nmodule leg(){\n    // Simple straight leg with paw\n    union(){\n        cylinder(h=20, r=4);\n        translate([0,0,-2]) sphere(5);  // Paw\n    }\n}\n\nmodule tail(){\n    // Curled tail using hull of spheres\n    hull(){\n        sphere(4);\n        translate([0,-8,5]) sphere(3);\n        translate([4,-12,8]) sphere(2.5);\n        translate([8,-14,6]) sphere(2);\n    }\n}\n\nmodule body(){\n    difference(){\n        roundedBox([35,15,20], 8);      // Main torso\n        translate([10,0,10]) cube([20,20,20], center=true); // Hollow\n    }\n}\n\nmodule head(){\n    difference(){\n        hull(){\n            sphere(9);                  // Skull\n            translate([7,0,0]) sphere(7); // Snout\n        }\n        // Eye sockets\n        for(side=[-1,1])\n            translate([5, side*6, 3])\n                rotate([0,90,0])\n                    cylinder(h=10, r=3.5);\n        // Nostrils\n        for(side=[-1,1])\n            translate([11, side*2, -2])\n                sphere(1.5);\n    }\n    // Eyes\n    color(\"black\")\n    for(side=[-1,1])\n        translate([5.5, side*6, 2.5])\n            sphere(2);\n    // Ears\n    translate([0, 9, 5]) rotate([0,-45,0]) ear();\n    translate([0,-9, 5]) mirror([0,1,0]) rotate([0,-45,0]) ear();\n}\n\n// Assembly\nunion(){\n    // Body\n    translate([0,0,20]) body();\n    \n    // Head\n    translate([22,0,28]) rotate([0,-10,0]) head();\n    \n    // Legs\n    translate([ 8, 6,0]) leg();\n    translate([ 8,-6,0]) leg();\n    translate([-8, 6,0]) leg();\n    translate([-8,-6,0]) leg();\n    \n    // Tail\n    translate([-20,0,20]) rotate([0,0,-30]) tail();\n}",
    "renders": true
  },
  {
    "animal": "dolphin",
    "openscad_code": "// Dolphin model - medium complexity realistic style\n// 3D printable dolphin approximately 80mm long\n\n// Main parameters\nbody_length = 80;\nbody_height = 25;\nbody_width = 20;\n\n// Body module\nmodule body() {\n    // Main torso\n    translate([0, 0, body_height/2])\n    scale([1, 0.7, 0.4])\n    sphere(d=body_width, $fn=40);\n    \n    // Front taper\n    translate([-body_length/2, 0, body_height/2])\n    scale([1.5, 0.8, 0.5])\n    rotate([0, 20, 0])\n    cylinder(h=body_length/3, d1=body_width*0.8, d2=body_width*0.3, $fn=30);\n    \n    // Rear taper\n    translate([body_length/2, 0, body_height/2])\n    scale([1.5, 0.6, 0.3])\n    rotate([0, -20, 0])\n    cylinder(h=body_length/4, d1=body_width*0.7, d2=0, $fn=30);\n}\n\n// Tail flukes\nmodule tail() {\n    // Tail stock\n    translate([body_length/2 + 5, 0, body_height/2 - 5])\n    rotate([0, -30, 0])\n    cylinder(h=15, d1=12, d2=8, $fn=20);\n    \n    // Upper fluke\n    translate([body_length/2 + 18, 0, body_height/2])\n    rotate([0, 0, 15])\n    scale([1, 2.5, 0.2])\n    sphere(d=12, $fn=30);\n    \n    // Lower fluke\n    translate([body_length/2 + 18, 0, body_height/2 - 10])\n    rotate([0, 0, -15])\n    scale([1, 2.5, 0.2])\n    sphere(d=12, $fn=30);\n}\n\n// Dorsal fin\nmodule dorsal_fin() {\n    translate([body_length/4, 0, body_height/2 + 8])\n    rotate([0, 10, 0])\n    linear_extrude(height=0.5)\n    polygon(points=[\n        [0, 0],\n        [-5, 12],\n        [5, 12],\n        [0, 0]\n    ]);\n}\n\n// Pectoral fins\nmodule pectoral_fins() {\n    // Left fin\n    translate([-body_length/4, -body_width/2 - 5, body_height/2 - 8])\n    rotate([0, -20, -45])\n    scale([1.5, 1, 0.3])\n    sphere(d=12, $fn=20);\n    \n    // Right fin\n    translate([-body_length/4, body_width/2 + 5, body_height/2 - 8])\n    rotate([0, -20, 45])\n    scale([1.5, 1, 0.3])\n    sphere(d=12, $fn=20);\n}\n\n// Head and beak\nmodule head() {\n    // Main head\n    translate([-body_length/2 - 10, 0, body_height/2])\n    scale([1.2, 0.8, 0.8])\n    sphere(d=body_width, $fn=30);\n    \n    // Beak/snout\n    translate([-body_length/2 - 20, 0, body_height/2 - 2])\n    rotate([0, 10, 0])\n    cylinder(h=15, d1=body_width*0.3, d2=body_width*0.1, $fn=20);\n}\n\n// Eye details\nmodule eyes() {\n    // Left eye\n    translate([-body_length/2 - 8, -body_width/3, body_height/2 + 3])\n    sphere(d=2, $fn=15);\n    \n    // Right eye\n    translate([-body_length/2 - 8, body_width/3, body_height/2 + 3])\n    sphere(d=2, $fn=15);\n}\n\n// Blowhole\nmodule blowhole() {\n    translate([0, 0, body_height/2 + 5])\n    cylinder(h=3, d1=3, d2=2, $fn=10);\n}\n\n// Assemble the dolphin\nunion() {\n    body();\n    tail();\n    dorsal_fin();\n    pectoral_fins();\n    head();\n    eyes();\n    blowhole();\n}",
    "renders": true
  },
  {
    "animal": "donkey",
    "openscad_code": "// Donkey 3D Printable Model - Realistic Style, Medium Complexity\n// Overall dimensions: ~80mm length, 40mm height, 25mm width\n\n// Body thickness for 3D printing\nwall = 2;\n\n// Main body module\nmodule body() {\n    // Main torso\n    translate([0, 0, 12])\n    scale([1.8, 1, 1.2])\n    sphere(10);\n    \n    // Belly\n    translate([0, 0, 6])\n    scale([1.6, 0.8, 0.6])\n    sphere(8);\n    \n    // Rump\n    translate([-15, 0, 12])\n    scale([1.2, 1, 1])\n    sphere(9);\n    \n    // Chest\n    translate([15, 0, 12])\n    scale([0.9, 0.9, 0.9])\n    sphere(8);\n}\n\n// Head module\nmodule head() {\n    // Main head\n    translate([25, 0, 20])\n    rotate([0, -10, 0])\n    scale([1.3, 0.8, 1])\n    sphere(7);\n    \n    // Snout\n    translate([32, 0, 19])\n    rotate([0, -10, 0])\n    scale([1, 0.6, 0.7])\n    sphere(5);\n    \n    // Ears (left and right)\n    // Left ear\n    translate([20, 6, 27])\n    rotate([20, 0, -30])\n    scale([0.3, 0.1, 1])\n    cylinder(8, 3, 2);\n    \n    // Right ear\n    translate([20, -6, 27])\n    rotate([20, 0, 30])\n    scale([0.3, 0.1, 1])\n    cylinder(8, 3, 2);\n}\n\n// Leg module with hoof\nmodule leg(height, angle, x_pos, y_pos) {\n    translate([x_pos, y_pos, height/2])\n    rotate([angle, 0, 0])\n    union() {\n        // Upper leg\n        cylinder(height * 0.6, 3, 2.5);\n        \n        // Lower leg\n        translate([0, 0, height * 0.6])\n        cylinder(height * 0.4, 2.5, 2);\n        \n        // Hoof\n        translate([0, 0, height])\n        scale([1.2, 1, 0.5])\n        cylinder(2, 2, 2);\n    }\n}\n\n// Tail module\nmodule tail() {\n    translate([-18, 0, 18])\n    rotate([0, 20, 0])\n    scale([0.3, 0.3, 1])\n    cylinder(12, 2, 1);\n    \n    // Tuft at end of tail\n    translate([-23, 0, 15])\n    sphere(2.5);\n}\n\n// Mane module\nmodule mane() {\n    for(i = [-15:3:15]) {\n        translate([i, 0, 22])\n        rotate([0, 0, sin(i*5)*5])\n        scale([0.3, 0.3, 1])\n        cylinder(6, 1.5, 1);\n    }\n}\n\n// Eyes module\nmodule eyes() {\n    // Left eye\n    translate([28, 3.5, 22])\n    rotate([0, -10, 0])\n    sphere(1.2);\n    \n    // Right eye\n    translate([28, -3.5, 22])\n    rotate([0, -10, 0])\n    sphere(1.2);\n}\n\n// Nostrils\nmodule nostrils() {\n    // Left nostril\n    translate([35, 1.5, 19])\n    rotate([0, -20, 0])\n    sphere(0.8);\n    \n    // Right nostril\n    translate([35, -1.5, 19])\n    rotate([0, -20, 0])\n    sphere(0.8);\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    \n    // Legs - front pair\n    leg(14, 10, 12, 6);\n    leg(14, 10, 12, -6);\n    \n    // Legs - rear pair\n    leg(13, 8, -12, 6);\n    leg(13, 8, -12, -6);\n    \n    tail();\n    mane();\n    eyes();\n    nostrils();\n}",
    "renders": true
  },
  {
    "animal": "dormouse",
    "openscad_code": "// Realistic dormouse model for 3D printing\n// Medium complexity with anatomically-inspired features\n\n$fn = 32;\nbody_length = 50;\nbody_width = 25;\nbody_height = 20;\nhead_length = 18;\nhead_width = 15;\nhead_height = 14;\ntail_length = 45;\ntail_diameter = 6;\nleg_length = 12;\nleg_diameter = 4;\near_size = 6;\nwhisker_length = 12;\n\nmodule dormouse() {\n    union() {\n        // Main body - elongated ellipsoid\n        translate([0, 0, body_height/2])\n        scale([1, 0.7, 0.5])\n        sphere(d=body_length);\n        \n        // Head - sphere with slight elongation\n        translate([-(body_length/2 + head_length/2 - 5), 0, body_height/2 + 5])\n        scale([1.2, 1, 1])\n        sphere(d=head_length);\n        \n        // Snout extension\n        translate([-(body_length/2 + head_length + 2), 0, body_height/2 + 3])\n        scale([0.8, 0.6, 0.5])\n        sphere(d=8);\n        \n        // Ears - positioned on head\n        for(side = [-1, 1]) {\n            translate([-(body_length/2 + head_length/2), side * (head_width/2 - 2), body_height/2 + head_height/2])\n            rotate([0, 20 * side, 0])\n            scale([0.7, 1, 1.2])\n            sphere(d=ear_size);\n        }\n        \n        // Eyes - small spheres\n        for(side = [-1, 1]) {\n            translate([-(body_length/2 + head_length/2 + 2), side * (head_width/3), body_height/2 + 6])\n            color(\"black\")\n            sphere(d=2);\n        }\n        \n        // Nose - tiny sphere\n        translate([-(body_length/2 + head_length + 5), 0, body_height/2 + 3])\n        color(\"black\")\n        sphere(d=1.5);\n        \n        // Whiskers - thin cylinders\n        for(side = [-1, 1]) {\n            for(i = [0:2]) {\n                translate([-(body_length/2 + head_length + 4), side * (head_width/3), body_height/2 + 2 - i*1.5])\n                rotate([0, side * 15 + i*5, 90])\n                cylinder(h=whisker_length, d=0.5);\n            }\n        }\n        \n        // Tail - tapered cylinder with slight curve\n        for(i = [0:9]) {\n            translate([body_length/2 + i*4, 0, body_height/2 - 2 - i*0.5])\n            rotate([0, -i*2, 0])\n            cylinder(h=5, d=tail_diameter - i*0.4);\n        }\n        \n        // Front legs\n        for(side = [-1, 1]) {\n            translate([-(body_length/4), side * (body_width/2), body_height/2 - 5])\n            rotate([90, 0, 0])\n            cylinder(h=leg_length, d=leg_diameter);\n            \n            // Front paws\n            translate([-(body_length/4), side * (body_width/2 + 2), body_height/2 - 5 - leg_length])\n            sphere(d=leg_diameter * 1.2);\n        }\n        \n        // Hind legs - larger and angled\n        for(side = [-1, 1]) {\n            translate([body_length/3, side * (body_width/2), body_height/2 - 5])\n            rotate([100, 0, 15 * side])\n            cylinder(h=leg_length * 1.2, d=leg_diameter * 1.3);\n            \n            // Hind paws\n            translate([body_length/3 + 2, side * (body_width/2 + 3), body_height/2 - 5 - leg_length])\n            scale([1.2, 1.5, 0.8])\n            sphere(d=leg_diameter * 1.5);\n        }\n        \n        // Fur texture - small spheres along back\n        for(i = [0:10]) {\n            for(j = [0:3]) {\n                offset = (i % 2) * 2;\n                translate([-(body_length/2) + i*5, -body_width/4 + j*4 + offset, body_height/2 + 10])\n                sphere(d=1.5);\n            }\n        }\n    }\n}\n\n// Generate the dormouse centered at origin\ndormouse();",
    "renders": true
  },
  {
    "animal": "dory",
    "openscad_code": "// Dory - Realistic Style, Medium Complexity (approx. 90 lines)\n// Overall length ~80 mm, printable on most FDM machines\n\n// Hull parameters\nhull_length = 80;\nhull_width = 20;\nhull_height = 12;\nwall_thickness = 1.2;\n\nmodule dory_hull() {\n    // Main hull body\n    difference() {\n        // Outer hull shape\n        hull_profile();\n        \n        // Hollow interior\n        translate([0, 0, -1])\n            scale([0.85, 0.85, 0.9])\n            hull_profile();\n    }\n}\n\nmodule hull_profile() {\n    // Use hull() of stacked rounded rectangles\n    hull() {\n        // Bow\n        translate([-hull_length/2, 0, 0])\n            scale([1, 0.4, 0.8])\n            sphere(d = hull_width, $fn=24);\n        \n        // Mid section\n        translate([0, 0, hull_height/2])\n            cube([hull_length*0.8, hull_width, hull_height], center=true);\n        \n        // Stern\n        translate([hull_length/2, 0, 0])\n            scale([1, 0.5, 0.7])\n            sphere(d = hull_width, $fn=24);\n    }\n}\n\nmodule benches() {\n    // Forward bench\n    translate([-hull_length/4, 0, hull_height - wall_thickness])\n        cube([hull_length*0.2, hull_width - wall_thickness*2, wall_thickness], center=true);\n    \n    // Aft bench\n    translate([hull_length/4, 0, hull_height - wall_thickness])\n        cube([hull_length*0.25, hull_width - wall_thickness*2, wall_thickness], center=true);\n}\n\nmodule transom() {\n    // Stern transom plate\n    difference() {\n        translate([hull_length/2 - wall_thickness/2, 0, hull_height/2])\n            cube([wall_thickness, hull_width*0.9, hull_height*0.9], center=true);\n        \n        // Drain plug hole\n        translate([hull_length/2, 0, 2])\n            rotate([0, 90, 0])\n            cylinder(h = wall_thickness + 1, d = 2, $fn=12);\n    }\n}\n\nmodule oarlocks() {\n    // Generate 2 oarlocks\n    for (y = [-hull_width/2 - 1, hull_width/2 + 1]) {\n        translate([-hull_length/6, y, hull_height + 2])\n            rotate([90, 0, 0])\n            difference() {\n                cylinder(h = 4, d = 3, $fn=12);\n                translate([0, 0, -0.1])\n                    cylinder(h = 4.2, d = 1.5, $fn=12);\n            }\n    }\n}\n\nmodule keel() {\n    // Central keel for directional stability\n    translate([0, 0, -1])\n        cube([hull_length*0.9, wall_thickness, 2]);\n}\n\nmodule bow_handle() {\n    // Rope handle on bow\n    translate([-hull_length/2, 0, hull_height/2])\n        rotate([90, 0, 0])\n        difference() {\n            cylinder(h = 4, d = 5, $fn=16);\n            translate([0, 0, -0.1])\n                cylinder(h = 4.2, d = 3, $fn=16);\n        }\n}\n\n// Assembly\nunion() {\n    dory_hull();\n    benches();\n    transom();\n    oarlocks();\n    keel();\n    bow_handle();\n}",
    "renders": true
  },
  {
    "animal": "dove",
    "openscad_code": "// Realistic Dove - Medium Complexity\n// Approx 80mm wingspan, 3D printable with no overhangs\n\n$fn = 32;\n\nmodule dove() {\n    // Body - main oval shape\n    union() {\n        // Main body - elongated sphere\n        translate([0, 0, 10])\n            scale([1.5, 1, 1])\n            sphere(15);\n\n        // Head - smaller sphere\n        translate([20, 0, 22])\n            sphere(8);\n\n        // Neck - connecting cylinder\n        translate([12, 0, 18])\n            rotate([0, -20, 0])\n            cylinder(h=10, r1=7, r2=5);\n\n        // Tail - tapered shape\n        difference() {\n            translate([-20, 0, 12])\n                rotate([0, 15, 0])\n                scale([2, 0.6, 0.3])\n                sphere(12);\n            \n            // Cut tail to be flat\n            translate([-35, 0, 0])\n                cube([30, 30, 30]);\n        }\n\n        // Wings - symmetrical pair\n        wing();\n\n        // Feet - simple cylinders\n        translate([5, -3, 0])\n            cylinder(h=5, r=1.5);\n        translate([5, 3, 0])\n            cylinder(h=5, r=1.5);\n\n        // Beak - small cone\n        translate([28, 0, 22])\n            rotate([0, -20, 0])\n            cylinder(h=5, r1=3, r2=0.5);\n\n        // Eyes - tiny spheres\n        translate([22, -3, 24])\n            sphere(1);\n        translate([22, 3, 24])\n            sphere(1);\n    }\n}\n\nmodule wing() {\n    // Left wing\n    translate([0, 15, 18])\n        rotate([0, 0, -30])\n        rotate([15, 0, 0])\n        wing_shape();\n\n    // Right wing - mirror of left\n    mirror([0, 1, 0])\n        translate([0, 15, 18])\n            rotate([0, 0, -30])\n            rotate([15, 0, 0])\n            wing_shape();\n}\n\nmodule wing_shape() {\n    // Wing made of multiple ellipsoids for feather layers\n    union() {\n        // Main wing\n        translate([0, 0, 0])\n            scale([2, 0.5, 0.2])\n            sphere(15);\n\n        // Wing tip\n        translate([25, 0, 0])\n            scale([1.5, 0.4, 0.15])\n            sphere(8);\n\n        // Primary feathers - series of overlapping ellipses\n        for(i = [0:3]) {\n            translate([20 - i*5, 0, -1 - i*0.5])\n                rotate([0, 0, i*5])\n                scale([2, 0.3, 0.1])\n                sphere(5);\n        }\n\n        // Secondary feathers\n        for(i = [0:2]) {\n            translate([15 - i*6, 0, -2 - i*0.3])\n                rotate([0, 0, -i*3])\n                scale([1.8, 0.25, 0.08])\n                sphere(6);\n        }\n    }\n}\n\n// Generate the dove, standing upright\nrotate([0, 0, 0])\n    dove();",
    "renders": true
  },
  {
    "animal": "dragonet",
    "openscad_code": "// Dragonet - medium complexity realistic style\n// Approx 75mm long, 3D printable\n\n$fn = 32;\n\nmodule dragonet() {\n    // Body core\n    union() {\n        // Main torso\n        translate([0, 0, 15]) \n            scale([1, 0.6, 0.5]) \n            sphere(r=20);\n        \n        // Chest\n        translate([-15, 0, 10]) \n            scale([0.8, 0.7, 0.6]) \n            sphere(r=15);\n        \n        // Hip\n        translate([20, 0, 12]) \n            scale([0.7, 0.6, 0.5]) \n            sphere(r=15);\n    }\n}\n\nmodule neck() {\n    // Segmented neck\n    for(i=[0:3]) {\n        translate([-25 + i*5, 0, 25 + i*3]) \n            rotate([0, -20 + i*10, 0]) \n            scale([0.8 - i*0.1, 0.8 - i*0.1, 1]) \n            sphere(r=7 - i);\n    }\n}\n\nmodule head() {\n    // Snout\n    union() {\n        translate([-40, 0, 40]) \n            scale([1.5, 0.6, 0.8]) \n            sphere(r=10);\n        \n        // Skull\n        translate([-35, 0, 45]) \n            scale([0.9, 1, 1.1]) \n            sphere(r=12);\n        \n        // Nostrils\n        translate([-45, 3, 42]) \n            rotate([0, 45, 0]) \n            cylinder(h=5, r1=2, r2=0);\n        translate([-45, -3, 42]) \n            rotate([0, 45, 0]) \n            cylinder(h=5, r1=2, r2=0);\n        \n        // Eyes\n        translate([-38, 8, 45]) \n            sphere(r=3);\n        translate([-38, -8, 45]) \n            sphere(r=3);\n    }\n}\n\nmodule wings() {\n    // Left wing\n    translate([5, 15, 25]) {\n        rotate([0, 0, 10]) {\n            // Wing shoulder\n            sphere(r=5);\n            \n            // Main wing bone\n            translate([0, 5, 0]) \n                rotate([0, 30, 0]) \n                cylinder(h=25, r1=3, r2=1);\n            \n            // Wing membrane supports\n            for(i=[0:2]) {\n                translate([5 + i*5, 5 + i*8, 0]) \n                    rotate([0, 20 - i*10, 0]) \n                    cylinder(h=20 - i*5, r1=2, r2=1);\n            }\n        }\n    }\n    \n    // Right wing (mirrored)\n    mirror([0,1,0]) \n        translate([5, 15, 25]) {\n            rotate([0, 0, 10]) {\n                sphere(r=5);\n                translate([0, 5, 0]) \n                    rotate([0, 30, 0]) \n                    cylinder(h=25, r1=3, r2=1);\n                for(i=[0:2]) {\n                    translate([5 + i*5, 5 + i*8, 0]) \n                        rotate([0, 20 - i*10, 0]) \n                        cylinder(h=20 - i*5, r1=2, r2=1);\n                }\n            }\n        }\n}\n\nmodule legs() {\n    // Front left leg\n    translate([-10, 10, 5]) {\n        // Upper leg\n        rotate([0, -30, 0]) \n            cylinder(h=15, r1=4, r2=3);\n        \n        // Lower leg\n        translate([0, 0, -15]) \n            rotate([0, 30, 0]) \n            cylinder(h=12, r1=3, r2=2);\n        \n        // Foot\n        translate([0, 0, -27]) \n            rotate([0, -20, 0]) \n            scale([1.2, 1, 0.5]) \n            sphere(r=4);\n    }\n    \n    // Front right leg\n    mirror([0,1,0]) \n        translate([-10, 10, 5]) {\n            rotate([0, -30, 0]) \n                cylinder(h=15, r1=4, r2=3);\n            translate([0, 0, -15]) \n                rotate([0, 30, 0]) \n                cylinder(h=12, r1=3, r2=2);\n            translate([0, 0, -27]) \n                rotate([0, -20, 0]) \n                scale([1.2, 1, 0.5]) \n                sphere(r=4);\n        }\n    \n    // Back left leg\n    translate([20, 8, 5]) {\n        rotate([0, -20, 0]) \n            cylinder(h=18, r1=5, r2=4);\n        translate([0, 0, -18]) \n            rotate([0, 20, 0]) \n            cylinder(h=15, r1=4, r=3);\n        translate([0, 0, -33]) \n            rotate([0, -15, 0]) \n            scale([1.3, 1, 0.6]) \n            sphere(r=5);\n    }\n    \n    // Back right leg\n    mirror([0,1,0]) \n        translate([20, 8, 5]) {\n            rotate([0, -20, 0]) \n                cylinder(h=18, r1=5, r2=4);\n            translate([0, 0, -18]) \n                rotate([0, 20, 0]) \n                cylinder(h=15, r1=4, r=3);\n            translate([0, 0, -33]) \n                rotate([0, -15, 0]) \n                scale([1.3, 1, 0.6]) \n                sphere(r=5);\n        }\n}\n\nmodule tail() {\n    // Flexible tail segments\n    for(i=[0:5]) {\n        translate([35 + i*8, 0, 15 - i*2]) \n            rotate([0, -10 - i*3, 0]) \n            scale([1 - i*0.15, 1 - i*0.15, 1 - i*0.1]) \n            sphere(r=12 - i*2);\n    }\n}\n\nmodule spikes() {\n    // Back spikes\n    for(i=[-20:5:30]) {\n        translate([i, 0, 20 + abs(i)*0.3]) \n            rotate([0, 0, 0]) \n            cylinder(h=5 + abs(i)*0.1, r1=2, r2=0);\n    }\n    \n    // Tail spikes\n    for(i=[0:5]) {\n        translate([40 + i*8, 0, 25 - i*2]) \n            rotate([0, 0, 0]) \n            cylinder(h=4, r1=1.5, r2=0);\n    }\n}\n\n// Assemble dragonet\ndragonet();\nneck();\nhead();\nwings();\nlegs();\ntail();\nspikes();",
    "renders": true
  },
  {
    "animal": "dragonfly",
    "openscad_code": "// Dragonfly - realistic style, medium complexity\n// Overall length ~80mm, wingspan ~70mm, thickness ~6mm\n\nmodule dragonfly() {\n    // Body parameters\n    body_length = 40;\n    body_thick = 5;\n    \n    // Head\n    translate([body_length/2 + 4, 0, 0])\n    rotate([0, 90, 0])\n    scale([1, 1, 1.2])\n    sphere(d=6, $fn=20);\n    \n    // Thorax (largest segment)\n    translate([body_length/4, 0, 0])\n    scale([2, 1, 1])\n    sphere(d=body_thick*2, $fn=20);\n    \n    // Abdomen segments\n    for(i=[-body_length/2:4:body_length/2-8]) {\n        translate([i, 0, 0])\n        scale([1 - abs(i)/body_length, 1 - abs(i)/body_length*0.5, 1])\n        sphere(d=body_thick*(1 - abs(i)/body_length*0.3), $fn=16);\n    }\n    \n    // Eyes\n    for(side=[-1, 1]) {\n        translate([body_length/2 + 4, side*2.5, 1.5])\n        sphere(d=3, $fn=12);\n    }\n    \n    // Wings - four wings with realistic venation\n    module wing(x, y, rot, scale_factor) {\n        translate([x, y, 0])\n        rotate([0, 0, rot])\n        scale([scale_factor, scale_factor, 1])\n        linear_extrude(height=0.4)\n        polygon(points=[\n            [0, 0], [5, 8], [15, 12], [25, 10], [30, 5], [32, 0], [30, -5], \n            [25, -10], [15, -12], [5, -8], [0, 0]\n        ]);\n    }\n    \n    // Front wings\n    wing(body_length/4, body_thick, 30, 1.2);\n    wing(body_length/4, -body_thick, -30, 1.2);\n    \n    // Hind wings\n    wing(-body_length/8, body_thick*1.5, 45, 1);\n    wing(-body_length/8, -body_thick*1.5, -45, 1);\n    \n    // Wing support veins\n    for(side=[-1, 1]) {\n        for(w=[1, 2]) {\n            angle = side * (w == 1 ? 30 : 45);\n            len = w == 1 ? 25 : 20;\n            translate([body_length/4 - (w-1)*6, 0, 0])\n            rotate([0, 0, angle])\n            cylinder(h=len, d1=0.6, d2=0.3, $fn=8);\n        }\n    }\n    \n    // Legs - 6 legs, 3 per side\n    module leg(x, y, angle, length) {\n        translate([x, y, -body_thick/2])\n        rotate([0, 0, angle])\n        rotate([90, 0, 0])\n        cylinder(h=length, d=0.4, $fn=6);\n    }\n    \n    for(side=[-1, 1]) {\n        leg(body_length/4, side*body_thick, side*30, 8);\n        leg(body_length/4 - 3, side*body_thick*0.8, side*45, 7);\n        leg(body_length/4 + 3, side*body_thick*0.8, side*15, 7);\n    }\n    \n    // Tail appendages\n    translate([-body_length/2 - 4, 2, 0])\n    rotate([0, 0, -30])\n    cylinder(h=5, d1=0.8, d2=0.4, $fn=6);\n    \n    translate([-body_length/2 - 4, -2, 0])\n    rotate([0, 0, 30])\n    cylinder(h=5, d1=0.8, d2=0.4, $fn=6);\n}\n\n// Main assembly\ndragonfly();",
    "renders": true
  },
  {
    "animal": "drongo",
    "openscad_code": "// Drongo bird - medium complexity realistic style\n// Designed for 3D printing with proper wall thickness\n\n$fn = 32; // Smooth curves\nbody_length = 50;\nwing_span = 70;\ntail_length = 60;\nhead_size = 12;\n\nmodule main_drongo() {\n    union() {\n        // Main body\n        body();\n        \n        // Head\n        translate([body_length/2 - 5, 0, 8])\n            head();\n        \n        // Wings\n        translate([-body_length/4, wing_span/2 - 5, 0])\n            rotate([0, 0, 20])\n            wing();\n        translate([-body_length/4, -(wing_span/2 - 5), 0])\n            rotate([0, 0, -20])\n            mirror([0, 1, 0])\n            wing();\n        \n        // Tail\n        translate([-body_length/2 - tail_length/3, 0, 0])\n            tail();\n        \n        // Legs\n        translate([body_length/4, 5, -8])\n            leg();\n        translate([body_length/4, -5, -8])\n            leg();\n    }\n}\n\nmodule body() {\n    // Main oval body\n    scale([1.5, 1, 1])\n    rotate([90, 0, 0])\n    cylinder(h = body_length, d1 = 20, d2 = 15, center = true);\n    \n    // Chest protrusion\n    translate([10, 0, 0])\n    scale([0.8, 1.2, 0.8])\n    sphere(r = 10);\n}\n\nmodule head() {\n    union() {\n        // Main head sphere\n        sphere(r = head_size);\n        \n        // Beak\n        translate([head_size + 5, 0, 0])\n        rotate([0, -10, 0])\n        cylinder(h = 12, d1 = 2, d2 = 4);\n        \n        // Eye sockets\n        translate([head_size/2, head_size/2 - 2, head_size/2 - 2])\n        sphere(r = 2);\n        translate([head_size/2, -(head_size/2 - 2), head_size/2 - 2])\n        sphere(r = 2);\n        \n        // Eyes\n        translate([head_size/2 + 1, head_size/2 - 2, head_size/2 - 2])\n        color(\"black\")\n        sphere(r = 1.5);\n        translate([head_size/2 + 1, -(head_size/2 - 2), head_size/2 - 2])\n        color(\"black\")\n        sphere(r = 1.5);\n    }\n}\n\nmodule wing() {\n    difference() {\n        // Main wing shape\n        rotate([0, 90, 0])\n        scale([1, 0.3, 1])\n        cylinder(h = wing_span/2, d1 = 8, d2 = 15);\n        \n        // Feather details\n        for(i = [1:3]) {\n            translate([5, i*5 - 5, -2])\n            rotate([0, 0, -30])\n            cube([8, 1, 4]);\n        }\n    }\n}\n\nmodule tail() {\n    difference() {\n        // Main tail\n        rotate([0, 90, 0])\n        scale([1, 0.15, 1])\n        cylinder(h = tail_length, d1 = 12, d2 = 2);\n        \n        // Tail feather separation\n        for(i = [-1:1]) {\n            translate([0, i*3, 0])\n            rotate([0, 0, i*10])\n            cube([tail_length, 0.5, 6], center = true);\n        }\n    }\n}\n\nmodule leg() {\n    // Upper leg\n    cylinder(h = 8, d = 3);\n    \n    // Lower leg\n    translate([0, 0, -8])\n    cylinder(h = 10, d = 2);\n    \n    // Foot\n    translate([0, 2, -16])\n    rotate([90, 0, 0])\n    union() {\n        // Main foot\n        cube([6, 2, 1], center = true);\n        \n        // Toes\n        for(i = [-1, 0, 1]) {\n            translate([i*2, 0, -1])\n            cube([1, 2, 1], center = true);\n        }\n    }\n}\n\n// Generate the complete drongo\nmain_drongo();",
    "renders": true
  },
  {
    "animal": "duck",
    "openscad_code": "// Realistic 3D Printable Duck - Medium Complexity\n// Approximate size: 80mm length\n\n// Overall scale factor\nscale_factor = 0.8;\n\nmodule duck() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        // Main body - oval shape\n        union() {\n            // Body core\n            translate([0, 0, 10]) {\n                scale([1, 0.7, 0.6]) sphere(d=40, $fn=32);\n            }\n            \n            // Tail - tapered oval\n            translate([-25, 0, 8]) {\n                rotate([0, 20, 0]) {\n                    scale([0.8, 0.6, 0.5]) sphere(d=25, $fn=24);\n                }\n            }\n            \n            // Chest - rounded protrusion\n            translate([15, 0, 8]) {\n                scale([0.7, 0.8, 0.5]) sphere(d=30, $fn=24);\n            }\n            \n            // Wing left\n            translate([0, -15, 20]) {\n                rotate([0, -20, -10]) {\n                    difference() {\n                        scale([1.2, 0.3, 0.4]) sphere(d=25, $fn=16);\n                        translate([5, 0, 0]) cube([15, 10, 10], center=true);\n                    }\n                }\n            }\n            \n            // Wing right (mirrored)\n            translate([0, 15, 20]) {\n                rotate([0, -20, 10]) {\n                    difference() {\n                        scale([1.2, 0.3, 0.4]) sphere(d=25, $fn=16);\n                        translate([5, 0, 0]) cube([15, 10, 10], center=true);\n                    }\n                }\n            }\n            \n            // Neck\n            translate([20, 0, 25]) {\n                rotate([0, -30, 0]) {\n                    cylinder(h=15, d1=12, d2=10, $fn=16);\n                }\n            }\n            \n            // Head\n            translate([30, 0, 35]) {\n                scale([0.8, 0.8, 0.9]) sphere(d=20, $fn=32);\n            }\n            \n            // Beak\n            translate([40, 0, 33]) {\n                rotate([0, -10, 0]) {\n                    scale([1.5, 0.5, 0.4]) {\n                        difference() {\n                            sphere(d=12, $fn=8);\n                            translate([-6, 0, 0]) cube([12, 8, 8], center=true);\n                        }\n                    }\n                }\n            }\n            \n            // Eyes\n            // Left eye\n            translate([35, -7, 38]) {\n                sphere(d=4, $fn=8);\n            }\n            \n            // Right eye\n            translate([35, 7, 38]) {\n                sphere(d=4, $fn=8);\n            }\n        }\n        \n        // Legs\n        module leg(side) {\n            translate([10, side * 8, 0]) {\n                union() {\n                    // Upper leg\n                    translate([0, 0, 5]) {\n                        rotate([0, -10, side * 20]) {\n                            cylinder(h=10, d=6, $fn=12);\n                        }\n                    }\n                    \n                    // Lower leg\n                    translate([2, side * 2, -2]) {\n                        rotate([0, 0, side * 20]) {\n                            cylinder(h=8, d=5, $fn=12);\n                        }\n                    }\n                    \n                    // Webbed foot\n                    translate([4, side * 4, -8]) {\n                        rotate([0, 90, 0]) {\n                            difference() {\n                                scale([1.2, 0.3, 1]) sphere(d=12, $fn=16);\n                                // Cut between toes\n                                for(i = [-1:1]) {\n                                    translate([0, 0, i * 3]) {\n                                        cube([15, 1, 2], center=true);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Add legs\n        leg(-1); // Left leg\n        leg(1);  // Right leg\n    }\n}\n\n// Generate the duck\nduck();",
    "renders": true
  },
  {
    "animal": "dugong",
    "openscad_code": "// Dugong - Medium Complexity Realistic Style\n\n$fn = 32;  // Smooth curves for 3D printing\n\nmodule dugong_body() {\n    // Main body - elongated oval\n    union() {\n        // Central torso\n        rotate([0, 15, 0])\n            scale([1.8, 1, 0.6])\n            sphere(d=30);\n        \n        // Tail stock - tapers to fluke\n        translate([25, 0, 0])\n            rotate([0, 5, 0])\n            scale([1.2, 0.8, 0.4])\n            sphere(d=20);\n        \n        // Belly bulge\n        translate([-5, 0, -8])\n            scale([1.4, 0.9, 0.5])\n            sphere(d=25);\n    }\n}\n\nmodule dugong_head() {\n    union() {\n        // Main head shape\n        translate([-35, 0, 2])\n            rotate([0, -10, 0])\n            scale([1, 0.8, 0.7])\n            sphere(d=20);\n        \n        // Snout extension\n        translate([-45, 0, -2])\n            rotate([0, -20, 0])\n            scale([1.2, 0.6, 0.4])\n            cylinder(h=15, d1=12, d2=8);\n        \n        // Upper lip pad\n        translate([-42, 0, -4])\n            scale([0.8, 0.6, 0.3])\n            sphere(d=10);\n    }\n}\n\nmodule dugong_flippers() {\n    // Front flippers\n    module flipper(side) {\n        translate([-15, side*12, -5])\n            rotate([0, 0, side*10])\n            rotate([10, 0, 0])\n            scale([0.4, 1, 0.1])\n            cylinder(h=20, d1=12, d2=8);\n        \n        // Flipper tip\n        translate([-8, side*18, -6])\n            rotate([0, 0, side*20])\n            scale([0.3, 0.8, 0.1])\n            sphere(d=6);\n    }\n    \n    flipper(1);\n    flipper(-1);\n}\n\nmodule dugong_fluke() {\n    // Tail fluke - horizontal\n    translate([35, 0, -2])\n        rotate([0, 10, 0])\n        union() {\n            // Center\n            scale([0.3, 1, 0.1])\n            cylinder(h=15, d=8);\n            \n            // Left lobe\n            translate([0, 8, 0])\n                rotate([0, 0, -20])\n                scale([0.3, 1.2, 0.1])\n                cylinder(h=15, d=8);\n            \n            // Right lobe\n            translate([0, -8, 0])\n                rotate([0, 0, 20])\n                scale([0.3, 1.2, 0.1])\n                cylinder(h=15, d=8);\n        }\n}\n\nmodule dugong_features() {\n    // Eyes\n    module eye(side) {\n        translate([-30, side*8, 5])\n            scale([1, 1, 0.5])\n            sphere(d=3);\n    }\n    \n    eye(1);\n    eye(-1);\n    \n    // Nostrril slits\n    module nostril(side) {\n        translate([-42, side*3, 0])\n            rotate([0, -20, 0])\n            scale([0.2, 1, 0.1])\n            cylinder(h=3, d=2);\n    }\n    \n    nostril(1);\n    nostril(-1);\n    \n    // Mouth line\n    translate([-38, 0, -6])\n        rotate([0, -15, 0])\n        scale([1, 0.1, 0.1])\n        cylinder(h=15, d=1);\n    \n    // Skin wrinkles\n    for(i = [0:3]) {\n        translate([-20 + i*5, 0, -10])\n            rotate([0, 10, 0])\n            scale([0.5, 1.2, 0.1])\n            sphere(d=3);\n    }\n}\n\nmodule dugong() {\n    union() {\n        dugong_body();\n        dugong_head();\n        dugong_flippers();\n        dugong_fluke();\n        dugong_features();\n    }\n}\n\n// Scale to 80mm length\nscale(0.8)\n    dugong();",
    "renders": true
  },
  {
    "animal": "dunlin",
    "openscad_code": "// Dunlin (Calidris alpina) - medium complexity realistic style\n// Size: ~70mm beak to tail\n\n// Basic parameters\n$fn = 32;  // Smooth curves\nbody_scale = 1;\nbeak_length = 12;\nbody_length = 35;\nwing_span = 40;\nleg_height = 8;\n\n// Main body - oval shape\nmodule body() {\n    difference() {\n        // Main body ellipsoid\n        scale([1.2, 0.8, 0.6])\n        sphere(d=body_length);\n        \n        // Ventral flattening\n        translate([0, 0, -body_length*0.25])\n        cube([body_length*1.5, body_length, body_length*0.5], center=true);\n    }\n}\n\n// Head with beak\nmodule head() {\n    union() {\n        // Head sphere\n        translate([-body_length*0.45, 0, body_length*0.3])\n        scale([0.8, 0.8, 0.9])\n        sphere(d=body_length*0.35);\n        \n        // Beak - tapered cylinder\n        translate([-body_length*0.6 - beak_length/2, 0, body_length*0.25])\n        rotate([0, -10, 0])\n        cylinder(h=beak_length, d1=body_length*0.15, d2=2, center=true);\n    }\n}\n\n// Wing with feather detail\nmodule wing() {\n    difference() {\n        // Main wing shape\n        translate([0, body_length*0.4, 0])\n        rotate([0, 0, -20])\n        scale([1.3, 0.2, 0.6])\n        sphere(d=wing_span/2);\n        \n        // Wing tip\n        translate([wing_span/2.5, body_length*0.4, 0])\n        sphere(d=wing_span/4);\n    }\n    \n    // Wing feathers - simple ridges\n    for(i = [1:3]) {\n        translate([i*5-10, body_length*0.4 + i*2, -2])\n        rotate([0, 90, 0])\n        cylinder(h=0.5, d=wing_span/3, center=true);\n    }\n}\n\n// Tail\nmodule tail() {\n    translate([body_length*0.5, 0, -body_length*0.1])\n    rotate([0, -15, 0])\n    scale([0.8, 0.2, 0.4])\n    sphere(d=body_length*0.3);\n}\n\n// Leg with foot\nmodule leg(side) {\n    // Upper leg\n    translate([body_length*0.2, side*body_length*0.3, -body_length*0.3])\n    rotate([30, 0, 0])\n    cylinder(h=leg_height, d=2, center=true);\n    \n    // Lower leg\n    translate([body_length*0.2 + 2, side*body_length*0.3, -body_length*0.3 - leg_height/2])\n    rotate([30, 0, 0])\n    cylinder(h=leg_height/2, d=1.5, center=true);\n    \n    // Webbed foot\n    translate([body_length*0.2 + 4, side*body_length*0.3, -body_length*0.3 - leg_height])\n    rotate([90, 0, 0])\n    scale([1, 0.3, 1])\n    sphere(d=6);\n}\n\n// Eye detail\nmodule eye() {\n    translate([-body_length*0.55, body_length*0.12, body_length*0.35])\n    sphere(d=1.5);\n}\n\n// Main assembly\nunion() {\n    body();\n    head();\n    wing();\n    mirror([0,1,0]) wing();\n    tail();\n    \n    // Legs\n    leg(1);\n    leg(-1);\n    \n    // Eyes\n    color(\"black\") eye();\n    mirror([0,1,0]) color(\"black\") eye();\n}",
    "renders": true
  },
  {
    "animal": "eagle",
    "openscad_code": "// Eagle 3D Model - Realistic Medium Complexity\n// Size: ~80mm wingspan\n\n$fn = 32; // Smooth curves\n\nmodule head() {\n    // Main head sphere\n    translate([0, 0, 15])\n    sphere(d=18);\n    \n    // Beak\n    difference() {\n        translate([9, 0, 15])\n        rotate([0, -20, 0])\n        cylinder(h=20, d1=8, d2=2);\n        // Beak notch\n        translate([16, 0, 15])\n        rotate([0, -20, 0])\n        cube([8, 3, 3], center=true);\n    }\n    \n    // Eyes\n    for(side = [-1, 1]) {\n        translate([5, side*6, 18])\n        color(\"black\")\n        sphere(d=4);\n    }\n}\n\nmodule neck() {\n    // Neck connecting head to body\n    translate([0, 0, 8])\n    cylinder(h=10, d1=10, d2=15);\n}\n\nmodule body() {\n    // Main body\n    translate([0, 0, 0])\n    scale([1.5, 1, 1.2])\n    sphere(d=30);\n    \n    // Tail\n    difference() {\n        translate([-25, 0, -5])\n        rotate([0, 10, 0])\n        cube([30, 2, 15]);\n        // Tail feather cuts\n        for(i = [-1:1]) {\n            translate([-25, i*8, -5])\n            rotate([0, 10, 0])\n            cube([30, 2, 15]);\n        }\n    }\n}\n\nmodule wing() {\n    // Main wing structure\n    difference() {\n        union() {\n            // Upper wing\n            translate([0, 0, 0])\n            rotate([0, 0, -10])\n            scale([1, 2.5, 0.3])\n            sphere(d=25);\n            \n            // Lower wing\n            translate([-5, 15, -5])\n            rotate([0, 0, -20])\n            scale([0.8, 2, 0.2])\n            sphere(d=20);\n            \n            // Wing tip\n            translate([-10, 35, -8])\n            rotate([0, 0, -30])\n            cylinder(h=15, d1=8, d2=3);\n        }\n        \n        // Wing feather cuts\n        for(i = [0:3]) {\n            translate([0, 5 + i*8, 2])\n            rotate([0, 0, -10 - i*5])\n            cube([20, 1, 5]);\n        }\n    }\n}\n\nmodule legs() {\n    // Left leg\n    translate([8, -5, -15])\n    rotate([10, 0, 0])\n    cylinder(h=15, d=4);\n    \n    // Right leg\n    translate([8, 5, -15])\n    rotate([10, 0, 0])\n    cylinder(h=15, d=4);\n    \n    // Feet\n    for(side = [-1, 1]) {\n        translate([8, side*8, -30])\n        rotate([0, 0, 0])\n        scale([1, 2, 0.3])\n        sphere(d=8);\n        \n        // Toes\n        for(angle = [-30, 0, 30]) {\n            translate([8, side*8, -30])\n            rotate([0, 0, angle])\n            translate([0, 6, 0])\n            rotate([90, 0, 0])\n            cylinder(h=8, d=2);\n        }\n    }\n}\n\nmodule eagle() {\n    union() {\n        // Body assembly\n        body();\n        neck();\n        head();\n        \n        // Left wing\n        translate([5, 0, 10])\n        rotate([0, 0, 30])\n        wing();\n        \n        // Right wing\n        translate([5, 0, 10])\n        rotate([0, 180, 30])\n        wing();\n        \n        // Legs\n        legs();\n    }\n}\n\n// Scale for 3D printing\nscale(0.8)\neagle();",
    "renders": true
  },
  {
    "animal": "earwig",
    "openscad_code": "// Realistic Earwig - Medium Complexity\n// Body length ~60mm, printable without support\n\n$fn = 36;\n\nmodule body_segment(w, h, l, taper=1) {\n    hull() {\n        translate([-l/2, 0, 0]) \n            scale([taper, 1, 1]) sphere(d=w);\n        translate([l/2, 0, 0]) \n            sphere(d=w);\n    }\n}\n\nmodule abdomen() {\n    union() {\n        // Segments 1-6\n        for(i=[0:5]) {\n            translate([0, 0, -i*4]) \n                body_segment(12-i, 8-i*0.5, 6, 1-i*0.08);\n        }\n        \n        // Cerci (pincers)\n        translate([0, 0, -24]) {\n            difference() {\n                hull() {\n                    sphere(d=5);\n                    translate([0, 0, -8]) cylinder(d1=5, d2=2, h=8);\n                }\n                // Cut gap between cerci\n                translate([0, 0, -4]) cube([20, 0.5, 8], center=true);\n            }\n        }\n    }\n}\n\nmodule thorax() {\n    // Three thoracic segments\n    translate([0, 0, 8]) body_segment(14, 10, 8);\n    translate([0, 0, 14]) body_segment(12, 9, 7);\n    translate([0, 0, 20]) body_segment(10, 8, 6);\n}\n\nmodule head() {\n    union() {\n        // Main head\n        translate([0, 0, 26]) rotate([0, 15, 0]) \n            body_segment(10, 8, 8, 0.7);\n        \n        // Antennae\n        for(side=[-1, 1]) {\n            translate([side*4, 3, 29]) rotate([0, 30, 0]) {\n                for(i=[0:10]) {\n                    translate([0, 0, i*1.5]) \n                        rotate([0, 15, side*15]) \n                        cylinder(d1=1.2-i*0.08, d2=1-i*0.08, h=1.5);\n                }\n            }\n        }\n        \n        // Mandibles\n        translate([3, 0, 25]) rotate([0, 0, -20]) \n            cylinder(d1=2, d2=1, h=4);\n        translate([-3, 0, 25]) rotate([0, 0, 20]) \n            cylinder(d1=2, d2=1, h=4);\n    }\n}\n\nmodule legs() {\n    for(side=[-1, 1]) {\n        // Three pairs of legs\n        for(pair=[0:2]) {\n            translate([side*6, 0, 16-pair*6]) {\n                rotate([0, 30+pair*10, 0]) {\n                    // Coxa\n                    cylinder(d=3, h=4);\n                    translate([0, 0, 4]) rotate([30, 0, 0]) {\n                        // Femur\n                        cylinder(d=2.5, h=6);\n                        translate([0, 0, 6]) rotate([60, 0, 0]) {\n                            // Tibia\n                            cylinder(d=2, h=7);\n                            translate([0, 0, 7]) rotate([30, 0, 0]) {\n                                // Tarsus\n                                cylinder(d=1.5, h=5);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule wings() {\n    // Elytra (wing covers) - simplified\n    hull() {\n        translate([6, 0, 5]) cylinder(d=1, h=1);\n        translate([2, 0, -5]) cylinder(d=1, h=1);\n        translate([6, 3, 0]) cylinder(d=1, h=1);\n    }\n    \n    hull() {\n        translate([-6, 0, 5]) cylinder(d=1, h=1);\n        translate([-2, 0, -5]) cylinder(d=1, h=1);\n        translate([-6, 3, 0]) cylinder(d=1, h=1);\n    }\n}\n\n// Main assembly\nunion() {\n    abdomen();\n    thorax();\n    head();\n    legs();\n    wings();\n}\n\n// Print orientation - flat on back\nrotate([90, 0, 0]) {\n    // The model is already oriented correctly\n}",
    "renders": true
  },
  {
    "animal": "echidna",
    "openscad_code": "// Echidna - medium complexity realistic style\n// Roughly 70mm long, printable without supports\n\n$fn = 36;\n\n// Overall scale factor\nscale_factor = 1.0;\n\n// Main body\nmodule body() {\n    // Torso - elongated ellipsoid\n    translate([0, 0, 10]) \n        scale([1.3, 0.8, 0.6]) \n            sphere(r = 20);\n    \n    // Rump - slightly smaller sphere\n    translate([-25, 0, 10]) \n        scale([1.1, 0.9, 0.5]) \n            sphere(r = 15);\n}\n\n// Head with elongated snout\nmodule head() {\n    // Main head\n    translate([28, 0, 15]) \n        scale([0.9, 0.8, 0.7]) \n            sphere(r = 12);\n    \n    // Snout/nose\n    translate([38, 0, 12]) \n        scale([2.0, 0.5, 0.5]) \n            rotate([0, -15, 0]) \n                cylinder(h = 15, r1 = 8, r2 = 4);\n    \n    // Eyes\n    translate([30, 6, 18]) sphere(r = 2);\n    translate([30, -6, 18]) sphere(r = 2);\n}\n\n// Limbs - short with claws\nmodule limb(x_pos, y_pos, z_pos, angle) {\n    translate([x_pos, y_pos, z_pos]) {\n        rotate([0, 0, angle]) {\n            // Upper leg\n            rotate([-30, 0, 0]) \n                scale([0.8, 0.8, 1.2]) \n                    cylinder(h = 8, r = 4);\n            \n            // Lower leg\n            translate([0, 0, -10]) \n                rotate([30, 0, 0]) \n                    cylinder(h = 10, r = 3);\n            \n            // Foot/Claws\n            translate([0, 0, -18]) {\n                // Central claw\n                cylinder(h = 5, r = 2);\n                \n                // Side claws\n                translate([2, 2, 0]) cylinder(h = 4, r = 1.5);\n                translate([-2, 2, 0]) cylinder(h = 4, r = 1.5);\n            }\n        }\n    }\n}\n\n// Spines covering the body\nmodule spines() {\n    // Back spines in rows\n    for (i = [-20:5:25]) {\n        for (j = [-15:7:15]) {\n            if (i*i + j*j < 400) {\n                translate([i, j, 30 + sin(i*0.3)*5]) {\n                    rotate([90 - (i+20)*2, 0, atan2(j,i)*180/3.14159]) \n                        cylinder(h = 6 + 4*sin(i*0.2), r1 = 1.5, r2 = 0.5);\n                }\n            }\n        }\n    }\n    \n    // Side spines\n    for (i = [-15:5:20]) {\n        translate([i, 20, 20]) \n            rotate([60, 0, 90]) \n                cylinder(h = 5, r1 = 1.2, r2 = 0.5);\n        translate([i, -20, 20]) \n            rotate([60, 0, -90]) \n                cylinder(h = 5, r1 = 1.2, r2 = 0.5);\n    }\n}\n\n// Tail\nmodule tail() {\n    // Base of tail\n    translate([-35, 0, 12]) {\n        rotate([0, 20, 0]) {\n            cylinder(h = 15, r1 = 8, r2 = 5);\n            \n            // Tail extension\n            translate([0, 0, -15]) {\n                rotate([0, 10, 0]) \n                    cylinder(h = 12, r1 = 5, r2 = 2);\n            }\n        }\n    }\n}\n\n// Assembly\nscale([scale_factor, scale_factor, scale_factor]) {\n    union() {\n        body();\n        head();\n        tail();\n        \n        // Four limbs\n        limb(15, 18, 5, 30);\n        limb(15, -18, 5, -30);\n        limb(-5, 15, 5, 120);\n        limb(-5, -15, 5, -120);\n        \n        spines();\n    }\n}",
    "renders": true
  },
  {
    "animal": "eel",
    "openscad_code": "// Eel in realistic style, medium complexity\n// Body length ~80mm, suitable for 3D printing\n\n$fn = 32; // Smooth curves\n\n// Main module\nmodule eel() {\n    // Body segments - use hull to create smooth body\n    color(\"darkslategray\") body();\n    \n    // Head\n    color(\"darkslategray\") head();\n    \n    // Fins\n    color(\"dimgray\") dorsal_fin();\n    color(\"dimgray\") pectoral_fin();\n    color(\"dimgray\") tail_fin();\n    \n    // Eyes\n    color(\"black\") eye(-4, 3, 2.5);\n    color(\"black\") eye(4, 3, 2.5);\n}\n\n// Body segments\nmodule body() {\n    // Create smooth body by hulling spheres along a curve\n    for (i = [0:5:70]) {\n        hull() {\n            translate([i, 0, 0]) sphere(d = 10 - i/10);\n            translate([i+5, 0, 0]) sphere(d = 10 - (i+5)/10);\n        }\n    }\n}\n\n// Head\nmodule head() {\n    // Main head shape\n    translate([-10, 0, 0]) {\n        scale([1.2, 0.8, 0.8]) sphere(d = 12);\n    }\n    \n    // Snout extension\n    translate([-18, 0, 0]) {\n        scale([1.5, 0.3, 0.3]) sphere(d = 8);\n    }\n}\n\n// Dorsal fin\nmodule dorsal_fin() {\n    // Fin segments along back\n    for (i = [10:10:50]) {\n        translate([i, 0, 5 - i/20]) {\n            rotate([0, 0, 90]) \n            scale([0.3, 2, 0.1]) \n            cylinder(h = 4 + sin(i*3)*2, d1 = 2, d2 = 0.5);\n        }\n    }\n}\n\n// Pectoral fins\nmodule pectoral_fin() {\n    // Left fin\n    translate([0, -5, -2]) {\n        rotate([0, 20, -30]) \n        scale([1, 0.3, 0.1]) \n        cylinder(h = 8, d1 = 4, d2 = 2);\n    }\n    \n    // Right fin\n    translate([0, 5, -2]) {\n        rotate([0, 20, 30]) \n        scale([1, 0.3, 0.1]) \n        cylinder(h = 8, d1 = 4, d2 = 2);\n    }\n}\n\n// Tail fin\nmodule tail_fin() {\n    // Upper tail lobe\n    translate([70, 0, 0]) {\n        rotate([0, 0, -20]) \n        scale([1, 0.2, 0.1]) \n        cylinder(h = 10, d1 = 5, d2 = 1);\n    }\n    \n    // Lower tail lobe\n    translate([70, 0, 0]) {\n        rotate([0, 0, 200]) \n        scale([1, 0.2, 0.1]) \n        cylinder(h = 8, d1 = 5, d2 = 1);\n    }\n}\n\n// Eye module\nmodule eye(x, y, z) {\n    translate([x-10, y, z]) {\n        // Eye socket\n        difference() {\n            sphere(d = 2.5);\n            translate([0.5, 0, 0]) sphere(d = 2);\n        }\n        \n        // Pupil\n        translate([1, 0, 0]) sphere(d = 1);\n    }\n}\n\n// Generate the eel\neel();",
    "renders": true
  },
  {
    "animal": "egret",
    "openscad_code": "// Egret 3D Model - Realistic Style, Medium Complexity\n// Designed for 3D printing, ~75mm height\n\n// Global parameters\n$fn = 32;  // Smooth curves for 3D printing\nwall_thickness = 2;  // Minimum wall thickness for printing\n\nmodule body() {\n    // Main body - elongated ellipsoid\n    translate([0, 0, 25])\n        scale([1.5, 1, 2.5])\n        sphere(r = 8);\n    \n    // Neck - tapered cylinder\n    translate([0, 0, 45])\n        rotate([20, 0, 0])\n        cylinder(h = 20, r1 = 4, r2 = 2, center = true);\n}\n\nmodule head() {\n    // Head - sphere with beak\n    translate([0, 0, 65])\n    rotate([20, 0, 0])\n    union() {\n        // Head sphere\n        sphere(r = 5);\n        \n        // Beak - cone shape\n        translate([4.5, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h = 8, r1 = 2, r2 = 0.5);\n    }\n}\n\nmodule legs() {\n    // Left leg\n    translate([-3, 0, 0])\n    leg();\n    \n    // Right leg\n    translate([3, 0, 0])\n    leg();\n}\n\nmodule leg() {\n    // Upper leg\n    translate([0, 0, 10])\n    rotate([30, 0, 0])\n    cylinder(h = 15, r = 1.2);\n    \n    // Lower leg\n    translate([0, 0, 3])\n    rotate([60, 0, 0])\n    cylinder(h = 12, r = 1);\n    \n    // Foot\n    translate([0, 0, -3])\n    rotate([90, 0, 0])\n    union() {\n        // Main foot\n        cube([8, 3, 1], center = true);\n        \n        // Toes\n        for(i = [-1:1])\n            translate([i * 2.5, 0, -0.5])\n            cube([1, 4, 1], center = true);\n    }\n}\n\nmodule wings() {\n    // Left wing\n    translate([-8, 0, 35])\n    rotate([0, 0, 30])\n    wing();\n    \n    // Right wing\n    translate([8, 0, 35])\n    rotate([0, 180, 30])\n    wing();\n}\n\nmodule wing() {\n    // Wing base - elliptical shape\n    difference() {\n        scale([2, 1, 0.5])\n        sphere(r = 10);\n        \n        // Feather details - subtracted for texture\n        for(i = [1:3])\n            translate([i * 3 - 5, 0, 0])\n            rotate([0, 0, i * 10])\n            cube([2, 8, 2], center = true);\n    }\n}\n\nmodule tail() {\n    // Tail feathers - fan shape\n    translate([0, 0, 15])\n    rotate([-30, 0, 0])\n    for(i = [-2:2]) {\n        translate([i * 1.5, 0, i * 0.5])\n        scale([0.5, 1, 2])\n        cube([2, 1, 8], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    legs();\n    wings();\n    tail();\n}",
    "renders": true
  },
  {
    "animal": "eland",
    "openscad_code": "// Eland - Medium complexity realistic style\n// Designed for 3D printing with wall thickness >= 2mm\n\nmodule body() {\n    // Main torso - elongated ellipsoid\n    translate([0, 0, 15]) {\n        scale([1.5, 0.8, 1]) \n            sphere(r=15, $fn=32);\n    }\n    \n    // Rump - slightly larger sphere\n    translate([-20, 0, 15]) {\n        scale([1.2, 1, 0.9])\n            sphere(r=12, $fn=32);\n    }\n}\n\nmodule neck() {\n    // Neck - tapered cylinder\n    translate([12, 0, 25]) {\n        rotate([30, 0, 0]) {\n            cylinder(h1=10, h2=15, r1=8, r2=6, $fn=16);\n        }\n    }\n}\n\nmodule head() {\n    // Head - elongated box with rounded end\n    translate([25, 0, 35]) {\n        rotate([30, 0, 0]) {\n            // Main head shape\n            scale([1.2, 0.6, 0.8])\n                sphere(r=10, $fn=32);\n            \n            // Muzzle extension\n            translate([8, 0, -2]) {\n                scale([1.5, 0.8, 0.7])\n                    sphere(r=6, $fn=16);\n            }\n            \n            // Horns\n            for(side = [-1, 1]) {\n                translate([0, side*6, 5]) {\n                    rotate([0, side*10, 0]) {\n                        cylinder(h=15, r1=2, r2=1, $fn=8);\n                    }\n                }\n            }\n            \n            // Ears\n            for(side = [-1, 1]) {\n                translate([2, side*8, 3]) {\n                    rotate([0, 0, side*20]) {\n                        scale([0.5, 1, 2])\n                            sphere(r=3, $fn=8);\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule legs() {\n    // Generate four legs with slight positioning variation\n    for(pos = [[8, 10], [8, -10], [-12, 10], [-12, -10]]) {\n        translate([pos[0], pos[1], 12]) {\n            // Upper leg\n            cylinder(h=20, r=3, $fn=12);\n            \n            // Lower leg\n            translate([0, 0, -20]) {\n                cylinder(h=18, r=2.5, $fn=12);\n                \n                // Hoof\n                translate([0, 0, -18]) {\n                    scale([1.2, 1.2, 0.5])\n                        sphere(r=2.5, $fn=8);\n                }\n            }\n        }\n    }\n}\n\nmodule tail() {\n    // Tail with tuft\n    translate([-25, 0, 15]) {\n        rotate([45, 0, 0]) {\n            // Tail body\n            cylinder(h=15, r=1.5, $fn=8);\n            \n            // Tuft\n            translate([0, 0, -15]) {\n                sphere(r=3, $fn=16);\n            }\n        }\n    }\n}\n\nmodule dewlap() {\n    // Hanging skin flap under neck\n    translate([15, 0, 15]) {\n        scale([1, 0.3, 2])\n            sphere(r=8, $fn=16);\n    }\n}\n\nmodule stripes() {\n    // Vertical body stripes (simplified as raised ridges)\n    for(i = [-15:5:15]) {\n        translate([i, 0, 15]) {\n            scale([0.5, 0.9, 0.1])\n                sphere(r=15, $fn=32);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    body();\n    neck();\n    head();\n    legs();\n    tail();\n    dewlap();\n    \n    // Add subtle stripes\n    stripes();\n}\n\n// Add support base for 3D printing\ntranslate([0, 0, -40]) {\n    cube([50, 30, 2], center=true);\n}",
    "renders": true
  },
  {
    "animal": "elephant",
    "openscad_code": "// Realistic Elephant - Medium Complexity (approx. 70mm long)\n// Designed for 3D printing - no overhangs, 2mm walls\n\nelephant_scale = 1;\n\nmodule elephant_body() {\n    // Main torso\n    union() {\n        // Upper body\n        translate([0, 0, 25])\n            scale([40, 25, 30])\n            sphere(1, $fn=32);\n        \n        // Lower belly\n        translate([0, 0, 10])\n            scale([45, 30, 15])\n            sphere(1, $fn=32);\n    }\n}\n\nmodule elephant_head() {\n    union() {\n        // Head shape\n        translate([-35, 0, 35])\n            rotate([0, -10, 0])\n            scale([30, 25, 25])\n            sphere(1, $fn=32);\n        \n        // Forehead bulge\n        translate([-45, 0, 45])\n            scale([15, 20, 20])\n            sphere(1, $fn=16);\n    }\n}\n\nmodule elephant_trunk() {\n    // Trunk segments\n    hull() {\n        translate([-55, 0, 30])\n            scale([8, 8, 8])\n            sphere(1, $fn=16);\n        \n        translate([-65, 0, 20])\n            scale([7, 7, 7])\n            sphere(1, $fn=16);\n        \n        translate([-70, 0, 10])\n            scale([6, 6, 6])\n            sphere(1, $fn=16);\n        \n        translate([-72, 0, 0])\n            scale([5, 5, 5])\n            sphere(1, $fn=16);\n    }\n}\n\nmodule elephant_ears() {\n    // Left ear\n    translate([-25, 20, 35])\n        rotate([0, -10, -10])\n        scale([1, 0.3, 1])\n        cylinder(h=20, r1=15, r2=10, $fn=32);\n    \n    // Right ear\n    mirror([0, 1, 0])\n        translate([-25, 20, 35])\n            rotate([0, -10, 10])\n            scale([1, 0.3, 1])\n            cylinder(h=20, r1=15, r2=10, $fn=32);\n}\n\nmodule elephant_legs() {\n    for(side = [-1, 1]) {\n        // Front legs\n        translate([-20, side*15, 15])\n            scale([8, 8, 15])\n            cylinder(h=1, r=1, $fn=16);\n        \n        // Back legs\n        translate([20, side*15, 15])\n            scale([10, 10, 15])\n            cylinder(h=1, r=1, $fn=16);\n    }\n}\n\nmodule elephant_tusks() {\n    // Left tusk\n    translate([-50, 12, 20])\n        rotate([30, 0, -30])\n        scale([1, 1, 3])\n        cylinder(h=1, r1=3, r2=1, $fn=16);\n    \n    // Right tusk\n    translate([-50, -12, 20])\n        rotate([30, 0, 30])\n        scale([1, 1, 3])\n        cylinder(h=1, r1=3, r2=1, $fn=16);\n}\n\nmodule elephant_tail() {\n    // Tail\n    translate([45, 0, 35])\n        rotate([0, -20, 0])\n        cylinder(h=25, r1=2, r2=1, $fn=16);\n}\n\nmodule elephant_eyes() {\n    for(side = [-1, 1]) {\n        translate([-50, side*10, 40])\n            scale([1, 1, 0.5])\n            sphere(3, $fn=16);\n    }\n}\n\n// Assemble the elephant\nscale([elephant_scale, elephant_scale, elephant_scale])\nunion() {\n    elephant_body();\n    elephant_head();\n    elephant_trunk();\n    elephant_ears();\n    elephant_legs();\n    elephant_tusks();\n    elephant_tail();\n    difference() {\n        elephant_eyes();\n        // Eye pupils\n        translate([-52, 0, 40])\n            scale([1, 1, 0.3])\n            sphere(1.5, $fn=8);\n    }\n}",
    "renders": true
  },
  {
    "animal": "elk",
    "openscad_code": "// Realistic Elk Model - Medium Complexity\n// Designed for 3D printing, approximately 70mm long\n\n// Antler module\nmodule antler() {\n    // Main branch\n    rotate([0, 20, 0])\n    cylinder(h=15, r1=2.5, r2=1.5, $fn=8);\n    \n    // First tine\n    translate([0, 0, 10])\n    rotate([0, -20, 45])\n    cylinder(h=8, r1=1.5, r2=1, $fn=6);\n    \n    // Second tine\n    translate([0, 0, 5])\n    rotate([0, -30, -30])\n    cylinder(h=7, r1=1.5, r2=0.8, $fn=6);\n}\n\n// Head module\nmodule head() {\n    // Main head shape\n    translate([0, 0, 5])\n    scale([1, 1.2, 1])\n    sphere(r=7, $fn=16);\n    \n    // Snout\n    translate([7, 0, 0])\n    scale([1.5, 0.8, 0.8])\n    sphere(r=5, $fn=12);\n    \n    // Ears\n    translate([-3, 6, 6])\n    rotate([0, -20, 0])\n    cylinder(h=6, r1=2, r2=1, $fn=6);\n    \n    translate([-3, -6, 6])\n    rotate([0, 20, 180])\n    cylinder(h=6, r1=2, r2=1, $fn=6);\n    \n    // Eyes\n    translate([4, 3, 5])\n    sphere(r=1.2, $fn=8);\n    \n    translate([4, -3, 5])\n    sphere(r=1.2, $fn=8);\n}\n\n// Body module\nmodule body() {\n    // Main torso\n    translate([-15, 0, 8])\n    scale([2, 1.2, 1.2])\n    sphere(r=12, $fn=16);\n    \n    // Rump\n    translate([-30, 0, 6])\n    sphere(r=10, $fn=12);\n    \n    // Belly\n    translate([-15, 0, -2])\n    sphere(r=8, $fn=12);\n}\n\n// Leg module\nmodule leg(length, angle) {\n    rotate([angle, 0, 0]) {\n        // Upper leg\n        cylinder(h=length*0.6, r1=3.5, r2=2.5, $fn=8);\n        \n        // Lower leg\n        translate([0, 0, length*0.6])\n        rotate([10, 0, 0])\n        cylinder(h=length*0.4, r1=2.5, r2=2, $fn=8);\n        \n        // Hoof\n        translate([0, 0, length])\n        cylinder(h=2, r1=2.5, r2=2.2, $fn=6);\n    }\n}\n\n// Tail module\nmodule tail() {\n    translate([-35, 0, 8])\n    rotate([0, 20, 0])\n    cylinder(h=8, r1=3, r2=1, $fn=6);\n}\n\n// Main assembly\nunion() {\n    // Body\n    body();\n    \n    // Head with neck\n    translate([10, 0, 12])\n    rotate([0, -20, 0])\n    union() {\n        // Neck\n        cylinder(h=12, r1=6, r2=4, $fn=12);\n        \n        // Head\n        translate([10, 0, 3])\n        head();\n        \n        // Antlers\n        translate([7, 4, 10])\n        antler();\n        \n        translate([7, -4, 10])\n        mirror([0, 1, 0])\n        antler();\n    }\n    \n    // Front legs\n    translate([5, 6, 0])\n    leg(20, 15);\n    \n    translate([5, -6, 0])\n    leg(20, 15);\n    \n    // Rear legs\n    translate([-25, 5, 0])\n    leg(18, 20);\n    \n    translate([-25, -5, 0])\n    leg(18, 20);\n    \n    // Tail\n    tail();\n}",
    "renders": true
  },
  {
    "animal": "emu",
    "openscad_code": "// Realistic Emu - Medium Complexity\n// Dimensions: ~60mm tall, 3D printable\n\n$fn = 24;  // Smooth curves for printing\n\nmodule emu_body() {\n    // Main body - oval shape\n    translate([0, 0, 15]) {\n        scale([1.2, 0.8, 1]) sphere(r = 20);\n    }\n    \n    // Neck base\n    translate([0, 15, 30]) {\n        rotate([45, 0, 0]) \n            cylinder(h = 25, r1 = 8, r2 = 5);\n    }\n    \n    // Back hump\n    translate([0, -10, 20]) {\n        scale([0.8, 0.6, 0.6]) sphere(r = 15);\n    }\n}\n\nmodule emu_head() {\n    // Head\n    translate([0, 20, 45]) {\n        rotate([30, 0, 0]) {\n            scale([0.4, 0.3, 0.8]) sphere(r = 15);\n        }\n    }\n    \n    // Beak\n    translate([0, 30, 42]) {\n        rotate([30, 0, 0]) {\n            scale([1.5, 0.4, 0.3]) \n                cylinder(h = 8, r1 = 2, r2 = 0.5);\n        }\n    }\n    \n    // Eye\n    translate([4, 25, 50]) {\n        sphere(r = 1.5);\n    }\n}\n\nmodule emu_legs() {\n    // Left leg\n    translate([-10, 0, 0]) {\n        // Upper leg\n        translate([0, 0, 15]) {\n            rotate([0, 0, 15]) \n                cylinder(h = 15, r1 = 3, r2 = 2.5);\n        }\n        \n        // Lower leg\n        translate([-3, 0, 0]) {\n            cylinder(h = 20, r1 = 2.5, r2 = 2);\n        }\n        \n        // Foot\n        translate([-6, 0, -5]) {\n            scale([3, 1, 0.5]) cube([8, 3, 2]);\n            \n            // Toes\n            for(i = [-1:1]) {\n                translate([i * 2.5, 0, -1]) {\n                    scale([0.5, 0.3, 1]) cube([3, 2, 1]);\n                }\n            }\n        }\n    }\n    \n    // Right leg (mirrored)\n    mirror([1, 0, 0]) \n        translate([-10, 0, 0]) {\n            // Upper leg\n            translate([0, 0, 15]) {\n                rotate([0, 0, 15]) \n                    cylinder(h = 15, r1 = 3, r2 = 2.5);\n            }\n            \n            // Lower leg\n            translate([-3, 0, 0]) {\n                cylinder(h = 20, r1 = 2.5, r2 = 2);\n            }\n            \n            // Foot\n            translate([-6, 0, -5]) {\n                scale([3, 1, 0.5]) cube([8, 3, 2]);\n                \n                // Toes\n                for(i = [-1:1]) {\n                    translate([i * 2.5, 0, -1]) {\n                        scale([0.5, 0.3, 1]) cube([3, 2, 1]);\n                    }\n                }\n            }\n        }\n}\n\nmodule emu_wings() {\n    // Left wing\n    translate([-20, 0, 25]) {\n        rotate([0, 0, -20]) {\n            scale([0.3, 1.2, 0.8]) sphere(r = 12);\n        }\n    }\n    \n    // Right wing\n    mirror([1, 0, 0]) \n        translate([-20, 0, 25]) {\n            rotate([0, 0, -20]) {\n                scale([0.3, 1.2, 0.8]) sphere(r = 12);\n            }\n        }\n}\n\nmodule emu_tail() {\n    // Tail feathers\n    translate([0, -25, 15]) {\n        rotate([0, 20, 0]) {\n            scale([1, 0.2, 1.5]) sphere(r = 8);\n        }\n    }\n}\n\n// Combine all parts\nunion() {\n    emu_body();\n    emu_head();\n    emu_legs();\n    emu_wings();\n    emu_tail();\n}",
    "renders": true
  },
  {
    "animal": "ermine",
    "openscad_code": "// Ermine (Stoat) - Realistic Medium Complexity\n// Dimensions: ~80mm long\n\n$fn = 24;\n\n// Main body\nmodule body() {\n    // Torso\n    union() {\n        hull() {\n            translate([-30, 0, 10]) sphere(d=20);\n            translate([10, 0, 15]) sphere(d=18);\n            translate([30, 0, 12]) sphere(d=15);\n        }\n        \n        // Neck transition\n        hull() {\n            translate([35, 0, 15]) sphere(d=12);\n            translate([45, 0, 18]) sphere(d=10);\n        }\n    }\n}\n\n// Head\nmodule head() {\n    union() {\n        // Main head\n        hull() {\n            translate([50, 0, 20]) sphere(d=12);\n            translate([65, 0, 20]) sphere(d=10);\n            translate([60, 0, 25]) sphere(d=8);\n        }\n        \n        // Muzzle\n        hull() {\n            translate([63, 0, 20]) sphere(d=6);\n            translate([70, 0, 20]) sphere(d=4);\n        }\n        \n        // Ears\n        for(side = [-1, 1]) {\n            translate([57, side*8, 28]) {\n                rotate([0, -20*side, 0]) \n                    cylinder(h=8, d1=6, d2=2);\n            }\n        }\n        \n        // Eyes\n        for(side = [-1, 1]) {\n            translate([62, side*4, 22]) {\n                difference() {\n                    sphere(d=3);\n                    translate([1, 0, 0]) sphere(d=2.5);\n                }\n            }\n        }\n        \n        // Nose\n        translate([70, 0, 20]) sphere(d=2);\n    }\n}\n\n// Tail\nmodule tail() {\n    difference() {\n        hull() {\n            translate([-35, 0, 12]) sphere(d=10);\n            translate([-50, 0, 15]) sphere(d=8);\n            translate([-65, 0, 12]) sphere(d=6);\n            translate([-80, 0, 8]) sphere(d=4);\n        }\n        \n        // Tail tip\n        translate([-78, 0, 8]) sphere(d=6);\n    }\n    \n    // Tail tip coloring\n    translate([-78, 0, 8]) sphere(d=5);\n}\n\n// Legs\nmodule legs() {\n    for(pos = [0, 1]) {\n        // Front legs\n        translate([30 - pos*5, pos?-8:8, 0]) {\n            union() {\n                cylinder(h=15, d=6);\n                translate([0, 0, -2]) sphere(d=7);\n                // Paw\n                translate([0, 0, -4]) {\n                    sphere(d=8);\n                    for(x = [-2, 2]) {\n                        translate([x, pos?-3:3, -2]) sphere(d=2);\n                    }\n                }\n            }\n        }\n        \n        // Back legs\n        translate([-20 - pos*5, pos?-8:8, 0]) {\n            union() {\n                cylinder(h=12, d=8);\n                translate([0, 0, -2]) sphere(d=9);\n                // Paw\n                translate([0, 0, -4]) {\n                    sphere(d=10);\n                    for(x = [-2.5, 2.5]) {\n                        translate([x, pos?-3.5:3.5, -2]) sphere(d=2.5);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Fur texture (simplified)\nmodule fur_texture() {\n    // Body fur\n    for(i = [1:20]) {\n        translate([i*4 - 40, sin(i)*3, 15 + cos(i)*3]) {\n            sphere(d=1.5);\n        }\n    }\n    \n    // Head fur\n    for(i = [1:10]) {\n        translate([55 + i*2, sin(i*2)*2, 22 + cos(i*2)*2]) {\n            sphere(d=1);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    body();\n    head();\n    tail();\n    legs();\n    fur_texture();\n}\n\n// Base plate for printing\ntranslate([0, 0, -6]) {\n    cube([100, 40, 2], center=true);\n}",
    "renders": true
  },
  {
    "animal": "falcon",
    "openscad_code": "// Falcon - Realistic Medium Complexity\n// Wingspan ~80mm, printable without supports\n\n$fn = 36;\n\nmodule falcon() {\n    union() {\n        // Main body\n        body();\n        \n        // Head and beak\n        head();\n        \n        // Wings\n        left_wing();\n        right_wing();\n        \n        // Tail\n        tail();\n        \n        // Feet\n        feet();\n    }\n}\n\nmodule body() {\n    // Main torso - elongated sphere\n    translate([0, 0, 5])\n    scale([1.5, 1, 1.2])\n    sphere(15);\n    \n    // Chest protrusion\n    translate([10, 0, 0])\n    scale([1.8, 1.2, 1])\n    sphere(12);\n}\n\nmodule head() {\n    // Head sphere\n    translate([-20, 0, 15])\n    sphere(10);\n    \n    // Beak - cone\n    translate([-32, 0, 15])\n    rotate([0, 90, 0])\n    cylinder(h1 = 0, h2 = 10, r1 = 0, r2 = 3);\n    \n    // Eye sockets\n    translate([-22, 5, 17])\n    sphere(2.5);\n    \n    translate([-22, -5, 17])\n    sphere(2.5);\n    \n    // Eye balls\n    translate([-23.5, 5, 17])\n    sphere(1.5);\n    \n    translate([-23.5, -5, 17])\n    sphere(1.5);\n}\n\nmodule left_wing() {\n    translate([0, 15, 10])\n    rotate([0, 0, 30])\n    difference() {\n        // Main wing\n        union() {\n            // Upper wing\n            translate([5, 0, 0])\n            scale([2.5, 0.5, 0.8])\n            cube([25, 15, 3], center = true);\n            \n            // Lower wing\n            translate([20, 0, -5])\n            rotate([0, 0, -20])\n            scale([2, 0.5, 0.6])\n            cube([20, 12, 2], center = true);\n            \n            // Wing tip\n            translate([35, 0, -8])\n            rotate([0, 0, -45])\n            scale([1.5, 0.4, 0.4])\n            cube([10, 8, 1.5], center = true);\n        }\n        \n        // Wing feather cuts\n        for (i = [0:2]) {\n            translate([10 + i*10, 0, 0])\n            rotate([0, 0, 45])\n            cube([3, 20, 5], center = true);\n        }\n    }\n}\n\nmodule right_wing() {\n    mirror([0, 1, 0])\n    left_wing();\n}\n\nmodule tail() {\n    translate([25, 0, 0])\n    rotate([0, 0, 0])\n    union() {\n        // Tail base\n        scale([1, 2, 0.5])\n        cube([15, 8, 4], center = true);\n        \n        // Tail feathers\n        for (i = [-1:1]) {\n            translate([30, i*4, 0])\n            scale([1.2, 0.8, 0.3])\n            cube([8, 6, 2]);\n        }\n    }\n}\n\nmodule feet() {\n    // Left foot\n    translate([0, 8, -10])\n    union() {\n        // Leg\n        cylinder(h = 12, r = 2);\n        \n        // Foot\n        translate([0, 3, -7])\n        cube([8, 6, 2]);\n        \n        // Toes\n        for (i = [-1, 0, 1]) {\n            translate([i*2.5, 6, -7])\n            cube([2, 4, 2]);\n        }\n    }\n    \n    // Right foot\n    translate([0, -8, -10])\n    mirror([0, 1, 0])\n    union() {\n        cylinder(h = 12, r = 2);\n        translate([0, 3, -7])\n        cube([8, 6, 2]);\n        for (i = [-1, 0, 1]) {\n            translate([i*2.5, 6, -7])\n            cube([2, 4, 2]);\n        }\n    }\n}\n\n// Render the falcon\nfalcon();",
    "renders": true
  },
  {
    "animal": "fennec",
    "openscad_code": "// Fennec Fox - Realistic Medium Complexity\n// Model dimensions: ~80mm length\n\nmodule fennec() {\n    // Body\n    difference() {\n        union() {\n            // Main torso\n            scale([1.2, 0.8, 1])\n                sphere(r=15, $fn=32);\n            \n            // Neck connection\n            translate([12, 0, 5])\n                scale([0.8, 0.6, 0.6])\n                    sphere(r=10, $fn=24);\n            \n            // Chest\n            translate([20, 0, -5])\n                scale([1.4, 1, 0.8])\n                    sphere(r=8, $fn=24);\n            \n            // Rear\n            translate([-20, 0, -3])\n                scale([1.2, 1, 0.9])\n                    sphere(r=12, $fn=24);\n        }\n        \n        // Leg holes\n        translate([10, 0, -18]) rotate([90, 0, 0])\n            cylinder(h=20, r1=6, r2=4, $fn=16);\n        translate([-10, 0, -18]) rotate([90, 0, 0])\n            cylinder(h=20, r1=6, r2=4, $fn=16);\n    }\n    \n    // Head\n    translate([25, 0, 12]) {\n        rotate([0, -10, 0]) {\n            difference() {\n                // Main head shape\n                scale([1.3, 1, 1.1])\n                    sphere(r=12, $fn=32);\n                \n                // Eye sockets\n                translate([5, 6, 3])\n                    rotate([0, 0, 30])\n                    scale([1.5, 0.8, 0.8])\n                        sphere(r=3, $fn=16);\n                translate([5, -6, 3])\n                    rotate([0, 0, -30])\n                    scale([1.5, 0.8, 0.8])\n                        sphere(r=3, $fn=16);\n                \n                // Nose cavity\n                translate([13, 0, -2])\n                    scale([1, 0.8, 0.6])\n                        sphere(r=3, $fn=16);\n            }\n            \n            // Eyes\n            translate([6, 4, 2])\n                sphere(r=2.5, $fn=16);\n            translate([6, -4, 2])\n                sphere(r=2.5, $fn=16);\n            \n            // Nose\n            translate([12, 0, -1])\n                scale([1, 0.6, 0.4])\n                    cube([3, 3, 2], center=true);\n        }\n    }\n    \n    // Ears\n    for(side = [-1, 1]) {\n        translate([20, side*8, 25]) {\n            rotate([0, side*10, 0]) {\n                // Outer ear\n                scale([0.3, 0.8, 2])\n                    sphere(r=10, $fn=32);\n                \n                // Inner ear\n                translate([0, side*2, -3])\n                    scale([0.2, 0.6, 1.5])\n                        color(\"pink\")\n                        sphere(r=8, $fn=24);\n            }\n        }\n    }\n    \n    // Legs\n    module leg(pos, angle) {\n        translate(pos) rotate(angle) {\n            // Upper leg\n            difference() {\n                scale([0.8, 0.8, 1.2])\n                    cylinder(h=15, r=5, $fn=16);\n                translate([0, 0, -1])\n                    cylinder(h=17, r1=3, r2=5, $fn=16);\n            }\n            \n            // Lower leg\n            translate([0, 0, -15]) rotate([20, 0, 0]) {\n                difference() {\n                    scale([0.7, 0.7, 1])\n                        cylinder(h=12, r=4, $fn=16);\n                    translate([0, 0, -1])\n                        cylinder(h=14, r1=2.5, r2=4, $fn=16);\n                }\n                \n                // Paw\n                translate([0, 0, -12]) {\n                    sphere(r=4, $fn=16);\n                    for(i = [-1, 1]) {\n                        translate([i*2, 0, -2])\n                            scale([0.5, 0.5, 1])\n                                sphere(r=2, $fn=8);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Front legs\n    leg([15, 8, -15], [0, 0, 30]);\n    leg([15, -8, -15], [0, 0, -30]);\n    \n    // Rear legs\n    leg([-15, 8, -12], [0, 0, -30]);\n    leg([-15, -8, -12], [0, 0, 30]);\n    \n    // Tail\n    translate([-30, 0, 0]) {\n        rotate([0, 20, 0]) {\n            scale([0.8, 0.8, 1])\n                cylinder(h=20, r1=6, r2=3, $fn=16);\n            translate([0, 0, 20])\n                sphere(r=3, $fn=16);\n        }\n    }\n}\n\n// Main assembly\nfennec();",
    "renders": true
  },
  {
    "animal": "ferret",
    "openscad_code": "// Ferret 3D Model - Medium Complexity Realistic Style\n// Overall dimensions ~80mm length x 30mm height x 25mm width\n\n// Body parameters\nbody_length = 60;\nbody_height = 20;\nbody_width = 18;\n\n// Head parameters\nhead_length = 15;\nhead_height = 12;\nhead_width = 10;\n\n// Leg parameters\nleg_height = 8;\nleg_width = 4;\nleg_length = 6;\n\n// Tail parameters\ntail_length = 25;\ntail_radius = 3;\n\n// Ear parameters\near_height = 6;\near_width = 4;\n\n// Nose parameters\nnose_radius = 2;\n\n// Main body - elongated oval shape\nmodule body() {\n    difference() {\n        union() {\n            // Main torso\n            scale([1.8, 1, 1]) sphere(r=body_width/2, $fn=20);\n            \n            // Chest area\n            translate([-body_length/4, 0, -body_height/4]) \n                scale([1.2, 0.8, 0.8]) sphere(r=body_width/2, $fn=16);\n                \n            // Rump area\n            translate([body_length/3, 0, -body_height/6]) \n                scale([1.3, 0.9, 0.9]) sphere(r=body_width/2, $fn=16);\n        }\n        \n        // Hollow out for 3D printing\n        translate([0, 0, -2]) \n            scale([1.6, 0.8, 0.8]) sphere(r=body_width/2 - 2, $fn=20);\n    }\n}\n\n// Head with snout\nmodule head() {\n    union() {\n        // Main head\n        translate([-head_length/2, 0, body_height/2]) \n            scale([1.2, 1, 1]) sphere(r=head_width/2, $fn=16);\n            \n        // Snout\n        translate([-head_length - 2, 0, body_height/2 - 2]) \n            rotate([0, -15, 0]) \n            scale([1.5, 0.8, 0.6]) sphere(r=head_width/3, $fn=12);\n            \n        // Nose\n        translate([-head_length - 3.5, 0, body_height/2 - 2]) \n            sphere(r=nose_radius, $fn=8);\n    }\n}\n\n// Ears\nmodule ears() {\n    for(side = [-1, 1]) {\n        translate([-head_length/2, side*head_width/2, body_height/2 + head_height/4]) \n            rotate([0, 20*side, 0]) \n            rotate([30, 0, 0]) \n            cylinder(h=ear_height, r1=ear_width/2, r2=0.5, $fn=8);\n    }\n}\n\n// Eyes\nmodule eyes() {\n    for(side = [-1, 1]) {\n        translate([-head_length/2 - 2, side*head_width/3, body_height/2]) \n            sphere(r=1, $fn=8);\n    }\n}\n\n// Legs\nmodule legs() {\n    positions = [[-body_length/3, -body_width/2, -body_height/2], \n                 [body_length/3, -body_width/2, -body_height/2],\n                 [-body_length/4, body_width/2, -body_height/2],\n                 [body_length/3, body_width/2, -body_height/2]];\n    \n    for(pos = positions) {\n        translate(pos) \n            rotate([0, 10, 0]) \n            scale([1, 0.8, 1]) \n            cylinder(h=leg_height, r=leg_width/2, $fn=8);\n    }\n}\n\n// Paws\nmodule paws() {\n    positions = [[-body_length/3, -body_width/2, -body_height/2 - leg_height], \n                 [body_length/3, -body_width/2, -body_height/2 - leg_height],\n                 [-body_length/4, body_width/2, -body_height/2 - leg_height],\n                 [body_length/3, body_width/2, -body_height/2 - leg_height]];\n    \n    for(pos = positions) {\n        translate(pos) \n            scale([1.2, 1, 0.5]) \n            sphere(r=leg_width/2, $fn=8);\n    }\n}\n\n// Tail - curved tube\nmodule tail() {\n    hull() {\n        translate([body_length/2, 0, -body_height/4]) \n            sphere(r=tail_radius, $fn=12);\n            \n        translate([body_length/2 + tail_length/3, -tail_length/4, -body_height/4 - 2]) \n            sphere(r=tail_radius*0.9, $fn=12);\n            \n        translate([body_length/2 + tail_length, -tail_length/2, -body_height/4 - 4]) \n            sphere(r=tail_radius*0.7, $fn=12);\n    }\n}\n\n// Whiskers\nmodule whiskers() {\n    for(side = [-1, 1]) {\n        for(angle = [0, 15, -15]) {\n            translate([-head_length - 3, side*head_width/4, body_height/2 - 2]) \n                rotate([0, angle, 0]) \n                rotate([0, 0, side*angle]) \n                cylinder(h=8, r=0.3, $fn=4);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    \n    translate([body_length/2 - head_length/2, 0, 0]) head();\n    translate([body_length/2 - head_length/2, 0, 0]) ears();\n    translate([body_length/2 - head_length/2, 0, 0]) eyes();\n    \n    legs();\n    paws();\n    \n    tail();\n    \n    whiskers();\n}",
    "renders": true
  },
  {
    "animal": "finch",
    "openscad_code": "// Realistic Finch - Medium Complexity\n// 3D printable finch model using basic OpenSCAD primitives\n\n// Global parameters\nbody_length = 45;\nbody_height = 25;\nbody_width = 20;\nwing_span = 40;\nhead_size = 12;\nbeak_length = 8;\ntail_length = 25;\nleg_height = 10;\nfoot_length = 5;\n\nmodule finch() {\n    union() {\n        // Main body - elliptical shape\n        body();\n        \n        // Head with beak\n        head();\n        \n        // Wings\n        left_wing();\n        right_wing();\n        \n        // Tail\n        tail();\n        \n        // Legs and feet\n        left_leg();\n        right_leg();\n        \n        // Eye details\n        left_eye();\n        right_eye();\n    }\n}\n\nmodule body() {\n    // Main body using scaled spheres\n    translate([0, 0, leg_height + body_height/2])\n    scale([1.4, 1, 1])\n    sphere(d=body_height, $fn=32);\n    \n    // Chest bulge\n    translate([body_length/4, 0, leg_height + body_height/3])\n    scale([0.8, 0.7, 0.6])\n    sphere(d=body_height, $fn=24);\n}\n\nmodule head() {\n    translate([body_length/2 + head_size/2, 0, leg_height + body_height - 5])\n    sphere(d=head_size, $fn=24);\n    \n    // Beak (conical)\n    translate([body_length/2 + head_size + beak_length/2, 0, leg_height + body_height - 3])\n    rotate([0, -15, 0])\n    cylinder(h=beak_length, d1=2, d2=0.5, $fn=8);\n}\n\nmodule left_wing() {\n    translate([0, -body_width/2 - 2, leg_height + body_height - 5])\n    rotate([0, 30, -20])\n    scale([1.2, 0.3, 1])\n    sphere(d=wing_span/2, $fn=16);\n    \n    // Wing detail feathers\n    for(i = [0:2]) {\n        translate([-5 - i*3, -body_width/2 - 3 - i, leg_height + body_height - 3 - i])\n        rotate([0, 35 - i*5, -20 + i*5])\n        scale([1.2 - i*0.2, 0.2, 0.8 - i*0.1])\n        sphere(d=wing_span/2 - i*3, $fn=12);\n    }\n}\n\nmodule right_wing() {\n    mirror([0, 1, 0])\n    left_wing();\n}\n\nmodule tail() {\n    // Tail feathers using stacked cylinders\n    for(i = [0:3]) {\n        translate([-body_length/2 - tail_length/2 + i*2, 0, leg_height + body_height/2 - 5 - i*2])\n        rotate([0, 20 - i*5, 0])\n        scale([1, 1 - i*0.1, 1])\n        cylinder(h=tail_length - i*3, d1=body_width/2 - i*2, d2=body_width/4 - i, $fn=8);\n    }\n}\n\nmodule left_leg() {\n    translate([body_length/4, -body_width/4, leg_height/2])\n    cylinder(h=leg_height, d=2, $fn=8);\n    \n    // Foot\n    translate([body_length/4 + foot_length/2, -body_width/4 - foot_length/2, 0])\n    rotate([0, 0, 30])\n    cylinder(h=foot_length, d=1.5, $fn=6);\n    \n    // Toes\n    for(i = [-1:1]) {\n        translate([body_length/4 + foot_length, -body_width/4 - foot_length/2 + i*1.5, 0])\n        rotate([0, 0, 30 + i*15])\n        cylinder(h=foot_length/2, d=1, $fn=6);\n    }\n}\n\nmodule right_leg() {\n    mirror([0, 1, 0])\n    left_leg();\n}\n\nmodule left_eye() {\n    translate([body_length/2 + head_size/2 - 2, -head_size/4, leg_height + body_height - 1])\n    sphere(d=1.5, $fn=8);\n    \n    // Eye highlight\n    translate([body_length/2 + head_size/2 - 1.8, -head_size/4 - 0.3, leg_height + body_height - 0.5])\n    sphere(d=0.5, $fn=6);\n}\n\nmodule right_eye() {\n    mirror([0, 1, 0])\n    left_eye();\n}\n\n// Render the complete finch\nfinch();",
    "renders": true
  },
  {
    "animal": "firefly",
    "openscad_code": "// Firefly Model - Realistic Style, Medium Complexity\n// Approx 70mm long, 3D printable\n\n// Parameters\nbody_length = 40;\nbody_diameter = 12;\nhead_diameter = 10;\nwing_length = 25;\nwing_width = 12;\nleg_length = 15;\nleg_diameter = 1.2;\nantenna_length = 15;\nantenna_diameter = 0.8;\nglow_chamber_diameter = 8;\nglow_chamber_depth = 5;\n\nmodule firefly() {\n    // Main body segments\n    union() {\n        // Abdomen (glowing part)\n        translate([0, 0, -body_length/2])\n        cylinder(h=body_length/2, d1=body_diameter*0.8, d2=body_diameter, $fn=32);\n        \n        // Thorax\n        translate([0, 0, 0])\n        cylinder(h=body_length/3, d1=body_diameter*0.9, d2=body_diameter*1.1, $fn=32);\n        \n        // Head\n        translate([0, 0, body_length/3])\n        sphere(d=head_diameter, $fn=32);\n    }\n    \n    // Glow chamber inside abdomen\n    difference() {\n        translate([0, 0, -body_length/2 + glow_chamber_depth/2])\n        sphere(d=glow_chamber_diameter, $fn=32);\n    }\n    \n    // Wings (2 pairs)\n    for(side = [-1, 1]) {\n        // Upper wings\n        translate([side*body_diameter/2, 0, 5])\n        rotate([0, side*20, -30])\n        scale([1, 0.3, 0.1])\n        sphere(d=wing_length, $fn=32);\n        \n        // Lower wings\n        translate([side*body_diameter/2, 0, 2])\n        rotate([0, side*15, -25])\n        scale([1, 0.25, 0.08])\n        sphere(d=wing_length*0.9, $fn=32);\n    }\n    \n    // Legs (6 legs)\n    for(i = [0:5]) {\n        angle = i*60;\n        leg_x = cos(angle)*body_diameter/2;\n        leg_y = sin(angle)*body_diameter/2;\n        \n        translate([leg_x, leg_y, 0])\n        rotate([90, 0, angle])\n        cylinder(h=leg_length, d=leg_diameter, $fn=8);\n    }\n    \n    // Antennae\n    for(side = [-1, 1]) {\n        translate([side*head_diameter/4, 0, body_length/3 + head_diameter/2])\n        rotate([0, side*30, 0])\n        cylinder(h=antenna_length, d=antenna_diameter, $fn=8);\n        \n        // Antenna tips\n        translate([side*head_diameter/4 + antenna_length*sin(30), \n                  0, \n                  body_length/3 + head_diameter/2 + antenna_length*cos(30)])\n        sphere(d=antenna_diameter*1.5, $fn=8);\n    }\n    \n    // Eyes\n    for(side = [-1, 1]) {\n        translate([side*head_diameter/3, head_diameter/3, body_length/3 + head_diameter/4])\n        sphere(d=head_diameter/3, $fn=16);\n    }\n}\n\n// Render the firefly\nfirefly();\n\n// Add print support base\ntranslate([0, 0, -body_length/2 - 2])\ncylinder(h=2, d=body_diameter*1.5, $fn=32);",
    "renders": true
  },
  {
    "animal": "fish",
    "openscad_code": "// Realistic 3D-printable fish – OpenSCAD\n// Approx. 85 mm long, 50 mm tall, 25 mm thick\n// Wall thickness ≥ 2 mm, no severe overhangs\n\n$fn = 40;\n\n// overall scale – change only this\nscale_factor = 1;\n\nmodule fish() {\n    scale([scale_factor,scale_factor,scale_factor])\n    union() {\n\n        // ---------- BODY ----------\n        // central lozenge\n        translate([0,0,0])\n        scale([30,12,15])\n        sphere(1);\n\n        // tail root (widening)\n        translate([-25,0,0])\n        scale([15,10,12])\n        sphere(1);\n\n        // dorsal arch\n        translate([0,0,10])\n        scale([22,8,7])\n        sphere(1);\n\n        // ---------- TAIL ----------\n        module tail_fin() {\n            difference() {\n                // main fin\n                translate([-35,0,0])\n                rotate([0,-10,0])\n                scale([20,16,2])\n                cube([1,1,1], center=true);\n\n                // trim trailing edge\n                translate([-45,0,-1])\n                rotate([0,0,30])\n                cube([25,25,4], center=true);\n            }\n        }\n        tail_fin();\n\n        // ---------- DORSAL FIN ----------\n        module dorsal_fin() {\n            for(i = [-1:1]) {\n                translate([i*8,0,18])\n                rotate([0,0,i*10])\n                scale([6,4,8])\n                cylinder(h=1, r1=0.5, r2=0);\n            }\n            // central spine\n            translate([0,0,18])\n            rotate([-10,0,0])\n            scale([20,3,10])\n            cube([1,1,1], center=true);\n        }\n        dorsal_fin();\n\n        // ---------- PECTORAL FINS ----------\n        module pectoral_fin(side) {\n            mirror([side,0,0])\n            translate([2,side*12,-3])\n            rotate([0,0,side*20])\n            rotate([0,-20,0])\n            scale([8,12,1.5])\n            cube([1,1,1], center=true);\n        }\n        pectoral_fin(1);\n        pectoral_fin(-1);\n\n        // ---------- HEAD ----------\n        // snout\n        translate([20,0,0])\n        scale([12,10,10])\n        sphere(1);\n\n        // lower jaw\n        translate([18,0,-7])\n        scale([8,6,4])\n        sphere(1);\n\n        // ---------- EYE ----------\n        translate([22,6,3])\n        difference() {\n            sphere(3.5);          // outer white\n            translate([0,0,-0.5])\n            sphere(2.5);          // pupil\n        }\n\n        // ---------- GILL SLITS ----------\n        for(i = [1:3]) {\n            translate([10-i*3,7,-2])\n            rotate([0,90,0])\n            scale([0.5,2.5,2.5])\n            cylinder(h=1, r1=1, r2=0);\n        }\n\n    }\n}\n\nfish();",
    "renders": true
  },
  {
    "animal": "flamingo",
    "openscad_code": "// Flamingo - Realistic Medium Complexity\n// Body, neck, head, beak, legs, and feet with 3D-printable geometry\n\n// Configuration\nbody_scale = 1;\nneck_length = 35;\nleg_height = 40;\nfoot_length = 15;\nwall = 1.6;\n\n// Colors (for preview only)\ncolor_body = \"#FFB6C1\";\ncolor_beak = \"#000000\";\n\n// Main flamingo assembly\nmodule flamingo() {\n    union() {\n        // Body\n        color(color_body) body();\n\n        // Neck and head\n        translate([0, 0, 12]) neck_and_head();\n\n        // Legs\n        translate([8, 0, -leg_height]) right_leg();\n        translate([-8, 0, -leg_height]) left_leg();\n    }\n}\n\n// Body - elongated ellipsoid\nmodule body() {\n    scale([1.2, 0.6, 0.7])\n        sphere(d=30);\n}\n\n// Neck and head assembly\nmodule neck_and_head() {\n    rotate([30, 0, 0])\n    union() {\n        // Neck - series of tapered cylinders\n        for(i = [0:5]) {\n            translate([0, 0, i*5])\n                rotate([0, 0, sin(i*15)*5])\n                    cylinder(h=6, d1=8-i, d2=7-i, center=true);\n        }\n\n        // Head - small sphere\n        translate([0, 0, 35])\n            sphere(d=10);\n\n        // Beak\n        translate([0, 7, 37])\n            rotate([-30, 0, 0])\n                cylinder(h=15, d1=3, d2=1);\n\n        // Beak tip black\n        color(color_beak)\n            translate([0, 14.5, 39])\n                sphere(d=2);\n    }\n}\n\n// Right leg\nmodule right_leg() {\n    union() {\n        // Upper leg\n        cylinder(h=20, d=4);\n\n        // Knee joint\n        translate([0, 0, 10])\n            sphere(d=5);\n\n        // Lower leg\n        translate([3, 0, 20])\n            rotate([30, 0, 0])\n                cylinder(h=20, d=3);\n\n        // Foot\n        translate([6, 0, 38])\n            rotate([90, 0, 0])\n                foot();\n    }\n}\n\n// Left leg - mirror of right\nmodule left_leg() {\n    mirror([1, 0, 0])\n        right_leg();\n}\n\n// Webbed foot\nmodule foot() {\n    difference() {\n        union() {\n            // Main foot pad\n            scale([1, 0.3, 0.2])\n                sphere(d=foot_length);\n\n            // Toes\n            for(i = [-1:1]) {\n                translate([i*4, 0, 0])\n                    rotate([0, 0, i*10])\n                        scale([0.3, 0.15, 0.1])\n                            sphere(d=foot_length);\n            }\n        }\n        \n        // Remove bottom for flat print\n        translate([0, 0, -2])\n            cube([20, 10, 4], center=true);\n    }\n}\n\n// Generate the flamingo\nflamingo();",
    "renders": true
  },
  {
    "animal": "flatfish",
    "openscad_code": "// Flatfish (Sole/Flounder style) - Realistic Medium Complexity\n// Designed for 3D printing - no overhangs, 0.8mm walls\n\n$fn = 32;\n\nmodule flatfish_body() {\n    // Main body - flattened oval\n    difference() {\n        scale([1, 0.6, 0.15])\n            sphere(d = 80);\n        \n        // Tail cutout\n        translate([35, 0, -2])\n            cube([25, 20, 10], center = true);\n    }\n}\n\nmodule tail_fin() {\n    // Tail fin - two lobes\n    union() {\n        // Left lobe\n        translate([42, -12, 0])\n            rotate([0, 0, -20])\n            scale([1, 0.5, 0.05])\n            sphere(d = 25);\n        \n        // Right lobe\n        translate([42, 12, 0])\n            rotate([0, 0, 20])\n            scale([1, 0.5, 0.05])\n            sphere(d = 25);\n    }\n}\n\nmodule dorsal_fin() {\n    // Dorsal fin along top edge\n    for(i = [-30:5:25]) {\n        translate([i, -22, 1])\n            rotate([0, 90, 0])\n            cylinder(h = 8, r1 = 3, r2 = 0.5);\n    }\n}\n\nmodule anal_fin() {\n    // Anal fin along bottom edge\n    for(i = [-30:5:25]) {\n        translate([i, 22, 1])\n            rotate([0, 90, 0])\n            cylinder(h = 8, r1 = 3, r2 = 0.5);\n    }\n}\n\nmodule eye() {\n    // Eye with socket and pupil\n    union() {\n        // Eye socket\n        translate([-15, -12, 1.5])\n            sphere(d = 8);\n        \n        // Eyeball\n        translate([-15, -12, 2.5])\n            sphere(d = 6);\n        \n        // Pupil\n        translate([-15, -12, 3.5])\n            color(\"black\")\n            sphere(d = 3);\n    }\n}\n\nmodule mouth() {\n    // Mouth opening\n    translate([-25, 0, 0.5])\n        rotate([90, 0, 0])\n        cylinder(h = 2, r1 = 3, r2 = 2);\n}\n\nmodule lateral_line() {\n    // Sensory lateral line\n    for(i = [-20:3:20]) {\n        translate([i, i * 0.2, 0.8])\n            sphere(d = 1.5);\n    }\n}\n\nmodule body_markings() {\n    // Camouflage spots\n    spots = [\n        [-10, -8], [-5, 10], [5, -15], [15, 5], [0, 0],\n        [-20, 12], [20, -10], [-25, -5], [25, 8]\n    ];\n    \n    for(pos = spots) {\n        translate([pos[0], pos[1], 0.5])\n            scale([1, 0.8, 0.1])\n            sphere(d = 4);\n    }\n}\n\nmodule pectoral_fin() {\n    // Left pectoral fin\n    translate([-5, -18, 0])\n        rotate([0, 0, -45])\n        scale([1, 0.3, 0.05])\n        sphere(d = 20);\n    \n    // Right pectoral fin (partially hidden)\n    translate([-5, 18, 0])\n        rotate([0, 0, 45])\n        scale([1, 0.3, 0.05])\n        sphere(d = 15);\n}\n\n// Assemble the fish\nunion() {\n    flatfish_body();\n    tail_fin();\n    dorsal_fin();\n    anal_fin();\n    pectoral_fin();\n    \n    // Both eyes on same side (flatfish characteristic)\n    eye();\n    mirror([0, 1, 0])\n        eye();\n    \n    mouth();\n    lateral_line();\n    body_markings();\n}",
    "renders": true
  },
  {
    "animal": "flea",
    "openscad_code": "// Realistic 3D-printable flea\n// Overall length ~70 mm\n\nmodule flea() {\n    // Thorax-abdomen block\n    color(\"brown\")\n    union() {\n        // Thorax\n        translate([0, 0, 6])\n            rotate([0, 90, 0])\n                scale([1.2, 1.2, 1.5])\n                    cylinder(h = 12, r1 = 4, r2 = 3, $fn = 32);\n\n        // Abdomen\n        translate([0, -10, 1])\n            rotate([0, 90, 0])\n                scale([1, 1, 1.2])\n                    cylinder(h = 20, r1 = 3, r2 = 5, $fn = 32);\n\n        // Head\n        translate([12, 0, 3])\n            sphere(d = 6, $fn = 32);\n    }\n\n    // Antennae\n    for (side = [-1, 1]) {\n        translate([11, side * 1.5, 6])\n            rotate([0, 30, side * 15])\n                cylinder(h = 6, r = 0.4, $fn = 8);\n    }\n\n    // Eyes\n    color(\"black\")\n    for (side = [-1, 1]) {\n        translate([12.5, side * 2, 4])\n            sphere(d = 1.2, $fn = 12);\n    }\n\n    // Mouth parts\n    difference() {\n        translate([14, 0, 3])\n            cylinder(h = 2, r = 1, $fn = 12);\n        translate([14.5, 0, 3])\n            cylinder(h = 2.2, r = 0.5, $fn = 12);\n    }\n\n    // Legs\n    module leg(angle, y) {\n        translate([0, y, 5])\n            rotate([0, angle, 0])\n                union() {\n                    // Coxa\n                    translate([5, 0, 0])\n                        rotate([0, 90, 0])\n                            cylinder(h = 4, r = 0.8, $fn = 8);\n\n                    // Femur\n                    translate([8, 0, -2])\n                        rotate([45, 0, 0])\n                            cylinder(h = 6, r = 0.6, $fn = 8);\n\n                    // Tibia\n                    translate([8, 0, -6])\n                        rotate([90, 0, 0])\n                            cylinder(h = 5, r = 0.4, $fn = 8);\n\n                    // Tarsi\n                    translate([8, 0, -9.5])\n                        rotate([110, 0, 0])\n                            cylinder(h = 3, r = 0.3, $fn = 8);\n                }\n    }\n\n    // 3 pairs of legs\n    leg(0, 2);\n    leg(0, -2);\n    leg(0, 0);\n    leg(180, 4);\n    leg(180, -4);\n    leg(180, 0);\n\n    // Jumping hind legs with enlarged femora\n    module hind_leg(side) {\n        translate([-8, side * 3, 3])\n            rotate([0, -30, side * 15])\n                union() {\n                    // Coxa\n                    cylinder(h = 5, r = 1, $fn = 8);\n\n                    // Enlarged femur for jumping\n                    translate([0, 0, -5])\n                        rotate([45, 0, 0])\n                            scale([1, 1, 1.5])\n                                cylinder(h = 8, r = 1, $fn = 8);\n\n                    // Tibia\n                    translate([0, 0, -11])\n                        rotate([110, 0, 0])\n                            cylinder(h = 6, r = 0.5, $fn = 8);\n\n                    // Tarsi\n                    translate([0, 0, -15])\n                        rotate([130, 0, 0])\n                            cylinder(h = 4, r = 0.4, $fn = 8);\n                }\n    }\n\n    hind_leg(1);\n    hind_leg(-1);\n\n    // Spines on body\n    color(\"darkbrown\")\n    for (i = [0:30]) {\n        angle = i * 12;\n        y = 4 * sin(angle);\n        z = 3 + 1.5 * cos(angle);\n        translate([0, y, z])\n            rotate([0, 90, 0])\n                cylinder(h = 1, r = 0.2, $fn = 6);\n    }\n}\n\n// Scale to printable size and position\nscale([1.2, 1.2, 1.2])\n    flea();",
    "renders": true
  },
  {
    "animal": "flounder",
    "openscad_code": "// Flounder (medium complexity, realistic style)\n// Overall dimensions ~80mm x 45mm x 8mm\n\n$fn=36;\n\nmodule body() {\n    // Main oval body\n    hull() {\n        translate([0,0,2])\n            scale([1,0.55,0.2])\n            sphere(d=80);\n        translate([0,0,0])\n            scale([0.9,0.5,0.1])\n            sphere(d=80);\n    }\n}\n\nmodule tail() {\n    // Tail fin extending from back\n    translate([-40,0,0])\n    rotate([0,0,90])\n    linear_extrude(height=3, center=true) {\n        polygon(points=[\n            [0,0],\n            [-15,-12],\n            [-18,0],\n            [-15,12],\n            [0,0]\n        ]);\n    }\n}\n\nmodule left_eye() {\n    // Left eye on top side\n    translate([18,12,5.5])\n    rotate([90,0,0])\n    difference() {\n        cylinder(h=3, d=6);     // eyeball\n        translate([0,0,2.5])\n        cylinder(h=1, d=3);     // pupil\n    }\n}\n\nmodule right_eye() {\n    // Right eye on top side\n    translate([18,-12,5.5])\n    rotate([90,0,0])\n    difference() {\n        cylinder(h=3, d=6);     // eyeball\n        translate([0,0,2.5])\n        cylinder(h=1, d=3);     // pupil\n    }\n}\n\nmodule dorsal_fin() {\n    // Top fin along back\n    for(i=[-30:5:25]) {\n        translate([i,0,5])\n        rotate([0,90,0])\n        scale([0.8,1,1])\n        cylinder(h=8, d1=3, d2=1);\n    }\n}\n\nmodule anal_fin() {\n    // Bottom fin along belly\n    for(i=[-25:5:20]) {\n        translate([i,0,0.5])\n        rotate([0,90,0])\n        scale([0.8,1,1])\n        cylinder(h=6, d1=3, d2=1);\n    }\n}\n\nmodule pectoral_fin() {\n    // Side fins\n    translate([0,22,2])\n    rotate([0,0,30])\n    linear_extrude(height=2, center=true)\n    polygon(points=[\n        [0,0],\n        [10,5],\n        [15,0],\n        [10,-5],\n        [0,0]\n    ]);\n    \n    mirror([0,1,0])\n    translate([0,22,2])\n    rotate([0,0,30])\n    linear_extrude(height=2, center=true)\n    polygon(points=[\n        [0,0],\n        [10,5],\n        [15,0],\n        [10,-5],\n        [0,0]\n    ]);\n}\n\nmodule mouth() {\n    // Small mouth on underside\n    translate([30,0,0.2])\n    rotate([90,0,0])\n    scale([1,0.3,1])\n    cylinder(h=0.5, d=8);\n}\n\nmodule lateral_line() {\n    // Lateral line markings\n    for(i=[-30:10:30]) {\n        translate([i,0,5])\n        scale([1,0.2,1])\n        sphere(d=2);\n    }\n}\n\nmodule spots() {\n    // Random spots on top\n    translate([10,8,5])\n    sphere(d=2);\n    translate([-5,12,5])\n    sphere(d=1.5);\n    translate([-15,-8,5])\n    sphere(d=2.5);\n    translate([5,-15,5])\n    sphere(d=1.8);\n}\n\n// Assemble the flounder\nunion() {\n    body();\n    tail();\n    left_eye();\n    right_eye();\n    dorsal_fin();\n    anal_fin();\n    pectoral_fin();\n    mouth();\n    lateral_line();\n    spots();\n}",
    "renders": true
  },
  {
    "animal": "fly",
    "openscad_code": "// Realistic Medium-Complexity 3D-Printable Fly\n// Body ~60 mm long, printable without supports\n\n// Parameters\nbody_d = 12;\nhead_d = 8;\neye_d = 3.2;\nthorax_l = 10;\nabdomen_l = 22;\nleg_thick = 1.2;\nleg_len = 18;\nwing_span = 34;\nwing_thick = 0.6;\n\n// Colors (for preview only)\ncolor_body = \"#222222\";\ncolor_wing = \"#444444\";\ncolor_eye = \"#000000\";\n\n// Body color\ncolor(color_body) {\n\n// Head\nmodule head() {\n    translate([0,0,head_d/2]) sphere(d=head_d,$fn=32);\n    // Eyes\n    color(color_eye) {\n        translate([head_d/2.8,0,head_d*0.7]) sphere(d=eye_d,$fn=24);\n        mirror([1,0,0]) translate([head_d/2.8,0,head_d*0.7]) sphere(d=eye_d,$fn=24);\n    }\n}\n\n// Thorax\nmodule thorax() {\n    translate([0,0,-head_d/2-thorax_l/2]) {\n        scale([1,0.8,1]) sphere(d=body_d,$fn=32);\n    }\n}\n\n// Abdomen segments\nmodule abdomen() {\n    translate([0,0,-head_d/2-thorax_l-abdomen_l/2]) {\n        difference() {\n            scale([1,1.2,1.3]) sphere(d=body_d*1.2,$fn=32);\n            // Segment grooves\n            for(i=[1:5]) {\n                translate([0,0,-abdominal_segment(i)]) {\n                    rotate([90,0,0]) cylinder(h=body_d*1.3,d=body_d*1.2+1,$fn=32);\n                }\n            }\n        }\n    }\n}\n\nfunction abdominal_segment(i) = -ab abdomen_l/2 + i*4;\n\n// Leg pair\nmodule leg_pair(angle, side) {\n    translate([0,side*body_d/2,-head_d/2-3]) {\n        rotate([0,angle,0]) {\n            rotate([0,0,side*20]) {\n                // Coxa\n                cylinder(h=3,d=leg_thick*1.4,$fn=12);\n                translate([0,0,3]) rotate([side*-30,0,0]) {\n                    // Femur\n                    cylinder(h=leg_len*0.4,d=leg_thick,$fn=8);\n                    translate([0,0,leg_len*0.4]) rotate([side*30,0,0]) {\n                        // Tibia\n                        cylinder(h=leg_len*0.5,d=leg_thick*0.8,$fn=8);\n                        translate([0,0,leg_len*0.5]) rotate([side*-20,0,0]) {\n                            // Tarsus\n                            cylinder(h=leg_len*0.3,d=leg_thick*0.6,$fn=8);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Wing\nmodule wing() {\n    color(color_wing) {\n        translate([0,0,-head_d/2-4]) {\n            rotate([0,0,90]) {\n                linear_extrude(height=wing_thick) {\n                    polygon(points=[\n                        [0,0],\n                        [wing_span*0.45,wing_span*0.05],\n                        [wing_span*0.9,wing_span*0.15],\n                        [wing_span*0.7,wing_span*0.3],\n                        [wing_span*0.5,wing_span*0.35],\n                        [wing_span*0.3,wing_span*0.2],\n                        [0.1,0.1]\n                    ]);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nhead();\nthorax();\nabdomen();\n\n// Legs\nfor(side=[-1,1]) {\n    leg_pair(-30,side);\n    leg_pair(0,side);\n    leg_pair(30,side);\n}\n\n// Wings\ntranslate([0,0,-head_d/2-4]) {\n    rotate([0,0,25]) wing();\n    mirror([0,1,0]) rotate([0,0,25]) wing();\n}\n\n}",
    "renders": true
  },
  {
    "animal": "flyingfish",
    "openscad_code": "// Flying Fish - Realistic Medium Complexity\n// Designed for 3D printing - approximately 80mm length\n\n// Overall scale factor\nscale_factor = 1;\n\n// Body parameters\nbody_length = 40 * scale_factor;\nbody_height = 12 * scale_factor;\nbody_width = 18 * scale_factor;\n\n// Wing parameters\nwing_span = 60 * scale_factor;\nwing_chord = 25 * scale_factor;\nwing_thickness = 2 * scale_factor;\n\n// Tail parameters\ntail_length = 20 * scale_factor;\ntail_height = 15 * scale_factor;\n\n// Fin parameters\nfin_height = 8 * scale_factor;\nfin_length = 12 * scale_factor;\n\nmodule fish_body() {\n    // Main body - ellipsoid shape\n    scale([1, body_width/body_length, body_height/body_length])\n        sphere(d=body_length, $fn=32);\n    \n    // Add belly bulge\n    translate([0, 0, -body_height/3])\n        scale([0.8, 1, 0.5])\n            sphere(d=body_length * 0.7, $fn=32);\n}\n\nmodule fish_head() {\n    // Tapered head section\n    translate([-body_length/2, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h=body_length/3, d1=body_width, d2=body_width*0.7, $fn=32);\n    \n    // Lower jaw\n    translate([-body_length/2 - 2, 0, -body_height/3])\n        rotate([0, 20, 0])\n            cube([body_length/4, body_width*0.6, body_height/2], center=true);\n}\n\nmodule fish_wing(side) {\n    // Main wing structure\n    translate([0, side * body_width/2, body_height/3])\n        rotate([0, side * 10, 0])\n            scale([wing_chord, wing_span/2, wing_thickness])\n                cube([1, 1, 1], center=true);\n    \n    // Wing struts for support\n    for(i = [0:2]) {\n        translate([wing_chord/4 - i*wing_chord/3, side * wing_span/4, body_height/3])\n            rotate([90, 0, 0])\n                cylinder(h=wing_span/2 - 5, d=1.5, center=true, $fn=8);\n    }\n}\n\nmodule fish_tail() {\n    // Upper tail lobe\n    translate([body_length/2 + tail_length/2, 0, tail_height/3])\n        rotate([0, 0, 15])\n            scale([tail_length, tail_height/2, wing_thickness])\n                cube([1, 1, 1], center=true);\n    \n    // Lower tail lobe\n    translate([body_length/2 + tail_length/2, 0, -tail_height/3])\n        rotate([0, 0, -15])\n            scale([tail_length*0.8, tail_height/2, wing_thickness])\n                cube([1, 1, 1], center=true);\n}\n\nmodule dorsal_fin() {\n    // Main dorsal fin\n    translate([body_length/4, 0, body_height/2 + fin_height/2])\n        rotate([0, 0, 0])\n            scale([fin_length, fin_height/2, wing_thickness])\n                cube([1, 1, 1], center=true);\n    \n    // Fin rays\n    for(i = [-2:2]) {\n        translate([body_length/4 + i*3, 0, body_height/2 + fin_height])\n            rotate([0, 90, 0])\n                cylinder(h=fin_height, d=0.8, $fn=6);\n    }\n}\n\nmodule pectoral_fin(side) {\n    // Side fins\n    translate([-body_length/4, side * body_width/2, -body_height/4])\n        rotate([0, 90, side * 20])\n            scale([fin_length/2, fin_height/2, wing_thickness])\n                cube([1, 1, 1], center=true);\n}\n\nmodule eye(side) {\n    // Eye socket\n    translate([-body_length/3, side * body_width/3, body_height/4])\n        sphere(d=3, $fn=16);\n    \n    // Eye ball\n    translate([-body_length/3 - 0.5, side * body_width/3, body_height/4])\n        sphere(d=2.5, $fn=16);\n}\n\n// Main assembly\nunion() {\n    fish_body();\n    fish_head();\n    \n    // Wings\n    fish_wing(1);\n    fish_wing(-1);\n    \n    fish_tail();\n    dorsal_fin();\n    \n    // Side fins\n    pectoral_fin(1);\n    pectoral_fin(-1);\n    \n    // Eyes\n    eye(1);\n    eye(-1);\n}",
    "renders": true
  },
  {
    "animal": "fossa",
    "openscad_code": "// Fossa (Cryptoprocta ferox) - Realistic Style, Medium Complexity\n// Designed for 3D printing, approximately 80mm long\n\n// Overall dimensions\nbody_length = 80;\nbody_height = 25;\ntail_length = 60;\nleg_height = 20;\n\n// Body module\nmodule body() {\n    // Main torso - elongated ellipsoid shape\n    translate([-body_length/2, 0, 0])\n    scale([1.5, 0.8, 0.6])\n    sphere(d=body_height, $fn=32);\n    \n    // Chest bulge\n    translate([-body_length/2 + 10, 0, -body_height/4])\n    scale([1.2, 1, 0.8])\n    sphere(d=body_height * 0.8, $fn=32);\n}\n\n// Head module\nmodule head() {\n    // Main head shape\n    translate([body_length/2 - 5, 0, body_height/2])\n    rotate([0, -10, 0])\n    scale([1.2, 0.9, 0.8])\n    sphere(d=body_height * 0.7, $fn=32);\n    \n    // Snout extension\n    translate([body_length/2 + 8, 0, body_height/2 - 3])\n    rotate([0, -10, 0])\n    scale([1.5, 0.6, 0.5])\n    sphere(d=body_height * 0.5, $fn=32);\n    \n    // Ears\n    for(side = [-1, 1]) {\n        translate([body_length/2, side * 8, body_height/2 + 5])\n        rotate([0, 0, side * 20])\n        scale([0.3, 0.8, 1.5])\n        cylinder(h=8, d1=6, d2=4, $fn=16);\n    }\n}\n\n// Leg module with paws\nmodule leg(position, angle) {\n    translate(position)\n    rotate([0, 0, angle]) {\n        // Upper leg\n        translate([0, 0, leg_height/2])\n        scale([0.8, 0.8, 1])\n        cylinder(h=leg_height, d=6, $fn=16);\n        \n        // Lower leg\n        translate([0, 0, -leg_height/2 - 2])\n        scale([0.7, 0.7, 0.5])\n        cylinder(h=8, d=5, $fn=16);\n        \n        // Paw\n        translate([0, 0, -leg_height/2 - 8])\n        scale([1.2, 1, 0.6])\n        sphere(d=6, $fn=16);\n    }\n}\n\n// Tail module\nmodule tail() {\n    // Segmented tail for realistic curve\n    for(i = [0:5]) {\n        translate([-body_length/2 - 5 - i * 10, 0, -body_height/4 + sin(i * 30) * 2])\n        rotate([sin(i * 30) * 10, 0, 0])\n        scale([1 - i * 0.1, 1 - i * 0.1, 1 - i * 0.1])\n        sphere(d=body_height * 0.4 - i * 2, $fn=16);\n    }\n}\n\n// Eyes module\nmodule eyes() {\n    for(side = [-1, 1]) {\n        // Eye socket\n        translate([body_length/2 + 5, side * 5, body_height/2])\n        sphere(d=4, $fn=16);\n        \n        // Pupil\n        translate([body_length/2 + 6.5, side * 5, body_height/2])\n        sphere(d=2, $fn=16);\n    }\n}\n\n// Main assembly\nunion() {\n    // Body\n    body();\n    \n    // Head\n    head();\n    \n    // Legs\n    leg([body_length/2 - 10, -8, -body_height/2], 10);\n    leg([body_length/2 - 10, 8, -body_height/2], -10);\n    leg([-body_length/2 + 15, -6, -body_height/2], 5);\n    leg([-body_length/2 + 15, 6, -body_height/2], -5);\n    \n    // Tail\n    tail();\n    \n    // Eyes\n    eyes();\n}\n\n// Whiskers\nfor(side = [-1, 1]) {\n    for(i = [0:2]) {\n        translate([body_length/2 + 10, side * (5 + i * 2), body_height/2 - 2])\n        rotate([0, side * 20, 0])\n        cylinder(h=8, d=0.5, $fn=8);\n    }\n}",
    "renders": true
  },
  {
    "animal": "fox",
    "openscad_code": "// Realistic Fox - Medium Complexity\n// Approx 80mm long, 40mm high\n\n$fn = 32;\n\nmodule fox() {\n    // Body\n    translate([0, 0, 15])\n    scale([1.2, 0.6, 0.8])\n    sphere(r=20);\n    \n    // Chest\n    translate([15, 0, 12])\n    scale([0.8, 0.5, 0.6])\n    sphere(r=15);\n    \n    // Head\n    translate([35, 0, 25])\n    scale([0.8, 0.7, 0.9])\n    sphere(r=15);\n    \n    // Snout\n    translate([45, 0, 22])\n    scale([1.2, 0.6, 0.5])\n    sphere(r=8);\n    \n    // Ears - left\n    translate([35, 12, 35])\n    rotate([0, 10, -20])\n    scale([0.3, 0.1, 0.8])\n    cylinder(h=15, r1=8, r2=5);\n    \n    // Ears - right\n    translate([35, -12, 35])\n    rotate([0, 10, 20])\n    scale([0.3, 0.1, 0.8])\n    cylinder(h=15, r1=8, r2=5);\n    \n    // Tail\n    translate([-25, 0, 20])\n    rotate([0, 0, 30])\n    scale([1.5, 0.8, 1])\n    difference() {\n        cylinder(h=40, r1=12, r2=5);\n        translate([20, 0, 0])\n        cube([50, 50, 50], center=true);\n    }\n    \n    // Legs\n    module leg(x, y) {\n        translate([x, y, 0])\n        rotate([0, 10, 0])\n        scale([0.3, 0.3, 1])\n        cylinder(h=25, r1=8, r2=5);\n    }\n    \n    leg(20, 10);\n    leg(20, -10);\n    leg(-5, 10);\n    leg(-5, -10);\n    \n    // Eyes\n    module eye(x, y) {\n        translate([x, y, 25])\n        rotate([0, -10, 0])\n        scale([0.8, 0.8, 0.2])\n        sphere(r=3);\n    }\n    \n    eye(43, 5);\n    eye(43, -5);\n    \n    // Nose\n    translate([48, 0, 22])\n    scale([0.5, 0.7, 0.5])\n    sphere(r=2);\n    \n    // White chest patch\n    translate([25, 0, 12])\n    scale([1, 0.8, 0.3])\n    sphere(r=10);\n    \n    // Tail tip\n    translate([-45, 0, 25])\n    scale([0.6, 0.6, 0.6])\n    sphere(r=7);\n}\n\nfox();",
    "renders": true
  },
  {
    "animal": "frog",
    "openscad_code": "// Realistic Frog - Medium Complexity\n// Dimensions: ~80mm long, 50mm wide, 30mm tall\n\n// Global parameters\nbody_length = 40;\nbody_width = 35;\nbody_height = 25;\nleg_thickness = 6;\nhead_size = 22;\n\n// Main body module\nmodule frog_body() {\n    // Main torso - ellipsoid shape using scaled spheres\n    translate([0, 0, body_height/2])\n    scale([1.2, 1, 0.8])\n    sphere(d = body_width, $fn=50);\n    \n    // Lower body bulge\n    translate([0, 0, body_height/4])\n    scale([1.4, 1.2, 0.6])\n    sphere(d = body_width * 0.9, $fn=50);\n    \n    // Back ridge\n    for(i = [-1:0.5:1]) {\n        translate([i * 10, 0, body_height * 0.9])\n        rotate([90, 0, 0])\n        cylinder(h = 8, d1 = 4, d2 = 2, $fn=6);\n    }\n}\n\n// Head module\nmodule frog_head() {\n    // Main head sphere\n    translate([-body_length/2 - head_size/2, 0, head_size/2])\n    sphere(d = head_size, $fn=50);\n    \n    // Snout extension\n    translate([-body_length/2 - head_size/1.2, 0, head_size/2])\n    scale([1.5, 0.8, 0.8])\n    sphere(d = head_size * 0.7, $fn=40);\n}\n\n// Eye module\nmodule eye(side) {\n    translate([-body_length/2 - head_size/1.5, side * head_size/3, head_size * 0.8]) {\n        // Eye socket\n        color(\"darkgreen\")\n        sphere(d = 8, $fn=20);\n        \n        // Eye ball\n        translate([0, 0, 3])\n        color(\"black\")\n        sphere(d = 5, $fn=20);\n        \n        // Eyelid ridge\n        translate([0, 0, 6])\n        scale([1.2, 1, 0.3])\n        color(\"green\")\n        sphere(d = 8, $fn=20);\n    }\n}\n\n// Leg module\nmodule leg(position, angle, mirror_x = false) {\n    // Position: 1 for front, -1 for back\n    // angle: rotation for sitting pose\n    \n    translate([position * body_length/2.5, 0, 0]) {\n        rotate([0, angle, 0]) {\n            if(mirror_x) mirror([1, 0, 0]) {\n                // Upper leg\n                translate([0, 0, leg_thickness/2])\n                rotate([0, -30, 0])\n                scale([1.5, 1, 0.8])\n                sphere(d = leg_thickness * 2, $fn=20);\n                \n                // Lower leg\n                translate([-leg_thickness * 1.2, 0, -leg_thickness * 1.5])\n                rotate([0, 30, 0])\n                scale([2, 0.8, 0.6])\n                sphere(d = leg_thickness * 1.8, $fn=20);\n                \n                // Foot\n                translate([-leg_thickness * 2.5, 0, -leg_thickness * 2.5])\n                scale([3, 1.5, 0.5])\n                sphere(d = leg_thickness * 1.5, $fn=20);\n                \n                // Toes\n                for(toe = [-1, 0, 1]) {\n                    translate([-leg_thickness * 3.5, toe * leg_thickness/2, -leg_thickness * 2.7])\n                    scale([0.8, 0.3, 0.2])\n                    sphere(d = leg_thickness, $fn=10);\n                }\n            } else {\n                // Upper leg\n                translate([0, 0, leg_thickness/2])\n                rotate([0, -30, 0])\n                scale([1.5, 1, 0.8])\n                sphere(d = leg_thickness * 2, $fn=20);\n                \n                // Lower leg\n                translate([-leg_thickness * 1.2, 0, -leg_thickness * 1.5])\n                rotate([0, 30, 0])\n                scale([2, 0.8, 0.6])\n                sphere(d = leg_thickness * 1.8, $fn=20);\n                \n                // Foot\n                translate([-leg_thickness * 2.5, 0, -leg_thickness * 2.5])\n                scale([3, 1.5, 0.5])\n                sphere(d = leg_thickness * 1.5, $fn=20);\n                \n                // Toes\n                for(toe = [-1, 0, 1]) {\n                    translate([-leg_thickness * 3.5, toe * leg_thickness/2, -leg_thickness * 2.7])\n                    scale([0.8, 0.3, 0.2])\n                    sphere(d = leg_thickness, $fn=10);\n                }\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Body\n    color(\"forestgreen\")\n    frog_body();\n    \n    // Head\n    color(\"forestgreen\")\n    frog_head();\n    \n    // Eyes\n    eye(-1); // Left\n    eye(1);  // Right\n    \n    // Front legs\n    leg(1, 45, false);\n    leg(1, 45, true);\n    \n    // Back legs\n    leg(-1, 60, false);\n    leg(-1, 60, true);\n}",
    "renders": true
  },
  {
    "animal": "fulmar",
    "openscad_code": "// Fulmar 3D model - medium complexity realistic style\n// Designed for 3D printing without supports\n\n$fn = 32;  // Smooth curves for printing\n\n// Main module\nmodule fulmar() {\n    // Body\n    body();\n    \n    // Head\n    translate([20, 0, 5]) head();\n    \n    // Wings\n    translate([-5, -15, 8]) left_wing();\n    mirror([0,1,0]) translate([-5, 15, 8]) right_wing();\n    \n    // Tail\n    translate([-15, 0, 6]) tail();\n    \n    // Feet\n    translate([5, -4, -2]) foot();\n    translate([5, 4, -2]) foot();\n}\n\n// Body module\nmodule body() {\n    difference() {\n        // Main body shape\n        union() {\n            // Torso\n            scale([1.5, 1, 1]) sphere(10);\n            \n            // Belly bulge\n            translate([0, 0, -5]) \n                scale([1.6, 1.2, 0.8]) \n                sphere(8);\n        }\n        \n        // Neck depression\n        translate([15, 0, 5]) \n            rotate([0, 10, 0]) \n            scale([1.5, 1, 1]) \n            sphere(6);\n    }\n}\n\n// Head module\nmodule head() {\n    // Head shape\n    difference() {\n        union() {\n            // Main head\n            scale([1.2, 0.9, 1]) sphere(8);\n            \n            // Beak\n            translate([8, 0, -2]) \n                rotate([-15, 0, 0]) \n                scale([1, 0.6, 0.4]) \n                cylinder(h=12, r1=4, r2=1);\n        }\n        \n        // Eye sockets\n        translate([5, -4, 2]) sphere(2);\n        translate([5, 4, 2]) sphere(2);\n    }\n    \n    // Eyes\n    color(\"black\") {\n        translate([5.5, -4, 2]) sphere(1.5);\n        translate([5.5, 4, 2]) sphere(1.5);\n    }\n}\n\n// Wing module\nmodule left_wing() {\n    // Wing shape\n    difference() {\n        union() {\n            // Main wing\n            rotate([0, 0, -10]) \n                scale([0.3, 2.5, 0.1]) \n                sphere(10);\n            \n            // Wing tip\n            translate([-3, -12, 0]) \n                rotate([0, 0, -20]) \n                scale([0.2, 1, 0.05]) \n                sphere(8);\n        }\n        \n        // Wing cutouts for feathers\n        for(i = [1:3]) {\n            translate([-1, -i*4, 0]) \n                rotate([0, 0, -20]) \n                scale([0.5, 0.3, 0.5]) \n                cube([8, 3, 1]);\n        }\n    }\n}\n\n// Tail module\nmodule tail() {\n    union() {\n        // Central tail feathers\n        translate([-15, 0, 8]) \n            rotate([0, 30, 0]) \n            scale([0.3, 1, 0.1]) \n            cube([10, 8, 2]);\n        \n        // Side tail feathers\n        translate([-15, -3, 7]) \n            rotate([0, 25, -5]) \n            scale([0.3, 0.8, 0.1]) \n            cube([8, 6, 1.5]);\n            \n        translate([-15, 3, 7]) \n            rotate([0, 25, 5]) \n            scale([0.3, 0.8, 0.1]) \n            cube([8, 6, 1.5]);\n    }\n}\n\n// Foot module\nmodule foot() {\n    // Webbed foot\n    color(\"orange\") {\n        // Main foot\n        translate([0, 0, -1]) \n            scale([1, 0.5, 0.3]) \n            sphere(3);\n        \n        // Toes\n        for(i = [-1, 0, 1]) {\n            translate([2, i*1.5, -1]) \n                rotate([0, 0, i*10]) \n                scale([1.5, 0.3, 0.2]) \n                cube([4, 2, 1]);\n        }\n    }\n}\n\n// Generate the model\nfulmar();",
    "renders": true
  },
  {
    "animal": "gallinule",
    "openscad_code": "// Gallinule (medium complexity, realistic style)\n// Total size ~80 mm from beak to tail\n\n// Body dimensions\nbody_len = 55;\nbody_w = 30;\nbody_h = 28;\n\n// Head dimensions\nhead_r = 12;\n\n// Beak dimensions\nbeak_len = 18;\nbeak_w = 4;\nbeak_h = 5;\n\n// Leg dimensions\nleg_len = 25;\nleg_r = 2.5;\ntoe_len = 8;\ntoe_r = 1.2;\n\n// Wing dimensions\nwing_len = 30;\nwing_w = 15;\n\n// Tail dimensions\ntail_len = 15;\ntail_w = 25;\ntail_h = 8;\n\n// Helper module for rounded body\nmodule rounded_box(l, w, h, r) {\n    hull() {\n        translate([r, r, r]) sphere(r);\n        translate([l-r, r, r]) sphere(r);\n        translate([r, w-r, r]) sphere(r);\n        translate([l-r, w-r, r]) sphere(r);\n        translate([r, r, h-r]) sphere(r);\n        translate([l-r, r, h-r]) sphere(r);\n        translate([r, w-r, h-r]) sphere(r);\n        translate([l-r, w-r, h-r]) sphere(r);\n    }\n}\n\n// Main body\nmodule body() {\n    difference() {\n        union() {\n            // Main torso\n            translate([0, -body_w/2, 0])\n                rounded_box(body_len, body_w, body_h, 8);\n            \n            // Neck transition\n            translate([body_len-5, 0, body_h-3])\n                rotate([0, -20, 0])\n                cylinder(h=12, r1=8, r2=6, $fn=16);\n        }\n        \n        // Eye sockets (left and right)\n        for(side = [-1, 1])\n            translate([body_len+8, side*8, body_h+5])\n                sphere(3.5);\n    }\n}\n\n// Head with beak\nmodule head_and_beak() {\n    translate([body_len+8, 0, body_h+5])\n    rotate([0, -20, 0]) {\n        // Head\n        sphere(head_r, $fn=32);\n        \n        // Beak\n        translate([head_r, 0, -head_r/3])\n        rotate([0, -10, 0])\n        difference() {\n            // Main beak\n            cube([beak_len, beak_w, beak_h], center=true);\n            \n            // Beak tip taper\n            translate([beak_len-2, 0, -beak_h/2])\n                cube([4, beak_w+1, beak_h], center=true);\n        }\n        \n        // Eyes\n        color(\"white\")\n        for(side = [-1, 1])\n            translate([head_r/2, side*4, head_r/3])\n                sphere(2.5, $fn=16);\n    }\n}\n\n// Wings\nmodule wings() {\n    for(side = [-1, 1]) {\n        translate([body_len/3, side*(body_w/2+1), body_h/2])\n        rotate([0, 0, side*(-20)])\n        rotate([0, 90, 0])\n            difference() {\n                // Main wing\n                scale([1, 0.6, 1])\n                    cylinder(h=wing_len, r1=wing_w/2, r2=wing_w/3, $fn=16);\n                \n                // Feather notches\n                for(i = [1:3]) {\n                    translate([wing_len/4*i, -wing_w/2-1, 0])\n                        rotate([0, 0, 45])\n                        cube([wing_len/8, wing_w, wing_w], center=true);\n                }\n            }\n    }\n}\n\n// Tail\nmodule tail() {\n    translate([-5, 0, body_h/2])\n    rotate([0, 0, 0])\n    difference() {\n        // Main tail fan\n        cube([tail_len, tail_w, tail_h], center=true);\n        \n        // Tail notch\n        translate([0, 0, tail_h/2])\n            cube([tail_len+1, tail_w/2, tail_h+1], center=true);\n    }\n}\n\n// Legs and feet\nmodule legs_and_feet() {\n    for(side = [-1, 1]) {\n        translate([body_len/4, side*body_w/3, 0])\n        rotate([0, side*5, 0])\n        union() {\n            // Upper leg\n            cylinder(h=leg_len, r=leg_r, $fn=12);\n            \n            // Foot\n            translate([0, 0, -leg_len])\n            rotate([90, 0, 0])\n            union() {\n                // Central toe\n                translate([0, 0, 0])\n                    cylinder(h=toe_len, r=toe_r, $fn=8);\n                \n                // Side toes\n                for(angle = [-30, 30])\n                    rotate([0, 0, angle])\n                        translate([toe_len/3, 0, 0])\n                            cylinder(h=toe_len*0.8, r=toe_r, $fn=8);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    head_and_beak();\n    wings();\n    tail();\n    legs_and_feet();\n}",
    "renders": true
  },
  {
    "animal": "gannet",
    "openscad_code": "// Gannet - OpenSCAD model\n// Medium complexity, realistic style, 3D printable\n\n$fa = 2;\n$fs = 1;\n\nmodule gannet() {\n    scale(0.8) {\n        // Main body\n        body();\n        \n        // Head and neck\n        translate([0, 22, 8]) rotate([-30, 0, 0]) head();\n        \n        // Wings\n        translate([-12, 0, 5]) rotate([0, 0, 45]) wing();\n        translate([12, 0, 5]) mirror([1, 0, 0]) rotate([0, 0, 45]) wing();\n        \n        // Tail\n        translate([0, -25, 0]) tail();\n        \n        // Feet\n        translate([-5, -15, -12]) foot();\n        translate([5, -15, -12]) mirror([1, 0, 0]) foot();\n    }\n}\n\nmodule body() {\n    difference() {\n        // Main body shape\n        union() {\n            scale([1.2, 1.5, 1]) sphere(12);\n            translate([0, -5, -5]) scale([1, 1.2, 0.8]) sphere(10);\n        }\n        \n        // Flatten bottom for printing\n        translate([0, 0, -12]) cube([30, 30, 24], center=true);\n    }\n}\n\nmodule head() {\n    difference() {\n        union() {\n            // Main head shape\n            translate([0, 8, 0]) scale([1, 1.3, 1]) sphere(5);\n            \n            // Beak\n            translate([0, 14, -2]) rotate([30, 0, 0]) \n                scale([0.8, 2.5, 0.5]) cylinder(h=10, r1=2, r2=0.5);\n            \n            // Neck\n            translate([0, 5, -3]) rotate([45, 0, 0])\n                cylinder(h=8, r1=3, r2=2);\n        }\n        \n        // Eye socket\n        translate([-2.5, 8, 1]) sphere(1.2);\n        translate([2.5, 8, 1]) sphere(1.2);\n    }\n    \n    // Eyes\n    color(\"black\") {\n        translate([-2.5, 7.8, 1.2]) sphere(0.8);\n        translate([2.5, 7.8, 1.2]) sphere(0.8);\n    }\n}\n\nmodule wing() {\n    difference() {\n        // Main wing\n        translate([0, 0, 0]) scale([1, 2, 0.3]) sphere(8);\n        \n        // Wing tip\n        translate([-5, -12, 0]) rotate([0, 0, -20])\n            scale([0.5, 1, 0.3]) sphere(5);\n        \n        // Cut for feather definition\n        for(i = [0:3]) {\n            translate([0, -i*3, 0])\n                rotate([0, 0, i*5])\n                cube([15, 0.5, 2], center=true);\n        }\n    }\n}\n\nmodule tail() {\n    difference() {\n        // Tail shape\n        translate([0, -5, 0]) scale([1.5, 1, 0.2]) sphere(6);\n        \n        // Tail fork\n        translate([0, -8, 0]) cube([12, 8, 3], center=true);\n    }\n}\n\nmodule foot() {\n    // Leg\n    translate([0, 0, 3]) rotate([0, 10, 0])\n        scale([0.4, 0.4, 1]) cylinder(h=6, r=3);\n    \n    // Webbed foot\n    translate([0, 0, 0]) scale([1, 1.5, 0.3]) sphere(3);\n    \n    // Toes\n    for(i = [-1:1]) {\n        translate([i*1.5, 2, -0.5]) rotate([0, 0, i*15])\n            scale([0.3, 1, 0.3]) cylinder(h=3, r1=1, r2=0.5);\n    }\n}\n\n// Generate the gannet\ngannet();",
    "renders": true
  },
  {
    "animal": "gar",
    "openscad_code": "// Realistic Gar - Medium Complexity\n// Approx 80 mm long, 3D printable with no supports\n\n// Overall dimensions\ngar_length = 80;\ngar_height = 12;\n\nmodule gar_body() {\n    difference() {\n        // Main body - elongated ellipsoid\n        scale([1, 0.4, 0.25])\n            sphere(gar_length/2, $fn=32);\n        \n        // Flatten underside slightly\n        translate([0, 0, -gar_length/4 - 1])\n            cube([gar_length, gar_length, 2], center=true);\n    }\n}\n\nmodule gar_head() {\n    translate([-gar_length/2, 0, 0])\n    difference() {\n        // Elongated snout\n        scale([1.2, 0.3, 0.2])\n            sphere(gar_length/4, $fn=32);\n            \n        // Mouth opening\n        translate([-gar_length/8, 0, -gar_length/20])\n            rotate([0, 30, 0])\n            cube([gar_length/12, gar_length/25, gar_length/40], center=true);\n    }\n}\n\nmodule gar_jaw() {\n    translate([-gar_length/2 + 5, 0, -gar_height/2])\n    rotate([15, 0, 0])\n    scale([0.8, 0.25, 0.15])\n        sphere(gar_length/5, $fn=16);\n}\n\nmodule gar_eye() {\n    translate([-gar_length/2 + 8, gar_length/10, gar_height/4])\n    difference() {\n        sphere(2.5);\n        translate([0, 0, 2])\n            sphere(1.5);\n    }\n}\n\nmodule gar_fin(position, angle, scale_factor) {\n    translate(position)\n    rotate([0, 0, angle])\n    scale([scale_factor, 1, 1])\n    difference() {\n        // Fin base\n        translate([0, 0, -1])\n            cube([8, 1, 2]);\n        \n        // Fin rays\n        for(i = [-3:3]) {\n            translate([i*1.5, 0, 0])\n                rotate([0, 90, 0])\n                cylinder(h=4, r1=0.3, r2=0.1, $fn=8);\n        }\n    }\n}\n\nmodule gar_scales() {\n    // Simple scale pattern along body\n    for(i = [0:5:gar_length-10]) {\n        translate([-gar_length/2 + i, 0, 0])\n        rotate([0, 0, i*5])\n        difference() {\n            scale([0.8, 0.3, 0.2])\n                sphere(4);\n            translate([0, 0, -1])\n                cube([8, 6, 2], center=true);\n        }\n    }\n}\n\nmodule gar_tail() {\n    translate([gar_length/2, 0, 0])\n    rotate([0, 0, -10])\n    difference() {\n        // Upper tail lobe\n        translate([0, 0, 2])\n            rotate([0, 30, 0])\n            scale([1, 0.3, 0.1])\n                cylinder(h=12, r1=6, r2=3, $fn=3);\n        \n        // Lower tail lobe\n        translate([0, 0, -2])\n            rotate([0, -30, 0])\n            scale([1, 0.3, 0.1])\n                cylinder(h=8, r1=4, r2=2, $fn=3);\n    }\n}\n\n// Assemble the gar\nunion() {\n    gar_body();\n    gar_head();\n    gar_jaw();\n    gar_eye();\n    mirror([0, 1, 0]) gar_eye();\n    \n    // Dorsal fin\n    gar_fin([gar_length/4, 0, gar_height/2], 0, 1);\n    \n    // Pectoral fins\n    gar_fin([-gar_length/4, gar_length/8, -gar_height/4], 45, 0.7);\n    gar_fin([-gar_length/4, -gar_length/8, -gar_height/4], -45, 0.7);\n    \n    // Anal fin\n    gar_fin([gar_length/3, 0, -gar_height/2], 180, 0.8);\n    \n    gar_tail();\n    gar_scales();\n}",
    "renders": true
  },
  {
    "animal": "gazelle",
    "openscad_code": "// Gazelle - Realistic Medium Complexity\n// Designed for 3D printing, no overhangs\n\nmodule gazelle() {\n    // Body\n    difference() {\n        hull() {\n            translate([0, 0, 20]) sphere([15, 20, 15]);\n            translate([0, 0, 10]) sphere([12, 15, 12]);\n        }\n        \n        // Hollow body\n        translate([0, 0, 15]) sphere([10, 15, 10]);\n    }\n    \n    // Neck\n    translate([0, 12, 25]) rotate([0, 30, 0]) \n        cylinder(h=20, r1=6, r2=4, $fn=8);\n    \n    // Head\n    translate([0, 25, 38]) rotate([0, 30, 0]) {\n        hull() {\n            sphere([6, 5, 4]);\n            translate([0, 8, 0]) sphere([4, 6, 3]);\n        }\n        \n        // Snout\n        translate([0, 12, 0]) cylinder(h=8, r1=2, r2=1, $fn=6);\n        \n        // Horns\n        for(i=[-1, 1]) {\n            translate([i*3, 0, 4]) rotate([30, i*20, 0]) \n                cylinder(h=12, r1=1, r2=0.5, $fn=4);\n        }\n        \n        // Ears\n        for(i=[-1, 1]) {\n            translate([i*4, 2, 2]) rotate([0, i*30, 0])\n                cylinder(h=5, r1=1, r2=0.5, $fn=3);\n        }\n    }\n    \n    // Legs\n    module leg() {\n        hull() {\n            translate([0, 0, 0]) sphere([2, 2, 2]);\n            translate([0, 0, -12]) sphere([1.5, 1.5, 1.5]);\n        }\n    }\n    \n    // Front legs\n    for(i=[-1, 1]) {\n        translate([i*8, 8, 15]) rotate([0, 0, 10]) leg();\n    }\n    \n    // Back legs\n    for(i=[-1, 1]) {\n        translate([i*8, -8, 15]) rotate([0, 0, -10]) leg();\n    }\n    \n    // Tail\n    translate([0, -18, 20]) rotate([0, 0, 45])\n        cylinder(h=10, r1=2, r2=0.5, $fn=6);\n}\n\nscale(0.8) gazelle();",
    "renders": true
  },
  {
    "animal": "gecko",
    "openscad_code": "// Realistic Gecko Model - Medium Complexity\n// 3D Printable Gecko using basic OpenSCAD primitives\n\n$fn = 32;  // Smooth curves for 3D printing\nbody_length = 60;\nbody_height = 8;\nleg_length = 25;\ntail_length = 45;\nhead_length = 15;\nhead_width = 12;\n\nmodule gecko_body() {\n    // Main body - egg shape\n    union() {\n        // Torso section\n        translate([0, 0, body_height/2])\n            scale([1.2, 0.8, 0.5])\n            sphere(d=body_length);\n        \n        // Belly curve\n        translate([0, 0, 1])\n            scale([1.1, 0.9, 0.3])\n            sphere(d=body_length * 0.9);\n    }\n}\n\nmodule gecko_head() {\n    // Triangular head with snout\n    union() {\n        // Main head\n        translate([body_length/2 + head_length/2, 0, body_height + head_width/2])\n            rotate([0, 0, -10])\n            scale([1.5, 1, 0.8])\n            sphere(d=head_width);\n        \n        // Snout extension\n        translate([body_length/2 + head_length, 0, body_height + head_width/2 - 2])\n            scale([2, 0.6, 0.4])\n            sphere(d=head_width * 0.8);\n        \n        // Eye sockets\n        for(side = [-1, 1]) {\n            translate([body_length/2 + head_length * 0.8, side * head_width/3, body_height + head_width/2 + 1])\n                sphere(d=3);\n        }\n    }\n}\n\nmodule gecko_leg(position, angle, is_front = true) {\n    // Position: [x, y, z] attachment point\n    // angle: rotation angle for leg orientation\n    \n    translate(position)\n    rotate([0, 0, angle]) {\n        // Upper leg segment\n        translate([0, 0, -2])\n            rotate([30, 0, 0])\n            scale([0.8, 0.8, 2])\n            sphere(d=6);\n        \n        translate([4, 0, -5])\n            rotate([60, 0, 0])\n            scale([0.6, 0.6, 1.5])\n            sphere(d=5);\n        \n        // Lower leg segment\n        translate([8, 0, -10])\n            rotate([90, 0, 0])\n            scale([0.5, 0.5, 2])\n            cylinder(d1=4, d2=3, h=8);\n        \n        // Foot with toe pads\n        translate([8, 0, -18])\n            rotate([90, 0, 0]) {\n            // Main foot\n            scale([2, 1, 0.5])\n            sphere(d=6);\n            \n            // Toes\n            for(i = [-2:2]) {\n                translate([i * 2, 0, -2])\n                    scale([0.4, 0.8, 2])\n                    sphere(d=3);\n            }\n        }\n    }\n}\n\nmodule gecko_tail() {\n    // Curved tail segments\n    for(i = [0:5]) {\n        translate([-body_length/2 - i * 8, 0, body_height/2 - i * 2])\n            rotate([0, -i * 5, 0])\n            scale([1 - i * 0.1, 1 - i * 0.1, 1 - i * 0.1])\n            rotate([90, 0, 0])\n            cylinder(d1=10 - i, d2=8 - i, h=8);\n    }\n}\n\nmodule gecko_pattern() {\n    // Raised spots for texture\n    for(i = [0:8]) {\n        angle = i * 45;\n        radius = body_length/3;\n        x = cos(angle) * radius/2;\n        y = sin(angle) * radius/2;\n        \n        translate([x, y, body_height + 2])\n            sphere(d=2);\n    }\n    \n    // Tail pattern\n    for(i = [0:5]) {\n        translate([-body_length/2 - i * 8 - 4, 0, body_height/2 - i * 2 + 2])\n            sphere(d=1.5);\n    }\n}\n\n// Main assembly\nunion() {\n    gecko_body();\n    gecko_head();\n    gecko_tail();\n    \n    // Leg positions\n    // Front legs\n    gecko_leg([body_length/3, body_length/3, body_height/2], -45, true);\n    gecko_leg([body_length/3, -body_length/3, body_height/2], 45, true);\n    \n    // Back legs\n    gecko_leg([-body_length/3, body_length/3, body_height/2], -135, false);\n    gecko_leg([-body_length/3, -body_length/3, body_height/2], 135, false);\n    \n    // Body pattern details\n    gecko_pattern();\n}",
    "renders": true
  },
  {
    "animal": "gemsbok",
    "openscad_code": "// Gemsbok (Oryx gazella) - Medium complexity realistic style\n// Dimensions: ~80mm long, 40mm high\n$fn=32;\n\n// Main body\nmodule body() {\n    // Torso\n    union() {\n        // Main torso\n        translate([0,0,20]) \n            scale([1.2,1,0.8])\n            sphere(15);\n        \n        // Chest forward\n        translate([-12,0,15])\n            scale([0.8,0.6,0.6])\n            sphere(12);\n        \n        // Hindquarters\n        translate([12,0,15])\n            scale([1,1,0.7])\n            sphere(14);\n    }\n}\n\n// Head with characteristic horns\nmodule head() {\n    union() {\n        // Head base\n        translate([-25,0,35])\n            rotate([0,-10,0])\n            scale([1.2,0.8,0.7])\n            sphere(10);\n        \n        // Muzzle\n        translate([-35,0,32])\n            scale([0.8,0.4,0.4])\n            sphere(8);\n        \n        // Horns - straight and long\n        for(side=[-1,1]) {\n            // Left/right horn\n            translate([-20,side*8,45]) {\n                rotate([0,side*5,0])\n                cylinder(30,2,2);\n                translate([0,0,30])\n                    rotate([0,side*15,0])\n                    cylinder(25,2,1);\n            }\n        }\n        \n        // Ears\n        for(side=[-1,1]) {\n            translate([-18,side*12,42])\n                rotate([0,0,side*30])\n                scale([0.3,1,2])\n                cube([8,2,8], center=true);\n        }\n    }\n}\n\n// Leg with hoof\nmodule leg(height, angle, side) {\n    translate([0,side*8,0]) {\n        rotate([0,angle,0]) {\n            // Upper leg\n            translate([0,0,height/2])\n                scale([0.8,0.8,1])\n                cylinder(height, 4, 3);\n            \n            // Lower leg\n            translate([0,0,height+2])\n                scale([0.6,0.6,1])\n                cylinder(height*0.7, 3, 2);\n            \n            // Hoof\n            translate([0,0,height*1.7+2])\n                scale([1.2,1,0.5])\n                cylinder(4, 3, 4);\n        }\n    }\n}\n\n// Tail\nmodule tail() {\n    translate([18,0,22])\n        rotate([20,0,0])\n        cylinder(15, 2, 1);\n}\n\n// Assemble the gemsbok\nunion() {\n    // Main body\n    body();\n    \n    // Head\n    head();\n    \n    // Legs - front pair\n    leg(20, 15, -1);\n    leg(20, 15, 1);\n    \n    // Legs - rear pair\n    leg(20, -15, -1);\n    leg(20, -15, 1);\n    \n    // Tail\n    tail();\n    \n    // Black markings\n    difference() {\n        translate([0,0,20])\n            sphere(15.5);\n        \n        // White belly patch\n        translate([0,0,10])\n            scale([1.5,1.2,0.5])\n            sphere(12);\n    }\n    \n    // Face mask\n    translate([-32,0,32])\n        scale([1.2,1,0.8])\n        sphere(9);\n}",
    "renders": true
  },
  {
    "animal": "genet",
    "openscad_code": "// Genet - Medium Complexity Realistic Style\n// Overall dimensions approximately 80mm long\n\n$fn = 36;\n\nmodule body() {\n    // Main torso - elongated oval shape\n    union() {\n        // Central body section\n        scale([1.2, 0.8, 0.7])\n            sphere(d=30);\n        \n        // Rump section\n        translate([-20, 0, -2])\n            scale([1.0, 0.9, 0.6])\n                sphere(d=25);\n        \n        // Chest section\n        translate([15, 0, 0])\n            scale([0.9, 0.8, 0.7])\n                sphere(d=22);\n    }\n}\n\nmodule head() {\n    // Genet head - elongated with pointed snout\n    translate([30, 0, 8])\n        rotate([0, -10, 0])\n        union() {\n            // Skull\n            scale([1.4, 1.0, 0.9])\n                sphere(d=18);\n            \n            // Snout\n            translate([10, 0, -2])\n                scale([1.2, 0.6, 0.5])\n                    sphere(d=12);\n            \n            // Ears - large and rounded\n            translate([5, 8, 6])\n                rotate([0, -20, 0])\n                scale([0.3, 1.0, 0.8])\n                    cylinder(d1=8, d2=12, h=10);\n            translate([5, -8, 6])\n                rotate([0, 20, 0])\n                scale([0.3, 1.0, 0.8])\n                    cylinder(d1=8, d2=12, h=10);\n        }\n}\n\nmodule tail() {\n    // Long bushy tail with rings\n    translate([-35, 0, 3])\n        rotate([0, 0, 10])\n        for(i = [0:5]) {\n            translate([i * -6, 0, 0])\n                rotate([0, i * 5, 0])\n                scale([1 - i * 0.08, 1 - i * 0.05, 1 - i * 0.05])\n                    sphere(d=20 - i * 2);\n        }\n}\n\nmodule legs() {\n    // Front legs\n    for(side = [-1, 1]) {\n        // Front leg\n        translate([15, side * 10, -12])\n            rotate([0, 0, side * 15])\n            union() {\n                // Upper leg\n                cylinder(d1=6, d2=5, h=15);\n                // Lower leg\n                translate([0, 0, -15])\n                    rotate([20, 0, 0])\n                    cylinder(d1=5, d2=4, h=12);\n                // Paw\n                translate([0, 0, -27])\n                    sphere(d=5);\n            }\n        \n        // Rear leg\n        translate([-15, side * 12, -10])\n            rotate([0, 0, side * -20])\n            union() {\n                // Upper leg\n                cylinder(d1=8, d2=6, h=18);\n                // Lower leg\n                translate([0, 0, -18])\n                    rotate([30, 0, 0])\n                    cylinder(d1=6, d2=5, h=15);\n                // Paw\n                translate([0, 0, -32])\n                    sphere(d=6);\n            }\n    }\n}\n\nmodule facial_features() {\n    // Eyes\n    for(side = [-1, 1]) {\n        translate([38, side * 5, 6])\n            scale([1, 1.5, 1])\n            sphere(d=4);\n    }\n    \n    // Nose\n    translate([43, 0, 3])\n        sphere(d=3);\n    \n    // Whiskers\n    for(side = [-1, 1])\n        for(i = [0:2]) {\n            translate([40, side * 3, 2 + i * 1.5])\n                rotate([0, 0, side * (30 - i * 20)])\n                cylinder(d=0.5, h=8);\n        }\n}\n\nmodule stripes() {\n    // Body stripes pattern\n    for(i = [0:5]) {\n        translate([25 - i * 10, 0, 0])\n            rotate([0, 90, 0])\n            difference() {\n                cylinder(d=40 - i * 2, h=3);\n                scale([0.8, 0.8, 1])\n                    cylinder(d=40 - i * 2, h=4);\n            }\n    }\n}\n\n// Main assembly\nunion() {\n    body();\n    head();\n    tail();\n    legs();\n    facial_features();\n    stripes();\n}",
    "renders": true
  },
  {
    "animal": "gerbil",
    "openscad_code": "// Realistic 3D Printable Gerbil Model\n// Medium complexity - approximately 85mm long\n\n// Main parameters\n$fn = 32;\nbody_length = 40;\nbody_height = 22;\nhead_size = 18;\ntail_length = 45;\nleg_height = 12;\n\nmodule gerbil_body() {\n    // Main body - ellipsoid shape\n    translate([0, 0, body_height/2])\n        scale([1.2, 0.8, 1])\n        sphere(d = body_length);\n    \n    // Add belly bulge\n    translate([0, -body_length/4, body_height/3])\n        scale([0.8, 0.6, 0.5])\n        sphere(d = body_length * 0.7);\n}\n\nmodule gerbil_head() {\n    // Head shape\n    translate([body_length/2 + 5, 0, body_height/1.5])\n        rotate([0, -10, 0])\n        scale([1, 0.9, 0.8])\n        sphere(d = head_size);\n    \n    // Snout extension\n    translate([body_length/2 + 12, 0, body_height/1.5 - 2])\n        rotate([0, -10, 0])\n        scale([1.5, 0.7, 0.6])\n        sphere(d = head_size * 0.7);\n    \n    // Nose tip\n    translate([body_length/2 + 16, 0, body_height/1.5 - 2])\n        sphere(d = 4);\n}\n\nmodule ears() {\n    // Left ear\n    translate([body_length/2 + 2, -head_size/3, body_height/1.5 + 8])\n        rotate([0, -30, -30])\n        scale([0.3, 1, 1.2])\n        cylinder(h = head_size/2, d1 = 8, d2 = 6);\n    \n    // Right ear\n    translate([body_length/2 + 2, head_size/3, body_height/1.5 + 8])\n        rotate([0, -30, 30])\n        scale([0.3, 1, 1.2])\n        cylinder(h = head_size/2, d1 = 8, d2 = 6);\n}\n\nmodule eyes() {\n    // Left eye\n    translate([body_length/2 + 10, -head_size/3, body_height/1.5])\n        sphere(d = 3);\n    \n    // Right eye\n    translate([body_length/2 + 10, head_size/3, body_height/1.5])\n        sphere(d = 3);\n    \n    // Eye highlights for printing effect\n    translate([body_length/2 + 11, -head_size/3 - 1, body_height/1.5 + 1])\n        sphere(d = 1);\n    translate([body_length/2 + 11, head_size/3 - 1, body_height/1.5 + 1])\n        sphere(d = 1);\n}\n\nmodule legs() {\n    // Front left leg\n    translate([body_length/3, -body_length/3, leg_height/2])\n        rotate([10, 0, 0])\n        cylinder(h = leg_height, d1 = 6, d2 = 4);\n    \n    // Front right leg\n    translate([body_length/3, body_length/3, leg_height/2])\n        rotate([10, 0, 0])\n        cylinder(h = leg_height, d1 = 6, d2 = 4);\n    \n    // Back left leg\n    translate([-body_length/3, -body_length/3, leg_height/2])\n        rotate([10, 0, 0])\n        cylinder(h = leg_height*1.2, d1 = 7, d2 = 5);\n    \n    // Back right leg\n    translate([-body_length/3, body_length/3, leg_height/2])\n        rotate([10, 0, 0])\n        cylinder(h = leg_height*1.2, d1 = 7, d2 = 5);\n    \n    // Paw details\n    for (i = [-1, 1]) {\n        translate([body_length/3, i*body_length/3, 1])\n            sphere(d = 5);\n        translate([-body_length/3, i*body_length/3, 1])\n            sphere(d = 6);\n    }\n}\n\nmodule tail() {\n    // Tail segments for curved appearance\n    for (i = [0:4]) {\n        translate([-(body_length/2 + i*tail_length/5), 0, body_height/2 - i*2])\n            rotate([0, 0, -i*10])\n            cylinder(h = tail_length/5, d = 8 - i*1.2);\n    }\n    \n    // Tail tip\n    translate([-(body_length/2 + tail_length), 0, body_height/2 - 10])\n        sphere(d = 4);\n}\n\nmodule whiskers() {\n    // Whiskers on left side\n    for (angle = [15:30:75]) {\n        rotate([0, 0, angle])\n            translate([body_length/2 + 15, -head_size/3, body_height/1.5 - 2])\n                cylinder(h = 12, d = 0.8);\n    }\n    \n    // Whiskers on right side\n    for (angle = [-15:-30:-75]) {\n        rotate([0, 0, angle])\n            translate([body_length/2 + 15, head_size/3, body_height/1.5 - 2])\n                cylinder(h = 12, d = 0.8);\n    }\n}\n\n// Assemble the gerbil\nunion() {\n    gerbil_body();\n    gerbil_head();\n    ears();\n    eyes();\n    legs();\n    tail();\n    whiskers();\n}",
    "renders": true
  },
  {
    "animal": "gharial",
    "openscad_code": "$fn=36;\n\n// Gharial 3D model - medium complexity realistic style\n// Designed for 3D printing, approximately 80mm long\n\nmodule gharial() {\n    // Body parameters\n    body_length = 60;\n    body_height = 12;\n    body_width = 15;\n    \n    // Head parameters\n    head_length = 25;\n    head_height = 8;\n    \n    // Tail parameters\n    tail_length = 35;\n    tail_height = 6;\n    \n    // Leg parameters\n    leg_length = 8;\n    leg_height = 4;\n    \n    // Main body\n    union() {\n        // Central body\n        translate([0, 0, body_height/2])\n        scale([1, 0.8, 1])\n        sphere(d=body_height);\n        \n        // Body segments\n        for(i=[-20:10:20]) {\n            translate([i, 0, body_height/2 - abs(i)/8])\n            sphere(d=body_height - abs(i)/4);\n        }\n        \n        // Head\n        translate([-body_length/2 - head_length/2, 0, body_height/2])\n        scale([1.2, 0.7, 0.9])\n        sphere(d=head_height);\n        \n        // Snout\n        translate([-body_length/2 - head_length - 8, 0, body_height/2 + 1])\n        scale([3, 0.3, 0.3])\n        cylinder(h=15, d1=head_height/2, d2=2);\n        \n        // Tail\n        for(i=[body_length/2:5:body_length/2 + tail_length]) {\n            translate([i, 0, body_height/2 - (i - body_length/2)/5])\n            scale([1, 1 - (i - body_length/2)/tail_length, 1 - (i - body_length/2)/tail_length])\n            sphere(d=tail_height);\n        }\n        \n        // Legs\n        module leg(pos_x, pos_y, angle) {\n            translate([pos_x, pos_y, leg_height/2])\n            rotate([0, 0, angle])\n            union() {\n                // Upper leg\n                scale([1.5, 0.8, 1])\n                sphere(d=leg_height);\n                \n                // Lower leg\n                translate([leg_length/2, 0, -leg_height/2])\n                rotate([90, 0, 0])\n                cylinder(h=leg_length, d=leg_height*0.8);\n                \n                // Foot\n                translate([leg_length, 0, -leg_height])\n                scale([2, 0.5, 0.5])\n                sphere(d=leg_height);\n            }\n        }\n        \n        // Front legs\n        leg(-body_length/3, body_width/2, 45);\n        leg(-body_length/3, -body_width/2, -45);\n        \n        // Back legs\n        leg(body_length/3, body_width/2, -45);\n        leg(body_length/3, -body_width/2, 45);\n        \n        // Eyes\n        translate([-body_length/2 - head_length/2 - 3, 3, body_height/2 + 2])\n        sphere(d=2);\n        \n        translate([-body_length/2 - head_length/2 - 3, -3, body_height/2 + 2])\n        sphere(d=2);\n        \n        // Nostrils\n        translate([-body_length/2 - head_length - 10, 1.5, body_height/2 + 1])\n        sphere(d=1);\n        \n        translate([-body_length/2 - head_length - 10, -1.5, body_height/2 + 1])\n        sphere(d=1);\n        \n        // Scutes (back ridges)\n        for(i=[-15:5:15]) {\n            translate([i, 0, body_height/2 + 2])\n            scale([0.3, 1, 1])\n            cylinder(h=3, d1=2, d2=0.5);\n        }\n    }\n}\n\n// Create the gharial\ngharial();",
    "renders": true
  },
  {
    "animal": "gibbon",
    "openscad_code": "// Gibbon - medium complexity realistic style\n// Designed for 3D printing, ~75mm tall\n\n$fn = 32;  // Smooth curves\n\n// Main assembly\nmodule gibbon() {\n    union() {\n        // Body segments\n        torso();\n        head();\n        \n        // Limbs\n        left_arm();\n        right_arm();\n        left_leg();\n        right_leg();\n        \n        // Tail\n        tail();\n    }\n}\n\n// Torso - elongated oval\nmodule torso() {\n    color(\"tan\")\n    union() {\n        // Main body\n        translate([0, 0, 20])\n            scale([1.2, 0.8, 1.5])\n            sphere(r=15);\n        \n        // Chest ridge\n        translate([0, -8, 20])\n            scale([0.8, 0.3, 1.2])\n            sphere(r=12);\n    }\n}\n\n// Head with facial features\nmodule head() {\n    color(\"tan\")\n    union() {\n        // Skull\n        translate([0, -25, 45])\n            scale([0.9, 1.1, 1.2])\n            sphere(r=12);\n        \n        // Muzzle\n        translate([0, -35, 42])\n            scale([0.6, 0.8, 0.5])\n            sphere(r=8);\n        \n        // Eyes (slightly recessed)\n        translate([-5, -32, 48])\n            difference() {\n                sphere(r=2.5);\n                translate([0, 0, 1])\n                    sphere(r=2.2);\n            }\n        \n        translate([5, -32, 48])\n            difference() {\n                sphere(r=2.5);\n                translate([0, 0, 1])\n                    sphere(r=2.2);\n            }\n        \n        // Eye pupils (black)\n        color(\"black\")\n        union() {\n            translate([-5, -34, 48.5])\n                sphere(r=1);\n            translate([5, -34, 48.5])\n                sphere(r=1);\n        }\n        \n        // Nostrils\n        translate([-2.5, -40, 42])\n            rotate([90, 0, 0])\n            cylinder(h=3, r1=1.5, r2=0.5);\n        translate([2.5, -40, 42])\n            rotate([90, 0, 0])\n            cylinder(h=3, r1=1.5, r2=0.5);\n        \n        // Ears\n        translate([-12, -22, 45])\n            rotate([0, 10, 0])\n            scale([0.3, 1, 1.2])\n            sphere(r=4);\n        translate([12, -22, 45])\n            rotate([0, -10, 0])\n            scale([0.3, 1, 1.2])\n            sphere(r=4);\n    }\n}\n\n// Arms - long and slender\nmodule left_arm() {\n    color(\"tan\")\n    union() {\n        // Upper arm\n        translate([-15, -10, 35])\n            rotate([0, 0, 45])\n            cylinder(h=25, r1=4, r2=3);\n        \n        // Elbow joint\n        translate([-28, -20, 28])\n            sphere(r=3.5);\n        \n        // Forearm\n        translate([-35, -28, 25])\n            rotate([0, 0, 45])\n            rotate([15, 0, 0])\n            cylinder(h=30, r1=3, r2=2.5);\n        \n        // Hand\n        translate([-55, -38, 22])\n            rotate([0, 0, 30])\n            scale([0.8, 2, 0.5])\n            sphere(r=4);\n    }\n}\n\nmodule right_arm() {\n    mirror([1, 0, 0])\n    left_arm();\n}\n\n// Legs - shorter than arms\nmodule left_leg() {\n    color(\"tan\")\n    union() {\n        // Thigh\n        translate([-8, 0, 15])\n            rotate([0, 0, -30])\n            cylinder(h=20, r1=4.5, r2=3.5);\n        \n        // Knee\n        translate([-12, -5, 0])\n            sphere(r=3.5);\n        \n        // Shin\n        translate([-15, -8, -8])\n            rotate([0, 0, -30])\n            cylinder(h=18, r1=3.5, r2=2.5);\n        \n        // Foot\n        translate([-18, -10, -22])\n            rotate([0, 15, 0])\n            scale([1.5, 3, 0.8])\n            sphere(r=3.5);\n    }\n}\n\nmodule right_leg() {\n    mirror([1, 0, 0])\n    left_leg();\n}\n\n// Short tail\nmodule tail() {\n    color(\"tan\")\n    translate([0, 10, 15])\n        rotate([30, 0, 0])\n        cylinder(h=15, r1=3, r2=1);\n}\n\n// Create the gibbon\ngibbon();",
    "renders": true
  },
  {
    "animal": "gila",
    "openscad_code": "// Gila Monster - Realistic Style (Medium Complexity)\n// Approximate size: 80mm length, 30mm width, 15mm height\n\n$fn = 32;\n\n// Main body module\nmodule gila_monster() {\n    // Body segments\n    union() {\n        // Head\n        head();\n        \n        // Neck\n        translate([12, 0, 0]) neck();\n        \n        // Body segments\n        for(i = [1:5]) {\n            translate([12 + i*10, 0, -i*1.5]) body_segment(i);\n        }\n        \n        // Tail\n        translate([62, 0, -8]) tail();\n        \n        // Legs\n        translate([20, -8, -3]) front_left_leg();\n        translate([20, 8, -3]) front_right_leg();\n        translate([40, -8, -5]) back_left_leg();\n        translate([40, 8, -5]) back_right_leg();\n        \n        // Bead pattern along back\n        for(i = [0:7]) {\n            translate([8 + i*8, 0, 4]) scale([1.2, 0.8, 0.6]) sphere(2.5);\n        }\n    }\n}\n\n// Head module\nmodule head() {\n    difference() {\n        // Main head shape\n        union() {\n            scale([1.2, 0.9, 0.7]) sphere(8);\n            translate([-3, 0, -2]) cube([6, 10, 6], center=true);\n        }\n        \n        // Eye sockets\n        translate([2, -4, 1]) sphere(2.5);\n        translate([2, 4, 1]) sphere(2.5);\n        \n        // Nostrils\n        translate([-6, -2, -1]) cylinder(h=3, r=1);\n        translate([-6, 2, -1]) cylinder(h=3, r=1);\n    }\n    \n    // Eyes\n    translate([2, -4, 1]) sphere(1.5);\n    translate([2, 4, 1]) sphere(1.5);\n    \n    // Lower jaw\n    translate([0, 0, -4]) scale([0.8, 0.9, 0.3]) sphere(7);\n}\n\n// Neck module\nmodule neck() {\n    scale([1, 0.8, 0.6]) sphere(6);\n}\n\n// Body segment module\nmodule body_segment(index) {\n    scale([1.2 - index*0.1, 0.9 - index*0.05, 0.5 - index*0.02]) sphere(7);\n}\n\n// Tail module\nmodule tail() {\n    // Gradually tapering tail\n    for(i = [0:4]) {\n        translate([i*4, 0, -i*1.2]) scale([1 - i*0.15, 0.8 - i*0.15, 0.5 - i*0.08]) sphere(6 - i*0.8);\n    }\n}\n\n// Leg module\nmodule leg() {\n    union() {\n        // Upper leg\n        translate([0, 0, 0]) rotate([0, 90, 0]) cylinder(h=8, r1=3, r2=2.5);\n        \n        // Lower leg\n        translate([0, 0, -6]) rotate([0, 90, 0]) cylinder(h=6, r1=2.5, r2=2);\n        \n        // Foot\n        translate([0, 0, -10]) scale([1.5, 1.2, 0.8]) sphere(2.5);\n        \n        // Toes\n        for(j = [-1:1]) {\n            translate([0, j*1.5, -11.5]) scale([0.8, 0.3, 0.3]) sphere(1.5);\n        }\n    }\n}\n\n// Front legs (shorter)\nmodule front_left_leg() {\n    rotate([0, 10, -20]) leg();\n}\n\nmodule front_right_leg() {\n    mirror([0,1,0]) rotate([0, 10, 20]) leg();\n}\n\n// Back legs (longer)\nmodule back_left_leg() {\n    rotate([0, -10, -20]) scale([1.2, 1.2, 1.2]) leg();\n}\n\nmodule back_right_leg() {\n    mirror([0,1,0]) rotate([0, -10, 20]) scale([1.2, 1.2, 1.2]) leg();\n}\n\n// Create the gila monster\ngila_monster();",
    "renders": true
  },
  {
    "animal": "giraffe",
    "openscad_code": "// Giraffe Model - Realistic Medium Complexity\n// Designed for 3D printing with no overhangs > 45 degrees\n\n$fn = 24;\n\n// Overall scale factor\nscale_factor = 0.4;\n\n// Main body module\nmodule giraffe() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        union() {\n            // Main body\n            translate([0, 0, 35])\n                scale([1.2, 0.8, 1.5])\n                sphere(r = 20);\n            \n            // Neck\n            translate([15, 0, 70])\n                rotate([0, 15, 0])\n                cylinder(h = 60, r1 = 8, r2 = 5);\n            \n            // Head\n            translate([45, 0, 120])\n                rotate([0, -10, 0])\n                scale([0.8, 0.6, 1.2])\n                sphere(r = 12);\n            \n            // Ears\n            translate([50, 8, 128])\n                rotate([0, 0, 15])\n                scale([0.3, 2, 0.1])\n                sphere(r = 6);\n            \n            translate([50, -8, 128])\n                rotate([0, 0, -15])\n                scale([0.3, 2, 0.1])\n                sphere(r = 6);\n            \n            // Horns (ossicones)\n            translate([48, 3, 135])\n                cylinder(h = 8, r = 2);\n            \n            translate([48, -3, 135])\n                cylinder(h = 8, r = 2);\n            \n            // Legs\n            for(i = [-1, 1]) {\n                // Front legs\n                translate([12, i * 12, 30])\n                    rotate([0, -5, 0])\n                    cylinder(h = 40, r1 = 5, r2 = 4);\n                \n                // Back legs\n                translate([-12, i * 12, 30])\n                    rotate([0, 5, 0])\n                    cylinder(h = 40, r1 = 5, r2 = 4);\n                \n                // Hooves\n                translate([12, i * 12, -5])\n                    scale([1.1, 1.1, 0.5])\n                    cylinder(h = 5, r = 5);\n                \n                translate([-12, i * 12, -5])\n                    scale([1.1, 1.1, 0.5])\n                    cylinder(h = 5, r = 5);\n            }\n            \n            // Tail\n            translate([-25, 0, 40])\n                rotate([0, 10, 0])\n                cylinder(h = 35, r1 = 2, r2 = 0.5);\n            \n            // Tail tuft\n            translate([-35, 0, 5])\n                sphere(r = 3);\n            \n            // Spots pattern\n            spot_positions = [\n                [0, 0, 45], [8, 5, 50], [-8, -5, 48],\n                [5, -8, 40], [-5, 8, 42], [0, 10, 55],\n                [15, 0, 75], [20, 3, 85], [25, -3, 95],\n                [35, 0, 105], [40, 2, 110], [42, -2, 115]\n            ];\n            \n            for(pos = spot_positions) {\n                translate(pos)\n                    scale([1.5, 1.5, 1])\n                    sphere(r = 3);\n            }\n            \n            // Muzzle\n            translate([52, 0, 110])\n                scale([1.2, 0.8, 0.6])\n                sphere(r = 8);\n            \n            // Eyes\n            translate([48, 4, 125])\n                sphere(r = 1.5);\n            \n            translate([48, -4, 125])\n                sphere(r = 1.5);\n        }\n    }\n}\n\n// Generate the giraffe\ngiraffe();",
    "renders": true
  },
  {
    "animal": "goby",
    "openscad_code": "// Goby fish in realistic style with medium complexity\n\n// Overall dimensions\nbody_length = 80;\nbody_height = 20;\nbody_width = 15;\n\n// Main body module\nmodule goby_body() {\n    // Tapered body\n    difference() {\n        hull() {\n            // Front part - more rounded\n            translate([body_length/2 - 5, 0, 0])\n                scale([1.5, 1, 1])\n                sphere(d=body_width);\n            \n            // Rear part - flatter\n            translate([-body_length/2 + 5, 0, 0])\n                scale([0.8, 0.7, 0.4])\n                sphere(d=body_width);\n        }\n        \n        // Carve out belly cavity\n        translate([0, 0, -body_height/2])\n            cube([body_length, body_width*2, body_height], center=true);\n    }\n}\n\n// Head with mouth and eyes\nmodule goby_head() {\n    // Head shape\n    translate([body_length/2 - 10, 0, 0])\n    rotate([0, -10, 0])\n    scale([1.2, 1, 0.9])\n    sphere(d=body_width*1.2);\n    \n    // Mouth\n    translate([body_length/2 - 5, 0, -body_height/4])\n    rotate([0, -30, 0])\n    scale([0.8, 0.3, 0.2])\n    cylinder(h=body_width/2, d1=body_width/3, d2=body_width/4);\n    \n    // Eyes\n    for(side = [-1, 1]) {\n        translate([body_length/2 - 8, side*body_width/3, body_height/4])\n        sphere(d=body_width/5);\n        \n        // Pupils\n        translate([body_length/2 - 7.5, side*body_width/3, body_height/4])\n        scale([0.5, 0.5, 0.7])\n        color(\"black\")\n        sphere(d=body_width/8);\n    }\n}\n\n// Dorsal fins\nmodule dorsal_fins() {\n    // First dorsal fin\n    translate([-body_length/4, 0, body_height/2])\n    rotate([0, 0, 0])\n    for(i = [0:2]) {\n        translate([i*3, 0, 0])\n        rotate([0, 0, -5 + i*5])\n        scale([0.8, 0.2, 1])\n        cylinder(h=body_height/1.5, d1=body_width/3, d2=0.5);\n    }\n    \n    // Second dorsal fin\n    translate([-body_length/2 + 10, 0, body_height/2.5])\n    for(i = [0:5]) {\n        translate([i*2.5, 0, 0])\n        rotate([0, 0, -3 + i*3])\n        scale([0.9, 0.15, 1])\n        cylinder(h=body_height/2, d1=body_width/4, d2=0.3);\n    }\n}\n\n// Pectoral fins\nmodule pectoral_fins() {\n    for(side = [-1, 1]) {\n        translate([body_length/3, side*body_width/2, -body_height/4])\n        rotate([0, 0, side*30])\n        rotate([side*10, 0, 0])\n        scale([1, 0.3, 0.2])\n        cylinder(h=body_width*1.2, d1=body_width/2, d2=body_width/4);\n        \n        // Fin rays\n        for(i = [0:3]) {\n            translate([body_length/3 + 2, side*(body_width/2 + i*2), -body_height/4 - 1])\n            rotate([0, 90, 0])\n            scale([0.1, 0.1, 1])\n            cylinder(h=body_width/1.5, d=0.5);\n        }\n    }\n}\n\n// Tail fin\nmodule tail_fin() {\n    translate([-body_length/2 + 2, 0, 0])\n    rotate([0, 10, 0])\n    union() {\n        // Upper lobe\n        translate([0, 0, body_height/4])\n        rotate([0, 0, -20])\n        scale([1.5, 0.2, 1])\n        cylinder(h=body_width, d1=body_width/2, d2=0.3);\n        \n        // Lower lobe\n        translate([0, 0, -body_height/4])\n        rotate([0, 0, 20])\n        scale([1.5, 0.2, 1])\n        cylinder(h=body_width, d1=body_width/2, d2=0.3);\n        \n        // Central part\n        translate([0, 0, 0])\n        scale([0.5, 0.15, 0.8])\n        sphere(d=body_width/1.5);\n    }\n}\n\n// Pelvic fins (fused into suction cup)\nmodule pelvic_suction_cup() {\n    translate([0, 0, -body_height/2 - 2])\n    difference() {\n        // Outer cup\n        cylinder(h=3, d1=body_width*1.2, d2=body_width*0.8);\n        \n        // Inner cavity\n        translate([0, 0, -0.5])\n        cylinder(h=4, d1=body_width, d2=body_width*0.6);\n    }\n}\n\n// Body patterning\nmodule body_pattern() {\n    // Spots along body\n    for(i = [0:8]) {\n        translate([body_length/2 - 15 - i*6, body_width/4 - (i%2)*body_width/2, body_height/4])\n        scale([1, 0.7, 0.3])\n        sphere(d=body_width/6);\n    }\n}\n\n// Assemble the goby\nunion() {\n    goby_body();\n    goby_head();\n    dorsal_fins();\n    pectoral_fins();\n    tail_fin();\n    pelvic_suction_cup();\n    body_pattern();\n}",
    "renders": true
  },
  {
    "animal": "goose",
    "openscad_code": "// Realistic Goose - Medium Complexity\n// 3D printable model with moderate detail\n\nbody_length = 60;\nbody_height = 35;\nbody_width = 30;\n\nneck_length = 25;\nneck_width = 10;\nhead_size = 12;\n\nbeak_length = 15;\nbeak_width = 5;\nbeak_height = 4;\n\nleg_length = 25;\nleg_width = 4;\nfoot_length = 18;\nfoot_width = 10;\n\nwing_length = 35;\nwing_height = 20;\nwing_thickness = 2;\n\ntail_height = 15;\ntail_width = 20;\n\n// Body with slight taper\nmodule goose_body() {\n    difference() {\n        // Main body\n        hull() {\n            translate([0, 0, body_height/2]) \n                sphere(d=body_width * 0.9);\n            translate([body_length * 0.4, 0, body_height * 0.7]) \n                sphere(d=body_width * 0.8);\n            translate([body_length * 0.8, 0, body_height * 0.6]) \n                sphere(d=body_width * 0.7);\n            translate([-body_length * 0.3, 0, body_height * 0.5]) \n                sphere(d=body_width * 0.75);\n        }\n        \n        // Underside flattening\n        translate([body_length/2, 0, -body_height/2])\n            cube([body_length * 2, body_width * 2, body_height], center=true);\n    }\n}\n\n// Neck with smooth curve\nmodule goose_neck() {\n    difference() {\n        hull() {\n            translate([-body_length * 0.3, 0, body_height * 0.8])\n                sphere(d=neck_width);\n            translate([-body_length * 0.4, -neck_length * 0.3, body_height * 1.2])\n                sphere(d=neck_width * 0.9);\n            translate([-body_length * 0.5, -neck_length * 0.7, body_height * 1.5])\n                sphere(d=neck_width * 0.8);\n        }\n        \n        // Remove bottom for printing\n        translate([-body_length * 0.4, -neck_length * 0.5, -neck_length])\n            cube([body_length, body_width * 2, neck_length * 2], center=true);\n    }\n}\n\n// Head\nmodule goose_head() {\n    difference() {\n        union() {\n            // Main head\n            translate([-body_length * 0.5, -neck_length - 2, body_height * 1.5])\n                scale([1.2, 1, 1]) \n                sphere(d=head_size);\n                \n            // Forehead bump\n            translate([-body_length * 0.5 - 3, -neck_length - 5, body_height * 1.7])\n                sphere(d=head_size * 0.6);\n        }\n        \n        // Eye sockets\n        translate([-body_length * 0.5 - 2, -neck_length - 5, body_height * 1.6])\n            sphere(d=head_size * 0.3);\n        translate([-body_length * 0.5 - 2, -neck_length - 3, body_height * 1.6])\n            sphere(d=head_size * 0.3);\n    }\n}\n\n// Beak\nmodule goose_beak() {\n    hull() {\n        translate([-body_length * 0.5 - 8, -neck_length - 7, body_height * 1.5])\n            sphere(d=beak_width);\n        translate([-body_length * 0.5 - beak_length - 5, -neck_length - 8, body_height * 1.5])\n            sphere(d=beak_width * 0.8);\n    }\n    \n    // Beak ridge\n    translate([-body_length * 0.5 - beak_length/2 - 5, -neck_length - 7.5, body_height * 1.5])\n        scale([1.5, 1, 0.5])\n        sphere(d=beak_width);\n}\n\n// Wings\nmodule goose_wing() {\n    difference() {\n        union() {\n            // Main wing\n            translate([body_length * 0.3, 0, body_height * 0.8])\n                rotate([0, 0, 20])\n                scale([1.5, 1, 0.3])\n                sphere(d=wing_length);\n                \n            // Wing tip\n            translate([body_length * 0.6, -wing_height * 0.3, body_height * 0.9])\n                sphere(d=wing_length * 0.4);\n                \n            // Wing feathers\n            for(i = [0:2]) {\n                translate([body_length * 0.5 + i * 3, -wing_height * 0.2 - i * 2, body_height * 0.8])\n                    rotate([0, 0, 15 + i * 5])\n                    cube([8, 2, wing_thickness]);\n            }\n        }\n        \n        // Trim bottom\n        translate([body_length * 0.4, 0, 0])\n            cube([wing_length * 2, wing_height * 2, body_height], center=true);\n    }\n}\n\n// Tail\nmodule goose_tail() {\n    difference() {\n        union() {\n            // Main tail\n            translate([body_length * 0.9, 0, body_height * 0.7])\n                rotate([0, -20, 0])\n                scale([1, 1.5, 0.5])\n                sphere(d=tail_width);\n                \n            // Tail feathers\n            for(i = [-2:2]) {\n                translate([body_length * 0.95, i * 3, body_height * 0.7])\n                    rotate([0, -15, 0])\n                    cube([10, 1, tail_height]);\n            }\n        }\n        \n        // Bottom trim\n        translate([body_length * 0.9, 0, 0])\n            cube([tail_width * 2, tail_width * 2, body_height], center=true);\n    }\n}\n\n// Legs\nmodule goose_leg(side = 1) {\n    translate([body_length * 0.4, side * body_width * 0.3, -5]) {\n        // Upper leg\n        rotate([0, -15, 0])\n        cylinder(h=leg_length * 0.6, d=leg_width, $fn=12);\n        \n        // Lower leg\n        translate([0, 0, -leg_length * 0.6])\n            rotate([0, 15, 0])\n            cylinder(h=leg_length * 0.5, d=leg_width * 0.8, $fn=12);\n            \n        // Foot\n        translate([0, 0, -leg_length * 1.1])\n            rotate([0, 90, 0])\n            scale([1, 0.3, 1])\n            cube([foot_length, foot_width, leg_width * 0.7], center=true);\n            \n        // Toes\n        for(i = [-1:1]) {\n            translate([foot_length * 0.4, i * 4, -leg_length * 1.1])\n                cube([foot_length * 0.4, 1.5, leg_width * 0.5]);\n        }\n    }\n}\n\n// Assemble the goose\nunion() {\n    goose_body();\n    goose_neck();\n    goose_head();\n    goose_beak();\n    \n    // Wings\n    translate([0, body_width * 0.4, 0])\n        goose_wing();\n    mirror([0, 1, 0])\n        translate([0, body_width * 0.4, 0])\n        goose_wing();\n    \n    goose_tail();\n    goose_leg(1);\n    goose_leg(-1);\n}",
    "renders": true
  },
  {
    "animal": "gopher",
    "openscad_code": "// Realistic 3D Printable Gopher - Medium Complexity\n// Size: ~70mm long, 30mm wide, 35mm tall\n\n$fn = 24;\n\n// Main body\nmodule body() {\n    // Torso - elongated ellipsoid\n    translate([0, 0, 15])\n        scale([1.3, 0.8, 0.9])\n        sphere(15);\n    \n    // Belly - slightly flattened bottom\n    translate([0, 0, 8])\n        scale([1.2, 0.7, 0.4])\n        sphere(12);\n}\n\n// Head with snout\nmodule head() {\n    // Main head sphere\n    translate([-20, 0, 22])\n        scale([0.9, 1, 1])\n        sphere(12);\n    \n    // Snout extension\n    translate([-32, 0, 20])\n        scale([1.2, 0.7, 0.6])\n        sphere(8);\n    \n    // Cheek pouches\n    translate([-25, 8, 18])\n        sphere(5);\n    mirror([0, 1, 0])\n        translate([-25, 8, 18])\n        sphere(5);\n}\n\n// Ears - rounded and slightly forward-facing\nmodule ears() {\n    // Left ear\n    translate([-18, 12, 32])\n        rotate([0, -10, -20])\n        scale([0.6, 0.3, 1.2])\n        sphere(6);\n    \n    // Right ear\n    translate([-18, -12, 32])\n        rotate([0, -10, 20])\n        scale([0.6, 0.3, 1.2])\n        sphere(6);\n}\n\n// Eyes with slight protrusion\nmodule eyes() {\n    // Eye sockets\n    translate([-30, 6, 23])\n        sphere(3);\n    translate([-30, -6, 23])\n        sphere(3);\n    \n    // Eye balls\n    color(\"black\") {\n        translate([-31, 6, 23])\n            sphere(1.5);\n        translate([-31, -6, 23])\n            sphere(1.5);\n    }\n}\n\n// Nose\nmodule nose() {\n    translate([-38, 0, 20])\n        scale([0.8, 1, 0.6])\n        sphere(3);\n}\n\n// Front paws\nmodule front_paws() {\n    // Left paw\n    translate([-15, 8, 8])\n        rotate([0, 0, -30])\n        scale([0.4, 0.8, 0.3])\n        cylinder(h = 12, r1 = 4, r2 = 3);\n    \n    // Right paw\n    translate([-15, -8, 8])\n        rotate([0, 0, 30])\n        scale([0.4, 0.8, 0.3])\n        cylinder(h = 12, r1 = 4, r2 = 3);\n    \n    // Paw pads\n    translate([-12, 10, 2])\n        sphere(2);\n    translate([-12, -10, 2])\n        sphere(2);\n}\n\n// Hind legs\nmodule hind_legs() {\n    // Left leg\n    translate([15, 10, 5])\n        rotate([0, -20, 0])\n        scale([0.5, 0.9, 1.2])\n        cylinder(h = 15, r1 = 5, r2 = 4);\n    \n    // Right leg\n    translate([15, -10, 5])\n        rotate([0, 20, 0])\n        scale([0.5, 0.9, 1.2])\n        cylinder(h = 15, r1 = 5, r2 = 4);\n    \n    // Feet\n    translate([18, 12, 0])\n        sphere(4);\n    translate([18, -12, 0])\n        sphere(4);\n}\n\n// Tail - thick and cylindrical with taper\nmodule tail() {\n    translate([25, 0, 12])\n        rotate([0, -10, 0])\n        scale([1, 1, 0.8])\n        cylinder(h = 20, r1 = 6, r2 = 3);\n}\n\n// Fur texture using small cylinders\nmodule fur_texture() {\n    for(i = [0:5:360]) {\n        rotate([0, 0, i])\n        translate([0, 8, 20])\n            cylinder(h = 1.5, r = 0.8);\n    }\n    for(i = [0:10:360]) {\n        rotate([0, 0, i])\n        translate([0, -8, 20])\n            cylinder(h = 1.5, r = 0.8);\n    }\n}\n\n// Whiskers\nmodule whiskers() {\n    // Left whiskers\n    for(i = [-30, 0, 30]) {\n        translate([-35, 8, 20])\n            rotate([0, i, 0])\n            cylinder(h = 10, r = 0.3);\n    }\n    \n    // Right whiskers\n    for(i = [-30, 0, 30]) {\n        translate([-35, -8, 20])\n            rotate([0, -i, 0])\n            cylinder(h = 10, r = 0.3);\n    }\n}\n\n// Combine all parts\nunion() {\n    body();\n    head();\n    ears();\n    eyes();\n    nose();\n    front_paws();\n    hind_legs();\n    tail();\n    fur_texture();\n    whiskers();\n}",
    "renders": true
  },
  {
    "animal": "gorilla",
    "openscad_code": "// Gorilla - Realistic Style, Medium Complexity\n// Dimensions: ~80mm height when printed\n\nmodule rounded_cube(size, radius) {\n    // Create a cube with rounded edges\n    translate([radius, radius, 0]) \n        cylinder(h=size.z, r=radius, $fn=16);\n    translate([radius, size.y-radius, 0]) \n        cylinder(h=size.z, r=radius, $fn=16);\n    translate([size.x-radius, radius, 0]) \n        cylinder(h=size.z, r=radius, $fn=16);\n    translate([size.x-radius, size.y-radius, 0]) \n        cylinder(h=size.z, r=radius, $fn=16);\n    \n    translate([0, radius, radius]) \n        cube([size.x, size.y-radius*2, size.z-radius*2]);\n    translate([radius, 0, radius]) \n        cube([size.x-radius*2, size.y, size.z-radius*2]);\n    translate([radius, radius, radius]) \n        cube([size.x-radius*2, size.y-radius*2, size.z]);\n}\n\nmodule torso() {\n    // Main body of gorilla - wide and muscular\n    translate([0, 0, 25])\n        scale([1.2, 0.8, 1.3])\n            rounded_cube([30, 25, 35], 5);\n    \n    // Chest muscles\n    translate([0, 8, 35])\n        scale([1.1, 0.6, 0.8])\n            sphere(12, $fn=20);\n    \n    // Belly\n    translate([0, -5, 28])\n        scale([1, 0.9, 0.7])\n            sphere(10, $fn=16);\n}\n\nmodule head() {\n    // Main head shape\n    translate([0, 0, 60])\n        scale([0.9, 0.85, 1])\n            sphere(15, $fn=24);\n    \n    // Muzzle/snout\n    translate([0, -12, 58])\n        scale([0.7, 0.8, 0.6])\n            sphere(10, $fn=20);\n    \n    // Brow ridge\n    translate([0, 0, 70])\n        scale([1.1, 0.3, 0.4])\n            cube([20, 8, 6], center=true);\n    \n    // Eyes (sockets)\n    for(x=[-6, 6]) {\n        translate([x, -5, 68])\n            rotate([0, 10, 0])\n                cylinder(h=3, r1=3, r2=2, $fn=8);\n    }\n    \n    // Nostrils\n    for(x=[-2, 2]) {\n        translate([x, -18, 56])\n            rotate([90, 0, 0])\n                cylinder(h=2, r=1.5, $fn=8);\n    }\n}\n\nmodule arm(side) {\n    // Upper arm\n    translate([side*15, 0, 45])\n        rotate([0, 0, side*20])\n            scale([0.8, 0.8, 1.2])\n                cylinder(h=20, r=6, $fn=12);\n    \n    // Forearm\n    translate([side*20, -8, 32])\n        rotate([0, 0, side*30])\n            scale([0.7, 0.7, 1.1])\n                cylinder(h=18, r=5, $fn=12);\n    \n    // Hand\n    translate([side*25, -15, 25])\n        scale([1.2, 0.8, 0.5])\n            rounded_cube([12, 8, 6], 2);\n    \n    // Knuckles for walking\n    for(i=[-2:2]) {\n        translate([side*25, -18, 23])\n            translate([i*2, 0, 0])\n                sphere(1.5, $fn=8);\n    }\n}\n\nmodule leg(side) {\n    // Upper leg\n    translate([side*8, 0, 20])\n        rotate([0, 0, side*-10])\n            scale([0.9, 0.9, 1.3])\n                cylinder(h=18, r=7, $fn=12);\n    \n    // Lower leg\n    translate([side*10, 0, 8])\n        rotate([0, 0, side*-5])\n            scale([0.8, 0.8, 1.2])\n                cylinder(h=15, r=6, $fn=12);\n    \n    // Foot\n    translate([side*12, -5, 2])\n        scale([1.3, 2, 0.6])\n            rounded_cube([12, 18, 8], 3);\n}\n\n// Main assembly\nunion() {\n    torso();\n    head();\n    \n    // Arms\n    arm(1);  // Right\n    arm(-1); // Left\n    \n    // Legs\n    leg(1);  // Right\n    leg(-1); // Left\n    \n    // Shoulder muscles\n    translate([12, 5, 48])\n        sphere(8, $fn=16);\n    translate([-12, 5, 48])\n        sphere(8, $fn=16);\n}",
    "renders": true
  },
  {
    "animal": "goshawk",
    "openscad_code": "// Goshawk 3D Model - Realistic Style, Medium Complexity\n// Overall size ~80mm wingspan\n\n// Main parameters\n$fn = 32;\nbody_length = 40;\nbody_width = 20;\nbody_height = 30;\nwing_span = 80;\ntail_length = 35;\nhead_size = 15;\n\n// Head module with beak\nmodule head() {\n    translate([body_length/2 - 5, 0, body_height/2 + 2]) {\n        // Main head shape\n        scale([1.2, 1, 1.1]) sphere(d = head_size);\n        \n        // Beak\n        translate([head_size/2, 0, -head_size/4]) {\n            rotate([0, -30, 0]) {\n                difference() {\n                    cylinder(h = head_size/1.5, r1 = head_size/3.5, r2 = 0);\n                    translate([0, 0, -1]) cube([head_size, head_size, 2], center = true);\n                }\n            }\n        }\n        \n        // Eye sockets\n        for(i = [-1, 1]) {\n            translate([head_size/4, i * head_size/3, 0]) {\n                rotate([0, 90, 0]) \n                cylinder(h = head_size/10, r = head_size/8);\n            }\n        }\n    }\n}\n\n// Body module\nmodule body() {\n    translate([0, 0, body_height/2]) {\n        scale([1.5, 1, 1]) sphere(d = body_width);\n        \n        // Chest detail\n        translate([-body_length/4, 0, -body_height/2]) {\n            scale([1.2, 0.8, 0.5]) sphere(d = body_width);\n        }\n    }\n}\n\n// Wing module with feather details\nmodule wing(side) {\n    mirror([0, side, 0]) {\n        translate([-body_length/4, side * body_width/2, body_height/2]) {\n            rotate([0, 0, side * -20]) {\n                // Main wing shape\n                scale([2.5, 0.5, 0.15]) sphere(d = wing_span/2);\n                \n                // Primary feathers\n                for(i = [0:4]) {\n                    translate([wing_span/3 + i * 5, 0, -2 - i * 0.5]) {\n                        rotate([0, side * (10 + i * 5), 0]) {\n                            scale([0.8 - i * 0.1, 0.1, 0.05]) \n                            cube([15 - i * 2, 10, 2]);\n                        }\n                    }\n                }\n                \n                // Secondary feathers\n                for(i = [0:3]) {\n                    translate([wing_span/6 - i * 3, 0, -1 - i * 0.3]) {\n                        scale([1, 0.1, 0.05]) \n                        cube([12 - i * 2, 8, 1.5]);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Tail module\nmodule tail() {\n    translate([-body_length/2 - tail_length/2, 0, body_height/3]) {\n        rotate([20, 0, 0]) {\n            // Main tail\n            scale([2.5, 1, 0.15]) sphere(d = tail_length);\n            \n            // Tail feathers\n            for(i = [-1.5, -0.5, 0.5, 1.5]) {\n                translate([0, i * 8, -2]) {\n                    scale([0.3, 0.3, 0.05]) \n                    cube([tail_length * 0.9, 4, 1]);\n                }\n            }\n        }\n    }\n}\n\n// Legs and feet\nmodule legs() {\n    for(side = [-1, 1]) {\n        translate([0, side * body_width/3, -body_height/2]) {\n            // Upper leg\n            cylinder(h = 8, r1 = 3, r2 = 2);\n            \n            // Lower leg\n            translate([0, 0, -8]) {\n                rotate([side * 15, 0, 0]) {\n                    cylinder(h = 10, r = 2);\n                    \n                    // Foot\n                    translate([0, 0, -10]) {\n                        rotate([0, 90, 0]) {\n                            scale([1.5, 1, 0.5]) sphere(d = 8);\n                            \n                            // Toes\n                            for(angle = [0, 45, -45]) {\n                                rotate([0, angle, 0]) {\n                                    translate([4, 0, 0]) {\n                                        scale([1, 0.3, 0.3]) cube([5, 2, 2]);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    body();\n    head();\n    wing(1);\n    wing(-1);\n    tail();\n    legs();\n}",
    "renders": true
  },
  {
    "animal": "gourami",
    "openscad_code": "// Gourami fish - medium complexity realistic style\n// Size: ~75mm long\n\n$fn = 32; // Smooth curves\n\nmodule gourami() {\n    // Main body - oval shape\n    union() {\n        // Body core\n        scale([1.5, 0.8, 0.7])\n            sphere(r=15);\n        \n        // Tail extension\n        translate([-20, 0, 0])\n            scale([0.8, 0.3, 0.3])\n                sphere(r=15);\n    }\n    \n    // Head bump\n    translate([15, 0, 5])\n        scale([0.8, 0.8, 1.2])\n            sphere(r=10);\n    \n    // Dorsal fin\n    for(i=[0:3]) {\n        translate([5-i*3, 10+i*2, 3])\n            rotate([90, 0, 15-i*5])\n                cylinder(h=8, r1=3-i*0.5, r2=1);\n    }\n    \n    // Anal fin\n    for(i=[0:3]) {\n        translate([-5-i*3, -10-i*2, 3])\n            rotate([90, 0, -15+i*5])\n                cylinder(h=8, r1=3-i*0.5, r2=1);\n    }\n    \n    // Pectoral fin (left)\n    translate([5, 8, -2])\n        rotate([0, 20, 0])\n            scale([1.5, 0.2, 1])\n                sphere(r=5);\n    \n    // Pectoral fin (right)\n    mirror([0,1,0])\n        translate([5, 8, -2])\n            rotate([0, 20, 0])\n                scale([1.5, 0.2, 1])\n                    sphere(r=5);\n    \n    // Caudal fin (tail)\n    translate([-25, 0, 0])\n        rotate([0, 0, 30])\n            scale([0.5, 1.5, 0.1])\n                cylinder(h=15, r=8);\n    \n    translate([-25, 0, 0])\n        rotate([0, 0, -30])\n            scale([0.5, 1.5, 0.1])\n                cylinder(h=15, r=8);\n    \n    // Mouth\n    translate([22, 0, -2])\n        scale([1, 0.5, 0.3])\n            sphere(r=4);\n    \n    // Eyes\n    translate([18, 4, 3])\n        sphere(r=2);\n    translate([18, -4, 3])\n        sphere(r=2);\n    \n    // Eye pupils\n    translate([19.5, 4, 3.5])\n        sphere(r=1);\n    translate([19.5, -4, 3.5])\n        sphere(r=1);\n    \n    // Ventral fins\n    translate([0, 6, -5])\n        rotate([0, 0, 15])\n            cylinder(h=8, r1=2, r2=1);\n    translate([0, -6, -5])\n        rotate([0, 0, -15])\n            cylinder(h=8, r1=2, r2=1);\n    \n    // Body pattern lines\n    for(i=[0:2]) {\n        translate([10-i*5, 0, 8])\n            rotate([90, 0, 0])\n                scale([0.3, 0.1, 1])\n                    cylinder(h=20, r=3);\n    }\n}\n\n// Scale to reasonable size\nscale([1.2, 1.2, 1.2])\n    gourami();",
    "renders": true
  },
  {
    "animal": "grackle",
    "openscad_code": "$fn = 32;\n\nmodule grackle_body() {\n    // Main body - elongated oval\n    translate([0, 0, 10])\n        scale([1.2, 0.8, 1])\n        sphere(d=18, $fn=32);\n    \n    // Tail base\n    translate([-12, 0, 8])\n        rotate([0, 0, 0])\n        scale([1, 0.5, 0.3])\n        cylinder(h=12, d=10);\n}\n\nmodule grackle_head() {\n    // Head - slightly smaller sphere\n    translate([12, 0, 18])\n        sphere(d=10, $fn=32);\n    \n    // Beak - long and pointed\n    translate([17, 0, 18])\n        rotate([0, -10, 0])\n        scale([2, 0.3, 0.3])\n        cylinder(h=8, d=3);\n    \n    // Eye\n    translate([14, 3.5, 20])\n        sphere(d=2);\n    \n    // Eye\n    translate([14, -3.5, 20])\n        sphere(d=2);\n}\n\nmodule grackle_wings() {\n    // Left wing\n    translate([0, 7, 15])\n        rotate([0, 0, 20])\n        scale([1.2, 0.1, 0.8])\n        cylinder(h=12, d=8);\n    \n    // Right wing\n    translate([0, -7, 15])\n        rotate([0, 0, -20])\n        scale([1.2, 0.1, 0.8])\n        cylinder(h=12, d=8);\n    \n    // Wing feathers - left\n    for(i = [0:3]) {\n        translate([-6+i*2, 8+i*0.5, 15-i*1.5])\n            rotate([0, 0, 30-i*5])\n            scale([0.8, 0.05, 0.3])\n            cylinder(h=4, d=2);\n    }\n    \n    // Wing feathers - right\n    for(i = [0:3]) {\n        translate([-6+i*2, -8-i*0.5, 15-i*1.5])\n            rotate([0, 0, -30+i*5])\n            scale([0.8, 0.05, 0.3])\n            cylinder(h=4, d=2);\n    }\n}\n\nmodule grackle_legs() {\n    // Left leg\n    translate([4, 3, 0])\n        cylinder(h=10, d=2);\n    \n    // Right leg\n    translate([4, -3, 0])\n        cylinder(h=10, d=2);\n    \n    // Left foot\n    translate([4, 3, 0])\n        rotate([90, 0, 0])\n        scale([1.5, 0.8, 0.3])\n        cylinder(h=3, d=3);\n    \n    // Right foot\n    translate([4, -3, 0])\n        rotate([90, 0, 0])\n        scale([1.5, 0.8, 0.3])\n        cylinder(h=3, d=3);\n    \n    // Toes - left\n    for(i = [-1:1]) {\n        translate([4+i*1.5, 4.5, 0])\n            rotate([90, 0, 0])\n            scale([0.5, 0.3, 0.3])\n            cylinder(h=2, d=1);\n    }\n    \n    // Toes - right\n    for(i = [-1:1]) {\n        translate([4+i*1.5, -4.5, 0])\n            rotate([90, 0, 0])\n            scale([0.5, 0.3, 0.3])\n            cylinder(h=2, d=1);\n    }\n}\n\nmodule grackle_tail() {\n    // Tail feathers\n    for(i = [0:4]) {\n        translate([-18-i*2, 0, 8-i*0.5])\n            rotate([0, 0, 45-i*15])\n            scale([1.5, 0.05, 0.8])\n            cylinder(h=6, d=3);\n    }\n}\n\n// Main assembly\nunion() {\n    grackle_body();\n    grackle_head();\n    grackle_wings();\n    grackle_legs();\n    grackle_tail();\n}",
    "renders": true
  },
  {
    "animal": "grasshopper",
    "openscad_code": "// Grasshopper - realistic medium complexity\n// Designed for 3D printing - no overhangs >45°\n\nbody_length = 60;\nbody_height = 20;\nhead_size = 12;\n\nmodule grasshopper() {\n    union() {\n        // Head\n        translate([body_length/2 + head_size/2, 0, body_height/2])\n            sphere(d=head_size, $fn=16);\n        \n        // Compound eyes\n        for(i=[-1,1]) {\n            translate([body_length/2 + head_size/2 + 2, i*4, body_height/2 + 2])\n                sphere(d=4, $fn=8);\n        }\n        \n        // Antennae\n        for(i=[-1,1]) {\n            translate([body_length/2 + head_size/2 + 5, i*3, body_height/2 + 2]) {\n                rotate([0, -30, i*15])\n                    cylinder(h=25, d1=1, d2=0.5, $fn=8);\n            }\n        }\n        \n        // Thorax (main body)\n        translate([body_length/4, 0, body_height/2])\n            scale([1.5, 0.8, 0.6])\n                sphere(d=body_height, $fn=16);\n        \n        // Abdomen\n        translate([-body_length/3, 0, body_height/2 - 2])\n            scale([1.2, 1, 0.8])\n                sphere(d=body_height*1.2, $fn=16);\n        \n        // Hind legs (folded)\n        for(i=[-1,1]) {\n            translate([-body_length/6, i*body_height/2, 0]) {\n                rotate([0, 0, i*30])\n                    cylinder(h=body_height*1.5, d=body_height/4, $fn=8);\n                translate([0, 0, body_height*1.5])\n                    rotate([45, 0, 0])\n                        cylinder(h=body_height, d=body_height/4, $fn=8);\n            }\n        }\n        \n        // Middle legs\n        for(i=[-1,1]) {\n            translate([0, i*body_height/2, -2]) {\n                rotate([0, 0, i*45])\n                    cylinder(h=body_height, d=body_height/5, $fn=8);\n                translate([0, 0, body_height])\n                    rotate([90, 0, 0])\n                        cylinder(h=body_height/2, d=body_height/5, $fn=8);\n            }\n        }\n        \n        // Front legs\n        for(i=[-1,1]) {\n            translate([body_length/3, i*body_height/2, 0]) {\n                rotate([0, 0, i*60])\n                    cylinder(h=body_height*0.8, d=body_height/5, $fn=8);\n                translate([0, 0, body_height*0.8])\n                    rotate([90, 0, 0])\n                        cylinder(h=body_height/2, d=body_height/5, $fn=8);\n            }\n        }\n        \n        // Wings (simplified as elytra)\n        for(i=[-1,1]) {\n            translate([-body_length/6, i*body_height/3, body_height/2 + 2]) {\n                rotate([0, i*15, 0])\n                    scale([1, 0.2, 0.05])\n                        sphere(d=body_height*1.5, $fn=16);\n            }\n        }\n        \n        // Mandibles\n        for(i=[-1,1]) {\n            translate([body_length/2 + head_size/2 - 2, i*2, body_height/2 - 3]) {\n                rotate([0, 0, i*30])\n                    cylinder(h=4, d1=2, d2=1, $fn=6);\n            }\n        }\n    }\n}\n\ngrasshopper();",
    "renders": true
  },
  {
    "animal": "grebe",
    "openscad_code": "// Grebe 3D Model - Medium Complexity, Realistic Style\n// Overall dimensions: ~80mm long, ~35mm tall, ~30mm wide\n\n$fn = 30;\n\nmodule grebe() {\n    // Main body - elongated oval shape\n    union() {\n        // Body core\n        translate([0, 0, 10])\n            scale([1.8, 1, 1])\n            sphere(r=12);\n            \n        // Neck extension\n        translate([-15, 0, 20])\n            rotate([0, 15, 0])\n            scale([1.2, 1, 0.8])\n            cylinder(h=20, r1=8, r2=4);\n            \n        // Head\n        translate([-28, 0, 25])\n            rotate([0, 15, 0])\n            scale([1.1, 0.9, 1])\n            sphere(r=7);\n            \n        // Beak\n        translate([-38, 0, 25])\n            rotate([0, -10, 0])\n            scale([1, 0.3, 0.3])\n            cylinder(h=12, r1=3, r2=0);\n            \n        // Tail\n        translate([18, 0, 8])\n            rotate([0, -20, 0])\n            scale([0.8, 0.3, 0.2])\n            cylinder(h=10, r1=8, r2=3);\n            \n        // Wings on sides\n        for(side = [-1, 1]) {\n            translate([0, side*10, 15])\n                rotate([0, side*30, -10])\n                scale([1.2, 0.3, 0.8])\n                sphere(r=8);\n                \n            // Wing feathers detail\n            for(i = [0:3]) {\n                translate([i*3-6, side*11, 15-i*2])\n                    rotate([0, side*20, 0])\n                    scale([0.3, 0.1, 0.4])\n                    cube([4, 2, 1]);\n            }\n        }\n        \n        // Legs - positioned for swimming pose\n        for(side = [-1, 1]) {\n            // Upper leg\n            translate([10, side*4, 8])\n                rotate([45, 0, side*10])\n                cylinder(h=12, r=2);\n                \n            // Lower leg\n            translate([18, side*6, 2])\n                rotate([90, 0, side*10])\n                cylinder(h=15, r=1.5);\n                \n            // Webbed foot\n            translate([18, side*7, 0])\n                rotate([90, 0, side*10])\n                union() {\n                    // Central foot pad\n                    scale([2, 0.8, 0.3])\n                    sphere(r=3);\n                    \n                    // Toes\n                    for(angle = [-30, 0, 30]) {\n                        translate([0, 0, 0])\n                            rotate([0, 0, angle])\n                            translate([4, 0, 0])\n                            scale([1.5, 0.3, 0.2])\n                            sphere(r=2);\n                    }\n                }\n        }\n        \n        // Eye\n        translate([-32, 3, 28])\n            rotate([0, 15, 0])\n            sphere(r=1.5);\n            \n        // Eye pupil\n        translate([-33, 3.5, 28.5])\n            rotate([0, 15, 0])\n            color(\"black\")\n            sphere(r=0.7);\n            \n        // Back ridge detail\n        for(i = [0:5]) {\n            translate([i*5-20, 0, 22-i*2])\n                rotate([0, 0, 0])\n                scale([0.8, 0.3, 0.4])\n                cube([3, 1, 2]);\n        }\n    }\n}\n\n// Base for stable printing\ntranslate([0, 0, -2])\n    difference() {\n        cube([50, 40, 2], center=true);\n        translate([0, 0, -0.5])\n            cube([48, 38, 2], center=true);\n    }\n\n// Position the grebe on the base\ntranslate([0, 0, 0])\n    grebe();",
    "renders": true
  },
  {
    "animal": "grouper",
    "openscad_code": "// Grouper Fish - Medium Complexity Realistic Style\n// Designed for 3D printing with proper wall thickness and minimal overhangs\n\n$fn = 32;\nwall_thickness = 1.2;\nscale_factor = 1.5;\n\nmodule grouper_body() {\n    // Main body - elongated oval shape\n    union() {\n        // Main torso\n        scale([1.2, 0.8, 0.6]) sphere(r = 12);\n        \n        // Front bulge for head\n        translate([-8, 0, 0]) \n            scale([0.9, 1.1, 0.9]) sphere(r = 8);\n            \n        // Tail base\n        translate([14, 0, 0]) \n            scale([0.7, 0.6, 0.5]) sphere(r = 6);\n    }\n}\n\nmodule grouper_head() {\n    difference() {\n        union() {\n            // Head shape\n            translate([-12, 0, 3])\n                scale([1, 0.8, 0.7]) sphere(r = 8);\n                \n            // Lower jaw\n            translate([-10, 0, -4])\n                scale([0.8, 0.6, 0.3]) sphere(r = 6);\n        }\n        \n        // Mouth cavity\n        translate([-14, 0, -2])\n            scale([1.5, 0.5, 0.5]) sphere(r = 3);\n    }\n}\n\nmodule dorsal_fin() {\n    // First dorsal fin\n    for(i = [-6:2:6]) {\n        translate([i, 0, 6])\n            rotate([0, -15, 0])\n            scale([0.3, 1, 2]) \n            cylinder(h = 6, r1 = 2, r2 = 0.5);\n    }\n}\n\nmodule pectoral_fin() {\n    // Left fin\n    translate([-3, -8, -2])\n        rotate([0, 0, -20])\n        scale([0.4, 1.5, 0.1])\n        cylinder(h = 12, r1 = 4, r2 = 2);\n        \n    // Right fin (mirrored)\n    translate([-3, 8, -2])\n        rotate([0, 0, 20])\n        scale([0.4, 1.5, 0.1])\n        cylinder(h = 12, r1 = 4, r2 = 2);\n}\n\nmodule tail_fin() {\n    // Tail fin\n    translate([16, 0, 0])\n        rotate([0, 90, 0])\n        scale([1, 2, 0.2])\n        cylinder(h = 10, r1 = 6, r2 = 0.5);\n        \n    // Tail top\n    translate([16, 0, 3])\n        rotate([0, 45, 0])\n        scale([1, 1.2, 0.2])\n        cylinder(h = 5, r1 = 3, r2 = 0.5);\n        \n    // Tail bottom\n    translate([16, 0, -3])\n        rotate([0, -45, 0])\n        scale([1, 1.2, 0.2])\n        cylinder(h = 5, r1 = 3, r2 = 0.5);\n}\n\nmodule eyes() {\n    // Left eye\n    translate([-12, -4, 2]) {\n        // Eye socket\n        color(\"black\") sphere(r = 1.5);\n        // Eye white\n        color(\"white\") translate([0.5, 0, 0]) sphere(r = 1);\n    }\n    \n    // Right eye (mirrored)\n    translate([-12, 4, 2]) {\n        color(\"black\") sphere(r = 1.5);\n        color(\"white\") translate([0.5, 0, 0]) sphere(r = 1);\n    }\n}\n\nmodule anal_fin() {\n    // Anal fin - smaller fins under tail\n    for(i = [8:2:14]) {\n        translate([i, 0, -5])\n            rotate([0, 15, 0])\n            scale([0.3, 0.8, 0.8]) \n            cylinder(h = 3, r1 = 1.5, r2 = 0.5);\n    }\n}\n\nmodule body_pattern() {\n    // Scales pattern using small cylinders\n    for(i = [-10:3:10]) {\n        for(j = [-8:3:8]) {\n            translate([i, j, 7])\n                scale([0.3, 0.3, 0.1])\n                cylinder(h = 0.5, r = 1);\n        }\n    }\n}\n\n// Main assembly\nscale([scale_factor, scale_factor, scale_factor]) {\n    union() {\n        grouper_body();\n        grouper_head();\n        dorsal_fin();\n        pectoral_fin();\n        tail_fin();\n        anal_fin();\n        eyes();\n        body_pattern();\n    }\n}",
    "renders": true
  },
  {
    "animal": "grouse",
    "openscad_code": "// Grouse - Medium Complexity Realistic Style\n// Approx 70mm long x 40mm tall x 35mm wide\n\n$fn = 32;\nbody_length = 45;\nbody_height = 25;\ntail_length = 25;\nwing_span = 35;\n\nmodule grouse() {\n    // Main body - oval shape\n    union() {\n        // Body core\n        translate([0, 0, body_height/2])\n            scale([1.2, 0.8, 1])\n            sphere(d=body_height);\n            \n        // Back extension\n        translate([-body_length/4, 0, body_height/2-3])\n            scale([1.5, 0.9, 0.8])\n            sphere(d=body_height-5);\n            \n        // Breast bulge\n        translate([body_length/4, 0, body_height/2-5])\n            scale([0.8, 0.7, 0.6])\n            sphere(d=body_height-3);\n    }\n    \n    // Head\n    translate([body_length/2+5, 0, body_height-2])\n        rotate([0, -10, 0])\n        scale([0.7, 0.6, 0.6])\n        sphere(d=body_height-10);\n        \n    // Tail fan\n    module tail_feather(angle) {\n        rotate([0, angle, 0])\n        translate([-body_length/2-tail_length/2, 0, body_height/2-8])\n            scale([1, 0.1, 0.3])\n            cube([tail_length, wing_span/3, 8], center=true);\n    }\n    \n    for(i = [-30:15:30]) {\n        tail_feather(i);\n    }\n    \n    // Wings\n    module wing(side) {\n        mirror([side, 0, 0])\n        translate([0, wing_span/4, body_height/2-3])\n        rotate([20, 0, -10])\n        scale([1.2, 0.3, 0.6])\n        cube([body_length/2, wing_span/2, body_height/3], center=true);\n    }\n    \n    wing(1);\n    wing(-1);\n    \n    // Legs\n    module leg(side) {\n        translate([body_length/6, side*8, 0])\n        union() {\n            // Thigh\n            cylinder(h=8, d1=5, d2=4);\n            translate([0, 0, 8])\n                rotate([0, 30, 0])\n                cylinder(h=10, d1=4, d2=3);\n            \n            // Feet\n            translate([0, side*3, -2])\n                rotate([0, 90, 0])\n                scale([1.5, 0.8, 1])\n                cylinder(h=8, d=3);\n                \n            // Toes\n            for(j = [-1, 0, 1]) {\n                translate([j*2.5, side*3, -2])\n                    rotate([0, 90, j*20])\n                    cylinder(h=4, d=2);\n            }\n        }\n    }\n    \n    leg(1);\n    leg(-1);\n    \n    // Beak\n    translate([body_length/2+12, 0, body_height-2])\n        rotate([0, -20, 0])\n        scale([1, 0.5, 0.3])\n        cylinder(h=6, d=4);\n        \n    // Eye\n    translate([body_length/2+6, 3.5, body_height])\n        sphere(d=2.5);\n        \n    // Neck ruff\n    for(k = [0:30:330]) {\n        rotate([0, 0, k])\n        translate([body_length/3, 0, body_height/2+3])\n            scale([0.3, 0.1, 0.5])\n            cylinder(h=6, d=3);\n    }\n}\n\n// Scale to reasonable print size\nscale([1.2, 1.2, 1.2])\ngrouse();",
    "renders": true
  },
  {
    "animal": "grub",
    "openscad_code": "// Realistic 3D printable grub (larva) model\n// Size: ~60 mm long, 25 mm diameter\n\n// Overall grub body with segments\nmodule grub_body() {\n    union() {\n        // Head segment\n        translate([0, 0, 5])\n            scale([1.3, 1.3, 1.2])\n                sphere(d=12, $fn=24);\n        \n        // Thoracic segments (3 segments)\n        for (i = [0:2]) {\n            translate([0, 0, -i*8 - 3])\n                scale([1.2 - i*0.1, 1.2 - i*0.1, 1])\n                    sphere(d=14, $fn=24);\n        }\n        \n        // Abdominal segments (6 segments)\n        for (i = [0:5]) {\n            translate([0, 0, -i*6 - 27])\n                scale([1.1 - i*0.15, 1.1 - i*0.15, 0.8])\n                    sphere(d=12 - i*1.2, $fn=20);\n        }\n        \n        // Tail segment\n        translate([0, 0, -65])\n            scale([0.7, 0.7, 1.5])\n                sphere(d=6, $fn=16);\n    }\n}\n\n// Mandibles (mouthparts)\nmodule mandibles() {\n    translate([0, 0, 8])\n    union() {\n        // Left mandible\n        translate([-3, 4, 0])\n            rotate([0, -20, -15])\n                cube([2, 6, 4], center=true);\n        \n        // Right mandible\n        translate([3, 4, 0])\n            rotate([0, -20, 15])\n                cube([2, 6, 4], center=true);\n    }\n}\n\n// Spiracles (breathing holes along sides)\nmodule spiracles() {\n    for (i = [0:8]) {\n        translate([7, 0, -i*7 - 5])\n            rotate([0, 90, 0])\n                cylinder(h=2, d1=1.5, d2=2, $fn=8);\n    }\n}\n\n// Leg stubs (reduced legs typical of grubs)\nmodule leg_stubs() {\n    for (i = [0:2]) {\n        translate([6, 0, -i*8])\n            rotate([0, 45, 0])\n                cylinder(h=4, d1=3, d2=2, $fn=8);\n    }\n}\n\n// Body segmentation rings\nmodule segmentation_rings() {\n    difference() {\n        // Main body\n        grub_body();\n        \n        // Hollow out segmentation grooves\n        for (i = [0:9]) {\n            translate([0, 0, -i*6 - 8])\n                scale([1.1, 1.1, 0.1])\n                    sphere(d=15, $fn=32);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Core body with segmentation\n    segmentation_rings();\n    \n    // Add mandibles\n    mandibles();\n    \n    // Add spiracles\n    spiracles();\n    \n    // Add leg stubs\n    leg_stubs();\n    \n    // Small bumps for texture\n    for (j = [0:15]) {\n        angle = j * 22.5;\n        for (k = [0:8]) {\n            translate([6*cos(angle), 6*sin(angle), -k*7 - 2])\n                sphere(d=1.5, $fn=8);\n        }\n    }\n}\n\n// Center on build plate\ntranslate([0, 0, 30]) {\n    // Main grub\n    scale([1, 1, 1]) \n        children();\n}",
    "renders": true
  },
  {
    "animal": "guanaco",
    "openscad_code": "// Guanaco - Medium complexity realistic style\n// Size: ~75mm long\n\n// Main body with oval shape\nmodule body() {\n    difference() {\n        // Main torso\n        scale([1.2, 0.8, 0.6]) sphere(d=40);\n        \n        // Neck cavity\n        translate([15, 0, 5]) rotate([0, -20, 0]) \n            scale([1, 1, 0.8]) cylinder(h=15, d1=12, d2=10, $fn=16);\n    }\n}\n\n// Neck connecting to head\nmodule neck() {\n    translate([20, 0, 12]) rotate([0, -20, 0]) {\n        // Neck base\n        scale([1, 0.8, 1]) cylinder(h=15, d=10, $fn=12);\n        \n        // Neck to head transition\n        translate([0, 0, 8]) rotate([0, -10, 0]) \n            cylinder(h=8, d1=10, d2=6, $fn=8);\n    }\n}\n\n// Head with long snout\nmodule head() {\n    translate([30, 0, 20]) rotate([0, -30, 0]) {\n        // Main head sphere\n        scale([1.2, 0.8, 0.9]) sphere(d=12);\n        \n        // Snout extension\n        translate([5, 0, -2]) rotate([0, -10, 0])\n            scale([1.5, 0.7, 0.6]) sphere(d=8);\n        \n        // Ears - two triangular shapes\n        translate([0, 5, 4]) rotate([0, -10, 30]) \n            scale([0.3, 0.1, 0.8]) cylinder(h=6, d=4, $fn=3);\n        translate([0, -5, 4]) rotate([0, -10, -30]) \n            scale([0.3, 0.1, 0.8]) cylinder(h=6, d=4, $fn=3);\n        \n        // Eyes\n        translate([3, 2.5, 2]) sphere(d=1.5);\n        translate([3, -2.5, 2]) sphere(d=1.5);\n    }\n}\n\n// Leg module with tapering\nmodule leg(height, angle) {\n    rotate([0, angle, 0]) {\n        // Upper leg\n        translate([0, 0, height/2]) \n            scale([0.8, 0.8, 1]) cylinder(h=height, d=6, $fn=8);\n        \n        // Lower leg\n        translate([0, 0, height]) \n            scale([0.6, 0.6, 1]) cylinder(h=height*0.8, d=5, $fn=6);\n        \n        // Hoof\n        translate([0, 0, height*1.8]) \n            cylinder(h=3, d1=5, d2=4, $fn=4);\n    }\n}\n\n// Tail with curve\nmodule tail() {\n    translate([-22, 0, 8]) rotate([0, 20, 0]) {\n        for(i=[0:2]) {\n            translate([i*2, -i*0.5, 0]) rotate([0, i*5, 0])\n                scale([1-i*0.1, 1-i*0.1, 1]) sphere(d=4-i);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    body();\n    neck();\n    head();\n    tail();\n    \n    // Front legs\n    translate([10, 8, -8]) leg(20, 15);\n    translate([10, -8, -8]) leg(20, 15);\n    \n    // Rear legs\n    translate([-10, 8, -8]) leg(22, 5);\n    translate([-10, -8, -8]) leg(22, 5);\n}",
    "renders": true
  },
  {
    "animal": "guineafowl",
    "openscad_code": "// Guineafowl - Realistic Medium Complexity\n// Dimensions: ~80mm long, 60mm tall\n\n// Body parameters\nbody_length = 60;\nbody_height = 35;\nbody_width = 30;\n\n// Head parameters\nhead_diameter = 18;\nneck_length = 12;\nneck_diameter = 8;\n\n// Leg parameters\nleg_length = 25;\nleg_diameter = 4;\nfoot_length = 15;\nfoot_width = 10;\n\n// Wing parameters\nwing_length = 25;\nwing_width = 15;\n\n// Tail parameters\ntail_length = 20;\ntail_height = 15;\n\n// Helmet parameters\nhelmet_height = 8;\nhelmet_width = 12;\n\nmodule guineafowl() {\n    union() {\n        // Main body - oval shape\n        translate([0, 0, body_height/2])\n            scale([1.2, 0.8, 1])\n                sphere(d=body_height);\n        \n        // Neck\n        translate([body_length/2 - 10, 0, body_height - 5])\n            rotate([0, -20, 0])\n                cylinder(h=neck_length, d=neck_diameter, $fn=8);\n        \n        // Head\n        translate([body_length/2 + 10, 0, body_height + neck_length - 2])\n            sphere(d=head_diameter);\n        \n        // Helmet (casque)\n        translate([body_length/2 + 15, 0, body_height + neck_length + 5])\n            rotate([0, 15, 0])\n                cylinder(h=helmet_height, d1=helmet_width, d2=helmet_width/2, $fn=6);\n        \n        // Left wing\n        translate([-5, body_width/2, body_height - 5])\n            rotate([0, -10, -20])\n                scale([1, 0.3, 0.1])\n                    cube([wing_length, wing_width, 5]);\n        \n        // Right wing\n        mirror([0, 1, 0]) {\n            translate([-5, body_width/2, body_height - 5])\n                rotate([0, -10, -20])\n                    scale([1, 0.3, 0.1])\n                        cube([wing_length, wing_width, 5]);\n        }\n        \n        // Tail\n        translate([-body_length/2 - 5, 0, body_height/2 + 5])\n            rotate([0, 20, 0])\n                scale([1, 0.6, 0.4])\n                    cube([tail_length, tail_height, tail_height/2]);\n        \n        // Left leg\n        translate([body_length/4, body_width/3 - 5, 0])\n            cylinder(h=leg_length, d=leg_diameter, $fn=8);\n        \n        // Left foot\n        translate([body_length/4 + 5, body_width/3 - 8, -leg_length])\n            rotate([0, 0, 20])\n                cube([foot_length, foot_width, 2]);\n        \n        // Right leg\n        translate([body_length/4, -body_width/3 + 5, 0])\n            cylinder(h=leg_length, d=leg_diameter, $fn=8);\n        \n        // Right foot\n        translate([body_length/4 + 5, -body_width/3 + 8, -leg_length])\n            rotate([0, 0, -20])\n                cube([foot_length, foot_width, 2]);\n        \n        // Beak\n        translate([body_length/2 + 20, 0, body_height + neck_length])\n            rotate([0, -20, 0])\n                cylinder(h=8, d1=4, d2=2, $fn=6);\n        \n        // Eye details (left)\n        translate([body_length/2 + 12, 6, body_height + neck_length + 3])\n            sphere(d=3);\n        \n        // Eye details (right)\n        translate([body_length/2 + 12, -6, body_height + neck_length + 3])\n            sphere(d=3);\n        \n        // Spots on body\n        for(i=[1:8]) {\n            rotate([0, 0, i*45])\n                translate([body_length/4, 0, body_height/2 + 5])\n                    sphere(d=5);\n        }\n        \n        for(i=[1:6]) {\n            rotate([0, 0, i*60])\n                translate([-body_length/4, 0, body_height/2])\n                    sphere(d=4);\n        }\n    }\n}\n\n// Generate the guineafowl\nguineafowl();",
    "renders": true
  },
  {
    "animal": "gull",
    "openscad_code": "// Realistic medium-complexity 3D printable gull\n// Approx 80 mm wingspan, 55 mm beak to tail\n\n$fn = 32;  // Smooth curves for printing\n\nmodule gull() {\n    difference() {\n        union() {\n            // Main body – elongated sphere\n            translate([0, 0, 8])\n                scale([1.3, 0.7, 1])\n                sphere(12);\n\n            // Tail – tapered cylinder\n            translate([-20, 0, 7])\n                rotate([0, 15, 0])\n                cylinder(h = 15, r1 = 7, r2 = 2);\n\n            // Neck\n            translate([10, 0, 12])\n                rotate([20, 0, 0])\n                cylinder(h = 8, r1 = 5, r2 = 4);\n\n            // Head\n            translate([15, 0, 18])\n                sphere(6);\n\n            // Beak – cone\n            translate([21, 0, 18])\n                rotate([15, 0, 0])\n                cylinder(h = 10, r1 = 2.5, r2 = 0.5);\n\n            // Left wing\n            translate([0, -12, 12])\n                rotate([0, 0, -25])\n                scale([1, 0.15, 0.8])\n                sphere(15);\n\n            // Right wing\n            mirror([0, 1, 0])\n            translate([0, -12, 12])\n                rotate([0, 0, -25])\n                scale([1, 0.15, 0.8])\n                sphere(15);\n\n            // Webbed feet – two simple flat shapes\n            // Left foot\n            translate([5, -6, 0])\n                rotate([0, 0, -20])\n                scale([1.5, 0.3, 0.2])\n                cube([8, 6, 2]);\n\n            // Right foot\n            translate([5, 6, 0])\n                rotate([0, 0, 20])\n                scale([1.5, 0.3, 0.2])\n                cube([8, 6, 2]);\n\n            // Tail feathers – three thin plates\n            for(y = [-3, 0, 3])\n                translate([-25, y, 7])\n                    rotate([0, 15, 0])\n                    scale([0.3, 1, 0.3])\n                    cube([10, 4, 1]);\n        }\n\n        // Eye sockets (left & right)\n        translate([17, -2.5, 20])\n            sphere(1.2);\n        translate([17, 2.5, 20])\n            sphere(1.2);\n\n        // Cut underside for printing stability\n        translate([0, 0, -1])\n            cube([60, 40, 2], center = true);\n    }\n}\n\n// Assemble the gull upright\ngull();",
    "renders": true
  },
  {
    "animal": "guppy",
    "openscad_code": "// Realistic Guppy Model\n// Medium complexity 3D printable design\n\n$fn = 24;\nbody_length = 40;\nbody_height = 15;\ntail_width = 25;\n\nmodule guppy_body() {\n    // Main body - tapered ellipsoid\n    translate([0, 0, 8])\n    scale([1.0, 0.6, 0.7])\n    sphere(d = body_length);\n    \n    // Head - slightly larger sphere\n    translate([-body_length/2 - 3, 0, 8])\n    scale([1.1, 0.8, 0.8])\n    sphere(d = 12);\n    \n    // Dorsal fin base\n    translate([5, 0, 16])\n    rotate([0, 90, 0])\n    cylinder(h = 8, d1 = 6, d2 = 2);\n}\n\nmodule tail_fin() {\n    // Caudal fin - split tail\n    union() {\n        // Upper lobe\n        translate([body_length/2, 0, 8])\n        rotate([0, 0, 30])\n        scale([1.5, 1, 0.2])\n        sphere(d = tail_width);\n        \n        // Lower lobe\n        translate([body_length/2, 0, 8])\n        rotate([0, 0, -30])\n        scale([1.5, 1, 0.2])\n        sphere(d = tail_width);\n        \n        // Connection between lobes\n        translate([body_length/2, 0, 8])\n        scale([0.8, 0.3, 0.1])\n        cube([8, tail_width/2, 4], center = true);\n    }\n}\n\nmodule dorsal_fin() {\n    // Dorsal fin - triangular shape with rays\n    for(i = [0:4]) {\n        translate([5 + i*2, 0, 16 + i*1.5])\n        rotate([90 - i*5, 0, 0])\n        scale([0.3, 1, 0.1])\n        cylinder(h = 8 - i*0.5, d1 = 3 - i*0.2, d2 = 0.5);\n    }\n}\n\nmodule pectoral_fins() {\n    // Left fin\n    translate([-5, 6, 8])\n    rotate([0, 0, -20])\n    scale([0.3, 1, 0.1])\n    cylinder(h = 6, d1 = 4, d2 = 1);\n    \n    // Right fin\n    translate([-5, -6, 8])\n    rotate([0, 0, 20])\n    scale([0.3, 1, 0.1])\n    cylinder(h = 6, d1 = 4, d2 = 1);\n}\n\nmodule anal_fin() {\n    // Anal fin - smaller triangular fin\n    for(i = [0:3]) {\n        translate([8, 0, 5 - i*1.2])\n        rotate([-90 + i*5, 0, 0])\n        scale([0.3, 1, 0.1])\n        cylinder(h = 5 - i*0.5, d1 = 2 - i*0.2, d2 = 0.5);\n    }\n}\n\nmodule eyes() {\n    // Left eye\n    translate([-body_length/2 - 3, 4, 10])\n    sphere(d = 2);\n    \n    // Right eye\n    translate([-body_length/2 - 3, -4, 10])\n    sphere(d = 2);\n    \n    // Pupils\n    color(\"black\") {\n        translate([-body_length/2 - 4, 4.5, 10.5])\n        sphere(d = 1);\n        translate([-body_length/2 - 4, -4.5, 10.5])\n        sphere(d = 1);\n    }\n}\n\nmodule mouth() {\n    // Small opening for mouth\n    translate([-body_length/2 - 7, 0, 7])\n    rotate([90, 0, 0])\n    cylinder(h = 2, d1 = 3, d2 = 1);\n}\n\n// Assembly\nunion() {\n    guppy_body();\n    tail_fin();\n    dorsal_fin();\n    pectoral_fins();\n    anal_fin();\n    eyes();\n    mouth();\n}\n\n// Ensure flat bottom for 3D printing\ndifference() {\n    children();\n    translate([-50, -50, -1])\n    cube([100, 100, 1]);\n}",
    "renders": true
  },
  {
    "animal": "haddock",
    "openscad_code": "$fn=30;\nwall = 1.2;           // wall thickness for printability\nscale_factor = 0.5;   // overall size scaler, target ~70 mm\n\nmodule haddock() {\n    scale([scale_factor,scale_factor,scale_factor]) {\n\n        // main body — elongated ellipsoid\n        color(\"steelblue\")\n        difference() {\n            scale([1,0.6,0.35])\n                sphere(r=40);\n            // flatten belly\n            translate([0,0,-15])\n                cube([100,60,15], center=true);\n        }\n\n        // head\n        translate([-40,0,0])\n        color(\"steelblue\")\n        union() {\n            // skull\n            scale([1,0.7,0.7])\n                sphere(r=22);\n            // snout\n            translate([-12,0,-5])\n                rotate([0,10,0])\n                scale([1.2,0.7,0.5])\n                    cylinder(h=25, r1=10, r2=0);\n        }\n\n        // mouth slit\n        translate([-52,-6,-8])\n        rotate([0,15,0])\n            cube([15,12,2]);\n\n        // eye\n        translate([-30,12,8])\n        union() {\n            sphere(r=5);\n            translate([0,0,2])\n                color(\"black\")\n                sphere(r=2.5);\n        }\n\n        // lateral line pattern — small cylinders\n        for(i=[-30:8:30])\n            translate([i, 0, 0])\n                rotate([90,0,0])\n                    cylinder(h=1.5, r=1.8);\n\n        // dorsal fin\n        color(\"darkslategray\")\n        translate([-10,0,12])\n        rotate([90,0,0])\n        linear_extrude(height=wall)\n        polygon(points=[\n            [0,0],[8,15],[16,0],[12,3],[8,10],[4,3]\n        ]);\n\n        // second dorsal fin\n        translate([25,0,10])\n        rotate([90,0,0])\n        linear_extrude(height=wall)\n        polygon(points=[\n            [0,0],[6,10],[12,0],[9,2],[6,6],[3,2]\n        ]);\n\n        // anal fin\n        mirror([0,0,1])\n        translate([20,0,8])\n        rotate([90,0,0])\n        linear_extrude(height=wall)\n        polygon(points=[\n            [0,0],[5,8],[10,0],[7,2],[5,5],[3,2]\n        ]);\n\n        // tail\n        color(\"darkslategray\")\n        translate([42,0,0])\n        rotate([0,0,-30])\n        difference() {\n            union() {\n                cube([30,wall,25], center=true);\n                translate([15,0,0])\n                    rotate([0,0,30])\n                    cube([20,wall,20], center=true);\n            }\n            // tail fork\n            translate([45,0,0])\n                rotate([0,0,30])\n                cube([40,wall+1,40], center=true);\n        }\n\n        // pectoral fin\n        color(\"darkslategray\")\n        translate([-15,22,-5])\n        rotate([0,-20,90])\n        linear_extrude(height=wall)\n        polygon(points=[\n            [0,0],[12,4],[18,0],[15,2],[12,2],[9,1]\n        ]);\n    }\n}\n\nhaddock();",
    "renders": true
  },
  {
    "animal": "hagfish",
    "openscad_code": "// Hagfish - Medium complexity realistic model\n// Total length ~80mm, 3D-printable without supports\n\n$fn = 32;  // Smooth curves\n\nmodule hagfish_body() {\n    // Main body - tapered cylinder segments\n    union() {\n        // Head segment (slightly flattened)\n        scale([1, 0.8, 1])\n        sphere(d=12);\n        \n        // Body segments getting progressively smaller\n        for(i = [1:10]) {\n            translate([0, 0, -i*7])\n            scale([1 - i*0.05, 1 - i*0.05, 1])\n            cylinder(d1=12 - i*0.8, d2=11 - i*0.8, h=7);\n        }\n        \n        // Tail taper\n        translate([0, 0, -80])\n        cylinder(d1=3, d2=1, h=10);\n    }\n}\n\nmodule slime_pores() {\n    // Rows of slime glands along body\n    for(side = [-1, 1]) {\n        for(i = [0:9]) {\n            translate([side*5, 0, -i*7 - 3])\n            rotate([0, 90, 0])\n            cylinder(d=1.5, h=2);\n        }\n    }\n}\n\nmodule barbels() {\n    // Six barbels around mouth/nostril\n    for(i = [0:5]) {\n        rotate([0, 0, i*60])\n        translate([6, 0, 0])\n        rotate([90, 0, 0])\n        cylinder(d1=2, d2=1, h=8);\n    }\n}\n\nmodule mouth_structure() {\n    // Terminal mouth with dental plates\n    difference() {\n        // Mouth cavity\n        translate([0, 0, 6])\n        rotate([90, 0, 0])\n        cylinder(d=8, h=5);\n        \n        // Teeth ridges (simplified)\n        for(i = [0:3]) {\n            rotate([0, 0, i*90])\n            translate([2, 0, 8])\n            cube([4, 1, 2]);\n        }\n    }\n}\n\nmodule nostril() {\n    // Single nostril on snout\n    translate([0, 0, 7])\n    rotate([90, 0, 0])\n    cylinder(d=3, h=4);\n}\n\nmodule fins() {\n    // Caudal fin fold (reduced for printing)\n    translate([0, 0, -75])\n    difference() {\n        union() {\n            // Top fin\n            translate([0, 0, 0])\n            rotate([0, 90, 0])\n            scale([1, 0.3, 1])\n            cylinder(d=8, h=5);\n            \n            // Bottom fin\n            translate([0, 0, 0])\n            rotate([0, 90, 0])\n            scale([1, 0.3, 1])\n            cylinder(d=8, h=5);\n        }\n        \n        // Remove center for fin shape\n        translate([0, 0, 0])\n        cube([20, 10, 1], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    hagfish_body();\n    \n    // Add surface details\n    difference() {\n        union() {\n            slime_pores();\n            barbels();\n            mouth_structure();\n            nostril();\n            fins();\n        }\n        \n        // Remove internal structure for hollow printing\n        translate([0, 0, -40])\n        scale([0.7, 0.7, 0.7])\n        hagfish_body();\n    }\n}\n\n// Position for printing\nrotate([90, 0, 0])\ntranslate([0, 0, -40])",
    "renders": true
  },
  {
    "animal": "halibut",
    "openscad_code": "// Halibut model - medium complexity realistic style\n// Approx 80mm long, 3D printable with no overhangs\n\n$fn = 32;\n\nmodule halibut() {\n    // Main body - oval flat shape\n    difference() {\n        scale([1, 0.7, 0.15]) sphere(d = 80);\n        translate([0, 0, -5]) cube([90, 70, 10], center = true);\n    }\n    \n    // Tail fin - triangular shape\n    translate([-40, 0, 0]) {\n        rotate([0, 0, 180]) {\n            linear_extrude(height = 2) {\n                polygon(points = [[0, 0], [-15, -25], [-15, 25]]);\n            }\n        }\n    }\n    \n    // Dorsal fin - multiple segments along top\n    for (i = [-30:10:30]) {\n        translate([i, 0, 5]) {\n            rotate([90, 0, 0]) {\n                cylinder(h = 8, r1 = 3, r2 = 1);\n            }\n        }\n    }\n    \n    // Anal fin - similar to dorsal but smaller\n    for (i = [-20:10:20]) {\n        translate([i, 0, -5]) {\n            rotate([-90, 0, 0]) {\n                cylinder(h = 6, r1 = 2.5, r2 = 1);\n            }\n        }\n    }\n    \n    // Left eye (top side)\n    translate([20, 15, 8]) {\n        sphere(d = 6);\n        translate([0, 0, 2]) sphere(d = 3);\n    }\n    \n    // Right eye (top side)\n    translate([20, -15, 8]) {\n        sphere(d = 6);\n        translate([0, 0, 2]) sphere(d = 3);\n    }\n    \n    // Mouth opening\n    translate([38, 0, -2]) {\n        rotate([0, -20, 0]) {\n            scale([1, 0.5, 0.3]) sphere(d = 8);\n        }\n    }\n    \n    // Lateral line - sensory organ\n    translate([0, 0, 0.5]) {\n        for (i = [-35:5:35]) {\n            translate([i, 0, 0]) {\n                sphere(d = 1.5);\n            }\n        }\n    }\n    \n    // Pectoral fin left\n    translate([10, 25, 0]) {\n        rotate([0, 0, -30]) {\n            scale([1, 0.3, 0.1]) sphere(d = 20);\n        }\n    }\n    \n    // Pectoral fin right\n    translate([10, -25, 0]) {\n        rotate([0, 0, 30]) {\n            scale([1, 0.3, 0.1]) sphere(d = 20);\n        }\n    }\n    \n    // Gill covers\n    translate([25, 10, 0]) {\n        rotate([0, 0, 45]) {\n            scale([0.7, 0.2, 0.1]) sphere(d = 15);\n        }\n    }\n    translate([25, -10, 0]) {\n        rotate([0, 0, -45]) {\n            scale([0.7, 0.2, 0.1]) sphere(d = 15);\n        }\n    }\n}\n\n// Render the halibut\nhalibut();",
    "renders": true
  },
  {
    "animal": "hamster",
    "openscad_code": "// Hamster - Realistic Style, Medium Detail\n// 3D printable, ~60mm long\n\n// Overall scale\n$fn = 30;\n\nmodule hamster() {\n    // Body\n    color(\"tan\")\n    union() {\n        // Main body sphere\n        translate([0, 0, 15])\n        scale([1.2, 0.9, 1])\n        sphere(20);\n        \n        // Belly bulge\n        translate([0, 0, 6])\n        scale([1.1, 0.8, 0.7])\n        sphere(18);\n    }\n    \n    // Head\n    translate([-20, 0, 25])\n    scale([1.1, 1, 1])\n    sphere(15);\n    \n    // Snout\n    translate([-32, 0, 22])\n    scale([1.2, 1, 0.8])\n    rotate([0, -10, 0])\n    cylinder(10, 5, 3, true);\n    \n    // Ears\n    for(side = [-1, 1]) {\n        translate([-15, side * 12, 30])\n        rotate([0, 0, side * 20])\n        scale([0.8, 0.4, 0.8])\n        sphere(8);\n    }\n    \n    // Eyes\n    for(side = [-1, 1]) {\n        translate([-28, side * 7, 25])\n        color(\"black\")\n        sphere(3);\n    }\n    \n    // Nose\n    translate([-37, 0, 22])\n    color(\"pink\")\n    sphere(2);\n    \n    // Whiskers\n    for(side = [-1, 1]) {\n        for(i = [0:2]) {\n            rotate([0, 0, side * (20 + i * 10)])\n            translate([-32, 0, 20 - i * 2])\n            cylinder(1, 0.2, 0.2);\n        }\n    }\n    \n    // Front legs\n    for(side = [-1, 1]) {\n        translate([-10, side * 12, 5])\n        rotate([0, 30, 0])\n        cylinder(12, 4, 3);\n    }\n    \n    // Front paws\n    for(side = [-1, 1]) {\n        translate([-15, side * 15, -1])\n        scale([1, 1.2, 0.6])\n        sphere(5);\n    }\n    \n    // Back legs\n    for(side = [-1, 1]) {\n        translate([15, side * 8, 5])\n        rotate([0, -30, 0])\n        cylinder(15, 5, 4);\n    }\n    \n    // Back paws\n    for(side = [-1, 1]) {\n        translate([20, side * 10, -2])\n        scale([1.2, 1.5, 0.7])\n        sphere(6);\n    }\n    \n    // Tail\n    translate([25, 0, 10])\n    rotate([0, 30, 0])\n    cylinder(15, 3, 2);\n    \n    // Fur texture (bumps)\n    for(i = [0:20]) {\n        angle = i * 36;\n        translate([\n            15 * cos(angle),\n            15 * sin(angle),\n            15 + sin(i) * 3\n        ])\n        sphere(1 + sin(i) * 0.5);\n    }\n}\n\n// Create the hamster\nhamster();",
    "renders": true
  },
  {
    "animal": "hare",
    "openscad_code": "// Hare - Realistic Medium Complexity\n// Size: ~80mm length\n\nmodule ear(height, angle, bend) {\n    // Outer ear\n    translate([0, 0, height/2])\n    rotate([0, angle, 0])\n    rotate([bend, 0, 0])\n    scale([0.4, 1, 1])\n    cylinder(h=height, r1=height/2.5, r2=height/4, $fn=8);\n    \n    // Inner ear\n    translate([0, 0, height/2])\n    rotate([0, angle, 0])\n    rotate([bend, 0, 0])\n    scale([0.3, 0.8, 0.8])\n    cylinder(h=height*0.9, r1=height/3, r2=height/5, $fn=8);\n}\n\nmodule leg(length, width, angle) {\n    rotate([0, 0, angle])\n    union() {\n        // Upper leg\n        cylinder(h=length*0.6, r=width, $fn=8);\n        \n        // Lower leg\n        translate([0, 0, length*0.6])\n        rotate([15, 0, 0])\n        cylinder(h=length*0.4, r=width*0.8, $fn=8);\n        \n        // Paw\n        translate([0, 0, length*0.95])\n        sphere(r=width*1.2, $fn=8);\n    }\n}\n\nmodule tail() {\n    // Tail sphere\n    sphere(r=6, $fn=12);\n    \n    // Tail fluff\n    for(i=[0:45:360]) {\n        rotate([0, 0, i])\n        translate([0, 4, 0])\n        scale([0.5, 1, 0.5])\n        sphere(r=3, $fn=6);\n    }\n}\n\n// Main body\nunion() {\n    // Body\n    translate([0, 0, 15])\n    scale([1.2, 1, 1.2])\n    sphere(r=20, $fn=16);\n    \n    // Chest\n    translate([-15, 0, 0])\n    scale([0.8, 1, 0.7])\n    sphere(r=15, $fn=12);\n    \n    // Head\n    translate([25, 0, 25])\n    scale([0.9, 0.8, 1])\n    sphere(r=15, $fn=12);\n    \n    // Ears\n    translate([30, 8, 35])\n    ear(25, -15, -10);\n    \n    translate([30, -8, 35])\n    ear(25, 15, -10);\n    \n    // Front legs\n    translate([10, 10, 0])\n    leg(25, 4, 0);\n    \n    translate([10, -10, 0])\n    leg(25, 4, 0);\n    \n    // Back legs\n    translate([-20, 12, 0])\n    rotate([0, 0, -30])\n    leg(30, 5, 20);\n    \n    translate([-20, -12, 0])\n    rotate([0, 0, 30])\n    leg(30, 5, -20);\n    \n    // Tail\n    translate([-30, 0, 10])\n    tail();\n    \n    // Nose\n    translate([35, 0, 20])\n    scale([1, 0.8, 0.6])\n    sphere(r=3, $fn=8);\n    \n    // Eyes\n    translate([28, 5, 28])\n    sphere(r=2, $fn=8);\n    \n    translate([28, -5, 28])\n    sphere(r=2, $fn=8);\n    \n    // Whiskers\n    for(i=[-1, 1]) {\n        for(j=[0:30:120]) {\n            translate([33, i*8, 22])\n            rotate([0, j, 0])\n            cylinder(h=8, r=0.5, $fn=4);\n        }\n    }\n}",
    "renders": true
  },
  {
    "animal": "harrier",
    "openscad_code": "// Harrier 3D model - Realistic style, medium complexity\n// Roughly 1:100 scale for 3D printing\n\nmodule harrier() {\n    // Main fuselage\n    union() {\n        // Central fuselage\n        translate([0, 0, 0])\n            scale([1, 0.6, 0.4])\n            sphere(10);\n\n        // Forward fuselage\n        translate([3, 0, 0])\n            scale([1.2, 0.5, 0.3])\n            sphere(8);\n\n        // Rear fuselage\n        translate([-4, 0, 0])\n            scale([0.8, 0.7, 0.5])\n            sphere(9);\n\n        // Cockpit\n        translate([6, 0, 3])\n            scale([0.7, 0.4, 0.3])\n            sphere(6);\n    }\n\n    // Wings\n    union() {\n        // Left wing\n        translate([0, -12, 0])\n            rotate([0, 0, -15])\n            scale([1.5, 0.3, 0.1])\n            cube([15, 8, 1]);\n\n        // Right wing\n        mirror([0, 1, 0])\n            translate([0, -12, 0])\n            rotate([0, 0, -15])\n            scale([1.5, 0.3, 0.1])\n            cube([15, 8, 1]);\n    }\n\n    // Wing tips\n    for (i = [-1, 1]) {\n        translate([0, 12*i, 0])\n            rotate([0, 0, 15*i])\n            scale([0.2, 0.5, 0.1])\n            cylinder(h=8, r=2);\n    }\n\n    // Vertical stabilizers\n    translate([-8, 0, 2])\n        scale([0.3, 0.1, 1])\n        cube([2, 6, 8]);\n\n    // Engine pods\n    for (i = [-1, 1]) {\n        translate([-2, 8*i, -3])\n            rotate([90, 0, 0])\n            cylinder(h=6, r=3);\n    }\n\n    // Intakes\n    for (i = [-1, 1]) {\n        translate([3, 4*i, 0])\n            rotate([0, 0, 0])\n            difference() {\n                cylinder(h=4, r=2);\n                translate([0, 0, -1])\n                    cylinder(h=6, r=1.5);\n            }\n    }\n\n    // Landing gear\n    // Nose gear\n    translate([8, 0, -4])\n        cylinder(h=4, r=0.5);\n\n    // Main gear\n    for (i = [-1, 1]) {\n        translate([-2, 6*i, -4])\n            cylinder(h=4, r=0.7);\n    }\n\n    // Weapon pylons\n    for (j = [0, 1]) {\n        for (i = [-1, 1]) {\n            translate([-2 - j*3, 10*i, -2])\n                scale([0.3, 0.3, 0.1])\n                cube([1, 1, 2]);\n        }\n    }\n\n    // Exhaust nozzles\n    for (i = [-1, 1]) {\n        translate([-6, 6*i, -3])\n            rotate([90, 0, 0])\n            difference() {\n                cylinder(h=3, r=2);\n                translate([0, 0, -1])\n                    cylinder(h=5, r=1.5);\n            }\n    }\n\n    // Cockpit details\n    translate([7, 0, 4.5])\n        scale([0.5, 0.3, 0.2])\n        cube([3, 2, 1]);\n\n    // Canopy frame\n    translate([6, 0, 3.5])\n        scale([1, 0.8, 0.8])\n        sphere(4);\n}\n\n// Scale to reasonable 3D print size\nscale([0.5, 0.5, 0.5])\nharrier();",
    "renders": true
  },
  {
    "animal": "hawk",
    "openscad_code": "// Hawk - Medium complexity realistic style\n// Dimensions: ~80mm wingspan\n\n$fn=30;\n\nmodule hawk_body() {\n    // Main body - ellipsoid shape\n    scale([1.2, 0.7, 0.8]) sphere(15);\n    \n    // Chest protrusion\n    translate([0, 0, -2]) \n        scale([0.8, 0.6, 0.4]) sphere(15);\n}\n\nmodule hawk_head() {\n    // Head sphere\n    translate([-20, 0, 8]) \n        scale([0.9, 0.8, 1]) sphere(10);\n    \n    // Beak\n    translate([-30, 0, 8]) \n        rotate([0, 0, -10])\n        cylinder(h=15, r1=4, r2=0);\n    \n    // Eye left\n    translate([-24, 6, 11]) sphere(2);\n    translate([-26, 6.5, 11]) sphere(1);\n    \n    // Eye right\n    translate([-24, -6, 11]) sphere(2);\n    translate([-26, -6.5, 11]) sphere(1);\n}\n\nmodule hawk_wing() {\n    // Main wing structure\n    rotate([0, 10, 0])\n    translate([0, 0, -5])\n    difference() {\n        scale([2, 0.15, 0.8]) sphere(20);\n        \n        // Wing tip cut\n        translate([25, 0, 0])\n            cube([20, 20, 20], center=true);\n    }\n    \n    // Wing feathers - loop\n    for(i=[0:4]) {\n        rotate([0, 0, -20 + i*5])\n        translate([15 + i*5, 0, -5 - i*2])\n        scale([0.3, 0.1, 1.5]) \n        rotate([0, 20, 0])\n        cylinder(h=8, r1=3, r2=1);\n    }\n}\n\nmodule hawk_tail() {\n    // Tail base\n    translate([18, 0, -5])\n    rotate([0, 20, 0])\n    scale([1.5, 0.2, 0.5]) sphere(15);\n    \n    // Tail feathers\n    for(i=[-1:1]) {\n        translate([25, i*6, -8])\n        rotate([0, 30, 0])\n        scale([0.8, 0.1, 0.3])\n        cylinder(h=15, r1=5, r2=2);\n    }\n}\n\nmodule hawk_legs() {\n    // Left leg\n    translate([-5, 8, -12])\n    rotate([0, 10, 0])\n    cylinder(h=15, r=2);\n    \n    // Left foot\n    translate([-2, 8, -25])\n    rotate([0, 0, 90])\n    scale([1, 0.3, 0.3])\n    cylinder(h=8, r=2);\n    \n    // Left talons\n    for(i=[-1:1]) {\n        translate([0, 8 + i*2, -26])\n        rotate([90, 0, 0])\n        cylinder(h=3, r1=1, r2=0.5);\n    }\n    \n    // Right leg\n    translate([-5, -8, -12])\n    rotate([0, 10, 0])\n    cylinder(h=15, r=2);\n    \n    // Right foot\n    translate([-2, -8, -25])\n    rotate([0, 0, 90])\n    scale([1, 0.3, 0.3])\n    cylinder(h=8, r=2);\n    \n    // Right talons\n    for(i=[-1:1]) {\n        translate([0, -8 + i*2, -26])\n        rotate([90, 0, 0])\n        cylinder(h=3, r1=1, r2=0.5);\n    }\n}\n\n// Assemble the hawk\nunion() {\n    hawk_body();\n    hawk_head();\n    \n    // Left wing\n    translate([5, 15, 5])\n    rotate([0, 0, 30])\n    hawk_wing();\n    \n    // Right wing\n    translate([5, -15, 5])\n    rotate([0, 0, -30])\n    mirror([0, 1, 0])\n    hawk_wing();\n    \n    hawk_tail();\n    hawk_legs();\n}",
    "renders": true
  },
  {
    "animal": "hedgehog",
    "openscad_code": "// Realistic Hedgehog - Medium Complexity\n// ~70mm long, 3D printable with minimal supports\n\n// Main parameters\nbody_length = 70;\nbody_height = 35;\nbody_width = 40;\nspike_length = 8;\nspike_diameter = 1.8;\n\n// Body module - ellipsoid shape\nmodule hedgehog_body() {\n    // Main body - slightly flattened sphere\n    scale([1.3, 1, 0.8])\n        sphere(d=body_width, $fn=32);\n    \n    // Snout extension\n    translate([body_length/2 - 5, 0, -5])\n        scale([1.5, 1, 0.8])\n            sphere(d=15, $fn=24);\n}\n\n// Ear module\nmodule ear(side) {\n    translate([body_length/4, side * body_width/3, body_height/2])\n        rotate([0, side * 15, 0])\n            scale([0.3, 0.8, 1])\n                sphere(d=8, $fn=12);\n}\n\n// Leg module\nmodule leg(pos_x, pos_y, angle) {\n    translate([pos_x, pos_y, -body_height/2 + 3])\n        rotate([angle, 0, 0])\n            cylinder(h=10, d1=6, d2=4, $fn=8);\n}\n\n// Eye module\nmodule eye(side) {\n    translate([body_length/3, side * body_width/4, body_height/4])\n        sphere(d=3.5, $fn=16);\n    \n    // Pupil\n    translate([body_length/3 + 2, side * body_width/4, body_height/4])\n        sphere(d=2, $fn=8);\n}\n\n// Spike module\nmodule spike(x, y, angle, length) {\n    translate([x, y, 0])\n        rotate([0, angle, atan2(y, x)])\n            cylinder(h=length, d=spike_diameter, $fn=6);\n}\n\n// Main hedgehog assembly\nmodule hedgehog() {\n    union() {\n        // Body\n        color(\"saddlebrown\")\n        hedgehog_body();\n        \n        // Ears\n        color(\"tan\")\n        ear(1);\n        ear(-1);\n        \n        // Legs\n        color(\"sienna\") {\n            leg(body_length/3, body_width/3, 15);\n            leg(body_length/3, -body_width/3, 15);\n            leg(-body_length/3, body_width/3, -15);\n            leg(-body_length/3, -body_width/3, -15);\n        }\n        \n        // Eyes\n        color(\"white\")\n        eye(1);\n        color(\"white\")\n        eye(-1);\n        \n        // Nose\n        color(\"black\")\n        translate([body_length/2 + 5, 0, -3])\n            sphere(d=4, $fn=16);\n    }\n    \n    // Spikes covering back\n    color(\"dimgray\")\n    for (i = [0:5:360]) {\n        for (j = [0:10:body_length-10]) {\n            if (j > -body_length/2 + 15) {\n                translate([j, 0, 0])\n                    rotate([0, 0, i])\n                        translate([0, body_width/2 - 5, body_height/2 - 5])\n                            spike(0, 0, -20, spike_length);\n            }\n        }\n    }\n    \n    // Additional spikes on sides\n    for (i = [0:15:360]) {\n        rotate([0, 0, i])\n            translate([0, body_width/2 - 2, 0])\n                for (z = [0:5:body_height-5]) {\n                    spike(0, 0, 0, spike_length * 0.8);\n                }\n    }\n}\n\n// Generate the model\nhedgehog();",
    "renders": true
  },
  {
    "animal": "hermitcrab",
    "openscad_code": "// Hermit Crab - Realistic Style, Medium Complexity\n// Overall size ~60mm\n\n// Shell parameters\nshell_height = 35;\nshell_base = 22;\nshell_wall = 1.5;\n\n// Crab parameters\ncrab_scale = 0.8;\n\nmodule shell() {\n    // Main spiral shell\n    union() {\n        // Base spiral\n        for(i=[0:30:360]) {\n            translate([sin(i)*(shell_base-i/35), cos(i)*(shell_base-i/35), i/8]) \n                rotate([0,0,i])\n                scale([1-i/400, 1-i/400, 1])\n                cylinder(h=shell_height/6, r1=shell_base-i/20, r2=shell_base-i/15, $fn=6);\n        }\n        \n        // Opening\n        difference() {\n            translate([0,0,0])\n                sphere(d=shell_base*2);\n            translate([0,0,-shell_base])\n                cube([shell_base*3, shell_base*3, shell_base*2], center=true);\n        }\n        \n        // Shell wall\n        difference() {\n            translate([0,0,0])\n                sphere(d=shell_base*2 + shell_wall*2);\n            translate([0,0,0])\n                sphere(d=shell_base*2);\n        }\n    }\n}\n\nmodule crab_body() {\n    // Main body\n    translate([0,0,shell_height/2]) {\n        // Cephalothorax\n        color(\"darkorange\")\n        difference() {\n            scale([0.8, 0.6, 0.4])\n                sphere(d=shell_base*crab_scale);\n            translate([0,0,-shell_base*crab_scale/2])\n                cube([shell_base*crab_scale*1.2, shell_base*crab_scale, shell_base*crab_scale], center=true);\n        }\n        \n        // Eyes\n        color(\"black\")\n        translate([shell_base*crab_scale*0.2, shell_base*crab_scale*0.25, shell_base*crab_scale*0.15])\n            sphere(d=1.5);\n        translate([shell_base*crab_scale*0.2, -shell_base*crab_scale*0.25, shell_base*crab_scale*0.15])\n            sphere(d=1.5);\n            \n        // Eye stalks\n        color(\"darkorange\")\n        translate([shell_base*crab_scale*0.2, shell_base*crab_scale*0.25, shell_base*crab_scale*0.1])\n            cylinder(h=3, r=0.8);\n        translate([shell_base*crab_scale*0.2, -shell_base*crab_scale*0.25, shell_base*crab_scale*0.1])\n            cylinder(h=3, r=0.8);\n    }\n}\n\nmodule claws() {\n    // Left claw\n    translate([-shell_base*0.3, shell_base*0.4, shell_height/2]) {\n        rotate([0,0,45])\n            scale([1.5, 0.8, 0.8])\n            color(\"orangered\")\n            difference() {\n                sphere(d=shell_base*0.4);\n                translate([0,0,-shell_base*0.2])\n                    cube([shell_base*0.6, shell_base*0.4, shell_base*0.4], center=true);\n            }\n        \n        // Pincer\n        translate([-shell_base*0.3, 0, 0])\n            rotate([0,90,0])\n            cylinder(h=shell_base*0.2, r1=shell_base*0.05, r2=shell_base*0.15);\n    }\n    \n    // Right claw\n    translate([-shell_base*0.3, -shell_base*0.4, shell_height/2]) {\n        rotate([0,0,-45])\n            scale([1.5, 0.8, 0.8])\n            color(\"orangered\")\n            difference() {\n                sphere(d=shell_base*0.4);\n                translate([0,0,-shell_base*0.2])\n                    cube([shell_base*0.6, shell_base*0.4, shell_base*0.4], center=true);\n            }\n        \n        // Pincer\n        translate([-shell_base*0.3, 0, 0])\n            rotate([0,90,0])\n            cylinder(h=shell_base*0.2, r1=shell_base*0.05, r2=shell_base*0.15);\n    }\n}\n\nmodule legs() {\n    // Left legs\n    for(i=[0:2]) {\n        translate([-shell_base*0.1, shell_base*0.3 - i*0.15, shell_height/2 - i*2]) {\n            rotate([0,0,20 + i*10])\n            color(\"orangered\")\n            cylinder(h=shell_base*0.4, r=shell_base*0.04);\n            \n            translate([shell_base*0.35, 0, -shell_base*0.05])\n                sphere(d=shell_base*0.08);\n        }\n    }\n    \n    // Right legs\n    for(i=[0:2]) {\n        translate([-shell_base*0.1, -shell_base*0.3 + i*0.15, shell_height/2 - i*2]) {\n            rotate([0,0,-20 - i*10])\n            color(\"orangered\")\n            cylinder(h=shell_base*0.4, r=shell_base*0.04);\n            \n            translate([shell_base*0.35, 0, -shell_base*0.05])\n                sphere(d=shell_base*0.08);\n        }\n    }\n}\n\n// Assemble the hermit crab\nunion() {\n    shell();\n    crab_body();\n    claws();\n    legs();\n}",
    "renders": true
  },
  {
    "animal": "heron",
    "openscad_code": "// Heron 3D Model - Realistic Style, Medium Complexity\n// Designed for 3D printing (50mm height)\n\n$fn = 32; // Smooth curves\n\nmodule heron() {\n    // Body\n    union() {\n        // Main body\n        translate([0, 0, 10])\n            scale([1, 0.7, 1.2])\n            sphere(d=20);\n            \n        // Neck\n        translate([0, -8, 20])\n            rotate([0, -15, 0])\n            cylinder(h=25, d1=8, d2=4, center=false);\n            \n        // Head\n        translate([0, -18, 38])\n            scale([0.8, 0.6, 1.4])\n            sphere(d=10);\n            \n        // Beak\n        translate([0, -26, 38])\n            rotate([-30, 0, 0])\n            cylinder(h=15, d1=4, d2=1, center=false);\n    }\n    \n    // Eyes\n    translate([-2, -20, 42])\n        sphere(d=2);\n    translate([2, -20, 42])\n        sphere(d=2);\n        \n    // Legs\n    module leg(side) {\n        translate([side*5, 0, 0]) {\n            // Upper leg\n            translate([0, 0, 8])\n                rotate([0, side*10, 0])\n                cylinder(h=20, d=3, center=false);\n                \n            // Lower leg\n            translate([0, -side*2, -10])\n                rotate([0, side*15, 0])\n                cylinder(h=25, d=2.5, center=false);\n                \n            // Feet\n            translate([0, -side*4, -32])\n                rotate([0, 0, 90])\n                scale([1, 0.2, 0.3])\n                cube([12, 4, 2]);\n                \n            // Toes\n            for(i=[-1:1]) {\n                translate([i*4, -side*6, -32])\n                    rotate([0, 10, 0])\n                    cylinder(h=8, d=1, center=false);\n            }\n        }\n    }\n    \n    leg(1);\n    leg(-1);\n    \n    // Wings\n    module wing(side) {\n        translate([side*10, 5, 15]) {\n            rotate([0, 0, side*30])\n            scale([0.3, 1, 0.1])\n            difference() {\n                sphere(d=30);\n                \n                // Wing feather detail\n                for(i=[0:3]) {\n                    translate([side*i*3, 0, -2])\n                        rotate([0, side*i*5, 0])\n                        cube([2, 25, 4]);\n                }\n            }\n        }\n    }\n    \n    wing(1);\n    wing(-1);\n    \n    // Tail\n    translate([0, 10, 8])\n        rotate([30, 0, 0])\n        scale([0.5, 0.2, 0.1])\n        cube([15, 20, 3]);\n}\n\n// Base for stability\nmodule base() {\n    translate([0, 0, -35])\n        cylinder(h=3, d=40);\n}\n\nunion() {\n    heron();\n    base();\n}\n\n// Center the model\ntranslate([0, 0, 0]) heron();\ntranslate([0, 0, -35]) base();",
    "renders": true
  },
  {
    "animal": "herring",
    "openscad_code": "// Herring model - medium complexity realistic style\n// Total length ~80mm, height ~20mm, width ~15mm\n\n$fn = 24; // Smooth curves\n\nmodule herring_body() {\n    // Main body - tapered ellipsoid\n    scale([1, 0.6, 0.3])\n    sphere(d = 60);\n    \n    // Tail fin - two angled plates\n    translate([30, 0, 0])\n    rotate([0, 90, 0])\n    scale([0.3, 1, 1])\n    cylinder(h = 20, d1 = 25, d2 = 0);\n    \n    mirror([0, 1, 0])\n    translate([30, 0, 0])\n    rotate([0, 90, 0])\n    scale([0.3, 1, 1])\n    cylinder(h = 20, d1 = 25, d2 = 0);\n}\n\nmodule dorsal_fin() {\n    // Main dorsal fin - triangular shape\n    translate([-20, 0, 8])\n    rotate([0, 10, 0])\n    linear_extrude(height = 0.5)\n    polygon(points = [[0, 0], [15, 8], [30, 0]]);\n    \n    // Fin rays\n    for(i = [0:3]) {\n        translate([-15 + i*10, 0, 8.5])\n        rotate([0, 10 + i*2, 0])\n        scale([1, 0.2, 1])\n        cylinder(h = 5 + i*2, d = 1);\n    }\n}\n\nmodule pectoral_fin(side) {\n    // Side fin - positioned behind gills\n    translate([-10, side*8, -2])\n    rotate([0, 30, side*20])\n    scale([1.2, 0.3, 1])\n    sphere(d = 12);\n}\n\nmodule pelvic_fin(side) {\n    // Belly fins\n    translate([5, side*5, -6])\n    rotate([20, 0, side*30])\n    scale([0.8, 0.3, 1])\n    sphere(d = 8);\n}\n\nmodule anal_fin() {\n    // Bottom fin near tail\n    translate([15, 0, -7])\n    rotate([30, 0, 0])\n    linear_extrude(height = 0.5)\n    polygon(points = [[0, 0], [10, 5], [20, 0]]);\n}\n\nmodule gill_cover() {\n    // Gill plate\n    translate([-25, 0, -3])\n    rotate([0, 0, -10])\n    scale([1, 1, 0.5])\n    sphere(d = 8);\n    \n    // Gill slit\n    translate([-28, 0, -2])\n    rotate([0, 0, -15])\n    scale([0.1, 3, 0.5])\n    cube([5, 2, 1]);\n}\n\nmodule mouth() {\n    // Protruding upper jaw\n    translate([-30, 0, -2])\n    rotate([0, 20, 0])\n    scale([1, 0.7, 0.3])\n    sphere(d = 8);\n    \n    // Lower jaw\n    translate([-28, 0, -5])\n    rotate([0, -20, 0])\n    scale([0.9, 0.6, 0.2])\n    sphere(d = 7);\n}\n\nmodule eye() {\n    // Eye socket\n    translate([-28, 5, 3])\n    sphere(d = 4);\n    \n    // Eye ball\n    translate([-29, 5.5, 3.5])\n    scale([0.8, 0.8, 0.8])\n    sphere(d = 3);\n}\n\nmodule scales_pattern() {\n    // Scales along body - simplified as raised ovals\n    for(pos = [-25:5:25]) {\n        for(height = [-1, 1]) {\n            translate([pos, height*3, 0])\n            rotate([0, 0, 45])\n            scale([1, 0.6, 0.2])\n            sphere(d = 2);\n        }\n    }\n}\n\nmodule herring() {\n    union() {\n        // Main body parts\n        herring_body();\n        \n        // Fins\n        dorsal_fin();\n        pectoral_fin(1);\n        pectoral_fin(-1);\n        pelvic_fin(1);\n        pelvic_fin(-1);\n        anal_fin();\n        \n        // Head features\n        gill_cover();\n        mouth();\n        eye();\n        mirror([0, 1, 0]) eye();\n        \n        // Surface details\n        scales_pattern();\n    }\n}\n\n// Generate the herring\nherring();",
    "renders": true
  },
  {
    "animal": "hippopotamus",
    "openscad_code": "// Realistic Medium-Complexity Hippopotamus\n// Height ~50 mm, length ~100 mm\n// Built with primitives, ready for FDM printing (no steep overhangs)\n\n// Global parameters\nhippo_scale = 1;        // master scale\nwall = 2;               // minimum wall / thickness for printing\n\nmodule hippo_body() {\n    // Main torso (ellipsoid)\n    scale([1, 0.75, 0.6])\n    sphere(d = 60, $fn = 40);\n}\n\nmodule hippo_head() {\n    difference() {\n        union() {\n            // Snout block\n            translate([30, 0, 8])\n            scale([1.2, 1, 0.8])\n            sphere(d = 35, $fn = 30);\n            \n            // Forehead dome\n            translate([15, 0, 15])\n            sphere(d = 30, $fn = 30);\n        }\n        \n        // Nostrils\n        for(x = [1, -1]) {\n            translate([38, x*6, 12])\n            rotate([0, 90, 0])\n            cylinder(h = 8, d1 = 6, d2 = 4, $fn = 12);\n        }\n        \n        // Eyes\n        for(x = [1, -1]) {\n            translate([20, x*12, 18])\n            sphere(d = 6, $fn = 12);\n        }\n    }\n}\n\nmodule hippo_ears() {\n    for(x = [1, -1]) {\n        translate([10, x*18, 22])\n        rotate([0, 30*x, 0])\n        scale([0.5, 1, 0.3])\n        sphere(d = 12, $fn = 20);\n    }\n}\n\nmodule hippo_legs() {\n    // Front legs\n    for(x = [1, -1]) {\n        translate([15, x*20, -5])\n        rotate([10, 0, 0])\n        cylinder(h = 25, d1 = 16, d2 = 14, $fn = 20);\n    }\n    \n    // Rear legs\n    for(x = [1, -1]) {\n        translate([-20, x*18, -5])\n        rotate([10, 0, 0])\n        cylinder(h = 25, d1 = 18, d2 = 16, $fn = 20);\n    }\n}\n\nmodule hippo_tail() {\n    translate([-32, 0, 0])\n    rotate([0, 20, 0])\n    cylinder(h = 15, d1 = 8, d2 = 4, $fn = 12);\n}\n\nmodule hippo_mouth() {\n    // Wide mouth opening\n    translate([35, 0, 0])\n    rotate([0, 90, 0])\n    scale([1, 0.4, 1])\n    cylinder(h = 30, d = 20, $fn = 30);\n    \n    // Teeth row (small cylinders)\n    for(i = [0:5]) {\n        translate([30 + i*4, 0, -3])\n        rotate([0, 90, 0])\n        cylinder(h = 6, d = 3, $fn = 8);\n    }\n}\n\nmodule hippo_full() {\n    scale(hippo_scale)\n    union() {\n        hippo_body();\n        hippo_head();\n        hippo_ears();\n        hippo_legs();\n        hippo_tail();\n        hippo_mouth();\n    }\n}\n\n// Render the complete hippo\nhippo_full();",
    "renders": true
  },
  {
    "animal": "hoatzin",
    "openscad_code": "// Hoatzin - medium complexity realistic style\n// Overall size ~70mm beak to tail\n\n$fn=32;\nbody_length = 45;\nbody_height = 25;\nbody_width = 18;\n\nmodule hoatzin() {\n    // Main body\n    color(\"saddlebrown\")\n    union() {\n        // Torso\n        translate([0, 0, body_height/2])\n        scale([1.2, 1, 0.8])\n        sphere(d=body_width);\n\n        // Lower body\n        translate([0, 0, -5])\n        scale([1.3, 0.9, 1.1])\n        cylinder(h=15, d1=body_width*1.1, d2=body_width*0.8);\n\n        // Head\n        translate([-body_length/2+5, 0, body_height+5])\n        rotate([0, 20, 0])\n        scale([0.8, 0.7, 0.9])\n        sphere(d=20);\n\n        // Crest feathers\n        for(i=[-2:2]) {\n            translate([-body_length/2+2, i*3, body_height+18])\n            rotate([i*5-10, 0, 0])\n            cylinder(h=12, d1=3, d2=1);\n        }\n\n        // Beak\n        translate([-body_length/2-5, 0, body_height+3])\n        rotate([0, -30, 0])\n        scale([1, 0.5, 0.4])\n        cylinder(h=15, d1=8, d2=2);\n\n        // Neck\n        translate([-body_length/4, 0, body_height])\n        rotate([0, 20, 0])\n        cylinder(h=15, d1=10, d2=8);\n\n        // Tail\n        for(i=[0:3]) {\n            translate([body_length/2+5+i*3, 0, body_height-5-i*2])\n            rotate([0, -20+i*5, 0])\n            scale([1, 0.3, 0.1])\n            cube([8, 6, 2]);\n        }\n\n        // Wings\n        // Left wing\n        translate([0, body_width/2+2, body_height/2])\n        rotate([0, 0, -20])\n        difference() {\n            scale([1.5, 0.3, 1])\n            sphere(d=body_width);\n            translate([-10, -2, 0])\n            cube([20, 4, body_width]);\n        }\n\n        // Right wing\n        mirror([0, 1, 0])\n        translate([0, body_width/2+2, body_height/2])\n        rotate([0, 0, -20])\n        difference() {\n            scale([1.5, 0.3, 1])\n            sphere(d=body_width);\n            translate([-10, -2, 0])\n            cube([20, 4, body_width]);\n        }\n\n        // Legs\n        // Left leg\n        translate([-5, body_width/2-2, -5])\n        cylinder(h=15, d=3);\n        translate([-5, body_width/2-2, -15])\n        sphere(d=5);\n\n        // Right leg\n        translate([-5, -body_width/2+2, -5])\n        cylinder(h=15, d=3);\n        translate([-5, -body_width/2+2, -15])\n        sphere(d=5);\n\n        // Claws\n        for(i=[-1,1]) {\n            for(j=[-1,0,1]) {\n                translate([-5+i*10, j*2-2, -15])\n                rotate([0, 90, 0])\n                cylinder(h=3, d1=2, d2=1);\n            }\n        }\n\n        // Eye\n        translate([-body_length/2+2, 6, body_height+8])\n        sphere(d=3);\n        translate([-body_length/2+1.5, 6.5, body_height+9])\n        sphere(d=1.5);\n    }\n}\n\nhoatzin();",
    "renders": true
  },
  {
    "animal": "honeybee",
    "openscad_code": "// Honeybee - Realistic Medium Complexity\n// Size: ~80mm wingspan, 50mm body length\n// 3D printable with 0.8mm minimum walls\n\n// Body segments\nmodule head() {\n    union() {\n        // Main head sphere\n        sphere(d=8, $fn=20);\n        \n        // Mandibles\n        translate([-2, -4, 0]) rotate([0, 0, -30]) cylinder(h=3, d1=2, d2=1, $fn=8);\n        translate([2, -4, 0]) rotate([0, 0, 30]) cylinder(h=3, d1=2, d2=1, $fn=8);\n        \n        // Compound eyes\n        translate([-3, 3, 2]) sphere(d=3, $fn=12);\n        translate([3, 3, 2]) sphere(d=3, $fn=12);\n    }\n}\n\nmodule thorax() {\n    union() {\n        // Main thorax\n        scale([1.2, 1, 0.8]) sphere(d=12, $fn=20);\n        \n        // Wing attachments\n        for(side = [-1, 1]) {\n            translate([side*6, 0, 2]) rotate([0, 30, 0]) \n                scale([1, 3, 0.3]) sphere(d=3, $fn=6);\n        }\n    }\n}\n\nmodule abdomen() {\n    // Tapered abdomen with segments\n    union() {\n        for(i = [0:5]) {\n            translate([0, -i*3-2, 0]) {\n                color(i % 2 == 0 ? [1, 0.9, 0] : [0.1, 0.1, 0.1])\n                    sphere(d=12-i, $fn=16);\n            }\n        }\n    }\n}\n\n// Wings\nmodule wing() {\n    difference() {\n        // Main wing shape\n        translate([0, 0, 0]) \n            scale([1, 3, 0.1]) sphere(d=15, $fn=8);\n        \n        // Wing veins (negative space)\n        for(i = [1:4]) {\n            rotate([0, 0, i*20-40]) \n                translate([0, i*2, 0.2]) \n                    cube([0.5, 10, 0.3], center=true);\n        }\n    }\n}\n\n// Legs\nmodule leg(position, angle) {\n    translate(position) rotate([0, 0, angle]) {\n        // Coxa\n        cylinder(h=3, d=2, $fn=8);\n        translate([0, 3, 0])\n            rotate([30, 0, 0]) {\n                // Femur\n                cylinder(h=6, d=1.5, $fn=8);\n                translate([0, 6, 0])\n                    rotate([30, 0, 0]) {\n                        // Tibia\n                        cylinder(h=8, d=1.2, $fn=8);\n                        translate([0, 8, 0])\n                            rotate([45, 0, 0]) {\n                                // Tarsus\n                                cylinder(h=5, d=1, $fn=6);\n                            }\n                    }\n            }\n    }\n}\n\n// Antennae\nmodule antenna() {\n    for(side = [-1, 1]) {\n        translate([side*2, 4, 3]) rotate([0, -30, 0]) {\n            cylinder(h=8, d=0.8, $fn=8);\n            translate([0, 0, 8]) sphere(d=1.2, $fn=8);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Position head\n    translate([0, 25, 0]) head();\n    \n    // Position thorax\n    translate([0, 15, 0]) thorax();\n    \n    // Position abdomen\n    translate([0, -5, 0]) abdomen();\n    \n    // Wings\n    for(side = [-1, 1]) {\n        translate([side*6, 15, 4]) rotate([0, 0, side*30]) \n            rotate([30, 0, 0]) wing();\n        translate([side*4, 15, 3]) rotate([0, 0, side*20]) \n            rotate([45, 0, 0]) scale([0.7, 0.7, 0.7]) wing();\n    }\n    \n    // Legs\n    for(i = [0:2]) {\n        angle = i*30 - 30;\n        leg([0, 15-i*2, -4], angle);\n        leg([0, 15-i*2, 4], angle);\n    }\n    \n    // Antennae\n    translate([0, 25, 0]) antenna();\n}",
    "renders": true
  },
  {
    "animal": "honeycreeper",
    "openscad_code": "// Honeycreeper - 3D printable model\n// Medium complexity realistic style\n\n$fn = 48;\n\n// Main parameters\nbody_length = 60;\nbody_height = 25;\nwing_span = 45;\nbeak_length = 18;\ntail_length = 35;\nleg_length = 12;\n\n// Body module\nmodule body() {\n    // Main body - elongated sphere\n    translate([0, 0, body_height/2])\n    scale([1.3, 1, 1])\n    sphere(body_height/2);\n    \n    // Chest bulge\n    translate([-body_length/4, 0, body_height/2 - 5])\n    scale([0.8, 0.7, 0.6])\n    sphere(body_height/2.5);\n}\n\n// Beak module\nmodule beak() {\n    // Upper beak\n    translate([body_length/2 - 5, 0, body_height/2 + 5])\n    rotate([0, -20, 0])\n    cylinder(h = beak_length, r1 = 4, r2 = 1.5);\n    \n    // Lower beak\n    translate([body_length/2 - 5, 0, body_height/2 + 2])\n    rotate([0, -25, 0])\n    cylinder(h = beak_length - 2, r1 = 3, r2 = 1);\n}\n\n// Wings module\nmodule wings() {\n    // Left wing\n    translate([0, -body_height/2 - 2, body_height/2])\n    rotate([0, 0, 30])\n    scale([1.2, 0.2, 0.8])\n    sphere(wing_span/2);\n    \n    // Right wing\n    translate([0, body_height/2 + 2, body_height/2])\n    rotate([0, 0, -30])\n    scale([1.2, 0.2, 0.8])\n    sphere(wing_span/2);\n    \n    // Wing details - feathers\n    for(i = [0:2]) {\n        translate([-wing_span/4 + i*5, -body_height/2 - 3, body_height/2 - 3])\n        rotate([0, 0, 20 + i*5])\n        scale([0.3, 0.1, 0.6])\n        cube([8, 2, 1]);\n        \n        translate([-wing_span/4 + i*5, body_height/2 + 3, body_height/2 - 3])\n        rotate([0, 0, -(20 + i*5)])\n        scale([0.3, 0.1, 0.6])\n        cube([8, 2, 1]);\n    }\n}\n\n// Tail module\nmodule tail() {\n    // Tail feathers\n    for(i = [-1:1]) {\n        translate([-body_length/2 - tail_length/2, i*4, body_height/2 - 5])\n        rotate([0, 0, i*10])\n        scale([1, 0.2, 0.3])\n        cube([tail_length, 6, 2]);\n    }\n}\n\n// Head module\nmodule head() {\n    // Head sphere\n    translate([body_length/2 - 10, 0, body_height/2 + 8])\n    sphere(10);\n    \n    // Eye\n    translate([body_length/2 - 5, -3, body_height/2 + 10])\n    sphere(2);\n    \n    // Eye highlight\n    translate([body_length/2 - 4.5, -2.5, body_height/2 + 11])\n    sphere(1);\n}\n\n// Legs and feet module\nmodule legs() {\n    // Left leg\n    translate([-body_length/4, -5, 0])\n    cylinder(h = leg_length, r = 1.5);\n    \n    // Left foot\n    translate([-body_length/4, -5, 0])\n    rotate([90, 0, 0])\n    linear_extrude(height = 1)\n    polygon(points = [[0,0], [3,0], [3.5,1], [2,1.5], [1,1.5], [0,0]]);\n    \n    // Right leg\n    translate([-body_length/4, 5, 0])\n    cylinder(h = leg_length, r = 1.5);\n    \n    // Right foot\n    translate([-body_length/4, 5, 0])\n    rotate([90, 0, 0])\n    linear_extrude(height = 1)\n    polygon(points = [[0,0], [3,0], [3.5,1], [2,1.5], [1,1.5], [0,0]]);\n}\n\n// Assembly\nunion() {\n    body();\n    beak();\n    wings();\n    tail();\n    head();\n    legs();\n}",
    "renders": true
  },
  {
    "animal": "honeyeater",
    "openscad_code": "// Honeyeater 3D Model - Medium Complexity Realistic Style\n// Approx 80mm beak-to-tail, 3D-printable\n\n$fn = 32;\n\nmodule body() {\n    // Main body - elongated sphere\n    scale([1.2, 0.7, 0.8]) sphere(d = 35);\n}\n\nmodule head() {\n    translate([18, 0, 5])\n    scale([0.8, 0.7, 0.7]) sphere(d = 22);\n}\n\nmodule beak() {\n    // Curved beak using cylinder and sphere\n    translate([32, 0, 5]) rotate([0, -20, 0]) {\n        cylinder(h = 18, r1 = 1.5, r2 = 0.5);\n        translate([0, 0, 18]) sphere(d = 2);\n    }\n}\n\nmodule eye() {\n    // Left eye\n    translate([22, 5.5, 8]) {\n        color(\"black\") sphere(d = 3);\n        translate([0, 0, 1.6]) color(\"white\") sphere(d = 1);\n    }\n}\n\nmodule wing() {\n    // Right wing - slightly raised\n    translate([-5, 0, 12]) rotate([0, 0, 30]) {\n        difference() {\n            scale([1.8, 0.8, 0.2]) sphere(d = 25);\n            translate([0, -15, 0]) cube([40, 30, 5], center = true);\n        }\n    }\n}\n\nmodule tail() {\n    // Fan tail\n    translate([-22, 0, 2]) rotate([0, 15, 0]) {\n        for(i = [-15:10:15]) {\n            rotate([0, 0, i]) {\n                translate([0, 0, 0]) cylinder(h = 15, r1 = 6, r2 = 2);\n            }\n        }\n    }\n}\n\nmodule legs() {\n    // Left leg\n    translate([0, 4, -12]) {\n        cylinder(h = 8, r = 1.2);\n        translate([0, 0, -8]) {\n            // Toes\n            for(angle = [0:120:240]) {\n                rotate([0, 0, angle]) {\n                    translate([3, 0, 0]) cylinder(h = 4, r = 0.8);\n                }\n            }\n        }\n    }\n    \n    // Right leg\n    translate([0, -4, -12]) {\n        cylinder(h = 8, r = 1.2);\n        translate([0, 0, -8]) {\n            for(angle = [0:120:240]) {\n                rotate([0, 0, angle]) {\n                    translate([3, 0, 0]) cylinder(h = 4, r = 0.8);\n                }\n            }\n        }\n    }\n}\n\nmodule feathers() {\n    // Wing feather detail\n    translate([-5, 0, 12]) rotate([0, 0, 30]) {\n        for(i = [0:3]) {\n            rotate([0, 0, i*8-12]) {\n                translate([5, 0, 1]) \n                scale([0.8, 0.15, 0.05]) sphere(d = 15);\n            }\n        }\n    }\n}\n\nmodule breast_pattern() {\n    // Light feather pattern on breast\n    for(y = [-8:4:8]) {\n        for(z = [-5:3:10]) {\n            translate([8, y, z]) {\n                scale([0.3, 0.2, 0.1]) sphere(d = 3);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    color(\"olive\") body();\n    color(\"olive\") head();\n    color(\"black\") beak();\n    eye();\n    mirror([0, 1, 0]) eye();\n    \n    color(\"darkgreen\") wing();\n    mirror([0, 1, 0]) wing();\n    \n    color(\"olive\") tail();\n    \n    color(\"brown\") legs();\n    \n    color(\"yellowgreen\") feathers();\n    mirror([0, 1, 0]) feathers();\n    \n    color(\"lightgreen\") breast_pattern();\n}",
    "renders": true
  },
  {
    "animal": "hornbill",
    "openscad_code": "// Hornbill - Medium complexity realistic style\n// Overall dimensions: 90mm length, 40mm height, 30mm width\n\n$fn = 32;\n\nmodule hornbill() {\n    // Main body parameters\n    body_length = 40;\n    body_height = 25;\n    body_width = 20;\n    \n    // Head parameters\n    head_length = 30;\n    head_height = 20;\n    head_width = 15;\n    \n    // Casque (horn) parameters\n    casque_height = 12;\n    casque_width = 8;\n    casque_length = 20;\n    \n    // Beak parameters\n    beak_length = 25;\n    beak_height = 10;\n    beak_width = 8;\n    \n    // Tail parameters\n    tail_length = 15;\n    tail_height = 18;\n    \n    // Leg parameters\n    leg_height = 8;\n    leg_width = 3;\n    \n    // Main body - ellipsoid shape\n    translate([0, 0, 0])\n        scale([body_length/2, body_width/2, body_height/2])\n        sphere(1);\n    \n    // Head - slightly smaller ellipsoid\n    translate([body_length/2 + head_length/2 - 5, 0, body_height/2 - 5])\n        scale([head_length/2, head_width/2, head_height/2])\n        sphere(1);\n    \n    // Casque (characteristic horn on top of beak)\n    translate([body_length/2 + head_length - 5, 0, body_height/2 + head_height/2 - 2])\n        difference() {\n            scale([casque_length/2, casque_width/2, casque_height/2])\n            sphere(1);\n            // Hollow out casque slightly\n            translate([0, 0, -2])\n                scale([casque_length/2 - 1, casque_width/2 - 1, casque_height/2 - 1])\n                sphere(1);\n        }\n    \n    // Upper beak\n    translate([body_length/2 + head_length + beak_length/2 - 10, 0, body_height/2 - 2])\n        rotate([0, -10, 0])\n        scale([beak_length/2, beak_width/2, beak_height/2])\n        sphere(1);\n    \n    // Lower beak\n    translate([body_length/2 + head_length + beak_length/2 - 10, 0, body_height/2 - 10])\n        rotate([0, -10, 0])\n        scale([beak_length/2 - 2, beak_width/2 - 1, beak_height/2 - 3])\n        sphere(1);\n    \n    // Tail - fan shape\n    translate([-body_length/2 - tail_length/2, 0, 0])\n        rotate([0, 0, -5])\n        scale([tail_length/2, tail_width/2, tail_height/2])\n        sphere(1);\n    \n    // Wings - folded against body\n    wing_pos = body_length/4;\n    for(side = [-1, 1]) {\n        translate([wing_pos, side * (body_width/2 - 2), body_height/4])\n            rotate([20 * side, 0, 10 * side])\n            scale([body_length/3, body_width/4, body_height/3])\n            difference() {\n                sphere(1);\n                // Create wing tip\n                translate([body_length/6, 0, 0])\n                    sphere(0.8);\n            }\n    }\n    \n    // Legs - simple cylinders\n    leg_offset = body_length/3;\n    for(side = [-1, 1]) {\n        translate([leg_offset, side * (body_width/4), -body_height/2])\n            cylinder(h = leg_height, r = leg_width/2);\n        \n        // Feet - simple flat cylinders\n        translate([leg_offset, side * (body_width/4), -body_height/2 - leg_height])\n            rotate([90, 0, 0])\n            cylinder(h = leg_width * 2, r = leg_width/2);\n    }\n    \n    // Eye - small sphere\n    translate([body_length/2 + head_length/2, head_width/2 - 2, body_height/2 + head_height/2 - 5])\n        sphere(1.5);\n    \n    // Eye - other side\n    translate([body_length/2 + head_length/2, -head_width/2 + 2, body_height/2 + head_height/2 - 5])\n        sphere(1.5);\n    \n    // Neck transition\n    translate([body_length/4, 0, body_height/4])\n        scale([body_length/3, body_width/3, body_height/3])\n        sphere(1);\n}\n\n// Add tail width for better proportion\ntail_width = 25;\n\n// Main assembly\nhornbill();",
    "renders": true
  },
  {
    "animal": "hornet",
    "openscad_code": "// Realistic Hornet - Medium Complexity\n// Size: ~60mm length\n\n$fn = 30;\nmodule hornet() {\n    // Body segments\n    color(\"goldenrod\") {\n        // Head\n        translate([0,0,8]) rotate([90,0,0]) \n            scale([1,1.2,1]) sphere(d=12);\n        \n        // Thorax\n        translate([0,0,2]) rotate([90,0,0]) \n            scale([1.3,1.1,1.1]) sphere(d=14);\n        \n        // Abdomen segments\n        for(i=[0:3]) {\n            translate([-i*4-5,0,-i*2]) rotate([90,0,0])\n                scale([1-i*0.1,1-i*0.05,1-i*0.1]) \n                    sphere(d=16-i*2);\n        }\n    }\n    \n    // Wings\n    color(\"lightgray\", 0.7) {\n        // Front wings\n        for(side=[-1,1]) {\n            translate([2,side*8,4]) rotate([0,side*15,side*20])\n                scale([2,1,0.2]) sphere(d=12);\n            translate([-2,side*6,2]) rotate([0,side*10,side*25])\n                scale([1.8,0.8,0.2]) sphere(d=10);\n        }\n    }\n    \n    // Legs\n    color(\"darkgoldenrod\") {\n        for(side=[-1,1]) {\n            for(pos=[0,1,2]) {\n                translate([pos*3-3,side*6,pos*1+1]) rotate([90,side*30,0])\n                    cylinder(h=8, d1=2, d2=1);\n                translate([pos*3-3+4,side*8,pos*1+1]) rotate([60,side*45,side*10])\n                    cylinder(h=6, d1=1.5, d2=1);\n            }\n        }\n    }\n    \n    // Eyes\n    color(\"black\") {\n        for(side=[-1,1]) {\n            translate([3,side*5,10]) sphere(d=4);\n        }\n    }\n    \n    // Antennae\n    color(\"black\") {\n        for(side=[-1,1]) {\n            translate([5,side*3,11]) rotate([0,side*20,0])\n                cylinder(h=8, d1=1.5, d2=0.5);\n            translate([5,side*3,11]) rotate([0,side*20,0]) translate([0,0,8])\n                sphere(d=1);\n        }\n    }\n    \n    // Stripes on abdomen\n    color(\"darkslategray\") {\n        for(i=[0:2]) {\n            difference() {\n                translate([-i*4-6,0,-i*2-1]) rotate([90,0,0])\n                    scale([1-i*0.1,1-i*0.05,0.5]) \n                        sphere(d=16-i*2);\n                translate([-i*4-6,0,-i*2-1.2]) rotate([90,0,0])\n                    scale([1-i*0.1,1-i*0.05,0.7]) \n                        sphere(d=12-i*2);\n            }\n        }\n    }\n    \n    // Stinger\n    color(\"black\") {\n        translate([-17,0,-7]) rotate([90,0,0])\n            cylinder(h=4, d1=2, d2=0.5);\n    }\n}\n\n// Main assembly\nhornet();",
    "renders": true
  },
  {
    "animal": "horse",
    "openscad_code": "// Horse in realistic style - medium complexity\n// Scaled to ~70mm in length\n\nmodule horse() {\n    // Body\n    union() {\n        // Main torso\n        translate([0, 0, 15]) {\n            scale([1, 0.7, 0.8])\n                sphere(d=40, $fn=32);\n        }\n        \n        // Chest forward bulge\n        translate([15, 0, 15]) {\n            scale([0.8, 0.6, 0.7])\n                sphere(d=35, $fn=32);\n        }\n        \n        // Rear hip bulge\n        translate([-15, 0, 15]) {\n            scale([0.9, 0.7, 0.8])\n                sphere(d=35, $fn=32);\n        }\n    }\n    \n    // Neck\n    union() {\n        for(i=[0:2]) {\n            translate([20 + i*5, 0, 25 + i*3]) {\n                rotate([0, -15, 0])\n                    scale([0.5, 0.5, 0.6])\n                        sphere(d=25, $fn=24);\n            }\n        }\n    }\n    \n    // Head\n    translate([35, 0, 40]) {\n        rotate([0, -30, 0])\n            scale([1.2, 0.6, 0.7])\n                sphere(d=25, $fn=32);\n    }\n    \n    // Snout\n    difference() {\n        translate([42, 0, 38]) {\n            rotate([0, -30, 0])\n                scale([1.5, 0.5, 0.4])\n                    sphere(d=20, $fn=32);\n        }\n        \n        // Nostrils\n        for(side=[-1, 1]) {\n            translate([46, side*3, 38]) {\n                rotate([0, -30, 0])\n                    cylinder(h=5, d1=3, d2=2, $fn=8);\n            }\n        }\n    }\n    \n    // Ears\n    for(side=[-1, 1]) {\n        translate([32, side*6, 48]) {\n            rotate([0, 0, side*15])\n                scale([0.3, 0.1, 1])\n                    cylinder(h=10, d=8, $fn=8);\n        }\n    }\n    \n    // Legs\n    module leg(x, z, angle) {\n        translate([x, 0, 0]) {\n            rotate([0, 0, angle]) {\n                // Upper leg\n                translate([0, 0, 8]) {\n                    rotate([0, 15, 0])\n                        scale([0.3, 0.3, 1])\n                            cylinder(h=20, d=10, $fn=16);\n                }\n                \n                // Lower leg\n                translate([0, 0, -5]) {\n                    rotate([0, -10, 0])\n                        scale([0.25, 0.25, 1])\n                            cylinder(h=18, d=8, $fn=16);\n                }\n                \n                // Hoof\n                translate([0, 0, -18]) {\n                    scale([0.4, 0.5, 0.3])\n                        cylinder(h=5, d=8, $fn=8);\n                }\n            }\n        }\n    }\n    \n    // Front legs\n    leg(15, 0, 0);\n    leg(15, 0, 0);\n    \n    // Rear legs\n    leg(-15, 0, 0);\n    leg(-15, 0, 0);\n    \n    // Tail\n    union() {\n        for(i=[0:3]) {\n            translate([-25, 0, 20 - i*2]) {\n                rotate([0, 0, -20 + i*10])\n                    scale([0.3, 0.4, 1])\n                        cylinder(h=15 - i*2, d=5, $fn=8);\n            }\n        }\n    }\n    \n    // Mane\n    for(i=[0:4]) {\n        translate([25 + i*2.5, 0, 35 + i*2]) {\n            rotate([0, 0, 10 + i*5])\n                scale([0.2, 0.3, 1])\n                    cylinder(h=8, d=4, $fn=8);\n        }\n    }\n    \n    // Eyes\n    for(side=[-1, 1]) {\n        translate([38, side*5, 42]) {\n            sphere(d=3, $fn=8);\n        }\n    }\n}\n\n// Main model\nscale(0.7)\n    horse();",
    "renders": true
  },
  {
    "animal": "horseshoebat",
    "openscad_code": "// Horseshoe Bat (Rhinolophus) - Realistic Style, Medium Complexity\n// Designed for 3D printing (no overhangs > 45°, 1.2mm wall thickness)\n\n// Main parameters\nbody_length = 35;\nwing_span = 80;\nbody_height = 12;\n\n// Head with horseshoe noseleaf\nmodule head() {\n    union() {\n        // Skull\n        translate([-2, 0, 0])\n            sphere(d=10, $fn=24);\n        \n        // Horseshoe noseleaf\n        difference() {\n            // Main horseshoe\n            translate([5, 0, -3])\n                rotate([90, 0, 0])\n                    cylinder(h=3, r1=6, r2=4, $fn=64);\n            \n            // Inner cutout\n            translate([5.5, 0, -3])\n                rotate([90, 0, 0])\n                    cylinder(h=4, r1=4, r2=2.5, $fn=64);\n        }\n        \n        // Ears\n        for(side=[-1, 1]) {\n            translate([0, side*4, 5])\n                rotate([side*-10, 0, 0])\n                    cylinder(h=12, r1=2, r2=1, $fn=8);\n        }\n    }\n}\n\n// Body with fur texture\nmodule body() {\n    hull() {\n        // Chest\n        translate([8, 0, 0])\n            sphere(d=12, $fn=16);\n        \n        // Abdomen\n        translate([body_length-8, 0, 0])\n            scale([1, 0.8, 0.8])\n                sphere(d=10, $fn=16);\n    }\n}\n\n// Wing membrane\nmodule wing() {\n    thickness = 0.8;\n    \n    // Create wing shape using hull of spheres\n    hull() {\n        // Shoulder attachment\n        translate([12, 0, 0])\n            sphere(d=3, $fn=8);\n        \n        // Wing tip\n        translate([body_length+wing_span/2, wing_span/2, -2])\n            sphere(d=2, $fn=8);\n        \n        // Wing tip mirrored\n        translate([body_length+wing_span/2, -wing_span/2, -2])\n            sphere(d=2, $fn=8);\n        \n        // Tail membrane attachment\n        translate([body_length, 0, -4])\n            sphere(d=2, $fn=8);\n    }\n    \n    // Add wing bones\n    for(side=[-1, 1]) {\n        // Main arm bone\n        translate([12, 0, 0])\n            rotate([0, 0, side*30])\n                cylinder(h=wing_span/2, r=0.8, $fn=8);\n        \n        // Second finger\n        translate([12, 0, 0])\n            rotate([0, 0, side*45])\n                cylinder(h=wing_span/2*0.8, r=0.6, $fn=8);\n        \n        // Third finger\n        translate([12, 0, 0])\n            rotate([0, 0, side*60])\n                cylinder(h=wing_span/2*0.6, r=0.5, $fn=8);\n    }\n}\n\n// Legs and feet\nmodule legs() {\n    for(side=[-1, 1]) {\n        translate([body_length-10, side*3, -3])\n            union() {\n                // Upper leg\n                cylinder(h=6, r=1.2, $fn=8);\n                \n                // Lower leg\n                translate([0, 0, -6])\n                    rotate([side*10, 0, 0])\n                        cylinder(h=5, r=1, $fn=8);\n                \n                // Foot\n                translate([0, side*2, -11])\n                    rotate([0, 90, 0])\n                        cylinder(h=4, r=0.8, $fn=8);\n            }\n    }\n}\n\n// Tail\nmodule tail() {\n    translate([body_length, 0, -2])\n        for(i=[0:5]) {\n            translate([i*2, 0, -i*0.5])\n                sphere(d=3-i*0.3, $fn=8);\n        }\n}\n\n// Assemble the bat\nunion() {\n    // Position body horizontally\n    rotate([0, 0, 90])\n        union() {\n            head();\n            body();\n            tail();\n            legs();\n            \n            // Wings on both sides\n            for(side=[-1, 1]) {\n                mirror([0, side, 0])\n                    wing();\n            }\n        }\n}",
    "renders": true
  },
  {
    "animal": "hound",
    "openscad_code": "// Medium-complexity realistic hound\n// Approximate size: 90 mm nose-to-tail, 45 mm high\n\n$fn = 30;  // Smooth curves\n\nmodule ear() {\n    difference() {\n        rotate([0, 30, 0]) scale([1, 1.5, 0.3]) sphere(6);  // Outer flap\n        translate([0, 5, -2]) rotate([0, 30, 0]) \n            scale([0.7, 1.2, 1]) sphere(5);  // Inner hollow\n    }\n}\n\nmodule leg() {\n    union() {\n        // Upper leg\n        translate([0, 0, 10]) cylinder(h = 15, r1 = 4, r2 = 3);\n        // Lower leg\n        translate([0, 0, 2.5]) cylinder(h = 15, r1 = 3, r2 = 2);\n        // Paw\n        translate([0, 0, 0]) scale([1.2, 1, 1]) sphere(3);\n    }\n}\n\nmodule tail() {\n    // Curved tail using hull of spheres\n    hull() {\n        translate([0, 0, 0]) sphere(3);\n        translate([5, 3, 2]) sphere(2.5);\n        translate([12, 6, 4]) sphere(2);\n        translate([20, 8, 5]) sphere(1.5);\n    }\n}\n\nmodule body() {\n    // Main torso\n    hull() {\n        translate([0, 0, 0]) sphere(10);  // Chest\n        translate([-25, 0, 0]) sphere(12);  // Mid-body\n        translate([-45, 0, 2]) sphere(8);  // Rear\n    }\n    \n    // Chest protrusion\n    translate([10, 0, -5]) scale([1.5, 1, 0.8]) sphere(8);\n}\n\nmodule head() {\n    union() {\n        // Snout\n        translate([8, 0, 0]) scale([1.5, 1, 0.9]) sphere(6);\n        \n        // Main head\n        translate([0, 0, 2]) sphere(8);\n        \n        // Nose\n        translate([15, 0, 0]) sphere(2.5);\n        \n        // Eyes (sockets)\n        translate([3, 6, 4]) sphere(1.5);\n        translate([3, -6, 4]) sphere(1.5);\n        \n        // Ears\n        translate([0, 8, 10]) rotate([0, 0, 25]) ear();\n        translate([0, -8, 10]) rotate([0, 0, -25]) mirror([0,1,0]) ear();\n    }\n}\n\n// Assemble hound\nunion() {\n    // Main body\n    body();\n    \n    // Head attached to front\n    translate([25, 0, 10]) head();\n    \n    // Legs (front and back)\n    translate([20, 8, 0]) rotate([0, 0, 15]) leg();\n    translate([20, -8, 0]) rotate([0, 0, -15]) leg();\n    translate([-20, 8, 0]) rotate([0, 0, -15]) leg();\n    translate([-20, -8, 0]) rotate([0, 0, 15]) leg();\n    \n    // Tail\n    translate([-48, 0, 8]) rotate([0, 10, -20]) tail();\n}",
    "renders": true
  },
  {
    "animal": "hoverfly",
    "openscad_code": "// Hoverfly – realistic style, medium complexity (~120 lines)\n// Wings, body, head, legs and antennae built from primitives\n// 3D-printable: all overhangs <45°, 0.8 mm min walls\n\n// print_scale sets overall size (largest axis ≈ 65 mm)\nprint_scale = 1;\n\nmodule thorax() {\n    // central segment\n    translate([0,0,15]) rotate([0,90,0]) \n        scale([1.2,1.2,1.6])\n        cylinder(h=22, r1=6, r2=5, $fn=20);\n}\n\nmodule abdomen() {\n    // tapered abdomen with stripes\n    for(i=[0:3]) {\n        translate([0,0,30+6*i]) \n            difference() {\n                scale([1-0.1*i,1-0.1*i,1])\n                cylinder(h=5, r1=6-i, r2=5-i, $fn=20);\n                // stripe indentations\n                translate([0,0,2.5]) rotate([90,0,0]) \n                    cube([20,2,20], center=true);\n            }\n    }\n}\n\nmodule head() {\n    // spherical head with eyes\n    translate([0,0,0])\n    sphere(7, $fn=24);\n    // compound eyes\n    for(a=[-35,35])\n        translate([sin(a)*6, 0, cos(a)*6])\n        scale([1.2,1,1]) sphere(3.5, $fn=12);\n}\n\nmodule wing() {\n    // semi-transparent wing shape (solid for printing)\n    rotate([0,90,0])\n    linear_extrude(height=0.6, center=true)\n    difference() {\n        // main wing\n        scale([1,2.5,1]) circle(12, $fn=20);\n        // cut to shape\n        translate([0,10,0]) circle(8, $fn=20);\n    }\n}\n\nmodule wings() {\n    // left pair\n    translate([-9,0,15]) rotate([0,-10,20]) wing();\n    translate([-9,0,12]) rotate([0,-10,10]) scale([0.9,0.9,1]) wing();\n    // right pair (mirrored)\n    mirror([1,0,0]) {\n        translate([-9,0,15]) rotate([0,-10,20]) wing();\n        translate([-9,0,12]) rotate([0,-10,10]) scale([0.9,0.9,1]) wing();\n    }\n}\n\nmodule antenna() {\n    // thin wire antenna with club tip\n    translate([0,0,0]) rotate([0,-20,0])\n        cylinder(h=10, r=0.4, $fn=8);\n    translate([0,0,10]) sphere(1, $fn=8);\n}\n\nmodule antennae() {\n    // pair of antennae\n    translate([3,2,5]) rotate([0,0,30]) antenna();\n    translate([-3,2,5]) rotate([0,0,-30]) antenna();\n}\n\nmodule leg() {\n    // 3-segment leg\n    rotate([0,0,-30]) {\n        cylinder(h=8, r=0.8, $fn=8);\n        translate([0,0,8]) rotate([30,0,0])\n            cylinder(h=10, r=0.6, $fn=8);\n        translate([0,0,18]) rotate([60,0,0])\n            cylinder(h=8, r=0.5, $fn=8);\n    }\n}\n\nmodule legs() {\n    // 6 legs attached to thorax\n    for(side=[-1,1]) {\n        translate([side*7,0,13]) rotate([0,0,side*30]) leg();\n        translate([side*8,0,17]) rotate([0,0,side*15]) leg();\n        translate([side*6,0,21]) rotate([0,0,side*45]) leg();\n    }\n}\n\n// assemble the hoverfly\nscale([print_scale,print_scale,print_scale]) {\n    union() {\n        head();\n        thorax();\n        abdomen();\n        wings();\n        antennae();\n        legs();\n    }\n}",
    "renders": true
  },
  {
    "animal": "hummingbird",
    "openscad_code": "// Hummingbird model - medium complexity realistic style\n// Wings folded for 3D printing, approximate size 70mm long\n\nmodule body() {\n    // Main body - ellipsoid shape\n    translate([0, 0, 10]) \n    scale([1.2, 0.8, 1])\n    sphere(r=8, $fn=20);\n    \n    // Tail feathers\n    for(i = [-1, 0, 1]) {\n        rotate([0, 0, i*15])\n        translate([-12, 0, 8 + i])\n        scale([1.8, 0.4, 0.2])\n        sphere(r=3, $fn=8);\n    }\n}\n\nmodule head() {\n    // Head sphere\n    translate([10, 0, 12])\n    sphere(r=5, $fn=16);\n    \n    // Beak (conical)\n    translate([15, 0, 14])\n    rotate([0, -20, 0])\n    cylinder(h=12, r1=1, r2=0.2, $fn=8);\n    \n    // Eye indentations\n    translate([12, 2.5, 14])\n    sphere(r=1.2, $fn=8);\n    \n    translate([12, -2.5, 14])\n    sphere(r=1.2, $fn=8);\n}\n\nmodule wings_folded() {\n    // Left wing\n    translate([0, 8, 10])\n    rotate([0, 0, 45])\n    scale([2, 0.2, 0.8])\n    cylinder(h=12, r1=6, r2=3, $fn=12);\n    \n    // Right wing\n    translate([0, -8, 10])\n    rotate([0, 0, -45])\n    scale([2, 0.2, 0.8])\n    cylinder(h=12, r1=6, r2=3, $fn=12);\n    \n    // Wing details - primary feathers\n    for(i = [0, 1, 2]) {\n        translate([i*2 - 2, 9.5, 10])\n        rotate([0, 0, 40])\n        scale([0.8, 0.1, 0.3])\n        cylinder(h=8, r1=1.5, r2=0.5, $fn=6);\n    }\n    \n    for(i = [0, 1, 2]) {\n        translate([i*2 - 2, -9.5, 10])\n        rotate([0, 0, -40])\n        scale([0.8, 0.1, 0.3])\n        cylinder(h=8, r1=1.5, r2=0.5, $fn=6);\n    }\n}\n\nmodule feet() {\n    // Left foot\n    translate([5, 3, 3])\n    rotate([0, 0, 15])\n    cylinder(h=4, r=0.8, $fn=8);\n    \n    // Right foot\n    translate([5, -3, 3])\n    rotate([0, 0, -15])\n    cylinder(h=4, r=0.8, $fn=8);\n    \n    // Toes\n    for(i = [0, 1]) {\n        rotate([0, 0, i*90])\n        translate([6.5, 3.5, 0.5])\n        cylinder(h=2, r=0.4, $fn=6);\n    }\n    \n    for(i = [0, 1]) {\n        rotate([0, 0, i*-90])\n        translate([6.5, -3.5, 0.5])\n        cylinder(h=2, r=0.4, $fn=6);\n    }\n}\n\n// Assemble the hummingbird\nunion() {\n    body();\n    head();\n    wings_folded();\n    feet();\n}\n\n// Base for stability\ntranslate([0, 0, -2])\ndifference() {\n    cylinder(h=2, r=5, $fn=32);\n    cylinder(h=2.5, r=4, $fn=32);\n}",
    "renders": true
  },
  {
    "animal": "husky",
    "openscad_code": "// Realistic Husky - Medium Complexity\n// Approx 80mm in length\n\n$fn = 32;\n\n// Main body\nmodule body() {\n    difference() {\n        // Main torso\n        translate([0, 0, 15])\n            scale([1.2, 0.6, 0.8])\n            sphere(r=25);\n            \n        // Neck hollow\n        translate([15, 0, 25])\n            rotate([0, 10, 0])\n            scale([0.6, 0.7, 0.6])\n            cylinder(h=20, r=10);\n    }\n}\n\n// Head\nmodule head() {\n    translate([35, 0, 35])\n    rotate([0, -10, 0])\n    union() {\n        // Skull\n        scale([0.9, 0.7, 0.75])\n        sphere(r=18);\n        \n        // Snout\n        translate([12, 0, -2])\n        scale([1.2, 0.6, 0.5])\n        cylinder(h=15, r=10);\n        \n        // Nose\n        translate([24, 0, -2])\n        scale([0.8, 0.6, 0.4])\n        sphere(r=4);\n        \n        // Ears\n        for(side = [-1, 1]) {\n            translate([8, side*12, 8])\n            rotate([0, side*30, 0])\n            scale([0.3, 0.1, 0.6])\n            cylinder(h=18, r=8);\n        }\n        \n        // Eyes\n        for(side = [-1, 1]) {\n            translate([15, side*8, 6])\n            scale([0.3, 0.3, 0.3])\n            sphere(r=3);\n        }\n    }\n}\n\n// Leg module\nmodule leg(height, angle, offset) {\n    translate(offset)\n    rotate([angle, 0, 0])\n    union() {\n        // Upper leg\n        translate([0, 0, height/2])\n            scale([0.4, 0.4, 1])\n            cylinder(h=height, r=5);\n        \n        // Lower leg\n        translate([0, 0, 2])\n            scale([0.3, 0.3, 1])\n            cylinder(h=height-2, r=4);\n        \n        // Paw\n        translate([0, 0, 0])\n            scale([0.8, 1.2, 0.5])\n            sphere(r=5);\n    }\n}\n\n// Tail\nmodule tail() {\n    translate([-30, 0, 25])\n    rotate([0, 20, 0])\n    scale([0.4, 0.4, 1.5])\n    sphere(r=15);\n}\n\n// Fur detail module\nmodule fur_patch(pos, size) {\n    translate(pos)\n    scale([1, 1, 0.3])\n    sphere(r=size);\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    \n    // Legs - front\n    leg(20, 15, [20, 10, 0]);\n    leg(20, 15, [20, -10, 0]);\n    \n    // Legs - rear\n    leg(18, 10, [-20, 12, 0]);\n    leg(18, 10, [-20, -12, 0]);\n    \n    tail();\n    \n    // Fur patches for realism\n    fur_patch([10, 8, 30], 5);\n    fur_patch([10, -8, 30], 5);\n    fur_patch([0, 0, 35], 4);\n    fur_patch([-15, 0, 20], 6);\n    fur_patch([-25, 0, 25], 4);\n}",
    "renders": true
  },
  {
    "animal": "hyena",
    "openscad_code": "// Hyena model - medium complexity, realistic style\n// Designed for 3D printing - no overhangs, proper wall thickness\n\n// Overall scale factor\nscale_factor = 0.5;\n\n// Main body module\nmodule hyena_body() {\n    // Torso - elongated oval\n    translate([0, 0, 8])\n    scale([1.8, 1, 1.2])\n    sphere(r=10, $fn=24);\n    \n    // Back hump\n    translate([8, 0, 15])\n    scale([1.2, 0.8, 0.8])\n    sphere(r=8, $fn=20);\n    \n    // Belly\n    translate([0, 0, 2])\n    scale([1.6, 0.9, 0.6])\n    sphere(r=10, $fn=24);\n}\n\n// Head module\nmodule hyena_head() {\n    // Main head shape\n    translate([-18, 0, 12])\n    rotate([0, 10, 0])\n    scale([1.3, 0.9, 1])\n    sphere(r=8, $fn=24);\n    \n    // Snout\n    translate([-28, 0, 10])\n    scale([1.2, 0.7, 0.7])\n    sphere(r=6, $fn=20);\n    \n    // Ears\n    for(side = [-1, 1]) {\n        translate([-20, side*6, 18])\n        rotate([0, 0, side*20])\n        cylinder(h=8, r1=3, r2=1, $fn=8);\n    }\n    \n    // Neck\n    translate([-10, 0, 8])\n    scale([0.8, 0.7, 1.2])\n    cylinder(h=12, r=7, $fn=20);\n}\n\n// Leg module\nmodule leg(position, angle) {\n    translate(position)\n    rotate([0, angle, 0]) {\n        // Upper leg\n        translate([0, 0, 4])\n        rotate([0, 20, 0])\n        cylinder(h=12, r=4, $fn=12);\n        \n        // Lower leg\n        translate([0, 0, -4])\n        rotate([0, 20, 0])\n        cylinder(h=10, r=3, $fn=12);\n        \n        // Paw\n        translate([0, 0, -9])\n        scale([1.2, 1, 0.6])\n        sphere(r=3.5, $fn=12);\n    }\n}\n\n// Tail module\nmodule hyena_tail() {\n    // Tail base\n    translate([18, 0, 12])\n    rotate([0, -20, 0])\n    cylinder(h=15, r=3, $fn=12);\n    \n    // Tail tuft\n    translate([30, 0, 8])\n    sphere(r=4, $fn=12);\n}\n\n// Create all four legs\nmodule legs() {\n    // Front legs\n    leg([-10, 7, 0], 10);\n    leg([-10, -7, 0], 10);\n    \n    // Back legs\n    leg([12, 7, 0], -10);\n    leg([12, -7, 0], -10);\n}\n\n// Eyes and nose\nmodule facial_features() {\n    // Eyes\n    for(side = [-1, 1]) {\n        translate([-24, side*4, 14])\n        color(\"black\")\n        sphere(r=1.2, $fn=12);\n    }\n    \n    // Nose\n    translate([-31, 0, 10])\n    color(\"black\")\n    sphere(r=1.5, $fn=12);\n}\n\n// Main assembly\nscale([scale_factor, scale_factor, scale_factor])\nunion() {\n    hyena_body();\n    hyena_head();\n    hyena_tail();\n    legs();\n    facial_features();\n}",
    "renders": true
  },
  {
    "animal": "hyrax",
    "openscad_code": "// Hyrax 3D model - medium complexity realistic style\n// Total length ~65mm, height ~30mm, width ~25mm\n\n// Body parameters\nbody_length = 35;\nbody_height = 20;\nbody_width = 18;\n\n// Head parameters\nhead_length = 15;\nhead_width = 12;\nhead_height = 10;\n\n// Leg parameters\nleg_height = 12;\nleg_width = 5;\nleg_depth = 6;\n\n// Tail parameters\ntail_length = 8;\ntail_width = 6;\ntail_height = 5;\n\n// Ear parameters\near_size = 4;\n\n// Eye parameters\neye_radius = 1.5;\n\n// Nose parameters\nnose_width = 3;\nnose_height = 2;\nnose_depth = 2;\n\n// Fur texture parameters\nfur_radius = 0.5;\nfur_height = 0.3;\n\nmodule hyrax_body() {\n    // Main torso - slightly flattened ellipsoid\n    scale([1, 0.7, 0.6])\n    sphere(d=body_width, $fn=32);\n    \n    // Lower belly bulge\n    translate([0, -body_height*0.3, -body_height*0.2])\n    scale([1.2, 0.8, 0.7])\n    sphere(d=body_width*0.9, $fn=32);\n}\n\nmodule hyrax_head() {\n    // Main head shape\n    translate([body_length/2 + head_length/2, 0, body_height/2 + head_height/2 - 3])\n    rotate([0, -10, 0])\n    scale([1.1, 0.9, 0.8])\n    sphere(d=head_width, $fn=32);\n    \n    // Snout extension\n    translate([body_length/2 + head_length, 0, body_height/2 + head_height/2 - 3])\n    scale([1.5, 0.7, 0.7])\n    sphere(d=head_width*0.7, $fn=32);\n    \n    // Nose\n    translate([body_length/2 + head_length + 5, 0, body_height/2 + head_height/2 - 3])\n    scale([nose_width/3, nose_height/2, nose_depth/2])\n    sphere(d=nose_width, $fn=16);\n}\n\nmodule hyrax_ear(left_right = 1) {\n    // Ear base\n    translate([body_length/2 + head_length/2 - 2, left_right * head_width/2, body_height/2 + head_height - 2])\n    rotate([0, 10 * left_right, 0])\n    cylinder(h=ear_size, d1=ear_size*1.2, d2=ear_size*0.8, $fn=16);\n    \n    // Inner ear\n    translate([body_length/2 + head_length/2 - 2.2, left_right * head_width/2, body_height/2 + head_height - 1.5])\n    rotate([0, 10 * left_right, 0])\n    cylinder(h=ear_size*0.7, d1=ear_size*0.8, d2=ear_size*0.5, $fn=16);\n}\n\nmodule hyrax_leg(position = 1, side = 1) {\n    // Front/back position\n    x_pos = position == 1 ? body_length/3 : -body_length/3;\n    \n    // Main leg\n    translate([x_pos, side * body_width/2 - 2, -leg_height/2])\n    rotate([10, 0, side * 5])\n    cylinder(h=leg_height, d=leg_width, $fn=16);\n    \n    // Foot\n    translate([x_pos + (position == 1 ? 2 : -2), side * body_width/2 - 2, -leg_height - 1])\n    rotate([0, 0, side * 5])\n    scale([1.5, 1, 0.5])\n    cube([leg_width, leg_depth, 2], center=true);\n}\n\nmodule hyrax_tail() {\n    // Tail base\n    translate([-body_length/2 - tail_length/2, 0, body_height/2 - 5])\n    rotate([30, 0, 0])\n    scale([1, 0.8, 0.6])\n    cylinder(h=tail_length, d1=tail_width, d2=tail_width*0.7, $fn=16);\n}\n\nmodule hyrax_eye(left_right = 1) {\n    translate([body_length/2 + head_length - 2, left_right * head_width/3, body_height/2 + head_height/2])\n    sphere(r=eye_radius, $fn=16);\n}\n\nmodule hyrax_whiskers() {\n    for(i = [-2:1:2]) {\n        // Left whiskers\n        translate([body_length/2 + head_length + 4, -head_width/2 - 1, body_height/2 + head_height/2 - 2 + i])\n        rotate([0, 90, -20])\n        cylinder(h=6, d=0.3, $fn=8);\n        \n        // Right whiskers\n        translate([body_length/2 + head_length + 4, head_width/2 + 1, body_height/2 + head_height/2 - 2 + i])\n        rotate([0, 90, 20])\n        cylinder(h=6, d=0.3, $fn=8);\n    }\n}\n\nmodule fur_texture() {\n    // Simple fur texture using small spheres on back\n    for(i = [0:5:body_length-5]) {\n        for(j = [-body_width/2+2:2:body_width/2-2]) {\n            translate([i-body_length/2+5, j, body_height/2 - 1])\n            sphere(r=fur_radius, $fn=8);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Body\n    color(\"saddlebrown\")\n    hyrax_body();\n    \n    // Head\n    color(\"saddlebrown\") \n    hyrax_head();\n    \n    // Ears\n    color(\"saddlebrown\")\n    union() {\n        hyrax_ear(1);\n        hyrax_ear(-1);\n    }\n    \n    // Eyes\n    color(\"black\") {\n        hyrax_eye(1);\n        hyrax_eye(-1);\n    }\n    \n    // Legs\n    color(\"saddlebrown\") {\n        // Front legs\n        hyrax_leg(1, 1);\n        hyrax_leg(1, -1);\n        \n        // Back legs\n        hyrax_leg(-1, 1);\n        hyrax_leg(-1, -1);\n    }\n    \n    // Tail\n    color(\"saddlebrown\")\n    hyrax_tail();\n    \n    // Whiskers\n    color(\"black\")\n    hyrax_whiskers();\n    \n    // Fur texture\n    color(\"peru\")\n    fur_texture();\n}\n\n// Position on build plate\ntranslate([0, 0, leg_height + 1])",
    "renders": true
  },
  {
    "animal": "ibex",
    "openscad_code": "// Ibex in realistic style with medium complexity\n// Designed for 3D printing - no overhangs > 45 degrees\n// Overall size approximately 80mm long\n\n$fn = 32;\n\nmodule body() {\n    // Main torso - slightly curved cylinder\n    translate([0, 0, 15])\n    scale([1.2, 0.8, 1])\n    rotate([0, 10, 0])\n    cylinder(h = 35, r1 = 12, r2 = 10);\n    \n    // Rump\n    translate([0, -12, 15])\n    sphere(r = 12);\n    \n    // Chest\n    translate([0, 22, 15])\n    sphere(r = 11);\n}\n\nmodule legs() {\n    module leg(x, y, angle) {\n        translate([x, y, 0]) {\n            rotate([0, 0, angle]) {\n                // Upper leg\n                translate([0, 0, 8])\n                rotate([-15, 0, 0])\n                cylinder(h = 15, r1 = 4, r2 = 3);\n                \n                // Lower leg\n                translate([0, -3, 8])\n                rotate([15, 0, 0])\n                cylinder(h = 18, r1 = 3, r2 = 2);\n                \n                // Hoof\n                translate([0, -6, 8])\n                rotate([0, 0, 0])\n                cylinder(h = 5, r1 = 2.5, r2 = 2);\n            }\n        }\n    }\n    \n    // Front legs\n    leg(8, 20, 0);\n    leg(-8, 20, 0);\n    \n    // Back legs\n    leg(7, -15, 0);\n    leg(-7, -15, 0);\n}\n\nmodule head() {\n    translate([0, 30, 25])\n    rotate([0, -10, 0]) {\n        // Skull base\n        scale([0.8, 1.2, 0.9])\n        sphere(r = 8);\n        \n        // Snout\n        translate([0, 10, -2])\n        scale([0.6, 1, 0.5])\n        sphere(r = 7);\n        \n        // Horns\n        for (x = [-6, 6]) {\n            translate([x, 0, 5])\n            rotate([0, x * 2, 0])\n            cylinder(h = 20, r1 = 2, r2 = 1);\n            \n            // Horn ridges\n            for (i = [0:3]) {\n                translate([x, 0, 5 + i * 4])\n                rotate([0, x * 2, 0])\n                scale([1.2, 1.2, 0.3])\n                sphere(r = 2);\n            }\n        }\n    }\n}\n\nmodule neck() {\n    translate([0, 25, 18])\n    rotate([-20, 0, 0])\n    cylinder(h = 12, r1 = 6, r2 = 5);\n}\n\nmodule tail() {\n    translate([0, -20, 20])\n    rotate([30, 0, 0])\n    scale([0.5, 0.5, 1])\n    cylinder(h = 15, r1 = 3, r2 = 0);\n    \n    // Tail tuft\n    translate([0, -20, 20])\n    rotate([30, 0, 0])\n    sphere(r = 3);\n}\n\n// Ears\nmodule ears() {\n    for (x = [-4, 4]) {\n        translate([x, 30, 28])\n        rotate([0, 0, x * 10])\n        scale([0.3, 0.6, 1])\n        rotate([30, 0, 0])\n        cylinder(h = 5, r1 = 2, r2 = 1);\n    }\n}\n\n// Assemble the ibex\nunion() {\n    body();\n    neck();\n    head();\n    legs();\n    tail();\n    ears();\n}",
    "renders": true
  },
  {
    "animal": "ibis",
    "openscad_code": "// Ibis 3D Model - Medium Complexity Realistic Style\n// Overall size: ~80mm length, 30mm height, 30mm width\n\n// Global settings\n$fn = 32;\n\n// Main module\nmodule ibis() {\n    // Body\n    body();\n    \n    // Head and beak\n    translate([30, 0, 10]) rotate([0, -15, 0]) head();\n    \n    // Neck\n    translate([20, 0, 5]) neck();\n    \n    // Legs\n    translate([5, -6, -15]) leg();\n    translate([5, 6, -15]) mirror([0,1,0]) leg();\n    \n    // Wings\n    translate([0, -8, 5]) wing();\n    translate([0, 8, 5]) mirror([0,1,0]) wing();\n    \n    // Tail\n    translate([-25, 0, 8]) tail();\n}\n\n// Body - oval shaped\nmodule body() {\n    // Main body\n    difference() {\n        union() {\n            scale([1.5, 0.8, 0.6]) sphere(r=12);\n            translate([5, 0, 0]) cube([20, 20, 15], center=true);\n        }\n        // Hollow for printing\n        scale([1.3, 0.6, 0.4]) sphere(r=12);\n    }\n}\n\n// Head with long curved beak\nmodule head() {\n    union() {\n        // Head\n        sphere(r=5);\n        \n        // Beak - curved\n        translate([0, 0, -3]) rotate([0, -20, 0]) \n            scale([1, 0.3, 0.3]) cylinder(h=20, r1=2, r2=0.5);\n        \n        // Eye\n        translate([2, 3, 2]) sphere(r=1);\n        translate([2, 3, 2]) scale([0.5, 0.5, 0.5]) sphere(r=1);\n    }\n}\n\n// Neck - curved connector\nmodule neck() {\n    hull() {\n        translate([0, 0, 0]) sphere(r=3);\n        translate([10, 0, 5]) sphere(r=3);\n    }\n}\n\n// Leg with foot\nmodule leg() {\n    union() {\n        // Upper leg\n        translate([0, 0, 7.5]) rotate([0, 15, 0])\n            cylinder(h=15, r=1.5);\n        \n        // Lower leg\n        translate([0, 0, 0]) rotate([0, -15, 0])\n            cylinder(h=15, r=1.2);\n        \n        // Foot\n        translate([0, 0, -1]) foot();\n    }\n}\n\n// Webbed foot\nmodule foot() {\n    // Main foot\n    translate([0, 0, -2]) cube([8, 3, 1], center=true);\n    \n    // Toes\n    for(i = [-1:1]) {\n        translate([i*2.5, 0, -2]) cube([1, 0.5, 1], center=true);\n    }\n}\n\n// Wing with feather details\nmodule wing() {\n    difference() {\n        union() {\n            // Main wing\n            translate([0, 0, 0]) scale([1.2, 0.3, 0.8]) sphere(r=10);\n            \n            // Primary feathers\n            for(i = [0:4]) {\n                rotate([0, 0, -i*15]) \n                    translate([5-i, 0, -i*2]) \n                    scale([0.8, 0.1, 0.3]) \n                    sphere(r=8-i);\n            }\n        }\n        \n        // Hollow for printing\n        translate([0, 0, 0]) scale([1, 0.2, 0.6]) sphere(r=10);\n    }\n}\n\n// Tail feathers\nmodule tail() {\n    // Tail base\n    translate([0, 0, 0]) scale([0.5, 0.2, 0.5]) sphere(r=8);\n    \n    // Tail feathers\n    for(i = [-2:2]) {\n        rotate([0, 0, i*15]) \n            translate([-3, 0, i*2]) \n            scale([1, 0.1, 0.3]) \n            cylinder(h=8, r1=3, r2=1);\n    }\n}\n\n// Generate the ibis\nibis();",
    "renders": true
  },
  {
    "animal": "iguana",
    "openscad_code": "// Iguana model - medium complexity realistic style\n// Overall length ~80mm\n\n$fn = 30;\nbody_length = 50;\nbody_height = 15;\nbody_width = 20;\n\nmodule iguana_head() {\n    // Main head shape\n    translate([0, 0, 8])\n    scale([1.2, 0.8, 0.9])\n    sphere(8);\n    \n    // Snout extension\n    translate([7, 0, 6])\n    scale([1.5, 0.7, 0.6])\n    sphere(5);\n    \n    // Eye sockets\n    difference() {\n        translate([-2, 4, 10])\n        sphere(2.5);\n        translate([-2.5, 4.5, 10.5])\n        sphere(1.8);\n    }\n    difference() {\n        translate([-2, -4, 10])\n        sphere(2.5);\n        translate([-2.5, -4.5, 10.5])\n        sphere(1.8);\n    }\n    \n    // Nostrils\n    translate([8, 2, 8])\n    cylinder(h=2, r=0.8);\n    translate([8, -2, 8])\n    cylinder(h=2, r=0.8);\n}\n\nmodule iguana_body() {\n    // Main torso\n    hull() {\n        translate([-body_length/2, 0, 0])\n        sphere(body_height/2);\n        translate[body_length/2, 0, 0]\n        sphere(body_height/2);\n    }\n    \n    // Back ridge\n    for(i = [-20:5:20]) {\n        translate([i, 0, body_height/2 + 2])\n        rotate([0, 90, 0])\n        cylinder(h=3, r1=2, r2=0.5);\n    }\n    \n    // Tail segments\n    module tail_segment(pos, scale) {\n        translate(pos)\n        scale([scale, scale, scale])\n        sphere(5);\n    }\n    \n    tail_segment([25, 0, 0], 1);\n    tail_segment([32, 0, -1], 0.8);\n    tail_segment([38, 0, -2], 0.6);\n    tail_segment([43, 0, -3], 0.4);\n    tail_segment([47, 0, -4], 0.2);\n}\n\nmodule iguana_limbs() {\n    // Front legs\n    for(side = [-1, 1]) {\n        translate([-10, side*10, -5])\n        rotate([0, 30, 0])\n        cylinder(h=12, r=3);\n        \n        translate([-10, side*10, -15])\n        rotate([0, 30, 0])\n        cylinder(h=8, r=2.5);\n        \n        // Feet\n        translate([-10, side*11, -22])\n        rotate([0, 30, 90])\n        scale([1.5, 0.7, 0.5])\n        sphere(3);\n    }\n    \n    // Back legs\n    for(side = [-1, 1]) {\n        translate([15, side*8, -3])\n        rotate([0, -30, 0])\n        cylinder(h=15, r=3.5);\n        \n        translate([15, side*8, -16])\n        rotate([0, -30, 0])\n        cylinder(h=10, r=3);\n        \n        // Feet\n        translate([15, side*10, -24])\n        rotate([0, -30, 90])\n        scale([1.8, 0.8, 0.6])\n        sphere(3.5);\n    }\n}\n\nmodule iguana_dewlap() {\n    // Throat fan\n    rotate([10, 0, 0])\n    translate([-5, 0, -5])\n    scale([1, 0.3, 0.5])\n    sphere(6);\n}\n\n// Main assembly\nunion() {\n    iguana_head();\n    translate([-10, 0, 0])\n    iguana_body();\n    iguana_limbs();\n    translate([-10, 0, 0])\n    iguana_dewlap();\n}",
    "renders": true
  },
  {
    "animal": "impala",
    "openscad_code": "// Impala - medium complexity realistic style\n// Body proportions based on Aepyceros melampus\n// Overall length ~90mm, height ~45mm, width ~20mm\n\n$fn = 24;\nwall_thickness = 1.2;\n\nmodule impala() {\n    // Main body\n    color(\"burlywood\") union() {\n        // Torso - elongated oval\n        translate([0, 0, 20]) scale([1.8, 0.8, 1]) sphere(r=15);\n        \n        // Belly - slightly flattened\n        translate([0, 0, 12]) scale([2, 0.9, 0.5]) sphere(r=12);\n        \n        // Chest forward\n        translate([-25, 0, 15]) scale([0.8, 0.7, 1]) sphere(r=10);\n        \n        // Rump\n        translate([25, 0, 20]) scale([1, 0.9, 1.1]) sphere(r=12);\n    }\n    \n    // Neck\n    translate([-15, 0, 30]) rotate([0, -15, 0]) scale([0.8, 0.6, 0.8]) \n        cylinder(h=20, r1=6, r2=4);\n    \n    // Head\n    translate([-30, 0, 35]) rotate([0, -20, 0]) {\n        // Skull\n        scale([1.5, 0.7, 0.8]) sphere(r=8);\n        \n        // Snout\n        translate([-8, 0, -2]) scale([0.8, 0.5, 0.4]) sphere(r=6);\n        \n        // Ears - lyre shaped\n        translate([0, 6, 5]) rotate([0, 30, 20]) \n            scale([0.2, 0.05, 1]) cylinder(h=12, r=4);\n        translate([0, -6, 5]) rotate([0, 30, -20]) \n            scale([0.2, 0.05, 1]) cylinder(h=12, r=4);\n        \n        // Horns - males only, lyre-shaped\n        translate([2, 2, 8]) rotate([0, -10, 30]) \n            scale([0.3, 0.3, 1]) cylinder(h=15, r1=1, r2=0.5);\n        translate([2, -2, 8]) rotate([0, -10, -30]) \n            scale([0.3, 0.3, 1]) cylinder(h=15, r1=1, r2=0.5);\n    }\n    \n    // Legs\n    module leg(x, y, angle, length) {\n        translate([x, y, 15]) rotate([0, 0, angle]) {\n            // Upper leg\n            rotate([0, -angle, 0]) \n                scale([0.5, 0.5, 1]) cylinder(h=length*0.6, r=3);\n            \n            // Lower leg\n            translate([0, 0, -length*0.6]) rotate([30, 0, 0]) \n                scale([0.4, 0.4, 1]) cylinder(h=length*0.4, r=2.5);\n            \n            // Hoof\n            translate([0, 0, -length]) \n                scale([0.6, 0.4, 0.3]) cylinder(h=3, r=2);\n        }\n    }\n    \n    // Front legs\n    leg(-20, 6, 0, 25);\n    leg(-20, -6, 0, 25);\n    \n    // Hind legs - longer\n    leg(20, 6, 0, 30);\n    leg(20, -6, 0, 30);\n    \n    // Tail\n    translate([28, 0, 25]) rotate([30, 0, 0]) {\n        // Tail base\n        scale([0.8, 0.8, 0.5]) sphere(r=4);\n        \n        // Tail tuft\n        translate([0, 0, -8]) scale([0.3, 0.3, 1]) cylinder(h=10, r=3);\n    }\n    \n    // Facial features\n    translate([-36, 2, 33]) sphere(r=1); // Eye\n    translate([-36, -2, 33]) sphere(r=1); // Eye\n    \n    // Nostrils\n    translate([-38, 1.5, 31]) sphere(r=0.8);\n    translate([-38, -1.5, 31]) sphere(r=0.8);\n}\n\n// Main assembly\nimpala();",
    "renders": true
  },
  {
    "animal": "indri",
    "openscad_code": "// Indri Lemur - Medium Complexity Realistic Style\n// Approx. 80mm long, 3D printable\n\n// Wall thickness for printing\nwall = 1.2;\n\nmodule body() {\n    // Main torso with slight taper\n    hull() {\n        translate([0, 0, 10]) \n            scale([1.2, 0.8, 1]) sphere(d=20, $fn=16);\n        translate([0, 0, 25]) \n            scale([0.8, 0.6, 0.8]) sphere(d=15, $fn=16);\n    }\n}\n\nmodule head() {\n    // Rounded head\n    translate([0, 0, 35]) {\n        sphere(d=18, $fn=24);\n        \n        // Muzzle\n        translate([0, 8, -2])\n            scale([0.8, 1.2, 0.7]) sphere(d=10, $fn=16);\n    }\n}\n\nmodule ears() {\n    // Large rounded ears\n    for(side=[-1, 1]) {\n        translate([side*8, 0, 40]) {\n            rotate([0, side*20, 0])\n                scale([0.6, 2, 1.2]) sphere(d=8, $fn=16);\n        }\n    }\n}\n\nmodule eyes() {\n    // Forward-facing eyes\n    for(side=[-1, 1]) {\n        translate([side*5, 7, 35]) {\n            difference() {\n                sphere(d=4, $fn=12);\n                translate([0, 2, 0]) sphere(d=3.5, $fn=12);\n            }\n            // Pupil\n            translate([0, 2.1, 0])\n                color(\"black\") sphere(d=2, $fn=8);\n        }\n    }\n}\n\nmodule arms() {\n    // Long arms with hands\n    for(side=[-1, 1]) {\n        translate([side*10, -5, 20]) {\n            rotate([0, 0, side*30])\n                cylinder(h=25, d1=5, d2=3, $fn=8);\n            \n            // Hand\n            translate([0, -12, 0])\n                rotate([0, 0, side*45])\n                    scale([1, 0.3, 2]) sphere(d=6, $fn=8);\n        }\n    }\n}\n\nmodule legs() {\n    // Powerful hind legs\n    for(side=[-1, 1]) {\n        translate([side*5, 0, 5]) {\n            rotate([0, 0, side*15])\n                cylinder(h=20, d1=6, d2=4, $fn=8);\n            \n            // Foot\n            translate([0, 0, -12])\n                rotate([0, 0, side*10])\n                    scale([1.5, 0.5, 0.8]) sphere(d=8, $fn=8);\n        }\n    }\n}\n\nmodule tail() {\n    // Long tail with slight curve\n    translate([0, -15, 15]) {\n        rotate([0, 20, 0])\n            cylinder(h=30, d1=6, d2=3, $fn=12);\n        \n        // Tail tuft\n        translate([0, -25, 12])\n            rotate([0, 30, 0])\n                scale([0.8, 0.8, 1.2]) sphere(d=5, $fn=12);\n    }\n}\n\nmodule fur_texture() {\n    // Simple fur-like texture using small spheres\n    for(i=[0:8]) {\n        for(j=[0:5]) {\n            translate([\n                (i-4)*2 + (j%2)*1,\n                (j-2.5)*3 + (i%2)*1,\n                15 + j*2\n            ]) {\n                sphere(d=1.5, $fn=6);\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    body();\n    head();\n    ears();\n    eyes();\n    arms();\n    legs();\n    tail();\n    \n    // Fur texture on back\n    translate([0, -12, 20])\n        fur_texture();\n}\n\n// Base for stability\ntranslate([0, 0, -12])\n    difference() {\n        cylinder(h=2, d=40, $fn=32);\n        translate([0, 0, -1])\n            cylinder(h=4, d=38, $fn=32);\n    }",
    "renders": true
  },
  {
    "animal": "insect",
    "openscad_code": "// Realistic Insect - Ant\n// Approx 75mm length, 3D printable with no overhangs\n\n$fn = 32;\nbody_color = \"black\";\n\nmodule thorax_segment() {\n    // Single thorax segment - ellipsoid shape\n    scale([1.2, 0.8, 0.6])\n        sphere(d=10);\n}\n\nmodule abdomen_segment() {\n    // Abdomen segments - larger ellipsoids\n    scale([1.5, 1.2, 1])\n        sphere(d=12);\n}\n\nmodule leg_joint() {\n    // Ball joint for legs\n    sphere(d=3);\n}\n\nmodule leg_segment(length, angle) {\n    // Single leg segment - tapered cylinder\n    rotate([0, 0, angle])\n        rotate([90, 0, 0])\n            cylinder(h1=2, h2=1, r1=1.5, r2=1, h=length);\n}\n\nmodule antenna_segment(length) {\n    // Antenna segment - thin cylinder\n    rotate([0, 90, 0])\n        cylinder(d=0.8, h=length);\n}\n\nmodule mandible() {\n    // Sharp mandibles\n    difference() {\n        rotate([0, 90, 0])\n            cylinder(h1=3, h2=1, r1=2, r2=0.5, h=6);\n        translate([0, 0, 1])\n            rotate([0, 90, 0])\n                cylinder(d=1, h=7);\n    }\n}\n\nmodule compound_eye() {\n    // Cluster of small spheres for compound eye\n    for(i=[0:5]) {\n        rotate([0, 0, i*60])\n            translate([3, 0, 0])\n                sphere(d=2);\n    }\n}\n\nmodule complete_leg(side, position) {\n    // Build complete six-jointed leg\n    mirror([side, 0, 0]) {\n        translate([5, 0, -position*3]) {\n            leg_joint();\n            translate([0, 0, -1.5])\n                leg_segment(8, 30);\n            translate([0, -7, -2])\n                leg_segment(10, -20);\n            translate([0, -14, -3])\n                leg_segment(12, 15);\n        }\n    }\n}\n\n// Main body assembly\nunion() {\n    color(body_color) {\n        // Head\n        translate([0, 30, 0])\n            scale([1, 1.2, 0.9])\n                sphere(d=10);\n        \n        // Compound eyes\n        translate([0, 30, 0]) {\n            translate([4, 2, 3])\n                compound_eye();\n            translate([-4, 2, 3])\n                mirror([-1, 0, 0])\n                    compound_eye();\n        }\n        \n        // Mandibles\n        translate([0, 30, 0]) {\n            translate([2, 5, -2])\n                rotate([0, 20, 10])\n                    mandible();\n            translate([-2, 5, -2])\n                    rotate([0, -20, -10])\n                        mandible();\n        }\n        \n        // Antennae\n        translate([0, 30, 0]) {\n            translate([2, 5, 4])\n                antenna_segment(15);\n            translate([-2, 5, 4])\n                antenna_segment(15);\n        }\n        \n        // Thorax (3 segments)\n        translate([0, 20, 0])\n            thorax_segment();\n        translate([0, 15, 0])\n            thorax_segment();\n        translate([0, 10, 0])\n            thorax_segment();\n        \n        // Abdomen (4 segments, larger)\n        translate([0, 0, 0])\n            abdomen_segment();\n        translate([0, -8, 0])\n            abdomen_segment();\n        translate([0, -16, 0])\n            scale([1.3, 1.4, 1.2])\n                abdomen_segment();\n        translate([0, -26, 0])\n            scale([1.2, 1.3, 1.1])\n                abdomen_segment();\n        \n        // Six legs (3 pairs)\n        for(i=[0:2]) {\n            complete_leg(1, i);\n            complete_leg(-1, i);\n        }\n    }\n}",
    "renders": true
  },
  {
    "animal": "jackal",
    "openscad_code": "// Jackal model - realistic style, medium complexity\n// Dimensions approximately 80mm long\n\n// Overall scale factor\nscale_factor = 1.0;\n\nmodule jackal() {\n    // Body - main torso\n    color(\"tan\")\n    union() {\n        // Main body\n        translate([0, 0, 15])\n        scale([1.2, 0.7, 0.6])\n        sphere(d=30);\n        \n        // Chest forward extension\n        translate([15, 0, 12])\n        scale([1.1, 0.8, 0.5])\n        sphere(d=20);\n        \n        // Hindquarters\n        translate([-15, 0, 12])\n        scale([0.9, 0.8, 0.6])\n        sphere(d=25);\n    }\n    \n    // Head\n    module head() {\n        translate([25, 0, 25])\n        rotate([0, -10, 0])\n        union() {\n            // Main head sphere\n            scale([1.3, 0.9, 0.9])\n            sphere(d=18);\n            \n            // Snout extension\n            translate([8, 0, -2])\n            scale([1.2, 0.7, 0.6])\n            sphere(d=12);\n            \n            // Ears\n            for (x = [-1, 1]) {\n                translate([2, x*8, 6])\n                rotate([x*10, 0, 0])\n                scale([0.3, 0.15, 0.8])\n                cylinder(h=15, d1=8, d2=4);\n            }\n            \n            // Eyes\n            for (x = [-1, 1]) {\n                translate([12, x*5, 2])\n                scale([0.3, 0.8, 0.8])\n                sphere(d=4);\n            }\n            \n            // Nose\n            translate([16, 0, -1])\n            sphere(d=3);\n        }\n    }\n    head();\n    \n    // Legs\n    module leg(position, angle, length) {\n        translate(position)\n        rotate([0, 0, angle])\n        union() {\n            // Upper leg\n            translate([0, 0, 10])\n            rotate([15, 0, 0])\n            scale([0.4, 0.4, 1])\n            cylinder(h=20, d=8);\n            \n            // Lower leg\n            translate([0, 0, 0])\n            rotate([30, 0, 0])\n            scale([0.3, 0.3, 1])\n            cylinder(h=length-5, d=6);\n            \n            // Paw\n            translate([0, 0, -length+2])\n            scale([0.8, 0.8, 0.4])\n            sphere(d=8);\n        }\n    }\n    \n    // Front legs\n    leg([18, 8, 8], 10, 22);\n    leg([18, -8, 8], -10, 22);\n    \n    // Back legs\n    leg([-18, 8, 8], -15, 20);\n    leg([-18, -8, 8], 15, 20);\n    \n    // Tail\n    translate([-25, 0, 18])\n    rotate([0, 30, 0])\n    scale([0.5, 0.5, 1])\n    cylinder(h=25, d1=8, d2=4);\n    \n    // Neck\n    translate([20, 0, 20])\n    rotate([-20, 0, 0])\n    scale([0.6, 0.6, 1])\n    cylinder(h=12, d1=10, d2=8);\n}\n\n// Generate the jackal\nscale([scale_factor, scale_factor, scale_factor])\njackal();",
    "renders": true
  },
  {
    "animal": "jackdaw",
    "openscad_code": "// Jackdaw model - realistic style, medium complexity\n// Overall dimensions: ~60mm wingspan x 40mm length x 25mm height\n\n$fn = 24;\n\n// Main body module\nmodule body() {\n    // Main torso\n    translate([0, 0, 5])\n    scale([1, 1.5, 0.8])\n    sphere(8);\n    \n    // Lower body\n    translate([0, 0, 0])\n    scale([0.8, 1.2, 1.2])\n    sphere(6);\n    \n    // Tail base\n    translate([-12, 0, 3])\n    scale([0.5, 0.3, 0.2])\n    cube([8, 6, 4]);\n}\n\n// Head module\nmodule head() {\n    // Main head shape\n    translate([12, 0, 10])\n    scale([1.2, 1, 1])\n    sphere(6);\n    \n    // Beak upper\n    translate([18, 0, 11])\n    rotate([0, -20, 0])\n    scale([0.5, 0.3, 0.3])\n    cylinder(h=8, r1=3, r2=1);\n    \n    // Beak lower\n    translate([18, 0, 9])\n    rotate([0, -20, 0])\n    scale([0.4, 0.25, 0.25])\n    cylinder(h=6, r1=2.5, r2=0.5);\n    \n    // Eye sockets\n    translate([15, 3, 11])\n    rotate([0, 20, 0])\n    sphere(1);\n    \n    translate([15, -3, 11])\n    rotate([0, -20, 0])\n    sphere(1);\n    \n    // Eyes\n    color(\"black\")\n    translate([15.5, 3.2, 11])\n    sphere(0.5);\n    \n    color(\"black\")\n    translate([15.5, -3.2, 11])\n    sphere(0.5);\n}\n\n// Wing module\nmodule wing(side) {\n    mirror([side, 0, 0])\n    translate([0, 10, 8])\n    rotate([0, 0, 20])\n    scale([1.2, 1, 0.2])\n    union() {\n        // Main wing\n        translate([0, 0, 0])\n        scale([1, 2.5, 1])\n        sphere(5);\n        \n        // Wing tip\n        translate([0, 12, 0])\n        scale([0.5, 1, 0.8])\n        sphere(4);\n        \n        // Wing feathers\n        for(i=[1:5]) {\n            translate([0, 8 + i*1.5, -1])\n            rotate([0, 0, i*5])\n            scale([0.8 - i*0.1, 0.3, 0.1])\n            cube([5, 2, 1]);\n        }\n    }\n}\n\n// Tail module\nmodule tail() {\n    translate([-18, 0, 6])\n    rotate([15, 0, 0])\n    union() {\n        // Central tail\n        scale([1.5, 1, 0.5])\n        sphere(4);\n        \n        // Tail feathers\n        for(i=[-2:2]) {\n            translate([-2, i*2, -1])\n            rotate([0, 0, i*10])\n            scale([1, 0.4, 0.1])\n            cube([6, 1.5, 0.5]);\n        }\n    }\n}\n\n// Leg module\nmodule leg(side) {\n    translate([side*3, 0, 0])\n    union() {\n        // Upper leg\n        translate([5, side*4, 3])\n    rotate([0, 0, side*15])\n    scale([0.3, 0.3, 1])\n    cylinder(h=5, r=1.5);\n    \n    // Lower leg\n    translate([5, side*5, 0])\n    rotate([0, 0, side*15])\n    scale([0.3, 0.3, 1])\n    cylinder(h=4, r=1.2);\n    \n    // Foot\n    translate([5, side*6, -2])\n    scale([0.5, 1, 0.2])\n    sphere(2);\n    \n    // Toes\n    for(i=[-1:1]) {\n        translate([5 + i*1.5, side*7, -2])\n        scale([0.3, 0.3, 0.2])\n        sphere(1);\n    }\n    }\n}\n\n// Main assembly\nunion() {\n    body();\n    head();\n    wing(1);\n    wing(-1);\n    tail();\n    leg(1);\n    leg(-1);\n}\n\n// Base for stability\ntranslate([0, 0, -4])\nscale([1.2, 1.5, 0.5])\ncylinder(h=2, r=10);",
    "renders": true
  },
  {
    "animal": "jaeger",
    "openscad_code": "// Realistic Jaeger - Medium complexity\n// Size: 80mm tall, 3D printable with 1.2mm walls\n\n$fn=32;\nbody_color = \"silver\";\n\nmodule head() {\n    // Main head structure\n    difference() {\n        // Skull-like head\n        translate([0,0,10]) scale([1.2,1,1.5]) sphere(8);\n        \n        // Eye sockets\n        translate([-4,4,12]) sphere(2.5);\n        translate([4,4,12]) sphere(2.5);\n        \n        // Jaw line\n        translate([0,-8,2]) cube([14,6,6], center=true);\n    }\n    \n    // Jaw\n    translate([0,-9,2]) rotate([10,0,0]) cube([10,4,5], center=true);\n    \n    // Neck\n    translate([0,0,-2]) cylinder(h=8, r1=6, r2=4);\n}\n\nmodule torso() {\n    // Chest armor\n    difference() {\n        translate([0,0,-15]) scale([1.5,1.2,2]) sphere(12);\n        \n        // Central core\n        translate([0,0,-10]) cylinder(h=20, r=5);\n    }\n    \n    // Side panels\n    for(side=[-1,1]) {\n        translate([side*12,0,-10]) cube([4,8,20], center=true);\n    }\n    \n    // Waist\n    translate([0,0,-30]) cylinder(h=10, r=8);\n}\n\nmodule arm(side) {\n    // Shoulder\n    translate([side*15,0,-8]) rotate([0,side*15,0]) \n        cylinder(h=10, r=5);\n    \n    // Upper arm\n    translate([side*20,0,-15]) rotate([90*side,0,0])\n        cylinder(h=15, r=4);\n    \n    // Elbow joint\n    translate([side*20,side*15,-15]) sphere(3.5);\n    \n    // Forearm\n    translate([side*20,side*22,-15]) rotate([90*side,0,0])\n        cylinder(h=12, r=3.5);\n    \n    // Hand\n    translate([side*20,side*32,-15]) \n        scale([1,1.5,0.5]) sphere(4);\n    \n    // Fingers (simplified)\n    for(f=[-1,0,1]) {\n        translate([side*20,side*34+f*2,-15]) \n            scale([0.5,1.5,0.5]) sphere(1.5);\n    }\n}\n\nmodule leg(side) {\n    // Hip joint\n    translate([side*8,0,-35]) sphere(5);\n    \n    // Upper leg\n    translate([side*8,0,-45]) cylinder(h=15, r=4);\n    \n    // Knee\n    translate([side*8,0,-58]) sphere(4);\n    \n    // Lower leg\n    translate([side*8,0,-68]) cylinder(h=12, r=3.5);\n    \n    // Ankle\n    translate([side*8,0,-78]) sphere(3);\n    \n    // Foot\n    translate([side*8,side*2,-82]) \n        scale([1.5,3,0.8]) sphere(4);\n}\n\nmodule reactor_core() {\n    // Central power source\n    translate([0,0,-10]) {\n        difference() {\n            cylinder(h=5, r=6);\n            cylinder(h=6, r=4);\n        }\n        \n        // Core details\n        for(i=[0:45:315]) {\n            rotate([0,0,i]) \n                translate([5,0,-7]) cube([1,0.5,3]);\n        }\n    }\n}\n\n// Assembly\ncolor(body_color) {\n    union() {\n        head();\n        torso();\n        reactor_core();\n        \n        // Arms\n        arm(-1);\n        arm(1);\n        \n        // Legs\n        leg(-1);\n        leg(1);\n    }\n}\n\n// Base for printing stability\ntranslate([0,0,-88]) \n    cube([40,40,2], center=true);",
    "renders": true
  },
  {
    "animal": "jaguar",
    "openscad_code": "// Jaguar - Medium complexity realistic style\n// Dimensions: ~70mm long, 25mm tall, 15mm wide\n\n$fn = 32;  // Smooth curves for 3D printing\n\n// Main body module\nmodule jaguar() {\n    // Body\n    union() {\n        // Torso\n        translate([0, 0, 10])\n            scale([1.2, 0.6, 0.4])\n                sphere(r=15);\n        \n        // Hindquarters\n        translate([-20, 0, 8])\n            scale([0.8, 0.7, 0.5])\n                sphere(r=12);\n        \n        // Chest\n        translate([20, 0, 8])\n            scale([0.7, 0.6, 0.4])\n                sphere(r=12);\n    }\n    \n    // Head\n    translate([35, 0, 15])\n        rotate([0, -10, 0])\n        union() {\n            // Skull\n            scale([0.8, 0.6, 0.5])\n                sphere(r=10);\n            \n            // Snout\n            translate([5, 0, -3])\n                scale([0.4, 0.3, 0.2])\n                    sphere(r=8);\n        }\n    \n    // Legs\n    for (x = [15, -15]) {\n        for (y = [8, -8]) {\n            translate([x, y, 0])\n                leg();\n        }\n    }\n    \n    // Tail\n    translate([-30, 0, 12])\n        rotate([0, 10, 0])\n        union() {\n            for (i = [0:5:20]) {\n                translate([-i, 0, -i*0.3])\n                    scale([0.9 - i*0.02, 0.9 - i*0.02, 0.9 - i*0.02])\n                        sphere(r=4);\n            }\n        }\n    \n    // Ears\n    for (y = [6, -6]) {\n        translate([32, y, 20])\n            rotate([0, -20, 0])\n            scale([0.3, 0.2, 0.5])\n                cylinder(h=5, r1=3, r2=1);\n    }\n}\n\n// Leg module\nmodule leg() {\n    union() {\n        // Upper leg\n        translate([0, 0, 10])\n            rotate([0, 20, 0])\n            scale([0.3, 0.3, 1])\n                cylinder(h=12, r=4);\n        \n        // Lower leg\n        translate([0, 0, 2])\n            rotate([0, 20, 0])\n            scale([0.25, 0.25, 1])\n                cylinder(h=10, r=3);\n        \n        // Paw\n        translate([0, 0, 0])\n            scale([0.6, 0.6, 0.4])\n                sphere(r=3);\n    }\n}\n\n// Spots pattern module\nmodule spots() {\n    // Body spots\n    for (i = [0:30:360]) {\n        a = i + 15;\n        r = 12 + sin(i*3)*3;\n        translate([cos(a)*r, sin(a)*r, 12])\n            scale([0.8, 0.8, 0.1])\n                sphere(r=1.5);\n    }\n    \n    // Additional spots on back\n    for (i = [-15:5:15]) {\n        translate([i, 0, 16])\n            scale([0.8, 0.8, 0.1])\n                sphere(r=1.2);\n    }\n    \n    // Head spots\n    for (i = [0:45:360]) {\n        a = i;\n        r = 4 + cos(i*2);\n        translate([35 + cos(a)*r, sin(a)*r, 16])\n            scale([0.6, 0.6, 0.1])\n                sphere(r=0.8);\n    }\n}\n\n// Assembly\nunion() {\n    jaguar();\n    spots();\n}\n\n// Base for stability\ntranslate([0, 0, -1])\n    scale([1.5, 0.8, 0.1])\n        cube([60, 25, 2], center=true);",
    "renders": true
  },
  {
    "animal": "jay",
    "openscad_code": "// Jay bird model - medium complexity realistic style\n// Designed for 3D printing with no overhangs\n\n$fn = 32;\n\nmodule body() {\n    // Main body - oval shape\n    translate([0, 0, 15])\n    scale([1.2, 0.8, 1])\n    sphere(12);\n    \n    // Lower body\n    translate([0, 0, 8])\n    scale([1, 0.7, 0.8])\n    sphere(10);\n}\n\nmodule head() {\n    // Head sphere\n    translate([12, 0, 22])\n    sphere(8);\n    \n    // Crest\n    for(i = [0:30:120]) {\n        rotate([0, 0, i-60])\n        translate([12, 0, 30])\n        rotate([90, 0, 0])\n        cylinder(h=8, r1=1.5, r2=0.5);\n    }\n}\n\nmodule beak() {\n    // Upper beak\n    translate([20, 0, 22])\n    rotate([0, -20, 0])\n    cylinder(h=12, r1=4, r2=2);\n    \n    // Lower beak\n    translate([20, 0, 19])\n    rotate([0, -30, 0])\n    cylinder(h=10, r1=3, r2=1.5);\n}\n\nmodule wings() {\n    // Left wing\n    translate([-2, 8, 18])\n    rotate([0, 15, 30])\n    scale([1.2, 0.3, 0.8])\n    sphere(10);\n    \n    // Right wing\n    translate([-2, -8, 18])\n    rotate([0, 15, -30])\n    scale([1.2, 0.3, 0.8])\n    sphere(10);\n}\n\nmodule tail() {\n    // Tail feathers\n    for(i = [0:20:40]) {\n        translate([-12 - i/2, (i - 20) * 0.8, 15 - i/5])\n        rotate([0, 0, i - 20])\n        scale([3, 0.5, 0.8])\n        cube([8, 3, 2]);\n    }\n}\n\nmodule legs() {\n    // Left leg\n    translate([0, 4, 5])\n    cylinder(h=8, r=1.5);\n    \n    // Left foot\n    translate([0, 4, 0])\n    scale([1.5, 1, 0.5])\n    sphere(2);\n    \n    // Right leg\n    translate([0, -4, 5])\n    cylinder(h=8, r=1.5);\n    \n    // Right foot\n    translate([0, -4, 0])\n    scale([1.5, 1, 0.5])\n    sphere(2);\n}\n\nmodule eyes() {\n    // Left eye\n    translate([16, 3, 24])\n    color(\"black\")\n    sphere(1.5);\n    \n    // Right eye\n    translate([16, -3, 24])\n    color(\"black\")\n    sphere(1.5);\n}\n\nmodule markings() {\n    // Wing bars\n    translate([-6, 6, 18])\n    color(\"white\")\n    scale([2, 0.3, 0.2])\n    cube([8, 4, 1]);\n    \n    translate([-6, -6, 18])\n    color(\"white\")\n    scale([2, 0.3, 0.2])\n    cube([8, 4, 1]);\n    \n    // Neck stripe\n    translate([5, 0, 20])\n    color(\"black\")\n    rotate([90, 0, 0])\n    cylinder(h=12, r=1.5);\n}\n\n// Assemble the bird\nunion() {\n    body();\n    head();\n    beak();\n    wings();\n    tail();\n    legs();\n}\n\neyes();\nmarkings();",
    "renders": true
  },
  {
    "animal": "jellyfish",
    "openscad_code": "// Jellyfish OpenSCAD Model - Realistic Style, Medium Complexity\n// Size: ~70mm bell diameter, 3D printable\n\n// Parameters\n$fn = 32;\nbell_diameter = 70;\nbell_height = 40;\ntentacle_length = 35;\nwall_thickness = 2;\n\n// Main bell with realistic dome shape\nmodule bell() {\n    // Outer bell\n    difference() {\n        // Main dome\n        scale([1, 1, 0.8])\n        sphere(d = bell_diameter);\n        \n        // Hollow interior\n        translate([0, 0, -wall_thickness])\n        scale([1, 1, 0.75])\n        sphere(d = bell_diameter - wall_thickness*2);\n    }\n    \n    // Rim detail for realistic edge\n    translate([0, 0, -bell_height/2 + 5])\n    rotate_extrude()\n    translate([bell_diameter/2 - 5, 0, 0])\n    circle(r = 3);\n}\n\n// Oral arms (frilly structures under bell)\nmodule oral_arms() {\n    for(i = [0:45:315]) {\n        rotate([0, 0, i])\n        translate([0, bell_diameter/4, -bell_height/2 + 2])\n        rotate([90, 0, 0])\n        linear_extrude(height = tentacle_length/2, twist = 180)\n        offset(r = 2)\n        offset(r = -1.5)\n        circle(d = 12);\n    }\n}\n\n// Tentacles with realistic tapering\nmodule tentacle() {\n    // Single curved tentacle\n    hull() {\n        translate([0, 0, 0])\n        sphere(d = 1.5);\n        translate([0, 5, -5])\n        sphere(d = 1.2);\n        translate([0, 10, -12])\n        sphere(d = 1.0);\n        translate([0, 15, -20])\n        sphere(d = 0.8);\n        translate([0, 20, -30])\n        sphere(d = 0.6);\n    }\n}\n\n// Tentacle array\nmodule tentacles() {\n    // Inner ring of tentacles\n    for(i = [0:30:359]) {\n        rotate([0, 0, i + 15])\n        translate([bell_diameter/3, 0, -bell_height/2])\n        tentacle();\n    }\n    \n    // Outer ring of tentacles\n    for(i = [0:20:359]) {\n        rotate([0, 0, i])\n        translate([bell_diameter/2.2, 0, -bell_height/2])\n        tentacle();\n    }\n}\n\n// Gastrovascular canals (radial pattern on bell)\nmodule canals() {\n    for(i = [0:45:315]) {\n        rotate([0, 0, i + 22.5])\n        translate([0, 0, -bell_height/4])\n        scale([1, 1, 0.5])\n        cylinder(h = bell_height/1.5, r1 = 1, r2 = 0.5);\n    }\n}\n\n// Central mouth structure\nmodule mouth() {\n    translate([0, 0, -bell_height/2 + 1])\n    cylinder(h = 5, r1 = 8, r2 = 5);\n}\n\n// Main assembly\nunion() {\n    // Main bell\n    bell();\n    \n    // Internal structures\n    translate([0, 0, 5])\n    canals();\n    \n    // Oral arms\n    oral_arms();\n    \n    // Mouth\n    mouth();\n    \n    // Tentacles\n    tentacles();\n}",
    "renders": true
  },
  {
    "animal": "jerboa",
    "openscad_code": "// Jerboa model - medium complexity realistic style\n// Overall size: ~80mm in length\n\n$fn = 32;\n\nmodule body() {\n    // Main torso - elongated oval shape\n    union() {\n        // Upper body\n        translate([0, 0, 10])\n            scale([1.2, 0.8, 1])\n            sphere(15);\n        \n        // Lower abdomen\n        translate([0, 0, 5])\n            scale([1.3, 0.9, 0.7])\n            sphere(12);\n        \n        // Rump\n        translate([-15, 0, 8])\n            scale([0.8, 0.9, 0.8])\n            sphere(10);\n    }\n}\n\nmodule head() {\n    // Head with snout\n    union() {\n        // Main head\n        translate([20, 0, 18])\n            scale([0.9, 0.8, 1])\n            sphere(8);\n        \n        // Snout\n        translate([28, 0, 17])\n            scale([1.5, 0.8, 0.6])\n            sphere(5);\n        \n        // Ears - large and rounded\n        // Left ear\n        translate([18, -6, 25])\n            rotate([0, -20, 0])\n            scale([0.3, 1, 2])\n            cylinder(h=12, r1=4, r2=2);\n        \n        // Right ear\n        translate([18, 6, 25])\n            rotate([0, 20, 0])\n            scale([0.3, 1, 2])\n            cylinder(h=12, r1=4, r2=2);\n        \n        // Eyes\n        // Left eye\n        translate([24, -4, 20])\n            sphere(2);\n        \n        // Right eye\n        translate([24, 4, 20])\n            sphere(2);\n    }\n}\n\nmodule tail() {\n    // Long tufted tail\n    hull() {\n        translate([-25, 0, 12])\n            sphere(3);\n        translate([-45, 0, 20])\n            sphere(2);\n    }\n    \n    // Tail tuft\n    translate([-48, 0, 20])\n        scale([1, 1, 1.5])\n        sphere(5);\n}\n\nmodule legs() {\n    // Hind legs - very long\n    module hind_leg(side) {\n        translate([side * 5, 0, 5]) {\n            // Upper leg\n            rotate([0, 0, side * 15])\n            translate([-5, 0, 0])\n                scale([0.5, 0.5, 2])\n                cylinder(h=20, r=3);\n            \n            // Lower leg\n            translate([-8, 0, -18])\n                rotate([30, 0, 0])\n                scale([0.4, 0.4, 1.8])\n                cylinder(h=25, r=2.5);\n            \n            // Foot\n            translate([-8, 0, -35])\n                rotate([60, 0, 0])\n                scale([1.5, 0.8, 0.5])\n                cylinder(h=8, r=3);\n        }\n    }\n    \n    // Front legs - shorter\n    module front_leg(side) {\n        translate([15, side * 6, 5]) {\n            // Upper arm\n            rotate([0, 0, side * -20])\n            translate([0, 0, -5])\n                scale([0.4, 0.4, 1.2])\n                cylinder(h=8, r=2);\n            \n            // Lower arm\n            translate([0, 0, -10])\n                rotate([10, 0, 0])\n                scale([0.3, 0.3, 1])\n                cylinder(h=8, r=1.5);\n            \n            // Paw\n            translate([0, 0, -15])\n                rotate([30, 0, 0])\n                scale([0.8, 0.6, 0.4])\n                cylinder(h=4, r=1.8);\n        }\n    }\n    \n    // Create all legs\n    hind_leg(1);\n    hind_leg(-1);\n    front_leg(1);\n    front_leg(-1);\n}\n\n// Assemble the jerboa\nunion() {\n    body();\n    head();\n    tail();\n    legs();\n}\n\n// Add small whiskers for detail\nfor(i = [1:5]) {\n    // Left whiskers\n    translate([28, -4-i, 17])\n        rotate([0, 90, 0])\n        cylinder(h=8, r=0.3);\n    \n    // Right whiskers\n    translate([28, 4+i, 17])\n        rotate([0, 90, 0])\n        cylinder(h=8, r=0.3);\n}",
    "renders": true
  },
  {
    "animal": "kagu",
    "openscad_code": "// Kagu - Medium Complexity Realistic Style\n// Approx 80mm tall, 3D printable with minimal supports\n\nmodule body() {\n    // Main body - elongated oval\n    translate([0, 0, 25])\n        scale([1.2, 0.8, 1])\n        sphere(r=20, $fn=20);\n    \n    // Chest protrusion\n    translate([0, -5, 15])\n        rotate([20, 0, 0])\n        scale([0.8, 0.6, 0.4])\n        sphere(r=15, $fn=16);\n}\n\nmodule head() {\n    // Head - slightly flattened sphere\n    translate([0, -25, 45])\n        scale([0.7, 0.9, 0.6])\n        sphere(r=15, $fn=20);\n    \n    // Crest feathers\n    for(i=[-15:5:15]) {\n        translate([i/3, -35, 45 + abs(i)/3])\n            rotate([0, i/2, 0])\n            cylinder(h=15, r1=2, r2=0.5, $fn=8);\n    }\n}\n\nmodule beak() {\n    // Upper beak\n    translate([0, -35, 42])\n        rotate([-20, 0, 0])\n        scale([1, 2, 0.8])\n        cylinder(h=15, r1=5, r2=2, $fn=8);\n    \n    // Lower beak\n    translate([0, -35, 39])\n        rotate([-30, 0, 0])\n        scale([0.8, 1.5, 0.6])\n        cylinder(h=12, r1=4, r2=1.5, $fn=8);\n}\n\nmodule eye() {\n    // Left eye\n    translate([-7, -28, 45])\n        sphere(r=3, $fn=12);\n    \n    // Right eye\n    translate([7, -28, 45])\n        sphere(r=3, $fn=12);\n}\n\nmodule wing() {\n    // Left wing\n    translate([-15, 0, 30])\n        rotate([0, 0, 20])\n        scale([0.3, 1.5, 0.8])\n        cylinder(h=30, r1=10, r2=5, $fn=8);\n    \n    // Right wing\n    mirror([1, 0, 0])\n        translate([-15, 0, 30])\n        rotate([0, 0, 20])\n        scale([0.3, 1.5, 0.8])\n        cylinder(h=30, r1=10, r2=5, $fn=8);\n}\n\nmodule leg() {\n    // Left leg\n    translate([-8, 10, 5])\n        cylinder(h=20, r=2.5, $fn=8);\n    \n    // Left foot\n    translate([-12, 15, 0])\n        scale([2, 1, 0.5])\n        sphere(r=5, $fn=12);\n    \n    // Right leg\n    translate([8, 10, 5])\n        cylinder(h=20, r=2.5, $fn=8);\n    \n    // Right foot\n    translate([12, 15, 0])\n        scale([2, 1, 0.5])\n        sphere(r=5, $fn=12);\n}\n\nmodule tail() {\n    // Tail feathers\n    for(i=[-2:1:2]) {\n        translate([i*3, 20, 30 - abs(i)*2])\n            rotate([0, 0, -i*5])\n            scale([0.3, 1, 0.1])\n            cube([8, 20, 1]);\n    }\n}\n\n// Main assembly\nunion() {\n    body();\n    head();\n    beak();\n    color(\"black\") eye();\n    wing();\n    leg();\n    tail();\n}",
    "renders": true
  },
  {
    "animal": "kakapo",
    "openscad_code": "// Kakapo (medium-complexity realistic style)\n// Estimated print volume ~60 mm tall\n\n$fn = 36; // smooth curves\n\n// Overall scale\nscale(0.15) {\n\n    // Body core\n    union() {\n        // Main torso\n        translate([0, 0, 20])\n            rotate([0, 15, 0])\n            scale([1.2, 1, 1])\n            sphere(40);\n\n        // Belly bulge\n        translate([0, -15, 15])\n            sphere(35);\n\n        // Chest forward\n        translate([20, 0, 25])\n            rotate([0, 20, 0])\n            sphere(30);\n    }\n\n    // Wing modules\n    module wing(side) {\n        mirror([side, 0, 0]) {\n            translate([25, 0, 35])\n                rotate([0, -20, 25 * side])\n                scale([0.7, 2.2, 0.3])\n                sphere(15);\n\n            // Secondaries\n            for (i = [-1:1]) {\n                translate([28 + i * 4, 0, 32 + i * 3])\n                    rotate([0, -20 + i * 5, 25 * side])\n                    scale([0.5, 1.8, 0.2])\n                    sphere(12);\n            }\n        }\n    }\n\n    wing(1);\n    wing(-1);\n\n    // Tail fan\n    for (a = [-30:15:30]) {\n        rotate([0, 0, a])\n            translate([0, -40, 25])\n                rotate([15 + abs(a) * 0.5, 0, 0])\n                scale([0.4, 1.6, 0.15])\n                sphere(12);\n    }\n\n    // Head assembly\n    translate([30, 0, 50])\n    union() {\n        // Skull\n        sphere(18);\n\n        // Beak\n        translate([18, 0, 0])\n            rotate([0, -10, 0])\n            scale([2.5, 1, 1])\n            cylinder(15, 4, 8);\n\n        // Facial disk\n        translate([10, 0, 0])\n            rotate([0, -10, 0])\n            scale([1.8, 1.2, 0.6])\n            sphere(14);\n\n        // Eyes\n        for (s = [-1:2:1]) {\n            translate([12, s * 9, 4])\n                sphere(5);\n            translate([14, s * 9, 4])\n                sphere(3);\n        }\n    }\n\n    // Legs and feet\n    module leg(side) {\n        translate([10, side * 15, 0])\n        union() {\n            // Thigh\n            translate([0, 0, 10])\n                rotate([30, 0, side * 10])\n                cylinder(25, 6, 5);\n\n            // Tibia\n            translate([0, 0, 0])\n                rotate([80, 0, side * 5])\n                cylinder(20, 5, 4);\n\n            // Foot\n            translate([0, side * 12, -15])\n                rotate([90, 0, 0])\n                scale([1.2, 0.8, 0.5])\n                sphere(10);\n\n            // Toes\n            for (t = [-1:1:1]) {\n                translate([t * 6, side * 17, -15])\n                    rotate([90, 0, t * 15])\n                    scale([0.3, 0.3, 1.2])\n                    cylinder(8, 2, 1.5);\n            }\n        }\n    }\n\n    leg(1);\n    leg(-1);\n}",
    "renders": true
  },
  {
    "animal": "kangaroo",
    "openscad_code": "// Realistic Kangaroo - Medium Complexity\n// Designed for 3D printing, ~75mm tall\n\n$fn = 32;\n\nmodule kangaroo() {\n    // Main body - oval shape\n    translate([0, 0, 35])\n    scale([1.2, 0.7, 1.5])\n    sphere(12);\n\n    // Chest\n    translate([0, 8, 25])\n    scale([0.8, 0.6, 1.2])\n    sphere(10);\n\n    // Head\n    translate([0, 12, 50])\n    union() {\n        // Main head shape\n        scale([0.8, 0.9, 1])\n        sphere(8);\n        \n        // Snout\n        translate([0, 9, -2])\n        scale([0.6, 0.7, 0.8])\n        sphere(6);\n    }\n\n    // Ears\n    for(side = [-1, 1]) {\n        translate([side * 5, 12, 54])\n        rotate([0, side * 20, 0])\n        scale([0.3, 0.1, 1])\n        cylinder(h=8, r1=3, r2=2);\n    }\n\n    // Eyes\n    for(side = [-1, 1]) {\n        translate([side * 2.5, 14, 52])\n        sphere(1);\n    }\n\n    // Nose\n    translate([0, 15, 48])\n    sphere(1.5);\n\n    // Arms\n    for(side = [-1, 1]) {\n        translate([side * 8, 6, 35])\n        rotate([0, side * 20, -20])\n        scale([0.4, 0.4, 1])\n        cylinder(h=12, r=2.5);\n        \n        // Hands\n        translate([side * 10, 4, 23])\n        sphere(2.5);\n    }\n\n    // Tail\n    translate([0, -12, 20])\n    rotate([20, 0, 0])\n    scale([0.8, 0.8, 3])\n    cylinder(h=15, r1=5, r2=3);\n\n    // Legs\n    for(side = [-1, 1]) {\n        // Upper leg\n        translate([side * 6, -6, 25])\n        rotate([0, 0, side * 30])\n        scale([0.6, 0.6, 1.5])\n        cylinder(h=10, r=3);\n        \n        // Lower leg\n        translate([side * 8, -12, 15])\n        rotate([30, 0, side * 20])\n        scale([0.5, 0.5, 1.3])\n        cylinder(h=10, r=2.5);\n        \n        // Foot\n        translate([side * 10, -18, 5])\n        rotate([0, 0, side * 30])\n        scale([2, 0.8, 0.3])\n        cube([8, 3, 2]);\n    }\n\n    // Pouch\n    difference() {\n        translate([0, 0, 30])\n        scale([0.8, 0.6, 0.8])\n        sphere(8);\n        \n        translate([0, -2, 30])\n        scale([0.7, 0.5, 0.7])\n        sphere(7.5);\n    }\n\n    // Feet details - toes\n    for(side = [-1, 1]) {\n        for(toe = [0, 2, 4]) {\n            translate([side * (10 + toe/2), -19, 4])\n            sphere(1);\n        }\n    }\n}\n\n// Scale to 75mm height\nscale(0.5)\nkangaroo();",
    "renders": true
  },
  {
    "animal": "katydid",
    "openscad_code": "// Katydid - Realistic style, medium complexity\n// Designed for 3D printing, approximately 70mm long\n\n$fn = 32;\n\n// Main parameters\nbody_length = 40;\nbody_height = 15;\nbody_width = 12;\n\n// Head parameters\nhead_length = 12;\nhead_height = 10;\nhead_width = 10;\n\n// Leg parameters\nleg_thickness = 2;\nfront_leg_length = 25;\nmiddle_leg_length = 30;\nhind_leg_length = 35;\n\n// Wing parameters\nwing_length = 35;\nwing_width = 15;\n\n// Antenna parameters\nantenna_length = 30;\nantenna_thickness = 1;\n\nmodule katydid() {\n    // Body\n    union() {\n        // Main thorax\n        color(\"green\")\n        translate([0, 0, body_height/2])\n        scale([1.2, 0.8, 1])\n        sphere(d=body_height);\n\n        // Abdomen\n        color(\"darkgreen\")\n        translate([-body_length/2, 0, body_height/2])\n        scale([1.5, 1, 0.8])\n        sphere(d=body_height);\n\n        // Head\n        color(\"green\")\n        translate([body_length/2 + head_length/2, 0, body_height/2])\n        scale([1, 1, 1.1])\n        sphere(d=head_height);\n\n        // Eyes\n        color(\"black\")\n        translate([body_length/2 + head_length/2 + 2, head_width/3, body_height/2])\n        sphere(d=4);\n\n        color(\"black\")\n        translate([body_length/2 + head_length/2 + 2, -head_width/3, body_height/2])\n        sphere(d=4);\n    }\n\n    // Antennae\n    color(\"darkgreen\")\n    translate([body_length/2 + head_length/2 + 2, head_width/3, body_height/2 + 2])\n    rotate([0, 30, 20])\n    cylinder(h=antenna_length, r=antenna_thickness);\n\n    color(\"darkgreen\")\n    translate([body_length/2 + head_length/2 + 2, -head_width/3, body_height/2 + 2])\n    rotate([0, 30, -20])\n    cylinder(h=antenna_length, r=antenna_thickness);\n\n    // Wings (elytra)\n    color(\"lime\")\n    translate([-body_length/4, 0, body_height/2 + 3])\n    rotate([0, 0, -10])\n    scale([1.2, 0.3, 1])\n    cube([wing_length, wing_width, 2]);\n\n    // Legs\n    module leg(length, angle, z_offset) {\n        color(\"green\")\n        translate([body_length/4, 0, z_offset])\n        rotate([0, 0, angle])\n        cylinder(h=length/3, r=leg_thickness);\n\n        translate([body_length/4 + length/3, 0, z_offset])\n        rotate([0, 45, angle])\n        cylinder(h=length/3, r=leg_thickness);\n\n        translate([body_length/4 + length/3 + length/3*cos(45), 0, z_offset - length/3*sin(45)])\n        rotate([0, 90, angle])\n        cylinder(h=length/3, r=leg_thickness);\n    }\n\n    // Front legs\n    leg(front_leg_length, 30, body_height/2 - 2);\n    leg(front_leg_length, -30, body_height/2 - 2);\n\n    // Middle legs\n    leg(middle_leg_length, 45, body_height/2 - 4);\n    leg(middle_leg_length, -45, body_height/2 - 4);\n\n    // Hind legs\n    leg(hind_leg_length, 60, body_height/2 - 6);\n    leg(hind_leg_length, -60, body_height/2 - 6);\n}\n\n// Main assembly\nkatydid();",
    "renders": true
  },
  {
    "animal": "kayak",
    "openscad_code": "// Realistic 3D-printable kayak, medium complexity\n// Overall length ~90 mm, width ~25 mm, height ~15 mm\n\n$fn = 36;  // Smooth curves\n\nmodule hull_half() {\n    // Main hull body – half to allow mirroring later\n    hull() {\n        // Bow bulb\n        translate([  0, 0, 0 ]) scale([1.0, 0.7, 0.6]) sphere(d=20);\n        // Mid-torso\n        translate([ 35, 0, 0 ]) scale([1, 1, 0.5]) sphere(d=22);\n        // Stern bulb\n        translate([ 80, 0, 0 ]) scale([1.1, 0.7, 0.6]) sphere(d=18);\n    }\n}\n\nmodule cockpit_cut() {\n    // Cockpit opening\n    hull() {\n        translate([ 40, 0, 2 ]) scale([1, 0.6, 1]) cylinder(h=20, d=14);\n        translate([ 55, 0, 2 ]) scale([1, 0.6, 1]) cylinder(h=20, d=12);\n    }\n}\n\nmodule seat() {\n    // Simple seat inside cockpit\n    translate([ 47, 0, 1.5 ]) rotate([ 0, 90, 0 ]) cylinder(h=15, d=1.5);\n}\n\nmodule deck_ridge() {\n    // Raised ridge along centerline\n    for(i = [5:10:75]) {\n        hull() {\n            translate([ i, 0, 7 ]) sphere(d=5);\n            translate([ i+5, 0, 7 ]) sphere(d=5);\n        }\n    }\n}\n\nmodule skeg() {\n    // Small stern skeg for tracking\n    translate([ 85, 0, -2 ]) rotate([ 0, 90, 0 ]) cylinder(h=6, d1=2, d2=1);\n}\n\nmodule grab_loop(posX) {\n    // Bow & stern grab loops\n    difference() {\n        translate([ posX, 0, 9 ]) rotate([ 0, 90, 0 ]) cylinder(h=8, d=2);\n        translate([ posX, 0, 9 ]) rotate([ 0, 90, 0 ]) cylinder(h=8, d=1.2);\n    }\n}\n\n// Assemble full kayak\ndifference() {\n    union() {\n        // Full hull shell (1.2 mm wall)\n        difference() {\n            hull_half();\n            scale([0.94, 0.94, 0.94]) hull_half();\n        }\n        mirror([0,1,0]) hull_half();\n        mirror([0,1,0]) scale([0.94, 0.94, 0.94]) hull_half();\n\n        deck_ridge();\n        seat();\n        skeg();\n        grab_loop(3);\n        grab_loop(87);\n    }\n    // Remove cockpit\n    cockpit_cut();\n    mirror([0,1,0]) cockpit_cut();\n}",
    "renders": true
  },
  {
    "animal": "kestrel",
    "openscad_code": "// Kestrel model - realistic style, medium complexity\n// Dimensions in mm, printable without supports\n\n// Overall scale factor\nscale_factor = 0.4;\n\nmodule body() {\n    // Main body - elongated sphere\n    translate([0, 0, 6]) {\n        scale([1.2, 1, 1]) sphere(8, $fn=20);\n    }\n    \n    // Chest bulge\n    translate([0, 0, 3]) {\n        scale([0.8, 0.7, 0.6]) sphere(6, $fn=16);\n    }\n}\n\nmodule head() {\n    // Head sphere\n    translate([10, 0, 9]) {\n        sphere(5, $fn=16);\n    }\n    \n    // Beak\n    translate([14.5, 0, 9]) {\n        rotate([0, -10, 0]) {\n            scale([1.2, 0.4, 0.3]) cylinder(h=3, r1=2, r2=0, $fn=8);\n        }\n    }\n    \n    // Eye sockets\n    translate([11.5, 2.5, 10]) {\n        sphere(0.8, $fn=8);\n    }\n    translate([11.5, -2.5, 10]) {\n        sphere(0.8, $fn=8);\n    }\n    \n    // Eye balls\n    translate([11.5, 2.5, 10]) {\n        sphere(0.5, $fn=6);\n    }\n    translate([11.5, -2.5, 10]) {\n        sphere(0.5, $fn=6);\n    }\n}\n\nmodule wings() {\n    // Left wing\n    translate([-2, 0, 7]) {\n        rotate([0, 0, 20]) {\n            scale([1.5, 0.15, 0.5]) cube([10, 15, 3]);\n        }\n    }\n    \n    // Right wing\n    mirror([0, 1, 0]) {\n        translate([-2, 0, 7]) {\n            rotate([0, 0, 20]) {\n                scale([1.5, 0.15, 0.5]) cube([10, 15, 3]);\n            }\n        }\n    }\n    \n    // Wing tips\n    translate([-8, 7, 7]) {\n        rotate([0, 0, -30]) {\n            cube([3, 2, 1]);\n        }\n    }\n    \n    mirror([0, 1, 0]) {\n        translate([-8, 7, 7]) {\n            rotate([0, 0, -30]) {\n                cube([3, 2, 1]);\n            }\n        }\n    }\n}\n\nmodule tail() {\n    // Tail feathers\n    translate([-10, 0, 6]) {\n        rotate([0, 10, 0]) {\n            scale([1, 0.1, 0.8]) cube([8, 12, 4]);\n        }\n    }\n    \n    // Tail detail\n    for(i = [-5:2:5]) {\n        translate([-9, i, 6]) {\n            cube([6, 0.5, 3]);\n        }\n    }\n}\n\nmodule legs() {\n    // Left leg\n    translate([2, 2.5, 0]) {\n        cylinder(h=6, r=1, $fn=12);\n    }\n    \n    // Left foot\n    translate([2, 2.5, 0]) {\n        rotate([90, 0, 0]) {\n            scale([1, 0.3, 0.3]) cylinder(h=3, r=1.5, $fn=8);\n        }\n    }\n    \n    // Right leg\n    translate([2, -2.5, 0]) {\n        cylinder(h=6, r=1, $fn=12);\n    }\n    \n    // Right foot\n    translate([2, -2.5, 0]) {\n        rotate([90, 0, 0]) {\n            scale([1, 0.3, 0.3]) cylinder(h=3, r=1.5, $fn=8);\n        }\n    }\n}\n\n// Assemble the kestrel\nscale([scale_factor, scale_factor, scale_factor]) {\n    union() {\n        body();\n        head();\n        wings();\n        tail();\n        legs();\n    }\n}",
    "renders": true
  },
  {
    "animal": "killdeer",
    "openscad_code": "// Killdeer Bird - Realistic Medium Complexity\n// Designed for 3D printing - no overhangs\n\nmodule killdeer() {\n    // Body - main oval shape\n    translate([0, 0, 8]) \n        scale([1.3, 0.8, 0.6]) \n        sphere(r=15, $fn=20);\n    \n    // Neck connector\n    translate([0, 10, 12]) \n        rotate([15, 0, 0])\n        cylinder(h=8, r1=6, r2=4, $fn=12);\n    \n    // Head\n    translate([0, 20, 16]) \n        scale([0.8, 0.7, 0.7]) \n        sphere(r=8, $fn=16);\n    \n    // Beak\n    translate([0, 28, 15]) \n        rotate([30, 0, 0])\n        cylinder(h=6, r1=1.5, r2=0.5, $fn=8);\n    \n    // Eye left\n    translate([-3, 22, 19]) \n        sphere(r=1.5, $fn=8);\n    \n    // Eye right\n    translate([3, 22, 19]) \n        sphere(r=1.5, $fn=8);\n    \n    // Tail feathers\n    for(i = [-1, 0, 1]) {\n        translate([-i*2, -16, 8 + abs(i)*2]) \n            rotate([0, 0, i*10])\n            scale([0.3, 1.5, 0.1]) \n            cube([8, 12, 2]);\n    }\n    \n    // Wings\n    // Left wing\n    translate([-12, 0, 10]) \n        rotate([-10, 0, -20])\n        scale([0.2, 1.2, 0.8]) \n        cube([15, 20, 3]);\n    \n    // Right wing\n    translate([12, 0, 10]) \n        rotate([-10, 0, 20])\n        scale([0.2, 1.2, 0.8]) \n        cube([15, 20, 3]);\n    \n    // Legs\n    // Left leg\n    translate([-5, -5, 0]) {\n        cylinder(h=10, r=1.5, $fn=8);\n        translate([0, 0, 0]) \n            rotate([0, 0, -30])\n            scale([0.8, 0.15, 0.15]) \n            cube([8, 3, 2]);\n    }\n    \n    // Right leg\n    translate([5, -5, 0]) {\n        cylinder(h=10, r=1.5, $fn=8);\n        translate([0, 0, 0]) \n            rotate([0, 0, 30])\n            scale([0.8, 0.15, 0.15]) \n            cube([8, 3, 2]);\n    }\n    \n    // Chest pattern - two black bands\n    translate([0, 5, 11]) \n        rotate([90, 0, 0])\n        difference() {\n            cylinder(h=1, r=10, $fn=20);\n            translate([0, 0, -0.5]) \n                cylinder(h=2, r=7, $fn=20);\n        }\n    \n    translate([0, 2, 11]) \n        rotate([90, 0, 0])\n        difference() {\n            cylinder(h=1, r=8, $fn=20);\n            translate([0, 0, -0.5]) \n                cylinder(h=2, r=5, $fn=20);\n        }\n}\n\n// Create the bird\nkilldeer();",
    "renders": true
  },
  {
    "animal": "kingbird",
    "openscad_code": "// Kingbird (medium complexity, realistic style)\n// Approx 70mm wingtip-to-wingtip\n\n$fn = 32;  // Smooth curves for printing\n\n// Main body module\nmodule body() {\n    // Torso - elongated teardrop\n    translate([0, 0, 5])\n        scale([1.2, 0.7, 1])\n        rotate([90, 0, 0])\n        cylinder(h=25, r1=12, r2=7);\n    \n    // Chest bulge\n    translate([2, 0, 5])\n        sphere(10);\n    \n    // Tail base\n    translate([-20, 0, 5])\n        rotate([0, 0, -10])\n        scale([1.5, 0.3, 0.2])\n        cylinder(h=20, r1=8, r2=3);\n}\n\n// Head module\nmodule head() {\n    // Main head sphere\n    translate([15, 0, 18])\n        sphere(9);\n    \n    // Beak\n    translate([23, 0, 18])\n        rotate([0, -15, 0])\n        cylinder(h=12, r1=4, r2=1);\n    \n    // Crest\n    translate([14, 0, 27])\n        rotate([30, 0, 0])\n        scale([0.3, 1, 0.8])\n        cylinder(h=8, r=3);\n    \n    // Eye\n    translate([17, 4, 19])\n        sphere(1.5);\n    \n    // Eye\n    translate([17, -4, 19])\n        sphere(1.5);\n}\n\n// Wing module\nmodule wing(side) {\n    // Main wing\n    translate([0, side*12, 12])\n        rotate([0, 0, side*15])\n        rotate([0, side*10, 0])\n        scale([1, 0.2, 1])\n        cylinder(h=30, r1=8, r2=4);\n    \n    // Wing tip\n    translate([-15, side*20, 12])\n        rotate([0, 0, side*45])\n        scale([0.5, 0.15, 1])\n        cylinder(h=10, r1=4, r2=1);\n    \n    // Primary feathers (3)\n    for(i=[0:2]) {\n        translate([-10-i*3, side*(15+i*2), 12])\n            rotate([0, 0, side*(30+i*5)])\n            rotate([0, side*10, 0])\n            scale([0.3, 0.1, 0.8])\n            cylinder(h=8, r1=2, r2=1);\n    }\n}\n\n// Leg module\nmodule leg(side) {\n    // Upper leg\n    translate([-5, side*5, 2])\n        rotate([45, 0, side*15])\n        cylinder(h=8, r=2);\n    \n    // Lower leg\n    translate([-8, side*7, -3])\n        rotate([90, 0, 0])\n        cylinder(h=10, r=1.5);\n    \n    // Foot\n    translate([-8, side*7, -3])\n        union() {\n            // Center toe\n            translate([0, 0, -2])\n                rotate([0, side*20, 0])\n                cylinder(h=6, r=1);\n            \n            // Side toes\n            translate([0, side*1.5, -1])\n                rotate([0, side*30, 0])\n                cylinder(h=4, r=0.8);\n            \n            translate([0, -side*1.5, -1])\n                rotate([0, side*30, 0])\n                cylinder(h=4, r=0.8);\n        }\n}\n\n// Tail module\nmodule tail() {\n    // Central tail feathers\n    translate([-25, 0, 8])\n        rotate([0, -10, 0])\n        scale([1, 0.3, 2])\n        cylinder(h=25, r1=3, r2=1);\n    \n    // Outer tail feathers\n    for(side=[-1, 1]) {\n        translate([-22, side*4, 7])\n            rotate([0, -10, side*15])\n            scale([0.8, 0.2, 1.5])\n            cylinder(h=20, r1=2, r2=0.5);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    wing(1);   // Right wing\n    wing(-1);  // Left wing\n    leg(1);    // Right leg\n    leg(-1);   // Left leg\n    tail();\n}",
    "renders": true
  },
  {
    "animal": "kingfisher",
    "openscad_code": "// Kingfisher OpenSCAD Model - Realistic Medium Complexity\n// Size: ~80mm length\n\n$fn = 64;\nbody_length = 80;\nwing_width = 30;\nbody_height = 25;\nhead_diameter = 18;\nbeak_length = 28;\n\nmodule body() {\n    // Main body - elongated ellipsoid\n    scale([1.6, 1, 1])\n    rotate([0, 90, 0])\n    cylinder(h = body_length * 0.7, r1 = body_height/2, r2 = body_height/3);\n    \n    // Tail section\n    translate([body_length * 0.3, 0, 0])\n    rotate([0, 90, 0])\n    cylinder(h = body_length * 0.2, r1 = body_height/3, r2 = body_height/6);\n}\n\nmodule head() {\n    // Head sphere\n    translate([-body_length * 0.35, 0, body_height * 0.3])\n    sphere(d = head_diameter);\n    \n    // Crest feathers\n    for(i = [0:2]) {\n        rotate([0, 0, i * 30 - 30])\n        translate([-body_length * 0.35, 0, body_height * 0.3 + head_diameter/2])\n        rotate([90, 0, 0])\n        cylinder(h = 8, r1 = 2, r2 = 1);\n    }\n}\n\nmodule beak() {\n    // Upper beak\n    translate([-body_length * 0.45, 0, body_height * 0.3])\n    rotate([0, 90, 0])\n    cylinder(h = beak_length, r1 = head_diameter/8, r2 = 0.5);\n    \n    // Lower beak\n    translate([-body_length * 0.44, 0, body_height * 0.25])\n    rotate([0, 90, 0])\n    cylinder(h = beak_length * 0.9, r1 = head_diameter/10, r2 = 0.3);\n}\n\nmodule wings() {\n    // Left wing\n    translate([0, body_height/2, body_height * 0.1])\n    rotate([0, 0, 30])\n    scale([1, 2, 0.2])\n    sphere(d = wing_width);\n    \n    // Right wing\n    translate([0, -body_height/2, body_height * 0.1])\n    rotate([0, 0, -30])\n    scale([1, 2, 0.2])\n    sphere(d = wing_width);\n    \n    // Wing detail\n    for(i = [0:4]) {\n        // Left wing feathers\n        translate([-i * 5, body_height/2 + 5 + i*2, body_height * 0.05])\n        rotate([0, 20 - i*5, 0])\n        cube([8, 1, 3]);\n        \n        // Right wing feathers\n        translate([-i * 5, -body_height/2 - 5 - i*2, body_height * 0.05])\n        rotate([0, 20 - i*5, 0])\n        cube([8, 1, 3]);\n    }\n}\n\nmodule tail() {\n    // Tail feathers\n    for(i = [-1:1]) {\n        translate([body_length * 0.4, i * 5, -body_height * 0.1])\n        rotate([i * 10, 0, 0])\n        cube([15, 2, 1]);\n    }\n}\n\nmodule legs() {\n    // Left leg\n    translate([-body_length * 0.1, body_height/4, -body_height * 0.5])\n    cylinder(h = 8, r = 2);\n    \n    // Left foot\n    translate([-body_length * 0.1, body_height/4, -body_height * 0.5 - 8])\n    cube([6, 2, 2]);\n    \n    // Right leg\n    translate([-body_length * 0.1, -body_height/4, -body_height * 0.5])\n    cylinder(h = 8, r = 2);\n    \n    // Right foot\n    translate([-body_length * 0.1, -body_height/4, -body_height * 0.5 - 8])\n    cube([6, 2, 2]);\n}\n\nmodule eyes() {\n    // Left eye\n    translate([-body_length * 0.35 - head_diameter/2 + 2, 5, body_height * 0.35])\n    sphere(d = 2);\n    \n    // Right eye\n    translate([-body_length * 0.35 - head_diameter/2 + 2, -5, body_height * 0.35])\n    sphere(d = 2);\n}\n\nunion() {\n    body();\n    head();\n    beak();\n    wings();\n    tail();\n    legs();\n    eyes();\n}",
    "renders": true
  },
  {
    "animal": "kinkajou",
    "openscad_code": "// Kinkajou - Realistic Medium Complexity\n// Overall size ~80mm length\n\n// Body parameters\nbody_length = 40;\nbody_width = 25;\nbody_height = 30;\n\nmodule head() {\n    // Main head sphere\n    translate([body_length/2 + 8, 0, body_height/2 + 5]) {\n        difference() {\n            sphere(12, $fn=32);\n            \n            // Snout elongation\n            translate([5, 0, -2]) {\n                scale([1.3, 0.8, 0.8]) sphere(8, $fn=16);\n            }\n        }\n        \n        // Eyes\n        for (side = [-1, 1]) {\n            translate([4, side * 5, 3]) {\n                color(\"black\") sphere(2, $fn=16);\n            }\n        }\n        \n        // Ears\n        for (side = [-1, 1]) {\n            translate([-2, side * 10, 6]) {\n                rotate([0, 30 * side, 0]) {\n                    scale([0.7, 1, 0.3]) sphere(5, $fn=16);\n                }\n            }\n        }\n        \n        // Nose\n        translate([11, 0, -1]) {\n            color(\"black\") sphere(1.5, $fn=16);\n        }\n    }\n}\n\nmodule tail() {\n    // Curled tail\n    for (i = [0:5:180]) {\n        rotate([0, 0, i]) {\n            translate([0 - i/4, 0, -i/8]) {\n                rotate([90, 0, 0]) {\n                    cylinder(h=5, r1=4, r2=3.5, $fn=16);\n                }\n            }\n        }\n    }\n}\n\nmodule limbs() {\n    // Legs\n    for (x = [-body_length/3, body_length/3]) {\n        for (side = [-1, 1]) {\n            translate([x, side * body_width/2, -body_height/2]) {\n                // Upper leg\n                rotate([0, 0, 30 * side]) {\n                    cylinder(h=8, r1=3, r2=2.5, $fn=12);\n                    translate([0, 0, 8]) {\n                        // Lower leg\n                        rotate([20, 0, 0]) {\n                            cylinder(h=10, r1=2.5, r2=2, $fn=12);\n                            translate([0, 0, 10]) {\n                                // Paw\n                                sphere(2.5, $fn=12);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Arms\n    for (x = [-body_length/4, body_length/4]) {\n        for (side = [-1, 1]) {\n            translate([x, side * body_width/2 - 5, body_height/2 - 5]) {\n                rotate([0, 0, -60 * side]) {\n                    cylinder(h=6, r1=2.5, r2=2, $fn=12);\n                    translate([0, 0, 6]) {\n                        rotate([30, 0, 0]) {\n                            cylinder(h=8, r1=2, r2=1.5, $fn=12);\n                            translate([0, 0, 8]) {\n                                sphere(2, $fn=12);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule body() {\n    // Main body\n    difference() {\n        union() {\n            // Torso\n            translate([0, 0, 0]) {\n                scale([1.2, 0.8, 1]) sphere([body_length/2, body_width/2, body_height/2], $fn=32);\n            }\n            \n            // Belly\n            translate([0, 0, -body_height/2 + 5]) {\n                scale([1, 0.9, 0.6]) sphere([body_length/2 - 5, body_width/2 - 3, body_height/2 - 5], $fn=32);\n            }\n        }\n        \n        // Neck indent\n        translate([body_length/2 - 5, 0, body_height/2]) {\n            rotate([0, 0, 45]) {\n                cube([10, 10, 10], center=true);\n            }\n        }\n    }\n    \n    // Tail attachment\n    translate([-body_length/2, 0, 0]) {\n        cylinder(h=5, r1=4, r2=4, $fn=16);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    translate([-body_length/2 - 20, 0, -5]) tail();\n    limbs();\n}",
    "renders": true
  },
  {
    "animal": "kite",
    "openscad_code": "// Classic Diamond Kite – medium-complexity, fully 3-D printable\n// Overall size ≈ 80 mm\n\n$fa = 2; $fs = 0.5;\n\n/* ---------- PARAMETERS ---------- */\nwing_span      = 70;      // mm\ncenter_height  = 80;\nspine_thick    = 2.5;     // wall / spar thickness\nskin_thick     = 1.2;     // sail material\nbridle_len     = 40;      // flying line attachment\ncross_spar_len = 55;\n\n/* ---------- MAIN KITE ---------- */\nmodule kite_assembly() {\n    // Sail (diamond outline, extruded thin shell)\n    linear_extrude(height = skin_thick, center = true)\n    polygon(points = [\n        [0, center_height/2],\n        [wing_span/2, 0],\n        [0, -center_height/2],\n        [-wing_span/2, 0]\n    ]);\n\n    // Spine spar (vertical)\n    translate([0, 0, 0])\n        rotate([90, 0, 0])\n        cylinder(h = center_height, d = spine_thick, $fn = 8);\n\n    // Cross spar (horizontal)\n    translate([0, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h = cross_spar_len, d = spine_thick, $fn = 8);\n\n    // Reinforcement caps at spar ends\n    for (sign = [-1, 1]) {\n        translate([0, sign * center_height/2, 0])\n            rotate([90, 0, 0])\n            cylinder(h = spine_thick*2, d1 = spine_thick*1.8, d2 = spine_thick, $fn = 8);\n        translate([sign * wing_span/2, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h = spine_thick*2, d1 = spine_thick*1.8, d2 = spine_thick, $fn = 8);\n    }\n\n    // Bridle attachment loop\n    translate([0, -center_height/2 + 5, skin_thick/2 + 1])\n        rotate([0, 90, 0])\n        torus(ro = 2, ri = 0.8);\n}\n\n// Simple torus for the loop\nmodule torus(ro, ri) {\n    rotate_extrude($fn = 32)\n    translate([ro, 0, 0])\n    circle(ri, $fn = 16);\n}\n\n/* ---------- TAIL RIBBONS ---------- */\nmodule tail() {\n    color(\"red\")\n    for (i = [1:6]) {\n        translate([0, -center_height/2 - i*9, 0])\n        rotate([0, 0, (i % 2 == 0) ? 8 : -8])\n        cube([5, 12, 0.6], center = true);\n    }\n}\n\n/* ---------- ASSEMBLY ---------- */\nunion() {\n    kite_assembly();\n    translate([0, 0, -skin_thick/2 - 0.3])  // offset tail slightly\n    tail();\n}",
    "renders": true
  },
  {
    "animal": "kiwi",
    "openscad_code": "// Realistic Kiwi - Medium Complexity\n// Size: ~60mm height\n\n// Main body\nmodule kiwi_body() {\n    // Core body - elongated sphere\n    scale([1.2, 0.9, 1.3]) \n    sphere(d=40, $fn=60);\n}\n\n// Brown fuzzy skin texture\nmodule kiwi_skin() {\n    difference() {\n        kiwi_body();\n        \n        // Create fuzzy texture with small spheres\n        for (i = [0:15]) {\n            rotate([0, 0, i * 24]) \n            translate([20, 0, -25]) \n            rotate([0, 90, 0]) \n            for (j = [0:3]) {\n                translate([0, 0, j * 12]) \n                sphere(d=3, $fn=8);\n            }\n        }\n    }\n}\n\n// Stem at top\nmodule kiwi_stem() {\n    translate([0, 0, 26]) \n    rotate([0, 0, 10]) \n    cylinder(h=8, d1=4, d2=2, $fn=8);\n}\n\n// Flesh inside - bright green\nmodule kiwi_flesh() {\n    color(\"lightgreen\") \n    difference() {\n        scale([1.15, 0.85, 1.25]) \n        sphere(d=38, $fn=60);\n        \n        // Central white core\n        translate([0, 0, -30]) \n        cylinder(h=60, d=6, $fn=20);\n        \n        // Seed cavities\n        for (a = [0:45:315]) {\n            rotate([0, 0, a]) \n            translate([10, 0, 0]) \n            rotate([90, 0, 0]) \n            cylinder(h=30, d=2, $fn=6);\n        }\n    }\n}\n\n// Seeds - small black ovals\nmodule kiwi_seeds() {\n    color(\"black\") \n    for (angle = [0:30:330]) {\n        rotate([0, 0, angle]) {\n            translate([10, 0, -5]) \n            rotate([90, 0, 0]) \n            scale([0.5, 1, 1]) \n            sphere(d=2, $fn=6);\n            \n            translate([10, 0, 5]) \n            rotate([90, 0, 0]) \n            scale([0.5, 1, 1]) \n            sphere(d=2, $fn=6);\n        }\n    }\n}\n\n// White central star pattern\nmodule kiwi_star() {\n    color(\"white\") \n    difference() {\n        translate([0, 0, -30]) \n        cylinder(h=60, d=6, $fn=20);\n        \n        for (s = [0:60:300]) {\n            rotate([0, 0, s]) \n            translate([3, 0, 0]) \n            cube([6, 1, 60], center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Outer brown skin\n    color(\"saddlebrown\") \n    kiwi_skin();\n    \n    // Stem\n    color(\"saddlebrown\") \n    kiwi_stem();\n    \n    // Optional: show cut kiwi\n    translate([50, 0, 0]) {\n        intersection() {\n            kiwi_body();\n            translate([-20, 0, 0]) \n            cube([40, 50, 60], center=true);\n        }\n        \n        translate([-20, 0, 0]) \n        kiwi_flesh();\n        \n        translate([-20, 0, 0]) \n        kiwi_seeds();\n        \n        translate([-20, 0, 0]) \n        kiwi_star();\n    }\n}",
    "renders": true
  },
  {
    "animal": "koala",
    "openscad_code": "// Koala - Realistic style, medium complexity\n// Designed for 3D printing with minimal overhangs\n\n// Overall scale factor\nscale_factor = 0.5;\n\nmodule koala() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        union() {\n            // Main body\n            body();\n            \n            // Head\n            translate([0, 0, 35]) rotate([0, 10, 0]) head();\n            \n            // Arms\n            translate([12, -8, 25]) rotate([0, 0, -30]) arm();\n            translate([-12, -8, 25]) mirror([1, 0, 0]) arm();\n            \n            // Legs\n            translate([8, 0, 0]) rotate([0, 0, 15]) leg();\n            translate([-8, 0, 0]) rotate([0, 0, -15]) mirror([1, 0, 0]) leg();\n            \n            // Tail\n            translate([0, 15, 8]) tail();\n        }\n    }\n}\n\nmodule body() {\n    // Oval body with slight flattening on bottom\n    difference() {\n        scale([1.2, 1, 0.8]) sphere(r=20, $fn=30);\n        translate([0, 0, -16]) cube([50, 50, 10], center=true);\n    }\n    \n    // Chest patch\n    color(\"lightgray\") {\n        translate([0, 0, 15]) scale([0.7, 0.6, 0.1]) sphere(r=18, $fn=20);\n    }\n}\n\nmodule head() {\n    union() {\n        // Main head sphere\n        sphere(r=18, $fn=30);\n        \n        // Ears\n        translate([15, 0, 5]) ear();\n        translate([-15, 0, 5]) mirror([1, 0, 0]) ear();\n        \n        // Nose\n        translate([0, -17, -2]) nose();\n        \n        // Eyes\n        translate([7, -12, 4]) eye();\n        translate([-7, -12, 4]) mirror([1, 0, 0]) eye();\n    }\n}\n\nmodule ear() {\n    // Outer ear\n    difference() {\n        scale([1.2, 0.8, 0.5]) sphere(r=10, $fn=25);\n        translate([0, 0, -1]) scale([0.8, 0.6, 0.3]) sphere(r=10, $fn=25);\n    }\n    \n    // Inner ear\n    color(\"pink\") {\n        translate([0, 0, -0.5]) scale([0.7, 0.5, 0.2]) sphere(r=8, $fn=20);\n    }\n}\n\nmodule nose() {\n    // Koala's large leathery nose\n    difference() {\n        scale([1.2, 0.7, 0.8]) sphere(r=5, $fn=20);\n        translate([0, 0, 1]) scale([0.9, 0.6, 0.5]) sphere(r=5, $fn=20);\n    }\n}\n\nmodule eye() {\n    // Eye socket\n    difference() {\n        sphere(r=3.5, $fn=20);\n        translate([0, 0, 2]) sphere(r=3, $fn=20);\n    }\n    \n    // Pupil\n    color(\"black\") {\n        translate([0, -1.5, 0.5]) sphere(r=1.5, $fn=10);\n    }\n}\n\nmodule arm() {\n    // Upper arm\n    rotate([0, 20, 0]) {\n        cylinder(h=15, r1=6, r2=4, $fn=20);\n        \n        // Forearm\n        translate([0, 0, 15]) rotate([0, -30, 0]) {\n            cylinder(h=12, r1=4, r2=3, $fn=20);\n            \n            // Paw\n            translate([0, 0, 12]) sphere(r=4, $fn=20);\n        }\n    }\n}\n\nmodule leg() {\n    // Thigh\n    rotate([0, -10, 0]) {\n        scale([1.2, 1, 1.1]) sphere(r=8, $fn=20);\n        \n        // Lower leg\n        translate([0, 0, -12]) rotate([0, 30, 0]) {\n            cylinder(h=10, r1=6, r2=4, $fn=20);\n            \n            // Foot\n            translate([0, 0, -10]) rotate([0, 30, 0]) {\n                scale([1.5, 1, 0.6]) sphere(r=6, $fn=20);\n            }\n        }\n    }\n}\n\nmodule tail() {\n    // Small stubby koala tail\n    rotate([0, -30, 0]) {\n        scale([0.8, 1, 0.6]) sphere(r=5, $fn=20);\n    }\n}\n\n// Generate the complete koala\nkoala();",
    "renders": true
  },
  {
    "animal": "kob",
    "openscad_code": "// Kob (small humanoid creature) - medium complexity realistic style\n// Total height ~60mm, designed for FDM 3D printing\n\n$fn = 32; // Smooth curves for printing\n\nmodule kob() {\n    // Body core - tapered cylinder\n    translate([0, 0, 15])\n    cylinder(h = 25, r1 = 12, r2 = 9, center = true);\n    \n    // Chest plate armor\n    difference() {\n        translate([0, 0, 20])\n        scale([1.2, 0.8, 1])\n        sphere(11);\n        \n        translate([0, 0, 10])\n        cube([30, 30, 30], center = true);\n    }\n    \n    // Head\n    translate([0, 0, 40])\n    scale([0.9, 0.9, 1.1])\n    sphere(8);\n    \n    // Snout\n    translate([0, -7, 40])\n    rotate([15, 0, 0])\n    cylinder(h = 10, r1 = 4, r2 = 2);\n    \n    // Eyes\n    for(x = [-3, 3]) {\n        translate([x, -7, 43])\n        sphere(1.5);\n    }\n    \n    // Horns\n    for(x = [-4, 4]) {\n        translate([x, 0, 48])\n        rotate([0, -15, x * 10])\n        cylinder(h = 8, r1 = 2, r2 = 0.5);\n    }\n    \n    // Arms\n    for(side = [-1, 1]) {\n        translate([side * 12, 0, 25])\n        rotate([0, 0, side * 15])\n        cylinder(h = 18, r = 3);\n        \n        // Hands\n        translate([side * 20, 0, 12])\n        sphere(3.5);\n    }\n    \n    // Legs\n    for(side = [-1, 1]) {\n        translate([side * 5, 0, 5])\n        cylinder(h = 15, r = 4);\n        \n        // Feet\n        translate([side * 5, 0, 0])\n        scale([1.2, 2, 0.5])\n        sphere(4);\n    }\n    \n    // Tail\n    translate([0, 10, 8])\n    rotate([0, 90, 0])\n    cylinder(h = 15, r1 = 4, r2 = 1.5);\n    \n    // Loincloth\n    translate([0, 5, 18])\n    cube([14, 2, 12], center = true);\n    \n    // Belt buckle\n    translate([0, 6, 23])\n    cube([6, 1, 6], center = true);\n}\n\n// Assembly\nkob();",
    "renders": true
  },
  {
    "animal": "kodkod",
    "openscad_code": "// Kodkod (Leopardus guigna) - small wild cat from Chile\n// Model dimensions: 80mm length, 40mm height, 30mm width\n\n$fn=32;\n\nmodule kodkod() {\n    // Body\n    union() {\n        // Main torso\n        translate([0, 0, 10])\n            scale([1, 0.6, 0.4])\n            sphere(12);\n        \n        // Chest\n        translate([-8, 0, 8])\n            scale([0.8, 0.5, 0.3])\n            sphere(10);\n            \n        // Rear\n        translate([12, 0, 10])\n            scale([0.7, 0.6, 0.3])\n            sphere(11);\n    }\n    \n    // Head\n    translate([-18, 0, 18])\n        rotate([0, 10, 0])\n        union() {\n            // Skull\n            scale([0.9, 0.75, 0.7])\n            sphere(8);\n            \n            // Muzzle\n            translate([-4, 0, -2])\n                scale([0.6, 0.4, 0.3])\n                sphere(6);\n                \n            // Ears\n            for(side = [-1, 1]) {\n                translate([0, side*5, 4])\n                    rotate([0, side*10, 0])\n                    scale([0.3, 0.1, 0.6])\n                    cylinder(6, 4, 2);\n            }\n        }\n    \n    // Tail\n    translate([20, 0, 12])\n        rotate([0, 20, 0])\n        union() {\n            for(i = [0:5]) {\n                translate([i*2, 0, -i*0.5])\n                    scale([1-i*0.1, 1-i*0.1, 1-i*0.05])\n                    sphere(3);\n            }\n        }\n    \n    // Legs\n    module leg(x, z, angle) {\n        translate([x, 0, z])\n            rotate([angle, 0, 0])\n            union() {\n                // Upper leg\n                cylinder(8, 3, 2.5);\n                \n                // Lower leg\n                translate([0, 0, -8])\n                    rotate([20, 0, 0])\n                    cylinder(6, 2.5, 2);\n                    \n                // Paw\n                translate([0, 0, -14])\n                    sphere(2.5);\n            }\n    }\n    \n    // Front legs\n    leg(-10, 6, 30);\n    leg(-10, -6, 30);\n    \n    // Rear legs\n    leg(10, 6, -30);\n    leg(10, -6, -30);\n    \n    // Facial features\n    translate([-24, 0, 18])\n        union() {\n            // Eyes\n            for(side = [-1, 1]) {\n                translate([0, side*3, 2])\n                    scale([0.5, 0.5, 0.3])\n                    sphere(1.5);\n            }\n            \n            // Nose\n            translate([-6, 0, -1])\n                scale([0.8, 0.6, 0.4])\n                sphere(1);\n                \n            // Whiskers\n            for(side = [-1, 1]) {\n                for(i = [0:2]) {\n                    translate([-5, side*(4+i), -2])\n                        rotate([0, 0, side*10*(i-1)])\n                        cylinder(8, 0.2, 0.2);\n                }\n            }\n        }\n    \n    // Spots pattern\n    for(i = [0:15]) {\n        rotate([0, 0, i*24])\n        translate([random(5,15), 0, random(8,12)])\n            scale([1, 0.7, 0.3])\n            sphere(1);\n    }\n}\n\n// Generate the kodkod\nkodkod();",
    "renders": true
  },
  {
    "animal": "koi",
    "openscad_code": "// Koi fish model - realistic style with medium complexity\n// Size: ~80mm long, 3D printable\n\n$fn = 24;\n\n// Main body module\nmodule koi_body() {\n    // Body - elongated ellipsoid\n    scale([1.5, 1, 0.8]) \n        sphere(r = 15);\n    \n    // Head - slightly flatter sphere\n    translate([22, 0, 0])\n        scale([1.2, 1, 0.7])\n            sphere(r = 12);\n    \n    // Tail fin - triangular shape\n    translate([-30, 0, 0])\n        rotate([0, 0, 90])\n            scale([1, 0.3, 0.1])\n                cylinder(h = 30, r1 = 15, r2 = 0);\n    \n    // Dorsal fin\n    translate([0, 0, 12])\n        rotate([0, 90, 0])\n            scale([0.8, 0.3, 1])\n                cylinder(h = 25, r1 = 8, r2 = 0);\n    \n    // Pectoral fins - left and right\n    pectoral_fin(\"left\");\n    pectoral_fin(\"right\");\n    \n    // Anal fin\n    translate([-15, 0, -10])\n        rotate([0, -90, 0])\n            scale([0.6, 0.2, 0.8])\n                cylinder(h = 20, r1 = 6, r2 = 0);\n}\n\n// Pectoral fin module\nmodule pectoral_fin(side) {\n    side_factor = (side == \"left\") ? 1 : -1;\n    \n    translate([10, side_factor * 12, -2])\n        rotate([0, -20, side_factor * 45])\n            scale([0.8, 0.3, 0.1])\n                cylinder(h = 18, r1 = 7, r2 = 1);\n}\n\n// Eye module\nmodule eye(side) {\n    side_factor = (side == \"left\") ? 1 : -1;\n    \n    // Eye socket\n    translate([28, side_factor * 8, 3])\n        difference() {\n            sphere(r = 3);\n            translate([1, 0, 0])\n                sphere(r = 2.8);\n        }\n    \n    // Eye ball\n    translate([28.5, side_factor * 8, 3])\n        sphere(r = 1.5);\n    \n    // Pupil\n    translate([29.5, side_factor * 8, 3])\n        sphere(r = 0.7);\n}\n\n// Mouth detail\nmodule mouth() {\n    // Upper lip\n    translate([32, 0, -2])\n        scale([1, 0.8, 0.3])\n            sphere(r = 4);\n    \n    // Lower lip\n    translate([32, 0, -5])\n        scale([1, 0.8, 0.3])\n            sphere(r = 3.5);\n}\n\n// Barbel whiskers\nmodule barbel(side) {\n    side_factor = (side == \"left\") ? 1 : -1;\n    \n    for(i = [0:1]) {\n        translate([30, side_factor * (6 + i * 2), -4 - i * 2])\n            rotate([0, 0, side_factor * -30])\n                cylinder(h = 8, r = 0.5);\n    }\n}\n\n// Scale pattern\nmodule scales() {\n    for(i = [0:3]) {\n        for(j = [0:5]) {\n            translate([20 - j * 8, -15 + i * 8, 9])\n                rotate([90, 0, 0])\n                    scale([0.8, 0.6, 0.3])\n                        cylinder(h = 2, r = 2);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    koi_body();\n    \n    // Eyes\n    eye(\"left\");\n    eye(\"right\");\n    \n    // Mouth\n    mouth();\n    \n    // Barbel whiskers\n    barbel(\"left\");\n    barbel(\"right\");\n    \n    // Scale pattern\n    scales();\n}",
    "renders": true
  },
  {
    "animal": "komodo",
    "openscad_code": "// Komodo Dragon - Realistic Style, Medium Complexity\n// Approximate size: 80mm long\n\n$fn = 32;\n\nmodule komodo_body() {\n    // Main torso - elongated ellipsoid\n    scale([1.2, 0.7, 0.5]) \n        sphere(15);\n}\n\nmodule komodo_head() {\n    // Head - tapered ellipsoid\n    translate([20, 0, 2])\n        scale([1.5, 0.7, 0.6])\n            sphere(8);\n    \n    // Snout extension\n    translate([30, 0, 1])\n        scale([2, 0.4, 0.3])\n            sphere(4);\n}\n\nmodule komodo_tail() {\n    // Tail - tapered cylinder segments\n    for(i = [0:5]) {\n        translate([-12 - i*4, 0, -i*0.8])\n            scale([1, 1 - i*0.15, 1 - i*0.15])\n                cylinder(h=4, r1=3.5 - i*0.5, r2=3.2 - i*0.5);\n    }\n}\n\nmodule komodo_legs() {\n    // Front legs\n    for(side = [-1, 1]) {\n        translate([10, side*8, -5])\n            rotate([0, side*10, 0])\n                cylinder(h=12, r1=2.5, r2=2);\n        \n        // Feet\n        translate([10, side*10, -11])\n            scale([1.5, 2.5, 1])\n                sphere(2);\n        \n        // Toes\n        for(toe = [0:2]) {\n            translate([9 + toe, side*(10 + side*toe), -11])\n                cylinder(h=3, r=0.8);\n        }\n    }\n    \n    // Hind legs\n    for(side = [-1, 1]) {\n        translate([-8, side*7, -5])\n            rotate([0, side*15, 0])\n                cylinder(h=14, r1=3, r2=2.5);\n        \n        // Feet\n        translate([-8, side*9.5, -12])\n            scale([1.8, 3, 1.2])\n                sphere(2.5);\n        \n        // Toes\n        for(toe = [0:2]) {\n            translate([-9 + toe, side*(9.5 + side*toe), -12])\n                cylinder(h=4, r=1);\n        }\n    }\n}\n\nmodule komodo_spikes() {\n    // Dorsal spikes along back\n    for(i = [0:8]) {\n        translate([18 - i*4.5, 0, 6])\n            rotate([20 + i*2, 0, 0])\n                cylinder(h=3 + sin(i*15)*1, r1=1, r2=0.5);\n    }\n}\n\nmodule komodo_eyes() {\n    // Eyes - simple spheres\n    for(side = [-1, 1]) {\n        translate([27, side*4, 4])\n            sphere(1.2);\n    }\n}\n\nmodule komodo_mouth() {\n    // Mouth slit\n    translate([32, 0, 2])\n        rotate([0, 0, -10])\n            scale([3, 0.3, 0.2])\n                cube([3, 1, 1], center=true);\n}\n\n// Assembly\nunion() {\n    komodo_body();\n    komodo_head();\n    komodo_tail();\n    komodo_legs();\n    komodo_spikes();\n}\n\n// Eyes and mouth as separate color\ntranslate([0, 0, 0.1])\n    color(\"black\")\n    union() {\n        komodo_eyes();\n        komodo_mouth();\n    }",
    "renders": true
  },
  {
    "animal": "kookaburra",
    "openscad_code": "// Kookaburra medium-complexity 3D printable model\n// Overall height ≈ 70 mm\n\n$fa = 2;\n$fs = 0.5;\n\nmodule body() {\n    // Main body oval\n    scale([1, 0.7, 1.2])\n        sphere(d = 38, center = true);\n}\n\nmodule head() {\n    // Head sphere\n    translate([19, 0, 12])\n        sphere(d = 26, center = true);\n}\n\nmodule beak() {\n    // Upper beak\n    translate([32, 0, 8])\n        rotate([0, -20, 0])\n        scale([1.8, 1, 1])\n        cylinder(h = 18, d1 = 12, d2 = 2, center = false);\n    \n    // Lower beak\n    translate([32, 0, 4])\n        rotate([0, -20, 0])\n        scale([1.5, 0.9, 0.8])\n        cylinder(h = 14, d1 = 10, d2 = 2, center = false);\n}\n\nmodule tail() {\n    // Tail feathers\n    for (i = [-1:1]) {\n        translate([-19, i*4, -8])\n            rotate([0, 0, i*5])\n            scale([1.2, 0.3, 1])\n            cylinder(h = 25, d1 = 14, d2 = 8, center = false);\n    }\n}\n\nmodule wing() {\n    // Right wing\n    translate([0, 15, 5])\n        rotate([0, 0, 30])\n        scale([1.5, 0.3, 1])\n        cylinder(h = 30, d1 = 18, d2 = 10, center = false);\n    \n    // Left wing\n    mirror([0,1,0])\n        translate([0, 15, 5])\n            rotate([0, 0, 30])\n            scale([1.5, 0.3, 1])\n            cylinder(h = 30, d1 = 18, d2 = 10, center = false);\n}\n\nmodule eye() {\n    // Eyes\n    for (i = [-1:2:1]) {\n        translate([24, i*5, 14])\n            sphere(d = 5, center = true);\n        \n        translate([26, i*5, 14])\n            sphere(d = 2.5, center = true);\n    }\n}\n\nmodule feet() {\n    // Legs\n    for (i = [-1:2:1]) {\n        translate([5, i*8, -22])\n            cylinder(h = 8, d = 4, center = false);\n        \n        // Toes\n        for (j = [-1, 0, 1]) {\n            translate([5 + j*3, i*8 + j*1.5, -30])\n                cylinder(h = 6, d = 2, center = false);\n        }\n    }\n}\n\nunion() {\n    body();\n    head();\n    beak();\n    tail();\n    wing();\n    eye();\n    feet();\n}",
    "renders": true
  },
  {
    "animal": "krill",
    "openscad_code": "// Krill (Euphausiid) - Realistic medium-complexity model\n// Body length ≈ 80 mm, printable without supports\n\n$fn = 36;\n\n// Main module\nmodule krill() {\n    color(\"orange\") {\n        union() {\n            cephalothorax();\n            abdomen();\n            tail_fan();\n            antennae();\n            legs();\n            pleopods();\n        }\n    }\n}\n\n// Cephalothorax (head + fused thorax)\nmodule cephalothorax() {\n    // Main carapace shell\n    difference() {\n        scale([1, 0.9, 0.7])\n            sphere(d = 14);\n        // Eye sockets\n        translate([-5, 6.5, 2])\n            rotate([0, 20, 0])\n            sphere(d = 4);\n        translate([5, 6.5, 2])\n            rotate([0, -20, 0])\n            sphere(d = 4);\n    }\n    \n    // Eyes\n    translate([-5, 6.3, 2])\n        sphere(d = 3);\n    translate([5, 6.3, 2])\n        sphere(d = 3);\n    \n    // Rostrum (beak-like extension)\n    translate([0, 8, 0])\n        rotate([30, 0, 0])\n        cylinder(h = 8, d1 = 3, d2 = 0);\n}\n\n// Abdomen (6 segments)\nmodule abdomen() {\n    for(i = [1:6]) {\n        translate([0, -8 - i*6, -1.5 + i*0.5])\n            scale([1 - i*0.05, 1 - i*0.08, 0.8])\n            sphere(d = 12 - i);\n    }\n}\n\n// Tail fan (uropods + telson)\nmodule tail_fan() {\n    // Telson (central tail)\n    translate([0, -50, 2])\n        rotate([30, 0, 0])\n        cylinder(h = 12, d1 = 6, d2 = 0);\n    \n    // Uropods (lateral tail fins)\n    for(side = [-1, 1]) {\n        translate([side*5, -45, 0])\n            rotate([0, 0, side*20])\n            scale([0.3, 1.5, 1])\n            sphere(d = 8);\n    }\n}\n\n// Antennae (antennules + antennae)\nmodule antennae() {\n    // First antennae (antennules)\n    for(side = [-1, 1]) {\n        translate([side*3, 7, 1])\n            rotate([0, 0, side*40])\n            cylinder(h = 16, d1 = 1, d2 = 0.5);\n    }\n    \n    // Second antennae\n    for(side = [-1, 1]) {\n        translate([side*4, 5, 0])\n            rotate([0, 0, side*60])\n            cylinder(h = 20, d1 = 1.2, d2 = 0.5);\n    }\n}\n\n// Thoracopods (swimming legs)\nmodule legs() {\n    for(i = [0:5]) {\n        angle = -45 - i*15;\n        length = 8 + i*2;\n        \n        translate([sin(i*25)*4, 2 - i*3, -3])\n            rotate([90, 0, angle])\n            cylinder(h = length, d = 1.2);\n    }\n}\n\n// Pleopods (abdominal swimming appendages)\nmodule pleopods() {\n    for(seg = [0:4]) {\n        for(side = [-1, 1]) {\n            translate([side*3, -20 - seg*5, -2])\n                rotate([0, side*30, 0])\n                scale([0.5, 2, 0.2])\n                sphere(d = 4);\n        }\n    }\n}\n\n// Render the complete krill\nkrill();",
    "renders": true
  },
  {
    "animal": "kudu",
    "openscad_code": "// OpenSCAD Kudu - Realistic Medium Complexity\n// Designed for 3D printing, approximately 80mm tall\n\n// Overall scale factor\nscale_factor = 0.8;\n\n// Body module\nmodule body() {\n    // Main torso\n    union() {\n        // Chest\n        translate([0, -10, 0])\n            scale([1.2, 0.8, 1])\n            sphere(15, $fn=20);\n        \n        // Abdomen\n        translate([0, -25, -5])\n            scale([1, 0.7, 0.8])\n            sphere(12, $fn=20);\n        \n        // Rump\n        translate([0, -40, 0])\n            scale([0.9, 0.8, 0.9])\n            sphere(13, $fn=20);\n    }\n}\n\n// Head module\nmodule head() {\n    rotate([0, 20, 0]) {\n        union() {\n            // Main head\n            translate([0, 50, 25])\n                scale([0.7, 1.8, 0.7])\n                sphere(10, $fn=20);\n            \n            // Muzzle\n            translate([0, 60, 22])\n                scale([0.5, 0.8, 0.4])\n                sphere(8, $fn=20);\n            \n            // Nose\n            translate([0, 67, 22])\n                scale([0.3, 0.3, 0.2])\n                cube([6, 4, 3], center=true);\n        }\n        \n        // Ears\n        for(side = [-1, 1]) {\n            translate([side * 8, 50, 35])\n                rotate([side * 10, 0, 0])\n                scale([0.3, 0.1, 1.2])\n                cylinder(h=12, r1=3, r2=2, $fn=8);\n        }\n    }\n}\n\n// Horns module\nmodule horns() {\n    // Left horn\n    translate([-8, 50, 35]) {\n        rotate([0, -30, -30]) {\n            cylinder(h=40, r1=2, r2=1.5, $fn=8);\n            translate([0, 0, 38])\n                rotate([0, -20, 0])\n                cylinder(h=30, r1=1.5, r2=1, $fn=8);\n        }\n    }\n    \n    // Right horn\n    mirror([1, 0, 0])\n        children();\n}\n\n// Leg module\nmodule leg(position, angle) {\n    translate(position)\n        rotate([angle, 0, 0]) {\n            // Upper leg\n            cylinder(h=25, r1=3, r2=2.5, $fn=8);\n            \n            // Lower leg\n            translate([0, 0, 25])\n                rotate([30, 0, 0])\n                cylinder(h=20, r1=2.5, r2=2, $fn=8);\n            \n            // Hoof\n            translate([0, 0, 45])\n                rotate([30, 0, 0])\n                cylinder(h=5, r1=2.2, r2=1.8, $fn=8);\n        }\n}\n\n// Neck module\nmodule neck() {\n    translate([0, 25, 15])\n        rotate([-30, 0, 0])\n        scale([0.7, 1.5, 0.7])\n        cylinder(h=25, r1=6, r2=4, $fn=12);\n}\n\n// Tail module\nmodule tail() {\n    translate([0, -50, 5])\n        rotate([45, 0, 0])\n        union() {\n            cylinder(h=15, r1=2, r2=1, $fn=8);\n            translate([0, 0, 15])\n                rotate([20, 0, 0])\n                scale([0.2, 0.2, 1])\n                sphere(3, $fn=8);\n        }\n}\n\n// Main assembly\nscale([scale_factor, scale_factor, scale_factor]) {\n    union() {\n        body();\n        neck();\n        head();\n        \n        // Horns with mirroring\n        horns();\n        \n        // Legs - front\n        leg([-10, 15, -15], 20);\n        leg([10, 15, -15], 20);\n        \n        // Legs - rear\n        leg([-8, -30, -15], 20);\n        leg([8, -30, -15], 20);\n        \n        tail();\n    }\n}",
    "renders": true
  },
  {
    "animal": "lacewing",
    "openscad_code": "// Lacewing (Chrysopidae) - Realistic Style - Medium Complexity\n// Scale: 80mm wingspan, 40mm body length\n\nmodule lacewing() {\n    // Body\n    color(\"lightgreen\")\n    union() {\n        // Head\n        translate([0, 0, 10])\n        scale([1.2, 1, 0.8])\n        sphere(d=6, $fn=16);\n        \n        // Thorax\n        translate([0, 0, 5])\n        scale([1.5, 1.2, 2])\n        sphere(d=8, $fn=16);\n        \n        // Abdomen\n        translate([0, 0, -5])\n        scale([1.8, 1.4, 3.5])\n        sphere(d=12, $fn=16);\n    }\n    \n    // Eyes (compound)\n    for(side = [-1, 1]) {\n        color(\"black\")\n        translate([side * 3, 2, 10])\n        rotate([0, 20 * side, 0])\n        sphere(d=3, $fn=8);\n    }\n    \n    // Antennae\n    module antenna() {\n        color(\"brown\")\n        translate([0, 0, 0])\n        rotate([0, 0, 0])\n        cylinder(h=20, d1=0.5, d2=0.2, $fn=8);\n        \n        // Antennal segments\n        for(i = [1:4]) {\n            translate([0, 0, i * 5])\n            sphere(d=1.2, $fn=8);\n        }\n    }\n    \n    // Left antenna\n    translate([-2.5, 1.5, 12])\n    rotate([0, 20, -30])\n    antenna();\n    \n    // Right antenna\n    translate([2.5, 1.5, 12])\n    mirror([1, 0, 0])\n    rotate([0, 20, -30])\n    antenna();\n    \n    // Wings - four wings with venation\n    module wing() {\n        color(\"transparent\", 0.3)\n        difference() {\n            // Wing membrane\n            scale([1, 0.6, 0.1])\n            sphere(d=40, $fn=32);\n            \n            // Wing base cut\n            translate([0, -15, 0])\n            cube([15, 20, 2], center=true);\n            \n            // Wing tip taper\n            translate([25, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h=30, d1=0, d2=20, $fn=16);\n        }\n        \n        // Wing venation (raised lines)\n        color(\"lightgreen\")\n        for(i = [0:3]) {\n            translate([i * 8 - 12, -3, 0.2])\n            rotate([0, 0, i * 5])\n            cube([12, 0.4, 0.4]);\n        }\n        \n        for(i = [0:2]) {\n            translate([i * 10 - 10, 3, 0.2])\n            rotate([0, 0, -i * 8])\n            cube([10, 0.4, 0.4]);\n        }\n    }\n    \n    // Forewings\n    translate([0, 0, 8])\n    rotate([0, 0, 45])\n    wing();\n    \n    translate([0, 0, 8])\n    rotate([0, 0, -45])\n    mirror([1, 0, 0])\n    wing();\n    \n    // Hindwings (smaller)\n    translate([0, 0, 5])\n    rotate([0, 0, 55])\n    scale([0.8, 0.8, 1])\n    wing();\n    \n    translate([0, 0, 5])\n    rotate([0, 0, -55])\n    mirror([1, 0, 0])\n    scale([0.8, 0.8, 1])\n    wing();\n    \n    // Legs - six legs\n    module leg(segment_length = 8) {\n        color(\"green\")\n        union() {\n            // Coxa\n            translate([0, 0, 0])\n            rotate([90, 0, 0])\n            cylinder(h=3, d=1.2, $fn=8);\n            \n            // Femur\n            translate([0, 0, -3])\n            rotate([90, 0, 0])\n            cylinder(h=segment_length * 0.4, d=0.8, $fn=8);\n            \n            // Tibia\n            translate([0, 0, -3 - segment_length * 0.4])\n            rotate([90, 0, 0])\n            cylinder(h=segment_length * 0.5, d=0.6, $fn=8);\n            \n            // Tarsi\n            translate([0, 0, -3 - segment_length * 0.9])\n            rotate([90, 0, 0])\n            cylinder(h=segment_length * 0.3, d1=0.5, d2=0.3, $fn=6);\n            \n            // Claws\n            translate([0, 0, -3 - segment_length])\n            rotate([90, 0, 0])\n            for(side = [-1, 1]) {\n                translate([side * 0.3, 0, 0])\n                cylinder(h=0.8, d1=0.1, d2=0.3, $fn=4);\n            }\n        }\n    }\n    \n    // Front legs\n    for(side = [-1, 1]) {\n        translate([side * 4, 0, 7])\n        rotate([0, 0, side * 30])\n        leg(7);\n    }\n    \n    // Middle legs\n    for(side = [-1, 1]) {\n        translate([side * 5, 0, 3])\n        rotate([0, 0, side * 20])\n        leg(9);\n    }\n    \n    // Hind legs\n    for(side = [-1, 1]) {\n        translate([side * 4, 0, -2])\n        rotate([0, 0, side * 15])\n        leg(10);\n    }\n}\n\n// Scale to 80mm wingspan\nscale(0.8)\nlacewing();",
    "renders": true
  },
  {
    "animal": "ladybug",
    "openscad_code": "// Ladybug - Realistic style, medium complexity\n// Approx 60mm x 45mm x 18mm\n\nmodule ladybug() {\n    // Body shell\n    color(\"red\")\n    difference() {\n        // Main oval shell\n        scale([1.5, 1, 0.6])\n        sphere(d = 40, $fn = 64);\n        \n        // Cut bottom flat\n        translate([0, 0, -12])\n        cube([80, 80, 24], center = true);\n    }\n    \n    // Head\n    color(\"black\")\n    translate([28, 0, 4])\n    rotate([0, 90, 0])\n    cylinder(h = 15, r1 = 10, r2 = 8, $fn = 32);\n    \n    // Eyes\n    color(\"black\")\n    for (eye = [[25, 6, 10], [25, -6, 10]]) {\n        translate(eye)\n        sphere(d = 6, $fn = 16);\n    }\n    \n    // Antennae\n    color(\"black\")\n    for (ant = [[30, 4, 14], [30, -4, 14]]) {\n        translate(ant)\n        rotate([0, 90, 15])\n        cylinder(h = 15, r = 0.8, $fn = 8);\n        \n        translate([ant[0] + 14, ant[1] + 4, ant[2] + 4])\n        sphere(d = 2, $fn = 8);\n    }\n    \n    // Spots\n    color(\"black\")\n    for (spot = [[10, 10, 6], [-10, 10, 6], [-15, 0, 6], [10, -10, 6], [-10, -10, 6], [0, 0, 6]]) {\n        translate(spot)\n        scale([1, 0.8, 0.3])\n        sphere(d = 8, $fn = 32);\n    }\n    \n    // Legs (6 total)\n    color(\"black\")\n    for (leg = [0:5]) {\n        angle = 60 * leg;\n        translate([0, 0, -2])\n        rotate([0, 0, angle])\n        translate([16, 0, 0])\n        rotate([0, 0, 45])\n        cylinder(h = 12, r = 1.2, $fn = 8);\n        \n        translate([0, 0, -2])\n        rotate([0, 0, angle])\n        translate([22, 0, -6])\n        rotate([0, 0, 45])\n        cylinder(h = 10, r = 1, $fn = 8);\n    }\n    \n    // Underside\n    color(\"darkgray\")\n    translate([0, 0, -12])\n    difference() {\n        scale([1.4, 0.9, 0.5])\n        sphere(d = 40, $fn = 64);\n        \n        // Hollow interior\n        translate([0, 0, 2])\n        scale([1.3, 0.8, 0.4])\n        sphere(d = 40, $fn = 64);\n    }\n    \n    // Wing line\n    color(\"black\")\n    translate([0, 0, 11.5])\n    cube([0.5, 30, 0.5], center = true);\n}\n\nladybug();",
    "renders": true
  },
  {
    "animal": "lamb",
    "openscad_code": "// Realistic 3D-Printable Lamb – Medium Complexity\n// Size: ~70 mm long, 50 mm tall, 40 mm wide\n// All parts are merged into one solid shell for easy 3D printing\n\n$fn = 32; // Smooth curves\n\nmodule wool_ball(r=4, h=6){\n    // Fluffy wool tuft made from stacked spheres\n    union(){\n        sphere(r);\n        translate([0,0,h*0.4]) sphere(r*0.8);\n        translate([0,0,h*0.7]) sphere(r*0.6);\n    }\n}\n\nmodule leg(side=1){\n    // Cylindrical leg with rounded hoof\n    translate([side*6,0,0]){\n        union(){\n            cylinder(h=18, d1=8, d2=6, center=false);\n            translate([0,0,18]) cylinder(h=4, d1=6, d2=7, center=false);\n        }\n    }\n}\n\nmodule ear(){\n    // Ear as flattened cylinder\n    rotate([0,-20,0])\n    scale([1,0.4,0.8])\n    cylinder(h=12, d=10, center=true);\n}\n\nmodule head(){\n    union(){\n        // Main head sphere\n        sphere(14);\n        // Snout\n        translate([12,0,-2])\n        scale([1.6,1,1])\n        sphere(7);\n        // Eyes\n        for(x=[-1,1]){\n            translate([8, x*5, 3])\n            color(\"black\")\n            sphere(2);\n        }\n        // Ears\n        translate([-3, 8, 8])\n        ear();\n        translate([-3, -8, 8])\n        mirror([0,1,0])\n        ear();\n    }\n}\n\nmodule body(){\n    union(){\n        // Torso ellipsoid\n        scale([1.4,1,0.9])\n        sphere(20);\n\n        // Add wool tufts across back\n        for(i=[-1:0.5:1])\n            translate([i*12, 0, 18])\n            wool_ball(r=6, h=8);\n\n        for(i=[-0.8:0.4:0.8])\n            translate([i*10, 12, 16])\n            wool_ball(r=5, h=6);\n\n        for(i=[-0.8:0.4:0.8])\n            translate([i*10, -12, 16])\n            wool_ball(r=5, h=6);\n    }\n}\n\n// Assembly\nunion(){\n    // Body\n    translate([0,0,20])\n    body();\n\n    // Head\n    translate([-22,0,30])\n    head();\n\n    // Legs\n    translate([12, 8, 0])\n    leg(1);\n    translate([12, -8, 0])\n    leg(1);\n    translate([-12, 8, 0])\n    leg(-1);\n    translate([-12, -8, 0])\n    leg(-1);\n}",
    "renders": true
  },
  {
    "animal": "lamprey",
    "openscad_code": "// Realistic Medium-Complexity Lamprey – OpenSCAD\n// Overall length ≈ 80 mm, printable without supports\n\n// Basic parameters\n$fn = 24;               // Global resolution\nbody_diameter = 14;\nbody_length = 60;\ntail_taper = 0.4;\nhead_diameter = 18;\nsucker_depth = 8;\nteeth_rows = 8;\nteeth_per_row = 12;\ngill_pouches = 7;\ngill_size = 2.5;\n\n// Main body\nmodule lamprey_body() {\n    union() {\n        // Torso segments\n        for (i = [0:5]) {\n            hull() {\n                translate([i*10, 0, 0])\n                    scale([1, 1 - i*0.08, 1 - i*0.08])\n                        sphere(d = body_diameter);\n                translate([(i+1)*10, 0, 0])\n                    scale([1, 1 - (i+1)*0.08, 1 - (i+1)*0.08])\n                        sphere(d = body_diameter);\n            }\n        }\n\n        // Tail taper\n        hull() {\n            translate([60, 0, 0])\n                sphere(d = body_diameter * tail_taper);\n            translate([80, 0, 0])\n                sphere(d = body_diameter * tail_taper * 0.4);\n        }\n    }\n}\n\n// Oral sucker disc\nmodule sucker() {\n    difference() {\n        // Disc\n        translate([-sucker_depth, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h = head_diameter, d = head_diameter, center = true);\n\n        // Central cavity\n        translate([-sucker_depth + 2, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h = head_diameter + 2, d = head_diameter * 0.7, center = true);\n    }\n}\n\n// Radial teeth\nmodule teeth() {\n    for (j = [0:teeth_rows-1]) {\n        for (i = [0:teeth_per_row-1]) {\n            rotate([0, 0, i * 360 / teeth_per_row])\n                translate([-sucker_depth + 2 + j * 0.8, head_diameter/2 - 2, 0])\n                    rotate([90, 0, 0])\n                        cylinder(h = 2.5, d1 = 1.2, d2 = 0.6);\n        }\n    }\n}\n\n// Gill (spiracle) pouches\nmodule gills() {\n    for (k = [0:gill_pouches-1]) {\n        translate([k * 6 + 10, 0, body_diameter/2 - 0.5])\n            rotate([90, 0, 0])\n                cylinder(h = gill_size * 2, d = gill_size, $fn = 6);\n    }\n}\n\n// Dorsal fins (low-profile printable ridges)\nmodule dorsal_fins() {\n    // First dorsal\n    translate([35, 0, body_diameter/2])\n        cube([18, body_diameter * 0.8, 2], center = true);\n\n    // Second dorsal\n    translate([55, 0, body_diameter/2 * 0.9])\n        cube([15, body_diameter * 0.7, 2], center = true);\n}\n\n// Assembly\nunion() {\n    lamprey_body();\n    color(\"gray\")\n        sucker();\n    color(\"ivory\")\n        teeth();\n    color(\"dimgray\")\n        gills();\n    color(\"slategray\")\n        dorsal_fins();\n}",
    "renders": true
  },
  {
    "animal": "langur",
    "openscad_code": "// Langur Monkey - Realistic Style, Medium Complexity\n// Scaled for 3D printing (approx 70mm tall)\n\nmodule body() {\n    // Main torso with slight taper\n    hull() {\n        translate([0,0,15]) sphere(r=12, $fn=32);\n        translate([0,0,5]) sphere(r=10, $fn=32);\n    }\n}\n\nmodule head() {\n    // Skull shape\n    difference() {\n        union() {\n            // Main head\n            translate([0,0,30]) sphere(r=9, $fn=32);\n            // Muzzle\n            translate([0,-8,27]) scale([1,1.5,0.8]) sphere(r=5, $fn=24);\n        }\n        // Eye sockets\n        translate([3.5,6,31]) sphere(r=2.5, $fn=16);\n        translate([-3.5,6,31]) sphere(r=2.5, $fn=16);\n    }\n    \n    // Eyes\n    translate([3.5,7.5,31]) sphere(r=1.5, $fn=16);\n    translate([-3.5,7.5,31]) sphere(r=1.5, $fn=16);\n    \n    // Nostrils\n    translate([1.5,-10.5,26]) sphere(r=1, $fn=8);\n    translate([-1.5,-10.5,26]) sphere(r=1, $fn=8);\n}\n\nmodule ears() {\n    // Left ear\n    translate([8,0,31]) rotate([0,0,-20]) scale([1,0.5,1]) \n        sphere(r=4, $fn=16);\n    \n    // Right ear\n    translate([-8,0,31]) rotate([0,0,20]) scale([1,0.5,1]) \n        sphere(r=4, $fn=16);\n}\n\nmodule arms() {\n    // Left arm\n    translate([10,0,25]) rotate([0,0,-30]) {\n        cylinder(h=15, r1=3, r2=2, $fn=16);\n        translate([0,0,15]) rotate([90,0,0]) \n            cylinder(h=8, r1=2, r2=1.5, $fn=16);\n    }\n    \n    // Right arm\n    translate([-10,0,25]) rotate([0,0,30]) {\n        cylinder(h=15, r1=3, r2=2, $fn=16);\n        translate([0,0,15]) rotate([90,0,0]) \n            cylinder(h=8, r1=2, r2=1.5, $fn=16);\n    }\n}\n\nmodule legs() {\n    // Left leg\n    translate([7,0,5]) rotate([0,0,-15]) {\n        cylinder(h=18, r1=3.5, r2=2.5, $fn=16);\n        translate([0,0,18]) rotate([0,0,0]) \n            cylinder(h=6, r1=2.5, r2=2, $fn=16);\n    }\n    \n    // Right leg\n    translate([-7,0,5]) rotate([0,0,15]) {\n        cylinder(h=18, r1=3.5, r2=2.5, $fn=16);\n        translate([0,0,18]) rotate([0,0,0]) \n            cylinder(h=6, r1=2.5, r2=2, $fn=16);\n    }\n}\n\nmodule tail() {\n    // S-shaped tail\n    for(i=[0:5]) {\n        rotate([0,0,-i*15]) translate([0,12-i*2,5-i*3]) \n            sphere(r=3-i*0.3, $fn=16);\n    }\n}\n\nmodule face_markings() {\n    // Langur's distinctive black face\n    translate([0,-7,28]) scale([1.2,1.8,0.5]) \n        cube([12,10,3], center=true);\n}\n\n// Main assembly\nunion() {\n    body();\n    head();\n    ears();\n    arms();\n    legs();\n    tail();\n    face_markings();\n}\n\n// Base for stability\ntranslate([0,0,-3]) cylinder(h=3, r=15, $fn=32);",
    "renders": true
  },
  {
    "animal": "lark",
    "openscad_code": "// Lark model - realistic style, medium complexity\n// Designed for 3D printing with no overhangs\n\n$fn = 32; // Smooth curves\n\n// Main module\nmodule lark() {\n    // Body\n    union() {\n        body();\n        head();\n        wings();\n        tail();\n        legs();\n        beak();\n    }\n}\n\n// Body - elongated oval shape\nmodule body() {\n    color(\"brown\")\n    union() {\n        // Main body\n        scale([1.2, 0.8, 0.6])\n        sphere(r=12);\n        \n        // Chest protrusion\n        translate([5, 0, -2])\n        scale([0.8, 0.6, 0.4])\n        sphere(r=10);\n    }\n}\n\n// Head with realistic proportions\nmodule head() {\n    color(\"brown\")\n    translate([-18, 0, 8])\n    union() {\n        // Main head\n        scale([0.9, 0.8, 0.9])\n        sphere(r=8);\n        \n        // Eye\n        color(\"black\")\n        translate([-3, 4, 2])\n        sphere(r=1.5);\n        \n        // Eye\n        color(\"black\")\n        translate([-3, -4, 2])\n        sphere(r=1.5);\n        \n        // Crest feathers\n        for(i = [0:3]) {\n            rotate([0, 0, i*15-22.5])\n            translate([-2, 0, 7])\n            rotate([90, 0, 0])\n            cylinder(h=6, r1=1, r2=0.5);\n        }\n    }\n}\n\n// Beak - conical shape\nmodule beak() {\n    color(\"darkgray\")\n    translate([-26, 0, 8])\n    rotate([0, 90, 0])\n    scale([1, 1, 2])\n    cylinder(h=10, r1=3, r2=0.5);\n}\n\n// Wings with feather details\nmodule wings() {\n    color(\"tan\")\n    union() {\n        // Left wing\n        translate([-5, 10, 5])\n        rotate([0, 0, -20])\n        wing_shape();\n        \n        // Right wing\n        translate([-5, -10, 5])\n        rotate([0, 0, 20])\n        mirror([0, 1, 0])\n        wing_shape();\n    }\n}\n\n// Wing shape module\nmodule wing_shape() {\n    difference() {\n        // Main wing\n        scale([1.2, 0.8, 0.1])\n        sphere(r=15);\n        \n        // Feather notches\n        for(i = [1:4]) {\n            translate([-5+i*3, 8-i*2, 0])\n            cube([2, 4, 2], center=true);\n        }\n    }\n}\n\n// Tail with spread feathers\nmodule tail() {\n    color(\"brown\")\n    translate([13, 0, 2])\n    union() {\n        for(i = [-2:2]) {\n            rotate([0, i*10, 0])\n            translate([i*2, 0, 0])\n            scale([1, 0.3, 0.05])\n            rotate([0, 0, i*5])\n            cylinder(h=20, r1=5, r2=2);\n        }\n    }\n}\n\n// Legs and feet\nmodule legs() {\n    color(\"yellow\")\n    union() {\n        // Left leg\n        translate([0, 5, -7])\n        leg();\n        \n        // Right leg\n        translate([0, -5, -7])\n        leg();\n    }\n}\n\n// Single leg with foot\nmodule leg() {\n    union() {\n        // Upper leg\n        cylinder(h=8, r=1.5);\n        \n        // Lower leg\n        translate([0, 0, -8])\n        cylinder(h=8, r=1);\n        \n        // Foot\n        translate([0, 0, -16])\n        union() {\n            // Main foot\n            cube([6, 2, 1], center=true);\n            \n            // Toes\n            for(i = [-1:1]) {\n                translate([3+i*2, 0, -0.5])\n                cube([1, 1, 1]);\n            }\n        }\n    }\n}\n\n// Generate the model\nlark();",
    "renders": true
  },
  {
    "animal": "lemur",
    "openscad_code": "// Realistic Lemur - Medium Complexity\n// Designed for 3D printing with proper wall thickness and minimal overhangs\n\n// Overall dimensions: ~80mm long, ~40mm tall\n\n$fn = 32;\nwall_thickness = 1.5;\n\nmodule body() {\n    // Main torso as elongated sphere\n    translate([0, 0, 15])\n        scale([1.3, 0.8, 1])\n        sphere(r=15);\n    \n    // Belly section\n    translate([0, 0, 8])\n        scale([1.1, 0.7, 0.5])\n        sphere(r=12);\n}\n\nmodule head() {\n    // Main head shape\n    translate([20, 0, 30])\n        rotate([0, -10, 0])\n        scale([0.9, 1, 1.1])\n        sphere(r=12);\n    \n    // Snout extension\n    translate([30, 0, 28])\n        rotate([0, -10, 0])\n        scale([0.4, 0.6, 0.5])\n        sphere(r=8);\n}\n\nmodule ears() {\n    // Left ear\n    translate([15, -12, 38])\n        rotate([0, -30, -20])\n        scale([0.3, 1, 1.5])\n        cylinder(r1=6, r2=4, h=8);\n    \n    // Right ear\n    translate([15, 12, 38])\n        rotate([0, -30, 20])\n        scale([0.3, 1, 1.5])\n        cylinder(r1=6, r2=4, h=8);\n}\n\nmodule tail() {\n    // Curved tail\n    for(i=[0:30:120]) {\n        rotate([0, 0, i])\n        translate([-15-i*0.5, 0, 15-i*0.1])\n        rotate([90, 0, 0])\n        scale([1, 1, 0.8])\n        cylinder(r1=5-i*0.02, r2=4.5-i*0.02, h=3);\n    }\n}\n\nmodule limbs() {\n    // Front left leg\n    translate([10, -10, 10])\n        rotate([0, 0, -10])\n        cylinder(r=3, h=20);\n    \n    translate([10, -10, 0])\n        rotate([0, 0, -10])\n        sphere(r=3.5);\n    \n    // Front right leg\n    translate([10, 10, 10])\n        rotate([0, 0, 10])\n        cylinder(r=3, h=20);\n    \n    translate([10, 10, 0])\n        rotate([0, 0, 10])\n        sphere(r=3.5);\n    \n    // Back left leg\n    translate([-10, -8, 10])\n        rotate([0, 0, 20])\n        cylinder(r=3.5, h=22);\n    \n    translate([-10, -8, 0])\n        sphere(r=4);\n    \n    // Back right leg\n    translate([-10, 8, 10])\n        rotate([0, 0, -20])\n        cylinder(r=3.5, h=22);\n    \n    translate([-10, 8, 0])\n        sphere(r=4);\n}\n\nmodule eyes() {\n    // Left eye socket\n    translate([28, -5, 32])\n        sphere(r=2);\n    \n    // Left eye\n    translate([29, -5, 32])\n        sphere(r=1.5);\n    \n    // Right eye socket\n    translate([28, 5, 32])\n        sphere(r=2);\n    \n    // Right eye\n    translate([29, 5, 32])\n        sphere(r=1.5);\n}\n\nmodule stripes() {\n    // Tail stripes\n    for(i=[0:15:90]) {\n        rotate([0, 0, i])\n        translate([-10-i*0.5, 0, 15-i*0.1])\n        rotate([90, 0, 0])\n        difference() {\n            cylinder(r1=5-i*0.02, r2=4.5-i*0.02, h=3);\n            translate([0, 0, 1.5])\n            cylinder(r1=4.5-i*0.02, r2=4-i*0.02, h=1.5);\n        }\n    }\n    \n    // Body stripes\n    for(i=[0:20:60]) {\n        rotate([0, 0, i])\n        translate([0, 0, 15])\n        scale([1.3, 0.8, 1])\n        difference() {\n            sphere(r=15);\n            translate([0, 0, -16])\n            cube([40, 30, 30], center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    ears();\n    tail();\n    limbs();\n    eyes();\n    stripes();\n}",
    "renders": true
  },
  {
    "animal": "lemming",
    "openscad_code": "// Lemming - Realistic Style, Medium Complexity\n// Overall size ~60mm, 3D-printable\n\n// Parameters\n$fn=32;  // Smooth curves\nbody_len = 35;\nbody_rad = 12;\nhead_rad = 10;\near_rad = 4;\near_len = 7;\nleg_len = 10;\nleg_rad = 4;\ntail_len = 20;\ntail_rad = 4;\npaw_rad = 3;\neye_rad = 1.5;\nwhisker_len = 8;\n\n// Main module\nmodule lemming(){\n    union(){\n        // Body\n        translate([0,0,leg_len])\n        scale([1,0.8,0.7])\n        sphere(r=body_rad);\n\n        // Head\n        translate([body_rad+head_rad*0.5, 0, leg_len+body_rad*0.7])\n        sphere(r=head_rad);\n\n        // Snout\n        translate([body_rad+head_rad*1.5, 0, leg_len+body_rad*0.7])\n        scale([1.5,1,1])\n        sphere(r=head_rad*0.6);\n\n        // Ears\n        for(side=[-1,1]){\n            translate([body_rad+head_rad*0.2, side*head_rad*0.7, leg_len+body_rad*0.7+head_rad*0.8])\n            rotate([0, side*20, 0])\n            rotate([0,0,side*10])\n            scale([0.7,0.4,1])\n            sphere(r=ear_rad);\n        }\n\n        // Legs\n        for(x=[-body_rad*0.5, body_rad*0.5])\n            for(side=[-1,1]){\n                translate([x, side*body_rad*0.6, 0])\n                rotate([90,0,0])\n                cylinder(h=leg_len, r1=leg_rad, r2=paw_rad);\n            }\n\n        // Tail\n        translate([-body_rad-5, 0, leg_len+body_rad*0.3])\n        rotate([0,20,0])\n        scale([1,1,0.8])\n        cylinder(h=tail_len, r1=tail_rad, r2=tail_rad*0.5);\n\n        // Eyes\n        for(side=[-1,1]){\n            translate([body_rad+head_rad*1.1, side*head_rad*0.5, leg_len+body_rad*0.7+head_rad*0.2])\n            sphere(r=eye_rad);\n            translate([body_rad+head_rad*1.1, side*head_rad*0.5, leg_len+body_rad*0.7+head_rad*0.2])\n            scale([0.5,0.5,0.2])\n            sphere(r=eye_rad);\n        }\n\n        // Whiskers (thin cylinders for printability)\n        for(side=[-1,1])\n            for(angle=[-30,0,30]){\n                translate([body_rad+head_rad*1.7, side*head_rad*0.5, leg_len+body_rad*0.7])\n                rotate([0, side*angle, 0])\n                cylinder(h=whisker_len, r=0.4);\n            }\n\n        // Fur texture (small bumps)\n        for(i=[0:10:360]){\n            for(j=[0:15:45]){\n                rotate([0,0,i])\n                translate([body_rad*0.8, 0, leg_len+j])\n                sphere(r=0.8);\n            }\n        }\n    }\n}\n\n// Render\nlemming();",
    "renders": true
  },
  {
    "animal": "leopard",
    "openscad_code": "// Leopard Model - Realistic Style, Medium Complexity\n// Roughly 80mm long, 40mm tall, 20mm thick\n\n// Overall scale factor\nscale_factor = 1;\n\n// Leopard body module\nmodule leopard_body() {\n    // Main torso\n    translate([0, 0, 15])\n    scale([1.2, 0.6, 0.5])\n    sphere(d=40);\n    \n    // Chest area\n    translate([15, 0, 12])\n    scale([0.7, 0.5, 0.4])\n    sphere(d=30);\n    \n    // Rear hips\n    translate([-15, 0, 12])\n    scale([0.8, 0.6, 0.5])\n    sphere(d=35);\n}\n\n// Leopard head module\nmodule leopard_head() {\n    // Main head shape\n    translate([25, 0, 25])\n    scale([0.8, 0.6, 0.7])\n    sphere(d=25);\n    \n    // Snout\n    translate([32, 0, 22])\n    scale([0.6, 0.4, 0.3])\n    sphere(d=15);\n    \n    // Ears (two spheres each for inner/outer)\n    translate([22, 10, 30])\n    scale([0.3, 0.2, 0.4])\n    sphere(d=10);\n    \n    translate([22, -10, 30])\n    scale([0.3, 0.2, 0.4])\n    sphere(d=10);\n    \n    // Inner ears\n    translate([22, 10, 31])\n    scale([0.2, 0.15, 0.3])\n    color(\"pink\")\n    sphere(d=8);\n    \n    translate([22, -10, 31])\n    scale([0.2, 0.15, 0.3])\n    color(\"pink\")\n    sphere(d=8);\n}\n\n// Leopard legs module\nmodule leopard_legs() {\n    // Front legs\n    for(side = [-1, 1]) {\n        // Upper leg\n        translate([15, side*8, 18])\n        rotate([0, 15, 0])\n        scale([0.3, 0.3, 1])\n        cylinder(h=15, d1=8, d2=6);\n        \n        // Lower leg\n        translate([15, side*8, 8])\n        rotate([0, 15, 0])\n        scale([0.25, 0.25, 1])\n        cylinder(h=12, d1=6, d2=5);\n        \n        // Paw\n        translate([15, side*8, 2])\n        scale([0.6, 0.6, 0.4])\n    sphere(d=8);\n    }\n    \n    // Rear legs\n    for(side = [-1, 1]) {\n        // Upper leg\n        translate([-15, side*8, 18])\n        rotate([0, -15, 0])\n        scale([0.35, 0.35, 1])\n        cylinder(h=16, d1=9, d2=7);\n        \n        // Lower leg\n        translate([-15, side*8, 7])\n        rotate([0, -15, 0])\n        scale([0.3, 0.3, 1])\n        cylinder(h=13, d1=7, d2=6);\n        \n        // Paw\n        translate([-15, side*8, 1])\n        scale([0.7, 0.7, 0.5])\n    sphere(d=9);\n    }\n}\n\n// Leopard tail module\nmodule leopard_tail() {\n    // Tail segments\n    for(i = [0:3]) {\n        translate([-20 - i*5, 0, 15 - i*2])\n        rotate([0, -15 - i*5, 0])\n        scale([0.4 - i*0.05, 0.4 - i*0.05, 0.8])\n        sphere(d=8 - i);\n    }\n    \n    // Tail tip\n    translate([-35, 0, 8])\n    scale([0.3, 0.3, 0.3])\n    sphere(d=6);\n}\n\n// Leopard spots module\nmodule leopard_spots() {\n    // Define spot positions on body\n    spot_positions = [\n        [20, 5, 20], [20, -5, 20], [10, 8, 18], [10, -8, 18],\n        [0, 6, 17], [0, -6, 17], [-10, 7, 16], [-10, -7, 16],\n        [-20, 5, 15], [-20, -5, 15], [15, 0, 25], [5, 0, 24],\n        [-5, 0, 22], [-15, 0, 20]\n    ];\n    \n    // Create spots\n    for(pos = spot_positions) {\n        translate(pos)\n        scale([0.3, 0.3, 0.1])\n        sphere(d=5);\n    }\n}\n\n// Main leopard assembly\nscale([scale_factor, scale_factor, scale_factor])\nunion() {\n    color(\"tan\") {\n        leopard_body();\n        leopard_head();\n        leopard_legs();\n        leopard_tail();\n    }\n    \n    color(\"black\") {\n        leopard_spots();\n    }\n}",
    "renders": true
  },
  {
    "animal": "leopon",
    "openscad_code": "// Leopon - Medium complexity realistic style\n// Lion body with leopard spots\n// Designed for 3D printing (no overhangs >45 degrees)\n\nmodule leopon() {\n    // Main body\n    union() {\n        // Torso\n        translate([0, 0, 15])\n        scale([1.8, 0.8, 1])\n        sphere(r=12, $fn=20);\n        \n        // Chest\n        translate([12, 0, 8])\n        scale([1.2, 1, 0.8])\n        sphere(r=8, $fn=16);\n        \n        // Hindquarters\n        translate([-15, 0, 12])\n        scale([1.4, 1.1, 1.2])\n        sphere(r=10, $fn=16);\n    }\n    \n    // Head\n    translate([20, 0, 25])\n    rotate([0, -10, 0])\n    scale([1.3, 1, 1.1])\n    sphere(r=8, $fn=20);\n    \n    // Muzzle\n    translate([27, 0, 22])\n    scale([0.8, 0.7, 0.6])\n    sphere(r=5, $fn=16);\n    \n    // Ears\n    for(x = [22, 22], y = [-6, 6]) {\n        translate([x, y, 31])\n        rotate([0, 30, 0])\n        scale([0.3, 0.5, 1])\n        cylinder(r1=3, r2=1, h=4, $fn=8);\n    }\n    \n    // Legs\n    leg_positions = [[15, 8, 8], [15, -8, 8], [-12, 8, 8], [-12, -8, 8]];\n    for(pos = leg_positions) {\n        translate(pos)\n        rotate([10, 0, 0])\n        scale([0.8, 0.8, 1])\n        cylinder(r=3.5, h=15, $fn=12);\n        \n        // Paws\n        translate([pos[0], pos[1], -2])\n        sphere(r=4, $fn=12);\n    }\n    \n    // Tail\n    translate([-22, 0, 18])\n    rotate([20, 0, 0])\n    scale([0.8, 0.8, 1])\n    cylinder(r=2.5, h=20, $fn=8);\n    \n    // Tail tip\n    translate([-22, 0, 0])\n    sphere(r=3.5, $fn=12);\n    \n    // Leopard spots on body\n    spots = [\n        [5, 5, 22], [5, -5, 22], [-5, 6, 20], [-5, -6, 20],\n        [0, 8, 20], [0, -8, 20], [-10, 4, 18], [-10, -4, 18],\n        [10, 3, 24], [10, -3, 24], [15, 0, 26], [-15, 0, 16]\n    ];\n    \n    for(spot = spots) {\n        translate(spot)\n        scale([1, 1, 0.5])\n        sphere(r=1.2, $fn=8);\n    }\n    \n    // Facial features\n    // Eyes\n    for(eye = [[24, 3.5, 26], [24, -3.5, 26]]) {\n        translate(eye)\n        rotate([0, -20, 0])\n        scale([1, 1, 0.3])\n        sphere(r=1, $fn=8);\n    }\n    \n    // Nose\n    translate([30, 0, 23])\n    scale([1, 0.7, 0.5])\n    sphere(r=1.2, $fn=8);\n    \n    // Whiskers\n    whisker_positions = [[29, 2, 22], [29, -2, 22], [29, 1, 21], [29, -1, 21]];\n    for(w = whisker_positions) {\n        translate(w)\n        rotate([0, 0, w[1] > 0 ? 15 : -15])\n        scale([1, 0.2, 0.2])\n        cube([4, 1, 0.5]);\n    }\n}\n\n// Scale to 70mm length\nscale(0.7)\nleopon();",
    "renders": true
  },
  {
    "animal": "limpkin",
    "openscad_code": "// Limpkin 3D model - medium complexity realistic style\n// Total length ~80mm, suitable for desktop 3D printing\n\n$fn = 32;  // Smooth curves\n\nmodule body() {\n    // Main body as elongated sphere\n    scale([2.5, 1.2, 1]) \n        sphere(10);\n}\n\nmodule neck() {\n    // Long curved neck\n    translate([22, 0, 6]) {\n        rotate([0, -20, 0]) \n            cylinder(h = 20, r1 = 4, r2 = 2.5);\n    }\n}\n\nmodule head() {\n    // Small head with long bill\n    translate([38, 0, 9]) {\n        rotate([0, -20, 0]) {\n            // Head\n            sphere(3.5);\n            \n            // Long slightly curved bill\n            translate([3.5, 0, -0.5]) {\n                rotate([0, -10, 0]) \n                    scale([1, 0.4, 0.4]) \n                        cylinder(h = 15, r1 = 2, r2 = 0.5);\n            }\n            \n            // Eye\n            translate([2, 1.5, 0.5]) \n                sphere(1);\n        }\n    }\n}\n\nmodule wing() {\n    // Folded wing on body\n    translate([5, 10, 5]) {\n        rotate([0, 0, 15]) \n            scale([2, 0.8, 0.3]) \n                sphere(8);\n    }\n}\n\nmodule tail() {\n    // Fan tail feathers\n    for(i = [0:2]) {\n        rotate([0, 0, -10 + i * 10]) {\n            translate([-20, -2 + i * 2, 2]) \n                scale([1, 0.2, 0.1]) \n                    cube([12, 4, 1]);\n        }\n    }\n}\n\nmodule leg(side) {\n    // Long legs with joints\n    translate([10, side * 4, -8]) {\n        // Upper leg\n        cylinder(h = 12, r = 1.5);\n        \n        // Knee joint\n        translate([0, 0, -12]) {\n            sphere(2);\n            \n            // Lower leg\n            rotate([side * 15, 0, 0]) \n                cylinder(h = 8, r = 1.2);\n                \n            // Foot\n            translate([0, side * 3, -8]) {\n                rotate([90, 0, side * 20]) \n                    scale([2, 0.8, 0.5]) \n                        cylinder(h = 6, r1 = 1.5, r2 = 0.8);\n                \n                // Toes\n                for(j = [0:2]) {\n                    rotate([0, 0, -30 + j * 30]) \n                        translate([0, 0, 0.5]) \n                            scale([1.5, 0.3, 0.3]) \n                                cylinder(h = 3, r1 = 1, r2 = 0.5);\n                }\n            }\n        }\n    }\n}\n\nmodule feathers() {\n    // Body feather texture\n    for(i = [0:5]) {\n        rotate([0, 0, i * 60]) {\n            translate([0, 0, 8]) \n                scale([1.5, 1, 0.2]) \n                    sphere(8);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    neck();\n    head();\n    wing();\n    mirror([0, 1, 0]) wing();\n    tail();\n    leg(1);\n    leg(-1);\n    feathers();\n}",
    "renders": true
  },
  {
    "animal": "limpet",
    "openscad_code": "// Realistic Limpet - Medium Complexity\n// Approx 70mm L x 50mm W x 35mm H\n\n// Shell parameters\nshell_height = 30;\nbase_diameter = 50;\napex_offset = 15;  // Apex shifted forward\n\n// Foot parameters\nfoot_diameter = 40;\nfoot_height = 8;\n\n// Radial ribs parameters\nnum_ribs = 12;\nrib_height = 3;\nrib_width = 2;\n\n// Growth ridges\nnum_ridges = 8;\nridge_height = 0.8;\n\nmodule shell_base() {\n    // Main cone with elliptical base\n    scale([1.2, 1, 1])\n    cylinder(h=shell_height, d1=base_diameter, d2=0, $fn=100);\n}\n\nmodule growth_ridges() {\n    // Concentric growth ridges\n    for(i = [1:num_ridges]) {\n        translate([0, 0, shell_height/num_ridges * i])\n        difference() {\n            scale([1.2, 1, 1])\n            cylinder(h=ridge_height*2, d1=base_diameter*(1-i/num_ridges*0.8), d2=base_diameter*(1-i/num_ridges*0.8), $fn=100);\n            scale([1.19, 0.99, 1])\n            cylinder(h=ridge_height*2+0.1, d1=base_diameter*(1-i/num_ridges*0.8)-1, d2=base_diameter*(1-i/num_ridges*0.8)-1, $fn=100);\n        }\n    }\n}\n\nmodule radial_ribs() {\n    // Radial strengthening ribs\n    for(i = [0:num_ribs-1]) {\n        rotate([0, 0, i*360/num_ribs])\n        translate([0, base_diameter/4, shell_height/2])\n        rotate([90, 0, 0])\n        scale([1, 3, 1])\n        cylinder(h=shell_height/2, d1=rib_width, d2=0, $fn=20);\n    }\n}\n\nmodule shell_aperture() {\n    // Elliptical shell base opening\n    translate([0, 0, -0.1])\n    scale([1.2, 1, 1])\n    cylinder(h=foot_height+0.2, d=base_diameter, $fn=100);\n}\n\nmodule muscular_foot() {\n    // Muscular foot with slight dome\n    translate([0, 0, -foot_height/2])\n    scale([1.05, 0.9, 1])\n    cylinder(h=foot_height, d=foot_diameter, $fn=100);\n    \n    // Underside texture\n    for(i = [0:5]) {\n        rotate([0, 0, i*30])\n        translate([foot_diameter/3, 0, -foot_height+0.2])\n        cube([foot_diameter/10, foot_diameter/30, foot_height], center=true);\n    }\n}\n\nmodule shell() {\n    // Complete shell assembly\n    difference() {\n        union() {\n            shell_base();\n            growth_ridges();\n            radial_ribs();\n        }\n        \n        // Hollow interior\n        translate([0, 0, -5])\n        scale([1.15, 0.95, 1.2])\n        cylinder(h=shell_height+10, d=foot_diameter-4, $fn=100);\n    }\n}\n\n// Position limpet on print bed\ntranslate([0, 0, foot_height/2]) {\n    // Foot\n    muscular_foot();\n    \n    // Shell\n    translate([0, 0, foot_height/2])\n    shell();\n}",
    "renders": true
  },
  {
    "animal": "linnet",
    "openscad_code": "// Linnet - medium complexity realistic style\n// Suitable for FDM printing, 100mm length\n\n$fn = 36; // Smooth curves\n\n// Main body\nmodule body() {\n    // Torso - slightly flattened ellipsoid\n    scale([1, 0.7, 0.5]) sphere(r=20);\n    \n    // Tail base\n    translate([0, -25, 0]) rotate([0, 0, 0])\n        scale([0.8, 0.4, 0.2]) sphere(r=15);\n    \n    // Tail feathers - 6 tapered cylinders\n    for(i=[-2:2]) {\n        translate([i*4, -35, 0])\n            rotate([0, 10, i*3])\n            scale([0.3, 1, 0.1]) cylinder(h=20, r1=5, r2=2);\n    }\n}\n\n// Head with realistic proportions\nmodule head() {\n    // Main head sphere\n    translate([0, 20, 12]) sphere(r=10);\n    \n    // Beak - conical\n    translate([0, 30, 12])\n        rotate([0, 90, 0])\n        cylinder(h=12, r1=0.5, r2=2);\n    \n    // Crest - small raised feathers\n    for(i=[-1:1]) {\n        translate([i*3, 15, 16])\n            rotate([i*10, 0, 0])\n            scale([0.3, 0.3, 1]) cylinder(h=5, r=2);\n    }\n}\n\n// Wing structure\nmodule wing(side) {\n    mirror([side, 0, 0]) {\n        // Primary wing section\n        translate([-15, 0, 5])\n            rotate([0, 0, -20])\n            scale([0.15, 1, 0.5])\n            cylinder(h=35, r=8);\n        \n        // Secondary feathers - layered cylinders\n        for(i=[0:3]) {\n            translate([-15-i*3, i*5-5, 5+i])\n                rotate([0, 0, -30-i*5])\n                scale([0.1, 0.8, 0.1])\n                cylinder(h=20-i*3, r=6-i);\n        }\n        \n        // Wing coverts\n        translate([-10, 5, 8])\n            scale([0.1, 0.6, 0.4])\n            sphere(r=8);\n    }\n}\n\n// Leg and foot\nmodule leg(side) {\n    mirror([side, 0, 0]) {\n        // Upper leg\n        translate([-8, -10, -8])\n            rotate([15, 0, 0])\n            cylinder(h=8, r=1.5);\n        \n        // Lower leg\n        translate([-8, -10, -15])\n            rotate([45, 0, 0])\n            cylinder(h=6, r=1.2);\n        \n        // Foot with toes\n        translate([-8, -10, -20])\n            rotate([90, 0, 0]) {\n            // Central toe\n            cylinder(h=4, r=0.8);\n            \n            // Side toes\n            translate([0, 1, 0]) rotate([0, 30, 0])\n                cylinder(h=3.5, r=0.6);\n            translate([0, -1, 0]) rotate([0, -30, 0])\n                cylinder(h=3.5, r=0.6);\n            \n            // Back toe\n            translate([0, 0, -1.5]) rotate([0, -45, 0])\n                cylinder(h=2, r=0.5);\n        }\n    }\n}\n\n// Eye detail\nmodule eye(side) {\n    mirror([side, 0, 0]) {\n        translate([-5, 23, 14])\n            sphere(r=1.5);\n        \n        // Pupil\n        translate([-6, 23.5, 15])\n            sphere(r=0.7);\n    }\n}\n\n// Chest feather detail\nmodule chest() {\n    for(i=[0:5]) {\n        for(j=[-3:3]) {\n            translate([j*2, 5-i*2, -5+i])\n                rotate([0, 0, j*5])\n                scale([0.3, 0.3, 0.1])\n                sphere(r=3-i*0.3);\n        }\n    }\n}\n\n// Assemble the linnet\nunion() {\n    body();\n    head();\n    wing(1);   // Left wing\n    wing(-1);  // Right wing\n    leg(1);    // Left leg\n    leg(-1);   // Right leg\n    eye(1);    // Left eye\n    eye(-1);   // Right eye\n    chest();\n}\n\n// Add printing support base\ntranslate([0, 0, -22])\n    cube([40, 60, 1], center=true);",
    "renders": true
  },
  {
    "animal": "lion",
    "openscad_code": "// Lion - Realistic Medium Complexity\n// Dimensions: ~80mm long, ~50mm tall\n\n$fn = 32;\n\n// Main lion body\nmodule lion() {\n    union() {\n        // Body\n        body();\n        \n        // Head\n        translate([30, 0, 15]) head();\n        \n        // Legs\n        leg(-20, -8, 0);\n        leg(-20, 8, 0);\n        leg(10, -8, 0);\n        leg(10, 8, 0);\n        \n        // Tail\n        tail();\n    }\n}\n\n// Lion body with mane area\nmodule body() {\n    difference() {\n        union() {\n            // Main torso\n            translate([0, 0, 15]) scale([1.8, 1, 1]) sphere(15);\n            \n            // Chest\n            translate([25, 0, 12]) scale([1.2, 0.8, 0.8]) sphere(12);\n            \n            // Hind quarters\n            translate([-25, 0, 12]) scale([1.3, 0.9, 0.9]) sphere(12);\n            \n            // Back ridge\n            for(i = [-15:5:25]) {\n                translate([i, 0, 25]) rotate([90, 0, 0]) \n                cylinder(h=3, r1=5, r2=3);\n            }\n        }\n        \n        // Hollow for printing\n        translate([0, 0, 15]) scale([1.6, 0.8, 0.8]) sphere(12);\n    }\n}\n\n// Lion head with realistic features\nmodule head() {\n    difference() {\n        union() {\n            // Skull\n            scale([1.2, 1, 1.1]) sphere(12);\n            \n            // Muzzle\n            translate([10, 0, -3]) scale([1.5, 0.8, 0.7]) sphere(8);\n            \n            // Nose\n            translate([17, 0, 0]) rotate([90, 0, 0]) \n            cylinder(h=5, r1=4, r2=3);\n            \n            // Ears\n            ear(0, 8, 8);\n            ear(0, -8, 8);\n            \n            // Mane\n            mane();\n            \n            // Eyes\n            eye(5, 5, 3);\n            eye(5, -5, 3);\n        }\n        \n        // Eye sockets\n        translate([5, 5, 3]) sphere(2);\n        translate([5, -5, 3]) sphere(2);\n        \n        // Nostrils\n        translate([17, 2, 0]) rotate([90, 0, 0]) \n        cylinder(h=3, r=1);\n        translate([17, -2, 0]) rotate([90, 0, 0]) \n        cylinder(h=3, r=1);\n        \n        // Hollow head\n        scale([1, 0.8, 0.9]) sphere(9);\n    }\n}\n\n// Lion ear\nmodule ear(x, y, z) {\n    translate([x, y, z]) {\n        rotate([45 * (y > 0 ? 1 : -1), 0, 0]) {\n            difference() {\n                scale([0.7, 0.5, 1]) sphere(4);\n                translate([0, 0, -1]) sphere(3);\n            }\n        }\n    }\n}\n\n// Lion eye\nmodule eye(x, y, z) {\n    translate([x, y, z]) {\n        color(\"black\") sphere(1.5);\n    }\n}\n\n// Lion mane using cylinders\nmodule mane() {\n    for(a = [0:30:359]) {\n        for(r = [14:2:18]) {\n            rotate([0, 0, a]) {\n                translate([r, 0, 0]) {\n                    rotate([0, 90, 0]) {\n                        cylinder(h=8, r1=3, r2=2);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Lion leg\nmodule leg(x, y, z) {\n    translate([x, y, z]) {\n        union() {\n            // Upper leg\n            translate([0, 0, 5]) {\n                rotate([0, 0, -10]) {\n                    cylinder(h=20, r1=5, r2=4);\n                }\n            }\n            \n            // Lower leg\n            translate([0, 0, -10]) {\n                cylinder(h=15, r1=4, r2=3.5);\n            }\n            \n            // Paw\n            translate([0, 0, -20]) {\n                scale([1.2, 1, 0.8]) sphere(4);\n            }\n        }\n    }\n}\n\n// Lion tail\nmodule tail() {\n    translate([-35, 0, 15]) {\n        rotate([0, 30, 0]) {\n            union() {\n                // Tail base\n                cylinder(h=25, r1=3, r2=2);\n                \n                // Tail tuft\n                translate([0, 0, -30]) {\n                    rotate([0, 45, 0]) {\n                        scale([1.5, 1.5, 1]) sphere(5);\n                        \n                        // Tuft details\n                        for(i = [0:45:359]) {\n                            rotate([0, 0, i]) {\n                                translate([4, 0, 0]) {\n                                    cylinder(h=6, r1=1.5, r2=0.5);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Base for stability\nmodule base() {\n    translate([0, 0, -25]) {\n        cube([90, 40, 5], center=true);\n    }\n}\n\n// Generate the lion\nlion();\nbase();",
    "renders": true
  },
  {
    "animal": "lionfish",
    "openscad_code": "// Lionfish - Realistic Style, Medium Complexity\n// 3D printable, ~80mm long\n\n// Parameters\n$fn = 32;\nbody_length = 40;\nbody_height = 25;\ntail_length = 35;\nfin_height = 30;\n\n// Main body\nmodule body() {\n    union() {\n        // Torso\n        translate([0, 0, 0])\n            scale([1.3, 1, 1])\n            sphere(d=body_height);\n        \n        // Head\n        translate([body_length/2, 0, 0])\n            sphere(d=body_height*0.8);\n        \n        // Snout\n        translate([body_length/2 + 10, 0, -2])\n            rotate([0, 10, 0])\n            cylinder(h=10, d1=8, d2=5);\n    }\n}\n\n// Tail\nmodule tail() {\n    translate([-body_length/2, 0, 0])\n        rotate([0, -10, 0])\n        cylinder(h=tail_length, d1=body_height*0.6, d2=2);\n}\n\n// Dorsal spines\nmodule dorsal_spines() {\n    for(i = [-15:5:15]) {\n        translate([i, 0, body_height/2 + 5])\n            rotate([0, -5, 0])\n            cylinder(h=fin_height, d1=1.5, d2=0.5);\n    }\n}\n\n// Pectoral fins\nmodule pectoral_fin(side) {\n    translate([body_length/4, side*body_height/2, -5])\n        rotate([0, 0, side*30])\n        for(i = [0:4]) {\n            translate([i*3, 0, 0])\n                rotate([0, i*5, 0])\n                cylinder(h=15-i, d1=2, d2=1);\n        }\n}\n\n// Stripes pattern\nmodule stripes() {\n    for(i = [-20:5:20]) {\n        translate([i, 0, 0])\n            scale([1, 1.2, 1])\n            difference() {\n                sphere(d=body_height*1.1);\n                translate([0, 0, -body_height/2])\n                    cube([body_height*2, body_height*2, body_height], center=true);\n            }\n    }\n}\n\n// Eyes\nmodule eye(side) {\n    translate([body_length/2 + 8, side*body_height/3, body_height/4])\n        sphere(d=4);\n    translate([body_length/2 + 9.5, side*body_height/3, body_height/4])\n        sphere(d=2);\n}\n\n// Main assembly\nunion() {\n    // Body structure\n    union() {\n        body();\n        tail();\n    }\n    \n    // Fins\n    dorsal_spines();\n    pectoral_fin(1);\n    pectoral_fin(-1);\n    \n    // Stripes overlay\n    stripes();\n    \n    // Eyes\n    eye(1);\n    eye(-1);\n    \n    // Ventral fins\n    translate([5, body_height/2, -body_height/2 - 5])\n        rotate([90, 0, 30])\n        cylinder(h=8, d1=2, d2=1);\n    translate([5, -body_height/2, -body_height/2 - 5])\n        rotate([90, 0, -30])\n        cylinder(h=8, d1=2, d2=1);\n}",
    "renders": true
  },
  {
    "animal": "lizard",
    "openscad_code": "// Realistic Lizard - Medium Complexity\n// Overall dimensions ~80mm length\n\n$fn = 32; // Smooth curves\n\nmodule lizard_body() {\n    // Main body - elongated ellipsoid\n    scale([1.2, 0.6, 0.4])\n        sphere(20);\n}\n\nmodule lizard_head() {\n    // Head - slightly flattened teardrop\n    translate([25, 0, 2])\n        scale([0.8, 0.7, 0.6])\n            sphere(15);\n    \n    // Snout extension\n    translate([37, 0, 0])\n        scale([1.5, 0.6, 0.5])\n            sphere(5);\n}\n\nmodule lizard_tail() {\n    // Tail - tapered cylinder segments\n    for(i = [0:9]) {\n        translate([-20 - i*4, 0, -i*0.5])\n            scale([1 - i*0.08, 1 - i*0.08, 1 - i*0.05])\n                rotate([0, 10*i, 0])\n                    cylinder(h=4, r1=6-i*0.5, r2=5.5-i*0.5);\n    }\n}\n\nmodule lizard_leg(side, angle) {\n    // Upper leg\n    translate([10*side, side*8, -8])\n        rotate([0, 0, angle])\n            rotate([45, 0, 0])\n                scale([0.8, 0.8, 2])\n                    cylinder(h=8, r1=3, r2=2.5);\n    \n    // Lower leg\n    translate([10*side, side*12, -18])\n        rotate([0, 0, angle])\n            rotate([0, 30*side, 0])\n                scale([0.6, 0.6, 1.5])\n                    cylinder(h=10, r1=2.5, r2=2);\n    \n    // Foot\n    translate([10*side, side*15, -28])\n        rotate([0, 0, angle])\n            scale([2, side*0.8, 0.8])\n                cube([6, 4, 3], center=true);\n}\n\nmodule lizard_legs() {\n    // Front legs\n    lizard_leg(1, 30);\n    lizard_leg(-1, -30);\n    \n    // Rear legs\n    translate([-15, 0, 0])\n        lizard_leg(1, -30);\n    translate([-15, 0, 0])\n        lizard_leg(-1, 30);\n}\n\nmodule lizard_eyes() {\n    // Eyes - small spheres\n    translate([33, 6, 5])\n        sphere(2);\n    translate([33, -6, 5])\n        sphere(2);\n}\n\nmodule lizard_spine() {\n    // Scales along back\n    for(i = [0:15]) {\n        translate([-10 + i*3, 0, 8])\n            scale([1, 2, 0.5])\n                rotate([0, 5*sin(i*20), 0])\n                    sphere(1.5);\n    }\n}\n\nmodule lizard_toes() {\n    // Toes for each foot\n    for(foot = [1, -1]) {\n        for(pos = [0, 10]) {\n            for(toe = [1, 0, -1]) {\n                translate([pos*foot, foot*15 + toe*2, -30])\n                    scale([0.8, foot*0.3, 0.5])\n                        cylinder(h=4, r1=1, r2=0.5);\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    lizard_body();\n    lizard_head();\n    lizard_tail();\n    lizard_legs();\n    lizard_eyes();\n    lizard_spine();\n    lizard_toes();\n}\n\n// Add base platform for better printing\ntranslate([0, 0, -32])\n    scale([1.2, 0.5, 0.1])\n        cube([80, 60, 5], center=true);",
    "renders": true
  },
  {
    "animal": "llama",
    "openscad_code": "// Realistic 3D printable llama with medium complexity\n// Scale factor for easy resizing\nscale_factor = 1;\n\n// Helper module for rounded boxes\nmodule rounded_box(size, radius, center = false) {\n    translate([0, 0, center ? -size[2]/2 : 0])\n    minkowski() {\n        cube([size[0]-2*radius, size[1]-2*radius, size[2]-2*radius], center = true);\n        sphere(radius);\n    }\n}\n\n// Leg module with hoof\nmodule leg(height, width) {\n    union() {\n        // Upper leg\n        translate([0, 0, height/2])\n            cylinder(h = height * 0.7, d = width, $fn = 8);\n        \n        // Lower leg\n        translate([0, 0, height * 0.3])\n            cylinder(h = height * 0.3, d = width * 0.8, $fn = 8);\n        \n        // Hoof\n        translate([0, 0, 0])\n            cylinder(h = height * 0.1, d1 = width * 0.8, d2 = width * 0.6, $fn = 8);\n    }\n}\n\n// Ear module\nmodule ear() {\n    rotate([0, -20, 0])\n    scale([0.5, 0.2, 1])\n    cylinder(h = 12, d1 = 8, d2 = 4, $fn = 6);\n}\n\n// Neck module\nmodule neck() {\n    rotate([0, 30, 0])\n    scale([1, 0.8, 1.2])\n    cylinder(h = 25, d1 = 18, d2 = 12, $fn = 8);\n}\n\n// Tail module\nmodule tail() {\n    rotate([0, 45, 0])\n    scale([0.8, 0.8, 1])\n    cylinder(h = 15, d1 = 6, d2 = 3, $fn = 8);\n}\n\n// Main llama body\nmodule llama() {\n    scale([scale_factor, scale_factor, scale_factor])\n    union() {\n        // Body - main torso\n        translate([0, 0, 25])\n            rounded_box([35, 20, 25], 5);\n        \n        // Neck\n        translate([-15, 0, 35])\n            neck();\n        \n        // Head\n        translate([-25, 0, 45])\n            scale([1.2, 0.9, 1])\n            sphere(d = 15, $fn = 12);\n        \n        // Ears\n        translate([-28, 5, 52])\n            ear();\n        translate([-28, -5, 52])\n            ear();\n        \n        // Legs - front\n        translate([-10, 8, 12])\n            leg(20, 6);\n        translate([-10, -8, 12])\n            leg(20, 6);\n        \n        // Legs - back\n        translate([10, 8, 12])\n            leg(20, 6);\n        translate([10, -8, 12])\n            leg(20, 6);\n        \n        // Tail\n        translate([17, 0, 25])\n            tail();\n        \n        // Snout\n        translate([-30, 0, 42])\n            scale([1.5, 0.8, 0.6])\n            sphere(d = 8, $fn = 8);\n        \n        // Eyes\n        translate([-27, 4, 47])\n            sphere(d = 2, $fn = 8);\n        translate([-27, -4, 47])\n            sphere(d = 2, $fn = 8);\n    }\n}\n\n// Generate the llama\nllama();",
    "renders": true
  },
  {
    "animal": "loach",
    "openscad_code": "// Loach - Realistic Style, Medium Complexity\n// Overall dimensions: ~80mm long, ~20mm tall, ~15mm wide\n\n// Body parameters\nbody_length = 80;\nbody_height = 20;\nbody_width = 15;\n\n// Head parameters\nhead_length = 15;\nhead_height = 12;\nhead_width = 10;\n\n// Tail parameters\ntail_length = 20;\n\n// Fin parameters\nfin_height = 6;\nfin_thickness = 1.5;\n\n// Eye parameters\neye_radius = 2;\neye_offset = 3;\n\n// Barbel parameters\nbarbel_length = 8;\nbarbel_radius = 0.5;\n\n// Body segments\nsegments = 12;\n\n// Main body module\nmodule loach_body() {\n    // Create tapered body using hull of spheres\n    for(i = [0:segments]) {\n        translate([i * (body_length / segments), 0, 0]) {\n            // Tapering calculation\n            taper = 1 - (i / segments) * 0.7;\n            sphere(r = body_width/2 * taper, $fn = 16);\n        }\n    }\n    \n    // Add dorsal ridge\n    for(i = [3:segments-2]) {\n        translate([i * (body_length / segments), 0, body_height/2 * (1 - i/segments)]) {\n            cube([body_length/segments * 0.8, body_width * 0.3, body_height * 0.3], center = true);\n        }\n    }\n}\n\n// Head module\nmodule loach_head() {\n    // Main head shape\n    translate([-body_length/2 - head_length/2, 0, 0]) {\n        // Head sphere\n        sphere(r = head_width/2, $fn = 16);\n        \n        // Snout extension\n        translate([-head_length/2, 0, -head_height/4]) {\n            scale([1.5, 0.8, 0.6]) {\n                sphere(r = head_width/2, $fn = 16);\n            }\n        }\n        \n        // Mouth opening\n        difference() {\n            translate([-head_length/2 - 1, 0, -head_height/3]) {\n                sphere(r = head_width/2.5, $fn = 16);\n            }\n            translate([-head_length/2 - 2, 0, -head_height/3]) {\n                sphere(r = head_width/2.8, $fn = 16);\n            }\n        }\n    }\n}\n\n// Tail module\nmodule loach_tail() {\n    // Tail fin\n    translate([body_length/2 + tail_length/2, 0, 0]) {\n        rotate([0, 0, 90]) {\n            linear_extrude(height = fin_thickness) {\n                polygon(points = [\n                    [0, 0],\n                    [tail_length, body_width/3],\n                    [tail_length, -body_width/3],\n                    [0, 0]\n                ]);\n            }\n        }\n    }\n    \n    // Tail body taper\n    translate([body_length/2 + tail_length/4, 0, 0]) {\n        scale([0.3, 0.3, 0.3]) {\n            sphere(r = body_width/2, $fn = 16);\n        }\n    }\n}\n\n// Dorsal fin module\nmodule dorsal_fin() {\n    for(i = [2:segments-3]) {\n        translate([i * (body_length / segments), 0, body_height/2]) {\n            rotate([90, 0, 0]) {\n                cylinder(h = fin_height * (1 - i/segments), r1 = fin_thickness, r2 = 0.5, $fn = 8);\n            }\n        }\n    }\n}\n\n// Pectoral fins module\nmodule pectoral_fins() {\n    // Left fin\n    translate([-body_length/4, body_width/2 + 1, -body_height/4]) {\n        rotate([0, 90, 30]) {\n            cylinder(h = fin_height, r1 = fin_thickness * 2, r2 = 0.5, $fn = 8);\n        }\n    }\n    \n    // Right fin\n    translate([-body_length/4, -body_width/2 - 1, -body_height/4]) {\n        rotate([0, 90, -30]) {\n            cylinder(h = fin_height, r1 = fin_thickness * 2, r2 = 0.5, $fn = 8);\n        }\n    }\n}\n\n// Eyes module\nmodule loach_eyes() {\n    // Left eye\n    translate([-body_length/2 - head_length/2 + eye_offset, head_width/2 - 1, head_height/4]) {\n        sphere(r = eye_radius, $fn = 8);\n    }\n    \n    // Right eye\n    translate([-body_length/2 - head_length/2 + eye_offset, -head_width/2 + 1, head_height/4]) {\n        sphere(r = eye_radius, $fn = 8);\n    }\n}\n\n// Barbel (whiskers) module\nmodule loach_barbels() {\n    // Top barbels\n    for(side = [-1, 1]) {\n        translate([-body_length/2 - head_length/2 + 2, side * (head_width/2 - 1), -head_height/3]) {\n            rotate([0, -side * 15, side * 30]) {\n                cylinder(h = barbel_length, r = barbel_radius, $fn = 8);\n            }\n        }\n    }\n    \n    // Bottom barbels\n    for(side = [-1, 1]) {\n        translate([-body_length/2 - head_length/2 + 1, side * (head_width/3), -head_height/2]) {\n            rotate([0, side * 15, side * 20]) {\n                cylinder(h = barbel_length * 0.7, r = barbel_radius * 0.8, $fn = 8);\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Central positioning\n    translate([0, 0, body_height/2]) {\n        // Main body parts\n        union() {\n            loach_body();\n            loach_head();\n            loach_tail();\n        }\n        \n        // Fins\n        union() {\n            dorsal_fin();\n            pectoral_fins();\n        }\n        \n        // Details\n        union() {\n            loach_eyes();\n            loach_barbels();\n        }\n    }\n}",
    "renders": true
  },
  {
    "animal": "lobster",
    "openscad_code": "// Lobster - Realistic Medium Complexity\n// Approx 75mm long\n\nmodule lobster_body() {\n    // Main carapace\n    difference() {\n        scale([1.3, 1, 0.8]) sphere(d=30, $fn=60);\n        translate([0, 0, -5]) cube([35, 35, 20], center=true);\n    }\n    \n    // Tail segments\n    for(i=[1:6]) {\n        translate([0, 0, -i*6-12]) {\n            rotate([0, 0, i*5]) {\n                scale([1.2-0.1*i, 1-0.08*i, 0.4]) sphere(d=25-i*2, $fn=40);\n            }\n        }\n    }\n    \n    // Eyes on stalks\n    for(side=[-1,1]) {\n        translate([side*10, 12, 10]) {\n            rotate([0, side*20, 0]) {\n                cylinder(h=8, d1=3, d2=2, $fn=8);\n                translate([0, 0, 9]) sphere(d=3);\n            }\n        }\n    }\n}\n\nmodule claw(side) {\n    translate([side*20, 0, 0]) {\n        rotate([0, 0, side*30]) {\n            // Upper claw\n            translate([0, 0, 5]) {\n                rotate([0, -20, 0]) {\n                    difference() {\n                        scale([2, 1, 0.8]) sphere(d=12, $fn=30);\n                        translate([0, -8, 0]) cube([20, 16, 10], center=true);\n                    }\n                }\n            }\n            // Lower claw\n            translate([0, 0, -5]) {\n                rotate([0, 20, 0]) {\n                    mirror([0, 0, 1]) {\n                        difference() {\n                            scale([2, 1, 0.8]) sphere(d=12, $fn=30);\n                            translate([0, -8, 0]) cube([20, 16, 10], center=true);\n                        }\n                    }\n                }\n            }\n            // Claw joint\n            sphere(d=8);\n        }\n    }\n}\n\nmodule leg_pair(side, angle) {\n    rotate([0, 0, side*angle]) {\n        translate([side*15, 0, -5]) {\n            // Upper leg\n            rotate([0, 0, side*30]) {\n                cylinder(h=15, d1=4, d2=3, $fn=8);\n                translate([7.5, 0, 0]) rotate([0, 90, 0]) cylinder(h=12, d1=3, d2=2, $fn=8);\n            }\n        }\n    }\n}\n\nmodule antenna(side) {\n    translate([side*12, 18, 8]) {\n        rotate([0, -30, side*45]) {\n            for(i=[0:20]) {\n                translate([0, 0, -i*1.5]) {\n                    rotate([0, 0, i*15]) {\n                        cylinder(h=1.5, d=1.5, $fn=6);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    lobster_body();\n    \n    // Claws\n    claw(1);\n    claw(-1);\n    \n    // Legs\n    for(i=[1:3]) {\n        leg_pair(1, 20*i);\n        leg_pair(-1, 20*i);\n    }\n    \n    // Antennae\n    antenna(1);\n    antenna(-1);\n}",
    "renders": true
  },
  {
    "animal": "locust",
    "openscad_code": "// Realistic Locust - Medium Complexity\n// 3D printable model with recognizable anatomy\n\n$fn = 32; // Smooth curves for printing\n\nmodule locust() {\n    // Main body segments\n    color(\"darkolivegreen\")\n    union() {\n        // Head with compound eyes\n        translate([0, 0, 20]) {\n            // Head capsule\n            scale([1.2, 1, 1])\n            sphere(6);\n            \n            // Left compound eye\n            translate([4, 3, 2])\n            sphere(3);\n            \n            // Right compound eye\n            translate([4, -3, 2])\n            sphere(3);\n            \n            // Antennae\n            translate([2, 2, 4])\n            rotate([0, 0, 20])\n            cylinder(h=8, r1=0.5, r2=0.2);\n            \n            translate([2, -2, 4])\n            rotate([0, 0, -20])\n            cylinder(h=8, r1=0.5, r2=0.2);\n            \n            // Mandibles\n            translate([5, 1.5, 0])\n            rotate([0, 0, 30])\n            scale([0.5, 1, 0.5])\n            cylinder(h=3, r=1);\n            \n            translate([5, -1.5, 0])\n            rotate([0, 0, -30])\n            scale([0.5, 1, 0.5])\n            cylinder(h=3, r=1);\n        }\n        \n        // Thorax (prothorax, mesothorax, metathorax)\n        translate([0, 0, 12]) {\n            // Prothorax\n            scale([1.5, 1.2, 1])\n            sphere(4);\n            \n            // Mesothorax\n            translate([0, 0, -3])\n            scale([1.8, 1.4, 1.5])\n            sphere(4);\n            \n            // Metathorax\n            translate([0, 0, -6])\n            scale([1.6, 1.3, 1])\n            sphere(3.5);\n        }\n        \n        // Abdomen segments\n        for(i = [0:4]) {\n            translate([0, 0, 6 - i*2.5]) {\n                scale([1.4 - i*0.1, 1.2 - i*0.1, 0.8])\n                sphere(4);\n            }\n        }\n        \n        // Hind legs (jumping legs)\n        module hind_leg(side) {\n            translate([0, side*4, 8]) {\n                // Coxa\n                rotate([0, 0, side*20])\n                cylinder(h=3, r=1.2);\n                \n                // Femur\n                translate([0, 0, -6])\n                rotate([side*30, 0, side*20])\n                scale([1, 1, 4])\n                cylinder(h=10, r=1);\n                \n                // Tibia\n                translate([0, 0, -16])\n                rotate([side*45, 0, side*15])\n                scale([0.8, 0.8, 3])\n                cylinder(h=12, r=0.8);\n                \n                // Tarsus segments\n                for(j = [0:2]) {\n                    translate([0, 0, -24 - j*2])\n                    rotate([side*60, 0, side*10])\n                    scale([0.6, 0.6, 1])\n                    cylinder(h=3, r=0.5);\n                }\n            }\n        }\n        \n        hind_leg(1);\n        hind_leg(-1);\n        \n        // Middle legs\n        module middle_leg(side) {\n            translate([2, side*3, 10]) {\n                rotate([0, 0, side*30])\n                cylinder(h=2, r=0.8);\n                \n                translate([0, 0, -3])\n                rotate([side*20, 0, side*30])\n                cylinder(h=8, r=0.6);\n                \n                translate([0, 0, -11])\n                rotate([side*40, 0, side*20])\n                cylinder(h=8, r=0.5);\n            }\n        }\n        \n        middle_leg(1);\n        middle_leg(-1);\n        \n        // Front legs\n        module front_leg(side) {\n            translate([6, side*2, 18]) {\n                rotate([0, 0, side*45])\n                cylinder(h=2, r=0.7);\n                \n                translate([0, 0, -3])\n                rotate([side*15, 0, side*45])\n                cylinder(h=6, r=0.6);\n                \n                translate([0, 0, -9])\n                rotate([side*30, 0, side*30])\n                cylinder(h=6, r=0.5);\n            }\n        }\n        \n        front_leg(1);\n        front_leg(-1);\n        \n        // Wings\n        // Tegmina (forewings)\n        color(\"saddlebrown\")\n        translate([0, 0, 8]) {\n            rotate([0, 0, 20])\n            scale([1, 0.2, 3])\n            cube([20, 1, 8], center=true);\n            \n            rotate([0, 0, -20])\n            scale([1, 0.2, 3])\n            cube([20, 1, 8], center=true);\n        }\n        \n        // Hindwings\n        color(\"beige\")\n        translate([-2, 0, 6]) {\n            rotate([0, 0, 30])\n            scale([1.2, 0.1, 2.5])\n            cube([22, 0.5, 10], center=true);\n            \n            rotate([0, 0, -30])\n            scale([1.2, 0.1, 2.5])\n            cube([22, 0.5, 10], center=true);\n        }\n    }\n}\n\n// Create the locust\nlocust();",
    "renders": true
  },
  {
    "animal": "loon",
    "openscad_code": "// Common Loon - Medium Complexity Realistic Style\n// 3D printable model, ~80mm length\n\n$fn = 32;  // Smooth curves\n\n// Main body assembly\nmodule loon() {\n    union() {\n        body();\n        head();\n        neck();\n        wings();\n        tail();\n        feet();\n    }\n}\n\n// Main body - streamlined torpedo shape\nmodule body() {\n    color(\"black\")\n    union() {\n        // Main torso\n        translate([0, 0, 5])\n            scale([1, 0.6, 0.4])\n            sphere(d=40);\n        \n        // Belly bulge\n        translate([0, 0, 2])\n            scale([0.9, 0.5, 0.3])\n            sphere(d=35);\n    }\n}\n\n// Head with distinctive loon features\nmodule head() {\n    translate([20, 0, 12])\n    rotate([0, -10, 0])\n    union() {\n        // Main head shape\n        scale([1.2, 0.8, 0.7])\n        sphere(d=20);\n        \n        // Beak - dagger shaped\n        translate([10, 0, -3])\n            rotate([0, -15, 0])\n            scale([2.5, 0.3, 0.2])\n            cylinder(h=15, d1=8, d2=2);\n        \n        // Red eye\n        translate([5, 8, 2])\n            color(\"darkred\")\n            sphere(d=3);\n    }\n}\n\n// S-curved neck\nmodule neck() {\n    color(\"black\")\n    for(i=[0:5]) {\n        translate([12 - i*2, 0, 8 + i*1.5])\n            rotate([0, -5 - i*3, 0])\n            scale([0.9 - i*0.1, 0.9 - i*0.1, 0.9 - i*0.1])\n            sphere(d=12);\n    }\n}\n\n// Folded wings on back\nmodule wings() {\n    color(\"black\")\n    difference() {\n        // Left wing\n        translate([-5, 8, 12])\n            rotate([0, 15, 30])\n            scale([0.8, 0.1, 0.4])\n            cylinder(h=25, d=15);\n        \n        // Wing detail lines\n        for(i=[0:3]) {\n            translate([-5 + i*3, 8.1, 12])\n                rotate([0, 15, 30])\n                scale([0.7, 0.05, 0.3])\n                cube([20, 1, 3]);\n        }\n        \n        // Right wing - mirrored\n        mirror([0, 1, 0])\n            translate([-5, 8, 12])\n                rotate([0, 15, 30])\n                scale([0.8, 0.1, 0.4])\n                cylinder(h=25, d=15);\n        \n        // Right wing details\n        mirror([0, 1, 0])\n            for(i=[0:3]) {\n                translate([-5 + i*3, 8.1, 12])\n                    rotate([0, 15, 30])\n                    scale([0.7, 0.05, 0.3])\n                    cube([20, 1, 3]);\n            }\n    }\n}\n\n// Tail fan\nmodule tail() {\n    color(\"black\")\n    translate([-22, 0, 5])\n    rotate([0, 10, 0])\n    scale([0.5, 0.8, 0.1])\n    cylinder(h=15, d=20);\n}\n\n// Webbed feet tucked under\nmodule feet() {\n    color(\"darkgray\")\n    // Left foot\n    translate([-5, 6, 1])\n    rotate([90, 0, 0])\n    union() {\n        // Main foot\n        scale([1, 0.2, 0.1])\n        sphere(d=12);\n        \n        // Toes\n        for(angle=[-30, 0, 30]) {\n            rotate([0, 0, angle])\n                translate([6, 0, 0])\n                    scale([0.3, 0.1, 0.05])\n                    sphere(d=8);\n        }\n    }\n    \n    // Right foot\n    mirror([0, 1, 0])\n        translate([-5, 6, 1])\n        rotate([90, 0, 0])\n        union() {\n            scale([1, 0.2, 0.1])\n            sphere(d=12);\n            \n            for(angle=[-30, 0, 30]) {\n                rotate([0, 0, angle])\n                    translate([6, 0, 0])\n                        scale([0.3, 0.1, 0.05])\n                        sphere(d=8);\n            }\n        };\n}\n\n// White checkerboard pattern on back\nmodule loon_pattern() {\n    color(\"white\")\n    for(x=[-15:5:10]) {\n        for(y=[-8:4:8]) {\n            translate([x, y, 15])\n                scale([0.3, 0.3, 0.1])\n                cube([3, 3, 0.5]);\n        }\n    }\n}\n\n// Assembly\nloon();\nloon_pattern();",
    "renders": true
  },
  {
    "animal": "lorikeet",
    "openscad_code": "// Lorikeet OpenSCAD Model - Medium Complexity Realistic Style\n// Size: ~60mm from beak to tail\n\n$fn = 24;\n\nmodule lorikeet() {\n    // Body\n    color(\"steelblue\")\n    translate([0, 0, 5])\n    scale([1.2, 1, 1])\n    sphere(8);\n\n    // Head\n    color(\"steelblue\")\n    translate([8, 0, 12])\n    sphere(6);\n\n    // Beak\n    color(\"orange\")\n    translate([15, 0, 12])\n    rotate([0, 90, 0])\n    cylinder(h=8, r1=2, r2=0.5);\n\n    // Eye\n    color(\"black\")\n    translate([11, 3, 13])\n    sphere(1);\n\n    // Wing\n    color(\"darkgreen\")\n    translate([-2, 0, 9])\n    rotate([0, 0, -20])\n    scale([1.5, 0.5, 1])\n    cylinder(h=10, r1=4, r2=2);\n\n    // Tail\n    color(\"darkgreen\")\n    translate([-10, 0, 7])\n    rotate([0, 0, -10])\n    scale([1, 0.3, 0.5])\n    cube([10, 6, 3]);\n\n    // Legs\n    for(side = [-1, 1]) {\n        color(\"orange\")\n        translate([2, side*3, 2])\n        cylinder(h=6, r=1);\n\n        // Feet\n        color(\"orange\")\n        translate([2, side*3.5, -1])\n        sphere(1.5);\n    }\n\n    // Chest pattern\n    color(\"lightblue\")\n    translate([0, 0, 3])\n    scale([0.8, 0.9, 0.8])\n    sphere(6);\n\n    // Wing detail\n    color(\"yellow\")\n    for(i = [1:3]) {\n        translate([-2-i*2, 0, 9])\n        rotate([0, 0, -20])\n        scale([0.5, 0.1, 0.1])\n        cylinder(h=8, r1=3, r2=1.5);\n    }\n\n    // Tail tip\n    color(\"yellow\")\n    translate([-10, 0, 6.5])\n    rotate([0, 0, -10])\n    scale([1, 0.3, 0.5])\n    cube([3, 6, 3]);\n}\n\n// Main model\nlorikeet();",
    "renders": true
  },
  {
    "animal": "loris",
    "openscad_code": "// Loris model - realistic style, medium complexity\n// 3D printable with no overhangs\n\n// Overall dimensions: ~80mm length, ~40mm height, ~35mm width\n\nmodule loris() {\n    // Main body - oval shaped torso\n    union() {\n        // Torso - elongated sphere\n        translate([0, 0, 20]) {\n            scale([1.2, 0.8, 0.8]) \n            sphere(d=35, $fn=32);\n        }\n        \n        // Belly - flattened cylinder\n        translate([0, 0, 10]) {\n            scale([1.3, 1, 0.6])\n            cylinder(d=30, h=20, $fn=32);\n        }\n        \n        // Head - sphere with flat bottom\n        translate([-25, 0, 35]) {\n            sphere(d=25, $fn=32);\n            translate([0, 0, -12]) \n            cylinder(d=25, h=12, $fn=32);\n        }\n        \n        // Face mask - darker area\n        difference() {\n            translate([-35, 0, 35]) \n            sphere(d=20, $fn=32);\n            translate([-45, 0, 35]) \n            sphere(d=15, $fn=32);\n        }\n        \n        // Eyes\n        for(x = [-5, 5]) {\n            translate([-35, x, 38]) {\n                color(\"black\")\n                sphere(d=6, $fn=16);\n                translate([2, 0, 0])\n                color(\"white\")\n                sphere(d=2, $fn=8);\n            }\n        }\n        \n        // Nose\n        translate([-40, 0, 32])\n        scale([1, 0.7, 0.5])\n        sphere(d=6, $fn=16);\n        \n        // Ears - small spheres\n        for(y = [-10, 10]) {\n            translate([-25, y, 47]) {\n                scale([0.8, 0.8, 1.2])\n                sphere(d=8, $fn=16);\n            }\n        }\n        \n        // Arms\n        for(side = [-1, 1]) {\n            // Upper arm\n            translate([-5, side * 15, 30]) {\n                rotate([0, 30 * side, -30])\n                cylinder(d1=10, d2=8, h=20, $fn=16);\n            }\n            \n            // Lower arm\n            translate([-15, side * 25, 20]) {\n                rotate([0, 30 * side, 0])\n                cylinder(d=8, h=25, $fn=16);\n            }\n            \n            // Hand\n            translate([-15, side * 30, 15]) {\n                sphere(d=10, $fn=16);\n            }\n        }\n        \n        // Legs\n        for(side = [-1, 1]) {\n            // Thigh\n            translate([15, side * 12, 25]) {\n                rotate([0, 0, -20])\n                cylinder(d1=12, d2=10, h=15, $fn=16);\n            }\n            \n            // Lower leg\n            translate([25, side * 15, 15]) {\n                rotate([0, 0, -20])\n                cylinder(d=10, h=20, $fn=16);\n            }\n            \n            // Foot\n            translate([35, side * 18, 8]) {\n                scale([1.2, 0.8, 0.4])\n                sphere(d=12, $fn=16);\n            }\n        }\n        \n        // Tail - stubby\n        translate([35, 0, 25]) {\n            rotate([0, 0, 20])\n            cylinder(d1=10, d2=8, h=15, $fn=16);\n        }\n        \n        // Fur texture - small spheres along back\n        for(i = [-20:5:30]) {\n            for(j = [-15:10:15]) {\n                if(j*j + i*i < 400 && i < 20) {\n                    translate([i, j, 25 + sin(i/5) * 5]) {\n                        sphere(d=3, $fn=8);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Render the loris\nloris();",
    "renders": true
  },
  {
    "animal": "louse",
    "openscad_code": "// Realistic Louse Model - Medium Complexity\n// Designed for 3D printing with 2mm wall thickness\n\n// Overall dimensions: ~60mm length, ~25mm width, ~20mm height\n\nmodule louse_body() {\n    // Main body segments\n    // Head - slightly flattened sphere\n    translate([0, 0, 5])\n        scale([1, 0.8, 0.6])\n        sphere(r=6, $fn=20);\n    \n    // Thorax - tapered cylinder\n    translate([0, 0, -2])\n        cylinder(h1=8, h2=10, r1=7, r2=5, $fn=20);\n    \n    // Abdomen - elongated oval\n    translate([0, 0, -12])\n        scale([1.2, 1, 0.8])\n        sphere(r=10, $fn=20);\n}\n\nmodule louse_legs() {\n    // Six legs in pairs\n    for(side = [0, 1]) {\n        mirror([side ? 1 : -1, 0, 0]) {\n            // Front legs (shorter)\n            translate([3, 3, 0])\n                rotate([0, 0, -30])\n                leg_segment(8, 2);\n            \n            // Middle legs (medium)\n            translate([0, 4, -4])\n                rotate([0, 0, -45])\n                leg_segment(10, 2);\n            \n            // Rear legs (longer)\n            translate([-3, 3, -8])\n                rotate([0, 0, -60])\n                leg_segment(12, 2);\n        }\n    }\n}\n\nmodule leg_segment(length, thickness) {\n    // Upper leg segment\n    cylinder(h=length*0.4, r=thickness, $fn=8);\n    \n    // Knee joint\n    translate([0, 0, length*0.4])\n        sphere(r=thickness*1.2, $fn=8);\n    \n    // Lower leg segment\n    translate([0, 0, length*0.4])\n        rotate([20, 0, 0])\n        cylinder(h=length*0.6, r=thickness*0.8, $fn=8);\n    \n    // Claw at end\n    translate([0, 0, length])\n        scale([0.5, 0.5, 1])\n        sphere(r=thickness, $fn=8);\n}\n\nmodule louse_antennae() {\n    // Pair of antennae\n    for(side = [0, 1]) {\n        mirror([side ? 1 : -1, 0, 0]) {\n            translate([4, 0, 9])\n                rotate([0, -30, 0])\n                cylinder(h=6, r=0.5, $fn=8);\n            \n            // Antenna tip\n            translate([9, 0, 7])\n                sphere(r=1, $fn=8);\n        }\n    }\n}\n\nmodule louse_mouthparts() {\n    // Proboscis for feeding\n    translate([0, 0, 2])\n        rotate([90, 0, 0])\n        cylinder(h=3, r1=1.5, r2=0.5, $fn=10);\n    \n    // Mouth hooks\n    for(angle = [0:120:239]) {\n        rotate([0, 0, angle])\n        translate([2, 0, 1])\n            cylinder(h=2, r=0.3, $fn=6);\n    }\n}\n\nmodule louse_segments() {\n    // Abdominal segments\n    for(i = [0:5]) {\n        translate([0, 0, -12 - i*2])\n            difference() {\n                scale([1.2 - i*0.05, 1 - i*0.02, 0.5])\n                sphere(r=10 - i*1, $fn=20);\n                \n                // Remove bottom half for flat printing\n                translate([0, 0, -5])\n                cube([30, 30, 10], center=true);\n            }\n    }\n}\n\n// Main assembly\nunion() {\n    // Body structure\n    louse_body();\n    \n    // Surface details\n    louse_segments();\n    \n    // Appendages\n    louse_legs();\n    louse_antennae();\n    louse_mouthparts();\n    \n    // Small bumps for texture\n    for(i = [0:20]) {\n        rotate([0, 0, i*36])\n        translate([7 + sin(i*5)*2, 0, -5 - i*0.5])\n            sphere(r=0.5, $fn=6);\n    }\n}\n\n// Flat base for printing\ntranslate([0, 0, -15])\n    cube([25, 20, 1], center=true);",
    "renders": true
  },
  {
    "animal": "luna",
    "openscad_code": "// Luna moth wing structure\n// Overall dimensions: ~90mm wingspan\n\n// Wing module - creates one wing with realistic veining\nmodule wing_half(is_left = true) {\n    // Main wing shape using scaled sphere sections\n    scale([1, 1.2, 0.1]) \n    translate([0, 0, -5])\n    sphere(40, $fn=50);\n    \n    // Wing tip extension\n    translate([35, 45, 0])\n    scale([1.5, 2, 0.1])\n    sphere(10, $fn=30);\n    \n    // Lower wing lobe\n    translate([25, -30, 0])\n    scale([1.2, 1.5, 0.1])\n    sphere(15, $fn=30);\n    \n    // Vein structure - raised ridges\n    for(i = [1:5]) {\n        hull() {\n            translate([5*i, 10*i, 0.5])\n            sphere(1, $fn=8);\n            translate([15*i, 20*i, 0.5])\n            sphere(1, $fn=8);\n        }\n    }\n    \n    // Cross veins\n    for(j = [1:4]) {\n        hull() {\n            translate([10*j, -15*j, 0.5])\n            sphere(1, $fn=8);\n            translate([25*j, -5*j, 0.5])\n            sphere(1, $fn=8);\n        }\n    }\n}\n\n// Eyespot detail on wings\nmodule eyespot(x, y, size) {\n    translate([x, y, 1])\n    scale([1, 1, 0.2])\n    union() {\n        // Outer ring\n        cylinder(h=0.5, r=size, $fn=32);\n        \n        // Inner ring\n        translate([0, 0, 0.3])\n        cylinder(h=0.5, r=size*0.7, $fn=32);\n        \n        // Center dot\n        translate([0, 0, 0.6])\n        cylinder(h=0.5, r=size*0.3, $fn=32);\n    }\n}\n\n// Body segments\nmodule body() {\n    // Thorax\n    translate([0, 0, 5])\n    scale([1, 1.5, 1.2])\n    sphere(8, $fn=30);\n    \n    // Abdomen segments\n    for(i = [1:5]) {\n        translate([0, -8*i, 5-i*0.5])\n        scale([1.2 - i*0.15, 1.2 - i*0.15, 1])\n        sphere(5 - i*0.5, $fn=20);\n    }\n    \n    // Head\n    translate([0, 12, 6])\n    sphere(6, $fn=20);\n}\n\n// Antennae\nmodule antenna(is_left = true) {\n    // Main shaft\n    translate([0, 12, 6])\n    rotate(is_left ? 30 : -30, [0, 0, 1])\n    rotate(45, [1, 0, 0])\n    cylinder(h=20, r=0.5, $fn=8);\n    \n    // Feathered branches\n    for(i = [1:8]) {\n        translate([0, 12 + i*2, 6 + i*1.5])\n        rotate(is_left ? 30 : -30, [0, 0, 1])\n        rotate(45 + i*5, [1, 0, 0])\n        translate([0, 0, 10])\n        rotate(is_left ? 90 : -90, [0, 0, 1])\n        scale([0.3, 2, 0.3])\n        sphere(1, $fn=6);\n    }\n}\n\n// Main assembly\nunion() {\n    // Left wing\n    translate([-10, 0, 0])\n    rotate([0, 0, 15])\n    wing_half(true);\n    \n    // Right wing\n    translate([10, 0, 0])\n    mirror([1, 0, 0])\n    rotate([0, 0, -15])\n    wing_half(false);\n    \n    // Add eyespots to wings\n    eyespot(-25, 20, 3);\n    eyespot(25, 20, 3);\n    \n    // Body\n    body();\n    \n    // Antennae\n    antenna(true);\n    antenna(false);\n}",
    "renders": true
  },
  {
    "animal": "lungfish",
    "openscad_code": "// Lungfish - medium complexity realistic style\n// Designed for 3D printing at ~80mm length\n\n$fn = 32;\n\nmodule body() {\n    difference() {\n        // Main body\n        union() {\n            // Torso\n            scale([1, 0.6, 0.4])\n                sphere(d=40);\n            \n            // Tail\n            translate([-30, 0, 0])\n                scale([1.5, 0.3, 0.3])\n                    rotate([0, 0, -15])\n                        cylinder(h=35, d1=20, d2=5);\n            \n            // Head\n            translate([20, 0, 0])\n                scale([1.2, 0.9, 0.8])\n                    sphere(d=25);\n        }\n        \n        // Mouth opening\n        translate([30, 0, -2])\n            rotate([0, -30, 0])\n                cylinder(h=15, d=10);\n    }\n}\n\nmodule fins() {\n    // Pectoral fin\n    translate([5, 0, -8])\n        rotate([90, 0, 45])\n            scale([1, 0.2, 0.5])\n                cylinder(h=15, d1=8, d2=15);\n    \n    // Second pectoral fin\n    mirror([0, 1, 0])\n        translate([5, 0, -8])\n            rotate([90, 0, 45])\n                scale([1, 0.2, 0.5])\n                    cylinder(h=15, d1=8, d2=15);\n    \n    // Dorsal fin base\n    translate([-10, 0, 12])\n        rotate([0, 90, 0])\n            linear_extrude(height=0.5)\n                polygon(points=[\n                    [0, 0], [25, 0], [20, 8], [5, 8], [0, 0]\n                ]);\n    \n    // Anal fin\n    translate([-15, 0, -12])\n        rotate([0, 90, 0])\n            linear_extrude(height=0.5)\n                polygon(points=[\n                    [0, 0], [20, 0], [15, -6], [5, -6], [0, 0]\n                ]);\n}\n\nmodule tail_fin() {\n    // Upper lobe\n    translate([-45, 0, 0])\n        rotate([0, 90, 0])\n            linear_extrude(height=0.5)\n                polygon(points=[\n                    [0, 0], [15, 0], [12, 8], [3, 6], [0, 0]\n                ]);\n    \n    // Lower lobe\n    translate([-45, 0, 0])\n        rotate([0, 90, 0])\n            linear_extrude(height=0.5)\n                polygon(points=[\n                    [0, 0], [15, 0], [12, -8], [3, -6], [0, 0]\n                ]);\n}\n\nmodule eyes() {\n    for(side = [-1, 1]) {\n        translate([25, side*8, 3])\n            difference() {\n                sphere(d=6);\n                translate([0, 0, -3])\n                    sphere(d=5);\n            }\n        \n        // Pupil\n        translate([28, side*8, 3])\n            sphere(d=3);\n    }\n}\n\nmodule gill_slits() {\n    for(i = [1:3]) {\n        translate([15 - i*3, 12, 0])\n            rotate([0, 90, 0])\n                cylinder(h=0.5, d=2);\n    }\n}\n\nmodule scales_pattern() {\n    // Simple scale pattern on body\n    for(y = [-15:5:15]) {\n        for(z = [-8:4:8]) {\n            translate([-y, 0, z])\n                sphere(d=2);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    body();\n    fins();\n    tail_fin();\n    eyes();\n    gill_slits();\n    scales_pattern();\n}\n\n// Flatten bottom for printing\ntranslate([0, 0, -15])\n    cube([100, 100, 15], center=true);",
    "renders": true
  },
  {
    "animal": "lynx",
    "openscad_code": "// Lynx model - realistic style, medium complexity\n// Designed for 3D printing, approximately 80mm long\n\nmodule lynx_body() {\n    // Main torso\n    union() {\n        // Chest and belly\n        translate([0, 0, 10]) \n            scale([1.2, 0.6, 0.8]) \n            sphere(d=40, $fn=32);\n        \n        // Back and hips\n        translate([-25, 0, 18]) \n            scale([1.4, 0.5, 0.7]) \n            sphere(d=35, $fn=32);\n    }\n}\n\nmodule lynx_head() {\n    union() {\n        // Main head shape\n        translate([30, 0, 25]) \n            scale([0.9, 0.7, 0.7]) \n            sphere(d=30, $fn=32);\n        \n        // Snout\n        translate([42, 0, 23]) \n            scale([0.4, 0.4, 0.3]) \n            sphere(d=20, $fn=24);\n        \n        // Ears\n        for(side = [-1, 1]) {\n            translate([35, side*12, 35]) \n                rotate([0, side*-20, 0]) \n                scale([0.3, 0.15, 0.5]) \n                cylinder(h=15, d1=10, d2=5, $fn=16);\n        }\n    }\n}\n\nmodule lynx_leg(pos, angle, length) {\n    translate(pos) {\n        rotate([0, 0, angle]) {\n            // Upper leg\n            translate([0, 0, length/4]) \n                scale([0.4, 0.4, 1]) \n                cylinder(h=length/2, d=8, $fn=16);\n            \n            // Lower leg\n            translate([0, 0, 0]) \n                scale([0.3, 0.3, 1]) \n                cylinder(h=length/2, d=6, $fn=16);\n            \n            // Paw\n            translate([0, 0, -length/2]) \n                scale([0.5, 0.5, 0.3]) \n                sphere(d=10, $fn=16);\n        }\n    }\n}\n\nmodule lynx_tail() {\n    // Curved tail\n    for(i = [0:5]) {\n        translate([-35 - i*3, 0, 15 + i*2]) \n            rotate([0, 0, -i*5]) \n            scale([1 - i*0.08, 1 - i*0.08, 1]) \n            sphere(d=8 - i, $fn=16);\n    }\n}\n\nmodule lynx_whiskers() {\n    for(side = [-1, 1]) {\n        for(angle = [-30, -15, 0, 15, 30]) {\n            translate([48, side*8, 22]) \n                rotate([0, 90, angle]) \n                cylinder(h=15, d=0.5, $fn=8);\n        }\n    }\n}\n\nmodule tufts() {\n    // Ear tufts\n    for(side = [-1, 1]) {\n        translate([35, side*15, 42]) \n            scale([0.1, 0.1, 0.3]) \n            cylinder(h=8, d=4, $fn=8);\n    }\n}\n\n// Main assembly\nunion() {\n    lynx_body();\n    lynx_head();\n    lynx_tail();\n    \n    // Front legs\n    lynx_leg([15, 12, 8], -20, 25);\n    lynx_leg([15, -12, 8], 20, 25);\n    \n    // Back legs\n    lynx_leg([-25, 10, 8], 10, 28);\n    lynx_leg([-25, -10, 8], -10, 28);\n    \n    // Details\n    lynx_whiskers();\n    tufts();\n}\n\n// Eyes\ntranslate([40, 4, 27]) sphere(d=3, $fn=16);\ntranslate([40, -4, 27]) sphere(d=3, $fn=16);\n\n// Nose\ntranslate([47, 0, 23]) scale([0.8, 0.5, 0.3]) sphere(d=5, $fn=16);",
    "renders": true
  },
  {
    "animal": "macaque",
    "openscad_code": "// Macaque Monkey - Realistic Style, Medium Complexity\n// Overall size ~70mm tall\n\n// Parameters\n$fn = 32;\nbody_width = 25;\nbody_height = 30;\nbody_depth = 18;\nhead_size = 18;\nlimb_radius = 4;\nlimb_length = 22;\ntail_length = 35;\ntail_radius = 3;\n\nmodule macaque() {\n    // Main body\n    union() {\n        // Torso - slightly tapered\n        translate([0, 0, 20])\n        scale([1, 1.2, 1.3])\n        sphere(d=body_width);\n        \n        // Abdomen\n        translate([0, 0, 10])\n        cylinder(h=15, d1=body_width-2, d2=body_width-4);\n        \n        // Chest\n        translate([0, -2, 25])\n        sphere(d=body_width-3);\n    }\n    \n    // Head\n    translate([0, 0, 42])\n    union() {\n        // Skull\n        sphere(d=head_size);\n        \n        // Muzzle\n        translate([0, -9, -2])\n        scale([1.2, 1.5, 1])\n        sphere(d=head_size-6);\n        \n        // Nose\n        translate([0, -13, 0])\n        rotate([90, 0, 0])\n        cylinder(h=3, d1=4, d2=2);\n        \n        // Eyes\n        for(x=[-4, 4]) {\n            translate([x, -4, 2])\n            sphere(d=3);\n            translate([x, -5, 2.5])\n            sphere(d=1.5);\n        }\n        \n        // Ears\n        for(x=[-8, 8]) {\n            translate([x, 0, 0])\n            rotate([0, 15 * (x > 0 ? -1 : 1), 0])\n            scale([0.7, 0.3, 1])\n            sphere(d=6);\n        }\n    }\n    \n    // Arms\n    module arm(side) {\n        translate([side * (body_width/2 - 2), 0, 30])\n        rotate([0, 0, side * 20])\n        rotate([90, 0, 0])\n        cylinder(h=limb_length, r=limb_radius);\n        \n        // Hand\n        translate([side * (body_width/2 - 2 + limb_length/2), side * 5, 15])\n        sphere(d=limb_radius * 1.5);\n    }\n    \n    arm(1);\n    arm(-1);\n    \n    // Legs\n    module leg(side) {\n        translate([side * (body_width/3), 0, 10])\n        rotate([0, 0, side * -10])\n        rotate([90, 0, 0])\n        cylinder(h=limb_length, r=limb_radius + 1);\n        \n        // Foot\n        translate([side * (body_width/3 + 2), side * 5, 0])\n        scale([1.5, 2, 0.8])\n        sphere(d=limb_radius * 2);\n    }\n    \n    leg(1);\n    leg(-1);\n    \n    // Tail - curved\n    for(i=[0:5]) {\n        rotate([0, 0, -20 * sin(i * 30)])\n        translate([0, -body_depth/2 - i * 5, 10 + i * 3])\n        rotate([90, 0, 0])\n        cylinder(h=tail_length/6, r=tail_radius * (1 - i * 0.1));\n    }\n}\n\n// Generate the macaque\nmacaque();",
    "renders": true
  },
  {
    "animal": "macaw",
    "openscad_code": "// Macaw 3D Model - Medium Complexity Realistic Style\n// Overall dimensions: ~80mm wingspan\n\n// Color definitions for preview\ncolors = [\"red\", \"blue\", \"yellow\", \"black\", \"white\"];\n\nmodule macaw() {\n    union() {\n        // Main body\n        body();\n        \n        // Head and beak\n        translate([0, 25, 5]) head();\n        \n        // Wings\n        translate([-15, 0, 8]) left_wing();\n        translate([15, 0, 8]) mirror([1, 0, 0]) left_wing();\n        \n        // Tail\n        translate([0, -25, 2]) tail();\n        \n        // Legs and feet\n        translate([-3, 8, -6]) leg_and_foot();\n        translate([3, 8, -6]) mirror([1, 0, 0]) leg_and_foot();\n    }\n}\n\nmodule body() {\n    // Main torso\n    color(\"red\")\n    rotate([0, 10, 0])\n    scale([1.2, 1.4, 1])\n    sphere(10, $fn=32);\n    \n    // Chest detail\n    color(\"red\")\n    translate([0, 8, -2])\n    scale([0.8, 0.6, 0.8])\n    sphere(8, $fn=32);\n    \n    // Back detail\n    color(\"red\")\n    translate([0, -5, 3])\n    scale([1, 0.8, 0.6])\n    sphere(6, $fn=32);\n}\n\nmodule head() {\n    union() {\n        // Head sphere\n        color(\"red\")\n        sphere(7, $fn=32);\n        \n        // Beak upper\n        color(\"black\")\n        translate([0, 8, 3])\n        rotate([20, 0, 0])\n        scale([0.8, 2, 0.6])\n        cylinder(h=5, r1=3, r2=1, $fn=16);\n        \n        // Beak lower\n        color(\"black\")\n        translate([0, 8, 0])\n        rotate([-10, 0, 0])\n        scale([0.7, 1.8, 0.5])\n        cylinder(h=4, r1=2.5, r2=0.5, $fn=16);\n        \n        // Eye patch\n        color(\"white\")\n        translate([-2.5, 3, 4])\n        sphere(2.5, $fn=16);\n        \n        // Eye\n        color(\"black\")\n        translate([-2.5, 3.5, 5])\n        sphere(1.2, $fn=8);\n        \n        // Other eye\n        translate([2.5, 3, 4]) {\n            color(\"white\")\n            sphere(2.5, $fn=16);\n            color(\"black\")\n            translate([0, 0.5, 1])\n            sphere(1.2, $fn=8);\n        }\n        \n        // Cheek patch\n        color(\"white\")\n        translate([-4, 2, 0])\n        scale([1.5, 1, 1])\n        sphere(3, $fn=16);\n    }\n}\n\nmodule left_wing() {\n    union() {\n        // Upper wing\n        color(\"blue\")\n        rotate([0, 0, 30])\n        translate([0, 0, 5])\n        scale([1, 2.2, 0.3])\n        sphere(8, $fn=32);\n        \n        // Lower wing\n        color(\"red\")\n        rotate([0, 0, 15])\n        translate([0, -10, 0])\n        scale([0.8, 1.8, 0.2])\n        sphere(6, $fn=32);\n        \n        // Wing tip\n        color(\"blue\")\n        rotate([0, 0, 5])\n        translate([0, -18, -2])\n        scale([0.6, 1.2, 0.15])\n        sphere(4, $fn=16);\n        \n        // Wing feathers\n        for(i = [0:3]) {\n            color(i % 2 == 0 ? \"blue\" : \"red\")\n            rotate([0, 0, -20 + i * 15])\n            translate([-2 - i*1.5, -12 - i*3, -2])\n            scale([0.3, 1, 0.1])\n            cylinder(h=8, r1=1, r2=0.5, $fn=8);\n        }\n    }\n}\n\nmodule tail() {\n    union() {\n        // Main tail\n        color(\"red\")\n        rotate([20, 0, 0])\n        scale([1, 0.3, 2])\n        cylinder(h=20, r1=8, r2=3, $fn=32);\n        \n        // Tail feathers\n        for(i = [-2:2]) {\n            color(i == 0 ? \"blue\" : \"red\")\n            translate([i*3, 0, -10 - abs(i)*2])\n            rotate([10, 0, i*5])\n            scale([0.8, 0.1, 1.2])\n            cylinder(h=15, r1=3, r2=1, $fn=8);\n        }\n    }\n}\n\nmodule leg_and_foot() {\n    union() {\n        // Leg\n        color(\"black\")\n        scale([0.8, 0.8, 1])\n        cylinder(h=8, r=1.5, $fn=16);\n        \n        // Foot\n        translate([0, 0, -8]) {\n            color(\"black\")\n            cube([6, 2, 2], center=true);\n            \n            // Toes\n            for(i = [-1, 0, 1]) {\n                translate([i*2, 1, -1])\n                cube([1.5, 3, 1]);\n            }\n            \n            // Back toe\n            translate([-2.5, -1, -1])\n            rotate([0, 0, 90])\n            cube([1.5, 2, 1]);\n        }\n    }\n}\n\n// Generate the complete macaw\nmacaw();",
    "renders": true
  },
  {
    "animal": "mackerel",
    "openscad_code": "// OpenSCAD Mackerel – realistic, medium complexity\n// Overall length ≈ 75 mm, printable without supports\n\nmodule fish() {\n    difference() {\n        // ---------- BODY ----------\n        color(\"silver\")\n        hull() {\n            // Forward taper\n            translate([-30,0,0]) scale([1,0.9,0.7]) sphere(d=15, $fn=24);\n            // Mid section\n            translate([0,0,0]) scale([1,1,0.7]) sphere(d=18, $fn=24);\n            // Tail root\n            translate([28,0,0]) scale([0.6,0.5,0.6]) sphere(d=12, $fn=24);\n        }\n        // Carve underside belly\n        translate([0,0,-5]) cube([70,20,10], center=true);\n    }\n\n    // ---------- HEAD ----------\n    union() {\n        // Snout\n        translate([-35,0,2]) rotate([0,20,0])\n            cylinder(h=12, d1=8, d2=4, $fn=16);\n\n        // Eye sockets\n        difference() {\n            translate([-30,6,4]) sphere(d=5, $fn=20);\n            translate([-32,7,5]) sphere(d=2, $fn=12);\n        }\n        mirror([0,1,0]) {\n            translate([-30,6,4]) sphere(d=5, $fn=20);\n            translate([-32,7,5]) sphere(d=2, $fn=12);\n        }\n    }\n\n    // ---------- DORSAL FINS ----------\n    // First dorsal\n    color(\"slategray\")\n    for(i=[-20:-5:5]) {\n        translate([i,0,9])\n            rotate([0,90,0])\n            cylinder(h=8, d1=1.5, d2=0.5, $fn=8);\n    }\n\n    // Second dorsal\n    for(i=[10:5:25]) {\n        translate([i,0,7])\n            rotate([0,90,0])\n            cylinder(h=6, d1=1.2, d2=0.5, $fn=8);\n    }\n\n    // ---------- ANAL FIN ----------\n    color(\"slategray\")\n    for(i=[5:5:25]) {\n        translate([i,0,-6])\n            rotate([0,-90,0])\n            cylinder(h=5, d1=1.2, d2=0.5, $fn=8);\n    }\n\n    // ---------- PECTORAL FIN ----------\n    color(\"slategray\")\n    translate([-20,7,-3])\n        rotate([0,-30,-20])\n        scale([1,0.3,0.1])\n        sphere(d=12, $fn=16);\n    mirror([0,1,0])\n        translate([-20,7,-3])\n        rotate([0,-30,-20])\n        scale([1,0.3,0.1])\n        sphere(d=12, $fn=16);\n\n    // ---------- CAUDAL FIN ----------\n    color(\"slategray\")\n    union() {\n        // Upper lobe\n        translate([35,0,3])\n            rotate([0,0,30])\n            scale([0.5,0.08,1.5])\n            sphere(d=20, $fn=16);\n        // Lower lobe\n        translate([35,0,-3])\n            rotate([0,0,-30])\n            scale([0.5,0.08,1.5])\n            sphere(d=20, $fn=16);\n    }\n}\n\nfish();",
    "renders": true
  },
  {
    "animal": "magpie",
    "openscad_code": "// Magpie Model - Realistic Style, Medium Complexity\n// 3D printable, ~70mm long\n\nmodule magpie() {\n    // Main body with slight taper\n    union() {\n        // Torso - oval shaped body\n        difference() {\n            scale([1.2, 0.8, 1]) sphere(d=25, $fn=32);\n            translate([0, 0, -12.5]) cube([50, 50, 25], center=true);\n        }\n        \n        // Head - smaller sphere\n        translate([15, 0, 5]) scale([1.1, 1, 1.1]) sphere(d=15, $fn=32);\n        \n        // Beak - conical\n        translate([23, 0, 3]) rotate([0, -10, 0]) \n            cylinder(h=12, r1=1.5, r2=0, $fn=8);\n        \n        // Tail - fan of feathers\n        for(i=[-2:1:2]) {\n            rotate([0, i*15, 0]) \n                translate([-18, 0, i*2]) \n                    scale([2.5, 0.2, 1]) \n                        cube([12, 8, 3], center=true);\n        }\n        \n        // Wings - positioned folded against body\n        for(side=[-1, 1]) {\n            translate([0, side*10, 0]) {\n                // Main wing\n                rotate([0, 0, side*-20]) {\n                    difference() {\n                        scale([1.2, 0.3, 1]) sphere(d=22, $fn=32);\n                        translate([0, 0, -11]) cube([50, 50, 22], center=true);\n                    }\n                }\n                \n                // Wing tip\n                translate([-5, side*-3, -2]) \n                    rotate([0, 0, side*-30]) \n                        scale([0.8, 0.3, 0.8]) \n                            sphere(d=8, $fn=16);\n            }\n        }\n        \n        // Legs and feet\n        for(side=[-1, 1]) {\n            translate([5, side*3, -12]) {\n                // Leg\n                cylinder(h=8, r=1.2, $fn=8);\n                \n                // Foot - simple perching pose\n                translate([0, 0, -8]) {\n                    rotate([90, 0, 0]) {\n                        // Toes forward\n                        for(angle=[-20, 0, 20]) {\n                            rotate([0, angle, 0]) \n                                translate([4, 0, 0]) \n                                    scale([3, 0.8, 0.8]) \n                                        cylinder(h=1, r=1, $fn=8);\n                        }\n                        \n                        // Back toe\n                        rotate([0, 180, 0]) \n                            translate([3, 0, 0]) \n                                scale([2, 0.8, 0.8]) \n                                    cylinder(h=1, r=1, $fn=8);\n                    }\n                }\n            }\n        }\n        \n        // Eye details\n        for(side=[-1, 1]) {\n            translate([17, side*3.5, 7]) {\n                // Eye socket\n                difference() {\n                    sphere(d=3, $fn=16);\n                    translate([0, 0, -2]) cube([10, 10, 4], center=true);\n                }\n                \n                // Pupil\n                translate([0.5, 0, 0]) \n                    color(\"black\") \n                        sphere(d=1.5, $fn=16);\n            }\n        }\n        \n        // Chest/belly detail\n        translate([2, 0, -8]) \n            scale([1, 0.9, 0.6]) \n                sphere(d=20, $fn=32);\n    }\n}\n\n// Generate the model\nmagpie();",
    "renders": true
  },
  {
    "animal": "mallard",
    "openscad_code": "// Mallard Duck - Realistic Style, Medium Complexity\n// Overall length ~80mm, suitable for 3D printing\n\n$fn = 32;  // Smooth curves\n\n// Main module\nmodule mallard() {\n    \n    // Body\n    color(\"darkgreen\")\n    translate([0, 0, 10])\n    scale([1.2, 0.8, 0.6])\n    sphere(d = 35);\n    \n    // Tail\n    color(\"darkgreen\")\n    translate([-20, 0, 12])\n    rotate([0, 15, 0])\n    scale([0.8, 0.4, 0.2])\n    cylinder(h = 25, d1 = 20, d2 = 5);\n    \n    // Head\n    color(\"darkgreen\")\n    translate([18, 0, 25])\n    sphere(d = 18);\n    \n    // Neck\n    color(\"darkgreen\")\n    translate([10, 0, 22])\n    rotate([0, -10, 0])\n    scale([0.6, 0.5, 0.8])\n    cylinder(h = 12, d = 10);\n    \n    // Bill\n    color(\"yellow\")\n    translate([28, 0, 25])\n    rotate([0, 10, 0])\n    scale([1.5, 0.3, 0.3])\n    cylinder(h = 15, d = 8);\n    \n    // Bill tip\n    color(\"black\")\n    translate([40, 0, 25])\n    sphere(d = 4);\n    \n    // Wing left\n    color([0, 0.3, 0])\n    translate([5, 10, 20])\n    rotate([0, 0, 30])\n    scale([1, 0.2, 0.4])\n    cylinder(h = 30, d = 25);\n    \n    // Wing right\n    color([0, 0.3, 0])\n    translate([5, -10, 20])\n    rotate([0, 0, -30])\n    scale([1, 0.2, 0.4])\n    cylinder(h = 30, d = 25);\n    \n    // Wing detail lines\n    for(i = [1:3]) {\n        color(\"black\")\n        translate([5, 10 + i*2, 20])\n        rotate([0, 0, 30])\n        scale([1, 0.05, 0.05])\n        cylinder(h = 25, d = 1);\n    }\n    \n    // Feet\n    module foot(side) {\n        translate([5, side*5, 5])\n        rotate([0, 0, side*15])\n        scale([0.8, 0.2, 0.1])\n        cylinder(h = 12, d = 8);\n        \n        // Toes\n        for(i = [-1:1]) {\n            translate([12, side*(5 + i*3), 5])\n            rotate([0, 0, side*15 + i*10])\n            scale([0.3, 0.1, 0.05])\n            cylinder(h = 8, d = 4);\n        }\n    }\n    \n    foot(1);  // Left foot\n    foot(-1); // Right foot\n    \n    // Eye left\n    color(\"black\")\n    translate([22, 6, 28])\n    sphere(d = 3);\n    \n    // Eye right\n    color(\"black\")\n    translate([22, -6, 28])\n    sphere(d = 3);\n    \n    // Chest\n    color(\"saddlebrown\")\n    translate([12, 0, 15])\n    scale([0.8, 0.7, 0.4])\n    sphere(d = 20);\n    \n    // Base flattening for printing\n    difference() {\n        union() {\n            children();\n        }\n        translate([0, 0, -1])\n        cube([200, 200, 2], center = true);\n    }\n}\n\nmallard();",
    "renders": true
  },
  {
    "animal": "mammoth",
    "openscad_code": "// Realistic Mammoth - Medium Complexity\n// Sized for 3D printing (approx 60mm long)\n\n$fn = 32;\n\nmodule mammoth() {\n    // Body - main torso\n    union() {\n        // Main body\n        translate([0, 0, 15])\n            scale([1, 0.7, 0.8])\n            sphere(15);\n        \n        // Belly bulge\n        translate([0, 0, 8])\n            scale([1.2, 0.8, 0.4])\n            sphere(12);\n    }\n    \n    // Head\n    translate([20, 0, 20])\n        rotate([0, -10, 0])\n        union() {\n            // Skull\n            scale([1.3, 0.8, 0.9])\n            sphere(8);\n            \n            // Forehead dome\n            translate([-2, 0, 3])\n                sphere(6);\n                \n            // Trunk - segmented cylinders\n            color(\"gray\")\n            for(i = [0:7]) {\n                translate([28 - i*2, 0, 18 - i*1.5])\n                    rotate([0, -i*3, 0])\n                    scale([1, 1, 0.7])\n                    cylinder(h=3, r1=4-i*0.3, r2=3.5-i*0.3);\n            }\n            \n            // Tusks\n            color(\"ivory\")\n            translate([15, 8, 15])\n                rotate([45, 0, -15])\n                cylinder(h=25, r1=2, r2=0.5);\n                \n            translate([15, -8, 15])\n                rotate([45, 0, 15])\n                cylinder(h=25, r1=2, r2=0.5);\n                \n            // Ears\n            translate([12, 6, 22])\n                rotate([0, 10, 20])\n                scale([0.3, 1, 0.8])\n                sphere(8);\n                \n            translate([12, -6, 22])\n                rotate([0, 10, -20])\n                scale([0.3, 1, 0.8])\n                sphere(8);\n        }\n    \n    // Leg modules\n    module leg(x, y, angle) {\n        translate([x, y, 0])\n            rotate([angle, 0, 0])\n            union() {\n                // Upper leg\n                cylinder(h=15, r=4);\n                \n                // Lower leg\n                translate([0, 0, 12])\n                    rotate([20, 0, 0])\n                    cylinder(h=12, r=3.5);\n                    \n                // Foot\n                translate([0, 0, 22])\n                    rotate([20, 0, 0])\n                    scale([1.2, 1, 0.3])\n                    sphere(5);\n            }\n    }\n    \n    // Four legs\n    leg(-15, 8, 10);\n    leg(-15, -8, 10);\n    leg(8, 8, 10);\n    leg(8, -8, 10);\n    \n    // Tail\n    translate([-22, 0, 18])\n        rotate([20, 0, 0])\n        for(i = [0:5]) {\n            translate([0, 0, -i*2])\n                scale([1-i*0.1, 1-i*0.1, 1])\n                sphere(3-i*0.5);\n        }\n        \n    // Hump/back\n    translate([-5, 0, 25])\n        scale([0.8, 0.6, 0.4])\n        sphere(10);\n        \n    // Fur texture - simple bumps\n    for(i = [-20:5:20]) {\n        for(j = [-10:5:10]) {\n            if(i*i + j*j < 400) {\n                translate([i, j, 20 + sin(i*0.5)*2])\n                    sphere(1);\n            }\n        }\n    }\n}\n\n// Main model\nscale(0.7)\nmammoth();",
    "renders": true
  },
  {
    "animal": "manatee",
    "openscad_code": "// Realistic medium-complexity 3D printable manatee\n// Body length ≈ 80 mm\n\n// Parameters\nbody_scale = 1;\nwall = 2;           // wall thickness for printability\nseg = 30;           // sphere/cylinder segments\n\n// Main body – elongated ellipsoid\nmodule body() {\n    difference() {\n        scale([1.8, 1, 1]) sphere(d=40, $fn=seg);\n        // underside flattening\n        translate([0,0,-21]) cube([100,100,10], center=true);\n    }\n}\n\n// Head – smaller ellipsoid\nmodule head() {\n    translate([35,0,5]) scale([1,0.75,0.8]) sphere(d=24, $fn=seg);\n}\n\n// Muzzle – truncated cylinder with rounded end\nmodule muzzle() {\n    translate([48,0,0]) rotate([-90,0,0]) {\n        cylinder(h=18, d1=12, d2=8, $fn=seg);\n        translate([0,0,18]) sphere(d=8, $fn=seg);\n    }\n}\n\n// Tail paddle – symmetric swept shape\nmodule tail() {\n    translate([-40,0,0]) rotate([0,15,0]) {\n        scale([1.2,0.3,1]) sphere(d=28, $fn=seg);\n        translate([8,0,0]) scale([1.2,0.25,0.8]) sphere(d=20, $fn=seg);\n    }\n}\n\n// Two flippers\nmodule flipper(side=1) {\n    mirror([0,side,0]) translate([15,side*18,-12]) rotate([0,0,side*-20]) {\n        difference() {\n            scale([0.6,0.15,0.9]) sphere(d=22, $fn=seg);\n            translate([0,0,2]) cube([30,30,30], center=true);\n        }\n    }\n}\n\n// Small dorsal hump\nmodule dorsal() {\n    translate([-10,0,18]) scale([1,0.7,0.4]) sphere(d=14, $fn=seg);\n}\n\n// Eyes – simple spheres\nmodule eye(side=1) {\n    mirror([0,side,0]) translate([40,side*8,10]) sphere(d=4, $fn=seg);\n}\n\n// Nostrils – two small cylinders on top of muzzle\nmodule nostril(side=1) {\n    mirror([0,side,0]) {\n        translate([45,side*4,8]) rotate([80,0,0]) \n            cylinder(h=3, d=2, $fn=seg);\n    }\n}\n\n// Whiskers – simple cylinders\nmodule whiskers() {\n    for(a=[-20:10:20]) {\n        rotate([90,0,a]) translate([50,0,0]) cylinder(h=6, d=0.8, $fn=seg);\n    }\n}\n\n// Union all parts\nunion() {\n    body();\n    head();\n    muzzle();\n    tail();\n    flipper(1);\n    flipper(-1);\n    dorsal();\n    color(\"black\") eye(1);\n    color(\"black\") eye(-1);\n    nostril(1);\n    nostril(-1);\n    whiskers();\n}",
    "renders": true
  },
  {
    "animal": "mandrill",
    "openscad_code": "// Mandrill - Medium complexity 3D printable model\n// Overall size ~70mm tall\n\n$fn = 32;\n\nmodule mandrill() {\n    // Body\n    union() {\n        // Torso\n        translate([0, -10, 0])\n            scale([1.2, 1.5, 1.3])\n            sphere(15);\n        \n        // Chest\n        translate([0, 0, -5])\n            scale([1, 0.8, 0.6])\n            sphere(18);\n        \n        // Abdomen\n        translate([0, -25, -8])\n            scale([0.9, 1, 0.7])\n            sphere(12);\n    }\n    \n    // Head with snout\n    union() {\n        // Main head\n        translate([0, 40, 15])\n            scale([1.1, 1.2, 1.1])\n            sphere(20);\n        \n        // Snout\n        translate([0, 55, 12])\n            rotate([20, 0, 0])\n            scale([0.8, 1.3, 0.7])\n            cylinder(15, 12, 10);\n    }\n    \n    // Nostrils\n    difference() {\n        translate([0, 55, 12])\n            rotate([20, 0, 0])\n            scale([0.8, 1.3, 0.7])\n            cylinder(15, 12, 10);\n        \n        // Left nostril\n        translate([-3, 58, 10])\n            rotate([20, 0, 0])\n            cylinder(8, 2, 2);\n        \n        // Right nostril\n        translate([3, 58, 10])\n            rotate([20, 0, 0])\n            cylinder(8, 2, 2);\n    }\n    \n    // Eyes\n    for(x = [-8, 8]) {\n        translate([x, 45, 20])\n            sphere(3);\n    }\n    \n    // Ears\n    for(x = [-15, 15]) {\n        translate([x, 30, 25])\n            rotate([0, 10 * (x > 0 ? 1 : -1), 0])\n            scale([0.4, 1, 1.2])\n            sphere(8);\n    }\n    \n    // Arms\n    module arm(side) {\n        translate([side * 15, 0, 0])\n            rotate([0, 0, side * 20])\n            union() {\n                // Upper arm\n                translate([0, 0, 0])\n                    rotate([0, side * 30, 0])\n                    scale([0.8, 0.8, 1.2])\n                    cylinder(20, 6, 5);\n                \n                // Forearm\n                translate([0, -15, -10])\n                    rotate([0, side * 60, 0])\n                    scale([0.7, 0.7, 1.1])\n                    cylinder(18, 5, 4);\n                \n                // Hand\n                translate([0, -25, -18])\n                    rotate([0, side * 60, side * 10])\n                    scale([1, 1.5, 0.6])\n                    sphere(6);\n            }\n    }\n    \n    arm(1);\n    arm(-1);\n    \n    // Legs\n    module leg(side) {\n        translate([side * 10, -25, -10])\n            union() {\n                // Thigh\n                translate([0, 0, 0])\n                    rotate([10, 0, 0])\n                    scale([0.9, 0.9, 1.3])\n                    cylinder(22, 8, 7);\n                \n                // Lower leg\n                translate([0, -5, -20])\n                    rotate([20, 0, 0])\n                    scale([0.8, 0.8, 1.2])\n                    cylinder(20, 7, 6);\n                \n                // Foot\n                translate([0, 0, -35])\n                    scale([1.2, 2, 0.8])\n                    sphere(8);\n            }\n    }\n    \n    leg(1);\n    leg(-1);\n    \n    // Tail\n    translate([0, -30, 5])\n        rotate([20, 0, 0])\n        scale([0.8, 0.8, 1])\n        cylinder(25, 5, 3);\n    \n    // Blue and red facial features\n    // Blue ridges\n    difference() {\n        // Left ridge\n        translate([-12, 42, 25])\n            scale([1, 3, 0.5])\n            sphere(6);\n        \n        // Right ridge\n        translate([12, 42, 25])\n            scale([1, 3, 0.5])\n            sphere(6);\n    }\n    \n    // Red nose\n    translate([0, 55, 15])\n        scale([1.2, 0.8, 0.6])\n        sphere(8);\n    \n    // Red lips\n    translate([0, 60, 8])\n        scale([2, 0.5, 0.3])\n        sphere(10);\n}\n\n// Scale to 70mm height\nscale(0.7)\nmandrill();",
    "renders": true
  },
  {
    "animal": "manedwolf",
    "openscad_code": "// Maned Wolf - Realistic Style, Medium Complexity\n// Designed for 3D printing (50mm tall)\n\n$fn = 50;  // Smooth curves for realistic appearance\n\n// Main body\nmodule body() {\n    // Torso - elongated oval shape\n    union() {\n        // Main torso\n        scale([1.4, 0.8, 1.2]) \n            sphere(r=10);\n        \n        // Chest extension\n        translate([10, 0, -2])\n            scale([1.2, 0.7, 0.8])\n                sphere(r=8);\n                \n        // Belly\n        translate([0, 0, -8])\n            scale([1.3, 0.7, 0.3])\n                sphere(r=10);\n    }\n}\n\n// Head with long snout\nmodule head() {\n    union() {\n        // Skull\n        translate([0, 0, 0])\n            scale([0.8, 0.7, 0.9])\n                sphere(r=8);\n        \n        // Snout\n        translate([12, 0, -2])\n            scale([1.5, 0.7, 0.7])\n                sphere(r=6);\n                \n        // Ears\n        for(side = [-1, 1]) {\n            translate([2, side*6, 8])\n                rotate([0, -10, side*20])\n                    scale([0.3, 0.8, 2])\n                        cylinder(r1=3, r2=1, h=12);\n        }\n        \n        // Nose\n        translate([18, 0, -2])\n            sphere(r=2);\n    }\n}\n\n// Leg module - single leg\nmodule leg(height, angle) {\n    // Upper leg\n    translate([0, 0, height/2])\n        rotate([angle, 0, 0])\n            scale([0.6, 0.6, 1])\n                cylinder(r=3, h=height);\n    \n    // Lower leg\n    translate([0, 0, height-2])\n        rotate([angle+5, 0, 0])\n            scale([0.5, 0.5, 1])\n                cylinder(r=2.5, h=height*0.8);\n    \n    // Paw\n    translate([0, 0, height*1.8-2])\n        rotate([angle+5, 0, 0])\n            scale([0.7, 0.7, 0.5])\n                sphere(r=4);\n}\n\n// Tail\nmodule tail() {\n    translate([-20, 0, 0])\n        rotate([0, 10, 0])\n            scale([0.5, 0.5, 3])\n                cylinder(r1=4, r2=2, h=25);\n}\n\n// Mane along neck and back\nmodule mane() {\n    // Neck mane\n    for(i = [0:5]) {\n        translate([5+i*3, 0, 8])\n            rotate([0, -20, 0])\n                scale([0.3, 0.2, 1.5])\n                    cylinder(r1=2, r2=1, h=8);\n    }\n    \n    // Back ridge\n    for(i = [0:8]) {\n        translate([-5-i*3, 0, 10])\n            scale([0.2, 0.2, 1.2])\n                cylinder(r1=1.5, r2=0.5, h=6);\n    }\n}\n\n// Assembly\nunion() {\n    // Main body\n    body();\n    \n    // Head attached to front\n    translate([15, 0, 8])\n        rotate([0, -10, 0])\n            head();\n    \n    // Legs - front\n    translate([10, 6, 0])\n        leg(20, -15);\n    translate([10, -6, 0])\n        leg(20, -15);\n    \n    // Legs - back\n    translate([-10, 6, 0])\n        leg(22, -10);\n    translate([-10, -6, 0])\n        leg(22, -10);\n    \n    // Tail\n    tail();\n    \n    // Mane\n    mane();\n}\n\n// Position for printing\ntranslate([0, 0, 5])\n    rotate([0, 0, 0]) {}",
    "renders": true
  },
  {
    "animal": "manowar",
    "openscad_code": "// Portuguese Man o' War - Realistic Medium Complexity\n// Approx 80mm float length, 50mm sail height\n\n$fn=32;\nwall=1.2;   // 3D-printable wall thickness\n\n// Main floating pneumatophore (sail)\nmodule pneumatophore() {\n    difference() {\n        // Main sail body - elongated teardrop\n        hull() {\n            // Front bulb\n            translate([0,0,5]) sphere([15,10,12]);\n            // Tapered back\n            translate([0,0,-15]) scale([1,0.6,0.4]) sphere([20,10,8]);\n            // Top ridge\n            translate([0,0,12]) cube([30,1,4], center=true);\n        }\n        \n        // Hollow inside for buoyancy\n        translate([0,0,-5]) scale(0.8) sphere([15,10,12]);\n    }\n    \n    // Ridge detail on top\n    for(i=[-10:5:10]) {\n        translate([i,0,12]) rotate([90,0,0]) \n            cylinder(h=1.5, d1=3, d2=1);\n    }\n    \n    // Subtle vertical striations\n    for(a=[0:15:359]) {\n        rotate([0,0,a]) \n            translate([12,0,-5]) cube([0.5,0.5,20], center=true);\n    }\n}\n\n// Tentacle cluster base\nmodule tentacle_cluster() {\n    // Main cluster attachment point\n    translate([0,0,-25]) {\n        difference() {\n            sphere(8);\n            translate([0,0,5]) sphere(7.5);\n        }\n        \n        // Individual tentacles\n        for(i=[0:30:359]) {\n            rotate([0,0,i]) {\n                translate([6,-1,-28]) {\n                    tentacle(35 + (i%60));\n                }\n            }\n        }\n    }\n}\n\n// Single tentacle with nematocyst batteries\nmodule tentacle(length) {\n    // Main tentacle body - tapered cylinder\n    hull() {\n        cylinder(h=length, d1=1.2, d2=0.4);\n        translate([0,0,length]) sphere(0.5);\n    }\n    \n    // Nematocyst clusters along tentacle\n    for(pos=[5:5:length-5]) {\n        translate([0,0,pos]) {\n            // Blue/purple nematocyst sacs\n            sphere(0.8);\n            translate([0.5,0,0]) sphere(0.4);\n            translate([-0.5,0,0]) sphere(0.4);\n        }\n    }\n}\n\n// Gastrozooids (feeding polyps)\nmodule gastrozooids() {\n    translate([0,-5,-20]) {\n        for(r=[-30,-10,10,30]) {\n            rotate([0,0,r]) {\n                translate([8,0,0]) {\n                    // Main feeding polyp\n                    difference() {\n                        cylinder(h=4, d=2);\n                        translate([0,0,-1]) cylinder(h=5, d=1.6);\n                    }\n                    \n                    // Tentacle-like extensions\n                    for(a=[0:120:240]) {\n                        rotate([0,0,a]) {\n                            translate([1,0,4]) rotate([45,0,0]) \n                                cylinder(h=3, d1=0.5, d2=0.2);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Dactylozooids (defensive polyps)\nmodule dactylozooids() {\n    translate([0,5,-22]) {\n        for(r=[-45,0,45]) {\n            rotate([0,0,r]) {\n                translate([10,0,0]) {\n                    // Short defensive polyps\n                    cylinder(h=3, d=1.5);\n                    translate([0,0,3]) sphere(0.8);\n                }\n            }\n        }\n    }\n}\n\n// Combined man o' war\nunion() {\n    // Main body\n    pneumatophore();\n    \n    // Tentacles hanging below\n    tentacle_cluster();\n    \n    // Feeding and defensive polyps\n    gastrozooids();\n    dactylozooids();\n    \n    // Thin membrane connecting base structures\n    translate([0,0,-20]) \n        scale([1.2,0.8,0.1]) \n        sphere(15);\n}",
    "renders": true
  },
  {
    "animal": "manta",
    "openscad_code": "// Manta Ray - Realistic Style, Medium Complexity\n// Size: ~80mm wingspan\n\n$fn = 32;  // Smooth curves for 3D printing\n\n// Main body module\nmodule manta_body() {\n    // Central body - ellipsoid shape\n    translate([0, 0, 5])\n        scale([1, 0.6, 0.3])\n        sphere(d=20);\n    \n    // Head protrusion\n    translate([0, 12, 2])\n        rotate([30, 0, 0])\n        scale([0.6, 0.4, 0.3])\n        cylinder(h=8, d1=8, d2=5);\n    \n    // Cephalic fins (rolled up)\n    for(side = [-1, 1]) {\n        translate([side * 7, 10, -2])\n            rotate([0, 0, side * -30])\n            scale([0.5, 1.2, 0.3])\n            cylinder(h=6, d=4);\n    }\n}\n\n// Wing module with ribbed structure\nmodule wing(left_right) {\n    // Main wing shape - tapered\n    translate([left_right * 20, 0, 0])\n        rotate([0, 0, left_right * 10])\n        scale([left_right * 1, 1, 0.15])\n        difference() {\n            // Outer wing shape\n            translate([-20, 0, 0])\n                cube([40, 35, 2]);\n            \n            // Wing tip rounding\n            translate([20, 0, -1])\n                sphere(d=4);\n            \n            // Inner curve for body attachment\n            translate([-5, 0, -1])\n                sphere(d=15);\n        }\n    \n    // Wing ribs for realistic detail\n    for(i = [1:3]) {\n        translate([left_right * (10 + i * 8), 0, 1])\n            rotate([0, 0, left_right * (5 + i * 2)])\n            scale([left_right * 0.5, 0.8, 0.1])\n            cylinder(h=25, d=1.5);\n    }\n}\n\n// Tail module\nmodule manta_tail() {\n    translate([0, -18, 0])\n        rotate([10, 0, 0])\n        scale([0.3, 1, 0.3])\n        cylinder(h=25, d1=6, d2=2);\n    \n    // Tail spine\n    for(i = [0.2:0.2:0.8]) {\n        translate([0, -18 - i * 20, 0])\n            rotate([10 + i * 10, 0, 0])\n            scale([0.3 - i * 0.1, 0.3, 0.3 - i * 0.1])\n            sphere(d=3);\n    }\n}\n\n// Gills and mouth details\nmodule head_details() {\n    // Mouth opening\n    translate([0, 8, -2])\n        rotate([45, 0, 0])\n        scale([1, 0.7, 0.2])\n        cylinder(h=3, d=6);\n    \n    // Gill slits\n    for(i = [0:2]) {\n        translate([0, 5 - i * 2, 1])\n            rotate([0, 0, 0])\n            cube([0.5, 2, 0.5]);\n    }\n}\n\n// Eyes\nmodule eyes() {\n    for(side = [-1, 1]) {\n        translate([side * 4, 8, 3])\n            sphere(d=2);\n        \n        // Eye pupils\n        translate([side * 4.2, 8.5, 3.5])\n            color(\"black\")\n            sphere(d=1);\n    }\n}\n\n// Assembly\nunion() {\n    // Main body parts\n    manta_body();\n    \n    // Wings\n    wing(1);   // Right wing\n    wing(-1);  // Left wing\n    \n    // Tail\n    manta_tail();\n    \n    // Head details\n    head_details();\n    \n    // Eyes\n    eyes();\n}\n\n// Base for 3D printing stability\ntranslate([0, 0, -2])\n    cube([80, 60, 2], center=true);",
    "renders": true
  },
  {
    "animal": "mantis",
    "openscad_code": "// Realistic Mantis - Medium Complexity\n// Designed for 3D printing, no overhangs > 45 degrees\n\n// Overall dimensions: ~80mm length, ~40mm height, ~30mm width\n\n$fn = 32;  // Smooth curves for printing\n\n// Main module\nmodule mantis() {\n    // Body assembly\n    union() {\n        // Head\n        translate([0, 0, 35]) rotate([0, 0, 0]) head();\n        \n        // Thorax\n        translate([0, 0, 25]) thorax();\n        \n        // Abdomen\n        translate([0, 0, 15]) abdomen();\n        \n        // Front legs (raptorial)\n        translate([8, 0, 30]) rotate([0, -20, 30]) raptorial_leg();\n        mirror([1, 0, 0]) translate([8, 0, 30]) rotate([0, -20, -30]) raptorial_leg();\n        \n        // Middle legs\n        translate([5, 0, 22]) rotate([0, 0, 45]) middle_leg();\n        mirror([1, 0, 0]) translate([5, 0, 22]) rotate([0, 0, -45]) middle_leg();\n        \n        // Hind legs\n        translate([2, 0, 18]) rotate([0, 0, 60]) hind_leg();\n        mirror([1, 0, 0]) translate([2, 0, 18]) rotate([0, 0, -60]) hind_leg();\n        \n        // Antennae\n        translate([2, 2, 40]) rotate([0, 30, 10]) antenna();\n        mirror([1, 0, 0]) translate([2, 2, 40]) rotate([0, 30, -10]) antenna();\n    }\n}\n\n// Head module with compound eyes\nmodule head() {\n    union() {\n        // Main head capsule\n        rotate([90, 0, 0]) cylinder(h=12, r1=6, r2=4);\n        \n        // Compound eyes (bulging spheres)\n        translate([3, 3, 0]) sphere(r=2.5);\n        translate([-3, 3, 0]) sphere(r=2.5);\n        \n        // Mandibles (triangular)\n        translate([1.5, -2, -2]) rotate([0, -30, 0]) \n            cube([2, 1, 3], center=true);\n        translate([-1.5, -2, -2]) rotate([0, -30, 0]) \n            cube([2, 1, 3], center=true);\n    }\n}\n\n// Thorax (pro/meso/metathorax combined)\nmodule thorax() {\n    union() {\n        // Main thorax segment\n        scale([1, 0.8, 0.6]) sphere(r=8);\n        \n        // Thoracic shield detail\n        for(i=[-1:1]) {\n            translate([i*2, 0, 1]) \n                rotate([90, 0, 0]) cylinder(h=1, r=1.5);\n        }\n    }\n}\n\n// Abdomen (elongated with segments)\nmodule abdomen() {\n    union() {\n        // Main abdomen segments\n        for(i=[0:5]) {\n            translate([0, 0, -i*2.5]) \n                scale([1 - i*0.08, 0.7 - i*0.05, 0.4]) \n                sphere(r=8 - i);\n        }\n        \n        // Segment lines\n        for(i=[1:4]) {\n            translate([0, 0, -i*2.5 + 1.2]) \n                rotate([90, 0, 0]) \n                cylinder(h=0.5, r=6 - i*0.5);\n        }\n    }\n}\n\n// Raptorial front leg (folded)\nmodule raptorial_leg() {\n    // Coxa\n    rotate([90, 0, 0]) cylinder(h=4, r=2);\n    \n    // Femur (with spines)\n    translate([0, 0, -4]) rotate([0, 30, 0]) {\n        cylinder(h=8, r=1.5);\n        // Spines along femur\n        for(i=[1:3]) {\n            translate([0, 0, -i*2]) \n                rotate([0, 0, 90]) \n                cylinder(h=1.5, r=0.3);\n        }\n    }\n    \n    // Tibia\n    translate([0, 0, -12]) rotate([0, 60, 0]) {\n        cylinder(h=6, r=1);\n        // Tibial spines\n        for(i=[1:2]) {\n            translate([0, 0, -i*2]) \n                rotate([0, 0, 90]) \n                cylinder(h=1, r=0.2);\n        }\n    }\n    \n    // Tarsus\n    translate([0, 0, -18]) rotate([0, 90, 0]) \n        cylinder(h=4, r=0.5);\n}\n\n// Middle leg\nmodule middle_leg() {\n    // Coxa\n    rotate([90, 0, 0]) cylinder(h=3, r=1.5);\n    \n    // Femur\n    translate([0, 0, -3]) rotate([0, 45, 0]) \n        cylinder(h=6, r=1);\n    \n    // Tibia\n    translate([0, 0, -9]) rotate([0, 60, 0]) \n        cylinder(h=5, r=0.8);\n    \n    // Tarsus\n    translate([0, 0, -14]) rotate([0, 75, 0]) \n        cylinder(h=3, r=0.4);\n}\n\n// Hind leg\nmodule hind_leg() {\n    // Coxa\n    rotate([90, 0, 0]) cylinder(h=2.5, r=1.2);\n    \n    // Femur\n    translate([0, 0, -2.5]) rotate([0, 30, 0]) \n        cylinder(h=5, r=0.8);\n    \n    // Tibia\n    translate([0, 0, -7.5]) rotate([0, 45, 0]) \n        cylinder(h=4, r=0.6);\n    \n    // Tarsus\n    translate([0, 0, -11.5]) rotate([0, 60, 0]) \n        cylinder(h=2.5, r=0.3);\n}\n\n// Antenna module\nmodule antenna() {\n    // Base\n    sphere(r=0.8);\n    \n    // Segments\n    for(i=[1:10]) {\n        translate([0, 0, -i*1.5]) \n            rotate([0, 0, i*10]) \n            cylinder(h=1.5, r=0.5 - i*0.04);\n    }\n}\n\n// Generate the mantis\nmantis();",
    "renders": true
  },
  {
    "animal": "marabou",
    "openscad_code": "// Marabou Stork - Realistic Style, Medium Complexity\n// Designed for 3D printing with no overhangs\n\n$fn = 36;  // Smooth curves for realistic appearance\n\n// Overall dimensions\nbird_length = 80;\nbird_height = 45;\nwing_span = 75;\n\n// Main body module\nmodule body() {\n    // Torso - elongated sphere\n    translate([0, 0, 25])\n        scale([1.2, 0.8, 1])\n        sphere(12);\n    \n    // Abdomen - smaller sphere\n    translate([-15, 0, 18])\n        scale([0.9, 0.7, 0.6])\n        sphere(10);\n}\n\n// Head with distinctive features\nmodule head() {\n    // Main head shape\n    translate([30, 0, 35])\n        rotate([0, 20, 0])\n        scale([1.3, 0.9, 1.1])\n        sphere(8);\n    \n    // Beak - long and tapered\n    translate([42, 0, 35])\n        rotate([0, -10, 0])\n        cylinder(18, 2.5, 1);\n    \n    // Throat pouch\n    translate([35, 0, 28])\n        scale([1, 0.8, 0.6])\n        sphere(5);\n    \n    // Eyes\n    for(side = [-1, 1]) {\n        translate([32, side*4, 37])\n            sphere(1.5);\n    }\n}\n\n// Legs and feet\nmodule legs() {\n    // Left leg\n    translate([5, -8, 0]) {\n        cylinder(20, 2, 2);\n        // Foot\n        translate([0, 0, -2])\n            rotate([90, 0, 0])\n            cylinder(12, 1.5, 1.5);\n        // Toes\n        for(angle = [-30, 0, 30]) {\n            rotate([0, 0, angle])\n                translate([10, 0, 0])\n                    rotate([90, 0, 0])\n                    cylinder(8, 1, 0.5);\n        }\n    }\n    \n    // Right leg (mirrored)\n    translate([5, 8, 0]) {\n        cylinder(20, 2, 2);\n        // Foot\n        translate([0, 0, -2])\n            rotate([90, 0, 0])\n            cylinder(12, 1.5, 1.5);\n        // Toes\n        for(angle = [-30, 0, 30]) {\n            rotate([0, 0, angle])\n                translate([10, 0, 0])\n                    rotate([90, 0, 0])\n                    cylinder(8, 1, 0.5);\n        }\n    }\n}\n\n// Wings with feather details\nmodule wings() {\n    // Left wing\n    translate([0, -20, 30]) {\n        rotate([0, 0, -20])\n            scale([1.2, 0.3, 0.1])\n            sphere(20);\n        \n        // Primary feathers\n        for(i = [0:4]) {\n            translate([15 + i*3, -5 - i*2, 0])\n                rotate([0, 0, -15 - i*5])\n                scale([1, 0.2, 0.05])\n                cube([5, 8, 1]);\n        }\n    }\n    \n    // Right wing (mirrored)\n    mirror([0, 1, 0])\n        translate([0, -20, 30]) {\n            rotate([0, 0, -20])\n                scale([1.2, 0.3, 0.1])\n                sphere(20);\n            \n            // Primary feathers\n            for(i = [0:4]) {\n                translate([15 + i*3, -5 - i*2, 0])\n                    rotate([0, 0, -15 - i*5])\n                    scale([1, 0.2, 0.05])\n                    cube([5, 8, 1]);\n            }\n        }\n}\n\n// Tail feathers\nmodule tail() {\n    translate([-25, 0, 25]) {\n        rotate([0, 0, 180])\n            scale([1.5, 0.8, 0.1])\n            sphere(10);\n        \n        // Individual tail feathers\n        for(i = [0:3]) {\n            translate([-5 - i*2, (i-1.5)*3, 0])\n                rotate([0, 0, (i-1.5)*10])\n                scale([1.2, 0.15, 0.05])\n                cube([8, 5, 1]);\n        }\n    }\n}\n\n// Neck connection\nmodule neck() {\n    translate([20, 0, 30])\n        rotate([0, 20, 0])\n        scale([1, 0.7, 0.7])\n        cylinder(15, 5, 3);\n}\n\n// Assemble the marabou\nunion() {\n    body();\n    neck();\n    head();\n    wings();\n    tail();\n    legs();\n}",
    "renders": true
  },
  {
    "animal": "margay",
    "openscad_code": "// Margay - Medium complexity realistic style\n// Size: 80mm long, 40mm tall, 25mm wide\n\n$fn = 32;\n\n// Main body module\nmodule margay() {\n    // Head\n    translate([0, 0, 35]) rotate([0, 0, 0]) head();\n    \n    // Body\n    translate([0, 0, 20]) body();\n    \n    // Legs - front\n    translate([12, 0, 18]) rotate([0, 0, -15]) front_leg();\n    translate([-12, 0, 18]) rotate([0, 0, 15]) mirror([1, 0, 0]) front_leg();\n    \n    // Legs - back\n    translate([20, 0, 18]) rotate([0, 0, 15]) back_leg();\n    translate([-20, 0, 18]) rotate([0, 0, -15]) mirror([1, 0, 0]) back_leg();\n    \n    // Tail\n    translate([35, 0, 25]) rotate([0, 0, 0]) tail();\n}\n\n// Head with ears and facial features\nmodule head() {\n    union() {\n        // Main head sphere\n        scale([1, 0.9, 0.8]) sphere(d=18);\n        \n        // Snout\n        translate([8, 0, -2]) scale([1.2, 0.7, 0.6]) sphere(d=8);\n        \n        // Ears\n        translate([0, 7, 6]) rotate([0, 15, 0]) ear();\n        translate([0, -7, 6]) rotate([0, -15, 0]) ear();\n        \n        // Eyes\n        translate([5, 4, 2]) sphere(d=3);\n        translate([5, -4, 2]) sphere(d=3);\n        \n        // Nose\n        translate([11, 0, 0]) scale([1.2, 0.8, 0.6]) sphere(d=3);\n    }\n}\n\n// Ear module\nmodule ear() {\n    difference() {\n        // Outer ear\n        scale([1, 0.7, 1.5]) sphere(d=6);\n        \n        // Inner ear\n        translate([0, 0, 1]) scale([0.7, 0.5, 1.2]) sphere(d=4);\n    }\n}\n\n// Body module\nmodule body() {\n    hull() {\n        // Front part\n        translate([-5, 0, 0]) sphere(d=20);\n        \n        // Back part\n        translate([20, 0, 0]) sphere(d=18);\n    }\n}\n\n// Front leg module\nmodule front_leg() {\n    union() {\n        // Upper leg\n        translate([0, 0, -8]) cylinder(h=16, d1=8, d2=6);\n        \n        // Lower leg\n        translate([0, 0, -18]) cylinder(h=12, d1=6, d2=4);\n        \n        // Paw\n        translate([0, 0, -27]) sphere(d=6);\n        \n        // Toes\n        for(i = [-2:1:2]) {\n            translate([i*2, 0, -30]) sphere(d=3);\n        }\n    }\n}\n\n// Back leg module\nmodule back_leg() {\n    union() {\n        // Upper leg (longer for jumping)\n        translate([0, 0, -10]) cylinder(h=20, d1=9, d2=7);\n        \n        // Lower leg\n        translate([0, 0, -22]) cylinder(h=12, d1=7, d2=5);\n        \n        // Paw\n        translate([0, 0, -31]) sphere(d=7);\n        \n        // Toes\n        for(i = [-2.5:1.25:2.5]) {\n            translate([i*2, 0, -34]) sphere(d=3.5);\n        }\n    }\n}\n\n// Tail module\nmodule tail() {\n    // Create tail using hull of spheres\n    hull() {\n        translate([0, 0, 0]) sphere(d=8);\n        translate([5, 0, -2]) sphere(d=7);\n        translate([12, 0, -5]) sphere(d=6);\n        translate([20, 0, -8]) sphere(d=5);\n    }\n}\n\n// Generate the margay\nmargay();",
    "renders": true
  },
  {
    "animal": "marmoset",
    "openscad_code": "// Marmoset - Realistic Medium Complexity\n// Overall dimensions: ~60mm tall\n\n$fn = 30;\n\n// Main body\nmodule body() {\n    // Torso\n    union() {\n        // Chest\n        translate([0, 0, 20])\n            scale([1, 0.8, 1.2])\n            sphere(8);\n        \n        // Abdomen\n        translate([0, 0, 12])\n            scale([0.9, 0.7, 1.1])\n            sphere(7);\n    }\n}\n\n// Head\nmodule head() {\n    union() {\n        // Skull\n        translate([0, 0, 35])\n            scale([0.9, 0.9, 1.1])\n            sphere(7);\n        \n        // Muzzle\n        translate([0, 4.5, 33])\n            scale([0.6, 0.4, 0.5])\n            sphere(5);\n        \n        // Ears - two small spheres\n        translate([-5, 0, 38])\n            scale([0.4, 0.2, 0.8])\n            sphere(3);\n        \n        translate([5, 0, 38])\n            scale([0.4, 0.2, 0.8])\n            sphere(3);\n    }\n}\n\n// Arms\nmodule arms() {\n    union() {\n        // Left arm\n        translate([-7, 0, 25])\n            rotate([0, 0, 30])\n            cylinder(h=12, r1=2.5, r2=1.5);\n        \n        // Left forearm\n        translate([-12, 2, 17])\n            rotate([0, 0, 45])\n            cylinder(h=10, r1=1.5, r2=1);\n        \n        // Right arm\n        translate([7, 0, 25])\n            rotate([0, 0, -30])\n            cylinder(h=12, r1=2.5, r2=1.5);\n        \n        // Right forearm\n        translate([12, 2, 17])\n            rotate([0, 0, -45])\n            cylinder(h=10, r1=1.5, r2=1);\n    }\n}\n\n// Legs\nmodule legs() {\n    union() {\n        // Left leg\n        translate([-3, 0, 12])\n            rotate([0, 0, 15])\n            cylinder(h=15, r1=3, r2=2);\n        \n        // Left lower leg\n        translate([-4, 0, 0])\n            rotate([0, 0, 15])\n            cylinder(h=12, r1=2, r2=1.5);\n        \n        // Right leg\n        translate([3, 0, 12])\n            rotate([0, 0, -15])\n            cylinder(h=15, r1=3, r2=2);\n        \n        // Right lower leg\n        translate([4, 0, 0])\n            rotate([0, 0, -15])\n            cylinder(h=12, r1=2, r2=1.5);\n    }\n}\n\n// Tail\nmodule tail() {\n    // Curved tail using hull of spheres\n    hull() {\n        translate([0, -4, 8])\n            sphere(3);\n        translate([0, -8, 5])\n            sphere(2.5);\n        translate([0, -12, 2])\n            sphere(2);\n        translate([0, -15, 0])\n            sphere(1.5);\n    }\n}\n\n// Hands\nmodule hands() {\n    // Simple paws at end of arms\n    translate([-14, 2.5, 14])\n        sphere(1.8);\n    \n    translate([14, 2.5, 14])\n        sphere(1.8);\n}\n\n// Feet\nmodule feet() {\n    // Simple feet at end of legs\n    translate([-4, 0, -4])\n        scale([1.2, 0.8, 0.5])\n        sphere(2.5);\n    \n    translate([4, 0, -4])\n        scale([1.2, 0.8, 0.5])\n        sphere(2.5);\n}\n\n// Eyes\nmodule eyes() {\n    // Left eye\n    difference() {\n        translate([-2, 4.5, 36])\n            sphere(1.5);\n        translate([-2.2, 5.2, 37.5])\n            sphere(0.8);\n    }\n    \n    // Right eye\n    difference() {\n        translate([2, 4.5, 36])\n            sphere(1.5);\n        translate([2.2, 5.2, 37.5])\n            sphere(0.8);\n    }\n}\n\n// Nose\nmodule nose() {\n    translate([0, 6.5, 33])\n        scale([1, 0.5, 0.3])\n        sphere(1);\n}\n\n// Assemble the marmoset\nunion() {\n    body();\n    head();\n    arms();\n    legs();\n    tail();\n    hands();\n    feet();\n    eyes();\n    nose();\n}",
    "renders": true
  },
  {
    "animal": "marmot",
    "openscad_code": "// Realistic Marmot - Medium Complexity\n// Designed for 3D printing with no overhangs\n\n$fn = 32;  // Smooth curves for realistic appearance\n\n// Main body module\nmodule marmot() {\n    // Body\n    difference() {\n        union() {\n            // Main torso\n            scale([1, 0.8, 0.7])\n                sphere(20);\n            \n            // Belly bulge\n            translate([0, -5, -10])\n                scale([0.8, 0.9, 0.5])\n                    sphere(15);\n        }\n        \n        // Leg holes\n        for(x = [-12, 12]) {\n            translate([x, 0, -15])\n                rotate([90, 0, 0])\n                    cylinder(h=10, r=6);\n        }\n    }\n    \n    // Head\n    translate([0, 20, 5]) {\n        difference() {\n            // Main head shape\n            scale([0.9, 1.2, 0.9])\n                sphere(12);\n            \n            // Snout area\n            translate([0, 15, -2])\n                scale([0.8, 0.6, 0.6])\n                    sphere(8);\n        }\n        \n        // Ears\n        for(x = [-8, 8]) {\n            translate([x, 5, 10]) {\n                rotate([45 * (x > 0 ? 1 : -1), 0, 0])\n                    scale([0.3, 1, 0.5])\n                        cylinder(h=8, r1=4, r2=2);\n            }\n        }\n        \n        // Eyes\n        for(x = [-5, 5]) {\n            translate([x, 12, 3])\n                sphere(1.5);\n        }\n        \n        // Nose\n        translate([0, 18, -1])\n            scale([1.2, 0.8, 0.8])\n                sphere(2);\n    }\n    \n    // Tail\n    translate([0, -25, 0])\n        rotate([45, 0, 0])\n            scale([0.6, 1, 0.6])\n                cylinder(h=15, r1=6, r2=4);\n    \n    // Legs\n    for(x = [-12, 12]) {\n        translate([x, 0, -20]) {\n            // Upper leg\n            rotate([90, 0, 0])\n                cylinder(h=12, r=6);\n            \n            // Paw\n            translate([0, 0, -12])\n                scale([1.2, 1.2, 0.5])\n                    sphere(5);\n            \n            // Toes\n            for(angle = [0, 120, 240]) {\n                rotate([0, 0, angle])\n                    translate([4, 0, -14])\n                        scale([0.3, 0.3, 1])\n                            cylinder(h=3, r=2);\n            }\n        }\n    }\n    \n    // Front paws\n    for(x = [-10, 10]) {\n        translate([x, 15, -8]) {\n            // Forearm\n            rotate([90, 0, 0])\n                cylinder(h=8, r=5);\n            \n            // Paw\n            translate([0, 0, -8])\n                scale([1.2, 1.2, 0.5])\n                    sphere(4);\n            \n            // Toes\n            for(angle = [0, 120, 240]) {\n                rotate([0, 0, angle])\n                    translate([3, 0, -10])\n                        scale([0.3, 0.3, 1])\n                            cylinder(h=2, r=1.5);\n            }\n        }\n    }\n    \n    // Whiskers\n    for(side = [-1, 1]) {\n        for(i = [0:2]) {\n            rotate([0, 0, side * (30 + i * 15)])\n                translate([side * 8, 16, 1])\n                    cylinder(h=8, r=0.3);\n        }\n    }\n}\n\n// Create the marmot\nmarmot();",
    "renders": true
  },
  {
    "animal": "marten",
    "openscad_code": "// Marten - Realistic medium-complexity 3D printable model\n// Overall size ~80 mm nose to tail tip\n\n$fn=40;  // Smooth curves for printing\n\nmodule marten() {\n    // Body core\n    difference() {\n        union() {\n            // Torso\n            scale([1.3,1,0.8])\n                sphere(d=30, center=true);\n\n            // Neck bridge\n            translate([0,12,1])\n                rotate([0,-20,0])\n                scale([0.8,0.6,0.6])\n                    cylinder(h=15, r=8, center=true);\n\n            // Head\n            translate([0,22,2])\n                rotate([0,-30,0])\n                scale([1.2,1,1])\n                    sphere(d=20, center=true);\n\n            // Snout\n            translate([0,32,0])\n                rotate([0,-40,0])\n                scale([1.5,1,0.8])\n                    cylinder(h=12, r=5, center=true);\n        }\n\n        // Eye sockets\n        translate([5,24,4])\n            sphere(d=6);\n        translate([-5,24,4])\n            sphere(d=6);\n    }\n\n    // Ears\n    module ear(pos) {\n        translate(pos)\n            rotate([0,-30,0])\n            rotate_extrude(angle=60)\n                translate([0,0])\n                    circle(r=3);\n    }\n    ear([5,18,10]);\n    mirror([1,0,0]) ear([5,18,10]);\n\n    // Legs\n    module leg(offset,angle) {\n        translate(offset)\n            rotate([angle,0,0])\n            union() {\n                // Upper leg\n                cylinder(h=12, r=4, center=true);\n                // Lower leg\n                translate([0,0,-12])\n                    cylinder(h=12, r=3, center=true);\n                // Paw\n                translate([0,0,-24])\n                    scale([1.2,1.2,0.5])\n                        sphere(d=8);\n            }\n    }\n\n    leg([-10,-5,-12], 30);\n    leg([10,-5,-12], 30);\n    leg([-8,-15,-12], 40);\n    leg([8,-15,-12], 40);\n\n    // Tail\n    hull() {\n        translate([0,-18,0])\n            sphere(d=8);\n        for(i=[0:5])\n            translate([-i*3,-18-i*5,2+i])\n                sphere(d=8-i*1.2);\n    }\n}\n\nmarten();",
    "renders": true
  },
  {
    "animal": "martin",
    "openscad_code": "// Martin (bird) - Realistic style, medium complexity\n// Overall size approx 60mm long x 35mm wide x 25mm high\n\n// Wing module - realistic feathered shape\nmodule wing() {\n    difference() {\n        // Main wing shape\n        union() {\n            // Upper wing\n            translate([-15, 0, 0])\n                scale([1.5, 1, 0.3])\n                sphere(8);\n            \n            // Lower wing\n            translate([-15, -5, -3])\n                scale([1.2, 0.8, 0.2])\n                sphere(6);\n            \n            // Wing tip\n            translate([-25, -2, -1])\n                scale([0.8, 0.6, 0.15])\n                sphere(4);\n        }\n        \n        // Feather cuts\n        for (i = [0:2]) {\n            translate([-18 - i*3, -3, -1])\n                rotate([0, 0, 15])\n                cube([2, 8, 3], center=true);\n        }\n    }\n}\n\n// Tail module - forked swallow tail\nmodule tail() {\n    union() {\n        // Left tail feather\n        translate([22, -6, 0])\n            rotate([0, 15, 0])\n            scale([0.3, 1, 0.05])\n            cube([15, 8, 1]);\n        \n        // Right tail feather\n        translate([22, 6, 0])\n            rotate([0, 15, 0])\n            scale([0.3, 1, 0.05])\n            cube([15, 8, 1]);\n        \n        // Tail base\n        translate([18, 0, 0])\n            scale([0.8, 1.5, 0.3])\n            sphere(5);\n    }\n}\n\n// Body\nunion() {\n    // Main body - elongated oval\n    translate([5, 0, 0])\n        scale([1.2, 0.8, 0.7])\n        sphere(12);\n    \n    // Head\n    translate([-8, 0, 2])\n        sphere(8);\n    \n    // Beak\n    translate([-17, 0, 2])\n        rotate([0, -10, 0])\n        scale([0.3, 0.3, 0.2])\n        cylinder(h=8, r1=3, r2=0.5);\n    \n    // Eyes\n    translate([-11, -3, 4])\n        sphere(1.5);\n    translate([-11, 3, 4])\n        sphere(1.5);\n    \n    // Wings\n    translate([0, 10, 2])\n        rotate([0, 0, 30])\n        wing();\n    translate([0, -10, 2])\n        rotate([0, 0, -30])\n        mirror([0, 1, 0])\n        wing();\n    \n    // Tail\n    tail();\n    \n    // Feet\n    translate([5, -4, -8])\n        rotate([0, 10, 0])\n        cylinder(h=5, r=1.5);\n    translate([5, 4, -8])\n        rotate([0, 10, 0])\n        cylinder(h=5, r=1.5);\n}",
    "renders": true
  },
  {
    "animal": "mastiff",
    "openscad_code": "// Mastiff Dog - Realistic Medium Complexity\n// 3D printable mastiff, ~70mm length\n\n// Main body module\nmodule body() {\n    // Torso - main body\n    translate([0, 0, 5])\n    scale([1.3, 0.7, 0.5])\n    sphere(d=30, $fn=30);\n    \n    // Chest\n    translate([10, 0, 2])\n    scale([0.8, 0.6, 0.4])\n    sphere(d=25, $fn=30);\n    \n    // Rear hips\n    translate([-12, 0, 3])\n    scale([0.7, 0.8, 0.5])\n    sphere(d=20, $fn=30);\n}\n\n// Head module\nmodule head() {\n    // Main head shape\n    translate([18, 0, 12])\n    rotate([0, -10, 0])\n    scale([1.1, 0.9, 0.8])\n    sphere(d=20, $fn=30);\n    \n    // Snout\n    translate([25, 0, 10])\n    rotate([0, -10, 0])\n    scale([1.2, 0.6, 0.5])\n    sphere(d=15, $fn=30);\n    \n    // Nose\n    translate([28, 0, 10])\n    rotate([0, -10, 0])\n    scale([0.4, 0.5, 0.5])\n    color(\"black\")\n    sphere(d=5, $fn=20);\n    \n    // Jowls\n    translate([23, 0, 7])\n    rotate([0, -10, 0])\n    scale([0.8, 0.3, 0.2])\n    sphere(d=12, $fn=20);\n}\n\n// Ear module\nmodule ear(side) {\n    translate([15, side * 8, 15])\n    rotate([0, 0, side * 10])\n    scale([0.3, 0.8, 1.2])\n    cylinder(h=8, d1=6, d2=8, $fn=20);\n}\n\n// Leg module\nmodule leg(x, y, angle) {\n    translate([x, y, 0])\n    rotate([angle, 0, 0])\n    union() {\n        // Upper leg\n        translate([0, 0, 3])\n        rotate([0, 90, 0])\n        cylinder(h=8, d=6, $fn=20);\n        \n        // Lower leg\n        translate([0, 0, -3])\n        rotate([0, 0, 30])\n        rotate([0, 90, 0])\n        cylinder(h=8, d=5, $fn=20);\n        \n        // Paw\n        translate([0, 0, -9])\n        scale([1, 1.2, 0.6])\n        sphere(d=6, $fn=20);\n    }\n}\n\n// Tail module\nmodule tail() {\n    translate([-15, 0, 8])\n    rotate([0, 40, 0])\n    rotate([0, 0, -20])\n    scale([0.8, 0.8, 1])\n    cylinder(h=15, d1=5, d2=3, $fn=20);\n}\n\n// Eyes\nmodule eye(side) {\n    translate([22, side * 4, 12])\n    color(\"black\")\n    sphere(d=2, $fn=20);\n}\n\n// Assembly\nunion() {\n    // Main body parts\n    body();\n    head();\n    \n    // Ears\n    ear(1);\n    ear(-1);\n    \n    // Eyes\n    eye(1);\n    eye(-1);\n    \n    // Legs - front\n    leg(12, 6, 30);\n    leg(12, -6, 30);\n    \n    // Legs - rear\n    leg(-10, 6, -30);\n    leg(-10, -6, -30);\n    \n    // Tail\n    tail();\n}\n\n// Base plate for stability\ntranslate([0, 0, -1])\ncolor(\"gray\")\ncube([35, 20, 1], center=true);",
    "renders": true
  },
  {
    "animal": "meerkat",
    "openscad_code": "// Meerkat model - medium complexity realistic style\n\n// Overall scale factor\nscale_factor = 1;\nbody_height = 60 * scale_factor;\n\n// Body module\nmodule body() {\n    // Main torso\n    translate([0, 0, 25]) \n        scale([1.2, 0.8, 1.5]) \n        sphere(d=30);\n    \n    // Belly\n    translate([0, 5, 15])\n        scale([1.1, 0.6, 0.8])\n        sphere(d=25);\n}\n\n// Head module\nmodule head() {\n    // Main head sphere\n    translate([0, 0, 55])\n        sphere(d=22);\n    \n    // Snout\n    translate([0, -10, 52])\n        scale([0.8, 1.2, 0.8])\n        sphere(d=15);\n    \n    // Nose\n    color(\"black\")\n    translate([0, -18, 52])\n        scale([0.6, 0.4, 0.4])\n        sphere(d=5);\n}\n\n// Ears module\nmodule ears() {\n    // Left ear\n    translate([-8, 0, 65])\n        rotate([0, 30, 0])\n        scale([0.3, 0.8, 0.8])\n        cylinder(h=12, d1=6, d2=4);\n    \n    // Right ear\n    translate([8, 0, 65])\n        rotate([0, -30, 0])\n        scale([0.3, 0.8, 0.8])\n        cylinder(h=12, d1=6, d2=4);\n}\n\n// Eyes module\nmodule eyes() {\n    // Left eye\n    color(\"black\")\n    translate([-6, -12, 58])\n        sphere(d=3);\n    \n    // Right eye\n    color(\"black\")\n    translate([6, -12, 58])\n        sphere(d=3);\n}\n\n// Arms module\nmodule arms() {\n    // Left arm\n    translate([-15, 0, 40])\n        rotate([0, 0, -20])\n        cylinder(h=18, d=6);\n    \n    // Right arm\n    translate([15, 0, 40])\n        rotate([0, 0, 20])\n        cylinder(h=18, d=6);\n}\n\n// Legs module\nmodule legs() {\n    // Left leg\n    translate([-8, 0, 10])\n        cylinder(h=20, d1=8, d2=6);\n    \n    // Right leg\n    translate([8, 0, 10])\n        cylinder(h=20, d1=8, d2=6);\n}\n\n// Tail module\nmodule tail() {\n    translate([0, 15, 25])\n        rotate([90, 0, 0])\n        scale([0.8, 0.8, 2])\n        cylinder(h=25, d1=8, d2=4);\n}\n\n// Stripes pattern on back\nmodule stripes() {\n    for(i = [0:3]) {\n        translate([0, 0, 40 + i*5])\n            scale([1.3, 0.9, 0.2])\n            sphere(d=25);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    ears();\n    eyes();\n    arms();\n    legs();\n    tail();\n    stripes();\n}",
    "renders": true
  },
  {
    "animal": "megapode",
    "openscad_code": "$fa = 2;\n$fs = 1;\n\nmodule megapode() {\n    // Overall scale\n    scale(0.4)\n    union() {\n        // Body\n        translate([0, 0, 4])\n        rotate([0, -20, 0])\n        scale([1.1, 0.9, 1.2])\n        sphere(r = 10);\n\n        // Neck\n        translate([0, 0, 12])\n        rotate([0, 20, 0])\n        cylinder(h = 8, r1 = 4, r2 = 3, $fn = 16);\n\n        // Head\n        translate([0, 0, 21])\n        rotate([0, 20, 0])\n        scale([0.9, 0.8, 1.1])\n        sphere(r = 4);\n\n        // Beak\n        translate([0, 0, 24])\n        rotate([0, 20, 0])\n        cylinder(h = 4, r1 = 1.5, r2 = 0.5, $fn = 8);\n\n        // Tail\n        translate([-10, 0, 4])\n        rotate([0, -30, 0])\n        scale([1.2, 1, 0.6])\n        sphere(r = 5);\n\n        // Legs\n        for (side = [-1, 1]) {\n            // Upper leg\n            translate([side * 4, 0, 2])\n            rotate([0, 0, side * 15])\n            cylinder(h = 6, r = 1.5, $fn = 8);\n\n            // Lower leg\n            translate([side * 5, 0, -2])\n            rotate([0, 0, side * 10])\n            cylinder(h = 5, r = 1.2, $fn = 8);\n\n            // Foot\n            translate([side * 5.5, 0, -5.5])\n            rotate([0, 0, side * 10])\n            scale([1.5, 1, 0.5])\n            sphere(r = 2);\n\n            // Toes\n            for (t = [0, 1, -1]) {\n                translate([side * (5.5 + t * 1.5), 0, -6.5])\n                rotate([0, 0, side * (10 + t * 20)])\n                cylinder(h = 2, r = 0.6, $fn = 6);\n            }\n        }\n\n        // Wings\n        for (side = [-1, 1]) {\n            translate([side * 8, 0, 8])\n            rotate([0, side * 20, 0])\n            scale([1.2, 0.3, 0.8])\n            sphere(r = 6);\n\n            // Wing feathers\n            for (i = [0:2]) {\n                translate([side * (9 + i), 0, 8 - i * 2])\n                rotate([0, side * (20 + i * 10), 0])\n                scale([0.5, 0.2, 0.3])\n                sphere(r = 3);\n            }\n        }\n\n        // Eye\n        for (side = [-1, 1]) {\n            translate([side * 1.5, 1.8, 21.5])\n            scale([0.7, 0.7, 0.5])\n            sphere(r = 1);\n            \n            // Pupil\n            translate([side * 1.5, 2.2, 21.8])\n            scale([0.4, 0.4, 0.3])\n            sphere(r = 0.5);\n        }\n    }\n}\n\n// Create the model\nmegapode();",
    "renders": true
  },
  {
    "animal": "mink",
    "openscad_code": "// Mink 3D Printable Model - Realistic Style, Medium Complexity\n// Approx. 75 x 25 x 30 mm\n\n$fn = 30;\n\n// Main body\nmodule body() {\n    // Torso\n    union() {\n        // Main body cylinder\n        translate([0, 0, 15]) \n            rotate([90, 0, 0]) \n                cylinder(h=60, d1=20, d2=15);\n        \n        // Rump\n        translate([-30, 0, 15]) \n            sphere(d=18);\n        \n        // Chest\n        translate([30, 0, 15]) \n            sphere(d=15);\n    }\n}\n\n// Head\nmodule head() {\n    union() {\n        // Main head sphere\n        translate([40, 0, 22]) \n            sphere(d=14);\n        \n        // Snout\n        translate([48, 0, 22]) \n            rotate([0, -10, 0]) \n                cylinder(h=12, d1=8, d2=5);\n        \n        // Ears\n        for(side = [-1, 1]) {\n            translate([38, side*6, 30]) \n                rotate([side*20, 0, 0]) \n                    cylinder(h=8, d1=3, d2=6);\n        }\n    }\n}\n\n// Legs\nmodule legs() {\n    for(side = [-1, 1]) {\n        // Front legs\n        translate([28, side*6, 0]) {\n            cylinder(h=12, d=4);\n            translate([0, 0, 12]) \n                sphere(d=4.5);\n        }\n        \n        // Back legs\n        translate([-20, side*6, 0]) {\n            cylinder(h=15, d=5);\n            translate([0, 0, 15]) \n                sphere(d=5.5);\n        }\n    }\n}\n\n// Tail\nmodule tail() {\n    hull() {\n        translate([-45, 0, 15]) \n            sphere(d=8);\n        translate([-65, 0, 25]) \n            sphere(d=5);\n        translate([-80, 0, 20]) \n            sphere(d=3);\n    }\n}\n\n// Eyes\nmodule eyes() {\n    for(side = [-1, 1]) {\n        translate([46, side*3.5, 24]) {\n            difference() {\n                sphere(d=3);\n                translate([1.5, 0, 0]) \n                    sphere(d=2);\n            }\n        }\n    }\n}\n\n// Nose\nmodule nose() {\n    translate([53, 0, 22]) \n        sphere(d=2);\n}\n\n// Whiskers\nmodule whiskers() {\n    for(side = [-1, 1]) {\n        for(i = [0:2]) {\n            rotate([0, 90, side*20 + i*10]) \n                translate([50, side*6, 21 + i*1.5]) \n                    cylinder(h=8, d=0.5);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    legs();\n    tail();\n    eyes();\n    nose();\n    whiskers();\n}",
    "renders": true
  },
  {
    "animal": "minke",
    "openscad_code": "// Minke whale - medium complexity realistic style\n// Approx 80mm long, 3-4mm wall thickness for 3D printing\n\nmodule body() {\n    difference() {\n        // Main body hull\n        hull() {\n            translate([-35, 0, 0]) sphere([18, 12, 8]);\n            translate([35, 0, 0]) sphere([8, 6, 5]);\n            translate([25, 0, -2]) sphere([12, 9, 6]);\n        }\n        \n        // Belly cutout for flat bottom printing\n        translate([-40, 0, -10]) cube([80, 30, 10]);\n    }\n}\n\nmodule head() {\n    // Rounded forehead\n    translate([-30, 0, 8]) scale([1.2, 1, 1]) sphere(12);\n    \n    // Snout extension\n    translate([-45, 0, 5]) scale([1.5, 0.8, 0.6]) sphere(8);\n    \n    // Lower jaw\n    translate([-40, 0, -2]) scale([1.3, 0.7, 0.5]) sphere(6);\n}\n\nmodule dorsal_fin() {\n    // Base of fin\n    translate([15, 0, 10]) cylinder(h=3, r1=8, r2=6);\n    \n    // Fin blade\n    difference() {\n        translate([15, 0, 15]) rotate([0, 10, 0]) \n            cube([12, 1, 15], center=true);\n        \n        // Taper the fin\n        translate([15, 0, 22]) rotate([0, 10, 0])\n            cube([14, 3, 8], center=true);\n    }\n}\n\nmodule pectoral_fin(side) {\n    // Flipper base\n    translate([-10, side*12, -2]) rotate([0, 0, side*15])\n        scale([1.2, 0.6, 0.3]) sphere(6);\n    \n    // Flipper blade\n    translate([-5, side*18, -4]) rotate([0, side*20, side*30])\n        scale([2, 0.8, 0.2]) cube([12, 8, 2], center=true);\n}\n\nmodule tail_flukes() {\n    union() {\n        // Tail stock\n        translate([35, 0, 0]) cylinder(h=8, r1=6, r2=4);\n        \n        // Left fluke\n        translate([42, -12, 0]) rotate([0, 0, -20])\n            scale([1.5, 1, 0.3]) sphere(8);\n        \n        // Right fluke\n        translate([42, 12, 0]) rotate([0, 0, 20])\n            scale([1.5, 1, 0.3]) sphere(8);\n        \n        // Fluke tips\n        translate([48, -18, -2]) rotate([0, 0, -30])\n            scale([2, 0.5, 0.2]) cube([8, 3, 1], center=true);\n        \n        translate([48, 18, -2]) rotate([0, 0, 30])\n            scale([2, 0.5, 0.2]) cube([8, 3, 1], center=true);\n    }\n}\n\nmodule blowhole() {\n    // Two small holes on top\n    translate([-20, -2, 12]) cylinder(h=3, r=1.5);\n    translate([-20, 2, 12]) cylinder(h=3, r=1.5);\n}\n\nmodule eye(side) {\n    // Eye socket\n    translate([-28, side*8, 6]) sphere(2);\n    \n    // Eye itself\n    translate([-29, side*8, 6]) sphere(1.5);\n}\n\n// Main assembly\nunion() {\n    body();\n    head();\n    dorsal_fin();\n    pectoral_fin(1);   // Right fin\n    pectoral_fin(-1);  // Left fin\n    tail_flukes();\n    blowhole();\n    eye(1);   // Right eye\n    eye(-1);  // Left eye\n}\n\n// Add support base for printing\ntranslate([-40, 0, -10]) cube([80, 40, 1]);",
    "renders": true
  },
  {
    "animal": "minnow",
    "openscad_code": "// Realistic Minnow - Medium Complexity\n// Total length ~80mm\n\n// Main body parameters\nbody_length = 70;\nbody_height = 15;\nbody_width = 12;\n\n// Head parameters\nhead_length = 20;\nhead_height = 18;\nhead_width = 14;\n\n// Tail parameters\ntail_length = 25;\ntail_height = 20;\ntail_width = 2;\n\n// Fin parameters\ndorsal_height = 12;\ndorsal_length = 25;\npectoral_length = 15;\npectoral_height = 8;\n\n// Eye parameters\neye_radius = 3;\neye_offset = 8;\n\n// Scale parameters\nscale_size = 2;\nscale_rows = 8;\nscale_cols = 12;\n\n// Wall thickness for 3D printing\nwall_thickness = 1.2;\n\nmodule minnow_body() {\n    // Main tapered body\n    hull() {\n        // Front of body (wider)\n        translate([0, 0, 0])\n            scale([1, 1, 0.8])\n                sphere(d=head_width, $fn=20);\n        \n        // Mid body\n        translate([-body_length/3, 0, 0])\n            scale([1.2, 1, 0.9])\n                sphere(d=body_width*0.9, $fn=20);\n        \n        // Tail junction\n        translate([-body_length*0.7, 0, 0])\n            scale([0.8, 0.7, 0.6])\n                sphere(d=body_width*0.7, $fn=20);\n    }\n}\n\nmodule fish_head() {\n    // Main head shape\n    translate([head_length/2, 0, 0])\n        scale([1.2, 1, 0.9])\n            sphere(d=head_width, $fn=25);\n    \n    // Snout extension\n    translate([head_length, 0, -2])\n        scale([1.5, 0.8, 0.6])\n            sphere(d=head_width*0.7, $fn=20);\n}\n\nmodule caudal_fin() {\n    // Tail fin (bifurcated)\n    union() {\n        // Upper lobe\n        translate([-body_length*0.8, 0, tail_height/2])\n            rotate([0, 0, 20])\n                scale([1, 0.3, 1])\n                    cylinder(h=tail_length, d1=tail_height*1.2, d2=tail_height*0.3, $fn=3);\n        \n        // Lower lobe\n        translate([-body_length*0.8, 0, -tail_height/2])\n            rotate([0, 0, -20])\n                scale([1, 0.3, 1])\n                    cylinder(h=tail_length, d1=tail_height*1.2, d2=tail_height*0.3, $fn=3);\n    }\n}\n\nmodule dorsal_fin() {\n    // Main dorsal fin\n    translate([-body_length/3, 0, body_height/2 + dorsal_height/3])\n        rotate([90, 0, 0])\n            scale([1, 0.3, 1])\n                cylinder(h=dorsal_length, d1=dorsal_height, d2=dorsal_height/2, $fn=3);\n    \n    // Fin rays\n    for(i = [-1:0.5:1]) {\n        translate([-body_length/3 + i*8, 0, body_height/2 + dorsal_height/2])\n            rotate([90, 0, 0])\n                scale([0.1, 0.1, 1])\n                    cylinder(h=dorsal_length*0.9, d=dorsal_height/8, $fn=4);\n    }\n}\n\nmodule pectoral_fin(side) {\n    // Side fins\n    translate([head_length/2, side * (head_width/2 + 2), -body_height/4])\n        rotate([0, side * 20, side * 30])\n            scale([1, 0.2, 1])\n                cylinder(h=pectoral_length, d1=pectoral_height, d2=pectoral_height/2, $fn=3);\n}\n\nmodule pelvic_fin(side) {\n    // Pelvic fins\n    translate([-body_length/4, side * (body_width/2 + 1), -body_height/2])\n        rotate([0, 0, side * -30])\n            scale([0.8, 0.2, 1])\n                cylinder(h=pectoral_length*0.7, d1=pectoral_height*0.8, d2=pectoral_height*0.4, $fn=3);\n}\n\nmodule anal_fin() {\n    // Anal fin\n    translate([-body_length*0.6, 0, -body_height/2 - dorsal_height/3])\n        rotate([90, 0, 0])\n            scale([1, 0.3, 1])\n                cylinder(h=dorsal_length*0.7, d1=dorsal_height*0.8, d2=dorsal_height/3, $fn=3);\n}\n\nmodule fish_eyes() {\n    // Eyes\n    for(side = [-1, 1]) {\n        translate([head_length/2 - 2, side * eye_offset, head_height/4])\n            sphere(r=eye_radius, $fn=20);\n        \n        // Pupil\n        translate([head_length/2, side * eye_offset, head_height/4])\n            sphere(r=eye_radius*0.5, $fn=15);\n    }\n}\n\nmodule body_scales() {\n    // Simplified scale pattern using small spheres\n    for(row = [1:scale_rows]) {\n        for(col = [1:scale_cols]) {\n            z_pos = -body_height/2 + row * (body_height/(scale_rows+1));\n            x_pos = -col * (body_length/(scale_cols+1));\n            \n            if(x_pos < -head_length && x_pos > -body_length*0.7) {\n                translate([x_pos, 0, z_pos])\n                    sphere(r=scale_size*0.3, $fn=8);\n            }\n        }\n    }\n}\n\nmodule mouth() {\n    // Mouth opening\n    translate([head_length, 0, -head_height/4])\n        rotate([0, 90, 0])\n            cylinder(h=head_length/3, d=head_height/3, $fn=20);\n}\n\n// Assemble the minnow\nunion() {\n    // Main body parts\n    minnow_body();\n    fish_head();\n    \n    // Fins\n    caudal_fin();\n    dorsal_fin();\n    anal_fin();\n    \n    // Side fins\n    pectoral_fin(1);\n    pectoral_fin(-1);\n    pelvic_fin(1);\n    pelvic_fin(-1);\n    \n    // Details\n    fish_eyes();\n    \n    // Hollow out for 3D printing\n    difference() {\n        children();\n        \n        // Internal cavity\n        scale([0.8, 0.7, 0.7])\n            translate([0, 0, 0])\n                cube([body_length*1.2, body_width, body_height*1.2], center=true);\n    }\n}\n\n// Add mouth (cutout)\ndifference() {\n    children();\n    mouth();\n}",
    "renders": true
  },
  {
    "animal": "minkwhale",
    "openscad_code": "// Minke Whale (realistic, medium complexity)\n// Designed for 3D printing - no overhangs >45°\n\n// Overall scale factor\nscaleFactor = 0.3;\n\n// Body parameters\nbodyLength = 80 * scaleFactor;\nbodyHeight = 20 * scaleFactor;\nbodyWidth = 15 * scaleFactor;\n\n// Head parameters\nheadLength = 25 * scaleFactor;\nheadWidth = 18 * scaleFactor;\n\n// Tail parameters\ntailWidth = 25 * scaleFactor;\ntailHeight = 12 * scaleFactor;\n\n// Fin parameters\nfinLength = 15 * scaleFactor;\nfinWidth = 8 * scaleFactor;\n\n// Blowhole parameters\nblowholeRadius = 1.5 * scaleFactor;\n\n// Eye parameters\neyeRadius = 1.2 * scaleFactor;\n\nmodule whaleBody() {\n    // Main body - elongated ellipsoid\n    hull() {\n        translate([-bodyLength/2, 0, 0])\n            scale([1, 0.8, 0.6])\n            sphere(r=bodyWidth/2, $fn=32);\n        \n        translate([bodyLength/2 - 5, 0, 2])\n            scale([0.8, 0.7, 0.5])\n            sphere(r=bodyWidth/2, $fn=32);\n    }\n}\n\nmodule whaleHead() {\n    // Streamlined head with pointed snout\n    hull() {\n        translate([bodyLength/2 - headLength/2, 0, 2])\n            sphere(r=headWidth/2, $fn=32);\n        \n        translate([bodyLength/2 + headLength/2, 0, 0])\n            scale([0.4, 0.3, 0.2])\n            sphere(r=headWidth/2, $fn=32);\n    }\n    \n    // Lower jaw\n    translate([bodyLength/2 + headLength/2 - 5, 0, -bodyHeight/2])\n        rotate([15, 0, 0])\n        scale([1.2, 0.8, 0.4])\n        sphere(r=headWidth/2.5, $fn=32);\n}\n\nmodule whaleTail() {\n    // Tail stock\n    translate([-bodyLength/2 - 5, 0, 0])\n        scale([0.6, 0.4, 0.3])\n        sphere(r=bodyWidth/2, $fn=32);\n    \n    // Tail flukes - two symmetrical parts\n    for(side = [-1, 1]) {\n        // Main fluke\n        translate([-bodyLength/2 - 10, side * tailWidth/3, -2])\n            rotate([0, 0, side * 20])\n            scale([1.5, 0.3, 0.1])\n            sphere(r=tailWidth/2, $fn=32);\n        \n        // Fluke tip\n        translate([-bodyLength/2 - 15, side * tailWidth/2, -3])\n            rotate([0, 0, side * 30])\n            scale([0.8, 0.2, 0.05])\n            sphere(r=tailWidth/3, $fn=32);\n    }\n}\n\nmodule dorsalFin() {\n    // Curved dorsal fin with 45° max overhang\n    translate([-bodyLength/4, 0, bodyHeight/2])\n        rotate([0, 15, 0])\n        linear_extrude(height=finLength, twist=30, $fn=32)\n            scale([0.5, 1, 1])\n            circle(r=finWidth/2, $fn=32);\n}\n\nmodule pectoralFins() {\n    // Pectoral fins on both sides\n    for(side = [-1, 1]) {\n        translate([bodyLength/4, side * bodyWidth/2, -bodyHeight/4])\n            rotate([0, side * 45, 0])\n            scale([1.2, 0.3, 0.1])\n            sphere(r=finWidth, $fn=32);\n        \n        // Fin tip\n        translate([bodyLength/4 + 8, side * (bodyWidth/2 + 5), -bodyHeight/4])\n            rotate([0, side * 30, -10])\n            scale([0.8, 0.2, 0.05])\n            sphere(r=finWidth/1.5, $fn=32);\n    }\n}\n\nmodule blowhole() {\n    // Two small blowholes\n    for(i = [0, 1]) {\n        translate([bodyLength/2 - 5, -blowholeRadius + i * blowholeRadius * 2, bodyHeight/2 - 1])\n            sphere(r=blowholeRadius, $fn=16);\n    }\n}\n\nmodule eyes() {\n    // Eyes on both sides\n    color(\"black\")\n    for(side = [-1, 1]) {\n        translate([bodyLength/2 + headLength/2 - 5, side * headWidth/3, headWidth/4])\n            sphere(r=eyeRadius, $fn=16);\n    }\n}\n\n// Assembly\nunion() {\n    whaleBody();\n    whaleHead();\n    whaleTail();\n    \n    // Ensure no overhangs >45°\n    dorsalFin();\n    pectoralFins();\n    \n    // Surface details\n    blowhole();\n    eyes();\n}",
    "renders": true
  },
  {
    "animal": "mite",
    "openscad_code": "// Realistic Mite Model\n// Medium complexity OpenSCAD design for 3D printing\n\n$fn = 32;\n\n// Main body parameters\nbody_length = 40;\nbody_width = 25;\nbody_height = 15;\n\n// Leg parameters\nleg_length = 35;\nleg_diameter = 2;\nleg_segments = 8;\nnum_legs = 8;\n\n// Head parameters\nhead_radius = 12;\neye_radius = 2.5;\nantenna_length = 8;\nantenna_diameter = 1;\n\n// Mouthparts\nchelicera_length = 6;\nchelicera_diameter = 1.5;\n\nmodule mite_body() {\n    // Main body - egg shaped\n    scale([1, 0.8, 0.6])\n    sphere(d=body_length);\n    \n    // Body segmentation\n    for(i = [1:3]) {\n        translate([0, 0, -body_height/3 + i*body_height/6])\n        scale([1 - i*0.1, 1 - i*0.1, 0.1])\n        sphere(d=body_length - 5);\n    }\n}\n\nmodule leg_segment(length, diameter, angle) {\n    rotate([0, angle, 0])\n    translate([length/2, 0, 0])\n    rotate([90, 0, 0])\n    cylinder(h=length, d=diameter, center=true);\n}\n\nmodule leg(leg_num, side) {\n    angle = leg_num * 45 + 20;\n    base_angle = side * 60 - 30;\n    \n    translate([side * body_width/3, 0, -body_height/4 + leg_num * body_height/10])\n    rotate([0, 0, base_angle]) {\n        // First segment\n        leg_segment(leg_length/3, leg_diameter, 0);\n        \n        // Second segment\n        translate([leg_length/3, 0, 0])\n        rotate([0, 45, 0])\n        leg_segment(leg_length/3, leg_diameter*0.9, 0);\n        \n        // Third segment\n        translate([leg_length/2, 0, 0])\n        rotate([0, -45, 0])\n        leg_segment(leg_length/3, leg_diameter*0.8, 0);\n        \n        // Claw\n        translate([leg_length*0.85, 0, 0])\n        rotate([0, -90, 0])\n        scale([0.5, 0.5, 0.5])\n        sphere(d=leg_diameter*2);\n    }\n}\n\nmodule head() {\n    translate([-body_length/2 - head_radius, 0, 0])\n    rotate([0, 0, 90])\n    sphere(r=head_radius);\n    \n    // Eyes\n    for(i = [-1:1]) {\n        translate([-body_length/2 - head_radius*0.7, i*head_radius*0.4, head_radius*0.7])\n        sphere(r=eye_radius);\n    }\n    \n    // Antennae\n    translate([-body_length/2 - head_radius, head_radius*0.6, head_radius*0.4])\n    rotate([0, -30, 0])\n    cylinder(h=antenna_length, d=antenna_diameter);\n    \n    translate([-body_length/2 - head_radius, -head_radius*0.6, head_radius*0.4])\n    rotate([0, -30, 0])\n    cylinder(h=antenna_length, d=antenna_diameter);\n    \n    // Chelicerae (mouthparts)\n    for(i = [-1:1]) {\n        translate([-body_length/2 - head_radius*1.2, i*head_radius*0.2, -head_radius*0.2])\n        rotate([0, -45, i*20])\n        cylinder(h=chelicera_length, d=chelicera_diameter);\n    }\n}\n\nmodule body_texture() {\n    // Small bumps for texture\n    for(i = [1:20]) {\n        rotate([0, 0, i*18])\n        translate([random(5, body_length/2 - 5), random(-body_width/2 + 5, body_width/2 - 5), random(-body_height/2 + 2, body_height/2 - 2)])\n        sphere(d=1);\n    }\n}\n\n// Main assembly\nunion() {\n    // Body\n    mite_body();\n    \n    // Head\n    head();\n    \n    // Legs\n    for(i = [0:num_legs/2 - 1]) {\n        leg(i, 1);\n        leg(i, -1);\n    }\n    \n    // Body texture\n    body_texture();\n}\n\n// Add small pedestal for printing\ntranslate([0, 0, -body_height])\ncylinder(h=2, r=body_length/2 + 10, center=false);",
    "renders": true
  },
  {
    "animal": "mockingbird",
    "openscad_code": "// Mockingbird - Realistic style, medium complexity\n// Designed for 3D printing (~75mm wingspan)\n\n// Parameters for easy scaling\nbody_length = 35;\nbody_height = 20;\nwingspan = 75;\ntail_length = 25;\nhead_size = 15;\nbeak_length = 8;\n\n// Main module\nmodule mockingbird() {\n    union() {\n        // Body\n        body();\n        \n        // Head\n        translate([body_length/2 - 5, 0, body_height/2 - 2])\n            head();\n        \n        // Wings\n        translate([-body_length/4, 0, body_height/2])\n            wing(true);\n        translate([-body_length/4, 0, body_height/2])\n            mirror([0,1,0])\n            wing(false);\n        \n        // Tail\n        translate([-body_length/2 - tail_length/2, 0, body_height/4])\n            tail();\n        \n        // Legs\n        translate([body_length/4, body_height/2 - 3, -body_height/2])\n            rotate([0,90,0])\n            leg();\n        translate([body_length/4, -body_height/2 + 3, -body_height/2])\n            rotate([0,90,0])\n            leg();\n    }\n}\n\n// Body module - oval shaped\nmodule body() {\n    difference() {\n        // Main body\n        scale([1.5, 1, 1])\n        sphere(d=body_height);\n        \n        // Flatten bottom\n        translate([-body_length, -body_height, -body_height/2 - 1])\n            cube([body_length*2, body_height*2, body_height]);\n    }\n}\n\n// Head module with beak and eyes\nmodule head() {\n    union() {\n        // Head sphere\n        sphere(d=head_size);\n        \n        // Beak\n        translate([head_size/2, 0, 0])\n        rotate([0,-30,0])\n        scale([1, 0.7, 0.7])\n        cylinder(h=beak_length, d1=head_size/3, d2=0);\n        \n        // Eyes\n        translate([head_size/4, head_size/3, head_size/4])\n        sphere(d=head_size/6);\n        translate([head_size/4, -head_size/3, head_size/4])\n        sphere(d=head_size/6);\n    }\n}\n\n// Wing module with feather details\nmodule wing(left=true) {\n    difference() {\n        // Main wing shape\n        union() {\n            // Upper wing\n            translate([0, 0, 0])\n                scale([1.5, 0.3, 1])\n                sphere(d=wingspan/2);\n            \n            // Lower wing section\n            translate([-wingspan/6, 0, -wingspan/8])\n                scale([1.2, 0.25, 0.8])\n                sphere(d=wingspan/3);\n        }\n        \n        // Cut wing shape\n        for(i=[0:3]) {\n            rotate([0, 0, i*15 - 30])\n            translate([i*5, 0, -wingspan/4])\n                cube([15, wingspan/2, wingspan/2], center=true);\n        }\n    }\n}\n\n// Tail module with feather separation\nmodule tail() {\n    difference() {\n        // Main tail\n        scale([1.5, 0.3, 1])\n        sphere(d=tail_length);\n        \n        // Feather separation cuts\n        for(i=[-1:1]) {\n            translate([0, i*tail_length/4, 0])\n            rotate([0, i*10, 0])\n            cube([tail_length*2, 1, tail_length*2], center=true);\n        }\n    }\n}\n\n// Leg module with toes\nmodule leg() {\n    union() {\n        // Main leg\n        cylinder(h=8, d=3);\n        \n        // Foot\n        translate([0, 0, -4])\n            sphere(d=4);\n        \n        // Toes (3 forward, 1 back)\n        for(i=[-1:1]) {\n            translate([i*2, 0, -6])\n            rotate([i*20, 0, 0])\n            cylinder(h=4, d=1);\n        }\n        translate([0, -2, -6])\n        rotate([-20, 0, 0])\n        cylinder(h=3, d=1);\n    }\n}\n\n// Render the bird\nmockingbird();",
    "renders": true
  },
  {
    "animal": "mole",
    "openscad_code": "// Realistic Mole - Medium Complexity\n// Dimensions ~70mm long, 3D printable\n\n$fn = 32;\n\nmodule mole_body() {\n    // Main torso - elongated sphere\n    scale([1.2, 0.8, 0.7]) sphere(d=35);\n}\n\nmodule mole_head() {\n    // Head - slightly flattened sphere\n    translate([0, 25, 2]) scale([1, 0.9, 0.7]) sphere(d=28);\n}\n\nmodule mole_snout() {\n    // Snout - tapered cylinder with rounded tip\n    translate([0, 35, -2]) rotate([90, 0, 0]) \n    cylinder(h=12, d1=10, d2=6, center=true);\n    \n    // Rounded snout tip\n    translate([0, 41, -2]) sphere(d=6);\n}\n\nmodule mole_nose() {\n    // Pink fleshy nose - small sphere\n    translate([0, 43, -2]) color(\"pink\") sphere(d=4);\n}\n\nmodule mole_eye() {\n    // Small eye - tiny sphere\n    sphere(d=2.5);\n}\n\nmodule mole_eyes() {\n    // Eyes positioned close to snout\n    translate([-7, 30, 4]) mole_eye();\n    translate([7, 30, 4]) mole_eye();\n}\n\nmodule mole_ear() {\n    // Small ear - flattened sphere\n    scale([1.2, 0.5, 0.8]) sphere(d=6);\n}\n\nmodule mole_ears() {\n    // Ears barely visible under fur\n    translate([-10, 20, 10]) rotate([0, 15, 0]) mole_ear();\n    translate([10, 20, 10]) rotate([0, -15, 0]) mole_ear();\n}\n\nmodule mole_foreleg() {\n    // Front digging leg - curved shape\n    translate([0, 0, -15]) rotate([0, 15, 0]) \n    scale([0.8, 1, 1.2]) sphere(d=12);\n    \n    // Paw with claws\n    translate([0, 5, -20]) scale([1.2, 0.7, 0.5]) sphere(d=8);\n}\n\nmodule mole_forelegs() {\n    // Positioned forward for digging\n    translate([-12, 15, -8]) rotate([0, 0, -20]) mole_foreleg();\n    translate([12, 15, -8]) rotate([0, 0, 20]) mole_foreleg();\n}\n\nmodule mole_hindleg() {\n    // Hind leg - smaller than forelegs\n    translate([0, 0, -12]) scale([0.7, 0.9, 1]) sphere(d=10);\n}\n\nmodule mole_hindlegs() {\n    // Positioned back for pushing\n    translate([-10, -15, -5]) rotate([0, 0, -15]) mole_hindleg();\n    translate([10, -15, -5]) rotate([0, 0, 15]) mole_hindleg();\n}\n\nmodule mole_tail() {\n    // Short stubby tail\n    translate([0, -25, -3]) rotate([0, 10, 0]) \n    scale([0.6, 1, 1]) sphere(d=8);\n}\n\nmodule mole_fur_texture() {\n    // Add fur texture with small bumps\n    for(i = [0:5:360]) {\n        rotate([0, 0, i]) \n        translate([random(8,12), random(8,12), random(-2,2)]) \n        sphere(d=1.5);\n    }\n}\n\nmodule mole_whisker() {\n    // Thin whiskers\n    rotate([90, 0, 0]) cylinder(h=15, d=0.5, center=true);\n}\n\nmodule mole_whiskers() {\n    // Whiskers on each side of snout\n    for(a = [0:20:40]) {\n        translate([-8, 41, 0]) rotate([0, 0, a]) mole_whisker();\n        translate([8, 41, 0]) rotate([0, 0, -a]) mole_whisker();\n    }\n}\n\n// Main assembly\nunion() {\n    // Body parts\n    mole_body();\n    mole_head();\n    mole_snout();\n    mole_nose();\n    \n    // Limbs\n    mole_forelegs();\n    mole_hindlegs();\n    mole_tail();\n    \n    // Details\n    mole_eyes();\n    mole_ears();\n    mole_whiskers();\n    \n    // Fur texture on back\n    translate([0, 0, 10]) mole_fur_texture();\n}",
    "renders": true
  },
  {
    "animal": "mollusk",
    "openscad_code": "// Realistic Mollusk - Medium Complexity\n// A 3D printable clam-like bivalve mollusk with shell ridges and foot\n\n$fn = 32; // Smooth curves\n\nmodule shell_half(height=25, length=40, width=30, thickness=2) {\n    // Main shell body - elliptical dome\n    difference() {\n        scale([1, 0.8, 1])\n            sphere(d=length);\n        \n        // Hollow out the shell\n        translate([0, 0, thickness])\n            scale([0.8, 0.6, 0.9])\n                sphere(d=length * 0.9);\n    }\n    \n    // Growth rings on shell exterior\n    for (i = [1:4]) {\n        rotate([90, 0, 0])\n            translate([0, 0, -height + i * 5])\n                scale([1 + i * 0.1, 1 + i * 0.1, 0.5])\n                    cylinder(h=1, d=length - i * 3);\n    }\n    \n    // Hinge teeth along straight edge\n    for (i = [-1:0.5:1]) {\n        translate([i * 15, -width/2 + 2, 0])\n            cube([2, 4, 3]);\n    }\n}\n\nmodule mollusk_body(length=35, width=25, height=15) {\n    // Main body/mantle - soft tissue\n    color(\"lightsalmon\")\n    difference() {\n        // Elliptical body\n        scale([1.2, 1, 0.6])\n            sphere(d=length);\n        \n        // Indent for shell cavity\n        translate([0, 0, -5])\n            scale([0.9, 0.8, 0.5])\n                sphere(d=length);\n    }\n    \n    // Muscular foot extension\n    translate([0, -width/2, -height])\n        scale([0.3, 1, 0.5])\n            sphere(d=width * 1.5);\n    \n    // Siphon tubes at posterior\n    translate([length/3, 0, -height/2])\n        rotate([0, -30, 0])\n            cylinder(h=8, d1=4, d2=2);\n    translate([-length/3, 0, -height/2])\n        rotate([0, 30, 0])\n            cylinder(h=8, d1=4, d2=2);\n}\n\nmodule complete_mollusk() {\n    // Bottom shell half\n    translate([0, 0, 0])\n        shell_half();\n    \n    // Top shell half - slightly open\n    translate([0, 0, 3])\n        rotate([15, 0, 0])\n            shell_half();\n    \n    // Mollusk body between shells\n    translate([0, 0, 2])\n        mollusk_body();\n}\n\n// Generate the complete mollusk\ncomplete_mollusk();",
    "renders": true
  },
  {
    "animal": "mongoose",
    "openscad_code": "// Realistic Mongoose - Medium Complexity\n// Designed for 3D printing with proper wall thickness\n\n$fn = 24; // Resolution for curved surfaces\n\nmodule mongoose() {\n    // Main body\n    union() {\n        // Torso - elongated oval\n        translate([0, 0, 10]) \n            scale([1.2, 0.8, 0.6])\n            sphere(r=15);\n        \n        // Belly\n        translate([0, 0, 5])\n            scale([1.1, 0.7, 0.3])\n            sphere(r=15);\n    }\n    \n    // Head\n    translate([-20, 0, 20]) \n        rotate([0, -10, 0])\n        union() {\n            // Main head shape\n            scale([1.3, 1, 1])\n            sphere(r=10);\n            \n            // Snout\n            translate([-8, 0, -2])\n                scale([1.5, 0.7, 0.7])\n                sphere(r=6);\n        }\n    \n    // Ears\n    for(side = [-1, 1]) {\n        translate([-25, side*8, 25])\n            rotate([0, side*20, 0])\n            scale([0.3, 0.5, 1])\n            cylinder(h=8, r1=5, r2=2);\n    }\n    \n    // Eyes\n    for(side = [-1, 1]) {\n        translate([-25, side*5, 20])\n            color(\"black\")\n            sphere(r=2);\n    }\n    \n    // Nose\n    translate([-32, 0, 18])\n        color(\"black\")\n        rotate([90, 0, 0])\n        cylinder(h=3, r1=2, r2=0);\n    \n    // Tail\n    hull() {\n        translate([18, 0, 15])\n            sphere(r=5);\n        translate([35, 0, 20])\n            scale([0.5, 0.5, 1])\n            sphere(r=5);\n    }\n    \n    // Legs\n    for(x = [-8, 8]) {\n        for(side = [-1, 1]) {\n            translate([x, side*10, 0])\n                rotate([10, side*5, 0])\n                union() {\n                    // Upper leg\n                    cylinder(h=12, r=4);\n                    \n                    // Paw\n                    translate([0, 0, 12])\n                        sphere(r=4);\n                }\n        }\n    }\n    \n    // Front legs\n    for(side = [-1, 1]) {\n        translate([-15, side*10, 5])\n            rotate([10, side*10, 0])\n            union() {\n                cylinder(h=10, r=3.5);\n                translate([0, 0, 10])\n                    sphere(r=3.5);\n            }\n    }\n    \n    // Stripes on back\n    for(i = [-10:5:15]) {\n        translate([i, 0, 20])\n            scale([1, 0.8, 0.1])\n            rotate([0, 90, 0])\n            cylinder(h=0.5, r=8);\n    }\n}\n\n// Main assembly\nmongoose();",
    "renders": true
  },
  {
    "animal": "monkey",
    "openscad_code": "// Realistic monkey - medium complexity\n// Approximate dimensions: 60mm tall, 40mm wide, 50mm deep\n\n// Global parameters\n$fn = 32;\n\n// Main monkey module\nmodule monkey() {\n    union() {\n        // Head\n        translate([0, 0, 45])\n            head();\n        \n        // Body\n        translate([0, 0, 25])\n            body();\n        \n        // Arms\n        translate([-15, 0, 35])\n            arm(true);\n        translate([15, 0, 35])\n            arm(false);\n        \n        // Legs\n        translate([-8, 0, 15])\n            leg(true);\n        translate([8, 0, 15])\n            leg(false);\n        \n        // Tail\n        translate([0, -20, 18])\n            tail();\n    }\n}\n\n// Head module\nmodule head() {\n    union() {\n        // Skull\n        sphere(12);\n        \n        // Muzzle\n        translate([0, 10, -2])\n            scale([1.2, 1, 0.8])\n            sphere(6);\n        \n        // Ears\n        translate([-10, 0, 2])\n            rotate([0, 15, 0])\n            scale([0.7, 0.3, 1])\n            sphere(5);\n        translate([10, 0, 2])\n            rotate([0, -15, 0])\n            scale([0.7, 0.3, 1])\n            sphere(5);\n        \n        // Eyes\n        translate([-4, 8, 3])\n            sphere(1.5);\n        translate([4, 8, 3])\n            sphere(1.5);\n        \n        // Nose\n        translate([0, 12, 0])\n            scale([1, 0.5, 0.5])\n            sphere(2);\n    }\n}\n\n// Body module\nmodule body() {\n    union() {\n        // Torso\n        scale([1.2, 0.8, 1.5])\n        sphere(10);\n        \n        // Chest\n        translate([0, 2, 2])\n        scale([0.8, 0.6, 1])\n        sphere(8);\n    }\n}\n\n// Arm module\nmodule arm(is_left) {\n    mirror([is_left ? 1 : 0, 0, 0]) {\n        // Upper arm\n        rotate([0, 0, -30])\n        cylinder(h=12, r1=4, r2=3);\n        \n        // Lower arm\n        translate([0, 0, 12])\n        rotate([0, 0, -45])\n        cylinder(h=10, r1=3, r2=2.5);\n        \n        // Hand\n        translate([0, 0, 22])\n        scale([1, 0.7, 0.5])\n        sphere(3);\n    }\n}\n\n// Leg module\nmodule leg(is_left) {\n    mirror([is_left ? 1 : 0, 0, 0]) {\n        // Upper leg\n        rotate([0, 0, 30])\n        cylinder(h=15, r1=4, r2=3);\n        \n        // Lower leg\n        translate([0, 0, 15])\n        rotate([0, 0, 20])\n        cylinder(h=12, r1=3, r2=2);\n        \n        // Foot\n        translate([0, 3, 27])\n        rotate([0, -90, 0])\n        scale([1.5, 0.5, 1])\n        cylinder(h=8, r1=2, r2=2);\n    }\n}\n\n// Tail module\nmodule tail() {\n    // Create curved tail using hull of spheres\n    union() {\n        translate([0, 0, 0])\n            sphere(3);\n        translate([0, -5, -1])\n            sphere(2.5);\n        translate([0, -10, -3])\n            sphere(2);\n        translate([0, -15, -6])\n            sphere(1.5);\n        translate([0, -20, -10])\n            sphere(1);\n    }\n}\n\n// Generate the monkey\nmonkey();",
    "renders": true
  },
  {
    "animal": "moorhen",
    "openscad_code": "// Moorhen (Gallinula chloropus) – medium complexity, printable\n// Overall length ~90 mm, height ~45 mm\n// Thick walls (≥2 mm), no unsupported overhangs\n\n$fa = 2; $fs = 1;\n\nmodule body_shell() {\n    // Main torso – two fused ellipsoids\n    translate([0,0,18])\n        scale([1, 0.6, 0.7])\n        sphere(r = 20);            // chest & back\n\n    translate([-22,0,8])\n        scale([0.9, 0.5, 0.5])\n        sphere(r = 18);            // abdomen\n}\n\nmodule tail() {\n    // Slightly raised tail feathers\n    translate([-42,0,12])\n        rotate([0,25,0])\n        scale([1.2, 0.3, 0.4])\n        sphere(r = 12);\n}\n\nmodule neck() {\n    // S-curved neck\n    translate([18,0,18])\n        rotate([0,-30,0])\n        scale([0.7, 0.5, 0.5])\n        cylinder(h = 22, r1 = 7, r2 = 5);\n}\n\nmodule head() {\n    // Head with red frontal shield\n    translate([34,0,25])\n        scale([0.9, 0.6, 0.7])\n        sphere(r = 9);\n\n    // Red shield\n    color(\"red\")\n    translate([40,0,30])\n        scale([0.4, 0.25, 0.4])\n        sphere(r = 8);\n}\n\nmodule beak() {\n    // Yellow-tipped beak (cone)\n    color(\"yellow\")\n    translate([43,0,25])\n        rotate([0,-15,0])\n        cylinder(h = 12, r1 = 3, r2 = 0);\n}\n\nmodule eye() {\n    // Simple black sphere\n    color(\"black\")\n    translate([37, 5, 30])\n        sphere(r = 2);\n}\n\nmodule wing() {\n    // Folded wing on side, no unsupported angles\n    translate([0,-8,22])\n        rotate([0,0,-20])\n        scale([1.4, 0.25, 0.6])\n        sphere(r = 15);\n}\n\nmodule leg(side) {        // side = 1 or -1\n    // Thigh\n    translate([8, side*10, 8])\n        rotate([0,15,0])\n        cylinder(h = 10, r = 2.5);\n\n    // Shank\n    translate([15, side*12, 6.5])\n        rotate([0,15,0])\n        cylinder(h = 14, r = 2);\n\n    // Foot – three forward toes joined by web\n    // central toe\n    translate([27, side*12, 2])\n        rotate([90,0,0])\n        cylinder(h = 12, r = 1.5);\n\n    color(\"darkslategray\")\n    // web\n    translate([30, side*12, 1])\n        rotate([90,0,0])\n        scale([1, 0.3, 0.2])\n        cylinder(h = 8, r = 4);\n\n    // outer toes (mirrored)\n    for(a = [-30, 30]) {\n        rotate([0,0, a])\n        translate([27, side*12, 2])\n            rotate([90,0,0])\n            cylinder(h = 10, r = 1.2);\n    }\n}\n\n// Main assembly\nunion() {\n    body_shell();\n    tail();\n    neck();\n    head();\n    beak();\n    mirror([0,1,0]) eye();  // two eyes\n    wing();\n    mirror([0,1,0]) wing();\n\n    for(s = [-1,1]) leg(s);\n}",
    "renders": true
  },
  {
    "animal": "moose",
    "openscad_code": "// Realistic medium-complexity 3D printable moose\n// Approx 80 mm long, 60 mm tall, 25 mm wide\n// All parts unioned so it is manifold and printable\n\n// Body\nmodule body() {\n    // Main torso\n    translate([0,0,30]) scale([1.5,0.7,1]) sphere(d=40,$fn=48);\n    \n    // Belly bulge\n    translate([0,0,18]) scale([1.4,0.6,0.6]) sphere(d=35,$fn=32);\n}\n\n// Head\nmodule head() {\n    // Skull\n    translate([-35,0,48]) rotate([0,-10,0]) scale([1.2,0.8,0.9]) sphere(d=25,$fn=32);\n    \n    // Muzzle\n    translate([-48,0,42]) rotate([0,-15,0]) scale([1.5,0.7,0.7]) sphere(d=15,$fn=24);\n    \n    // Nostrils\n    for(x=[-50,-46]) {\n        translate([x,-4,40]) rotate([0,-15,0]) scale([1,0.5,0.5]) cylinder(h=3,d1=4,d2=0,$fn=8);\n        translate([x,4,40]) rotate([0,-15,0]) scale([1,0.5,0.5]) cylinder(h=3,d1=4,d2=0,$fn=8);\n    }\n    \n    // Eyes\n    translate([-38,-8,50]) sphere(d=3,$fn=12);\n    translate([-38,8,50]) sphere(d=3,$fn=12);\n}\n\n// Ears\nmodule ear(side) {\n    translate([-30,side*12,55]) rotate([0,0,side*20]) \n        scale([0.3,1,0.8]) rotate([30,0,0]) cylinder(h=12,d1=8,d2=4,$fn=16);\n}\n\n// Antler branch\nmodule antler_branch(len,angle) {\n    rotate([0,0,angle]) rotate([25,0,0]) cylinder(h=len,d1=3,d2=2,$fn=8);\n    if(len>6) {\n        translate([0,0,len*0.7]) antler_branch(len*0.7,25);\n        translate([0,0,len*0.7]) antler_branch(len*0.7,-25);\n    }\n}\n\n// Antler\nmodule antler(side) {\n    translate([-35,side*10,60]) rotate([0,0,side*15]) {\n        // Main beam\n        cylinder(h=25,d1=4,d2=3,$fn=12);\n        translate([0,0,20]) rotate([30,0,0]) antler_branch(15,0);\n        translate([0,0,15]) rotate([20,0,0]) antler_branch(12,30);\n        translate([0,0,10]) rotate([15,0,0]) antler_branch(10,-30);\n    }\n}\n\n// Leg\nmodule leg(pos,angle) {\n    translate(pos) rotate([angle,0,0]) {\n        // Upper leg\n        cylinder(h=25,d1=7,d2=5,$fn=16);\n        translate([0,0,22]) rotate([15,0,0]) {\n            // Lower leg\n            cylinder(h=20,d1=5,d2=4,$fn=16);\n            translate([0,0,18]) rotate([10,0,0]) {\n                // Hoof\n                scale([0.8,0.6,0.4]) cylinder(h=8,d1=6,d2=7,$fn=16);\n            }\n        }\n    }\n}\n\n// Tail\nmodule tail() {\n    translate([20,0,35]) rotate([0,10,0]) scale([0.5,0.5,1.2]) sphere(d=8,$fn=16);\n}\n\n// Assemble moose\nunion() {\n    body();\n    head();\n    ear(-1);\n    ear(1);\n    antler(-1);\n    antler(1);\n    tail();\n    \n    // Front legs\n    leg([-20,-12,25],-20);\n    leg([-20,12,25],-20);\n    \n    // Rear legs\n    leg([20,-10,25],20);\n    leg([20,10,25],20);\n}",
    "renders": true
  },
  {
    "animal": "moray",
    "openscad_code": "// Moray eel model - medium complexity realistic style\n// Designed for 3D printing with proper wall thickness and minimal overhangs\n\nmodule moray_body() {\n    // Main body segments with slight tapering\n    for(i = [0:10]) {\n        translate([0, 0, i*3])\n            scale([1 - i*0.06, 1 - i*0.06, 0.8])\n            sphere(d=12 - i*0.5, $fn=16);\n    }\n    \n    // Ventral ridge\n    for(i = [0:10]) {\n        translate([0, -6 + i*0.3, i*3])\n            rotate([90, 0, 0])\n            cylinder(h=2, d1=4 - i*0.2, d2=3 - i*0.2, $fn=8);\n    }\n}\n\nmodule moray_head() {\n    // Head base\n    translate([0, 0, 33])\n    rotate([0, 0, 0])\n    scale([1.2, 1, 1])\n    sphere(d=12, $fn=16);\n    \n    // Snout\n    translate([0, 0, 39])\n    rotate([0, 0, 0])\n    scale([0.8, 0.6, 1.5])\n    sphere(d=8, $fn=16);\n    \n    // Nostrils\n    translate([2.5, 2, 37])\n    rotate([0, 0, 0])\n    cylinder(h=1.5, d=1.5, $fn=8);\n    translate([-2.5, 2, 37])\n    rotate([0, 0, 0])\n    cylinder(h=1.5, d=1.5, $fn=8);\n    \n    // Eyes\n    translate([4, 2, 35])\n    rotate([0, 0, 0])\n    difference() {\n        sphere(d=3, $fn=12);\n        translate([0, 0, 1.5])\n        sphere(d=2.5, $fn=12);\n    }\n    translate([-4, 2, 35])\n    rotate([0, 0, 0])\n    difference() {\n        sphere(d=3, $fn=12);\n        translate([0, 0, 1.5])\n        sphere(d=2.5, $fn=12);\n    }\n}\n\nmodule moray_jaw() {\n    // Upper jaw\n    translate([0, -1, 36])\n    rotate([30, 0, 0])\n    scale([0.8, 0.4, 1.2])\n    sphere(d=10, $fn=16);\n    \n    // Lower jaw\n    translate([0, -3, 34])\n    rotate([-40, 0, 0])\n    scale([0.8, 0.4, 1])\n    sphere(d=9, $fn=16);\n    \n    // Teeth row\n    for(i = [-3:3]) {\n        translate([i*1.5, -2, 37.5])\n        rotate([0, 0, 0])\n        cylinder(h=2, d1=0.8, d2=0.3, $fn=6);\n    }\n}\n\nmodule moray_dorsal_fin() {\n    // Dorsal fin segments along back\n    for(i = [1:8]) {\n        translate([0, 5 - i*0.2, 5 + i*3])\n        rotate([0, 0, 0])\n        scale([1, 0.3, 1])\n        cylinder(h=5 - i*0.3, d1=4 - i*0.2, d2=2 - i*0.2, $fn=6);\n    }\n}\n\nmodule moray_tail() {\n    // Tail taper\n    for(i = [0:5]) {\n        translate([0, 0, 33 + i*3])\n        scale([1 - i*0.15, 1 - i*0.15, 0.8])\n        sphere(d=8 - i*1.2, $fn=12);\n    }\n    \n    // Tail fin\n    translate([0, 0, 48])\n    rotate([0, 0, 0])\n    scale([0.3, 1, 1.5])\n    sphere(d=6, $fn=12);\n}\n\n// Main assembly\nunion() {\n    moray_body();\n    moray_head();\n    moray_jaw();\n    moray_dorsal_fin();\n    moray_tail();\n}",
    "renders": true
  },
  {
    "animal": "mosquito",
    "openscad_code": "// Realistic 3D Printable Mosquito\n// Overall length ~70 mm\n\n$fa = 2;\n$fs = 0.5;\n\n// Main module\nmodule mosquito() {\n    // Body orientation: head at +X, tail at -X\n    color(\"darkslategray\")\n    union() {\n        head();\n        thorax();\n        abdomen();\n        wings();\n        legs();\n        proboscis();\n    }\n}\n\nmodule head() {\n    translate([28,0,0])\n    rotate([0,-15,0])  // Slight downward tilt\n    difference() {\n        sphere(d=6);  // Main head sphere\n        \n        // Eyes (compound) - indentations\n        translate([0,2.8,1.2])\n        sphere(d=3.5);\n        translate([0,-2.8,1.2])\n        sphere(d=3.5);\n    }\n}\n\nmodule thorax() {\n    translate([15,0,2])\n    scale([1.6,1,1.2])\n    sphere(d=8);\n}\n\nmodule abdomen() {\n    // Segmented abdomen\n    for(i=[0:5]) {\n        translate([10-i*3.5, 0, 1-i*0.3])\n        scale([1-i*0.08, 1-i*0.08, 0.8-i*0.05])\n        sphere(d=7-i);\n    }\n}\n\nmodule proboscis() {\n    // Main feeding tube\n    translate([31,0,0])\n    rotate([0,-30,0])\n    cylinder(h=15, d1=1.5, d2=0.5, $fn=8);\n    \n    // Labium sheath\n    translate([31,0,-0.8])\n    rotate([0,-30,0])\n    cylinder(h=14, d1=2, d2=1, $fn=8);\n}\n\nmodule wings() {\n    // Left wing\n    translate([15,4,5])\n    rotate([0,10,-15])\n    scale([1,2.5,0.3])\n    wing_shape();\n    \n    // Right wing\n    mirror([0,1,0])\n    translate([15,4,5])\n    rotate([0,10,15])\n    scale([1,2.5,0.3])\n    wing_shape();\n}\n\nmodule wing_shape() {\n    difference() {\n        union() {\n            // Main wing blade\n            hull() {\n                translate([0,0,0])\n                sphere(d=1);\n                translate([5,12,0])\n                sphere(d=0.5);\n                translate([-2,18,0])\n                sphere(d=0.3);\n            }\n            \n            // Wing base\n            sphere(d=2);\n        }\n        \n        // Wing veins (negative space)\n        for(i=[1:3]) {\n            translate([0,i*4,0])\n            rotate([0,0,i*5])\n            scale([1,0.1,0.2])\n            cube([6,1,1]);\n        }\n    }\n}\n\nmodule legs() {\n    // Front legs\n    for(side=[-1,1]) {\n        // Front pair\n        translate([20,side*2.5,1])\n        rotate([15,0,side*30])\n        leg_segment(8);\n        \n        // Middle pair\n        translate([15,side*3,0])\n        rotate([0,0,side*45])\n        leg_segment(10);\n        \n        // Hind pair\n        translate([10,side*2.5,-1])\n        rotate([-15,0,side*60])\n        leg_segment(12);\n    }\n}\n\nmodule leg_segment(length) {\n    // Upper segment\n    cylinder(h=length*0.4, d=0.8, $fn=6);\n    translate([0,0,length*0.4])\n    rotate([30,0,0])\n    cylinder(h=length*0.35, d=0.7, $fn=6);\n    \n    // Lower segment\n    translate([0,0,length*0.4])\n    translate([0,0,length*0.35])\n    rotate([45,0,0])\n    cylinder(h=length*0.25, d=0.5, $fn=6);\n    \n    // Foot\n    translate([0,0,length*0.4])\n    translate([0,0,length*0.35])\n    translate([0,0,length*0.25])\n    rotate([60,0,0])\n    cylinder(h=1, d=0.4, $fn=6);\n}\n\n// Generate the mosquito\nmosquito();",
    "renders": true
  },
  {
    "animal": "moth",
    "openscad_code": "// Realistic 3D-Printable Moth – medium complexity\n// Approx. 70 mm wingspan, 35 mm body length\n// No overhangs > 45°, 1.2 mm walls everywhere\n\n$fn = 36;               // smooth curves\n\nmodule wing() {\n    // single forewing, left side\n    translate([0, -35, 0])\n    rotate([0, 0, 15])\n    union() {\n        // main wing membrane (1.2 mm thick)\n        linear_extrude(1.2)\n        polygon(points=[\n            [0,0], [20,5], [35,20], [40,35],\n            [38,50], [30,60], [15,62], [0,58],\n            [-5,40], [-2,20]\n        ]);\n\n        // reinforcing veins (raised ridges)\n        for (i = [0:6]) {\n            translate([0, 0, 1.2])\n            rotate([0, 0, 15 + 10*i])\n            scale([0.4, 0.2, 1])\n            cylinder(h = 0.8, d1 = 25, d2 = 0);\n        }\n    }\n}\n\nmodule body() {\n    // thorax\n    translate([0, 0, 10])\n    scale([1, 0.7, 1.2])\n    sphere(d = 8);\n\n    // abdomen\n    translate([0, 0, 3])\n    scale([1, 0.6, 1])\n    cylinder(h = 18, d1 = 6, d2 = 4);\n\n    // head\n    translate([0, 0, 19])\n    sphere(d = 5);\n\n    // compound eyes (tiny spheres)\n    translate([2, 2.5, 19]) sphere(d = 1.5);\n    translate([-2, 2.5, 19]) sphere(d = 1.5);\n\n    // antennae (thin cylinders)\n    translate([1, 3, 19.5])\n    rotate([0, 110, 30])\n    cylinder(h = 12, d = 0.8);\n    translate([-1, 3, 19.5])\n    rotate([0, 110, -30])\n    cylinder(h = 12, d = 0.8);\n}\n\nmodule legs() {\n    // three left legs\n    for (a = [40:20:80]) {\n        translate([0, 0, 10])\n        rotate([a, 0, -30])\n        translate([4, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h = 12, d = 1.2);\n    }\n}\n\n// final assembly\nunion() {\n    body();\n    legs();\n    mirror([1, 0, 0]) legs();  // right legs\n\n    // left wing pair\n    wing();\n    // right wing pair\n    mirror([1, 0, 0]) wing();\n}",
    "renders": true
  },
  {
    "animal": "mouse",
    "openscad_code": "// Realistic 3D printable computer mouse\n// Medium complexity (~110 lines)\n\n// Main body parameters\nmouse_length = 95;\nmouse_width = 55;\nmouse_height = 35;\n\n// Button parameters\nbutton_depth = 15;\nbutton_gap = 2;\nscroll_wheel_radius = 4;\nscroll_wheel_height = 10;\n\n// Cable parameters\ncable_length = 40;\ncable_radius = 3;\n\n// Wall thickness for 3D printing\nwall = 2;\n\nmodule mouse_body() {\n    // Main ergonomic shell\n    difference() {\n        // Outer shell - rounded top\n        hull() {\n            translate([0, 0, mouse_height/2])\n                scale([1, 0.8, 0.6])\n                    sphere(d=mouse_width);\n            translate([mouse_length/3, 0, mouse_height/2])\n                scale([1.2, 1, 0.7])\n                    sphere(d=mouse_width*1.1);\n        }\n        \n        // Hollow interior\n        translate([0, 0, -mouse_height/2])\n            cube([mouse_length-wall*2, mouse_width-wall*2, mouse_height+10], center=true);\n        \n        // Button cutouts\n        translate([mouse_length/2-button_depth/2, 0, mouse_height/2])\n            cube([button_depth+1, mouse_width/2, mouse_height], center=true);\n    }\n}\n\nmodule mouse_buttons() {\n    // Left button\n    translate([mouse_length/2-button_depth/2, -mouse_width/4, mouse_height/2-button_gap])\n        difference() {\n            cube([button_depth, mouse_width/2.5, mouse_height/4], center=true);\n            translate([0, 0, -mouse_height/8])\n                cube([button_depth+1, mouse_width/2.5+1, mouse_height/8], center=true);\n        }\n    \n    // Right button\n    translate([mouse_length/2-button_depth/2, mouse_width/4, mouse_height/2-button_gap])\n        difference() {\n            cube([button_depth, mouse_width/2.5, mouse_height/4], center=true);\n            translate([0, 0, -mouse_height/8])\n                cube([button_depth+1, mouse_width/2.5+1, mouse_height/8], center=true);\n        }\n}\n\nmodule scroll_wheel() {\n    // Scroll wheel between buttons\n    rotate([90, 0, 0])\n        translate([mouse_length/2-button_depth/2, 0, mouse_height/2+2])\n            difference() {\n                cylinder(h=scroll_wheel_height, r=scroll_wheel_radius, center=true);\n                // Grip texture\n                for(i=[0:30:359])\n                    rotate([0, 0, i])\n                        translate([scroll_wheel_radius*0.9, 0, 0])\n                            cube([scroll_wheel_radius*0.4, scroll_wheel_height*1.1, 0.5], center=true);\n            }\n}\n\nmodule mouse_feet() {\n    // PTFE feet for smooth gliding\n    foot_length = 10;\n    foot_width = 6;\n    foot_height = 0.5;\n    \n    // Front foot\n    translate([mouse_length/4, 0, -mouse_height/2+foot_height/2])\n        cube([foot_length, foot_width, foot_height], center=true);\n    \n    // Rear feet\n    translate([-mouse_length/3, -mouse_width/3, -mouse_height/2+foot_height/2])\n        cube([foot_length*0.8, foot_width*0.8, foot_height], center=true);\n    translate([-mouse_length/3, mouse_width/3, -mouse_height/2+foot_height/2])\n        cube([foot_length*0.8, foot_width*0.8, foot_height], center=true);\n}\n\nmodule usb_cable() {\n    // Flexible cable exiting rear\n    translate([-mouse_length/2, 0, -mouse_height/4])\n        rotate([0, -20, 0])\n            hull() {\n                sphere(r=cable_radius);\n                translate([-cable_length, 0, 0])\n                    sphere(r=cable_radius*0.8);\n            }\n}\n\nmodule sensor_window() {\n    // Optical sensor window on bottom\n    translate([0, 0, -mouse_height/2+0.1])\n        cylinder(h=0.5, r=5);\n}\n\n// Assemble the mouse\nunion() {\n    mouse_body();\n    mouse_buttons();\n    scroll_wheel();\n    mouse_feet();\n    usb_cable();\n    sensor_window();\n}",
    "renders": true
  },
  {
    "animal": "mudpuppy",
    "openscad_code": "// Mudpuppy - Realistic Style, Medium Complexity\n// 3D printable model using basic primitives\n\n$fn = 32;\n\n// Overall body length ~80mm\nbody_length = 60;\nbody_height = 15;\nbody_width = 20;\n\n// Head dimensions\nhead_length = 20;\nhead_height = 12;\nhead_width = 15;\n\n// Tail length\ntail_length = 30;\n\n// Leg dimensions\nleg_length = 15;\nleg_height = 8;\nleg_width = 6;\n\n// Main body module\nmodule body() {\n    // Central body segment\n    translate([0, 0, body_height/2])\n    scale([1, 0.8, 0.6])\n    sphere(d=body_width);\n    \n    // Body segments decreasing in size\n    for(i = [1:4]) {\n        translate([-i*10, 0, body_height/2 - i*1.5])\n        scale([1 - i*0.1, 0.8 - i*0.05, 0.6 - i*0.08])\n        sphere(d=body_width - i*2);\n    }\n}\n\n// Head module with external gills\nmodule head() {\n    // Main head shape\n    translate([body_length/2 + head_length/2 - 5, 0, head_height/2])\n    scale([1.2, 1, 0.9])\n    sphere(d=head_width);\n    \n    // Snout\n    translate([body_length/2 + head_length - 2, 0, head_height/2 - 2])\n    scale([1.5, 0.7, 0.5])\n    sphere(d=8);\n    \n    // Eyes\n    for(side = [-1, 1]) {\n        translate([body_length/2 + head_length/2 - 2, side*5, head_height/2 + 2])\n        sphere(d=3);\n        \n        // Pupil\n        translate([body_length/2 + head_length/2 - 1, side*5, head_height/2 + 3])\n        color(\"black\")\n        sphere(d=1.5);\n    }\n    \n    // External gills - feathery structures\n    for(side = [-1, 1]) {\n        for(i = [0:2]) {\n            rotate([0, 0, side * 30])\n            translate([body_length/2 + head_length/2 - 5 - i*2, side*(head_width/2 + 2 + i), head_height/2 - 2])\n            cylinder(h=8, d1=1, d2=0.5);\n        }\n    }\n}\n\n// Tail module\nmodule tail() {\n    // Tail base\n    translate([-body_length/2 - tail_length/2, 0, body_height/2 - 5])\n    scale([1.5, 1, 0.3])\n    sphere(d=body_width);\n    \n    // Tail fin top\n    hull() {\n        translate([-body_length/2 - 5, 0, body_height/2 - 2])\n        sphere(d=2);\n        translate([-body_length/2 - tail_length, 0, body_height/2 + 5])\n        sphere(d=1);\n    }\n    \n    // Tail fin bottom\n    hull() {\n        translate([-body_length/2 - 5, 0, body_height/2 - 8])\n        sphere(d=2);\n        translate([-body_length/2 - tail_length, 0, body_height/2 - 12])\n        sphere(d=1);\n    }\n}\n\n// Leg module for all four legs\nmodule leg(pos_x, pos_y, side) {\n    translate([pos_x, pos_y, 0])\n    rotate([0, 0, side * 20])\n    union() {\n        // Upper leg\n        translate([0, 0, leg_height/2])\n        scale([1.2, 0.8, 1])\n        sphere(d=leg_width);\n        \n        // Lower leg\n        translate([leg_length/2 - 2, 0, -leg_height/4])\n        scale([0.8, 0.6, 0.8])\n        sphere(d=leg_width - 2);\n        \n        // Foot with toes\n        translate([leg_length - 1, 0, -leg_height/2 - 1])\n        union() {\n            // Main foot\n            scale([1.5, 1, 0.5])\n            sphere(d=leg_width - 1);\n            \n            // Toes\n            for(i = [-1, 0, 1]) {\n                translate([leg_length + 1, i*2, -leg_height/2 - 1])\n                scale([0.5, 0.3, 0.2])\n                sphere(d=3);\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    body();\n    head();\n    tail();\n    \n    // Front legs\n    leg(body_length/2 - 10, body_width/2 - 5, 1);\n    leg(body_length/2 - 10, -body_width/2 + 5, -1);\n    \n    // Back legs\n    leg(-body_length/2 + 5, body_width/2 - 3, 1);\n    leg(-body_length/2 + 5, -body_width/2 + 3, -1);\n}",
    "renders": true
  },
  {
    "animal": "mule",
    "openscad_code": "// Mule Model - Realistic Medium Complexity\n// 3D printable mule figure ~80mm long\n\n$fn = 32;\n\nmodule leg(x, y, z, angle) {\n    translate([x, y, z]) {\n        rotate([0, angle, 0]) {\n            // Upper leg\n            color(\"SaddleBrown\")\n            cylinder(h = 20, d1 = 6, d2 = 5);\n            translate([0, 0, 20]) {\n                // Lower leg\n                rotate([15, 0, 0])\n                cylinder(h = 18, d1 = 5, d2 = 4);\n                // Hoof\n                translate([0, 0, 18])\n                cylinder(h = 4, d1 = 4, d2 = 5);\n            }\n        }\n    }\n}\n\nmodule ear(x, y, z, angle) {\n    translate([x, y, z]) {\n        rotate([0, 0, angle]) {\n            difference() {\n                scale([0.8, 2, 0.3])\n                sphere(d = 8);\n                translate([0, -2, 1])\n                cube([6, 4, 2], center = true);\n            }\n        }\n    }\n}\n\nmodule tail() {\n    translate([-30, 0, 32]) {\n        rotate([30, 0, 0]) {\n            // Tail base\n            cylinder(h = 8, d = 5);\n            // Tail tuft\n            translate([0, 0, 8])\n            sphere(d = 6);\n        }\n    }\n}\n\n// Body\nunion() {\n    // Main torso\n    translate([0, 0, 25])\n    scale([1.8, 1, 1.2])\n    sphere(d = 35);\n    \n    // Belly\n    translate([0, 0, 15])\n    scale([1.6, 0.8, 0.6])\n    sphere(d = 30);\n    \n    // Chest\n    translate([15, 0, 20])\n    scale([1.2, 0.9, 1])\n    sphere(d = 20);\n    \n    // Neck\n    translate([25, 0, 30])\n    rotate([-15, 0, 0])\n    cylinder(h = 15, d1 = 12, d2 = 8);\n    \n    // Head\n    translate([35, 0, 32])\n    scale([1.5, 0.8, 0.9])\n    sphere(d = 18);\n    \n    // Muzzle\n    translate([45, 0, 28])\n    scale([1.2, 0.6, 0.5])\n    sphere(d = 15);\n    \n    // Nostrils\n    difference() {\n        translate([48, 0, 28])\n        sphere(d = 3);\n        translate([49, 1.5, 28])\n        rotate([0, 90, 0])\n        cylinder(h = 3, d = 1);\n        translate([49, -1.5, 28])\n        rotate([0, 90, 0])\n        cylinder(h = 3, d = 1);\n    }\n    \n    // Eyes\n    translate([40, 7, 33])\n    sphere(d = 2.5);\n    translate([40, -7, 33])\n    sphere(d = 2.5);\n    \n    // Ears\n    ear(32, 6, 40, 30);\n    ear(32, -6, 40, -30);\n    \n    // Legs\n    leg(20, 9, 0, -15);   // Front left\n    leg(20, -9, 0, -15);  // Front right\n    leg(-20, 9, 0, 15);   // Rear left\n    leg(-20, -9, 0, 15);  // Rear right\n    \n    // Tail\n    tail();\n    \n    // Mane ridge\n    for(i = [0:5]) {\n        translate([25 - i*3, 0, 35 + i*1.5])\n        sphere(d = 3);\n    }\n}",
    "renders": true
  },
  {
    "animal": "muskox",
    "openscad_code": "// Muskox model - realistic style, medium complexity\n// Designed for 3D printing with minimal overhangs\n\n$fn = 32;\n\n// Overall scaling factor\nscale_factor = 0.7;\n\n// Main body\nmodule body() {\n    union() {\n        // Torso - elongated sphere\n        translate([0, 0, 15])\n            scale([1.3, 0.8, 0.9])\n            sphere(r = 20);\n        \n        // Belly bulge\n        translate([0, 0, 8])\n            scale([1.1, 0.6, 0.5])\n            sphere(r = 18);\n    }\n}\n\n// Head with horns\nmodule head() {\n    union() {\n        // Head base\n        translate([25, 0, 28])\n            rotate([0, -10, 0])\n            scale([1.2, 0.9, 0.9])\n            sphere(r = 12);\n        \n        // Muzzle\n        translate([35, 0, 25])\n            rotate([0, -10, 0])\n            scale([1, 0.7, 0.6])\n            sphere(r = 8);\n        \n        // Horns - curved cylinders\n        // Left horn\n        translate([20, 8, 32])\n            rotate([0, -30, 45])\n            cylinder(r1 = 4, r2 = 2, h = 15);\n        \n        translate([18, 12, 34])\n            rotate([0, -45, 45])\n            cylinder(r1 = 3, r2 = 2, h = 12);\n        \n        // Right horn\n        translate([20, -8, 32])\n            rotate([0, -30, -45])\n            cylinder(r1 = 4, r2 = 2, h = 15);\n        \n        translate([18, -12, 34])\n            rotate([0, -45, -45])\n            cylinder(r1 = 3, r2 = 2, h = 12);\n    }\n}\n\n// Leg module\nmodule leg(x_pos, y_pos, angle) {\n    translate([x_pos, y_pos, 0])\n        rotate([angle, 0, 0])\n        union() {\n            // Upper leg\n            translate([0, 0, 8])\n                cylinder(r = 4, h = 12);\n            \n            // Lower leg\n            translate([0, 0, 2])\n                cylinder(r = 3, h = 8);\n            \n            // Hoof\n            translate([0, 0, 0])\n                scale([1.2, 1, 0.5])\n                cylinder(r = 3, h = 2);\n        }\n}\n\n// Tail\nmodule tail() {\n    translate([-22, 0, 20])\n        rotate([30, 0, 0])\n        scale([0.5, 0.5, 1])\n        sphere(r = 6);\n}\n\n// Fur texture using small spheres\nmodule fur_texture(base_x, base_y, base_z) {\n    for (i = [0:5]) {\n        for (j = [0:3]) {\n            translate([\n                base_x + sin(i*30)*3,\n                base_y + cos(j*45)*2,\n                base_z + (i+j)*0.5\n            ])\n            sphere(r = 1.5);\n        }\n    }\n}\n\n// Main assembly\nscale([scale_factor, scale_factor, scale_factor]) {\n    body();\n    head();\n    \n    // Legs - positioned to avoid overhangs\n    leg(15, 10, 15);   // Front left\n    leg(15, -10, 15);  // Front right\n    leg(-15, 8, 15);   // Rear left\n    leg(-15, -8, 15);  // Rear right\n    \n    tail();\n    \n    // Add fur texture on back and sides\n    for (x = [-15:5:15]) {\n        for (y = [-10:5:10]) {\n            fur_texture(x, y, 25);\n        }\n    }\n}",
    "renders": true
  },
  {
    "animal": "muskrat",
    "openscad_code": "// Muskrat 3D Model - Realistic Medium Complexity\n// Designed for 3D printing with no overhangs\n\nscale = 1; // Overall scale factor\n\n$fn = 32; // Smooth curves\n\n// Main body module\nmodule body() {\n    union() {\n        // Torso - elongated oval\n        translate([0, 0, 12])\n            scale([1.3, 0.8, 0.6])\n            sphere(d=30);\n        \n        // Rump\n        translate([-15, 0, 10])\n            scale([1.2, 1, 0.5])\n            sphere(d=25);\n        \n        // Chest\n        translate([10, 0, 10])\n            scale([1, 0.9, 0.5])\n            sphere(d=22);\n    }\n}\n\n// Head module\nmodule head() {\n    translate([20, 0, 18])\n    union() {\n        // Main head shape\n        rotate([0, -10, 0])\n        scale([1.2, 0.9, 0.8])\n        sphere(d=20);\n        \n        // Snout extension\n        translate([8, 0, -2])\n        scale([1.5, 0.7, 0.6])\n        sphere(d=12);\n        \n        // Nose\n        translate([15, 0, -1])\n        sphere(d=4);\n    }\n}\n\n// Ear module\nmodule ear(pos, angle) {\n    translate(pos)\n    rotate([0, 0, angle])\n    union() {\n        // Ear base\n        cylinder(h=5, d1=6, d2=4);\n        // Ear tip\n        translate([0, 0, 4])\n        sphere(d=4);\n    }\n}\n\n// Tail module - muskrat's distinctive tail\nmodule tail() {\n    translate([-25, 0, 8])\n    rotate([0, 10, 0])\n    scale([1, 0.3, 0.1])\n    cylinder(h=30, d1=15, d2=8);\n}\n\n// Leg module - simplified for printing\nmodule leg(pos, angle) {\n    translate(pos)\n    rotate([0, 0, angle])\n    union() {\n        // Upper leg\n        cylinder(h=8, d=6);\n        // Lower leg\n        translate([0, 0, -8])\n        rotate([15, 0, 0])\n        cylinder(h=10, d=5);\n        // Foot\n        translate([0, 0, -18])\n        rotate([90, 0, 0])\n        scale([1.5, 1, 0.5])\n        cylinder(h=8, d=6);\n    }\n}\n\n// Eye module\nmodule eye(pos) {\n    translate(pos)\n    difference() {\n        sphere(d=4);\n        translate([0, 0, 2])\n        sphere(d=3.5);\n    }\n}\n\n// Whiskers module\nmodule whiskers() {\n    for (i = [-1, 1]) {\n        for (j = [1, 2, 3]) {\n            translate([22, i*5, 15])\n            rotate([0, i*15, j*15])\n            cylinder(h=5, d=0.5);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    body();\n    head();\n    \n    // Ears\n    ear([15, 8, 25], 30);\n    ear([15, -8, 25], -30);\n    \n    // Tail\n    tail();\n    \n    // Legs\n    leg([5, 10, 0], 0);\n    leg([5, -10, 0], 0);\n    leg([-8, 8, 0], 0);\n    leg([-8, -8, 0], 0);\n    \n    // Eyes\n    eye([25, 5, 20]);\n    eye([25, -5, 20]);\n    \n    // Whiskers\n    whiskers();\n}\n\n// Scale to reasonable size (80mm length)\nscale(80/60);",
    "renders": true
  },
  {
    "animal": "mussel",
    "openscad_code": "// Realistic 3D printable mussel model\n// Overall size ~70 mm\n\nmodule mussel_shell(lower=true){\n    // Main shell halves\n    difference(){\n        // Outer shell\n        scale([1, 0.7, 0.4])\n        sphere(d=60, $fn=60);\n        \n        // Hollow inside\n        translate([0,0,-2])\n        scale([0.9, 0.6, 0.35])\n        sphere(d=60, $fn=60);\n    }\n    \n    // Growth rings on shell\n    for(i=[1:5]){\n        translate([0,0,i*1.5-2])\n        scale([1-i*0.03, 0.7-i*0.02, 0.05])\n        sphere(d=60-i*2, $fn=60);\n    }\n    \n    // Hinge area thickening\n    translate([-28,0,-2])\n    rotate([0,90,0])\n    cylinder(h=8, r1=10, r2=6, $fn=30);\n}\n\nmodule mussel_body(){\n    // Main body mass\n    translate([0,0,-8])\n    scale([0.7, 0.5, 0.3])\n    sphere(d=40, $fn=30);\n    \n    // Foot/muscle\n    translate([0,0,-12])\n    rotate([15,0,0])\n    scale([0.3, 0.2, 0.8])\n    sphere(d=20, $fn=20);\n    \n    // Gills (simplified)\n    for(i=[-2:2]){\n        translate([i*4, 0, -5])\n        scale([0.8, 0.1, 2])\n        rotate([90,0,0])\n        cylinder(h=8, r=3, $fn=8);\n    }\n}\n\nmodule byssus_threads(){\n    // Attachment threads\n    for(i=[1:8]){\n        rotate([0,0,i*45])\n        translate([0,-8,-15])\n        rotate([90,0,0])\n        scale([0.3, 0.3, 1])\n        cylinder(h=15+rand(i)*5, r=1.5, $fn=8);\n    }\n}\n\nmodule hinge_detail(){\n    // Hinge teeth\n    translate([-29,0,-2])\n    rotate([0,90,0])\n    for(i=[-1:1]){\n        translate([0,i*3,0])\n        cube([3,2,6], center=true);\n    }\n}\n\n// Assemble complete mussel\nunion(){\n    // Lower shell\n    mussel_shell(true);\n    \n    // Upper shell (slightly open)\n    translate([0,0,2])\n    rotate([20,0,0])\n    mussel_shell(false);\n    \n    // Hinge mechanism\n    hinge_detail();\n    \n    // Mussel body inside\n    mussel_body();\n    \n    // Byssus threads (attachment fibers)\n    byssus_threads();\n}",
    "renders": true
  },
  {
    "animal": "narwhal",
    "openscad_code": "// Realistic Narwhal - Medium Complexity\n// 3D printable model, no overhangs, wall thickness 1.5mm\n\n$fn = 36;  // Smooth curves for printing\n\nmodule narwhal() {\n    // Main body - elongated ellipsoid\n    rotate([0, -10, 0]) {\n        scale([1.2, 1, 0.8]) {\n            sphere(20);\n        }\n        \n        // Tail fluke\n        translate([0, -25, 0]) {\n            rotate([0, 0, 90]) {\n                difference() {\n                    union() {\n                        scale([0.3, 1.5, 0.1]) cube(20, center=true);\n                        scale([1.5, 0.3, 0.1]) cube(20, center=true);\n                    }\n                    translate([0, 0, 2]) scale([0.25, 1.4, 0.08]) cube(20, center=true);\n                }\n            }\n        }\n        \n        // Dorsal ridge\n        for(i = [5:5:15]) {\n            translate([i, 0, 15]) {\n                scale([1, 0.3, 0.4]) sphere(3);\n            }\n        }\n        \n        // Pectoral fins\n        for(side = [-1, 1]) {\n            translate([0, side * 12, -5]) {\n                rotate([0, 30 * side, 45 * side]) {\n                    scale([1, 0.4, 0.15]) rotate([0, 0, 90]) cylinder(h=15, r=6);\n                }\n            }\n        }\n        \n        // Head\n        translate([20, 0, 2]) {\n            scale([0.8, 0.9, 0.9]) sphere(15);\n            \n            // Snout\n            translate([8, 0, -3]) {\n                scale([1.5, 0.7, 0.7]) rotate([0, -10, 0]) cylinder(h=8, r=5);\n            }\n            \n            // Eye\n            translate([15, 6, 4]) {\n                sphere(2);\n            }\n            \n            // Blowhole\n            translate([18, 0, 10]) {\n                rotate([40, 0, 0]) cylinder(h=2, r=1.5);\n            }\n            \n            // Tusk\n            translate([25, 0, 0]) {\n                rotate([0, 100, 0]) {\n                    cylinder(h=1, r1=2, r2=1);\n                    for(i = [0:2:40]) {\n                        translate([0, 0, i]) {\n                            rotate([0, 0, i * 15]) {\n                                scale([1, 1, 0.5]) sphere(1.8 - i * 0.02);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Ventral grooves\n        for(i = [5:8:25]) {\n            translate([i, 0, -12]) {\n                scale([1, 1, 0.1]) rotate([0, 0, 90]) cylinder(h=15, r=3);\n            }\n        }\n    }\n}\n\n// Create the narwhal centered on platform\ntranslate([0, 0, 10]) narwhal();",
    "renders": true
  },
  {
    "animal": "newt",
    "openscad_code": "// Realistic newt model - medium complexity\n// Overall size ~70mm length\n\n$fn = 32;\n\n// Main body module\nmodule newt_body() {\n    // Torso - elongated sphere\n    translate([0, 0, 8])\n    scale([1.8, 1, 1])\n    sphere(12);\n    \n    // Head - slightly flattened sphere\n    translate([25, 0, 10])\n    scale([1.2, 0.9, 0.7])\n    sphere(8);\n    \n    // Snout - cone\n    translate([33, 0, 10])\n    rotate([0, 90, 0])\n    cylinder(h=8, r1=4, r2=0);\n}\n\n// Limb module\nmodule limb(length, width, angle) {\n    rotate([0, 0, angle])\n    translate([length/2, 0, 0])\n    union() {\n        // Upper segment\n        translate([0, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h=length/2, r=width);\n        \n        // Lower segment\n        translate([length/2, 0, -width])\n        rotate([30, 90, 0])\n        cylinder(h=length/2, r=width*0.8);\n        \n        // Hand/foot\n        translate([length, 0, -width*1.5])\n        sphere(width*1.2);\n    }\n}\n\n// Tail module\nmodule tail() {\n    hull() {\n        translate([-20, 0, 8])\n        sphere(6);\n        \n        translate([-35, 0, 6])\n        scale([1, 0.7, 0.5])\n        sphere(4);\n        \n        translate([-45, 0, 5])\n        scale([1, 0.5, 0.3])\n        sphere(2);\n    }\n}\n\n// Eye module\nmodule eye(position) {\n    translate(position)\n    union() {\n        // Eyeball\n        sphere(1.5);\n        \n        // Pupil\n        translate([0.5, 0, 0])\n        color(\"black\")\n        sphere(0.8);\n    }\n}\n\n// Skin texture - small bumps\nmodule skin_bumps() {\n    for(i = [-20:5:20]) {\n        for(j = [-10:5:10]) {\n            if((i*i + j*j) < 400) {\n                translate([i, j, 12 + 12*cos(i/10)*sin(j/10)])\n                sphere(0.5);\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Body\n    newt_body();\n    \n    // Tail\n    tail();\n    \n    // Front limbs\n    limb(12, 2, 30);\n    mirror([0, 1, 0])\n    limb(12, 2, 30);\n    \n    // Rear limbs\n    translate([-15, 0, 0])\n    limb(15, 2.5, -30);\n    translate([-15, 0, 0])\n    mirror([0, 1, 0])\n    limb(15, 2.5, -30);\n    \n    // Eyes\n    color(\"darkolivegreen\")\n    eye([30, 3, 12]);\n    color(\"darkolivegreen\")\n    eye([30, -3, 12]);\n    \n    // Skin texture\n    color(\"darkolivegreen\")\n    skin_bumps();\n}\n\n// Base for stability\ntranslate([0, 0, -2])\ncolor(\"darkolivegreen\")\ncylinder(h=2, r=25);",
    "renders": true
  },
  {
    "animal": "nighthawk",
    "openscad_code": "// Nighthawk medium-complexity realistic model\n// Overall size ~60 mm wingspan\n\n// Wing module\nmodule wing() {\n    // Main wing panel\n    difference() {\n        hull() {\n            translate([0, 0, 0]) cube([25, 2, 8], center=true);\n            translate([20, 0, 2]) cube([15, 2, 4], center=true);\n        }\n        \n        // Cut trailing edge taper\n        translate([10, 0, 4]) rotate([0, 15, 0]) \n            cube([30, 3, 10], center=true);\n            \n        // Wing tip taper\n        translate([30, 0, 0]) rotate([0, 0, 20])\n            cube([15, 3, 10], center=true);\n    }\n    \n    // Primary feathers\n    for(i = [0:4]) {\n        translate([15 + i*3, 0, -2]) rotate([0, 0, -30 + i*5])\n            cube([4, 1, 6], center=true);\n    }\n}\n\n// Body module\nmodule body() {\n    // Torso\n    hull() {\n        sphere(r=4, $fn=16);\n        translate([0, 0, -8]) scale([1.2, 0.8, 1.5]) sphere(r=4, $fn=16);\n    }\n    \n    // Head\n    translate([0, 0, 6]) scale([1.3, 1, 1.2]) sphere(r=3, $fn=16);\n    \n    // Beak\n    translate([0, 0, 9]) rotate([30, 0, 0])\n        scale([0.8, 0.3, 2]) cylinder(h=4, r1=2, r2=0.5, $fn=8);\n}\n\n// Tail module\nmodule tail() {\n    difference() {\n        // Tail fan\n        union() {\n            for(i = [-2:2]) {\n                rotate([0, 0, i*15])\n                    translate([0, 0, -10]) scale([1, 0.2, 2])\n                        cube([8, 1, 5], center=true);\n            }\n        }\n        \n        // Rounded tail tips\n        translate([0, 0, -12]) sphere(r=2, $fn=8);\n    }\n}\n\n// Leg module\nmodule leg() {\n    // Thigh\n    translate([0, 0, -8]) rotate([45, 0, 0])\n        cylinder(h=3, r=1, $fn=8);\n        \n    // Shank\n    translate([0, 1.5, -10]) rotate([90, 0, 0])\n        cylinder(h=4, r=0.7, $fn=8);\n        \n    // Foot\n    translate([0, 2, -12]) rotate([90, 0, 0]) {\n        // Main toe\n        cylinder(h=3, r=0.5, $fn=8);\n        \n        // Side toes\n        for(side = [-1, 1]) {\n            translate([side*1.5, 0, 0]) rotate([0, side*20, 0])\n                cylinder(h=2.5, r=0.4, $fn=8);\n        }\n    }\n}\n\n// Eye module\nmodule eye() {\n    difference() {\n        sphere(r=0.8, $fn=8);\n        translate([0.4, 0, 0]) sphere(r=0.5, $fn=8);\n    }\n}\n\n// Main assembly\nunion() {\n    // Body centered at origin\n    body();\n    \n    // Tail\n    tail();\n    \n    // Wings\n    translate([0, 0, -2]) rotate([0, 0, 20]) wing();\n    translate([0, 0, -2]) mirror([0, 1, 0]) rotate([0, 0, 20]) wing();\n    \n    // Legs\n    translate([2, -1.5, 0]) leg();\n    translate([2, 1.5, 0]) leg();\n    \n    // Eyes\n    translate([1.5, -1.2, 6.5]) eye();\n    translate([1.5, 1.2, 6.5]) eye();\n    \n    // Ear tufts\n    translate([0, -1.5, 7.5]) rotate([30, 0, 0])\n        cylinder(h=2, r1=0.8, r2=0.3, $fn=8);\n    translate([0, 1.5, 7.5]) rotate([30, 0, 0])\n        cylinder(h=2, r1=0.8, r2=0.3, $fn=8);\n}",
    "renders": true
  },
  {
    "animal": "nightjar",
    "openscad_code": "// Nightjar in realistic style\n// Size: ~70mm wingspan, 3mm wall thickness for 3D printing\n\n$fn = 32;\n\n// Main body module\nmodule body() {\n    // Torso - elongated cylinder with slight taper\n    translate([0, 0, 8])\n    scale([1.2, 0.8, 1])\n    cylinder(h=25, r1=8, r2=6, center=true);\n    \n    // Chest/belly - slightly flattened sphere\n    translate([0, 0, -2])\n    scale([1.3, 1, 0.7])\n    sphere(r=10);\n    \n    // Back hump for camouflage\n    translate([0, 0, 12])\n    scale([1.4, 1.2, 0.8])\n    sphere(r=8);\n}\n\n// Head module with characteristic wide mouth\nmodule head() {\n    // Main head - elongated sphere\n    translate([0, 0, 25])\n    scale([1.5, 1.2, 1.1])\n    rotate([0, 45, 0])\n    sphere(r=7);\n    \n    // Beak/mouth area - wide flat triangle\n    translate([11, 0, 25])\n    rotate([0, 90, 0])\n    cylinder(h=12, r1=6, r2=0, center=true);\n    \n    // Eyes - positioned for forward vision\n    translate([5, 4, 28])\n    sphere(r=2);\n    translate([5, -4, 28])\n    sphere(r=2);\n    \n    // Eye rims for detail\n    translate([6.5, 4, 28])\n    sphere(r=2.5);\n    translate([6.5, -4, 28])\n    sphere(r=2.5);\n}\n\n// Wing module with feather detail\nmodule wing(side) {\n    mirror([side, 0, 0]) {\n        // Main wing structure\n        translate([15, 0, 12])\n        rotate([0, 0, -side * 20])\n        scale([2.8, 0.8, 0.2])\n        cylinder(h=25, r1=12, r2=8);\n        \n        // Primary feathers\n        for (i = [0:3]) {\n            translate([30 + i*3, 0, 12])\n            rotate([0, 0, -side * (15 + i*5)])\n            scale([0.8, 0.2, 0.1])\n            cylinder(h=8, r1=5, r2=2);\n        }\n        \n        // Secondary feathers\n        for (i = [0:4]) {\n            translate([20 + i*2.5, 0, 12])\n            rotate([0, 0, -side * (10 + i*3)])\n            scale([0.6, 0.15, 0.1])\n            cylinder(h=6, r1=4, r2=2);\n        }\n    }\n}\n\n// Tail module with graduated feathers\nmodule tail() {\n    // Tail base\n    translate([-15, 0, 8])\n    scale([1.5, 0.8, 0.3])\n    cylinder(h=15, r1=8, r2=5);\n    \n    // Tail feathers\n    for (i = [0:4]) {\n        translate([-20 - i*2, (i-2)*3, 8])\n        rotate([0, 0, (i-2)*10])\n        scale([1.2, 0.2, 0.1])\n        cylinder(h=10, r1=6, r2=1);\n    }\n}\n\n// Legs and feet\nmodule legs() {\n    // Left leg\n    translate([5, 4, 0])\n    cylinder(h=8, r=1.5);\n    \n    // Left foot\n    translate([5, 4, -2])\n    for (i = [0:2]) {\n        rotate([0, 0, i*30])\n        translate([0, 3, 0])\n        cylinder(h=4, r=0.5);\n    }\n    \n    // Right leg\n    translate([5, -4, 0])\n    cylinder(h=8, r=1.5);\n    \n    // Right foot\n    translate([5, -4, -2])\n    for (i = [0:2]) {\n        rotate([0, 0, -i*30])\n        translate([0, -3, 0])\n        cylinder(h=4, r=0.5);\n    }\n}\n\n// Assemble the nightjar\nunion() {\n    body();\n    head();\n    wing(1);  // Left wing\n    wing(-1); // Right wing\n    tail();\n    legs();\n}",
    "renders": true
  },
  {
    "animal": "nilgai",
    "openscad_code": "// Nilgai (medium complexity, realistic style)\n// Designed for 3D printing - scale to 1:1 for ~60mm length\n\n$fn = 32;\n\n// Main assembly\nunion() {\n    // Body\n    body();\n    \n    // Head and neck\n    translate([0, 15, 10]) rotate([0, 0, 0]) head_and_neck();\n    \n    // Legs\n    // Front left\n    translate([8, 10, 0]) leg(front=true);\n    // Front right\n    translate([-8, 10, 0]) mirror([1, 0, 0]) leg(front=true);\n    // Rear left\n    translate([7, -15, 0]) leg(front=false);\n    // Rear right\n    translate([-7, -15, 0]) mirror([1, 0, 0]) leg(front=false);\n    \n    // Tail\n    translate([0, -22, 8]) tail();\n}\n\nmodule body() {\n    difference() {\n        // Main torso\n        hull() {\n            translate([0, 0, 12]) scale([1.2, 1.5, 1]) sphere(10);\n            translate([0, -10, 12]) scale([1, 1.2, 0.8]) sphere(8);\n        }\n        \n        // Undercut for printing support\n        translate([0, 0, -2]) cube([30, 40, 4], center=true);\n    }\n}\n\nmodule head_and_neck() {\n    union() {\n        // Neck\n        translate([0, 8, 0]) rotate([-20, 0, 0]) \n            scale([0.6, 0.6, 1.5]) cylinder(10, 5, 4);\n        \n        // Head\n        translate([0, 15, 5]) rotate([30, 0, 0]) {\n            // Main head shape\n            scale([1.2, 1.5, 1]) sphere(6);\n            \n            // Snout\n            translate([0, 5, -1]) scale([0.6, 0.8, 0.5]) sphere(5);\n            \n            // Ears\n            translate([3, 0, 4]) rotate([0, 10, 0]) \n                scale([0.3, 0.1, 0.6]) cylinder(5, 2, 1);\n            translate([-3, 0, 4]) rotate([0, -10, 0]) \n                scale([0.3, 0.1, 0.6]) cylinder(5, 2, 1);\n                \n            // Horns (small for female nilgai)\n            translate([2, 2, 5]) cylinder(3, 0.5, 0.5);\n            translate([-2, 2, 5]) cylinder(3, 0.5, 0.5);\n        }\n    }\n}\n\nmodule leg(front=true) {\n    angle = front ? 15 : -15;\n    \n    union() {\n        // Upper leg\n        translate([0, 0, 8]) rotate([angle, 0, 0]) \n            scale([0.8, 0.8, 1.2]) cylinder(12, 3, 2.5);\n        \n        // Lower leg\n        translate([0, 0, 2]) rotate([angle, 0, 0]) \n            cylinder(12, 2.5, 2);\n        \n        // Hoof\n        translate([0, 8.5 * sin(angle), 8.5 * cos(angle) - 11]) \n            scale([1, 1.2, 0.5]) sphere(2);\n    }\n}\n\nmodule tail() {\n    // Tail base\n    hull() {\n        translate([0, 0, 0]) sphere(3);\n        translate([0, -8, 0]) sphere(2);\n    }\n    \n    // Tail tuft\n    translate([0, -10, 0]) \n        scale([0.8, 0.8, 0.4]) sphere(3);\n}",
    "renders": true
  },
  {
    "animal": "numbat",
    "openscad_code": "// Numbat - Realistic style with medium complexity\n// Dimensions: ~70mm long, 30mm tall, 20mm wide\n\n$fn = 20;\nwall_thickness = 1.5;\n\nmodule numbat() {\n    union() {\n        // Main body\n        translate([0, 0, 10]) {\n            scale([1.2, 0.6, 0.8]) sphere(d=35);\n        }\n        \n        // Head\n        translate([-25, 0, 20]) {\n            rotate([0, -10, 0]) {\n                scale([1.1, 0.8, 0.7]) sphere(d=20);\n            }\n        }\n        \n        // Snout\n        translate([-35, 0, 18]) {\n            rotate([0, -20, 0]) {\n                scale([1.5, 0.6, 0.5]) cylinder(h=15, d1=8, d2=5);\n            }\n        }\n        \n        // Ears (pointed)\n        for(side = [-1, 1]) {\n            translate([-20, side*8, 28]) {\n                rotate([0, side*10, 0]) {\n                    rotate_extrude(angle=30) {\n                        polygon(points=[[0,0],[6,0],[3,8]]);\n                    }\n                }\n            }\n        }\n        \n        // Tail (bushy)\n        translate([20, 0, 12]) {\n            rotate([0, 10, 0]) {\n                scale([0.8, 0.8, 1]) cylinder(h=30, d1=12, d2=8);\n            }\n        }\n        \n        // Legs\n        for(side = [-1, 1]) {\n            // Front legs\n            translate([-15, side*6, 0]) {\n                cylinder(h=12, d=5);\n            }\n            \n            // Back legs\n            translate([15, side*6, 0]) {\n                cylinder(h=12, d=5);\n            }\n            \n            // Paws\n            translate([-15, side*6, 0]) {\n                sphere(d=6);\n            }\n            translate([15, side*6, 0]) {\n                sphere(d=6);\n            }\n        }\n        \n        // Stripes on back\n        for(i = [0:4]) {\n            translate([-10 + i*8, 0, 23]) {\n                scale([1, 0.3, 0.1]) sphere(d=15);\n            }\n        }\n        \n        // Eyes\n        for(side = [-1, 1]) {\n            translate([-30, side*5, 22]) {\n                difference() {\n                    sphere(d=4);\n                    translate([0, 0, 2]) sphere(d=2.5);\n                }\n            }\n        }\n        \n        // Nose\n        translate([-38, 0, 17]) {\n            scale([1.2, 0.6, 0.8]) sphere(d=3);\n        }\n    }\n}\n\n// Create the numbat\nnumbat();",
    "renders": true
  },
  {
    "animal": "nurse",
    "openscad_code": "// Nurse Figure - Realistic Medium Complexity\n// Height: 80mm, built for 3D printing\n\n// Parameters\nbody_height = 40;\nhead_radius = 8;\narm_length = 20;\nleg_length = 25;\nnurse_hat_height = 6;\nnurse_hat_radius = 9;\n\n// Colors for preview\ncolor_skin = \"#FFD1A4\";\ncolor_uniform = \"#FFFFFF\";\ncolor_shoes = \"#000000\";\ncolor_hair = \"#8B4513\";\n\n// Main module\nmodule nurse() {\n    union() {\n        // Head\n        translate([0, 0, body_height + head_radius]) {\n            head();\n        }\n        \n        // Body\n        translate([0, 0, leg_length]) {\n            body();\n        }\n        \n        // Legs\n        legs();\n        \n        // Arms\n        arms();\n        \n        // Nurse hat\n        translate([0, 0, body_height + head_radius * 2]) {\n            nurse_hat();\n        }\n    }\n}\n\n// Head with hair\nmodule head() {\n    color(color_skin) {\n        sphere(r = head_radius, $fn = 32);\n    }\n    \n    // Hair\n    color(color_hair) {\n        difference() {\n            sphere(r = head_radius + 1, $fn = 32);\n            translate([0, 0, -head_radius - 2])\n                cube([head_radius * 2 + 2, head_radius * 2 + 2, head_radius * 2 + 4], center = true);\n        }\n    }\n    \n    // Eyes\n    color(\"black\") {\n        translate([-3, -head_radius + 1.5, 2]) sphere(r = 0.8, $fn = 8);\n        translate([3, -head_radius + 1.5, 2]) sphere(r = 0.8, $fn = 8);\n    }\n    \n    // Nose\n    color(color_skin) {\n        translate([0, -head_radius + 0.5, 0.5]) sphere(r = 1, $fn = 8);\n    }\n    \n    // Mouth\n    color(\"red\") {\n        translate([0, -head_radius + 0.5, -2]) cylinder(h = 0.5, r1 = 1.5, r2 = 1.5, $fn = 16);\n    }\n}\n\n// Nurse hat\nmodule nurse_hat() {\n    color(color_uniform) {\n        // Main hat\n        cylinder(h = nurse_hat_height, r1 = nurse_hat_radius, r2 = nurse_hat_radius * 0.9, $fn = 32);\n        \n        // Brim\n        translate([0, 0, -1])\n            cylinder(h = 2, r1 = nurse_hat_radius + 3, r2 = nurse_hat_radius + 1, $fn = 32);\n        \n        // Red cross\n        color(\"red\") {\n            translate([0, 0, nurse_hat_height / 2 + 0.5]) {\n                union() {\n                    cube([6, 2, nurse_hat_height], center = true);\n                    cube([2, 6, nurse_hat_height], center = true);\n                }\n            }\n        }\n    }\n}\n\n// Body with uniform\nmodule body() {\n    color(color_uniform) {\n        // Torso\n        union() {\n            // Main body\n            cylinder(h = body_height, r1 = 10, r2 = 8, $fn = 32);\n            \n            // Collar\n            translate([0, 0, body_height - 2])\n                cylinder(h = 2, r1 = 10.5, r2 = 9, $fn = 32);\n        }\n        \n        // Arms connection points\n        translate([-11, 0, body_height - 10])\n            rotate([0, 90, 0])\n                cylinder(h = 3, r = 3, $fn = 16);\n        translate([11, 0, body_height - 10])\n            rotate([0, 90, 0])\n                cylinder(h = 3, r = 3, $fn = 16);\n    }\n}\n\n// Arms\nmodule arms() {\n    // Left arm\n    translate([-11, 0, leg_length + body_height - 10]) {\n        rotate([0, 0, -30]) {\n            color(color_uniform) {\n                cylinder(h = arm_length, r = 2.5, $fn = 16);\n            }\n            translate([0, 0, arm_length - 2.5]) {\n                color(color_skin) {\n                    sphere(r = 2.5, $fn = 16);\n                }\n            }\n        }\n    }\n    \n    // Right arm\n    translate([11, 0, leg_length + body_height - 10]) {\n        rotate([0, 0, 30]) {\n            color(color_uniform) {\n                cylinder(h = arm_length, r = 2.5, $fn = 16);\n            }\n            translate([0, 0, arm_length - 2.5]) {\n                color(color_skin) {\n                    sphere(r = 2.5, $fn = 16);\n                }\n            }\n        }\n    }\n}\n\n// Legs and shoes\nmodule legs() {\n    // Left leg\n    translate([-4, 0, 0]) {\n        color(color_uniform) {\n            cylinder(h = leg_length, r = 3, $fn = 16);\n        }\n        // Shoe\n        translate([0, 0, -3]) {\n            color(color_shoes) {\n                union() {\n                    cylinder(h = 6, r1 = 4, r2 = 3, $fn = 16);\n                    translate([2, 0, 3])\n                        cube([4, 3, 2], center = true);\n                }\n            }\n        }\n    }\n    \n    // Right leg\n    translate([4, 0, 0]) {\n        color(color_uniform) {\n            cylinder(h = leg_length, r = 3, $fn = 16);\n        }\n        // Shoe\n        translate([0, 0, -3]) {\n            color(color_shoes) {\n                union() {\n                    cylinder(h = 6, r1 = 4, r2 = 3, $fn = 16);\n                    translate([2, 0, 3])\n                        cube([4, 3, 2], center = true);\n                }\n            }\n        }\n    }\n}\n\n// Create the nurse\nnurse();",
    "renders": true
  },
  {
    "animal": "nutcracker",
    "openscad_code": "// Realistic Nutcracker - OpenSCAD\n// Medium complexity with proper 3D printing considerations\n\n$fn = 50;\n\n// Main module\nmodule nutcracker() {\n    // Base with feet\n    base();\n    \n    // Body assembly\n    body();\n    \n    // Head with face details\n    head();\n    \n    // Arms with lever mechanism\n    arms();\n    \n    // Hat\n    hat();\n}\n\n// Base platform with feet\nmodule base() {\n    union() {\n        // Main base platform\n        translate([0, 0, -2])\n            cube([25, 30, 4], center=true);\n        \n        // Left foot\n        translate([-10, 12, -2])\n            cylinder(h=4, r1=4, r2=3);\n        \n        // Right foot  \n        translate([10, 12, -2])\n            cylinder(h=4, r1=4, r2=3);\n    }\n}\n\n// Body with uniform thickness for 3D printing\nmodule body() {\n    color(\"red\")\n    union() {\n        // Main torso\n        translate([0, 0, 12])\n            cylinder(h=25, r1=10, r2=8);\n        \n        // Jacket details - buttons\n        for(i = [1:3]) {\n            translate([0, 10, 8 + i*6])\n                sphere(r=1.5);\n        }\n        \n        // Belt\n        translate([0, 0, 20])\n            difference() {\n                cylinder(h=3, r1=10.2, r2=8.2);\n                cylinder(h=3.2, r1=9.5, r2=7.5);\n            }\n    }\n}\n\n// Head with facial features\nmodule head() {\n    color(\"bisque\")\n    union() {\n        // Main head sphere\n        translate([0, 0, 32])\n            sphere(r=8);\n        \n        // Nose\n        translate([0, 8, 32])\n            scale([1, 1.5, 1])\n                sphere(r=1.5);\n        \n        // Eyes\n        translate([-3, 6, 34])\n            sphere(r=1);\n        translate([3, 6, 34])\n            sphere(r=1);\n        \n        // Eye pupils\n        color(\"black\") {\n            translate([-3, 7, 34])\n                sphere(r=0.5);\n            translate([3, 7, 34])\n                sphere(r=0.5);\n        }\n        \n        // Mustache\n        color(\"black\")\n        translate([0, 9, 30])\n            rotate([90, 0, 0])\n                cylinder(h=6, r1=4, r2=0, center=true);\n        \n        // Mouth line\n        translate([0, 9, 28.5])\n            rotate([90, 0, 0])\n                cylinder(h=4, r1=0.5, r2=0.5);\n        \n        // Beard\n        color(\"black\")\n        difference() {\n            translate([0, 8, 24])\n                sphere(r=5);\n            translate([0, 10, 24])\n                cube([10, 10, 10], center=true);\n        }\n    }\n}\n\n// Arms with lever mechanism\nmodule arms() {\n    // Left arm (lever)\n    translate([-12, 0, 22])\n    rotate([0, 0, 45])\n    union() {\n        color(\"red\")\n        cylinder(h=15, r1=3, r2=2);\n        \n        // Hand\n        translate([0, 15, 0])\n            sphere(r=2.5);\n    }\n    \n    // Right arm (fixed)\n    translate([12, 0, 22])\n    rotate([0, 0, -45])\n    union() {\n        color(\"red\")\n        cylinder(h=15, r1=3, r2=2);\n        \n        // Hand\n        translate([0, 15, 0])\n            sphere(r=2.5);\n    }\n}\n\n// Hat with details\nmodule hat() {\n    color(\"black\")\n    union() {\n        // Main hat\n        translate([0, 0, 43])\n            cylinder(h=12, r1=9, r2=7);\n        \n        // Hat brim\n        translate([0, 0, 43])\n            cylinder(h=2, r1=12, r2=12);\n        \n        // Hat top\n        translate([0, 0, 55])\n            sphere(r=4);\n        \n        // Gold band\n        color(\"gold\")\n        translate([0, 0, 47])\n            cylinder(h=2, r1=8.5, r2=7.5);\n    }\n}\n\n// Render the complete nutcracker\nnutcracker();",
    "renders": true
  },
  {
    "animal": "nuthatch",
    "openscad_code": "// Nuthatch 3D Model (Medium Complexity - Realistic Style)\n// Size: ~70mm length, 3mm wall thickness, 3D printable\n\n$fn = 32;\n\n// Main body module\nmodule nuthatch_body() {\n    // Main torso - elongated sphere\n    translate([0, 0, 15]) \n        scale([1.3, 1, 1.2]) \n            sphere(15);\n    \n    // Back - slightly flattened top\n    translate([0, 0, 25]) \n        scale([1.2, 0.9, 0.5]) \n            sphere(12);\n    \n    // Chest bulge\n    translate([0, 8, 10]) \n        scale([0.8, 0.6, 1]) \n            sphere(12);\n}\n\n// Head module with beak\nmodule nuthatch_head() {\n    // Main head - rotated sphere\n    translate([-10, 0, 30]) \n        rotate([0, 20, 0]) \n            scale([0.9, 1, 1.1]) \n                sphere(12);\n    \n    // Beak - cone\n    translate([-22, 0, 32]) \n        rotate([0, -20, 0]) \n            cylinder(h=15, r1=2, r2=0.5);\n    \n    // Head cap (darker color area)\n    translate([-12, 0, 38]) \n        scale([0.9, 1, 0.3]) \n            sphere(8);\n}\n\n// Wing modules\nmodule wing(side) {\n    mirror([side, 0, 0]) {\n        // Main wing\n        translate([5, -12, 22]) \n            rotate([0, -10, 20]) \n                scale([0.8, 0.3, 2]) \n                    sphere(10);\n        \n        // Wing tip\n        translate([8, -15, 18]) \n            rotate([0, 0, 30]) \n                scale([0.5, 0.2, 1]) \n                    sphere(8);\n        \n        // Wing feathers - loop for detail\n        for(i = [0:2]) {\n            translate([6 + i*2, -15 - i*1.5, 20 - i*3]) \n                rotate([0, 0, 15 + i*10]) \n                    scale([0.4, 0.1, 0.8]) \n                        cube([6, 2, 1]);\n        }\n    }\n}\n\n// Tail module\nmodule tail() {\n    // Tail base\n    translate([18, 0, 15]) \n        rotate([0, 30, 0]) \n            scale([0.5, 0.2, 1.5]) \n                sphere(8);\n    \n    // Tail feathers\n    for(i = [-1:1]) {\n        translate([22, i*3, 15 + i*2]) \n            rotate([0, 20 - abs(i)*5, i*10]) \n                scale([0.3, 0.1, 1.2]) \n                    cube([8, 2, 1]);\n    }\n}\n\n// Leg and foot module\nmodule foot(side) {\n    mirror([side, 0, 0]) {\n        // Leg\n        translate([5, side*5, 5]) \n            cylinder(h=8, r=1.5);\n        \n        // Feet - three toes forward, one back\n        // Forward toes\n        for(i = [0:2]) {\n            angle = -30 + i*30;\n            translate([5, side*5, 0]) \n                rotate([0, 0, angle]) \n                    translate([0, 3, 0]) \n                        scale([0.3, 2, 0.3]) \n                            cube([1, 3, 1]);\n        }\n        \n        // Back toe\n        translate([5, side*5, 0]) \n            rotate([0, 0, 180]) \n                translate([0, 2, 0]) \n                    scale([0.3, 1.5, 0.3]) \n                        cube([1, 2, 1]);\n    }\n}\n\n// Eye module\nmodule eye(side) {\n    mirror([side, 0, 0]) {\n        // Eye socket\n        translate([-12, side*5, 33]) \n            sphere(2);\n        \n        // Eye proper\n        translate([-11.5, side*5, 33.5]) \n            sphere(1.5);\n        \n        // Eye highlight\n        translate([-11, side*4.7, 34]) \n            sphere(0.5);\n    }\n}\n\n// Main assembly\nunion() {\n    // Body parts\n    nuthatch_body();\n    nuthatch_head();\n    \n    // Wings\n    wing(1);\n    wing(-1);\n    \n    // Tail\n    tail();\n    \n    // Legs and feet\n    foot(1);\n    foot(-1);\n    \n    // Eyes\n    eye(1);\n    eye(-1);\n}",
    "renders": true
  },
  {
    "animal": "nutria",
    "openscad_code": "// Nutria - Realistic Style, Medium Complexity\n// Overall dimensions: ~80mm long, 35mm wide, 35mm tall\n\n$fn = 32;  // Smooth curves for 3D printing\n\n// Main body assembly\nmodule nutria() {\n    // Body - elongated oval\n    scale([1.4, 1, 0.8])\n        sphere(r = 15, center = true);\n    \n    // Head\n    translate([20, 0, 5])\n        scale([1.2, 0.9, 0.9])\n            sphere(r = 10, center = true);\n    \n    // Snout\n    translate([32, 0, 3])\n        scale([1.5, 0.7, 0.7])\n            sphere(r = 6, center = true);\n    \n    // Ears (rounded triangles)\n    for(side = [-1, 1]) {\n        translate([18, side * 8, 12]) {\n            rotate([0, side * 15, 0])\n                scale([0.5, 1, 1.2])\n                    cylinder(h = 6, r1 = 4, r2 = 2, center = true);\n        }\n    }\n    \n    // Eyes\n    for(side = [-1, 1]) {\n        translate([28, side * 6, 8]) {\n            difference() {\n                sphere(r = 2.5, center = true);\n                translate([1, 0, 0])\n                    sphere(r = 1.5, center = true);\n            }\n        }\n    }\n    \n    // Whiskers\n    for(side = [-1, 1]) {\n        for(i = [-2:2]) {\n            translate([36, side * (4 + i * 1.5), 3]) {\n                rotate([0, 0, side * (-20 + i * 15)])\n                    scale([1, 0.1, 0.1])\n                        cylinder(h = 8, r = 1, center = true);\n            }\n        }\n    }\n    \n    // Legs\n    for(side = [-1, 1]) {\n        // Front legs\n        translate([10, side * 12, -8]) {\n            rotate([10, 0, side * 10])\n                scale([0.3, 0.3, 1])\n                    cylinder(h = 18, r = 6, center = true);\n        }\n        \n        // Rear legs\n        translate([-15, side * 10, -6]) {\n            rotate([10, 0, side * -15])\n                scale([0.4, 0.4, 1.2])\n                    cylinder(h = 20, r = 7, center = true);\n        }\n        \n        // Webbed feet\n        translate([10, side * 15, -16]) {\n            scale([1.5, 2, 0.4])\n                sphere(r = 4, center = true);\n            \n            // Toes\n            for(toe = [-1, 0, 1]) {\n                translate([toe * 3, side * 4, 0])\n                    scale([0.6, 0.3, 0.2])\n                        cylinder(h = 6, r = 2, center = true);\n            }\n        }\n        \n        translate([-15, side * 13, -16]) {\n            scale([1.8, 2.2, 0.4])\n                sphere(r = 5, center = true);\n            \n            for(toe = [-1, 0, 1]) {\n                translate([toe * 3.5, side * 5, 0])\n                    scale([0.7, 0.3, 0.2])\n                        cylinder(h = 7, r = 2.5, center = true);\n            }\n        }\n    }\n    \n    // Tail (thick and rounded)\n    translate([-25, 0, -3]) {\n        rotate([0, -20, 0])\n            scale([1, 1, 0.6])\n                cylinder(h = 30, r1 = 8, r2 = 5, center = true);\n    }\n    \n    // Fur texture - small raised bumps\n    for(i = [0:10]) {\n        for(j = [0:5]) {\n            a = i * 36;\n            h = j * 3 - 7.5;\n            translate([sin(a) * (12 + j * 2), cos(a) * (12 + j * 2), h]) {\n                sphere(r = 1, center = true);\n            }\n        }\n    }\n}\n\n// Generate the model\nnutria();",
    "renders": true
  },
  {
    "animal": "nyala",
    "openscad_code": "// Nyala 3D model - medium complexity realistic style\n// Size: 80mm length, 40mm height, 20mm width\n\n$fn = 32;\n\nmodule body() {\n    difference() {\n        union() {\n            // Main torso\n            translate([0, 0, 15])\n                scale([1.2, 0.6, 0.8])\n                sphere(15);\n            \n            // Abdomen\n            translate([-15, 0, 10])\n                scale([1.5, 0.7, 0.6])\n                sphere(10);\n            \n            // Chest\n            translate([15, 0, 18])\n                scale([1.3, 0.8, 0.9])\n                sphere(12);\n        }\n        \n        // Remove bottom for flat base\n        translate([0, 0, -5])\n            cube([100, 100, 10]);\n    }\n}\n\nmodule head() {\n    translate([30, 0, 25]) {\n        rotate([0, -10, 0]) {\n            // Skull\n            scale([1, 0.6, 0.8])\n                sphere(8);\n            \n            // Muzzle\n            translate([8, 0, -2])\n                scale([1.2, 0.7, 0.6])\n                sphere(6);\n            \n            // Eyes\n            translate([8, -3, 2])\n                sphere(1.5);\n            translate([8, 3, 2])\n                sphere(1.5);\n            \n            // Ears\n            translate([0, -4, 5])\n                rotate([0, -20, 0])\n                cylinder(6, 2, 1);\n            translate([0, 4, 5])\n                rotate([0, -20, 0])\n                cylinder(6, 2, 1);\n        }\n    }\n}\n\nmodule legs() {\n    // Front legs\n    for(side = [-1, 1]) {\n        // Upper leg\n        translate([15, side * 8, 15])\n            rotate([0, side * 10, 0])\n            cylinder(15, 3, 2.5);\n        \n        // Lower leg\n        translate([15, side * 9, 0])\n            cylinder(12, 2.5, 2);\n        \n        // Hoof\n        translate([15, side * 9, -2])\n            cylinder(3, 2.2, 2);\n    }\n    \n    // Rear legs\n    for(side = [-1, 1]) {\n        // Upper leg\n        translate([-15, side * 7, 12])\n            rotate([0, side * -15, 0])\n            cylinder(12, 3.5, 3);\n        \n        // Lower leg\n        translate([-15, side * 7.5, 0])\n            cylinder(10, 3, 2.5);\n        \n        // Hoof\n        translate([-15, side * 7.5, -2])\n            cylinder(3, 2.7, 2.5);\n    }\n}\n\nmodule neck() {\n    translate([15, 0, 20]) {\n        rotate([0, 30, 0])\n            cylinder(15, 4, 3);\n    }\n}\n\nmodule tail() {\n    translate([-25, 0, 15]) {\n        rotate([30, 0, 0])\n            cylinder(15, 2, 1);\n    }\n}\n\nmodule stripes() {\n    // White stripes on torso\n    for(i = [1, 3, 5, 7, 9]) {\n        translate([20 - i * 3, 0, 18])\n            scale([0.8, 0.3, 0.05])\n            sphere(8);\n    }\n    \n    for(i = [2, 4, 6, 8]) {\n        translate([20 - i * 3, 0, 15])\n            scale([0.8, 0.3, 0.05])\n            sphere(8);\n    }\n    \n    // White stripes on legs\n    for(side = [-1, 1]) {\n        translate([15, side * 8.5, 8])\n            rotate([0, 90, 0])\n            cylinder(3, 1, 1);\n        \n        translate([-15, side * 7, 7])\n            rotate([0, 90, 0])\n            cylinder(3, 1.5, 1.5);\n    }\n}\n\n// Main assembly\nunion() {\n    body();\n    neck();\n    head();\n    legs();\n    tail();\n    stripes();\n}",
    "renders": true
  },
  {
    "animal": "oarfish",
    "openscad_code": "// OpenSCAD Oarfish Model (Medium Complexity)\n// Realistic style, 3D printable\n\n// Overall dimensions\nlength = 100;\nheight = 20;\nthickness = 8;\n\n// Body parameters\nsegments = 12;\nbody_taper = 0.3;\n\n// Head parameters\nhead_length = 15;\nhead_height = 12;\nhead_width = 10;\n\n// Dorsal fin parameters\nfin_height = 8;\nfin_base_width = 3;\nfin_segments = 20;\n\n// Eye parameters\neye_radius = 1.5;\neye_offset = 5;\n\n// Mouth parameters\nmouth_width = 4;\nmouth_height = 2;\n\n// Color definitions\nbody_color = \"silver\";\nfin_color = \"red\";\n\n// Main body module\nmodule oarfish_body() {\n    union() {\n        // Head\n        translate([-length/2, 0, 0])\n        scale([1.2, 1, 0.8])\n        sphere(r=head_height/2);\n        \n        // Main body segments\n        for(i = [0:segments-1]) {\n            t = i / (segments - 1);\n            x = -length/2 + head_length + t * (length - head_length);\n            y_scale = 1 - t * (1 - body_taper);\n            z_scale = 1 - t * (1 - body_taper);\n            \n            translate([x, 0, 0])\n            scale([1, y_scale, z_scale])\n            sphere(r=height/2, $fn=16);\n        }\n        \n        // Tail taper\n        translate([length/2 - 5, 0, 0])\n        scale([0.5, body_taper, body_taper])\n        sphere(r=height/2, $fn=16);\n    }\n}\n\n// Dorsal fin module\nmodule dorsal_fin() {\n    color(fin_color)\n    for(i = [0:fin_segments-1]) {\n        t = i / (fin_segments - 1);\n        x = -length/2 + head_length + t * (length - head_length - 5);\n        height_scale = sin(t * 180) * 0.8 + 0.2;\n        \n        if(i % 2 == 0) {\n            translate([x, 0, height/2])\n            rotate([0, 0, 90])\n            scale([height_scale, 1, 1])\n            cylinder(h=fin_height * height_scale, r1=fin_base_width/2, r2=0.5, $fn=8);\n        }\n    }\n}\n\n// Eye module\nmodule eye() {\n    color(\"black\")\n    translate([-length/2 + head_length/2, head_height/2 - eye_offset, head_width/2 - 1])\n    sphere(r=eye_radius, $fn=16);\n    \n    mirror([0, 1, 0])\n    translate([-length/2 + head_length/2, head_height/2 - eye_offset, head_width/2 - 1])\n    sphere(r=eye_radius, $fn=16);\n}\n\n// Mouth module\nmodule mouth() {\n    color(\"darkred\")\n    translate([-length/2 + head_length/2 - 2, 0, -head_height/2 + 2])\n    scale([1, mouth_width/2, mouth_height/2])\n    sphere(r=1, $fn=16);\n}\n\n// Pectoral fins\nmodule pectoral_fins() {\n    color(fin_color)\n    translate([-length/2 + head_length + 5, 0, -height/2])\n    rotate([0, 90, -30])\n    scale([1, 0.7, 0.3])\n    cylinder(h=10, r1=3, r2=1, $fn=8);\n    \n    mirror([0, 1, 0])\n    translate([-length/2 + head_length + 5, 0, -height/2])\n    rotate([0, 90, 30])\n    scale([1, 0.7, 0.3])\n    cylinder(h=10, r1=3, r2=1, $fn=8);\n}\n\n// Pelvic fin\nmodule pelvic_fin() {\n    color(fin_color)\n    translate([0, 0, -height/2])\n    rotate([0, 90, 0])\n    scale([1, 0.5, 0.2])\n    cylinder(h=8, r1=2, r2=0.5, $fn=8);\n}\n\n// Tail fin\nmodule tail_fin() {\n    color(fin_color)\n    translate([length/2 - 3, 0, 0])\n    rotate([0, 90, 0])\n    union() {\n        scale([1, 0.7, 0.3])\n        cylinder(h=12, r1=4, r2=0.5, $fn=8);\n        \n        rotate([0, 0, 45])\n        scale([1, 0.5, 0.2])\n        cylinder(h=8, r1=3, r2=0.5, $fn=8);\n        \n        rotate([0, 0, -45])\n        scale([1, 0.5, 0.2])\n        cylinder(h=8, r1=3, r2=0.5, $fn=8);\n    }\n}\n\n// Main assembly\nunion() {\n    color(body_color)\n    oarfish_body();\n    \n    dorsal_fin();\n    eye();\n    mouth();\n    pectoral_fins();\n    pelvic_fin();\n    tail_fin();\n}",
    "renders": true
  },
  {
    "animal": "ocelot",
    "openscad_code": "// Medium-complexity realistic Ocelot – 3D-printable, ~70 mm long\n// All parts are oriented for minimum overhangs; 2 mm wall thickness used for legs/tail\n\n$fn = 36;\n\nmodule body() {\n    // Main torso – 45 mm long\n    hull() {\n        translate([-20,0,0]) sphere(d=18, center=true);\n        translate([25,0,0]) sphere(d=14, center=true);\n    }\n}\n\nmodule head() {\n    // 20 mm wide head with snout\n    union() {\n        // skull\n        translate([28,0,6]) sphere(d=18, center=true);\n        // snout\n        translate([38,0,3]) rotate([0,-15,0])\n            scale([1.2,0.8,0.7])\n            sphere(d=12, center=true);\n        // ears (triangular cylinders)\n        for(y=[-6,6])\n            translate([28,y,15]) rotate([0,y*2,0])\n                cylinder(h=10, d1=8, d2=4, center=false);\n    }\n}\n\nmodule leg(h=14, r=5) {\n    // Simple leg cylinder with slight taper to avoid overhang\n    cylinder(h=h, d1=r*2, d2=r*2.2, center=false);\n    // Paws – flat cylinders\n    translate([0,0,h]) cylinder(h=2, d=r*2.4, center=false);\n}\n\nmodule legs() {\n    // Front legs\n    for(x=[20,28], y=[-8,8])\n        translate([x,y,-7]) leg();\n    // Rear legs\n    for(x=[-8,-16], y=[-7,7])\n        translate([x,y,-7]) leg();\n}\n\nmodule tail() {\n    // Curved tail using hull of spheres\n    for(i=[0:5])\n        translate([-20-i*6,0,3+sin(i*30)*6]) sphere(d=10-i, center=true);\n}\n\nmodule ocelot() {\n    union() {\n        body();\n        head();\n        legs();\n        tail();\n    }\n}\n\nmodule spots() {\n    // Simple raised spots on back\n    for(i=[-10:10:30], j=[-6:6:6])\n        translate([i,j,10]) sphere(d=2.2, center=true);\n}\n\n// Final assembly\nscale(0.9)\nunion() {\n    ocelot();\n    spots();\n}",
    "renders": true
  },
  {
    "animal": "octopus",
    "openscad_code": "// Realistic Octopus - Medium Complexity\n// Approx 60mm wide, 40mm tall\n\n$fn = 24;\n\n// Main body module\nmodule octopus() {\n    union() {\n        // Central body (mantle)\n        translate([0, 0, 20]) {\n            scale([1.2, 1, 0.8]) {\n                sphere(d = 25);\n            }\n        }\n        \n        // Underside of mantle\n        translate([0, 0, 10]) {\n            difference() {\n                sphere(d = 22);\n                translate([0, 0, -12]) cube([30, 30, 20], center = true);\n            }\n        }\n        \n        // Eye sockets\n        for (x = [-1, 1]) {\n            translate([x * 8, 10, 22]) {\n                rotate([0, 90, 0]) {\n                    cylinder(h = 5, d1 = 8, d2 = 6);\n                }\n            }\n        }\n        \n        // Eyes\n        for (x = [-1, 1]) {\n            translate([x * 8, 14, 22]) {\n                sphere(d = 4);\n            }\n        }\n        \n        // Arms (8 tentacles)\n        for (i = [0:7]) {\n            rotate([0, 0, i * 45]) {\n                translate([0, 12, 15]) {\n                    tentacle(i);\n                }\n            }\n        }\n        \n        // Siphon\n        translate([0, -8, 18]) {\n            rotate([45, 0, 0]) {\n                cylinder(h = 8, d1 = 6, d2 = 4);\n            }\n        }\n    }\n}\n\n// Tentacle module with suckers\nmodule tentacle(index) {\n    // Base segment\n    translate([0, 0, -5]) {\n        cylinder(h = 15, d1 = 8, d2 = 6);\n    }\n    \n    // Segments with decreasing size\n    for (seg = [0:5]) {\n        len = 15 - seg * 2;\n        dia = 6 - seg * 0.8;\n        \n        translate([0, len * seg, -5 - seg * 2]) {\n            rotate([5 * seg, 0, 0]) {\n                cylinder(h = len, d1 = max(dia, 2), d2 = max(dia - 0.8, 1.5));\n                \n                // Add suckers on inner curve\n                for (s = [1:3]) {\n                    if (seg < 4) {\n                        translate([0, s * len/4, -1]) {\n                            rotate([90, 0, 0]) {\n                                cylinder(h = 1 + seg * 0.2, d = 1.5 + seg * 0.2);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Final tip\n    translate([0, 90, -18]) {\n        sphere(d = 2);\n    }\n}\n\n// Render the octopus\noctopus();",
    "renders": true
  },
  {
    "animal": "okapi",
    "openscad_code": "// Okapi - Realistic style, medium complexity\n// All dimensions in mm, printable at 100 mm height\n\n$fn=32;\n\n// Overall scale\nscale_factor = 100/120;\n\n// Main assembly\nscale([scale_factor,scale_factor,scale_factor]) {\n\n    // Body\n    union() {\n        // Torso\n        translate([0,0,45]) {\n            scale([1.2,0.7,0.7]) sphere(r=30);\n        }\n        \n        // Neck base\n        translate([40,0,65]) {\n            rotate([0,-15,0]) \n            scale([0.8,0.6,1.5]) cylinder(r1=15,r2=8,h=40);\n        }\n    }\n\n    // Head\n    module head() {\n        translate([70,0,75]) {\n            rotate([0,-15,0]) {\n                // Skull\n                scale([1.3,0.7,0.8]) sphere(r=15);\n                \n                // Muzzle\n                translate([15,0,-5]) {\n                    rotate([0,-10,0]) \n                    scale([1.2,0.5,0.5]) cylinder(r=8,h=15);\n                }\n                \n                // Ears\n                translate([-5,10,8]) {\n                    rotate([0,0,-20]) \n                    scale([0.3,0.1,0.8]) cylinder(r=8,h=15);\n                }\n                translate([-5,-10,8]) {\n                    rotate([0,0,20]) \n                    scale([0.3,0.1,0.8]) cylinder(r=8,h=15);\n                }\n                \n                // Horns\n                translate([5,4,12]) cylinder(r1=2,r2=0.5,h=8);\n                translate([5,-4,12]) cylinder(r1=2,r2=0.5,h=8);\n            }\n        }\n    }\n    head();\n\n    // Legs\n    module leg(x,y,z,angle) {\n        translate([x,y,z]) {\n            rotate([angle,0,0]) {\n                // Upper leg\n                cylinder(r1=8,r2=6,h=40);\n                \n                // Lower leg\n                translate([0,0,40]) {\n                    rotate([5,0,0]) \n                    cylinder(r1=6,r2=4,h=35);\n                }\n                \n                // Hoof\n                translate([0,0,75]) {\n                    scale([1.2,1,0.6]) \n                    cylinder(r=4,h=8);\n                }\n            }\n        }\n    }\n\n    // Front legs\n    leg(30,15,30,-20);\n    leg(30,-15,30,-20);\n    \n    // Rear legs\n    leg(-30,15,30,-20);\n    leg(-30,-15,30,-20);\n\n    // Tail\n    translate([-40,0,55]) {\n        rotate([0,0,30]) {\n            scale([0.4,0.4,1]) cylinder(r=5,h=30);\n        }\n    }\n\n    // Stripes on legs\n    module stripes() {\n        for(i=[1:3]) {\n            // Front left\n            translate([30,15,45-i*8]) {\n                rotate([90,0,0]) \n                difference() {\n                    cylinder(r=8.5,h=5);\n                    cylinder(r=7.5,h=5.1);\n                }\n            }\n            \n            // Front right\n            translate([30,-15,45-i*8]) {\n                rotate([90,0,0]) \n                difference() {\n                    cylinder(r=8.5,h=5);\n                    cylinder(r=7.5,h=5.1);\n                }\n            }\n        }\n    }\n    stripes();\n\n    // Hindquarters\n    translate([-35,0,45]) {\n        scale([1,0.9,0.8]) sphere(r=25);\n    }\n}",
    "renders": true
  },
  {
    "animal": "olive",
    "openscad_code": "// Realistic Olive Model - Medium Complexity\n// 3D printable olive with pit and surface details\n\n// Main parameters\nolive_length = 40;\nolive_width = 28;\nstem_length = 8;\nstem_width = 3;\nwall_thickness = 2;\nsurface_detail = 0.4;\n\n// Create the olive body\nmodule olive_body() {\n    difference() {\n        // Main olive shape - ellipsoid\n        scale([1, 0.7, 0.9])\n        sphere(olive_width/2, $fn=64);\n        \n        // Subtle indentations for realistic surface\n        for (i = [0:7]) {\n            rotate([0, 0, i * 45])\n            translate([olive_width/2 - 2, 0, 0])\n            scale([1, 0.8, 0.5])\n            sphere(surface_detail * 3, $fn=16);\n        }\n        \n        // Hollow out the interior\n        scale([1, 0.7, 0.9])\n        sphere(olive_width/2 - wall_thickness, $fn=64);\n    }\n}\n\n// Create the olive pit\nmodule olive_pit() {\n    difference() {\n        // Main pit shape\n        scale([0.8, 0.6, 0.75])\n        sphere(olive_width/2 - wall_thickness - 2, $fn=32);\n        \n        // Add texture to pit\n        for (i = [0:11]) {\n            rotate([0, 0, i * 30])\n            translate([olive_width/3 - 3, 0, 0])\n            scale([0.5, 0.3, 0.3])\n            sphere(1.5, $fn=8);\n        }\n    }\n}\n\n// Create the stem\nmodule olive_stem() {\n    union() {\n        // Main stem\n        translate([0, 0, olive_width/2 * 0.9])\n        rotate([90, 0, 0])\n        cylinder(h=stem_length, r=stem_width/2, $fn=16);\n        \n        // Stem tip\n        translate([0, 0, olive_width/2 * 0.9 + stem_length])\n        rotate([90, 0, 0])\n        cylinder(h=3, r1=stem_width/2, r2=0, $fn=16);\n    }\n}\n\n// Small bumps on olive surface\nmodule surface_bumps() {\n    for (i = [0:20]) {\n        rotate([0, i * 137.5, i * 73.5])\n        translate([olive_width/2 - 1.5, 0, 0])\n        sphere(surface_detail, $fn=8);\n    }\n}\n\n// Assembly of the complete olive\nunion() {\n    // Olive body\n    olive_body();\n    \n    // Olive pit inside\n    translate([0, 0, -2])\n    olive_pit();\n    \n    // Stem\n    olive_stem();\n    \n    // Surface details\n    surface_bumps();\n}",
    "renders": true
  },
  {
    "animal": "opah",
    "openscad_code": "// Opah (Lampris guttatus) - Realistic medium-complexity model\n// 3D printable, ~75 mm length, minimal overhangs\n\n$fn = 32;\nbody_length = 75;\nbody_height = 35;\nbody_width = 12;\n\nmodule opah_body() {\n    // Main oval body\n    union() {\n        // Central torso\n        translate([0, 0, 0])\n            scale([1, 0.6, 0.4])\n            sphere(d = body_length * 0.7);\n\n        // Tail extension\n        translate([-body_length * 0.45, 0, 0])\n            rotate([0, 0, 0])\n            scale([0.5, 0.3, 0.15])\n            sphere(d = body_length * 0.5);\n\n        // Head dome\n        translate([body_length * 0.3, 0, body_height * 0.1])\n            scale([0.7, 0.6, 0.5])\n            sphere(d = body_length * 0.4);\n    }\n}\n\nmodule opah_fins() {\n    // Dorsal fin - tall and curved\n    translate([0, 0, body_height * 0.3])\n        rotate([90, 0, 0])\n        linear_extrude(height = body_width * 0.3)\n        polygon(points = [\n            [0, 0],\n            [-body_length * 0.1, body_height * 0.3],\n            [-body_length * 0.2, body_height * 0.35],\n            [-body_length * 0.3, body_height * 0.3],\n            [-body_length * 0.4, body_height * 0.15]\n        ]);\n\n    // Pectoral fins - wing-like\n    for (side = [-1, 1]) {\n        translate([body_length * 0.2, side * body_width * 0.7, -body_height * 0.1])\n            rotate([0, -20 * side, 20 * side])\n            scale([1, 0.2, 0.05])\n            sphere(d = body_length * 0.3);\n    }\n\n    // Pelvic fins\n    for (side = [-1, 1]) {\n        translate([-body_length * 0.1, side * body_width * 0.6, -body_height * 0.2])\n            rotate([0, 30, 0])\n            scale([0.3, 0.1, 0.02])\n            sphere(d = body_length * 0.2);\n    }\n\n    // Caudal fin - crescent shape\n    translate([-body_length * 0.5, 0, 0])\n        rotate([0, 90, 0])\n        scale([1, 0.3, 0.05])\n        sphere(d = body_length * 0.4);\n}\n\nmodule opah_eyes() {\n    for (side = [-1, 1]) {\n        // Eye socket\n        translate([body_length * 0.35, side * body_width * 0.25, body_height * 0.15])\n            sphere(d = 4);\n\n        // Eye ball\n        translate([body_length * 0.36, side * body_width * 0.26, body_height * 0.15])\n            sphere(d = 2.5);\n\n        // Pupil\n        translate([body_length * 0.37, side * body_width * 0.27, body_height * 0.15])\n            sphere(d = 1);\n    }\n}\n\nmodule opah_mouth() {\n    // Mouth cavity\n    translate([body_length * 0.4, 0, -body_height * 0.1])\n        rotate([0, 0, 0])\n        scale([0.3, 0.4, 0.1])\n        sphere(d = body_length * 0.2);\n}\n\nmodule opah_details() {\n    // Scale texture using small spheres\n    for (i = [-3:3]) {\n        for (j = [-2:2]) {\n            if (i*i + j*j < 9) {\n                translate([i * 6, j * 5, body_height * 0.4])\n                    sphere(d = 2);\n            }\n        }\n    }\n\n    // Lateral line\n    hull() {\n        translate([body_length * 0.3, 0, 0])\n            sphere(d = 1.5);\n        translate([-body_length * 0.4, 0, 0])\n            sphere(d = 1.5);\n    }\n}\n\n// Main assembly\nunion() {\n    // Body with wall thickness for printing\n    difference() {\n        opah_body();\n        scale([0.9, 0.9, 0.9])\n            opah_body();\n    }\n\n    // Fins\n    opah_fins();\n\n    // Eyes\n    opah_eyes();\n\n    // Mouth cavity\n    difference() {\n        opah_body();\n        opah_mouth();\n    }\n\n    // Surface details\n    opah_details();\n}",
    "renders": true
  },
  {
    "animal": "opossum",
    "openscad_code": "// Realistic Opossum - Medium Complexity\n// Size: ~80mm long, printable without supports\n\n// Overall dimensions\nbody_length = 70;\nbody_height = 30;\nbody_width = 25;\n\n// Head dimensions\nhead_length = 25;\nhead_height = 20;\nhead_width = 20;\n\n$fn = 32;\n\n// Main assembly\nunion() {\n    // Body\n    translate([0, 0, body_height/2])\n        scale([1, 0.8, 0.6])\n        sphere(d=body_width);\n    \n    // Torso elongation\n    translate([-body_length/4, 0, body_height/3])\n        scale([1.5, 1, 0.8])\n        sphere(d=body_width);\n    \n    // Head\n    translate([body_length/2 + 5, 0, body_height/2 + 5])\n        rotate([0, -10, 0])\n        union() {\n            // Main head sphere\n            scale([1.2, 1, 1])\n            sphere(d=head_width);\n            \n            // Snout\n            translate([head_length/2, 0, -head_height/4])\n                scale([0.8, 0.6, 0.6])\n                sphere(d=head_width/2);\n                \n            // Ears\n            for(side = [-1, 1]) {\n                translate([head_length/4, side*head_width/2, head_height/2])\n                    rotate([0, 30*side, 0])\n                    scale([0.5, 0.3, 1])\n                    cylinder(h=head_height/2, d1=head_width/3, d2=head_width/4);\n            }\n            \n            // Eyes\n            for(side = [-1, 1]) {\n                translate([head_length/2 - 3, side*head_width/3, head_height/4])\n                    sphere(d=3);\n                translate([head_length/2 - 3, side*head_width/3, head_height/4])\n                    sphere(d=1.5);\n            }\n            \n            // Nose\n            translate([head_length/2 + 5, 0, -head_height/4])\n                sphere(d=2);\n        }\n    \n    // Limbs\n    module limb(length, diameter) {\n        union() {\n            cylinder(h=length, d=diameter);\n            translate([0, 0, length])\n                sphere(d=diameter);\n        }\n    }\n    \n    // Front legs\n    for(side = [-1, 1]) {\n        translate([body_length/4, side*body_width/2, 0])\n            rotate([0, side*15, 0])\n            limb(20, 6);\n    }\n    \n    // Rear legs\n    for(side = [-1, 1]) {\n        translate([-body_length/3, side*body_width/2, 0])\n            rotate([0, side*15, -10])\n            limb(25, 8);\n    }\n    \n    // Tail\n    translate([-body_length/2 - 10, 0, body_height/3])\n        rotate([0, -30, 0])\n        scale([1, 1, 0.4])\n        cylinder(h=40, d1=8, d2=4);\n        \n    // Whiskers\n    for(i = [0:2]) {\n        for(side = [-1, 1]) {\n            translate([body_length/2 + 10, side*2, 8 - i*2])\n                rotate([0, 90, side*15*(i+1)])\n                cylinder(h=10, d=0.5);\n        }\n    }\n    \n    // Fur texture with bumps\n    for(i = [0:10]) {\n        for(j = [0:5]) {\n            translate([\n                body_length/2 - i*body_length/10 + rand(-2,2),\n                rand(-body_width/2, body_width/2),\n                rand(body_height/4, body_height*3/4)\n            ])\n                sphere(d=1.5);\n        }\n    }\n}\n\n// Helper for random values within range\nfunction rand(min, max) = min + (max - min) * (i*13 % 100) / 100;",
    "renders": true
  },
  {
    "animal": "orangutan",
    "openscad_code": "// Realistic Orangutan - Medium Complexity\n// 3D printable orangutan model using basic OpenSCAD primitives\n\n// Overall dimensions: ~80mm tall, ~60mm wide\n\nmodule orangutan() {\n    // Main body assembly\n    union() {\n        // Torso\n        color(\"chocolate\") torso();\n        \n        // Head\n        translate([0, 0, 35]) head();\n        \n        // Arms\n        translate([-20, 0, 25]) left_arm();\n        mirror([1, 0, 0]) translate([-20, 0, 25]) right_arm();\n        \n        // Legs\n        translate([-8, 0, -15]) left_leg();\n        mirror([1, 0, 0]) translate([-8, 0, -15]) right_leg();\n    }\n}\n\nmodule torso() {\n    // Main torso body\n    difference() {\n        // Main body shape\n        union() {\n            // Chest\n            scale([1.2, 0.8, 1.5]) sphere(d=20, $fn=32);\n            // Belly\n            translate([0, 2, -8]) cylinder(h=15, d1=20, d2=15, $fn=32);\n        }\n        \n        // Neck hole\n        translate([0, 0, 12]) cylinder(h=10, d=10, $fn=24);\n    }\n}\n\nmodule head() {\n    // Head assembly\n    union() {\n        // Main head shape\n        color(\"peru\") difference() {\n            sphere(d=25, $fn=32);\n            \n            // Face area\n            translate([0, 12, 0]) sphere(d=20, $fn=32);\n        }\n        \n        // Muzzle\n        color(\"saddlebrown\") translate([0, 11, -2]) scale([1.2, 1, 0.8]) sphere(d=12, $fn=24);\n        \n        // Eyes\n        translate([-5, 10, 3]) eye();\n        mirror([1, 0, 0]) translate([-5, 10, 3]) eye();\n        \n        // Eyebrow ridges\n        color(\"saddlebrown\") {\n            translate([-8, 8, 6]) cube([6, 3, 2]);\n            mirror([1, 0, 0]) translate([-8, 8, 6]) cube([6, 3, 2]);\n        }\n        \n        // Ears\n        translate([-12, 0, 0]) ear();\n        mirror([1, 0, 0]) translate([-12, 0, 0]) ear();\n    }\n}\n\nmodule eye() {\n    // Eye detail\n    color(\"black\") sphere(d=3, $fn=16);\n    translate([0, 0, 1]) color(\"white\") sphere(d=1.5, $fn=16);\n}\n\nmodule ear() {\n    // Simplified ear shape\n    rotate([0, 0, -15]) scale([0.6, 0.3, 1]) sphere(d=8, $fn=16);\n}\n\nmodule left_arm() {\n    // Arm assembly\n    union() {\n        // Upper arm\n        rotate([0, 0, 20]) {\n            color(\"chocolate\") cylinder(h=18, d1=8, d2=7, $fn=16);\n            \n            // Elbow\n            translate([0, 0, 18]) sphere(d=7, $fn=16);\n            \n            // Forearm\n            translate([0, 0, 18]) rotate([0, 0, 15]) \n                color(\"peru\") cylinder(h=15, d1=7, d2=6, $fn=16);\n                \n            // Hand\n            translate([0, 0, 33]) rotate([0, 0, 10]) {\n                color(\"saddlebrown\") scale([1.2, 0.8, 0.5]) sphere(d=10, $fn=16);\n                \n                // Fingers (simplified)\n                translate([3, 0, 0]) finger();\n                translate([0, 0, 0]) finger();\n                translate([-3, 0, 0]) finger();\n            }\n        }\n    }\n}\n\nmodule finger() {\n    // Simplified finger\n    scale([0.3, 0.3, 1]) cylinder(h=4, d=3, $fn=8);\n}\n\nmodule left_leg() {\n    // Leg assembly\n    union() {\n        // Upper leg\n        rotate([0, 0, -10]) {\n            color(\"chocolate\") cylinder(h=20, d1=9, d2=8, $fn=16);\n            \n            // Knee\n            translate([0, 0, 20]) sphere(d=8, $fn=16);\n            \n            // Lower leg\n            translate([0, 0, 20]) rotate([0, 0, -5]) \n                color(\"peru\") cylinder(h=18, d1=8, d2=7, $fn=16);\n                \n            // Foot\n            translate([0, 0, 38]) {\n                color(\"saddlebrown\") scale([1.5, 0.7, 0.4]) sphere(d=12, $fn=16);\n                \n                // Toes (simplified)\n                translate([4, 0, 0]) toe();\n                translate([0, 0, 0]) toe();\n                translate([-4, 0, 0]) toe();\n            }\n        }\n    }\n}\n\nmodule toe() {\n    // Simplified toe\n    scale([0.4, 0.3, 0.8]) cylinder(h=3, d=2.5, $fn=8);\n}\n\n// Generate the orangutan\norangutan();\n\n// Add a base for stability\ntranslate([0, 0, -25]) color(\"darkgreen\") \n    cylinder(h=3, d1=50, d2=45, $fn=32);",
    "renders": true
  },
  {
    "animal": "orca",
    "openscad_code": "module orca() {\n    // Overall scale - final model ~80mm long\n    scale([1,1,1]) {\n\n        // Main body - elongated ellipsoid\n        color(\"black\")\n        difference() {\n            scale([1.6,0.8,0.7])\n                sphere(r=25, $fn=64);\n            // Flatten bottom slightly for better printing\n            translate([0,0,-17.5])\n                cube([60,40,5], center=true);\n        }\n\n        // White belly patch\n        color(\"white\")\n        translate([0,-2,-15])\n            rotate([0,10,0])\n            scale([1.7,0.7,0.3])\n            sphere(r=23, $fn=48);\n\n        // Head section\n        color(\"black\")\n        translate([30,0,0])\n            scale([1.2,1,0.9])\n            sphere(r=20, $fn=48);\n\n        // White eye patch\n        color(\"white\")\n        translate([20,17,5])\n            rotate([0,10,-5])\n            scale([0.8,0.6,0.5])\n            sphere(r=8, $fn=32);\n\n        // Eye\n        color(\"black\")\n        translate([22,19,7])\n            sphere(r=2, $fn=16);\n\n        // Dorsal fin\n        color(\"black\")\n        translate([-20,0,15])\n            rotate([0,-10,0])\n            linear_extrude(height=0.1)\n                polygon(points=[\n                    [0,0],\n                    [-15,25],\n                    [-5,25],\n                    [-2,0]\n                ]);\n\n        // Pectoral fins\n        module pectoral_fin(side) {\n            translate([10,side*20,-12])\n                rotate([0,0,side*10])\n                scale([1,0.3,0.2])\n                sphere(r=12, $fn=24);\n        }\n        \n        pectoral_fin(1);\n        pectoral_fin(-1);\n\n        // Tail flukes\n        module tail_fluke(angle) {\n            translate([-38,0,-5])\n                rotate([0,0,angle])\n                linear_extrude(height=3)\n                    polygon(points=[\n                        [0,0],\n                        [-20,0],\n                        [-25,5],\n                        [-15,8],\n                        [0,5]\n                    ]);\n        }\n        \n        tail_fluke(25);\n        tail_fluke(-25);\n\n        // Saddle patch (gray area behind dorsal fin)\n        color([0.3,0.3,0.3])\n        translate([-10,0,10])\n            rotate([0,15,0])\n            scale([1.2,1,0.5])\n            sphere(r=15, $fn=32);\n\n        // Mouth line\n        color(\"darkgray\")\n        translate([25,0,-8])\n            rotate([0,15,0])\n            scale([0.5,0.2,0.05])\n            sphere(r=20, $fn=32);\n    }\n}\n\n// Generate the model\norca();",
    "renders": true
  },
  {
    "animal": "oriole",
    "openscad_code": "// Baltimore Oriole - Medium complexity realistic style\n// Bird dimensions: ~80mm length, ~35mm height\n\n// Base module for rounded body parts\nmodule rounded_body(width, height, depth) {\n    hull() {\n        translate([0, -depth/2, 0]) sphere(d=height*0.8, $fn=20);\n        translate([0, depth/2, 0]) sphere(d=height*0.8, $fn=20);\n    }\n    scale([1, 1, 0.9]) sphere(d=width, $fn=20);\n}\n\n// Main body\nmodule body() {\n    color(\"orange\") \n    difference() {\n        union() {\n            // Main torso\n            scale([1.2, 1, 0.8]) rounded_body(30, 25, 20);\n            \n            // Tail\n            translate([-22, 0, -5]) \n                rotate([10, 0, 0])\n                scale([1, 0.3, 0.1]) \n                cylinder(h=20, d1=15, d2=8, $fn=8);\n        }\n        \n        // Wing cutouts\n        translate([5, 12, 0]) rotate([0, 0, -30]) \n            scale([1, 0.2, 0.8]) cube([15, 20, 10], center=true);\n        translate([5, -12, 0]) rotate([0, 0, 30]) \n            scale([1, 0.2, 0.8]) cube([15, 20, 10], center=true);\n    }\n}\n\n// Head with beak\nmodule head() {\n    translate([20, 0, 8]) {\n        // Head sphere\n        color(\"black\") sphere(d=12, $fn=20);\n        \n        // Beak\n        color(\"black\") \n        translate([6, 0, -2]) rotate([0, -20, 0])\n            cylinder(h=10, d1=4, d2=0.5, $fn=8);\n            \n        // Eye\n        color(\"white\") translate([4, 4, 2]) sphere(d=2, $fn=8);\n    }\n}\n\n// Wing detail\nmodule wing() {\n    color(\"black\") \n    translate([2, 12, 2]) rotate([0, 0, -30]) {\n        hull() {\n            sphere(d=8, $fn=12);\n            translate([10, 0, 0]) sphere(d=5, $fn=12);\n        }\n    }\n    \n    mirror([0, 1, 0]) \n    translate([2, 12, 2]) rotate([0, 0, -30]) {\n        hull() {\n            sphere(d=8, $fn=12);\n            translate([10, 0, 0]) sphere(d=5, $fn=12);\n        }\n    }\n}\n\n// Legs and feet\nmodule legs() {\n    color(\"gray\") \n    for(side = [-1, 1]) {\n        translate([12, side*8, -8]) {\n            // Leg\n            cylinder(h=12, d=2, $fn=8);\n            \n            // Foot - three toes\n            translate([0, 0, -6]) rotate([90, 0, 0]) {\n                for(angle = [0, 120, 240]) {\n                    rotate([0, 0, angle]) \n                        translate([3, 0, 0])\n                        scale([0.3, 0.3, 1])\n                        cylinder(h=6, d=2, $fn=6);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    wing();\n    legs();\n}\n\n// Base for printing\ntranslate([0, 0, -15]) \n    color(\"green\") \n    cylinder(h=3, d=50, $fn=32);",
    "renders": true
  },
  {
    "animal": "oropendola",
    "openscad_code": "// Oropendola bird - medium complexity realistic style\n// Size: 80mm length, designed for 3D printing\n\n$fn = 32; // Smooth curves\n\nmodule body() {\n    // Main body - elongated sphere\n    scale([1.3, 0.8, 1])\n    sphere(r=15);\n}\n\nmodule head() {\n    // Head - smaller sphere\n    translate([22, 0, 8])\n    sphere(r=8);\n}\n\nmodule beak() {\n    // Long curved beak\n    translate([31, 0, 8])\n    rotate([0, -20, 0]) {\n        cylinder(h=18, r1=2.5, r2=0.5);\n    }\n}\n\nmodule eye() {\n    // Eyes - small spheres\n    translate([27, 3.5, 10])\n    sphere(r=1.5);\n    \n    translate([27, -3.5, 10])\n    sphere(r=1.5);\n}\n\nmodule wing() {\n    // Wing - elongated ellipsoid\n    rotate([0, 0, -10])\n    translate([-5, 0, 5])\n    scale([1.2, 0.3, 0.6])\n    sphere(r=12);\n}\n\nmodule tail() {\n    // Tail feathers - fan shape\n    for(i = [-20:10:20]) {\n        translate([-18, 0, 0])\n        rotate([0, 0, i])\n        translate([0, 0, 0])\n        scale([1.5, 0.2, 0.1])\n        cube([12, 5, 2]);\n    }\n}\n\nmodule legs() {\n    // Legs with feet\n    translate([5, 3, -14])\n    cylinder(h=8, r=1.2);\n    \n    translate([5, -3, -14])\n    cylinder(h=8, r=1.2);\n    \n    // Feet\n    translate([5, 4, -22])\n    rotate([90, 0, 0])\n    cylinder(h=5, r=0.8);\n    \n    translate([5, -4, -22])\n    rotate([90, 0, 0])\n    cylinder(h=5, r=0.8);\n    \n    // Toes\n    for(side = [1, -1]) {\n        for(toe = [-1, 0, 1]) {\n            translate([5 + toe * 2, side * 5, -22])\n            rotate([90, 0, 0])\n            translate([0, toe * 1.5, 0])\n            cylinder(h=3, r=0.5);\n        }\n    }\n}\n\nmodule yellow_patch() {\n    // Bright yellow cheek patch\n    translate([24, 0, 6])\n    scale([1, 2, 0.5])\n    sphere(r=4);\n}\n\nmodule crest() {\n    // Small crest on head\n    translate([22, 0, 15])\n    rotate([0, 20, 0])\n    scale([0.5, 0.2, 1])\n    cylinder(h=6, r=3);\n}\n\n// Main assembly\nunion() {\n    // Body parts\n    body();\n    head();\n    beak();\n    eye();\n    wing();\n    mirror([0, 1, 0]) wing(); // Second wing\n    tail();\n    legs();\n    yellow_patch();\n    crest();\n}",
    "renders": true
  },
  {
    "animal": "oryx",
    "openscad_code": "// Oryx - Realistic Style, Medium Complexity\n// Basic OpenSCAD primitives only\n\n$fn = 30;\nwall = 1.6;\n\n// Main body\nmodule body() {\n    // Torso\n    hull() {\n        translate([0, 0, 30]) sphere([15, 10, 12]);\n        translate([0, 0, 15]) sphere([10, 8, 10]);\n    }\n    \n    // Rump\n    translate([-20, 0, 25]) scale([1.2, 1, 1]) sphere([12, 10, 10]);\n    \n    // Chest\n    translate([15, 0, 20]) sphere([10, 8, 12]);\n}\n\n// Leg module\nmodule leg(height, angle, offset) {\n    rotate([0, 0, angle]) translate(offset) {\n        // Upper leg\n        cylinder(h=height/2, r1=4, r2=3, center=true);\n        translate([0, 0, -height/4]) rotate([90, 0, 0]) \n            cylinder(h=height/2, r1=3, r2=2.5, center=true);\n        \n        // Lower leg\n        translate([0, 0, -height/2]) cylinder(h=height/2, r1=2.5, r2=2, center=true);\n        \n        // Hoof\n        translate([0, 0, -height*0.75]) cylinder(h=4, r1=2, r2=3, center=true);\n    }\n}\n\n// Head with horns\nmodule head() {\n    // Head base\n    translate([25, 0, 35]) rotate([0, -20, 0]) {\n        hull() {\n            sphere([8, 6, 6]);\n            translate([12, 0, 0]) sphere([4, 4, 4]);\n        }\n        \n        // Snout\n        translate([12, 0, -2]) scale([2, 0.8, 0.8]) sphere([4, 3, 3]);\n        \n        // Horns\n        for(i = [-1, 1]) {\n            translate([5, i*3, 6]) rotate([20, i*15, 0]) {\n                cylinder(h=15, r1=1.5, r2=0.5);\n                translate([0, 0, 15]) sphere([0.5, 0.5, 0.5]);\n            }\n        }\n        \n        // Ears\n        translate([2, i*4, 4]) rotate([0, 30, 0]) \n            scale([0.3, 1, 2]) sphere([3, 2, 2]);\n    }\n}\n\n// Tail\nmodule tail() {\n    translate([-25, 0, 25]) rotate([45, 0, 0]) {\n        cylinder(h=15, r1=2, r2=1);\n        translate([0, 0, 15]) scale([0.5, 0.5, 1]) sphere([4, 4, 4]);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    \n    // Four legs\n    for(side = [1, -1]) {\n        leg(25, 30, [10, side*8, 10]);\n        leg(25, -30, [-15, side*8, 10]);\n    }\n    \n    head();\n    tail();\n}",
    "renders": true
  },
  {
    "animal": "osprey",
    "openscad_code": "// Osprey 3D Model - Realistic Style, Medium Complexity\n// Overall size ~70mm wingspan\n\n$fn = 32;\n\nmodule osprey_body() {\n    // Main body - elongated sphere\n    translate([0,0,10])\n    scale([1.5,1,1.2])\n    sphere(r=8);\n    \n    // Tail section\n    translate([0,-12,8])\n    scale([2,0.5,0.3])\n    cube([10,15,6], center=true);\n}\n\nmodule osprey_head() {\n    // Head sphere\n    translate([0,12,12])\n    sphere(r=6);\n    \n    // Beak\n    translate([0,18,12])\n    rotate([0,-20,0])\n    scale([0.8,2,0.4])\n    cylinder(r1=3, r2=0, h=8);\n    \n    // Eye\n    translate([-2.5,13,14])\n    sphere(r=1);\n    translate([2.5,13,14])\n    sphere(r=1);\n}\n\nmodule osprey_wing(side) {\n    // Wing positioned at shoulder\n    translate([side*10,0,15])\n    rotate([0,0,side*10])\n    rotate([0,side*20,0])\n    scale([1,side*1,0.2])\n    difference() {\n        // Main wing shape\n        scale([1,3,1])\n        sphere(r=8);\n        \n        // Wing tip cut\n        translate([0,side*15,0])\n        sphere(r=6);\n    }\n    \n    // Wing feathers - simplified\n    for(i=[1:3]) {\n        translate([side*8, side*i*4, 12])\n        rotate([0,side*30,0])\n        scale([0.3,side*2,0.1])\n        cylinder(r1=3, r2=5, h=8);\n    }\n}\n\nmodule osprey_legs() {\n    // Left leg\n    translate([-3,-5,-2])\n    rotate([10,0,-10])\n    cylinder(r=1.5, h=12);\n    \n    translate([-4,-5,-13])\n    sphere(r=2);\n    \n    // Right leg\n    translate([3,-5,-2])\n    rotate([10,0,10])\n    cylinder(r=1.5, h=12);\n    \n    translate([4,-5,-13])\n    sphere(r=2);\n}\n\nmodule osprey_tail() {\n    // Tail feathers\n    translate([0,-15,8])\n    rotate([20,0,0])\n    scale([1,0.3,0.2])\n    cube([12,8,4], center=true);\n    \n    // Individual tail feathers\n    for(i=[-1:1]) {\n        translate([i*3,-15,10])\n        rotate([20,0,i*10])\n        scale([0.8,0.2,2])\n        cube([2,8,1], center=true);\n    }\n}\n\n// Main assembly\nunion() {\n    osprey_body();\n    osprey_head();\n    osprey_wing(1);  // Right wing\n    osprey_wing(-1); // Left wing\n    osprey_legs();\n    osprey_tail();\n}\n\n// Add support base for 3D printing\ntranslate([0,0,-15])\nscale([1.5,1.2,0.5])\ncylinder(r=15, h=2);",
    "renders": true
  },
  {
    "animal": "ostrich",
    "openscad_code": "// Ostrich - 3D printable medium complexity realistic model\n$fn = 32;\n\n// Main module\nmodule ostrich() {\n    body();\n    neck();\n    head();\n    legs();\n    tail();\n    wings();\n}\n\n// Body - oval torso\nmodule body() {\n    difference() {\n        scale([1.2, 0.8, 1]) sphere(r = 15);\n        translate([0, 0, -15]) cube([50, 50, 30], center = true);\n    }\n}\n\n// Neck - tapered cylinder segments\nmodule neck() {\n    for(i = [0:8]) {\n        translate([5 + i*2, 0, 12 + i*1.5]) {\n            rotate([0, 15, 0]) \n                scale([1 - i*0.08, 1 - i*0.08, 0.8]) \n                    sphere(r = 3.5 - i*0.2);\n        }\n    }\n}\n\n// Head - beak and eyes\nmodule head() {\n    translate([22, 0, 26]) {\n        rotate([0, -15, 0]) {\n            // Head\n            scale([1.3, 0.9, 1.1]) sphere(r = 4);\n            \n            // Beak\n            translate([3.5, 0, -1]) {\n                rotate([0, -30, 0]) \n                    scale([2, 0.6, 0.6]) \n                        cylinder(h = 6, r1 = 2, r2 = 1);\n            }\n            \n            // Eyes\n            for(side = [-1, 1]) {\n                translate([1, side*2, 1]) \n                    sphere(r = 0.8);\n                translate([1.5, side*2, 1]) \n                    scale([0.5, 0.5, 0.2]) \n                        sphere(r = 0.8);\n            }\n        }\n    }\n}\n\n// Legs with joints\nmodule legs() {\n    for(side = [-1, 1]) {\n        translate([0, side*6, -10]) {\n            // Upper leg\n            rotate([90, 0, 0]) \n                cylinder(h = 15, r = 2.5);\n            \n            // Knee joint\n            translate([0, 0, -15]) {\n                sphere(r = 3);\n                \n                // Lower leg\n                rotate([90, 0, side*5]) \n                    cylinder(h = 12, r = 2);\n                \n                // Foot\n                translate([0, 0, -12]) {\n                    rotate([90, 0, 0]) {\n                        scale([2, 1, 0.5]) \n                            sphere(r = 3);\n                        for(toe = [-1, 0, 1]) {\n                            translate([toe*2.5, 0, -1]) \n                                scale([0.4, 0.4, 2]) \n                                    cylinder(h = 4, r = 1);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Tail - feather group\nmodule tail() {\n    translate([-15, 0, -5]) {\n        for(i = [0:7]) {\n            rotate([0, -20 - i*5, i*10 - 35]) {\n                translate([0, 0, -i*0.5]) {\n                    scale([1.5, 0.2, 0.8]) \n                        cylinder(h = 8 + i*0.5, r1 = 3 - i*0.2, r2 = 1);\n                }\n            }\n        }\n    }\n}\n\n// Wings - simplified\nmodule wings() {\n    for(side = [-1, 1]) {\n        translate([0, side*8, 5]) {\n            rotate([0, 0, side*30]) {\n                scale([0.8, 0.2, 0.4]) \n                    cylinder(h = 12, r1 = 5, r2 = 1);\n            }\n        }\n    }\n}\n\n// Base for stability\nmodule base() {\n    translate([0, 0, -25]) {\n        difference() {\n            cylinder(h = 2, r = 20);\n            cylinder(h = 3, r = 18);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    ostrich();\n    base();\n}",
    "renders": true
  },
  {
    "animal": "otter",
    "openscad_code": "// Otter model - realistic style, medium complexity\n// Size: 80mm nose to tail, 25mm height\n\n$fn = 32;\n\n// Main otter module\nmodule otter() {\n    // Body\n    union() {\n        // Torso\n        translate([0, 0, 8])\n            scale([1.5, 1, 1])\n            sphere(12);\n        \n        // Neck\n        translate([-18, 0, 12])\n            rotate([0, 15, 0])\n            cylinder(h=12, r1=8, r2=6);\n            \n        // Head\n        translate([-32, 0, 18])\n            scale([1.1, 0.9, 0.9])\n            sphere(10);\n            \n        // Tail\n        translate([18, 0, 8])\n            rotate([0, -30, 0])\n            scale([3, 1, 0.6])\n            cylinder(h=25, r1=6, r2=3);\n            \n        // Legs\n        for(side = [-1, 1]) {\n            // Front legs\n            translate([-20, side*8, 5])\n                rotate([30, 0, side*10])\n                cylinder(h=12, r1=4, r2=3);\n                \n            // Back legs\n            translate([15, side*8, 4])\n                rotate([40, 0, side*(-10)])\n                cylinder(h=14, r1=4.5, r2=3);\n        }\n        \n        // Ears\n        for(side = [-1, 1]) {\n            translate([-36, side*8, 22])\n                rotate([0, 0, side*30])\n                scale([1, 0.7, 1])\n                cylinder(h=6, r1=4, r2=0);\n        }\n        \n        // Snout\n        translate([-40, 0, 16])\n            scale([1.2, 0.8, 0.8])\n            sphere(6);\n            \n        // Whiskers bases\n        for(side = [-1, 1]) {\n            for(pos = [0, 3, 6]) {\n                translate([-42, side*(4+pos*0.5), 15])\n                    sphere(1);\n            }\n        }\n        \n        // Feet webbing\n        for(side = [-1, 1]) {\n            // Front feet\n            translate([-28, side*11, 0])\n                rotate([90, 0, 0])\n                cylinder(h=2, r1=5, r2=0);\n                \n            // Back feet\n            translate([12, side*11, 0])\n                rotate([90, 0, 0])\n                cylinder(h=2, r1=5.5, r2=0);\n        }\n    }\n    \n    // Eyes (cutouts)\n    difference() {\n        union() {}\n        for(side = [-1, 1]) {\n            translate([-38, side*5, 19])\n                sphere(2.5);\n        }\n    }\n    \n    // Nose\n    translate([-44, 0, 16])\n        rotate([90, 0, 0])\n        cylinder(h=2, r1=3, r2=0);\n}\n\n// Main assembly\notter();",
    "renders": true
  },
  {
    "animal": "owl",
    "openscad_code": "// Realistic Medium-Complexity 3D Printable Owl\n// Overall height ≈ 70 mm\n\n$fn = 60;  // Smooth curves for 3D printing\n\nmodule owl() {\n    union() {\n        // === BODY ===\n        difference() {\n            // Main torso ellipsoid\n            scale([1, 0.8, 1.2]) sphere(d = 40);\n            // Flatten bottom for printing\n            translate([0, 0, -25]) cube([60, 60, 50], center = true);\n        }\n\n        // === HEAD ===\n        translate([0, 0, 23])\n            difference() {\n                sphere(d = 35);\n                // Neck hole\n                translate([0, 0, -20])\n                    cylinder(d1 = 20, d2 = 24, h = 15, center = true);\n            }\n\n        // === EYES (realistic discs) ===\n        for (x = [-10, 10])\n            translate([x, -5, 35]) {\n                // Eye socket\n                rotate([0, 90, 0])\n                    cylinder(d = 12, h = 3);\n                // Iris\n                translate([0, 2, 0])\n                    color(\"DarkOrange\")\n                    rotate([0, 90, 0])\n                    cylinder(d = 8, h = 1);\n                // Pupil\n                translate([0, 3, 0])\n                    color(\"black\")\n                    rotate([0, 90, 0])\n                    cylinder(d = 4, h = 1);\n            }\n\n        // === BEAK ===\n        translate([0, -18, 30])\n            rotate([15, 0, 0])\n            scale([1, 1, 0.7])\n            cylinder(d1 = 8, d2 = 0, h = 12);\n\n        // === EAR TUFTS (realistic feather clusters) ===\n        module tuft(x) {\n            translate([x, 0, 45])\n                rotate([0, x * 10, 0])\n                for (i = [0:1:5])\n                    rotate([0, 0, i * 15])\n                    translate([0, 0, i * 1.5])\n                    scale([0.4, 1, 0.2])\n                    sphere(d = 12);\n        }\n        tuft(-10);\n        tuft(10);\n\n        // === WINGS folded against body ===\n        module wing(side) {\n            mirror([side, 0, 0])\n            translate([-22, 0, 5])\n            rotate([0, 20, -15])\n            scale([0.3, 1.2, 0.8])\n            sphere(d = 35);\n        }\n        wing(1);\n        wing(-1);\n\n        // === TAIL ===\n        translate([0, 18, -5])\n            rotate([90, 0, 0])\n            cylinder(d1 = 20, d2 = 14, h = 18);\n\n        // === FEET (perched) ===\n        module foot(side) {\n            translate([side * 10, -15, -22])\n            union() {\n                // Tarsus\n                cylinder(d = 4, h = 8);\n                // Toes forward\n                for (a = [-30, 0, 30])\n                    translate([0, 0, 4])\n                    rotate([0, a, 0])\n                    translate([3, 0, 0])\n                    scale([0.3, 0.3, 1])\n                    sphere(d = 8);\n                // Toe backward\n                translate([0, 0, 4])\n                rotate([0, 180, 0])\n                translate([3, 0, 0])\n                scale([0.3, 0.3, 1])\n                sphere(d = 8);\n            }\n        }\n        foot(1);\n        foot(-1);\n    }\n}\n\n// Render the owl\nowl();",
    "renders": true
  },
  {
    "animal": "owlfly",
    "openscad_code": "// Owlfly - Realistic style, medium complexity\n// Wingspan approximately 80mm, body length ~50mm\n\n$fn = 24;\n\nmodule thorax() {\n    // Main thorax body\n    difference() {\n        scale([1.2, 1, 0.8]) sphere(d=20);\n        // Neck cavity\n        translate([0, 12, 0]) scale([0.6, 0.6, 0.6]) sphere(d=15);\n    }\n    \n    // Prothorax segment\n    translate([0, 8, 0]) scale([1, 0.9, 0.7]) sphere(d=18);\n    \n    // Pronotum extension\n    translate([0, 6, 3]) rotate([30,0,0]) cube([12, 8, 4], center=true);\n}\n\nmodule abdomen() {\n    // Tapered abdomen segments\n    for(i = [0:5]) {\n        hull() {\n            translate([0, -8 - i*5, 0]) \n                scale([1 - i*0.1, 1 - i*0.08, 0.8 - i*0.08]) \n                sphere(d=16 - i*2);\n            translate([0, -12 - i*5, 0]) \n                scale([1 - (i+1)*0.1, 1 - (i+1)*0.08, 0.8 - (i+1)*0.08]) \n                sphere(d=16 - (i+1)*2);\n        }\n    }\n}\n\nmodule head() {\n    // Main head sphere\n    translate([0, 18, 0]) scale([1.1, 1.3, 0.9]) sphere(d=15);\n    \n    // Compound eyes\n    for(side = [-1, 1]) {\n        translate([side*7, 17, 3]) sphere(d=6);\n        translate([side*6, 19, 3]) sphere(d=5);\n    }\n    \n    // Mandibles\n    for(side = [-1, 1]) {\n        translate([side*3, 22, -2]) rotate([0,0,side*20]) \n            scale([0.8, 2, 0.6]) cylinder(d1=3, d2=2, h=5);\n    }\n    \n    // Antennae\n    for(side = [-1, 1]) {\n        translate([side*4, 20, 5]) rotate([0,side*20,0]) \n            cylinder(d1=1.5, d2=0.5, h=12);\n    }\n}\n\nmodule wing() {\n    // Main wing structure\n    difference() {\n        linear_extrude(height=0.8) \n            polygon(points=[\n                [0,0], [25,0], [35,8], [30,25], [15,35], [5,30], [0,15]\n            ]);\n        \n        // Wing veins as negative space\n        for(i = [1:4]) {\n            rotate([0,0,-15 + i*10]) \n                translate([0,0,-0.5]) cube([30, 0.4, 2]);\n        }\n    }\n    \n    // Wing base joint\n    translate([0,0,-0.5]) cylinder(h=2, d=4);\n}\n\nmodule leg() {\n    // Coxa\n    rotate([0,0,30]) cylinder(h=5, d=3);\n    \n    // Femur\n    translate([0,0,5]) rotate([0,0,-30]) cylinder(h=8, d=2.5);\n    \n    // Tibia\n    translate([0,0,13]) rotate([0,0,-45]) cylinder(h=10, d=2);\n    \n    // Tarsus segments\n    for(i = [0:3]) {\n        translate([0,0,23 + i*2]) rotate([0,0,-60 + i*5]) \n            cylinder(h=2, d=2 - i*0.3);\n    }\n}\n\n// Assembly\nunion() {\n    // Body parts\n    color(\"darkgreen\") thorax();\n    color(\"darkgreen\") translate([0,-35,0]) abdomen();\n    color(\"darkolivegreen\") head();\n    \n    // Wings - positioned at thorax\n    for(side = [-1, 1]) {\n        color(\"transparent\") translate([side*8, 5, 5]) rotate([0,0,side*30]) wing();\n    }\n    \n    // Legs - 6 legs, 3 per side\n    for(side = [-1, 1]) {\n        for(pos = [0, 4, 8]) {\n            color(\"black\") \n                translate([side*10, 8 - pos, -2]) \n                rotate([0,90,side*-20]) leg();\n        }\n    }\n}",
    "renders": true
  },
  {
    "animal": "ox",
    "openscad_code": "// Realistic Ox for 3D printing\n// Approx 70 mm long, 40 mm tall\n// No overhangs >45°, 2 mm wall thickness\n\n$fn = 36;\n\nmodule ox() {\n    // Main body\n    union() {\n        // Torso\n        translate([0, 0, 25])\n            scale([1.2, 0.7, 0.6])\n            sphere(20);\n\n        // Chest\n        translate([15, 0, 20])\n            rotate([0, 20, 0])\n            scale([0.9, 0.8, 0.7])\n            sphere(18);\n\n        // Hips\n        translate([-15, 0, 22])\n            rotate([0, -15, 0])\n            scale([0.9, 0.9, 0.6])\n            sphere(16);\n\n        // Head assembly\n        translate([28, 0, 35])\n            rotate([0, -15, 0])\n            head();\n\n        // Legs\n        for (x = [12, -12])\n            for (y = [10, -10])\n                leg(x, y, 0);\n\n        // Horns\n        horn(30, 8, 45);\n        horn(30, -8, -45);\n\n        // Tail\n        translate([-30, 0, 22])\n            rotate([0, 0, -30])\n            tail();\n    }\n}\n\nmodule head() {\n    union() {\n        // Skull\n        scale([1.3, 0.9, 0.9])\n        sphere(14);\n\n        // Snout\n        translate([8, 0, -3])\n            scale([0.8, 0.7, 0.6])\n            sphere(10);\n\n        // Ears\n        translate([0, 12, 8])\n            rotate([0, -20, 50])\n            scale([0.3, 1, 0.8])\n            cylinder(h=8, r=4);\n        translate([0, -12, 8])\n            rotate([0, -20, -50])\n            scale([0.3, 1, 0.8])\n            cylinder(h=8, r=4);\n\n        // Eyes (recessed)\n        translate([6, 7, 5])\n            rotate([0, 10, 0])\n            difference() {\n                sphere(3);\n                translate([0, 0, 2])\n                    sphere(2.5);\n            }\n        translate([6, -7, 5])\n            rotate([0, 10, 0])\n            difference() {\n                sphere(3);\n                translate([0, 0, 2])\n                    sphere(2.5);\n            }\n    }\n}\n\nmodule leg(x, y, angle) {\n    translate([x, y, 15])\n        rotate([0, 0, angle])\n        union() {\n            // Upper leg\n            cylinder(h=15, r=6);\n            // Lower leg\n            translate([0, 0, -17])\n                cylinder(h=17, r=5);\n            // Hoof\n            translate([0, 0, -19])\n                scale([1.2, 1, 0.5])\n                cylinder(h=4, r=5);\n        }\n}\n\nmodule horn(x, y, rot) {\n    translate([x, y, 40])\n        rotate([0, 0, rot])\n        rotate([30, 0, 0])\n        cylinder(h=15, r1=3, r2=1);\n}\n\nmodule tail() {\n    difference() {\n        union() {\n            // Tail base\n            cylinder(h=8, r=4);\n            // Tail tuft\n            translate([0, 0, -12])\n                scale([1, 0.8, 0.3])\n                sphere(6);\n        }\n        // Remove center for printing\n        translate([0, 0, -6])\n            cylinder(h=14, r=1.5);\n    }\n}\n\n// Main assembly\nox();",
    "renders": true
  },
  {
    "animal": "oyster",
    "openscad_code": "// Realistic 3D-printable oyster with medium complexity\n// Overall size: ~80 mm across (fits most FDM beds)\n\n$fn = 36;            // Smooth curves\nshell_thk = 2;       // Printable wall thickness\n\n// Main module\nmodule oyster() {\n    difference() {\n        union() {\n            // Bottom shell (cupped)\n            translate([0, 0, -10])\n                scale([1, 0.85, 0.6])\n                sphere(d = 80);\n\n            // Top shell (flatter)\n            translate([0, 0, 10])\n                rotate([15, 0, 0])\n                scale([1, 0.9, 0.4])\n                sphere(d = 78);\n\n            // Hinge bulge\n            translate([0, 38, 0])\n                rotate([90, 0, 0])\n                cylinder(h = 25, d1 = 22, d2 = 18, $fn = 32);\n        }\n\n        // Hollow out bottom shell\n        translate([0, 0, -8])\n            scale([1, 0.85, 0.6])\n            sphere(d = 80 - 2*shell_thk);\n\n        // Hollow out top shell\n        translate([0, 0, 10])\n            rotate([15, 0, 0])\n            scale([1, 0.9, 0.4])\n            sphere(d = 78 - 2*shell_thk);\n\n        // Hollow hinge\n        translate([0, 38, 0])\n            rotate([90, 0, 0])\n            cylinder(h = 25, d1 = 22 - 2*shell_thk, d2 = 18 - 2*shell_thk, $fn = 32);\n\n        // Opening gap between shells\n        translate([0, 0, -20])\n            cube([120, 120, 40], center = true);\n    }\n\n    // Radial shell ridges on bottom\n    for (a = [0 : 20 : 340]) {\n        rotate([0, 0, a])\n            translate([0, 0, -9.5])\n                linear_extrude(height = 2, scale = 1.05)\n                    offset(delta = 0.5)\n                    projection()\n                        translate([0, -15, 0])\n                            scale([1, 0.85, 1])\n                                circle(d = 70);\n    }\n\n    // Growth rings on top shell\n    for (r = [25 : 7 : 38]) {\n        translate([0, 0, 10])\n            rotate([15, 0, 0])\n                scale([1, 0.9, 0.4])\n                    difference() {\n                        sphere(d = r*2 + 1);\n                        sphere(d = r*2 - 1);\n                    }\n    }\n\n    // Adductor muscle scar (flat disk)\n    translate([0, -12, -5])\n        rotate([0, 0, 0])\n            cylinder(h = 0.5, d = 18, $fn = 32);\n\n    // Simple gill ridges inside bottom shell\n    for (y = [-20 : 6 : 20]) {\n        translate([0, y, -7])\n            rotate([90, 0, 0])\n                cylinder(h = 0.8, d = 60 - abs(y)*1.5, $fn = 32);\n    }\n}\n\n// Render the model\noyster();",
    "renders": true
  },
  {
    "animal": "paca",
    "openscad_code": "$fa = 1;\n$fs = 0.4;\n\nmodule paca_body() {\n    // Main torso - oval shape\n    difference() {\n        scale([1.2, 0.7, 0.8]) sphere(d=40);\n        \n        // Slight flattening on bottom\n        translate([0, 0, -16]) cube([50, 50, 10], center=true);\n    }\n}\n\nmodule paca_head() {\n    // Bulky head with snout\n    union() {\n        // Main head\n        translate([22, 0, 5]) scale([0.9, 1.1, 0.9]) sphere(d=25);\n        \n        // Snout\n        translate([32, 0, 2]) scale([0.8, 0.6, 0.5]) sphere(d=15);\n        \n        // Nostrils\n        difference() {\n            translate([36, 0, 2]) sphere(d=4);\n            translate([37, 1.2, 3]) rotate([0, 90, 0]) cylinder(h=3, r=1.5);\n        }\n        \n        // Eyes\n        translate([25, 8, 10]) sphere(d=3);\n        translate([25, -8, 10]) sphere(d=3);\n        \n        // Ears\n        translate([18, 10, 15]) rotate([0, -20, 0]) scale([0.3, 2, 1]) cylinder(h=8, r=3);\n        translate([18, -10, 15]) rotate([0, 20, 0]) scale([0.3, 2, 1]) cylinder(h=8, r=3);\n    }\n}\n\nmodule paca_legs() {\n    // Front legs\n    for (side = [-1, 1]) {\n        translate([15, side*12, -15]) {\n            // Upper leg\n            rotate([0, side*15, 0]) cylinder(h=12, r1=5, r2=4);\n            // Lower leg\n            translate([0, 0, -12]) rotate([0, side*10, 0]) cylinder(h=10, r=3.5);\n            // Foot\n            translate([0, 0, -22]) scale([1.5, 1, 0.5]) sphere(d=8);\n        }\n    }\n    \n    // Rear legs\n    for (side = [-1, 1]) {\n        translate([-15, side*10, -15]) {\n            // Upper leg\n            rotate([0, side*-20, 0]) cylinder(h=15, r1=6, r2=4);\n            // Lower leg\n            translate([0, 0, -15]) rotate([0, side*-15, 0]) cylinder(h=12, r=4);\n            // Foot\n            translate([0, 0, -27]) scale([1.8, 1.2, 0.5]) sphere(d=10);\n        }\n    }\n}\n\nmodule paca_tail() {\n    // Short stubby tail\n    translate([-22, 0, -8]) rotate([0, 10, 0]) scale([1, 1, 0.7]) cylinder(h=12, r1=4, r2=2);\n}\n\nmodule paca_spots() {\n    // Characteristic spots on back\n    for (i = [0:3]) {\n        angle = i * 90;\n        radius = 8 + (i % 2) * 3;\n        translate([cos(angle) * radius, sin(angle) * radius, 15]) {\n            scale([1, 0.7, 0.2]) sphere(d=6);\n        }\n    }\n    \n    // Additional spots\n    translate([10, 0, 12]) scale([1, 0.8, 0.2]) sphere(d=5);\n    translate([-5, 8, 12]) scale([1, 0.8, 0.2]) sphere(d=4);\n    translate([-5, -8, 12]) scale([1, 0.8, 0.2]) sphere(d=4);\n}\n\n// Assembly\nunion() {\n    paca_body();\n    paca_head();\n    paca_legs();\n    paca_tail();\n    \n    // Spots as different color (can be printed separately)\n    %paca_spots();\n}\n\n// Position for printing\ntranslate([0, 0, 25]) rotate([0, 180, 0]) {\n    // Main assembly already positioned\n}",
    "renders": true
  },
  {
    "animal": "paddlefish",
    "openscad_code": "// Paddlefish (Polyodon spathula) - Realistic style, medium complexity\n// Designed for 3D printing, no overhangs, hollow body\n\nmodule paddlefish() {\n    // Overall scale factor (adjust to fit print bed)\n    scale_factor = 0.5;\n    scale(scale_factor) {\n        \n        // Main body - elongated torpedo shape\n        union() {\n            // Body segments for smooth shape\n            difference() {\n                union() {\n                    // Main body sections\n                    translate([0, 0, 0]) \n                        scale([1, 0.6, 0.4]) \n                        sphere(d=40, $fn=32);\n                    \n                    translate([20, 0, 0]) \n                        scale([1.2, 0.7, 0.45]) \n                        sphere(d=40, $fn=32);\n                    \n                    translate([40, 0, 0]) \n                        scale([1.1, 0.6, 0.4]) \n                        sphere(d=30, $fn=32);\n                    \n                    // Tail extension\n                    translate([60, 0, 0]) \n                        scale([0.8, 0.4, 0.3]) \n                        sphere(d=25, $fn=32);\n                }\n                \n                // Hollow out body for printing\n                translate([0, 0, 0]) \n                    scale([0.9, 0.5, 0.35]) \n                    sphere(d=40, $fn=32);\n                \n                translate([20, 0, 0]) \n                    scale([1.1, 0.6, 0.4]) \n                    sphere(d=40, $fn=32);\n                \n                translate([40, 0, 0]) \n                    scale([1.0, 0.5, 0.35]) \n                    sphere(d=30, $fn=32);\n                \n                translate([60, 0, 0]) \n                    scale([0.7, 0.3, 0.25]) \n                    sphere(d=25, $fn=32);\n            }\n            \n            // Paddle-shaped rostrum\n            difference() {\n                // Main paddle\n                translate([-45, 0, 0]) \n                    rotate([0, 0, 0]) \n                    scale([3, 0.8, 0.15]) \n                    sphere(d=25, $fn=32);\n                \n                // Taper the end\n                translate([-65, 0, 0]) \n                    rotate([0, 0, 0]) \n                    scale([0.5, 0.6, 0.2]) \n                    cube([20, 30, 10], center=true);\n                \n                // Hollow paddle\n                translate([-45, 0, -1]) \n                    scale([2.8, 0.7, 0.1]) \n                    sphere(d=25, $fn=32);\n            }\n            \n            // Dorsal fin\n            fin_height = 15;\n            fin_length = 30;\n            for(i = [0:5]) {\n                translate([25 + i*4, 0, 15 + sin(i*30)*3]) \n                    rotate([90, 0, 0]) \n                    cylinder(h=fin_height - i*2, d1=3, d2=1, $fn=8);\n            }\n            \n            // Caudal fin (upper lobe)\n            difference() {\n                // Upper caudal fin\n                translate([70, 0, 5]) \n                    rotate([0, 0, 20]) \n                    scale([1.5, 0.3, 1]) \n                    cylinder(h=30, d=20, $fn=3);\n                \n                // Cut to shape\n                translate([70, 0, 15]) \n                    rotate([0, 0, 0]) \n                    cube([40, 20, 20], center=true);\n            }\n            \n            // Lower caudal fin\n            mirror([0, 0, 1]) {\n                translate([70, 0, 5]) \n                    rotate([0, 0, 20]) \n                    scale([1.5, 0.3, 1]) \n                    cylinder(h=25, d=18, $fn=3);\n            }\n            \n            // Pectoral fins (simplified)\n            for(side = [-1, 1]) {\n                translate([15, side*15, -5]) \n                    rotate([0, 90, side*30]) \n                    scale([1, 0.3, 0.8]) \n                    cylinder(h=20, d=12, $fn=16);\n            }\n            \n            // Gill covers\n            for(side = [-1, 1]) {\n                translate([10, side*10, -2]) \n                    scale([1, 0.5, 0.3]) \n                    sphere(d=8, $fn=16);\n            }\n            \n            // Eyes (slightly protruding)\n            for(side = [-1, 1]) {\n                translate([5, side*8, 5]) \n                    sphere(d=4, $fn=16);\n                \n                // Pupil\n                translate([7, side*8.5, 5]) \n                    sphere(d=2, $fn=8);\n            }\n        }\n    }\n}\n\n// Generate the paddlefish\npaddlefish();",
    "renders": true
  },
  {
    "animal": "pademelon",
    "openscad_code": "$fn = 32;\n\nmodule pademelon() {\n    // Overall scale: 80mm long\n    scale(0.8)\n    \n    union() {\n        // Body (oval torso)\n        translate([0, 0, 15])\n            scale([1.5, 1, 1])\n            sphere(r=15);\n            \n        // Head\n        translate([20, 0, 30])\n            sphere(r=10);\n            \n        // Snout\n        translate([29, 0, 30])\n            scale([1.2, 0.8, 0.8])\n            sphere(r=6);\n            \n        // Ears (rounded cones)\n        translate([20, 8, 38])\n            rotate([45, 0, 0])\n            cylinder(h=8, r1=4, r2=1);\n            \n        translate([20, -8, 38])\n            rotate([45, 0, 0])\n            cylinder(h=8, r1=4, r2=1);\n            \n        // Arms\n        for (side = [-1, 1]) {\n            translate([5, side*10, 20])\n                rotate([0, 30*side, 0])\n                scale([1, 1, 0.8])\n                cylinder(h=12, r=3);\n                \n            // Hands\n            translate([3, side*14, 20])\n                sphere(r=3);\n        }\n        \n        // Legs\n        for (side = [-1, 1]) {\n            translate([-12, side*8, 0])\n                cylinder(h=18, r=4);\n                \n            // Feet\n            translate([-12, side*8, 0])\n                scale([2, 1, 0.5])\n                rotate([0, 90, 0])\n                cylinder(h=8, r=3);\n        }\n        \n        // Tail\n        hull() {\n            translate([-18, 0, 15])\n                sphere(r=4);\n            translate([-35, 0, 10])\n                scale([1, 0.7, 0.7])\n                sphere(r=3);\n        }\n        \n        // Eyes (indented)\n        difference() {\n            translate([20, 0, 30])\n                sphere(r=10);\n            for (side = [-1, 1]) {\n                translate([27, side*4, 33])\n                    sphere(r=1.5);\n            }\n        }\n        \n        // Nose (small indent)\n        difference() {\n            translate([29, 0, 30])\n                scale([1.2, 0.8, 0.8])\n                sphere(r=6);\n            translate([33, 0, 30])\n                sphere(r=2);\n        }\n        \n        // Fur texture (small bumps)\n        for (i = [0:5:360]) {\n            for (j = [0:10:360]) {\n                translate([\n                    15*cos(i)*sin(j),\n                    10*sin(i)*sin(j),\n                    15*cos(j) + 15\n                ])\n                    sphere(r=0.5);\n            }\n        }\n    }\n}\n\n// Center on origin\ntranslate([0, 0, 0])\n    pademelon();",
    "renders": true
  },
  {
    "animal": "panther",
    "openscad_code": "// Realistic Panther - Medium Complexity\n// 3D printable, no overhangs, 80mm length\n\nmodule panther() {\n    // Body\n    union() {\n        // Main torso\n        translate([-20, 0, 0])\n            scale([1.8, 1, 1])\n            sphere(r=15, $fn=40);\n        \n        // Chest\n        translate([-35, 0, -5])\n            sphere(r=12, $fn=30);\n            \n        // Hips\n        translate([15, 0, -2])\n            sphere(r=14, $fn=30);\n    }\n    \n    // Head\n    translate([-45, 0, 8])\n        rotate([0, 15, 0])\n        union() {\n            // Skull\n            sphere(r=10, $fn=30);\n            \n            // Snout\n            translate([-10, 0, -2])\n                scale([1.5, 0.8, 0.8])\n                sphere(r=6, $fn=20);\n                \n            // Ears\n            for(side = [-1, 1]) {\n                translate([-2, side*8, 8])\n                    rotate([0, 0, side*20])\n                    cylinder(r1=4, r2=2, h=6, $fn=20);\n            }\n        }\n    \n    // Legs\n    module leg(x, y) {\n        translate([x, y, -15])\n            union() {\n                // Upper leg\n                cylinder(r=4, h=15, $fn=20);\n                \n                // Lower leg\n                translate([0, 0, -12])\n                    cylinder(r=3, h=10, $fn=20);\n                    \n                // Paw\n                translate([0, 0, -15])\n                    sphere(r=4, $fn=20);\n            }\n    }\n    \n    // Front legs\n    leg(-25, 10);\n    leg(-25, -10);\n    \n    // Back legs\n    leg(20, 8);\n    leg(20, -8);\n    \n    // Tail\n    hull() {\n        translate([25, 0, 0])\n            sphere(r=5, $fn=20);\n        translate([45, 0, 5])\n            sphere(r=3, $fn=20);\n    }\n    \n    // Eyes\n    for(side = [-1, 1]) {\n        translate([-50, side*5, 8])\n            difference() {\n                sphere(r=2, $fn=20);\n                translate([1, 0, 0])\n                    sphere(r=1.5, $fn=10);\n            }\n    }\n    \n    // Nose\n    translate([-55, 0, 3])\n        sphere(r=2, $fn=20);\n        \n    // Whiskers\n    for(side = [-1, 1]) {\n        for(i = [0:2]) {\n            rotate([0, 0, side*(30 + i*10)])\n                translate([-55, 0, 4-i])\n                    cylinder(r=0.5, h=8, $fn=8);\n        }\n    }\n}\n\n// Base plate for stability\ndifference() {\n    translate([-40, -25, -20])\n        cube([80, 50, 2]);\n    translate([-40, -25, -19])\n        cube([80, 50, 2]);\n}\n\n// Main model\npanther();",
    "renders": true
  },
  {
    "animal": "papillon",
    "openscad_code": "// Realistic Papillon (Butterfly) - Medium Complexity\n// 3D printable model with proper wall thickness and no overhangs\n// Wingspan approximately 80mm, thickness 3mm\n\n$fn = 36;  // Smooth curves for better 3D printing\n\n// Overall scale factor\nscale_factor = 1.0;\n\n// Wing thickness for 3D printing\nwing_thickness = 3;\n\n// Body dimensions\nbody_length = 25;\nbody_diameter = 6;\nhead_radius = 4;\n\n// Antennae parameters\nantenna_length = 12;\nantenna_diameter = 0.8;\n\n// Wing span\nwing_span = 80;\n\n// Main module for the complete butterfly\nmodule papillon() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        union() {\n            // Central body\n            body();\n            \n            // Left wings\n            translate([0, 0, wing_thickness/2])\n                left_wings();\n            \n            // Right wings (mirrored left wings)\n            translate([0, 0, wing_thickness/2])\n                mirror([1, 0, 0])\n                    left_wings();\n            \n            // Antennae\n            translate([0, 0, wing_thickness/2])\n                antennae();\n        }\n    }\n}\n\n// Butterfly body with head and thorax\nmodule body() {\n    union() {\n        // Main body segment (thorax + abdomen)\n        translate([0, 0, wing_thickness/2])\n            rotate([90, 0, 0])\n                cylinder(h=body_length, d=body_diameter, $fn=20);\n        \n        // Head\n        translate([0, body_length/2 + head_radius, wing_thickness/2])\n            sphere(r=head_radius, $fn=20);\n        \n        // Eye details (small spheres)\n        translate([1.5, body_length/2 + head_radius, wing_thickness/2 + 2])\n            sphere(r=0.8, $fn=12);\n        translate([-1.5, body_length/2 + head_radius, wing_thickness/2 + 2])\n            sphere(r=0.8, $fn=12);\n        \n        // Thorax bulge\n        translate([0, body_length/6, wing_thickness/2])\n            rotate([90, 0, 0])\n                cylinder(h=8, d1=body_diameter*1.3, d2=body_diameter, $fn=20);\n    }\n}\n\n// Left wing set (upper and lower)\nmodule left_wings() {\n    union() {\n        // Upper wing\n        translate([-body_diameter/2 - 2, body_length/3, 0])\n            rotate([0, 0, 10])\n                upper_wing();\n        \n        // Lower wing\n        translate([-body_diameter/2 - 2, -body_length/3, 0])\n            rotate([0, 0, -15])\n                lower_wing();\n    }\n}\n\n// Upper wing with realistic shape\nmodule upper_wing() {\n    difference() {\n        // Main wing shape\n        hull() {\n            // Wing base\n            translate([0, 0, 0])\n                cylinder(h=wing_thickness, d=8, $fn=20);\n            \n            // Wing tip\n            translate([-wing_span/2, 10, 0])\n                cylinder(h=wing_thickness, d=3, $fn=20);\n            \n            // Outer edge point\n            translate([-wing_span/2 + 5, 25, 0])\n                cylinder(h=wing_thickness, d=2, $fn=20);\n                \n            // Back edge point\n            translate([-10, 30, 0])\n                cylinder(h=wing_thickness, d=2, $fn=20);\n        }\n        \n        // Wing edge details (scalloped)\n        for(i = [0:3]) {\n            translate([-i*8 - 5, 15 + i*5, -1])\n                cylinder(h=wing_thickness + 2, d=4, $fn=16);\n        }\n        \n        // Vein cutouts for realism\n        for(i = [1:3]) {\n            rotate([0, 0, i*20 - 40])\n                translate([-wing_span/4, 8, -1])\n                    cube([wing_span/2, 1.5, wing_thickness + 2]);\n        }\n        \n        rotate([0, 0, -20])\n            translate([-wing_span/4, 15, -1])\n                cube([wing_span/2, 1, wing_thickness + 2]);\n    }\n}\n\n// Lower wing with realistic shape\nmodule lower_wing() {\n    difference() {\n        // Main wing shape\n        hull() {\n            // Wing base\n            translate([0, 0, 0])\n                cylinder(h=wing_thickness, d=6, $fn=20);\n            \n            // Wing tip\n            translate([-wing_span/3, -15, 0])\n                cylinder(h=wing_thickness, d=2.5, $fn=20);\n            \n            // Back edge\n            translate([-5, -20, 0])\n                cylinder(h=wing_thickness, d=2, $fn=20);\n        }\n        \n        // Vein details\n        for(i = [1:2]) {\n            rotate([0, 0, i*25 - 30])\n                translate([-wing_span/4, -8, -1])\n                    cube([wing_span/3, 1, wing_thickness + 2]);\n        }\n    }\n}\n\n// Antennae module\nmodule antennae() {\n    union() {\n        // Left antenna\n        translate([2, body_length/2 + head_radius, 0])\n            rotate([0, -30, 30])\n                cylinder(h=antenna_length, d=antenna_diameter, $fn=8);\n        \n        // Right antenna\n        translate([-2, body_length/2 + head_radius, 0])\n            rotate([0, -30, -30])\n                cylinder(h=antenna_length, d=antenna_diameter, $fn=8);\n        \n        // Antenna tips\n        translate([2 + sin(30)*antenna_length, \n                  body_length/2 + head_radius + cos(30)*antenna_length, \n                  cos(30)*antenna_length])\n            sphere(r=antenna_diameter*1.2, $fn=8);\n            \n        translate([-2 - sin(30)*antenna_length, \n                  body_length/2 + head_radius + cos(30)*antenna_length, \n                  cos(30)*antenna_length])\n            sphere(r=antenna_diameter*1.2, $fn=8);\n    }\n}\n\n// Generate the butterfly\npapillon();",
    "renders": true
  },
  {
    "animal": "parakeet",
    "openscad_code": "// OpenSCAD Parakeet - Medium Complexity Realistic Style\n// 3D printable, approx 70mm tall\n\n$fn = 30;\n\nmodule body() {\n    // Main body - elongated sphere\n    translate([0, 0, 35])\n    scale([1.2, 1, 1.3])\n    sphere(15);\n}\n\nmodule head() {\n    // Head - smaller sphere\n    translate([0, 0, 58])\n    sphere(12);\n}\n\nmodule beak() {\n    // Upper beak - cone\n    color(\"orange\")\n    translate([0, 10, 58])\n    rotate([90, 0, 0])\n    cylinder(h1=5, h2=0, r1=4, r2=0);\n    \n    // Lower beak - smaller cone\n    color(\"orange\")\n    translate([0, 10, 56])\n    rotate([90, 0, 0])\n    cylinder(h1=4, h2=0, r1=3, r2=0);\n}\n\nmodule eyes() {\n    // Left eye\n    color(\"black\")\n    translate([-5, 8, 59])\n    sphere(2.5);\n    \n    // Right eye\n    color(\"black\")\n    translate([5, 8, 59])\n    sphere(2.5);\n    \n    // Eye rings\n    color(\"white\")\n    difference() {\n        translate([-5, 8, 59])\n        sphere(3.5);\n        translate([-5, 8, 59])\n        sphere(2.5);\n    }\n    \n    color(\"white\")\n    difference() {\n        translate([5, 8, 59])\n        sphere(3.5);\n        translate([5, 8, 59])\n        sphere(2.5);\n    }\n}\n\nmodule wing() {\n    // Left wing\n    color(\"green\")\n    translate([-15, 0, 40])\n    rotate([0, 0, 30])\n    scale([1.5, 0.8, 0.3])\n    sphere(12);\n    \n    // Right wing\n    color(\"green\")\n    translate([15, 0, 40])\n    rotate([0, 0, -30])\n    scale([1.5, 0.8, 0.3])\n    sphere(12);\n}\n\nmodule tail() {\n    // Tail feathers - three layers\n    color(\"green\")\n    translate([0, -20, 25])\n    rotate([0, -20, 0])\n    scale([0.5, 2, 0.1])\n    sphere(15);\n    \n    color(\"green\")\n    translate([0, -22, 28])\n    rotate([0, -25, 0])\n    scale([0.4, 1.8, 0.08])\n    sphere(15);\n    \n    color(\"green\")\n    translate([0, -24, 31])\n    rotate([0, -30, 0])\n    scale([0.3, 1.6, 0.06])\n    sphere(15);\n}\n\nmodule legs() {\n    // Left leg\n    color(\"gray\")\n    translate([-5, 0, 20])\n    cylinder(h=15, r=1.5);\n    \n    // Right leg\n    color(\"gray\")\n    translate([5, 0, 20])\n    cylinder(h=15, r=1.5);\n    \n    // Left foot\n    color(\"gray\")\n    translate([-5, 0, 5])\n    rotate([90, 0, 0])\n    cylinder(h=8, r=1.5);\n    \n    // Right foot\n    color(\"gray\")\n    translate([5, 0, 5])\n    rotate([90, 0, 0])\n    cylinder(h=8, r=1.5);\n    \n    // Toes\n    for(i=[-1, 0, 1]) {\n        color(\"gray\")\n        translate([-5 + i*2.5, 4, 5])\n        rotate([90, 0, 0])\n        cylinder(h=4, r=0.8);\n        \n        color(\"gray\")\n        translate([5 + i*2.5, 4, 5])\n        rotate([90, 0, 0])\n        cylinder(h=4, r=0.8);\n    }\n}\n\nmodule crest() {\n    // Feathers on head\n    color(\"green\")\n    for(i=[-2:2]) {\n        translate([i*3, 0, 68])\n        rotate([10, 0, i*10])\n        scale([0.5, 0.5, 1])\n        cylinder(h=8, r=2);\n    }\n}\n\n// Main assembly\nunion() {\n    body();\n    head();\n    beak();\n    eyes();\n    wing();\n    tail();\n    legs();\n    crest();\n}",
    "renders": true
  },
  {
    "animal": "parrot",
    "openscad_code": "// Parrot model - Medium complexity, realistic style\n// Body made as solid shell for reliable 3D printing\n\n$fn = 32;\n\nmodule parrot() {\n    // Main body (torso)\n    color(\"green\")\n    difference() {\n        // Outer shell\n        scale([1.2, 1, 1.3])\n        sphere(d=40);\n        \n        // Hollow inside\n        scale([1.1, 0.9, 1.2])\n        sphere(d=38);\n    }\n    \n    // Head\n    translate([0, 0, 30])\n    color(\"green\")\n    difference() {\n        sphere(d=25);\n        scale([0.9, 0.9, 0.9])\n        sphere(d=23);\n    }\n    \n    // Beak\n    translate([12, 0, 32])\n    rotate([0, -20, 0])\n    color(\"orange\")\n    difference() {\n        cylinder(h=15, d1=8, d2=2);\n        translate([0, 0, -1]) cylinder(h=17, d1=7, d2=1);\n    }\n    \n    // Lower beak\n    translate([12, 0, 28])\n    rotate([0, 20, 0])\n    color(\"orange\")\n    difference() {\n        cylinder(h=10, d1=6, d2=2);\n        translate([0, 0, -1]) cylinder(h=12, d1=5, d2=1);\n    }\n    \n    // Eyes\n    for(side = [-1, 1]) {\n        translate([8, side*6, 32])\n        color(\"black\")\n        sphere(d=4);\n        \n        translate([8, side*6, 34])\n        color(\"white\")\n        sphere(d=2);\n    }\n    \n    // Wings\n    for(side = [-1, 1]) {\n        translate([-5, side*15, 10])\n        rotate([0, 0, side*-30])\n        color(\"green\")\n        difference() {\n            // Upper wing\n            scale([1.2, 0.3, 1])\n            sphere(d=25);\n            \n            // Hollow\n            translate([0, -2, 0])\n            scale([1.1, 0.2, 0.9])\n            sphere(d=23);\n        }\n        \n        // Wing tip\n        translate([-8, side*25, 8])\n        rotate([0, 0, side*-45])\n        color(\"darkgreen\")\n        difference() {\n            scale([0.8, 0.2, 0.8])\n            sphere(d=15);\n            scale([0.7, 0.15, 0.7])\n            sphere(d=14);\n        }\n    }\n    \n    // Tail feathers\n    for(i = [0:2]) {\n        translate([-25, (i-1)*8, -5])\n        rotate([0, -10, (i-1)*10])\n        color(\"red\")\n        difference() {\n            scale([0.3, 0.1, 1.2])\n            sphere(d=20);\n            scale([0.25, 0.08, 1.1])\n            sphere(d=19);\n        }\n    }\n    \n    // Legs\n    for(side = [-1, 1]) {\n        translate([8, side*5, -25])\n        rotate([0, 0, 0])\n        color(\"gray\")\n        difference() {\n            cylinder(h=15, d=3);\n            translate([0, 0, -1])\n            cylinder(h=17, d=2.5);\n        }\n        \n        // Feet\n        translate([8, side*5, -40])\n        color(\"gray\")\n        for(j = [-1, 0, 1]) {\n            translate([j*3, 0, 0])\n            difference() {\n                cylinder(h=5, d=2);\n                translate([0, 0, -1])\n                cylinder(h=7, d=1.5);\n            }\n        }\n    }\n    \n    // Chest detail\n    translate([5, 0, 0])\n    color(\"lightgreen\")\n    difference() {\n        scale([0.8, 1.2, 1.1])\n        sphere(d=35);\n        scale([0.7, 1.1, 1])\n        sphere(d=34);\n    }\n}\n\n// Stand for stable printing\nmodule stand() {\n    translate([0, 0, -45])\n    color(\"brown\")\n    difference() {\n        cylinder(h=5, d=50);\n        cylinder(h=7, d=48);\n    }\n}\n\n// Combine parrot and stand\nunion() {\n    parrot();\n    stand();\n}",
    "renders": true
  },
  {
    "animal": "parrotfish",
    "openscad_code": "// Parrotfish - Medium Complexity, Realistic Style\n// Approx 80mm long\n\nscale([0.8,0.8,0.8]) {\n\n// Main body\ncolor(\"darkseagreen\")\nunion() {\n    // Torso\n    translate([-30,0,0])\n    rotate([0,30,0])\n    scale([1.2,0.7,0.5])\n    sphere(r=20,$fn=32);\n\n    // Tail base\n    translate([35,0,0])\n    scale([0.8,0.6,0.4])\n    cylinder(h=25,r1=15,r2=0,$fn=24);\n}\n\n// Head\ncolor(\"forestgreen\")\nunion() {\n    translate([-45,0,5])\n    scale([0.9,1,0.9])\n    sphere(r=18,$fn=32);\n\n    // Beak upper\n    translate([-60,0,10])\n    scale([1.2,0.4,0.3])\n    rotate([0,-15,0])\n    cylinder(h=20,r1=8,r2=5,$fn=12);\n\n    // Beak lower\n    translate([-60,0,2])\n    scale([1.2,0.4,0.3])\n    rotate([0,15,0])\n    cylinder(h=18,r1=6,r2=3,$fn=12);\n}\n\n// Dorsal fin\ncolor(\"mediumseagreen\")\nfor(i=[-20:15:25]) {\n    translate([i,0,15])\n    rotate([0,-90,0])\n    scale([0.6,1,0.1])\n    cylinder(h=20,r1=8,r2=0,$fn=3);\n}\n\n// Pectoral fins\ncolor(\"seagreen\")\nmodule fin(side) {\n    translate([-20,side*15,0])\n    rotate([0,0,side*20])\n    scale([0.8,0.3,0.1])\n    cylinder(h=25,r1=12,r2=5,$fn=16);\n}\nfin(1);\nfin(-1);\n\n// Caudal fin\ncolor(\"darkgreen\")\nmodule tail_fin(side) {\n    translate([45,0,0])\n    rotate([0,0,side*30])\n    scale([0.3,1,0.1])\n    cylinder(h=25,r1=15,r2=0,$fn=3);\n}\ntail_fin(1);\ntail_fin(-1);\n\n// Eyes\ncolor(\"black\")\nfor(side=[-1,1]) {\n    translate([-50,side*8,12])\n    sphere(r=3,$fn=16);\n}\n\n// Lips detail\ncolor(\"darkolivegreen\")\nfor(side=[-1,1]) {\n    translate([-58,side*5,8])\n    scale([0.5,0.3,0.2])\n    sphere(r=4,$fn=12);\n}\n\n// Body scales pattern\ncolor(\"yellowgreen\")\nfor(x=[-40:10:30]) {\n    for(y=[-12:6:12]) {\n        translate([x,y,0])\n        scale([0.3,0.3,0.1])\n        sphere(r=2,$fn=8);\n    }\n}\n\n// Tail scales\ncolor(\"darkgreen\")\nfor(x=[35:5:45]) {\n    for(y=[-8:4:8]) {\n        translate([x,y,0])\n        scale([0.2,0.2,0.05])\n        sphere(r=1.5,$fn=6);\n    }\n}\n\n}",
    "renders": true
  },
  {
    "animal": "partridge",
    "openscad_code": "// Partridge - Realistic style, medium complexity\n// Designed for 3D printing with no overhangs\n\n// Parameters\nbody_length = 40;\nbody_height = 30;\nbody_width = 25;\nhead_size = 12;\nbeak_length = 8;\nleg_height = 15;\ntail_length = 25;\nwing_span = 30;\n\n// Main module\nmodule partridge() {\n    union() {\n        // Body\n        body();\n        \n        // Head and beak\n        translate([body_length/2 - 5, 0, body_height/2 + 5])\n            head();\n        \n        // Wings\n        translate([-body_length/4, 0, body_height/2])\n            left_wing();\n        \n        mirror([0,1,0])\n            translate([-body_length/4, 0, body_height/2])\n                right_wing();\n        \n        // Legs\n        translate([0, -body_width/3, -body_height/2])\n            left_leg();\n        \n        translate([0, body_width/3, -body_height/2])\n            right_leg();\n        \n        // Tail\n        translate([-body_length/2 - 5, 0, body_height/4])\n            tail();\n    }\n}\n\nmodule body() {\n    // Main body - oval shape\n    scale([1.5, 1, 1])\n        sphere(d=body_width, $fn=30);\n    \n    // Chest bulge\n    translate([body_length/3, 0, -body_height/4])\n        sphere(d=body_width * 0.8, $fn=20);\n}\n\nmodule head() {\n    // Head sphere\n    sphere(d=head_size, $fn=20);\n    \n    // Beak\n    translate([head_size/2 + beak_length/2, 0, -head_size/4])\n        rotate([0, -20, 0])\n            scale([2, 0.5, 0.5])\n                cylinder(h=beak_length, d1=head_size/2, d2=head_size/4, $fn=8);\n    \n    // Eye\n    translate([head_size/3, head_size/3, head_size/4])\n        sphere(d=2, $fn=10);\n}\n\nmodule left_wing() {\n    // Wing base\n    rotate([0, 30, 45])\n        scale([1.2, 0.3, 1])\n            sphere(d=wing_span/2, $fn=15);\n    \n    // Wing feathers\n    for(i = [0:2]) {\n        rotate([0, 30 - i*10, 45 + i*5])\n            translate([wing_span/4 - i*3, 0, -i*2])\n                scale([1 - i*0.2, 0.2, 0.8])\n                    sphere(d=wing_span/3, $fn=8);\n    }\n}\n\nmodule right_wing() {\n    left_wing();\n}\n\nmodule left_leg() {\n    // Upper leg\n    cylinder(h=leg_height/2, d=4, $fn=8);\n    \n    // Lower leg\n    translate([0, 0, -leg_height/2])\n        cylinder(h=leg_height/2, d=3, $fn=8);\n    \n    // Foot\n    translate([2, 0, -leg_height])\n        union() {\n            cube([6, 2, 1]);\n            translate([2, -2, 0])\n                cube([2, 4, 1]);\n            translate([2, 2, 0])\n                cube([2, 4, 1]);\n        }\n}\n\nmodule right_leg() {\n    left_leg();\n}\n\nmodule tail() {\n    // Tail base\n    rotate([0, -20, 0])\n        scale([0.5, 1, 0.3])\n            sphere(d=tail_length, $fn=15);\n    \n    // Tail feathers\n    for(i = [-2:2]) {\n        rotate([0, -20 - i*5, i*10])\n            translate([-tail_length/2, i*3, 0])\n                scale([0.3, 0.1, 0.8])\n                    sphere(d=tail_length/2, $fn=8);\n    }\n}\n\n// Render the partridge\nrotate([0, 0, 180])\n    partridge();",
    "renders": true
  },
  {
    "animal": "peacock",
    "openscad_code": "// Peacock model - medium complexity realistic style\n// Scaled for 3D printing (approx 80mm length)\n\n$fn = 32;\n\n// Main module\nmodule peacock() {\n    // Body\n    body();\n    \n    // Neck and head\n    neck();\n    head();\n    \n    // Wings\n    left_wing();\n    right_wing();\n    \n    // Legs\n    left_leg();\n    right_leg();\n    \n    // Tail feathers\n    tail();\n}\n\n// Body - oval shape\nmodule body() {\n    translate([0, 0, 20])\n    scale([1.5, 1, 1.2])\n    sphere(r = 20);\n}\n\n// Neck - tapered cylinder\nmodule neck() {\n    translate([0, 23, 30])\n    rotate([90, 0, 0])\n    cylinder(h1 = 5, h2 = 8, r1 = 8, r2 = 5);\n}\n\n// Head - sphere with beak\nmodule head() {\n    union() {\n        // Head sphere\n        translate([0, 30, 35])\n        sphere(r = 12);\n        \n        // Beak\n        translate([0, 40, 35])\n        rotate([0, -30, 0])\n        scale([1, 0.5, 0.3])\n        cylinder(h = 10, r = 3);\n        \n        // Crest feathers\n        for(i = [-1:1]) {\n            translate([i * 4, 30, 48])\n            rotate([0, 0, i * 10])\n            cylinder(h = 15, r = 1.5);\n        }\n    }\n}\n\n// Left wing\nmodule left_wing() {\n    translate([-15, -5, 25])\n    rotate([0, 30, -20])\n    scale([2, 0.5, 1])\n    difference() {\n        sphere(r = 15);\n        translate([5, 0, -5])\n        cube([20, 30, 20], center = true);\n    }\n}\n\n// Right wing - mirrored\nmodule right_wing() {\n    mirror([1, 0, 0])\n    left_wing();\n}\n\n// Left leg\nmodule left_leg() {\n    translate([-5, -15, 0])\n    union() {\n        // Upper leg\n        cylinder(h = 15, r = 2.5);\n        \n        // Lower leg\n        translate([0, -5, -12])\n        cylinder(h = 12, r = 1.5);\n        \n        // Foot\n        translate([0, -8, -24])\n        cube([8, 15, 3], center = true);\n    }\n}\n\n// Right leg\nmodule right_leg() {\n    translate([5, -15, 0])\n    left_leg();\n}\n\n// Tail - fan of feathers\nmodule tail() {\n    translate([0, -20, 20])\n    rotate([0, 30, 0])\n    union() {\n        // Central feathers\n        for(i = [-4:4]) {\n            rotate([0, i * 10, 0])\n            translate([0, -40 - abs(i) * 5, 0])\n            scale([1 + abs(i) * 0.1, 0.3, 3])\n            cylinder(h = 60 - abs(i) * 5, r = 5);\n        }\n        \n        // Eye spots\n        for(i = [-3:3]) {\n            rotate([0, i * 12, 0])\n            translate([0, -70 - abs(i) * 3, 0])\n            scale(1 + abs(i) * 0.1)\n            eye_spot();\n        }\n    }\n}\n\n// Eye spot on feather\nmodule eye_spot() {\n    translate([0, 0, 8])\n    difference() {\n        // Outer ring\n        cylinder(h = 2, r = 8);\n        \n        // Inner circle\n        translate([0, 0, -0.5])\n        cylinder(h = 3, r = 5);\n        \n        // Center dot\n        translate([0, 0, -1])\n        cylinder(h = 4, r = 2);\n    }\n}\n\n// Generate the model\npeacock();",
    "renders": true
  },
  {
    "animal": "peafowl",
    "openscad_code": "// Peafowl - Medium complexity realistic style\n// Size: ~75mm long, 50mm tall, 30mm wide\n\n$fn = 32;\n\nmodule peafowl() {\n    // Main body\n    union() {\n        // Body core\n        translate([0, 0, 15]) scale([1.2, 0.8, 1]) sphere(r=10);\n        \n        // Neck\n        translate([12, 0, 30]) rotate([0, 20, 0]) cylinder(h=15, r1=4, r2=3);\n        \n        // Head\n        translate([22, 0, 38]) sphere(r=4);\n        \n        // Beak\n        translate([26, 0, 38]) rotate([0, -20, 0]) cylinder(h=6, r1=2, r2=0);\n        \n        // Crest feathers\n        for(i=[-2:2]) {\n            translate([22, i*1.5, 42]) rotate([0, 10, 0]) cylinder(h=8, r1=0.5, r2=0.2);\n        }\n        \n        // Tail base\n        translate([-8, 0, 15]) scale([0.8, 1, 0.6]) sphere(r=8);\n        \n        // Legs\n        translate([5, -4, 5]) cylinder(h=10, r=2);\n        translate([5, 4, 5]) cylinder(h=10, r=2);\n        \n        // Feet\n        translate([5, -4, 0]) scale([1.5, 1, 0.3]) sphere(r=3);\n        translate([5, 4, 0]) scale([1.5, 1, 0.3]) sphere(r=3);\n    }\n    \n    // Eye\n    translate([24, -1.5, 39]) sphere(r=0.8);\n    \n    // Wing\n    difference() {\n        translate([0, -12, 20]) rotate([0, 0, -20]) \n        scale([1, 0.3, 0.8]) sphere(r=12);\n        translate([0, -12, 20]) rotate([0, 0, -20]) \n        scale([0.8, 0.4, 0.6]) sphere(r=12);\n    }\n    \n    // Tail feathers\n    module tail_feather(angle, length) {\n        translate([-8, 0, 15]) rotate([angle, 0, 0]) {\n            hull() {\n                translate([0, 0, 0]) sphere(r=1);\n                translate([-length, 0, 0]) sphere(r=0.5);\n            }\n            \n            // Eye spots\n            for(i=[0.3:0.2:0.9]) {\n                translate([-length*i, 0, 0]) {\n                    color(\"teal\") sphere(r=2);\n                    color(\"blue\") sphere(r=1.5);\n                    color(\"gold\") sphere(r=1);\n                }\n            }\n        }\n    }\n    \n    // Main tail feathers\n    tail_feather(20, 35);\n    tail_feather(10, 32);\n    tail_feather(0, 30);\n    tail_feather(-10, 32);\n    tail_feather(-20, 35);\n    \n    // Side tail feathers\n    for(i=[1:2]) {\n        translate([-8, i*3, 15]) rotate([15, 10, 5]) \n        scale([1, 0.8, 0.8]) tail_feather(0, 25);\n        translate([-8, -i*3, 15]) rotate([15, -10, -5]) \n        scale([1, 0.8, 0.8]) tail_feather(0, 25);\n    }\n}\n\n// Position for printing\nrotate([0, 180, 0]) translate([0, 0, 0]) peafowl();",
    "renders": true
  },
  {
    "animal": "peccary",
    "openscad_code": "// Peccary model - realistic style, medium complexity\n// Dimensions: ~80mm long, 40mm tall, 30mm wide\n\n// Body parameters\nbody_length = 60;\nbody_height = 35;\nbody_width = 25;\n\n// Head parameters\nhead_length = 20;\nhead_width = 15;\nhead_height = 12;\nsnout_length = 8;\n\n// Leg parameters\nleg_height = 15;\nleg_width = 6;\nleg_depth = 8;\n\n// Ear parameters\near_size = 5;\n\n// Tail parameters\ntail_length = 10;\ntail_width = 4;\n\nmodule body() {\n    // Main torso\n    translate([0, 0, leg_height + body_height/2])\n    scale([1, 0.8, 0.6])\n    sphere(d=body_width);\n    \n    // Back hump\n    translate([-body_length/3, 0, leg_height + body_height*0.8])\n    scale([1.2, 1, 0.8])\n    sphere(d=body_width*0.8);\n    \n    // Belly\n    translate([0, 0, leg_height + 5])\n    scale([1.1, 0.7, 0.5])\n    sphere(d=body_width*0.7);\n}\n\nmodule head() {\n    // Main head\n    translate([body_length/2 + head_length/2, 0, leg_height + body_height*0.8])\n    rotate([0, -10, 0])\n    scale([1.5, 1, 1])\n    sphere(d=head_width);\n    \n    // Snout\n    translate([body_length/2 + head_length + snout_length/2, 0, leg_height + body_height*0.7])\n    scale([2, 0.7, 0.5])\n    sphere(d=snout_length);\n    \n    // Nose\n    translate([body_length/2 + head_length + snout_length + 2, 0, leg_height + body_height*0.7])\n    sphere(d=3);\n}\n\nmodule ears() {\n    // Left ear\n    translate([body_length/2 + head_length/2 - 3, head_width/2, leg_height + body_height*0.8 + 8])\n    rotate([0, 0, -30])\n    scale([0.5, 1, 2])\n    sphere(d=ear_size);\n    \n    // Right ear\n    translate([body_length/2 + head_length/2 - 3, -head_width/2, leg_height + body_height*0.8 + 8])\n    rotate([0, 0, 30])\n    scale([0.5, 1, 2])\n    sphere(d=ear_size);\n}\n\nmodule legs() {\n    // Front left leg\n    translate([body_length/3, body_width/3, leg_height/2])\n    scale([0.8, 0.9, 1])\n    cylinder(h=leg_height, d=leg_width);\n    \n    // Front right leg\n    translate([body_length/3, -body_width/3, leg_height/2])\n    scale([0.8, 0.9, 1])\n    cylinder(h=leg_height, d=leg_width);\n    \n    // Back left leg\n    translate([-body_length/3, body_width/3, leg_height/2])\n    scale([0.9, 1, 1])\n    cylinder(h=leg_height, d=leg_width);\n    \n    // Back right leg\n    translate([-body_length/3, -body_width/3, leg_height/2])\n    scale([0.9, 1, 1])\n    cylinder(h=leg_height, d=leg_width);\n    \n    // Hooves\n    for(x = [body_length/3, -body_length/3])\n        for(y = [body_width/3, -body_width/3]) {\n            translate([x, y, 1])\n            scale([1.1, 1.2, 0.3])\n            sphere(d=leg_width);\n        }\n}\n\nmodule tail() {\n    translate([-body_length/2 - tail_length/2, 0, leg_height + body_height*0.6])\n    rotate([0, 20, 0])\n    scale([3, 1, 0.5])\n    sphere(d=tail_width);\n}\n\nmodule eyes() {\n    // Left eye\n    translate([body_length/2 + head_length/2 + 2, head_width/3, leg_height + body_height*0.8 + 3])\n    sphere(d=2);\n    \n    // Right eye\n    translate([body_length/2 + head_length/2 + 2, -head_width/3, leg_height + body_height*0.8 + 3])\n    sphere(d=2);\n}\n\nmodule tusks() {\n    // Lower tusks\n    for(y = [1.5, -1.5]) {\n        translate([body_length/2 + head_length + snout_length - 1, y, leg_height + body_height*0.6])\n        rotate([0, 0, y*60])\n        scale([0.3, 0.3, 1.5])\n        cylinder(h=4, d=2);\n    }\n}\n\n// Assemble the peccary\nunion() {\n    body();\n    head();\n    ears();\n    legs();\n    tail();\n    \n    // Eyes (inset)\n    difference() {\n        eyes();\n        translate([body_length/2 + head_length/2 + 2.5, head_width/3, leg_height + body_height*0.8 + 3.5])\n        sphere(d=1);\n        translate([body_length/2 + head_length/2 + 2.5, -head_width/3, leg_height + body_height*0.8 + 3.5])\n        sphere(d=1);\n    }\n    \n    tusks();\n}",
    "renders": true
  },
  {
    "animal": "pelican",
    "openscad_code": "// Pelican model - realistic style, medium complexity\n// Designed for 3D printing with no overhangs\n\n$fn = 32;\n\nmodule body() {\n    // Main body - oval shape\n    scale([1.2, 1, 0.8])\n        sphere(20);\n}\n\nmodule neck() {\n    // Curved neck connecting body to head\n    translate([0, 15, 5])\n        rotate([0, 20, 0])\n            scale([0.6, 0.6, 2])\n                cylinder(15, 8, 5);\n}\n\nmodule head() {\n    // Pelican head with slight curve\n    translate([0, 32, 12])\n        rotate([0, -15, 0])\n            scale([0.8, 0.7, 1.1])\n                sphere(12);\n}\n\nmodule beak_upper() {\n    // Upper beak with curve\n    translate([0, 42, 15])\n        rotate([30, 0, 0])\n            scale([1.2, 2.5, 0.4])\n                cylinder(20, 8, 2);\n}\n\nmodule beak_lower() {\n    // Lower beak slightly shorter\n    translate([0, 42, 13])\n        rotate([20, 0, 0])\n            scale([1.1, 2.2, 0.3])\n                cylinder(18, 7, 1.5);\n}\n\nmodule throat_pouch() {\n    // Distensible throat pouch\n    translate([0, 45, 8])\n        rotate([45, 0, 0])\n            scale([0.9, 1.8, 1.2])\n                sphere(8);\n}\n\nmodule eye() {\n    // Small spherical eye\n    translate([-5, 30, 15])\n        sphere(2);\n}\n\nmodule wing() {\n    // Folded wing against body\n    translate([-15, 0, 5])\n        rotate([0, 0, -20])\n            scale([0.3, 1.5, 0.8])\n                cylinder(25, 15, 8);\n}\n\nmodule tail() {\n    // Short tail feathers\n    translate([0, -22, 2])\n        rotate([0, 20, 0])\n            scale([1, 0.3, 0.2])\n                cylinder(15, 12, 5);\n}\n\nmodule leg() {\n    // Simple leg with foot\n    translate([8, -10, -15])\n        cylinder(15, 2, 2);\n    \n    // Webbed foot\n    translate([8, -10, -30])\n        rotate([90, 0, 0])\n            scale([1, 0.2, 0.5])\n                cylinder(8, 6, 6);\n}\n\nmodule foot_web() {\n    // Webbing between toes\n    translate([8, -10, -30])\n        rotate([90, 0, 0])\n            scale([1.2, 0.1, 0.8])\n                cylinder(6, 6, 6);\n}\n\n// Main assembly\nunion() {\n    body();\n    neck();\n    head();\n    beak_upper();\n    beak_lower();\n    throat_pouch();\n    \n    // Left wing\n    wing();\n    \n    // Right wing (mirrored)\n    mirror([1, 0, 0])\n        wing();\n    \n    tail();\n    \n    // Left leg and foot\n    leg();\n    foot_web();\n    \n    // Right leg and foot\n    mirror([1, 0, 0]) {\n        leg();\n        foot_web();\n    }\n    \n    // Eyes\n    eye();\n    mirror([1, 0, 0])\n        eye();\n}",
    "renders": true
  },
  {
    "animal": "penguin",
    "openscad_code": "// Realistic Penguin - Medium Complexity\n// Designed for 3D printing (~70mm height)\n\n$fn = 36;\n\n// Main module\nmodule penguin() {\n    // Body\n    body();\n    \n    // Head\n    head();\n    \n    // Wings\n    wing(true);\n    wing(false);\n    \n    // Feet\n    foot(true);\n    foot(false);\n    \n    // Eyes\n    eye(true);\n    eye(false);\n    \n    // Beak\n    beak();\n    \n    // Tail\n    tail();\n}\n\n// Body - main torso\nmodule body() {\n    color(\"black\")\n    difference() {\n        // Main body shape\n        union() {\n            // Upper torso - more spherical\n            translate([0, 0, 25])\n            scale([1.2, 1, 1.3])\n            sphere(15);\n            \n            // Lower torso - elongated\n            translate([0, 0, 15])\n            scale([1.1, 0.9, 1])\n            cylinder(h=20, r1=12, r2=10);\n        }\n        \n        // White belly\n        color(\"white\")\n        translate([0, -9.5, 15])\n        scale([0.7, 0.3, 1])\n        cylinder(h=25, r1=10, r2=8);\n    }\n}\n\n// Head with beak placement reference\nmodule head() {\n    color(\"black\")\n    union() {\n        // Main head\n        translate([0, 0, 43])\n        scale([0.9, 0.8, 1])\n        sphere(12);\n        \n        // White face patch\n        color(\"white\")\n        translate([0, -7.5, 43])\n        scale([0.6, 0.4, 0.8])\n        sphere(10);\n    }\n}\n\n// Wing module with parameter for left/right\nmodule wing(left) {\n    color(\"black\")\n    translate([0, 0, 25])\n    rotate([0, 0, left ? 30 : -30])\n    translate([left ? -12 : 12, 0, 0])\n    rotate([0, left ? -10 : 10, 0])\n    scale([0.3, 1.2, 1])\n    cylinder(h=20, r1=5, r2=3);\n}\n\n// Foot module\nmodule foot(left) {\n    color(\"orange\")\n    translate([left ? -5 : 5, 0, 0])\n    rotate([0, 0, left ? 20 : -20])\n    translate([0, 8, 3])\n    scale([1.2, 2, 0.5])\n    sphere(4);\n}\n\n// Eye module\nmodule eye(left) {\n    // White of eye\n    color(\"white\")\n    translate([left ? -3.5 : 3.5, -5.5, 46])\n    sphere(2.5);\n    \n    // Pupil\n    color(\"black\")\n    translate([left ? -3.5 : 3.5, -6.5, 47.5])\n    sphere(1.2);\n}\n\n// Beak\nmodule beak() {\n    color(\"orange\")\n    translate([0, -9, 42])\n    rotate([-20, 0, 0])\n    scale([1, 0.8, 1.5])\n    cylinder(h=8, r1=3, r2=2);\n}\n\n// Tail\nmodule tail() {\n    color(\"black\")\n    translate([0, 8, 15])\n    rotate([0, 10, 0])\n    scale([1, 0.5, 1])\n    cylinder(h=12, r1=8, r2=5);\n}\n\n// Generate the penguin\npenguin();",
    "renders": true
  },
  {
    "animal": "perch",
    "openscad_code": "// Realistic 3D-printable bird perch\n// Overall dimensions ~70mm long, 25mm wide\n// No supports needed, all angles ≤45°\n\nmodule perch_assembly() {\n    // Main perch branch with natural wood texture\n    union() {\n        // Central branch\n        perch_branch(0, 0, 0);\n        \n        // Left smaller branch\n        translate([-20, -8, 5]) rotate([0, 20, -30]) \n            perch_branch(0, 0, 0, 15, 8);\n            \n        // Right smaller branch\n        translate([20, -8, 5]) rotate([0, 20, 30]) \n            perch_branch(0, 0, 0, 15, 8);\n            \n        // Bark texture rings\n        for(i = [-25:10:25])\n            translate([i, 0, 0])\n                bark_ring(10, 11.5);\n                \n        // Attachment base\n        translate([0, 0, -15])\n            base_mount();\n    }\n}\n\nmodule perch_branch(x=0, y=0, z=0, len=30, rad=10) {\n    translate([x, y, z]) {\n        // Main branch cylinder with slight taper\n        cylinder(h=len, r1=rad*0.9, r2=rad, $fn=16);\n        \n        // Add irregular surface detail\n        for(i = [0:30:len]) {\n            translate([0, 0, i]) \n                difference() {\n                    cylinder(h=3, r=rad*0.8, $fn=16);\n                    translate([0, 0, -1]) \n                        cylinder(h=5, r=rad*0.6, $fn=16);\n                }\n        }\n    }\n}\n\nmodule bark_ring(height, radius) {\n    // Create rough bark texture\n    difference() {\n        cylinder(h=height, r=radius, $fn=32);\n        \n        // Random bark grooves\n        for(angle = [0:45:315]) {\n            rotate([0, 0, angle])\n                translate([radius*0.7, -radius, 0])\n                    cube([radius*0.3, radius*2, height+1]);\n        }\n        \n        // Knot holes\n        translate([radius*0.5, 0, height/2])\n            rotate([90, 0, 0])\n                cylinder(h=radius*0.6, r=radius*0.2, $fn=8);\n    }\n}\n\nmodule base_mount() {\n    // Sturdy mounting base for cage attachment\n    difference() {\n        // Main base\n        cylinder(h=8, r=15, $fn=32);\n        \n        // Screw hole for mounting\n        translate([0, 0, -1])\n            cylinder(h=10, r=2.5, $fn=16);\n            \n        // Weight reduction cutouts\n        for(angle = [0:120:240]) {\n            rotate([0, 0, angle])\n                translate([7, 0, 2])\n                    cylinder(h=6, r=4, $fn=16);\n        }\n    }\n    \n    // Reinforcement ribs\n    for(angle = [0:90:270]) {\n        rotate([0, 0, angle])\n            translate([10, -1.5, 0])\n                cube([5, 3, 8]);\n    }\n}\n\n// Generate the complete perch\nperch_assembly();",
    "renders": true
  },
  {
    "animal": "peregrine",
    "openscad_code": "// Peregrine Falcon - Medium Complexity Realistic Style\n// Wings folded, perched pose suitable for 3D printing\n\n// Overall dimensions approximately 80mm long\n\nmodule peregrine() {\n    // Body\n    union() {\n        // Main body - oval shape\n        translate([0, 0, 15]) \n            scale([1, 0.6, 1.2])\n            sphere(d=25, $fn=32);\n        \n        // Chest bulge\n        translate([0, 5, 10])\n            scale([0.8, 0.7, 1])\n            sphere(d=20, $fn=32);\n    }\n    \n    // Head\n    translate([-20, 0, 28])\n        scale([0.9, 0.8, 0.9])\n        sphere(d=18, $fn=32);\n    \n    // Beak\n    translate([-30, 0, 28])\n        rotate([0, -20, 0])\n        scale([1, 0.3, 0.3])\n        cylinder(h=10, d1=5, d2=1, $fn=8);\n    \n    // Eyes\n    for(side = [-1, 1]) {\n        translate([-22, side*5, 30])\n            sphere(d=3, $fn=16);\n    }\n    \n    // Wings folded\n    module wing() {\n        difference() {\n            // Main wing shape\n            translate([0, 0, 0])\n                scale([1, 0.2, 0.4])\n                cube([30, 40, 20]);\n            \n            // Wing curve\n            translate([5, -1, 10])\n                rotate([0, 0, 20])\n                scale([1, 1.5, 1])\n                cylinder(h=35, d=25, $fn=32);\n        }\n    }\n    \n    // Left wing\n    translate([5, 12, 18])\n        rotate([0, 0, 30])\n        wing();\n    \n    // Right wing\n    translate([5, -12, 18])\n        rotate([0, 0, -30])\n        mirror([0, 1, 0])\n        wing();\n    \n    // Tail\n    translate([15, 0, 10])\n        rotate([0, 0, 0])\n        scale([1, 0.3, 1])\n        cube([20, 25, 5]);\n    \n    // Tail feathers\n    for(i = [-1, 0, 1]) {\n        translate([20, i*8, 10])\n            scale([1, 0.1, 0.5])\n            cube([15, 5, 3]);\n    }\n    \n    // Legs\n    module leg() {\n        union() {\n            // Upper leg\n            translate([0, 0, 0])\n                rotate([0, -30, 0])\n                cylinder(h=8, d=4, $fn=12);\n            \n            // Lower leg\n            translate([2, 0, -4])\n                rotate([0, 30, 0])\n                cylinder(h=10, d=3, $fn=12);\n        }\n    }\n    \n    // Left leg\n    translate([0, 6, 5])\n        leg();\n    \n    // Right leg\n    translate([0, -6, 5])\n        mirror([0, 1, 0])\n        leg();\n    \n    // Feet\n    module foot() {\n        // Central pad\n        translate([0, 0, -8])\n            sphere(d=6, $fn=16);\n        \n        // Toes\n        for(angle = [0, 45, -45]) {\n            translate([0, 0, -8])\n                rotate([0, 0, angle])\n                translate([4, 0, 0])\n                scale([2, 0.5, 0.5])\n                cylinder(h=8, d=3, $fn=8);\n        }\n        \n        // Back toe\n        translate([0, 0, -8])\n            rotate([0, 0, 180])\n            translate([3, 0, 0])\n            scale([1.5, 0.5, 0.5])\n            cylinder(h=6, d=3, $fn=8);\n    }\n    \n    // Left foot\n    translate([0, 6, 5])\n        foot();\n    \n    // Right foot\n    translate([0, -6, 5])\n        mirror([0, 1, 0])\n        foot();\n}\n\n// Base for stability\nmodule base() {\n    translate([0, 0, -10])\n        difference() {\n            cylinder(h=2, d=40, $fn=32);\n            translate([0, 0, -1])\n                cylinder(h=4, d=35, $fn=32);\n        }\n}\n\n// Union all parts\nunion() {\n    peregrine();\n    base();\n}",
    "renders": true
  },
  {
    "animal": "petrel",
    "openscad_code": "// Petrel 3D Model - Medium Complexity Realistic Style\n// Wingspan: ~80mm\n\n$fn = 32;\n\nmodule body() {\n    // Main body - elongated ellipsoid\n    scale([1.2, 0.8, 0.6])\n    sphere(10);\n}\n\nmodule head() {\n    // Smaller sphere for head with beak\n    translate([12, 0, 0])\n    scale([0.9, 0.8, 0.8])\n    sphere(8);\n    \n    // Beak - cone shape\n    translate([18, 0, -2])\n    rotate([0, 20, 0])\n    cylinder(h=10, r1=3, r2=0.5);\n}\n\nmodule eye() {\n    // Small sphere for eye\n    translate([14, 3.5, 2])\n    color(\"black\")\n    sphere(1.2);\n    \n    translate([14, -3.5, 2])\n    color(\"black\")\n    sphere(1.2);\n}\n\nmodule wing(side) {\n    // Main wing - tapered shape\n    translate([0, side*12, 0])\n    rotate([0, 0, side*5])\n    scale([2.5, 0.15, 0.8])\n    cube([15, 10, 5], center=true);\n    \n    // Wing tip\n    translate([10, side*20, -1])\n    rotate([0, side*10, 0])\n    scale([0.8, 0.1, 0.6])\n    sphere(6);\n    \n    // Wing feathers - layered ellipsoids\n    for(i = [3:4:15]) {\n        translate([i, side*14, -1])\n        rotate([0, 0, side*30])\n        scale([0.8, 0.05, 0.3])\n        sphere(4);\n    }\n}\n\nmodule tail() {\n    // Tail feathers - fan shape\n    translate([-15, 0, -2])\n    rotate([20, 0, 0])\n    scale([1.2, 0.1, 0.8])\n    cube([8, 12, 3], center=true);\n    \n    // Additional tail feathers\n    for(i = [-1:1]) {\n        translate([-13, i*4, -3])\n        rotate([25, 0, i*15])\n        scale([0.8, 0.05, 0.5])\n        cube([6, 2, 1]);\n    }\n}\n\nmodule feet() {\n    // Left foot\n    translate([2, 4, -6])\n    rotate([30, 0, 0])\n    cylinder(h=4, r=1.2);\n    translate([2, 4, -9])\n    sphere(1.5);\n    \n    // Right foot\n    translate([2, -4, -6])\n    rotate([30, 0, 0])\n    cylinder(h=4, r=1.2);\n    translate([2, -4, -9])\n    sphere(1.5);\n    \n    // Webbed toes\n    for(i = [-1:1]) {\n        translate([2, 4+i*2, -9])\n        scale([0.5, 0.2, 0.1])\n        cube([3, 4, 1], center=true);\n    }\n}\n\nmodule petrel() {\n    union() {\n        body();\n        head();\n        eye();\n        wing(1);  // Right wing\n        wing(-1); // Left wing\n        tail();\n        feet();\n    }\n}\n\n// Main assembly\nscale([0.8, 0.8, 0.8])\nrotate([0, 0, -10])\npetrel();",
    "renders": true
  },
  {
    "animal": "phalanger",
    "openscad_code": "// Phalanger 3D Model - Realistic Style with Medium Complexity\n// Basic proportions based on sugar glider (Petaurus breviceps)\n\n$fn = 32;  // Smooth curves for realistic appearance\n\n// Overall dimensions (mm)\nbody_length = 60;\nbody_height = 25;\ntail_length = 45;\n\nmodule body() {\n    // Main torso - oval shape\n    union() {\n        // Upper torso\n        translate([0, 0, body_height/2])\n            scale([1.2, 0.8, 0.6])\n                sphere(d=body_length);\n        \n        // Lower belly\n        translate([0, 0, body_height/4])\n            scale([1.1, 0.7, 0.4])\n                sphere(d=body_length*0.9);\n    }\n}\n\nmodule head() {\n    // Position head at front of body\n    translate([body_length/2 + 8, 0, body_height/2 + 5]) {\n        union() {\n            // Main head sphere\n            sphere(d=20);\n            \n            // Snout extension\n            translate([8, 0, -2])\n                scale([1.5, 0.8, 0.8])\n                    sphere(d=12);\n            \n            // Ears - positioned on sides\n            for(side = [-1, 1]) {\n                translate([0, side*8, 5])\n                    rotate([0, side*20, 0])\n                        scale([0.3, 1, 1.5])\n                            sphere(d=10);\n            }\n        }\n        \n        // Eyes - simple spheres\n        for(side = [-1, 1]) {\n            translate([3, side*6, 2])\n                color(\"black\")\n                    sphere(d=3);\n        }\n    }\n}\n\nmodule limbs() {\n    // Front limbs (arms)\n    for(side = [-1, 1]) {\n        // Shoulder position\n        translate([body_length/4, side*body_length/3, body_height/2]) {\n            rotate([0, 0, side*30])\n                // Upper arm\n                cylinder(h=15, d1=6, d2=4);\n            \n            // Lower arm and hand\n            translate([12, 0, 0])\n                rotate([0, 90, side*20])\n                    cylinder(h=12, d1=4, d2=3);\n            \n            // Hand\n            translate([12, 6, 0])\n                sphere(d=6);\n        }\n    }\n    \n    // Hind limbs (legs)\n    for(side = [-1, 1]) {\n        // Hip position\n        translate([-body_length/4, side*body_length/4, body_height/3]) {\n            rotate([20, 0, side*45])\n                // Upper leg\n                cylinder(h=18, d1=7, d2=5);\n            \n            // Lower leg\n            translate([0, 10, -12])\n                rotate([30, 0, 0])\n                    cylinder(h=15, d1=5, d2=4);\n            \n            // Foot\n            translate([0, 15, -18])\n                rotate([0, side*20, 0])\n                    scale([2, 1, 0.5])\n                        sphere(d=8);\n        }\n    }\n}\n\nmodule tail() {\n    // Position tail at rear of body\n    translate([-body_length/2 - 5, 0, body_height/3]) {\n        // Tapered tail segments for natural curve\n        for(i = [0:4]) {\n            rotate([0, 5*i, 0])\n                translate([-i*tail_length/5, 0, -i*2])\n                    cylinder(h=tail_length/5, \n                           d1=8-i, \n                           d2=7-i);\n        }\n    }\n}\n\nmodule patagium() {\n    // Gliding membrane between front and hind limbs\n    // Create wedge shape between limbs\n    \n    // Right side membrane\n    translate([0, body_length/3, body_height/3]) {\n        // Points for membrane polygon\n        polyhedron(\n            points = [\n                [body_length/4, 0, 0],           // front limb\n                [-body_length/4, 0, 0],          // rear limb\n                [-body_length/4, 0, -10],        // bottom rear\n                [body_length/4, 0, -8],          // bottom front\n                [body_length/4, -15, -5],        // wing tip\n                [-body_length/4, -15, -8]        // wing tip rear\n            ],\n            faces = [\n                [0,1,2,3],  // top surface\n                [0,4,5,1],  // side surface\n                [0,3,4],    // front triangle\n                [1,5,2],    // rear triangle\n                [3,2,5,4]   // bottom surface\n            ]\n        );\n    }\n    \n    // Mirror for left side\n    mirror([0,1,0])\n        translate([0, body_length/3, body_height/3]) {\n            polyhedron(\n                points = [\n                    [body_length/4, 0, 0],\n                    [-body_length/4, 0, 0],\n                    [-body_length/4, 0, -10],\n                    [body_length/4, 0, -8],\n                    [body_length/4, -15, -5],\n                    [-body_length/4, -15, -8]\n                ],\n                faces = [\n                    [0,1,2,3],\n                    [0,4,5,1],\n                    [0,3,4],\n                    [1,5,2],\n                    [3,2,5,4]\n                ]\n            );\n        }\n}\n\n// Main assembly\nunion() {\n    body();\n    head();\n    limbs();\n    tail();\n    patagium();\n}\n\n// Add support base for 3D printing\ntranslate([0, 0, -5])\n    cube([body_length + 20, body_length/2, 2], center=true);",
    "renders": true
  },
  {
    "animal": "pheasant",
    "openscad_code": "// Pheasant Model - Realistic Style, Medium Complexity\n// Using only basic OpenSCAD primitives and operations\n\n$fn = 32; // Smooth curves for 3D printing\n\nmodule body() {\n    // Main body - elongated ellipsoid\n    translate([0, 0, 5])\n    scale([2.5, 1.2, 1.5])\n    sphere(r=8);\n}\n\nmodule head() {\n    // Head - smaller sphere\n    translate([0, 0, 18])\n    scale([0.8, 0.7, 0.9])\n    sphere(r=6);\n}\n\nmodule beak() {\n    // Beak - cone shape\n    translate([0, 0, 22])\n    rotate([-30, 0, 0])\n    cylinder(h=4, r1=1.5, r2=0.3);\n}\n\nmodule eye() {\n    // Eye - small sphere\n    translate([2.5, 3.5, 19])\n    sphere(r=0.8);\n}\n\nmodule wattle() {\n    // Red wattle below beak\n    translate([0, -2, 17])\n    scale([0.8, 0.3, 0.8])\n    sphere(r=2);\n}\n\nmodule neck() {\n    // Neck connecting head to body\n    translate([0, 0, 12])\n    rotate([-30, 0, 0])\n    cylinder(h=6, r1=3, r2=4);\n}\n\nmodule wing() {\n    // Wing - flattened and positioned\n    translate([-10, 2, 8])\n    rotate([0, 0, -20])\n    scale([1.5, 0.3, 0.8])\n    sphere(r=6);\n}\n\nmodule tail() {\n    // Tail feathers - multiple curved cylinders\n    for(i = [-1:0.5:1]) {\n        translate([18, i*2, 8])\n        rotate([0, -20 + i*10, 0])\n        cylinder(h=15, r1=1.5, r2=0.5);\n    }\n    \n    // Main tail center\n    translate([20, 0, 10])\n    rotate([0, -20, 0])\n    scale([0.3, 1, 2])\n    sphere(r=5);\n}\n\nmodule legs() {\n    // Left leg\n    translate([-2, 2, 0])\n    cylinder(h=8, r=0.8);\n    \n    // Right leg\n    translate([2, 2, 0])\n    cylinder(h=8, r=0.8);\n    \n    // Feet\n    translate([-2, 4, 0])\n    cube([4, 2, 0.5], center=true);\n}\n\nmodule crest() {\n    // Head crest feathers\n    for(i = [0:30:150]) {\n        translate([0, 0, 25])\n        rotate([i-75, 0, 0])\n        cylinder(h=2, r1=0.5, r2=0.2);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    beak();\n    eye();\n    mirror([1, 0, 0]) eye(); // Second eye\n    wattle();\n    neck();\n    wing();\n    mirror([0, 1, 0]) wing(); // Second wing\n    tail();\n    legs();\n    crest();\n}",
    "renders": true
  },
  {
    "animal": "phoebe",
    "openscad_code": "// OpenSCAD Phoebe (realistic style, medium complexity)\n\n// Overall size: 70mm wingspan, 35mm tail to beak\n// Wall thickness: 2mm for 3D printability\n\n// Main body module\nmodule body() {\n    // Central body - ellipsoid approximation with spheres\n    translate([-5, 0, 5]) scale([1.5, 1.2, 1]) sphere(r=10, $fn=32);\n    // Slight bulge for chest\n    translate([-8, 0, 3]) scale([1.2, 1.1, 0.8]) sphere(r=8, $fn=32);\n}\n\n// Head module\nmodule head() {\n    // Main head sphere\n    sphere(r=8, $fn=32);\n    \n    // Beak - cone made from cylinder\n    translate([8, 0, -2]) rotate([0, -20, 0]) cylinder(h=12, r1=3, r2=1, $fn=16);\n    \n    // Eyes - small spheres\n    translate([3, 4, 2]) sphere(r=1.5, $fn=16);\n    translate([3, -4, 2]) sphere(r=1.5, $fn=16);\n}\n\n// Wing module with feather details\nmodule wing(side) {\n    // Mirror left/right\n    mirror([side, 0, 0]) {\n        // Main wing shape - tapered ellipsoid\n        translate([0, 25, 5]) rotate([0, 0, -20]) \n            scale([0.8, 2.5, 0.3]) sphere(r=10, $fn=32);\n        \n        // Primary feathers - staggered cylinders\n        for(i=[0:3]) {\n            translate([i*3-3, 35-i*2, 3]) rotate([0, 0, -30-i*5])\n                cylinder(h=8, r1=2, r2=1, $fn=8);\n        }\n        \n        // Secondary feathers\n        for(i=[0:2]) {\n            translate([-2-i*2, 25-i*3, 2]) rotate([0, 0, -15])\n                cylinder(h=6, r1=1.5, r2=0.8, $fn=8);\n        }\n    }\n}\n\n// Tail module\nmodule tail() {\n    // Central tail feathers\n    for(i=[-1:1]) {\n        translate([-15, i*4, 2]) rotate([0, 10, 0])\n            cylinder(h=12, r1=3, r2=2, $fn=8);\n    }\n    \n    // Outer tail feathers\n    for(i=[-2, 2]) {\n        translate([-12, i*6, 1]) rotate([0, 5, i*5])\n            cylinder(h=10, r1=2, r2=1.5, $fn=8);\n    }\n}\n\n// Leg and feet module\nmodule legs() {\n    // Left leg\n    translate([-5, 4, -8]) cylinder(h=8, r=1.5, $fn=16);\n    translate([-5, 4, -16]) {\n        // Three forward toes\n        for(i=[-1:1]) {\n            translate([i*2, 0, 0]) rotate([0, 20, 0])\n                cylinder(h=4, r=1, $fn=8);\n        }\n        // Back toe\n        translate([0, -2, 0]) rotate([0, -20, 0])\n            cylinder(h=3, r=1, $fn=8);\n    }\n    \n    // Right leg (mirror of left)\n    translate([-5, -4, -8]) cylinder(h=8, r=1.5, $fn=16);\n    translate([-5, -4, -16]) {\n        for(i=[-1:1]) {\n            translate([i*2, 0, 0]) rotate([0, 20, 0])\n                cylinder(h=4, r=1, $fn=8);\n        }\n        translate([0, 2, 0]) rotate([0, -20, 0])\n            cylinder(h=3, r=1, $fn=8);\n    }\n}\n\n// Assemble the phoebe\nunion() {\n    // Main body\n    body();\n    \n    // Head positioned at front of body\n    translate([12, 0, 8]) head();\n    \n    // Wings\n    wing(1);    // Right wing\n    wing(-1);   // Left wing\n    \n    // Tail at rear\n    tail();\n    \n    // Legs and feet\n    legs();\n}",
    "renders": true
  },
  {
    "animal": "pigeon",
    "openscad_code": "// Realistic pigeon - medium complexity\n// Dimensions: ~60mm long, 35mm tall, 25mm wide\n\n$fn = 32;\n\nmodule pigeon() {\n    // Body\n    color(\"gray\")\n    union() {\n        // Main body - elongated sphere\n        translate([0, 0, 15])\n        scale([1.4, 1, 1])\n        sphere(12);\n        \n        // Chest protrusion\n        translate([8, 0, 10])\n        scale([1.2, 0.8, 0.6])\n        sphere(10);\n        \n        // Tail base\n        translate([-20, 0, 15])\n        scale([1.5, 0.4, 0.3])\n        sphere(8);\n    }\n    \n    // Head\n    color(\"gray\")\n    translate([18, 0, 28])\n    sphere(9);\n    \n    // Beak\n    color(\"darkorange\")\n    translate([27, 0, 28])\n    rotate([0, -10, 0])\n    scale([2, 0.3, 0.3])\n    cylinder(h=8, r1=2, r2=0.5);\n    \n    // Eyes\n    color(\"black\")\n    for(side = [-1, 1]) {\n        translate([21, side*3.5, 31])\n        sphere(1.5);\n    }\n    \n    // Wings\n    color(\"lightgray\")\n    union() {\n        // Left wing\n        translate([-5, 12, 20])\n        rotate([0, 0, -20])\n        scale([0.8, 2.2, 0.2])\n        sphere(10);\n        \n        // Right wing\n        translate([-5, -12, 20])\n        rotate([0, 0, 20])\n        scale([0.8, 2.2, 0.2])\n        sphere(10);\n    }\n    \n    // Tail feathers\n    color(\"darkgray\")\n    for(i = [0:2]) {\n        translate([-26, (i-1)*3, 15])\n        rotate([0, 10, 0])\n        scale([0.3, 0.8, 0.1])\n        cube([15, 8, 2]);\n    }\n    \n    // Legs\n    color(\"darkorange\")\n    for(side = [-1, 1]) {\n        translate([5, side*4, 5])\n        cylinder(h=10, r=1.5);\n        \n        // Feet\n        translate([5, side*4, 0])\n        rotate([0, 90, 0])\n        union() {\n            cylinder(h=6, r=1.2);\n            for(toe = [-1, 0, 1]) {\n                translate([0, toe*2, -3])\n                rotate([0, 20*toe, 0])\n                cube([4, 1, 1]);\n            }\n        }\n    }\n}\n\n// Main assembly\npigeon();",
    "renders": true
  },
  {
    "animal": "pika",
    "openscad_code": "// Pika model - realistic style, medium complexity\n// Uses basic primitives and moderate anatomical detail\n\n// Overall scale factor\n$fn = 32;\nscale_factor = 0.8;\n\n// Colors for preview\ncolor_body = [255, 220, 200];\ncolor_ears = [255, 200, 180];\ncolor_eyes = [50, 50, 50];\ncolor_nose = [255, 150, 150];\n\nmodule pika() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        union() {\n            // Main body\n            translate([0, 0, 10]) {\n                scale([1.2, 1, 1]) sphere(r=15);\n            }\n            \n            // Belly\n            translate([0, -8, 8]) {\n                scale([1.1, 0.7, 0.6]) sphere(r=12);\n            }\n            \n            // Head\n            translate([0, 15, 25]) {\n                sphere(r=12);\n            }\n            \n            // Snout\n            translate([0, 24, 22]) {\n                scale([0.8, 1.2, 0.8]) sphere(r=8);\n            }\n            \n            // Ears\n            // Left ear\n            translate([-8, 12, 35]) {\n                rotate([0, -20, -30]) {\n                    scale([0.8, 0.3, 2]) sphere(r=8);\n                }\n            }\n            \n            // Right ear\n            translate([8, 12, 35]) {\n                rotate([0, -20, 30]) {\n                    scale([0.8, 0.3, 2]) sphere(r=8);\n                }\n            }\n            \n            // Ear inner left\n            difference() {\n                translate([-8, 12, 35]) {\n                    rotate([0, -20, -30]) {\n                        scale([0.6, 0.2, 1.6]) sphere(r=8);\n                    }\n                }\n                translate([-8, 12, 35]) {\n                    rotate([0, -20, -30]) {\n                        scale([0.5, 0.15, 1.5]) sphere(r=8);\n                    }\n                }\n            }\n            \n            // Ear inner right\n            difference() {\n                translate([8, 12, 35]) {\n                    rotate([0, -20, 30]) {\n                        scale([0.6, 0.2, 1.6]) sphere(r=8);\n                    }\n                }\n                translate([8, 12, 35]) {\n                    rotate([0, -20, 30]) {\n                        scale([0.5, 0.15, 1.5]) sphere(r=8);\n                    }\n                }\n            }\n            \n            // Legs\n            // Front legs\n            for(side = [-1, 1]) {\n                translate([side * 10, 10, 0]) {\n                    rotate([0, -15, 0]) {\n                        cylinder(h=15, r1=5, r2=4);\n                    }\n                }\n                \n                // Paws\n                translate([side * 10, 10, -2]) {\n                    sphere(r=4.5);\n                }\n            }\n            \n            // Back legs\n            for(side = [-1, 1]) {\n                translate([side * 8, -10, 0]) {\n                    rotate([0, 15, 0]) {\n                        cylinder(h=18, r1=6, r2=5);\n                    }\n                }\n                \n                // Hind paws\n                translate([side * 8, -10, -3]) {\n                    sphere(r=5.5);\n                }\n            }\n            \n            // Tail\n            translate([0, -15, 12]) {\n                scale([1, 1.2, 0.8]) sphere(r=8);\n            }\n            \n            // Eyes\n            for(side = [-1, 1]) {\n                translate([side * 4, 20, 28]) {\n                    sphere(r=2);\n                }\n                \n                // Eye highlights\n                translate([side * 3.5, 19.5, 29]) {\n                    sphere(r=0.8);\n                }\n            }\n            \n            // Nose\n            translate([0, 26, 24]) {\n                sphere(r=2.5);\n            }\n            \n            // Mouth area\n            translate([0, 27, 22]) {\n                scale([1.2, 0.5, 0.5]) sphere(r=3);\n            }\n            \n            // Whiskers\n            for(side = [-1, 1]) {\n                for(angle = [20:30:80]) {\n                    rotate([0, 0, side * angle]) {\n                        translate([side * 12, 24, 22]) {\n                            cylinder(h=8, r1=0.8, r2=0.3);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Add support base for 3D printing\ntranslate([0, 0, -5]) {\n    cylinder(h=2, r=20, $fn=64);\n}\n\n// Generate the pika\npika();",
    "renders": true
  },
  {
    "animal": "pike",
    "openscad_code": "// Realistic Pike Fish - Medium Complexity\n// Overall length ~80mm\n\n$fn = 32;\n\n// Main module\nmodule pike() {\n    // Body segments\n    body();\n    \n    // Head with mouth\n    head();\n    \n    // Tail\n    tail();\n    \n    // Fins\n    dorsal_fin();\n    pectoral_fin_left();\n    pectoral_fin_right();\n    anal_fin();\n    caudal_fin();\n}\n\n// Fish body - elongated ellipsoid segments\nmodule body() {\n    color(\"silver\")\n    union() {\n        // Body segment 1 (widest)\n        translate([0, 0, 0])\n        scale([1, 0.4, 0.3])\n        sphere(20);\n        \n        // Body segment 2\n        translate([-15, 0, 0])\n        scale([0.9, 0.35, 0.25])\n        sphere(18);\n        \n        // Body segment 3\n        translate([-30, 0, 0])\n        scale([0.75, 0.3, 0.2])\n        sphere(15);\n        \n        // Body segment 4\n        translate([-45, 0, 0])\n        scale([0.6, 0.25, 0.15])\n        sphere(12);\n    }\n}\n\n// Pike head with duck-like snout\nmodule head() {\n    color(\"silver\")\n    union() {\n        // Main head\n        translate([20, 0, 0])\n        scale([1.2, 0.5, 0.4])\n        sphere(15);\n        \n        // Snout extension\n        translate([33, 0, 0])\n        scale([1.5, 0.2, 0.1])\n        sphere(10);\n        \n        // Lower jaw\n        translate([28, 0, -5])\n        rotate([15, 0, 0])\n        cube([15, 4, 3], center=true);\n        \n        // Eye socket\n        translate([25, 7, 3])\n        sphere(3);\n        \n        // Eye\n        translate([26, 7.5, 3.5])\n        color(\"black\")\n        sphere(1.5);\n    }\n}\n\n// Tail connecting to body\nmodule tail() {\n    color(\"silver\")\n    translate([-55, 0, 0])\n    scale([0.4, 0.2, 0.1])\n    sphere(10);\n}\n\n// Dorsal fin - sharp pointed\nmodule dorsal_fin() {\n    color(\"darkgreen\")\n    translate([-15, 0, 10])\n    rotate([0, 0, 0])\n    union() {\n        for(i = [0:3]) {\n            translate([-i*3, 0, i*2])\n            rotate([0, 0, i*5])\n            cube([3, 1, 8-i], center=true);\n        }\n    }\n}\n\n// Left pectoral fin\nmodule pectoral_fin_left() {\n    color(\"darkgreen\")\n    translate([5, -10, -3])\n    rotate([0, 0, -20])\n    cube([12, 1, 8], center=true);\n}\n\n// Right pectoral fin\nmodule pectoral_fin_right() {\n    color(\"darkgreen\")\n    translate([5, 10, -3])\n    rotate([0, 0, 20])\n    cube([12, 1, 8], center=true);\n}\n\n// Anal fin\nmodule anal_fin() {\n    color(\"darkgreen\")\n    translate([-35, 0, -8])\n    rotate([0, 0, 180])\n    union() {\n        for(i = [0:2]) {\n            translate([-i*2, 0, -i])\n            cube([2, 1, 6-i], center=true);\n        }\n    }\n}\n\n// Caudal fin (tail fin)\nmodule caudal_fin() {\n    color(\"darkgreen\")\n    translate([-65, 0, 0])\n    union() {\n        // Upper lobe\n        rotate([0, 0, -20])\n        cube([15, 1, 8], center=true);\n        \n        // Lower lobe\n        rotate([0, 0, 20])\n        cube([15, 1, 8], center=true);\n    }\n}\n\n// Generate the pike\npike();",
    "renders": true
  },
  {
    "animal": "pilot",
    "openscad_code": "// Pilot figure - realistic style, medium complexity\n// Approximate height: 70mm\n\n// Global parameters\n$fn = 32;\nbody_color = \"silver\";\nhead_color = [0.9, 0.8, 0.7];\n\n// Main assembly\nmodule pilot() {\n    // Head\n    translate([0, 0, 58]) head();\n    \n    // Neck\n    translate([0, 0, 54]) neck();\n    \n    // Torso\n    translate([0, 0, 30]) torso();\n    \n    // Arms\n    translate([10, 0, 45]) rotate([0, 0, 15]) right_arm();\n    translate([-10, 0, 45]) rotate([0, 0, -15]) mirror([1, 0, 0]) right_arm();\n    \n    // Legs\n    translate([3, 0, 0]) left_leg();\n    translate([-3, 0, 0]) mirror([1, 0, 0]) left_leg();\n    \n    // Boots\n    translate([3, 0, -20]) boot();\n    translate([-3, 0, -20]) mirror([1, 0, 0]) boot();\n}\n\n// Head with facial features\nmodule head() {\n    color(head_color) {\n        // Main head shape\n        sphere(r = 8);\n        \n        // Nose\n        translate([0, 7.5, 0]) scale([1, 0.8, 1]) sphere(r = 1.5);\n        \n        // Eyes\n        translate([2.5, 7, 2]) sphere(r = 1);\n        translate([-2.5, 7, 2]) sphere(r = 1);\n        \n        // Eyebrows\n        translate([2.5, 7.5, 4]) cube([1.5, 0.5, 0.3], center = true);\n        translate([-2.5, 7.5, 4]) cube([1.5, 0.5, 0.3], center = true);\n        \n        // Mouth\n        translate([0, 7, -2]) scale([2, 0.3, 0.5]) sphere(r = 1);\n        \n        // Ears\n        translate([0, 8, 0]) rotate([90, 0, 0]) cylinder(h = 2, r1 = 2.5, r2 = 2);\n        translate([8, 0, 0]) rotate([0, 90, 0]) cylinder(h = 2, r1 = 2.5, r2 = 2);\n        translate([-8, 0, 0]) rotate([0, -90, 0]) cylinder(h = 2, r1 = 2.5, r2 = 2);\n    }\n}\n\n// Neck\nmodule neck() {\n    color(body_color) cylinder(h = 4, r = 3.5);\n}\n\n// Torso with flight suit details\nmodule torso() {\n    color(body_color) {\n        // Main torso\n        translate([0, 0, 10]) scale([1.2, 0.8, 1]) cylinder(h = 20, r1 = 10, r2 = 8);\n        \n        // Flight suit collar\n        translate([0, 0, 19]) cylinder(h = 2, r1 = 4, r2 = 5);\n        \n        // Chest pockets\n        for (i = [-1, 1]) {\n            translate([i * 6, 5, 15]) cube([4, 0.5, 3]);\n            translate([i * 6, 5.2, 16.5]) cube([3, 0.5, 0.5]);\n        }\n        \n        // Belt\n        translate([0, 4, 10]) cube([18, 0.5, 2]);\n    }\n}\n\n// Right arm assembly\nmodule right_arm() {\n    color(body_color) {\n        // Upper arm\n        translate([0, 0, -8]) rotate([90, 0, 0]) cylinder(h = 12, r1 = 3.5, r2 = 3);\n        \n        // Elbow joint\n        translate([0, 0, -15]) sphere(r = 3);\n        \n        // Forearm\n        translate([0, 4, -15]) rotate([90, 0, 0]) cylinder(h = 10, r1 = 3, r2 = 2.5);\n        \n        // Hand\n        translate([0, 9, -15]) scale([1, 1.2, 0.8]) sphere(r = 2.5);\n        \n        // Fingers\n        for (i = [-1, 0, 1]) {\n            translate([i * 0.8, 11, -15]) cylinder(h = 2, r = 0.6);\n        }\n    }\n}\n\n// Left leg (right leg is mirrored)\nmodule left_leg() {\n    color(body_color) {\n        // Thigh\n        translate([0, 0, -10]) cylinder(h = 15, r1 = 4, r2 = 3.5);\n        \n        // Knee\n        translate([0, 0, -18]) sphere(r = 3.5);\n        \n        // Shin\n        translate([0, 2, -18]) cylinder(h = 12, r1 = 3.5, r2 = 3);\n    }\n}\n\n// Boot\nmodule boot() {\n    color(\"black\") {\n        // Main boot\n        union() {\n            translate([0, 2, -5]) cube([6, 12, 8], center = true);\n            translate([0, 8, -2]) sphere(r = 4);\n        }\n        \n        // Sole\n        translate([0, 2, -9]) cube([7, 13, 2], center = true);\n    }\n}\n\n// Generate the pilot\npilot();",
    "renders": true
  },
  {
    "animal": "pinemarten",
    "openscad_code": "// Pine Marten (Martes martes) - Medium complexity realistic model\n// Dimensions: ~80mm length, 30mm height, 20mm width\n\n$fn = 24;\n\nmodule body() {\n    // Main torso - elongated ellipsoid\n    scale([1.5, 0.8, 0.6])\n        sphere(15);\n}\n\nmodule head() {\n    // Head - slightly flattened sphere with snout\n    union() {\n        translate([0, 0, 2])\n            scale([0.8, 0.7, 0.6])\n                sphere(8);\n        \n        // Snout extension\n        translate([6, 0, -1])\n            scale([1.2, 0.7, 0.5])\n                sphere(4);\n    }\n}\n\nmodule ears() {\n    // Ears - small triangular shapes\n    for(side = [-1, 1]) {\n        translate([2, side * 6, 3])\n            rotate([0, side * 15, 0])\n                scale([0.5, 0.2, 1])\n                    cylinder(h=4, r1=3, r2=1);\n    }\n}\n\nmodule eyes() {\n    // Eyes - small spheres\n    color(\"black\")\n    for(side = [-1, 1]) {\n        translate([5.5, side * 2.5, 1])\n            sphere(1);\n    }\n}\n\nmodule nose() {\n    // Nose - small ellipsoid\n    translate([8.5, 0, 0])\n        scale([1, 0.7, 0.5])\n            sphere(1.5);\n}\n\nmodule legs() {\n    // Four legs with paws\n    for(side = [-1, 1]) {\n        // Front legs\n        translate([-5, side * 7, -7])\n            rotate([10, 0, side * 10])\n                union() {\n                    cylinder(h=10, r=2);\n                    translate([0, 0, -10])\n                        sphere(2.5);\n                }\n        \n        // Rear legs\n        translate([10, side * 6, -6])\n            rotate([20, 0, side * -10])\n                union() {\n                    cylinder(h=12, r=2.2);\n                    translate([0, 0, -12])\n                        sphere(2.8);\n                }\n    }\n}\n\nmodule tail() {\n    // Bushy tail - tapered cylinder\n    translate([-20, 0, 0])\n        rotate([20, 0, 0])\n            cylinder(h=25, r1=6, r2=3);\n}\n\nmodule fur_texture() {\n    // Simplified fur texture using small bumps\n    for(i = [0:5:360]) {\n        for(j = [0:10:50]) {\n            rotate([0, 0, i])\n                translate([j - 25, 0, 0])\n                    sphere(0.5);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Body\n    body();\n    \n    // Head assembly\n    translate([-12, 0, 5])\n        union() {\n            head();\n            ears();\n            eyes();\n            nose();\n        }\n    \n    // Legs\n    legs();\n    \n    // Tail\n    tail();\n    \n    // Fur texture on body\n    translate([0, 0, 9])\n        scale([1.4, 0.9, 1])\n            fur_texture();\n}",
    "renders": true
  },
  {
    "animal": "pipistrelle",
    "openscad_code": "// Pipistrelle bat - realistic style, medium complexity\n// Size: ~80mm wingspan\n\n// Wing thickness for 3D printing\nwing_t = 0.8;\n\n// Main body module\nmodule body() {\n    // Torso - elongated ellipsoid\n    translate([0, 0, 5])\n    scale([1.5, 1, 1])\n    sphere(r=8, $fn=32);\n    \n    // Head\n    translate([11, 0, 8])\n    sphere(r=6, $fn=32);\n    \n    // Snout\n    translate([17, 0, 8])\n    scale([1.5, 0.8, 0.8])\n    sphere(r=3, $fn=32);\n    \n    // Ears - pipistrelle style\n    translate([10, 5, 14])\n    rotate([0, -20, 0])\n    scale([0.3, 1, 2])\n    cylinder(h=8, r1=3, r2=1, $fn=8);\n    \n    mirror([0,1,0])\n    translate([10, 5, 14])\n    rotate([0, -20, 0])\n    scale([0.3, 1, 2])\n    cylinder(h=8, r1=3, r2=1, $fn=8);\n}\n\n// Wing structure\nmodule wing() {\n    // Main wing membrane\n    linear_extrude(height=wing_t)\n    polygon(points=[\n        [0, 0], [25, 0], [35, 8], [40, 15], \n        [38, 25], [32, 32], [25, 35], [15, 36],\n        [8, 35], [3, 30], [1, 20], [0, 0]\n    ]);\n    \n    // Wing bones\n    for(i=[0:30:150]) {\n        rotate([0, 0, i])\n        translate([0, 0, wing_t/2])\n        linear_extrude(height=wing_t)\n        polygon(points=[\n            [0, 0], [20, 0], [22, -1], [23, -2], [24, 0]\n        ]);\n    }\n}\n\n// Leg module\nmodule legs() {\n    // Left leg\n    translate([-2, 5, 0])\n    rotate([0, 90, 0])\n    cylinder(h=8, r=1.5, $fn=8);\n    \n    // Left foot with toes\n    translate([-2, 5, -1])\n    rotate([90, 0, 0])\n    for(i=[-15:15:15]) {\n        rotate([0, 0, i])\n        translate([0, 3, 0])\n        cylinder(h=4, r=0.5, $fn=6);\n    }\n    \n    // Right leg\n    mirror([0,1,0])\n    translate([-2, 5, 0])\n    rotate([0, 90, 0])\n    cylinder(h=8, r=1.5, $fn=8);\n    \n    mirror([0,1,0])\n    translate([-2, 5, -1])\n    rotate([90, 0, 0])\n    for(i=[-15:15:15]) {\n        rotate([0, 0, i])\n        translate([0, 3, 0])\n        cylinder(h=4, r=0.5, $fn=6);\n    }\n}\n\n// Tail membrane\nmodule tail() {\n    translate([-12, 0, 3])\n    rotate([0, 90, 0])\n    linear_extrude(height=wing_t)\n    polygon(points=[\n        [0, 0], [8, 0], [12, -5], [15, -8], \n        [12, -15], [8, -18], [0, -20], [-8, -18],\n        [-12, -15], [-15, -8], [-12, -5], [-8, 0], [0, 0]\n    ]);\n}\n\n// Assembly\nunion() {\n    // Body\n    body();\n    \n    // Left wing\n    translate([0, 0, 10])\n    rotate([0, 0, 90])\n    wing();\n    \n    // Right wing\n    mirror([0,1,0])\n    translate([0, 0, 10])\n    rotate([0, 0, 90])\n    wing();\n    \n    // Legs\n    legs();\n    \n    // Tail\n    tail();\n}",
    "renders": true
  },
  {
    "animal": "pipit",
    "openscad_code": "// Pipit Bird - Realistic Medium Complexity\n// Size: ~80mm wingspan, printable upright\n\n$fn = 32;\nbody_length = 45;\nbody_height = 18;\nwing_span = 80;\ntail_length = 35;\nhead_size = 12;\nbeak_length = 10;\nleg_length = 15;\n\nmodule body() {\n    // Main body - oval shape\n    difference() {\n        scale([1.5, 1, 1.2]) \n            sphere(d=body_height);\n        \n        // Remove bottom flat\n        translate([0, 0, -body_height/2-1])\n            cube([body_length*2, body_length*2, body_height], center=true);\n    }\n}\n\nmodule head() {\n    // Head sphere\n    translate([body_length/2+2, 0, body_height/2-2])\n        sphere(d=head_size);\n    \n    // Beak - cone shape\n    translate([body_length/2+head_size/2+beak_length/2, 0, body_height/2-2])\n        rotate([0, 90, 0])\n            cylinder(h=beak_length, d1=head_size/3, d2=1);\n}\n\nmodule wing() {\n    // Main wing shape\n    difference() {\n        scale([1, 0.2, 0.4])\n            sphere(d=wing_span/2);\n        \n        // Feather notches\n        for(i = [-3:3]) {\n            translate([i*8-5, 0, -wing_span/4])\n                rotate([0, 10*i, 0])\n                    cube([15, 3, 8], center=true);\n        }\n    }\n}\n\nmodule wings() {\n    // Left wing\n    translate([-body_length/4, -body_height/2-2, body_height/2-4])\n        rotate([0, 0, -20])\n            wing();\n    \n    // Right wing\n    translate([-body_length/4, body_height/2+2, body_height/2-4])\n        rotate([0, 0, 20])\n            mirror([0,1,0])\n                wing();\n}\n\nmodule tail() {\n    // Fan tail\n    difference() {\n        translate([-body_length/2-tail_length/2, 0, -body_height/4])\n            scale([1.2, 0.3, 1])\n                cube([tail_length, wing_span/3, body_height/2], center=true);\n        \n        // Tail feather separation\n        for(i = [-2:2]) {\n            translate([-body_length/2-5, i*6, -body_height/4])\n                cube([tail_length, 1, body_height/2+2], center=true);\n        }\n    }\n}\n\nmodule legs() {\n    // Left leg\n    translate([0, -4, -body_height/2-1])\n        cylinder(h=leg_length, d=2);\n    \n    // Right leg\n    translate([0, 4, -body_height/2-1])\n        cylinder(h=leg_length, d=2);\n    \n    // Feet\n    translate([0, -4, -body_height/2-leg_length-1])\n        cube([6, 1, 2], center=true);\n    \n    translate([0, 4, -body_height/2-leg_length-1])\n        cube([6, 1, 2], center=true);\n}\n\nmodule eyes() {\n    // Left eye\n    translate([body_length/2+head_size/2-2, -head_size/3, body_height/2-1])\n        sphere(d=2);\n    \n    // Right eye\n    translate([body_length/2+head_size/2-2, head_size/3, body_height/2-1])\n        sphere(d=2);\n}\n\n// Assemble the pipit\nunion() {\n    body();\n    head();\n    wings();\n    tail();\n    legs();\n    color(\"black\") eyes();\n}",
    "renders": true
  },
  {
    "animal": "piranha",
    "openscad_code": "// Realistic Piranha - Medium Complexity\n// Overall length: ~90mm, suitable for 3D printing\n\n$fn = 32;\nwall = 1.2;\n\nmodule fish_body() {\n    // Main body - elongated ellipsoid\n    scale([1, 0.6, 0.4])\n        sphere(25);\n}\n\nmodule tail_fin() {\n    // Tail fin - two curved plates\n    translate([-40, 0, 0]) {\n        // Upper lobe\n        rotate([0, -20, 0])\n            scale([0.3, 2, 0.1])\n                sphere(15);\n        // Lower lobe\n        rotate([0, 20, 0])\n            scale([0.3, 2, 0.1])\n                sphere(15);\n    }\n}\n\nmodule dorsal_fin() {\n    // Dorsal fin - triangular shape\n    translate([0, 0, 10]) {\n        rotate([90, 0, 0])\n            linear_extrude(height=15, center=true, convexity=10)\n                polygon(points=[[0,0], [20,0], [10,10]]);\n    }\n}\n\nmodule pectoral_fins() {\n    // Side fins - two symmetric\n    for (side = [1, -1]) {\n        translate([10, side*12, -5]) {\n            rotate([0, side*20, 0])\n                scale([1.5, 1, 0.2])\n                    sphere(8);\n        }\n    }\n}\n\nmodule anal_fin() {\n    // Anal fin - smaller fin underneath\n    translate([-10, 0, -8]) {\n        rotate([-90, 0, 0])\n            linear_extrude(height=10, center=true, convexity=10)\n                polygon(points=[[0,0], [15,0], [7.5,5]]);\n    }\n}\n\nmodule head() {\n    // Piranha head - more angular\n    translate([25, 0, 0]) {\n        // Main head shape\n        scale([1.2, 0.8, 0.9])\n            sphere(15);\n        \n        // Snout extension\n        translate([10, 0, -2])\n            scale([2, 0.8, 0.6])\n                sphere(8);\n    }\n}\n\nmodule jaws() {\n    // Lower jaw\n    translate([30, 0, -5]) {\n        rotate([-20, 0, 0])\n            scale([1.6, 0.8, 0.4])\n                sphere(10);\n    }\n}\n\nmodule teeth(count=8) {\n    // Triangular teeth along jaw\n    color(\"white\")\n    for (i = [0:count-1]) {\n        angle = 360/count * i;\n        radius = 15;\n        x = 30 + cos(angle) * radius * 0.2;\n        y = sin(angle) * radius * 0.4;\n        z = -3 - abs(sin(angle)) * 2;\n        \n        translate([x, y, z]) {\n            rotate([0, 0, angle])\n                rotate([20, 0, 0])\n                    scale([0.3, 0.3, 1])\n                        cylinder(h=3, r1=0.5, r2=0);\n        }\n    }\n}\n\nmodule eye() {\n    // Eyes on sides of head\n    for (side = [1, -1]) {\n        translate([30, side*8, 3]) {\n            // Eye socket\n            color(\"black\")\n            sphere(3);\n            // Eye highlight\n            translate([1, 1, 1])\n                scale([0.5, 0.5, 0.5])\n                    color(\"white\")\n                    sphere(1);\n        }\n    }\n}\n\nmodule gill_slits() {\n    // Gill openings\n    for (i = [0:2]) {\n        translate([15 - i*2, 12, -3 + i*0.5]) {\n            rotate([0, 90, 0])\n                scale([0.1, 2, 1])\n                    cylinder(h=1, r=2);\n        }\n    }\n}\n\n// Assemble the piranha\nunion() {\n    fish_body();\n    tail_fin();\n    dorsal_fin();\n    pectoral_fins();\n    anal_fin();\n    head();\n    jaws();\n    teeth();\n    eye();\n    gill_slits();\n}",
    "renders": true
  },
  {
    "animal": "pitta",
    "openscad_code": "// Realistic 3D Printable Pitta (Bird)\n// Medium complexity model using basic OpenSCAD primitives\n// Overall size: ~80mm length\n\n$fn = 32;  // Smooth curves for 3D printing\n\nmodule pitta() {\n    // Body proportions\n    body_length = 40;\n    body_height = 25;\n    body_width = 22;\n    \n    // Head\n    translate([body_length/2 - 5, 0, body_height/2 + 8]) {\n        // Main head sphere\n        sphere(d=18);\n        \n        // Beak\n        translate([9, 0, -2]) {\n            rotate([0, -20, 0]) {\n                cylinder(h=12, d1=3, d2=1.5);\n            }\n        }\n        \n        // Eyes\n        for(side = [-1, 1]) {\n            translate([3, side*5, 2]) {\n                sphere(d=4);\n                translate([1, 0, 0]) {\n                    sphere(d=2);\n                }\n            }\n        }\n    }\n    \n    // Main body\n    translate([0, 0, body_height/2]) {\n        // Torso - ellipsoid shape\n        scale([1, 0.8, 0.7]) {\n            sphere(d=body_length);\n        }\n    }\n    \n    // Wings\n    for(side = [-1, 1]) {\n        translate([-5, side*12, body_height/2 + 5]) {\n            rotate([0, side*10, -20]) {\n                // Wing shape\n                difference() {\n                    scale([1.2, 0.3, 0.8]) {\n                        sphere(d=body_length*0.7);\n                    }\n                    // Wing feather details\n                    for(i = [1:3]) {\n                        translate([-5 + i*3, 0, -2 + i]) {\n                            rotate([0, 0, -10*i]) {\n                                cube([8, 1, 1], center=true);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Tail\n    translate([-body_length/2 - 8, 0, body_height/2 - 3]) {\n        // Fan tail\n        for(angle = [-30:15:30]) {\n            rotate([0, 0, angle]) {\n                translate([-5, 0, 0]) {\n                    scale([1, 0.1, 0.4]) {\n                        cylinder(h=15, d=8);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Legs\n    for(side = [-1, 1]) {\n        translate([side*5, 0, 0]) {\n            // Upper leg\n            cylinder(h=12, d=3);\n            \n            // Lower leg\n            translate([0, 0, 12]) {\n                rotate([20, 0, 0]) {\n                    cylinder(h=10, d=2.5);\n                    \n                    // Foot\n                    translate([0, 0, 10]) {\n                        // Toes forward\n                        for(toe = [-1, 0, 1]) {\n                            translate([toe*3, 2, 0]) {\n                                rotate([0, 90, 0]) {\n                                    cylinder(h=6, d=1.5);\n                                }\n                            }\n                        }\n                        // Back toe\n                        translate([0, -3, 0]) {\n                            rotate([0, 90, 0]) {\n                                cylinder(h=4, d=1.5);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Chest/belly details\n    translate([0, 0, body_height/2 - 10]) {\n        scale([0.9, 0.7, 0.5]) {\n            sphere(d=body_length);\n        }\n    }\n    \n    // Back pattern details\n    for(i = [1:5]) {\n        translate([-body_length/2 + i*8, 0, body_height/2 + 5]) {\n            scale([0.8, 0.6, 0.3]) {\n                sphere(d=6);\n            }\n        }\n    }\n}\n\n// Generate the pitta\npitta();",
    "renders": true
  },
  {
    "animal": "plover",
    "openscad_code": "// Plover 3D Model - Realistic Style, Medium Complexity\n// Overall dimensions: ~70mm length x 30mm width x 25mm height\n\n$fn = 36;\n\nmodule bird_body() {\n    // Main body - elongated ellipse shape\n    union() {\n        // Upper torso\n        translate([0, 0, 5])\n            scale([1.2, 0.7, 0.6])\n            sphere(r=10);\n        \n        // Lower belly\n        translate([0, 0, 2])\n            scale([1.3, 0.8, 0.5])\n            sphere(r=9);\n        \n        // Rump\n        translate([-12, 0, 4])\n            scale([0.8, 0.6, 0.5])\n            sphere(r=7);\n    }\n}\n\nmodule head() {\n    // Head with beak\n    union() {\n        // Main head\n        translate([12, 0, 8])\n            scale([0.9, 0.7, 0.7])\n            sphere(r=7);\n        \n        // Beak\n        translate([19, 0, 8])\n            rotate([0, -10, 0])\n            scale([1.5, 0.2, 0.2])\n            cylinder(r1=3, r2=0.5, h=10);\n    }\n}\n\nmodule eye() {\n    // Simple eye\n    translate([14, 3, 9])\n        sphere(r=1);\n}\n\nmodule wing(side) {\n    // Wing with feather layers\n    mirror([side, 0, 0]) {\n        translate([-2, 0, 7])\n            rotate([0, 0, 20])\n            scale([1, 0.2, 0.1])\n            cylinder(r1=10, r2=5, h=3);\n        \n        // Wing tip\n        translate([5, 0, 7.5])\n            rotate([0, 0, 30])\n            scale([0.8, 0.15, 0.05])\n            cylinder(r1=8, r2=3, h=2);\n    }\n}\n\nmodule tail() {\n    // Fan tail\n    difference() {\n        translate([-15, 0, 6])\n            rotate([0, 15, 0])\n            scale([1, 0.8, 0.2])\n            cylinder(r1=8, r2=6, h=3);\n        \n        // Tail notch\n        translate([-15, 0, 7])\n            cube([10, 4, 3], center=true);\n    }\n}\n\nmodule leg(side) {\n    // Leg with webbed foot\n    translate([side * 4, 0, 0]) {\n        // Upper leg\n        translate([0, 0, 4])\n            rotate([80, 0, 0])\n            cylinder(r=1.5, h=8);\n        \n        // Lower leg\n        translate([0, 7, 0])\n            rotate([90, 0, 0])\n            cylinder(r=1.2, h=7);\n        \n        // Webbed foot\n        translate([0, 14, -3])\n            rotate([0, 0, 0])\n            scale([1, 0.3, 0.2])\n            cube([8, 4, 1], center=true);\n        \n        // Toes\n        for(i = [-1:1]) {\n            translate([i * 2.5, 14, -3.5])\n                rotate([0, 0, i * 15])\n                scale([0.3, 1, 0.2])\n                cube([1, 3, 0.5]);\n        }\n    }\n}\n\nmodule plover() {\n    union() {\n        bird_body();\n        head();\n        \n        // Eyes\n        color(\"black\") {\n            eye();\n            mirror([0, 1, 0]) eye();\n        }\n        \n        // Wings\n        wing(1);\n        wing(-1);\n        \n        // Tail\n        tail();\n        \n        // Legs\n        leg(1);\n        leg(-1);\n    }\n}\n\n// Main assembly\nscale([1, 1, 1])\n    plover();",
    "renders": true
  },
  {
    "animal": "pochard",
    "openscad_code": "// Pochard duck - medium complexity realistic style\n// Overall length ~80mm, wingspan ~50mm, height ~35mm\n\n$fn=32;\n\nmodule body() {\n    // Main body - oval shape\n    difference() {\n        scale([1.2, 1, 0.8]) sphere(r=20);\n        translate([0, 0, -16]) cube([50, 50, 20], center=true);\n    }\n    \n    // Chest protrusion\n    translate([15, 0, -10]) \n        scale([1.5, 1.2, 1]) sphere(r=8);\n}\n\nmodule head() {\n    // Head sphere\n    translate([-20, 0, 8]) {\n        sphere(r=12);\n        \n        // Forehead bump\n        translate([4, 0, 4]) sphere(r=4);\n    }\n}\n\nmodule bill() {\n    // Main bill\n    translate([-34, 0, 6]) {\n        rotate([0, -10, 0]) {\n            scale([1.8, 1, 0.6]) sphere(r=6);\n            \n            // Upper mandible\n            translate([2, 0, 2]) \n                scale([1.2, 0.9, 0.4]) sphere(r=6);\n                \n            // Lower mandible\n            translate([2, 0, -2]) \n                scale([1.1, 0.9, 0.3]) sphere(r=6);\n        }\n        \n        // Nostril\n        translate([0, 3, 1]) \n            rotate([0, 90, 0]) \n                cylinder(h=1, r=0.5, center=true);\n    }\n}\n\nmodule neck() {\n    // Neck connection\n    hull() {\n        translate([-20, 0, 8]) sphere(r=6);\n        translate([-10, 0, 2]) sphere(r=8);\n    }\n}\n\nmodule wings() {\n    // Left wing\n    translate([0, 12, 5]) {\n        rotate([0, 0, -15]) {\n            scale([1, 0.3, 0.1]) sphere(r=18);\n            \n            // Wing tip\n            translate([8, 0, 0]) \n                scale([0.5, 0.3, 0.1]) sphere(r=10);\n        }\n    }\n    \n    // Right wing\n    mirror([0, 1, 0]) \n        translate([0, 12, 5]) {\n            rotate([0, 0, -15]) {\n                scale([1, 0.3, 0.1]) sphere(r=18);\n                \n                translate([8, 0, 0]) \n                    scale([0.5, 0.3, 0.1]) sphere(r=10);\n            }\n        }\n}\n\nmodule tail() {\n    // Tail fan\n    translate([22, 0, 0]) {\n        rotate([0, -20, 0]) {\n            scale([0.5, 1.2, 0.3]) sphere(r=12);\n            \n            // Tail feathers\n            for(i=[-1:1]) {\n                translate([2, i*5, 0]) \n                    scale([0.3, 0.4, 0.2]) sphere(r=8);\n            }\n        }\n    }\n}\n\nmodule legs() {\n    // Left leg\n    translate([5, 8, -12]) {\n        cylinder(h=15, r=2);\n        \n        // Webbed foot\n        translate([0, 0, -16]) {\n            rotate([0, 0, -30]) {\n                scale([1.5, 1, 0.3]) sphere(r=6);\n                \n                // Toes\n                for(i=[-1, 0, 1]) {\n                    translate([i*4, 0, 0]) \n                        scale([0.3, 0.8, 0.2]) sphere(r=4);\n                }\n            }\n        }\n    }\n    \n    // Right leg\n    translate([5, -8, -12]) {\n        cylinder(h=15, r=2);\n        \n        translate([0, 0, -16]) {\n            rotate([0, 0, 30]) {\n                scale([1.5, 1, 0.3]) sphere(r=6);\n                \n                for(i=[-1, 0, 1]) {\n                    translate([i*4, 0, 0]) \n                        scale([0.3, 0.8, 0.2]) sphere(r=4);\n                }\n            }\n        }\n    }\n}\n\nmodule eyes() {\n    // Left eye\n    translate([-25, 6, 10]) {\n        sphere(r=2);\n        translate([0.5, 0, 0]) sphere(r=1);\n    }\n    \n    // Right eye\n    translate([-25, -6, 10]) {\n        sphere(r=2);\n        translate([0.5, 0, 0]) sphere(r=1);\n    }\n}\n\n// Main assembly\nunion() {\n    body();\n    neck();\n    head();\n    bill();\n    wings();\n    tail();\n    legs();\n    eyes();\n}",
    "renders": true
  },
  {
    "animal": "polecat",
    "openscad_code": "// Polecat model - medium complexity realistic style\n// Overall dimensions ~70mm long, 25mm wide, 30mm high\n\n// Body parameters\nbody_length = 60;\nbody_height = 20;\nbody_width = 15;\n\n// Head parameters\nhead_length = 15;\nhead_width = 10;\nhead_height = 12;\n\n// Leg parameters\nleg_length = 8;\nleg_width = 4;\nleg_height = 6;\n\n// Tail parameters\ntail_length = 25;\ntail_width = 6;\ntail_height = 5;\n\n// Ear parameters\near_size = 4;\n\n// Create the main body\nmodule body() {\n    // Main torso\n    union() {\n        // Central body\n        translate([-body_length/2, 0, 0])\n            scale([1, 0.6, 0.4])\n            sphere(d=body_width);\n        \n        // Chest area\n        translate([-body_length/2 + 5, 0, -2])\n            scale([1.2, 0.7, 0.5])\n            sphere(d=body_width);\n        \n        // Rump\n        translate([body_length/2 - 8, 0, 0])\n            scale([0.8, 0.5, 0.4])\n            sphere(d=body_width);\n    }\n}\n\n// Create the head\nmodule head() {\n    union() {\n        // Main head shape\n        translate([-body_length/2 - head_length/2 - 2, 0, body_height/2 + 5])\n            scale([1.2, 0.9, 1])\n            sphere(d=head_width);\n        \n        // Snout\n        translate([-body_length/2 - head_length - 3, 0, body_height/2 + 3])\n            rotate([0, -10, 0])\n            scale([1.5, 0.7, 0.6])\n            sphere(d=head_width/2);\n        \n        // Ears\n        for(side = [-1, 1]) {\n            translate([-body_length/2 - head_length/2, side * (head_width/2 - 1), body_height/2 + 12])\n                rotate([0, side * 20, 0])\n                scale([0.5, 0.3, 1])\n                cylinder(h=ear_size, d1=ear_size, d2=2);\n        }\n    }\n}\n\n// Create legs\nmodule legs() {\n    for(side = [-1, 1]) {\n        for(pos = [0.3, 0.7]) {\n            // Front legs\n            translate([-body_length/2 + body_length * 0.2, side * (body_width/2 - 2), -leg_height/2])\n                rotate([10, 0, side * 5])\n                scale([0.8, 0.9, 1])\n                cylinder(h=leg_length, d=leg_width);\n            \n            // Back legs\n            translate([-body_length/2 + body_length * pos, side * (body_width/2 - 2), -leg_height/2])\n                rotate([5, 0, side * -5])\n                scale([0.9, 1, 1.1])\n                cylinder(h=leg_length, d=leg_width);\n        }\n    }\n}\n\n// Create tail\nmodule tail() {\n    hull() {\n        translate([body_length/2, 0, tail_height/2])\n            sphere(d=tail_width);\n        translate([body_length/2 + tail_length, 0, tail_height])\n            sphere(d=tail_width/2);\n    }\n}\n\n// Create facial features\nmodule face() {\n    // Eyes\n    for(side = [-1, 1]) {\n        translate([-body_length/2 - head_length - 2, side * (head_width/4), body_height/2 + 7])\n            rotate([0, -10, 0])\n            sphere(d=1.5);\n    }\n    \n    // Nose\n    translate([-body_length/2 - head_length - 5, 0, body_height/2 + 3])\n        sphere(d=2);\n}\n\n// Assemble the polecat\nunion() {\n    body();\n    head();\n    legs();\n    tail();\n    color(\"black\") face();\n}\n\n// Add base plate for stability\ntranslate([0, 0, -leg_height - 2])\n    cube([body_length + tail_length + 10, body_width + 10, 2], center=true);",
    "renders": true
  },
  {
    "animal": "pollock",
    "openscad_code": "// Pollock fish - medium complexity realistic style\n// Size: ~80mm length, 3D printable with no overhangs\n\n$fn = 24;\n\nmodule fish_body() {\n    // Main body - elongated ellipsoid\n    scale([1, 0.6, 0.25]) sphere(d = 60);\n    \n    // Tail base extension\n    translate([28, 0, 0])\n        scale([1.2, 0.4, 0.2]) sphere(d = 30);\n}\n\nmodule tail_fin() {\n    // Tail fin - forked caudal fin\n    translate([38, 0, 0]) rotate([0, 90, 0]) {\n        // Upper lobe\n        translate([0, 0, 5])\n            rotate([15, 0, 0])\n                scale([0.3, 1, 0.1]) cylinder(h = 25, d1 = 20, d2 = 5);\n        \n        // Lower lobe\n        translate([0, 0, -5])\n            rotate([-15, 0, 0])\n                scale([0.3, 1, 0.1]) cylinder(h = 25, d1 = 20, d2 = 5);\n    }\n}\n\nmodule dorsal_fin() {\n    // First dorsal fin\n    translate([5, 0, 7]) rotate([0, -90, 15])\n        scale([0.15, 1, 0.1]) cylinder(h = 20, d1 = 12, d2 = 2);\n    \n    // Second dorsal fin\n    translate([-10, 0, 6]) rotate([0, -90, 10])\n        scale([0.15, 1, 0.1]) cylinder(h = 15, d1 = 10, d2 = 2);\n}\n\nmodule anal_fin() {\n    // Anal fin\n    translate([-5, 0, -6]) rotate([0, 90, -10])\n        scale([0.15, 1, 0.1]) cylinder(h = 15, d1 = 10, d2 = 2);\n}\n\nmodule pectoral_fin() {\n    // Left pectoral fin\n    translate([5, 8, -2]) rotate([0, 0, 30])\n        scale([0.1, 0.8, 0.05]) cylinder(h = 18, d1 = 12, d2 = 6);\n    \n    // Right pectoral fin\n    mirror([0, 1, 0]) \n        translate([5, 8, -2]) rotate([0, 0, 30])\n            scale([0.1, 0.8, 0.05]) cylinder(h = 18, d1 = 12, d2 = 6);\n}\n\nmodule head_features() {\n    // Head extension\n    translate([-25, 0, 0])\n        scale([0.8, 0.7, 0.6]) sphere(d = 25);\n    \n    // Mouth\n    translate([-30, 0, -3])\n        rotate([0, 0, 90])\n            scale([1, 0.3, 0.2]) cylinder(h = 8, d = 5);\n    \n    // Eyes\n    // Left eye\n    translate([-22, 7, 2])\n        sphere(d = 4);\n    \n    // Right eye\n    translate([-22, -7, 2])\n        sphere(d = 4);\n    \n    // Eye pupils\n    translate([-23, 7, 2.5])\n        sphere(d = 2);\n    translate([-23, -7, 2.5])\n        sphere(d = 2);\n}\n\nmodule lateral_line() {\n    // Lateral line - series of small scales\n    for(i = [0:5:20]) {\n        translate([i - 10, 0, 2])\n            scale([0.5, 0.8, 0.1]) sphere(d = 3);\n    }\n}\n\n// Main assembly\nunion() {\n    fish_body();\n    tail_fin();\n    dorsal_fin();\n    anal_fin();\n    pectoral_fin();\n    head_features();\n    lateral_line();\n}",
    "renders": true
  },
  {
    "animal": "pony",
    "openscad_code": "// Realistic Medium-Complexity Pony – OpenSCAD\n// Approximate length 75 mm, height 55 mm\n// Wall thickness ≥ 1 mm for FDM printing, no extreme overhangs\n\n$fa = 2; $fs = 0.5;\n\n// Main body union\nunion() {\n    // Torso\n    torso();\n    \n    // Head and neck\n    translate([22,0,18]) rotate([0,-15,0]) head_neck();\n    \n    // Legs\n    for(side=[-1,1]) {\n        // Front legs\n        translate([15, side*6, 0]) leg(16);\n        // Rear legs\n        translate([-15, side*6, 0]) leg(18);\n    }\n    \n    // Tail\n    translate([-28,0,15]) rotate([0,30,0]) tail();\n    \n    // Ears\n    for(side=[-1,1]) {\n        translate([28, side*5, 31]) rotate([0,10*side,20*side]) ear(side);\n    }\n}\n\nmodule torso() {\n    // Main barrel\n    translate([0,0,15]) scale([1,0.7,0.6]) sphere(20);\n    // Chest slope\n    translate([18,0,8]) rotate([0,-25,0]) scale([1,0.9,0.5]) cylinder(h=15, r1=12, r2=8);\n    // Belly cut\n    difference() {\n        translate([0,0,14]) cube([40,28,20], center=true);\n        translate([0,0,8]) cube([42,30,16], center=true);\n    }\n}\n\nmodule head_neck() {\n    difference() {\n        union() {\n            // Neck\n            translate([-5,0,0]) rotate([0,-10,0]) scale([0.7,0.7,1]) cylinder(h=20, r=7, $fn=16);\n            // Head\n            translate([8,0,5]) scale([1.2,0.8,0.9]) sphere(10);\n            // Muzzle\n            translate([16,0,2]) rotate([0,-10,0]) scale([0.8,0.6,0.6]) cylinder(h=10, r=6, r2=4);\n        }\n        // Eye sockets\n        for(side=[-1,1]) {\n            translate([12, side*3.5, 6]) rotate([0,10,0]) sphere(2.5);\n        }\n        // Nostrils\n        translate([18, 0, 0]) scale([1,0.5,0.5]) sphere(1.5);\n    }\n}\n\nmodule leg(h) {\n    // Upper leg\n    translate([0,0,h/2]) scale([0.6,0.6,1]) cylinder(h=h, r=5, $fn=12);\n    // Lower leg taper\n    translate([0,0,0]) scale([0.5,0.5,1]) cylinder(h=h/2, r=4, r2=3.5, $fn=12);\n    // Hoof\n    difference() {\n        translate([0,0,-3]) scale([1,1,0.5]) cylinder(h=4, r=3, $fn=12);\n        translate([0,0,-3.5]) scale([0.7,0.7,1]) cylinder(h=4.5, r=3, $fn=12);\n    }\n}\n\nmodule tail() {\n    // Base\n    rotate([0,-20,0]) cylinder(h=15, r=4, r2=2, $fn=12);\n    // Strands loop\n    for(i=[0:15]) {\n        rotate([0,10*sin(i*20), i*12]) \n            translate([0,0,-15]) \n            scale([0.2,0.2,1]) \n            cylinder(h=15+2*i, r=2, $fn=6);\n    }\n}\n\nmodule ear(side) {\n    difference() {\n        // Ear shell\n        scale([0.5,1.8,1.8]) rotate([0,0,30*side]) cylinder(h=8, r1=3, r2=0, $fn=8);\n        // Inner ear cut\n        scale([0.4,1.4,1.4]) rotate([0,0,30*side]) translate([0,0,1]) cylinder(h=7, r1=2.5, r2=0, $fn=8);\n    }\n}",
    "renders": true
  },
  {
    "animal": "porgy",
    "openscad_code": "// Porgy fish - medium complexity realistic model\n// Size: ~80mm long\n\n$fn = 32;\n\nmodule fish_body() {\n    // Main body - ellipsoid shape\n    scale([1.2, 0.6, 0.4])\n    sphere(d=50);\n}\n\nmodule fish_head() {\n    // Rounded head\n    translate([25, 0, 0])\n    scale([1.3, 1, 1])\n    sphere(d=35);\n    \n    // Snout protrusion\n    translate([40, 0, -2])\n    scale([0.8, 0.6, 0.4])\n    sphere(d=15);\n}\n\nmodule dorsal_fin() {\n    // Main dorsal fin base\n    translate([-5, 0, 15])\n    rotate([0, 15, 0])\n    scale([1, 0.1, 1.5])\n    cube([30, 3, 20], center=true);\n    \n    // Fin rays\n    for(i = [-14:4:14]) {\n        translate([0, 2, 15 + i])\n        rotate([0, 15 - abs(i)*0.5, 0])\n        scale([0.1, 1, 0.8])\n        cube([30, 0.5, 8], center=true);\n    }\n}\n\nmodule tail_fin() {\n    // Tail base\n    translate([-35, 0, 0])\n    rotate([0, -10, 0])\n    scale([0.2, 1, 1.5])\n    cube([20, 3, 30], center=true);\n    \n    // Upper tail lobe\n    translate([-35, 0, 12])\n    rotate([-20, 0, 0])\n    scale([0.5, 0.1, 1])\n    cube([15, 3, 20], center=true);\n    \n    // Lower tail lobe\n    translate([-35, 0, -12])\n    rotate([20, 0, 0])\n    scale([0.5, 0.1, 1])\n    cube([15, 3, 20], center=true);\n}\n\nmodule pectoral_fin(left_right = 1) {\n    // Pectoral fin\n    translate([10, left_right * 20, -5])\n    rotate([0, 0, left_right * -30])\n    scale([1, 0.1, 0.8])\n    cube([15, 3, 12], center=true);\n    \n    // Fin rays\n    for(i = [-5:2:5]) {\n        translate([10 + i, left_right * 20, -5])\n        rotate([0, 0, left_right * (-30 + i*3)])\n        scale([0.1, 1, 0.6])\n        cube([10, 0.5, 8], center=true);\n    }\n}\n\nmodule anal_fin() {\n    // Anal fin\n    translate([-10, 0, -15])\n    rotate([0, -15, 0])\n    scale([1, 0.1, 1.2])\n    cube([20, 3, 15], center=true);\n    \n    // Fin rays\n    for(i = [-7:2:7]) {\n        translate([-10, 2, -15 + i])\n        rotate([0, -15 + abs(i)*0.5, 0])\n        scale([0.1, 1, 0.7])\n        cube([15, 0.5, 6], center=true);\n    }\n}\n\nmodule eye(left_right = 1) {\n    // Eye socket\n    translate([30, left_right * 10, 3])\n    scale([0.8, 1, 1])\n    sphere(d=6);\n    \n    // Eyeball\n    translate([31, left_right * 10, 3])\n    sphere(d=4);\n}\n\nmodule mouth() {\n    // Mouth opening\n    translate([42, 0, -5])\n    rotate([0, -10, 0])\n    scale([1.5, 0.6, 0.3])\n    sphere(d=10);\n}\n\nmodule lateral_line() {\n    // Lateral line scales\n    for(i = [-20:5:25]) {\n        translate([i, 0, 0])\n        scale([0.8, 0.9, 0.9])\n        sphere(d=3);\n    }\n}\n\nmodule gill_cover(left_right = 1) {\n    // Gill cover (operculum)\n    translate([20, left_right * 8, -2])\n    rotate([0, 0, left_right * -20])\n    scale([0.8, 1, 1.2])\n    sphere(d=12);\n}\n\n// Main assembly\nunion() {\n    // Body parts\n    fish_body();\n    fish_head();\n    \n    // Fins\n    dorsal_fin();\n    tail_fin();\n    pectoral_fin(1);   // Right fin\n    pectoral_fin(-1);  // Left fin\n    anal_fin();\n    \n    // Details\n    eye(1);    // Right eye\n    eye(-1);   // Left eye\n    mouth();\n    gill_cover(1);\n    gill_cover(-1);\n    lateral_line();\n}\n\n// Base for 3D printing stability\ntranslate([0, 0, -25])\nscale([1.5, 1, 0.1])\nsphere(d=60);",
    "renders": true
  },
  {
    "animal": "porcupine",
    "openscad_code": "// Porcupine model - medium complexity, realistic style\n// Overall dimensions approximately 80mm long, 50mm tall\n\nmodule body() {\n    // Main body - elongated ellipsoid\n    scale([1.2, 0.8, 0.6])\n    sphere(25, $fn=32);\n}\n\nmodule head() {\n    // Head - smaller sphere slightly flattened\n    translate([-30, 0, 10])\n    scale([1.0, 0.9, 0.7])\n    sphere(15, $fn=32);\n}\n\nmodule snout() {\n    // Snout - cone shape\n    translate([-42, 0, 8])\n    rotate([0, -10, 0])\n    cylinder(h=12, r1=8, r2=5, $fn=16);\n}\n\nmodule nose() {\n    // Nose - small sphere at snout tip\n    translate([-50, 0, 7])\n    sphere(3, $fn=16);\n}\n\nmodule ear(pos) {\n    // Ear - small flattened sphere\n    translate(pos)\n    rotate([0, -30, 0])\n    scale([0.8, 1, 0.3])\n    sphere(6, $fn=16);\n}\n\nmodule leg(pos) {\n    // Leg - cylinder with rounded foot\n    translate(pos)\n    rotate([90, 0, 0])\n    cylinder(h=15, r=5, $fn=16);\n    \n    translate([0, 0, -15])\n    sphere(5, $fn=16);\n}\n\nmodule eye(pos) {\n    // Eye - small sphere\n    translate(pos)\n    sphere(2.5, $fn=16);\n}\n\nmodule quill(pos, angle, length) {\n    // Single quill - thin cylinder\n    translate(pos)\n    rotate(angle)\n    cylinder(h=length, r=0.8, $fn=8);\n}\n\nmodule quills() {\n    // Back quills - arranged in rows\n    for(i = [-25:5:25]) {\n        for(j = [0:15:90]) {\n            // Calculate position on curved back\n            x = -20 + j * 0.3;\n            y = i;\n            z = 15 * cos(j/90 * 45) + 10;\n            \n            // Vary quill length slightly\n            len = 15 + (i % 5) * 2;\n            \n            // Calculate angle based on back curvature\n            angle = [80 - j * 0.3, atan2(i, 20), 0];\n            \n            quill([x, y, z], angle, len);\n        }\n    }\n    \n    // Side quills\n    for(i = [-15:10:15]) {\n        for(side = [-1, 1]) {\n            x = -5 + i;\n            y = side * 20;\n            z = 10;\n            angle = [75, side * 20, 0];\n            quill([x, y, z], angle, 12);\n        }\n    }\n}\n\nmodule tail() {\n    // Tail - tapered cylinder\n    translate([30, 0, 8])\n    rotate([30, 0, 0])\n    cylinder(h=20, r1=10, r2=5, $fn=16);\n    \n    // Tail quills\n    translate([40, 0, 15])\n    for(i = [0:30:330]) {\n        rotate([0, 0, i])\n        rotate([45, 0, 0])\n        cylinder(h=12, r=0.8, $fn=8);\n    }\n}\n\n// Main assembly\nunion() {\n    body();\n    head();\n    snout();\n    nose();\n    \n    // Ears\n    ear([-28, 12, 20]);\n    ear([-28, -12, 20]);\n    \n    // Legs\n    leg([-20, 15, -15]);\n    leg([-20, -15, -15]);\n    leg([20, 15, -15]);\n    leg([20, -15, -15]);\n    \n    // Eyes\n    eye([-42, 6, 15]);\n    eye([-42, -6, 15]);\n    \n    tail();\n    \n    // Quills last for cleaner boolean operations\n    quills();\n}",
    "renders": true
  },
  {
    "animal": "porpoise",
    "openscad_code": "// Realistic Porpoise - Medium Complexity\n// Designed for 3D printing (no overhangs >45°)\n\n$fn = 32;  // Smooth curves\n\nmodule porpoise() {\n    // Main body - streamlined torpedo shape\n    union() {\n        // Central body\n        translate([0, 0, 5]) \n            scale([1, 0.6, 0.4]) \n                sphere(d=40);\n        \n        // Tail stock - tapered cylinder\n        translate([-25, 0, 5])\n            rotate([0, 10, 0])\n                cylinder(h=20, d1=15, d2=8, center=false);\n        \n        // Head - elongated sphere\n        translate([22, 0, 8])\n            scale([1.3, 0.9, 0.7])\n                sphere(d=20);\n        \n        // Snout - cone extension\n        translate([32, 0, 8])\n            rotate([0, -10, 0])\n                cylinder(h=12, d1=8, d2=0, center=false);\n        \n        // Dorsal fin - triangular prism\n        translate([0, 0, 20])\n            rotate([0, 20, 0])\n                linear_extrude(height=12, center=true)\n                    polygon(points=[[-8,0], [0,15], [8,0]]);\n        \n        // Pectoral fins - elliptical shapes\n        for(side = [-1, 1]) {\n            translate([5, side*15, 2])\n                rotate([0, 20*side, 45*side])\n                    scale([1.5, 0.3, 1])\n                        sphere(d=12);\n        }\n        \n        // Tail flukes - horizontal wing shape\n        translate([-35, 0, 5])\n            rotate([90, 0, 0])\n                difference() {\n                    union() {\n                        // Left fluke\n                        translate([0, -12, 0])\n                            scale([1, 2, 0.3])\n                                sphere(d=10);\n                        // Right fluke\n                        translate([0, 12, 0])\n                            scale([1, 2, 0.3])\n                                sphere(d=10);\n                        // Center connector\n                        cube([8, 24, 3], center=true);\n                    }\n                    // Taper flukes\n                    translate([0, 0, -2])\n                        cube([20, 30, 10], center=true);\n                }\n        \n        // Eye sockets\n        for(side = [-1, 1]) {\n            translate([18, side*7, 12])\n                sphere(d=4);\n        }\n        \n        // Blowhole - small cylinder\n        translate([5, 0, 18])\n            cylinder(h=3, d=3, center=true);\n    }\n    \n    // Eye details (depressed spheres)\n    for(side = [-1, 1]) {\n        translate([19, side*7, 12])\n            difference() {\n                sphere(d=4);\n                translate([1, 0, 0])\n                    sphere(d=4.5);\n            }\n    }\n    \n    // Mouth line - subtle groove\n    translate([28, 0, 3])\n        rotate([0, -15, 0])\n            cube([15, 0.5, 1], center=true);\n}\n\n// Base for stability\nmodule base() {\n    translate([0, 0, -2])\n        difference() {\n            cylinder(h=2, d=50, center=false);\n            translate([0, 0, -1])\n                cylinder(h=4, d=45, center=false);\n        }\n}\n\n// Assembly\nunion() {\n    porpoise();\n    base();\n}\n\n// Scale to 80mm length\nscale(0.8) \n    children();",
    "renders": true
  },
  {
    "animal": "possum",
    "openscad_code": "// Realistic Possum - Medium Complexity\n// Designed for 3D printing (no overhangs >45°)\n\n// Overall scale factor\nscale_factor = 0.4;\n\n// Body dimensions\nbody_length = 60 * scale_factor;\nbody_width = 35 * scale_factor;\nbody_height = 25 * scale_factor;\n\n// Head dimensions\nhead_length = 25 * scale_factor;\nhead_width = 20 * scale_factor;\nhead_height = 18 * scale_factor;\n\n// Tail dimensions\ntail_length = 70 * scale_factor;\ntail_diameter = 8 * scale_factor;\n\n// Ear dimensions\near_radius = 6 * scale_factor;\near_thickness = 3 * scale_factor;\n\n// Leg dimensions\nleg_length = 15 * scale_factor;\nleg_diameter = 5 * scale_factor;\n\n// Paw dimensions\npaw_radius = 3 * scale_factor;\n\n// Snout dimensions\nsnout_length = 10 * scale_factor;\nsnout_width = 8 * scale_factor;\nsnout_height = 6 * scale_factor;\n\n// Eye dimensions\neye_radius = 2.5 * scale_factor;\n\n// Nose dimensions\nnose_radius = 1.5 * scale_factor;\n\nmodule possum_body() {\n    // Main body - egg shape achieved with scaled spheres\n    translate([0, 0, body_height/2])\n    scale([1, 0.8, 0.6])\n    sphere(d=body_length, $fn=32);\n    \n    // Belly - slightly flattened bottom\n    translate([0, 0, body_height/4])\n    scale([1, 0.9, 0.3])\n    sphere(d=body_length*0.9, $fn=32);\n}\n\nmodule possum_head() {\n    // Main head shape\n    translate([body_length/2 + head_length/2, 0, body_height/2 + head_height/4])\n    scale([1.2, 1, 1])\n    sphere(d=head_length, $fn=32);\n    \n    // Snout\n    translate([body_length/2 + head_length + snout_length/2, 0, body_height/2 + head_height/4])\n    scale([1.5, 1, 0.8])\n    sphere(d=snout_length, $fn=32);\n    \n    // Eyes\n    for(side = [-1, 1]) {\n        translate([body_length/2 + head_length*0.7, side*head_width/3, body_height/2 + head_height/3])\n        sphere(d=eye_radius*2, $fn=16);\n        \n        // Pupils\n        translate([body_length/2 + head_length*0.7 + 1, side*head_width/3, body_height/2 + head_height/3 + 0.5])\n        sphere(d=eye_radius, $fn=16);\n    }\n    \n    // Nose\n    translate([body_length/2 + head_length + snout_length, 0, body_height/2 + head_height/4])\n    sphere(d=nose_radius*2, $fn=16);\n    \n    // Ears\n    for(side = [-1, 1]) {\n        translate([body_length/2 + head_length/3, side*head_width/2, body_height/2 + head_height/2])\n        rotate([0, 0, side*30])\n        scale([1, 0.7, 0.5])\n        sphere(d=ear_radius*2, $fn=16);\n    }\n}\n\nmodule possum_tail() {\n    // Tail segments for curved shape\n    hull() {\n        translate([-body_length/2, 0, body_height/2])\n        rotate([0, 90, 0])\n        cylinder(d=tail_diameter, h=5, $fn=16);\n        \n        translate([-body_length/2 - tail_length/4, 0, body_height/2 - tail_length/8])\n        rotate([0, 90, 15])\n        cylinder(d=tail_diameter*0.9, h=tail_length/4, $fn=16);\n        \n        translate([-body_length/2 - tail_length/2, 0, body_height/2 - tail_length/4])\n        rotate([0, 90, 30])\n        cylinder(d=tail_diameter*0.8, h=tail_length/4, $fn=16);\n        \n        translate([-body_length/2 - tail_length*3/4, 0, body_height/2 - tail_length/3])\n        rotate([0, 90, 45])\n        cylinder(d=tail_diameter*0.7, h=tail_length/4, $fn=16);\n        \n        translate([-body_length/2 - tail_length, 0, body_height/2 - tail_length/2.5])\n        rotate([0, 90, 60])\n        cylinder(d=tail_diameter*0.6, h=tail_length/4, $fn=16);\n    }\n}\n\nmodule possum_legs() {\n    // Front legs\n    for(side = [-1, 1]) {\n        // Upper leg\n        translate([body_length/4, side*body_width/3, body_height/3])\n        rotate([30, 0, 0])\n        cylinder(h=leg_length, d=leg_diameter, $fn=16);\n        \n        // Lower leg\n        translate([body_length/4, side*body_width/3, body_height/3 - leg_length])\n        rotate([60, 0, 0])\n        cylinder(h=leg_length*0.8, d=leg_diameter*0.8, $fn=16);\n        \n        // Paw\n        translate([body_length/4, side*body_width/3, body_height/3 - leg_length*1.8])\n        sphere(d=paw_radius*2, $fn=16);\n    }\n    \n    // Rear legs\n    for(side = [-1, 1]) {\n        // Upper leg\n        translate([-body_length/3, side*body_width/3, body_height/3])\n        rotate([30, 0, 0])\n        cylinder(h=leg_length*1.2, d=leg_diameter*1.1, $fn=16);\n        \n        // Lower leg\n        translate([-body_length/3, side*body_width/3, body_height/3 - leg_length*1.2])\n        rotate([60, 0, 0])\n        cylinder(h=leg_length, d=leg_diameter*0.9, $fn=16);\n        \n        // Paw\n        translate([-body_length/3, side*body_width/3, body_height/3 - leg_length*2.2])\n        sphere(d=paw_radius*2.2, $fn=16);\n    }\n}\n\n// Assemble the possum\nunion() {\n    possum_body();\n    possum_head();\n    possum_tail();\n    possum_legs();\n}",
    "renders": true
  },
  {
    "animal": "potto",
    "openscad_code": "// Potto (Perodicticus potto) - medium complexity realistic style\n// Size: ~80mm height, 3D printable\n\n$fn = 32;  // Smooth curves\nbody_scale = 1;\n\n// Main assembly\nmodule potto() {\n    // Body core\n    union() {\n        // Torso\n        translate([0, 0, 30]) \n            scale([1.2, 0.9, 1.3]) \n                sphere(d = 40);\n        \n        // Lower back extension\n        translate([0, -15, 20]) \n            scale([1, 0.8, 0.6]) \n                sphere(d = 35);\n        \n        // Head\n        translate([0, 22, 55]) \n            rotate([0, -20, 0]) \n                potto_head();\n        \n        // Limbs\n        potto_limbs();\n        \n        // Tail\n        translate([0, -28, 25]) \n            rotate([45, 0, 0]) \n                potto_tail();\n    }\n}\n\n// Detailed head module\nmodule potto_head() {\n    difference() {\n        union() {\n            // Main skull\n            scale([0.9, 1.1, 1]) \n                sphere(d = 28);\n            \n            // Muzzle\n            translate([0, 12, -5]) \n                scale([0.7, 0.9, 0.6]) \n                    sphere(d = 15);\n            \n            // Ears\n            for(side = [-1, 1]) {\n                translate([side * 10, 5, 8]) \n                    rotate([0, side * -15, 0]) \n                        scale([0.3, 0.2, 0.6]) \n                            cylinder(h = 10, d1 = 8, d2 = 6);\n            }\n        }\n        \n        // Eye sockets\n        for(side = [-1, 1]) {\n            translate([side * 7, 8, 3]) \n                sphere(d = 8);\n        }\n        \n        // Nostrils\n        translate([0, 18, -3]) \n            rotate([90, 0, 0]) \n                cylinder(h = 3, d1 = 2, d2 = 0);\n    }\n    \n    // Eyes\n    for(side = [-1, 1]) {\n        translate([side * 7, 8, 3]) \n            sphere(d = 7);\n    }\n}\n\n// Limb assembly\nmodule potto_limbs() {\n    // Front limbs\n    for(side = [-1, 1]) {\n        // Upper arm\n        translate([side * 15, 10, 35]) \n            rotate([90, 0, side * 20]) \n                potto_limb(20, 6);\n        \n        // Lower arm\n        translate([side * 25, 0, 15]) \n            rotate([90, 0, side * 30]) \n                potto_limb(15, 5);\n        \n        // Hand\n        translate([side * 30, -5, 5]) \n            rotate([0, 0, side * 45]) \n                scale([1, 0.5, 0.3]) \n                    sphere(d = 10);\n    }\n    \n    // Hind limbs\n    for(side = [-1, 1]) {\n        // Thigh\n        translate([side * 12, -15, 25]) \n            rotate([120, 0, side * 10]) \n                potto_limb(18, 7);\n        \n        // Lower leg\n        translate([side * 15, -25, 10]) \n            rotate([90, 0, side * 15]) \n                potto_limb(15, 6);\n        \n        // Foot\n        translate([side * 15, -30, 0]) \n            scale([1.2, 0.6, 0.4]) \n                sphere(d = 12);\n    }\n}\n\n// Generic limb segment\nmodule potto_limb(length, diameter) {\n    cylinder(h = length, d = diameter, center = true);\n}\n\n// Curved tail\nmodule potto_tail() {\n    for(i = [0:5]) {\n        translate([0, -i * 5, -i * 3]) \n            rotate([0, i * 5, 0]) \n                scale([1 - i * 0.1, 1 - i * 0.1, 1]) \n                    sphere(d = max(8 - i, 3));\n    }\n}\n\n// Generate the model\npotto();",
    "renders": true
  },
  {
    "animal": "potoroo",
    "openscad_code": "// Potoroo - medium complexity realistic style\n// Approx 70mm long, 30mm high\n\n$fn = 24;  // Smooth curves for 3D printing\n\n// Main body module\nmodule body() {\n    union() {\n        // Torso - elongated oval\n        translate([0, 0, 15])\n            scale([1.8, 1, 0.8])\n            sphere(r = 10);\n        \n        // Rump - slightly larger sphere\n        translate([-20, 0, 15])\n            scale([1.2, 1.1, 0.9])\n            sphere(r = 12);\n        \n        // Chest - smaller sphere\n        translate([15, 0, 15])\n            scale([0.9, 0.9, 0.7])\n            sphere(r = 10);\n    }\n}\n\n// Head module with snout\nmodule head() {\n    union() {\n        // Main head sphere\n        translate([28, 0, 22])\n            scale([1.1, 1, 1])\n            sphere(r = 8);\n        \n        // Snout - tapered cylinder\n        translate([38, 0, 22])\n            rotate([0, 90, 0])\n            cylinder(h = 12, r1 = 5, r2 = 2);\n        \n        // Nose tip\n        translate([42, 0, 22])\n            sphere(r = 2);\n    }\n}\n\n// Ear module\nmodule ear(pos) {\n    // Ear base\n    translate(pos)\n        rotate([0, -30, 0])\n        scale([0.3, 1, 2])\n        sphere(r = 3);\n    \n    // Inner ear\n    translate(pos + [0.5, 0, 0.5])\n        rotate([0, -30, 0])\n        scale([0.2, 0.7, 1.5])\n        color(\"pink\")\n        sphere(r = 2);\n}\n\n// Leg module - creates both front or hind legs\nmodule legs(offset, scale_factor) {\n    for(side = [-1, 1]) {\n        // Upper leg\n        translate([offset, side * 6 * scale_factor, 8])\n            rotate([0, 15, 0])\n            scale([1, 0.7, 0.7])\n            cylinder(h = 12 * scale_factor, r = 3);\n        \n        // Lower leg\n        translate([offset + 8, side * 8 * scale_factor, 4])\n            rotate([0, 30, 0])\n            scale([0.8, 0.6, 0.6])\n            cylinder(h = 10 * scale_factor, r = 2.5);\n        \n        // Paw\n        translate([offset + 14, side * 9 * scale_factor, 2])\n            scale([1.2, 0.8, 0.6])\n            sphere(r = 3);\n    }\n}\n\n// Tail module\nmodule tail() {\n    hull() {\n        // Tail base\n        translate([-28, 0, 18])\n            sphere(r = 4);\n        \n        // Tail segments\n        for(i = [1:5]) {\n            translate([-28 - i * 8, 0, 18 - i])\n                scale([0.9 - i * 0.1, 0.9 - i * 0.1, 0.9 - i * 0.1])\n                sphere(r = 4 - i * 0.5);\n        }\n    }\n}\n\n// Eye module\nmodule eye(pos) {\n    // Eye white\n    translate(pos)\n        sphere(r = 1.5);\n    \n    // Pupil\n    translate(pos + [0.5, 0, 0])\n        color(\"black\")\n        sphere(r = 0.8);\n}\n\n// Whiskers\nmodule whiskers() {\n    for(angle = [30:30:150]) {\n        rotate([0, 0, angle])\n            translate([40, 0, 22])\n                cylinder(h = 8, r = 0.2);\n    }\n}\n\n// Assemble the potoroo\nunion() {\n    // Main body parts\n    body();\n    head();\n    tail();\n    \n    // Ears\n    ear([28, -6, 28]);\n    ear([28, 6, 28]);\n    \n    // Legs\n    legs(20, 1);    // Front legs\n    legs(-10, 1.2); // Hind legs\n    \n    // Eyes\n    eye([34, -3, 24]);\n    eye([34, 3, 24]);\n    \n    // Whiskers\n    whiskers();\n}",
    "renders": true
  },
  {
    "animal": "prairiedog",
    "openscad_code": "// Prairie Dog - Realistic Style (Medium Complexity)\n// Size: ~70mm tall when printed\n\n// Overall scale factor\nscale_factor = 1;\n\n// Body parameters\nbody_length = 35 * scale_factor;\nbody_width = 25 * scale_factor;\nbody_height = 30 * scale_factor;\n\n// Head parameters\nhead_diameter = 20 * scale_factor;\n\n// Leg parameters\nleg_height = 15 * scale_factor;\nleg_width = 6 * scale_factor;\n\n// Ear parameters\near_length = 8 * scale_factor;\near_width = 5 * scale_factor;\n\n// Tail parameters\ntail_length = 15 * scale_factor;\ntail_width = 8 * scale_factor;\n\n// Wall thickness for 3D printing\nwall_thickness = 1.5 * scale_factor;\n\n// Main body with slight taper\nmodule body() {\n    difference() {\n        // Main body shape - ellipsoid\n        scale([1, 0.8, 1.2]) \n            sphere(d=body_length);\n        \n        // Hollow out\n        translate([0, 0, -2])\n            scale([0.85, 0.65, 1])\n                sphere(d=body_length - wall_thickness*2);\n    }\n}\n\n// Head with snout\nmodule head() {\n    union() {\n        // Main head sphere\n        translate([body_length/2 - 5, 0, body_height/2])\n            sphere(d=head_diameter);\n        \n        // Snout\n        translate([body_length/2 + 8, 0, body_height/2 - 3])\n            scale([1.5, 0.7, 0.7])\n                sphere(d=head_diameter/2);\n        \n        // Nose\n        translate([body_length/2 + 15, 0, body_height/2 - 3])\n            sphere(d=3);\n    }\n}\n\n// Ears - small and rounded\nmodule ears() {\n    // Left ear\n    translate([body_length/2 - 2, -head_diameter/2 - 2, body_height/2 + 8])\n        rotate([0, 15, -30])\n            scale([1, 0.7, 0.3])\n                sphere(d=ear_length);\n    \n    // Right ear\n    translate([body_length/2 - 2, head_diameter/2 + 2, body_height/2 + 8])\n        rotate([0, 15, 30])\n            scale([1, 0.7, 0.3])\n                sphere(d=ear_length);\n}\n\n// Eyes\nmodule eyes() {\n    // Left eye\n    translate([body_length/2 + 5, -head_diameter/3, body_height/2 + 2])\n        color(\"black\")\n            sphere(d=2.5);\n    \n    // Right eye\n    translate([body_length/2 + 5, head_diameter/3, body_height/2 + 2])\n        color(\"black\")\n            sphere(d=2.5);\n}\n\n// Leg module\nmodule leg(x_pos, y_pos, angle) {\n    translate([x_pos, y_pos, leg_height/2])\n        rotate([0, angle, 0])\n            union() {\n                // Upper leg\n                cylinder(h=leg_height, d=leg_width, $fn=12);\n                \n                // Paw - slightly flattened\n                translate([0, 0, leg_height/2 + 2])\n                    scale([1.2, 1.2, 0.5])\n                        sphere(d=leg_width);\n            }\n}\n\n// All four legs\nmodule legs() {\n    // Front legs\n    leg(body_length/2 - 10, body_width/2 - 5, 0);\n    leg(body_length/2 - 10, -body_width/2 + 5, 0);\n    \n    // Back legs\n    leg(-body_length/2 + 10, body_width/2 - 5, 0);\n    leg(-body_length/2 + 10, -body_width/2 + 5, 0);\n}\n\n// Short bushy tail\nmodule tail() {\n    translate([-body_length/2 - 5, 0, body_height/2 - 5])\n        rotate([0, 20, 0])\n            scale([1.5, 1, 1])\n                sphere(d=tail_width);\n}\n\n// Assembly\nunion() {\n    // Position entire model on build plate\n    translate([0, 0, leg_height]) {\n        body();\n        head();\n        ears();\n        eyes();\n        tail();\n    }\n    \n    legs();\n}",
    "renders": true
  },
  {
    "animal": "prawn",
    "openscad_code": "// Realistic 3D-printable prawn model\n// Medium complexity - recognizable anatomy with printable features\n\n$fn = 32;  // Smooth curves for 3D printing\n\n// Overall scale factor\nPRAWN_SCALE = 1.5;\n\nmodule prawn() {\n    scale(PRAWN_SCALE) {\n        // Main body segments\n        body();\n        \n        // Head with eyes and rostrum\n        head();\n        \n        // Tail segments\n        tail();\n        \n        // Legs and swimmerets\n        legs();\n        \n        // Antennae\n        antennae();\n    }\n}\n\n// Main body - segmented carapace\nmodule body() {\n    color(\"orange\") {\n        // Thorax segments\n        for(i = [0:3]) {\n            translate([0, 0, -i * 2.5]) {\n                scale([1 - i * 0.08, 1 - i * 0.1, 1]) {\n                    rotate([0, 10 * i, 0]) {\n                        difference() {\n                            // Main segment body\n                            sphere(r = 6 - i * 0.5);\n                            \n                            // Ventral flattening\n                            translate([0, 0, -3])\n                                cube([10, 12, 6], center = true);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Head with rostrum and eyes\nmodule head() {\n    color(\"orange\") {\n        // Main head\n        translate([0, 0, 10]) {\n            scale([1.2, 1.1, 0.8]) {\n                sphere(r = 5.5);\n            }\n        }\n        \n        // Rostrum (pointy nose)\n        translate([0, 0, 13.5]) {\n            rotate([0, -15, 0]) {\n                scale([1, 0.4, 0.1]) {\n                    cylinder(h = 8, r1 = 3, r2 = 0.5);\n                }\n            }\n        }\n        \n        // Eyes on stalks\n        for(side = [-1, 1]) {\n            translate([side * 3.5, 2.5, 10]) {\n                rotate([side * 10, 0, side * 20]) {\n                    // Eye stalk\n                    cylinder(h = 3, r = 0.8);\n                    \n                    // Eye\n                    translate([0, 0, 3.5]) {\n                        sphere(r = 1.2);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Tail segments (pleon)\nmodule tail() {\n    color(\"orange\") {\n        for(i = [1:6]) {\n            translate([0, 0, -i * 3 - 5]) {\n                rotate([0, -8 * i, 0]) {\n                    scale([1 - i * 0.12, 1 - i * 0.15, 0.8]) {\n                        difference() {\n                            sphere(r = 5 - i * 0.4);\n                            \n                            // Flatten bottom\n                            translate([0, 0, -2])\n                                cube([8, 10, 4], center = true);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Tail fan\n        translate([0, 0, -24]) {\n            rotate([0, -50, 0]) {\n                // Top tail fin\n                translate([0, 0, 1]) {\n                    scale([1, 1.5, 0.3]) {\n                        sphere(r = 3);\n                    }\n                }\n                \n                // Bottom tail fin\n                translate([0, 0, -1]) {\n                    scale([1, 1.5, 0.3]) {\n                        sphere(r = 3);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Legs and swimmerets\nmodule legs() {\n    color(\"orange\") {\n        // Walking legs\n        for(i = [0:4]) {\n            for(side = [-1, 1]) {\n                angle = i * 25 + 20;\n                translate([side * 4 * cos(angle), side * 4 * sin(angle), 5 - i * 2]) {\n                    rotate([0, 0, side * angle]) {\n                        rotate([90, 0, 0]) {\n                            // Upper leg segment\n                            cylinder(h = 5, r = 0.6);\n                            \n                            // Lower leg segment\n                            translate([0, 0, 5]) {\n                                rotate([0, -20, 0]) {\n                                    cylinder(h = 4, r = 0.5);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Swimmerets (pleopods) - simplified as small paddles\n        for(i = [1:3]) {\n            for(side = [-1, 1]) {\n                translate([side * 2, 0, -i * 3 - 8]) {\n                    rotate([0, 90, 0]) {\n                        scale([0.3, 1.5, 0.2]) {\n                            sphere(r = 1.5);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Antennae\nmodule antennae() {\n    // Long antennae\n    for(side = [-1, 1]) {\n        translate([side * 2, 3, 11]) {\n            rotate([45, side * 15, 0]) {\n                // First segment\n                cylinder(h = 10, r = 0.3);\n                \n                // Second segment\n                translate([0, 0, 10]) {\n                    rotate([0, 20, 0]) {\n                        cylinder(h = 8, r = 0.2);\n                    }\n                }\n                \n                // Third segment\n                translate([0, 0, 18]) {\n                    rotate([0, 15, 0]) {\n                        cylinder(h = 6, r = 0.15);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Short antennae\n    for(side = [-1, 1]) {\n        translate([side * 1.5, 2.5, 11]) {\n            rotate([30, side * 10, 0]) {\n                cylinder(h = 5, r = 0.2);\n            }\n        }\n    }\n}\n\n// Generate the prawn\nprawn();",
    "renders": true
  },
  {
    "animal": "pronghorn",
    "openscad_code": "// Pronghorn Model - Medium Complexity, Realistic Style\n// Designed for 3D printing with reasonable wall thickness\n\nmodule body() {\n    // Main torso\n    union() {\n        // Chest/belly section\n        translate([0, 0, 10])\n            scale([1.2, 0.6, 1])\n            sphere(r=15, $fn=32);\n        \n        // Rump section\n        translate([-25, 0, 12])\n            scale([0.9, 0.7, 0.8])\n            sphere(r=15, $fn=32);\n        \n        // Neck connector\n        translate([20, 0, 18])\n            rotate([0, -15, 0])\n            scale([1, 0.7, 0.7])\n            cylinder(h=20, r1=8, r2=5, $fn=16);\n    }\n}\n\nmodule legs() {\n    module leg(x, z, angle) {\n        translate([x, 0, z])\n            rotate([angle, 0, 0])\n            union() {\n                // Upper leg\n                cylinder(h=25, r=4, $fn=12);\n                // Lower leg\n                translate([0, 0, 25])\n                    cylinder(h=20, r=3, $fn=12);\n                // Hoof\n                translate([0, 0, 45])\n                    scale([1.2, 0.8, 0.5])\n                    cylinder(h=5, r=3, $fn=8);\n            }\n    }\n    \n    // Front legs\n    leg(15, 10, 15);\n    leg(15, -10, 15);\n    \n    // Rear legs\n    leg(-20, 10, -15);\n    leg(-20, -10, -15);\n}\n\nmodule head() {\n    translate([35, 0, 25])\n        rotate([0, -20, 0])\n        union() {\n            // Main head\n            scale([1.5, 0.8, 0.9])\n            sphere(r=8, $fn=32);\n            \n            // Snout extension\n            translate([8, 0, 0])\n                scale([1.2, 0.7, 0.6])\n                sphere(r=6, $fn=32);\n            \n            // Ears\n            translate([0, 6, 5])\n                rotate([0, 0, 10])\n                scale([0.3, 1, 2])\n                cylinder(h=8, r=3, $fn=8);\n            translate([0, -6, 5])\n                rotate([0, 0, -10])\n                scale([0.3, 1, 2])\n                cylinder(h=8, r=3, $fn=8);\n            \n            // Horns - prong style\n            translate([3, 3, 8])\n                cylinder(h=12, r1=1.5, r2=0.8, $fn=8);\n            translate([8, 3, 10])\n                rotate([0, 0, 45])\n                scale([1, 0.5, 0.3])\n                cube([5, 2, 1]);\n            \n            translate([3, -3, 8])\n                cylinder(h=12, r1=1.5, r2=0.8, $fn=8);\n            translate([8, -3, 10])\n                rotate([0, 0, -45])\n                scale([1, 0.5, 0.3])\n                cube([5, 2, 1]);\n        }\n}\n\nmodule tail() {\n    translate([-35, 0, 15])\n        rotate([0, 45, 0])\n        scale([0.5, 0.3, 2])\n        cylinder(h=10, r=3, $fn=8);\n}\n\n// Assembly\nunion() {\n    body();\n    legs();\n    head();\n    tail();\n}",
    "renders": true
  },
  {
    "animal": "puffin",
    "openscad_code": "// Puffin - Realistic style, medium complexity\n// Approx 80mm tall, 3D printable\n\n$fn = 32;\n\n// Main module\nmodule puffin() {\n    // Body\n    color(\"black\")\n    difference() {\n        union() {\n            // Main body ellipsoid\n            scale([1, 0.8, 1.2])\n                sphere(r=20);\n            \n            // White belly patch\n            color(\"white\")\n            translate([0, -15, -15])\n                scale([0.9, 0.5, 0.6])\n                    sphere(r=15);\n        }\n        \n        // Remove bottom for flat printing\n        translate([0, 0, -25])\n            cube([100, 100, 50], center=true);\n    }\n    \n    // Head\n    translate([0, 25, 15])\n    union() {\n        // Main head sphere\n        color(\"black\")\n        sphere(r=15);\n        \n        // White face patch\n        color(\"white\")\n        translate([0, 5, 0])\n            scale([0.8, 0.7, 1])\n                sphere(r=12);\n        \n        // Beak\n        translate([0, 15, -5])\n        rotate([0, 20, 0])\n        union() {\n            // Orange beak\n            color(\"orange\")\n            scale([1, 0.4, 0.6])\n                cylinder(h=20, r1=5, r2=0);\n            \n            // Beak stripes\n            color(\"darkorange\")\n            for(i = [0:2]) {\n                translate([i*6-6, 0, -1])\n                    scale([0.2, 1, 1.1])\n                        cylinder(h=20, r1=5, r2=0);\n            }\n        }\n        \n        // Eyes\n        color(\"black\")\n        for(x = [-6, 6]) {\n            translate([x, 8, 5])\n                sphere(r=2);\n        }\n        \n        // Eye highlights\n        color(\"white\")\n        for(x = [-6, 6]) {\n            translate([x+1, 9, 6])\n                sphere(r=0.5);\n        }\n    }\n    \n    // Wings\n    module wing() {\n        color(\"black\")\n        union() {\n            // Main wing shape\n            translate([0, 0, 5])\n                rotate([0, 10, 0])\n                scale([1, 0.3, 0.1])\n                    cylinder(h=25, r1=15, r2=5);\n            \n            // Wing tip\n            translate([20, 0, 5])\n                rotate([0, 0, -20])\n                scale([0.3, 0.2, 0.1])\n                    cylinder(h=15, r1=8, r2=3);\n        }\n    }\n    \n    // Left wing\n    translate([-20, 0, 5])\n        rotate([0, 0, -30])\n            wing();\n    \n    // Right wing\n    translate([20, 0, 5])\n        rotate([0, 0, 30])\n        mirror([1, 0, 0])\n            wing();\n    \n    // Feet\n    module foot() {\n        color(\"orange\")\n        translate([0, 0, -20])\n        union() {\n            // Ankle\n            cylinder(h=5, r=3);\n            \n            // Webbed foot\n            translate([0, 0, -2])\n                scale([1.5, 0.8, 0.3])\n                    sphere(r=5);\n            \n            // Toes\n            for(a = [-30, 0, 30]) {\n                translate([cos(a)*4, sin(a)*4, -4])\n                    rotate([0, 0, a])\n                    scale([0.3, 1, 0.3])\n                        cylinder(h=5, r=2);\n            }\n        }\n    }\n    \n    // Left foot\n    translate([-8, -10, 0])\n        foot();\n    \n    // Right foot\n    translate([8, -10, 0])\n        foot();\n    \n    // Tail\n    color(\"black\")\n    translate([0, -20, -5])\n    rotate([0, 20, 0])\n    scale([1, 0.3, 0.1])\n        cylinder(h=15, r1=8, r2=0);\n}\n\n// Generate the model\npuffin();",
    "renders": true
  },
  {
    "animal": "pug",
    "openscad_code": "// Pug 3D Model - Realistic Style, Medium Complexity\n// Approx 70mm long, 55mm tall, 60mm wide\n\n// Main colors for visual reference (will print in single color)\n// Body: beige/light brown\n// Face mask: dark brown/black\n// Eyes: black\n// Collar: optional red\n\n$fn = 32; // Smooth curves\n\nmodule pug() {\n    union() {\n        // Main body\n        body();\n        \n        // Head assembly\n        translate([-15, 0, 25]) rotate([0, 10, 0]) head();\n        \n        // Legs\n        legs();\n        \n        // Tail\n        translate([35, 0, 25]) rotate([30, 0, 0]) tail();\n    }\n}\n\nmodule body() {\n    // Main torso - oval shape\n    scale([1.2, 0.8, 1]) \n        translate([10, 0, 15]) \n        sphere(d=45);\n    \n    // Chest area - slightly protruding\n    translate([5, 0, 10])\n        scale([0.8, 1.1, 0.6])\n        sphere(d=30);\n    \n    // Rear hips\n    translate([30, 0, 15])\n        scale([0.7, 0.9, 0.8])\n        sphere(d=25);\n}\n\nmodule head() {\n    union() {\n        // Main head - squashed sphere\n        scale([1.2, 1.1, 0.9])\n        sphere(d=35);\n        \n        // Snout\n        translate([-12, 0, -2])\n            scale([1.5, 0.9, 0.7])\n            sphere(d=20);\n        \n        // Wrinkles on forehead\n        for(i = [0:2]) {\n            translate([-5, -6 + i*6, 8])\n                rotate([0, 90, 0])\n                cylinder(h=12, d1=3, d2=1);\n        }\n        \n        // Eyes\n        translate([-8, -8, 6]) eye();\n        translate([-8, 8, 6]) mirror([0,1,0]) eye();\n        \n        // Nose\n        translate([-18, 0, 0])\n            scale([1, 0.8, 0.5])\n            sphere(d=8);\n        \n        // Ears\n        translate([0, -10, 12]) ear();\n        translate([0, 10, 12]) mirror([0,1,0]) ear();\n        \n        // Mouth area wrinkles\n        for(i = [-1, 1]) {\n            translate([-12, i*5, -5])\n                rotate([45*i, 0, 0])\n                cylinder(h=8, d1=2, d2=0.5);\n        }\n    }\n}\n\nmodule eye() {\n    difference() {\n        // Eye socket\n        sphere(d=8);\n        // Pupil\n        translate([-1, 0, 0])\n            sphere(d=4);\n    }\n}\n\nmodule ear() {\n    rotate([0, -20, -30])\n        scale([0.6, 1, 1.5])\n        cylinder(h=12, d1=12, d2=6);\n}\n\nmodule legs() {\n    // Front legs\n    for(side = [-1, 1]) {\n        translate([0, side*15, 0])\n            leg(25);\n    }\n    \n    // Rear legs\n    for(side = [-1, 1]) {\n        translate([30, side*12, 0])\n            leg(20);\n    }\n}\n\nmodule leg(height) {\n    union() {\n        // Upper leg\n        translate([0, 0, height/2])\n            scale([0.8, 0.8, 1])\n            sphere(d=height/2.5);\n        \n        // Lower leg\n        translate([0, 0, height/4])\n            cylinder(h=height/1.5, d=height/3);\n        \n        // Paw\n        translate([0, 0, 0])\n            scale([1.2, 1, 0.6])\n            sphere(d=height/2.8);\n    }\n}\n\nmodule tail() {\n    // Curled tail\n    rotate([0, 90, 0])\n        for(i = [0:30:359]) {\n            rotate([0, 0, i])\n                translate([10, 0, 0])\n                    sphere(d=8);\n        }\n}\n\n// Generate the pug\npug();",
    "renders": true
  },
  {
    "animal": "puma",
    "openscad_code": "// Puma - Medium Complexity Realistic Style\n// Designed for 3D printing with no overhangs\n\n$fn = 32;  // Smooth curves for printing\n\n// Main body module\nmodule puma_body() {\n    // Torso - elongated ellipsoid\n    translate([0, 0, 15])\n    scale([1.5, 0.8, 0.6])\n    sphere(20);\n    \n    // Chest - slightly forward\n    translate([-10, 0, 12])\n    scale([1.2, 0.9, 0.5])\n    sphere(15);\n    \n    // Belly - flat bottom for printing\n    difference() {\n        translate([0, 0, 8])\n        scale([1.4, 0.7, 0.4])\n        sphere(18);\n        \n        translate([0, 0, 0])\n        cube([60, 40, 10], center=true);\n    }\n}\n\n// Head module with facial features\nmodule puma_head() {\n    // Main head shape\n    translate([28, 0, 22])\n    rotate([0, -10, 0])\n    scale([1.2, 0.9, 0.8])\n    sphere(12);\n    \n    // Snout\n    translate([35, 0, 20])\n    rotate([0, -15, 0])\n    scale([0.8, 0.6, 0.5])\n    cylinder(h=10, r1=8, r2=5);\n    \n    // Ears - triangular\n    for(side = [-1, 1]) {\n        translate([30, side*10, 30])\n        rotate([0, side*20, 0])\n        cylinder(h=8, r1=3, r2=0);\n    }\n    \n    // Eyes - small spheres\n    for(side = [-1, 1]) {\n        translate([33, side*5, 24])\n        color(\"black\")\n        sphere(2);\n    }\n    \n    // Nose\n    translate([40, 0, 20])\n    color(\"black\")\n    sphere(3);\n}\n\n// Leg module - reusable for all legs\nmodule leg(position, side, angle) {\n    translate(position)\n    rotate([0, 0, angle]) {\n        // Upper leg\n        translate([0, side*5, 0])\n        rotate([-90, 0, 0])\n        cylinder(h=15, r1=4, r2=3);\n        \n        // Lower leg\n        translate([0, side*5, -12])\n        rotate([-90, 0, 0])\n        cylinder(h=12, r1=3, r2=2);\n        \n        // Paw - flat bottom\n        translate([0, side*5, -20])\n        scale([1, 1, 0.5])\n        sphere(4);\n    }\n}\n\n// Tail module\nmodule puma_tail() {\n    hull() {\n        translate([-30, 0, 18])\n        sphere(3);\n        \n        translate([-45, 0, 25])\n        sphere(2);\n        \n        translate([-55, 0, 22])\n        sphere(1);\n    }\n}\n\n// Assembly\nunion() {\n    puma_body();\n    puma_head();\n    \n    // Front legs\n    leg([-5, 12, 0], 1, 5);\n    leg([-5, -12, 0], -1, -5);\n    \n    // Back legs\n    leg([-20, 10, 0], 1, -5);\n    leg([-20, -10, 0], -1, 5);\n    \n    puma_tail();\n}",
    "renders": true
  },
  {
    "animal": "pupa",
    "openscad_code": "// Realistic pupa model for 3D printing\n// Medium complexity, ~50-100mm length\n\n$fn = 32;  // Smooth curves\n\nmodule pupa_body() {\n    // Main body segment\n    hull() {\n        translate([0, 0, -25]) sphere(d=20);\n        translate([0, 0, 25]) sphere(d=30);\n    }\n    \n    // Head segment (tapered front)\n    translate([0, 0, 35])\n    scale([0.7, 0.7, 0.8])\n    sphere(d=28);\n    \n    // Segments along body\n    for(i = [-20:10:20]) {\n        translate([0, 0, i])\n        rotate([0, 0, i*2])\n        difference() {\n            cylinder(d1=28, d2=26, h=8, center=true);\n            translate([0, 0, -5]) cube([35, 35, 2], center=true);\n        }\n    }\n    \n    // Rear segment (tapered back)\n    translate([0, 0, -35])\n    scale([0.6, 0.6, 0.6])\n    sphere(d=25);\n}\n\nmodule breathing_tubes() {\n    // Spiracles (breathing tubes) on sides\n    for(i = [-15:10:15]) {\n        for(j = [0:90:270]) {\n            rotate([0, 0, j])\n            translate([12, 0, i])\n            rotate([90, 0, 0])\n            cylinder(d1=3, d2=2, h=8);\n        }\n    }\n}\n\nmodule segmentation_lines() {\n    // Subtle segmentation grooves\n    for(i = [-25:5:25]) {\n        translate([0, 0, i])\n    rotate([0, 0, 45])\n    difference() {\n        cylinder(d=29, h=1, center=true);\n        cylinder(d=27, h=2, center=true);\n    }\n    }\n}\n\nmodule attachment_crease() {\n    // Where pupa attaches to surface\n    translate([0, 15, 0])\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(d=35, h=20);\n        translate([0, 0, -1]) cube([40, 40, 22], center=true);\n    }\n}\n\n// Combine all parts\nunion() {\n    pupa_body();\n    breathing_tubes();\n    segmentation_lines();\n    attachment_crease();\n}\n\n// Add base for printing stability\ntranslate([0, 0, -45])\ndifference() {\n    cylinder(d=40, h=5);\n    cylinder(d=35, h=6);\n}",
    "renders": true
  },
  {
    "animal": "python",
    "openscad_code": "// Python 3D Model - Realistic Style, Medium Complexity\n// Suitable for 3D printing, no overhangs\n\n$fn = 32;\n\n// Overall dimensions\npython_length = 80;\npython_width = 12;\npython_height = 8;\n\n// Head parameters\nhead_length = 15;\nhead_width = 10;\nhead_height = 8;\n\n// Tail parameters\ntail_taper = 0.3;\n\n// Scale factor for realistic proportions\nscale_factor = 1;\n\n// Main body module\nmodule python_body() {\n    // Create body segments with gradual taper\n    union() {\n        // Head\n        translate([python_length/2 - head_length/2, 0, 0])\n            scale([1, 1, 1])\n            sphere(d=head_width);\n        \n        // Snout\n        translate([python_length/2 + head_length/2 - 3, 0, -1])\n            scale([1.2, 0.8, 0.6])\n            sphere(d=head_width * 0.8);\n        \n        // Body segments\n        for(i = [0:9]) {\n            segment_pos = python_length/2 - head_length - i * 6;\n            segment_width = python_width * (1 - i * 0.05);\n            segment_height = python_height * (1 - i * 0.05);\n            \n            translate([segment_pos, 0, 0])\n                scale([1, 1 - i * 0.03, 1 - i * 0.05])\n                sphere(d=segment_width);\n        }\n        \n        // Tail segments with more taper\n        for(i = [0:4]) {\n            tail_pos = -python_length/2 + i * 4;\n            tail_width = python_width * tail_taper * (1 - i * 0.15);\n            \n            translate([tail_pos, 0, 0])\n                sphere(d=tail_width);\n        }\n    }\n}\n\n// Eyes module\nmodule python_eyes() {\n    eye_offset = head_length/2 - 2;\n    eye_height = 2;\n    eye_size = 2;\n    \n    // Left eye\n    translate([python_length/2 - eye_offset, head_width/3, eye_height])\n        sphere(d=eye_size);\n    \n    // Right eye\n    translate([python_length/2 - eye_offset, -head_width/3, eye_height])\n        sphere(d=eye_size);\n}\n\n// Nostrils\nmodule python_nostrils() {\n    nostril_pos = python_length/2 + head_length/2 - 5;\n    \n    // Left nostril\n    translate([nostril_pos, head_width/4, 0])\n        cylinder(h=1, d1=1, d2=0.5);\n    \n    // Right nostril\n    translate([nostril_pos, -head_width/4, 0])\n        cylinder(h=1, d1=1, d2=0.5);\n}\n\n// Body pattern - scales\nmodule python_scales() {\n    // Scale pattern along body\n    for(i = [0:15]) {\n        scale_pos = python_length/2 - head_length - i * 4;\n        if(scale_pos > -python_length/2 + 10) {\n            // Top scales\n            translate([scale_pos, 0, python_height/2])\n                scale([1.2, 0.8, 0.3])\n                sphere(d=3);\n            \n            // Side scales\n            rotate([0, 90, 0])\n            translate([scale_pos, 0, python_width/2 - 1])\n                scale([0.8, 0.6, 0.2])\n                sphere(d=2.5);\n        }\n    }\n}\n\n// Coiled section for base\nmodule python_coil() {\n    // Create a gentle coil for stability\n    for(angle = [0:30:330]) {\n        coil_radius = 8;\n        coil_y = sin(angle) * coil_radius;\n        coil_z = cos(angle) * coil_radius * 0.5 - 5;\n        coil_x = -python_length/2 + 10 + angle/10;\n        \n        translate([coil_x, coil_y, coil_z])\n            sphere(d=python_width * 0.9);\n    }\n}\n\n// Main assembly\nscale([scale_factor, scale_factor, scale_factor])\nunion() {\n    // Base body\n    python_body();\n    \n    // Coil for stability\n    python_coil();\n    \n    // Eyes\n    color(\"black\")\n    python_eyes();\n    \n    // Nostrils\n    color(\"black\")\n    python_nostrils();\n    \n    // Scale pattern\n    color(\"darkgreen\")\n    python_scales();\n}",
    "renders": true
  },
  {
    "animal": "quail",
    "openscad_code": "// Quail model - 3D printable with medium complexity\n// Size: ~80mm long, 60mm tall\n\n$fn = 32; // Smooth curves for printing\n\n// Main body\nmodule body() {\n    // Main oval body\n    translate([0, 0, 25])\n    scale([1.2, 0.8, 0.9])\n    sphere(d=40);\n    \n    // Tail section\n    translate([-22, 0, 20])\n    rotate([0, -10, 0])\n    scale([1.5, 1, 0.6])\n    cylinder(h=25, d1=15, d2=5);\n}\n\n// Head with crest\nmodule head() {\n    // Main head\n    translate([18, 0, 45])\n    scale([0.8, 0.7, 0.9])\n    sphere(d=18);\n    \n    // Crest (topknot)\n    for(i=[0:3]) {\n        rotate([0, 0, i*20-30])\n        translate([20, 0, 55])\n        rotate([20-i*5, 0, 0])\n        cylinder(h=8, d1=3, d2=2);\n    }\n    \n    // Beak\n    translate([27, 0, 43])\n    rotate([0, -20, 0])\n    scale([1.5, 0.8, 0.8])\n    cylinder(h=8, d1=5, d2=2);\n}\n\n// Wings\nmodule wings() {\n    // Left wing\n    translate([0, 15, 30])\n    rotate([0, 0, 30])\n    scale([0.8, 1, 0.2])\n    sphere(d=18);\n    \n    // Right wing\n    translate([0, -15, 30])\n    rotate([0, 0, -30])\n    scale([0.8, 1, 0.2])\n    sphere(d=18);\n}\n\n// Legs and feet\nmodule legs() {\n    // Left leg\n    translate([5, 8, 8])\n    cylinder(h=15, d=3);\n    \n    // Left foot\n    translate([5, 13, 0])\n    rotate([0, 0, 45])\n    scale([1, 0.3, 0.2])\n    cube([12, 8, 3]);\n    \n    // Right leg\n    translate([5, -8, 8])\n    cylinder(h=15, d=3);\n    \n    // Right foot\n    translate([5, -13, 0])\n    rotate([0, 0, -45])\n    scale([1, 0.3, 0.2])\n    cube([12, 8, 3]);\n}\n\n// Eye details (small spheres)\nmodule eyes() {\n    // Left eye\n    translate([22, 5, 47])\n    sphere(d=3);\n    \n    // Right eye\n    translate([22, -5, 47])\n    sphere(d=3);\n}\n\n// Chest/belly detail\nmodule chest() {\n    translate([5, 0, 15])\n    scale([1, 1.2, 0.6])\n    sphere(d=25);\n}\n\n// Combine all parts\nunion() {\n    body();\n    head();\n    wings();\n    chest();\n    legs();\n    eyes();\n}\n\n// Add support base for printing\ntranslate([0, 0, -1])\ncube([60, 40, 2], center=true);",
    "renders": true
  },
  {
    "animal": "quetzal",
    "openscad_code": "// Quetzal Bird - Medium Complexity Realistic Style\n// 3D printable model with proper wall thickness\n\n// Overall scale for 3D printing\nscale_factor = 0.8;\n\nmodule body() {\n    // Main body - slightly curved cylinder\n    translate([0, 0, 0])\n    rotate([0, -15, 0])\n    scale([1.2, 0.8, 1])\n    cylinder(h=25, r1=8, r2=6, $fn=20);\n}\n\nmodule head() {\n    // Head - sphere with beak\n    translate([0, 0, 20])\n    scale([0.9, 0.8, 1.1])\n    sphere(8, $fn=20);\n    \n    // Beak\n    translate([8, 0, 22])\n    rotate([0, -30, 0])\n    scale([1, 0.3, 0.3])\n    cylinder(h=12, r=3, $fn=8);\n}\n\nmodule crest() {\n    // Feather crest on head\n    for(i=[0:3]) {\n        rotate([0, 0, i*10-15])\n        translate([8, 0, 28])\n        rotate([90, 0, 0])\n        scale([0.3, 2, 0.1])\n        cylinder(h=8, r=2, $fn=6);\n    }\n}\n\nmodule tail() {\n    // Long tail feathers\n    for(i=[0:5]) {\n        translate([-25-i*5, (i-2.5)*2, -i*2])\n        rotate([0, 10, 0])\n        scale([0.5, 0.2, 3])\n        cylinder(h=40-i*3, r=2, $fn=4);\n    }\n}\n\nmodule wing() {\n    // Wing shape with feathers\n    union() {\n        // Upper wing\n        translate([0, -10, 15])\n        rotate([0, 0, -20])\n        scale([1.5, 0.3, 0.8])\n        cylinder(h=20, r=5, $fn=8);\n        \n        // Wing feathers\n        for(i=[0:4]) {\n            translate([-5-i*3, -12, 12-i*1.5])\n            rotate([0, 0, -45-i*5])\n            scale([0.2, 0.05, 2])\n            cylinder(h=12-i, r=2, $fn=4);\n        }\n    }\n}\n\nmodule eye() {\n    // Simple eye sphere\n    translate([6, -3, 22])\n    scale([0.5, 0.8, 0.8])\n    sphere(2, $fn=10);\n}\n\nmodule leg() {\n    // Simplified leg with foot\n    translate([0, -5, -12])\n    cylinder(h=8, r=1.5, $fn=8);\n    \n    // Foot\n    translate([0, -6, -20])\n    rotate([90, 0, 0])\n    scale([1, 0.3, 0.2])\n    cylinder(h=6, r=2, $fn=8);\n}\n\nmodule perch() {\n    // Simple perch for stability\n    translate([0, 0, -25])\n    scale([2, 0.3, 0.3])\n    cylinder(h=20, r=3, $fn=20);\n}\n\n// Main assembly\nscale([scale_factor, scale_factor, scale_factor])\nunion() {\n    // Body parts\n    body();\n    head();\n    crest();\n    tail();\n    \n    // Wings - mirrored for symmetry\n    wing();\n    mirror([0, 1, 0])\n    wing();\n    \n    // Eyes\n    color(\"black\") eye();\n    mirror([0, 1, 0])\n    color(\"black\") eye();\n    \n    // Legs with support for 3D printing\n    leg();\n    mirror([0, 1, 0])\n    leg();\n    \n    // Perch for stability\n    perch();\n}",
    "renders": true
  },
  {
    "animal": "quokka",
    "openscad_code": "// Quokka model for 3D printing\n// Medium complexity realistic style\n// Approx 60mm long x 40mm wide x 35mm high\n\n$fn = 32;\nbody_length = 50;\nbody_width = 35;\nbody_height = 25;\n\nmodule quokka() {\n    // Main body - slightly elongated oval\n    translate([0, 0, body_height/2])\n    scale([1.2, 1, 1])\n    sphere(d=body_height);\n\n    // Head - smaller sphere attached to body\n    translate([-body_length/3, 0, body_height + 8])\n    sphere(d=20);\n\n    // Ears - two rounded ears on top of head\n    rotate([0, 30, 0])\n    translate([-body_length/3 - 5, 8, body_height + 15])\n    scale([0.8, 0.4, 1])\n    sphere(d=12);\n\n    mirror([0, 1, 0])\n    rotate([0, 30, 0])\n    translate([-body_length/3 - 5, 8, body_height + 15])\n    scale([0.8, 0.4, 1])\n    sphere(d=12);\n\n    // Snout - small protruding nose\n    translate([-body_length/3 - 10, 0, body_height + 6])\n    sphere(d=8);\n\n    // Eyes - two small spheres\n    translate([-body_length/3 - 8, 5, body_height + 12])\n    sphere(d=3);\n\n    translate([-body_length/3 - 8, -5, body_height + 12])\n    sphere(d=3);\n\n    // Arms - cylindrical front legs\n    rotate([20, 0, 30])\n    translate([-5, 15, body_height/2 - 5])\n    cylinder(h=15, d1=8, d2=5);\n\n    mirror([0, 1, 0])\n    rotate([20, 0, 30])\n    translate([-5, 15, body_height/2 - 5])\n    cylinder(h=15, d1=8, d2=5);\n\n    // Legs - rear legs with feet\n    for(side = [-1, 1]) {\n        // Upper leg\n        rotate([0, 0, side * 20])\n        translate([body_length/3, side * 8, 0])\n        cylinder(h=12, d=10);\n\n        // Lower leg\n        rotate([0, 10, side * 20])\n        translate([body_length/3 + 8, side * 12, -8])\n        cylinder(h=15, d=8);\n\n        // Foot\n        rotate([0, 0, side * 20])\n        translate([body_length/3 + 12, side * 15, -18])\n        scale([1.5, 0.8, 0.5])\n        sphere(d=10);\n    }\n\n    // Tail - short rounded tail\n    rotate([0, 30, 0])\n    translate([body_length/2 + 5, 0, body_height/3])\n    scale([1, 1, 0.8])\n    sphere(d=12);\n\n    // Fur texture - small bumps across body\n    for(i = [0:3]) {\n        for(j = [0:5]) {\n            angle = j * 60;\n            radius = 8 + i * 5;\n            height = body_height/2 + 5 + i * 2;\n            translate([0, cos(angle) * radius, height])\n            sphere(d=2);\n        }\n    }\n}\n\n// Generate the complete quokka\nquokka();",
    "renders": true
  },
  {
    "animal": "quoll",
    "openscad_code": "// Quoll - medium complexity realistic style\n// Size: 80mm length\n\n$fn = 32;  // Resolution for curved surfaces\n\n// Main body\nmodule body() {\n    union() {\n        // Torso - elongated ellipsoid\n        scale([1.2, 0.7, 0.6])\n            sphere(r = 20);\n        \n        // Belly - slightly flattened bottom\n        translate([0, 0, -11])\n            scale([1.1, 0.6, 0.3])\n                sphere(r = 20);\n    }\n}\n\n// Head with snout\nmodule head() {\n    union() {\n        // Main head sphere\n        translate([-35, 0, 8])\n            scale([0.9, 0.8, 0.8])\n                sphere(r = 15);\n        \n        // Snout extension\n        translate([-50, 0, 5])\n            scale([1.5, 0.8, 0.7])\n                sphere(r = 8);\n        \n        // Nose\n        translate([-58, 0, 5])\n            scale([0.5, 0.8, 0.8])\n                sphere(r = 4);\n    }\n}\n\n// Ears - rounded triangles\nmodule ears() {\n    for(side = [-1, 1]) {\n        // Left ear\n        translate([-30, side * 12, 18])\n            rotate([0, side * 20, 0])\n                scale([0.8, 0.3, 1])\n                    cylinder(h = 10, r1 = 6, r2 = 3);\n        \n        // Inner ear detail\n        translate([-28, side * 12, 18])\n            rotate([0, side * 20, 0])\n                scale([0.6, 0.2, 0.8])\n                    cylinder(h = 8, r1 = 4, r2 = 2);\n    }\n}\n\n// Legs - simple cylinders\nmodule legs() {\n    for(side = [-1, 1]) {\n        // Front legs\n        translate([-20, side * 15, -15])\n            rotate([10, 0, 0])\n                cylinder(h = 18, r = 4);\n        \n        // Back legs\n        translate([20, side * 12, -15])\n            rotate([10, 0, 0])\n                cylinder(h = 20, r = 5);\n        \n        // Paws\n        translate([-20, side * 15, -33])\n            sphere(r = 5);\n        \n        translate([20, side * 12, -35])\n            sphere(r = 6);\n    }\n}\n\n// Tail - tapered cylinder\nmodule tail() {\n    translate([35, 0, 0])\n        rotate([10, 0, 0])\n            cylinder(h = 35, r1 = 8, r2 = 3);\n}\n\n// Spots pattern\nmodule spots() {\n    // Body spots\n    for(pos = [[-20, 8, 5], [-10, -5, 3], [5, 10, 4], [15, -8, 3], [25, 5, 4]]) {\n        translate(pos)\n            scale([1, 0.8, 0.5])\n                sphere(r = 3);\n    }\n    \n    // Head spots\n    for(pos = [[-35, 8, 12], [-40, -6, 10], [-45, 0, 8]]) {\n        translate(pos)\n            sphere(r = 2);\n    }\n}\n\n// Eyes\nmodule eyes() {\n    for(side = [-1, 1]) {\n        // Eye socket\n        translate([-45, side * 7, 10])\n            difference() {\n                sphere(r = 5);\n                translate([2, 0, 0])\n                    sphere(r = 5.2);\n            }\n        \n        // Pupil\n        translate([-47, side * 7, 10])\n            scale([0.5, 1, 1])\n                sphere(r = 2);\n    }\n}\n\n// Whiskers\nmodule whiskers() {\n    for(side = [-1, 1]) {\n        for(angle = [30, 0, -30]) {\n            translate([-52, side * 6, 5])\n                rotate([0, angle, side * 90])\n                    cylinder(h = 15, r = 0.5);\n        }\n    }\n}\n\n// Assemble the quoll\nunion() {\n    body();\n    head();\n    ears();\n    legs();\n    tail();\n    \n    // Add spots in contrasting color\n    color(\"darkgray\")\n        spots();\n    \n    // Eyes and whiskers\n    color(\"black\") {\n        eyes();\n        whiskers();\n    }\n}",
    "renders": true
  },
  {
    "animal": "rabbit",
    "openscad_code": "// Realistic Rabbit - Medium Complexity\n// Designed for 3D printing - approximately 80mm tall\n\n$fn = 50;  // Smooth curves for realistic look\n\n// Main module\nmodule rabbit() {\n    // Body\n    body();\n    \n    // Head\n    head();\n    \n    // Ears\n    ears();\n    \n    // Legs\n    legs();\n    \n    // Tail\n    tail();\n}\n\n// Rabbit body - egg-shaped\nmodule body() {\n    difference() {\n        // Main body\n        scale([1, 0.8, 1.2])\n        sphere(r = 20);\n        \n        // Belly flattening\n        translate([0, 0, -18])\n        scale([0.9, 1.1, 0.5])\n        sphere(r = 20);\n        \n        // Leg holes for printing\n        translate([12, -15, -20])\n        sphere(r = 8);\n        \n        translate([-12, -15, -20])\n        sphere(r = 8);\n    }\n}\n\n// Rabbit head\nmodule head() {\n    translate([0, 22, 15])\n    rotate([0, 10, 0])\n    difference() {\n        union() {\n            // Main head\n            scale([0.8, 0.9, 1])\n            sphere(r = 15);\n            \n            // Snout\n            translate([0, 12, 0])\n            scale([0.6, 0.8, 0.6])\n            sphere(r = 8);\n        }\n        \n        // Eye sockets\n        translate([6, 8, 5])\n        sphere(r = 2.5);\n        \n        translate([-6, 8, 5])\n        sphere(r = 2.5);\n        \n        // Nostrils\n        translate([2, 14, -2])\n        sphere(r = 1);\n        \n        translate([-2, 14, -2])\n        sphere(r = 1);\n    }\n    \n    // Eyes\n    translate([6, 8.5, 5])\n    sphere(r = 2);\n    \n    translate([-6, 8.5, 5])\n    sphere(r = 2);\n}\n\n// Ears with inner details\nmodule ears() {\n    // Left ear\n    translate([-7, 22, 28])\n    rotate([0, -10, -15])\n    union() {\n        // Outer ear\n        scale([0.3, 1, 2.5])\n        sphere(r = 8);\n        \n        // Inner ear\n        translate([0, 0, 1])\n        scale([0.2, 0.8, 2.2])\n        color(\"pink\")\n        sphere(r = 7);\n    }\n    \n    // Right ear\n    mirror([1, 0, 0])\n    translate([-7, 22, 28])\n    rotate([0, -10, -15])\n    union() {\n        // Outer ear\n        scale([0.3, 1, 2.5])\n        sphere(r = 8);\n        \n        // Inner ear\n        translate([0, 0, 1])\n        scale([0.2, 0.8, 2.2])\n        color(\"pink\")\n        sphere(r = 7);\n    }\n}\n\n// Legs with paws\nmodule legs() {\n    // Front legs\n    for(side = [-1, 1]) {\n        translate([side * 12, 10, -15])\n        rotate([0, 10, 0])\n        union() {\n            // Upper leg\n            cylinder(h = 15, r1 = 5, r2 = 4);\n            \n            // Paw\n            translate([0, 0, -8])\n            sphere(r = 5);\n        }\n    }\n    \n    // Back legs\n    for(side = [-1, 1]) {\n        translate([side * 12, -15, -10])\n        rotate([0, 30, 0])\n        union() {\n            // Thigh\n            scale([1, 1.2, 0.8])\n            sphere(r = 8);\n            \n            // Lower leg\n            translate([0, -8, -8])\n            cylinder(h = 12, r1 = 6, r2 = 5);\n            \n            // Foot\n            translate([0, -8, -16])\n            scale([1.5, 1, 0.8])\n            sphere(r = 6);\n        }\n    }\n}\n\n// Fluffy tail\nmodule tail() {\n    translate([0, -20, -8])\n    sphere(r = 8);\n    \n    // Tail detail spheres\n    for(i = [1:8]) {\n        rotate([0, 0, i * 45])\n        translate([0, 0, 0])\n        sphere(r = 4);\n    }\n}\n\n// Generate the rabbit\nrabbit();",
    "renders": true
  },
  {
    "animal": "raccoon",
    "openscad_code": "// Raccoon - Medium Complexity Realistic Style\n// Overall size ~60mm long, 30mm wide, 35mm tall\n\n// Main parameters\nbody_length = 40;\nbody_height = 25;\nbody_width = 22;\nhead_diameter = 18;\nleg_height = 8;\nleg_width = 4;\ntail_length = 25;\ntail_width = 8;\near_size = 4;\n\n// Wall thickness for 3D printing\nwall = 1.2;\n\nmodule raccoon() {\n    // Body\n    union() {\n        // Torso - main body\n        translate([0, 0, leg_height])\n            scale([1, 0.8, 0.7])\n            sphere(d=body_width, $fn=32);\n        \n        // Chest - forward extension\n        translate([body_length/3, 0, leg_height])\n            scale([0.8, 0.9, 0.6])\n            sphere(d=body_width*0.9, $fn=32);\n        \n        // Head\n        translate([body_length/2 + 5, 0, leg_height + body_height/2])\n            sphere(d=head_diameter, $fn=32);\n        \n        // Snout\n        translate([body_length/2 + 12, 0, leg_height + body_height/2 - 2])\n            scale([1.5, 0.8, 0.8])\n            sphere(d=head_diameter*0.6, $fn=32);\n        \n        // Ears\n        translate([body_length/2 + 5, head_diameter/2 - 2, leg_height + body_height/2 + head_diameter/2 - 3])\n            rotate([0, -30, 0])\n            scale([1, 0.7, 1.2])\n            cylinder(h=ear_size, d1=ear_size*1.2, d2=ear_size*0.8, $fn=16);\n        translate([body_length/2 + 5, -head_diameter/2 + 2, leg_height + body_height/2 + head_diameter/2 - 3])\n            rotate([0, -30, 0])\n            scale([1, 0.7, 1.2])\n            cylinder(h=ear_size, d1=ear_size*1.2, d2=ear_size*0.8, $fn=16);\n        \n        // Legs - four legs\n        for(x = [-body_length/3, body_length/3]) {\n            for(side = [-1, 1]) {\n                translate([x, side*body_width/2 - side*leg_width/2, leg_height/2])\n                    scale([0.9, 1.1, 1])\n                    cylinder(h=leg_height, d=leg_width, $fn=16);\n            }\n        }\n        \n        // Tail - bushy curved tail\n        translate([-body_length/2 - tail_length/2, 0, leg_height + 5])\n            rotate([0, 0, -30])\n            scale([1.2, 1, 0.8])\n            cylinder(h=tail_length, d1=tail_width, d2=tail_width*0.6, $fn=24);\n        \n        // Tail fluff extension\n        translate([-body_length/2 - tail_length - 2, 0, leg_height + 3])\n            sphere(d=tail_width*1.2, $fn=16);\n    }\n    \n    // Mask markings\n    difference() {\n        // Head base\n        translate([body_length/2 + 5, 0, leg_height + body_height/2])\n            sphere(d=head_diameter, $fn=32);\n            \n        // Eye holes for mask effect\n        for(side = [-1, 1]) {\n            translate([body_length/2 + 8, side*head_diameter/3, leg_height + body_height/2 + 2])\n                scale([1.5, 1.2, 0.8])\n                sphere(d=head_diameter/3, $fn=16);\n        }\n    }\n    \n    // Eyes\n    for(side = [-1, 1]) {\n        translate([body_length/2 + 9, side*head_diameter/3, leg_height + body_height/2 + 2.5])\n            sphere(d=2, $fn=16);\n    }\n    \n    // Nose\n    translate([body_length/2 + 14, 0, leg_height + body_height/2 - 2])\n        sphere(d=2.5, $fn=16);\n    \n    // Stripes on tail\n    for(i = [1:5]) {\n        translate([-body_length/2 - i*tail_length/6, 0, leg_height + 5])\n            rotate([0, 0, -30])\n            scale([1.2, 1, 0.8])\n            difference() {\n                cylinder(h=tail_length/7, d1=tail_width*0.9, d2=tail_width*0.5, $fn=24);\n                translate([0, 0, -0.1])\n                    cylinder(h=tail_length/7 + 0.2, d1=tail_width*0.7, d2=tail_width*0.3, $fn=24);\n            }\n    }\n}\n\n// Center the model\ntranslate([0, 0, 0])\n    raccoon();",
    "renders": true
  },
  {
    "animal": "rail",
    "openscad_code": "// Realistic medium-complexity rail for model scenery\n// Overall length 80 mm, height 12 mm, width 15 mm\n// 3D-printable, no steep overhangs, 0.8 mm minimum walls\n\n// Parameters\nrail_len   = 80;      // total length of the rail segment\ntie_pitch  = 8;       // center-to-center distance of ties\ntie_cnt    = floor(rail_len/tie_pitch)+1;\ntie_w      = 15;      // tie width\ntie_t      = 2.5;     // tie thickness\nrail_h     = 12;      // overall rail height above ties\nhead_w     = 3.0;     // rail head width\nhead_h     = 2.2;     // rail head thickness\nweb_w      = 1.2;     // rail web thickness\nfoot_w     = 6.0;     // rail foot width\nfoot_h     = 2.0;     // rail foot thickness\nclearance  = 0.4;     // extra space for print tolerance\n\nmodule rail_profile() {\n    // Centered on Z=0, extends upward\n    // Head\n    translate([0, 0, rail_h - head_h])\n        cube([head_w, rail_len, head_h], center=true);\n    \n    // Web\n    translate([0, 0, foot_h])\n        cube([web_w, rail_len, rail_h - head_h - foot_h], center=true);\n    \n    // Foot (base)\n    difference() {\n        cube([foot_w, rail_len, foot_h], center=true);\n        // Bolt holes along foot\n        for(i=[-rail_len/2+5 : 10 : rail_len/2-5])\n            translate([0, i, foot_h/2])\n                rotate([90, 0, 0])\n                    cylinder(h=foot_w+1, d=2, $fn=12, center=true);\n    }\n}\n\nmodule tie() {\n    // Single wooden tie with wood-grain texture simulated by small cuts\n    difference() {\n        cube([tie_w, tie_t, 2], center=true);\n        // Cut shallow grooves for texture\n        for(x=[-tie_w/2+2 : 2 : tie_w/2-2])\n            translate([x, 0, 0])\n                cube([0.5, tie_t+0.1, 1.0], center=true);\n    }\n}\n\n// Assembly\n// Ties\nfor(i=[0:tie_cnt-1])\n    translate([-rail_len/2 + i*tie_pitch, 0, 0])\n        tie();\n\n// Left rail\ntranslate([-rail_gauge/2, 0, 2])\n    rail_profile();\n\n// Right rail\nrail_gauge = 16.5; // HO/OO gauge in mm\ntranslate([rail_gauge/2, 0, 2])\n    rail_profile();\n\n// Optional spike heads (small hemispheres)\nmodule spike() {\n    translate([0, 0, 2])\n        scale([1, 0.4, 0.4])\n            sphere(d=1.5, $fn=8);\n}\n\nfor(i=[0:tie_cnt-1])\n    for(side=[-1, 1])\n        translate([-rail_len/2 + i*tie_pitch, side*tie_t/3, 0])\n            spike();",
    "renders": true
  },
  {
    "animal": "ram",
    "openscad_code": "// Ram - Realistic style, medium complexity\n// Overall size: ~80mm long\n\n$fn=32;\n\n// Main body\nmodule body() {\n    difference() {\n        // Torso\n        translate([0, 0, 15]) scale([1.2, 1, 1]) sphere(20);\n        \n        // Neck cavity\n        translate([30, 0, 25]) rotate([0, 90, 0]) cylinder(h=25, r1=10, r2=12);\n    }\n}\n\n// Head\nmodule head() {\n    translate([45, 0, 35]) rotate([0, -20, 0]) {\n        union() {\n            // Skull\n            scale([1.3, 0.9, 1]) sphere(12);\n            \n            // Snout\n            translate([12, 0, -3]) scale([1.5, 0.8, 0.8]) sphere(8);\n            \n            // Ears\n            for(side=[-1, 1]) {\n                translate([0, side*10, 5]) rotate([0, -20*side, 20]) \n                    scale([0.3, 0.1, 0.5]) cylinder(h=15, r1=5, r2=2);\n            }\n            \n            // Eyes\n            for(side=[-1, 1]) {\n                translate([8, side*6, 3]) sphere(2.5);\n            }\n        }\n    }\n}\n\n// Horns\nmodule horns() {\n    for(side=[-1, 1]) {\n        translate([40, side*10, 45]) rotate([0, 0, 10*side]) {\n            // Base curl\n            rotate_extrude(angle=270, $fn=16) \n                translate([8, 0, 0]) circle(r=3);\n            \n            // Second curl\n            translate([-3, 3, 8]) rotate([30, 0, 0]) rotate_extrude(angle=180, $fn=12) \n                translate([5, 0, 0]) circle(r=2);\n        }\n    }\n}\n\n// Legs\nmodule legs() {\n    for(x=[-15, 15], side=[-1, 1]) {\n        translate([x, side*15, 0]) {\n            // Upper leg\n            translate([0, 0, 15]) rotate([10*side, 0, 0]) \n                cylinder(h=20, r=5, r1=5, r2=4);\n            \n            // Lower leg\n            translate([0, 0, 6]) rotate([10*side, 0, 0]) \n                cylinder(h=15, r=4, r1=4, r2=3);\n            \n            // Hoof\n            translate([0, 0, 0]) scale([1.2, 1, 0.5]) sphere(4);\n        }\n    }\n}\n\n// Tail\nmodule tail() {\n    translate([-25, 0, 15]) rotate([0, 45, 0]) {\n        // Tail base\n        cylinder(h=15, r=4, r1=4, r2=2);\n        \n        // Tuft\n        translate([0, 0, -8]) sphere(5);\n    }\n}\n\n// Wool texture using small spheres\nmodule wool() {\n    for(i=[-20:10:20], j=[-20:10:20]) {\n        translate([i, j, 20+sin(i*2)*3+cos(j*2)*3]) sphere(3);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    horns();\n    legs();\n    tail();\n    wool();\n}",
    "renders": true
  },
  {
    "animal": "rat",
    "openscad_code": "// Rat - Realistic Style, Medium Complexity\n// Main Dimensions: ~80mm nose-to-tail, ~35mm tall\n\n$fn = 24;  // Smooth curves for printing\n\n// Overall scale factor\nscale_factor = 1;\n\n// Main body\nmodule rat_body() {\n    // Torso - slightly elongated ellipsoid\n    translate([0, 0, 12]) \n        scale([1.2, 1, 0.8])\n        sphere(15);\n    \n    // Rump\n    translate([-20, 0, 10])\n        scale([1.3, 1.1, 1])\n        sphere(12);\n    \n    // Chest area\n    translate([15, 0, 10])\n        scale([0.9, 0.8, 0.7])\n        sphere(12);\n}\n\n// Head with snout\nmodule rat_head() {\n    // Main head sphere\n    translate([25, 0, 18])\n        sphere(10);\n    \n    // Snout extension\n    translate([35, 0, 16])\n        scale([1.5, 0.8, 0.8])\n        sphere(6);\n    \n    // Nose tip\n    translate([42, 0, 16])\n        sphere(3);\n}\n\n// Ears\nmodule rat_ears() {\n    // Left ear\n    translate([22, -10, 27]) {\n        rotate([0, -20, -30])\n            scale([1, 0.3, 1.5])\n            sphere(5);\n    }\n    \n    // Right ear\n    translate([22, 10, 27]) {\n        rotate([0, -20, 30])\n            scale([1, 0.3, 1.5])\n            sphere(5);\n    }\n}\n\n// Eyes\nmodule rat_eyes() {\n    // Left eye\n    translate([32, -8, 20])\n        sphere(2.5);\n    \n    // Right eye\n    translate([32, 8, 20])\n        sphere(2.5);\n}\n\n// Whiskers\nmodule rat_whiskers() {\n    // Left whiskers\n    for(angle = [-30, 0, 30]) {\n        translate([40, -7, 16]) {\n            rotate([0, 0, angle])\n                rotate([90, 0, 0])\n                    cylinder(h=12, r1=0.5, r2=0.3);\n        }\n    }\n    \n    // Right whiskers\n    for(angle = [-30, 0, 30]) {\n        translate([40, 7, 16]) {\n            rotate([0, 0, -angle])\n                rotate([90, 0, 0])\n                    cylinder(h=12, r1=0.5, r2=0.3);\n        }\n    }\n}\n\n// Legs\nmodule rat_legs() {\n    // Front legs\n    for(side = [-1, 1]) {\n        // Upper leg\n        translate([15, side*10, 8]) {\n            rotate([0, side*30, 0])\n                cylinder(h=10, r1=3, r2=2.5);\n        }\n        \n        // Foot\n        translate([12, side*13, -2]) {\n            rotate([0, 0, side*20])\n                scale([1.5, 1, 0.5])\n                sphere(3);\n        }\n    }\n    \n    // Rear legs\n    for(side = [-1, 1]) {\n        // Upper leg\n        translate([-15, side*8, 6]) {\n            rotate([0, side*15, 0])\n                cylinder(h=12, r1=4, r2=3);\n        }\n        \n        // Lower leg\n        translate([-18, side*10, -4]) {\n            rotate([0, side*15, 0])\n                cylinder(h=8, r1=2.5, r2=2);\n        }\n        \n        // Foot\n        translate([-20, side*12, -8]) {\n            scale([2, 1.2, 0.6])\n            sphere(3.5);\n        }\n    }\n}\n\n// Tail\nmodule rat_tail() {\n    // Segmented tail for printability\n    for(i = [0:10]) {\n        translate([-25 - i*3, 0, 8 - i*0.5]) {\n            rotate([0, 0, -i*5])\n                sphere(3 - i*0.15);\n        }\n    }\n}\n\n// Assembly\nscale([scale_factor, scale_factor, scale_factor])\nunion() {\n    rat_body();\n    rat_head();\n    rat_ears();\n    rat_eyes();\n    rat_whiskers();\n    rat_legs();\n    rat_tail();\n}",
    "renders": true
  },
  {
    "animal": "rattlesnake",
    "openscad_code": "// Realistic Rattlesnake – medium complexity\n// Overall length ~80 mm, printable on FDM printer\n\n$fn = 36;               // smooth curves\nbody_d = 10;            // diameter of body segments\nscale = 0.96;           // tapering per segment\nsegments = 22;          // number of body segments\nrattle_parts = 6;       // segments in rattle\nwall = 1.2;             // printable wall thickness\n\nmodule body_segment(idx) {\n    // length shrinks toward tail\n    seg_len = 7 - idx * 0.15;\n    diam = body_d * pow(scale, idx);\n    \n    // slightly oval cross section\n    translate([idx*seg_len*0.9, 0, 0])\n        rotate([0, 90, 0])\n            scale([1, 0.9, 1])\n                cylinder(h=seg_len, d=diam, center=true);\n}\n\nmodule head() {\n    // main head block\n    translate([segments*6.3, 0, 0]) {\n        rotate([0, 90, 0])\n            cylinder(h=15, d=12, center=true);\n        \n        // snout taper\n        translate([7.5, 0, 0])\n            scale([1.2, 1, 1])\n                sphere(d=10);\n        \n        // eye sockets\n        for(side=[-1, 1])\n            translate([2, side*4.5, 3])\n                rotate([0, side*10, 0])\n                    difference() {\n                        sphere(d=4);\n                        translate([0, 0, -2])\n                            cube([5, 5, 5], center=true);\n                    }\n        \n        // eyeball\n        for(side=[-1, 1])\n            translate([2.5, side*4.5, 3])\n                sphere(d=2.5);\n        \n        // heat pits\n        for(side=[-1, 1])\n            translate([6.5, side*3, -1])\n                sphere(d=1.5);\n    }\n}\n\nmodule rattle() {\n    for(i=[0:rattle_parts-1]) {\n        diam = body_d * pow(scale, segments) - i*1.2;\n        len = 4 - i*0.3;\n        translate([-(i+1)*len*0.9, 0, 0])\n            rotate([0, 90, 0])\n                difference() {\n                    cylinder(h=len, d=diam, center=true);\n                    // hollow for printing\n                    cylinder(h=len+1, d=diam - 2*wall, center=true);\n                }\n    }\n}\n\n// belly cutout to avoid overhangs\nmodule belly_cut() {\n    hull() {\n        for(i=[0:segments-1])\n            translate([i*6.3, 0, -body_d/2 - 1])\n                sphere(d=body_d);\n    }\n}\n\nunion() {\n    // body segments\n    for(i=[0:segments-1])\n        body_segment(i);\n    \n    head();\n    rattle();\n    \n    // flatten bottom for printing\n    difference() {\n        union() {\n            for(i=[0:segments-1])\n                body_segment(i);\n            head();\n            rattle();\n        }\n        \n        belly_cut();\n    }\n}",
    "renders": true
  },
  {
    "animal": "raven",
    "openscad_code": "// Raven - Medium Complexity Realistic Style\n// Overall dimensions ~80mm wingspan, 40mm height\n\n$fn = 24;\n\nmodule head() {\n    // Main head sphere\n    translate([0, 0, 5])\n    sphere(d=12);\n    \n    // Beak\n    translate([7, 0, 5])\n    rotate([0, -15, 0])\n    cylinder(h=10, d1=3, d2=1);\n    \n    // Eyes\n    translate([5, 3, 6])\n    sphere(d=2);\n    translate([5, -3, 6])\n    sphere(d=2);\n    \n    // Neck\n    translate([0, 0, -5])\n    cylinder(h=8, d1=12, d2=8);\n}\n\nmodule body() {\n    // Main body\n    translate([0, 0, 0])\n    scale([1.5, 1, 1.2])\n    sphere(d=20);\n    \n    // Chest bulge\n    translate([-8, 0, -2])\n    scale([0.8, 1, 0.6])\n    sphere(d=15);\n    \n    // Tail\n    difference() {\n        translate([-18, 0, -2])\n        rotate([0, 10, 0])\n        cube([15, 12, 2]);\n        \n        // Tail feather cuts\n        for(i=[-5:5:5]) {\n            translate([-10, i, -1])\n            cube([8, 2, 4]);\n        }\n    }\n}\n\nmodule wing() {\n    // Upper wing\n    translate([0, 0, 0])\n    rotate([0, 0, 45])\n    scale([1, 0.3, 1])\n    cylinder(h=25, d=8);\n    \n    // Lower wing section\n    translate([0, 0, 0])\n    rotate([0, 0, 30])\n    scale([1, 0.2, 1])\n    cylinder(h=30, d=6);\n    \n    // Wing tip\n    translate([20, 0, 0])\n    sphere(d=5);\n    \n    // Primary feathers\n    for(i=[-20:10:20]) {\n        translate([15+i/2, 0, i/3])\n        rotate([0, 0, i/2])\n        cube([8, 1, 3]);\n    }\n}\n\nmodule legs() {\n    // Left leg\n    translate([-5, 3, -15])\n    cylinder(h=8, d1=4, d2=2);\n    \n    // Left foot\n    translate([-5, 5, -23])\n    rotate([0, 90, 0])\n    scale([1, 0.3, 0.3])\n    cylinder(h=6, d=4);\n    \n    // Toes\n    for(i=[-2:2:2]) {\n        translate([-5, 5+i, -23])\n        rotate([0, 90, 0])\n        cylinder(h=3, d=1);\n    }\n    \n    // Right leg\n    translate([-5, -3, -15])\n    cylinder(h=8, d1=4, d2=2);\n    \n    // Right foot\n    translate([-5, -5, -23])\n    rotate([0, 90, 0])\n    scale([1, 0.3, 0.3])\n    cylinder(h=6, d=4);\n    \n    // Toes\n    for(i=[-2:2:2]) {\n        translate([-5, -5+i, -23])\n        rotate([0, 90, 0])\n        cylinder(h=3, d=1);\n    }\n}\n\n// Main assembly\ntranslate([0, 0, 30]) {\n    // Head\n    head();\n    \n    // Body\n    body();\n    \n    // Left wing\n    translate([5, 10, 5])\n    rotate([0, 10, 0])\n    wing();\n    \n    // Right wing\n    translate([5, -10, 5])\n    rotate([0, 10, 180])\n    wing();\n    \n    // Legs\n    legs();\n}",
    "renders": true
  },
  {
    "animal": "ray",
    "openscad_code": "// OpenSCAD Ray (Medium Realistic) - 3D printable\n// Total length ~90 mm, 2 mm wall thickness, no overhangs\n\n$fa = 1;\n$fs = 0.5;\n\n// Overall scale factor\nsf = 1;\n\nmodule ray() {\n    // Main body\n    difference() {\n        union() {\n            // Central disk\n            linear_extrude(height = 6, center = true, scale = 0.7)\n                circle(d = 40);\n            \n            // Head with snout\n            translate([0, 30, 0])\n                rotate([0, 90, 0])\n                    cylinder(h = 25, d1 = 12, d2 = 8, $fn = 24);\n            \n            // Tail\n            translate([0, -35, 0])\n                rotate([0, 90, 0])\n                    cylinder(h = 45, d1 = 2.5, d2 = 0.5, $fn = 12);\n            \n            // Wing lobes\n            for (a = [0, 180]) {\n                rotate([0, 0, a])\n                    translate([0, -10, 0])\n                        scale([1, 1.2, 1])\n                            difference() {\n                                sphere(d = 45, $fn = 48);\n                                translate([0, -30, 0])\n                                    cube([80, 60, 80], center = true);\n                            };\n            }\n        }\n        \n        // Eye holes (2 mm thick walls around)\n        for (y = [35, 30]) {\n            translate([y * 0.6, 30, 0])\n                rotate([0, 90, 0])\n                    cylinder(h = 15, d = 4.5, $fn = 16);\n            translate([y * -0.6, 30, 0])\n                rotate([0, 90, 0])\n                    cylinder(h = 15, d = 4.5, $fn = 16);\n        }\n        \n        // Gill slits (five on each side)\n        for (i = [0:4]) {\n            translate([10 + i * 3.5, 15, 0])\n                rotate([0, 90, 0])\n                    cylinder(h = 12, d = 2.5, $fn = 8);\n            translate([-10 - i * 3.5, 15, 0])\n                rotate([0, 90, 0])\n                    cylinder(h = 12, d = 2.5, $fn = 8);\n        }\n        \n        // Thickened base cavity for print stability\n        translate([0, 0, -3])\n            cylinder(h = 6, d = 38, $fn = 48);\n    }\n    \n    // Dorsal ridges for realism\n    for (i = [0:10]) {\n        rotate([0, 0, i * 36])\n            translate([0, -5, 3])\n                scale([1.2, 0.3, 0.8])\n                    sphere(d = 6, $fn = 16);\n    }\n    \n    // Tail spine ridge\n    for (i = [1:8]) {\n        translate([0, -38 + i * 5, 0])\n            scale([0.2, 0.2, 0.8])\n                sphere(d = 3.5, $fn = 6);\n    }\n}\n\n// Render the ray\nscale(sf) ray();",
    "renders": true
  },
  {
    "animal": "redstart",
    "openscad_code": "// Redstart 3D Model (Medium Realistic)\n// Designed for 3D printing (no overhangs, 2mm wall thickness)\n\n$fn = 50;\n\n// Main bird assembly\nmodule redstart() {\n    // Body\n    body();\n    \n    // Head\n    translate([0, 18, 8]) head();\n    \n    // Tail\n    translate([-20, 0, 0]) tail();\n    \n    // Wings\n    translate([0, 0, 10]) wings();\n    \n    // Legs\n    translate([5, -5, -8]) leg();\n    translate([-5, -5, -8]) leg();\n}\n\n// Bird body (oval shape)\nmodule body() {\n    union() {\n        // Main body\n        scale([1.2, 1, 1.1]) rotate([90, 0, 0]) \n            cylinder(h = 20, r1 = 6, r2 = 5);\n        \n        // Chest bulge\n        translate([0, 5, 0])\n            scale([0.8, 0.6, 0.8]) sphere(7);\n    }\n}\n\n// Head with beak and eyes\nmodule head() {\n    union() {\n        // Head sphere\n        sphere(5);\n        \n        // Beak (cone shape)\n        translate([0, 5.5, -1]) rotate([0, -20, 0])\n            cylinder(h = 4, r1 = 2, r2 = 0.5);\n        \n        // Eye left\n        translate([2, 3, 2]) sphere(1);\n        \n        // Eye right\n        translate([-2, 3, 2]) sphere(1);\n        \n        // Eye pupils\n        translate([2.2, 3.5, 2.2]) color(\"black\") sphere(0.5);\n        translate([-1.8, 3.5, 2.2]) color(\"black\") sphere(0.5);\n    }\n}\n\n// Tail feathers (fan shape)\nmodule tail() {\n    union() {\n        // Central tail feather\n        translate([0, 0, 0]) rotate([0, -10, 0])\n            scale([1, 0.2, 0.1]) cube([15, 8, 1]);\n        \n        // Side feathers (using loop)\n        for (i = [-1:1]) {\n            translate([i*3, 0, i*2]) rotate([0, -10-i*5, i*15])\n                scale([0.8, 0.15, 0.08]) cube([12, 7, 0.8]);\n        }\n    }\n}\n\n// Wings\nmodule wings() {\n    union() {\n        // Left wing\n        translate([7, 0, 2]) rotate([0, 0, 30])\n            wing_shape();\n        \n        // Right wing\n        translate([-7, 0, 2]) mirror([1, 0, 0]) rotate([0, 0, 30])\n            wing_shape();\n    }\n}\n\n// Wing shape (curved)\nmodule wing_shape() {\n    difference() {\n        // Main wing\n        translate([0, 0, 0]) rotate([0, -10, 0])\n            scale([1, 0.3, 0.15]) cylinder(h = 12, r1 = 8, r2 = 4);\n        \n        // Wing tip curve\n        translate([8, 0, 0]) rotate([0, 90, 0])\n            cylinder(h = 3, r = 2.5);\n        \n        // Feather details (small indentations)\n        for (i = [1:3]) {\n            translate([2*i, 0, -0.5]) rotate([0, -10, 0])\n                scale([0.3, 0.2, 0.1]) cube([2, 3, 0.5]);\n        }\n    }\n}\n\n// Leg with foot\nmodule leg() {\n    union() {\n        // Upper leg\n        translate([0, 0, 0]) rotate([0, 0, 10])\n            cylinder(h = 4, r = 0.8);\n        \n        // Lower leg\n        translate([0, -1, -4]) rotate([0, 0, -10])\n            cylinder(h = 3, r = 0.6);\n        \n        // Foot\n        translate([0, -2, -7]) foot();\n    }\n}\n\n// Bird foot with toes\nmodule foot() {\n    union() {\n        // Main foot pad\n        translate([0, 0, 0]) scale([1.5, 0.5, 0.3]) sphere(1.5);\n        \n        // Toes (front)\n        for (i = [-1:1]) {\n            translate([i*0.8, -1.2, 0]) rotate([0, 0, i*10])\n                cylinder(h = 2, r = 0.3);\n        }\n        \n        // Back toe\n        translate([0.5, 0.5, 0]) rotate([0, 0, 120])\n            cylinder(h = 1.5, r = 0.3);\n    }\n}\n\n// Generate the bird\nredstart();",
    "renders": true
  },
  {
    "animal": "reindeer",
    "openscad_code": "// Reindeer - Medium complexity realistic style\n// Overall size approximately 80mm long\n\n// Parameters for easy resizing\nbody_length = 40;\nbody_height = 25;\nbody_width = 20;\nleg_length = 30;\nhead_length = 20;\nhead_height = 15;\nantler_height = 35;\n\n// Main body - oval shape\nmodule body() {\n    difference() {\n        // Main torso\n        scale([1.2, 0.8, 1])\n        sphere(d=body_height, $fn=30);\n        \n        // Neck indentation\n        translate([body_length/2-5, 0, body_height/3])\n        rotate([0, 90, 0])\n        cylinder(h=15, r1=8, r2=5, $fn=20);\n    }\n}\n\n// Head with snout\nmodule head() {\n    union() {\n        // Skull\n        translate([body_length/2+head_length/2, 0, body_height+5])\n        scale([1.3, 0.8, 1])\n        sphere(d=head_height, $fn=25);\n        \n        // Snout\n        translate([body_length/2+head_length, 0, body_height+2])\n        rotate([0, -20, 0])\n        cylinder(h=head_length/2, r1=head_height/3, r2=head_height/4, $fn=20);\n        \n        // Nose\n        translate([body_length/2+head_length+2, 0, body_height+1])\n        sphere(d=4, $fn=15);\n    }\n}\n\n// Ear module\nmodule ear(side) {\n    translate([body_length/2+head_length/2-5, side*6, body_height+12])\n    rotate([0, 0, side*20])\n    scale([0.5, 0.3, 1])\n    cylinder(h=8, r1=4, r2=2, $fn=8);\n}\n\n// Eye module\nmodule eye(side) {\n    translate([body_length/2+head_length/2, side*5, body_height+8])\n    sphere(d=3, $fn=10);\n}\n\n// Leg module\nmodule leg(offset_x, offset_y) {\n    translate([offset_x, offset_y, -leg_length/2])\n    rotate([0, 10, 0])\n    cylinder(h=leg_length, r1=3, r2=2, $fn=12);\n}\n\n// Hoof module\nmodule hoof(offset_x, offset_y) {\n    translate([offset_x, offset_y, -leg_length-2])\n    scale([1.2, 0.8, 0.5])\n    sphere(d=5, $fn=10);\n}\n\n// Antler branch module\nmodule antler_branch(level, angle, length) {\n    if (level > 0) {\n        rotate([0, 0, angle])\n        translate([length, 0, 0])\n        cylinder(h=length, r1=1.5, r2=1, $fn=8);\n        \n        antler_branch(level-1, 30, length*0.7);\n        antler_branch(level-1, -30, length*0.7);\n    }\n}\n\n// Main antler assembly\nmodule antler(side) {\n    translate([body_length/2+head_length/2-2, side*5, body_height+15])\n    rotate([0, 20, 0])\n    cylinder(h=antler_height/2, r1=2, r2=1.5, $fn=8);\n    \n    translate([body_length/2+head_length/2-2, side*5, body_height+15+antler_height/2])\n    rotate([0, -10, 0])\n    antler_branch(2, 0, antler_height/3);\n    antler_branch(2, 45, antler_height/4);\n    antler_branch(2, -45, antler_height/4);\n}\n\n// Tail\nmodule tail() {\n    translate([-body_length/2-5, 0, body_height/2])\n    rotate([30, 0, 0])\n    scale([1, 0.6, 0.6])\n    sphere(d=8, $fn=15);\n}\n\n// Assemble the reindeer\nunion() {\n    // Main body parts\n    body();\n    head();\n    tail();\n    \n    // Ears\n    ear(1);\n    ear(-1);\n    \n    // Eyes\n    color(\"black\") {\n        eye(1);\n        eye(-1);\n    }\n    \n    // Legs with hooves\n    for (x = [-body_length/3, body_length/3]) {\n        for (y = [-body_width/3, body_width/3]) {\n            leg(x, y);\n            hoof(x, y);\n        }\n    }\n    \n    // Antlers\n    antler(1);\n    antler(-1);\n}",
    "renders": true
  },
  {
    "animal": "rhea",
    "openscad_code": "// Rhea Bird - Medium complexity realistic model\n// Total height: 80mm, Length: 90mm, Width: 40mm\n\n$fn = 24;\n\n// Main body module\nmodule body() {\n    // Torso - elongated ellipsoid\n    translate([0, 0, 30])\n    scale([1.8, 1, 1.2])\n    sphere(15);\n    \n    // Lower body extension\n    translate([0, 0, 15])\n    scale([1.5, 0.8, 1])\n    cylinder(h=15, r1=12, r2=10);\n}\n\n// Neck module\nmodule neck() {\n    translate([-15, 0, 45])\n    rotate([0, -20, 0])\n    scale([1, 0.8, 1.5])\n    cylinder(h=20, r1=6, r2=4);\n}\n\n// Head module\nmodule head() {\n    translate([-25, 0, 50])\n    rotate([0, -30, 0])\n    scale([1.2, 0.8, 1])\n    sphere(8);\n    \n    // Beak\n    translate([-32, 0, 49])\n    rotate([0, -30, 0])\n    scale([1, 0.6, 0.4])\n    cylinder(h=8, r1=3, r2=0);\n}\n\n// Eye module\nmodule eye() {\n    translate([-30, 3, 52])\n    sphere(1.5);\n}\n\n// Leg module\nmodule leg(side) {\n    // Upper leg\n    translate([side * 8, 0, 15])\n    rotate([0, side * 10, 0])\n    cylinder(h=25, r=3);\n    \n    // Lower leg\n    translate([side * 10, 0, 0])\n    rotate([0, side * 5, 0])\n    cylinder(h=20, r=2.5);\n    \n    // Foot with three toes\n    translate([side * 12, 0, -2])\n    union() {\n        // Main foot base\n        cube([10, 4, 2]);\n        \n        // Toes\n        for(i = [-1:1]) {\n            translate([i * 3 + 5, 0, -1.5])\n            cube([3, 2, 1.5]);\n        }\n    }\n}\n\n// Wing module\nmodule wing(side) {\n    translate([side * 15, 0, 35])\n    rotate([0, side * 20, 0])\n    difference() {\n        // Main wing shape\n        scale([1, 0.3, 0.8])\n        sphere(12);\n        \n        // Wing tip\n        translate([side * 8, 0, -5])\n        sphere(6);\n    }\n}\n\n// Tail module\nmodule tail() {\n    translate([15, 0, 25])\n    rotate([0, 30, 0])\n    scale([1.2, 0.8, 0.5])\n    sphere(10);\n}\n\n// Feathers detail\nmodule feathers() {\n    // Back feathers\n    for(i = [1:5]) {\n        translate([10 - i * 3, 0, 40 - i * 2])\n        rotate([0, 10, 0])\n        scale([0.5, 2, 0.1])\n        sphere(3);\n    }\n}\n\n// Main assembly\nunion() {\n    // Body parts\n    body();\n    neck();\n    head();\n    eye();\n    mirror([0, 1, 0]) eye();\n    \n    // Limbs\n    leg(1);\n    leg(-1);\n    wing(1);\n    wing(-1);\n    \n    // Tail and details\n    tail();\n    feathers();\n}",
    "renders": true
  },
  {
    "animal": "rhinoceros",
    "openscad_code": "// Rhinoceros - Medium complexity realistic style\n// Designed for 3D printing, no supports needed\n\n$fn = 36;\n\n// Body dimensions\nbody_length = 60;\nbody_width = 25;\nbody_height = 30;\n\n// Head dimensions\nhead_length = 25;\nhead_width = 15;\nhead_height = 20;\n\n// Leg dimensions\nleg_height = 25;\nleg_width = 8;\nleg_depth = 10;\n\n// Horn dimensions\nhorn_base = 5;\nhorn_height = 12;\n\nmodule rhino() {\n    // Main body - ellipsoid shape\n    union() {\n        // Central body\n        scale([1, 0.8, 0.6])\n            sphere(d=body_width);\n        \n        // Extended rear\n        translate([-20, 0, -5])\n            scale([1.5, 1, 0.8])\n                sphere(d=body_width * 0.9);\n        \n        // Extended front\n        translate([20, 0, -3])\n            scale([1.2, 0.9, 0.7])\n                sphere(d=body_width * 0.8);\n    }\n    \n    // Head\n    translate([body_length/2 + 5, 0, body_height/3])\n    rotate([0, -20, 0])\n    union() {\n        // Main head shape\n        scale([1.3, 0.8, 0.7])\n            sphere(d=head_width);\n        \n        // Snout extension\n        translate([head_length/2, 0, -head_height/3])\n            scale([1.5, 0.7, 0.5])\n                sphere(d=head_width * 0.8);\n    }\n    \n    // Horn\n    translate([body_length/2 + 20, 0, body_height/3 + 5])\n    rotate([0, -20, 0])\n    cylinder(h1=horn_height, r1=horn_base, r2=0.5, h=horn_height);\n    \n    // Second smaller horn\n    translate([body_length/2 + 18, 0, body_height/3 + 8])\n    rotate([0, -20, 0])\n    cylinder(h1=horn_height*0.7, r1=horn_base*0.6, r2=0.3, h=horn_height*0.7);\n    \n    // Legs using loop for all four\n    module leg(side, front) {\n        x_pos = front ? body_length/2 - 10 : -body_length/2 + 10;\n        y_pos = side * body_width/2 - 5;\n        translate([x_pos, y_pos, -leg_height/2 - 5])\n            scale([1, 1, 0.8])\n                cylinder(h=leg_height, r1=leg_width/2, r2=leg_width/2);\n    }\n    \n    // Front legs\n    leg(1, true);\n    leg(-1, true);\n    \n    // Rear legs\n    leg(1, false);\n    leg(-1, false);\n    \n    // Ears\n    module ear(side) {\n        translate([body_length/2 - 5, side * body_width/2, body_height/2 + 5])\n        rotate([0, 0, side * 30])\n        scale([0.3, 1, 0.5])\n            sphere(d=8);\n    }\n    \n    ear(1);\n    ear(-1);\n    \n    // Tail\n    translate([-body_length/2, 0, -5])\n    rotate([0, 45, 0])\n    cylinder(h=15, r1=3, r2=1);\n    \n    // Eyes\n    module eye(side) {\n        translate([body_length/2 + 15, side * head_width/3, body_height/3 + 3])\n        sphere(d=3);\n    }\n    \n    eye(1);\n    eye(-1);\n    \n    // Nostrils\n    module nostril(side) {\n        translate([body_length/2 + 22, side * head_width/4, body_height/3 - 5])\n        rotate([0, -20, 0])\n        cylinder(h=3, r=2);\n    }\n    \n    nostril(1);\n    nostril(-1);\n}\n\n// Main assembly\ntranslate([0, 0, 15])\nrotate([0, 0, 0])\nrhino();",
    "renders": true
  },
  {
    "animal": "rhino",
    "openscad_code": "// Rhino model - realistic style, medium complexity\n// Overall size ~80mm long\n\nmodule rhino() {\n    // Main body\n    union() {\n        // Torso\n        translate([0, 0, 10]) \n            scale([1.2, 0.8, 0.6])\n            sphere(25, $fn=50);\n        \n        // Belly bulge\n        translate([0, 0, 5])\n            scale([1.1, 0.7, 0.5])\n            sphere(23, $fn=40);\n        \n        // Chest\n        translate([-25, 0, 12])\n            scale([0.8, 0.7, 0.6])\n            sphere(20, $fn=40);\n        \n        // Hip\n        translate([20, 0, 10])\n            scale([0.7, 0.8, 0.5])\n            sphere(22, $fn=40);\n    }\n    \n    // Head\n    translate([-35, 0, 20])\n    rotate([0, -10, 0])\n    union() {\n        // Main head shape\n        scale([1.5, 0.8, 0.7])\n            sphere(18, $fn=40);\n        \n        // Snout\n        translate([-20, 0, -5])\n            scale([1.2, 0.6, 0.4])\n            sphere(15, $fn=30);\n    }\n    \n    // Horns\n    translate([-48, 0, 25])\n    rotate([0, -30, 0])\n    cylinder(h=25, r1=4, r2=1, $fn=12);\n    \n    translate([-45, 5, 22])\n    rotate([0, -35, 0])\n    cylinder(h=20, r1=3, r2=0.5, $fn=12);\n    \n    // Ears\n    translate([-30, 12, 30])\n    rotate([0, 20, 20])\n    scale([0.3, 1, 1.5])\n    sphere(6, $fn=20);\n    \n    translate([-30, -12, 30])\n    rotate([0, 20, -20])\n    scale([0.3, 1, 1.5])\n    sphere(6, $fn=20);\n    \n    // Legs module\n    module leg(x, z, angle) {\n        translate([x, 0, z])\n        rotate([0, angle, 0])\n        union() {\n            // Upper leg\n            cylinder(h=25, r=6, $fn=20);\n            \n            // Lower leg\n            translate([0, 0, -25])\n            rotate([0, 15, 0])\n            cylinder(h=22, r=5, $fn=20);\n            \n            // Foot\n            translate([0, 0, -47])\n            rotate([0, 15, 0])\n            scale([1.5, 1, 0.5])\n            sphere(6, $fn=20);\n        }\n    }\n    \n    // Front legs\n    leg(-20, 12, 15);\n    leg(-20, 12, -15);\n    \n    // Rear legs\n    leg(15, 12, -15);\n    leg(15, 12, 15);\n    \n    // Tail\n    translate([30, 0, 20])\n    rotate([0, 0, 20])\n    union() {\n        // Tail base\n        cylinder(h=8, r=4, $fn=20);\n        \n        // Tail tuft\n        translate([0, 0, -10])\n        sphere(4, $fn=20);\n    }\n}\n\n// Create the rhino\nrhino();",
    "renders": true
  },
  {
    "animal": "ringtail",
    "openscad_code": "// OpenSCAD Ringtail (Bassariscus astutus) – medium complexity, printable\n// Approx. 80 mm nose–tail tip\n\n// Body core\nmodule body() {\n    // Torso – stretched sphere\n    translate([-15,0,0])\n        scale([2.2,1,1])\n        sphere(12, $fn=40);\n\n    // Rump\n    translate([12,-2,0])\n        scale([1.5,1.2,1.1])\n        sphere(11, $fn=30);\n\n    // Belly bulge\n    translate([0,0,-9])\n        scale([1.3,.9,.6])\n        sphere(9, $fn=25);\n}\n\n// Head\nmodule head() {\n    // Skull\n    translate([-30,0,4])\n        scale([1.1,.9,.9])\n        sphere(9, $fn=30);\n\n    // Snout taper\n    difference() {\n        translate([-40,0,2])\n            scale([1,.7,.7])\n            sphere(8, $fn=30);\n        // Trim back\n        translate([-35,0,0])\n            cube([20,20,20], center=true);\n    }\n\n    // Ears\n    for(side=[-1,1])\n        translate([-26,side*9,11])\n            rotate([0,20*side,0])\n            scale([.3,1,.7])\n            cylinder(h=6, r1=3, r2=1, $fn=12);\n\n    // Eyes\n    for(side=[-1,1])\n        translate([-35,side*5,5])\n            sphere(2.2, $fn=12);\n}\n\n// Limbs\nmodule legs() {\n    // Thighs\n    for(side=[-1,1])\n        translate([10,side*7,-7])\n            rotate([30,0,0])\n            cylinder(h=12, r1=5, r2=4, $fn=16);\n    \n    // Shins\n    for(side=[-1,1])\n        translate([16,side*8,-17])\n            rotate([0,10*side,0])\n            cylinder(h=10, r1=4, r2=3, $fn=16);\n    \n    // Front upper arms\n    for(side=[-1,1])\n        translate([-15,side*9,-2])\n            rotate([30,0,20*side])\n            cylinder(h=10, r1=3.5, r2=3, $fn=16);\n    \n    // Forearms\n    for(side=[-1,1])\n        translate([-20,side*10,-10])\n            rotate([0,0,30*side])\n            cylinder(h=9, r1=3, r2=2.5, $fn=16);\n}\n\n// Paws – simple pads\nmodule paws() {\n    for(y=[-1,1]) {\n        translate([18,y*8,-27])\n            sphere(3.5, $fn=20);\n        translate([-24,y*10,-19])\n            sphere(3, $fn=20);\n    }\n}\n\n// Tail rings\nmodule tail() {\n    // Tail root\n    hull() {\n        translate([22,-1,0])\n            sphere(6, $fn=20);\n        translate([28,-3,0])\n            sphere(5, $fn=20);\n    }\n    \n    // Segmented rings\n    for(i=[0:5])\n        translate([30+7*i,-5-i*1.5,0])\n            rotate([0,0,-i*5])\n            scale([1,1,1-i/12])\n            difference() {\n                cylinder(h=6, r1=5.5, r2=5, $fn=32);\n                translate([0,0,-.5])\n                    cylinder(h=7, r1=4.5, r2=4, $fn=32);\n            }\n    \n    // Tail tip\n    translate([68,-11,0])\n        scale([.8,.8,.8])\n        sphere(5, $fn=25);\n}\n\n// Whisker-like snout detail\nmodule whiskers() {\n    for(side=[-1,1])\n        for(a=[-20,0,20])\n            rotate([0,0,side*a])\n            translate([-42,side*5,2])\n                cylinder(h=8, r=.4, $fn=8);\n}\n\n// Combine everything\nunion() {\n    body();\n    head();\n    legs();\n    paws();\n    tail();\n    whiskers();\n}",
    "renders": true
  },
  {
    "animal": "robin",
    "openscad_code": "// Robin - Medium Complexity Realistic Style\n// 3D printable model, roughly 70mm tall\n\n$fn = 32;  // Smooth curves\n\n// Main body\nmodule body() {\n    // Torso\n    difference() {\n        scale([1.2, 0.8, 1.1]) sphere(d=30);\n        // Belly cutout\n        translate([0, -12, -5]) scale([0.6, 0.3, 0.4]) sphere(d=25);\n    }\n    \n    // Back\n    translate([0, 0, 8]) scale([1.3, 1, 0.6]) sphere(d=20);\n}\n\n// Head with beak\nmodule head() {\n    union() {\n        // Head sphere\n        translate([0, 0, 35]) scale([0.8, 0.7, 0.8]) sphere(d=20);\n        \n        // Beak\n        translate([0, 10, 33]) rotate([20, 0, 0]) \n            scale([0.3, 0.15, 1]) cylinder(h=8, d1=5, d2=0);\n    }\n}\n\n// Eye\nmodule eye() {\n    translate([-3.5, 6, 37]) sphere(d=2.5);\n    translate([3.5, 6, 37]) sphere(d=2.5);\n}\n\n// Wings\nmodule wing() {\n    difference() {\n        // Main wing\n        translate([-18, 0, 15]) rotate([0, 0, -30]) \n            scale([1, 0.3, 0.1]) cylinder(h=25, d=18);\n            \n        // Wing shape cutout\n        translate([-18, -2, 15]) rotate([0, 0, -30]) \n            scale([0.8, 0.2, 0.15]) cylinder(h=20, d=14);\n    }\n}\n\n// Tail\nmodule tail() {\n    difference() {\n        // Main tail\n        translate([0, -15, 8]) rotate([45, 0, 0]) \n            scale([0.8, 0.15, 1]) cube([20, 15, 3], center=true);\n            \n        // Tail feather shape\n        translate([0, -15, 6]) rotate([45, 0, 0]) \n            scale([0.6, 0.1, 0.8]) cube([15, 12, 2], center=true);\n    }\n}\n\n// Legs and feet\nmodule leg() {\n    // Upper leg\n    translate([5, 8, 0]) rotate([0, -30, 0]) \n        cylinder(h=12, d=3);\n    \n    // Lower leg\n    translate([12, 8, -8]) rotate([0, 30, 0]) \n        cylinder(h=10, d=2.5);\n    \n    // Foot\n    translate([16, 8, -15]) rotate([90, 0, 0]) {\n        // Main foot\n        cylinder(h=6, d=1.5);\n        \n        // Toes\n        for(i = [-1:1]) {\n            translate([i*2, 0, 0]) rotate([0, i*20, 0]) \n                cylinder(h=4, d=1);\n        }\n    }\n}\n\n// Chest patch (robin's red breast)\nmodule chest_patch() {\n    color(\"red\") \n    translate([0, -8, 20]) rotate([30, 0, 0]) \n        scale([1, 0.4, 0.3]) sphere(d=15);\n}\n\n// Assemble the robin\nunion() {\n    body();\n    head();\n    eye();\n    \n    // Wings\n    wing();\n    mirror([1, 0, 0]) wing();\n    \n    tail();\n    \n    // Legs\n    leg();\n    mirror([1, 0, 0]) leg();\n    \n    chest_patch();\n}\n\n// Add a small base for stability\ntranslate([0, 0, -18]) \n    cylinder(h=2, d=25);",
    "renders": true
  },
  {
    "animal": "rockfish",
    "openscad_code": "// Rockfish 3D Model - Realistic Medium Complexity\n// Designed for 3D printing with proper wall thickness and minimal overhangs\n\n$fn = 32;  // Higher resolution for smoother curves\n\n// Main parameters\nbody_length = 60;\nbody_height = 35;\nbody_width = 25;\nfin_thickness = 1.5;\nscale_factor = 0.8;\n\n// Main body module\nmodule rockfish_body() {\n    // Main body - ellipsoid shape\n    scale([1, 0.6, 0.4])\n    sphere(d=body_length);\n    \n    // Head extension\n    translate([body_length/2 - 5, 0, 0])\n    scale([1.2, 0.9, 0.8])\n    sphere(d=body_length/2);\n    \n    // Tail narrowing\n    translate([-body_length/2 + 5, 0, 0])\n    scale([0.6, 0.7, 0.5])\n    sphere(d=body_length/2.5);\n}\n\n// Dorsal fin with spines\nmodule dorsal_fin() {\n    // Main fin base\n    translate([0, 0, body_height/2 - 3])\n    rotate([90, 0, 0])\n    linear_extrude(height=fin_thickness)\n    polygon(points=[\n        [-body_length/3, 0],\n        [-body_length/6, body_height/2],\n        [0, body_height/3*1.2],\n        [body_length/6, body_height/2],\n        [body_length/3, 0]\n    ]);\n    \n    // Fin spines\n    for(i=[-body_length/3:body_length/6:body_length/3]) {\n        translate([i, 0, body_height/2 - 2 + abs(i)/3])\n        rotate([90, 0, 0])\n        cylinder(h=body_height/3, r1=0.5, r2=0.2);\n    }\n}\n\n// Pectoral fins\nmodule pectoral_fins() {\n    // Left fin\n    translate([body_length/4, body_width/2, 0])\n    rotate([0, 90, -30])\n    scale([1.5, 1, 0.5])\n    cylinder(h=body_length/4, r1=body_width/3, r2=body_width/5);\n    \n    // Right fin\n    translate([body_length/4, -body_width/2, 0])\n    rotate([0, 90, 30])\n    scale([1.5, 1, 0.5])\n    cylinder(h=body_length/4, r1=body_width/3, r2=body_width/5);\n}\n\n// Tail fin\nmodule tail_fin() {\n    // Upper lobe\n    translate([-body_length/2 - 5, 0, body_height/4])\n    rotate([0, 0, -20])\n    scale([1, 2, 0.5])\n    cylinder(h=body_height/2, r1=body_width/3, r2=0.5);\n    \n    // Lower lobe\n    translate([-body_length/2 - 5, 0, -body_height/4])\n    rotate([0, 0, 20])\n    scale([1, 2, 0.5])\n    cylinder(h=body_height/2, r1=body_width/3, r2=0.5);\n}\n\n// Mouth detail\nmodule mouth() {\n    translate([body_length/2, 0, -body_height/8])\n    rotate([0, 90, 0])\n    cylinder(h=body_length/8, r1=body_height/10, r2=body_height/15);\n}\n\n// Eyes\nmodule eyes() {\n    // Left eye\n    translate([body_length/2 - 3, body_width/3, body_height/8])\n    sphere(d=body_height/8);\n    \n    // Right eye\n    translate([body_length/2 - 3, -body_width/3, body_height/8])\n    sphere(d=body_height/8);\n    \n    // Pupils\n    color(\"black\")\n    translate([body_length/2 - 2.5, body_width/3, body_height/8])\n    sphere(d=body_height/16);\n    \n    color(\"black\")\n    translate([body_length/2 - 2.5, -body_width/3, body_height/8])\n    sphere(d=body_height/16);\n}\n\n// Body pattern spots\nmodule body_pattern() {\n    for(i=[-body_length/2:body_length/8:body_length/2]) {\n        for(j=[-body_width/3:body_width/6:body_width/3]) {\n            if((i+j)%10 < 5) {\n                translate([i, j, body_height/4])\n                sphere(d=body_length/20);\n            }\n        }\n    }\n}\n\n// Assemble the complete rockfish\nscale([scale_factor, scale_factor, scale_factor])\nunion() {\n    // Main body parts\n    rockfish_body();\n    dorsal_fin();\n    pectoral_fins();\n    tail_fin();\n    \n    // Details\n    mouth();\n    eyes();\n    body_pattern();\n}",
    "renders": true
  },
  {
    "animal": "rodent",
    "openscad_code": "// Realistic Rodent - OpenSCAD\n// Medium complexity, 3D printable\n\n$fn = 32;\n\n// Main module\nmodule rodent() {\n    body();\n    head();\n    tail();\n    limbs();\n    ears();\n    eyes();\n    nose();\n    whiskers();\n}\n\n// Body - oval shape\nmodule body() {\n    union() {\n        // Main torso\n        translate([0, 0, 10])\n            scale([1.2, 0.8, 0.9])\n            sphere(r=15);\n        \n        // Belly bulge\n        translate([0, 0, 5])\n            scale([1.1, 0.7, 0.6])\n            sphere(r=12);\n    }\n}\n\n// Head with snout\nmodule head() {\n    translate([20, 0, 22])\n        rotate([0, -10, 0])\n        union() {\n            // Main head\n            sphere(r=10);\n            \n            // Snout\n            translate([8, 0, -2])\n                scale([1.5, 0.8, 0.8])\n                sphere(r=6);\n        }\n}\n\n// Tail - curved cylinder\nmodule tail() {\n    translate([-18, 0, 12])\n        rotate([0, 0, 30])\n        rotate([0, 90, 0])\n        cylinder(h=40, r1=4, r2=1);\n}\n\n// Limbs - four legs\nmodule limbs() {\n    // Front legs\n    for(side = [-1, 1]) {\n        // Upper arm\n        translate([10, side*8, 12])\n            rotate([0, side*20, 20])\n            cylinder(h=8, r=3);\n        \n        // Lower arm\n        translate([15, side*12, 6])\n            rotate([0, 0, 90])\n            cylinder(h=10, r=2.5);\n        \n        // Paw\n        translate([15, side*12, 2])\n            sphere(r=3);\n    }\n    \n    // Hind legs\n    for(side = [-1, 1]) {\n        // Upper leg\n        translate([-10, side*8, 8])\n            rotate([0, -20, 0])\n            cylinder(h=12, r=4);\n        \n        // Lower leg\n        translate([-10, side*12, 2])\n            rotate([0, 0, 90])\n            cylinder(h=10, r=3);\n        \n        // Foot\n        translate([-10, side*15, 0])\n            scale([1.5, 1, 0.5])\n            sphere(r=4);\n    }\n}\n\n// Ears - two rounded ears\nmodule ears() {\n    for(side = [-1, 1]) {\n        translate([18, side*8, 30])\n            rotate([0, side*10, 0])\n            scale([1, 1, 0.3])\n            sphere(r=6);\n    }\n}\n\n// Eyes - small spheres\nmodule eyes() {\n    for(side = [-1, 1]) {\n        translate([26, side*4, 24])\n            sphere(r=1.5);\n    }\n}\n\n// Nose - tiny sphere\nmodule nose() {\n    translate([30, 0, 22])\n        sphere(r=1);\n}\n\n// Whiskers - thin cylinders\nmodule whiskers() {\n    for(side = [-1, 1]) {\n        for(angle = [0:30:150]) {\n            translate([28, side*2, 21])\n                rotate([0, angle, 0])\n                rotate([90, 0, 0])\n                cylinder(h=8, r=0.3);\n        }\n    }\n}\n\n// Create the rodent\nrodent();",
    "renders": true
  },
  {
    "animal": "rook",
    "openscad_code": "// Realistic Rook Chess Piece - Medium Complexity\n// Designed for 3D printing with proper wall thickness and minimal overhangs\n\n$fn = 36;  // Smooth curves\n\n// Overall dimensions\nbase_diameter = 40;\nbody_height = 60;\ntotal_height = 90;\n\nmodule rook() {\n    // Base - wide circular platform\n    cylinder(h=8, d=base_diameter, center=false);\n    \n    // Tapered body\n    translate([0, 0, 8])\n    cylinder(h=body_height, d1=base_diameter, d2=base_diameter*0.7);\n    \n    // Corbelled parapet - alternating blocks\n    translate([0, 0, 8+body_height])\n    parapet();\n    \n    // Turret top\n    translate([0, 0, 8+body_height+12])\n    turret_top();\n    \n    // Battlements\n    translate([0, 0, 8+body_height+12+8])\n    battlements();\n}\n\nmodule parapet() {\n    difference() {\n        // Main parapet ring\n        cylinder(h=12, d=base_diameter*0.7);\n        \n        // Inner hollow\n        translate([0, 0, -1])\n        cylinder(h=14, d=base_diameter*0.5);\n        \n        // Crenellations - 4 sides\n        for (i=[0:45:315]) {\n            rotate([0, 0, i])\n            translate([base_diameter*0.35-2, 0, 6])\n            cube([4, 8, 6], center=true);\n        }\n    }\n}\n\nmodule turret_top() {\n    difference() {\n        // Conical top\n        cylinder(h=8, d1=base_diameter*0.7, d2=base_diameter*0.5);\n        \n        // Inner hollow\n        translate([0, 0, -1])\n        cylinder(h=10, d1=base_diameter*0.5, d2=base_diameter*0.3);\n    }\n}\n\nmodule battlements() {\n    // Top ring with battlements\n    difference() {\n        // Main ring\n        cylinder(h=6, d=base_diameter*0.5);\n        \n        // Inner hollow\n        translate([0, 0, -1])\n        cylinder(h=8, d=base_diameter*0.3);\n        \n        // Battlements - 8 merlons\n        for (i=[0:45:315]) {\n            rotate([0, 0, i+22.5])\n            translate([base_diameter*0.25-1.5, 0, 3])\n            cube([3, 4, 3], center=true);\n        }\n    }\n}\n\n// Generate the rook\nrook();",
    "renders": true
  },
  {
    "animal": "rooster",
    "openscad_code": "// Realistic Medium-Complexity Rooster – 3D-printable\n// Total height ≈ 70 mm, all parts printable without steep overhangs\n\n$fn=30;           // smooth curves\nwall = 1.6;       // 3D-print wall thickness\n\nmodule body() {\n    // chest\n    translate([0,-4,0])\n        scale([1,1.3,1.1])\n        sphere(r=12);\n    \n    // back & rump\n    translate([0,14,2])\n        scale([1.2,1.2,1])\n        sphere(r=12);\n    \n    // belly (lower part)\n    translate([0,-2,-11])\n        scale([1.2,1.3,0.8])\n        sphere(r=11);\n}\n\nmodule head() {\n    translate([0,-22,15]) {\n        // skull\n        scale([0.9,0.9,1.1])\n        sphere(r=9);\n        \n        // beak\n        translate([0,-11,0])\n            rotate([30,0,0])\n            scale([0.25,1.2,0.25])\n            cylinder(h=12,r1=4,r2=0);\n        \n        // comb\n        for(i=[-6:3:6])\n            translate([i,0,7])\n                scale([1,1,3])\n                sphere(r=2.5);\n        \n        // wattle\n        translate([0,-10,-7])\n            rotate([0,0,0])\n            scale([0.8,1.5,0.5])\n            sphere(r=4);\n        \n        // eye\n        translate([4,-7,3])\n            sphere(r=2);\n    }\n}\n\nmodule neck() {\n    translate([0,-7,8])\n        rotate([90,0,0])\n        cylinder(h=18,r1=5,r2=9);\n}\n\nmodule wing(side=1) {   // side = 1 left, -1 right\n    translate([side*10,5,4])\n        rotate([0,side*15,0])\n        difference() {\n            scale([1,2,0.5])\n            sphere(r=10);\n            translate([0,0,-1])\n                cube([25,25,wall*2],center=true);\n        }\n}\n\nmodule tail() {\n    // main tail fan\n    for(a=[0:15:60])\n        rotate([a,0,0])\n        translate([0,18+a*0.4,5+a*0.8])\n            scale([0.3,1,2.5])\n            sphere(r=5);\n    \n    // upper sickle feathers\n    for(a=[10:10:40])\n        rotate([a,0,0])\n        translate([0,25+a,10+a])\n            scale([0.2,0.8,3])\n            sphere(r=4);\n}\n\nmodule leg(side=1) {\n    translate([side*4,-2,-22]) {\n        // thigh\n        rotate([90,0,0])\n            cylinder(h=12,r1=3.5,r2=3);\n        \n        // drumstick\n        translate([0,0,-14])\n            rotate([100,0,0])\n            cylinder(h=12,r1=3,r2=2);\n        \n        // foot\n        translate([0,0,-27])\n            rotate([0,0,side*-20])\n            scale([2,0.5,0.6])\n            sphere(r=4);\n        \n        // spur\n        translate([side*2,0,-18])\n            rotate([0,side*30,0])\n            cylinder(h=4,r1=1.5,r2=0);\n    }\n}\n\n// assembly\nunion() {\n    body();\n    neck();\n    head();\n    wing(1);\n    wing(-1);\n    tail();\n    leg(1);\n    leg(-1);\n}",
    "renders": true
  },
  {
    "animal": "rottweiler",
    "openscad_code": "// Rottweiler Model - Medium Complexity Realistic Style\n// Approx 80mm long, 50mm tall, 30mm wide\n\n$fn = 30;\nbody_color = [0.1, 0.1, 0.1];\n\nmodule torso() {\n    // Main body\n    union() {\n        // Chest and ribcage\n        translate([-15, 0, 15]) \n            scale([1.2, 1, 1]) \n            sphere(r=15);\n        \n        // Abdomen\n        translate([5, 0, 10]) \n            scale([1.5, 0.8, 0.6]) \n            sphere(r=12);\n            \n        // Lower chest detail\n        translate([-5, 0, 5]) \n            cube([25, 20, 10], center=true);\n    }\n}\n\nmodule head() {\n    // Head assembly\n    translate([-30, 0, 25]) rotate([0, 10, 0]) {\n        union() {\n            // Skull\n            translate([0, 0, 5]) \n                scale([1.3, 0.9, 1]) \n                sphere(r=10);\n            \n            // Snout\n            translate([-8, 0, -2]) \n                scale([1.5, 0.7, 0.6]) \n                sphere(r=8);\n            \n            // Nose\n            color([0, 0, 0])\n            translate([-15, 0, -2]) \n                scale([1, 0.8, 0.5]) \n                sphere(r=3);\n                \n            // Ears\n            for(side = [-1, 1]) {\n                translate([0, side*8, 8]) rotate([0, 20*side, 0])\n                    scale([0.3, 1.5, 2]) \n                    cube([5, 3, 8], center=true);\n            }\n        }\n    }\n}\n\nmodule legs() {\n    // Create all four legs\n    for(pos = [[-10, 8], [-10, -8], [15, 8], [15, -8]]) {\n        translate([pos[0], pos[1], 0]) {\n            // Upper leg\n            translate([0, 0, 10]) \n                rotate([0, 10, 0])\n                cylinder(h=15, r1=5, r2=3);\n            \n            // Lower leg\n            translate([0, 0, 0]) \n                cylinder(h=10, r=3);\n                \n            // Paw\n            translate([0, 0, -2]) \n                scale([1.2, 1.2, 0.8]) \n                sphere(r=4);\n        }\n    }\n}\n\nmodule tail() {\n    // Tail curved upward\n    translate([20, 0, 12]) rotate([0, 0, -30]) {\n        for(i = [0:5]) {\n            translate([i*2, 0, sin(i*20)*2]) \n                rotate([0, 0, i*5])\n                cylinder(h=2.5, r=3-i*0.3);\n        }\n    }\n}\n\nmodule markings() {\n    // Chest markings\n    color([0.8, 0.8, 0.8])\n    translate([-12, 0, 12]) \n        scale([1.5, 0.8, 0.3]) \n        sphere(r=8);\n    \n    // Leg markings\n    for(pos = [[-10, 8], [-10, -8], [15, 8], [15, -8]]) {\n        translate([pos[0], pos[1], -1]) \n            cylinder(h=2, r=3.5);\n    }\n}\n\n// Main assembly\ncolor(body_color) {\n    torso();\n    head();\n    legs();\n    tail();\n    markings();\n}",
    "renders": true
  },
  {
    "animal": "sable",
    "openscad_code": "$fa = 1;\n$fs = 0.5;\n\n// Overall scale\nscale_factor = 0.7;\n\n// Body\nmodule body() {\n    // Main torso\n    translate([0, 0, 8])\n        scale([1.2, 0.7, 0.8])\n        sphere(r = 15);\n    \n    // Belly\n    translate([0, 0, 2])\n        scale([1.1, 0.6, 0.4])\n        sphere(r = 14);\n}\n\n// Head\nmodule head() {\n    // Main head shape\n    translate([-20, 0, 15])\n        scale([0.9, 0.7, 0.7])\n        sphere(r = 10);\n    \n    // Snout\n    translate([-32, 0, 12])\n        scale([0.6, 0.4, 0.4])\n        sphere(r = 8);\n    \n    // Nose\n    color(\"black\")\n    translate([-38, 0, 11])\n        sphere(r = 2);\n}\n\n// Ears\nmodule ears() {\n    // Left ear\n    translate([-18, 8, 22])\n        rotate([0, -10, -30])\n        scale([0.3, 0.1, 0.6])\n        cylinder(h = 10, r = 5);\n    \n    // Right ear\n    translate([-18, -8, 22])\n        rotate([0, -10, 30])\n        scale([0.3, 0.1, 0.6])\n        cylinder(h = 10, r = 5);\n}\n\n// Legs\nmodule legs() {\n    // Front legs\n    for (y = [-7, 7]) {\n        translate([-10, y, 5])\n            rotate([0, 5, 0])\n            scale([0.3, 0.3, 1])\n            cylinder(h = 12, r = 4);\n    }\n    \n    // Back legs\n    for (y = [-7, 7]) {\n        translate([10, y, 5])\n            rotate([0, -5, 0])\n            scale([0.3, 0.3, 1.2])\n            cylinder(h = 14, r = 4.5);\n    }\n}\n\n// Tail\nmodule tail() {\n    // Tail base\n    translate([18, 0, 10])\n        rotate([0, 0, -20])\n        scale([0.4, 0.4, 2])\n        cylinder(h = 20, r = 4);\n    \n    // Tail tip\n    translate([32, -8, 18])\n        rotate([0, 0, -45])\n        scale([0.3, 0.3, 1])\n        sphere(r = 5);\n}\n\n// Eyes\nmodule eyes() {\n    color(\"black\")\n    for (y = [-4, 4]) {\n        translate([-28, y, 15])\n            sphere(r = 1.5);\n    }\n}\n\n// Whiskers\nmodule whiskers() {\n    for (i = [0:2]) {\n        angle = i * 30 - 30;\n        // Left side\n        translate([-35, 5, 11])\n            rotate([0, 0, angle])\n            cylinder(h = 8, r = 0.5);\n        \n        // Right side\n        translate([-35, -5, 11])\n            rotate([0, 0, -angle])\n            cylinder(h = 8, r = 0.5);\n    }\n}\n\n// Combine all parts\nscale([scale_factor, scale_factor, scale_factor])\nunion() {\n    body();\n    head();\n    ears();\n    legs();\n    tail();\n    eyes();\n    whiskers();\n}",
    "renders": true
  },
  {
    "animal": "sailfish",
    "openscad_code": "// Sailfish - Realistic style, medium complexity\n// Overall length ~80mm, designed for 3D printing\n\n$fn = 32;  // Smooth curves\n\nmodule sailfish() {\n    union() {\n        // Main body\n        translate([0, 0, 0]) rotate([0, 90, 0]) \n            scale([1, 0.4, 0.4])\n                hull() {\n                    sphere(d = 20);\n                    translate([15, 0, 0]) sphere(d = 10);\n                    translate([30, 0, 0]) sphere(d = 5);\n                }\n        \n        // Bill (sword)\n        translate([30, 0, 0]) rotate([0, 90, 0])\n            cylinder(h = 40, d1 = 5, d2 = 1);\n        \n        // Dorsal fin (sail)\n        translate([10, 0, 8]) rotate([0, 0, 0])\n            difference() {\n                scale([1, 0.1, 1])\n                    sphere(d = 25);\n                translate([0, -2, 0])\n                    cube([25, 5, 25], center = true);\n            }\n        \n        // Pectoral fins (left and right)\n        for (side = [-1, 1])\n            translate([5, side * 8, -2]) rotate([0, 30 * side, -20 * side])\n                scale([1, 0.2, 0.5])\n                    sphere(d = 12);\n        \n        // Pelvic fins\n        for (side = [-1, 1])\n            translate([20, side * 5, -3]) rotate([0, 0, 45 * side])\n                scale([0.5, 0.1, 0.7])\n                    sphere(d = 8);\n        \n        // Tail\n        translate([-25, 0, 0]) rotate([0, 90, 0])\n            union() {\n                // Upper lobe\n                translate([0, 0, 5]) rotate([0, 0, 30])\n                    scale([1, 0.2, 0.5])\n                        cylinder(h = 15, d1 = 8, d2 = 2);\n                \n                // Lower lobe\n                translate([0, 0, -5]) rotate([0, 0, -30])\n                    scale([1, 0.2, 0.5])\n                        cylinder(h = 15, d1 = 8, d2 = 2);\n            }\n        \n        // Eye detail\n        for (side = [-1, 1])\n            translate([8, side * 4, 3]) rotate([0, 90, 0])\n                difference() {\n                    cylinder(h = 2, d = 4);\n                    translate([1, 0, 0]) cylinder(h = 3, d = 2);\n                }\n        \n        // Body stripes\n        for (i = [0:5]) {\n            translate([i * 6 - 10, 0, 0]) rotate([0, 90, 0])\n                scale([1, 0.9, 0.9])\n                    difference() {\n                        cylinder(h = 3, d = 18);\n                        translate([0, 0, -1]) cylinder(h = 5, d = 16);\n                    }\n        }\n    }\n}\n\n// Generate the sailfish\nsailfish();",
    "renders": true
  },
  {
    "animal": "salamander",
    "openscad_code": "// Realistic Salamander - Medium Complexity\n// Total length ~75mm, height ~15mm\n\n$fn = 32;\nbody_width = 12;\nbody_height = 8;\nbody_length = 40;\n\nmodule head() {\n    // Main head shape\n    translate([body_length/2 + 8, 0, body_height/2]) {\n        scale([1.2, 0.9, 0.8]) \n            sphere(d = body_width);\n    }\n    \n    // Snout extension\n    translate([body_length/2 + 14, 0, body_height/2 - 1]) {\n        scale([1.5, 0.7, 0.5]) \n            sphere(d = body_width * 0.8);\n    }\n    \n    // Eyes\n    for (side = [-1, 1]) {\n        translate([body_length/2 + 10, side * body_width/3, body_height/2 + 2]) {\n            sphere(d = 3);\n            translate([0.5, 0, 0.5]) \n                sphere(d = 1.5); // pupil\n        }\n    }\n}\n\nmodule body() {\n    // Main body segments\n    for (i = [0:4]) {\n        translate([body_length/2 - i * 8, 0, body_height/2 - i * 0.5]) {\n            scale([0.9 - i * 0.1, 1 - i * 0.05, 1 - i * 0.1])\n                sphere(d = body_width);\n        }\n    }\n}\n\nmodule tail() {\n    // Tapered tail segments\n    for (i = [1:6]) {\n        translate([body_length/2 - i * 8 - 20, 0, body_height/2 - 2]) {\n            rotate([0, -i * 3, 0]) \n                scale([1 - i * 0.15, 1 - i * 0.15, 1 - i * 0.2])\n                    sphere(d = body_width * 0.8);\n        }\n    }\n}\n\nmodule legs() {\n    // Front legs\n    for (side = [-1, 1]) {\n        translate([body_length/2 - 5, side * body_width/2, 0]) {\n            rotate([90, 0, 30 * side]) {\n                cylinder(h = 8, d1 = 4, d2 = 2.5);\n                translate([0, 0, 8]) \n                    sphere(d = 3); // foot\n            }\n        }\n    }\n    \n    // Back legs\n    for (side = [-1, 1]) {\n        translate([-body_length/2 + 10, side * body_width/2, 0]) {\n            rotate([90, 0, -20 * side]) {\n                cylinder(h = 10, d1 = 5, d2 = 3);\n                translate([0, 0, 10]) \n                    sphere(d = 4); // foot\n            }\n        }\n    }\n}\n\nmodule spots() {\n    // Body spots pattern\n    for (i = [0:8]) {\n        for (side = [-1, 1]) {\n            translate([body_length/2 - i * 4, side * (body_width/3 + sin(i*45)*2), body_height/2]) {\n                sphere(d = 2.5);\n            }\n        }\n    }\n    \n    // Tail spots\n    for (i = [0:5]) {\n        translate([body_length/2 - i * 6 - 20, sin(i*60)*2, body_height/2 - 1]) {\n            sphere(d = 2);\n        }\n    }\n}\n\nmodule gills() {\n    // External gills behind head\n    for (side = [-1, 1]) {\n        translate([body_length/2 + 2, side * body_width/2, body_height/2 + 1]) {\n            rotate([0, -15 * side, 0]) {\n                cylinder(h = 6, d = 1);\n                translate([0, 0, 6]) \n                    sphere(d = 1.5);\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    head();\n    body();\n    tail();\n    legs();\n    spots();\n    gills();\n}",
    "renders": true
  },
  {
    "animal": "salmon",
    "openscad_code": "// 3D Printable Realistic Salmon - Medium Complexity\n// Dimensions: ~80mm long, ~25mm tall, ~25mm wide\n\n$fn = 32; // Smooth curves for printing\n\nmodule salmon_body() {\n    // Main body - tapered oval shape\n    hull() {\n        translate([0, 0, 10]) scale([1, 0.4, 0.35]) sphere(d = 20);\n        translate([-25, 0, 10]) scale([1.5, 0.6, 0.5]) sphere(d = 25);\n        translate([-50, 0, 8]) scale([1.2, 0.5, 0.4]) sphere(d = 15);\n    }\n    \n    // Tail section\n    hull() {\n        translate([-50, 0, 8]) scale([1, 0.4, 0.3]) sphere(d = 12);\n        translate([-65, 0, 8]) scale([0.6, 0.2, 0.2]) sphere(d = 8);\n    }\n}\n\nmodule tail() {\n    // Upper tail lobe\n    translate([-65, 0, 12]) rotate([0, 0, 15]) \n        scale([1, 0.1, 0.6]) cylinder(h = 25, d1 = 8, d2 = 18);\n    \n    // Lower tail lobe\n    translate([-65, 0, 4]) rotate([0, 0, -15]) \n        scale([1, 0.1, 0.6]) cylinder(h = 25, d1 = 8, d2 = 18);\n    \n    // Tail center\n    translate([-70, 0, 8]) scale([0.3, 0.05, 1]) cube([15, 15, 3]);\n}\n\nmodule head() {\n    // Head shape\n    translate([18, 0, 12]) scale([1.2, 0.7, 0.7]) sphere(d = 18);\n    \n    // Mouth\n    difference() {\n        translate([28, 0, 10]) rotate([0, -20, 0]) \n            scale([1, 0.4, 0.4]) cylinder(h = 12, d = 8);\n        translate([32, 0, 10]) rotate([0, -20, 0]) \n            scale([1, 0.3, 0.3]) cylinder(h = 12, d = 6);\n    }\n    \n    // Eye sockets\n    for(side = [-1, 1]) {\n        translate([20, side * 6, 15]) sphere(d = 4);\n    }\n}\n\nmodule fins() {\n    // Dorsal fin\n    for(i = [-20:10:-40]) {\n        translate([i, 0, 20]) rotate([0, 0, 5]) \n            scale([0.3, 0.05, 1]) cube([8, 10, 6]);\n    }\n    \n    // Pectoral fins\n    for(side = [-1, 1]) {\n        translate([5, side * 10, 8]) rotate([0, side * 30, 0]) \n            scale([1, 0.1, 0.8]) cylinder(h = 15, d1 = 12, d2 = 6);\n    }\n    \n    // Anal fin\n    for(i = [-35:10:-50]) {\n        translate([i, 0, 2]) rotate([0, 0, -5]) \n            scale([0.3, 0.05, 1]) cube([8, 10, 5]);\n    }\n}\n\nmodule scales() {\n    // Simple scale pattern using small spheres\n    for(x = [-45:5:15]) {\n        for(y = [-8:4:8]) {\n            if(y != 0) {\n                translate([x, y, 10 + abs(y/2)]) sphere(d = 1.5);\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    salmon_body();\n    tail();\n    head();\n    fins();\n    scales();\n}\n\n// Add small base for stability\ntranslate([0, 0, -1]) cube([80, 20, 2], center = true);",
    "renders": true
  },
  {
    "animal": "sandpiper",
    "openscad_code": "// Sandpiper 3D model - Realistic style, medium complexity\n// Dimensions: ~80mm long, 30mm tall, 20mm wide\n// 3D printable with no overhangs >45°\n\n$fn = 24;\n\nmodule beak() {\n    // Long thin beak with slight curve\n    translate([0, 0, 5])\n    rotate([0, -20, 0])\n    scale([1, 0.3, 0.3])\n    cylinder(h = 20, r1 = 2, r2 = 0.5);\n}\n\nmodule head() {\n    // Small oval head\n    translate([0, 0, 8])\n    scale([1.2, 1, 1])\n    sphere(r = 5);\n    \n    // Eye\n    translate([-2, 4, 9])\n    sphere(r = 1);\n}\n\nmodule neck() {\n    // Flexible neck connection\n    translate([0, 0, 5])\n    rotate([0, -10, 0])\n    scale([0.8, 0.8, 1])\n    cylinder(h = 8, r = 3);\n}\n\nmodule body() {\n    // Streamlined teardrop body\n    union() {\n        // Main body\n        translate([0, 0, 0])\n        scale([1.5, 1, 0.7])\n        sphere(r = 15);\n        \n        // Tail extending back\n        translate([20, 0, -2])\n        scale([2, 0.8, 0.3])\n        rotate([0, 0, -15])\n        cylinder(h = 15, r1 = 5, r2 = 0);\n    }\n}\n\nmodule wing() {\n    // One wing with feather layers\n    difference() {\n        // Main wing shape\n        translate([0, 0, 0])\n        scale([1.2, 0.3, 1])\n        rotate([0, 20, 0])\n        sphere(r = 12);\n        \n        // Cut underside angle\n        translate([-5, -5, -8])\n        cube([30, 10, 10]);\n    }\n}\n\nmodule legs() {\n    // Two thin legs with webbed feet\n    for(side = [-1, 1]) {\n        // Upper leg\n        translate([5, side * 6, -8])\n        rotate([0, side * 5, 0])\n        cylinder(h = 15, r = 1.5);\n        \n        // Lower leg\n        translate([5, side * 6, -23])\n        rotate([0, -15, 0])\n        cylinder(h = 12, r = 1);\n        \n        // Foot\n        translate([5, side * 6, -35])\n        rotate([0, -15, 0])\n        scale([1, 2, 0.3])\n        sphere(r = 3);\n        \n        // Toes\n        for(angle = [-30, 0, 30]) {\n            translate([5, side * 6, -35])\n            rotate([0, -15, angle])\n            scale([0.3, 1.5, 0.3])\n            cylinder(h = 6, r = 1);\n        }\n    }\n}\n\nmodule tail() {\n    // Small tail feathers\n    translate([25, 0, -2])\n    rotate([0, 0, -20])\n    scale([0.5, 1, 0.2])\n    cylinder(h = 10, r1 = 3, r2 = 0);\n}\n\n// Main assembly\nunion() {\n    // Body centered\n    body();\n    \n    // Head assembly\n    translate([15, 0, 8])\n    union() {\n        neck();\n        head();\n        beak();\n    }\n    \n    // Wings on sides\n    translate([0, 12, 2])\n    wing();\n    \n    translate([0, -12, 2])\n    mirror([0, 1, 0])\n    wing();\n    \n    // Legs below\n    legs();\n    \n    // Tail\n    tail();\n}",
    "renders": true
  },
  {
    "animal": "sapsucker",
    "openscad_code": "// Sapsucker Woodpecker - Realistic Medium Complexity\n// Overall size ~70mm tall\n\n// Parameters\nbody_length = 35;\nbody_height = 20;\nhead_size = 12;\nbeak_length = 8;\nbeak_width = 2;\nwing_span = 30;\ntail_length = 15;\nleg_length = 8;\nfoot_size = 4;\n\n// Colors (for visualization)\ncolor_body = \"red\";\ncolor_wing = \"black\";\ncolor_head = \"red\";\ncolor_beak = \"black\";\n\nmodule body() {\n    // Main body - elongated sphere\n    translate([0, 0, leg_length + body_height/2])\n    scale([1.8, 1, 1])\n    sphere(d=body_height, $fn=32);\n    \n    // Back pattern - black and white stripes\n    for(i = [-2:1:2]) {\n        translate([i*3, body_height/2-2, leg_length + body_height/2])\n        scale([2, 0.5, 0.1])\n        cube([4, 4, 1], center=true);\n    }\n}\n\nmodule head() {\n    // Head sphere\n    translate([body_length/2 + head_size/2, 0, leg_length + body_height/2 + head_size/2])\n    sphere(d=head_size, $fn=32);\n    \n    // Red crest patch\n    translate([body_length/2 + head_size/2, 0, leg_length + body_height/2 + head_size/2 + 2])\n    rotate([0, 90, 0])\n    cylinder(d1=6, d2=4, h=3, $fn=16);\n    \n    // Eye\n    translate([body_length/2 + head_size/2 + 2, head_size/3, leg_length + body_height/2 + head_size/2])\n    sphere(d=2.5, $fn=16);\n    \n    // White eye ring\n    difference() {\n        translate([body_length/2 + head_size/2 + 2, head_size/3, leg_length + body_height/2 + head_size/2])\n        sphere(d=3, $fn=16);\n        \n        translate([body_length/2 + head_size/2 + 2.5, head_size/3, leg_length + body_height/2 + head_size/2])\n        sphere(d=2.5, $fn=16);\n    }\n}\n\nmodule beak() {\n    // Main beak\n    translate([body_length/2 + head_size + beak_length/2, 0, leg_length + body_height/2 + head_size/2 - 2])\n    rotate([0, -10, 0])\n    scale([1, 0.7, 0.7])\n    cylinder(d1=beak_width, d2=beak_width*0.5, h=beak_length, $fn=16);\n    \n    // Lower mandible\n    translate([body_length/2 + head_size + beak_length/2 - 1, 0, leg_length + body_height/2 + head_size/2 - 3])\n    rotate([0, -10, 0])\n    scale([0.8, 0.5, 0.4])\n    cylinder(d1=beak_width, d2=beak_width*0.5, h=beak_length, $fn=16);\n}\n\nmodule wing() {\n    // Left wing\n    translate([0, -body_height/2 - 1, leg_length + body_height/2 + 5])\n    rotate([0, 0, -20])\n    scale([1.5, 0.3, 1])\n    difference() {\n        // Main wing shape\n        translate([-wing_span/4, 0, 0])\n        cube([wing_span/2, 15, 8]);\n        \n        // Wing tip cutout\n        translate([wing_span/4 - 2, 5, 0])\n        rotate([0, 0, 30])\n        cube([5, 10, 10]);\n        \n        // Feather details\n        for(i = [0:2:8]) {\n            translate([-wing_span/4 + i, 0, 2])\n            cube([1, 15, 6]);\n        }\n    }\n    \n    // Right wing (mirrored)\n    mirror([0, 1, 0])\n    translate([0, body_height/2 + 1, leg_length + body_height/2 + 5])\n    rotate([0, 0, 20])\n    scale([1.5, 0.3, 1])\n    difference() {\n        translate([-wing_span/4, 0, 0])\n        cube([wing_span/2, 15, 8]);\n        \n        translate([wing_span/4 - 2, 5, 0])\n        rotate([0, 0, 30])\n        cube([5, 10, 10]);\n        \n        for(i = [0:2:8]) {\n            translate([-wing_span/4 + i, 0, 2])\n            cube([1, 15, 6]);\n        }\n    }\n}\n\nmodule tail() {\n    // Tail feathers\n    translate([-body_length/2 - tail_length/2, 0, leg_length + body_height/2 - 5])\n    difference() {\n        // Main tail\n        scale([1, 0.3, 1])\n        cube([tail_length, 12, 8]);\n        \n        // Tail notch\n        translate([0, 0, 4])\n        rotate([0, 90, 0])\n        cylinder(d=4, h=10, $fn=16);\n    }\n    \n    // Individual tail feathers\n    for(i = [-1.5:1:1.5]) {\n        translate([-body_length/2 - tail_length - 1, i*2, leg_length + body_height/2 - 5])\n        rotate([0, 0, i*5])\n        scale([0.2, 1, 0.1])\n        cube([tail_length/2, 2, 8]);\n    }\n}\n\nmodule legs() {\n    // Left leg\n    translate([body_length/4, -body_height/4, leg_length/2])\n    cylinder(d=2, h=leg_length, $fn=16);\n    \n    // Left foot\n    translate([body_length/4 + foot_size/2, -body_height/4 - foot_size/2, 1])\n    rotate([90, 0, 0])\n    cylinder(d=foot_size, h=1, $fn=8);\n    \n    // Toes\n    for(i = [-1:1:1]) {\n        translate([body_length/4 + foot_size/2 + i*1.5, -body_height/4 - foot_size, 1])\n        rotate([90, 0, 0])\n        cylinder(d1=1, d2=0.5, h=3, $fn=8);\n    }\n    \n    // Right leg\n    translate([body_length/4, body_height/4, leg_length/2])\n    cylinder(d=2, h=leg_length, $fn=16);\n    \n    // Right foot\n    translate([body_length/4 + foot_size/2, body_height/4 + foot_size/2, 1])\n    rotate([90, 0, 0])\n    cylinder(d=foot_size, h=1, $fn=8);\n    \n    // Toes\n    for(i = [-1:1:1]) {\n        translate([body_length/4 + foot_size/2 + i*1.5, body_height/4 + foot_size, 1])\n        rotate([90, 0, 0])\n        cylinder(d1=1, d2=0.5, h=3, $fn=8);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    beak();\n    wing();\n    tail();\n    legs();\n}",
    "renders": true
  },
  {
    "animal": "sardine",
    "openscad_code": "// OpenSCAD Sardine – realistic, medium-complexity, 3D-printable\n// Overall length ≈ 80 mm\n// Wall thickness 1.2 mm\n\nmodule sardine() {\n    // Body core – two fused ellipsoids for realistic fish shape\n    translate([0,0,0])\n        scale([1,0.38,0.25])\n        sphere(d=30,$fn=32);\n\n    translate([20,0,0])\n        scale([1.3,0.32,0.22])\n        sphere(d=30,$fn=32);\n\n    // Tail fin – thin flat wedge\n    difference() {\n        translate([38,0,0])\n            rotate([0,0,-10])\n            scale([1,0.6,0.05])\n            cylinder(h=20,d1=0,d2=18,$fn=4);\n        translate([40,0,0])\n            cube([25,20,1],center=true);\n    }\n\n    // Dorsal fin – two segments\n    for(i=[-5,5])\n    translate([i,0,6])\n        rotate([90,0,0])\n        linear_extrude(height=1.2)\n        polygon(points=[[0,0],[4,6],[-4,6]]);\n\n    // Pectoral fins (left & right)\n    for(side=[-1,1])\n    translate([5,side*8, -2])\n        rotate([0,side*15,0])\n        scale([1,0.3,0.05])\n        cylinder(h=12,d1=8,d2=0,$fn=3);\n\n    // Lower jaw / mouth\n    difference() {\n        translate([-12,0,-2])\n            scale([1.2,0.5,0.3])\n            sphere(d=12,$fn=32);\n        translate([-12,0,-2.5])\n            cube([15,8,2],center=true);\n    }\n\n    // Eye sockets\n    for(side=[-1,1])\n    translate([-14,side*4,1])\n        rotate([0,90,0])\n        cylinder(h=3,d=4,$fn=16);\n\n    // Eyes\n    color(\"white\")\n    for(side=[-1,1])\n    translate([-15.2,side*4,1])\n        sphere(d=2.5,$fn=16);\n\n    color(\"black\")\n    for(side=[-1,1])\n    translate([-16.2,side*4,1])\n        sphere(d=1.2,$fn=16);\n\n    // Scales pattern – repeated raised disks on upper body\n    for(x=[-10:5:25])\n    for(y=[-6:3:6])\n    translate([x,y,6.5])\n        sphere(d=1.2,$fn=8);\n}\n\n// Main model – centered upright for easy printing\nrotate([0,-90,0])\n    sardine();",
    "renders": true
  },
  {
    "animal": "sawfish",
    "openscad_code": "// Sawfish in realistic medium complexity\n// 3D printable without overhangs\n\n// Overall sizing\n$fn = 32;\nlength = 80;\nwidth = 25;\nheight = 8;\n\nmodule sawfish() {\n    difference() {\n        union() {\n            // Main body\n            translate([0, 0, 0]) \n                scale([1, 0.5, 0.3]) \n                    sphere(d = width);\n\n            // Tail extension\n            translate([-length/2 - 5, 0, 0]) \n                rotate([0, 0, -15]) \n                    scale([1.5, 0.3, 0.25]) \n                        cylinder(h = length/2, d = width);\n\n            // Head to rostrum transition\n            hull() {\n                translate([length/2 - 5, 0, 0]) \n                    scale([1, 0.5, 0.3]) \n                        sphere(d = width*0.9);\n                translate([length/2 + 15, 0, 0]) \n                    scale([1, 0.3, 0.2]) \n                        sphere(d = width*0.4);\n            }\n\n            // Rostrum (saw)\n            translate([length/2 + 30, 0, 0]) \n                rotate([0, 0, 0]) \n                    scale([4, 0.05, 0.05]) \n                        cube([length/2, width, height], center = true);\n\n            // Dorsal fin\n            translate([-10, 0, height/2 + 2]) \n                rotate([30, 0, 0]) \n                    scale([0.5, 0.8, 1]) \n                        cylinder(h = height*1.5, d = width/3);\n\n            // Pectoral fins\n            for (y = [-1, 1]) {\n                translate([0, y*width/2, -height/2]) \n                    rotate([0, y*30, 0]) \n                        scale([1, 0.5, 0.1]) \n                            cylinder(h = width/1.5, d = width/2);\n            }\n\n            // Pelvic fins\n            for (y = [-1, 1]) {\n                translate([-length/3, y*width/2, -height/2]) \n                    rotate([0, y*45, 0]) \n                        scale([0.8, 0.4, 0.1]) \n                            cylinder(h = width/2, d = width/3);\n            }\n        }\n\n        // Eye sockets\n        for (x = [1, -1]) {\n            translate([length/2 - 5, x*width/4, height/4]) \n                sphere(d = width/6);\n        }\n\n        // Mouth\n        translate([length/2 - 8, 0, -height/4]) \n            cube([width/2, width/4, height/2], center = true);\n\n        // Gill slits\n        for (i = [0:4]) {\n            translate([length/2 - 12 - i*3, 0, -height/8]) \n                cube([2, width/2.5, height/4], center = true);\n        }\n    }\n\n    // Rostral teeth\n    for (i = [0:15]) {\n        tooth_x = length/2 + 35 + i*2.5;\n        tooth_y = (i % 2 == 0) ? width/8 : -width/8;\n        translate([tooth_x, tooth_y, 0]) \n            rotate([0, 90, 0]) \n                cylinder(h = height/4, d1 = 1.5, d2 = 0.5);\n    }\n\n    // Eyeballs\n    for (x = [1, -1]) {\n        translate([length/2 - 5, x*width/4, height/4]) \n            sphere(d = width/8);\n    }\n}\n\n// Generate the sawfish\nsawfish();",
    "renders": true
  },
  {
    "animal": "scallop",
    "openscad_code": "// Realistic scallop with moderate complexity\n// 3D printable, ~70mm wide, no major overhangs\n\n$fn = 30;\n\nmodule scallop_shell() {\n    // Main upper shell\n    difference() {\n        // Base shell shape\n        scale([1, 0.8, 0.4])\n            sphere(d = 70);\n        \n        // Flatten bottom\n        translate([0, 0, -15])\n            cube([100, 100, 30], center = true);\n    }\n    \n    // Add ridges\n    for(i = [-3:1:3]) {\n        rotate([0, 15*i, 0])\n            translate([0, 0, -5])\n                scale([1, 0.8, 0.1])\n                    sphere(d = 70);\n    }\n    \n    // Hinge area\n    translate([30, 0, -5])\n        rotate([0, 90, 0])\n            cylinder(h = 15, r1 = 8, r2 = 12);\n}\n\nmodule scallop_body() {\n    // Main body mass\n    translate([0, 0, -20])\n        scale([0.9, 0.7, 0.3])\n            sphere(d = 60);\n    \n    // Add muscle\n    translate([15, 0, -20])\n        scale([0.4, 0.5, 0.2])\n            sphere(d = 40);\n    \n    // Eyes\n    for(i = [-1, 1]) {\n        translate([30, i*10, -5])\n            sphere(d = 3);\n    }\n    \n    // Tentacles\n    for(i = [-2:1:2]) {\n        translate([32, i*8, -8])\n            rotate([90, 0, 0])\n                cylinder(h = 10 + abs(i)*2, r1 = 1, r2 = 0.5);\n    }\n}\n\nmodule lower_shell() {\n    // Bottom shell\n    translate([0, 0, -25])\n        rotate([180, 0, 0])\n            scallop_shell();\n}\n\n// Assembly\nunion() {\n    scallop_shell();\n    scallop_body();\n    lower_shell();\n}",
    "renders": true
  },
  {
    "animal": "scarab",
    "openscad_code": "// Realistic Scarab Beetle - Medium Complexity\n// Size: ~60mm length\n\n$fn = 36;\n\n// Main body module\nmodule scarab_body() {\n    // Thorax (main body)\n    union() {\n        // Main thorax shell - ellipsoid shape\n        scale([1.2, 1, 0.8]) \n        sphere(r = 12);\n        \n        // Head\n        translate([15, 0, 5])\n        scale([1.5, 1.2, 1])\n        sphere(r = 7);\n        \n        // Extended pronotum (neck area)\n        translate([8, 0, -2])\n        scale([1.8, 1.4, 0.6])\n        sphere(r = 6);\n    }\n}\n\n// Elytra (wing covers) with realistic segmentation\nmodule elytra() {\n    difference() {\n        // Main elytra shell\n        translate([0, 0, 10])\n        scale([1.8, 2.2, 0.6])\n        sphere(r = 12);\n        \n        // Division line between elytra\n        translate([-8, 0, 9])\n        cube([16, 1, 4]);\n        \n        // Trim excess\n        translate([0, 0, 16])\n        cube([40, 40, 10], center = true);\n    }\n    \n    // Add elytra texture lines\n    for(i = [1:6]) {\n        translate([-20 + i*7, -15, 10])\n        rotate([0, 0, 5])\n        scale([1, 0.1, 0.05])\n        sphere(r = 12);\n    }\n}\n\n// Leg segments with joints\nmodule leg(side) {\n    // Side modifier -1 for left, 1 for right\n    mirror([0, side, 0]) {\n        // Coxa (base leg segment)\n        translate([8, side*10, 0])\n        rotate([0, 0, -30])\n        cylinder(h = 8, r1 = 3, r2 = 2.5);\n        \n        // Trochanter\n        translate([12, side*12, -2])\n        rotate([0, 0, 45])\n        cylinder(h = 6, r1 = 2.5, r2 = 2);\n        \n        // Femur\n        translate([14, side*14, -5])\n        rotate([0, 0, 60])\n        scale([1, 1, 0.8])\n        cylinder(h = 10, r1 = 2, r2 = 1.8);\n        \n        // Tibia\n        translate([17, side*17, -9])\n        rotate([0, 0, 75])\n        cylinder(h = 8, r1 = 1.8, r2 = 1.5);\n        \n        // Tarsus (foot)\n        translate([19, side*19, -12])\n        rotate([0, 0, 80])\n        scale([1, 1, 0.6])\n        cylinder(h = 6, r1 = 1.5, r2 = 1);\n    }\n}\n\n// Antennae\nmodule antenna(side) {\n    translate([21, side*5, 8])\n    rotate([0, 20, 30*side])\n    cylinder(h = 12, r1 = 1.5, r2 = 0.5);\n    \n    // Antenna club\n    translate([31, side*8, 11])\n    sphere(r = 2);\n}\n\n// Compound eye\nmodule eye(side) {\n    translate([19, side*7, 6])\n    scale([1.2, 1, 1.2])\n    sphere(r = 3);\n}\n\n// Mandibles\nmodule mandible(side) {\n    translate([21, side*3, 3])\n    rotate([0, 0, -20*side])\n    scale([1.5, 0.8, 0.5])\n    cylinder(h = 5, r1 = 2, r2 = 1);\n}\n\n// Main scarab assembly\nunion() {\n    // Body\n    scarab_body();\n    \n    // Elytra\n    elytra();\n    \n    // All six legs\n    for(side = [-1, 1]) {\n        // Front legs\n        translate([5, 0, 0])\n        leg(side);\n        \n        // Middle legs\n        translate([-2, 0, 0])\n        rotate([0, 0, 10])\n        leg(side);\n        \n        // Hind legs\n        translate([-10, 0, 0])\n        rotate([0, 0, 20])\n        leg(side);\n    }\n    \n    // Antennae\n    antenna(1);\n    antenna(-1);\n    \n    // Eyes\n    eye(1);\n    eye(-1);\n    \n    // Mandibles\n    mandible(1);\n    mandible(-1);\n}\n\n// Add base plate for 3D printing stability\ntranslate([0, 0, -15])\ncube([40, 30, 3], center = true);",
    "renders": true
  },
  {
    "animal": "scaup",
    "openscad_code": "// Scaup Duck (Medium Complexity)\n// Realistic style, 3D printable\n\n$fn = 24;\n\nmodule scaup() {\n    // Body - main ellipsoid shape\n    union() {\n        // Main body\n        scale([1.2, 0.8, 0.9])\n            sphere(20);\n        \n        // Tail extension\n        translate([-22, 0, -5])\n            rotate([0, 20, 0])\n            scale([1.5, 0.8, 0.3])\n            cylinder(8, 8, 2);\n            \n        // Chest bulge\n        translate([15, 0, -15])\n            scale([0.9, 1.2, 0.8])\n            sphere(10);\n    }\n    \n    // Head\n    translate([22, 0, 8])\n        union() {\n            // Head sphere\n            scale([0.8, 0.9, 0.85])\n                sphere(12);\n                \n            // Bill\n            translate([8, 0, -2])\n                rotate([0, -10, 0])\n                scale([1.8, 0.4, 0.3])\n                cylinder(12, 5, 3);\n                \n            // Bill nail\n            translate([19, 0, -2])\n                scale([0.4, 0.8, 0.8])\n                sphere(2.5);\n                \n            // Eye\n            translate([5, 6, 3])\n                sphere(2);\n                \n            // Eye highlight\n            translate([5.5, 6.5, 3.5])\n                scale([0.5, 0.5, 0.5])\n                sphere(1);\n    }\n    \n    // Neck\n    hull() {\n        translate([15, 0, 0])\n            sphere(5);\n        translate([22, 0, 8])\n            sphere(5);\n    }\n    \n    // Wings\n    module wing() {\n        difference() {\n            // Main wing\n            translate([0, 0, 0])\n                rotate([0, 0, -15])\n                scale([1.2, 0.3, 0.8])\n                cylinder(25, 12, 8);\n                \n            // Wing tip\n            translate([20, 0, 0])\n                rotate([0, 0, -15])\n                scale([0.8, 0.3, 0.6])\n                cylinder(15, 8, 0);\n                \n            // Feather indentations\n            for(i = [1:3]) {\n                translate([-5 + i*8, 0, i*2])\n                    rotate([0, 0, -15])\n                    scale([0.1, 0.4, 0.4])\n                    cylinder(25, 10, 6);\n            }\n        }\n    }\n    \n    // Left wing\n    translate([0, 15, 5])\n        rotate([0, -20, 20])\n        wing();\n    \n    // Right wing\n    translate([0, -15, 5])\n        rotate([0, -20, -20])\n        mirror([0,1,0])\n        wing();\n    \n    // Tail feathers\n    module tail_feather() {\n        rotate([0, 40, 0])\n        scale([0.1, 0.8, 0.4])\n        cylinder(15, 3, 0);\n    }\n    \n    for(i = [-2:1:2]) {\n        translate([-25, i*3, i*2-2])\n            rotate([0, 0, i*5])\n            tail_feather();\n    }\n    \n    // Feet\n    module foot() {\n        // Main foot\n        translate([0, 0, -25])\n            rotate([0, 90, 0])\n            scale([1, 0.8, 0.3])\n            cylinder(15, 3, 1);\n            \n        // Toes\n        for(i = [0:3]) {\n            translate([i*3-4.5, 0, -25])\n                rotate([0, 90, 0])\n                scale([0.3, 0.6, 0.3])\n                cylinder(8, 2, 0.5);\n        }\n    }\n    \n    // Left foot\n    translate([5, 8, 0])\n        rotate([0, 0, 10])\n        foot();\n    \n    // Right foot\n    translate([5, -8, 0])\n        rotate([0, 0, -10])\n        mirror([0,1,0])\n        foot();\n}\n\n// Main assembly\nscaup();",
    "renders": true
  },
  {
    "animal": "schipperke",
    "openscad_code": "// Schipperke dog model - medium complexity\n// Using only OpenSCAD primitives and proper 3D printing guidelines\n\n// Overall scale factor for 3D printing\nscale_factor = 0.8;\n\n// Body dimensions\nbody_length = 45 * scale_factor;\nbody_width = 25 * scale_factor;\nbody_height = 30 * scale_factor;\n\n// Head dimensions\nhead_length = 20 * scale_factor;\nhead_width = 18 * scale_factor;\nhead_height = 22 * scale_factor;\n\n// Leg dimensions\nleg_height = 12 * scale_factor;\nleg_width = 5 * scale_factor;\n\n// Tail dimensions\ntail_length = 15 * scale_factor;\ntail_diameter = 6 * scale_factor;\n\nmodule schipperke() {\n    // Main body - slightly tapered from chest to rear\n    translate([0, 0, leg_height + body_height/2]) {\n        hull() {\n            // Front of body (wider)\n            translate([-body_length/3, 0, 0]) {\n                scale([1.2, 1, 1]) sphere(d=body_width, $fn=20);\n            }\n            // Rear of body (narrower)\n            translate([body_length/3, 0, 0]) {\n                scale([0.8, 0.9, 0.9]) sphere(d=body_width, $fn=20);\n            }\n        }\n    }\n    \n    // Chest area - more pronounced\n    translate([-body_length/2.5, 0, leg_height + body_height/3]) {\n        sphere(d=body_width * 1.3, $fn=20);\n    }\n    \n    // Head\n    translate([-body_length/2 - head_length/2, 0, leg_height + body_height * 0.8]) {\n        // Main head shape\n        translate([0, 0, 0]) {\n            scale([1.3, 1, 1.1]) sphere(d=head_width, $fn=20);\n        }\n        \n        // Snout/muzzle\n        translate([-head_length/2, 0, -head_height/4]) {\n            scale([1.5, 0.7, 0.6]) sphere(d=head_width * 0.8, $fn=20);\n        }\n        \n        // Ears - pointed and upright\n        for(side = [-1, 1]) {\n            translate([head_length/4, side * head_width/2, head_height/3]) {\n                rotate([0, 0, side * 20]) {\n                    scale([0.3, 0.1, 1]) cylinder(h=head_height * 0.8, d=head_width * 0.5, $fn=3);\n                }\n            }\n        }\n        \n        // Eyes\n        for(side = [-1, 1]) {\n            translate([-head_length/4, side * head_width/3, head_height/6]) {\n                sphere(d=head_width/6, $fn=10);\n            }\n        }\n        \n        // Nose\n        translate([-head_length/2 - 1, 0, -head_height/4]) {\n            sphere(d=head_width/5, $fn=10);\n        }\n    }\n    \n    // Legs - simplified cylinders with paws\n    leg_positions = [\n        [-body_length/3, body_width/2.5, 0],  // front right\n        [-body_length/3, -body_width/2.5, 0], // front left\n        [body_length/3, body_width/3, 0],     // rear right\n        [body_length/3, -body_width/3, 0]     // rear left\n    ];\n    \n    for(pos = leg_positions) {\n        translate(pos) {\n            // Upper leg\n            cylinder(h=leg_height * 0.7, d=leg_width, $fn=12);\n            \n            // Lower leg\n            translate([0, 0, leg_height * 0.7]) {\n                cylinder(h=leg_height * 0.3, d=leg_width * 0.8, $fn=12);\n            }\n            \n            // Paw\n            translate([0, 0, leg_height]) {\n                sphere(d=leg_width * 1.2, $fn=12);\n            }\n        }\n    }\n    \n    // Tail - curled up over back\n    translate([body_length/2, 0, leg_height + body_height * 0.7]) {\n        rotate([0, 90, 15]) {\n            for(i = [0:15:180]) {\n                rotate([0, 0, i]) {\n                    translate([tail_length * sin(i) * 0.8, 0, tail_length * (1 - cos(i)) * 0.4]) {\n                        sphere(d=tail_diameter * (1 - i/360), $fn=12);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Fur texture - simple bumps along back and flanks\n    fur_positions = [\n        for(i = [-body_length/2:5:body_length/2])\n        for(j = [-body_width/2:4:body_width/2])\n        [i, j, leg_height + body_height + 2]\n    ];\n    \n    for(pos = fur_positions) {\n        if(norm([pos.x, pos.y]) < body_width/1.8) {\n            translate(pos) {\n                sphere(d=2 * scale_factor, $fn=8);\n            }\n        }\n    }\n}\n\n// Generate the complete model\nschipperke();",
    "renders": true
  },
  {
    "animal": "scorpion",
    "openscad_code": "// Realistic Scorpion - Medium Complexity\n// Designed for 3D printing - no overhangs, proper wall thickness\n\n$fn = 50;  // Smooth curves for printing\n\n// Main module\nmodule scorpion() {\n    color(\"saddlebrown\") {\n        union() {\n            // Main body parts\n            cephalothorax();\n            abdomen();\n            tail();\n            \n            // Legs - 4 pairs\n            for(i = [0:3]) {\n                left_leg(i);\n                mirror([1,0,0]) left_leg(i);\n            }\n            \n            // Claws\n            left_claw();\n            mirror([1,0,0]) left_claw();\n        }\n    }\n}\n\n// Head and thorax combined\nmodule cephalothorax() {\n    translate([0, 0, 6]) {\n        difference() {\n            union() {\n                // Main body segment\n                scale([1.2, 0.8, 0.6]) sphere(d = 20);\n                \n                // Eyes protruding\n                translate([-6, 8, 3]) sphere(d = 3);\n                translate([6, 8, 3]) sphere(d = 3);\n            }\n            // Carapace indentation\n            translate([0, 0, 2]) scale([0.8, 0.6, 0.3]) sphere(d = 18);\n        }\n    }\n}\n\n// Abdomen segments\nmodule abdomen() {\n    for(i = [0:3]) {\n        translate([0, -12 - i*5, 5 - i*1]) {\n            scale([1.1 - i*0.1, 0.7 - i*0.05, 0.5]) sphere(d = 18 - i*2);\n        }\n    }\n}\n\n// Tail segments and stinger\nmodule tail() {\n    // First segment\n    translate([0, -28, 2]) rotate([0, 0, 30]) {\n        scale([0.4, 0.4, 1.2]) cylinder(d1 = 10, d2 = 8, h = 12);\n        \n        // Second segment\n        translate([0, 0, 12]) rotate([0, 0, 15]) {\n            scale([0.4, 0.4, 1.1]) cylinder(d1 = 8, d2 = 6, h = 10);\n            \n            // Third segment\n            translate([0, 0, 10]) rotate([0, 0, 10]) {\n                scale([0.4, 0.4, 1]) cylinder(d1 = 6, d2 = 4, h = 8);\n                \n                // Stinger\n                translate([0, 0, 8]) rotate([0, 0, 5]) {\n                    cylinder(d1 = 4, d2 = 0.5, h = 6);\n                }\n            }\n        }\n    }\n}\n\n// Left legs (right legs mirrored)\nmodule left_leg(segment) {\n    angles = [20, 10, 0, -10];\n    heights = [2, 1, 0, -1];\n    \n    translate([-8, 2 - segment*5, 2 + heights[segment]]) {\n        rotate([0, 0, angles[segment]]) {\n            // Coxa (first segment)\n            translate([-2, 0, 0]) rotate([0, 90, 0]) \n                cylinder(d = 3, h = 6);\n            \n            // Trochanter\n            translate([-5, 2, 0]) rotate([0, 0, -30]) \n                cylinder(d = 2.5, h = 5);\n            \n            // Femur\n            translate([-7, 5, 0]) rotate([0, 0, -20]) \n                cylinder(d = 2, h = 8);\n            \n            // Tibia\n            translate([-8, 11, -2]) rotate([0, 0, -10]) \n                cylinder(d = 1.8, h = 7);\n            \n            // Tarsus\n            translate([-8, 16, -3]) rotate([0, 0, -5]) \n                cylinder(d = 1.5, h = 5);\n        }\n    }\n}\n\n// Left claw\nmodule left_claw() {\n    translate([-12, 8, 3]) rotate([0, 0, -20]) {\n        // Pincer base\n        scale([1, 0.8, 0.8]) sphere(d = 8);\n        \n        // Fixed finger\n        translate([0, 4, 0]) rotate([0, 0, 30]) {\n            scale([0.8, 0.8, 0.6]) cylinder(d1 = 6, d2 = 4, h = 10);\n            translate([0, 8, 0]) rotate([0, 0, 10]) {\n                scale([0.6, 0.6, 0.5]) cylinder(d1 = 4, d2 = 2, h = 8);\n            }\n        }\n        \n        // Movable finger\n        translate([0, 3, 2]) rotate([0, 0, -20]) {\n            scale([0.7, 0.7, 0.5]) cylinder(d1 = 5, d2 = 3, h = 9);\n            translate([0, 6, 1]) rotate([0, 0, -15]) {\n                scale([0.5, 0.5, 0.4]) cylinder(d1 = 3, d2 = 1.5, h = 7);\n            }\n        }\n    }\n}\n\n// Generate the scorpion centered on the print bed\ntranslate([0, 15, 0]) rotate([0, 180, 0]) scorpion();",
    "renders": true
  },
  {
    "animal": "scoter",
    "openscad_code": "// Realistic 3D-printable Scoter (Medium complexity)\n// Approx. 75 mm long, 30 mm tall, 30 mm wide\n// All parts designed for 0.4 mm nozzle / 0.2 mm layer height\n\n// Main body (torso)\nmodule body() {\n    // Central ellipsoid torso\n    translate([-5,0,8]) scale([1.2,0.8,1]) sphere(r=10, $fn=32);\n    \n    // Chest bulge\n    translate([-11,-2,3]) scale([1.5,1,1.2]) sphere(r=6, $fn=24);\n}\n\n// Head with bill\nmodule head() {\n    // Head sphere\n    translate([8,0,15]) sphere(r=6, $fn=32);\n    \n    // Bill cone\n    translate([13,0,15]) rotate([0,90,0]) \n        cylinder(h=12, r1=2.5, r2=0.5, $fn=16);\n    \n    // Bill base\n    translate([11,0,15]) rotate([0,90,0]) \n        cylinder(h=5, r=3.5, $fn=16);\n}\n\n// Wing (parametric for both sides)\nmodule wing(side=1) {\n    // Main wing\n    translate([-5,side*8,12]) rotate([0,30,0]) \n        scale([1.2,0.2,0.8]) sphere(r=8, $fn=24);\n    \n    // Secondary feathers\n    for(i=[0:3]) {\n        translate([-5-side*2,side*(9+i*1.5),10-i*1.5]) rotate([0,45-i*5,side*20])\n            scale([0.7,0.1,0.3]) sphere(r=4, $fn=12);\n    }\n}\n\n// Tail\nmodule tail() {\n    // Tail base\n    translate([-12,0,8]) rotate([0,20,0]) \n        cylinder(h=8, r1=4, r2=2, $fn=16);\n    \n    // Tail feathers\n    for(i=[-1:1]) {\n        translate([-14,i*2,8]) rotate([0,30,0]) \n            scale([1,0.3,0.05]) cube([6,2,1]);\n    }\n}\n\n// Feet (parametric for both sides)\nmodule foot(side=1) {\n    translate([-2,side*5,0]) {\n        // Leg\n        cylinder(h=6, r=1.5, $fn=8);\n        \n        // Webbed foot\n        translate([0,0,-1]) rotate([0,0,side*30]) {\n            // Main web\n            scale([1.5,1,0.3]) sphere(r=3, $fn=16);\n            \n            // Toes\n            for(angle=[-30,0,30]) {\n                rotate([0,0,angle]) translate([3,0,0]) \n                    scale([0.8,0.3,0.3]) sphere(r=1.5, $fn=8);\n            }\n        }\n    }\n}\n\n// Eye (parametric for both sides)\nmodule eye(side=1) {\n    translate([9,side*3.5,16.5]) {\n        difference() {\n            sphere(r=1.2, $fn=16); // White\n            translate([0.3,0.3,0.7]) sphere(r=0.6, $fn=8); // Pupil\n        }\n    }\n}\n\n// Combine all parts\nunion() {\n    body();\n    head();\n    \n    // Wings\n    wing(1);  // Right wing\n    wing(-1); // Left wing\n    \n    tail();\n    \n    // Feet\n    foot(1);  // Right foot\n    foot(-1); // Left foot\n    \n    // Eyes\n    eye(1);   // Right eye\n    eye(-1);  // Left eye\n}",
    "renders": true
  },
  {
    "animal": "screamer",
    "openscad_code": "// Realistic screamer mask - medium complexity\n// Wall thickness 2mm, no overhangs >45°, max dimension 80mm\n\n// Parameters\nwall = 2;\nscale_factor = 0.8;\nface_w = 60 * scale_factor;\nface_h = 70 * scale_factor;\nface_d = 25 * scale_factor;\n\n// Main face shell\nmodule face_shell() {\n    difference() {\n        // Outer rounded face\n        scale([1, 1.2, 0.8])\n            sphere(d=face_w, $fn=50);\n        \n        // Hollow inside\n        translate([0,0,-5])\n            scale([0.85, 0.85, 0.7])\n                sphere(d=face_w-wall*2, $fn=50);\n        \n        // Back opening for face\n        translate([0,0,-face_d/2])\n            cube([face_w*0.6, face_h*0.8, face_d], center=true);\n    }\n}\n\n// Eye holes with raised edges\nmodule eye_hole(x, y, angle) {\n    translate([x, y, face_d/4])\n    rotate([0, 0, angle])\n    difference() {\n        // Raised rim\n        translate([0,0,-1])\n            cylinder(h=3, d1=12, d2=14, $fn=32);\n        // Hole\n        cylinder(h=4, d=8, $fn=32);\n    }\n}\n\n// Mouth opening with teeth\nmodule mouth_opening() {\n    translate([0, -face_h*0.3, face_d/4])\n    difference() {\n        // Mouth cavity\n        scale([1.2, 0.4, 1])\n            sphere(d=25, $fn=32);\n        \n        // Teeth\n        for(i = [-2:2]) {\n            translate([i*4, 0, 2])\n                cube([2.5, 6, 3], center=true);\n        }\n    }\n}\n\n// Wrinkle details\nmodule wrinkle(x, y, rot, len) {\n    translate([x, y, face_d/3])\n    rotate([rot, 0, 0])\n    scale([len, 0.5, 0.3])\n        sphere(d=3, $fn=16);\n}\n\n// Assembly\nunion() {\n    // Main face\n    face_shell();\n    \n    // Eyes\n    eye_hole(-face_w*0.2, face_h*0.15, -5);\n    eye_hole(face_w*0.2, face_h*0.15, 5);\n    \n    // Mouth\n    mouth_opening();\n    \n    // Forehead wrinkles\n    for(i = [-1:1]) {\n        wrinkle(i*8, face_h*0.4, 45, 8);\n        wrinkle(i*6, face_h*0.35, 40, 6);\n    }\n    \n    // Cheek details\n    wrinkle(-face_w*0.3, 0, 0, 10);\n    wrinkle(face_w*0.3, 0, 0, 10);\n    \n    // Chin\n    translate([0, -face_h*0.45, face_d/4])\n        scale([0.8, 0.6, 0.5])\n            sphere(d=15, $fn=32);\n}",
    "renders": true
  },
  {
    "animal": "seahorse",
    "openscad_code": "// Realistic Seahorse for 3D printing\n// Approx 80 mm tall, 30 mm thick, wall thickness 2 mm\n\nmodule bodySegment(h, r1, r2, twist = 0) {\n    // Single segment of seahorse body\n    rotate([0, 0, twist]) \n    cylinder(h=h, r1=r1, r2=r2, $fn=20);\n}\n\nmodule seahorseBody() {\n    // Main curved body with increasing segments\n    union() {\n        // Head segment\n        translate([0, 0, 0]) bodySegment(15, 8, 6, 0);\n        \n        // Neck segments\n        translate([0, 0, 15]) bodySegment(10, 6, 5, 5);\n        translate([0, 0, 25]) bodySegment(10, 5, 4.5, 10);\n        \n        // Body segments\n        translate([0, 0, 35]) bodySegment(12, 4.5, 4, 15);\n        translate([0, 0, 47]) bodySegment(12, 4, 3.5, 20);\n        translate([0, 0, 59]) bodySegment(10, 3.5, 3, 25);\n        \n        // Tail segments\n        translate([0, 0, 69]) bodySegment(10, 3, 2.5, 30);\n        translate([0, 0, 79]) bodySegment(12, 2.5, 2, 35);\n    }\n}\n\nmodule snout() {\n    // Elongated snout\n    translate([0, 12, 8]) rotate([0, -30, 0]) \n    cylinder(h=20, r1=2.5, r2=1, $fn=16);\n}\n\nmodule dorsalFin() {\n    // Dorsal fin with webbing\n    translate([0, 0, 30]) rotate([0, 0, 10]) {\n        for(i = [0:20:160]) {\n            rotate([0, 0, i]) translate([0, 4, 0])\n            scale([1, 0.3, 0.1]) sphere(r=3, $fn=8);\n        }\n    }\n}\n\nmodule pectoralFin() {\n    // Side fins\n    translate([5, 0, 25]) rotate([0, 90, 0]) \n    scale([1, 0.5, 0.3]) sphere(r=4, $fn=12);\n    \n    mirror([1, 0, 0]) translate([5, 0, 25]) rotate([0, 90, 0]) \n    scale([1, 0.5, 0.3]) sphere(r=4, $fn=12);\n}\n\nmodule tailCurl() {\n    // Curled tail end\n    translate([0, 0, 90]) rotate([0, 0, 35]) {\n        for(i = [0:10:180]) {\n            rotate([0, 0, i]) translate([3*sin(i), 3*cos(i), 0])\n            sphere(r=1.8, $fn=12);\n        }\n    }\n}\n\nmodule eye() {\n    // Slightly recessed eyes\n    difference() {\n        translate([0, 7, 12]) sphere(r=1.5, $fn=16);\n        translate([0, 8.5, 12]) sphere(r=1, $fn=16);\n    }\n    \n    mirror([1, 0, 0]) translate([0, 7, 12]) sphere(r=1.5, $fn=16);\n    mirror([1, 0, 0]) translate([0, 8.5, 12]) sphere(r=1, $fn=16);\n}\n\nmodule corona() {\n    // Crown-like head appendage\n    translate([0, -6, 15]) rotate([0, 0, 0]) {\n        for(i = [0:30:330]) {\n            rotate([0, 0, i]) translate([0, 0, 0])\n            cylinder(h=8, r1=1.5, r2=0.5, $fn=8);\n        }\n    }\n}\n\nmodule hollowBody() {\n    // Create hollow interior for 3D printing\n    difference() {\n        union() {\n            seahorseBody();\n            snout();\n            tailCurl();\n        }\n        \n        // Hollow space\n        scale([0.8, 0.8, 0.8]) {\n            translate([0, 0, 2]) seahorseBody();\n            translate([0, 10, 8]) rotate([0, -30, 0]) \n            scale([0.8, 0.8, 0.8]) cylinder(h=20, r1=2.5, r2=1, $fn=16);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    hollowBody();\n    dorsalFin();\n    pectoralFin();\n    eye();\n    corona();\n}\n\n// Base for stable printing\ntranslate([0, 0, -2]) cylinder(h=2, r=12, $fn=32);",
    "renders": true
  },
  {
    "animal": "seal",
    "openscad_code": "// Realistic Seal - Medium Complexity\n// Designed for 3D printing, approximately 80mm long\n\n$fn=50;\n\n// Overall dimensions\nseal_length = 80;\nseal_height = 25;\nseal_width = 35;\n\nmodule seal_body() {\n    // Main torpedo-shaped body\n    difference() {\n        scale([1, 0.8, 0.5]) \n            sphere(d=seal_length);\n        \n        // Flatten bottom for printing\n        translate([0, 0, -seal_height/2])\n            cube([seal_length*2, seal_width*2, seal_height], center=true);\n    }\n}\n\nmodule seal_head() {\n    // Rounded head\n    translate([seal_length/2 - 15, 0, seal_height/2])\n        scale([1.2, 1, 1])\n            sphere(d=seal_width);\n    \n    // Snout\n    translate([seal_length/2 - 5, 0, seal_height/2 - 5])\n        scale([2, 1, 0.8])\n            sphere(d=seal_width/2);\n}\n\nmodule seal_flippers() {\n    // Front flippers\n    for(side = [-1, 1]) {\n        translate([seal_length/4, side * (seal_width/2 + 5), -seal_height/4])\n            rotate([0, side * 20, 0])\n                scale([1.5, 0.3, 0.2])\n                    sphere(d=seal_width/2);\n        \n        // Rear flippers\n        translate([-seal_length/2 + 10, side * (seal_width/2 - 5), -seal_height/4])\n            rotate([0, -side * 30, 0])\n                scale([2, 0.4, 0.15])\n                    sphere(d=seal_width/2);\n    }\n}\n\nmodule seal_face() {\n    // Eyes\n    for(side = [-1, 1]) {\n        translate([seal_length/2 - 8, side * 8, seal_height/2 + 5])\n            sphere(d=4);\n        \n        // Eye pupils\n        translate([seal_length/2 - 7, side * 8, seal_height/2 + 7])\n            color(\"black\")\n                sphere(d=2);\n    }\n    \n    // Nose\n    translate([seal_length/2 - 2, 0, seal_height/2 - 2])\n        sphere(d=6);\n    \n    // Whiskers\n    for(i = [0:2]) {\n        translate([seal_length/2 - 3, -10 + i*4, seal_height/2 - 4])\n            rotate([90, 0, 0])\n                cylinder(h=8, d1=1.5, d2=0.5);\n    }\n    for(i = [0:2]) {\n        translate([seal_length/2 - 3, 10 - i*4, seal_height/2 - 4])\n            rotate([90, 0, 0])\n                cylinder(h=8, d1=1.5, d2=0.5);\n    }\n}\n\nmodule seal_tail() {\n    // Tail flippers\n    translate([-seal_length/2 + 5, 0, -seal_height/4])\n        rotate([0, 0, 90])\n            scale([1, 0.5, 0.2])\n                sphere(d=seal_width/2);\n}\n\n// Assembly\nunion() {\n    seal_body();\n    seal_head();\n    seal_flippers();\n    seal_face();\n    seal_tail();\n    \n    // Add support base\n    translate([0, 0, -seal_height/2 - 1])\n        cube([seal_length + 10, seal_width + 10, 2], center=true);\n}",
    "renders": true
  },
  {
    "animal": "sealion",
    "openscad_code": "// Realistic Sealion - Medium Complexity\n// Dimensions: ~80mm long, ~40mm high, ~30mm wide\n\nmodule body() {\n    // Main torso - elongated sphere\n    translate([0, 0, 15])\n    scale([1.5, 1, 1.2])\n    sphere(15, $fn=32);\n    \n    // Chest bulge\n    translate([-15, 0, 12])\n    scale([1.2, 1.3, 1])\n    sphere(12, $fn=32);\n}\n\nmodule head() {\n    // Main head shape\n    translate([25, 0, 25])\n    scale([1.2, 1, 1.1])\n    sphere(10, $fn=32);\n    \n    // Snout\n    translate([32, 0, 24])\n    scale([1.5, 0.8, 0.8])\n    sphere(6, $fn=32);\n    \n    // Nose\n    translate([36, 0, 25])\n    sphere(3, $fn=16);\n    \n    // Eyes\n    translate([28, 7, 28])\n    sphere(2, $fn=16);\n    translate([28, -7, 28])\n    sphere(2, $fn=16);\n}\n\nmodule flippers() {\n    // Front flippers\n    for(side = [-1, 1]) {\n        // Shoulder\n        translate([15, side*12, 20])\n        rotate([0, 0, side*20])\n        scale([0.5, 2, 0.2])\n        cylinder(h=15, r=5, $fn=16);\n        \n        // Flipper blade\n        translate([15, side*18, 15])\n        rotate([0, side*30, side*45])\n        scale([1, 2.5, 0.3])\n        cylinder(h=1, r=8, $fn=32);\n    }\n    \n    // Rear flippers\n    for(side = [-1, 1]) {\n        // Upper rear flipper\n        translate([-20, side*8, 12])\n        rotate([0, 0, side*(-30)])\n        scale([0.5, 2, 0.2])\n        cylinder(h=12, r=4, $fn=16);\n        \n        // Rear flipper blade\n        translate([-26, side*15, 8])\n        rotate([0, side*20, side*(-30)])\n        scale([1, 2, 0.3])\n        cylinder(h=1, r=7, $fn=32);\n    }\n}\n\nmodule tail() {\n    // Tail connection\n    translate([-28, 0, 12])\n    rotate([0, 0, 0])\n    scale([1, 0.8, 0.8])\n    sphere(8, $fn=32);\n    \n    // Tail flukes\n    for(side = [-1, 1]) {\n        translate([-30, side*8, 12])\n        rotate([0, 0, side*45])\n        scale([0.5, 1.5, 0.2])\n        cylinder(h=10, r=6, $fn=16);\n    }\n}\n\nmodule whiskers() {\n    // Whiskers on each side\n    for(side = [-1, 1]) {\n        for(i = [-2:2]) {\n            translate([34, side*4, 24])\n            rotate([0, i*5, side*(-20)])\n            cylinder(h=8, r=0.5, $fn=8);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    flippers();\n    tail();\n    whiskers();\n}\n\n// Base for stability\ntranslate([0, 0, -5])\nscale([1.2, 1.5, 0.5])\nsphere(20, $fn=64);",
    "renders": true
  },
  {
    "animal": "seastar",
    "openscad_code": "$fn = 48;\n\n// Overall scale\noverall_scale = 70;\n\n// Central disc\nmodule central_disc() {\n    // Main disc body\n    union() {\n        difference() {\n            cylinder(h = 8, r = 12, center = true);\n            translate([0, 0, 4.5]) cylinder(h = 10, r = 10, center = true);\n        }\n        \n        // Small bumps on top\n        for (a = [0:30:330]) {\n            rotate([0, 0, a]) {\n                translate([7, 0, 4.5]) sphere(d = 2);\n            }\n        }\n    }\n}\n\n// Single arm with tube feet\nmodule arm(length = 25, width = 8) {\n    union() {\n        // Main arm\n        difference() {\n            scale([1, 0.8, 0.4]) sphere(d = width);\n            translate([0, 0, -width/2]) cube([width*2, width*2, width], center = true);\n        }\n        \n        // Arm extension\n        translate([length/2, 0, 0])\n            scale([(length-10)/width, 0.6, 0.3]) sphere(d = width);\n        \n        // Tube feet\n        for (i = [1:2:length/3]) {\n            translate([i*3, 0, -1])\n                rotate([90, 0, 0])\n                    cylinder(h = 2, r1 = 1.2, r2 = 0.8, center = false);\n            translate([i*3, 2.5, -1])\n                rotate([90, 0, 0])\n                    cylinder(h = 1.8, r1 = 1, r2 = 0.6, center = false);\n            translate([i*3, -2.5, -1])\n                rotate([90, 0, 0])\n                    cylinder(h = 1.8, r1 = 1, r2 = 0.6, center = false);\n        }\n    }\n}\n\n// Create seastar\nscale([overall_scale/100, overall_scale/100, overall_scale/100]) {\n    // Central body\n    central_disc();\n    \n    // Five arms\n    for (a = [0:72:360-72]) {\n        rotate([0, 0, a]) {\n            translate([12, 0, 0]) {\n                arm();\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "animal": "serval",
    "openscad_code": "// Serval Cat - Realistic Medium Complexity\n// Size: ~80mm length, 3D printable\n\n$fn = 32;\nmodule body() {\n    // Main torso\n    translate([0, 0, 15]) scale([1.2, 0.7, 0.6]) sphere(20);\n    \n    // Chest\n    translate([-15, 0, 12]) scale([0.8, 0.6, 0.5]) sphere(15);\n    \n    // Belly\n    translate([5, 0, 8]) scale([0.9, 0.6, 0.4]) sphere(17);\n}\n\nmodule head() {\n    // Skull\n    translate([-25, 0, 25]) scale([0.9, 0.7, 0.8]) sphere(15);\n    \n    // Muzzle\n    translate([-35, 0, 22]) scale([0.8, 0.4, 0.5]) sphere(10);\n    \n    // Nose\n    translate([-42, 0, 23]) scale([0.3, 0.3, 0.2]) sphere(5);\n    \n    // Ears\n    for(side = [-1, 1]) {\n        translate([-25, side*12, 35]) rotate([0, side*10, 0]) \n            scale([0.3, 0.15, 1]) cylinder(15, 8, 5);\n    }\n}\n\nmodule legs() {\n    module leg(x, y, angle) {\n        translate([x, y, 10]) rotate([angle, 0, 0]) {\n            // Upper leg\n            translate([0, 0, -5]) scale([0.4, 0.4, 1]) cylinder(15, 5, 4);\n            // Lower leg\n            translate([0, 0, -20]) scale([0.3, 0.3, 1]) cylinder(15, 4, 3);\n            // Paw\n            translate([0, 0, -35]) scale([0.5, 0.5, 0.3]) sphere(6);\n        }\n    }\n    \n    // Front legs\n    leg(-10, 10, -20);\n    leg(-10, -10, -20);\n    \n    // Hind legs\n    leg(20, 10, 20);\n    leg(20, -10, 20);\n}\n\nmodule tail() {\n    // Tail segments\n    for(i = [0:4]) {\n        translate([22 + i*8, 0, 18 - i*2]) rotate([0, 0, -i*10]) \n            scale([0.8 - i*0.1, 0.8 - i*0.1, 1]) sphere(5);\n    }\n}\n\nmodule spots() {\n    // Body spots\n    for(pos = [[-10, 8, 20], [-5, -8, 18], [5, 5, 16], [10, -5, 15], \n               [15, 0, 14], [-8, 12, 22], [-8, -12, 22]]) {\n        translate(pos) scale([0.5, 0.5, 0.3]) sphere(3);\n    }\n    \n    // Ear backs\n    for(side = [-1, 1]) {\n        translate([-25, side*12, 30]) scale([0.3, 0.1, 0.5]) sphere(5);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    legs();\n    tail();\n    spots();\n}",
    "renders": true
  },
  {
    "animal": "shad",
    "openscad_code": "// Realistic shad (Alosa sapidissima) - medium complexity\n// Total length ~80 mm, designed for FDM printing (0.4 mm nozzle)\n\nshad_length = 80;           // overall fish length\nwall_th = 1.2;              // 3 perimeters @ 0.4 mm\n\nmodule body_shape() {\n    // Main fuselage of the fish\n    difference() {\n        hull() {\n            // Tapered ellipsoid made from stretched spheres\n            scale([1, 0.45, 0.25]) sphere(d = shad_length, $fn = 60);\n            translate([shad_length*0.6, 0, 0])\n                scale([0.7, 0.35, 0.2]) sphere(d = shad_length*0.7, $fn = 50);\n        }\n        // Hollow out interior\n        scale([0.85, 0.35, 0.18]) sphere(d = shad_length, $fn = 60);\n    }\n}\n\nmodule head_details() {\n    // Snout protrusion\n    translate([shad_length/2-2, 0, 0])\n        rotate([0, -10, 0])\n        scale([1, 0.6, 0.4])\n        cylinder(h = 6, d1 = 8, d2 = 4, $fn = 20);\n\n    // Eye sockets (left and right)\n    for (side = [-1, 1]) {\n        translate([shad_length*0.35, side*6, 1.5])\n            rotate([0, 90, 0])\n            difference() {\n                cylinder(h = 4, d = 5, $fn = 20);\n                translate([-1, 0, 0])\n                    cylinder(h = 5, d = 2.4, $fn = 16);\n            }\n    }\n}\n\nmodule tail_fin() {\n    // Tail fork (heterocercal)\n    translate([-shad_length/2-0.5, 0, 0])\n    union() {\n        // Upper lobe\n        rotate([0, 0, 25])\n            translate([0, 0, 0])\n            scale([1, 0.3, 0.05])\n            cube([12, 20, wall_th*2], center = true);\n\n        // Lower lobe\n        rotate([0, 0, -30])\n            translate([0, 0, 0])\n            scale([1, 0.25, 0.05])\n            cube([10, 18, wall_th*2], center = true);\n    }\n}\n\nmodule dorsal_fin() {\n    // Positioned mid-body\n    fin_base = -shad_length*0.1;\n    for (i = [0:5]) {\n        translate([fin_base - i*2.5, 0, 3+i*0.3])\n            rotate([0, 90-i*2, 0])\n            scale([0.6, 0.3, 0.05])\n            cylinder(h = 8-i*0.5, d1 = 1.2, d2 = 0.4, $fn = 6);\n    }\n}\n\nmodule pectoral_fin(side) {\n    // Side fins just behind head\n    translate([shad_length*0.25, side*shad_length*0.22, -1])\n        rotate([0, 20*side, 45*side])\n        scale([1, 0.35, 0.05])\n        cube([12, 8, wall_th*2], center = true);\n}\n\nmodule pelvic_fin(side) {\n    // Ventral fins\n    translate([-shad_length*0.1, side*shad_length*0.15, -2])\n        rotate([0, 30, 15*side])\n        scale([0.8, 0.3, 0.05])\n        cube([8, 6, wall_th*2], center = true);\n}\n\nmodule anal_fin() {\n    // Rear ventral fin\n    fin_start = -shad_length*0.35;\n    for (i = [0:4]) {\n        translate([fin_start - i*2, 0, -2.5-i*0.2])\n            rotate([0, -90+i*2, 0])\n            scale([0.5, 0.25, 0.05])\n            cylinder(h = 6-i*0.3, d1 = 1, d2 = 0.4, $fn = 6);\n    }\n}\n\n// Assembly\nunion() {\n    body_shape();\n    head_details();\n    tail_fin();\n    dorsal_fin();\n    anal_fin();\n    for (s = [-1, 1]) {\n        pectoral_fin(s);\n        pelvic_fin(s);\n    }\n}",
    "renders": true
  },
  {
    "animal": "shark",
    "openscad_code": "// Realistic 3D printable shark\n// Medium complexity (~100 lines)\n\n$fn = 36;\nbody_length = 80;\nbody_height = 20;\nbody_width = 25;\n\nmodule shark_body() {\n    // Main body - tapered ellipsoid\n    hull() {\n        translate([-body_length/2, 0, 0])\n            scale([1, 0.6, 0.4])\n            sphere(d=body_height);\n        translate([body_length/2, 0, 0])\n            scale([0.2, 0.3, 0.2])\n            sphere(d=body_height);\n    }\n    \n    // Belly flattening\n    difference() {\n        children();\n        translate([0, 0, -body_height/2])\n            cube([body_length*2, body_width*2, body_height], center=true);\n    }\n}\n\nmodule dorsal_fin() {\n    // Main dorsal fin\n    translate([0, 0, body_height/2]) {\n        rotate([0, 10, 0])\n            linear_extrude(height=2)\n                polygon(points=[\n                    [0, 0],\n                    [-8, 15],\n                    [-2, 15],\n                    [2, 15],\n                    [8, 15],\n                    [0, 0]\n                ]);\n    }\n}\n\nmodule pectoral_fin(side) {\n    // Side fins\n    translate([-body_length/4, side*body_width/2, -body_height/4]) {\n        rotate([0, side*20, side*30])\n            scale([1, 0.3, 0.1])\n                cylinder(h=12, d1=8, d2=4);\n    }\n}\n\nmodule tail_fin() {\n    // Upper tail lobe\n    translate([body_length/2, 0, 0]) {\n        rotate([0, 0, -20])\n            linear_extrude(height=3)\n                polygon(points=[\n                    [0, 0],\n                    [15, -12],\n                    [25, -8],\n                    [20, -2],\n                    [0, 0]\n                ]);\n    }\n    \n    // Lower tail lobe\n    translate([body_length/2, 0, -body_height/3]) {\n        rotate([0, 0, -10])\n            linear_extrude(height=3)\n                polygon(points=[\n                    [0, 0],\n                    [12, 8],\n                    [18, 6],\n                    [15, 2],\n                    [0, 0]\n                ]);\n    }\n}\n\nmodule shark_head() {\n    // Snout\n    translate([-body_length/2 - 8, 0, 0]) {\n        rotate([0, 0, -5])\n            scale([1.5, 0.8, 0.8])\n                cylinder(h=10, d1=body_height*0.6, d2=body_height*0.4);\n    }\n    \n    // Mouth\n    difference() {\n        sphere(d=body_height*0.8);\n        translate([-body_length/2 - 5, 0, -body_height/4])\n            cube([10, body_width*0.8, 2]);\n    }\n    \n    // Eyes\n    for(side = [-1, 1]) {\n        translate([-body_length/2 - 2, side*body_width/3, body_height/4]) {\n            sphere(d=3);\n            translate([0.5, 0, 0])\n                sphere(d=1.5);\n        }\n    }\n    \n    // Gill slits\n    for(i = [1:3]) {\n        translate([-body_length/2 + i*5, body_width/2, 0]) {\n            rotate([0, 90, 0])\n                cylinder(h=0.5, d=2);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main body with belly flattening\n    shark_body() {\n        shark_body();\n    }\n    \n    // Head features\n    translate([0, 0, 0])\n        shark_head();\n    \n    // Fins\n    dorsal_fin();\n    pectoral_fin(1);\n    pectoral_fin(-1);\n    tail_fin();\n}",
    "renders": true
  },
  {
    "animal": "shearwater",
    "openscad_code": "// Shearwater (realistic style, medium complexity)\n// Wingspan ~80 mm (printable upright on most FDM printers)\n\n$fn = 36;  // smooth curves without excessive facets\n\nmodule body() {\n    // main torpedo-shaped body\n    difference() {\n        scale([1, 0.6, 0.4])\n            sphere(d = 40, center = true);\n\n        // underside flat for printing\n        translate([0, 0, -8])\n            cube([50, 30, 16], center = true);\n    }\n}\n\nmodule neck() {\n    translate([20, 0, 2])\n        rotate([0, -10, 0])\n            scale([1, 0.7, 0.7])\n                cylinder(d1 = 12, d2 = 8, h = 15);\n}\n\nmodule head() {\n    translate([34, 0, 3])\n        rotate([0, -10, 0])\n            scale([1.2, 1, 1])\n                sphere(d = 12);\n}\n\nmodule beak() {\n    translate([42, 0, 3])\n        rotate([0, -10, 0])\n            cylinder(d1 = 5, d2 = 1, h = 15);\n}\n\nmodule eye() {\n    translate([32, 3.5, 4])\n        sphere(d = 2.5);\n    translate([32, -3.5, 4])\n        sphere(d = 2.5);\n}\n\nmodule wing() {\n    // tapered main wing with rounded tip\n    difference() {\n        hull() {\n            translate([0, 0, 0])\n                sphere(d = 5);\n            translate([-30, 0, 0])\n                sphere(d = 3);\n        }\n        // remove underside for printing\n        translate([0, 0, -3])\n            cube([40, 10, 6], center = true);\n    }\n}\n\nmodule tail() {\n    translate([-20, 0, -1])\n        rotate([0, 15, 0])\n            scale([1, 0.3, 0.2])\n                cylinder(d1 = 12, d2 = 6, h = 15);\n}\n\nmodule feet() {\n    // two simple webbed feet underneath\n    for (side = [-1, 1]) {\n        translate([10, side * 6, -7])\n            scale([1, 0.4, 0.2])\n                rotate([0, 90, 0])\n                    cylinder(d = 6, h = 4);\n    }\n}\n\n// assemble the bird\nunion() {\n    body();\n    neck();\n    head();\n    beak();\n    eye();\n\n    // left wing\n    translate([5, 12, 0])\n        rotate([0, 0, 20])\n            wing();\n\n    // right wing\n    mirror([0, 1, 0])\n        translate([5, 12, 0])\n            rotate([0, 0, 20])\n                wing();\n\n    tail();\n    feet();\n}",
    "renders": true
  },
  {
    "animal": "sheep",
    "openscad_code": "// Realistic Sheep - Medium Complexity\n// 3D printable sheep model (approx 80mm long)\n\nmodule wool_ball(radius=5, detail=8) {\n    // Create a fluffy wool ball using multiple spheres\n    for(i=[0:detail-1]) {\n        rotate([0, i*360/detail, 0]) \n            translate([0, 0, radius/3]) \n                sphere(r=radius*0.9, $fn=12);\n    }\n    sphere(r=radius, $fn=12);\n}\n\nmodule leg() {\n    // Cylindrical legs with hooves\n    union() {\n        cylinder(h=20, r1=4, r2=3, $fn=8);\n        translate([0, 0, -2])\n            cylinder(h=4, r1=3, r2=4, $fn=8);\n    }\n}\n\nmodule ear() {\n    // Floppy ear shape\n    difference() {\n        scale([1, 1.5, 0.5]) sphere(r=6, $fn=12);\n        translate([0, 2, 1]) scale([0.7, 1.2, 0.3]) sphere(r=6, $fn=12);\n    }\n}\n\nmodule tail() {\n    // Fluffy tail\n    rotate([0, 20, 0]) {\n        wool_ball(6, 6);\n        translate([0, -3, 2]) wool_ball(5, 5);\n    }\n}\n\nmodule head() {\n    union() {\n        // Main head shape\n        scale([1.2, 1, 1]) sphere(r=10, $fn=16);\n        \n        // Snout\n        translate([12, 0, 0])\n            scale([1.5, 0.8, 0.8]) sphere(r=6, $fn=12);\n        \n        // Ears\n        translate([2, 10, 5]) rotate([20, 0, 30]) ear();\n        translate([2, -10, 5]) rotate([20, 0, -30]) mirror([0,1,0]) ear();\n        \n        // Eyes\n        translate([10, 5, 4]) sphere(r=1.5, $fn=8);\n        translate([10, -5, 4]) sphere(r=1.5, $fn=8);\n        \n        // Nostrils\n        translate([16, 2, 2]) sphere(r=1, $fn=8);\n        translate([16, -2, 2]) sphere(r=1, $fn=8);\n    }\n}\n\nmodule body() {\n    union() {\n        // Main torso\n        scale([1.5, 1.2, 1]) sphere(r=20, $fn=16);\n        \n        // Add wool texture\n        for(i=[0:7]) {\n            angle = i * 45;\n            for(j=[0:3]) {\n                translate([\n                    15*cos(angle),\n                    15*sin(angle),\n                    5*j - 5\n                ]) wool_ball(6 - j, 5);\n            }\n        }\n        \n        // Back wool\n        translate([0, 0, 15]) wool_ball(8, 6);\n        translate([-5, 8, 12]) wool_ball(7, 5);\n        translate([-5, -8, 12]) wool_ball(7, 5);\n    }\n}\n\n// Assembly\nunion() {\n    // Body\n    translate([0, 0, 25]) body();\n    \n    // Head\n    translate([25, 0, 35]) rotate([0, -10, 0]) head();\n    \n    // Legs\n    translate([12, 10, 0]) leg();\n    translate([12, -10, 0]) leg();\n    translate([-12, 10, 0]) leg();\n    translate([-12, -10, 0]) leg();\n    \n    // Tail\n    translate([-22, 0, 28]) rotate([0, 0, -30]) tail();\n}",
    "renders": true
  },
  {
    "animal": "shiner",
    "openscad_code": "// Realistic Shiner (3D printable)\n\n// Overall scale factor\nscale_factor = 0.4;\n\n// Body parameters\nbody_length = 120 * scale_factor;\nbody_diameter = 35 * scale_factor;\nhead_diameter = 40 * scale_factor;\ntail_width = 50 * scale_factor;\ntail_height = 30 * scale_factor;\n\n// Fin parameters\ndorsal_fin_height = 25 * scale_factor;\ndorsal_fin_length = 60 * scale_factor;\npectoral_fin_length = 20 * scale_factor;\npectoral_fin_height = 15 * scale_factor;\n\n// Eye parameters\neye_diameter = 8 * scale_factor;\neye_offset = 15 * scale_factor;\n\n// Mouth parameters\nmouth_width = 15 * scale_factor;\nmouth_height = 5 * scale_factor;\n\n// Scale thickness\nwall_thickness = 2 * scale_factor;\n\n// Main body module\nmodule fish_body() {\n    // Create main body shape using hull of spheres\n    hull() {\n        translate([-body_length/2, 0, 0])\n            sphere(d=body_diameter, $fn=20);\n        translate([body_length/2, 0, 0])\n            sphere(d=head_diameter, $fn=20);\n    }\n    \n    // Add tail\n    difference() {\n        translate([body_length/2, 0, 0])\n            cube([tail_width, tail_height, tail_height], center=true);\n        \n        // Carve tail shape\n        translate([body_length/2 + tail_width/2 + 5, 0, 0])\n            rotate([0, 0, 0])\n            cylinder(h=tail_height + 10, r=tail_height/2, $fn=3);\n    }\n}\n\n// Dorsal fin\nmodule dorsal_fin() {\n    difference() {\n        // Main fin\n        translate([0, 0, body_diameter/2])\n            linear_extrude(height=dorsal_fin_length)\n                polygon(points=[\n                    [0, 0],\n                    [-dorsal_fin_length/2, dorsal_fin_height],\n                    [dorsal_fin_length/2, dorsal_fin_height]\n                ]);\n        \n        // Add fin rays\n        for(i = [-3:3]) {\n            translate([i * 10 * scale_factor, 0, body_diameter/2 + dorsal_fin_height/2])\n                cube([1, dorsal_fin_height, 1]);\n        }\n    }\n}\n\n// Pectoral fin\nmodule pectoral_fin(side) {\n    mirror([side, 0, 0]) {\n        translate([0, body_diameter/2, -body_diameter/4])\n            rotate([0, -30, 0])\n            difference() {\n                // Fin shape\n                scale([1, 0.7, 0.2])\n                    sphere(d=pectoral_fin_length, $fn=20);\n                \n                // Carve fin\n                translate([pectoral_fin_length/2, 0, 0])\n                    rotate([0, 45, 0])\n                    cube(pectoral_fin_length, center=true);\n            }\n    }\n}\n\n// Eye module\nmodule eye(side) {\n    translate([eye_offset, side * body_diameter/3, body_diameter/3]) {\n        // Eye socket\n        difference() {\n            sphere(d=eye_diameter + 2);\n            sphere(d=eye_diameter);\n        }\n        \n        // Eye ball\n        translate([0, 0, 1])\n            sphere(d=eye_diameter - 1);\n        \n        // Pupil\n        translate([0, 0, eye_diameter/2])\n            sphere(d=eye_diameter/3);\n    }\n}\n\n// Mouth\nmodule mouth() {\n    translate([body_length/2 - 5, 0, -body_diameter/4])\n        rotate([90, 0, 0])\n        difference() {\n            cylinder(h=mouth_height, r=mouth_width/2, $fn=20);\n            translate([0, 0, -1])\n                cube([mouth_width + 2, mouth_height + 2, mouth_height + 2], center=true);\n        }\n}\n\n// Gills\nmodule gills() {\n    for(i = [1:3]) {\n        translate([body_length/4 - i * 5 * scale_factor, body_diameter/2 - 2, 0])\n            rotate([0, 90, 0])\n            cylinder(h=wall_thickness, r=3 * scale_factor);\n    }\n}\n\n// Final assembly\nunion() {\n    fish_body();\n    dorsal_fin();\n    pectoral_fin(1);\n    pectoral_fin(-1);\n    eye(1);\n    eye(-1);\n    mouth();\n    gills();\n}",
    "renders": true
  },
  {
    "animal": "shoebill",
    "openscad_code": "// Shoebill in realistic style - Medium complexity\n// All dimensions in mm, printable without supports\n\n$fn = 32;\n\nmodule shoebill() {\n    // Body - oval shape\n    translate([0, 0, 10])\n    scale([1.2, 1, 1.5])\n    sphere(r=12);\n    \n    // Neck connecting body to head\n    translate([0, 0, 25])\n    cylinder(h=18, r1=8, r2=6);\n    \n    // Head - main shape\n    translate([0, 0, 48])\n    scale([1.3, 1, 1.2])\n    sphere(r=10);\n    \n    // Beak - upper part\n    difference() {\n        translate([0, 0, 50])\n        rotate([30, 0, 0])\n        scale([0.8, 0.5, 2.5])\n        cylinder(h=20, r=8, r2=4);\n        \n        // Beak opening\n        translate([0, -2.5, 60])\n        rotate([30, 0, 0])\n        scale([0.6, 0.3, 1])\n        cube([12, 5, 8], center=true);\n    }\n    \n    // Beak - lower part\n    translate([0, 2, 48])\n    rotate([-10, 0, 0])\n    scale([0.7, 0.4, 1.8])\n    cylinder(h=15, r=6, r2=3);\n    \n    // Hook at end of beak\n    translate([0, 0, 68])\n    rotate([90, 0, 0])\n    scale([0.5, 0.5, 1])\n    cylinder(h=8, r1=3, r2=0);\n    \n    // Eyes\n    for(x = [-4, 4]) {\n        translate([x, -5, 52])\n        sphere(r=1.5);\n    }\n    \n    // Legs\n    for(x = [-5, 5]) {\n        translate([x, 0, 0])\n        leg();\n    }\n    \n    // Feet\n    for(x = [-5, 5]) {\n        translate([x, 0, -8])\n        foot();\n    }\n    \n    // Wing details\n    for(side = [-1, 1]) {\n        translate([side * 8, 0, 20])\n        rotate([0, 0, side * 20])\n        wing();\n    }\n}\n\nmodule leg() {\n    // Upper leg\n    translate([0, 0, 10])\n    rotate([15, 0, 0])\n    cylinder(h=15, r=2);\n    \n    // Lower leg\n    translate([0, 0, -2])\n    rotate([5, 0, 0])\n    cylinder(h=12, r=1.5);\n}\n\nmodule foot() {\n    // Main foot pad\n    translate([0, 0, 0])\n    scale([1.5, 0.8, 0.3])\n    sphere(r=5);\n    \n    // Toes\n    for(angle = [-30, 0, 30]) {\n        rotate([0, 0, angle])\n        translate([6, 0, 0])\n        scale([1.5, 0.5, 0.3])\n        cylinder(h=5, r=1);\n    }\n}\n\nmodule wing() {\n    // Main wing shape\n    difference() {\n        scale([1, 0.3, 0.8])\n        sphere(r=8);\n        \n        // Wing feather details\n        for(i = [1:3]) {\n            translate([i*2, 0, -i])\n            scale([0.3, 0.3, 1])\n            rotate([0, 15, 0])\n            cube([2, 3, 0.5], center=true);\n        }\n    }\n}\n\n// Main model\nshoebill();",
    "renders": true
  },
  {
    "animal": "shoveler",
    "openscad_code": "// Shoveler (Northern Shoveler duck) - medium complexity realistic style\n// Size: ~80mm long, 3D printable\n\n$fn = 32;\n\nmodule shoveler() {\n    // Body parameters\n    body_length = 50;\n    body_height = 25;\n    body_width = 22;\n    \n    // Head parameters\n    head_length = 20;\n    head_height = 18;\n    head_width = 15;\n    \n    // Bill parameters\n    bill_length = 35;\n    bill_width = 20;\n    bill_height = 8;\n    \n    // Leg parameters\n    leg_height = 15;\n    leg_width = 4;\n    foot_length = 12;\n    foot_width = 8;\n    \n    // Tail parameters\n    tail_length = 12;\n    tail_width = 18;\n    \n    // Body - main oval shape\n    union() {\n        // Main body\n        translate([0, 0, body_height/2])\n            scale([1, 0.8, 0.6])\n                sphere(d=body_height);\n        \n        // Body extension for back\n        translate([-body_length/2 - 5, 0, body_height/2 - 5])\n            cube([10, body_width, 10], center=true);\n        \n        // Chest bulge\n        translate([body_length/2 - 10, 0, body_height/2 - 8])\n            scale([1.2, 1, 0.8])\n                sphere(d=body_height * 0.7);\n    }\n    \n    // Head\n    translate([body_length/2 + head_length/2 - 5, 0, body_height/2 + 5])\n        rotate([0, 20, 0])\n            union() {\n                // Main head\n                scale([1.3, 1, 1])\n                    sphere(d=head_height);\n                \n                // Eye\n                translate([head_length/2 - 5, head_width/3, head_height/4])\n                    sphere(d=3);\n                \n                // Eye ring\n                translate([head_length/2 - 5, head_width/3, head_height/4])\n                    sphere(d=3.5);\n            }\n    \n    // Shovel-shaped bill\n    translate([body_length/2 + head_length + bill_length/2 - 5, 0, body_height/2 + 2])\n        rotate([0, 20, 0])\n            union() {\n                // Upper bill\n                translate([0, 0, 2])\n                    scale([1, 0.9, 0.5])\n                        cube([bill_length, bill_width, bill_height], center=true);\n                \n                // Lower bill\n                translate([0, 0, -2])\n                    scale([1, 0.9, 0.4])\n                        cube([bill_length * 0.9, bill_width * 0.95, bill_height * 0.8], center=true);\n                \n                // Bill ridge\n                for(i = [0:3]) {\n                    translate([-bill_length/2 + i * 8, 0, bill_height/2 + 1])\n                        scale([0.3, 1, 0.3])\n                            sphere(d=bill_width * 0.8);\n                }\n            }\n    \n    // Wings\n    difference() {\n        // Left wing\n        translate([-5, body_width/2 + 2, body_height/2 + 5])\n            rotate([0, 0, -20])\n                scale([1.5, 0.3, 1])\n                    sphere(d=body_height * 1.2);\n        \n        // Wing detail lines\n        for(i = [1:3]) {\n            translate([-5, body_width/2 + 2 + i * 2, body_height/2 + 5])\n                rotate([0, 0, -20])\n                    scale([1.5, 0.05, 1])\n                        sphere(d=body_height * 1.1);\n        }\n    }\n    \n    // Right wing (mirrored)\n    mirror([0, 1, 0]) {\n        translate([-5, body_width/2 + 2, body_height/2 + 5])\n            rotate([0, 0, -20])\n                scale([1.5, 0.3, 1])\n                    sphere(d=body_height * 1.2);\n    }\n    \n    // Tail\n    translate([-body_length/2 - tail_length/2, 0, body_height/2 - 5])\n        rotate([10, 0, 0])\n            scale([1, 1, 0.3])\n                cube([tail_length, tail_width, 8], center=true);\n    \n    // Legs and feet\n    // Left leg\n    translate([0, body_width/2 - 3, -leg_height/2])\n        union() {\n            // Leg\n            cylinder(h=leg_height, d=leg_width);\n            \n            // Foot\n            translate([0, foot_length/2, -leg_height/2])\n                rotate([0, 20, 0])\n                    union() {\n                        // Main foot\n                        scale([1.5, 1, 0.3])\n                            sphere(d=foot_width);\n                        \n                        // Toes\n                        for(i = [-1:1]) {\n                            translate([i * 3, foot_length/2 + 2, 0])\n                                rotate([0, 0, i * 15])\n                                    scale([0.3, 1, 0.3])\n                                        sphere(d=foot_width * 0.8);\n                        }\n                    }\n        }\n    \n    // Right leg\n    translate([0, -body_width/2 + 3, -leg_height/2])\n        union() {\n            // Leg\n            cylinder(h=leg_height, d=leg_width);\n            \n            // Foot\n            translate([0, foot_length/2, -leg_height/2])\n                rotate([0, 20, 0])\n                    union() {\n                        // Main foot\n                        scale([1.5, 1, 0.3])\n                            sphere(d=foot_width);\n                        \n                        // Toes\n                        for(i = [-1:1]) {\n                            translate([i * 3, foot_length/2 + 2, 0])\n                                rotate([0, 0, i * 15])\n                                    scale([0.3, 1, 0.3])\n                                        sphere(d=foot_width * 0.8);\n                        }\n                    }\n        }\n}\n\n// Position the model for printing\nrotate([0, 180, 0])\n    shoveler();",
    "renders": true
  },
  {
    "animal": "shrew",
    "openscad_code": "// Shrew - Realistic medium complexity\n// Body length ~50mm, tail ~25mm, total ~75mm\n\n// Basic parameters\nbody_length = 40;\nbody_height = 12;\nbody_width = 18;\nhead_length = 15;\nhead_width = 12;\nsnout_length = 10;\nleg_length = 8;\ntail_length = 25;\ntail_diameter = 4;\near_size = 3;\neye_size = 2;\nwhisker_length = 8;\nwhisker_diameter = 0.4;\n\nmodule body() {\n    // Main torso - tapered ellipsoid\n    translate([0, 0, body_height/2])\n    scale([1, 0.7, 0.5])\n    sphere(d=body_width, $fn=20);\n    \n    // Chest section\n    translate([-body_length/3, 0, body_height/2-2])\n    scale([0.8, 0.6, 0.4])\n    sphere(d=body_width*0.9, $fn=20);\n}\n\nmodule head() {\n    // Skull\n    translate([body_length/2 + head_length/2, 0, body_height/2+2])\n    scale([1.2, 0.8, 0.7])\n    sphere(d=head_width, $fn=20);\n    \n    // Snout\n    translate([body_length/2 + head_length + snout_length/2, 0, body_height/2])\n    scale([0.3, 0.3, 0.3])\n    sphere(d=snout_length, $fn=20);\n}\n\nmodule ears() {\n    // Left ear\n    translate([body_length/2 + head_length/2 - 2, head_width/2, body_height/2+5])\n    rotate([0, -20, 45])\n    cylinder(h=ear_size, d1=ear_size, d2=ear_size/2, $fn=8);\n    \n    // Right ear\n    translate([body_length/2 + head_length/2 - 2, -head_width/2, body_height/2+5])\n    rotate([0, -20, -45])\n    cylinder(h=ear_size, d1=ear_size, d2=ear_size/2, $fn=8);\n}\n\nmodule eyes() {\n    // Left eye\n    translate([body_length/2 + head_length/2 + 2, head_width/3, body_height/2+3])\n    sphere(d=eye_size, $fn=12);\n    \n    // Right eye\n    translate([body_length/2 + head_length/2 + 2, -head_width/3, body_height/2+3])\n    sphere(d=eye_size, $fn=12);\n}\n\nmodule legs() {\n    // Front left leg\n    translate([body_length/4, body_width/2-2, 0])\n    rotate([0, 10, 0])\n    cylinder(h=leg_length, d=3, $fn=12);\n    \n    // Front right leg\n    translate([body_length/4, -body_width/2+2, 0])\n    rotate([0, 10, 0])\n    cylinder(h=leg_length, d=3, $fn=12);\n    \n    // Rear left leg\n    translate([-body_length/3, body_width/2-2, 0])\n    rotate([0, -10, 0])\n    cylinder(h=leg_length, d=3.5, $fn=12);\n    \n    // Rear right leg\n    translate([-body_length/3, -body_width/2+2, 0])\n    rotate([0, -10, 0])\n    cylinder(h=leg_length, d=3.5, $fn=12);\n}\n\nmodule tail() {\n    // Tail with taper\n    translate([-body_length/2 - tail_length/2, 0, 2])\n    rotate([0, 5, 0])\n    cylinder(h=tail_length, d1=tail_diameter, d2=tail_diameter/2, $fn=12);\n}\n\nmodule whiskers() {\n    // Left whiskers\n    for(i=[-2:1:2]) {\n        translate([body_length/2 + head_length + snout_length, head_width/3, body_height/2+i])\n        rotate([0, 90-i*10, 0])\n        cylinder(h=whisker_length, d=whisker_diameter, $fn=6);\n    }\n    \n    // Right whiskers\n    for(i=[-2:1:2]) {\n        translate([body_length/2 + head_length + snout_length, -head_width/3, body_height/2+i])\n        rotate([0, 90+i*10, 180])\n        cylinder(h=whisker_length, d=whisker_diameter, $fn=6);\n    }\n}\n\nmodule shrew() {\n    union() {\n        body();\n        head();\n        ears();\n        eyes();\n        legs();\n        tail();\n        whiskers();\n    }\n}\n\n// Generate the shrew\nshrew();",
    "renders": true
  },
  {
    "animal": "shrimp",
    "openscad_code": "// Shrimp model for 3D printing - realistic style, medium complexity\n// Uses only basic OpenSCAD primitives and operations\n\n// Overall dimensions approximately 80mm long, 25mm tall\n\n$fn = 32; // Smooth curves for 3D printing\n\nmodule shrimp_body() {\n    // Main body segments\n    union() {\n        // Head (cephalothorax)\n        translate([0, 0, 8])\n            scale([1, 0.8, 0.6])\n                sphere(r=8);\n        \n        // Thorax segments\n        for(i = [1:5]) {\n            translate([i*5, 0, 8 - i*1.2])\n                scale([1 - i*0.08, 1 - i*0.05, 1 - i*0.1])\n                    sphere(r=7 - i*0.5);\n        }\n        \n        // Abdomen segments\n        for(i = [0:5]) {\n            translate([30 + i*4.5, 0, 5 - i*1.5])\n                scale([1 - i*0.15, 1 - i*0.1, 1 - i*0.12])\n                    sphere(r=5 - i*0.4);\n        }\n    }\n}\n\nmodule shrimp_tail() {\n    // Tail fan (telson and uropods)\n    translate([55, 0, 0])\n        union() {\n            // Telson (central tail)\n            rotate([0, -15, 0])\n                scale([1.5, 1, 0.3])\n                    sphere(r=6);\n            \n            // Uropods (side tail fins)\n            translate([0, 6, 0])\n                rotate([0, 0, 30])\n                    scale([1.2, 0.7, 0.2])\n                        sphere(r=5);\n            \n            translate([0, -6, 0])\n                rotate([0, 0, -30])\n                    scale([1.2, 0.7, 0.2])\n                        sphere(r=5);\n        }\n}\n\nmodule shrimp_legs() {\n    // Walking legs (pereiopods)\n    for(side = [-1, 1]) {\n        for(i = [0:4]) {\n            translate([10 + i*6, side*6, 4])\n                rotate([0, 0, side*45 - i*5])\n                    union() {\n                        // Coxa segment\n                        cylinder(h=3, r1=1.5, r2=1.2);\n                        translate([0, 0, 3])\n                            rotate([side*30, 0, 0])\n                                cylinder(h=4, r1=1.2, r2=0.8);\n                        translate([0, side*2, 5])\n                            rotate([side*60, 0, 0])\n                                cylinder(h=3, r1=0.8, r2=0.5);\n                    }\n        }\n    }\n}\n\nmodule shrimp_antennae() {\n    // First antennae (antennules)\n    translate([0, 2, 15])\n        rotate([0, -30, 45])\n            cylinder(h=15, r1=1, r2=0.3);\n    \n    translate([0, -2, 15])\n        rotate([0, -30, -45])\n            cylinder(h=15, r1=1, r2=0.3);\n    \n    // Second antennae (longer)\n    translate([0, 3, 15])\n        rotate([0, -45, 30])\n            cylinder(h=20, r1=1.2, r2=0.4);\n    \n    translate([0, -3, 15])\n        rotate([0, -45, -30])\n            cylinder(h=20, r1=1.2, r2=0.4);\n}\n\nmodule shrimp_rostrum() {\n    // Pointed beak/head extension\n    translate([-8, 0, 12])\n        rotate([0, -25, 0])\n            scale([2, 0.8, 0.8])\n                cylinder(h=10, r1=3, r2=0.5);\n}\n\nmodule shrimp_swimmerets() {\n    // Small swimming legs (pleopods)\n    for(i = [0:3]) {\n        translate([35 + i*5, 0, 2])\n            rotate([0, 0, 90])\n                union() {\n                    cylinder(h=0.8, r=2.5);\n                    for(side = [-1, 1]) {\n                        translate([0, side*1.5, 0])\n                            scale([0.3, 1.2, 0.3])\n                                sphere(r=1);\n                    }\n                }\n    }\n}\n\nmodule shrimp_eyes() {\n    // Compound eyes on stalks\n    for(side = [-1, 1]) {\n        translate([side*3, 4, 15])\n            rotate([0, 20, 0])\n                union() {\n                    cylinder(h=3, r1=1.5, r2=1.5);\n                    translate([0, 0, 3.5])\n                        sphere(r=2);\n                }\n    }\n}\n\n// Assemble the complete shrimp\nunion() {\n    shrimp_body();\n    shrimp_tail();\n    shrimp_legs();\n    shrimp_antennae();\n    shrimp_rostrum();\n    shrimp_swimmerets();\n    shrimp_eyes();\n}\n\n// Add a flat base for stable 3D printing\ntranslate([-10, -12, -2])\n    cube([75, 24, 2]);",
    "renders": true
  },
  {
    "animal": "siamang",
    "openscad_code": "// Siamang Medium-Complexity Model (~75 mm tall)\n// Basic primitives only, 3D-printable, no overhangs > 45°\n\n// Parameters\n$fn = 36;\n\nmodule siamang() {\n    // Main body\n    union() {\n        // Torso\n        translate([0, 0, 30])\n            scale([1, 0.7, 1.2])\n            sphere(12);\n\n        // Abdomen\n        translate([0, 0, 18])\n            scale([0.8, 0.6, 0.9])\n            sphere(10);\n\n        // Head\n        translate([0, 0, 50])\n            union() {\n                // Skull\n                scale([0.9, 0.8, 1.1])\n                sphere(10);\n\n                // Muzzle\n                translate([0, -7, -3])\n                    scale([0.6, 0.9, 0.5])\n                    sphere(6);\n\n                // Nostrils\n                difference() {\n                    translate([0, -9.5, -2])\n                        sphere(2);\n                    translate([0, -10.5, -1])\n                        sphere(1.5);\n                }\n\n                // Eyes\n                for (x = [-3.5, 3.5])\n                    translate([x, -5, 2])\n                        sphere(1.5);\n\n                // Ear (left)\n                translate([-8, 0, 4])\n                    rotate([0, 0, -30])\n                    scale([0.4, 1.5, 0.8])\n                    sphere(3);\n                mirror([1, 0, 0])\n                    translate([-8, 0, 4])\n                    rotate([0, 0, -30])\n                    scale([0.4, 1.5, 0.8])\n                    sphere(3);\n            }\n\n        // Arms\n        for (side = [-1, 1]) {\n            // Upper arm\n            translate([side * 12, 0, 40])\n                rotate([0, side * 20, 0])\n                cylinder(h = 20, r1 = 4, r2 = 3);\n\n            // Forearm\n            translate([side * 26, 0, 30])\n                rotate([0, side * 45, 0])\n                cylinder(h = 18, r1 = 3, r2 = 2.5);\n\n            // Hand\n            translate([side * 39, 0, 22])\n                rotate([0, side * 60, 0])\n                scale([1, 0.6, 0.3])\n                sphere(4);\n        }\n\n        // Legs\n        for (side = [-1, 1]) {\n            // Thigh\n            translate([side * 6, 0, 15])\n                rotate([0, side * 10, 0])\n                cylinder(h = 20, r1 = 5, r2 = 4);\n\n            // Shin\n            translate([side * 8, 0, 0])\n                rotate([0, side * 15, 0])\n                cylinder(h = 18, r1 = 4, r2 = 3);\n\n            // Foot\n            translate([side * 10, 0, -12])\n                rotate([0, 0, side * 15])\n                scale([1.2, 0.6, 0.4])\n                sphere(5);\n        }\n\n        // Throat sac (minimal for printability)\n        difference() {\n            translate([0, 0, 35])\n                scale([1.2, 0.8, 1.3])\n                sphere(8);\n            translate([0, 0, 35])\n                scale([0.8, 0.6, 1.2])\n                sphere(7);\n        }\n    }\n}\n\n// Main assembly\nsiamang();",
    "renders": true
  },
  {
    "animal": "siamese",
    "openscad_code": "// Realistic Medium-Complexity Siamese Cat\n// Overall height ~70 mm, sitting pose, optimized for FDM\n\n// Parameters\nbody_len = 40;\nbody_wid = 25;\nbody_h   = 35;\nhead_r   = 15;\near_len  = 12;\near_wid  = 7;\ntail_len = 50;\ntail_rad = 5;\nleg_len  = 18;\nleg_rad  = 5;\npaw_rad  = 6;\n\n// Colors for preview\n$fa = 1;\n$fs = 0.4;\n\n// Main assembly\nunion() {\n    body();\n    head();\n    tail();\n    legs();\n}\n\nmodule body() {\n    // Core torso\n    difference() {\n        scale([1, 0.9, 1])\n            sphere(d = body_len);\n        // Undercut for sitting\n        translate([0, 0, -body_h/2])\n            cube([body_len*2, body_wid*2, body_h], center = true);\n    }\n\n    // Chest bulge\n    translate([body_len/2-5, 0, -5])\n        sphere(d = 20);\n}\n\nmodule head() {\n    // Skull\n    translate([body_len/2+head_r-5, 0, 10])\n        sphere(d = head_r*2);\n\n    // Snout\n    translate([body_len/2+head_r+5, 0, 5])\n        scale([1.3,0.9,0.7])\n            sphere(d = 12);\n\n    // Ears\n    for(side = [-1, 1])\n        translate([body_len/2+head_r-3, side*10, 20])\n            rotate([0, 0, side*10])\n                ear();\n\n    // Eyes\n    for(side = [-1, 1])\n        translate([body_len/2+head_r+8, side*5, 10])\n            sphere(d = 3);\n\n    // Nose\n    translate([body_len/2+head_r+12, 0, 7])\n        sphere(d = 2.5);\n}\n\nmodule ear() {\n    difference() {\n        // Outer ear cone\n        cylinder(h = ear_len, r1 = ear_wid, r2 = 2, center = false);\n        // Inner ear cavity\n        translate([0,0,2])\n            cylinder(h = ear_len-2, r1 = ear_wid-3, r2 = 1, center = false);\n    }\n}\n\nmodule tail() {\n    // S-curved tail resting on build plate\n    for(i = [0:5:tail_len]) {\n        hull() {\n            translate([sin(i*4)*10 - 15, cos(i*4)*10, i*0.8])\n                sphere(r = tail_rad*(1-i/tail_len*0.3));\n            translate([sin((i+5)*4)*10 - 15, cos((i+5)*4)*10, (i+5)*0.8])\n                sphere(r = tail_rad*(1-(i+5)/tail_len*0.3));\n        }\n    }\n}\n\nmodule legs() {\n    // Front legs\n    for(side = [-1, 1])\n        translate([body_len/4, side*(body_wid/2+leg_rad-2), -body_h/2+2])\n            rotate([90, 0, 0])\n                union() {\n                    cylinder(h = leg_len, r = leg_rad);\n                    translate([0,0,leg_len])\n                        sphere(r = paw_rad);\n                }\n\n    // Rear legs tucked under\n    for(side = [-1, 1])\n        translate([-body_len/4, side*(body_wid/2-5), -body_h/2+2])\n            rotate([100, 0, side*30])\n                union() {\n                    cylinder(h = leg_len*0.8, r = leg_rad*0.9);\n                    translate([0,0,leg_len*0.8])\n                        sphere(r = paw_rad*0.9);\n                }\n}",
    "renders": true
  },
  {
    "animal": "sifaka",
    "openscad_code": "$fa = 0.5;\n$fs = 0.5;\n\nmodule tail_segment(r, h, taper=0.9) {\n    cylinder(r1=r, r2=r*taper, h=h, $fn=16);\n}\n\nmodule tail(total_len=40, base_r=4) {\n    union() {\n        for (i=[0:9]) {\n            translate([0,0,i*4]) \n                tail_segment(base_r*pow(0.8,i), 4);\n        }\n    }\n}\n\nmodule torso() {\n    difference() {\n        union() {\n            // main torso\n            translate([0,0,0])\n                scale([1,0.7,1.2])\n                sphere(15, $fn=32);\n            // chest bulge\n            translate([15,0,-5])\n                scale([1.2,0.8,1])\n                sphere(12, $fn=32);\n        }\n        // hollow\n        translate([0,0,0])\n            scale([0.7,0.5,0.9])\n            sphere(14.5, $fn=32);\n    }\n}\n\nmodule limb(is_leg=false) {\n    len = is_leg ? 25 : 30;\n    thick = is_leg ? 5 : 3;\n    difference() {\n        union() {\n            // upper\n            translate([0,0,0])\n                rotate([90,0,0])\n                cylinder(r=thick, h=len/2, $fn=16);\n            // lower\n            translate([0,0,len/2])\n                rotate([100,0,0])\n                cylinder(r=thick*0.8, h=len/2, $fn=16);\n        }\n        // hollow\n        translate([0,0,2])\n            rotate([90,0,0])\n            cylinder(r=thick-2, h=len-2, $fn=16);\n    }\n}\n\nmodule head() {\n    difference() {\n        union() {\n            // skull\n            translate([0,0,0])\n                scale([0.8,0.7,1])\n                sphere(10, $fn=32);\n            // muzzle\n            translate([8,0,-2])\n                scale([1.2,0.7,0.6])\n                sphere(6, $fn=32);\n        }\n        // eye sockets\n        translate([5,5,3]) sphere(2.5, $fn=16);\n        translate([5,-5,3]) sphere(2.5, $fn=16);\n    }\n    // ears\n    translate([-2,7,6]) rotate([0,20,0]) scale([0.5,1,2]) sphere(3, $fn=16);\n    translate([-2,-7,6]) rotate([0,-20,0]) scale([0.5,1,2]) sphere(3, $fn=16);\n}\n\nmodule foot(is_leg=false) {\n    w = is_leg ? 6 : 4;\n    l = is_leg ? 8 : 6;\n    h = 3;\n    difference() {\n        translate([0,0,h/2])\n            cube([l,w,h], center=true);\n        translate([0,0,h/2+1])\n            cube([l-2,w-2,h], center=true);\n    }\n}\n\nmodule sifaka() {\n    // torso\n    color(\"white\") torso();\n    \n    // head\n    translate([22,0,15]) color(\"white\") head();\n    \n    // arms\n    translate([10,10,5]) rotate([0,0,30]) color(\"white\") {\n        limb();\n        translate([0,0,30]) rotate([0,0,-20]) foot(false);\n    }\n    translate([10,-10,5]) rotate([0,0,-30]) color(\"white\") {\n        limb();\n        translate([0,0,30]) rotate([0,0,20]) foot(false);\n    }\n    \n    // legs\n    translate([-5,7,-10]) rotate([0,0,20]) color(\"white\") {\n        limb(true);\n        translate([0,0,25]) rotate([0,0,-10]) foot(true);\n    }\n    translate([-5,-7,-10]) rotate([0,0,-20]) color(\"white\") {\n        limb(true);\n        translate([0,0,25]) rotate([0,0,10]) foot(true);\n    }\n    \n    // tail\n    translate([-15,0,0]) rotate([0,20,0]) color(\"white\") tail();\n}\n\n// scale to 80mm height\nscale(0.8) sifaka();",
    "renders": true
  },
  {
    "animal": "skate",
    "openscad_code": "// Realistic Skate - Medium complexity\n// Overall length ~85 mm, suitable for 3D printing\n\n$fn = 36;  // Smooth curves\n\n// Main assembly\nmodule skate() {\n    union() {\n        blade_assembly();\n        boot();\n        laces();\n    }\n}\n\n// Blade and holder\nmodule blade_assembly() {\n    translate([0, 0, 6]) {\n        // Blade holder - left side\n        translate([-4, 0, 0])\n            blade_holder();\n        \n        // Blade holder - right side (mirrored)\n        translate([4, 0, 0])\n            mirror([1, 0, 0])\n                blade_holder();\n        \n        // Metal blade\n        translate([0, 0, -2])\n            blade();\n    }\n}\n\nmodule blade_holder() {\n    // Main holder body\n    difference() {\n        union() {\n            // Front post\n            translate([0, 35, 0])\n                cylinder(h = 12, d1 = 6, d2 = 4);\n            \n            // Rear post\n            translate([0, -35, 0])\n                cylinder(h = 12, d1 = 6, d2 = 4);\n            \n            // Connecting bridge\n            hull() {\n                translate([0, 35, 8])\n                    sphere(d = 4);\n                translate([0, -35, 8])\n                    sphere(d = 4);\n            }\n        }\n        \n        // Hollow out for weight reduction\n        for (i = [-1, 1]) {\n            translate([i * 1.5, 20, 6])\n                cylinder(h = 10, d = 2, $fn = 6);\n            translate([i * 1.5, -20, 6])\n                cylinder(h = 10, d = 2, $fn = 6);\n        }\n    }\n}\n\nmodule blade() {\n    // Tapered blade profile\n    linear_extrude(height = 1.5, scale = [0.9, 1])\n        polygon(points = [\n            [-2, 42],\n            [2, 42],\n            [1.5, 0],\n            [-1.5, 0],\n            [-2, -42],\n            [2, -42]\n        ]);\n}\n\n// Boot construction\nmodule boot() {\n    union() {\n        // Sole\n        sole();\n        \n        // Upper boot\n        upper();\n        \n        // Heel reinforcement\n        heel();\n    }\n}\n\nmodule sole() {\n    difference() {\n        // Main sole\n        translate([0, 0, 7.5])\n            cube([22, 80, 5], center = true);\n        \n        // Blade mounting grooves\n        translate([0, 20, 7.5])\n            cube([18, 10, 6], center = true);\n        translate([0, -20, 7.5])\n            cube([18, 10, 6], center = true);\n    }\n}\n\nmodule upper() {\n    // Boot toe\n    translate([0, 35, 13])\n        scale([1, 1.2, 1])\n            sphere(d = 20);\n    \n    // Boot mid section\n    hull() {\n        translate([0, 15, 15])\n            sphere(d = 18);\n        translate([0, -15, 15])\n            sphere(d = 18);\n    }\n    \n    // Boot cuff\n    difference() {\n        // Main cuff\n        translate([0, -30, 22])\n            rotate([15, 0, 0])\n                cylinder(h = 25, d1 = 24, d2 = 20);\n        \n        // Achilles cutout\n        translate([0, -35, 22])\n            rotate([15, 0, 0])\n                cylinder(h = 30, d = 16);\n    }\n}\n\nmodule heel() {\n    // Heel counter for support\n    difference() {\n        translate([0, -28, 15])\n            cube([20, 15, 16], center = true);\n        \n        // Contoured back\n        translate([0, -35, 15])\n            sphere(d = 18);\n    }\n}\n\n// Lacing system\nmodule laces() {\n    // Eyelets\n    for (y = [30:-10:-20]) {\n        for (x = [-7, 7]) {\n            eyelet(x, y);\n        }\n    }\n    \n    // Lace segments\n    for (y = [25:-10:-15]) {\n        lace_segment(y);\n    }\n}\n\nmodule eyelet(x, y) {\n    translate([x, y, 18])\n        difference() {\n            cylinder(h = 3, d = 4);\n            cylinder(h = 4, d = 2);\n        }\n}\n\nmodule lace_segment(y) {\n    hull() {\n        translate([-7, y, 19.5])\n            sphere(d = 1.5);\n        translate([7, y, 19.5])\n            sphere(d = 1.5);\n    }\n}\n\n// Render the skate\nskate();",
    "renders": true
  },
  {
    "animal": "skimmer",
    "openscad_code": "// Realistic-style Pool Skimmer – OpenSCAD\n// Medium complexity, 3D-print friendly, ~90 mm long\n\n$fn = 32;\n\n// Overall size\nskimmer_length = 90;\nskimmer_width  = 38;\nskimmer_height = 30;\nwall_thick     = 2.2;\n\nmodule skimmer_body() {\n    // Main hollow scoop\n    difference() {\n        // Outer rounded box\n        minkowski() {\n            cube([skimmer_length, skimmer_width, skimmer_height], center = true);\n            sphere(3);\n        }\n        // Inner cavity\n        translate([0,0,wall_thick/2])\n        minkowski() {\n            cube([\n                skimmer_length - 2*wall_thick,\n                skimmer_width  - 2*wall_thick,\n                skimmer_height - 1.5*wall_thick\n            ], center = true);\n            sphere(2.5);\n        }\n    }\n\n    // Flatten bottom for stable print\n    translate([0,0,-skimmer_height/2 - 3])\n    cube([skimmer_length + 6, skimmer_width + 6, 6], center = true);\n}\n\nmodule curved_handle() {\n    handle_len = 55;\n    handle_d   = 8;\n    // Simple curved cylinder\n    for (i = [0:10]) {\n        rotate([0, i*3, 0])\n        translate([skimmer_length/2 - 5 + i*4.5, 0, 0])\n        rotate([90,0,0])\n        cylinder(h = 1.5, d = handle_d, center = true);\n    }\n    // End cap\n    translate([skimmer_length/2 + handle_len - 5, 0, 0])\n    rotate([90,0,0])\n    cylinder(h = handle_d, d = handle_d, center = true);\n}\n\nmodule fine_mesh() {\n    // Thin frame inside mouth\n    thickness = 1.8;\n    translate([-skimmer_length/2 + thickness/2, 0, 0])\n    cube([thickness, skimmer_width - 2*wall_thick, skimmer_height - 2*wall_thick], center = true);\n\n    // Simple grid of bars\n    bar_width = 2;\n    bar_gap   = 4;\n    num_bars  = floor((skimmer_height - 2*wall_thick) / (bar_width + bar_gap));\n    for (i = [-num_bars/2 : num_bars/2]) {\n        translate([-skimmer_length/2 + thickness/2,\n                   0,\n                   i*(bar_width + bar_gap)])\n        cube([thickness, skimmer_width - 2*wall_thick - 4, bar_width], center = true);\n    }\n}\n\nmodule mounting_hook() {\n    hook_w = 12;\n    hook_h = 9;\n    translate([skimmer_length/2 + 5, 0, skimmer_height/2 - 2])\n    rotate([0,90,0])\n    difference() {\n        cylinder(h = hook_w, d = hook_h, center = true);\n        translate([0,0,-hook_w/2 - 1])\n        cube([hook_h + 2, hook_h + 2, hook_w + 2], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    skimmer_body();\n    curved_handle();\n    fine_mesh();\n    mounting_hook();\n}",
    "renders": true
  },
  {
    "animal": "skink",
    "openscad_code": "// Skink lizard - medium complexity realistic style\n// Overall length ~80mm, height ~15mm\n\n$fn = 32;\n\n// Main body module\nmodule skink_body() {\n    // Torso - elongated oval\n    translate([0, 0, 5]) \n        scale([1, 0.6, 0.4])\n        sphere(r=15);\n    \n    // Neck transition\n    translate([-20, 0, 6])\n        scale([0.8, 0.5, 0.5])\n        sphere(r=8);\n    \n    // Head\n    translate([-35, 0, 7])\n        scale([1.2, 0.7, 0.6])\n        sphere(r=10);\n}\n\n// Tail segments - tapering cylinders\nmodule tail() {\n    for(i=[0:4]) {\n        hull() {\n            translate([15 + i*12, 0, 5 - i*0.5])\n                scale([1 - i*0.15, 1 - i*0.15, 1 - i*0.15])\n                cylinder(h=2, r=12 - i*2);\n                \n            translate([20 + i*12, 0, 5 - i*0.5])\n                scale([1 - (i+1)*0.15, 1 - (i+1)*0.15, 1 - (i+1)*0.15])\n                cylinder(h=2, r=12 - (i+1)*2);\n        }\n    }\n}\n\n// Leg module - creates one leg with toes\nmodule leg(position, angle, scale_factor) {\n    translate(position)\n    rotate([0, 0, angle])\n    scale([scale_factor, scale_factor, scale_factor]) {\n        \n        // Upper leg\n        translate([0, -3, 0])\n            rotate([90, 0, 0])\n            cylinder(h=8, r=3);\n        \n        // Lower leg\n        translate([0, -6, -5])\n            rotate([90, 0, 0])\n            cylinder(h=6, r=2.5);\n        \n        // Foot\n        translate([0, -8, -9])\n            rotate([0, 90, 0])\n            scale([1.5, 1, 0.5])\n            cube([6, 4, 2]);\n        \n        // Toes - small cylinders\n        for(t=[-1:1]) {\n            translate([t*1.5, -10, -9])\n                rotate([0, 90, 0])\n                cylinder(h=3, r=0.8);\n        }\n    }\n}\n\n// Eye module\nmodule eye(position) {\n    translate(position) {\n        difference() {\n            sphere(r=2);\n            translate([1, 0, 0])\n                sphere(r=1.9);\n        }\n    }\n}\n\n// Scale pattern on back\nmodule scales() {\n    for(x=[-25:5:25]) {\n        for(y=[-8:4:8]) {\n            if(x*x + y*y < 200) {\n                translate([x, y, 10])\n                    scale([1, 0.8, 0.3])\n                    sphere(r=1.5);\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Body parts\n    skink_body();\n    tail();\n    \n    // Legs - front\n    leg([-20, 10, 0], -30, 1);\n    leg([-20, -10, 0], 30, 1);\n    \n    // Legs - middle\n    leg([-5, 12, 0], -45, 0.9);\n    leg([-5, -12, 0], 45, 0.9);\n    \n    // Legs - rear\n    leg([10, 10, 0], -60, 0.8);\n    leg([10, -10, 0], 60, 0.8);\n    \n    // Eyes\n    eye([-42, 4, 10]);\n    eye([-42, -4, 10]);\n    \n    // Nostrils\n    translate([-45, 2, 8])\n        sphere(r=1);\n    translate([-45, -2, 8])\n        sphere(r=1);\n    \n    // Ear openings\n    translate([-38, 7, 9])\n        rotate([0, 90, 0])\n        cylinder(h=2, r=1.5);\n    translate([-38, -7, 9])\n        rotate([0, 90, 0])\n        cylinder(h=2, r=1.5);\n    \n    // Back scales\n    scales();\n}\n\n// Base for stability\ntranslate([0, 0, -1])\n    cube([80, 30, 2], center=true);",
    "renders": true
  },
  {
    "animal": "skipper",
    "openscad_code": "// Skipper (butterfly larva) – OpenSCAD, realistic medium-complexity\n// Overall length ≈ 80 mm, printable without support\n\n// Basic parameters\nbody_d = 12;            // body diameter\nbody_l = 60;            // body length\nhead_d = 10;            // head diameter\nneck_d = 6;             // neck diameter\nleg_l = 8;              // proleg length\nleg_d = 2.2;            // proleg diameter\nwall_t = 1.2;           // wall thickness for hollow parts\nseg_cnt = 8;            // body segments\n$fn = 36;\n\n// Colors for preview\ncolor_body = \"#2E7D32\";\ncolor_head = \"#4CAF50\";\n\nmodule skipper() {\n    color(color_body) {\n        union() {\n            // Head\n            translate([body_l/2 + head_d/2, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(d1 = head_d, d2 = head_d*0.9, h = head_d*1.1);\n\n            // Neck\n            translate([body_l/2 - 2, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(d = neck_d, h = 6);\n\n            // Body segments\n            for (i = [0:seg_cnt-1]) {\n                seg_l = body_l / seg_cnt;\n                seg_pos = -body_l/2 + i*seg_l + seg_l/2;\n                factor = 1 - 0.1*i;\n                hull() {\n                    translate([seg_pos - seg_l*0.3, 0, 0])\n                        sphere(d = body_d * factor);\n                    translate([seg_pos + seg_l*0.3, 0, 0])\n                        sphere(d = body_d * factor * 0.9);\n                }\n            }\n\n            // Prolegs (true legs under thorax + prolegs on abdomen)\n            for (pos = [-body_l/2 + 6, -body_l/2 + 18, -body_l/2 + 34, -body_l/2 + 46]) {\n                for (side = [-1, 1]) {\n                    translate([pos, side*body_d/2 - 0.5, -leg_l/2])\n                        rotate([90, 0, side*10])\n                            cylinder(d = leg_d, h = leg_l);\n                }\n            }\n\n            // Spiracles\n            for (i = [1:3]) {\n                spir_pos = -body_l/2 + 15*i;\n                translate([spir_pos, body_d/2 - 0.5, 0])\n                    sphere(d = 1.5);\n                translate([spir_pos, -body_d/2 + 0.5, 0])\n                    sphere(d = 1.5);\n            }\n\n            // Tail claspers\n            translate([-body_l/2 - 4, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(d1 = 6, d2 = 4, h = 8);\n        }\n    }\n\n    // Simple mandibles\n    color(color_head) {\n        translate([body_l/2 + head_d/2 + 2, 3, 0])\n            rotate([0, 90, 0])\n                cylinder(d = 2.5, h = 3);\n        translate([body_l/2 + head_d/2 + 2, -3, 0])\n            rotate([0, 90, 0])\n                cylinder(d = 2.5, h = 3);\n    }\n}\n\n// Hollow body for filament saving\ndifference() {\n    skipper();\n    // Inner cavity\n    translate([0, 0, -2])\n        scale([0.8, 0.8, 0.8])\n            skipper();\n}\n\n// Lay flat on bed\nrotate([0, -90, 0])\n    translate([0, 0, body_d/2])\n        children();",
    "renders": true
  },
  {
    "animal": "skua",
    "openscad_code": "// Skua - Medium complexity realistic model\n// Wingspan ~70mm, length ~60mm\n\n$fn = 30;  // Smooth curves for 3D printing\nbody_length = 40;\nbody_height = 15;\nwing_span = 70;\ntail_length = 15;\n\nmodule skua_body() {\n    // Main body - elongated ellipsoid\n    translate([0, 0, body_height/2])\n        scale([1.2, 0.7, 0.6])\n        sphere(d=body_height);\n    \n    // Neck transition\n    translate([body_length/2 - 5, 0, body_height/2 + 3])\n        scale([0.6, 0.5, 0.5])\n        sphere(d=body_height/1.5);\n    \n    // Head\n    translate([body_length/2 + 5, 0, body_height/2 + 5])\n        scale([0.8, 0.7, 0.9])\n        sphere(d=body_height/1.5);\n}\n\nmodule beak() {\n    // Upper beak - curved hook\n    translate([body_length/2 + 12, 0, body_height/2 + 7])\n        rotate([0, -20, 0])\n        cylinder(h=8, d1=4, d2=1.5);\n    \n    // Lower beak\n    translate([body_length/2 + 12, 0, body_height/2 + 4])\n        rotate([0, 15, 0])\n        cylinder(h=6, d1=3, d2=1);\n}\n\nmodule wing() {\n    // Main wing shape\n    translate([0, 0, 0])\n    union() {\n        // Central wing section\n        translate([-5, 0, body_height/2 + 2])\n            rotate([0, 0, 15])\n            scale([1, 0.2, 0.05])\n            sphere(d=wing_span/2);\n        \n        // Wing tip\n        translate([wing_span/4, wing_span/4 - 5, body_height/2 + 2])\n            rotate([0, 0, 30])\n            scale([0.6, 0.15, 0.05])\n            sphere(d=wing_span/3);\n        \n        // Wing feathers\n        for(i = [0:3]) {\n            translate([5 + i*3, wing_span/4 - 8 + i*2, body_height/2 + 1.5])\n                rotate([0, 0, 45 - i*10])\n                scale([0.8, 0.1, 0.03])\n                cube([5, 2, 0.5]);\n        }\n    }\n}\n\nmodule tail() {\n    // Tail fan\n    translate([-body_length/2 - 5, 0, body_height/2 - 1])\n    union() {\n        // Central tail\n        rotate([0, 0, 0])\n        scale([1, 0.3, 0.05])\n        sphere(d=tail_length);\n        \n        // Tail feathers\n        for(i = [-1:1]) {\n            translate([-3, i*5, 0])\n                rotate([0, 0, i*20])\n                scale([1, 0.2, 0.05])\n                cylinder(h=tail_length - 2, d1=6, d2=3);\n        }\n    }\n}\n\nmodule legs() {\n    // Left leg\n    translate([body_length/4 - 5, 5, 0])\n    union() {\n        // Thigh\n        cylinder(h=5, d=2);\n        // Lower leg\n        translate([0, 0, -5])\n            rotate([15, 0, 0])\n            cylinder(h=6, d=1.5);\n        // Webbed foot\n        translate([0, 2, -8])\n            rotate([0, 90, 0])\n            scale([1, 0.3, 1])\n            cylinder(h=4, d=3);\n    }\n    \n    // Right leg (mirrored)\n    mirror([0, 1, 0])\n    translate([body_length/4 - 5, 5, 0])\n    union() {\n        cylinder(h=5, d=2);\n        translate([0, 0, -5])\n            rotate([15, 0, 0])\n            cylinder(h=6, d=1.5);\n        translate([0, 2, -8])\n            rotate([0, 90, 0])\n            scale([1, 0.3, 1])\n            cylinder(h=4, d=3);\n    }\n}\n\nmodule eyes() {\n    // Left eye\n    translate([body_length/2 + 6, body_height/4, body_height/2 + 6])\n        sphere(d=1.5);\n    \n    // Right eye\n    translate([body_length/2 + 6, -body_height/4, body_height/2 + 6])\n        sphere(d=1.5);\n}\n\n// Assemble the skua\nunion() {\n    skua_body();\n    beak();\n    \n    // Left wing\n    translate([0, body_height/2 + 3, 0])\n        wing();\n    \n    // Right wing\n    mirror([0, 1, 0])\n    translate([0, body_height/2 + 3, 0])\n        wing();\n    \n    tail();\n    legs();\n    \n    // Add eyes in darker color\n    color(\"black\") eyes();\n}",
    "renders": true
  },
  {
    "animal": "skunk",
    "openscad_code": "// Realistic Skunk - Medium Complexity\n// Designed for 3D printing (no overhangs >45°)\n\n$fn = 32;  // Smooth curves for 3D printing\n\n// Main body dimensions\nskunk_length = 60;\nskunk_height = 25;\nskunk_width = 30;\n\nmodule skunk_body() {\n    // Main torso - elongated ellipsoid\n    scale([1.5, 1, 0.8])\n        sphere(d = skunk_width);\n    \n    // Rump extension\n    translate([-skunk_length/2 + 5, 0, -5])\n        scale([1.2, 1, 0.6])\n            sphere(d = skunk_width);\n}\n\nmodule head() {\n    // Skull shape\n    translate([skunk_length/2 - 10, 0, skunk_height/2 - 5])\n        rotate([0, -10, 0])\n        scale([0.9, 1, 1.1])\n            sphere(d = 20);\n    \n    // Snout extension\n    translate([skunk_length/2 + 5, 0, skunk_height/2 - 8])\n        rotate([0, -20, 0])\n        scale([1.5, 0.8, 0.7])\n            sphere(d = 12);\n}\n\nmodule stripe_pattern() {\n    // White dorsal stripe\n    for (i = [-20:5:20]) {\n        translate([i, 0, skunk_height/2 - 2])\n            rotate([0, 90, 0])\n                cylinder(h = 10, d1 = 8, d2 = 6, center = true);\n    }\n}\n\nmodule legs() {\n    // Front legs (4 legs total)\n    for (side = [-1, 1]) {\n        // Front\n        translate([skunk_length/2 - 15, side * (skunk_width/2 - 5), -skunk_height/2])\n            rotate([10, 0, 0])\n                cylinder(h = 15, d1 = 6, d2 = 4);\n        \n        // Back\n        translate([-skunk_length/2 + 10, side * (skunk_width/2 - 5), -skunk_height/2])\n            rotate([10, 0, 0])\n                cylinder(h = 15, d1 = 6, d2 = 4);\n    }\n}\n\nmodule tail() {\n    // Bushy tail - curved cylinder segments\n    for (i = [0:15:75]) {\n        rotate([0, i/2, 0])\n            translate([-skunk_length/2 - 15 + i/2, 0, -5 + sin(i)*5])\n                rotate([90, 0, 0])\n                    cylinder(h = 12, d1 = 12 - i/10, d2 = 10 - i/10);\n    }\n}\n\nmodule ears() {\n    // Triangular ears\n    for (side = [-1, 1]) {\n        translate([skunk_length/2 - 5, side * 8, skunk_height/2 + 5])\n            rotate([0, -20, side * 30])\n                scale([1, 0.5, 1.5])\n                    cylinder(h = 8, d1 = 8, d2 = 0);\n    }\n}\n\nmodule eyes() {\n    // Eyes as spheres (printable as indentations)\n    for (side = [-1, 1]) {\n        translate([skunk_length/2 + 2, side * 6, skunk_height/2 - 3])\n            sphere(d = 3);\n    }\n}\n\nmodule nose() {\n    // Triangular nose\n    translate([skunk_length/2 + 8, 0, skunk_height/2 - 6])\n        rotate([90, 0, 0])\n            cylinder(h = 4, d1 = 5, d2 = 0);\n}\n\n// Assemble the skunk\nunion() {\n    // Main body parts\n    skunk_body();\n    head();\n    tail();\n    \n    // Appendages\n    legs();\n    ears();\n    \n    // Features\n    eyes();\n    nose();\n    \n    // Stripe pattern (subtractive)\n    difference() {\n        children();\n        color(\"white\") stripe_pattern();\n    }\n}",
    "renders": true
  },
  {
    "animal": "sloth",
    "openscad_code": "// Sloth model - medium complexity, realistic style\n// Dimensions approximately 80mm long, 40mm wide, 30mm tall\n\nmodule sloth_body() {\n    // Main torso - elongated ellipsoid\n    scale([1.2, 0.8, 0.6])\n    sphere(r=20, $fn=32);\n}\n\nmodule sloth_head() {\n    // Head - slightly flattened sphere\n    translate([25, 0, 5])\n    scale([0.8, 1, 0.7])\n    sphere(r=15, $fn=32);\n    \n    // Snout extension\n    translate([33, 0, -2])\n    scale([0.6, 0.8, 0.5])\n    sphere(r=8, $fn=24);\n}\n\nmodule sloth_eye() {\n    // Eye socket\n    difference() {\n        sphere(r=4, $fn=16);\n        translate([1, 0, 0])\n        sphere(r=3.5, $fn=16);\n    }\n    \n    // Eyeball\n    translate([1.5, 0, 0])\n    sphere(r=2, $fn=12);\n}\n\nmodule sloth_ears() {\n    // Left ear\n    translate([20, 12, 8])\n    rotate([0, 10, -20])\n    scale([0.5, 1, 0.8])\n    cylinder(h=8, r1=5, r2=3, $fn=12);\n    \n    // Right ear\n    translate([20, -12, 8])\n    rotate([0, 10, 20])\n    scale([0.5, 1, 0.8])\n    cylinder(h=8, r1=5, r2=3, $fn=12);\n}\n\nmodule sloth_nose() {\n    // Nostrils\n    translate([36, 2, -2])\n    rotate([90, 0, 0])\n    cylinder(h=2, r=1, $fn=8);\n    \n    translate([36, -2, -2])\n    rotate([90, 0, 0])\n    cylinder(h=2, r=1, $fn=8);\n}\n\nmodule sloth_arm(side) {\n    // Upper arm\n    translate([10, side*15, 0])\n    rotate([0, 0, side*20])\n    cylinder(h=20, r=5, $fn=12);\n    \n    // Lower arm\n    translate([10+side*7, side*28, -5])\n    rotate([0, 0, side*40])\n    cylinder(h=25, r=4, $fn=12);\n    \n    // Hand/claws\n    for(i=[-2:2]) {\n        translate([10+side*15+i*2, side*35, -10])\n        rotate([side*20, 0, 0])\n        cylinder(h=8, r1=2, r2=0.5, $fn=8);\n    }\n}\n\nmodule sloth_leg(side) {\n    // Upper leg\n    translate([-15, side*10, -5])\n    rotate([0, 0, side*10])\n    cylinder(h=15, r=6, $fn=12);\n    \n    // Lower leg\n    translate([-20, side*15, -15])\n    rotate([0, 0, side*20])\n    cylinder(h=20, r=5, $fn=12);\n    \n    // Foot\n    translate([-25, side*20, -20])\n    rotate([90, 0, side*30])\n    scale([1.2, 0.8, 0.5])\n    sphere(r=6, $fn=16);\n}\n\nmodule sloth_fur_texture() {\n    // Simple fur texture using small cylinders\n    for(i=[0:10:360]) {\n        for(j=[0:15:60]) {\n            rotate([i, j, 0])\n            translate([0, 0, 20])\n            cylinder(h=2, r=0.5, $fn=6);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Body parts\n    sloth_body();\n    sloth_head();\n    sloth_ears();\n    \n    // Facial features\n    translate([27, 5, 8]) sloth_eye();\n    translate([27, -5, 8]) mirror([0,1,0]) sloth_eye();\n    sloth_nose();\n    \n    // Limbs\n    sloth_arm(1);  // Left arm\n    sloth_arm(-1); // Right arm\n    sloth_leg(1);  // Left leg\n    sloth_leg(-1); // Right leg\n    \n    // Fur texture (simplified for printability)\n    // sloth_fur_texture();\n}\n\n// Position for printing\nrotate([0, 0, 90])\ntranslate([0, 0, 20])",
    "renders": true
  },
  {
    "animal": "slug",
    "openscad_code": "$fn=36;\n\nslug_length = 80;\nslug_width = 25;\nslug_height = 18;\nmantle_length = 28;\nmantle_width = 22;\nmantle_height = 16;\ntentacle_length = 12;\ntentacle_radius = 2.5;\neye_radius = 3.5;\nbreathing_pore_radius = 1.5;\nfoot_extrude = 1.5;\nridge_segments = 12;\n\nmodule slug_body() {\n    difference() {\n        hull() {\n            translate([slug_length*0.35,0,slug_height*0.5])\n                sphere(d=slug_width);\n            translate([-slug_length*0.45,0,slug_height*0.5])\n                sphere(d=slug_width*0.7);\n        }\n        \n        translate([0,0,-slug_height])\n            cube([slug_length*2,slug_width*2,slug_height*2],center=true);\n    }\n}\n\nmodule mantle() {\n    translate([slug_length*0.25,0,mantle_height*0.5+foot_extrude])\n        scale([1,0.8,0.7])\n            sphere(d=[mantle_length,mantle_width,mantle_height]);\n}\n\nmodule foot() {\n    translate([0,0,foot_extrude/2])\n        scale([1,0.9,0.3])\n            sphere(d=[slug_length*0.9,slug_width*1.1,foot_extrude]);\n}\n\nmodule breathing_pores() {\n    for(i=[0:1:7]) {\n        rotate([0,0,i*45])\n            translate([slug_length*0.15+sin(i*45)*3, cos(i*45)*8, mantle_height*0.6+foot_extrude])\n                sphere(d=breathing_pore_radius);\n    }\n}\n\nmodule tentacle_left() {\n    translate([slug_length*0.40, slug_width*0.35, slug_height*0.7+foot_extrude]) {\n        rotate([0,-15,15])\n            cylinder(h=tentacle_length, r1=tentacle_radius, r2=tentacle_radius*0.5, $fn=16);\n        translate([0,0,tentacle_length])\n            sphere(r=eye_radius);\n    }\n}\n\nmodule tentacle_right() {\n    translate([slug_length*0.40, -slug_width*0.35, slug_height*0.7+foot_extrude]) {\n        rotate([0,-15,-15])\n            cylinder(h=tentacle_length, r1=tentacle_radius, r2=tentacle_radius*0.5, $fn=16);\n        translate([0,0,tentacle_length])\n            sphere(r=eye_radius);\n    }\n}\n\nmodule dorsal_ridges() {\n    for(i=[0:1:ridge_segments-1]) {\n        translate([-slug_length*0.45 + i*(slug_length*0.9)/ridge_segments, 0, slug_height*0.45+foot_extrude])\n            rotate([90,0,0])\n                scale([1,0.15,0.3])\n                    cylinder(h=slug_width*0.9, r=slug_height*0.25, $fn=16);\n    }\n}\n\nunion() {\n    slug_body();\n    mantle();\n    foot();\n    breathing_pores();\n    tentacle_left();\n    tentacle_right();\n    dorsal_ridges();\n}",
    "renders": true
  },
  {
    "animal": "smelt",
    "openscad_code": "// Realistic Medium-Complexity Smelt (Osmerus eperlanus)\n// Approx. 90 mm long, printable with no support\n$fn = 48;\n\n// Overall scale\nscale_factor = 1;\n\n// Main body\nmodule body() {\n    union() {\n        // Tapered cylindrical body\n        hull() {\n            translate([0, 0, 5]) scale([1, 0.6, 1]) sphere(d = 18);\n            translate([60, 0, 5]) scale([0.3, 0.4, 0.7]) sphere(d = 12);\n        }\n        \n        // Belly bulge\n        translate([25, 0, -3]) scale([1, 0.8, 0.4]) sphere(d = 20);\n    }\n}\n\n// Tail\nmodule tail() {\n    translate([65, 0, 5]) rotate([0, 0, 0]) {\n        difference() {\n            // Tail fin\n            scale([0.5, 1.5, 0.1]) sphere(d = 20);\n            // Fork\n            translate([0, 5, 0]) cube([15, 10, 5], center = true);\n            translate([0, -5, 0]) cube([15, 10, 5], center = true);\n        }\n    }\n}\n\n// Dorsal fin\nmodule dorsal_fin() {\n    for(i = [35:5:55]) {\n        translate([i, 0, 12]) rotate([0, 0, 0]) {\n            scale([0.3, 2, 1]) cylinder(h = 3, d1 = 8, d2 = 0);\n        }\n    }\n}\n\n// Anal fin\nmodule anal_fin() {\n    for(i = [45:5:60]) {\n        translate([i, 0, -2]) rotate([0, 0, 0]) {\n            scale([0.3, 1.5, 1]) cylinder(h = 3, d1 = 6, d2 = 0);\n        }\n    }\n}\n\n// Pectoral fins\nmodule pectoral_fins() {\n    for(side = [-1, 1]) {\n        translate([20, 8 * side, 3]) rotate([0, 0, 30 * side]) {\n            scale([1, 0.8, 0.1]) sphere(d = 10);\n        }\n    }\n}\n\n// Head\nmodule head() {\n    union() {\n        // Main head\n        translate([-5, 0, 5]) scale([1.2, 0.9, 0.9]) sphere(d = 15);\n        \n        // Snout\n        translate([-12, 0, 5]) scale([0.8, 0.5, 0.5]) sphere(d = 10);\n    }\n}\n\n// Eyes\nmodule eyes() {\n    for(side = [-1, 1]) {\n        translate([-3, 4 * side, 7]) {\n            difference() {\n                sphere(d = 4);\n                translate([0, 0, 1]) sphere(d = 2);\n            }\n        }\n    }\n}\n\n// Mouth\nmodule mouth() {\n    translate([-12, 0, 3]) rotate([10, 0, 0]) {\n        difference() {\n            cube([8, 2, 1], center = true);\n            translate([2, 0, 0]) cube([4, 2, 2], center = true);\n        }\n    }\n}\n\n// Scales pattern (decorative)\nmodule scales() {\n    for(i = [10:10:60]) {\n        for(j = [-6:3:6]) {\n            translate([i, j, 5]) rotate([90, 0, 0]) {\n                cylinder(h = 0.5, d = 2);\n            }\n        }\n    }\n}\n\n// Assemble the smelt\nscale([scale_factor, scale_factor, scale_factor]) {\n    union() {\n        body();\n        tail();\n        dorsal_fin();\n        anal_fin();\n        pectoral_fins();\n        head();\n        eyes();\n        mouth();\n        scales();\n    }\n}",
    "renders": true
  },
  {
    "animal": "snail",
    "openscad_code": "// Snail - Realistic style, medium complexity\n// Dimensions: ~70mm long, ~40mm wide, ~35mm high\n\n// Shell parameters\nshell_height = 30;\nshell_base_radius = 18;\nshell_turns = 3.5;\nshell_growth = 0.85;\nshell_thickness = 1.8;\n\n// Body parameters\nbody_length = 40;\nbody_width = 20;\nbody_height = 12;\nneck_length = 8;\nhead_radius = 6;\ntentacle_length = 12;\ntentacle_radius = 1.2;\n\n// Foot parameters\nfoot_width = 25;\nfoot_length = 35;\nfoot_height = 3;\n\n// Shell module with spiral structure\nmodule shell() {\n    // Main shell spiral\n    union() {\n        // Outer spiral\n        for (i = [0:5:shell_turns * 360]) {\n            radius = shell_base_radius * pow(shell_growth, i / 360);\n            height = shell_height * (i / (shell_turns * 360));\n            \n            translate([radius * cos(i), radius * sin(i), height])\n                sphere(r = shell_thickness * (1 + i / 360));\n        }\n        \n        // Inner spiral ridge\n        for (i = [0:10:shell_turns * 360]) {\n            radius = (shell_base_radius - 5) * pow(shell_growth, i / 360);\n            height = shell_height * (i / (shell_turns * 360));\n            \n            rotate([0, 0, i])\n                translate([radius, 0, height])\n                    scale([1, 0.5, 0.3])\n                        sphere(r = shell_thickness * 0.8);\n        }\n    }\n    \n    // Shell opening\n    difference() {\n        cylinder(h = shell_height * 0.4, r1 = shell_base_radius * 0.8, r2 = shell_base_radius * 0.6, $fn = 32);\n        translate([0, 0, -1])\n            cylinder(h = shell_height * 0.4 + 2, r1 = shell_base_radius * 0.6, r2 = shell_base_radius * 0.4, $fn = 32);\n    }\n}\n\n// Snail body with muscular foot\nmodule body() {\n    // Main body\n    translate([0, 0, foot_height])\n        scale([1, 0.7, 0.8])\n            sphere(r = body_width / 2);\n    \n    // Neck\n    translate([body_length / 2 - neck_length, 0, foot_height + body_height / 2])\n        rotate([0, -20, 0])\n            cylinder(h = neck_length, r1 = body_width / 3, r2 = head_radius, $fn = 16);\n    \n    // Head\n    translate([body_length / 2, 0, foot_height + body_height / 2 + 2])\n        sphere(r = head_radius);\n    \n    // Eye stalks\n    translate([body_length / 2 + head_radius * 0.7, head_radius * 0.6, foot_height + body_height / 2 + 4])\n        rotate([0, 10, 15])\n            cylinder(h = tentacle_length, r = tentacle_radius, $fn = 8);\n    \n    translate([body_length / 2 + head_radius * 0.7, -head_radius * 0.6, foot_height + body_height / 2 + 4])\n        rotate([0, 10, -15])\n            cylinder(h = tentacle_length, r = tentacle_radius, $fn = 8);\n    \n    // Eyes\n    translate([body_length / 2 + head_radius * 0.7 + tentacle_length * 0.9, head_radius * 0.6 + tentacle_length * sin(15), foot_height + body_height / 2 + 4 + tentacle_length * sin(10)])\n        sphere(r = tentacle_radius * 1.2);\n    \n    translate([body_length / 2 + head_radius * 0.7 + tentacle_length * 0.9, -head_radius * 0.6 - tentacle_length * sin(15), foot_height + body_height / 2 + 4 + tentacle_length * sin(10)])\n        sphere(r = tentacle_radius * 1.2);\n}\n\n// Muscular foot\nmodule foot() {\n    // Main foot\n    translate([0, 0, foot_height / 2])\n        scale([1, 0.7, 1])\n            sphere(r = foot_width / 2);\n    \n    // Foot extension\n    translate([foot_length / 2 - 5, 0, foot_height / 2])\n        scale([1.5, 0.9, 1])\n            sphere(r = foot_width / 3);\n}\n\n// Shell texture details\nmodule shell_texture() {\n    // Growth lines\n    for (i = [1:8]) {\n        rotate([0, 0, i * 45])\n            translate([0, 0, shell_height * 0.1 * i])\n                scale([1 + i * 0.1, 1 + i * 0.1, 0.2])\n                    sphere(r = shell_base_radius * 0.5);\n    }\n}\n\n// Main assembly\ntranslate([0, -shell_base_radius / 2, 0])\n    rotate([0, 15, 0])\n        shell();\n\ntranslate([-body_length / 2, 0, 0])\n    body();\n\nfoot();\n\n// Add shell texture as separate elements\ntranslate([0, -shell_base_radius / 2, shell_height * 0.6])\n    rotate([0, 15, 0])\n        shell_texture();",
    "renders": true
  },
  {
    "animal": "snake",
    "openscad_code": "// Realistic snake - medium complexity\n// Approx 80 mm long, 3D-printable with no overhangs\n\n$fn = 32;\n\n// Snake body parameters\nsegments = 20;\nbody_radius = 6;\ntail_end_radius = 2;\nhead_radius = 9;\nbody_length = 80;\n\n// Build the snake\nunion() {\n    // Head\n    translate([0, 0, head_radius]) {\n        // Main head sphere\n        sphere(r = head_radius);\n        \n        // Snout extension\n        translate([head_radius * 0.9, 0, -head_radius * 0.2])\n            rotate([0, -20, 0])\n                scale([1.5, 0.8, 0.7])\n                    sphere(r = head_radius * 0.8);\n        \n        // Eyes\n        for (side = [-1, 1]) {\n            translate([head_radius * 0.6, side * head_radius * 0.5, head_radius * 0.4])\n                sphere(r = 1.5);\n        }\n    }\n    \n    // Body segments\n    for (i = [0 : segments - 1]) {\n        t = i / (segments - 1);\n        x = t * body_length;\n        y = sin(t * 3 * 360) * 8 * (1 - t);\n        z = cos(t * 3 * 360) * 5 * (1 - t);\n        radius = body_radius - (body_radius - tail_end_radius) * t;\n        \n        translate([x, y, z]) {\n            // Main body segment\n            sphere(r = radius);\n            \n            // Belly scales\n            translate([0, 0, -radius + 0.5])\n                cube([radius * 1.8, radius * 1.2, 1], center = true);\n            \n            // Scale ridges\n            for (j = [0 : 5]) {\n                angle = j * 60;\n                translate([0, 0, 0]) {\n                    rotate([0, 0, angle])\n                        translate([radius * 0.8, 0, 0])\n                            cylinder(h = radius * 0.3, r = radius * 0.3);\n                }\n            }\n        }\n    }\n    \n    // Tongue\n    translate([head_radius * 1.8, 0, 0]) {\n        rotate([0, 90, 0])\n            cylinder(h = 8, r = 0.5);\n        \n        translate([8, 0, 0])\n            rotate([0, 0, 15])\n                cylinder(h = 4, r = 0.3);\n        \n        translate([8, 0, 0])\n            rotate([0, 0, -15])\n                cylinder(h = 4, r = 0.3);\n    }\n    \n    // Neck transition\n    translate([head_radius * 1.5, 0, 0])\n        cylinder(h = 5, r1 = head_radius * 0.9, r2 = body_radius);\n}",
    "renders": true
  },
  {
    "animal": "snapper",
    "openscad_code": "// Realistic Snapper (medium complexity)\n// Overall length ~75 mm, printable without support\n\n$fn=50;\n\nmodule shell_segment(id, length, height, width) {\n    // Create one segment of the curved shell\n    hull() {\n        translate([0, 0, 0]) \n            scale([1, 0.9, 0.4]) sphere(d=width);\n        translate([length*0.8, 0, height*0.7]) \n            scale([0.7, 0.7, 0.3]) sphere(d=width);\n    }\n}\n\nmodule shell() {\n    // Main curved shell made of overlapping segments\n    union() {\n        for (i=[0:6]) {\n            translate([-i*8, 0, -i*3])\n                rotate([0, -i*5, 0])\n                shell_segment(i, 15, 12-i, 22-i*1.5);\n        }\n    }\n}\n\nmodule head() {\n    // Realistic triangular head with eye ridges\n    difference() {\n        // Main head block\n        translate([-35, 0, 5])\n            rotate([0, 10, 0])\n            scale([1.3, 1, 0.8])\n            sphere(d=20);\n        \n        // Mouth cavity\n        translate([-45, 0, -5])\n            rotate([0, 30, 0])\n            cube([20, 15, 8], center=true);\n            \n        // Eye sockets\n        translate([-30, 8, 8])\n            sphere(d=6);\n        translate([-30, -8, 8])\n            sphere(d=6);\n    }\n    \n    // Beak tip\n    translate([-48, 0, 0])\n        rotate([0, -20, 0])\n        cylinder(h=10, r1=3, r2=0, center=true);\n}\n\nmodule eye() {\n    // Eyeball with pupil\n    color(\"black\")\n    translate([-30, 6, 8])\n        sphere(d=4);\n    translate([-30, -6, 8])\n        sphere(d=4);\n}\n\nmodule flipper(side) {\n    // Flipper with realistic curved shape\n    mirror([side, 0, 0])\n    translate([-10, side*12, -10])\n        rotate([0, 0, side*-20])\n        hull() {\n            translate([0, 0, 0])\n                scale([0.3, 1, 0.1]) sphere(d=15);\n            translate([5, side*8, -2])\n                scale([0.2, 0.6, 0.05]) sphere(d=12);\n        }\n}\n\nmodule tail() {\n    // Triangular tail with ridges\n    union() {\n        translate([15, 0, -8])\n            rotate([0, 30, 0])\n            scale([1, 0.6, 0.2])\n            cylinder(h=20, r1=10, r2=2);\n            \n        // Tail ridges\n        for (i=[1:3]) {\n            translate([15+i*3, 0, -6+i])\n                rotate([0, 30, 0])\n                scale([1, 0.5, 0.1])\n                cylinder(h=5, r1=8-i, r2=1);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    shell();\n    head();\n    eye();\n    flipper(1);\n    flipper(-1);\n    tail();\n}",
    "renders": true
  },
  {
    "animal": "snipe",
    "openscad_code": "// Snipe - medium complexity realistic style\n// Total length ~80mm, printable as one piece\n\n$fn = 36;  // Smooth curves for realistic look\n\nmodule body() {\n    // Main oval body\n    scale([1, 0.6, 0.4])\n        sphere(d = 40);\n    \n    // Belly bulge\n    translate([0, 0, -6])\n        scale([0.9, 0.5, 0.3])\n            sphere(d = 35);\n}\n\nmodule neck() {\n    // S-curved neck\n    rotate([0, 20, 0])\n        translate([20, 0, 12])\n            rotate([0, -30, 0])\n                cylinder(h = 25, d1 = 12, d2 = 6);\n}\n\nmodule head() {\n    // Elongated head with slight downward curve\n    translate([35, 0, 16])\n        rotate([0, -15, 0])\n            scale([2.5, 0.8, 1])\n                sphere(d = 12);\n    \n    // Crown stripe\n    translate([42, 0, 22])\n        rotate([0, -15, 0])\n            scale([0.2, 0.1, 0.05])\n                cube([15, 3, 2]);\n}\n\nmodule beak() {\n    // Long straight beak\n    translate([48, 0, 14])\n        rotate([0, -25, 0])\n            scale([1, 0.3, 0.3])\n                cylinder(h = 30, d1 = 2, d2 = 1);\n}\n\nmodule eye() {\n    // Left eye\n    translate([40, 4, 18])\n        rotate([0, -15, 0])\n            sphere(d = 2.5);\n    \n    // Right eye\n    translate([40, -4, 18])\n        rotate([0, -15, 0])\n            sphere(d = 2.5);\n}\n\nmodule tail() {\n    // Fan tail with individual feathers\n    translate([-22, 0, 0])\n        rotate([0, 15, 0])\n            for(i = [-20:10:20]) {\n                rotate([0, 0, i])\n                    translate([0, 0, i/5])\n                        scale([0.8, 0.08, 0.4])\n                            cube([25, 1, 8]);\n            }\n}\n\nmodule wing() {\n    // Left wing\n    translate([0, 15, 8])\n        rotate([0, 0, 30])\n            scale([1.2, 0.1, 0.8])\n                difference() {\n                    cube([25, 1, 15]);\n                    // Wing tip curve\n                    translate([20, -1, 10])\n                        sphere(d = 8);\n                }\n    \n    // Right wing\n    mirror([0, 1, 0])\n        translate([0, 15, 8])\n            rotate([0, 0, 30])\n                scale([1.2, 0.1, 0.8])\n                    difference() {\n                        cube([25, 1, 15]);\n                        translate([20, -1, 10])\n                            sphere(d = 8);\n                    }\n}\n\nmodule legs() {\n    // Left leg\n    translate([10, 5, -12])\n        cylinder(h = 15, d = 2);\n    translate([10, 5, -27])\n        // Three toes forward\n        for(a = [-30:30:30])\n            rotate([0, 0, a])\n                translate([0, 0, -2])\n                    cylinder(h = 8, d = 1);\n    \n    // Right leg\n    translate([10, -5, -12])\n        cylinder(h = 15, d = 2);\n    translate([10, -5, -27])\n        for(a = [-30:30:30])\n            rotate([0, 0, a])\n                translate([0, 0, -2])\n                    cylinder(h = 8, d = 1);\n}\n\n// Assemble the snipe\nunion() {\n    body();\n    neck();\n    head();\n    beak();\n    color(\"black\") eye();\n    tail();\n    wing();\n    legs();\n}",
    "renders": true
  },
  {
    "animal": "snowy",
    "openscad_code": "// Snowy realistic model - OpenSCAD\n// 3D printable snowman with realistic proportions\n\n$fn = 32;  // Smooth curves for printing\n\n// Overall scale factor\nscale_factor = 0.4;\n\n// Dimensions (mm)\nbase_radius = 30 * scale_factor;\nmid_radius = 22 * scale_factor;\nhead_radius = 17 * scale_factor;\narm_length = 25 * scale_factor;\narm_diameter = 3 * scale_factor;\n\n// Helper module for spheres with wall thickness\nmodule hollow_sphere(r, wall) {\n    difference() {\n        sphere(r);\n        sphere(r - wall);\n    }\n}\n\n// Snowball with realistic rounding\nmodule snowball(r, height_ratio = 1) {\n    scale([1, 1, height_ratio]) {\n        difference() {\n            sphere(r);\n            // Flatten bottom slightly\n            translate([0, 0, -r-1])\n                cube([r*2.2, r*2.2, 2], center=true);\n        }\n    }\n}\n\n// Branch arm with natural curve\nmodule branch_arm(length, diameter) {\n    rotate([0, 15, 0]) {\n        // Main branch\n        cylinder(h=length, d1=diameter*1.2, d2=diameter*0.8, center=false);\n        \n        // Side twigs\n        translate([0, diameter/2, length*0.3])\n            rotate([0, 90, 45])\n                cylinder(h=length*0.4, d1=diameter*0.8, d2=diameter*0.5);\n                \n        translate([0, -diameter/2, length*0.5])\n            rotate([0, 90, -30])\n                cylinder(h=length*0.35, d1=diameter*0.7, d2=diameter*0.4);\n    }\n}\n\n// Carrot nose\nmodule carrot_nose(length, base_d) {\n    cylinder(h=length, d1=base_d, d2=base_d*0.3);\n}\n\n// Coal eye\nmodule coal_eye(size) {\n    sphere(size);\n}\n\n// Button\nmodule button(diameter, thickness) {\n    cylinder(h=thickness, d=diameter);\n    translate([0, 0, thickness/2])\n        cylinder(h=thickness*0.5, d=diameter*0.6);\n}\n\n// Scarf segment\nmodule scarf(width, thickness, length) {\n    // Main scarf body\n    cube([length, width, thickness], center=true);\n    \n    // Fringe ends\n    for(i = [0:3]) {\n        translate([length/2 - 2 - i*4, width/2 + 2, 0])\n            cube([0.5, 4, thickness*0.8]);\n        translate([length/2 - 2 - i*4, -width/2 - 2, 0])\n            cube([0.5, 4, thickness*0.8]);\n    }\n}\n\n// Main assembly\nmodule snowy() {\n    // Base snowball (slightly compressed)\n    translate([0, 0, base_radius*0.8])\n        snowball(base_radius, 0.8);\n    \n    // Middle snowball\n    translate([0, 0, base_radius*0.8*2 + mid_radius*0.8])\n        snowball(mid_radius, 0.85);\n    \n    // Head\n    translate([0, 0, base_radius*0.8*2 + mid_radius*0.8*2 + head_radius*0.9])\n        snowball(head_radius, 0.9);\n    \n    // Left arm\n    translate([-mid_radius*0.8, 0, base_radius*0.8*2 + mid_radius*0.8])\n        rotate([0, 0, 180])\n            branch_arm(arm_length, arm_diameter);\n    \n    // Right arm\n    translate([mid_radius*0.8, 0, base_radius*0.8*2 + mid_radius*0.8])\n        rotate([0, 0, 0])\n            branch_arm(arm_length, arm_diameter);\n    \n    // Carrot nose\n    translate([0, head_radius*0.9, base_radius*0.8*2 + mid_radius*0.8*2 + head_radius*0.9*1.8])\n        rotate([90, 0, 0])\n            carrot_nose(head_radius*0.8, 3);\n    \n    // Eyes\n    translate([-head_radius*0.3, head_radius*0.7, base_radius*0.8*2 + mid_radius*0.8*2 + head_radius*0.9*1.7])\n        coal_eye(2.5);\n    translate([head_radius*0.3, head_radius*0.7, base_radius*0.8*2 + mid_radius*0.8*2 + head_radius*0.9*1.7])\n        coal_eye(2.5);\n    \n    // Buttons\n    translate([0, mid_radius*0.85, base_radius*0.8*2 + mid_radius*0.8*1.5])\n        button(4, 1.5);\n    translate([0, mid_radius*0.85, base_radius*0.8*2 + mid_radius*0.8*1.2])\n        button(4, 1.5);\n    translate([0, mid_radius*0.85, base_radius*0.8*2 + mid_radius*0.8*0.9])\n        button(4, 1.5);\n    \n    // Scarf\n    translate([0, 0, base_radius*0.8*2 + mid_radius*0.8*2])\n        rotate([90, 0, 0])\n            scarf(8, 2, 35);\n}\n\n// Render the model\nsnowy();",
    "renders": true
  },
  {
    "animal": "sockeye",
    "openscad_code": "// Sockeye Salmon - Realistic Medium Complexity\n\n// Parameters\n$fn = 24;\nfish_length = 80;\nfish_height = 25;\nfish_width = 15;\n\n// Main body module\nmodule body() {\n    // Main body segments\n    hull() {\n        translate([-fish_length/2, 0, 0])\n            scale([1, 0.8, 0.6])\n            sphere(d=fish_height);\n        translate([-fish_length/4, 0, 0])\n            scale([1.2, 1, 0.8])\n            sphere(d=fish_height*1.1);\n        translate([0, 0, 0])\n            scale([1.3, 1.1, 0.9])\n            sphere(d=fish_height*1.2);\n        translate([fish_length/4, 0, 0])\n            scale([1.1, 0.9, 0.7])\n            sphere(d=fish_height);\n        translate([fish_length/2-5, 0, 0])\n            scale([0.8, 0.6, 0.4])\n            sphere(d=fish_height*0.7);\n    }\n}\n\n// Tail module\nmodule tail() {\n    translate([fish_length/2-3, 0, 0])\n        rotate([0, 0, 0])\n        scale([1, 0.3, 0.1])\n        cylinder(h=fish_height*1.5, d1=fish_height*0.8, d2=0);\n    \n    // Tail fin upper\n    translate([fish_length/2-5, 0, fish_height/3])\n        rotate([0, -10, 0])\n        scale([1.2, 0.2, 1])\n        cylinder(h=fish_height*0.8, d1=fish_height*0.6, d2=0);\n    \n    // Tail fin lower\n    translate([fish_length/2-5, 0, -fish_height/3])\n        rotate([0, 10, 0])\n        scale([1.2, 0.2, 1])\n        cylinder(h=fish_height*0.6, d1=fish_height*0.5, d2=0);\n}\n\n// Dorsal fin\nmodule dorsal_fin() {\n    for(i=[-fish_length/3:5:fish_length/3]) {\n        translate([i, 0, fish_height/2])\n            rotate([0, 90-i*2, 0])\n            scale([0.3, 0.1, 1])\n            cylinder(h=fish_height*0.6, d1=fish_height*0.3, d2=0);\n    }\n}\n\n// Pectoral fins\nmodule pectoral_fins() {\n    // Left fin\n    translate([-fish_length/4, fish_width/2, -fish_height/4])\n        rotate([0, 0, 45])\n        scale([1, 0.2, 0.5])\n        cylinder(h=fish_height*0.8, d1=fish_height*0.4, d2=0);\n    \n    // Right fin\n    translate([-fish_length/4, -fish_width/2, -fish_height/4])\n        rotate([0, 0, -45])\n        scale([1, 0.2, 0.5])\n        cylinder(h=fish_height*0.8, d1=fish_height*0.4, d2=0);\n}\n\n// Head and mouth\nmodule head() {\n    translate([-fish_length/2-5, 0, 0])\n        scale([0.8, 0.7, 0.6])\n        sphere(d=fish_height*1.1);\n    \n    // Mouth\n    difference() {\n        translate([-fish_length/2-8, 0, -fish_height/4])\n            rotate([0, -20, 0])\n            cube([fish_length/6, fish_width/3, fish_height/4]);\n        translate([-fish_length/2-9, 0, -fish_height/4])\n            rotate([0, -20, 0])\n            cube([fish_length/6+1, fish_width/3+0.5, fish_height/4+0.5]);\n    }\n}\n\n// Eyes\nmodule eyes() {\n    // Left eye\n    translate([-fish_length/2-3, fish_width/3, fish_height/6])\n        color(\"black\")\n        sphere(d=fish_height/8);\n    \n    // Right eye\n    translate([-fish_length/2-3, -fish_width/3, fish_height/6])\n        color(\"black\")\n        sphere(d=fish_height/8);\n}\n\n// Scales pattern\nmodule scales() {\n    for(i=[-fish_length/2+5:5:fish_length/2-5]) {\n        for(j=[-fish_height/2+2:3:fish_height/2-2]) {\n            translate([i, 0, j])\n                scale([0.8, 0.9, 0.3])\n                sphere(d=2);\n        }\n    }\n}\n\n// Assemble the fish\nunion() {\n    body();\n    tail();\n    dorsal_fin();\n    pectoral_fins();\n    head();\n    eyes();\n    scales();\n}\n\n// Base for printing stability\ntranslate([0, 0, -fish_height/2-1])\n    cube([fish_length+10, fish_width+10, 2], center=true);",
    "renders": true
  },
  {
    "animal": "sole",
    "openscad_code": "// Realistic 3D Printable Shoe Sole – medium complexity\n// Approx. 85 mm length, 30 mm max thickness\n// No overhangs >45°, 2 mm min wall thickness\n\n/*\n   Coordinate system:\n   X = width (medial/lateral)\n   Y = length (heel/toe)\n   Z = height\n   Origin at bottom-center of heel\n*/\n\n$fn = 36;\n\n// Overall dimensions\nlength = 85;\nwidth  = 35;\nthickness = 30;\n\n// Helper: rounded extrusion of a 2D footprint\nmodule sole_profile(h = thickness, inset = 0) {\n    hull() {\n        // Heel ellipse\n        translate([-width/2 + inset, 0, 0])\n            cylinder(h = h, d1 = width - 2*inset, d2 = width - 2*inset);\n        // Mid-foot\n        translate([0, length*0.35, 0])\n            cylinder(h = h, d1 = width*0.8 - 2*inset, d2 = width*0.8 - 2*inset);\n        // Metatarsal\n        translate([0, length*0.65, 0])\n            cylinder(h = h, d1 = width*0.9 - 2*inset, d2 = width*0.9 - 2*inset);\n        // Toe\n        translate([0, length, 0])\n            cylinder(h = h, d1 = width*0.75 - 2*inset, d2 = width*0.75 - 2*inset);\n    }\n}\n\n// Arch cavity\nmodule arch() {\n    difference() {\n        sole_profile(h = thickness*0.6, inset = 2);\n        translate([0, length*0.45, -1])\n            rotate([0, 0, 0])\n            cube([width - 8, length*0.3, thickness*0.8 + 2], center = true);\n    }\n}\n\n// Tread bars\nmodule tread_bars() {\n    bar_w = 2.5;\n    spacing = 5;\n    bar_h = 1.5;\n    \n    for (y = [0:spacing:length]) {\n        translate([0, y, 0])\n            cube([width - 4, bar_w, bar_h], center = true);\n    }\n}\n\n// Heel strike pad\nmodule heel_pad() {\n    difference() {\n        translate([0, length*0.15, bar_h])\n            cylinder(h = thickness*0.4, d1 = width*0.9, d2 = width*0.9);\n        // Cushion pattern holes (truncated cones)\n        for (x = [-width/3, 0, width/3])\n            for (y = [length*0.1, length*0.2])\n                translate([x, y, bar_h + 1])\n                    cylinder(h = thickness*0.4, d1 = 2.5, d2 = 3.5);\n    }\n}\n\n// Metatarsal pad\nmodule met_pad() {\n    difference() {\n        translate([0, length*0.65, bar_h])\n            cylinder(h = thickness*0.3, d1 = width*0.8, d2 = width*0.8);\n        // Cushion pattern holes\n        for (x = [-width/3, 0, width/3])\n            translate([x, length*0.65, bar_h + 1])\n                cylinder(h = thickness*0.3, d1 = 2, d2 = 3);\n    }\n}\n\n// Toe spring\nmodule toe_spring() {\n    difference() {\n        translate([0, length, bar_h])\n            cylinder(h = thickness*0.5, d1 = width*0.7, d2 = width*0.5);\n        // Cushion pattern holes\n        for (x = [-width/4, 0, width/4])\n            translate([x, length, bar_h + 1])\n                cylinder(h = thickness*0.5, d1 = 2, d2 = 2.5);\n    }\n}\n\n// Assemble sole\nunion() {\n    difference() {\n        sole_profile();\n        arch();\n    }\n    translate([0, 0, bar_h])\n        tread_bars();\n    heel_pad();\n    met_pad();\n    toe_spring();\n}",
    "renders": true
  },
  {
    "animal": "sparrow",
    "openscad_code": "// Realistic 3D Printable Sparrow - Medium Complexity\n// Overall dimensions: ~80mm long, ~40mm tall\n\nmodule sparrow() {\n    // Main body\n    difference() {\n        union() {\n            // Torso - ellipsoid\n            scale([1.2, 0.8, 1]) sphere(r=12, $fn=32);\n            \n            // Rounded chest\n            translate([0, -5, -3]) \n                scale([1.3, 1, 0.7]) sphere(r=10, $fn=32);\n        }\n        \n        // Remove bottom flat for printing\n        translate([0, 0, -15]) cube([40, 40, 15], center=true);\n    }\n    \n    // Head - sphere with beak\n    translate([-15, 0, 8]) {\n        sphere(r=8, $fn=32);\n        \n        // Beak - cone\n        rotate([0, -20, 0]) \n            translate([-4, 0, 0]) \n                cylinder(h=12, r1=2.5, r2=0.5, $fn=8);\n    }\n    \n    // Eyes - small spheres\n    for(side = [-1, 1]) {\n        translate([-18, side*4, 9]) \n            sphere(r=1.2, $fn=8);\n    }\n    \n    // Wings - layered feathers\n    module wing(is_left = true) {\n        mirror = is_left ? 1 : -1;\n        \n        translate([0, mirror*12, 5]) {\n            rotate([0, 0, -20*mirror]) {\n                // Primary wing shape\n                difference() {\n                    scale([1.8, 0.3, 0.8]) sphere(r=10, $fn=16);\n                    \n                    // Cut bottom\n                    translate([0, 0, -10]) cube([40, 10, 10], center=true);\n                    \n                    // Feather separation cuts\n                    for(i = [1:5]) {\n                        rotate([0, 0, i*8]) \n                            translate([i*3-5, -2, -5]) \n                                cube([0.5, 4, 10]);\n                    }\n                }\n                \n                // Secondary feathers\n                for(i = [0:4]) {\n                    translate([i*3-6, 0, -3+i]) \n                        rotate([0, 0, 5-i]) \n                            scale([1.5, 0.1, 0.3]) \n                                sphere(r=5-i*0.5, $fn=8);\n                }\n            }\n        }\n    }\n    \n    wing(true);\n    wing(false);\n    \n    // Tail - fan of feathers\n    module tail_feather(index) {\n        rotate([0, 0, index*10-25]) {\n            translate([15+index*0.5, 0, -2+abs(index)*0.5]) {\n                scale([0.8, 0.1, 0.3]) \n                    cylinder(h=15-abs(index)*2, r1=3, r2=1, $fn=8);\n            }\n        }\n    }\n    \n    for(i = [-3:3]) {\n        tail_feather(i);\n    }\n    \n    // Legs and feet\n    module leg(side) {\n        translate([-5, side*4, -10]) {\n            // Leg\n            cylinder(h=8, r=1.5, $fn=8);\n            \n            // Foot\n            translate([0, 0, -8]) {\n                // Toes\n                for(rot = [-30, 0, 30]) {\n                    rotate([0, 0, rot]) {\n                        translate([0, 0, 0]) \n                            cylinder(h=6, r1=1, r2=0.5, $fn=6);\n                    }\n                }\n            }\n        }\n    }\n    \n    leg(1);\n    leg(-1);\n    \n    // Chest detail - feather texture\n    for(i = [0:5]) {\n        for(j = [0:2]) {\n            translate([i*2-8, j*2-4, -2]) {\n                rotate([90, 0, 0]) \n                    scale([0.3, 0.1, 0.2]) \n                        cylinder(h=2, r=3, $fn=6);\n            }\n        }\n    }\n}\n\n// Main assembly\nsparrow();",
    "renders": true
  },
  {
    "animal": "spider",
    "openscad_code": "// Realistic 3D Printable Spider - Medium Complexity\n// Approx 75mm leg span\n\n// Main body parts\nmodule cephalothorax() {\n    // Front rounded section\n    translate([0, 0, 8]) {\n        sphere(8, $fn=20);\n    }\n    \n    // Abdomen connection\n    translate([0, -12, 6]) {\n        cylinder(h=10, r1=7, r2=5, $fn=16);\n    }\n}\n\nmodule abdomen() {\n    // Main abdomen\n    translate([0, -25, 6]) {\n        scale([1, 1.2, 0.8]) {\n            sphere(10, $fn=20);\n        }\n    }\n    \n    // Abdomen ridge detail\n    for(i = [0:2]) {\n        translate([0, -25 - i*3, 6.5 - i*0.5]) {\n            scale([1 - i*0.1, 1.2 - i*0.05, 0.7 - i*0.05]) {\n                sphere(10 - i, $fn=20);\n            }\n        }\n    }\n}\n\n// Eye cluster\nmodule eyes() {\n    for(angle = [0:45:315]) {\n        rotate([0, 0, angle]) {\n            translate([5, 0, 10]) {\n                sphere(1.5, $fn=8);\n            }\n        }\n    }\n    // Central eyes\n    translate([6, 0, 10]) {\n        sphere(2, $fn=8);\n    }\n}\n\n// Leg segment\nmodule leg_segment(length, width, angle, z_offset) {\n    rotate([0, angle, 0]) {\n        translate([length/2, 0, z_offset]) {\n            rotate([0, 90, 0]) {\n                cylinder(h=length, r=width, $fn=8);\n            }\n        }\n    }\n}\n\n// Complete leg with 3 segments\nmodule leg(base_angle, side) {\n    // Coxa\n    rotate([0, 0, base_angle]) {\n        translate([0, side*12, 2]) {\n            rotate([0, 75, 0]) {\n                cylinder(h=12, r=2.5, $fn=8);\n                \n                // Trochanter\n                translate([12, 0, 0]) {\n                    rotate([30, 0, 0]) {\n                        cylinder(h=10, r=2, $fn=8);\n                        \n                        // Femur\n                        translate([10, 0, 0]) {\n                            rotate([30, 0, 0]) {\n                                cylinder(h=15, r=2.2, $fn=8);\n                                \n                                // Tibia\n                                translate([15, 0, 0]) {\n                                    rotate([30, 0, 0]) {\n                                        cylinder(h=20, r=1.8, $fn=8);\n                                        \n                                        // Metatarsus\n                                        translate([20, 0, 0]) {\n                                            rotate([20, 0, 0]) {\n                                                cylinder(h=15, r=1.5, $fn=8);\n                                                \n                                                // Tarsus\n                                                translate([15, 0, 0]) {\n                                                    rotate([10, 0, 0]) {\n                                                        cylinder(h=8, r=1.2, $fn=8);\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Chelicerae (fangs)\nmodule chelicerae() {\n    translate([5, 8, 6]) {\n        rotate([0, -45, 0]) {\n            cylinder(h=8, r1=2, r2=1, $fn=8);\n            translate([8, 0, 0]) {\n                rotate([30, 0, 0]) {\n                    cylinder(h=5, r=1, $fn=6);\n                }\n            }\n        }\n    }\n    \n    translate([-5, 8, 6]) {\n        rotate([0, -45, 180]) {\n            cylinder(h=8, r1=2, r2=1, $fn=8);\n            translate([8, 0, 0]) {\n                rotate([30, 0, 0]) {\n                    cylinder(h=5, r=1, $fn=6);\n                }\n            }\n        }\n    }\n}\n\n// Pedipalps (feelers)\nmodule pedipalps() {\n    // Left\n    translate([4, 6, 7]) {\n        rotate([0, 0, 45]) {\n            cylinder(h=12, r=1, $fn=8);\n            translate([12, 0, 0]) {\n                rotate([0, 0, 30]) {\n                    cylinder(h=8, r=0.8, $fn=8);\n                }\n            }\n        }\n    }\n    \n    // Right\n    translate([-4, 6, 7]) {\n        rotate([0, 0, -45]) {\n            cylinder(h=12, r=1, $fn=8);\n            translate([12, 0, 0]) {\n                rotate([0, 0, -30]) {\n                    cylinder(h=8, r=0.8, $fn=8);\n                }\n            }\n        }\n    }\n}\n\n// Assemble the spider\nunion() {\n    // Main body\n    cephalothorax();\n    abdomen();\n    eyes();\n    \n    // Chelicerae and pedipalps\n    chelicerae();\n    pedipalps();\n    \n    // Legs - 4 per side\n    // Front legs\n    leg(45, 1);\n    leg(-45, -1);\n    \n    // Mid-front legs\n    leg(90, 1);\n    leg(-90, -1);\n    \n    // Mid-rear legs\n    leg(135, 1);\n    leg(-135, -1);\n    \n    // Rear legs\n    leg(180, 1);\n    leg(-180, -1);\n}",
    "renders": true
  },
  {
    "animal": "spoonbill",
    "openscad_code": "// Spoonbill - Realistic style, medium complexity\n// Overall length ~90mm, height ~35mm, width ~20mm\n\n$fn = 32;\n\nmodule spoonbill() {\n    // Body parameters\n    body_length = 40;\n    body_height = 25;\n    body_width = 15;\n    \n    // Head parameters\n    head_length = 20;\n    head_height = 15;\n    \n    // Beak parameters\n    beak_length = 35;\n    beak_width = 18;\n    beak_thickness = 2;\n    \n    // Leg parameters\n    leg_length = 25;\n    leg_diameter = 3;\n    \n    // Wing parameters\n    wing_span = 30;\n    wing_thickness = 2;\n    \n    // Body - main torso\n    union() {\n        // Main body\n        translate([0, 0, body_height/2])\n            scale([1, 0.6, 0.8])\n            sphere(d=body_length);\n        \n        // Tail\n        translate([-body_length/2 - 8, 0, body_height/2 - 5])\n            rotate([0, 15, 0])\n            scale([1, 0.3, 0.2])\n            cylinder(h=15, d1=12, d2=8);\n    }\n    \n    // Neck\n    translate([body_length/2 - 5, 0, body_height - 5])\n        rotate([0, -20, 0])\n        scale([0.4, 0.4, 1])\n        cylinder(h=15, d1=12, d2=8);\n    \n    // Head\n    translate([body_length/2 + 10, 0, body_height + 5])\n        rotate([0, -20, 0])\n        scale([1, 0.8, 0.9])\n        sphere(d=head_length);\n    \n    // Beak (spatulate shape)\n    union() {\n        // Beak base\n        translate([body_length/2 + 10 + head_length/2, 0, body_height + 5])\n            rotate([0, -20, 0])\n            scale([1.5, 1, 0.3])\n            sphere(d=head_length);\n        \n        // Beak tip\n        translate([body_length/2 + 10 + head_length/2 + beak_length/2, 0, body_height + 5])\n            rotate([0, -20, 0])\n            difference() {\n                scale([1.8, 0.9, 0.1])\n                sphere(d=beak_length);\n                // Create spoon shape\n                translate([0, 0, -beak_thickness])\n                    cube([beak_length, beak_width, beak_thickness*2], center=true);\n            }\n    }\n    \n    // Eyes\n    for(side = [-1, 1]) {\n        translate([body_length/2 + 10 + head_length/2 - 3, side * 5, body_height + 8])\n            sphere(d=3);\n    }\n    \n    // Wings\n    for(side = [-1, 1]) {\n        translate([0, side * body_width/2, body_height - 5])\n            rotate([0, 0, side * 15])\n            rotate([0, 30, 0])\n            scale([1, 0.3, 0.1])\n            cylinder(h=wing_span, d1=20, d2=8);\n    }\n    \n    // Legs\n    for(side = [-0.5, 0.5]) {\n        // Upper leg\n        translate([body_length/2 - 15, side * 8, body_height/2 - 10])\n            rotate([0, -30, 0])\n            cylinder(h=leg_length/2, d=leg_diameter);\n        \n        // Lower leg\n        translate([body_length/2 - 15 - leg_length/3, side * 8, body_height/2 - 10 - leg_length/3])\n            rotate([0, -60, 0])\n            cylinder(h=leg_length/2, d=leg_diameter);\n        \n        // Feet\n        translate([body_length/2 - 15 - leg_length/1.5, side * 8, body_height/2 - 20])\n            rotate([90, 0, 0])\n            scale([1, 1.5, 0.5])\n            cylinder(h=leg_diameter*2, d=leg_diameter*3);\n        \n        // Toes\n        for(toe = [-1, 0, 1]) {\n            translate([body_length/2 - 15 - leg_length/1.5, side * 8 + toe * 5, body_height/2 - 20])\n                rotate([90, 0, 0])\n                cylinder(h=8, d=leg_diameter*0.8);\n        }\n    }\n}\n\n// Position bird standing on base\ntranslate([0, 0, 10])\n    spoonbill();",
    "renders": true
  },
  {
    "animal": "springbok",
    "openscad_code": "// Springbok - Medium complexity realistic style\n// Designed for 3D printing, no overhangs >45 degrees\n\nmodule leg() {\n    // Upper leg\n    translate([0, -2, 0])\n        scale([1, 1, 3])\n        sphere(3, $fn=8);\n    \n    // Lower leg\n    translate([0, -2, -10])\n        scale([0.7, 0.7, 2.5])\n        sphere(2.5, $fn=8);\n    \n    // Hoof\n    translate([0, -2, -15])\n        scale([0.8, 1.2, 0.8])\n        cylinder(h=3, r1=2, r2=1.5, $fn=8);\n}\n\nmodule ear() {\n    rotate([0, -30, 0])\n        scale([1, 0.3, 2])\n        sphere(3, $fn=8);\n}\n\nmodule horn() {\n    rotate([0, -10, 0])\n        cylinder(h=8, r1=1.5, r2=0.5, $fn=8);\n}\n\nmodule tail() {\n    // Tail base\n    translate([-18, 0, 5])\n        rotate([0, 45, 0])\n        scale([1, 1, 3])\n        sphere(2, $fn=8);\n    \n    // Tail tuft\n    translate([-22, 0, 7])\n        sphere(3, $fn=12);\n}\n\n// Body\nunion() {\n    // Main body\n    translate([0, 0, 10])\n        scale([1.5, 1, 1.2])\n        sphere(10, $fn=16);\n    \n    // Neck\n    translate([10, 0, 15])\n        rotate([0, -30, 0])\n        scale([1, 0.8, 2])\n        cylinder(h=12, r1=5, r2=3, $fn=8);\n    \n    // Head\n    translate([18, 0, 18])\n        scale([1.2, 0.8, 0.8])\n        sphere(5, $fn=12);\n    \n    // Legs\n    translate([5, 4, 0])\n        leg();\n    translate([5, -4, 0])\n        leg();\n    translate([-5, 4, 0])\n        leg();\n    translate([-5, -4, 0])\n        leg();\n    \n    // Ears\n    translate([20, 3, 22])\n        ear();\n    translate([20, -3, 22])\n        ear();\n    \n    // Horns\n    translate([22, 2, 20])\n        horn();\n    translate([22, -2, 20])\n        horn();\n    \n    // Tail\n    tail();\n}\n\n// Eye details (small spheres)\ntranslate([21, 1.5, 19])\n    sphere(0.5, $fn=8);\ntranslate([21, -1.5, 19])\n    sphere(0.5, $fn=8);\n\n// Nose detail\ntranslate([23, 0, 17])\n    sphere(1, $fn=8);\n\n// White belly patch\ndifference() {\n    translate([0, 0, 5])\n        scale([1.4, 0.9, 0.6])\n        sphere(9.5, $fn=16);\n    \n    translate([0, 0, 5])\n        scale([1.3, 0.8, 0.5])\n        sphere(9.6, $fn=16);\n}\n\n// Dark stripe along back\ntranslate([0, 0, 18])\n    scale([1.6, 0.3, 0.2])\n    cube([20, 10, 4], center=true);",
    "renders": true
  },
  {
    "animal": "springhare",
    "openscad_code": "// Springhare - realistic style, medium complexity\n// 3D printable model, 80mm long\n\nmodule ear(height=20, width=8, thickness=2) {\n    difference() {\n        union() {\n            // Outer ear\n            scale([1, 0.7, 1]) sphere(d=width+2, $fn=20);\n            translate([0, -width/2, 0]) cylinder(h=height, d1=width+2, d2=width/2, $fn=20);\n        }\n        // Inner ear cavity\n        translate([0, -1, -1]) scale([0.8, 0.6, 0.8]) \n            sphere(d=width-2, $fn=15);\n    }\n}\n\nmodule tail(length=30, base_d=10, tip_d=5) {\n    // Bushy tail made of stacked spheres\n    for(i=[0:3]) {\n        translate([0, 0, i*length/4]) \n            sphere(d=base_d - (base_d-tip_d)*i/3, $fn=20);\n    }\n}\n\nmodule hind_leg(height=25, thickness=4) {\n    // Upper leg\n    rotate([0, 10, 0]) \n        cylinder(h=height*0.6, d=thickness+2, $fn=16);\n    \n    // Lower leg\n    translate([0, 0, height*0.6]) \n        rotate([0, -20, 0]) \n            cylinder(h=height*0.5, d=thickness, $fn=16);\n    \n    // Foot\n    translate([0, 0, height]) \n        rotate([90, 0, 0]) \n            cylinder(h=thickness*3, d=thickness*2, $fn=16);\n}\n\nmodule front_paw(length=12, width=3) {\n    union() {\n        // Arm\n        cylinder(h=length*0.7, d=width, $fn=12);\n        \n        // Paw\n        translate([0, 0, length*0.7]) {\n            sphere(d=width*1.5, $fn=12);\n            // Toes\n            for(i=[-1:1]) {\n                translate([i*width/2, 0, width]) \n                    sphere(d=width/2, $fn=8);\n            }\n        }\n    }\n}\n\n// Body\nunion() {\n    // Main torso - elongated ellipsoid\n    scale([1.5, 1, 1.2]) sphere(d=30, $fn=32);\n    \n    // Head\n    translate([-25, 0, 10]) rotate([0, -10, 0]) {\n        scale([1.2, 0.9, 0.9]) sphere(d=20, $fn=24);\n        \n        // Snout\n        translate([-8, 0, -2]) scale([1.5, 0.7, 0.6]) \n            sphere(d=8, $fn=16);\n        \n        // Eyes\n        for(i=[-1:1]) {\n            translate([-6, i*6, 3]) {\n                sphere(d=3, $fn=12);\n                translate([0.5, 0, 0]) sphere(d=1.5, $fn=8);\n            }\n        }\n        \n        // Nose\n        translate([-12, 0, -1]) sphere(d=2, $fn=8);\n    }\n    \n    // Ears\n    translate([-20, 10, 15]) rotate([0, 0, 30]) ear();\n    translate([-20, -10, 15]) rotate([0, 0, -30]) mirror([0,1,0]) ear();\n    \n    // Hind legs\n    translate([10, 8, -15]) rotate([45, 0, 20]) hind_leg();\n    translate([10, -8, -15]) rotate([45, 0, -20]) hind_leg();\n    \n    // Front paws\n    translate([-15, 10, -12]) rotate([0, 10, 0]) front_paw();\n    translate([-15, -10, -12]) rotate([0, 10, 0]) front_paw();\n    \n    // Tail\n    translate([20, 0, -5]) rotate([0, 20, 0]) tail();\n}\n\n// Whiskers\nfor(i=[1:3]) {\n    translate([-12, 6+i*2, 0]) rotate([0, 0, 10+i*5]) \n        cylinder(h=8, d=0.5, $fn=8);\n    translate([-12, -6-i*2, 0]) rotate([0, 0, -10-i*5]) \n        cylinder(h=8, d=0.5, $fn=8);\n}",
    "renders": true
  },
  {
    "animal": "springtail",
    "openscad_code": "// Springtail (Collembola) - Realistic style with medium complexity\n\n// Main dimensions (mm)\nbody_length = 45;\nbody_height = 12;\nhead_diameter = 8;\nabdomen_width = 10;\nfurcula_length = 25;\nantenna_length = 12;\n\n// Wall thickness for 3D printing\nwall = 1.5;\n\nmodule head() {\n    // Main head sphere\n    translate([body_length/2 - head_diameter/2, 0, body_height/2])\n        sphere(d = head_diameter, $fn=32);\n    \n    // Eyes (compound eyes as small spheres)\n    for(side = [-1, 1]) {\n        translate([body_length/2 - head_diameter/2 + 2, side * 3.5, body_height/2 + 1])\n            sphere(d = 2.5, $fn=16);\n    }\n    \n    // Mouthparts (labium)\n    translate([body_length/2 - head_diameter/2 - 2, 0, body_height/2 - 2])\n        cube([4, 3, 2], center=true);\n}\n\nmodule antenna() {\n    // Antenna segments\n    for(side = [-1, 1]) {\n        translate([body_length/2 - head_diameter/2 - 1, side * 3, body_height/2 + 3])\n            rotate([0, 90, 0])\n                for(i = [0:4]) {\n                    translate([i * 2, 0, 0])\n                        sphere(d = 1.5 - i * 0.2, $fn=8);\n                }\n    }\n}\n\nmodule thorax() {\n    // Three thoracic segments\n    for(i = [0, 1, 2]) {\n        translate([body_length/2 - 8 - i * 6, 0, body_height/2])\n            scale([1, 1 - i * 0.1, 0.8])\n                sphere(d = 8, $fn=24);\n    }\n}\n\nmodule abdomen() {\n    // Main abdomen (fusiform shape)\n    translate([0, 0, body_height/2])\n        scale([1.2, 1, 0.6])\n            sphere(d = abdomen_width, $fn=32);\n    \n    // Segmentation rings\n    for(i = [1:5]) {\n        translate([-i * 2, 0, body_height/2])\n            difference() {\n                cylinder(h = 1, d1 = abdomen_width - i * 0.8, d2 = abdomen_width - i * 0.8, $fn=24);\n                translate([0, 0, -0.1])\n                    cylinder(h = 1.2, d1 = (abdomen_width - i * 0.8) - wall*2, d2 = (abdomen_width - i * 0.8) - wall*2, $fn=24);\n            }\n    }\n}\n\nmodule legs() {\n    // Six legs (3 pairs)\n    for(pair = [0, 1, 2]) {\n        for(side = [-1, 1]) {\n            // Coxa\n            translate([body_length/2 - 8 - pair * 6, side * 4, body_height/2 - 2])\n                rotate([0, 0, side * 45])\n                    cylinder(h = 3, d = 1.5, $fn=8);\n            \n            // Femur\n            translate([body_length/2 - 8 - pair * 6 - 1.5, side * 5.5, body_height/2 - 2])\n                rotate([0, 0, side * 60])\n                    cylinder(h = 4, d1 = 1.5, d2 = 1, $fn=8);\n            \n            // Tibiotarsus\n            translate([body_length/2 - 8 - pair * 6 - 4, side * 7, body_height/2 - 2.5])\n                rotate([10, 0, side * 70])\n                    cylinder(h = 5, d = 0.8, $fn=8);\n        }\n    }\n}\n\nmodule collophore() {\n    // Ventral tube for water absorption\n    translate([body_length/2 - 15, 0, 0])\n        cylinder(h = 6, d1 = 3, d2 = 2, $fn=16);\n}\n\nmodule furcula() {\n    // Spring mechanism (furcula)\n    translate([-5, 0, 1])\n        rotate([0, 90, 0])\n            for(side = [-1, 1]) {\n                translate([0, side * 2, 0])\n                    difference() {\n                        // Main furcula arm\n                        rotate([0, side * 10, 0])\n                            cylinder(h = furcula_length, d = 2, $fn=12);\n                        \n                        // Tapered end\n                        translate([furcula_length - 3, 0, 0])\n                            rotate([0, side * -10, 0])\n                                cylinder(h = 3, d1 = 2, d2 = 0.5, $fn=8);\n                    }\n            }\n}\n\n// Assembly\nunion() {\n    head();\n    antenna();\n    thorax();\n    abdomen();\n    legs();\n    collophore();\n    furcula();\n}",
    "renders": true
  },
  {
    "animal": "squid",
    "openscad_code": "// Realistic medium-complexity 3D-printable squid\n// Overall length ~80 mm, built for FDM printing with minimal overhangs\n\n$fn = 24; // smoother curves\n\n// --------------------------------------------------\n// Main module\n// --------------------------------------------------\nmodule squid() {\n    union() {\n        mantle();\n        head();\n        eye_pair();\n        tentacles();\n        arms();\n        fins();\n    }\n}\n\n// --------------------------------------------------\n// Mantle (main body)\n// --------------------------------------------------\nmodule mantle() {\n    translate([0, 0, 30])\n    rotate([90, 0, 0])\n    scale([1, 1.3, 1.8])  // oval cross-section\n    cylinder(h = 35, r1 = 18, r2 = 12);\n}\n\n// --------------------------------------------------\n// Head\n// --------------------------------------------------\nmodule head() {\n    translate([0, 0, 12])\n    scale([1, 0.9, 1.2])\n    sphere(d = 22);\n}\n\n// --------------------------------------------------\n// Eyes\n// --------------------------------------------------\nmodule eye_pair() {\n    translate([0, 0, 15]) {\n        // left eye\n        translate([8, -11, 2])\n        scale([1.1, 1, 1])\n        eye();\n\n        // right eye\n        mirror([1, 0, 0])\n        translate([8, -11, 2])\n        scale([1.1, 1, 1])\n        eye();\n    }\n}\n\nmodule eye() {\n    difference() {\n        color(\"white\")\n        sphere(d = 7);\n\n        // pupil\n        translate([2.5, 0, 0])\n        color(\"black\")\n        sphere(d = 3.5);\n    }\n}\n\n// --------------------------------------------------\n// Eight arms\n// --------------------------------------------------\nmodule arms() {\n    for (a = [0: 45: 315]) {\n        rotate([0, 0, a])\n        translate([0, 16, 0])\n        rotate([-35, 0, 0])\n        arm();\n    }\n}\n\nmodule arm() {\n    // each arm as a tapered cylinder\n    scale([0.6, 1, 1])\n    cylinder(h = 28, r1 = 3, r2 = 1.5);\n}\n\n// --------------------------------------------------\n// Two longer tentacles\n// --------------------------------------------------\nmodule tentacles() {\n    // left tentacle\n    translate([6, 18, -5])\n    rotate([0, 0, 20])\n    tentacle();\n\n    // right tentacle\n    mirror([1, 0, 0])\n    translate([6, 18, -5])\n    rotate([0, 0, 20])\n    tentacle();\n}\n\nmodule tentacle() {\n    // slightly longer and thinner than arms\n    scale([0.5, 1, 1])\n    cylinder(h = 35, r1 = 2.5, r2 = 1);\n}\n\n// --------------------------------------------------\n// Side fins\n// --------------------------------------------------\nmodule fins() {\n    // left fin\n    translate([0, 0, 35])\n    rotate([0, 90, 0])\n    scale([1.4, 0.4, 1])\n    rotate_extrude(angle = 100)\n    translate([18, 0, 0])\n    circle(d = 4);\n\n    // right fin\n    mirror([1, 0, 0])\n    translate([0, 0, 35])\n    rotate([0, 90, 0])\n    scale([1.4, 0.4, 1])\n    rotate_extrude(angle = 100)\n    translate([18, 0, 0])\n    circle(d = 4);\n}\n\n// --------------------------------------------------\n// Generate model\n// --------------------------------------------------\nsquid();",
    "renders": true
  },
  {
    "animal": "squirrel",
    "openscad_code": "// Realistic 3D-printable squirrel (medium complexity)\n// Overall height ~70 mm, tail included\n\n// Parameters\ntail_length = 35;\nbody_length = 22;\nbody_height = 25;\nbody_width = 18;\nhead_d = 15;\near_size = 5;\nleg_len = 12;\narm_len = 8;\npaw_size = 2.5;\neye_size = 1.8;\nnose_size = 1.5;\nwall = 1.6; // for 3D print strength\n\nmodule rounded_box(x,y,z,r) {\n    hull() {\n        translate([r,r,r]) sphere(r);\n        translate([x-r,r,r]) sphere(r);\n        translate([r,y-r,r]) sphere(r);\n        translate([x-r,y-r,r]) sphere(r);\n        translate([r,r,z-r]) sphere(r);\n        translate([x-r,r,z-r]) sphere(r);\n        translate([r,y-r,z-r]) sphere(r);\n        translate([x-r,y-r,z-r]) sphere(r);\n    }\n}\n\nmodule body() {\n    difference() {\n        union() {\n            // main torso\n            translate([-body_length/2, 0, 0])\n                rounded_box(body_length, body_width, body_height, 5);\n\n            // chest bulge\n            translate([body_length/2-4, 0, body_height/2-3])\n                sphere(6);\n        }\n        \n        // hollow inside to save material\n        translate([-body_length/2+wall, wall, wall])\n            rounded_box(body_length-2*wall, body_width-2*wall, body_height-wall, 3);\n    }\n}\n\nmodule tail() {\n    translate([-body_length/2-3, 0, 0])\n        rotate([0, 90-15, 0])\n        hull() {\n            // base\n            translate([0, 0, 0])\n                scale([1, 1.2, 0.8])\n                sphere(5);\n            // mid\n            translate([-tail_length/2, 0, 2])\n                scale([1, 0.9, 0.7])\n                sphere(4.5);\n            // tip\n            translate([-tail_length, 0, 4])\n                scale([0.7, 0.6, 0.5])\n                sphere(3.5);\n        }\n}\n\nmodule head() {\n    translate([body_length/2-2, 0, body_height-2])\n        difference() {\n            sphere(d=head_d);\n\n            // snout\n            translate([head_d/2-1, 0, -head_d/4])\n                rotate([0, 90, 0])\n                cylinder(h=head_d/2, r1=head_d/3, r2=head_d/5, center=true);\n            \n            // hollow\n            sphere(d=head_d-wall*2);\n        }\n}\n\nmodule ear(side) {\n    translate([head_d/2-2, side*head_d/3, head_d/2-1])\n        rotate([0, -20*side, 0])\n        hull() {\n            sphere(ear_size);\n            translate([ear_size/2, 0, ear_size])\n                sphere(ear_size/1.3);\n        }\n}\n\nmodule limb(len, is_leg=false) {\n    rotate([0, is_leg?0:-20, 0])\n    hull() {\n        sphere(paw_size);\n        translate([0, 0, len])\n            sphere(paw_size*0.8);\n    }\n}\n\nmodule paw() {\n    hull() {\n        sphere(paw_size);\n        translate([0, paw_size*1.5, 0])\n            sphere(paw_size*0.8);\n        translate([paw_size, 0, 0])\n            sphere(paw_size*0.6);\n    }\n}\n\nmodule eye(side) {\n    translate([head_d/2-1, side*head_d/3.5, head_d/4])\n        sphere(eye_size);\n}\n\nmodule nose() {\n    translate([head_d/2+2, 0, 0])\n        sphere(nose_size);\n}\n\n// Assembly\nunion() {\n    body();\n    tail();\n    head();\n    \n    // ears\n    ear(1);\n    ear(-1);\n    \n    // eyes\n    eye(1);\n    eye(-1);\n    nose();\n    \n    // legs\n    translate([body_length/2-6, body_width/2-3, -leg_len])\n        limb(leg_len, true);\n    translate([body_length/2-6, -body_width/2+3, -leg_len])\n        limb(leg_len, true);\n    translate([-body_length/2+4, body_width/2-3, -leg_len])\n        limb(leg_len, true);\n    translate([-body_length/2+4, -body_width/2+3, -leg_len])\n        limb(leg_len, true);\n    \n    // arms\n    translate([body_length/2-2, body_width/2-2, body_height/2-3])\n        rotate([0, 0, 45])\n        limb(arm_len);\n    translate([body_length/2-2, -body_width/2+2, body_height/2-3])\n        rotate([0, 0, -45])\n        limb(arm_len);\n    \n    // paws\n    translate([body_length/2-2, body_width/2-2, body_height/2-3-arm_len])\n        paw();\n    translate([body_length/2-2, -body_width/2+2, body_height/2-3-arm_len])\n        paw();\n}",
    "renders": true
  },
  {
    "animal": "starfish",
    "openscad_code": "// Starfish - Realistic Style, Medium Complexity\n// Designed for 3D printing with no overhangs\n\n// Parameters\n$fn = 30;\nbody_height = 8;\narm_length = 40;\narm_width = 12;\narm_thickness = 6;\ncenter_radius = 15;\nscale_factor = 1.0;\n\n// Main starfish module\nmodule starfish() {\n    // Central body\n    difference() {\n        union() {\n            // Central disk\n            cylinder(h=body_height, r=center_radius, center=true);\n            \n            // Add slight dome on top\n            translate([0,0,body_height/2])\n                scale([1,1,0.5])\n                    sphere(r=center_radius);\n        }\n        \n        // Hollow out bottom for printing\n        translate([0,0,-body_height])\n            cylinder(h=body_height+1, r=center_radius-3);\n    }\n    \n    // Generate 5 arms in star pattern\n    for (i = [0:4]) {\n        rotate([0,0,i*72])\n            arm();\n    }\n    \n    // Add texture details\n    texture_details();\n}\n\n// Single arm module\nmodule arm() {\n    translate([center_radius, 0, 0])\n    rotate([0,90,0])\n    union() {\n        // Main arm segment\n        difference() {\n            hull() {\n                // Base cylinder\n                translate([0,0,0])\n                    cylinder(h=arm_length, r=arm_width/2, r2=arm_width/3);\n                \n                // Tip\n                translate([0,0,arm_length])\n                    sphere(r=arm_width/3);\n            }\n            \n            // Hollow arm\n            translate([0,0,-1])\n                cylinder(h=arm_length+2, r=arm_width/2-2, r2=arm_width/3-1.5);\n        }\n        \n        // Underside tube feet\n        for (j = [5:10:arm_length-5]) {\n            translate([0,0,j])\n                rotate([90,0,0])\n                    cylinder(h=2, r=1.5);\n        }\n    }\n}\n\n// Surface details for realism\nmodule texture_details() {\n    // Top surface bumps\n    for (i = [0:30]) {\n        angle = i*12;\n        radius = center_radius*0.8 + (i%3)*2;\n        translate([cos(angle)*radius, sin(angle)*radius, body_height/2+1])\n            scale([1,1,0.3])\n                sphere(r=1.5);\n    }\n    \n    // Arm ridges\n    for (i = [0:4]) {\n        rotate([0,0,i*72])\n            for (j = [0:5:arm_length-5]) {\n                pos = center_radius + j;\n                translate([cos(0)*pos, sin(0)*pos, body_height/2])\n                    rotate([0,0,0])\n                        cube([arm_width-2, 1, 1], center=true);\n            }\n    }\n}\n\n// Scale and render\nscale([scale_factor, scale_factor, scale_factor])\n    starfish();",
    "renders": true
  },
  {
    "animal": "starling",
    "openscad_code": "// Starling model - medium complexity realistic style\n// Approximately 80mm long, 3D printable with minimal supports\n\n// Overall scale\nscale = 1.0;\n\n// Main module\nmodule starling() {\n    // Body\n    color(\"black\") {\n        body();\n        head();\n        wings();\n        tail();\n        feet();\n        beak();\n    }\n}\n\n// Body - oval shaped\nmodule body() {\n    difference() {\n        // Main body\n        scale([1.2, 0.8, 0.9]) \n            sphere(r=15);\n        \n        // Neck transition\n        translate([18, 0, 0])\n            scale([2, 1.5, 1.5])\n                sphere(r=8);\n    }\n}\n\n// Head - smaller sphere with neck transition\nmodule head() {\n    translate([25, 0, 5])\n        sphere(r=10);\n}\n\n// Beak - cone shape\nmodule beak() {\n    translate([35, 0, 7])\n        rotate([0, -20, 0])\n            cylinder(h=15, r1=2, r2=0.5, $fn=8);\n}\n\n// Wings - layered feathers\nmodule wings() {\n    // Left wing\n    translate([-5, 12, 5])\n        rotate([0, 10, -20])\n            wing_half();\n    \n    // Right wing\n    mirror([0, 1, 0])\n        translate([-5, 12, 5])\n            rotate([0, 10, -20])\n                wing_half();\n}\n\n// Single wing half\nmodule wing_half() {\n    // Primary wing section\n    translate([5, 0, 0])\n        scale([1.5, 0.3, 0.8])\n            sphere(r=12);\n    \n    // Secondary wing section\n    translate([0, 0, -3])\n        scale([1.2, 0.2, 0.6])\n            sphere(r=10);\n    \n    // Wing tip\n    translate([15, 0, 2])\n        rotate([0, 0, 30])\n            scale([0.8, 0.2, 0.4])\n                cylinder(h=10, r1=3, r2=0.5);\n    \n    // Wing feathers\n    for(i = [0:3]) {\n        translate([8 + i*3, 0, -2 - i*1.5])\n            rotate([0, 0, i*15])\n                scale([0.5, 0.1, 0.3])\n                    cylinder(h=8, r1=2, r2=0.5);\n    }\n}\n\n// Tail - fan shaped feathers\nmodule tail() {\n    translate([-20, 0, 0])\n        rotate([0, 20, 0])\n            tail_feathers();\n}\n\nmodule tail_feathers() {\n    // Central tail feather\n    scale([2, 0.5, 0.3])\n        cylinder(h=15, r1=3, r2=1);\n    \n    // Side tail feathers\n    for(i = [-1:1:1]) {\n        if(i != 0) {\n            translate([0, i*4, 0])\n                rotate([0, 0, i*15])\n                    scale([1.8, 0.4, 0.25])\n                        cylinder(h=14, r1=2.5, r2=0.5);\n        }\n    }\n}\n\n// Feet - simple cylindrical legs and toes\nmodule feet() {\n    // Left foot\n    translate([0, 6, -10])\n        foot();\n    \n    // Right foot\n    translate([0, -6, -10])\n        foot();\n}\n\nmodule foot() {\n    // Leg\n    cylinder(h=8, r=1.5);\n    \n    // Toes\n    for(i = [-30:30:60]) {\n        translate([0, 0, -8])\n            rotate([0, 0, i])\n                translate([3, 0, 0])\n                    cylinder(h=5, r=0.8);\n    }\n    \n    // Back toe\n    translate([0, 0, -8])\n        rotate([0, 0, 180])\n            translate([2.5, 0, 0])\n                cylinder(h=4, r=0.8);\n}\n\n// Eye details\nmodule eyes() {\n    color(\"white\") {\n        translate([30, 3, 8])\n            sphere(r=1.5);\n        translate([30, -3, 8])\n            sphere(r=1.5);\n    }\n    \n    color(\"black\") {\n        translate([31, 3, 8])\n            sphere(r=0.8);\n        translate([31, -3, 8])\n            sphere(r=0.8);\n    }\n}\n\n// Generate the model\nstarling();\neyes();",
    "renders": true
  },
  {
    "animal": "steenbok",
    "openscad_code": "// Steenbok - Medium complexity realistic style\n// Total height ~60mm, length ~75mm\n\n$fn = 32;  // Smooth curves for 3D printing\n\nmodule steenbok() {\n    // Body - main torso\n    union() {\n        // Main body - oval shape\n        translate([0, 0, 15])\n            scale([1.5, 0.8, 1])\n            sphere(15);\n        \n        // Chest extension\n        translate([15, 0, 12])\n            scale([1.2, 0.9, 0.8])\n            sphere(12);\n        \n        // Hindquarters\n        translate([-15, 0, 12])\n            scale([1.3, 1, 0.9])\n            sphere(12);\n    }\n    \n    // Neck\n    translate([10, 0, 30])\n        rotate([0, -20, 0])\n        cylinder(15, 6, 5);\n    \n    // Head\n    translate([20, 0, 42])\n        scale([1, 0.7, 0.8])\n        sphere(8);\n    \n    // Muzzle\n    translate([27, 0, 40])\n        scale([1.5, 0.6, 0.6])\n        sphere(5);\n    \n    // Ears - large and pointed\n    module ear() {\n        rotate([0, -10, 0])\n        scale([0.3, 1, 2])\n        cylinder(8, 3, 0.5);\n    }\n    \n    translate([18, 5, 48])\n        ear();\n    \n    translate([18, -5, 48])\n        mirror([0, 1, 0])\n        ear();\n    \n    // Horns - short and straight\n    module horn() {\n        cylinder(12, 1, 0.5);\n    }\n    \n    translate([20, 2, 48])\n        horn();\n    \n    translate([20, -2, 48])\n        horn();\n    \n    // Legs\n    module leg(height) {\n        // Upper leg\n        translate([0, 0, -height/2])\n            cylinder(height, 3, 2.5);\n        \n        // Lower leg\n        translate([0, 0, -height+2])\n            cylinder(height*0.8, 2.5, 1.5);\n    }\n    \n    // Front legs\n    translate([12, 6, 8])\n        rotate([0, 5, 0])\n        leg(20);\n    \n    translate([12, -6, 8])\n        rotate([0, 5, 0])\n        leg(20);\n    \n    // Hind legs\n    translate([-12, 6, 8])\n        rotate([0, -5, 0])\n        leg(22);\n    \n    translate([-12, -6, 8])\n        rotate([0, -5, 0])\n        leg(22);\n    \n    // Tail\n    translate([-20, 0, 20])\n        rotate([20, 0, 0])\n        cylinder(6, 1, 0.5);\n    \n    // Eyes\n    translate([24, 2.5, 42])\n        sphere(1);\n    \n    translate([24, -2.5, 42])\n        sphere(1);\n    \n    // Nose\n    translate([30, 0, 40])\n        sphere(1.5);\n}\n\n// Create the steenbok\nsteenbok();",
    "renders": true
  },
  {
    "animal": "stilt",
    "openscad_code": "// Realistic Stilt Model - Medium Complexity\n// Designed for 3D printing with no overhangs\n\n// Parameters\nfoot_length = 45;\nfoot_width = 20;\nfoot_height = 15;\npole_diameter = 8;\npole_height = 80;\nbase_diameter = 35;\nbase_height = 15;\nstrap_width = 8;\nstrap_thickness = 2;\n\nmodule foot() {\n    // Main foot platform\n    difference() {\n        translate([0, 0, foot_height/2]) {\n            cube([foot_length, foot_width, foot_height], center=true);\n        }\n        \n        // Heel cutout for comfort\n        translate([-foot_length/2 + foot_length/4, 0, foot_height - 2]) {\n            cube([foot_length/2, foot_width - 6, foot_height], center=true);\n        }\n        \n        // Toe grooves\n        for(i = [1:3]) {\n            translate([foot_length/2 - i*5, 0, foot_height/2]) {\n                cube([2, foot_width - 4, foot_height], center=true);\n            }\n        }\n    }\n    \n    // Side supports\n    translate([-foot_length/2 + 5, foot_width/2 + 1, foot_height/2]) {\n        cube([10, 2, foot_height], center=true);\n    }\n    mirror([0,1,0]) {\n        translate([-foot_length/2 + 5, foot_width/2 + 1, foot_height/2]) {\n            cube([10, 2, foot_height], center=true);\n        }\n    }\n}\n\nmodule pole_connection() {\n    // Pole mount cylinder\n    cylinder(h=base_height, d=base_diameter, $fn=32);\n    \n    // Reinforcement ribs\n    for(i = [0:3]) {\n        rotate([0, 0, i*90]) {\n            translate([base_diameter/2 - 3, 0, base_height/2]) {\n                cube([6, 3, base_height], center=true);\n            }\n        }\n    }\n    \n    // Pole hole\n    translate([0, 0, -0.1]) {\n        cylinder(h=base_height + 0.2, d=pole_diameter + 0.4, $fn=32);\n    }\n}\n\nmodule pole() {\n    // Main pole\n    cylinder(h=pole_height, d=pole_diameter, $fn=32);\n    \n    // Tapered tip\n    translate([0, 0, pole_height]) {\n        cylinder(h=5, d1=pole_diameter, d2=pole_diameter*0.7, $fn=32);\n    }\n    \n    // Rubber tip\n    translate([0, 0, pole_height + 5]) {\n        cylinder(h=3, d=pole_diameter*0.8, $fn=32);\n    }\n}\n\nmodule straps() {\n    // Ankle strap\n    translate([0, 0, foot_height + 3]) {\n        for(i = [0:1]) {\n            rotate([0, 0, i*180]) {\n                translate([0, foot_width/2 + strap_width/2, 0]) {\n                    cube([foot_length - 10, strap_width, strap_thickness], center=true);\n                }\n            }\n        }\n    }\n    \n    // Heel strap\n    translate([-foot_length/4, 0, foot_height + 3]) {\n        rotate([90, 0, 0]) {\n            cylinder(h=foot_width + strap_width, d=strap_thickness*2, $fn=16);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Foot platform\n    foot();\n    \n    // Pole connection at center\n    translate([0, 0, foot_height]) {\n        pole_connection();\n    }\n    \n    // Pole\n    translate([0, 0, foot_height + base_height]) {\n        pole();\n    }\n    \n    // Straps\n    straps();\n}",
    "renders": true
  },
  {
    "animal": "stingray",
    "openscad_code": "// Realistic Stingray - Medium Complexity\n// Designed for 3D printing - approximately 80mm wide\n\n// Overall dimensions\nbody_length = 80;\nbody_width = 60;\nthickness = 4;\n\n// Body module - main diamond shape\nmodule body() {\n    // Central body disc\n    difference() {\n        scale([1, 0.7, 0.2]) \n            sphere(d=body_width, $fn=50);\n        \n        // Flatten the bottom\n        translate([0, 0, -body_width*0.1])\n            cube([body_width*2, body_width*2, body_width*0.2], center=true);\n    }\n    \n    // Tail base\n    translate([0, -body_length/2, -thickness/4])\n        scale([0.3, 1, 0.3])\n            cylinder(h=body_length/3, d=body_width/3, $fn=20);\n}\n\n// Tail module with stinger\nmodule tail() {\n    // Main tail\n    translate([0, -body_length/2 - 15, -thickness/2])\n        rotate([0, 15, 0])\n            scale([0.15, 1, 0.15])\n                cylinder(h=body_length/2, d=body_width/3, $fn=8);\n    \n    // Stinger tip\n    translate([0, -body_length/2 - 35, -thickness/2])\n        rotate([0, 15, 0])\n            cone(h=8, d1=2, d2=0.1, $fn=6);\n}\n\n// Eyes module\nmodule eyes() {\n    eye_pos = body_width/4;\n    eye_size = 2;\n    \n    // Left eye\n    translate([eye_pos, body_length/4, thickness/2])\n        sphere(d=eye_size, $fn=12);\n    \n    // Right eye\n    translate([-eye_pos, body_length/4, thickness/2])\n        sphere(d=eye_size, $fn=12);\n}\n\n// Gill slits\nmodule gills() {\n    for(i=[1:5]) {\n        translate([0, body_length/4 - i*3, -thickness/4])\n            rotate([0, 90, 0])\n                cylinder(h=0.5, d=1.5, $fn=6);\n    }\n}\n\n// Wing ridges for texture\nmodule wing_ridges() {\n    for(angle=[-60:10:60]) {\n        rotate([0, 0, angle])\n            translate([0, 0, thickness/4])\n                scale([0.8, 0.05, 0.05])\n                    sphere(d=body_width/2, $fn=8);\n    }\n}\n\n// Mouth\nmodule mouth() {\n    translate([0, body_length/3, -thickness/2])\n        rotate([90, 0, 0])\n            cylinder(h=0.5, d=body_width/6, $fn=20);\n}\n\n// Pectoral fin edges\nmodule fin_edges() {\n    // Left wing edge\n    translate([body_width/2 - 5, 0, 0])\n        rotate([0, 0, -30])\n            scale([0.5, 0.05, 0.05])\n                cylinder(h=body_width/3, d=body_width/4, $fn=8);\n    \n    // Right wing edge  \n    translate([-body_width/2 + 5, 0, 0])\n        rotate([0, 0, 30])\n            scale([0.5, 0.05, 0.05])\n                cylinder(h=body_width/3, d=body_width/4, $fn=8);\n}\n\n// Main assembly\nunion() {\n    body();\n    tail();\n    eyes();\n    gills();\n    wing_ridges();\n    mouth();\n    fin_edges();\n}",
    "renders": true
  },
  {
    "animal": "stoat",
    "openscad_code": "// Stoat 3D model - medium complexity realistic style\n// Overall length: 80mm, height: 25mm, width: 20mm\n\n$fn = 32;\n\nmodule stoat() {\n    // Main body - elongated oval\n    translate([0, 0, 10])\n    scale([1.2, 0.8, 0.6])\n    sphere(r = 15);\n    \n    // Head - smaller sphere\n    translate([-25, 0, 15])\n    sphere(r = 10);\n    \n    // Snout - tapered cylinder\n    translate([-35, 0, 15])\n    rotate([0, 90, 0])\n    cylinder(h = 15, r1 = 7, r2 = 4);\n    \n    // Ears - two small spheres\n    translate([-28, 8, 22])\n    sphere(r = 4);\n    translate([-28, -8, 22])\n    sphere(r = 4);\n    \n    // Neck - connecting piece\n    translate([-20, 0, 12])\n    scale([1.5, 1, 1])\n    sphere(r = 8);\n    \n    // Front legs - cylinders\n    for(x = [-15, -5]) {\n        translate([x, 10, 0])\n        rotate([90, 0, 0])\n        cylinder(h = 12, r = 4);\n        translate([x, -10, 0])\n        rotate([90, 0, 0])\n        cylinder(h = 12, r = 4);\n    }\n    \n    // Hind legs - longer cylinders with paws\n    for(x = [15, 25]) {\n        translate([x, 8, 0])\n        rotate([90, 0, 0])\n        cylinder(h = 15, r = 5);\n        translate([x, -8, 0])\n        rotate([90, 0, 0])\n        cylinder(h = 15, r = 5);\n    }\n    \n    // Tail - curved cylinder segments\n    for(i = [0:15:60]) {\n        rotate([0, 0, i])\n        translate([30 + i/2, 0, 10 + sin(i) * 5])\n        rotate([0, -i/8, 0])\n        cylinder(h = 8, r1 = 6 - i/20, r2 = 5 - i/20);\n    }\n    \n    // Eyes - small spheres\n    translate([-33, 4, 17])\n    sphere(r = 2);\n    translate([-33, -4, 17])\n    sphere(r = 2);\n    \n    // Nose - tiny sphere\n    translate([-42, 0, 15])\n    sphere(r = 1.5);\n    \n    // Whiskers - thin cylinders\n    for(angle = [-30, 0, 30]) {\n        translate([-38, 0, 15])\n        rotate([0, angle, 0])\n        cylinder(h = 8, r = 0.5);\n    }\n    \n    // Body fur texture - small bumps\n    for(i = [0:10]) {\n        for(j = [0:8]) {\n            theta = i * 36;\n            phi = j * 45;\n            rx = cos(theta) * sin(phi) * 12;\n            ry = sin(theta) * sin(phi) * 8;\n            rz = cos(phi) * 6 + 10;\n            translate([rx, ry, rz])\n            sphere(r = 1);\n        }\n    }\n}\n\nstoat();",
    "renders": true
  },
  {
    "animal": "stork",
    "openscad_code": "// Realistic Stork - Medium Complexity\n// Designed for 3D printing, no overhangs\n\n// Main parameters\nbody_length = 30;\nbody_height = 25;\nneck_length = 20;\nhead_size = 12;\nleg_length = 35;\nwing_span = 45;\n\nmodule stork_body() {\n    // Main body - ellipsoid shape using spheres\n    union() {\n        // Upper body\n        translate([0, 0, body_height/2])\n            scale([1.2, 0.8, 1])\n            sphere(d=body_length, $fn=32);\n        \n        // Lower body/belly\n        translate([0, 0, body_height/3])\n            scale([1.1, 1, 0.7])\n            sphere(d=body_length*0.9, $fn=32);\n    }\n}\n\nmodule stork_neck() {\n    // Curved neck using cylinders\n    union() {\n        // Neck segment 1\n        translate([-body_length/3, 0, body_height*0.8])\n            rotate([0, 45, 0])\n            cylinder(h=neck_length/2, d1=8, d2=6, $fn=16);\n        \n        // Neck segment 2\n        translate([-body_length/3 - neck_length/3, 0, body_height*0.8 + neck_length/3])\n            rotate([0, 30, 0])\n            cylinder(h=neck_length/2, d1=6, d2=4, $fn=16);\n    }\n}\n\nmodule stork_head() {\n    // Head with long beak\n    union() {\n        // Head sphere\n        translate([-body_length/2 - neck_length, 0, body_height + neck_length/2])\n            sphere(d=head_size, $fn=32);\n        \n        // Beak\n        translate([-body_length/2 - neck_length - head_size/2, 0, body_height + neck_length/2])\n            rotate([0, -20, 0])\n            cylinder(h=head_size*1.5, d1=2, d2=4, $fn=16);\n        \n        // Beak tip\n        translate([-body_length/2 - neck_length - head_size*1.2, 0, body_height + neck_length/2 - 2])\n            sphere(d=3, $fn=16);\n    }\n}\n\nmodule stork_legs() {\n    // Two legs with feet\n    for(side = [-1, 1]) {\n        // Upper leg\n        translate([body_length/4, side*5, 0])\n            rotate([0, side*5, 0])\n            cylinder(h=leg_length/2, d=3, $fn=16);\n        \n        // Lower leg\n        translate([body_length/4 + 5, side*5, -leg_length/2])\n            rotate([0, side*5, 0])\n            cylinder(h=leg_length/2, d=2.5, $fn=16);\n        \n        // Foot\n        translate([body_length/4 + 10, side*7, -leg_length + 2])\n            union() {\n                // Main foot\n                cube([8, 3, 1]);\n                // Toes\n                for(i = [0:2]) {\n                    translate([i*2.5, side*2, 0])\n                        cube([2, 2, 1]);\n                }\n            }\n    }\n}\n\nmodule stork_wings() {\n    // Folded wings against body\n    for(side = [-1, 1]) {\n        // Main wing\n        translate([0, side*body_length/3, body_height*0.7])\n            rotate([0, 0, side*20])\n            scale([1.2, 0.2, 0.8])\n            sphere(d=wing_span/2, $fn=32);\n        \n        // Wing tip\n        translate([wing_span/4, side*body_length/3 + side*5, body_height*0.8])\n            rotate([0, 0, side*30])\n            scale([0.8, 0.15, 0.6])\n            sphere(d=wing_span/3, $fn=32);\n    }\n}\n\nmodule stork_tail() {\n    // Fan tail\n    translate([body_length/2, 0, body_height/3])\n        rotate([0, -20, 0])\n        scale([0.8, 1, 0.3])\n        sphere(d=body_length/3, $fn=32);\n}\n\n// Assemble the stork\nunion() {\n    stork_body();\n    stork_neck();\n    stork_head();\n    stork_legs();\n    stork_wings();\n    stork_tail();\n}",
    "renders": true
  },
  {
    "animal": "sturgeon",
    "openscad_code": "// Sturgeon - medium complexity realistic style\n// Total length ~80mm\n\n$fn = 24;\n\nmodule sturgeon() {\n    // Main body - elongated ellipsoid\n    union() {\n        // Body core\n        translate([0, 0, 0])\n            scale([1.2, 0.6, 0.3])\n            sphere(15);\n        \n        // Tail extension\n        translate([-25, 0, 0])\n            scale([2.5, 0.4, 0.2])\n            sphere(10);\n        \n        // Head\n        translate([20, 0, 2])\n            scale([0.8, 0.7, 0.7])\n            sphere(12);\n    }\n    \n    // Snout\n    translate([32, 0, 3])\n        rotate([0, 20, 0])\n        scale([0.5, 0.4, 0.3])\n        cylinder(h=15, r1=6, r2=2);\n    \n    // Dorsal fin base\n    translate([-5, 0, 8])\n        scale([1.5, 0.1, 0.8])\n        sphere(8);\n    \n    // Dorsal fin rays\n    for(i = [-25:5:-5]) {\n        translate([i, 0, 8])\n            rotate([30, 0, 0])\n            cube([1, 0.5, 12], center=true);\n    }\n    \n    // Caudal fin top\n    translate([-35, 0, 6])\n        rotate([0, 10, 0])\n        scale([0.8, 0.1, 1.5])\n        sphere(10);\n    \n    // Caudal fin bottom\n    translate([-35, 0, -2])\n        rotate([0, -10, 0])\n        scale([0.6, 0.1, 1])\n        sphere(8);\n    \n    // Pectoral fins\n    translate([5, 8, -2])\n        rotate([0, 0, -20])\n        scale([0.8, 0.1, 1.2])\n        sphere(6);\n    \n    mirror([0, 1, 0])\n        translate([5, 8, -2])\n        rotate([0, 0, -20])\n        scale([0.8, 0.1, 1.2])\n        sphere(6);\n    \n    // Ventral fins\n    translate([-10, 5, -4])\n        rotate([0, 0, -30])\n        scale([0.6, 0.1, 0.8])\n        sphere(5);\n    \n    mirror([0, 1, 0])\n        translate([-10, 5, -4])\n        rotate([0, 0, -30])\n        scale([0.6, 0.1, 0.8])\n        sphere(5);\n    \n    // Scutes (bony plates) along back\n    for(i = [15:-3:-30]) {\n        translate([i, 0, 7])\n            scale([0.3, 0.3, 0.2])\n            sphere(3);\n    }\n    \n    // Scutes along sides\n    for(i = [12:-3:-25]) {\n        translate([i, 6, 2])\n            scale([0.2, 0.2, 0.2])\n            sphere(2.5);\n        \n        translate([i, -6, 2])\n            scale([0.2, 0.2, 0.2])\n            sphere(2.5);\n    }\n    \n    // Barbels\n    translate([28, 2, -2])\n        rotate([0, -45, 0])\n        cylinder(h=8, r1=1, r2=0.5);\n    \n    translate([28, -2, -2])\n        rotate([0, -45, 0])\n        cylinder(h=8, r1=1, r2=0.5);\n    \n    translate([28, 4, 0])\n        rotate([0, -45, 0])\n        cylinder(h=7, r1=0.8, r2=0.4);\n    \n    translate([28, -4, 0])\n        rotate([0, -45, 0])\n        cylinder(h=7, r1=0.8, r2=0.4);\n    \n    // Mouth\n    translate([34, 0, -1])\n        rotate([0, -20, 0])\n        scale([0.8, 3, 0.5])\n        cylinder(h=5, r1=1, r2=1.5);\n    \n    // Eyes\n    translate([25, 4, 5])\n        sphere(1.5);\n    \n    translate([25, -4, 5])\n        sphere(1.5);\n}\n\n// Main model\nscale(1.2)\n    sturgeon();",
    "renders": true
  },
  {
    "animal": "sugarbird",
    "openscad_code": "// Sugarbird - realistic medium complexity\n// Approx 70mm long beak to tail\n\nmodule sugarbird() {\n    // Body\n    difference() {\n        union() {\n            // Main body\n            sphere(10);\n            // Extended tail area\n            translate([-10,0,0]) scale([2.5,1,1]) sphere(8);\n        }\n        // Undercut for printing\n        translate([0,0,-10]) cube([30,30,10], center=true);\n    }\n    \n    // Head\n    translate([12,0,5]) rotate([0,20,0]) sphere(7);\n    \n    // Long curved beak\n    translate([19,-1,8]) rotate([0,-30,15]) \n        scale([2,0.4,0.4]) cylinder(h=15, r1=2, r2=0.5);\n    \n    // Eyes\n    for(side = [-1,1]) {\n        translate([15, side*3, 7]) sphere(1.2);\n        translate([15.5, side*3, 7.5]) sphere(0.6);\n    }\n    \n    // Wings\n    for(side = [-1,1]) {\n        translate([0, side*10, 2]) rotate([0,0,side*20]) {\n            difference() {\n                scale([1.5,3,0.3]) sphere(5);\n                translate([0,-3,-1]) cube([10,6,3], center=true);\n            }\n        }\n    }\n    \n    // Tail feathers\n    for(i = [0:3]) {\n        rotate([0,0,(i-1.5)*15]) \n            translate([-18,0,2]) scale([2,0.3,0.8]) cylinder(h=12, r1=3, r2=1);\n    }\n    \n    // Legs\n    for(side = [-1,1]) {\n        translate([2, side*4, -9]) {\n            cylinder(h=8, r=1);\n            // Feet\n            rotate([90,0,0]) {\n                for(j = [0:2]) {\n                    translate([0, j*2-2, 0]) \n                        rotate([0,-15,0]) cylinder(h=3, r=0.5);\n                }\n            }\n        }\n    }\n    \n    // Chest details\n    for(i = [0:5]) {\n        rotate([0,0,i*60]) \n            translate([5,0,-3]) scale([1,0.5,0.5]) sphere(3);\n    }\n}\n\n// Main assembly\nrotate([0,0,20]) sugarbird();",
    "renders": true
  },
  {
    "animal": "sugarglider",
    "openscad_code": "// Sugar Glider - Realistic Medium Complexity\n// Designed for 3D printing with no overhangs\n\n$fn = 24;\n\n// Main body\nmodule body() {\n    // Torso\n    union() {\n        // Main torso oval\n        translate([0, 0, 8])\n            scale([1.8, 1, 1.2])\n            sphere(10);\n        \n        // Belly\n        translate([0, 0, 6])\n            scale([1.6, 0.8, 0.6])\n            sphere(8);\n    }\n}\n\n// Head\nmodule head() {\n    union() {\n        // Main head sphere\n        translate([0, 13, 11])\n            scale([1.1, 1.3, 1])\n            sphere(7);\n        \n        // Snout\n        translate([0, 19, 10])\n            scale([0.6, 0.8, 0.5])\n            sphere(4);\n    }\n}\n\n// Ears\nmodule ears() {\n    // Left ear\n    translate([-5, 10, 15])\n        rotate([0, 20, -30])\n        scale([0.8, 0.1, 1.2])\n        sphere(3);\n    \n    // Right ear\n    translate([5, 10, 15])\n        rotate([0, 20, 30])\n        scale([0.8, 0.1, 1.2])\n        sphere(3);\n}\n\n// Eyes\nmodule eyes() {\n    // Left eye\n    translate([-3, 15, 12])\n        scale([0.8, 0.8, 0.8])\n        sphere(1.5);\n    \n    // Right eye\n    translate([3, 15, 12])\n        scale([0.8, 0.8, 0.8])\n        sphere(1.5);\n}\n\n// Limbs\nmodule limbs() {\n    // Front legs\n    for(side = [-1, 1]) {\n        // Upper arm\n        translate([side * 8, 5, 9])\n            rotate([-30, 0, side * 20])\n            scale([0.4, 0.4, 1.2])\n            cylinder(h = 8, r = 2);\n        \n        // Forearm\n        translate([side * 10, 0, 7])\n            rotate([-60, 0, side * 30])\n            scale([0.3, 0.3, 1])\n            cylinder(h = 6, r = 1.5);\n        \n        // Paw\n        translate([side * 12, -3, 5])\n            sphere(2);\n    }\n    \n    // Hind legs\n    for(side = [-1, 1]) {\n        // Thigh\n        translate([side * 6, -8, 7])\n            rotate([20, 0, side * -10])\n            scale([0.5, 0.5, 1.5])\n            cylinder(h = 10, r = 2.5);\n        \n        // Lower leg\n        translate([side * 7, -15, 5])\n            rotate([40, 0, side * -20])\n            scale([0.4, 0.4, 1.2])\n            cylinder(h = 8, r = 2);\n        \n        // Foot\n        translate([side * 8, -20, 3])\n            sphere(2.5);\n    }\n}\n\n// Tail\nmodule tail() {\n    // Base of tail\n    translate([0, -12, 7])\n        rotate([30, 0, 0])\n        scale([1, 1, 2])\n        sphere(4);\n    \n    // Tail extension\n    translate([0, -18, 10])\n        rotate([45, 0, 0])\n        scale([0.8, 0.8, 1.5])\n        cylinder(h = 15, r = 2);\n}\n\n// Gliding membrane\nmodule membrane() {\n    // Left membrane\n    translate([-12, 0, 10])\n        rotate([0, 0, 90])\n        scale([1, 0.1, 2])\n        cylinder(h = 24, r = 8);\n    \n    // Right membrane\n    translate([12, 0, 10])\n        rotate([0, 0, 90])\n        scale([1, 0.1, 2])\n        cylinder(h = 24, r = 8);\n    \n    // Membrane webbing\n    for(i = [0:3]) {\n        y = i * 6 - 9;\n        // Left web\n        translate([-8, y, 10 - i])\n            scale([0.2, 1, 0.1])\n            cube([8, 2, 0.5]);\n        \n        // Right web\n        translate([8, y, 10 - i])\n            scale([0.2, 1, 0.1])\n            cube([8, 2, 0.5]);\n    }\n}\n\n// Assembly\ntranslate([0, 0, 0])\n    union() {\n        body();\n        head();\n        ears();\n        eyes();\n        limbs();\n        tail();\n        membrane();\n    }",
    "renders": true
  },
  {
    "animal": "sunbear",
    "openscad_code": "// Sunbear model - 3D printable\n// Size: ~80mm long\n\n// Overall scale factor\nscale_factor = 0.8;\n\n// Main body module\nmodule body() {\n    // Torso - slightly flattened ellipsoid\n    scale([1.2, 0.8, 0.7])\n    sphere(20);\n    \n    // Chest marking - lighter patch\n    translate([0, 0, -10])\n    scale([0.8, 0.6, 0.3])\n    sphere(15);\n}\n\n// Head module\nmodule head() {\n    // Main head shape\n    translate([-25, 0, 15])\n    scale([1.1, 1, 0.9])\n    sphere(15);\n    \n    // Snout extension\n    translate([-38, 0, 8])\n    scale([1, 0.8, 0.7])\n    sphere(8);\n    \n    // Ears - small and rounded\n    for(side = [-1, 1]) {\n        translate([-20, side*12, 25])\n        rotate([0, 90-20*side, 0])\n        scale([0.6, 0.6, 1])\n        cylinder(h=8, r1=6, r2=8);\n    }\n    \n    // Eyes\n    for(side = [-1, 1]) {\n        translate([-32, side*8, 18])\n        sphere(3);\n    }\n    \n    // Nose\n    translate([-42, 0, 8])\n    scale([1.5, 1, 0.8])\n    sphere(3);\n}\n\n// Leg module\nmodule leg(position, side) {\n    translate(position)\n    rotate([0, side*5, 0])\n    union() {\n        // Upper leg - slightly bent\n        translate([0, 0, 10])\n        rotate([20*side, 0, 0])\n        cylinder(h=25, r1=7, r2=6);\n        \n        // Lower leg\n        translate([0, 0, -15])\n        rotate([30*side, 0, 0])\n        cylinder(h=20, r1=6, r2=5);\n        \n        // Paw - flattened\n        translate([0, 0, -35])\n        scale([1.2, 1.2, 0.6])\n        sphere(7);\n    }\n}\n\n// Tail stub\nmodule tail() {\n    translate([22, 0, -5])\n    scale([1.5, 1, 1])\n    rotate([30, 0, 0])\n    cylinder(h=10, r1=4, r2=2);\n}\n\n// Claws for paws\nmodule claws() {\n    for(pos = [[-35, 8, -40], [-35, -8, -40], \n               [15, 8, -40], [15, -8, -40],\n               [0, 12, -40], [0, -12, -40],\n               [-15, 8, -40], [-15, -8, -40]]) {\n        translate(pos)\n        rotate([0, 90, 0])\n        cylinder(h=3, r1=1, r2=0.5);\n    }\n}\n\n// Main assembly\nscale([scale_factor, scale_factor, scale_factor])\nunion() {\n    // Body\n    body();\n    \n    // Head\n    head();\n    \n    // Legs - positioned for standing\n    leg([-10, 15, -20], 1);   // Front left\n    leg([-10, -15, -20], 1);  // Front right\n    leg([15, 12, -20], -1);   // Rear left\n    leg([15, -12, -20], -1);  // Rear right\n    \n    // Tail\n    tail();\n    \n    // Claws\n    claws();\n}",
    "renders": true
  },
  {
    "animal": "sunbird",
    "openscad_code": "// Sunbird Model - Realistic Style, Medium Complexity\n// Based on Olive-backed Sunbird (Cinnyris jugularis)\n\n// Main parameters\n$fn = 32;\nwall_thickness = 1.2;\n\nmodule body() {\n    // Main body - elongated oval\n    union() {\n        // Torso\n        translate([0, 0, 6])\n            scale([1, 0.8, 1.2])\n            sphere(r=6);\n        \n        // Abdomen\n        translate([0, 0, 0])\n            scale([0.8, 0.7, 1])\n            sphere(r=5);\n    }\n}\n\nmodule head() {\n    // Head with beak\n    union() {\n        // Head\n        translate([8, 0, 10])\n            scale([0.9, 0.9, 0.9])\n            sphere(r=4);\n        \n        // Beak - curved needle shape\n        translate([12, 0, 10])\n            rotate([0, -15, 0])\n            cylinder(h=8, r1=0.5, r2=0.2);\n        \n        // Eye\n        translate([10, 2.5, 11])\n            sphere(r=0.8);\n        \n        translate([10, -2.5, 11])\n            sphere(r=0.8);\n    }\n}\n\nmodule wing() {\n    // Single wing\n    difference() {\n        // Main wing shape\n        translate([0, 0, 8])\n            rotate([0, 0, 20])\n            scale([1.5, 0.2, 0.8])\n            sphere(r=5);\n        \n        // Wing tip cutout\n        translate([7, 0, 10])\n            rotate([0, 0, 30])\n            cube([3, 2, 2], center=true);\n    }\n}\n\nmodule wings() {\n    // Left wing\n    translate([-2, 4, 0])\n        wing();\n    \n    // Right wing\n    mirror([0, 1, 0])\n        translate([-2, 4, 0])\n            wing();\n}\n\nmodule tail() {\n    // Forked tail\n    union() {\n        // Left tail feather\n        translate([-7, 2, 4])\n            rotate([0, 0, -30])\n            cylinder(h=10, r1=1.5, r2=0.5);\n        \n        // Right tail feather\n        translate([-7, -2, 4])\n            rotate([0, 0, 30])\n            cylinder(h=10, r1=1.5, r2=0.5);\n        \n        // Tail base\n        translate([-5, 0, 4])\n            scale([1, 0.5, 0.3])\n            sphere(r=3);\n    }\n}\n\nmodule legs() {\n    // Simple legs with feet\n    for(side = [-1, 1]) {\n        // Leg\n        translate([2, side*2, 0])\n            cylinder(h=4, r=0.5);\n        \n        // Foot\n        translate([2, side*2.5, -2])\n            rotate([0, 90, 0])\n            cylinder(h=2, r=0.4);\n        \n        // Toes\n        for(i = [0:2]) {\n            translate([2 + i*0.8, side*3, -2])\n                rotate([0, 90, 0])\n                cylinder(h=1, r=0.2);\n        }\n    }\n}\n\nmodule perch() {\n    // Simple perch rod\n    cylinder(h=30, r=1);\n}\n\n// Assemble the bird\nunion() {\n    // Bird body\n    union() {\n        body();\n        head();\n        wings();\n        tail();\n        legs();\n    }\n    \n    // Perch\n    translate([0, 0, -4])\n        perch();\n}\n\n// Print orientation - bird upright\nrotate([0, 0, 0]) {\n    // Main assembly\n}",
    "renders": true
  },
  {
    "animal": "sunfish",
    "openscad_code": "// Sunfish (Mola mola) – medium-complexity, realistic style\n// Designed for FDM printing, 0.4 mm nozzle, 0.2 mm layers\n// Overall length ≈ 80 mm, thickness ≈ 12 mm, no steep overhangs\n\n$fa = 1;\n$fs = 0.5;\n\nmodule sunfish() {\n    // ---------- Main body ----------\n    // Tall oval body, slightly flattened along vertical axis\n    scale([1, 0.7, 0.35])\n        sphere(d = 60, $fn = 60);\n\n    // Dorsal fin – vertical thin plate\n    translate([0, 0, 10.5])\n        scale([1, 0.05, 1])\n            cylinder(h = 18, d = 28, $fn = 40);\n\n    // Anal fin – mirror of dorsal\n    translate([0, 0, -10.5])\n        scale([1, 0.05, 1])\n            cylinder(h = 18, d = 28, $fn = 40);\n\n    // ---------- Caudal fin (rudder-like) ----------\n    translate([-30, 0, 0])\n        rotate([0, 90, 0])\n            difference() {\n                scale([1, 0.8, 1])\n                    cylinder(h = 20, d = 20, $fn = 4);\n                translate([0, 0, -1])\n                    cube([40, 20, 22], center = true);\n            }\n\n    // ---------- Eyes ----------\n    for (eye = [[11, 21, 4], [11, -21, 4]]) {\n        translate(eye)\n            sphere(d = 6);\n        translate(eye + [1, 0, 2])\n            sphere(d = 3);  // pupil\n    }\n\n    // ---------- Mouth ----------\n    translate([27, 0, -3])\n        rotate([0, 90, 0])\n            difference() {\n                cylinder(h = 22, d = 8, $fn = 30);\n                translate([0, 0, -1])\n                    cube([30, 10, 10], center = true);\n            }\n\n    // ---------- Skin texture – small bumps ----------\n    for (i = [0 : 5 : 55]) {\n        for (j = [0 : 5 : 359]) {\n            theta = j;\n            phi = i;\n            x = 28 * sin(phi) * cos(theta);\n            y = 20 * sin(phi) * sin(theta);\n            z = 10 * cos(phi);\n            if (abs(y) > 5)  // skip centerline for cleaner print\n                translate([x, y, z])\n                    sphere(d = 1.5, $fn = 8);\n        }\n    }\n}\n\nsunfish();",
    "renders": true
  },
  {
    "animal": "surgeon",
    "openscad_code": "// Surgeon Figure - Realistic Style, Medium Complexity\n// Height: ~80mm, 3D-printable with no overhangs\n\nmodule head() {\n    // Skull\n    difference() {\n        sphere(d=22, $fn=48);\n        // Eye cavities\n        translate([-7, 10, 5]) rotate([0, 0, 0]) cylinder(h=10, d=6, $fn=16);\n        translate([7, 10, 5]) rotate([0, 0, 0]) cylinder(h=10, d=6, $fn=16);\n    }\n    \n    // Nose bridge\n    translate([0, 10, -2]) cube([8, 4, 4], center=true);\n    \n    // Ears\n    translate([-11, 0, 0]) rotate([0, 90, 0]) cylinder(h=6, d=8, $fn=16);\n    translate([11, 0, 0]) rotate([0, 90, 0]) cylinder(h=6, d=8, $fn=16);\n}\n\nmodule cap() {\n    // Surgical cap base\n    difference() {\n        translate([0, 0, 11]) sphere(d=24, $fn=48);\n        translate([0, 0, 5]) cube([30, 30, 20], center=true);\n    }\n    \n    // Tie strings\n    translate([-12, -15, 5]) rotate([0, -30, 0]) cylinder(h=15, d=2, $fn=8);\n    translate([12, -15, 5]) rotate([0, 30, 0]) cylinder(h=15, d=2, $fn=8);\n}\n\nmodule mask() {\n    // Surgical mask\n    translate([0, 12, -5]) cube([20, 2, 15], center=true);\n    \n    // Mask straps\n    for(side = [-1, 1]) {\n        translate([side*15, 5, 0]) rotate([0, 90, 0]) cylinder(h=15, d=1.5, $fn=8);\n    }\n}\n\nmodule torso() {\n    // Upper body\n    translate([0, 0, -25]) cube([25, 15, 35], center=true);\n    \n    // Lab coat collar\n    translate([0, 8, -8]) cube([20, 2, 6], center=true);\n    \n    // Lab coat lapels\n    for(side = [-1, 1]) {\n        translate([side*12, 8, -8]) cube([3, 2, 8], center=true);\n    }\n}\n\nmodule arms() {\n    for(side = [-1, 1]) {\n        // Upper arm\n        translate([side*15, 0, -15]) rotate([0, 0, side*20]) cylinder(h=20, d=8, $fn=16);\n        \n        // Lower arm\n        translate([side*22, -8, -25]) rotate([0, 0, side*20]) cylinder(h=18, d=7, $fn=16);\n        \n        // Hand\n        translate([side*28, -15, -25]) sphere(d=6, $fn=16);\n    }\n}\n\nmodule legs() {\n    for(side = [-1, 1]) {\n        // Thigh\n        translate([side*6, 0, -50]) cylinder(h=20, d=10, $fn=16);\n        \n        // Lower leg\n        translate([side*6, 0, -70]) cylinder(h=20, d=8, $fn=16);\n        \n        // Foot\n        translate([side*6, -5, -82]) cube([12, 20, 6], center=true);\n    }\n}\n\nmodule stethoscope() {\n    // Earpieces\n    translate([-7, 5, 0]) rotate([90, 0, 0]) cylinder(h=5, d=2, $fn=8);\n    translate([7, 5, 0]) rotate([90, 0, 0]) cylinder(h=5, d=2, $fn=8);\n    \n    // Tubing\n    hull() {\n        translate([-7, 5, -5]) sphere(d=2);\n        translate([7, 5, -5]) sphere(d=2);\n        translate([0, -8, -25]) sphere(d=3);\n    }\n    \n    // Chest piece\n    translate([0, -8, -25]) cylinder(h=8, d=6, $fn=16);\n    translate([0, -8, -29]) sphere(d=6);\n}\n\n// Main assembly\nunion() {\n    // Head and accessories\n    head();\n    cap();\n    mask();\n    \n    // Body\n    torso();\n    arms();\n    legs();\n    \n    // Accessories\n    stethoscope();\n}\n\n// Base platform for stable printing\ntranslate([0, 0, -85]) cube([40, 30, 3], center=true);",
    "renders": true
  },
  {
    "animal": "swan",
    "openscad_code": "// Swan - Realistic Style, Medium Complexity\n// Size: ~80mm length, printable without support\n\n$fn = 32; // Smooth curves\n\n// Overall scale\nswan_scale = 1;\n\nmodule swan_body() {\n    // Main body - elongated teardrop\n    difference() {\n        // Main hull\n        hull() {\n            translate([-5, 0, 0]) sphere([15, 12, 8]);\n            translate([20, 0, 0]) sphere([12, 10, 6]);\n            translate([35, 0, 0]) sphere([8, 7, 4]);\n        }\n        \n        // Tail indentation\n        translate([38, 0, -2]) rotate([0, 10, 0]) \n            cube([15, 12, 8], center=true);\n    }\n}\n\nmodule swan_neck() {\n    // S-curved neck\n    for(i=[0:5:50]) {\n        rotate([0, 0, sin(i*3.6)*10]) \n        translate([i*0.6, sin(i*0.1)*8, 15 + i*0.2]) \n        rotate([15, 0, 0])\n        scale([1 - i*0.01, 1 - i*0.01, 1 - i*0.01])\n        cylinder(h=5, r1=3.5 - i*0.05, r2=3 - i*0.05, center=true);\n    }\n}\n\nmodule swan_head() {\n    // Head with beak\n    union() {\n        // Head\n        translate([33, 7, 28]) rotate([0, -20, 30])\n        scale([1, 0.8, 1.1])\n        sphere(4);\n        \n        // Beak\n        translate([38, 10, 29]) rotate([0, -20, 45])\n        cylinder(h=8, r1=2.5, r2=0.5);\n        \n        // Eye\n        translate([35, 8.5, 30]) rotate([0, -20, 30])\n        sphere(0.7);\n    }\n}\n\nmodule swan_wing() {\n    // Curved wing\n    difference() {\n        // Main wing shape\n        hull() {\n            translate([5, 0, 5]) sphere([8, 3, 6]);\n            translate([15, -2, 8]) sphere([10, 3, 8]);\n            translate([25, -1, 6]) sphere([6, 2, 5]);\n        }\n        \n        // Feather details\n        for(i=[0:2:8]) {\n            translate([8 + i, 0, 6 + i*0.3]) \n            rotate([0, 20, 0])\n            cube([3, 6, 1], center=true);\n        }\n    }\n}\n\nmodule swan_leg() {\n    // Webbed foot\n    union() {\n        // Leg\n        translate([8, -8, 0]) \n        cylinder(h=5, r1=1, r2=0.8);\n        \n        // Foot\n        translate([8, -10, -2]) \n        scale([1, 1.5, 0.3])\n        sphere(2);\n        \n        // Toes\n        for(i=[-1:1]) {\n            translate([8 + i*1.2, -11.5, -2]) \n            scale([0.4, 1, 0.2])\n            sphere(1.5);\n        }\n    }\n}\n\n// Assembly\nscale(swan_scale) {\n    swan_body();\n    swan_neck();\n    swan_head();\n    \n    // Left wing\n    translate([0, 0, 0]) swan_wing();\n    \n    // Right wing (mirrored)\n    mirror([0, 1, 0]) translate([0, 0, 0]) swan_wing();\n    \n    // Legs\n    translate([0, 0, 0]) swan_leg();\n    translate([5, 0, 0]) mirror([1, 0, 0]) swan_leg();\n}",
    "renders": true
  },
  {
    "animal": "swallow",
    "openscad_code": "// Swallow model - medium complexity realistic style\n// Wingspan ~80mm, designed for 3D printing\n\n$fn = 36; // Smooth curves\nbody_thickness = 2;\nwing_thickness = 1.5;\n\nmodule body() {\n    // Main body - elongated ellipsoid\n    translate([0, 0, body_thickness/2])\n    scale([1, 0.7, 0.5])\n    sphere(r=10);\n    \n    // Head\n    translate([12, 0, body_thickness])\n    sphere(r=6);\n    \n    // Tail base\n    translate([-12, 0, body_thickness/2])\n    scale([1.2, 0.4, 0.3])\n    sphere(r=5);\n}\n\nmodule beak() {\n    // Conical beak\n    translate([18, 0, body_thickness])\n    rotate([0, 90, 0])\n    cylinder(h=8, r1=1, r2=0);\n}\n\nmodule tail() {\n    // Forked tail\n    for(side = [-1, 1]) {\n        translate([-12, side*3, body_thickness/2])\n        rotate([0, 0, side*20])\n        scale([1, 0.3, 0.2])\n        cylinder(h=15, r=4);\n    }\n}\n\nmodule wing() {\n    // Main wing shape\n    difference() {\n        // Wing outline\n        translate([0, 0, wing_thickness/2])\n        linear_extrude(height=wing_thickness)\n        polygon(points=[\n            [0, 0], [20, 15], [35, 10], [40, 0], [35, -10], [20, -15], [0, 0]\n        ]);\n        \n        // Wing tip cutout\n        translate([35, 0, wing_thickness/2])\n        cylinder(h=wing_thickness+1, r=3);\n    }\n    \n    // Wing detail - feathers\n    for(i = [1:3]) {\n        translate([10*i, 0, wing_thickness])\n        rotate([90, 0, 0])\n        scale([1, 0.1, 0.3])\n        cylinder(h=8, r=2);\n    }\n}\n\nmodule wings() {\n    // Left wing\n    translate([0, 8, body_thickness])\n    rotate([0, 0, -10])\n    wing();\n    \n    // Right wing\n    mirror([0, 1, 0])\n    translate([0, 8, body_thickness])\n    rotate([0, 0, -10])\n    wing();\n}\n\nmodule eye() {\n    // Eye socket\n    translate([15, 2.5, body_thickness+2])\n    sphere(r=1.2);\n    \n    // Eye pupil\n    translate([15.5, 2.5, body_thickness+3])\n    sphere(r=0.7);\n}\n\nmodule eyes() {\n    eye();\n    mirror([0, 1, 0]) eye();\n}\n\n// Assembly\nunion() {\n    body();\n    beak();\n    tail();\n    wings();\n    eyes();\n}",
    "renders": true
  },
  {
    "animal": "swamphen",
    "openscad_code": "// Swamphen (Porphyrio porphyrio) - Realistic Style, Medium Complexity\n// Basic dimensions (mm)\nbody_length = 60;\nbody_height = 35;\nhead_size = 12;\nbeak_length = 18;\nleg_length = 25;\nfoot_span = 20;\n\n// Wall thickness for 3D printing\nwall = 1.5;\n\nmodule body() {\n    // Main body with slight upward curve\n    difference() {\n        hull() {\n            translate([0, 0, body_height/2]) \n                scale([1.2, 0.8, 1]) sphere(d=body_height);\n            translate([body_length/3, 0, body_height/2+5]) \n                scale([0.9, 0.7, 0.9]) sphere(d=body_height*0.9);\n        }\n        // Hollow interior\n        translate([0, 0, body_height/2]) \n            scale([1.1, 0.7, 0.9]) sphere(d=body_height-wall*2);\n    }\n}\n\nmodule head() {\n    // Head with crown\n    union() {\n        translate([body_length/2+10, 0, body_height+5])\n            sphere(d=head_size);\n        \n        // Red frontal shield\n        translate([body_length/2+14, 0, body_height+7])\n            scale([0.3, 0.8, 0.6]) sphere(d=head_size*0.8);\n            \n        // Eye\n        translate([body_length/2+13, -3, body_height+7])\n            sphere(d=2);\n    }\n}\n\nmodule beak() {\n    // Red beak with slight curve\n    translate([body_length/2+beak_length/2+12, 0, body_height+3])\n        rotate([0, -15, 0])\n            scale([beak_length, head_size/3, head_size/4])\n                cylinder(h=1, $fn=8);\n}\n\nmodule wing() {\n    // Folded wing\n    translate([-body_length/4, 0, body_height/2+8])\n        rotate([0, 30, 0])\n            scale([body_length/2, body_height/2, wall*2])\n                cube([1, 1, 1], center=true);\n}\n\nmodule tail() {\n    // Tail feathers\n    for(i=[-2:2]) {\n        translate([-body_length/2-5, i*3, body_height/2-2])\n            rotate([0, 20, i*5])\n                scale([1, 0.3, 0.1])\n                    cube([10, 8, 2]);\n    }\n}\n\nmodule leg(side) {\n    // Upper leg\n    translate([body_length/6, side*5, body_height/2-10])\n        rotate([0, side*10, 0])\n            cylinder(h=leg_length/2, d=3, $fn=8);\n    \n    // Lower leg\n    translate([body_length/6+5, side*7, body_height/2-10-leg_length/2])\n        rotate([0, side*15, 0])\n            cylinder(h=leg_length/2, d=2.5, $fn=8);\n}\n\nmodule foot(side) {\n    // Long toes\n    for(i=[-1.5, 0, 1.5]) {\n        translate([body_length/6+8, side*7+i*3, body_height/2-10-leg_length])\n            rotate([90, 0, 0])\n                cylinder(h=foot_span/3, d=2, $fn=8);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    beak();\n    wing();\n    mirror([0, 1, 0]) wing();\n    tail();\n    \n    // Legs and feet\n    leg(1);\n    leg(-1);\n    foot(1);\n    foot(-1);\n}",
    "renders": true
  },
  {
    "animal": "sweatbee",
    "openscad_code": "// Sweatbee - Realistic Style, Medium Complexity\n// 3D printable model with proper wall thickness and no overhangs\n\n// Overall scale factor\nscale_factor = 0.8;\n\n// Main module\nmodule sweatbee() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        union() {\n            // Body segments\n            thorax();\n            abdomen();\n            head();\n            \n            // Wings\n            wings();\n            \n            // Legs\n            legs();\n            \n            // Antennae\n            antennae();\n        }\n    }\n}\n\n// Thorax (middle segment)\nmodule thorax() {\n    color(\"black\")\n    translate([0, 0, 10])\n    scale([1.2, 1, 0.8])\n    sphere(d=15, $fn=32);\n}\n\n// Abdomen (striped rear segment)\nmodule abdomen() {\n    union() {\n        // Main abdomen\n        color(\"goldenrod\")\n        translate([0, 0, -5])\n        scale([1.5, 1.2, 1.8])\n        sphere(d=20, $fn=32);\n        \n        // Stripes\n        for(i = [1:3]) {\n            color(\"black\")\n            translate([0, 0, -8 + i*3])\n            scale([1.5, 1.2, 0.3])\n            sphere(d=20, $fn=32);\n        }\n        \n        // Stinger (pointed rear)\n        color(\"darkgoldenrod\")\n        translate([0, 0, -18])\n        rotate([180, 0, 0])\n        cylinder(h=5, d1=2, d2=0.5, $fn=16);\n    }\n}\n\n// Head with compound eyes\nmodule head() {\n    union() {\n        // Main head\n        color(\"black\")\n        translate([0, 0, 20])\n        sphere(d=12, $fn=32);\n        \n        // Compound eyes (left)\n        color(\"darkgreen\")\n        translate([-4, 4, 21])\n        sphere(d=6, $fn=16);\n        \n        // Compound eyes (right)\n        color(\"darkgreen\")\n        translate([4, 4, 21])\n        sphere(d=6, $fn=16);\n        \n        // Mandibles\n        color(\"black\")\n        translate([-2, 6, 18])\n        rotate([90, 0, -30])\n        cylinder(h=3, d1=2, d2=1, $fn=8);\n        \n        color(\"black\")\n        translate([2, 6, 18])\n        rotate([90, 0, 30])\n        cylinder(h=3, d1=2, d2=1, $fn=8);\n    }\n}\n\n// Transparent wings\nmodule wings() {\n    color(\"lightblue\", 0.3)\n    translate([0, 0, 15])\n    union() {\n        // Front wing pair\n        translate([-5, 2, 0])\n        rotate([0, 0, 20])\n        scale([1, 0.3, 0.1])\n        sphere(d=20, $fn=32);\n        \n        translate([5, 2, 0])\n        rotate([0, 0, -20])\n        scale([1, 0.3, 0.1])\n        sphere(d=20, $fn=32);\n        \n        // Hind wing pair\n        translate([-3, -2, -2])\n        rotate([0, 0, 15])\n        scale([0.8, 0.25, 0.1])\n        sphere(d=15, $fn=32);\n        \n        translate([3, -2, -2])\n        rotate([0, 0, -15])\n        scale([0.8, 0.25, 0.1])\n        sphere(d=15, $fn=32);\n    }\n}\n\n// Six legs with joints\nmodule legs() {\n    // Function to create a single leg segment\n    module leg_segment(length, angle, start_pos) {\n        translate(start_pos)\n        rotate([0, angle, 0])\n        cylinder(h=length, d=1.5, $fn=8);\n    }\n    \n    // Generate all 6 legs\n    for(side = [-1, 1]) {\n        for(pos = [0, 1, 2]) {\n            // Base position on thorax\n            x_pos = side * 8;\n            y_pos = -5 + pos * 5;\n            z_pos = 10;\n            \n            // First segment\n            color(\"black\")\n            leg_segment(8, 45, [x_pos, y_pos, z_pos]);\n            \n            // Second segment with joint\n            translate([x_pos + side * 5, y_pos + 2, z_pos - 5])\n            rotate([0, 20, side * 20])\n            color(\"black\")\n            cylinder(h=6, d=1.2, $fn=8);\n            \n            // Third segment\n            translate([x_pos + side * 8, y_pos + 3, z_pos - 8])\n            rotate([0, -30, side * 10])\n            color(\"black\")\n            cylinder(h=5, d=1, $fn=8);\n        }\n    }\n}\n\n// Antennae\nmodule antennae() {\n    for(side = [-1, 1]) {\n        // Base of antenna\n        color(\"black\")\n        translate([side * 2, 6, 23])\n        rotate([90, 0, side * 10])\n        cylinder(h=8, d=1, $fn=8);\n        \n        // Antenna tip with club\n        color(\"black\")\n        translate([side * 3, 14, 29])\n        sphere(d=2, $fn=8);\n    }\n}\n\n// Generate the model\nsweatbee();",
    "renders": true
  },
  {
    "animal": "swift",
    "openscad_code": "// Swift (bird) - realistic medium complexity\n// Wings folded in resting pose for 3D printing\n\n$fn = 36;\n\nmodule body() {\n    // Main body - elongated ellipsoid\n    scale([1.2, 0.8, 0.6])\n        sphere(10);\n}\n\nmodule head() {\n    // Head - smaller sphere\n    translate([12, 0, 2])\n        sphere(5.5);\n}\n\nmodule beak() {\n    // Beak - tapered cylinder with cone tip\n    translate([18, 0, 2.5])\n        rotate([0, -15, 0])\n        union() {\n            cylinder(h=8, r1=1.2, r2=0.8);\n            translate([0, 0, 8])\n                cylinder(h=3, r1=0.8, r2=0.1);\n        }\n}\n\nmodule tail() {\n    // Forked tail - two tapered rectangles\n    translate([-12, 0, -2])\n        rotate([10, 0, 0])\n        for(side = [-1, 1]) {\n            translate([0, side*3, 0])\n                rotate([0, side*15, 0])\n                scale([1, 0.3, 0.1])\n                    cube([12, 8, 2]);\n        }\n}\n\nmodule wing() {\n    // Wing - curved ellipsoid\n    scale([1.5, 0.8, 0.15])\n        sphere(7);\n}\n\nmodule wings() {\n    // Two wings folded against body\n    // Left wing\n    translate([0, 6, 3])\n        rotate([0, 0, -20])\n        wing();\n    \n    // Right wing\n    translate([0, -6, 3])\n        rotate([0, 0, 20])\n        mirror([0,1,0])\n        wing();\n}\n\nmodule eye() {\n    // Eye - small sphere with pupil\n    union() {\n        sphere(1);\n        translate([0.3, 0, 0.3])\n            scale([0.5, 0.5, 0.3])\n                sphere(0.5);\n    }\n}\n\nmodule eyes() {\n    // Two eyes on head\n    translate([15, 2.2, 3.5])\n        eye();\n    translate([15, -2.2, 3.5])\n        eye();\n}\n\nmodule feet() {\n    // Simple feet with toes\n    for(side = [-1, 1]) {\n        translate([-3, side*2, -7])\n            union() {\n                // Leg\n                cylinder(h=3, r=0.8);\n                \n                // Toes\n                for(angle = [0, 20, -20]) {\n                    translate([0, 0, -1])\n                        rotate([0, angle, 0])\n                        translate([0, 0, -1.5])\n                            scale([0.3, 0.3, 1])\n                                cube([1, 0.5, 3]);\n                }\n            }\n    }\n}\n\n// Main assembly\nunion() {\n    body();\n    head();\n    beak();\n    tail();\n    wings();\n    eyes();\n    feet();\n}",
    "renders": true
  },
  {
    "animal": "swordfish",
    "openscad_code": "// Swordfish model - medium complexity\n// Total length ~80mm\n\n$fn = 24;\n\n// Main body\nmodule body() {\n    // Main torso\n    union() {\n        hull() {\n            translate([0, 0, 0]) sphere(d=12);\n            translate([25, 0, 0]) sphere(d=8);\n            translate([45, 0, 0]) sphere(d=6);\n        }\n        \n        // Tail section\n        hull() {\n            translate([45, 0, 0]) sphere(d=6);\n            translate([65, 0, 0]) sphere(d=3);\n        }\n    }\n}\n\n// Sword/bill\nmodule bill() {\n    difference() {\n        hull() {\n            translate([-20, 0, 0]) cylinder(h=1, d=2);\n            translate([-15, 0, 0]) cylinder(h=1, d=3);\n            translate([-10, 0, 0]) cylinder(h=1, d=4);\n            translate([0, 0, 0]) cylinder(h=1, d=5);\n        }\n        \n        // Flatten the top slightly\n        translate([-10, 0, 2]) cube([20, 10, 5], center=true);\n    }\n}\n\n// Dorsal fin\nmodule dorsal_fin() {\n    for(i = [0:2]) {\n        translate([15 + i*5, 0, 5]) {\n            rotate([0, -10, 0])\n            linear_extrude(height=0.5)\n            polygon(points=[[0,0], [3,5], [6,0]]);\n        }\n    }\n}\n\n// Pectoral fins\nmodule pectoral_fins() {\n    for(side = [-1, 1]) {\n        translate([20, side*6, -2]) {\n            rotate([0, 90, 0])\n            scale([1, side*1, 1])\n            linear_extrude(height=0.5)\n            polygon(points=[[0,0], [8,3], [10,0], [8,-3]]);\n        }\n    }\n}\n\n// Tail fin\nmodule tail_fin() {\n    // Upper lobe\n    translate([65, 0, 2]) {\n        rotate([0, 90, 0])\n        linear_extrude(height=0.5)\n        polygon(points=[[0,0], [12,8], [15,0]]);\n    }\n    \n    // Lower lobe\n    translate([65, 0, -2]) {\n        rotate([0, 90, 0])\n        linear_extrude(height=0.5)\n        polygon(points=[[0,0], [12,-5], [15,0]]);\n    }\n}\n\n// Eye\nmodule eye(side) {\n    translate([8, side*4, 2]) {\n        sphere(d=2);\n        translate([0.5, 0, 0]) sphere(d=1);\n    }\n}\n\n// Combine all parts\nunion() {\n    body();\n    bill();\n    dorsal_fin();\n    pectoral_fins();\n    tail_fin();\n    \n    // Eyes\n    eye(1);\n    eye(-1);\n}\n\n// Base for printing stability\ntranslate([0, 0, -3]) {\n    cube([80, 20, 1], center=true);\n}",
    "renders": true
  },
  {
    "animal": "swordtail",
    "openscad_code": "// Swordtail fish - medium complexity realistic style\n// Overall length ~70mm, 3D printable with no overhangs\n\n$fn = 32;\n\n// Main body\nmodule body() {\n    // Torso section\n    union() {\n        // Main body\n        scale([1, 0.6, 0.4])\n            sphere(d = 25);\n        \n        // Tapered tail section\n        translate([-15, 0, 0])\n            scale([1.2, 0.7, 0.5])\n            sphere(d = 15);\n    }\n}\n\n// Head with mouth\nmodule head() {\n    translate([12, 0, 2]) {\n        union() {\n            // Main head\n            scale([0.8, 0.7, 0.7])\n                sphere(d = 12);\n            \n            // Mouth protrusion\n            translate([4, 0, -1])\n                scale([0.8, 0.6, 0.4])\n                sphere(d = 6);\n        }\n    }\n}\n\n// Dorsal fin\nmodule dorsal_fin() {\n    for(i = [0:3]) {\n        translate([5 - i*3, 0, 7 + i*0.5]) {\n            rotate([0, -15 + i*5, 0])\n                scale([0.8, 0.1, 0.6])\n                cylinder(h = 8, d1 = 6, d2 = 2);\n        }\n    }\n}\n\n// Pectoral fins\nmodule pectoral_fin(side) {\n    mirror([side, 0, 0]) {\n        translate([8, 8, -2]) {\n            rotate([0, 0, -30])\n                rotate([30, 0, 0])\n                scale([1, 0.2, 0.6])\n                cylinder(h = 10, d1 = 6, d2 = 2);\n        }\n    }\n}\n\n// Anal fin\nmodule anal_fin() {\n    for(i = [0:2]) {\n        translate([2 - i*4, 0, -6]) {\n            rotate([0, 15 - i*3, 0])\n                scale([0.9, 0.15, 0.5])\n                cylinder(h = 6, d1 = 5, d2 = 2);\n        }\n    }\n}\n\n// Sword tail\nmodule sword_tail() {\n    translate([-22, 0, 0]) {\n        // Base of tail\n        scale([0.8, 0.3, 0.2])\n            sphere(d = 8);\n        \n        // Upper sword\n        translate([-2, 0, 1.5]) {\n            rotate([0, 0, 5])\n                scale([1, 0.3, 0.15])\n                cylinder(h = 25, d1 = 4, d2 = 1);\n        }\n        \n        // Lower sword\n        translate([-2, 0, -1.5]) {\n            rotate([0, 0, -5])\n                scale([1, 0.3, 0.15])\n                cylinder(h = 20, d1 = 3, d2 = 1);\n        }\n        \n        // Caudal fin\n        translate([-5, 0, 0]) {\n            rotate([0, 0, 90])\n                scale([0.4, 1.2, 0.1])\n                cylinder(h = 15, d1 = 12, d2 = 8);\n        }\n    }\n}\n\n// Eyes\nmodule eye(side) {\n    mirror([side, 0, 0]) {\n        translate([14, 3.5, 3]) {\n            // Eye socket\n            difference() {\n                sphere(d = 3);\n                translate([0.5, 0, 0])\n                    sphere(d = 2.8);\n            }\n            \n            // Pupil\n            translate([1, 0, 0])\n                sphere(d = 1);\n        }\n    }\n}\n\n// Scales texture (simplified as bumps)\nmodule scales() {\n    for(x = [-15:5:15]) {\n        for(y = [-6:3:6]) {\n            for(z = [-3:3:3]) {\n                if(norm([x, y, z]) < 10) {\n                    translate([x, y, z])\n                        sphere(d = 0.5);\n                }\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Body parts\n    body();\n    head();\n    \n    // Fins\n    dorsal_fin();\n    pectoral_fin(1);\n    pectoral_fin(-1);\n    anal_fin();\n    \n    // Sword tail\n    sword_tail();\n    \n    // Eyes\n    eye(1);\n    eye(-1);\n    \n    // Scales\n    scales();\n}",
    "renders": true
  },
  {
    "animal": "takin",
    "openscad_code": "// Takin 3D Model - Realistic Style, Medium Complexity\n// Approximate dimensions: 80mm x 40mm x 50mm\n\n// Global parameters\nbody_length = 60;\nbody_height = 35;\nbody_width = 30;\n\n// Main body\nmodule takin_body() {\n    // Torso - main bulk\n    translate([0, 0, 15])\n        scale([1.2, 0.8, 1])\n        sphere(d=body_height);\n    \n    // Abdomen - slightly smaller\n    translate([-10, 0, 10])\n        scale([0.9, 0.7, 0.8])\n        sphere(d=body_height * 0.8);\n    \n    // Chest - more pronounced\n    translate([10, 0, 15])\n        scale([1, 0.9, 1.1])\n        sphere(d=body_height * 0.9);\n}\n\n// Head with horns\nmodule takin_head() {\n    // Skull base\n    translate([body_length/2 + 5, 0, body_height + 5])\n        rotate([0, -10, 0])\n        scale([1.3, 1, 1])\n        sphere(d=20);\n    \n    // Snout\n    translate([body_length/2 + 15, 0, body_height + 2])\n        rotate([0, -10, 0])\n        scale([1.5, 0.7, 0.6])\n        cylinder(h=15, d1=12, d2=8);\n    \n    // Nostrils\n    for(side = [-1, 1]) {\n        translate([body_length/2 + 20, side * 3, body_height + 1])\n            rotate([0, -10, 0])\n            sphere(d=3);\n    }\n    \n    // Horns - curved forward\n    for(side = [-1, 1]) {\n        translate([body_length/2 + 8, side * 8, body_height + 12])\n            rotate([0, 0, side * -20])\n            rotate([0, -30, 0])\n            cylinder(h=15, d1=5, d2=2);\n        \n        // Horn tips\n        translate([body_length/2 + 18, side * 10, body_height + 18])\n            rotate([0, 0, side * -30])\n            sphere(d=3);\n    }\n    \n    // Ears\n    for(side = [-1, 1]) {\n        translate([body_length/2 + 5, side * 9, body_height + 15])\n            rotate([0, 0, side * 20])\n            scale([0.3, 1, 1.5])\n            cylinder(h=8, d=6);\n    }\n}\n\n// Leg module for all four legs\nmodule takin_leg(x_pos, y_pos, angle) {\n    translate([x_pos, y_pos, 0])\n        rotate([0, 0, angle]) {\n            // Upper leg\n            translate([0, 0, 8])\n                rotate([0, 5, 0])\n                scale([0.8, 0.8, 1])\n                cylinder(h=15, d=8);\n            \n            // Lower leg\n            translate([0, 0, 0])\n                rotate([0, 10, 0])\n                scale([0.7, 0.7, 1])\n                cylinder(h=12, d=6);\n            \n            // Hoof\n            translate([0, 0, -2])\n                scale([1.2, 1, 0.5])\n                cylinder(h=4, d=8);\n        }\n}\n\n// Tail\nmodule takin_tail() {\n    translate([-body_length/2 - 5, 0, 18])\n        rotate([0, 0, 45])\n        cylinder(h=12, d=5);\n    \n    // Tail tuft\n    translate([-body_length/2 - 15, 0, 22])\n        sphere(d=6);\n}\n\n// Mane ridge along back\nmodule takin_mane() {\n    for(i = [-20:5:20]) {\n        translate([i, 0, body_height + 15 + abs(i)/5])\n            scale([0.5, 0.3, 1])\n            sphere(d=6);\n    }\n}\n\n// Assembly\nunion() {\n    takin_body();\n    takin_head();\n    takin_mane();\n    \n    // Front legs\n    takin_leg(body_length/3, body_width/2 - 5, 0);\n    takin_leg(body_length/3, -body_width/2 + 5, 0);\n    \n    // Rear legs\n    takin_leg(-body_length/3, body_width/2 - 5, 0);\n    takin_leg(-body_length/3, -body_width/2 + 5, 0);\n    \n    takin_tail();\n}",
    "renders": true
  },
  {
    "animal": "tamarin",
    "openscad_code": "// Tamarin Monkey - Realistic Style, Medium Complexity\n// Overall size ~60mm tall\n\nmodule tamarin_body() {\n    // Main body\n    translate([0, 0, 8]) \n        scale([1.2, 1, 1.5])\n        sphere(d=20, $fn=24);\n}\n\nmodule tamarin_head() {\n    // Head sphere\n    translate([0, 0, 28]) \n        sphere(d=16, $fn=20);\n    \n    // Muzzle\n    translate([0, -7, 25])\n        scale([0.7, 1.2, 0.8])\n        sphere(d=10, $fn=16);\n}\n\nmodule tamarin_ears() {\n    // Left ear\n    translate([-7, 7, 32])\n        rotate([0, -20, -30])\n        scale([1, 0.5, 2])\n        cylinder(d1=6, d2=8, h=8, $fn=12);\n    \n    // Right ear\n    translate([7, 7, 32])\n        rotate([0, -20, 30])\n        scale([1, 0.5, 2])\n        cylinder(d1=6, d2=8, h=8, $fn=12);\n}\n\nmodule tamarin_face() {\n    // Eyes\n    for(x=[-3, 3]) {\n        translate([x, -9, 28])\n            sphere(d=3, $fn=10);\n    }\n    \n    // Nose\n    translate([0, -11, 27])\n        scale([1.5, 0.8, 0.5])\n        sphere(d=4, $fn=8);\n}\n\nmodule tamarin_arms() {\n    // Left arm\n    translate([-12, 0, 20])\n        rotate([0, 0, 30])\n        cylinder(d1=6, d2=4, h=15, $fn=12);\n    \n    // Right arm\n    translate([12, 0, 20])\n        rotate([0, 0, -30])\n        cylinder(d1=6, d2=4, h=15, $fn=12);\n}\n\nmodule tamarin_legs() {\n    // Left leg\n    translate([-5, 0, 0])\n        rotate([0, 0, 15])\n        cylinder(d1=8, d2=6, h=18, $fn=12);\n    \n    // Right leg\n    translate([5, 0, 0])\n        rotate([0, 0, -15])\n        cylinder(d1=8, d2=6, h=18, $fn=12);\n}\n\nmodule tamarin_tail() {\n    // Curved tail using hull of spheres\n    hull() {\n        translate([0, 8, 8])\n            sphere(d=6, $fn=12);\n        translate([0, 15, 5])\n            sphere(d=5, $fn=12);\n        translate([0, 20, 1])\n            sphere(d=4, $fn=12);\n        translate([0, 23, -3])\n            sphere(d=3, $fn=12);\n    }\n}\n\nmodule tamarin_whiskers() {\n    // Whiskers on left side\n    for(angle=[-30, -15, 0, 15]) {\n        translate([-2, -11, 26])\n            rotate([0, angle, 0])\n            cylinder(d=0.5, h=5, $fn=8);\n    }\n    \n    // Whiskers on right side\n    for(angle=[-15, 0, 15, 30]) {\n        translate([2, -11, 26])\n            rotate([0, angle, 0])\n            cylinder(d=0.5, h=5, $fn=8);\n    }\n}\n\n// Main assembly\nunion() {\n    tamarin_body();\n    tamarin_head();\n    tamarin_ears();\n    tamarin_face();\n    tamarin_arms();\n    tamarin_legs();\n    tamarin_tail();\n    tamarin_whiskers();\n}",
    "renders": true
  },
  {
    "animal": "tanager",
    "openscad_code": "// Scarlet Tanager - Medium complexity realistic style\n// Approx 75mm long, 30mm high\n\n$fn = 32;\n\nmodule body() {\n    // Main body - elongated sphere\n    translate([0, 0, 10]) \n        scale([1.8, 1, 1.2]) \n        sphere(12);\n}\n\nmodule head() {\n    // Head sphere slightly flattened\n    translate([-20, 0, 18]) \n        scale([1, 0.9, 0.8]) \n        sphere(8);\n}\n\nmodule beak() {\n    // Conical beak\n    translate([-28, 0, 18]) \n        rotate([0, 90, 0]) \n        cylinder(h=10, r1=2, r2=0.5);\n}\n\nmodule tail() {\n    // Fan tail with 3 feathers\n    union() {\n        translate([18, 0, 10]) \n            rotate([0, 15, 0]) \n            scale([0.8, 0.1, 2]) \n            cube([15, 1, 8]);\n            \n        translate([18, -3, 10]) \n            rotate([0, 10, -10]) \n            scale([0.7, 0.1, 1.8]) \n            cube([12, 1, 7]);\n            \n        translate([18, 3, 10]) \n            rotate([0, 10, 10]) \n            scale([0.7, 0.1, 1.8]) \n            cube([12, 1, 7]);\n    }\n}\n\nmodule wing() {\n    // Wing with primary feathers\n    difference() {\n        translate([-5, 8, 15]) \n            rotate([0, 0, -20]) \n            scale([1.5, 0.1, 1]) \n            sphere(10);\n            \n        // Feather indentations\n        for(i = [0:4]) {\n            translate([5-i*3, 8.5, 18-i*2]) \n                rotate([0, 90, 0]) \n                cylinder(h=2, r=1.5);\n        }\n    }\n}\n\nmodule eye() {\n    // Eye sphere\n    translate([-24, -5, 20]) \n        sphere(1.5);\n}\n\nmodule leg() {\n    // Simple leg with foot\n    union() {\n        // Upper leg\n        translate([-5, 5, 2]) \n            rotate([90, 0, 0]) \n            cylinder(h=8, r=1.5);\n            \n        // Lower leg\n        translate([-5, 5, 2]) \n            rotate([60, 0, 0]) \n            cylinder(h=6, r=1.2);\n            \n        // Foot with toes\n        for(i = [-2:2]) {\n            translate([-5+i*1.5, 5, 1]) \n                rotate([0, i*10, 0]) \n                cylinder(h=3, r=0.5);\n        }\n    }\n}\n\nmodule tanager() {\n    union() {\n        // Main body parts\n        body();\n        head();\n        beak();\n        tail();\n        \n        // Wings\n        wing();\n        mirror([0,1,0]) wing();\n        \n        // Eyes\n        color(\"black\") eye();\n        mirror([0,1,0]) color(\"black\") eye();\n        \n        // Legs\n        translate([0, -2, 0]) leg();\n        translate([0, 2, 0]) leg();\n    }\n}\n\n// Generate the tanager\nscale(1.5) tanager();",
    "renders": true
  },
  {
    "animal": "tapir",
    "openscad_code": "// Realistic Tapir Model - Medium Complexity\n// Designed for 3D printing (no overhangs, 2mm walls)\n\n$fn = 32;\n\n// Overall dimensions: 90mm x 35mm x 40mm (L x W x H)\n\n// Main body module\nmodule body() {\n    // Central torso\n    union() {\n        // Main torso\n        translate([0, 0, 15])\n            scale([1.8, 0.8, 1])\n            sphere(r=15);\n        \n        // Rump extension\n        translate([-25, 0, 12])\n            scale([1.2, 1, 0.8])\n            sphere(r=12);\n    }\n}\n\n// Head module with distinctive tapir snout\nmodule head() {\n    union() {\n        // Skull base\n        translate([32, 0, 20])\n            scale([1.2, 0.9, 0.9])\n            sphere(r=12);\n        \n        // Snout - tapir's distinctive proboscis\n        translate([45, 0, 18])\n            rotate([0, -10, 0])\n            cylinder(h=20, r1=9, r2=4);\n        \n        // Top of head\n        translate([35, 0, 28])\n            sphere(r=7);\n    }\n}\n\n// Leg module (reusable for all four legs)\nmodule leg(position, angle) {\n    translate(position)\n    rotate([0, 0, angle]) {\n        // Upper leg\n        translate([0, 0, 10])\n            rotate([10, 0, 0])\n            cylinder(h=18, r=5);\n        \n        // Lower leg\n        translate([0, 0, 1])\n            rotate([10, 0, 0])\n            cylinder(h=15, r=4);\n        \n        // Hoof\n        translate([0, 0, 0])\n            scale([1.2, 0.8, 0.5])\n            cylinder(h=3, r=4.5);\n    }\n}\n\n// Ear module\nmodule ear(position) {\n    translate(position)\n    rotate([0, -15, 30])\n    scale([0.5, 1, 1.5])\n    cylinder(h=8, r1=3, r2=1);\n}\n\n// Tail module\nmodule tail() {\n    translate([-35, 0, 15])\n    rotate([0, 15, 0])\n    scale([0.6, 0.6, 1])\n    cylinder(h=12, r1=5, r2=2);\n}\n\n// Eye module\nmodule eye(position) {\n    translate(position)\n    color(\"black\")\n    sphere(r=2);\n}\n\n// Main assembly\nunion() {\n    // Body\n    body();\n    \n    // Head\n    head();\n    \n    // Ears\n    ear([28, 7, 28]);\n    ear([28, -7, 28]);\n    \n    // Legs - positioned for stability\n    leg([20, 12, 0], 0);    // Front right\n    leg([20, -12, 0], 0);   // Front left\n    leg([-20, 10, 0], 0);   // Rear right\n    leg([-20, -10, 0], 0);  // Rear left\n    \n    // Tail\n    tail();\n    \n    // Eyes\n    eye([38, 5, 22]);\n    eye([38, -5, 22]);\n    \n    // Small details\n    // Neck connection\n    translate([25, 0, 18])\n        scale([1.5, 1, 0.8])\n        sphere(r=8);\n    \n    // Rump hump\n    translate([-15, 0, 22])\n        sphere(r=6);\n}",
    "renders": true
  },
  {
    "animal": "tarantula",
    "openscad_code": "// Medium-complexity realistic tarantula\n// Approx 80 mm leg-span, printable without support\n\n$fn = 24;\n\nmodule leg(segment_lengths, angles, thickness) {\n    for (i = [0:len(segment_lengths)-1]) {\n        rotate(angles[i]) {\n            cylinder(h = segment_lengths[i], r = thickness, center = true);\n            translate([0, 0, segment_lengths[i]/2]) {\n                if (i < len(segment_lengths)-1) {\n                    rotate([0, 90, 0]) {\n                        leg(segment_lengths[i+1:], angles[i+1:], thickness*0.8);\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule cephalothorax() {\n    difference() {\n        // Main body\n        scale([1.5, 1.2, 0.8]) sphere(d = 20);\n        // Eye indentations\n        translate([-7, 8, 5]) sphere(d = 2);\n        translate([-5, 8, 7]) sphere(d = 2);\n        translate([5, 8, 7]) sphere(d = 2);\n        translate([7, 8, 5]) sphere(d = 2);\n        translate([-3, 8, 9]) sphere(d = 2);\n        translate([3, 8, 9]) sphere(d = 2);\n        translate([0, 8, 10]) sphere(d = 2);\n        translate([0, 8, 10]) sphere(d = 2);\n    }\n    // Chelicerae\n    translate([-3, 9, -2]) rotate([0, 45, -10]) cylinder(h = 8, r1 = 2, r2 = 1);\n    translate([3, 9, -2]) rotate([0, 45, 10]) cylinder(h = 8, r1 = 2, r2 = 1);\n}\n\nmodule abdomen() {\n    scale([1.2, 1, 1.5]) sphere(d = 25);\n    // Hair texture\n    for (i = [0:30]) {\n        rotate([rand(360), rand(360), rand(360)]) {\n            translate([rand(12), rand(12), rand(18)]) {\n                cylinder(h = 0.5, r = 0.3);\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Cephalothorax\n    translate([0, 0, 10]) cephalothorax();\n    \n    // Abdomen\n    translate([0, -15, 10]) abdomen();\n    \n    // Leg segments [length1, length2, length3, length4]\n    leg_lengths = [12, 15, 12, 8];\n    leg_angles = [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]];\n    \n    // Front legs\n    for (side = [-1, 1]) {\n        translate([side*8, 5, 8]) {\n            rotate([0, 0, side*-30]) {\n                leg(leg_lengths, leg_angles, 1.5);\n            }\n        }\n    }\n    \n    // Middle front legs\n    for (side = [-1, 1]) {\n        translate([side*12, 2, 8]) {\n            rotate([0, 0, side*-60]) {\n                leg(leg_lengths, leg_angles, 1.3);\n            }\n        }\n    }\n    \n    // Middle back legs\n    for (side = [-1, 1]) {\n        translate([side*12, -10, 8]) {\n            rotate([0, 0, side*-120]) {\n                leg(leg_lengths, leg_angles, 1.3);\n            }\n        }\n    }\n    \n    // Back legs\n    for (side = [-1, 1]) {\n        translate([side*8, -15, 8]) {\n            rotate([0, 0, side*-150]) {\n                leg(leg_lengths, leg_angles, 1.5);\n            }\n        }\n    }\n    \n    // Pedipalps\n    for (side = [-1, 1]) {\n        translate([side*5, 10, 5]) {\n            rotate([0, 0, side*-15]) {\n                leg([8, 6], [[0, 0, 0], [0, 0, 0]], 1);\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "animal": "tarsier",
    "openscad_code": "// Tarsier - Medium Complexity Realistic Style\n// Overall dimensions: ~75mm tall\n\nmodule head() {\n    // Main skull\n    translate([0, 0, 55])\n    scale([1.2, 1, 1])\n    sphere(12, $fn=32);\n    \n    // Muzzle\n    translate([0, -8, 52])\n    scale([0.8, 1.2, 0.8])\n    sphere(6, $fn=24);\n    \n    // Nose\n    translate([0, -11, 52])\n    sphere(1.5, $fn=16);\n    \n    // Eye sockets\n    for (x = [-6, 6]) {\n        translate([x, -2, 58])\n        rotate([0, 0, 0])\n        sphere(6, $fn=24);\n    }\n    \n    // Eyes\n    for (x = [-6, 6]) {\n        difference() {\n            translate([x, -2, 58.5])\n            sphere(4.5, $fn=24);\n            translate([x+1.5, -2, 61])\n            sphere(1.5, $fn=16);\n        }\n    }\n    \n    // Ears\n    for (x = [-10, 10]) {\n        rotate([0, 0, x > 0 ? -20 : 20])\n        translate([x, 5, 62])\n        scale([0.3, 2, 1.5])\n        cylinder(h=10, r1=4, r2=2, $fn=12);\n    }\n}\n\nmodule body() {\n    // Torso\n    translate([0, 0, 35])\n    scale([1, 0.8, 1.2])\n    sphere(8, $fn=32);\n    \n    // Chest\n    translate([0, 5, 35])\n    scale([0.7, 0.5, 0.8])\n    sphere(6, $fn=24);\n}\n\nmodule limbs() {\n    // Arms\n    for (x = [-7, 7]) {\n        // Upper arm\n        translate([x, 3, 42])\n        rotate([0, 0, x > 0 ? -45 : 45])\n        rotate([90, 0, 0])\n        cylinder(h=12, r=1.5, $fn=16);\n        \n        // Forearm\n        translate([x + (x > 0 ? -8 : 8), 3, 30])\n        rotate([0, 0, x > 0 ? -45 : 45])\n        rotate([90, 0, 0])\n        cylinder(h=10, r=1.2, $fn=16);\n        \n        // Hand\n        translate([x + (x > 0 ? -12 : 12), 3, 25])\n        sphere(2, $fn=16);\n    }\n    \n    // Legs\n    for (x = [-4, 4]) {\n        // Thigh\n        translate([x, -3, 35])\n        rotate([0, 0, x > 0 ? -15 : 15])\n        rotate([90, 0, 0])\n        cylinder(h=15, r=2, $fn=16);\n        \n        // Lower leg\n        translate([x + (x > 0 ? -4 : 4), -3, 20])\n        rotate([0, 0, x > 0 ? -15 : 15])\n        rotate([90, 0, 0])\n        cylinder(h=12, r=1.8, $fn=16);\n        \n        // Foot\n        translate([x + (x > 0 ? -6 : 6), -3, 12])\n        scale([1.5, 1, 0.5])\n        sphere(2.5, $fn=16);\n    }\n    \n    // Tail\n    translate([0, -5, 30])\n    rotate([0, 0, 0])\n    rotate([90, 0, 0])\n    cylinder(h=20, r1=2, r2=0.5, $fn=16);\n}\n\n// Assembly\nunion() {\n    head();\n    body();\n    limbs();\n}",
    "renders": true
  },
  {
    "animal": "tarpon",
    "openscad_code": "// Tarpon (Megalops atlanticus) - Medium complexity realistic model\n// Approx 75mm long, 3D printable with no overhangs\n\n$fn=30;\n\nmodule tarpon_body() {\n    // Main body - elongated ellipsoid\n    scale([1, 0.4, 0.25])\n        sphere(d=50);\n    \n    // Tail section taper\n    translate([-25, 0, 0])\n        scale([1.2, 0.3, 0.2])\n            sphere(d=30);\n}\n\nmodule dorsal_fin() {\n    // First dorsal fin\n    translate([0, 0, 8])\n        rotate([0, 10, 0])\n            linear_extrude(height=0.5)\n                polygon(points=[[0,0], [8,5], [12,2], [15,0], [12,-2], [8,-5]]);\n    \n    // Second dorsal fin\n    translate([-15, 0, 7])\n        rotate([0, 5, 0])\n            linear_extrude(height=0.5)\n                polygon(points=[[0,0], [6,4], [10,2], [12,0], [10,-2], [6,-4]]);\n}\n\nmodule anal_fin() {\n    // Anal fin mirrored from dorsal\n    mirror([0,0,1])\n        translate([-12, 0, 8])\n            rotate([0, -5, 0])\n                linear_extrude(height=0.5)\n                    polygon(points=[[0,0], [5,3], [8,1.5], [10,0], [8,-1.5], [5,-3]]);\n}\n\nmodule pectoral_fin() {\n    // Left pectoral fin\n    translate([5, 10, -5])\n        rotate([0, 0, -45])\n            scale([1, 0.2, 0.05])\n                sphere(d=15);\n    \n    // Right pectoral fin\n    mirror([0,1,0])\n        translate([5, 10, -5])\n            rotate([0, 0, -45])\n                scale([1, 0.2, 0.05])\n                    sphere(d=15);\n}\n\nmodule pelvic_fin() {\n    // Pelvic fins\n    translate([-5, 6, -6])\n        rotate([0, 0, -30])\n            scale([0.8, 0.15, 0.05])\n                sphere(d=10);\n    \n    mirror([0,1,0])\n        translate([-5, 6, -6])\n            rotate([0, 0, -30])\n                scale([0.8, 0.15, 0.05])\n                    sphere(d=10);\n}\n\nmodule caudal_fin() {\n    // Forked tail\n    union() {\n        // Upper lobe\n        translate([-35, 0, 2])\n            rotate([0, -20, 0])\n                scale([0.8, 0.1, 0.5])\n                    sphere(d=20);\n        \n        // Lower lobe\n        translate([-35, 0, -2])\n            rotate([0, 20, 0])\n                scale([0.8, 0.1, 0.5])\n                    sphere(d=20);\n    }\n}\n\nmodule head_features() {\n    // Head shape\n    translate([22, 0, 0])\n        scale([1.2, 0.8, 0.8])\n            sphere(d=25);\n    \n    // Lower jaw\n    translate([25, 0, -3])\n        rotate([15, 0, 0])\n            scale([1, 0.6, 0.4])\n                sphere(d=15);\n    \n    // Eye sockets\n    translate([20, 5, 2])\n        sphere(d=3);\n    translate([20, -5, 2])\n        sphere(d=3);\n    \n    // Mouth opening\n    translate([28, 0, -3])\n        rotate([10, 0, 0])\n            cube([5, 6, 2], center=true);\n}\n\nmodule scales_pattern() {\n    // Scales along body\n    for(i=[-20:5:20]) {\n        for(j=[-5:5:5]) {\n            if(i*i + j*j < 400) {\n                translate([i, j, 0])\n                    scale([1, 1, 0.1])\n                        sphere(d=2);\n            }\n        }\n    }\n}\n\nmodule tarpon() {\n    union() {\n        tarpon_body();\n        head_features();\n        dorsal_fin();\n        anal_fin();\n        pectoral_fin();\n        pelvic_fin();\n        caudal_fin();\n        scales_pattern();\n    }\n}\n\n// Main model\ntarpon();",
    "renders": true
  },
  {
    "animal": "tayra",
    "openscad_code": "// Tayra - Mustelid mammal (Eira barbara) - Medium complexity realistic style\n// Approximate size: 80mm body length\n\n// Body dimensions\nbody_len = 50;\nbody_h = 25;\nbody_w = 20;\nhead_len = 20;\nhead_h = 18;\nhead_w = 16;\n\n// Leg dimensions\nleg_len = 15;\nleg_w = 6;\nleg_h = 6;\n\n// Tail dimensions\ntail_len = 30;\ntail_w = 8;\ntail_h = 8;\n\n// Ear dimensions\near_r = 4;\near_h = 6;\n\n// Snout dimensions\nsnout_len = 8;\nsnout_w = 10;\nsnout_h = 7;\n\n// Overall scale for printing\nscale_factor = 0.8;\n\nmodule tayra_body() {\n    // Main body - elongated oval shape using hull of spheres\n    hull() {\n        translate([-body_len/2, 0, 0]) \n            scale([1.2, 1, 1]) sphere(d=body_w);\n        translate([body_len/2, 0, 0]) \n            scale([1.2, 1, 1]) sphere(d=body_w);\n    }\n    \n    // Belly bulge\n    translate([0, 0, -body_h/2]) \n        scale([1, 1, 0.8]) \n        sphere(d=body_w*1.2);\n}\n\nmodule tayra_head() {\n    // Main head shape\n    hull() {\n        translate([body_len/2, 0, body_h/3]) \n            sphere(d=head_w);\n        translate([body_len/2 + head_len, 0, body_h/3]) \n            sphere(d=head_w*0.8);\n    }\n    \n    // Snout\n    hull() {\n        translate([body_len/2 + head_len, 0, body_h/3]) \n            sphere(d=snout_w);\n        translate([body_len/2 + head_len + snout_len, 0, body_h/3]) \n            sphere(d=snout_w*0.7);\n    }\n}\n\nmodule tayra_ears() {\n    // Left ear\n    translate([body_len/2 + head_len*0.3, head_w/2, body_h/3 + head_h/2]) \n        rotate([0, 30, 0]) \n        cylinder(h=ear_h, r1=ear_r, r2=ear_r*0.5, $fn=8);\n    \n    // Right ear\n    translate([body_len/2 + head_len*0.3, -head_w/2, body_h/3 + head_h/2]) \n        rotate([0, -30, 0]) \n        cylinder(h=ear_h, r1=ear_r, r2=ear_r*0.5, $fn=8);\n}\n\nmodule tayra_legs() {\n    // Front left leg\n    translate([body_len/3, body_w/2 + leg_w/2, -body_h/2]) \n        rotate([15, 0, 0]) \n        cylinder(h=leg_len, r=leg_w/2, $fn=8);\n    \n    // Front right leg\n    translate([body_len/3, -body_w/2 - leg_w/2, -body_h/2]) \n        rotate([15, 0, 0]) \n        cylinder(h=leg_len, r=leg_w/2, $fn=8);\n    \n    // Rear left leg\n    translate([-body_len/3, body_w/2 + leg_w/2, -body_h/2]) \n        rotate([15, 0, 0]) \n        cylinder(h=leg_len, r=leg_w/2, $fn=8);\n    \n    // Rear right leg\n    translate([-body_len/3, -body_w/2 - leg_w/2, -body_h/2]) \n        rotate([15, 0, 0]) \n        cylinder(h=leg_len, r=leg_w/2, $fn=8);\n}\n\nmodule tayra_tail() {\n    // Tail with slight upward curve\n    for(i=[0:5]) {\n        rotate([0, 0, 5*i]) \n        translate([-body_len/2 - tail_len/2 + i*tail_len/6, 0, i*2]) \n            scale([1 - i*0.1, 1 - i*0.1, 1 - i*0.1]) \n            sphere(d=tail_w);\n    }\n}\n\nmodule tayra_eyes() {\n    // Left eye\n    translate([body_len/2 + head_len + snout_len/2, snout_w/3, body_h/3 + head_h/4]) \n        sphere(d=2);\n    \n    // Right eye\n    translate([body_len/2 + head_len + snout_len/2, -snout_w/3, body_h/3 + head_h/4]) \n        sphere(d=2);\n}\n\nmodule tayra_nose() {\n    // Nose at tip of snout\n    translate([body_len/2 + head_len + snout_len, 0, body_h/3]) \n        sphere(d=3);\n}\n\nmodule tayra_whiskers() {\n    // Whiskers on left side\n    for(i=[1:3]) {\n        translate([body_len/2 + head_len + snout_len, snout_w/2, body_h/3]) \n            rotate([0, 0, 30*i]) \n            cylinder(h=snout_len/2, r=0.5, $fn=4);\n    }\n    \n    // Whiskers on right side\n    for(i=[1:3]) {\n        translate([body_len/2 + head_len + snout_len, -snout_w/2, body_h/3]) \n            rotate([0, 0, -30*i]) \n            cylinder(h=snout_len/2, r=0.5, $fn=4);\n    }\n}\n\n// Assemble the tayra\nscale([scale_factor, scale_factor, scale_factor]) {\n    union() {\n        tayra_body();\n        tayra_head();\n        tayra_ears();\n        tayra_legs();\n        tayra_tail();\n        tayra_eyes();\n        tayra_nose();\n        tayra_whiskers();\n    }\n}",
    "renders": true
  },
  {
    "animal": "teal",
    "openscad_code": "// Realistic Teal Duck - Medium Complexity (3D printable)\n// Body oriented for minimal overhangs, split into modular parts\n\n$fn = 36;  // Smooth curves for realistic appearance\n\nmodule teal_body() {\n    // Main body - elongated ellipsoid\n    translate([0, 0, 15]) \n    scale([1.2, 0.7, 0.6])\n    sphere(r=20);\n    \n    // Tail extension\n    translate([-25, 0, 12])\n    rotate([0, 15, 0])\n    scale([1.5, 0.4, 0.3])\n    sphere(r=12);\n    \n    // Chest bulge\n    translate([5, 0, 8])\n    scale([0.8, 1, 0.8])\n    sphere(r=15);\n}\n\nmodule teal_head() {\n    // Head sphere\n    translate([20, 0, 25])\n    sphere(r=12);\n    \n    // Bill - tapered cylinder\n    translate([32, 0, 23])\n    rotate([0, -10, 0])\n    scale([1.5, 0.5, 0.4])\n    cylinder(h=15, r1=6, r2=2);\n    \n    // Bill nail tip\n    translate([46, 0, 22])\n    sphere(r=2);\n}\n\nmodule teal_wings() {\n    // Left wing folded against body\n    translate([-5, 12, 18])\n    rotate([0, -20, 20])\n    scale([1.2, 0.3, 0.4])\n    sphere(r=15);\n    \n    // Right wing - mirrored\n    translate([-5, -12, 18])\n    mirror([0, 1, 0])\n    rotate([0, -20, 20])\n    scale([1.2, 0.3, 0.4])\n    sphere(r=15);\n}\n\nmodule teal_tail_pattern() {\n    // Tail feathers as overlapping scales\n    for(i = [-2:2]) {\n        translate([-28, i*4, 10])\n        rotate([0, 20, 0])\n        scale([0.8, 0.3, 0.1])\n        cylinder(h=8, r1=6, r2=4);\n    }\n}\n\nmodule teal_eyes() {\n    // Left eye\n    translate([22, 6, 28])\n    sphere(r=2);\n    \n    // Right eye\n    translate([22, -6, 28])\n    sphere(r=2);\n    \n    // Eye pupils\n    color(\"black\") {\n        translate([23.5, 6.5, 29])\n        sphere(r=1);\n        translate([23.5, -6.5, 29])\n        sphere(r=1);\n    }\n}\n\nmodule teal_legs() {\n    // Left leg\n    translate([0, 8, 0])\n    cylinder(h=12, r=2);\n    \n    // Left foot webbing\n    translate([0, 8, -2])\n    rotate([90, 0, 0])\n    scale([1.5, 1, 0.3])\n    cylinder(h=8, r1=4, r2=6);\n    \n    // Right leg\n    translate([0, -8, 0])\n    cylinder(h=12, r=2);\n    \n    // Right foot webbing\n    translate([0, -8, -2])\n    rotate([90, 0, 0])\n    scale([1.5, 1, 0.3])\n    cylinder(h=8, r1=4, r2=6);\n}\n\n// Assemble the teal\nunion() {\n    teal_body();\n    teal_head();\n    teal_wings();\n    teal_tail_pattern();\n    teal_eyes();\n    teal_legs();\n}",
    "renders": true
  },
  {
    "animal": "tenrec",
    "openscad_code": "// Realistic Medium-Complexity Tenrec\n// Overall length ≈ 80 mm\n\n// body\nmodule body() {\n    difference() {\n        // main torso\n        union() {\n            scale([1, 0.9, 0.6])\n                sphere(d=35, $fn=40);\n            // rump\n            translate([0,-15,0])\n                scale([1.2,1.4,0.6])\n                    sphere(d=25, $fn=30);\n        }\n        // belly cutout\n        translate([0,0,-10])\n            cube([30,40,20], center=true);\n    }\n}\n\n// head\nmodule head() {\n    translate([20,5,5])\n        rotate([0,-20,0])\n            difference() {\n                // skull\n                scale([1.2,0.9,0.7])\n                    sphere(d=20, $fn=32);\n                // snout taper\n                translate([5,0,0])\n                    cube([15,12,12], center=true);\n                // eye sockets\n                translate([4,5,2])\n                    sphere(d=4, $fn=16);\n                translate([4,-5,2])\n                    sphere(d=4, $fn=16);\n            }\n}\n\n// snout\nmodule snout() {\n    translate([28,0,2])\n        rotate([0,-20,0])\n            scale([1.5,0.9,0.7])\n                cylinder(h=10, d1=8, d2=4, $fn=16);\n}\n\n// ears\nmodule ears() {\n    for(side=[-1,1]) {\n        translate([18,side*8,8])\n            rotate([0,side*30,0])\n                scale([1,0.7,1.5])\n                    sphere(d=8, $fn=16);\n    }\n}\n\n// legs\nmodule legs() {\n    for(pos=[[-8,-15,-5], [8,-15,-5], [-6,5,-5], [6,5,-5]])\n        translate(pos)\n            rotate([0,10,0])\n                cylinder(h=12, d1=5, d2=4, $fn=12);\n}\n\n// feet\nmodule feet() {\n    for(pos=[[-8,-15,-11], [8,-15,-11], [-6,5,-11], [6,5,-11]])\n        translate(pos)\n            scale([1.5,1,0.5])\n                sphere(d=6, $fn=12);\n}\n\n// spines\nmodule spines() {\n    for(y=[-15:3:15])\n    for(x=[-12:3:12]) {\n        a = 45*((sin(x*20)+cos(y*20))/2);\n        translate([x,y,12])\n            rotate([a,0,45])\n                cylinder(h=4+2*((sin(x*10)+1)/2), d1=1.2, d2=0.5, $fn=6);\n    }\n}\n\n// tail\nmodule tail() {\n    translate([-18,-15,0])\n        rotate([10,0,0])\n            scale([1,1,0.6])\n                cylinder(h=15, d1=10, d2=4, $fn=16);\n}\n\n// assemble\nunion() {\n    body();\n    head();\n    snout();\n    ears();\n    legs();\n    feet();\n    tail();\n    spines();\n}",
    "renders": true
  },
  {
    "animal": "tern",
    "openscad_code": "// Tern (medium complexity, realistic style)\n// A medium-sized seabird with distinctive forked tail and sharp beak\n\n// Overall scale factor for 3D printing\nscale_factor = 0.4;\n\n// Main module to build the entire tern\nmodule tern() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        union() {\n            // Body\n            body();\n            \n            // Head\n            translate([0, 18, 8]) head();\n            \n            // Wings\n            wings();\n            \n            // Tail\n            tail();\n            \n            // Legs\n            translate([-3, -22, 0]) leg(true);\n            translate([3, -22, 0]) leg(false);\n        }\n    }\n}\n\n// Body of the tern\nmodule body() {\n    // Main oval body\n    translate([0, 0, 6])\n        scale([1, 1.8, 1])\n        sphere(r = 10, $fn = 32);\n    \n    // Chest protrusion\n    translate([0, 8, 5])\n        rotate([20, 0, 0])\n        scale([0.7, 1, 0.8])\n        cylinder(h = 8, r1 = 8, r2 = 5, $fn = 24);\n    \n    // Back hump\n    translate([0, -5, 9])\n        scale([1.1, 0.8, 0.6])\n        sphere(r = 8, $fn = 24);\n}\n\n// Head with beak and eyes\nmodule head() {\n    // Main head sphere\n    sphere(r = 7, $fn = 24);\n    \n    // Beak\n    translate([0, 8, -2])\n        rotate([20, 0, 0])\n        scale([0.3, 1.8, 0.3])\n        cylinder(h = 12, r1 = 3, r2 = 0.5, $fn = 8);\n    \n    // Beak tip color\n    translate([0, 15, -1.5])\n        scale([0.3, 0.5, 0.3])\n        cylinder(h = 2, r = 0.8, $fn = 8);\n    \n    // Eyes\n    translate([-3, 4, 2])\n        sphere(r = 1.2, $fn = 12);\n    translate([3, 4, 2])\n        sphere(r = 1.2, $fn = 12);\n    \n    // Eye pupils\n    translate([-3.5, 4.5, 2.5])\n        sphere(r = 0.5, $fn = 8);\n    translate([3.5, 4.5, 2.5])\n        sphere(r = 0.5, $fn = 8);\n    \n    // Black cap\n    difference() {\n        translate([0, 2, 3])\n            scale([1.1, 1.2, 0.8])\n            sphere(r = 7.5, $fn = 24);\n        \n        // Cut to shape\n        translate([0, -2, 2])\n            cube([20, 10, 10], center = true);\n    }\n}\n\n// Wings module\nmodule wings() {\n    // Left wing\n    translate([-12, -2, 8])\n        rotate([0, 0, 30])\n        wing(true);\n    \n    // Right wing\n    translate([12, -2, 8])\n        rotate([0, 0, -30])\n        wing(false);\n}\n\n// Single wing\nmodule wing(left = true) {\n    mirror = left ? 1 : -1;\n    \n    // Main wing\n    translate([mirror * 5, 0, 0])\n        rotate([0, 0, mirror * -10])\n        scale([mirror * 1, 1, 0.3])\n        cylinder(h = 22, r1 = 8, r2 = 2, $fn = 3);\n    \n    // Wing tip\n    translate([mirror * 18, -5, 0])\n        rotate([0, 0, mirror * 20])\n        scale([mirror * 0.8, 1, 0.3])\n        cylinder(h = 8, r1 = 3, r2 = 1, $fn = 3);\n    \n    // Wing feathers (simplified)\n    for (i = [0:2]) {\n        translate([mirror * (10 + i * 4), -2 - i * 1.5, -1])\n            rotate([0, 0, mirror * (15 + i * 5)])\n            scale([mirror * 0.3, 1, 0.1])\n            cylinder(h = 6, r1 = 2, r2 = 0.5, $fn = 3);\n    }\n}\n\n// Forked tail\nmodule tail() {\n    // Central tail base\n    translate([0, -18, 6])\n        rotate([30, 0, 0])\n        scale([0.5, 1, 0.3])\n        cylinder(h = 12, r1 = 4, r2 = 1, $fn = 8);\n    \n    // Left tail feather\n    translate([-3, -25, 3])\n        rotate([20, 0, -15])\n        scale([0.3, 1.2, 0.1])\n        cylinder(h = 15, r1 = 2, r2 = 0.5, $fn = 3);\n    \n    // Right tail feather\n    translate([3, -25, 3])\n        rotate([20, 0, 15])\n        scale([0.3, 1.2, 0.1])\n        cylinder(h = 15, r1 = 2, r2 = 0.5, $fn = 3);\n}\n\n// Leg and foot\nmodule leg(left = true) {\n    mirror = left ? 1 : -1;\n    \n    // Upper leg\n    translate([0, 0, 5])\n        rotate([20, 0, mirror * 10])\n        cylinder(h = 8, r = 1.5, $fn = 8);\n    \n    // Lower leg\n    translate([mirror * 2, -3, 0])\n        rotate([60, 0, mirror * 15])\n        cylinder(h = 6, r = 1.2, $fn = 8);\n    \n    // Foot\n    translate([mirror * 3, -8, -1])\n        rotate([90, 0, 0])\n        scale([1.5, 0.3, 1])\n        cylinder(h = 4, r = 1, $fn = 8);\n    \n    // Toes\n    for (i = [-1:1]) {\n        translate([mirror * (3 + i * 1.5), -8, -1])\n            rotate([90, 0, i * 30])\n            scale([1, 0.2, 0.5])\n            cylinder(h = 3, r = 0.5, $fn = 6);\n    }\n}\n\n// Generate the tern\ntern();",
    "renders": true
  },
  {
    "animal": "terrapin",
    "openscad_code": "// Terrapin model - medium complexity, realistic style\n// Dimensions: ~80mm long, ~60mm wide, ~30mm high\n\n$fn = 32;  // Smooth curves for realistic appearance\n\nmodule terrapin() {\n    // Main shell (carapace)\n    union() {\n        // Upper shell dome\n        translate([0, 0, 12]) {\n            scale([1.2, 1, 0.7]) {\n                sphere(d=50);\n            }\n        }\n        \n        // Shell rim\n        difference() {\n            cylinder(h=8, d1=55, d2=50);\n            translate([0, 0, -1]) {\n                cylinder(h=10, d1=45, d2=40);\n            }\n        }\n        \n        // Shell segments (scutes)\n        for(i = [-2:2]) {\n            for(j = [-1:1]) {\n                if(!(abs(i) == 2 && abs(j) == 1)) {\n                    translate([i*8, j*10, 12]) {\n                        scale([0.8, 0.6, 0.1]) {\n                            sphere(d=15);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Head\n    translate([25, 0, 8]) {\n        rotate([0, -10, 0]) {\n            scale([1.2, 0.8, 0.8]) {\n                sphere(d=15);\n            }\n        }\n        \n        // Snout\n        translate([7, 0, 0]) {\n            scale([1, 0.7, 0.6]) {\n                sphere(d=8);\n            }\n        }\n        \n        // Eyes\n        for(side = [-1, 1]) {\n            translate([5, side*4, 3]) {\n                sphere(d=3);\n            }\n        }\n    }\n    \n    // Neck\n    translate([15, 0, 5]) {\n        rotate([0, -20, 0]) {\n            cylinder(h=12, d1=8, d2=12);\n        }\n    }\n    \n    // Front flippers\n    for(side = [-1, 1]) {\n        translate([8, side*20, 2]) {\n            rotate([0, 0, side*30]) {\n                scale([1.2, 0.3, 0.2]) {\n                    difference() {\n                        sphere(d=25);\n                        translate([0, 0, -15]) cube([30, 30, 30], center=true);\n                    }\n                }\n            }\n            \n            // Flipper claws\n            for(i = [0:2]) {\n                translate([-8 + i*4, side*12, 0]) {\n                    rotate([0, 90, 0]) {\n                        cylinder(h=3, d1=2, d2=1);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Rear flippers\n    for(side = [-1, 1]) {\n        translate([-18, side*18, 2]) {\n            rotate([0, 0, side*45]) {\n                scale([1, 0.3, 0.2]) {\n                    difference() {\n                        sphere(d=20);\n                        translate([0, 0, -15]) cube([25, 25, 25], center=true);\n                    }\n                }\n            }\n            \n            // Rear claws\n            for(i = [0:1]) {\n                translate([-5 + i*4, side*10, 0]) {\n                    rotate([0, 90, 0]) {\n                        cylinder(h=2.5, d1=1.5, d2=1);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Tail\n    translate([-25, 0, 2]) {\n        rotate([0, 0, -10]) {\n            scale([0.5, 0.5, 1]) {\n                difference() {\n                    sphere(d=15);\n                    translate([0, 0, -10]) cube([20, 20, 20], center=true);\n                }\n            }\n        }\n    }\n    \n    // Lower shell (plastron)\n    difference() {\n        translate([0, 0, 2]) {\n            scale([1, 0.9, 0.3]) {\n                sphere(d=45);\n            }\n        }\n        translate([0, 0, -1]) {\n            cylinder(h=10, d=35);\n        }\n    }\n    \n    // Leg joints\n    for(pos = [[12, 18], [12, -18], [-12, 16], [-12, -16]]) {\n        translate([pos[0], pos[1], 4]) {\n            sphere(d=6);\n        }\n    }\n}\n\n// Generate the terrapin\nterrapin();",
    "renders": true
  },
  {
    "animal": "terrier",
    "openscad_code": "// Terrier in medium-complexity realistic style\n// Overall size approximately 70 mm from nose to tail\n\n$fn = 32;\nbody_len = 45;\nbody_w   = 22;\nbody_h   = 20;\n\nhead_len = 15;\nhead_w   = 14;\nhead_h   = 12;\n\nleg_h    = 16;\nleg_w    = 5;\n\ntail_len = 20;\ntail_r   = 3;\n\near_len  = 8;\near_w    = 4;\n\nmuzzle_len = 7;\nmuzzle_r   = 4;\n\n// Body\nmodule body() {\n    translate([0, 0, leg_h]) {\n        difference() {\n            hull() {\n                // Main torso\n                translate([0, 0, body_h/2])\n                    scale([1.0, 0.7, 0.6])\n                    sphere(d = body_len);\n\n                // Rounded rear\n                translate([-body_len/2 + 5, 0, 0])\n                    scale([0.8, 0.9, 0.7])\n                    sphere(d = body_w);\n\n                // Chest\n                translate([body_len/2 - 4, 0, -body_h/4])\n                    scale([0.9, 0.8, 0.7])\n                    sphere(d = body_w);\n            }\n\n            // Belly cutout for printability\n            translate([0, 0, -2])\n                cube([body_len + 2, body_w + 2, 4], center = true);\n        }\n    }\n}\n\n// Head\nmodule head() {\n    translate([body_len/2 + head_len/2, 0, body_h + leg_h - 2]) {\n        rotate([0, 0, 10]) {\n            // Skull\n            difference() {\n                hull() {\n                    sphere(d = head_w);\n                    translate([head_len/2 - 2, 0, 0])\n                        sphere(d = head_w * 0.9);\n                }\n                // Eye sockets\n                for (i = [-1:1:1]) {\n                    translate([head_len/2 * 0.4, i * head_w/4, head_h/4])\n                        sphere(d = 3, $fn = 12);\n                }\n            }\n\n            // Muzzle\n            translate([head_len/2 + muzzle_len/2, 0, -head_h/3])\n                rotate([0, 10, 0])\n                scale([1.3, 1, 0.9])\n                sphere(d = muzzle_r * 2);\n\n            // Nose\n            translate([head_len/2 + muzzle_len + 1, 0, -head_h/3])\n                sphere(d = 3);\n        }\n    }\n}\n\n// Ears\nmodule ears() {\n    for (i = [-1:1:1]) {\n        translate([body_len/2 + head_len/2 + 3, i * head_w/2, body_h + leg_h + 2])\n            rotate([0, i * 20, 90 + i * 15])\n            linear_extrude(height = ear_len, scale = 0.2)\n            offset(r = 1)\n            square([ear_w, ear_len], center = true);\n    }\n}\n\n// Legs\nmodule legs() {\n    for (x = [-body_len/2 + 6, body_len/2 - 4])\n        for (y = [-body_w/2 + 3, body_w/2 - 3]) {\n            translate([x, y, leg_h/2])\n                cylinder(d1 = leg_w + 1, d2 = leg_w - 1, h = leg_h);\n            // Paws\n            translate([x, y, 1])\n                sphere(d = leg_w + 1);\n        }\n}\n\n// Tail\nmodule tail() {\n    translate([-body_len/2, 0, leg_h + body_h/2])\n        rotate([0, 0, -20])\n        rotate([80, 0, 0])\n        cylinder(d1 = tail_r * 2, d2 = tail_r, h = tail_len);\n}\n\n// Eyes\nmodule eyes() {\n    for (i = [-1:1:1]) {\n        translate([body_len/2 + head_len/2 + 2, i * head_w/4, body_h + leg_h])\n            sphere(d = 2);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    ears();\n    legs();\n    tail();\n    eyes();\n}",
    "renders": true
  },
  {
    "animal": "thrasher",
    "openscad_code": "// Realistic Thrasher (medium complexity)\n// Approx 80 mm long, 40 mm wide, 35 mm high\n\n// Body parameters\nbody_len = 60;\nbody_wid = 30;\nbody_hgt = 20;\nbody_rad = 12;\n\n// Head parameters\nhead_len = 22;\nhead_wid = 18;\nhead_hgt = 17;\n\n// Bill parameters\nbill_len = 28;\nbill_wid = 7;\nbill_hgt = 7;\n\n// Tail parameters\ntail_len = 18;\ntail_wid = 35;\ntail_hgt = 4;\n\n// Leg parameters\nleg_len = 12;\nleg_wid = 3;\nleg_hgt = 5;\n\n// Eye parameters\neye_rad = 3.5;\n\n// Wing parameters\nwing_len = 25;\nwing_wid = 15;\n\n$fn = 24;\n\nmodule thrasher_body() {\n    difference() {\n        // Main body ellipse\n        scale([body_len/2, body_wid/2, body_hgt/2])\n            sphere(r = body_rad);\n        \n        // Flatten underside\n        translate([0, 0, -body_hgt/2 - 1])\n            cube([body_len + 2, body_wid + 2, body_hgt], center = true);\n    }\n}\n\nmodule head() {\n    difference() {\n        union() {\n            // Main head\n            translate([body_len/2 - 5, 0, body_hgt/2 - 2])\n                scale([head_len/2, head_wid/2, head_hgt/2])\n                    sphere(r = head_rad = 10);\n            \n            // Crest\n            translate([body_len/2 + head_len/2 - 8, 0, body_hgt/2 + 8])\n                rotate([0, 20, 0])\n                    scale([1.2, 1, 1])\n                        cylinder(h = 12, r1 = 4, r2 = 2);\n        }\n        \n        // Eye sockets\n        translate([body_len/2 + head_len/2 - 12, head_wid/2 - 3, body_hgt/2 + 2])\n            sphere(r = eye_rad + 0.5);\n        translate([body_len/2 + head_len/2 - 12, -head_wid/2 + 3, body_hgt/2 + 2])\n            sphere(r = eye_rad + 0.5);\n    }\n}\n\nmodule bill() {\n    hull() {\n        // Base\n        translate([body_len/2 + head_len - 3, 0, body_hgt/2 - 1])\n            sphere(r = bill_wid/2);\n        \n        // Tip\n        translate([body_len/2 + head_len + bill_len - 8, 0, body_hgt/2 - 1])\n            sphere(r = 1.5);\n    }\n}\n\nmodule tail() {\n    difference() {\n        // Main tail\n        translate([-body_len/2 - tail_len/2 + 2, 0, body_hgt/2 - 2])\n            scale([tail_len, tail_wid, tail_hgt])\n                sphere(r = 6);\n        \n        // Feathers cut\n        for (i = [-2:2])\n            translate([-body_len/2 - tail_len/2 + 2, i * 5, body_hgt/2 - 2])\n                rotate([0, 0, i * 5])\n                    cube([tail_len + 2, 2, tail_hgt + 2], center = true);\n    }\n}\n\nmodule wing() {\n    difference() {\n        // Upper wing\n        translate([0, body_wid/2 + wing_wid/4 - 2, body_hgt/2 + 2])\n            rotate([0, 0, 20])\n                scale([wing_len, wing_wid, 3])\n                    sphere(r = 5);\n        \n        // Wing cut\n        translate([0, body_wid/2 + wing_wid/2, body_hgt/2 + 2])\n            cube([wing_len + 5, wing_wid, 5], center = true);\n    }\n}\n\nmodule eye() {\n    color(\"black\")\n    translate([body_len/2 + head_len/2 - 12, head_wid/2 - 3, body_hgt/2 + 2])\n        sphere(r = eye_rad);\n    translate([body_len/2 + head_len/2 - 12, -head_wid/2 + 3, body_hgt/2 + 2])\n        sphere(r = eye_rad);\n}\n\nmodule legs() {\n    // Left leg\n    translate([body_len/4 - 5, body_wid/4 - 2, -body_hgt/2 - leg_len/2])\n        cube([leg_wid, leg_wid, leg_len], center = true);\n    translate([body_len/4 - 5 - leg_wid/2, body_wid/4 - 2 - leg_wid/2, -body_hgt/2 - leg_len])\n        cube([leg_wid * 2, leg_wid * 2, leg_hgt], center = true);\n    \n    // Right leg\n    translate([body_len/4 - 5, -body_wid/4 + 2, -body_hgt/2 - leg_len/2])\n        cube([leg_wid, leg_wid, leg_len], center = true);\n    translate([body_len/4 - 5 - leg_wid/2, -body_wid/4 + 2 + leg_wid/2, -body_hgt/2 - leg_len])\n        cube([leg_wid * 2, leg_wid * 2, leg_hgt], center = true);\n}\n\n// Assembly\nunion() {\n    thrasher_body();\n    head();\n    bill();\n    tail();\n    \n    // Left wing\n    wing();\n    \n    // Right wing (mirrored)\n    mirror([0, 1, 0])\n        wing();\n    \n    legs();\n}\n\n// Eyes added after main union\neye();",
    "renders": true
  },
  {
    "animal": "thrush",
    "openscad_code": "// Thrush bird model - medium complexity realistic style\n// Designed for 3D printing, no overhangs, proper wall thickness\n\n// Overall dimensions: ~70mm long, ~35mm high, ~25mm wide\n\n$fn = 32;  // Smooth curves for realistic appearance\n\n// Main body module\nmodule body() {\n    // Main body - elongated sphere\n    scale([1.3, 1, 1]) \n        sphere(15);\n    \n    // Chest protrusion\n    translate([5, 0, -8])\n        scale([0.8, 1.2, 0.6])\n            sphere(10);\n}\n\n// Head module\nmodule head() {\n    translate([-20, 0, 5])\n        rotate([0, 5, 0])\n            scale([1.1, 1, 1.2])\n                sphere(9);\n    \n    // Beak\n    translate([-30, 0, 3])\n        rotate([0, -10, 0])\n            cylinder(h = 12, r1 = 4, r2 = 1);\n}\n\n// Wing module\nmodule wing(side) {\n    mirror([side, 0, 0]) {\n        // Main wing\n        translate([-5, side * 15, 0])\n            rotate([0, 0, side * 10])\n                rotate([0, side * 20, 0])\n                    scale([1, 0.2, 1.5])\n                        sphere(12);\n        \n        // Wing tip\n        translate([-8, side * 20, 5])\n            rotate([0, 0, side * 15])\n                scale([0.7, 0.15, 1.2])\n                    sphere(8);\n    }\n}\n\n// Tail module\nmodule tail() {\n    // Central tail feathers\n    for(i = [-1:1]) {\n        translate([20, i * 3, -5])\n            rotate([30, 0, i * 10])\n                scale([1, 0.5, 0.2])\n                    cylinder(h = 15, r = 4);\n    }\n}\n\n// Leg module\nmodule leg(side) {\n    translate([-5, side * 5, -15]) {\n        // Upper leg\n        rotate([0, 0, side * 10])\n            cylinder(h = 8, r = 2);\n        \n        // Lower leg\n        translate([0, 0, -8])\n            rotate([0, 15, 0])\n                cylinder(h = 10, r = 1.5);\n        \n        // Foot\n        translate([0, side * 3, -18])\n            rotate([90, 0, 0])\n                scale([1, 0.3, 0.3])\n                    cylinder(h = 8, r = 2);\n    }\n}\n\n// Eye module\nmodule eye(side) {\n    translate([-25, side * 5, 7]) {\n        // Eye socket\n        difference() {\n            sphere(2);\n            translate([0, 0, -1])\n                sphere(1.5);\n        }\n        \n        // Pupil\n        translate([0, 0, -0.5])\n            sphere(1);\n    }\n}\n\n// Combine all parts\nunion() {\n    // Main body parts\n    body();\n    head();\n    \n    // Wings\n    wing(1);   // Right wing\n    wing(-1);  // Left wing\n    \n    // Tail\n    tail();\n    \n    // Legs\n    leg(1);    // Right leg\n    leg(-1);   // Left leg\n    \n    // Eyes\n    eye(1);    // Right eye\n    eye(-1);   // Left eye\n    \n    // Breast detail\n    translate([0, 0, -10])\n        scale([0.5, 1, 0.3])\n            sphere(8);\n}",
    "renders": true
  },
  {
    "animal": "tick",
    "openscad_code": "// Realistic Tick Model - Medium Complexity\n// Size: ~75mm length\n\n$fn = 32;\n\nmodule tick_body() {\n    // Main body - oval shaped\n    union() {\n        // Thorax\n        translate([0, 0, 5])\n            scale([1.5, 1, 0.8])\n            sphere(10);\n            \n        // Abdomen (larger)\n        translate([-15, 0, 3])\n            scale([2, 1.5, 1.2])\n            sphere(12);\n    }\n}\n\nmodule tick_head() {\n    // Head with mouthparts\n    union() {\n        // Head capsule\n        translate([15, 0, 8])\n            rotate([0, 0, 0])\n            scale([1.2, 0.9, 0.7])\n            sphere(6);\n            \n        // Chelicerae (mouthparts)\n        for(i = [-1, 1]) {\n            translate([18, i*2, 6])\n                rotate([0, 0, -10*i])\n                scale([0.3, 0.3, 1.5])\n                cylinder(8, 2, 1);\n                \n            translate([18, i*3, 5])\n                rotate([0, 0, -20*i])\n                scale([0.2, 0.2, 1.2])\n                cylinder(6, 1.5, 0.5);\n        }\n        \n        // Hypostome (center mouthpart with teeth)\n        translate([19, 0, 4])\n            scale([0.4, 0.2, 1.8])\n            cylinder(10, 2, 1);\n    }\n}\n\nmodule tick_legs() {\n    // 8 legs, 4 pairs\n    for(side = [-1, 1]) {\n        // Front legs (pair 1)\n        translate([10, side*8, 8])\n            rotate([0, 0, side*45])\n            leg_pair(12, 2, 3);\n            \n        // Middle legs (pair 2)  \n        translate([0, side*12, 6])\n            rotate([0, 0, side*15])\n            leg_pair(14, 1.5, 2.5);\n            \n        // Rear legs (pair 3)\n        translate([-10, side*14, 4])\n            rotate([0, 0, side*-30])\n            leg_pair(16, 1.2, 2);\n            \n        // Hind legs (pair 4)\n        translate([-20, side*12, 2])\n            rotate([0, 0, side*-60])\n            leg_pair(12, 1, 1.5);\n    }\n}\n\nmodule leg_pair(length, width, thickness) {\n    // Single leg with segments\n    union() {\n        // Coxa\n        translate([0, 0, 0])\n            rotate([90, 0, 0])\n            cylinder(3, width*2, width*1.5);\n            \n        // Trochanter\n        translate([0, 3, 0])\n            rotate([90, 0, 0])\n            cylinder(2, width*1.5, width);\n            \n        // Femur\n        translate([0, 5, 0])\n            rotate([90, 0, 0])\n            cylinder(length*0.4, width, width*0.8);\n            \n        // Tibia\n        translate([0, 5+length*0.4, 0])\n            rotate([90, 0, 0])\n            cylinder(length*0.3, width*0.8, width*0.6);\n            \n        // Tarsus\n        translate([0, 5+length*0.7, 0])\n            rotate([90, 0, 0])\n            cylinder(length*0.3, width*0.6, width*0.3);\n    }\n}\n\nmodule tick_details() {\n    // Scutum (dorsal shield)\n    difference() {\n        translate([5, 0, 12])\n            scale([1.8, 1.4, 0.3])\n            sphere(8);\n            \n        // Add texture pattern\n        for(i = [-4:4]) {\n            translate([5+i*2, 0, 12.5])\n                scale([0.1, 1.2, 0.1])\n                cube([0.5, 12, 0.5]);\n        }\n    }\n    \n    // Spiracles (breathing holes)\n    for(side = [-1, 1]) {\n        translate([-8, side*8, 3])\n            rotate([90, 0, 0])\n            cylinder(1, 1, 1.5);\n            \n        translate([-8, side*8, 2.5])\n            cylinder(2, 0.5, 0.5);\n    }\n    \n    // Genital opening\n    translate([-12, 0, 2])\n        rotate([90, 0, 0])\n        cylinder(1, 2, 2);\n}\n\n// Assembly\nunion() {\n    tick_body();\n    tick_head();\n    tick_legs();\n    tick_details();\n}\n\n// Print orientation - flat on back\nrotate([0, 180, 0])\n    translate([0, 0, -15]) {\n        tick_body();\n        tick_head();\n        tick_legs();\n        tick_details();\n    }",
    "renders": true
  },
  {
    "animal": "tiger",
    "openscad_code": "// Tiger - Medium complexity, realistic style\n// Dimensions: ~70mm long x ~35mm tall x ~25mm wide\n\nmodule tiger() {\n    // Main body\n    union() {\n        // Torso\n        translate([0, 0, 12])\n        scale([1.2, 0.6, 1])\n        sphere(d=25, $fn=30);\n        \n        // Belly\n        translate([0, 0, 7])\n        scale([1.1, 0.5, 0.6])\n        sphere(d=25, $fn=30);\n    }\n    \n    // Head\n    translate([-20, 0, 18])\n    union() {\n        // Main head shape\n        scale([1.3, 1, 1.1])\n        sphere(d=18, $fn=30);\n        \n        // Snout\n        translate([-6, 0, -2])\n        scale([0.8, 0.6, 0.7])\n        sphere(d=12, $fn=30);\n    }\n    \n    // Ears\n    for(side = [-1, 1]) {\n        translate([-20, side*8, 26])\n        rotate([0, side*10, 0])\n        scale([0.3, 0.1, 0.8])\n        cylinder(d1=12, d2=6, h=8, $fn=20);\n    }\n    \n    // Legs\n    for(pos = [[-10, 8], [8, 8], [-10, -8], [8, -8]]) {\n        translate([pos[0], pos[1], 0])\n        union() {\n            // Upper leg\n            translate([0, 0, 8])\n            scale([0.4, 0.4, 1])\n            cylinder(d=8, h=12, $fn=20);\n            \n            // Paw\n            translate([0, 0, 2])\n            sphere(d=10, $fn=20);\n        }\n    }\n    \n    // Tail\n    translate([15, 0, 12])\n    rotate([0, 30, 0])\n    scale([1, 1, 0.4])\n    cylinder(d=8, h=25, $fn=20);\n    translate([30, 0, 20])\n    sphere(d=8, $fn=20);\n    \n    // Stripes - using thin boxes\n    for(i = [-1, 1]) {\n        // Body stripes\n        for(pos = [-5, 0, 5, 10]) {\n            translate([pos, i*8, 15])\n            rotate([0, 0, 45*i])\n            scale([0.5, 3, 0.5])\n            cube([2, 10, 2], center=true);\n        }\n        \n        // Head stripes\n        translate([-20, i*6, 20])\n        rotate([0, 0, 30*i])\n        scale([0.5, 2, 0.5])\n        cube([1, 6, 1], center=true);\n        \n        translate([-22, i*4, 18])\n        rotate([0, 0, -20*i])\n        scale([0.5, 2, 0.5])\n        cube([1, 6, 1], center=true);\n    }\n    \n    // Eyes\n    for(side = [-1, 1]) {\n        translate([-23, side*5, 20])\n        sphere(d=3, $fn=10);\n    }\n    \n    // Nose\n    translate([-28, 0, 18])\n    rotate([0, 90, 0])\n    cylinder(d1=4, d2=0, h=3, $fn=20);\n}\n\n// Main assembly\ntiger();",
    "renders": true
  },
  {
    "animal": "tilapia",
    "openscad_code": "// Tilapia Model - Medium Complexity\n// Realistic style with printable features\n\n$fn = 30;\n\nmodule fish_body() {\n    // Main body - ellipsoid shape\n    scale([1.2, 0.6, 0.4]) sphere(r=25);\n}\n\nmodule tail_fin() {\n    // Tail fin - two connected triangles\n    union() {\n        // Left lobe\n        translate([-30, 0, 0])\n            rotate([0, 0, 20])\n                linear_extrude(height=2)\n                    polygon(points=[[0,0], [-15,-12], [-15,12]]);\n        \n        // Right lobe\n        translate([-30, 0, 0])\n            rotate([0, 0, -20])\n                linear_extrude(height=2)\n                    polygon(points=[[0,0], [-15,-12], [-15,12]]);\n    }\n}\n\nmodule dorsal_fin_spines() {\n    // Dorsal fin with spines\n    for(i = [-20:5:15]) {\n        translate([i, 0, 8])\n            rotate([0, 90, 0])\n                cylinder(h=10, r1=1, r2=0.5);\n    }\n}\n\nmodule dorsal_fin_web() {\n    // Web between dorsal spines\n    hull() {\n        translate([-20, 0, 8])\n            sphere(r=1);\n        translate([15, 0, 8])\n            sphere(r=1);\n    }\n}\n\nmodule pectoral_fin() {\n    // Side fins\n    translate([5, 0, -1])\n        rotate([0, 30, 0])\n            scale([1, 0.5, 0.2])\n                sphere(r=8);\n}\n\nmodule pelvic_fin() {\n    // Bottom fins\n    translate([0, 0, -5])\n        rotate([90, 0, 0])\n            cylinder(h=8, r1=4, r2=2);\n}\n\nmodule anal_fin() {\n    // Anal fin under tail\n    translate([-15, 0, -7])\n        rotate([0, 90, 0])\n            cylinder(h=12, r1=2, r2=1);\n}\n\nmodule head_features() {\n    // Head with mouth and eyes\n    difference() {\n        // Head shape\n        translate([25, 0, 0])\n            scale([0.9, 0.8, 0.8])\n                sphere(r=15);\n        \n        // Mouth opening\n        translate([35, 0, -2])\n            rotate([0, -20, 0])\n                cube([8, 6, 4], center=true);\n        \n        // Left eye socket\n        translate([28, -6, 3])\n            sphere(r=2.5);\n        \n        // Right eye socket\n        translate([28, 6, 3])\n            sphere(r=2.5);\n    }\n}\n\nmodule eyes() {\n    // Eyeballs\n    // Left eye\n    translate([28.5, -6, 3])\n        sphere(r=2);\n    \n    // Right eye\n    translate([28.5, 6, 3])\n        sphere(r=2);\n}\n\nmodule lateral_line() {\n    // Lateral line - series of small scales\n    for(i = [-15:5:20]) {\n        translate([i, 0, 0])\n            sphere(r=0.5);\n    }\n}\n\nmodule scales_pattern() {\n    // Simple scale pattern using small spheres\n    for(x = [-20:4:25]) {\n        for(y = [-8:4:8]) {\n            if(y != 0) {\n                translate([x, y, 0])\n                    sphere(r=0.3);\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    fish_body();\n    head_features();\n    tail_fin();\n    \n    // Fins\n    dorsal_fin_spines();\n    dorsal_fin_web();\n    \n    // Side fins (mirrored)\n    pectoral_fin();\n    mirror([0,1,0]) pectoral_fin();\n    \n    // Pelvic fins\n    translate([5, -4, -5])\n        pelvic_fin();\n    translate([5, 4, -5])\n        pelvic_fin();\n    \n    // Anal fin\n    anal_fin();\n    \n    // Eyes\n    eyes();\n    \n    // Detail features\n    lateral_line();\n    scales_pattern();\n}",
    "renders": true
  },
  {
    "animal": "tilefish",
    "openscad_code": "// Tilefish - Realistic Medium Complexity\n// Body proportions based on typical tilefish anatomy\n// Optimized for 3D printing with minimal overhangs\n\n$fn = 32;  // Smooth curves for printing\n\n// Main body module\nmodule tilefish_body() {\n    color(\"goldenrod\")\n    difference() {\n        // Main body ellipsoid\n        scale([1, 0.6, 0.4])\n        sphere(r=25);\n        \n        // Remove bottom for flat printing\n        translate([0, 0, -15])\n        cube([100, 100, 30], center=true);\n    }\n}\n\n// Head with pointed snout\nmodule tilefish_head() {\n    color(\"goldenrod\")\n    union() {\n        // Head sphere\n        translate([-20, 0, 5])\n        scale([1.1, 0.9, 0.8])\n        sphere(r=15);\n        \n        // Snout extension\n        translate([-35, 0, 3])\n        scale([1.5, 0.6, 0.5])\n        sphere(r=8);\n    }\n}\n\n// Dorsal fin with segmented rays\nmodule dorsal_fin() {\n    color(\"darkorange\")\n    translate([-5, 0, 10])\n    union() {\n        // Base of dorsal fin\n        translate([0, 0, 0])\n        scale([1.2, 0.1, 0.8])\n        sphere(r=15);\n        \n        // Fin rays\n        for(i = [-12:3:12]) {\n            translate([i/2, 0, 12 + abs(i)/2])\n            rotate([0, 0, i*2])\n            scale([0.2, 0.1, 1])\n            cylinder(r1=3, r2=1, h=8);\n        }\n    }\n}\n\n// Caudal fin (tail)\nmodule caudal_fin() {\n    color(\"darkorange\")\n    translate([25, 0, 0])\n    union() {\n        // Top lobe\n        translate([0, 0, 5])\n        rotate([0, 20, 0])\n        scale([0.5, 0.1, 1])\n        cylinder(r1=0, r2=12, h=15);\n        \n        // Bottom lobe\n        translate([0, 0, -5])\n        rotate([0, -20, 0])\n        scale([0.5, 0.1, 1])\n        cylinder(r1=0, r2=12, h=15);\n    }\n}\n\n// Pectoral fins\nmodule pectoral_fins() {\n    color(\"darkorange\")\n    union() {\n        // Left fin\n        translate([-15, 15, -5])\n        rotate([0, 0, 45])\n        scale([1, 0.2, 0.8])\n        cylinder(r1=8, r2=0, h=12);\n        \n        // Right fin\n        translate([-15, -15, -5])\n        rotate([0, 0, -45])\n        scale([1, 0.2, 0.8])\n        cylinder(r1=8, r2=0, h=12);\n    }\n}\n\n// Eye with socket\nmodule eye(left_right) {\n    color(\"black\")\n    translate([-25, left_right * 8, 8])\n    difference() {\n        // Eyeball\n        sphere(r=3);\n        \n        // Pupil\n        translate([1, 0, 0])\n        scale([0.5, 1, 1])\n        sphere(r=2);\n    }\n}\n\n// Mouth opening\nmodule mouth() {\n    color(\"darkred\")\n    translate([-38, 0, 0])\n    rotate([0, -20, 0])\n    scale([1, 0.3, 0.2])\n    sphere(r=5);\n}\n\n// Body stripes pattern\nmodule stripes() {\n    color(\"saddlebrown\")\n    for(i = [-15:10:20]) {\n        translate([i, 0, 5])\n        scale([0.5, 1, 0.3])\n        rotate([0, 90, 0])\n        cylinder(r=20, h=2);\n    }\n}\n\n// Assemble the complete tilefish\nunion() {\n    // Main body parts\n    tilefish_body();\n    tilefish_head();\n    \n    // Fins\n    dorsal_fin();\n    caudal_fin();\n    pectoral_fins();\n    \n    // Details\n    stripes();\n    eye(1);   // Left eye\n    eye(-1);  // Right eye\n    mouth();\n    \n    // Ventral fin (small)\n    color(\"darkorange\")\n    translate([5, 0, -8])\n    scale([0.8, 0.1, 0.5])\n    sphere(r=10);\n}\n\n// Flat base for stable printing\ntranslate([0, 0, -10])\ncolor(\"goldenrod\")\ncube([60, 30, 2], center=true);",
    "renders": true
  },
  {
    "animal": "tinamou",
    "openscad_code": "// Tinamou - medium complexity realistic style\n// Overall dimensions ~80mm length\n\n// Body\nmodule body() {\n    difference() {\n        // Main body\n        union() {\n            // Main oval body\n            scale([1.2, 0.8, 0.9])\n                sphere(20, $fn=32);\n            \n            // Chest protrusion\n            translate([0, 0, -5])\n                scale([1.3, 1, 0.7])\n                    sphere(10, $fn=32);\n            \n            // Back hump\n            translate([-15, 0, 5])\n                scale([0.8, 0.6, 0.9])\n                    sphere(12, $fn=32);\n        }\n        \n        // Neck hole (front)\n        translate([22, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h=15, r1=8, r2=6, $fn=16);\n        \n        // Tail hole (back)\n        translate([-22, 0, 0])\n            rotate([0, -90, 0])\n            cylinder(h=15, r1=8, r2=6, $fn=16);\n    }\n}\n\n// Head\nmodule head() {\n    difference() {\n        // Main head shape\n        union() {\n            // Skull\n            translate([35, 0, 8])\n                scale([0.8, 0.7, 0.9])\n                    sphere(12, $fn=32);\n            \n            // Beak base\n            translate([48, 0, 8])\n                scale([1.2, 0.3, 0.3])\n                    sphere(8, $fn=16);\n        }\n        \n        // Eye sockets\n        translate([38, 6, 12])\n            sphere(3, $fn=16);\n        translate([38, -6, 12])\n            sphere(3, $fn=16);\n    }\n    \n    // Beak\n    translate([52, 0, 8])\n        rotate([0, -10, 0])\n        scale([0.3, 0.15, 0.15])\n            cylinder(h=12, r1=6, r2=0, $fn=8);\n    \n    // Eyes\n    translate([38, 6, 12])\n        color([0.1,0.1,0.1])\n            sphere(2.5, $fn=16);\n    translate([38, -6, 12])\n        color([0.1,0.1,0.1])\n            sphere(2.5, $fn=16);\n}\n\n// Wings\nmodule wings() {\n    // Left wing\n    translate([0, 15, 10])\n        rotate([0, 0, -20])\n        scale([1, 0.2, 0.4])\n            sphere(18, $fn=32);\n    \n    // Right wing\n    translate([0, -15, 10])\n        rotate([0, 0, 20])\n        scale([1, 0.2, 0.4])\n            sphere(18, $fn=32);\n}\n\n// Tail\nmodule tail() {\n    // Tail feathers\n    for(i = [-1:1]) {\n        translate([-30, i*8, 0])\n            rotate([0, -20, i*10])\n            scale([0.3, 0.05, 0.8])\n                cube([25, 8, 2]);\n    }\n}\n\n// Legs and feet\nmodule legs() {\n    // Left leg\n    translate([5, 8, -15])\n        cylinder(h=18, r=2.5, $fn=16);\n    \n    // Left foot\n    translate([5, 13, -33])\n        rotate([0, 0, -30])\n        difference() {\n            // Main foot\n            scale([1.5, 0.3, 1])\n                sphere(6, $fn=16);\n            \n            // Toe gaps\n            translate([3, 0, 0])\n                cube([6, 3, 12], center=true);\n            translate([-3, 0, 0])\n                cube([6, 3, 12], center=true);\n        }\n    \n    // Right leg\n    translate([5, -8, -15])\n        cylinder(h=18, r=2.5, $fn=16);\n    \n    // Right foot\n    translate([5, -13, -33])\n        rotate([0, 0, 30])\n        difference() {\n            // Main foot\n            scale([1.5, 0.3, 1])\n                sphere(6, $fn=16);\n            \n            // Toe gaps\n            translate([3, 0, 0])\n                cube([6, 3, 12], center=true);\n            translate([-3, 0, 0])\n                cube([6, 3, 12], center=true);\n        }\n}\n\n// Neck connector\nmodule neck() {\n    union() {\n        translate([28, 0, 4])\n            rotate([0, 90, 0])\n            cylinder(h=8, r1=6, r2=5, $fn=16);\n        \n        translate([28, 0, 4])\n            rotate([0, -90, 0])\n            cylinder(h=8, r1=6, r2=5, $fn=16);\n    }\n}\n\n// Tail connector\nmodule tail_connector() {\n    union() {\n        translate([-28, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h=8, r1=6, r2=5, $fn=16);\n        \n        translate([-28, 0, 0])\n            rotate([0, -90, 0])\n            cylinder(h=8, r1=6, r2=5, $fn=16);\n    }\n}\n\n// Main assembly\nunion() {\n    body();\n    head();\n    neck();\n    wings();\n    tail_connector();\n    tail();\n    legs();\n}",
    "renders": true
  },
  {
    "animal": "tit",
    "openscad_code": "// Realistic Tit Bird - Medium Complexity\n// Dimensions: ~80mm wingspan, ~60mm length, ~45mm height\n\n// Main parameters\nbody_length = 35;\nbody_height = 25;\nbody_width = 22;\nhead_radius = 12;\nbeak_length = 8;\nbeak_width = 3;\nbeak_height = 3;\ntail_length = 18;\ntail_height = 15;\ntail_width = 12;\nwing_length = 25;\nwing_width = 12;\nwing_thickness = 2;\nleg_length = 12;\nleg_thickness = 3;\nfoot_length = 8;\nfoot_width = 4;\n\n// Body module - teardrop shape\nmodule bird_body() {\n    union() {\n        // Main body - ellipsoid\n        scale([1, 0.8, 0.7])\n        sphere(r=body_height/2);\n        \n        // Tail connection\n        translate([body_length/2 - 5, 0, -body_height/4])\n        scale([1.5, 1, 0.6])\n        sphere(r=body_height/3);\n    }\n}\n\n// Head module with realistic features\nmodule bird_head() {\n    union() {\n        // Main head shape\n        translate([-body_length/2 - head_radius + 5, 0, body_height/2])\n        sphere(r=head_radius);\n        \n        // Beak\n        translate([-body_length/2 - head_radius - beak_length/2, 0, body_height/2])\n        rotate([0, -15, 0])\n        scale([beak_length, beak_width, beak_height])\n        cube([1, 1, 1], center=true);\n        \n        // Eye sockets\n        translate([-body_length/2 - head_radius + 3, head_radius/2, body_height/2 + 2])\n        sphere(r=2);\n        translate([-body_length/2 - head_radius + 3, -head_radius/2, body_height/2 + 2])\n        sphere(r=2);\n    }\n}\n\n// Wing module with feather details\nmodule bird_wing(side) {\n    translate([0, side * body_width/3, body_height/3])\n    rotate([0, -20 * side, 0])\n    union() {\n        // Main wing\n        translate([body_length/4, 0, 0])\n        scale([wing_length, wing_width, wing_thickness])\n        cube([1, 1, 1], center=true);\n        \n        // Wing tip\n        translate([body_length/4 + wing_length/2, 0, 0])\n        scale([wing_length/3, wing_width/2, wing_thickness])\n        sphere(r=1);\n        \n        // Feather details\n        for(i = [0:2]) {\n            translate([body_length/4 + i * wing_length/3, side * (wing_width/2 + 1), 0])\n            scale([wing_length/5, 1, wing_thickness/2])\n            cube([1, 1, 1], center=true);\n        }\n    }\n}\n\n// Tail module\nmodule bird_tail() {\n    translate([body_length/2, 0, -body_height/4])\n    rotate([30, 0, 0])\n    union() {\n        // Main tail\n        scale([tail_length, tail_width, tail_height])\n        cube([1, 1, 1], center=true);\n        \n        // Tail feathers\n        for(i = [-1:1]) {\n            translate([tail_length/2, i * tail_width/3, 0])\n            scale([tail_length/3, 1, 2])\n            cube([1, 1, 1], center=true);\n        }\n    }\n}\n\n// Leg and foot module\nmodule bird_leg(side) {\n    translate([-body_length/4, side * body_width/4, -body_height/2 - leg_length/2])\n    union() {\n        // Leg\n        cylinder(h=leg_length, r=leg_thickness/2, $fn=8);\n        \n        // Foot\n        translate([0, 0, -leg_length/2 - foot_width/2])\n        rotate([90, 0, 0])\n        union() {\n            // Main foot\n            scale([foot_length, foot_width, leg_thickness/2])\n            cube([1, 1, 1], center=true);\n            \n            // Toes\n            for(i = [-1, 0, 1]) {\n                translate([foot_length/2 - 2, i * foot_width/3, 0])\n                scale([foot_length/3, foot_width/4, leg_thickness/2])\n                cube([1, 1, 1], center=true);\n            }\n        }\n    }\n}\n\n// Chest feather detail\nmodule chest_feathers() {\n    translate([-body_length/4, 0, -body_height/3])\n    for(i = [0:3]) {\n        for(j = [-1:1]) {\n            translate([i * body_length/8, j * body_width/6, -i * 2])\n            scale([2, 2, 1])\n            sphere(r=1.5);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Body\n    bird_body();\n    \n    // Head\n    bird_head();\n    \n    // Wings\n    bird_wing(1);  // Right wing\n    bird_wing(-1); // Left wing\n    \n    // Tail\n    bird_tail();\n    \n    // Legs and feet\n    bird_leg(1);   // Right leg\n    bird_leg(-1);  // Left leg\n    \n    // Chest detail\n    chest_feathers();\n}",
    "renders": true
  },
  {
    "animal": "titan",
    "openscad_code": "// Titan - Realistic Style, Medium Complexity\n// Total height ~80mm, suitable for 3D printing\n\n// Main body dimensions\nth = 80;  // total height\nhead_h = 15;\ntorso_h = 25;\nlegs_h = 35;\nfeet_h = 5;\n\n// Wall thickness for 3D printing\nwall = 2;\n\nmodule head() {\n    // Skull base\n    translate([0, 0, torso_h + legs_h + feet_h + head_h/2]) {\n        difference() {\n            sphere(d = 12);\n            translate([0, 0, -6]) cube([20, 20, 6], center = true);\n        }\n    }\n    \n    // Jaw\n    translate([0, -5, torso_h + legs_h + feet_h + head_h/2 - 5]) {\n        rotate([20, 0, 0]) {\n            cube([8, 10, 6], center = true);\n        }\n    }\n    \n    // Eyes\n    for(x = [-3, 3]) {\n        translate([x, -4, torso_h + legs_h + feet_h + head_h/2]) {\n            sphere(d = 2);\n        }\n    }\n}\n\nmodule torso() {\n    // Chest\n    translate([0, 0, legs_h + feet_h + torso_h/2]) {\n        cube([18, 10, torso_h], center = true);\n    }\n    \n    // Ab muscles\n    for(i = [0:2]) {\n        translate([0, 5.5, legs_h + feet_h + 10 + i*5]) {\n            cube([12, 1, 3], center = true);\n        }\n    }\n    \n    // Shoulders\n    for(x = [-11, 11]) {\n        translate([x, 0, legs_h + feet_h + 15]) {\n            sphere(d = 8);\n        }\n    }\n}\n\nmodule arms() {\n    // Upper arms\n    for(side = [-1, 1]) {\n        translate([side*13, 0, legs_h + feet_h + 20]) {\n            rotate([0, 0, side*30]) {\n                cylinder(h = 15, d = 6, center = true);\n            }\n        }\n        \n        // Lower arms\n        translate([side*20, 0, legs_h + feet_h + 10]) {\n            rotate([0, 0, side*45]) {\n                cylinder(h = 15, d = 5, center = true);\n            }\n        }\n        \n        // Fists\n        translate([side*26, 0, legs_h + feet_h + 5]) {\n            sphere(d = 6);\n        }\n    }\n}\n\nmodule legs() {\n    // Thighs\n    for(side = [-1, 1]) {\n        translate([side*5, 0, feet_h + legs_h/2]) {\n            rotate([0, 10, 0]) {\n                cylinder(h = 20, d = 8, center = true);\n            }\n        }\n        \n        // Shins\n        translate([side*5, 0, feet_h + 8]) {\n            rotate([0, 5, 0]) {\n                cylinder(h = 18, d = 6, center = true);\n            }\n        }\n    }\n}\n\nmodule feet() {\n    for(side = [-1, 1]) {\n        translate([side*5, 2, feet_h/2]) {\n            cube([8, 12, feet_h], center = true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    head();\n    torso();\n    arms();\n    legs();\n    feet();\n}",
    "renders": true
  },
  {
    "animal": "toad",
    "openscad_code": "// Realistic Toad - Medium Complexity\n// Approx 80mm long, 3D printable\n\n// Overall scale factor\nscale_factor = 0.8;\n\nmodule toad_body() {\n    // Main body - ellipsoid shape\n    translate([0, 0, 30 * scale_factor])\n    scale([1.2, 1, 0.8])\n    sphere(25 * scale_factor, $fn=32);\n    \n    // Lower belly bulge\n    translate([0, 0, 15 * scale_factor])\n    scale([1.3, 1.1, 0.4])\n    sphere(20 * scale_factor, $fn=32);\n}\n\nmodule toad_head() {\n    // Head - wider and flatter\n    translate([35 * scale_factor, 0, 35 * scale_factor])\n    scale([0.9, 1.2, 0.7])\n    sphere(20 * scale_factor, $fn=32);\n    \n    // Snout protrusion\n    translate([50 * scale_factor, 0, 32 * scale_factor])\n    scale([0.5, 0.8, 0.6])\n    sphere(12 * scale_factor, $fn=32);\n}\n\nmodule eyes() {\n    // Left eye\n    translate([38 * scale_factor, -15 * scale_factor, 42 * scale_factor]) {\n        // Eye socket\n        sphere(8 * scale_factor, $fn=16);\n        \n        // Pupil\n        translate([4 * scale_factor, 0, 2 * scale_factor])\n        scale([0.5, 1, 1])\n        sphere(5 * scale_factor, $fn=16);\n    }\n    \n    // Right eye - mirrored\n    translate([38 * scale_factor, 15 * scale_factor, 42 * scale_factor]) {\n        sphere(8 * scale_factor, $fn=16);\n        translate([4 * scale_factor, 0, 2 * scale_factor])\n        scale([0.5, 1, 1])\n        sphere(5 * scale_factor, $fn=16);\n    }\n}\n\nmodule legs() {\n    // Front legs\n    for(side = [-1, 1]) {\n        // Upper arm\n        translate([25 * scale_factor, side * 20 * scale_factor, 25 * scale_factor])\n        rotate([0, 45, 0])\n        cylinder(h=15 * scale_factor, r=5 * scale_factor, $fn=12);\n        \n        // Forearm\n        translate([35 * scale_factor, side * 25 * scale_factor, 15 * scale_factor])\n        rotate([0, 30, 20 * side])\n        cylinder(h=12 * scale_factor, r=4 * scale_factor, $fn=12);\n        \n        // Hand\n        translate([42 * scale_factor, side * 28 * scale_factor, 10 * scale_factor])\n        sphere(6 * scale_factor, $fn=12);\n    }\n    \n    // Hind legs\n    for(side = [-1, 1]) {\n        // Thigh\n        translate([-25 * scale_factor, side * 15 * scale_factor, 25 * scale_factor])\n        rotate([45, 0, -20 * side])\n        cylinder(h=20 * scale_factor, r=7 * scale_factor, $fn=12);\n        \n        // Lower leg\n        translate([-35 * scale_factor, side * 25 * scale_factor, 15 * scale_factor])\n        rotate([30, 0, -30 * side])\n        cylinder(h=18 * scale_factor, r=6 * scale_factor, $fn=12);\n        \n        // Foot\n        translate([-45 * scale_factor, side * 30 * scale_factor, 8 * scale_factor])\n        scale([1.5, 1, 0.5])\n        sphere(8 * scale_factor, $fn=12);\n    }\n}\n\nmodule warts() {\n    // Random warts on back\n    for(i = [0:5:35]) {\n        angle = i * 10;\n        radius = 15 + sin(i) * 5;\n        \n        translate([\n            cos(angle) * radius * scale_factor * 0.5,\n            sin(angle) * radius * scale_factor * 0.4,\n            45 * scale_factor\n        ])\n        sphere(2 * scale_factor, $fn=8);\n    }\n    \n    // Additional warts\n    for(pos = [[20, 10], [10, -15], [-10, 12], [-20, -8]]) {\n        translate([pos[0] * scale_factor, pos[1] * scale_factor, 48 * scale_factor])\n        sphere(1.5 * scale_factor, $fn=8);\n    }\n}\n\nmodule mouth() {\n    // Mouth opening\n    difference() {\n        union() {\n            toad_head();\n            toad_body();\n        }\n        \n        // Mouth cavity\n        translate([52 * scale_factor, 0, 28 * scale_factor])\n        rotate([0, -20, 0])\n        scale([0.8, 1.5, 0.6])\n        sphere(15 * scale_factor, $fn=32);\n    }\n}\n\n// Combine all parts\nunion() {\n    mouth();\n    eyes();\n    legs();\n    warts();\n}\n\n// Add flat bottom for stability\ntranslate([0, 0, 5 * scale_factor])\ncube([80 * scale_factor, 60 * scale_factor, 10 * scale_factor], center=true);",
    "renders": true
  },
  {
    "animal": "tomtit",
    "openscad_code": "// Tomtit - realistic style, medium complexity\n// Designed for 3D printing - no overhangs, 0.8mm walls\n\n$fn = 32;\nbody_length = 45;\nbody_height = 22;\nbody_width = 18;\n\nmodule body() {\n    difference() {\n        // Main body - ellipsoid shape\n        scale([1, 0.8, 0.6])\n            sphere(r=body_length/2);\n        \n        // Flatten bottom for printing\n        translate([0, 0, -body_height/2])\n            cube([body_length*2, body_width*2, body_height], center=true);\n    }\n}\n\nmodule head() {\n    translate([body_length/2 - 5, 0, body_height/2 - 3]) {\n        // Head sphere\n        sphere(r=8);\n        \n        // Beak - cone shape\n        translate([8, 0, -2]) {\n            rotate([0, -20, 0])\n                cylinder(h=12, r1=2, r2=0);\n        }\n        \n        // Eye\n        translate([5, -4, 2]) {\n            color(\"black\")\n                sphere(r=1.5);\n        }\n        translate([5, 4, 2]) {\n            color(\"black\")\n                sphere(r=1.5);\n        }\n    }\n}\n\nmodule wing() {\n    // Curved wing shape\n    translate([0, 0, body_height/2 - 2]) {\n        rotate([0, 0, -10])\n            scale([1.2, 0.2, 0.8])\n                sphere(r=body_length/3);\n    }\n}\n\nmodule tail() {\n    // Fan tail - multiple feathers\n    translate([-body_length/2 - 2, 0, body_height/2 - 5]) {\n        for(i = [-1:0.5:1]) {\n            rotate([0, 0, i * 25])\n                translate([i * 2, 0, 0])\n                    scale([1.5, 0.3, 0.8])\n                        cylinder(h=12, r1=5, r2=0);\n        }\n    }\n}\n\nmodule legs() {\n    // Left leg\n    translate([body_length/2 - 10, -5, -body_height/2 + 2]) {\n        // Upper leg\n        cylinder(h=6, r=1.5);\n        \n        // Lower leg\n        translate([0, 0, -6])\n            rotate([10, 0, 0])\n                cylinder(h=8, r=1.2);\n        \n        // Foot - 3 toes\n        translate([0, -2, -13])\n            for(j = [-1, 0, 1]) {\n                translate([j * 2, 0, 0])\n                    rotate([0, 90, 0])\n                        cylinder(h=4, r=0.8);\n            }\n    }\n    \n    // Right leg\n    translate([body_length/2 - 10, 5, -body_height/2 + 2]) {\n        cylinder(h=6, r=1.5);\n        translate([0, 0, -6])\n            rotate([10, 0, 0])\n                cylinder(h=8, r=1.2);\n        translate([0, 2, -13])\n            for(j = [-1, 0, 1]) {\n                translate([j * 2, 0, 0])\n                    rotate([0, 90, 0])\n                        cylinder(h=4, r=0.8);\n            }\n    }\n}\n\nmodule chest() {\n    // Round chest area\n    translate([body_length/2 - 8, 0, -body_height/4]) {\n        scale([0.8, 1, 1.2])\n            sphere(r=body_width/2);\n    }\n}\n\n// Assemble the tomtit\nunion() {\n    color(\"darkslategray\") body();\n    color(\"darkslategray\") head();\n    color(\"black\") translate([0, -body_width/2 + 2, 0]) wing();\n    color(\"black\") mirror([0, 1, 0]) translate([0, -body_width/2 + 2, 0]) wing();\n    color(\"black\") tail();\n    color(\"orange\") legs();\n    color(\"whitesmoke\") chest();\n}",
    "renders": true
  },
  {
    "animal": "topi",
    "openscad_code": "// Realistic Topi (antelope) - Medium complexity\n// Approx 80mm long, 3D-printable with no overhangs\n\n$fn = 32;\n\nmodule body() {\n    // Main torso - elongated oval\n    rotate([0, 90, 0])\n    scale([1.5, 1, 1.2])\n    sphere(r = 12);\n}\n\nmodule neck() {\n    // Neck connecting body to head\n    translate([-25, 0, 5])\n    rotate([0, 15, 0])\n    scale([1, 0.8, 0.8])\n    cylinder(h = 20, r1 = 8, r2 = 4);\n}\n\nmodule head() {\n    // Head with slight taper\n    translate([-42, 0, 12])\n    rotate([0, -20, 0])\n    scale([1.2, 0.8, 0.7])\n    cylinder(h = 18, r1 = 5, r2 = 3);\n    \n    // Muzzle extension\n    translate([-55, 0, 12])\n    scale([0.8, 0.6, 0.5])\n    sphere(r = 4);\n}\n\nmodule ears() {\n    // Left ear\n    translate([-40, -4, 18])\n    rotate([0, -30, -20])\n    scale([0.3, 1, 2])\n    sphere(r = 3);\n    \n    // Right ear\n    translate([-40, 4, 18])\n    rotate([0, -30, 20])\n    scale([0.3, 1, 2])\n    sphere(r = 3);\n}\n\nmodule horns() {\n    // Left horn - slightly curved\n    translate([-38, -3, 20])\n    rotate([0, 0, -10])\n    for(i = [0:9]) {\n        translate([0, 0, i*1.2])\n        rotate([0, 0, i*3])\n        scale([0.9, 0.9, 1])\n        cylinder(h = 1.2, r = 1.5 - i*0.1);\n    }\n    \n    // Right horn\n    translate([-38, 3, 20])\n    rotate([0, 0, 10])\n    for(i = [0:9]) {\n        translate([0, 0, i*1.2])\n        rotate([0, 0, -i*3])\n        scale([0.9, 0.9, 1])\n        cylinder(h = 1.2, r = 1.5 - i*0.1);\n    }\n}\n\nmodule legs() {\n    // Front left leg\n    translate([-15, -7, -12])\n    rotate([10, 0, 0])\n    cylinder(h = 25, r1 = 3, r2 = 2.5);\n    \n    // Front right leg\n    translate([-15, 7, -12])\n    rotate([10, 0, 0])\n    cylinder(h = 25, r1 = 3, r2 = 2.5);\n    \n    // Rear left leg\n    translate([15, -6, -12])\n    rotate([5, 0, 0])\n    cylinder(h = 25, r1 = 3.5, r2 = 3);\n    \n    // Rear right leg\n    translate([15, 6, -12])\n    rotate([5, 0, 0])\n    cylinder(h = 25, r1 = 3.5, r2 = 3);\n}\n\nmodule tail() {\n    // Tail with slight upward curve\n    translate([20, 0, 2])\n    rotate([0, 20, 0])\n    for(i = [0:7]) {\n        translate([0, 0, i*2])\n        rotate([0, -i*2, 0])\n        sphere(r = 2 - i*0.2);\n    }\n}\n\nmodule hooves() {\n    // Add small hooves to all legs\n    for(x = [-15, 15]) {\n        for(y = [-7, 7]) {\n            translate([x, y, -25])\n            scale([1, 1, 0.5])\n            cylinder(h = 2, r = 2.5);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    neck();\n    head();\n    ears();\n    horns();\n    legs();\n    tail();\n    hooves();\n}",
    "renders": true
  },
  {
    "animal": "tortoise",
    "openscad_code": "// Realistic Tortoise - Medium Complexity\n// Overall dimensions: ~80mm long x 60mm wide x 35mm tall\n\nmodule shell_segment(radius, height, angle) {\n    rotate([0, 0, angle]) translate([0, radius * 0.8, 0]) \n    scale([1, 0.7, 1]) cylinder(h=height, r1=radius, r2=radius*0.8, $fn=20);\n}\n\nmodule shell() {\n    union() {\n        // Main shell dome\n        scale([1.3, 1, 0.8]) sphere(r=25, $fn=50);\n        \n        // Shell segments pattern\n        for(i = [0:15:360]) {\n            shell_segment(20, 8, i);\n            shell_segment(15, 6, i + 7.5);\n            shell_segment(10, 4, i + 15);\n        }\n        \n        // Shell rim\n        difference() {\n            cylinder(h=8, r1=32, r2=30, $fn=50);\n            translate([0, 0, -0.1]) cylinder(h=8.2, r1=28, r2=26, $fn=50);\n        }\n    }\n}\n\nmodule head() {\n    translate([35, 0, -5]) {\n        // Main head\n        scale([1.5, 1, 1]) sphere(r=8, $fn=25);\n        \n        // Snout\n        translate([8, 0, -2]) scale([1.2, 0.8, 0.6]) sphere(r=5, $fn=20);\n        \n        // Eyes\n        for(side = [-1, 1]) {\n            translate([5, side * 5, 2]) {\n                sphere(r=1.5, $fn=12);\n                translate([0.5, 0, 0.5]) scale([0.5, 0.5, 0.5]) sphere(r=1.5, $fn=8);\n            }\n        }\n    }\n}\n\nmodule leg(position, angle) {\n    translate(position) rotate([0, 0, angle]) {\n        // Upper leg\n        rotate([0, 90, 0]) cylinder(h=12, r=5, $fn=12);\n        \n        // Lower leg\n        translate([0, 12, 0]) rotate([30, 0, 0]) \n            cylinder(h=10, r=4, $fn=12);\n        \n        // Foot\n        translate([0, 20, -3]) rotate([90, 0, 0]) \n            scale([1.5, 2, 0.8]) cylinder(h=3, r=4, $fn=15);\n    }\n}\n\nmodule tail() {\n    translate([-30, 0, -3]) rotate([0, 20, 0]) \n        scale([0.8, 1, 0.6]) sphere(r=6, $fn=15);\n}\n\n// Main assembly\nmodule tortoise() {\n    union() {\n        // Shell\n        translate([0, 0, 20]) shell();\n        \n        // Head\n        head();\n        \n        // Legs - FL, FR, RL, RR\n        leg([20, 20, 0], -30);\n        leg([20, -20, 0], 30);\n        leg([-20, 20, 0], -150);\n        leg([-20, -20, 0], 150);\n        \n        // Tail\n        tail();\n        \n        // Undershell (plastron)\n        difference() {\n            translate([0, 0, 0]) scale([1.2, 0.9, 0.3]) sphere(r=25, $fn=40);\n            translate([0, 0, -5]) cube([100, 80, 10], center=true);\n        }\n    }\n}\n\n// Render the tortoise\ntortoise();",
    "renders": true
  },
  {
    "animal": "toucan",
    "openscad_code": "// Toucan - medium complexity realistic style\n// 3D printable, ~70mm tall\n\n// Overall scale factor\nscale_factor = 0.7;\n\n// Colors for preview (not used in print)\ncolor_body = [0, 0.4, 0];\ncolor_beak = [1, 0.4, 0];\ncolor_eye = [0, 0, 0];\n\nmodule toucan() {\n    // Main body\n    color(color_body)\n    rotate([0, 0, 15])\n    scale([1.2, 1, 1])\n    sphere(10);\n    \n    // Belly bulge\n    color(color_body)\n    translate([0, 0, -8])\n    scale([1.4, 1.2, 0.8])\n    sphere(8);\n    \n    // Tail\n    color(color_body)\n    translate([-18, 0, -3])\n    rotate([0, 10, 0])\n    scale([2, 0.5, 0.3])\n    cube([15, 10, 6], center=true);\n    \n    // Neck\n    color(color_body)\n    translate([8, 0, 5])\n    rotate([0, -15, 0])\n    cylinder(h=12, r1=7, r2=5, $fn=20);\n    \n    // Head\n    color(color_body)\n    translate([15, 0, 8])\n    sphere(8);\n    \n    // Large beak\n    color(color_beak)\n    translate([20, 0, 7])\n    rotate([0, -10, 0])\n    scale([2.5, 0.8, 1])\n    cylinder(h=20, r1=6, r2=3, $fn=20);\n    \n    // Beak ridge\n    color(color_beak)\n    translate([25, 0, 9])\n    rotate([0, -10, 0])\n    scale([0.3, 0.6, 0.3])\n    cylinder(h=15, r1=4, r2=0, $fn=8);\n    \n    // Eyes\n    color(color_eye)\n    translate([17, 4, 9])\n    sphere(1.5);\n    \n    color(color_eye)\n    translate([17, -4, 9])\n    sphere(1.5);\n    \n    // Eye rings\n    color(\"white\")\n    translate([17, 4, 9])\n    sphere(2.2);\n    \n    color(\"white\")\n    translate([17, -4, 9])\n    sphere(2.2);\n    \n    // Wings\n    color(color_body)\n    for(side = [-1, 1]) {\n        translate([0, side * 8, 2])\n        rotate([0, 0, side * -20])\n        scale([1.2, 0.3, 0.8])\n        sphere(8);\n    }\n    \n    // Feet\n    color(\"orange\")\n    for(side = [-1, 1]) {\n        translate([3, side * 5, -12])\n        rotate([0, 90, 0])\n        cylinder(h=5, r=2, $fn=8);\n        \n        // Toes\n        for(i = [0:2]) {\n            translate([3, side * 5 + (i-1) * 3, -12])\n            rotate([90, 0, 0])\n            cylinder(h=3, r=1, $fn=6);\n        }\n    }\n}\n\n// Generate the toucan\nscale(scale_factor)\ntoucan();",
    "renders": true
  },
  {
    "animal": "towhee",
    "openscad_code": "// Towhee Bird 3D Model - Medium Complexity Realistic Style\n// Size: ~70mm length, 3D printable with no overhangs\n\nmodule towhee_body() {\n    // Main body - oval shape\n    scale([1.2, 0.8, 0.9])\n    sphere(15, $fn=32);\n}\n\nmodule towhee_head() {\n    // Head - slightly smaller sphere\n    translate([15, 0, 8])\n    scale([0.9, 0.85, 1.1])\n    sphere(12, $fn=32);\n}\n\nmodule towhee_beak() {\n    // Conical beak\n    translate([27, 0, 8])\n    rotate([0, -10, 0])\n    cylinder(h=12, r1=4, r2=1, $fn=16);\n}\n\nmodule towhee_tail() {\n    // Fan-shaped tail\n    translate([-18, 0, 5])\n    rotate([0, 30, 0])\n    scale([1.5, 1, 0.3])\n    sphere(12, $fn=32);\n    \n    // Tail feathers\n    for(i=[-2:2]) {\n        translate([-18, i*3, 5])\n        rotate([0, 30-i*5, 0])\n        scale([1.2, 0.3, 0.1])\n        sphere(8, $fn=16);\n    }\n}\n\nmodule towhee_wing() {\n    // Left wing\n    translate([5, 10, 8])\n    rotate([0, 0, -20])\n    scale([1.2, 0.4, 0.8])\n    sphere(10, $fn=32);\n    \n    // Wing details\n    for(i=[1:3]) {\n        translate([5-i*2, 10, 8-i])\n        rotate([0, 0, -20])\n        scale([1-i*0.2, 0.3, 0.6])\n        sphere(8-i, $fn=16);\n    }\n}\n\nmodule towhee_legs() {\n    // Left leg\n    translate([0, 8, -12])\n    cylinder(h=8, r=1.5, $fn=8);\n    translate([0, 8, -20])\n    sphere(2, $fn=8);\n    \n    // Right leg\n    translate([0, -8, -12])\n    cylinder(h=8, r=1.5, $fn=8);\n    translate([0, -8, -20])\n    sphere(2, $fn=8);\n    \n    // Toes\n    for(i=[-1, 0, 1]) {\n        translate([i*2, 8, -20])\n        rotate([0, 45*i, 0])\n        cylinder(h=4, r=0.8, $fn=8);\n    }\n    for(i=[-1, 0, 1]) {\n        translate([i*2, -8, -20])\n        rotate([0, 45*i, 0])\n        cylinder(h=4, r=0.8, $fn=8);\n    }\n}\n\nmodule towhee_eye() {\n    // Left eye\n    translate([21, 5, 12])\n    color(\"black\")\n    sphere(2.5, $fn=16);\n    \n    // Eye highlight\n    translate([21.5, 5.5, 12.5])\n    color(\"white\")\n    sphere(0.8, $fn=8);\n    \n    // Right eye\n    translate([21, -5, 12])\n    color(\"black\")\n    sphere(2.5, $fn=16);\n    \n    // Eye highlight\n    translate([21.5, -5.5, 12.5])\n    color(\"white\")\n    sphere(0.8, $fn=8);\n}\n\nmodule towhee_markings() {\n    // Red/orange side patches\n    translate([10, 8, 5])\n    rotate([0, 90, 0])\n    scale([0.3, 1, 0.6])\n    cylinder(h=8, r=8, $fn=16);\n    \n    translate([10, -8, 5])\n    rotate([0, -90, 0])\n    scale([0.3, 1, 0.6])\n    cylinder(h=8, r=8, $fn=16);\n    \n    // White belly patch\n    translate([0, 0, -8])\n    scale([0.9, 0.7, 0.3])\n    sphere(12, $fn=32);\n    \n    // Black head cap\n    translate([15, 0, 15])\n    scale([1, 1, 0.5])\n    sphere(10, $fn=32);\n}\n\n// Main assembly\nunion() {\n    towhee_body();\n    towhee_head();\n    towhee_beak();\n    towhee_tail();\n    towhee_wing();\n    mirror([0, 1, 0])\n    towhee_wing();\n    towhee_legs();\n    towhee_eye();\n    towhee_markings();\n}",
    "renders": true
  },
  {
    "animal": "trigger",
    "openscad_code": "// Realistic 3D printable trigger assembly\n// Safe for FDM printing, no steep overhangs\n\n$fn = 50;  // Smooth curves\n\nmodule trigger_guard() {\n    difference() {\n        // Outer guard loop\n        translate([0,-5,0])\n            rotate([0,90,0])\n                cylinder(h=30, d1=18, d2=18, center=true);\n        \n        // Inner cutout\n        translate([0,-5,0])\n            rotate([0,90,0])\n                cylinder(h=35, d1=14, d2=14, center=true);\n        \n        // Flatten bottom\n        translate([0,-20,-2])\n            cube([50,20,4], center=true);\n    }\n}\n\nmodule trigger_blade() {\n    // Main curved blade\n    difference() {\n        union() {\n            // Blade body\n            translate([0,-8,0])\n                scale([1,1.5,1])\n                    sphere(d=12);\n            \n            // Blade extension\n            translate([0,-14,0])\n                rotate([30,0,0])\n                    cylinder(h=18, d1=12, d2=8, center=false);\n        }\n        \n        // Finger groove\n        translate([0,-12,-3])\n            rotate([30,0,0])\n                cylinder(h=25, d1=9, d2=6, center=false);\n    }\n}\n\nmodule trigger_pivot() {\n    // Pivot pin housing\n    translate([0,0,0])\n        rotate([0,90,0])\n            cylinder(h=14, d=8, center=true);\n    \n    // Pivot pin hole\n    translate([0,0,0])\n        rotate([0,90,0])\n            cylinder(h=15, d=4, center=true);\n}\n\nmodule trigger_safety() {\n    // Safety lever base\n    translate([6,2,0])\n        cube([8,4,6], center=true);\n    \n    // Safety tab\n    translate([10,2,2])\n        cube([4,3,2], center=true);\n}\n\nmodule trigger_assembly() {\n    union() {\n        // Guard frame\n        trigger_guard();\n        \n        // Trigger blade\n        translate([0,-8,0])\n            trigger_blade();\n        \n        // Pivot mechanism\n        trigger_pivot();\n        \n        // Safety lever\n        trigger_safety();\n        \n        // Reinforcement ribs\n        for(i=[-1,1]) {\n            translate([i*5,-6,-6])\n                cube([2,12,3], center=true);\n        }\n    }\n}\n\n// Main model\ntrigger_assembly();",
    "renders": true
  },
  {
    "animal": "trout",
    "openscad_code": "// 3D Printable Realistic Trout - Medium Complexity\n// Body length ~80mm, height ~30mm\n\n$fn = 24; // Smooth curves\n\nmodule trout_body() {\n    // Main body - ellipsoid shape\n    translate([0, 0, 10])\n    scale([1, 0.4, 0.3])\n    sphere(d=50);\n    \n    // Tail section - tapered\n    translate([-30, 0, 8])\n    scale([0.4, 0.8, 0.2])\n    sphere(d=35);\n}\n\nmodule head() {\n    // Head - sphere with snout extension\n    translate([25, 0, 10])\n    scale([0.9, 0.7, 0.7])\n    sphere(d=30);\n    \n    // Snout\n    translate([40, 0, 10])\n    scale([1.5, 0.4, 0.3])\n    sphere(d=15);\n}\n\nmodule dorsal_fin() {\n    // Main dorsal fin - curved triangle\n    for(i=[-20:5:20]) {\n        translate([i, 0, 25 + sin(i/10)*5])\n        rotate([0, -90, 0])\n        cylinder(h=8, d1=0, d2=12);\n    }\n    \n    // Fat base for printing\n    translate([0, 0, 20])\n    scale([1.2, 0.1, 0.5])\n    sphere(d=40);\n}\n\nmodule tail_fin() {\n    // Tail fin - two lobes\n    // Upper lobe\n    translate([-40, 0, 15])\n    rotate([0, 20, 0])\n    scale([0.5, 2, 0.1])\n    cylinder(h=15, d1=8, d2=0);\n    \n    // Lower lobe\n    translate([-40, 0, 5])\n    rotate([0, -20, 0])\n    scale([0.5, 2, 0.1])\n    cylinder(h=15, d1=8, d2=0);\n    \n    // Central support\n    translate([-40, 0, 10])\n    scale([0.2, 0.2, 0.5])\n    sphere(d=10);\n}\n\nmodule pectoral_fin() {\n    // Left pectoral fin\n    translate([15, 12, 5])\n    rotate([0, 0, 45])\n    scale([0.8, 1.5, 0.1])\n    cylinder(h=12, d1=0, d2=8);\n    \n    // Right pectoral fin\n    translate([15, -12, 5])\n    rotate([0, 0, -45])\n    mirror([0,1,0])\n    scale([0.8, 1.5, 0.1])\n    cylinder(h=12, d1=0, d2=8);\n}\n\nmodule pelvic_fin() {\n    // Pelvic fins\n    translate([5, 8, 0])\n    rotate([0, 0, 30])\n    scale([0.6, 1, 0.1])\n    cylinder(h=8, d1=0, d2=6);\n    \n    translate([5, -8, 0])\n    rotate([0, 0, -30])\n    mirror([0,1,0])\n    scale([0.6, 1, 0.1])\n    cylinder(h=8, d1=0, d2=6);\n}\n\nmodule anal_fin() {\n    // Anal fin - similar to dorsal but smaller\n    for(i=[-25:3:-15]) {\n        translate([i, 0, 3 + sin(i/5)*2])\n        rotate([180, 90, 0])\n        cylinder(h=5, d1=0, d2=8);\n    }\n}\n\nmodule eyes() {\n    // Left eye\n    translate([35, 8, 15])\n    sphere(d=4);\n    \n    // Right eye\n    translate([35, -8, 15])\n    sphere(d=4);\n}\n\nmodule mouth() {\n    // Mouth opening\n    translate([42, 0, 8])\n    scale([0.5, 0.3, 0.2])\n    sphere(d=8);\n}\n\n// Main assembly\nunion() {\n    trout_body();\n    head();\n    dorsal_fin();\n    tail_fin();\n    pectoral_fin();\n    pelvic_fin();\n    anal_fin();\n    eyes();\n    mouth();\n}",
    "renders": true
  },
  {
    "animal": "tsetse",
    "openscad_code": "// Tsetse Fly - Realistic Style, Medium Complexity\n// Approx 80mm wingspan, 3D printable\n\n$fn = 24;\n\n// Main parameters\nbody_length = 30;\nbody_diameter = 8;\nhead_length = 12;\nhead_diameter = 10;\nwing_span = 80;\nwing_thickness = 0.8;\nleg_length = 15;\nleg_diameter = 1.5;\n\n// Colors (for preview)\ncolor_body = \"darkbrown\";\ncolor_wings = \"lightgray\";\ncolor_legs = \"black\";\n\n// Main module\nmodule tsetse_fly() {\n    union() {\n        // Body segments\n        thorax();\n        abdomen();\n        head();\n        \n        // Wings\n        left_wing();\n        right_wing();\n        \n        // Legs\n        legs();\n        \n        // Proboscis\n        proboscis();\n    }\n}\n\n// Thorax segment (main body part)\nmodule thorax() {\n    translate([0, 0, 0])\n    color(color_body)\n    union() {\n        // Main thorax\n        scale([1.2, 1, 1])\n        sphere(d = body_diameter);\n        \n        // Segmentation rings\n        for(i = [1:3]) {\n            translate([0, 0, -i*2])\n            cylinder(h = 0.5, d1 = body_diameter*1.1, d2 = body_diameter*0.9);\n        }\n    }\n}\n\n// Abdomen segment\nmodule abdomen() {\n    translate([0, 0, -body_length/2])\n    color(color_body)\n    hull() {\n        sphere(d = body_diameter);\n        translate([0, 0, -body_length/2])\n        sphere(d = body_diameter*0.7);\n    }\n}\n\n// Head with compound eyes\nmodule head() {\n    translate([0, 0, body_length/2 + 5])\n    color(color_body)\n    union() {\n        // Main head\n        sphere(d = head_diameter);\n        \n        // Compound eyes\n        for(side = [-1, 1]) {\n            translate([side*4, head_diameter/2 - 1, 2])\n            scale([1.2, 1, 1])\n            sphere(d = 4);\n        }\n        \n        // Antennae\n        for(side = [-1, 1]) {\n            translate([side*3, 0, head_diameter/2])\n            rotate([0, 90, side*10])\n            cylinder(h = 8, d1 = 0.5, d2 = 0.2);\n        }\n    }\n}\n\n// Wing generation module\nmodule wing() {\n    difference() {\n        // Main wing shape\n        hull() {\n            translate([0, 0, 0])\n            sphere(d = 3);\n            translate([0, wing_span/2 - 10, -5])\n            sphere(d = 2);\n            translate([0, wing_span/2, 0])\n            sphere(d = 1);\n            translate([0, wing_span/2 - 5, 5])\n            sphere(d = 2);\n        }\n        \n        // Wing cells pattern\n        for(i = [1:5]) {\n            translate([0, i*8, -3+i])\n            rotate([0, 0, 45])\n            cube([wing_thickness*2, 6, 0.5], center = true);\n        }\n    }\n}\n\n// Left wing\nmodule left_wing() {\n    translate([0, body_diameter/2, body_length/4])\n    rotate([0, 0, -30])\n    color(color_wings)\n    scale([0.8, 1, wing_thickness])\n    wing();\n}\n\n// Right wing\nmodule right_wing() {\n    mirror([0, 1, 0])\n    left_wing();\n}\n\n// Leg module\nmodule single_leg(angle, offset) {\n    translate([0, offset, 0])\n    rotate([angle, 0, 0])\n    color(color_legs)\n    union() {\n        cylinder(h = leg_length, d = leg_diameter);\n        translate([0, 0, leg_length])\n        sphere(d = leg_diameter*1.5);\n    }\n}\n\n// All legs\nmodule legs() {\n    // Front legs\n    for(side = [-1, 1]) {\n        translate([side*3, 0, body_length/3])\n        rotate([0, 0, side*30])\n        single_leg(-45, side*2);\n    }\n    \n    // Middle legs\n    for(side = [-1, 1]) {\n        translate([side*2.5, 0, 0])\n        rotate([0, 0, side*45])\n        single_leg(-60, side*3);\n    }\n    \n    // Rear legs\n    for(side = [-1, 1]) {\n        translate([side*2, 0, -body_length/3])\n        rotate([0, 0, side*60])\n        single_leg(-75, side*4);\n    }\n}\n\n// Proboscis (feeding tube)\nmodule proboscis() {\n    translate([0, 0, body_length/2 + head_diameter/2 + 2])\n    rotate([90, 0, 0])\n    color(color_body)\n    union() {\n        cylinder(h = 15, d1 = 2, d2 = 0.5);\n        translate([0, 0, 15])\n        sphere(d = 1);\n    }\n}\n\n// Generate the model\ntsetse_fly();",
    "renders": true
  },
  {
    "animal": "tuna",
    "openscad_code": "// Medium complexity 3D-printable tuna (realistic style)\n// Overall length ~75 mm\n\n$fn = 24;              // smooth curves\nbody_len = 60;\nbody_dia = 25;\n\nmodule tuna_body() {\n    // main fusiform body\n    hull() {\n        // front taper\n        translate([body_len/2, 0, 0]) \n            scale([1, 0.7, 0.7]) \n                sphere(d = body_dia);\n\n        // mid section\n        translate([0, 0, 0]) \n            rotate([0, 90, 0]) \n                cylinder(h = body_len, d = body_dia);\n\n        // tail taper\n        translate([-body_len/2-2, 0, 0]) \n            scale([1, 0.45, 0.45]) \n                sphere(d = body_dia);\n    }\n}\n\nmodule dorsal_fin() {\n    // first dorsal\n    color(\"gray\")\n    translate([-body_len*0.15, 0, body_dia/2-0.5]) {\n        rotate([90, 0, 0]) {\n            linear_extrude(height = 0.8) {\n                polygon(points = [\n                    [0, 0],\n                    [10, 0],\n                    [5, 12],\n                    [2, 11],\n                    [0, 5]\n                ]);\n            }\n        }\n    }\n\n    // second dorsal\n    translate([-body_len*0.42, 0, body_dia/2-0.5]) {\n        rotate([90, 0, 0]) {\n            linear_extrude(height = 0.8) {\n                polygon(points = [\n                    [0, 0],\n                    [7, 0],\n                    [3, 8],\n                    [1, 7],\n                    [0, 3]\n                ]);\n            }\n        }\n    }\n}\n\nmodule pectoral_fin() {\n    // left fin\n    translate([body_len*0.2, body_dia/2+0.5, -body_dia/4]) {\n        rotate([0, 0, 25])\n            scale([1, 0.2, 0.05])\n                rotate([0, 90, 0]) {\n                    cylinder(h = 12, d = 8);\n                    translate([6, 0, 0])\n                        sphere(d = 8);\n                }\n    }\n    // right fin (mirror)\n    mirror([0, 1, 0])  pectoral_fin();\n}\n\nmodule tail_fin() {\n    // caudal peduncle keel\n    translate([-body_len/2-6, 0, 0]) {\n        rotate([90, 0, 0]) {\n            difference() {\n                union() {\n                    // upper lobe\n                    translate([0, 0, 1]) {\n                        linear_extrude(height = 1) {\n                            polygon(points = [\n                                [0, 0],\n                                [0, 15],\n                                [-12, 12],\n                                [-10, 0]\n                            ]);\n                        }\n                    }\n                    // lower lobe\n                    translate([0, 0, -1]) {\n                        linear_extrude(height = 1) {\n                            polygon(points = [\n                                [0, 0],\n                                [0, -15],\n                                [-12, -12],\n                                [-10, 0]\n                            ]);\n                        }\n                    }\n                }\n                // remove center overlap\n                cube([20, 30, 4], center = true);\n            }\n        }\n    }\n}\n\nmodule head_detail() {\n    // mouth slit\n    color(\"gray\")\n    translate([body_len/2-2, 0, -body_dia/4]) {\n        rotate([0, 90, 0])\n            rotate([15, 0, 0])\n                cylinder(h = 0.5, d = 6);\n    }\n\n    // eye\n    translate([body_len/2-5, body_dia/3, body_dia/6]) {\n        sphere(d = 3);\n        translate([0, 0, 1.1])\n            sphere(d = 1.5);\n    }\n    translate([body_len/2-5, -body_dia/3, body_dia/6]) {\n        sphere(d = 3);\n        translate([0, 0, 1.1])\n            sphere(d = 1.5);\n    }\n}\n\nmodule tiny_fins() {\n    // anal fin\n    translate([-body_len*0.38, 0, -body_dia/2+0.5]) {\n        rotate([-90, 0, 0]) {\n            linear_extrude(height = 0.8) {\n                polygon(points = [\n                    [0, 0],\n                    [8, 0],\n                    [4, 7],\n                    [1, 6],\n                    [0, 2]\n                ]);\n            }\n        }\n    }\n\n    // pelvic fins\n    for(y = [body_dia/3, -body_dia/3]) {\n        translate([body_len*0.1, y, -body_dia/2+0.5]) {\n            rotate([0, 0, y > 0 ? -45 : 45])\n                rotate([-90, 0, 0]) {\n                    linear_extrude(height = 0.8) {\n                        polygon(points = [\n                            [0, 0],\n                            [5, 0],\n                            [3, 5],\n                            [1, 4],\n                            [0, 2]\n                        ]);\n                    }\n                }\n        }\n    }\n}\n\n// assemble complete fish\nunion() {\n    tuna_body();\n    dorsal_fin();\n    pectoral_fin();\n    tail_fin();\n    head_detail();\n    tiny_fins();\n}",
    "renders": true
  },
  {
    "animal": "turbot",
    "openscad_code": "$fn = 36; // Smooth curves\n\nmodule turbot_body() {\n    // Main diamond-shaped body\n    difference() {\n        scale([1.2, 1, 0.4])\n        sphere(d = 60, $fn = 8);\n        \n        // Flatten top and bottom\n        translate([0, 0, 30])\n        cube([120, 120, 60], center = true);\n    }\n}\n\nmodule turbot_eyes() {\n    // Left eye\n    translate([-20, 25, 5])\n    rotate([0, 0, 15]) {\n        sphere(d = 8);\n        translate([0, 0, 4])\n        sphere(d = 4);\n    }\n    \n    // Right eye\n    translate([20, 25, 5])\n    rotate([0, 0, -15]) {\n        sphere(d = 8);\n        translate([0, 0, 4])\n        sphere(d = 4);\n    }\n}\n\nmodule turbot_mouth() {\n    // Mouth opening\n    translate([0, 30, 0])\n    rotate([90, 0, 0])\n    scale([1, 0.5, 1])\n    cylinder(h = 5, d = 10);\n}\n\nmodule turbot_fins() {\n    // Left fin\n    translate([-35, 0, 0])\n    rotate([0, 0, -30])\n    scale([0.6, 1, 0.2])\n    sphere(d = 30);\n    \n    // Right fin\n    translate([35, 0, 0])\n    rotate([0, 0, 30])\n    scale([0.6, 1, 0.2])\n    sphere(d = 30);\n    \n    // Tail fin\n    translate([0, -40, 0])\n    rotate([0, 0, 0])\n    scale([0.8, 1.5, 0.2])\n    sphere(d = 25);\n}\n\nmodule turbot_spots() {\n    // Generate random spots pattern\n    for(i = [0:5:35]) {\n        for(j = [0:5:35]) {\n            if((i + j) % 15 == 0) {\n                translate([i - 17.5, j - 17.5, 12])\n                sphere(d = 3);\n            }\n        }\n    }\n}\n\nmodule turbot_gills() {\n    // Gill slits on bottom\n    for(i = [1:3]) {\n        translate([0, 25 - i * 5, -8])\n        rotate([0, 90, 0])\n        cylinder(h = 1, d = 3);\n    }\n}\n\n// Assembly\nunion() {\n    turbot_body();\n    turbot_eyes();\n    turbot_mouth();\n    turbot_fins();\n    turbot_spots();\n    turbot_gills();\n}",
    "renders": true
  },
  {
    "animal": "turkey",
    "openscad_code": "// Turkey - Realistic Medium Complexity\n// Overall dimensions: ~70mm x ~50mm x ~60mm (L x W x H)\n\n// Body\nmodule turkey_body() {\n    // Main body ellipsoid\n    translate([0, 0, 25]) \n        scale([1.5, 1.2, 1]) \n            sphere(25, $fn=32);\n    \n    // Lower belly bulge\n    translate([5, 0, 15]) \n        scale([1.3, 1.1, 0.8]) \n            sphere(20, $fn=32);\n}\n\n// Head and neck\nmodule turkey_head() {\n    // Neck\n    translate([-30, 0, 35]) \n        rotate([0, 30, 0]) \n            cylinder(h=25, r1=8, r2=5, $fn=16);\n    \n    // Head\n    translate([-45, 0, 45]) \n        sphere(10, $fn=32);\n    \n    // Beak\n    translate([-52, 0, 45]) \n        rotate([0, -20, 0]) \n            cylinder(h=10, r1=0, r2=4, $fn=8);\n    \n    // Wattle (snood)\n    translate([-48, 0, 38]) \n        sphere(3, $fn=16);\n    \n    // Eyes\n    translate([-48, 5, 47]) \n        sphere(2, $fn=8);\n    translate([-48, -5, 47]) \n        sphere(2, $fn=8);\n}\n\n// Tail fan\nmodule turkey_tail() {\n    for (i = [-60:15:60]) {\n        rotate([0, 0, i]) \n            translate([25, 0, 35]) \n                rotate([0, 70, 0]) \n                    cylinder(h=30, r1=8, r2=2, $fn=4);\n    }\n}\n\n// Wings\nmodule turkey_wings() {\n    // Left wing\n    translate([5, 20, 30]) \n        rotate([0, 0, 20]) \n            scale([1.2, 0.3, 1]) \n                sphere(15, $fn=16);\n    \n    // Right wing\n    translate([5, -20, 30]) \n        rotate([0, 0, -20]) \n            scale([1.2, 0.3, 1]) \n                sphere(15, $fn=16);\n}\n\n// Legs\nmodule turkey_legs() {\n    // Left leg\n    translate([5, 10, 5]) \n        cylinder(h=20, r=4, $fn=12);\n    translate([5, 10, 0]) \n        difference() {\n            sphere(5, $fn=12);\n            translate([0, 0, -5]) \n                cube(10, center=true);\n        }\n    \n    // Right leg\n    translate([5, -10, 5]) \n        cylinder(h=20, r=4, $fn=12);\n    translate([5, -10, 0]) \n        difference() {\n            sphere(5, $fn=12);\n            translate([0, 0, -5]) \n                cube(10, center=true);\n        }\n}\n\n// Feet\nmodule turkey_feet() {\n    // Left foot\n    translate([5, 10, 0]) {\n        for (j = [0:6:12]) {\n            rotate([0, 0, j]) \n                translate([7, 0, -2]) \n                    cylinder(h=2, r=1.5, $fn=6);\n        }\n    }\n    \n    // Right foot\n    translate([5, -10, 0]) {\n        for (j = [0:6:12]) {\n            rotate([0, 0, -j]) \n                translate([7, 0, -2]) \n                    cylinder(h=2, r=1.5, $fn=6);\n        }\n    }\n}\n\n// Assemble the turkey\nunion() {\n    turkey_body();\n    turkey_head();\n    turkey_tail();\n    turkey_wings();\n    turkey_legs();\n    turkey_feet();\n}",
    "renders": true
  },
  {
    "animal": "turnstone",
    "openscad_code": "// Turnstone (Arenaria interpres) - medium complexity realistic model\n// Approximate length: 80mm\n\n$fn = 32;  // Smooth curves\n\nmodule body() {\n    difference() {\n        // Main body\n        scale([1.2, 0.8, 0.6])\n        sphere(r=15);\n        \n        // Flatten underside\n        translate([0, 0, -10])\n        cube([40, 30, 20], center=true);\n    }\n}\n\nmodule head() {\n    translate([16, 0, 3])\n    rotate([0, -20, 0])\n    scale([1.3, 1, 1])\n    sphere(r=8);\n}\n\nmodule beak() {\n    translate([23, 0, 3])\n    rotate([0, -30, 0])\n    scale([1, 0.3, 0.2])\n    cylinder(h=12, r1=3, r2=0.5);\n}\n\nmodule eye() {\n    translate([20, 4, 5])\n    sphere(r=1.5);\n    \n    // Eye highlight\n    translate([20.5, 4.3, 5.5])\n    scale([1, 1, 0.5])\n    sphere(r=0.5);\n}\n\nmodule wing() {\n    translate([0, 8, 5])\n    rotate([0, 0, 10])\n    scale([1, 0.3, 0.5])\n    sphere(r=12);\n    \n    // Wing pattern lines\n    for(i = [1:3]) {\n        translate([-5 + i*3, 11, 5])\n        rotate([90, 0, 0])\n        scale([0.2, 0.2, 6])\n        cylinder(h=1, r1=1, r2=1);\n    }\n}\n\nmodule tail() {\n    translate([-15, 0, 2])\n    rotate([0, 20, 0])\n    scale([0.5, 0.8, 0.2])\n    sphere(r=10);\n}\n\nmodule leg(pos) {\n    translate(pos)\n    cylinder(h=10, r=1.2);\n    \n    // Foot\n    translate([pos[0], pos[1], pos[2]-10])\n    union() {\n        // Main foot\n        scale([1.5, 0.3, 0.2])\n        sphere(r=3);\n        \n        // Toes\n        for(angle = [0:120:240]) {\n            rotate([0, 0, angle])\n            translate([3, 0, 0])\n            scale([0.8, 0.2, 0.15])\n            sphere(r=2);\n        }\n    }\n}\n\nmodule legs() {\n    // Left leg\n    leg([0, 7, -7]);\n    \n    // Right leg  \n    leg([0, -7, -7]);\n}\n\n// Main assembly\nunion() {\n    // Body parts\n    body();\n    head();\n    beak();\n    eye();\n    wing();\n    tail();\n    \n    // Mirror wing for other side\n    mirror([0, 1, 0])\n    wing();\n    \n    // Legs\n    legs();\n}",
    "renders": true
  },
  {
    "animal": "turtle",
    "openscad_code": "// Realistic Turtle - Medium Complexity\n// Approx 80mm long, 3D-printable with no steep overhangs\n\n// Shell segments module\nmodule shell_segment(r, h, angle) {\n    rotate([0, 0, angle]) \n        translate([r, 0, 0])\n            scale([1.2, 1, 1])\n                cylinder(h=h, r1=6, r2=3, $fn=6);\n}\n\n// Main shell\nmodule turtle_shell() {\n    difference() {\n        // Outer shell dome\n        scale([1.5, 1.2, 0.8])\n            sphere(r=30, $fn=100);\n        \n        // Flatten bottom\n        translate([0, 0, -30])\n            cube([100, 100, 60], center=true);\n    }\n    \n    // Shell pattern segments\n    for(i=[0:30:359]) {\n        shell_segment(20, 5, i);\n        shell_segment(15, 4, i+15);\n        shell_segment(10, 3, i+30);\n    }\n    \n    // Shell rim\n    rotate_extrude($fn=100)\n        translate([28, 0, 0])\n            circle(r=3);\n}\n\n// Head with snout\nmodule turtle_head() {\n    union() {\n        // Main head sphere\n        sphere(r=8, $fn=30);\n        \n        // Snout\n        translate([9, 0, -2])\n            rotate([0, 20, 0])\n                scale([1.5, 1, 0.8])\n                    cylinder(h=8, r1=5, r2=0, $fn=20);\n    }\n}\n\n// Eye\nmodule turtle_eye() {\n    translate([3, -3.5, 2])\n        sphere(r=1.5, $fn=20);\n}\n\n// Flipper with toes\nmodule turtle_flipper(length, width, angle) {\n    rotate([0, 0, angle])\n        translate([0, length/2, 0])\n            rotate([90, 0, 0])\n                difference() {\n                    // Main flipper shape\n                    scale([width, length, width/2])\n                        sphere(r=5, $fn=20);\n                    \n                    // Flatten bottom\n                    translate([0, 0, -5])\n                        cube([20, 20, 10], center=true);\n                };\n    \n    // Toes\n    for(i=[-1:1]) {\n        rotate([0, 0, angle])\n            translate([i*3, length+2, -2])\n                cylinder(h=4, r=1, $fn=8);\n    }\n}\n\n// Tail\nmodule turtle_tail() {\n    rotate([90, 0, 0])\n        cylinder(h=12, r1=6, r2=2, $fn=20);\n}\n\n// Assemble turtle\nmodule turtle() {\n    // Shell\n    turtle_shell();\n    \n    // Head\n    translate([35, 0, 0])\n        turtle_head();\n    \n    // Eyes\n    color(\"black\") {\n        translate([35, 0, 0]) {\n            translate([7.5, -3.5, 2]) turtle_eye();\n            translate([7.5, 3.5, 2]) turtle_eye();\n        }\n    }\n    \n    // Front flippers\n    translate([15, 20, -5])\n        turtle_flipper(25, 8, -30);\n    translate([15, -20, -5])\n        turtle_flipper(25, 8, 30);\n    \n    // Rear flippers\n    translate([-25, 18, -5])\n        turtle_flipper(20, 7, -45);\n    translate([-25, -18, -5])\n        turtle_flipper(20, 7, 45);\n    \n    // Tail\n    translate([-38, 0, -5])\n        turtle_tail();\n}\n\n// Render the turtle\nturtle();",
    "renders": true
  },
  {
    "animal": "urial",
    "openscad_code": "// Urial (Ovis orientalis vignei) - Medium complexity realistic model\n// Overall length ~80mm, height ~45mm\n\nmodule urial() {\n    // Body\n    translate([0, 0, 25])\n    scale([1.2, 0.5, 0.7])\n    sphere(r=20);\n    \n    // Neck\n    translate([-15, 0, 35])\n    rotate([0, -15, 0])\n    scale([0.7, 0.5, 0.5])\n    cylinder(h=15, r1=7, r2=5);\n    \n    // Head\n    translate([-25, 0, 42])\n    rotate([0, 15, 0])\n    scale([0.8, 0.7, 0.8])\n    sphere(r=8);\n    \n    // Snout\n    translate([-33, 0, 42])\n    rotate([0, 15, 0])\n    scale([1, 0.6, 0.5])\n    cylinder(h=8, r1=5, r2=3);\n    \n    // Ears (left and right)\n    for(side = [-1, 1]) {\n        translate([-28, side*5, 48])\n        rotate([0, 0, side*15])\n        scale([0.3, 0.8, 1.2])\n        cylinder(h=6, r1=2, r2=1);\n    }\n    \n    // Horns (spiral)\n    for(side = [-1, 1]) {\n        translate([-25, side*4, 50])\n        rotate([0, 0, side*20])\n        linear_extrude(height=15, twist=90)\n        scale([0.5, 1])\n        circle(r=3);\n    }\n    \n    // Legs\n    for(x = [-10, 10], side = [-1, 1]) {\n        translate([x, side*8, 0])\n        scale([0.8, 0.8, 1])\n        cylinder(h=25, r=4);\n        \n        // Hooves\n        translate([x, side*8, 0])\n        scale([1.1, 1.1, 0.5])\n        cylinder(h=3, r=4);\n    }\n    \n    // Tail\n    translate([18, 0, 25])\n    rotate([0, 45, 0])\n    scale([0.5, 0.5, 1])\n    cylinder(h=15, r=2);\n    \n    // Tail tuft\n    translate([28, 0, 32])\n    sphere(r=3);\n    \n    // Mane (along neck and back)\n    for(i = [-20:2:15]) {\n        translate([i, 0, 45 - abs(i)*0.3])\n        rotate([0, 0, 0])\n        scale([0.3, 0.8, 2])\n        cylinder(h=3, r=1.5);\n    }\n    \n    // Eyes\n    for(side = [-1, 1]) {\n        translate([-30, side*3.5, 44])\n        rotate([0, 15, 0])\n        sphere(r=1.2);\n    }\n}\n\n// Render the urial\nurial();",
    "renders": true
  },
  {
    "animal": "vampire",
    "openscad_code": "// Realistic Vampire Bust - Medium Complexity\n// 3D printable without supports\n\n// Overall scale\nscale_factor = 1;\nhead_height = 60 * scale_factor;\nhead_width = 45 * scale_factor;\n\n// Head module\nmodule head() {\n    difference() {\n        // Main head shape\n        sphere(d = head_width, $fn=50);\n        \n        // Neck cavity\n        translate([0, 0, -head_height/3])\n            cylinder(h = head_height/3, d = head_width/2, $fn=30);\n        \n        // Eye sockets\n        translate([-head_width/4, head_width/3, head_width/6])\n            sphere(d = head_width/5, $fn=20);\n        translate([head_width/4, head_width/3, head_width/6])\n            sphere(d = head_width/5, $fn=20);\n    }\n}\n\n// Nose module\nmodule nose() {\n    translate([0, head_width/2.5, head_width/6])\n        rotate([90, 0, 0])\n            cylinder(h = head_width/4, d1 = head_width/8, d2 = head_width/12, $fn=20);\n}\n\n// Ears module\nmodule ears() {\n    // Left ear\n    translate([-head_width/2, 0, 0])\n        rotate([0, 90, 10])\n            scale([1, 1.5, 1])\n                difference() {\n                    sphere(d = head_width/4, $fn=20);\n                    translate([head_width/8, 0, 0])\n                        sphere(d = head_width/4.5, $fn=20);\n                }\n    \n    // Right ear\n    translate([head_width/2, 0, 0])\n        rotate([0, 90, -10])\n            scale([1, 1.5, 1])\n                mirror([1, 0, 0])\n                    difference() {\n                        sphere(d = head_width/4, $fn=20);\n                        translate([head_width/8, 0, 0])\n                            sphere(d = head_width/4.5, $fn=20);\n                    }\n}\n\n// Hair module\nmodule hair() {\n    // Main hair volume\n    translate([0, -head_width/4, head_width/3])\n        scale([1.1, 1.2, 0.8])\n            sphere(d = head_width, $fn=30);\n    \n    // Hair strands\n    for(i = [-3:3]) {\n        translate([i*head_width/8, -head_width/2, head_width/3])\n            rotate([0, 30, 0])\n                cylinder(h = head_width/3, d = head_width/20, $fn=8);\n    }\n}\n\n// Fangs module\nmodule fangs() {\n    // Left fang\n    translate([-head_width/8, head_width/2.2, -head_width/6])\n        rotate([0, 0, -15])\n            cylinder(h = head_width/8, d1 = head_width/30, d2 = head_width/50, $fn=8);\n    \n    // Right fang\n    translate([head_width/8, head_width/2.2, -head_width/6])\n        rotate([0, 0, 15])\n            cylinder(h = head_width/8, d1 = head_width/30, d2 = head_width/50, $fn=8);\n}\n\n// Eyebrows module\nmodule eyebrows() {\n    // Left eyebrow\n    translate([-head_width/4, head_width/3.2, head_width/4])\n        rotate([20, 0, -20])\n            scale([1, 0.3, 0.2])\n                cube([head_width/6, head_width/20, head_width/20]);\n    \n    // Right eyebrow\n    translate([head_width/4, head_width/3.2, head_width/4])\n        rotate([20, 0, 20])\n            scale([1, 0.3, 0.2])\n                cube([head_width/6, head_width/20, head_width/20]);\n}\n\n// Cape collar\nmodule cape_collar() {\n    translate([0, 0, -head_height/3])\n        rotate_extrude(angle=360, $fn=50)\n            translate([head_width/2.2, 0])\n                circle(d = head_width/10, $fn=20);\n}\n\n// Main assembly\nunion() {\n    // Head assembly\n    union() {\n        head();\n        nose();\n        ears();\n        hair();\n        fangs();\n        eyebrows();\n    }\n    \n    // Cape collar\n    cape_collar();\n}",
    "renders": true
  },
  {
    "animal": "vanga",
    "openscad_code": "// Realistic Vanga Bird - Medium Complexity OpenSCAD Model\n// Body length ~80mm, wingspan ~60mm, height ~35mm\n\n$fn = 32;\n\nmodule vanga_body() {\n    // Main body - elongated oval\n    difference() {\n        scale([1.3, 1, 1]) sphere(r=15);\n        translate([0, 0, -15]) cube([35, 35, 30], center=true);\n    }\n}\n\nmodule vanga_head() {\n    // Head - slightly flattened sphere\n    translate([-20, 0, 8]) {\n        scale([1.2, 1, 0.9]) sphere(r=12);\n    }\n}\n\nmodule vanga_beak() {\n    // Hooked beak characteristic of vangas\n    translate([-32, 0, 8]) {\n        rotate([0, -20, 0]) {\n            difference() {\n                cylinder(h=18, r1=4, r2=2);\n                translate([0, 0, 9]) rotate([0, 30, 0]) \n                    cube([15, 10, 10], center=true);\n            }\n        }\n    }\n}\n\nmodule vanga_wing(side) {\n    // Wing with primary feathers\n    mirror([side, 0, 0]) {\n        translate([5, side*20, 5]) {\n            rotate([0, 0, side*15]) {\n                difference() {\n                    scale([1.5, 1, 0.2]) sphere(r=12);\n                    // Wing tip cut\n                    translate([18, side*8, 0]) rotate([0, 0, side*30])\n                        cube([10, 8, 5], center=true);\n                }\n                \n                // Primary feathers\n                for(i = [0:2]) {\n                    translate([12 + i*3, side*(8 + i*2), -1]) {\n                        rotate([0, 0, side*(15 - i*5)])\n                            scale([0.3, 1, 0.1]) cylinder(h=8, r=3);\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule vanga_tail() {\n    // Forked tail\n    translate([18, 0, 0]) {\n        rotate([0, 10, 0]) {\n            for(side = [-1, 1]) {\n                translate([0, side*5, -2]) {\n                    rotate([0, 0, side*20]) {\n                        scale([1.2, 0.3, 0.2]) cylinder(h=15, r=5);\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule vanga_legs() {\n    // Legs and feet\n    for(side = [-1, 1]) {\n        translate([-5, side*8, -15]) {\n            // Leg\n            cylinder(h=12, r=2);\n            \n            // Foot\n            translate([0, 0, -12]) {\n                rotate([0, 0, side*45]) {\n                    for(i = [-1, 0, 1]) {\n                        translate([i*3, 0, 0]) {\n                            scale([0.8, 0.3, 0.3]) cube([4, 2, 1]);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule vanga_eye(side) {\n    // Eye with pupil\n    translate([-25, side*5, 12]) {\n        color(\"black\") sphere(r=2);\n        translate([0.5, 0, 0.5]) color(\"white\") sphere(r=0.8);\n    }\n}\n\n// Assembly\nunion() {\n    vanga_body();\n    vanga_head();\n    vanga_beak();\n    vanga_wing(1);\n    vanga_wing(-1);\n    vanga_tail();\n    vanga_legs();\n    \n    // Eyes\n    vanga_eye(1);\n    vanga_eye(-1);\n}\n\n// Base for stability\ntranslate([0, 0, -20]) {\n    color(\"darkgreen\") cylinder(h=2, r=20);\n}",
    "renders": true
  },
  {
    "animal": "vicuña",
    "openscad_code": "// Vicuña - realistic style, medium complexity\n// 3D printable model, ~75mm long\n\nmodule body() {\n    // Main torso\n    union() {\n        // Chest and belly\n        translate([0, -5, 10])\n            scale([1.2, 0.8, 0.6])\n            sphere(r=20, $fn=32);\n        \n        // Back and rump\n        translate([0, 5, 20])\n            scale([1.4, 1, 0.8])\n            sphere(r=22, $fn=32);\n        \n        // Neck base\n        translate([0, 0, 30])\n            rotate([0, -20, 0])\n            scale([0.6, 0.6, 1.2])\n            cylinder(h=25, r=12, $fn=16);\n    }\n}\n\nmodule legs() {\n    // Front legs\n    for(side = [-1, 1]) {\n        translate([side * 12, -15, 8]) {\n            union() {\n                // Upper leg\n                rotate([0, 15, 0])\n                cylinder(h=20, r=4, $fn=12);\n                \n                // Lower leg\n                translate([0, -5, -15])\n                rotate([0, 10, 0])\n                cylinder(h=18, r=3, $fn=12);\n                \n                // Hoof\n                translate([0, -6, -30])\n                scale([1.2, 1, 0.6])\n                cylinder(h=4, r=3, $fn=8);\n            }\n        }\n        \n        // Hind legs\n        translate([side * 10, 15, 8]) {\n            union() {\n                // Upper leg\n                rotate([0, -15, 0])\n                cylinder(h=22, r=5, $fn=12);\n                \n                // Lower leg\n                translate([0, 5, -15])\n                rotate([0, -10, 0])\n                cylinder(h=20, r=3.5, $fn=12);\n                \n                // Hoof\n                translate([0, 6, -30])\n                scale([1.2, 1, 0.6])\n                cylinder(h=4, r=3.2, $fn=8);\n            }\n        }\n    }\n}\n\nmodule neck() {\n    union() {\n        // Main neck segment\n        translate([0, -5, 40])\n        rotate([0, -30, 0])\n        scale([0.8, 0.8, 1.5])\n        cylinder(h=25, r=8, $fn=16);\n        \n        // Throat area\n        translate([0, -10, 45])\n        rotate([0, -45, 0])\n        scale([0.6, 0.4, 1])\n        sphere(r=6, $fn=16);\n    }\n}\n\nmodule head() {\n    translate([0, -25, 55])\n    rotate([0, -45, 0])\n    union() {\n        // Skull\n        scale([1.2, 0.8, 0.6])\n        sphere(r=10, $fn=24);\n        \n        // Muzzle\n        translate([0, -12, -2])\n        scale([0.8, 1.2, 0.6])\n        sphere(r=6, $fn=16);\n        \n        // Ears\n        for(side = [-1, 1]) {\n            translate([side * 4, -2, 5])\n            rotate([0, -20, side * 20])\n            scale([0.3, 0.1, 1])\n            cylinder(h=8, r=3, $fn=8);\n        }\n    }\n}\n\nmodule tail() {\n    translate([0, 20, 15])\n    rotate([0, 30, 0])\n    union() {\n        // Tail base\n        cylinder(h=8, r=4, $fn=12);\n        \n        // Tail tuft\n        translate([0, 0, 8])\n        scale([0.8, 0.8, 2])\n        sphere(r=3, $fn=16);\n    }\n}\n\nmodule wool_texture() {\n    // Simplified wool texture using small bumps\n    for(i = [0:10:360]) {\n        rotate([0, 0, i])\n        for(j = [5:10:40]) {\n            translate([cos(i) * j * 0.3, sin(i) * j * 0.3, 20 + j * 0.5])\n            sphere(r=1, $fn=8);\n        }\n    }\n}\n\n// Assemble the vicuña\nunion() {\n    body();\n    legs();\n    neck();\n    head();\n    tail();\n    \n    // Add wool texture to body\n    wool_texture();\n}\n\n// Base for stability\ntranslate([0, 0, -32])\nscale([1.2, 1.5, 0.5])\ncylinder(h=2, r=30, $fn=32);",
    "renders": true
  },
  {
    "animal": "viper",
    "openscad_code": "// Viper Snake - Realistic Medium Complexity\n// Overall dimensions: ~80mm length, 15mm diameter at thickest\n\n$fn = 32;  // Smooth curves for 3D printing\n\n// Main body construction\nmodule viper_body() {\n    union() {\n        // Head with triangular shape\n        translate([35, 0, 5]) rotate([0, 90, 0]) \n            scale([1, 0.8, 0.8]) \n                cylinder(h=15, d1=12, d2=8);\n        \n        // Snout extension\n        translate([42, 0, 5]) rotate([0, 90, 0])\n            cylinder(h=5, d1=8, d2=4);\n        \n        // Body segments\n        for(i = [0:5]) {\n            translate([30 - i*10, 0, 5 - i*0.5])\n                scale([1 - i*0.08, 1 - i*0.08, 1])\n                    cylinder(h=12, d=15 - i*2);\n        }\n        \n        // Tail taper\n        translate([-25, 0, 2]) rotate([0, 0, 15])\n            cylinder(h=20, d1=8, d2=2);\n    }\n}\n\n// Fangs\nmodule fangs() {\n    for(side = [-1, 1]) {\n        translate([45, side*3, 3]) rotate([0, -30*side, 15*side])\n            cylinder(h=6, d1=1.5, d2=0.5);\n    }\n}\n\n// Eyes\nmodule eyes() {\n    for(side = [-1, 1]) {\n        translate([38, side*5, 8])\n            sphere(d=3);\n        translate([39, side*5.2, 8.5])\n            sphere(d=1.5);\n    }\n}\n\n// Body scales pattern\nmodule scales() {\n    difference() {\n        viper_body();\n        \n        // Scale indentations along body\n        for(pos = [0:30]) {\n            translate([35 - pos*2, 0, 5 + sin(pos*30)*2])\n                scale([0.3, 0.8, 0.2])\n                    sphere(d=6);\n        }\n        \n        // Belly scales\n        for(pos = [0:40]) {\n            translate([35 - pos*1.5, 0, 0])\n                cube([2, 12, 1], center=true);\n        }\n    }\n}\n\n// Rattle segments\nmodule rattle() {\n    union() {\n        for(i = [0:3]) {\n            translate([-45 - i*3, 0, 2])\n                difference() {\n                    cylinder(h=3, d=6 - i*1);\n                    translate([0, 0, -0.1])\n                        cylinder(h=3.2, d=4 - i*0.8);\n                }\n        }\n    }\n}\n\n// Hood (viper characteristic)\nmodule hood() {\n    translate([25, 0, 8]) rotate([0, -10, 0])\n        scale([0.8, 1.5, 0.3])\n            sphere(d=20);\n}\n\n// Final assembly\nunion() {\n    scales();\n    fangs();\n    eyes();\n    rattle();\n    hood();\n    \n    // Add support base for printing\n    translate([0, 0, -2])\n        cube([90, 20, 2], center=true);\n}",
    "renders": true
  },
  {
    "animal": "viscacha",
    "openscad_code": "// Visacha - realistic medium complexity\n// Body proportions based on Lagidium viscacia\n\n$fn = 32;  // Smooth curves for printing\n\nmodule viscacha() {\n    // Body parameters\n    body_len = 60;\n    body_h = 25;\n    body_w = 28;\n    \n    // Main body - elongated oval\n    translate([0, 0, 0])\n        scale([1.2, 1.0, 0.6])\n        sphere(d=body_w);\n    \n    // Head\n    translate([-body_len/2 + 5, 0, body_h/2])\n        sphere(d=18);\n    \n    // Snout extension\n    translate([-body_len/2 - 6, 0, body_h/2])\n        scale([1.5, 0.8, 0.8])\n        sphere(d=8);\n    \n    // Ears - tall and rounded\n    ear_height = 12;\n    ear_width = 5;\n    for(x = [-1, 1]) {\n        translate([-body_len/2 + 2, x*7, body_h/2 + 8])\n            rotate([x*15, 0, 0])\n            cylinder(h=ear_height, d1=ear_width, d2=ear_width*1.5);\n    }\n    \n    // Eyes\n    eye_size = 3;\n    for(x = [-1, 1]) {\n        translate([-body_len/2 - 2, x*5, body_h/2 + 2])\n            sphere(d=eye_size);\n    }\n    \n    // Nose\n    translate([-body_len/2 - 10, 0, body_h/2])\n        sphere(d=2);\n    \n    // Tail - bushy and curved upward\n    tail_segments = 8;\n    for(i = [0:tail_segments-1]) {\n        angle = -20 + i*8;\n        radius = 6 - i*0.3;\n        translate([body_len/2 + i*3, 0, i*2])\n            rotate([0, angle, 0])\n            sphere(d=radius*2);\n    }\n    \n    // Front legs\n    for(x = [-1, 1]) {\n        translate([-body_len/4, x*body_w/3, -body_h/2])\n            cylinder(h=12, d=5);\n        \n        // Paws\n        translate([-body_len/4, x*body_w/3, -body_h/2 - 7])\n            sphere(d=6);\n    }\n    \n    // Hind legs - longer\n    for(x = [-1, 1]) {\n        translate([body_len/3, x*body_w/2.5, -body_h/2])\n            cylinder(h=18, d=7);\n        \n        // Large hind feet\n        translate([body_len/3 + 3, x*body_w/2.5, -body_h/2 - 11])\n            scale([1.5, 1.2, 0.5])\n            sphere(d=8);\n    }\n    \n    // Whiskers\n    whisker_len = 8;\n    for(i = [0:2]) {\n        angle = 45 + i*15;\n        for(side = [-1, 1]) {\n            translate([-body_len/2 - 8, side*4, body_h/2 - 1])\n                rotate([0, 0, side*angle])\n                cylinder(h=whisker_len, d=0.5);\n        }\n    }\n}\n\n// Generate the model centered at origin\ntranslate([0, 0, 15])\n    viscacha();",
    "renders": true
  },
  {
    "animal": "vole",
    "openscad_code": "// Realistic 3D Printable Vole - Medium Complexity\n// Approximate size: 80mm long, 35mm tall, 30mm wide\n\n$fn = 32;\n\n// Main body module\nmodule vole_body() {\n    // Torso - elongated ellipsoid\n    translate([0, 0, 15])\n    scale([1.2, 0.7, 0.8])\n    sphere(r=15);\n    \n    // Belly bulge\n    translate([0, 0, 8])\n    scale([1.1, 0.6, 0.4])\n    sphere(r=15);\n    \n    // Rump\n    translate([-25, 0, 15])\n    scale([0.8, 0.7, 0.7])\n    sphere(r=12);\n}\n\n// Head module\nmodule vole_head() {\n    // Main head shape\n    translate([20, 0, 22])\n    rotate([0, -10, 0])\n    scale([0.9, 0.8, 0.8])\n    sphere(r=12);\n    \n    // Snout\n    translate([28, 0, 21])\n    rotate([0, -15, 0])\n    scale([1.2, 0.7, 0.6])\n    cylinder(h=10, r1=4, r2=2);\n}\n\n// Ear module\nmodule vole_ear(side) {\n    // Outer ear\n    translate([18, side*6, 28])\n    rotate([0, -20, side*20])\n    scale([0.5, 1, 0.3])\n    sphere(r=4);\n    \n    // Inner ear\n    translate([18.5, side*6.2, 28.5])\n    rotate([0, -20, side*20])\n    scale([0.3, 0.7, 0.2])\n    sphere(r=3);\n}\n\n// Eye module\nmodule vole_eye(side) {\n    // Eye socket\n    translate([25, side*5, 23])\n    sphere(r=2.5);\n    \n    // Eye\n    translate([25.5, side*5, 23.5])\n    color(\"black\")\n    sphere(r=1.5);\n}\n\n// Leg module\nmodule vole_leg(pos, angle) {\n    // Upper leg\n    translate([pos, 0, 12])\n    rotate([0, 0, angle])\n    cylinder(h=8, r1=3, r2=2.5);\n    \n    // Lower leg\n    translate([pos + cos(angle)*8, sin(angle)*8, 7])\n    rotate([0, 0, angle + 20])\n    cylinder(h=6, r1=2.5, r2=2);\n    \n    // Paw\n    translate([pos + cos(angle)*14, sin(angle)*14, 4])\n    sphere(r=2.5);\n}\n\n// Tail module\nmodule vole_tail() {\n    // Tail segments for natural curve\n    for(i = [0:5]) {\n        translate([-28 - i*3, 0, 15 - i*1.5])\n        rotate([0, -i*5, 0])\n        scale([1 - i*0.1, 1 - i*0.1, 1 - i*0.1])\n        sphere(r=4 - i*0.5);\n    }\n}\n\n// Fur texture - small bumps\nmodule fur_texture() {\n    for(i = [0:20]) {\n        theta = i*360/20;\n        r = 12 + sin(i*5)*2;\n        translate([cos(theta)*r, sin(theta)*r, 10 + sin(i*3)*2])\n        sphere(r=0.5);\n    }\n}\n\n// Main assembly\nunion() {\n    // Body\n    vole_body();\n    \n    // Head\n    vole_head();\n    \n    // Ears\n    vole_ear(1);\n    vole_ear(-1);\n    \n    // Eyes\n    vole_eye(1);\n    vole_eye(-1);\n    \n    // Legs - front\n    vole_leg(15, 30);\n    vole_leg(15, -30);\n    \n    // Legs - middle\n    vole_leg(0, 20);\n    vole_leg(0, -20);\n    \n    // Legs - rear\n    vole_leg(-15, 25);\n    vole_leg(-15, -25);\n    \n    // Tail\n    vole_tail();\n    \n    // Nose\n    translate([32, 0, 20.5])\n    sphere(r=1.5);\n    \n    // Whiskers\n    for(i = [1:3]) {\n        // Left whiskers\n        translate([30, 2, 20])\n        rotate([0, 0, 45 + i*5])\n        cylinder(h=8, r1=0.5, r2=0.2);\n        \n        // Right whiskers\n        translate([30, -2, 20])\n        rotate([0, 0, -45 - i*5])\n        cylinder(h=8, r1=0.5, r2=0.2);\n    }\n}\n\n// Add small fur texture details\nfur_texture();",
    "renders": true
  },
  {
    "animal": "vulture",
    "openscad_code": "// Vulture - Realistic Style, Medium Complexity\n// Approx. 70mm wingspan, 3D printable with minimal supports\n\n$fa = 1;\n$fs = 0.5;\n\nmodule body() {\n    // Main body - elongated oval\n    translate([0, 0, 10])\n    scale([1, 0.7, 1.2])\n    sphere(12);\n    \n    // Ruff of feathers around neck\n    for(i = [0:15]) {\n        rotate([0, 0, i * 24])\n        translate([11, 0, 15])\n        rotate([90, 0, 0])\n        cylinder(h=8, r1=3, r2=1);\n    }\n}\n\nmodule head() {\n    // Skull shape\n    translate([0, 0, 28])\n    scale([0.7, 0.5, 1.2])\n    sphere(8);\n    \n    // Beak\n    translate([0, 0, 34])\n    rotate([30, 0, 0])\n    scale([1, 0.7, 2])\n    cylinder(h=12, r1=6, r2=0);\n    \n    // Hook at beak tip\n    translate([0, 0, 46])\n    rotate([60, 0, 0])\n    scale([0.5, 0.5, 0.5])\n    cylinder(h=6, r1=3, r2=0);\n}\n\nmodule wings() {\n    // Left wing\n    translate([-12, 0, 15])\n    rotate([0, 0, 20])\n    scale([3, 0.2, 1])\n    sphere(8);\n    \n    // Primary feathers\n    for(i = [0:4]) {\n        translate([-35 + i*3, 0, 15 - i*2])\n        rotate([0, -10 - i*5, 0])\n        scale([1, 0.1, 0.5])\n        cube([8, 1, 1]);\n    }\n    \n    // Right wing (mirror of left)\n    mirror([1, 0, 0]) {\n        translate([-12, 0, 15])\n        rotate([0, 0, 20])\n        scale([3, 0.2, 1])\n        sphere(8);\n        \n        for(i = [0:4]) {\n            translate([-35 + i*3, 0, 15 - i*2])\n            rotate([0, -10 - i*5, 0])\n            scale([1, 0.1, 0.5])\n            cube([8, 1, 1]);\n        }\n    }\n}\n\nmodule tail() {\n    // Tail fan\n    for(i = [-2:2]) {\n        rotate([0, 0, i * 15])\n        translate([0, 0, 5 - abs(i)*2])\n        scale([1, 0.1, 0.5])\n        cube([12, 1, 2]);\n    }\n}\n\nmodule legs() {\n    // Left leg\n    translate([-4, 0, 0])\n    cylinder(h=15, r=1.5);\n    \n    // Left foot\n    translate([-4, 0, 0])\n    rotate([90, 0, 0])\n    cylinder(h=8, r=1.5);\n    \n    // Toes\n    for(i = [-1, 0, 1]) {\n        translate([-4 + i*1.5, 0, -1])\n        rotate([90, 0, i*30])\n        cylinder(h=4, r=0.8);\n    }\n    \n    // Right leg (mirror)\n    mirror([1, 0, 0]) {\n        translate([-4, 0, 0])\n        cylinder(h=15, r=1.5);\n        \n        translate([-4, 0, 0])\n        rotate([90, 0, 0])\n        cylinder(h=8, r=1.5);\n        \n        for(i = [-1, 0, 1]) {\n            translate([-4 + i*1.5, 0, -1])\n            rotate([90, 0, i*30])\n            cylinder(h=4, r=0.8);\n        }\n    }\n}\n\nmodule eyes() {\n    // Left eye socket\n    translate([3, 4, 30])\n    sphere(2);\n    \n    // Right eye socket\n    translate([3, -4, 30])\n    sphere(2);\n}\n\n// Assemble the vulture\nunion() {\n    body();\n    head();\n    wings();\n    tail();\n    legs();\n    eyes();\n}",
    "renders": true
  },
  {
    "animal": "wallaby",
    "openscad_code": "// Wallaby - Realistic style, medium complexity\n// All dimensions in mm\n\n$fn = 32;  // Smooth curves\n\n// Main body\nmodule body() {\n    union() {\n        // Torso\n        translate([0, 0, 15])\n            scale([1.2, 1, 1.5])\n            sphere(15);\n        \n        // Belly\n        translate([0, -6, 10])\n            scale([1.1, 0.8, 1.2])\n            sphere(12);\n        \n        // Chest\n        translate([0, 8, 15])\n            scale([0.9, 0.7, 1.3])\n            sphere(10);\n    }\n}\n\n// Head\nmodule head() {\n    union() {\n        // Skull\n        translate([0, 20, 28])\n            scale([0.8, 1.1, 1])\n            sphere(10);\n        \n        // Snout\n        translate([0, 30, 25])\n            scale([0.7, 0.9, 0.7])\n            sphere(8);\n        \n        // Ears (two)\n        for(side = [-1, 1]) {\n            translate([side * 6, 20, 35])\n                rotate([0, side * 20, 0])\n                scale([0.3, 0.1, 1.2])\n                cylinder(12, 3, 5);\n        }\n    }\n}\n\n// Arms\nmodule arms() {\n    for(side = [-1, 1]) {\n        translate([side * 12, 10, 20])\n            rotate([0, 0, side * 20])\n            scale([0.4, 0.4, 1])\n            cylinder(15, 4, 3);\n    }\n}\n\n// Legs\nmodule legs() {\n    for(side = [-1, 1]) {\n        // Upper leg\n        translate([side * 8, -8, 12])\n            rotate([0, 0, side * -10])\n            cylinder(18, 6, 5);\n        \n        // Lower leg\n        translate([side * 10, -8, -2])\n            rotate([0, 0, side * -30])\n            cylinder(15, 5, 4);\n        \n        // Foot\n        translate([side * 12, -10, -12])\n            scale([1.5, 1, 0.5])\n            sphere(5);\n    }\n}\n\n// Tail\nmodule tail() {\n    hull() {\n        translate([0, -15, 15])\n            sphere(8);\n        \n        translate([0, -35, 8])\n            sphere(6);\n        \n        translate([0, -45, 2])\n            sphere(4);\n    }\n}\n\n// Eyes\nmodule eyes() {\n    for(side = [-1, 1]) {\n        translate([side * 4, 28, 30])\n            sphere(2);\n    }\n}\n\n// Nose\nmodule nose() {\n    translate([0, 34, 24])\n        rotate([90, 0, 0])\n        cylinder(3, 3, 0);\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    arms();\n    legs();\n    tail();\n    eyes();\n    nose();\n}",
    "renders": true
  },
  {
    "animal": "walrus",
    "openscad_code": "// Walrus - Medium complexity realistic style\n// All dimensions in mm, designed for 3D printing\n// Body length ~80mm, height ~35mm\n\n// Overall scale factor\nscale_factor = 1;\n\n// Main body module\nmodule body() {\n    // Main torso - elongated sphere\n    translate([0, 0, 15])\n    scale([1.2, 0.8, 0.6])\n    sphere(20);\n    \n    // Belly bulge\n    translate([0, 0, 8])\n    scale([1.3, 1, 0.5])\n    sphere(18);\n}\n\n// Head module\nmodule head() {\n    // Main head shape\n    translate([-25, 0, 25])\n    rotate([0, 10, 0])\n    scale([1.4, 1.2, 1])\n    sphere(12);\n    \n    // Snout\n    translate([-38, 0, 22])\n    scale([2, 0.8, 0.6])\n    sphere(8);\n}\n\n// Tusks module\nmodule tusks() {\n    // Left tusk\n    translate([-35, -6, 20])\n    rotate([0, 0, -15])\n    cylinder(h1=12, h2=15, r1=3, r2=1.5, $fn=16);\n    \n    // Right tusk\n    translate([-35, 6, 20])\n    rotate([0, 0, 15])\n    cylinder(h1=12, h2=15, r1=3, r2=1.5, $fn=16);\n}\n\n// Flippers module\nmodule flippers() {\n    // Front left flipper\n    translate([0, -20, 10])\n    rotate([0, 0, 45])\n    scale([1.5, 0.3, 0.8])\n    sphere(10);\n    \n    // Front right flipper\n    translate([0, 20, 10])\n    rotate([0, 0, -45])\n    scale([1.5, 0.3, 0.8])\n    sphere(10);\n    \n    // Rear left flipper\n    translate([25, -15, 5])\n    rotate([0, 0, 30])\n    scale([1.2, 0.3, 0.6])\n    sphere(12);\n    \n    // Rear right flipper\n    translate([25, 15, 5])\n    rotate([0, 0, -30])\n    scale([1.2, 0.3, 0.6])\n    sphere(12);\n}\n\n// Whiskers module\nmodule whiskers() {\n    for(i=[-3:3]) {\n        // Left whiskers\n        translate([-42, -5+i*2, 20])\n        rotate([0, 20, 45-i*5])\n        cylinder(h=8, r=0.5, $fn=8);\n        \n        // Right whiskers\n        translate([-42, 5+i*2, 20])\n        rotate([0, 20, -45+i*5])\n        cylinder(h=8, r=0.5, $fn=8);\n    }\n}\n\n// Eyes module\nmodule eyes() {\n    // Left eye socket\n    translate([-20, -8, 28])\n    sphere(3);\n    \n    // Left eye\n    translate([-21, -8, 30])\n    sphere(2);\n    \n    // Right eye socket\n    translate([-20, 8, 28])\n    sphere(3);\n    \n    // Right eye\n    translate([-21, 8, 30])\n    sphere(2);\n}\n\n// Tail module\nmodule tail() {\n    translate([30, 0, 8])\n    rotate([0, -20, 0])\n    scale([0.8, 1.5, 0.3])\n    sphere(12);\n}\n\n// Combine all parts\nscale(scale_factor)\nunion() {\n    body();\n    head();\n    tusks();\n    flippers();\n    whiskers();\n    eyes();\n    tail();\n}",
    "renders": true
  },
  {
    "animal": "wandering",
    "openscad_code": "// Realistic Wandering (snail) – medium complexity\n// All parts printable without support; largest dimension ≈ 75 mm\n\n$fn = 50;               // Global facet resolution\nshell_th = 2;           // Minimum printable wall thickness\nscale_factor = 1.0;     // Can be scaled later for desired print size\n\n/* ---------- Shell (main body) ---------- */\nmodule shell(h=35, d=55) {\n    // Basic shell spiral created by subtracting successively smaller cylinders\n    difference() {\n        union() {\n            // Outer dome\n            translate([0, 0, h/2])\n                scale([1, 1, 0.7])\n                sphere(d = d);\n\n            // Whorl risers for realistic ridges\n            for (a = [0 : 30 : 330]) {\n                rotate([0, 0, a])\n                    translate([d/2 - 4, 0, h/2 - 8])\n                        rotate([90, 0, 0])\n                            cylinder(h = 8, d1 = 6, d2 = 4, $fn = 6);\n            }\n        }\n\n        // Hollow interior\n        translate([0, 0, h/2 - shell_th])\n            scale([1, 1, 0.6])\n            sphere(d = d - 2*shell_th);\n\n        // Spiral cavity\n        for (i = [1 : 3]) {\n            rotate([0, 0, i*120])\n                translate([i*4, 0, h/2 - 5])\n                    rotate([0, -90, 0])\n                        cylinder(h = d/2, d = d/2 - i*6, $fn = 20);\n        }\n    }\n}\n\n/* ---------- Foot / Body ---------- */\nmodule foot() {\n    // Main muscular foot\n    translate([0, -25, 0])\n        scale([1, 2.5, 0.4])\n        sphere(d = 30);\n\n    // Underside flattening for print bed contact\n    translate([0, -25, -2])\n        cube([30, 50, 4], center = true);\n}\n\n/* ---------- Tentacles & Eyes ---------- */\nmodule tentacle(len = 12, d = 3, angle = 0) {\n    translate([0, 0, len/2])\n        rotate([angle, 0, 0])\n            cylinder(h = len, d = d);\n\n    // Eyeball at tip\n    translate([0, 0, len])\n        sphere(d = d + 1);\n}\n\nmodule head_detail() {\n    // Head mass\n    translate([0, -38, 5])\n        sphere(d = 12);\n\n    // Left tentacle\n    translate([-5, -42, 8])\n        tentacle(14, 2.5, -20);\n\n    // Right tentacle\n    translate([5, -42, 8])\n        tentacle(14, 2.5, -20);\n}\n\n/* ---------- Final Assembly ---------- */\nunion() {\n    color(\"BurlyWood\") shell();\n    color(\"AntiqueWhite\") foot();\n    color(\"RosyBrown\") head_detail();\n}",
    "renders": true
  },
  {
    "animal": "warbler",
    "openscad_code": "// Warbler - Realistic Medium Complexity\n// Approx 65mm in length\n\n$fn = 30;\n\nmodule warbler() {\n    // Main body\n    difference() {\n        union() {\n            // Torso/abdomen\n            scale([1, 0.7, 0.8])\n                sphere(12);\n            // Chest\n            translate([0, -3, 1])\n                scale([0.8, 0.6, 0.8])\n                    sphere(10);\n            // Neck\n            translate([0, 0, 8])\n                cylinder(h = 8, r1 = 7, r2 = 5);\n        }\n        // Tail socket\n        translate([-12, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h = 15, r = 5);\n    }\n\n    // Head\n    translate([0, 0, 15])\n        scale([0.9, 0.9, 1.1])\n            sphere(8);\n\n    // Beak\n    translate([0, 0, 23])\n        rotate([30, 0, 0])\n            cylinder(h = 12, r1 = 2, r2 = 0.5);\n\n    // Tail\n    for(i = [-30, 0, 30]) {\n        rotate([0, i, 0])\n            translate([-18, 0, 0])\n                rotate([0, 90, 0])\n                    scale([1, 0.3, 0.1])\n                        cylinder(h = 15, r = 4);\n    }\n\n    // Wings\n    module wing(side) {\n        translate([side * 5, 0, 5])\n            rotate([0, side * 20, 0])\n                scale([side * 1, 1, 0.2])\n                    difference() {\n                        // Main wing\n                        translate([-5, 0, 0])\n                            rotate([0, 0, -20])\n                                cube([20, 12, 2]);\n                        // Feather notches\n                        for(j = [0:3]) {\n                            translate([j * 4 - 5, 5, -1])\n                                cube([2, 3, 4]);\n                        }\n                    }\n    }\n    wing(1);\n    wing(-1);\n\n    // Legs\n    module leg(side) {\n        translate([side * 4, 0, -8])\n            rotate([0, side * 10, 0])\n                cylinder(h = 10, r = 1.5);\n        // Foot\n        translate([side * 4, 0, -18])\n            rotate([90, 0, 0])\n                difference() {\n                    cylinder(h = 4, r = 1.5);\n                    // Toes\n                    for(k = [-1, 0, 1]) {\n                        translate([k * 1.2, 0, -2])\n                            rotate([0, 90, 0])\n                                cylinder(h = 3, r = 0.5);\n                    }\n                }\n    }\n    leg(1);\n    leg(-1);\n\n    // Eye\n    module eye(side) {\n        translate([side * 3, -5, 16])\n            difference() {\n                sphere(2);\n                translate([0, -1, 0])\n                    sphere(1.5);\n            }\n    }\n    eye(1);\n    eye(-1);\n\n    // Crest\n    for(l = [-15:15]) {\n        translate([sin(l) * 2, -6, 20 + cos(l) * 2])\n            rotate([90, l, 0])\n                cylinder(h = 3 + l/5, r = 0.5);\n    }\n}\n\n// Main assembly\ntranslate([0, 0, 20])\n    warbler();",
    "renders": true
  },
  {
    "animal": "warthog",
    "openscad_code": "// Warthog model - realistic medium complexity\n// Body, head, legs, tusks, tail designed for 3D printing\n\nmodule leg(x_offset, z_offset, angle=0) {\n    translate([x_offset, 0, z_offset])\n    rotate([0, 0, angle])\n    union() {\n        // Upper leg\n        translate([0, 0, 5])\n        scale([1.2, 1.2, 2.5])\n        sphere(5, $fn=12);\n        \n        // Lower leg\n        translate([0, 0, -5])\n        cylinder(h=15, r1=4, r2=3, $fn=8);\n        \n        // Hoof\n        translate([0, 0, -13])\n        scale([1.2, 1.2, 0.8])\n        cylinder(h=5, r=3.5, $fn=8);\n    }\n}\n\nmodule tusk(side) {\n    translate([side * 12, 5, 0])\n    rotate([0, -20, side * 10])\n    scale([1, 1, 2.5])\n    cylinder(h=15, r1=2.5, r2=0.5, $fn=6);\n}\n\nmodule ear(side) {\n    translate([side * 8, 12, 8])\n    rotate([0, -10, side * 15])\n    scale([0.8, 1.5, 2])\n    sphere(5, $fn=12);\n}\n\nmodule tail() {\n    translate([0, -25, 8])\n    rotate([20, 0, 0])\n    union() {\n        cylinder(h=20, r1=2.5, r2=1, $fn=8);\n        translate([0, 0, 20])\n        sphere(2.5, $fn=8);\n    }\n}\n\n// Main body\nunion() {\n    // Body\n    translate([0, 0, 12])\n    scale([1.8, 2.2, 1.3])\n    sphere(15, $fn=20);\n    \n    // Head\n    translate([0, 25, 15])\n    rotate([-10, 0, 0])\n    scale([1.2, 1.5, 1.1])\n    sphere(12, $fn=16);\n    \n    // Snout\n    translate([0, 35, 12])\n    scale([0.8, 1.2, 0.9])\n    sphere(8, $fn=12);\n    \n    // Nostrils\n    for(side = [-1, 1]) {\n        translate([side * 3, 38, 12])\n        rotate([90, 0, 0])\n        cylinder(h=3, r=1.5, $fn=8);\n    }\n    \n    // Eyes\n    for(side = [-1, 1]) {\n        translate([side * 6, 28, 18])\n        sphere(2.5, $fn=8);\n    }\n    \n    // Ears\n    ear(-1);\n    ear(1);\n    \n    // Tusks\n    tusk(-1);\n    tusk(1);\n    \n    // Legs\n    leg(-10, 0, -10);\n    leg(10, 0, 10);\n    leg(-8, 0, -170);\n    leg(8, 0, 170);\n    \n    // Tail\n    tail();\n    \n    // Mane ridge\n    for(i = [0:5]) {\n        translate([0, 15 + i*3, 20 + sin(i*30)*2])\n        scale([0.8, 1, 0.8])\n        sphere(3, $fn=8);\n    }\n}",
    "renders": true
  },
  {
    "animal": "wasp",
    "openscad_code": "// Wasp.scad - Realistic medium-complexity 3D-printable wasp\n// Approx. 75 mm long, 25 mm wide, 20 mm high\n// All parts printable without supports\n\n// Body segments\nmodule thorax() {\n    union() {\n        // Main thorax\n        translate([0, 0, 0])\n            scale([1.2, 0.9, 1.1])\n            sphere(r=7, $fn=32);\n        \n        // Neck connection to head\n        translate([8, 0, 2])\n            rotate([0, -15, 0])\n            cylinder(h=5, r1=4, r2=3, $fn=16);\n    }\n}\n\nmodule abdomen() {\n    union() {\n        // Main abdomen with segments\n        for (i = [0:5]) {\n            translate([-12 - i*4, 0, 0])\n                scale([1 - i*0.08, 1 - i*0.05, 1 - i*0.08])\n                sphere(r=6, $fn=32);\n        }\n        \n        // Stinger\n        translate([-35, 0, 0])\n            rotate([0, -10, 0])\n            cylinder(h=6, r1=1.5, r2=0.5, $fn=16);\n    }\n}\n\nmodule head() {\n    union() {\n        // Main head\n        translate([14, 0, 3])\n            rotate([0, -20, 0])\n            scale([1.1, 0.9, 0.9])\n            sphere(r=5, $fn=32);\n        \n        // Mandibles\n        translate([18, -2.5, 1])\n            rotate([0, 0, -30])\n            cylinder(h=3, r1=1.2, r2=0.5, $fn=8);\n        translate([18, 2.5, 1])\n            rotate([0, 0, 30])\n            cylinder(h=3, r1=1.2, r2=0.5, $fn=8);\n        \n        // Eyes\n        translate([16, -3, 3])\n            sphere(r=2, $fn=16);\n        translate([16, 3, 3])\n            sphere(r=2, $fn=16);\n    }\n}\n\n// Wings - thin printable\nmodule wing() {\n    difference() {\n        // Main wing shape\n        linear_extrude(height=0.6)\n            polygon(points=[\n                [0, 0], [15, 8], [25, 5], [30, 0], [25, -5], [15, -8]\n            ]);\n        \n        // Wing veins as cutouts\n        for (i = [1:3]) {\n            translate([i*8, 0, -0.1])\n                cube([0.8, 10, 1]);\n        }\n    }\n}\n\n// Leg segments\nmodule leg_segment(length, angle, thickness) {\n    rotate([0, 0, angle])\n        translate([length/2, 0, 0])\n            cube([length, thickness, thickness], center=true);\n}\n\nmodule leg() {\n    union() {\n        // Coxa\n        leg_segment(6, 0, 2);\n        \n        // Femur\n        translate([6, 0, 0])\n            rotate([0, 0, 30])\n            leg_segment(8, 0, 1.5);\n        \n        // Tibia\n        translate([14, 3, 0])\n            rotate([0, 0, 45])\n            leg_segment(10, 0, 1.2);\n        \n        // Tarsus segments\n        translate([24, 8, 0])\n            rotate([0, 0, 60])\n            leg_segment(4, 0, 0.8);\n        translate([28, 10, 0])\n            rotate([0, 0, 75])\n            leg_segment(3, 0, 0.6);\n    }\n}\n\n// Main assembly\nunion() {\n    // Body parts\n    color(\"yellow\")\n    thorax();\n    \n    translate([-15, 0, -2])\n    color([0.9, 0.7, 0.1])\n    abdomen();\n    \n    head();\n    \n    // Wings - two pairs\n    translate([5, 0, 5])\n        rotate([0, 0, 15])\n        wing();\n    translate([5, 0, 5])\n        rotate([0, 0, -15])\n        mirror([0, 1, 0])\n        wing();\n    \n    translate([2, 0, 5])\n        rotate([0, 0, 25])\n        scale([0.8, 0.8, 1])\n        wing();\n    translate([2, 0, 5])\n        rotate([0, 0, -25])\n        mirror([0, 1, 0])\n        scale([0.8, 0.8, 1])\n        wing();\n    \n    // Legs - 6 total\n    // Front legs\n    translate([8, 0, -5])\n        rotate([40, 0, 0])\n        leg();\n    translate([8, 0, -5])\n        rotate([40, 0, 0])\n        mirror([0, 1, 0])\n        leg();\n    \n    // Middle legs\n    translate([2, 0, -6])\n        rotate([30, 0, 0])\n        scale([1.1, 1.1, 1.1])\n        leg();\n    translate([2, 0, -6])\n        rotate([30, 0, 0])\n        mirror([0, 1, 0])\n        scale([1.1, 1.1, 1.1])\n        leg();\n    \n    // Rear legs\n    translate([-5, 0, -6])\n        rotate([20, 0, 0])\n        scale([1.2, 1.2, 1.2])\n        leg();\n    translate([-5, 0, -6])\n        rotate([20, 0, 0])\n        mirror([0, 1, 0])\n        scale([1.2, 1.2, 1.2])\n        leg();\n}",
    "renders": true
  },
  {
    "animal": "waterbuck",
    "openscad_code": "// Waterbuck - Medium Complexity Realistic Style\n// Size: ~80mm long, 50mm tall\n\n$fn = 32;\n\n// Main module\nmodule waterbuck() {\n    // Body\n    union() {\n        // Torso\n        translate([0, 0, 25])\n            scale([1, 0.6, 0.7])\n            sphere(d=40);\n        \n        // Rump\n        translate([-20, 0, 25])\n            scale([0.9, 0.7, 0.8])\n            sphere(d=35);\n        \n        // Neck\n        translate([20, 0, 40])\n            rotate([0, -20, 0])\n            scale([0.8, 0.6, 1.2])\n            cylinder(h=25, d1=20, d2=15);\n        \n        // Head\n        translate([35, 0, 45])\n            scale([1.2, 0.7, 0.8])\n            sphere(d=25);\n        \n        // Snout\n        translate([45, 0, 42])\n            rotate([0, -10, 0])\n            scale([1.5, 0.6, 0.5])\n            cylinder(h=15, d1=15, d2=10);\n        \n        // Legs\n        for(side = [-1, 1]) {\n            // Front legs\n            translate([15, side*8, 15])\n                rotate([0, 5, 0])\n                leg();\n            translate([5, side*8, 15])\n                rotate([0, -5, 0])\n                leg();\n            \n            // Rear legs\n            translate([-15, side*8, 15])\n                rotate([0, -10, 0])\n                leg();\n            translate([-25, side*8, 15])\n                rotate([0, 10, 0])\n                leg();\n        }\n        \n        // Ears\n        translate([32, 8, 50])\n            rotate([0, -30, 15])\n            ear();\n        translate([32, -8, 50])\n            rotate([0, -30, -15])\n            mirror([0,1,0])\n            ear();\n        \n        // Horns (male waterbuck)\n        translate([35, 6, 55])\n            horn();\n        translate([35, -6, 55])\n            mirror([0,1,0])\n            horn();\n        \n        // Tail\n        translate([-30, 0, 35])\n            rotate([0, 30, 0])\n            tail();\n    }\n}\n\n// Leg module\nmodule leg() {\n    union() {\n        // Upper leg\n        cylinder(h=20, d1=8, d2=6);\n        \n        // Lower leg\n        translate([0, 0, -20])\n            rotate([0, 10, 0])\n            cylinder(h=18, d1=6, d2=5);\n        \n        // Hoof\n        translate([0, 0, -38])\n            scale([1.2, 1, 0.5])\n            cylinder(h=3, d=6);\n    }\n}\n\n// Ear module\nmodule ear() {\n    difference() {\n        scale([0.3, 1, 1.5])\n            sphere(d=8);\n        translate([0, 0, 2])\n            scale([0.25, 0.9, 1.4])\n            sphere(d=7);\n    }\n}\n\n// Horn module (lyre-shaped)\nmodule horn() {\n    difference() {\n        union() {\n            // Main horn\n            translate([0, 0, 0])\n                rotate([0, -10, 0])\n                cylinder(h=15, d1=3, d2=1.5);\n            \n            // Curve\n            translate([2, 0, 10])\n                rotate([30, 30, 0])\n                scale([0.8, 0.8, 1])\n                cylinder(h=8, d1=1.5, d2=1);\n        }\n        \n        // Hollow center\n        translate([0, 0, -1])\n            cylinder(h=17, d=1.5);\n    }\n}\n\n// Tail module\nmodule tail() {\n    difference() {\n        union() {\n            // Tail base\n            cylinder(h=8, d1=5, d2=3);\n            \n            // Tail tuft\n            translate([0, 0, -8])\n                sphere(d=4);\n        }\n        \n        // Hollow for flexibility\n        translate([0, 0, 2])\n            cylinder(h=10, d=2);\n    }\n}\n\n// Generate the waterbuck\nwaterbuck();",
    "renders": true
  },
  {
    "animal": "waterdog",
    "openscad_code": "// Waterdog (medium complexity, realistic style)\n// Dimensions: ~70mm length, 30mm height, 25mm width\n// Wall thickness: 2mm for 3D printing\n\n$fn = 32;\n\n// Main body\nmodule body() {\n    difference() {\n        union() {\n            // Torso\n            translate([0, 0, 8])\n                scale([1.2, 0.8, 0.6])\n                sphere(12);\n            \n            // Tail\n            translate([-18, 0, 6])\n                rotate([0, 0, 20])\n                scale([2.5, 0.8, 0.8])\n                cylinder(15, 5, 2);\n            \n            // Head\n            translate([15, 0, 12])\n                scale([1.1, 0.9, 0.8])\n                sphere(8);\n            \n            // Neck\n            translate([9, 0, 10])\n                scale([0.8, 0.7, 0.7])\n                cylinder(8, 7, 7);\n        }\n        \n        // Hollow out body\n        translate([0, 0, 8])\n            scale([1.1, 0.7, 0.5])\n            sphere(10);\n    }\n}\n\n// Legs\nmodule leg(x_pos, z_rot) {\n    translate([x_pos, 0, 0]) {\n        rotate([0, 0, z_rot]) {\n            difference() {\n                // Upper leg\n                translate([0, 0, 4])\n                    scale([0.8, 0.8, 1.2])\n                    cylinder(6, 3, 3);\n                \n                // Hollow upper leg\n                translate([0, 0, 4])\n                    scale([0.7, 0.7, 1.1])\n                    cylinder(5.5, 2, 2);\n            }\n            \n            // Lower leg and foot\n            translate([0, 0, 1]) {\n                rotate([30, 0, 0]) {\n                    difference() {\n                        union() {\n                            // Lower leg\n                            cylinder(5, 2.5, 2.5);\n                            \n                            // Webbed foot\n                            translate([0, 0, 0])\n                                scale([1.5, 2, 0.5])\n                                cube([4, 3, 1]);\n                        }\n                        \n                        // Hollow lower leg\n                        cylinder(4.5, 1.5, 1.5);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Eyes\nmodule eye(x_pos) {\n    translate([x_pos, 0, 14]) {\n        // Eye socket\n        difference() {\n            sphere(2.5);\n            translate([0, 0, -1])\n                sphere(2);\n        }\n        \n        // Pupil\n        translate([0, 1.8, 0])\n            scale([0.5, 0.5, 1])\n            sphere(1);\n    }\n}\n\n// Gills (external feathery structures)\nmodule gills() {\n    for(i = [0:2]) {\n        rotate([0, 90, i * 30 - 30])\n            translate([12, 0, 10])\n                scale([0.3, 2, 1])\n                cylinder(3, 1, 0.5);\n    }\n}\n\n// Main assembly\nunion() {\n    body();\n    \n    // Front legs\n    leg(8, 35);\n    leg(8, -35);\n    \n    // Back legs\n    leg(-8, 25);\n    leg(-8, -25);\n    \n    // Eyes\n    eye(22);\n    eye(22);\n    \n    // Gills\n    gills();\n    \n    // Nostrils\n    translate([20, 2, 13])\n        sphere(0.5);\n    translate([20, -2, 13])\n        sphere(0.5);\n}",
    "renders": true
  },
  {
    "animal": "waterfowl",
    "openscad_code": "// Waterfowl (Mallard Duck) - Realistic Medium Complexity\n// Size: ~70mm length, 3D printable\n\n// Parameters\nbody_length = 35;\nbody_width = 20;\nbody_height = 18;\nneck_length = 12;\nneck_diameter = 6;\nhead_radius = 8;\nbeak_length = 10;\nbeak_width = 3;\nwing_span = 30;\ntail_length = 12;\nleg_length = 15;\nfoot_size = 8;\nwall_thickness = 2;\n\n// Body with gentle curves\nmodule duck_body() {\n    difference() {\n        // Main body ellipsoid\n        scale([1, 0.7, 0.6]) \n        sphere(d=body_length);\n        \n        // Flatten bottom for printing\n        translate([0, 0, -body_height/2 - 1])\n            cube([body_length*2, body_width*2, 2], center=true);\n            \n        // Hollow interior\n        scale([0.8, 0.55, 0.45]) \n        sphere(d=body_length - wall_thickness*2);\n    }\n}\n\n// Neck connecting body to head\nmodule neck() {\n    translate([body_length/2 - 5, 0, body_height/2 - 2])\n        rotate([0, -20, 0])\n        cylinder(h=neck_length, d1=neck_diameter, d2=neck_diameter*0.8);\n}\n\n// Head with integrated beak\nmodule head_and_beak() {\n    translate([body_length/2 + neck_length - 2, 0, body_height/2 + neck_length/2 - 3]) {\n        // Head sphere\n        sphere(r=head_radius);\n        \n        // Beak - slightly curved\n        translate([head_radius + beak_length/2 - 2, 0, -head_radius/3])\n            rotate([0, -10, 0])\n            scale([1, 0.5, 0.3])\n            sphere(d=beak_length);\n            \n        // Eye indentations\n        for(side = [-1, 1]) {\n            translate([head_radius/2, side*head_radius/2, head_radius/3])\n                sphere(d=2);\n        }\n    }\n}\n\n// Wing with feather texture using loops\nmodule wing() {\n    module wing_half(side) {\n        translate([body_length/4, side*body_width/2, body_height/3]) {\n            rotate([0, 0, side*20])\n            difference() {\n                // Main wing shape\n                scale([1.2, 0.2, 0.8])\n                sphere(d=wing_span/2);\n                \n                // Feather cuts\n                for(i = [1:3]) {\n                    rotate([0, 0, side*i*15])\n                    translate([i*3, 0, 0])\n                        cube([wing_span/4, wing_span/2, wing_span/4], center=true);\n                }\n            }\n        }\n    }\n    \n    wing_half(1);\n    wing_half(-1);\n}\n\n// Tail with individual feathers\nmodule tail() {\n    translate([-body_length/2 - tail_length/2 + 5, 0, body_height/4]) {\n        rotate([0, 20, 0])\n        for(i = [0:3]) {\n            rotate([0, 0, i*8 - 12])\n            translate([0, i*2 - 3, 0])\n                scale([1, 0.3, 0.1])\n                sphere(d=tail_length);\n        }\n    }\n}\n\n// Leg and foot\nmodule leg(side) {\n    translate([0, side*body_width/3, -body_height/2]) {\n        // Upper leg\n        cylinder(h=leg_length/2, d=3);\n        \n        // Lower leg\n        translate([0, 0, -leg_length/2])\n            rotate([15, 0, 0])\n            cylinder(h=leg_length/2, d=2.5);\n            \n        // Webbed foot\n        translate([2, 0, -leg_length - 1])\n            rotate([0, 90, 0])\n            difference() {\n                // Main foot\n                scale([1.5, 1, 0.3])\n                sphere(d=foot_size);\n                \n                // Web cuts\n                for(i = [0:2]) {\n                    translate([0, i*3 - 3, 0])\n                        cube([foot_size, 1, foot_size], center=true);\n                }\n            }\n    }\n}\n\n// Assembly\nunion() {\n    duck_body();\n    neck();\n    head_and_beak();\n    wing();\n    tail();\n    leg(1);\n    leg(-1);\n}",
    "renders": true
  },
  {
    "animal": "waterhen",
    "openscad_code": "// Waterhen (Realistic Style - Medium Complexity)\n// 3D printable model ~80mm long\n\nmodule body() {\n    // Main body - oval shape\n    hull() {\n        translate([-20,0,0]) sphere([15,20,18], $fn=20);\n        translate([20,0,0]) sphere([15,20,18], $fn=20);\n    }\n}\n\nmodule neck() {\n    // Curved neck connecting body to head\n    for(i=[0:5:30]) {\n        rotate([0,0,i/2]) translate([i,0,sin(i)*2]) \n            sphere([6-i/10,5-i/10,5-i/10], $fn=12);\n    }\n}\n\nmodule head() {\n    // Head with beak\n    union() {\n        // Head\n        translate([35,0,25]) sphere([8,7,7], $fn=16);\n        \n        // Beak\n        translate([43,0,25]) rotate([0,0,-10]) \n            scale([2,1,0.8]) cylinder(h=10, r1=2.5, r2=1, $fn=8);\n        \n        // Comb on head\n        for(i=[-3:3:3]) {\n            translate([35, i, 28]) cylinder(h=2, r=1.5, $fn=6);\n        }\n    }\n}\n\nmodule wing() {\n    // Wing with feather details\n    difference() {\n        // Main wing shape\n        translate([5,15,15]) rotate([0,20,0]) \n            scale([1,0.3,1]) sphere([20,12,10], $fn=16);\n        \n        // Feather cuts\n        for(i=[0:3:15]) {\n            translate([i,15-i/3,15+i/2]) rotate([0,20,0]) \n                cube([2,8,1], center=true);\n        }\n    }\n}\n\nmodule tail() {\n    // Fan-shaped tail\n    for(i=[-20:10:20]) {\n        rotate([0,i,0]) translate([-25,0,5]) \n            scale([1,0.2,1]) cylinder(h=15, r1=8, r2=3, $fn=4);\n    }\n}\n\nmodule leg() {\n    // Leg with webbed foot\n    union() {\n        // Upper leg\n        translate([10,-8,0]) cylinder(h=12, r=2, $fn=8);\n        \n        // Lower leg\n        translate([10,-10,-12]) cylinder(h=12, r=1.5, $fn=8);\n        \n        // Webbed foot\n        translate([10,-10,-24]) {\n            // Center toe\n            cylinder(h=4, r=1, $fn=6);\n            \n            // Side toes\n            rotate([0,0,-30]) translate([0,-3,0]) \n                cylinder(h=3, r=0.8, $fn=6);\n            rotate([0,0,30]) translate([0,3,0]) \n                cylinder(h=3, r=0.8, $fn=6);\n        }\n    }\n}\n\nmodule eye() {\n    // Eye with pupil\n    difference() {\n        translate([38,3,27]) sphere([1.5,1.5,1.5], $fn=12);\n        translate([38.5,3.2,28]) sphere([0.5,0.5,0.5], $fn=8);\n    }\n}\n\n// Main assembly\nunion() {\n    // Body parts\n    body();\n    neck();\n    head();\n    \n    // Wings - mirrored for both sides\n    wing();\n    mirror([0,1,0]) wing();\n    \n    // Tail\n    tail();\n    \n    // Legs\n    leg();\n    mirror([0,1,0]) leg();\n    \n    // Eyes\n    eye();\n    mirror([0,1,0]) eye();\n}\n\n// Add support base for 3D printing\ntranslate([0,0,-26]) \n    difference() {\n        cylinder(h=2, r=30, $fn=32);\n        cylinder(h=3, r=28, $fn=32);\n    }",
    "renders": true
  },
  {
    "animal": "weasel",
    "openscad_code": "// Weasel - realistic style, medium complexity\n// Total length ~80mm, printable without supports\n\n$fn = 32;\n\nmodule weasel() {\n    // Body - elongated ellipsoid shape\n    union() {\n        // Main torso\n        scale([1.4, 0.8, 0.7]) sphere(d = 40);\n        \n        // Neck transition\n        translate([12, 0, 5]) scale([0.9, 0.7, 0.6]) sphere(d = 20);\n        \n        // Head\n        translate([25, 0, 12]) rotate([0, -10, 0]) scale([1.2, 0.8, 0.8]) sphere(d = 18);\n        \n        // Snout\n        translate([33, 0, 12]) rotate([0, -10, 0]) scale([1.5, 0.6, 0.5]) \n            cylinder(h = 12, r1 = 6, r2 = 3);\n    }\n    \n    // Ears\n    module ear(pos) {\n        translate(pos) rotate([0, 30, 0]) \n            scale([0.3, 0.2, 0.5]) cylinder(h = 8, r1 = 4, r2 = 1);\n    }\n    ear([22, -7, 22]);\n    ear([22, 7, 22]);\n    \n    // Legs - short with paws\n    module leg(pos, angle) {\n        translate(pos) rotate([angle, 0, 0]) {\n            // Upper leg\n            cylinder(h = 8, r = 3);\n            // Lower leg\n            translate([0, 0, -8]) cylinder(h = 10, r1 = 3, r2 = 2);\n            // Paw\n            translate([0, 0, -18]) sphere(d = 5);\n        }\n    }\n    \n    // Front legs\n    leg([-5, -8, -10], 20);\n    leg([-5, 8, -10], 20);\n    \n    // Rear legs\n    leg([-18, -6, -10], 30);\n    leg([-18, 6, -10], 30);\n    \n    // Tail - long and tapered\n    translate([-22, 0, -2]) rotate([20, 0, 0]) \n        scale([0.8, 0.8, 0.1]) cylinder(h = 35, r1 = 6, r2 = 1);\n    \n    // Eyes\n    module eye(pos) {\n        translate(pos) {\n            difference() {\n                sphere(d = 4);\n                translate([0, 0.5, -0.5]) scale([0.8, 0.8, 1]) sphere(d = 3);\n            }\n        }\n    }\n    eye([30, -3.5, 14]);\n    eye([30, 3.5, 14]);\n    \n    // Nose\n    translate([38, 0, 11]) sphere(d = 2.5);\n    \n    // Whiskers\n    for(i = [-1, 1]) {\n        translate([36, i*4, 11]) rotate([0, 0, i*10]) \n            cylinder(h = 8, r = 0.3);\n        translate([36, i*3, 11]) rotate([0, 0, i*5]) \n            cylinder(h = 8, r = 0.3);\n    }\n}\n\n// Main assembly\nweasel();",
    "renders": true
  },
  {
    "animal": "weaver",
    "openscad_code": "// Weaver in realistic style, medium complexity\n// Overall height ~80 mm, seated figure at loom\n\n$fn = 36; // smoother curves\n\n// Color constants (for preview only)\nloom_color = \"BurlyWood\";\nweaver_color = \"SandyBrown\";\nhair_color = \"SaddleBrown\";\nskirt_color = \"DarkKhaki\";\n\n// Main assembly\nmodule weaver_scene() {\n    union() {\n        // Loom structure\n        color(loom_color) loom();\n        \n        // Weaver figure\n        color(weaver_color) weaver();\n    }\n}\n\n// Loom frame\nmodule loom() {\n    // Base frame\n    cube([60, 30, 4], center = true);\n    \n    // Vertical posts\n    translate([-25, 0, 18]) cylinder(h = 36, d = 4, center = true);\n    translate([25, 0, 18]) cylinder(h = 36, d = 4, center = true);\n    \n    // Top beam\n    translate([0, 0, 36]) cube([54, 3, 3], center = true);\n    \n    // Warp threads (vertical strings)\n    for (x = [-20:5:20]) {\n        translate([x, -15, 2]) cylinder(h = 70, d = 0.6, center = false);\n    }\n    \n    // Shuttle / heddle bar\n    translate([0, 0, 20]) cube([50, 2, 1], center = true);\n}\n\n// Weaver figure\nmodule weaver() {\n    translate([0, 0, 2]) { // Position on loom seat\n        union() {\n            // Torso\n            translate([0, 0, 22]) {\n                cube([12, 8, 18], center = true);\n            }\n            \n            // Head\n            translate([0, 0, 34]) {\n                sphere(d = 10);\n            }\n            \n            // Hair bun\n            color(hair_color) translate([0, 0, 38]) {\n                sphere(d = 8);\n            }\n            \n            // Arms\n            left_arm();\n            right_arm();\n            \n            // Skirt\n            color(skirt_color) translate([0, 0, 12]) {\n                cylinder(h = 10, d1 = 14, d2 = 12, center = false);\n            }\n            \n            // Legs (seated)\n            left_leg();\n            right_leg();\n            \n            // Feet\n            left_foot();\n            right_foot();\n        }\n    }\n}\n\n// Left arm\nmodule left_arm() {\n    translate([-8, 0, 25]) {\n        rotate([0, 30, -20]) {\n            cylinder(h = 12, d = 3, center = false);\n            translate([0, 0, 12]) rotate([20, 0, 0]) {\n                cylinder(h = 8, d = 2.5, center = false);\n            }\n        }\n    }\n}\n\n// Right arm\nmodule right_arm() {\n    translate([8, 0, 25]) {\n        rotate([0, 30, 20]) {\n            cylinder(h = 12, d = 3, center = false);\n            translate([0, 0, 12]) rotate([20, 0, 0]) {\n                cylinder(h = 8, d = 2.5, center = false);\n            }\n        }\n    }\n}\n\n// Left leg\nmodule left_leg() {\n    translate([-4, 0, 7]) {\n        rotate([30, 0, 0]) {\n            cylinder(h = 10, d = 4, center = false);\n            translate([0, 0, 10]) rotate([60, 0, 0]) {\n                cylinder(h = 8, d = 3, center = false);\n            }\n        }\n    }\n}\n\n// Right leg\nmodule right_leg() {\n    translate([4, 0, 7]) {\n        rotate([30, 0, 0]) {\n            cylinder(h = 10, d = 4, center = false);\n            translate([0, 0, 10]) rotate([60, 0, 0]) {\n                cylinder(h = 8, d = 3, center = false);\n            }\n        }\n    }\n}\n\n// Left foot\nmodule left_foot() {\n    translate([-4, 0, 0]) {\n        cube([5, 8, 2], center = true);\n    }\n}\n\n// Right foot\nmodule right_foot() {\n    translate([4, 0, 0]) {\n        cube([5, 8, 2], center = true);\n    }\n}\n\n// Render the scene\nweaver_scene();",
    "renders": true
  },
  {
    "animal": "weevil",
    "openscad_code": "// Realistic Weevil - Medium Complexity\n// 3D printable model with proper wall thickness and no overhangs\n\n$fn = 32;\n\n// Overall dimensions (mm)\nbody_length = 60;\nbody_height = 25;\nhead_length = 15;\n\n// Main body segments\nmodule weevil_body() {\n    // Thorax (main body)\n    union() {\n        // Central body segment - ellipsoid shape\n        scale([1.2, 1, 0.8]) \n            sphere(d=body_length * 0.6);\n        \n        // Abdomen - tapered rear\n        translate([body_length * 0.3, 0, -body_height * 0.2])\n            scale([1.5, 1.2, 0.6])\n                sphere(d=body_length * 0.5);\n        \n        // Prothorax - front segment\n        translate([-body_length * 0.2, 0, 0])\n            scale([0.8, 0.9, 0.7])\n                sphere(d=body_length * 0.4);\n    }\n}\n\n// Head with snout\nmodule weevil_head() {\n    union() {\n        // Main head capsule\n        translate([-body_length * 0.4, 0, body_height * 0.3])\n            rotate([0, -10, 0])\n            scale([0.8, 0.9, 0.7])\n                sphere(d=head_length);\n        \n        // Snout (rostrum) - curved downward\n        translate([-body_length * 0.5, 0, body_height * 0.2])\n            rotate([0, -20, 0])\n            scale([1, 0.6, 0.6])\n                cylinder(h=head_length * 1.2, d1=head_length * 0.8, d2=head_length * 0.3);\n        \n        // Antennae bases\n        for(side = [-1, 1]) {\n            translate([-body_length * 0.45, side * head_length * 0.3, body_height * 0.4])\n                rotate([0, 0, side * 30])\n                cylinder(h=head_length * 0.3, d=head_length * 0.15);\n            \n            // Antenna segments\n            translate([-body_length * 0.45, side * head_length * 0.3, body_height * 0.4])\n                rotate([0, 0, side * 30])\n                translate([head_length * 0.25, 0, 0])\n                cylinder(h=head_length * 0.4, d=head_length * 0.08);\n        }\n    }\n}\n\n// Elytra (wing covers)\nmodule elytra() {\n    union() {\n        for(side = [-1, 1]) {\n            translate([body_length * 0.1, side * body_length * 0.15, body_height * 0.1])\n                rotate([0, 0, side * 10])\n                scale([1.3, 0.4, 0.3])\n                    difference() {\n                        sphere(d=body_length * 0.5);\n                        // Cut along center line\n                        translate([0, -side * 10, 0])\n                            cube([body_length, body_length, body_length], center=true);\n                    }\n        }\n    }\n}\n\n// Legs - six legs with jointed segments\nmodule legs() {\n    // Front legs\n    for(side = [-1, 1]) {\n        for(pos = [0, 1]) {\n            translate([-body_length * 0.25 + pos * body_length * 0.15, \n                       side * body_length * 0.22, \n                       -body_height * 0.2]) {\n                // Coxa\n                rotate([45, 0, 0])\n                    cylinder(h=body_length * 0.08, d=body_length * 0.06);\n                \n                // Femur\n                translate([0, 0, body_length * 0.08])\n                    rotate([90, 0, 0])\n                    cylinder(h=body_length * 0.12, d=body_length * 0.05);\n                \n                // Tibia\n                translate([0, 0, body_length * 0.08 + body_length * 0.12])\n                    rotate([90, 0, 0])\n                    cylinder(h=body_length * 0.1, d=body_length * 0.04);\n                \n                // Tarsus\n                translate([0, 0, body_length * 0.08 + body_length * 0.12 + body_length * 0.1])\n                    rotate([90, 0, 0])\n                    scale([1, 1, 0.8])\n                    cylinder(h=body_length * 0.08, d=body_length * 0.03);\n            }\n        }\n    }\n    \n    // Middle legs\n    for(side = [-1, 1]) {\n        translate([body_length * 0.05, side * body_length * 0.25, -body_height * 0.2]) {\n            rotate([30, 0, 0])\n                cylinder(h=body_length * 0.08, d=body_length * 0.06);\n            \n            translate([0, 0, body_length * 0.08])\n                rotate([90, 0, 0])\n                cylinder(h=body_length * 0.13, d=body_length * 0.05);\n            \n            translate([0, 0, body_length * 0.08 + body_length * 0.13])\n                rotate([90, 0, 0])\n                cylinder(h=body_length * 0.11, d=body_length * 0.04);\n            \n            translate([0, 0, body_length * 0.08 + body_length * 0.13 + body_length * 0.11])\n                rotate([90, 0, 0])\n                scale([1, 1, 0.8])\n                cylinder(h=body_length * 0.09, d=body_length * 0.03);\n        }\n    }\n}\n\n// Compound eyes\nmodule eyes() {\n    for(side = [-1, 1]) {\n        translate([-body_length * 0.42, side * head_length * 0.35, body_height * 0.35])\n            scale([0.8, 1, 0.8])\n            sphere(d=head_length * 0.3);\n    }\n}\n\n// Surface texture - simple grooves\nmodule surface_texture() {\n    // Grooves on elytra\n    for(i = [0:5]) {\n        translate([body_length * 0.2 + i * body_length * 0.05, 0, body_height * 0.15])\n            scale([1, 0.5, 0.02])\n            cube([body_length * 0.02, body_length * 0.3, body_length * 0.3], center=true);\n    }\n}\n\n// Assemble complete weevil\nunion() {\n    weevil_body();\n    weevil_head();\n    elytra();\n    legs();\n    eyes();\n    surface_texture();\n}",
    "renders": true
  },
  {
    "animal": "whale",
    "openscad_code": "// Realistic Whale Model - Medium Complexity\n// Designed for 3D printing with no overhangs\n\nmodule whale_body() {\n    // Main body - elongated ellipsoid\n    scale([1.5, 1, 0.8])\n    sphere(r=20, $fn=50);\n}\n\nmodule whale_head() {\n    // Head section - slightly flattened sphere\n    translate([-25, 0, 0])\n    scale([1.2, 1, 0.7])\n    sphere(r=15, $fn=40);\n}\n\nmodule whale_tail() {\n    // Tail base\n    translate([35, 0, 0])\n    rotate([0, 90, 0])\n    cylinder(h=15, r1=8, r2=0, $fn=30);\n    \n    // Tail flukes - two flattened ellipsoids\n    translate([42, 0, 0])\n    rotate([0, 90, 0])\n    scale([2, 0.2, 1])\n    sphere(r=8, $fn=20);\n    \n    translate([42, 0, 0])\n    rotate([0, 90, 0])\n    rotate([0, 0, 90])\n    scale([2, 0.2, 1])\n    sphere(r=8, $fn=20);\n}\n\nmodule blowhole() {\n    // Two small cylinders for blowholes\n    for(i = [-1, 1]) {\n        translate([0, i*3, 15])\n        cylinder(h=3, r=1.5, $fn=12);\n    }\n}\n\nmodule dorsal_fin() {\n    // Curved dorsal fin\n    translate([10, 0, 12])\n    rotate([0, 10, 0])\n    linear_extrude(height=0.5)\n    polygon(points=[\n        [0, 0],\n        [-5, 8],\n        [-2, 12],\n        [2, 12],\n        [5, 8],\n        [0, 0]\n    ]);\n}\n\nmodule pectoral_fin() {\n    // Pectoral fin shape\n    difference() {\n        scale([1.5, 1, 0.3])\n        sphere(r=8, $fn=30);\n        \n        // Remove inner part for fin shape\n        translate([2, 0, 0])\n        scale([1.2, 0.8, 0.4])\n        sphere(r=8, $fn=30);\n    }\n}\n\nmodule eye() {\n    // Eye socket\n    difference() {\n        sphere(r=2, $fn=20);\n        translate([1, 0, 0])\n        sphere(r=1.8, $fn=20);\n    }\n}\n\nmodule whale() {\n    union() {\n        // Main body parts\n        whale_body();\n        whale_head();\n        whale_tail();\n        \n        // Blowhole on back\n        blowhole();\n        \n        // Dorsal fin\n        dorsal_fin();\n        \n        // Pectoral fins\n        translate([-5, 15, -8])\n        rotate([0, 0, -30])\n        pectoral_fin();\n        \n        translate([-5, -15, -8])\n        rotate([0, 0, 30])\n        mirror([0, 1, 0])\n        pectoral_fin();\n        \n        // Eyes\n        translate([-20, 8, 5])\n        eye();\n        \n        translate([-20, -8, 5])\n        eye();\n        \n        // Mouth line\n        translate([-25, 0, -8])\n        scale([1, 0.8, 0.1])\n        cylinder(h=0.5, r=10, $fn=30);\n    }\n}\n\n// Scale to 80mm length\nscale(0.8)\nwhale();",
    "renders": true
  },
  {
    "animal": "wheatear",
    "openscad_code": "// Wheat ear - realistic style, medium complexity\n// Designed for 3D printing with no overhangs\n\n$fn = 20; // Resolution for curved surfaces\n\n// Main wheat ear module\nmodule wheat_ear() {\n    // Central stem\n    color(\"goldenrod\")\n    stem();\n    \n    // Spikelets along the ear\n    spikelets();\n    \n    // Awns (bristles)\n    awns();\n}\n\n// Create the main stem\nmodule stem() {\n    // Bottom thick part\n    cylinder(h = 30, r1 = 2, r2 = 1.5, center = false);\n    \n    // Middle section\n    translate([0, 0, 30])\n    cylinder(h = 25, r1 = 1.5, r2 = 1.2, center = false);\n    \n    // Top tapering section\n    translate([0, 0, 55])\n    cylinder(h = 20, r1 = 1.2, r2 = 0.8, center = false);\n}\n\n// Create spikelets (grain clusters)\nmodule spikelets() {\n    // Parameters for positioning\n    total_spikelets = 20;\n    ear_length = 75;\n    \n    for (i = [0:total_spikelets-1]) {\n        // Calculate position along the ear\n        height = (i * ear_length) / (total_spikelets - 1);\n        radius = max(0.3, 2 - (height / 40)); // Tapering towards top\n        \n        // Alternate left and right\n        angle = (i % 2 == 0) ? 30 : -30;\n        \n        translate([0, 0, height])\n        rotate([0, 0, angle])\n        translate([radius, 0, 0])\n        single_spikelet();\n    }\n}\n\n// Individual spikelet\nmodule single_spikelet() {\n    // Main grain body\n    color(\"wheat\")\n    union() {\n        // Central grain\n        sphere(r = 1.2);\n        \n        // Side grains\n        translate([0.8, 0, 0.3])\n        rotate([0, 20, 0])\n        sphere(r = 0.9);\n        \n        translate([-0.8, 0, 0.3])\n        rotate([0, -20, 0])\n        sphere(r = 0.9);\n        \n        translate([0, 0.8, 0.3])\n        rotate([20, 0, 0])\n        sphere(r = 0.8);\n        \n        translate([0, -0.8, 0.3])\n        rotate([-20, 0, 0])\n        sphere(r = 0.8);\n    }\n}\n\n// Create awns (bristles)\nmodule awns() {\n    total_awns = 30;\n    ear_length = 75;\n    \n    for (i = [0:total_awns-1]) {\n        height = (i * ear_length) / (total_awns - 1);\n        radius = max(0.3, 2 - (height / 40));\n        \n        // Distribute awns around the stem\n        angle = (i * 137.5) % 360; // Golden angle for natural distribution\n        \n        translate([0, 0, height])\n        rotate([0, 0, angle])\n        translate([radius, 0, 0])\n        rotate([0, 20, 0])\n        single_awn();\n    }\n}\n\n// Single awn (bristle)\nmodule single_awn() {\n    // Tapered bristle\n    color(\"goldenrod\")\n    cylinder(h = 15, r1 = 0.15, r2 = 0.05, center = false);\n}\n\n// Create the wheat ear\nwheat_ear();",
    "renders": true
  },
  {
    "animal": "whimbrel",
    "openscad_code": "// Whimbrel - medium complexity realistic style\n\n// Overall size control\nscale_factor = 1;  // Adjustable for different print sizes\nbody_length = 50 * scale_factor;\nbody_height = 25 * scale_factor;\nhead_size = 12 * scale_factor;\nbeak_length = 35 * scale_factor;\nleg_length = 20 * scale_factor;\n\n// Main body assembly\nmodule whimbrel() {\n    // Body - elongated oval\n    translate([0, 0, leg_length + body_height/2])\n    scale([1.5, 1, 1])\n    sphere(d=body_height);\n    \n    // Neck connection\n    translate([body_length/3, 0, leg_length + body_height*0.8])\n    rotate([30, 0, 0])\n    cylinder(h=head_size, d1=body_height*0.7, d2=head_size*0.8);\n    \n    // Head\n    translate([body_length/2 + head_size, 0, leg_length + body_height*1.2])\n    sphere(d=head_size);\n    \n    // Beak - curved downward\n    translate([body_length/2 + head_size + beak_length/2, 0, leg_length + body_height*1.1])\n    rotate([0, 0, -20])\n    scale([1, 0.3, 0.3])\n    cylinder(h=beak_length, d=head_size*0.8);\n    \n    // Beak tip\n    translate([body_length/2 + head_size + beak_length, 0, leg_length + body_height*1.0])\n    sphere(d=head_size*0.3);\n    \n    // Eye\n    translate([body_length/2 + head_size*0.8, head_size*0.4, leg_length + body_height*1.3])\n    sphere(d=head_size*0.15);\n    \n    // Wings - left and right\n    for(side = [-1, 1]) {\n        translate([0, side*body_height*0.6, leg_length + body_height*0.8])\n        rotate([0, 0, side*20])\n        scale([1.2, 0.3, 0.6])\n        sphere(d=body_height*1.2);\n    }\n    \n    // Tail\n    translate([-body_length/2, 0, leg_length + body_height*0.7])\n    rotate([20, 0, 0])\n    scale([0.8, 0.3, 0.4])\n    cylinder(h=body_height*0.8, d=body_height*0.8);\n    \n    // Legs\n    for(side = [-1, 1]) {\n        // Upper leg\n        translate([body_length/4, side*body_height*0.3, leg_length*0.7])\n        rotate([15, 0, side*10])\n        cylinder(h=leg_length*0.5, d=body_height*0.15);\n        \n        // Lower leg\n        translate([body_length/4 + 5*scale_factor, side*body_height*0.4, leg_length*0.3])\n        rotate([0, 0, side*5])\n        cylinder(h=leg_length*0.5, d=body_height*0.12);\n        \n        // Feet\n        translate([body_length/4 + 8*scale_factor, side*body_height*0.45, leg_length*0.1])\n        rotate([0, 90, 0])\n        scale([1.5, 0.3, 1])\n        sphere(d=body_height*0.25);\n        \n        // Toes\n        for(toe = [-1, 0, 1]) {\n            translate([body_length/4 + 10*scale_factor, side*body_height*0.45 + toe*body_height*0.15, leg_length*0.05])\n            rotate([0, 90, toe*20])\n            cylinder(h=body_height*0.15, d=body_height*0.08);\n        }\n    }\n    \n    // Feather texture - simple ridges\n    for(i = [0:5]) {\n        translate([-body_length/3 + i*body_length/6, 0, leg_length + body_height*0.3 + i*body_height/8])\n        scale([1.2, 0.9, 0.1])\n        sphere(d=body_height*0.9);\n    }\n}\n\n// Generate the model\nwhimbrel();",
    "renders": true
  },
  {
    "animal": "whippet",
    "openscad_code": "// Whippet - Medium complexity realistic style\n// Dimensions approximately 80mm long, 35mm tall\n\n$fn = 50;\n\nmodule leg(side=1) {\n    // Upper leg\n    translate([0, 0, 0])\n        rotate([0, 15, 0])\n        cylinder(h=20, d1=6, d2=4);\n    \n    // Lower leg\n    translate([0, 0, -20])\n        rotate([0, -30, 0])\n        cylinder(h=25, d1=4, d2=3);\n    \n    // Paw\n    translate([0, 0, -45])\n        sphere(d=4.5);\n}\n\nmodule tail() {\n    // Tail base\n    rotate([30, 0, 0])\n        cylinder(h=15, d1=6, d2=4);\n    \n    // Tail curve\n    translate([0, 0, 15])\n        rotate([45, 0, 0])\n        cylinder(h=20, d1=4, d2=2);\n    \n    // Tail tip\n    translate([0, 0, 35])\n        sphere(d=2);\n}\n\nmodule ear() {\n    // Ear shape\n    difference() {\n        scale([1, 0.3, 1.5])\n            sphere(d=8);\n        translate([-4, 0, 0])\n            cube([8, 2, 8], center=true);\n    }\n}\n\nmodule body() {\n    // Main torso\n    union() {\n        // Chest\n        translate([-5, 0, 0])\n            sphere(d=20);\n        \n        // Ribcage\n        translate([10, 0, 2])\n            scale([1.5, 1, 1.2])\n            sphere(d=18);\n        \n        // Abdomen\n        translate([25, 0, -2])\n            scale([1.2, 0.9, 0.8])\n            sphere(d=15);\n        \n        // Hip\n        translate([35, 0, 0])\n            sphere(d=12);\n    }\n}\n\nmodule head() {\n    // Skull\n    translate([0, 0, 0])\n        scale([1.8, 1, 1.2])\n        sphere(d=12);\n    \n    // Snout\n    translate([12, 0, -2])\n        scale([2, 0.7, 0.7])\n        sphere(d=8);\n    \n    // Nose\n    translate([18, 0, -3])\n        sphere(d=3);\n    \n    // Eyes\n    translate([7, 4, 2])\n        sphere(d=2);\n    translate([7, -4, 2])\n        sphere(d=2);\n}\n\n// Main model\nunion() {\n    // Body\n    translate([-10, 0, 15])\n        body();\n    \n    // Head\n    translate([-15, 0, 25])\n        rotate([0, 10, 0])\n        head();\n    \n    // Ears\n    translate([-8, 6, 30])\n        rotate([0, -30, 60])\n        ear();\n    translate([-8, -6, 30])\n        rotate([0, -30, -60])\n        mirror([0,1,0])\n        ear();\n    \n    // Tail\n    translate([40, 0, 15])\n        rotate([0, 20, 0])\n        tail();\n    \n    // Front legs\n    translate([-5, 8, 0])\n        leg();\n    translate([-5, -8, 0])\n        mirror([0,1,0])\n        leg();\n    \n    // Rear legs\n    translate([30, 7, 0])\n        rotate([0, 0, 10])\n        leg();\n    translate([30, -7, 0])\n        rotate([0, 0, -10])\n        mirror([0,1,0])\n        leg();\n}",
    "renders": true
  },
  {
    "animal": "whipray",
    "openscad_code": "// OpenSCAD Whipray model - Realistic Medium Complexity\n// Overall size ~80mm across wingspan, 3mm wall thickness\n\n$fn = 50;  // Smooth curves\n\n// Main parameters\nbody_length = 60;\nwing_span = 80;\nbody_thickness = 6;\nwing_thickness = 3;\ntail_length = 40;\ntail_thickness = 2;\n\n// Body and wings combined\nmodule whipray_body() {\n    // Central body\n    union() {\n        // Main disc-shaped body\n        scale([1.2, 1, 0.5])\n            sphere(d = body_length);\n        \n        // Wing extensions\n        for (side = [-1, 1]) {\n            translate([side * wing_span/3, 0, 0])\n                rotate([90, 0, 0])\n                    scale([0.8, 1.8, 0.1])\n                        cylinder(h = wing_thickness, d1 = wing_span/2, d2 = wing_span/3);\n        }\n        \n        // Front wing tips\n        translate([wing_span/2 - 5, 0, 0])\n            rotate([90, 0, -30])\n                scale([0.3, 0.4, 0.1])\n                    cylinder(h = wing_thickness, d1 = 15, d2 = 5);\n        \n        translate([-wing_span/2 + 5, 0, 0])\n            rotate([90, 0, 30])\n                scale([0.3, 0.4, 0.1])\n                    cylinder(h = wing_thickness, d1 = 15, d2 = 5);\n    }\n}\n\n// Tail with stinger\nmodule whipray_tail() {\n    // Tail stem\n    translate([0, -body_length/2, -body_thickness/4])\n        rotate([90, 0, 0])\n            cylinder(h = tail_length, d1 = tail_thickness * 2, d2 = tail_thickness);\n    \n    // Stinger\n    translate([0, -body_length/2 - tail_length, -body_thickness/4])\n        rotate([90, 0, 0])\n            cylinder(h = 8, d1 = tail_thickness/2, d2 = 0.1);\n}\n\n// Eyes\nmodule whipray_eyes() {\n    eye_size = 3;\n    eye_offset = body_length/4;\n    eye_height = body_thickness/2;\n    \n    for (side = [-1, 1]) {\n        translate([side * eye_offset/2, eye_offset, eye_height])\n            sphere(d = eye_size);\n    }\n}\n\n// Gills (5 slits on underside)\nmodule whipray_gills() {\n    gill_length = 8;\n    gill_width = 1.5;\n    gill_depth = 1;\n    \n    for (i = [1:5]) {\n        translate([0, body_length/3 - i * 4, -body_thickness/2 + gill_depth/2])\n            cube([gill_width, gill_length, gill_depth], center = true);\n    }\n}\n\n// Spots pattern on back\nmodule whipray_spots() {\n    spot_size = 2;\n    \n    // Random-looking pattern\n    spots = [\n        [20, 10], [-20, 8], [15, -5], [-15, -7],\n        [10, 15], [-10, 13], [25, 0], [-25, -2],\n        [0, -10], [5, 5], [-5, 3]\n    ];\n    \n    for (spot = spots) {\n        translate([spot[0], spot[1], body_thickness/2 - 0.5])\n            sphere(d = spot_size);\n    }\n}\n\n// Assemble the complete whipray\nunion() {\n    // Main body with wings\n    whipray_body();\n    \n    // Tail and stinger\n    whipray_tail();\n    \n    // Eyes on top\n    whipray_eyes();\n    \n    // Spots on back\n    whipray_spots();\n}\n\n// Gills on underside (subtracted from bottom)\ndifference() {\n    children();\n    whipray_gills();\n}",
    "renders": true
  },
  {
    "animal": "whipsnake",
    "openscad_code": "// Whipsnake (Masticophis flagellum) – medium-complexity realistic model\n// 3D-printable, ~90 mm total length, no steep overhangs\n\n// Thickness chosen for 0.4 mm nozzle / 2 perimeters\nwall = 1.6;\n\nmodule rounded_cylinder(h, r1, r2, center=false) {\n    // Helper for smooth body segments\n    cylinder(h=h, r1=r1, r2=r2, $fn=16, center=center);\n}\n\nmodule body_segment(len, r_start, r_end, twist) {\n    // Single tapered body segment with slight twist\n    rotate([twist, 0, 0])\n        rounded_cylinder(h=len, r1=r_start, r2=r_end);\n}\n\nmodule head() {\n    // Triangular head with pointed snout\n    difference() {\n        // Main head shape\n        hull() {\n            translate([-8, 0, 0]) sphere(d=3.5, $fn=12);\n            translate([8, 0, 0])  sphere(d=2.5, $fn=12);\n        }\n        // Eye sockets\n        for (y = [-2, 2])\n            translate([4, y, -1.5])\n                sphere(d=2.2, $fn=8);\n    }\n    // Eyes (simple spheres)\n    color(\"black\")\n    for (y = [-2.2, 2.2])\n        translate([4.2, y, -1.5])\n            sphere(d=1.2, $fn=6);\n}\n\nmodule forked_tongue() {\n    // Thin forked tongue\n    linear_extrude(height=0.4, center=true)\n        polygon(points=[[0,0], [-6,-1], [-12,-0.5], [-12,0.5], [-6,1]]);\n}\n\nmodule body() {\n    // Progressive taper from neck to tail\n    n = 24;                 // number of segments\n    l = 3.2;                // segment length\n    for (i = [0:n-1]) {\n        r = max(2.8 - i*0.11, 0.8);\n        translate([0, 0, -i*l])\n            body_segment(l, r, r-0.11, i*2.5);\n    }\n}\n\nmodule snake() {\n    // Assemble snake: head, neck, body\n    color(\"darkolivegreen\")\n    union() {\n        // Head\n        translate([0, 0, 0])\n            rotate([90, 0, 0])\n                head();\n        // Tongue\n        translate([9, 0, 0])\n            rotate([90, 0, 0])\n                forked_tongue();\n        // Neck transition\n        translate([0, 0, -3.5])\n            rounded_cylinder(h=6, r1=2.8, r2=2.8);\n        // Body\n        translate([0, 0, -9.5])\n            body();\n    }\n}\n\n// Position whole snake flat on bed\nrotate([0, 180, 0])\n    snake();",
    "renders": true
  },
  {
    "animal": "whistler",
    "openscad_code": "// Whistler (Train Whistle) - Realistic Style, Medium Complexity\n\n// Overall dimensions\nwhistle_length = 85;\nwhistle_width = 25;\nwhistle_height = 30;\nwall_thickness = 2;\n\n// Main body with rounded edges\nmodule whistle_body() {\n    difference() {\n        // Main block with rounded top\n        hull() {\n            // Bottom corners\n            translate([wall_thickness, wall_thickness, 0])\n                cylinder(h=whistle_height-wall_thickness, r=wall_thickness, $fn=16);\n            translate([whistle_length-wall_thickness, wall_thickness, 0])\n                cylinder(h=whistle_height-wall_thickness, r=wall_thickness, $fn=16);\n            translate([wall_thickness, whistle_width-wall_thickness, 0])\n                cylinder(h=whistle_height-wall_thickness, r=wall_thickness, $fn=16);\n            translate([whistle_length-wall_thickness, whistle_width-wall_thickness, 0])\n                cylinder(h=whistle_height-wall_thickness, r=wall_thickness, $fn=16);\n                \n            // Top corners\n            translate([wall_thickness, wall_thickness, whistle_height-wall_thickness])\n                sphere(r=wall_thickness, $fn=16);\n            translate([whistle_length-wall_thickness, wall_thickness, whistle_height-wall_thickness])\n                sphere(r=wall_thickness, $fn=16);\n            translate([wall_thickness, whistle_width-wall_thickness, whistle_height-wall_thickness])\n                sphere(r=wall_thickness, $fn=16);\n            translate([whistle_length-wall_thickness, whistle_width-wall_thickness, whistle_height-wall_thickness])\n                sphere(r=wall_thickness, $fn=16);\n        }\n        \n        // Hollow out interior\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            cube([whistle_length-2*wall_thickness, whistle_width-2*wall_thickness, whistle_height-2*wall_thickness]);\n    }\n}\n\n// Mouthpiece with curved entry\nmodule mouthpiece() {\n    difference() {\n        // Curved mouthpiece\n        hull() {\n            cylinder(h=15, r=whistle_width/2, $fn=32);\n            translate([0, 0, 15])\n                cylinder(h=10, r=whistle_width/3, $fn=32);\n        }\n        \n        // Air channel\n        translate([0, 0, -1])\n            cylinder(h=27, r=whistle_width/4, $fn=32);\n            \n        // Entry bevel\n        rotate([0, 45, 0])\n            translate([-whistle_width/2-5, 0, -whistle_width/2])\n                cube([whistle_width+10, whistle_width, whistle_width+10]);\n    }\n}\n\n// Sound holes with chamfers\nmodule sound_holes() {\n    // Parameters for 4 holes\n    hole_spacing = (whistle_length - 40) / 3;\n    hole_diameter = 6;\n    hole_depth = 10;\n    \n    for(i = [0:3]) {\n        translate([35 + i * hole_spacing, whistle_width/2, whistle_height]) {\n            // Chamfered edge\n            cylinder(h=2, r1=hole_diameter/2 + 1, r2=hole_diameter/2, $fn=32);\n            \n            // Main hole\n            translate([0, 0, 2])\n                cylinder(h=hole_depth, r=hole_diameter/2, $fn=32);\n                \n            // Exit hole\n            translate([0, 0, 2+hole_depth])\n                cylinder(h=1, r=hole_diameter/2 + 0.5, $fn=32);\n        }\n    }\n}\n\n// Air splitter wedge\nmodule air_splitter() {\n    translate([25, whistle_width/2 - 1, wall_thickness*2]) {\n        rotate([0, 90, 0])\n            cylinder(h=2, r1=0, r2=whistle_height/3, $fn=3);\n    }\n}\n\n// Assembly\nunion() {\n    whistle_body();\n    \n    // Mouthpiece at end\n    translate([0, whistle_width/2, whistle_height/2 - 12])\n        rotate([0, 90, 0])\n            mouthpiece();\n            \n    // Sound holes on top\n    sound_holes();\n    \n    // Air splitter inside\n    air_splitter();\n    \n    // Decorative ridges\n    for(ridge = [1:3]) {\n        translate([ridge * 20, 0, whistle_height - 3])\n            cube([2, whistle_width, 1]);\n    }\n    \n    // Hanging loop\n    translate([whistle_length/2, whistle_width, whistle_height])\n        union() {\n            rotate([90, 0, 0])\n                cylinder(h=10, r=2, $fn=16);\n            translate([0, 0, 10])\n                sphere(r=2, $fn=16);\n        }\n}",
    "renders": true
  },
  {
    "animal": "whitefish",
    "openscad_code": "// Whitefish model - 3D printable with medium complexity\n// Overall length ~80mm, height ~25mm\n\nmodule fish_body() {\n    // Main body - ellipsoid shape\n    scale([1.6, 0.6, 0.5]) sphere(d=50, $fn=32);\n}\n\nmodule fish_head() {\n    // Head section - elongated sphere\n    translate([40, 0, 0])\n        scale([1.2, 0.9, 0.9]) sphere(d=25, $fn=32);\n    \n    // Snout protrusion\n    translate([50, 0, 0])\n        scale([1.5, 0.4, 0.4]) sphere(d=10, $fn=16);\n}\n\nmodule tail_fin() {\n    // Main tail\n    translate([-40, 0, 0])\n        rotate([0, 0, 0])\n        scale([1, 2, 0.2])\n        union() {\n            cube([15, 20, 2]);\n            translate([0, 10, 0]) rotate([0, 0, -20]) \n                scale([1, 0.8, 1]) cube([15, 10, 2]);\n            translate([0, -10, 0]) rotate([0, 0, 20]) \n                scale([1, 0.8, 1]) cube([15, 10, 2]);\n        }\n}\n\nmodule dorsal_fin() {\n    // Main dorsal fin along back\n    for(i = [20:-10:-20]) {\n        translate([i, 0, 12])\n            rotate([0, 10, 0])\n            scale([0.3, 1, 2])\n            cylinder(h=8, d1=3, d2=1);\n    }\n    \n    // Smaller adipose fin\n    translate([-15, 0, 12])\n        scale([0.5, 1, 0.8])\n        sphere(d=6);\n}\n\nmodule pectoral_fin() {\n    // Side fins\n    translate([20, 15, -5])\n        rotate([0, 0, -30])\n        scale([0.3, 1.5, 0.1])\n        cube([15, 10, 2]);\n    \n    mirror([0,1,0])\n        translate([20, 15, -5])\n            rotate([0, 0, -30])\n            scale([0.3, 1.5, 0.1])\n            cube([15, 10, 2]);\n}\n\nmodule pelvic_fin() {\n    // Lower fins\n    translate([5, 8, -8])\n        rotate([0, 0, 45])\n        scale([0.3, 1, 0.1])\n        cube([12, 8, 2]);\n    \n    mirror([0,1,0])\n        translate([5, 8, -8])\n            rotate([0, 0, 45])\n            scale([0.3, 1, 0.1])\n            cube([12, 8, 2]);\n}\n\nmodule eye() {\n    // Eye sockets\n    translate([42, 6, 5])\n        sphere(d=4);\n    translate([42, -6, 5])\n        sphere(d=4);\n    \n    // Eyeballs\n    translate([42.5, 6, 5])\n        sphere(d=3);\n    translate([42.5, -6, 5])\n        sphere(d=3);\n}\n\nmodule mouth() {\n    // Mouth opening\n    translate([48, 0, -2])\n        rotate([0, 0, 0])\n        scale([0.5, 0.8, 0.3])\n        cube([8, 5, 3]);\n}\n\n// Main assembly\nunion() {\n    fish_body();\n    fish_head();\n    tail_fin();\n    dorsal_fin();\n    pectoral_fin();\n    pelvic_fin();\n    eye();\n    mouth();\n}",
    "renders": true
  },
  {
    "animal": "whiteye",
    "openscad_code": "// Whiteye OpenSCAD model - realistic medium complexity\n// Scale: ~70mm tall when printed\n\n$fn = 60;  // Smooth curves for realistic look\n\n// Main body parameters\nbody_radius = 20;\nbody_height = 35;\nhead_radius = 18;\n\n// Eye parameters\neye_radius = 8;\npupil_radius = 4;\niris_radius = 6;\n\n// Beak parameters\nbeak_length = 12;\nbeak_height = 5;\nbeak_width = 4;\n\n// Wing parameters\nwing_span = 30;\nwing_thickness = 2;\nwing_height = 15;\n\n// Leg parameters\nleg_length = 12;\nleg_width = 3;\nfoot_length = 8;\nfoot_width = 5;\n\nmodule body() {\n    // Main elliptical body\n    scale([1, 0.8, 1.3])\n        sphere(r=body_radius);\n}\n\nmodule head() {\n    // Rounded head with slight flattening on top\n    translate([0, 0, body_height * 0.8])\n        scale([1, 1.1, 0.9])\n            sphere(r=head_radius);\n}\n\nmodule eye(side) {\n    // Eye with iris and pupil\n    translate([side * head_radius * 0.6, 0, body_height * 0.8 + head_radius * 0.7]) {\n        // White of eye\n        color(\"white\")\n            sphere(r=eye_radius);\n        \n        // Iris\n        color([0.2, 0.5, 0.8])\n            translate([0, 0, eye_radius - 0.5])\n                sphere(r=iris_radius);\n        \n        // Pupil\n        color(\"black\")\n            translate([0, 0, eye_radius - 0.2])\n                sphere(r=pupil_radius);\n        \n        // Eyelid ridge\n        difference() {\n            translate([0, 0, eye_radius * 0.8])\n                scale([1.1, 0.6, 0.4])\n                    sphere(r=eye_radius);\n            translate([0, 0, eye_radius * 0.8])\n                scale([1.2, 0.7, 0.5])\n                    sphere(r=eye_radius);\n        }\n    }\n}\n\nmodule beak() {\n    // Conical beak with curved top\n    translate([0, -head_radius * 1.2, body_height * 0.8 - head_radius * 0.3]) {\n        rotate([0, 90, 0])\n            cylinder(h=beak_length, r1=beak_width/2, r2=0.5);\n        \n        // Upper beak curve\n        translate([0, 0, beak_height/2])\n            rotate([0, 90, 0])\n                cylinder(h=beak_length, r1=beak_width/2.5, r2=0.3);\n    }\n}\n\nmodule wing(side) {\n    // Curved wing with feather texture\n    translate([side * body_radius * 0.9, 0, body_height * 0.3]) {\n        rotate([0, side * 20, 0]) {\n            // Main wing shape\n            scale([0.8, 1, 0.3])\n                rotate([0, 0, side * -20])\n                    difference() {\n                        // Wing base\n                        cylinder(h=wing_thickness, r1=wing_span/2, r2=wing_span/3);\n                        \n                        // Wing tip cut\n                        translate([side * wing_span/3, 0, 0])\n                            rotate([90, 0, 0])\n                                cylinder(h=wing_span/2, r=wing_span/3);\n                    }\n            \n            // Feather details\n            for(i = [1:3]) {\n                translate([side * i * 5, 0, -wing_thickness/2])\n                    rotate([0, 0, side * -10 * i])\n                        cube([8, wing_span/4, wing_thickness/2], center=true);\n            }\n        }\n    }\n}\n\nmodule tail() {\n    // Fan-shaped tail\n    translate([0, body_radius * 0.7, body_height * 0.1]) {\n        rotate([90, 0, 0]) {\n            difference() {\n                cylinder(h=12, r1=8, r2=12);\n                translate([0, 0, -1])\n                    cylinder(h=14, r1=6, r2=10);\n            }\n            \n            // Tail feathers\n            for(i = [-30:15:30]) {\n                rotate([0, 0, i])\n                    translate([10, 0, 6])\n                        cube([4, 1, 8]);\n            }\n        }\n    }\n}\n\nmodule leg(side) {\n    // Scaled leg with webbed foot\n    translate([side * body_radius * 0.5, -body_radius * 0.6, -body_height * 0.3]) {\n        // Upper leg\n        cylinder(h=leg_length * 0.6, r=leg_width/2);\n        \n        // Knee joint\n        translate([0, 0, -leg_length * 0.6])\n            sphere(r=leg_width/2);\n        \n        // Lower leg\n        translate([side * 1, -1, -leg_length * 0.6])\n            rotate([15, 0, 0])\n                cylinder(h=leg_length * 0.4, r=leg_width/2);\n        \n        // Webbed foot\n        translate([side * 2, -foot_length/2 - 1, -leg_length - 1])\n            difference() {\n                // Main foot\n                scale([1, 1.5, 0.4])\n                    sphere(r=foot_width/2);\n                \n                // Web cutouts\n                for(j = [1, 2]) {\n                    translate([j * 2 - 3, foot_length/2 - 2, 0])\n                        rotate([90, 0, 0])\n                            cylinder(h=2, r=1);\n                }\n            }\n        \n        // Toes\n        for(k = [-1:1]) {\n            translate([k * 2, -foot_length, -leg_length - 1])\n                cube([1.5, 3, 0.5]);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    color([0.95, 0.95, 0.9]) {\n        body();\n        head();\n    }\n    \n    color(\"orange\") {\n        beak();\n    }\n    \n    wing(-1);  // Left wing\n    wing(1);   // Right wing\n    \n    tail();\n    \n    leg(-1);   // Left leg\n    leg(1);    // Right leg\n    \n    eye(-1);   // Left eye\n    eye(1);    // Right eye\n}",
    "renders": true
  },
  {
    "animal": "whydah",
    "openscad_code": "// Whydah bird - realistic medium complexity\n// Overall dimensions: ~75mm length\n\n// Main body\nmodule body() {\n    union() {\n        // Central torso\n        translate([0, 0, 5]) \n            scale([1.2, 0.8, 1])\n            sphere(d=20);\n        \n        // Chest\n        translate([8, 0, 0])\n            scale([1.5, 1, 1.2])\n            sphere(d=15);\n        \n        // Abdomen\n        translate([-8, 0, -2])\n            scale([0.8, 0.7, 1])\n            sphere(d=16);\n    }\n}\n\n// Head with beak and crest\nmodule head() {\n    union() {\n        // Main head sphere\n        translate([15, 0, 15])\n            sphere(d=12);\n        \n        // Beak\n        translate([20, 0, 15])\n            rotate([0, -10, 0])\n            scale([2, 0.3, 0.3])\n            cylinder(h=8, d1=3, d2=0);\n        \n        // Crest feathers\n        for(i = [0:3]) {\n            translate([12, -3 + i*2, 20])\n                rotate([0, 10 - i*5, 0])\n                scale([0.2, 1, 2])\n                cylinder(h=6, d=2);\n        }\n    }\n}\n\n// Wing module\nmodule wing(side) {\n    mirror([side, 0, 0]) {\n        // Primary wing shape\n        translate([0, -15, 5])\n            rotate([0, 0, -20])\n            scale([1, 2.5, 0.3])\n            cylinder(h=25, d1=8, d2=3);\n        \n        // Secondary feathers\n        for(i = [0:4]) {\n            translate([-2 - i*3, -20 - i*2, 3])\n                rotate([0, 0, -30 + i*5])\n                scale([0.8 - i*0.1, 1.2, 0.2])\n                cylinder(h=10 - i, d=6 - i);\n        }\n    }\n}\n\n// Tail with long streamers\nmodule tail() {\n    union() {\n        // Tail base\n        translate([-15, 0, 0])\n            scale([1, 0.5, 0.3])\n            cylinder(h=10, d=8);\n        \n        // Central tail feathers\n        for(i = [0:2]) {\n            translate([-20, -3 + i*3, 0])\n                rotate([0, 0, -10 + i*10])\n                cylinder(h=30, d1=3, d2=1);\n        }\n        \n        // Long streamers (male characteristic)\n        translate([-22, -2, 0])\n            rotate([0, 0, -15])\n            cylinder(h=45, d1=2, d2=0.5);\n        \n        translate([-22, 2, 0])\n            rotate([0, 0, 15])\n            cylinder(h=45, d1=2, d2=0.5);\n    }\n}\n\n// Legs and feet\nmodule legs() {\n    for(side = [-1, 1]) {\n        translate([0, side*3, -5]) {\n            // Upper leg\n            translate([0, 0, 0])\n                rotate([20, 0, 0])\n                cylinder(h=8, d=2);\n            \n            // Lower leg\n            translate([0, 0, -9])\n                rotate([30, 0, 0])\n                cylinder(h=10, d=1.5);\n            \n            // Foot\n            translate([0, side*2, -19])\n                rotate([0, 90, 0])\n                scale([1, 0.3, 0.3])\n                cylinder(h=6, d=2);\n            \n            // Toes\n            for(i = [0:2]) {\n                translate([2 + i*2, side*(2 + i), -19])\n                    rotate([0, 90, -10 + i*10])\n                    scale([0.7, 0.3, 0.3])\n                    cylinder(h=4, d=1);\n            }\n        }\n    }\n}\n\n// Eyes\nmodule eyes() {\n    for(side = [-1, 1]) {\n        translate([17.5, side*3, 16])\n            sphere(d=2);\n        \n        // Pupil\n        translate([18, side*3.2, 16])\n            sphere(d=1);\n    }\n}\n\n// Assemble the bird\nunion() {\n    body();\n    head();\n    eyes();\n    wing(1);  // Right wing\n    wing(-1); // Left wing\n    tail();\n    legs();\n}",
    "renders": true
  },
  {
    "animal": "wigeon",
    "openscad_code": "// Wigeon Duck - Realistic Medium Complexity\n// Size: ~70mm length\n\n$fn = 32;\n\nmodule duck() {\n    // Body - elongated ellipsoid\n    scale([1.3, 1, 0.8]) sphere(20);\n    \n    // Chest protrusion\n    translate([5, 0, -5]) scale([0.8, 0.9, 0.6]) sphere(15);\n    \n    // Back arch\n    translate([-10, 0, 5]) scale([1.2, 1, 0.5]) sphere(10);\n    \n    // Tail\n    difference() {\n        translate([-25, 0, 0]) rotate([0, -10, 0]) scale([2, 0.8, 0.3]) cube([10, 12, 8]);\n        translate([-30, 0, 5]) sphere(8);\n    }\n    \n    // Neck\n    translate([15, 0, 8]) rotate([30, 0, 0]) cylinder(h=12, r1=6, r2=4);\n    \n    // Head\n    translate([20, 0, 18]) sphere(10);\n    \n    // Bill\n    color(\"orange\") {\n        translate([28, 0, 15]) rotate([0, -20, 0]) scale([1.5, 0.4, 0.4]) cylinder(h=12, r1=3, r2=0);\n        \n        // Bill ridge\n        translate([30, 0, 16.5]) rotate([0, -20, 0]) scale([0.8, 0.2, 0.1]) cube([8, 3, 1]);\n    }\n    \n    // Eyes\n    color(\"black\") {\n        for(side = [-1, 1]) {\n            translate([21, side*4, 19]) sphere(1.5);\n        }\n    }\n    \n    // Wing\n    difference() {\n        color(\"darkgreen\") {\n            translate([-5, 12, 5]) rotate([0, 0, -10]) scale([1.2, 0.3, 0.8]) sphere(15);\n        }\n        \n        // Wing detail lines\n        for(i = [0:2]) {\n            translate([-10 + i*5, 12.5, 2 + i*3]) rotate([0, 0, 45]) scale([0.1, 0.1, 1]) cube([15, 1, 0.5]);\n        }\n    }\n    \n    // Other wing\n    mirror([0,1,0]) {\n        difference() {\n            color(\"darkgreen\") {\n                translate([-5, 12, 5]) rotate([0, 0, -10]) scale([1.2, 0.3, 0.8]) sphere(15);\n            }\n        }\n    }\n    \n    // Legs\n    color(\"orange\") {\n        for(side = [-1, 1]) {\n            // Upper leg\n            translate([5, side*8, -10]) rotate([0, 0, 15*side]) cylinder(h=10, r=2);\n            \n            // Lower leg\n            translate([5 + side*2, side*10, -18]) rotate([0, 0, 15*side]) cylinder(h=8, r=1.5);\n            \n            // Webbed foot\n            translate([5 + side*3, side*12, -25]) {\n                scale([1, 0.3, 0.1]) sphere(5);\n                for(toe = [-1, 0, 1]) {\n                    translate([toe*3, 0, 0]) scale([0.8, 0.2, 0.05]) cube([4, 2, 1]);\n                }\n            }\n        }\n    }\n    \n    // Head coloring - cream stripe\n    color(\"wheat\") {\n        translate([22, 0, 20]) rotate([0, 20, 0]) scale([1.2, 2, 0.3]) sphere(5);\n    }\n    \n    // Green head patch\n    color(\"green\") {\n        translate([20, 0, 22]) scale([1.5, 1.8, 0.5]) sphere(4);\n    }\n    \n    // White belly\n    color(\"white\") {\n        translate([0, 0, -15]) scale([1.1, 0.9, 0.3]) sphere(15);\n    }\n}\n\n// Position duck standing\nrotate([0, 0, 0]) duck();",
    "renders": true
  },
  {
    "animal": "wildcat",
    "openscad_code": "// Wildcat - Realistic Style, Medium Complexity\n// Designed for 3D printing with no overhangs\n// Approximate size: 80mm long x 35mm high\n\n// Overall scale factor\nscale_factor = 0.8;\n\n// Basic dimensions (mm)\nbody_length = 60;\nbody_height = 25;\nbody_width = 20;\n\n// Position the entire model\ntranslate([0, 0, 0]) scale(scale_factor) {\n\n    // Main body\n    module body() {\n        // Torso - ellipsoid shape\n        translate([0, 0, body_height/2]) \n            scale([1, 0.8, 0.6])\n            sphere(d=body_width);\n\n        // Rear hip\n        translate([-body_length/3, 0, 0])\n            rotate([0, 30, 0])\n            scale([1.2, 1, 0.8])\n            sphere(d=body_width);\n\n        // Chest\n        translate([body_length/3, 0, 0])\n            scale([1.1, 0.9, 0.9])\n            sphere(d=body_width*1.1);\n    }\n\n    // Head with ears\n    module head() {\n        // Main head shape\n        translate([body_length/2 + 8, 0, body_height + 5])\n            scale([1.2, 1, 0.9])\n            sphere(d=18);\n\n        // Snout\n        translate([body_length/2 + 15, 0, body_height + 3])\n            scale([1.5, 0.6, 0.6])\n            sphere(d=8);\n\n        // Ears - triangular prisms\n        for(side = [-1, 1]) {\n            translate([body_length/2 + 4, side*7, body_height + 12])\n                rotate([0, side*10, 0])\n                cylinder(h=8, r1=3, r2=0.5);\n        }\n\n        // Eyes\n        for(side = [-1, 1]) {\n            translate([body_length/2 + 10, side*5, body_height + 8])\n                sphere(d=3);\n        }\n\n        // Nose\n        translate([body_length/2 + 18, 0, body_height + 3])\n            sphere(d=2);\n    }\n\n    // Legs - simple cylinders\n    module legs() {\n        positions = [\n            [body_length/3, body_width/2, 0],   // Front right\n            [body_length/3, -body_width/2, 0],  // Front left\n            [-body_length/3, body_width/2, 0],  // Rear right\n            [-body_length/3, -body_width/2, 0]  // Rear left\n        ];\n\n        for(pos = positions) {\n            translate(pos)\n                rotate([-90, 0, 0])\n                cylinder(h=15, r=3);\n            \n            // Paw\n            translate([pos[0], pos[1], -15])\n                sphere(d=6);\n        }\n    }\n\n    // Tail\n    module tail() {\n        hull() {\n            translate([-body_length/2 - 5, 0, body_height/2])\n                sphere(d=6);\n            \n            translate([-body_length/2 - 25, 0, body_height/2 + 5])\n                rotate([0, -30, 0])\n                sphere(d=4);\n            \n            translate([-body_length/2 - 35, 0, body_height/2 + 8])\n                rotate([0, -45, 0])\n                sphere(d=2);\n        }\n    }\n\n    // Combine all parts\n    union() {\n        body();\n        head();\n        legs();\n        tail();\n    }\n\n    // Cut underside flat for printing\n    translate([0, 0, -15])\n        cube([100, 100, 15], center=true);\n}",
    "renders": true
  },
  {
    "animal": "wildebeest",
    "openscad_code": "// Wildebeest - medium complexity, realistic style\n// Overall length ~80 mm\n\n// Body parameters\nbody_len = 45;\nbody_h = 25;\nbody_w = 18;\n\n// Head parameters\nhead_len = 15;\nhead_h = 12;\nhead_w = 9;\n\n// Leg parameters\nleg_h = 28;\nleg_r = 3;\n\n// Horn parameters\nhorn_len = 10;\nhorn_r = 1.5;\n\n// Tail parameters\ntail_len = 12;\ntail_r = 1;\n\nmodule torso() {\n    // Main body\n    union() {\n        // Chest and abdomen\n        hull() {\n            translate([-body_len/2, 0, 0])\n                scale([1.2, 1.1, 0.9])\n                sphere(d = body_w);\n            translate([body_len/2, 0, 0])\n                scale([0.8, 0.9, 0.7])\n                sphere(d = body_w);\n        }\n        \n        // Back hump\n        translate([body_len/4, 0, body_h/2])\n            scale([1, 1.2, 0.8])\n            sphere(d = body_w * 0.9);\n            \n        // Underbelly\n        translate([0, 0, -body_h/2 + 2])\n            scale([1.1, 1, 0.4])\n            sphere(d = body_w);\n    }\n}\n\nmodule head() {\n    // Main head shape\n    union() {\n        // Skull\n        translate([body_len/2 + head_len/2, 0, body_h/2 - 2])\n            scale([1.3, 1, 1.1])\n            sphere(d = head_w);\n            \n        // Muzzle\n        translate([body_len/2 + head_len, 0, body_h/2 - 4])\n            scale([1.5, 0.8, 0.6])\n            sphere(d = head_w * 0.8);\n            \n        // Neck\n        hull() {\n            translate([body_len/2, 0, body_h/2 - 3])\n                sphere(d = head_w * 1.2);\n            translate([body_len/2 + head_len/2, 0, body_h/2 - 2])\n                sphere(d = head_w * 0.9);\n        }\n    }\n}\n\nmodule horns() {\n    // Left horn\n    translate([body_len/2 + head_len, -head_w/3, body_h/2 + 2])\n        rotate([0, 30, -15])\n        cylinder(h = horn_len, r1 = horn_r, r2 = 0.5);\n        \n    // Right horn\n    translate([body_len/2 + head_len, head_w/3, body_h/2 + 2])\n        rotate([0, 30, 15])\n        cylinder(h = horn_len, r1 = horn_r, r2 = 0.5);\n        \n    // Horn bases\n    for (i = [-1, 1]) {\n        translate([body_len/2 + head_len - 2, i * head_w/3, body_h/2])\n            sphere(d = horn_r * 3);\n    }\n}\n\nmodule legs() {\n    // Generate all four legs\n    for (side = [-1, 1]) {\n        // Front leg\n        translate([body_len/3 - 5, side * (body_w/2 + leg_r), -body_h/2])\n            rotate([5, 0, 0])\n            cylinder(h = leg_h, r = leg_r);\n            \n        // Back leg\n        translate([-body_len/3 + 5, side * (body_w/2 + leg_r), -body_h/2])\n            rotate([5, 0, 0])\n            cylinder(h = leg_h, r = leg_r);\n            \n        // Hooves\n        translate([body_len/3 - 5, side * (body_w/2 + leg_r), -body_h/2 - leg_h])\n            cylinder(h = 2, r1 = leg_r, r2 = leg_r * 0.7);\n        translate([-body_len/3 + 5, side * (body_w/2 + leg_r), -body_h/2 - leg_h])\n            cylinder(h = 2, r1 = leg_r, r2 = leg_r * 0.7);\n    }\n}\n\nmodule tail() {\n    // Tail base\n    translate([-body_len/2, 0, -body_h/2 + 5])\n        sphere(d = tail_r * 3);\n        \n    // Tail tuft\n    translate([-body_len/2 - tail_len, 0, -body_h/2 + 5])\n        sphere(d = tail_r * 4);\n        \n    // Tail connection\n    hull() {\n        translate([-body_len/2, 0, -body_h/2 + 5])\n            sphere(d = tail_r * 2);\n        translate([-body_len/2 - tail_len, 0, -body_h/2 + 5])\n            sphere(d = tail_r * 3);\n    }\n}\n\nmodule ears() {\n    // Left ear\n    translate([body_len/2 + head_len - 2, -head_w/2, body_h/2 + 4])\n        rotate([0, 20, -20])\n        scale([0.5, 1, 2])\n        sphere(d = head_w * 0.4);\n        \n    // Right ear\n    translate([body_len/2 + head_len - 2, head_w/2, body_h/2 + 4])\n        rotate([0, 20, 20])\n        scale([0.5, 1, 2])\n        sphere(d = head_w * 0.4);\n}\n\n// Assemble the wildebeest\nunion() {\n    torso();\n    head();\n    horns();\n    legs();\n    tail();\n    ears();\n}",
    "renders": true
  },
  {
    "animal": "willet",
    "openscad_code": "// Willet (medium complexity, realistic style)\n// Approx 70 mm long, 30 mm tall\n// 3D-printable with modest overhangs and 1 mm walls\n\nmodule body() {\n    // Main torso ellipsoid\n    scale([1, 0.7, 0.5])\n        sphere(d=25, $fn=32);\n}\n\nmodule neck() {\n    translate([-7, 0, 8])\n        rotate([0, 10, 0])\n            scale([0.7, 0.7, 1.8])\n                cylinder(d1=6, d2=4, h=12, $fn=16);\n}\n\nmodule head() {\n    translate([-13, 0, 20])\n        rotate([0, 15, 0])\n            scale([1, 0.6, 0.5])\n                sphere(d=10, $fn=32);\n}\n\nmodule beak() {\n    translate([-18, 0, 20.5])\n        rotate([0, -15, 0])\n            scale([1.5, 0.3, 0.2])\n                cylinder(d1=2, d2=0.5, h=12, $fn=8);\n}\n\nmodule eye() {\n    translate([-16, 2.8, 21])\n        sphere(d=1.5, $fn=12);\n}\n\nmodule tail() {\n    // Fan-shaped tail with slight upward angle\n    translate([11, 0, 7])\n        rotate([0, -20, 0])\n            scale([1, 0.2, 0.5])\n                cylinder(d1=12, d2=18, h=8, $fn=32);\n}\n\nmodule wing() {\n    // Left wing\n    translate([0, 0, 10])\n        rotate([0, 10, 0])\n            scale([0.9, 2, 0.15])\n                sphere(d=25, $fn=32);\n}\n\nmodule leg(side) {\n    translate([0, side*3, 0]) {\n        // Upper leg\n        rotate([0, 15, 0])\n            cylinder(d=2, h=8, $fn=12);\n        // Lower leg\n        translate([0, 0, -8])\n            rotate([0, 15, 0])\n                cylinder(d=1.5, h=12, $fn=12);\n        // Foot\n        translate([0, 0, -20])\n            rotate([90, 0, 0])\n                cylinder(d1=1.5, d2=3, h=8, $fn=12);\n    }\n}\n\nmodule feather_pattern() {\n    // Simple engraved lines on wings and tail\n    difference() {\n        children();\n        // Wing lines\n        for (i = [-30:10:30]) {\n            translate([0, i, 10.5])\n                rotate([0, 10, 0])\n                    scale([0.85, 0.05, 0.05])\n                        cube([25, 1, 1]);\n        }\n        // Tail lines\n        for (i = [-6:2:6]) {\n            translate([11, i, 7.5])\n                rotate([0, -20, 0])\n                    scale([0.05, 0.05, 1])\n                        cube([1, 1, 8]);\n        }\n    }\n}\n\nmodule willet() {\n    union() {\n        body();\n        neck();\n        head();\n        beak();\n        eye();\n        tail();\n        \n        // Wings with feather texture\n        feather_pattern() wing();\n        feather_pattern() mirror([0,1,0]) wing();\n        \n        // Legs\n        leg(1);\n        leg(-1);\n    }\n}\n\n// Scale to desired print size\nscale([2.5, 2.5, 2.5])\n    willet();",
    "renders": true
  },
  {
    "animal": "wolf",
    "openscad_code": "// Wolf model - realistic style, medium complexity\n// Scaled to fit within 50-100mm, 3D printable\n\n// Overall scale factor\nscale_factor = 0.4;\n\n// Main wolf module\nmodule wolf() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        union() {\n            // Body\n            body();\n            \n            // Head\n            translate([-15, 0, 18]) rotate([0, 10, 0]) head();\n            \n            // Legs\n            leg_assembly();\n            \n            // Tail\n            translate([20, 0, 15]) rotate([0, -20, 0]) tail();\n        }\n    }\n}\n\n// Wolf body\nmodule body() {\n    // Main torso\n    hull() {\n        translate([0, 0, 15]) sphere(r=10, $fn=20);\n        translate([10, 0, 15]) sphere(r=8, $fn=20);\n    }\n    \n    // Chest\n    translate([-10, 0, 12]) scale([1.2, 1, 1]) sphere(r=8, $fn=20);\n    \n    // Back ridge\n    for(i = [-5:5:10]) {\n        translate([i, 0, 22]) cylinder(h=5, r1=3, r2=2, $fn=8);\n    }\n}\n\n// Wolf head\nmodule head() {\n    // Main head shape\n    hull() {\n        sphere(r=7, $fn=20);\n        translate([0, 0, 5]) sphere(r=5, $fn=20);\n    }\n    \n    // Snout\n    hull() {\n        translate([0, 0, 0]) sphere(r=5, $fn=20);\n        translate([8, 0, -1]) sphere(r=3, $fn=20);\n    }\n    \n    // Ears\n    for(side = [-1, 1]) {\n        translate([-2, side*5, 7]) rotate([0, side*10, 0]) \n            cylinder(h=8, r1=2, r2=1, $fn=8);\n    }\n    \n    // Eyes\n    for(side = [-1, 1]) {\n        translate([2, side*4, 3]) sphere(r=1.2, $fn=10);\n    }\n    \n    // Nose\n    translate([9, 0, -1]) sphere(r=1.5, $fn=10);\n}\n\n// Leg assembly\nmodule leg_assembly() {\n    // Front legs\n    for(side = [-1, 1]) {\n        translate([-8, side*5, 10]) leg();\n    }\n    \n    // Back legs\n    for(side = [-1, 1]) {\n        translate([8, side*4, 10]) leg();\n    }\n}\n\n// Single leg\nmodule leg() {\n    // Upper leg\n    translate([0, 0, -5]) cylinder(h=10, r1=3, r2=2.5, $fn=12);\n    \n    // Lower leg\n    translate([0, 0, -12]) cylinder(h=8, r1=2.5, r2=2, $fn=12);\n    \n    // Paw\n    translate([0, 0, -18]) scale([1.5, 1.2, 1]) sphere(r=2.5, $fn=12);\n}\n\n// Wolf tail\nmodule tail() {\n    // Tail base\n    cylinder(h=15, r1=3, r2=2, $fn=12);\n    \n    // Tail tip\n    translate([12, 0, 0]) rotate([0, 20, 0]) \n        scale([1, 0.8, 0.8]) sphere(r=2.5, $fn=12);\n}\n\n// Generate the wolf\nwolf();",
    "renders": true
  },
  {
    "animal": "wolverine",
    "openscad_code": "// Wolverine Medium-Complexity Realistic\n\nmodule ear() {\n    difference() {\n        translate([0,0,4]) scale([1,1.2,1]) sphere(4.5, $fn=12);\n        translate([-2,-2,2]) cube([6,6,8]);\n    }\n}\n\nmodule leg(is_front=false) {\n    union() {\n        // upper leg\n        translate([0,0,5]) rotate([0,15,0]) cylinder(h=12, r1=3.5, r2=3, $fn=12);\n        // lower leg\n        translate([0,0,11]) rotate([0,10,0]) cylinder(h=10, r1=3, r2=2.2, $fn=12);\n        // paw\n        translate([0,0,20]) sphere(2.5, $fn=12);\n    }\n}\n\nmodule tail() {\n    for(i=[0:10]) {\n        translate([sin(i*7)*3, -cos(i*7)*3, i*1.5]) {\n            sphere(3 - i*0.2, $fn=12);\n        }\n    }\n}\n\ndifference() {\n    union() {\n        // body\n        translate([0,0,15]) scale([1.1,2,1]) sphere(15, $fn=24);\n        \n        // head\n        translate([0,22,18]) scale([0.9,1.3,0.9]) sphere(10, $fn=24);\n        \n        // snout\n        translate([0,33,16]) scale([0.6,0.9,0.6]) sphere(7, $fn=20);\n        \n        // ears\n        translate([-6,18,26]) rotate([0,0,-25]) ear();\n        translate([6,18,26]) rotate([0,0,25]) mirror([1,0,0]) ear();\n        \n        // legs\n        translate([-7,10,0]) rotate([0,0,-15]) leg(true);\n        translate([7,10,0]) rotate([0,0,15]) leg(true);\n        translate([-6,-10,0]) rotate([0,0,-5]) leg();\n        translate([6,-10,0]) rotate([0,0,5]) leg();\n        \n        // tail\n        translate([0,-25,12]) rotate([0,-15,0]) tail();\n    }\n    \n    // eyes\n    translate([-3,30,20]) sphere(1.5, $fn=12);\n    translate([3,30,20]) sphere(1.5, $fn=12);\n    \n    // nose\n    translate([0,38,16]) rotate([45,0,0]) cylinder(h=3, r1=1.5, r2=0, $fn=8);\n    \n    // mouth line\n    translate([0,36,14]) cube([0.5,2,0.5]);\n}",
    "renders": true
  },
  {
    "animal": "wombat",
    "openscad_code": "// Wombat - realistic style, medium complexity\n// Dimensions: ~80mm long, 35mm high, 30mm wide\n\n$fn = 32;\n\nmodule wombat() {\n    // Main body\n    translate([0, 0, 12]) \n        scale([1.2, 0.7, 0.9]) \n        sphere(15);\n\n    // Rump\n    translate([-15, 0, 10]) \n        scale([0.8, 0.9, 0.7]) \n        sphere(12);\n\n    // Head\n    translate([20, 0, 20]) \n        scale([0.9, 0.8, 0.8]) \n        sphere(10);\n\n    // Snout\n    translate([29, 0, 19]) \n        scale([0.5, 0.6, 0.5]) \n        sphere(6);\n\n    // Ears\n    for(x = [17, 23]) {\n        translate([x, 7, 25]) \n            rotate([30, 0, 0]) \n            scale([0.3, 0.2, 0.5]) \n            cylinder(h = 8, r1 = 3, r2 = 1);\n        translate([x, -7, 25]) \n            rotate([-30, 0, 0]) \n            scale([0.3, 0.2, 0.5]) \n            cylinder(h = 8, r1 = 3, r2 = 1);\n    }\n\n    // Legs\n    module leg(x, y, angle) {\n        translate([x, y, 0]) \n            rotate([0, angle, 0]) {\n            // Upper leg\n            translate([0, 0, 5]) \n                scale([0.5, 0.5, 1]) \n                cylinder(h = 8, r = 3);\n            // Lower leg\n            translate([0, 0, 0]) \n                scale([0.4, 0.4, 0.8]) \n                cylinder(h = 6, r = 2.5);\n            // Paw\n            translate([0, 0, -2]) \n                sphere(3);\n        }\n    }\n\n    leg(10, 10, 30);\n    leg(10, -10, 30);\n    leg(-10, 10, -30);\n    leg(-10, -10, -30);\n\n    // Tail\n    translate([-22, 0, 12]) \n        rotate([0, -20, 0]) \n        scale([0.4, 0.4, 1]) \n        cylinder(h = 8, r1 = 4, r2 = 2);\n\n    // Eyes\n    for(x = [26, 28]) {\n        translate([x, 3, 22]) \n            scale([0.3, 0.3, 0.3]) \n            sphere(2);\n        translate([x, -3, 22]) \n            scale([0.3, 0.3, 0.3]) \n            sphere(2);\n    }\n\n    // Nose\n    translate([32, 0, 19]) \n        scale([0.2, 0.4, 0.2]) \n        sphere(2);\n\n    // Claws on front paws\n    module claw(x, y, z, rot) {\n        translate([x, y, z]) \n            rotate([rot, 0, 0]) \n            scale([0.3, 0.3, 1]) \n            cylinder(h = 2, r1 = 0.5, r2 = 0.2);\n    }\n\n    for(i = [-1, 0, 1]) {\n        claw(10 + i*2, 10, -3, 20);\n        claw(10 + i*2, -10, -3, 20);\n    }\n}\n\nwombat();",
    "renders": true
  },
  {
    "animal": "woodchuck",
    "openscad_code": "// Woodchuck (Groundhog) - Realistic Style, Medium Complexity\n// Overall dimensions: ~80mm long\n\n$fn = 32; // Smooth curves\n\nmodule woodchuck() {\n    // Main body - oval shape\n    difference() {\n        scale([1.2, 1, 0.8])\n            sphere(d=40);\n        // Belly flattening\n        translate([0, 0, -12])\n            cube([50, 50, 25], center=true);\n    }\n    \n    // Head\n    translate([-20, 0, 8])\n        rotate([0, 10, 0])\n        union() {\n            // Skull\n            scale([1.3, 1.1, 1])\n                sphere(d=25);\n            \n            // Snout\n            translate([-8, 0, -2])\n                scale([1.2, 0.8, 0.8])\n                    sphere(d=12);\n            \n            // Ears\n            for(side = [-1, 1]) {\n                translate([6, side*8, 6])\n                    rotate([0, side*15, 0])\n                    scale([0.5, 0.3, 1])\n                        cylinder(h=8, d1=8, d2=4);\n            }\n        }\n    \n    // Eyes\n    for(side = [-1, 1]) {\n        translate([-26, side*6, 6])\n            sphere(d=3);\n    }\n    \n    // Nose\n    translate([-32, 0, 2])\n        sphere(d=4);\n    \n    // Front legs\n    for(side = [-1, 1]) {\n        translate([-10, side*12, -12])\n            rotate([0, 10, 0])\n            scale([0.8, 0.8, 1.2])\n                cylinder(h=20, d1=10, d2=8);\n    }\n    \n    // Back legs\n    for(side = [-1, 1]) {\n        translate([15, side*10, -12])\n            rotate([0, -10, 0])\n            scale([1, 0.9, 1.5])\n                cylinder(h=18, d1=12, d2=10);\n    }\n    \n    // Tail\n    translate([22, 0, -5])\n        rotate([30, 0, 0])\n        scale([1, 0.6, 0.4])\n            cylinder(h=15, d1=12, d2=8);\n    \n    // Whiskers\n    for(side = [-1, 1]) {\n        for(i = [0:2]) {\n            translate([-30, side*(4+i*2), 2])\n                rotate([0, side*10, 0])\n                cube([8, 0.5, 0.5]);\n        }\n    }\n}\n\n// Position for printing\ntranslate([0, 0, 20])\n    woodchuck();",
    "renders": true
  },
  {
    "animal": "woodcock",
    "openscad_code": "// Woodcock model - realistic style, medium complexity\n// All dimensions in mm, scaled for 3D printing\n\n$fn = 32;\n\n// Main module to create the woodcock\nmodule woodcock() {\n    // Rotate to standing position\n    rotate([0, 0, 0]) {\n        // Body\n        union() {\n            body();\n            head();\n            beak();\n            wings();\n            tail();\n            legs();\n            feet();\n        }\n    }\n}\n\n// Main body\nmodule body() {\n    color(\"brown\") {\n        // Central body - ellipsoid\n        scale([1.2, 1, 1.3])\n            sphere(15);\n        \n        // Neck transition\n        translate([15, 0, 5])\n            scale([0.7, 0.6, 0.8])\n                sphere(8);\n    }\n}\n\n// Head\nmodule head() {\n    color(\"brown\") {\n        translate([22, 0, 12])\n            scale([0.8, 0.7, 0.9])\n                sphere(10);\n        \n        // Crown stripe\n        translate([30, 0, 20])\n            scale([0.3, 0.05, 0.1])\n                cube([8, 10, 4], center=true);\n    }\n    \n    // Eyes\n    color(\"black\") {\n        translate([28, 5, 15])\n            sphere(2);\n        translate([28, -5, 15])\n            sphere(2);\n    }\n}\n\n// Long beak\nmodule beak() {\n    color(\"tan\") {\n        translate([35, 0, 12])\n            rotate([0, -10, 0])\n                scale([4, 0.3, 0.3])\n                    cylinder(h=25, r1=2, r2=0.5);\n    }\n}\n\n// Wings\nmodule wings() {\n    color(\"brown\") {\n        // Left wing\n        translate([0, 15, 5])\n            rotate([0, 0, -20])\n                scale([1.5, 0.3, 1])\n                    cylinder(h=20, r1=8, r2=5);\n        \n        // Right wing\n        translate([0, -15, 5])\n            rotate([0, 0, 20])\n                scale([1.5, 0.3, 1])\n                    cylinder(h=20, r1=8, r2=5);\n        \n        // Wing details\n        for(i = [1:3]) {\n            translate([5, 15 + i*2, 6])\n                rotate([0, 0, -20])\n                    scale([1.2, 0.1, 0.1])\n                        cube([10, 1, 2]);\n            translate([5, -15 - i*2, 6])\n                rotate([0, 0, 20])\n                    scale([1.2, 0.1, 0.1])\n                        cube([10, 1, 2]);\n        }\n    }\n}\n\n// Tail\nmodule tail() {\n    color(\"brown\") {\n        translate([-20, 0, 8])\n            rotate([0, 20, 0])\n                scale([0.5, 3, 0.2])\n                    cube([15, 8, 3]);\n        \n        // Tail bars\n        for(i = [1:4]) {\n            translate([-15 - i*3, 0, 7])\n                color(\"black\")\n                    scale([0.1, 3.5, 0.1])\n                        cube([2, 9, 1]);\n        }\n    }\n}\n\n// Legs\nmodule legs() {\n    color(\"tan\") {\n        // Left leg\n        translate([5, 5, -12])\n            cylinder(h=20, r=1.5);\n        \n        // Right leg\n        translate([5, -5, -12])\n            cylinder(h=20, r=1.5);\n    }\n}\n\n// Feet\nmodule feet() {\n    color(\"tan\") {\n        // Left foot\n        translate([5, 8, -30])\n            rotate([0, 0, 30])\n                union() {\n                    // Main foot\n                    scale([2, 0.5, 0.2])\n                        cube([8, 4, 1]);\n                    \n                    // Toes\n                    for(i = [0:2]) {\n                        translate([5 + i*3, 2, 0])\n                            rotate([0, 0, -20 + i*20])\n                                scale([1.5, 0.3, 0.2])\n                                    cube([4, 1, 1]);\n                    }\n                }\n        \n        // Right foot\n        translate([5, -8, -30])\n            rotate([0, 0, -30])\n                mirror([0, 1, 0])\n                    union() {\n                        // Main foot\n                        scale([2, 0.5, 0.2])\n                            cube([8, 4, 1]);\n                        \n                        // Toes\n                        for(i = [0:2]) {\n                            translate([5 + i*3, 2, 0])\n                                rotate([0, 0, -20 + i*20])\n                                    scale([1.5, 0.3, 0.2])\n                                        cube([4, 1, 1]);\n                        }\n                    }\n    }\n}\n\n// Generate the woodcock\nwoodcock();",
    "renders": true
  },
  {
    "animal": "woodlouse",
    "openscad_code": "// Woodlouse (pill bug) - realistic style, medium complexity\n// Overall size approximately 60 mm\n\n// Parameters\nbody_length = 60;\nbody_width = 30;\nbody_height = 20;\nsegment_count = 11;\nantenna_length = 12;\nleg_segments = 7;\nwall_thickness = 1.5;\n\n// Main body module\nmodule woodlouse_body() {\n    union() {\n        // Head segment\n        translate([body_length/2 - 8, 0, 0])\n            scale([1.2, 1, 0.8])\n                sphere(d=body_width/1.5, $fn=20);\n        \n        // Body segments\n        for(i=[0:segment_count-1]) {\n            translate([body_length/2 - 12 - i*4.5, 0, -1])\n                scale([1 + sin(i*25)*0.15, 1 - i*0.04, 1 - i*0.06])\n                    sphere(d=body_width - i*1.2, $fn=16);\n        }\n        \n        // Underside\n        difference() {\n            translate([0, 0, -body_height/2+2])\n                cube([body_length, body_width*0.9, body_height/2], center=true);\n            translate([0, 0, -body_height/2+1])\n                cube([body_length-4, body_width*0.7, body_height/2+2], center=true);\n        }\n    }\n}\n\n// Antenna module\nmodule antenna(side) {\n    translate([body_length/2 - 5, side*8, 5]) {\n        rotate([0, -30, side*20]) {\n            for(i=[0:3]) {\n                translate([0, 0, -i*antenna_length/4]) {\n                    rotate([0, 0, sin(i*45)*15]) {\n                        cylinder(h=antenna_length/4, d1=2-i*0.3, d2=1.5-i*0.3, $fn=8);\n                    }\n                }\n            }\n            translate([0, 0, -antenna_length])\n                sphere(d=1.5, $fn=8);\n        }\n    }\n}\n\n// Leg module\nmodule leg(side, position) {\n    angle = position * 25 - 60;\n    translate([body_length/2 - 15 - position*5, side*body_width/2.5, -3]) {\n        rotate([0, 0, side*angle]) {\n            rotate([30, 0, 0]) {\n                // Coxa\n                cylinder(h=6, d=3, $fn=8);\n                translate([0, 0, -6])\n                    rotate([0, 20, 0])\n                        cylinder(h=7, d=3, $fn=8);\n                // Tibia\n                translate([0, 0, -13])\n                    rotate([0, 20, 0])\n                        cylinder(h=6, d=2.5, $fn=8);\n            }\n        }\n    }\n}\n\n// Uropods (tail appendages)\nmodule uropods() {\n    translate([-body_length/2 + 3, 0, -3]) {\n        for(side=[-1, 1]) {\n            rotate([0, 0, side*30]) {\n                rotate([0, -20, 0])\n                    cylinder(h=5, d=3, $fn=8);\n            }\n        }\n    }\n}\n\n// Shell segments detail\nmodule shell_segments() {\n    for(i=[0:segment_count-1]) {\n        translate([body_length/2 - 12 - i*4.5, 0, 3 - i*0.5]) {\n            difference() {\n                scale([1 + sin(i*25)*0.15, 1 - i*0.04, 0.3])\n                    sphere(d=body_width - i*1.2 + 2, $fn=16);\n                scale([1 + sin(i*25)*0.15, 1 - i*0.04, 0.4])\n                    sphere(d=body_width - i*1.2, $fn=16);\n            }\n        }\n    }\n}\n\n// Compound eyes\nmodule eyes() {\n    for(side=[-1, 1]) {\n        translate([body_length/2 - 6, side*6, 3]) {\n            difference() {\n                sphere(d=4, $fn=12);\n                translate([0, side*1.5, 0])\n                    cube([5, 3, 5], center=true);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    woodlouse_body();\n    shell_segments();\n    eyes();\n    \n    // Antennae\n    antenna(1);\n    antenna(-1);\n    \n    // Legs - 7 pairs\n    for(i=[0:leg_segments-1]) {\n        leg(1, i);\n        leg(-1, i);\n    }\n    \n    uropods();\n}",
    "renders": true
  },
  {
    "animal": "woodpecker",
    "openscad_code": "// Medium-complexity realistic woodpecker for 3D printing\n// Overall size ≈ 70 mm tall, 55 mm deep, 35 mm wide\n// All parts joined with unions, no floating parts, ≥1 mm walls\n\n$fn=24; // moderate facet count for printability\n\nmodule woodpecker() {\n    // Body core – oval, 35 mm long, 25 mm high, 20 mm thick\n    difference() {\n        scale([1, 0.7, 1]) sphere([17.5, 17.5, 10]);\n        // Tail notch for tail insertion\n        translate([15,0,0]) cube([8,8,20], center=true);\n    }\n\n    // Head sphere 1.2× body diameter\n    translate([-15,0,10])\n        sphere(12);\n\n    // Beak – cylinder cone, 18 mm long, 3 mm base tapering to 1.5 mm\n    translate([-30,0,10])\n        rotate([0,-10,0])\n        cylinder(h1=0, r1=1.5, h2=18, r2=3);\n\n    // Crest – three small spheres staggered\n    for(i=[-1:1])\n        translate([-22, i*3, 20])\n            sphere(4);\n\n    // Eye indents (printable recesses)\n    translate([-22, 6, 10])\n        sphere(2.5);\n    translate([-22,-6, 10])\n        sphere(2.5);\n\n    // Tail – elongated wedge\n    translate([20,0,-5])\n        rotate([0,0,20])\n        scale([2.5,1,0.4])\n        cube([8,6,10], center=true);\n\n    // Wings – mirrored pairs\n    module wing() {\n        difference() {\n            hull() {\n                translate([0,0,0]) sphere(5);\n                translate([10,0,5]) sphere(4);\n            }\n            // Feather grooves\n            for(i=[1:3])\n                translate([i*3,0,0])\n                    rotate([0,90,0])\n                    cylinder(h=12, r=1.2);\n        }\n    }\n    translate([-5,10,5]) rotate([0,0,30]) wing();\n    mirror([0,1,0]) translate([-5,10,5]) rotate([0,0,30]) wing();\n\n    // Feet – two toes forward, one back for perch\n    module foot() {\n        union() {\n            cylinder(h=6, r=2);\n            translate([0,2,-3]) rotate([90,0,0]) cylinder(h=5, r=1.2);\n            translate([0,-2,-3]) rotate([90,0,0]) cylinder(h=5, r=1.2);\n            translate([0,0,-6]) rotate([90,0,0]) cylinder(h=4, r=1.2);\n        }\n    }\n    translate([2, 8,-12]) foot();\n    translate([2,-8,-12]) foot();\n}\n\n// Center model on build plate\ntranslate([0,0,15]) woodpecker();",
    "renders": true
  },
  {
    "animal": "wren",
    "openscad_code": "// Wren in realistic style - medium complexity\n// Approx 80mm length, 3D printable\n\n$fn = 32;  // Smooth curves\n\n// Main module\nmodule wren() {\n    union() {\n        // Body\n        body();\n        \n        // Head\n        head();\n        \n        // Wings\n        wing_left();\n        wing_right();\n        \n        // Tail\n        tail();\n        \n        // Legs and feet\n        legs();\n    }\n}\n\n// Body - oval shape\nmodule body() {\n    translate([0, 0, 15])\n    scale([1.2, 1, 1.5])\n    sphere(15);\n}\n\n// Head - slightly smaller sphere\nmodule head() {\n    translate([-20, 0, 30])\n    sphere(10);\n    \n    // Beak\n    translate([-30, 0, 30])\n    rotate([0, 0, -10])\n    scale([1.5, 0.3, 0.3])\n    cylinder(h=12, r=3);\n    \n    // Eye\n    translate([-25, 6, 32])\n    sphere(2);\n}\n\n// Wing modules\nmodule wing_left() {\n    translate([5, -5, 25])\n    rotate([0, 0, 20])\n    scale([0.8, 0.2, 2])\n    cylinder(h=20, r=8);\n    \n    // Wing detail\n    for(i = [0:2]) {\n        translate([5, -6, 25 + i*6])\n        rotate([0, 0, 20])\n        scale([0.6, 0.1, 0.3])\n        cylinder(h=15, r=6);\n    }\n}\n\nmodule wing_right() {\n    mirror([0, 1, 0])\n    wing_left();\n}\n\n// Tail - fan shape\nmodule tail() {\n    translate([15, 0, 15])\n    rotate([0, 0, 20])\n    scale([1.5, 0.3, 1])\n    cylinder(h=25, r=10);\n    \n    // Tail feathers\n    for(i = [-1:1]) {\n        translate([20, i*3, 20])\n        rotate([0, i*5, 20])\n        scale([0.3, 0.1, 1.2])\n        cylinder(h=20, r=8);\n    }\n}\n\n// Legs and feet\nmodule legs() {\n    // Left leg\n    translate([-5, -5, 5])\n    cylinder(h=15, r=2);\n    \n    // Left foot\n    translate([-5, -5, 0])\n    rotate([90, 0, 0])\n    scale([1, 0.5, 0.5])\n    cylinder(h=10, r=3);\n    \n    // Toes\n    for(i = [-1:1]) {\n        translate([-5 + i*3, -5, 0])\n        rotate([90, 0, i*20])\n        scale([0.3, 0.3, 1])\n        cylinder(h=8, r=1.5);\n    }\n    \n    // Right leg (mirrored)\n    mirror([0, 1, 0]) {\n        translate([-5, -5, 5])\n        cylinder(h=15, r=2);\n        \n        translate([-5, -5, 0])\n        rotate([90, 0, 0])\n        scale([1, 0.5, 0.5])\n        cylinder(h=10, r=3);\n        \n        for(i = [-1:1]) {\n            translate([-5 + i*3, -5, 0])\n            rotate([90, 0, i*20])\n            scale([0.3, 0.3, 1])\n            cylinder(h=8, r=1.5);\n        }\n    }\n}\n\n// Generate the wren\nwren();",
    "renders": true
  },
  {
    "animal": "wrasse",
    "openscad_code": "// Wrasse Fish - Realistic Medium Detail\n// 3D printable model with proper wall thickness\n\n// Wall thickness for 3D printing\nwall = 1.2;\n\n// Main body dimensions\nbody_length = 60;\nbody_height = 25;\nbody_width = 18;\n\nmodule wrasse_body() {\n    // Main body - elongated oval shape\n    union() {\n        // Central body\n        scale([1.2, 1, 1]) \n            sphere(d = body_height, $fn=32);\n        \n        // Tail section - tapered\n        translate([body_length/2 - 5, 0, 0])\n            scale([1.5, 0.7, 0.7])\n                sphere(d = body_height * 0.8, $fn=32);\n    }\n}\n\nmodule dorsal_fin() {\n    // Dorsal fin - continuous with spines\n    translate([0, 0, body_height/2 + wall])\n        for(i = [-20:5:15]) {\n            translate([i, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h = body_height * 0.6, d1 = 3, d2 = 1, $fn=8);\n        }\n}\n\nmodule anal_fin() {\n    // Anal fin - smaller than dorsal\n    translate([5, 0, -body_height/2 - wall])\n        mirror([0, 0, 1])\n            for(i = [-10:4:10]) {\n                translate([i, 0, 0])\n                    rotate([0, 90, 0])\n                        cylinder(h = body_height * 0.4, d1 = 2.5, d2 = 0.8, $fn=8);\n            }\n}\n\nmodule pectoral_fin() {\n    // Pectoral fins - side fins\n    translate([-body_length/4, body_width/2 + wall, -body_height/4])\n        rotate([0, 0, 45])\n            scale([1.5, 1, 0.3])\n                sphere(d = body_height * 0.7, $fn=16);\n    \n    mirror([0, 1, 0])\n        translate([-body_length/4, body_width/2 + wall, -body_height/4])\n            rotate([0, 0, 45])\n                scale([1.5, 1, 0.3])\n                    sphere(d = body_height * 0.7, $fn=16);\n}\n\nmodule caudal_fin() {\n    // Tail fin - crescent shape\n    translate([body_length/2 + 5, 0, 0])\n        rotate([0, 0, 90])\n            difference() {\n                scale([1.5, 1, 0.3])\n                    sphere(d = body_height * 1.2, $fn=32);\n                translate([0, 0, -body_height * 0.6])\n                    cube([body_height * 2, body_height * 2, body_height], center=true);\n            }\n}\n\nmodule head_features() {\n    // Head with protruding lips\n    translate([-body_length/2 - 5, 0, 0])\n        union() {\n            // Main head\n            scale([0.8, 0.9, 0.9])\n                sphere(d = body_height * 0.8, $fn=32);\n            \n            // Lips/mouth\n            translate([-body_height * 0.3, 0, -body_height * 0.1])\n                rotate([0, 0, -30])\n                    scale([0.3, 0.2, 0.15])\n                        sphere(d = body_height * 0.6, $fn=16);\n            \n            // Eye\n            translate([-body_height * 0.15, body_height * 0.25, body_height * 0.15])\n                sphere(d = 3, $fn=16);\n            \n            translate([-body_height * 0.15, body_height * 0.25, body_height * 0.15])\n                sphere(d = 1.5, $fn=16);\n        }\n}\n\nmodule scales_pattern() {\n    // Simple scale pattern using small spheres\n    for(x = [-body_length/2:3:body_length/2 - 5]) {\n        for(y = [-body_width/2 + 2:3:body_width/2 - 2]) {\n            for(z = [-body_height/2 + 2:3:body_height/2 - 2]) {\n                if((x + y + z) % 6 == 0) {\n                    translate([x, y, z])\n                        sphere(d = 1, $fn=8);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main body parts\n    wrasse_body();\n    head_features();\n    \n    // Fins\n    dorsal_fin();\n    anal_fin();\n    pectoral_fin();\n    caudal_fin();\n    \n    // Detail\n    scales_pattern();\n}\n\n// Base for stability\ntranslate([0, 0, -body_height/2 - wall - 2])\n    cube([body_length + 10, body_width + 10, 2], center=true);",
    "renders": true
  },
  {
    "animal": "yak",
    "openscad_code": "// Yak in realistic medium-complexity style\n// Scaled to ~70 mm long, printable without support\n\nmodule yak() {\n    // Body dimensions\n    body_len = 50;\n    body_w   = 25;\n    body_h   = 28;\n\n    // Head dimensions\n    head_len = 20;\n    head_w   = 12;\n    head_h   = 14;\n\n    // Leg dimensions\n    leg_h    = 18;\n    leg_r    = 4;\n\n    // Horn dimensions\n    horn_len = 12;\n    horn_r   = 2;\n\n    // Tail dimensions\n    tail_len = 15;\n    tail_r   = 2.5;\n\n    // Build each major part\n    union() {\n        // Main bulky body\n        translate([0, 0, leg_h])\n            difference() {\n                hull() {\n                    // Front bulge\n                    translate([-body_len/2 + 5, 0, 0])\n                        scale([1.2, 1, 1])\n                            sphere(d = body_w, $fn = 16);\n                    // Rear bulge\n                    translate([body_len/2 - 8, 0, 0])\n                        scale([0.9, 1.1, 0.9])\n                            sphere(d = body_w, $fn = 16);\n                    // Mid section\n                    cube([body_len, body_w, body_h], center = true);\n                }\n                // Small undercut to avoid overhang\n                translate([0, 0, -body_h/2 - 1])\n                    cube([body_len + 2, body_w + 2, 2], center = true);\n            }\n\n        // Head\n        translate([-body_len/2 - head_len/2 + 3, 0, leg_h + body_h/2 - 2])\n            rotate([0, 20, 0])\n            difference() {\n                hull() {\n                    sphere(d = head_w, $fn = 16);\n                    translate([head_len/2, 0, 0])\n                        sphere(d = head_w * 0.8, $fn = 16);\n                }\n                // Snout taper\n                translate([head_len/2, 0, 0])\n                    rotate([0, 0, 0])\n                        cube([head_len, head_w * 0.6, head_h * 0.6], center = true);\n            }\n\n        // Horns (curved pair)\n        for (side = [-1, 1]) {\n            translate([-body_len/2 - head_len/2 + 3, side * head_w/2, leg_h + body_h/2 + 5])\n                rotate([30, 0, side * 25])\n                rotate_extrude(angle = 90, $fn = 16)\n                    translate([horn_r, 0, 0])\n                        circle(r = horn_r, $fn = 8);\n        }\n\n        // Legs (four)\n        for (x = [-body_len/3, body_len/3])\n            for (y = [-body_w/3, body_w/3]) {\n                translate([x, y, leg_h/2])\n                    cylinder(h = leg_h, r1 = leg_r, r2 = leg_r * 0.9, $fn = 12);\n            }\n\n        // Tail\n        translate([body_len/2 - 2, 0, leg_h + body_h/2 - 5])\n            rotate([0, 90, 0])\n                cylinder(h = tail_len, r = tail_r, $fn = 12);\n\n        // Ears (small)\n        for (side = [-1, 1]) {\n            translate([-body_len/2 - head_len/2 + 1, side * head_w/2, leg_h + body_h/2 + 8])\n                rotate([0, 0, side * 30])\n                scale([0.6, 0.2, 1])\n                    sphere(d = 6, $fn = 8);\n        }\n\n        // Hump\n        translate([body_len/4, 0, leg_h + body_h/2 + 5])\n            sphere(d = 15, $fn = 16);\n\n        // Shaggy skirt (simple fringe)\n        for (i = [0: 11]) {\n            angle = i * 30;\n            translate([body_len/2 * cos(angle) * 0.5, body_w/2 * sin(angle) * 0.5, leg_h/2])\n                cube([4, 4, leg_h + 2], center = true);\n        }\n    }\n}\n\n// Render the yak\nyak();",
    "renders": true
  },
  {
    "animal": "yellowhammer",
    "openscad_code": "// Yellowhammer (Emberiza citrinella) - medium complexity realistic model\n// Designed for 3D printing - no overhangs, 2mm wall thickness\n// Overall size approximately 80mm\n\nmodule yellowhammer() {\n    // Body parameters\n    body_length = 40;\n    body_width = 20;\n    body_height = 25;\n    \n    // Head parameters\n    head_size = 15;\n    beak_length = 8;\n    \n    // Wing parameters\n    wing_length = 30;\n    wing_width = 12;\n    \n    // Tail parameters\n    tail_length = 25;\n    tail_width = 18;\n    \n    // Leg parameters\n    leg_height = 8;\n    foot_length = 6;\n    \n    // Main body - slightly oval\n    translate([0, 0, leg_height]) {\n        difference() {\n            // Main body shape\n            scale([1, 0.8, 0.7])\n                sphere(d=body_height);\n            \n            // Flatten bottom for printing\n            translate([0, 0, -body_height/2])\n                cube([body_width*2, body_width*2, body_height], center=true);\n        }\n    }\n    \n    // Head\n    translate([body_length/2 - 5, 0, body_height/2 + leg_height]) {\n        sphere(d=head_size);\n        \n        // Beak\n        rotate([0, -20, 0])\n            translate([head_size/2, 0, 0])\n                scale([1, 0.4, 0.3])\n                    cylinder(h=beak_length, d1=8, d2=2);\n        \n        // Eye\n        translate([head_size/4, head_size/3, 0]) {\n            sphere(d=2);\n            translate([0, 0, 1.5])\n                sphere(d=1);\n        }\n    }\n    \n    // Wings - layered feathers\n    for(i = [0:1]) {\n        rotate([0, 0, i == 0 ? 20 : -20]) {\n            translate([0, i == 0 ? body_width/2 : -body_width/2, body_height/2 + leg_height]) {\n                // Primary wing feathers\n                for(f = [0:2]) {\n                    translate([f*8 - 8, 0, f*2]) {\n                        rotate([0, -10 - f*5, 0])\n                            scale([0.8 - f*0.1, 1, 0.3])\n                                cylinder(h=wing_length - f*5, d=wing_width - f*2);\n                    }\n                }\n                \n                // Wing coverts\n                translate([0, 0, 3]) {\n                    scale([1, 0.7, 0.3])\n                        cylinder(h=wing_length/2, d=wing_width);\n                }\n            }\n        }\n    }\n    \n    // Tail - graduated feathers\n    translate([-body_length/2 - 5, 0, body_height/3 + leg_height]) {\n        for(t = [0:4]) {\n            rotate([0, 0, (t-2)*15]) {\n                translate([0, 0, t*1.5]) {\n                    scale([1, 0.8 - t*0.1, 0.3])\n                        cylinder(h=tail_length - t*3, d=tail_width - t*2);\n                }\n            }\n        }\n    }\n    \n    // Legs and feet\n    for(side = [-1, 1]) {\n        translate([body_length/3, side*body_width/3, 0]) {\n            // Leg\n            cylinder(h=leg_height, d=3);\n            \n            // Foot\n            translate([0, side*foot_length/2, -leg_height/2]) {\n                rotate([90, 0, 0])\n                    cylinder(h=foot_length, d=2.5);\n                \n                // Toes\n                for(toe = [-1, 0, 1]) {\n                    rotate([0, 90, toe*45])\n                        translate([0, 0, foot_length/2])\n                            cylinder(h=foot_length/2, d=2);\n                }\n            }\n        }\n    }\n    \n    // Chest markings\n    translate([body_length/4, 0, body_height/3 + leg_height]) {\n        for(mark = [0:3]) {\n            rotate([0, 0, mark*90])\n                translate([0, mark*2, 0])\n                    scale([0.3, 1, 0.1])\n                        cylinder(h=body_width/2, d=body_height/4);\n        }\n    }\n}\n\n// Render the bird\nyellowhammer();",
    "renders": true
  },
  {
    "animal": "yellowjacket",
    "openscad_code": "// Yellowjacket Model - Realistic Medium Complexity\n// Designed for 3D printing with minimal overhangs\n\n$fn = 32;  // Smooth curves\n\n// Main module\nmodule yellowjacket() {\n    // Body segments\n    union() {\n        // Head\n        head();\n        \n        // Thorax\n        thorax();\n        \n        // Abdomen segments\n        abdomen();\n        \n        // Wings\n        wings();\n        \n        // Legs\n        legs();\n        \n        // Antennae\n        antennae();\n    }\n}\n\n// Head module\nmodule head() {\n    translate([0, 0, 15]) {\n        difference() {\n            // Main head shape\n            scale([1.2, 1, 1]) sphere(4);\n            \n            // Eye sockets\n            translate([2.5, 2, 1.5]) sphere(1.2);\n            translate([2.5, -2, 1.5]) sphere(1.2);\n            \n            // Mandible cutouts\n            translate([3.5, 1.5, -2]) rotate([0, 0, 30]) cylinder(2, 1, 0.5);\n            translate([3.5, -1.5, -2]) rotate([0, 0, -30]) cylinder(2, 1, 0.5);\n        }\n        \n        // Eyes\n        translate([3.2, 2.2, 1.5]) sphere(0.8);\n        translate([3.2, -2.2, 1.5]) sphere(0.8);\n        \n        // Mandibles\n        translate([4, 1.5, -1]) rotate([0, 0, 30]) cylinder(2, 0.8, 0.3);\n        translate([4, -1.5, -1]) rotate([0, 0, -30]) cylinder(2, 0.8, 0.3);\n    }\n}\n\n// Thorax module\nmodule thorax() {\n    translate([0, 0, 8]) {\n        // Main thorax\n        scale([1.5, 1.2, 1]) sphere(4);\n        \n        // Thorax segments\n        for(i = [0:2]) {\n            rotate([0, 0, i * 120]) {\n                translate([3, 0, 0]) scale([2, 0.8, 0.5]) sphere(1);\n            }\n        }\n    }\n}\n\n// Abdomen module\nmodule abdomen() {\n    // First segment\n    translate([0, 0, 2]) cylinder(5, 4, 3.5);\n    \n    // Second segment\n    translate([0, 0, -1]) cylinder(5, 3.5, 3);\n    \n    // Third segment with stripes\n    translate([0, 0, -4]) {\n        difference() {\n            cylinder(5, 3, 2.5);\n            // Stripes\n            for(i = [1:4]) {\n                translate([0, 0, i * 1.2 - 2.5]) {\n                    scale([1.05, 1.05, 0.3]) cylinder(0.5, 3, 2.5);\n                }\n            }\n        }\n    }\n    \n    // Stinger\n    translate([0, 0, -7.5]) cylinder(2, 0.5, 0.2);\n}\n\n// Wings module\nmodule wings() {\n    // Left wing pair\n    translate([-1, 3, 10]) {\n        rotate([0, 30, 0]) {\n            scale([2, 0.1, 1]) sphere(2);\n            translate([1, 0, -1]) scale([1.5, 0.08, 0.8]) sphere(1.5);\n        }\n    }\n    \n    // Right wing pair\n    mirror([0, 1, 0]) {\n        translate([-1, 3, 10]) {\n            rotate([0, 30, 0]) {\n                scale([2, 0.1, 1]) sphere(2);\n                translate([1, 0, -1]) scale([1.5, 0.08, 0.8]) sphere(1.5);\n            }\n        }\n    }\n}\n\n// Legs module\nmodule legs() {\n    // Left legs\n    for(i = [0:2]) {\n        rotate([0, 0, i * 120 - 60]) {\n            translate([2, 2, 6 - i * 1.5]) {\n                rotate([30, 0, -20]) {\n                    cylinder(3, 0.4, 0.3);\n                    translate([2.5, 0, 0]) rotate([30, 0, 0]) cylinder(2.5, 0.3, 0.2);\n                    translate([4.5, 0, 0.5]) rotate([20, 0, 0]) cylinder(2, 0.2, 0.15);\n                }\n            }\n        }\n    }\n    \n    // Right legs\n    mirror([0, 1, 0]) {\n        for(i = [0:2]) {\n            rotate([0, 0, i * 120 - 60]) {\n                translate([2, 2, 6 - i * 1.5]) {\n                    rotate([30, 0, -20]) {\n                        cylinder(3, 0.4, 0.3);\n                        translate([2.5, 0, 0]) rotate([30, 0, 0]) cylinder(2.5, 0.3, 0.2);\n                        translate([4.5, 0, 0.5]) rotate([20, 0, 0]) cylinder(2, 0.2, 0.15);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Antennae module\nmodule antennae() {\n    // Left antenna\n    translate([0, 1.5, 18]) {\n        rotate([30, 0, 0]) {\n            cylinder(3, 0.2, 0.15);\n            translate([0, 0, 3]) rotate([20, 0, 0]) cylinder(2, 0.15, 0.1);\n        }\n    }\n    \n    // Right antenna\n    translate([0, -1.5, 18]) {\n        rotate([30, 0, 0]) {\n            cylinder(3, 0.2, 0.15);\n            translate([0, 0, 3]) rotate([20, 0, 0]) cylinder(2, 0.15, 0.1);\n        }\n    }\n}\n\n// Generate the yellowjacket\nyellowjacket();",
    "renders": true
  },
  {
    "animal": "yabby",
    "openscad_code": "// Yabby (Cherax destructor) – medium-complexity realistic model\n// Overall length ≈ 80 mm – printable without supports\n\n$fn = 24;               // moderate facet count for smooth curves\nwall = 1.2;             // wall thickness for FDM printing\nscale = 0.7;            // global scale to bring parts into 50–100 mm range\n\nmodule body() {\n    // main cephalothorax shell\n    difference() {\n        scale([1, 0.9, 0.6])\n            sphere(d=30 * scale);\n        translate([0, 0, -2 * scale])\n            cube([40, 40, 10] * scale, center=true);\n    }\n\n    // abdomen segments (6 rings)\n    for (i = [0:5]) {\n        translate([0, 0, (-6 - i * 4.5) * scale])\n            scale([1 - i * 0.05, 1 - i * 0.05, 0.3])\n                cylinder(h=5 * scale, d1=24 * scale, d2=22 * scale);\n    }\n\n    // tail fan (telson + uropods)\n    translate([0, 0, (-32) * scale])\n        union() {\n            // telson\n            scale([0.7, 1, 0.2])\n                sphere(d=20 * scale);\n            // left uropod\n            translate([-9 * scale, 0, 0])\n                rotate([0, 0, 25])\n                scale([0.4, 0.8, 0.1])\n                    sphere(d=20 * scale);\n            // right uropod\n            mirror([1, 0, 0])\n                translate([-9 * scale, 0, 0])\n                    rotate([0, 0, 25])\n                    scale([0.4, 0.8, 0.1])\n                        sphere(d=20 * scale);\n        }\n}\n\nmodule claw(side=1) {   // side = 1 (right), -1 (left)\n    // coxa\n    translate([side * 12 * scale, 0, 3 * scale])\n        rotate([0, 90, 0])\n            cylinder(h=8 * scale, d=8 * scale);\n\n    // merus\n    translate([side * (12 + 4) * scale, 0, 3 * scale])\n        rotate([0, 90, -20 * side])\n            cylinder(h=12 * scale, d1=7 * scale, d2=6 * scale);\n\n    // carpus\n    translate([side * (12 + 4 + 10) * scale, 0, 3 + 1 * scale])\n        rotate([0, 90, -60 * side])\n            cylinder(h=10 * scale, d1=6 * scale, d2=5 * scale);\n\n    // propodus (movable finger)\n    translate([side * (12 + 4 + 10 + 8) * scale, 0, 3 + 1 * scale])\n        rotate([0, 90, -100 * side])\n            union() {\n                cylinder(h=14 * scale, d1=5 * scale, d2=4 * scale);\n                // claw tip (dactyl)\n                translate([0, 7 * scale, 0])\n                    rotate([0, 0, -30 * side])\n                        cylinder(h=8 * scale, d1=4 * scale, d2=2 * scale);\n            }\n\n    // fixed finger (pollex)\n    translate([side * (12 + 4 + 10 + 8) * scale, 0, 3 + 1 * scale])\n        rotate([0, 90, -100 * side])\n            translate([0, -7 * scale, 0])\n                rotate([0, 0, 30 * side])\n                    cylinder(h=8 * scale, d1=4 * scale, d2=2 * scale);\n}\n\nmodule leg(seg=1, side=1) {\n    // 3-segment walking leg\n    translate([side * 14 * scale, 0, (-5 - seg * 4) * scale])\n        rotate([0, 0, side * (30 + seg * 10)])\n            union() {\n                // coxa\n                cylinder(h=4 * scale, d=3 * scale);\n                // basis-ischium\n                translate([0, 2 * scale, 0])\n                    rotate([90, 0, 0])\n                        cylinder(h=6 * scale, d=2.5 * scale);\n                // merus-carpus\n                translate([0, 2 + 3, 0] * scale)\n                    rotate([110, 0, 0])\n                        cylinder(h=7 * scale, d=2 * scale);\n                // propodus-dactyl\n                translate([0, 2 + 3 + 3.5, 0] * scale)\n                    rotate([120, 0, 0])\n                        cylinder(h=6 * scale, d=1.5 * scale);\n            }\n}\n\nmodule antennae() {\n    // antennules (short pair)\n    translate([0, 7 * scale, 8 * scale])\n        rotate([90 - 30, 0, 25])\n            cylinder(h=12 * scale, d=1 * scale);\n    translate([0, 7 * scale, 8 * scale])\n        rotate([90 - 30, 0, -25])\n            cylinder(h=12 * scale, d=1 * scale);\n    // antennae (long pair)\n    translate([0, 8 * scale, 7 * scale])\n        rotate([90 - 40, 0, 15])\n            cylinder(h=20 * scale, d=1.2 * scale);\n    translate([0, 8 * scale, 7 * scale])\n        rotate([90 - 40, 0, -15])\n            cylinder(h=20 * scale, d=1.2 * scale);\n}\n\nmodule eye() {\n    // eyestalk\n    translate([5 * scale, 7 * scale, 10 * scale])\n        rotate([0, 30, 0])\n            cylinder(h=6 * scale, d=3 * scale);\n    // cornea\n    translate([5 + 3, 7, 10 + 3 * sin(30)] * scale)\n        sphere(d=3 * scale);\n}\n\nmodule rostrum() {\n    // beak-like projection between eyes\n    translate([0, 9 * scale, 10 * scale])\n        rotate([0, -30, 0])\n            cylinder(h1=6 * scale, h2=0, d1=4 * scale, d2=1 * scale);\n}\n\n// ============ ASSEMBLY ============\nunion() {\n    body();\n    // claws\n    claw(1);\n    claw(-1);\n    // 3 pairs of walking legs each side\n    for (s = [1, -1])\n        for (i = [0:2])\n            leg(i + 1, s);\n    // head details\n    eye();\n    mirror([1, 0, 0])\n        eye();\n    rostrum();\n    antennae();\n}",
    "renders": true
  },
  {
    "animal": "yapok",
    "openscad_code": "// Yapok (water opossum) - medium complexity realistic style\n// Overall dimensions: ~80mm long, ~30mm wide, ~20mm tall\n\nmodule yapok() {\n    // Body\n    union() {\n        // Main torso\n        translate([0, 0, 10]) \n            sphere(d=25, $fn=32);\n        \n        // Lower body extension\n        translate([0, 0, 5])\n            cylinder(h=20, d1=20, d2=15, $fn=24);\n        \n        // Head\n        translate([-15, 0, 12])\n            sphere(d=15, $fn=32);\n        \n        // Snout\n        translate([-23, 0, 12])\n            cylinder(h=8, d=8, $fn=16);\n        \n        // Tail\n        rotate([0, 20, 0])\n            translate([12, 0, 8])\n                cylinder(h=30, d1=10, d2=4, $fn=16);\n        \n        // Ears\n        for(side = [-1, 1]) {\n            translate([-18, side*8, 18])\n                rotate([0, side*20, 0])\n                    cylinder(h=6, d=6, $fn=8);\n        }\n        \n        // Legs\n        for(pos = [[-5, 1], [5, 1], [-3, -1], [3, -1]]) {\n            translate([pos[0]*6, pos[1]*8, 0])\n                cylinder(h=8, d=8, $fn=16);\n            \n            // Feet\n            translate([pos[0]*6, pos[1]*10, -2])\n                sphere(d=6, $fn=16);\n            \n            // Webbing between toes\n            for(toe = [-1, 0, 1]) {\n                translate([pos[0]*6 + toe*2, pos[1]*10, -4])\n                    sphere(d=2, $fn=8);\n            }\n        }\n        \n        // Eyes\n        for(side = [-1, 1]) {\n            translate([-21, side*5, 14])\n                sphere(d=3, $fn=16);\n        }\n        \n        // Nose\n        translate([-27, 0, 12])\n            sphere(d=2, $fn=8);\n        \n        // Whiskers\n        for(side = [-1, 1]) {\n            for(i = [0:2]) {\n                rotate([0, 0, side*(30 + i*10)])\n                    translate([-25, side*(5 + i*2), 12])\n                        cylinder(h=8, d=0.5, $fn=8);\n            }\n        }\n        \n        // Fur texture - simplified\n        for(i = [0:5]) {\n            rotate([0, 0, i*60])\n                translate([0, 0, 8])\n                    cylinder(h=3, d=1, $fn=6);\n        }\n    }\n}\n\n// Base for 3D printing stability\ndifference() {\n    yapok();\n    \n    // Remove bottom to create flat base\n    translate([-30, -20, -5])\n        cube([60, 40, 5]);\n}\n\n// Add support base\ntranslate([-30, -20, -5])\n    cube([60, 40, 1]);",
    "renders": true
  },
  {
    "animal": "zebra",
    "openscad_code": "// Zebra - Realistic style, medium complexity\n// Approx 80mm long, 50mm tall, 20mm wide\n\n// Main parameters\nbody_length = 60;\nbody_height = 35;\nbody_width = 18;\nleg_length = 25;\nleg_diameter = 6;\nneck_length = 20;\nhead_length = 25;\nhead_height = 18;\ntail_length = 30;\near_size = 5;\n\n// Wall thickness for 3D printing\nwall = 2;\n\nmodule body() {\n    // Main torso\n    difference() {\n        // Outer body\n        scale([1.2, 0.8, 1])\n            sphere(d=body_height, $fn=32);\n        \n        // Hollow inside\n        translate([0, 0, -2])\n            scale([1.15, 0.75, 0.9])\n                sphere(d=body_height-wall*2, $fn=32);\n    }\n    \n    // Rump\n    translate([-body_length/2+5, 0, -5])\n        scale([0.8, 0.9, 0.9])\n            sphere(d=body_height*0.9, $fn=32);\n    \n    // Chest\n    translate([body_length/2-10, 0, -8])\n        scale([1, 0.7, 0.8])\n            sphere(d=body_height*0.8, $fn=32);\n}\n\nmodule leg(x_pos, y_pos, front_leg=true) {\n    // Upper leg\n    translate([x_pos, y_pos, -body_height/2])\n        rotate([0, front_leg ? -10 : 10, 0])\n            cylinder(h=leg_length*0.7, d=leg_diameter, $fn=16);\n    \n    // Lower leg\n    translate([x_pos, y_pos, -body_height/2-leg_length*0.7])\n        rotate([0, front_leg ? -15 : 15, 0])\n            cylinder(h=leg_length*0.4, d=leg_diameter*0.8, $fn=16);\n    \n    // Hoof\n    translate([x_pos, y_pos, -body_height/2-leg_length+2])\n        cylinder(h=4, d=leg_diameter*1.2, $fn=8);\n}\n\nmodule neck() {\n    // Neck base\n    translate([body_length/2-15, 0, body_height/2-10])\n        rotate([-30, 0, 0])\n            cylinder(h=neck_length, d1=body_width*0.8, d2=body_width*0.6, $fn=16);\n}\n\nmodule head() {\n    // Main head shape\n    translate([body_length/2-15, 0, body_height/2+neck_length-15])\n        rotate([-45, 0, 0])\n            scale([1.3, 0.7, 1])\n                sphere(d=head_height, $fn=32);\n    \n    // Snout\n    translate([body_length/2+head_length-20, 0, body_height/2+neck_length-25])\n        scale([1.5, 0.6, 0.5])\n            sphere(d=head_height*0.8, $fn=16);\n    \n    // Ears\n    translate([body_length/2-5, -head_height/3, body_height/2+neck_length-5])\n        rotate([0, -20, -30])\n            scale([0.3, 1, 2])\n                sphere(d=ear_size, $fn=8);\n    \n    translate([body_length/2-5, head_height/3, body_height/2+neck_length-5])\n        rotate([0, 20, 30])\n            scale([0.3, 1, 2])\n                sphere(d=ear_size, $fn=8);\n}\n\nmodule tail() {\n    // Tail base\n    translate([-body_length/2+5, 0, -5])\n        rotate([120, 0, 0])\n            cylinder(h=tail_length*0.3, d=leg_diameter, $fn=8);\n    \n    // Tail tuft\n    translate([-body_length/2+5, 0, -5-tail_length*0.3])\n        sphere(d=leg_diameter*1.5, $fn=16);\n}\n\nmodule stripes() {\n    // Body stripes\n    for(i=[0:15]) {\n        rotate([0, 0, i*25-180])\n            translate([i*2-15, 0, 0])\n                scale([0.5, body_width*1.2, body_height*1.2])\n                    cylinder(h=body_length/20, d=body_width, $fn=3);\n    }\n    \n    // Leg stripes\n    for(i=[0:3]) {\n        translate([body_length/2-10, body_width/2-2, -i*6-body_height/2])\n            rotate([90, 0, 0])\n                scale([1, leg_diameter*1.2, 1])\n                    cylinder(h=2, d=leg_diameter*1.4, $fn=3);\n        \n        translate([body_length/2-10, -body_width/2+2, -i*6-body_height/2])\n            rotate([90, 0, 0])\n                scale([1, leg_diameter*1.2, 1])\n                    cylinder(h=2, d=leg_diameter*1.4, $fn=3);\n    }\n}\n\n// Assemble the zebra\nunion() {\n    body();\n    neck();\n    head();\n    tail();\n    \n    // Legs\n    leg(body_length/2-15, body_width/2-2, true);  // Front right\n    leg(body_length/2-15, -body_width/2+2, true); // Front left\n    leg(-body_length/2+15, body_width/2-2, false); // Back right\n    leg(-body_length/2+15, -body_width/2+2, false); // Back left\n    \n    // Stripes\n    stripes();\n}",
    "renders": true
  },
  {
    "animal": "zebu",
    "openscad_code": "// Zebu - Medium complexity realistic style\n// Overall dimensions: 80mm long, 45mm tall, 25mm wide\n\n// Parameters\nhump_height = 12;\nbody_length = 45;\nbody_height = 25;\nbody_width = 18;\nleg_height = 20;\nneck_length = 15;\nhead_length = 12;\near_size = 4;\nhorn_length = 8;\ntail_length = 18;\n\nmodule leg(x_pos, z_pos) {\n    // Leg with slight taper for printability\n    translate([x_pos, -body_width/4, z_pos]) {\n        rotate([0, 15, 0]) {\n            hull() {\n                cylinder(h=leg_height, d1=6, d2=5);\n                translate([0, 0, leg_height]) \n                    cylinder(h=2, d=5.5);\n            }\n        }\n    }\n}\n\nmodule hump() {\n    // Characteristic zebu hump\n    translate([body_length/3, 0, body_height/2]) {\n        difference() {\n            sphere(d=hump_height);\n            translate([0, 0, -hump_height/2]) \n                cube([hump_height+2, hump_height+2, hump_height], center=true);\n        }\n    }\n}\n\nmodule neck_and_head() {\n    // Neck connecting to body\n    translate([-body_length/2 - neck_length/2, 0, body_height/2 + leg_height/2]) {\n        rotate([0, -30, 0]) {\n            hull() {\n                sphere(d=8);\n                translate([-neck_length, 0, 0]) sphere(d=6);\n            }\n            \n            // Head\n            translate([-neck_length - head_length/2, 0, 2]) {\n                rotate([0, -20, 0]) {\n                    hull() {\n                        sphere(d=6);\n                        translate([-head_length/2, 0, 0]) sphere(d=5);\n                    }\n                    \n                    // Muzzle\n                    translate([-head_length - 2, 0, -1]) {\n                        scale([1.5, 0.8, 0.8]) sphere(d=4);\n                    }\n                    \n                    // Horns\n                    for(side = [-1, 1]) {\n                        translate([-head_length/2, side*3, 3]) {\n                            rotate([30*side, 0, 45*side]) {\n                                cylinder(h=horn_length, d1=1.5, d2=0.5);\n                            }\n                        }\n                    }\n                    \n                    // Ears\n                    for(side = [-1, 1]) {\n                        translate([-head_length + 1, side*3, 2]) {\n                            rotate([0, 0, 45*side]) {\n                                scale([1, 0.3, 0.7]) sphere(d=ear_size);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule tail() {\n    // Tail with tuft\n    translate([body_length/2 + 2, 0, body_height/2 + leg_height/3]) {\n        rotate([20, 0, 15]) {\n            hull() {\n                sphere(d=3);\n                translate([tail_length, 0, -2]) sphere(d=2);\n            }\n            // Tail tuft\n            translate([tail_length, 0, -2]) {\n                sphere(d=4);\n            }\n        }\n    }\n}\n\nmodule body() {\n    // Main body with realistic proportions\n    union() {\n        // Torso\n        hull() {\n            translate([body_length/2, 0, body_height/2 + leg_height/2]) \n                sphere(d=body_width);\n            translate([-body_length/2, 0, body_height/2 + leg_height/2]) \n                sphere(d=body_width*0.9);\n        }\n        \n        // Chest\n        translate([-body_length/3, 0, body_height/3 + leg_height/2]) {\n            sphere(d=body_width*1.1);\n        }\n        \n        // Rear\n        translate([body_length/3, 0, body_height/3 + leg_height/2]) {\n            sphere(d=body_width*1.2);\n        }\n        \n        hump();\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    \n    // Legs\n    leg(-body_length/3, 0);\n    leg(body_length/3, 0);\n    leg(-body_length/4, 0);\n    leg(body_length/4, 0);\n    \n    neck_and_head();\n    tail();\n}",
    "renders": true
  },
  {
    "animal": "zonkey",
    "openscad_code": "// Zonkey - Medium complexity realistic style\n// Body proportions based on donkey with zebra stripes\n// Overall size: 80mm length, 40mm height, 20mm width\n\n// Leg module - simple cylinder with hoof\nmodule leg(height, radius, hoof_height) {\n    union() {\n        // Upper leg\n        cylinder(h=height-hoof_height, r1=radius, r2=radius*0.8, $fn=12);\n        // Hoof\n        translate([0,0,height-hoof_height])\n            cylinder(h=hoof_height, r1=radius*0.8, r2=radius*0.6, $fn=8);\n    }\n}\n\n// Ear module - donkey-like long ears\nmodule ear(length, width, thickness) {\n    rotate([0, -10, 0])\n        scale([1, 0.7, 0.3])\n            rotate([0, 90, 0])\n                cylinder(h=length, r1=width, r2=width*0.3, $fn=8);\n}\n\n// Mane module - short upright mane with stripes\nmodule mane(length, height, width) {\n    for(i=[0:5:length]) {\n        translate([i, 0, 0])\n            cube([3, width, height], center=true);\n    }\n}\n\n// Tail module - donkey tail with tuft\nmodule tail(length, thickness) {\n    union() {\n        // Tail base\n        cylinder(h=length*0.7, r=thickness, $fn=8);\n        // Tuft\n        translate([0,0,length*0.7])\n            sphere(r=thickness*1.5, $fn=12);\n    }\n}\n\n// Stripes module - zebra-like pattern\nmodule stripes(direction) {\n    color(\"black\")\n    for(i=[-40:10:40]) {\n        if(direction == \"horizontal\") {\n            translate([i, 0, 0])\n                cube([2, 25, 20], center=true);\n        } else {\n            translate([0, i, 0])\n                cube([20, 2, 20], center=true);\n        }\n    }\n}\n\n// Main body\nunion() {\n    // Torso - elongated oval\n    scale([1.3, 0.6, 0.7])\n        sphere(r=15, $fn=32);\n    \n    // Neck\n    translate([-20, 0, 5])\n        rotate([0, 15, 0])\n            scale([0.8, 0.6, 0.6])\n                cylinder(h=20, r1=8, r2=6, $fn=16);\n    \n    // Head\n    translate([-35, 0, 15])\n        rotate([0, -20, 0])\n            scale([1, 0.7, 0.8])\n                sphere(r=10, $fn=24);\n    \n    // Snout\n    translate([-45, 0, 12])\n        rotate([0, -30, 0])\n            scale([0.8, 0.5, 0.5])\n                cylinder(h=12, r1=6, r2=4, $fn=12);\n    \n    // Legs\n    // Front left\n    translate([-25, -8, -10])\n        leg(25, 3, 5);\n    \n    // Front right\n    translate([-25, 8, -10])\n        leg(25, 3, 5);\n    \n    // Rear left\n    translate([20, -8, -10])\n        leg(25, 3, 5);\n    \n    // Rear right\n    translate([20, 8, -10])\n        leg(25, 3, 5);\n    \n    // Ears\n    translate([-40, -5, 25])\n        rotate([0, 0, -20])\n            ear(15, 4, 2);\n    \n    translate([-40, 5, 25])\n        rotate([0, 0, 20])\n            ear(15, 4, 2);\n    \n    // Mane\n    translate([-30, 0, 15])\n        rotate([0, 90, 0])\n            mane(45, 8, 3);\n    \n    // Tail\n    translate([30, 0, 5])\n        rotate([30, 0, 0])\n            tail(20, 2);\n    \n    // Eyes\n    translate([-43, -4, 18])\n        sphere(r=1.5, $fn=8);\n    \n    translate([-43, 4, 18])\n        sphere(r=1.5, $fn=8);\n    \n    // Nostrils\n    translate([-48, -2, 11])\n        sphere(r=1, $fn=6);\n    \n    translate([-48, 2, 11])\n        sphere(r=1, $fn=6);\n}\n\n// Apply stripes to body\ndifference() {\n    union() {\n        // Horizontal stripes on torso\n        translate([0, 0, 5])\n            stripes(\"horizontal\");\n        \n        // Vertical stripes on legs\n        translate([-25, 0, 2.5])\n            stripes(\"vertical\");\n        \n        translate([20, 0, 2.5])\n            stripes(\"vertical\");\n        \n        // Neck stripes\n        translate([-20, 0, 12])\n            rotate([0, 15, 0])\n                stripes(\"horizontal\");\n    }\n}",
    "renders": true
  },
  {
    "animal": "zooxanthellae",
    "openscad_code": "// Zooxanthellae (symbiotic dinoflagellate)\n// Medium-complexity realistic model for 3D printing\n// Approx. 70 mm total diameter\n\n$fn = 36; // Smooth curves for printing\n\nmodule cell_body() {\n    // Main spherical cell with slight flattening\n    difference() {\n        scale([1, 1, 0.8]) sphere(d = 40);\n        \n        // Flagellar grooves\n        for (a = [0, 120]) {\n            rotate([0, 0, a]) \n                translate([0, 18, 0]) \n                    rotate([0, 90, 0]) \n                        cylinder(h = 8, d1 = 6, d2 = 3, $fn = 12);\n        }\n    }\n}\n\nmodule theca_plates() {\n    // Armored cellulose plates (theca)\n    for (i = [0:5]) {\n        rotate([0, 0, i * 60]) {\n            translate([0, 0, 5]) \n                linear_extrude(height = 1.5) \n                    circle(d = 25, $fn = 6);\n        }\n    }\n}\n\nmodule flagella() {\n    // Two flagella in transverse and longitudinal grooves\n    // Transverse flagellum (ribbon-like)\n    rotate([0, 0, 75]) {\n        translate([0, 20, 2]) \n            rotate([90, 0, 0]) \n                scale([0.3, 1, 1]) \n                    cylinder(h = 35, d = 3);\n    }\n    \n    // Longitudinal flagellum\n    rotate([0, 0, -45]) {\n        translate([0, 20, 2]) \n            rotate([90, 0, 0]) \n                cylinder(h = 30, d = 2);\n    }\n}\n\nmodule chloroplasts() {\n    // Multiple discoid chloroplasts inside cell\n    for (i = [0:7]) {\n        rotate([0, 0, i * 45]) {\n            translate([10 * cos(i * 45), 10 * sin(i * 45), 0]) \n                scale([1, 0.6, 0.2]) \n                    sphere(d = 8);\n        }\n    }\n}\n\nmodule nucleus() {\n    // Central nucleus with nucleolus\n    translate([0, 0, 0]) {\n        sphere(d = 12);\n        translate([0, 0, 2]) \n            sphere(d = 5);\n    }\n}\n\nmodule pyrenoid() {\n    // Starch-forming pyrenoid structure\n    translate([0, 0, -8]) {\n        sphere(d = 7);\n        for (i = [0:5]) {\n            rotate([0, 0, i * 60]) \n                translate([4, 0, 0]) \n                    sphere(d = 3);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Base cell structure\n    cell_body();\n    \n    // Internal organelles\n    color([0.2, 0.6, 0.2]) chloroplasts();\n    color([0.8, 0.7, 0.9]) nucleus();\n    color([0.9, 0.8, 0.6]) pyrenoid();\n    \n    // External structures\n    color([0.9, 0.9, 0.7]) theca_plates();\n    color([0.4, 0.4, 0.4]) flagella();\n}\n\n// Add a flat base for stable 3D printing\ntranslate([0, 0, -20]) \n    cylinder(h = 2, d = 45);",
    "renders": true
  }
]