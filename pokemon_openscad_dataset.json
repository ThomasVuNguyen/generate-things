[
  {
    "pokemon": "pikachu",
    "openscad_code": "$fn = 32;\n\n// Overall scale\nscale(0.4) {\n\n// Body\ncolor([1, 0.8, 0]) {\n    union() {\n        // Torso\n        translate([0, 0, 25])\n            scale([1.2, 1, 1.4])\n            sphere(20);\n        \n        // Belly\n        color([1, 1, 0.85])\n        translate([0, -19, 20])\n            scale([1.1, 0.3, 1.2])\n            sphere(18);\n    }\n}\n\n// Head\ncolor([1, 0.8, 0]) {\n    translate([0, 0, 55])\n        sphere(22);\n}\n\n// Ears\nmodule ear(x) {\n    color([1, 0.8, 0]) {\n        translate([x, 0, 70])\n            rotate([0, x*3, 0])\n            scale([0.3, 0.1, 1.2])\n            cylinder(20, 8, 3);\n    }\n    color([0.2, 0.2, 0.2]) {\n        translate([x, 0, 85])\n            rotate([0, x*3, 0])\n            scale([0.25, 0.08, 0.7])\n            cylinder(8, 6, 2);\n    }\n}\near(12);\near(-12);\n\n// Eyes\nmodule eye(x) {\n    color([0.1, 0.1, 0.2])\n    translate([x, -20, 55])\n        scale([1, 1.2, 0.5])\n        sphere(4);\n    color([0.9, 0.9, 1])\n    translate([x+1.5, -21, 56])\n        sphere(1.5);\n}\neye(8);\neye(-8);\n\n// Cheeks\ncolor([1, 0.2, 0.2]) {\n    translate([13, -18, 50])\n        sphere(5);\n    translate([-13, -18, 50])\n        sphere(5);\n}\n\n// Nose\ncolor([0.2, 0.2, 0.2])\ntranslate([0, -21, 52])\n    scale([1.2, 0.8, 0.5])\n    sphere(1.5);\n\n// Mouth\ncolor([0.3, 0.2, 0.2])\ntranslate([0, -22, 48])\n    rotate([90, 0, 0])\n    cylinder(0.5, 5, 2, $fn=3);\n\n// Arms\nmodule arm(x) {\n    color([1, 0.8, 0])\n    translate([x, -15, 35])\n        rotate([0, 30*x, 10])\n        scale([0.4, 0.4, 1])\n        cylinder(15, 5, 4);\n}\narm(20);\narm(-20);\n\n// Legs\nmodule leg(x) {\n    color([1, 0.8, 0])\n    translate([x, 0, 0])\n        scale([0.5, 0.5, 1])\n        cylinder(20, 6, 4);\n    color([0.8, 0.6, 0])\n    translate([x, 0, 0])\n        cylinder(2, 7, 7);\n}\nleg(8);\nleg(-8);\n\n// Tail\ncolor([1, 0.8, 0]) {\n    translate([0, 20, 20])\n        rotate([0, -30, 0])\n        scale([0.8, 0.3, 2])\n        cylinder(25, 8, 4);\n}\ncolor([0.6, 0.4, 0]) {\n    translate([0, 42, 55])\n        rotate([0, -30, 0])\n        scale([0.7, 0.25, 1.5])\n        cylinder(15, 7, 3);\n}\n\n// Back stripes\ncolor([0.6, 0.4, 0]) {\n    for(i = [1:3]) {\n        translate([0, 15 - i*5, 45 - i*8])\n            rotate([90, 0, 0])\n            scale([1.2, 0.2, 1])\n            cylinder(0.5, 15, 15);\n    }\n}\n\n}",
    "renders": true
  },
  {
    "pokemon": "charizard",
    "openscad_code": "// Charizard OpenSCAD Model - Medium Complexity Realistic Style\n// Overall size ~80mm tall\n\ncolor(\"orange\")\nunion() {\n    // Body\n    translate([0, 0, 20])\n    scale([1.2, 0.8, 1])\n    sphere(15);\n\n    // Belly\n    color(\"yellow\")\n    translate([0, -5, 15])\n    scale([0.8, 0.3, 1.2])\n    sphere(12);\n\n    // Head\n    color(\"orange\")\n    translate([0, 20, 35])\n    sphere(12);\n\n    // Snout\n    color(\"orange\")\n    translate([0, 28, 33])\n    scale([0.7, 1, 0.6])\n    sphere(8);\n\n    // Horns\n    color(\"darkblue\")\n    translate([-6, 15, 42])\n    rotate([30, 0, -20])\n    cylinder(h=10, r1=3, r2=1);\n    \n    color(\"darkblue\")\n    translate([6, 15, 42])\n    rotate([30, 0, 20])\n    cylinder(h=10, r1=3, r2=1);\n\n    // Neck\n    color(\"orange\")\n    translate([0, 10, 30])\n    cylinder(h=10, r=6);\n\n    // Tail\n    color(\"orange\")\n    translate([0, -25, 25])\n    rotate([0, 20, 0])\n    cylinder(h=30, r1=6, r2=4);\n\n    // Tail flame\n    color(\"red\")\n    translate([0, -45, 35])\n    sphere(8);\n    color(\"yellow\")\n    translate([0, -47, 37])\n    sphere(5);\n\n    // Wings\n    module wing() {\n        color(\"darkblue\")\n        translate([0, 0, 0])\n        difference() {\n            scale([1, 2, 0.2])\n            sphere(10);\n            translate([0, -10, -2])\n            cube([20, 20, 4], center=true);\n        }\n    }\n\n    translate([-20, 0, 35])\n    rotate([0, 0, -30])\n    wing();\n\n    translate([20, 0, 35])\n    rotate([0, 0, 30])\n    mirror([1, 0, 0])\n    wing();\n\n    // Arms\n    color(\"orange\")\n    translate([-15, 5, 25])\n    rotate([0, 0, -45])\n    cylinder(h=15, r=3);\n\n    translate([15, 5, 25])\n    rotate([0, 0, 45])\n    cylinder(h=15, r=3);\n\n    // Legs\n    color(\"orange\")\n    translate([-8, 0, 10])\n    cylinder(h=15, r=4);\n\n    translate([8, 0, 10])\n    cylinder(h=15, r=4);\n\n    // Feet\n    color(\"orange\")\n    translate([-8, 0, 0])\n    scale([1.5, 2, 0.5])\n    sphere(5);\n\n    translate([8, 0, 0])\n    scale([1.5, 2, 0.5])\n    sphere(5);\n\n    // Eyes\n    color(\"red\")\n    translate([-4, 30, 38])\n    scale([1, 1.2, 0.5])\n    sphere(2.5);\n\n    color(\"red\")\n    translate([4, 30, 38])\n    scale([1, 1.2, 0.5])\n    sphere(2.5);\n}",
    "renders": true
  },
  {
    "pokemon": "blastoise",
    "openscad_code": "// Blastoise OpenSCAD model - medium complexity realistic style\n// Overall size: ~80mm tall\n\nmodule blastoise() {\n    color([0.2,0.5,0.8]) union() {\n        // Main body shell\n        translate([0,0,15]) scale([1.2,1,1]) sphere(d=35, $fn=20);\n        \n        // Belly plate\n        translate([0,-8,15]) rotate([90,0,0]) cylinder(h=10, d1=15, d2=20, $fn=20);\n        \n        // Head\n        translate([0,12,35]) scale([0.8,0.7,0.8]) sphere(d=20, $fn=20);\n        \n        // Arms\n        for(side=[-1,1]) {\n            translate([side*15,5,25]) rotate([0,side*30,0]) {\n                color([0.2,0.5,0.8]) cylinder(h=15, d=10, $fn=8);\n                translate([0,0,15]) rotate([0,0,side*45]) cylinder(h=15, d=8, $fn=8);\n            }\n        }\n        \n        // Legs\n        for(side=[-1,1]) {\n            translate([side*10,-10,0]) {\n                color([0.2,0.5,0.8]) cylinder(h=15, d=12, $fn=8);\n                translate([0,0,15]) color([0.3,0.3,0.3]) sphere(d=14, $fn=15);\n            }\n        }\n        \n        // Tail\n        translate([0,-15,12]) rotate([0,0,180]) cylinder(h=20, d=10, d1=8, $fn=8);\n        \n        // Water cannons\n        for(side=[-1,1]) {\n            translate([side*12,0,42]) rotate([0,side*15,0]) {\n                color([0.4,0.4,0.4]) union() {\n                    cylinder(h=15, d=8, $fn=12);\n                    translate([0,0,15]) cylinder(h=10, d=6, $fn=12);\n                }\n            }\n        }\n        \n        // Ears\n        for(side=[-1,1]) {\n            translate([side*8,18,40]) rotate([0,side*15,-30]) \n                color([0.2,0.5,0.8]) cylinder(h=8, d=5, $fn=6);\n        }\n    }\n    \n    // Eyes\n    for(side=[-1,1]) {\n        color([1,1,1]) translate([side*6,18,37]) sphere(d=4);\n        color([0,0,0]) translate([side*6,19,37]) sphere(d=2);\n    }\n    \n    // Mouth\n    color([0.2,0.2,0.2]) translate([0,20,33]) scale([1,0.5,0.5]) sphere(d=5);\n    \n    // Shell ridges\n    for(i=[-2:2]) {\n        color([0.3,0.6,0.9]) translate([i*6,0,15]) rotate([90,0,0]) \n            cylinder(h=0.5, d=25-abs(i)*3, $fn=20);\n    }\n}\n\n// Render the model\nblastoise();",
    "renders": true
  },
  {
    "pokemon": "venusaur",
    "openscad_code": "// Realistic Medium-Complexity Venusaur OpenSCAD Model\n// Approx 80 mm tall, 3D-printable\n\n// Color constants\nbody_green = [0.25,0.5,0.2];\nflower_pink = [0.9,0.4,0.6];\nleaf_green = [0.1,0.6,0.2];\neye_red = [0.8,0.1,0.1];\nskin_beige = [0.9,0.8,0.7];\n\n// Main body\nmodule body() {\n    color(body_green)\n    union() {\n        // Torso\n        translate([0,0,25])\n            scale([1.2,1,1.1])\n            sphere(20,$fn=32);\n        \n        // Belly\n        color(skin_beige)\n        translate([0,-18,15])\n            scale([0.8,0.4,0.6])\n            sphere(15,$fn=24);\n        \n        // Back hump\n        translate([0,5,30])\n            scale([1.3,1.2,0.8])\n            sphere(15,$fn=24);\n    }\n}\n\n// Flower on back\nmodule flower() {\n    translate([0,0,45])\n    rotate([0,0,0])\n    union() {\n        // Stem\n        color(leaf_green)\n        cylinder(h=15,r1=4,r2=6,$fn=12);\n        \n        // Petals\n        color(flower_pink)\n        for(i=[0:5]) {\n            rotate([0,0,i*60])\n            translate([0,12,15])\n            rotate([90,0,0])\n            scale([1.5,0.5,1])\n            cylinder(h=8,r1=0,r2=6,$fn=12);\n        }\n        \n        // Center\n        color([0.4,0.2,0.3])\n        translate([0,0,15])\n        sphere(4,$fn=16);\n    }\n}\n\n// Leg module\nmodule leg(side) {\n    translate([side*12,0,0])\n    union() {\n        // Upper leg\n        color(body_green)\n        translate([0,0,12])\n            rotate([0,-side*10,0])\n            scale([0.8,0.8,1.2])\n            cylinder(h=20,r1=6,r2=5,$fn=12);\n        \n        // Foot\n        translate([0,-2,0])\n            scale([1.5,2,0.8])\n            sphere(5,$fn=12);\n    }\n}\n\n// Arm module\nmodule arm(side) {\n    translate([side*18,0,28])\n    rotate([0,0,side*20])\n    union() {\n        // Upper arm\n        color(body_green)\n        rotate([0,0,90])\n        scale([0.8,0.8,1.2])\n        cylinder(h=15,r1=5,r2=4,$fn=12);\n        \n        // Vine\n        color(leaf_green)\n        translate([0,side*8,0])\n        rotate([90,0,0])\n        cylinder(h=20,r1=1.5,$fn=8);\n    }\n}\n\n// Head\nmodule head() {\n    color(body_green)\n    union() {\n        // Main head\n        translate([0,-30,40])\n        scale([1.1,1.3,1])\n        sphere(15,$fn=32);\n        \n        // Snout\n        translate([0,-45,38])\n        scale([0.8,0.6,0.6])\n        sphere(10,$fn=24);\n        \n        // Eyes\n        color(eye_red)\n        translate([-8,-38,45])\n        scale([0.8,1,1])\n        sphere(3,$fn=12);\n        translate([8,-38,45])\n        scale([0.8,1,1])\n        sphere(3,$fn=12);\n        \n        // Eye whites\n        color([1,1,1])\n        translate([-7,-39,46])\n        sphere(1,$fn=8);\n        translate([7,-39,46])\n        sphere(1,$fn=8);\n        \n        // Ears\n        color(body_green)\n        translate([-12,-20,52])\n        rotate([0,0,-30])\n        scale([0.5,1.2,2])\n        sphere(5,$fn=12);\n        translate([12,-20,52])\n        rotate([0,0,30])\n        scale([0.5,1.2,2])\n        sphere(5,$fn=12);\n        \n        // Mouth\n        color([0.2,0.1,0.1])\n        translate([0,-48,35])\n        cube([8,1,2],center=true);\n    }\n}\n\n// Leaf modules for back\nmodule back_leaf(x,y,angle) {\n    color(leaf_green)\n    translate([x,y,40])\n    rotate([0,0,angle])\n    scale([1,0.1,2])\n    cylinder(h=15,r1=0,r2=8,$fn=3);\n}\n\n// Assembly\nscale(0.8)\nunion() {\n    body();\n    \n    // Legs\n    leg(1);\n    leg(-1);\n    \n    // Arms\n    arm(1);\n    arm(-1);\n    \n    // Head\n    head();\n    \n    // Flower\n    flower();\n    \n    // Back leaves\n    back_leaf(15,15,45);\n    back_leaf(-15,15,-45);\n    back_leaf(0,20,0);\n}",
    "renders": true
  },
  {
    "pokemon": "mewtwo",
    "openscad_code": "// Mewtwo - Realistic Medium Complexity\n// 3D printable model with no overhangs\n\n$fn = 32;\n\n// Colors\ncolor_purple = [0.4, 0.2, 0.6];\ncolor_body = [0.85, 0.8, 0.9];\ncolor_stomach = [0.7, 0.7, 0.9];\ncolor_eyes = [0.9, 0.9, 0.1];\n\n// Main module\nmodule mewtwo() {\n    scale(0.5)\n    union() {\n        // Head\n        translate([0, 0, 35])\n        head();\n        \n        // Neck\n        translate([0, 0, 25])\n        cylinder(h=10, r1=8, r2=6);\n        \n        // Body\n        translate([0, 0, 12])\n        body();\n        \n        // Arms\n        translate([12, 0, 22])\n        rotate([0, 0, 15])\n        arm();\n        \n        translate([-12, 0, 22])\n        rotate([0, 0, -15])\n        mirror([1, 0, 0])\n        arm();\n        \n        // Legs\n        translate([6, 0, 0])\n        leg();\n        \n        translate([-6, 0, 0])\n        mirror([1, 0, 0])\n        leg();\n        \n        // Tail\n        translate([0, -12, 8])\n        rotate([0, 15, 0])\n        tail();\n        \n        // Tubes\n        for(i = [-1, 1]) {\n            translate([i*8, 8, 18])\n            rotate([90, 0, 0])\n            tube();\n        }\n    }\n}\n\nmodule head() {\n    color(color_body)\n    union() {\n        // Main head\n        sphere(r=12);\n        \n        // Snout\n        translate([0, 8, -2])\n        scale([1, 1.5, 0.8])\n        sphere(r=6);\n        \n        // Eyes\n        color(color_eyes)\n        for(i = [-1, 1]) {\n            translate([i*6, 5, 3])\n            rotate([0, 0, 0])\n            sphere(r=2.5);\n            \n            // Eye pupils\n            color([0, 0, 0])\n            translate([i*6.5, 5.5, 3.5])\n            sphere(r=1);\n        }\n        \n        // Ears\n        color(color_body)\n        for(i = [-1, 1]) {\n            translate([i*10, 0, 8])\n            rotate([0, 30*i, 0])\n            scale([1, 0.5, 2])\n            cylinder(h=12, r1=4, r2=2);\n        }\n        \n        // Purple markings\n        color(color_purple)\n        translate([0, 12, 0])\n        rotate([90, 0, 0])\n        cylinder(h=15, r=5);\n    }\n}\n\nmodule body() {\n    color(color_body)\n    difference() {\n        // Main torso\n        scale([1.2, 1, 1.5])\n        sphere(r=15);\n        \n        // Stomach area\n        color(color_stomach)\n        translate([0, 8, -6])\n        scale([0.8, 0.7, 0.5])\n        sphere(r=12);\n        \n        // Purple chest marking\n        color(color_purple)\n        translate([0, 10, -5])\n        rotate([90, 0, 0])\n        cylinder(h=8, r=6);\n    }\n}\n\nmodule arm() {\n    color(color_body)\n    union() {\n        // Upper arm\n        rotate([0, 0, 0])\n        cylinder(h=12, r1=4, r2=3);\n        \n        // Forearm\n        translate([0, 12, 0])\n        rotate([0, -30, 0])\n        cylinder(h=10, r1=3, r2=2.5);\n        \n        // Hand\n        translate([0, 20, -5])\n        sphere(r=3);\n        \n        // Fingers\n        for(i = [0:2]) {\n            rotate([0, 0, i*30-30])\n            translate([0, 2, 0])\n            cylinder(h=3, r=0.8);\n        }\n    }\n}\n\nmodule leg() {\n    color(color_body)\n    union() {\n        // Thigh\n        cylinder(h=12, r1=5, r2=4);\n        \n        // Shin\n        translate([0, 0, -12])\n        rotate([0, 15, 0])\n        cylinder(h=10, r1=4, r2=3);\n        \n        // Foot\n        translate([0, -2, -22])\n        scale([1.5, 2, 0.8])\n        sphere(r=4);\n    }\n}\n\nmodule tail() {\n    color(color_purple)\n    union() {\n        // Base\n        cylinder(h=5, r1=5, r2=4);\n        \n        // Main tail segments\n        for(i = [0:3]) {\n            translate([0, -i*8, -i*2])\n            rotate([0, 10*i, 0])\n            cylinder(h=8, r1=4-i*0.5, r2=3.5-i*0.5);\n        }\n        \n        // Tail tip\n        translate([0, -32, -8])\n        sphere(r=2);\n    }\n}\n\nmodule tube() {\n    color(color_purple)\n    difference() {\n        // Outer tube\n        cylinder(h=15, r=3);\n        \n        // Inner hole\n        cylinder(h=16, r=2);\n    }\n}\n\n// Generate model\nmewtwo();",
    "renders": true
  },
  {
    "pokemon": "mew",
    "openscad_code": "// Mew - Realistic Style OpenSCAD Model\n// Medium complexity 3D printable design\n\n// Colors\ncolor_pink = [255,192,203];\ncolor_cream = [255,235,205];\ncolor_blue = [173,216,230];\n\n// Main body\nmodule mew_body() {\n    color(color_pink)\n    union() {\n        // Torso\n        translate([0,0,15])\n        scale([1,0.8,1.2])\n        sphere(20);\n        \n        // Chest\n        translate([0,-5,10])\n        scale([0.6,0.5,0.8])\n        sphere(15);\n        \n        // Back curve\n        translate([0,0,25])\n        rotate([90,0,0])\n        cylinder(30, 15, 10);\n    }\n}\n\n// Head\nmodule mew_head() {\n    color(color_pink)\n    union() {\n        // Main head sphere\n        translate([0,0,50])\n        sphere(18);\n        \n        // Snout\n        translate([0,-15,45])\n        scale([0.8,0.6,0.7])\n        sphere(12);\n        \n        // Forehead bump\n        translate([0,0,60])\n        scale([0.5,0.5,0.6])\n        sphere(10);\n    }\n    \n    // Eyes\n    color(color_blue)\n    difference() {\n        // Left eye\n        translate([-10,-15,50])\n        scale([1.2,1,1])\n        sphere(5);\n        // Pupil\n        translate([-12,-17,52])\n        sphere(2);\n        \n        // Right eye\n        translate([10,-15,50])\n        scale([1.2,1,1])\n        sphere(5);\n        // Pupil\n        translate([12,-17,52])\n        sphere(2);\n    }\n    \n    // Mouth\n    color([0,0,0])\n    translate([0,-22,42])\n    rotate([90,0,0])\n    scale([1,0.5,0.5])\n    cylinder(2, 2, 0);\n}\n\n// Ears\nmodule mew_ears() {\n    color(color_pink)\n    union() {\n        // Left ear\n        translate([-15,0,60])\n        rotate([0,-30,0])\n        scale([0.7,0.4,1.5])\n        sphere(10);\n        \n        // Right ear\n        translate([15,0,60])\n        rotate([0,30,0])\n        scale([0.7,0.4,1.5])\n        sphere(10);\n    }\n}\n\n// Arms\nmodule mew_arms() {\n    color(color_pink)\n    union() {\n        // Left arm\n        translate([-25,0,30])\n        rotate([0,0,-45])\n        scale([0.4,0.4,1])\n        sphere(12);\n        \n        // Right arm\n        translate([25,0,30])\n        rotate([0,0,45])\n        scale([0.4,0.4,1])\n        sphere(12);\n    }\n}\n\n// Legs\nmodule mew_legs() {\n    color(color_pink)\n    union() {\n        // Left leg\n        translate([-12,-8,0])\n        rotate([0,0,0])\n        scale([0.4,0.4,1])\n        cylinder(15, 8, 6);\n        \n        // Right leg\n        translate([12,-8,0])\n        rotate([0,0,0])\n        scale([0.4,0.4,1])\n        cylinder(15, 8, 6);\n    }\n}\n\n// Tail\nmodule mew_tail() {\n    color(color_pink)\n    union() {\n        // Tail base\n        translate([0,25,25])\n        rotate([0,0,0])\n        scale([0.5,1.5,0.5])\n        sphere(15);\n        \n        // Tail tip\n        translate([0,45,35])\n        scale([0.3,0.8,0.3])\n        sphere(10);\n        \n        // Tail connector\n        translate([0,35,30])\n        scale([1,1,0.5])\n        sphere(8);\n    }\n}\n\n// Feet\nmodule mew_feet() {\n    color(color_cream)\n    union() {\n        // Left foot\n        translate([-12,-8,-5])\n        scale([1.2,1.5,0.8])\n        sphere(8);\n        \n        // Right foot\n        translate([12,-8,-5])\n        scale([1.2,1.5,0.8])\n        sphere(8);\n    }\n}\n\n// Belly marking\nmodule mew_belly() {\n    color(color_cream)\n    translate([0,0,15])\n    scale([0.6,0.7,0.8])\n    sphere(18);\n}\n\n// Main assembly\nmodule mew() {\n    union() {\n        mew_body();\n        mew_head();\n        mew_ears();\n        mew_arms();\n        mew_legs();\n        mew_tail();\n        mew_feet();\n        mew_belly();\n    }\n}\n\n// Generate the model\nscale([0.8,0.8,0.8])\nmew();",
    "renders": true
  },
  {
    "pokemon": "lugia",
    "openscad_code": "// Lugia - Realistic Style\n// Scale: 80mm tall\n\n// Main colors\ncolor_body = [0.85, 0.87, 0.89]; // Light silver\ncolor_accents = [0.05, 0.15, 0.35]; // Dark blue\ncolor_eyes = [0.9, 0.1, 0.1]; // Red\n\n// Body proportions\nscale_factor = 80/100;\n\nmodule head() {\n    union() {\n        // Main head shape\n        translate([0, 0, 40*scale_factor])\n            scale([1, 1.2, 1.3])\n            sphere(15*scale_factor);\n        \n        // Snout\n        translate([0, -18*scale_factor, 35*scale_factor])\n            scale([0.8, 0.6, 0.8])\n            sphere(12*scale_factor);\n        \n        // Back head extension\n        translate([0, 12*scale_factor, 42*scale_factor])\n            scale([0.6, 0.4, 0.5])\n            sphere(10*scale_factor);\n    }\n}\n\nmodule ears() {\n    // Left ear\n    translate([-12*scale_factor, 5*scale_factor, 52*scale_factor])\n        rotate([0, -20, -30])\n        scale([0.3, 2, 0.2])\n        cylinder(h=20*scale_factor, r=5*scale_factor);\n    \n    // Right ear\n    translate([12*scale_factor, 5*scale_factor, 52*scale_factor])\n        rotate([0, -20, 30])\n        scale([0.3, 2, 0.2])\n        cylinder(h=20*scale_factor, r=5*scale_factor);\n}\n\nmodule eyes() {\n    // Left eye\n    translate([-8*scale_factor, -15*scale_factor, 43*scale_factor])\n        rotate([0, 10, 0])\n        scale([1, 0.5, 0.8])\n        sphere(4*scale_factor);\n    \n    // Right eye\n    translate([8*scale_factor, -15*scale_factor, 43*scale_factor])\n        rotate([0, 10, 0])\n        scale([1, 0.5, 0.8])\n        sphere(4*scale_factor);\n}\n\nmodule neck() {\n    translate([0, 5*scale_factor, 30*scale_factor])\n        rotate([0, 0, 0])\n        scale([1, 0.8, 1.5])\n        cylinder(h=15*scale_factor, r1=12*scale_factor, r2=8*scale_factor);\n}\n\nmodule body() {\n    union() {\n        // Main torso\n        translate([0, 0, 15*scale_factor])\n            scale([1.2, 1, 1.5])\n            sphere(18*scale_factor);\n        \n        // Belly\n        translate([0, -5*scale_factor, 10*scale_factor])\n            scale([0.9, 0.7, 1.2])\n            sphere(15*scale_factor);\n    }\n}\n\nmodule wing() {\n    // Wing base\n    translate([0, 0, 0])\n        cube([5*scale_factor, 30*scale_factor, 2*scale_factor]);\n    \n    // Main wing\n    translate([0, -15*scale_factor, -5*scale_factor])\n        rotate([0, 15, 0])\n        cube([3*scale_factor, 20*scale_factor, 1*scale_factor]);\n    \n    // Wing tip\n    translate([0, -30*scale_factor, -8*scale_factor])\n        rotate([0, 30, 0])\n        cube([2*scale_factor, 10*scale_factor, 0.5*scale_factor]);\n}\n\nmodule wings() {\n    // Left wing\n    translate([-25*scale_factor, 0, 25*scale_factor])\n        rotate([0, 0, 30])\n        wing();\n    \n    // Right wing\n    translate([25*scale_factor, 0, 25*scale_factor])\n        rotate([0, 0, -30])\n        mirror([1, 0, 0])\n        wing();\n}\n\nmodule tail() {\n    union() {\n        // Main tail\n        translate([0, 20*scale_factor, 10*scale_factor])\n            rotate([0, 0, 0])\n            scale([0.6, 1, 0.4])\n            cylinder(h=25*scale_factor, r1=8*scale_factor, r2=6*scale_factor);\n        \n        // Tail fin\n        translate([0, 40*scale_factor, 8*scale_factor])\n            rotate([0, 0, 0])\n            scale([1, 0.1, 2])\n            cube([12*scale_factor, 3*scale_factor, 8*scale_factor]);\n    }\n}\n\nmodule back_plates() {\n    for(i = [0:2]) {\n        translate([0, 5*scale_factor + i*5*scale_factor, 25*scale_factor - i*3*scale_factor])\n            rotate([0, 0, 0])\n            scale([0.5, 0.3, 0.8])\n            sphere(5*scale_factor);\n    }\n}\n\nmodule feet() {\n    // Left foot\n    translate([-10*scale_factor, 0, 5*scale_factor])\n        union() {\n            cylinder(h=8*scale_factor, r=4*scale_factor);\n            translate([0, 2*scale_factor, -5*scale_factor])\n                cube([8*scale_factor, 6*scale_factor, 5*scale_factor]);\n        }\n    \n    // Right foot\n    translate([10*scale_factor, 0, 5*scale_factor])\n        union() {\n            cylinder(h=8*scale_factor, r=4*scale_factor);\n            translate([0, 2*scale_factor, -5*scale_factor])\n                cube([8*scale_factor, 6*scale_factor, 5*scale_factor]);\n        }\n}\n\n// Assembly\ncolor(color_body) {\n    head();\n    neck();\n    body();\n    tail();\n    feet();\n    wings();\n    ears();\n}\n\ncolor(color_accents) {\n    back_plates();\n}\n\ncolor(color_eyes) {\n    eyes();\n}",
    "renders": true
  },
  {
    "pokemon": "hooh",
    "openscad_code": "// Ho-oh Pokemon - Medium Complexity Realistic Style\n// Designed for 3D printing at ~80mm height\n\n$fn = 32;\n\n// Main colors\ncolor_gold = [0.8, 0.6, 0.1];\ncolor_red = [0.8, 0.1, 0.1];\ncolor_green = [0.1, 0.6, 0.2];\ncolor_white = [0.9, 0.9, 0.9];\ncolor_black = [0.1, 0.1, 0.1];\ncolor_beak = [0.9, 0.5, 0.1];\n\n// Overall scale\nscale(0.4) {\n    // Main body\n    color(color_gold) {\n        // Torso\n        translate([0, 0, 30]) {\n            difference() {\n                sphere(15);\n                translate([0, 0, -15]) cube([30, 30, 30], center=true);\n            }\n        }\n        \n        // Neck\n        translate([0, 0, 45]) {\n            cylinder(h=15, r1=8, r2=6);\n        }\n        \n        // Head\n        translate([0, 0, 60]) {\n            sphere(12);\n        }\n    }\n    \n    // Wings\n    module wing() {\n        color(color_red) {\n            // Upper wing\n            translate([-20, 0, 35]) {\n                rotate([0, 0, 20]) {\n                    scale([2, 0.5, 0.2]) sphere(10);\n                }\n            }\n            \n            // Lower wing\n            translate([-18, 0, 25]) {\n                rotate([0, 0, -10]) {\n                    scale([1.8, 0.4, 0.15]) sphere(10);\n                }\n            }\n            \n            // Wing tips\n            color(color_gold) {\n                translate([-28, 0, 35]) {\n                    sphere(3);\n                }\n                translate([-26, 0, 22]) {\n                    sphere(2.5);\n                }\n            }\n        }\n    }\n    \n    wing();\n    mirror([1, 0, 0]) wing();\n    \n    // Tail feathers\n    module tail_feather(angle, length) {\n        color(color_gold) {\n            translate([0, 10, 30]) {\n                rotate([0, angle, 0]) {\n                    translate([0, 0, -length/2]) {\n                        scale([0.3, 0.3, 1]) cylinder(h=length, r1=5, r2=3);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Multiple tail feathers\n    for (i = [-30:15:30]) {\n        tail_feather(i, 25 + abs(i)/3);\n    }\n    \n    // Beak\n    color(color_beak) {\n        translate([0, 12, 60]) {\n            rotate([-30, 0, 0]) {\n                scale([1, 0.8, 2]) cylinder(h=8, r1=0, r2=4);\n            }\n        }\n    }\n    \n    // Crest\n    color(color_white) {\n        translate([0, -10, 70]) {\n            for (i = [-15:15:15]) {\n                rotate([0, 0, i]) {\n                    translate([0, 3, 0]) {\n                        scale([0.3, 0.3, 2]) sphere(2);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Eyes\n    color(color_black) {\n        translate([5, 10, 60]) {\n            sphere(2);\n        }\n        translate([-5, 10, 60]) {\n            sphere(2);\n        }\n    }\n    \n    color(color_white) {\n        translate([6, 11, 61]) {\n            sphere(1);\n        }\n        translate([-4, 11, 61]) {\n            sphere(1);\n        }\n    }\n    \n    // Legs\n    module leg(x_pos) {\n        color(color_gold) {\n            translate([x_pos, 0, 15]) {\n                cylinder(h=15, r=3);\n                translate([0, 0, -10]) {\n                    sphere(4);\n                }\n                // Toes\n                for (i = [-30:30:30]) {\n                    rotate([0, 0, i]) {\n                        translate([3, 0, -7]) {\n                            scale([1, 0.3, 0.3]) sphere(2);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    leg(8);\n    leg(-8);\n    \n    // Chest pattern\n    color(color_green) {\n        translate([0, 6, 30]) {\n            scale([1, 0.5, 1]) sphere(8);\n        }\n    }\n    \n    // Wing patterns\n    module wing_pattern() {\n        color(color_green) {\n            translate([-15, 0, 35]) {\n                sphere(2);\n            }\n            translate([-20, 0, 32]) {\n                sphere(1.5);\n            }\n        }\n    }\n    \n    wing_pattern();\n    mirror([1, 0, 0]) wing_pattern();\n}",
    "renders": true
  },
  {
    "pokemon": "celebi",
    "openscad_code": "// Celebi OpenSCAD Model - Medium Complexity, Realistic Style\n// Approximate height: 70mm\n\n// Colors\ncolor_skin = [0.4, 0.8, 0.4]; // Light green\ncolor_detail = [0.2, 0.6, 0.2]; // Darker green\ncolor_blue = [0.2, 0.4, 0.8];\ncolor_eye = [0.4, 0.4, 0.6];\ncolor_white = [1, 1, 1];\n\n// Main body\nmodule body() {\n    color(color_skin)\n    union() {\n        // Torso\n        translate([0, 0, 15])\n            scale([1, 0.8, 1.2])\n            sphere(10, $fn=32);\n        \n        // Head\n        translate([0, 0, 35])\n            scale([0.9, 0.8, 1])\n            sphere(12, $fn=32);\n    }\n}\n\n// Eyes\nmodule eyes() {\n    // Left eye\n    translate([-4, 8, 37])\n        rotate([0, -10, 0])\n        color(color_eye)\n        difference() {\n            sphere(2.5, $fn=16);\n            translate([0, 0, -2])\n                cube([5, 5, 5], center=true);\n        }\n    \n    // Right eye\n    translate([4, 8, 37])\n        rotate([0, 10, 0])\n        color(color_eye)\n        difference() {\n            sphere(2.5, $fn=16);\n            translate([0, 0, -2])\n                cube([5, 5, 5], center=true);\n        }\n    \n    // Eye highlights\n    translate([-3.5, 8.5, 38.5])\n        color(color_white)\n        sphere(0.8, $fn=8);\n    translate([4.5, 8.5, 38.5])\n        color(color_white)\n        sphere(0.8, $fn=8);\n}\n\n// Mouth\nmodule mouth() {\n    translate([0, 5, 32])\n        color(color_detail)\n        scale([1, 0.5, 0.3])\n        sphere(2, $fn=16);\n}\n\n// Ears\nmodule ears() {\n    // Left ear\n    translate([-8, 0, 45])\n        rotate([0, -30, -20])\n        union() {\n            color(color_skin)\n            scale([0.3, 0.3, 2])\n            cylinder(h=10, r=3, $fn=16);\n            \n            color(color_blue)\n            translate([0, 0, 10])\n                scale([0.5, 0.5, 0.5])\n                sphere(3, $fn=16);\n        }\n    \n    // Right ear\n    translate([8, 0, 45])\n        rotate([0, 30, 20])\n        union() {\n            color(color_skin)\n            scale([0.3, 0.3, 2])\n            cylinder(h=10, r=3, $fn=16);\n            \n            color(color_blue)\n            translate([0, 0, 10])\n                scale([0.5, 0.5, 0.5])\n                sphere(3, $fn=16);\n        }\n}\n\n// Arms\nmodule arms() {\n    // Left arm\n    translate([-12, 0, 25])\n        rotate([0, 0, -20])\n        color(color_skin)\n        union() {\n            scale([0.4, 0.4, 1.5])\n            sphere(4, $fn=16);\n            \n            translate([0, 0, -6])\n                scale([0.3, 0.3, 1])\n                cylinder(h=6, r=3, $fn=16);\n        }\n    \n    // Right arm\n    translate([12, 0, 25])\n        rotate([0, 0, 20])\n        color(color_skin)\n        union() {\n            scale([0.4, 0.4, 1.5])\n            sphere(4, $fn=16);\n            \n            translate([0, 0, -6])\n                scale([0.3, 0.3, 1])\n                cylinder(h=6, r=3, $fn=16);\n        }\n}\n\n// Legs\nmodule legs() {\n    // Left leg\n    translate([-5, 0, 5])\n        color(color_skin)\n        union() {\n            scale([0.4, 0.4, 1.5])\n            sphere(4, $fn=16);\n            \n            translate([0, 0, -8])\n                scale([0.3, 0.3, 1])\n                cylinder(h=8, r=3, $fn=16);\n        }\n    \n    // Right leg\n    translate([5, 0, 5])\n        color(color_skin)\n        union() {\n            scale([0.4, 0.4, 1.5])\n            sphere(4, $fn=16);\n            \n            translate([0, 0, -8])\n                scale([0.3, 0.3, 1])\n                cylinder(h=8, r=3, $fn=16);\n        }\n}\n\n// Wings\nmodule wings() {\n    // Left wing\n    translate([-15, 0, 30])\n        rotate([0, 0, -30])\n        color(color_detail)\n        scale([2, 0.1, 1.5])\n        difference() {\n            sphere(5, $fn=16);\n            translate([5, 0, 0])\n                cube([10, 2, 10], center=true);\n        }\n    \n    // Right wing\n    translate([15, 0, 30])\n        rotate([0, 0, 30])\n        color(color_detail)\n        scale([2, 0.1, 1.5])\n        difference() {\n            sphere(5, $fn=16);\n            translate([-5, 0, 0])\n                cube([10, 2, 10], center=true);\n        }\n}\n\n// Tail\nmodule tail() {\n    translate([0, -12, 20])\n        rotate([30, 0, 0])\n        color(color_skin)\n        scale([0.5, 0.5, 2])\n        sphere(6, $fn=16);\n}\n\n// Body markings\nmodule markings() {\n    // Chest marking\n    translate([0, 5, 25])\n        color(color_detail)\n        scale([0.8, 0.6, 0.3])\n        rotate([90, 0, 0])\n        cylinder(h=0.5, r=5, $fn=16);\n    \n    // Eye marking\n    translate([0, 9, 39])\n        color(color_detail)\n        scale([2, 0.5, 0.3])\n        sphere(2, $fn=16);\n}\n\n// Main assembly\nunion() {\n    body();\n    eyes();\n    mouth();\n    ears();\n    arms();\n    legs();\n    wings();\n    tail();\n    markings();\n}",
    "renders": true
  },
  {
    "pokemon": "rayquaza",
    "openscad_code": "// Rayquaza - Medium complexity realistic style\n// Overall size ~80mm\n\n$fn = 32;\nscale_factor = 1.5;\n\nmodule body_segment(r, h, color_val) {\n    color(color_val)\n    difference() {\n        union() {\n            cylinder(h=h, r1=r, r2=r*0.9);\n            translate([0, 0, h/2])\n                sphere(r=r*1.1);\n        }\n        translate([0, -r-1, h/2])\n            cube([r*2, r*2, h*2], center=true);\n    }\n}\n\nmodule fin(base_w, base_h, length, thickness, color_val) {\n    color(color_val)\n    for(i=[0:1]) mirror([i==0?1:0, 0, 0]) {\n        hull() {\n            translate([0, 0, 0])\n                cube([thickness, base_w, base_h], center=true);\n            translate([length, 0, base_h/2])\n                scale([0.2, 0.5, 0.5])\n                    sphere(r=base_w);\n        }\n    }\n}\n\nmodule head() {\n    color([0.1, 0.5, 0.2])\n    union() {\n        // Main head\n        translate([0, 0, 15])\n            scale([1, 0.8, 1.2])\n                sphere(r=10);\n        \n        // Snout\n        translate([0, 0, -5])\n            cylinder(h=15, r1=8, r2=5);\n        \n        // Yellow jaw markings\n        color([1, 0.8, 0])\n        translate([0, 5.5, 2])\n            cube([12, 1, 6], center=true);\n        \n        // Eyes\n        color([1, 1, 0])\n        for(x=[-1, 1]) {\n            translate([x*5, 7, 10])\n                scale([1, 0.5, 1.5])\n                    rotate([90, 0, 0])\n                        cylinder(h=1, r=2);\n        }\n        \n        // Red eye markings\n        color([0.8, 0, 0])\n        for(x=[-1, 1]) {\n            translate([x*5, 7.5, 10])\n                cube([4, 1, 5], center=true);\n        }\n    }\n}\n\nmodule body() {\n    // Head\n    translate([0, 0, 80])\n        rotate([0, 20, 0])\n            head();\n    \n    // Neck segments\n    translate([0, 0, 70])\n        body_segment(9, 8, [0.1, 0.5, 0.2]);\n    translate([0, 0, 60])\n        body_segment(8.5, 8, [0.1, 0.5, 0.2]);\n    \n    // Body segments\n    for(i=[0:7]) {\n        translate([0, 0, 50-i*6])\n            body_segment(8-i*0.3, 6, [0.1, 0.5, 0.2]);\n    }\n}\n\nmodule arms() {\n    color([0.1, 0.5, 0.2])\n    for(side=[-1, 1]) {\n        translate([side*10, 0, 45])\n            rotate([0, 0, side*30])\n                cylinder(h=15, r=2.5);\n    }\n}\n\nmodule wings() {\n    color([0.1, 0.5, 0.2])\n    for(side=[-1, 1]) {\n        translate([side*12, 0, 55])\n            rotate([0, 0, side*15])\n                fin(1, 20, 25, 1, [0.1, 0.5, 0.2]);\n    }\n}\n\nmodule tail_fin() {\n    color([0.1, 0.5, 0.2])\n    translate([0, 0, 5])\n        rotate([0, 0, 0])\n            fin(1, 15, 20, 1.5, [0.1, 0.5, 0.2]);\n}\n\nmodule yellow_markings() {\n    color([1, 0.8, 0])\n    for(i=[0:3]) {\n        translate([0, 0, 30-i*10])\n            cylinder(h=2, r=9-i*0.5);\n    }\n    translate([0, 0, 8])\n        cylinder(h=2, r=6);\n}\n\n// Main assembly\nscale([scale_factor, scale_factor, scale_factor])\nrotate([0, 180, 0])\nunion() {\n    body();\n    arms();\n    wings();\n    tail_fin();\n    yellow_markings();\n}",
    "renders": true
  },
  {
    "pokemon": "groudon",
    "openscad_code": "// Groudon - Realistic Style (Medium Complexity)\n// Scale for 3D printing - 80mm height\n\nmodule groudon_body() {\n    // Main torso\n    color(\"#B22222\") {\n        translate([0, 0, 15]) \n            scale([1.2, 0.8, 1]) \n                cylinder(h=20, r1=15, r2=12, $fn=20);\n        \n        // Chest plate\n        translate([0, 0, 30]) \n            scale([0.8, 0.6, 0.5]) \n                cube([25, 20, 5], center=true);\n    }\n}\n\nmodule groudon_head() {\n    color(\"#B22222\") {\n        // Head base\n        translate([0, 20, 35]) \n            rotate([45, 0, 0]) \n                scale([1.2, 1, 1.2]) \n                    sphere(12, $fn=20);\n        \n        // Snout\n        translate([0, 30, 35]) \n            scale([0.8, 1.5, 0.8]) \n                cylinder(h=8, r=6, $fn=10);\n    }\n    \n    // White jaw\n    color(\"#F5F5F5\") {\n        translate([0, 34, 30]) \n            scale([0.6, 0.3, 0.3]) \n                cube([10, 8, 6], center=true);\n    }\n    \n    // Eyes\n    color(\"#FFD700\") {\n        for(x=[-4, 4]) {\n            translate([x, 28, 38]) \n                sphere(2.5, $fn=8);\n        }\n    }\n    \n    // Head spikes\n    color(\"#8B0000\") {\n        for(angle=[0, 45, -45]) {\n            rotate([0, 0, angle]) \n                translate([0, 20, 45]) \n                    rotate_extrude(angle=90, $fn=3) \n                        translate([0, 0, 0]) \n                            polygon([[0,0], [2,0], [0,5]]);\n        }\n    }\n}\n\nmodule groudon_limbs() {\n    // Arms\n    color(\"#B22222\") {\n        for(side=[-1, 1]) {\n            translate([side*12, 10, 25]) {\n                rotate([0, -side*20, 0]) \n                    cylinder(h=15, r=4, $fn=8);\n                translate([0, 0, 8]) \n                    rotate([90, 0, 0]) \n                        cylinder(h=8, r=3, $fn=8);\n            }\n        }\n    }\n    \n    // Legs\n    color(\"#B22222\") {\n        for(side=[-1, 1]) {\n            translate([side*10, -5, 15]) {\n                rotate([30, 0, 0]) \n                    cylinder(h=20, r=5, $fn=8);\n                translate([0, 0, 18]) \n                    rotate([0, 0, 90]) \n                        scale([1.5, 1, 0.8]) \n                            sphere(4, $fn=8);\n            }\n        }\n    }\n}\n\nmodule groudon_tail() {\n    color(\"#B22222\") {\n        hull() {\n            translate([0, -15, 15]) \n                sphere(6, $fn=8);\n            translate([0, -25, 12]) \n                sphere(4, $fn=8);\n            translate([0, -35, 10]) \n                sphere(3, $fn=8);\n        }\n    }\n    \n    // Tail spikes\n    color(\"#8B0000\") {\n        for(pos=[[0, -20, 15], [0, -30, 12]]) {\n            translate(pos) \n                rotate([0, 0, 180]) \n                    rotate_extrude(angle=90, $fn=3) \n                        polygon([[0,0], [2,0], [0,3]]);\n        }\n    }\n}\n\nmodule groudon_back_plates() {\n    color(\"#8B0000\") {\n        for(i=[-1:0.5:1]) {\n            translate([i*10, 0, 35]) \n                rotate([0, 0, i*10]) \n                    scale([0.8, 0.3, 0.8]) \n                        cube([8, 2, 6], center=true);\n        }\n    }\n}\n\nmodule groudon_markings() {\n    // Black stripes\n    color(\"#000000\") {\n        for(pos=[[0, 5, 20], [0, 10, 25]]) {\n            translate(pos) \n                scale([1.2, 0.3, 0.1]) \n                    cube([20, 8, 2], center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    groudon_body();\n    groudon_head();\n    groudon_limbs();\n    groudon_tail();\n    groudon_back_plates();\n    groudon_markings();\n}",
    "renders": true
  },
  {
    "pokemon": "kyogre",
    "openscad_code": "// Kyogre OpenSCAD Model - Medium Complexity Realistic Style\n// Overall dimensions approximately 80mm length\n\n$fn = 32;\n\n// Main body color\nkyogre_blue = [0.2, 0.4, 0.8];\nkyogre_red = [0.8, 0.2, 0.2];\nkyogre_white = [0.9, 0.9, 0.9];\nkyogre_yellow = [1, 0.8, 0];\n\n// Main body\nmodule kyogre_body() {\n    color(kyogre_blue)\n    union() {\n        // Central torso\n        translate([0, 0, 10])\n            scale([1.2, 0.8, 1])\n            sphere(r=20);\n        \n        // Front extension\n        translate([-25, 0, 5])\n            scale([1.5, 0.7, 0.8])\n            sphere(r=15);\n        \n        // Rear extension\n        translate([25, 0, 5])\n            scale([1.2, 0.9, 0.9])\n            sphere(r=15);\n    }\n}\n\n// Tail fin\nmodule kyogre_tail() {\n    color(kyogre_blue)\n    translate([35, 0, 5]) {\n        rotate([0, 0, 45])\n            scale([2, 0.2, 1])\n            sphere(r=15);\n        rotate([0, 0, -45])\n            scale([2, 0.2, 1])\n            sphere(r=15);\n    }\n}\n\n// Side fins\nmodule side_fin(side) {\n    color(kyogre_blue)\n    mirror([side, 0, 0])\n    translate([0, -15, 0]) {\n        rotate([0, 0, 30])\n            scale([0.8, 0.1, 0.6])\n            cylinder(h=25, r1=10, r2=5);\n    }\n}\n\n// Dorsal fin\nmodule dorsal_fin() {\n    color(kyogre_blue)\n    translate([5, 0, 25]) {\n        for(i = [0:4]) {\n            translate([i*3, 0, 0])\n                scale([0.3, 1, 1])\n                cylinder(h=15-i*2, r=3);\n        }\n    }\n}\n\n// Head details\nmodule kyogre_head() {\n    color(kyogre_blue)\n    union() {\n        // Main head\n        translate([-35, 0, 15])\n            scale([1.3, 1, 1.2])\n            sphere(r=15);\n        \n        // Snout\n        translate([-45, 0, 15])\n            scale([0.8, 0.6, 0.6])\n            sphere(r=10);\n        \n        // Eye sockets\n        color(kyogre_white)\n        translate([-38, -8, 22])\n            sphere(r=4);\n        translate([-38, 8, 22])\n            sphere(r=4);\n        \n        // Eyes\n        color(kyogre_red)\n        translate([-40, -8, 22])\n            sphere(r=2);\n        translate([-40, 8, 22])\n            sphere(r=2);\n        \n        // Mouth\n        color(kyogre_red)\n        translate([-45, 0, 10])\n            rotate([90, 0, 0])\n            cylinder(h=1, r1=5, r2=0);\n    }\n}\n\n// Markings\nmodule markings() {\n    color(kyogre_white)\n    union() {\n        // Chest marking\n        translate([-20, 0, 5])\n            scale([1, 0.8, 0.1])\n            sphere(r=10);\n        \n        // Side markings\n        for(side = [-1, 1]) {\n            mirror([side, 0, 0])\n            translate([0, -12, 10])\n                rotate([0, 0, 45])\n                scale([0.5, 0.1, 0.3])\n                cylinder(h=20, r=5);\n        }\n    }\n    \n    // Yellow stripes\n    color(kyogre_yellow)\n    for(side = [-1, 1]) {\n        mirror([side, 0, 0])\n        translate([-10, -12, 15])\n            rotate([90, 0, 0])\n            cylinder(h=1, r=2);\n    }\n}\n\n// Assembly\nkyogre_body();\nkyogre_tail();\nside_fin(1);\nside_fin(-1);\ndorsal_fin();\nkyogre_head();\nmarkings();",
    "renders": true
  },
  {
    "pokemon": "dialga",
    "openscad_code": "// Dialga - Realistic Style, Medium Complexity\n// Approximate size: 80mm tall, 100mm long\n\n// Main colors\nsteel_blue = [0.27, 0.51, 0.71];\nlight_blue = [0.68, 0.85, 0.90];\ndark_steel = [0.18, 0.31, 0.41];\nsilver = [0.75, 0.75, 0.75];\nblack = [0.1, 0.1, 0.1];\n\n// Main body module\nmodule dialga_body() {\n    color(steel_blue)\n    union() {\n        // Torso\n        translate([0, 0, 30])\n            scale([1.2, 0.8, 1])\n                sphere(r=20);\n        \n        // Chest plate\n        translate([0, 15, 25])\n            cube([30, 8, 25], center=true);\n            \n        // Back ridge\n        for(i = [-1, 1])\n            translate([i*15, -15, 35])\n                cube([5, 10, 30], center=true);\n    }\n}\n\n// Head module\nmodule dialga_head() {\n    color(steel_blue)\n    union() {\n        // Main head\n        translate([0, 30, 45])\n            scale([0.8, 1, 1])\n                sphere(r=18);\n        \n        // Snout\n        translate([0, 45, 40])\n            scale([0.6, 1.2, 0.8])\n                sphere(r=12);\n        \n        // Crest\n        color(light_blue)\n        translate([0, 25, 60])\n            for(i = [-1, 0, 1])\n                translate([i*8, 0, 0])\n                    cube([3, 5, 12], center=true);\n        \n        // Eyes\n        color(black)\n        translate([-8, 40, 48])\n            sphere(r=3);\n        translate([8, 40, 48])\n            sphere(r=3);\n    }\n}\n\n// Leg modules\nmodule dialga_legs() {\n    color(steel_blue)\n    union() {\n        // Front legs\n        for(side = [-1, 1]) {\n            translate([side*15, 15, 15]) {\n                // Upper leg\n                rotate([0, 15, 0])\n                    cylinder(h=20, r1=6, r2=5);\n                \n                // Lower leg\n                translate([0, 0, -20])\n                    rotate([0, -15, 0])\n                        cylinder(h=15, r1=5, r2=4);\n                \n                // Foot\n                translate([0, 0, -35])\n                    scale([1.5, 2, 1])\n                        sphere(r=4);\n            }\n        }\n        \n        // Back legs\n        for(side = [-1, 1]) {\n            translate([side*12, -15, 15]) {\n                // Upper leg\n                rotate([0, -10, 0])\n                    cylinder(h=25, r1=7, r2=6);\n                \n                // Lower leg\n                translate([0, 0, -25])\n                    rotate([0, 10, 0])\n                        cylinder(h=18, r1=6, r2=5);\n                \n                // Foot\n                translate([0, 0, -43])\n                    scale([2, 2.5, 1])\n                        sphere(r=5);\n            }\n        }\n    }\n}\n\n// Tail module\nmodule dialga_tail() {\n    color(steel_blue)\n    union() {\n        // Tail segments\n        for(i = [0:4]) {\n            translate([0, -25 - i*8, 30 - i*3])\n                scale([1 - i*0.15, 1 - i*0.1, 0.8 - i*0.1])\n                    sphere(r=12 - i*2);\n        }\n        \n        // Tail spikes\n        color(dark_steel)\n        for(i = [1:3]) {\n            translate([0, -30 - i*8, 35 - i*3])\n                rotate([0, 0, 45])\n                    cube([2, 15, 2], center=true);\n        }\n    }\n}\n\n// Shoulder armor\nmodule shoulder_armor() {\n    color(dark_steel)\n    for(side = [-1, 1]) {\n        translate([side*25, 20, 35])\n            rotate([0, 0, side*30])\n                cube([8, 12, 15], center=true);\n    }\n}\n\n// Chest diamond\nmodule chest_diamond() {\n    color(light_blue)\n    translate([0, 15, 30])\n        scale([1, 0.5, 1])\n            cylinder(h=3, r=8, $fn=6);\n}\n\n// Back plates\nmodule back_plates() {\n    color(dark_steel)\n    for(i = [-1, 0, 1]) {\n        translate([i*12, -5, 40])\n            rotate([0, 15, 0])\n                cube([10, 3, 8], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    dialga_body();\n    dialga_head();\n    dialga_legs();\n    dialga_tail();\n    shoulder_armor();\n    chest_diamond();\n    back_plates();\n}",
    "renders": true
  },
  {
    "pokemon": "palkia",
    "openscad_code": "// Palkia - Realistic Style, Medium Complexity\n// Scaled for 3D printing ~80mm height\n\n$fn = 32;\n\n// Main colors\ncolor_purple = [0.4, 0.2, 0.6];\ncolor_light_purple = [0.6, 0.4, 0.8];\ncolor_white = [0.9, 0.9, 0.95];\ncolor_gray = [0.5, 0.5, 0.6];\ncolor_red = [0.8, 0.1, 0.1];\ncolor_gold = [0.85, 0.65, 0.15];\n\n// Main body module\nmodule palkia_body() {\n    // Central torso\n    color(color_purple)\n    scale([1, 0.8, 1.2])\n    sphere(15);\n    \n    // Chest plate\n    color(color_white)\n    translate([0, -12, 5])\n    scale([1.2, 0.3, 1.5])\n    sphere(12);\n    \n    // Shoulder spheres\n    for(side = [-1, 1]) {\n        color(color_light_purple)\n        translate([side * 18, 0, 8])\n        sphere(8);\n    }\n}\n\n// Head module\nmodule palkia_head() {\n    // Main head\n    color(color_purple)\n    translate([0, -20, 25])\n    scale([0.9, 1.1, 1.2])\n    sphere(12);\n    \n    // Snout\n    color(color_purple)\n    translate([0, -30, 22])\n    scale([0.6, 1.5, 0.8])\n    sphere(8);\n    \n    // Eyes\n    for(side = [-1, 1]) {\n        color(color_red)\n        translate([side * 6, -28, 28])\n        sphere(3);\n        \n        // Eye highlights\n        color(color_white)\n        translate([side * 6.5, -29, 29])\n        sphere(1);\n    }\n    \n    // Crest\n    color(color_gray)\n    translate([0, -22, 38])\n    scale([0.3, 0.3, 2])\n    cylinder(15, 8, 2);\n    \n    // Crest rings\n    for(i = [1:3]) {\n        color(color_gold)\n        translate([0, -22, 38 + i * 3])\n        cylinder(0.5, 8 + i * 2, 8 + i * 2);\n    }\n}\n\n// Arm module\nmodule palkia_arm(side) {\n    // Upper arm\n    color(color_purple)\n    translate([side * 25, -5, 8])\n    rotate([0, 0, side * 20])\n    scale([0.8, 0.8, 2])\n    cylinder(12, 5, 4);\n    \n    // Lower arm\n    color(color_purple)\n    translate([side * 30, -5, -5])\n    rotate([0, 0, side * 30])\n    scale([0.7, 0.7, 1.5])\n    cylinder(10, 4, 6);\n    \n    // Hand with pearl\n    color(color_purple)\n    translate([side * 35, -5, -16])\n    sphere(5);\n    \n    color(color_white)\n    translate([side * 37, -5, -16])\n    sphere(3);\n    \n    // Shoulder armor\n    color(color_gray)\n    translate([side * 18, 0, 8])\n    rotate([0, 90, 0])\n    cylinder(3, 8, 8);\n}\n\n// Leg module\nmodule palkia_leg(side) {\n    // Upper leg\n    color(color_purple)\n    translate([side * 12, 0, -15])\n    rotate([side * 10, 0, 0])\n    scale([0.8, 0.8, 1.5])\n    cylinder(15, 6, 5);\n    \n    // Lower leg\n    color(color_purple)\n    translate([side * 14, 0, -30])\n    rotate([side * 15, 0, 0])\n    scale([0.7, 0.7, 1.2])\n    cylinder(12, 5, 6);\n    \n    // Foot\n    color(color_purple)\n    translate([side * 16, 0, -42])\n    scale([1.2, 2, 1])\n    cube([8, 12, 6], center = true);\n}\n\n// Tail module\nmodule palkia_tail() {\n    color(color_purple)\n    translate([0, 20, -15])\n    rotate([0, 0, 180])\n    cylinder(25, 8, 4);\n    \n    // Tail fin\n    color(color_gray)\n    translate([0, 45, -15])\n    rotate([90, 0, 0])\n    linear_extrude(2)\n    polygon(points=[[0,0],[-15,10],[0,20],[15,10]]);\n}\n\n// Back wings\nmodule palkia_wings() {\n    for(side = [-1, 1]) {\n        // Wing base\n        color(color_purple)\n        translate([side * 20, 10, 5])\n        rotate([0, side * 30, 0])\n        scale([0.3, 2, 1])\n        cube([8, 25, 15], center = true);\n        \n        // Wing armor\n        color(color_gray)\n        translate([side * 25, 10, 5])\n        rotate([0, side * 30, 0])\n        scale([0.2, 1.5, 0.8])\n        cube([6, 20, 12], center = true);\n    }\n}\n\n// Assembly\nmodule palkia() {\n    palkia_body();\n    palkia_head();\n    \n    // Arms\n    for(side = [-1, 1]) {\n        palkia_arm(side);\n    }\n    \n    // Legs\n    for(side = [-1, 1]) {\n        palkia_leg(side);\n    }\n    \n    palkia_tail();\n    palkia_wings();\n    \n    // Chest gems\n    color(color_gold)\n    translate([0, -12, 12])\n    sphere(2);\n    \n    // Body markings\n    for(i = [1:3]) {\n        color(color_white)\n        translate([0, -5 + i * 5, 10 - i * 2])\n        rotate([90, 0, 0])\n        cylinder(0.5, 5 + i, 5 + i);\n    }\n}\n\n// Main assembly with scale for 3D printing\nscale([0.8, 0.8, 0.8])\npalkia();",
    "renders": true
  },
  {
    "pokemon": "giratina",
    "openscad_code": "// Giratina (Altered Forme) - Realistic Style, Medium Complexity\n// Overall size: ~70mm tall\n\n$fn = 36;\nmodule giratina() {\n    color([0.15, 0.15, 0.25]) {\n        // Main body\n        translate([0, 0, 20]) rotate([0, 0, 0]) body();\n        // Head\n        translate([0, 0, 55]) rotate([0, 0, 0]) head();\n        // Six wings\n        translate([25, 15, 40]) rotate([0, 0, 45]) wing();\n        translate([-25, 15, 40]) rotate([0, 0, -45]) mirror([1,0,0]) wing();\n        translate([25, -15, 40]) rotate([0, 0, -45]) wing();\n        translate([-25, -15, 40]) rotate([0, 0, 45]) mirror([1,0,0]) wing();\n        translate([15, 25, 35]) rotate([0, 0, 90]) wing();\n        translate([-15, -25, 35]) rotate([0, 0, -90]) mirror([1,0,0]) wing();\n        // Six legs\n        translate([12, 12, 5]) rotate([0, 0, 30]) leg();\n        translate([-12, 12, 5]) rotate([0, 0, -30]) mirror([1,0,0]) leg();\n        translate([12, -12, 5]) rotate([0, 0, -30]) leg();\n        translate([-12, -12, 5]) rotate([0, 0, 30]) mirror([1,0,0]) leg();\n        translate([8, 0, 0]) rotate([0, 0, 0]) leg();\n        translate([-8, 0, 0]) rotate([0, 0, 0]) mirror([1,0,0]) leg();\n        // Tail\n        translate([0, 0, 15]) rotate([0, 0, 0]) tail();\n    }\n}\n\nmodule body() {\n    difference() {\n        union() {\n            // Main torso\n            scale([1.2, 1, 1.5]) sphere(12);\n            // Chest armor\n            translate([0, 12, 0]) scale([1.3, 0.5, 1.2]) sphere(10);\n        }\n        // Neck hole\n        translate([0, 0, 15]) cylinder(10, 6, 6, true);\n    }\n}\n\nmodule head() {\n    union() {\n        // Main head shape\n        translate([0, 8, 0]) scale([1, 0.8, 1.2]) sphere(10);\n        // Snout\n        translate([0, 18, 0]) scale([0.8, 0.5, 0.6]) sphere(8);\n        // Crest\n        translate([0, 0, 12]) scale([0.3, 0.3, 1]) sphere(15);\n        // Side horns\n        translate([8, 5, 8]) rotate([0, 0, 30]) cylinder(10, 2, 0);\n        translate([-8, 5, 8]) rotate([0, 0, -30]) cylinder(10, 2, 0);\n        // Eyes\n        color([0.9, 0.1, 0.1]) {\n            translate([6, 12, 2]) scale([1, 0.5, 1]) sphere(3);\n            translate([-6, 12, 2]) scale([1, 0.5, 1]) sphere(3);\n        }\n        // Gold markings\n        color([0.8, 0.7, 0.2]) {\n            translate([0, 12, 4]) scale([1.5, 0.2, 0.5]) sphere(3);\n            translate([0, 8, 6]) scale([0.8, 0.2, 0.8]) sphere(3);\n        }\n    }\n}\n\nmodule wing() {\n    difference() {\n        union() {\n            // Main wing blade\n            translate([0, 0, 0]) scale([1, 0.2, 3]) sphere(8);\n            // Red wing tips\n            color([0.9, 0.1, 0.1]) {\n                translate([0, 0, 20]) scale([0.8, 0.8, 0.5]) sphere(5);\n            }\n        }\n        // Cutout pattern\n        translate([0, 0, 10]) scale([0.5, 0.5, 0.5]) sphere(8);\n    }\n}\n\nmodule leg() {\n    union() {\n        // Upper leg\n        cylinder(12, 4, 3);\n        // Lower leg\n        translate([0, 0, -12]) rotate([20, 0, 0]) cylinder(10, 3, 2);\n        // Foot\n        translate([0, 0, -22]) rotate([45, 0, 0]) scale([1, 0.5, 0.3]) sphere(6);\n    }\n}\n\nmodule tail() {\n    difference() {\n        union() {\n            // Main tail segments\n            for (i = [0:3]) {\n                translate([0, 0, -i*8]) scale([1-i*0.15, 1-i*0.15, 1]) sphere(8);\n            }\n            // Tail spikes\n            color([0.9, 0.1, 0.1]) {\n                for (i = [0:3]) {\n                    translate([0, 0, -i*8-4]) rotate([0, 0, 45+i*30]) \n                    scale([0.3, 0.3, 1]) sphere(5);\n                }\n            }\n        }\n        // Hollow center for printability\n        for (i = [0:3]) {\n            translate([0, 0, -i*8]) scale([0.7-i*0.15, 0.7-i*0.15, 1]) sphere(7);\n        }\n    }\n}\n\n// Render the complete model\ngiratina();",
    "renders": true
  },
  {
    "pokemon": "arceus",
    "openscad_code": "// Arceus OpenSCAD Model - Realistic Medium Complexity\n// 3D printable model with proper wall thickness and no overhangs\n\n// Overall scale factor for printing\nscale_factor = 0.5;\n\n// Color definitions\ncolor_body = [0.9, 0.85, 0.75];      // Cream white\ncolor_gold = [0.8, 0.7, 0.3];       // Gold accents\ncolor_wheel = [0.4, 0.3, 0.7];      // Green wheel\ncolor_eye = [0.1, 0.1, 0.1];        // Black eyes\ncolor_red = [0.7, 0.2, 0.2];        // Red gems\n\n// Main body module\nmodule arceus_body() {\n    color(color_body) {\n        // Torso - horse-like body\n        translate([0, 0, 25])\n            scale([1.2, 0.8, 1.5])\n            sphere(d=40);\n        \n        // Neck\n        translate([0, 25, 35])\n            rotate([20, 0, 0])\n            cylinder(h=30, d1=15, d2=20);\n        \n        // Head\n        translate([0, 32, 50])\n            scale([1.3, 1.8, 1.1])\n            sphere(d=25);\n    }\n}\n\n// Golden wheel on abdomen\nmodule arceus_wheel() {\n    color(color_wheel) {\n        translate([0, 0, 15])\n            rotate([90, 0, 0])\n            cylinder(h=8, d=60);\n        \n        // Wheel spokes\n        for(i=[0:30:330]) {\n            rotate([0, 0, i])\n                translate([25, 0, 15])\n                    cube([25, 3, 8], center=true);\n        }\n        \n        // Central gem\n        color(color_red)\n            translate([0, 0, 19])\n                sphere(d=12);\n    }\n}\n\n// Legs module\nmodule arceus_legs() {\n    color(color_body) {\n        // Front legs\n        translate([15, 15, 0]) leg();\n        translate([-15, 15, 0]) leg();\n        \n        // Back legs\n        translate([15, -15, 0]) leg();\n        translate([-15, -15, 0]) leg();\n    }\n}\n\n// Single leg with golden hoof\nmodule leg() {\n    union() {\n        // Upper leg\n        cylinder(h=20, d=12);\n        \n        // Lower leg\n        translate([0, 0, -20])\n            cylinder(h=20, d=10);\n        \n        // Golden hoof\n        color(color_gold)\n            translate([0, 0, -40])\n                cylinder(h=5, d=12);\n    }\n}\n\n// Tail module\nmodule arceus_tail() {\n    color(color_body) {\n        translate([0, -35, 20])\n            rotate([0, 10, 0])\n            scale([0.8, 0.8, 1.2])\n            sphere(d=25);\n    }\n}\n\n// Head details\nmodule head_details() {\n    // Eyes\n    color(color_eye) {\n        translate([8, 35, 52])\n            sphere(d=4);\n        translate([-8, 35, 52])\n            sphere(d=4);\n    }\n    \n    // Golden crest on forehead\n    color(color_gold)\n        translate([0, 40, 55])\n            cube([15, 3, 8], center=true);\n    \n    // Mouth\n    color([0.2, 0.2, 0.2])\n        translate([0, 42, 45])\n            cube([8, 2, 1], center=true);\n}\n\n// Golden accents on body\nmodule body_accents() {\n    color(color_gold) {\n        // Shoulder plates\n        translate([20, 15, 25])\n            cube([8, 12, 3]);\n        translate([-20, 15, 25])\n            cube([8, 12, 3]);\n        \n        // Hip plates\n        translate([20, -15, 25])\n            cube([8, 12, 3]);\n        translate([-20, -15, 25])\n            cube([8, 12, 3]);\n        \n        // Chest plate\n        translate([0, 25, 30])\n            cube([15, 8, 3]);\n    }\n}\n\n// Main assembly\nscale(scale_factor)\n    union() {\n        arceus_body();\n        arceus_wheel();\n        arceus_legs();\n        arceus_tail();\n        head_details();\n        body_accents();\n    }",
    "renders": true
  },
  {
    "pokemon": "reshiram",
    "openscad_code": "// Reshiram - Realistic style, medium complexity\n// 3D printable Pokemon model with proper wall thickness\n\n// Colors\ncolor_white = [0.95, 0.95, 0.9];\ncolor_blue = [0.2, 0.4, 0.8];\ncolor_gold = [0.9, 0.7, 0.2];\ncolor_red = [0.8, 0.1, 0.1];\n\n// Main body module\nmodule reshiram() {\n    // Scale for 3D printing (80mm tall)\n    scale(0.8) {\n        // Head\n        color(color_white) {\n            translate([0, 0, 45]) {\n                // Main head shape\n                sphere(8);\n                translate([0, 0, 4]) sphere(7);\n                \n                // Snout\n                translate([0, 8, -2]) scale([1, 1.5, 0.8]) sphere(6);\n                \n                // Eyes\n                color(color_blue) {\n                    translate([4, 6, 2]) scale([1.2, 0.8, 0.5]) sphere(2);\n                    translate([-4, 6, 2]) scale([1.2, 0.8, 0.5]) sphere(2);\n                }\n                \n                // Eye rings\n                color(color_gold) {\n                    for(x = [4, -4]) {\n                        translate([x, 6, 2]) rotate([0, 90, 0]) \n                            cylinder(h=0.5, r1=3, r2=2.5);\n                    }\n                }\n            }\n        }\n        \n        // Neck\n        color(color_white) {\n            translate([0, 0, 35]) rotate([0, 0, 0]) \n                cylinder(h=10, r1=5, r2=6);\n        }\n        \n        // Torso\n        color(color_white) {\n            translate([0, 0, 25]) {\n                sphere(8);\n                translate([0, 0, -5]) cylinder(h=10, r1=8, r2=6);\n            }\n        }\n        \n        // Arms\n        module arm(side) {\n            mirror([side, 0, 0]) {\n                translate([6, 4, 28]) {\n                    // Upper arm\n                    rotate([0, 0, -30]) {\n                        cylinder(h=8, r1=2.5, r2=2);\n                        \n                        // Lower arm\n                        translate([0, 6, 0]) rotate([30, 0, 0]) {\n                            cylinder(h=6, r1=2, r2=1.8);\n                            \n                            // Hand\n                            translate([0, 5, 0]) sphere(2);\n                        }\n                    }\n                }\n            }\n        }\n        \n        arm(1);\n        arm(-1);\n        \n        // Wings\n        module wing(side) {\n            mirror([side, 0, 0]) {\n                translate([7, -2, 35]) {\n                    rotate([0, -20, 30]) {\n                        // Main wing structure\n                        color(color_white) {\n                            scale([1, 0.2, 2]) sphere(5);\n                            translate([0, 0, 3]) scale([0.7, 0.15, 1.5]) sphere(4);\n                        }\n                        \n                        // Wing membrane\n                        color(color_blue) {\n                            translate([0, 0, 1]) scale([1.2, 0.1, 2.2]) \n                                rotate([0, 10, 0]) sphere(4);\n                        }\n                    }\n                }\n            }\n        }\n        \n        wing(1);\n        wing(-1);\n        \n        // Legs\n        module leg(side) {\n            mirror([side, 0, 0]) {\n                translate([4, 0, 15]) {\n                    // Upper leg\n                    cylinder(h=8, r1=3, r2=2.5);\n                    \n                    // Lower leg\n                    translate([0, 0, -8]) rotate([15, 0, 0]) {\n                        cylinder(h=7, r1=2.5, r2=2);\n                        \n                        // Foot\n                        translate([0, 2, -6]) rotate([90, 0, 0]) {\n                            cylinder(h=4, r1=2, r2=3);\n                        }\n                    }\n                }\n            }\n        }\n        \n        leg(1);\n        leg(-1);\n        \n        // Tail base\n        color(color_white) {\n            translate([0, -8, 20]) {\n                cylinder(h=5, r1=5, r2=4);\n            }\n        }\n        \n        // Tail segments\n        color(color_white) {\n            translate([0, -15, 18]) {\n                rotate([90, 0, 0]) {\n                    cylinder(h=15, r1=4, r2=3);\n                    \n                    // Tail turbine\n                    translate([0, 0, 16]) {\n                        color(color_gold) {\n                            cylinder(h=3, r1=3.5, r2=3.5);\n                            \n                            // Turbine blades\n                            for(i = [0:3]) {\n                                rotate([0, 0, i * 90]) {\n                                    translate([3, 0, 1.5]) \n                                        cube([4, 0.5, 3], center=true);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Chest marking\n        color(color_gold) {\n            translate([0, 6, 28]) rotate([0, 90, 0]) \n                cylinder(h=0.5, r1=3, r2=0);\n        }\n        \n        // Head crest\n        color(color_white) {\n            translate([0, 4, 53]) {\n                for(i = [0:2]) {\n                    rotate([0, 0, (i - 1) * 20]) {\n                        translate([0, 2, 0]) \n                            scale([0.5, 0.5, 1]) cylinder(h=5, r1=1, r2=0.5);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Generate the model\nreshiram();",
    "renders": true
  },
  {
    "pokemon": "zekrom",
    "openscad_code": "// Zekrom - medium complexity realistic style\n// Based on Pokemon Black/White design\n\nmodule zekrom_tail() {\n    // Tail generator with electric turbine details\n    rotate([0, -20, 0]) {\n        // Main tail segments\n        for(i = [0:1:4]) {\n            translate([0, 0, -i*8]) {\n                rotate([0, 0, i*30]) {\n                    color(\"gray20\") {\n                        cylinder(h=10, r1=6-i, r2=5-i, $fn=8);\n                    }\n                }\n            }\n        }\n        \n        // Tail tip generator\n        translate([0, 0, -40]) {\n            // Electric turbine core\n            color(\"royalblue\") {\n                sphere(8, $fn=16);\n            }\n            \n            // Surrounding ring\n            color(\"gray20\") {\n                rotate_extrude($fn=32) {\n                    translate([9, 0, 0]) {\n                        circle(r=2, $fn=16);\n                    }\n                }\n            }\n            \n            // Spikes\n            for(angle = [0:60:359]) {\n                rotate([0, 0, angle]) {\n                    translate([0, 10, 0]) {\n                        rotate([90, 0, 0]) {\n                            cylinder(h=5, r1=1.5, r2=0, $fn=6);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule zekrom_head() {\n    // Main head structure\n    translate([0, 0, 15]) {\n        // Skull base\n        color(\"gray20\") {\n            sphere(10, $fn=24);\n        }\n        \n        // Snout extension\n        translate([8, 0, 0]) {\n            color(\"gray20\") {\n                rotate([0, 90, 0]) {\n                    cylinder(h=15, r1=8, r2=6, $fn=16);\n                }\n            }\n        }\n        \n        // Eyes\n        for(side = [-1, 1]) {\n            translate([4, side*6, 3]) {\n                color(\"red\") {\n                    sphere(3, $fn=12);\n                }\n                \n                // Eye glow\n                translate([1, 0, 0]) {\n                    color(\"white\") {\n                        sphere(1, $fn=8);\n                    }\n                }\n            }\n        }\n        \n        // Horns\n        for(side = [-1, 1]) {\n            translate([0, side*8, 12]) {\n                rotate([0, side*20, 0]) {\n                    color(\"gray20\") {\n                        cylinder(h=12, r1=3, r2=2, $fn=8);\n                    }\n                }\n            }\n        }\n        \n        // Jaw\n        translate([12, 0, -5]) {\n            color(\"gray30\") {\n                cube([8, 8, 4], center=true);\n            }\n        }\n    }\n}\n\nmodule zekrom_wing() {\n    // Dragon wing structure\n    rotate([0, 0, 45]) {\n        // Wing arm\n        translate([0, 0, 0]) {\n            color(\"gray20\") {\n                cylinder(h=20, r1=3, r2=2, $fn=8);\n            }\n        }\n        \n        // Wing membrane segments\n        for(i = [0:1:3]) {\n            translate([5+i*3, i*6, 0]) {\n                rotate([0, 0, -i*20]) {\n                    color(\"gray40\") {\n                        cube([8-i, 12-i*2, 0.5], center=true);\n                    }\n                }\n            }\n        }\n        \n        // Wing claws\n        translate([15, 10, 0]) {\n            rotate([90, 0, 0]) {\n                for(j = [0:1:2]) {\n                    translate([j*2-2, 0, 0]) {\n                        color(\"gray20\") {\n                            cylinder(h=3, r1=1, r2=0.5, $fn=6);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule zekrom_body() {\n    // Main torso\n    color(\"gray20\") {\n        sphere(15, $fn=24);\n    }\n    \n    // Chest armor detail\n    translate([0, 0, 0]) {\n        color(\"gray30\") {\n            cube([20, 25, 10], center=true);\n        }\n    }\n    \n    // Shoulder plates\n    for(side = [-1, 1]) {\n        translate([0, side*15, 5]) {\n            color(\"gray30\") {\n                rotate([0, 30, 0]) {\n                    cube([8, 12, 6], center=true);\n                }\n            }\n        }\n    }\n    \n    // Neck connector\n    translate([-5, 0, 10]) {\n        color(\"gray20\") {\n            cylinder(h=10, r1=8, r2=6, $fn=16);\n        }\n    }\n}\n\nmodule zekrom_arms() {\n    // Arms with clawed hands\n    for(side = [-1, 1]) {\n        translate([5, side*15, 0]) {\n            // Upper arm\n            color(\"gray20\") {\n                rotate([0, 0, side*20]) {\n                    cylinder(h=12, r1=3, r2=2.5, $fn=8);\n                }\n            }\n            \n            // Lower arm\n            translate([8, side*5, -5]) {\n                color(\"gray20\") {\n                    rotate([0, 20, side*30]) {\n                        cylinder(h=10, r1=2.5, r2=2, $fn=8);\n                    }\n                }\n                \n                // Hand with claws\n                translate([12, side*7, -8]) {\n                    color(\"gray20\") {\n                        sphere(3, $fn=12);\n                    }\n                    \n                    // Claws\n                    for(claw = [0:1:2]) {\n                        rotate([0, 0, claw*120-120]) {\n                            translate([2, 0, 0]) {\n                                color(\"gray30\") {\n                                    rotate([90, 0, 0]) {\n                                        cylinder(h=4, r1=1, r2=0.5, $fn=6);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule zekrom_legs() {\n    // Powerful dragon legs\n    for(side = [-1, 1]) {\n        translate([-5, side*8, -15]) {\n            // Thigh\n            color(\"gray20\") {\n                rotate([30, 0, side*10]) {\n                    cylinder(h=15, r1=4, r2=3, $fn=8);\n                }\n            }\n            \n            // Lower leg\n            translate([-5, side*3, -12]) {\n                color(\"gray20\") {\n                    rotate([0, 0, side*15]) {\n                        cylinder(h=12, r1=3, r2=2.5, $fn=8);\n                    }\n                }\n                \n                // Foot\n                translate([-8, side*4, -18]) {\n                    color(\"gray20\") {\n                        cube([10, 6, 4], center=true);\n                    }\n                    \n                    // Toes\n                    for(toe = [0:1:2]) {\n                        translate([-12+toe*3, side*2, -20]) {\n                            color(\"gray30\") {\n                                cube([2, 2, 3], center=true);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Scale to reasonable 3D printing size (80mm tall)\n    scale(0.8) {\n        // Body center\n        zekrom_body();\n        \n        // Head\n        zekrom_head();\n        \n        // Wings\n        for(side = [-1, 1]) {\n            translate([-5, side*12, 8]) {\n                rotate([0, side*20, 0]) {\n                    mirror([0, side, 0]) {\n                        zekrom_wing();\n                    }\n                }\n            }\n        }\n        \n        // Arms\n        zekrom_arms();\n        \n        // Legs\n        zekrom_legs();\n        \n        // Tail\n        translate([-15, 0, -15]) {\n            zekrom_tail();\n        }\n    }\n}",
    "renders": true
  },
  {
    "pokemon": "kyurem",
    "openscad_code": "// Kyurem (Realistic Style, Medium Complexity)\n// Scale: ~80mm tall\n\n// Colors\ncolor_body = [0.85,0.9,0.95];\ncolor_ice = [0.7,0.9,1];\ncolor_gray = [0.4,0.4,0.45];\ncolor_yellow = [1,0.8,0];\ncolor_red = [0.8,0.1,0.1];\n\n// Main body\nmodule kyurem() {\n    union() {\n        // Head\n        translate([0,0,60]) head();\n        \n        // Neck/upper body\n        translate([0,0,45]) neck();\n        \n        // Torso\n        translate([0,0,25]) torso();\n        \n        // Wings\n        translate([-15,0,35]) wing(true);\n        translate([15,0,35]) wing(false);\n        \n        // Arms\n        translate([-12,0,35]) arm(true);\n        translate([12,0,35]) arm(false);\n        \n        // Legs\n        translate([-8,-5,10]) leg(true);\n        translate([8,-5,10]) leg(false);\n        \n        // Tail\n        translate([0,-8,20]) tail();\n        \n        // Ice spikes\n        ice_spikes();\n    }\n}\n\nmodule head() {\n    color(color_body) {\n        // Main head shape\n        difference() {\n            sphere(12);\n            translate([0,-12,0]) cube([24,24,24], center=true);\n        }\n        \n        // Snout\n        translate([0,-10,0]) scale([0.8,1.2,0.8]) sphere(8);\n        \n        // Eyes\n        color(color_yellow) {\n            translate([-5,5,2]) sphere(2);\n            translate([5,5,2]) sphere(2);\n        }\n        \n        // Eye pupils\n        color(color_red) {\n            translate([-5,6,2.5]) rotate([0,90,0]) cylinder(h=1, r=0.5);\n            translate([5,6,2.5]) rotate([0,90,0]) cylinder(h=1, r=0.5);\n        }\n    }\n}\n\nmodule neck() {\n    color(color_body) {\n        cylinder(h=15, r1=8, r2=10, center=true);\n    }\n}\n\nmodule torso() {\n    color(color_body) {\n        // Main body\n        difference() {\n            scale([1.2,0.8,1.5]) sphere(15);\n            // Chest cavity\n            translate([0,12,0]) cube([20,20,25], center=true);\n        }\n        \n        // Ice patterns on chest\n        color(color_ice) {\n            for(i=[-15:5:15]) {\n                translate([i,0,20]) rotate([0,90,0]) cylinder(h=2, r=1.5);\n            }\n        }\n    }\n}\n\nmodule wing(left=true) {\n    color(color_body) {\n        mirror([left?-1:1,0,0]) {\n            // Wing base\n            translate([0,0,0]) rotate([0,20,30]) scale([0.5,1,0.1]) sphere(20);\n            \n            // Wing membranes\n            color(color_ice) {\n                for(i=[0:30:120]) {\n                    rotate([0,i,0]) translate([0,0,0]) \n                    rotate([0,20,0]) scale([0.3,0.8,0.05]) sphere(15);\n                }\n            }\n        }\n    }\n}\n\nmodule arm(left=true) {\n    color(color_body) {\n        mirror([left?-1:1,0,0]) {\n            // Upper arm\n            rotate([0,0,left?20:-20]) translate([0,0,-5]) \n            cylinder(h=12, r=3, center=true);\n            \n            // Lower arm\n            translate([0,-8,-10]) rotate([0,0,left?40:-40])\n            cylinder(h=10, r=2.5, center=true);\n            \n            // Claws\n            color(color_gray) {\n                for(i=[-2:2:2]) {\n                    translate([i,-13,-14]) rotate([0,0,left?-20:20])\n                    cylinder(h=3, r1=1, r2=0.5);\n                }\n            }\n        }\n    }\n}\n\nmodule leg(left=true) {\n    color(color_body) {\n        mirror([left?-1:1,0,0]) {\n            // Upper leg\n            cylinder(h=15, r1=4, r2=3.5, center=true);\n            \n            // Lower leg\n            translate([0,0,-15]) cylinder(h=12, r1=3.5, r2=3);\n            \n            // Foot\n            translate([0,3,-24]) scale([1.5,2,0.8]) sphere(3);\n            \n            // Toes\n            color(color_gray) {\n                for(i=[-2:2:2]) {\n                    translate([i,5,-26]) sphere(1);\n                }\n            }\n        }\n    }\n}\n\nmodule tail() {\n    color(color_body) {\n        // Tail base\n        cylinder(h=20, r1=5, r2=3);\n        \n        // Tail tip\n        translate([0,-15,0]) color(color_ice) sphere(4);\n        \n        // Tail segments\n        for(i=[0:5:15]) {\n            translate([0,-i-5,i/3]) rotate([0,15,0])\n            scale([0.8,1,0.8]) sphere(3);\n        }\n    }\n}\n\nmodule ice_spikes() {\n    color(color_ice) {\n        // Back spikes\n        for(i=[0:10:40]) {\n            translate([0,0,i+20]) rotate([0,0,sin(i*5)*10])\n            cylinder(h=3+sin(i*3)*2, r1=2, r2=0.5);\n        }\n        \n        // Shoulder spikes\n        translate([-15,0,35]) rotate([0,0,-30]) cylinder(h=5, r1=1.5, r2=0.5);\n        translate([15,0,35]) rotate([0,0,30]) cylinder(h=5, r1=1.5, r2=0.5);\n        \n        // Head spikes\n        translate([0,0,70]) rotate([0,0,0]) cylinder(h=6, r1=2, r2=0.5);\n        translate([-5,0,68]) rotate([0,0,-20]) cylinder(h=4, r1=1.5, r2=0.5);\n        translate([5,0,68]) rotate([0,0,20]) cylinder(h=4, r1=1.5, r2=0.5);\n    }\n}\n\n// Render\nkyurem();",
    "renders": true
  },
  {
    "pokemon": "xerneas",
    "openscad_code": "// Xerneas in realistic style - medium complexity\n// Size: ~70mm tall when printed\n\n$fn = 32;\nscale_factor = 0.7;\n\nmodule xerneas_body() {\n    color([0.3, 0.5, 0.9]) {\n        // Main torso\n        translate([0, 0, 25]) \n            scale([1.2, 0.8, 1.5]) \n                sphere(r=15);\n        \n        // Chest plate\n        translate([0, -8, 25])\n            scale([0.8, 0.3, 1.2])\n                sphere(r=15);\n    }\n}\n\nmodule xerneas_head() {\n    color([0.3, 0.5, 0.9]) {\n        // Head\n        translate([0, 20, 45])\n            scale([0.9, 1.1, 1])\n                sphere(r=12);\n        \n        // Snout\n        translate([0, 32, 42])\n            scale([0.6, 0.8, 0.5])\n                sphere(r=8);\n    }\n    \n    // Antlers\n    color([0.8, 0.8, 0.9]) {\n        for(i = [-30:30:30]) {\n            rotate([0, -20, i])\n                translate([0, 25 + abs(i)/2, 55])\n                    cylinder(h=25, r1=3, r2=1);\n            \n            rotate([0, -40, i])\n                translate([0, 30 + abs(i)/2, 65])\n                    cylinder(h=20, r1=2, r2=0.5);\n        }\n    }\n    \n    // Eyes\n    color([0.9, 0.2, 0.3]) {\n        translate([-5, 22, 48])\n            sphere(r=2);\n        translate([5, 22, 48])\n            sphere(r=2);\n    }\n}\n\nmodule xerneas_legs() {\n    color([0.3, 0.5, 0.9]) {\n        // Front legs\n        for(x = [-12, 12]) {\n            translate([x, 5, 15])\n                cylinder(h=20, r=4);\n            translate([x, 5, 0])\n                sphere(r=5);\n        }\n        \n        // Back legs\n        for(x = [-10, 10]) {\n            translate([x, -15, 15])\n                cylinder(h=20, r=4);\n            translate([x, -15, 0])\n                sphere(r=5);\n        }\n    }\n}\n\nmodule xerneas_tail() {\n    color([0.3, 0.5, 0.9]) {\n        // Tail segments\n        for(i = [1:5]) {\n            translate([0, -20 - i*5, 25 - i*3])\n                scale([1 - i*0.15, 1, 1 - i*0.15])\n                    sphere(r=10 - i*1.5);\n        }\n    }\n}\n\nmodule xerneas_markings() {\n    color([0.8, 0.8, 0.9]) {\n        // Chest marking\n        translate([0, -5, 35])\n            scale([0.6, 0.1, 0.8])\n                sphere(r=10);\n        \n        // Leg markings\n        for(x = [-12, 12, -10, 10]) {\n            y = x > 0 ? 5 : -15;\n            translate([x, y, 20])\n                cylinder(h=8, r=2);\n        }\n    }\n}\n\nmodule xerneas_complete() {\n    union() {\n        xerneas_body();\n        xerneas_head();\n        xerneas_legs();\n        xerneas_tail();\n        xerneas_markings();\n    }\n}\n\nscale([scale_factor, scale_factor, scale_factor])\n    xerneas_complete();",
    "renders": true
  },
  {
    "pokemon": "yveltal",
    "openscad_code": "// Yveltal - Realistic Style, Medium Complexity\n// Main body and wing structure\n\n$fn = 30;\n\nmodule yveltal() {\n    color([0.2, 0.1, 0.1]) {\n        // Main body core\n        translate([0, 0, 15]) {\n            difference() {\n                scale([1.2, 0.8, 1.5]) sphere(10);\n                translate([0, 0, -10]) cube([25, 25, 20], center=true);\n            }\n        }\n        \n        // Chest armor plate\n        translate([0, 0, 20]) {\n            rotate([90, 0, 0]) \n            cylinder(h=3, r1=8, r2=12);\n        }\n        \n        // Head\n        translate([0, -12, 28]) {\n            scale([1.3, 1.5, 1.2]) sphere(8);\n        }\n        \n        // Beak\n        color([0.5, 0.2, 0.2]) {\n            translate([0, -20, 26]) {\n                rotate([30, 0, 0])\n                scale([1, 2.5, 1]) cylinder(h=6, r1=3, r2=1);\n            }\n        }\n        \n        // Neck\n        translate([0, -5, 25]) {\n            rotate([-20, 0, 0])\n            cylinder(h=12, r1=5, r2=4);\n        }\n        \n        // Eyes\n        color([1, 0.2, 0.2]) {\n            translate([4, -12, 30]) sphere(2.5);\n            translate([-4, -12, 30]) sphere(2.5);\n        }\n        \n        // Eye markings\n        color([0.1, 0.05, 0.05]) {\n            translate([6, -12, 28]) scale([0.5, 1.5, 0.2]) sphere(3);\n            translate([-6, -12, 28]) scale([0.5, 1.5, 0.2]) sphere(3);\n        }\n        \n        // Wings\n        module wing() {\n            color([0.2, 0.1, 0.1]) {\n                // Main wing structure\n                translate([0, 0, 5]) {\n                    rotate([0, 0, 30])\n                    scale([2, 0.3, 8]) cube([1, 1, 1]);\n                }\n                \n                // Wing claw\n                translate([0, 0, 10]) {\n                    rotate([0, 20, 0])\n                    cylinder(h=5, r1=2, r2=1);\n                }\n                \n                // Wing membrane\n                color([0.3, 0.15, 0.15]) {\n                    for(i = [1:3]) {\n                        translate([i*4, 0, 5 + i*2]) {\n                            rotate([0, 0, 30])\n                            scale([0.8, 0.2, 4]) cube([1, 1, 1]);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Left wing\n        translate([-15, 0, 20]) {\n            rotate([0, 0, -20])\n            wing();\n        }\n        \n        // Right wing\n        translate([15, 0, 20]) {\n            scale([-1, 1, 1])\n            rotate([0, 0, -20])\n            wing();\n        }\n        \n        // Tail structure\n        color([0.25, 0.1, 0.1]) {\n            translate([0, 10, 15]) {\n                rotate([20, 0, 0])\n                cylinder(h=20, r1=5, r2=2);\n            }\n            \n            // Tail feathers\n            for(i = [0:2]) {\n                translate([i*3 - 3, 25 - i*2, 18 - i*2]) {\n                    rotate([20 + i*10, i*10, 0])\n                    scale([0.3, 0.1, 4]) cube([1, 1, 1]);\n                }\n            }\n        }\n        \n        // Legs\n        module leg() {\n            color([0.3, 0.12, 0.12]) {\n                // Upper leg\n                translate([0, 0, 0]) {\n                    rotate([0, 30, 0])\n                    cylinder(h=8, r1=2.5, r2=2);\n                }\n                \n                // Lower leg\n                translate([0, 0, -6]) {\n                    rotate([0, 0, 10])\n                    cylinder(h=6, r1=2, r2=1.5);\n                }\n                \n                // Foot\n                translate([0, 2, -10]) {\n                    rotate([90, 0, 0])\n                    cylinder(h=4, r1=2, r2=3);\n                }\n                \n                // Claws\n                color([0.4, 0.15, 0.15]) {\n                    for(j = [-1, 0, 1]) {\n                        translate([j*1.5, 2, -10]) {\n                            rotate([90, 0, 0])\n                            cylinder(h=2, r1=0.5, r2=0.2);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Left leg\n        translate([-6, 0, 8]) {\n            rotate([0, 0, 10])\n            leg();\n        }\n        \n        // Right leg\n        translate([6, 0, 8]) {\n            rotate([0, 0, -10])\n            scale([-1, 1, 1])\n            leg();\n        }\n        \n        // Horns\n        color([0.15, 0.05, 0.05]) {\n            translate([0, -18, 32]) {\n                rotate([20, 0, 0])\n                cylinder(h=8, r1=2, r2=1);\n            }\n            \n            translate([-3, -18, 31]) {\n                rotate([25, -10, -10])\n                cylinder(h=7, r1=1.5, r2=0.5);\n            }\n            \n            translate([3, -18, 31]) {\n                rotate([25, 10, 10])\n                cylinder(h=7, r1=1.5, r2=0.5);\n            }\n        }\n        \n        // Chest markings\n        color([0.8, 0.1, 0.1]) {\n            translate([0, 0, 22]) {\n                scale([1, 1.5, 0.5]) \n                cylinder(h=1, r=4);\n            }\n            \n            // Diamond pattern\n            for(x = [-2, 2]) {\n                translate([x, 0, 22]) {\n                    rotate([90, 0, 45])\n                    cube([3, 0.5, 3], center=true);\n                }\n            }\n        }\n    }\n}\n\n// Scale to 80mm height\nscale(0.8)\nyveltal();",
    "renders": true
  },
  {
    "pokemon": "zygarde",
    "openscad_code": "// Zygarde 50% Forme - Realistic Medium Complexity\n// Overall size ~80mm long\n\n// Main colors\ncolor_zygarde_green = [0/255, 120/255, 60/255];\ncolor_zygarde_black = [20/255, 20/255, 20/255];\ncolor_zygarde_white = [240/255, 240/255, 240/255];\ncolor_zygarde_red = [200/255, 0/255, 0/255];\ncolor_hex_green = [0/255, 80/255, 40/255];\n\n// Scale factor for 3D printing\nscale_factor = 0.8;\n\n// Main body module\nmodule zygarde_body() {\n    color(color_zygarde_green) {\n        // Central body - snake-like\n        union() {\n            // Head section\n            translate([0, 0, 15]) {\n                sphere(8);\n            }\n            \n            // Neck and body\n            hull() {\n                translate([0, 0, 15]) sphere(7);\n                translate([-20, 0, 12]) sphere(6);\n                translate([-40, 0, 10]) sphere(5);\n                translate([-60, 0, 8]) sphere(4);\n            }\n            \n            // Tail end\n            translate([-65, 0, 7]) {\n                scale([3, 2, 1]) sphere(3);\n            }\n        }\n    }\n}\n\n// Hexagonal pattern on body\nmodule hex_pattern() {\n    color(color_hex_green) {\n        for(i = [0:5]) {\n            rotate([0, 0, i * 60]) {\n                translate([-25, 0, 12]) {\n                    cylinder(h=0.5, r=3, $fn=6);\n                }\n                translate([-45, 0, 10]) {\n                    cylinder(h=0.5, r=2.5, $fn=6);\n                }\n            }\n        }\n    }\n}\n\n// Eyes\nmodule eyes() {\n    color(color_zygarde_white) {\n        translate([6, 4, 17]) sphere(2);\n        translate([6, -4, 17]) sphere(2);\n    }\n    color(color_zygarde_red) {\n        translate([7, 4, 17]) sphere(1);\n        translate([7, -4, 17]) sphere(1);\n    }\n}\n\n// Crest on head\nmodule head_crest() {\n    color(color_zygarde_green) {\n        translate([0, 0, 24]) {\n            scale([1, 0.3, 2]) sphere(4);\n        }\n    }\n    color(color_zygarde_black) {\n        translate([0, 0, 26]) {\n            scale([0.8, 0.2, 1.5]) sphere(3);\n        }\n    }\n}\n\n// Legs\nmodule legs() {\n    color(color_zygarde_green) {\n        // Front legs\n        for(side = [-1, 1]) {\n            translate([-15, side * 8, 10]) {\n                rotate([30, 0, side * 15]) {\n                    cylinder(h=12, r=2.5);\n                    translate([0, 0, 12]) {\n                        sphere(3);\n                    }\n                }\n            }\n        }\n        \n        // Back legs\n        for(side = [-1, 1]) {\n            translate([-45, side * 7, 8]) {\n                rotate([20, 0, side * 10]) {\n                    cylinder(h=10, r=2);\n                    translate([0, 0, 10]) {\n                        sphere(2.5);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Tail blades\nmodule tail_blades() {\n    color(color_zygarde_green) {\n        for(i = [0:2]) {\n            rotate([0, 0, i * 120 - 60]) {\n                translate([-68, 0, 7]) {\n                    rotate([0, 90, 0]) {\n                        scale([8, 0.5, 4]) cube([1, 1, 1]);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Markings\nmodule markings() {\n    color(color_zygarde_black) {\n        // Side markings\n        translate([-25, 7, 12]) {\n            scale([0.5, 1, 8]) sphere(1);\n        }\n        translate([-25, -7, 12]) {\n            scale([0.5, 1, 8]) sphere(1);\n        }\n        \n        // Back markings\n        translate([-40, 0, 12]) {\n            scale([8, 0.5, 0.5]) sphere(1);\n        }\n    }\n}\n\n// Assemble the model\nscale([scale_factor, scale_factor, scale_factor]) {\n    union() {\n        zygarde_body();\n        hex_pattern();\n        eyes();\n        head_crest();\n        legs();\n        tail_blades();\n        markings();\n    }\n}",
    "renders": true
  },
  {
    "pokemon": "solgaleo",
    "openscad_code": "// Solgaleo - Realistic Style, Medium Complexity\n\n// Colors\ngold = [0.8, 0.6, 0.2];\nsilver = [0.7, 0.7, 0.75];\nblue = [0.1, 0.3, 0.7];\nwhite = [0.95, 0.95, 0.95];\nblack = [0.1, 0.1, 0.1];\n\n// Main body module\nmodule body() {\n    // Torso\n    color(gold)\n    translate([0, 0, 15])\n    scale([1.2, 0.8, 1.5])\n    sphere(15);\n    \n    // Chest plate\n    color(white)\n    translate([0, -11, 20])\n    cube([25, 2, 25], center=true);\n    \n    // Back plate\n    color(white)\n    translate([0, 11, 20])\n    cube([25, 2, 25], center=true);\n}\n\n// Head module\nmodule head() {\n    // Main head\n    color(gold)\n    translate([0, 0, 45])\n    scale([1.3, 1, 1.1])\n    sphere(12);\n    \n    // Muzzle\n    color(gold)\n    translate([0, -15, 42])\n    scale([0.8, 0.8, 0.6])\n    sphere(8);\n    \n    // Eyes\n    color(blue)\n    translate([-7, -15, 48])\n    sphere(2.5);\n    translate([7, -15, 48])\n    sphere(2.5);\n    \n    // Eye highlights\n    color(white)\n    translate([-7.5, -15.5, 49])\n    sphere(1);\n    translate([6.5, -15.5, 49])\n    sphere(1);\n    \n    // Nose\n    color(black)\n    translate([0, -18, 42])\n    sphere(1.5);\n}\n\n// Mane module\nmodule mane() {\n    // Front mane\n    for(i = [-30:10:30]) {\n        color(white)\n        translate([i/2, -20, 45 + abs(i)/3])\n        rotate([90, 0, i])\n        scale([0.3, 0.3, 1])\n        cylinder(15, 5, 2);\n    }\n    \n    // Side mane\n    for(i = [-20:10:20]) {\n        color(white)\n        translate([i, -10, 40])\n        rotate([90, 0, i*2])\n        scale([0.3, 0.3, 1])\n        cylinder(12, 4, 1);\n    }\n}\n\n// Legs module\nmodule legs() {\n    // Front legs\n    for(side = [-1, 1]) {\n        color(gold)\n        translate([side * 12, 0, 15])\n        scale([0.6, 0.6, 1])\n        cylinder(20, 5, 4);\n        \n        // Hoof\n        color(silver)\n        translate([side * 12, 0, -5])\n        scale([1.1, 1.1, 0.5])\n        sphere(5);\n    }\n    \n    // Back legs\n    for(side = [-1, 1]) {\n        color(gold)\n        translate([side * 10, 20, 12])\n        scale([0.7, 0.7, 1.2])\n        cylinder(18, 6, 5);\n        \n        // Hoof\n        color(silver)\n        translate([side * 10, 20, -6])\n        scale([1.1, 1.1, 0.5])\n        sphere(6);\n    }\n}\n\n// Tail module\nmodule tail() {\n    color(white)\n    translate([0, 25, 25])\n    rotate([45, 0, 0])\n    scale([0.3, 0.3, 1])\n    cylinder(30, 8, 4);\n    \n    // Tail tip\n    color(gold)\n    translate([0, 25, 55])\n    sphere(5);\n}\n\n// Sun markings\nmodule markings() {\n    // Sun pattern on forehead\n    color(white)\n    translate([0, -10, 55])\n    difference() {\n        sphere(4);\n        color(gold)\n        translate([0, -1, 1])\n        cylinder(8, 2, 2);\n    }\n    \n    // Chest sun\n    color(white)\n    translate([0, -11, 30])\n    difference() {\n        sphere(5);\n        color(gold)\n        translate([0, 0, 1])\n        cylinder(10, 2.5, 2.5);\n    }\n}\n\n// Ears module\nmodule ears() {\n    for(side = [-1, 1]) {\n        color(white)\n        translate([side * 10, -5, 55])\n        rotate([0, 0, side * 20])\n        scale([0.3, 0.4, 1])\n        cylinder(10, 4, 2);\n        \n        // Ear tips\n        color(gold)\n        translate([side * 12, -5, 65])\n        sphere(3);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    mane();\n    legs();\n    tail();\n    markings();\n    ears();\n}\n\n// Center and scale for printing\ntranslate([0, 0, 0])\nscale(0.8)",
    "renders": true
  },
  {
    "pokemon": "lunala",
    "openscad_code": "// Lunala Pokemon - Realistic Style (Medium Complexity)\n// Size: ~70mm wingspan, 3D printable\n\n// Main colors\ncolor_wing = [0.2, 0.1, 0.35];\ncolor_body = [0.85, 0.85, 0.9];\ncolor_gold = [0.8, 0.6, 0.2];\ncolor_detail = [0.95, 0.95, 0.95];\n\n// Scale factor for easy resizing\nscale_factor = 1;\n\n// Main body module\nmodule lunala_body() {\n    color(color_body) {\n        // Torso - elongated ellipsoid\n        translate([0, 0, 15]) {\n            scale([1, 0.7, 1.8]) sphere(r=8, $fn=20);\n        }\n        \n        // Head section\n        translate([0, 0, 30]) {\n            scale([1.2, 1, 1.2]) sphere(r=10, $fn=20);\n        }\n        \n        // Crescent moon crown\n        color(color_gold) {\n            translate([0, -8, 38]) {\n                rotate([90, 0, 0]) {\n                    scale([1.5, 0.3, 1.5]) \n                        difference() {\n                            cylinder(h=2, r=12, $fn=50);\n                            translate([0, 0, -1]) cylinder(h=4, r=10, $fn=50);\n                        }\n                }\n            }\n        }\n    }\n}\n\n// Wing module\nmodule lunala_wing(is_left = true) {\n    angle = is_left ? 30 : -30;\n    mirror_val = is_left ? 1 : -1;\n    \n    color(color_wing) {\n        // Main wing\n        translate([mirror_val * 12, 0, 20]) {\n            rotate([0, angle, 0]) {\n                // Base wing shape\n                difference() {\n                    scale([1.5, 0.1, 2.5]) sphere(r=15, $fn=20);\n                    translate([0, -2, 0]) cube([40, 4, 40], center=true);\n                }\n                \n                // Wing segments\n                for(i = [0:3]) {\n                    rotate([0, i * 15, 0]) {\n                        translate([mirror_val * (8 + i * 5), 0, -5 + i * 3]) {\n                            scale([0.8 - i * 0.1, 0.05, 0.8 - i * 0.1]) \n                                sphere(r=12 - i * 2, $fn=15);\n                        }\n                    }\n                }\n                \n                // Wing edges\n                color(color_gold) {\n                    for(i = [0:4]) {\n                        translate([mirror_val * (25 - i * 5), 0, -10 + i * 5]) {\n                            sphere(r=2, $fn=10);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Face details\nmodule lunada_face() {\n    color(color_detail) {\n        // Eyes\n        for(side = [-1, 1]) {\n            translate([side * 4, -8, 33]) {\n                scale([1, 1.5, 0.5]) sphere(r=3, $fn=10);\n                // Eye detail\n                translate([0, 0, 1.5]) {\n                    color([0.1, 0.1, 0.1]) \n                        sphere(r=1.5, $fn=10);\n                }\n            }\n        }\n        \n        // Mouth area\n        color(color_body) {\n            translate([0, -11, 28]) {\n                scale([1.2, 0.8, 0.5]) sphere(r=4, $fn=15);\n            }\n        }\n        \n        // Gold markings\n        color(color_gold) {\n            // Forehead mark\n            translate([0, -5, 38]) {\n                rotate([90, 0, 0]) \n                    cylinder(h=0.5, r1=4, r2=0, $fn=3);\n            }\n            \n            // Cheek marks\n            for(side = [-1, 1]) {\n                translate([side * 6, -9, 30]) {\n                    sphere(r=1.5, $fn=8);\n                }\n            }\n        }\n    }\n}\n\n// Tail section\nmodule lunala_tail() {\n    color(color_wing) {\n        translate([0, 0, 0]) {\n            // Main tail\n            for(i = [0:5]) {\n                translate([0, 0, 5 - i * 3]) {\n                    rotate([i * 5, 0, 0]) {\n                        scale([0.5 - i * 0.05, 0.1, 0.5 - i * 0.05]) \n                            sphere(r=8 - i, $fn=12);\n                    }\n                }\n            }\n            \n            // Tail fins\n            color(color_gold) {\n                for(side = [-1, 1]) {\n                    translate([side * 3, 0, -8]) {\n                        rotate([side * 20, 0, 0]) {\n                            scale([1, 0.1, 0.5]) sphere(r=4, $fn=10);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Arms/forelegs\nmodule lunala_arms() {\n    color(color_body) {\n        for(side = [-1, 1]) {\n            translate([side * 8, 0, 15]) {\n                rotate([0, 0, side * 30]) {\n                    cylinder(h=8, r=2, $fn=10);\n                    translate([0, 0, 8]) {\n                        scale([0.8, 0.5, 0.8]) sphere(r=3, $fn=10);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        lunala_body();\n        lunala_wing(true);\n        lunala_wing(false);\n        lunada_face();\n        lunala_tail();\n        lunala_arms();\n    }\n}",
    "renders": true
  },
  {
    "pokemon": "necrozma",
    "openscad_code": "// Necrozma Pokemon - OpenSCAD Model\n// Realistic style, medium complexity\n\n// Main colors\ncolor_black = [0.1, 0.1, 0.15];\ncolor_purple = [0.4, 0.2, 0.6];\ncolor_cyan = [0.2, 0.8, 0.9];\ncolor_yellow = [0.9, 0.8, 0.1];\n\n// Scale factor for 3D printing\nscale_factor = 0.8;\n\n// Main body module\nmodule necrozma_body() {\n    color(color_black)\n    union() {\n        // Central prism body\n        translate([0, 0, 10])\n        scale([1, 0.8, 1.5])\n        cube([20, 15, 25], center=true);\n        \n        // Upper prism extension\n        translate([0, 0, 30])\n        scale([0.8, 0.6, 1])\n        cube([18, 12, 15], center=true);\n        \n        // Lower prism base\n        translate([0, 0, -5])\n        scale([1.2, 1, 0.8])\n        cube([22, 18, 10], center=true);\n    }\n}\n\n// Crystal formations\nmodule crystals() {\n    color(color_purple)\n    union() {\n        // Front crystals\n        for(i = [-1, 1]) {\n            translate([i * 12, 8, 15])\n            rotate([0, 0, i * 15])\n            scale([0.5, 0.5, 2])\n            cylinder(h=8, r1=3, r2=0.5, center=true);\n        }\n        \n        // Side crystals\n        for(i = [-1, 1]) {\n            translate([i * 15, 0, 20])\n            rotate([0, i * 20, 0])\n            scale([0.3, 0.3, 1.5])\n            cube([3, 3, 12], center=true);\n        }\n        \n        // Back crystals\n        translate([0, -10, 25])\n        rotate([15, 0, 0])\n        scale([0.4, 0.4, 1.8])\n        cylinder(h=10, r1=4, r2=1, center=true);\n    }\n}\n\n// Wing-like structures\nmodule wings() {\n    color(color_black)\n    union() {\n        // Left wing\n        translate([-15, 0, 20])\n        rotate([0, 0, -30])\n        scale([1, 0.2, 1.5])\n        cube([25, 2, 15], center=true);\n        \n        // Right wing\n        translate([15, 0, 20])\n        rotate([0, 0, 30])\n        scale([1, 0.2, 1.5])\n        cube([25, 2, 15], center=true);\n        \n        // Wing tips\n        for(side = [-1, 1]) {\n            translate([side * 28, 0, 28])\n            rotate([0, 0, side * 45])\n            scale([0.3, 0.1, 0.8])\n            cube([8, 1, 6], center=true);\n        }\n    }\n}\n\n// Head/face structure\nmodule head() {\n    color(color_black)\n    union() {\n        // Main head shape\n        translate([0, 0, 38])\n        scale([0.6, 0.5, 0.8])\n        cube([16, 12, 12], center=true);\n        \n        // Eye sockets\n        color(color_cyan)\n        for(i = [-1, 1]) {\n            translate([i * 4, 2, 42])\n            scale([0.8, 0.3, 0.3])\n            sphere(3);\n        }\n        \n        // Facial markings\n        color(color_yellow)\n        translate([0, -2, 40])\n        scale([1.2, 0.1, 0.3])\n        cube([12, 1, 8], center=true);\n    }\n}\n\n// Arm-like structures\nmodule arms() {\n    color(color_black)\n    union() {\n        // Left arm\n        translate([-12, -5, 12])\n        rotate([0, 0, -15])\n        scale([0.3, 0.3, 1.2])\n        cube([5, 5, 20], center=true);\n        \n        // Right arm\n        translate([12, -5, 12])\n        rotate([0, 0, 15])\n        scale([0.3, 0.3, 1.2])\n        cube([5, 5, 20], center=true);\n        \n        // Arm crystals\n        color(color_purple)\n        for(side = [-1, 1]) {\n            translate([side * 12, -8, 5])\n            scale([0.4, 0.4, 0.8])\n            cylinder(h=6, r1=2, r2=1, center=true);\n        }\n    }\n}\n\n// Leg structures\nmodule legs() {\n    color(color_black)\n    union() {\n        // Left leg\n        translate([-8, -5, -10])\n        scale([0.4, 0.4, 1])\n        cube([6, 6, 15], center=true);\n        \n        // Right leg\n        translate([8, -5, -10])\n        scale([0.4, 0.4, 1])\n        cube([6, 6, 15], center=true);\n        \n        // Feet\n        for(side = [-1, 1]) {\n            translate([side * 8, -8, -18])\n            scale([0.6, 0.8, 0.3])\n            cube([8, 10, 4], center=true);\n        }\n    }\n}\n\n// Energy core\nmodule energy_core() {\n    color(color_cyan)\n    translate([0, 0, 15])\n    scale([0.8, 0.6, 0.8])\n    sphere(5);\n}\n\n// Combine all parts\nscale([scale_factor, scale_factor, scale_factor])\nunion() {\n    necrozma_body();\n    crystals();\n    wings();\n    head();\n    arms();\n    legs();\n    energy_core();\n}",
    "renders": true
  },
  {
    "pokemon": "zacian",
    "openscad_code": "// Zacian - Crowned Sword Form\n// Medium complexity realistic style\n\n$fa = 2;\n$fs = 0.5;\n\n// Main colors\ncolor_zacian_blue = [0.2, 0.4, 0.8];\ncolor_zacian_gold = [0.9, 0.7, 0.2];\ncolor_zacian_white = [0.95, 0.95, 0.95];\ncolor_zacian_red = [0.8, 0.2, 0.2];\n\nmodule zacian_body() {\n    color(color_zacian_blue) {\n        // Torso\n        translate([0, 0, 10])\n            scale([1.2, 0.8, 1.5])\n            sphere(8);\n        \n        // Chest armor\n        translate([0, 5, 12])\n            scale([1.3, 0.5, 1.2])\n            sphere(7);\n    }\n}\n\nmodule zacian_head() {\n    union() {\n        // Head\n        color(color_zacian_blue)\n            translate([0, 8, 22])\n            scale([0.9, 0.7, 1])\n            sphere(6);\n        \n        // Snout\n        color(color_zacian_blue)\n            translate([0, 12, 21])\n            scale([0.6, 0.8, 0.5])\n            sphere(4);\n        \n        // Crown\n        color(color_zacian_gold)\n            translate([0, 9, 27])\n            rotate([0, 0, 0])\n            cylinder(h=5, r=4, $fn=8);\n        \n        // Ears\n        for(side = [-1, 1]) {\n            color(color_zacian_blue)\n                translate([side * 3, 6, 26])\n                rotate([0, side * 10, 0])\n                scale([0.5, 1.5, 2])\n                sphere(2);\n        }\n        \n        // Eyes\n        for(side = [-1, 1]) {\n            color(color_zacian_red)\n                translate([side * 2.5, 11, 23])\n                sphere(1);\n            \n            color(color_zacian_white)\n                translate([side * 2.7, 11.5, 23.2])\n                sphere(0.3);\n        }\n    }\n}\n\nmodule zacian_legs() {\n    for(side = [-1, 1]) {\n        // Front legs\n        color(color_zacian_blue) {\n            translate([side * 4, 5, 8])\n                rotate([0, 0, -10])\n                cylinder(h=8, r=2);\n            \n            translate([side * 4, 3, 0])\n                sphere(2.5);\n        }\n        \n        // Back legs\n        color(color_zacian_blue) {\n            translate([side * 3, -5, 6])\n                rotate([10, 0, 0])\n                cylinder(h=9, r=2.2);\n            \n            translate([side * 3, -7, 0])\n                sphere(3);\n        }\n    }\n}\n\nmodule zacian_tail() {\n    color(color_zacian_blue) {\n        translate([0, -10, 12])\n            rotate([30, 0, 0])\n            scale([0.8, 0.8, 1])\n            cylinder(h=12, r1=3, r2=1);\n    }\n}\n\nmodule zacian_cape() {\n    color(color_zacian_white) {\n        // Main cape\n        difference() {\n            translate([0, -2, 15])\n                rotate([80, 0, 0])\n                scale([2.5, 1, 0.5])\n                cylinder(h=15, r=8, $fn=16);\n            \n            // Cut bottom\n            translate([0, -2, 5])\n                cube([20, 20, 10], center=true);\n        }\n        \n        // Cape stripes\n        for(i = [0:3]) {\n            color(color_zacian_gold)\n                translate([0, -2 + i * 1.5, 12])\n                rotate([80, 0, 0])\n                scale([2.3, 0.2, 0.3])\n                cylinder(h=12, r=7, $fn=16);\n        }\n    }\n}\n\nmodule zacian_sword() {\n    // Sword blade\n    color(color_zacian_gold)\n        translate([0, 15, 10])\n            rotate([0, 0, 90])\n            scale([0.3, 8, 0.1])\n            cube([1, 1, 1]);\n    \n    // Sword handle\n    color(color_zacian_gold)\n        translate([0, 8, 8])\n            rotate([0, 0, 90])\n            cylinder(h=4, r=0.8);\n    \n    // Sword guard\n    color(color_zacian_gold)\n        translate([0, 10, 8])\n            rotate([0, 0, 90])\n            scale([1, 0.3, 0.2])\n            cube([4, 1, 1]);\n}\n\nmodule zacian_markings() {\n    // Chest plate design\n    color(color_zacian_gold)\n        translate([0, 6, 18])\n            scale([1, 0.5, 0.2])\n            sphere(4);\n    \n    // Leg armor\n    for(side = [-1, 1]) {\n        color(color_zacian_gold)\n            translate([side * 4, 3, 2])\n                cylinder(h=0.5, r=2.5);\n        \n        color(color_zacian_gold)\n            translate([side * 3, -7, 2])\n                cylinder(h=0.5, r=3);\n    }\n}\n\n// Assembly\nscale([0.7, 0.7, 0.7])\n    union() {\n        zacian_body();\n        zacian_head();\n        zacian_legs();\n        zacian_tail();\n        zacian_cape();\n        zacian_sword();\n        zacian_markings();\n    }",
    "renders": true
  },
  {
    "pokemon": "zamazenta",
    "openscad_code": "// Zamazenta - Realistic Style (Medium Complexity)\n// Overall dimensions ~80mm tall, 3D printable\n\n// Colors\ncolor_armor = [0.8, 0.8, 0.8];  // Metallic silver\ncolor_fur = [0.2, 0.2, 0.2];     // Dark blue-gray\ncolor_acc = [0.1, 0.1, 0.1];     // Black accents\ncolor_face = [0.95, 0.85, 0.75]; // Light tan for face\ncolor_eyes = [0.9, 0.1, 0.1];    // Red eyes\n\n// Basic parameters\n$fn = 32;\nscale_factor = 80/100;  // Scale to ~80mm height\n\nmodule zamazenta() {\n    union() {\n        // Main body\n        translate([0, 0, 30 * scale_factor])\n        scale([scale_factor, scale_factor, scale_factor])\n        union() {\n            // Torso armor\n            color(color_armor)\n            difference() {\n                cube([35, 25, 40], center=true);\n                translate([0, 0, 15])\n                cube([30, 20, 35], center=true);\n            }\n            \n            // Fur body\n            color(color_fur)\n            translate([0, 0, -8])\n            cube([28, 22, 30], center=true);\n            \n            // Head\n            translate([0, 0, 35])\n            union() {\n                // Main head shape\n                color(color_face)\n                sphere(18);\n                \n                // Armor crest\n                color(color_armor)\n                translate([0, 0, 15])\n                rotate([0, 0, 0])\n                cylinder(h=25, r1=12, r2=8);\n                \n                // Side armor plates\n                for (angle = [-30, 30]) {\n                    color(color_armor)\n                    rotate([0, 0, angle])\n                    translate([12, 0, 5])\n                    cube([8, 4, 15], center=true);\n                }\n                \n                // Eyes\n                color(color_eyes)\n                for (x = [-8, 8]) {\n                    translate([x, 12, 5])\n                    sphere(3);\n                }\n                \n                // Nose\n                color(color_face)\n                translate([0, 14, 0])\n                sphere(2);\n                \n                // Mouth\n                color(color_acc)\n                translate([0, 15, -3])\n                cube([6, 2, 1], center=true);\n                \n                // Ears\n                color(color_fur)\n                for (x = [-15, 15]) {\n                    translate([x, 5, 12])\n                    rotate([30, 0, x > 0 ? 20 : -20])\n                    cylinder(h=15, r1=5, r2=3);\n                }\n            }\n            \n            // Front legs with armor\n            for (x = [-12, 12]) {\n                // Upper leg\n                color(color_fur)\n                translate([x, 0, 0])\n                cylinder(h=25, r=6);\n                \n                // Armor gauntlet\n                color(color_armor)\n                translate([x, 0, -15])\n                difference() {\n                    cylinder(h=15, r=8);\n                    translate([0, 0, -1])\n                    cylinder(h=17, r=5);\n                }\n                \n                // Paw\n                color(color_face)\n                translate([x, 0, -25])\n                sphere(6);\n            }\n            \n            // Back legs\n            for (x = [-10, 10]) {\n                // Upper leg\n                color(color_fur)\n                translate([x, -15, -5])\n                rotate([30, 0, 0])\n                cylinder(h=20, r=6);\n                \n                // Lower leg\n                translate([x, -20, -20])\n                cylinder(h=15, r=5);\n                \n                // Paw\n                color(color_face)\n                translate([x, -20, -30])\n                sphere(6);\n            }\n            \n            // Tail\n            color(color_fur)\n            translate([0, -25, -5])\n            rotate([45, 0, 0])\n            cylinder(h=30, r1=8, r2=4);\n            \n            // Shield segments on back\n            for (angle = [0, 45, -45]) {\n                color(color_armor)\n                translate([0, -5, 15])\n                rotate([0, angle, 0])\n                translate([0, -8, 0])\n                cube([25, 3, 20], center=true);\n            }\n            \n            // Chest emblem\n            color(color_acc)\n            translate([0, 12, 15])\n            rotate([90, 0, 0])\n            cylinder(h=2, r=8);\n            translate([0, 12, 16])\n            color(color_armor)\n            sphere(5);\n        }\n    }\n}\n\n// Render the model\nzamazenta();",
    "renders": true
  },
  {
    "pokemon": "eternatus",
    "openscad_code": "// Eternatus OpenSCAD Model - Medium Complexity Realistic Style\n// 3D printable, ~80mm tall\n\n$fn = 32;\n\nmodule eternatus_body() {\n    color([0.2, 0.2, 0.2]) {\n        // Main torso\n        translate([0, 0, 20]) {\n            scale([1.2, 0.8, 2.5]) \n                sphere(10);\n        }\n        \n        // Neck section\n        translate([0, 0, 35]) {\n            scale([0.8, 0.6, 1.5]) \n                cylinder(h=15, r=8);\n        }\n        \n        // Head base\n        translate([0, 0, 50]) {\n            scale([1, 0.9, 1.2]) \n                sphere(8);\n        }\n    }\n}\n\nmodule eternatus_head_details() {\n    color([0.15, 0.15, 0.15]) {\n        // Snout\n        translate([0, 8, 50]) {\n            rotate([30, 0, 0])\n                scale([0.8, 0.6, 1.2]) \n                    cylinder(h=12, r=5);\n        }\n        \n        // Top crest\n        for(i = [0:2]) {\n            rotate([0, 0, i*120])\n                translate([0, 0, 58]) {\n                    rotate([20, 0, 0])\n                        scale([0.3, 0.1, 1]) \n                            cylinder(h=15, r=3);\n                }\n        }\n    }\n    \n    // Eyes (glowing red)\n    color([0.8, 0.1, 0.1]) {\n        translate([4, 6, 52]) {\n            scale([1, 0.5, 0.5]) \n                sphere(2);\n        }\n        translate([-4, 6, 52]) {\n            scale([1, 0.5, 0.5]) \n                sphere(2);\n        }\n    }\n}\n\nmodule eternatus_spines() {\n    color([0.3, 0.3, 0.3]) {\n        // Back spines\n        for(i = [0:15]) {\n            rotate([0, 0, i*24])\n                translate([12, 0, 30 - i*1.5]) {\n                    scale([0.3, 0.1, 1 + i*0.1]) \n                        rotate([30 + i*2, 0, 0])\n                            cylinder(h=5 + i*0.3, r=1);\n                }\n        }\n    }\n}\n\nmodule eternatus_arms() {\n    color([0.25, 0.25, 0.25]) {\n        // Left arm\n        translate([10, -5, 25]) {\n            rotate([0, 0, -30])\n                cylinder(h=15, r=3);\n            translate([12, -8, 15]) {\n                rotate([0, 0, -45])\n                    scale([0.8, 0.8, 1.2]) \n                        sphere(4);\n            }\n        }\n        \n        // Right arm\n        translate([-10, -5, 25]) {\n            rotate([0, 0, 30])\n                cylinder(h=15, r=3);\n            translate([-12, -8, 15]) {\n                rotate([0, 0, 45])\n                    scale([0.8, 0.8, 1.2]) \n                        sphere(4);\n            }\n        }\n    }\n}\n\nmodule eternatus_tendrils() {\n    color([0.4, 0.1, 0.4]) {\n        // Magenta energy tendrils\n        for(i = [0:5]) {\n            rotate([0, 0, i*60])\n                translate([15, 0, 15 - i*2]) {\n                    rotate([20 + i*5, 0, 0])\n                        scale([0.2, 0.2, 1]) \n                            cylinder(h=20 + i*3, r=1.5);\n                }\n        }\n    }\n}\n\nmodule eternatus_base() {\n    color([0.1, 0.1, 0.1]) {\n        // Energy core base\n        translate([0, 0, 5]) {\n            scale([1.5, 1.5, 0.5]) \n                cylinder(h=10, r=15);\n        }\n        \n        // Core details\n        color([0.6, 0.1, 0.6]) {\n            translate([0, 0, 10]) {\n                sphere(8);\n            }\n        }\n    }\n}\n\nmodule eternatus_full() {\n    union() {\n        eternatus_base();\n        eternatus_body();\n        eternatus_head_details();\n        eternatus_spines();\n        eternatus_arms();\n        eternatus_tendrils();\n    }\n}\n\n// Scale to 80mm height and center\nscale([0.8, 0.8, 0.8])\n    translate([0, 0, 0])\n        eternatus_full();",
    "renders": true
  },
  {
    "pokemon": "kubfu",
    "openscad_code": "// Kubfu OpenSCAD Model - Realistic Style, Medium Complexity\n// Scale: 80mm height\n\n// Colors\nColor_Head = \"LightBlue\";\nColor_Body = \"LightBlue\";\nColor_Markings = \"DarkGray\";\nColor_White = \"White\";\nColor_Black = \"Black\";\n\n// Main module\nmodule kubfu() {\n    union() {\n        // Head\n        translate([0, 0, 65]) rotate([0, 0, 0]) head();\n        \n        // Body\n        translate([0, 0, 35]) body();\n        \n        // Arms\n        translate([-12, 0, 50]) arm();\n        mirror([1, 0, 0]) translate([-12, 0, 50]) arm();\n        \n        // Legs\n        translate([-8, 0, 15]) leg();\n        mirror([1, 0, 0]) translate([-8, 0, 15]) leg();\n        \n        // Tail\n        translate([0, -12, 35]) tail();\n    }\n}\n\n// Head module\nmodule head() {\n    color(Color_Head) union() {\n        // Main head shape\n        scale([1, 1.2, 1.1]) sphere(12);\n        \n        // Snout\n        translate([0, 8, -3]) scale([0.8, 0.8, 0.7]) sphere(8);\n        \n        // Ears\n        translate([-8, 0, 8]) rotate([0, -20, 0]) ear();\n        mirror([1, 0, 0]) translate([-8, 0, 8]) rotate([0, -20, 0]) ear();\n        \n        // Head markings\n        color(Color_Markings) {\n            translate([0, 0, 12]) scale([1.2, 0.3, 0.5]) sphere(3);\n            translate([0, -2, 12]) scale([0.3, 1.2, 0.5]) sphere(3);\n        }\n        \n        // Eyes\n        color(Color_White) {\n            translate([-5, 6, 4]) sphere(2.5);\n            mirror([1, 0, 0]) translate([-5, 6, 4]) sphere(2.5);\n        }\n        \n        color(Color_Black) {\n            translate([-5, 6.5, 4.5]) sphere(1.5);\n            mirror([1, 0, 0]) translate([-5, 6.5, 4.5]) sphere(1.5);\n        }\n        \n        // Nose\n        color(Color_Black) translate([0, 10, -2]) sphere(1);\n    }\n}\n\n// Ear module\nmodule ear() {\n    color(Color_Head) union() {\n        // Main ear\n        rotate([0, 0, -30]) scale([1, 0.5, 2]) cylinder(6, 3, 5);\n        \n        // Inner ear\n        color(Color_White) translate([0, 0, 1]) scale([0.6, 0.6, 1.5]) cylinder(4, 1.5, 2);\n    }\n}\n\n// Body module\nmodule body() {\n    color(Color_Body) union() {\n        // Main torso\n        scale([1.2, 1, 1.5]) cylinder(20, 15, 12);\n        \n        // Chest marking\n        color(Color_Markings) translate([0, 8, 10]) scale([0.8, 0.8, 0.3]) cylinder(1, 8, 8);\n        \n        // Belt-like marking\n        color(Color_Markings) translate([0, 0, 5]) scale([1.3, 1.1, 0.3]) cylinder(3, 14, 14);\n    }\n}\n\n// Arm module\nmodule arm() {\n    color(Color_Body) union() {\n        // Upper arm\n        rotate([0, 0, -20]) translate([0, 0, -5]) cylinder(10, 5, 4);\n        \n        // Forearm\n        rotate([0, 0, 20]) translate([0, 5, -10]) cylinder(10, 4, 3);\n        \n        // Paw\n        translate([0, 10, -15]) sphere(4);\n        \n        // Paw markings\n        color(Color_Markings) {\n            for(i = [-1, 0, 1]) {\n                translate([i * 1.5, 12, -16]) sphere(1);\n            }\n        }\n    }\n}\n\n// Leg module\nmodule leg() {\n    color(Color_Body) union() {\n        // Thigh\n        cylinder(12, 6, 5);\n        \n        // Lower leg\n        translate([0, 0, -12]) cylinder(10, 5, 4);\n        \n        // Foot\n        translate([0, 2, -22]) scale([1.5, 2, 0.8]) sphere(5);\n        \n        // Foot markings\n        color(Color_Markings) {\n            for(i = [-1, 0, 1]) {\n                translate([i * 2, 4, -25]) sphere(1.2);\n            }\n        }\n    }\n}\n\n// Tail module\nmodule tail() {\n    color(Color_Body) union() {\n        // Tail base\n        rotate([0, 30, 0]) translate([0, 0, 0]) scale([0.8, 0.8, 1]) cylinder(15, 5, 3);\n        \n        // Tail tip\n        color(Color_Markings) translate([0, -10, -5]) scale([1.2, 1, 1]) sphere(4);\n    }\n}\n\n// Generate the model\nkubfu();",
    "renders": true
  },
  {
    "pokemon": "urshifu",
    "openscad_code": "// Urshifu Single Strike Style - Realistic Medium Complexity\n// Height: 60mm, 3D printable with 1mm wall thickness\n\n// Colors\nurshifu_blue = [0.1, 0.15, 0.3];\nurshifu_gray = [0.3, 0.3, 0.35];\nurshifu_red = [0.7, 0.1, 0.15];\nurshifu_white = [0.9, 0.9, 0.9];\nurshifu_black = [0.05, 0.05, 0.05];\n\n// Main body module\nmodule urshifu() {\n    // Base body\n    color(urshifu_blue)\n    difference() {\n        union() {\n            // Torso\n            translate([0, 0, 25])\n                scale([1, 0.8, 1.2])\n                sphere(d=20);\n            \n            // Chest armor\n            translate([0, -2, 35])\n                scale([1.2, 0.6, 0.8])\n                cube([18, 8, 12], center=true);\n            \n            // Legs\n            translate([-5, 0, 15])\n                rotate([0, 15, 0])\n                cylinder(h=15, d1=6, d2=4);\n            translate([5, 0, 15])\n                rotate([0, -15, 0])\n                cylinder(h=15, d1=6, d2=4);\n        }\n        \n        // Leg hollows\n        translate([-5, 0, 5])\n            cylinder(h=15, d=3);\n        translate([5, 0, 5])\n            cylinder(h=15, d=3);\n    }\n    \n    // Head\n    color(urshifu_blue)\n    translate([0, 0, 45])\n    difference() {\n        union() {\n            // Main head\n            scale([1, 0.9, 1.1])\n                sphere(d=18);\n            \n            // Snout\n            translate([0, -8, 0])\n                scale([0.8, 0.6, 0.6])\n                sphere(d=12);\n            \n            // Ears\n            translate([-6, 0, 6])\n                rotate([0, -10, -20])\n                cylinder(h=8, d1=4, d2=6);\n            translate([6, 0, 6])\n                rotate([0, -10, 20])\n                cylinder(h=8, d1=4, d2=6);\n        }\n        \n        // Eye sockets\n        translate([-4, -5, 2])\n            sphere(d=3);\n        translate([4, -5, 2])\n            sphere(d=3);\n    }\n    \n    // Eyes\n    color(urshifu_white)\n    translate([-4, -6, 2])\n        sphere(d=2);\n    translate([4, -6, 2])\n        sphere(d=2);\n    \n    // Pupils\n    color(urshifu_black)\n    translate([-4, -7, 2])\n        sphere(d=1);\n    translate([4, -7, 2])\n        sphere(d=1);\n    \n    // Arms\n    color(urshifu_blue)\n    translate([-12, 0, 35])\n        rotate([0, 0, -30])\n        cylinder(h=15, d1=5, d2=4);\n    translate([12, 0, 35])\n        rotate([0, 0, 30])\n        cylinder(h=15, d1=5, d2=4);\n    \n    // Fists\n    color(urshifu_gray)\n    translate([-20, 0, 35])\n        sphere(d=6);\n    translate([20, 0, 35])\n        sphere(d=6);\n    \n    // Belt/waist detail\n    color(urshifu_red)\n    translate([0, 0, 30])\n        scale([1.3, 0.3, 0.5])\n        cube([22, 3, 5], center=true);\n    \n    // Leg bands\n    color(urshifu_red)\n    for(x = [-6, 6]) {\n        translate([x, 0, 20])\n            rotate([0, 90, 0])\n            cylinder(h=8, d=3);\n    }\n    \n    // Chest pattern\n    color(urshifu_red)\n    translate([0, -8, 35])\n    difference() {\n        cube([8, 2, 10], center=true);\n        cube([6, 4, 11], center=true);\n    }\n    \n    // Tail\n    color(urshifu_blue)\n    translate([0, 8, 22])\n    rotate([30, 0, 0])\n    difference() {\n        cylinder(h=20, d1=8, d2=4);\n        translate([0, 0, -1])\n            cylinder(h=22, d=4);\n    }\n    \n    // Feet\n    color(urshifu_gray)\n    translate([-5, 0, 5])\n        scale([1.5, 2, 0.5])\n        cube([6, 4, 2], center=true);\n    translate([5, 0, 5])\n        scale([1.5, 2, 0.5])\n        cube([6, 4, 2], center=true);\n    \n    // Wrist bands\n    color(urshifu_red)\n    translate([-20, 0, 35])\n        rotate([0, 90, 0])\n        cylinder(h=8, d=4);\n    translate([20, 0, 35])\n        rotate([0, 90, 0])\n        cylinder(h=8, d=4);\n}\n\n// Create the model\nurshifu();",
    "renders": true
  },
  {
    "pokemon": "calyrex",
    "openscad_code": "// Calyrex Pokemon - Realistic Style\n// Medium complexity OpenSCAD model\n\n// Colors\n$fa = 2;\n$fs = 0.5;\n\n// Main body module\nmodule calyrex_body() {\n    color([0.7, 0.2, 0.3]) {\n        // Torso - pumpkin-like shape\n        translate([0, 0, 20]) {\n            scale([1.2, 1, 1.2]) \n                sphere(15);\n        }\n        \n        // Lower body extension\n        translate([0, 0, 10]) {\n            scale([1, 0.8, 1.5]) \n                cylinder(h=15, r1=12, r2=10);\n        }\n    }\n}\n\n// Head with crown\nmodule calyrex_head() {\n    color([0.7, 0.2, 0.3]) {\n        // Main head\n        translate([0, 0, 45]) {\n            sphere(12);\n        }\n        \n        // Crown base\n        color([0.2, 0.1, 0.4]) {\n            translate([0, 0, 55]) {\n                cylinder(h=5, r1=15, r2=12);\n            }\n        }\n        \n        // Crown points\n        color([0.3, 0.15, 0.5]) {\n            for(i = [0:120:359]) {\n                rotate([0, 0, i]) {\n                    translate([12, 0, 58]) {\n                        rotate([110, 0, 0]) {\n                            cylinder(h=8, r1=2, r2=0.5);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Eyes\n    color([1, 1, 1]) {\n        translate([-4, 8, 47]) {\n            scale([1, 1.5, 0.5])\n                sphere(3);\n        }\n        translate([4, 8, 47]) {\n            scale([1, 1.5, 0.5])\n                sphere(3);\n        }\n    }\n    \n    // Eye pupils\n    color([0, 0, 0]) {\n        translate([-4, 9, 48]) {\n            sphere(1);\n        }\n        translate([4, 9, 48]) {\n            sphere(1);\n        }\n    }\n    \n    // Mouth\n    color([0.3, 0.1, 0.1]) {\n        translate([0, 5, 42]) {\n            scale([3, 0.5, 1])\n                cube([2, 2, 1], center=true);\n        }\n    }\n}\n\n// Large collar leaves\nmodule calyrex_leaves() {\n    color([0.3, 0.6, 0.2]) {\n        for(i = [0:45:359]) {\n            rotate([0, 0, i]) {\n                translate([0, 0, 35]) {\n                    rotate([45, 0, 0]) {\n                        scale([1, 2, 0.5]) {\n                            cylinder(h=20, r1=8, r2=0);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Arms\nmodule calyrex_arms() {\n    color([0.7, 0.2, 0.3]) {\n        // Left arm\n        translate([-15, 0, 30]) {\n            rotate([0, 0, 30]) {\n                cylinder(h=15, r=3);\n            }\n        }\n        \n        // Right arm\n        translate([15, 0, 30]) {\n            rotate([0, 0, -30]) {\n                cylinder(h=15, r=3);\n            }\n        }\n    }\n}\n\n// Legs\nmodule calyrex_legs() {\n    color([0.7, 0.2, 0.3]) {\n        // Left leg\n        translate([-6, -5, 5]) {\n            cylinder(h=15, r=4);\n        }\n        \n        // Right leg\n        translate([6, -5, 5]) {\n            cylinder(h=15, r=4);\n        }\n        \n        // Feet\n        translate([-6, -8, 2]) {\n            scale([1.5, 2, 0.5])\n                sphere(4);\n        }\n        translate([6, -8, 2]) {\n            scale([1.5, 2, 0.5])\n                sphere(4);\n        }\n    }\n}\n\n// Hair-like extensions\nmodule calyrex_hair() {\n    color([0.8, 0.3, 0.4]) {\n        // Back hair\n        translate([0, -12, 50]) {\n            rotate([30, 0, 0]) {\n                scale([0.8, 0.3, 2])\n                    sphere(6);\n            }\n        }\n        \n        // Side hair\n        translate([-8, -10, 48]) {\n            rotate([0, 20, 0]) {\n                scale([0.5, 0.3, 1.5])\n                    sphere(5);\n            }\n        }\n        translate([8, -10, 48]) {\n            rotate([0, -20, 0]) {\n                scale([0.5, 0.3, 1.5])\n                    sphere(5);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    calyrex_body();\n    calyrex_head();\n    calyrex_leaves();\n    calyrex_arms();\n    calyrex_legs();\n    calyrex_hair();\n}",
    "renders": true
  },
  {
    "pokemon": "regieleki",
    "openscad_code": "// Regieleki - Electric Type Legendary Pokemon\n// Medium complexity realistic style\n// Total height: 80mm\n\n$fn = 32;\nmodule regieleki() {\n    // Main body - electric yellow core\n    color(\"gold\") \n    translate([0, 0, 10]) \n    scale([1, 0.8, 1.2]) \n    sphere(20);\n    \n    // Head with electric pattern\n    color(\"gold\") {\n        // Main head sphere\n        translate([0, 0, 45]) \n        sphere(15);\n        \n        // Electric crest on head\n        for(i = [-1, 1]) {\n            translate([i * 8, 0, 55]) \n            rotate([0, i * 15, 0]) \n            scale([0.3, 0.3, 1.5]) \n            cylinder(10, 5, 0);\n        }\n    }\n    \n    // Electric arms - six floating segments\n    module electric_arm(x, y, z, rot) {\n        color(\"yellow\") {\n            translate([x, y, z]) \n            rotate([0, 0, rot]) {\n                // Base connector\n                cylinder(5, 3, 3);\n                \n                // Floating segment 1\n                translate([0, 0, 6]) \n                rotate([0, 45, 0]) \n                cube([15, 5, 3], center = true);\n                \n                // Floating segment 2\n                translate([0, 0, 12]) \n                rotate([0, -30, 0]) \n                cube([12, 4, 3], center = true);\n                \n                // Floating segment 3\n                translate([0, 0, 18]) \n                rotate([0, 20, 0]) \n                cube([10, 3, 3], center = true);\n            }\n        }\n    }\n    \n    // Position 6 electric arms around body\n    for(i = [0:5]) {\n        angle = i * 60;\n        x = cos(angle) * 25;\n        y = sin(angle) * 25;\n        electric_arm(x, y, 25, angle);\n    }\n    \n    // Legs - three-pronged electric base\n    color(\"gold\") \n    for(i = [0:2]) {\n        rotate([0, 0, i * 120]) {\n            translate([0, 15, 0]) \n            scale([0.8, 1.2, 0.5]) \n            sphere(8);\n            \n            translate([0, 22, -5]) \n            rotate([15, 0, 0]) \n            cylinder(15, 6, 4);\n        }\n    }\n    \n    // Eye details - electric blue\n    color(\"dodgerblue\") {\n        // Left eye\n        translate([-8, 12, 45]) \n        scale([1.2, 0.8, 0.3]) \n        sphere(4);\n        \n        // Right eye\n        translate([8, 12, 45]) \n        scale([1.2, 0.8, 0.3]) \n        sphere(4);\n        \n        // Eye highlights\n        color(\"white\") {\n            translate([-7, 13, 47]) \n            sphere(1);\n            translate([9, 13, 47]) \n            sphere(1);\n        }\n    }\n    \n    // Electric pattern markings\n    color(\"yellow\") {\n        // Chest pattern\n        translate([0, 0, 35]) \n        rotate([90, 0, 0]) \n        linear_extrude(1) \n        polygon(points = [[-8, -8], [8, -8], [0, 8]]);\n        \n        // Back pattern\n        translate([0, -18, 35]) \n        rotate([90, 0, 0]) \n        linear_extrude(1) \n        circle(10);\n    }\n    \n    // Floating ring segments around waist\n    color(\"gold\") \n    for(z = [20, 25, 30]) {\n        rotate_extrude() \n        translate([22, 0, z]) \n        circle(2);\n    }\n    \n    // Base support for 3D printing\n    color(\"gray\") \n    translate([0, 0, -2]) \n    cylinder(2, 30, 30);\n}\n\n// Create the model\nregieleki();",
    "renders": true
  },
  {
    "pokemon": "regidrago",
    "openscad_code": "// Regidrago - Realistic Style (Medium Complexity)\n// Overall dimensions: ~60mm tall x ~50mm wide x ~45mm deep\n\n$fn = 50;\n\nmodule regidrago() {\n    color([0.15, 0.35, 0.25]) {  // Dark emerald green\n    \n    // Central crystal body\n    union() {\n        // Main torso - elongated crystal\n        rotate([0, 15, 0])\n            scale([1, 0.8, 1.5])\n                cube([35, 30, 40], center=true);\n        \n        // Upper crystal point\n        translate([0, 0, 25])\n            rotate([0, 15, 0])\n                cylinder(h=15, r1=15, r2=5, center=true);\n        \n        // Lower crystal base\n        translate([0, 0, -25])\n            rotate([0, 15, 0])\n                cylinder(h=15, r1=15, r2=20, center=true);\n    }\n    \n    // Dragon head module\n    color([0.1, 0.3, 0.2]) {\n        translate([0, 25, 15])\n            rotate([-30, 0, 0])\n                dragon_head();\n    }\n    \n    // Left arm crystal\n    color([0.2, 0.4, 0.3]) {\n        translate([-20, -5, 5])\n            rotate([0, -30, -15])\n                scale([0.7, 0.7, 1.2])\n                    crystal_arm();\n    }\n    \n    // Right arm crystal\n    color([0.2, 0.4, 0.3]) {\n        translate([20, -5, 5])\n            rotate([0, -30, 15])\n                scale([0.7, 0.7, 1.2])\n                    crystal_arm();\n    }\n    \n    // Leg crystals (x2)\n    color([0.1, 0.25, 0.15]) {\n        for(side = [-1, 1]) {\n            translate([side * 12, -15, -20])\n                rotate([30, 0, side * 10])\n                    scale([0.8, 0.8, 1])\n                        crystal_leg();\n        }\n    }\n    \n    // Yellow dot patterns on body\n    color([0.9, 0.8, 0.1]) {\n        // Front dots\n        for(i = [0:2]) {\n            translate([0, 15, 10 - i * 10])\n                sphere(2.5);\n        }\n        // Side dots\n        translate([-17, 0, 5])\n            sphere(2.5);\n        translate([17, 0, 5])\n            sphere(2.5);\n    }\n    }\n}\n\nmodule dragon_head() {\n    // Main head shape\n    hull() {\n        // Snout\n        translate([0, 20, 0])\n            sphere(8);\n        // Head base\n        translate([0, 5, 0])\n            sphere(12);\n    }\n    \n    // Jaw\n    color([0.05, 0.2, 0.1]) {\n        translate([0, 15, -8])\n            rotate([20, 0, 0])\n                scale([0.8, 0.6, 0.4])\n                    cube([16, 12, 8], center=true);\n    }\n    \n    // Eyes\n    color([0.9, 0.8, 0.1]) {\n        // Left eye\n        translate([-8, 10, 3])\n            scale([1, 1.5, 1])\n                sphere(3);\n        // Right eye\n        translate([8, 10, 3])\n            scale([1, 1.5, 1])\n                sphere(3);\n    }\n    \n    // Crystal horns\n    color([0.1, 0.3, 0.2]) {\n        // Left horn\n        translate([-5, 0, 12])\n            rotate([0, -20, -30])\n                cylinder(h=15, r=3, r2=1);\n        // Right horn\n        translate([5, 0, 12])\n            rotate([0, -20, 30])\n                cylinder(h=15, r=3, r2=1);\n    }\n}\n\nmodule crystal_arm() {\n    // Upper arm\n    cylinder(h=20, r=6, center=true);\n    // Forearm\n    translate([0, 0, -15])\n        cylinder(h=15, r=5, r2=4, center=true);\n    // Hand crystal\n    translate([0, 0, -30])\n        scale([1, 1.2, 1])\n            sphere(5);\n}\n\nmodule crystal_leg() {\n    // Thigh\n    cylinder(h=15, r=7, center=true);\n    // Lower leg\n    translate([0, 0, -12])\n        cylinder(h=12, r=6, r2=5, center=true);\n    // Foot\n    translate([0, 0, -24])\n        scale([1.2, 1.5, 0.8])\n            sphere(6);\n}\n\n// Assembly\nregidrago();",
    "renders": true
  },
  {
    "pokemon": "glastrier",
    "openscad_code": "// Glastrier OpenSCAD Model - Realistic Style, Medium Complexity\n// Based on Pokemon design with 3D printing considerations\n\n// Colors\ncolor_body = [0.9, 0.95, 1];\ncolor_ice = [0.7, 0.85, 0.95];\ncolor_eyes = [1, 0.1, 0.1];\ncolor_markings = [0.4, 0.5, 0.6];\n\n// Main body module\nmodule glastrier() {\n    // Body\n    color(color_body)\n    translate([0, 0, 8])\n    scale([1.2, 0.8, 1])\n    sphere(r=15, $fn=32);\n    \n    // Neck\n    color(color_body)\n    translate([0, 15, 25])\n    rotate([-30, 0, 0])\n    cylinder(h=20, r1=10, r2=8, $fn=16);\n    \n    // Head\n    color(color_body)\n    translate([0, 25, 32])\n    scale([1.3, 1.2, 1.4])\n    sphere(r=12, $fn=32);\n    \n    // Muzzle\n    color(color_body)\n    translate([0, 35, 28])\n    scale([0.8, 1.5, 0.8])\n    sphere(r=8, $fn=32);\n    \n    // Ice mask\n    color(color_ice)\n    translate([0, 30, 32])\n    scale([1.4, 1.8, 1.2])\n    sphere(r=10, $fn=32);\n    \n    // Eyes\n    color(color_eyes)\n    for(x=[-5, 5]) {\n        translate([x, 32, 35])\n        rotate([0, 90, 0])\n        cylinder(h=3, r=2, $fn=8);\n    }\n    \n    // Ice horns\n    color(color_ice)\n    for(x=[-12, 12]) {\n        translate([x, 20, 45])\n        rotate([0, 0, x > 0 ? 15 : -15])\n        cylinder(h=18, r1=4, r2=1, $fn=8);\n    }\n    \n    // Central horn\n    color(color_ice)\n    translate([0, 15, 48])\n    cylinder(h=25, r1=5, r2=2, $fn=8);\n    \n    // Legs\n    for(x=[-15, 15]) {\n        // Front legs\n        color(color_body)\n        translate([x, 5, 0])\n        rotate([0, 0, x > 0 ? 10 : -10])\n        cylinder(h=20, r=5, $fn=16);\n        \n        // Back legs\n        color(color_body)\n        translate([x*0.8, -20, 0])\n        rotate([0, 0, x > 0 ? -5 : 5])\n        cylinder(h=22, r=6, $fn=16);\n    }\n    \n    // Hooves\n    color(color_markings)\n    for(x=[-15, 15]) {\n        translate([x, 5, -2])\n        cylinder(h=3, r=6, $fn=16);\n        \n        translate([x*0.8, -20, -2])\n        cylinder(h=3, r=7, $fn=16);\n    }\n    \n    // Tail\n    color(color_body)\n    translate([0, -30, 18])\n    rotate([45, 0, 0])\n    cylinder(h=25, r1=8, r2=4, $fn=16);\n    \n    // Tail ice crystals\n    color(color_ice)\n    for(i=[0:2]) {\n        rotate([0, 0, i*120])\n        translate([0, -35, 22])\n        rotate([60, 0, 0])\n        cylinder(h=15, r1=3, r2=0.5, $fn=6);\n    }\n    \n    // Body ice armor plates\n    color(color_ice)\n    for(a=[45, 135, 225, 315]) {\n        rotate([0, 0, a])\n        translate([0, 0, 15])\n        rotate([90, 0, 0])\n        cylinder(h=8, r1=12, r2=8, $fn=6);\n    }\n    \n    // Ice markings on legs\n    color(color_ice)\n    for(x=[-15, 15]) {\n        translate([x, 0, 10])\n        scale([1.2, 0.8, 0.3])\n        sphere(r=4, $fn=8);\n        \n        translate([x*0.8, -15, 10])\n        scale([1.4, 1, 0.3])\n        sphere(r=5, $fn=8);\n    }\n}\n\n// Create the model scaled to 80mm\nscale(0.8)\nglastrier();",
    "renders": true
  },
  {
    "pokemon": "spectrier",
    "openscad_code": "// Spectrier - Realistic Style, Medium Complexity\n// 3D printable model using basic OpenSCAD primitives\n\n// Colors\n$fn = 32;\nbody_color = [0.1, 0.1, 0.1]; // Black\nmane_color = [0.2, 0.2, 0.3];  // Dark purple\neye_color = [0.9, 0.1, 0.1];   // Red\naccent_color = [0.3, 0.2, 0.4]; // Purple accents\n\n// Main body\nmodule body() {\n    color(body_color)\n    union() {\n        // Torso\n        translate([0, 0, 15])\n        scale([1.2, 0.8, 1.5])\n        sphere(10);\n        \n        // Chest extension\n        translate([0, 8, 10])\n        scale([0.8, 1.2, 0.8])\n        sphere(8);\n        \n        // Neck base\n        translate([0, -5, 25])\n        cylinder(h=8, r1=5, r2=4);\n    }\n}\n\n// Head\nmodule head() {\n    color(body_color)\n    union() {\n        // Main head shape\n        translate([0, -15, 30])\n        scale([1.1, 1.4, 1.2])\n        sphere(8);\n        \n        // Snout\n        translate([0, -22, 28])\n        scale([0.6, 0.8, 0.4])\n        sphere(6);\n        \n        // Eyes\n        color(eye_color)\n        translate([-4, -18, 31])\n        sphere(2);\n        translate([4, -18, 31])\n        sphere(2);\n        \n        // Eye ridges\n        color(body_color)\n        translate([-4, -17, 33])\n        cube([2, 1, 0.5], center=true);\n        translate([4, -17, 33])\n        cube([2, 1, 0.5], center=true);\n    }\n}\n\n// Flowing mane\nmodule mane() {\n    color(mane_color)\n    union() {\n        // Main mane pieces\n        for(i = [0:15]) {\n            rotate([0, 0, i * 22.5])\n            translate([0, -5, 28])\n            rotate([90 + sin(i) * 10, 0, 0])\n            scale([0.3, 0.3, 1.5])\n            cylinder(h=12, r1=3, r2=1);\n        }\n        \n        // Back mane\n        for(i = [0:8]) {\n            rotate([0, 0, -135 + i * 22.5])\n            translate([0, 0, 25])\n            rotate([60, 0, 0])\n            scale([0.4, 0.4, 1.2])\n            cylinder(h=15, r1=2.5, r2=0.5);\n        }\n    }\n}\n\n// Legs\nmodule legs() {\n    color(body_color)\n    union() {\n        // Front legs\n        translate([-8, 5, 10])\n        cylinder(h=15, r=3);\n        translate([8, 5, 10])\n        cylinder(h=15, r=3);\n        \n        // Back legs\n        translate([-7, -8, 8])\n        cylinder(h=17, r=3.5);\n        translate([7, -8, 8])\n        cylinder(h=17, r=3.5);\n        \n        // Hooves\n        translate([-8, 5, 0])\n        cylinder(h=3, r1=3, r2=4);\n        translate([8, 5, 0])\n        cylinder(h=3, r1=3, r2=4);\n        translate([-7, -8, 0])\n        cylinder(h=3, r1=3.5, r2=4.5);\n        translate([7, -8, 0])\n        cylinder(h=3, r1=3.5, r2=4.5);\n    }\n}\n\n// Tail\nmodule tail() {\n    color(body_color)\n    union() {\n        // Tail base\n        translate([0, -12, 15])\n        scale([1, 1.5, 1])\n        sphere(6);\n        \n        // Tail extension\n        color(mane_color)\n        translate([0, -20, 18])\n        rotate([30, 0, 0])\n        scale([0.5, 0.5, 2])\n        cylinder(h=20, r1=4, r2=2);\n        \n        // Tail tip\n        translate([0, -25, 8])\n        sphere(3);\n    }\n}\n\n// Leg joints\nmodule joints() {\n    color(body_color)\n    union() {\n        // Front knees\n        translate([-8, 5, 18])\n        sphere(3.5);\n        translate([8, 5, 18])\n        sphere(3.5);\n        \n        // Back knees\n        translate([-7, -8, 16])\n        sphere(4);\n        translate([7, -8, 16])\n        sphere(4);\n    }\n}\n\n// Assembly\nspectrier_scale = 2;\nscale(spectrier_scale)\nunion() {\n    body();\n    head();\n    mane();\n    legs();\n    tail();\n    joints();\n}",
    "renders": true
  },
  {
    "pokemon": "bulbasaur",
    "openscad_code": "// Bulbasaur OpenSCAD Model - Realistic Style, Medium Complexity\n// Overall dimensions: ~60mm tall x 50mm wide x 60mm deep\n\n// Color definitions\nbulba_green = [0.4, 0.7, 0.4];\nbulba_dark_green = [0.2, 0.5, 0.3];\nbulba_blue = [0.2, 0.4, 0.8];\n\n// Main body module\nmodule body() {\n    color(bulba_green) union() {\n        // Torso - main bulbous body\n        translate([0, 0, 10]) scale([1, 0.8, 1.2]) sphere(d=40);\n        \n        // Belly bulge\n        translate([0, -15, 5]) scale([0.8, 0.3, 1]) sphere(d=35);\n        \n        // Back hump\n        translate([0, 10, 15]) scale([1, 0.6, 0.8]) sphere(d=30);\n    }\n}\n\n// Head module\nmodule head() {\n    color(bulba_green) union() {\n        // Main head sphere\n        translate([0, 30, 35]) scale([1, 1.2, 0.9]) sphere(d=30);\n        \n        // Snout\n        translate([0, 42, 32]) scale([0.8, 0.4, 0.6]) sphere(d=20);\n        \n        // Ears\n        for(side = [-1, 1]) {\n            translate([side * 12, 25, 45]) rotate([side * -20, 0, 0]) \n                scale([0.3, 0.5, 1]) sphere(d=15);\n        }\n    }\n}\n\n// Eyes module\nmodule eyes() {\n    for(side = [-1, 1]) {\n        // Eye whites\n        color([1, 1, 1])\n            translate([side * 8, 38, 38]) sphere(d=8);\n        \n        // Pupils\n        color([0, 0, 0])\n            translate([side * 9, 38, 40]) sphere(d=4);\n    }\n}\n\n// Legs module\nmodule legs() {\n    for(side = [-1, 1]) {\n        // Front legs\n        color(bulba_green)\n            translate([side * 15, 10, 5]) rotate([0, -10, 0])\n                cylinder(h=20, d1=12, d2=8);\n        \n        // Back legs\n        translate([side * 12, -10, 5]) rotate([0, -10, 0])\n            cylinder(h=18, d1=10, d2=8);\n        \n        // Feet\n        for(pos = [10, -10]) {\n            translate([side * 15, pos, 0]) \n                scale([1.5, 1, 0.5]) sphere(d=10);\n        }\n    }\n}\n\n// Bulb on back module\nmodule bulb() {\n    color(bulba_dark_green) union() {\n        // Main bulb\n        translate([0, 0, 50]) rotate([0, 0, 0])\n            sphere(d=35);\n        \n        // Bulb base\n        translate([0, 0, 45])\n            cylinder(h=10, d1=30, d2=35);\n        \n        // Leaves\n        for(angle = [0:120:359]) {\n            rotate([0, 0, angle]) \n                translate([0, 15, 55]) rotate([45, 0, 0])\n                    scale([0.3, 1, 2]) sphere(d=20);\n        }\n    }\n}\n\n// Spots pattern module\nmodule spots() {\n    color(bulba_dark_green) {\n        // Back spots\n        for(pos = [[0, 5, 25], [5, 0, 20], [-5, 5, 22], [0, -5, 18]]) {\n            translate(pos) sphere(d=5);\n        }\n        \n        // Side spots\n        for(pos = [[15, 20, 15], [-15, 20, 15]]) {\n            translate(pos) sphere(d=4);\n        }\n    }\n}\n\n// Nose module\nmodule nose() {\n    color(bulba_green)\n        translate([0, 45, 30]) sphere(d=3);\n}\n\n// Mouth module\nmodule mouth() {\n    color([0.8, 0.4, 0.4])\n        translate([0, 42, 28]) \n            scale([1, 0.3, 0.2]) sphere(d=5);\n}\n\n// Tail module\nmodule tail() {\n    color(bulba_green)\n        hull() {\n            translate([0, -25, 15]) sphere(d=8);\n            translate([0, -35, 10]) sphere(d=6);\n            translate([0, -45, 15]) sphere(d=4);\n        }\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    eyes();\n    nose();\n    mouth();\n    legs();\n    bulb();\n    spots();\n    tail();\n}",
    "renders": true
  },
  {
    "pokemon": "ivysaur",
    "openscad_code": "// Ivysaur OpenSCAD Model - Medium Complexity\n// Realistic style with 3D printing considerations\n\n$fn = 32;\n\nmodule body() {\n    color([0.2, 0.6, 0.3])\n    union() {\n        // Main body\n        translate([0, 0, 12])\n        scale([1.2, 0.8, 1])\n        sphere(15);\n        \n        // Belly\n        color([0.7, 0.8, 0.6])\n        translate([0, -11, 8])\n        scale([0.8, 0.3, 0.6])\n        sphere(12);\n    }\n}\n\nmodule head() {\n    color([0.2, 0.6, 0.3])\n    union() {\n        // Main head\n        translate([0, 20, 22])\n        scale([0.9, 1.1, 0.9])\n        sphere(12);\n        \n        // Snout\n        translate([0, 30, 20])\n        scale([0.6, 0.4, 0.5])\n        sphere(8);\n        \n        // Eyes\n        color([0.9, 0.9, 0.9])\n        translate([-6, 24, 26])\n        sphere(3);\n        translate([6, 24, 26])\n        sphere(3);\n        \n        color([0.1, 0.1, 0.8])\n        translate([-6, 25, 26.5])\n        sphere(1.5);\n        translate([6, 25, 26.5])\n        sphere(1.5);\n        \n        // Nostrils\n        color([0, 0, 0])\n        translate([-2, 32, 20])\n        sphere(1);\n        translate([2, 32, 20])\n        sphere(1);\n        \n        // Mouth line\n        color([0.3, 0.2, 0.2])\n        translate([0, 28, 18])\n        rotate([90, 0, 0])\n        cylinder(h=0.5, r=3);\n    }\n}\n\nmodule ears() {\n    color([0.2, 0.6, 0.3])\n    union() {\n        // Left ear\n        translate([-10, 18, 30])\n        rotate([0, 10, -20])\n        scale([0.4, 0.4, 1])\n        cylinder(h=12, r=4);\n        \n        // Right ear\n        translate([10, 18, 30])\n        rotate([0, 10, 20])\n        scale([0.4, 0.4, 1])\n        cylinder(h=12, r=4);\n        \n        // Ear insides\n        color([0.8, 0.4, 0.4])\n        translate([-10, 18.5, 30])\n        rotate([0, 10, -20])\n        scale([0.2, 0.2, 0.8])\n        cylinder(h=10, r=3);\n        \n        translate([10, 18.5, 30])\n        rotate([0, 10, 20])\n        scale([0.2, 0.2, 0.8])\n        cylinder(h=10, r=3);\n    }\n}\n\nmodule legs() {\n    color([0.2, 0.6, 0.3])\n    union() {\n        // Front legs\n        translate([-8, 5, 0])\n        rotate([0, 10, 0])\n        cylinder(h=15, r=4);\n        \n        translate([8, 5, 0])\n        rotate([0, 10, 0])\n        cylinder(h=15, r=4);\n        \n        // Back legs\n        translate([-10, -10, 0])\n        rotate([0, -10, 0])\n        cylinder(h=15, r=5);\n        \n        translate([10, -10, 0])\n        rotate([0, -10, 0])\n        cylinder(h=15, r=5);\n        \n        // Feet\n        translate([-8, 5, -7])\n        scale([1.2, 1.5, 0.5])\n        sphere(4);\n        \n        translate([8, 5, -7])\n        scale([1.2, 1.5, 0.5])\n        sphere(4);\n        \n        translate([-10, -10, -7])\n        scale([1.3, 1.6, 0.5])\n        sphere(5);\n        \n        translate([10, -10, -7])\n        scale([1.3, 1.6, 0.5])\n        sphere(5);\n    }\n}\n\nmodule tail() {\n    color([0.2, 0.6, 0.3])\n    union() {\n        // Tail base\n        translate([0, -18, 8])\n        rotate([0, 20, 0])\n        scale([0.8, 2, 0.8])\n        sphere(8);\n        \n        // Tail tip\n        translate([0, -28, 4])\n        rotate([0, 30, 0])\n        scale([0.6, 1.5, 0.6])\n        sphere(5);\n    }\n}\n\nmodule bulb() {\n    color([0.8, 0.6, 0.2])\n    union() {\n        // Main bulb\n        translate([0, -5, 28])\n        scale([1.3, 1.3, 1])\n        sphere(10);\n        \n        // Bulb spots\n        color([0.9, 0.7, 0.3])\n        for(i = [0:5]) {\n            rotate([0, 0, i * 60])\n            translate([7, -5, 30])\n            sphere(2);\n        }\n        \n        // Bulb top\n        color([0.1, 0.8, 0.1])\n        translate([0, -5, 37])\n        scale([0.3, 0.3, 0.5])\n        cylinder(h=5, r=8);\n    }\n}\n\nmodule spots() {\n    color([0.15, 0.4, 0.2])\n    union() {\n        // Body spots\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90])\n            translate([8, 0, 15])\n            scale([1, 0.7, 0.5])\n            sphere(2);\n        }\n        \n        // Head spots\n        translate([0, 25, 24])\n        scale([0.8, 0.6, 0.4])\n        sphere(1.5);\n        \n        translate([-5, 22, 24])\n        scale([0.8, 0.6, 0.4])\n        sphere(1.5);\n        \n        translate([5, 22, 24])\n        scale([0.8, 0.6, 0.4])\n        sphere(1.5);\n    }\n}\n\n// Main assembly\nscale(0.7)\nunion() {\n    body();\n    head();\n    ears();\n    legs();\n    tail();\n    bulb();\n    spots();\n}",
    "renders": true
  },
  {
    "pokemon": "charmander",
    "openscad_code": "// Charmander - Realistic Style, Medium Complexity\n// Size: ~70mm height\n\n// Colors\norange = [1, 0.5, 0];\nyellow = [1, 0.8, 0];\nred = [0.9, 0.2, 0];\nblack = [0.1, 0.1, 0.1];\nwhite = [1, 1, 1];\n\n// Main body\nmodule body() {\n    color(orange)\n    union() {\n        // Torso\n        translate([0, -5, 20])\n            scale([1, 0.8, 1.2])\n                sphere(d=30);\n                \n        // Belly pattern\n        color(yellow)\n        translate([0, 11, 15])\n            scale([1, 0.5, 1.5])\n                sphere(d=20);\n                \n        // Chest\n        translate([0, 0, 10])\n            sphere(d=25);\n    }\n}\n\n// Head\nmodule head() {\n    color(orange)\n    union() {\n        // Main head\n        translate([0, 0, 45])\n            scale([1.2, 1, 1.1])\n                sphere(d=28);\n                \n        // Snout\n        translate([0, 12, 42])\n            scale([0.8, 0.6, 0.6])\n                sphere(d=20);\n                \n        // Nostrils\n        color(black)\n        for(x = [-3, 3])\n            translate([x, 17, 40])\n                sphere(d=1.5);\n                \n        // Eyes\n        color(white)\n        for(x = [-7, 7])\n            translate([x, 5, 50])\n                scale([1, 1.2, 0.5])\n                    sphere(d=8);\n                    \n        color(black)\n        for(x = [-7, 7])\n            translate([x - 1, 5, 52])\n                sphere(d=4);\n                \n        // Mouth line\n        color(black)\n        translate([0, 10, 38])\n            rotate([90, 0, 0])\n                cylinder(h=0.5, r=6, $fn=20);\n    }\n}\n\n// Tail with flame\nmodule tail() {\n    color(orange)\n    union() {\n        // Tail base\n        translate([0, -20, 25])\n            rotate([0, 90, 0])\n                cylinder(h=25, r1=8, r2=4);\n                \n        // Tail tip\n        translate([0, -28, 22])\n            rotate([0, 90, 0])\n                cylinder(h=10, r1=4, r2=6);\n                \n        // Flame\n        color(red)\n        translate([0, -35, 22])\n            union() {\n                sphere(d=8);\n                translate([0, -5, 2])\n                    sphere(d=6);\n                translate([0, -3, -2])\n                    sphere(d=5);\n                translate([3, -2, 0])\n                    sphere(d=4);\n                translate([-3, -2, 0])\n                    sphere(d=4);\n            }\n    }\n}\n\n// Arms\nmodule arms() {\n    color(orange)\n    for(side = [-1, 1]) {\n        translate([side * 15, 0, 30])\n            rotate([0, 0, side * 45])\n                union() {\n                    // Upper arm\n                    cylinder(h=12, r=4);\n                    \n                    // Lower arm\n                    translate([0, 0, 12])\n                        rotate([side * 20, 0, 0])\n                            cylinder(h=10, r=3.5);\n                            \n                    // Hand\n                    translate([0, 0, 22])\n                        sphere(d=7);\n                        \n                    // Fingers\n                    for(i = [0, 1, 2]) {\n                        rotate([0, 0, i * 30 - 30])\n                            translate([0, 5, 0])\n                                cylinder(h=4, r=1.5);\n                    }\n                }\n    }\n}\n\n// Legs\nmodule legs() {\n    color(orange)\n    for(side = [-1, 1]) {\n        translate([side * 8, -5, 5])\n            union() {\n                // Thigh\n                cylinder(h=15, r=6);\n                \n                // Lower leg\n                translate([0, 0, 15])\n                    rotate([0, 0, side * -10])\n                        cylinder(h=12, r=5);\n                        \n                // Foot\n                translate([0, 5, 26])\n                    rotate([90, 0, 0])\n                        scale([1.5, 1, 0.8])\n                            cylinder(h=8, r1=4, r2=2);\n            }\n    }\n}\n\n// Back spikes\nmodule spikes() {\n    color(red)\n    for(i = [0, 1, 2]) {\n        translate([0, -10 - i * 8, 35 - i * 5])\n            rotate([90, 0, 0])\n                cylinder(h=8 - i * 2, r1=1.5, r2=0.5);\n    }\n}\n\n// Assembly\n$fn = 32;\nbody();\nhead();\ntail();\narms();\nlegs();\nspikes();",
    "renders": true
  },
  {
    "pokemon": "charmeleon",
    "openscad_code": "// Charmeleon OpenSCAD Model - Realistic Style, Medium Complexity\n\n// Basic parameters\nscale_factor = 1/2;  // Scale to ~75mm height\nbody_height = 80 * scale_factor;\nbody_width = 35 * scale_factor;\nbody_depth = 45 * scale_factor;\n\n// Colors\ncolor_body = [0.8, 0.3, 0.1];      // Orange-red\ncolor_belly = [0.9, 0.8, 0.6];     // Light tan\ncolor_flame = [1, 0.7, 0];         // Yellow-orange\n\n// Head module\nmodule head() {\n    color(color_body)\n    union() {\n        // Main head shape\n        translate([0, 0, body_height * 0.7])\n        scale([1.2, 1, 1.1])\n        sphere(body_height * 0.2);\n        \n        // Snout\n        translate([body_width * 0.5, 0, body_height * 0.65])\n        rotate([0, -20, 0])\n        scale([1.5, 0.8, 0.8])\n        cylinder(h=body_height * 0.15, r=body_height * 0.12);\n        \n        // Horns\n        translate([body_width * 0.4, body_width * 0.3, body_height * 0.9])\n        rotate([0, 0, 30])\n        cylinder(h=body_height * 0.15, r1=body_width * 0.05, r2=0);\n        \n        translate([body_width * 0.4, -body_width * 0.3, body_height * 0.9])\n        rotate([0, 0, -30])\n        cylinder(h=body_height * 0.15, r1=body_width * 0.05, r2=0);\n    }\n}\n\n// Eyes module\nmodule eyes() {\n    // Left eye\n    translate([body_width * 0.7, body_width * 0.2, body_height * 0.75])\n    color([0.2, 0.2, 0.8])\n    sphere(body_height * 0.05);\n    \n    // Right eye\n    translate([body_width * 0.7, -body_width * 0.2, body_height * 0.75])\n    color([0.2, 0.2, 0.8])\n    sphere(body_height * 0.05);\n    \n    // Eye highlights\n    translate([body_width * 0.75, body_width * 0.22, body_height * 0.77])\n    color([1, 1, 1])\n    sphere(body_height * 0.015);\n    \n    translate([body_width * 0.75, -body_width * 0.22, body_height * 0.77])\n    color([1, 1, 1])\n    sphere(body_height * 0.015);\n}\n\n// Body module\nmodule body() {\n    color(color_body)\n    union() {\n        // Main torso\n        translate([0, 0, body_height * 0.35])\n        scale([1.3, 1, 1.2])\n        sphere(body_height * 0.25);\n        \n        // Belly\n        color(color_belly)\n        translate([0, 0, body_height * 0.3])\n        scale([1.1, 0.8, 0.8])\n        sphere(body_height * 0.2);\n    }\n}\n\n// Tail module\nmodule tail() {\n    color(color_body)\n    union() {\n        // Tail base\n        translate([-body_width * 0.6, 0, body_height * 0.3])\n        rotate([0, 0, 45])\n        scale([3, 0.6, 0.6])\n        cylinder(h=body_height * 0.4, r=body_width * 0.1);\n        \n        // Flame tip\n        translate([-body_width * 1.5, 0, body_height * 0.5])\n        color(color_flame)\n        scale([0.8, 0.8, 1.5])\n        sphere(body_width * 0.15);\n    }\n}\n\n// Legs module\nmodule legs() {\n    color(color_body)\n    union() {\n        // Front left leg\n        translate([body_width * 0.3, body_width * 0.25, body_height * 0.1])\n        rotate([0, 10, 0])\n        cylinder(h=body_height * 0.3, r1=body_width * 0.08, r2=body_width * 0.06);\n        \n        // Front right leg\n        translate([body_width * 0.3, -body_width * 0.25, body_height * 0.1])\n        rotate([0, 10, 0])\n        cylinder(h=body_height * 0.3, r1=body_width * 0.08, r2=body_width * 0.06);\n        \n        // Back left leg\n        translate([-body_width * 0.2, body_width * 0.25, 0])\n        rotate([0, -10, 0])\n        cylinder(h=body_height * 0.35, r1=body_width * 0.1, r2=body_width * 0.08);\n        \n        // Back right leg\n        translate([-body_width * 0.2, -body_width * 0.25, 0])\n        rotate([0, -10, 0])\n        cylinder(h=body_height * 0.35, r1=body_width * 0.1, r2=body_width * 0.08);\n    }\n}\n\n// Arms module\nmodule arms() {\n    color(color_body)\n    union() {\n        // Left arm\n        translate([body_width * 0.2, body_width * 0.4, body_height * 0.5])\n        rotate([0, 0, -30])\n        cylinder(h=body_height * 0.2, r1=body_width * 0.06, r2=body_width * 0.05);\n        \n        // Left hand/claw\n        translate([body_width * 0.35, body_width * 0.5, body_height * 0.45])\n        sphere(body_width * 0.08);\n        \n        // Right arm\n        translate([body_width * 0.2, -body_width * 0.4, body_height * 0.5])\n        rotate([0, 0, 30])\n        cylinder(h=body_height * 0.2, r1=body_width * 0.06, r2=body_width * 0.05);\n        \n        // Right hand/claw\n        translate([body_width * 0.35, -body_width * 0.5, body_height * 0.45])\n        sphere(body_width * 0.08);\n    }\n}\n\n// Back ridge\nmodule back_ridge() {\n    color(color_body)\n    for(i = [0:2]) {\n        translate([-body_width * 0.1, 0, body_height * (0.4 + i * 0.1)])\n        scale([1, 0.3, 0.3])\n        sphere(body_width * 0.05);\n    }\n}\n\n// Assemble the complete Charmeleon\nunion() {\n    body();\n    head();\n    eyes();\n    tail();\n    legs();\n    arms();\n    back_ridge();\n}",
    "renders": true
  },
  {
    "pokemon": "squirtle",
    "openscad_code": "// Squirtle - OpenSCAD model with realistic styling\n// Realistic medium-complexity Squirtle for 3D printing\n\n// Colors\nshell_color = [0.2, 0.6, 0.8];\nbelly_color = [0.9, 0.9, 0.8];\neye_color = [0.9, 0.9, 0.9];\npupil_color = [0.1, 0.1, 0.1];\ntail_color = [0.6, 0.8, 0.9];\n\n// Overall scale\nmodule squirtle() {\n    scale([1, 1, 1.2]) {\n        // Main body shell\n        color(shell_color) difference() {\n            sphere(d=45, $fn=32);\n            translate([0, 0, -25]) cube([50, 50, 50], center=true);\n            translate([0, 0, 20]) cube([40, 40, 20], center=true);\n        }\n        \n        // Belly\n        color(belly_color) translate([0, -22.5, 5]) {\n            scale([1, 0.7, 0.9]) sphere(d=43, $fn=32);\n        }\n        \n        // Head\n        color(shell_color) translate([0, 0, 35]) {\n            sphere(d=35, $fn=32);\n        }\n        \n        // Snout\n        color(shell_color) translate([0, 15, 30]) {\n            rotate([30, 0, 0]) scale([1, 1.2, 0.8]) sphere(d=20, $fn=32);\n        }\n        \n        // Eyes\n        for (x = [-8, 8]) {\n            color(eye_color) translate([x, 18, 40]) {\n                sphere(d=8, $fn=16);\n            }\n            color(pupil_color) translate([x + 2, 18, 43]) {\n                sphere(d=4, $fn=16);\n            }\n        }\n        \n        // Mouth\n        color([0.2, 0.1, 0.1]) translate([0, 25, 32]) {\n            rotate([90, 0, 0]) cylinder(h=3, r1=5, r2=0, $fn=16);\n        }\n        \n        // Arms\n        module arm(side) {\n            translate([side * 20, 0, 15]) {\n                rotate([0, 0, side * 15]) {\n                    color(shell_color) {\n                        sphere(d=10, $fn=16);\n                        translate([0, 0, -7]) cylinder(h=15, r=4, $fn=16);\n                    }\n                }\n            }\n        }\n        arm(1);\n        arm(-1);\n        \n        // Legs\n        module leg(side) {\n            translate([side * 15, 0, -15]) {\n                color(shell_color) {\n                    sphere(d=12, $fn=16);\n                    translate([0, 0, -8]) cylinder(h=12, r=5, $fn=16);\n                }\n            }\n        }\n        leg(1);\n        leg(-1);\n        \n        // Tail\n        color(tail_color) translate([0, -20, -10]) {\n            rotate([0, 0, -20]) {\n                union() {\n                    cylinder(h=25, r1=8, r2=6, $fn=16);\n                    translate([0, 0, 25]) {\n                        rotate([0, 0, 30]) {\n                            scale([1.5, 1, 0.3]) sphere(d=20, $fn=16);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Shell pattern lines\n        module shell_line(angle) {\n            color([0.1, 0.3, 0.4]) rotate([0, 0, angle]) {\n                translate([0, 0, 22]) {\n                    for (r = [15:4:35]) {\n                        rotate_extrude(angle=30, $fn=32) {\n                            translate([r, 0, 0]) square([0.5, 2]);\n                        }\n                    }\n                }\n            }\n        }\n        \n        shell_line(0);\n        shell_line(120);\n        shell_line(240);\n        \n        // Tail curl pattern\n        color([0.4, 0.5, 0.7]) translate([0, -30, 5]) {\n            rotate([90, 0, 0]) {\n                for (a = [0:45:315]) {\n                    rotate([0, 0, a]) {\n                        translate([12, 0, 0]) sphere(d=2, $fn=8);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Generate the Squirtle\nsquirtle();",
    "renders": true
  },
  {
    "pokemon": "wartortle",
    "openscad_code": "// Wartortle - Realistic Style, Medium Complexity\n// Overall dimensions approximately 60mm tall\n\n// Main body color\nbody_color = \"#5A8EA8\";\nshell_color = \"#955A36\";\nbelly_color = \"#C8D8E8\";\naccent_color = \"#FFFFFF\";\n\n// Head module\nmodule head() {\n    color(body_color)\n    union() {\n        // Main head sphere\n        sphere(d=22, $fn=32);\n        \n        // Snout\n        translate([0, 11, 0])\n            scale([1.2, 1.5, 1])\n            sphere(d=12, $fn=24);\n            \n        // Ears\n        translate([-8, 0, 15])\n            rotate([0, -20, 0])\n            scale([1, 1, 2])\n            cylinder(h=12, d1=8, d2=4, $fn=8);\n            \n        translate([8, 0, 15])\n            rotate([0, 20, 0])\n            scale([1, 1, 2])\n            cylinder(h=12, d1=8, d2=4, $fn=8);\n            \n        // Tail base\n        translate([0, -12, 0])\n            rotate([0, 90, 0])\n            cylinder(h=8, d=6, $fn=16);\n    }\n}\n\n// Eyes module\nmodule eyes() {\n    translate([-6, 12, 4])\n        color([0, 0, 0])\n        sphere(d=4, $fn=16);\n    translate([6, 12, 4])\n        color([0, 0, 0])\n        sphere(d=4, $fn=16);\n        \n    // Eyebrow ridges\n    translate([-6, 10, 8])\n        color(body_color)\n        rotate([30, 0, 0])\n        cube([5, 2, 1], center=true);\n    translate([6, 10, 8])\n        color(body_color)\n        rotate([30, 0, 0])\n        cube([5, 2, 1], center=true);\n}\n\n// Shell module\nmodule shell() {\n    color(shell_color)\n    difference() {\n        // Main shell\n        translate([0, -8, -12])\n            scale([1.3, 1, 1])\n            sphere(d=25, $fn=32);\n            \n        // Shell cavity\n        translate([0, -5, -10])\n            scale([1.1, 0.8, 0.8])\n            sphere(d=22, $fn=32);\n    }\n    \n    // Shell pattern lines\n    color([0.3, 0.2, 0.1])\n    for(i = [-2:2]) {\n        translate([i*4, -8, -5])\n            rotate([90, 0, 0])\n            cylinder(h=0.5, d=1, $fn=8);\n    }\n}\n\n// Arms module\nmodule arms() {\n    // Left arm\n    translate([-12, 0, -5])\n        rotate([0, 0, 45])\n        color(body_color)\n        union() {\n            cylinder(h=10, d=6, $fn=16);\n            translate([0, 0, -8])\n                sphere(d=8, $fn=16);\n        }\n        \n    // Right arm\n    translate([12, 0, -5])\n        rotate([0, 0, -45])\n        color(body_color)\n        union() {\n            cylinder(h=10, d=6, $fn=16);\n            translate([0, 0, -8])\n                sphere(d=8, $fn=16);\n        }\n}\n\n// Legs module\nmodule legs() {\n    // Left leg\n    translate([-8, 0, -20])\n        rotate([0, 15, 0])\n        color(body_color)\n        union() {\n            cylinder(h=12, d=8, $fn=16);\n            translate([0, 0, -10])\n                sphere(d=10, $fn=16);\n        }\n        \n    // Right leg\n    translate([8, 0, -20])\n        rotate([0, -15, 0])\n        color(body_color)\n        union() {\n            cylinder(h=12, d=8, $fn=16);\n            translate([0, 0, -10])\n                sphere(d=10, $fn=16);\n        }\n}\n\n// Tail module\nmodule tail() {\n    color(body_color)\n    union() {\n        // Tail segments\n        translate([0, -20, 0])\n            rotate([0, 90, 0])\n            union() {\n                cylinder(h=8, d=6, $fn=16);\n                \n                // First segment\n                translate([0, 0, 8])\n                    scale([0.8, 0.8, 1])\n                    cylinder(h=6, d=6, $fn=16);\n                    \n                // Second segment\n                translate([0, 0, 14])\n                    scale([0.6, 0.6, 1])\n                    cylinder(h=8, d=6, $fn=16);\n                    \n                // Tail tip\n                translate([0, 0, 22])\n                    color(accent_color)\n                    sphere(d=6, $fn=16);\n            }\n    }\n}\n\n// Belly marking\nmodule belly() {\n    translate([0, 0, -15])\n        color(belly_color)\n        scale([1.5, 1.2, 0.5])\n        sphere(d=15, $fn=32);\n}\n\n// Main assembly\nunion() {\n    // Position the model upright\n    rotate([90, 0, 0])\n    translate([0, 0, 25])\n    \n    union() {\n        // Core body parts\n        head();\n        eyes();\n        shell();\n        belly();\n        \n        // Limbs\n        arms();\n        legs();\n        \n        // Tail\n        tail();\n    }\n}",
    "renders": true
  },
  {
    "pokemon": "caterpie",
    "openscad_code": "// Caterpie Pokemon - Realistic Style\n// Size: ~70mm length, 3D printable\n\n// Color constants\n$fn=50;\n\nmodule caterpie_body() {\n    // Main body segments - caterpillar-like\n    color(\"limegreen\") {\n        // Head segment\n        translate([0, 0, 5]) {\n            difference() {\n                sphere(d=15);\n                // Mouth indent\n                translate([7.5, 0, -2]) rotate([0, 90, 0]) \n                    cylinder(h=10, d1=5, d2=8, $fn=6);\n            }\n        }\n        \n        // Body segments\n        for(i=[1:5]) {\n            translate([-i*12, 0, 5]) {\n                sphere(d=15 - i*1.5);\n            }\n        }\n        \n        // Tail segment\n        translate([-72, 0, 5]) {\n            sphere(d=8);\n        }\n    }\n}\n\nmodule antenna() {\n    // Yellow antenna with red tip\n    color(\"yellow\") {\n        translate([7, 4, 15]) rotate([0, -30, 0]) \n            cylinder(h=12, d1=2, d2=1);\n        translate([7, -4, 15]) rotate([0, 30, 0]) \n            cylinder(h=12, d1=2, d2=1);\n    }\n    color(\"red\") {\n        translate([15.5, 4, 11]) sphere(d=2);\n        translate([15.5, -4, 11]) sphere(d=2);\n    }\n}\n\nmodule eyes() {\n    // Large oval eyes with pupils\n    color(\"white\") {\n        translate([7, 5, 8]) scale([1.2, 1, 1]) sphere(d=6);\n        translate([7, -5, 8]) scale([1.2, 1, 1]) sphere(d=6);\n    }\n    color(\"black\") {\n        translate([8.5, 5, 8]) sphere(d=3);\n        translate([8.5, -5, 8]) sphere(d=3);\n    }\n}\n\nmodule yellow_rings() {\n    // Characteristic yellow rings on body\n    color(\"gold\") {\n        for(i=[0:4]) {\n            translate([-i*12, 0, 8]) rotate([90, 0, 0]) \n                cylinder(h=2, d=16 - i*1.5, $fn=20);\n        }\n    }\n}\n\nmodule feet() {\n    // Short stubby feet\n    color(\"limegreen\") {\n        for(i=[0:3]) {\n            // Left feet\n            translate([-i*15 - 5, 8, 0]) \n                cylinder(h=5, d1=4, d2=3);\n            // Right feet  \n            translate([-i*15 - 5, -8, 0]) \n                cylinder(h=5, d1=4, d2=3);\n        }\n    }\n}\n\nmodule spots() {\n    // Red spots on back\n    color(\"red\") {\n        for(i=[0:4]) {\n            translate([-i*12 - 6, 0, 13]) sphere(d=2.5);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    caterpie_body();\n    antenna();\n    eyes();\n    yellow_rings();\n    feet();\n    spots();\n}",
    "renders": true
  },
  {
    "pokemon": "metapod",
    "openscad_code": "// Realistic Metapod OpenSCAD Model\n// Medium complexity, 3D-printable\n\n// Overall dimensions\noverall_length = 80;\noverall_height = 35;\nshell_thickness = 2;\n\n// Main shell\nmodule metapod_shell() {\n    color([0.6, 0.75, 0.5]) {\n        // Central pod body\n        difference() {\n            // Outer shell\n            translate([0,0,overall_height/2])\n                scale([1, 0.7, 0.5])\n                    sphere(d=overall_height*1.8, $fn=64);\n            \n            // Hollow interior\n            translate([0,0,overall_height/2])\n                scale([1, 0.7, 0.5])\n                    sphere(d=overall_height*1.8 - shell_thickness*2, $fn=64);\n        }\n        \n        // Front taper\n        translate([overall_length/2 - 5, 0, overall_height/2])\n            scale([1.2, 0.8, 0.4])\n                sphere(d=overall_height*1.5, $fn=48);\n                \n        // Back taper\n        translate([-overall_length/2 + 5, 0, overall_height/2])\n            scale([1.2, 0.8, 0.4])\n                sphere(d=overall_height*1.5, $fn=48);\n    }\n}\n\n// Segmented shell pattern\nmodule shell_segments() {\n    color([0.5, 0.65, 0.4]) {\n        for(i = [-3:3]) {\n            // Vertical segments\n            rotate([0, 0, i*20])\n                translate([0, 0, overall_height/2])\n                    scale([1, 0.7, 0.5])\n                        difference() {\n                            cylinder(h=overall_height+10, r=overall_height*0.9, $fn=3);\n                            translate([0,0,-1])\n                                cylinder(h=overall_height+12, r=overall_height*0.9-1, $fn=3);\n                        }\n        }\n        \n        // Horizontal ridges\n        for(h = [10:15:overall_height-5]) {\n            translate([0, 0, h])\n                scale([1, 0.7, 0.2])\n                    sphere(d=overall_height*1.8, $fn=64);\n        }\n    }\n}\n\n// Eyes\nmodule eyes() {\n    color([0.1, 0.1, 0.1]) {\n        // Left eye slit\n        translate([overall_length/3, -overall_height/3, overall_height/2 + 2])\n            rotate([0, 25, 0])\n                scale([1, 0.3, 0.1])\n                    cube([8, 3, 2], center=true);\n                    \n        // Right eye slit\n        translate([overall_length/3, overall_height/3, overall_height/2 + 2])\n            rotate([0, 25, 0])\n                scale([1, 0.3, 0.1])\n                    cube([8, 3, 2], center=true);\n    }\n}\n\n// Nose ridge\nmodule nose_ridge() {\n    color([0.55, 0.7, 0.45]) {\n        translate([overall_length/2.5, 0, overall_height/2])\n            rotate([0, -10, 0])\n                scale([0.3, 0.15, 0.3])\n                    cylinder(h=overall_height*0.8, r=overall_height/4, $fn=16);\n    }\n}\n\n// Shell marking patterns\nmodule shell_markings() {\n    color([0.4, 0.5, 0.3]) {\n        // Triangular markings\n        for(i = [0:3]) {\n            rotate([0, 0, i*90])\n                translate([overall_height/2.5, 0, overall_height/2 + 5])\n                    scale([1, 0.5, 0.1])\n                        cylinder(h=1, r1=8, r2=0, $fn=3);\n        }\n        \n        // Dot patterns\n        for(x = [-1:1]) {\n            for(y = [-1:1]) {\n                translate([x*15, y*10, overall_height/2 + 8])\n                    sphere(d=2, $fn=12);\n            }\n        }\n    }\n}\n\n// Underside support\nmodule support_base() {\n    color([0.6, 0.75, 0.5]) {\n        translate([0, 0, 2])\n            scale([1, 0.8, 0.3])\n                sphere(d=overall_height*1.6, $fn=64);\n    }\n}\n\n// Assembly\nmetapod_shell();\nshell_segments();\neyes();\nnose_ridge();\nshell_markings();\nsupport_base();",
    "renders": true
  },
  {
    "pokemon": "butterfree",
    "openscad_code": "// Realistic Butterfree Pokemon - Medium Complexity\n// 3D printable model using basic primitives\n\n$fn = 32;\nscale_factor = 0.5;\n\n// Main colors\ncolor_body = [0.8, 0.6, 0.9];  // Light purple\ncolor_wings = [0.9, 0.8, 1];   // Light purple-white\ncolor_accents = [0.5, 0.2, 0.8];  // Dark purple\ncolor_eyes = [0.1, 0.1, 0.1];  // Black\ncolor_detail = [0.4, 0.8, 0.3];  // Green accents\n\nmodule butterfree() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        union() {\n            // Body\n            translate([0, 0, 20]) {\n                color(color_body) {\n                    sphere(8);\n                    cylinder(h=15, r1=6, r2=4, center=true);\n                }\n                \n                // Abdomen\n                translate([0, 0, -20]) {\n                    color(color_body) {\n                        sphere(10);\n                        cylinder(h=20, r1=8, r2=12, center=true);\n                    }\n                }\n            }\n            \n            // Head\n            translate([0, 0, 35]) {\n                color(color_body) {\n                    sphere(6);\n                    \n                    // Antennae\n                    for(i = [-1, 1]) {\n                        translate([i * 4, 0, 3]) {\n                            rotate([0, -20, 0]) {\n                                cylinder(h=12, r1=1.5, r2=0.5);\n                                translate([0, 0, 12]) {\n                                    sphere(2);\n                                }\n                            }\n                        }\n                    }\n                }\n                \n                // Eyes\n                for(i = [-1, 1]) {\n                    translate([i * 3, 3, 1]) {\n                        color(color_eyes) {\n                            sphere(2.5);\n                        }\n                        translate([0, 0, 0.5]) {\n                            color([1, 1, 1]) {\n                                sphere(1);\n                            }\n                        }\n                    }\n                }\n                \n                // Mouth\n                translate([0, 4, -1]) {\n                    color(color_eyes) {\n                        rotate([90, 0, 0]) {\n                            cylinder(h=0.5, r1=1, r2=0.5);\n                        }\n                    }\n                }\n            }\n            \n            // Wings\n            for(side = [-1, 1]) {\n                translate([side * 12, 0, 25]) {\n                    rotate([0, 0, side * 20]) {\n                        color(color_wings) {\n                            // Upper wing\n                            translate([0, 0, 0]) {\n                                scale([1, 1.5, 0.5]) {\n                                    sphere(15);\n                                }\n                            }\n                            \n                            // Lower wing\n                            translate([0, -15, -3]) {\n                                scale([0.7, 1, 0.5]) {\n                                    sphere(12);\n                                }\n                            }\n                            \n                            // Wing veins\n                            color(color_accents) {\n                                for(angle = [0:45:135]) {\n                                    rotate([0, 0, angle]) {\n                                        translate([5, 0, 0.5]) {\n                                            cylinder(h=8, r=0.5);\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            \n            // Arms/Legs\n            for(side = [-1, 1]) {\n                // Arms\n                translate([side * 8, 0, 15]) {\n                    rotate([0, 0, side * -30]) {\n                        color(color_body) {\n                            cylinder(h=8, r1=2, r2=1.5);\n                            translate([8, 0, 0]) {\n                                sphere(3);\n                            }\n                        }\n                    }\n                }\n                \n                // Legs\n                translate([side * 6, 0, 0]) {\n                    rotate([0, side * 20, 0]) {\n                        color(color_body) {\n                            cylinder(h=10, r1=2, r2=1.5);\n                            translate([0, 0, -10]) {\n                                sphere(2.5);\n                            }\n                        }\n                    }\n                }\n            }\n            \n            // Tail\n            translate([0, -12, 5]) {\n                color(color_body) {\n                    rotate([45, 0, 0]) {\n                        cylinder(h=15, r1=3, r2=2);\n                        translate([0, 0, 15]) {\n                            sphere(4);\n                        }\n                    }\n                }\n            }\n            \n            // Spots on wings\n            for(side = [-1, 1]) {\n                translate([side * 12, -8, 26]) {\n                    rotate([0, 0, side * 20]) {\n                        color(color_detail) {\n                            for(pos = [[5, 5], [-5, 5], [0, -5]]) {\n                                translate(pos) {\n                                    sphere(2);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nbutterfree();",
    "renders": true
  },
  {
    "pokemon": "weedle",
    "openscad_code": "// Weedle - OpenSCAD realistic style model\n// Body segments with proper 3D-printable structure\n\n// Colors for realistic appearance\nbody_color = \"#A0522D\";     // Brown-orange body\nstripe_color = \"#FFD700\";   // Yellow stripes\neye_color = \"#000000\";      // Black eyes\nstinger_color = \"#8B0000\";  // Dark red stingers\n\n// Main module\nmodule weedle() {\n    // Body segments\n    union() {\n        // Head segment (largest)\n        translate([0, 0, 25]) {\n            color(body_color) {\n                sphere(d = 22, $fn = 32);\n            }\n        }\n        \n        // Thorax segment\n        translate([0, 0, 15]) {\n            color(body_color) {\n                sphere(d = 18, $fn = 32);\n            }\n        }\n        \n        // Abdomen segments\n        for(i = [0:3]) {\n            translate([0, 0, 8 - i*8]) {\n                color(body_color) {\n                    sphere(d = 16 - i*2, $fn = 32);\n                }\n            }\n        }\n        \n        // Connectors between segments\n        for(i = [0:3]) {\n            translate([0, 0, 20 - i*8]) {\n                color(body_color) {\n                    cylinder(h = 8, d = 10, $fn = 16);\n                }\n            }\n        }\n        \n        // Yellow stripes on each segment\n        for(i = [0:4]) {\n            translate([0, 0, 24 - i*8]) {\n                color(stripe_color) {\n                    rotate([90, 0, 0]) {\n                        cylinder(h = 2, d1 = 18 - i*2, d2 = 18 - i*2, $fn = 32);\n                    }\n                }\n            }\n        }\n        \n        // Head features\n        // Nose horn\n        translate([0, 0, 35]) {\n            color(stinger_color) {\n                rotate([0, 0, 0]) {\n                    cylinder(h = 12, d1 = 4, d2 = 0, $fn = 8);\n                }\n            }\n        }\n        \n        // Eyes\n        for(side = [-1, 1]) {\n            translate([side*6, 8, 27]) {\n                color(eye_color) {\n                    sphere(d = 4, $fn = 16);\n                }\n            }\n        }\n        \n        // Large needle on head\n        translate([0, -8, 30]) {\n            color(stinger_color) {\n                rotate([45, 0, 0]) {\n                    cylinder(h = 15, d1 = 6, d2 = 2, $fn = 8);\n                }\n            }\n        }\n        \n        // Tail stinger\n        translate([0, 0, -18]) {\n            color(stinger_color) {\n                rotate([180, 0, 0]) {\n                    cylinder(h = 10, d1 = 6, d2 = 0, $fn = 8);\n                }\n            }\n        }\n        \n        // Leg segments\n        for(side = [-1, 1]) {\n            // Front legs\n            translate([side*10, 0, 20]) {\n                rotate([0, side*30, 0]) {\n                    color(body_color) {\n                        cylinder(h = 8, d = 3, $fn = 8);\n                        translate([0, 0, -4]) {\n                            sphere(d = 4, $fn = 8);\n                        }\n                    }\n                }\n            }\n            \n            // Middle legs\n            translate([side*10, 0, 12]) {\n                rotate([0, side*45, 0]) {\n                    color(body_color) {\n                        cylinder(h = 7, d = 3, $fn = 8);\n                        translate([0, 0, -3.5]) {\n                            sphere(d = 4, $fn = 8);\n                        }\n                    }\n                }\n            }\n            \n            // Rear legs\n            translate([side*8, 0, 4]) {\n                rotate([0, side*60, 0]) {\n                    color(body_color) {\n                        cylinder(h = 6, d = 3, $fn = 8);\n                        translate([0, 0, -3]) {\n                            sphere(d = 4, $fn = 8);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Render the model\nweedle();",
    "renders": true
  },
  {
    "pokemon": "kakuna",
    "openscad_code": "// Kakuna Pokemon - Realistic Style - Medium Complexity\n// 3D printable model with appropriate wall thickness\n// Size: ~80mm height, ~40mm width\n\n// Color definitions\ncolor_body = [0.85, 0.75, 0.15];    // Yellowish tan\ncolor_shell = [0.55, 0.45, 0.25];   // Darker brown\ncolor_details = [0.3, 0.2, 0.1];    // Dark brown/black\n\n// Main parameters\nbody_height = 80;\nbody_width = 40;\nshell_thickness = 2;\n\nmodule kakuna_body() {\n    color(color_body)\n    difference() {\n        // Main body - elongated capsule shape\n        hull() {\n            translate([0, 0, body_height * 0.9])\n                sphere(d = body_width * 0.8);\n            translate([0, 0, body_height * 0.1])\n                sphere(d = body_width * 0.9);\n        }\n        \n        // Hollow out for 3D printing\n        translate([0, 0, body_height * 0.5])\n            scale([0.7, 0.7, 0.9])\n            hull() {\n                translate([0, 0, body_height * 0.4])\n                    sphere(d = body_width * 0.7);\n                translate([0, 0, body_height * 0.1])\n                    sphere(d = body_width * 0.8);\n            }\n    }\n}\n\nmodule shell_segments() {\n    color(color_shell)\n    union() {\n        // Top shell segments\n        for(i = [0:2]) {\n            translate([0, 0, body_height * 0.85 - i * 15])\n                difference() {\n                    // Shell layer\n                    cylinder(h = shell_thickness * 2, d1 = body_width * 0.85, d2 = body_width * 0.75);\n                    // Hollow center\n                    cylinder(h = shell_thickness * 2.1, d1 = body_width * 0.65, d2 = body_width * 0.55);\n                }\n        }\n        \n        // Middle band\n        translate([0, 0, body_height * 0.5])\n            difference() {\n                cylinder(h = shell_thickness * 3, d = body_width * 0.95);\n                cylinder(h = shell_thickness * 3.1, d = body_width * 0.75);\n            }\n        \n        // Bottom shell segments\n        for(i = [0:1]) {\n            translate([0, 0, body_height * 0.3 + i * 12])\n                difference() {\n                    cylinder(h = shell_thickness * 2, d1 = body_width * 0.8, d2 = body_width * 0.9);\n                    cylinder(h = shell_thickness * 2.1, d1 = body_width * 0.6, d2 = body_width * 0.7);\n                }\n        }\n    }\n}\n\nmodule eyes() {\n    color(color_details)\n    union() {\n        // Left eye\n        translate([-body_width * 0.2, body_width * 0.35, body_height * 0.7])\n            rotate([0, 10, 0])\n            difference() {\n                scale([1, 1.2, 0.5])\n                    sphere(d = 6);\n                // Eye slit\n                translate([0, 0, -1])\n                    cube([8, 2, 2], center = true);\n            }\n        \n        // Right eye\n        translate([body_width * 0.2, body_width * 0.35, body_height * 0.7])\n            rotate([0, -10, 0])\n            difference() {\n                scale([1, 1.2, 0.5])\n                    sphere(d = 6);\n                translate([0, 0, -1])\n                    cube([8, 2, 2], center = true);\n            }\n    }\n}\n\nmodule cocoon_texture() {\n    color(color_shell)\n    union() {\n        // Diagonal ridge pattern\n        for(angle = [0:30:150]) {\n            rotate([0, 0, angle])\n            translate([0, 0, body_height * 0.1])\n            for(z = [0:5:body_height * 0.8]) {\n                hull() {\n                    translate([body_width * 0.35, 0, z])\n                        sphere(d = 2);\n                    translate([body_width * 0.4, 0, z + 2])\n                        sphere(d = 2);\n                }\n            }\n        }\n    }\n}\n\nmodule attachment_point() {\n    color(color_details)\n    // Top loop for hanging\n    translate([0, 0, body_height * 0.95])\n        difference() {\n            rotate_extrude()\n                translate([body_width * 0.15, 0, 0])\n                    circle(r = 3);\n            // Hollow for string\n            rotate_extrude()\n                translate([body_width * 0.15, 0, 0])\n                    circle(r = 1.5);\n        }\n}\n\n// Main assembly\nunion() {\n    kakuna_body();\n    shell_segments();\n    eyes();\n    cocoon_texture();\n    attachment_point();\n}",
    "renders": true
  },
  {
    "pokemon": "beedrill",
    "openscad_code": "// Beedrill - Realistic Style, Medium Complexity\n\n// Colors\ncolor_body = [0.2, 0.2, 0.2];\ncolor_stripe = [0.8, 0.8, 0.1];\ncolor_wing = [0.7, 0.7, 0.7];\ncolor_eye = [1, 0, 0];\ncolor_stinger = [0.9, 0.9, 0.0];\n\n// Main module\nmodule beedrill() {\n    // Body\n    color(color_body) {\n        // Head\n        translate([0, 0, 40]) {\n            sphere(d=15);\n            \n            // Eyes\n            color(color_eye) {\n                translate([-5, 7, 5]) sphere(d=3);\n                translate([5, 7, 5]) sphere(d=3);\n            }\n            \n            // Mandibles\n            translate([-8, 5, -2]) rotate([0, 30, -20]) cylinder(h=8, d1=4, d2=2);\n            translate([8, 5, -2]) rotate([0, 30, 20]) cylinder(h=8, d1=4, d2=2);\n        }\n        \n        // Thorax\n        translate([0, 0, 25]) {\n            sphere(d=20);\n            \n            // Yellow stripes\n            color(color_stripe) {\n                for(i = [0:2]) {\n                    rotate([0, 0, i*120]) \n                    translate([10, 0, 0]) \n                    cube([20, 5, 8], center=true);\n                }\n            }\n        }\n        \n        // Abdomen\n        translate([0, 0, 10]) {\n            cylinder(h=15, d1=15, d2=10);\n            \n            // Tail stinger\n            color(color_stinger) {\n                translate([0, 0, -10]) \n                cylinder(h=12, d1=10, d2=2);\n            }\n        }\n    }\n    \n    // Wings\n    color(color_wing) {\n        // Left wings\n        translate([-15, 15, 35]) {\n            rotate([0, 0, -30]) \n            wing();\n        }\n        translate([-20, 10, 25]) {\n            rotate([0, 0, -45]) \n            scale([0.8, 0.8, 0.8]) \n            wing();\n        }\n        \n        // Right wings\n        translate([15, 15, 35]) {\n            rotate([0, 0, 30]) \n            mirror([1, 0, 0]) \n            wing();\n        }\n        translate([20, 10, 25]) {\n            rotate([0, 0, 45]) \n            scale([0.8, 0.8, 0.8]) \n            mirror([1, 0, 0]) \n            wing();\n        }\n    }\n    \n    // Arms with stingers\n    color(color_body) {\n        // Left arm\n        translate([-12, 0, 30]) {\n            rotate([0, 0, -45]) {\n                cylinder(h=20, d=6);\n                translate([0, 20, 0]) {\n                    rotate([0, 90, 0]) \n                    color(color_stinger) \n                    cylinder(h=15, d1=6, d2=1);\n                }\n            }\n        }\n        \n        // Right arm\n        translate([12, 0, 30]) {\n            rotate([0, 0, 45]) {\n                cylinder(h=20, d=6);\n                translate([0, 20, 0]) {\n                    rotate([0, 90, 0]) \n                    color(color_stinger) \n                    cylinder(h=15, d1=6, d2=1);\n                }\n            }\n        }\n    }\n    \n    // Legs\n    color(color_body) {\n        for(side = [-1, 1]) {\n            translate([side * 8, 0, 15]) {\n                rotate([0, 0, side * 30]) {\n                    cylinder(h=12, d1=5, d2=3);\n                    translate([0, 12, 0]) {\n                        rotate([0, 90, 0]) \n                        cylinder(h=8, d1=3, d2=4);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Wing module\nmodule wing() {\n    difference() {\n        union() {\n            // Main wing shape\n            translate([0, 0, 0]) \n            cube([25, 2, 15], center=true);\n            \n            // Wing tip\n            translate([12, 0, 3]) \n            sphere(d=8);\n        }\n        \n        // Wing membrane cutout\n        translate([5, 0, 0]) \n        cube([15, 3, 10], center=true);\n    }\n}\n\n// Render the model\nbeedrill();",
    "renders": true
  },
  {
    "pokemon": "pidgey",
    "openscad_code": "// Pidgey Pokemon - Realistic Medium Complexity\n// Size: ~70mm tall, 3D printable\n\n$fn = 32;\n\n// Main colors\ncolor_brown = [139/255, 69/255, 19/255];\ncolor_cream = [255/255, 248/255, 220/255];\ncolor_red = [255/255, 0/255, 0/255];\ncolor_yellow = [255/255, 255/255, 0/255];\ncolor_black = [0, 0, 0];\ncolor_orange = [255/255, 165/255, 0/255];\n\nmodule pidgey_body() {\n    color(color_brown) {\n        // Main spherical body\n        translate([0, 0, 25]) \n            sphere(r=20);\n        \n        // Chest fluff\n        color(color_cream)\n        translate([0, 12, 18])\n            scale([1, 0.8, 0.6])\n            sphere(r=15);\n    }\n}\n\nmodule pidgey_head() {\n    color(color_brown) {\n        // Head sphere\n        translate([0, -30, 45])\n            sphere(r=18);\n        \n        // Beak\n        color(color_yellow)\n        translate([0, -45, 42])\n            rotate([30, 0, 0])\n            scale([0.4, 3, 0.4])\n            cylinder(h=10, r1=4, r2=2);\n        \n        // Eyes\n        color(color_black)\n        for(x = [-8, 8]) {\n            translate([x, -38, 48])\n                sphere(r=2.5);\n        }\n        \n        // Eye whites\n        color(color_white)\n        for(x = [-8, 8]) {\n            translate([x, -38, 48.5])\n                sphere(r=1.5);\n        }\n        \n        // Head crest\n        color(color_red)\n        translate([0, -28, 60])\n            rotate([15, 0, 0])\n            cylinder(h=8, r1=3, r2=1);\n        \n        // Crest feathers\n        for(angle = [-30, 0, 30]) {\n            translate([0, -28, 60])\n                rotate([15, 0, angle])\n                scale([0.3, 1, 0.1])\n                cylinder(h=10, r=2);\n        }\n    }\n}\n\nmodule pidgey_wings() {\n    color(color_brown) {\n        // Left wing\n        translate([-25, -5, 35])\n            rotate([0, 0, -20])\n            scale([1.5, 0.3, 1])\n            sphere(r=15);\n        \n        // Right wing\n        translate([25, -5, 35])\n            rotate([0, 0, 20])\n            scale([1.5, 0.3, 1])\n            sphere(r=15);\n        \n        // Wing tips\n        color(color_cream)\n        translate([-35, -10, 35])\n            rotate([0, 0, -20])\n            sphere(r=5);\n        translate([35, -10, 35])\n            rotate([0, 0, 20])\n            sphere(r=5);\n    }\n}\n\nmodule pidgey_tail() {\n    color(color_brown) {\n        // Main tail feathers\n        for(angle = [-20, 0, 20]) {\n            translate([0, 25, 30])\n                rotate([15, angle, 0])\n                scale([0.8, 0.1, 2])\n                cylinder(h=25, r=5);\n        }\n    }\n}\n\nmodule pidgey_feet() {\n    color(color_yellow) {\n        // Left foot\n        translate([-10, 0, 5])\n            rotate([0, 0, -10])\n            scale([0.5, 2, 0.3])\n            cylinder(h=8, r=3);\n        \n        // Right foot\n        translate([10, 0, 5])\n            rotate([0, 0, 10])\n            scale([0.5, 2, 0.3])\n            cylinder(h=8, r=3);\n        \n        // Toes\n        for(side = [-10, 10]) {\n            for(toe = [-1, 0, 1]) {\n                translate([side + toe*2, 8, 3])\n                    rotate([0, 0, 90])\n                    scale([0.3, 1, 0.3])\n                    cylinder(h=5, r=1.5);\n            }\n        }\n    }\n}\n\nmodule pidgey_markings() {\n    color(color_cream) {\n        // Wing stripes\n        for(y = [20, 30]) {\n            translate([-20, -y, 35])\n                scale([0.1, 0.8, 0.1])\n                rotate([0, 10, 0])\n                cylinder(h=25, r=2);\n            translate([20, -y, 35])\n                scale([0.1, 0.8, 0.1])\n                rotate([0, -10, 0])\n                cylinder(h=25, r=2);\n        }\n        \n        // Belly marking\n        translate([0, 0, 15])\n            scale([1.2, 1.5, 0.2])\n            sphere(r=10);\n    }\n}\n\n// Assemble the Pokemon\nunion() {\n    pidgey_body();\n    pidgey_head();\n    pidgey_wings();\n    pidgey_tail();\n    pidgey_feet();\n    pidgey_markings();\n}",
    "renders": true
  },
  {
    "pokemon": "pidgeotto",
    "openscad_code": "// Pidgeotto OpenSCAD Model - Medium Complexity Realistic Style\n// Overall dimensions: ~80mm wingspan\n\ncolor(\"orange\")\nunion() {\n    // Main body\n    translate([0, 0, 10])\n    scale([1.2, 0.8, 1])\n    sphere(d=25, $fn=32);\n    \n    // Head\n    translate([12, 0, 25])\n    scale([1.1, 1, 1.1])\n    sphere(d=18, $fn=32);\n    \n    // Beak\n    translate([23, 0, 25])\n    rotate([0, 90, 0])\n    cylinder(h=12, r1=3, r2=0, $fn=16);\n    \n    // Crest feathers\n    module crest() {\n        color(\"red\")\n        for(i=[-2:2]) {\n            translate([12, 5*i, 35])\n            rotate([90, 0, 0])\n            cylinder(h=6+i, r1=2, r2=0.5, $fn=8);\n        }\n    }\n    crest();\n    \n    // Eyes\n    color(\"white\")\n    translate([16, -5, 27])\n    sphere(d=4, $fn=16);\n    translate([16, 5, 27])\n    sphere(d=4, $fn=16);\n    \n    color(\"black\")\n    translate([18, -5, 27])\n    sphere(d=2, $fn=16);\n    translate([18, 5, 27])\n    sphere(d=2, $fn=16);\n    \n    // Wings\n    module wing() {\n        color(\"orange\")\n        difference() {\n            translate([0, 0, 15])\n            rotate([0, 90, 0])\n            scale([0.3, 1, 1])\n            cylinder(h=30, r1=15, r2=5, $fn=32);\n            \n            // Wing feathers\n            color(\"yellow\")\n            translate([0, 8, 15])\n            rotate([0, 90, 0])\n            scale([0.25, 0.8, 1])\n            cylinder(h=28, r1=13, r2=4, $fn=32);\n        }\n        \n        // Wing tips\n        color(\"red\")\n        for(i=[0:2]) {\n            translate([0, 12+i*4, 15-i*3])\n            rotate([0, 90, 0])\n            scale([0.2, 0.4, 1])\n            cylinder(h=8, r1=3, r2=1, $fn=8);\n        }\n    }\n    \n    translate([0, 20, 15])\n    rotate([0, 0, 20])\n    wing();\n    \n    translate([0, -20, 15])\n    rotate([0, 0, -20])\n    mirror([0, 1, 0])\n    wing();\n    \n    // Tail feathers\n    color(\"red\")\n    for(i=[-2:2]) {\n        translate([-12, 5*i, 15])\n        rotate([0, 10, 0])\n        cylinder(h=15, r1=3, r2=1, $fn=8);\n    }\n    \n    // Legs\n    color(\"orange\")\n    module leg() {\n        translate([5, 8, 0])\n        cylinder(h=8, r=2, $fn=16);\n        translate([5, 8, 0])\n        sphere(d=4, $fn=16);\n        \n        // Feet\n        translate([5, 8, 0])\n        rotate([90, 0, 0])\n        cylinder(h=3, r=2, $fn=16);\n        \n        for(j=[-1:1]) {\n            translate([5, 8+j*3, -3])\n            rotate([90, 0, 0])\n            cylinder(h=2, r=1, $fn=8);\n        }\n    }\n    \n    leg();\n    translate([0, -16, 0])\n    leg();\n}",
    "renders": true
  },
  {
    "pokemon": "pidgeot",
    "openscad_code": "// Pidgeot - Realistic Style (Medium Complexity)\n// Total height: 80mm, wingspan: 90mm\n\n// Main colors\ncolor_yellow = [1, 0.8, 0.1];\ncolor_red = [0.9, 0.2, 0.1];\ncolor_blue = [0.2, 0.5, 0.9];\ncolor_orange = [1, 0.5, 0.1];\ncolor_white = [1, 1, 1];\ncolor_black = [0.1, 0.1, 0.1];\n\n// Parameters\nwing_thickness = 2;\nbody_wall = 2;\n\nmodule head() {\n    // Main head shape\n    color(color_yellow) \n    translate([0, 0, 65])\n    rotate([0, 0, 0])\n    sphere(d=18, $fn=32);\n    \n    // Beak\n    color(color_red)\n    translate([9, 0, 68])\n    rotate([0, 0, 0])\n    cylinder(h=12, d1=8, d2=3, $fn=16);\n    \n    // Beak tip\n    color(color_black)\n    translate([18, 0, 68])\n    sphere(d=3, $fn=16);\n    \n    // Crest\n    color(color_yellow)\n    for(i = [0:30:150]) {\n        rotate([0, 0, i])\n        translate([0, 0, 75])\n        cylinder(h=8, d1=2, d2=0.5, $fn=8);\n    }\n    \n    // Eyes\n    color(color_white)\n    translate([-5, 6, 68])\n    sphere(d=4, $fn=16);\n    \n    color(color_black)\n    translate([-5.5, 7.5, 68])\n    sphere(d=2, $fn=16);\n    \n    // Other eye\n    color(color_white)\n    translate([-5, -6, 68])\n    sphere(d=4, $fn=16);\n    \n    color(color_black)\n    translate([-5.5, -7.5, 68])\n    sphere(d=2, $fn=16);\n}\n\nmodule body() {\n    // Main body\n    color(color_yellow)\n    translate([0, 0, 35])\n    scale([1.2, 1, 1.5])\n    sphere(d=25, $fn=32);\n    \n    // Chest feathers\n    color(color_white)\n    translate([0, 0, 30])\n    scale([0.8, 0.6, 1.2])\n    sphere(d=20, $fn=32);\n}\n\nmodule wings() {\n    module wing() {\n        // Main wing structure\n        color(color_yellow)\n        translate([0, 0, 0])\n        difference() {\n            scale([1, 2.5, 0.2])\n            sphere(d=30, $fn=32);\n            \n            // Wing tip cut\n            translate([5, 12, 0])\n            rotate([0, 0, 45])\n            cube([20, 20, 5], center=true);\n        }\n        \n        // Wing feathers\n        for(i = [1:3]) {\n            color(color_yellow)\n            translate([i*3, 25 + i*5, 0])\n            rotate([0, 0, -15 - i*5])\n            scale([0.8 - i*0.1, 1.5 - i*0.2, 0.1])\n            sphere(d=15, $fn=16);\n        }\n        \n        // Red wing tips\n        color(color_red)\n        translate([-5, 28, 0])\n        rotate([0, 0, -30])\n        scale([0.3, 0.8, 0.1])\n        sphere(d=15, $fn=16);\n    }\n    \n    // Left wing\n    translate([5, 0, 45])\n    rotate([0, 0, -20])\n    wing();\n    \n    // Right wing\n    translate([5, 0, 45])\n    mirror([0, 1, 0])\n    rotate([0, 0, -20])\n    wing();\n}\n\nmodule tail() {\n    // Main tail feathers\n    for(i = [-1, 0, 1]) {\n        color(i == 0 ? color_red : color_yellow)\n        translate([-15, i*5, 40])\n        rotate([0, 0, i*10])\n        scale([1.5, 0.3, 3])\n        cylinder(h=20, d=8, $fn=16);\n        \n        // Tail feather tips\n        color(color_red)\n        translate([-15, i*5, 25])\n        rotate([0, 0, i*10])\n        sphere(d=4, $fn=16);\n    }\n}\n\nmodule legs() {\n    module leg() {\n        // Leg\n        color(color_orange)\n        translate([0, 0, 0])\n        cylinder(h=15, d=4, $fn=16);\n        \n        // Foot\n        translate([0, 0, -8])\n        scale([1.5, 1, 0.5])\n        sphere(d=8, $fn=16);\n        \n        // Toes\n        for(angle = [0:120:240]) {\n            translate([0, 0, -13])\n            rotate([0, 0, angle])\n            translate([6, 0, 0])\n            cylinder(h=3, d1=3, d2=2, $fn=8);\n        }\n    }\n    \n    // Left leg\n    translate([5, 5, 20])\n    rotate([10, 0, 0])\n    leg();\n    \n    // Right leg\n    translate([5, -5, 20])\n    rotate([10, 0, 0])\n    leg();\n}\n\n// Assembly\nunion() {\n    head();\n    body();\n    wings();\n    tail();\n    legs();\n}",
    "renders": true
  },
  {
    "pokemon": "rattata",
    "openscad_code": "// Rattata Pokémon - Realistic Style, Medium Complexity\n// Size: 60mm length, 30mm height, 25mm width\n\nmodule rat_body() {\n    color(\"purple\")\n    union() {\n        // Main body\n        scale([1, 0.8, 0.6])\n        sphere(d=25);\n        \n        // Belly\n        color(\"beige\")\n        translate([0, -9.8, 0])\n        scale([0.7, 0.4, 0.5])\n        sphere(d=20);\n    }\n}\n\nmodule rat_head() {\n    color(\"purple\")\n    union() {\n        // Main head\n        translate([-12, 0, 5])\n        scale([1.2, 0.9, 0.9])\n        sphere(d=18);\n        \n        // Snout\n        color(\"beige\")\n        translate([-22, 0, 3])\n        scale([0.8, 0.7, 0.6])\n        sphere(d=10);\n        \n        // Nose\n        color(\"black\")\n        translate([-27, 0, 3])\n        sphere(d=3);\n    }\n}\n\nmodule rat_ear() {\n    color(\"purple\")\n    union() {\n        // Outer ear\n        scale([0.4, 2, 0.2])\n        sphere(d=10);\n        \n        // Inner ear\n        color(\"pink\")\n        translate([0, -1, 0.5])\n        scale([0.3, 1.5, 0.1])\n        sphere(d=8);\n    }\n}\n\nmodule rat_ears() {\n    // Left ear\n    translate([-15, 8, 12])\n    rotate([0, 15, -20])\n    rat_ear();\n    \n    // Right ear\n    translate([-15, -8, 12])\n    rotate([0, 15, 20])\n    rat_ear();\n}\n\nmodule rat_eye() {\n    color(\"black\")\n    union() {\n        // Eye\n        sphere(d=4);\n        \n        // White highlight\n        color(\"white\")\n        translate([1, 1, 1])\n        sphere(d=1);\n    }\n}\n\nmodule rat_eyes() {\n    // Left eye\n    translate([-20, 6, 8])\n    rat_eye();\n    \n    // Right eye\n    translate([-20, -6, 8])\n    rat_eye();\n}\n\nmodule rat_whiskers() {\n    color(\"black\")\n    for(i=[-1:1]) {\n        // Left whiskers\n        translate([-25, 9 + i*2, 3])\n        rotate([0, -20 + i*10, 90])\n        cylinder(h=8, d=0.5);\n        \n        // Right whiskers\n        translate([-25, -9 - i*2, 3])\n        rotate([0, -20 + i*10, 90])\n        cylinder(h=8, d=0.5);\n    }\n}\n\nmodule rat_teeth() {\n    color(\"white\")\n    // Two front teeth\n    translate([-25, -1.5, 0])\n    cube([2, 1, 2]);\n    translate([-25, 0.5, 0])\n    cube([2, 1, 2]);\n}\n\nmodule rat_tail() {\n    color(\"purple\")\n    union() {\n        // Tail segments\n        for(i=[0:4]) {\n            translate([12 + i*6, 0, 2 - i])\n            rotate([0, 0, -15*i])\n            scale([1 - i*0.1, 1 - i*0.1, 1 - i*0.1])\n            sphere(d=8);\n        }\n        \n        // Curl at end\n        translate([35, -8, -3])\n        rotate([0, 0, -75])\n        scale([0.7, 0.7, 0.7])\n        sphere(d=8);\n    }\n}\n\nmodule rat_legs() {\n    color(\"purple\")\n    union() {\n        // Front legs\n        translate([-5, 8, -8])\n        rotate([0, 10, 0])\n        cylinder(h=10, d=4);\n        \n        translate([-5, -8, -8])\n        rotate([0, 10, 0])\n        cylinder(h=10, d=4);\n        \n        // Hind legs\n        translate([8, 6, -8])\n        scale([1.2, 1, 1])\n        rotate([0, -10, 15])\n        cylinder(h=12, d=5);\n        \n        translate([8, -6, -8])\n        scale([1.2, 1, 1])\n        rotate([0, -10, -15])\n        cylinder(h=12, d=5);\n    }\n}\n\nmodule rat_feet() {\n    color(\"beige\")\n    union() {\n        // Front paws\n        translate([-5, 8, -14])\n        scale([1.5, 0.8, 0.5])\n        sphere(d=6);\n        \n        translate([-5, -8, -14])\n        scale([1.5, 0.8, 0.5])\n        sphere(d=6);\n        \n        // Hind paws\n        translate([8, 6, -14])\n        scale([2, 1, 0.6])\n        sphere(d=8);\n        \n        translate([8, -6, -14])\n        scale([2, 1, 0.6])\n        sphere(d=8);\n    }\n}\n\n// Assemble the Rattata\nunion() {\n    rat_body();\n    rat_head();\n    rat_ears();\n    rat_eyes();\n    rat_whiskers();\n    rat_teeth();\n    rat_tail();\n    rat_legs();\n    rat_feet();\n}",
    "renders": true
  },
  {
    "pokemon": "raticate",
    "openscad_code": "// Realistic Raticate OpenSCAD Model\n// Medium complexity with 3D-printable design\n\n// Colors\ncolor_body = \"#8B7355\";\ncolor_belly = \"#F5DEB3\";\ncolor_teeth = \"#FFFACD\";\ncolor_eyes = \"#8B0000\";\ncolor_ears = \"#A0522D\";\ncolor_feet = \"#8B7355\";\ncolor_tail = \"#8B7355\";\n\n// Scale factor for 50mm height\nscale_factor = 0.7;\n\n// Main body\nmodule body() {\n    color(color_body) {\n        // Main torso\n        translate([0, 0, 10])\n            scale([1.2, 1, 0.8])\n            sphere(15);\n        \n        // Belly\n        color(color_belly)\n            translate([0, 0, 8])\n                scale([1.1, 0.9, 0.3])\n                sphere(12);\n    }\n}\n\n// Head\nmodule head() {\n    color(color_body) {\n        // Main head shape\n        translate([0, 25, 20])\n            scale([1.3, 1.2, 1.1])\n            sphere(12);\n        \n        // Snout\n        translate([0, 35, 18])\n            scale([0.8, 0.6, 0.5])\n            sphere(8);\n    }\n}\n\n// Ears\nmodule ears() {\n    color(color_ears) {\n        // Left ear\n        translate([-8, 20, 28])\n            rotate([0, -20, -30])\n            scale([0.3, 0.8, 2])\n            cylinder(r1=3, r2=1, h=12);\n        \n        // Right ear\n        translate([8, 20, 28])\n            rotate([0, -20, 30])\n            scale([0.3, 0.8, 2])\n            cylinder(r1=3, r2=1, h=12);\n    }\n}\n\n// Eyes\nmodule eyes() {\n    color(color_eyes) {\n        // Left eye\n        translate([-5, 30, 22])\n            scale([1, 1.5, 0.5])\n            sphere(2.5);\n        \n        // Right eye\n        translate([5, 30, 22])\n            scale([1, 1.5, 0.5])\n            sphere(2.5);\n    }\n    \n    // Eye highlights\n    color(\"white\")\n    for(i = [-1, 1]) {\n        translate([i*4.5, 30.5, 23.5])\n            sphere(0.8);\n    }\n}\n\n// Whiskers\nmodule whiskers() {\n    color(\"black\") {\n        // Whiskers on left\n        for(angle = [0:60:120])\n            translate([-10, 32, 20])\n                rotate([0, 0, angle])\n                cylinder(r1=0.5, r2=0.2, h=8);\n        \n        // Whiskers on right\n        for(angle = [60:60:180])\n            translate([10, 32, 20])\n                rotate([0, 0, angle])\n                cylinder(r1=0.5, r2=0.2, h=8);\n    }\n}\n\n// Teeth\nmodule teeth() {\n    color(color_teeth) {\n        // Top teeth\n        for(x = [-3, 0, 3])\n            translate([x, 40, 18])\n                scale([0.3, 0.3, 1])\n                cylinder(r1=1, r2=0.5, h=3);\n        \n        // Bottom teeth\n        for(x = [-2, 2])\n            translate([x, 40, 15])\n                scale([0.3, 0.3, 1])\n                cylinder(r1=0.5, r2=1, h=3);\n    }\n}\n\n// Feet\nmodule feet() {\n    color(color_feet) {\n        // Front left foot\n        translate([-8, 15, 0])\n            scale([0.8, 1, 0.5])\n            sphere(5);\n        \n        // Front right foot\n        translate([8, 15, 0])\n            scale([0.8, 1, 0.5])\n            sphere(5);\n        \n        // Back left foot\n        translate([-10, -5, 0])\n            scale([0.9, 1.1, 0.6])\n            sphere(5.5);\n        \n        // Back right foot\n        translate([10, -5, 0])\n            scale([0.9, 1.1, 0.6])\n            sphere(5.5);\n    }\n}\n\n// Tail\nmodule tail() {\n    color(color_tail) {\n        // Base of tail\n        translate([0, -20, 8])\n            rotate([0, 30, 0])\n            scale([0.8, 0.8, 3])\n            cylinder(r1=6, r2=4, h=20);\n        \n        // Tail curl\n        translate([0, -35, 12])\n            rotate([0, 60, 0])\n            scale([0.7, 0.7, 2])\n            sphere(5);\n    }\n}\n\n// Assembly\nscale(scale_factor)\nunion() {\n    body();\n    head();\n    ears();\n    eyes();\n    whiskers();\n    teeth();\n    feet();\n    tail();\n}",
    "renders": true
  },
  {
    "pokemon": "spearow",
    "openscad_code": "// Spearow Pokemon - Realistic Style (Medium Complexity)\n// Model size: ~80mm height\n\n// Colors\ncolor_body = [0.8, 0.2, 0.1];       // Red-brown\ncolor_wing = [0.6, 0.4, 0.3];       // Dark brown\ncolor_beak = [0.9, 0.7, 0.2];       // Yellow\ncolor_eye = [0.1, 0.1, 0.9];        // Blue\ncolor_white = [1, 1, 1];\ncolor_black = [0, 0, 0];\n\n// Parameters\nscale_factor = 0.8;\nbase_height = 80 * scale_factor;\nbody_radius = 15 * scale_factor;\nhead_radius = 12 * scale_factor;\nbeak_length = 18 * scale_factor;\nwing_span = 40 * scale_factor;\n\n// Module for rounded cube (body shaping)\nmodule rounded_cube(size, radius) {\n    hull() {\n        for(dx = [0, size.x - radius*2])\n        for(dy = [0, size.y - radius*2])\n        for(dz = [0, size.z - radius*2])\n            translate([dx + radius, dy + radius, dz + radius])\n                sphere(r = radius);\n    }\n}\n\n// Main body\nmodule body() {\n    color(color_body)\n    union() {\n        // Main body sphere\n        sphere(r = body_radius);\n        \n        // Chest protrusion\n        translate([0, -body_radius*0.7, -body_radius*0.3])\n            scale([1.2, 0.8, 0.9])\n                sphere(r = body_radius * 0.7);\n    }\n}\n\n// Head and beak\nmodule head_and_beak() {\n    color(color_body)\n    union() {\n        // Head\n        translate([0, body_radius + head_radius*0.8, body_radius*0.5])\n            sphere(r = head_radius);\n        \n        // Beak\n        color(color_beak)\n        translate([0, body_radius + head_radius*0.8 + beak_length*0.6, body_radius*0.5])\n            rotate([0, 90, 0])\n                cylinder(h = beak_length, r1 = head_radius*0.3, r2 = head_radius*0.1);\n    }\n}\n\n// Crest feathers\nmodule crest() {\n    color(color_body)\n    for(i = [0:2]) {\n        rotate([0, 0, (i-1)*25])\n            translate([0, body_radius + head_radius*0.8 + 2, body_radius*0.5 + head_radius*0.8])\n                cylinder(h = 8 * scale_factor, r1 = 2 * scale_factor, r2 = 1 * scale_factor);\n    }\n}\n\n// Eyes\nmodule eyes() {\n    // Left eye\n    translate([head_radius*0.5, body_radius + head_radius*0.7, body_radius*0.5 + head_radius*0.3])\n        color(color_white)\n        sphere(r = head_radius * 0.25);\n    \n    translate([head_radius*0.5, body_radius + head_radius*0.7 + 0.5, body_radius*0.5 + head_radius*0.3])\n        color(color_eye)\n        sphere(r = head_radius * 0.15);\n    \n    translate([head_radius*0.5 + 1, body_radius + head_radius*0.7 + 1, body_radius*0.5 + head_radius*0.3 + 1])\n        color(color_black)\n        sphere(r = head_radius * 0.08);\n    \n    // Right eye (mirror of left)\n    mirror([1, 0, 0]) {\n        translate([head_radius*0.5, body_radius + head_radius*0.7, body_radius*0.5 + head_radius*0.3])\n            color(color_white)\n            sphere(r = head_radius * 0.25);\n        \n        translate([head_radius*0.5, body_radius + head_radius*0.7 + 0.5, body_radius*0.5 + head_radius*0.3])\n            color(color_eye)\n            sphere(r = head_radius * 0.15);\n        \n        translate([head_radius*0.5 + 1, body_radius + head_radius*0.7 + 1, body_radius*0.5 + head_radius*0.3 + 1])\n            color(color_black)\n            sphere(r = head_radius * 0.08);\n    }\n}\n\n// Wings\nmodule wings() {\n    // Left wing\n    color(color_wing)\n    translate([-body_radius*0.8, 0, body_radius*0.3])\n        rotate([0, 30, 20])\n            scale([1, 2.5, 0.3])\n                sphere(r = wing_span * 0.3);\n    \n    // Wing tip\n    translate([-body_radius*0.8 - wing_span*0.6, -body_radius*0.2, body_radius*0.3 + wing_span*0.15])\n        rotate([0, 30, 45])\n            scale([0.5, 1.5, 0.2])\n                sphere(r = wing_span * 0.25);\n    \n    // Right wing (mirror)\n    mirror([1, 0, 0])\n    union() {\n        color(color_wing)\n        translate([-body_radius*0.8, 0, body_radius*0.3])\n            rotate([0, 30, 20])\n                scale([1, 2.5, 0.3])\n                    sphere(r = wing_span * 0.3);\n        \n        translate([-body_radius*0.8 - wing_span*0.6, -body_radius*0.2, body_radius*0.3 + wing_span*0.15])\n            rotate([0, 30, 45])\n                scale([0.5, 1.5, 0.2])\n                    sphere(r = wing_span * 0.25);\n    }\n}\n\n// Tail feathers\nmodule tail() {\n    color(color_wing)\n    for(i = [0:2]) {\n        rotate([0, 0, (i-1)*15 - 90])\n            translate([0, body_radius + 5, -body_radius*0.7])\n                scale([0.8, 2.5, 0.2])\n                    sphere(r = body_radius * 0.6);\n    }\n}\n\n// Legs and feet\nmodule legs() {\n    // Left leg\n    color(color_beak)\n    translate([-body_radius*0.3, 0, -body_radius*0.9])\n        cylinder(h = body_radius * 0.7, r = body_radius * 0.15);\n    \n    // Left foot\n    translate([-body_radius*0.3, -body_radius*0.3, -body_radius*1.6])\n        rotate([0, 0, -30])\n            scale([2, 0.5, 0.3])\n                cube([body_radius*0.4, body_radius*0.2, body_radius*0.1]);\n    \n    // Right leg\n    translate([body_radius*0.3, 0, -body_radius*0.9])\n        cylinder(h = body_radius * 0.7, r = body_radius * 0.15);\n    \n    // Right foot\n    translate([body_radius*0.3, -body_radius*0.3, -body_radius*1.6])\n        rotate([0, 0, 30])\n            scale([2, 0.5, 0.3])\n                cube([body_radius*0.4, body_radius*0.2, body_radius*0.1]);\n}\n\n// Assembly\nunion() {\n    body();\n    head_and_beak();\n    crest();\n    eyes();\n    wings();\n    tail();\n    legs();\n}",
    "renders": true
  },
  {
    "pokemon": "fearow",
    "openscad_code": "// Fearow - Realistic style, 3D printable\n$fn = 32;\n\n// Main colors\ncolor_brown = [0.4, 0.25, 0.15];\ncolor_beak = [0.9, 0.7, 0.3];\ncolor_red = [0.8, 0.2, 0.2];\ncolor_white = [0.95, 0.95, 0.9];\ncolor_black = [0.1, 0.1, 0.1];\n\n// Scale factor for 3D printing (target ~80mm height)\nscale_factor = 0.3;\n\nmodule fearow() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        union() {\n            // Main body\n            translate([0, 0, 20]) {\n                color(color_brown)\n                scale([1.2, 0.8, 1.4])\n                sphere(r = 15);\n            }\n            \n            // Long neck\n            translate([0, -5, 35]) {\n                color(color_brown)\n                rotate([30, 0, 0])\n                cylinder(h = 25, r1 = 6, r2 = 4);\n            }\n            \n            // Head\n            translate([0, -15, 55]) {\n                color(color_brown)\n                scale([0.8, 2.2, 1])\n                sphere(r = 8);\n            }\n            \n            // Long beak\n            translate([0, -35, 55]) {\n                color(color_beak)\n                rotate([30, 0, 0])\n                scale([0.3, 1, 0.3])\n                cylinder(h = 25, r1 = 5, r2 = 1);\n            }\n            \n            // Beak tip\n            translate([0, -45, 60]) {\n                color(color_beak)\n                rotate([30, 0, 0])\n                scale([0.3, 0.5, 0.3])\n                cylinder(h = 8, r1 = 1, r2 = 0.5);\n            }\n            \n            // Red crest\n            translate([0, -15, 67]) {\n                color(color_red)\n                rotate([0, 0, 0])\n                scale([0.2, 2, 0.1])\n                cylinder(h = 15, r1 = 5, r2 = 0.5);\n            }\n            \n            // Eyes\n            translate([4, -15, 58]) {\n                color(color_black)\n                sphere(r = 2);\n            }\n            translate([-4, -15, 58]) {\n                color(color_black)\n                sphere(r = 2);\n            }\n            \n            // Eye highlights\n            translate([4.5, -15.5, 59]) {\n                color(color_white)\n                sphere(r = 0.7);\n            }\n            translate([-3.5, -15.5, 59]) {\n                color(color_white)\n                sphere(r = 0.7);\n            }\n            \n            // Wings\n            module wing(side) {\n                translate([side * 20, 0, 30]) {\n                    rotate([0, 0, side * 20]) {\n                        color(color_brown)\n                        difference() {\n                            union() {\n                                // Main wing\n                                translate([side * 5, 0, 0]) {\n                                    scale([1.8, 0.3, 0.8])\n                                    rotate([0, 45, 0])\n                                    cube([20, 25, 3], center = true);\n                                }\n                                \n                                // Wing tip\n                                translate([side * 25, -5, 5]) {\n                                    rotate([0, 0, -30])\n                                    scale([1.2, 0.3, 0.6])\n                                    cube([15, 20, 2], center = true);\n                                }\n                            }\n                            \n                            // Wing feathers cutout\n                            for(i = [0:3]) {\n                                translate([side * (5 + i * 8), -8, 0]) {\n                                    rotate([0, 0, side * 45])\n                                    scale([0.5, 0.2, 0.5])\n                                    cube([10, 15, 4], center = true);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            \n            wing(1);\n            wing(-1);\n            \n            // Tail feathers\n            translate([0, 15, 25]) {\n                color(color_red)\n                rotate([-20, 0, 0]) {\n                    for(i = [-1:1]) {\n                        translate([i * 6, 0, i * 2]) {\n                            rotate([0, 0, i * 10])\n                            scale([0.2, 2, 0.1])\n                            cylinder(h = 20, r1 = 3, r2 = 1);\n                        }\n                    }\n                }\n            }\n            \n            // Legs\n            module leg(side) {\n                translate([side * 8, 0, 15]) {\n                    color(color_brown)\n                    rotate([30, 0, side * 10])\n                    cylinder(h = 18, r1 = 3, r2 = 2);\n                    \n                    // Feet\n                    translate([0, 8, -12]) {\n                        color(color_beak)\n                        rotate([90, 0, 0])\n                        scale([1, 0.5, 1])\n                        cylinder(h = 8, r1 = 4, r2 = 3);\n                        \n                        // Toes\n                        for(j = [-1, 0, 1]) {\n                            translate([j * 3, 4, 0]) {\n                                rotate([0, 0, j * 20])\n                                scale([0.3, 0.3, 1])\n                                cylinder(h = 5, r1 = 2, r2 = 1);\n                            }\n                        }\n                    }\n                }\n            }\n            \n            leg(1);\n            leg(-1);\n        }\n    }\n}\n\n// Render the model\nfearow();",
    "renders": true
  },
  {
    "pokemon": "ekans",
    "openscad_code": "// Ekans Pokemon - Realistic Style\n// Medium complexity 3D printable model\n\n$fn = 32;\nmodule ekans() {\n    // Main body segments\n    color(\"purple\") {\n        // Head\n        translate([0, 0, 5])\n        rotate([0, 0, 45])\n        scale([1.2, 1, 1])\n        sphere(8);\n        \n        // Neck segment\n        translate([0, 0, 0])\n        cylinder(h=10, r1=6, r2=5, center=true);\n        \n        // Body segments (curved)\n        for(i = [0:5]) {\n            rotate([0, 0, -i * 20])\n            translate([0, -i * 8, -i * 2])\n            scale([1 - i * 0.08, 1 - i * 0.08, 0.8])\n            cylinder(h=10, r1=5 - i * 0.5, r2=4.5 - i * 0.5, center=true);\n        }\n        \n        // Tail tip\n        rotate([0, 0, -120])\n        translate([0, -48, -12])\n        scale([0.3, 0.3, 1.5])\n        sphere(5);\n    }\n    \n    // Rattle segments\n    color(\"yellow\") {\n        rotate([0, 0, -120])\n        translate([0, -52, -12])\n        scale([0.4, 0.4, 0.8])\n        cylinder(h=8, r=3, center=true);\n    }\n    \n    // Hood pattern\n    color(\"yellow\") {\n        translate([6, 0, 5])\n        rotate([0, 0, 45])\n        scale([1.3, 0.2, 0.2])\n        sphere(8);\n        \n        translate([-6, 0, 5])\n        rotate([0, 0, 45])\n        scale([1.3, 0.2, 0.2])\n        sphere(8);\n        \n        translate([0, 6, 5])\n        rotate([0, 0, 45])\n        scale([0.2, 1.3, 0.2])\n        sphere(8);\n        \n        translate([0, -6, 5])\n        rotate([0, 0, 45])\n        scale([0.2, 1.3, 0.2])\n        sphere(8);\n    }\n    \n    // Eye\n    color(\"yellow\") {\n        translate([5, 3, 7])\n        rotate([0, 0, 45])\n        sphere(2);\n    }\n    \n    color(\"black\") {\n        translate([6, 3, 7.5])\n        rotate([0, 0, 45])\n        sphere(1);\n    }\n    \n    // Second eye\n    color(\"yellow\") {\n        translate([5, -3, 7])\n        rotate([0, 0, 45])\n        sphere(2);\n    }\n    \n    color(\"black\") {\n        translate([6, -3, 7.5])\n        rotate([0, 0, 45])\n        sphere(1);\n    }\n    \n    // Mouth\n    color(\"red\") {\n        translate([8, 0, 3])\n        rotate([0, 90, 45])\n        scale([0.8, 0.3, 0.3])\n        cylinder(h=6, r=2);\n    }\n    \n    // Body pattern stripes\n    color(\"yellow\") {\n        for(i = [1:3]) {\n            rotate([0, 0, -i * 25])\n            translate([0, -i * 8 - 5, -i * 2])\n            scale([1 - i * 0.08, 0.15, 0.15])\n            cylinder(h=12, r=5 - i * 0.5, center=true);\n        }\n    }\n    \n    // Fangs\n    color(\"white\") {\n        translate([7, 1, 4])\n        rotate([0, -30, 45])\n        cylinder(h=3, r1=0.5, r2=0, center=false);\n        \n        translate([7, -1, 4])\n        rotate([0, 30, 45])\n        cylinder(h=3, r1=0.5, r2=0, center=false);\n    }\n    \n    // Tongue\n    color(\"pink\") {\n        translate([9, 0, 2])\n        rotate([0, 90, 45])\n        scale([0.3, 0.3, 0.8])\n        cylinder(h=4, r=1, center=false);\n    }\n}\n\n// Create the model\nekans();",
    "renders": true
  },
  {
    "pokemon": "arbok",
    "openscad_code": "// Arbok Pokemon - OpenSCAD Model\n// Realistic style, medium complexity\n\n// Scale factor for overall size\nscale_factor = 0.5;\n\n// Main body module\nmodule arbok_body() {\n    color(\"purple\")\n    union() {\n        // Head section\n        translate([0, 0, 0]) {\n            sphere(d = 15 * scale_factor, $fn = 32);\n        }\n        \n        // Neck segment 1\n        translate([0, -10 * scale_factor, -5 * scale_factor]) {\n            scale([1, 1.2, 0.8])\n            sphere(d = 12 * scale_factor, $fn = 32);\n        }\n        \n        // Neck segment 2\n        translate([0, -20 * scale_factor, -8 * scale_factor]) {\n            scale([0.9, 1.3, 0.7])\n            sphere(d = 11 * scale_factor, $fn = 32);\n        }\n        \n        // Body segments\n        for(i = [1:10]) {\n            translate([0, -(30 + i * 8) * scale_factor, -(8 + i * 2) * scale_factor]) {\n                scale([1 - i * 0.05, 1.4 - i * 0.1, 0.6 - i * 0.03])\n                sphere(d = (12 - i * 0.8) * scale_factor, $fn = 32);\n            }\n        }\n        \n        // Tail end\n        translate([0, -110 * scale_factor, -25 * scale_factor]) {\n            scale([0.3, 2, 0.3])\n            sphere(d = 8 * scale_factor, $fn = 32);\n        }\n    }\n}\n\n// Hood pattern\nmodule hood_pattern() {\n    color(\"yellow\")\n    union() {\n        // Left eye spot\n        translate([5 * scale_factor, -2 * scale_factor, 5 * scale_factor]) {\n            scale([1.5, 1, 1])\n            sphere(d = 3 * scale_factor, $fn = 16);\n        }\n        \n        // Right eye spot\n        translate([-5 * scale_factor, -2 * scale_factor, 5 * scale_factor]) {\n            scale([1.5, 1, 1])\n            sphere(d = 3 * scale_factor, $fn = 16);\n        }\n        \n        // Mouth line\n        translate([0, -7 * scale_factor, 2 * scale_factor]) {\n            rotate([90, 0, 0])\n            cylinder(h = 10 * scale_factor, r = 0.5 * scale_factor, $fn = 8);\n        }\n        \n        // Hood markings\n        for(i = [1:3]) {\n            translate([0, -5 * scale_factor, 7 * scale_factor]) {\n                rotate([0, 15 * i, 0])\n                translate([0, 0, -2 * i * scale_factor])\n                scale([1 + i * 0.2, 1, 0.5])\n                sphere(d = (4 - i * 0.5) * scale_factor, $fn = 16);\n            }\n        }\n    }\n}\n\n// Face features\nmodule face() {\n    union() {\n        // Eyes\n        color(\"red\")\n        union() {\n            translate([4 * scale_factor, -5 * scale_factor, 4 * scale_factor]) {\n                scale([1, 2, 1])\n                sphere(d = 2 * scale_factor, $fn = 16);\n            }\n            translate([-4 * scale_factor, -5 * scale_factor, 4 * scale_factor]) {\n                scale([1, 2, 1])\n                sphere(d = 2 * scale_factor, $fn = 16);\n            }\n        }\n        \n        // Fangs\n        color(\"white\")\n        union() {\n            translate([2 * scale_factor, -8 * scale_factor, 0 * scale_factor]) {\n                rotate([0, 30, 0])\n                cylinder(h = 3 * scale_factor, r1 = 1 * scale_factor, r2 = 0.2 * scale_factor, $fn = 8);\n            }\n            translate([-2 * scale_factor, -8 * scale_factor, 0 * scale_factor]) {\n                rotate([0, -30, 0])\n                cylinder(h = 3 * scale_factor, r1 = 1 * scale_factor, r2 = 0.2 * scale_factor, $fn = 8);\n            }\n        }\n    }\n}\n\n// Body patterns\nmodule body_patterns() {\n    color(\"yellow\")\n    union() {\n        // Stripe segments\n        for(i = [1:5]) {\n            translate([0, -(35 + i * 15) * scale_factor, -5 * scale_factor]) {\n                scale([1.2, 0.2, 0.2])\n                sphere(d = (10 - i * 0.5) * scale_factor, $fn = 16);\n            }\n        }\n        \n        // Belly scales\n        for(i = [1:6]) {\n            translate([0, -(40 + i * 12) * scale_factor, -8 * scale_factor]) {\n                scale([0.5, 0.8, 0.3])\n                sphere(d = (8 - i * 0.3) * scale_factor, $fn = 8);\n            }\n        }\n    }\n}\n\n// Tongue\nmodule tongue() {\n    color(\"red\")\n    translate([0, -9 * scale_factor, -2 * scale_factor]) {\n        rotate([90, 0, 0])\n        scale([0.5, 2, 0.2])\n        cylinder(h = 8 * scale_factor, r = 1 * scale_factor, $fn = 8);\n    }\n}\n\n// Main assembly\nunion() {\n    arbok_body();\n    hood_pattern();\n    face();\n    body_patterns();\n    tongue();\n}",
    "renders": true
  },
  {
    "pokemon": "sandshrew",
    "openscad_code": "// Sandshrew OpenSCAD Model\n// Medium complexity realistic style\n\n// Color definitions\ncolor_body = [0.82, 0.71, 0.55];    // Sandy brown\ncolor_belly = [0.95, 0.90, 0.85];   // Light cream\ncolor_markings = [0.75, 0.60, 0.45]; // Darker brown\ncolor_eyes = [0.1, 0.1, 0.1];        // Black\ncolor_nose = [0.7, 0.5, 0.4];        // Brown nose\n\n// Main module\nmodule sandshrew() {\n    // Body\n    color(color_body)\n    union() {\n        // Torso - oval shape\n        scale([1.2, 1, 0.8])\n        sphere(d=35, $fn=30);\n        \n        // Belly patch\n        color(color_belly)\n        translate([0, 0, -10])\n        scale([1.1, 0.9, 0.3])\n        sphere(d=30, $fn=25);\n    }\n    \n    // Head\n    color(color_body)\n    translate([0, 22, 12])\n    scale([0.9, 0.8, 0.8])\n    sphere(d=25, $fn=25);\n    \n    // Snout\n    color(color_body)\n    translate([0, 30, 10])\n    rotate([-20, 0, 0])\n    scale([0.6, 1, 0.5])\n    cylinder(h=8, d1=12, d2=8, $fn=20);\n    \n    // Eyes\n    color(color_eyes)\n    for(side = [-1, 1]) {\n        translate([side * 7, 25, 16])\n        sphere(d=3, $fn=10);\n    }\n    \n    // Nose\n    color(color_nose)\n    translate([0, 35, 11])\n    sphere(d=2.5, $fn=8);\n    \n    // Ears - triangular shape\n    color(color_body)\n    for(side = [-1, 1]) {\n        translate([side * 8, 15, 20])\n        rotate([0, side * 10, 0])\n        linear_extrude(height=2)\n        polygon(points=[[0,0], [side * 5, 5], [0, 10]]);\n    }\n    \n    // Arms\n    color(color_body)\n    for(side = [-1, 1]) {\n        // Upper arm\n        translate([side * 12, 10, 5])\n        rotate([90, 0, side * 10])\n        cylinder(h=8, d=6, $fn=15);\n        \n        // Lower arm\n        translate([side * 14, 5, 1])\n        rotate([90, 0, side * 5])\n        cylinder(h=6, d=5, $fn=12);\n        \n        // Claws\n        color(color_markings)\n        for(i = [-1, 0, 1]) {\n            translate([side * 17 + i * 1.5, 2, -1])\n            rotate([90, 0, 0])\n            cylinder(h=3, d1=2, d2=1, $fn=8);\n        }\n    }\n    \n    // Legs\n    color(color_body)\n    for(side = [-1, 1]) {\n        // Thigh\n        translate([side * 8, -8, -5])\n        rotate([0, 0, side * 5])\n        cylinder(h=10, d=8, $fn=15);\n        \n        // Lower leg\n        translate([side * 9, -12, -12])\n        rotate([0, 0, side * 5])\n        cylinder(h=8, d=6, $fn=12);\n        \n        // Feet\n        color(color_markings)\n        translate([side * 9, -15, -16])\n        scale([1.2, 1.5, 0.8])\n        sphere(d=8, $fn=15);\n    }\n    \n    // Tail - curved\n    color(color_body)\n    difference() {\n        // Main tail shape\n        translate([0, -25, -5])\n        rotate([0, 0, 10])\n        cylinder(h=20, d=10, $fn=20);\n        \n        // Tail tip\n        translate([0, -35, -8])\n        rotate([0, 0, 20])\n        scale([0.8, 1, 0.8])\n        sphere(d=12, $fn=20);\n    }\n    \n    // Back plates/armor segments\n    color(color_markings)\n    for(i = [0:1:4]) {\n        translate([0, 5 - i * 8, 8 - i * 2])\n        rotate([0, 0, sin(i * 15)])\n        scale([1, 0.8, 0.3])\n        sphere(d=12, $fn=6);\n    }\n    \n    // Side markings\n    color(color_markings)\n    for(side = [-1, 1]) {\n        translate([side * 15, 0, 0])\n        scale([0.5, 0.8, 1])\n        cylinder(h=30, d=3, $fn=6);\n    }\n}\n\n// Create the model scaled for 3D printing\nscale([2.5, 2.5, 2.5])\nsandshrew();",
    "renders": true
  },
  {
    "pokemon": "sandslash",
    "openscad_code": "// Sandslash in OpenSCAD - medium complexity realistic style\n// Overall height ~70mm\n\n// Colors\ncolor_body = [0.82, 0.64, 0.36];    // Sandy yellow\ncolor_spike = [0.85, 0.85, 0.85];   // Light gray\ncolor_nose = [0.7, 0.5, 0.3];       // Brown\ncolor_eye = [0.2, 0.2, 0.2];        // Black\ncolor_belly = [0.9, 0.8, 0.7];      // Light tan\n\n// Main body module\nmodule sandslash() {\n    color(color_body) {\n        // Torso - egg shape\n        scale([1, 0.8, 1.2]) sphere(15, $fn=32);\n        \n        // Belly\n        translate([0, -11, -5]) \n        color(color_belly)\n        scale([1.2, 0.3, 1]) sphere(12, $fn=32);\n    }\n    \n    // Head\n    translate([0, 18, 12]) {\n        color(color_body) sphere(10, $fn=32);\n        \n        // Snout\n        translate([0, 8, -2]) {\n            color(color_body) rotate([0, -20, 0]) scale([0.8, 1, 1.2]) sphere(6, $fn=32);\n            // Nose\n            translate([0, 6, 0]) color(color_nose) sphere(2, $fn=16);\n        }\n        \n        // Ears\n        for(side = [-1, 1]) {\n            translate([side * 6, 2, 6]) {\n                color(color_body) rotate([30, side * 20, 0]) cylinder(8, 3, 2, $fn=16);\n            }\n        }\n        \n        // Eyes\n        for(side = [-1, 1]) {\n            translate([side * 5, 5, 3]) {\n                color(color_eye) sphere(2, $fn=16);\n            }\n        }\n    }\n    \n    // Arms\n    for(side = [-1, 1]) {\n        translate([side * 12, 8, 0]) {\n            rotate([0, 0, side * 45]) {\n                color(color_body) cylinder(10, 5, 4, $fn=16);\n                // Claws\n                translate([0, 10, 0]) {\n                    rotate([0, 90, 0]) {\n                        for(i = [-1, 0, 1]) {\n                            translate([i * 2, 0, 0]) {\n                                color(color_spike) rotate([0, 0, 45]) scale([0.5, 0.5, 2]) cylinder(6, 2, 0, $fn=8);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Legs\n    for(side = [-1, 1]) {\n        translate([side * 8, -8, -12]) {\n            color(color_body) cylinder(12, 5, 4, $fn=16);\n            // Feet\n            translate([0, -12, 2]) {\n                color(color_body) scale([1.5, 1, 0.5]) sphere(5, $fn=16);\n            }\n        }\n    }\n    \n    // Tail segments\n    translate([0, -15, 0]) {\n        for(i = [1:4]) {\n            color(color_body) \n            translate([0, -i * 8, -i * 2]) \n            scale([1 - i * 0.15, 1 - i * 0.15, 1]) \n            sphere(8 - i, $fn=32);\n        }\n    }\n    \n    // Back spikes\n    module spike() {\n        color(color_spike) \n        scale([0.8, 0.8, 1]) \n        cylinder(8, 3, 0, $fn=8);\n    }\n    \n    // Back spikes pattern\n    for(x = [-8:8:8]) {\n        for(z = [-5:5:10]) {\n            translate([x, 0, z]) {\n                rotate([30, 0, 0]) spike();\n            }\n        }\n    }\n    \n    // Head spikes\n    for(angle = [0:60:300]) {\n        translate([0, 18, 12]) {\n            rotate([0, 0, angle]) {\n                translate([10, 0, 0]) {\n                    rotate([45, 0, 0]) spike();\n                }\n            }\n        }\n    }\n    \n    // Tail spikes\n    for(i = [1:4]) {\n        for(angle = [0:90:270]) {\n            translate([0, -15 - i * 8, -i * 2]) {\n                rotate([0, 0, angle]) {\n                    translate([8 - i, 0, 0]) {\n                        rotate([30, 0, 0]) spike();\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Generate the model\nsandslash();",
    "renders": true
  },
  {
    "pokemon": "nidoran",
    "openscad_code": "// Nidoran (Female) - Realistic Style, Medium Complexity\n// 3D printable model with proper wall thickness and no overhangs\n\n// Main body color - purple\ncolor([0.5, 0.2, 0.8]) {\n    // Main body\n    union() {\n        // Torso - oval shape\n        translate([0, 0, 15])\n            scale([1.2, 1, 1])\n            sphere(12);\n\n        // Head\n        translate([0, 20, 25])\n            sphere(10);\n\n        // Snout extension\n        translate([0, 30, 25])\n            scale([0.8, 1.2, 0.8])\n            sphere(6);\n\n        // Body bottom\n        translate([0, 0, 8])\n            cylinder(h=7, r1=10, r2=8);\n\n        // Hind legs\n        module hind_leg(x) {\n            translate([x, -10, 0])\n                union() {\n                    // Upper leg\n                    translate([0, 0, 8])\n                        cylinder(h=12, r=4);\n                    // Lower leg\n                    translate([0, 0, 0])\n                        cylinder(h=8, r=3);\n                    // Foot\n                    translate([0, -2, 0])\n                        cube([8, 4, 2]);\n                }\n        }\n        hind_leg(-8);\n        hind_leg(8);\n\n        // Front legs\n        module front_leg(x) {\n            translate([x, 15, 0])\n                union() {\n                    // Upper leg\n                    translate([0, 0, 8])\n                        cylinder(h=10, r=3);\n                    // Lower leg\n                    translate([0, 0, 2])\n                        cylinder(h=6, r=2.5);\n                    // Paw\n                    translate([0, -1, 0])\n                        cube([6, 3, 2]);\n                }\n        }\n        front_leg(-7);\n        front_leg(7);\n    }\n}\n\n// Ears - purple with dark tips\ncolor([0.5, 0.2, 0.8]) {\n    module ear(x) {\n        translate([x, 25, 35]) {\n            rotate([0, 10, 0])\n                cylinder(h=15, r1=3, r2=1);\n            color([0.3, 0.1, 0.5])\n                translate([0, 0, 14])\n                    sphere(1.5);\n        }\n    }\n    ear(-6);\n    ear(6);\n}\n\n// Back spikes - dark purple\ncolor([0.3, 0.1, 0.5]) {\n    module back_spike(i) {\n        angle = i * 30;\n        translate([0, -5 - i*3, 20 - i*2]) {\n            rotate([0, 0, angle])\n                cylinder(h=8, r1=2, r2=0.5);\n        }\n    }\n    for(i = [0:2]) {\n        back_spike(i);\n    }\n}\n\n// Tail with spikes\ncolor([0.5, 0.2, 0.8]) {\n    translate([0, -20, 15]) {\n        rotate([0, 30, 0])\n            cylinder(h=20, r1=5, r2=0);\n    }\n}\n\ncolor([0.3, 0.1, 0.5]) {\n    module tail_spike(i) {\n        translate([0, -20 - i*3, 15 - i*2]) {\n            rotate([0, 30, 0])\n                cylinder(h=4, r1=1.5, r2=0.5);\n        }\n    }\n    for(i = [0:3]) {\n        tail_spike(i);\n    }\n}\n\n// Facial features\n// Eyes - dark\ncolor([0.1, 0.1, 0.1]) {\n    module eye(x) {\n        translate([x, 32, 27])\n            sphere(1.5);\n    }\n    eye(-3);\n    eye(3);\n}\n\n// Nose - dark\ncolor([0.2, 0.1, 0.3]) {\n    translate([0, 34, 25])\n        sphere(1);\n}\n\n// Whiskers - light\ncolor([0.7, 0.7, 0.7]) {\n    module whisker(x, angle) {\n        translate([0, 30, 24])\n            rotate([0, 0, angle])\n                translate([x, 0, 0])\n                    cylinder(h=8, r=0.5);\n    }\n    whisker(5, 30);\n    whisker(5, -30);\n    whisker(-5, 150);\n    whisker(-5, 210);\n}\n\n// Belly marking - cream\ncolor([0.9, 0.85, 0.7]) {\n    translate([0, 5, 10])\n        scale([1.2, 1.5, 0.5])\n        sphere(8);\n}",
    "renders": true
  },
  {
    "pokemon": "nidorina",
    "openscad_code": "// Nidorina - Medium Complexity Realistic Style\n// Overall dimensions: ~80mm height\n\nmodule nidorina() {\n    // Main body - rounded torso\n    color(\"mediumvioletred\") {\n        union() {\n            // Torso\n            translate([0, 0, 25]) {\n                scale([1.2, 1, 1.3]) sphere(d=35, $fn=30);\n            }\n            \n            // Belly\n            translate([0, 8, 20]) {\n                scale([0.8, 0.6, 1]) sphere(d=30, $fn=20);\n            }\n        }\n    }\n    \n    // Head\n    color(\"mediumvioletred\") {\n        translate([0, -15, 45]) {\n            sphere(d=30, $fn=25);\n        }\n    }\n    \n    // Snout\n    color(\"mediumvioletred\") {\n        translate([0, -25, 42]) {\n            rotate([30, 0, 0]) {\n                scale([0.6, 1.2, 0.6]) cylinder(h=15, d1=20, d2=15, $fn=20);\n            }\n        }\n    }\n    \n    // Ears with spikes\n    color(\"mediumvioletred\") {\n        // Left ear\n        translate([-15, -10, 55]) {\n            rotate([0, -20, -30]) {\n                cylinder(h=25, d1=12, d2=8, $fn=8);\n            }\n            // Ear spike\n            translate([0, 0, 25]) {\n                rotate([0, 0, 0]) {\n                    cylinder(h=8, d1=6, d2=0, $fn=6);\n                }\n            }\n        }\n        \n        // Right ear\n        translate([15, -10, 55]) {\n            rotate([0, -20, 30]) {\n                cylinder(h=25, d1=12, d2=8, $fn=8);\n            }\n            // Ear spike\n            translate([0, 0, 25]) {\n                rotate([0, 0, 0]) {\n                    cylinder(h=8, d1=6, d2=0, $fn=6);\n                }\n            }\n        }\n    }\n    \n    // Back spikes\n    color(\"darkgreen\") {\n        for(i = [0:2]) {\n            translate([0, 5 + i*8, 35 + i*3]) {\n                rotate([0, 0, 0]) {\n                    cylinder(h=10 + i*2, d1=8, d2=0, $fn=6);\n                }\n            }\n        }\n    }\n    \n    // Legs\n    color(\"mediumvioletred\") {\n        // Front left leg\n        translate([-10, -5, 15]) {\n            rotate([0, 10, 0]) {\n                cylinder(h=20, d1=12, d2=10, $fn=12);\n            }\n            // Foot\n            translate([0, 0, -8]) {\n                scale([1.2, 1.5, 0.5]) sphere(d=15, $fn=12);\n            }\n        }\n        \n        // Front right leg\n        translate([10, -5, 15]) {\n            rotate([0, -10, 0]) {\n                cylinder(h=20, d1=12, d2=10, $fn=12);\n            }\n            // Foot\n            translate([0, 0, -8]) {\n                scale([1.2, 1.5, 0.5]) sphere(d=15, $fn=12);\n            }\n        }\n        \n        // Back left leg\n        translate([-12, 12, 15]) {\n            rotate([0, -10, 0]) {\n                cylinder(h=22, d1=14, d2=12, $fn=12);\n            }\n            // Foot\n            translate([0, 0, -8]) {\n                scale([1.3, 1.6, 0.5]) sphere(d=16, $fn=12);\n            }\n        }\n        \n        // Back right leg\n        translate([12, 12, 15]) {\n            rotate([0, 10, 0]) {\n                cylinder(h=22, d1=14, d2=12, $fn=12);\n            }\n            // Foot\n            translate([0, 0, -8]) {\n                scale([1.3, 1.6, 0.5]) sphere(d=16, $fn=12);\n            }\n        }\n    }\n    \n    // Tail\n    color(\"mediumvioletred\") {\n        translate([0, 20, 30]) {\n            rotate([0, 0, 0]) {\n                scale([1, 1.5, 1]) sphere(d=15, $fn=20);\n            }\n            // Tail spikes\n            for(i = [0:1]) {\n                translate([0, 10 + i*8, -2 - i*2]) {\n                    rotate([0, 0, 0]) {\n                        cylinder(h=8 + i*2, d1=6, d2=0, $fn=6);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Eyes\n    color(\"blue\") {\n        // Left eye\n        translate([-8, -20, 47]) {\n            sphere(d=6, $fn=15);\n        }\n        \n        // Right eye\n        translate([8, -20, 47]) {\n            sphere(d=6, $fn=15);\n        }\n    }\n    \n    // Nose\n    color(\"darkgreen\") {\n        translate([0, -28, 42]) {\n            rotate([90, 0, 0]) {\n                cylinder(h=3, d1=8, d2=0, $fn=6);\n            }\n        }\n    }\n    \n    // Teeth\n    color(\"white\") {\n        // Left fang\n        translate([-3, -26, 40]) {\n            rotate([90, 0, 0]) {\n                cylinder(h=5, d1=2, d2=0, $fn=6);\n            }\n        }\n        \n        // Right fang\n        translate([3, -26, 40]) {\n            rotate([90, 0, 0]) {\n                cylinder(h=5, d1=2, d2=0, $fn=6);\n            }\n        }\n    }\n    \n    // Belly spots\n    color(\"lightblue\") {\n        translate([0, 12, 20]) {\n            scale([1.5, 1, 0.1]) sphere(d=25, $fn=20);\n        }\n    }\n}\n\nnidorina();",
    "renders": true
  },
  {
    "pokemon": "nidoqueen",
    "openscad_code": "// Nidoqueen - Medium Complexity Realistic Style\n// Scaled for 3D printing (80mm tall)\n\ncolor([0.3,0.4,0.2]) \nunion() {\n    // Body - main torso\n    translate([0,0,25])\n    scale([1.2,1,1.5])\n    sphere(15, $fn=32);\n    \n    // Lower body\n    translate([0,0,12])\n    scale([1.1,0.9,1.3])\n    sphere(12, $fn=32);\n    \n    // Chest plate\n    translate([0,-10,22])\n    rotate([0,10,0])\n    scale([1.3,0.3,1.2])\n    cube([20,8,15], center=true);\n    \n    // Head\n    translate([0,0,42])\n    scale([0.9,0.9,1.1])\n    sphere(12, $fn=32);\n    \n    // Snout\n    translate([0,-10,42])\n    scale([0.7,1.2,0.8])\n    rotate([10,0,0])\n    cylinder(8, 6, 4, $fn=16);\n    \n    // Ears\n    module ear(x) {\n        translate([x,0,48])\n        rotate([0,x*5,0])\n        scale([0.3,1,2])\n        sphere(6, $fn=16);\n    }\n    ear(8);\n    ear(-8);\n    \n    // Horns\n    module horn(x) {\n        translate([x,0,52])\n        rotate([0,x*10,-10])\n        cylinder(10, 2, 1, $fn=8);\n    }\n    horn(5);\n    horn(-5);\n    \n    // Arms\n    module arm(x) {\n        translate([x*10,5,30])\n        rotate([0,x*30,0])\n        scale([0.8,0.8,1.2])\n        sphere(6, $fn=16);\n        \n        translate([x*15,5,25])\n        rotate([0,x*30,90])\n        cylinder(12, 3, 2.5, $fn=12);\n    }\n    arm(1);\n    arm(-1);\n    \n    // Legs\n    module leg(x) {\n        translate([x*8,0,8])\n        scale([1,1,1.5])\n        sphere(8, $fn=16);\n        \n        translate([x*9,0,0])\n        rotate([0,0,0])\n        cylinder(10, 6, 8, $fn=12);\n    }\n    leg(1);\n    leg(-1);\n    \n    // Tail segments\n    color([0.4,0.5,0.3])\n    for(i=[0:3]) {\n        translate([0,15+i*5,20-i*3])\n        scale([1-i*0.1,1-i*0.1,1])\n        rotate([0,-10-i*5,0])\n        sphere(6-i, $fn=16);\n    }\n    \n    // Tail spikes\n    color([0.6,0.7,0.5])\n    for(i=[1:3]) {\n        translate([0,15+i*5,20-i*3+3])\n        rotate([0,0,0])\n        scale([0.3,1.5,0.3])\n        cylinder(4, 2, 0.5, $fn=8);\n    }\n    \n    // Back spikes\n    for(i=[-1:1]) {\n        translate([i*6,5,35+i*2])\n        rotate([0,10,0])\n        scale([0.5,0.5,1.5])\n        cylinder(8, 3, 1, $fn=8);\n    }\n    \n    // Eyes\n    color([0.1,0.1,0.3])\n    translate([4,-12,44])\n    scale([1,1.2,0.5])\n    sphere(2, $fn=16);\n    translate([-4,-12,44])\n    scale([1,1.2,0.5])\n    sphere(2, $fn=16);\n    \n    // Teeth\n    color([0.9,0.9,0.8])\n    for(i=[-1:1]) {\n        translate([i*2,-17,40])\n        scale([0.5,0.5,1])\n        cylinder(2, 1, 0.5, $fn=8);\n    }\n    \n    // Belly pattern\n    color([0.5,0.6,0.4])\n    translate([0,-5,20])\n    scale([0.8,0.3,1.2])\n    sphere(12, $fn=32);\n}",
    "renders": true
  },
  {
    "pokemon": "nidorino",
    "openscad_code": "// Nidorino - Realistic Medium Complexity\n// Scaled to 80mm height for 3D printing\n\n$fn = 32;\n\n// Main colors\ncolor_purple = [0.5, 0.2, 0.7];\ncolor_dark_purple = [0.3, 0.1, 0.5];\ncolor_white = [0.9, 0.9, 0.9];\ncolor_teeth = [0.95, 0.95, 0.85];\ncolor_eye = [0.1, 0.1, 0.8];\n\nmodule body() {\n    color(color_purple)\n    union() {\n        // Main torso\n        translate([0, 0, 25])\n            scale([1.2, 0.8, 1.3])\n            sphere(20);\n        \n        // Belly\n        translate([0, -15, 20])\n            scale([0.8, 0.3, 1])\n            sphere(18);\n    }\n}\n\nmodule head() {\n    color(color_purple)\n    union() {\n        // Main head shape\n        translate([0, 30, 45])\n            scale([1, 0.8, 1.1])\n            sphere(15);\n        \n        // Snout\n        translate([0, 45, 45])\n            scale([0.6, 1.2, 0.6])\n            sphere(12);\n    }\n}\n\nmodule ears() {\n    color(color_purple)\n    union() {\n        // Left ear\n        translate([-12, 25, 58])\n            rotate([0, -15, -20])\n            scale([0.3, 0.3, 2.5])\n            cylinder(15, 8, 3);\n        \n        // Right ear\n        translate([12, 25, 58])\n            rotate([0, -15, 20])\n            scale([0.3, 0.3, 2.5])\n            cylinder(15, 8, 3);\n    }\n}\n\nmodule horn() {\n    color(color_purple)\n    union() {\n        // Main horn\n        translate([0, 35, 60])\n            rotate([0, 0, 0])\n            cylinder(20, 2, 8);\n        \n        // Horn ridges\n        for(i = [0:3]) {\n            translate([0, 35, 45 + i*5])\n                rotate([0, 0, 0])\n                cylinder(2, 5 + i, 4 + i);\n        }\n    }\n}\n\nmodule spikes() {\n    color(color_dark_purple)\n    union() {\n        // Back spikes\n        for(i = [-1:1]) {\n            translate([i*10, 0, 40 + abs(i)*5])\n                rotate([0, -30, 0])\n                scale([0.5, 0.5, 1.5])\n                cylinder(15, 3, 1);\n        }\n        \n        // Head spikes\n        for(i = [-2:2]) {\n            if(i != 0) {\n                translate([i*5, 35, 55])\n                    rotate([0, -45, 0])\n                    cylinder(8, 2, 1);\n            }\n        }\n    }\n}\n\nmodule legs() {\n    color(color_purple)\n    union() {\n        // Front legs\n        translate([-15, 15, 10])\n            rotate([0, 0, 15])\n            scale([0.8, 0.8, 1])\n            cylinder(25, 6, 5);\n        \n        translate([15, 15, 10])\n            rotate([0, 0, -15])\n            scale([0.8, 0.8, 1])\n            cylinder(25, 6, 5);\n        \n        // Back legs\n        translate([-12, -15, 10])\n            rotate([0, 0, -10])\n            scale([1, 1, 1.2])\n            cylinder(30, 7, 6);\n        \n        translate([12, -15, 10])\n            rotate([0, 0, 10])\n            scale([1, 1, 1.2])\n            cylinder(30, 7, 6);\n    }\n}\n\nmodule tail() {\n    color(color_purple)\n    union() {\n        // Main tail\n        translate([0, -35, 25])\n            rotate([0, 0, 0])\n            scale([0.8, 1, 0.8])\n            cylinder(30, 10, 5);\n        \n        // Tail spikes\n        color(color_dark_purple)\n        for(i = [0:3]) {\n            translate([0, -45 - i*8, 20 - i*3])\n                rotate([0, 30, 0])\n                cylinder(8, 2, 1);\n        }\n    }\n}\n\nmodule face() {\n    union() {\n        // Eyes\n        color(color_eye)\n        translate([-6, 40, 48])\n            sphere(3);\n        \n        color(color_eye)\n        translate([6, 40, 48])\n            sphere(3);\n        \n        // Eye whites\n        color(color_white)\n        translate([-6, 42, 50])\n            sphere(1.5);\n        \n        color(color_white)\n        translate([6, 42, 50])\n            sphere(1.5);\n        \n        // Teeth\n        color(color_teeth)\n        translate([-3, 52, 42])\n            rotate([0, 0, -15])\n            scale([0.5, 1, 0.3])\n            cube([2, 4, 2]);\n        \n        color(color_teeth)\n        translate([3, 52, 42])\n            rotate([0, 0, 15])\n            scale([0.5, 1, 0.3])\n            cube([2, 4, 2]);\n        \n        // Nose\n        color(color_dark_purple)\n        translate([0, 50, 45])\n            sphere(2);\n    }\n}\n\n// Assemble the model\nscale(0.8)  // Scale to 80mm height\nunion() {\n    body();\n    head();\n    ears();\n    horn();\n    spikes();\n    legs();\n    tail();\n    face();\n}",
    "renders": true
  },
  {
    "pokemon": "nidoking",
    "openscad_code": "// Nidoking - Medium Complexity Realistic Style\n\n// Color definitions\ncolor_body = [0.4, 0.2, 0.6];      // Purple body\ncolor_belly = [0.9, 0.9, 0.8];    // Light gray belly\ncolor_spikes = [0.95, 0.95, 0.9];  // Off-white spikes\ncolor_ears = [0.95, 0.3, 0.3];    // Red inner ears\ncolor_eyes = [0.1, 0.1, 0.1];     // Black eyes\ncolor_teeth = [0.95, 0.95, 0.9];  // White teeth\ncolor_horns = [0.85, 0.85, 0.85]; // Gray horns\n\n// Main body with belly\nmodule body() {\n    union() {\n        // Main torso\n        color(color_body)\n        translate([0, 0, 25])\n        scale([1.2, 0.8, 1.5])\n        sphere(20);\n        \n        // Belly\n        color(color_belly)\n        translate([0, -15, 15])\n        scale([0.9, 0.3, 1.2])\n        sphere(18);\n        \n        // Chest plate\n        color(color_spikes)\n        translate([0, -14, 35])\n        rotate([90, 0, 0])\n        cylinder(h=2, r1=15, r2=10);\n    }\n}\n\n// Head with horns and ears\nmodule head() {\n    union() {\n        // Main head\n        color(color_body)\n        translate([0, 20, 45])\n        scale([1, 0.8, 1.1])\n        sphere(15);\n        \n        // Snout\n        color(color_body)\n        translate([0, 30, 42])\n        rotate([-30, 0, 0])\n        cylinder(h=15, r1=12, r2=8);\n        \n        // Nose\n        color(color_body)\n        translate([0, 38, 38])\n        sphere(5);\n        \n        // Horns\n        color(color_horns)\n        translate([-8, 20, 58])\n        rotate([0, -20, -20])\n        cylinder(h=15, r1=4, r2=2);\n        \n        translate([8, 20, 58])\n        rotate([0, -20, 20])\n        cylinder(h=15, r1=4, r2=2);\n        \n        // Ears\n        color(color_body)\n        translate([-12, 15, 52])\n        rotate([0, 0, -30])\n        scale([0.8, 0.3, 1.5])\n        sphere(6);\n        \n        translate([12, 15, 52])\n        rotate([0, 0, 30])\n        scale([0.8, 0.3, 1.5])\n        sphere(6);\n        \n        // Inner ears\n        color(color_ears)\n        translate([-12, 16, 52])\n        rotate([0, 0, -30])\n        scale([0.5, 0.2, 1.2])\n        sphere(6);\n        \n        translate([12, 16, 52])\n        rotate([0, 0, 30])\n        scale([0.5, 0.2, 1.2])\n        sphere(6);\n        \n        // Eyes\n        color(color_eyes)\n        translate([-6, 25, 50])\n        sphere(2);\n        translate([6, 25, 50])\n        sphere(2);\n        \n        // Teeth\n        color(color_teeth)\n        translate([-3, 38, 38])\n        rotate([0, 90, 0])\n        cylinder(h=3, r1=1.5, r2=0);\n        translate([3, 38, 38])\n        rotate([0, 90, 0])\n        cylinder(h=3, r1=1.5, r2=0);\n    }\n}\n\n// Arms with spikes\nmodule arms() {\n    union() {\n        // Left arm\n        color(color_body)\n        translate([-25, 5, 35])\n        rotate([0, 0, 30])\n        cylinder(h=20, r1=6, r2=5);\n        \n        color(color_body)\n        translate([-35, 0, 25])\n        rotate([0, 0, 45])\n        scale([1, 0.8, 0.8])\n        sphere(8);\n        \n        // Right arm\n        color(color_body)\n        translate([25, 5, 35])\n        rotate([0, 0, -30])\n        cylinder(h=20, r1=6, r2=5);\n        \n        color(color_body)\n        translate([35, 0, 25])\n        rotate([0, 0, -45])\n        scale([1, 0.8, 0.8])\n        sphere(8);\n    }\n}\n\n// Legs with claws\nmodule legs() {\n    union() {\n        // Left leg\n        color(color_body)\n        translate([-15, -10, 0])\n        rotate([0, 10, 0])\n        cylinder(h=25, r1=7, r2=6);\n        \n        color(color_body)\n        translate([-15, -10, -10])\n        scale([1.2, 1, 0.8])\n        sphere(8);\n        \n        // Right leg\n        color(color_body)\n        translate([15, -10, 0])\n        rotate([0, -10, 0])\n        cylinder(h=25, r1=7, r2=6);\n        \n        color(color_body)\n        translate([15, -10, -10])\n        scale([1.2, 1, 0.8])\n        sphere(8);\n    }\n}\n\n// Tail with spikes\nmodule tail() {\n    union() {\n        // Tail segments\n        for(i = [0:3]) {\n            color(color_body)\n            translate([0, -20 - i*10, 25 - i*5])\n            rotate([0, 0, i*5])\n            scale([1 - i*0.15, 1 - i*0.15, 1 - i*0.1])\n            sphere(12 - i*2);\n        }\n        \n        // Tail spikes\n        for(i = [0:2]) {\n            color(color_spikes)\n            translate([0, -25 - i*12, 30 - i*5])\n            rotate([0, 0, i*10])\n            scale([0.5, 0.5, 1.5])\n            sphere(5);\n        }\n    }\n}\n\n// Back spikes\nmodule back_spikes() {\n    for(i = [0:4]) {\n        color(color_spikes)\n        translate([0, -5 - i*5, 35 + i*3])\n        rotate([0, 0, 0])\n        scale([0.6, 0.6, 1.2])\n        cylinder(h=8, r1=3, r2=1);\n    }\n}\n\n// Assemble the complete Nidoking\nbody();\nhead();\narms();\nlegs();\ntail();\nback_spikes();",
    "renders": true
  },
  {
    "pokemon": "clefairy",
    "openscad_code": "// Clefairy Pokemon - Realistic Style, Medium Complexity\n// Approx 80mm tall, 3D-printable\n\n// Colors\npink = [1, 0.8, 0.9];\ndark_pink = [0.8, 0.6, 0.7];\nwhite = [1, 1, 1];\nblack = [0, 0, 0];\nred = [0.8, 0.2, 0.2];\n\n// Main body\nmodule body() {\n    color(pink) {\n        // Torso\n        translate([0, 0, 30])\n            scale([1.2, 1, 1.3])\n            sphere(20);\n        \n        // Belly\n        color(white)\n        translate([0, -19, 30])\n            scale([1.1, 0.5, 1.2])\n            sphere(15);\n    }\n}\n\n// Head\nmodule head() {\n    color(pink) {\n        // Main head sphere\n        translate([0, 0, 55])\n            sphere(22);\n        \n        // Snout\n        translate([0, -20, 55])\n            scale([0.8, 0.6, 0.7])\n            sphere(15);\n    }\n    \n    // Eyes\n    color(white) {\n        translate([-10, -5, 60])\n            sphere(6);\n        translate([10, -5, 60])\n            sphere(6);\n    }\n    \n    // Eye pupils\n    color(black) {\n        translate([-10, -6, 63])\n            sphere(3);\n        translate([10, -6, 63])\n            sphere(3);\n    }\n    \n    // Mouth\n    color(dark_pink)\n    translate([0, -20, 50])\n        rotate([0, 0, 0])\n        cylinder(h=1, r1=3, r2=1, $fn=20);\n}\n\n// Ears\nmodule ears() {\n    color(pink) {\n        // Left ear\n        translate([-15, 0, 70])\n            rotate([0, 0, -20])\n            scale([0.3, 2, 0.3])\n            cylinder(h=25, r=5, $fn=20);\n        \n        // Right ear\n        translate([15, 0, 70])\n            rotate([0, 0, 20])\n            scale([0.3, 2, 0.3])\n            cylinder(h=25, r=5, $fn=20);\n        \n        // Ear tips\n        color(dark_pink) {\n            translate([-15, 0, 95])\n                rotate([0, 0, -20])\n                scale([0.3, 2, 0.3])\n                sphere(3);\n            translate([15, 0, 95])\n                rotate([0, 0, 20])\n                scale([0.3, 2, 0.3])\n                sphere(3);\n        }\n    }\n}\n\n// Wings\nmodule wings() {\n    color(pink) {\n        // Left wing\n        translate([-25, 5, 50])\n            rotate([0, 0, -30])\n            scale([1.5, 0.2, 1])\n            sphere(10);\n        \n        // Right wing\n        translate([25, 5, 50])\n            rotate([0, 0, 30])\n            scale([1.5, 0.2, 1])\n            sphere(10);\n    }\n}\n\n// Arms\nmodule arms() {\n    color(pink) {\n        // Left arm\n        translate([-25, 0, 35])\n            rotate([0, 0, -120])\n            cylinder(h=20, r=5, $fn=20);\n        \n        // Right arm\n        translate([25, 0, 35])\n            rotate([0, 0, 120])\n            cylinder(h=20, r=5, $fn=20);\n        \n        // Hands\n        color(white) {\n            translate([-35, 0, 25])\n                sphere(6);\n            translate([35, 0, 25])\n                sphere(6);\n        }\n    }\n}\n\n// Legs\nmodule legs() {\n    color(pink) {\n        // Left leg\n        translate([-10, 0, 15])\n            cylinder(h=15, r=7, $fn=20);\n        \n        // Right leg\n        translate([10, 0, 15])\n            cylinder(h=15, r=7, $fn=20);\n        \n        // Feet\n        color(white) {\n            translate([-10, 0, 0])\n                scale([1.2, 1.5, 0.5])\n                sphere(8);\n            translate([10, 0, 0])\n                scale([1.2, 1.5, 0.5])\n                sphere(8);\n        }\n    }\n}\n\n// Tail/curl\nmodule tail() {\n    color(pink) {\n        // Spiral curl\n    for (i = [0:5:180]) {\n        translate([0, 25 * cos(i), 10 + 15 * sin(i)])\n            sphere(4);\n    }\n    }\n}\n\n// Main assembly\nunion() {\n    body();\n    head();\n    ears();\n    wings();\n    arms();\n    legs();\n    tail();\n}",
    "renders": true
  },
  {
    "pokemon": "clefable",
    "openscad_code": "// Clefable Pokemon - Realistic Style, Medium Complexity\n// Size: ~80mm height\n\n$fa = 2;\n$fs = 0.5;\n\n// Main colors\ncolor_body = [0.95, 0.85, 0.85];\ncolor_accents = [0.4, 0.2, 0.8];\ncolor_details = [0.1, 0.1, 0.1];\ncolor_wings = [0.9, 0.9, 0.95];\n\n// Main body\nmodule body() {\n    color(color_body)\n    union() {\n        // Torso - egg shaped\n        scale([1, 1.2, 1.3])\n        sphere(d=40);\n        \n        // Belly padding\n        translate([0, -12, -5])\n        scale([0.8, 0.7, 0.4])\n        sphere(d=35);\n    }\n}\n\n// Head with characteristic curl\nmodule head() {\n    color(color_body)\n    union() {\n        // Main head sphere\n        translate([0, 25, 15])\n        sphere(d=35);\n        \n        // Curl on head\n        rotate([0, 0, -30])\n        translate([-10, 28, 25])\n        rotate([90, 0, 0])\n        cylinder(h=15, d1=12, d2=8);\n        \n        // Curl tip\n        translate([-12, 28, 32])\n        sphere(d=8);\n    }\n}\n\n// Ears with pointed tips\nmodule ears() {\n    color(color_body)\n    union() {\n        // Left ear\n        translate([-15, 30, 25])\n        rotate([0, 30, -20])\n        cylinder(h=25, d1=8, d2=5);\n        translate([-15, 30, 40])\n        sphere(d=5);\n        \n        // Right ear\n        translate([15, 30, 25])\n        rotate([0, 30, 20])\n        cylinder(h=25, d1=8, d2=5);\n        translate([15, 30, 40])\n        sphere(d=5);\n        \n        // Ear tips in accent color\n        color(color_accents) {\n            translate([-15, 30, 42])\n            sphere(d=7);\n            translate([15, 30, 42])\n            sphere(d=7);\n        }\n    }\n}\n\n// Eyes with detailed pupils\nmodule eyes() {\n    union() {\n        // Eye whites\n        color([1, 1, 1])\n        union() {\n            translate([-8, 22, 20])\n            sphere(d=8);\n            translate([8, 22, 20])\n            sphere(d=8);\n        }\n        \n        // Pupils\n        color(color_details)\n        union() {\n            translate([-8, 22, 24])\n            sphere(d=4);\n            translate([8, 22, 24])\n            sphere(d=4);\n        }\n        \n        // Eye shine\n        color([1, 1, 1])\n        union() {\n            translate([-7, 23, 26])\n            sphere(d=2);\n            translate([9, 23, 26])\n            sphere(d=2);\n        }\n    }\n}\n\n// Mouth\nmodule mouth() {\n    color(color_details)\n    translate([0, 15, 15])\n    rotate([90, 0, 0])\n    cylinder(h=0.5, d=8);\n}\n\n// Wings\nmodule wings() {\n    color(color_wings)\n    union() {\n        // Left wing\n        translate([-25, 0, 10])\n        rotate([0, 0, 20])\n        scale([1, 0.2, 1.5])\n        sphere(d=20);\n        \n        // Right wing\n        translate([25, 0, 10])\n        rotate([0, 0, -20])\n        scale([1, 0.2, 1.5])\n        sphere(d=20);\n        \n        // Wing details\n        color(color_accents) {\n            for(i = [0:2]) {\n                translate([-25 - i*3, 0, 15 + i*5])\n                rotate([0, 0, 20])\n                sphere(d=3);\n                translate([25 + i*3, 0, 15 + i*5])\n                rotate([0, 0, -20])\n                sphere(d=3);\n            }\n        }\n    }\n}\n\n// Tail with curl\nmodule tail() {\n    color(color_body)\n    union() {\n        // Tail base\n        translate([0, -20, -5])\n        rotate([0, 20, 0])\n        cylinder(h=15, d1=8, d2=5);\n        \n        // Tail curl\n        translate([0, -30, -10])\n        rotate([0, 20, 0])\n        sphere(d=8);\n        translate([0, -35, -12])\n        sphere(d=6);\n    }\n}\n\n// Feet\nmodule feet() {\n    color(color_body)\n    union() {\n        // Left foot\n        translate([-10, -15, -15])\n        scale([1, 1.5, 0.5])\n        sphere(d=10);\n        \n        // Right foot\n        translate([10, -15, -15])\n        scale([1, 1.5, 0.5])\n        sphere(d=10);\n        \n        // Toes\n        for(i = [-1, 0, 1]) {\n            color(color_accents) {\n                translate([-10 + i*3, -15, -12])\n                sphere(d=3);\n                translate([10 + i*3, -15, -12])\n                sphere(d=3);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    ears();\n    eyes();\n    mouth();\n    wings();\n    tail();\n    feet();\n}",
    "renders": true
  },
  {
    "pokemon": "vulpix",
    "openscad_code": "// Vulpix - realistic medium complexity OpenSCAD model\n// Dimensions: ~80mm long, ~60mm tall, ~50mm wide\n// Colors: burnt-orange body, cream belly/chest, light blue eyes, dark brown nose\n\ncolor([0.9,0.3,0.1]) union() {\n    // Body\n    translate([0,0,25]) scale([1,0.8,1.2]) sphere(15,$fn=32);\n\n    // Head\n    translate([0,17,40]) scale([0.9,0.9,0.8]) sphere(12,$fn=32);\n\n    // Snout\n    translate([0,27,38]) scale([0.5,0.6,0.4]) rotate([0,10,0]) sphere(8,$fn=24);\n\n    // Ears (6 small spikes)\n    for(i=[-30,-10,10,30,50,70]) {\n        rotate([0,i,0]) translate([0,12,52]) rotate([45,0,0]) \n            scale([0.4,0.4,1]) cylinder(h=12,r1=2,r2=0,$fn=6);\n    }\n\n    // Legs\n    module leg(x,y,angle) {\n        translate([x,y,15]) rotate([0,0,angle]) {\n            cylinder(h=20,r1=4,r2=2,$fn=12);\n            translate([0,0,20]) sphere(2,$fn=12);\n        }\n    }\n    leg(-10,-8,0);\n    leg(10,-8,0);\n    leg(-8,-12,-5);\n    leg(8,-12,5);\n\n    // 6 tails\n    module tail(angle,scale) {\n        rotate([0,0,angle]) translate([-20*sin(angle),-20*cos(angle),15]) {\n            scale([scale,scale,scale]) {\n                rotate([10,0,0]) cylinder(h=40,r1=6,r2=2,$fn=8);\n                translate([0,0,40]) rotate([20,0,0]) cylinder(h=30,r1=4,r2=1,$fn=8);\n                translate([0,0,70]) rotate([30,0,0]) cylinder(h=20,r1=2,r2=0,$fn=8);\n            }\n        }\n    }\n    for(i=[0:60:300]) tail(i,1-i/600);\n}\n\n// Cream belly/chest\ncolor([0.95,0.85,0.7]) union() {\n    translate([0,5,15]) scale([0.7,0.6,0.8]) sphere(12,$fn=32);\n    translate([0,12,20]) scale([0.6,0.5,0.6]) sphere(10,$fn=32);\n}\n\n// Eyes\ncolor([0.5,0.7,0.9]) union() {\n    translate([-4,22,43]) rotate([0,-20,0]) scale([1,1.2,0.5]) sphere(3,$fn=16);\n    translate([4,22,43]) rotate([0,20,0]) scale([1,1.2,0.5]) sphere(3,$fn=16);\n}\n\n// Eye pupils\ncolor([0.1,0.1,0.1]) union() {\n    translate([-4,22,44]) rotate([0,-20,0]) scale([0.4,0.8,0.2]) sphere(1,$fn=8);\n    translate([4,22,44]) rotate([0,20,0]) scale([0.4,0.8,0.2]) sphere(1,$fn=8);\n}\n\n// Nose\ncolor([0.2,0.1,0.05]) \n    translate([0,29,38]) scale([1,0.5,0.3]) sphere(2,$fn=12);\n\n// Mouth\ncolor([0.3,0.1,0.1]) \n    translate([0,28,35]) rotate([90,0,0]) cylinder(h=0.5,r1=2,r2=1,$fn=16);\n\n// Tail tips (cream colored)\ncolor([0.95,0.85,0.7]) \n    for(i=[0:60:300]) {\n        rotate([0,0,i]) translate([-20*sin(i),-20*cos(i),15]) {\n            rotate([10,0,0]) translate([0,0,65]) scale([0.3,0.3,0.3]) sphere(4,$fn=8);\n        }\n    }",
    "renders": true
  },
  {
    "pokemon": "ninetales",
    "openscad_code": "// Ninetales Pokemon - Realistic Style\n// Medium complexity OpenSCAD model\n\nmodule ninetales() {\n    color(\"gold\") {\n        // Main body\n        union() {\n            // Torso\n            translate([0, 0, 20])\n                scale([1.2, 0.8, 1])\n                sphere(d=40, $fn=32);\n            \n            // Chest\n            translate([0, -15, 15])\n                scale([0.9, 0.6, 0.8])\n                sphere(d=35, $fn=32);\n            \n            // Neck\n            translate([0, 0, 45])\n                cylinder(h=15, d1=20, d2=15, $fn=16);\n            \n            // Head\n            translate([0, 0, 55])\n                sphere(d=25, $fn=32);\n        }\n        \n        // Legs\n        for(i = [-1, 1]) {\n            translate([i*12, -8, 10])\n                rotate([0, i*10, 0])\n                cylinder(h=20, d1=12, d2=8, $fn=16);\n            \n            // Paws\n            translate([i*12, -8, 0])\n                sphere(d=10, $fn=16);\n        }\n        \n        // Front legs\n        for(i = [-1, 1]) {\n            translate([i*10, 15, 15])\n                rotate([0, -i*10, 0])\n                cylinder(h=18, d1=10, d2=8, $fn=16);\n            \n            // Front paws\n            translate([i*10, 15, 0])\n                sphere(d=9, $fn=16);\n        }\n    }\n    \n    // Nine tails\n    color(\"goldenrod\") {\n        for(i = [0:8]) {\n            rotate([0, 0, i*40])\n            translate([35, 0, 25])\n                rotate([0, -20, 0])\n                tail();\n        }\n    }\n    \n    // Ears\n    color(\"gold\") {\n        for(i = [-1, 1]) {\n            translate([i*8, 0, 70])\n                rotate([0, i*20, 0])\n                scale([0.8, 1, 1.5])\n                cylinder(h1=12, h2=8, r1=6, r2=3, $fn=8);\n        }\n    }\n    \n    // Facial features\n    color(\"black\") {\n        // Eyes\n        for(i = [-1, 1]) {\n            translate([i*7, 12, 60])\n                sphere(d=4, $fn=16);\n        }\n        \n        // Nose\n        translate([0, 15, 58])\n            sphere(d=3, $fn=16);\n    }\n    \n    // Chest crest\n    color(\"darkgoldenrod\") {\n        translate([0, -12, 25])\n            difference() {\n                sphere(d=10, $fn=32);\n                translate([0, 0, -2])\n                    cube([15, 15, 5], center=true);\n            }\n    }\n    \n    // Leg markings\n    color(\"darkgoldenrod\") {\n        for(i = [-1, 1]) {\n            translate([i*12, -8, 15])\n                cylinder(h=8, d=14, $fn=16);\n            \n            translate([i*10, 15, 15])\n                cylinder(h=8, d=12, $fn=16);\n        }\n    }\n}\n\nmodule tail() {\n    // Main tail segment\n    difference() {\n        union() {\n            // Base of tail\n            cylinder(h=30, d1=12, d2=8, $fn=16);\n            translate([0, 0, 30])\n                sphere(d=8, $fn=16);\n            \n            // Curl segment\n            translate([0, 8, 35])\n                rotate([90, 0, 0])\n                torus(10, 3, 90, 180);\n            \n            // Tip\n            translate([0, 18, 45])\n                sphere(d=6, $fn=16);\n        }\n        \n        // Hollow out tail\n        translate([0, 0, -5])\n            cylinder(h=40, d=6, $fn=16);\n    }\n}\n\nmodule torus(r1, r2, a1, a2) {\n    rotate_extrude(angle=a2-a1, $fn=32)\n        translate([r1, 0, 0])\n            circle(r=r2, $fn=16);\n}\n\n// Scale for 3D printing\nscale(0.8) ninetales();",
    "renders": true
  },
  {
    "pokemon": "jigglypuff",
    "openscad_code": "// Realistic Jigglypuff OpenSCAD Model\n// Medium complexity, 3D-printable\n\n$fn = 64;\n\nmodule jigglypuff() {\n    // Main body - sphere with slight squash\n    color(\"lightpink\") {\n        translate([0, 0, 30]) scale([1, 1, 0.9]) sphere(d=60);\n    }\n    \n    // Belly patch\n    color(\"pink\") {\n        translate([0, 0, 10]) scale([0.8, 0.7, 0.3]) sphere(d=60);\n    }\n    \n    // Ears\n    module ear(x) {\n        translate([x, 0, 55]) {\n            rotate([0, -20 * x/30, 0]) {\n                // Ear base\n                color(\"lightpink\") cylinder(h=20, d1=15, d2=12);\n                translate([0, 0, 20]) rotate([10, 0, 0]) {\n                    // Ear tip\n                    color(\"black\") sphere(d=12);\n                }\n            }\n        }\n    }\n    \n    ear(25);\n    ear(-25);\n    \n    // Eyes\n    module eye(x) {\n        translate([x, 20, 45]) {\n            // Eye white\n            color(\"white\") sphere(d=20);\n            translate([0, 0, 10]) {\n                // Pupil\n                color(\"green\") sphere(d=10);\n                translate([3, 3, 5]) {\n                    // Highlight\n                    color(\"white\") sphere(d=4);\n                }\n            }\n        }\n    }\n    \n    eye(15);\n    eye(-15);\n    \n    // Mouth\n    color(\"darkred\") {\n        translate([0, 28, 35]) rotate([90, 0, 0]) {\n            scale([1, 0.5, 1]) cylinder(h=1, d=15);\n        }\n    }\n    \n    // Arms\n    module arm(x, angle) {\n        translate([x, 30, 35]) {\n            rotate([0, 0, angle]) {\n                color(\"lightpink\") {\n                    // Upper arm\n                    cylinder(h=15, d1=12, d2=10);\n                    translate([0, 15, 0]) rotate([30, 0, 0]) {\n                        // Lower arm\n                        cylinder(h=12, d1=10, d2=8);\n                    }\n                }\n            }\n        }\n    }\n    \n    arm(30, -30);\n    arm(-30, 30);\n    \n    // Feet\n    module foot(x) {\n        translate([x, 0, 10]) {\n            color(\"lightpink\") {\n                // Foot\n                scale([1, 1.5, 0.5]) sphere(d=20);\n                // Toes\n                for(i = [-1:1]) {\n                    translate([i*5, 12, 0]) {\n                        color(\"pink\") sphere(d=5);\n                    }\n                }\n            }\n        }\n    }\n    \n    foot(20);\n    foot(-20);\n    \n    // Hair curl\n    color(\"lightpink\") {\n        translate([0, -30, 55]) rotate([90, 0, 0]) {\n            for(i = [0:5]) {\n                translate([cos(i*30)*5, sin(i*30)*5, i*3]) {\n                    sphere(d=6);\n                }\n            }\n        }\n    }\n}\n\njigglypuff();",
    "renders": true
  },
  {
    "pokemon": "wigglytuff",
    "openscad_code": "// Wigglytuff Pokemon - Realistic Style, Medium Complexity\n\n// Colors\n$fa = 2;\n$fs = 0.5;\n\nmodule body() {\n    // Main round body\n    color(\"#FFB6C1\")\n    difference() {\n        sphere(r = 25);\n        // Flatten bottom\n        translate([0, 0, -25])\n        cube([50, 50, 25], center = true);\n    }\n}\n\nmodule ears() {\n    // Left ear\n    color(\"#FFB6C1\")\n    translate([-15, 20, 20]) {\n        rotate([0, -30, 0])\n        scale([0.7, 0.7, 3])\n        sphere(r = 10);\n        \n        // Ear tip\n        translate([0, 0, 30])\n        scale([0.5, 0.5, 0.8])\n        sphere(r = 10);\n    }\n    \n    // Right ear\n    color(\"#FFB6C1\")\n    translate([15, 20, 20]) {\n        rotate([0, -30, 0])\n        scale([0.7, 0.7, 3])\n        sphere(r = 10);\n        \n        // Ear tip\n        translate([0, 0, 30])\n        scale([0.5, 0.5, 0.8])\n        sphere(r = 10);\n    }\n}\n\nmodule eyes() {\n    // Left eye\n    color(\"white\")\n    translate([-10, 15, 15])\n    sphere(r = 5);\n    \n    color(\"black\")\n    translate([-10, 17, 17])\n    sphere(r = 2);\n    \n    // Right eye\n    color(\"white\")\n    translate([10, 15, 15])\n    sphere(r = 5);\n    \n    color(\"black\")\n    translate([10, 17, 17])\n    sphere(r = 2);\n}\n\nmodule mouth() {\n    // Small smile\n    color(\"#FF69B4\")\n    translate([0, 22, 10])\n    rotate([90, 0, 0])\n    cylinder(h = 1, r1 = 5, r2 = 3, center = true);\n}\n\nmodule arms() {\n    // Left arm\n    color(\"#FFB6C1\")\n    translate([-25, 0, -5]) {\n        rotate([0, 0, 30])\n        scale([0.5, 0.5, 1.5])\n        sphere(r = 8);\n    }\n    \n    // Right arm\n    color(\"#FFB6C1\")\n    translate([25, 0, -5]) {\n        rotate([0, 0, -30])\n        scale([0.5, 0.5, 1.5])\n        sphere(r = 8);\n    }\n}\n\nmodule feet() {\n    // Left foot\n    color(\"#FFB6C1\")\n    translate([-10, -20, -24]) {\n        cube([8, 12, 5], center = true);\n    }\n    \n    // Right foot\n    color(\"#FFB6C1\")\n    translate([10, -20, -24]) {\n        cube([8, 12, 5], center = true);\n    }\n}\n\nmodule tail() {\n    // Fluffy tail\n    color(\"#FFB6C1\")\n    translate([0, -28, -10]) {\n        rotate([0, 0, 0])\n        scale([1.2, 1.5, 0.8])\n        sphere(r = 12);\n    }\n}\n\nmodule whiskers() {\n    // Left whiskers\n    for(i = [-1:1]) {\n        color(\"white\")\n        translate([-20, 10 + i*3, 10])\n        rotate([0, 90, 0])\n        cylinder(h = 15, r = 0.5);\n    }\n    \n    // Right whiskers\n    for(i = [-1:1]) {\n        color(\"white\")\n        translate([20, 10 + i*3, 10])\n        rotate([0, 90, 0])\n        cylinder(h = 15, r = 0.5);\n    }\n}\n\n// Assemble the model\nunion() {\n    body();\n    ears();\n    eyes();\n    mouth();\n    arms();\n    feet();\n    tail();\n    whiskers();\n}",
    "renders": true
  },
  {
    "pokemon": "zubat",
    "openscad_code": "// Realistic Zubat OpenSCAD Model\n// Medium complexity, 3D printable\n\n// Overall scale factor\nscale_factor = 0.4;\n\n// Main color definitions\ncolor_body = [0.2, 0.2, 0.25];\ncolor_wings = [0.7, 0.7, 0.9];\ncolor_ears = [0.8, 0.3, 0.3];\ncolor_eyes = [0.9, 0.1, 0.1];\ncolor_teeth = [0.95, 0.95, 0.9];\n\nmodule zubat_body() {\n    color(color_body)\n    union() {\n        // Main body sphere\n        translate([0, 0, 0])\n            scale([1, 1.2, 0.8])\n            sphere(d=30 * scale_factor, $fn=32);\n        \n        // Bottom point\n        translate([0, 0, -12 * scale_factor])\n            rotate([0, 180, 0])\n            cylinder(h=15 * scale_factor, r1=8 * scale_factor, r2=0, $fn=16);\n    }\n}\n\nmodule zubat_wings() {\n    color(color_wings)\n    union() {\n        // Left wing\n        translate([-15 * scale_factor, 0, 5 * scale_factor])\n            rotate([0, 0, 30])\n            difference() {\n                // Wing membrane\n                scale([2.5, 1.5, 0.1])\n                    sphere(d=25 * scale_factor, $fn=32);\n                \n                // Wing holes\n                for(i = [0:2]) {\n                    translate([i * 8 * scale_factor - 8 * scale_factor, 0, -1 * scale_factor])\n                        scale([0.3, 0.4, 1])\n                        cylinder(h=3 * scale_factor, d=5 * scale_factor, $fn=8);\n                }\n            }\n        \n        // Right wing (mirrored)\n        mirror([1, 0, 0])\n            translate([-15 * scale_factor, 0, 5 * scale_factor])\n                rotate([0, 0, 30])\n                difference() {\n                    scale([2.5, 1.5, 0.1])\n                        sphere(d=25 * scale_factor, $fn=32);\n                    \n                    for(i = [0:2]) {\n                        translate([i * 8 * scale_factor - 8 * scale_factor, 0, -1 * scale_factor])\n                            scale([0.3, 0.4, 1])\n                            cylinder(h=3 * scale_factor, d=5 * scale_factor, $fn=8);\n                    }\n                }\n    }\n}\n\nmodule zubat_ears() {\n    color(color_ears)\n    union() {\n        // Left ear\n        translate([-8 * scale_factor, 12 * scale_factor, 8 * scale_factor])\n            rotate([0, -20, -45])\n            scale([0.3, 0.3, 2])\n            cylinder(h=20 * scale_factor, r1=5 * scale_factor, r2=2 * scale_factor, $fn=8);\n        \n        // Right ear\n        translate([8 * scale_factor, 12 * scale_factor, 8 * scale_factor])\n            rotate([0, -20, 45])\n            scale([0.3, 0.3, 2])\n            cylinder(h=20 * scale_factor, r1=5 * scale_factor, r2=2 * scale_factor, $fn=8);\n    }\n}\n\nmodule zubat_face() {\n    union() {\n        // Eyes\n        color(color_eyes)\n        union() {\n            // Left eye\n            translate([-5 * scale_factor, 8 * scale_factor, 10 * scale_factor])\n                sphere(d=6 * scale_factor, $fn=16);\n            \n            // Right eye\n            translate([5 * scale_factor, 8 * scale_factor, 10 * scale_factor])\n                sphere(d=6 * scale_factor, $fn=16);\n        }\n        \n        // Mouth with teeth\n        color(color_body)\n        translate([0, 5 * scale_factor, 8 * scale_factor])\n            rotate([90, 0, 0])\n            cylinder(h=8 * scale_factor, r1=4 * scale_factor, r2=2 * scale_factor, $fn=16);\n        \n        // Teeth\n        color(color_teeth)\n        for(i = [-1:1]) {\n            translate([i * 2 * scale_factor, 5 * scale_factor, 12 * scale_factor])\n                rotate([90, 0, 0])\n                cylinder(h=3 * scale_factor, r1=1 * scale_factor, r2=0.5 * scale_factor, $fn=8);\n        }\n    }\n}\n\nmodule zubat_feet() {\n    color(color_body)\n    union() {\n        // Left foot\n        translate([-5 * scale_factor, -5 * scale_factor, -10 * scale_factor])\n            rotate([0, 20, 0])\n            scale([0.5, 0.5, 1])\n            cylinder(h=8 * scale_factor, r1=3 * scale_factor, r2=2 * scale_factor, $fn=8);\n        \n        // Right foot\n        translate([5 * scale_factor, -5 * scale_factor, -10 * scale_factor])\n            rotate([0, -20, 0])\n            scale([0.5, 0.5, 1])\n            cylinder(h=8 * scale_factor, r1=3 * scale_factor, r2=2 * scale_factor, $fn=8);\n    }\n}\n\n// Assemble the complete Zubat\nunion() {\n    zubat_body();\n    zubat_wings();\n    zubat_ears();\n    zubat_face();\n    zubat_feet();\n}",
    "renders": true
  },
  {
    "pokemon": "golbat",
    "openscad_code": "// Golbat - Realistic style, medium complexity (OpenSCAD)\n\n// Dimensions in mm\nbody_r = 25;\nwing_span = 90;\near_len = 20;\nleg_len = 8;\neye_r = 6;\nmouth_w = 18;\nmouth_h = 14;\n\n// Colors\ncolor_purple = [0.4, 0.2, 0.6];\ncolor_blue = [0.2, 0.3, 0.7];\ncolor_red = [0.8, 0.1, 0.1];\ncolor_white = [0.9, 0.9, 0.9];\ncolor_black = [0.1, 0.1, 0.1];\n\nmodule golbat() {\n    union() {\n        // Main spherical body\n        color(color_purple)\n        translate([0, 0, body_r/2])\n        sphere(r = body_r, $fn = 32);\n\n        // Ears (two pointy cones)\n        color(color_purple)\n        union() {\n            // Left ear\n            translate([-body_r*0.5, 0, body_r*1.3])\n            rotate([0, -20, -30])\n            cylinder(h = ear_len, r1 = 5, r2 = 1, $fn = 8);\n            \n            // Right ear\n            translate([body_r*0.5, 0, body_r*1.3])\n            rotate([0, -20, 30])\n            cylinder(h = ear_len, r1 = 5, r2 = 1, $fn = 8);\n        }\n\n        // Wings (membranous with veins)\n        color(color_purple) {\n            // Left wing\n            translate([-body_r*0.8, 0, body_r*0.8])\n            rotate([0, 0, -20])\n            scale([1, 0.1, 1])\n            sphere(r = wing_span/2, $fn = 32);\n            \n            // Right wing\n            translate([body_r*0.8, 0, body_r*0.8])\n            rotate([0, 0, 20])\n            scale([1, 0.1, 1])\n            sphere(r = wing_span/2, $fn = 32);\n        }\n        \n        // Wing membrane details (veins)\n        color(color_blue) {\n            for(i = [-30:15:-60]) {\n                // Left wing veins\n                translate([-body_r*0.8, 0, body_r*0.8])\n                rotate([0, 0, i])\n                scale([1, 0.05, 0.8])\n                cylinder(h = wing_span/2, r1 = 0.5, r2 = 0.2, $fn = 4);\n                \n                // Right wing veins\n                translate([body_r*0.8, 0, body_r*0.8])\n                rotate([0, 0, -i])\n                scale([1, 0.05, 0.8])\n                cylinder(h = wing_span/2, r1 = 0.5, r2 = 0.2, $fn = 4);\n            }\n        }\n\n        // Eyes (large red with black pupils)\n        color(color_red)\n        union() {\n            translate([-body_r*0.5, -body_r*0.8, body_r*0.7])\n            sphere(r = eye_r, $fn = 16);\n            \n            translate([body_r*0.5, -body_r*0.8, body_r*0.7])\n            sphere(r = eye_r, $fn = 16);\n        }\n\n        // Pupils\n        color(color_black)\n        union() {\n            translate([-body_r*0.5, -body_r*0.9, body_r*0.75])\n            sphere(r = eye_r/2, $fn = 8);\n            \n            translate([body_r*0.5, -body_r*0.9, body_r*0.75])\n            sphere(r = eye_r/2, $fn = 8);\n        }\n\n        // Mouth (large fanged maw)\n        color(color_red)\n        difference() {\n            // Main mouth opening\n            translate([0, -body_r*0.9, body_r*0.3])\n            rotate([90, 0, 0])\n            cylinder(h = body_r*0.5, r1 = mouth_w/2, r2 = mouth_w/2, $fn = 16);\n            \n            // Hollow out mouth\n            translate([0, -body_r*1.1, body_r*0.3])\n            rotate([90, 0, 0])\n            cylinder(h = body_r*0.6, r1 = mouth_w/2-2, r2 = mouth_w/2-2, $fn = 16);\n        }\n\n        // Teeth (top and bottom fangs)\n        color(color_white)\n        union() {\n            // Top fangs\n            translate([-mouth_w/4, -body_r*1.1, body_r*0.4])\n            rotate([0, 30, 0])\n            cylinder(h = 8, r1 = 2, r2 = 0.5, $fn = 8);\n            \n            translate([mouth_w/4, -body_r*1.1, body_r*0.4])\n            rotate([0, 30, 0])\n            cylinder(h = 8, r1 = 2, r2 = 0.5, $fn = 8);\n            \n            // Bottom fangs\n            translate([-mouth_w/4, -body_r*1.1, body_r*0.2])\n            rotate([0, -30, 0])\n            cylinder(h = 8, r1 = 2, r2 = 0.5, $fn = 8);\n            \n            translate([mouth_w/4, -body_r*1.1, body_r*0.2])\n            rotate([0, -30, 0])\n            cylinder(h = 8, r1 = 2, r2 = 0.5, $fn = 8);\n        }\n\n        // Legs (small curved claws)\n        color(color_purple)\n        union() {\n            // Left leg\n            translate([-body_r*0.4, 0, 0])\n            rotate([0, 20, -20])\n            cylinder(h = leg_len, r1 = 2, r2 = 1, $fn = 8);\n            \n            // Right leg\n            translate([body_r*0.4, 0, 0])\n            rotate([0, 20, 20])\n            cylinder(h = leg_len, r1 = 2, r2 = 1, $fn = 8);\n        }\n\n        // Feet (small spheres at end of legs)\n        color(color_purple)\n        union() {\n            translate([-body_r*0.4, 0, -leg_len])\n            sphere(r = 2, $fn = 8);\n            \n            translate([body_r*0.4, 0, -leg_len])\n            sphere(r = 2, $fn = 8);\n        }\n\n        // Tail (small pointed tail)\n        color(color_purple)\n        translate([0, body_r*0.7, -body_r*0.3])\n        rotate([0, 0, 180])\n        cylinder(h = 10, r1 = 4, r2 = 1, $fn = 8);\n    }\n}\n\n// Generate the model\ngolbat();",
    "renders": true
  },
  {
    "pokemon": "oddish",
    "openscad_code": "// Oddish Pokemon - Medium Complexity Realistic Style\n// 3D printable model with proper wall thickness and no overhangs\n\n// Overall scale factor\nscale_factor = 0.8;\n\n// Main body color (blue-purple)\nbody_color = [0.3, 0.2, 0.8];\n\n// Leaf color\nleaf_color = [0.1, 0.6, 0.2];\n\n// Eye color\neye_color = [1, 1, 1];\n\n// Mouth color\nmouth_color = [0.2, 0.1, 0.1];\n\n// Main module\nmodule oddish() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        // Main spherical body\n        color(body_color) {\n            sphere(30, $fn=64);\n        }\n        \n        // Leaves on top\n        leaves();\n        \n        // Eyes\n        eyes();\n        \n        // Mouth\n        mouth();\n        \n        // Feet\n        feet();\n        \n        // Spots on body\n        body_spots();\n    }\n}\n\n// Leaves growing from top\nmodule leaves() {\n    color(leaf_color) {\n        for (i = [0:5]) {\n            rotate([0, 0, i * 60]) {\n                translate([0, 0, 28]) {\n                    rotate([30, 0, 0]) {\n                        scale([1, 0.4, 0.1]) {\n                            difference() {\n                                sphere(15, $fn=8);\n                                translate([0, -8, 0]) cube([30, 16, 30], center=true);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Central leaf cluster\n        translate([0, 0, 35]) {\n            cylinder(h=10, r1=8, r2=5, $fn=6);\n        }\n    }\n}\n\n// Eyes\nmodule eyes() {\n    color(eye_color) {\n        // Left eye\n        translate([-12, 20, 15]) {\n            sphere(6, $fn=32);\n            color([0, 0, 0]) {\n                translate([0, 0, 5]) {\n                    sphere(3, $fn=16);\n                }\n            }\n        }\n        \n        // Right eye\n        translate([12, 20, 15]) {\n            sphere(6, $fn=32);\n            color([0, 0, 0]) {\n                translate([0, 0, 5]) {\n                    sphere(3, $fn=16);\n                }\n            }\n        }\n    }\n}\n\n// Mouth\nmodule mouth() {\n    color(mouth_color) {\n        translate([0, 25, 5]) {\n            rotate([0, 0, 0]) {\n                scale([1, 0.5, 1]) {\n                    difference() {\n                        sphere(8, $fn=32);\n                        translate([0, -8, 0]) cube([16, 16, 16], center=true);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Feet\nmodule feet() {\n    color(body_color) {\n        // Front left foot\n        translate([-15, -20, -25]) {\n            rotate([15, 0, -15]) {\n                cylinder(h=15, r1=8, r2=6, $fn=16);\n            }\n        }\n        \n        // Front right foot\n        translate([15, -20, -25]) {\n            rotate([15, 0, 15]) {\n                cylinder(h=15, r1=8, r2=6, $fn=16);\n            }\n        }\n        \n        // Back foot\n        translate([0, -25, -25]) {\n            rotate([15, 0, 0]) {\n                cylinder(h=12, r1=10, r2=8, $fn=16);\n            }\n        }\n    }\n}\n\n// Spots on body\nmodule body_spots() {\n    color([0.4, 0.3, 0.9]) {\n        // Random spots on body\n        translate([20, 0, 10]) {\n            sphere(3, $fn=16);\n        }\n        translate([-15, 15, 5]) {\n            sphere(2.5, $fn=16);\n        }\n        translate([10, -15, 0]) {\n            sphere(2, $fn=16);\n        }\n        translate([-8, -10, 15]) {\n            sphere(2.5, $fn=16);\n        }\n        translate([15, 10, -10]) {\n            sphere(2, $fn=16);\n        }\n    }\n}\n\n// Render the complete model\noddish();",
    "renders": true
  },
  {
    "pokemon": "gloom",
    "openscad_code": "// Gloom Pokemon - Realistic Style, Medium Complexity\n// Based on the Grass/Poison-type Pokemon\n\n// Main colors\n$fa = 2;\n$fs = 0.5;\n\n// Parameters for sizing\nbody_height = 60;\nhead_radius = 20;\npetal_length = 25;\near_length = 15;\nmouth_width = 8;\n\n// Gloom's body\nmodule body() {\n    color([0.3, 0.6, 0.2])  // Dark green body\n    union() {\n        // Main bulbous body\n        sphere(r=body_height/2);\n        \n        // Belly bulge\n        translate([0, 0, -5])\n            scale([0.8, 0.8, 0.6])\n                sphere(r=body_height/2);\n    }\n}\n\n// Head with droopy face\nmodule head() {\n    color([0.3, 0.6, 0.2])\n    translate([0, 0, body_height/2 + 5])\n    union() {\n        // Main head sphere\n        sphere(r=head_radius);\n        \n        // Droopy jaw\n        translate([0, -head_radius/2, -head_radius/2])\n            scale([1.2, 0.8, 0.6])\n                sphere(r=head_radius * 0.7);\n    }\n}\n\n// Large petals around head\nmodule petals() {\n    color([0.7, 0.3, 0.7])  // Purple petals\n    for(i = [0:5]) {\n        rotate([0, 0, i * 60])\n        translate([0, head_radius + 5, body_height/2 + 5])\n        rotate([90, 0, 0])\n        scale([1, petal_length/5, petal_length/10])\n            cylinder(h=petal_length, r1=petal_length/4, r2=0.1);\n    }\n}\n\n// Droopy ears\nmodule ears() {\n    color([0.3, 0.6, 0.2])\n    union() {\n        // Left ear\n        translate([-head_radius/2, -head_radius/2, body_height/2 + head_radius])\n        rotate([30, 0, -20])\n        scale([0.4, 0.4, 2])\n            cylinder(h=ear_length, r1=ear_length/2, r2=0.1);\n        \n        // Right ear\n        translate([head_radius/2, -head_radius/2, body_height/2 + head_radius])\n        rotate([30, 0, 20])\n        scale([0.4, 0.4, 2])\n            cylinder(h=ear_length, r1=ear_length/2, r2=0.1);\n    }\n}\n\n// Eyes\nmodule eyes() {\n    color([0.1, 0.1, 0.1])\n    union() {\n        // Left eye\n        translate([-head_radius/3, -head_radius/3, body_height/2 + head_radius/2])\n        scale([1, 1.5, 0.5])\n            sphere(r=3);\n        \n        // Right eye\n        translate([head_radius/3, -head_radius/3, body_height/2 + head_radius/2])\n        scale([1, 1.5, 0.5])\n            sphere(r=3);\n    }\n}\n\n// Drooling mouth\nmodule mouth() {\n    color([0.8, 0.2, 0.8])  // Purple inside\n    translate([0, -head_radius/1.5, body_height/2])\n    union() {\n        // Mouth opening\n        scale([mouth_width, mouth_width/2, 2])\n            sphere(r=3);\n        \n        // Drool drops\n        for(i = [0:2]) {\n            translate([i*3 - 3, -mouth_width - 5 - i*3, -i*2])\n            sphere(r=2 - i*0.5);\n        }\n    }\n}\n\n// Root feet\nmodule feet() {\n    color([0.4, 0.5, 0.2])\n    union() {\n        // Front left root\n        translate([-body_height/3, body_height/3, -body_height/2])\n        rotate([10, 0, -10])\n        cylinder(h=15, r1=5, r2=3);\n        \n        // Front right root\n        translate([body_height/3, body_height/3, -body_height/2])\n        rotate([10, 0, 10])\n        cylinder(h=15, r1=5, r2=3);\n        \n        // Back root\n        translate([0, -body_height/3, -body_height/2])\n        rotate([5, 0, 0])\n        cylinder(h=10, r1=5, r2=3);\n    }\n}\n\n// Poison spots on body\nmodule poison_spots() {\n    color([0.8, 0.4, 0.8, 0.7])  // Semi-transparent purple\n    for(i = [0:7]) {\n        rotate([0, 0, i * 45])\n        translate([body_height/3 * cos(i*45), body_height/3 * sin(i*45), 0])\n        scale([1, 1, 0.5])\n            sphere(r=3);\n    }\n}\n\n// Main assembly\nunion() {\n    body();\n    head();\n    petals();\n    ears();\n    eyes();\n    mouth();\n    feet();\n    poison_spots();\n}",
    "renders": true
  },
  {
    "pokemon": "vileplume",
    "openscad_code": "// Vileplume 3D model - OpenSCAD\n// Realistic style, medium complexity, 3D printable\n\n$fn = 64;\n\nmodule vileplume() {\n    // Main body - blue sphere\n    color(\"dodgerblue\")\n    translate([0, 0, 15])\n    scale([1.2, 1, 1])\n    sphere(r=15);\n    \n    // Head - lighter blue sphere\n    color(\"deepskyblue\")\n    translate([0, 0, 35])\n    sphere(r=12);\n    \n    // Large petals - red with white spots\n    module petal(radius, height, angle) {\n        rotate([0, 0, angle])\n        translate([0, radius/2, 40])\n        rotate([90, 0, 0])\n        scale([1.2, 0.3, 1])\n        cylinder(h=height, r1=radius, r2=radius*0.8);\n    }\n    \n    // Create 5 main petals\n    for(i = [0:72:360]) {\n        color(\"red\")\n        petal(18, 25, i);\n        \n        // White spots on petals\n        color(\"white\")\n        for(j = [0.4, 0.7]) {\n            translate([\n                15*cos(i)*j, \n                15*sin(i)*j, \n                45 + j*5\n            ])\n            sphere(r=1.5);\n        }\n    }\n    \n    // Smaller inner petals - yellow\n    module inner_petal(angle) {\n        rotate([0, 0, angle])\n        translate([0, 8, 42])\n        rotate([90, 0, 0])\n        scale([0.7, 0.2, 1])\n        cylinder(h=12, r1=8, r2=6);\n    }\n    \n    for(i = [36:72:360]) {\n        color(\"gold\")\n        inner_petal(i);\n    }\n    \n    // Eyes - large oval shape\n    module eye(x_offset) {\n        color(\"black\")\n        translate([x_offset, 8, 38])\n        scale([1, 1.5, 0.5])\n        sphere(r=3);\n        \n        // White highlight\n        color(\"white\")\n        translate([x_offset+1, 9, 39.5])\n        sphere(r=1);\n    }\n    \n    eye(-4);\n    eye(4);\n    \n    // Mouth - small beak-like shape\n    color(\"darkred\")\n    translate([0, 6, 32])\n    rotate([90, 0, 0])\n    cylinder(h=3, r1=2, r2=1);\n    \n    // Arms - short stubby arms\n    module arm(x_offset) {\n        color(\"dodgerblue\")\n        translate([x_offset, 12, 25])\n        rotate([0, 0, x_offset > 0 ? -20 : 20])\n        scale([0.8, 0.8, 1.2])\n        sphere(r=6);\n    }\n    \n    arm(-12);\n    arm(12);\n    \n    // Legs - simple cylinders\n    module leg(x_offset) {\n        color(\"dodgerblue\")\n        translate([x_offset, 0, 8])\n        cylinder(h=15, r1=4, r2=3);\n        \n        // Feet\n        color(\"dodgerblue\")\n        translate([x_offset, 0, 0])\n        rotate([0, 90, 0])\n        scale([1.5, 1, 0.8])\n        cylinder(h=8, r1=3, r2=3);\n    }\n    \n    leg(-7);\n    leg(7);\n    \n    // Small leaves at base\n    module leaf(angle) {\n        color(\"forestgreen\")\n        rotate([0, 0, angle])\n        translate([0, 15, 10])\n        rotate([90, 0, 30])\n        scale([0.3, 1, 0.1])\n        cylinder(h=12, r1=4, r2=2);\n    }\n    \n    for(i = [0:120:360]) {\n        leaf(i);\n    }\n    \n    // Center stigma - purple sphere\n    color(\"purple\")\n    translate([0, 0, 48])\n    sphere(r=3);\n}\n\n// Scale to printable size\nscale([0.8, 0.8, 0.8])\nvileplume();",
    "renders": true
  },
  {
    "pokemon": "paras",
    "openscad_code": "// Paras - Realistic Style (medium complexity)\n// 3D printable, ~70mm tall, no overhangs >45°\n\n// Colors\norange = [0.95, 0.45, 0.15];\nred = [0.9, 0.2, 0.1];\nwhite = [0.95, 0.95, 0.9];\nblack = [0.1, 0.1, 0.1];\nbrown = [0.6, 0.35, 0.2];\n\n// Body module\nmodule body() {\n    // Main body - oval shape\n    translate([0, 0, 8]) scale([1.2, 1, 1]) sphere(8);\n    \n    // Lower body segment\n    translate([0, 0, 2]) scale([1.3, 1.1, 0.8]) sphere(6);\n}\n\n// Leg module\nmodule leg(length, angle) {\n    rotate([0, 0, angle]) {\n        // Upper leg\n        color(brown) translate([0, 0, 6]) rotate([90, 0, 0]) cylinder(h=length*0.4, r=2, $fn=8);\n        // Lower leg\n        color(brown) translate([0, length*0.4, 2]) rotate([90, 0, 0]) cylinder(h=length*0.6, r=1.5, $fn=8);\n        // Foot\n        color(brown) translate([0, length, 0]) sphere(2);\n    }\n}\n\n// Eye module\nmodule eye() {\n    color(white) sphere(1.5);\n    color(black) translate([0.5, 0, 0.5]) sphere(0.8);\n}\n\n// Mushroom cap segment\nmodule cap_segment(radius, height, angle) {\n    rotate([0, 0, angle]) {\n        translate([radius, 0, height]) rotate([0, 90, 0]) \n            cylinder(h=radius*0.8, r1=radius*0.3, r2=0, $fn=8);\n    }\n}\n\n// Main mushroom cap\nmodule mushroom_cap() {\n    // Main cap - hemisphere\n    color(red) translate([0, 0, 20]) scale([1.5, 1.5, 0.8]) sphere(12);\n    \n    // Underside gills\n    for(i = [0:30:330]) {\n        color(white) cap_segment(10, 20, i);\n    }\n    \n    // Spots on cap\n    for(i = [45:90:315]) {\n        color(white) translate([8*cos(i), 8*sin(i), 26]) sphere(2);\n    }\n}\n\n// Main assembly\nunion() {\n    // Body\n    color(orange) body();\n    \n    // 6 legs - 3 per side\n    for(i = [0:60:120]) {\n        leg(12, i);\n        leg(12, -i);\n    }\n    \n    // Eyes\n    color(white) {\n        translate([4, 3, 14]) eye();\n        translate([4, -3, 14]) mirror([0,1,0]) eye();\n    }\n    \n    // Mouth (simple beak shape)\n    color(brown) translate([6, 0, 10]) rotate([0, 90, 0]) \n        scale([1, 0.5, 0.5]) cylinder(h=3, r1=1, r2=2, $fn=8);\n    \n    // Mushroom cap\n    mushroom_cap();\n    \n    // Stem connection\n    color(white) translate([0, 0, 16]) cylinder(h=4, r=3, $fn=16);\n}",
    "renders": true
  },
  {
    "pokemon": "parasect",
    "openscad_code": "// Parasect Pokemon - Realistic Medium Complexity\n// 3D printable with no overhangs\n\n$fn = 50;\n\n// Main body colors\nbody_color = \"#B8860B\";      // Dark goldenrod for body\nmushroom_color = \"#8B4513\";  // Saddle brown for mushroom\nspot_color = \"#FF6347\";      // Tomato red for spots\neye_color = \"#FF0000\";       // Bright red for eyes\nleg_color = \"#D2691E\";       // Chocolate for legs\n\n// Scale factor for 3D printing (60mm height)\nscale_factor = 60/25;\n\nmodule mushroom_cap() {\n    color(mushroom_color) {\n        // Main mushroom cap\n        translate([0, 0, 12])\n        scale([1.2, 1.2, 0.6])\n        sphere(r = 10);\n        \n        // Underside cap\n        translate([0, 0, 8])\n        scale([1.1, 1.1, 0.3])\n        sphere(r = 9);\n    }\n}\n\nmodule mushroom_spots() {\n    color(spot_color) {\n        // Circular spots on mushroom\n        for(i = [0:4]) {\n            rotate([0, 0, i*72])\n            translate([7, 0, 14])\n            scale([1, 1, 0.3])\n            sphere(r = 1.5);\n        }\n        \n        // Inner ring of spots\n        for(i = [0:3]) {\n            rotate([0, 0, i*90+45])\n            translate([4, 0, 14.5])\n            scale([1, 1, 0.3])\n            sphere(r = 1);\n        }\n    }\n}\n\nmodule body() {\n    color(body_color) {\n        // Main body segment\n        translate([0, 0, 2])\n        scale([1.2, 0.8, 1])\n        sphere(r = 5);\n        \n        // Abdomen\n        translate([0, 0, -2])\n        scale([0.8, 0.6, 1.2])\n        sphere(r = 4);\n        \n        // Thorax connection\n        translate([0, 0, 5])\n        scale([0.8, 0.6, 0.8])\n        sphere(r = 3.5);\n    }\n}\n\nmodule eyes() {\n    color(eye_color) {\n        // Large compound eyes\n        translate([3, 3.5, 4])\n        sphere(r = 1.5);\n        \n        translate([-3, 3.5, 4])\n        sphere(r = 1.5);\n        \n        // Eye highlights\n        color(\"white\") {\n            translate([3.3, 3.8, 4.7])\n            sphere(r = 0.4);\n            \n            translate([-2.7, 3.8, 4.7])\n            sphere(r = 0.4);\n        }\n    }\n}\n\nmodule mandibles() {\n    color(leg_color) {\n        // Left mandible\n        translate([1.5, 4, 3])\n        rotate([0, -30, -20])\n        cylinder(h = 2.5, r1 = 0.8, r2 = 0.4);\n        \n        // Right mandible\n        translate([-1.5, 4, 3])\n        rotate([0, -30, 20])\n        cylinder(h = 2.5, r1 = 0.8, r2 = 0.4);\n    }\n}\n\nmodule legs() {\n    color(leg_color) {\n        // Front pair\n        translate([2, 3, 0])\n        rotate([0, 0, -30])\n        cylinder(h = 6, r1 = 0.8, r2 = 0.5);\n        \n        translate([-2, 3, 0])\n        rotate([0, 0, 30])\n        cylinder(h = 6, r1 = 0.8, r2 = 0.5);\n        \n        // Middle pair\n        translate([3, 0, 0])\n        rotate([0, 0, -45])\n        cylinder(h = 5.5, r1 = 0.7, r2 = 0.5);\n        \n        translate([-3, 0, 0])\n        rotate([0, 0, 45])\n        cylinder(h = 5.5, r1 = 0.7, r2 = 0.5);\n        \n        // Rear pair\n        translate([2.5, -3, 0])\n        rotate([0, 0, -60])\n        cylinder(h = 5, r1 = 0.7, r2 = 0.5);\n        \n        translate([-2.5, -3, 0])\n        rotate([0, 0, 60])\n        cylinder(h = 5, r1 = 0.7, r2 = 0.5);\n    }\n}\n\nmodule claws() {\n    color(leg_color) {\n        // Front leg claws\n        for(i = [-1, 1]) {\n            translate([i*2, 3, -3.5])\n            rotate([0, 0, i*-30])\n            cylinder(h = 1.5, r1 = 0.5, r2 = 0.3);\n            \n            // Small toe claws\n            translate([i*2.5, 2.8, -3.7])\n            rotate([0, 0, i*-45])\n            cylinder(h = 1, r1 = 0.4, r2 = 0.2);\n        }\n    }\n}\n\n// Assemble the complete Parasect\nscale([scale_factor, scale_factor, scale_factor]) {\n    union() {\n        // Base support for 3D printing\n        cylinder(h = 0.5, r = 15, $fn = 6);\n        \n        // Main components\n        mushroom_cap();\n        mushroom_spots();\n        body();\n        eyes();\n        mandibles();\n        legs();\n        claws();\n    }\n}",
    "renders": true
  },
  {
    "pokemon": "venonat",
    "openscad_code": "// Venonat - Realistic Medium Complexity\n// 3D printable model with no overhangs\n\nmodule venonat_body() {\n    // Main spherical body\n    color(\"indigo\")\n    sphere(d = 35, $fn = 32);\n    \n    // Belly patch\n    translate([0, 0, -15])\n    color(\"lightblue\")\n    scale([1, 0.8, 0.3])\n    sphere(d = 25, $fn = 32);\n}\n\nmodule venonat_eyes() {\n    // Compound eyes with facets\n    for (angle = [0, 120, 240]) {\n        rotate([0, 0, angle])\n        translate([15, 0, 8]) {\n            // Main eye\n            color(\"red\")\n            sphere(d = 12, $fn = 16);\n            \n            // Pupil\n            translate([-6, 0, 0])\n            color(\"black\")\n            sphere(d = 6, $fn = 16);\n            \n            // Eye ridges\n            translate([0, 0, 6])\n            color(\"indigo\")\n            rotate([90, 0, 0])\n            cylinder(h = 3, r1 = 7, r2 = 4, $fn = 16);\n        }\n    }\n}\n\nmodule venonat_antennae() {\n    // Left antenna\n    translate([-8, 15, 15])\n    rotate([-30, 0, -20])\n    color(\"indigo\")\n    cylinder(h = 12, r = 1.5, $fn = 8);\n    \n    // Antenna tip\n    translate([-12, 18, 20])\n    color(\"lightblue\")\n    sphere(d = 4, $fn = 8);\n    \n    // Right antenna\n    translate([8, 15, 15])\n    rotate([-30, 0, 20])\n    color(\"indigo\")\n    cylinder(h = 12, r = 1.5, $fn = 8);\n    \n    // Antenna tip\n    translate([12, 18, 20])\n    color(\"lightblue\")\n    sphere(d = 4, $fn = 8);\n}\n\nmodule venonat_legs() {\n    // Generate 6 legs with joints\n    for (i = [1:6]) {\n        angle = i * 60;\n        rotate([0, 0, angle])\n        translate([12, 0, -15]) {\n            // Upper leg segment\n            rotate([45, 0, 0])\n            color(\"indigo\")\n            cylinder(h = 8, r = 2, $fn = 8);\n            \n            // Lower leg segment\n            translate([0, 0, -8])\n            rotate([90, 0, 0])\n            color(\"indigo\")\n            cylinder(h = 8, r = 1.5, $fn = 8);\n            \n            // Foot\n            translate([0, -8, 0])\n            color(\"lightblue\")\n            sphere(d = 3, $fn = 8);\n        }\n    }\n}\n\nmodule venonat_mouth() {\n    // Mouth opening\n    translate([0, 12, -5])\n    rotate([90, 0, 0])\n    color(\"black\")\n    linear_extrude(height = 2)\n    scale([1, 0.5])\n    circle(d = 5, $fn = 16);\n    \n    // Teeth\n    for (i = [-1, 1]) {\n        translate([i * 2, 12, -4])\n        color(\"white\")\n        rotate([90, 0, 0])\n        cylinder(h = 2, r1 = 1, r2 = 0, $fn = 8);\n    }\n}\n\nmodule venonat_fur_pattern() {\n    // Fur tufts on body\n    for (angle = [0:60:300]) {\n        rotate([0, 0, angle])\n        translate([10, 0, 5]) {\n            color(\"lightblue\")\n            scale([0.5, 0.5, 1])\n            sphere(d = 4, $fn = 8);\n        }\n    }\n    \n    // Back pattern\n    translate([0, -10, 10])\n    color(\"lightblue\")\n    scale([1.5, 1, 0.5])\n    sphere(d = 8, $fn = 16);\n}\n\n// Assemble the complete Venonat\nunion() {\n    venonat_body();\n    venonat_eyes();\n    venonat_antennae();\n    venonat_legs();\n    venonat_mouth();\n    venonat_fur_pattern();\n}",
    "renders": true
  },
  {
    "pokemon": "venomoth",
    "openscad_code": "// Venomoth Pokemon - Realistic Style, Medium Complexity\n// 3D printable model with proper wall thickness and no overhangs\n\n// Main colors\nbody_color = \"purple\";\nwing_color = \"darkblue\";\neye_color = \"red\";\naccent_color = \"pink\";\n\n// Scale factor for 3D printing (80mm wingspan)\nscale_factor = 0.8;\n\nmodule venomoth() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        \n        // Body segments\n        color(body_color) {\n            // Thorax (main body)\n            translate([0, 0, 5]) {\n                sphere(r=10, $fn=32);\n            }\n            \n            // Abdomen (tail section)\n            translate([0, -15, 3]) {\n                scale([0.8, 1.5, 0.6]) {\n                    sphere(r=10, $fn=32);\n                }\n            }\n            \n            // Head\n            translate([0, 12, 8]) {\n                scale([1.2, 1, 0.8]) {\n                    sphere(r=8, $fn=32);\n                }\n            }\n        }\n        \n        // Wings (4 wings total)\n        color(wing_color) {\n            // Upper wings\n            for(side = [-1, 1]) {\n                translate([side * 15, 0, 12]) {\n                    rotate([0, 0, side * 20]) {\n                        rotate([0, 90, 0]) {\n                            scale([1, 2.5, 0.1]) {\n                                cylinder(h=20, r=8, $fn=32);\n                            }\n                        }\n                    }\n                }\n            }\n            \n            // Lower wings\n            for(side = [-1, 1]) {\n                translate([side * 12, -5, 8]) {\n                    rotate([0, 0, side * 15]) {\n                        rotate([0, 90, 0]) {\n                            scale([0.8, 2, 0.08]) {\n                                cylinder(h=18, r=7, $fn=32);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Wing patterns (dots)\n        color(accent_color) {\n            for(side = [-1, 1]) {\n                translate([side * 15, 5, 12]) {\n                    rotate([0, 0, side * 20]) {\n                        for(i = [0:3]) {\n                            for(j = [0:2]) {\n                                translate([side * (i*3 - 4), j*4 - 4, 0.5]) {\n                                    sphere(r=0.8, $fn=16);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Antennae\n        color(body_color) {\n            for(side = [-1, 1]) {\n                translate([side * 5, 18, 12]) {\n                    rotate([30, 0, side * 20]) {\n                        cylinder(h=15, r=0.8, $fn=16);\n                    }\n                    translate([0, 15, 0]) {\n                        sphere(r=1.5, $fn=16);\n                    }\n                }\n            }\n        }\n        \n        // Eyes\n        color(eye_color) {\n            for(side = [-1, 1]) {\n                translate([side * 4, 16, 10]) {\n                    scale([1.2, 1, 0.5]) {\n                        sphere(r=3, $fn=16);\n                    }\n                }\n            }\n        }\n        \n        // Legs (6 legs)\n        color(body_color) {\n            for(i = [0:2]) {\n                angle = i * 120;\n                for(side = [-1, 1]) {\n                    rotate([0, 0, angle]) {\n                        translate([side * 8, 5 - i*5, 0]) {\n                            rotate([60, 0, 0]) {\n                                cylinder(h=12, r=1, $fn=16);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Body markings\n        color(accent_color) {\n            translate([0, 8, 14]) {\n                scale([2, 1.5, 0.2]) {\n                    sphere(r=3, $fn=16);\n                }\n            }\n            \n            translate([0, -5, 10]) {\n                scale([1.5, 2, 0.2]) {\n                    sphere(r=2.5, $fn=16);\n                }\n            }\n        }\n    }\n}\n\n// Generate the model\nvenomoth();",
    "renders": true
  },
  {
    "pokemon": "diglett",
    "openscad_code": "// Diglett - Realistic Style, Medium Complexity\n// Dimensions: ~70mm height for 3D printing\n\n// Constants\nmodule_size = 1; // Scale factor for easy resizing\nbody_height = 70 * module_size;\nbody_radius = 35 * module_size;\nhead_radius = 40 * module_size;\nnose_length = 15 * module_size;\nnose_radius = 8 * module_size;\neye_size = 6 * module_size;\nmouth_width = 20 * module_size;\nmouth_height = 8 * module_size;\nstone_size = 12 * module_size;\nearth_base_height = 10 * module_size;\n\n// Color definitions\ncolor_body = \"#8B4513\";\ncolor_nose = \"#D2691E\";\ncolor_eyes = \"#FF0000\";\ncolor_stones = \"#696969\";\ncolor_earth = \"#654321\";\n\n// Main module\nmodule diglett() {\n    // Earth base\n    color(color_earth)\n    difference() {\n        cylinder(h=earth_base_height, r1=body_radius*1.5, r2=body_radius*1.4, $fn=32);\n        // Hollow base for 3D printing\n        cylinder(h=earth_base_height+1, r1=body_radius*1.4, r2=body_radius*1.3, $fn=32);\n    }\n    \n    // Main body with realistic curves\n    color(color_body)\n    union() {\n        // Upper rounded head\n        translate([0, 0, earth_base_height + body_height/3])\n        sphere(r=head_radius, $fn=64);\n        \n        // Tapering body\n        color(color_body)\n        hull() {\n            translate([0, 0, earth_base_height])\n            sphere(r=body_radius*0.9, $fn=32);\n            \n            translate([0, 0, earth_base_height + body_height/2])\n            sphere(r=body_radius*0.7, $fn=32);\n            \n            translate([0, 0, earth_base_height + body_height])\n            sphere(r=body_radius*0.3, $fn=32);\n        }\n        \n        // Large nose\n        color(color_nose)\n        translate([0, -head_radius*0.8, earth_base_height + body_height/2])\n        rotate([20, 0, 0])\n        cylinder(h=nose_length, r1=nose_radius, r2=nose_radius*0.6, $fn=32);\n        \n        // Eyes\n        color(color_eyes)\n        for(x = [-1, 1]) {\n            translate([x * head_radius/2, -head_radius*0.6, earth_base_height + body_height/1.5])\n            sphere(r=eye_size, $fn=16);\n        }\n        \n        // Mouth\n        color(\"#2F1B14\")\n        translate([0, -head_radius*0.4, earth_base_height + body_height/1.8])\n        difference() {\n            cube([mouth_width, mouth_height*2, 5], center=true);\n            translate([0, 0, 2])\n            cube([mouth_width*0.8, mouth_height, 6], center=true);\n        }\n        \n        // Rocks/stones on head for realism\n        color(color_stones)\n        for(i = [0:5]) {\n            rotate([0, 0, i*60 + 30])\n            translate([head_radius*0.9, 0, earth_base_height + body_height*0.9])\n            scale([1, 0.7, 0.5])\n            sphere(r=stone_size, $fn=8);\n        }\n        \n        // Whisker-like markings\n        color(\"#4A2C17\")\n        for(angle = [-45, 45]) {\n            rotate([0, 0, angle])\n            translate([head_radius*0.6, -head_radius*0.5, earth_base_height + body_height/1.4])\n            scale([0.2, 0.2, 1])\n            cylinder(h=head_radius*0.3, r=eye_size/2, $fn=8);\n        }\n        \n        // Body texture grooves\n        for(level = [1:3]) {\n            color(\"#654321\")\n            translate([0, 0, earth_base_height + level*body_height/4])\n            rotate_extrude($fn=64)\n            translate([body_radius*0.8 - level*5, 0, 0])\n            circle(r=1.5, $fn=8);\n        }\n    }\n}\n\n// Render the model\ndiglett();",
    "renders": true
  },
  {
    "pokemon": "dugtrio",
    "openscad_code": "// Dugtrio in realistic style - medium complexity\n// Three brown mole heads with large pink noses and whiskers\n\nmodule dugtrio_head(scale_factor=1, height=0) {\n    color(\"burlywood3\")\n    \n    // Main head shape - elongated sphere\n    translate([0, 0, height + 15*scale_factor])\n    scale([1.2*scale_factor, 1*scale_factor, 1.3*scale_factor])\n    sphere(10);\n    \n    // Nose - large pink sphere\n    color(\"hotpink\")\n    translate([0, 12*scale_factor, height + 15*scale_factor])\n    sphere(5*scale_factor);\n    \n    // Eyes - black spheres with white highlights\n    color(\"black\")\n    translate([-5*scale_factor, 8*scale_factor, height + 20*scale_factor])\n    sphere(2*scale_factor);\n    \n    color(\"black\")\n    translate([5*scale_factor, 8*scale_factor, height + 20*scale_factor])\n    sphere(2*scale_factor);\n    \n    color(\"white\")\n    translate([-4.5*scale_factor, 8.5*scale_factor, height + 21*scale_factor])\n    sphere(0.8*scale_factor);\n    \n    color(\"white\")\n    translate([5.5*scale_factor, 8.5*scale_factor, height + 21*scale_factor])\n    sphere(0.8*scale_factor);\n    \n    // Whiskers - thin cylinders\n    for(angle = [0:120:240]) {\n        rotate([0, 0, angle])\n        translate([8*scale_factor, 0, height + 15*scale_factor])\n        rotate([0, 90, 0])\n        cylinder(6*scale_factor, 0.5, 0.5);\n    }\n    \n    // Dirt mound base - cone with rounded top\n    color(\"saddlebrown\")\n    translate([0, 0, height])\n    cylinder(15*scale_factor, 12*scale_factor, 6*scale_factor);\n    \n    translate([0, 0, height + 15*scale_factor])\n    sphere(6*scale_factor);\n    \n    // Cracks on dirt mound\n    color(\"saddlebrown\")\n    for(i = [0:2]) {\n        rotate([0, 0, i*120])\n        translate([0, 6*scale_factor, height + 7*scale_factor])\n        cube([1*scale_factor, 6*scale_factor, 14*scale_factor]);\n    }\n}\n\n// Main assembly\ntranslate([0, 0, 0]) {\n    // Left head - slightly smaller and rotated\n    dugtrio_head(0.9, 0);\n    \n    // Center head - largest\n    translate([-25, 0, 5])\n    dugtrio_head(1.1, 5);\n    \n    // Right head - rotated and scaled\n    translate([25, -5, 2])\n    rotate([0, 0, -10])\n    dugtrio_head(0.95, 2);\n}\n\n// Ground base plate for stability\ncolor(\"saddlebrown\")\ntranslate([0, 0, -2])\ncylinder(2, 40, 40);",
    "renders": true
  },
  {
    "pokemon": "meowth",
    "openscad_code": "// Meowth - Realistic Style, Medium Complexity\n// Scale: ~80mm tall\n\n// Color definitions\ngold = [255/255, 196/255, 69/255];\ncream = [255/255, 218/255, 185/255];\nbrown = [160/255, 82/255, 45/255];\nblack = [0, 0, 0];\npink = [255/255, 192/255, 203/255];\n\n// Main body module\nmodule meowth() {\n    // Body\n    color(gold)\n    union() {\n        // Torso\n        translate([0, 0, 15])\n        scale([1.2, 0.8, 1.1])\n        sphere(d=40, $fn=32);\n        \n        // Head\n        translate([0, 0, 45])\n        sphere(d=35, $fn=32);\n        \n        // Snout\n        color(cream)\n        translate([0, 15, 45])\n        scale([0.8, 1.2, 0.9])\n        sphere(d=20, $fn=32);\n        \n        // Ears\n        color(gold)\n        for(side = [-1, 1]) {\n            translate([side * 15, 0, 55])\n            rotate([0, side * 20, 0])\n            scale([0.3, 1, 1.5])\n            cylinder(d1=15, d2=5, h=25, $fn=8);\n            \n            // Inner ear\n            color(pink)\n            translate([side * 15, 0, 55])\n            rotate([0, side * 20, 0])\n            scale([0.2, 0.8, 1.2])\n            cylinder(d1=10, d2=3, h=20, $fn=8);\n        }\n        \n        // Legs\n        for(side = [-1, 1]) {\n            color(gold)\n            translate([side * 15, 0, 0])\n            scale([0.6, 0.6, 1])\n            cylinder(d=12, h=18, $fn=16);\n            \n            color(cream)\n            translate([side * 15, 0, -2])\n            scale([0.7, 0.7, 0.5])\n            sphere(d=12, $fn=16);\n        }\n        \n        // Arms\n        for(side = [-1, 1]) {\n            color(gold)\n            translate([side * 20, 0, 25])\n            rotate([90, 0, side * 30])\n            cylinder(d=8, h=20, $fn=16);\n            \n            color(cream)\n            translate([side * 20, 0, 25])\n            rotate([90, 0, side * 30])\n            translate([0, 0, 20])\n            sphere(d=10, $fn=16);\n        }\n        \n        // Tail\n        color(gold)\n        translate([-25, 0, 30])\n        rotate([0, 90, 45])\n        scale([0.5, 0.5, 1])\n        cylinder(d=8, h=35, $fn=16);\n        \n        // Tail tip\n        translate([-40, 0, 30])\n        rotate([0, 90, 45])\n        color(brown)\n        sphere(d=12, $fn=16);\n        \n        // Coin on forehead\n        color([220/255, 220/255, 220/255])\n        translate([0, 18, 55])\n        rotate([90, 0, 0])\n        cylinder(d=12, h=2, $fn=32);\n        \n        // Eyes\n        color(black)\n        for(side = [-1, 1]) {\n            translate([side * 8, 15, 50])\n            sphere(d=4, $fn=16);\n            \n            // Eyebrow markings\n            color(brown)\n            translate([side * 8, 12, 53])\n            rotate([30, 0, 0])\n            scale([0.2, 0.05, 0.8])\n            cube([15, 1, 3], center=true);\n        }\n        \n        // Nose\n        color(black)\n        translate([0, 20, 47])\n        sphere(d=2, $fn=16);\n        \n        // Mouth\n        color(black)\n        translate([0, 22, 45])\n        rotate([90, 0, 0])\n        cylinder(d1=8, d2=0, h=3, $fn=16);\n        \n        // Whiskers\n        color(black)\n        for(side = [-1, 1]) {\n            for(angle = [-20, 0, 20]) {\n                translate([side * 12, 18, 47])\n                rotate([0, 90, side * angle])\n                cylinder(d=0.5, h=15, $fn=8);\n            }\n        }\n        \n        // Feet pads\n        color(pink)\n        for(side = [-1, 1]) {\n            translate([side * 15, 0, -2])\n            sphere(d=6, $fn=16);\n        }\n        \n        // Hand pads\n        for(side = [-1, 1]) {\n            translate([side * 20, 0, 25])\n            rotate([90, 0, side * 30])\n            translate([0, 0, 20])\n            sphere(d=6, $fn=16);\n        }\n    }\n}\n\n// Generate the model\nmeowth();",
    "renders": true
  },
  {
    "pokemon": "persian",
    "openscad_code": "// Persian Pokemon - Realistic Medium Complexity\n$fn = 32;\n\n// Main body color\ncolor(\"gold\") \n\n// Main body assembly\nunion() {\n    // Torso\n    translate([0, 0, 15]) \n    scale([1.2, 0.8, 1]) \n    sphere(20);\n\n    // Head\n    translate([0, -25, 35]) \n    sphere(15);\n\n    // Snout\n    translate([0, -35, 30]) \n    scale([0.7, 1.3, 0.7]) \n    sphere(10);\n\n    // Ears (left and right)\n    for(x = [-1, 1]) {\n        translate([x * 12, -20, 45]) \n        rotate([0, x * 10, 0]) \n        scale([0.3, 1.5, 0.8]) \n        sphere(10);\n    }\n\n    // Gem on forehead\n    color(\"red\") \n    translate([0, -25, 50]) \n    sphere(3);\n\n    // Legs\n    for(x = [-1, 1]) {\n        for(z = [0, 1]) {\n            translate([x * 15, z * 20 - 10, 0]) \n            cylinder(h = 15, r1 = 6, r2 = 4);\n            \n            // Paws\n            translate([x * 15, z * 20 - 10, 0]) \n            sphere(5);\n        }\n    }\n\n    // Tail\n    color(\"brown\") {\n        // Tail base\n        translate([0, 25, 25]) \n        rotate([0, 45, 0]) \n        cylinder(h = 30, r1 = 8, r2 = 6);\n        \n        // Tail curl\n        translate([0, 35, 35]) \n        rotate([0, 90, 0]) \n        rotate([0, 0, 90]) \n        for(i = [0:9]) {\n            rotate([0, 0, i * 30]) \n            translate([10, 0, 0]) \n            sphere(4);\n        }\n    }\n\n    // Eyes\n    color(\"black\") {\n        for(x = [-1, 1]) {\n            translate([x * 5, -30, 35]) \n            scale([1, 0.8, 0.5]) \n            sphere(3);\n            \n            // Eye highlights\n            color(\"white\") \n            translate([x * 5.5, -31, 36]) \n            sphere(1);\n        }\n    }\n\n    // Nose\n    color(\"black\") \n    translate([0, -38, 30]) \n    sphere(2);\n\n    // Whiskers\n    color(\"white\") {\n        for(x = [-1, 1]) {\n            for(angle = [30, 0, -30]) {\n                translate([x * 8, -35, 30]) \n                rotate([0, 0, x * angle]) \n                cylinder(h = 12, r = 0.5);\n            }\n        }\n    }\n\n    // Back ridges\n    color(\"brown\") \n    for(i = [0:4]) {\n        translate([0, 10 + i * 5, 30 - i * 2]) \n        scale([1.5, 1, 0.5]) \n        sphere(5);\n    }\n}",
    "renders": true
  },
  {
    "pokemon": "psyduck",
    "openscad_code": "// Psyduck - realistic style, medium complexity\n// Size: 60mm tall\n\ncolor(\"yellow\") \nunion() {\n    // Body - main torso\n    translate([0, 0, 15]) \n    scale([1, 0.8, 1.2]) \n    sphere(d=30);\n\n    // Belly\n    color(\"lightyellow\")\n    translate([0, -9, 10]) \n    scale([0.8, 0.3, 1]) \n    sphere(d=25);\n\n    // Head\n    color(\"yellow\")\n    translate([0, 0, 35]) \n    sphere(d=25);\n\n    // Bill\n    color(\"gold\")\n    translate([0, 12, 32]) \n    rotate([0, -15, 0])\n    scale([1, 1.5, 0.8])\n    cylinder(h=15, d1=12, d2=8);\n\n    // Eyes\n    module eye(x) {\n        color(\"white\")\n        translate([x, 8, 37]) \n        sphere(d=6);\n        \n        color(\"black\")\n        translate([x, 9, 38]) \n        sphere(d=3);\n    }\n    \n    eye(6);\n    eye(-6);\n\n    // Hair tuft\n    color(\"yellow\")\n    translate([0, -8, 47]) \n    rotate([-20, 0, 0])\n    cylinder(h=8, d1=6, d2=2);\n\n    // Arms\n    module arm(x) {\n        color(\"yellow\")\n        translate([x, 8, 20]) \n        rotate([0, 0, x > 0 ? -20 : 20])\n        scale([0.8, 0.8, 2])\n        sphere(d=8);\n        \n        color(\"yellow\")\n        translate([x*1.3, 15, 10]) \n        sphere(d=8);\n    }\n    \n    arm(12);\n    arm(-12);\n\n    // Legs\n    module leg(x) {\n        color(\"yellow\")\n        translate([x, 0, 0]) \n        scale([0.8, 0.8, 1.2])\n        sphere(d=10);\n        \n        color(\"yellow\")\n        translate([x*1.1, 0, -8]) \n        sphere(d=12);\n    }\n    \n    leg(7);\n    leg(-7);\n\n    // Tail\n    color(\"yellow\")\n    translate([0, -18, 18]) \n    rotate([0, 0, 180])\n    scale([0.8, 1.2, 0.5])\n    cylinder(h=15, d1=12, d2=6);\n\n    // Feet webbing\n    color(\"gold\")\n    translate([9, 0, -14]) \n    rotate([90, 0, 0])\n    scale([1, 1.5, 0.3])\n    cylinder(h=8, d=12);\n    \n    translate([-9, 0, -14]) \n    rotate([90, 0, 0])\n    scale([1, 1.5, 0.3])\n    cylinder(h=8, d=12);\n\n    // Webbed fingers\n    for(i = [-1:1]) {\n        color(\"gold\")\n        translate([12 + i*3, 2, 0]) \n        rotate([0, 90, 0])\n        scale([0.3, 1, 1])\n        cylinder(h=5, d=2);\n        \n        translate([-12 + i*3, 2, 0]) \n        rotate([0, 90, 0])\n        scale([0.3, 1, 1])\n        cylinder(h=5, d=2);\n    }\n}",
    "renders": true
  },
  {
    "pokemon": "golduck",
    "openscad_code": "// Golduck OpenSCAD Model - Realistic Style, Medium Complexity\n// Total height: 80mm\n\n// Colors\ngolduck_blue = [0.2, 0.5, 0.8];\ngolduck_yellow = [1.0, 0.8, 0.2];\ngolduck_orange = [0.9, 0.5, 0.1];\ngolduck_white = [0.9, 0.9, 0.9];\n\n// Main module\nmodule golduck() {\n    // Body\n    color(golduck_blue)\n    union() {\n        // Torso\n        translate([0, 0, 30])\n        scale([1.2, 0.8, 1.5])\n        sphere(d=40);\n        \n        // Abdomen\n        translate([0, 0, 15])\n        scale([1, 0.7, 0.8])\n        sphere(d=35);\n    }\n    \n    // Head\n    color(golduck_blue)\n    translate([0, 0, 55])\n    scale([0.9, 0.9, 1.1])\n    sphere(d=35);\n    \n    // Beak\n    color(golduck_yellow)\n    translate([0, -18, 52])\n    scale([0.3, 1.2, 0.4])\n    rotate([30, 0, 0])\n    cylinder(h=25, d1=8, d2=4);\n    \n    // Eyes\n    for(x = [-8, 8]) {\n        color(golduck_white)\n        translate([x, -10, 58])\n        sphere(d=5);\n        \n        color([0, 0, 0])\n        translate([x, -12, 58])\n        sphere(d=3);\n    }\n    \n    // Crest\n    color(golduck_orange)\n    for(i = [0:4]) {\n        rotate([0, 0, i*15-30])\n        translate([0, 0, 75])\n        cylinder(h=12-i, d1=2, d2=0.5);\n    }\n    \n    // Arms\n    module arm(side) {\n        color(golduck_blue)\n        translate([side*15, 0, 40])\n        rotate([0, 0, side*15])\n        union() {\n            // Upper arm\n            cylinder(h=20, d=8);\n            \n            // Lower arm\n            translate([0, -10, -15])\n            rotate([45, 0, 0])\n            cylinder(h=15, d=6);\n            \n            // Webbed hand\n            translate([0, -15, -25])\n            scale([1.5, 1, 0.3])\n            sphere(d=12);\n        }\n    }\n    \n    arm(1);\n    arm(-1);\n    \n    // Legs\n    module leg(side) {\n        color(golduck_blue)\n        translate([side*8, 0, 20])\n        union() {\n            // Thigh\n            cylinder(h=15, d=10);\n            \n            // Foot\n            translate([0, -5, -10])\n            color(golduck_orange)\n            scale([1.2, 2, 0.5])\n            sphere(d=15);\n            \n            // Webbed toes\n            for(i = [-1, 0, 1]) {\n                translate([i*3, -12, -12])\n                rotate([0, 0, i*15])\n                scale([0.8, 1.2, 0.2])\n                sphere(d=5);\n            }\n        }\n    }\n    \n    leg(1);\n    leg(-1);\n    \n    // Tail\n    color(golduck_blue)\n    translate([0, 20, 25])\n    rotate([0, 45, 0])\n    union() {\n        // Tail base\n        cylinder(h=25, d=12);\n        \n        // Tail fin\n        translate([0, 0, -30])\n        rotate([0, 45, 0])\n        color(golduck_orange)\n        scale([2, 0.3, 1.5])\n        sphere(d=15);\n    }\n}\n\n// Render the model\ngolduck();",
    "renders": true
  },
  {
    "pokemon": "mankey",
    "openscad_code": "// Mankey - Realistic Style, Medium Complexity\n// Dimensions: ~80mm height\n\n// Colors\n$fn = 32;\n\nmodule mankey() {\n    // Main body\n    color([0.82, 0.41, 0.27]) {\n        // Torso\n        translate([0, 0, 15]) {\n            scale([1.2, 1, 1.5]) sphere(15);\n        }\n        \n        // Head\n        translate([0, 0, 45]) {\n            scale([1.1, 1, 1]) sphere(20);\n        }\n        \n        // Snout\n        translate([0, -20, 42]) {\n            rotate([30, 0, 0]) \n            scale([1, 1.2, 0.8]) sphere(8);\n        }\n    }\n    \n    // Arms\n    color([0.82, 0.41, 0.27]) {\n        // Left arm\n        translate([-20, 15, 35]) {\n            rotate([0, 0, 45])\n            cylinder(h = 20, r1 = 6, r2 = 4);\n            translate([0, 0, 20]) {\n                sphere(5);\n            }\n        }\n        \n        // Right arm\n        translate([20, 15, 35]) {\n            rotate([0, 0, -45])\n            cylinder(h = 20, r1 = 6, r2 = 4);\n            translate([0, 0, 20]) {\n                sphere(5);\n            }\n        }\n    }\n    \n    // Legs\n    color([0.82, 0.41, 0.27]) {\n        // Left leg\n        translate([-10, 0, 0]) {\n            cylinder(h = 25, r1 = 7, r2 = 5);\n            translate([0, 0, 25]) {\n                rotate([0, 90, 0])\n                scale([1, 1.5, 0.8]) sphere(8);\n            }\n        }\n        \n        // Right leg\n        translate([10, 0, 0]) {\n            cylinder(h = 25, r1 = 7, r2 = 5);\n            translate([0, 0, 25]) {\n                rotate([0, 90, 0])\n                scale([1, 1.5, 0.8]) sphere(8);\n            }\n        }\n    }\n    \n    // Ears\n    color([0.82, 0.41, 0.27]) {\n        // Left ear\n        translate([-15, 0, 55]) {\n            rotate([0, 30, -30])\n            scale([0.8, 2, 0.3]) sphere(10);\n        }\n        \n        // Right ear\n        translate([15, 0, 55]) {\n            rotate([0, 30, 30])\n            scale([0.8, 2, 0.3]) sphere(10);\n        }\n    }\n    \n    // Tail\n    color([0.82, 0.41, 0.27]) {\n        translate([0, 18, 25]) {\n            rotate([0, 40, 0])\n            scale([0.5, 0.5, 1]) cylinder(h = 30, r1 = 4, r2 = 2);\n        }\n    }\n    \n    // Eyes\n    color([0.1, 0.1, 0.1]) {\n        // Left eye\n        translate([-7, -25, 45]) {\n            scale([1, 1.5, 0.5]) sphere(3);\n        }\n        \n        // Right eye\n        translate([7, -25, 45]) {\n            scale([1, 1.5, 0.5]) sphere(3);\n        }\n    }\n    \n    // Nose\n    color([0.1, 0.1, 0.1]) {\n        translate([0, -28, 42]) {\n            sphere(2);\n        }\n    }\n    \n    // Mouth\n    color([0.5, 0.1, 0.1]) {\n        translate([0, -30, 38]) {\n            rotate([90, 0, 0])\n            cylinder(h = 0.5, r1 = 3, r2 = 2);\n        }\n    }\n    \n    // Paw pads\n    color([0.6, 0.3, 0.2]) {\n        // Hands\n        for(side = [-1, 1]) {\n            translate([side * 25, 15 + side * 7, 35]) {\n                sphere(2);\n            }\n        }\n        \n        // Feet\n        for(side = [-1, 1]) {\n            translate([side * 10, 5, 0]) {\n                sphere(3);\n            }\n        }\n    }\n    \n    // Belly swirl\n    color([0.7, 0.5, 0.4]) {\n        translate([0, 0, 25]) {\n            scale([0.8, 0.8, 0.1]) sphere(10);\n        }\n    }\n}\n\n// Render the model\nmankey();",
    "renders": true
  },
  {
    "pokemon": "primeape",
    "openscad_code": "// Primeape - Realistic Medium Complexity\n// 3D printable, no supports needed, ~75mm tall\n\n$fn = 24;\n\n// Main colors\ncolor_beige = [0.95,0.85,0.75];\ncolor_brown = [0.6,0.4,0.3];\ncolor_black = [0.1,0.1,0.1];\ncolor_white = [0.95,0.95,0.95];\ncolor_red = [0.8,0.2,0.2];\n\nmodule primeape() {\n    // Head\n    color(color_beige) {\n        // Main head sphere\n        translate([0,0,65]) sphere(15);\n        \n        // Snout protrusion\n        translate([0,-12,65]) scale([1.2,1.5,1]) sphere(8);\n    }\n    \n    // Ears (two curved cylinders)\n    color(color_brown) {\n        // Left ear\n        translate([-12,5,80]) rotate([0,0,-30]) cylinder(12,4,6);\n        \n        // Right ear  \n        translate([12,5,80]) rotate([0,0,30]) cylinder(12,4,6);\n    }\n    \n    // Eyes\n    color(color_white) {\n        translate([-5,-18,67]) sphere(3);\n        translate([5,-18,67]) sphere(3);\n    }\n    color(color_black) {\n        translate([-5,-20,68]) sphere(1.5);\n        translate([5,-20,68]) sphere(1.5);\n    }\n    \n    // Nose\n    color(color_black) translate([0,-20,63]) sphere(1.5);\n    \n    // Mouth (angry expression)\n    color(color_red) {\n        difference() {\n            translate([0,-22,60]) cube([8,2,2]);\n            translate([0,-21,61]) cube([10,2,2]);\n        }\n    }\n    \n    // Body\n    color(color_beige) {\n        // Torso\n        translate([0,0,35]) scale([1.3,1,1.2]) sphere(18);\n        \n        // Chest detail\n        translate([0,10,40]) scale([1.2,0.8,0.6]) sphere(8);\n    }\n    \n    // Arms\n    color(color_beige) {\n        // Left arm\n        translate([-20,5,45]) rotate([0,0,20]) {\n            cylinder(15,6,5);\n            translate([0,0,-7]) sphere(6);\n        }\n        \n        // Right arm\n        translate([20,5,45]) rotate([0,0,-20]) {\n            cylinder(15,6,5);\n            translate([0,0,-7]) sphere(6);\n        }\n    }\n    \n    // Fists\n    color(color_beige) {\n        translate([-25,5,30]) sphere(8);\n        translate([25,5,30]) sphere(8);\n    }\n    \n    // Legs\n    color(color_beige) {\n        // Left leg\n        translate([-10,-5,20]) cylinder(15,7,6);\n        \n        // Right leg\n        translate([10,-5,20]) cylinder(15,7,6);\n    }\n    \n    // Feet\n    color(color_beige) {\n        translate([-10,-5,5]) scale([1.5,2.5,1]) sphere(6);\n        translate([10,-5,5]) scale([1.5,2.5,1]) sphere(6);\n    }\n    \n    // Tail\n    color(color_brown) {\n        translate([0,15,25]) rotate([0,-20,0]) {\n            cylinder(20,5,3);\n            translate([0,20,0]) sphere(4);\n        }\n    }\n    \n    // Belt/swirl pattern\n    color(color_brown) {\n        translate([0,0,45]) rotate([90,0,0]) {\n            difference() {\n                cylinder(25,2,2);\n                translate([-25,0,0]) cube([50,50,5]);\n            }\n        }\n    }\n    \n    // Angry eyebrows\n    color(color_brown) {\n        translate([-8,-15,75]) rotate([0,0,30]) cube([10,2,2]);\n        translate([8,-15,75]) rotate([0,0,-30]) cube([10,2,2]);\n    }\n}\n\n// Generate the model\nprimeape();",
    "renders": true
  },
  {
    "pokemon": "growlithe",
    "openscad_code": "// Growlithe - Realistic Style, Medium Complexity\n// Designed for 3D printing with no overhangs\n\n// Overall scale factor for printing\nscale_factor = 0.5;\n\n// Main colors\ncolor_orange = [0.9, 0.4, 0.1];\ncolor_beige = [0.95, 0.85, 0.7];\ncolor_black = [0.1, 0.1, 0.1];\n\n// Head module\nmodule head() {\n    translate([0, 0, 35 * scale_factor]) {\n        // Main head sphere\n        color(color_orange) sphere(20 * scale_factor);\n        \n        // Muzzle\n        translate([0, -18 * scale_factor, -5 * scale_factor])\n            color(color_beige) scale([1.2, 1.5, 0.8])\n                sphere(15 * scale_factor);\n        \n        // Ears\n        for(side = [-1, 1]) {\n            translate([side * 18 * scale_factor, 0, 15 * scale_factor]) {\n                rotate([0, side * 15, 0])\n                    color(color_orange) scale([0.4, 1, 2])\n                        cylinder(h = 25 * scale_factor, r1 = 8 * scale_factor, r2 = 4 * scale_factor);\n            }\n        }\n        \n        // Eyes\n        for(side = [-1, 1]) {\n            translate([side * 10 * scale_factor, -20 * scale_factor, 5 * scale_factor]) {\n                color(color_black) sphere(4 * scale_factor);\n                translate([0, 2 * scale_factor, 2 * scale_factor])\n                    color([1, 1, 1]) sphere(1 * scale_factor);\n            }\n        }\n        \n        // Nose\n        translate([0, -25 * scale_factor, 0])\n            color(color_black) sphere(3 * scale_factor);\n        \n        // Mouth\n        translate([0, -22 * scale_factor, -8 * scale_factor])\n            color(color_black) rotate([90, 0, 0])\n                cylinder(h = 0.5 * scale_factor, r1 = 3 * scale_factor, r2 = 3 * scale_factor);\n    }\n}\n\n// Body module\nmodule body() {\n    color(color_orange) {\n        // Main body\n        translate([0, 0, 20 * scale_factor])\n            scale([1.5, 1, 1.2])\n                sphere(25 * scale_factor);\n        \n        // Chest beige patch\n        translate([0, 8 * scale_factor, 15 * scale_factor])\n            color(color_beige) scale([1.8, 1.5, 0.5])\n                sphere(20 * scale_factor);\n    }\n}\n\n// Legs module\nmodule legs() {\n    for(side = [-1, 1]) {\n        // Front legs\n        translate([side * 15 * scale_factor, 10 * scale_factor, 0]) {\n            color(color_orange) cylinder(h = 30 * scale_factor, r = 6 * scale_factor);\n            translate([0, 0, -15 * scale_factor])\n                color(color_beige) sphere(7 * scale_factor);\n        }\n        \n        // Back legs\n        translate([side * 15 * scale_factor, -15 * scale_factor, 0]) {\n            color(color_orange) cylinder(h = 30 * scale_factor, r = 7 * scale_factor);\n            translate([0, 0, -15 * scale_factor])\n                color(color_beige) sphere(8 * scale_factor);\n        }\n    }\n}\n\n// Tail module\nmodule tail() {\n    translate([0, -35 * scale_factor, 15 * scale_factor]) {\n        rotate([20, 0, 0])\n            color(color_orange) scale([0.8, 0.8, 3])\n                cylinder(h = 30 * scale_factor, r1 = 8 * scale_factor, r2 = 5 * scale_factor);\n        \n        // Tail stripes\n        for(i = [0:2]) {\n            translate([0, 0, 5 * scale_factor + i * 8 * scale_factor])\n                rotate([20, 0, 0])\n                    color(color_beige) scale([0.8, 0.8, 0.5])\n                        cylinder(h = 2 * scale_factor, r1 = 8.5 * scale_factor, r2 = 5.5 * scale_factor);\n        }\n    }\n}\n\n// Stripes module\nmodule stripes() {\n    // Back stripes\n    for(i = [0:3]) {\n        rotate([0, 0, 45 + i * 20])\n            translate([0, 0, 30 * scale_factor - i * 5 * scale_factor])\n                color(color_beige) scale([0.3, 1, 0.1])\n                    cube([40 * scale_factor, 15 * scale_factor, 3 * scale_factor], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    legs();\n    tail();\n    stripes();\n}",
    "renders": true
  },
  {
    "pokemon": "arcanine",
    "openscad_code": "// Arcanine - Realistic Style, Medium Complexity\n// Size: ~80mm length, 3D printable\n\n$fn = 32;\nmodule body() {\n    color(\"orange\")\n    union() {\n        // Main torso\n        translate([0, 0, 15])\n        scale([1.5, 0.8, 1.2])\n        sphere(20);\n        \n        // Chest fluff\n        color(\"beige\")\n        translate([0, 10, 15])\n        scale([1.2, 0.6, 0.8])\n        sphere(15);\n    }\n}\n\nmodule head() {\n    color(\"orange\")\n    union() {\n        // Main head\n        translate([30, 0, 35])\n        scale([1.2, 0.9, 1.1])\n        sphere(15);\n        \n        // Snout\n        color(\"beige\")\n        translate([45, 0, 35])\n        scale([1.5, 0.6, 0.6])\n        sphere(10);\n        \n        // Nose\n        color(\"black\")\n        translate([52, 0, 35])\n        sphere(3);\n        \n        // Eyes\n        for(x = [38, 38]) {\n            color(\"black\")\n            translate([x, 8, 40])\n            scale([0.8, 1, 0.8])\n            sphere(5);\n            \n            color(\"white\")\n            translate([x+1, 8, 41])\n            sphere(2);\n        }\n        \n        // Ears\n        for(y = [12, -12]) {\n            color(\"orange\")\n            translate([25, y, 50])\n            rotate([0, 0, y > 0 ? 15 : -15])\n            scale([0.3, 0.1, 1.2])\n            cylinder(15, 8, 4);\n            \n            color(\"beige\")\n            translate([25, y, 50])\n            rotate([0, 0, y > 0 ? 15 : -15])\n            scale([0.2, 0.08, 1])\n            cylinder(15, 8, 4);\n        }\n    }\n}\n\nmodule legs() {\n    for(pos = [[20, 10, 0], [20, -10, 0], [-20, 10, 0], [-20, -10, 0]]) {\n        color(\"orange\")\n        translate(pos)\n        rotate([0, 0, pos[0] > 0 ? 5 : -5])\n        scale([0.4, 0.4, 1])\n        cylinder(25, 8, 6);\n        \n        // Paws\n        color(\"beige\")\n        translate([pos[0], pos[1], 0])\n        sphere(8);\n    }\n}\n\nmodule tail() {\n    color([0.8, 0.3, 0]) {\n        translate([-35, 0, 25])\n        rotate([0, 20, 0])\n        scale([0.8, 0.8, 2])\n        sphere(15);\n        \n        translate([-50, 0, 35])\n        rotate([0, 30, 0])\n        scale([0.6, 0.6, 1.5])\n        sphere(10);\n        \n        translate([-60, 0, 40])\n        rotate([0, 45, 0])\n        scale([0.4, 0.4, 1])\n        sphere(8);\n    }\n}\n\nmodule stripes() {\n    color(\"black\") {\n        // Back stripes\n        for(i = [0:2]) {\n            translate([-5-i*10, 0, 30+i*3])\n            scale([0.2, 1.2, 0.1])\n            cube([15, 5, 2]);\n        }\n        \n        // Leg stripes\n        for(pos = [[20, 10, 12], [20, -10, 12], [-20, 10, 12], [-20, -10, 12]]) {\n            translate(pos)\n            scale([1.2, 0.1, 0.8])\n            rotate([90, 0, 0])\n            cylinder(8, 6, 6);\n        }\n    }\n}\n\nmodule mane() {\n    color([0.8, 0.3, 0]) {\n        // Neck mane\n        translate([15, 0, 45])\n        rotate([0, 90, 0])\n        scale([1.2, 1.5, 1])\n        cylinder(20, 12, 8);\n        \n        // Face mane\n        translate([35, 0, 45])\n        rotate([0, 60, 0])\n        scale([0.8, 1, 1])\n        cylinder(15, 8, 5);\n    }\n}\n\n// Assembly\nbody();\nhead();\nlegs();\ntail();\nstripes();\nmane();",
    "renders": true
  },
  {
    "pokemon": "poliwag",
    "openscad_code": "// Poliwag OpenSCAD Model - Realistic Style, Medium Complexity\n// Approximate size: 80mm tall\n\n// Main body color - light blue\nbody_color = [0.6, 0.8, 1];\n// Belly color - white\nbelly_color = [1, 1, 1];\n// Eye color - black\neye_color = [0, 0, 0];\n// Mouth color - dark red\nmouth_color = [0.6, 0.1, 0.1];\n\nmodule poliwag_body() {\n    // Main spherical body\n    color(body_color)\n    translate([0, 0, 25])\n    sphere(d=40, $fn=32);\n    \n    // Flattened bottom for stability\n    color(body_color)\n    translate([0, 0, 5])\n    scale([1, 1, 0.2])\n    sphere(d=40, $fn=32);\n    \n    // White belly patch\n    color(belly_color)\n    translate([0, -19, 15])\n    scale([0.8, 0.3, 0.8])\n    sphere(d=40, $fn=32);\n}\n\nmodule poliwag_tail() {\n    // Spiral tail segments\n    for(i = [0:3]) {\n        color(body_color)\n        rotate([0, 0, i * 90])\n        translate([20 + i * 3, 0, 15 - i * 5])\n        sphere(d=12 - i * 2, $fn=16);\n    }\n    \n    // Tail stem\n    color(body_color)\n    translate([32, 0, 0])\n    rotate([0, 90, 0])\n    cylinder(h=35, d1=8, d2=5, $fn=16);\n    \n    // Tail fins\n    color(body_color)\n    translate([50, 0, 0])\n    rotate([0, 90, 0])\n    scale([1, 0.3, 1])\n    sphere(d=20, $fn=16);\n}\n\nmodule poliwag_lips() {\n    color(body_color)\n    difference() {\n        // Upper lip\n        translate([0, 20, 15])\n        scale([1, 0.4, 0.6])\n        sphere(d=25, $fn=32);\n        \n        // Mouth cavity\n        color(mouth_color)\n        translate([0, 21, 14])\n        scale([0.6, 0.2, 0.4])\n        sphere(d=20, $fn=32);\n    }\n    \n    color(body_color)\n    difference() {\n        // Lower lip\n        translate([0, 20, 8])\n        scale([1, 0.4, 0.4])\n        sphere(d=25, $fn=32);\n        \n        // Mouth cavity continuation\n        color(mouth_color)\n        translate([0, 21, 9])\n        scale([0.6, 0.2, 0.3])\n        sphere(d=20, $fn=32);\n    }\n}\n\nmodule poliwag_eyes() {\n    // Left eye\n    color(eye_color)\n    translate([-10, 10, 35])\n    scale([1, 0.8, 0.5])\n    sphere(d=8, $fn=16);\n    \n    // Right eye\n    color(eye_color)\n    translate([10, 10, 35])\n    scale([1, 0.8, 0.5])\n    sphere(d=8, $fn=16);\n    \n    // Eye highlights\n    color([1, 1, 1])\n    translate([-9, 11, 37])\n    sphere(d=2, $fn=8);\n    \n    color([1, 1, 1])\n    translate([11, 11, 37])\n    sphere(d=2, $fn=8);\n}\n\nmodule poliwag_legs() {\n    // Front legs\n    for(side = [-1, 1]) {\n        color(body_color)\n        translate([side * 12, 15, 5])\n        rotate([0, 45, 0])\n        cylinder(h=15, d1=8, d2=6, $fn=16);\n        \n        color(body_color)\n        translate([side * 12, 25, -2])\n        sphere(d=10, $fn=16);\n    }\n    \n    // Back leg\n    color(body_color)\n    translate([0, -15, 5])\n    rotate([0, -45, 0])\n    cylinder(h=15, d1=8, d2=6, $fn=16);\n    \n    color(body_color)\n    translate([0, -25, -2])\n    sphere(d=10, $fn=16);\n}\n\nmodule poliwag_whiskers() {\n    // Left whiskers\n    for(i = [1, 2]) {\n        color(body_color)\n        translate([-15, 5, 22])\n        rotate([0, 45 + i * 10, -30 * i])\n        cylinder(h=12, d=2, $fn=8);\n    }\n    \n    // Right whiskers\n    for(i = [1, 2]) {\n        color(body_color)\n        translate([15, 5, 22])\n        rotate([0, 45 + i * 10, 30 * i])\n        cylinder(h=12, d=2, $fn=8);\n    }\n}\n\n// Assembly\nunion() {\n    poliwag_body();\n    poliwag_tail();\n    poliwag_lips();\n    poliwag_eyes();\n    poliwag_legs();\n    poliwag_whiskers();\n}",
    "renders": true
  },
  {
    "pokemon": "poliwhirl",
    "openscad_code": "// Poliwhirl OpenSCAD Model - Medium Complexity Realistic Style\n// Scale: 50mm height\n\n$fn = 50;\n\n// Colors\ncolor_body = [0.0, 0.6, 0.9];\ncolor_belly = [1.0, 1.0, 1.0];\ncolor_swirl = [0.4, 0.2, 0.0];\ncolor_mouth = [0.8, 0.2, 0.2];\n\nmodule poliwhirl_body() {\n    // Main spherical body\n    color(color_body)\n    sphere(d=45);\n    \n    // White belly\n    color(color_belly)\n    translate([0, -22.5, 0])\n    sphere(d=45);\n    \n    // Flatten slightly for 3D printing\n    difference() {\n        sphere(d=45);\n        translate([0, 0, -25])\n        cube([100, 100, 50], center=true);\n    }\n}\n\nmodule poliwhirl_arms() {\n    // Left arm\n    color(color_body)\n    translate([-25, 0, 5])\n    rotate([0, 0, 45])\n    scale([1, 1.5, 1])\n    sphere(d=15);\n    \n    // Right arm\n    color(color_body)\n    translate([25, 0, 5])\n    rotate([0, 0, -45])\n    scale([1, 1.5, 1])\n    sphere(d=15);\n}\n\nmodule poliwhirl_legs() {\n    // Left leg\n    color(color_body)\n    translate([-12, -15, -20])\n    rotate([15, 0, 0])\n    cylinder(h=20, d1=12, d2=8);\n    \n    // Right leg\n    color(color_body)\n    translate([12, -15, -20])\n    rotate([15, 0, 0])\n    cylinder(h=20, d1=12, d2=8);\n}\n\nmodule poliwhirl_ears() {\n    // Left ear\n    color(color_body)\n    translate([-18, 0, 20])\n    rotate([0, 0, -30])\n    scale([0.8, 2, 0.5])\n    sphere(d=10);\n    \n    // Right ear\n    color(color_body)\n    translate([18, 0, 20])\n    rotate([0, 0, 30])\n    scale([0.8, 2, 0.5])\n    sphere(d=10);\n}\n\nmodule poliwhirl_face() {\n    // Eyes\n    for(x=[-8, 8]) {\n        color([0, 0, 0])\n        translate([x, 8, 10])\n        sphere(d=4);\n    }\n    \n    // Mouth\n    color(color_mouth)\n    translate([0, 0, 5])\n    rotate([90, 0, 0])\n    linear_extrude(height=2)\n    circle(d=8);\n}\n\nmodule poliwhirl_swirl() {\n    // Spiral on belly\n    color(color_swirl)\n    for(i=[0:10:360]) {\n        translate([\n            cos(i) * (8 - i/45),\n            -22.5 + sin(i) * (8 - i/45),\n            0.1\n        ])\n        sphere(d=3 - i/120);\n    }\n}\n\n// Assemble the complete Poliwhirl\nunion() {\n    poliwhirl_body();\n    poliwhirl_arms();\n    poliwhirl_legs();\n    poliwhirl_ears();\n    poliwhirl_face();\n    poliwhirl_swirl();\n}",
    "renders": true
  },
  {
    "pokemon": "poliwrath",
    "openscad_code": "// Poliwrath OpenSCAD Model - Realistic Style, Medium Complexity\n\n// Colors\nblue = [0.2, 0.4, 0.8];\nwhite = [1, 1, 1];\nblack = [0, 0, 0];\n\n// Main body module\nmodule poliwrath_body() {\n    color(blue)\n    union() {\n        // Main torso - spherical shape\n        sphere(d=40, $fn=32);\n        \n        // Belly - slightly flattened sphere\n        translate([0, -15, -5])\n            scale([1.2, 0.8, 0.6])\n            sphere(d=30, $fn=32);\n        \n        // Lower body extension\n        translate([0, 0, -25])\n            cylinder(h=20, d1=35, d2=25, $fn=32);\n    }\n}\n\n// Head module\nmodule poliwrath_head() {\n    color(blue)\n    translate([0, 25, 15])\n    union() {\n        // Main head sphere\n        sphere(d=35, $fn=32);\n        \n        // Snout\n        translate([0, 15, 0])\n            scale([0.8, 1.2, 0.8])\n            sphere(d=20, $fn=32);\n    }\n}\n\n// Eyes module\nmodule poliwrath_eyes() {\n    // Left eye\n    translate([-10, 30, 20]) {\n        color(white)\n        sphere(d=8, $fn=16);\n        \n        // Pupil\n        translate([2, 0, 2])\n            color(black)\n            sphere(d=4, $fn=16);\n    }\n    \n    // Right eye\n    translate([10, 30, 20]) {\n        color(white)\n        sphere(d=8, $fn=16);\n        \n        // Pupil\n        translate([-2, 0, 2])\n            color(black)\n            sphere(d=4, $fn=16);\n    }\n}\n\n// Arms module\nmodule poliwrath_arms() {\n    // Left arm\n    translate([-22, 10, 0])\n    rotate([0, 0, 45])\n    union() {\n        // Upper arm\n        cylinder(h=20, d=12, $fn=16);\n        \n        // Forearm\n        translate([0, 18, 0])\n            rotate([0, 0, -30])\n            cylinder(h=15, d=10, $fn=16);\n        \n        // Fist\n        translate([0, 30, 0])\n            sphere(d=15, $fn=16);\n    }\n    \n    // Right arm\n    translate([22, 10, 0])\n    rotate([0, 0, -45])\n    union() {\n        // Upper arm\n        cylinder(h=20, d=12, $fn=16);\n        \n        // Forearm\n        translate([0, 18, 0])\n            rotate([0, 0, 30])\n            cylinder(h=15, d=10, $fn=16);\n        \n        // Fist\n        translate([0, 30, 0])\n            sphere(d=15, $fn=16);\n    }\n}\n\n// Legs module\nmodule poliwrath_legs() {\n    // Left leg\n    translate([-12, -5, -35])\n    union() {\n        // Thigh\n        cylinder(h=15, d=12, $fn=16);\n        \n        // Lower leg\n        translate([0, 0, -18])\n            cylinder(h=15, d=10, $fn=16);\n        \n        // Foot\n        translate([0, 5, -30])\n            scale([1.5, 2, 0.8])\n            sphere(d=15, $fn=16);\n    }\n    \n    // Right leg\n    translate([12, -5, -35])\n    union() {\n        // Thigh\n        cylinder(h=15, d=12, $fn=16);\n        \n        // Lower leg\n        translate([0, 0, -18])\n            cylinder(h=15, d=10, $fn=16);\n        \n        // Foot\n        translate([0, 5, -30])\n            scale([1.5, 2, 0.8])\n            sphere(d=15, $fn=16);\n    }\n}\n\n// Spiral belly marking\nmodule poliwrath_spiral() {\n    color(white)\n    translate([0, -15, 5])\n    rotate([90, 0, 0])\n    linear_extrude(height=2)\n    for(i = [0:5:360]) {\n        rotate(i)\n        translate([i/10, 0, 0])\n        circle(d=3, $fn=8);\n    }\n}\n\n// Main assembly\nunion() {\n    poliwrath_body();\n    poliwrath_head();\n    poliwrath_eyes();\n    poliwrath_arms();\n    poliwrath_legs();\n    poliwrath_spiral();\n}\n\n// Scale to reasonable print size\nscale(0.8) children();",
    "renders": true
  },
  {
    "pokemon": "abra",
    "openscad_code": "// Abra Pokemon in realistic style\n// Size: ~80mm tall, 3D printable\n\n$fn = 32;\n\nmodule abra() {\n    color(\"tan\") {\n        // Main body\n        translate([0, 0, 40]) {\n            difference() {\n                sphere(d = 35);\n                // Neck cavity\n                translate([0, 0, -10])\n                    cylinder(h = 20, d1 = 25, d2 = 20, center = true);\n            }\n        }\n        \n        // Torso\n        translate([0, 0, 15]) {\n            scale([1.2, 1, 1.5])\n                sphere(d = 30);\n        }\n        \n        // Legs\n        for(x = [-8, 8]) {\n            translate([x, 0, 5]) {\n                rotate([0, -10, 0])\n                    cylinder(h = 15, d1 = 12, d2 = 10);\n            }\n        }\n        \n        // Feet\n        for(x = [-8, 8]) {\n            translate([x, 0, 0]) {\n                scale([1.5, 2.5, 0.8])\n                    sphere(d = 10);\n            }\n        }\n        \n        // Arms\n        for(x = [-15, 15]) {\n            translate([x, 0, 25]) {\n                rotate([0, 0, x > 0 ? -20 : 20])\n                    cylinder(h = 20, d1 = 8, d2 = 6);\n            }\n        }\n        \n        // Hands with three fingers\n        for(x = [-15, 15]) {\n            translate([x + (x > 0 ? -3 : 3), 0, 15]) {\n                // Palm\n                sphere(d = 8);\n                \n                // Fingers\n                for(angle = [0, 120, 240]) {\n                    rotate([0, 0, angle + (x > 0 ? 0 : 180)])\n                        translate([4, 0, 0])\n                            cylinder(h = 6, d1 = 3, d2 = 2);\n                }\n            }\n        }\n    }\n    \n    // Head\n    color(\"bisque\") {\n        translate([0, 0, 60]) {\n            sphere(d = 25);\n        }\n        \n        // Snout\n        color(\"tan\") {\n            translate([0, -10, 60]) {\n                scale([0.8, 1.2, 0.8])\n                    sphere(d = 15);\n            }\n        }\n    }\n    \n    // Ears - long and pointed\n    color(\"tan\") {\n        for(x = [-12, 12]) {\n            translate([x, 0, 72]) {\n                rotate([0, 0, x > 0 ? -10 : 10])\n                    scale([0.3, 1, 0.2])\n                        cylinder(h = 20, d1 = 5, d2 = 2);\n            }\n        }\n    }\n    \n    // Mustache-like whiskers\n    color(\"brown\") {\n        for(side = [-1, 1]) {\n            for(i = [0, 1, 2]) {\n                translate([side * (8 + i * 2), -15, 58]) {\n                    rotate([0, 10 + i * 5, side * (30 + i * 10)])\n                        cylinder(h = 8, d = 2);\n                }\n            }\n        }\n    }\n    \n    // Eyes - closed\n    color(\"slateblue\") {\n        for(x = [-6, 6]) {\n            translate([x, -5, 62]) {\n                scale([1, 0.2, 1])\n                    sphere(d = 5);\n            }\n        }\n    }\n    \n    // Tail - thick at base, tapering\n    color(\"tan\") {\n        translate([0, 20, 25]) {\n            rotate([0, -30, 0])\n                cylinder(h = 30, d1 = 12, d2 = 5);\n        }\n    }\n    \n    // Chest armor plating\n    color(\"yellow\") {\n        translate([0, 0, 35]) {\n            difference() {\n                scale([1.3, 1, 0.5])\n                    sphere(d = 25);\n                translate([0, 0, -1])\n                    cube([30, 30, 2], center = true);\n            }\n        }\n    }\n    \n    // Knee pads\n    color(\"yellow\") {\n        for(x = [-8, 8]) {\n            translate([x, 0, 12]) {\n                sphere(d = 8);\n            }\n        }\n    }\n    \n    // Shoulder guards\n    color(\"yellow\") {\n        for(x = [-15, 15]) {\n            translate([x, 0, 28]) {\n                sphere(d = 6);\n            }\n        }\n    }\n    \n    // Spoons (Abra's signature items)\n    color(\"silver\") {\n        for(side = [-1, 1]) {\n            translate([side * 18, side * 5, 15]) {\n                rotate([0, 0, side * 45])\n                    scale([0.1, 2, 0.1])\n                        cube([5, 30, 5], center = true);\n            }\n        }\n    }\n}\n\n// Display the model\nabra();",
    "renders": true
  },
  {
    "pokemon": "kadabra",
    "openscad_code": "// Realistic Kadabra OpenSCAD Model - Medium Complexity\n// 3D printable with no overhangs, approximately 80mm tall\n\n// Main colors\ncolor_yellow = [1, 0.8, 0.1];\ncolor_brown = [0.6, 0.3, 0.1];\ncolor_orange = [1, 0.4, 0];\n\n// Wall thickness for printing\nwall = 1.5;\n\nmodule kadabra() {\n    // Body\n    color(color_yellow) {\n        union() {\n            // Torso\n            translate([0, 0, 25])\n                scale([1.2, 1.5, 1.8])\n                sphere(r=15, $fn=32);\n            \n            // Lower body\n            translate([0, 0, 10])\n                cylinder(h=20, r1=12, r2=15, $fn=32);\n        }\n    }\n    \n    // Head\n    color(color_yellow) {\n        translate([0, 0, 45])\n            sphere(r=18, $fn=32);\n    }\n    \n    // Mustache\n    color(color_brown) {\n        for(i=[-1,1]) {\n            translate([i*8, 20, 42])\n                rotate([0, i*20, 0])\n                scale([1.5, 0.5, 4])\n                sphere(r=5, $fn=16);\n        }\n    }\n    \n    // Eyes\n    color([0,0,0]) {\n        for(i=[-1,1]) {\n            translate([i*8, 18, 48])\n                sphere(r=3, $fn=16);\n        }\n    }\n    \n    // Ears\n    color(color_yellow) {\n        for(i=[-1,1]) {\n            translate([i*25, 10, 55])\n                rotate([0, -30*i, 0])\n                scale([3, 1, 8])\n                cylinder(h=25, r=3, $fn=16);\n        }\n    }\n    \n    // Spoons\n    color(color_orange) {\n        // Left spoon\n        translate([-30, 10, 35])\n            rotate([0, 0, -45])\n            cylinder(h=50, r=2, $fn=16);\n        translate([-55, -5, 35])\n            rotate([0, 0, -45])\n            scale([1, 0.2, 5])\n            sphere(r=4, $fn=16);\n            \n        // Right spoon\n        translate([30, 10, 35])\n            rotate([0, 0, 45])\n            cylinder(h=50, r=2, $fn=16);\n        translate([55, -5, 35])\n            rotate([0, 0, 45])\n            scale([1, 0.2, 5])\n            sphere(r=4, $fn=16);\n    }\n    \n    // Arms\n    color(color_yellow) {\n        for(i=[-1,1]) {\n            translate([i*20, 0, 35])\n                rotate([0, 0, i*30])\n                cylinder(h=25, r=5, $fn=16);\n        }\n    }\n    \n    // Legs\n    color(color_yellow) {\n        for(i=[-1,1]) {\n            translate([i*8, 0, 5])\n                cylinder(h=15, r=6, $fn=16);\n        }\n    }\n    \n    // Feet\n    color(color_yellow) {\n        for(i=[-1,1]) {\n            translate([i*8, 0, 0])\n                scale([2, 3, 1])\n                sphere(r=5, $fn=16);\n        }\n    }\n    \n    // Tail\n    color(color_yellow) {\n        translate([0, -20, 20])\n            rotate([90, 0, 0])\n            scale([1, 1, 0.5])\n            cylinder(h=30, r1=8, r2=3, $fn=16);\n    }\n    \n    // Star on forehead\n    color(color_brown) {\n        translate([0, 15, 58])\n            linear_extrude(height=2)\n            polygon(points=[[0,0], [3,8], [8,8], [4,12], [5,18], [0,15], [-5,18], [-4,12], [-8,8], [-3,8]]);\n    }\n}\n\n// Scale to 80mm height\nscale([0.8, 0.8, 0.8])\nkadabra();",
    "renders": true
  },
  {
    "pokemon": "alakazam",
    "openscad_code": "// Alakazam OpenSCAD Model - Medium Complexity\n// Realistic style, 3D printable, 100mm height\n\n// Main colors\ncolor_yellow = [1, 0.8, 0.2];\ncolor_brown = [0.4, 0.2, 0.1];\ncolor_skin = [0.9, 0.7, 0.5];\ncolor_red = [0.8, 0.2, 0.2];\n\n// Overall scale\nscale_factor = 1;\n\nmodule head() {\n    // Main head sphere\n    color(color_yellow)\n    translate([0, 0, 85])\n    scale([0.8, 0.7, 0.9])\n    sphere(10);\n    \n    // Mustache\n    for(i = [-1, 1]) {\n        color(color_brown)\n        translate([i * 6, 8, 83])\n        rotate([0, 0, i * 30])\n        scale([0.3, 1.5, 0.3])\n        cylinder(h=8, r1=2, r2=0.5);\n    }\n    \n    // Eyes\n    for(i = [-1, 1]) {\n        color(color_red)\n        translate([i * 3, 4, 88])\n        scale([0.8, 1.2, 0.5])\n        sphere(2);\n        \n        color([0, 0, 0])\n        translate([i * 3, 4.5, 89])\n        sphere(0.8);\n    }\n    \n    // Nose\n    color(color_skin)\n    translate([0, 7, 85])\n    sphere(1.5);\n    \n    // Mouth\n    color([0, 0, 0])\n    translate([0, 9, 83])\n    scale([2, 0.8, 0.5])\n    sphere(1);\n}\n\nmodule ears() {\n    for(side = [-1, 1]) {\n        color(color_yellow)\n        translate([side * 12, 0, 92])\n        rotate([0, 0, side * 15])\n        rotate([30, 0, 0])\n        scale([0.8, 0.3, 2])\n        cylinder(h=8, r1=3, r2=1);\n        \n        // Inner ear\n        color(color_skin)\n        translate([side * 12, 0.5, 93])\n        rotate([0, 0, side * 15])\n        rotate([30, 0, 0])\n        scale([0.6, 0.2, 1.8])\n        cylinder(h=7, r1=2, r2=0.5);\n    }\n}\n\nmodule body() {\n    // Main torso\n    color(color_yellow)\n    translate([0, 0, 50])\n    scale([1, 0.8, 1.2])\n    cylinder(h=25, r1=12, r2=8);\n    \n    // Chest armor\n    color(color_brown)\n    translate([0, -5, 45])\n    scale([1.2, 0.5, 0.8])\n    sphere(10);\n    \n    // Belt\n    color(color_brown)\n    translate([0, -10, 45])\n    scale([1.3, 0.3, 0.3])\n    cylinder(h=25, r=10);\n}\n\nmodule arms() {\n    for(side = [-1, 1]) {\n        // Upper arm\n        color(color_yellow)\n        translate([side * 15, 0, 65])\n        rotate([0, 0, side * -20])\n        cylinder(h=10, r=3);\n        \n        // Forearm\n        translate([side * 22, -2, 60])\n        rotate([0, 0, side * -45])\n        cylinder(h=12, r=2.5);\n        \n        // Hand\n        translate([side * 28, -4, 55])\n        sphere(3);\n        \n        // Three fingers\n        for(f = [0, 1, 2]) {\n            translate([side * (28 + f * 1.5), -6, 55])\n            scale([0.4, 1, 0.4])\n            cylinder(h=3, r=1);\n        }\n    }\n}\n\nmodule legs() {\n    for(side = [-1, 1]) {\n        // Upper leg\n        color(color_yellow)\n        translate([side * 8, 0, 30])\n        rotate([0, 0, side * 10])\n        cylinder(h=15, r=3);\n        \n        // Lower leg\n        translate([side * 10, 0, 15])\n        rotate([0, 0, side * 5])\n        cylinder(h=12, r=2.5);\n        \n        // Foot\n        translate([side * 11, 2, 5])\n        scale([1.2, 2, 0.8])\n        sphere(3);\n    }\n}\n\nmodule spoons() {\n    for(side = [-1, 1]) {\n        // Spoon handle\n        color([0.7, 0.7, 0.7])\n        translate([side * 35, -10, 60])\n        rotate([0, 0, side * 45])\n        rotate([90, 0, 0])\n        cylinder(h=25, r=1);\n        \n        // Spoon bowl\n        translate([side * 40, -15, 55])\n        rotate([0, 90, 0])\n        scale([1, 1, 0.3])\n        sphere(4);\n    }\n}\n\n// Assembly\nscale([scale_factor, scale_factor, scale_factor]) {\n    head();\n    ears();\n    body();\n    arms();\n    legs();\n    spoons();\n}",
    "renders": true
  },
  {
    "pokemon": "machop",
    "openscad_code": "// Machop Pokemon - Realistic Style, Medium Complexity\n// Height: 80mm, 3D printable design\n\ncolor(\"lightblue\") {\n    // Main body\n    union() {\n        // Torso\n        translate([0, 0, 40]) \n            scale([1.2, 0.8, 1.5]) \n            sphere(15, $fn=20);\n        \n        // Chest plate\n        translate([0, 10, 45]) \n            scale([1, 0.5, 0.8]) \n            cube([30, 8, 20], center=true);\n        \n        // Legs\n        for(side = [-1, 1]) {\n            // Upper legs\n            translate([side * 12, 0, 25]) \n                rotate([0, 10, 0]) \n                scale([0.8, 0.8, 1.2]) \n                cylinder(15, 8, 6, $fn=12);\n            \n            // Lower legs\n            translate([side * 12, 0, 10]) \n                scale([0.7, 0.7, 1]) \n                cylinder(15, 6, 8, $fn=12);\n            \n            // Feet\n            translate([side * 12, 0, 2]) \n                scale([1.2, 2, 0.8]) \n                cube([12, 6, 4], center=true);\n        }\n        \n        // Arms\n        for(side = [-1, 1]) {\n            // Upper arms\n            translate([side * 20, 0, 45]) \n                rotate([0, 0, side * -30]) \n                scale([1, 1, 1.3]) \n                cylinder(15, 7, 6, $fn=12);\n            \n            // Forearms\n            translate([side * 30, 0, 30]) \n                rotate([0, 0, side * -30]) \n                scale([0.9, 0.9, 1.2]) \n                cylinder(12, 6, 8, $fn=12);\n            \n            // Hands\n            translate([side * 36, 0, 18]) \n                scale([1.2, 0.8, 1.5]) \n                sphere(6, $fn=12);\n            \n            // Wrist bands\n            translate([side * 36, 0, 25]) \n                cylinder(3, 8, 8, $fn=12);\n        }\n    }\n}\n\n// Head assembly\ntranslate([0, 0, 65]) {\n    // Main head\n    color(\"lightblue\") \n        scale([1.1, 1, 1.2]) \n        sphere(12, $fn=20);\n    \n    // Snout\n    translate([0, 12, -2]) \n        scale([0.8, 0.6, 0.8]) \n        sphere(8, $fn=15);\n    \n    // Eyes\n    for(side = [-1, 1]) {\n        color(\"red\") {\n            // Eye\n            translate([side * 6, 8, 4]) \n                scale([1.2, 1, 1]) \n                sphere(3, $fn=10);\n            \n            // Eye ridge\n            translate([side * 6, 6, 7]) \n                rotate([0, side * 20, 0]) \n                cube([8, 3, 2], center=true);\n        }\n    }\n    \n    // Mouth\n    translate([0, 15, -2]) \n        color(\"black\") \n        cube([8, 1, 3], center=true);\n    \n    // Head crest\n    translate([0, -8, 10]) \n        color(\"gray\") \n        rotate([0, 0, 0]) \n        scale([0.5, 0.3, 1]) \n        cylinder(8, 12, 3, $fn=8);\n    \n    // Three crest ridges\n    for(i = [-1, 0, 1]) {\n        translate([i * 4, -8, 8]) \n            color(\"gray\") \n            cube([2, 8, 2], center=true);\n    }\n    \n    // Ears\n    for(side = [-1, 1]) {\n        translate([side * 10, 0, 6]) \n            color(\"lightblue\") \n            rotate([0, 0, side * 30]) \n            scale([0.8, 0.5, 1.5]) \n            cylinder(6, 4, 3, $fn=8);\n    }\n}\n\n// Belt\ntranslate([0, 0, 35]) \n    color(\"gold\") \n    difference() {\n        cylinder(5, 25, 25, $fn=20);\n        cylinder(5, 20, 20, $fn=20);\n    }\n\n// Belt buckle\ntranslate([0, 25, 37.5]) \n    color(\"red\") \n    cube([8, 2, 3], center=true);\n\n// Foot pads\nfor(side = [-1, 1]) {\n    translate([side * 12, 0, 2]) \n        color(\"gray\") \n        cube([10, 4, 1], center=true);\n}",
    "renders": true
  },
  {
    "pokemon": "machoke",
    "openscad_code": "// Machoke Pokemon - Medium complexity realistic style\n// Designed for 3D printing with no overhangs\n\n// Overall scale\nscale_factor = 0.8;\n\n// Colors\ncolor_gray = [0.6, 0.6, 0.6];\ncolor_blue = [0.2, 0.3, 0.8];\ncolor_red = [0.8, 0.2, 0.2];\ncolor_beige = [0.9, 0.8, 0.7];\n\n// Main body\nmodule body() {\n    color(color_gray)\n    union() {\n        // Torso\n        translate([0, 0, 10])\n        scale([1.2, 0.8, 1.5])\n        sphere(d=20);\n        \n        // Chest plate\n        translate([0, -6.5, 15])\n        rotate([90, 0, 0])\n        cylinder(h=3, d1=15, d2=18);\n        \n        // Belt\n        translate([0, 0, 8])\n        rotate([90, 0, 0])\n        cylinder(h=4, d=22);\n        \n        // Belt buckle\n        translate([0, 11.5, 8])\n        rotate([90, 0, 0])\n        cylinder(h=1, d=8);\n    }\n}\n\n// Head\nmodule head() {\n    color(color_gray)\n    translate([0, -20, 25])\n    union() {\n        // Main head\n        scale([0.9, 1.1, 1])\n        sphere(d=16);\n        \n        // Snout\n        translate([0, -9, -2])\n        scale([0.6, 0.8, 0.5])\n        sphere(d=12);\n        \n        // Head crest\n        for(i = [-1, 1]) {\n            translate([i * 6, 0, 6])\n            rotate([0, i * 20, 0])\n            cylinder(h=8, d1=4, d2=2);\n        }\n    }\n}\n\n// Arms\nmodule arms() {\n    // Left arm\n    color(color_gray)\n    translate([-12, -8, 15])\n    rotate([0, 0, -30])\n    union() {\n        // Upper arm\n        cylinder(h=12, d=8);\n        \n        // Elbow\n        translate([0, 0, -12])\n        sphere(d=8);\n        \n        // Forearm\n        translate([0, 0, -12])\n        rotate([30, 0, 0])\n        cylinder(h=15, d=7);\n        \n        // Wrist band\n        translate([0, 0, -27])\n        cylinder(h=3, d=9);\n        \n        // Hand\n        translate([0, 0, -30])\n        scale([1.2, 0.8, 0.5])\n        sphere(d=8);\n    }\n    \n    // Right arm - mirrored\n    mirror([1, 0, 0])\n    translate([-12, -8, 15])\n    rotate([0, 0, -30])\n    union() {\n        // Upper arm\n        cylinder(h=12, d=8);\n        \n        // Elbow\n        translate([0, 0, -12])\n        sphere(d=8);\n        \n        // Forearm\n        translate([0, 0, -12])\n        rotate([30, 0, 0])\n        cylinder(h=15, d=7);\n        \n        // Wrist band\n        translate([0, 0, -27])\n        cylinder(h=3, d=9);\n        \n        // Hand\n        translate([0, 0, -30])\n        scale([1.2, 0.8, 0.5])\n        sphere(d=8);\n    }\n}\n\n// Legs\nmodule legs() {\n    // Left leg\n    color(color_blue)\n    translate([-6, 0, 0])\n    union() {\n        // Thigh\n        cylinder(h=15, d=10);\n        \n        // Knee\n        translate([0, 0, -15])\n        sphere(d=10);\n        \n        // Shin\n        translate([0, 0, -15])\n        cylinder(h=12, d=8);\n        \n        // Foot\n        translate([0, 4, -27])\n        scale([1.5, 2, 0.8])\n        sphere(d=8);\n    }\n    \n    // Right leg\n    translate([6, 0, 0])\n    union() {\n        // Thigh\n        cylinder(h=15, d=10);\n        \n        // Knee\n        translate([0, 0, -15])\n        sphere(d=10);\n        \n        // Shin\n        translate([0, 0, -15])\n        cylinder(h=12, d=8);\n        \n        // Foot\n        translate([0, 4, -27])\n        scale([1.5, 2, 0.8])\n        sphere(d=8);\n    }\n}\n\n// Facial features\nmodule face() {\n    translate([0, -27, 25])\n    union() {\n        // Eyes\n        color(color_red)\n        for(i = [-1, 1]) {\n            translate([i * 4, 0, 2])\n            scale([1, 0.5, 0.5])\n            sphere(d=3);\n        }\n        \n        // Mouth\n        color(color_beige)\n        translate([0, -3, -1])\n        scale([2, 0.5, 0.5])\n        sphere(d=3);\n        \n        // Nose\n        color(color_gray)\n        translate([0, -1, 0])\n        sphere(d=2);\n    }\n}\n\n// Power save belt\nmodule belt_details() {\n    color(color_red)\n    translate([0, 0, 8])\n    union() {\n        // Front emblem\n        translate([0, 11.5, 1.5])\n        rotate([90, 0, 0])\n        cylinder(h=0.5, d=6);\n        \n        // Side details\n        for(i = [-1, 1]) {\n            translate([i * 8, 7, 1.5])\n            rotate([90, 0, 0])\n            cylinder(h=0.5, d=4);\n        }\n    }\n}\n\n// Scale and assemble the Pokemon\nscale(scale_factor)\nunion() {\n    body();\n    head();\n    arms();\n    legs();\n    face();\n    belt_details();\n}",
    "renders": true
  },
  {
    "pokemon": "machamp",
    "openscad_code": "// Machamp - Realistic Style\n// Overall height: 90mm, built upright with 45° rotated arms for printability\n\n// Main colors\nskinColor = [0.8, 0.6, 0.4];\nbeltColor = [0.4, 0.2, 0.1];\nshortsColor = [0.2, 0.3, 0.7];\ngrayColor = [0.6, 0.6, 0.6];\n\n// Head module\nmodule head() {\n    color(skinColor)\n    union() {\n        // Main head sphere\n        translate([0, 0, 80])\n            scale([1, 0.9, 1.1])\n            sphere(10);\n        \n        // Jaw\n        translate([0, -6, 75])\n            scale([0.8, 0.6, 0.6])\n            sphere(8);\n        \n        // Crest on top\n        for(i=[-1, 1]) {\n            translate([i*4, 0, 92])\n                rotate([0, i*10, 0])\n                scale([0.3, 0.2, 1])\n                cylinder(h=8, r1=3, r2=0);\n        }\n        \n        // Ears\n        for(i=[-1, 1]) {\n            translate([i*12, 0, 82])\n                rotate([0, 0, i*30])\n                scale([0.5, 0.2, 1])\n                cylinder(h=8, r1=4, r2=0);\n        }\n        \n        // Eyes\n        color(grayColor)\n        for(i=[-1, 1]) {\n            translate([i*5, -2, 83])\n                scale([0.8, 0.4, 0.3])\n                sphere(3);\n            color([0, 0, 0])\n            translate([i*5, -3, 84])\n                sphere(1);\n        }\n        \n        // Mouth\n        color([0.2, 0.1, 0.1])\n        translate([0, -8, 78])\n            scale([1.2, 0.3, 0.5])\n            cube([4, 1, 2], center=true);\n    }\n}\n\n// Torso module\nmodule torso() {\n    color(skinColor)\n    union() {\n        // Chest\n        translate([0, 0, 55])\n            scale([1.2, 0.8, 1.5])\n            sphere(12);\n        \n        // Belt\n        color(beltColor)\n        translate([0, 0, 45])\n            scale([1.4, 0.9, 0.3])\n            cylinder(h=8, r=14);\n        \n        // Shorts\n        color(shortsColor)\n        translate([0, 0, 30])\n            scale([1.3, 0.9, 1.2])\n            cylinder(h=20, r1=13, r2=11);\n        \n        // Abs definition\n        color(skinColor)\n        for(i=[-1, 0, 1]) {\n            translate([i*2, 0, 42])\n                scale([0.5, 0.3, 0.5])\n                cube([2, 1, 6]);\n        }\n    }\n}\n\n// Arm module (with hands)\nmodule arm(side) {\n    color(skinColor)\n    union() {\n        // Upper arm\n        translate([side*18, -5, 70])\n            rotate([0, 0, side*20])\n            rotate([0, 90, 0])\n            cylinder(h=15, r=5);\n        \n        // Lower arm\n        translate([side*28, -12, 65])\n            rotate([0, 0, side*45])\n            rotate([0, 90, 0])\n            cylinder(h=18, r=4);\n        \n        // Hand with 4 fingers\n        translate([side*40, -15, 60])\n            rotate([0, 0, side*60])\n            union() {\n                // Palm\n                scale([1.2, 0.8, 0.5])\n                sphere(6);\n                \n                // Fingers\n                for(i=[-1, 0, 1, 2]) {\n                    translate([i*3, -3, 0])\n                        rotate([0, 90, 0])\n                        scale([0.3, 0.3, 1])\n                        cylinder(h=8, r1=2, r2=1);\n                }\n                \n                // Thumb\n                translate([side*-4, -2, 0])\n                    rotate([0, 0, side*90])\n                    scale([0.3, 0.3, 0.8])\n                    cylinder(h=6, r1=2, r2=1);\n            }\n    }\n}\n\n// Leg module\nmodule leg(side) {\n    color(skinColor)\n    union() {\n        // Upper leg\n        translate([side*7, 0, 25])\n            rotate([0, 0, side*10])\n            cylinder(h=18, r=6);\n        \n        // Lower leg\n        translate([side*8, 0, 10])\n            rotate([0, 0, side*5])\n            cylinder(h=15, r=5);\n        \n        // Foot\n        translate([side*9, -2, 0])\n            scale([1.5, 2.5, 0.8])\n            cube([8, 12, 4], center=true);\n    }\n}\n\n// Assembly\nhead();\ntorso();\n\n// Arms positioned for printing\narm(1);  // Right arm\narm(-1); // Left arm\n\n// Legs\nleg(1);  // Right leg\nleg(-1); // Left leg",
    "renders": true
  },
  {
    "pokemon": "bellsprout",
    "openscad_code": "// Bellsprout Pokemon - Realistic Style\n// Medium complexity OpenSCAD model\n\n// Colors\n$fa = 2;\n$fs = 0.5;\n\nmodule bellsprout_body() {\n    // Main stem body\n    color([0.2, 0.8, 0.1])\n    union() {\n        // Bottom bulb\n        translate([0, 0, 0])\n        scale([1, 1, 1.2])\n        sphere(8);\n        \n        // Stem neck\n        translate([0, 0, 9])\n        cylinder(25, 6, 3);\n        \n        // Head bulb\n        translate([0, 0, 34])\n        scale([1.3, 1.3, 1.5])\n        sphere(7);\n    }\n}\n\nmodule bellsprout_mouth() {\n    // Yellow lips/mouth\n    color([1, 0.9, 0.1])\n    difference() {\n        // Upper lip\n        translate([0, 6, 34])\n        scale([1.5, 0.8, 1])\n        sphere(6);\n        \n        // Mouth opening\n        translate([0, 9, 34])\n        rotate([90, 0, 0])\n        cylinder(5, 2.5, 0, $fn=20);\n    }\n    \n    // Lower lip\n    color([1, 0.9, 0.1])\n    translate([0, 3, 30])\n    scale([1.3, 0.6, 0.8])\n    sphere(5);\n}\n\nmodule bellsprout_leaves() {\n    // Left leaf\n    color([0.15, 0.7, 0.05])\n    translate([-8, 0, 20])\n    rotate([0, 30, -45])\n    scale([0.3, 1, 0.1])\n    cylinder(15, 5, 2, $fn=3);\n    \n    // Right leaf\n    translate([8, 0, 20])\n    rotate([0, 30, 45])\n    scale([0.3, 1, 0.1])\n    cylinder(15, 5, 2, $fn=3);\n}\n\nmodule bellsprout_eyes() {\n    // Left eye\n    color([0, 0, 0])\n    translate([-3, 5, 37])\n    rotate([0, 20, 0])\n    scale([1, 1.2, 0.5])\n    sphere(1.5);\n    \n    // Right eye\n    translate([3, 5, 37])\n    rotate([0, 20, 0])\n    scale([1, 1.2, 0.5])\n    sphere(1.5);\n    \n    // Eye highlights\n    color([1, 1, 1])\n    translate([-2.5, 5.5, 37.5])\n    sphere(0.5);\n    translate([3.5, 5.5, 37.5])\n    sphere(0.5);\n}\n\nmodule bellsproot_roots() {\n    // Root system for stability\n    color([0.4, 0.3, 0.1])\n    for (i = [0:4]) {\n        rotate([0, 0, i * 72])\n        translate([0, 6 - i, -2])\n        rotate([90, 0, 0])\n        cylinder(8, 1.5, 0.5, $fn=8);\n    }\n}\n\n// Assembly\nunion() {\n    bellsprout_body();\n    bellsprout_mouth();\n    bellsprout_leaves();\n    bellsprout_eyes();\n    bellsprout_roots();\n}",
    "renders": true
  },
  {
    "pokemon": "weepinbell",
    "openscad_code": "// Weepinbell - Medium complexity realistic style\n// Size: ~80mm height for 3D printing\n\n// Main colors\n$body_color = \"#5FBF5F\";\n$leaf_color = \"#7FBF5F\";\n$face_color = \"#FFFF00\";\n$eye_color = \"#000000\";\n$mouth_color = \"#8B4513\";\n\nmodule weepinbell_body() {\n    color($body_color)\n    union() {\n        // Main bell body\n        translate([0, 0, 30])\n        scale([1, 1.2, 1.5])\n        sphere(r=25, $fn=30);\n        \n        // Bottom taper\n        translate([0, 0, 10])\n        scale([0.8, 1, 0.5])\n        sphere(r=25, $fn=30);\n        \n        // Top dome\n        translate([0, 0, 50])\n        scale([1, 1.1, 0.8])\n        sphere(r=25, $fn=30);\n    }\n}\n\nmodule leaf() {\n    color($leaf_color)\n    rotate([0, 0, 45])\n    scale([0.3, 1, 0.1])\n    cylinder(h=40, r1=15, r2=5, $fn=20);\n}\n\nmodule leaves() {\n    // Top leaf\n    translate([0, 0, 60])\n    rotate([90, 0, 0])\n    leaf();\n    \n    // Side leaf\n    translate([-20, 0, 55])\n    rotate([60, 0, 30])\n    leaf();\n    \n    // Other side leaf\n    translate([20, 0, 55])\n    rotate([60, 0, -30])\n    leaf();\n}\n\nmodule mouth() {\n    color($mouth_color)\n    difference() {\n        // Mouth cavity\n        translate([0, 25, 30])\n        rotate([90, 0, 0])\n        scale([1, 1.5, 1])\n        cylinder(h=30, r1=18, r2=12, $fn=30);\n        \n        // Remove front face for opening\n        translate([0, 30, 30])\n        cube([40, 20, 50], center=true);\n    }\n    \n    // Lips\n    color($body_color)\n    translate([0, 22, 30])\n    rotate([90, 0, 0])\n    scale([1.1, 1.6, 0.5])\n    cylinder(h=25, r1=18, r2=12, $fn=30);\n}\n\nmodule eyes() {\n    // Eye sockets\n    color($eye_color)\n    union() {\n        // Left eye\n        translate([-15, 15, 45])\n        rotate([0, 30, 0])\n        scale([1, 1.2, 0.5])\n        sphere(r=5, $fn=20);\n        \n        // Right eye\n        translate([15, 15, 45])\n        rotate([0, -30, 0])\n        scale([1, 1.2, 0.5])\n        sphere(r=5, $fn=20);\n        \n        // Eye highlights\n        color(\"#FFFFFF\")\n        translate([-13, 17, 47])\n        sphere(r=1.5, $fn=10);\n        \n        translate([17, 17, 47])\n        sphere(r=1.5, $fn=10);\n    }\n}\n\nmodule face_markings() {\n    color($face_color)\n    union() {\n        // Eye mask\n        translate([0, 15, 40])\n        scale([1.2, 0.8, 0.5])\n        sphere(r=20, $fn=30);\n        \n        // Mouth surround\n        translate([0, 20, 20])\n        scale([1, 1.2, 0.8])\n        sphere(r=15, $fn=30);\n    }\n}\n\nmodule spots() {\n    color(\"#3F9F3F\")\n    for(i = [0:4]) {\n        rotate([0, 0, i*72])\n        translate([0, 0, 25 + i*5])\n        scale([1.2 - i*0.15, 1.2 - i*0.15, 0.3])\n        sphere(r=5, $fn=20);\n    }\n}\n\nmodule stem() {\n    color($leaf_color)\n    translate([0, 0, 65])\n    cylinder(h=10, r1=8, r2=5, $fn=20);\n}\n\n// Assembly\nunion() {\n    weepinbell_body();\n    leaves();\n    stem();\n    mouth();\n    face_markings();\n    eyes();\n    spots();\n}",
    "renders": true
  },
  {
    "pokemon": "victreebel",
    "openscad_code": "// Victreebel Pokemon - Realistic Style, Medium Complexity\n\n// Overall dimensions\n$fa = 2;\n$fs = 0.5;\n\n// Main body color - green\nColor_Green = [0.2, 0.6, 0.2];\nColor_LightGreen = [0.4, 0.8, 0.4];\nColor_Yellow = [0.9, 0.8, 0.2];\nColor_Red = [0.8, 0.2, 0.2];\nColor_White = [0.9, 0.9, 0.9];\n\nmodule victreebel() {\n    // Main bell-shaped body\n    color(Color_Green) {\n        // Base bell shape using sphere and cylinder\n        translate([0, 0, 0]) {\n            difference() {\n                union() {\n                    cylinder(h = 40, r1 = 25, r2 = 20, center = false);\n                    translate([0, 0, 40]) sphere(d = 50);\n                }\n                // Hollow out the inside\n                translate([0, 0, -1]) cylinder(h = 42, r1 = 22, r2 = 17, center = false);\n                translate([0, 0, 40]) sphere(d = 47);\n            }\n        }\n        \n        // Leaf collar around neck\n        for(i = [0:7]) {\n            rotate([0, 0, i * 45]) {\n                translate([0, 22, 35]) {\n                    rotate([0, 90, 0]) {\n                        scale([1, 0.3, 0.5]) {\n                            color(Color_LightGreen) sphere(d = 15);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Mouth opening\n    color(Color_Red) {\n        translate([0, 0, 60]) {\n            difference() {\n                sphere(d = 40);\n                translate([0, 0, -5]) sphere(d = 38);\n                // Teeth indentations\n                for(i = [0:3]) {\n                    rotate([0, 0, i * 90 + 45]) {\n                        translate([15, 0, 0]) cube([8, 2, 10], center = true);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Eyes\n    color(Color_Red) {\n        translate([-12, 20, 55]) sphere(d = 8);\n        translate([12, 20, 55]) sphere(d = 8);\n    }\n    \n    // Eye pupils\n    color(Color_White) {\n        translate([-12, 22, 57]) sphere(d = 3);\n        translate([12, 22, 57]) sphere(d = 3);\n    }\n    \n    // Leaf on back\n    color(Color_LightGreen) {\n        translate([0, -30, 35]) {\n            rotate([0, -20, 0]) {\n                scale([1, 0.2, 2]) {\n                    sphere(d = 20);\n                }\n                // Leaf veins\n                for(i = [-1:1]) {\n                    translate([i * 5, 0, 0]) {\n                        scale([0.1, 0.1, 1]) {\n                            cylinder(h = 35, r1 = 2, r2 = 2);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Tentacle-like vine\n    color(Color_Green) {\n        translate([0, 0, 0]) {\n            rotate([90, 0, 0]) {\n                for(i = [0:4]) {\n                    translate([0, 0, -i * 5]) {\n                        rotate([0, 0, i * 15]) {\n                            cylinder(h = 5, r1 = 3 - i * 0.3, r2 = 3 - (i + 1) * 0.3);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Spots on body\n    color(Color_Yellow) {\n        for(pos = [[-15, 10, 30], [15, -10, 35], [-10, -15, 45]]) {\n            translate(pos) sphere(d = 4);\n        }\n    }\n}\n\n// Scale to reasonable print size\nscale([0.8, 0.8, 0.8]) victreebel();",
    "renders": true
  },
  {
    "pokemon": "tentacool",
    "openscad_code": "// Tentacool Pokemon - Realistic Style - Medium Complexity\n// OpenSCAD code for 3D printing\n\n// Overall scale factor for printing\nscale_factor = 1.5;\n\n// Colors (RGB values approximated)\ncolor_blue = [0.3, 0.6, 0.9];\ncolor_red = [0.8, 0.2, 0.2];\ncolor_clear = [0.7, 0.85, 1, 0.6];\n\n// Main body (bell shape)\nmodule body() {\n    color(color_blue)\n    union() {\n        // Main bell\n        translate([0, 0, 10])\n        scale([1, 1, 0.8])\n        sphere(d=30 * scale_factor);\n        \n        // Bottom rim\n        translate([0, 0, 2])\n        cylinder(h=4 * scale_factor, r1=15 * scale_factor, r2=12 * scale_factor);\n        \n        // Top dome\n        translate([0, 0, 20])\n        sphere(d=20 * scale_factor);\n    }\n}\n\n// Eyes\nmodule eyes() {\n    for (i = [-1, 1]) {\n        // Eye stalk\n        color(color_blue)\n        translate([i * 8 * scale_factor, 0, 25 * scale_factor])\n        rotate([0, 45 * i, 0])\n        cylinder(h=8 * scale_factor, r=2 * scale_factor);\n        \n        // Eye\n        color(color_red)\n        translate([i * 12 * scale_factor, 0, 27 * scale_factor])\n        rotate([0, 45 * i, 0])\n        sphere(d=5 * scale_factor);\n        \n        // Pupil\n        color([0, 0, 0])\n        translate([i * 13 * scale_factor, 0, 29 * scale_factor])\n        rotate([0, 45 * i, 0])\n        sphere(d=2 * scale_factor);\n    }\n}\n\n// Tentacles\nmodule tentacles() {\n    for (i = [0:4]) {\n        angle = i * 72;\n        color(color_blue)\n        translate([0, 0, 5 * scale_factor])\n        rotate([0, 0, angle])\n        translate([12 * scale_factor, 0, 0])\n        rotate([90, 0, 0])\n        cylinder(h=25 * scale_factor, r1=3 * scale_factor, r2=1.5 * scale_factor);\n    }\n}\n\n// Clear dome on head\nmodule dome() {\n    color(color_clear)\n    translate([0, 0, 20 * scale_factor])\n    sphere(d=18 * scale_factor);\n}\n\n// Blue gem on forehead\nmodule gem() {\n    color(color_blue)\n    translate([0, 0, 30 * scale_factor])\n    sphere(d=4 * scale_factor);\n}\n\n// Bottom detail rings\nmodule rings() {\n    color([0.2, 0.4, 0.7])\n    for (h = [2, 6, 10]) {\n        translate([0, 0, h * scale_factor])\n        cylinder(h=1 * scale_factor, r=14 * scale_factor, center=true);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    eyes();\n    tentacles();\n    dome();\n    gem();\n    rings();\n}",
    "renders": true
  },
  {
    "pokemon": "tentacruel",
    "openscad_code": "// Tentacruel - Realistic Medium Complexity\n// 3D printable Pokemon model using basic OpenSCAD primitives\n\nmodule body() {\n    // Main spherical body with slight flattening\n    color(\"blue\") \n    difference() {\n        sphere(12);\n        translate([0, 0, -10]) cube(30, center=true);\n    }\n}\n\nmodule dome_head() {\n    // Transparent dome on top\n    color(\"cyan\", 0.6) \n    translate([0, 0, 12])\n    scale([1, 1, 0.7])\n    sphere(8);\n}\n\nmodule eyes() {\n    // Large red eyes with black pupils\n    for(i = [-1, 1]) {\n        translate([i * 6, 8, 8]) {\n            color(\"red\") sphere(3);\n            color(\"black\") translate([0, 0, 2.5]) sphere(1.5);\n            color(\"white\") translate([0.8, 0.8, 2.7]) sphere(0.5);\n        }\n    }\n}\n\nmodule beak() {\n    // Yellow beak below eyes\n    color(\"gold\") \n    translate([0, 10, 2]) {\n        rotate([90, 0, 0])\n        cylinder(6, 4, 2);\n    }\n}\n\nmodule tentacle(i) {\n    // Individual tentacle with taper\n    angle = i * 45;\n    translate([0, 0, 0])\n    rotate([0, 0, angle])\n    translate([10, 0, -8]) {\n        rotate([0, 90, 0])\n        color(\"blue\") {\n            // Base segment\n            cylinder(15, 3, 2.5);\n            translate([0, 15, 0])\n            cylinder(12, 2.5, 2);\n            translate([0, 27, 0])\n            cylinder(10, 2, 1.5);\n            \n            // Red orbs at tips\n            color(\"red\") \n            translate([0, 37, 0])\n            sphere(2);\n        }\n    }\n}\n\nmodule tentacles() {\n    // Generate 8 tentacles in circle\n    for(i = [0:7]) {\n        tentacle(i);\n    }\n}\n\nmodule back_spikes() {\n    // Spikes on back\n    for(i = [0:5]) {\n        angle = i * 60;\n        rotate([0, 0, angle])\n        translate([0, -10, 5]) {\n            color(\"blue\") \n            scale([1, 0.5, 3])\n            sphere(2);\n        }\n    }\n}\n\nmodule mouth() {\n    // Mouth opening under body\n    color(\"darkblue\") \n    translate([0, 5, -11])\n    rotate([0, 0, 180])\n    cylinder(3, 4, 0);\n}\n\n// Assembly\nunion() {\n    body();\n    dome_head();\n    eyes();\n    beak();\n    tentacles();\n    back_spikes();\n    mouth();\n}\n\n// Print orientation - flip for better printing\nrotate([180, 0, 0])\ntranslate([0, 0, 0]) {\n    body();\n    dome_head();\n    eyes();\n    beak();\n    tentacles();\n    back_spikes();\n    mouth();\n}",
    "renders": true
  },
  {
    "pokemon": "geodude",
    "openscad_code": "// Geodude - Rock/Ground type Pokemon\n// Realistic style, medium complexity\n\n// Main color for Geodude's rock body\nrock_color = [0.6, 0.5, 0.4];\n\n// Eye color\neye_color = [0.1, 0.1, 0.1];\n\n// Muscle color\nmuscle_color = [0.8, 0.7, 0.6];\n\n// Scale factor for 3D printing (target 60mm height)\nscale_factor = 1;\n\nmodule geodude_body() {\n    color(rock_color) {\n        // Main rock body - irregular boulder shape\n        union() {\n            // Central core\n            sphere(r = 15 * scale_factor, $fn = 32);\n            \n            // Rock protrusions\n            translate([12, 8, 5]) rotate([15, 20, -10]) \n                scale([1.2, 0.8, 0.9]) sphere(r = 8 * scale_factor, $fn = 24);\n            translate([-10, -12, 8]) rotate([-25, -15, 30]) \n                scale([0.9, 1.1, 0.7]) sphere(r = 7 * scale_factor, $fn = 24);\n            translate([8, -15, -5]) rotate([35, 10, -20]) \n                scale([0.8, 1.2, 0.8]) sphere(r = 6 * scale_factor, $fn = 24);\n            translate([-8, 10, -10]) rotate([-20, -25, 15]) \n                scale([1.1, 0.9, 1.0]) sphere(r = 7 * scale_factor, $fn = 24);\n        }\n    }\n}\n\nmodule geodude_eyes() {\n    // Left eye\n    translate([-8 * scale_factor, 18 * scale_factor, 12 * scale_factor]) {\n        color(eye_color) {\n            sphere(r = 2.5 * scale_factor, $fn = 16);\n        }\n        // Eye highlight\n        translate([0.5, -0.5, 1.8]) {\n            color([1, 1, 1]) {\n                sphere(r = 0.8 * scale_factor, $fn = 8);\n            }\n        }\n    }\n    \n    // Right eye\n    translate([8 * scale_factor, 18 * scale_factor, 12 * scale_factor]) {\n        color(eye_color) {\n            sphere(r = 2.5 * scale_factor, $fn = 16);\n        }\n        // Eye highlight\n        translate([0.5, -0.5, 1.8]) {\n            color([1, 1, 1]) {\n                sphere(r = 0.8 * scale_factor, $fn = 8);\n            }\n        }\n    }\n}\n\nmodule geodude_muscles() {\n    color(muscle_color) {\n        // Left arm muscles\n        translate([-20 * scale_factor, 0, 5 * scale_factor]) {\n            rotate([90, 0, 0]) \n                cylinder(h = 15 * scale_factor, r1 = 6 * scale_factor, r2 = 4 * scale_factor, $fn = 16);\n        }\n        \n        // Right arm muscles\n        translate([20 * scale_factor, 0, 5 * scale_factor]) {\n            rotate([90, 0, 0]) \n                cylinder(h = 15 * scale_factor, r1 = 6 * scale_factor, r2 = 4 * scale_factor, $fn = 16);\n        }\n    }\n}\n\nmodule geodude_hands() {\n    color(rock_color) {\n        // Left fist\n        translate([-35 * scale_factor, 0, 5 * scale_factor]) {\n            sphere(r = 8 * scale_factor, $fn = 16);\n        }\n        \n        // Right fist\n        translate([35 * scale_factor, 0, 5 * scale_factor]) {\n            sphere(r = 8 * scale_factor, $fn = 16);\n        }\n    }\n}\n\nmodule geodude_rock_texture() {\n    // Add small rock details\n    for(i = [-1:1], j = [-1:1], k = [-1:1]) {\n        if(i != 0 || j != 0 || k != 0) {\n            translate([i * 5 * scale_factor, j * 5 * scale_factor, k * 5 * scale_factor]) {\n                sphere(r = 1.5 * scale_factor, $fn = 8);\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Body\n    geodude_body();\n    \n    // Eyes\n    geodude_eyes();\n    \n    // Arms\n    geodude_muscles();\n    \n    // Hands\n    geodude_hands();\n    \n    // Rock texture details\n    geodude_rock_texture();\n}",
    "renders": true
  },
  {
    "pokemon": "graveler",
    "openscad_code": "// Graveler Pokemon - Medium Complexity Realistic Style\n// Overall size approximately 60mm\n\nmodule graveler() {\n    color(\"dimgray\") {\n        // Main body - central core\n        union() {\n            // Central boulder body\n            translate([0, 0, 10])\n                scale([1.2, 0.9, 1.1])\n                sphere(d=40);\n            \n            // Left shoulder boulder\n            translate([-25, -5, 25])\n                scale([0.9, 0.8, 0.8])\n                sphere(d=25);\n            \n            // Right shoulder boulder\n            translate([25, -5, 25])\n                scale([0.9, 0.8, 0.8])\n                sphere(d=25);\n            \n            // Lower body boulder\n            translate([0, 0, -5])\n                scale([1.1, 1, 0.8])\n                sphere(d=35);\n        }\n    }\n    \n    // Arms\n    color(\"darkgray\") {\n        // Left arm segments\n        translate([-35, 0, 25]) {\n            rotate([0, 0, 45])\n                cylinder(h=25, d1=15, d2=12);\n            \n            translate([15, 8, 0])\n                rotate([0, 0, 45])\n                cylinder(h=20, d1=12, d2=10);\n            \n            // Left hand\n            translate([28, 15, 0])\n                sphere(d=18);\n        }\n        \n        // Right arm segments\n        translate([35, 0, 25]) {\n            rotate([0, 0, -45])\n                cylinder(h=25, d1=15, d2=12);\n            \n            translate([-15, 8, 0])\n                rotate([0, 0, -45])\n                cylinder(h=20, d1=12, d2=10);\n            \n            // Right hand\n            translate([-28, 15, 0])\n                sphere(d=18);\n        }\n    }\n    \n    // Legs\n    color(\"dimgray\") {\n        // Left leg\n        translate([-15, -5, -10]) {\n            cylinder(h=20, d1=18, d2=15);\n            \n            // Left foot\n            translate([0, 0, -22])\n                scale([1.2, 1.5, 0.6])\n                sphere(d=20);\n        }\n        \n        // Right leg\n        translate([15, -5, -10]) {\n            cylinder(h=20, d1=18, d2=15);\n            \n            // Right foot\n            translate([0, 0, -22])\n                scale([1.2, 1.5, 0.6])\n                sphere(d=20);\n        }\n    }\n    \n    // Face features\n    color(\"red\") {\n        // Eyes\n        translate([-8, 18, 28])\n            scale([1, 1.5, 0.5])\n            sphere(d=6);\n        \n        translate([8, 18, 28])\n            scale([1, 1.5, 0.5])\n            sphere(d=6);\n    }\n    \n    // Rocky spikes on back\n    color(\"darkgray\") {\n        for(i = [0:45:315]) {\n            rotate([0, 0, i])\n                translate([0, -18, 15])\n                    scale([0.8, 0.8, 1.2])\n                    cylinder(h=12, d1=8, d2=5);\n        }\n    }\n    \n    // Crystal formations on back\n    color(\"mediumpurple\") {\n        for(i = [0:90:270]) {\n            rotate([0, 0, i])\n                translate([0, -22, 25])\n                    scale([0.5, 0.5, 1])\n                    cylinder(h=8, d1=6, d2=3);\n        }\n    }\n    \n    // Mouth\n    color(\"black\") {\n        translate([0, 12, 25])\n            scale([1.5, 0.8, 0.5])\n            cube([10, 3, 2], center=true);\n    }\n    \n    // Rocky texture bumps\n    color(\"gray\") {\n        for(i = [0:30:330]) {\n            rotate([0, 0, i])\n                translate([0, 0, 20])\n                    sphere(d=3);\n        }\n        \n        for(i = [0:45:315]) {\n            rotate([0, 0, i])\n                translate([15, 0, 10])\n                    sphere(d=2);\n        }\n    }\n}\n\n// Generate the model\ngraveler();",
    "renders": true
  },
  {
    "pokemon": "golem",
    "openscad_code": "// Golem Pokemon - OpenSCAD\n// Medium complexity realistic style\n\n$fn = 32;\n\n// Main colors\ngolem_body = [0.4, 0.35, 0.3];\ngolem_shell = [0.6, 0.55, 0.5];\ngolem_markings = [0.3, 0.25, 0.2];\neye_color = [0.9, 0.9, 0.9];\npupil_color = [0.1, 0.1, 0.1];\n\n// Scale factor for 80mm height\nscale_factor = 0.8;\n\nmodule golem_pokemon() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        // Main body\n        union() {\n            // Lower body sphere\n            color(golem_body)\n            translate([0, 0, 15])\n            scale([1.2, 1.1, 0.9])\n            sphere(15);\n            \n            // Upper body\n            color(golem_body)\n            translate([0, 0, 30])\n            scale([1.1, 1, 0.7])\n            sphere(12);\n            \n            // Shell segments\n            shell_segments();\n            \n            // Head\n            head();\n            \n            // Arms\n            left_arm();\n            right_arm();\n            \n            // Legs\n            left_leg();\n            right_leg();\n            \n            // Rock spikes\n            rock_spikes();\n        }\n    }\n}\n\nmodule shell_segments() {\n    // Back shell\n    color(golm_shell)\n    translate([0, 12, 25])\n    rotate([90, 0, 0])\n    cylinder(h=3, r1=20, r2=18);\n    \n    // Shell rings\n    for(i=[0:2]) {\n        color(golem_shell)\n        translate([0, 12.5, 20 + i*5])\n        rotate([90, 0, 0])\n        cylinder(h=2, r1=18-i*2, r2=18-i*2);\n    }\n}\n\nmodule head() {\n    // Main head\n    color(golem_body)\n    translate([0, 5, 40])\n    sphere(10);\n    \n    // Eyes\n    color(eye_color)\n    translate([-5, 8, 42])\n    sphere(2);\n    translate([5, 8, 42])\n    sphere(2);\n    \n    // Pupils\n    color(pupil_color)\n    translate([-4.5, 9, 43])\n    sphere(1);\n    translate([5.5, 9, 43])\n    sphere(1);\n    \n    // Mouth\n    color(golem_markings)\n    translate([0, 6, 38])\n    rotate([90, 0, 0])\n    cylinder(h=0.5, r1=3, r2=2.5);\n}\n\nmodule left_arm() {\n    color(golem_body)\n    translate([-15, 0, 25])\n    rotate([0, 0, 30])\n    cylinder(h=12, r1=5, r2=4);\n    \n    color(golem_body)\n    translate([-20, -2, 22])\n    rotate([0, 0, 45])\n    sphere(6);\n}\n\nmodule right_arm() {\n    color(golem_body)\n    translate([15, 0, 25])\n    rotate([0, 0, -30])\n    cylinder(h=12, r1=5, r2=4);\n    \n    color(golem_body)\n    translate([20, -2, 22])\n    rotate([0, 0, -45])\n    sphere(6);\n}\n\nmodule left_leg() {\n    color(golem_body)\n    translate([-8, -5, 5])\n    cylinder(h=10, r1=6, r2=5);\n    \n    color(golem_body)\n    translate([-8, -5, 0])\n    sphere(5);\n}\n\nmodule right_leg() {\n    color(golem_body)\n    translate([8, -5, 5])\n    cylinder(h=10, r1=6, r2=5);\n    \n    color(golem_body)\n    translate([8, -5, 0])\n    sphere(5);\n}\n\nmodule rock_spikes() {\n    // Top spike\n    color(golem_shell)\n    translate([0, 0, 48])\n    scale([1, 1, 1.5])\n    cylinder(h=8, r1=3, r2=0);\n    \n    // Side spikes\n    for(angle=[0:120:360]) {\n        color(golem_shell)\n        rotate([0, 0, angle])\n        translate([15, 0, 35])\n        rotate([30, 0, 0])\n        cylinder(h=6, r1=2, r2=0);\n    }\n}\n\ngolem_pokemon();",
    "renders": true
  },
  {
    "pokemon": "ponyta",
    "openscad_code": "// Ponyta OpenSCAD Model - Realistic Style, Medium Complexity\n// 3D printable at ~80mm height\n\nmodule body() {\n    // Main torso\n    color(\"white\")\n    difference() {\n        scale([1.2, 0.8, 1.1])\n        sphere(r=15);\n        \n        // Remove bottom for flat base\n        translate([0, 0, -15])\n        cube([50, 50, 15], center=true);\n    }\n}\n\nmodule neck() {\n    color(\"white\")\n    translate([0, 20, 5])\n    rotate([70, 0, 0])\n    cylinder(h=20, r1=8, r2=5, center=true);\n}\n\nmodule head() {\n    color(\"white\")\n    translate([0, 28, 20])\n    scale([0.8, 1.2, 1.1])\n    sphere(r=10);\n}\n\nmodule mane() {\n    // Flaming mane using stacked cylinders\n    for(i=[0:3]) {\n        color(\"orange\")\n        rotate([0, i*15, 0])\n        translate([0, 25+i*2, 25+i*2])\n        scale([0.3, 0.3, 1.5])\n        cylinder(h=5, r=8);\n        \n        color(\"yellow\")\n        translate([0, 25+i*2, 30+i*2])\n        sphere(r=4-i);\n    }\n}\n\nmodule tail() {\n    // Flaming tail\n    color(\"orange\")\n    translate([-20, 0, 15])\n    rotate([0, 45, -30])\n    cylinder(h=25, r1=5, r2=2);\n    \n    color(\"yellow\")\n    translate([-25, -5, 18])\n    sphere(r=6);\n}\n\nmodule legs() {\n    // Four legs with hooves\n    for(pos=[[-8, -10], [8, -10], [-7, 10], [7, 10]]) {\n        color(\"white\")\n        translate([pos[0], pos[1], -5])\n        cylinder(h=20, r=3);\n        \n        color(\"black\")\n        translate([pos[0], pos[1], -15])\n        cylinder(h=3, r=4);\n    }\n}\n\nmodule ears() {\n    // Pointed ears\n    for(side=[-1, 1]) {\n        color(\"white\")\n        translate([side*7, 25, 28])\n        rotate([0, side*10, 0])\n        scale([0.5, 0.3, 1])\n        cylinder(h=8, r=4);\n    }\n}\n\nmodule eyes() {\n    // Large eyes with pupils\n    for(side=[-1, 1]) {\n        color(\"indigo\")\n        translate([side*4, 30, 20])\n        sphere(r=2);\n        \n        color(\"black\")\n        translate([side*4.5, 31, 21])\n        sphere(r=1);\n    }\n}\n\nmodule horn() {\n    // Small horn on forehead\n    color(\"gold\")\n    translate([0, 28, 32])\n    rotate([0, 0, 0])\n    cylinder(h=5, r1=1, r2=0);\n}\n\nmodule markings() {\n    // Pokemon-specific flame markings\n    color(\"yellow\")\n    translate([0, 15, 10])\n    rotate([90, 0, 0])\n    scale([1, 0.3, 1])\n    cylinder(h=0.5, r=12);\n    \n    color(\"orange\")\n    for(angle=[0:60:359]) {\n        rotate([0, 0, angle])\n        translate([10, 15, 10])\n        scale([0.3, 0.3, 0.3])\n        sphere(r=2);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    neck();\n    head();\n    mane();\n    tail();\n    legs();\n    ears();\n    eyes();\n    horn();\n    markings();\n}\n\n// Scale to appropriate size\nscale([0.8, 0.8, 0.8])",
    "renders": true
  },
  {
    "pokemon": "rapidash",
    "openscad_code": "// Rapidash OpenSCAD Model - Medium Complexity Realistic Style\n// Dimensions: ~80mm long, 60mm tall, 30mm wide\n\n// Main colors\nbodyColor = \"#F5A623\";\nmaneColor = \"#FF6B35\";\nhornColor = \"#FFF5E1\";\neyeColor = \"#000000\";\nhoofColor = \"#333333\";\n\n// Body module\nmodule body() {\n    color(bodyColor)\n    union() {\n        // Torso\n        translate([0, 0, 20])\n            scale([1.2, 0.8, 1])\n            sphere(d=25);\n        \n        // Chest\n        translate([10, 0, 15])\n            sphere(d=20);\n        \n        // Hindquarters\n        translate([-15, 0, 18])\n            scale([1.3, 1, 1.2])\n            sphere(d=22);\n    }\n}\n\n// Head module\nmodule head() {\n    color(bodyColor)\n    translate([20, 0, 40])\n    union() {\n        // Main head shape\n        scale([1.2, 0.8, 1])\n        sphere(d=18);\n        \n        // Snout\n        translate([8, 0, -2])\n            scale([1.5, 0.7, 0.8])\n            sphere(d=12);\n        \n        // Ears\n        color(bodyColor)\n        translate([0, 8, 8])\n            rotate([0, 30, 0])\n            cylinder(h=12, d1=5, d2=2);\n        translate([0, -8, 8])\n            rotate([0, -30, 0])\n            cylinder(h=12, d1=5, d2=2);\n        \n        // Horn\n        color(hornColor)\n        translate([2, 0, 12])\n            cylinder(h=15, d1=3, d2=0);\n        \n        // Eyes\n        color(eyeColor)\n        translate([9, 4, 3])\n            sphere(d=3);\n        translate([9, -4, 3])\n            sphere(d=3);\n        \n        // Nostrils\n        translate([13, 2, -1])\n            sphere(d=1.5);\n        translate([13, -2, -1])\n            sphere(d=1.5);\n    }\n}\n\n// Mane module\nmodule mane() {\n    color(maneColor)\n    for(i = [0:30:150]) {\n        rotate([0, 0, i])\n        translate([16, 0, 42])\n            rotate([10 + sin(i)*5, 0, 0])\n            cylinder(h=15, d1=4, d2=2);\n    }\n    \n    // Flames on neck\n    for(i = [0:20:80]) {\n        rotate([0, 0, -i])\n        translate([10 - i*0.3, 0, 40 - i*0.2])\n            cylinder(h=10, d1=3, d2=1);\n    }\n}\n\n// Tail module\nmodule tail() {\n    color(maneColor)\n    union() {\n        // Base\n        translate([-25, 0, 25])\n            rotate([0, 20, 0])\n            cylinder(h=15, d1=8, d2=5);\n        \n        // Flames\n        for(i = [0:30:180]) {\n            rotate([0, 20 + i*0.1, i])\n            translate([-35, 0, 25])\n                cylinder(h=12, d1=4, d2=2);\n        }\n    }\n}\n\n// Leg module\nmodule leg(x, y, z, angle, length) {\n    color(bodyColor)\n    union() {\n        // Upper leg\n        translate([x, y, z])\n            rotate([angle, 0, 0])\n            cylinder(h=length*0.6, d=8);\n        \n        // Lower leg\n        translate([x, y - sin(angle)*length*0.6, z - cos(angle)*length*0.6])\n            rotate([angle + 20, 0, 0])\n            cylinder(h=length*0.4, d=6);\n        \n        // Hoof\n        color(hoofColor)\n        translate([x, \n                  y - sin(angle)*length*0.6 - sin(angle+20)*length*0.4, \n                  z - cos(angle)*length*0.6 - cos(angle+20)*length*0.4])\n            cylinder(h=4, d1=6, d2=8);\n    }\n}\n\n// Leg positions\nmodule legs() {\n    // Front legs\n    leg(15, 7, 15, 20, 25);\n    leg(15, -7, 15, 20, 25);\n    \n    // Back legs\n    leg(-12, 8, 15, -20, 28);\n    leg(-12, -8, 15, -20, 28);\n}\n\n// Assembly\nrotate([0, 0, 0])\nunion() {\n    body();\n    head();\n    mane();\n    tail();\n    legs();\n}\n\n// Ground base for printing stability\ncolor(\"#8B4513\")\ntranslate([0, 0, -2])\n    cube([80, 40, 2], center=true);",
    "renders": true
  },
  {
    "pokemon": "slowpoke",
    "openscad_code": "// Slowpoke - Realistic Medium Complexity\n// Overall size ~60mm tall\n\nmodule slowpoke() {\n    color(\"pink\") {\n        // Main body - rounded teardrop shape\n        union() {\n            // Main torso\n            translate([0, 0, 10]) \n                scale([1, 0.8, 1.2])\n                    sphere(d=35, $fn=50);\n            \n            // Belly bulge\n            translate([0, 0, 5])\n                scale([0.9, 0.7, 0.9])\n                    sphere(d=30, $fn=30);\n        }\n        \n        // Head section\n        translate([0, 12, 35])\n            scale([1.1, 1, 0.9])\n                sphere(d=25, $fn=40);\n    }\n    \n    // Snout\n    color(\"pink\") {\n        translate([0, 18, 30])\n            rotate([30, 0, 0])\n                scale([0.6, 0.5, 1.2])\n                    cylinder(d1=15, d2=10, h=12, $fn=30);\n    }\n    \n    // Eyes\n    color(\"white\") {\n        for(x = [-6, 6]) {\n            translate([x, 16, 34])\n                sphere(d=4, $fn=20);\n        }\n    }\n    \n    color(\"black\") {\n        for(x = [-6, 6]) {\n            translate([x, 17, 35])\n                sphere(d=2, $fn=15);\n        }\n    }\n    \n    // Mouth\n    color(\"darkslategray\") {\n        translate([0, 20, 28])\n            rotate([0, 30, 0])\n                cylinder(d=8, h=1, $fn=20);\n    }\n    \n    // Ears\n    color(\"pink\") {\n        // Right ear\n        translate([12, 8, 42])\n            rotate([0, -20, 20])\n                scale([0.3, 1, 2])\n                    cylinder(d1=5, d2=8, h=20, $fn=20);\n        \n        // Left ear\n        translate([-12, 8, 42])\n            rotate([0, -20, -20])\n                scale([0.3, 1, 2])\n                    cylinder(d1=5, d2=8, h=20, $fn=20);\n    }\n    \n    // Arms\n    color(\"pink\") {\n        for(x = [-15, 15]) {\n            translate([x, 0, 20])\n                rotate([0, 0, x > 0 ? -20 : 20])\n                    scale([0.4, 0.4, 1])\n                        cylinder(d=8, h=12, $fn=20);\n        }\n    }\n    \n    // Legs\n    color(\"pink\") {\n        for(x = [-10, 10]) {\n            translate([x, -8, 5])\n                scale([0.6, 0.7, 0.8])\n                    sphere(d=12, $fn=20);\n        }\n    }\n    \n    // Tail base\n    color(\"pink\") {\n        translate([0, -15, 15])\n            rotate([0, 30, 0])\n                scale([0.6, 0.6, 1.5])\n                    cylinder(d=12, h=25, $fn=30);\n    }\n    \n    // Tail curl\n    color(\"pink\") {\n        translate([0, -35, 10])\n            rotate([0, -20, 0])\n                scale([0.5, 0.5, 0.5])\n                    sphere(d=15, $fn=30);\n    }\n    \n    // Tail tip\n    color(\"white\") {\n        translate([0, -40, 8])\n            sphere(d=8, $fn=20);\n    }\n    \n    // Back ridge pattern\n    color(\"lightcoral\") {\n        for(i = [0:3]) {\n            translate([0, -10 + i*5, 30 - i*4])\n                scale([0.1, 2, 0.3])\n                    sphere(d=8, $fn=8);\n        }\n    }\n}\n\n// Generate the model\nslowpoke();",
    "renders": true
  },
  {
    "pokemon": "slowbro",
    "openscad_code": "// Slowbro Pokemon - Medium Complexity Realistic Style\n// 3D printable model with proper wall thickness\n\n// Color definitions\npink = [0.95, 0.75, 0.85];\nbeige = [0.95, 0.85, 0.75];\noff_white = [0.98, 0.95, 0.90];\ngray = [0.6, 0.6, 0.65];\nblack = [0.1, 0.1, 0.1];\nred = [0.85, 0.2, 0.2];\n\n// Global scale for 3D printing\nscale_factor = 0.8;\n\nmodule slowbro_body() {\n    color(pink)\n    union() {\n        // Main body - rounded torso\n        translate([0, 0, 15])\n            scale([1.2, 1, 1.1])\n            sphere(15, $fn=32);\n        \n        // Belly\n        translate([0, -10, 12])\n            scale([1.1, 0.8, 0.9])\n            sphere(12, $fn=32);\n    }\n}\n\nmodule shell_on_back() {\n    color(gray)\n    union() {\n        // Main spiral shell\n        translate([-12, 8, 15])\n            rotate([0, 15, 0])\n            scale([1.3, 1.3, 0.8])\n            sphere(12, $fn=32);\n        \n        // Shell spiral detail\n        for(i=[0:30:330]) {\n            rotate([0, 0, i])\n            translate([-18, 12, 18])\n                scale([0.3, 0.3, 1.2])\n                cylinder(h=2, r=3, $fn=16);\n        }\n        \n        // Shell opening\n        difference() {\n            translate([-15, 12, 18])\n                sphere(8, $fn=32);\n            translate([-15, 12, 18])\n                sphere(6, $fn=32);\n        }\n    }\n}\n\nmodule head() {\n    color(pink)\n    union() {\n        // Main head sphere\n        translate([0, -20, 25])\n            scale([0.9, 1.1, 1])\n            sphere(12, $fn=32);\n        \n        // Snout\n        translate([0, -30, 25])\n            scale([0.7, 0.8, 0.6])\n            sphere(8, $fn=32);\n        \n        // Eyes\n        color(off_white)\n        translate([-5, -25, 28])\n            sphere(3, $fn=16);\n        translate([5, -25, 28])\n            sphere(3, $fn=16);\n        \n        // Pupils\n        color(black)\n        translate([-5, -26, 29])\n            sphere(1.5, $fn=16);\n        translate([5, -26, 29])\n            sphere(1.5, $fn=16);\n        \n        // Mouth\n        color(red)\n        translate([0, -33, 24])\n            scale([1.2, 0.5, 0.5])\n            sphere(2, $fn=16);\n    }\n}\n\nmodule ears() {\n    color(pink)\n    union() {\n        // Left ear\n        translate([-8, -22, 35])\n            rotate([30, 0, -20])\n            scale([0.5, 2, 0.3])\n            cylinder(h=8, r=3, $fn=16);\n        \n        // Right ear\n        translate([8, -22, 35])\n            rotate([30, 0, 20])\n            scale([0.5, 2, 0.3])\n            cylinder(h=8, r=3, $fn=16);\n    }\n}\n\nmodule arms() {\n    color(pink)\n    union() {\n        // Left arm\n        translate([-15, -5, 15])\n            rotate([0, 0, -30])\n            scale([0.8, 3, 0.8])\n            cylinder(h=8, r=3, $fn=16);\n        \n        // Right arm\n        translate([15, -5, 15])\n            rotate([0, 0, 30])\n            scale([0.8, 3, 0.8])\n            cylinder(h=8, r=3, $fn=16);\n        \n        // Hands\n        translate([-18, -8, 15])\n            sphere(4, $fn=16);\n        translate([18, -8, 15])\n            sphere(4, $fn=16);\n    }\n}\n\nmodule legs() {\n    color(pink)\n    union() {\n        // Left leg\n        translate([-8, 0, 0])\n            scale([0.8, 0.8, 1.2])\n            cylinder(h=10, r=4, $fn=16);\n        \n        // Right leg\n        translate([8, 0, 0])\n            scale([0.8, 0.8, 1.2])\n            cylinder(h=10, r=4, $fn=16);\n        \n        // Feet\n        translate([-8, 0, 0])\n            scale([1.2, 2, 0.5])\n            sphere(4, $fn=16);\n        translate([8, 0, 0])\n            scale([1.2, 2, 0.5])\n            sphere(4, $fn=16);\n    }\n}\n\nmodule tail() {\n    color(pink)\n    union() {\n        // Main tail\n        translate([0, 12, 12])\n            rotate([0, 20, 0])\n            scale([0.8, 3, 0.8])\n            cylinder(h=15, r=3, $fn=16);\n        \n        // Tail tip - Shellder\n        color(purple = [0.6, 0.4, 0.7])\n        translate([0, 25, 15])\n            scale([1.2, 1.2, 1])\n            sphere(5, $fn=32);\n        \n        // Shellder spike\n        color(gray)\n        translate([0, 30, 15])\n            rotate([0, 0, 0])\n            scale([0.3, 1, 0.3])\n            cylinder(h=4, r=2, $fn=8);\n    }\n}\n\n// Build complete Slowbro\nscale([scale_factor, scale_factor, scale_factor])\nunion() {\n    slowbro_body();\n    shell_on_back();\n    head();\n    ears();\n    arms();\n    legs();\n    tail();\n}",
    "renders": true
  },
  {
    "pokemon": "magnemite",
    "openscad_code": "// Magnemite in realistic style - medium complexity\n// Overall height ~80mm, 3D printable\n\n$fa = 2;\n$fs = 0.5;\n\nmodule body_sphere() {\n    color(\"Silver\") \n    difference() {\n        sphere(d = 40);\n        \n        // Eye sockets\n        translate([-12, 12, 12]) rotate([0, 0, 0]) sphere(d = 12);\n        translate([12, 12, 12]) rotate([0, 0, 0]) sphere(d = 12);\n        \n        // Bottom flat\n        translate([0, 0, -20]) cube([50, 50, 20], center = true);\n    }\n}\n\nmodule eye() {\n    color(\"Red\")\n    union() {\n        // Iris\n        sphere(d = 8);\n        // Pupil\n        color(\"Black\")\n        translate([0, 0, 3])\n        sphere(d = 4);\n    }\n}\n\nmodule magnet() {\n    color(\"Silver\")\n    union() {\n        // Cylinder body\n        cylinder(h = 25, d1 = 15, d2 = 18);\n        \n        // Top cap\n        translate([0, 0, 25])\n        cylinder(h = 3, d = 20);\n        \n        // Bottom cap\n        translate([0, 0, 0])\n        cylinder(h = 3, d = 20);\n        \n        // Side screws\n        for(i = [0:120:359]) {\n            rotate([0, 0, i])\n            translate([9, 0, 12.5])\n            cylinder(h = 8, d = 3);\n        }\n    }\n}\n\nmodule screw() {\n    color(\"Silver\")\n    rotate([90, 0, 0])\n    cylinder(h = 8, d = 5);\n}\n\nmodule eyebrow() {\n    color(\"Gray\")\n    rotate([15, 0, 0])\n    scale([1, 0.3, 1])\n    sphere(d = 15);\n}\n\nmodule main_body() {\n    union() {\n        body_sphere();\n        \n        // Left eye\n        translate([-12, 12, 12])\n        eye();\n        \n        // Right eye\n        translate([12, 12, 12])\n        eye();\n        \n        // Eyebrows\n        translate([-12, 20, 18])\n        eyebrow();\n        translate([12, 20, 18])\n        mirror([1, 0, 0]) eyebrow();\n        \n        // Side screws\n        translate([0, 20, 0]) screw();\n        translate([0, -20, 0]) screw();\n        translate([20, 0, 0]) screw();\n        translate([-20, 0, 0]) screw();\n    }\n}\n\nmodule left_magnet() {\n    translate([-30, 0, 0])\n    rotate([90, 0, 0])\n    magnet();\n}\n\nmodule right_magnet() {\n    translate([30, 0, 0])\n    rotate([90, 0, 0])\n    magnet();\n}\n\nmodule top_magnet() {\n    translate([0, 0, 30])\n    rotate([0, 0, 0])\n    magnet();\n}\n\n// Main assembly\nunion() {\n    main_body();\n    left_magnet();\n    right_magnet();\n    top_magnet();\n}",
    "renders": true
  },
  {
    "pokemon": "magneton",
    "openscad_code": "// Realistic Magneton OpenSCAD Model\n// Medium complexity, 3D printable\n\n$fn = 32;\n\n// Main dimensions\nmagnet_radius = 12;\nmagnet_thickness = 5;\neye_radius = 2.5;\nscrew_radius = 1.5;\nbody_gap = 2;\nsupport_thickness = 3;\n\n// Color definitions\nsilver = [0.75, 0.75, 0.8];\nred = [0.8, 0.2, 0.2];\nblack = [0.1, 0.1, 0.1];\nyellow = [0.9, 0.8, 0.2];\n\n// Module for single magneton disk\nmodule magneton_disk(x_pos, y_pos, z_pos) {\n    translate([x_pos, y_pos, z_pos]) {\n        // Main disk body\n        color(silver)\n        difference() {\n            cylinder(h = magnet_thickness, r = magnet_radius);\n            // Center hole for screw\n            cylinder(h = magnet_thickness + 0.1, r = screw_radius);\n        }\n        \n        // Eyes\n        translate([magnet_radius * 0.5, magnet_radius * 0.3, magnet_thickness])\n        color(red)\n        sphere(r = eye_radius);\n        \n        translate([magnet_radius * 0.5, -magnet_radius * 0.3, magnet_thickness])\n        color(red)\n        sphere(r = eye_radius);\n        \n        // Eye pupils\n        translate([magnet_radius * 0.5 + 0.7, magnet_radius * 0.3, magnet_thickness + eye_radius - 0.5])\n        color(black)\n        sphere(r = 0.8);\n        \n        translate([magnet_radius * 0.5 + 0.7, -magnet_radius * 0.3, magnet_thickness + eye_radius - 0.5])\n        color(black)\n        sphere(r = 0.8);\n        \n        // Side magnets\n        for (i = [0:2]) {\n            rotate([0, 0, i * 120])\n            translate([magnet_radius + 3, 0, magnet_thickness/2])\n            color(silver)\n            cylinder(h = 8, r = 2.5);\n        }\n        \n        // Top screw head\n        translate([0, 0, magnet_thickness])\n        color(yellow)\n        cylinder(h = 2, r = 3);\n    }\n}\n\n// Module for support structure between disks\nmodule support() {\n    color(silver)\n    difference() {\n        // Main support ring\n        cylinder(h = support_thickness, r = magnet_radius + 5);\n        // Hollow center\n        cylinder(h = support_thickness + 0.1, r = magnet_radius - 2);\n    }\n}\n\n// Main assembly\nunion() {\n    // First disk (top)\n    magneton_disk(0, 0, 0);\n    \n    // Support structure\n    translate([0, 0, magnet_thickness])\n    support();\n    \n    // Second disk (middle)\n    translate([0, 0, magnet_thickness + support_thickness])\n    magneton_disk(0, 0, 0);\n    \n    // Second support\n    translate([0, 0, magnet_thickness * 2 + support_thickness])\n    support();\n    \n    // Third disk (bottom)\n    translate([0, 0, magnet_thickness * 2 + support_thickness * 2])\n    magneton_disk(0, 0, 0);\n    \n    // Side magnetic connections\n    translate([magnet_radius + 8, 0, magnet_thickness + support_thickness/2])\n    color(silver)\n    rotate([0, 90, 0])\n    cylinder(h = 10, r = 3);\n    \n    translate([-magnet_radius - 8, 0, magnet_thickness + support_thickness/2])\n    color(silver)\n    rotate([0, 90, 0])\n    cylinder(h = 10, r = 3);\n    \n    // Diagonal support arms\n    translate([magnet_radius + 5, magnet_radius + 5, magnet_thickness * 2 + support_thickness * 2])\n    color(silver)\n    rotate([0, 45, 0])\n    cylinder(h = 15, r = 2);\n    \n    translate([-magnet_radius - 5, -magnet_radius - 5, magnet_thickness * 2 + support_thickness * 2])\n    color(silver)\n    rotate([0, 45, 0])\n    cylinder(h = 15, r = 2);\n}",
    "renders": true
  },
  {
    "pokemon": "farfetchd",
    "openscad_code": "// Farfetch'd Pokemon - Realistic Style (Medium Complexity)\n// Overall dimensions: ~80mm tall\n\n// Color definitions\n$fn = 32;\n\n// Main body module\nmodule farfetchd() {\n    union() {\n        // Body (brown duck body)\n        color([0.5, 0.35, 0.2]) {\n            // Torso - elongated oval\n            translate([0, 0, 20])\n                scale([1.2, 0.8, 1.3])\n                sphere(r=15);\n            \n            // Belly (lighter brown)\n            color([0.65, 0.45, 0.3]) {\n                translate([0, -12, 18])\n                    scale([0.8, 0.5, 0.8])\n                    sphere(r=12);\n            }\n        }\n        \n        // Head\n        color([0.5, 0.35, 0.2]) {\n            translate([0, 0, 45])\n                sphere(r=12);\n            \n            // Beak\n            color([0.9, 0.7, 0.2]) {\n                translate([0, 12, 42])\n                    rotate([30, 0, 0])\n                    scale([0.8, 2, 0.8])\n                    cylinder(h=10, r1=5, r2=0);\n            }\n            \n            // Eyes\n            color([0, 0, 0]) {\n                translate([-4, 8, 48]) sphere(r=1.5);\n                translate([4, 8, 48]) sphere(r=1.5);\n            }\n            \n            // Eyebrows\n            color([0.3, 0.2, 0.1]) {\n                translate([-6, 12, 50])\n                    rotate([0, 0, 30])\n                    scale([0.3, 2, 0.3])\n                    cylinder(h=3, r=1);\n                translate([6, 12, 50])\n                    rotate([0, 0, -30])\n                    scale([0.3, 2, 0.3])\n                    cylinder(h=3, r=1);\n            }\n        }\n        \n        // Wings\n        module wing(side) {\n            translate([side * 15, 0, 35]) {\n                rotate([0, 0, side * -20]) {\n                    color([0.5, 0.35, 0.2]) {\n                        scale([0.3, 1.5, 0.8])\n                            rotate([0, 30, 0])\n                            cylinder(h=20, r1=8, r2=5);\n                    }\n                }\n            }\n        }\n        wing(1);\n        wing(-1);\n        \n        // Legs\n        module leg(side) {\n            translate([side * 8, -5, 15]) {\n                color([0.9, 0.7, 0.2]) {\n                    // Upper leg\n                    cylinder(h=15, r=3);\n                    \n                    // Foot\n                    translate([0, 0, -8])\n                        rotate([0, 90, 0])\n                        scale([1.5, 0.5, 0.8])\n                        cylinder(h=8, r=3);\n                }\n            }\n        }\n        leg(1);\n        leg(-1);\n        \n        // Leek (signature item)\n        color([0.2, 0.8, 0.2]) {\n            translate([20, 15, 30]) {\n                rotate([0, 0, -45]) {\n                    // Leek stalk\n                    cylinder(h=35, r1=2, r2=1.5);\n                    \n                    // Leek leaves\n                    translate([0, 0, 35])\n                        rotate([30, 0, 0])\n                        scale([1, 0.2, 3])\n                        sphere(r=4);\n                    \n                    // Leek tip\n                    translate([0, 0, -5])\n                        cylinder(h=5, r1=1.5, r2=0);\n                }\n            }\n        }\n        \n        // Tail feathers\n        color([0.5, 0.35, 0.2]) {\n            translate([0, -15, 25]) {\n                rotate([30, 0, 0]) {\n                    // Main tail\n                    scale([0.3, 2, 0.8])\n                        cylinder(h=12, r1=4, r2=2);\n                    \n                    // Side tail feathers\n                    translate([0, 6, 2])\n                        rotate([0, 15, 0])\n                        scale([0.2, 1.5, 0.6])\n                        cylinder(h=10, r1=3, r2=1);\n                    \n                    translate([0, -6, 2])\n                        rotate([0, -15, 0])\n                        scale([0.2, 1.5, 0.6])\n                        cylinder(h=10, r1=3, r2=1);\n                }\n            }\n        }\n    }\n}\n\n// Create the model\nfarfetchd();",
    "renders": true
  },
  {
    "pokemon": "doduo",
    "openscad_code": "// Doduo OpenSCAD Model - Realistic Style, Medium Complexity\n// Scale: 80mm tall\n\n// Colors\nbrown = [101/255, 67/255, 33/255];\ntan = [194/255, 154/255, 108/255];\nblack = [0, 0, 0];\nwhite = [1, 1, 1];\nred = [220/255, 20/255, 60/255];\n\n// Main module\nmodule doduo() {\n    union() {\n        // First head\n        translate([-15, 0, 30]) head(1);\n        \n        // Second head\n        translate([15, 0, 30]) head(2);\n        \n        // Shared body\n        body();\n        \n        // Legs\n        translate([-10, 0, 0]) leg();\n        translate([10, 0, 0]) leg();\n        \n        // Tail\n        translate([0, -20, 5]) tail();\n    }\n}\n\n// Head module\nmodule head(id) {\n    // Head base\n    color(brown) {\n        sphere(12);\n        \n        // Beak\n        translate([0, 0, -12]) {\n            // Upper beak\n            rotate([id == 1 ? -20 : 20, 0, 0]) {\n                scale([1, 0.8, 1.5]) sphere(8);\n            }\n            \n            // Lower beak\n            rotate([id == 1 ? 20 : -20, 0, 0]) {\n                translate([0, 0, -8]) {\n                    scale([0.9, 0.7, 1.2]) sphere(7);\n                }\n            }\n        }\n    }\n    \n    // Eyes\n    color(white) {\n        translate([id == 1 ? -6 : 6, 5, 5]) {\n            sphere(3);\n        }\n    }\n    \n    color(black) {\n        translate([id == 1 ? -6 : 6, 5, 6]) {\n            sphere(1.5);\n        }\n    }\n    \n    // Eye brow ridge\n    color(black) {\n        translate([id == 1 ? -6 : 6, 4, 8]) {\n            rotate([90, 0, id == 1 ? 20 : -20]) {\n                scale([0.3, 1.5, 0.3]) cylinder(4, 1, 1);\n            }\n        }\n    }\n    \n    // Neck\n    color(brown) {\n        translate([0, 0, -15]) {\n            scale([0.6, 0.6, 2]) sphere(10);\n        }\n    }\n}\n\n// Body module\nmodule body() {\n    color(brown) {\n        union() {\n            // Main body\n            scale([1.2, 1.5, 1]) sphere(20);\n            \n            // Chest\n            translate([0, 10, -5]) {\n                scale([0.8, 0.5, 0.8]) sphere(15);\n            }\n            \n            // Back hump\n            translate([0, -10, 5]) {\n                scale([1, 0.8, 0.6]) sphere(18);\n            }\n        }\n    }\n    \n    // Belly patch\n    color(tan) {\n        translate([0, 15, -15]) {\n            scale([0.6, 0.4, 0.3]) sphere(20);\n        }\n    }\n}\n\n// Leg module\nmodule leg() {\n    color(brown) {\n        // Upper leg\n        translate([0, 0, 0]) {\n            rotate([0, 0, 10]) {\n                scale([0.4, 0.4, 1.2]) cylinder(15, 5, 4);\n            }\n        }\n        \n        // Lower leg\n        translate([0, 0, -15]) {\n            rotate([0, 0, 5]) {\n                scale([0.3, 0.3, 1]) cylinder(12, 4, 3);\n            }\n        }\n        \n        // Foot\n        translate([0, 5, -27]) {\n            scale([1.2, 2, 0.6]) sphere(5);\n        }\n        \n        // Toes\n        for(i = [-1, 0, 1]) {\n            translate([i * 3, 8, -27]) {\n                scale([0.8, 0.5, 0.5]) sphere(3);\n            }\n        }\n    }\n}\n\n// Tail module\nmodule tail() {\n    color(brown) {\n        // Tail base\n        translate([0, 0, 0]) {\n            rotate([20, 0, 0]) {\n                scale([0.8, 0.8, 1.5]) sphere(8);\n            }\n        }\n        \n        // Tail feathers\n        for(i = [-1, 0, 1]) {\n            color(i == 0 ? brown : tan) {\n                translate([i * 3, -5, 2]) {\n                    rotate([45, i * 10, 0]) {\n                        scale([0.3, 1.5, 0.1]) cube([3, 12, 1]);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Generate the model\ndoduo();",
    "renders": true
  },
  {
    "pokemon": "dodrio",
    "openscad_code": "// Dodrio Pokemon - Realistic Style, Medium Complexity\n// 3D printable model with no overhangs\n\n// Scale factor for overall size\nscale_factor = 0.4;\n\n// Main colors\ncolor_body = [139/255, 69/255, 19/255];    // Brown\ncolor_belly = [245/255, 222/255, 179/255]; // Beige\ncolor_neck = [160/255, 82/255, 45/255];    // Darker brown\ncolor_beak = [255/255, 215/255, 0/255];    // Gold\ncolor_eyes = [0/255, 0/255, 0/255];        // Black\ncolor_feet = [255/255, 140/255, 0/255];    // Orange\n\n// Body module\nmodule body() {\n    color(color_body)\n    union() {\n        // Main body - egg shaped\n        scale([1, 0.8, 1.2])\n            sphere(r=15);\n            \n        // Belly patch\n        color(color_belly)\n        translate([0, -10, -10])\n            scale([1, 0.5, 0.3])\n                sphere(r=12);\n    }\n}\n\n// Neck module (reusable for all three necks)\nmodule neck(height = 30, angle = 0, lean = 0) {\n    color(color_neck)\n    rotate([0, lean, angle])\n    translate([0, 0, height/2])\n        scale([0.5, 0.5, 1])\n            cylinder(h=height, r1=6, r2=4, $fn=8);\n}\n\n// Head module\nmodule head() {\n    color(color_body)\n    union() {\n        // Main head shape\n        sphere(r=8);\n        \n        // Beak\n        color(color_beak)\n        translate([0, 0, -8])\n            rotate([0, 20, 0])\n                scale([1, 0.3, 2])\n                    cylinder(h=12, r1=4, r2=0, $fn=6);\n        \n        // Eyes\n        color(color_eyes)\n        for(side = [-1, 1]) {\n            translate([side * 4, 3, 3])\n                sphere(r=1.5);\n        }\n        \n        // Feather crest\n        color(color_body)\n        translate([0, 0, 8])\n            rotate([0, 0, 0])\n                scale([0.2, 1, 2])\n                    cylinder(h=6, r1=3, r2=0, $fn=4);\n    }\n}\n\n// Leg module\nmodule leg(x_pos = 0, y_pos = 0) {\n    color(color_feet)\n    union() {\n        // Upper leg\n        color(color_body)\n        translate([x_pos, y_pos, -20])\n            rotate([0, 0, 0])\n                cylinder(h=15, r=2.5, $fn=8);\n        \n        // Lower leg\n        translate([x_pos, y_pos, -35])\n            cylinder(h=12, r=2, $fn=8);\n        \n        // Foot\n        translate([x_pos, y_pos + 3, -47])\n            scale([2, 1, 0.5])\n                sphere(r=3);\n    }\n}\n\n// Tail feathers\nmodule tail() {\n    color(color_body)\n    for(i = [0, 120, 240]) {\n        rotate([0, 0, i])\n        translate([-18, 0, -5])\n            rotate([30, 0, 0])\n                scale([0.5, 2, 0.1])\n                    cylinder(h=10, r1=2, r2=0, $fn=4);\n    }\n}\n\n// Main assembly\nscale([scale_factor, scale_factor, scale_factor])\nunion() {\n    // Body\n    body();\n    \n    // Three necks and heads\n    neck(25, -30, 10);\n    translate([0, 0, 25]) rotate([0, 10, -30]) head();\n    \n    neck(30, 0, 5);\n    translate([0, 0, 30]) rotate([0, 5, 0]) head();\n    \n    neck(25, 30, 10);\n    translate([0, 0, 25]) rotate([0, 10, 30]) head();\n    \n    // Legs\n    leg(8, 5);\n    leg(-8, 5);\n    leg(0, -8);\n    \n    // Tail\n    tail();\n}",
    "renders": true
  },
  {
    "pokemon": "seel",
    "openscad_code": "// Realistic Seel Pokemon - Medium Complexity\n// Scale: ~70mm long\n\n// Colors\nseel_white = [0.95,0.95,0.95];\nseel_light_blue = [0.7,0.85,0.95];\nseel_blue = [0.4,0.6,0.8];\nseel_dark_blue = [0.2,0.3,0.5];\nseel_black = [0.1,0.1,0.1];\nseel_tan = [0.9,0.8,0.7];\n\n// Main body module\nmodule seel_body() {\n    color(seel_white) {\n        // Main body - elongated sphere\n        scale([1.2, 0.8, 0.9]) sphere(d=40);\n        \n        // Neck extension\n        translate([20, 0, 5]) rotate([0, -20, 0]) \n            scale([1.5, 0.8, 0.8]) sphere(d=25);\n        \n        // Tail base\n        translate([-25, 0, -5]) rotate([0, 15, 0])\n            scale([0.8, 0.7, 0.6]) sphere(d=30);\n    }\n}\n\n// Head module\nmodule seel_head() {\n    color(seel_white) {\n        // Main head sphere\n        translate([35, 0, 15]) scale([1.1, 0.9, 0.9]) sphere(d=30);\n        \n        // Snout\n        translate([50, 0, 12]) rotate([0, -30, 0])\n            scale([1.5, 0.7, 0.7]) sphere(d=20);\n    }\n    \n    // Blue upper head pattern\n    color(seel_light_blue) {\n        translate([40, 0, 25]) scale([0.9, 0.6, 0.3])\n            difference() {\n                sphere(d=25);\n                translate([0, 0, -5]) cube([50,50,10], center=true);\n            }\n    }\n}\n\n// Horn module\nmodule seel_horn() {\n    color(seel_light_blue) {\n        translate([30, 0, 30]) {\n            // Base\n            cylinder(h=5, d1=8, d2=10);\n            // Spiral horn\n            for(i=[0:15:360]) {\n                rotate([0, 0, i]) \n                    translate([0, 2*sin(i*3), 2+2*i/360*15])\n                    rotate([90, 0, 0])\n                    scale([0.3, 0.3, 1])\n                    cylinder(h=3, d=4);\n            }\n        }\n    }\n}\n\n// Ear modules\nmodule seel_ear(side) {\n    color(seel_white) {\n        translate([30, side*12, 22]) rotate([0, -20, side*10]) {\n            // Main ear\n            scale([0.8, 0.2, 1.2]) sphere(d=15);\n            // Inner ear\n            color(seel_light_blue) \n                translate([0, -1, 0]) scale([0.7, 0.5, 0.9])\n                sphere(d=12);\n        }\n    }\n}\n\n// Eye module\nmodule seel_eye(side) {\n    translate([45, side*8, 18]) {\n        // White\n        color(seel_white) sphere(d=8);\n        // Pupil\n        color(seel_black) translate([2, 0, 0]) sphere(d=5);\n        // Highlight\n        color(white) translate([3, 1.5, 2]) sphere(d=2);\n    }\n}\n\n// Nose module\nmodule seel_nose() {\n    color(seel_tan) {\n        // Nose tip\n        translate([55, 0, 12]) rotate([0, -30, 0])\n            scale([0.8, 0.6, 0.6]) sphere(d=8);\n        // Nostrils\n        color(seel_black) {\n            translate([57, 2, 12]) rotate([0, -30, 0]) sphere(d=2);\n            translate([57, -2, 12]) rotate([0, -30, 0]) sphere(d=2);\n        }\n    }\n}\n\n// Tail module\nmodule seel_tail() {\n    color(seel_white) {\n        // Tail segments\n        for(i=[0:3]) {\n            translate([-30-i*8, 0, -8-i*3]) \n                rotate([0, i*10, 0])\n                scale([0.8-i*0.1, 0.6-i*0.05, 0.4-i*0.05])\n                sphere(d=20-i*3);\n        }\n        \n        // Tail flippers\n        color(seel_light_blue) {\n            translate([-45, 0, -15]) rotate([0, 30, 0]) {\n                // Left flipper\n                translate([0, 8, 0]) rotate([0, 0, -20])\n                    scale([0.1, 1.2, 0.8]) sphere(d=15);\n                // Right flipper\n                translate([0, -8, 0]) rotate([0, 0, 20])\n                    scale([0.1, 1.2, 0.8]) sphere(d=15);\n            }\n        }\n    }\n}\n\n// Fin modules\nmodule seel_fin(pos, rot) {\n    color(seel_light_blue) {\n        translate(pos) rotate(rot) {\n            // Main fin\n            scale([1.5, 0.1, 0.8]) sphere(d=15);\n            // Fin details\n            for(i=[-1:1]) {\n                translate([0, 0, i*4]) \n                    scale([0.8, 0.1, 0.2])\n                    sphere(d=10);\n            }\n        }\n    }\n}\n\n// Body markings\nmodule seel_markings() {\n    color(seel_blue) {\n        // Side markings\n        for(side=[-1,1]) {\n            translate([10, side*15, 0]) {\n                // Top marking\n                rotate([90, 0, 0]) \n                    scale([1, 0.3, 1]) cylinder(h=3, d=20);\n                // Bottom marking\n                translate([0, 0, -10])\n                    rotate([90, 0, 0]) \n                    scale([0.8, 0.3, 0.8]) cylinder(h=3, d=15);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main body parts\n    seel_body();\n    seel_head();\n    seel_horn();\n    seel_tail();\n    \n    // Symmetrical features\n    for(side=[-1,1]) {\n        seel_ear(side);\n        seel_eye(side);\n    }\n    \n    // Single features\n    seel_nose();\n    \n    // Fins\n    seel_fin([0, 0, -5], [0, 0, 0]); // Dorsal fin\n    seel_fin([15, 20, -8], [90, 0, 0]); // Right side fin\n    seel_fin([15, -20, -8], [90, 0, 0]); // Left side fin\n    \n    // Markings\n    seel_markings();\n}",
    "renders": true
  },
  {
    "pokemon": "dewgong",
    "openscad_code": "// Dewgong - Medium complexity realistic style\n// Size: ~80mm long\n// Colors: White body, light blue accents\n\n// Scale factor for overall size\nscale_factor = 0.4;\n\n// Main body module\nmodule dewgong_body() {\n    color(\"white\") {\n        // Main torso - elongated sphere\n        translate([0, 0, 15]) \n            scale([1.8, 1, 1]) \n                sphere(r=20);\n        \n        // Belly - flatter sphere\n        translate([0, 0, 8]) \n            scale([2, 1.2, 0.6]) \n                sphere(r=20);\n    }\n}\n\n// Head with snout\nmodule dewgong_head() {\n    color(\"white\") {\n        // Main head sphere\n        translate([-25, 0, 25]) \n            sphere(r=18);\n        \n        // Snout extension\n        translate([-45, 0, 22]) \n            scale([1.5, 0.8, 0.8]) \n                sphere(r=10);\n    }\n    \n    // Blue forehead marking\n    color([0.7, 0.85, 1]) {\n        translate([-30, 0, 35]) \n            scale([0.8, 0.4, 0.2]) \n                sphere(r=15);\n    }\n}\n\n// Horns/ears\nmodule horns() {\n    color(\"white\") {\n        // Left horn\n        translate([-25, -15, 40]) {\n            rotate([0, -30, -20]) \n                cylinder(h=15, r1=5, r2=2);\n        }\n        \n        // Right horn\n        translate([-25, 15, 40]) {\n            rotate([0, -30, 20]) \n                cylinder(h=15, r1=5, r2=2);\n        }\n    }\n}\n\n// Tail\nmodule tail() {\n    color(\"white\") {\n        // Tail base\n        translate([35, 0, 15]) \n            rotate([0, 0, 20]) \n                cylinder(h=30, r1=12, r2=8);\n        \n        // Tail flukes\n        for(i = [-1, 1]) {\n            translate([55, i*8, 15]) {\n                rotate([0, 0, i*30]) \n                    scale([1.5, 0.3, 1]) \n                        sphere(r=10);\n            }\n        }\n    }\n}\n\n// Flippers\nmodule flippers() {\n    color(\"white\") {\n        // Front flippers\n        for(side = [-1, 1]) {\n            translate([-5, side*25, 12]) {\n                rotate([0, 0, side*30]) \n                    scale([1.2, 0.3, 0.8]) \n                        sphere(r=15);\n            }\n        }\n        \n        // Rear flippers\n        for(side = [-1, 1]) {\n            translate([25, side*20, 10]) {\n                rotate([0, 0, side*45]) \n                    scale([1, 0.25, 0.6]) \n                        sphere(r=12);\n            }\n        }\n    }\n}\n\n// Eyes\nmodule eyes() {\n    // Left eye\n    translate([-38, -8, 28]) {\n        color(\"black\") sphere(r=3);\n        color(\"white\") translate([1, 1, 1]) sphere(r=1);\n    }\n    \n    // Right eye\n    translate([-38, 8, 28]) {\n        color(\"black\") sphere(r=3);\n        color(\"white\") translate([1, 1, 1]) sphere(r=1);\n    }\n}\n\n// Mouth\nmodule mouth() {\n    color(\"black\") {\n        translate([-48, 0, 15]) \n            scale([1, 0.3, 0.2]) \n                sphere(r=6);\n    }\n}\n\n// Blue markings on back\nmodule markings() {\n    color([0.7, 0.85, 1]) {\n        // Spine line\n        for(i = [-20:5:30]) {\n            translate([i, 0, 30 + abs(i)*0.3]) \n                scale([0.8, 0.3, 0.3]) \n                    sphere(r=5);\n        }\n        \n        // Side markings\n        for(side = [-1, 1]) {\n            for(pos = [-10:10:20]) {\n                translate([pos, side*15, 20]) \n                    scale([0.6, 0.2, 0.2]) \n                        sphere(r=4);\n            }\n        }\n    }\n}\n\n// Assembly\nscale([scale_factor, scale_factor, scale_factor]) {\n    dewgong_body();\n    dewgong_head();\n    horns();\n    tail();\n    flippers();\n    eyes();\n    mouth();\n    markings();\n}",
    "renders": true
  },
  {
    "pokemon": "grimer",
    "openscad_code": "// Grimer Pokemon - Realistic Style - Medium Complexity\n// 3D printable version using basic OpenSCAD primitives\n\nmodule grimer_body() {\n    // Main purple body - blob shape using stacked spheres\n    color([0.4, 0.2, 0.6]) \n    union() {\n        // Central mass\n        sphere(r = 18, $fn = 32);\n        \n        // Left protrusion\n        translate([-15, 8, 5])\n            scale([1.2, 0.8, 0.9])\n                sphere(r = 12, $fn = 24);\n        \n        // Right protrusion\n        translate([15, 6, 8])\n            scale([0.9, 1.1, 1.2])\n                sphere(r = 10, $fn = 24);\n        \n        // Bottom blob\n        translate([0, -12, -8])\n            scale([1.3, 1.4, 0.8])\n                sphere(r = 15, $fn = 24);\n    }\n}\n\nmodule grimer_face() {\n    // Eyes - yellow with black pupils\n    color([1, 0.8, 0]) \n    translate([-8, 15, 12])\n        sphere(r = 4, $fn = 16);\n    \n    translate([8, 15, 12])\n        sphere(r = 4, $fn = 16);\n    \n    // Black pupils\n    color([0, 0, 0])\n    translate([-7, 16, 15])\n        sphere(r = 2, $fn = 12);\n    \n    translate([9, 16, 15])\n        sphere(r = 2, $fn = 12);\n    \n    // Mouth opening\n    color([0.2, 0.1, 0.3])\n    translate([0, 8, 8])\n        rotate([90, 0, 0])\n            cylinder(h = 10, r1 = 6, r2 = 4, $fn = 24);\n}\n\nmodule grimer_teeth() {\n    // Upper teeth\n    color([0.9, 0.9, 0.9])\n    for(i = [-2:2]) {\n        translate([i * 2, 8, 12])\n            rotate([90, 0, 0])\n                cube([1.5, 2, 3], center = true);\n    }\n    \n    // Lower teeth\n    for(i = [-1.5:1.5]) {\n        translate([i * 2, 8, 7])\n            rotate([90, 0, 0])\n                cube([1.5, 2, 2.5], center = true);\n    }\n}\n\nmodule grimer_sludge_details() {\n    // Small sludge droplets on surface\n    color([0.3, 0.15, 0.5])\n    for(i = [0:15]) {\n        rotate([i * 24, i * 15, 0])\n            translate([\n                sin(i * 30) * 15 + 5, \n                cos(i * 30) * 15, \n                sin(i * 45) * 8\n            ])\n                sphere(r = 1.5 + sin(i * 20) * 0.5, $fn = 12);\n    }\n}\n\nmodule grimer_arms() {\n    // Left arm\n    color([0.35, 0.18, 0.55])\n    translate([-20, 2, 0])\n        rotate([0, 0, -30])\n            scale([1, 0.8, 1.2])\n                sphere(r = 8, $fn = 20);\n    \n    // Right arm\n    translate([20, 0, 2])\n        rotate([0, 0, 30])\n            scale([0.9, 0.7, 1.1])\n                sphere(r = 7, $fn = 20);\n}\n\nmodule grimer_base_support() {\n    // Flat base for printing stability\n    color([0.3, 0.15, 0.5])\n    translate([0, 0, -20])\n        cylinder(h = 2, r = 25, $fn = 32);\n}\n\n// Main assembly\nunion() {\n    grimer_base_support();\n    \n    // Main body positioned for printing\n    translate([0, 0, -8])\n        grimer_body();\n    \n    grimer_face();\n    grimer_teeth();\n    grimer_arms();\n    grimer_sludge_details();\n}",
    "renders": true
  },
  {
    "pokemon": "muk",
    "openscad_code": "// Realistic Muk Pokemon - Medium Complexity\n// 3D printable with no overhangs\n\n// Main color - purple sludge\n$fn = 32;\n\nmodule muk_body() {\n    color([0.4, 0.1, 0.6]) {\n        // Main sludge pile\n        translate([0, 0, 15]) \n            scale([1.2, 1, 0.8])\n                sphere(20);\n        \n        // Left sludge blob\n        translate([-20, -5, 10])\n            scale([0.8, 0.7, 0.6])\n                sphere(15);\n                \n        // Right sludge blob\n        translate([20, -5, 10])\n            scale([0.8, 0.7, 0.6])\n                sphere(15);\n                \n        // Front sludge drip\n        translate([0, -15, 5])\n            scale([0.6, 0.5, 0.4])\n                sphere(12);\n    }\n}\n\nmodule muk_face() {\n    // Eyes\n    color([0.05, 0.05, 0.05]) {\n        // Left eye\n        translate([-8, -18, 28])\n            rotate([0, 15, 0])\n                scale([1, 1.5, 0.5])\n                    sphere(3);\n                    \n        // Right eye\n        translate([8, -18, 28])\n            rotate([0, -15, 0])\n                scale([1, 1.5, 0.5])\n                    sphere(3);\n    }\n    \n    // Mouth\n    color([0.2, 0, 0.3]) {\n        translate([0, -22, 22])\n            rotate([0, 0, 5])\n                scale([4, 2, 1])\n                    difference() {\n                        cube([8, 4, 2], center=true);\n                        translate([0, 0, 1])\n                            cube([6, 3, 2], center=true);\n                    }\n    }\n    \n    // Teeth\n    color([0.9, 0.9, 0.9]) {\n        for(i = [-2:1:2]) {\n            translate([i*1.5, -21.5, 22])\n                cube([1, 1.5, 0.5], center=true);\n        }\n    }\n}\n\nmodule muk_arms() {\n    color([0.35, 0.08, 0.55]) {\n        // Left arm\n        translate([-25, 0, 18])\n            rotate([30, 0, -30])\n                scale([0.6, 0.6, 1.2])\n                    sphere(8);\n                    \n        // Left hand\n        translate([-30, 5, 10])\n            scale([0.8, 0.8, 0.5])\n                sphere(6);\n                \n        // Right arm\n        translate([25, 0, 18])\n            rotate([30, 0, 30])\n                scale([0.6, 0.6, 1.2])\n                    sphere(8);\n                    \n        // Right hand\n        translate([30, 5, 10])\n            scale([0.8, 0.8, 0.5])\n                sphere(6);\n    }\n}\n\nmodule muk_drips() {\n    color([0.3, 0.05, 0.5]) {\n        // Generate random drips\n        for(i = [0:15:360]) {\n            rotate([0, 0, i])\n                translate([sin(i*5)*8 + 8, cos(i*5)*8 - 8, 15])\n                    scale([0.3, 0.3, 1 + sin(i*3)*0.5])\n                        sphere(3 + sin(i*2)*2);\n        }\n        \n        // Bottom puddle\n        translate([0, 0, 0])\n            scale([1.4, 1.2, 0.3])\n                sphere(25);\n    }\n}\n\nmodule muk_details() {\n    color([0.5, 0.15, 0.7]) {\n        // Sludge bubbles\n        translate([-10, -5, 25])\n            sphere(2);\n        translate([12, -3, 26])\n            sphere(1.5);\n        translate([5, -10, 20])\n            sphere(2.5);\n            \n        // Toxic bubbles\n        color([0.1, 0.8, 0.1, 0.7]) {\n            translate([-8, -8, 30])\n                sphere(1);\n            translate([10, -5, 28])\n                sphere(0.8);\n        }\n    }\n}\n\n// Assemble the complete model\nunion() {\n    muk_body();\n    muk_face();\n    muk_arms();\n    muk_drips();\n    muk_details();\n}",
    "renders": true
  },
  {
    "pokemon": "shellder",
    "openscad_code": "// Shellder Pokemon - Realistic Style (Medium Complexity)\n\n// Color definitions\n$fn = 50;\nshell_color = [0.8, 0.2, 0.2];  // Dark red shell\npearl_color = [0.95, 0.9, 0.8];  // Off-white pearl\nblack_color = [0.1, 0.1, 0.1];\ntongue_color = [0.9, 0.3, 0.4];\n\nmodule shellder() {\n    // Main shell body\n    color(shell_color)\n    union() {\n        // Base shell\n        difference() {\n            scale([1, 1.2, 0.8])\n                sphere(d=50);\n            translate([0, 0, 20])\n                sphere(d=45);\n        }\n        \n        // Shell ridges\n        for(i = [0:5]) {\n            rotate([0, 0, i*60])\n                translate([0, 25, 0])\n                scale([0.3, 1.2, 0.8])\n                    cylinder(h=8, d1=15, d2=5);\n        }\n        \n        // Top spike\n        translate([0, 0, 35])\n            rotate([0, 0, 0])\n            scale([0.3, 0.3, 1])\n                cylinder(h=15, d1=8, d2=3);\n    }\n    \n    // Inner pearl\n    color(pearl_color)\n    translate([0, 0, -10])\n    difference() {\n        sphere(d=35);\n        translate([0, 0, 15])\n            cube([50, 50, 30], center=true);\n    }\n    \n    // Tongue\n    color(tongue_color)\n    translate([0, -10, -5])\n    rotate([90, 0, 0])\n    scale([1, 1.2, 1])\n        cylinder(h=12, d=8);\n    \n    // Eyes\n    color(black_color)\n    union() {\n        translate([10, 15, 5])\n            sphere(d=6);\n        translate([-10, 15, 5])\n            sphere(d=6);\n    }\n    \n    // Eye details\n    color([1, 1, 1])\n    union() {\n        translate([11, 16, 7])\n            sphere(d=2);\n        translate([-9, 16, 7])\n            sphere(d=2);\n    }\n    \n    // Shell edge detail\n    color(shell_color)\n    difference() {\n        translate([0, 0, 15])\n            cylinder(h=5, d=52);\n        translate([0, 0, 15])\n            cylinder(h=6, d=48);\n    }\n    \n    // Small spikes around edge\n    for(i = [0:11]) {\n        rotate([0, 0, i*30])\n            translate([24, 0, 15])\n                cylinder(h=3, d1=4, d2=2);\n    }\n}\n\n// Scale to reasonable print size\nscale([1.5, 1.5, 1.5])\n    shellder();",
    "renders": true
  },
  {
    "pokemon": "cloyster",
    "openscad_code": "// Cloyster - Realistic Style, Medium Complexity\n// Dimensions: ~70mm width, ~70mm height, ~70mm depth\n\nmodule main_shell() {\n    color(\"lightgray\")\n    difference() {\n        // Main spherical shell\n        sphere(d=65, $fn=64);\n        \n        // Face opening\n        translate([0, 25, 15])\n            rotate([0, 20, 0])\n            cube([30, 30, 40], center=true);\n        \n        // Bottom opening for base\n        translate([0, 0, -35])\n            cube([70, 70, 20], center=true);\n    }\n}\n\nmodule spike(x, y, z, angle, length) {\n    color(\"ivory\")\n    translate([x, y, z])\n        rotate([0, angle, 0])\n        cylinder(h=length, d1=8, d2=2, $fn=12);\n}\n\nmodule shell_spikes() {\n    // Top spikes\n    for(i=[0:45:315]) {\n        rotate([0, 0, i])\n            translate([0, 30, 25])\n                spike(0, 0, 0, -20, 35);\n    }\n    \n    // Side spikes\n    for(i=[0:60:300]) {\n        rotate([0, 0, i])\n            translate([25, 20, 0])\n                spike(0, 0, 0, 0, 30);\n    }\n    \n    // Bottom spikes\n    for(i=[0:72:288]) {\n        rotate([0, 0, i])\n            translate([20, 0, -25])\n                spike(0, 0, 0, 20, 25);\n    }\n}\n\nmodule face() {\n    // Inner pearl\n    color(\"lightblue\")\n    translate([0, 30, 15])\n        rotate([0, 20, 0])\n        sphere(d=25, $fn=32);\n    \n    // Eyes\n    color(\"black\")\n    for(x=[-8, 8]) {\n        translate([x, 25, 25])\n            sphere(d=4, $fn=12);\n    }\n    \n    // Mouth\n    color(\"black\")\n    translate([0, 20, 20])\n        rotate([0, 20, 0])\n        cube([15, 2, 3], center=true);\n}\n\nmodule shell_ridges() {\n    color(\"gray\")\n    // Concentric ridges\n    for(i=[1:3]) {\n        translate([0, 0, -35 + i*15])\n            scale([1 + i*0.1, 1 + i*0.1, 0.5])\n            cylinder(h=3, d=65 - i*10, $fn=64);\n    }\n}\n\n// Main assembly\nunion() {\n    main_shell();\n    shell_spikes();\n    shell_ridges();\n    face();\n}",
    "renders": true
  },
  {
    "pokemon": "gastly",
    "openscad_code": "// Gastly Pokemon - Realistic style, medium complexity\n// Approx 70mm diameter gas cloud, designed for 3D printing\n\n$fn = 32;\n\n// Main colors\ncolor_purple = [0.5, 0.2, 0.8];\ncolor_dark_purple = [0.3, 0.1, 0.5];\ncolor_red = [0.8, 0.1, 0.1];\ncolor_white = [0.9, 0.9, 0.9];\ncolor_black = [0.1, 0.1, 0.1];\n\n// Main gas cloud body\nmodule gastly_body() {\n    color(color_purple) {\n        // Central sphere\n        sphere(d = 50);\n        \n        // Gas wisps - using difference to create cloud-like shapes\n        for(i = [0:5]) {\n            rotate([i*60, 0, 0]) \n                translate([0, 25 + i*3, 0]) \n                    sphere(d = 20 - i*2);\n        }\n        \n        for(i = [0:4]) {\n            rotate([0, i*45, 0]) \n                translate([25 + i*2, 0, 0]) \n                    sphere(d = 18 - i*2);\n        }\n    }\n}\n\n// Poison gas wisps\nmodule poison_wisps() {\n    color(color_dark_purple) {\n        for(i = [0:7]) {\n            rotate([i*51.4, i*20, 0]) {\n                translate([30 + sin(i*45)*5, 0, cos(i*45)*5]) {\n                    scale([1, 0.3, 0.3]) \n                        sphere(d = 8);\n                }\n            }\n        }\n    }\n}\n\n// Main eye structure\nmodule eye() {\n    // Eye socket\n    difference() {\n        color(color_white) \n            sphere(d = 12);\n        \n        // Pupil hole\n        translate([0, 0, 5.9]) \n            color(color_black) \n                cylinder(h = 2, d = 8, $fn = 32);\n        \n        // Red iris\n        translate([0, 0, 5.8]) \n            color(color_red) \n                cylinder(h = 1, d = 10, $fn = 32);\n    }\n}\n\n// Small eye structure\nmodule small_eye() {\n    difference() {\n        color(color_white) \n            sphere(d = 8);\n        \n        translate([0, 0, 3.9]) \n            color(color_black) \n                cylinder(h = 2, d = 5, $fn = 32);\n        \n        translate([0, 0, 3.8]) \n            color(color_red) \n                cylinder(h = 1, d = 6.5, $fn = 32);\n    }\n}\n\n// Mouth with teeth\nmodule mouth() {\n    difference() {\n        // Main mouth shape\n        color(color_dark_purple) \n            scale([1, 0.6, 0.3]) \n                sphere(d = 20);\n        \n        // Mouth cavity\n        translate([0, -3, 2]) \n            scale([0.8, 0.4, 0.8]) \n                sphere(d = 18);\n        \n        // Teeth\n        for(i = [0:4]) {\n            rotate([0, 0, -30 + i*15]) \n                translate([6 - i*2.5, -4, 3.5]) \n                    cube([1.5, 3, 1.5], center = true);\n        }\n        \n        for(i = [0:3]) {\n            rotate([0, 0, -22.5 + i*15]) \n                translate([5.5 - i*2.5, -4, 3.5]) \n                    cube([1.5, 2.5, 1.5], center = true);\n        }\n    }\n}\n\n// Poison gas bubbles\nmodule bubbles() {\n    color(color_dark_purple) {\n        for(i = [0:12]) {\n            rotate([i*30, i*20, 0]) \n                translate([25 + sin(i*45)*8, 10 + cos(i*30)*5, sin(i*60)*8]) \n                    sphere(d = 3 + i*0.2);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Body and wisps\n    gastly_body();\n    poison_wisps();\n    \n    // Eyes\n    translate([-12, 8, 20]) \n        rotate([15, 0, 0]) \n            eye();\n    \n    translate([12, 8, 20]) \n        rotate([15, 0, 0]) \n            mirror([1, 0, 0]) \n                small_eye();\n    \n    // Mouth\n    translate([0, -8, 15]) \n        rotate([25, 0, 0]) \n            mouth();\n    \n    // Gas bubbles\n    bubbles();\n}",
    "renders": true
  },
  {
    "pokemon": "haunter",
    "openscad_code": "// Haunter Pokemon - Realistic Style (Medium Complexity)\n// 3D Printable Model - Approximately 80mm height\n\n$fn = 50;  // Smooth curves for 3D printing\n\n// Main color palette\nghost_purple = [0.4, 0.2, 0.6];\ndark_purple = [0.2, 0.1, 0.3];\neye_red = [0.9, 0.1, 0.1];\nmouth_pink = [0.7, 0.3, 0.6];\nteeth_white = [0.9, 0.9, 0.9];\n\n// Main body module\nmodule haunter_body() {\n    color(ghost_purple) {\n        // Central body - rounded shape\n        translate([0, 0, 20]) {\n            scale([1, 0.8, 1.2]) sphere(20);\n        }\n        \n        // Lower body extension\n        translate([0, 0, 5]) {\n            scale([0.8, 0.6, 0.8]) sphere(15);\n        }\n    }\n}\n\n// Triangular head spikes\nmodule head_spikes() {\n    color(dark_purple) {\n        // Left spike\n        translate([-15, 0, 45]) {\n            rotate([0, -30, 0]) {\n                scale([1, 0.3, 0.3]) cylinder(h=15, r1=8, r2=0);\n            }\n        }\n        \n        // Right spike\n        translate([15, 0, 45]) {\n            rotate([0, 30, 0]) {\n                scale([1, 0.3, 0.3]) cylinder(h=15, r1=8, r2=0);\n            }\n        }\n        \n        // Center spike\n        translate([0, 0, 50]) {\n            scale([0.3, 0.3, 1]) cylinder(h=10, r1=5, r2=0);\n        }\n    }\n}\n\n// Eyes with pupils\nmodule eyes() {\n    // Left eye\n    translate([-8, -12, 35]) {\n        color(eye_red) {\n            sphere(5);\n            // Pupil\n            translate([0, 2, 3]) {\n                color([0, 0, 0]) sphere(2);\n            }\n        }\n    }\n    \n    // Right eye\n    translate([8, -12, 35]) {\n        color(eye_red) {\n            sphere(5);\n            // Pupil\n            translate([0, 2, 3]) {\n                color([0, 0, 0]) sphere(2);\n            }\n        }\n    }\n}\n\n// Wide grinning mouth\nmodule mouth() {\n    translate([0, -18, 28]) {\n        rotate([0, 0, 0]) {\n            // Mouth opening\n            difference() {\n                color(mouth_pink) scale([1.5, 0.8, 0.5]) sphere(10);\n                translate([0, 0, -2]) scale([1.3, 0.6, 0.4]) sphere(10);\n            }\n            \n            // Teeth\n            for(i = [-2:1:2]) {\n                translate([i*3, -6, 30]) {\n                    color(teeth_white) scale([0.8, 1.5, 0.3]) cube([2, 4, 1]);\n                }\n            }\n        }\n    }\n}\n\n// Disembodied hands\nmodule hands() {\n    // Left hand\n    translate([-25, 15, 30]) {\n        rotate([0, 0, 45]) {\n            color(ghost_purple) {\n                // Palm\n                sphere(8);\n                \n                // Fingers\n                for(i = [0:3]) {\n                    rotate([0, 0, i*30 - 45]) {\n                        translate([6, 0, 0]) {\n                            scale([0.6, 0.6, 2]) sphere(4);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Right hand\n    translate([25, 15, 30]) {\n        rotate([0, 0, -45]) {\n            color(ghost_purple) {\n                // Palm\n                sphere(8);\n                \n                // Fingers\n                for(i = [0:3]) {\n                    rotate([0, 0, i*30 - 45]) {\n                        translate([6, 0, 0]) {\n                            scale([0.6, 0.6, 2]) sphere(4);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Ghostly spikes around body\nmodule body_spikes() {\n    color(dark_purple) {\n        for(angle = [0:60:300]) {\n            rotate([0, 0, angle]) {\n                translate([22, 0, 25]) {\n                    scale([0.5, 0.5, 1.2]) sphere(6);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    haunter_body();\n    head_spikes();\n    eyes();\n    mouth();\n    hands();\n    body_spikes();\n}",
    "renders": true
  },
  {
    "pokemon": "gengar",
    "openscad_code": "// Gengar Pokemon - Realistic Style, Medium Complexity\n// Dimensions: ~80mm height\n\n// Color definitions\ncolor_body = [75/255, 35/255, 95/255];\ncolor_eyes = [200/255, 0/255, 0/255];\ncolor_mouth = [0/255, 0/255, 0/255];\ncolor_teeth = [250/255, 250/255, 250/255];\n\n// Overall scale\nscale_factor = 0.8;\n\n// Main body shape\nmodule body() {\n    color(color_body)\n    union() {\n        // Main rounded body\n        translate([0, 0, 30])\n            scale([1, 0.9, 1.2])\n            sphere(30);\n        \n        // Lower belly bulge\n        translate([0, -5, 15])\n            scale([0.9, 0.8, 0.6])\n            sphere(25);\n    }\n}\n\n// Pointed ears\nmodule ears() {\n    color(color_body)\n    union() {\n        // Left ear\n        translate([-20, 20, 55])\n            rotate([0, 15, -25])\n            scale([1, 0.7, 2.5])\n            cylinder(15, 8, 0, $fn=6);\n        \n        // Right ear\n        translate([20, 20, 55])\n            rotate([0, 15, 25])\n            scale([1, 0.7, 2.5])\n            cylinder(15, 8, 0, $fn=6);\n    }\n}\n\n// Spiky back ridge\nmodule back_spikes() {\n    color(color_body)\n    for(i = [0:2]) {\n        translate([0, -15 - i*8, 45 - i*10])\n            rotate([15, 0, 0])\n            scale([1.2 - i*0.2, 0.5, 1.5 - i*0.3])\n            cylinder(10, 5, 0, $fn=4);\n    }\n}\n\n// Short arms with claws\nmodule arms() {\n    color(color_body)\n    union() {\n        // Left arm\n        translate([-25, 5, 35])\n            rotate([0, 0, 45])\n            scale([0.8, 0.8, 1.5])\n            cylinder(12, 8, 6);\n        \n        // Right arm\n        translate([25, 5, 35])\n            rotate([0, 0, -45])\n            scale([0.8, 0.8, 1.5])\n            cylinder(12, 8, 6);\n        \n        // Claws\n        for(side = [-1, 1]) {\n            for(j = [0:2]) {\n                translate([side*(20 + j*3), 5 - j*2, 22])\n                    rotate([0, side*20, 0])\n                    scale([1, 0.3, 0.5])\n                    cylinder(8, 3, 0, $fn=3);\n            }\n        }\n    }\n}\n\n// Short legs with rounded feet\nmodule legs() {\n    color(color_body)\n    union() {\n        // Left leg\n        translate([-15, 0, 0])\n            scale([0.8, 0.8, 1])\n            union() {\n                cylinder(20, 8, 8);\n                translate([0, 0, -5])\n                    sphere(10);\n            }\n        \n        // Right leg\n        translate([15, 0, 0])\n            scale([0.8, 0.8, 1])\n            union() {\n                cylinder(20, 8, 8);\n                translate([0, 0, -5])\n                    sphere(10);\n            }\n    }\n}\n\n// Large mouth with teeth\nmodule mouth() {\n    difference() {\n        // Mouth cavity\n        color(color_mouth)\n        translate([0, 15, 25])\n            rotate([15, 0, 0])\n            scale([1.2, 0.8, 0.7])\n            cube([25, 20, 15], center=true);\n        \n        // Cut into body\n        translate([0, 20, 25])\n            rotate([15, 0, 0])\n            scale([1.3, 0.9, 0.8])\n            cube([25, 20, 15], center=true);\n    }\n    \n    // Teeth\n    color(color_teeth)\n    for(i = [0:3]) {\n        translate([-12 + i*8, 18, 20])\n            rotate([15, 0, 0])\n            scale([0.3, 0.8, 0.5])\n            cylinder(8, 3, 1);\n    }\n}\n\n// Large red eyes\nmodule eyes() {\n    color(color_eyes)\n    union() {\n        // Left eye\n        translate([-15, 15, 45])\n            scale([1.2, 1, 0.3])\n            sphere(10);\n        \n        // Right eye\n        translate([15, 15, 45])\n            scale([1.2, 1, 0.3])\n            sphere(10);\n        \n        // Eye shine\n        color([1,1,1,0.8])\n        translate([-12, 15, 47])\n            sphere(3);\n        translate([18, 15, 47])\n            sphere(3);\n    }\n}\n\n// Triangular tail\nmodule tail() {\n    color(color_body)\n    translate([0, -35, 15])\n        rotate([0, 0, 180])\n        linear_extrude(height=8, center=true, convexity=10)\n        polygon(points=[[0,0], [-15,-20], [15,-20]]);\n}\n\n// Assemble the complete Gengar\nscale([scale_factor, scale_factor, scale_factor])\nunion() {\n    body();\n    ears();\n    back_spikes();\n    arms();\n    legs();\n    mouth();\n    eyes();\n    tail();\n}",
    "renders": true
  },
  {
    "pokemon": "onix",
    "openscad_code": "// Onix - Realistic Style, Medium Complexity\n// 3D printable Pokemon model\n\n// Colors\nrock_color = [0.5, 0.45, 0.4];\neye_color = [0.1, 0.1, 0.1];\naccent_color = [0.7, 0.6, 0.5];\n\n// Main parameters\nscale_factor = 0.5;\nbody_segments = 8;\nsegment_length = 8 * scale_factor;\nsegment_height = 6 * scale_factor;\nhead_size = 10 * scale_factor;\n\nmodule onix_head() {\n    // Main head rock\n    color(rock_color)\n    translate([0, 0, head_size/2])\n    scale([1.2, 0.8, 1])\n    sphere(head_size);\n    \n    // Snout\n    color(rock_color)\n    translate([head_size*0.8, 0, -head_size*0.2])\n    scale([1.5, 0.7, 0.6])\n    sphere(head_size*0.6);\n    \n    // Eyes\n    color(eye_color)\n    for(i = [-1, 1]) {\n        translate([head_size*0.5, i*head_size*0.3, head_size*0.3])\n        sphere(head_size*0.15);\n    }\n    \n    // Horn\n    color(rock_color)\n    translate([-head_size*0.3, 0, head_size*0.8])\n    cylinder(h1=head_size*0.8, r1=head_size*0.2, r2=head_size*0.05);\n}\n\nmodule body_segment(index) {\n    segment_width = segment_height * (1 - index * 0.08);\n    \n    color(rock_color)\n    translate([0, 0, segment_height/2])\n    scale([1.2 - index*0.05, 1, 1 - index*0.05])\n    cube([segment_length, segment_width, segment_height], center=true);\n    \n    // Rock details\n    color(accent_color)\n    for(i = [0:3]) {\n        rotate([0, 0, i*90])\n        translate([segment_length*0.3, segment_width*0.3, segment_height*0.4])\n        sphere(segment_height*0.2);\n    }\n}\n\nmodule onix_body() {\n    for(i = [0:body_segments-1]) {\n        translate([i*segment_length*0.9, 0, -i*segment_height*0.3])\n        rotate([0, 0, i*5])\n        body_segment(i);\n    }\n}\n\nmodule tail_spike() {\n    color(rock_color)\n    translate([0, 0, segment_height*0.5])\n    scale([0.5, 0.5, 2])\n    sphere(segment_height*0.8);\n}\n\nmodule onix_tail() {\n    translate([(body_segments-1)*segment_length*0.9 + segment_length, 0, -(body_segments-1)*segment_height*0.3 - segment_height*0.5])\n    tail_spike();\n}\n\n// Main assembly\ntranslate([-20*scale_factor, 0, 0])\nrotate([0, 0, 10])\nunion() {\n    onix_head();\n    onix_body();\n    onix_tail();\n}",
    "renders": true
  },
  {
    "pokemon": "drowzee",
    "openscad_code": "// Drowzee Pokemon - Realistic Style, Medium Complexity\n// Approx 70mm tall, 3D printable\n\n$fn = 32;\n\n// Main colors\ncolor_yellow = [1, 0.82, 0.35];\ncolor_brown = [0.6, 0.4, 0.2];\ncolor_black = [0.1, 0.1, 0.1];\ncolor_white = [0.95, 0.95, 0.95];\ncolor_red = [0.8, 0.2, 0.2];\n\n// Main body module\nmodule drowzee() {\n    // Head\n    color(color_yellow)\n    translate([0, 0, 40])\n    scale([1.2, 1, 1])\n    sphere(15);\n    \n    // Snout\n    color(color_yellow)\n    translate([0, -15, 35])\n    scale([0.8, 1.5, 0.8])\n    sphere(12);\n    \n    // Body\n    color(color_yellow)\n    translate([0, 0, 15])\n    scale([1.3, 1.1, 1.5])\n    sphere(20);\n    \n    // Belly pattern\n    color(color_brown)\n    translate([0, 0, 8])\n    scale([0.9, 0.7, 0.6])\n    sphere(18);\n    \n    // Trunk\n    color(color_yellow)\n    rotate([90, 0, 0])\n    translate([0, -25, -40])\n    cylinder(h1=30, h2=25, r1=8, r2=5);\n    \n    // Trunk tip\n    color(color_yellow)\n    translate([0, -50, 15])\n    sphere(5);\n    \n    // Ears\n    for(side = [-1, 1]) {\n        color(color_yellow)\n        translate([side * 15, 0, 50])\n        rotate([0, side * -20, 0])\n        scale([0.4, 0.3, 1])\n        sphere(12);\n    }\n    \n    // Arms\n    for(side = [-1, 1]) {\n        color(color_yellow)\n        translate([side * 20, 10, 25])\n        rotate([0, side * 20, 0])\n        scale([0.5, 0.5, 1.2])\n        sphere(8);\n        \n        // Hands\n        color(color_yellow)\n        translate([side * 28, 20, 15])\n        sphere(6);\n    }\n    \n    // Legs\n    for(side = [-1, 1]) {\n        color(color_yellow)\n        translate([side * 12, 5, 5])\n        scale([0.8, 0.8, 1.2])\n        sphere(10);\n        \n        // Feet\n        color(color_yellow)\n        translate([side * 12, 15, 0])\n        rotate([90, 0, 0])\n        cylinder(h=5, r1=6, r2=8);\n    }\n    \n    // Eyes\n    color(color_black)\n    for(side = [-1, 1]) {\n        translate([side * 5, -8, 42])\n        sphere(2);\n    }\n    \n    // Eye highlights\n    color(color_white)\n    for(side = [-1, 1]) {\n        translate([side * 4.5, -7.5, 43])\n        sphere(0.8);\n    }\n    \n    // Mouth line\n    color(color_black)\n    translate([0, -18, 35])\n    rotate([90, 0, 0])\n    cylinder(h=0.5, r=3);\n    \n    // Nostrils\n    color(color_black)\n    translate([0, -48, 15])\n    sphere(1.5);\n    \n    // Stripes on trunk\n    color(color_brown)\n    for(z = [30, 40]) {\n        translate([0, -z, 25])\n        rotate([90, 0, 0])\n        cylinder(h=1, r1=6, r2=4);\n    }\n    \n    // Back stripes\n    color(color_brown)\n    for(z = [20, 30]) {\n        translate([0, -8, z])\n        scale([1.5, 0.2, 0.2])\n        sphere(8);\n    }\n}\n\n// Scale to 70mm height\nscale(0.7)\ndrowzee();",
    "renders": true
  },
  {
    "pokemon": "hypno",
    "openscad_code": "// Hypno in realistic style (medium complexity)\n// Overall size: ~80mm height\n\n// Colors\ncolor_yellow = [0.95, 0.85, 0.15];\ncolor_skin = [0.98, 0.92, 0.75];\ncolor_red = [0.85, 0.1, 0.1];\ncolor_white = [1, 1, 1];\ncolor_black = [0.1, 0.1, 0.1];\ncolor_gray = [0.5, 0.5, 0.5];\n\n// Main body module\nmodule hypno() {\n    // Scale entire model to 80mm height\n    scale([0.8, 0.8, 0.8]) {\n        \n        // Head\n        union() {\n            // Main head sphere\n            color(color_yellow) \n            translate([0, 0, 60]) \n            sphere(25);\n            \n            // Nose\n            color(color_skin) \n            translate([0, 25, 55]) \n            scale([1, 1.5, 0.8]) \n            sphere(8);\n            \n            // Eyes\n            color(color_white) \n            translate([-12, 20, 65]) \n            sphere(8);\n            color(color_white) \n            translate([12, 20, 65]) \n            sphere(8);\n            \n            // Eye pupils\n            color(color_black) \n            translate([-12, 26, 65]) \n            sphere(4);\n            color(color_black) \n            translate([12, 26, 65]) \n            sphere(4);\n            \n            // Eyebrows\n            color(color_gray) \n            translate([-20, 15, 75]) \n            rotate([0, 0, 20]) \n            scale([0.5, 1, 0.2]) \n            cube([15, 3, 3]);\n            color(color_gray) \n            translate([5, 15, 75]) \n            rotate([0, 0, -20]) \n            scale([0.5, 1, 0.2]) \n            cube([15, 3, 3]);\n            \n            // Mouth\n            color(color_red) \n            translate([0, 25, 40]) \n            scale([1, 0.8, 0.5]) \n            sphere(5);\n            \n            // Ears\n            color(color_yellow) \n            translate([-30, 0, 65]) \n            rotate([0, 0, -30]) \n            scale([1, 0.3, 2]) \n            sphere(12);\n            color(color_yellow) \n            translate([30, 0, 65]) \n            rotate([0, 0, 30]) \n            scale([1, 0.3, 2]) \n            sphere(12);\n            \n            // Chest marking\n            color(color_white) \n            translate([0, 10, 30]) \n            scale([1.5, 1, 0.5]) \n            sphere(15);\n        }\n        \n        // Torso\n        color(color_yellow) \n        translate([0, 0, 20]) \n        scale([1.2, 0.8, 2]) \n        sphere(20);\n        \n        // Arms\n        module arm(side) {\n            translate([side * 25, 0, 40]) {\n                color(color_yellow) \n                rotate([0, 0, side * 10]) \n                scale([0.5, 0.5, 1.5]) \n                sphere(12);\n                \n                color(color_yellow) \n                translate([side * 5, 0, -15]) \n                rotate([0, 0, side * 20]) \n                scale([0.4, 0.4, 1.2]) \n                sphere(10);\n                \n                color(color_skin) \n                translate([side * 8, 0, -28]) \n                sphere(6);\n            }\n        }\n        \n        arm(1);\n        arm(-1);\n        \n        // Legs\n        module leg(side) {\n            translate([side * 12, 0, 5]) {\n                color(color_yellow) \n                scale([0.6, 0.6, 1.5]) \n                sphere(12);\n                \n                color(color_yellow) \n                translate([0, 0, -15]) \n                scale([0.5, 0.5, 1.2]) \n                sphere(10);\n                \n                color(color_skin) \n                translate([0, 0, -28]) \n                sphere(8);\n            }\n        }\n        \n        leg(1);\n        leg(-1);\n        \n        // Tail\n        color(color_yellow) \n        translate([0, -25, 30]) \n        rotate([90, 0, 0]) \n        cylinder(h=40, r1=8, r2=5);\n        \n        // Swirly tail end\n        module swirl() {\n            for (i = [0:30:360]) {\n                color(color_yellow) \n                translate([sin(i) * 15, cos(i) * 15 - 25, 30 - i/10]) \n                sphere(4);\n            }\n        }\n        swirl();\n        \n        // Collar\n        color(color_white) \n        translate([0, 5, 35]) \n        rotate([90, 0, 0]) \n        cylinder(h=5, r1=22, r2=20);\n        \n        // Collar ruff\n        module ruff() {\n            for (i = [0:45:360]) {\n                color(color_white) \n                translate([sin(i) * 20, cos(i) * 20 + 5, 35]) \n                scale([0.8, 0.2, 2]) \n                sphere(3);\n            }\n        }\n        ruff();\n    }\n}\n\n// Render the model\nhypno();",
    "renders": true
  },
  {
    "pokemon": "krabby",
    "openscad_code": "// Realistic Krabby Pokemon - Medium Complexity\n// Overall height ~80mm, 3D printable\n\n$fn = 64;\n\nmodule krabby_body() {\n    // Main red body shell\n    color(\"crimson\") {\n        difference() {\n            union() {\n                // Upper shell dome\n                translate([0, 0, 25]) sphere(d = 45);\n                \n                // Lower shell base\n                translate([0, 0, 5]) cylinder(h = 20, d1 = 40, d2 = 45);\n            }\n            \n            // Hollow out for printing\n            translate([0, 0, 10]) sphere(d = 35);\n        }\n    }\n}\n\nmodule krabby_face() {\n    // White face plate\n    color(\"white\") {\n        translate([0, 22, 25]) rotate([90, 0, 0]) \n            cylinder(h = 8, d = 30, $fn = 6);\n    }\n    \n    // Eyes\n    color(\"black\") {\n        // Left eye\n        translate([-8, 26, 35]) sphere(d = 6);\n        translate([-8, 28, 37]) sphere(d = 3);\n        \n        // Right eye\n        translate([8, 26, 35]) sphere(d = 6);\n        translate([8, 28, 37]) sphere(d = 3);\n    }\n    \n    // Mouth\n    color(\"black\") {\n        translate([0, 25, 28]) rotate([0, 0, 0])\n            cube([10, 2, 3]);\n    }\n}\n\nmodule krabby_claw(side) {\n    // Main claw segments\n    color(\"red\") {\n        // Base joint\n        translate([side * 25, 0, 20]) rotate([0, side * 30, 0])\n            cylinder(h = 15, d = 12);\n            \n        // Upper claw segment\n        translate([side * 35, 0, 30]) rotate([0, side * 30, 0])\n            cylinder(h = 25, d = 10);\n            \n        // Tip segment\n        translate([side * 45, 0, 40]) rotate([0, side * 30, 0])\n            cylinder(h = 20, d = 8);\n    }\n    \n    // Claw pincers\n    color(\"white\") {\n        // Lower pincer\n        translate([side * 45, -5, 35]) rotate([0, side * 45, 0])\n            cube([15, 3, 8]);\n            \n        // Upper pincer\n        translate([side * 45, 5, 45]) rotate([0, side * 45, 0])\n            cube([15, 3, 8]);\n    }\n}\n\nmodule krabby_legs() {\n    // Four visible legs (two per side)\n    for (side = [-1, 1]) {\n        for (i = [0, 1]) {\n            color(\"red\") {\n                translate([side * 18, -10 + i * 20, 10]) {\n                    rotate([0, 90, 0]) {\n                        // Upper leg segment\n                        translate([0, 0, 0]) cylinder(h = 12, d = 6);\n                        \n                        // Lower leg segment\n                        translate([0, 12, 0]) rotate([30, 0, 0])\n                            cylinder(h = 15, d = 5);\n                            \n                        // Pointed foot\n                        translate([0, 27, 0]) rotate([60, 0, 0])\n                            cylinder(h = 8, d1 = 5, d2 = 2);\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule krabby_eyestalks() {\n    color(\"red\") {\n        // Left eyestalk\n        translate([-12, 0, 45]) rotate([-30, 0, 0])\n            cylinder(h = 15, d = 6);\n            \n        // Right eyestalk\n        translate([12, 0, 45]) rotate([-30, 0, 0])\n            cylinder(h = 15, d = 6);\n    }\n}\n\n// Assembly\nkrabby_body();\nkrabby_face();\nkrabby_claw(-1);\nkrabby_claw(1);\nkrabby_legs();\nkrabby_eyestalks();",
    "renders": true
  },
  {
    "pokemon": "kingler",
    "openscad_code": "// Kingler Pokemon - Realistic Style, Medium Complexity\n// 3D printable model with proper wall thickness\n\n$fn = 50; // Smooth curves\nbody_color = \"#FF6B35\";\nshell_color = \"#B8860B\";\nclaw_color = \"#E6E6E6\";\neye_color = \"#000000\";\nhighlight_color = \"#FFFFFF\";\n\nmodule kingler() {\n    // Main body\n    color(body_color)\n    union() {\n        // Torso\n        translate([0, 0, 10])\n        scale([1.2, 1, 1.5])\n        sphere(r = 15);\n        \n        // Head\n        translate([0, 0, 35])\n        scale([1.3, 1.1, 1.2])\n        sphere(r = 12);\n        \n        // Snout\n        translate([0, 15, 30])\n        scale([0.8, 1.2, 0.8])\n        sphere(r = 8);\n        \n        // Eyes\n        color(eye_color)\n        translate([-6, 12, 38])\n        sphere(r = 2);\n        \n        color(highlight_color)\n        translate([-5, 13, 39])\n        sphere(r = 0.8);\n        \n        color(eye_color)\n        translate([6, 12, 38])\n        sphere(r = 2);\n        \n        color(highlight_color)\n        translate([7, 13, 39])\n        sphere(r = 0.8);\n    }\n    \n    // Shell\n    color(shell_color)\n    union() {\n        // Main shell\n        translate([0, -12, 25])\n        scale([1.8, 1.4, 0.8])\n        sphere(r = 12);\n        \n        // Shell spikes\n        for(i = [-1:1]) {\n            translate([i * 10, -20, 28])\n            scale([0.8, 0.8, 1.2])\n            sphere(r = 4);\n        }\n    }\n    \n    // Large claw\n    color(claw_color)\n    union() {\n        // Claw base\n        translate([25, 0, 20])\n        rotate([0, 0, -30])\n        cylinder(h = 15, r1 = 8, r2 = 6);\n        \n        // Claw pincer top\n        translate([35, -5, 25])\n        rotate([0, 0, -30])\n        scale([2, 0.8, 0.8])\n        sphere(r = 8);\n        \n        // Claw pincer bottom\n        translate([35, -2, 18])\n        rotate([0, 0, -30])\n        scale([2, 0.8, 0.8])\n        sphere(r = 7);\n        \n        // Teeth on claw\n        for(i = [0:3]) {\n            translate([38 - i * 3, -5, 25])\n            rotate([0, 0, -30])\n            cube([1, 2, 1], center = true);\n        }\n    }\n    \n    // Small claw\n    color(claw_color)\n    union() {\n        // Arm\n        translate([-20, 0, 18])\n        rotate([0, 0, 30])\n        cylinder(h = 12, r1 = 5, r2 = 4);\n        \n        // Claw\n        translate([-30, 5, 18])\n        rotate([0, 0, 30])\n        scale([1.5, 0.6, 0.6])\n        sphere(r = 6);\n    }\n    \n    // Legs\n    color(body_color)\n    union() {\n        // Front legs\n        for(side = [-1, 1]) {\n            translate([side * 12, 0, 5])\n            rotate([0, side * 15, 0])\n            cylinder(h = 15, r = 4);\n            \n            // Feet\n            translate([side * 12, 0, 2])\n            scale([1.5, 2, 0.5])\n            sphere(r = 4);\n        }\n        \n        // Back legs\n        for(side = [-1, 1]) {\n            translate([side * 8, -15, 5])\n            rotate([0, side * -20, 0])\n            cylinder(h = 12, r = 3.5);\n            \n            // Feet\n            translate([side * 8, -20, 2])\n            scale([1.3, 1.8, 0.5])\n            sphere(r = 3.5);\n        }\n    }\n    \n    // Tail\n    color(body_color)\n    union() {\n        translate([0, -25, 15])\n        rotate([20, 0, 0])\n        cylinder(h = 20, r1 = 5, r2 = 3);\n        \n        translate([0, -40, 10])\n        scale([1.2, 0.8, 0.8])\n        sphere(r = 4);\n    }\n}\n\n// Main assembly\nscale([0.8, 0.8, 0.8])\nkingler();",
    "renders": true
  },
  {
    "pokemon": "voltorb",
    "openscad_code": "// Voltorb Pokemon - Realistic Style, Medium Complexity\n// Size: 60mm diameter, 3D printable with 2mm wall thickness\n\n// Main color palette\n$fa = 2;\n$fs = 0.5;\n\n// Main body - slightly flattened sphere for realistic look\nmodule voltorb_body() {\n    color([0.9, 0.1, 0.1])  // Deep red\n    difference() {\n        scale([1, 1, 0.9])\n        sphere(d = 60);\n        \n        // Hollow interior for 3D printing\n        scale([0.93, 0.93, 0.83])\n        sphere(d = 60);\n    }\n}\n\n// Eye sockets for realistic depth\nmodule eye_socket(pos_x, pos_y) {\n    translate([pos_x, pos_y, 25])\n    rotate([0, 0, 0])\n    color([0.05, 0.05, 0.05])\n    cylinder(h = 5, d1 = 12, d2 = 10, $fn = 16);\n}\n\n// Eye whites\nmodule eye_white(pos_x, pos_y) {\n    translate([pos_x, pos_y, 21])\n    color([0.95, 0.95, 0.95])\n    sphere(d = 9);\n}\n\n// Pupils with realistic iris pattern\nmodule pupil(pos_x, pos_y) {\n    translate([pos_x, pos_y, 20])\n    color([0.1, 0.1, 0.1])\n    sphere(d = 5);\n    \n    // Iris ring\n    translate([pos_x, pos_y, 20.5])\n    color([0.3, 0.1, 0.1])\n    cylinder(h = 0.5, d1 = 7, d2 = 7, $fn = 32);\n}\n\n// Electric bolt marking on top\nmodule electric_marking() {\n    color([0.95, 0.95, 0.1])  // Bright yellow\n    translate([0, 0, 28])\n    linear_extrude(height = 1)\n    polygon(points=[\n        [0, 8],\n        [-2, 4],\n        [-1, 4],\n        [-3, 0],\n        [-1, 0],\n        [-2, -4],\n        [0, -4],\n        [2, -2],\n        [1, -2],\n        [3, 2],\n        [1, 2],\n        [2, 6]\n    ]);\n}\n\n// Surface texture pattern for realistic look\nmodule surface_pattern() {\n    for(i = [0:30:330]) {\n        rotate([0, 0, i])\n        translate([20, 0, 0])\n        color([0.8, 0.05, 0.05])\n        rotate([90, 0, 0])\n        cylinder(h = 0.5, d = 3, $fn = 6);\n    }\n    \n    for(i = [15:30:345]) {\n        rotate([0, 0, i])\n        translate([30, 0, 0])\n        color([0.8, 0.05, 0.05])\n        rotate([90, 0, 0])\n        cylinder(h = 0.5, d = 2.5, $fn = 6);\n    }\n}\n\n// Bottom flat area for stability\nmodule bottom_flat() {\n    color([0.9, 0.1, 0.1])\n    translate([0, 0, -25])\n    cylinder(h = 5, d = 40);\n}\n\n// Assembly\nunion() {\n    voltorb_body();\n    \n    // Add bottom flat area\n    bottom_flat();\n    \n    // Eyes\n    eye_socket(-15, 10);\n    eye_socket(15, 10);\n    \n    eye_white(-15, 10);\n    eye_white(15, 10);\n    \n    pupil(-15, 10);\n    pupil(15, 10);\n    \n    // Electric marking\n    electric_marking();\n    \n    // Surface texture\n    surface_pattern();\n}",
    "renders": true
  },
  {
    "pokemon": "electrode",
    "openscad_code": "// Realistic Electrode OpenSCAD Code\n// Medium complexity with 3D-printable features\n\nmodule electrode_body() {\n    color(\"red\")\n    difference() {\n        // Main spherical body\n        sphere(d=60, $fn=80);\n        \n        // Bottom hemisphere removal for flat base\n        translate([0, 0, -30])\n        cube([80, 80, 30], center=true);\n    }\n}\n\nmodule electrode_bottom() {\n    color(\"white\")\n    difference() {\n        // White bottom half\n        translate([0, 0, -15])\n        cylinder(h=30, d1=60, d2=58, $fn=80);\n        \n        // Slight indentation for realistic seam\n        translate([0, 0, -15.1])\n        cylinder(h=0.2, d=58.5, $fn=80);\n    }\n}\n\nmodule electrode_eyes() {\n    // Left eye\n    color(\"white\")\n    translate([-15, 20, 10])\n    sphere(d=12, $fn=32);\n    \n    // Right eye\n    color(\"white\")\n    translate([15, 20, 10])\n    sphere(d=12, $fn=32);\n    \n    // Left pupil\n    color(\"black\")\n    translate([-15, 21, 10])\n    sphere(d=6, $fn=16);\n    \n    // Right pupil\n    color(\"black\")\n    translate([15, 21, 10])\n    sphere(d=6, $fn=16);\n    \n    // Eye highlights\n    color(\"white\")\n    translate([-13, 23, 12])\n    sphere(d=2, $fn=8);\n    \n    color(\"white\")\n    translate([17, 23, 12])\n    sphere(d=2, $fn=8);\n}\n\nmodule electrode_mouth() {\n    color(\"black\")\n    translate([0, 25, -5])\n    rotate([90, 0, 0])\n    cylinder(h=1, d1=20, d2=15, $fn=32);\n    \n    // Mouth interior\n    color(\"darkgray\")\n    translate([0, 25, -5.5])\n    rotate([90, 0, 0])\n    cylinder(h=3, d1=18, d2=10, $fn=32);\n}\n\nmodule electrode_markings() {\n    // Lightning bolt pattern\n    color(\"yellow\")\n    for(i=[-1, 1]) {\n        translate([i*20, 0, 28])\n        rotate([0, 0, i*15])\n        scale([0.3, 1, 0.1])\n        cylinder(h=25, d=8, $fn=3);\n        \n        translate([i*20, 12, 28])\n        rotate([0, 0, i*-15])\n        scale([0.3, 1, 0.1])\n        cylinder(h=20, d=8, $fn=3);\n    }\n    \n    // Energy rings\n    color(\"orange\")\n    translate([0, 0, 25])\n    cylinder(h=1, d=50, $fn=6);\n    \n    translate([0, 0, 20])\n    cylinder(h=1, d=45, $fn=6);\n}\n\nmodule electrode_detail_lines() {\n    // Seam lines around equator\n    color(\"darkred\")\n    difference() {\n        translate([0, 0, 0])\n        cylinder(h=1, d=60.2, $fn=80);\n        \n        translate([0, 0, -0.5])\n        cylinder(h=2, d=59.8, $fn=80);\n    }\n}\n\n// Assembly\nelectrode_body();\nelectrode_bottom();\nelectrode_eyes();\nelectrode_mouth();\nelectrode_markings();\nelectrode_detail_lines();",
    "renders": true
  },
  {
    "pokemon": "exeggcute",
    "openscad_code": "$fn=30;\n\n// Exeggcute - Realistic Style, Medium Complexity\n// Scale to ~80mm width\n\nmodule exeggcute() {\n    // Colors\n    color_light_purple = [0.85, 0.75, 0.9];\n    color_dark_purple = [0.45, 0.3, 0.6];\n    color_yolk = [1, 0.85, 0.2];\n    color_eye = [0, 0, 0];\n    color_stem = [0.1, 0.5, 0.2];\n    color_crack = [0.3, 0.2, 0.4];\n    color_shadow = [0.2, 0.1, 0.3];\n\n    // Stem module\n    module stem() {\n        color(color_stem) {\n            // Main stem\n            translate([0, 0, -5]) {\n                cylinder(h=10, r1=2.5, r2=1.5);\n            }\n            // Leaves\n            rotate([0, -30, 0]) {\n                translate([0, 3, -2]) {\n                    scale([1, 0.3, 1]) {\n                        sphere(3);\n                    }\n                }\n            }\n            rotate([0, 30, 180]) {\n                translate([0, 3, -2]) {\n                    scale([1, 0.3, 1]) {\n                        sphere(3);\n                    }\n                }\n            }\n        }\n    }\n\n    // Single egg module\n    module egg(rotation=[0,0,0], translation=[0,0,0], crack_type=0) {\n        color(color_light_purple) {\n            // Main egg body\n            translate(translation) {\n                rotate(rotation) {\n                    scale([1, 1.2, 1]) {\n                        sphere(12);\n                    }\n                    \n                    // Crack details\n                    color(color_crack) {\n                        if (crack_type == 0) {\n                            // Large crack\n                            translate([0, 0, 9]) {\n                                linear_extrude(height=1) {\n                                    polygon(points=[[0,0], [3,2], [1,4], [-1,3], [-2,5], [-4,2], [-2,0]]);\n                                }\n                            }\n                        } else if (crack_type == 1) {\n                            // Small crack\n                            translate([0, 2, 8]) {\n                                rotate([0, 90, 0]) {\n                                    cylinder(h=8, r=0.5);\n                                }\n                            }\n                        } else {\n                            // Multiple cracks\n                            for (i = [0:4]) {\n                                rotate([0, 0, i*72]) {\n                                    translate([0, 8, 5]) {\n                                        cube([1, 4, 0.5], center=true);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    \n                    // Eyes\n                    color(color_eye) {\n                        // Left eye\n                        translate([-4, 5, 8]) {\n                            scale([1, 1.5, 0.5]) {\n                                sphere(2);\n                            }\n                        }\n                        // Right eye\n                        translate([4, 5, 8]) {\n                            scale([1, 1.5, 0.5]) {\n                                sphere(2);\n                            }\n                        }\n                    }\n                    \n                    // Yolk showing through crack\n                    color(color_yolk) {\n                        translate([0, 0, 8.5]) {\n                            sphere(4);\n                        }\n                    }\n                    \n                    // Purple spots\n                    color(color_dark_purple) {\n                        for (phi = [30:60:150]) {\n                            for (theta = [0:45:315]) {\n                                rotate([phi, 0, theta]) {\n                                    translate([0, 0, 11.5]) {\n                                        sphere(1);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    // Create the cluster of 6 eggs\n    union() {\n        // Front center egg\n        egg([0, 0, 0], [0, 0, 0], 0);\n        \n        // Top egg\n        egg([0, -30, 0], [0, 15, 8], 1);\n        \n        // Bottom left egg\n        egg([0, 30, -30], [-12, -8, -6], 2);\n        \n        // Bottom right egg\n        egg([0, 30, 30], [12, -8, -6], 0);\n        \n        // Back left egg\n        egg([30, 0, 45], [-8, -2, -12], 1);\n        \n        // Back right egg\n        egg([-30, 0, -45], [8, -2, -12], 2);\n        \n        // Stems for bottom eggs\n        translate([-12, -8, -16]) {\n            rotate([0, 0, -30]) {\n                stem();\n            }\n        }\n        translate([12, -8, -16]) {\n            rotate([0, 0, 30]) {\n                stem();\n            }\n        }\n    }\n}\n\n// Render the complete model\nexeggcute();",
    "renders": true
  },
  {
    "pokemon": "exeggutor",
    "openscad_code": "// Exeggutor - Realistic Style, Medium Complexity\n// OpenSCAD 3D printable model\n\n// Color definitions\n$fn = 32;\nbody_color = \"#78C850\";  // Grass green\ncoconut_color = \"#8B4513\";  // Saddle brown\nface_color = \"#F5DEB3\";  // Wheat\neye_color = \"#FF0000\";  // Red\nmouth_color = \"#2F4F2F\";  // Dark green\nstalk_color = \"#90EE90\";  // Light green\n\n// Main body - palm tree trunk\nmodule trunk() {\n    color(body_color) {\n        translate([0, 0, 0])\n            cylinder(h = 60, d1 = 18, d2 = 12);\n        \n        // Trunk segments for realistic texture\n        for (i = [0:5:55]) {\n            translate([0, 0, i])\n                cylinder(h = 3, d1 = 16 - i/10, d2 = 15 - i/10);\n        }\n    }\n}\n\n// Coconut heads with faces\nmodule coconut_head(x, y, z, rot_x, rot_y, rot_z) {\n    translate([x, y, z]) {\n        rotate([rot_x, rot_y, rot_z]) {\n            color(coconut_color) {\n                // Main coconut\n                sphere(d = 22);\n                \n                // Face area\n                color(face_color) {\n                    translate([0, -10, 5])\n                        sphere(d = 15);\n                }\n                \n                // Eyes\n                color(eye_color) {\n                    translate([-5, -12, 8])\n                        sphere(d = 4);\n                    translate([5, -12, 8])\n                        sphere(d = 4);\n                }\n                \n                // Mouth\n                color(mouth_color) {\n                    translate([0, -8, 3])\n                        rotate([90, 0, 0])\n                        cylinder(h = 2, d1 = 6, d2 = 3);\n                }\n                \n                // Coconut texture lines\n                for (i = [0:30:360]) {\n                    rotate([0, 0, i])\n                        translate([11, 0, 0])\n                            cube([1, 0.5, 22], center = true);\n                }\n            }\n        }\n    }\n}\n\n// Palm leaves\nmodule palm_leaf(length, width, angle) {\n    color(stalk_color) {\n        rotate([0, 0, angle]) {\n            // Main leaf blade\n            translate([length/2, 0, 0])\n                scale([length, width, 1])\n                cube([1, 1, 0.5], center = true);\n            \n            // Leaf segments\n            for (i = [0:5:length]) {\n                translate([i, 0, 0.5])\n                    rotate([0, 0, i/2])\n                        cube([length/10, width/2, 0.3], center = true);\n                translate([i, 0, -0.5])\n                    rotate([0, 0, -i/2])\n                        cube([length/10, width/2, 0.3], center = true);\n            }\n        }\n    }\n}\n\n// Leaf crown assembly\nmodule leaf_crown() {\n    translate([0, 0, 70]) {\n        // Central stalk\n        color(stalk_color) {\n            cylinder(h = 20, d = 4);\n        }\n        \n        // Palm leaves in radial pattern\n        for (i = [0:45:360]) {\n            translate([0, 0, 20])\n                rotate([30, 0, 0])\n                    palm_leaf(35, 8, i);\n        }\n    }\n}\n\n// Feet for stability\nmodule feet() {\n    color(body_color) {\n        translate([-8, -8, -2])\n            cylinder(h = 4, d = 8);\n        translate([8, -8, -2])\n            cylinder(h = 4, d = 8);\n        translate([0, 8, -2])\n            cylinder(h = 4, d = 8);\n    }\n}\n\n// Main assembly\nunion() {\n    // Base and trunk\n    feet();\n    trunk();\n    \n    // Three coconut heads\n    coconut_head(0, 15, 65, -20, 0, 0);\n    coconut_head(-15, -5, 60, 10, -15, -30);\n    coconut_head(15, -5, 60, 10, 15, 30);\n    \n    // Leaf crown\n    leaf_crown();\n}",
    "renders": true
  },
  {
    "pokemon": "cubone",
    "openscad_code": "// Cubone - Lonely Pokemon\n// Medium complexity realistic 3D printable model\n\nscale_factor = 0.35;\nfull_scale = 50;\n\nmodule skull_helmet() {\n    difference() {\n        union() {\n            // Main skull cap\n            color(\"lightgray\")\n            scale([1.2, 1, 1.1])\n            sphere(d=30 * scale_factor);\n            \n            // Snout extension\n            color(\"lightgray\")\n            translate([10 * scale_factor, 0, -5 * scale_factor])\n            scale([1.5, 0.8, 0.6])\n            sphere(d=20 * scale_factor);\n            \n            // Horn\n            color(\"ivory\")\n            translate([5 * scale_factor, 0, 12 * scale_factor])\n            rotate([0, 0, 0])\n            cylinder(h=15 * scale_factor, r1=3 * scale_factor, r2=0);\n        }\n        \n        // Eye holes\n        color(\"black\")\n        for (i = [-1, 1]) {\n            translate([5 * scale_factor, i * 8 * scale_factor, 3 * scale_factor])\n            rotate([0, 90, 0])\n            cylinder(h=15 * scale_factor, r=3 * scale_factor);\n        }\n        \n        // Nostril holes\n        color(\"black\")\n        for (i = [-1, 1]) {\n            translate([18 * scale_factor, i * 3 * scale_factor, -3 * scale_factor])\n            cylinder(h=5 * scale_factor, r=1 * scale_factor);\n        }\n    }\n}\n\nmodule body() {\n    // Main body\n    color(\"saddlebrown\")\n    translate([0, 0, -20 * scale_factor])\n    scale([1, 0.8, 1.2])\n    sphere(d=35 * scale_factor);\n    \n    // Belly\n    color(\"burlywood\")\n    translate([0, 0, -25 * scale_factor])\n    scale([0.6, 0.7, 0.8])\n    sphere(d=30 * scale_factor);\n}\n\nmodule arms() {\n    for (side = [-1, 1]) {\n        color(\"saddlebrown\")\n        translate([side * 12 * scale_factor, 0, -15 * scale_factor])\n        rotate([0, 0, side * 30])\n        cylinder(h=20 * scale_factor, r1=5 * scale_factor, r2=4 * scale_factor);\n        \n        // Hands\n        color(\"burlywood\")\n        translate([side * 22 * scale_factor, 0, -15 * scale_factor])\n        sphere(d=8 * scale_factor);\n    }\n}\n\nmodule legs() {\n    for (side = [-1, 1]) {\n        color(\"saddlebrown\")\n        translate([side * 8 * scale_factor, 0, -35 * scale_factor])\n        rotate([0, 0, side * -10])\n        cylinder(h=15 * scale_factor, r1=6 * scale_factor, r2=4 * scale_factor);\n        \n        // Feet\n        color(\"burlywood\")\n        translate([side * 8 * scale_factor, 0, -48 * scale_factor])\n        scale([1.2, 2, 0.5])\n        sphere(d=12 * scale_factor);\n    }\n}\n\nmodule tail() {\n    color(\"saddlebrown\")\n    translate([0, 0, -25 * scale_factor])\n    rotate([0, 0, 180])\n    cylinder(h=25 * scale_factor, r1=6 * scale_factor, r2=2 * scale_factor);\n    \n    // Tail bone\n    color(\"lightgray\")\n    for (i = [0:4]) {\n        translate([0, 0, -30 * scale_factor - i * 4 * scale_factor])\n        sphere(d=3 * scale_factor);\n    }\n}\n\nmodule bone_club() {\n    color(\"ivory\")\n    translate([-25 * scale_factor, -15 * scale_factor, -25 * scale_factor])\n    rotate([0, 0, -45])\n    cylinder(h=25 * scale_factor, r1=4 * scale_factor, r2=3 * scale_factor);\n    \n    // Club spikes\n    for (i = [0:2]) {\n        translate([-35 * scale_factor + i * 5 * scale_factor, -15 * scale_factor, -25 * scale_factor])\n        sphere(d=5 * scale_factor);\n    }\n}\n\n// Scale entire model\nscale([full_scale * 0.02, full_scale * 0.02, full_scale * 0.02])\nunion() {\n    skull_helmet();\n    body();\n    arms();\n    legs();\n    tail();\n    bone_club();\n}",
    "renders": true
  },
  {
    "pokemon": "marowak",
    "openscad_code": "// Marowak - Alola Form (Ghost/Fire type) - Realistic Style\n// Medium complexity 3D printable model\n\n// Colors\nboneColor = [0.85, 0.82, 0.78];\ndarkGray = [0.25, 0.25, 0.25];\nlightGray = [0.5, 0.5, 0.5];\npurple = [0.4, 0.2, 0.6];\nflameColor = [1, 0.4, 0.1];\n\n// Overall scale\nscaleFactor = 0.8;\n\n// Main body\nmodule marowak() {\n    color(boneColor)\n    union() {\n        // Head\n        translate([0, 0, 30]) {\n            difference() {\n                sphere(d = 18, $fn = 32);\n                // Eye sockets\n                translate([-5, 7, 5]) sphere(d = 4, $fn = 16);\n                translate([5, 7, 5]) sphere(d = 4, $fn = 16);\n                // Snout\n                translate([0, -8, 0]) scale([1.2, 1, 1]) sphere(d = 8, $fn = 16);\n            }\n            // Snout tip\n            translate([0, -13, -2]) sphere(d = 6, $fn = 16);\n        }\n        \n        // Skull mask\n        color(darkGray)\n        translate([0, 0, 32]) {\n            difference() {\n                scale([1.8, 1.6, 1.4]) sphere(d = 20, $fn = 32);\n                // Eye holes\n                translate([-7, 5, 3]) cylinder(h = 10, d = 6, $fn = 16);\n                translate([7, 5, 3]) cylinder(h = 10, d = 6, $fn = 16);\n                // Nose hole\n                translate([0, -5, 0]) cylinder(h = 10, d = 4, $fn = 16);\n            }\n        }\n        \n        // Body\n        color(boneColor)\n        translate([0, 0, 15]) {\n            cylinder(h = 20, d1 = 16, d2 = 14, $fn = 24);\n        }\n        \n        // Belly\n        color(lightGray)\n        translate([0, -2, 15]) {\n            scale([0.8, 0.7, 1]) cylinder(h = 18, d1 = 14, d2 = 12, $fn = 24);\n        }\n        \n        // Legs\n        for(x = [-6, 6]) {\n            translate([x, 0, 8]) {\n                cylinder(h = 8, d = 6, $fn = 12);\n                // Feet\n                translate([0, -3, -2]) {\n                    rotate([0, 0, x > 0 ? 15 : -15])\n                    cube([8, 12, 4], center = true);\n                }\n            }\n        }\n        \n        // Arms\n        for(x = [-8, 8]) {\n            translate([x, 0, 20]) {\n                rotate([0, 0, x > 0 ? -20 : 20])\n                cylinder(h = 12, d = 5, $fn = 12);\n                \n                // Hands\n                translate([0, -4, -4]) {\n                    cube([6, 8, 6], center = true);\n                }\n            }\n        }\n        \n        // Tail\n        color(purple)\n        translate([0, 12, 15]) {\n            rotate([30, 0, 0])\n            cylinder(h = 15, d1 = 6, d2 = 4, $fn = 12);\n        }\n        \n        // Bone club\n        color(boneColor)\n        translate([12, -8, 18]) {\n            rotate([0, 0, -45])\n            rotate([90, 0, 0])\n            cylinder(h = 25, d = 4, $fn = 12);\n            \n            // Club head\n            translate([0, 0, 25]) {\n                sphere(d = 8, $fn = 16);\n                // Bone markings\n                for(i = [0:2]) {\n                    rotate([0, 0, i * 120])\n                    translate([3, 0, 0])\n                    cube([2, 1, 6], center = true);\n                }\n            }\n        }\n        \n        // Ghost flames\n        color(flameColor)\n        for(angle = [0:120:240]) {\n            rotate([0, 0, angle])\n            translate([0, 0, 40]) {\n                for(i = [0:3]) {\n                    translate([0, 5 + i * 2, -i * 2])\n                    scale([1 - i * 0.2, 1 - i * 0.2, 1])\n                    sphere(d = 4 - i, $fn = 8);\n                }\n            }\n        }\n        \n        // Markings on body\n        color(purple)\n        translate([0, 0, 20]) {\n            for(angle = [0:72:360]) {\n                rotate([0, 0, angle])\n                translate([0, 7, 0])\n                cube([2, 6, 1], center = true);\n            }\n        }\n    }\n}\n\n// Main assembly\nscale([scaleFactor, scaleFactor, scaleFactor])\nmarowak();",
    "renders": true
  },
  {
    "pokemon": "hitmonlee",
    "openscad_code": "// Hitmonlee - Realistic Style, Medium Complexity\n// Size: 80mm height\n\n$fn = 32;\n\n// Colors\ncolor_body = [0.8, 0.7, 0.6];\ncolor_mouth = [0.3, 0.2, 0.2];\ncolor_eye = [0.9, 0.9, 0.9];\ncolor_pupil = [0, 0, 0];\ncolor_marking = [0.9, 0.8, 0.7];\n\n// Main body\nmodule hitmonlee_body() {\n    color(color_body) {\n        // Torso\n        translate([0, 0, 30]) {\n            scale([0.8, 0.6, 1.2])\n                sphere(d = 35);\n        }\n        \n        // Chest extension\n        translate([0, 7, 20]) {\n            scale([0.7, 0.3, 1])\n                sphere(d = 30);\n        }\n        \n        // Waist\n        translate([0, 0, 15]) {\n            cylinder(h = 15, d1 = 25, d2 = 20);\n        }\n    }\n}\n\n// Head\nmodule hitmonlee_head() {\n    color(color_body) {\n        // Main head\n        translate([0, 0, 55]) {\n            scale([1.2, 0.9, 1.3])\n                sphere(d = 30);\n        }\n        \n        // Snout\n        translate([0, 15, 55]) {\n            scale([0.8, 1, 0.6])\n                sphere(d = 25);\n        }\n        \n        // Ears - two flattened spheres\n        for(i = [-1, 1]) {\n            translate([i * 18, 10, 70]) {\n                rotate([0, i * -20, 0])\n                    scale([0.3, 0.8, 2])\n                        sphere(d = 15);\n            }\n        }\n    }\n}\n\n// Legs - long spring-like legs\nmodule hitmonlee_leg(side) {\n    color(color_body) {\n        // Upper leg\n        translate([side * 12, 0, 15]) {\n            rotate([0, 0, side * 5])\n                cylinder(h = 25, d = 12);\n        }\n        \n        // Knee joint\n        translate([side * 15, 0, -5]) {\n            sphere(d = 15);\n        }\n        \n        // Lower leg - segmented for spring effect\n        for(i = [0:3]) {\n            translate([side * 18, 0, -15 - i * 8]) {\n                scale([0.8, 0.8, 0.5])\n                    sphere(d = 15);\n            }\n        }\n        \n        // Foot\n        translate([side * 20, 0, -45]) {\n            scale([1.5, 2, 0.5])\n                sphere(d = 20);\n        }\n    }\n}\n\n// Arms - stubby arms\nmodule hitmonlee_arm(side) {\n    color(color_body) {\n        translate([side * 20, 0, 35]) {\n            rotate([0, 0, side * -30])\n                cylinder(h = 20, d = 10);\n        }\n        \n        // Fist\n        translate([side * 30, 0, 35]) {\n            sphere(d = 15);\n        }\n    }\n}\n\n// Face features\nmodule hitmonlee_face() {\n    // Eyes - oval\n    for(i = [-1, 1]) {\n        color(color_eye) {\n            translate([i * 10, 20, 65]) {\n                rotate([0, 15, 0])\n                    scale([0.8, 1, 0.3])\n                        sphere(d = 12);\n            }\n        }\n        \n        color(color_pupil) {\n            translate([i * 10, 20, 68]) {\n                sphere(d = 5);\n            }\n        }\n    }\n    \n    // Mouth line\n    color(color_mouth) {\n        translate([0, 25, 55]) {\n            rotate([90, 0, 0])\n                linear_extrude(height = 2)\n                    square([15, 2], center = true);\n        }\n    }\n    \n    // Nostril markings\n    color(color_marking) {\n        for(i = [-1, 1]) {\n            translate([i * 5, 25, 50]) {\n                sphere(d = 3);\n            }\n        }\n    }\n}\n\n// Body markings\nmodule hitmonlee_markings() {\n    color(color_marking) {\n        // Chest marking\n        translate([0, 12, 25]) {\n            scale([1.2, 0.3, 1])\n                sphere(d = 20);\n        }\n        \n        // Belt-like marking\n        translate([0, 0, 20]) {\n            rotate([90, 0, 0])\n                cylinder(h = 8, d = 28);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    hitmonlee_body();\n    hitmonlee_head();\n    hitmonlee_face();\n    hitmonlee_markings();\n    \n    // Legs\n    hitmonlee_leg(-1);\n    hitmonlee_leg(1);\n    \n    // Arms\n    hitmonlee_arm(-1);\n    hitmonlee_arm(1);\n}",
    "renders": true
  },
  {
    "pokemon": "hitmonchan",
    "openscad_code": "// Hitmonchan OpenSCAD Model - Realistic Style, Medium Complexity\n\n// Color constants\n$fa = 1;\n$fs = 0.4;\n\nmodule head() {\n    // Main head sphere\n    color(\"purple\") \n    difference() {\n        sphere(12);\n        // Face area\n        translate([0, 0, 6])\n        cube([20, 20, 15], center=true);\n    }\n    \n    // Ears\n    for(side = [-1, 1]) {\n        color(\"purple\")\n        translate([side * 10, 10, 8])\n        rotate([0, 0, side * 20])\n        scale([1, 0.6, 2])\n        sphere(4);\n    }\n    \n    // Eyes\n    for(side = [-1, 1]) {\n        color(\"white\")\n        translate([side * 5, -11, 3])\n        sphere(3);\n        \n        color(\"black\")\n        translate([side * 5, -12.5, 3])\n        sphere(1.5);\n    }\n    \n    // Nose\n    color(\"black\")\n    translate([0, -11, 0])\n    cube([2, 1, 2], center=true);\n    \n    // Mouth\n    color(\"black\")\n    translate([0, -11, -4])\n    rotate([90, 0, 0])\n    cylinder(h=0.5, r1=2, r2=1.5);\n}\n\nmodule body() {\n    // Torso\n    color(\"purple\")\n    translate([0, 0, -20])\n    scale([1.2, 1, 1.5])\n    sphere(10);\n    \n    // Chest armor\n    color(\"red\")\n    translate([0, -10, -15])\n    rotate([90, 0, 0])\n    cylinder(h=3, r1=8, r2=6);\n    \n    // Skirt\n    color(\"red\")\n    translate([0, -10, -28])\n    rotate([90, 0, 0])\n    cylinder(h=5, r1=11, r2=9);\n}\n\nmodule arms() {\n    for(side = [-1, 1]) {\n        // Shoulder\n        color(\"purple\")\n        translate([side * 12, 5, -15])\n        sphere(5);\n        \n        // Upper arm\n        color(\"purple\")\n        translate([side * 15, 5, -20])\n        rotate([0, 0, side * -30])\n        scale([0.8, 0.8, 1.5])\n        sphere(4);\n        \n        // Glove\n        color(\"red\")\n        translate([side * 20, 5, -30])\n        sphere(6);\n    }\n}\n\nmodule legs() {\n    for(side = [-1, 1]) {\n        // Upper leg\n        color(\"purple\")\n        translate([side * 4, 0, -38])\n        rotate([0, 0, side * 10])\n        scale([0.8, 0.8, 1.8])\n        sphere(5);\n        \n        // Lower leg\n        color(\"purple\")\n        translate([side * 5, 0, -50])\n        scale([0.7, 0.7, 1.5])\n        sphere(5);\n        \n        // Shoe\n        color(\"red\")\n        translate([side * 5, 0, -60])\n        scale([1.2, 1, 0.6])\n        sphere(5);\n    }\n}\n\nmodule tail() {\n    // Tail base\n    color(\"red\")\n    translate([0, 10, -25])\n    rotate([45, 0, 0])\n    scale([0.5, 0.5, 2])\n    sphere(3);\n}\n\n// Main assembly\nunion() {\n    head();\n    body();\n    arms();\n    legs();\n    tail();\n}",
    "renders": true
  },
  {
    "pokemon": "lickitung",
    "openscad_code": "// Lickitung Pokemon - Realistic Style, Medium Complexity\n// Size: 80mm tall\n\n// Main colors\npink = [0.96, 0.75, 0.76];\nlight_pink = [1, 0.85, 0.85];\nwhite = [1, 1, 1];\nblack = [0.1, 0.1, 0.1];\n\n// Main body\nmodule body() {\n    color(pink)\n    union() {\n        // Torso\n        translate([0, 0, 25])\n            scale([1, 0.8, 1.2])\n            sphere(20);\n        \n        // Belly\n        color(light_pink)\n        translate([0, -15, 20])\n            scale([1.2, 0.5, 1])\n            sphere(18);\n    }\n}\n\n// Head\nmodule head() {\n    color(pink)\n    union() {\n        // Main head shape\n        translate([0, 30, 45])\n            scale([1.2, 1, 0.9])\n            sphere(18);\n        \n        // Snout\n        translate([0, 45, 42])\n            scale([0.8, 0.8, 0.6])\n            rotate([15, 0, 0])\n            cylinder(15, 12, 8);\n        \n        // Eyes\n        color(white)\n        for(x = [-8, 8]) {\n            translate([x, 35, 55])\n                sphere(5);\n            color(black)\n            translate([x, 35, 57])\n                sphere(2.5);\n        }\n        \n        // Mouth line\n        color(white)\n        translate([0, 48, 38])\n            rotate([90, 0, 0])\n            cylinder(1, 8, 8);\n    }\n}\n\n// Tongue\nmodule tongue() {\n    color([0.9, 0.4, 0.5])\n    union() {\n        // Tongue base\n        translate([0, 55, 35])\n            rotate([20, 0, 0])\n            scale([1, 0.3, 0.3])\n            cylinder(30, 12, 8);\n        \n        // Tongue tip\n        translate([0, 80, 40])\n            sphere(10);\n    }\n}\n\n// Legs\nmodule legs() {\n    color(pink)\n    for(x = [-12, 12]) {\n        // Thigh\n        translate([x, 10, 15])\n            rotate([0, 0, 0])\n            scale([0.8, 0.8, 1])\n            cylinder(15, 8, 8);\n        \n        // Foot\n        translate([x, 10, 5])\n            rotate([0, 0, 0])\n            scale([1.2, 1.5, 0.5])\n            sphere(8);\n    }\n}\n\n// Arms\nmodule arms() {\n    color(pink)\n    for(x = [-20, 20]) {\n        // Upper arm\n        translate([x, 20, 35])\n            rotate([0, 0, -30 * (x > 0 ? 1 : -1)])\n            cylinder(15, 6, 6);\n        \n        // Hand\n        translate([x + 8 * (x > 0 ? 1 : -1), 30, 30])\n            scale([1.2, 1, 1])\n            sphere(6);\n    }\n}\n\n// Tail\nmodule tail() {\n    color(pink)\n    hull() {\n        translate([0, -25, 25])\n            sphere(15);\n        translate([0, -40, 20])\n            sphere(12);\n        translate([0, -55, 15])\n            sphere(10);\n        translate([0, -70, 12])\n            scale([0.8, 0.8, 0.8])\n            sphere(8);\n    }\n}\n\n// Stripes on legs\nmodule stripes() {\n    color(light_pink)\n    for(x = [-12, 12]) {\n        translate([x, 15, 18])\n            rotate([90, 0, 0])\n            cylinder(1, 7, 7);\n        translate([x, 15, 14])\n            rotate([90, 0, 0])\n            cylinder(1, 7, 7);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    tongue();\n    legs();\n    arms();\n    tail();\n    stripes();\n}",
    "renders": true
  },
  {
    "pokemon": "koffing",
    "openscad_code": "// Koffing Pokemon - Realistic Style\n// Medium complexity OpenSCAD model for 3D printing\n\n$fn = 36;\nmodule main() {\n    color([0.4, 0.4, 0.4]) {\n        // Main body sphere\n        sphere(30);\n        \n        // Top dome for rounded top\n        translate([0, 0, 25])\n            scale([1, 1, 0.3])\n                sphere(15);\n    }\n}\n\n// Skull and crossbones markings\nmodule skull_markings() {\n    color([0.6, 0.6, 0.6]) {\n        // Left skull marking\n        translate([-10, 0, 15])\n            rotate([0, 0, 15])\n                scale([0.8, 1, 0.3])\n                    cylinder(h=2, r1=8, r2=6);\n        \n        // Right skull marking\n        translate([10, 0, 15])\n            rotate([0, 0, -15])\n                scale([0.8, 1, 0.3])\n                    cylinder(h=2, r1=8, r2=6);\n        \n        // Crossbones\n        translate([0, -8, 15])\n            rotate([90, 0, 0])\n                scale([0.3, 0.3, 1])\n                    cylinder(h=15, r=2);\n        \n        translate([0, 8, 15])\n            rotate([90, 0, 90])\n                scale([0.3, 0.3, 1])\n                    cylinder(h=15, r=2);\n    }\n}\n\n// Gas vent holes\nmodule vents() {\n    color([0.3, 0.3, 0.3]) {\n        // Front vents\n        for(i = [0:2]) {\n            rotate([0, 0, i * 120])\n                translate([0, 25, 5])\n                    rotate([90, 0, 0])\n                        cylinder(h=8, r1=4, r2=6);\n        }\n        \n        // Side vents\n        translate([25, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=8, r1=4, r2=6);\n        \n        translate([-25, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=8, r1=4, r2=6);\n    }\n}\n\n// Facial features\nmodule face() {\n    color([0.8, 0.2, 0.2]) {\n        // Eyes\n        translate([-8, 15, 10])\n            scale([1.5, 1, 1])\n                sphere(3);\n        translate([8, 15, 10])\n            scale([1.5, 1, 1])\n                sphere(3);\n        \n        // Eye pupils\n        color([0, 0, 0]) {\n            translate([-8, 16, 11])\n                sphere(1.5);\n            translate([8, 16, 11])\n                sphere(1.5);\n        }\n        \n        // Mouth\n        translate([0, 10, 0])\n            rotate([0, 0, 0])\n                scale([1.5, 0.8, 0.5])\n                    cylinder(h=5, r1=8, r2=6);\n    }\n}\n\n// Toxic gas clouds\nmodule gas_clouds() {\n    color([0.6, 0.8, 0.4, 0.7]) {\n        // Small gas puffs around vents\n        for(i = [0:5]) {\n            rotate([0, 0, i * 60])\n                translate([0, 30 + i*2, 8])\n                    scale([1 + i*0.1, 1 + i*0.1, 0.7])\n                        sphere(3 + i*0.5);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    difference() {\n        main();\n        \n        // Hollow interior for printing\n        translate([0, 0, -5])\n            scale([0.9, 0.9, 0.9])\n                sphere(28);\n        \n        // Vent holes through body\n        vents();\n    }\n    \n    // Add details on surface\n    skull_markings();\n    face();\n    gas_clouds();\n}",
    "renders": true
  },
  {
    "pokemon": "weezing",
    "openscad_code": "// Weezing Pokemon in realistic style\n// Medium complexity with 3D printing considerations\n\n// Colors\n$fn = 50;\n\n// Main body color\ncolor(\"purple\") {\n    // Left head\n    translate([-25, 0, 0]) \n        scale([1, 1, 1.2]) \n        sphere(25);\n    \n    // Right head\n    translate([25, 0, 0]) \n        scale([1, 1, 1.2]) \n        sphere(25);\n    \n    // Connecting body between heads\n    hull() {\n        translate([-25, 0, 0]) sphere(20);\n        translate([25, 0, 0]) sphere(20);\n    }\n}\n\n// Skull and crossbones markings\nmodule skull_crossbones(x, y, z) {\n    color(\"dimgray\") {\n        // Skull base\n        translate([x, y, z]) \n            scale([0.8, 0.8, 0.6]) \n            sphere(8);\n        \n        // Eye sockets\n        difference() {\n            translate([x, y, z]) \n                scale([0.8, 0.8, 0.6]) \n                sphere(8);\n            translate([x-2.5, y+1, z+3]) \n                sphere(2.5);\n            translate([x+2.5, y+1, z+3]) \n                sphere(2.5);\n            translate([x, y-2, z+2]) \n                sphere(2);\n        }\n        \n        // Crossbones\n        translate([x, y-8, z]) \n            rotate([45, 0, 0]) \n            scale([0.5, 0.5, 8]) \n            cube([3, 3, 1], center=true);\n        translate([x, y-8, z]) \n            rotate([-45, 0, 0]) \n            scale([0.5, 0.5, 8]) \n            cube([3, 3, 1], center=true);\n    }\n}\n\n// Apply skull markings\nskull_crossbones(-25, 15, 20);\nskull_crossbones(25, 15, 20);\n\n// Toxic gas clouds\nmodule gas_cloud(x, y, z, scale_factor) {\n    color(\"mediumorchid\") {\n        for(i = [0:5]) {\n            translate([\n                x + sin(i*60)*8, \n                y + cos(i*60)*8, \n                z + i*2\n            ]) \n                scale(scale_factor) \n                sphere(5 + i);\n        }\n    }\n}\n\n// Gas clouds around heads\ngas_cloud(-25, 0, 30, [0.6, 0.6, 0.6]);\ngas_cloud(25, 0, 30, [0.6, 0.6, 0.6]);\n\n// Small gas vents on heads\nfor(i = [0:3]) {\n    color(\"plum\") {\n        angle = i * 90;\n        translate([\n            -25 + cos(angle) * 20,\n            sin(angle) * 20,\n            25\n        ]) \n            sphere(3);\n        \n        translate([\n            25 + cos(angle) * 20,\n            sin(angle) * 20,\n            25\n        ]) \n            sphere(3);\n    }\n}\n\n// Facial features - eyes\nmodule eyes(x, y, z) {\n    color(\"red\") {\n        // Left eye\n        translate([x-8, y+15, z+15]) \n            scale([1.2, 1, 0.5]) \n            sphere(4);\n        \n        // Right eye\n        translate([x+8, y+15, z+15]) \n            scale([1.2, 1, 0.5]) \n            sphere(4);\n    }\n    \n    // Eye pupils\n    color(\"black\") {\n        translate([x-8, y+16, z+17]) \n            sphere(1.5);\n        translate([x+8, y+16, z+17]) \n            sphere(1.5);\n    }\n}\n\n// Apply eyes to both heads\neyes(-25, 0, 0);\neyes(25, 0, 0);\n\n// Mouths with teeth\nmodule mouth(x, y, z) {\n    color(\"black\") {\n        // Mouth opening\n        translate([x, y+8, z-15]) \n            scale([1.5, 0.8, 0.5]) \n            sphere(8);\n    }\n    \n    color(\"white\") {\n        // Top teeth\n        for(i = [-1:1]) {\n            translate([x + i*3, y+8, z-12]) \n                scale([0.5, 1, 1]) \n                cube([2, 4, 1]);\n        }\n    }\n}\n\n// Apply mouths\nmouth(-25, 0, 0);\nmouth(25, 0, 0);\n\n// Smaller third head bump on top\ncolor(\"purple\") {\n    translate([0, 0, 35]) \n        sphere(12);\n}\n\n// Third head features\ncolor(\"red\") {\n    translate([-3, 0, 42]) \n        scale([1, 1, 0.5]) \n        sphere(3);\n    translate([3, 0, 42]) \n        scale([1, 1, 0.5]) \n        sphere(3);\n}\n\ncolor(\"black\") {\n    translate([-3, 0, 43]) \n        sphere(1);\n    translate([3, 0, 43]) \n        sphere(1);\n}\n\n// Base platform for stability\ncolor(\"darkslategray\") {\n    cylinder(h=2, r1=45, r2=40);\n}",
    "renders": true
  },
  {
    "pokemon": "rhyhorn",
    "openscad_code": "// Rhyhorn OpenSCAD Model - Realistic Style, Medium Complexity\n// Size: ~70mm length\n\nmodule rhyhorn_body() {\n    // Main body - grey rocky texture\n    color(\"gray\") {\n        // Central torso\n        translate([-15, 0, 0]) \n            scale([1.5, 1.2, 1])\n                sphere(d=40, $fn=32);\n        \n        // Lower belly bulge\n        translate([-10, 0, -15])\n            scale([1.3, 1, 0.8])\n                sphere(d=30, $fn=32);\n    }\n}\n\nmodule rhyhorn_head() {\n    color(\"gray\") {\n        // Main head shape\n        translate([25, 0, 10])\n            rotate([0, 15, 0])\n                scale([1.2, 0.8, 0.9])\n                    sphere(d=35, $fn=32);\n        \n        // Snout\n        translate([40, 0, 8])\n            rotate([0, -10, 0])\n                scale([1.5, 0.6, 0.5])\n                    cylinder(h=20, d1=25, d2=15, $fn=32);\n    }\n    \n    // Horn\n    color(\"slategray\") {\n        translate([45, 0, 25])\n            rotate([0, -30, 0])\n                cylinder(h=30, d1=8, d2=2, $fn=6);\n    }\n}\n\nmodule rhyhorn_legs() {\n    module leg(pos, rot) {\n        color(\"gray\") {\n            translate(pos)\n                rotate(rot)\n                    scale([0.8, 0.8, 1.2])\n                        cylinder(h=25, d=15, $fn=16);\n            \n            // Hoof\n            translate([pos[0], pos[1], pos[2]-15])\n                rotate(rot)\n                    scale([1.1, 1.1, 0.3])\n                        cylinder(h=5, d=15, $fn=16);\n        }\n    }\n    \n    // Front legs\n    leg([15, 12, -10], [0, 0, 15]);\n    leg([15, -12, -10], [0, 0, -15]);\n    \n    // Back legs\n    leg([-20, 12, -8], [0, 0, -10]);\n    leg([-20, -12, -8], [0, 0, 10]);\n}\n\nmodule rhyhorn_plates() {\n    // Back plates\n    color(\"darkgray\") {\n        for(i = [0:2]) {\n            translate([-25 + i*15, 0, 15 + i*3])\n                rotate([0, 0, i*5])\n                    scale([1.2, 0.8, 0.3])\n                        cube([20, 15, 5], center=true);\n        }\n    }\n}\n\nmodule rhyhorn_tail() {\n    color(\"gray\") {\n        translate([-35, 0, 5])\n            rotate([0, 0, -30])\n                scale([0.8, 0.8, 1])\n                    cylinder(h=25, d=12, $fn=16);\n    }\n}\n\nmodule rhyhorn_face() {\n    // Eyes\n    color(\"red\") {\n        translate([38, 8, 15])\n            sphere(d=5, $fn=16);\n        translate([38, -8, 15])\n            sphere(d=5, $fn=16);\n    }\n    \n    // Nostrils\n    color(\"black\") {\n        translate([45, 3, 8])\n            cylinder(h=3, d=3, $fn=8);\n        translate([45, -3, 8])\n            cylinder(h=3, d=3, $fn=8);\n    }\n}\n\nmodule rhyhorn_rock_texture() {\n    // Add small rocky details\n    color(\"darkgray\") {\n        for(i = [1:20]) {\n            translate([rand(-30, 30), rand(-20, 20), rand(-10, 20)])\n                sphere(d=rand(3, 6), $fn=8);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    rhyhorn_body();\n    rhyhorn_head();\n    rhyhorn_legs();\n    rhyhorn_plates();\n    rhyhorn_tail();\n    rhyhorn_face();\n    rhyhorn_rock_texture();\n}\n\n// Ground contact check\n%translate([0, 0, -15]) cube([80, 50, 0.1], center=true);",
    "renders": true
  },
  {
    "pokemon": "rhydon",
    "openscad_code": "// Rhydon Pokemon in OpenSCAD - Realistic Medium Complexity\n// Designed for 3D printing with no overhangs\n\n// Colors\ncolor_gray = [0.6, 0.6, 0.6];\ncolor_light_gray = [0.75, 0.75, 0.75];\ncolor_orange = [0.85, 0.4, 0.2];\ncolor_dark_orange = [0.7, 0.3, 0.15];\ncolor_red = [0.8, 0.2, 0.2];\n\n// Main body\nmodule rhydon_body() {\n    color(color_gray) {\n        // Torso\n        translate([0, 0, 20]) {\n            scale([1.2, 1, 1.4]) sphere(d=40, $fn=32);\n        }\n        \n        // Chest armor\n        translate([0, 10, 15]) {\n            scale([1.3, 0.8, 1.2]) sphere(d=35, $fn=32);\n        }\n    }\n}\n\n// Head\nmodule rhydon_head() {\n    color(color_gray) {\n        // Main head\n        translate([0, 0, 55]) {\n            scale([1.1, 1, 1.2]) sphere(d=35, $fn=32);\n        }\n        \n        // Snout\n        translate([0, -18, 52]) {\n            rotate([20, 0, 0]) {\n                scale([0.8, 1.5, 0.8]) cylinder(h=25, d1=20, d2=15, $fn=32);\n            }\n        }\n        \n        // Drill horn\n        color(color_light_gray) {\n            translate([0, -25, 60]) {\n                rotate([45, 0, 0]) {\n                    cylinder(h=30, d1=8, d2=0, $fn=16);\n                }\n            }\n        }\n    }\n}\n\n// Ears\nmodule rhydon_ears() {\n    color(color_gray) {\n        // Left ear\n        translate([-15, 0, 65]) {\n            rotate([0, 0, 30]) {\n                scale([0.3, 1, 0.3]) cylinder(h=15, d=10, $fn=6);\n            }\n        }\n        \n        // Right ear\n        translate([15, 0, 65]) {\n            rotate([0, 0, -30]) {\n                scale([0.3, 1, 0.3]) cylinder(h=15, d=10, $fn=6);\n            }\n        }\n    }\n}\n\n// Arms\nmodule rhydon_arms() {\n    color(color_gray) {\n        // Left arm\n        translate([-25, 5, 35]) {\n            rotate([0, 0, 45]) {\n                cylinder(h=30, d=10, $fn=16);\n            }\n        }\n        \n        // Right arm\n        translate([25, 5, 35]) {\n            rotate([0, 0, -45]) {\n                cylinder(h=30, d=10, $fn=16);\n            }\n        }\n        \n        // Fists\n        translate([-35, 15, 30]) sphere(d=15, $fn=16);\n        translate([35, 15, 30]) sphere(d=15, $fn=16);\n    }\n}\n\n// Legs\nmodule rhydon_legs() {\n    color(color_gray) {\n        // Left leg\n        translate([-15, 0, 0]) {\n            cylinder(h=25, d=15, $fn=16);\n        }\n        \n        // Right leg\n        translate([15, 0, 0]) {\n            cylinder(h=25, d=15, $fn=16);\n        }\n        \n        // Feet\n        translate([-15, 5, -10]) {\n            scale([1.5, 2, 0.8]) sphere(d=15, $fn=16);\n        }\n        translate([15, 5, -10]) {\n            scale([1.5, 2, 0.8]) sphere(d=15, $fn=16);\n        }\n    }\n}\n\n// Tail\nmodule rhydon_tail() {\n    color(color_gray) {\n        // Tail segments\n        for(i = [0:2]) {\n            translate([0, 20 + i*10, 20 - i*5]) {\n                rotate([0, 0, 20 + i*10]) {\n                    scale([0.8 - i*0.1, 0.8 - i*0.1, 0.8]) sphere(d=15 - i*3, $fn=16);\n                }\n            }\n        }\n    }\n}\n\n// Back spikes\nmodule rhydon_spikes() {\n    color(color_light_gray) {\n        // Central spike\n        translate([0, 0, 45]) {\n            rotate([0, 0, 0]) {\n                cylinder(h=15, d1=8, d2=0, $fn=8);\n            }\n        }\n        \n        // Side spikes\n        for(i = [-1:1]) {\n            if(i != 0) {\n                translate([i*10, -5, 40]) {\n                    rotate([0, 0, i*15]) {\n                        cylinder(h=12, d1=6, d2=0, $fn=8);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Belly pattern\nmodule rhydon_pattern() {\n    color(color_orange) {\n        translate([0, 12, 25]) {\n            scale([1, 0.5, 1.2]) sphere(d=25, $fn=32);\n        }\n    }\n}\n\n// Eyes\nmodule rhydon_eyes() {\n    color(color_red) {\n        // Left eye\n        translate([-8, -12, 58]) {\n            scale([1, 1.2, 0.5]) sphere(d=5, $fn=16);\n        }\n        \n        // Right eye\n        translate([8, -12, 58]) {\n            scale([1, 1.2, 0.5]) sphere(d=5, $fn=16);\n        }\n    }\n}\n\n// Nostrils\nmodule rhydon_nostrils() {\n    color(color_dark_orange) {\n        // Left nostril\n        translate([-3, -28, 52]) {\n            cylinder(h=3, d=2, $fn=8);\n        }\n        \n        // Right nostril\n        translate([3, -28, 52]) {\n            cylinder(h=3, d=2, $fn=8);\n        }\n    }\n}\n\n// Assemble the complete Rhydon\nrhydon_body();\nrhydon_head();\nrhydon_ears();\nrhydon_arms();\nrhydon_legs();\nrhydon_tail();\nrhydon_spikes();\nrhydon_pattern();\nrhydon_eyes();\nrhydon_nostrils();",
    "renders": true
  },
  {
    "pokemon": "chansey",
    "openscad_code": "// Realistic Chansey Pokemon\n// Designed for 3D printing at 80mm height\n\n// Color definitions\ncolor_pink = [252/255, 221/255, 236/255];\ncolor_egg = [255/255, 255/255, 235/255];\ncolor_red = [255/255, 105/255, 180/255];\n\n// Main body\nmodule chansey_body() {\n    difference() {\n        // Main egg-shaped body\n        scale([1, 1.2, 1.3])\n        sphere(d=50, $fn=64);\n        \n        // Bottom flattening for stability\n        translate([0, 0, -25])\n        cube([60, 60, 50], center=true);\n    }\n}\n\n// Head with pouches\nmodule chansey_head() {\n    translate([0, 0, 35])\n    union() {\n        // Head sphere\n        color(color_pink)\n        sphere(d=30, $fn=32);\n        \n        // Left ear pouch\n        translate([-15, 0, 5])\n        rotate([0, 30, 0])\n        scale([0.4, 0.4, 0.6])\n        sphere(d=20, $fn=16);\n        \n        // Right ear pouch\n        translate([15, 0, 5])\n        rotate([0, -30, 0])\n        scale([0.4, 0.4, 0.6])\n        sphere(d=20, $fn=16);\n    }\n}\n\n// Egg in pouch\nmodule egg_in_pouch() {\n    translate([0, -25, 32])\n    color(color_egg)\n    sphere(d=12, $fn=32);\n}\n\n// Hair tuft\nmodule hair_tuft() {\n    translate([0, -15, 50])\n    color(color_pink)\n    for(i = [0:2]) {\n        rotate([0, 0, i*120])\n        translate([5, 0, 0])\n        rotate([90, 0, 0])\n        cylinder(h=8, d1=3, d2=1, $fn=8);\n    }\n}\n\n// Eyes\nmodule eyes() {\n    // Left eye\n    translate([-8, 10, 40])\n    color(color_red)\n    sphere(d=4, $fn=16);\n    \n    // Right eye\n    translate([8, 10, 40])\n    color(color_red)\n    sphere(d=4, $fn=16);\n}\n\n// Arms\nmodule arms() {\n    // Left arm\n    translate([-25, 0, 10])\n    rotate([0, 0, -30])\n    rotate([90, 0, 0])\n    color(color_pink)\n    cylinder(h=20, d=8, $fn=16);\n    \n    // Right arm\n    translate([25, 0, 10])\n    rotate([0, 0, 30])\n    rotate([90, 0, 0])\n    color(color_pink)\n    cylinder(h=20, d=8, $fn=16);\n}\n\n// Feet\nmodule feet() {\n    // Left foot\n    translate([-10, -20, -25])\n    color(color_pink)\n    scale([1, 1.5, 0.5])\n    sphere(d=12, $fn=16);\n    \n    // Right foot\n    translate([10, -20, -25])\n    color(color_pink)\n    scale([1, 1.5, 0.5])\n    sphere(d=12, $fn=16);\n}\n\n// Tail\nmodule tail() {\n    translate([0, 28, -5])\n    rotate([30, 0, 0])\n    color(color_pink)\n    scale([0.8, 1.2, 0.3])\n    sphere(d=15, $fn=32);\n}\n\n// Assembly\ncolor(color_pink) chansey_body();\nchansey_head();\negg_in_pouch();\nhair_tuft();\neyes();\narms();\nfeet();\ntail();",
    "renders": true
  },
  {
    "pokemon": "tangela",
    "openscad_code": "// Tangela - Vine Pokemon\n// Medium complexity realistic design for 3D printing\n\n// Main color definitions\nbody_color = [0.2, 0.8, 0.3];  // Bright green\nvine_color = [0.15, 0.7, 0.25];  // Slightly darker green\neye_color = [0.9, 0.9, 0.9];  // White\npupil_color = [0.1, 0.1, 0.1];  // Black\nmouth_color = [0.6, 0.2, 0.2];  // Dark red\n\n// Main body module\nmodule tangela_body() {\n    color(body_color)\n    translate([0, 0, 10])\n    sphere(15, $fn=32);\n}\n\n// Vine generation module with realistic curves\nmodule vine_segment(length, start_angle, end_angle, thickness) {\n    color(vine_color)\n    for(i = [0:2:length-1]) {\n        translate([sin(start_angle + i*0.1) * i*0.8, \n                  cos(start_angle + i*0.1) * i*0.8, \n                  i*0.6])\n        rotate([0, 0, start_angle + i*0.1])\n        cylinder(h=3, r=thickness, $fn=8);\n    }\n}\n\n// Create a realistic vine cluster\nmodule vine_cluster(offset_x, offset_y, offset_z, rotation) {\n    translate([offset_x, offset_y, offset_z])\n    rotate([0, 0, rotation]) {\n        // Main vine\n        vine_segment(20, 0, 90, 2);\n        \n        // Secondary vines\n        translate([5, 0, 5]) vine_segment(15, 30, 60, 1.5);\n        translate([-5, 0, 3]) vine_segment(18, -30, 45, 1.8);\n        translate([0, 5, 7]) vine_segment(12, 60, 30, 1.3);\n        translate([0, -5, 4]) vine_segment(16, -60, 75, 1.6);\n    }\n}\n\n// Eye module\nmodule eye(x, y, z) {\n    translate([x, y, z]) {\n        color(eye_color)\n        sphere(3, $fn=16);\n        \n        color(pupil_color)\n        translate([0, 0, 2.1])\n        sphere(1.5, $fn=16);\n    }\n}\n\n// Mouth module\nmodule mouth() {\n    color(mouth_color)\n    translate([0, -12, 8])\n    rotate([90, 0, 0])\n    cylinder(h=0.5, r1=3, r2=2, $fn=16);\n}\n\n// Vine detail module for realistic texture\nmodule vine_detail() {\n    // Create multiple vine clusters around the body\n    vine_cluster(0, 0, 0, 0);\n    vine_cluster(10, 5, 5, 45);\n    vine_cluster(-8, -6, 3, -30);\n    vine_cluster(6, -10, 7, 60);\n    vine_cluster(-12, 8, 2, -45);\n    vine_cluster(8, 12, 4, 120);\n    vine_cluster(-15, 0, 6, 90);\n    vine_cluster(0, -15, 1, -90);\n}\n\n// Base platform for stability\nmodule base() {\n    color([0.3, 0.3, 0.3])\n    translate([0, 0, -2])\n    cylinder(h=2, r=25, $fn=32);\n}\n\n// Main assembly\nunion() {\n    // Base for stability\n    base();\n    \n    // Main body\n    tangela_body();\n    \n    // Vine details covering the body\n    vine_detail();\n    \n    // Eyes peeking through vines\n    eye(-5, -8, 15);\n    eye(5, -8, 15);\n    \n    // Mouth\n    mouth();\n    \n    // Additional small vines for realistic detail\n    translate([0, 0, 20])\n    vine_cluster(2, 2, 0, 180);\n    translate([0, 0, 18])\n    vine_cluster(-3, -3, 0, -135);\n    translate([0, 0, 16])\n    vine_cluster(1, -4, 0, 225);\n}",
    "renders": true
  },
  {
    "pokemon": "kangaskhan",
    "openscad_code": "// Kangaskhan - Realistic Style, Medium Complexity\n// Size: ~80mm tall\n\n// Colors\nkanga_brown = [112/255, 80/255, 56/255];\nkanga_beige = [216/255, 192/255, 168/255];\nkanga_dark = [64/255, 48/255, 32/255];\nkanga_red = [192/255, 48/255, 48/255];\n\n// Main body\nmodule body() {\n    color(kanga_brown) {\n        // Torso\n        translate([0, 0, 20]) {\n            cube([30, 15, 40], center=true);\n        }\n        \n        // Belly\n        color(kanga_beige) {\n            translate([0, 7.6, 20]) {\n                cube([28, 1, 38], center=true);\n            }\n        }\n    }\n}\n\n// Head\nmodule head() {\n    color(kanga_brown) {\n        // Main head\n        translate([0, 12, 55]) {\n            scale([1, 0.8, 1.2]) sphere(15);\n        }\n        \n        // Snout\n        translate([0, 22, 52]) {\n            scale([0.8, 1.2, 0.8]) sphere(8);\n        }\n        \n        // Ears\n        for(x = [-10, 10]) {\n            translate([x, 8, 68]) {\n                rotate([30 * (x > 0 ? 1 : -1), 0, 0]) {\n                    cylinder(h=12, r1=4, r2=2, center=true);\n                }\n            }\n        }\n        \n        // Horns\n        for(x = [-6, 6]) {\n            translate([x, 12, 70]) {\n                rotate([15 * (x > 0 ? -1 : 1), 0, 0]) {\n                    cylinder(h=8, r1=2, r2=0.5, center=true);\n                }\n            }\n        }\n    }\n}\n\n// Face details\nmodule face() {\n    // Eyes\n    color(kanga_dark) {\n        for(x = [-5, 5]) {\n            translate([x, 20, 60]) {\n                sphere(2);\n            }\n        }\n    }\n    \n    // Nose\n    color(kanga_dark) {\n        translate([0, 28, 52]) {\n            sphere(1.5);\n        }\n    }\n    \n    // Mouth\n    color(kanga_red) {\n        translate([0, 30, 50]) {\n            scale([1, 0.5, 0.2]) sphere(3);\n        }\n    }\n}\n\n// Arms\nmodule arms() {\n    for(side = [-1, 1]) {\n        // Upper arm\n        color(kanga_brown) {\n            translate([side * 18, 5, 35]) {\n                rotate([0, 0, side * 20]) {\n                    cylinder(h=15, r=4, center=true);\n                }\n            }\n        }\n        \n        // Lower arm\n        color(kanga_brown) {\n            translate([side * 25, 8, 25]) {\n                rotate([0, 0, side * 45]) {\n                    cylinder(h=12, r=3, center=true);\n                }\n            }\n        }\n        \n        // Hands\n        color(kanga_brown) {\n            translate([side * 30, 10, 20]) {\n                sphere(4);\n            }\n        }\n    }\n}\n\n// Legs\nmodule legs() {\n    for(side = [-1, 1]) {\n        // Thigh\n        color(kanga_brown) {\n            translate([side * 8, 0, 10]) {\n                cylinder(h=15, r=6, center=true);\n            }\n        }\n        \n        // Lower leg\n        color(kanga_brown) {\n            translate([side * 8, 0, 0]) {\n                cylinder(h=10, r=5, center=true);\n            }\n        }\n        \n        // Foot\n        color(kanga_brown) {\n            translate([side * 8, 5, -8]) {\n                scale([1.5, 2, 0.5]) sphere(5);\n            }\n        }\n    }\n}\n\n// Tail\nmodule tail() {\n    color(kanga_brown) {\n        // Base\n        translate([0, -12, 25]) {\n            cylinder(h=20, r1=5, r2=3, center=true);\n        }\n        \n        // Tip\n        translate([0, -20, 15]) {\n            sphere(4);\n        }\n    }\n}\n\n// Pouch\nmodule pouch() {\n    color(kanga_beige) {\n        // Main pouch\n        translate([0, 0, 25]) {\n            difference() {\n                scale([1.2, 1, 1]) sphere(12);\n                translate([0, 0, -6]) {\n                    cube([20, 20, 12], center=true);\n                }\n            }\n        }\n        \n        // Pouch opening\n        color(kanga_red) {\n            translate([0, -8, 25]) {\n                cylinder(h=1, r=8, center=true);\n            }\n        }\n    }\n}\n\n// Baby Kangaskhan\nmodule baby() {\n    color(kanga_brown) {\n        // Head\n        translate([0, -2, 30]) {\n            scale([0.5, 0.5, 0.5]) sphere(8);\n        }\n        \n        // Body\n        translate([0, -2, 25]) {\n            scale([0.4, 0.4, 0.6]) sphere(8);\n        }\n        \n        // Eyes\n        color(kanga_dark) {\n            for(x = [-1.5, 1.5]) {\n                translate([x * 0.5, -2, 33]) {\n                    sphere(0.5);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    face();\n    arms();\n    legs();\n    tail();\n    pouch();\n    baby();\n}",
    "renders": true
  },
  {
    "pokemon": "horsea",
    "openscad_code": "// Horsea Pokemon - Realistic Style (Medium Complexity)\n// 3D printable model with proper wall thickness and no overhangs\n\n// Colors for Horsea\nblue = [0.2, 0.4, 0.8];\nlight_blue = [0.4, 0.6, 0.9];\ndark_blue = [0.1, 0.2, 0.5];\nblack = [0.1, 0.1, 0.1];\nwhite = [0.9, 0.9, 0.9];\n\n// Parameters\nscale_factor = 1;\nbody_size = 25 * scale_factor;\nhead_size = 18 * scale_factor;\nsnout_length = 8 * scale_factor;\n\n// Main body\nmodule horsea_body() {\n    color(blue)\n    union() {\n        // Central body sphere\n        translate([0, 0, 0])\n        sphere(d=body_size, $fn=32);\n        \n        // Lower belly extension\n        translate([0, -body_size/2.5, -body_size/4])\n        scale([1.2, 1, 0.8])\n        sphere(d=body_size*0.9, $fn=32);\n    }\n}\n\n// Head with snout\nmodule horsea_head() {\n    color(blue)\n    union() {\n        // Main head sphere\n        translate([0, body_size/2, body_size/3])\n        sphere(d=head_size, $fn=32);\n        \n        // Snout extension\n        translate([0, body_size/2 + head_size/2, body_size/3])\n        scale([0.7, 1.5, 0.8])\n        sphere(d=snout_length, $fn=32);\n    }\n}\n\n// Snout tip\nmodule snout_tip() {\n    color(light_blue)\n    translate([0, body_size/2 + head_size/2 + snout_length/2, body_size/3])\n    sphere(d=snout_length*0.7, $fn=16);\n}\n\n// Eyes\nmodule eyes() {\n    color(black)\n    union() {\n        // Left eye\n        translate([-head_size/3, body_size/2 + head_size/3, body_size/3 + head_size/4])\n        sphere(d=3 * scale_factor, $fn=16);\n        \n        // Right eye\n        translate([head_size/3, body_size/2 + head_size/3, body_size/3 + head_size/4])\n        sphere(d=3 * scale_factor, $fn=16);\n    }\n    \n    // Eye highlights\n    color(white)\n    union() {\n        translate([-head_size/3 + 0.5, body_size/2 + head_size/3 + 0.5, body_size/3 + head_size/4 + 1])\n        sphere(d=1 * scale_factor, $fn=8);\n        \n        translate([head_size/3 + 0.5, body_size/2 + head_size/3 + 0.5, body_size/3 + head_size/4 + 1])\n        sphere(d=1 * scale_factor, $fn=8);\n    }\n}\n\n// Dorsal fin\nmodule dorsal_fin() {\n    color(blue)\n    for(i = [0:2]) {\n        translate([0, -body_size/3 + i*3, body_size/2 - i*2])\n        rotate([0, 0, 0])\n        scale([0.3, 1, 0.8])\n        cylinder(h=5, d1=8, d2=3, $fn=8);\n    }\n}\n\n// Tail\nmodule tail() {\n    color(blue)\n    union() {\n        // Tail base\n        translate([0, -body_size/2, 0])\n        rotate([45, 0, 0])\n        cylinder(h=body_size*1.2, d1=body_size/2, d2=body_size/4, $fn=16);\n        \n        // Tail spiral\n        color(light_blue)\n        for(i = [0:3]) {\n            rotate([0, 0, i*90])\n            translate([0, -body_size/2 - i*5, -i*3])\n            rotate([90 - i*15, 0, 0])\n            cylinder(h=8, d1=body_size/3 - i*2, d2=body_size/4 - i*2, $fn=16);\n        }\n    }\n}\n\n// Side fins\nmodule side_fins() {\n    color(blue)\n    union() {\n        // Left fin\n        translate([-body_size/2, 0, -body_size/4])\n        rotate([0, 0, -30])\n        scale([1, 0.3, 0.8])\n        cylinder(h=body_size/2.5, d1=body_size/3, d2=body_size/5, $fn=16);\n        \n        // Right fin\n        translate([body_size/2, 0, -body_size/4])\n        rotate([0, 0, 30])\n        scale([1, 0.3, 0.8])\n        cylinder(h=body_size/2.5, d1=body_size/3, d2=body_size/5, $fn=16);\n    }\n}\n\n// Circular markings on body\nmodule body_markings() {\n    color(dark_blue)\n    for(angle = [0:120:359]) {\n        rotate([0, 0, angle])\n        translate([body_size/2.5, 0, body_size/4])\n        cylinder(h=0.5, d=body_size/4, $fn=32);\n    }\n}\n\n// Assembly\nunion() {\n    horsea_body();\n    horsea_head();\n    snout_tip();\n    eyes();\n    dorsal_fin();\n    tail();\n    side_fins();\n    body_markings();\n}",
    "renders": true
  },
  {
    "pokemon": "seadra",
    "openscad_code": "// Seadra - realistic style, medium complexity\n// 3D printable Pokemon model using basic OpenSCAD primitives\n\n// Main body dimensions\nbody_length = 40;\nbody_height = 25;\nbody_width = 20;\n\n// Colors\nbody_color = \"#4682B4\";  // Steel blue\nbelly_color = \"#E0FFFF\";  // Light cyan\nfin_color = \"#191970\";    // Midnight blue\nspike_color = \"#B8860B\";  // Dark goldenrod\n\n// Main body module\nmodule seadra_body() {\n    color(body_color)\n    union() {\n        // Central body - elongated ellipsoid\n        scale([1.2, 0.8, 0.7])\n        sphere(body_length/2);\n        \n        // Belly - lighter underside\n        color(belly_color)\n        translate([0, 0, -body_height/2])\n        scale([1.1, 0.9, 0.3])\n        sphere(body_height/2);\n    }\n}\n\n// Head with snout\nmodule seadra_head() {\n    color(body_color)\n    union() {\n        // Main head sphere\n        translate([-body_length/2 - 8, 0, 0])\n        sphere(12);\n        \n        // Snout extension\n        translate([-body_length/2 - 20, 0, -2])\n        scale([2, 0.8, 0.8])\n        cylinder(h=15, r1=5, r2=2);\n        \n        // Nostril holes\n        color(\"black\")\n        for(i = [-1, 1]) {\n            translate([-body_length/2 - 18, i*2, 0])\n            sphere(1);\n        }\n    }\n}\n\n// Dorsal fin with spikes\nmodule dorsal_fin() {\n    color(fin_color)\n    union() {\n        // Main fin\n        translate([0, 0, body_height])\n        rotate([90, 0, 0])\n        cylinder(h=15, r1=8, r2=3);\n        \n        // Fin spikes\n        color(spike_color)\n        for(i = [-1:1]) {\n            translate([i*8, 0, body_height + 8])\n            rotate([0, i*15, 0])\n            cylinder(h=10, r1=2, r2=0.5);\n        }\n    }\n}\n\n// Pectoral fins\nmodule pectoral_fins() {\n    color(fin_color)\n    for(side = [-1, 1]) {\n        translate([-body_length/4, side*body_width/1.5, -5])\n        rotate([0, 0, side*30])\n        scale([1.5, 0.3, 1])\n        sphere(8);\n    }\n}\n\n// Tail with curled end\nmodule seadra_tail() {\n    color(body_color)\n    union() {\n        // Main tail segments\n        for(i = [0:3]) {\n            translate([body_length/2 + i*8, 0, 0])\n            scale([0.9 - i*0.15, 0.9 - i*0.15, 0.9 - i*0.15])\n            sphere(8);\n        }\n        \n        // Tail fin\n        color(fin_color)\n        translate([body_length/2 + 30, 0, 0])\n        rotate([0, 0, -90])\n        scale([2, 1, 0.2])\n        sphere(10);\n    }\n}\n\n// Eyes\nmodule eyes() {\n    // White sclera\n    color(\"white\")\n    for(side = [-1, 1]) {\n        translate([-body_length/2 - 8, side*8, 5])\n        sphere(4);\n    }\n    \n    // Black pupils\n    color(\"black\")\n    for(side = [-1, 1]) {\n        translate([-body_length/2 - 9, side*8.5, 6])\n        sphere(2);\n    }\n}\n\n// Belly ridges\nmodule belly_ridges() {\n    color(spike_color)\n    for(i = [-2:2]) {\n        translate([i*6, 0, -body_height/2 - 1])\n        scale([3, 0.5, 1])\n        sphere(2);\n    }\n}\n\n// Back spikes\nmodule back_spikes() {\n    color(spike_color)\n    for(i = [-1:1]) {\n        translate([i*10, 0, body_height/2 + 3])\n        rotate([0, 0, 0])\n        cylinder(h=8, r1=3, r2=1);\n    }\n}\n\n// Main assembly\nunion() {\n    // Base orientation for printing\n    rotate([0, 0, 0])\n    \n    // Assemble all parts\n    seadra_body();\n    seadra_head();\n    dorsal_fin();\n    pectoral_fins();\n    seadra_tail();\n    eyes();\n    belly_ridges();\n    back_spikes();\n}",
    "renders": true
  },
  {
    "pokemon": "goldeen",
    "openscad_code": "// Goldeen Pokemon - Realistic Style, Medium Complexity\n// Basic 3D printable model with characteristic features\n\n// Color definitions\ngold = [0.9, 0.7, 0.2];\norange = [0.9, 0.4, 0.1];\nwhite = [0.95, 0.95, 0.9];\nblack = [0.1, 0.1, 0.1];\npink = [0.9, 0.5, 0.6];\n\n// Main body module\nmodule goldeen_body() {\n    color(gold)\n    union() {\n        // Main fish body\n        scale([1, 0.7, 0.5])\n        sphere(15);\n        \n        // Extended tail section\n        translate([0, -20, 0])\n        scale([0.8, 2, 0.3])\n        sphere(8);\n    }\n}\n\n// Dorsal fin\nmodule dorsal_fin() {\n    color(orange)\n    translate([0, 5, 7])\n    rotate([90, 0, 0])\n    linear_extrude(height = 0.5)\n    polygon(points=[[-5,0], [0,10], [5,0], [0,2]]);\n}\n\n// Pectoral fins (side fins)\nmodule pectoral_fin(side) {\n    color(orange)\n    translate([side * 12, 0, -2])\n    rotate([0, 0, side * 30])\n    scale([side * 1, 1, 0.3])\n    cylinder(h = 8, r1 = 3, r2 = 1);\n}\n\n// Tail fin\nmodule tail_fin() {\n    color(orange)\n    union() {\n        // Left side\n        translate([-8, -25, 0])\n        rotate([0, 0, -30])\n        scale([1, 1.5, 0.3])\n        cylinder(h = 12, r1 = 5, r2 = 1);\n        \n        // Right side\n        translate([8, -25, 0])\n        rotate([0, 0, 30])\n        scale([-1, 1.5, 0.3])\n        cylinder(h = 12, r1 = 5, r2 = 1);\n    }\n}\n\n// Head features\nmodule head_features() {\n    union() {\n        // Horn\n        color(white)\n        translate([0, 15, 5])\n        rotate([0, 0, 0])\n        cylinder(h = 10, r1 = 2, r2 = 0.5);\n        \n        // Eyes\n        color(white)\n        translate([-5, 10, 3])\n        sphere(2);\n        translate([5, 10, 3])\n        sphere(2);\n        \n        // Pupils\n        color(black)\n        translate([-5, 11, 3.5])\n        sphere(1);\n        translate([5, 11, 3.5])\n        sphere(1);\n        \n        // Mouth\n        color(pink)\n        translate([0, 12, -2])\n        scale([4, 1, 0.5])\n        sphere(1);\n    }\n}\n\n// Scales pattern\nmodule scales() {\n    color(gold)\n    for(i = [0:5]) {\n        for(j = [0:3]) {\n            translate([0, -15 + i*5, 5 - j*2])\n            scale([0.5, 0.5, 0.1])\n            sphere(2);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Base body\n    goldeen_body();\n    \n    // Fins\n    dorsal_fin();\n    pectoral_fin(1);\n    pectoral_fin(-1);\n    tail_fin();\n    \n    // Head features\n    head_features();\n    \n    // Scales detail\n    scales();\n}\n\n// Position for printing\ntranslate([0, 0, 0])\nrotate([0, 0, 0])",
    "renders": true
  },
  {
    "pokemon": "seaking",
    "openscad_code": "// Seaking Pokemon - Realistic Style\n// Medium complexity 3D printable model\n\n// Global parameters\nscale_factor = 0.4;\nbody_length = 50 * scale_factor;\nbody_height = 30 * scale_factor;\nbody_width = 25 * scale_factor;\n\nmodule seaking_body() {\n    color([0.9, 0.2, 0.1]) {\n        // Main body - oval shape\n        translate([0, 0, body_height/2])\n            scale([1.2, 0.8, 1])\n            sphere(d=body_width);\n        \n        // Extended tail section\n        translate([-body_length/2, 0, body_height/2 - 5])\n            scale([2, 0.6, 0.4])\n            sphere(d=body_width);\n    }\n}\n\nmodule seaking_head() {\n    color([0.9, 0.2, 0.1]) {\n        // Head sphere\n        translate([body_length/2 + 5, 0, body_height/2 + 5])\n            sphere(d=body_width * 0.8);\n        \n        // Snout extension\n        translate([body_length/2 + 15, 0, body_height/2 + 5])\n            scale([1.5, 0.6, 0.6])\n            sphere(d=body_width * 0.5);\n    }\n    \n    color([1, 0.9, 0.2]) {\n        // Beak\n        translate([body_length/2 + 20, 0, body_height/2 + 5])\n            rotate([0, -20, 0])\n            cylinder(h=8, d1=8, d2=5);\n    }\n}\n\nmodule horn() {\n    color([1, 0.9, 0.2]) {\n        // Main horn\n        translate([body_length/2 + 10, 0, body_height/2 + 15])\n            rotate([0, 90, 0])\n            cylinder(h=20, d1=3, d2=8);\n        \n        // Horn details\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90])\n            translate([body_length/2 + 10, 0, body_height/2 + 15])\n                rotate([0, 90, 0])\n                translate([5, 0, 0])\n                cylinder(h=8, d1=1, d2=3);\n        }\n    }\n}\n\nmodule tail_fin() {\n    color([1, 0.9, 0.2]) {\n        // Main tail fin\n        translate([-body_length/2 - 10, 0, body_height/2 - 5])\n            rotate([0, 0, 90])\n            linear_extrude(height=2)\n            polygon(points=[[0,0], [-15,8], [-25,0], [-15,-8]]);\n        \n        // Lower tail fin\n        translate([-body_length/2 - 5, 0, body_height/2 - 15])\n            rotate([0, 0, -30])\n            scale([0.8, 0.6, 1])\n            linear_extrude(height=2)\n            polygon(points=[[0,0], [-10,5], [-15,0], [-10,-5]]);\n    }\n}\n\nmodule dorsal_fin() {\n    color([1, 0.9, 0.2]) {\n        // Main dorsal fin\n        translate([0, 0, body_height/2 + 15])\n            rotate([0, 0, 0])\n            linear_extrude(height=3)\n            polygon(points=[[0,0], [-8,15], [0,12], [8,15]]);\n        \n        // Secondary dorsal fins\n        for(i = [-1, 1]) {\n            translate([i * 10, 0, body_height/2 + 10])\n                rotate([0, 0, i * 30])\n                scale([0.6, 0.6, 1])\n                linear_extrude(height=2)\n                polygon(points=[[0,0], [-5,8], [0,6], [5,8]]);\n        }\n    }\n}\n\nmodule side_fins() {\n    color([1, 0.9, 0.2]) {\n        // Left fin\n        translate([body_length/4, body_width/2 + 5, body_height/2 - 5])\n            rotate([0, 90, 0])\n            scale([1, 1.5, 1])\n            cylinder(h=12, d1=3, d2=8);\n        \n        // Right fin\n        translate([body_length/4, -body_width/2 - 5, body_height/2 - 5])\n            rotate([0, -90, 0])\n            scale([1, 1.5, 1])\n            cylinder(h=12, d1=3, d2=8);\n    }\n}\n\nmodule eyes() {\n    color([0, 0, 0]) {\n        // Left eye\n        translate([body_length/2 + 10, body_width/4, body_height/2 + 8])\n            sphere(d=3);\n        \n        // Right eye\n        translate([body_length/2 + 10, -body_width/4, body_height/2 + 8])\n            sphere(d=3);\n    }\n    \n    color([1, 1, 1]) {\n        // Eye highlights\n        translate([body_length/2 + 11, body_width/4 + 1, body_height/2 + 9])\n            sphere(d=1);\n        \n        translate([body_length/2 + 11, -body_width/4 + 1, body_height/2 + 9])\n            sphere(d=1);\n    }\n}\n\nmodule belly_pattern() {\n    color([1, 1, 0.8]) {\n        // Belly oval\n        difference() {\n            translate([0, 0, body_height/2 - 8])\n                scale([1.3, 0.7, 0.3])\n                sphere(d=body_width * 0.9);\n            \n            // Remove back half\n            translate([0, 0, body_height/2 - 15])\n                cube([body_length * 2, body_width * 2, body_height], center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    seaking_body();\n    seaking_head();\n    horn();\n    tail_fin();\n    dorsal_fin();\n    side_fins();\n    eyes();\n    belly_pattern();\n}",
    "renders": true
  },
  {
    "pokemon": "staryu",
    "openscad_code": "// Realistic Staryu - Medium Complexity OpenSCAD Model\n// Size: ~80mm diameter\n\n// Colors\nstaryu_orange = [1, 0.5, 0.2];\nstaryu_red = [0.8, 0.2, 0.1];\ngold = [1, 0.8, 0];\n\n// Main parameters\ncenter_size = 20;\narm_length = 35;\narm_width = 12;\narm_thickness = 6;\njoint_radius = 8;\n\n// Central body\nmodule central_body() {\n    color(staryu_orange) {\n        difference() {\n            sphere(d = center_size, $fn = 32);\n            \n            // Carve out the center gem area\n            translate([0, 0, center_size/2 - 2]) {\n                cylinder(h = 5, d1 = 12, d2 = 10, $fn = 16);\n            }\n        }\n        \n        // Central gem\n        color(gold) {\n            translate([0, 0, center_size/2 - 1]) {\n                cylinder(h = 3, d = 10, $fn = 16);\n            }\n        }\n    }\n}\n\n// Single arm module\nmodule arm() {\n    color(staryu_orange) {\n        // Main arm body\n        rotate([0, 90, 0]) {\n            cylinder(h = arm_length, d = arm_width, $fn = 16);\n        }\n        \n        // Arm joint\n        sphere(d = joint_radius, $fn = 16);\n        \n        // Arm tip - realistic claw\n        translate([0, arm_length, 0]) {\n            // Main claw\n            rotate([0, 90, 0]) {\n                cylinder(h = 8, d1 = arm_width, d2 = 8, $fn = 16);\n            }\n            \n            // Claw tips\n            for (a = [0, 120, 240]) {\n                rotate([a, 0, 0]) {\n                    translate([0, arm_length + 4, 0]) {\n                        rotate([0, 90, 0]) {\n                            cylinder(h = 6, d1 = 3, d2 = 1, $fn = 8);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Arm segments\n        for (i = [1:3]) {\n            translate([0, i * arm_length/4, 0]) {\n                rotate([90, 0, 0]) {\n                    difference() {\n                        cylinder(h = 1, d = arm_width + 2, $fn = 16);\n                        cylinder(h = 1.2, d = arm_width, $fn = 16);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Eye module\nmodule eye() {\n    color(st0, 0, 0) {\n        // Main eye\n        translate([0, 0, 0]) {\n            sphere(d = 3, $fn = 16);\n        }\n        \n        // Eye highlight\n        color([1, 1, 1]) {\n            translate([0.5, 0.5, 1.2]) {\n                sphere(d = 1, $fn = 8);\n            }\n        }\n    }\n}\n\n// Complete staryu\nunion() {\n    // Central body\n    central_body();\n    \n    // Five arms\n    for (i = [0:4]) {\n        rotate([0, 0, i * 72]) {\n            translate([0, center_size/2, 0]) {\n                arm();\n            }\n        }\n    }\n    \n    // Eyes (5 eyes between arms)\n    for (i = [0:4]) {\n        rotate([0, 0, i * 72 + 36]) {\n            translate([center_size/2 * 0.7, 0, center_size/2 * 0.7]) {\n                eye();\n            }\n        }\n    }\n    \n    // Back details\n    color(staryu_red) {\n        // Circular pattern on back\n        translate([0, 0, -center_size/2 + 1]) {\n            difference() {\n                cylinder(h = 2, d = center_size - 4, $fn = 32);\n                cylinder(h = 2.2, d = center_size - 8, $fn = 32);\n            }\n        }\n        \n        // Radial lines\n        for (i = [0:4]) {\n            rotate([0, 0, i * 72]) {\n                translate([0, 0, -center_size/2 + 2]) {\n                    cube([2, center_size/2 - 4, 2], center = true);\n                }\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "pokemon": "starmie",
    "openscad_code": "// Starmie - Realistic Style (Medium Complexity)\n// Overall dimensions: ~80mm diameter, ~25mm thick\n\n// Set colors\n$fn = 64; // Smooth curves for realism\n\n// Main body - purple gem\nmodule main_body() {\n    color([0.5, 0.2, 0.8]) \n    union() {\n        // Central gem sphere\n        sphere(d=30);\n        \n        // Gem facets\n        for(i=[0:30:330]) {\n            rotate([0, 0, i]) \n            translate([0, 12, 0])\n            rotate([0, 30, 0])\n            scale([1, 0.7, 0.3])\n            sphere(d=8);\n        }\n    }\n}\n\n// Eye module for star points\nmodule eye() {\n    union() {\n        // White sclera\n        color([1, 1, 1])\n        cylinder(h=3, d1=8, d2=8);\n        \n        // Red iris\n        color([0.8, 0.2, 0.2])\n        translate([0, 0, 1])\n        cylinder(h=2, d1=6, d2=6);\n        \n        // Black pupil\n        color([0, 0, 0])\n        translate([0, 0, 2.5])\n        cylinder(h=1, d1=3, d2=3);\n    }\n}\n\n// Star point arm\nmodule star_arm(length, offset_angle) {\n    color([0.5, 0.2, 0.8])\n    rotate([0, 0, offset_angle])\n    union() {\n        // Main arm\n        translate([0, 0, -5])\n        cylinder(h=length, d1=12, d2=8);\n        \n        // Eye at tip\n        translate([0, 0, length-2])\n        eye();\n        \n        // Ridges along arm\n        for(i=[1:3:round(length/2)]) {\n            translate([0, 0, i*2])\n            cylinder(h=1, d1=14, d2=12);\n        }\n    }\n}\n\n// Center gem detail\nmodule center_gem() {\n    color([0.3, 0.1, 0.7])\n    difference() {\n        sphere(d=15);\n        // Cut facets\n        for(i=[0:45:315]) {\n            rotate([0, 0, i])\n            translate([7, 0, 0])\n            cube([20, 0.5, 20], center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main body\n    main_body();\n    \n    // Center gem detail\n    translate([0, 0, 15])\n    center_gem();\n    \n    // Five star points (Starmie has 5 arms)\n    for(i=[0:72:360]) {\n        translate([0, 0, -5])\n        star_arm(25, i);\n    }\n}\n\n// Add subtle base for stability\ncolor([0.4, 0.15, 0.7])\ntranslate([0, 0, -7])\ncylinder(h=2, d=40);",
    "renders": true
  },
  {
    "pokemon": "mr_mime",
    "openscad_code": "// Mr. Mime - Realistic Style Pokemon Model\n// 3D printable figure with medium complexity\n\n$fn = 32;\n\n// Colors\npink = [1, 0.7, 0.8];\nblue = [0, 0.6, 1];\nred = [1, 0, 0];\nblack = [0, 0, 0];\nwhite = [1, 1, 1];\n\n// Overall scale\nscale_factor = 0.4;\n\nmodule mr_mime() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        // Base body\n        color(pink)\n        union() {\n            // Main body (torso)\n            translate([0, 0, 20])\n            scale([1.2, 0.8, 1.5])\n            sphere(20);\n            \n            // Lower body\n            translate([0, 0, 0])\n            scale([1, 0.9, 0.8])\n            cylinder(h=25, r1=20, r2=15);\n            \n            // Head\n            translate([0, -5, 60])\n            scale([1.1, 1, 1.2])\n            sphere(15);\n        }\n        \n        // Arms\n        color(pink)\n        union() {\n            // Left arm\n            translate([-25, 0, 40])\n            rotate([0, 0, 20])\n            scale([0.3, 0.3, 1])\n            cylinder(h=30, r=8);\n            \n            // Right arm\n            translate([25, 0, 40])\n            rotate([0, 0, -20])\n            scale([0.3, 0.3, 1])\n            cylinder(h=30, r=8);\n            \n            // Left hand\n            translate([-30, 0, 30])\n            scale([1.2, 0.8, 0.5])\n            sphere(8);\n            \n            // Right hand\n            translate([30, 0, 30])\n            scale([1.2, 0.8, 0.5])\n            sphere(8);\n        }\n        \n        // Legs\n        color(pink)\n        union() {\n            // Left leg\n            translate([-8, 0, 0])\n            scale([0.5, 0.5, 1])\n            cylinder(h=25, r=8);\n            \n            // Right leg\n            translate([8, 0, 0])\n            scale([0.5, 0.5, 1])\n            cylinder(h=25, r=8);\n            \n            // Left shoe\n            translate([-8, 0, -5])\n            scale([1.2, 1, 0.6])\n            sphere(10);\n            \n            // Right shoe\n            translate([8, 0, -5])\n            scale([1.2, 1, 0.6])\n            sphere(10);\n        }\n        \n        // Ears\n        color(pink)\n        union() {\n            // Left ear\n            translate([-12, -5, 72])\n            rotate([0, 20, 0])\n            scale([0.4, 0.2, 1.5])\n            cylinder(h=20, r=5);\n            \n            // Right ear\n            translate([12, -5, 72])\n            rotate([0, -20, 0])\n            scale([0.4, 0.2, 1.5])\n            cylinder(h=20, r=5);\n        }\n        \n        // Hair tufts\n        color(red)\n        union() {\n            for(i = [-1, 1]) {\n                translate([i * 8, -8, 78])\n                rotate([0, i * 15, 0])\n                scale([0.5, 0.3, 1])\n                cylinder(h=12, r=3);\n            }\n        }\n        \n        // Face features\n        color(black)\n        union() {\n            // Eyes\n            translate([-5, 2, 65])\n            scale([1, 1.2, 0.5])\n            sphere(3);\n            \n            translate([5, 2, 65])\n            scale([1, 1.2, 0.5])\n            sphere(3);\n            \n            // Mouth\n            translate([0, 5, 60])\n            scale([1, 0.5, 0.3])\n            sphere(2);\n        }\n        \n        // Cheek circles\n        color(red)\n        union() {\n            translate([-8, 0, 60])\n            scale([1, 1, 0.3])\n            sphere(3);\n            \n            translate([8, 0, 60])\n            scale([1, 1, 0.3])\n            sphere(3);\n        }\n        \n        // Blue markings on shoulders\n        color(blue)\n        union() {\n            translate([-20, 0, 50])\n            scale([1, 0.5, 0.3])\n            sphere(5);\n            \n            translate([20, 0, 50])\n            scale([1, 0.5, 0.3])\n            sphere(5);\n        }\n        \n        // Gloves (white circles on hands)\n        color(white)\n        union() {\n            translate([-30, 0, 30])\n            scale([0.8, 0.6, 0.2])\n            sphere(8);\n            \n            translate([30, 0, 30])\n            scale([0.8, 0.6, 0.2])\n            sphere(8);\n        }\n        \n        // Decorative buttons on chest\n        color(red)\n        union() {\n            for(i = [0:2]) {\n                translate([0, -i * 5, 45 - i * 8])\n                scale([0.8, 0.8, 0.3])\n                sphere(2);\n            }\n        }\n    }\n}\n\n// Generate the model\nmr_mime();",
    "renders": true
  },
  {
    "pokemon": "scyther",
    "openscad_code": "// Scyther OpenSCAD model - Realistic style, medium complexity\n// Dimensions: ~70mm tall, 3D printable\n\n// Global parameters\nscyther_height = 70;\nwall_thickness = 1.2;\n\n// Colors\ncolor_body = \"#4CAF50\";\ncolor_blades = \"#8BC34A\";\ncolor_eyes = \"#FF5722\";\ncolor_accents = \"#2E7D32\";\n\n// Main body module\nmodule scyther_body() {\n    color(color_body)\n    union() {\n        // Torso - tapered cylinder\n        translate([0, 0, 20])\n            scale([1, 0.7, 1])\n            cylinder(h=25, r1=12, r2=8, $fn=32);\n        \n        // Abdomen\n        translate([0, 0, 10])\n            sphere(r=10);\n        \n        // Chest plate\n        translate([0, -8, 25])\n            rotate([90, 0, 0])\n            cylinder(h=15, r1=8, r2=5, $fn=4);\n    }\n}\n\n// Head module\nmodule scyther_head() {\n    color(color_body)\n    union() {\n        // Main head shape\n        translate([0, 0, 45])\n            scale([1.2, 0.8, 1.5])\n            sphere(r=10);\n        \n        // Snout\n        translate([0, -12, 45])\n            rotate([30, 0, 0])\n            scale([0.6, 0.4, 1.2])\n            cylinder(h=8, r1=6, r2=4, $fn=16);\n        \n        // Eyes (faceted)\n        translate([-5, -12, 48])\n            color(color_eyes)\n            rotate([0, 0, 45])\n            cube([3, 1, 4], center=true);\n        \n        translate([5, -12, 48])\n            color(color_eyes)\n            rotate([0, 0, -45])\n            cube([3, 1, 4], center=true);\n        \n        // Mandibles\n        translate([-4, -18, 42])\n            rotate([0, 0, 20])\n            cube([2, 6, 2]);\n        \n        translate([4, -18, 42])\n            rotate([0, 0, -20])\n            cube([2, 6, 2]);\n    }\n}\n\n// Blade module\nmodule scythe_blade(side) {\n    color(color_blades)\n    translate([side * 15, 0, 35])\n        rotate([0, 0, side * 15])\n        union() {\n            // Upper arm\n            translate([0, 0, 0])\n                rotate([0, 0, -90])\n                scale([0.8, 0.8, 1])\n                cylinder(h=15, r=3, $fn=8);\n            \n            // Blade base\n            translate([0, -15, 0])\n                rotate([90, 0, 0])\n                scale([1, 0.3, 1])\n                cylinder(h=8, r=5, $fn=6);\n            \n            // Curved blade\n            translate([0, -23, 0])\n                rotate([90, 0, 0])\n                scale([0.5, 1, 0.1])\n                cylinder(h=25, r=15, $fn=64);\n            \n            // Blade edge\n            translate([0, -23, -1])\n                rotate([90, 0, 0])\n                scale([0.4, 1, 0.05])\n                cylinder(h=25, r=15, $fn=64);\n        }\n}\n\n// Wing module\nmodule scyther_wing(side) {\n    color(color_accents)\n    translate([side * 18, 0, 32])\n        rotate([0, 0, side * -30])\n        union() {\n            // Wing base\n            translate([0, 0, 0])\n                rotate([0, 0, 90])\n                scale([0.5, 1, 0.1])\n                cylinder(h=12, r=8, $fn=16);\n            \n            // Wing membrane (simplified)\n            for(i = [0:2]) {\n                translate([i * 3 - 3, 5 + i * 2, 0])\n                    rotate([0, 0, side * (i * 10)])\n                    cube([2, 6 - i * 1.5, 0.5]);\n            }\n        }\n}\n\n// Leg module\nmodule scyther_leg(side, position) {\n    color(color_body)\n    translate([side * 10, 0, position])\n        union() {\n            // Upper leg\n            rotate([0, side * 15, 0])\n                cylinder(h=12, r=2.5, $fn=8);\n            \n            // Lower leg\n            translate([0, 0, -12])\n                rotate([0, side * -30, 0])\n                cylinder(h=10, r=2, $fn=8);\n            \n            // Foot\n            translate([0, 0, -22])\n                rotate([0, side * 15, 0])\n                scale([1.5, 0.8, 0.5])\n                sphere(r=3);\n        }\n}\n\n// Tail module\nmodule scyther_tail() {\n    color(color_body)\n    translate([0, 10, 10])\n        rotate([45, 0, 0])\n        union() {\n            // Tail segments\n            for(i = [0:3]) {\n                translate([0, 0, -i * 5])\n                    scale([1 - i * 0.15, 0.8 - i * 0.1, 1])\n                    cylinder(h=5, r=4 - i, $fn=8);\n            }\n        }\n}\n\n// Assembly\nunion() {\n    scyther_body();\n    scyther_head();\n    \n    // Blades\n    scythe_blade(1);\n    scythe_blade(-1);\n    \n    // Wings\n    scyther_wing(1);\n    scyther_wing(-1);\n    \n    // Legs\n    scyther_leg(1, 15);  // Front right\n    scyther_leg(-1, 15); // Front left\n    scyther_leg(1, 5);   // Back right\n    scyther_leg(-1, 5);  // Back left\n    \n    // Tail\n    scyther_tail();\n}",
    "renders": true
  },
  {
    "pokemon": "jynx",
    "openscad_code": "// Jynx Pokemon - Realistic Style - Medium Complexity\n// OpenSCAD 3D printable model\n\n// Color definitions\ncolor_skin = [0.85, 0.75, 0.95];      // Purple skin\ncolor_hair = [0.9, 0.4, 0.6];         // Pink hair\ncolor_dress = [0.9, 0.9, 0.9];        // Red dress\ncolor_lips = [0.6, 0.2, 0.4];         // Dark pink lips\ncolor_eyes = [0, 0, 0];              // Black eyes\n\n// Main body\nmodule jynx_body() {\n    color(color_skin)\n    union() {\n        // Torso\n        translate([0, 0, 15])\n            scale([1.2, 0.8, 2])\n            sphere(d=20);\n        \n        // Lower body/dress\n        color(color_dress)\n        translate([0, 0, 5])\n            cylinder(h=25, d1=25, d2=20, $fn=32);\n        \n        // Arms\n        color(color_skin)\n        translate([12, 0, 25])\n            rotate([0, -30, 0])\n            cylinder(h=15, d=5, $fn=16);\n        \n        translate([-12, 0, 25])\n            rotate([0, 30, 0])\n            cylinder(h=15, d=5, $fn=16);\n        \n        // Hands\n        translate([18, 0, 15])\n            sphere(d=6);\n        translate([-18, 0, 15])\n            sphere(d=6);\n    }\n}\n\n// Head with characteristic hair\nmodule jynx_head() {\n    color(color_skin)\n    translate([0, 0, 35])\n    union() {\n        // Head sphere\n        sphere(d=22);\n        \n        // Face detail - longer snout\n        translate([0, 5, -2])\n            scale([0.8, 0.6, 0.8])\n            sphere(d=15);\n        \n        // Eyes\n        color(color_eyes)\n        translate([4, 5, 2])\n            scale([1, 1.5, 0.5])\n            sphere(d=3);\n        translate([-4, 5, 2])\n            scale([1, 1.5, 0.5])\n            sphere(d=3);\n        \n        // Eyes white highlights\n        color([1, 1, 1])\n        translate([4.5, 5.5, 3])\n            sphere(d=1);\n        translate([-3.5, 5.5, 3])\n            sphere(d=1);\n        \n        // Lips\n        color(color_lips)\n        translate([0, 8, -3])\n            scale([1.5, 0.8, 0.8])\n            sphere(d=8);\n        \n        // Hair - flowing locks\n        color(color_hair)\n        union() {\n            // Main hair mass\n            translate([0, -8, 5])\n                scale([1.5, 2, 1.2])\n                sphere(d=25);\n            \n            // Left bang\n            translate([8, 2, 8])\n                rotate([0, -20, 30])\n                scale([0.5, 2, 0.3])\n                cylinder(h=15, d=8, $fn=8);\n            \n            // Right bang\n            translate([-8, 2, 8])\n                rotate([0, 20, -30])\n                scale([0.5, 2, 0.3])\n                cylinder(h=15, d=8, $fn=8);\n            \n            // Center bang\n            translate([0, 5, 9])\n                rotate([0, 0, 0])\n                scale([0.6, 1.5, 0.3])\n                cylinder(h=12, d=6, $fn=8);\n        }\n    }\n}\n\n// Legs\nmodule jynx_legs() {\n    color(color_skin)\n    union() {\n        // Left leg\n        translate([6, 0, 5])\n            cylinder(h=20, d=8, $fn=16);\n        \n        // Right leg\n        translate([-6, 0, 5])\n            cylinder(h=20, d=8, $fn=16);\n        \n        // Feet\n        translate([6, 0, -5])\n            scale([1.2, 2, 0.8])\n            sphere(d=10);\n        \n        translate([-6, 0, -5])\n            scale([1.2, 2, 0.8])\n            sphere(d=10);\n    }\n}\n\n// Assembly\njynx_body();\njynx_head();\njynx_legs();",
    "renders": true
  },
  {
    "pokemon": "electabuzz",
    "openscad_code": "// Electabuzz - Realistic Style, Medium Complexity\n// 3D printable model with no overhangs\n\n// Color definitions\ncolor_yellow = [1, 0.8, 0];\ncolor_black = [0.1, 0.1, 0.1];\ncolor_red = [0.8, 0.1, 0.1];\ncolor_white = [0.9, 0.9, 0.9];\n\n// Main module\nmodule electabuzz() {\n    // Body\n    color(color_yellow) {\n        // Torso\n        translate([0, 0, 25]) {\n            scale([1, 0.8, 1.2]) sphere(d=40);\n        }\n        \n        // Chest pattern\n        color(color_black) {\n            translate([0, -15, 25]) {\n                scale([0.4, 0.1, 0.8]) sphere(d=40);\n            }\n        }\n    }\n    \n    // Head\n    color(color_yellow) {\n        translate([0, 0, 55]) {\n            scale([1.2, 1, 1.1]) sphere(d=35);\n        }\n        \n        // Snout\n        translate([0, 20, 50]) {\n            scale([0.8, 0.6, 0.5]) sphere(d=20);\n        }\n    }\n    \n    // Horns\n    color(color_yellow) {\n        // Left horn\n        translate([-15, 0, 70]) {\n            rotate([0, -20, 45]) cylinder(h=15, d1=8, d2=3);\n        }\n        \n        // Right horn\n        translate([15, 0, 70]) {\n            rotate([0, 20, -45]) cylinder(h=15, d1=8, d2=3);\n        }\n    }\n    \n    // Ears\n    color(color_yellow) {\n        // Left ear\n        translate([-20, 0, 65]) {\n            rotate([0, 0, -30]) scale([0.5, 1, 2]) sphere(d=15);\n        }\n        \n        // Right ear\n        translate([20, 0, 65]) {\n            rotate([0, 0, 30]) scale([0.5, 1, 2]) sphere(d=15);\n        }\n    }\n    \n    // Eyes\n    color(color_white) {\n        translate([-8, 15, 55]) sphere(d=6);\n        translate([8, 15, 55]) sphere(d=6);\n    }\n    \n    color(color_black) {\n        translate([-8, 17, 57]) sphere(d=3);\n        translate([8, 17, 57]) sphere(d=3);\n    }\n    \n    // Mouth\n    color(color_black) {\n        translate([0, 25, 50]) scale([0.8, 0.2, 0.3]) cube([10, 5, 3]);\n    }\n    \n    // Arms\n    color(color_yellow) {\n        // Left arm\n        translate([-25, 0, 35]) {\n            rotate([0, 0, 20]) cylinder(h=30, d1=12, d2=10);\n            translate([0, 0, 30]) rotate([0, 0, -20]) cylinder(h=25, d1=10, d2=8);\n        }\n        \n        // Right arm\n        translate([25, 0, 35]) {\n            rotate([0, 0, -20]) cylinder(h=30, d1=12, d2=10);\n            translate([0, 0, 30]) rotate([0, 0, 20]) cylinder(h=25, d1=10, d2=8);\n        }\n    }\n    \n    // Hands\n    color(color_yellow) {\n        // Left hand\n        translate([-45, -5, 30]) {\n            sphere(d=12);\n            // Fingers\n            for(i = [-30, -10, 10, 30]) {\n                rotate([0, 0, i]) translate([0, 6, 0]) cylinder(h=8, d1=3, d2=2);\n            }\n        }\n        \n        // Right hand\n        translate([45, -5, 30]) {\n            sphere(d=12);\n            // Fingers\n            for(i = [-30, -10, 10, 30]) {\n                rotate([0, 0, i]) translate([0, 6, 0]) cylinder(h=8, d1=3, d2=2);\n            }\n        }\n    }\n    \n    // Legs\n    color(color_yellow) {\n        // Left leg\n        translate([-10, 0, 10]) cylinder(h=20, d1=15, d2=12);\n        translate([-10, 0, 0]) sphere(d=12);\n        \n        // Right leg\n        translate([10, 0, 10]) cylinder(h=20, d1=15, d2=12);\n        translate([10, 0, 0]) sphere(d=12);\n    }\n    \n    // Feet\n    color(color_yellow) {\n        // Left foot\n        translate([-10, 5, -8]) scale([1.2, 1.8, 0.8]) sphere(d=15);\n        \n        // Right foot\n        translate([10, 5, -8]) scale([1.2, 1.8, 0.8]) sphere(d=15);\n    }\n    \n    // Tail\n    color(color_yellow) {\n        translate([0, -30, 20]) {\n            rotate([30, 0, 0]) cylinder(h=35, d1=15, d2=8);\n            translate([0, 0, 35]) sphere(d=12);\n        }\n    }\n    \n    // Stripes\n    color(color_black) {\n        // Body stripes\n        translate([0, 0, 30]) scale([1.1, 1.1, 0.1]) sphere(d=45);\n        translate([0, 0, 15]) scale([1.1, 1.1, 0.1]) sphere(d=45);\n        \n        // Arm stripes\n        translate([-30, 0, 45]) rotate([0, 0, 20]) cylinder(h=1, d=14);\n        translate([30, 0, 45]) rotate([0, 0, -20]) cylinder(h=1, d=14);\n        \n        // Leg stripes\n        translate([-10, 0, 5]) cylinder(h=1, d=16);\n        translate([10, 0, 5]) cylinder(h=1, d=16);\n    }\n    \n    // Plug-like hands pattern\n    color(color_red) {\n        // Left hand pattern\n        translate([-45, -5, 30]) {\n            rotate([0, 90, 0]) cylinder(h=8, d=8);\n            difference() {\n                sphere(d=12);\n                translate([0, 0, -6]) cylinder(h=12, d=6);\n            }\n        }\n        \n        // Right hand pattern\n        translate([45, -5, 30]) {\n            rotate([0, 90, 0]) cylinder(h=8, d=8);\n            difference() {\n                sphere(d=12);\n                translate([0, 0, -6]) cylinder(h=12, d=6);\n            }\n        }\n    }\n}\n\n// Generate the model\nelectabuzz();",
    "renders": true
  },
  {
    "pokemon": "magmar",
    "openscad_code": "// Magmar OpenSCAD Model - Medium Complexity\n// Realistic style, 3D printable\n\n// Color definitions\ncolor_body = [0.8, 0.3, 0.1];       // Red-orange\ncolor_yellow = [0.9, 0.7, 0.1];     // Yellow accents\ncolor_black = [0.1, 0.1, 0.1];      // Black stripes\ncolor_beige = [0.9, 0.8, 0.6];      // Beige belly\n\n// Main body\nmodule body() {\n    color(color_body)\n    union() {\n        // Torso\n        translate([0, 0, 10])\n        scale([1.2, 0.8, 1.5])\n        sphere(15);\n        \n        // Belly\n        color(color_beige)\n        translate([0, -7, 5])\n        scale([0.8, 0.3, 1.2])\n        sphere(12);\n    }\n}\n\n// Head with beak\nmodule head() {\n    color(color_body)\n    union() {\n        // Main head sphere\n        translate([0, 0, 35])\n        scale([0.9, 1.1, 1.1])\n        sphere(12);\n        \n        // Beak\n        color(color_yellow)\n        translate([0, 10, 30])\n        rotate([30, 0, 0])\n        scale([0.8, 2, 0.6])\n        cylinder(r1=6, r2=2, h=15);\n    }\n}\n\n// Flame crest\nmodule flame_crest() {\n    color(color_yellow)\n    for(i = [0:2]) {\n        rotate([0, 0, i * 120])\n        translate([0, 0, 45])\n        rotate([20, 0, 0])\n        scale([0.3, 0.3, 1])\n        cylinder(r1=3, r2=1, h=8);\n    }\n}\n\n// Eyes\nmodule eyes() {\n    for(side = [-1, 1]) {\n        color(color_black)\n        translate([side * 8, 5, 38])\n        rotate([20, 0, 0])\n        scale([0.8, 1, 0.5])\n        sphere(3);\n    }\n}\n\n// Arms with three fingers\nmodule arm(side) {\n    color(color_body)\n    union() {\n        // Upper arm\n        translate([side * 18, 0, 25])\n        rotate([0, 0, side * 30])\n        scale([0.4, 0.4, 1.2])\n        cylinder(r=5, h=15);\n        \n        // Lower arm\n        translate([side * 25, 0, 15])\n        rotate([0, 0, side * 60])\n        scale([0.3, 0.3, 1])\n        cylinder(r=4, h=12);\n        \n        // Hand\n        translate([side * 30, 0, 8])\n        sphere(4);\n        \n        // Fingers\n        color(color_yellow)\n        for(f = [0:2]) {\n            rotate([0, 0, side * (f * 30 - 30)])\n            translate([side * 32, 0, 5])\n            scale([0.3, 0.3, 1])\n            cylinder(r=2, h=6);\n        }\n    }\n}\n\n// Legs\nmodule leg(side) {\n    color(color_body)\n    union() {\n        // Thigh\n        translate([side * 10, 0, 0])\n        rotate([0, 0, side * 10])\n        scale([0.5, 0.5, 1.3])\n        cylinder(r=6, h=18);\n        \n        // Lower leg\n        translate([side * 12, 0, -12])\n        scale([0.4, 0.4, 1.2])\n        cylinder(r=5, h=15);\n        \n        // Foot\n        translate([side * 12, 8, -22])\n        scale([1.2, 2, 0.8])\n        sphere(5);\n        \n        // Toes\n        color(color_yellow)\n        for(t = [0:2]) {\n            translate([side * (12 + t * 3 - 3), 10, -25])\n            sphere(2);\n        }\n    }\n}\n\n// Tail with flame\nmodule tail() {\n    color(color_body)\n    union() {\n        // Tail base\n        translate([0, -15, 10])\n        rotate([20, 0, 0])\n        scale([0.8, 0.8, 1.5])\n        cylinder(r=5, h=25);\n        \n        // Flame\n        color(color_yellow)\n        translate([0, -20, 30])\n        for(i = [0:5]) {\n            rotate([0, 0, i * 60])\n            translate([0, 0, 0])\n            scale([0.3, 0.3, 1])\n            cylinder(r1=3, r2=0.5, h=10);\n        }\n    }\n}\n\n// Black stripes\nmodule stripes() {\n    color(color_black)\n    union() {\n        // Head stripes\n        translate([0, 5, 40])\n        scale([1.2, 0.2, 0.2])\n        sphere(10);\n        \n        // Body stripes\n        translate([0, 0, 20])\n        scale([1.4, 0.2, 0.3])\n        sphere(15);\n        \n        translate([0, 0, 15])\n        scale([1.3, 0.2, 0.3])\n        sphere(13);\n    }\n}\n\n// Assemble the complete model\nunion() {\n    body();\n    head();\n    flame_crest();\n    eyes();\n    stripes();\n    \n    arm(1);   // Right arm\n    arm(-1);  // Left arm\n    \n    leg(1);   // Right leg\n    leg(-1);  // Left leg\n    \n    tail();\n}\n\n// Base for stability\ncolor(color_beige)\ntranslate([0, 0, -25])\nscale([1.5, 1.5, 0.3])\ncylinder(r=20, h=3);",
    "renders": true
  },
  {
    "pokemon": "pinsir",
    "openscad_code": "// Pinsir Pokemon model - Realistic style, medium complexity\n// Overall size ~80mm\n\n$fn = 50;  // Smooth curves\n\n// Main colors\ncolor_dark = [0.2, 0.15, 0.1];\ncolor_light = [0.4, 0.35, 0.25];\ncolor_accent = [0.9, 0.1, 0.1];\n\nmodule pinsir() {\n    // Body\n    color(color_dark)\n    translate([0, 0, 15])\n    scale([1.2, 0.8, 1.5])\n    sphere(r = 15);\n    \n    // Thorax\n    color(color_dark)\n    translate([0, 0, 25])\n    scale([1.4, 0.9, 1.2])\n    sphere(r = 12);\n    \n    // Abdomen\n    color(color_dark)\n    translate([0, 0, 5])\n    scale([0.8, 0.6, 1.2])\n    sphere(r = 10);\n    \n    // Head\n    color(color_dark)\n    translate([0, 0, 35])\n    scale([1.6, 1.2, 1.4])\n    sphere(r = 12);\n    \n    // Pincers\n    module pincer(side) {\n        color(color_light)\n        translate([side * 20, 0, 35])\n        rotate([0, 0, side * 20])\n        union() {\n            // Base\n            translate([0, 0, 0])\n            rotate([0, side * 30, 0])\n            scale([3, 1, 1])\n            sphere(r = 5);\n            \n            // First segment\n            translate([side * 12, 0, 0])\n            rotate([0, side * 20, 0])\n            scale([8, 3, 2])\n            cylinder(r1 = 3, r2 = 5, h = 12);\n            \n            // Second segment\n            translate([side * 25, 0, -3])\n            rotate([0, side * 15, 0])\n            scale([6, 2, 2])\n            cylinder(r1 = 2, r2 = 4, h = 15);\n            \n            // Claw\n            translate([side * 38, 0, -5])\n            rotate([0, side * 10, 0])\n            scale([4, 1.5, 1.5])\n            cylinder(r1 = 2, r2 = 3, h = 10);\n        }\n        \n        // Teeth on pincers\n        for(i = [1:3]) {\n            color(color_light)\n            translate([side * (25 + i * 4), 0, -5 + i])\n            rotate([0, side * 15, 0])\n            scale([0.8, 0.8, 0.8])\n            cube([3, 2, 1], center = true);\n        }\n    }\n    \n    pincer(1);\n    pincer(-1);\n    \n    // Wings\n    color(color_light)\n    translate([0, 0, 28])\n    rotate([0, 0, 0])\n    difference() {\n        scale([2, 0.5, 0.3])\n        sphere(r = 15);\n        // Wing membrane pattern\n        for(i = [1:3]) {\n            translate([0, i * 3, 0])\n            scale([0.9 - i * 0.1, 0.8, 0.8])\n            sphere(r = 15);\n        }\n    }\n    \n    // Legs\n    module leg(x, y, angle) {\n        color(color_dark)\n        translate([x, y, 12])\n        rotate([0, 0, angle])\n        union() {\n            // Upper leg\n            translate([0, 0, 0])\n            rotate([0, 90, 0])\n            scale([0.8, 0.8, 1])\n            cylinder(r = 3, h = 10);\n            \n            // Lower leg\n            translate([10, 0, -5])\n            rotate([0, 90, 0])\n            scale([0.6, 0.6, 1])\n            cylinder(r = 2.5, h = 8);\n            \n            // Foot\n            translate([18, 0, -8])\n            rotate([0, 0, 30])\n            scale([1.5, 0.5, 0.5])\n            sphere(r = 3);\n        }\n    }\n    \n    // Front legs\n    leg(8, -10, 45);\n    leg(-8, -10, -45);\n    \n    // Middle legs\n    leg(12, 0, 90);\n    leg(-12, 0, -90);\n    \n    // Back legs\n    leg(8, 10, 135);\n    leg(-8, 10, -135);\n    \n    // Eyes\n    color(color_accent)\n    translate([6, -8, 38])\n    sphere(r = 2);\n    translate([-6, -8, 38])\n    sphere(r = 2);\n    \n    // Horn\n    color(color_light)\n    translate([0, 0, 55])\n    rotate([0, 0, 0])\n    scale([0.8, 0.8, 1.5])\n    cylinder(r1 = 4, r2 = 0, h = 12);\n}\n\npinsir();",
    "renders": true
  },
  {
    "pokemon": "tauros",
    "openscad_code": "// Tauros - Realistic Style, Medium Complexity\n// Scale: ~80mm long\n\n// Main colors\ncolor_tauros = [0.4, 0.3, 0.2];      // Brown body\ncolor_tauros_light = [0.6, 0.5, 0.4]; // Light brown accents\ncolor_gray = [0.3, 0.3, 0.3];        // Horns and hooves\ncolor_black = [0.1, 0.1, 0.1];       // Eyes and details\ncolor_white = [0.9, 0.9, 0.9];       // Muzzle and tail\n\n// Overall scale\nscale_factor = 0.8;\n\n// Main body\nmodule body() {\n    color(color_tauros)\n    union() {\n        // Torso\n        translate([0, 0, 15])\n            scale([1.2, 0.8, 1])\n            sphere(r=20, $fn=30);\n        \n        // Chest\n        translate([0, 15, 10])\n            scale([1.1, 0.7, 0.8])\n            sphere(r=15, $fn=24);\n    }\n}\n\n// Head module\nmodule head() {\n    color(color_tauros)\n    union() {\n        // Main head shape\n        translate([0, -25, 25])\n            scale([1.1, 1.5, 1.2])\n            sphere(r=18, $fn=32);\n        \n        // Muzzle\n        color(color_white)\n        translate([0, -40, 20])\n            scale([0.8, 1.2, 0.6])\n            sphere(r=12, $fn=24);\n        \n        // Horns\n        color(color_gray)\n        // Left horn\n        translate([-12, -30, 35])\n            rotate([0, 20, -30])\n            cylinder(h=25, r1=5, r2=2, $fn=8);\n        \n        // Right horn\n        translate([12, -30, 35])\n            rotate([0, 20, 30])\n            cylinder(h=25, r1=5, r2=2, $fn=8);\n        \n        // Top horn\n        translate([0, -25, 42])\n            rotate([0, 0, 0])\n            cylinder(h=20, r1=6, r2=3, $fn=8);\n        \n        // Ears\n        color(color_tauros)\n        // Left ear\n        translate([-15, -22, 32])\n            rotate([0, -20, -20])\n            scale([0.5, 0.3, 1.2])\n            sphere(r=8, $fn=16);\n        \n        // Right ear\n        translate([15, -22, 32])\n            rotate([0, -20, 20])\n            scale([0.5, 0.3, 1.2])\n            sphere(r=8, $fn=16);\n        \n        // Eyes\n        color(color_black)\n        // Left eye\n        translate([-8, -35, 28])\n            scale([1, 1.2, 0.5])\n            sphere(r=3, $fn=16);\n        \n        // Right eye\n        translate([8, -35, 28])\n            scale([1, 1.2, 0.5])\n            sphere(r=3, $fn=16);\n        \n        // Nostrils\n        translate([-3, -45, 20])\n            sphere(r=1.5, $fn=8);\n        translate([3, -45, 20])\n            sphere(r=1.5, $fn=8);\n    }\n}\n\n// Leg module\nmodule leg(position, angle) {\n    translate(position)\n    rotate([0, 0, angle])\n    color(color_tauros)\n    union() {\n        // Upper leg\n        translate([0, 0, 10])\n            scale([0.8, 0.8, 1.2])\n            cylinder(h=20, r=6, $fn=16);\n        \n        // Lower leg\n        color(color_gray)\n        translate([0, 0, -5])\n            cylinder(h=15, r=5, $fn=16);\n        \n        // Hoof\n        translate([0, 0, -15])\n            scale([1.2, 1.2, 0.5])\n            cylinder(h=5, r=5, $fn=8);\n    }\n}\n\n// Tail module\nmodule tail() {\n    color(color_tauros)\n    union() {\n        // Tail base\n        translate([0, 25, 20])\n            rotate([0, -10, 0])\n            scale([0.8, 0.8, 2])\n            cylinder(h=15, r=5, $fn=16);\n        \n        // Tail tuft\n        color(color_white)\n        translate([0, 35, 15])\n            scale([1.2, 1.5, 0.8])\n            sphere(r=8, $fn=16);\n    }\n}\n\n// Assembly\nscale([scale_factor, scale_factor, scale_factor])\nunion() {\n    body();\n    head();\n    \n    // Four legs\n    leg([-15, 10, 0], 0);\n    leg([15, 10, 0], 0);\n    leg([-15, -10, 0], 0);\n    leg([15, -10, 0], 0);\n    \n    tail();\n}",
    "renders": true
  },
  {
    "pokemon": "magikarp",
    "openscad_code": "// Magikarp OpenSCAD model - medium complexity realistic style\n// Overall dimensions: ~80mm long, ~45mm tall\n\n// Color definitions\ngold = \"#FFD700\";\nred = \"#B22222\";\nwhite = \"#FFFFFF\";\nblack = \"#000000\";\n\n// Main body module\nmodule magikarp_body() {\n    color(gold) {\n        // Main fish body - two intersecting ellipsoids\n        intersection() {\n            scale([1.2, 0.8, 0.6]) sphere(d=40, $fn=50);\n            translate([0, 0, -5]) scale([1.1, 0.9, 0.7]) sphere(d=40, $fn=50);\n        }\n        \n        // Tail base\n        translate([-35, 0, 0]) rotate([0, 0, 15]) \n            scale([0.8, 0.3, 0.4]) sphere(d=25, $fn=30);\n    }\n}\n\n// Tail fin module\nmodule tail_fin() {\n    color(red) {\n        // Main tail fin\n        translate([-45, 0, 0]) rotate([0, 90, 0]) {\n            difference() {\n                scale([1.5, 1, 0.1]) sphere(d=30, $fn=40);\n                translate([0, 0, -2]) cube([40, 30, 5], center=true);\n            }\n        }\n        \n        // Tail fin details\n        for(i = [-1, 1]) {\n            translate([-45, i*8, 0]) rotate([0, 90, i*20]) \n                scale([0.8, 0.4, 0.1]) sphere(d=15, $fn=20);\n        }\n    }\n}\n\n// Dorsal fin module\nmodule dorsal_fin() {\n    color(red) {\n        translate([5, 0, 15]) rotate([0, 0, 0]) {\n            difference() {\n                scale([0.1, 1, 1]) sphere(d=20, $fn=20);\n                translate([0, 0, -10]) cube([5, 20, 10], center=true);\n            }\n        }\n    }\n}\n\n// Pectoral fins module\nmodule pectoral_fins() {\n    color(red) {\n        for(side = [-1, 1]) {\n            translate([0, side*20, -5]) rotate([0, side*20, 0]) {\n                scale([0.5, 1, 0.1]) sphere(d=15, $fn=20);\n            }\n        }\n    }\n}\n\n// Whiskers module\nmodule whiskers() {\n    color(white) {\n        for(side = [-1, 1]) {\n            // Left/right whiskers\n            translate([15, side*8, 0]) rotate([0, 0, side*30]) {\n                cylinder(h=12, d1=1.5, d2=0.5, $fn=8);\n            }\n            translate([15, side*12, 0]) rotate([0, 0, side*45]) {\n                cylinder(h=15, d1=1.5, d2=0.5, $fn=8);\n            }\n        }\n    }\n}\n\n// Face module\nmodule face() {\n    // Eyes\n    for(side = [-1, 1]) {\n        color(white) {\n            translate([20, side*8, 8]) sphere(d=6, $fn=20);\n        }\n        color(black) {\n            translate([22, side*8, 8]) sphere(d=3, $fn=15);\n        }\n    }\n    \n    // Mouth\n    color(black) {\n        translate([25, 0, -2]) rotate([0, 90, 0]) \n            cylinder(h=0.5, d1=8, d2=5, $fn=20);\n    }\n    \n    // Eyebrows\n    color(red) {\n        for(side = [-1, 1]) {\n            translate([18, side*8, 12]) rotate([0, 0, side*-30]) {\n                scale([0.1, 1, 0.5]) sphere(d=8, $fn=10);\n            }\n        }\n    }\n}\n\n// Scale pattern module\nmodule scales() {\n    color(gold) {\n        // Simple scale pattern using small spheres\n        for(i = [0:3]) {\n            for(j = [-1, 1]) {\n                translate([10 - i*8, j*5, -5 + i*2]) \n                    sphere(d=3, $fn=10);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    magikarp_body();\n    tail_fin();\n    dorsal_fin();\n    pectoral_fins();\n    whiskers();\n    face();\n    scales();\n}\n\n// Small stand for printing stability\ncolor(gold) translate([0, 0, -12]) \n    scale([1.5, 0.8, 0.2]) sphere(d=20, $fn=30);",
    "renders": true
  },
  {
    "pokemon": "gyarados",
    "openscad_code": "// Gyarados - Realistic Style (Medium Complexity)\n// Dimensions: ~80mm long x 35mm tall x 25mm wide\n\n$fn = 32;\n\n// Colors\ncolor_blue = [0.1, 0.3, 0.8];\ncolor_light_blue = [0.3, 0.6, 0.9];\ncolor_yellow = [1, 0.8, 0];\ncolor_white = [0.9, 0.9, 0.9];\ncolor_red = [0.8, 0.1, 0.1];\n\nmodule gyarados() {\n    union() {\n        // Main body\n        color(color_blue) {\n            // Torso\n            translate([0, 0, 10]) {\n                scale([1.2, 0.8, 1]) sphere(d=20);\n            }\n            \n            // Neck segment 1\n            translate([-15, 0, 15]) {\n                rotate([0, 10, 0]) scale([0.8, 0.7, 0.8]) sphere(d=15);\n            }\n            \n            // Neck segment 2\n            translate([-25, 0, 20]) {\n                rotate([0, 20, 0]) scale([0.7, 0.6, 0.7]) sphere(d=12);\n            }\n            \n            // Head\n            translate([-35, 0, 25]) {\n                scale([0.8, 0.6, 0.7]) sphere(d=14);\n            }\n        }\n        \n        // Head details\n        color(color_blue) {\n            // Snout\n            translate([-42, 0, 25]) {\n                rotate([0, -20, 0]) scale([1.2, 0.6, 0.4]) sphere(d=10);\n            }\n        }\n        \n        // Eyes\n        color(color_red) {\n            translate([-40, 4, 28]) sphere(d=3);\n            translate([-40, -4, 28]) sphere(d=3);\n        }\n        \n        // Eye pupils\n        color(color_white) {\n            translate([-41, 4.5, 28.5]) sphere(d=1);\n            translate([-41, -3.5, 28.5]) sphere(d=1);\n        }\n        \n        // Fins on head\n        color(color_light_blue) {\n            // Left fin\n            translate([-38, 8, 30]) {\n                rotate([0, 0, -30]) scale([0.3, 0.8, 1]) cube([8, 2, 6], center=true);\n            }\n            \n            // Right fin\n            translate([-38, -8, 30]) {\n                rotate([0, 0, 30]) scale([0.3, 0.8, 1]) cube([8, 2, 6], center=true);\n            }\n        }\n        \n        // Mustache whiskers\n        color(color_white) {\n            for (i = [-1, 1]) {\n                translate([-45, i*3, 23]) {\n                    rotate([0, 30, i*20]) scale([0.2, 0.2, 1]) cylinder(h=8, d=1, center=true);\n                }\n                translate([-45, i*5, 23]) {\n                    rotate([0, 30, i*10]) scale([0.2, 0.2, 1]) cylinder(h=6, d=1, center=true);\n                }\n            }\n        }\n        \n        // Tail segments\n        color(color_blue) {\n            // Segment 1\n            translate([12, 0, 12]) {\n                rotate([0, -10, 0]) scale([0.9, 0.7, 0.9]) sphere(d=16);\n            }\n            \n            // Segment 2\n            translate([22, 0, 10]) {\n                rotate([0, -20, 0]) scale([0.8, 0.6, 0.8]) sphere(d=14);\n            }\n            \n            // Segment 3\n            translate([30, 0, 7]) {\n                rotate([0, -30, 0]) scale([0.7, 0.5, 0.7]) sphere(d=12);\n            }\n            \n            // Segment 4\n            translate([36, 0, 4]) {\n                rotate([0, -40, 0]) scale([0.6, 0.4, 0.6]) sphere(d=10);\n            }\n            \n            // Tail fin\n            translate([42, 0, 2]) {\n                rotate([0, -50, 0]) scale([0.5, 0.3, 0.5]) sphere(d=8);\n            }\n        }\n        \n        // Tail fin\n        color(color_light_blue) {\n            translate([45, 0, 2]) {\n                rotate([0, -50, 0]) scale([1.5, 0.2, 1]) cube([10, 15, 2], center=true);\n            }\n        }\n        \n        // Dorsal fin\n        color(color_light_blue) {\n            translate([0, 0, 20]) {\n                scale([0.2, 1, 0.8]) cube([2, 25, 15], center=true);\n            }\n        }\n        \n        // Side fins\n        color(color_light_blue) {\n            // Left fin\n            translate([5, 9, 8]) {\n                rotate([0, 0, 45]) scale([1, 0.2, 0.8]) cube([12, 3, 8], center=true);\n            }\n            \n            // Right fin\n            translate([5, -9, 8]) {\n                rotate([0, 0, -45]) scale([1, 0.2, 0.8]) cube([12, 3, 8], center=true);\n            }\n        }\n        \n        // Belly scales pattern\n        color(color_light_blue) {\n            for (i = [-2:2]) {\n                translate([i*8, 0, 5]) {\n                    scale([1.2, 0.8, 0.3]) sphere(d=10);\n                }\n            }\n        }\n        \n        // Spikes on back\n        color(color_blue) {\n            for (i = [-3:3]) {\n                translate([i*6, 0, 25]) {\n                    rotate([0, 0, 0]) cylinder(h=5, d1=3, d2=0, center=false);\n                }\n            }\n        }\n    }\n}\n\n// Generate the model\ngyarados();",
    "renders": true
  },
  {
    "pokemon": "lapras",
    "openscad_code": "// Lapras - Realistic Style, Medium Complexity\n// 3D printable model with proper wall thickness\n\n$fn = 32;\n\n// Main colors\nlapras_blue = [0.3, 0.5, 0.8];\nlapras_brown = [0.6, 0.4, 0.2];\nlapras_cream = [0.9, 0.85, 0.7];\nshell_gray = [0.7, 0.7, 0.65];\n\nmodule shell_spike(pos, angle) {\n    translate(pos)\n    rotate([0, 0, angle])\n    color(shell_gray)\n    scale([0.8, 0.8, 1.2])\n    cylinder(h = 8, r1 = 4, r2 = 0.5);\n}\n\nmodule shell() {\n    color(shell_gray) {\n        // Main shell base\n        translate([0, 0, 12])\n        scale([1.2, 0.8, 0.3])\n        sphere(r = 25);\n        \n        // Shell rim\n        translate([0, 0, 8])\n        scale([1.3, 0.9, 0.2])\n        sphere(r = 25);\n        \n        // Shell spikes\n        for(i = [-60:30:60]) {\n            shell_spike([20 * cos(i), 15 * sin(i), 18], i + 90);\n        }\n        shell_spike([0, 22, 18], 0);\n        shell_spike([0, -22, 18], 180);\n    }\n}\n\nmodule neck() {\n    color(lapras_blue) {\n        translate([25, 0, 15])\n        rotate([-10, 0, 0])\n        scale([0.8, 0.6, 1.5])\n        cylinder(h = 20, r1 = 8, r2 = 5);\n    }\n}\n\nmodule head() {\n    color(lapras_blue) {\n        translate([35, 0, 28])\n        rotate([-20, 0, 0])\n        scale([1.2, 1, 0.9])\n        sphere(r = 12);\n        \n        // Snout\n        translate([45, 0, 28])\n        scale([1.5, 0.7, 0.7])\n        sphere(r = 8);\n        \n        // Horns\n        translate([30, -10, 35])\n        rotate([30, 0, -20])\n        cylinder(h = 8, r1 = 3, r2 = 1);\n        translate([30, 10, 35])\n        rotate([30, 0, 20])\n        cylinder(h = 8, r1 = 3, r2 = 1);\n        \n        // Eyes\n        color([0, 0, 0]) {\n            translate([42, -5, 32])\n            sphere(r = 2);\n            translate([42, 5, 32])\n            sphere(r = 2);\n        }\n    }\n}\n\nmodule fin() {\n    color(lapras_blue) {\n        hull() {\n            translate([0, 0, 0])\n            sphere(r = 2);\n            translate([0, 15, 8])\n            sphere(r = 1);\n            translate([0, 25, 2])\n            sphere(r = 0.5);\n        }\n    }\n}\n\nmodule body() {\n    color(lapras_blue) {\n        // Main body\n        translate([0, 0, 10])\n        scale([1.5, 1, 0.8])\n        sphere(r = 20);\n        \n        // Belly\n        color(lapras_cream) {\n            translate([0, 0, 5])\n            scale([1.3, 0.8, 0.3])\n            sphere(r = 20);\n        }\n        \n        // Front flippers\n        translate([15, -20, 8])\n        rotate([0, 10, -30])\n        scale([1.2, 0.3, 0.6])\n        sphere(r = 12);\n        \n        translate([15, 20, 8])\n        rotate([0, 10, 30])\n        scale([1.2, 0.3, 0.6])\n        sphere(r = 12);\n        \n        // Back flippers\n        translate([-20, -15, 5])\n        rotate([0, 0, -45])\n        scale([0.8, 0.3, 0.5])\n        sphere(r = 10);\n        \n        translate([-20, 15, 5])\n        rotate([0, 0, 45])\n        scale([0.8, 0.3, 0.5])\n        sphere(r = 10);\n        \n        // Tail\n        translate([-28, 0, 12])\n        rotate([0, 0, 180])\n        fin();\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    neck();\n    head();\n    shell();\n}",
    "renders": true
  },
  {
    "pokemon": "ditto",
    "openscad_code": "// Ditto Pokemon - Realistic Style, Medium Complexity\n// 3D printable, 75mm tall\n\n$fn = 32;  // Smooth curves\n\n// Main colors\nditto_pink = [1, 0.6, 0.8];\nditto_dark = [0.8, 0.4, 0.6];\nditto_eye = [0.2, 0.2, 0.4];\n\n// Main body module\nmodule ditto_body() {\n    color(ditto_pink)\n    difference() {\n        // Main blob shape\n        union() {\n            sphere(d = 50);\n            translate([0, -15, 5])\n                scale([1.2, 0.8, 0.9])\n                sphere(d = 45);\n            // Bottom flattening\n            translate([0, 0, -20])\n                cube([60, 60, 40], center = true);\n        }\n        \n        // Cut bottom flat for printing\n        translate([0, 0, -25])\n            cube([100, 100, 50], center = true);\n    }\n}\n\n// Simple mouth module\nmodule ditto_mouth() {\n    color(ditto_dark)\n    translate([0, -20, -10])\n        rotate([90, 0, 0])\n        cylinder(h = 2, d1 = 15, d2 = 12, center = true);\n}\n\n// Eye module for both eyes\nmodule ditto_eye(x_pos) {\n    // White of eye\n    color([1, 1, 1])\n    translate([x_pos, 10, 10])\n        sphere(d = 12);\n    \n    // Pupil\n    color(ditto_eye)\n    translate([x_pos + 2, 16, 12])\n        sphere(d = 6);\n}\n\n// Tiny dots for texture\nmodule texture_dots() {\n    color(ditto_dark)\n    for(i = [1:8]) {\n        angle = i * 45;\n        r = 20 + (i % 2) * 5;\n        translate([cos(angle) * r, sin(angle) * r, 5])\n            sphere(d = 3);\n    }\n}\n\n// Main assembly\nunion() {\n    ditto_body();\n    ditto_mouth();\n    \n    // Left eye\n    ditto_eye(-12);\n    \n    // Right eye\n    ditto_eye(12);\n    \n    // Add some texture dots\n    texture_dots();\n}\n\n// Base for stability\ncolor(ditto_pink)\ntranslate([0, 0, -25])\n    cylinder(h = 3, d = 55, center = true);",
    "renders": true
  },
  {
    "pokemon": "eevee",
    "openscad_code": "// Eevee Pokemon - Realistic Style, Medium Complexity\n// Designed for 3D printing with no overhangs\n\n$fn = 32;\n\n// Main body color - light brown\ncolor([0.8, 0.6, 0.4]) {\n    // Main body - ellipsoid shape\n    scale([1.2, 1, 0.8]) sphere(15);\n    \n    // Body extension for chest\n    translate([0, -5, -5]) scale([0.8, 0.6, 0.5]) sphere(12);\n}\n\n// Head\nmodule head() {\n    color([0.8, 0.6, 0.4]) {\n        translate([0, 20, 8]) scale([0.9, 1.1, 0.9]) sphere(12);\n        \n        // Muzzle\n        translate([0, 28, 5]) scale([0.6, 0.8, 0.5]) sphere(8);\n        \n        // Ears\n        for(x = [-1, 1]) {\n            translate([x * 10, 18, 18]) rotate([0, x * -15, 0]) \n                scale([0.3, 0.3, 1]) cylinder(h = 15, r = 5);\n        }\n    }\n    \n    // Inner ear color - darker brown\n    color([0.6, 0.4, 0.3]) {\n        for(x = [-1, 1]) {\n            translate([x * 10, 18, 18]) rotate([0, x * -15, 0]) \n                scale([0.2, 0.2, 0.8]) cylinder(h = 10, r = 3);\n        }\n    }\n    \n    // Eyes\n    color(\"black\") {\n        for(x = [-1, 1]) {\n            translate([x * 5, 28, 8]) sphere(2);\n        }\n    }\n    \n    // Nose\n    color([0.2, 0.1, 0.1]) translate([0, 31, 6]) sphere(1.5);\n}\n\nhead();\n\n// Legs\nmodule leg(side, front) {\n    translate([side * 8, front * 12, -12]) {\n        color([0.7, 0.5, 0.35]) {\n            // Upper leg\n            cylinder(h = 8, r = 4);\n            \n            // Lower leg\n            translate([0, 0, -8]) cylinder(h = 10, r = 3.5);\n            \n            // Paw\n            translate([0, 0, -18]) sphere(4);\n        }\n    }\n}\n\n// Generate all four legs\nleg(-1, 1);  // Front left\nleg(1, 1);   // Front right\nleg(-1, -1); // Back left\nleg(1, -1);  // Back right\n\n// Tail - split into multiple parts\nmodule tail() {\n    color([0.8, 0.6, 0.4]) {\n        // Base of tail\n        translate([0, -22, -5]) rotate([45, 0, 0]) \n            cylinder(h = 15, r1 = 6, r2 = 4);\n        \n        // Middle section\n        translate([0, -32, -15]) rotate([30, 0, 0]) \n            cylinder(h = 12, r1 = 4, r2 = 3);\n        \n        // Tip - fluffy part\n        translate([0, -40, -22]) rotate([20, 0, 0]) \n            sphere(5);\n    }\n    \n    // Tail fur details - lighter color\n    color([0.9, 0.7, 0.5]) {\n        for(i = [1:3]) {\n            translate([i * 2 - 4, -35, -20]) sphere(2);\n        }\n    }\n}\n\ntail();\n\n// Fur collar around neck\ncolor([0.9, 0.7, 0.5]) {\n    for(angle = [0:45:315]) {\n        rotate([0, 0, angle]) \n            translate([0, 10, 0]) \n            scale([1.2, 1, 0.3]) sphere(3);\n    }\n}\n\n// Back markings\ncolor([0.6, 0.4, 0.3]) {\n    translate([0, -10, 10]) scale([0.5, 1, 0.2]) sphere(8);\n    translate([0, -15, 10]) scale([0.4, 0.8, 0.15]) sphere(7);\n}",
    "renders": true
  },
  {
    "pokemon": "vaporeon",
    "openscad_code": "// Realistic Vaporeon - 3D Printable\n// Scale: ~80mm tall\n$fn = 32;\n\n// Main body color - light blue\nmodule body_color() color([0.4, 0.6, 0.9]);\n\n// Accent color - darker blue\nmodule accent_color() color([0.2, 0.3, 0.7]);\n\n// Fin color - light yellow\nmodule fin_color() color([0.9, 0.8, 0.5]);\n\n// Main body module\nmodule vaporeon_body() {\n    union() {\n        // Torso\n        body_color() {\n            translate([0, 0, 20]) scale([1.2, 0.8, 1.5]) \n                sphere(15);\n            \n            // Neck connection\n            translate([0, 0, 35]) scale([0.8, 0.6, 1.2]) \n                cylinder(10, 10, 8);\n        }\n        \n        // Head\n        translate([0, -15, 45]) scale([1, 0.9, 1.1]) \n            sphere(12);\n        \n        // Legs\n        for(i = [-1, 1]) {\n            translate([i * 12, 0, 15]) rotate([0, i * 10, 0])\n                scale([0.4, 0.4, 1]) cylinder(12, 8, 6);\n            \n            translate([i * 8, 5, 0]) rotate([0, -i * 15, 0])\n                scale([0.35, 0.35, 0.8]) cylinder(10, 6, 5);\n        }\n        \n        // Tail base\n        translate([0, 12, 22]) rotate([-30, 0, 0])\n            scale([0.8, 1, 1.5]) cylinder(25, 12, 8);\n    }\n}\n\n// Ears module\nmodule ears() {\n    for(i = [-1, 1]) {\n        fin_color() {\n            translate([i * 8, -20, 55]) rotate([0, i * 15, 0])\n                scale([0.3, 0.1, 1]) cylinder(8, 3, 6);\n            \n            accent_color() {\n                translate([i * 8, -22, 60]) rotate([30, 0, i * 30])\n                    scale([0.15, 0.05, 0.8]) cylinder(6, 2, 4);\n            }\n        }\n    }\n}\n\n// Fins module\nmodule dorsal_fins() {\n    fin_color() {\n        // Main dorsal fin\n        translate([0, 10, 40]) rotate([90, 0, 0])\n            scale([1, 0.2, 0.8]) cylinder(15, 5, 2);\n        \n        // Side fins\n        for(i = [-1, 1]) {\n            translate([i * 15, 8, 35]) rotate([90, 0, i * 15])\n                scale([0.8, 0.15, 0.6]) cylinder(12, 4, 1);\n        }\n        \n        // Tail fins\n        translate([0, 25, 15]) rotate([120, 0, 0])\n            scale([1.5, 0.2, 1]) cylinder(20, 8, 3);\n        \n        // Small tail fin details\n        for(i = [-1, 1]) {\n            translate([i * 10, 30, 10]) rotate([120, 0, i * 20])\n                scale([0.6, 0.1, 0.8]) cylinder(15, 5, 1);\n        }\n    }\n}\n\n// Face details module\nmodule face_details() {\n    // Eyes\n    accent_color() {\n        for(i = [-1, 1]) {\n            translate([i * 5, -23, 52]) rotate([0, -20, 0])\n                scale([0.8, 0.4, 0.6]) sphere(3);\n        }\n    }\n    \n    // Eye highlights\n    color([1, 1, 1]) {\n        for(i = [-1, 1]) {\n            translate([i * 5.5, -23.5, 53.5]) \n                scale([0.3, 0.2, 0.3]) sphere(1);\n        }\n    }\n    \n    // Nose\n    body_color() {\n        translate([0, -20, 48]) scale([0.5, 0.3, 0.3]) sphere(2);\n    }\n    \n    // Mouth\n    accent_color() {\n        translate([0, -18, 46]) rotate([0, 0, 180])\n            scale([2, 1, 0.5]) cylinder(1, 4, 4);\n    }\n}\n\n// Collar pattern module\nmodule collar_pattern() {\n    accent_color() {\n        for(i = [0:30:330]) {\n            rotate([0, 0, i]) {\n                translate([9, 0, 30]) rotate([90, 0, 0])\n                    scale([0.8, 0.1, 0.5]) cylinder(3, 2, 1);\n            }\n        }\n    }\n}\n\n// Assemble the complete model\nscale([0.8, 0.8, 0.8]) {\n    union() {\n        vaporeon_body();\n        ears();\n        dorsal_fins();\n        face_details();\n        collar_pattern();\n    }\n}",
    "renders": true
  },
  {
    "pokemon": "jolteon",
    "openscad_code": "// Jolteon - Realistic Style, Medium Complexity\n// 3D printable model with proper wall thickness\n\n$fn = 32;\nscale_factor = 0.8;\nbody_color = [0.8, 0.9, 0.95];\nspike_color = [1, 0.95, 0.6];\neye_color = [0.1, 0.3, 0.8];\n\nmodule jolteon() {\n    // Main body\n    color(body_color)\n    union() {\n        // Torso\n        translate([0, 0, 15])\n        scale([1.2, 0.8, 1.3])\n        sphere(15);\n        \n        // Chest\n        translate([0, -5, 10])\n        scale([1.1, 0.7, 0.9])\n        sphere(12);\n        \n        // Head\n        translate([0, -20, 35])\n        scale([1.1, 0.9, 0.9])\n        sphere(12);\n        \n        // Muzzle\n        translate([0, -30, 32])\n        scale([0.7, 1.2, 0.6])\n        sphere(8);\n        \n        // Legs\n        for(x = [-8, 8]) {\n            // Front legs\n            translate([x, -15, 8])\n            rotate([0, 10, 0])\n            scale([0.4, 0.4, 1.2])\n            cylinder(20, 5, 4);\n            \n            // Back legs\n            translate([x, 15, 8])\n            rotate([0, -10, 0])\n            scale([0.45, 0.45, 1.3])\n            cylinder(22, 5.5, 4.5);\n            \n            // Paws\n            translate([x, -15, -11])\n            sphere(4);\n            translate([x, 15, -12])\n            sphere(4.5);\n        }\n    }\n    \n    // Ears\n    module ear(x_pos, rot) {\n        color(body_color)\n        translate([x_pos, -28, 45])\n        rotate([0, rot, x_pos * 5])\n        scale([0.3, 0.3, 1.5])\n        cylinder(15, 3, 1);\n        \n        color(spike_color)\n        translate([x_pos, -28, 60])\n        rotate([0, rot, x_pos * 5])\n        scale([0.2, 0.2, 0.8])\n        cylinder(5, 2, 0.5);\n    }\n    \n    ear(-8, 15);\n    ear(8, 15);\n    \n    // Tail\n    color(body_color)\n    union() {\n        translate([0, 25, 20])\n        rotate([0, -30, 0])\n        scale([0.5, 1, 2])\n        sphere(8);\n        \n        // Tail spikes\n        for(i = [0:2]) {\n            color(spike_color)\n            translate([0, 28 + i * 5, 22 - i * 3])\n            rotate([0, -30 - i * 10, 0])\n            scale([0.3, 1.5, 0.3])\n            cylinder(6, 1, 0.5);\n        }\n    }\n    \n    // Neck spikes\n    for(i = [0:3]) {\n        color(spike_color)\n        translate([0, -10 + i * 4, 32 - i * 2])\n        rotate([0, 10 - i * 5, 0])\n        scale([0.1, 0.1, 1])\n        cylinder(8, 2, 0.5);\n    }\n    \n    // Back spikes\n    for(i = [0:5]) {\n        color(spike_color)\n        translate([0, -5 + i * 5, 35 + i * 2])\n        rotate([0, -5 - i * 2, 0])\n        scale([0.15, 0.15, 1.2])\n        cylinder(10, 2, 0.5);\n    }\n    \n    // Eyes\n    color(eye_color)\n    union() {\n        translate([-4, -30, 35])\n        scale([1, 1.2, 0.5])\n        sphere(2);\n        translate([4, -30, 35])\n        scale([1, 1.2, 0.5])\n        sphere(2);\n    }\n    \n    // Nose\n    color([0, 0, 0])\n    translate([0, -34, 32])\n    sphere(1);\n    \n    // Mouth\n    color([0.2, 0.2, 0.2])\n    translate([0, -32, 30])\n    scale([2, 0.5, 0.5])\n    cube([3, 1, 1], center=true);\n}\n\n// Main model\nscale([scale_factor, scale_factor, scale_factor])\njolteon();",
    "renders": true
  },
  {
    "pokemon": "flareon",
    "openscad_code": "// Flareon - Realistic Style, Medium Complexity\n// Scale: ~60mm tall when printed\n\n$fn = 32;\n\n// Main color scheme\ncolor_orange = [255/255, 125/255, 25/255];\ncolor_yellow = [255/255, 220/255, 80/255];\ncolor_black = [30/255, 30/255, 30/255];\ncolor_white = [240/255, 240/255, 240/255];\n\nmodule flareon() {\n    union() {\n        // Body\n        color(color_orange)\n        translate([0, 0, 10])\n        scale([1, 0.8, 1.2])\n        sphere(d = 30);\n        \n        // Head\n        color(color_orange)\n        translate([0, 15, 35])\n        scale([0.9, 0.9, 1])\n        sphere(d = 25);\n        \n        // Muzzle\n        color(color_orange)\n        translate([0, 24, 30])\n        scale([0.7, 0.5, 0.6])\n        sphere(d = 15);\n        \n        // Ears (two identical ears)\n        for (x = [-1, 1]) {\n            color(color_orange)\n            translate([x * 10, 12, 42]) {\n                rotate([0, -20 * x, 0])\n                scale([0.3, 2, 0.5])\n                cylinder(h = 12, d1 = 6, d2 = 3);\n            }\n            \n            // Inner ear\n            color(color_yellow)\n            translate([x * 10, 12, 42]) {\n                rotate([0, -20 * x, 0])\n                scale([0.2, 1.5, 0.3])\n                cylinder(h = 8, d1 = 4, d2 = 2);\n            }\n        }\n        \n        // Eyes\n        for (x = [-1, 1]) {\n            color(color_black)\n            translate([x * 7, 22, 35])\n            scale([1, 0.8, 0.5])\n            sphere(d = 4);\n            \n            // Eye highlight\n            color(color_white)\n            translate([x * 7.5, 22.5, 36.5])\n            sphere(d = 1.5);\n        }\n        \n        // Nose\n        color(color_black)\n        translate([0, 28, 32])\n        sphere(d = 2);\n        \n        // Tail - consists of multiple segments\n        translate([-15, -8, 15]) {\n            rotate([0, 0, 120])\n            for (i = [0:4]) {\n                color(color_orange)\n                translate([i * 3, -i * 2, 0]) {\n                    rotate([0, 0, -20 * i])\n                    scale([1 - i * 0.15, 1, 0.3])\n                    sphere(d = 12 - i * 2);\n                }\n            }\n        }\n        \n        // Front legs\n        for (x = [-1, 1]) {\n            color(color_orange)\n            translate([x * 10, 8, 0]) {\n                rotate([0, 20, 0])\n                cylinder(h = 20, d1 = 8, d2 = 6);\n            }\n            \n            // Paws\n            color(color_orange)\n            translate([x * 10, 12, -2])\n            sphere(d = 9);\n            \n            // Paw pads\n            color(color_yellow)\n            for (px = [-1, 0, 1]) {\n                for (py = [-1, 0, 1]) {\n                    if (abs(px) + abs(py) != 2) {\n                        translate([x * 10 + px * 2.5, 8 + py * 2.5, -2])\n                        sphere(d = 1.5);\n                    }\n                }\n            }\n        }\n        \n        // Back legs\n        for (x = [-1, 1]) {\n            color(color_orange)\n            translate([x * 8, -12, 0]) {\n                rotate([0, -20, 0])\n                cylinder(h = 18, d1 = 9, d2 = 7);\n            }\n            \n            color(color_orange)\n            translate([x * 8, -12, -2])\n            sphere(d = 10);\n        }\n        \n        // Fluffy collar\n        color(color_yellow)\n        translate([0, 5, 28])\n        rotate([90, 0, 0])\n        cylinder(h = 8, d1 = 20, d2 = 25);\n        \n        // Collar spikes\n        for (a = [0:30:360]) {\n            color(color_yellow)\n            rotate([0, 0, a])\n            translate([10, 5, 28])\n            scale([0.3, 1, 0.3])\n            rotate([90, 0, 0])\n            cylinder(h = 8, d1 = 3, d2 = 1);\n        }\n        \n        // Chest fur\n        color(color_yellow)\n        translate([0, 10, 22])\n        scale([0.8, 0.8, 1.2])\n        sphere(d = 15);\n        \n        // Fur tuft on head\n        color(color_yellow)\n        translate([0, 18, 45])\n        scale([0.8, 0.5, 1.5])\n        sphere(d = 8);\n    }\n}\n\n// Render the model\nflareon();",
    "renders": true
  },
  {
    "pokemon": "porygon",
    "openscad_code": "// Porygon - Realistic Style, Medium Complexity\n// Size: 80mm tall\n\n// Main Colors\ncolor_pink = [255/255, 105/255, 180/255];\ncolor_blue = [0/255, 191/255, 255/255];\ncolor_red = [220/255, 20/255, 60/255];\ncolor_white = [1, 1, 1];\ncolor_black = [0.1, 0.1, 0.1];\n\n// Main body module\nmodule porygon_body() {\n    // Central body - hexagonal prism\n    color(color_pink) {\n        linear_extrude(height = 25, center = true)\n            polygon(points = [\n                [0, -20], [17, -10], [17, 10], \n                [0, 20], [-17, 10], [-17, -10]\n            ]);\n        \n        // Top connector\n        translate([0, 0, 12.5]) \n            cube([10, 10, 5], center = true);\n    }\n}\n\n// Head module\nmodule porygon_head() {\n    color(color_pink) {\n        // Main head block\n        translate([0, 0, 25])\n            cube([30, 25, 20], center = true);\n        \n        // Beak/nose\n        translate([0, 15, 25])\n            cube([8, 8, 12], center = true);\n    }\n    \n    // Eyes\n    color(color_blue) {\n        // Left eye\n        translate([-8, 12, 32])\n            sphere(d = 6);\n        \n        // Right eye\n        translate([8, 12, 32])\n            sphere(d = 6);\n    }\n    \n    // Eye pupils\n    color(color_black) {\n        translate([-8, 12, 35])\n            sphere(d = 2);\n        translate([8, 12, 35])\n            sphere(d = 2);\n    }\n}\n\n// Leg modules\nmodule porygon_legs() {\n    for(side = [-1, 1]) {\n        color(color_blue) {\n            // Upper leg\n            translate([side * 12, -12, -10])\n                rotate([0, 15, 0])\n                cube([8, 8, 15], center = true);\n            \n            // Lower leg/foot\n            translate([side * 10, -12, -20])\n                cube([12, 8, 10], center = true);\n        }\n    }\n}\n\n// Tail module\nmodule porygon_tail() {\n    color(color_blue) {\n        // Tail base\n        translate([0, -25, 0])\n            cube([15, 15, 8], center = true);\n        \n        // Tail segments\n        for(i = [1:3]) {\n            translate([0, -25 - i * 12, 0])\n                cube([15 - i * 3, 10, 8 - i * 1.5], center = true);\n        }\n    }\n}\n\n// Wings module\nmodule porygon_wings() {\n    for(side = [-1, 1]) {\n        color(color_red) {\n            // Upper wing\n            translate([side * 22, 0, 15])\n                rotate([0, 0, side * 30])\n                cube([20, 3, 12], center = true);\n            \n            // Lower wing\n            translate([side * 22, 0, 5])\n                rotate([0, 0, side * 15])\n                cube([15, 3, 10], center = true);\n        }\n    }\n}\n\n// Polygon markings on body\nmodule body_markings() {\n    color(color_blue) {\n        // Front markings\n        translate([0, 10.5, 0])\n            cube([20, 1, 15], center = true);\n        translate([0, 10.5, 10])\n            cube([15, 1, 5], center = true);\n        \n        // Back markings\n        translate([0, -10.5, 0])\n            cube([20, 1, 15], center = true);\n    }\n    \n    color(color_white) {\n        // Stripes\n        for(z = [-5, 5]) {\n            translate([0, 0, z])\n                cube([30, 35, 2], center = true);\n        }\n    }\n}\n\n// Assembly\nmodule porygon() {\n    union() {\n        porygon_body();\n        porygon_head();\n        porygon_legs();\n        porygon_tail();\n        porygon_wings();\n        body_markings();\n    }\n}\n\n// Render the complete model\nscale(0.8) porygon();",
    "renders": true
  },
  {
    "pokemon": "omanyte",
    "openscad_code": "// Omanyte - Fossil Pokemon\n// Realistic style, medium complexity\n\ncolor([0.85,0.85,0.8])        // Shell color\nunion() {\n    // Main spiral shell\n    translate([0,0,-5]) {\n        difference() {\n            // Spiral base\n            union() {\n                for(i=[0:15:359]) {\n                    rotate([0,0,i]) {\n                        translate([20-i*0.08,0,0]) {\n                            rotate_extrude(angle=30, $fn=30) {\n                                translate([i*0.08,0,0]) \n                                    circle(r=10-i*0.03);\n                            }\n                        }\n                    }\n                }\n            }\n            // Hollow center\n            translate([0,0,-2]) \n                cylinder(h=30, r=8, $fn=24);\n        }\n    }\n    \n    // Shell ridges\n    for(i=[0:45:359]) {\n        rotate([0,0,i]) {\n            translate([0,0,-3]) {\n                rotate_extrude(angle=45, $fn=20) {\n                    translate([15,0,0]) \n                        polygon(points=[[0,0],[2,0],[1,5]]);\n                }\n            }\n        }\n    }\n}\n\n// Body\ncolor([0.38,0.51,0.71])       // Blue body color\ntranslate([0,0,12]) {\n    union() {\n        // Main body sphere\n        sphere(r=12, $fn=32);\n        \n        // Tentacles\n        for(i=[0:120:240]) {\n            rotate([0,0,i]) {\n                translate([12,0,0]) {\n                    rotate([0,90,0]) {\n                        cylinder(h=20, r1=3, r2=1.5, $fn=12);\n                        translate([0,0,15]) {\n                            rotate([30,0,0])\n                                cylinder(h=8, r1=1.5, r2=1, $fn=8);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Eye stalks\n        translate([8,6,8]) {\n            sphere(r=2.5, $fn=16);\n            translate([0,0,2.5]) {\n                sphere(r=2, $fn=16);\n                color([1,0,0]) {\n                    translate([0,0,1.5]) \n                        sphere(r=1.2, $fn=12);\n                }\n            }\n        }\n        \n        translate([8,-6,8]) {\n            sphere(r=2.5, $fn=16);\n            translate([0,0,2.5]) {\n                sphere(r=2, $fn=16);\n                color([1,0,0]) {\n                    translate([0,0,1.5]) \n                        sphere(r=1.2, $fn=12);\n                }\n            }\n        }\n    }\n}\n\n// Shell opening details\ncolor([0.9,0.9,0.85])\ndifference() {\n    translate([0,0,-4]) {\n        cylinder(h=10, r=18, $fn=48);\n    }\n    translate([0,0,-5]) {\n        cylinder(h=12, r=16, $fn=48);\n    }\n}",
    "renders": true
  },
  {
    "pokemon": "omastar",
    "openscad_code": "// Omastar Pokemon - Realistic Medium Complexity\n// Overall dimensions: ~80mm height\n\n$fn = 50;\n\n// Main shell body\nmodule shell_body() {\n    color(\"DarkOliveGreen\")\n    union() {\n        // Central spiral shell\n        translate([0, 0, 0])\n        rotate([0, 0, 0])\n        cylinder(h = 40, r1 = 25, r2 = 15, center = true);\n        \n        // Upper shell segments\n        for(i = [0:5]) {\n            rotate([0, 0, i*60])\n            translate([20, 0, 10])\n            rotate([0, 30, 0])\n            scale([1, 0.7, 0.5])\n            cylinder(h = 20, r1 = 12, r2 = 8);\n        }\n        \n        // Lower shell segments\n        for(i = [0:5]) {\n            rotate([0, 0, i*60 + 30])\n            translate([18, 0, -5])\n            rotate([0, -30, 0])\n            scale([1, 0.7, 0.5])\n            cylinder(h = 15, r1 = 10, r2 = 6);\n        }\n    }\n}\n\n// Head with tentacles\nmodule head() {\n    color(\"MediumPurple\")\n    union() {\n        // Main head sphere\n        translate([0, 0, 30])\n        sphere(r = 18);\n        \n        // Eyes\n        translate([-8, 12, 35])\n        color(\"Gold\")\n        sphere(r = 4);\n        \n        translate([8, 12, 35])\n        color(\"Gold\")\n        sphere(r = 4);\n        \n        // Eye pupils\n        translate([-8, 14, 37])\n        color(\"Black\")\n        sphere(r = 2);\n        \n        translate([8, 14, 37])\n        color(\"Black\")\n        sphere(r = 2);\n        \n        // Mouth opening\n        translate([0, 5, 25])\n        rotate([10, 0, 0])\n        color(\"Black\")\n        scale([8, 4, 5])\n        sphere(r = 1);\n    }\n}\n\n// Tentacles\nmodule tentacles() {\n    color(\"MediumPurple\")\n    union() {\n        // Left tentacles\n        for(i = [0:4]) {\n            translate([15*cos(i*40), 15*sin(i*40), 15])\n            rotate([0, 90 - i*10, 0])\n            scale([0.8, 0.8, 1])\n            cylinder(h = 25 + i*3, r1 = 3, r2 = 1.5);\n        }\n        \n        // Right tentacles\n        for(i = [0:4]) {\n            translate([-15*cos(i*40), 15*sin(i*40), 15])\n            rotate([0, 90 + i*10, 0])\n            scale([0.8, 0.8, 1])\n            cylinder(h = 25 + i*3, r1 = 3, r2 = 1.5);\n        }\n    }\n}\n\n// Legs\nmodule legs() {\n    color(\"DarkOliveGreen\")\n    union() {\n        // Front legs\n        translate([10, 5, -15])\n        rotate([0, -20, 15])\n        cylinder(h = 20, r1 = 4, r2 = 3);\n        \n        translate([-10, 5, -15])\n        rotate([0, -20, -15])\n        cylinder(h = 20, r1 = 4, r2 = 3);\n        \n        // Back legs\n        translate([8, -8, -15])\n        rotate([0, 20, 10])\n        cylinder(h = 18, r1 = 4, r2 = 3);\n        \n        translate([-8, -8, -15])\n        rotate([0, 20, -10])\n        cylinder(h = 18, r1 = 4, r2 = 3);\n    }\n}\n\n// Shell spikes\nmodule spikes() {\n    color(\"Gray\")\n    for(i = [0:11]) {\n        rotate([0, 0, i*30])\n        translate([25, 0, 5])\n        rotate([0, 90, 0])\n        cylinder(h = 8, r1 = 2, r2 = 0.5);\n    }\n}\n\n// Assembly\nunion() {\n    shell_body();\n    head();\n    tentacles();\n    legs();\n    spikes();\n}",
    "renders": true
  },
  {
    "pokemon": "kabuto",
    "openscad_code": "// Kabuto in realistic style - medium complexity\n// Overall size ~70mm\n\n// Colors\nshell_color = [0.2, 0.4, 0.4];\neye_color = [1, 0.2, 0.2];\nhighlight_color = [1, 1, 1];\ndome_color = [0.6, 0.8, 0.8];\n\n// Shell segments\nmodule shell_segment(radius, height, angle) {\n    rotate([0, 0, angle])\n    translate([0, radius, 0])\n    rotate([0, 90, 0])\n    cylinder(h=height, r1=radius/2, r2=0, $fn=8);\n}\n\n// Main shell dome\nmodule shell_dome() {\n    color(dome_color) {\n        // Main dome\n        difference() {\n            sphere(d=50, $fn=64);\n            translate([0, 0, 25])\n            cube([60, 60, 30], center=true);\n        }\n        \n        // Shell segments\n        for(i=[0:30:330]) {\n            color(shell_color) {\n                shell_segment(22, 15, i);\n            }\n        }\n        \n        // Center ridge\n        translate([0, -25, 0])\n        rotate([0, 90, 0])\n        cylinder(h=50, r1=3, r2=3, $fn=8);\n    }\n}\n\n// Eye stalk\nmodule eye_stalk(x_pos) {\n    color(shell_color) {\n        // Stalk\n        translate([x_pos, 0, 5])\n        rotate([0, 15, 0])\n        cylinder(h=15, r1=4, r2=3, $fn=16);\n        \n        // Eye\n        translate([x_pos, 0, 20])\n        rotate([0, 15, 0])\n        color(eye_color)\n        sphere(d=6, $fn=16);\n        \n        // Eye highlight\n        translate([x_pos+2, 1, 21])\n        rotate([0, 15, 0])\n        color(highlight_color)\n        sphere(d=2, $fn=8);\n    }\n}\n\n// Body segment\nmodule body_segment() {\n    color(shell_color) {\n        // Main body\n        translate([0, 0, -15])\n        scale([1, 0.8, 0.6])\n        sphere(d=40, $fn=32);\n        \n        // Underside\n        translate([0, 0, -25])\n        rotate([0, 180, 0])\n        cylinder(h=10, r1=15, r2=0, $fn=16);\n    }\n}\n\n// Leg\nmodule leg(x, y, angle, length) {\n    color(shell_color) {\n        // Upper segment\n        translate([x, y, -20])\n        rotate([0, 0, angle])\n        rotate([45, 0, 0])\n        cylinder(h=length/2, r1=3, r2=2.5, $fn=8);\n        \n        // Lower segment\n        translate([x+cos(angle)*length/2, y+sin(angle)*length/2, -20-length/2])\n        rotate([0, 0, angle])\n        rotate([45, 0, 0])\n        cylinder(h=length/2, r1=2.5, r2=2, $fn=8);\n        \n        // Foot\n        translate([x+cos(angle)*length, y+sin(angle)*length, -20-length])\n        rotate([0, 0, angle])\n        rotate([45, 0, 0])\n        sphere(d=4, $fn=8);\n    }\n}\n\n// Tail segment\nmodule tail_segment() {\n    color(shell_color) {\n        // Main tail\n        translate([0, -25, -15])\n        rotate([0, 15, 0])\n        cylinder(h=20, r1=5, r2=3, $fn=8);\n        \n        // Tail tip\n        translate([0, -40, -12])\n        sphere(d=4, $fn=8);\n    }\n}\n\n// Assembly\nunion() {\n    // Main shell\n    shell_dome();\n    \n    // Body under shell\n    body_segment();\n    \n    // Eye stalks\n    eye_stalk(10);\n    eye_stalk(-10);\n    \n    // Legs - 6 total\n    leg(15, 10, 30, 15);\n    leg(15, -10, -30, 15);\n    leg(0, 15, 0, 18);\n    leg(0, -15, 0, 18);\n    leg(-15, 10, -30, 15);\n    leg(-15, -10, 30, 15);\n    \n    // Tail\n    tail_segment();\n}",
    "renders": true
  },
  {
    "pokemon": "kabutops",
    "openscad_code": "// Kabutops - Realistic Style, Medium Complexity\n// Overall size: ~70mm length, 40mm height, 30mm width\n\n// Colors\ncolor_body = [0.2,0.3,0.4];\ncolor_shell = [0.6,0.65,0.7];\ncolor_blade = [0.8,0.8,0.85];\ncolor_eye = [0.9,0.1,0.1];\n\n// Main module\nmodule kabutops() {\n    union() {\n        // Body\n        body();\n        \n        // Head with crest\n        translate([0,25,15]) rotate([0,0,0]) head();\n        \n        // Arms with blades\n        translate([12,15,10]) rotate([0,0,-30]) arm(true);\n        translate([-12,15,10]) rotate([0,0,30]) arm(false);\n        \n        // Legs\n        translate([8,-10,0]) rotate([0,0,20]) leg();\n        translate([-8,-10,0]) rotate([0,0,-20]) leg();\n        \n        // Tail\n        translate([0,-25,8]) rotate([0,0,0]) tail();\n    }\n}\n\n// Main body\nmodule body() {\n    color(color_body) {\n        // Thorax\n        translate([0,0,8]) scale([1,1.5,0.8]) sphere(d=25);\n        \n        // Abdomen segments\n        for(i=[0:2]) {\n            translate([0,-8-i*6,6-i*2]) \n            scale([1-0.1*i,1-0.1*i,0.6-0.1*i]) \n            sphere(d=20-i*3);\n        }\n        \n        // Back shell\n        translate([0,0,12]) rotate([90,0,0]) \n        scale([1.2,1.8,0.5]) cylinder(h=20,d1=30,d2=20);\n    }\n}\n\n// Head module\nmodule head() {\n    color(color_body) {\n        // Main head\n        scale([1,0.8,0.7]) sphere(d=18);\n        \n        // Eyes\n        color(color_eye) {\n            translate([4,6,3]) sphere(d=3);\n            translate([-4,6,3]) sphere(d=3);\n        }\n        \n        // Crest\n        color(color_shell) {\n            translate([0,12,0]) rotate([0,20,0]) \n            scale([0.3,1,0.1]) cube([20,15,2],center=true);\n            translate([0,12,3]) rotate([0,10,0]) \n            scale([0.2,0.8,0.1]) cube([15,12,2],center=true);\n        }\n        \n        // Mandibles\n        translate([3,2,-2]) rotate([20,0,15]) cube([3,8,2]);\n        translate([-3,2,-2]) rotate([20,0,-15]) cube([3,8,2]);\n    }\n}\n\n// Arm with blade\nmodule arm(left=true) {\n    color(color_body) {\n        // Upper arm\n        rotate([0,0,left?-30:30]) \n        translate([0,0,5]) cylinder(h=15,d=5);\n        \n        // Blade\n        color(color_blade) {\n            translate([0,10,0]) rotate([0,90,left?20:-20]) \n            linear_extrude(height=2) \n            polygon(points=[[0,0],[10,25],[0,20],[-10,25]]);\n        }\n    }\n}\n\n// Leg\nmodule leg() {\n    color(color_body) {\n        // Thigh\n        cylinder(h=12,d=6);\n        \n        // Lower leg\n        translate([0,-8,0]) rotate([45,0,0]) \n        cylinder(h=15,d=5);\n        \n        // Foot\n        translate([0,-18,0]) rotate([90,0,0]) \n        scale([1,1.5,0.5]) cylinder(h=8,d=6);\n    }\n}\n\n// Tail\nmodule tail() {\n    color(color_body) {\n        // Tail segments\n        for(i=[0:3]) {\n            translate([0,-i*8,2-i*2]) \n            scale([1-0.15*i,1-0.15*i,1]) \n            sphere(d=12-i*3);\n        }\n    }\n}\n\n// Render the model\nkabutops();",
    "renders": true
  },
  {
    "pokemon": "aerodactyl",
    "openscad_code": "// Aerodactyl - OpenSCAD Realistic Style\n// Scale: ~85mm wingspan, 3D-printable\n\n// Main colors\nrock = [0.6,0.52,0.46];\npurple = [0.33,0.22,0.52];\nwing_mem = [0.75,0.7,0.65];\neye = [0.15,0.05,0.7];\n\n// Overall scale\nscale(0.7) {\n\n// Head\nunion() {\n    color(rock)\n    translate([0,0,25]) rotate([0,25,0])\n        scale([1.3,1,1.1]) sphere(8,$fn=20);\n\n    // Snout\n    color(rock)\n    translate([10,0,22]) rotate([0,35,0])\n        cylinder(h=10,r1=4,r2=2,$fn=8);\n\n    // Crest horns\n    color(rock)\n    for(a=[-35:35:70])\n        translate([0,0,32]) rotate([0,a,0])\n            scale([1,1,2.5]) cylinder(h=4,r1=1.5,r2=0,$fn=6);\n\n    // Eyes\n    color(eye)\n    for(x=[-3,3])\n        translate([x,5.5,26]) rotate([0,25,0])\n            sphere(1.5,$fn=10);\n\n    // Mouth\n    color([0.1,0.1,0.1])\n    translate([11,0,20]) rotate([0,35,0])\n        difference() {\n            cube([8,2,1],center=true);\n            translate([0,0,-0.6]) cube([7,1.8,1],center=true);\n        }\n\n    // Neck\n    color(rock)\n    translate([-5,0,18]) rotate([0,-20,0])\n        cylinder(h=12,r1=3.5,r2=4,$fn=12);\n}\n\n// Body\nunion() {\n    color(rock)\n    translate([-15,0,15]) rotate([0,-10,0])\n        scale([1.2,0.9,1.6]) sphere(8,$fn=20);\n\n    // Belly plates\n    color(purple)\n    for(i=[-6:6:12])\n        translate([i,0,8]) rotate([0,-10,0])\n            scale([1.2,0.4,0.3]) sphere(3,$fn=8);\n}\n\n// Wings - left\nunion() {\n    color(wing_mem)\n    translate([-20,0,22]) rotate([0,-20,-60])\n        scale([0.2,1,0.8]) cylinder(h=35,r1=12,r2=0,$fn=3);\n\n    color(rock)\n    for(i=[0:5:25])\n        translate([-20-i,0,22-i*0.7]) rotate([0,-20,-60+i*0.5])\n            scale([0.2,1,0.8]) cylinder(h=2,r1=3,r2=2,$fn=6);\n\n    // Wing finger claws\n    color(rock)\n    for(p=[[-35,0,13],[-40,0,11],[-45,0,9]])\n        translate(p) rotate([0,-20,-65])\n            scale([0.4,0.4,2]) cylinder(h=3,r1=1,r2=0,$fn=6);\n}\n\n// Wings - right (mirrored)\nmirror([0,1,0]) {\n    union() {\n        color(wing_mem)\n        translate([-20,0,22]) rotate([0,-20,-60])\n            scale([0.2,1,0.8]) cylinder(h=35,r1=12,r2=0,$fn=3);\n\n        color(rock)\n        for(i=[0:5:25])\n            translate([-20-i,0,22-i*0.7]) rotate([0,-20,-60+i*0.5])\n                scale([0.2,1,0.8]) cylinder(h=2,r1=3,r2=2,$fn=6);\n\n        color(rock)\n        for(p=[[-35,0,13],[-40,0,11],[-45,0,9]])\n            translate(p) rotate([0,-20,-65])\n                scale([0.4,0.4,2]) cylinder(h=3,r1=1,r2=0,$fn=6);\n    }\n}\n\n// Tail\nunion() {\n    color(rock)\n    translate([-28,0,14]) rotate([0,-10,0])\n        cylinder(h=20,r1=4,r2=1,$fn=12);\n\n    // Tail vane\n    color(purple)\n    translate([-42,0,14]) rotate([0,0,90])\n        scale([0.1,1.5,0.8]) cylinder(h=8,r1=5,r2=0,$fn=3);\n}\n\n// Legs - left\nmodule leg() {\n    color(rock)\n    union() {\n        translate([-18,-7,5]) rotate([0,15,0])\n            cylinder(h=10,r1=2,r2=1.5,$fn=10);\n        translate([-18,-7,0]) rotate([0,15,0])\n            cylinder(h=3,r1=1.8,r2=2,$fn=10);\n        translate([-18,-7,-2]) rotate([0,15,0])\n            scale([1,2,0.5]) sphere(2,$fn=8);\n    }\n}\n\nleg();\nmirror([0,1,0]) leg();\n\n// Arms - wing supports\nmodule arm() {\n    color(rock)\n    union() {\n        translate([-15,7,16]) rotate([0,30,0])\n            cylinder(h=8,r1=2,r2=1.5,$fn=10);\n        translate([-15,7,12]) rotate([0,30,0])\n            sphere(2,$fn=8);\n    }\n}\n\narm();\nmirror([0,1,0]) arm();\n\n}",
    "renders": true
  },
  {
    "pokemon": "snorlax",
    "openscad_code": "// Snorlax - Realistic Medium Complexity\n// 3D printable model, ~75mm height\n\n$fn = 32;\nscale_factor = 0.75;\n\nmodule snorlax_body() {\n    color(\"mediumaquamarine\")\n    union() {\n        // Main body\n        translate([0, 0, 30])\n        scale([1.2, 1, 0.9])\n        sphere(d = 60);\n        \n        // Belly\n        translate([0, 5, 15])\n        scale([1.1, 0.8, 0.6])\n        sphere(d = 55);\n        \n        // Chest accent\n        color(\"beige\")\n        translate([0, 12, 20])\n        scale([0.8, 0.6, 0.5])\n        sphere(d = 45);\n    }\n}\n\nmodule snorlax_head() {\n    color(\"mediumaquamarine\")\n    union() {\n        // Head\n        translate([0, -35, 50])\n        scale([0.9, 0.8, 0.9])\n        sphere(d = 40);\n        \n        // Face\n        color(\"beige\")\n        translate([0, -45, 50])\n        scale([0.7, 0.6, 0.6])\n        sphere(d = 35);\n        \n        // Ears\n        color(\"mediumaquamarine\")\n        translate([-15, -35, 65])\n        rotate([0, 15, 0])\n        scale([0.8, 0.5, 1.2])\n        cylinder(d1 = 12, d2 = 18, h = 15);\n        \n        mirror([1, 0, 0])\n        translate([-15, -35, 65])\n        rotate([0, 15, 0])\n        scale([0.8, 0.5, 1.2])\n        cylinder(d1 = 12, d2 = 18, h = 15);\n        \n        // Eyes\n        color(\"black\")\n        translate([-8, -50, 55])\n        sphere(d = 4);\n        \n        translate([8, -50, 55])\n        sphere(d = 4);\n        \n        // Eye whites\n        color(\"white\")\n        translate([-8, -48, 55])\n        sphere(d = 2);\n        \n        translate([8, -48, 55])\n        sphere(d = 2);\n        \n        // Nose\n        color(\"black\")\n        translate([0, -52, 52])\n        sphere(d = 3);\n        \n        // Mouth\n        color(\"black\")\n        translate([0, -50, 48])\n        scale([1, 0.5, 0.3])\n        sphere(d = 8);\n    }\n}\n\nmodule snorlax_arms() {\n    color(\"mediumaquamarine\")\n    union() {\n        // Left arm\n        translate([-30, -15, 35])\n        rotate([0, 0, -20])\n        scale([0.8, 0.8, 1.2])\n        cylinder(d = 18, h = 25);\n        \n        // Left hand\n        translate([-35, -15, 20])\n        sphere(d = 20);\n        \n        // Right arm\n        translate([30, -15, 35])\n        rotate([0, 0, 20])\n        scale([0.8, 0.8, 1.2])\n        cylinder(d = 18, h = 25);\n        \n        // Right hand\n        translate([35, -15, 20])\n        sphere(d = 20);\n    }\n}\n\nmodule snorlax_legs() {\n    color(\"mediumaquamarine\")\n    union() {\n        // Left leg\n        translate([-15, 20, 15])\n        rotate([0, 0, 10])\n        scale([0.9, 1, 1.1])\n        cylinder(d = 20, h = 25);\n        \n        // Left foot\n        translate([-15, 25, 5])\n        scale([1.2, 1.5, 0.6])\n        sphere(d = 22);\n        \n        // Right leg\n        translate([15, 20, 15])\n        rotate([0, 0, -10])\n        scale([0.9, 1, 1.1])\n        cylinder(d = 20, h = 25);\n        \n        // Right foot\n        translate([15, 25, 5])\n        scale([1.2, 1.5, 0.6])\n        sphere(d = 22);\n    }\n}\n\nmodule snorlax_markings() {\n    color(\"darkslategray\")\n    union() {\n        // Claws on feet\n        for(i = [-1, 1]) {\n            for(j = [-1, 0, 1]) {\n                translate([i * 20 + j * 3, 25 + j * 2, 3])\n                scale([0.5, 0.3, 1])\n                sphere(d = 4);\n            }\n        }\n        \n        // Face markings\n        color(\"darkslategray\")\n        translate([0, -45, 45])\n        scale([1.2, 0.3, 0.3])\n        sphere(d = 20);\n    }\n}\n\n// Assemble Snorlax\nscale([scale_factor, scale_factor, scale_factor])\nunion() {\n    snorlax_body();\n    snorlax_head();\n    snorlax_arms();\n    snorlax_legs();\n    snorlax_markings();\n}",
    "renders": true
  },
  {
    "pokemon": "articuno",
    "openscad_code": "// Articuno 3D Model - Realistic Style\n// Wingspan ~80mm, height ~60mm\n\n// Colors\nc_blue = [0.2,0.5,0.9];\nc_ice = [0.8,0.9,1];\nc_white = [0.95,0.95,1];\nc_red = [0.8,0.2,0.2];\nc_yellow = [1,0.8,0];\n\nmodule body() {\n    color(c_blue) {\n        // Main torso\n        translate([0,0,15]) scale([1,0.7,1.2]) sphere(d=30);\n        \n        // Chest feather layer\n        translate([0,-10,12]) scale([0.8,0.5,0.5]) sphere(d=20);\n        \n        // Tail base\n        translate([0,0,5]) cylinder(d1=25,d2=15,h=10);\n    }\n}\n\nmodule head() {\n    color(c_blue) {\n        // Main head\n        translate([0,0,30]) scale([1,0.8,1.1]) sphere(d=20);\n        \n        // Beak\n        translate([0,-15,30]) rotate([0,90,0]) cylinder(d1=8,d2=3,h=15);\n        color(c_red) translate([0,-15,30]) rotate([0,90,0]) cylinder(d1=6,d2=2,h=12);\n        \n        // Crest feathers\n        for(i=[0:3]) {\n            rotate([0,0,i*90-135]) \n            translate([0,0,40]) rotate([0,30+i*10,0]) \n            scale([0.2,1,0.1]) cylinder(d=8,h=10);\n        }\n    }\n}\n\nmodule eyes() {\n    color(c_white) {\n        translate([-5,-9,32]) sphere(d=4);\n        translate([5,-9,32]) sphere(d=4);\n    }\n    color(c_red) {\n        translate([-5,-11,32]) sphere(d=2);\n        translate([5,-11,32]) sphere(d=2);\n    }\n}\n\nmodule wings() {\n    module wing() {\n        color(c_blue) {\n            // Main wing\n            translate([0,0,0]) scale([1,0.1,0.6]) sphere(d=40);\n            \n            // Ice crystal details\n            color(c_ice) {\n                for(i=[0:2]) {\n                    translate([5+i*10,0,0]) scale([0.3,1,0.3]) sphere(d=5);\n                }\n            }\n        }\n    }\n    \n    // Left wing\n    translate([-20,0,25]) rotate([0,-20,0]) wing();\n    \n    // Right wing\n    translate([20,0,25]) rotate([0,20,180]) wing();\n}\n\nmodule tail() {\n    color(c_ice) {\n        for(i=[0:2]) {\n            rotate([0,0,i*120]) \n            translate([0,0,5]) \n            scale([0.3,0.3,1.2]) \n            cylinder(d1=5,d2=2,h=30);\n        }\n    }\n    color(c_blue) {\n        translate([0,0,0]) cylinder(d1=15,d2=5,h=30);\n    }\n}\n\nmodule legs() {\n    module leg() {\n        color(c_blue) {\n            translate([0,0,0]) cylinder(d=4,h=12);\n            translate([0,0,-6]) sphere(d=6);\n        }\n    }\n    \n    // Left leg\n    translate([-8,0,5]) leg();\n    \n    // Right leg\n    translate([8,0,5]) leg();\n}\n\nmodule feet() {\n    module foot() {\n        color(c_yellow) {\n            for(i=[-1:1]) {\n                translate([i*3,0,-10]) cylinder(d=2,h=5);\n            }\n        }\n    }\n    \n    // Left foot\n    translate([-8,0,0]) foot();\n    \n    // Right foot\n    translate([8,0,0]) foot();\n}\n\n// Main assembly\nunion() {\n    body();\n    head();\n    eyes();\n    wings();\n    tail();\n    legs();\n    feet();\n}",
    "renders": true
  },
  {
    "pokemon": "zapdos",
    "openscad_code": "// Zapdos Pokemon - Realistic Style\n// Medium complexity OpenSCAD model for 3D printing\n\n// Color definitions\ncolor_yellow = [1, 0.8, 0];\ncolor_orange = [1, 0.5, 0];\ncolor_black = [0.1, 0.1, 0.1];\ncolor_white = [1, 1, 1];\ncolor_red = [0.8, 0.1, 0.1];\n\n// Main module\nmodule zapdos() {\n    // Body\n    color(color_yellow)\n    union() {\n        // Main torso\n        translate([0, 0, 10])\n            scale([1, 0.7, 1.2])\n                sphere(d=30);\n        \n        // Chest plate\n        translate([0, 8, 12])\n            scale([0.8, 0.3, 0.8])\n                sphere(d=25);\n    }\n    \n    // Head\n    color(color_yellow)\n    translate([0, 0, 35])\n        sphere(d=22);\n    \n    // Beak\n    color(color_orange)\n    translate([0, 12, 35])\n        rotate([90, 0, 0])\n            cylinder(h=15, d1=8, d2=2);\n    \n    // Eyes\n    color(color_black)\n    union() {\n        translate([5, 9, 37])\n            sphere(d=3);\n        translate([-5, 9, 37])\n            sphere(d=3);\n    }\n    \n    // Eye highlights\n    color(color_white)\n    union() {\n        translate([6, 8.5, 38])\n            sphere(d=1);\n        translate([-4, 8.5, 38])\n            sphere(d=1);\n    }\n    \n    // Crest feathers\n    color(color_yellow)\n    union() {\n        translate([0, -5, 46])\n            rotate([0, 10, 0])\n                cylinder(h=12, d1=4, d2=2);\n        translate([3, -4, 45])\n            rotate([0, 15, 10])\n                cylinder(h=10, d1=3, d2=1);\n        translate([-3, -4, 45])\n            rotate([0, 15, -10])\n                cylinder(h=10, d1=3, d2=1);\n    }\n    \n    // Wings\n    module wing(s=1) {\n        color(color_yellow)\n        union() {\n            // Main wing\n            translate([0, 0, 0])\n                scale([s*25, s*8, s*2])\n                    cube([1, 1, 1]);\n            \n            // Wing feathers\n            for(i = [0:3]) {\n                translate([s*15, 0, -s*i*3])\n                    scale([s*10, s*6-i, s*0.5])\n                        cube([1, 1, 1]);\n            }\n        }\n        \n        // Wing tips\n        color(color_red)\n        translate([s*25, 0, -s*6])\n            scale([s*5, s*3, s*0.5])\n                cube([1, 1, 1]);\n    }\n    \n    // Left wing\n    translate([-15, 0, 25])\n        rotate([0, 0, 30])\n            wing(1);\n    \n    // Right wing\n    translate([15, 0, 25])\n        rotate([0, 0, -30])\n            mirror([1, 0, 0])\n                wing(1);\n    \n    // Tail\n    color(color_yellow)\n    union() {\n        // Main tail\n        translate([0, -15, 15])\n            rotate([90, 0, 0])\n                cylinder(h=25, d1=10, d2=5);\n        \n        // Tail spikes\n        for(i = [0:2]) {\n            color(color_red)\n            rotate([0, 0, i*120])\n                translate([0, -25, 15])\n                    rotate([90, 0, 0])\n                        cylinder(h=8, d1=4, d2=1);\n        }\n    }\n    \n    // Legs\n    module leg() {\n        color(color_yellow)\n        union() {\n            // Upper leg\n            translate([0, 0, 0])\n                cylinder(h=8, d=6);\n            \n            // Lower leg\n            translate([0, 0, -8])\n                cylinder(h=10, d=5);\n            \n            // Foot\n            color(color_orange)\n            translate([0, 3, -18])\n                scale([1.5, 2, 0.5])\n                    sphere(d=8);\n        }\n    }\n    \n    // Left leg\n    translate([-8, 5, 5])\n        rotate([15, 0, 0])\n            leg();\n    \n    // Right leg\n    translate([8, 5, 5])\n        rotate([15, 0, 0])\n            leg();\n    \n    // Electric pattern on chest\n    color(color_orange)\n    union() {\n        translate([0, 13, 20])\n            rotate([90, 0, 0])\n                cylinder(h=1, d=8);\n        \n        for(i = [-1:1]) {\n            translate([i*3, 13, 20])\n                rotate([90, 0, 0])\n                    cylinder(h=1, d=5);\n        }\n    }\n}\n\n// Scale to 80mm height\nscale(0.8)\n    zapdos();",
    "renders": true
  },
  {
    "pokemon": "moltres",
    "openscad_code": "// Moltres Pokemon - Realistic Style - Medium Complexity\n// Designed for 3D printing, approximately 80mm tall\n\n// Colors\nbody_color = \"#FF5F1F\";\nwing_color = \"#FFB347\";\nbeak_color = \"#FFD700\";\neye_color = \"#FFFFFF\";\npupil_color = \"#000000\";\nflame_color = \"#FF4500\";\n\n// Main body module\nmodule moltres_body() {\n    color(body_color)\n    union() {\n        // Torso - elongated oval\n        scale([1.2, 0.8, 1.5])\n            sphere(r=15, $fn=32);\n        \n        // Lower body extension\n        translate([0, 0, -25])\n            scale([1, 0.7, 1.2])\n                cylinder(h=20, r1=15, r2=12, $fn=32);\n        \n        // Neck\n        translate([0, -5, 30])\n            rotate([15, 0, 0])\n                scale([0.8, 0.8, 1.2])\n                    cylinder(h=15, r1=8, r2=6, $fn=16);\n    }\n}\n\n// Head module\nmodule moltres_head() {\n    color(body_color)\n    translate([0, -8, 42])\n    union() {\n        // Main head\n        scale([1.1, 1, 1])\n            sphere(r=12, $fn=32);\n        \n        // Beak\n        color(beak_color)\n        translate([0, -12, -2])\n            rotate([30, 0, 0])\n                scale([1, 0.5, 2])\n                    cylinder(h=15, r1=3, r2=0, $fn=8);\n        \n        // Crest feathers\n        color(flame_color)\n        for(i = [0:2]) {\n            rotate([0, 0, i*60-60])\n                translate([0, 0, 10])\n                    rotate([45-i*10, 0, 0])\n                        scale([0.3, 0.3, 1])\n                            cylinder(h=15, r1=2, r2=0, $fn=6);\n        }\n        \n        // Eyes\n        color(eye_color)\n        translate([5, -6, 2])\n            sphere(r=3, $fn=16);\n        translate([-5, -6, 2])\n            sphere(r=3, $fn=16);\n        \n        color(pupil_color)\n        translate([6, -7, 2.5])\n            sphere(r=1.5, $fn=8);\n        translate([-4, -7, 2.5])\n            sphere(r=1.5, $fn=8);\n    }\n}\n\n// Wing module\nmodule wing() {\n    color(wing_color)\n    difference() {\n        union() {\n            // Main wing\n            translate([0, 0, 0])\n                rotate([0, 0, 0])\n                    scale([2.5, 0.2, 1.2])\n                        sphere(r=10, $fn=32);\n            \n            // Wing tip\n            translate([20, 0, 5])\n                rotate([0, -10, 0])\n                    scale([1.5, 0.2, 0.8])\n                        sphere(r=8, $fn=16);\n        }\n        \n        // Wing feather details\n        for(i = [0:3]) {\n            translate([5+i*5, 0, -5+i*2])\n                rotate([0, 10, 0])\n                    scale([0.5, 0.3, 0.3])\n                        sphere(r=8, $fn=8);\n        }\n    }\n}\n\n// Wings assembly\nmodule wings() {\n    // Right wing\n    translate([15, 0, 15])\n        rotate([0, 0, 30])\n            rotate([0, -20, 0])\n                wing();\n    \n    // Left wing\n    translate([-15, 0, 15])\n        rotate([0, 0, -30])\n            mirror([1, 0, 0])\n                rotate([0, -20, 0])\n                    wing();\n}\n\n// Tail module\nmodule tail() {\n    color(flame_color)\n    translate([0, 10, -35])\n    union() {\n        // Main tail\n        rotate([30, 0, 0])\n            scale([1.2, 0.8, 3])\n                cylinder(h=30, r1=8, r2=15, $fn=32);\n        \n        // Flame details\n        for(i = [0:5]) {\n            rotate([0, 0, i*60])\n                translate([0, 0, 20])\n                    rotate([15, 0, 0])\n                        scale([0.5+sin(i*30)*0.2, 0.5+sin(i*30)*0.2, 1.5])\n                            cylinder(h=15, r1=3, r2=0, $fn=6);\n        }\n    }\n}\n\n// Leg module\nmodule leg() {\n    color(body_color)\n    union() {\n        // Upper leg\n        cylinder(h=15, r1=3, r2=2, $fn=8);\n        \n        // Lower leg\n        translate([0, 0, -15])\n            rotate([30, 0, 0])\n                cylinder(h=12, r1=2, r2=1.5, $fn=8);\n        \n        // Foot\n        translate([0, 0, -27])\n            rotate([45, 0, 0])\n                scale([1.5, 0.8, 0.5])\n                    sphere(r=3, $fn=8);\n    }\n}\n\n// Legs assembly\nmodule legs() {\n    // Right leg\n    translate([8, 0, -20])\n        rotate([15, 0, 0])\n            leg();\n    \n    // Left leg\n    translate([-8, 0, -20])\n        rotate([15, 0, 0])\n            leg();\n}\n\n// Main assembly\nmoltres_body();\nmoltres_head();\nwings();\ntail();\nlegs();",
    "renders": true
  },
  {
    "pokemon": "dratini",
    "openscad_code": "// Dratini OpenSCAD Model - Realistic Style, Medium Complexity\n// 3D printable design with proper wall thickness and no overhangs\n\n// Global parameters\n$fn = 36;\nscale_factor = 0.4;\nbody_length = 60 * scale_factor;\nbody_diameter = 12 * scale_factor;\nhead_diameter = 15 * scale_factor;\near_length = 8 * scale_factor;\ntail_length = 40 * scale_factor;\n\n// Main module\nmodule dratini() {\n    // Body color - light blue\n    color([0.56, 0.77, 0.91]) {\n        // Head\n        translate([0, 0, body_length/2 + head_diameter/2]) {\n            sphere(d = head_diameter);\n            \n            // Snout\n            translate([0, head_diameter/2, 0]) {\n                scale([1, 1.2, 0.8]) {\n                    sphere(d = head_diameter * 0.8);\n                }\n            }\n        }\n        \n        // Main body segments\n        for(i = [0:5]) {\n            translate([0, 0, body_length/2 - i * body_diameter * 0.8]) {\n                sphere(d = body_diameter - i * 0.5);\n            }\n        }\n        \n        // Tail - tapered cylinder with spheres\n        for(i = [0:8]) {\n            translate([0, 0, -body_length/2 - i * body_diameter * 0.6]) {\n                sphere(d = body_diameter * (1 - i * 0.08));\n            }\n        }\n    }\n    \n    // White belly\n    color([0.95, 0.95, 0.9]) {\n        difference() {\n            // Main body\n            translate([0, 0, 0]) {\n                scale([1, 0.8, 1]) {\n                    sphere(d = body_length);\n                }\n            }\n            \n            // Cut bottom half\n            translate([0, 0, -body_length]) {\n                cube([body_length*2, body_length*2, body_length*2], center = true);\n            }\n        }\n    }\n    \n    // Ears\n    color([0.56, 0.77, 0.91]) {\n        // Left ear\n        translate([-head_diameter/2, head_diameter/2, body_length/2 + head_diameter/2 + ear_length/2]) {\n            rotate([0, 30, -30]) {\n                cylinder(h = ear_length, d1 = ear_length/2, d2 = ear_length/4);\n            }\n        }\n        \n        // Right ear\n        translate([head_diameter/2, head_diameter/2, body_length/2 + head_diameter/2 + ear_length/2]) {\n            rotate([0, 30, 30]) {\n                cylinder(h = ear_length, d1 = ear_length/2, d2 = ear_length/4);\n            }\n        }\n    }\n    \n    // Eyes\n    color([0.1, 0.1, 0.1]) {\n        // Left eye\n        translate([-head_diameter/3, head_diameter/2, body_length/2 + head_diameter/2]) {\n            sphere(d = head_diameter/8);\n        }\n        \n        // Right eye\n        translate([head_diameter/3, head_diameter/2, body_length/2 + head_diameter/2]) {\n            sphere(d = head_diameter/8);\n        }\n    }\n    \n    // Nose\n    color([0.2, 0.2, 0.2]) {\n        translate([0, head_diameter * 0.7, body_length/2 + head_diameter/2]) {\n            sphere(d = head_diameter/10);\n        }\n    }\n    \n    // Fin on back\n    color([0.4, 0.6, 0.8]) {\n        for(i = [0:4]) {\n            translate([0, 0, body_length/2 - i * body_diameter * 1.2]) {\n                rotate([0, 0, 0]) {\n                    linear_extrude(height = 2) {\n                        polygon(points = [\n                            [0, -body_diameter/2],\n                            [-body_diameter/3, -body_diameter/2 - 3],\n                            [body_diameter/3, -body_diameter/2 - 3]\n                        ]);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Tail fin\n    color([0.4, 0.6, 0.8]) {\n        translate([0, 0, -body_length/2 - tail_length]) {\n            rotate([0, 0, 0]) {\n                linear_extrude(height = 1.5) {\n                    polygon(points = [\n                        [0, 0],\n                        [-body_diameter/2, -body_diameter * 0.8],\n                        [body_diameter/2, -body_diameter * 0.8]\n                    ]);\n                }\n            }\n        }\n    }\n}\n\n// Generate the model\ndratini();",
    "renders": true
  },
  {
    "pokemon": "dragonair",
    "openscad_code": "// Dragonair Pokemon - Realistic Medium Complexity\n// 3D printable, ~75mm long\n\ncolor([0.8,0.9,1]) // Light blue body\nunion() {\n    // Main body segments\n    body();\n    \n    // Head\n    head();\n    \n    // Wings\n    wings();\n    \n    // Orb on neck\n    neck_orb();\n    \n    // Tail crystal\n    tail_crystal();\n}\n\n// Body module - segmented serpentine body\nmodule body() {\n    // Base body cylinder\n    for(i=[0:15]) {\n        translate([i*5, 0, 5*sin(i*20)])\n        rotate([0,0,i*10])\n        scale([1,1,0.8])\n        sphere(d=12, $fn=8);\n    }\n    \n    // Body segments decreasing in size towards tail\n    for(i=[16:25]) {\n        translate([i*4.5, 0, 5*sin(i*20)])\n        rotate([0,0,i*12])\n        scale([1-(i-16)*0.05,1-(i-16)*0.05,0.7])\n        sphere(d=10-(i-16)*0.5, $fn=8);\n    }\n}\n\n// Head module\nmodule head() {\n    translate([-8,0,15])\n    rotate([0,0,30])\n    union() {\n        // Main head sphere\n        sphere(d=16, $fn=12);\n        \n        // Snout\n        translate([0,0,-8])\n        scale([0.6,0.4,1])\n        sphere(d=12, $fn=8);\n        \n        // Eyes\n        color([0,0,0])\n        for(side=[-1,1]) {\n            translate([side*5, 7, 2])\n            sphere(d=2, $fn=6);\n        }\n        \n        // Ears\n        color([0.8,0.9,1])\n        for(side=[-1,1]) {\n            translate([side*6, 5, 6])\n            rotate([0,side*30,0])\n            scale([0.3,1,1.5])\n            cylinder(h=8, d1=4, d2=2);\n        }\n    }\n}\n\n// Wings module\nmodule wings() {\n    translate([25,0,8])\n    rotate([0,0,-20])\n    for(side=[-1,1]) {\n        translate([0,side*8,0])\n        rotate([0,0,side*30])\n        color([0.8,0.9,1,0.7]) // Slightly transparent\n        union() {\n            // Main wing\n            scale([2,1,0.2])\n            sphere(d=12, $fn=6);\n            \n            // Wing detail\n            translate([8,0,0])\n            scale([1.5,0.7,0.2])\n            sphere(d=8, $fn=5);\n        }\n    }\n}\n\n// Neck orb module\nmodule neck_orb() {\n    translate([5,0,12])\n    color([1,1,0.8]) // White/light yellow\n    sphere(d=6, $fn=12);\n}\n\n// Tail crystal module\nmodule tail_crystal() {\n    translate([105,0,5*sin(25*20)])\n    color([0.3,0.6,1]) // Blue crystal\n    union() {\n        // Main crystal\n        scale([1,1,1.5])\n        sphere(d=8, $fn=6);\n        \n        // Crystal facets\n        for(i=[0:3]) {\n            rotate([0,0,i*90])\n            translate([2,0,0])\n            scale([0.3,1,1.2])\n            sphere(d=4, $fn=3);\n        }\n    }\n}",
    "renders": true
  },
  {
    "pokemon": "dragonite",
    "openscad_code": "// Dragonite - Realistic Medium Complexity\n// Scale: 80mm tall\n\nmodule dragonite() {\n    color(\"orange\") {\n        // Body\n        union() {\n            // Main torso\n            translate([0, 0, 30]) scale([1.2, 0.8, 1.5]) sphere(d=30, $fn=32);\n            \n            // Belly\n            translate([0, -7, 25]) scale([0.8, 0.3, 1.2]) sphere(d=25, $fn=32);\n            \n            // Neck\n            translate([0, 0, 50]) rotate([15, 0, 0]) cylinder(h=15, d1=20, d2=15, $fn=32);\n            \n            // Head\n            translate([0, 0, 65]) sphere(d=20, $fn=32);\n            \n            // Snout\n            translate([0, 8, 65]) rotate([-10, 0, 0]) cylinder(h=12, d1=15, d2=10, $fn=32);\n            \n            // Tail\n            for(i=[0:3]) {\n                rotate([0, 0, i*15]) translate([0, -15-i*3, 30-i*5]) sphere(d=15-i*2, $fn=32);\n            }\n            \n            // Arms\n            for(side=[-1, 1]) {\n                // Upper arm\n                translate([side*12, 0, 40]) rotate([0, side*20, -30*side]) \n                    cylinder(h=15, d1=8, d2=6, $fn=16);\n                \n                // Lower arm\n                translate([side*20, -5, 35]) rotate([0, side*20, -30*side]) \n                    cylinder(h=12, d1=6, d2=8, $fn=16);\n                \n                // Hands\n                translate([side*25, -8, 32]) sphere(d=8, $fn=16);\n            }\n            \n            // Legs\n            for(side=[-1, 1]) {\n                // Thigh\n                translate([side*8, -5, 15]) rotate([0, side*10, 0]) \n                    cylinder(h=15, d1=10, d2=8, $fn=16);\n                \n                // Lower leg\n                translate([side*10, -10, 5]) rotate([0, side*5, 0]) \n                    cylinder(h=12, d1=8, d2=10, $fn=16);\n                \n                // Feet\n                translate([side*12, -12, 0]) scale([1.5, 2, 0.8]) sphere(d=10, $fn=16);\n            }\n            \n            // Wings\n            for(side=[-1, 1]) {\n                // Wing base\n                translate([side*15, -5, 45]) rotate([0, 0, side*30]) \n                    cylinder(h=20, d1=5, d2=3, $fn=16);\n                \n                // Wing membrane\n                translate([side*25, -15, 45]) rotate([0, -30, side*20]) \n                    scale([1, 0.1, 0.8]) sphere(d=25, $fn=32);\n                \n                // Wing fingers\n                for(f=[0:2]) {\n                    rotate([0, 0, side*(30+f*15)]) \n                    translate([side*(25+f*3), -15-f*2, 45-f*3]) \n                    cylinder(h=15-f*2, d1=3, d2=2, $fn=8);\n                }\n            }\n        }\n        \n        // Ears\n        for(side=[-1, 1]) {\n            translate([side*8, 3, 73]) rotate([0, 0, side*30]) \n                cylinder(h=15, d1=5, d2=2, $fn=8);\n        }\n        \n        // Horns\n        for(side=[-1, 1]) {\n            translate([side*8, 5, 80]) rotate([0, 0, side*20]) \n                cylinder(h=10, d1=3, d2=1, $fn=8);\n        }\n    }\n    \n    // Eyes\n    color(\"black\") {\n        for(side=[-1, 1]) {\n            translate([side*5, 8, 67]) sphere(d=3, $fn=16);\n        }\n    }\n    \n    // Mouth\n    color(\"darkorange\") {\n        translate([0, 12, 60]) rotate([30, 0, 0]) \n            scale([1, 0.3, 0.5]) sphere(d=5, $fn=16);\n    }\n    \n    // Belly pattern\n    color(\"lightblue\") {\n        translate([0, -6.5, 25]) scale([0.7, 0.2, 1.1]) sphere(d=24, $fn=32);\n    }\n}\n\ndragonite();",
    "renders": true
  },
  {
    "pokemon": "chikorita",
    "openscad_code": "// Chikorita - Realistic Medium Complexity\n// Overall size ~70mm height\n\n$fa = 1;\n$fs = 0.4;\n\nmodule leaf() {\n    // Main leaf body\n    color(\"forestgreen\")\n    difference() {\n        union() {\n            scale([1, 0.3, 1])\n            sphere(12);\n            translate([0, 0, 8])\n            scale([1, 0.2, 1.3])\n            sphere(8);\n        }\n        // Cutout for leaf shape\n        translate([0, -3, 0])\n        scale([1.2, 0.4, 1.2])\n        sphere(10);\n    }\n}\n\nmodule body() {\n    // Main body\n    color(\"lightgreen\")\n    union() {\n        // Torso\n        translate([0, 0, 10])\n        scale([1, 0.8, 1.2])\n        sphere(15);\n        \n        // Belly\n        color(\"palegreen\")\n        translate([0, -8, 8])\n        scale([0.8, 0.3, 1])\n        sphere(12);\n    }\n}\n\nmodule head() {\n    // Head\n    color(\"lightgreen\")\n    union() {\n        translate([0, 0, 35])\n        scale([0.9, 0.9, 1.1])\n        sphere(12);\n        \n        // Snout\n        translate([0, 10, 32])\n        scale([0.8, 1.2, 0.8])\n        sphere(8);\n    }\n    \n    // Eyes\n    color(\"black\")\n    for(x = [-5, 5]) {\n        translate([x, 10, 38])\n        sphere(2);\n    }\n    \n    // Nostrils\n    color(\"black\")\n    translate([0, 16, 30])\n    sphere(1);\n}\n\nmodule neck_leaf() {\n    // Neck leaf ring\n    color(\"forestgreen\")\n    rotate([-30, 0, 0])\n    translate([0, 0, 28])\n    difference() {\n        cylinder(h = 8, r1 = 9, r2 = 11, $fn = 20);\n        cylinder(h = 10, r1 = 7, r2 = 9, $fn = 20);\n    }\n    \n    // Leaf details\n    for(i = [1:6]) {\n        rotate([0, 0, i * 60])\n        translate([8, 0, 28])\n        rotate([90, 0, 30])\n        scale([0.5, 0.1, 1])\n        cylinder(h = 6, r1 = 2, r2 = 0);\n    }\n}\n\nmodule legs() {\n    // Front legs\n    for(x = [-8, 8]) {\n        color(\"lightgreen\")\n        translate([x, 5, 5])\n        rotate([0, 10, 0])\n        scale([0.4, 0.4, 1])\n        cylinder(h = 18, r = 4);\n        \n        // Feet\n        color(\"lightgreen\")\n        translate([x, 7, -8])\n        scale([1.2, 1.5, 0.6])\n        sphere(4);\n    }\n    \n    // Back legs\n    for(x = [-7, 7]) {\n        color(\"lightgreen\")\n        translate([x, -8, 3])\n        rotate([0, -10, 0])\n        scale([0.45, 0.45, 1])\n        cylinder(h = 15, r = 4);\n        \n        // Feet\n        color(\"lightgreen\")\n        translate([x, -10, -6])\n        scale([1.3, 1.5, 0.6])\n        sphere(4);\n    }\n}\n\nmodule tail() {\n    // Tail\n    color(\"lightgreen\")\n    translate([0, -18, 12])\n    rotate([30, 0, 0])\n    scale([0.7, 0.7, 1.2])\n    sphere(8);\n    \n    // Tail leaf\n    color(\"forestgreen\")\n    translate([0, -25, 18])\n    rotate([0, 0, 180])\n    scale([0.8, 0.3, 0.8])\n    sphere(6);\n}\n\n// Assembly\nunion() {\n    // Main leaf on head\n    translate([0, -2, 48])\n    rotate([0, 0, 0])\n    leaf();\n    \n    // Head\n    head();\n    \n    // Neck leaf\n    neck_leaf();\n    \n    // Body\n    body();\n    \n    // Legs\n    legs();\n    \n    // Tail\n    tail();\n}\n\n// Ground support base\ncolor(\"lightgreen\")\ntranslate([0, 0, -10])\nscale([1.2, 1.2, 0.3])\ncylinder(h = 2, r = 15, $fn = 30);",
    "renders": true
  },
  {
    "pokemon": "bayleef",
    "openscad_code": "// Bayleef Pokemon - Medium Complexity Realistic Style\n// 3D printable figurine with characteristic features\n\n// Color definitions\n$fn = 32;\n\n// Main body module\nmodule bayleef_body() {\n    color([0.4, 0.7, 0.3])  // Leaf green body\n    \n    // Main torso - oval shape\n    union() {\n        // Central body\n        scale([1.2, 1, 1]) \n            sphere(d=35);\n        \n        // Neck connection\n        translate([0, 12, 8])\n            cylinder(h=12, d1=20, d2=15);\n    }\n}\n\n// Head module with leaf features\nmodule bayleef_head() {\n    color([0.4, 0.7, 0.3])\n    \n    union() {\n        // Main head sphere\n        translate([0, 15, 25])\n            scale([0.9, 1.1, 1.1])\n                sphere(d=28);\n        \n        // Snout\n        translate([0, 25, 22])\n            scale([0.8, 0.6, 0.7])\n                sphere(d=15);\n        \n        // Leaf on head\n        color([0.3, 0.6, 0.2])\n        translate([0, 10, 38])\n            rotate([0, 20, 0])\n                scale([1.5, 0.3, 2])\n                    sphere(d=12);\n    }\n    \n    // Eyes\n    color([0.1, 0.1, 0.1])\n    union() {\n        translate([-8, 22, 28])\n            sphere(d=4);\n        translate([8, 22, 28])\n            sphere(d=4);\n    }\n    \n    // Nostrils\n    color([0.2, 0.2, 0.2])\n    union() {\n        translate([-3, 28, 22])\n            sphere(d=2);\n        translate([3, 28, 22])\n            sphere(d=2);\n    }\n}\n\n// Leg modules\nmodule bayleef_legs() {\n    color([0.4, 0.7, 0.3])\n    \n    // Front legs\n    for(x = [-15, 15]) {\n        translate([x, 5, -15])\n            rotate([15, 0, 0])\n                cylinder(h=20, d=8);\n        translate([x, 5, -30])\n            sphere(d=10);\n    }\n    \n    // Back legs\n    for(x = [-12, 12]) {\n        translate([x, -15, -12])\n            rotate([15, 0, 0])\n                cylinder(h=18, d=9);\n        translate([x, -15, -25])\n            sphere(d=11);\n    }\n}\n\n// Tail with leaf cluster\nmodule bayleef_tail() {\n    color([0.3, 0.6, 0.2])\n    \n    translate([0, -25, 0])\n        rotate([75, 0, 0])\n            cylinder(h=20, d1=15, d2=8);\n    \n    // Leaf cluster at tail end\n    for(i = [0:45:360-45]) {\n        rotate([0, 0, i])\n            translate([0, -40, -8])\n                rotate([0, 25, 0])\n                    scale([0.8, 0.2, 1.5])\n                        sphere(d=10);\n    }\n}\n\n// Neck leaves\nmodule neck_leaves() {\n    color([0.3, 0.6, 0.2])\n    \n    for(i = [0:60:360-60]) {\n        rotate([0, 0, i])\n            translate([0, 10, 15])\n                rotate([0, 35, 0])\n                    scale([1.2, 0.2, 1.8])\n                        sphere(d=10);\n    }\n}\n\n// Assembly\ntranslate([0, 0, 30])\n    union() {\n        bayleef_body();\n        bayleef_head();\n        bayleef_legs();\n        bayleef_tail();\n        neck_leaves();\n    }",
    "renders": true
  },
  {
    "pokemon": "meganium",
    "openscad_code": "// Meganium - Realistic style, medium complexity\n// Approx. 80mm tall when printed\n\n// Main colors\n$fa = 2;\n$fs = 0.5;\n\nmodule body() {\n    color([0.5, 0.8, 0.4])  // Light green\n    union() {\n        // Main body - elongated teardrop shape\n        hull() {\n            sphere(d=35, $fn=20);  // Head\n            translate([0, -30, -25]) sphere(d=45, $fn=20);  // Body\n        }\n        \n        // Neck extension\n        translate([0, 12, 0])\n        rotate([0, 15, 0])\n        cylinder(h=20, d1=20, d2=25, $fn=16);\n    }\n}\n\nmodule head_features() {\n    // Snout\n    color([0.4, 0.7, 0.35])\n    translate([0, 22, -5])\n    rotate([45, 0, 0])\n    cylinder(h=15, d1=12, d2=8, $fn=12);\n    \n    // Nostrils\n    color([0.2, 0.3, 0.15])\n    translate([3, 28, -8])\n    sphere(d=2);\n    translate([-3, 28, -8])\n    sphere(d=2);\n    \n    // Eyes\n    color([1, 1, 1])\n    translate([8, 12, 5])\n    sphere(d=6);\n    translate([-8, 12, 5])\n    sphere(d=6);\n    \n    color([0.1, 0.1, 0.1])\n    translate([8.5, 12.5, 6])\n    sphere(d=3);\n    translate([-7.5, 12.5, 6])\n    sphere(d=3);\n}\n\nmodule petals() {\n    // Six petals around neck\n    color([0.9, 0.2, 0.7])  // Pink-magenta\n    for(i=[0:5]) {\n        rotate([0, 0, i*60])\n        translate([0, 5, -5])\n        rotate([0, -30, 0])\n        scale([1, 0.7, 0.3])\n        sphere(d=20, $fn=12);\n    }\n}\n\nmodule ears() {\n    // Leaf-like ears\n    color([0.5, 0.8, 0.4])\n    translate([12, 8, 12])\n    rotate([0, -20, 45])\n    scale([1, 0.3, 1.5])\n    cylinder(h=15, d=8, $fn=3);\n    \n    translate([-12, 8, 12])\n    rotate([0, -20, -45])\n    scale([1, 0.3, 1.5])\n    cylinder(h=15, d=8, $fn=3);\n}\n\nmodule legs() {\n    // Four legs with rounded feet\n    color([0.4, 0.7, 0.35])\n    positions = [[-15, -25, -30], [15, -25, -30], [-12, -35, -30], [12, -35, -30]];\n    \n    for(pos = positions) {\n        translate(pos)\n        union() {\n            // Upper leg\n            cylinder(h=15, d=8, $fn=12);\n            // Lower leg\n            translate([0, 0, -15])\n            cylinder(h=12, d=6, $fn=12);\n            // Foot\n            translate([0, 0, -27])\n            sphere(d=10, $fn=12);\n        }\n    }\n}\n\nmodule tail() {\n    color([0.5, 0.8, 0.4])\n    translate([0, -45, -15])\n    rotate([20, 0, 0])\n    hull() {\n        sphere(d=12, $fn=12);\n        translate([0, -15, 0])\n        sphere(d=8, $fn=12);\n        translate([0, -25, 3])\n        sphere(d=5, $fn=12);\n    }\n    \n    // Leaf tuft on tail\n    color([0.4, 0.7, 0.3])\n    translate([0, -25, 5])\n    rotate([0, 30, 0])\n    scale([1, 0.2, 1.5])\n    cylinder(h=10, d=8, $fn=3);\n}\n\nmodule leaf_pattern() {\n    // Leaf patterns on body\n    color([0.6, 0.9, 0.5])\n    for(i=[0:3]) {\n        rotate([0, 0, i*90])\n        translate([0, -5-i*5, -5-i*2])\n        rotate([15, 0, 0])\n        scale([1, 0.3, 0.8])\n        sphere(d=12, $fn=3);\n    }\n}\n\n// Assemble the model\nunion() {\n    body();\n    head_features();\n    petals();\n    ears();\n    legs();\n    tail();\n    leaf_pattern();\n}",
    "renders": true
  },
  {
    "pokemon": "cyndaquil",
    "openscad_code": "// Cyndaquil - Medium complexity realistic style\n// Overall height ~70mm\n\n$fn = 32;\n\n// Main colors\nmodule body_color() color(\"#E8C090\");\nmodule back_color() color(\"#704030\");\nmodule eye_color() color(\"#202020\");\nmodule flame_color() color(\"#FF8040\");\n\n// Head\nmodule head() {\n    union() {\n        // Main head sphere\n        translate([0, 0, 55]) \n            scale([1, 1.2, 1.1])\n            body_color()\n            sphere(12);\n            \n        // Snout\n        translate([0, 13, 50])\n            scale([0.6, 1.2, 0.8])\n            body_color()\n            sphere(8);\n            \n        // Nose\n        translate([0, 20, 50])\n            eye_color()\n            sphere(1.5);\n    }\n}\n\n// Eyes\nmodule eyes() {\n    // Left eye\n    translate([-5, 8, 58])\n        rotate([0, -15, 0])\n        eye_color()\n        scale([1, 1.2, 0.5])\n        sphere(3);\n        \n    // Right eye\n    translate([5, 8, 58])\n        rotate([0, 15, 0])\n        eye_color()\n        scale([1, 1.2, 0.5])\n        sphere(3);\n}\n\n// Ears\nmodule ears() {\n    // Left ear\n    translate([-8, 0, 65])\n        rotate([0, 0, -25])\n        body_color()\n        scale([0.8, 0.3, 2])\n        sphere(4);\n        \n    // Right ear\n    translate([8, 0, 65])\n        rotate([0, 0, 25])\n        body_color()\n        scale([0.8, 0.3, 2])\n        sphere(4);\n}\n\n// Body\nmodule body() {\n    union() {\n        // Main body\n        translate([0, 0, 30])\n            scale([1.3, 1, 1.5])\n            body_color()\n            sphere(15);\n            \n        // Back pattern\n        translate([0, -10, 40])\n            scale([1.2, 0.5, 1.8])\n            back_color()\n            sphere(10);\n    }\n}\n\n// Arms\nmodule arms() {\n    // Left arm\n    translate([-12, 8, 35])\n        rotate([0, 0, -30])\n        body_color()\n        scale([0.5, 0.5, 1.2])\n        cylinder(r1=3, r2=2, h=8);\n        \n    // Right arm\n    translate([12, 8, 35])\n        rotate([0, 0, 30])\n        body_color()\n        scale([0.5, 0.5, 1.2])\n        cylinder(r1=3, r2=2, h=8);\n}\n\n// Legs\nmodule legs() {\n    // Left leg\n    translate([-6, -5, 15])\n        body_color()\n        scale([0.8, 0.8, 1.2])\n        sphere(5);\n        \n    // Right leg\n    translate([6, -5, 15])\n        body_color()\n        scale([0.8, 0.8, 1.2])\n        sphere(5);\n}\n\n// Flame vents\nmodule flame_vents() {\n    for(i = [-30:10:30]) {\n        translate([i*0.3, -12, 45 + i*0.5])\n            rotate([0, 0, i])\n            back_color()\n            scale([0.8, 0.3, 0.2])\n            cylinder(r1=2, r2=1, h=3);\n    }\n}\n\n// Flame\nmodule flame() {\n    flame_color() {\n        // Base\n        translate([0, -12, 48])\n            scale([1, 0.5, 1])\n            sphere(4);\n            \n        // Flames\n        for(i = [0:30:150]) {\n            rotate([0, 0, i])\n            translate([0, -12, 52])\n                scale([0.5, 0.5, 1 + sin(i)*0.3])\n                cylinder(r1=3, r2=0, h=12);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    head();\n    eyes();\n    ears();\n    body();\n    arms();\n    legs();\n    flame_vents();\n    flame();\n}",
    "renders": true
  },
  {
    "pokemon": "quilava",
    "openscad_code": "$fn=32;\n\n// Overall scale factor – final model ~75 mm tall\nscale(0.7){\n    //Main body colour\n    color([0.8,0.4,0.1])\n    union(){\n        /*==========  HEAD  ==========*/\n        translate([0,0,55])\n        rotate([0,0,0])\n        sphere(12);\n\n        /*==========  SNOUT  ==========*/\n        translate([0,-12,53])\n        rotate([25,0,0])\n        scale([1,1.2,0.7])\n        cylinder(h=10, r1=8, r2=4);\n\n        /*==========  NECK / BODY  ==========*/\n        translate([0,0,40])\n        rotate([-10,0,0])\n        cylinder(h=20, r1=10, r2=14);\n\n        /*==========  LOWER BODY / BELLY  ==========*/\n        translate([0,0,25])\n        scale([1.2,0.8,1])\n        sphere(15);\n\n        /*==========  LEGS  ==========*/\n        module leg(x,z){\n            translate([x,0,z])\n            rotate([0,0,0])\n            cylinder(h=15, r=5);\n            translate([x,0,z-7.5])\n            sphere(5);\n        }\n        leg(-8,20);\n        leg(8,20);\n\n        /*==========  ARMS  ==========*/\n        module arm(x,y,z,rx){\n            translate([x,y,z])\n            rotate([rx,0,x>0?15:-15])\n            cylinder(h=10, r=3);\n            translate([x,y+8*cos(rx),z+8*sin(rx)])\n            sphere(4);\n        }\n        arm(-12,0,40,-45);\n        arm(12,0,40,-45);\n\n        /*==========  EARS  ==========*/\n        module ear(x){\n            translate([x,0,60])\n            rotate([0,0,x>0?20:-20])\n            cylinder(h=15, r1=4, r2=2);\n        }\n        ear(-8);\n        ear(8);\n\n        /*==========  QUILLS / FLAME CREST  ==========*/\n        color([1,0.3,0])\n        module quill(h){\n            translate([0,0,h])\n            rotate([0,0,0])\n            cylinder(h=20, r1=3, r2=1);\n        }\n        for(i=[-2:2]){\n            translate([i*3,0,0])\n            quill(70+i*2);\n        }\n\n        /*==========  TAIL  ==========*/\n        translate([0,18,32])\n        rotate([0,90,90])\n        cylinder(h=25, r1=6, r2=3);\n\n        /*==========  FLAME TIP  ==========*/\n        color([1,0.3,0])\n        translate([0,18+25,32])\n        sphere(5);\n    }\n\n    /*==========  EYES  ==========*/\n    color([0.1,0.1,0.1])\n    translate([-5,-10,57])\n    sphere(2);\n    translate([5,-10,57])\n    sphere(2);\n\n    /*==========  NOSTRILS  ==========*/\n    translate([-2,-19,55])\n    sphere(1);\n    translate([2,-19,55])\n    sphere(1);\n\n    /*==========  BACK QUILL DETAIL  ==========*/\n    color([0.7,0.7,0.7])\n    for(i=[-3:3]){\n        if(abs(i)!=0){\n            translate([i*4,0,55-abs(i)*4])\n            rotate([0,0,0])\n            cube([2,2,5],center=true);\n        }\n    }\n}",
    "renders": true
  },
  {
    "pokemon": "typhlosion",
    "openscad_code": "// Typhlosion Pokemon - Realistic Medium Complexity\n// Dimensions: ~70mm tall, 3D printable design\n\n$fn = 32;\n\n// Main colors\ncolor_body = \"#8B4513\";\ncolor_neck = \"#D2691E\";\ncolor_fire = \"#FF4500\";\ncolor_face = \"#F5DEB3\";\ncolor_black = \"#2F2F2F\";\ncolor_nose = \"#8B0000\";\n\n// Main body module\nmodule typhlosion_body() {\n    color(color_body) {\n        // Torso\n        translate([0, 0, 25])\n            scale([1.2, 1, 1.5])\n            sphere(15);\n        \n        // Lower body\n        translate([0, 0, 10])\n            scale([1.1, 0.9, 1.2])\n            sphere(12);\n    }\n}\n\n// Head module\nmodule typhlosion_head() {\n    color(color_face) {\n        // Main head\n        translate([0, -15, 45])\n            scale([1.1, 1.3, 1.2])\n            sphere(12);\n        \n        // Snout\n        translate([0, -25, 43])\n            scale([0.8, 1, 0.6])\n            cylinder(h=10, r1=8, r2=5);\n    }\n    \n    // Ears\n    color(color_body) {\n        // Left ear\n        translate([-10, -5, 55])\n            rotate([0, -20, -30])\n            scale([0.3, 0.3, 1.5])\n            cylinder(h=15, r=5);\n        \n        // Right ear\n        translate([10, -5, 55])\n            rotate([0, -20, 30])\n            scale([0.3, 0.3, 1.5])\n            cylinder(h=15, r=5);\n    }\n    \n    // Eyes\n    color(color_black) {\n        // Left eye\n        translate([-5, -20, 47])\n            scale([1, 1.5, 0.5])\n            sphere(2);\n        \n        // Right eye\n        translate([5, -20, 47])\n            scale([1, 1.5, 0.5])\n            sphere(2);\n    }\n    \n    // Nose\n    color(color_nose) {\n        translate([0, -28, 43])\n            sphere(1.5);\n    }\n}\n\n// Neck mane\nmodule typhlosion_neck_mane() {\n    color(color_neck) {\n        for(i=[0:30:330]) {\n            rotate([0, 0, i])\n            translate([8, -5, 38])\n                rotate([90, 0, 0])\n                scale([0.8, 2, 0.3])\n                cylinder(h=10, r=3);\n        }\n    }\n}\n\n// Arms\nmodule typhlosion_arms() {\n    color(color_body) {\n        // Left arm\n        translate([-18, 0, 30])\n            rotate([0, 30, -20])\n            scale([0.8, 0.8, 1.2])\n            cylinder(h=15, r=4);\n        \n        // Right arm\n        translate([18, 0, 30])\n            rotate([0, -30, 20])\n            scale([0.8, 0.8, 1.2])\n            cylinder(h=15, r=4);\n        \n        // Hands\n        translate([-22, 0, 15])\n            sphere(5);\n        \n        translate([22, 0, 15])\n            sphere(5);\n    }\n}\n\n// Legs\nmodule typhlosion_legs() {\n    color(color_body) {\n        // Left leg\n        translate([-8, 0, 10])\n            scale([0.9, 0.9, 1.2])\n            cylinder(h=15, r=5);\n        \n        // Right leg\n        translate([8, 0, 10])\n            scale([0.9, 0.9, 1.2])\n            cylinder(h=15, r=5);\n        \n        // Feet\n        translate([-8, 2, 0])\n            scale([1.2, 1.5, 0.8])\n            sphere(5);\n        \n        translate([8, 2, 0])\n            scale([1.2, 1.5, 0.8])\n            sphere(5);\n    }\n}\n\n// Fire collar\nmodule typhlosion_fire_collar() {\n    color(color_fire) {\n        // Main fire around neck\n        translate([0, -10, 40])\n            rotate([90, 0, 0])\n            cylinder(h=8, r1=15, r2=20);\n        \n        // Fire spikes\n        for(i=[0:45:315]) {\n            rotate([0, 0, i])\n            translate([0, -10, 40])\n                rotate([90, 0, 0])\n                scale([0.5, 2, 0.5])\n                cylinder(h=10, r=5);\n        }\n    }\n}\n\n// Tail\nmodule typhlosion_tail() {\n    color(color_body) {\n        // Tail base\n        translate([0, 15, 20])\n            rotate([30, 0, 0])\n            scale([0.8, 0.8, 1.5])\n            cylinder(h=25, r=6);\n        \n        // Tail fire\n        color(color_fire) {\n            translate([0, 15, 35])\n                rotate([30, 0, 0])\n                cylinder(h=15, r1=8, r2=12);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    typhlosion_body();\n    typhlosion_head();\n    typhlosion_neck_mane();\n    typhlosion_arms();\n    typhlosion_legs();\n    typhlosion_fire_collar();\n    typhlosion_tail();\n}",
    "renders": true
  },
  {
    "pokemon": "totodile",
    "openscad_code": "// Totodile Pokemon - Medium complexity realistic style\n// Dimensions: ~60mm tall, 3D printable\n\n// Main colors\ncolor_body = [0, 0.7, 0.9];      // Blue\ncolor_belly = [0.9, 0.8, 0.6];   // Light yellow\ncolor_red = [0.9, 0.2, 0.2];     // Red accents\ncolor_black = [0.1, 0.1, 0.1];   // Eyes/nose\n\n// Main body\nmodule body() {\n    color(color_body)\n    union() {\n        // Torso - egg shaped\n        scale([1.2, 1, 1.3])\n        sphere(d=30, $fn=32);\n        \n        // Belly\n        color(color_belly)\n        translate([0, -8, -5])\n        scale([0.7, 0.3, 0.6])\n        sphere(d=25, $fn=32);\n    }\n}\n\n// Head\nmodule head() {\n    color(color_body)\n    union() {\n        // Main head shape\n        translate([0, 20, 15])\n        scale([1.1, 1.2, 1])\n        sphere(d=25, $fn=32);\n        \n        // Snout\n        translate([0, 30, 10])\n        scale([0.8, 0.6, 0.7])\n        sphere(d=20, $fn=32);\n        \n        // Eyes - black spheres\n        color(color_black)\n        translate([-7, 25, 18])\n        sphere(d=4, $fn=16);\n        translate([7, 25, 18])\n        sphere(d=4, $fn=16);\n        \n        // Eye ridges\n        color(color_body)\n        translate([-7, 23, 22])\n        rotate([0, 30, 0])\n        scale([0.5, 0.8, 0.3])\n        cube([10, 5, 3], center=true);\n        translate([7, 23, 22])\n        rotate([0, -30, 0])\n        scale([0.5, 0.8, 0.3])\n        cube([10, 5, 3], center=true);\n        \n        // Nose\n        color(color_black)\n        translate([0, 33, 12])\n        sphere(d=3, $fn=16);\n        \n        // Mouth line\n        difference() {\n            translate([0, 28, 8])\n            cube([15, 2, 3], center=true);\n            translate([0, 28, 10])\n            cube([17, 3, 3], center=true);\n        }\n        \n        // Teeth\n        color([0.9, 0.9, 0.9])\n        for(i = [-1, 1]) {\n            translate([i * 6, 31, 8])\n            rotate([90, 0, 0])\n            cylinder(d1=2, d2=1, h=3, $fn=8);\n            translate([i * 3, 31, 6])\n            rotate([90, 0, 0])\n            cylinder(d1=2, d2=1, h=3, $fn=8);\n        }\n    }\n}\n\n// Ears\nmodule ears() {\n    color(color_red)\n    union() {\n        // Left ear\n        translate([-12, 15, 28])\n        rotate([0, 0, -20])\n        scale([0.4, 0.2, 1])\n        cylinder(d1=8, d2=12, h=15, $fn=16);\n        \n        // Right ear\n        translate([12, 15, 28])\n        rotate([0, 0, 20])\n        scale([0.4, 0.2, 1])\n        cylinder(d1=8, d2=12, h=15, $fn=16);\n    }\n}\n\n// Arms\nmodule arms() {\n    color(color_body)\n    union() {\n        // Left arm\n        translate([-15, 5, 5])\n        rotate([0, 0, -30])\n        rotate([0, -20, 0])\n        scale([0.8, 0.8, 1.2])\n        cylinder(d1=8, d2=6, h=12, $fn=16);\n        \n        // Left hand\n        translate([-20, 2, -2])\n        sphere(d=10, $fn=16);\n        \n        // Right arm\n        translate([15, 5, 5])\n        rotate([0, 0, 30])\n        rotate([0, 20, 0])\n        scale([0.8, 0.8, 1.2])\n        cylinder(d1=8, d2=6, h=12, $fn=16);\n        \n        // Right hand\n        translate([20, 2, -2])\n        sphere(d=10, $fn=16);\n    }\n}\n\n// Legs\nmodule legs() {\n    color(color_body)\n    union() {\n        // Left leg\n        translate([-8, -8, -15])\n        rotate([0, 0, -10])\n        cylinder(d1=10, d2=8, h=15, $fn=16);\n        \n        // Left foot\n        translate([-10, -10, -25])\n        rotate([0, 10, 0])\n        scale([1.2, 1, 0.6])\n        sphere(d=12, $fn=16);\n        \n        // Right leg\n        translate([8, -8, -15])\n        rotate([0, 0, 10])\n        cylinder(d1=10, d2=8, h=15, $fn=16);\n        \n        // Right foot\n        translate([10, -10, -25])\n        rotate([0, -10, 0])\n        scale([1.2, 1, 0.6])\n        sphere(d=12, $fn=16);\n    }\n}\n\n// Tail\nmodule tail() {\n    color(color_body)\n    union() {\n        // Tail base\n        translate([0, -15, -10])\n        rotate([0, 20, 0])\n        scale([1, 0.8, 1.2])\n        cylinder(d1=12, d2=8, h=20, $fn=16);\n        \n        // Tail segments\n        for(i = [0:3]) {\n            translate([0, -25 - i*8, -10 - i*5])\n            rotate([0, 20 + i*5, 0])\n            scale([0.9 - i*0.1, 0.7 - i*0.1, 0.8])\n            sphere(d=10 - i*2, $fn=16);\n        }\n        \n        // Tail tip\n        color(color_red)\n        translate([0, -50, -20])\n        rotate([0, 30, 0])\n        scale([0.6, 0.6, 0.8])\n        sphere(d=8, $fn=16);\n    }\n}\n\n// Spikes on back\nmodule spikes() {\n    color(color_red)\n    for(i = [0:2]) {\n        translate([0, -5 - i*8, 10 + i*3])\n        rotate([0, -20 - i*5, 0])\n        scale([0.4, 0.3, 1.5])\n        cylinder(d1=4, d2=8, h=8, $fn=8);\n    }\n}\n\n// Assemble Totodile\nbody();\nhead();\nears();\narms();\nlegs();\ntail();\nspikes();",
    "renders": true
  },
  {
    "pokemon": "croconaw",
    "openscad_code": "// Croconaw Pokemon - Realistic Style\n// Medium complexity OpenSCAD model\n\nscale_factor = 0.4;\n$fn = 32;\n\nmodule croconaw() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        // Main body\n        color(\"#4A90E2\") union() {\n            // Torso\n            translate([0, 0, 0]) \n                scale([1.2, 0.8, 1]) \n                sphere(r=20);\n            \n            // Belly\n            color(\"#F5DEB3\") \n                translate([0, -19, -5]) \n                scale([0.8, 0.1, 0.6]) \n                sphere(r=18);\n        }\n        \n        // Head\n        color(\"#4A90E2\") union() {\n            // Main head shape\n            translate([0, 30, 15]) \n                scale([1.3, 1.5, 1.2]) \n                sphere(r=15);\n            \n            // Snout\n            translate([0, 48, 12]) \n                scale([0.7, 0.8, 0.6]) \n                sphere(r=12);\n            \n            // Jaw bottom\n            color(\"#357ABD\") \n                translate([0, 45, 0]) \n                rotate([20, 0, 0]) \n                scale([0.8, 1, 0.4]) \n                cube([25, 15, 10], center=true);\n        }\n        \n        // Eyes\n        color(\"white\") union() {\n            // Left eye\n            translate([-10, 42, 22]) \n                scale([1, 1.2, 0.5]) \n                sphere(r=5);\n            \n            // Right eye\n            translate([10, 42, 22]) \n                scale([1, 1.2, 0.5]) \n                sphere(r=5);\n        }\n        \n        // Pupils\n        color(\"black\") union() {\n            translate([-10, 42, 25]) \n                sphere(r=2.5);\n            translate([10, 42, 25]) \n                sphere(r=2.5);\n        }\n        \n        // Nostrils\n        color(\"#2E5A87\") union() {\n            translate([-5, 52, 14]) \n                sphere(r=2);\n            translate([5, 52, 14]) \n                sphere(r=2);\n        }\n        \n        // Teeth\n        color(\"white\") \n            for(i = [-1, 1]) {\n                translate([i * 8, 48, 5]) \n                    rotate([0, 0, i * 5]) \n                    cylinder(h=8, r1=2, r2=0.5);\n                translate([i * 5, 48, 5]) \n                    rotate([0, 0, i * 5]) \n                    cylinder(h=6, r1=1.5, r2=0.5);\n            }\n        \n        // Ears/Spikes\n        color(\"#357ABD\") union() {\n            // Left ear\n            translate([-18, 25, 32]) \n                rotate([0, 10, -15]) \n                scale([0.3, 0.3, 1.5]) \n                sphere(r=10);\n            \n            // Right ear\n            translate([18, 25, 32]) \n                rotate([0, 10, 15]) \n                scale([0.3, 0.3, 1.5]) \n                sphere(r=10);\n            \n            // Back spikes\n            for(i = [0:2]) {\n                translate([0, 15 - i*10, 25 + i*5]) \n                    rotate([0, 0, 0]) \n                    scale([0.4 + i*0.1, 0.3, 1.2 - i*0.2]) \n                    sphere(r=8);\n            }\n        }\n        \n        // Arms\n        color(\"#4A90E2\") union() {\n            // Left arm\n            translate([-25, 10, 0]) \n                rotate([0, 0, -20]) \n                scale([0.4, 1.2, 0.4]) \n                cylinder(h=25, r=8);\n            \n            // Left hand\n            translate([-30, -5, -5]) \n                rotate([0, 0, -30]) \n                scale([1.2, 0.8, 0.8]) \n                sphere(r=8);\n            \n            // Right arm\n            translate([25, 10, 0]) \n                rotate([0, 0, 20]) \n                scale([0.4, 1.2, 0.4]) \n                cylinder(h=25, r=8);\n            \n            // Right hand\n            translate([30, -5, -5]) \n                rotate([0, 0, 30]) \n                scale([1.2, 0.8, 0.8]) \n                sphere(r=8);\n        }\n        \n        // Legs\n        color(\"#4A90E2\") union() {\n            // Left leg\n            translate([-12, -25, -15]) \n                rotate([20, 0, 0]) \n                scale([0.5, 1.3, 0.5]) \n                cylinder(h=20, r=10);\n            \n            // Left foot\n            translate([-12, -40, -25]) \n                rotate([10, 0, 0]) \n                scale([1.5, 2, 0.8]) \n                sphere(r=8);\n            \n            // Right leg\n            translate([12, -25, -15]) \n                rotate([20, 0, 0]) \n                scale([0.5, 1.3, 0.5]) \n                cylinder(h=20, r=10);\n            \n            // Right foot\n            translate([12, -40, -25]) \n                rotate([10, 0, 0]) \n                scale([1.5, 2, 0.8]) \n                sphere(r=8);\n        }\n        \n        // Tail\n        color(\"#357ABD\") union() {\n            translate([0, -30, -10]) \n                rotate([0, 0, 0]) \n                scale([0.8, 1.5, 0.8]) \n                sphere(r=15);\n            \n            // Tail tip\n            color(\"#2E5A87\") \n                translate([0, -50, -15]) \n                    rotate([0, 0, 0]) \n                    scale([0.6, 1.8, 0.6]) \n                    sphere(r=12);\n        }\n        \n        // Markings\n        color(\"#2E5A87\") union() {\n            // Eye markings\n            translate([-10, 35, 20]) \n                rotate([0, 0, -20]) \n                scale([0.5, 2, 0.2]) \n                sphere(r=5);\n            translate([10, 35, 20]) \n                rotate([0, 0, 20]) \n                scale([0.5, 2, 0.2]) \n                sphere(r=5);\n            \n            // Arm stripes\n            for(i = [0:1]) {\n                translate([-30 + i*60, 5, 0]) \n                    rotate([0, 0, 0]) \n                    scale([0.3, 0.3, 1.5]) \n                    sphere(r=5);\n            }\n        }\n        \n        // Red fins\n        color(\"#DC143C\") union() {\n            // Head fins\n            translate([-15, 35, 30]) \n                rotate([0, -20, -30]) \n                scale([0.1, 0.8, 0.3]) \n                cube([15, 5, 2]);\n            translate([15, 35, 30]) \n                rotate([0, -20, 30]) \n                scale([0.1, 0.8, 0.3]) \n                cube([15, 5, 2]);\n            \n            // Tail fins\n            translate([0, -45, -10]) \n                rotate([0, 0, 0]) \n                scale([1.5, 0.1, 1]) \n                sphere(r=10);\n        }\n    }\n}\n\n// Render the model\ncroconaw();",
    "renders": true
  },
  {
    "pokemon": "feraligatr",
    "openscad_code": "// Feraligatr OpenSCAD Model - Realistic Style, Medium Complexity\n// Scale: 1:1 with 1 unit = 1mm, final size ~80mm height\n\n// Main body color - blue\ncolor([0.2,0.5,0.9]) \n\n// Body module\nmodule body() {\n    // Torso\n    translate([0,0,25]) \n        scale([1.5,2.2,3])\n        sphere(10);\n    \n    // Belly patch\n    color([0.9,0.9,0.8])\n    translate([0,-8,15])\n        scale([1,1.5,2])\n        sphere(8);\n}\n\n// Head module\nmodule head() {\n    // Main head\n    color([0.2,0.5,0.9])\n    translate([0,0,55])\n        rotate([0,0,0])\n        scale([1.8,1.4,2])\n        sphere(12);\n    \n    // Snout\n    color([0.2,0.5,0.9])\n    translate([0,-12,52])\n        rotate([-20,0,0])\n        scale([1.2,1.8,1.2])\n        sphere(8);\n    \n    // Jaw\n    difference() {\n        color([0.2,0.5,0.9])\n        translate([0,-18,45])\n            rotate([-30,0,0])\n            scale([1.5,2.5,1])\n            sphere(8);\n        \n        // Mouth cavity\n        color([0.1,0.1,0.1])\n        translate([0,-20,47])\n            rotate([-30,0,0])\n            scale([1.2,2,0.8])\n            sphere(7);\n    }\n    \n    // Eyes\n    for(x=[-6,6]) {\n        color([1,1,1])\n        translate([x,-8,59])\n            sphere(3);\n        color([0,0,0])\n        translate([x*0.8,-8.5,60])\n            sphere(1.5);\n    }\n    \n    // Red spikes on head\n    color([0.8,0.2,0.2])\n    for(i=[0,1,2]) {\n        translate([-8+i*8,0,65])\n            rotate([0,0,i*10-10])\n            cylinder(h=8, r1=3, r2=0);\n    }\n}\n\n// Arm module\nmodule arm(side) {\n    color([0.2,0.5,0.9])\n    translate([side*12,0,35]) {\n        rotate([0,0,side*20])\n        cylinder(h=15, r1=6, r2=4);\n        \n        // Claw\n        color([0.9,0.9,0.9])\n        translate([0,-8,10])\n        scale([side,1,1])\n        rotate([0,0,side*-30])\n        cube([8,3,3]);\n    }\n}\n\n// Leg module\nmodule leg(side) {\n    color([0.2,0.5,0.9])\n    translate([side*10,0,10]) {\n        // Thigh\n        rotate([0,0,side*-10])\n        cylinder(h=20, r1=8, r2=6);\n        \n        // Foot\n        color([0.9,0.9,0.9])\n        translate([0,-5,-5])\n        scale([2,3,1])\n        cube([8,6,4]);\n    }\n}\n\n// Tail module\nmodule tail() {\n    color([0.2,0.5,0.9])\n    union() {\n        // Base tail\n        translate([0,25,20])\n            rotate([0,0,0])\n            cylinder(h=30, r1=12, r2=6);\n        \n        // Tail segments\n        for(i=[1,2,3,4]) {\n            translate([0,25+i*10,20-i*2])\n                rotate([0,0,i*5])\n                cylinder(h=10, r1=12-i*2, r2=10-i*2);\n        }\n        \n        // Red spikes on tail\n        color([0.8,0.2,0.2])\n        for(i=[0,1,2]) {\n            translate([0,35+i*15,25-i*3])\n                rotate([90,0,0])\n                cylinder(h=8, r1=3, r2=0);\n        }\n    }\n}\n\n// Back ridges\nmodule back_ridges() {\n    color([0.8,0.2,0.2])\n    for(i=[0,1,2,3]) {\n        translate([0,5+i*5,45-i*3])\n            rotate([90,0,0])\n            cylinder(h=6, r1=4, r2=0);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    \n    // Arms\n    arm(1);\n    arm(-1);\n    \n    // Legs\n    leg(1);\n    leg(-1);\n    \n    tail();\n    back_ridges();\n}",
    "renders": true
  },
  {
    "pokemon": "sentret",
    "openscad_code": "// Sentret Pokemon - Realistic Style\n// Medium complexity 3D printable model\n\n// Colors\ncolor_body = \"#D2B48C\";\ncolor_stripe = \"#8B4513\";\ncolor_face = \"#F5DEB3\";\ncolor_ears = \"#DEB887\";\n\n// Main parameters\nscale_factor = 1.5;\nbody_size = 20 * scale_factor;\n\n// Body module\nmodule body() {\n    color(color_body)\n    union() {\n        // Main body sphere\n        sphere(r=body_size);\n        \n        // Belly stripe\n        color(color_stripe)\n        translate([0, 0, -body_size/2])\n        scale([1.2, 1, 0.3])\n        sphere(r=body_size * 0.8);\n        \n        // Chest marking\n        color(color_face)\n        translate([0, -body_size * 0.7, -body_size * 0.3])\n        scale([0.8, 0.6, 0.4])\n        sphere(r=body_size);\n    }\n}\n\n// Head module\nmodule head() {\n    color(color_body)\n    union() {\n        // Main head\n        translate([0, 0, body_size * 1.2])\n        sphere(r=body_size * 0.8);\n        \n        // Face mask\n        color(color_face)\n        translate([0, -body_size * 0.6, body_size * 1.2])\n        scale([0.9, 0.7, 0.7])\n        sphere(r=body_size * 0.8);\n        \n        // Nose\n        color(color_stripe)\n        translate([0, -body_size * 1.1, body_size * 1.1])\n        sphere(r=body_size * 0.15);\n        \n        // Eyes\n        color(\"black\")\n        union() {\n            translate([-body_size * 0.3, -body_size * 0.9, body_size * 1.4])\n            sphere(r=body_size * 0.12);\n            translate([body_size * 0.3, -body_size * 0.9, body_size * 1.4])\n            sphere(r=body_size * 0.12);\n        }\n        \n        // Eye whites\n        color(\"white\")\n        union() {\n            translate([-body_size * 0.32, -body_size * 0.92, body_size * 1.45])\n            sphere(r=body_size * 0.08);\n            translate([body_size * 0.32, -body_size * 0.92, body_size * 1.45])\n            sphere(r=body_size * 0.08);\n        }\n    }\n}\n\n// Ears module\nmodule ears() {\n    color(color_ears)\n    union() {\n        // Left ear\n        translate([-body_size * 0.6, 0, body_size * 1.8])\n        rotate([0, 0, -20])\n        scale([0.4, 0.15, 1.5])\n        cylinder(h=body_size * 1.2, r=body_size * 0.3);\n        \n        // Right ear\n        translate([body_size * 0.6, 0, body_size * 1.8])\n        rotate([0, 0, 20])\n        scale([0.4, 0.15, 1.5])\n        cylinder(h=body_size * 1.2, r=body_size * 0.3);\n        \n        // Ear tips\n        color(color_stripe)\n        union() {\n            translate([-body_size * 0.9, 0, body_size * 2.8])\n            sphere(r=body_size * 0.25);\n            translate([body_size * 0.9, 0, body_size * 2.8])\n            sphere(r=body_size * 0.25);\n        }\n    }\n}\n\n// Arms module\nmodule arms() {\n    color(color_body)\n    union() {\n        // Left arm\n        translate([-body_size * 0.9, 0, 0])\n        rotate([0, 0, -45])\n        scale([0.4, 0.4, 1])\n        cylinder(h=body_size * 0.8, r=body_size * 0.4);\n        \n        // Right arm\n        translate([body_size * 0.9, 0, 0])\n        rotate([0, 0, 45])\n        scale([0.4, 0.4, 1])\n        cylinder(h=body_size * 0.8, r=body_size * 0.4);\n    }\n}\n\n// Tail module\nmodule tail() {\n    color(color_body)\n    union() {\n        // Main tail\n        translate([0, body_size * 1.2, -body_size * 0.5])\n        rotate([0, 45, 0])\n        scale([0.5, 0.5, 3])\n        cylinder(h=body_size * 2, r=body_size * 0.4);\n        \n        // Tail stripes\n        color(color_stripe)\n        for(i = [1:3]) {\n            translate([0, body_size * 1.2 + i * body_size * 0.6, -body_size * 0.5 + i * body_size * 0.3])\n            rotate([0, 45, 0])\n            scale([0.6, 0.6, 0.1])\n            cylinder(h=body_size * 0.2, r=body_size * 0.4);\n        }\n        \n        // Tail tip\n        translate([0, body_size * 2.8, body_size * 0.3])\n        rotate([0, 45, 0])\n        sphere(r=body_size * 0.5);\n    }\n}\n\n// Feet module\nmodule feet() {\n    color(color_body)\n    union() {\n        // Left foot\n        translate([-body_size * 0.5, 0, -body_size * 1.2])\n        scale([0.8, 1.2, 0.4])\n        sphere(r=body_size * 0.5);\n        \n        // Right foot\n        translate([body_size * 0.5, 0, -body_size * 1.2])\n        scale([0.8, 1.2, 0.4])\n        sphere(r=body_size * 0.5);\n        \n        // Paw pads\n        color(color_stripe)\n        union() {\n            translate([-body_size * 0.5, -body_size * 0.4, -body_size * 1.35])\n            sphere(r=body_size * 0.15);\n            translate([body_size * 0.5, -body_size * 0.4, -body_size * 1.35])\n            sphere(r=body_size * 0.15);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    ears();\n    arms();\n    tail();\n    feet();\n}",
    "renders": true
  },
  {
    "pokemon": "furret",
    "openscad_code": "// Furret - Realistic Medium Complexity\n// Size: ~80mm tall\n\nmodule furret() {\n    color(\"BurlyWood\") {\n        // Main body\n        union() {\n            // Torso\n            translate([0, 0, 15]) \n                scale([1.2, 1.8, 1.5])\n                sphere(d=20, $fn=32);\n            \n            // Head\n            translate([0, -20, 35]) \n                sphere(d=18, $fn=32);\n            \n            // Snout\n            translate([0, -30, 30]) \n                scale([0.6, 0.8, 0.5])\n                sphere(d=16, $fn=32);\n        }\n    }\n    \n    color(\"SaddleBrown\") {\n        // Back stripes\n        for(i = [0:2]) {\n            translate([0, 5 + i*8, 25 + i*2]) \n                scale([1.1 - i*0.1, 0.3, 0.8 - i*0.1])\n                cube([20, 4, 8], center=true);\n        }\n        \n        // Head stripe\n        translate([0, -22, 38]) \n            scale([1.2, 0.3, 0.3])\n            cube([16, 4, 6], center=true);\n    }\n    \n    color(\"BurlyWood\") {\n        // Ears\n        translate([-10, -15, 42]) \n            rotate([0, 30, -20])\n            cylinder(d1=8, d2=6, h=15, $fn=8);\n        translate([10, -15, 42]) \n            rotate([0, 30, 20])\n            cylinder(d1=8, d2=6, h=15, $fn=8);\n        \n        // Arms\n        translate([-15, -5, 20]) \n            rotate([0, 0, 30])\n            cylinder(d=6, h=18, $fn=16);\n        translate([15, -5, 20]) \n            rotate([0, 0, -30])\n            cylinder(d=6, h=18, $fn=16);\n        \n        // Legs\n        translate([-8, 10, 8]) \n            cylinder(d=7, h=15, $fn=16);\n        translate([8, 10, 8]) \n            cylinder(d=7, h=15, $fn=16);\n        \n        // Feet\n        translate([-8, 10, 0]) \n            scale([1.5, 2, 0.5])\n            sphere(d=8, $fn=16);\n        translate([8, 10, 0]) \n            scale([1.5, 2, 0.5])\n            sphere(d=8, $fn=16);\n    }\n    \n    color(\"Black\") {\n        // Eyes\n        translate([-5, -28, 32]) \n            sphere(d=3, $fn=16);\n        translate([5, -28, 32]) \n            sphere(d=3, $fn=16);\n        \n        // Nose\n        translate([0, -34, 30]) \n            sphere(d=2, $fn=16);\n    }\n    \n    color(\"BurlyWood\") {\n        // Tail segments\n        union() {\n            for(i = [0:5]) {\n                translate([0, 15 + i*8, 15 - i*2]) \n                    scale([1 - i*0.15, 1 - i*0.1, 0.8 - i*0.12])\n                    sphere(d=12 - i*1.5, $fn=32);\n            }\n        }\n        \n        // Tail tip\n        translate([0, 55, 5]) \n            scale([0.5, 0.5, 0.4])\n            sphere(d=8, $fn=16);\n    }\n    \n    color(\"SaddleBrown\") {\n        // Tail stripes\n        for(i = [0:2]) {\n            translate([0, 25 + i*12, 12 - i*3]) \n                scale([0.8 - i*0.15, 0.3, 0.6 - i*0.1])\n                cube([12 - i*2, 4, 6 - i], center=true);\n        }\n    }\n}\n\n// Render the model\nfurret();",
    "renders": true
  },
  {
    "pokemon": "hoothoot",
    "openscad_code": "// Hoothoot Pokemon - Realistic Medium Complexity\n// Scale: 100mm tall\n\n// Colors\ncolor_brown = [101/255, 67/255, 33/255];\ncolor_light_brown = [156/255, 102/255, 31/255];\ncolor_white = [1, 1, 1];\ncolor_black = [0, 0, 0];\ncolor_red = [1, 0, 0];\ncolor_yellow = [1, 1, 0];\n\n// Main body\nmodule hoothoot() {\n    union() {\n        // Central body\n        color(color_brown)\n        translate([0, 0, 30])\n        scale([1, 0.8, 1.2])\n        sphere(r = 20);\n        \n        // Belly patch\n        color(color_light_brown)\n        translate([0, -12, 25])\n        scale([0.8, 0.3, 1])\n        sphere(r = 25);\n        \n        // Head\n        color(color_brown)\n        translate([0, 0, 55])\n        scale([1.2, 1, 0.9])\n        sphere(r = 22);\n        \n        // Beak\n        color(color_yellow)\n        translate([0, 0, 52])\n        rotate([0, 20, 0])\n        scale([0.4, 0.8, 0.6])\n        cylinder(h = 15, r1 = 8, r2 = 4, center = true);\n        \n        // Eyes\n        for (x = [-12, 12]) {\n            color(color_black)\n            translate([x, 0, 58])\n            sphere(r = 10);\n            \n            color(color_white)\n            translate([x, -2, 58])\n            sphere(r = 7);\n            \n            color(color_black)\n            translate([x + 2, -3, 58])\n            sphere(r = 4);\n            \n            color(color_red)\n            translate([x + 2, -3, 58.5])\n            sphere(r = 2);\n        }\n        \n        // Wings\n        for (side = [-1, 1]) {\n            color(color_brown)\n            translate([side * 25, 0, 45])\n            rotate([0, 0, side * 30])\n            scale([0.3, 1.2, 0.8])\n            cylinder(h = 25, r = 15);\n        }\n        \n        // Feet\n        for (side = [-1, 1]) {\n            color(color_yellow)\n            translate([side * 12, -10, 15])\n            union() {\n                // Main foot\n                scale([0.5, 2, 0.3])\n                sphere(r = 8);\n                \n                // Toes\n                for (i = [-1, 0, 1]) {\n                    translate([i * 4, -6, -2])\n                    scale([0.8, 1.5, 0.3])\n                    sphere(r = 4);\n                }\n            }\n        }\n        \n        // Ear tufts\n        for (side = [-1, 1]) {\n            color(color_brown)\n            translate([side * 20, 0, 75])\n            rotate([0, 0, side * 15])\n            scale([0.3, 0.3, 1.5])\n            cylinder(h = 15, r = 6);\n            \n            // Inner ear\n            color(color_light_brown)\n            translate([side * 20, 0, 75])\n            rotate([0, 0, side * 15])\n            scale([0.2, 0.2, 1.4])\n            cylinder(h = 15, r = 5);\n        }\n        \n        // Tail feathers\n        color(color_brown)\n        translate([0, 20, 30])\n        rotate([90, 0, 0])\n        scale([0.5, 2, 0.3])\n        cylinder(h = 20, r1 = 12, r2 = 8);\n        \n        // Eye markings\n        for (x = [-12, 12]) {\n            color(color_light_brown)\n            translate([x * 1.5, 8, 58])\n            scale([2, 0.3, 0.8])\n            sphere(r = 5);\n        }\n    }\n}\n\n// Create the model\nhoothoot();",
    "renders": true
  },
  {
    "pokemon": "noctowl",
    "openscad_code": "// Noctowl OpenSCAD Model - Medium Complexity\n// Realistic style, 3D printable\n\n// Overall scale\nscale_factor = 0.35;\n\n// Colors\ncolor_body = [0.4, 0.3, 0.2];\ncolor_wings = [0.35, 0.25, 0.15];\ncolor_belly = [0.65, 0.55, 0.45];\ncolor_eyes = [1, 0.8, 0.2];\ncolor_beak = [0.7, 0.5, 0.1];\ncolor_markings = [0.15, 0.1, 0.05];\n\n// Main body\nmodule body() {\n    color(color_body)\n    union() {\n        // Main body sphere\n        sphere(r=15);\n        \n        // Belly\n        translate([0, -10, -5])\n            scale([1, 1.2, 0.6])\n            color(color_belly)\n            sphere(r=12);\n    }\n}\n\n// Head\nmodule head() {\n    color(color_body)\n    union() {\n        // Main head\n        translate([0, 0, 18])\n            scale([1.1, 1, 1.2])\n            sphere(r=12);\n        \n        // Beak\n        translate([0, -12, 18])\n            rotate([0, 90, 0])\n            scale([1, 1, 2])\n            color(color_beak)\n            cylinder(r1=3, r2=5, h=8);\n    }\n}\n\n// Eyes\nmodule eyes() {\n    for(x = [-6, 6]) {\n        // Eye whites\n        translate([x, -5, 22])\n            color([1, 1, 1])\n            sphere(r=4);\n        \n        // Eye pupils\n        translate([x, -7, 22])\n            scale([0.5, 1, 1])\n            color(color_markings)\n            sphere(r=3);\n        \n        // Eye shine\n        translate([x+1, -6, 23])\n            color([1, 1, 1])\n            sphere(r=1);\n    }\n}\n\n// Ear tufts\nmodule ears() {\n    for(x = [-8, 8]) {\n        color(color_body)\n        translate([x, 0, 28])\n            rotate([0, 0, x > 0 ? 30 : -30])\n            scale([2, 1, 3])\n            cylinder(r1=2, r2=1, h=8);\n    }\n}\n\n// Wings\nmodule wings() {\n    // Left wing\n    color(color_wings)\n    translate([-18, 0, 5])\n        rotate([0, 0, 20])\n        scale([1.5, 0.5, 1])\n        difference() {\n            sphere(r=20);\n            translate([5, 0, -5])\n                cube([25, 30, 30], center=true);\n        }\n    \n    // Right wing\n    translate([18, 0, 5])\n        rotate([0, 0, -20])\n        scale([1.5, 0.5, 1])\n        mirror([1, 0, 0])\n        difference() {\n            sphere(r=20);\n            translate([5, 0, -5])\n                cube([25, 30, 30], center=true);\n        }\n}\n\n// Tail feathers\nmodule tail() {\n    color(color_wings)\n    for(i = [0:2]) {\n        translate([0, 12 + i*2, -12 - i*3])\n            rotate([0, 20 + i*10, 0])\n            scale([1 - i*0.2, 0.3, 2 + i*0.5])\n            cylinder(r1=3, r2=2, h=8);\n    }\n}\n\n// Feet\nmodule feet() {\n    color(color_beak)\n    for(x = [-5, 5]) {\n        translate([x, 0, -15])\n            scale([0.8, 0.8, 1.5])\n            cylinder(r=3, h=5);\n        \n        // Toes\n        for(angle = [0:120:240]) {\n            translate([x, 0, -20])\n                rotate([0, 0, angle + (x > 0 ? 0 : 180)])\n                translate([2.5, 0, -2.5])\n                scale([0.3, 0.3, 1])\n                cylinder(r=2, h=5);\n        }\n    }\n}\n\n// Chest markings\nmodule markings() {\n    color(color_markings)\n    translate([0, -10, 10])\n        scale([1.2, 0.8, 1])\n        sphere(r=8);\n    \n    // Feather pattern\n    for(angle = [0:45:315]) {\n        translate([0, -8, 10])\n            rotate([0, 0, angle])\n            translate([6, 0, 0])\n            scale([0.5, 0.1, 0.5])\n            sphere(r=3);\n    }\n}\n\n// Main assembly\nscale(scale_factor)\nunion() {\n    body();\n    head();\n    eyes();\n    ears();\n    wings();\n    tail();\n    feet();\n    markings();\n}",
    "renders": true
  },
  {
    "pokemon": "ledyba",
    "openscad_code": "// Ledyba - Realistic Style, Medium Complexity\n// 3D printable Pokemon model\n\n// Main parameters\nscale_factor = 0.8;\nbody_radius = 12 * scale_factor;\nhead_radius = 8 * scale_factor;\neye_radius = 3 * scale_factor;\nspot_radius = 1.2 * scale_factor;\nleg_length = 15 * scale_factor;\nleg_width = 2 * scale_factor;\nantenna_length = 20 * scale_factor;\nantenna_width = 1 * scale_factor;\nwing_length = 25 * scale_factor;\nwing_width = 18 * scale_factor;\n\n// Colors\ncolor_red = [0.8, 0.2, 0.2];\ncolor_orange = [1, 0.6, 0.2];\ncolor_black = [0.1, 0.1, 0.1];\ncolor_white = [0.95, 0.95, 0.95];\n\nmodule ledyba_body() {\n    // Main body shell\n    color(color_red)\n    union() {\n        // Central body\n        difference() {\n            sphere(r = body_radius, $fn = 32);\n            // Flatten bottom\n            translate([0, 0, -body_radius])\n                cube([body_radius*2.2, body_radius*2.2, body_radius*2], center = true);\n        }\n        \n        // Head\n        translate([0, body_radius*0.7, body_radius*0.3])\n            sphere(r = head_radius, $fn = 32);\n    }\n}\n\nmodule ledyba_eyes() {\n    color(color_black)\n    union() {\n        // Left eye\n        translate([-head_radius*0.5, body_radius*0.7 + head_radius*0.6, body_radius*0.3 + head_radius*0.2])\n            sphere(r = eye_radius, $fn = 16);\n        \n        // Right eye\n        translate([head_radius*0.5, body_radius*0.7 + head_radius*0.6, body_radius*0.3 + head_radius*0.2])\n            sphere(r = eye_radius, $fn = 16);\n    }\n    \n    // Eye highlights\n    color(color_white)\n    union() {\n        translate([-head_radius*0.4, body_radius*0.7 + head_radius*0.65, body_radius*0.3 + head_radius*0.35])\n            sphere(r = eye_radius*0.4, $fn = 8);\n        \n        translate([head_radius*0.6, body_radius*0.7 + head_radius*0.65, body_radius*0.3 + head_radius*0.35])\n            sphere(r = eye_radius*0.4, $fn = 8);\n    }\n}\n\nmodule ledyba_spots() {\n    color(color_black)\n    for(i = [-1, 1]) {\n        for(j = [-1, 1]) {\n            translate([i * body_radius * 0.6, j * body_radius * 0.6, body_radius * 0.7])\n                sphere(r = spot_radius, $fn = 8);\n        }\n    }\n    \n    // Additional spots\n    translate([0, body_radius * 0.8, body_radius * 0.8])\n        sphere(r = spot_radius * 0.8, $fn = 8);\n    translate([0, -body_radius * 0.8, body_radius * 0.8])\n        sphere(r = spot_radius * 0.8, $fn = 8);\n}\n\nmodule ledyba_antenna() {\n    color(color_black)\n    union() {\n        // Left antenna\n        translate([-head_radius*0.8, body_radius*0.7 + head_radius*0.5, body_radius*0.3 + head_radius*0.5])\n            rotate([0, 0, -30])\n                cylinder(h = antenna_length, r = antenna_width, $fn = 8);\n        \n        // Right antenna\n        translate([head_radius*0.8, body_radius*0.7 + head_radius*0.5, body_radius*0.3 + head_radius*0.5])\n            rotate([0, 0, 30])\n                cylinder(h = antenna_length, r = antenna_width, $fn = 8);\n    }\n    \n    // Antenna balls\n    color(color_orange)\n    union() {\n        translate([-head_radius*0.8 - antenna_length*sin(30), \n                  body_radius*0.7 + head_radius*0.5 + antenna_length*cos(30), \n                  body_radius*0.3 + head_radius*0.5])\n            sphere(r = antenna_width*2, $fn = 8);\n        \n        translate([head_radius*0.8 + antenna_length*sin(30), \n                  body_radius*0.7 + head_radius*0.5 + antenna_length*cos(30), \n                  body_radius*0.3 + head_radius*0.5])\n            sphere(r = antenna_width*2, $fn = 8);\n    }\n}\n\nmodule ledyba_legs() {\n    color(color_black)\n    for(i = [0:3]) {\n        angle = i * 90;\n        rotate([0, 0, angle])\n            translate([body_radius * 0.8, 0, -body_radius * 0.3])\n                rotate([30, 0, 0])\n                    cylinder(h = leg_length, r = leg_width, $fn = 8);\n    }\n    \n    // Feet\n    color(color_black)\n    for(i = [0:3]) {\n        angle = i * 90;\n        rotate([0, 0, angle])\n            translate([body_radius * 0.8 + leg_length*sin(30), 0, -body_radius*0.3 - leg_length*cos(30)])\n                sphere(r = leg_width*1.5, $fn = 8);\n    }\n}\n\nmodule ledyba_wings() {\n    color(color_orange)\n    difference() {\n        // Left wing\n        translate([-body_radius*1.2, 0, body_radius*0.5])\n            rotate([0, 0, -20])\n                scale([1, 0.7, 0.1])\n                    sphere(r = wing_length, $fn = 32);\n        \n        // Wing cutouts\n        translate([-body_radius*1.4, -wing_width*0.3, body_radius*0.6])\n            cube([wing_length*0.4, wing_width*0.6, 1]);\n        translate([-body_radius*1.6, 0, body_radius*0.6])\n            cube([wing_length*0.3, wing_width*0.4, 1]);\n    }\n    \n    difference() {\n        // Right wing\n        translate([body_radius*1.2, 0, body_radius*0.5])\n            rotate([0, 0, 20])\n                scale([1, 0.7, 0.1])\n                    sphere(r = wing_length, $fn = 32);\n        \n        // Wing cutouts\n        translate([body_radius*1.4, -wing_width*0.3, body_radius*0.6])\n            cube([wing_length*0.4, wing_width*0.6, 1]);\n        translate([body_radius*1.6, 0, body_radius*0.6])\n            cube([wing_length*0.3, wing_width*0.4, 1]);\n    }\n}\n\n// Assembly\nledyba_body();\nledyba_eyes();\nledyba_spots();\nledyba_antenna();\nledyba_legs();\nledyba_wings();",
    "renders": true
  },
  {
    "pokemon": "ledian",
    "openscad_code": "// Ledian - Realistic Style - Medium Complexity\n// Dimensions: approximately 40mm x 35mm x 55mm\n\ncolor([0.9, 0.1, 0.1]) // Red color for main body\ndifference() {\n    union() {\n        // Head\n        translate([0, 0, 45])\n        sphere(d=12, $fn=32);\n        \n        // Eyes\n        translate([-4, 5, 48])\n        sphere(d=5, $fn=16);\n        translate([4, 5, 48])\n        sphere(d=5, $fn=16);\n        \n        // Mouth area\n        translate([0, 2, 43])\n        scale([3, 1.5, 1])\n        sphere(d=3, $fn=16);\n        \n        // Torso\n        translate([0, 0, 30])\n        scale([1, 0.7, 1.2])\n        sphere(d=18, $fn=32);\n        \n        // Abdomen pattern\n        translate([0, -6, 15])\n        scale([1.2, 0.8, 1.5])\n        sphere(d=15, $fn=32);\n        \n        // Arms\n        for(side = [-1, 1]) {\n            translate([side * 10, 0, 35])\n            rotate([0, 0, side * 45])\n            cylinder(h=12, d1=6, d2=4, $fn=16);\n            \n            // Hands\n            translate([side * 16, 0, 33])\n            sphere(d=6, $fn=16);\n        }\n        \n        // Legs\n        for(side = [-1, 1]) {\n            translate([side * 6, 0, 15])\n            rotate([0, 0, side * -20])\n            cylinder(h=15, d1=6, d2=4, $fn=16);\n            \n            // Feet\n            translate([side * 8, 0, 5])\n            scale([1.5, 1, 0.5])\n            sphere(d=8, $fn=16);\n        }\n        \n        // Wings\n        color([0.1, 0.1, 0.9]) // Blue for wings\n        for(side = [-1, 1]) {\n            translate([side * 12, 0, 38])\n            rotate([0, 0, side * 90])\n            scale([0.2, 1, 1])\n            cylinder(h=25, d1=2, d2=15, $fn=3);\n            \n            translate([side * 12, 0, 38])\n            rotate([0, 0, side * 90])\n            scale([0.2, 0.7, 1])\n            cylinder(h=20, d1=2, d2=12, $fn=3);\n        }\n        \n        // Antennae\n        color([0.1, 0.1, 0.1]) // Black for antennae\n        for(side = [-1, 1]) {\n            translate([side * 4, 8, 50])\n            rotate([0, 90, 0])\n            cylinder(h=8, d=1, $fn=8);\n            \n            // Antenna tips\n            translate([side * 4, 16, 50])\n            sphere(d=2, $fn=8);\n        }\n    }\n    \n    // Eye holes\n    color([0.1, 0.1, 0.1])\n    translate([-4, 6, 48])\n    sphere(d=3, $fn=16);\n    translate([4, 6, 48])\n    sphere(d=3, $fn=16);\n    \n    // Mouth\n    translate([0, 4, 43])\n    scale([2, 1, 1])\n    sphere(d=2, $fn=8);\n}",
    "renders": true
  },
  {
    "pokemon": "spinarak",
    "openscad_code": "// Spinarak Pokemon - Realistic Style, Medium Complexity\n// Overall size: 60mm wide x 80mm long x 40mm tall\n\n// Main colors\n$face_color = \"#8B4513\";      // Brown\n$body_color = \"#2F4F4F\";      // Dark Slate Gray\n$marking_color = \"#FF69B4\";   // Hot Pink\n$eye_color = \"#000000\";       // Black\n$highlight_color = \"#FFFFFF\"; // White\n\nmodule spinarak() {\n    // Main body\n    union() {\n        // Abdomen (spider body)\n        color($body_color)\n            translate([0, 0, 15])\n                scale([1.2, 1.5, 1])\n                    sphere(d=30, $fn=32);\n        \n        // Cephalothorax (head/body front)\n        color($body_color)\n            translate([0, -20, 20])\n                scale([0.8, 0.9, 0.7])\n                    sphere(d=25, $fn=32);\n        \n        // Face mask\n        color($face_color)\n            translate([0, -28, 18])\n                scale([0.9, 0.6, 0.3])\n                    sphere(d=20, $fn=32);\n    }\n    \n    // Eyes (4 total - 2 large, 2 small)\n    // Large eyes\n    for(i = [-1, 1]) {\n        color($eye_color)\n            translate([i*8, -25, 22])\n                sphere(d=6, $fn=16);\n        color($highlight_color)\n            translate([i*8.5, -24, 23])\n                sphere(d=2, $fn=8);\n    }\n    \n    // Small eyes\n    for(i = [-1, 1]) {\n        color($eye_color)\n            translate([i*4, -20, 20])\n                sphere(d=3, $fn=8);\n    }\n    \n    // Mandibles (fangs)\n    for(i = [-1, 1]) {\n        color($face_color)\n            translate([i*6, -32, 15])\n                rotate([0, 0, i*20])\n                    cylinder(h=8, d1=4, d2=2, $fn=8);\n    }\n    \n    // Legs (6 legs total - 3 pairs)\n    module leg(angle, length, height) {\n        translate([0, 0, height])\n            rotate([0, 0, angle])\n                translate([15, -5, 0])\n                    rotate([90, 0, 0])\n                        cylinder(h=length, d=3, $fn=8);\n    }\n    \n    // Front legs\n    for(i = [-1, 1]) {\n        leg(i*40, 25, 20);\n    }\n    \n    // Middle legs\n    for(i = [-1, 1]) {\n        leg(i*70, 30, 15);\n    }\n    \n    // Rear legs\n    for(i = [-1, 1]) {\n        leg(i*110, 28, 10);\n    }\n    \n    // Pink markings on abdomen\n    color($marking_color)\n        translate([0, 0, 25])\n            scale([1.3, 1.6, 0.1])\n                sphere(d=30, $fn=32);\n    \n    // Diamond pattern on back\n    color($marking_color)\n        for(x = [-15, 0, 15]) {\n            for(y = [-20, -5, 10]) {\n                translate([x, y, 29])\n                    scale([0.2, 0.2, 0.05])\n                        cube([10, 10, 1], center=true);\n            }\n        }\n    \n    // Stinger on rear\n    color($body_color)\n        translate([0, 35, 15])\n            rotate([0, 90, 0])\n                cylinder(h=8, d1=5, d2=3, $fn=8);\n}\n\n// Create the Spinarak\nspinarak();",
    "renders": true
  },
  {
    "pokemon": "ariados",
    "openscad_code": "// Ariados - Realistic Style, Medium Complexity\n// Scale: 80mm tall when printed\n\n$fn = 36;\n\n// Main colors\ncolor_body = [0.2, 0.05, 0.3];    // Dark purple\ncolor_acc = [0.9, 0.15, 0.15];    // Red accents\ncolor_eye = [0.05, 0.05, 0.05];   // Black\ncolor_teeth = [0.95, 0.95, 0.9];  // White\n\nmodule body() {\n    color(color_body)\n    union() {\n        // Abdomen (main body sphere)\n        translate([0, 0, 30])\n            scale([1.2, 1.2, 1.4])\n                sphere(20);\n        \n        // Cephalothorax (head segment)\n        translate([0, 0, 60])\n            scale([0.8, 0.8, 0.6])\n                sphere(15);\n    }\n}\n\nmodule legs() {\n    color(color_body)\n    union() {\n        // Front pair (longest)\n        for(side = [-1, 1]) {\n            translate([side * 12, -5, 50])\n                rotate([0, 0, side * -30])\n                    rotate([0, 30, 0])\n                        scale([1, 1, 6])\n                            cylinder(12, 3, 2);\n            \n            translate([side * 20, -10, 40])\n                rotate([0, 0, side * -45])\n                    rotate([0, 20, 0])\n                        scale([1, 1, 4])\n                            cylinder(10, 2.5, 2);\n        }\n        \n        // Middle pairs\n        for(i = [1, 2]) {\n            for(side = [-1, 1]) {\n                translate([side * 15, 0, 40 - i * 10])\n                    rotate([0, 0, side * (-30 - i * 10)])\n                        rotate([0, 20 - i * 5, 0])\n                            scale([1, 1, 4 - i * 0.5])\n                                cylinder(8, 2, 1.5);\n                \n                translate([side * 18, -5, 35 - i * 10])\n                    rotate([0, 0, side * (-40 - i * 10)])\n                        rotate([0, 15, 0])\n                            scale([1, 1, 3])\n                                cylinder(6, 1.5, 1);\n            }\n        }\n        \n        // Rear pair\n        for(side = [-1, 1]) {\n            translate([side * 8, 0, 15])\n                rotate([0, 0, side * -20])\n                    rotate([0, 10, 0])\n                        scale([1, 1, 2.5])\n                            cylinder(5, 1.5, 1);\n        }\n    }\n}\n\nmodule fangs() {\n    color(color_teeth)\n    union() {\n        // Upper fangs\n        for(side = [-1, 1]) {\n            translate([side * 3, -8, 68])\n                rotate([0, 0, side * 15])\n                    rotate([30, 0, 0])\n                        cylinder(8, 2, 0.5);\n        }\n        \n        // Lower fangs\n        for(side = [-1, 1]) {\n            translate([side * 2.5, -6, 63])\n                rotate([0, 0, side * -15])\n                    rotate([-20, 0, 0])\n                        cylinder(6, 1.5, 0.5);\n        }\n    }\n}\n\nmodule eyes() {\n    color(color_eye)\n    union() {\n        // Main eyes\n        for(side = [-1, 1]) {\n            translate([side * 5, -12, 70])\n                scale([1, 0.8, 0.3])\n                    sphere(3);\n        }\n        \n        // Eye highlights\n        color([0.9, 0.9, 0.9])\n        for(side = [-1, 1]) {\n            translate([side * 4.5, -11.5, 71.5])\n                scale([0.3, 0.3, 0.1])\n                    sphere(1);\n        }\n    }\n}\n\nmodule markings() {\n    color(color_acc)\n    union() {\n        // Abdomen markings (spider pattern)\n        translate([0, 5, 45])\n            scale([0.8, 0.6, 0.1])\n                sphere(8);\n        \n        translate([0, 5, 42])\n            scale([0.5, 0.4, 0.1])\n                sphere(6);\n        \n        // Side markings\n        for(side = [-1, 1]) {\n            translate([side * 15, 0, 50])\n                rotate([0, 90, 0])\n                    scale([0.1, 1, 0.5])\n                        cylinder(5, 4, 2);\n            \n            translate([side * 18, 0, 40])\n                rotate([0, 90, 0])\n                    scale([0.1, 0.8, 0.4])\n                        cylinder(4, 3, 1.5);\n        }\n        \n        // Leg stripes\n        for(i = [0:3]) {\n            for(side = [-1, 1]) {\n                translate([side * (12 + i * 3), -5 + i * 2, 45 - i * 8])\n                    rotate([0, 90, 0])\n                        scale([0.1, 0.3, 0.3])\n                            cylinder(2, 0.5, 0.5);\n            }\n        }\n    }\n}\n\nmodule spinneret() {\n    color(color_body)\n    translate([0, 5, 15])\n        cylinder(5, 3, 1);\n}\n\n// Assembly\nunion() {\n    body();\n    legs();\n    fangs();\n    eyes();\n    markings();\n    spinneret();\n}\n\n// Base for stability\ncolor([0.1, 0.1, 0.1])\ntranslate([0, 0, -2])\n    cylinder(2, 25, 25);",
    "renders": true
  },
  {
    "pokemon": "crobat",
    "openscad_code": "// Crobat OpenSCAD model - realistic medium complexity\n// Overall dimensions ~60mm wingspan\n\nmodule crobatBody() {\n    color(\"purple\") \n    union() {\n        // Main body\n        translate([0, 0, 5])\n            scale([1, 0.7, 1])\n            sphere(d=20, $fn=32);\n        \n        // Head\n        translate([0, 9, 8])\n            sphere(d=15, $fn=32);\n    }\n}\n\nmodule crobatEars() {\n    color(\"purple\")\n    union() {\n        // Left ear\n        translate([-5, 12, 18])\n            rotate([0, 20, -30])\n            cylinder(h=15, d1=4, d2=2, $fn=8);\n        \n        // Right ear\n        translate([5, 12, 18])\n            rotate([0, 20, 30])\n            cylinder(h=15, d1=4, d2=2, $fn=8);\n    }\n}\n\nmodule crobatWing($side=1) {\n    color(\"blue\")\n    difference() {\n        // Main wing\n        translate([0, 0, 0])\n            rotate([0, 0, $side * 45])\n            scale([1.2, 3, 0.1])\n            sphere(d=30, $fn=32);\n        \n        // Wing membrane cutout\n        translate([0, 0, -1])\n            rotate([0, 0, $side * 45])\n            scale([1, 2.2, 0.2])\n            sphere(d=20, $fn=32);\n        \n        // Wing tip\n        for(i = [1:3]) {\n            translate([$side * 8 * i, 20 + i * 5, 0])\n                rotate([0, 0, $side * (45 - i * 10)])\n                scale([0.3, 1, 0.1])\n                sphere(d=8, $fn=6);\n        }\n    }\n}\n\nmodule crobatMouth() {\n    color(\"red\")\n    translate([0, 15, 5])\n        rotate([90, 0, 0])\n        cylinder(h=5, d1=8, d2=5, $fn=16);\n}\n\nmodule crobatEyes() {\n    color(\"red\")\n    union() {\n        // Left eye\n        translate([-4, 12, 10])\n            sphere(d=3, $fn=16);\n        \n        // Right eye\n        translate([4, 12, 10])\n            sphere(d=3, $fn=16);\n    }\n}\n\nmodule crobatFeet() {\n    color(\"purple\")\n    union() {\n        // Front feet\n        translate([-3, 5, 0])\n            cylinder(h=5, d=3, $fn=8);\n        translate([3, 5, 0])\n            cylinder(h=5, d=3, $fn=8);\n        \n        // Back feet\n        translate([-3, -5, 0])\n            cylinder(h=5, d=3, $fn=8);\n        translate([3, -5, 0])\n            cylinder(h=5, d=3, $fn=8);\n    }\n}\n\nmodule crobatMarkings() {\n    color(\"lightblue\")\n    union() {\n        // Wing edges\n        translate([0, 0, 1])\n            rotate([0, 0, 45])\n            scale([1.1, 2.9, 0.1])\n            sphere(d=29, $fn=32);\n        translate([0, 0, 1])\n            rotate([0, 0, -45])\n            scale([1.1, 2.9, 0.1])\n            sphere(d=29, $fn=32);\n        \n        // Body markings\n        translate([0, 8, 7])\n            scale([1.2, 0.8, 0.5])\n            sphere(d=12, $fn=32);\n    }\n}\n\n// Main assembly\nunion() {\n    crobatBody();\n    crobatEars();\n    crobatWing(1);\n    crobatWing(-1);\n    crobatMouth();\n    crobatEyes();\n    crobatFeet();\n    crobatMarkings();\n}",
    "renders": true
  },
  {
    "pokemon": "chinchou",
    "openscad_code": "// Chinchou Pokemon - Realistic Style\n// Medium complexity OpenSCAD model for 3D printing\n\nmodule chinchou_body() {\n    color([0.2, 0.4, 0.8])  // Blue body color\n    union() {\n        // Main spherical body\n        sphere(r=15, $fn=32);\n        \n        // Bottom flat surface for printing\n        translate([0, 0, -15])\n            cube([28, 28, 0.5], center=true);\n    }\n}\n\nmodule chinchou_eyes() {\n    // Left eye (white part)\n    translate([-6, 8, 12])\n    color([1, 1, 1])\n    sphere(r=4.5, $fn=20);\n    \n    // Right eye (white part)\n    translate([6, 8, 12])\n    color([1, 1, 1])\n    sphere(r=4.5, $fn=20);\n    \n    // Left pupil (black)\n    translate([-6, 8.5, 14])\n    color([0, 0, 0])\n    sphere(r=2.5, $fn=15);\n    \n    // Right pupil (black)\n    translate([6, 8.5, 14])\n    color([0, 0, 0])\n    sphere(r=2.5, $fn=15);\n    \n    // Left shine\n    translate([-6.5, 9, 15])\n    color([1, 1, 1])\n    sphere(r=1, $fn=10);\n    \n    // Right shine\n    translate([5.5, 9, 15])\n    color([1, 1, 1])\n    sphere(r=1, $fn=10);\n}\n\nmodule chinchou_mouth() {\n    // Small mouth line\n    translate([0, 3, 5])\n    rotate([90, 0, 0])\n    color([0.1, 0.1, 0.1])\n    cylinder(h=0.5, r1=3, r2=3, $fn=20);\n}\n\nmodule chinchou_antenna_base() {\n    // Left antenna base\n    translate([-12, 0, 10])\n    rotate([0, 45, 0])\n    color([0.3, 0.5, 0.9])\n    cylinder(h=8, r=3, $fn=20);\n    \n    // Right antenna base\n    translate([12, 0, 10])\n    rotate([0, -45, 0])\n    color([0.3, 0.5, 0.9])\n    cylinder(h=8, r=3, $fn=20);\n}\n\nmodule chinchou_lure() {\n    // Left lure\n    translate([-20, 0, 17])\n    color([1, 0.9, 0.2])\n    sphere(r=6, $fn=25);\n    \n    // Left inner light\n    translate([-20, 0, 19])\n    color([1, 1, 0.5])\n    sphere(r=3, $fn=15);\n    \n    // Right lure\n    translate([20, 0, 17])\n    color([1, 0.9, 0.2])\n    sphere(r=6, $fn=25);\n    \n    // Right inner light\n    translate([20, 0, 19])\n    color([1, 1, 0.5])\n    sphere(r=3, $fn=15);\n}\n\nmodule chinchou_fins() {\n    // Top fin\n    translate([0, 0, 15])\n    rotate([0, 0, 0])\n    color([0.15, 0.35, 0.75])\n    scale([1, 0.3, 1])\n    sphere(r=8, $fn=20);\n    \n    // Left fin\n    translate([-15, 0, 0])\n    rotate([0, 0, 90])\n    color([0.15, 0.35, 0.75])\n    scale([1, 0.3, 0.8])\n    sphere(r=7, $fn=20);\n    \n    // Right fin\n    translate([15, 0, 0])\n    rotate([0, 0, -90])\n    color([0.15, 0.35, 0.75])\n    scale([1, 0.3, 0.8])\n    sphere(r=7, $fn=20);\n}\n\nmodule chinchou_pattern() {\n    // Small yellow spots on body\n    for(i=[-1:1]) {\n        for(j=[-1:1]) {\n            if(i != 0 || j != 0) {\n                translate([i*8, j*8, 13])\n                color([1, 0.8, 0.2])\n                sphere(r=1.5, $fn=10);\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    chinchou_body();\n    chinchou_eyes();\n    chinchou_mouth();\n    chinchou_antenna_base();\n    chinchou_lure();\n    chinchou_fins();\n    chinchou_pattern();\n}\n\n// Scale for 3D printing (80mm height)\nscale([1.3, 1.3, 1.3]) {\n    // Empty - scaling applied to entire model\n}",
    "renders": true
  },
  {
    "pokemon": "lanturn",
    "openscad_code": "// Lanturn Pokemon - Realistic Style\n// Medium complexity OpenSCAD model\n\n// Colors\nblue = [0, 0.5, 0.9];\nlight_blue = [0.3, 0.7, 1];\nyellow = [1, 0.9, 0];\ndark_blue = [0, 0.2, 0.5];\npink = [1, 0.6, 0.8];\n\n// Main body\nmodule body() {\n    color(blue)\n    union() {\n        // Main spherical body\n        translate([0, 0, 20])\n        sphere(25);\n        \n        // Lower body extension\n        translate([0, 0, 10])\n        cylinder(20, 20, 25);\n    }\n}\n\n// Light orb on head\nmodule light_orb() {\n    union() {\n        // Main orb\n        color(yellow)\n        translate([0, 0, 50])\n        sphere(15);\n        \n        // Inner glow\n        color([1, 1, 0.8])\n        translate([0, 0, 50])\n        sphere(10);\n        \n        // Orb base\n        color(light_blue)\n        translate([0, 0, 35])\n        cylinder(15, 15, 15);\n    }\n}\n\n// Dorsal fin\nmodule dorsal_fin() {\n    color(blue)\n    translate([0, -25, 30])\n    rotate([0, 0, 0])\n    linear_extrude(height=2)\n    polygon(points=[[0, 0], [-15, -20], [15, -20]]);\n}\n\n// Tail fin\nmodule tail_fin() {\n    color(blue)\n    translate([0, 30, 20])\n    rotate([0, 10, 0])\n    difference() {\n        union() {\n            // Main tail\n            translate([0, 0, 0])\n            scale([1, 1.5, 0.3])\n            sphere(20);\n            \n            // Lower fin\n            translate([0, 25, -5])\n            rotate([30, 0, 0])\n            scale([0.8, 1, 0.2])\n            sphere(15);\n        }\n        // Cutout for shape\n        translate([0, 10, 5])\n        cube([40, 40, 10], center=true);\n    }\n}\n\n// Eyes\nmodule eyes() {\n    // Left eye\n    color(dark_blue)\n    translate([-12, -20, 30])\n    rotate([0, 10, 0])\n    cylinder(2, 8, 8);\n    \n    // Right eye\n    translate([12, -20, 30])\n    rotate([0, -10, 0])\n    cylinder(2, 8, 8);\n    \n    // Eye shine\n    color(white)\n    translate([-10, -18, 33])\n    sphere(2);\n    translate([14, -18, 33])\n    sphere(2);\n}\n\n// Mouth\nmodule mouth() {\n    color(pink)\n    translate([0, -25, 20])\n    rotate([0, 0, 0])\n    linear_extrude(height=2)\n    polygon(points=[[-8, 0], [-4, -5], [4, -5], [8, 0]]);\n}\n\n// Stripes pattern\nmodule stripes() {\n    color(light_blue)\n    for(i = [1:3]) {\n        translate([0, 0, 15 + i*5])\n        rotate([0, 0, 0])\n        cylinder(1, 20 - i*2, 20 - i*2);\n    }\n}\n\n// Small fins\nmodule side_fins() {\n    color(blue)\n    // Left fin\n    translate([-25, 0, 15])\n    rotate([0, 0, -30])\n    scale([0.5, 1, 0.2])\n    sphere(10);\n    \n    // Right fin\n    translate([25, 0, 15])\n    rotate([0, 0, 30])\n    scale([0.5, 1, 0.2])\n    sphere(10);\n}\n\n// Base assembly\nunion() {\n    body();\n    light_orb();\n    dorsal_fin();\n    tail_fin();\n    eyes();\n    mouth();\n    stripes();\n    side_fins();\n}",
    "renders": true
  },
  {
    "pokemon": "pichu",
    "openscad_code": "// Pichu - Realistic Style, Medium Complexity\n// Overall dimensions: ~80mm tall\n// 3D-printable with no severe overhangs\n\n$fn = 64;                       // smooth spheres & cylinders\nwall = 1.2;                     // minimum wall thickness for FDM\n\nmodule pichu() {\n    // main body assembly\n    union() {\n        // head\n        translate([0, 0, 45])\n        color(\"yellow\")\n        sphere(d = 35);\n\n        // torso\n        translate([0, 0, 20])\n        color(\"yellow\")\n        sphere(d = 30);\n\n        // ears\n        for (x = [-1, 1])\n            translate([x*12, 0, 60])\n            rotate([0, x*10, 0])\n            ear(x);\n\n        // arms\n        for (x = [-1, 1])\n            translate([x*17, 0, 30])\n            rotate([0, 0, x*20])\n            arm(x);\n\n        // legs\n        for (x = [-1, 1])\n            translate([x*9, 0, 8])\n            leg(x);\n\n        // tail\n        translate([0, -22, 25])\n        rotate([90, 0, 0])\n        tail();\n\n        // facial details\n        face();\n    }\n}\n\n// ear module with black tip\nmodule ear(side) {\n    color(\"yellow\")\n    cylinder(h = 20, d1 = 8, d2 = 6);\n    translate([0, 0, 20])\n    color(\"black\")\n    cylinder(h = 8, d1 = 6, d2 = 0);\n}\n\n// arm module\nmodule arm(side) {\n    color(\"yellow\")\n    rotate([0, 90, 0])\n    cylinder(h = 12, d = 6);\n}\n\n// leg module\nmodule leg(side) {\n    color(\"yellow\")\n    translate([0, 0, -8])\n    cylinder(h = 16, d1 = 9, d2 = 6);\n}\n\n// tail module – lightning bolt shape built from stacked blocks\nmodule tail() {\n    color(\"black\")\n    union() {\n        // vertical stem\n        cube([8, 8, 25], center = true);\n\n        // first zig\n        translate([6, 0, 8])\n        cube([10, 8, 8], center = true);\n\n        // second zag\n        translate([-5, 0, -8])\n        cube([10, 8, 8], center = true);\n\n        // base\n        translate([0, 0, -18])\n        cube([10, 8, 8], center = true);\n    }\n}\n\n// facial features\nmodule face() {\n    // eyes\n    for (x = [-1, 1])\n        translate([x*7, 12, 45])\n        color(\"black\")\n        sphere(d = 4);\n\n    // red cheek pouches\n    for (x = [-1, 1])\n        translate([x*11, 8, 42])\n        color(\"red\")\n        sphere(d = 5);\n\n    // mouth\n    translate([0, 15, 40])\n    rotate([90, 0, 0])\n    color(\"black\")\n    cylinder(h = 1, d1 = 6, d2 = 0);\n}\n\n// render the complete model\npichu();",
    "renders": true
  },
  {
    "pokemon": "cleffa",
    "openscad_code": "// Cleffa Pokemon - Medium Complexity Realistic Style\n// Overall size: ~60mm tall\n\n// Main body color - pink\nmodule body_color() color([1, 0.7, 0.8]);\n\n// Eye color - black\nmodule eye_color() color([0, 0, 0]);\n\n// Inner ear color - darker pink\nmodule inner_ear_color() color([0.8, 0.4, 0.6]);\n\n// Star tip color - yellow\nmodule star_color() color([1, 0.9, 0]);\n\n// Main body - egg shape\nmodule body() {\n    body_color() {\n        translate([0, 0, 15])\n            scale([1, 1.2, 1.3])\n                sphere(d=30, $fn=32);\n        \n        // Bottom rounder\n        translate([0, 0, 5])\n            sphere(d=28, $fn=32);\n    }\n}\n\n// Ears - pointed with inner detail\nmodule ear(side) {\n    body_color() {\n        translate([side * 12, 0, 35])\n            rotate([0, side * -20, 0])\n                rotate([0, 0, side * -15])\n                    scale([0.7, 1, 2])\n                        sphere(d=12, $fn=16);\n        \n        translate([side * 12, 0, 42])\n            rotate([0, side * -20, 0])\n                rotate([0, 0, side * -15])\n                    scale([0.4, 0.8, 1.5])\n                        cylinder(d1=8, d2=0, h=8);\n    }\n    \n    inner_ear_color() {\n        translate([side * 12, 0.5, 38])\n            rotate([0, side * -20, 0])\n                rotate([0, 0, side * -15])\n                    scale([0.5, 0.6, 1.8])\n                        sphere(d=8, $fn=16);\n    }\n}\n\n// Eyes with white highlight\nmodule eye(side) {\n    eye_color() {\n        translate([side * 8, 10, 25])\n            sphere(d=4, $fn=16);\n        \n        // Highlight\n        color([1, 1, 1])\n            translate([side * 8.5, 10.5, 27])\n                sphere(d=1.5, $fn=8);\n    }\n}\n\n// Mouth - small curved line\nmodule mouth() {\n    body_color() {\n        difference() {\n            translate([0, 12, 20])\n                sphere(d=3, $fn=16);\n            \n            translate([0, 13, 21])\n                sphere(d=3.5, $fn=16);\n        }\n    }\n}\n\n// Arms - simple stubby arms\nmodule arm(side) {\n    body_color() {\n        translate([side * 12, 10, 15])\n            rotate([0, 0, side * 30])\n                rotate([90, 0, 0])\n                    cylinder(d1=6, d2=4, h=8);\n    }\n}\n\n// Feet - small rounded feet\nmodule foot(side) {\n    body_color() {\n        translate([side * 8, 8, 5])\n            sphere(d=8, $fn=16);\n    }\n}\n\n// Star-shaped curl on head\nmodule star_curl() {\n    star_color() {\n        for (i = [0:4]) {\n            rotate([0, 0, i * 72])\n                translate([0, 0, 48])\n                    rotate([90, 0, 0])\n                        scale([0.3, 0.3, 1])\n                            cylinder(d1=6, d2=0, h=10);\n        }\n        \n        // Center sphere\n        translate([0, 0, 48])\n            sphere(d=4, $fn=16);\n    }\n}\n\n// Combine all parts\nunion() {\n    body();\n    \n    ear(-1);\n    ear(1);\n    \n    eye(-1);\n    eye(1);\n    \n    mouth();\n    \n    arm(-1);\n    arm(1);\n    \n    foot(-1);\n    foot(1);\n    \n    star_curl();\n}",
    "renders": true
  },
  {
    "pokemon": "igglybuff",
    "openscad_code": "// Igglybuff Pokemon - Realistic Style, Medium Complexity\n// Size: ~70mm height, 3D printable\n\n$fn = 64;\n\nmodule igglybuff_body() {\n    color(\"#FFB6C1\")  // Light pink\n    union() {\n        // Main spherical body\n        sphere(d = 45);\n        \n        // Slightly flattened bottom for stability\n        translate([0, 0, -22.5])\n        difference() {\n            sphere(d = 45);\n            translate([0, 0, -5])\n            cube([50, 50, 10], center = true);\n        }\n    }\n}\n\nmodule igglybuff_ears() {\n    color(\"#FFB6C1\")\n    union() {\n        // Left ear\n        translate([-15, 20, 15])\n        rotate([0, 15, -20])\n        difference() {\n            scale([0.8, 0.8, 1.5])\n            sphere(d = 20);\n            translate([0, -5, -15])\n            cube([15, 15, 30], center = true);\n        }\n        \n        // Right ear\n        translate([15, 20, 15])\n        rotate([0, 15, 20])\n        scale([0.8, 0.8, 1.5])\n        sphere(d = 20);\n    }\n}\n\nmodule igglybuff_hair_curl() {\n    color(\"#FF69B4\")  // Hot pink\n    translate([0, -20, 25])\n    rotate([90, 0, 0])\n    scale([1, 1, 0.5])\n    union() {\n        // Hair curl made of torus segments\n        torus(5, 2);\n        translate([0, 0, 5])\n        torus(4, 2);\n        translate([0, 0, 10])\n        torus(3, 2);\n    }\n}\n\nmodule torus(r_major, r_minor) {\n    rotate_extrude()\n    translate([r_major, 0, 0])\n    circle(r = r_minor);\n}\n\nmodule igglybuff_arms() {\n    color(\"#FFB6C1\")\n    union() {\n        // Left arm\n        translate([-20, 10, -5])\n        rotate([0, -30, 0])\n        scale([0.5, 0.5, 1])\n        sphere(d = 12);\n        \n        // Right arm\n        translate([20, 10, -5])\n        rotate([0, 30, 0])\n        scale([0.5, 0.5, 1])\n        sphere(d = 12);\n    }\n}\n\nmodule igglybuff_legs() {\n    color(\"#FFB6C1\")\n    union() {\n        // Left leg\n        translate([-10, -15, -20])\n        scale([0.6, 0.6, 1])\n        sphere(d = 15);\n        \n        // Right leg\n        translate([10, -15, -20])\n        scale([0.6, 0.6, 1])\n        sphere(d = 15);\n    }\n}\n\nmodule igglybuff_face() {\n    color(\"#FFB6C1\")\n    difference() {\n        // Face area indent\n        translate([0, 22, 0])\n        sphere(d = 30);\n    }\n    \n    // Eyes\n    color(\"#000000\")\n    union() {\n        translate([-8, 22, 8])\n        sphere(d = 4);\n        translate([8, 22, 8])\n        sphere(d = 4);\n    }\n    \n    // Eye highlights\n    color(\"#FFFFFF\")\n    union() {\n        translate([-7, 23, 9])\n        sphere(d = 1.5);\n        translate([9, 23, 9])\n        sphere(d = 1.5);\n    }\n    \n    // Mouth\n    color(\"#FF1493\")\n    translate([0, 22, 2])\n    rotate([90, 0, 0])\n    cylinder(h = 0.5, d1 = 6, d2 = 4);\n}\n\nmodule igglybuff_markings() {\n    color(\"#FF69B4\")\n    // Small circular markings on cheeks\n    translate([-10, 20, 0])\n    sphere(d = 3);\n    translate([10, 20, 0])\n    sphere(d = 3);\n}\n\n// Main assembly\nigglybuff_body();\nigglybuff_ears();\nigglybuff_hair_curl();\nigglybuff_arms();\nigglybuff_legs();\nigglybuff_face();\nigglybuff_markings();",
    "renders": true
  },
  {
    "pokemon": "togepi",
    "openscad_code": "// Togepi - Realistic Style, Medium Complexity\n// 3D printable, no overhangs, 60mm height\n\n$fn = 36;\n\nmodule egg_shell() {\n    color(\"#FFF8DC\") \n    sphere(d = 40);\n}\n\nmodule head() {\n    color(\"#F5DEB3\") \n    translate([0, 0, 20])\n    sphere(d = 35);\n}\n\nmodule shell_pattern() {\n    color(\"#F5DEB3\") {\n        for(i = [0:5]) {\n            rotate([0, 0, i * 60])\n            translate([0, 17, 0])\n            scale([0.8, 0.3, 0.2])\n            sphere(d = 15);\n        }\n        for(i = [0:5]) {\n            rotate([0, 0, i * 60 + 30])\n            translate([0, 14, -5])\n            scale([0.5, 0.3, 0.2])\n            sphere(d = 12);\n        }\n    }\n}\n\nmodule spikes() {\n    color(\"#FF6B6B\") {\n        // Top spike\n        translate([0, 0, 35])\n        rotate([0, 0, 0])\n        cylinder(h = 8, d1 = 8, d2 = 2);\n        \n        // Side spikes\n        for(i = [0:2]) {\n            rotate([0, 0, i * 120])\n            translate([0, 18, 10])\n            rotate([90, 0, 0])\n            cylinder(h = 8, d1 = 6, d2 = 2);\n        }\n    }\n}\n\nmodule body() {\n    color(\"#FFF8DC\") \n    translate([0, 0, -15])\n    sphere(d = 30);\n}\n\nmodule arms() {\n    color(\"#F5DEB3\") {\n        // Left arm\n        translate([-15, 0, 0])\n        rotate([45, 0, -30])\n        cylinder(h = 12, d1 = 6, d2 = 4);\n        \n        // Right arm\n        translate([15, 0, 0])\n        rotate([45, 0, 30])\n        cylinder(h = 12, d1 = 6, d2 = 4);\n    }\n}\n\nmodule feet() {\n    color(\"#F5DEB3\") {\n        // Left foot\n        translate([-8, 0, -25])\n        rotate([0, 0, -20])\n        scale([1.2, 0.8, 0.5])\n        sphere(d = 8);\n        \n        // Right foot\n        translate([8, 0, -25])\n        rotate([0, 0, 20])\n        scale([1.2, 0.8, 0.5])\n        sphere(d = 8);\n    }\n}\n\nmodule eyes() {\n    color(\"#000000\") {\n        translate([-6, 12, 22])\n        sphere(d = 3);\n        translate([6, 12, 22])\n        sphere(d = 3);\n    }\n    \n    color(\"#FFFFFF\") {\n        translate([-5, 13, 23.5])\n        sphere(d = 1);\n        translate([7, 13, 23.5])\n        sphere(d = 1);\n    }\n}\n\nmodule mouth() {\n    color(\"#FF69B4\") \n    translate([0, 8, 18])\n    rotate([0, 0, 0])\n    scale([1, 0.5, 0.3])\n    cylinder(h = 1, d = 6);\n}\n\nmodule egg_crack() {\n    color(\"#000000\", 0.3) \n    translate([0, 0, 15])\n    rotate([90, 0, 0])\n    linear_extrude(height = 2)\n    offset(delta = 0.5)\n    polygon(points=[[0,0], [5,2], [3,5], [-2,3], [-5,0], [-3,-4], [2,-3]]);\n}\n\nunion() {\n    egg_shell();\n    body();\n    head();\n    shell_pattern();\n    spikes();\n    arms();\n    feet();\n    eyes();\n    mouth();\n    egg_crack();\n}",
    "renders": true
  },
  {
    "pokemon": "togetic",
    "openscad_code": "// Togetic - OpenSCAD model\n// Medium complexity realistic style\n// Overall height: ~75 mm\n\n$fn = 32;\nbody_color = [1, 0.9, 0.7]; // Cream color\nshell_color = [1, 1, 1];    // White shell\nred_color = [0.9, 0.2, 0.2]; // Red/blue markings\nblue_color = [0.2, 0.3, 0.9];\n\n// Main body module\nmodule body() {\n    color(body_color)\n    union() {\n        // Main egg-shaped body\n        scale([1, 1.2, 1.3])\n            sphere(15);\n        \n        // Lower body bulge\n        translate([0, 0, -10])\n            scale([0.8, 0.9, 0.8])\n                sphere(12);\n    }\n}\n\n// Shell pattern on body\nmodule shell_pattern() {\n    color(shell_color)\n    union() {\n        // Triangular shell pieces\n        for(i = [0:2]) {\n            rotate([0, 0, i*120])\n                translate([0, 12, 12])\n                    rotate([45, 0, 0])\n                        cylinder(h=8, r1=8, r2=0);\n        }\n        \n        // Circular center piece\n        translate([0, 0, 18])\n            scale([1, 1, 0.3])\n                sphere(8);\n    }\n}\n\n// Wings module\nmodule wings() {\n    color(shell_color)\n    union() {\n        // Left wing\n        translate([-20, 0, 8])\n            rotate([0, -20, -30])\n                scale([0.1, 1.2, 1])\n                    sphere(15);\n        \n        // Right wing\n        translate([20, 0, 8])\n            rotate([0, -20, 30])\n                scale([0.1, 1.2, 1])\n                    sphere(15);\n    }\n}\n\n// Head with features\nmodule head() {\n    color(body_color)\n    union() {\n        // Main head\n        translate([0, -10, 25])\n            scale([1.1, 0.9, 1])\n                sphere(12);\n        \n        // Beak\n        color(red_color)\n        translate([0, -22, 22])\n            rotate([20, 0, 0])\n                scale([1, 2, 0.8])\n                    cylinder(h=8, r1=3, r2=0);\n        \n        // Eyes\n        color([0, 0, 0])\n        for(x = [-5, 5]) {\n            translate([x, -15, 28])\n                sphere(2);\n        }\n        \n        // Eyebrows\n        color(blue_color)\n        for(x = [-7, 7]) {\n            translate([x, -18, 30])\n                rotate([0, 30, 0])\n                    scale([0.5, 2, 0.3])\n                        sphere(2);\n        }\n    }\n}\n\n// Ears module\nmodule ears() {\n    color(body_color)\n    union() {\n        // Left ear\n        translate([-10, -5, 35])\n            rotate([0, 0, -30])\n                scale([0.5, 0.5, 2])\n                    sphere(8);\n        \n        // Right ear\n        translate([10, -5, 35])\n            rotate([0, 0, 30])\n                scale([0.5, 0.5, 2])\n                    sphere(8);\n    }\n}\n\n// Arms\nmodule arms() {\n    color(body_color)\n    union() {\n        // Left arm\n        translate([-15, 5, 0])\n            rotate([0, 0, 45])\n                cylinder(h=10, r=3);\n        \n        // Right arm\n        translate([15, 5, 0])\n            rotate([0, 0, -45])\n                cylinder(h=10, r=3);\n    }\n}\n\n// Feet\nmodule feet() {\n    color(red_color)\n    union() {\n        // Left foot\n        translate([-8, 5, -18])\n            scale([1, 1.5, 0.5])\n                sphere(5);\n        \n        // Right foot\n        translate([8, 5, -18])\n            scale([1, 1.5, 0.5])\n                sphere(5);\n    }\n}\n\n// Tail\nmodule tail() {\n    color(shell_color)\n    union() {\n        // Main tail\n        translate([0, 15, 0])\n            rotate([0, 0, 0])\n                scale([0.8, 2, 0.3])\n                    sphere(10);\n        \n        // Tail tip\n        color(red_color)\n        translate([0, 28, 0])\n            sphere(3);\n    }\n}\n\n// Markings on shell\nmodule markings() {\n    color(blue_color)\n    for(i = [0:2]) {\n        rotate([0, 0, i*120])\n            translate([0, 8, 14])\n                scale([1, 0.2, 0.2])\n                    sphere(5);\n    }\n    \n    color(red_color)\n    for(i = [0:2]) {\n        rotate([0, 0, i*120 + 60])\n            translate([0, 8, 14])\n                scale([1, 0.2, 0.2])\n                    sphere(5);\n    }\n}\n\n// Assemble the complete model\nunion() {\n    body();\n    shell_pattern();\n    wings();\n    head();\n    ears();\n    arms();\n    feet();\n    tail();\n    markings();\n}",
    "renders": true
  },
  {
    "pokemon": "natu",
    "openscad_code": "// Natu - Realistic Style (medium complexity)\n// Height: ~60mm when printed\n\n// Parameters\nbody_radius = 12;\nhead_radius = 15;\nbeak_length = 8;\nbeak_width = 6;\nbeak_height = 4;\neye_radius = 3;\npupil_radius = 1.5;\nwing_length = 20;\nwing_width = 15;\ntail_length = 18;\ntail_width = 12;\nleg_length = 8;\nleg_width = 3;\nfoot_length = 5;\nfoot_width = 4;\n\n// Colors\ncolor_body = [0.8, 0.2, 0.2];      // Red\ncolor_wings = [0.9, 0.9, 0.9];    // Light gray\ncolor_beak = [1, 0.8, 0];         // Yellow\ncolor_eyes = [0.1, 0.1, 0.1];     // Black\ncolor_legs = [1, 0.8, 0];         // Yellow\n\nmodule natu_body() {\n    // Main body sphere\n    color(color_body)\n    sphere(r=body_radius, $fn=32);\n    \n    // Head\n    translate([0, 0, body_radius + head_radius - 5])\n    color(color_body)\n    sphere(r=head_radius, $fn=32);\n}\n\nmodule natu_beak() {\n    // Main beak\n    translate([head_radius - 2, 0, body_radius + head_radius])\n    rotate([0, 90, 0])\n    color(color_beak)\n    cylinder(h=beak_length, r1=beak_width/2, r2=0, $fn=16);\n}\n\nmodule natu_eyes() {\n    // Left eye\n    translate([head_radius - 3, -6, body_radius + head_radius + 5])\n    color(color_eyes)\n    sphere(r=eye_radius, $fn=16);\n    \n    // Left pupil\n    translate([head_radius - 1.5, -6.5, body_radius + head_radius + 6])\n    color([0, 0, 0])\n    sphere(r=pupil_radius, $fn=8);\n    \n    // Right eye\n    translate([head_radius - 3, 6, body_radius + head_radius + 5])\n    color(color_eyes)\n    sphere(r=eye_radius, $fn=16);\n    \n    // Right pupil\n    translate([head_radius - 1.5, 6.5, body_radius + head_radius + 6])\n    color([0, 0, 0])\n    sphere(r=pupil_radius, $fn=8);\n}\n\nmodule natu_wing() {\n    // Wing base\n    color(color_wings)\n    difference() {\n        // Main wing shape\n        translate([0, 0, -wing_width/2])\n        cube([wing_length, wing_width/3, wing_width], center=true);\n        \n        // Wing tip cutout\n        translate([wing_length/2, 0, -wing_width/2 - 1])\n        cube([wing_length/2 + 2, wing_width + 2, wing_width + 2], center=true);\n    }\n    \n    // Wing feathers\n    for(i = [1:3]) {\n        translate([-5 + i*3, 0, wing_width/4])\n        rotate([0, -30 + i*15, 0])\n        color(color_wings)\n        cube([wing_length/2, wing_width/6, wing_width/2]);\n    }\n}\n\nmodule natu_wings() {\n    // Left wing\n    translate([-body_radius - 2, -body_radius - 5, body_radius])\n    rotate([0, 0, 30])\n    natu_wing();\n    \n    // Right wing\n    translate([-body_radius - 2, body_radius + 5, body_radius])\n    rotate([0, 0, -30])\n    mirror([0, 1, 0])\n    natu_wing();\n}\n\nmodule natu_tail() {\n    // Tail base\n    translate([-body_radius - tail_length/2, 0, -body_radius/2])\n    color(color_wings)\n    cube([tail_length, tail_width/3, tail_width], center=true);\n    \n    // Tail feathers\n    for(i = [-1:1]) {\n        translate([-body_radius - tail_length + 2, i*3, -body_radius/2 + i*2])\n        rotate([0, 0, -20 + i*20])\n        color(color_wings)\n        cube([tail_length/2, 2, 4]);\n    }\n}\n\nmodule natu_leg() {\n    // Upper leg\n    color(color_legs)\n    cylinder(h=leg_length, r=leg_width/2, $fn=8);\n    \n    // Foot\n    translate([0, foot_width/2, -leg_length])\n    color(color_legs)\n    cube([foot_length, foot_width, leg_width/2], center=true);\n    \n    // Toes\n    for(i = [-1, 0, 1]) {\n        translate([foot_length/2 + 1, i*foot_width/3, -leg_length])\n        color(color_legs)\n        cube([2, 1, 1]);\n    }\n}\n\nmodule natu_legs() {\n    // Left leg\n    translate([0, -body_radius/2, -body_radius - leg_length/2])\n    rotate([0, 10, 0])\n    natu_leg();\n    \n    // Right leg\n    translate([0, body_radius/2, -body_radius - leg_length/2])\n    rotate([0, -10, 0])\n    natu_leg();\n}\n\n// Main assembly\nunion() {\n    natu_body();\n    natu_beak();\n    natu_eyes();\n    natu_wings();\n    natu_tail();\n    natu_legs();\n}",
    "renders": true
  },
  {
    "pokemon": "xatu",
    "openscad_code": "// Xatu OpenSCAD Model - Realistic Style, Medium Complexity\n// Size: ~70mm tall\n\n// Main colors\n$fa = 2;\n$fs = 0.5;\n\nmodule body() {\n    color([0.2, 0.15, 0.35]) {\n        // Main body cone\n        cylinder(h=25, r1=12, r2=8, $fn=32);\n        translate([0,0,25])\n            sphere(r=8, $fn=32);\n    }\n}\n\nmodule head() {\n    // Head sphere\n    color([0.25, 0.2, 0.4]) {\n        translate([0,0,33])\n            sphere(r=10, $fn=32);\n    }\n    \n    // Beak\n    color([1, 0.8, 0.4]) {\n        translate([0,-10,33])\n            rotate([90,0,0])\n                cylinder(h=12, r1=3, r2=0, $fn=16);\n    }\n    \n    // Eyes\n    color([1,1,1]) {\n        translate([-4,2,35])\n            sphere(r=2.5, $fn=16);\n        translate([4,2,35])\n            sphere(r=2.5, $fn=16);\n    }\n    \n    // Eye pupils\n    color([0,0,0]) {\n        translate([-4,3.5,35])\n            sphere(r=1, $fn=8);\n        translate([4,3.5,35])\n            sphere(r=1, $fn=8);\n    }\n    \n    // Eye markings\n    color([0.4, 0.3, 0.6]) {\n        translate([-4,2,37])\n            cube([1,0.5,4], center=true);\n        translate([4,2,37])\n            cube([1,0.5,4], center=true);\n    }\n}\n\nmodule crest() {\n    color([0.9, 0.7, 0.9]) {\n        // Left crest\n        translate([-8,0,40])\n            rotate([0,-20,0])\n                cylinder(h=15, r1=3, r2=1, $fn=8);\n        translate([-12,0,50])\n            sphere(r=2, $fn=8);\n        \n        // Right crest\n        translate([8,0,40])\n            rotate([0,20,0])\n                cylinder(h=15, r1=3, r2=1, $fn=8);\n        translate([12,0,50])\n            sphere(r=2, $fn=8);\n    }\n}\n\nmodule wings() {\n    module wing() {\n        color([0.3, 0.25, 0.45]) {\n            // Main wing\n            translate([0,0,0])\n                cube([20,2,30], center=true);\n            \n            // Wing tip\n            translate([0,0,15])\n                rotate([30,0,0])\n                    cube([15,2,20], center=true);\n            \n            // Wing patterns\n            color([0.9, 0.7, 0.9]) {\n                translate([0,1.1,5])\n                    cube([15,0.5,8], center=true);\n                translate([0,1.1,-5])\n                    cube([12,0.5,6], center=true);\n            }\n        }\n    }\n    \n    // Left wing\n    translate([-15,0,20])\n        rotate([0,0,30])\n            wing();\n    \n    // Right wing\n    translate([15,0,20])\n        rotate([0,0,-30])\n            mirror([1,0,0])\n                wing();\n}\n\nmodule tail() {\n    color([0.35, 0.3, 0.5]) {\n        // Tail feathers\n        for(i=[-1:1]) {\n            translate([i*3,-12,15])\n                rotate([30,0,0])\n                    cylinder(h=20, r1=2, r2=1, $fn=8);\n        }\n    }\n}\n\nmodule feet() {\n    color([1, 0.8, 0.4]) {\n        // Left foot\n        translate([-5,-8,0])\n            cylinder(h=8, r=2, $fn=8);\n        translate([-5,-8,0])\n            rotate([90,0,0])\n                cylinder(h=5, r=1.5, $fn=8);\n        \n        // Right foot\n        translate([5,-8,0])\n            cylinder(h=8, r=2, $fn=8);\n        translate([5,-8,0])\n            rotate([90,0,0])\n                cylinder(h=5, r=1.5, $fn=8);\n    }\n}\n\nmodule chest_pattern() {\n    color([0.9, 0.7, 0.9]) {\n        translate([0,5,15])\n            rotate([90,0,0])\n                cylinder(h=0.5, r=6, $fn=32);\n        translate([0,5,20])\n            rotate([90,0,0])\n                cylinder(h=0.5, r=4, $fn=32);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    crest();\n    wings();\n    tail();\n    feet();\n    chest_pattern();\n}",
    "renders": true
  },
  {
    "pokemon": "mareep",
    "openscad_code": "// Mareep in realistic style with medium complexity\n// Using basic OpenSCAD primitives and transformations\n\n// Colors\nbody_color = \"#F5F5DC\";\nwool_color = \"#FFF8DC\";\nblue_color = \"#4169E1\";\nblack_color = \"#000000\";\n\n// Main module\nmodule mareep() {\n    // Body\n    color(body_color) \n    union() {\n        // Torso\n        translate([0, 0, 15])\n            scale([1.2, 0.8, 1])\n            sphere(10);\n        \n        // Belly\n        translate([0, -5, 12])\n            scale([1.1, 0.7, 0.8])\n            sphere(8);\n    }\n    \n    // Wool (fluffy coat) - using multiple spheres for texture\n    color(wool_color) \n    for(i = [-8:4:8]) {\n        for(j = [-6:4:6]) {\n            translate([i, j-2, 20])\n                sphere(4);\n        }\n    }\n    for(i = [-6:4:6]) {\n        for(j = [-4:4:4]) {\n            translate([i, j-2, 24])\n                sphere(3.5);\n        }\n    }\n    \n    // Head\n    color(body_color)\n    union() {\n        translate([0, 20, 18])\n            scale([0.8, 0.8, 1])\n            sphere(8);\n        \n        // Muzzle\n        translate([0, 27, 16])\n            scale([0.6, 0.4, 0.5])\n            sphere(6);\n    }\n    \n    // Ears\n    color(body_color)\n    union() {\n        // Left ear\n        translate([-6, 18, 22])\n            rotate([0, 0, -30])\n            scale([0.3, 0.1, 1.5])\n            cylinder(h=10, r=3);\n        \n        // Right ear\n        translate([6, 18, 22])\n            rotate([0, 0, 30])\n            scale([0.3, 0.1, 1.5])\n            cylinder(h=10, r=3);\n        \n        // Blue ear tips\n        color(blue_color)\n        translate([-6, 18, 31])\n            sphere(2);\n        translate([6, 18, 31])\n            sphere(2);\n    }\n    \n    // Eyes\n    color(black_color)\n    union() {\n        translate([-3, 25, 19])\n            sphere(1.5);\n        translate([3, 25, 19])\n            sphere(1.5);\n    }\n    \n    // Legs\n    color(body_color)\n    union() {\n        // Front legs\n        translate([-5, 10, 5])\n            cylinder(h=10, r=3);\n        translate([5, 10, 5])\n            cylinder(h=10, r=3);\n        \n        // Back legs\n        translate([-5, -10, 5])\n            cylinder(h=10, r=3);\n        translate([5, -10, 5])\n            cylinder(h=10, r=3);\n    }\n    \n    // Tail\n    color(body_color)\n    union() {\n        translate([0, -20, 15])\n            rotate([0, 0, 0])\n            cylinder(h=15, r=2);\n        \n        // Tail sphere\n        translate([0, -30, 15])\n            sphere(5);\n        \n        // Blue stripes on tail\n        color(blue_color)\n        for(i = [0:3:12]) {\n            translate([0, -20-i, 15])\n                scale([1, 0.2, 1])\n                sphere(3);\n        }\n    }\n}\n\n// Create the model\nmareep();",
    "renders": true
  },
  {
    "pokemon": "flaaffy",
    "openscad_code": "// Flaaffy Pokemon - Realistic Style, Medium Complexity\n// Size: 60mm height, 3D printable\n\n$fn = 32;\n\n// Main colors\ncolor_pink = [0.96, 0.71, 0.88];\ncolor_white = [0.98, 0.98, 0.98];\ncolor_blue = [0.53, 0.81, 0.92];\ncolor_black = [0.1, 0.1, 0.1];\n\n// Body\nmodule body() {\n    color(color_pink)\n    union() {\n        // Main body\n        translate([0, 0, 20])\n        scale([1.2, 1, 1.3])\n        sphere(15);\n        \n        // Belly\n        color(color_white)\n        translate([0, -10, 18])\n        scale([0.8, 0.6, 1])\n        sphere(12);\n    }\n}\n\n// Head\nmodule head() {\n    color(color_pink)\n    union() {\n        // Main head\n        translate([0, 0, 40])\n        scale([1, 0.9, 1.1])\n        sphere(12);\n        \n        // Muzzle\n        color(color_white)\n        translate([0, 8, 38])\n        scale([0.7, 0.8, 0.6])\n        sphere(8);\n    }\n}\n\n// Ears - characteristic Flaaffy ears with stripes\nmodule ears() {\n    color(color_pink)\n    union() {\n        // Left ear\n        translate([-8, 0, 50])\n        rotate([0, 15, -20])\n        cylinder(h = 20, r1 = 5, r2 = 3);\n        \n        // Right ear\n        translate([8, 0, 50])\n        rotate([0, 15, 20])\n        cylinder(h = 20, r1 = 5, r2 = 3);\n        \n        // Ear stripes\n        color(color_blue)\n        for(i = [0:1]) {\n            translate([-8, 0, 55 - i*8])\n            rotate([0, 15, -20])\n            scale([0.8, 0.8, 0.3])\n            cylinder(h = 3, r1 = 5, r2 = 3);\n            \n            translate([8, 0, 55 - i*8])\n            rotate([0, 15, 20])\n            scale([0.8, 0.8, 0.3])\n            cylinder(h = 3, r1 = 5, r2 = 3);\n        }\n    }\n}\n\n// Tail with sphere\nmodule tail() {\n    color(color_pink)\n    union() {\n        // Tail base\n        translate([0, -20, 22])\n        rotate([0, 0, -30])\n        cylinder(h = 25, r1 = 6, r2 = 4);\n        \n        // Tail sphere\n        color(color_blue)\n        translate([0, -38, 18])\n        sphere(8);\n        \n        // Tail stripes\n        color(color_blue)\n        for(i = [0:1]) {\n            translate([0, -28 - i*8, 22])\n            rotate([0, 0, -30])\n            scale([1, 1, 0.2])\n            cylinder(h = 5, r = 5.5);\n        }\n    }\n}\n\n// Legs\nmodule legs() {\n    color(color_pink)\n    union() {\n        // Front legs\n        translate([-7, 5, 10])\n        cylinder(h = 15, r = 4);\n        \n        translate([7, 5, 10])\n        cylinder(h = 15, r = 4);\n        \n        // Back legs\n        translate([-7, -12, 8])\n        cylinder(h = 17, r = 5);\n        \n        translate([7, -12, 8])\n        cylinder(h = 17, r = 5);\n    }\n}\n\n// Feet\nmodule feet() {\n    color(color_white)\n    union() {\n        for(x = [-10, 10]) {\n            for(y = [-15, 12]) {\n                translate([x, y, 0])\n                scale([1.2, 1.5, 0.5])\n                sphere(4);\n            }\n        }\n    }\n}\n\n// Eyes\nmodule eyes() {\n    color(color_black)\n    union() {\n        // Left eye\n        translate([-4, 10, 42])\n        scale([1, 1.2, 0.5])\n        sphere(2);\n        \n        // Right eye\n        translate([4, 10, 42])\n        scale([1, 1.2, 0.5])\n        sphere(2);\n    }\n}\n\n// Wool tufts on head\nmodule wool() {\n    color(color_white)\n    union() {\n        // Wool spheres on head\n        translate([0, 0, 52])\n        sphere(5);\n        \n        translate([-3, -2, 54])\n        sphere(4);\n        \n        translate([3, -2, 54])\n        sphere(4);\n    }\n}\n\n// Assembly\nscale([0.7, 0.7, 0.7])\nunion() {\n    body();\n    head();\n    ears();\n    tail();\n    legs();\n    feet();\n    eyes();\n    wool();\n}",
    "renders": true
  },
  {
    "pokemon": "ampharos",
    "openscad_code": "// Ampharos - Medium complexity realistic style\n// Total height ~80mm\n\n// Colors\n$fa = 2;\n$fs = 0.5;\nbody_color = \"#FFE4B5\";\nbelly_color = \"#FFFACD\";\ntail_color = \"#FFD700\";\nred_color = \"#FF4500\";\nblack_color = \"#000000\";\nwhite_color = \"#FFFFFF\";\n\n// Module for body\nmodule body() {\n    color(body_color)\n    union() {\n        // Main body\n        translate([0, 0, 15])\n            scale([1, 0.8, 1.2])\n            sphere(d=25);\n        \n        // Belly\n        color(belly_color)\n        translate([0, -9.5, 15])\n            scale([0.7, 0.3, 1])\n            sphere(d=20);\n        \n        // Neck\n        translate([0, 0, 30])\n            cylinder(d1=20, d2=15, h=10);\n    }\n}\n\n// Module for head\nmodule head() {\n    color(body_color)\n    union() {\n        // Main head\n        translate([0, 0, 45])\n            scale([0.9, 1, 1.2])\n            sphere(d=20);\n        \n        // Muzzle\n        translate([0, -8, 45])\n            scale([0.6, 0.5, 0.6])\n            sphere(d=12);\n        \n        // Ears\n        for(side = [-1, 1]) {\n            translate([side*7, 0, 58])\n                rotate([0, side*15, 0])\n                cylinder(d1=6, d2=4, h=15);\n        }\n    }\n}\n\n// Module for tail spheres\nmodule tail_spheres() {\n    color(tail_color)\n    union() {\n        // Tail segments\n        translate([0, 0, -5])\n            sphere(d=15);\n        translate([0, 0, -15])\n            sphere(d=12);\n        translate([0, 0, -24])\n            sphere(d=10);\n        translate([0, 0, -32])\n            sphere(d=8);\n    }\n}\n\n// Module for tail bulb\nmodule tail_bulb() {\n    color(tail_color)\n    union() {\n        // Main bulb\n        translate([0, 0, -42])\n            sphere(d=18);\n        \n        // Red tip\n        color(red_color)\n        translate([0, 0, -50])\n            sphere(d=12);\n    }\n}\n\n// Module for arms\nmodule arms() {\n    color(body_color)\n    for(side = [-1, 1]) {\n        translate([side*12, 0, 25])\n            rotate([0, 0, side*20])\n            cylinder(d1=6, d2=5, h=12);\n        \n        translate([side*18, -5, 25])\n            sphere(d=5);\n    }\n}\n\n// Module for legs\nmodule legs() {\n    color(body_color)\n    for(side = [-1, 1]) {\n        translate([side*8, 0, 10])\n            cylinder(d=8, h=10);\n        \n        translate([side*8, -5, 5])\n            sphere(d=8);\n    }\n}\n\n// Module for eyes\nmodule eyes() {\n    for(side = [-1, 1]) {\n        // Eye whites\n        color(white_color)\n        translate([side*5, -8, 48])\n            sphere(d=4);\n        \n        // Pupils\n        color(black_color)\n        translate([side*6, -9.5, 49])\n            sphere(d=2);\n    }\n}\n\n// Module for nose and mouth\nmodule face_details() {\n    // Nose\n    color(black_color)\n    translate([0, -11, 44])\n        sphere(d=2);\n    \n    // Mouth\n    translate([0, -11, 42])\n        rotate([90, 0, 0])\n        cylinder(d=2, h=3, $fn=8);\n}\n\n// Module for stripes\nmodule stripes() {\n    color(red_color)\n    // Neck stripe\n    translate([0, 0, 33])\n        rotate([90, 0, 0])\n        cylinder(d1=21, d2=19, h=2);\n    \n    // Tail stripes\n    translate([0, 0, -12])\n        rotate([90, 0, 0])\n        cylinder(d1=13, d2=11, h=1.5);\n    \n    translate([0, 0, -26])\n        rotate([90, 0, 0])\n        cylinder(d1=11, d2=9, h=1.5);\n}\n\n// Main assembly\nunion() {\n    body();\n    head();\n    tail_spheres();\n    tail_bulb();\n    arms();\n    legs();\n    eyes();\n    face_details();\n    stripes();\n}",
    "renders": true
  },
  {
    "pokemon": "bellossom",
    "openscad_code": "// Bellossom Pokemon - Realistic Style with Medium Complexity\n// OpenSCAD 3D printable model\n\n// Color definitions\n$fa = 1; $fs = 0.4;\n\nmodule body() {\n    color(\"#4CAF50\") union() {\n        // Main body - bell shape\n        translate([0, 0, 20]) \n            scale([1.2, 1.2, 1.5]) \n            sphere(10);\n        \n        // Lower body flare\n        cylinder(h=15, r1=15, r2=12);\n    }\n}\n\nmodule head() {\n    color(\"#FFEB3B\") union() {\n        // Main head sphere\n        translate([0, 0, 40]) \n            sphere(8);\n        \n        // Flower crown base\n        color(\"#8BC34A\") \n            translate([0, 0, 45]) \n            cylinder(h=3, r1=12, r2=10);\n    }\n}\n\nmodule petals() {\n    color(\"#FF9800\") \n    for(i=[0:5]) {\n        rotate([0, 0, i*60]) \n        translate([0, 10, 45]) \n        rotate([75, 0, 0]) \n        scale([1, 0.7, 2]) \n        sphere(4);\n    }\n}\n\nmodule eyes() {\n    color(\"#212121\") union() {\n        // Left eye\n        translate([-3, 6, 42]) \n            rotate([0, 20, 0]) \n            scale([1.2, 1, 1]) \n            sphere(1.5);\n        \n        // Right eye\n        translate([3, 6, 42]) \n            rotate([0, -20, 0]) \n            scale([1.2, 1, 1]) \n            sphere(1.5);\n        \n        // Eye highlights\n        color(\"#FFFFFF\") {\n            translate([-2.5, 6.5, 43]) sphere(0.5);\n            translate([3.5, 6.5, 43]) sphere(0.5);\n        }\n    }\n}\n\nmodule mouth() {\n    color(\"#E91E63\") \n    translate([0, 8.5, 39]) \n    rotate([90, 0, 0]) \n    scale([1, 0.5, 0.3]) \n    cylinder(h=0.5, r=1.5);\n}\n\nmodule leaves() {\n    color(\"#4CA34A\") {\n        // Left leaf\n        translate([-12, 2, 25]) \n        rotate([0, 0, -30]) \n        scale([0.3, 2, 0.8]) \n        cylinder(h=15, r1=3, r2=1);\n        \n        // Right leaf\n        translate([12, 2, 25]) \n        rotate([0, 0, 30]) \n        scale([0.3, 2, 0.8]) \n        cylinder(h=15, r1=3, r2=1);\n    }\n}\n\nmodule feet() {\n    color(\"#4CAF50\") {\n        // Left foot\n        translate([-5, 0, 5]) \n        rotate([0, 0, -5]) \n        scale([0.8, 1.2, 0.5]) \n        sphere(4);\n        \n        // Right foot\n        translate([5, 0, 5]) \n        rotate([0, 0, 5]) \n        scale([0.8, 1.2, 0.5]) \n        sphere(4);\n    }\n}\n\nmodule patterns() {\n    color(\"#8BC34A\") {\n        // Body markings\n        for(i=[0:3]) {\n            translate([0, 0, 15+i*5]) \n            scale([1.2, 1.2, 0.2]) \n            cylinder(h=1, r1=12-i, r2=12-i);\n        }\n        \n        // Cheek spots\n        color(\"#F44336\") {\n            translate([-5, 7, 40]) sphere(1);\n            translate([5, 7, 40]) sphere(1);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    body();\n    head();\n    petals();\n    eyes();\n    mouth();\n    leaves();\n    feet();\n    patterns();\n}",
    "renders": true
  },
  {
    "pokemon": "marill",
    "openscad_code": "// Marill OpenSCAD Model\n// Realistic style, medium complexity\n\n// Colors\n$fn = 32;\n\ncolor_body = [0.2, 0.6, 1];      // Blue\ncolor_belly = [0.9, 0.9, 0.9];   // Light gray\ncolor_ball = [0.1, 0.1, 0.1];    // Dark gray\ncolor_inner_ear = [1, 0.6, 0.8]; // Pink\ncolor_eye = [0, 0, 0];          // Black\ncolor_highlight = [1, 1, 1];    // White\n\n// Main body module\nmodule marill_body() {\n    // Main spherical body\n    color(color_body)\n    sphere(d = 40);\n    \n    // Belly patch\n    color(color_belly)\n    translate([0, 15, -10])\n    scale([1, 0.8, 0.5])\n    sphere(d = 35);\n}\n\n// Ears module\nmodule marill_ears() {\n    // Left ear\n    translate([-20, 20, 15])\n    rotate([0, 30, -20])\n    scale([0.8, 0.8, 2])\n    color(color_body)\n    sphere(d = 15);\n    \n    // Right ear\n    translate([20, 20, 15])\n    rotate([0, 30, 20])\n    scale([0.8, 0.8, 2])\n    color(color_body)\n    sphere(d = 15);\n    \n    // Left inner ear\n    translate([-20, 20, 25])\n    rotate([0, 30, -20])\n    scale([0.5, 0.5, 1.5])\n    color(color_inner_ear)\n    sphere(d = 10);\n    \n    // Right inner ear\n    translate([20, 20, 25])\n    rotate([0, 30, 20])\n    scale([0.5, 0.5, 1.5])\n    color(color_inner_ear)\n    sphere(d = 10);\n}\n\n// Arms module\nmodule marill_arms() {\n    // Left arm\n    translate([-25, 5, -10])\n    rotate([0, 0, -45])\n    color(color_body)\n    cylinder(h = 20, d1 = 12, d2 = 8);\n    \n    // Right arm\n    translate([25, 5, -10])\n    rotate([0, 0, 45])\n    color(color_body)\n    cylinder(h = 20, d1 = 12, d2 = 8);\n}\n\n// Feet module\nmodule marill_feet() {\n    // Left foot\n    translate([-12, -15, -20])\n    scale([1.2, 1, 0.8])\n    color(color_body)\n    sphere(d = 15);\n    \n    // Right foot\n    translate([12, -15, -20])\n    scale([1.2, 1, 0.8])\n    color(color_body)\n    sphere(d = 15);\n}\n\n// Tail module\nmodule marill_tail() {\n    // Tail connection\n    translate([0, -20, 0])\n    rotate([0, 45, 0])\n    color(color_body)\n    cylinder(h = 30, d1 = 12, d2 = 8);\n    \n    // Ball on tail\n    translate([0, -35, -20])\n    color(color_ball)\n    sphere(d = 20);\n    \n    // Ball highlight\n    translate([3, -32, -17])\n    color(color_highlight)\n    sphere(d = 5);\n}\n\n// Face module\nmodule marill_face() {\n    // Left eye\n    translate([-8, 18, 15])\n    color(color_eye)\n    sphere(d = 8);\n    \n    // Right eye\n    translate([8, 18, 15])\n    color(color_eye)\n    sphere(d = 8);\n    \n    // Left eye highlight\n    translate([-6, 20, 17])\n    color(color_highlight)\n    sphere(d = 3);\n    \n    // Right eye highlight\n    translate([10, 20, 17])\n    color(color_highlight)\n    sphere(d = 3);\n    \n    // Nose\n    translate([0, 12, 15])\n    color(color_eye)\n    sphere(d = 3);\n    \n    // Mouth\n    translate([0, 8, 15])\n    rotate([90, 0, 0])\n    color(color_eye)\n    cylinder(h = 1, d1 = 8, d2 = 4);\n}\n\n// Assemble the complete Marill\nunion() {\n    marill_body();\n    marill_ears();\n    marill_arms();\n    marill_feet();\n    marill_tail();\n    marill_face();\n}",
    "renders": true
  },
  {
    "pokemon": "azumarill",
    "openscad_code": "// Azumarill OpenSCAD Model - Realistic Style, Medium Complexity\n// Scale: ~60mm tall\n\n$fn = 32;\n\nmodule azumarill() {\n    // Main body color - light blue\n    color([0.6, 0.8, 1]) {\n        // Body - main sphere\n        sphere(d = 30);\n        \n        // Belly - white sphere intersection\n        color([1, 1, 1]) {\n            intersection() {\n                sphere(d = 28);\n                translate([0, -15, -5]) cube([30, 30, 20], center = true);\n            }\n        }\n    }\n    \n    // Head\n    translate([0, 0, 20]) {\n        color([0.6, 0.8, 1]) {\n            sphere(d = 25);\n        }\n        \n        // Eyes\n        for(x = [-6, 6]) {\n            translate([x, -8, 3]) {\n                color([0, 0, 0]) sphere(d = 4);\n                color([1, 1, 1]) translate([1, 1, 1]) sphere(d = 1.5);\n            }\n        }\n        \n        // Nose\n        color([0, 0, 0]) translate([0, -10, 0]) sphere(d = 2);\n        \n        // Mouth\n        color([0.7, 0.4, 0.4]) {\n            translate([0, -12, -3]) {\n                rotate([90, 0, 0]) cylinder(h = 0.5, d1 = 6, d2 = 4);\n            }\n        }\n    }\n    \n    // Ears - blue spheres with pink insides\n    module ear(offset) {\n        translate([offset * 12, 0, 28]) {\n            rotate([0, offset * -20, 0]) {\n                color([0.6, 0.8, 1]) {\n                    scale([1, 0.7, 1.5]) sphere(d = 12);\n                }\n                color([1, 0.7, 0.8]) {\n                    translate([offset * -2, 0, -2]) {\n                        scale([0.7, 0.5, 1.2]) sphere(d = 8);\n                    }\n                }\n            }\n        }\n    }\n    \n    ear(1);\n    ear(-1);\n    \n    // Arms\n    module arm(side) {\n        translate([side * 12, 0, 5]) {\n            rotate([0, 0, side * -30]) {\n                color([0.6, 0.8, 1]) {\n                    scale([0.8, 0.8, 1.2]) sphere(d = 10);\n                }\n                // Hands - white spheres\n                color([1, 1, 1]) {\n                    translate([side * 6, 0, -5]) sphere(d = 6);\n                }\n            }\n        }\n    }\n    \n    arm(1);\n    arm(-1);\n    \n    // Feet\n    module foot(side) {\n        translate([side * 8, 0, -18]) {\n            color([0.6, 0.8, 1]) {\n                scale([1.2, 1, 0.8]) sphere(d = 12);\n            }\n            // White paw pads\n            color([1, 1, 1]) {\n                translate([0, 0, -5]) sphere(d = 8);\n            }\n        }\n    }\n    \n    foot(1);\n    foot(-1);\n    \n    // Tail - zigzag pattern\n    color([0.1, 0.1, 0.1]) {\n        hull() {\n            translate([0, 15, -5]) sphere(d = 8);\n            translate([0, 25, -8]) sphere(d = 6);\n            translate([0, 35, -12]) sphere(d = 8);\n        }\n    }\n    \n    // Ball at end of tail\n    color([0.1, 0.1, 0.1]) {\n        translate([0, 42, -15]) sphere(d = 12);\n    }\n    \n    // Ball pattern - zigzag white line\n    color([1, 1, 1]) {\n        rotate([0, 90, 0]) {\n            for(i = [0:3]) {\n                rotate([0, 0, i * 90]) {\n                    translate([0, 0, 11.9]) {\n                        cube([3, 15, 0.5], center = true);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Generate the model\nazumarill();",
    "renders": true
  },
  {
    "pokemon": "sudowoodo",
    "openscad_code": "// Sudowoodo - Medium complexity realistic style\n// 3D printable model with no overhangs\n\n$fn = 32;\nscale_factor = 1.5;\n\nmodule sudowoodo() {\n    color([0.8, 0.7, 0.5]) { // Brown body color\n        \n        // Main body - tapered cylinder\n        translate([0, 0, 15])\n        cylinder(h = 30, r1 = 15, r2 = 12, center = true);\n        \n        // Lower body bulge\n        translate([0, 0, 0])\n        sphere(r = 16);\n        \n        // Head - slightly flattened sphere\n        translate([0, 0, 40])\n        scale([1, 1.2, 0.9])\n        sphere(r = 14);\n        \n        // Branch arms - left\n        translate([-18, 0, 25])\n        rotate([0, 15, -30])\n        cylinder(h = 20, r = 4);\n        \n        // Left hand - three fingers\n        translate([-30, 0, 30])\n        rotate([0, 15, -30])\n        union() {\n            cylinder(h = 8, r = 3);\n            translate([0, 0, 6])\n            rotate([0, 30, 0])\n            cylinder(h = 6, r = 2);\n            translate([0, 0, 6])\n            rotate([0, -30, 0])\n            cylinder(h = 6, r = 2);\n        }\n        \n        // Branch arms - right\n        translate([18, 0, 25])\n        rotate([0, -15, 30])\n        cylinder(h = 20, r = 4);\n        \n        // Right hand - three fingers\n        translate([30, 0, 30])\n        rotate([0, -15, 30])\n        union() {\n            cylinder(h = 8, r = 3);\n            translate([0, 0, 6])\n            rotate([0, 30, 0])\n            cylinder(h = 6, r = 2);\n            translate([0, 0, 6])\n            rotate([0, -30, 0])\n            cylinder(h = 6, r = 2);\n        }\n        \n        // Legs - short and stubby\n        // Left leg\n        translate([-8, 0, -10])\n        cylinder(h = 15, r1 = 6, r2 = 8);\n        \n        // Right leg\n        translate([8, 0, -10])\n        cylinder(h = 15, r1 = 6, r2 = 8);\n        \n        // Feet\n        translate([-8, 0, -18])\n        scale([1.5, 2, 0.5])\n        sphere(r = 8);\n        \n        translate([8, 0, -18])\n        scale([1.5, 2, 0.5])\n        sphere(r = 8);\n        \n        // Branch \"ears\" - Y-shaped\n        translate([0, 0, 50])\n        union() {\n            // Main branch\n            cylinder(h = 12, r = 3);\n            \n            // Left branch\n            translate([-3, 0, 10])\n            rotate([0, -30, -30])\n            cylinder(h = 10, r = 2.5);\n            \n            // Right branch\n            translate([3, 0, 10])\n            rotate([0, -30, 30])\n            cylinder(h = 10, r = 2.5);\n        }\n        \n        // Small branch nubs on body\n        for(i = [0:45:315]) {\n            rotate([0, 0, i])\n            translate([12, 0, 20])\n            rotate([90, 0, 0])\n            cylinder(h = 8, r1 = 2, r2 = 1);\n        }\n    }\n    \n    // Eyes - green with black pupils\n    color([0, 0.8, 0.2]) {\n        // Left eye\n        translate([-5, 10, 42])\n        sphere(r = 3);\n        \n        // Right eye\n        translate([5, 10, 42])\n        sphere(r = 3);\n    }\n    \n    color([0, 0, 0]) {\n        // Left pupil\n        translate([-5, 11, 44])\n        sphere(r = 1.5);\n        \n        // Right pupil\n        translate([5, 11, 44])\n        sphere(r = 1.5);\n    }\n    \n    // Mouth - simple line\n    color([0.3, 0.2, 0.1]) {\n        translate([0, 7, 37])\n        rotate([90, 0, 0])\n        cylinder(h = 8, r1 = 3, r2 = 2.5);\n    }\n    \n    // Green \"leaves\" on head\n    color([0.1, 0.7, 0.1]) {\n        translate([0, 12, 55])\n        rotate([0, 0, 0])\n        scale([1, 0.3, 1])\n        sphere(r = 4);\n        \n        translate([-5, 12, 54])\n        rotate([0, 0, -30])\n        scale([1, 0.3, 1])\n        sphere(r = 3);\n        \n        translate([5, 12, 54])\n        rotate([0, 0, 30])\n        scale([1, 0.3, 1])\n        sphere(r = 3);\n    }\n}\n\n// Scale to appropriate 3D printing size\nscale([scale_factor, scale_factor, scale_factor])\nsudowoodo();",
    "renders": true
  },
  {
    "pokemon": "politoed",
    "openscad_code": "// Politoed - Realistic Style, Medium Complexity\n// Overall size: ~80mm tall\n\ncolor([0.2,0.6,0.9]) // Main body blue-green\nunion(){\n    // Main body sphere\n    sphere(d=45, $fn=60);\n    \n    // Lower belly bulge\n    translate([0,0,-20])\n        scale([1.1,1,0.8])\n            sphere(d=40, $fn=60);\n}\n\n// White belly patch\ncolor(\"white\")\ndifference(){\n    translate([0,0,-15])\n        sphere(d=30, $fn=60);\n    translate([0,0,-14.9])\n        sphere(d=29.5, $fn=60);\n}\n\n// Head crest\ncolor([0.2,0.6,0.9])\nunion(){\n    translate([0,20,25])\n        rotate([0,-20,0])\n            scale([0.6,0.3,0.8])\n                sphere(d=30, $fn=30);\n    translate([0,-20,25])\n        rotate([0,20,0])\n            scale([0.6,0.3,0.8])\n                sphere(d=30, $fn=30);\n}\n\n// Eyes\nmodule eye(){\n    color(\"black\")\n    translate([0,0,2])\n        sphere(d=8, $fn=20);\n    color(\"white\")\n    translate([2,3,2])\n        sphere(d=3, $fn=10);\n}\n\ntranslate([12,15,15]) eye();\ntranslate([-12,15,15]) mirror([1,0,0]) eye();\n\n// Mouth\ncolor(\"black\")\ntranslate([0,20,5])\n    rotate([90,0,0])\n        cylinder(h=2, d1=10, d2=6, $fn=20);\n\n// Cheeks\ncolor([1,0.5,0.5])\ntranslate([15,12,5])\n    sphere(d=6, $fn=15);\ntranslate([-15,12,5])\n    sphere(d=6, $fn=15);\n\n// Arms\nmodule arm(){\n    color([0.2,0.6,0.9])\n    union(){\n        // Upper arm\n        translate([0,0,0])\n            rotate([0,-30,0])\n                scale([0.8,0.8,2])\n                    sphere(d=15, $fn=20);\n        \n        // Hand\n        translate([0,-10,-15])\n            scale([1.2,1,0.8])\n                sphere(d=12, $fn=20);\n    }\n}\n\ntranslate([20,0,5]) rotate([0,0,45]) arm();\ntranslate([-20,0,5]) rotate([0,0,-45]) mirror([1,0,0]) arm();\n\n// Legs\nmodule leg(){\n    color([0.2,0.6,0.9])\n    union(){\n        // Thigh\n        translate([0,0,0])\n            rotate([0,-20,0])\n                scale([1,1,2])\n                    sphere(d=18, $fn=20);\n        \n        // Foot\n        translate([0,0,-18])\n            scale([1.5,1.2,0.6])\n                sphere(d=20, $fn=20);\n    }\n}\n\ntranslate([12,0,-25]) rotate([0,0,-20]) leg();\ntranslate([-12,0,-25]) rotate([0,0,20]) mirror([1,0,0]) leg();\n\n// Spiral belly pattern\ncolor([0.1,0.3,0.7])\nfor(i=[0:30:360]){\n    rotate([0,0,i])\n        translate([0,-8,-14])\n            scale([0.2,1,0.2])\n                cylinder(h=2, d=6, $fn=20);\n}\n\n// Green swirl markings\ncolor([0.1,0.5,0.2])\ntranslate([0,0,-5])\n    rotate_extrude(angle=360, $fn=60)\n        translate([8,0,0])\n            circle(d=4, $fn=20);\n\n// Green cheek markings\ncolor([0.1,0.5,0.2])\ntranslate([15,12,5])\n    scale([1.5,0.5,0.5])\n        sphere(d=6, $fn=15);\ntranslate([-15,12,5])\n    scale([1.5,0.5,0.5])\n        sphere(d=6, $fn=15);",
    "renders": true
  },
  {
    "pokemon": "hoppip",
    "openscad_code": "// Hoppip - OpenSCAD Model (Medium Complexity, Realistic Style)\n\n// Colors\nhop_green = [0.4, 0.7, 0.3];\nhop_red = [0.9, 0.2, 0.2];\nhop_yellow = [0.9, 0.8, 0.1];\nhop_white = [0.95, 0.95, 0.9];\nhop_black = [0.1, 0.1, 0.1];\n\n// Main body\nmodule body() {\n    color(hop_green)\n    union() {\n        // Round body\n        sphere(d = 30, $fn = 32);\n        \n        // Belly bump\n        translate([0, -10, -5])\n            scale([1.1, 1.2, 0.8])\n            sphere(d = 25, $fn = 32);\n    }\n}\n\n// Leaf ears\nmodule leaf_ears() {\n    color(hop_green)\n    union() {\n        // Left ear\n        translate([-12, 12, 10])\n            rotate([0, -20, -30])\n            scale([0.8, 0.2, 1.5])\n            sphere(d = 20, $fn = 16);\n            \n        // Right ear\n        translate([12, 12, 10])\n            rotate([0, -20, 30])\n            scale([0.8, 0.2, 1.5])\n            sphere(d = 20, $fn = 16);\n    }\n}\n\n// Wings\nmodule wings() {\n    color(hop_green)\n    union() {\n        // Left wing\n        translate([-15, 0, 5])\n            rotate([0, 0, -45])\n            scale([0.3, 1, 0.8])\n            cylinder(h = 20, d1 = 8, d2 = 4, $fn = 16);\n            \n        // Right wing\n        translate([15, 0, 5])\n            rotate([0, 0, 45])\n            scale([0.3, 1, 0.8])\n            cylinder(h = 20, d1 = 8, d2 = 4, $fn = 16);\n    }\n}\n\n// Eyes\nmodule eyes() {\n    union() {\n        // Left white\n        color(hop_white)\n        translate([-6, 12, 8])\n            sphere(d = 6, $fn = 16);\n            \n        // Right white\n        color(hop_white)\n        translate([6, 12, 8])\n            sphere(d = 6, $fn = 16);\n            \n        // Left pupil\n        color(hop_black)\n        translate([-5, 13, 10])\n            sphere(d = 3, $fn = 16);\n            \n        // Right pupil\n        color(hop_black)\n        translate([7, 13, 10])\n            sphere(d = 3, $fn = 16);\n            \n        // Left highlight\n        color(hop_white)\n        translate([-4, 14, 11.5])\n            sphere(d = 1, $fn = 8);\n            \n        // Right highlight\n        color(hop_white)\n        translate([8, 14, 11.5])\n            sphere(d = 1, $fn = 8);\n    }\n}\n\n// Feet\nmodule feet() {\n    color(hop_green)\n    union() {\n        // Left foot\n        translate([-8, -15, -13])\n            rotate([0, -10, 0])\n            scale([0.8, 0.6, 0.4])\n            sphere(d = 10, $fn = 16);\n            \n        // Right foot\n        translate([8, -15, -13])\n            rotate([0, 10, 0])\n            scale([0.8, 0.6, 0.4])\n            sphere(d = 10, $fn = 16);\n    }\n}\n\n// Cotton puff\nmodule cotton() {\n    color(hop_white)\n    union() {\n        // Main puff\n        translate([0, 0, 20])\n            sphere(d = 35, $fn = 32);\n            \n        // Secondary puffs\n        translate([-8, 8, 25])\n            sphere(d = 15, $fn = 16);\n        translate([8, -8, 25])\n            sphere(d = 15, $fn = 16);\n        translate([-8, -8, 25])\n            sphere(d = 15, $fn = 16);\n        translate([8, 8, 25])\n            sphere(d = 15, $fn = 16);\n    }\n}\n\n// Cotton stem\nmodule cotton_stem() {\n    color(hop_green)\n    union() {\n        // Main stem\n        translate([0, 0, 15])\n            cylinder(h = 10, d = 6, $fn = 16);\n            \n        // Connecting leaves\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90])\n            translate([3, 0, 18])\n                scale([0.5, 0.1, 1])\n                sphere(d = 8, $fn = 8);\n        }\n    }\n}\n\n// Tail\nmodule tail() {\n    color(hop_green)\n    translate([0, -20, -5])\n        rotate([45, 0, 0])\n        scale([0.5, 0.5, 1])\n        sphere(d = 15, $fn = 16);\n}\n\n// Main assembly\nunion() {\n    body();\n    leaf_ears();\n    wings();\n    feet();\n    eyes();\n    cotton_stem();\n    cotton();\n    tail();\n}",
    "renders": true
  },
  {
    "pokemon": "skiploom",
    "openscad_code": "// Skiploom - Realistic Style\n// Height: 60mm (life-size scaled for 3D printing)\n\n// Colors\n$fa = 2;\n$fs = 0.5;\n\n// Main module\nmodule skiploom() {\n    // Body\n    color(\"#F5F5DC\") body();\n    \n    // Head\n    color(\"#F5F5DC\") head();\n    \n    // Ears\n    color(\"#4B5320\") ears();\n    \n    // Wings\n    color(\"#90EE90\") wings();\n    \n    // Feet\n    color(\"#8B4513\") feet();\n    \n    // Flower\n    color(\"#FF69B4\") flower();\n    \n    // Eyes\n    color(\"#000000\") eyes();\n}\n\n// Body - round bulb shape\nmodule body() {\n    translate([0, 0, 15]) {\n        // Main body sphere\n        sphere(d=30);\n        \n        // Add slight oval shape\n        scale([1.1, 1, 0.9]) sphere(d=30);\n    }\n}\n\n// Head - smaller sphere on top\nmodule head() {\n    translate([0, 0, 35]) {\n        sphere(d=20);\n    }\n}\n\n// Ears - four leaf clover shaped\nmodule ears() {\n    // Left ear\n    translate([-8, 0, 42]) {\n        rotate([0, -20, -30]) {\n            scale([0.5, 1, 0.1]) sphere(d=15);\n        }\n    }\n    \n    // Right ear\n    translate([8, 0, 42]) {\n        rotate([0, -20, 30]) {\n            scale([0.5, 1, 0.1]) sphere(d=15);\n        }\n    }\n}\n\n// Wings - petal-like wings\nmodule wings() {\n    // Left wing\n    translate([-18, 0, 25]) {\n        rotate([0, 0, -30]) {\n            scale([1.2, 0.3, 0.1]) sphere(d=25);\n            translate([0, 0, -2]) scale([0.8, 0.8, 0.05]) sphere(d=25);\n        }\n    }\n    \n    // Right wing\n    translate([18, 0, 25]) {\n        rotate([0, 0, 30]) {\n            scale([1.2, 0.3, 0.1]) sphere(d=25);\n            translate([0, 0, -2]) scale([0.8, 0.8, 0.05]) sphere(d=25);\n        }\n    }\n}\n\n// Feet - small rounded feet\nmodule feet() {\n    // Left foot\n    translate([-8, 0, 8]) {\n        sphere(d=8);\n        translate([0, 0, -4]) cylinder(h=5, d=6);\n    }\n    \n    // Right foot\n    translate([8, 0, 8]) {\n        sphere(d=8);\n        translate([0, 0, -4]) cylinder(h=5, d=6);\n    }\n}\n\n// Flower on head - pink flower with yellow center\nmodule flower() {\n    // Center\n    color(\"#FFD700\") {\n        translate([0, 0, 48]) sphere(d=5);\n    }\n    \n    // Petals\n    color(\"#FF69B4\") {\n        for(i = [0:5]) {\n            rotate([0, 0, i * 60]) {\n                translate([6, 0, 48]) {\n                    scale([1, 0.3, 0.1]) sphere(d=8);\n                }\n            }\n        }\n    }\n}\n\n// Eyes - black with white highlights\nmodule eyes() {\n    // Left eye\n    translate([-5, 7, 38]) {\n        sphere(d=4);\n        color(\"#FFFFFF\") translate([1, 1, 1.5]) sphere(d=1.5);\n    }\n    \n    // Right eye\n    translate([5, 7, 38]) {\n        sphere(d=4);\n        color(\"#FFFFFF\") translate([1, 1, 1.5]) sphere(d=1.5);\n    }\n    \n    // Mouth\n    color(\"#FF69B4\") {\n        translate([0, 10, 34]) {\n            rotate([90, 0, 0]) {\n                cylinder(h=0.5, d1=3, d2=1);\n            }\n        }\n    }\n}\n\n// Create the model\nskiploom();",
    "renders": true
  },
  {
    "pokemon": "jumpluff",
    "openscad_code": "// Jumpluff OpenSCAD Model – Realistic / Medium Complexity\n// ~80 mm tall when printed\n\n// Color palette\nc_body       = \"#c2e6ff\";\nc_puff       = \"#ffffff\";\nc_eyes       = \"#0066cc\";\nc_mouth      = \"#ff6666\";\nc_stem       = \"#4d9900\";\nc_detail     = \"#b3e6ff\";\n\n// Overall scale factor\nsf = 1.0;\n\nmodule bodySphere() {\n    color(c_body)\n    sphere(d = 22 * sf, $fn = 60);\n}\n\nmodule bluePuff(d) {\n    translate([0, 0, -d / 2])\n    color(c_puff)\n    sphere(d = d * sf, $fn = 40);\n}\n\nmodule eye(x, y, z) {\n    translate([x * sf, y * sf, z * sf]) {\n        color(c_eyes)\n        sphere(d = 4 * sf, $fn = 20);\n        translate([0, 0, 2.1 * sf])\n        color(\"white\")\n        sphere(d = 1.5 * sf, $fn = 12);\n    }\n}\n\nmodule mouth() {\n    translate([0, 10.5 * sf, -6 * sf])\n    rotate([0, 0, 180])\n    color(c_mouth)\n    cylinder(h = 4 * sf, r1 = 3 * sf, r2 = 1 * sf, $fn = 24);\n}\n\nmodule ear(angle) {\n    rotate([0, 0, angle])\n    translate([0, 11 * sf, 5 * sf])\n    rotate([90, 0, 0])\n    color(c_body)\n    cylinder(h = 18 * sf, r1 = 4 * sf, r2 = 0, $fn = 32);\n}\n\nmodule cottonStem(h) {\n    translate([0, 0, h / 2])\n    color(c_stem)\n    cylinder(h = h * sf, r = 1.5 * sf, $fn = 16);\n}\n\nmodule cottonPuff(d) {\n    rotate([0, 0, 45])\n    cottonStem(d * 0.8);\n    translate([0, 0, d * 0.8])\n    bluePuff(d);\n}\n\nmodule cottonTriple() {\n    for (a = [0, 120, 240])\n        rotate([0, 0, a])\n        translate([18 * sf, 0, 0])\n        cottonPuff(15);\n}\n\nmodule foot(x, y, z, side) {\n    translate([x * sf, y * sf, z * sf])\n    rotate([0, 0, side ? 20 : -20])\n    color(c_body)\n    union() {\n        translate([0, 0, 4 * sf])\n        sphere(d = 6 * sf, $fn = 32);\n        translate([0, 0, 1 * sf])\n        cylinder(h = 8 * sf, r1 = 3 * sf, r2 = 2 * sf, $fn = 24);\n    }\n}\n\nmodule jumpluff() {\n    // central body\n    bodySphere();\n\n    // ears\n    ear(30);\n    ear(-30);\n\n    // eyes\n    eye(-4, 8, 3);\n    eye(4, 8, 3);\n\n    // mouth\n    mouth();\n\n    // small blue puffs on head\n    translate([0, 8, 12]) bluePuff(10);\n\n    // cotton trio\n    translate([0, 0, 15])\n    cottonTriple();\n\n    // feet\n    foot(-7, 7, -10, false);\n    foot(7, 7, -10, true);\n\n    // tail stem\n    translate([0, -11, -11])\n    rotate([90, 0, 0])\n    cottonPuff(20);\n}\n\n// render\njumpluff();",
    "renders": true
  },
  {
    "pokemon": "aipom",
    "openscad_code": "// Aipom Pokemon - Realistic Style, Medium Complexity\n// 3D printable model using basic OpenSCAD primitives\n\n// Main parameters\nscale_factor = 1.2;\nbody_height = 35 * scale_factor;\nhead_radius = 12 * scale_factor;\near_length = 8 * scale_factor;\narm_length = 20 * scale_factor;\ntail_length = 45 * scale_factor;\n\n// Colors\ncolor_body = \"#8B4513\";\ncolor_face = \"#F5DEB3\";\ncolor_purple = \"#8A2BE2\";\ncolor_black = \"#000000\";\n\n// Head module\nmodule head() {\n    color(color_body) union() {\n        // Main head sphere\n        translate([0, 0, body_height + head_radius]) \n            sphere(r = head_radius, $fn = 32);\n        \n        // Face lighter area\n        color(color_face) \n            translate([0, head_radius - 2, body_height + head_radius - 3])\n            scale([1.2, 0.8, 0.8])\n            sphere(r = head_radius * 0.8, $fn = 32);\n        \n        // Ears\n        for(side = [-1, 1]) {\n            color(color_body)\n            translate([side * head_radius * 0.9, 0, body_height + head_radius * 1.5])\n            rotate([0, side * 20, 0])\n            cylinder(h = ear_length, r1 = ear_length/2, r2 = ear_length/3, $fn = 16);\n        }\n    }\n}\n\n// Eyes module\nmodule eyes() {\n    for(side = [-1, 1]) {\n        // Eye whites\n        color(\"white\")\n        translate([side * head_radius * 0.5, head_radius - 1, body_height + head_radius + 2])\n        sphere(r = head_radius * 0.3, $fn = 16);\n        \n        // Pupils\n        color(color_black)\n        translate([side * head_radius * 0.6, head_radius - 0.5, body_height + head_radius + 3])\n        sphere(r = head_radius * 0.15, $fn = 16);\n    }\n}\n\n// Nose and mouth\nmodule face_features() {\n    // Nose\n    color(color_black)\n    translate([0, head_radius - 0.5, body_height + head_radius])\n    sphere(r = head_radius * 0.2, $fn = 16);\n    \n    // Mouth\n    color(color_black)\n    translate([0, head_radius - 0.3, body_height + head_radius - 5])\n    rotate([90, 0, 0])\n    cylinder(h = 0.5, r1 = 3, r2 = 2, $fn = 16);\n}\n\n// Body module\nmodule body() {\n    color(color_body) union() {\n        // Main body\n        translate([0, 0, body_height/2])\n        scale([1.5, 1, 1.2])\n        sphere(r = body_height/2.5, $fn = 32);\n        \n        // Belly lighter patch\n        color(color_face)\n        translate([0, body_height/2.5 - 1, body_height/2])\n        scale([1, 0.8, 0.6])\n        sphere(r = body_height/3, $fn = 32);\n    }\n}\n\n// Arms module\nmodule arms() {\n    for(side = [-1, 1]) {\n        color(color_body) union() {\n            // Upper arm\n            translate([side * body_height/2, 0, body_height * 0.7])\n            rotate([0, side * 30, 0])\n            cylinder(h = arm_length/2, r = arm_length/6, $fn = 16);\n            \n            // Lower arm\n            translate([side * (body_height/2 + arm_length/2 * sin(30)), \n                      arm_length/2 * cos(30), \n                      body_height * 0.7 - arm_length/2 * sin(30)])\n            rotate([0, side * 45, 0])\n            cylinder(h = arm_length/2, r = arm_length/6, $fn = 16);\n            \n            // Hand\n            translate([side * (body_height/2 + arm_length * sin(30)), \n                      arm_length * cos(30), \n                      body_height * 0.7 - arm_length * sin(30)])\n            sphere(r = arm_length/5, $fn = 16);\n        }\n    }\n}\n\n// Legs module\nmodule legs() {\n    for(side = [-1, 1]) {\n        color(color_body) union() {\n            // Thigh\n            translate([side * body_height/3, 0, body_height/4])\n            rotate([0, side * 10, 0])\n            cylinder(h = arm_length/2, r = arm_length/5, $fn = 16);\n            \n            // Lower leg\n            translate([side * (body_height/3 + arm_length/4 * sin(10)), \n                      0, \n                      body_height/4 - arm_length/4 * cos(10)])\n            rotate([0, side * 10, 0])\n            cylinder(h = arm_length/2, r = arm_length/6, $fn = 16);\n            \n            // Feet\n            translate([side * (body_height/3 + arm_length/2 * sin(10)), \n                      arm_length/6, \n                      -2])\n            scale([1.5, 2, 0.8])\n            sphere(r = arm_length/5, $fn = 16);\n        }\n    }\n}\n\n// Tail with hand\nmodule tail() {\n    color(color_purple) union() {\n        // Tail segments\n        for(i = [0:4]) {\n            translate([0, -body_height/2 - i * tail_length/5, \n                      body_height/2 - i * tail_length/10])\n            rotate([0, 0, -i * 15])\n            scale([1 - i * 0.15, 1 - i * 0.15, 1 - i * 0.1])\n            cylinder(h = tail_length/5, r1 = tail_length/12, r2 = tail_length/15, $fn = 16);\n        }\n        \n        // Hand at end of tail\n        translate([0, -body_height/2 - tail_length, body_height/2 - tail_length/2])\n        rotate([0, 0, -75])\n        scale([1.5, 1, 0.8])\n        sphere(r = tail_length/8, $fn = 16);\n        \n        // Fingers on tail hand\n        for(finger = [-1, 0, 1]) {\n            translate([finger * tail_length/12, \n                      -body_height/2 - tail_length - tail_length/16, \n                      body_height/2 - tail_length/2])\n            rotate([0, 0, -75])\n            rotate([finger * 20, 0, 0])\n            cylinder(h = tail_length/12, r = tail_length/24, $fn = 8);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    body();\n    head();\n    eyes();\n    face_features();\n    arms();\n    legs();\n    tail();\n}",
    "renders": true
  },
  {
    "pokemon": "sunkern",
    "openscad_code": "// Sunkern (Realistic Style, Medium Complexity)\n// Size: ~60mm tall\n// Colors: Brown body, green leaves, yellow face\n\n$fn = 32;\n\n// Main colors\nbrown = [0.4, 0.25, 0.15];\ngreen = [0.2, 0.6, 0.2];\nyellow = [1, 0.9, 0.2];\nblack = [0.1, 0.1, 0.1];\nwhite = [1, 1, 1];\n\nmodule sunkern() {\n    // Body - main seed shape\n    union() {\n        // Main body\n        translate([0, 0, 15]) {\n            color(brown) {\n                sphere(d = 40);\n            }\n        }\n        \n        // Bottom tapered part\n        translate([0, 0, 5]) {\n            color(brown) {\n                cylinder(h = 15, d1 = 30, d2 = 35);\n            }\n        }\n        \n        // Face area\n        translate([0, 18, 22]) {\n            color(yellow) {\n                sphere(d = 28);\n            }\n        }\n        \n        // Eyes\n        for(x = [-8, 8]) {\n            translate([x, 25, 25]) {\n                color(black) {\n                    sphere(d = 6);\n                    translate([0, 0, 3]) {\n                        color(white) {\n                            sphere(d = 2);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Mouth\n        translate([0, 24, 18]) {\n            color(black) {\n                rotate([90, 0, 0]) {\n                    cylinder(h = 2, d = 8);\n                }\n            }\n        }\n        \n        // Leaves module\n        module leaf() {\n            color(green) {\n                translate([0, 0, 5]) {\n                    // Main leaf blade\n                    rotate([0, 30, 0]) {\n                        scale([1, 0.3, 3]) {\n                            sphere(d = 15);\n                        }\n                    }\n                    \n                    // Leaf tip\n                    translate([0, 0, 10]) {\n                        scale([0.8, 0.2, 1]) {\n                            sphere(d = 10);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Top leaves - 4 arranged in cross pattern\n        for(angle = [0, 90, 180, 270]) {\n            rotate([0, 0, angle]) {\n                translate([0, 0, 40]) {\n                    leaf();\n                }\n            }\n        }\n        \n        // Side leaves\n        translate([15, 0, 30]) {\n            rotate([0, 0, -45]) {\n                leaf();\n            }\n        }\n        \n        translate([-15, 0, 30]) {\n            rotate([0, 0, 45]) {\n                leaf();\n            }\n        }\n        \n        // Seed pattern lines\n        for(i = [0:45:315]) {\n            rotate([0, 0, i]) {\n                translate([0, 0, 15]) {\n                    difference() {\n                        sphere(d = 40);\n                        translate([0, 0, -5]) {\n                            cylinder(h = 50, d = 38);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Small seed bumps\n        for(a = [0:60:300]) {\n            rotate([0, 0, a]) {\n                translate([18, 0, 20]) {\n                    color(brown) {\n                        sphere(d = 4);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Render the model\nsunkern();",
    "renders": true
  },
  {
    "pokemon": "sunflora",
    "openscad_code": "// Sunflora OpenSCAD Model\n// Medium complexity realistic style\n\nmodule head() {\n    color([0.9, 0.7, 0.1]) {\n        // Main head sphere\n        sphere(15, $fn=32);\n        \n        // Petals around head\n        for(i=[0:11]) {\n            rotate([0, 0, i*30]) translate([15, 0, 8]) {\n                rotate([0, 90, 0]) cylinder(h=8, r1=4, r2=1, $fn=8);\n            }\n        }\n        \n        // Center disk\n        translate([0, 0, 16]) cylinder(h=2, r=10, $fn=32);\n    }\n}\n\nmodule face() {\n    // Eyes\n    color([0.1, 0.1, 0.1]) {\n        translate([-5, 7, 12]) sphere(2, $fn=16);\n        translate([5, 7, 12]) sphere(2, $fn=16);\n    }\n    \n    // Mouth\n    color([0.3, 0.1, 0.1]) {\n        translate([0, 3, 8]) rotate([90, 0, 0]) cylinder(h=0.5, r=3, $fn=16);\n    }\n    \n    // Cheeks\n    color([0.9, 0.4, 0.4]) {\n        translate([-7, 5, 8]) sphere(1.5, $fn=16);\n        translate([7, 5, 8]) sphere(1.5, $fn=16);\n    }\n}\n\nmodule body() {\n    color([0.9, 0.7, 0.1]) {\n        // Main body\n        translate([0, 0, -15]) scale([1, 0.8, 1.2]) sphere(12, $fn=32);\n        \n        // Leaf collar\n        color([0.2, 0.6, 0.1]) {\n            for(i=[0:5]) {\n                rotate([0, 0, i*60]) translate([10, 0, -5]) {\n                    rotate([0, 90, 0]) cylinder(h=8, r1=3, r2=1, $fn=6);\n                }\n            }\n        }\n    }\n}\n\nmodule arms() {\n    for(side=[-1, 1]) {\n        color([0.9, 0.7, 0.1]) {\n            translate([side*12, 8, -8]) {\n                rotate([0, 45*side, 0]) {\n                    cylinder(h=15, r1=3, r2=2, $fn=16);\n                    translate([0, 0, 15]) sphere(3, $fn=16);\n                }\n            }\n        }\n        \n        // Leaf hands\n        color([0.2, 0.6, 0.1]) {\n            translate([side*20, 12, -5]) {\n                rotate([0, 0, 90*side]) {\n                    rotate([0, 45, 0]) cylinder(h=5, r1=2, r2=4, $fn=6);\n                }\n            }\n        }\n    }\n}\n\nmodule legs() {\n    for(side=[-1, 1]) {\n        color([0.9, 0.7, 0.1]) {\n            translate([side*6, -8, -25]) {\n                cylinder(h=15, r1=4, r2=3, $fn=16);\n                translate([0, 0, 15]) sphere(3.5, $fn=16);\n            }\n        }\n        \n        // Feet\n        color([0.2, 0.6, 0.1]) {\n            translate([side*6, -12, -35]) {\n                scale([1.5, 2, 0.5]) sphere(3, $fn=16);\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    head();\n    face();\n    body();\n    arms();\n    legs();\n}\n\n// Base platform for printing\ntranslate([0, 0, -38]) color([0.8, 0.8, 0.8]) {\n    cylinder(h=2, r=20, $fn=32);\n}",
    "renders": true
  },
  {
    "pokemon": "yanma",
    "openscad_code": "// Yanma Pokemon - Realistic Style\n// Medium complexity 3D printable model\n\n// Color definitions\ncolor_red = [0.8, 0.1, 0.1];\ncolor_body = [0.3, 0.6, 0.9];\ncolor_wing = [0.7, 0.8, 1.0];\ncolor_black = [0.1, 0.1, 0.1];\ncolor_white = [0.9, 0.9, 0.9];\ncolor_yellow = [0.9, 0.8, 0.1];\n\n// Main body module\nmodule yanma_body() {\n    color(color_body) {\n        // Central thorax\n        translate([0, 0, 5]) {\n            sphere(8, $fn=16);\n        }\n        \n        // Abdomen\n        translate([0, -12, 2]) {\n            scale([1.2, 1.5, 1]) {\n                sphere(6, $fn=16);\n            }\n        }\n        \n        // Head segment\n        translate([0, 8, 8]) {\n            sphere(7, $fn=16);\n        }\n    }\n}\n\n// Head with eyes module\nmodule yanma_head() {\n    color(color_body) {\n        // Main head\n        translate([0, 15, 12]) {\n            sphere(5, $fn=16);\n        }\n    }\n    \n    // Eyes\n    color(color_red) {\n        translate([-3, 17, 14]) {\n            sphere(2.5, $fn=12);\n        }\n        translate([3, 17, 14]) {\n            sphere(2.5, $fn=12);\n        }\n    }\n    \n    // Eye highlights\n    color(color_white) {\n        translate([-2.5, 17.5, 15.2]) {\n            sphere(0.8, $fn=8);\n        }\n        translate([3.5, 17.5, 15.2]) {\n            sphere(0.8, $fn=8);\n        }\n    }\n}\n\n// Antenna module\nmodule antenna() {\n    color(color_body) {\n        // Left antenna\n        translate([-2, 20, 12]) {\n            rotate([0, 30, -45]) {\n                cylinder(h=8, r1=1, r2=0.5, $fn=8);\n            }\n        }\n        \n        // Right antenna\n        translate([2, 20, 12]) {\n            rotate([0, 30, 45]) {\n                cylinder(h=8, r1=1, r2=0.5, $fn=8);\n            }\n        }\n    }\n    \n    // Antenna tips\n    color(color_red) {\n        translate([-5, 25, 14]) {\n            sphere(1.5, $fn=8);\n        }\n        translate([5, 25, 14]) {\n            sphere(1.5, $fn=8);\n        }\n    }\n}\n\n// Wing module with veins\nmodule wing(pos, rot, side) {\n    color(color_wing) {\n        // Main wing\n        translate(pos) {\n            rotate(rot) {\n                scale([1, 2, 0.3]) {\n                    sphere(12, $fn=8);\n                }\n                \n                // Wing veins\n                for(i = [0:3]) {\n                    rotate([0, 0, i * 15 * side]) {\n                        translate([0, 6, 0]) {\n                            cube([0.5, 8, 0.3]);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Wing markings\n    color(color_red) {\n        translate(pos) {\n            rotate(rot) {\n                translate([0, 8, 1]) {\n                    scale([0.8, 0.3, 0.3]) {\n                        sphere(8, $fn=8);\n                    }\n                }\n                translate([0, 12, 1]) {\n                    scale([0.5, 0.2, 0.3]) {\n                        sphere(6, $fn=8);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Leg module\nmodule leg(pos, angle) {\n    color(color_body) {\n        translate(pos) {\n            rotate([0, 0, angle]) {\n                // Upper leg\n                cylinder(h=6, r=1.2, $fn=8);\n                \n                // Lower leg\n                translate([0, 6, -2]) {\n                    rotate([30, 0, 0]) {\n                        cylinder(h=5, r=1, $fn=8);\n                    }\n                }\n                \n                // Foot\n                translate([0, 10, -3]) {\n                    sphere(1.5, $fn=8);\n                }\n            }\n        }\n    }\n}\n\n// Tail module\nmodule tail() {\n    color(color_body) {\n        translate([0, -20, 3]) {\n            rotate([10, 0, 0]) {\n                // Tail segments\n                for(i = [0:2]) {\n                    translate([0, -i * 3, 0]) {\n                        sphere(3 - i * 0.5, $fn=12);\n                    }\n                }\n                \n                // Tail tip\n                translate([0, -9, 0]) {\n                    sphere(1.5, $fn=8);\n                }\n            }\n        }\n    }\n}\n\n// Main assembly\nmodule yanma() {\n    // Body and head\n    union() {\n        yanma_body();\n        yanma_head();\n        antenna();\n        tail();\n        \n        // Wings\n        wing([-12, 0, 10], [0, 0, -45], 1);\n        wing([12, 0, 10], [0, 0, 45], -1);\n        \n        // Legs\n        leg([-5, 2, 0], 30);\n        leg([5, 2, 0], -30);\n        leg([-4, -8, 0], 45);\n        leg([4, -8, 0], -45);\n    }\n}\n\n// Generate the model\ntranslate([0, 0, 5]) {\n    scale([1.2, 1.2, 1.2]) {\n        yanma();\n    }\n}",
    "renders": true
  },
  {
    "pokemon": "wooper",
    "openscad_code": "// Wooper - Realistic Style - Medium Complexity\n// 3D printable Pokemon model with no overhangs\n\nscale_factor = 0.4;\n$fn = 32;\n\nmodule wooper_body() {\n    color(\"#4A90E2\")  // Wooper's main blue color\n    union() {\n        // Main body - slightly flattened sphere\n        scale([1, 0.8, 0.7])\n            sphere(25);\n        \n        // Head extension for snout\n        translate([0, 20, 0])\n            scale([0.8, 0.6, 0.5])\n                sphere(15);\n    }\n}\n\nmodule wooper_ears() {\n    color(\"#4A90E2\")\n    union() {\n        // Left ear\n        translate([-15, -20, 15]) {\n            rotate([0, -30, -20])\n                scale([0.3, 0.3, 1.5])\n                    cylinder(15, 5, 3);\n            // Ear fin\n            translate([0, 0, 15])\n                scale([1.2, 0.1, 0.8])\n                    sphere(3);\n        }\n        \n        // Right ear\n        translate([15, -20, 15]) {\n            rotate([0, -30, 20])\n                scale([0.3, 0.3, 1.5])\n                    cylinder(15, 5, 3);\n            // Ear fin\n            translate([0, 0, 15])\n                scale([1.2, 0.1, 0.8])\n                    sphere(3);\n        }\n    }\n}\n\nmodule wooper_arms() {\n    color(\"#4A90E2\")\n    union() {\n        // Left arm\n        translate([-20, 5, -5]) {\n            rotate([0, 0, -45])\n                scale([0.4, 0.4, 1])\n                    cylinder(12, 4, 3);\n            // Hand\n            translate([0, 0, -12])\n                sphere(3);\n        }\n        \n        // Right arm\n        translate([20, 5, -5]) {\n            rotate([0, 0, 45])\n                scale([0.4, 0.4, 1])\n                    cylinder(12, 4, 3);\n            // Hand\n            translate([0, 0, -12])\n                sphere(3);\n        }\n    }\n}\n\nmodule wooper_legs() {\n    color(\"#4A90E2\")\n    union() {\n        // Left leg\n        translate([-10, -10, -15]) {\n            scale([0.5, 0.5, 1])\n                cylinder(10, 5, 4);\n            // Foot\n            translate([0, 0, -10])\n                scale([1, 1.2, 0.3])\n                    sphere(5);\n        }\n        \n        // Right leg\n        translate([10, -10, -15]) {\n            scale([0.5, 0.5, 1])\n                cylinder(10, 5, 4);\n            // Foot\n            translate([0, 0, -10])\n                scale([1, 1.2, 0.3])\n                    sphere(5);\n        }\n    }\n}\n\nmodule wooper_tail() {\n    color(\"#4A90E2\")\n    translate([0, -25, -5]) {\n        rotate([0, 0, 180])\n            scale([1, 0.6, 0.3])\n                cylinder(20, 8, 3);\n        // Tail fin\n        translate([0, -20, 0])\n            scale([1.5, 0.1, 1])\n                sphere(6);\n    }\n}\n\nmodule wooper_face() {\n    union() {\n        // Eyes\n        color(\"#FFFFFF\")\n        union() {\n            translate([-8, 15, 8]) sphere(4);\n            translate([8, 15, 8]) sphere(4);\n        }\n        \n        // Eye pupils\n        color(\"#000000\")\n        union() {\n            translate([-8, 16, 10]) sphere(2);\n            translate([8, 16, 10]) sphere(2);\n        }\n        \n        // Mouth\n        color(\"#8B4513\")\n        translate([0, 20, 0])\n            scale([1, 0.5, 0.5])\n                sphere(3);\n        \n        // Gills pattern\n        color(\"#3A7BC8\")\n        for(i = [-1, 1]) {\n            translate([i * 15, 5, 0])\n                scale([0.3, 0.3, 1])\n                    cylinder(10, 2, 2);\n        }\n    }\n}\n\nmodule wooper_belly() {\n    color(\"#FFE4B5\")\n    translate([0, 0, -16])\n        scale([0.8, 0.7, 0.1])\n            sphere(20);\n}\n\n// Assemble the complete wooper\nscale([scale_factor, scale_factor, scale_factor]) {\n    union() {\n        wooper_body();\n        wooper_ears();\n        wooper_arms();\n        wooper_legs();\n        wooper_tail();\n        wooper_face();\n        wooper_belly();\n    }\n}",
    "renders": true
  },
  {
    "pokemon": "quagsire",
    "openscad_code": "// Quagsire - Realistic Style, Medium Complexity\n// Designed for 3D printing with no overhangs\n\n// Color definitions\ncolor_body = [0.8, 0.9, 0.95];      // Light blue\ncolor_belly = [0.9, 0.9, 0.85];     // Off-white\ncolor_spikes = [0.7, 0.8, 0.9];     // Darker blue\ncolor_details = [0.2, 0.2, 0.2];    // Black\n\n// Overall scale\nscale_factor = 2;\n\n// Main body\nmodule body() {\n    color(color_body)\n    union() {\n        // Main torso\n        translate([0, 0, 15])\n            scale([1.2, 0.8, 1])\n            sphere(15, $fn=32);\n        \n        // Belly\n        color(color_belly)\n        translate([0, -5, 12])\n            scale([1.1, 0.6, 0.8])\n            sphere(12, $fn=32);\n    }\n}\n\n// Head\nmodule head() {\n    color(color_body)\n    union() {\n        // Main head shape\n        translate([0, 0, 35])\n            scale([1, 0.9, 0.8])\n            sphere(12, $fn=32);\n        \n        // Mouth area\n        translate([0, 12, 32])\n            scale([0.7, 0.5, 0.5])\n            sphere(8, $fn=32);\n    }\n}\n\n// Eyes\nmodule eyes() {\n    // Left eye\n    translate([-5, 10, 38])\n    color([1, 1, 1])\n    sphere(2.5, $fn=16);\n    \n    // Right eye\n    translate([5, 10, 38])\n    color([1, 1, 1])\n    sphere(2.5, $fn=16);\n    \n    // Pupils\n    translate([-5, 10.5, 38.5])\n    color(color_details)\n    sphere(1.2, $fn=16);\n    \n    translate([5, 10.5, 38.5])\n    color(color_details)\n    sphere(1.2, $fn=16);\n}\n\n// Nose\nmodule nose() {\n    translate([0, 14, 35])\n    color(color_body)\n    scale([1.5, 1, 1])\n    sphere(2, $fn=16);\n}\n\n// Mouth\nmodule mouth() {\n    translate([0, 16.5, 32])\n    color(color_details)\n    rotate([90, 0, 0])\n    cylinder(h=0.5, r1=3, r2=3, $fn=32);\n}\n\n// Ears\nmodule ears() {\n    // Left ear\n    translate([-12, 5, 42])\n    rotate([0, 15, -20])\n    color(color_body)\n    scale([0.8, 0.3, 2])\n    sphere(4, $fn=16);\n    \n    // Right ear\n    translate([12, 5, 42])\n    rotate([0, 15, 20])\n    color(color_body)\n    scale([0.8, 0.3, 2])\n    sphere(4, $fn=16);\n}\n\n// Arms\nmodule arms() {\n    // Left arm\n    translate([-18, 0, 20])\n    rotate([0, 0, -30])\n    color(color_body)\n    scale([0.6, 0.6, 1.2])\n    sphere(6, $fn=16);\n    \n    // Right arm\n    translate([18, 0, 20])\n    rotate([0, 0, 30])\n    color(color_body)\n    scale([0.6, 0.6, 1.2])\n    sphere(6, $fn=16);\n}\n\n// Legs\nmodule legs() {\n    // Left leg\n    translate([-10, -10, 5])\n    color(color_body)\n    scale([0.7, 0.7, 1.5])\n    sphere(6, $fn=16);\n    \n    // Right leg\n    translate([10, -10, 5])\n    color(color_body)\n    scale([0.7, 0.7, 1.5])\n    sphere(6, $fn=16);\n}\n\n// Tail\nmodule tail() {\n    color(color_body)\n    union() {\n        // Base of tail\n        translate([0, -20, 15])\n        rotate([0, 0, 0])\n        scale([0.8, 1.5, 0.8])\n        sphere(8, $fn=32);\n        \n        // Tail extension\n        translate([0, -30, 12])\n        rotate([0, 0, 0])\n        scale([0.6, 1.2, 0.6])\n        sphere(6, $fn=32);\n    }\n}\n\n// Back spikes\nmodule spikes() {\n    color(color_spikes)\n    for(i = [-1:1]) {\n        translate([i * 8, -5, 28])\n        rotate([0, 0, 0])\n        scale([1, 0.5, 1.5])\n        cylinder(h=3, r1=2, r2=1, $fn=16);\n    }\n}\n\n// Assembly\nscale(scale_factor)\nunion() {\n    body();\n    head();\n    eyes();\n    nose();\n    mouth();\n    ears();\n    arms();\n    legs();\n    tail();\n    spikes();\n}",
    "renders": true
  },
  {
    "pokemon": "espeon",
    "openscad_code": "// Espeon - Medium complexity realistic style\n// 3D printable model with proper wall thickness and no overhangs\n\n// Colors\nhead_color = \"#f4a6b8\";\nbody_color = \"#f596b8\";\near_color = \"#e596c8\";\ntail_color = \"#e596c8\";\ngem_color = \"#ff69b4\";\neye_color = \"#ff1493\";\nmarking_color = \"#8b4c96\";\n\n// Scale factor for 3D printing (80mm tall)\nscale_factor = 1;\n\n// Main body\nmodule espeon_body() {\n    color(body_color) {\n        // Torso - rounded body\n        union() {\n            // Main body sphere\n            translate([0, 0, 10])\n                scale([1.2, 1, 1.1])\n                sphere(r=15, $fn=32);\n            \n            // Chest extension\n            translate([0, 8, 8])\n                scale([0.8, 0.6, 0.8])\n                sphere(r=12, $fn=32);\n            \n            // Lower body\n            translate([0, -2, 0])\n                scale([0.9, 1, 1.2])\n                sphere(r=14, $fn=32);\n        }\n    }\n}\n\n// Head with realistic features\nmodule espeon_head() {\n    color(head_color) {\n        union() {\n            // Main head shape\n            translate([0, 20, 25])\n                scale([1.1, 1.2, 1])\n                sphere(r=18, $fn=32);\n            \n            // Snout\n            translate([0, 30, 22])\n                scale([0.6, 0.8, 0.5])\n                sphere(r=12, $fn=32);\n            \n            // Forehead gem base\n            translate([0, 15, 32])\n                cylinder(h=3, r1=4, r2=5, $fn=16);\n        }\n    }\n}\n\n// Ears with split design\nmodule espeon_ear(left_right) {\n    color(ear_color) {\n        translate([left_right * 12, 15, 35]) {\n            rotate([0, left_right * -10, left_right * 15]) {\n                union() {\n                    // Main ear\n                    scale([0.3, 0.1, 1.5])\n                        sphere(r=20, $fn=16);\n                    \n                    // Ear split - front part\n                    translate([0, 0, 5])\n                        rotate([left_right * 20, 0, 0])\n                        scale([0.25, 0.08, 0.8])\n                        sphere(r=15, $fn=16);\n                    \n                    // Ear split - back part\n                    translate([0, 0, -5])\n                        rotate([left_right * -20, 0, 0])\n                        scale([0.25, 0.08, 0.8])\n                        sphere(r=15, $fn=16);\n                }\n            }\n        }\n    }\n}\n\n// Eyes with realistic shape\nmodule espeon_eye(left_right) {\n    color(eye_color) {\n        translate([left_right * 8, 28, 25]) {\n            // Eye socket\n            difference() {\n                scale([1.2, 1, 1])\n                    sphere(r=5, $fn=16);\n                \n                // Pupil\n                translate([0, 2, 1])\n                    color(\"#330033\")\n                    scale([0.5, 0.7, 0.3])\n                    sphere(r=4, $fn=16);\n            }\n            \n            // Eye shine\n            translate([left_right * 1, 29.5, 26.5])\n                color(\"#ffffff\")\n                sphere(r=1, $fn=8);\n        }\n    }\n}\n\n// Tail split into multiple parts\nmodule espeon_tail() {\n    color(tail_color) {\n        translate([0, -20, 15]) {\n            rotate([0, 0, 0]) {\n                // Tail base\n                cylinder(h=8, r1=6, r2=4, $fn=16);\n                \n                // Tail segments\n                for(i = [1:3]) {\n                    rotate([0, 0, i * 15])\n                        translate([0, -i * 5, -i * 2])\n                            scale([1 - i * 0.15, 1 - i * 0.15, 1])\n                            cylinder(h=10, r1=4 - i, r2=3 - i * 0.8, $fn=12);\n                }\n                \n                // Tail fork\n                translate([0, -20, -8]) {\n                    // Left fork\n                    rotate([0, 0, -30])\n                        scale([0.6, 0.6, 1])\n                        cylinder(h=15, r1=2.5, r2=1, $fn=8);\n                    \n                    // Right fork\n                    rotate([0, 0, 30])\n                        scale([0.6, 0.6, 1])\n                        cylinder(h=15, r1=2.5, r2=1, $fn=8);\n                }\n            }\n        }\n    }\n}\n\n// Legs with paws\nmodule espeon_leg(pos_x, pos_y, pos_z, angle) {\n    color(body_color) {\n        translate([pos_x, pos_y, pos_z]) {\n            rotate([0, 0, angle]) {\n                // Upper leg\n                cylinder(h=8, r1=3, r2=2.5, $fn=12);\n                \n                // Lower leg\n                translate([0, 0, -8])\n                    cylinder(h=8, r1=2.5, r2=2, $fn=12);\n                \n                // Paw\n                translate([0, 0, -16])\n                    scale([1.2, 1.2, 0.6])\n                    sphere(r=3, $fn=16);\n            }\n        }\n    }\n}\n\n// Body markings\nmodule espeon_markings() {\n    color(marking_color) {\n        // Forehead gem\n        translate([0, 15, 35])\n            color(gem_color)\n            sphere(r=2.5, $fn=16);\n        \n        // Leg markings\n        for(i = [-1, 1]) {\n            translate([i * 5, 5, 8])\n                scale([0.3, 0.8, 0.1])\n                rotate([90, 0, 0])\n                cylinder(h=8, r1=3, r2=3, $fn=8);\n        }\n    }\n}\n\n// Main assembly\nscale(scale_factor) {\n    union() {\n        espeon_body();\n        espeon_head();\n        espeon_ear(-1);  // Left ear\n        espeon_ear(1);   // Right ear\n        espeon_eye(-1);  // Left eye\n        espeon_eye(1);   // Right eye\n        espeon_tail();\n        \n        // Legs - positioned for stability\n        espeon_leg(-8, 0, 0, 20);   // Front left\n        espeon_leg(8, 0, 0, -20);   // Front right\n        espeon_leg(-6, -15, 0, -20);  // Back left\n        espeon_leg(6, -15, 0, 20);   // Back right\n        \n        espeon_markings();\n    }\n}",
    "renders": true
  },
  {
    "pokemon": "umbreon",
    "openscad_code": "// Umbreon Pokemon - Realistic Style Medium Complexity\n// Scaled for 3D printing (~70mm height)\n\n// Colors\ncolor_body = [0.1, 0.1, 0.1];\ncolor_rings = [0.95, 0.95, 0.15];\ncolor_eyes = [0.9, 0.1, 0.1];\ncolor_accents = [0.8, 0.8, 0.8];\n\n// Main body module\nmodule body() {\n    color(color_body)\n    union() {\n        // Torso\n        translate([0, 0, 15])\n            scale([1.2, 0.8, 1])\n            sphere(d=30, $fn=32);\n        \n        // Chest\n        translate([0, 8, 10])\n            scale([0.8, 0.4, 1.2])\n            sphere(d=25, $fn=32);\n        \n        // Hind legs\n        translate([-12, -8, 0])\n            rotate([0, -10, 30])\n            scale([0.6, 0.8, 1.2])\n            cylinder(h=25, d1=12, d2=8, $fn=16);\n        translate([12, -8, 0])\n            rotate([0, -10, -30])\n            scale([0.6, 0.8, 1.2])\n            cylinder(h=25, d1=12, d2=8, $fn=16);\n        \n        // Front legs\n        translate([-10, 15, 0])\n            rotate([0, 10, 0])\n            cylinder(h=20, d=8, $fn=16);\n        translate([10, 15, 0])\n            rotate([0, 10, 0])\n            cylinder(h=20, d=8, $fn=16);\n    }\n}\n\n// Head module\nmodule head() {\n    color(color_body)\n    union() {\n        // Main head\n        translate([0, 25, 35])\n            scale([1, 0.9, 1.1])\n            sphere(d=28, $fn=32);\n        \n        // Snout\n        color(color_accents)\n        translate([0, 35, 32])\n            scale([0.8, 1.2, 0.6])\n            sphere(d=15, $fn=32);\n    }\n}\n\n// Ears module\nmodule ears() {\n    color(color_body)\n    difference() {\n        // Left ear\n        translate([-12, 25, 48])\n            rotate([0, -15, -20])\n            scale([0.3, 1, 2])\n            cylinder(h=25, d1=8, d2=5, $fn=16);\n        \n        // Right ear\n        translate([12, 25, 48])\n            rotate([0, -15, 20])\n            scale([0.3, 1, 2])\n            cylinder(h=25, d1=8, d2=5, $fn=16);\n        \n        // Ear rings\n        color(color_rings)\n        translate([-12, 25, 58])\n            rotate([0, -15, -20])\n            scale([1.2, 0.3, 0.3])\n            cylinder(h=8, d=4, $fn=16);\n        translate([12, 25, 58])\n            rotate([0, -15, 20])\n            scale([1.2, 0.3, 0.3])\n            cylinder(h=8, d=4, $fn=16);\n    }\n}\n\n// Eyes module\nmodule eyes() {\n    color(color_eyes)\n    union() {\n        // Left eye\n        translate([-7, 32, 38])\n            scale([1, 1.2, 0.5])\n            sphere(d=6, $fn=32);\n        \n        // Right eye\n        translate([7, 32, 38])\n            scale([1, 1.2, 0.5])\n            sphere(d=6, $fn=32);\n    }\n}\n\n// Ring patterns module\nmodule rings() {\n    color(color_rings)\n    union() {\n        // Forehead ring\n        translate([0, 28, 45])\n            rotate([90, 0, 0])\n            cylinder(h=2, d1=12, d2=12, $fn=32);\n        \n        // Body rings\n        translate([0, 0, 30])\n            rotate([90, 0, 0])\n            cylinder(h=2, d1=35, d2=35, $fn=32);\n        \n        translate([0, -15, 20])\n            rotate([90, 0, 0])\n            cylinder(h=2, d1=28, d2=28, $fn=32);\n        \n        // Leg rings\n        for(x = [-12, 12]) {\n            translate([x, -8, 12])\n                rotate([90, 0, 0])\n                cylinder(h=2, d1=10, d2=10, $fn=16);\n        }\n    }\n}\n\n// Tail module\nmodule tail() {\n    color(color_body)\n    difference() {\n        // Main tail segments\n        for(i = [0:3]) {\n            translate([0, -15 - i*4, 15 - i*3])\n                rotate([0, -20 - i*5, 0])\n                scale([1 - i*0.15, 1 - i*0.1, 1 - i*0.15])\n                sphere(d=20 - i*3, $fn=32);\n        }\n        \n        // Tail rings\n        color(color_rings)\n        for(i = [0:2]) {\n            translate([0, -20 - i*8, 10 - i*3])\n                rotate([90, 0, 0])\n                cylinder(h=2, d1=18 - i*2, d2=18 - i*2, $fn=32);\n        }\n    }\n}\n\n// Assembly\nscale([0.7, 0.7, 0.7])\nunion() {\n    body();\n    head();\n    ears();\n    eyes();\n    rings();\n    tail();\n}",
    "renders": true
  },
  {
    "pokemon": "murkrow",
    "openscad_code": "$fn=50;\n\n// Overall scale for 3D printing\nscale_factor = 0.4;\n\n// Colors\ncolor_body = [0.05, 0.05, 0.05];\ncolor_beak = [0.9, 0.5, 0.1];\ncolor_eyes = [0.2, 0.2, 0.8];\ncolor_wing = [0.08, 0.08, 0.08];\ncolor_hat = [0.2, 0.1, 0.2];\n\nmodule murkrow() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        union() {\n            // Main body\n            color(color_body) {\n                translate([0, 0, 10]) {\n                    sphere(d=30);\n                }\n                // Body extension\n                translate([0, 0, 0]) {\n                    sphere(d=25);\n                }\n            }\n            \n            // Head\n            color(color_body) {\n                translate([0, 20, 35]) {\n                    sphere(d=20);\n                }\n            }\n            \n            // Beak\n            color(color_beak) {\n                translate([0, 28, 35]) {\n                    rotate([0, -15, 0]) {\n                        cylinder(h=12, d1=8, d2=2, center=true);\n                    }\n                }\n            }\n            \n            // Eyes\n            color(color_eyes) {\n                translate([-6, 25, 38]) {\n                    sphere(d=4);\n                }\n                translate([6, 25, 38]) {\n                    sphere(d=4);\n                }\n            }\n            \n            // Eye whites\n            color([1, 1, 1]) {\n                translate([-6, 24.5, 39.5]) {\n                    sphere(d=2.5);\n                }\n                translate([6, 24.5, 39.5]) {\n                    sphere(d=2.5);\n                }\n            }\n            \n            // Hat brim\n            color(color_hat) {\n                translate([0, 15, 45]) {\n                    rotate([90, 0, 0]) {\n                        cylinder(h=2, d=25);\n                    }\n                }\n            }\n            \n            // Hat top\n            color(color_hat) {\n                translate([0, 15, 47]) {\n                    cylinder(h=8, d=15);\n                }\n                translate([0, 15, 55]) {\n                    sphere(d=8);\n                }\n            }\n            \n            // Wings\n            module wing() {\n                color(color_wing) {\n                    union() {\n                        translate([0, 0, 0]) {\n                            rotate([0, 90, 0]) {\n                                cylinder(h=20, d=5, center=true);\n                            }\n                        }\n                        translate([10, 0, 0]) {\n                            rotate([0, 90, 0]) {\n                                cylinder(h=15, d=5, center=true);\n                            }\n                        }\n                        translate([18, 0, 0]) {\n                            rotate([0, 90, 0]) {\n                                cylinder(h=10, d=4, center=true);\n                            }\n                        }\n                    }\n                }\n            }\n            \n            // Left wing\n            translate([15, 5, 20]) {\n                rotate([0, 0, 45]) {\n                    wing();\n                }\n            }\n            \n            // Right wing\n            translate([-15, 5, 20]) {\n                rotate([0, 0, -45]) {\n                    mirror([1, 0, 0]) {\n                        wing();\n                    }\n                }\n            }\n            \n            // Tail feathers\n            module tail_feather() {\n                color(color_body) {\n                    translate([0, 0, 0]) {\n                        rotate([0, 90, 0]) {\n                            cylinder(h=15, d=3, center=true);\n                        }\n                    }\n                }\n            }\n            \n            // Three tail feathers\n            translate([0, -15, 5]) {\n                rotate([30, 0, 0]) {\n                    tail_feather();\n                }\n            }\n            translate([5, -15, 5]) {\n                rotate([45, 0, 0]) {\n                    tail_feather();\n                }\n            }\n            translate([-5, -15, 5]) {\n                rotate([15, 0, 0]) {\n                    tail_feather();\n                }\n            }\n            \n            // Feet\n            color(color_beak) {\n                translate([5, -5, 0]) {\n                    cylinder(h=5, d=3);\n                }\n                translate([-5, -5, 0]) {\n                    cylinder(h=5, d=3);\n                }\n            }\n            \n            // Feet toes\n            color(color_beak) {\n                translate([7, -5, 0]) {\n                    cylinder(h=2, d1=2, d2=1);\n                }\n                translate([3, -5, 0]) {\n                    cylinder(h=2, d1=2, d2=1);\n                }\n                translate([-7, -5, 0]) {\n                    cylinder(h=2, d1=2, d2=1);\n                }\n                translate([-3, -5, 0]) {\n                    cylinder(h=2, d1=2, d2=1);\n                }\n            }\n        }\n    }\n}\n\n// Render the model\nmurkrow();",
    "renders": true
  },
  {
    "pokemon": "slowking",
    "openscad_code": "// Slowking Pokemon - Realistic Style\n// Size: 80mm tall\n\n// Color definitions\npink = [0.95, 0.75, 0.8];\nwhite = [0.95, 0.95, 0.95];\nblack = [0.1, 0.1, 0.1];\nyellow = [0.9, 0.8, 0.3];\nred = [0.8, 0.2, 0.2];\nshell = [0.85, 0.65, 0.5];\n\n// Main module\nmodule slowking() {\n    union() {\n        // Body\n        color(pink) body();\n        \n        // Head and neck\n        color(pink) head();\n        \n        // Shell on head\n        color(shell) shell();\n        \n        // Arms\n        color(pink) left_arm();\n        color(pink) right_arm();\n        \n        // Legs\n        color(pink) legs();\n        \n        // Tail\n        color(pink) tail();\n    }\n}\n\n// Body - oval shape\nmodule body() {\n    translate([0, 0, 25]) {\n        scale([1.2, 1, 1.5]) sphere(15);\n    }\n}\n\n// Head with neck\nmodule head() {\n    // Neck\n    translate([0, 0, 45]) {\n        cylinder(h=10, r1=8, r2=12);\n    }\n    \n    // Head sphere\n    translate([0, 0, 58]) {\n        sphere(12);\n    }\n    \n    // Snout\n    translate([0, -10, 58]) {\n        scale([0.8, 1.2, 0.8]) sphere(8);\n    }\n    \n    // Eyes\n    color(white) translate([-5, -8, 62]) sphere(3);\n    color(white) translate([5, -8, 62]) sphere(3);\n    color(black) translate([-5, -9.5, 63]) sphere(1.5);\n    color(black) translate([5, -9.5, 63]) sphere(1.5);\n    \n    // Mouth\n    color(black) translate([0, -12, 58]) {\n        rotate([90, 0, 0]) cylinder(h=0.5, r=3, $fn=20);\n    }\n}\n\n// Shell on head\nmodule shell() {\n    // Main shell\n    translate([0, 0, 68]) {\n        difference() {\n            cylinder(h=8, r=16, $fn=6);\n            translate([0, 0, -1]) cylinder(h=10, r=14, $fn=6);\n        }\n    }\n    \n    // Shell ridges\n    for (i = [0:5]) {\n        rotate([0, 0, i * 60]) {\n            translate([0, 12, 72]) {\n                cube([2, 4, 2], center=true);\n            }\n        }\n    }\n    \n    // Gem in center\n    color(red) translate([0, 0, 76.5]) {\n        sphere(3);\n    }\n}\n\n// Left arm\nmodule left_arm() {\n    // Shoulder\n    translate([-18, 0, 40]) {\n        sphere(5);\n    }\n    \n    // Upper arm\n    translate([-23, -5, 35]) {\n        rotate([0, 45, -30]) {\n            cylinder(h=15, r=4);\n        }\n    }\n    \n    // Hand\n    translate([-30, -12, 30]) {\n        sphere(4);\n    }\n}\n\n// Right arm\nmodule right_arm() {\n    mirror([1, 0, 0]) left_arm();\n}\n\n// Legs\nmodule legs() {\n    // Left leg\n    translate([-10, 0, 10]) {\n        cylinder(h=20, r1=6, r2=5);\n    }\n    \n    // Left foot\n    translate([-10, -5, 0]) {\n        scale([1.5, 2, 1]) sphere(5);\n    }\n    \n    // Right leg\n    translate([10, 0, 10]) {\n        cylinder(h=20, r1=6, r2=5);\n    }\n    \n    // Right foot\n    translate([10, -5, 0]) {\n        scale([1.5, 2, 1]) sphere(5);\n    }\n}\n\n// Tail\nmodule tail() {\n    translate([0, 15, 20]) {\n        rotate([0, -20, 0]) {\n            cylinder(h=25, r1=6, r2=3);\n        }\n    }\n    \n    // Tail tip\n    translate([0, 37, 15]) {\n        sphere(4);\n    }\n}\n\n// Generate the model\nslowking();",
    "renders": true
  },
  {
    "pokemon": "misdreavus",
    "openscad_code": "// Misdreavus - Realistic Medium Complexity\n// Overall height ~70mm\n\nmodule misdreavus() {\n    // Body base color\n    color([0.4,0.2,0.6]) {\n        \n        // Main head sphere\n        translate([0,0,35]) sphere(d=40, $fn=48);\n        \n        // Neck extension\n        translate([0,0,15]) cylinder(d1=35,d2=25,h=20,$fn=32);\n        \n        // Bottom ruffle base\n        difference() {\n            translate([0,0,10]) sphere(d=45,$fn=48);\n            translate([0,0,25]) sphere(d=40,$fn=48);\n        }\n    }\n    \n    // Eyes - red with yellow highlights\n    color([0.9,0.1,0.1]) {\n        for(side=[-1,1]) {\n            translate([side*12,20,40]) sphere(d=12,$fn=24);\n            color([1,0.9,0]) \n                translate([side*12,26,42]) sphere(d=4,$fn=16);\n        }\n    }\n    \n    // Mouth - black\n    color([0.1,0.1,0.1]) {\n        difference() {\n            translate([0,18,32]) sphere(d=8,$fn=32);\n            translate([0,25,32]) cube([12,12,12],center=true);\n        }\n    }\n    \n    // Pearl necklace\n    for(i=[0:5]) {\n        angle = i*60;\n        color([0.9,0.9,0.95]) {\n            translate([\n                20*cos(angle),\n                20*sin(angle),\n                25\n            ]) sphere(d=6,$fn=16);\n        }\n    }\n    \n    // Floating hair tendrils\n    for(i=[0:5]) {\n        angle = i*60 + 30;\n        color([0.3,0.1,0.5]) {\n            translate([\n                25*cos(angle),\n                25*sin(angle),\n                45\n            ]) rotate([90,0,angle]) \n                cylinder(d1=8,d2=3,h=25,$fn=16);\n        }\n    }\n    \n    // Side tufts\n    color([0.3,0.1,0.5]) {\n        // Left tuft\n        translate([-20,0,50]) rotate([0,0,-30]) \n            cylinder(d1=6,d2=3,h=20,$fn=16);\n            \n        // Right tuft  \n        translate([20,0,50]) rotate([0,0,30]) \n            cylinder(d1=6,d2=3,h=20,$fn=16);\n    }\n    \n    // Neck gems\n    for(i=[0:2]) {\n        angle = i*120;\n        color([0.9,0.9,0.95]) {\n            translate([\n                15*cos(angle),\n                15*sin(angle),\n                22\n            ]) sphere(d=5,$fn=12);\n        }\n    }\n    \n    // Lower ruffle details\n    for(i=[0:15]) {\n        angle = i*24;\n        color([0.5,0.3,0.7]) {\n            translate([\n                22*cos(angle),\n                22*sin(angle),\n                12\n            ]) scale([1,1,0.3]) sphere(d=5,$fn=8);\n        }\n    }\n}\n\n// Base support for printing\ntranslate([0,0,0]) cylinder(d=30,h=2,$fn=32);\n\n// Assemble model on base\ntranslate([0,0,2]) misdreavus();",
    "renders": true
  },
  {
    "pokemon": "unown",
    "openscad_code": "// Unown Pokemon (realistic medium complexity)\n// Based on the letter 'F' form (Unown-F)\n\n// Color definitions\n$fa = 1;\n$fs = 0.4;\n\nmodule unown_body() {\n    // Main eye - large oval shape\n    translate([0, 0, 10])\n    scale([1.2, 1.5, 0.8])\n    sphere(15);\n}\n\nmodule unown_eye_pupil() {\n    // Pupil - smaller black circle\n    color([0, 0, 0])\n    translate([0, 0, 19])\n    scale([0.7, 0.7, 0.2])\n    sphere(10);\n}\n\nmodule unown_stem() {\n    // Vertical stem of the F\n    color([0.8, 0.8, 0.9])\n    translate([0, -20, 0])\n    cube([8, 40, 25], center=true);\n}\n\nmodule unown_top_bar() {\n    // Top horizontal bar of the F\n    color([0.8, 0.8, 0.9])\n    translate([15, 15, 0])\n    cube([30, 8, 25], center=true);\n}\n\nmodule unown_middle_bar() {\n    // Middle horizontal bar of the F\n    color([0.8, 0.8, 0.9])\n    translate([7, 0, 0])\n    cube([22, 8, 25], center=true);\n}\n\nmodule unown_ear_left() {\n    // Left ear/tail extension\n    color([0.9, 0.9, 1])\n    translate([-20, 20, 5])\n    rotate([0, 0, -30])\n    scale([0.8, 2.5, 0.6])\n    cylinder(h=15, r=5, center=true);\n}\n\nmodule unown_ear_right() {\n    // Right ear/tail extension\n    color([0.9, 0.9, 1])\n    translate([20, 20, 5])\n    rotate([0, 0, 30])\n    scale([0.8, 2.5, 0.6])\n    cylinder(h=15, r=5, center=true);\n}\n\nmodule unown_base_ring() {\n    // Circular base platform\n    color([0.7, 0.7, 0.8])\n    translate([0, 0, -5])\n    cylinder(h=3, r=35, center=true);\n    \n    // Inner ring detail\n    difference() {\n        cylinder(h=3, r=32, center=true);\n        cylinder(h=3, r=28, center=true);\n    }\n}\n\nmodule unown_markings() {\n    // Ancient rune-like markings on the body\n    color([0.5, 0.5, 0.6])\n    for(i=[-1:1]) {\n        translate([0, -5 + i*5, 12])\n        scale([0.1, 0.1, 0.2])\n        sphere(8);\n    }\n}\n\nmodule unown_complete() {\n    union() {\n        // Main structure\n        unown_body();\n        unown_stem();\n        unown_top_bar();\n        unown_middle_bar();\n        \n        // Extensions\n        unown_ear_left();\n        unown_ear_right();\n        \n        // Base\n        unown_base_ring();\n        \n        // Details\n        unown_eye_pupil();\n        unown_markings();\n    }\n}\n\n// Scale to fit 3D printing size (60mm height)\nscale([0.8, 0.8, 0.8])\nunown_complete();",
    "renders": true
  },
  {
    "pokemon": "wobbuffet",
    "openscad_code": "// Wobbuffet Pokemon - Realistic medium complexity\n// Overall height: 80mm\n\n// Colors\n$fa = 1;\n$fs = 0.4;\n\nmodule wobbuffet() {\n    color([0.85, 0.85, 0.85]) body();\n    color([0.15, 0.15, 0.15]) tail();\n    color([0.15, 0.15, 0.15]) arms();\n    color([0.9, 0.1, 0.1]) mouth();\n    color([0.9, 0.1, 0.1]) markings();\n    color([0.9, 0.1, 0.1]) eyes();\n    color([0.15, 0.15, 0.15]) feet();\n}\n\nmodule body() {\n    // Main spherical body\n    translate([0, 0, 30])\n        sphere(d = 45);\n    \n    // Body bottom extension\n    translate([0, 0, 10])\n        cylinder(h = 20, d1 = 45, d2 = 35);\n}\n\nmodule tail() {\n    // Tail base\n    translate([25, 0, 25])\n        rotate([0, 90, 0])\n        cylinder(h = 25, d = 20);\n    \n    // Tail extension\n    translate([45, 0, 25])\n        rotate([0, 90, 0])\n        cylinder(h = 30, d = 15);\n    \n    // Tail tip\n    translate([70, 0, 25])\n        rotate([0, 90, 0])\n        cylinder(h = 10, d1 = 15, d2 = 0);\n    \n    // Tail eyes\n    translate([55, 5, 28])\n        sphere(d = 5);\n    translate([55, -5, 28])\n        sphere(d = 5);\n}\n\nmodule arms() {\n    // Left arm\n    translate([-20, 20, 35])\n        rotate([0, 30, 0])\n        cylinder(h = 15, d = 12);\n    translate([-30, 30, 35])\n        rotate([0, 30, 0])\n        sphere(d = 15);\n    \n    // Right arm\n    translate([-20, -20, 35])\n        rotate([0, -30, 0])\n        cylinder(h = 15, d = 12);\n    translate([-30, -30, 35])\n        rotate([0, -30, 0])\n        sphere(d = 15);\n}\n\nmodule mouth() {\n    // Main mouth shape\n    translate([0, 0, 45])\n        rotate([0, 0, 0])\n        scale([1, 0.6, 1])\n        sphere(d = 20);\n    \n    // Mouth opening\n    translate([0, 0, 52])\n        rotate([0, 0, 0])\n        scale([0.8, 0.5, 0.8])\n        sphere(d = 15);\n}\n\nmodule markings() {\n    // Top marking\n    translate([0, 0, 60])\n        rotate([0, 90, 0])\n        cylinder(h = 8, d1 = 15, d2 = 0);\n    \n    // Side markings\n    for(i = [1:3]) {\n        rotate([0, 0, i * 120])\n        translate([22, 0, 40])\n        rotate([90, 0, 0])\n        cylinder(h = 12, d1 = 8, d2 = 0);\n    }\n}\n\nmodule eyes() {\n    // Left eye\n    translate([12, 12, 48])\n        difference() {\n            sphere(d = 10);\n            translate([2, 2, 2])\n            sphere(d = 6);\n        }\n    \n    // Right eye\n    translate([12, -12, 48])\n        difference() {\n            sphere(d = 10);\n            translate([2, -2, 2])\n            sphere(d = 6);\n        }\n}\n\nmodule feet() {\n    // Left foot\n    translate([10, 15, 5])\n        sphere(d = 15);\n    \n    // Right foot\n    translate([10, -15, 5])\n        sphere(d = 15);\n}\n\nwobbuffet();",
    "renders": true
  },
  {
    "pokemon": "girafarig",
    "openscad_code": "// Girafarig Pokemon - Realistic medium complexity\n// 3D printable model with proper wall thickness\n\n// Colors\nbody_color = \"#DEB887\";  // Tan/beige for body\nneck_color = \"#8B7355\";  // Brown for neck\nblack = \"#000000\";\nwhite = \"#FFFFFF\";\ndark_brown = \"#654321\";\npink = \"#FFB6C1\";\n\n// Wall thickness\nwall = 1.2;\n\nmodule girafarig() {\n    // Main body\n    color(body_color) union() {\n        // Hindquarters (larger body)\n        translate([0, 0, 10]) sphere(d=25);\n        \n        // Neck\n        color(neck_color) translate([0, 12, 25]) \n            rotate([0, 15, 0]) cylinder(h=20, d1=12, d2=8, $fn=16);\n        \n        // Head\n        translate([0, 25, 35]) sphere(d=18);\n        \n        // Tail head (second head)\n        translate([0, -12, 10]) sphere(d=12);\n    }\n    \n    // Legs\n    for(i = [-1, 1]) {\n        // Front legs\n        translate([i*8, 8, 0])\n            rotate([0, 0, 0]) \n            cylinder(h=15, d=6, $fn=8);\n        \n        // Back legs\n        translate([i*10, -8, 0])\n            rotate([0, 0, 0])\n            cylinder(h=15, d=7, $fn=8);\n    }\n    \n    // Ears\n    for(i = [-1, 1]) {\n        color(neck_color) translate([i*6, 27, 42])\n            rotate([0, -30, 0])\n            scale([1, 0.7, 2])\n            sphere(d=4);\n    }\n    \n    // Horns\n    for(i = [-1, 1]) {\n        color(dark_brown) translate([i*3, 25, 45])\n            cylinder(h=6, d1=2, d2=1, $fn=8);\n    }\n    \n    // Eyes\n    color(white) translate([4, 33, 35]) sphere(d=3);\n    color(white) translate([-4, 33, 35]) sphere(d=3);\n    \n    // Pupils\n    color(black) {\n        translate([4.5, 33.5, 36.5]) sphere(d=1.5);\n        translate([-4.5, 33.5, 36.5]) sphere(d=1.5);\n    }\n    \n    // Nose\n    color(pink) translate([0, 35, 32]) sphere(d=2);\n    \n    // Tail eyes\n    color(white) translate([3, -18, 12]) sphere(d=2.5);\n    color(white) translate([-3, -18, 12]) sphere(d=2.5);\n    \n    color(black) {\n        translate([3.5, -19, 13]) sphere(d=1.2);\n        translate([-3.5, -19, 13]) sphere(d=1.2);\n    }\n    \n    // Spots pattern on body\n    for(pos = [[5, 5, 15], [-5, 5, 15], [7, 0, 12], [-7, 0, 12], [6, -5, 10], [-6, -5, 10]]) {\n        color(white) translate(pos) sphere(d=3);\n    }\n    \n    // Tail spots\n    for(pos = [[2, -12, 8], [-2, -12, 8], [0, -14, 8]]) {\n        color(white) translate(pos) sphere(d=1.5);\n    }\n    \n    // Hooves\n    for(i = [-1, 1]) {\n        color(dark_brown) {\n            translate([i*8, 8, 0]) cylinder(h=2, d=7, $fn=8);\n            translate([i*10, -8, 0]) cylinder(h=2, d=8, $fn=8);\n        }\n    }\n}\n\n// Main assembly\ngirafarig();",
    "renders": true
  },
  {
    "pokemon": "pineco",
    "openscad_code": "// Pineco Pokemon - Realistic Style, Medium Complexity\n// 3D printable, approximately 70mm tall\n\nmodule pineco_body() {\n    // Main body - pinecone shaped ellipsoid\n    color(\"#2E8B57\") {\n        scale([1, 1, 1.3]) sphere(d=45, $fn=64);\n    }\n}\n\nmodule pineco_face() {\n    // Eyes - triangular slits\n    color(\"#000000\") {\n        translate([-12, 18, 28]) rotate([0, 0, 30]) cube([3, 12, 2]);\n        translate([12, 18, 28]) rotate([0, 0, -30]) cube([3, 12, 2]);\n    }\n    \n    // Mouth - small triangular opening\n    color(\"#8B4513\") {\n        translate([0, 12, 23]) rotate([0, 0, 0]) \n            cylinder(h=2, r1=4, r2=0, $fn=3);\n    }\n}\n\nmodule pineco_scales() {\n    // Generate scales around the body in spiral pattern\n    for (i = [0:15]) {\n        for (j = [0:5]) {\n            rotate([0, 0, i*22.5 + j*7]) \n            translate([0, 0, -15 + j*6]) {\n                color(\"#228B22\") {\n                    scale([1, 1, 0.3]) \n                    rotate([0, 90, 0]) \n                    cylinder(h=8, r1=4, r2=2, $fn=6);\n                }\n            }\n        }\n    }\n}\n\nmodule pineco_spikes() {\n    // Top spikes\n    for (i = [0:7]) {\n        rotate([0, 0, i*45]) \n        translate([0, 20, 28]) {\n            color(\"#006400\") {\n                rotate([30, 0, 0]) \n                cylinder(h=15, r1=3, r2=0.5, $fn=6);\n            }\n        }\n    }\n    \n    // Bottom spikes\n    for (i = [0:7]) {\n        rotate([0, 0, i*45 + 22.5]) \n        translate([0, 22, -28]) {\n            color(\"#006400\") {\n                rotate([-30, 0, 0]) \n                cylinder(h=12, r1=2.5, r2=0.5, $fn=6);\n            }\n        }\n    }\n}\n\nmodule pineco_ring() {\n    // Metallic ring around middle\n    color(\"#C0C0C0\") {\n        rotate([90, 0, 0]) \n        cylinder(h=4, r1=23, r2=23, $fn=64);\n    }\n    \n    // Ring details\n    color(\"#808080\") {\n        for (i = [0:11]) {\n            rotate([0, 0, i*30]) \n            translate([23, 0, 0]) \n            cube([2, 2, 4], center=true);\n        }\n    }\n}\n\n// Assemble the complete Pineco\nunion() {\n    pineco_body();\n    pineco_face();\n    pineco_scales();\n    pineco_spikes();\n    pineco_ring();\n}",
    "renders": true
  },
  {
    "pokemon": "forretress",
    "openscad_code": "// Forretress Pokemon - Realistic Style\n// Medium complexity 3D printable model\n\n// Basic parameters\nbody_r = 25;\nbody_h = 30;\nplate_thickness = 2;\nbase_color = [0.8, 0.2, 0.1];  // Reddish-brown\nhighlight_color = [0.9, 0.4, 0.2];  // Lighter red-brown\neye_color = [0.9, 0.9, 0.1];  // Yellow\ndark_color = [0.3, 0.1, 0.05];  // Dark brown\n\n// Main body module\nmodule forretress_body() {\n    color(base_color) {\n        // Main spherical body\n        sphere(r = body_r);\n        \n        // Bottom flat base\n        translate([0, 0, -body_r])\n            cylinder(h = body_h - body_r, r1 = body_r, r2 = body_r * 0.8, $fn = 32);\n    }\n}\n\n// Hexagonal plates covering the body\nmodule hex_plate(size, height) {\n    color(highlight_color) {\n        cylinder(h = height, r = size, $fn = 6);\n    }\n}\n\n// Generate hexagonal armor plates\nmodule armor_plates() {\n    for (i = [0:5]) {\n        rotate([0, 0, i * 60])\n            translate([body_r * 0.8, 0, body_r * 0.3])\n                rotate([90, 0, 0])\n                    hex_plate(body_r * 0.4, plate_thickness);\n    }\n    \n    // Additional plates on top hemisphere\n    for (i = [0:11]) {\n        rotate([0, 0, i * 30])\n            translate([body_r * 0.6, 0, body_r * 0.7])\n                rotate([90, 0, 0])\n                    hex_plate(body_r * 0.25, plate_thickness * 0.8);\n    }\n}\n\n// Eye sockets and eyes\nmodule eyes() {\n    // Left eye\n    translate([-body_r * 0.4, body_r * 0.7, body_r * 0.3]) {\n        color(dark_color)\n            sphere(r = body_r * 0.15);\n        color(eye_color)\n            translate([body_r * 0.05, 0, 0])\n                sphere(r = body_r * 0.08);\n    }\n    \n    // Right eye\n    translate([body_r * 0.4, body_r * 0.7, body_r * 0.3]) {\n        color(dark_color)\n            sphere(r = body_r * 0.15);\n        color(eye_color)\n            translate([-body_r * 0.05, 0, 0])\n                sphere(r = body_r * 0.08);\n    }\n}\n\n// Cannon openings (Forretress's signature feature)\nmodule cannons() {\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90])\n            translate([body_r * 0.9, 0, body_r * 0.2]) {\n                // Cannon barrel\n                color(dark_color) {\n                    rotate([0, 90, 0])\n                        cylinder(h = body_r * 0.6, r = body_r * 0.15, $fn = 16);\n                    \n                    // Recessed opening\n                    translate([body_r * 0.6, 0, 0])\n                        rotate([0, 90, 0])\n                            cylinder(h = body_r * 0.3, r1 = body_r * 0.15, r2 = body_r * 0.1, $fn = 16);\n                }\n            }\n    }\n}\n\n// Metallic ridges and details\nmodule details() {\n    // Top ridge\n    color(highlight_color) {\n        translate([0, 0, body_r * 0.9])\n            cylinder(h = plate_thickness * 2, r1 = body_r * 0.3, r2 = body_r * 0.2, $fn = 32);\n    }\n    \n    // Side vents\n    for (i = [0:7]) {\n        rotate([0, 0, i * 45])\n            translate([body_r * 0.85, 0, -body_r * 0.3]) {\n                color(dark_color)\n                    cube([body_r * 0.3, body_r * 0.1, plate_thickness], center = true);\n            }\n    }\n}\n\n// Assembly\nunion() {\n    forretress_body();\n    armor_plates();\n    eyes();\n    cannons();\n    details();\n}\n\n// Base for stability\ncolor(dark_color)\n    translate([0, 0, -body_h - 2])\n        cylinder(h = 2, r = body_r * 1.2, $fn = 32);",
    "renders": true
  },
  {
    "pokemon": "dunsparce",
    "openscad_code": "// Realistic Dunsparce Pokemon - Medium Complexity\n// 3D printable model with proper wall thickness and no overhangs\n\n// Overall scale factor for 3D printing (target ~70mm length)\nscale_factor = 0.7;\n\n// Main body color (golden yellow)\nbody_color = [1, 0.8, 0.2];\n\n// Wing color (light blue)\nwing_color = [0.6, 0.8, 1];\n\n// Accent colors\naccent_color = [0.8, 0.6, 0.2];\neye_color = [0, 0, 0];\nwhite_color = [1, 1, 1];\n\n// Create the complete Dunsparce\nmodule dunsparce() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        union() {\n            // Main serpentine body\n            body();\n            \n            // Head section\n            head();\n            \n            // Wings\n            wings();\n            \n            // Tail drill\n            tail_drill();\n            \n            // Feet\n            feet();\n        }\n    }\n}\n\n// Main body - elongated oval shape\nmodule body() {\n    color(body_color) {\n        // Central body cylinder with rounded ends\n        translate([0, 0, 15])\n            scale([1.5, 1, 1])\n            sphere(20);\n        \n        translate([0, 0, -5])\n            cylinder(h=40, r1=20, r2=15);\n        \n        translate([0, 0, -25])\n            sphere(15);\n        \n        // Body segments for realistic appearance\n        for(i = [0:3]) {\n            translate([0, 0, 5 - i*12])\n                difference() {\n                    scale([1.4 - i*0.1, 1 - i*0.05, 0.3])\n                        sphere(18 - i*2);\n                    translate([0, 0, -5])\n                        cube([40, 40, 10], center=true);\n                }\n        }\n    }\n}\n\n// Head with characteristic features\nmodule head() {\n    color(body_color) {\n        // Main head shape\n        translate([35, 0, 25])\n            rotate([0, 90, 0])\n            scale([1.2, 1, 0.8])\n            sphere(18);\n        \n        // Snout extension\n        translate([50, 0, 25])\n            rotate([0, 15, 0])\n            scale([0.8, 0.6, 0.6])\n            sphere(12);\n        \n        // Head ridges\n        translate([45, 0, 38])\n            rotate([90, 0, 0])\n            cylinder(h=15, r1=3, r2=1);\n        \n        translate([45, 0, 12])\n            rotate([90, 0, 0])\n            cylinder(h=15, r1=3, r2=1);\n    }\n    \n    // Eyes\n    color(eye_color) {\n        translate([52, 8, 28])\n            sphere(3);\n        translate([52, -8, 28])\n            sphere(3);\n    }\n    \n    // Eye highlights\n    color(white_color) {\n        translate([53, 8.5, 29])\n            sphere(1);\n        translate([53, -7.5, 29])\n            sphere(1);\n    }\n    \n    // Mouth\n    color([0.3, 0.1, 0.1]) {\n        translate([58, 0, 22])\n            rotate([0, 30, 0])\n            scale([0.5, 0.1, 0.3])\n            sphere(5);\n    }\n}\n\n// Wings - small blue wings on back\nmodule wings() {\n    color(wing_color) {\n        // Left wing\n        translate([10, 15, 30])\n            rotate([0, 0, -30])\n            scale([1, 0.2, 0.5])\n            sphere(12);\n        \n        // Right wing\n        translate([10, -15, 30])\n            rotate([0, 0, 30])\n            scale([1, 0.2, 0.5])\n            sphere(12);\n        \n        // Wing details\n        for(i = [0:2]) {\n            translate([5 + i*5, 15, 30])\n                rotate([0, 0, -30])\n                scale([0.8 - i*0.2, 0.1, 0.3 - i*0.1])\n                sphere(8 - i*2);\n            \n            translate([5 + i*5, -15, 30])\n                rotate([0, 0, 30])\n                scale([0.8 - i*0.2, 0.1, 0.3 - i*0.1])\n                sphere(8 - i*2);\n        }\n    }\n}\n\n// Tail drill - spiral tail end\nmodule tail_drill() {\n    color(body_color) {\n        // Main drill shape\n        translate([-30, 0, -20])\n            rotate([0, 0, 0])\n            cylinder(h=25, r1=15, r2=8);\n        \n        // Drill ridges\n        for(i = [0:4]) {\n            rotate([0, 0, i*72])\n            translate([-32, 0, -20 + i*5])\n                difference() {\n                    cylinder(h=5, r1=14 - i*1.5, r2=13 - i*1.5);\n                    translate([0, -15, -1])\n                        cube([30, 30, 7]);\n                }\n        }\n    }\n}\n\n// Small feet\nmodule feet() {\n    color(body_color) {\n        // Front left foot\n        translate([20, 12, 0])\n            rotate([0, -30, 0])\n            scale([0.5, 0.3, 0.2])\n            sphere(10);\n        \n        // Front right foot\n        translate([20, -12, 0])\n            rotate([0, -30, 0])\n            scale([0.5, 0.3, 0.2])\n            sphere(10);\n        \n        // Back left foot\n        translate([-15, 10, -5])\n            rotate([0, 30, 0])\n            scale([0.4, 0.3, 0.2])\n            sphere(10);\n        \n        // Back right foot\n        translate([-15, -10, -5])\n            rotate([0, 30, 0])\n            scale([0.4, 0.3, 0.2])\n            sphere(10);\n    }\n}\n\n// Create the Dunsparce\ndunsparce();",
    "renders": true
  },
  {
    "pokemon": "gligar",
    "openscad_code": "// Gligar OpenSCAD Model - Medium Complexity, Realistic Style\n// Approximate size: 80mm wingspan, 40mm height\n\n$fn = 32;\nbody_color = \"#6B4D9E\"; // Purple\naccent_color = \"#E6D3A3\"; // Cream\neye_color = \"#FF0000\"; // Red\nwing_color = \"#4A3C6B\"; // Darker purple\n\nmodule gligar() {\n    union() {\n        // Main body\n        color(body_color)\n        translate([0, 0, 15])\n        scale([1.2, 0.8, 1])\n        sphere(15);\n\n        // Head\n        color(body_color)\n        translate([0, 20, 25])\n        scale([1.3, 1.1, 0.9])\n        sphere(12);\n\n        // Snout\n        color(body_color)\n        translate([0, 32, 22])\n        scale([0.7, 1.2, 0.6])\n        rotate([30, 0, 0])\n        cylinder(8, 5, 3);\n\n        // Eyes (red circular)\n        for(x = [-6, 6]) {\n            color(eye_color)\n            translate([x, 25, 28])\n            sphere(3);\n            \n            // Eye pupils\n            color(\"black\")\n            translate([x, 26, 30])\n            sphere(1.5);\n        }\n\n        // Mandibles\n        for(x = [-4, 4]) {\n            color(accent_color)\n            translate([x, 35, 20])\n            rotate([0, -20, x > 0 ? 20 : -20])\n            cylinder(6, 2, 1);\n        }\n\n        // Ears\n        for(x = [-12, 12]) {\n            color(body_color)\n            translate([x, 15, 32])\n            rotate([0, 0, x > 0 ? 30 : -30])\n            scale([0.4, 1, 2])\n            cylinder(8, 4, 2);\n        }\n\n        // Arms with claws\n        for(side = [-1, 1]) {\n            // Upper arm\n            color(body_color)\n            translate([side * 18, 5, 20])\n            rotate([0, 0, side * 40])\n            cylinder(10, 5, 4);\n            \n            // Lower arm\n            color(body_color)\n            translate([side * 25, -2, 18])\n            rotate([0, 0, side * 60])\n            cylinder(8, 4, 3);\n            \n            // Claw\n            color(accent_color)\n            translate([side * 32, -6, 16])\n            rotate([0, 0, side * 90])\n            cylinder(6, 3, 0.5);\n        }\n\n        // Legs\n        for(side = [-1, 1]) {\n            color(body_color)\n            translate([side * 10, -15, 10])\n            rotate([0, 0, side * -20])\n            cylinder(12, 4, 3);\n            \n            // Foot\n            color(accent_color)\n            translate([side * 12, -22, 5])\n            scale([1.5, 2, 0.8])\n            sphere(3);\n        }\n\n        // Tail segments\n        color(body_color)\n        translate([0, -20, 15])\n        rotate([0, 20, 0])\n        cylinder(15, 6, 4);\n        \n        // Tail stinger\n        color(accent_color)\n        translate([0, -32, 10])\n        rotate([0, 30, 0])\n        cylinder(8, 3, 0.5);\n\n        // Wings (membranous)\n        for(side = [-1, 1]) {\n            color(wing_color)\n            translate([side * 25, 0, 25])\n            rotate([0, 0, side * 30])\n            linear_extrude(1)\n            polygon(points=[\n                [0, 0],\n                [side * 30, -10],\n                [side * 35, 5],\n                [side * 25, 15],\n                [side * 15, 10],\n                [0, 0]\n            ]);\n        }\n\n        // Wing supports\n        for(side = [-1, 1]) {\n            color(body_color)\n            translate([side * 25, 0, 25])\n            rotate([0, 0, side * 30])\n            for(i = [0:30:120]) {\n                rotate(i)\n                cylinder(25, 1, 0.5);\n            }\n        }\n\n        // Chest marking\n        color(accent_color)\n        translate([0, 10, 22])\n        scale([1.5, 1, 0.1])\n        sphere(5);\n\n        // Back spikes\n        for(i = [0:20:60]) {\n            color(body_color)\n            translate([0, -15 + i * 0.3, 20 + i * 0.2])\n            scale([0.8, 0.8, 1.5])\n            cylinder(3, 2, 1);\n        }\n    }\n}\n\n// Render the model\ngligar();",
    "renders": true
  },
  {
    "pokemon": "steelix",
    "openscad_code": "// Steelix - Realistic Style, Medium Complexity\n// Scaled for 3D printing: ~80mm long\n\n// Main color scheme\nsteel_gray = [0.5,0.52,0.55];\nsilver = [0.75,0.75,0.75];\ndark_gray = [0.25,0.25,0.25];\nlight_gray = [0.65,0.65,0.65];\n\nmodule steelix() {\n    // Body segments\n    color(steel_gray) {\n        // Head\n        union() {\n            translate([0,0,8]) {\n                // Head cube\n                cube([16,12,10], center=true);\n                \n                // Snout extension\n                translate([8,0,0]) rotate([0,-15,0]) \n                    cube([10,8,6], center=true);\n                \n                // Jaw bottom\n                translate([2,-6,2]) \n                    cube([12,6,4], center=true);\n            }\n            \n            // Eye ridges\n            translate([-4,5,13]) rotate([0,30,0])\n                cube([6,4,3], center=true);\n            translate([-4,-5,13]) rotate([0,-30,0])\n                cube([6,4,3], center=true);\n            \n            // Eyes\n            color(dark_gray) {\n                translate([-7,4,12]) sphere(1.5);\n                translate([-7,-4,12]) sphere(1.5);\n            }\n        }\n        \n        // Body segments - using loop for repetitive parts\n        for(i=[1:8]) {\n            translate([i*9,0,8-i*0.5]) {\n                rotate([0,0,i*5]) {\n                    // Main segment body\n                    cube([10,8-i*0.3,8-i*0.3], center=true);\n                    \n                    // Top spikes\n                    translate([0,0,5-i*0.2]) \n                        cube([2,1,3], center=true);\n                    \n                    // Side spikes\n                    translate([0,4.5-i*0.2,0]) \n                        cube([1,2,2], center=true);\n                    translate([0,-4.5+i*0.2,0]) \n                        cube([1,2,2], center=true);\n                }\n            }\n        }\n        \n        // Tail end\n        translate([76,0,3]) rotate([0,0,40]) \n            cube([12,6,4], center=true);\n    }\n    \n    // Metallic details\n    color(silver) {\n        // Head ridges\n        for(i=[0:2]) {\n            translate([2+i*3,0,13]) \n                cube([2,10,1], center=true);\n        }\n        \n        // Body plates\n        for(i=[1:8]) {\n            translate([i*9,0,8-i*0.5]) {\n                // Hexagonal pattern (simulated with cubes)\n                for(j=[-1:1]) {\n                    for(k=[-1:1]) {\n                        if(j!=0 || k!=0) {\n                            translate([j*2,k*2,4-i*0.2]) \n                                cube([1.5,1.5,0.5], center=true);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Darker accent details\n    color(dark_gray) {\n        // Mouth opening\n        translate([5,0,5]) \n            cube([6,4,2], center=true);\n            \n        // Segment joints\n        for(i=[1:7]) {\n            translate([i*9+4.5,0,8-i*0.5]) \n                cylinder(h=8-i*0.3, r1=3.5, r2=3.5, center=true);\n        }\n    }\n}\n\n// Ground base for printing\ncolor(light_gray) {\n    translate([38,0,-1]) \n        cube([80,30,2], center=true);\n}\n\n// Render the steelix\nsteelix();",
    "renders": true
  },
  {
    "pokemon": "snubbull",
    "openscad_code": "// Snubbull - Medium Complexity Realistic Style\n// Overall dimensions: ~80mm height\n\n// Color definitions\ncolor_pink = [0.95, 0.6, 0.75];\ncolor_blue = [0.4, 0.6, 0.9];\ncolor_white = [1, 1, 1];\ncolor_black = [0.1, 0.1, 0.1];\n\n// Main body module\nmodule snubbull_body() {\n    // Torso - slightly chubby\n    translate([0, 0, 25])\n    scale([1.2, 1.1, 1.3])\n    color(color_pink)\n    sphere(d=30);\n    \n    // Belly patch\n    translate([0, 8, 20])\n    scale([1.1, 0.8, 1.2])\n    color(color_white)\n    sphere(d=20);\n}\n\n// Head module with all facial features\nmodule snubbull_head() {\n    // Main head sphere\n    translate([0, 0, 50])\n    color(color_pink)\n    sphere(d=35);\n    \n    // Snout\n    translate([0, -18, 45])\n    rotate([15, 0, 0])\n    scale([0.8, 1.2, 0.9])\n    color(color_pink)\n    sphere(d=20);\n    \n    // Nose\n    translate([0, -25, 47])\n    color(color_blue)\n    sphere(d=5);\n    \n    // Eyes\n    for(x = [-8, 8]) {\n        translate([x, 0, 55])\n        color(color_white)\n        sphere(d=6);\n        \n        // Pupils\n        translate([x, -2, 57])\n        color(color_black)\n        sphere(d=3);\n    }\n    \n    // Mouth\n    translate([0, -22, 40])\n    rotate([20, 0, 0])\n    color(color_black)\n    linear_extrude(height=2)\n    square([10, 3], center=true);\n    \n    // Teeth\n    for(x = [-3, 3]) {\n        translate([x, -25, 38])\n        color(color_white)\n        cylinder(h=2, d=2);\n    }\n    \n    // Eyebrows\n    for(x = [-12, 12]) {\n        translate([x, 5, 58])\n        rotate([0, 0, x > 0 ? -20 : 20])\n        color(color_blue)\n        scale([0.3, 0.8, 0.3])\n        sphere(d=8);\n    }\n}\n\n// Ear module\nmodule snubbull_ears() {\n    // Left ear\n    translate([-15, 0, 65])\n    rotate([0, 0, -20])\n    color(color_pink)\n    difference() {\n        // Outer ear\n        scale([0.8, 0.3, 2.5])\n        cylinder(h=15, d=10);\n        \n        // Inner ear\n        translate([0, 2, 2])\n        scale([0.6, 0.2, 2])\n        color(color_blue)\n        cylinder(h=12, d=8);\n    }\n    \n    // Right ear (mirrored)\n    mirror([1, 0, 0])\n    translate([-15, 0, 65])\n    rotate([0, 0, -20])\n    color(color_pink)\n    difference() {\n        // Outer ear\n        scale([0.8, 0.3, 2.5])\n        cylinder(h=15, d=10);\n        \n        // Inner ear\n        translate([0, 2, 2])\n        scale([0.6, 0.2, 2])\n        color(color_blue)\n        cylinder(h=12, d=8);\n    }\n}\n\n// Arms\nmodule snubbull_arms() {\n    // Left arm\n    translate([-20, 0, 35])\n    rotate([0, 0, 30])\n    color(color_pink)\n    union() {\n        // Upper arm\n        scale([0.6, 0.6, 1.2])\n        sphere(d=10);\n        \n        // Lower arm\n        translate([-5, -8, -10])\n        scale([0.5, 0.5, 1])\n        sphere(d=8);\n        \n        // Paw\n        translate([-8, -12, -18])\n        color(color_blue)\n        sphere(d=6);\n    }\n    \n    // Right arm (mirrored)\n    mirror([1, 0, 0])\n    translate([-20, 0, 35])\n    rotate([0, 0, 30])\n    color(color_pink)\n    union() {\n        // Upper arm\n        scale([0.6, 0.6, 1.2])\n        sphere(d=10);\n        \n        // Lower arm\n        translate([-5, -8, -10])\n        scale([0.5, 0.5, 1])\n        sphere(d=8);\n        \n        // Paw\n        translate([-8, -12, -18])\n        color(color_blue)\n        sphere(d=6);\n    }\n}\n\n// Legs and feet\nmodule snubbull_legs() {\n    // Left leg\n    translate([-10, 0, 15])\n    rotate([0, 0, 10])\n    color(color_pink)\n    union() {\n        // Leg\n        scale([0.7, 0.7, 1.5])\n        sphere(d=12);\n        \n        // Foot\n        translate([0, -5, -12])\n        color(color_blue)\n        scale([1.2, 1.5, 0.5])\n        sphere(d=10);\n    }\n    \n    // Right leg\n    translate([10, 0, 15])\n    rotate([0, 0, -10])\n    color(color_pink)\n    union() {\n        // Leg\n        scale([0.7, 0.7, 1.5])\n        sphere(d=12);\n        \n        // Foot\n        translate([0, -5, -12])\n        color(color_blue)\n        scale([1.2, 1.5, 0.5])\n        sphere(d=10);\n    }\n}\n\n// Tail with characteristic curl\nmodule snubbull_tail() {\n    translate([15, 8, 25])\n    rotate([0, 0, 45])\n    color(color_pink)\n    union() {\n        // Tail base\n        scale([0.8, 0.8, 1.5])\n        sphere(d=8);\n        \n        // Curl segments\n        for(i = [0:3]) {\n            rotate([0, 0, i * 30])\n            translate([i * 3, i * 2, -i * 2])\n            scale([0.7, 0.7, 0.7])\n            sphere(d=8);\n        }\n    }\n}\n\n// Collar decoration\nmodule snubbull_collar() {\n    translate([0, 0, 38])\n    rotate([90, 0, 0])\n    color(color_blue)\n    difference() {\n        // Collar ring\n        cylinder(h=3, d1=28, d2=30);\n        \n        // Front opening\n        translate([0, 15, -1])\n        cube([15, 30, 5], center=true);\n    }\n}\n\n// Assemble the complete Snubbull\nunion() {\n    snubbull_body();\n    snubbull_head();\n    snubbull_ears();\n    snubbull_arms();\n    snubbull_legs();\n    snubbull_tail();\n    snubbull_collar();\n}",
    "renders": true
  },
  {
    "pokemon": "granbull",
    "openscad_code": "// Granbull - Realistic Style, Medium Complexity\n// Scale: ~80mm height\n\n$fn = 32;\n\nmodule granbull() {\n    color(\"#C8B4D4\") // Main body color\n    union() {\n        // Main body\n        translate([0, 0, 15]) \n        scale([1.2, 1, 1.5]) \n        sphere(15);\n\n        // Head\n        translate([0, 0, 40]) \n        scale([1.3, 1.2, 1.2]) \n        sphere(12);\n\n        // Muzzle\n        translate([0, 12, 38])\n        rotate([20, 0, 0])\n        scale([1, 0.8, 0.6])\n        cylinder(h=15, r1=8, r2=6);\n\n        // Jaw\n        translate([0, 15, 30])\n        rotate([30, 0, 0])\n        scale([1, 0.6, 0.4])\n        cylinder(h=12, r1=7, r2=5);\n    }\n\n    // Ears\n    for(side = [-1, 1]) {\n        translate([side * 12, 0, 48])\n        rotate([0, side * -15, 0])\n        scale([0.4, 0.8, 1])\n        color(\"#C8B4D4\")\n        cylinder(h=20, r1=6, r2=3);\n        \n        // Inner ear\n        translate([side * 12, 0, 48])\n        rotate([0, side * -15, 0])\n        scale([0.3, 0.6, 0.8])\n        color(\"#E8D4E8\")\n        cylinder(h=18, r1=4, r2=2);\n    }\n\n    // Arms\n    for(side = [-1, 1]) {\n        translate([side * 15, -5, 25])\n        rotate([0, 0, side * -20])\n        color(\"#C8B4D4\")\n        union() {\n            scale([0.6, 0.6, 1])\n            cylinder(h=12, r=5);\n            \n            translate([0, 0, -8])\n            scale([0.8, 0.8, 0.6])\n            sphere(5);\n        }\n    }\n\n    // Legs\n    for(side = [-1, 1]) {\n        translate([side * 10, -5, 5])\n        color(\"#C8B4D4\")\n        union() {\n            cylinder(h=15, r=6);\n            translate([0, 0, -7])\n            scale([1.2, 1, 0.8])\n            sphere(6);\n        }\n    }\n\n    // Collar\n    translate([0, 0, 30])\n    color(\"#8B4D8B\")\n    difference() {\n        cylinder(h=3, r=20);\n        translate([0, 0, -1])\n        cylinder(h=5, r=17);\n    }\n\n    // Collar spikes\n    for(i = [0:5]) {\n        rotate([0, 0, i * 60])\n        translate([19, 0, 31.5])\n        rotate([90, 0, 0])\n        color(\"#8B4D8B\")\n        cylinder(h=4, r1=2, r2=0);\n    }\n\n    // Tail\n    translate([0, -18, 15])\n    rotate([0, 0, 0])\n    color(\"#C8B4D4\")\n    union() {\n        scale([0.8, 0.8, 1])\n        cylinder(h=20, r=5);\n        \n        translate([0, -15, 10])\n        scale([0.6, 0.6, 0.6])\n        sphere(6);\n    }\n\n    // Eyes\n    for(side = [-1, 1]) {\n        translate([side * 5, 15, 42])\n        color(\"#000000\")\n        scale([1, 1.5, 0.5])\n        sphere(2.5);\n        \n        // Eye shine\n        translate([side * 4.5, 15.5, 42.5])\n        color(\"#FFFFFF\")\n        sphere(0.8);\n    }\n\n    // Nose\n    translate([0, 18, 37])\n    color(\"#8B4D8B\")\n    sphere(3);\n\n    // Mouth line\n    translate([0, 18, 34])\n    rotate([10, 0, 0])\n    color(\"#4A2C4A\")\n    difference() {\n        cube([12, 2, 1]);\n        translate([0, -1, -0.5])\n        cube([10, 1, 2]);\n    }\n\n    // Teeth\n    for(side = [-1, 1]) {\n        translate([side * 3, 20, 33])\n        rotate([90, 0, 0])\n        color(\"#FFFFFF\")\n        cylinder(h=3, r1=1.5, r2=0);\n    }\n\n    // Belly marking\n    translate([0, 0, 25])\n    color(\"#E8D4E8\")\n    scale([1, 0.8, 0.8])\n    sphere(10);\n}\n\ngranbull();",
    "renders": true
  },
  {
    "pokemon": "qwilfish",
    "openscad_code": "// Qwilfish Pokemon - Realistic Style - Medium Complexity\n// Based on the Water/Poison type Pokemon\n\n$fn = 50;\n\n// Main colors\ncolor_body = [0, 0.2, 0.4];\ncolor_spikes = [0.7, 0.8, 0.9];\ncolor_face = [0.9, 0.9, 0.8];\ncolor_eyes = [0.9, 0.9, 0.1];\n\n// Overall scale\nscale_factor = 0.5;\n\nmodule qwilfish() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        // Main body - sphere with slight flattening\n        color(color_body) {\n            translate([0, 0, 0]) {\n                scale([1.2, 1, 0.8]) {\n                    sphere(r = 50);\n                }\n            }\n            \n            // Lower body extension\n            translate([0, 0, -30]) {\n                cylinder(h = 40, r1 = 45, r2 = 40);\n            }\n        }\n        \n        // Spikes generation\n        color(color_spikes) {\n            // Top spikes\n            for(i = [0:4]) {\n                rotate([0, 0, i * 72]) {\n                    translate([0, 55, 20]) {\n                        rotate([30, 0, 0]) {\n                            cylinder(h = 25, r1 = 8, r2 = 3);\n                        }\n                    }\n                }\n            }\n            \n            // Side spikes\n            for(i = [0:5]) {\n                rotate([0, 0, i * 60]) {\n                    translate([45, 35, 0]) {\n                        rotate([0, 30, 0]) {\n                            cylinder(h = 20, r1 = 6, r2 = 2);\n                        }\n                    }\n                }\n            }\n            \n            // Back spikes\n            for(i = [0:3]) {\n                rotate([0, 0, i * 120 + 60]) {\n                    translate([30, -45, -10]) {\n                        rotate([0, 20, 0]) {\n                            cylinder(h = 18, r1 = 7, r2 = 2);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Face area\n        color(color_face) {\n            translate([-45, 0, 10]) {\n                sphere(r = 35);\n            }\n        }\n        \n        // Eyes\n        color(color_eyes) {\n            // Left eye\n            translate([-55, 15, 20]) {\n                sphere(r = 8);\n            }\n            \n            // Right eye\n            translate([-55, -15, 20]) {\n                sphere(r = 8);\n            }\n            \n            // Pupils\n            color([0, 0, 0]) {\n                translate([-60, 15, 20]) {\n                    sphere(r = 4);\n                }\n                translate([-60, -15, 20]) {\n                    sphere(r = 4);\n                }\n            }\n        }\n        \n        // Mouth\n        color([0.8, 0.2, 0.2]) {\n            translate([-55, 0, 5]) {\n                rotate([0, 0, 90]) {\n                    cylinder(h = 1, r1 = 12, r2 = 8);\n                }\n            }\n        }\n        \n        // Puffy cheeks\n        color(color_body) {\n            translate([-45, 25, 5]) {\n                sphere(r = 15);\n            }\n            translate([-45, -25, 5]) {\n                sphere(r = 15);\n            }\n        }\n        \n        // Tail fin\n        color(color_body) {\n            translate([0, 0, -45]) {\n                rotate([0, 30, 0]) {\n                    difference() {\n                        cylinder(h = 30, r1 = 25, r2 = 15);\n                        translate([0, 0, -5]) {\n                            cylinder(h = 40, r1 = 20, r2 = 10);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Small dorsal fin\n        color(color_body) {\n            translate([0, 0, 35]) {\n                rotate([0, 0, 0]) {\n                    difference() {\n                        cylinder(h = 15, r1 = 15, r2 = 8);\n                        translate([0, 0, -5]) {\n                            cylinder(h = 20, r1 = 10, r2 = 5);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Generate the model\nqwilfish();",
    "renders": true
  },
  {
    "pokemon": "scizor",
    "openscad_code": "// Scizor Pokemon - Realistic Style, Medium Complexity\n// 3D printable model using basic OpenSCAD primitives\n\n// Global scaling factor for easy size adjustment\nscale_factor = 0.5;\n\n// Colors\nred = [0.8, 0.1, 0.1];\ngray = [0.4, 0.4, 0.4];\nblack = [0.1, 0.1, 0.1];\nyellow = [0.9, 0.7, 0.1];\n\n// Main body module\nmodule scizor_body() {\n    color(red)\n    union() {\n        // Main torso\n        translate([0, 0, 10 * scale_factor])\n        scale([1.2, 1, 1.5]) sphere(10 * scale_factor);\n        \n        // Chest plate\n        translate([0, 0, 5 * scale_factor])\n        scale([1.3, 0.8, 0.5]) cube(20 * scale_factor, center=true);\n        \n        // Abdomen\n        translate([0, 0, -5 * scale_factor])\n        scale([1, 0.9, 1.2]) sphere(8 * scale_factor);\n    }\n}\n\n// Head module\nmodule scizor_head() {\n    color(red)\n    union() {\n        // Main head\n        translate([0, 15 * scale_factor, 25 * scale_factor])\n        rotate([0, 0, 0])\n        scale([0.8, 1, 1.1]) sphere(12 * scale_factor);\n        \n        // Snout\n        translate([0, 25 * scale_factor, 22 * scale_factor])\n        rotate([15, 0, 0])\n        scale([0.6, 1.2, 0.6]) sphere(8 * scale_factor);\n        \n        // Eyes\n        color(black)\n        translate([-7 * scale_factor, 20 * scale_factor, 28 * scale_factor])\n        sphere(3 * scale_factor);\n        \n        color(black)\n        translate([7 * scale_factor, 20 * scale_factor, 28 * scale_factor])\n        sphere(3 * scale_factor);\n        \n        // Eye ridges\n        color(gray)\n        translate([-7 * scale_factor, 20 * scale_factor, 32 * scale_factor])\n        rotate([45, 0, 0])\n        scale([0.5, 0.5, 0.2]) cube([6 * scale_factor, 6 * scale_factor, 3 * scale_factor]);\n        \n        color(gray)\n        translate([7 * scale_factor, 20 * scale_factor, 32 * scale_factor])\n        rotate([45, 0, 0])\n        scale([0.5, 0.5, 0.2]) cube([6 * scale_factor, 6 * scale_factor, 3 * scale_factor]);\n    }\n    \n    // Pincers\n    module pincer(side) {\n        translate([side * 10 * scale_factor, 30 * scale_factor, 25 * scale_factor])\n        rotate([0, 0, side * 30])\n        color(gray)\n        union() {\n            // Base\n            translate([0, 0, 0])\n            scale([1, 2, 0.3]) sphere(8 * scale_factor);\n            \n            // Upper pincer\n            translate([0, 8 * scale_factor, 5 * scale_factor])\n            rotate([30, 0, 0])\n            scale([0.5, 1.5, 0.2]) cube([10 * scale_factor, 15 * scale_factor, 5 * scale_factor]);\n            \n            // Lower pincer\n            translate([0, 8 * scale_factor, -5 * scale_factor])\n            rotate([-30, 0, 0])\n            scale([0.5, 1.5, 0.2]) cube([10 * scale_factor, 15 * scale_factor, 5 * scale_factor]);\n            \n            // Teeth details\n            for(i = [0:2]) {\n                translate([0, (12 + i * 3) * scale_factor, (2.5 - i * 1.5) * scale_factor])\n                scale([0.3, 0.3, 0.3]) sphere(3 * scale_factor);\n            }\n        }\n    }\n    \n    pincer(1);\n    pincer(-1);\n}\n\n// Wings module\nmodule scizor_wings() {\n    color(gray)\n    union() {\n        // Left wing\n        translate([-15 * scale_factor, 0, 20 * scale_factor])\n        rotate([0, 0, -30])\n        scale([2, 0.1, 1.5])\n        difference() {\n            cube([15 * scale_factor, 5 * scale_factor, 20 * scale_factor]);\n            // Wing holes\n            for(i = [0:2]) {\n                translate([i * 5 * scale_factor, 0, 10 * scale_factor])\n                rotate([0, 0, 0])\n                cylinder(h=6 * scale_factor, r=2 * scale_factor);\n            }\n        }\n        \n        // Right wing\n        translate([15 * scale_factor, 0, 20 * scale_factor])\n        rotate([0, 0, 30])\n        scale([2, 0.1, 1.5])\n        difference() {\n            cube([15 * scale_factor, 5 * scale_factor, 20 * scale_factor]);\n            // Wing holes\n            for(i = [0:2]) {\n                translate([i * 5 * scale_factor, 0, 10 * scale_factor])\n                rotate([0, 0, 0])\n                cylinder(h=6 * scale_factor, r=2 * scale_factor);\n            }\n        }\n    }\n}\n\n// Arms module\nmodule scizor_arms() {\n    color(red)\n    union() {\n        // Left arm\n        translate([-20 * scale_factor, 5 * scale_factor, 15 * scale_factor])\n        rotate([0, 0, -30])\n        scale([0.5, 0.5, 2]) sphere(8 * scale_factor);\n        \n        // Left claw\n        color(gray)\n        translate([-25 * scale_factor, 5 * scale_factor, 0 * scale_factor])\n        rotate([0, 0, -45])\n        scale([0.3, 0.3, 1]) sphere(12 * scale_factor);\n        \n        // Right arm\n        translate([20 * scale_factor, 5 * scale_factor, 15 * scale_factor])\n        rotate([0, 0, 30])\n        scale([0.5, 0.5, 2]) sphere(8 * scale_factor);\n        \n        // Right claw\n        color(gray)\n        translate([25 * scale_factor, 5 * scale_factor, 0 * scale_factor])\n        rotate([0, 0, 45])\n        scale([0.3, 0.3, 1]) sphere(12 * scale_factor);\n    }\n}\n\n// Legs module\nmodule scizor_legs() {\n    color(red)\n    union() {\n        for(side = [-1, 1]) {\n            // Upper leg\n            translate([side * 8 * scale_factor, 0, -5 * scale_factor])\n            rotate([0, side * 15, 0])\n            scale([0.4, 0.4, 1.2]) sphere(8 * scale_factor);\n            \n            // Lower leg\n            translate([side * 12 * scale_factor, 0, -18 * scale_factor])\n            rotate([0, side * 20, 0])\n            scale([0.3, 0.3, 1]) sphere(8 * scale_factor);\n            \n            // Foot\n            color(gray)\n            translate([side * 15 * scale_factor, 2 * scale_factor, -28 * scale_factor])\n            scale([0.8, 1.5, 0.3]) cube([10 * scale_factor, 8 * scale_factor, 5 * scale_factor]);\n        }\n    }\n}\n\n// Tail module\nmodule scizor_tail() {\n    color(red)\n    union() {\n        // Tail segments\n        for(i = [0:3]) {\n            translate([0, -8 - i * 6 * scale_factor, 10 - i * 3 * scale_factor])\n            rotate([0, 0, 0])\n            scale([1 - i * 0.15, 1 - i * 0.15, 0.8 - i * 0.1])\n            sphere(6 * scale_factor);\n        }\n        \n        // Tail claws\n        color(gray)\n        translate([0, -25 * scale_factor, 5 * scale_factor])\n        rotate([30, 0, 0])\n        scale([0.4, 0.4, 1]) sphere(8 * scale_factor);\n    }\n}\n\n// Assembly\nunion() {\n    scizor_body();\n    scizor_head();\n    scizor_wings();\n    scizor_arms();\n    scizor_legs();\n    scizor_tail();\n}",
    "renders": true
  },
  {
    "pokemon": "shuckle",
    "openscad_code": "// Realistic Shuckle OpenSCAD Model\n// Medium complexity, 3D printable\n\n// Main parameters\n$fn = 32;\nscale_factor = 0.5;\n\nmodule body_shell() {\n    // Main shell body - red spherical-ish shape\n    color(\"red\") {\n        difference() {\n            // Main body\n            scale([1.2, 1.0, 0.8]) sphere(d=80);\n            \n            // Hollow center for 3D printing\n            scale([0.9, 0.7, 0.6]) sphere(d=70);\n        }\n    }\n}\n\nmodule shell_pattern() {\n    // Hexagonal pattern on shell\n    color(\"darkred\") {\n        for (a = [0:60:359]) {\n            rotate([0, 0, a]) {\n                translate([0, 35, 5]) cylinder(h=3, d=8, $fn=6);\n                translate([0, 25, 5]) cylinder(h=3, d=8, $fn=6);\n                translate([0, 15, 5]) cylinder(h=3, d=8, $fn=6);\n            }\n        }\n    }\n}\n\nmodule head() {\n    // Shuckle's yellow head\n    color(\"yellow\") {\n        translate([0, -25, 15]) {\n            scale([0.7, 0.6, 0.7]) sphere(d=40);\n            \n            // Eyes\n            color(\"black\") {\n                translate([-10, -15, 5]) sphere(d=6);\n                translate([10, -15, 5]) sphere(d=6);\n            }\n            \n            // Eye highlights\n            color(\"white\") {\n                translate([-8, -14, 7]) sphere(d=2);\n                translate([12, -14, 7]) sphere(d=2);\n            }\n            \n            // Mouth\n            color(\"black\") {\n                translate([0, -20, 0]) scale([1, 0.3, 0.5]) sphere(d=8);\n            }\n        }\n    }\n}\n\nmodule limbs() {\n    // Four stubby limbs\n    color(\"yellow\") {\n        // Front limbs\n        translate([-20, -10, -15]) rotate([0, 30, 0]) cylinder(h=15, d1=10, d2=8);\n        translate([20, -10, -15]) rotate([0, 30, 0]) cylinder(h=15, d1=10, d2=8);\n        \n        // Back limbs\n        translate([-20, 20, -15]) rotate([0, -30, 0]) cylinder(h=15, d1=10, d2=8);\n        translate([20, 20, -15]) rotate([0, -30, 0]) cylinder(h=15, d1=10, d2=8);\n    }\n}\n\nmodule holes() {\n    // Shell opening holes\n    difference() {\n        body_shell();\n        \n        // Head hole\n        translate([0, -30, 10]) scale([1, 1.2, 1]) cylinder(h=30, d=25);\n        \n        // Limb holes\n        translate([-25, -10, -20]) rotate([0, 45, 0]) cylinder(h=25, d=12);\n        translate([25, -10, -20]) rotate([0, 45, 0]) cylinder(h=25, d=12);\n        translate([-25, 20, -20]) rotate([0, -45, 0]) cylinder(h=25, d=12);\n        translate([25, 20, -20]) rotate([0, -45, 0]) cylinder(h=25, d=12);\n    }\n}\n\nmodule base_support() {\n    // Flat base for stability\n    color(\"red\") {\n        translate([0, 0, -40]) {\n            cylinder(h=2, d=100);\n        }\n    }\n}\n\n// Assemble the model\nscale([scale_factor, scale_factor, scale_factor]) {\n    union() {\n        base_support();\n        holes();\n        shell_pattern();\n        head();\n        limbs();\n    }\n}",
    "renders": true
  },
  {
    "pokemon": "heracross",
    "openscad_code": "// Heracross - Realistic Style, Medium Complexity\n// Scale: ~80mm tall when printed\n\n$fn = 32;\nbody_color = [0.2, 0.1, 0.05];  // Dark blue-gray\nhorn_color = [0.9, 0.9, 0.9];   // Light gray\neye_color = [0.1, 0.1, 0.1];    // Black\naccent_color = [0.6, 0.3, 0.1]; // Brown accents\n\nmodule heracross() {\n    // Main body\n    color(body_color)\n    union() {\n        // Torso\n        translate([0, 0, 20])\n        scale([1.2, 1, 1.5])\n        sphere(15);\n        \n        // Abdomen\n        translate([0, 0, 5])\n        scale([0.8, 0.7, 1])\n        sphere(12);\n        \n        // Head\n        translate([0, 0, 42])\n        scale([1.1, 0.9, 1.2])\n        sphere(12);\n        \n        // Horn base\n        translate([0, 0, 55])\n        cylinder(h=15, r1=8, r2=3);\n    }\n    \n    // Large horn\n    color(horn_color)\n    translate([0, 0, 70])\n    rotate([0, 0, 0])\n    cylinder(h=35, r1=3, r2=0.5);\n    \n    // Horn prongs\n    for(i = [-30, 30]) {\n        rotate([0, 0, i])\n        translate([15, 0, 65])\n        rotate([0, -20, 0])\n        cylinder(h=20, r1=2, r2=0.5);\n    }\n    \n    // Eyes\n    color(eye_color)\n    for(side = [-1, 1]) {\n        translate([side * 8, 12, 42])\n        sphere(2.5);\n        \n        // Eye highlights\n        color([1, 1, 1])\n        translate([side * 7.5, 13, 43.5])\n        sphere(1);\n    }\n    \n    // Arms with claws\n    for(side = [-1, 1]) {\n        color(body_color)\n        // Upper arm\n        translate([side * 18, 8, 35])\n        rotate([0, side * -20, 0])\n        cylinder(h=15, r1=4, r2=3);\n        \n        // Forearm\n        translate([side * 30, 12, 30])\n        rotate([0, side * 30, 0])\n        cylinder(h=20, r1=3, r2=2);\n        \n        // Claw\n        color(horn_color)\n        translate([side * 40, 18, 28])\n        rotate([0, 90, side * 30])\n        cylinder(h=12, r1=2, r2=0.5);\n    }\n    \n    // Legs\n    for(side = [-1, 1]) {\n        color(body_color)\n        // Thigh\n        translate([side * 10, -8, 15])\n        rotate([0, side * 20, 0])\n        cylinder(h=12, r1=4, r2=3);\n        \n        // Shin\n        translate([side * 15, -12, 8])\n        rotate([0, side * 40, 0])\n        cylinder(h=15, r1=3, r2=2);\n        \n        // Foot\n        translate([side * 20, -15, 5])\n        scale([1.5, 1, 0.5])\n        sphere(4);\n    }\n    \n    // Wings\n    color([0.3, 0.2, 0.1])\n    for(side = [-1, 1]) {\n        translate([side * 15, -5, 30])\n        rotate([0, side * 45, 0])\n        scale([0.1, 1.2, 0.8])\n        cube([5, 20, 15]);\n    }\n    \n    // Wing covers\n    color(body_color)\n    for(side = [-1, 1]) {\n        translate([side * 12, -2, 28])\n        rotate([0, side * 30, 0])\n        scale([0.1, 1, 0.7])\n        cube([8, 18, 12]);\n    }\n}\n\n// Add base for printing\ntranslate([0, 0, -2])\ncolor([0.4, 0.4, 0.4])\ncylinder(h=2, r=30);\n\n// Position the model\ntranslate([0, 0, 0])\nheracross();",
    "renders": true
  },
  {
    "pokemon": "sneasel",
    "openscad_code": "// Sneasel Pokemon - Realistic Medium Complexity\n// 3D printable model with proper wall thickness and no overhangs\n\n// Main color scheme\n$fn = 32;\nbody_color = [0.1, 0.1, 0.1]; // Dark gray/black\naccent_color = [0.9, 0.9, 0.9]; // White/light gray\neye_color = [0.8, 0.2, 0.2]; // Red\n\nmodule sneasel() {\n    // Scale factor for 3D printing (total height ~70mm)\n    scale(0.7) {\n        union() {\n            // Main body\n            body();\n            \n            // Head\n            head();\n            \n            // Ears\n            left_ear();\n            right_ear();\n            \n            // Arms\n            left_arm();\n            right_arm();\n            \n            // Legs\n            left_leg();\n            right_leg();\n            \n            // Tail\n            tail();\n            \n            // Feathers on head\n            head_feathers();\n        }\n    }\n}\n\nmodule body() {\n    color(body_color) {\n        // Torso\n        translate([0, 0, 10]) {\n            cylinder(h = 25, r1 = 12, r2 = 15);\n        }\n        \n        // Chest\n        translate([0, 7, 15]) {\n            sphere(r = 10);\n        }\n    }\n}\n\nmodule head() {\n    color(body_color) {\n        // Main head shape\n        translate([0, 15, 30]) {\n            scale([1.2, 1, 1]) sphere(r = 12);\n        }\n        \n        // Snout\n        translate([0, 26, 30]) {\n            scale([0.6, 1.5, 0.8]) sphere(r = 8);\n        }\n    }\n    \n    // White face marking\n    color(accent_color) {\n        translate([0, 20, 28]) {\n            difference() {\n                sphere(r = 11);\n                translate([0, 0, -5]) cube(30, center = true);\n            }\n        }\n    }\n}\n\nmodule left_ear() {\n    color(body_color) {\n        translate([-8, 10, 42]) {\n            rotate([0, -20, -30]) {\n                cylinder(h = 18, r1 = 4, r2 = 2);\n            }\n        }\n        \n        // Ear tip\n        translate([-12, 5, 52]) {\n            sphere(r = 3);\n        }\n    }\n}\n\nmodule right_ear() {\n    mirror([1, 0, 0]) left_ear();\n}\n\nmodule left_arm() {\n    color(body_color) {\n        // Upper arm\n        translate([-15, 5, 25]) {\n            rotate([0, 0, 45]) {\n                cylinder(h = 15, r1 = 4, r2 = 3);\n            }\n        }\n        \n        // Lower arm\n        translate([-22, 10, 15]) {\n            rotate([0, 30, 60]) {\n                cylinder(h = 12, r1 = 3, r2 = 2);\n            }\n        }\n        \n        // Claw\n        translate([-28, 15, 12]) {\n            rotate([0, 0, 90]) {\n                for(i = [0:2]) {\n                    rotate([0, 0, i * 45 - 45]) {\n                        translate([0, 0, 0]) {\n                            scale([0.5, 0.5, 3]) sphere(r = 2);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule right_arm() {\n    mirror([1, 0, 0]) left_arm();\n}\n\nmodule left_leg() {\n    color(body_color) {\n        // Thigh\n        translate([-8, -5, 10]) {\n            rotate([0, 0, -15]) {\n                cylinder(h = 12, r1 = 4, r2 = 3);\n            }\n        }\n        \n        // Lower leg\n        translate([-10, -10, 0]) {\n            rotate([0, 0, 15]) {\n                cylinder(h = 10, r1 = 3, r2 = 2);\n            }\n        }\n        \n        // Foot\n        translate([-10, -12, -5]) {\n            scale([1.5, 2, 0.8]) sphere(r = 3);\n        }\n        \n        // Toe claws\n        for(i = [0:2]) {\n            translate([-12 + i * 2, -14, -6]) {\n                rotate([0, 30, 0]) {\n                    cylinder(h = 3, r1 = 0.5, r2 = 0);\n                }\n            }\n        }\n    }\n}\n\nmodule right_leg() {\n    mirror([1, 0, 0]) left_leg();\n}\n\nmodule tail() {\n    color(body_color) {\n        translate([0, -20, 15]) {\n            rotate([0, 0, 30]) {\n                cylinder(h = 20, r1 = 5, r2 = 2);\n            }\n        }\n        \n        // Tail tip\n        translate([0, -35, 12]) {\n            sphere(r = 3);\n        }\n    }\n}\n\nmodule head_feathers() {\n    color(accent_color) {\n        // Main feather\n        translate([0, 12, 45]) {\n            rotate([0, -30, 0]) {\n                scale([0.3, 2, 1]) sphere(r = 4);\n            }\n        }\n        \n        // Side feathers\n        translate([-5, 15, 43]) {\n            rotate([0, -20, -20]) {\n                scale([0.3, 1.5, 0.8]) sphere(r = 3);\n            }\n        }\n        \n        translate([5, 15, 43]) {\n            rotate([0, -20, 20]) {\n                scale([0.3, 1.5, 0.8]) sphere(r = 3);\n            }\n        }\n    }\n}\n\n// Eyes\nmodule eyes() {\n    color(eye_color) {\n        // Left eye\n        translate([-5, 25, 32]) {\n            sphere(r = 2.5);\n        }\n        \n        // Right eye\n        translate([5, 25, 32]) {\n            sphere(r = 2.5);\n        }\n    }\n    \n    // Eye highlights\n    color([1, 1, 1]) {\n        translate([-4.5, 26, 33.5]) {\n            sphere(r = 0.8);\n        }\n        \n        translate([5.5, 26, 33.5]) {\n            sphere(r = 0.8);\n        }\n    }\n}\n\n// Assembly\nsneasel();\neyes();",
    "renders": true
  },
  {
    "pokemon": "teddiursa",
    "openscad_code": "// Teddiursa Pokemon - Realistic Medium Complexity\n// 3D printable, no overhangs, ~70mm height\n\n$fn = 32;\n\nmodule teddiursa() {\n    // Main body - light brown sphere\n    color(\"#D4A574\") {\n        translate([0, 0, 35]) {\n            scale([1.2, 1, 1]) sphere(25);\n        }\n    }\n    \n    // Head - slightly darker brown\n    color(\"#C49660\") {\n        translate([0, 0, 65]) {\n            scale([1.1, 1, 1.1]) sphere(20);\n        }\n    }\n    \n    // Snout\n    color(\"#C49660\") {\n        translate([20, 0, 60]) {\n            scale([1.5, 0.8, 0.8]) sphere(12);\n        }\n    }\n    \n    // Nose\n    color(\"#2A1A0A\") {\n        translate([28, 0, 62]) {\n            sphere(3);\n        }\n    }\n    \n    // Eyes\n    color(\"#2A1A0A\") {\n        // Left eye\n        translate([15, -8, 70]) {\n            scale([1, 1, 0.5]) sphere(4);\n        }\n        // Right eye\n        translate([15, 8, 70]) {\n            scale([1, 1, 0.5]) sphere(4);\n        }\n    }\n    \n    // Eye highlights\n    color(\"#FFFFFF\") {\n        translate([16, -7, 71]) {\n            sphere(1.5);\n        }\n        translate([16, 7, 71]) {\n            sphere(1.5);\n        }\n    }\n    \n    // Ears\n    module ear(side) {\n        color(\"#D4A574\") {\n            translate([5, side * 15, 80]) {\n                rotate([0, 0, side * 15]) {\n                    cylinder(h = 15, r1 = 8, r2 = 4);\n                }\n            }\n            // Inner ear\n            color(\"#E8C8A8\") {\n                translate([5, side * 15, 80]) {\n                    rotate([0, 0, side * 15]) {\n                        cylinder(h = 14, r1 = 5, r2 = 2);\n                    }\n                }\n            }\n        }\n    }\n    \n    ear(1);\n    ear(-1);\n    \n    // Arms\n    module arm(side) {\n        color(\"#D4A574\") {\n            translate([15, side * 25, 45]) {\n                rotate([0, 0, side * 20]) {\n                    cylinder(h = 20, r = 7);\n                }\n            }\n            // Paw\n            translate([10, side * 32, 40]) {\n                sphere(8);\n            }\n        }\n    }\n    \n    arm(1);\n    arm(-1);\n    \n    // Legs\n    module leg(side) {\n        color(\"#D4A574\") {\n            translate([side * 10, 0, 15]) {\n                cylinder(h = 20, r = 8);\n            }\n            // Foot\n            translate([side * 10, 0, 5]) {\n                scale([1.5, 2, 0.8]) sphere(8);\n            }\n        }\n    }\n    \n    leg(1);\n    leg(-1);\n    \n    // Crescent moon marking\n    color(\"#F5E6D3\") {\n        difference() {\n            translate([0, 0, 30]) {\n                scale([1.3, 1.1, 0.5]) sphere(20);\n            }\n            translate([0, 0, 31]) {\n                scale([1.1, 0.9, 0.5]) sphere(20);\n            }\n        }\n    }\n    \n    // Tail\n    color(\"#D4A574\") {\n        translate([-25, 0, 40]) {\n            rotate([0, 10, 0]) {\n                cylinder(h = 15, r1 = 8, r2 = 5);\n            }\n        }\n    }\n    \n    // Tail crescent\n    color(\"#F5E6D3\") {\n        difference() {\n            translate([-35, 0, 40]) {\n                scale([0.8, 1, 0.3]) sphere(8);\n            }\n            translate([-33, 0, 40]) {\n                scale([0.6, 0.8, 0.3]) sphere(8);\n            }\n        }\n    }\n}\n\n// Render the model\nteddiursa();",
    "renders": true
  },
  {
    "pokemon": "ursaring",
    "openscad_code": "// Ursaring - Realistic Style, Medium Complexity\n// 3D printable, ~70mm tall\n\n$fn = 32;\n\nmodule ursaring() {\n    color(\"chocolate\") {\n        // Main body\n        union() {\n            // Torso\n            translate([0, 0, 20])\n                scale([1.2, 0.8, 1.5])\n                sphere(d=40);\n            \n            // Legs\n            for(side = [-1, 1]) {\n                translate([side * 15, -10, 0])\n                    leg();\n            }\n            \n            // Arms\n            for(side = [-1, 1]) {\n                translate([side * 25, 0, 30])\n                    rotate([0, 0, side * 30])\n                    arm();\n            }\n            \n            // Head\n            translate([0, 10, 45])\n                head();\n        }\n    }\n}\n\nmodule leg() {\n    // Upper leg\n    color(\"saddlebrown\")\n    cylinder(h=25, d1=15, d2=12);\n    \n    // Lower leg\n    translate([0, 0, 12])\n        rotate([15, 0, 0])\n        cylinder(h=20, d1=12, d2=10);\n    \n    // Foot\n    translate([0, -5, 8])\n        scale([1.5, 2, 0.8])\n        sphere(d=10);\n}\n\nmodule arm() {\n    // Upper arm\n    color(\"chocolate\")\n    cylinder(h=20, d1=12, d2=10);\n    \n    // Forearm\n    translate([0, 0, 10])\n        rotate([45, 0, 0])\n        cylinder(h=18, d1=10, d2=8);\n    \n    // Paw\n    translate([0, -8, 7])\n        scale([1.3, 1.5, 0.7])\n        sphere(d=10);\n}\n\nmodule head() {\n    color(\"chocolate\") {\n        // Main head sphere\n        sphere(d=35);\n        \n        // Muzzle\n        translate([0, 15, 0])\n            scale([0.8, 1.2, 0.7])\n            sphere(d=20);\n        \n        // Ears\n        for(side = [-1, 1]) {\n            translate([side * 12, 0, 15])\n                rotate([0, side * 20, 0])\n                scale([0.8, 0.3, 2])\n                sphere(d=10);\n        }\n        \n        // Crescent moon marking\n        color(\"beige\")\n        translate([0, 5, -15])\n            rotate([90, 0, 0])\n            difference() {\n                cylinder(h=2, r=12);\n                translate([5, 0, 0])\n                    cylinder(h=3, r=8);\n            }\n    }\n    \n    // Eyes\n    color(\"black\")\n    for(side = [-1, 1]) {\n        translate([side * 8, 10, 5])\n            sphere(d=3);\n    }\n    \n    // Nose\n    color(\"black\")\n    translate([0, 20, 2])\n        sphere(d=4);\n    \n    // Mouth\n    color(\"black\")\n    translate([0, 18, -5])\n        rotate([0, 0, 180])\n        cylinder(h=0.5, r1=5, r2=3);\n}\n\nursaring();",
    "renders": true
  },
  {
    "pokemon": "slugma",
    "openscad_code": "// Slugma Pokemon - Realistic Style\n// Medium complexity 3D printable model\n\n// Overall scale factor\nscale_factor = 0.4;\n\nmodule slugma_body() {\n    color([0.8, 0.2, 0.1]) {\n        // Main body - irregular lava blob\n        union() {\n            // Central mass\n            sphere(15 * scale_factor);\n            \n            // Left extension\n            translate([-10 * scale_factor, 5 * scale_factor, -5 * scale_factor])\n                scale([1.2, 0.8, 0.6])\n                    sphere(12 * scale_factor);\n            \n            // Right extension\n            translate([10 * scale_factor, 5 * scale_factor, -5 * scale_factor])\n                scale([1.2, 0.8, 0.6])\n                    sphere(12 * scale_factor);\n            \n            // Bottom mass\n            translate([0, -8 * scale_factor, -10 * scale_factor])\n                scale([1.3, 1.1, 0.8])\n                    sphere(10 * scale_factor);\n        }\n    }\n}\n\nmodule slugma_eyes() {\n    // Yellow eyes with black pupils\n    translate([-6 * scale_factor, 8 * scale_factor, 8 * scale_factor])\n        rotate([0, 15, 0])\n        union() {\n            // Eye whites (yellow for slugma)\n            color([0.9, 0.8, 0.1])\n                sphere(3 * scale_factor);\n            \n            // Pupil\n            color([0, 0, 0])\n                translate([0, 0, 2.5 * scale_factor])\n                    scale([1, 1, 0.2])\n                        sphere(1.5 * scale_factor);\n        }\n    \n    translate([6 * scale_factor, 8 * scale_factor, 8 * scale_factor])\n        rotate([0, -15, 0])\n        union() {\n            // Eye whites (yellow for slugma)\n            color([0.9, 0.8, 0.1])\n                sphere(3 * scale_factor);\n            \n            // Pupil\n            color([0, 0, 0])\n                translate([0, 0, 2.5 * scale_factor])\n                    scale([1, 1, 0.2])\n                        sphere(1.5 * scale_factor);\n        }\n}\n\nmodule slugma_mouth() {\n    // Small curved mouth\n    color([0.3, 0, 0])\n        translate([0, 2 * scale_factor, 5 * scale_factor])\n            rotate([0, 0, 180])\n                linear_extrude(height = 0.5 * scale_factor)\n                    difference() {\n                        circle(3 * scale_factor);\n                        translate([0, 1 * scale_factor, 0])\n                            square(6 * scale_factor);\n                    }\n}\n\nmodule lava_bumps() {\n    // Random lava bumps across body\n    color([0.9, 0.3, 0.1])\n    for(i = [1:15]) {\n        translate([\n            (sin(i * 45) * 12) * scale_factor,\n            (cos(i * 45) * 10 + 5) * scale_factor,\n            (sin(i * 30) * 8 - 5) * scale_factor\n        ]) {\n            scale([1 + sin(i) * 0.3, 1 + cos(i) * 0.3, 1 + sin(i * 2) * 0.3])\n                sphere(2 * scale_factor);\n        }\n    }\n}\n\nmodule flame_detail() {\n    // Small flame-like protrusions\n    color([1, 0.4, 0.1])\n    for(i = [0:4]) {\n        rotate([0, 0, i * 72])\n            translate([8 * scale_factor, 0, 5 * scale_factor])\n                scale([0.5, 0.5, 1.5])\n                    cylinder(h = 6 * scale_factor, r1 = 2 * scale_factor, r2 = 0.5 * scale_factor);\n    }\n}\n\nmodule base_support() {\n    // Flat base for 3D printing stability\n    color([0.1, 0.1, 0.1])\n        translate([0, 0, -15 * scale_factor])\n            cylinder(h = 2 * scale_factor, r = 20 * scale_factor);\n}\n\n// Main assembly\nunion() {\n    base_support();\n    translate([0, 0, -13 * scale_factor]) {\n        slugma_body();\n        lava_bumps();\n        flame_detail();\n        slugma_eyes();\n        slugma_mouth();\n    }\n}",
    "renders": true
  },
  {
    "pokemon": "magcargo",
    "openscad_code": "// Magcargo - Realistic Style, Medium Complexity\n// Size: ~60mm long\n\n$fn = 32;\nwall_thickness = 1.5;\n\n// Main body color\ncolor([0.7, 0.3, 0.2]) {\n    // Main shell body\n    translate([0, 0, 10]) {\n        difference() {\n            sphere(15);\n            cube([35, 35, 30], center = true);\n        }\n    }\n    \n    // Front shell extension\n    translate([20, 0, 10]) {\n        difference() {\n            sphere(12);\n            cube([25, 25, 25], center = true);\n        }\n    }\n    \n    // Back shell\n    translate([-15, 0, 15]) {\n        difference() {\n            sphere(10);\n            translate([5, 0, 0]) cube([20, 20, 20], center = true);\n        }\n    }\n}\n\n// Magma body core\ncolor([1, 0.4, 0]) {\n    // Main magma body\n    translate([5, 0, 8]) {\n        sphere(12);\n    }\n    \n    // Head magma\n    translate([25, 0, 12]) {\n        sphere(8);\n    }\n    \n    // Additional magma blobs\n    for(i = [0:3]) {\n        rotate([0, 0, i*90]) {\n            translate([5 + cos(i*45)*5, sin(i*45)*5, 5]) {\n                sphere(4 + i);\n            }\n        }\n    }\n}\n\n// Eyes\nmodule eye() {\n    color([0.9, 0.9, 0.1]) {\n        sphere(2.5);\n    }\n}\n\ntranslate([28, -5, 15]) eye();\ntranslate([28, 5, 15]) eye();\n\n// Shell rock texture\nmodule rock_spike(x, y, z, s) {\n    color([0.5, 0.25, 0.15]) {\n        translate([x, y, z]) {\n            scale([s, s, s*1.5]) {\n                sphere(2);\n            }\n        }\n    }\n}\n\n// Place rock spikes on shell\nfor(i = [0:5]) {\n    angle = i*60;\n    rock_spike(cos(angle)*12, sin(angle)*12, 15, 1 + sin(i*30)*0.5);\n}\n\nrock_spike(-10, 8, 20, 2);\nrock_spike(-12, -6, 18, 1.5);\nrock_spike(8, 10, 22, 1.8);\n\n// Mouth opening\ncolor([0.1, 0.1, 0.1]) {\n    translate([30, 0, 10]) {\n        difference() {\n            sphere(4);\n            translate([2, 0, 0]) cube([8, 6, 4], center = true);\n        }\n    }\n}\n\n// Lava cracks on shell\nmodule lava_crack(x, y, z, rot) {\n    color([1, 0.3, 0]) {\n        translate([x, y, z]) {\n            rotate([0, 0, rot]) {\n                scale([0.2, 8, 0.5]) {\n                    sphere(1);\n                }\n            }\n        }\n    }\n}\n\nlava_crack(5, 0, 15, 45);\nlava_crack(-5, 5, 16, -30);\nlava_crack(10, -8, 14, 0);\nlava_crack(-8, -5, 18, 60);\n\n// Small magma drips\nmodule magma_drip(x, y, z) {\n    color([1, 0.2, 0]) {\n        translate([x, y, z]) {\n            scale([0.8, 0.8, 1.2]) {\n                sphere(2);\n            }\n        }\n    }\n}\n\nmagma_drip(15, 10, 5);\nmagma_drip(-5, 12, 7);\nmagma_drip(8, -10, 6);\nmagma_drip(-12, -8, 8);\n\n// Bottom flat surface for printing\ndifference() {\n    cube([50, 50, 1], center = true);\n    translate([0, 0, -1]) cube([50, 50, 1], center = true);\n}",
    "renders": true
  },
  {
    "pokemon": "swinub",
    "openscad_code": "// Swinub - Ice/Ground type pig Pokemon\n// Overall size approximately 60mm long\n\n// Colors\n$fn=32;\n\n// Main body - brown oval shape\nmodule body() {\n    color(\"saddlebrown\")\n    union() {\n        // Main torso\n        scale([1.2, 0.8, 0.6])\n            sphere(20);\n            \n        // Snout extension\n        translate([22, 0, -2])\n            scale([1.5, 1, 1])\n                sphere(8);\n    }\n}\n\n// Ice tusks\nmodule tusk() {\n    color(\"ivory\")\n    rotate([0, -20, 0])\n        cylinder(h=12, r1=2, r2=0.5);\n}\n\n// Ears - rounded triangles\nmodule ear() {\n    color(\"saddlebrown\")\n    union() {\n        // Main ear shape\n        translate([0, 0, 5])\n            rotate([90, 0, 0])\n                cylinder(h=10, r1=8, r2=0);\n        // Inner ear\n        color(\"lightpink\")\n        translate([0, 0, 6])\n            rotate([90, 0, 0])\n                cylinder(h=8, r1=5, r2=0);\n    }\n}\n\n// Eyes\nmodule eye() {\n    color(\"black\")\n    sphere(2);\n}\n\n// Nostrils\nmodule nostril() {\n    color(\"black\")\n    sphere(1.5);\n}\n\n// Legs\nmodule leg() {\n    color(\"saddlebrown\")\n    union() {\n        // Upper leg\n        cylinder(h=8, r=4);\n        // Foot\n        translate([0, 0, -8])\n            scale([1.5, 2, 0.5])\n                sphere(3);\n    }\n}\n\n// Fur tufts\nmodule fur_tuft() {\n    color(\"saddlebrown\")\n    rotate([0, 90, 0])\n        cylinder(h=5, r1=3, r2=0);\n}\n\n// Main assembly\ntranslate([0, 0, 15]) {\n    // Body\n    body();\n    \n    // Head features\n    translate([18, 0, 8]) {\n        // Tusks\n        translate([2, 5, -2]) tusk();\n        translate([2, -5, -2]) tusk();\n        \n        // Eyes\n        translate([2, 4, 2]) eye();\n        translate([2, -4, 2]) eye();\n        \n        // Nostrils\n        translate([6, 2, 0]) nostril();\n        translate([6, -2, 0]) nostril();\n    }\n    \n    // Ears\n    translate([8, 12, 18]) rotate([0, -10, 20]) ear();\n    translate([8, -12, 18]) rotate([0, -10, -20]) ear();\n    \n    // Legs\n    translate([5, 8, -8]) leg();\n    translate([5, -8, -8]) leg();\n    translate([-10, 8, -8]) leg();\n    translate([-10, -8, -8]) leg();\n    \n    // Back fur tufts\n    for(i=[-20:5:-5]) {\n        translate([i, 12, 5]) fur_tuft();\n        translate([i, -12, 5]) fur_tuft();\n    }\n    \n    // Top fur tufts\n    for(i=[-10:5:15]) {\n        translate([i, 0, 15]) fur_tuft();\n    }\n}",
    "renders": true
  },
  {
    "pokemon": "piloswine",
    "openscad_code": "// Piloswine - Realistic Medium Complexity\n// Overall dimensions: ~70mm long, ~50mm tall, ~45mm wide\n\n$fn = 32;\n\n// Main body color - brown\nmodule piloswine() {\n    color(\"#8B4513\") {\n        // Main body - large oval shape\n        translate([0, 0, 15]) \n            scale([1.2, 0.9, 1]) \n                sphere(r = 20);\n        \n        // Belly - slightly lighter brown\n        color(\"#A0522D\") {\n            translate([0, 12, 10]) \n                scale([1.4, 0.5, 0.8]) \n                    sphere(r = 18);\n        }\n        \n        // Head section\n        translate([-25, 0, 20]) \n            rotate([0, -10, 0]) \n                sphere(r = 16);\n        \n        // Snout\n        color(\"#654321\") {\n            translate([-40, 0, 18]) \n                scale([1.5, 0.8, 0.8]) \n                    sphere(r = 10);\n        }\n        \n        // Legs - four thick legs\n        for(i = [-1, 1]) {\n            // Front legs\n            translate([-15, i * 15, 0]) {\n                rotate([0, 0, i * 5]) {\n                    cylinder(h = 15, r1 = 8, r2 = 6);\n                    translate([0, 0, 15]) \n                        sphere(r = 7);\n                }\n            }\n            \n            // Rear legs\n            translate([15, i * 15, 0]) {\n                rotate([0, 0, -i * 5]) {\n                    cylinder(h = 15, r1 = 9, r2 = 7);\n                    translate([0, 0, 15]) \n                        sphere(r = 8);\n                }\n            }\n        }\n        \n        // Tusks - two large curved tusks\n        color(\"#FFF8DC\") {\n            for(side = [-1, 1]) {\n                translate([-35, side * 8, 15]) {\n                    rotate([0, side * 15, -20]) {\n                        scale([0.3, 0.3, 1]) \n                            cylinder(h = 20, r1 = 6, r2 = 4);\n                    }\n                }\n            }\n        }\n        \n        // Fur tufts - using small spheres\n        color(\"#D2B48C\") {\n            // Back fur\n            for(i = [-20, -10, 0, 10]) {\n                translate([i, 0, 35]) \n                    sphere(r = 6);\n            }\n            \n            // Side fur\n            for(angle = [30:60:330]) {\n                translate([cos(angle) * 20, sin(angle) * 20, 25]) \n                    sphere(r = 4);\n            }\n            \n            // Head fur\n            translate([-30, 0, 30]) \n                sphere(r = 8);\n        }\n        \n        // Eyes\n        color(\"#000000\") {\n            translate([-35, 8, 25]) \n                sphere(r = 2);\n            translate([-35, -8, 25]) \n                sphere(r = 2);\n        }\n        \n        // Nose\n        color(\"#000000\") {\n            translate([-45, 0, 18]) {\n                sphere(r = 1.5);\n                translate([0, 3, 0]) \n                    sphere(r = 1.5);\n                translate([0, -3, 0]) \n                    sphere(r = 1.5);\n            }\n        }\n        \n        // Tail - short and stubby\n        color(\"#8B4513\") {\n            translate([25, 0, 15]) {\n                scale([1.2, 1, 0.8]) \n                    sphere(r = 10);\n                color(\"#D2B48C\") {\n                    translate([5, 0, 5]) \n                        sphere(r = 6);\n                }\n            }\n        }\n    }\n}\n\n// Create the model\npiloswine();",
    "renders": true
  },
  {
    "pokemon": "corsola",
    "openscad_code": "// Corsola Pokemon - Realistic Style, Medium Complexity\n// Approximate size: 80mm height\n\n// Coral color\ncoral = \"#FF8A80\";\npink = \"#FFB6C1\";\n\n// Main body module\nmodule corsola_body() {\n    color(coral) {\n        // Central body - rounded cylinder\n        translate([0, 0, 15]) {\n            scale([1, 0.9, 1.1]) \n                sphere(d=30, $fn=30);\n        }\n        \n        // Bottom base\n        translate([0, 0, 5]) {\n            cylinder(h=10, d1=35, d2=30, $fn=30);\n        }\n    }\n}\n\n// Coral branch module\nmodule coral_branch(h, r, angle, rot_z, tx=0, ty=0) {\n    color(coral) {\n        translate([tx, ty, 25]) {\n            rotate([angle, 0, rot_z]) {\n                // Main branch\n                cylinder(h=h, r1=r, r2=r*0.7, $fn=8);\n                \n                // Branch tip\n                translate([0, 0, h]) {\n                    sphere(d=r*2, $fn=12);\n                    \n                    // Small sub-branches\n                    for(i=[0:120:359]) {\n                        rotate([0, 0, i]) {\n                            translate([r*0.8, 0, 0]) {\n                                rotate([30, 0, 0]) {\n                                    cylinder(h=r*1.5, r1=r*0.3, r2=r*0.2, $fn=6);\n                                    translate([0, 0, r*1.5]) \n                                        sphere(d=r*0.6, $fn=8);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Face details\nmodule face() {\n    // Eyes\n    color(\"black\") {\n        translate([-7, 12, 35]) {\n            sphere(d=4, $fn=12);\n        }\n        translate([7, 12, 35]) {\n            sphere(d=4, $fn=12);\n        }\n        \n        // Pupils\n        color(\"white\") {\n            translate([-8, 13, 37]) {\n                sphere(d=1.5, $fn=8);\n            }\n            translate([6, 13, 37]) {\n                sphere(d=1.5, $fn=8);\n            }\n        }\n    }\n    \n    // Mouth\n    color(\"#8B4513\") {\n        translate([0, 3, 32]) {\n            rotate([90, 0, 0]) {\n                cylinder(h=1, d1=8, d2=5, $fn=16);\n            }\n        }\n    }\n}\n\n// Coral markings\nmodule markings() {\n    color(pink) {\n        // Circular spots on body\n        for(i=[0:45:359]) {\n            rotate([0, 0, i]) {\n                translate([12, 0, 25]) {\n                    sphere(d=4, $fn=10);\n                }\n            }\n        }\n        \n        // Additional spots on branches\n        translate([15, 10, 35]) sphere(d=3, $fn=8);\n        translate([-15, -8, 38]) sphere(d=3, $fn=8);\n        translate([8, -15, 40]) sphere(d=3, $fn=8);\n    }\n}\n\n// Main assembly\nunion() {\n    // Body\n    corsola_body();\n    \n    // Main coral branches\n    coral_branch(25, 4, 20, 45, 10, 15);\n    coral_branch(20, 3.5, 30, 135, -12, 8);\n    coral_branch(22, 4, 25, 225, -8, -10);\n    coral_branch(18, 3, 35, 315, 12, -12);\n    coral_branch(15, 3.5, 15, 0, 0, 18);\n    coral_branch(16, 3, 10, 180, 0, -15);\n    \n    // Smaller branches\n    coral_branch(10, 2, 45, 60, 18, 5);\n    coral_branch(12, 2.5, 40, 240, -15, -5);\n    \n    // Face\n    face();\n    \n    // Markings\n    markings();\n}",
    "renders": true
  },
  {
    "pokemon": "remoraid",
    "openscad_code": "// Remoraid - Realistic Style, Medium Complexity\n// Scale: ~80mm length\n\n$fn = 32;\nscale_factor = 1.5;\n\n// Main body\nmodule body() {\n    color(\"lightslategray\") {\n        // Main fish body\n        union() {\n            // Torso\n            translate([0, 0, 0]) \n                scale([2.5, 1.2, 1]) \n                    sphere(r = 8);\n            \n            // Tail section\n            translate([-20, 0, 0]) \n                scale([1.5, 0.8, 0.8]) \n                    sphere(r = 6);\n            \n            // Snout\n            translate([15, 0, 0]) \n                scale([2, 0.6, 0.6]) \n                    cylinder(h = 12, r1 = 4, r2 = 2);\n        }\n    }\n}\n\n// Dorsal fin\nmodule dorsal_fin() {\n    color(\"dimgrey\") {\n        translate([0, 0, 8]) {\n            rotate([90, 0, 0]) {\n                linear_extrude(height = 1) {\n                    polygon(points = [[-5, 0], [0, 8], [5, 0]]);\n                }\n            }\n        }\n    }\n}\n\n// Tail fin\nmodule tail_fin() {\n    color(\"dimgrey\") {\n        translate([-25, 0, 0]) {\n            rotate([90, 0, 0]) {\n                // Top lobe\n                translate([0, 0, 3]) \n                    scale([1, 1.5, 1]) \n                        rotate([0, 0, 20]) \n                            cylinder(h = 1, r1 = 5, r2 = 0);\n                \n                // Bottom lobe\n                translate([0, 0, -3]) \n                    scale([1, 1.5, 1]) \n                        rotate([0, 0, -20]) \n                            cylinder(h = 1, r1 = 5, r2 = 0);\n            }\n        }\n    }\n}\n\n// Pectoral fins\nmodule pectoral_fins() {\n    color(\"dimgrey\") {\n        for(side = [-1, 1]) {\n            translate([0, side * 8, -3]) {\n                rotate([0, side * 30, 0]) {\n                    scale([1.5, 1, 0.3]) \n                        rotate([0, 90, 0]) \n                            cylinder(h = 6, r1 = 3, r2 = 0);\n                }\n            }\n        }\n    }\n}\n\n// Eye\nmodule eye() {\n    color(\"black\") {\n        translate([12, -4, 3]) \n            sphere(r = 2);\n        \n        // Eye highlight\n        color(\"white\") {\n            translate([13, -3.5, 3.5]) \n                sphere(r = 0.5);\n        }\n    }\n}\n\n// Mouth\nmodule mouth() {\n    color(\"black\") {\n        translate([18, 0, 0]) {\n            rotate([90, 0, 0]) {\n                difference() {\n                    cylinder(h = 0.5, r = 2);\n                    translate([0, 0, -0.25]) \n                        cube([4, 2, 1], center = true);\n                }\n            }\n        }\n    }\n}\n\n// Body markings\nmodule markings() {\n    color(\"darkslategray\") {\n        // Stripe pattern\n        for(i = [-1, 0, 1]) {\n            translate([i * 5, 0, 7.5]) {\n                rotate([90, 0, 0]) \n                    cylinder(h = 0.5, r = 2);\n            }\n        }\n        \n        // Spot patterns\n        for(pos = [[5, 5, 0], [2, 6, 2], [-3, 5, -1]]) {\n            translate(pos) \n                sphere(r = 1);\n        }\n    }\n}\n\n// Assembly\nscale([scale_factor, scale_factor, scale_factor]) {\n    union() {\n        body();\n        dorsal_fin();\n        tail_fin();\n        pectoral_fins();\n        eye();\n        mirror([0, 1, 0]) eye();\n        mouth();\n        markings();\n    }\n}",
    "renders": true
  },
  {
    "pokemon": "octillery",
    "openscad_code": "// Octillery Pokemon - Realistic Style, Medium Complexity\n// Size: ~80mm tall\n\n// Main colors\n$fn = 32;\nbody_color = [0.2, 0.4, 0.8];\nmouth_color = [0.6, 0.2, 0.2];\neye_color = [1, 1, 0];\nblack = [0, 0, 0];\nyellow = [1, 0.8, 0];\n\n// Body\nmodule octillery_body() {\n    color(body_color)\n    union() {\n        // Main body - teardrop shape\n        translate([0, 0, 20])\n        scale([1, 1.2, 1.5])\n        sphere(25);\n        \n        // Snout extension\n        translate([0, 30, 15])\n        rotate([30, 0, 0])\n        scale([0.8, 1, 1.2])\n        cylinder(20, 15, 10);\n        \n        // Head bump\n        translate([0, -5, 35])\n        sphere(10);\n    }\n}\n\n// Eyes\nmodule eyes() {\n    // Left eye\n    translate([-12, 25, 35])\n    union() {\n        color(eye_color)\n        sphere(6);\n        color(black)\n        translate([0, 0, 5.5])\n        sphere(3);\n    }\n    \n    // Right eye\n    translate([12, 25, 35])\n    union() {\n        color(eye_color)\n        sphere(6);\n        color(black)\n        translate([0, 0, 5.5])\n        sphere(3);\n    }\n}\n\n// Mouth\nmodule mouth() {\n    color(mouth_color)\n    translate([0, 40, 15])\n    rotate([90, 0, 0])\n    cylinder(5, 12, 8);\n}\n\n// Tentacles\nmodule tentacle(length, angle) {\n    color(body_color)\n    rotate([0, angle, 0])\n    translate([0, 0, -length/2])\n    scale([1, 1, length/10])\n    sphere(5);\n}\n\n// Array of tentacles\nmodule tentacles() {\n    for (i = [0:45:315]) {\n        rotate([0, 0, i])\n        translate([20, 0, 0])\n        tentacle(30, 30);\n    }\n}\n\n// Yellow suction cups\nmodule suction_cups() {\n    color(yellow)\n    for (i = [0:45:315]) {\n        rotate([0, 0, i])\n        translate([20, 0, -10])\n        scale([1.5, 1.5, 0.5])\n        sphere(5);\n    }\n}\n\n// Top fin\nmodule top_fin() {\n    color(body_color)\n    translate([0, -15, 45])\n    rotate([0, 0, 0])\n    scale([1, 0.3, 0.5])\n    cylinder(15, 2, 15);\n}\n\n// Side fins\nmodule side_fins() {\n    // Left fin\n    color(body_color)\n    translate([-25, 0, 20])\n    rotate([0, 90, 0])\n    scale([0.5, 1, 1])\n    cylinder(15, 5, 2);\n    \n    // Right fin\n    translate([25, 0, 20])\n    rotate([0, 90, 0])\n    scale([0.5, 1, 1])\n    cylinder(15, 5, 2);\n}\n\n// Assembly\nunion() {\n    octillery_body();\n    eyes();\n    mouth();\n    tentacles();\n    suction_cups();\n    top_fin();\n    side_fins();\n}",
    "renders": true
  },
  {
    "pokemon": "delibird",
    "openscad_code": "// Delibird - Realistic Style (Medium Complexity)\n// Size: ~70mm tall\n\n// Main body color (white)\ncolor(\"white\") {\n    // Body - rounded oval\n    union() {\n        translate([0, 0, 15]) scale([1, 0.8, 1.2]) sphere(15);\n        \n        // Belly patch (light blue-gray)\n        color(\"#E0E8F0\") {\n            translate([0, -11, 12]) scale([1.2, 0.3, 1.5]) sphere(12);\n        }\n    }\n}\n\n// Red coat\ncolor(\"red\") {\n    // Main coat body\n    difference() {\n        translate([0, 0, 25]) scale([1.3, 1.1, 0.8]) sphere(20);\n        // Hollow out center\n        translate([0, 0, 25]) scale([0.8, 0.7, 0.6]) sphere(20);\n    }\n    \n    // Coat bottom edge\n    translate([0, 0, 15]) cylinder(h=3, r1=25, r2=26);\n    \n    // Yellow circle on coat\n    color(\"yellow\") {\n        translate([0, 20, 25]) cylinder(h=2, r=8);\n    }\n}\n\n// Head\ncolor(\"white\") {\n    translate([0, 0, 40]) scale([0.9, 0.8, 1.1]) sphere(12);\n    \n    // Beak\n    color(\"yellow\") {\n        translate([0, 12, 38]) rotate([30, 0, 0]) scale([0.8, 0.3, 0.4]) cylinder(h=15, r1=8, r2=6);\n    }\n    \n    // Eyes\n    color(\"black\") {\n        // Left eye\n        translate([-5, 5, 45]) sphere(2);\n        // Right eye\n        translate([5, 5, 45]) sphere(2);\n    }\n    \n    // Eyebrows\n    color(\"red\") {\n        // Left eyebrow\n        translate([-6, 7, 47]) rotate([0, 0, 30]) scale([0.2, 1, 0.2]) cube([8, 2, 2]);\n        // Right eyebrow\n        translate([6, 7, 47]) rotate([0, 0, -30]) scale([0.2, 1, 0.2]) cube([8, 2, 2]);\n    }\n}\n\n// Ears\nmodule ear() {\n    color(\"white\") {\n        difference() {\n            translate([0, 0, 5]) scale([0.3, 1, 0.5]) sphere(8);\n            // Inner ear\n            color(\"red\") {\n                translate([0, 0, 6]) scale([0.2, 0.8, 0.4]) sphere(7);\n            }\n        }\n    }\n}\n\n// Left ear\ntranslate([-12, 0, 50]) rotate([0, 0, -20]) ear();\n// Right ear\ntranslate([12, 0, 50]) rotate([0, 0, 20]) mirror([1, 0, 0]) ear();\n\n// Wings\nmodule wing() {\n    color(\"white\") {\n        difference() {\n            // Main wing\n            translate([0, 0, 0]) scale([1, 0.3, 1.5]) sphere(12);\n            // Cutout\n            translate([0, -2, 5]) scale([0.6, 0.2, 1.2]) sphere(10);\n        }\n    }\n}\n\n// Left wing\ntranslate([-20, 0, 30]) rotate([0, 0, 90]) wing();\n// Right wing\ntranslate([20, 0, 30]) rotate([0, 0, -90]) mirror([1, 0, 0]) wing();\n\n// Tail with gift sack\ncolor(\"red\") {\n    // Tail base\n    translate([0, -15, 20]) rotate([0, 45, 0]) scale([0.5, 0.5, 1]) cylinder(h=20, r1=8, r2=6);\n    \n    // Gift sack\n    color(\"yellow\") {\n        translate([0, -25, 10]) scale([0.8, 0.6, 1]) sphere(12);\n        \n        // Ribbon\n        color(\"red\") {\n            translate([0, -25, 22]) rotate([90, 0, 0]) cylinder(h=1, r=13);\n            // Ribbon bow\n            translate([-5, -25, 22]) cylinder(h=5, r=3);\n            translate([5, -25, 22]) cylinder(h=5, r=3);\n        }\n    }\n}\n\n// Feet\nmodule foot() {\n    color(\"yellow\") {\n        translate([0, 0, 0]) scale([1, 1.5, 0.5]) sphere(5);\n        // Toes\n        for(i = [-1:1]) {\n            translate([i*2, 3, -2]) sphere(2);\n        }\n    }\n}\n\n// Left foot\ntranslate([-8, 0, 5]) foot();\n// Right foot\ntranslate([8, 0, 5]) foot();",
    "renders": true
  },
  {
    "pokemon": "mantine",
    "openscad_code": "// Mantine - Realistic Style, Medium Complexity\n// 3D printable model with proper wall thickness\n\n// Color definitions\ncolor_mantine_body = \"#4682B4\";       // Steel blue\ncolor_mantine_underside = \"#87CEEB\";  // Sky blue\ncolor_mantine_markings = \"#1E90FF\";   // Dodger blue\ncolor_eyes = \"#000000\";\ncolor_mouth = \"#2F4F4F\";\n\n// Scale factor for 3D printing (80mm wingspan)\nscale_factor = 1;\n\n// Main body module\nmodule mantine_body() {\n    color(color_mantine_body) {\n        // Central body - oval shape\n        translate([0, 0, 5]) {\n            scale([1.2, 0.8, 0.6]) sphere(15);\n        }\n        \n        // Body underside\n        color(color_mantine_underside) {\n            translate([0, 0, 2]) {\n                scale([1.1, 0.7, 0.3]) sphere(14);\n            }\n        }\n    }\n}\n\n// Wing module with ribbing\nmodule wing(side) {\n    mirror([side, 0, 0]) {\n        color(color_mantine_body) {\n            // Main wing fin\n            translate([-35, 0, 8]) {\n                rotate([0, 0, -10]) {\n                    scale([2.5, 0.3, 1.2]) sphere(10);\n                }\n            }\n            \n            // Wing tip\n            translate([-45, 0, 12]) {\n                rotate([0, 0, -15]) {\n                    scale([0.8, 0.2, 1]) sphere(8);\n                }\n            }\n            \n            // Wing ribbing pattern\n            for (i = [-30:10:-10]) {\n                translate([i, 0, 8]) {\n                    rotate([0, 0, -10]) {\n                        scale([0.1, 0.25, 0.8]) cylinder(h=20, r=2);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Eye module\nmodule eye(side) {\n    color(color_eyes) {\n        translate([side * 8, 6, 12]) {\n            sphere(2.5);\n        }\n        \n        // Eye highlight\n        color(\"white\") {\n            translate([side * 8.5, 6.5, 12.5]) {\n                sphere(0.8);\n            }\n        }\n    }\n}\n\n// Mouth module\nmodule mouth() {\n    color(color_mouth) {\n        translate([0, 9, 8]) {\n            rotate([90, 0, 0]) {\n                scale([1, 0.5, 1]) cylinder(h=0.5, r=4);\n            }\n        }\n        \n        // Lower jaw\n        translate([0, 9, 6.5]) {\n            rotate([90, 0, 0]) {\n                scale([0.8, 0.4, 1]) cylinder(h=2, r=3);\n            }\n        }\n    }\n}\n\n// Tail module\nmodule tail() {\n    color(color_mantine_body) {\n        // Main tail\n        translate([0, -20, 5]) {\n            rotate([30, 0, 0]) {\n                scale([0.5, 0.3, 2]) sphere(6);\n            }\n        }\n        \n        // Tail fin\n        translate([0, -28, 3]) {\n            rotate([45, 0, 0]) {\n                scale([1.2, 0.1, 0.8]) sphere(5);\n            }\n        }\n    }\n}\n\n// Spots/markings on back\nmodule markings() {\n    color(color_mantine_markings) {\n        for (i = [0:2]) {\n            rotate([0, 0, i * 120]) {\n                translate([5, 0, 14]) {\n                    scale([1.5, 1, 0.3]) sphere(3);\n                }\n            }\n        }\n    }\n}\n\n// Head crest\nmodule head_crest() {\n    color(color_mantine_body) {\n        translate([0, 0, 18]) {\n            rotate([10, 0, 0]) {\n                scale([0.3, 0.1, 1]) cylinder(h=8, r=5);\n            }\n        }\n    }\n}\n\n// Main assembly\nscale([scale_factor, scale_factor, scale_factor]) {\n    union() {\n        // Body\n        mantine_body();\n        \n        // Wings (left and right)\n        wing(1);\n        wing(-1);\n        \n        // Head features\n        head_crest();\n        \n        // Eyes\n        eye(1);\n        eye(-1);\n        \n        // Mouth\n        mouth();\n        \n        // Tail\n        tail();\n        \n        // Markings\n        markings();\n    }\n}",
    "renders": true
  },
  {
    "pokemon": "skarmory",
    "openscad_code": "// Skarmory Pokemon - Realistic Style\n// Medium complexity 3D printable model\n\n// Color definitions\nmetal_gray = [0.5, 0.5, 0.55];\ndark_gray = [0.3, 0.3, 0.35];\nred = [0.8, 0.2, 0.2];\nwhite = [0.9, 0.9, 0.9];\n\n// Overall scale\nscale_factor = 0.5;\n\nmodule skarmory() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        union() {\n            // Main body\n            color(metal_gray) {\n                // Torso - elongated oval\n                translate([0, 0, 15])\n                    scale([12, 8, 20])\n                    sphere(r=1, $fn=16);\n                \n                // Chest plate\n                translate([0, 0, 8])\n                    rotate([90, 0, 0])\n                    cylinder(h=15, r1=8, r2=6, $fn=8);\n                \n                // Head\n                translate([0, 0, 35])\n                    scale([8, 6, 12])\n                    sphere(r=1, $fn=16);\n            }\n            \n            // Beak\n            color(dark_gray) {\n                translate([0, 0, 45])\n                    rotate([0, 0, 0])\n                    cylinder(h=8, r1=3, r2=0.5, $fn=6);\n            }\n            \n            // Eyes\n            color(red) {\n                translate([-2.5, 3.5, 43])\n                    sphere(r=1, $fn=8);\n                translate([2.5, 3.5, 43])\n                    sphere(r=1, $fn=8);\n            }\n            \n            // Crest feathers\n            color(white) {\n                for(i = [-2:2]) {\n                    translate([i*2, 0, 48])\n                        scale([1, 0.5, 3])\n                        sphere(r=1, $fn=8);\n                }\n            }\n            \n            // Wings\n            color(metal_gray) {\n                // Left wing\n                translate([-15, 0, 25])\n                    rotate([0, 0, -20])\n                    scale([15, 2, 8])\n                    cube([1, 1, 1], center=true);\n                \n                // Wing feathers\n                for(i = [0:3]) {\n                    translate([-25 - i*3, 0, 25 - i*2])\n                        rotate([0, 0, -30 - i*5])\n                        scale([3, 0.5, 2])\n                        cube([1, 1, 1], center=true);\n                }\n                \n                // Right wing (mirrored)\n                mirror([1, 0, 0]) {\n                    translate([-15, 0, 25])\n                        rotate([0, 0, -20])\n                        scale([15, 2, 8])\n                        cube([1, 1, 1], center=true);\n                    \n                    for(i = [0:3]) {\n                        translate([-25 - i*3, 0, 25 - i*2])\n                            rotate([0, 0, -30 - i*5])\n                            scale([3, 0.5, 2])\n                            cube([1, 1, 1], center=true);\n                    }\n                }\n            }\n            \n            // Tail feathers\n            color(metal_gray) {\n                for(i = [0:3]) {\n                    rotate([0, 0, (i-1.5)*15])\n                    translate([0, -12 - i*2, 15 - i*2])\n                        scale([4, 0.5, 1.5])\n                        cube([1, 1, 1], center=true);\n                }\n            }\n            \n            // Legs\n            color(dark_gray) {\n                // Left leg\n                translate([-5, 0, 5])\n                    cylinder(h=10, r=2, $fn=8);\n                translate([-5, 0, 0])\n                    sphere(r=3, $fn=8);\n                \n                // Right leg\n                translate([5, 0, 5])\n                    cylinder(h=10, r=2, $fn=8);\n                translate([5, 0, 0])\n                    sphere(r=3, $fn=8);\n            }\n            \n            // Claws\n            color(white) {\n                for(pos = [[-5, 0, 0], [5, 0, 0]]) {\n                    for(angle = [0:120:240]) {\n                        translate(pos)\n                            rotate([0, 0, angle])\n                            translate([2.5, 0, -1])\n                            scale([1, 0.5, 2])\n                            cube([1, 1, 1], center=true);\n                    }\n                }\n            }\n            \n            // Metal plates on body\n            color(white) {\n                // Chest plate details\n                translate([0, 5, 15])\n                    rotate([90, 0, 0])\n                    scale([6, 0.5, 3])\n                    cube([1, 1, 1], center=true);\n                \n                // Side plates\n                for(side = [-1, 1]) {\n                    translate([side*8, 0, 20])\n                        scale([2, 0.5, 4])\n                        cube([1, 1, 1], center=true);\n                }\n            }\n        }\n    }\n}\n\n// Generate the model\nskarmory();",
    "renders": true
  },
  {
    "pokemon": "houndour",
    "openscad_code": "// Houndour - Realistic style, Medium complexity\n// Scale: 1 unit = 1 mm\n// Total height ~70 mm\n\n$fn = 32;\n\nmodule houndour_body() {\n    // Main body\n    color(\"dimgray\") \n    union() {\n        // Torso\n        translate([0, 0, 25])\n            scale([1.2, 0.8, 1.5])\n            sphere(15);\n        \n        // Chest\n        translate([0, 6, 15])\n            scale([0.9, 0.5, 0.8])\n            sphere(12);\n        \n        // Back\n        translate([0, -8, 28])\n            scale([1.3, 0.7, 1])\n            sphere(10);\n    }\n}\n\nmodule houndour_head() {\n    color(\"dimgray\")\n    union() {\n        // Skull\n        translate([0, 18, 35])\n            scale([0.8, 1.2, 0.9])\n            sphere(12);\n        \n        // Snout\n        translate([0, 28, 32])\n            scale([0.5, 1.5, 0.6])\n            sphere(8);\n        \n        // Lower jaw\n        translate([0, 26, 24])\n            scale([0.4, 1.2, 0.4])\n            sphere(6);\n    }\n    \n    // Horns\n    color(\"saddlebrown\")\n    union() {\n        // Left horn\n        translate([-8, 15, 48])\n            rotate([0, -20, 15])\n            scale([0.3, 0.3, 1.2])\n            cylinder(10, 3, 0);\n        \n        // Right horn\n        translate([8, 15, 48])\n            rotate([0, -20, -15])\n            scale([0.3, 0.3, 1.2])\n            cylinder(10, 3, 0);\n    }\n    \n    // Skull pattern\n    color(\"lightgray\")\n    difference() {\n        translate([0, 18, 36])\n            scale([0.8, 1.1, 0.8])\n            sphere(10);\n        \n        // Eye holes\n        translate([-5, 20, 38])\n            sphere(2.5);\n        translate([5, 20, 38])\n            sphere(2.5);\n        \n        // Nose hole\n        translate([0, 30, 32])\n            scale([1.5, 0.8, 0.5])\n            sphere(2);\n    }\n}\n\nmodule houndour_legs() {\n    color(\"dimgray\")\n    for(i = [-1, 1]) {\n        // Front legs\n        translate([i*8, 8, 12])\n            rotate([0, 0, i*10])\n            union() {\n                // Upper leg\n                scale([0.4, 0.4, 1])\n                cylinder(12, 4, 3);\n                \n                // Lower leg\n                translate([0, 0, 11])\n                    rotate([20, 0, 0])\n                    scale([0.3, 0.3, 1])\n                    cylinder(12, 3, 2);\n                \n                // Paw\n                translate([0, 0, 23])\n                    scale([0.8, 1.2, 0.3])\n                    sphere(3);\n            }\n        \n        // Back legs\n        translate([i*7, -12, 12])\n            rotate([0, 0, i*-10])\n            union() {\n                // Upper leg\n                scale([0.5, 0.5, 1.1])\n                cylinder(13, 5, 4);\n                \n                // Lower leg\n                translate([0, 0, 12])\n                    rotate([30, 0, 0])\n                    scale([0.4, 0.4, 1])\n                    cylinder(12, 4, 3);\n                \n                // Paw\n                translate([0, 0, 24])\n                    scale([1, 1.3, 0.4])\n                    sphere(3.5);\n            }\n    }\n}\n\nmodule houndour_tail() {\n    color(\"dimgray\")\n    translate([0, -22, 25])\n        rotate([45, 0, 0])\n        scale([0.5, 0.5, 1.5])\n        cylinder(20, 4, 2);\n    \n    // Tail tip\n    color(\"saddlebrown\")\n    translate([0, -22, 10])\n        scale([0.5, 0.5, 1])\n        sphere(4);\n}\n\nmodule houndour_ears() {\n    color(\"dimgray\")\n    for(i = [-1, 1]) {\n        translate([i*6, 18, 45])\n            rotate([0, 0, i*20])\n            scale([0.3, 1, 0.8])\n            cylinder(8, 4, 2);\n    }\n}\n\nmodule houndour_bones() {\n    color(\"lightgray\")\n    // Chest bones\n    translate([0, 6, 22])\n        scale([1.2, 0.3, 1])\n        sphere(4);\n    \n    // Ribs\n    for(i = [-1, 1]) {\n        translate([i*4, 0, 20])\n            scale([0.3, 0.5, 0.8])\n            sphere(2);\n    }\n}\n\nmodule houndour() {\n    houndour_body();\n    houndour_head();\n    houndour_legs();\n    houndour_tail();\n    houndour_ears();\n    houndour_bones();\n}\n\n// Main assembly\nhoundour();",
    "renders": true
  },
  {
    "pokemon": "houndoom",
    "openscad_code": "// Houndoom - Realistic Medium Complexity\n// 3D printable, ~80mm tall\n\n// Colors\ncolor_body = [0.15, 0.15, 0.15];\ncolor_orange = [0.9, 0.4, 0.1];\ncolor_gray = [0.5, 0.5, 0.5];\ncolor_white = [1, 1, 1];\ncolor_red = [0.8, 0.1, 0.1];\n\n// Main body\nmodule body() {\n    color(color_body)\n    union() {\n        // Torso\n        translate([0, -5, 30])\n            scale([1.2, 1, 1.5])\n            sphere(15);\n        \n        // Chest\n        translate([0, 0, 25])\n            scale([1.5, 0.8, 1.2])\n            sphere(12);\n            \n        // Abdomen\n        translate([0, 0, 10])\n            scale([1.3, 0.9, 1.4])\n            sphere(10);\n    }\n}\n\n// Head\nmodule head() {\n    color(color_body)\n    union() {\n        // Main head shape\n        translate([0, 22, 50])\n            scale([1.3, 1.8, 1.2])\n            sphere(15);\n            \n        // Snout\n        translate([0, 35, 48])\n            scale([0.6, 1.2, 0.7])\n            sphere(12);\n            \n        // Horn\n        translate([0, 30, 65])\n            rotate([0, 0, 0])\n            cylinder(h=20, r1=3, r2=0);\n    }\n    \n    // Orange skull marking\n    color(color_orange)\n    translate([0, 25, 55])\n    difference() {\n        sphere(8);\n        translate([0, 0, -5])\n            cube([20, 20, 10], center=true);\n    }\n}\n\n// Ears\nmodule ears() {\n    for(side = [-1, 1]) {\n        color(color_body)\n        translate([side * 15, 18, 65])\n            rotate([0, side * 20, 0])\n            scale([0.3, 1, 2])\n            cylinder(h=20, r=5);\n            \n        // Inner ear\n        color(color_gray)\n        translate([side * 15, 18, 65])\n            rotate([0, side * 20, 0])\n            scale([0.2, 0.8, 1.8])\n            cylinder(h=18, r=4);\n    }\n}\n\n// Legs\nmodule legs() {\n    for(side = [-1, 1]) {\n        // Front leg\n        color(color_body)\n        translate([side * 12, 8, 15])\n            rotate([0, 0, -10])\n            cylinder(h=20, r=4);\n            \n        // Back leg\n        translate([side * 10, -15, 15])\n            rotate([0, 0, 10])\n            cylinder(h=22, r=5);\n            \n        // Paws\n        translate([side * 12, 8, 5])\n            sphere(5);\n        translate([side * 10, -15, 5])\n            sphere(6);\n    }\n}\n\n// Tail\nmodule tail() {\n    color(color_body)\n    translate([0, -30, 25])\n        rotate([0, 0, 45])\n        scale([0.8, 0.8, 3])\n        cylinder(h=30, r=6);\n        \n    // Tip\n    color(color_orange)\n    translate([10, -45, 45])\n        sphere(8);\n}\n\n// Spikes\nmodule spikes() {\n    positions = [[0, -10, 40], [0, 0, 42], [0, 10, 45]];\n    for(pos = positions) {\n        color(color_gray)\n        translate(pos)\n            rotate([0, 0, 0])\n            cylinder(h=8, r1=3, r2=0);\n    }\n}\n\n// Face details\nmodule face_details() {\n    // Eyes\n    for(side = [-1, 1]) {\n        color(color_red)\n        translate([side * 8, 30, 52])\n            sphere(3);\n            \n        // Pupil\n        color(color_white)\n        translate([side * 8.5, 31, 54])\n            sphere(1);\n    }\n    \n    // Nose\n    color(color_gray)\n    translate([0, 40, 48])\n        sphere(2);\n        \n    // Teeth\n    color(color_white)\n    translate([0, 40, 44])\n        cube([2, 1, 4], center=true);\n}\n\n// Assembly\nbody();\nhead();\nears();\nlegs();\ntail();\nspikes();\nface_details();",
    "renders": true
  },
  {
    "pokemon": "kingdra",
    "openscad_code": "// Kingdra - Medium Complexity Realistic Style\n// 3D printable model with proper wall thickness and no overhangs\n\n// Colors\nkingdra_blue = [0.2, 0.4, 0.7];\nkingdra_yellow = [0.9, 0.8, 0.2];\nkingdra_white = [0.95, 0.95, 0.95];\nkingdra_black = [0.1, 0.1, 0.1];\n\n// Main body\nmodule kingdra_body() {\n    color(kingdra_blue) {\n        // Torso - elongated oval\n        scale([1.2, 0.8, 1.5])\n            sphere(d=30, $fn=32);\n        \n        // Belly\n        color(kingdra_white)\n            translate([0, -5, -10])\n                scale([0.8, 0.6, 1.2])\n                    sphere(d=25, $fn=32);\n    }\n}\n\n// Head with snout\nmodule kingdra_head() {\n    union() {\n        // Main head\n        color(kingdra_blue)\n            translate([0, 0, 25])\n                scale([1, 0.9, 1.1])\n                    sphere(d=20, $fn=32);\n        \n        // Snout\n        color(kingdra_blue)\n            translate([0, 0, 35])\n                rotate([15, 0, 0])\n                    scale([0.6, 0.5, 1.2])\n                        cylinder(d1=12, d2=8, h=15, $fn=16);\n        \n        // Nose\n        color(kingdra_yellow)\n            translate([0, 0, 50])\n                sphere(d=3, $fn=16);\n        \n        // Eyes\n        for(x = [-7, 7]) {\n            color(kingdra_white)\n                translate([x, 5, 30])\n                    sphere(d=5, $fn=16);\n            \n            color(kingdra_black)\n                translate([x, 6, 30.5])\n                    sphere(d=2.5, $fn=16);\n        }\n        \n        // Crest fins\n        color(kingdra_blue)\n        for(angle = [0, 45, -45]) {\n            rotate([0, 0, angle])\n                translate([0, 0, 35])\n                    rotate([90, 0, 0])\n                        cylinder(d1=6, d2=2, h=10, $fn=8);\n        }\n    }\n}\n\n// Wing-like fins\nmodule kingdra_wings() {\n    color(kingdra_blue) {\n        // Left wing\n        translate([-15, 0, 10])\n            rotate([0, 0, 45])\n                scale([1.5, 0.2, 1])\n                    sphere(d=20, $fn=16);\n        \n        // Right wing\n        translate([15, 0, 10])\n            rotate([0, 0, -45])\n                scale([1.5, 0.2, 1])\n                    sphere(d=20, $fn=16);\n    }\n}\n\n// Tail segments\nmodule kingdra_tail() {\n    color(kingdra_blue)\n    for(i = [0:3]) {\n        translate([0, 0, -20 - i*8])\n            rotate([0, 0, sin(i*30)*10])\n                scale([1 - i*0.15, 1 - i*0.15, 0.8])\n                    sphere(d=25 - i*5, $fn=16);\n    }\n    \n    // Tail fin\n    color(kingdra_blue)\n    translate([0, 0, -50])\n        scale([1.2, 0.2, 2])\n            sphere(d=20, $fn=16);\n}\n\n// Back fins\nmodule kingdra_back_fins() {\n    color(kingdra_blue)\n    for(i = [0, 1, 2]) {\n        translate([0, 0, 20 - i*10])\n            rotate([90, 0, 0])\n                cylinder(d1=10, d2=2, h=8, $fn=8);\n    }\n}\n\n// Assembly\nunion() {\n    kingdra_body();\n    kingdra_head();\n    kingdra_wings();\n    kingdra_tail();\n    kingdra_back_fins();\n}",
    "renders": true
  },
  {
    "pokemon": "phanpy",
    "openscad_code": "// Phanpy - Realistic OpenSCAD Model\n// Medium complexity, 3D printable\n\n// Main colors\ncolor_body = [0.6, 0.5, 0.45];      // Blue-gray\ncolor_ears = [0.95, 0.85, 0.75];    // Light beige\ncolor_details = [0.3, 0.25, 0.2];   // Dark gray for eyes/nose\ncolor_red = [0.8, 0.2, 0.2];        // Red markings\n\n// Overall scale\noverall_scale = 3;\n\nmodule phanpy_body() {\n    // Main body - ellipsoid\n    scale([1, 0.9, 0.7])\n    sphere(10);\n}\n\nmodule phanpy_head() {\n    // Head - rounded box\n    translate([0, 12, 6])\n    scale([1.1, 1.2, 0.9])\n    sphere(8);\n    \n    // Snout\n    translate([0, 20, 5])\n    scale([0.8, 0.6, 0.5])\n    sphere(6);\n}\n\nmodule phanpy_ears() {\n    // Left ear\n    translate([-8, 14, 14])\n    rotate([0, -15, -20])\n    scale([0.4, 2, 1.2])\n    color(color_ears)\n    cylinder(8, 3, 2);\n    \n    // Right ear\n    translate([8, 14, 14])\n    rotate([0, -15, 20])\n    scale([0.4, 2, 1.2])\n    color(color_ears)\n    cylinder(8, 3, 2);\n    \n    // Ear tips\n    translate([-8, 14, 22])\n    sphere(2.5);\n    translate([8, 14, 22])\n    sphere(2.5);\n}\n\nmodule phanpy_legs() {\n    // Front legs\n    for(x = [-6, 6]) {\n        translate([x, 8, -8])\n        scale([0.8, 0.8, 1.5])\n        cylinder(6, 3, 3);\n        \n        // Feet\n        translate([x, 8, -14.5])\n        scale([1.2, 1.5, 0.5])\n        sphere(3);\n    }\n    \n    // Back legs\n    for(x = [-5, 5]) {\n        translate([x, -8, -8])\n        scale([0.9, 0.9, 1.6])\n        cylinder(6.5, 3.5, 3.5);\n        \n        // Feet\n        translate([x, -8, -15])\n        scale([1.3, 1.6, 0.5])\n        sphere(3.5);\n    }\n}\n\nmodule phanpy_trunk() {\n    // Trunk base\n    translate([0, 22, 4])\n    rotate([10, 0, 0])\n    scale([0.8, 3, 0.8])\n    cylinder(8, 2.5, 1.5);\n    \n    // Trunk curve\n    translate([0, 28, 2])\n    rotate([25, 0, 0])\n    scale([0.7, 2, 0.7])\n    cylinder(6, 1.5, 1);\n}\n\nmodule phanpy_tail() {\n    // Tail base\n    translate([0, -15, 2])\n    rotate([30, 0, 0])\n    scale([1, 0.8, 0.8])\n    cylinder(10, 3, 2);\n    \n    // Tail rope\n    translate([0, -23, 3])\n    rotate([45, 0, 0])\n    scale([0.6, 0.6, 0.6])\n    cylinder(8, 2, 1);\n}\n\nmodule phanpy_eyes() {\n    // Left eye\n    translate([-3.5, 19, 10])\n    color(color_details)\n    sphere(1.5);\n    \n    // Right eye\n    translate([3.5, 19, 10])\n    color(color_details)\n    sphere(1.5);\n}\n\nmodule phanpy_nose() {\n    // Nostril\n    translate([0, 24, 6])\n    color(color_details)\n    sphere(1);\n}\n\nmodule phanpy_markings() {\n    // Red markings on ears\n    translate([-8, 14, 20])\n    color(color_red)\n    scale([0.8, 0.8, 0.3])\n    sphere(2);\n    \n    translate([8, 14, 20])\n    color(color_red)\n    scale([0.8, 0.8, 0.3])\n    sphere(2);\n    \n    // Body markings\n    translate([0, 0, 8])\n    color(color_red)\n    scale([2, 1.5, 0.3])\n    sphere(3);\n}\n\nmodule phanpy_complete() {\n    scale([overall_scale, overall_scale, overall_scale])\n    union() {\n        color(color_body) phanpy_body();\n        color(color_body) phanpy_head();\n        phanpy_ears();\n        phanpy_legs();\n        color(color_body) phanpy_trunk();\n        color(color_body) phanpy_tail();\n        phanpy_eyes();\n        phanpy_nose();\n        phanpy_markings();\n    }\n}\n\n// Render the complete Phanpy\nphanpy_complete();",
    "renders": true
  },
  {
    "pokemon": "donphan",
    "openscad_code": "// Donphan Pokemon - Realistic Style, Medium Complexity\n// 3D printable model with proper wall thickness and minimal overhangs\n\nmodule donphan() {\n    color([0.72, 0.45, 0.25]) // Brownish-gray color\n    \n    // Main body - ellipsoid shape\n    union() {\n        // Central body\n        scale([1.2, 1, 0.8])\n            sphere(20, $fn=32);\n        \n        // Rear section\n        translate([0, -25, 0])\n            scale([1.5, 1.2, 0.9])\n                sphere(15, $fn=32);\n        \n        // Front chest armor\n        translate([0, 15, 0])\n            scale([1.3, 0.8, 0.7])\n                sphere(18, $fn=32);\n    }\n    \n    // Head\n    translate([0, 30, 5])\n        rotate([0, 0, 0])\n            scale([0.8, 0.7, 0.6])\n                sphere(15, $fn=32);\n    \n    // Trunk/snout\n    color([0.65, 0.4, 0.22])\n    translate([0, 42, -2])\n        rotate([-20, 0, 0])\n            cylinder(h=15, r1=8, r2=4, $fn=16);\n    \n    // Ears\n    module ear(x_pos) {\n        translate([x_pos, 28, 12])\n            rotate([0, x_pos * -5, 0])\n                scale([0.3, 1, 1.5])\n                    cylinder(h=10, r=5, $fn=16);\n    }\n    ear(8);\n    ear(-8);\n    \n    // Eyes\n    color([0.1, 0.1, 0.1])\n    translate([6, 32, 8])\n        sphere(2.5, $fn=16);\n    translate([-6, 32, 8])\n        sphere(2.5, $fn=16);\n    \n    // Tusks\n    color([0.9, 0.85, 0.8])\n    module tusk(x_pos) {\n        translate([x_pos, 38, -3])\n            rotate([30, 0, x_pos * -10])\n                cylinder(h=12, r1=3, r2=1, $fn=12);\n    }\n    tusk(4);\n    tusk(-4);\n    \n    // Armor plates on back\n    color([0.5, 0.3, 0.15])\n    for(i = [1:4]) {\n        translate([0, -15 - i*8, 10 + i*2])\n            rotate([0, 0, 0])\n                scale([1.2 - i*0.1, 0.3, 0.3])\n                    cylinder(h=8, r1=12 - i*2, r2=8 - i*1.5, $fn=32);\n    }\n    \n    // Legs\n    module leg(x_pos, y_pos) {\n        translate([x_pos, y_pos, -15])\n            rotate([0, 0, 0])\n                cylinder(h=20, r=6, $fn=16);\n        \n        // Feet\n        translate([x_pos, y_pos, -25])\n            scale([1.5, 1, 0.5])\n                sphere(6, $fn=16);\n    }\n    \n    // Front legs\n    leg(12, 20);\n    leg(-12, 20);\n    \n    // Rear legs\n    leg(15, -20);\n    leg(-15, -20);\n    \n    // Tail\n    color([0.72, 0.45, 0.25])\n    translate([0, -35, 5])\n        rotate([30, 0, 0])\n            scale([0.5, 0.5, 1.5])\n                cylinder(h=15, r=8, $fn=16);\n    \n    // Black armor bands\n    color([0.2, 0.2, 0.2])\n    for(i = [0:2]) {\n        translate([0, 10 - i*15, 0])\n            rotate([90, 0, 0])\n                scale([1.2, 1, 0.1])\n                    cylinder(h=40, r=18 - i*3, $fn=32);\n    }\n    \n    // Knee pads\n    translate([12, 10, -10])\n        sphere(4, $fn=16);\n    translate([-12, 10, -10])\n        sphere(4, $fn=16);\n    translate([15, -10, -10])\n        sphere(4, $fn=16);\n    translate([-15, -10, -10])\n        sphere(4, $fn=16);\n}\n\n// Scale to 80mm length\nscale(0.8)\n    donphan();",
    "renders": true
  },
  {
    "pokemon": "porygon2",
    "openscad_code": "// Porygon2 - Realistic Style, Medium Complexity\n// Overall height ~70mm\n\nmodule porygon2() {\n    // Main body - hexagonal prism\n    color([0.9, 0.2, 0.6]) {\n        difference() {\n            cylinder(h=30, r=25, $fn=6);\n            translate([0,0,-1]) cylinder(h=32, r=23, $fn=6);\n        }\n    }\n    \n    // Head extension - tapered cylinder\n    color([0.9, 0.2, 0.6]) {\n        translate([0, 0, 31]) cylinder(h1=20, h2=15, r1=25, r2=20, $fn=6);\n    }\n    \n    // Face panel - blue hexagon\n    color([0.2, 0.5, 0.9]) {\n        translate([0, 0, 15]) {\n            difference() {\n                cylinder(h=2, r=22, $fn=6);\n                translate([0,0,-1]) cylinder(h=4, r=20, $fn=6);\n            }\n        }\n    }\n    \n    // Eyes - 3D spheres\n    color([1,1,1]) {\n        // Left eye\n        translate([-10, 12, 18]) sphere(r=5);\n        // Right eye\n        translate([10, 12, 18]) sphere(r=5);\n    }\n    \n    // Eye pupils\n    color([0,0,0]) {\n        translate([-10, 14, 20]) sphere(r=2);\n        translate([10, 14, 20]) sphere(r=2);\n    }\n    \n    // Beak - triangular prism\n    color([0.9, 0.9, 0.1]) {\n        translate([0, 22, 16]) {\n            rotate([90,0,0]) {\n                linear_extrude(height=8) {\n                    polygon(points=[[-5,0], [5,0], [0,10]]);\n                }\n            }\n        }\n    }\n    \n    // Neck ring\n    color([0.9, 0.2, 0.6]) {\n        translate([0,0,30]) {\n            difference() {\n                cylinder(h=3, r=28, $fn=20);\n                cylinder(h=3.5, r=26, $fn=20);\n            }\n        }\n    }\n    \n    // Legs - simple cylinders\n    module leg() {\n        color([0.9, 0.2, 0.6]) {\n            difference() {\n                cylinder(h=15, r=5, $fn=12);\n                translate([0,0,-1]) cylinder(h=17, r=4, $fn=12);\n            }\n        }\n    }\n    \n    // Left leg\n    translate([-15, -12, -15]) rotate([10,0,0]) leg();\n    // Right leg\n    translate([15, -12, -15]) rotate([10,0,0]) leg();\n    \n    // Feet - flat boxes\n    color([0.9, 0.2, 0.6]) {\n        // Left foot\n        translate([-15, -18, -22]) cube([10, 12, 3], center=true);\n        // Right foot\n        translate([15, -18, -22]) cube([10, 12, 3], center=true);\n    }\n    \n    // Arms - tapered cylinders\n    module arm() {\n        color([0.9, 0.2, 0.6]) {\n            rotate([0,90,0]) cylinder(h=20, r1=4, r2=3, $fn=8);\n        }\n    }\n    \n    // Left arm\n    translate([-25, 0, 0]) rotate([0,0,-30]) arm();\n    // Right arm\n    translate([25, 0, 0]) rotate([0,0,30]) mirror([0,1,0]) arm();\n    \n    // Tail segments\n    module tail_segment(len, rad) {\n        color([0.9, 0.2, 0.6]) {\n            rotate([0,90,0]) cylinder(h=len, r=rad, $fn=6);\n        }\n    }\n    \n    // Tail connection\n    translate([0, -25, 0]) tail_segment(15, 5);\n    translate([0, -35, 0]) rotate([0,0,45]) tail_segment(12, 4);\n    translate([-8, -42, 0]) rotate([0,0,90]) tail_segment(10, 3);\n    \n    // Wing modules\n    module wing() {\n        color([0.9, 0.2, 0.6]) {\n            difference() {\n                translate([0,0,0]) cube([20, 2, 25]);\n                translate([0,1,5]) cube([16, 2, 15]);\n            }\n        }\n    }\n    \n    // Left wing\n    translate([-25, 0, 15]) rotate([0,0,60]) wing();\n    // Right wing\n    translate([25, 0, 15]) rotate([0,0,-60]) mirror([1,0,0]) wing();\n    \n    // Detailing lines on body\n    color([0.7, 0.1, 0.5]) {\n        for(i=[-2:2]) {\n            translate([i*8, 0, 16]) {\n                rotate([90,0,0]) cylinder(h=0.5, r=0.5, $fn=6);\n                translate([0, 15, 0]) rotate([90,0,0]) cylinder(h=0.5, r=0.5, $fn=6);\n            }\n        }\n    }\n}\n\n// Render the model\nporygon2();",
    "renders": true
  },
  {
    "pokemon": "stantler",
    "openscad_code": "// Stantler - Realistic Style, Medium Complexity\n// Designed for 3D printing, ~75mm tall\n\nmodule stantler() {\n    // Main body color\n    color([0.6, 0.4, 0.2]) {\n        \n        // Body\n        translate([0, 0, 20]) {\n            scale([1.2, 0.8, 1]) sphere(d=30);\n            translate([0, 0, -5]) cylinder(h=25, d1=25, d2=20);\n        }\n        \n        // Neck\n        translate([0, 8, 35]) {\n            rotate([15, 0, 0]) cylinder(h=15, d1=15, d2=12);\n        }\n    }\n    \n    // Head\n    color([0.65, 0.45, 0.25]) {\n        translate([0, 12, 52]) {\n            scale([0.8, 1, 0.9]) sphere(d=20);\n        }\n    }\n    \n    // Snout\n    color([0.7, 0.5, 0.3]) {\n        translate([0, 22, 50]) {\n            rotate([-30, 0, 0]) cylinder(h=12, d1=12, d2=8);\n        }\n    }\n    \n    // Antlers (characteristic feature)\n    module antler() {\n        color([0.5, 0.3, 0.15]) {\n            // Main antler branch\n            translate([0, 0, 0]) cylinder(h=25, d1=4, d2=2);\n            translate([0, 0, 20]) rotate([0, 0, 45]) cylinder(h=15, d1=2, d2=1);\n            translate([0, 0, 15]) rotate([0, 0, -30]) cylinder(h=12, d1=2, d2=1);\n            translate([0, 0, 10]) rotate([0, 0, 60]) cylinder(h=10, d1=2, d2=1);\n            \n            // Orbs on antlers\n            color([0.9, 0.1, 0.1]) {\n                translate([0, 0, 5]) sphere(d=3);\n                translate([0, 0, 15]) sphere(d=2.5);\n                translate([0, 0, 25]) sphere(d=2);\n            }\n        }\n    }\n    \n    // Left antler\n    translate([-8, 8, 60]) {\n        rotate([30, 0, -15]) antler();\n    }\n    \n    // Right antler\n    translate([8, 8, 60]) {\n        rotate([30, 0, 15]) mirror([1, 0, 0]) antler();\n    }\n    \n    // Legs\n    module leg() {\n        color([0.5, 0.35, 0.2]) {\n            cylinder(h=20, d1=6, d2=5);\n            translate([0, 0, -5]) sphere(d=7); // Hoof\n        }\n    }\n    \n    // Front legs\n    translate([-7, 5, 15]) leg();\n    translate([7, 5, 15]) leg();\n    \n    // Back legs\n    translate([-6, -8, 15]) leg();\n    translate([6, -8, 15]) leg();\n    \n    // Tail\n    color([0.6, 0.4, 0.2]) {\n        translate([0, -15, 22]) {\n            rotate([30, 0, 0]) cylinder(h=15, d1=8, d2=4);\n            translate([0, 0, 12]) sphere(d=6);\n        }\n    }\n    \n    // Eyes\n    color([0.1, 0.1, 0.1]) {\n        translate([-5, 18, 52]) sphere(d=2.5);\n        translate([5, 18, 52]) sphere(d=2.5);\n    }\n    \n    // Nose\n    color([0.3, 0.2, 0.1]) {\n        translate([0, 28, 48]) sphere(d=3);\n    }\n    \n    // Gold orb between antlers\n    color([0.9, 0.7, 0.1]) {\n        translate([0, 6, 65]) sphere(d=4);\n    }\n    \n    // Belly marking\n    color([0.8, 0.6, 0.4]) {\n        translate([0, 0, 18]) {\n            scale([1, 0.7, 0.3]) sphere(d=20);\n        }\n    }\n}\n\n// Render the model\nstantler();",
    "renders": true
  },
  {
    "pokemon": "smeargle",
    "openscad_code": "// OpenSCAD Smeargle (realistic, medium complexity)\n// Overall height ≈ 70 mm\n\n$fn = 32;\n\n// Colors\ncolor_beige   = [235/255, 210/255, 180/255];\ncolor_brown   = [140/255,  90/255,  60/255];\ncolor_green   = [110/255, 180/255,  90/255];\ncolor_red     = [220/255,  60/255,  50/255];\ncolor_black   = [ 30/255,  30/255,  30/255];\ncolor_white   = [  1.0,     1.0,     1.0];\n\n// Main body module\nmodule smeargle() {\n    union() {\n        color(color_beige)\n        body();\n\n        color(color_brown)\n        ears();\n\n        color(color_brown)\n        tail();\n\n        color(color_brown)\n        arms();\n\n        color(color_brown)\n        legs();\n\n        color(color_green)\n        translate([0, -8, 25])\n        rotate([0, 0, 45])\n        cube([14, 2.5, 18], center = true);\n\n        color(color_red)\n        translate([0, 0, 37])\n        sphere(d = 10);\n\n        color(color_black)\n        eyes();\n    }\n}\n\nmodule body() {\n    // Torso\n    translate([0, 0, 20])\n    scale([1, 0.7, 1.2])\n    sphere(d = 30);\n\n    // Head\n    translate([0, -10, 40])\n    sphere(d = 22);\n\n    // Snout\n    translate([0, -20, 37])\n    scale([0.7, 1.2, 0.7])\n    sphere(d = 12);\n}\n\nmodule ears() {\n    // Left ear\n    translate([-7, -15, 50])\n    rotate([0, 20, -30])\n    scale([0.5, 0.2, 1.6])\n    cylinder(h = 15, d1 = 8, d2 = 6);\n\n    // Right ear\n    translate([7, -15, 50])\n    rotate([0, 20, 30])\n    scale([0.5, 0.2, 1.6])\n    cylinder(h = 15, d1 = 8, d2 = 6);\n}\n\nmodule tail() {\n    // Tail base\n    translate([0, 12, 15])\n    rotate([0, 70, 0])\n    cylinder(h = 30, d1 = 12, d2 = 8);\n\n    // Paintbrush tip\n    translate([0, 30, 5])\n    rotate([0, 70, 0])\n    cylinder(h = 15, d1 = 8, d2 = 4);\n}\n\nmodule arms() {\n    // Left arm\n    translate([-10, 0, 25])\n    rotate([0, 0, 60])\n    scale([0.4, 0.4, 1])\n    cylinder(h = 18, d = 10);\n\n    // Right arm\n    translate([10, 0, 25])\n    rotate([0, 0, -60])\n    scale([0.4, 0.4, 1])\n    cylinder(h = 18, d = 10);\n}\n\nmodule legs() {\n    // Left leg\n    translate([-6, 5, 8])\n    scale([0.5, 0.5, 1])\n    cylinder(h = 15, d = 12);\n\n    // Right leg\n    translate([6, 5, 8])\n    scale([0.5, 0.5, 1])\n    cylinder(h = 15, d = 12);\n\n    // Feet\n    translate([-6, 8, 0])\n    scale([1.2, 2, 0.5])\n    sphere(d = 10);\n\n    translate([6, 8, 0])\n    scale([1.2, 2, 0.5])\n    sphere(d = 10);\n}\n\nmodule eyes() {\n    // Left eye\n    translate([-5, -20, 42])\n    sphere(d = 3);\n\n    // Left pupil\n    translate([-5, -21, 44])\n    sphere(d = 1.5);\n\n    // Right eye\n    translate([5, -20, 42])\n    sphere(d = 3);\n\n    // Right pupil\n    translate([5, -21, 44])\n    sphere(d = 1.5);\n\n    // Mouth\n    translate([0, -25, 37])\n    rotate([90, 0, 0])\n    cylinder(h = 0.5, d1 = 3, d2 = 1);\n}\n\nsmeargle();",
    "renders": true
  },
  {
    "pokemon": "tyrogue",
    "openscad_code": "// Tyrogue Pokemon - Realistic Style\n// Medium complexity OpenSCAD model for 3D printing\n\n$fn = 50;\nscale_factor = 0.8;\n\nmodule body() {\n    color([0.95, 0.95, 0.9]) {\n        // Main torso\n        translate([0, 0, 20]) {\n            scale([1, 0.7, 1.2]) \n            sphere(15 * scale_factor);\n        }\n        \n        // Chest plate\n        translate([0, -5, 15]) {\n            scale([1.2, 0.3, 0.8])\n            cube([20, 25, 20], center = true);\n        }\n    }\n}\n\nmodule head() {\n    color([0.95, 0.95, 0.9]) {\n        // Main head\n        translate([0, 0, 40]) {\n            scale([1.1, 1, 1.2])\n            sphere(12 * scale_factor);\n        }\n        \n        // Jaw\n        translate([0, -8, 35]) {\n            scale([0.8, 0.4, 0.6])\n            sphere(10 * scale_factor);\n        }\n    }\n}\n\nmodule ears() {\n    color([0.95, 0.95, 0.9]) {\n        // Left ear\n        translate([-10, 0, 52]) {\n            rotate([0, -20, -30])\n            scale([0.3, 1.2, 2.5])\n            cylinder(r1 = 8 * scale_factor, r2 = 4 * scale_factor, h = 15 * scale_factor);\n        }\n        \n        // Right ear\n        translate([10, 0, 52]) {\n            rotate([0, -20, 30])\n            scale([0.3, 1.2, 2.5])\n            cylinder(r1 = 8 * scale_factor, r2 = 4 * scale_factor, h = 15 * scale_factor);\n        }\n    }\n}\n\nmodule eyes() {\n    // Left eye\n    color([0.2, 0.2, 0.3]) {\n        translate([-6, -3, 42]) {\n            scale([1.5, 0.8, 0.5])\n            sphere(3 * scale_factor);\n        }\n    }\n    \n    // Right eye\n    color([0.2, 0.2, 0.3]) {\n        translate([6, -3, 42]) {\n            scale([1.5, 0.8, 0.5])\n            sphere(3 * scale_factor);\n        }\n    }\n    \n    // Eyebrows\n    color([0.3, 0.2, 0.1]) {\n        translate([-6, -1, 46]) {\n            rotate([10, 0, -30])\n            scale([0.5, 0.5, 2])\n            cylinder(r = 2 * scale_factor, h = 1 * scale_factor);\n        }\n        \n        translate([6, -1, 46]) {\n            rotate([10, 0, 30])\n            scale([0.5, 0.5, 2])\n            cylinder(r = 2 * scale_factor, h = 1 * scale_factor);\n        }\n    }\n}\n\nmodule arms() {\n    color([0.95, 0.95, 0.9]) {\n        // Left arm\n        translate([-18, -8, 30]) {\n            rotate([0, -20, 0])\n            scale([0.8, 0.8, 1.2])\n            sphere(8 * scale_factor);\n            \n            translate([0, 0, -12]) {\n                scale([0.6, 0.6, 1.8])\n                cylinder(r = 6 * scale_factor, h = 15 * scale_factor);\n            }\n        }\n        \n        // Right arm\n        translate([18, -8, 30]) {\n            rotate([0, 20, 0])\n            scale([0.8, 0.8, 1.2])\n            sphere(8 * scale_factor);\n            \n            translate([0, 0, -12]) {\n                scale([0.6, 0.6, 1.8])\n                cylinder(r = 6 * scale_factor, h = 15 * scale_factor);\n            }\n        }\n    }\n}\n\nmodule legs() {\n    color([0.95, 0.95, 0.9]) {\n        // Left leg\n        translate([-8, 0, 5]) {\n            scale([0.8, 0.8, 1.2])\n            cylinder(r = 7 * scale_factor, h = 15 * scale_factor);\n            \n            translate([0, 0, -10]) {\n                scale([1.2, 1.2, 0.8])\n                sphere(7 * scale_factor);\n            }\n        }\n        \n        // Right leg\n        translate([8, 0, 5]) {\n            scale([0.8, 0.8, 1.2])\n            cylinder(r = 7 * scale_factor, h = 15 * scale_factor);\n            \n            translate([0, 0, -10]) {\n                scale([1.2, 1.2, 0.8])\n                sphere(7 * scale_factor);\n            }\n        }\n    }\n}\n\nmodule tail() {\n    color([0.95, 0.95, 0.9]) {\n        translate([0, -15, 25]) {\n            rotate([20, 0, 0])\n            scale([0.8, 0.8, 1.5])\n            sphere(6 * scale_factor);\n            \n            translate([0, -8, -5]) {\n                scale([0.6, 1, 1.2])\n                cylinder(r = 4 * scale_factor, h = 12 * scale_factor);\n            }\n        }\n    }\n}\n\nmodule markings() {\n    // Purple chest marking\n    color([0.4, 0.2, 0.6]) {\n        translate([0, -5, 20]) {\n            scale([0.3, 0.1, 0.4])\n            cube([20, 30, 25], center = true);\n        }\n    }\n    \n    // Purple stripes on legs\n    color([0.4, 0.2, 0.6]) {\n        translate([-8, 0, 12]) {\n            rotate([0, 0, 0])\n            scale([0.9, 0.9, 0.3])\n            cylinder(r = 7.5 * scale_factor, h = 3 * scale_factor);\n        }\n        \n        translate([8, 0, 12]) {\n            rotate([0, 0, 0])\n            scale([0.9, 0.9, 0.3])\n            cylinder(r = 7.5 * scale_factor, h = 3 * scale_factor);\n        }\n    }\n    \n    // Purple stripes on arms\n    color([0.4, 0.2, 0.6]) {\n        translate([-18, -8, 22]) {\n            rotate([0, -20, 0])\n            scale([0.7, 0.7, 0.3])\n            cylinder(r = 6.5 * scale_factor, h = 3 * scale_factor);\n        }\n        \n        translate([18, -8, 22]) {\n            rotate([0, 20, 0])\n            scale([0.7, 0.7, 0.3])\n            cylinder(r = 6.5 * scale_factor, h = 3 * scale_factor);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    ears();\n    eyes();\n    arms();\n    legs();\n    tail();\n    markings();\n}",
    "renders": true
  },
  {
    "pokemon": "hitmontop",
    "openscad_code": "// Hitmontop OpenSCAD Model - Realistic Style, Medium Complexity\n// Overall height: ~80mm, suitable for 3D printing\n\n// Colors\ntop_blue = [0.2,0.4,0.8];\nbody_red = [0.8,0.2,0.2];\nwhite = [1,1,1];\nblack = [0,0,0];\n\n// Main body module\nmodule hitmontop_body() {\n    // Central torso\n    color(body_red)\n    rotate([90,0,0])\n    cylinder(h=25, d1=20, d2=30, $fn=20);\n    \n    // Lower rounded base\n    color(body_red)\n    translate([0,0,-10])\n    sphere(d=35, $fn=30);\n}\n\n// Spinning top module (head)\nmodule spinning_top() {\n    // Main top section\n    color(top_blue)\n    translate([0,0,25])\n    cylinder(h=20, d=30, $fn=6);\n    \n    // Pointed top\n    color(top_blue)\n    translate([0,0,45])\n    cylinder(h=15, d1=30, d2=5, $fn=6);\n    \n    // Spinning ring detail\n    color(white)\n    translate([0,0,30])\n    cylinder(h=3, d=35, $fn=6);\n}\n\n// Eyes module\nmodule eyes() {\n    // Left eye\n    color(white)\n    translate([-8,15,35])\n    sphere(d=6, $fn=10);\n    \n    color(black)\n    translate([-8,17.5,35])\n    sphere(d=3, $fn=10);\n    \n    // Right eye\n    color(white)\n    translate([8,15,35])\n    sphere(d=6, $fn=10);\n    \n    color(black)\n    translate([8,17.5,35])\n    sphere(d=3, $fn=10);\n    \n    // Eye brow details\n    color(black)\n    translate([-8,12,38])\n    rotate([0,15,0])\n    cube([8,2,2], center=true);\n    \n    color(black)\n    translate([8,12,38])\n    rotate([0,-15,0])\n    cube([8,2,2], center=true);\n}\n\n// Feet module\nmodule feet() {\n    // Left foot\n    color(body_red)\n    translate([-12,-5,-20])\n    rotate([0,-10,0])\n    cylinder(h=8, d=8, $fn=10);\n    \n    // Left foot tip\n    color(body_red)\n    translate([-12,-5,-27])\n    sphere(d=8, $fn=10);\n    \n    // Right foot\n    color(body_red)\n    translate([12,-5,-20])\n    rotate([0,10,0])\n    cylinder(h=8, d=8, $fn=10);\n    \n    // Right foot tip\n    color(body_red)\n    translate([12,-5,-27])\n    sphere(d=8, $fn=10);\n}\n\n// Tail module\nmodule tail() {\n    // Main tail\n    color(body_red)\n    translate([0,-15,-5])\n    rotate([30,0,0])\n    cylinder(h=25, d=8, $fn=10);\n    \n    // Tail tip\n    color(body_red)\n    translate([0,-22,8])\n    sphere(d=10, $fn=10);\n}\n\n// Leg spikes module\nmodule leg_spikes() {\n    // Left spike\n    color(white)\n    translate([-20,-2,-10])\n    rotate([0,0,-30])\n    cylinder(h=12, d=4, $fn=6);\n    \n    // Right spike\n    color(white)\n    translate([20,-2,-10])\n    rotate([0,0,30])\n    cylinder(h=12, d=4, $fn=6);\n}\n\n// Main assembly\nunion() {\n    hitmontop_body();\n    spinning_top();\n    eyes();\n    feet();\n    tail();\n    leg_spikes();\n}\n\n// Ground base for printing stability\ntranslate([0,0,-30])\ncolor([0.8,0.8,0.8])\ncylinder(h=1, d=50, $fn=30);",
    "renders": true
  },
  {
    "pokemon": "smoochum",
    "openscad_code": "// Smoochum Pokemon - Realistic Style with Medium Complexity\n// Designed for 3D printing with no overhangs and proper wall thickness\n\n$fn = 32;\nscale_factor = 0.8;\n\nmodule smoochum_body() {\n    // Main body - light pink\n    color([1, 0.8, 0.9]) {\n        union() {\n            // Torso\n            translate([0, 0, 20]) \n                scale([1.2, 1, 1.2]) \n                sphere(d = 40 * scale_factor);\n            \n            // Lower body\n            translate([0, 0, 5]) \n                cylinder(h = 20 * scale_factor, d1 = 35 * scale_factor, d2 = 30 * scale_factor);\n        }\n    }\n}\n\nmodule smoochum_head() {\n    // Head - light pink\n    color([1, 0.8, 0.9]) {\n        translate([0, 0, 45]) \n            sphere(d = 35 * scale_factor);\n    }\n    \n    // Forehead curl - darker pink\n    color([0.9, 0.6, 0.7]) {\n        translate([0, 10, 48]) \n            rotate([90, 0, 0]) \n            scale([1.2, 0.8, 0.5]) \n            cylinder(h = 15 * scale_factor, d = 20 * scale_factor);\n    }\n}\n\nmodule smoochum_ears() {\n    for(side = [-1, 1]) {\n        // Ear - light pink\n        color([1, 0.8, 0.9]) {\n            translate([side * 12, 0, 55]) \n                rotate([0, side * -20, 0]) \n                scale([0.8, 0.3, 1.5]) \n                sphere(d = 20 * scale_factor);\n        }\n        \n        // Inner ear - darker pink\n        color([0.9, 0.6, 0.7]) {\n            translate([side * 12, 0, 55]) \n                rotate([0, side * -20, 0]) \n                scale([0.5, 0.2, 1]) \n                sphere(d = 15 * scale_factor);\n        }\n    }\n}\n\nmodule smoochum_face() {\n    // Eyes - black with white highlights\n    for(side = [-1, 1]) {\n        color([0, 0, 0]) {\n            translate([side * 8, 10, 45]) \n                sphere(d = 8 * scale_factor);\n        }\n        \n        color([1, 1, 1]) {\n            translate([side * 9, 11, 47]) \n                sphere(d = 3 * scale_factor);\n        }\n    }\n    \n    // Lips - red\n    color([1, 0.2, 0.2]) {\n        translate([0, 18, 42]) \n            scale([1.5, 0.8, 0.5]) \n            sphere(d = 12 * scale_factor);\n    }\n}\n\nmodule smoochum_hair() {\n    // Hair tufts - darker pink\n    color([0.9, 0.6, 0.7]) {\n        for(i = [0:2]) {\n            rotate([0, 0, i * 120]) \n                translate([0, 12, 58]) \n                rotate([30, 0, 0]) \n                cylinder(h = 15 * scale_factor, d1 = 8 * scale_factor, d2 = 2 * scale_factor);\n        }\n    }\n}\n\nmodule smoochum_arms() {\n    for(side = [-1, 1]) {\n        // Arms - light pink\n        color([1, 0.8, 0.9]) {\n            translate([side * 20, 5, 35]) \n                rotate([0, 0, side * -30]) \n                cylinder(h = 25 * scale_factor, d = 8 * scale_factor);\n        }\n        \n        // Hands - light pink\n        color([1, 0.8, 0.9]) {\n            translate([side * 30, 5, 25]) \n                sphere(d = 10 * scale_factor);\n        }\n    }\n}\n\nmodule smoochum_legs() {\n    for(side = [-1, 1]) {\n        // Legs - light pink\n        color([1, 0.8, 0.9]) {\n            translate([side * 8, -5, 5]) \n                cylinder(h = 15 * scale_factor, d = 10 * scale_factor);\n        }\n        \n        // Feet - darker pink\n        color([0.9, 0.6, 0.7]) {\n            translate([side * 8, -5, 0]) \n                rotate([90, 0, 0]) \n                cylinder(h = 12 * scale_factor, d = 15 * scale_factor);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    smoochum_body();\n    smoochum_head();\n    smoochum_ears();\n    smoochum_face();\n    smoochum_hair();\n    smoochum_arms();\n    smoochum_legs();\n}",
    "renders": true
  },
  {
    "pokemon": "elekid",
    "openscad_code": "// Elekid - Electric Pokemon\n// Medium complexity realistic style\n// Total height: 60mm\n\n$fn = 32;\n\n// Main colors\ncolor_yellow = [1, 0.85, 0];\ncolor_black = [0.2, 0.2, 0.2];\ncolor_red = [0.9, 0.2, 0.2];\ncolor_white = [1, 1, 1];\n\n// Scale factor\nscale_factor = 0.6;\n\nmodule elekid() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        \n        // Body (yellow oval)\n        color(color_yellow)\n        translate([0, 0, 30])\n        scale([1.2, 1, 1.5])\n        sphere(d = 40);\n        \n        // Head\n        color(color_yellow)\n        translate([0, 0, 55])\n        scale([1.3, 1.1, 1.1])\n        sphere(d = 35);\n        \n        // Black stripes on head\n        color(color_black)\n        difference() {\n            translate([0, 18, 55])\n            scale([1.35, 0.3, 0.2])\n            sphere(d = 30);\n            \n            translate([0, 0, 0])\n            sphere(d = 50);\n        }\n        \n        // Eyes\n        module eye(x, y, z) {\n            color(color_white)\n            translate([x, y, z])\n            sphere(d = 8);\n            \n            color(color_black)\n            translate([x, y - 2, z + 2])\n            sphere(d = 5);\n        }\n        \n        eye(-10, 18, 55);\n        eye(10, 18, 55);\n        \n        // Mouth\n        color(color_black)\n        translate([0, 25, 45])\n        rotate([90, 0, 0])\n        cylinder(h = 1, d1 = 12, d2 = 8);\n        \n        // Ears\n        module ear(x) {\n            color(color_yellow)\n            translate([x * 18, 5, 65])\n            rotate([x * -15, 0, 0])\n            scale([0.4, 0.3, 1.2])\n            cylinder(h = 25, d1 = 12, d2 = 8);\n            \n            color(color_black)\n            translate([x * 23, 5, 75])\n            rotate([x * -15, 0, 0])\n            scale([0.3, 0.2, 1])\n            cylinder(h = 15, d1 = 8, d2 = 5);\n        }\n        \n        ear(-1);\n        ear(1);\n        \n        // Arms\n        module arm(x) {\n            color(color_yellow)\n            translate([x * 25, 0, 40])\n            rotate([0, 0, x * 20])\n            scale([0.4, 0.4, 1.2])\n            cylinder(h = 20, d = 15);\n            \n            // Hands\n            color(color_yellow)\n            translate([x * 35, 0, 28])\n            sphere(d = 18);\n            \n            // Fingers\n            for(i = [0:2]) {\n                color(color_yellow)\n                translate([x * 38, (i - 1) * 5, 25])\n                rotate([0, x * 20, 0])\n                cylinder(h = 8, d = 4);\n            }\n        }\n        \n        arm(-1);\n        arm(1);\n        \n        // Legs\n        module leg(x) {\n            color(color_yellow)\n            translate([x * 12, 0, 15])\n            scale([0.5, 0.5, 1])\n            cylinder(h = 20, d = 15);\n            \n            // Feet\n            color(color_black)\n            translate([x * 12, 5, 5])\n            scale([1.2, 1.5, 0.8])\n            sphere(d = 15);\n        }\n        \n        leg(-1);\n        leg(1);\n        \n        // Tail (lightning bolt shape)\n        color(color_yellow)\n        translate([-25, -5, 25])\n        rotate([0, 0, 45])\n        linear_extrude(height = 5)\n        polygon(points=[\n            [0, 0], [5, 10], [2, 10], [7, 20], [4, 20], [10, 35],\n            [0, 25], [3, 25], [-2, 15], [1, 15], [-5, 0]\n        ]);\n        \n        // Belly pattern\n        color(color_black)\n        difference() {\n            translate([0, -20, 45])\n            scale([1, 0.8, 1])\n            sphere(d = 20);\n            \n            translate([0, -25, 45])\n            scale([0.8, 0.6, 1.1])\n            sphere(d = 20);\n        }\n        \n        // Antennae\n        color(color_yellow)\n        translate([0, 0, 75])\n        cylinder(h = 8, d = 4);\n        \n        color(color_red)\n        translate([0, 0, 83])\n        sphere(d = 6);\n    }\n}\n\nelekid();",
    "renders": true
  },
  {
    "pokemon": "magby",
    "openscad_code": "// Magby Pokemon - Realistic Style, Medium Complexity\n// Scale: ~60mm tall when printed\n\n// Main colors\n$fa = 2;\n$fs = 0.5;\n\nmodule magby() {\n    // Main body - red-orange\n    color([0.9, 0.3, 0.1]) {\n        // Torso\n        translate([0, 0, 15]) {\n            scale([0.8, 0.7, 1]) sphere(d=30);\n        }\n        \n        // Belly\n        translate([0, 0, 15]) {\n            scale([0.6, 0.5, 0.8]) sphere(d=25);\n        }\n    }\n    \n    // Head\n    color([0.9, 0.3, 0.1]) {\n        translate([0, 0, 35]) {\n            sphere(d=28);\n        }\n    }\n    \n    // Snout\n    color([0.9, 0.3, 0.1]) {\n        translate([0, 12, 32]) {\n            rotate([30, 0, 0]) \n            scale([0.8, 0.7, 0.6]) sphere(d=18);\n        }\n    }\n    \n    // Flame on head\n    color([1, 0.8, 0]) {\n        translate([0, -5, 45]) {\n            rotate([0, 0, 15])\n            cylinder(h1=15, h2=0, r1=5, r2=8, $fn=8);\n        }\n    }\n    \n    // Eyes\n    for(side = [-1, 1]) {\n        // Eye sclera\n        color([1, 1, 1]) {\n            translate([side * 7, 12, 35]) {\n                sphere(d=8);\n            }\n        }\n        \n        // Pupil\n        color([0, 0, 0]) {\n            translate([side * 7.5, 12.5, 37]) {\n                sphere(d=4);\n            }\n        }\n    }\n    \n    // Arms\n    for(side = [-1, 1]) {\n        color([0.9, 0.3, 0.1]) {\n            // Upper arm\n            translate([side * 15, 0, 25]) {\n                rotate([0, 0, side * 30])\n                cylinder(h=15, r=5, $fn=8);\n            }\n            \n            // Hand\n            translate([side * 20, 0, 15]) {\n                sphere(d=10);\n            }\n        }\n        \n        // Yellow stripes on arms\n        color([1, 0.9, 0]) {\n            translate([side * 15, 0, 22]) {\n                rotate([0, 0, side * 30])\n                cylinder(h=3, r=5.5, $fn=8);\n            }\n        }\n    }\n    \n    // Legs\n    for(side = [-1, 1]) {\n        color([0.9, 0.3, 0.1]) {\n            // Upper leg\n            translate([side * 8, 0, 8]) {\n                cylinder(h=12, r=6, $fn=8);\n            }\n            \n            // Foot\n            translate([side * 8, 0, 0]) {\n                scale([1.2, 1.5, 0.8]) sphere(d=12);\n            }\n        }\n        \n        // Yellow stripes on legs\n        color([1, 0.9, 0]) {\n            translate([side * 8, 0, 5]) {\n                cylinder(h=3, r=6.5, $fn=8);\n            }\n        }\n    }\n    \n    // Tail\n    color([0.9, 0.3, 0.1]) {\n        translate([0, -15, 20]) {\n            rotate([0, 45, 0])\n            cylinder(h=25, r1=6, r2=4, $fn=8);\n        }\n    }\n    \n    // Tail flame\n    color([1, 0.8, 0]) {\n        translate([0, -35, 10]) {\n            rotate([0, 90, 0])\n            cylinder(h1=12, h2=0, r1=6, r2=8, $fn=8);\n        }\n    }\n    \n    // Yellow belly marking\n    color([1, 0.9, 0]) {\n        translate([0, 0, 15]) {\n            scale([0.5, 0.4, 0.1]) sphere(d=30);\n        }\n    }\n    \n    // Mouth\n    color([0.2, 0.1, 0.1]) {\n        translate([0, 15, 30]) {\n            rotate([20, 0, 0])\n            scale([0.8, 0.3, 0.3]) sphere(d=8);\n        }\n    }\n}\n\n// Render the magby\nmagby();",
    "renders": true
  },
  {
    "pokemon": "miltank",
    "openscad_code": "// Miltank OpenSCAD Model - Medium Complexity Realistic Style\n// Approximate size: 80mm length, 50mm height, 40mm width\n\n// Main colors\n$fa = 2;\n$fs = 0.5;\n\nmodule miltank() {\n    // Body - pink cow body with realistic proportions\n    color(\"#FFB6C1\") {\n        // Main body sphere slightly flattened\n        scale([1.3, 1, 1.1]) \n            sphere(r=20);\n        \n        // Belly bulge\n        translate([0, -15, -15])\n            scale([1.1, 0.8, 0.6])\n                sphere(r=18);\n    }\n    \n    // Head\n    color(\"#FFB6C1\") {\n        translate([-25, 0, 5])\n            scale([1.2, 1.1, 1.1])\n                sphere(r=15);\n    }\n    \n    // Muzzle\n    color(\"#FFDAB9\") {\n        translate([-40, 0, -5])\n            scale([1.3, 0.9, 0.8])\n                sphere(r=10);\n    }\n    \n    // Ears - floppy cow ears\n    module ear(side) {\n        translate([-20, side*12, 15])\n            rotate([0, 20*side, -20])\n                scale([0.3, 1.2, 0.8])\n                    sphere(r=8);\n    }\n    \n    color(\"#FFB6C1\") {\n        ear(1);\n        ear(-1);\n    }\n    \n    // Horns - small pink horns\n    module horn(side) {\n        color(\"#FF69B4\") {\n            translate([-15, side*8, 20])\n                rotate([0, -10, 0])\n                    cylinder(h=10, r1=3, r2=1);\n        }\n    }\n    \n    horn(1);\n    horn(-1);\n    \n    // Eyes\n    module eye() {\n        color(\"#000000\") {\n            translate([-42, 8, 8])\n                sphere(r=2.5);\n            translate([-42, -8, 8])\n                sphere(r=2.5);\n        }\n        \n        // Eye shine\n        color(\"#FFFFFF\") {\n            translate([-43, 8.5, 9])\n                sphere(r=0.8);\n            translate([-43, -7.5, 9])\n                sphere(r=0.8);\n        }\n    }\n    \n    eye();\n    \n    // Nose - pink nose with nostrils\n    color(\"#FF1493\") {\n        translate([-45, 0, -5])\n            scale([1, 0.7, 0.5])\n                sphere(r=5);\n        \n        // Nostrils\n        color(\"#000000\") {\n            translate([-47, 3, -4])\n                sphere(r=1);\n            translate([-47, -3, -4])\n                sphere(r=1);\n        }\n    }\n    \n    // Legs - sturdy cow legs\n    module leg(pos_x, pos_y) {\n        color(\"#FFB6C1\") {\n            translate([pos_x, pos_y, -20])\n                cylinder(h=25, r=6, $fn=8);\n            \n            // Hooves\n            color(\"#4A4A4A\") {\n                translate([pos_x, pos_y, -32.5])\n                    cylinder(h=5, r1=6, r2=5, $fn=8);\n            }\n        }\n    }\n    \n    // Position legs at corners\n    leg(15, 15);\n    leg(15, -15);\n    leg(-15, 15);\n    leg(-15, -15);\n    \n    // Udder - pink udder with 4 teats\n    color(\"#FF69B4\") {\n        translate([0, 0, -20])\n            scale([1, 0.8, 1.2])\n                sphere(r=10);\n        \n        // Teats\n        for(i=[-1, 1]) {\n            for(j=[-1, 1]) {\n                translate([i*4, j*4, -30])\n                    cylinder(h=8, r=2, $fn=8);\n            }\n        }\n    }\n    \n    // Tail\n    color(\"#FFB6C1\") {\n        translate([25, 0, 10])\n            rotate([0, 0, 30])\n                cylinder(h=20, r=3, $fn=8);\n        \n        // Tail tuft\n        color(\"#FF1493\") {\n            translate([35, 10, 15])\n                sphere(r=5);\n        }\n    }\n    \n    // Black patches - Miltank's distinctive markings\n    color(\"#2F2F2F\") {\n        // Back patch\n        translate([0, 0, 18])\n            scale([1.5, 1, 0.3])\n                sphere(r=15);\n        \n        // Side patches\n        translate([5, 15, 0])\n            rotate([0, 90, 0])\n                scale([1, 0.7, 1])\n                    cylinder(h=20, r=8);\n        \n        translate([5, -15, 0])\n            rotate([0, 90, 0])\n                scale([1, 0.7, 1])\n                    cylinder(h=20, r=8);\n        \n        // Face patch\n        translate([-35, 0, 5])\n            scale([0.8, 1.2, 0.5])\n                sphere(r=10);\n        \n        // Eye patches\n        translate([-35, 12, 8])\n            scale([0.5, 0.8, 0.4])\n                sphere(r=8);\n        \n        translate([-35, -12, 8])\n            scale([0.5, 0.8, 0.4])\n                sphere(r=8);\n    }\n}\n\n// Generate the complete model\nmiltank();",
    "renders": true
  },
  {
    "pokemon": "blissey",
    "openscad_code": "// Blissey Pokemon - Medium Complexity Realistic Style\n// Designed for 3D printing at ~80mm height\n\n// Main colors\n$blissey_pink = [1, 0.7, 0.8];\n$blissey_egg = [1, 1, 0.9];\n$blissey_dark = [0.8, 0.5, 0.6];\n$blissey_eye = [0.1, 0.1, 0.1];\n\n// Overall scale\nscale(0.8) {\n\n    // Main body\n    color($blissey_pink) {\n        union() {\n            // Egg-shaped body with slight flattening\n            scale([1, 0.9, 1.1]) sphere(d=60, $fn=50);\n            \n            // Lower belly bulge\n            translate([0, -5, -20])\n                scale([0.8, 0.7, 0.4]) sphere(d=50, $fn=30);\n        }\n    }\n\n    // Head section\n    color($blissey_pink) {\n        translate([0, 12, 28])\n            rotate([20, 0, 0])\n            scale([0.8, 0.9, 0.7]) sphere(d=35, $fn=30);\n    }\n\n    // Egg pouch\n    color($blissey_egg) {\n        translate([0, -8, 5])\n            scale([0.6, 0.4, 0.5]) sphere(d=30, $fn=25);\n    }\n\n    // Ears - curled tubes\n    module ear(angle, side) {\n        rotate([0, 0, side * 30]) {\n            translate([side * 25, 15, 35])\n                rotate([0, -20, 0])\n                rotate_extrude(angle=90, $fn=20)\n                    translate([8, 0, 0])\n                        circle(d=6, $fn=12);\n            \n            // Ear tip\n            translate([side * 32, 18, 32])\n                rotate([0, -20, 0])\n                sphere(d=8, $fn=12);\n        }\n    }\n    \n    ear(0, 1);\n    ear(0, -1);\n\n    // Arms - simple cylinders\n    module arm(side) {\n        color($blissey_pink) {\n            translate([side * 20, -5, 5]) {\n                rotate([0, 0, side * -20])\n                cylinder(h=25, d=8, $fn=12);\n                \n                // Hand - small sphere\n                translate([0, 0, 25])\n                    sphere(d=10, $fn=12);\n            }\n        }\n    }\n    \n    arm(1);\n    arm(-1);\n\n    // Legs - tapered cylinders\n    module leg(side) {\n        color($blissey_pink) {\n            translate([side * 15, -8, -25]) {\n                cylinder(h1=15, h2=12, d1=12, d2=15, $fn=12);\n                \n                // Feet - flattened spheres\n                translate([0, 0, -8])\n                    scale([1, 1.2, 0.5]) sphere(d=18, $fn=15);\n            }\n        }\n    }\n    \n    leg(1);\n    leg(-1);\n\n    // Wings - simple curved planes\n    color($blissey_pink) {\n        translate([0, -25, 10]) {\n            rotate([0, 90, 0])\n            difference() {\n                scale([1, 0.8, 1]) sphere(d=30, $fn=20);\n                translate([0, 0, -1]) cube([40, 30, 2], center=true);\n            }\n        }\n    }\n\n    // Eyes\n    module eye(side) {\n        color($blissey_eye) {\n            translate([side * 8, 18, 32])\n                sphere(d=3, $fn=12);\n        }\n        \n        // Eyelid detail\n        color($blissey_dark) {\n            translate([side * 8, 16, 32])\n                rotate([30, 0, 0])\n                scale([1, 0.3, 1]) sphere(d=4, $fn=8);\n        }\n    }\n    \n    eye(1);\n    eye(-1);\n\n    // Mouth\n    color($blissey_dark) {\n        translate([0, 15, 25])\n            rotate([90, 0, 0])\n            scale([1, 0.5, 1])\n            cylinder(h=1, d=8, $fn=12);\n    }\n\n    // Hair curls\n    color($blissey_pink) {\n        for(i=[0:120:360]) {\n            rotate([0, 0, i])\n            translate([0, 12, 35])\n                rotate_extrude(angle=180, $fn=8)\n                    translate([5, 0, 0])\n                        circle(d=4, $fn=8);\n        }\n    }\n\n    // Tail - simple curved tube\n    color($blissey_pink) {\n        translate([0, -25, -5])\n            rotate([90, 0, 0])\n            rotate_extrude(angle=120, $fn=12)\n                translate([10, 0, 0])\n                    circle(d=6, $fn=8);\n    }\n\n    // Belly marking\n    color($blissey_egg) {\n        translate([0, -10, 0])\n            scale([0.4, 0.3, 0.01])\n            sphere(d=60, $fn=30);\n    }\n}",
    "renders": true
  },
  {
    "pokemon": "raikou",
    "openscad_code": "// Raikou Pokemon - Realistic Style, Medium Complexity\n// Designed for 3D printing with 50mm height\n\n$fn = 32;\nmodule raikou() {\n    // Main body - purple base\n    color([0.4, 0.2, 0.8]) {\n        // Torso\n        translate([0, 0, 15]) {\n            scale([1.2, 0.8, 1]) sphere(10);\n        }\n        \n        // Chest armor\n        translate([0, 0, 10]) {\n            difference() {\n                scale([1.5, 1.2, 0.5]) sphere(8);\n                translate([0, 0, -5]) cube([30, 30, 10], center=true);\n            }\n        }\n    }\n    \n    // Head\n    color([0.4, 0.2, 0.8]) {\n        translate([0, 15, 25]) {\n            scale([0.8, 1.2, 0.9]) sphere(8);\n        }\n    }\n    \n    // Mane - golden yellow\n    color([0.9, 0.7, 0.1]) {\n        // Main mane\n        translate([0, 10, 30]) {\n            rotate([0, 10, 0]) {\n                for(i = [0:10:60]) {\n                    rotate([0, 0, i-30]) {\n                        translate([0, 0, 0]) \n                            scale([0.4, 1, 0.1]) \n                                cylinder(h=15, r1=3, r2=1);\n                    }\n                }\n            }\n        }\n        \n        // Side mane pieces\n        translate([8, 15, 27]) rotate([0, 0, 30]) \n            scale([0.3, 1, 0.1]) cylinder(h=10, r1=2, r2=1);\n        translate([-8, 15, 27]) rotate([0, 0, -30]) \n            scale([0.3, 1, 0.1]) cylinder(h=10, r1=2, r2=1);\n    }\n    \n    // Ears - purple\n    color([0.4, 0.2, 0.8]) {\n        translate([5, 20, 32]) rotate([0, -20, 30]) \n            scale([0.3, 0.2, 1.5]) cube([5, 5, 8], center=true);\n        translate([-5, 20, 32]) rotate([0, -20, -30]) \n            scale([0.3, 0.2, 1.5]) cube([5, 5, 8], center=true);\n    }\n    \n    // Face details\n    color([1, 1, 0]) {\n        // Eyes\n        translate([3, 20, 28]) sphere(1.5);\n        translate([-3, 20, 28]) sphere(1.5);\n        \n        // Nose\n        translate([0, 22, 26]) sphere(1);\n    }\n    \n    // Legs\n    color([0.4, 0.2, 0.8]) {\n        // Front legs\n        translate([7, 5, 15]) rotate([0, 10, 0]) \n            cylinder(h=15, r1=3, r2=2);\n        translate([-7, 5, 15]) rotate([0, 10, 0]) \n            cylinder(h=15, r1=3, r2=2);\n        \n        // Back legs\n        translate([7, -5, 15]) rotate([0, -10, 0]) \n            cylinder(h=15, r1=3, r2=2);\n        translate([-7, -5, 15]) rotate([0, -10, 0]) \n            cylinder(h=15, r1=3, r2=2);\n    }\n    \n    // Feet - black\n    color([0.1, 0.1, 0.1]) {\n        translate([7, 5, 0]) sphere(2.5);\n        translate([-7, 5, 0]) sphere(2.5);\n        translate([7, -5, 0]) sphere(2.5);\n        translate([-7, -5, 0]) sphere(2.5);\n    }\n    \n    // Tail - purple with yellow stripes\n    color([0.4, 0.2, 0.8]) {\n        translate([0, -15, 20]) {\n            rotate([20, 0, 0]) {\n                cylinder(h=20, r1=4, r2=2);\n                \n                // Tail segments\n                for(i = [0:5:20]) {\n                    translate([0, 0, i]) {\n                        color([0.9, 0.7, 0.1]) \n                            scale([1.1, 1.1, 0.5]) cylinder(h=1, r=4.5);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Lightning bolt details - yellow\n    color([0.9, 0.7, 0.1]) {\n        // Chest bolt\n        translate([0, 12, 18]) {\n            rotate([0, 90, 0]) {\n                difference() {\n                    scale([0.3, 1, 0.2]) cube([10, 15, 5], center=true);\n                    translate([0, 5, 0]) cube([8, 5, 6], center=true);\n                    translate([0, -5, 0]) cube([8, 5, 6], center=true);\n                }\n            }\n        }\n        \n        // Front leg bolts\n        translate([7, 8, 10]) rotate([0, 0, 45]) \n            scale([0.2, 0.8, 0.1]) cube([5, 8, 2], center=true);\n        translate([-7, 8, 10]) rotate([0, 0, -45]) \n            scale([0.2, 0.8, 0.1]) cube([5, 8, 2], center=true);\n    }\n    \n    // Back spikes\n    color([0.9, 0.7, 0.1]) {\n        translate([0, -5, 30]) {\n            for(i = [0:3]) {\n                rotate([0, 0, i*10-15]) {\n                    translate([0, -i*2, 0]) {\n                        scale([0.5, 0.5, 1]) cylinder(h=3, r=1.5);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Scale to 50mm height\nscale([0.8, 0.8, 0.8]) raikou();",
    "renders": true
  },
  {
    "pokemon": "entei",
    "openscad_code": "// Realistic Entei OpenSCAD Model - Medium Complexity\n// Approximate size: 80mm height\n\n// Color definitions\n$fa = 8;\n$fs = 0.4;\n\nmodule entei() {\n    // Main body - brown/grey\n    color([0.5, 0.3, 0.15]) {\n        union() {\n            // Torso\n            translate([0, 0, 25]) \n                scale([1.2, 0.8, 1.5]) \n                    sphere(r=15);\n            \n            // Chest plate\n            translate([0, -5, 20])\n                cube([30, 8, 20], center=true);\n            \n            // Back ridge\n            for(i=[-1:1]) {\n                translate([i*8, 0, 40])\n                    cylinder(h=20, r1=5, r2=2);\n            }\n        }\n    }\n    \n    // Head\n    color([0.5, 0.3, 0.15]) {\n        translate([0, -25, 45])\n            scale([1, 1.2, 1.1]) \n                sphere(r=12);\n    }\n    \n    // Mane - yellow/orange\n    color([0.9, 0.7, 0.1]) {\n        translate([0, -30, 55])\n            sphere(r=15);\n        for(i=[-1:1]) {\n            translate([i*10, -28, 52])\n                scale([0.8, 0.8, 1.5])\n                    sphere(r=6);\n        }\n    }\n    \n    // Face details\n    color([0.8, 0.2, 0.1]) {\n        // Eyes\n        translate([-7, -35, 48])\n            sphere(r=3);\n        translate([7, -35, 48])\n            sphere(r=3);\n        \n        // Muzzle\n        translate([0, -38, 42])\n            scale([1.2, 1.5, 0.8])\n                sphere(r=8);\n    }\n    \n    // Ears\n    color([0.5, 0.3, 0.15]) {\n        // Left ear\n        translate([-12, -20, 60])\n            rotate([0, 0, -20])\n                cylinder(h=20, r1=5, r2=2);\n        \n        // Right ear\n        translate([12, -20, 60])\n            rotate([0, 0, 20])\n                cylinder(h=20, r1=5, r2=2);\n    }\n    \n    // Legs\n    module leg(x, y, z) {\n        color([0.5, 0.3, 0.15]) {\n            translate([x, y, z])\n                cylinder(h=25, r=6);\n            translate([x, y, 10])\n                sphere(r=7);\n        }\n    }\n    \n    // Front legs\n    leg(-15, -10, 20);\n    leg(15, -10, 20);\n    \n    // Back legs\n    leg(-12, 15, 20);\n    leg(12, 15, 20);\n    \n    // Tail - yellow/orange\n    color([0.9, 0.7, 0.1]) {\n        translate([0, 25, 35])\n            rotate([20, 0, 0])\n                cylinder(h=30, r1=8, r2=4);\n    }\n    \n    // Smoke details on tail\n    color([0.6, 0.6, 0.6]) {\n        for(i=[0:2]) {\n            translate([0, 25 + i*8, 35 + i*5])\n                sphere(r=4 - i);\n        }\n    }\n    \n    // Chest armor\n    color([0.7, 0.5, 0.3]) {\n        translate([0, -10, 25])\n            cube([35, 15, 5], center=true);\n    }\n    \n    // Paw details\n    color([0.3, 0.2, 0.1]) {\n        for(x=[-15, 15]) {\n            for(y=[-10, 15]) {\n                translate([x, y, 5])\n                    sphere(r=4);\n            }\n        }\n    }\n}\n\n// Scale to 80mm height\nscale(0.8)\n    entei();",
    "renders": true
  },
  {
    "pokemon": "suicune",
    "openscad_code": "// Suicune 3D printable model\n// Medium complexity realistic style\n\n$fn = 30;\n\n// Main scale factor\nscale_factor = 0.5;\n\n// Body color - light blue\nbody_color = [0.6, 0.8, 1.0];\n// Darker blue accents\naccent_color = [0.3, 0.5, 0.8];\n// Purple crystal color\ncrystal_color = [0.6, 0.4, 0.9];\n// White accents\nwhite_color = [0.95, 0.95, 0.95];\n\nmodule suicune() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        // Main body\n        color(body_color) {\n            // Torso\n            translate([0, 0, 10]) {\n                scale([1.2, 1.5, 1.8]) sphere(10);\n            }\n            \n            // Neck\n            translate([0, -5, 25]) {\n                rotate([0, 15, 0]) {\n                    scale([0.6, 0.6, 1.2]) cylinder(h=15, r1=5, r2=4);\n                }\n            }\n            \n            // Head\n            translate([0, -15, 32]) {\n                scale([0.8, 1, 1.1]) sphere(8);\n            }\n        }\n        \n        // Snout\n        color(body_color) {\n            translate([0, -25, 30]) {\n                rotate([0, -20, 0]) {\n                    scale([0.7, 1.5, 0.8]) cylinder(h=10, r1=6, r2=4);\n                }\n            }\n        }\n        \n        // Ears\n        color(body_color) {\n            // Left ear\n            translate([-6, -18, 38]) {\n                rotate([0, -30, -20]) {\n                    scale([0.3, 0.1, 1.5]) cylinder(h=12, r1=3, r2=0.5);\n                }\n            }\n            \n            // Right ear\n            translate([6, -18, 38]) {\n                rotate([0, -30, 20]) {\n                    scale([0.3, 0.1, 1.5]) cylinder(h=12, r1=3, r2=0.5);\n                }\n            }\n        }\n        \n        // Legs\n        color(body_color) {\n            // Front left leg\n            translate([-8, -5, 5]) {\n                cylinder(h=15, r1=4, r2=3);\n            }\n            \n            // Front right leg\n            translate([8, -5, 5]) {\n                cylinder(h=15, r1=4, r2=3);\n            }\n            \n            // Back left leg\n            translate([-8, 15, 5]) {\n                cylinder(h=15, r1=4, r2=3);\n            }\n            \n            // Back right leg\n            translate([8, 15, 5]) {\n                cylinder(h=15, r1=4, r2=3);\n            }\n        }\n        \n        // Paws\n        color(body_color) {\n            for(x = [-8, 8])\n            for(y = [-5, 15]) {\n                translate([x, y, -2]) {\n                    scale([1.2, 1.5, 0.5]) sphere(3);\n                }\n            }\n        }\n        \n        // Tail\n        color(body_color) {\n            translate([0, 25, 12]) {\n                rotate([0, -10, 0]) {\n                    scale([1, 3, 0.3]) sphere(8);\n                }\n            }\n            \n            // Tail extension\n            translate([0, 35, 10]) {\n                rotate([0, -20, 0]) {\n                    scale([0.8, 2, 0.2]) sphere(6);\n                }\n            }\n        }\n        \n        // Purple crystal on head\n        color(crystal_color) {\n            translate([0, -15, 38]) {\n                scale([1, 1, 0.5]) sphere(3);\n            }\n        }\n        \n        // Dark blue markings\n        color(accent_color) {\n            // Back ridges\n            for(i = [-10:5:10]) {\n                translate([i*0.8, 0, 18 + i]) {\n                    scale([0.8, 0.3, 0.5]) sphere(3);\n                }\n            }\n            \n            // Side markings\n            // Left side\n            translate([-10, 5, 15]) {\n                scale([0.5, 2, 0.3]) sphere(4);\n            }\n            \n            // Right side\n            translate([10, 5, 15]) {\n                scale([0.5, 2, 0.3]) sphere(4);\n            }\n        }\n        \n        // Face details\n        // Eyes\n        color([0, 0, 0]) {\n            // Left eye\n            translate([-3, -22, 34]) {\n                scale([1, 1.2, 0.5]) sphere(1.5);\n            }\n            \n            // Right eye\n            translate([3, -22, 34]) {\n                scale([1, 1.2, 0.5]) sphere(1.5);\n            }\n        }\n        \n        // White diamond pattern on face\n        color(white_color) {\n            translate([0, -20, 32]) {\n                scale([1.5, 1, 0.3]) sphere(2);\n            }\n        }\n        \n        // Streamers\n        color(white_color) {\n            // Left streamer\n            translate([-12, 15, 20]) {\n                rotate([0, 0, -30]) {\n                    scale([0.2, 3, 0.3]) cylinder(h=20, r1=2, r2=1);\n                }\n            }\n            \n            // Right streamer\n            translate([12, 15, 20]) {\n                rotate([0, 0, 30]) {\n                    scale([0.2, 3, 0.3]) cylinder(h=20, r1=2, r2=1);\n                }\n            }\n        }\n    }\n}\n\n// Generate the model\nsuicune();",
    "renders": true
  },
  {
    "pokemon": "larvitar",
    "openscad_code": "// Larvitar Pokemon - Realistic Style, Medium Complexity\n// Dimensions: ~80mm tall\n\n// Colors\nskin_color = \"#5A9F4A\";\nbelly_color = \"#A8C090\";\nspike_color = \"#708090\";\neye_color = \"#FF0000\";\n\n// Main body module\nmodule larvitar() {\n    // Central body\n    color(skin_color) {\n        union() {\n            // Main torso\n            translate([0, 0, 30])\n                scale([1, 1.2, 1.3])\n                sphere(d=40, $fn=32);\n            \n            // Lower body\n            translate([0, 0, 15])\n                scale([0.9, 1, 1.2])\n                sphere(d=35, $fn=32);\n        }\n    }\n    \n    // Belly\n    color(belly_color) {\n        translate([0, -15, 20])\n            scale([0.7, 0.3, 1])\n            sphere(d=30, $fn=32);\n    }\n    \n    // Head\n    color(skin_color) {\n        translate([0, 0, 50])\n            scale([0.9, 0.8, 1])\n            sphere(d=35, $fn=32);\n    }\n    \n    // Snout\n    color(skin_color) {\n        translate([0, 12, 48])\n            scale([0.6, 0.8, 0.6])\n            sphere(d=25, $fn=32);\n    }\n    \n    // Eyes\n    color(eye_color) {\n        // Left eye\n        translate([-8, 8, 56])\n            scale([1, 1, 0.8])\n            sphere(d=8, $fn=16);\n        \n        // Right eye\n        translate([8, 8, 56])\n            scale([1, 1, 0.8])\n            sphere(d=8, $fn=16);\n    }\n    \n    // Eye pupils\n    color(\"black\") {\n        translate([-8, 8, 59])\n            sphere(d=4, $fn=8);\n        \n        translate([8, 8, 59])\n            sphere(d=4, $fn=8);\n    }\n    \n    // Mouth\n    color(\"black\") {\n        translate([0, 16, 48])\n            rotate([90, 0, 0])\n            cylinder(h=1, d1=10, d2=6, $fn=16);\n    }\n    \n    // Horns\n    color(spike_color) {\n        // Left horn\n        translate([-10, -5, 65])\n            rotate([-30, 0, -20])\n            cylinder(h=15, d1=8, d2=4, $fn=8);\n        \n        // Right horn\n        translate([10, -5, 65])\n            rotate([-30, 0, 20])\n            cylinder(h=15, d1=8, d2=4, $fn=8);\n    }\n    \n    // Back spikes\n    color(spike_color) {\n        for(i = [0:2]) {\n            translate([0, -8 + i*5, 55 - i*8])\n                rotate([30 + i*10, 0, 0])\n                cylinder(h=10 - i*2, d1=6 - i, d2=2, $fn=6);\n        }\n    }\n    \n    // Side spikes\n    color(spike_color) {\n        // Left side\n        translate([-22, 0, 40])\n            rotate([0, 0, 30])\n            cylinder(h=12, d1=6, d2=2, $fn=6);\n        \n        // Right side\n        translate([22, 0, 40])\n            rotate([0, 0, -30])\n            cylinder(h=12, d1=6, d2=2, $fn=6);\n    }\n    \n    // Arms\n    color(skin_color) {\n        // Left arm\n        translate([-25, 0, 35])\n            rotate([0, 0, 30])\n            scale([1, 0.8, 0.8])\n            sphere(d=15, $fn=16);\n        \n        // Right arm\n        translate([25, 0, 35])\n            rotate([0, 0, -30])\n            scale([1, 0.8, 0.8])\n            sphere(d=15, $fn=16);\n    }\n    \n    // Hands\n    color(skin_color) {\n        // Left hand\n        translate([-35, 0, 30])\n            scale([0.6, 0.6, 0.5])\n            sphere(d=12, $fn=16);\n        \n        // Right hand\n        translate([35, 0, 30])\n            scale([0.6, 0.6, 0.5])\n            sphere(d=12, $fn=16);\n    }\n    \n    // Legs\n    color(skin_color) {\n        // Left leg\n        translate([-15, 0, 10])\n            scale([0.8, 0.8, 1])\n            sphere(d=18, $fn=16);\n        \n        // Right leg\n        translate([15, 0, 10])\n            scale([0.8, 0.8, 1])\n            sphere(d=18, $fn=16);\n    }\n    \n    // Feet\n    color(skin_color) {\n        // Left foot\n        translate([-18, 5, 0])\n            scale([1.2, 1.5, 0.8])\n            sphere(d=15, $fn=16);\n        \n        // Right foot\n        translate([18, 5, 0])\n            scale([1.2, 1.5, 0.8])\n            sphere(d=15, $fn=16);\n    }\n    \n    // Tail\n    color(skin_color) {\n        translate([0, -25, 25])\n            rotate([20, 0, 0])\n            scale([0.8, 1.5, 0.8])\n            sphere(d=20, $fn=16);\n    }\n    \n    // Tail spike\n    color(spike_color) {\n        translate([0, -35, 15])\n            rotate([30, 0, 0])\n            cylinder(h=12, d1=6, d2=2, $fn=6);\n    }\n}\n\n// Generate the model\nlarvitar();",
    "renders": true
  },
  {
    "pokemon": "pupitar",
    "openscad_code": "// Scale factor to make the model ~80mm tall\nscale_factor = 0.8;\n\n$fn = 36;\n\nmodule pupitar() {\n    // Main shell with slight taper\n    color(\"gray\")\n    difference() {\n        union() {\n            // Central body\n            cylinder(h = 90 * scale_factor, r1 = 35 * scale_factor, r2 = 40 * scale_factor, center = true);\n            \n            // Add slight bulge for shell thickness\n            translate([0, 0, 0])\n                sphere(37 * scale_factor);\n        }\n        \n        // Hollow out the inside\n        cylinder(h = 92 * scale_factor, r1 = 30 * scale_factor, r2 = 35 * scale_factor, center = true);\n    }\n    \n    // Head plate section\n    color(\"gray\")\n    translate([0, 0, 40 * scale_factor])\n        scale([1, 1.2, 0.4])\n            sphere(38 * scale_factor);\n    \n    // Eye holes\n    color(\"red\")\n    for (x = [-15, 15]) {\n        translate([x * scale_factor, 25 * scale_factor, 30 * scale_factor])\n            rotate([0, 90, 0])\n                cylinder(h = 5 * scale_factor, r = 8 * scale_factor, center = true);\n    }\n    \n    // Spike details\n    color(\"gray\")\n    for (angle = [0:45:315]) {\n        rotate([0, 0, angle])\n            translate([35 * scale_factor, 0, 20 * scale_factor])\n                scale([1, 0.6, 1])\n                    cylinder(h = 12 * scale_factor, r1 = 8 * scale_factor, r2 = 0);\n    }\n    \n    // Side spikes\n    for (angle = [30:120:240]) {\n        rotate([0, 0, angle])\n            translate([0, 38 * scale_factor, 10 * scale_factor])\n                scale([0.6, 1, 1])\n                    cylinder(h = 15 * scale_factor, r1 = 7 * scale_factor, r2 = 0);\n    }\n    \n    // Back spikes\n    color(\"gray\")\n    for (angle = [0:60:300]) {\n        rotate([0, 0, angle])\n            translate([0, -38 * scale_factor, 10 * scale_factor])\n                scale([0.6, 1, 1])\n                    cylinder(h = 15 * scale_factor, r1 = 7 * scale_factor, r2 = 0);\n    }\n    \n    // Bottom vent\n    color(\"darkgray\")\n    translate([0, 0, -45 * scale_factor])\n        cylinder(h = 5 * scale_factor, r = 25 * scale_factor);\n    \n    // Shell cracks\n    color(\"black\")\n    for (i = [1:4]) {\n        rotate([0, 0, i * 90])\n            translate([0, 0, 0])\n                scale([1, 0.8, 1])\n                    rotate([90, 0, 0])\n                        linear_extrude(height = 2 * scale_factor)\n                            polygon(points = [[30, -5], [35, 0], [30, 5]]);\n    }\n    \n    // Top horn\n    color(\"gray\")\n    translate([0, 0, 55 * scale_factor])\n        rotate([0, 0, 0])\n            cylinder(h = 20 * scale_factor, r1 = 5 * scale_factor, r2 = 0);\n    \n    // Secondary horns\n    for (x = [-20, 20]) {\n        color(\"gray\")\n        translate([x * scale_factor, 5 * scale_factor, 45 * scale_factor])\n            rotate([0, 20 * (x > 0 ? 1 : -1), 0])\n                cylinder(h = 15 * scale_factor, r1 = 4 * scale_factor, r2 = 0);\n    }\n}\n\npupitar();",
    "renders": true
  },
  {
    "pokemon": "tyranitar",
    "openscad_code": "// Tyranitar OpenSCAD Model - Realistic Style, Medium Complexity\n// Scale: 80mm tall when printed\n\nmodule tyranitar() {\n    color([0.2, 0.2, 0.2]) {\n        // Main body\n        union() {\n            // Torso\n            translate([0, 0, 30]) \n                scale([1.2, 0.8, 1.5]) \n                    sphere(d=40, $fn=32);\n            \n            // Abdomen\n            translate([0, 0, 15]) \n                scale([1, 0.7, 1]) \n                    sphere(d=35, $fn=32);\n        }\n        \n        // Head\n        translate([0, 0, 55]) {\n            // Main head shape\n            scale([1.3, 1.1, 1.2]) \n                sphere(d=35, $fn=32);\n            \n            // Snout\n            translate([0, 20, -5]) \n                rotate([20, 0, 0]) \n                    scale([0.7, 1.2, 0.6]) \n                        cube([20, 15, 15], center=true);\n            \n            // Jaw\n            translate([0, 25, -10]) \n                rotate([30, 0, 0]) \n                    cube([25, 10, 8], center=true);\n        }\n        \n        // Neck armor plates\n        for(i=[-1:1]) {\n            translate([i*8, 0, 45]) \n                rotate([0, i*10, 0]) \n                    scale([0.8, 0.3, 1.2]) \n                        cube([12, 5, 15], center=true);\n        }\n        \n        // Back spikes\n        for(i=[-2:2]) {\n            if(i != 0) {\n                translate([i*8, -15, 40]) \n                    rotate([0, 0, i*5]) \n                        cylinder(h=15, d1=8, d2=2, $fn=6);\n            }\n        }\n        \n        // Tail\n        translate([0, -25, 25]) {\n            rotate([30, 0, 0]) \n                cylinder(h=30, d1=15, d2=5, $fn=16);\n            \n            // Tail spikes\n            for(i=[0:2]) {\n                translate([0, -5-i*8, -5-i*5]) \n                    rotate([90, 0, 0]) \n                        cylinder(h=8, d1=4, d2=2, $fn=6);\n            }\n        }\n        \n        // Legs\n        module leg(x, y, angle) {\n            translate([x, y, 0]) {\n                rotate([0, 0, angle]) {\n                    // Upper leg\n                    translate([0, 0, 15]) \n                        rotate([30, 0, 0]) \n                            cylinder(h=20, d=12, $fn=16);\n                    \n                    // Lower leg\n                    translate([0, -8, 5]) \n                        rotate([60, 0, 0]) \n                            cylinder(h=15, d=10, $fn=16);\n                    \n                    // Foot\n                    translate([0, -15, 0]) \n                        scale([1.2, 2, 0.5]) \n                            sphere(d=12, $fn=16);\n                }\n            }\n        }\n        \n        leg(-15, 10, -30);\n        leg(15, 10, 30);\n        leg(-12, -10, -20);\n        leg(12, -10, 20);\n        \n        // Arms\n        module arm(x, y, angle) {\n            translate([x, y, 35]) {\n                rotate([0, 0, angle]) {\n                    // Upper arm\n                    rotate([0, 30, 0]) \n                        cylinder(h=15, d=10, $fn=16);\n                    \n                    // Forearm\n                    translate([0, 0, -12]) \n                        rotate([0, 60, 0]) \n                            cylinder(h=12, d=8, $fn=16);\n                    \n                    // Claw\n                    translate([0, 0, -20]) {\n                        difference() {\n                            sphere(d=8, $fn=16);\n                            // Claw indents\n                            for(i=[-1, 1]) {\n                                translate([i*3, 0, 0]) \n                                    cube([2, 6, 2], center=true);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        arm(-20, 5, -45);\n        arm(20, 5, 45);\n        \n        // Chest armor\n        translate([0, 10, 35]) {\n            difference() {\n                scale([1.2, 0.8, 1]) \n                    sphere(d=30, $fn=32);\n                translate([0, 0, 10]) \n                    cube([40, 30, 20], center=true);\n            }\n        }\n        \n        // Eyes\n        color([0.9, 0.2, 0.2]) {\n            translate([-8, 15, 58]) \n                sphere(d=4, $fn=16);\n            translate([8, 15, 58]) \n                sphere(d=4, $fn=16);\n            \n            // Eye ridges\n            color([0.2, 0.2, 0.2]) {\n                translate([-8, 15, 62]) \n                    rotate([30, 0, -30]) \n                        cube([8, 3, 3], center=true);\n                translate([8, 15, 62]) \n                    rotate([30, 0, 30]) \n                        cube([8, 3, 3], center=true);\n            }\n        }\n        \n        // Belly pattern\n        color([0.5, 0.4, 0.3]) {\n            translate([0, 0, 25]) {\n                scale([0.8, 0.6, 0.3]) \n                    sphere(d=30, $fn=32);\n            }\n        }\n        \n        // Horn\n        translate([0, -5, 65]) {\n            rotate([0, 0, 0]) \n                cylinder(h=12, d1=8, d2=2, $fn=6);\n        }\n        \n        // Side horns\n        translate([-15, 0, 60]) \n            rotate([0, -20, -30]) \n                cylinder(h=10, d1=6, d2=2, $fn=6);\n        translate([15, 0, 60]) \n            rotate([0, -20, 30]) \n                cylinder(h=10, d1=6, d2=2, $fn=6);\n    }\n}\n\n// Render the model\ntyranitar();",
    "renders": true
  },
  {
    "pokemon": "treecko",
    "openscad_code": "// Treecko - Realistic Style, Medium Complexity\n// Dimensions: ~60mm tall, 3D printable\n\n// Main body color\ntreecko_green = [0.2,0.6,0.3];\n// Belly color\ntreecko_light = [0.8,0.9,0.7];\n// Eye color\ntreecko_red = [0.9,0.2,0.2];\n// Dark details\ntreecko_dark = [0.1,0.3,0.1];\n\n// Head module\nmodule head() {\n    color(treecko_green)\n    union() {\n        // Main head sphere\n        translate([0,0,10]) sphere(r=8, $fn=32);\n        \n        // Snout\n        translate([0,7,7]) rotate([-20,0,0]) cylinder(h=8, r1=6, r2=4, $fn=16);\n        \n        // Eyes\n        color(treecko_red)\n        translate([4,5,12]) sphere(r=2.5, $fn=16);\n        translate([-4,5,12]) sphere(r=2.5, $fn=16);\n        \n        // Pupils\n        color([0,0,0])\n        translate([5,6,13]) sphere(r=1, $fn=8);\n        translate([-3,6,13]) sphere(r=1, $fn=8);\n        \n        // Eye ridges\n        color(treecko_dark)\n        translate([4,3,15]) rotate([0,20,0]) cube([2,1,3]);\n        translate([-4,3,15]) rotate([0,-20,0]) cube([2,1,3]);\n        \n        // Mouth\n        color(treecko_dark)\n        translate([0,9,7]) rotate([90,0,0]) cylinder(h=0.5, r=2, $fn=16);\n    }\n}\n\n// Body module\nmodule body() {\n    color(treecko_green)\n    difference() {\n        // Main body\n        translate([0,0,0]) sphere(r=10, $fn=32);\n        \n        // Belly cutout\n        color(treecko_light)\n        translate([0,5,-2]) sphere(r=9, $fn=32);\n    }\n    \n    // Belly patch\n    color(treecko_light)\n    translate([0,8,-2]) sphere(r=7, $fn=32);\n}\n\n// Limb module\nmodule limb(length, angle) {\n    translate([0,0,0]) rotate([0,0,angle]) {\n        // Upper limb\n        translate([0,0,-length/2]) cylinder(h=length, r=3, $fn=16);\n        \n        // Hand/Foot\n        translate([0,0,-length]) sphere(r=3.5, $fn=16);\n    }\n}\n\n// Tail module\nmodule tail() {\n    color(treecko_green)\n    for(i=[0:3]) {\n        rotate([0,-i*15,0])\n        translate([0,0,-i*3]) \n        cylinder(h=8, r1=6-i, r2=5-i, $fn=16);\n    }\n    \n    // Tail tip\n    color(treecko_dark)\n    translate([0,0,-12]) sphere(r=2, $fn=16);\n}\n\n// Main assembly\ntranslate([0,0,10]) {\n    // Head\n    head();\n    \n    // Body\n    translate([0,-8,0]) body();\n    \n    // Arms\n    translate([7,-8,5]) rotate([0,15,0]) limb(8, -30);\n    translate([-7,-8,5]) rotate([0,-15,0]) limb(8, 30);\n    \n    // Legs\n    translate([4,-8,-5]) rotate([0,0,0]) limb(7, 0);\n    translate([-4,-8,-5]) rotate([0,0,0]) limb(7, 0);\n    \n    // Tail\n    translate([0,-15,-8]) rotate([0,0,0]) tail();\n}\n\n// Back ridges\ncolor(treecko_dark)\nfor(i=[1:3]) {\n    translate([0,-10-i*3,8-i*2]) rotate([0,0,0]) \n    cube([2,0.5,3], center=true);\n}\n\n// Toes\nmodule toes(pos) {\n    color(treecko_dark)\n    for(i=[-1:1]) {\n        translate([pos+i*1.5,-8,-11]) sphere(r=0.8, $fn=8);\n    }\n}\ntoes(4);\ntoes(-4);",
    "renders": true
  },
  {
    "pokemon": "grovyle",
    "openscad_code": "// Grovyle Pokemon - Realistic Style, Medium Complexity\n// Designed for 3D printing at ~80mm height\n\n// Main colors\n$fa = 8;\n$fs = 0.4;\n\nmodule grovyle() {\n    // Body proportions based on Grovyle design\n    color([0.2, 0.6, 0.3]) {\n        // Main torso\n        translate([0, 0, 25]) {\n            scale([1.2, 0.8, 2]) sphere(r=10);\n        }\n        \n        // Chest leaf\n        translate([0, -8, 35]) {\n            rotate([0, 20, 0]) scale([1.5, 0.1, 2]) cube([15, 1, 8]);\n        }\n    }\n    \n    // Head\n    color([0.2, 0.6, 0.3]) {\n        translate([0, 0, 45]) {\n            scale([0.8, 0.7, 1]) sphere(r=12);\n        }\n    }\n    \n    // Snout\n    color([0.2, 0.6, 0.3]) {\n        translate([0, -13, 45]) {\n            rotate([15, 0, 0]) scale([0.5, 1.2, 0.6]) sphere(r=8);\n        }\n    }\n    \n    // Eye leaves\n    module eye_leaf(x_pos) {\n        color([0.2, 0.5, 0.2]) {\n            translate([x_pos, -3, 52]) {\n                rotate([0, 30, x_pos > 0 ? -30 : 30]) \n                scale([0.1, 1, 0.5]) cube([1, 15, 8]);\n            }\n        }\n    }\n    \n    eye_leaf(8);\n    eye_leaf(-8);\n    \n    // Eyes\n    color([0.9, 0.9, 0.1]) {\n        translate([6, -12, 50]) sphere(r=2);\n        translate([-6, -12, 50]) sphere(r=2);\n    }\n    \n    // Eye pupils\n    color([0, 0, 0]) {\n        translate([6, -13, 51]) sphere(r=1);\n        translate([-6, -13, 51]) sphere(r=1);\n    }\n    \n    // Head crest leaves\n    module head_leaf(angle) {\n        color([0.2, 0.5, 0.2]) {\n            translate([0, 0, 58]) {\n                rotate([0, 0, angle]) \n                scale([0.2, 1, 2]) cube([2, 1, 15]);\n            }\n        }\n    }\n    \n    for(i = [-30:15:30]) {\n        head_leaf(i);\n    }\n    \n    // Arms\n    module arm(x_pos) {\n        color([0.2, 0.6, 0.3]) {\n            // Upper arm\n            translate([x_pos, 0, 35]) {\n                rotate([0, 0, x_pos > 0 ? 45 : -45])\n                scale([0.4, 0.4, 1.5]) cylinder(h=15, r=5);\n            }\n            \n            // Lower arm\n            translate([x_pos + (x_pos > 0 ? 10 : -10), 0, 25]) {\n                rotate([0, 0, x_pos > 0 ? 90 : -90])\n                scale([0.35, 0.35, 1.2]) cylinder(h=12, r=4);\n            }\n            \n            // Hand leaves\n            color([0.3, 0.7, 0.3]) {\n                translate([x_pos + (x_pos > 0 ? 15 : -15), 0, 22]) {\n                    rotate([0, 90, x_pos > 0 ? 0 : 180])\n                    scale([0.1, 0.5, 1]) cylinder(h=8, r=3);\n                }\n            }\n        }\n    }\n    \n    arm(15);\n    arm(-15);\n    \n    // Legs\n    module leg(x_pos) {\n        color([0.2, 0.6, 0.3]) {\n            // Upper leg\n            translate([x_pos, 0, 15]) {\n                scale([0.5, 0.5, 1.5]) cylinder(h=15, r=5);\n            }\n            \n            // Lower leg\n            translate([x_pos, 0, 5]) {\n                scale([0.4, 0.4, 1.2]) cylinder(h=10, r=4);\n            }\n            \n            // Foot\n            translate([x_pos, 2, 0]) {\n                scale([1, 1.5, 0.5]) sphere(r=5);\n            }\n        }\n    }\n    \n    leg(8);\n    leg(-8);\n    \n    // Tail\n    color([0.2, 0.6, 0.3]) {\n        translate([0, 10, 15]) {\n            rotate([0, 10, 0])\n            scale([1, 1, 2]) cylinder(h=25, r=4);\n        }\n    }\n    \n    // Tail leaves\n    module tail_leaf(angle) {\n        color([0.3, 0.7, 0.3]) {\n            translate([0, 20, 10]) {\n                rotate([0, angle, 0])\n                scale([0.1, 1, 0.5]) cube([1, 15, 8]);\n            }\n        }\n    }\n    \n    for(i = [0:30:120]) {\n        tail_leaf(i);\n    }\n    \n    // Belly marking\n    color([0.8, 0.9, 0.7]) {\n        translate([0, 0, 25]) {\n            scale([0.8, 0.3, 1.5]) sphere(r=8);\n        }\n    }\n    \n    // Back leaves\n    module back_leaf(x_pos, z_pos) {\n        color([0.3, 0.7, 0.3]) {\n            translate([x_pos, 8, z_pos]) {\n                rotate([0, 45, 0])\n                scale([0.1, 1, 1.5]) cube([1, 12, 10]);\n            }\n        }\n    }\n    \n    back_leaf(5, 35);\n    back_leaf(-5, 35);\n    back_leaf(7, 30);\n    back_leaf(-7, 30);\n}\n\n// Generate the model\ngrovyle();",
    "renders": true
  },
  {
    "pokemon": "sceptile",
    "openscad_code": "// Sceptile OpenSCAD Model - Realistic Medium Complexity\n// Dimensions: ~80mm tall when printed\n\n$fn = 32;\n\nmodule body() {\n    color([0.2,0.6,0.2]) {\n        // Main torso\n        translate([0,0,20]) cube([25,15,35], center=true);\n        \n        // Chest plate\n        translate([0,5,30]) cube([20,10,10], center=true);\n        \n        // Belly marking\n        color([0.9,0.9,0.9]) {\n            translate([0,7.5,25]) cube([15,2,20], center=true);\n        }\n    }\n}\n\nmodule head() {\n    color([0.2,0.6,0.2]) {\n        // Main head\n        translate([0,0,50]) cube([20,15,20], center=true);\n        \n        // Snout\n        translate([0,0,60]) cube([15,10,15], center=true);\n        \n        // Crest\n        translate([0,0,65]) cylinder(h=10, r1=8, r2=3);\n        \n        // Side fins\n        rotate([0,90,0]) translate([0,0,50]) cylinder(h=15, r1=5, r2=2);\n        rotate([0,-90,0]) translate([0,0,50]) cylinder(h=15, r1=5, r2=2);\n    }\n    \n    // Eyes\n    color([1,1,0]) {\n        translate([7,5,55]) sphere(3);\n        translate([-7,5,55]) sphere(3);\n    }\n    \n    color([0,0,0]) {\n        translate([7,7,55]) sphere(1.5);\n        translate([-7,7,55]) sphere(1.5);\n    }\n}\n\nmodule arms() {\n    color([0.2,0.6,0.2]) {\n        // Left arm\n        translate([15,0,35]) rotate([0,0,45]) cube([5,5,25], center=true);\n        translate([20,0,20]) rotate([0,0,45]) cube([5,5,20], center=true);\n        \n        // Left hand blade\n        color([0.9,0.9,0.9]) {\n            translate([25,0,15]) rotate([0,0,45]) cube([15,3,2], center=true);\n        }\n        \n        // Right arm\n        translate([-15,0,35]) rotate([0,0,-45]) cube([5,5,25], center=true);\n        translate([-20,0,20]) rotate([0,0,-45]) cube([5,5,20], center=true);\n        \n        // Right hand blade\n        color([0.9,0.9,0.9]) {\n            translate([-25,0,15]) rotate([0,0,-45]) cube([15,3,2], center=true);\n        }\n    }\n}\n\nmodule legs() {\n    color([0.2,0.6,0.2]) {\n        // Left leg\n        translate([8,0,5]) rotate([0,10,0]) cube([8,8,20], center=true);\n        translate([8,0,-10]) rotate([0,10,0]) cube([10,10,15], center=true);\n        \n        // Right leg\n        translate([-8,0,5]) rotate([0,-10,0]) cube([8,8,20], center=true);\n        translate([-8,0,-10]) rotate([0,-10,0]) cube([10,10,15], center=true);\n    }\n    \n    // Feet claws\n    color([0.9,0.9,0.9]) {\n        translate([8,0,-18]) cube([12,3,5], center=true);\n        translate([-8,0,-18]) cube([12,3,5], center=true);\n    }\n}\n\nmodule tail() {\n    color([0.2,0.6,0.2]) {\n        // Main tail segments\n        translate([0,-15,15]) rotate([30,0,0]) cylinder(h=30, r1=8, r2=6);\n        translate([0,-30,5]) rotate([45,0,0]) cylinder(h=30, r1=6, r2=4);\n        translate([0,-45,-5]) rotate([60,0,0]) cylinder(h=30, r1=4, r2=2);\n        \n        // Tail leaf\n        color([0.3,0.7,0.3]) {\n            translate([0,-60,-15]) rotate([75,0,0]) scale([1,3,0.5]) sphere(8);\n        }\n    }\n}\n\nmodule back_fins() {\n    color([0.9,0.9,0.9]) {\n        // Back ridge fins\n        for(i=[0:1:4]) {\n            translate([0,0,40-i*8]) rotate([0,0,0]) cube([15,1,5], center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    arms();\n    legs();\n    tail();\n    back_fins();\n}",
    "renders": true
  },
  {
    "pokemon": "torchic",
    "openscad_code": "// Torchic Pokemon - Realistic Style, Medium Complexity\n// Overall size ~80mm height\n\n$fn = 32;\n\n// Main body color\nmodule torchic() {\n    color([0.95, 0.45, 0.15]) {\n        // Body - egg shape\n        union() {\n            translate([0, 0, 30]) {\n                scale([1, 1.2, 1.4]) \n                    sphere(25);\n            }\n            \n            // Chest tuft\n            translate([0, -5, 15]) {\n                rotate([15, 0, 0]) {\n                    scale([0.8, 1, 1.5])\n                        sphere(15);\n                }\n            }\n            \n            // Wings (simplified)\n            translate([20, 0, 35]) {\n                rotate([0, 20, 30]) {\n                    scale([1, 0.3, 0.8])\n                        cylinder(h=25, r1=12, r2=8);\n                }\n            }\n            \n            mirror([1, 0, 0]) {\n                translate([20, 0, 35]) {\n                    rotate([0, 20, -30]) {\n                        scale([1, 0.3, 0.8])\n                            cylinder(h=25, r1=12, r2=8);\n                    }\n                }\n            }\n            \n            // Feet\n            translate([12, -15, 10]) {\n                rotate([0, 0, 15])\n                    cylinder(h=15, r1=8, r2=6);\n            }\n            \n            mirror([1, 0, 0]) {\n                translate([12, -15, 10]) {\n                    rotate([0, 0, -15])\n                        cylinder(h=15, r1=8, r2=6);\n                }\n            }\n            \n            // Legs\n            translate([12, -10, 20]) {\n                scale([0.8, 0.8, 1])\n                    sphere(8);\n            }\n            \n            mirror([1, 0, 0]) {\n                translate([12, -10, 20]) {\n                    scale([0.8, 0.8, 1])\n                        sphere(8);\n                }\n            }\n        }\n    }\n    \n    // Beak\n    color([1, 0.8, 0.2]) {\n        translate([0, 30, 45]) {\n            rotate([-30, 0, 0]) {\n                scale([0.8, 1, 1.5])\n                    cone(15, 8, 0);\n            }\n        }\n    }\n    \n    // Eyes\n    color([0, 0, 0]) {\n        translate([8, 25, 50]) {\n            sphere(3);\n        }\n        translate([-8, 25, 50]) {\n            sphere(3);\n        }\n    }\n    \n    // Eye highlights\n    color([1, 1, 1]) {\n        translate([9, 26, 51]) {\n            sphere(1);\n        }\n        translate([-7, 26, 51]) {\n            sphere(1);\n        }\n    }\n    \n    // Comb (3 flame feathers)\n    color([0.95, 0.45, 0.15]) {\n        for(i=[-1, 0, 1]) {\n            translate([i*5, 5, 65]) {\n                rotate([i*10, 0, 0]) {\n                    scale([0.6, 0.3, 1])\n                        cylinder(h=15, r1=4, r2=1);\n                }\n            }\n        }\n    }\n    \n    // Tail feathers (3 flame feathers)\n    color([0.95, 0.45, 0.15]) {\n        for(i=[-1, 0, 1]) {\n            translate([i*8, -30, 25]) {\n                rotate([i*15 + 90, 0, i*10]) {\n                    scale([0.7, 0.4, 1.2])\n                        cylinder(h=20, r1=6, r2=2);\n                }\n            }\n        }\n    }\n    \n    // Yellow markings\n    color([1, 0.8, 0.2]) {\n        // Chest marking\n        translate([0, 10, 25]) {\n            rotate([90, 0, 0]) {\n                scale([0.8, 1, 0.3])\n                    cylinder(h=25, r1=8, r2=12);\n            }\n        }\n        \n        // Feet markings\n        translate([12, -12, 5]) {\n            scale([1, 1.5, 0.3])\n                sphere(5);\n        }\n        \n        mirror([1, 0, 0]) {\n            translate([12, -12, 5]) {\n                scale([1, 1.5, 0.3])\n                    sphere(5);\n            }\n        }\n    }\n}\n\n// Helper module for cone\nmodule cone(height, radius1, radius2) {\n    cylinder(h=height, r1=radius1, r2=radius2);\n}\n\n// Render the model\nrotate([0, 0, 0])\n    torchic();",
    "renders": true
  },
  {
    "pokemon": "combusken",
    "openscad_code": "// Combusken - Medium complexity realistic style\n// Overall height: 80mm\n// 3D printable with no overhangs\n\n// Main body color\nbody_color = \"#FF6600\";\n// Beak and claw color\nbeak_color = \"#FFFF00\";\n// Eye color\neye_color = \"#000000\";\n// Crest and feather tips\ncrest_color = \"#FF3300\";\n\n$fn = 32;\n\nmodule combusken() {\n    // Main body\n    color(body_color) {\n        union() {\n            // Torso\n            translate([0, 0, 30]) \n                scale([1, 0.8, 1.2])\n                sphere(r=15);\n                \n            // Lower body\n            translate([0, 0, 15])\n                cylinder(h=20, r1=12, r2=8);\n        }\n    }\n    \n    // Crest on head\n    color(crest_color) {\n        translate([0, -8, 50])\n            rotate([-20, 0, 0])\n            cylinder(h=15, r1=3, r2=1);\n    }\n    \n    // Head\n    color(body_color) {\n        translate([0, -5, 45])\n            scale([0.9, 1, 1.1])\n            sphere(r=12);\n    }\n    \n    // Beak\n    color(beak_color) {\n        translate([0, -18, 45])\n            rotate([20, 0, 0])\n            scale([1, 2, 0.8])\n            cylinder(h=8, r1=4, r2=0);\n    }\n    \n    // Eyes\n    color(eye_color) {\n        for(x=[-4, 4]) {\n            translate([x, -12, 47])\n                sphere(r=2);\n        }\n    }\n    \n    // Arms\n    module arm(side) {\n        translate([side * 12, 0, 38]) {\n            rotate([0, 0, side * -30])\n            color(body_color) {\n                cylinder(h=15, r1=5, r2=4);\n            }\n            // Claws\n            color(beak_color) {\n                for(i=[-1, 0, 1]) {\n                    translate([side * i * 2, 0, 0])\n                        translate([side * 20, 0, 38])\n                        rotate([0, 0, side * -30])\n                        rotate([90, 0, 0])\n                        cylinder(h=5, r1=1.5, r2=0);\n                }\n            }\n        }\n    }\n    \n    arm(1);\n    arm(-1);\n    \n    // Legs\n    module leg(side) {\n        translate([side * 8, 0, 20]) {\n            color(body_color) {\n                // Upper leg\n                cylinder(h=15, r1=5, r2=4);\n                // Lower leg\n                translate([0, 0, -12])\n                    cylinder(h=12, r1=4, r2=3);\n            }\n            // Foot\n            color(beak_color) {\n                translate([0, side * 8, -22])\n                    rotate([90, 0, 0])\n                    scale([1.5, 1, 0.5])\n                    cylinder(h=8, r1=3, r2=3);\n            }\n            // Toes\n            for(i=[-1, 0, 1]) {\n                translate([i * 2, side * 12, -22])\n                    rotate([90, 0, 0])\n                    cylinder(h=4, r1=1.2, r2=0);\n            }\n        }\n    }\n    \n    leg(1);\n    leg(-1);\n    \n    // Tail feathers\n    color(crest_color) {\n        for(angle=[-30, 0, 30]) {\n            rotate([0, angle, 0])\n            translate([0, 10, 20])\n                scale([0.3, 1, 2])\n                cylinder(h=20, r1=8, r2=2);\n        }\n    }\n}\n\n// Scale to 80mm height\nscale(0.8)\ncombusken();",
    "renders": true
  },
  {
    "pokemon": "blaziken",
    "openscad_code": "// Blaziken - Medium complexity realistic style\n// Scaled for 3D printing (80mm height)\n\nmodule head() {\n    color([0.9, 0.4, 0.1]) union() {\n        // Main head\n        translate([0, 0, 75]) scale([1, 0.8, 1.2]) sphere(8);\n        \n        // Beak\n        color([1, 0.6, 0.2]) translate([0, 10, 75]) rotate([0, 30, 0]) \n            scale([0.8, 0.4, 1.5]) cylinder(8, 4, 0);\n        \n        // Crest\n        for(i=[0:2]) {\n            rotate([0, 0, i*30-30]) translate([0, -2, 83]) \n                scale([0.3, 1, 2]) cylinder(5, 2, 1);\n        }\n    }\n}\n\nmodule eyes() {\n    color([1, 1, 1]) union() {\n        translate([4, 8, 78]) sphere(2);\n        translate([-4, 8, 78]) sphere(2);\n    }\n    color([0, 0, 0]) union() {\n        translate([4, 9, 78]) sphere(1);\n        translate([-4, 9, 78]) sphere(1);\n    }\n}\n\nmodule arms() {\n    module arm(side) {\n        color([0.9, 0.4, 0.1]) union() {\n            // Upper arm\n            translate([side*10, 0, 65]) rotate([0, 0, side*15])\n                cylinder(15, 4, 3);\n            \n            // Forearm\n            translate([side*18, 0, 50]) rotate([0, 0, side*45])\n                cylinder(12, 3, 3);\n            \n            // Hand/wrist flame\n            color([1, 0.3, 0]) translate([side*25, 0, 38]) \n                scale([1.5, 0.8, 2]) cylinder(8, 3, 0);\n        }\n    }\n    arm(1);\n    arm(-1);\n}\n\nmodule body() {\n    color([0.9, 0.4, 0.1]) union() {\n        // Torso\n        translate([0, 0, 45]) scale([1.2, 0.8, 1.5]) sphere(15);\n        \n        // Chest marking\n        color([0.9, 0.9, 0.9]) translate([0, 6, 50]) \n            scale([0.6, 0.3, 0.8]) sphere(8);\n        \n        // Belt area\n        color([1, 0.8, 0]) translate([0, 0, 35]) \n            scale([1.4, 0.6, 0.4]) sphere(12);\n    }\n}\n\nmodule legs() {\n    module leg(side) {\n        color([0.9, 0.4, 0.1]) union() {\n            // Thigh\n            translate([side*8, 0, 30]) rotate([0, 0, side*-10])\n                cylinder(15, 5, 4);\n            \n            // Lower leg\n            translate([side*10, 0, 15]) rotate([0, 0, side*-5])\n                cylinder(15, 4, 3);\n            \n            // Foot\n            color([0.9, 0.9, 0.9]) translate([side*12, 0, 5])\n                scale([1.5, 0.8, 0.8]) cube([8, 6, 4], center=true);\n            \n            // Ankle spike\n            color([0.9, 0.4, 0.1]) translate([side*14, -2, 8])\n                rotate([0, 90, 0]) cylinder(4, 1, 0);\n        }\n    }\n    leg(1);\n    leg(-1);\n}\n\nmodule tail() {\n    color([0.9, 0.4, 0.1]) union() {\n        translate([0, -15, 35]) rotate([45, 0, 0])\n            cylinder(20, 3, 1);\n        \n        // Tail flame\n        color([1, 0.3, 0]) translate([0, -25, 20]) rotate([45, 0, 0])\n            scale([1.2, 0.8, 2]) cylinder(10, 2, 0);\n    }\n}\n\ndifference() {\n    union() {\n        head();\n        eyes();\n        body();\n        arms();\n        legs();\n        tail();\n    }\n    \n    // Remove bottom for flat base\n    translate([0, 0, -1]) cube([100, 100, 2], center=true);\n}",
    "renders": true
  },
  {
    "pokemon": "mudkip",
    "openscad_code": "// Mudkip - Realistic Style with Medium Complexity\n// 3D printable Pokemon model using basic OpenSCAD primitives\n\n$fn = 32;\n\n// Main body color - blue\ncolor([0.2, 0.5, 0.9]) {\n    // Main body - egg shape\n    translate([0, 0, 15]) {\n        scale([1.2, 1, 1]) sphere(r=15);\n    }\n    \n    // Head dome\n    translate([0, 0, 35]) {\n        scale([1.3, 1.1, 0.8]) sphere(r=12);\n    }\n    \n    // Snout\n    translate([0, 12, 25]) {\n        rotate([20, 0, 0]) {\n            scale([0.8, 1.2, 0.7]) sphere(r=8);\n        }\n    }\n}\n\n// Cheek fins\ncolor([0.9, 0.3, 0.3]) {\n    // Left cheek fin\n    translate([-12, 8, 20]) {\n        rotate([0, -30, 10]) {\n            scale([0.3, 1.5, 0.8]) cylinder(h=5, r1=4, r2=2);\n        }\n    }\n    \n    // Right cheek fin\n    translate([12, 8, 20]) {\n        rotate([0, -30, -10]) {\n            scale([0.3, 1.5, 0.8]) cylinder(h=5, r1=4, r2=2);\n        }\n    }\n}\n\n// Head crest\ncolor([0.9, 0.3, 0.3]) {\n    // Central crest\n    translate([0, -5, 40]) {\n        rotate([0, 0, 0]) {\n            scale([1, 0.3, 2]) cylinder(h=10, r1=3, r2=1);\n        }\n    }\n}\n\n// Eyes\nmodule eye() {\n    difference() {\n        // White part\n        color([1, 1, 1]) {\n            sphere(r=3.5);\n        }\n        // Pupil\n        translate([0, 0, 3.6]) {\n            color([0, 0, 0]) {\n                cylinder(h=1, r=1.5);\n            }\n        }\n    }\n}\n\n// Left eye\ntranslate([-6, 15, 30]) {\n    rotate([10, 0, -10]) {\n        eye();\n    }\n}\n\n// Right eye\ntranslate([6, 15, 30]) {\n    rotate([10, 0, 10]) {\n        eye();\n    }\n}\n\n// Legs\nmodule leg() {\n    union() {\n        // Upper leg\n        color([0.2, 0.5, 0.9]) {\n            cylinder(h=10, r1=4, r2=3);\n        }\n        // Foot\n        color([0.9, 0.3, 0.3]) {\n            translate([0, 2, -5]) {\n                scale([1.2, 2, 0.8]) sphere(r=3);\n            }\n        }\n    }\n}\n\n// Front legs\ntranslate([-8, 0, 0]) {\n    rotate([0, 0, 15]) {\n        leg();\n    }\n}\n\ntranslate([8, 0, 0]) {\n    rotate([0, 0, -15]) {\n        leg();\n    }\n}\n\n// Back legs\ntranslate([-6, -12, 0]) {\n    rotate([0, 0, 30]) {\n        leg();\n    }\n}\n\ntranslate([6, -12, 0]) {\n    rotate([0, 0, -30]) {\n        leg();\n    }\n}\n\n// Tail\ncolor([0.2, 0.5, 0.9]) {\n    translate([0, -20, 8]) {\n        rotate([20, 0, 0]) {\n            scale([0.8, 0.8, 1.5]) sphere(r=8);\n        }\n    }\n}\n\n// Tail fin\ncolor([0.9, 0.3, 0.3]) {\n    translate([0, -27, 15]) {\n        rotate([90, 0, 0]) {\n            scale([3, 1, 0.3]) cylinder(h=5, r1=3, r2=1);\n        }\n    }\n}\n\n// Mouth\ntranslate([0, 18, 22]) {\n    color([0.2, 0.2, 0.2]) {\n        rotate([90, 0, 0]) {\n            scale([1, 0.5, 0.1]) cylinder(h=0.5, r=2.5);\n        }\n    }\n}\n\n// Gills\nfor (i = [0:2]) {\n    // Left gill\n    translate([-15, 10 - i*3, 15]) {\n        color([0.9, 0.3, 0.3]) {\n            rotate([0, 90, 0]) {\n                scale([0.3, 0.3, 1]) cylinder(h=2, r=1);\n            }\n        }\n    }\n    \n    // Right gill\n    translate([15, 10 - i*3, 15]) {\n        color([0.9, 0.3, 0.3]) {\n            rotate([0, 90, 0]) {\n                scale([0.3, 0.3, 1]) cylinder(h=2, r=1);\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "pokemon": "marshtomp",
    "openscad_code": "// Marshtomp Pokemon - Realistic Style - Medium Complexity\n// Based on Generation 3 Pokemon design\n\n// Main colors\ncolor_orange = [255/255, 128/255, 0/255];\ncolor_blue = [0/255, 128/255, 255/255];\ncolor_dark_blue = [0/255, 64/255, 128/255];\ncolor_black = [0/255, 0/255, 0/255];\ncolor_white = [1, 1, 1];\n\n// Overall scale for 3D printing\nscale_factor = 0.7;\n\nmodule marshtomp() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        // Body center\n        color(color_blue) {\n            // Torso\n            translate([0, 0, 15]) {\n                difference() {\n                    sphere(d = 35);\n                    translate([0, 0, -20]) cube([40, 40, 40], center = true);\n                }\n            }\n            \n            // Belly\n            translate([0, -5, 12]) {\n                scale([0.9, 0.7, 0.8]) sphere(d = 30);\n            }\n        }\n        \n        // Head\n        color(color_blue) {\n            translate([0, 20, 35]) {\n                sphere(d = 30);\n            }\n        }\n        \n        // Snout\n        color(color_blue) {\n            translate([0, 30, 35]) {\n                scale([0.8, 1.2, 0.9]) sphere(d = 20);\n            }\n        }\n        \n        // Ears\n        color(color_orange) {\n            // Left ear\n            translate([-12, 15, 45]) {\n                rotate([0, 20, -30]) {\n                    scale([1, 0.5, 2]) sphere(d = 12);\n                }\n            }\n            \n            // Right ear\n            translate([12, 15, 45]) {\n                rotate([0, 20, 30]) {\n                    scale([1, 0.5, 2]) sphere(d = 12);\n                }\n            }\n        }\n        \n        // Eyes\n        color(color_white) {\n            // Left eye\n            translate([-8, 25, 38]) {\n                sphere(d = 6);\n            }\n            \n            // Right eye\n            translate([8, 25, 38]) {\n                sphere(d = 6);\n            }\n        }\n        \n        // Pupils\n        color(color_black) {\n            // Left pupil\n            translate([-8, 27, 40]) {\n                sphere(d = 3);\n            }\n            \n            // Right pupil\n            translate([8, 27, 40]) {\n                sphere(d = 3);\n            }\n        }\n        \n        // Gills/fins on head\n        color(color_dark_blue) {\n            // Left fin\n            translate([-15, 18, 35]) {\n                rotate([0, 0, -45]) {\n                    scale([0.3, 0.1, 1]) sphere(d = 20);\n                }\n            }\n            \n            // Right fin\n            translate([15, 18, 35]) {\n                rotate([0, 0, 45]) {\n                    scale([0.3, 0.1, 1]) sphere(d = 20);\n                }\n            }\n            \n            // Top fin\n            translate([0, 10, 50]) {\n                rotate([0, 0, 0]) {\n                    scale([0.1, 0.3, 1]) sphere(d = 15);\n                }\n            }\n        }\n        \n        // Arms\n        color(color_blue) {\n            // Left arm\n            translate([-20, 5, 25]) {\n                rotate([0, 0, 30]) {\n                    // Upper arm\n                    cylinder(h = 15, d1 = 10, d2 = 8);\n                    translate([0, 0, 15]) {\n                        // Forearm\n                        rotate([0, 30, 0]) {\n                            cylinder(h = 12, d1 = 8, d2 = 6);\n                        }\n                    }\n                }\n            }\n            \n            // Right arm\n            translate([20, 5, 25]) {\n                rotate([0, 0, -30]) {\n                    // Upper arm\n                    cylinder(h = 15, d1 = 10, d2 = 8);\n                    translate([0, 0, 15]) {\n                        // Forearm\n                        rotate([0, 30, 0]) {\n                            cylinder(h = 12, d1 = 8, d2 = 6);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Hands\n        color(color_orange) {\n            // Left hand\n            translate([-25, -5, 15]) {\n                sphere(d = 10);\n            }\n            \n            // Right hand\n            translate([25, -5, 15]) {\n                sphere(d = 10);\n            }\n        }\n        \n        // Legs\n        color(color_blue) {\n            // Left leg\n            translate([-12, -15, 5]) {\n                cylinder(h = 20, d1 = 12, d2 = 10);\n            }\n            \n            // Right leg\n            translate([12, -15, 5]) {\n                cylinder(h = 20, d1 = 12, d2 = 10);\n            }\n        }\n        \n        // Feet\n        color(color_orange) {\n            // Left foot\n            translate([-12, -15, -5]) {\n                scale([1.5, 2, 0.8]) sphere(d = 15);\n            }\n            \n            // Right foot\n            translate([12, -15, -5]) {\n                scale([1.5, 2, 0.8]) sphere(d = 15);\n            }\n        }\n        \n        // Tail\n        color(color_blue) {\n            translate([0, -25, 20]) {\n                rotate([20, 0, 0]) {\n                    cylinder(h = 25, d1 = 15, d2 = 8);\n                }\n            }\n            \n            color(color_orange) {\n                translate([0, -45, 10]) {\n                    sphere(d = 12);\n                }\n            }\n        }\n        \n        // Cheek markings\n        color(color_orange) {\n            // Left cheek\n            translate([-12, 28, 32]) {\n                scale([0.5, 0.5, 0.2]) sphere(d = 10);\n            }\n            \n            // Right cheek\n            translate([12, 28, 32]) {\n                scale([0.5, 0.5, 0.2]) sphere(d = 10);\n            }\n        }\n        \n        // Nose\n        color(color_black) {\n            translate([0, 35, 35]) {\n                sphere(d = 3);\n            }\n        }\n    }\n}\n\n// Render the complete model\nmarshtomp();",
    "renders": true
  },
  {
    "pokemon": "swampert",
    "openscad_code": "// Swampert OpenSCAD model - medium complexity realistic style\n// Size: ~60mm height, 3D printable\n\n// Main colors\n$fn=30;\n\nmodule swampert() {\n    color([0.2, 0.4, 0.7]) // Main blue body\n    \n    // Body\n    union() {\n        // Torso\n        translate([0, 0, 15])\n            scale([1.2, 0.8, 1.4])\n            sphere(r=15);\n        \n        // Head\n        translate([0, 10, 35])\n            scale([0.9, 0.7, 0.9])\n            sphere(r=15);\n        \n        // Legs\n        translate([-10, -5, 0]) left_leg();\n        translate([10, -5, 0]) mirror([1,0,0]) left_leg();\n        \n        // Arms\n        translate([-20, 5, 25]) left_arm();\n        translate([20, 5, 25]) mirror([1,0,0]) left_arm();\n        \n        // Tail\n        translate([0, -25, 10]) tail();\n        \n        // Orange accents\n        color([0.9, 0.4, 0.1]) {\n            // Head fins\n            translate([0, 15, 45]) scale([2, 0.5, 1]) rotate([0, 45, 0]) cube([10,2,8]);\n            translate([-8, 15, 42]) rotate([0, 30, -30]) scale([0.3,1,1]) cube([15,2,8]);\n            translate([8, 15, 42]) rotate([0, 30, 30]) scale([0.3,1,1]) cube([15,2,8]);\n            \n            // Back ridges\n            for(i=[0:2]) {\n                translate([0, -5-i*8, 30-i*3])\n                    scale([1-i*0.1, 0.3, 1-i*0.1])\n                    rotate([0, 15, 0])\n                    cube([15,3,5]);\n            }\n            \n            // Cheek fins\n            translate([-12, 8, 30]) rotate([0, 0, -45]) cube([8,2,6]);\n            translate([12, 8, 30]) rotate([0, 0, 45]) cube([8,2,6]);\n        }\n        \n        // Eyes\n        color([0.9, 0.9, 0.9]) {\n            translate([-5, 12, 38]) sphere(r=2);\n            translate([5, 12, 38]) sphere(r=2);\n        }\n        \n        color([0.1, 0.1, 0.1]) {\n            translate([-5, 13, 39]) sphere(r=1.2);\n            translate([5, 13, 39]) sphere(r=1.2);\n        }\n        \n        // Mouth\n        color([0.5, 0.2, 0.3])\n            translate([0, 8, 32])\n            difference() {\n                cube([10,2,3], center=true);\n                translate([0,-1,1]) cube([8,2,3], center=true);\n            }\n    }\n}\n\nmodule left_leg() {\n    union() {\n        // Upper leg\n        translate([0, 0, 10])\n            scale([0.8, 0.8, 1.2])\n            cylinder(r1=8, r2=6, h=15);\n        \n        // Lower leg\n        translate([0, 0, 2])\n            scale([0.7, 0.7, 1])\n            cylinder(r1=6, r2=8, h=15);\n        \n        // Foot\n        color([0.9, 0.4, 0.1])\n            translate([0, 2, -3])\n            scale([1.5, 2, 0.8])\n            cube([10,15,6], center=true);\n    }\n}\n\nmodule left_arm() {\n    union() {\n        // Upper arm\n        color([0.2, 0.4, 0.7])\n            translate([0, 0, 5])\n            rotate([0, 90, 0])\n            cylinder(r=6, h=15);\n        \n        // Forearm\n        translate([0, 15, 0])\n            rotate([0, 90, 0])\n            cylinder(r=5, h=15);\n        \n        // Hand\n        color([0.9, 0.4, 0.1])\n            translate([0, 30, 0])\n            scale([1.2, 1.5, 0.8])\n            sphere(r=8);\n    }\n}\n\nmodule tail() {\n    color([0.2, 0.4, 0.7])\n    hull() {\n        translate([0, 0, 5])\n            sphere(r=8);\n        translate([0, -15, 8])\n            scale([0.8, 1, 0.8])\n            sphere(r=8);\n        translate([0, -25, 5])\n            scale([0.6, 1.2, 0.6])\n            sphere(r=8);\n    }\n    \n    // Tail fin\n    color([0.9, 0.4, 0.1])\n    translate([0, -30, 5])\n    rotate([90, 0, 0])\n    linear_extrude(height=3)\n    polygon(points=[[-8,0],[0,10],[8,0],[0,-5]]);\n}\n\n// Base for stability\ncolor([0.3, 0.3, 0.3])\n    translate([0, 0, -2])\n    cylinder(r=25, h=2);\n\nswampert();",
    "renders": true
  },
  {
    "pokemon": "poochyena",
    "openscad_code": "// Poochyena - Medium Complexity Realistic Style\n// Scale: 80mm length nose to tail\n\n$fa = 1;\n$fn = 30;\n\nmodule poochyena() {\n    scale(0.8) {\n        // Main body\n        color(\"gray\") {\n            union() {\n                // Torso\n                translate([0, 0, 5]) \n                    scale([1.2, 0.7, 0.9]) \n                        sphere(d=20);\n                \n                // Chest\n                translate([8, 0, 0]) \n                    scale([1, 0.8, 0.7]) \n                        sphere(d=15);\n                \n                // Rear\n                translate([-8, 0, 0]) \n                    scale([0.9, 0.8, 0.7]) \n                        sphere(d=15);\n            }\n        }\n        \n        // Head\n        color(\"dimgray\") {\n            translate([10, 0, 12]) {\n                rotate([0, 0, -20]) {\n                    scale([1.3, 1, 0.9]) \n                        sphere(d=16);\n                    \n                    // Snout\n                    translate([7, 0, -2]) \n                        scale([1.2, 0.7, 0.6]) \n                            sphere(d=12);\n                }\n            }\n        }\n        \n        // Ears\n        color(\"dimgray\") {\n            translate([8, 6, 18]) {\n                rotate([0, 30, 0]) \n                    cylinder(h=12, d1=8, d2=4);\n            }\n            translate([8, -6, 18]) {\n                rotate([0, -30, 0]) \n                    cylinder(h=12, d1=8, d2=4);\n            }\n        }\n        \n        // Legs\n        module leg(pos, angle) {\n            translate(pos) {\n                rotate([angle, 0, 0]) {\n                    // Upper leg\n                    color(\"dimgray\") {\n                        cylinder(h=8, d=6);\n                    }\n                    // Lower leg\n                    translate([0, 0, -8]) {\n                        rotate([30, 0, 0]) {\n                            color(\"gray\") {\n                                cylinder(h=10, d=5);\n                            }\n                            // Paw\n                            translate([0, 0, -10]) {\n                                color(\"dimgray\") {\n                                    sphere(d=6);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Front legs\n        leg([6, 5, 0], 20);\n        leg([6, -5, 0], 20);\n        \n        // Back legs\n        leg([-6, 5, 0], 20);\n        leg([-6, -5, 0], 20);\n        \n        // Tail\n        color(\"gray\") {\n            translate([-15, 0, 2]) {\n                rotate([0, 0, 45]) {\n                    cylinder(h=15, d1=6, d2=4);\n                }\n            }\n        }\n        \n        // Eyes\n        color(\"red\") {\n            translate([16, 3, 12]) {\n                scale([1, 1.2, 0.5]) \n                    sphere(d=3);\n            }\n            translate([16, -3, 12]) {\n                scale([1, 1.2, 0.5]) \n                    sphere(d=3);\n            }\n        }\n        \n        // Nose\n        color(\"black\") {\n            translate([19, 0, 9]) \n                sphere(d=2);\n        }\n        \n        // Mouth line\n        color(\"black\") {\n            translate([17, 0, 7]) {\n                rotate([0, 0, 15]) {\n                    scale([0.5, 0.5, 0.2]) \n                        cube([4, 1, 1]);\n                }\n            }\n        }\n        \n        // Paw pads\n        module paw_pad(pos) {\n            color(\"darkgray\") {\n                translate(pos) {\n                    scale([0.5, 1, 0.3]) \n                        sphere(d=3);\n                }\n            }\n        }\n        \n        // Front paw pads\n        paw_pad([6, 3, -11]);\n        paw_pad([6, -3, -11]);\n        paw_pad([-6, 3, -11]);\n        paw_pad([-6, -3, -11]);\n        \n        // Back stripes\n        color(\"black\") {\n            for(i = [1:3]) {\n                translate([-12 + i*2, 0, 8]) {\n                    scale([0.5, 7, 1]) \n                        cube([1, 1, 1]);\n                }\n            }\n        }\n    }\n}\n\npoochyena();",
    "renders": true
  },
  {
    "pokemon": "mightyena",
    "openscad_code": "// Mightyena - Realistic Style, Medium Complexity\n// 3D printable model with no overhangs\n\n// Color definitions\n$fn = 32;\nbody_color = [0.2, 0.2, 0.2];\naccent_color = [0.4, 0.4, 0.4];\neye_color = [1, 0, 0];\nnose_color = [0.1, 0.1, 0.1];\n\n// Main body module\nmodule mightyena() {\n    // Body\n    color(body_color) {\n        // Main torso\n        translate([0, 0, 0])\n            scale([1.2, 0.8, 1])\n            sphere(r=15);\n        \n        // Chest\n        translate([0, 10, -8])\n            scale([1.5, 1, 0.8])\n            sphere(r=12);\n    }\n    \n    // Head\n    color(body_color) {\n        // Main head shape\n        translate([0, 25, 15])\n            scale([1.2, 1.4, 0.8])\n            sphere(r=12);\n        \n        // Snout\n        translate([0, 35, 12])\n            scale([0.8, 1.5, 0.6])\n            sphere(r=8);\n    }\n    \n    // Ears\n    module ear(x_offset) {\n        color(body_color) {\n            translate([x_offset, 20, 25])\n                rotate([0, -20, x_offset > 0 ? -20 : 20])\n                scale([0.3, 1.5, 1.2])\n                cylinder(h=15, r1=5, r2=2);\n                \n            // Inner ear\n            color(accent_color)\n            translate([x_offset, 20, 25])\n                rotate([0, -20, x_offset > 0 ? -20 : 20])\n                scale([0.2, 1.2, 1])\n                cylinder(h=13, r1=3, r2=1);\n        }\n    }\n    \n    ear(8);\n    ear(-8);\n    \n    // Eyes\n    module eye(x_offset) {\n        color(eye_color) {\n            translate([x_offset, 30, 18])\n                rotate([0, 20, 0])\n                scale([0.8, 1, 0.5])\n                sphere(r=3);\n                \n            // Pupil\n            color([0, 0, 0])\n            translate([x_offset + 1, 30, 19])\n                sphere(r=1.5);\n        }\n    }\n    \n    eye(5);\n    eye(-5);\n    \n    // Nose\n    color(nose_color)\n    translate([0, 42, 12])\n        sphere(r=2);\n    \n    // Mouth line\n    color(nose_color)\n    translate([0, 40, 10])\n        rotate([0, 90, 0])\n        cylinder(h=8, r=0.5);\n    \n    // Legs\n    module leg(x_offset, y_offset) {\n        color(body_color) {\n            translate([x_offset, y_offset, -10])\n                scale([0.8, 0.8, 1.5])\n                cylinder(h=20, r=6);\n                \n            // Paw\n            translate([x_offset, y_offset, -25])\n                sphere(r=7);\n                \n            // Toes\n            for(i = [-1:1]) {\n                translate([x_offset + i*3, y_offset, -28])\n                    sphere(r=3);\n            }\n        }\n    }\n    \n    leg(8, 5);\n    leg(-8, 5);\n    leg(6, -10);\n    leg(-6, -10);\n    \n    // Tail\n    color(body_color) {\n        translate([0, -20, 0])\n            rotate([0, 0, 10])\n            scale([0.8, 0.8, 2])\n            cylinder(h=25, r1=8, r2=3);\n            \n        // Tail tip\n        translate([0, -35, 5])\n            rotate([0, 0, 45])\n            scale([0.6, 0.6, 1])\n            sphere(r=5);\n    }\n    \n    // Mane\n    color(accent_color) {\n        // Neck mane\n        translate([0, 15, 8])\n            rotate([0, 0, 0])\n            scale([1.5, 1, 0.5])\n            cylinder(h=20, r=15);\n            \n        // Back stripe\n        translate([0, 0, 12])\n            scale([0.8, 2, 0.3])\n            cube([15, 30, 3], center=true);\n            \n        // Tail stripe\n        translate([0, -30, 8])\n            scale([0.5, 0.3, 0.5])\n            cube([8, 20, 5], center=true);\n    }\n    \n    // Paws color accent\n    color(accent_color) {\n        leg_paw(8, 5);\n        leg_paw(-8, 5);\n        leg_paw(6, -10);\n        leg_paw(-6, -10);\n    }\n}\n\nmodule leg_paw(x_offset, y_offset) {\n    translate([x_offset, y_offset, -22])\n        difference() {\n            sphere(r=7);\n            translate([0, 0, -3])\n                cube([20, 20, 6], center=true);\n        }\n}\n\n// Render the model\nscale(1.5)\nrotate([0, 0, 0])\nmightyena();",
    "renders": true
  },
  {
    "pokemon": "zigzagoon",
    "openscad_code": "// Zigzagoon - realistic style, medium complexity\n// Scale: 80mm length\n\n// Main color scheme\n$fa = 2;\n$fs = 2;\n\nmodule zigzagoon_body() {\n    color([0.2, 0.15, 0.05]) {\n        // Main body - oval shape\n        scale([1.2, 0.8, 0.7]) sphere(r=15);\n    }\n}\n\nmodule zigzagoon_head() {\n    color([0.2, 0.15, 0.05]) {\n        // Head - slightly elongated sphere\n        translate([20, 0, 8]) scale([1.3, 1.1, 0.9]) sphere(r=12);\n    }\n}\n\nmodule zigzagoon_snout() {\n    color([0.8, 0.7, 0.6]) {\n        // Snout - tapered cylinder\n        translate([30, 0, 5]) rotate([0, -10, 0]) \n            scale([1, 0.6, 0.6]) cylinder(h=10, r1=6, r2=4);\n    }\n}\n\nmodule zigzagoon_ears() {\n    // Left ear\n    color([0.2, 0.15, 0.05]) {\n        translate([18, -10, 18]) rotate([0, 10, -30]) \n            cylinder(h=8, r1=3, r2=2);\n        translate([18, -14, 20]) rotate([0, 10, -30]) \n            scale([0.6, 1, 0.3]) sphere(r=5);\n    }\n    \n    // Right ear\n    color([0.2, 0.15, 0.05]) {\n        translate([18, 10, 18]) rotate([0, 10, 30]) \n            cylinder(h=8, r1=3, r2=2);\n        translate([18, 14, 20]) rotate([0, 10, 30]) \n            scale([0.6, 1, 0.3]) sphere(r=5);\n    }\n}\n\nmodule zigzagoon_stripes() {\n    // Body stripes\n    for(i = [0:1:2]) {\n        color([0.8, 0.7, 0.6]) {\n            rotate([0, 0, i*60]) \n                translate([0, 0, -8 + i*5]) \n                scale([1.8, 0.3, 0.3]) \n                cube([25, 10, 3], center=true);\n        }\n    }\n    \n    // Head stripe\n    color([0.8, 0.7, 0.6]) {\n        translate([20, 0, 15]) \n            scale([2.5, 0.3, 0.3]) \n            cube([15, 10, 3], center=true);\n    }\n}\n\nmodule zigzagoon_eyes() {\n    // Left eye\n    color([0.1, 0.1, 0.1]) {\n        translate([28, -5, 10]) \n            sphere(r=2);\n    }\n    \n    // Right eye\n    color([0.1, 0.1, 0.1]) {\n        translate([28, 5, 10]) \n            sphere(r=2);\n    }\n    \n    // Eye whites\n    color([1, 1, 1]) {\n        translate([27.5, -5, 10]) \n            sphere(r=1.5);\n        translate([27.5, 5, 10]) \n            sphere(r=1.5);\n    }\n}\n\nmodule zigzagoon_nose() {\n    color([0.1, 0.1, 0.1]) {\n        translate([35, 0, 5]) \n            sphere(r=1);\n    }\n}\n\nmodule zigzagoon_legs() {\n    // Front legs\n    for(side = [-1, 1]) {\n        color([0.2, 0.15, 0.05]) {\n            // Upper leg\n            translate([10, side*8, -8]) \n                rotate([0, 10, 0]) \n                cylinder(h=12, r=3);\n            \n            // Lower leg\n            translate([8, side*8, -18]) \n                rotate([0, -10, 0]) \n                cylinder(h=10, r=2);\n            \n            // Paw\n            translate([6, side*8, -26]) \n                sphere(r=3);\n        }\n    }\n    \n    // Back legs\n    for(side = [-1, 1]) {\n        color([0.2, 0.15, 0.05]) {\n            // Upper leg\n            translate([-15, side*8, -8]) \n                rotate([0, -10, 0]) \n                cylinder(h=12, r=3.5);\n            \n            // Lower leg\n            translate([-17, side*8, -18]) \n                rotate([0, 10, 0]) \n                cylinder(h=10, r=2.5);\n            \n            // Paw\n            translate([-19, side*8, -26]) \n                sphere(r=3.5);\n        }\n    }\n}\n\nmodule zigzagoon_tail() {\n    color([0.2, 0.15, 0.05]) {\n        // Main tail\n        translate([-25, 0, 0]) \n            rotate([0, 0, 45]) \n            scale([1, 0.3, 0.3]) \n            cylinder(h=20, r1=6, r2=3);\n        \n        // Tail tuft\n        translate([-35, -8, 2]) \n            rotate([0, 0, 45]) \n            scale([0.8, 0.8, 0.5]) \n            sphere(r=6);\n    }\n    \n    // Tail stripes\n    color([0.8, 0.7, 0.6]) {\n        for(i = [0:1:2]) {\n            translate([-25 - i*6, -2 + i*2, 0]) \n                rotate([0, 0, 45]) \n                scale([0.8, 0.2, 0.2]) \n                cube([8, 6, 2], center=true);\n        }\n    }\n}\n\nmodule zigzagoon_whiskers() {\n    // Left whiskers\n    color([0.1, 0.1, 0.1]) {\n        for(angle = [-20, 0, 20]) {\n            translate([32, -6, 5]) \n                rotate([0, 0, angle]) \n                cylinder(h=8, r=0.5);\n        }\n    }\n    \n    // Right whiskers\n    color([0.1, 0.1, 0.1]) {\n        for(angle = [-20, 0, 20]) {\n            translate([32, 6, 5]) \n                rotate([0, 180, -angle]) \n                cylinder(h=8, r=0.5);\n        }\n    }\n}\n\n// Assemble the complete zigzagoon\nunion() {\n    zigzagoon_body();\n    zigzagoon_head();\n    zigzagoon_snout();\n    zigzagoon_ears();\n    zigzagoon_stripes();\n    zigzagoon_eyes();\n    zigzagoon_nose();\n    zigzagoon_legs();\n    zigzagoon_tail();\n    zigzagoon_whiskers();\n}",
    "renders": true
  },
  {
    "pokemon": "linoone",
    "openscad_code": "// Linoone - Realistic Style, Medium Complexity\n// Overall length ~80mm, height ~25mm\n\ncolor(\"tan\") \nunion() {\n    // Main body\n    translate([0, 0, 5]) \n    scale([1.8, 0.7, 0.5]) \n    sphere(d=40, $fn=32);\n\n    // Head\n    translate([-35, 0, 12]) \n    scale([1.2, 0.9, 0.8]) \n    sphere(d=25, $fn=32);\n\n    // Snout extension\n    translate([-48, 0, 12]) \n    scale([1.5, 0.6, 0.5]) \n    sphere(d=15, $fn=32);\n\n    // Ears (2x)\n    for(side = [-1, 1]) {\n        translate([-28, side*12, 25]) \n        rotate([0, side*15, 0]) \n        scale([0.3, 0.1, 1]) \n        sphere(d=18, $fn=16);\n    }\n\n    // Front legs (2x)\n    for(side = [-1, 1]) {\n        translate([-15, side*12, 0]) \n        scale([0.3, 0.3, 1]) \n        cylinder(h=12, d=8, $fn=16);\n    }\n\n    // Back legs (2x)\n    for(side = [-1, 1]) {\n        translate([25, side*12, 0]) \n        scale([0.4, 0.4, 1]) \n        cylinder(h=10, d=10, $fn=16);\n    }\n\n    // Tail\n    translate([38, 0, 8]) \n    rotate([0, -10, 0]) \n    scale([2, 0.5, 0.3]) \n    sphere(d=20, $fn=32);\n}\n\n// Stripes - body stripes\ncolor(\"saddlebrown\") {\n    // 5 stripes along body\n    for(i = [-30:15:30]) {\n        translate([i, 0, 12]) \n        scale([0.1, 0.9, 0.3]) \n        cube([4, 30, 8], center=true);\n    }\n}\n\n// Facial features\ncolor(\"black\") {\n    // Eyes (2x)\n    for(side = [-1, 1]) {\n        translate([-42, side*8, 15]) \n        scale([1, 0.8, 0.3]) \n        sphere(d=6, $fn=16);\n    }\n\n    // Nose\n    translate([-50, 0, 12]) \n    sphere(d=3, $fn=16);\n\n    // Mouth line\n    translate([-45, 0, 8]) \n    rotate([90, 0, 0]) \n    cylinder(h=0.5, d=8, $fn=16);\n}\n\n// Paw pads - front\ncolor(\"darkbrown\") {\n    for(side = [-1, 1]) {\n        translate([-15, side*12, -1]) \n        sphere(d=5, $fn=16);\n    }\n}\n\n// Paw pads - back\nfor(side = [-1, 1]) {\n    translate([25, side*12, -1]) \n    sphere(d=6, $fn=16);\n}\n\n// Additional stripe on head\ncolor(\"saddlebrown\") \ntranslate([-35, 0, 20]) \nscale([1.2, 0.2, 0.2]) \nsphere(d=20, $fn=32);",
    "renders": true
  },
  {
    "pokemon": "wurmple",
    "openscad_code": "// Wurmple Pokemon - Realistic Style, Medium Complexity\n// 3D printable model with proper wall thickness and no overhangs\n\n// Color definitions\nbody_color = \"#A0522D\";\nstripe_color = \"#D2691E\";\neye_color = \"#FF0000\";\nspike_color = \"#8B4513\";\n\n// Main body segments\nmodule body_segment(height, radius, position) {\n    translate([0, 0, position])\n    color(body_color)\n    cylinder(h=height, r=radius, $fn=20);\n}\n\n// Body stripes\nmodule stripe(height, radius, position) {\n    translate([0, 0, position])\n    color(stripe_color)\n    cylinder(h=height, r=radius+0.5, $fn=20);\n}\n\n// Spike\nmodule spike(length, angle, position) {\n    translate([position[0], position[1], position[2]])\n    rotate([0, angle, 0])\n    color(spike_color)\n    cylinder(h=length, r1=1.5, r2=0.5, $fn=8);\n}\n\n// Eye\nmodule eye() {\n    translate([3.5, 2.5, 8])\n    color(eye_color)\n    sphere(r=1.5, $fn=16);\n}\n\n// Horn\nmodule horn() {\n    translate([0, 0, 14])\n    color(spike_color)\n    cylinder(h=6, r1=2, r2=0.5, $fn=8);\n}\n\n// Leg\nmodule leg(x_pos, y_pos, angle) {\n    translate([x_pos, y_pos, 0])\n    rotate([0, 0, angle])\n    color(body_color)\n    union() {\n        // Upper leg\n        translate([0, 0, 0])\n        cylinder(h=4, r=1.2, $fn=8);\n        \n        // Lower leg\n        translate([0, 0, -3.5])\n        cylinder(h=3.5, r=0.8, $fn=8);\n        \n        // Foot\n        translate([0, 0, -6.5])\n        sphere(r=1, $fn=8);\n    }\n}\n\n// Tail spike\nmodule tail_spike() {\n    translate([0, -6, 0])\n    rotate([30, 0, 0])\n    color(spike_color)\n    cylinder(h=4, r1=2, r2=0.5, $fn=8);\n}\n\n// Main model\nunion() {\n    // Body segments - front to back\n    body_segment(4, 5, 10);\n    body_segment(4, 5.5, 6);\n    body_segment(4, 6, 2);\n    body_segment(4, 6, -2);\n    body_segment(3, 5.5, -5.5);\n    body_segment(2, 4.5, -8.5);\n    \n    // Stripes\n    stripe(1, 5.5, 9.5);\n    stripe(1, 6.5, 5.5);\n    stripe(1, 6.5, 1.5);\n    stripe(1, 6, -2.5);\n    \n    // Spikes on back\n    spike(3, -30, [3, 0, 10]);\n    spike(3, -30, [0, 0, 6]);\n    spike(3, -30, [-3, 0, 2]);\n    spike(2.5, -30, [-2, 0, -2]);\n    \n    // Head features\n    horn();\n    \n    // Eyes (both sides)\n    eye();\n    mirror([1, 0, 0])\n    eye();\n    \n    // Legs - 3 pairs\n    leg(3.5, 2, 45);\n    leg(-3.5, 2, -45);\n    \n    leg(4, 0, 0);\n    leg(-4, 0, 0);\n    \n    leg(3.5, -2, -45);\n    leg(-3.5, -2, 45);\n    \n    // Tail spike\n    tail_spike();\n}",
    "renders": true
  },
  {
    "pokemon": "silcoon",
    "openscad_code": "// Realistic Silcoon Pokemon - Medium Complexity\n// Size: ~70mm long, 3D printable with no overhangs\n\n// Color definitions\n$fn = 50;\n\nmodule silcoon() {\n    // Main body - cocoon shape using rotated spheres\n    color(\"tan\") {\n        difference() {\n            union() {\n                // Central cocoon body\n                rotate([0, 0, 0]) \n                    scale([1.2, 1, 1.1]) \n                        sphere(d=45);\n                \n                // Back extension for cocoon shape\n                translate([15, 0, 0])\n                    scale([1.5, 0.9, 0.9])\n                        sphere(d=35);\n            }\n            \n            // Hollow interior for 3D printing\n            translate([5, 0, 0])\n                scale([1.1, 0.9, 0.9])\n                    sphere(d=40);\n        }\n    }\n    \n    // Silk wrapping bands\n    color(\"white\") {\n        // Horizontal bands around cocoon\n        for(i = [-15:10:15]) {\n            rotate([90, 0, 0])\n                translate([i, 0, 0])\n                    scale([0.8, 1, 0.15])\n                        cylinder(h=55, d=50);\n        }\n        \n        // Diagonal crossing bands\n        for(angle = [45, 135]) {\n            rotate([0, angle, 0])\n                translate([0, 0, -25])\n                    scale([0.8, 0.15, 1])\n                        cylinder(h=50, d=50);\n        }\n    }\n    \n    // Eye section\n    color(\"red\") {\n        // Left eye\n        translate([-10, 15, 12])\n            rotate([0, -30, 0])\n                scale([1, 1.2, 0.3])\n                    sphere(d=8);\n        \n        // Right eye\n        translate([-10, -15, 12])\n            rotate([0, 30, 0])\n                scale([1, 1.2, 0.3])\n                    sphere(d=8);\n        \n        // Eye highlights\n        color(\"white\") {\n            translate([-12, 15, 14])\n                sphere(d=3);\n            translate([-12, -15, 14])\n                sphere(d=3);\n        }\n    }\n    \n    // Horn-like projections\n    color(\"tan\") {\n        // Top horn\n        translate([-5, 0, 25])\n            rotate([0, 0, 0])\n                cylinder(h=15, d1=8, d2=5);\n        \n        // Side horns\n        for(side = [-1, 1]) {\n            translate([0, 18*side, 15])\n                rotate([0, 30*side, 0])\n                    cylinder(h=12, d1=6, d2=3);\n        }\n    }\n    \n    // Leg stubs (visible parts of legs inside cocoon)\n    color(\"tan\") {\n        for(pos = [[-15, 12, -15], [-15, -12, -15], [10, 8, -15], [10, -8, -15]]) {\n            translate(pos)\n                rotate([90, 0, 0])\n                    cylinder(h=8, d=6);\n        }\n    }\n    \n    // Silk thread attachments\n    color(\"white\") {\n        for(i = [0:45:315]) {\n            rotate([0, 0, i])\n                translate([0, 25, 0])\n                    cylinder(h=3, d=2);\n        }\n    }\n    \n    // Subtle texture dots\n    color(\"brown\") {\n        for(i = [0:30:330]) {\n            for(j = [0:30:150]) {\n                rotate([0, i, j])\n                    translate([22, 0, 0])\n                        sphere(d=1.5);\n            }\n        }\n    }\n}\n\n// Generate the model\nsilcoon();",
    "renders": true
  },
  {
    "pokemon": "beautifly",
    "openscad_code": "// Beautifly - Realistic Style, Medium Complexity\n// Size: ~80mm wingspan\n\n// Colors\nred = [1,0.2,0.2];\nblue = [0.1,0.3,0.8];\nblack = [0.1,0.1,0.1];\nwhite = [0.95,0.95,0.95];\npurple = [0.6,0.2,0.8];\nyellow = [0.9,0.8,0.1];\n\n// Main module\nmodule beautifly() {\n    // Body\n    color(purple)\n    translate([0,0,15])\n    scale([1,1.2,1])\n    sphere(8, $fn=32);\n    \n    // Thorax\n    color(purple)\n    translate([0,0,8])\n    scale([1.1,1,1.5])\n    rotate([90,0,0])\n    cylinder(h=8, r1=6, r2=4, $fn=32);\n    \n    // Head\n    color(purple)\n    translate([0,0,25])\n    sphere(6, $fn=32);\n    \n    // Eyes\n    for(i=[-1,1]) {\n        color(blue)\n        translate([i*4, 3, 26])\n        sphere(3, $fn=16);\n        \n        color(black)\n        translate([i*4.5, 3.5, 27])\n        sphere(1.5, $fn=8);\n    }\n    \n    // Proboscis\n    color(black)\n    translate([0,0,20])\n    rotate([90,0,0])\n    cylinder(h=8, r1=1, r2=0.5, $fn=16);\n    \n    // Antennae\n    for(i=[-1,1]) {\n        color(black)\n        translate([i*3, 0, 30])\n        rotate([0, 30*i, 0])\n        cylinder(h=10, r=0.5, $fn=8);\n        \n        color(red)\n        translate([i*5.5, 0, 38])\n        sphere(1.5, $fn=8);\n    }\n    \n    // Upper wings\n    module upper_wing(side) {\n        translate([side*15, 0, 22])\n        rotate([0, 0, side*-30])\n        rotate([90,0,0])\n        linear_extrude(height=0.8)\n        scale([1, 1.3])\n        circle(15, $fn=64);\n        \n        // Wing patterns\n        color(black)\n        translate([side*20, 0, 22.8])\n        rotate([0, 0, side*-30])\n        rotate([90,0,0])\n        linear_extrude(height=0.8)\n        scale([0.3, 0.3])\n        circle(8, $fn=32);\n        \n        color(red)\n        translate([side*25, 0, 22.8])\n        rotate([0, 0, side*-30])\n        rotate([90,0,0])\n        linear_extrude(height=0.8)\n        scale([0.2, 0.2])\n        circle(5, $fn=16);\n        \n        color(blue)\n        translate([side*18, side*8, 22.8])\n        rotate([0, 0, side*-30])\n        rotate([90,0,0])\n        linear_extrude(height=0.8)\n        scale([0.15, 0.15])\n        circle(4, $fn=12);\n    }\n    \n    // Lower wings\n    module lower_wing(side) {\n        translate([side*12, 0, 12])\n        rotate([0, 0, side*-20])\n        rotate([90,0,0])\n        linear_extrude(height=0.8)\n        scale([1, 0.6])\n        circle(12, $fn=48);\n        \n        // Wing patterns\n        color(black)\n        translate([side*15, 0, 12.8])\n        rotate([0, 0, side*-20])\n        rotate([90,0,0])\n        linear_extrude(height=0.8)\n        scale([0.25, 0.25])\n        circle(6, $fn=16);\n        \n        color(yellow)\n        translate([side*18, side*5, 12.8])\n        rotate([0, 0, side*-20])\n        rotate([90,0,0])\n        linear_extrude(height=0.8)\n        scale([0.12, 0.12])\n        circle(3, $fn=8);\n    }\n    \n    // Wings\n    for(side=[-1,1]) {\n        upper_wing(side);\n        lower_wing(side);\n    }\n    \n    // Legs\n    for(i=[-1,1]) {\n        color(black)\n        translate([i*3, 0, 10])\n        rotate([45, 0, 30*i])\n        cylinder(h=8, r=0.6, $fn=8);\n        \n        translate([i*5, 0, 5])\n        rotate([90, 0, 30*i])\n        cylinder(h=6, r=0.5, $fn=8);\n    }\n    \n    // Tail\n    color(purple)\n    translate([0,0,0])\n    rotate([90,0,0])\n    cylinder(h=8, r1=3, r2=1, $fn=32);\n    \n    // Tail spots\n    for(i=[0,120,240]) {\n        color(red)\n        rotate([0,0,i])\n        translate([2,0,4])\n        sphere(0.8, $fn=8);\n    }\n}\n\n// Scale for printing\nscale(0.8)\nbeautifly();",
    "renders": true
  },
  {
    "pokemon": "cascoon",
    "openscad_code": "// Cascoon 3D Model - Realistic Style, Medium Complexity\n// Scale: ~70mm diameter\n\n// Colors\n$fn = 50;\n\n// Main body dimensions\nBODY_RADIUS = 35;\nSHELL_THICKNESS = 3;\nSEGMENTS = 12;\n\n// Module for shell segment\nmodule shell_segment() {\n    difference() {\n        // Outer curve\n        translate([0, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h = BODY_RADIUS * 2, r1 = BODY_RADIUS, r2 = BODY_RADIUS * 0.9, center = true);\n        \n        // Inner hollow\n        translate([0, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h = BODY_RADIUS * 2 + 2, r1 = BODY_RADIUS - SHELL_THICKNESS, r2 = BODY_RADIUS * 0.9 - SHELL_THICKNESS, center = true);\n    }\n}\n\n// Module for shell texture lines\nmodule shell_lines() {\n    for(i = [0:15]) {\n        rotate([0, 0, i * 22.5]) {\n            translate([0, 0, -BODY_RADIUS])\n                rotate([90, 0, 0])\n                    cylinder(h = BODY_RADIUS * 2, r1 = 0.5, r2 = 0.2);\n        }\n    }\n}\n\n// Main body shell\ncolor([0.4, 0.3, 0.2]) {\n    difference() {\n        union() {\n            // Create segmented shell\n            for(i = [0:SEGMENTS-1]) {\n                rotate([0, 0, i * 360/SEGMENTS]) {\n                    rotate([0, 0, 0])\n                        shell_segment();\n                }\n            }\n        }\n        \n        // Front opening\n        translate([0, 0, BODY_RADIUS - 5])\n            sphere(r = BODY_RADIUS * 0.6);\n    }\n}\n\n// Shell texture\ncolor([0.3, 0.2, 0.15]) {\n    shell_lines();\n}\n\n// Eyes\ncolor([0.8, 0.1, 0.1]) {\n    // Left eye\n    translate([-10, -20, 25])\n        sphere(r = 4);\n    \n    // Right eye\n    translate([10, -20, 25])\n        sphere(r = 4);\n}\n\n// Eye highlights\ncolor([1, 1, 1]) {\n    translate([-9, -19, 27])\n        sphere(r = 1);\n    translate([11, -19, 27])\n        sphere(r = 1);\n}\n\n// Back spikes\ncolor([0.35, 0.25, 0.15]) {\n    for(i = [0:5]) {\n        rotate([0, 0, i * 60]) {\n            translate([0, -BODY_RADIUS + 5, 0])\n                rotate([90, 0, 0])\n                    cylinder(h = 8, r1 = 3, r2 = 0.5);\n        }\n    }\n}\n\n// Side spikes\ncolor([0.35, 0.25, 0.15]) {\n    for(i = [0:5]) {\n        rotate([0, 0, 30 + i * 60]) {\n            translate([0, -BODY_RADIUS * 0.7, -BODY_RADIUS * 0.5])\n                rotate([45, 0, 0])\n                    cylinder(h = 6, r1 = 2.5, r2 = 0.5);\n        }\n    }\n}\n\n// Top swirl pattern\ncolor([0.25, 0.15, 0.1]) {\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90]) {\n            difference() {\n                translate([0, 0, 30])\n                    rotate([0, 0, 45])\n                        cube([15, 3, 2], center = true);\n                translate([0, 0, 31])\n                    cube([20, 5, 4], center = true);\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "pokemon": "dustox",
    "openscad_code": "// Dustox realistic style with medium complexity\n// Body height ~60mm, wingspan ~80mm\n\n$fn = 36;\n\nmodule body() {\n    color(\"darkslategray\") {\n        // Main thorax\n        translate([0, 0, 20]) {\n            sphere(d = 25);\n        }\n        \n        // Abdomen\n        translate([0, 0, 8]) {\n            cylinder(d1 = 20, d2 = 15, h = 12);\n        }\n        \n        // Head\n        translate([0, 0, 35]) {\n            sphere(d = 18);\n        }\n}\n\nmodule eyes() {\n    color(\"red\") {\n        // Compound eyes\n        translate([-7, 10, 35]) {\n            sphere(d = 12);\n        }\n        translate([7, 10, 35]) {\n            sphere(d = 12);\n        }\n    }\n    \n    // Eye highlights\n    color(\"white\") {\n        translate([-5, 12, 38]) {\n            sphere(d = 3);\n        }\n        translate([5, 12, 38]) {\n            sphere(d = 3);\n        }\n    }\n}\n\nmodule antennae() {\n    color(\"darkslategray\") {\n        // Left antenna\n        translate([-5, 15, 45]) {\n            rotate([30, 0, -30]) {\n                cylinder(d1 = 2, d2 = 0.5, h = 15);\n            }\n        }\n        \n        // Right antenna\n        translate([5, 15, 45]) {\n            rotate([30, 0, 30]) {\n                cylinder(d1 = 2, d2 = 0.5, h = 15);\n            }\n        }\n    }\n}\n\nmodule legs() {\n    color(\"darkslategray\") {\n        // Front legs\n        for(i = [-1, 1]) {\n            translate([i * 6, 8, 18]) {\n                rotate([0, 0, i * 45]) {\n                    cylinder(d = 2, h = 12);\n                }\n            }\n        }\n        \n        // Middle legs\n        for(i = [-1, 1]) {\n            translate([i * 8, 0, 15]) {\n                rotate([0, 0, i * 60]) {\n                    cylinder(d = 2, h = 15);\n                }\n            }\n        }\n        \n        // Rear legs\n        for(i = [-1, 1]) {\n            translate([i * 6, -8, 12]) {\n                rotate([0, 0, i * 45]) {\n                    cylinder(d = 2, h = 12);\n                }\n            }\n        }\n    }\n}\n\nmodule wings() {\n    color(\"lightcoral\") {\n        // Left upper wing\n        translate([-15, 0, 28]) {\n            rotate([0, 0, 30]) {\n                scale([1.5, 1, 0.2]) {\n                    sphere(d = 20);\n                }\n            }\n        }\n        \n        // Right upper wing\n        translate([15, 0, 28]) {\n            rotate([0, 0, -30]) {\n                scale([1.5, 1, 0.2]) {\n                    sphere(d = 20);\n                }\n            }\n        }\n        \n        // Left lower wing\n        translate([-12, 0, 18]) {\n            rotate([0, 0, 45]) {\n                scale([1.2, 0.8, 0.2]) {\n                    sphere(d = 18);\n                }\n            }\n        }\n        \n        // Right lower wing\n        translate([12, 0, 18]) {\n            rotate([0, 0, -45]) {\n                scale([1.2, 0.8, 0.2]) {\n                    sphere(d = 18);\n                }\n            }\n        }\n    }\n    \n    // Wing markings\n    color(\"darkgreen\") {\n        for(x = [-20, 20]) {\n            for(y = [0, 5, 10]) {\n                translate([x/1.5, y, 29]) {\n                    sphere(d = 2);\n                }\n            }\n        }\n    }\n}\n\nmodule abdomen_markings() {\n    color(\"gold\") {\n        // Stripes on abdomen\n        translate([0, 0, 12]) {\n            cylinder(d = 18, h = 1);\n        }\n        translate([0, 0, 9]) {\n            cylinder(d = 16, h = 1);\n        }\n    }\n}\n\n// Assembly\nbody();\neyes();\nantennae();\nlegs();\nwings();\nabdomen_markings();",
    "renders": true
  },
  {
    "pokemon": "lotad",
    "openscad_code": "// Lotad - Realistic Style, Medium Complexity\n// Approx 70mm wide x 50mm deep x 30mm tall\n// 3D-printable with no severe overhangs\n\n$fn = 48;\n\n// Colors\ncolor_body = \"#3A9D23\";\ncolor_lilypad = \"#2E8B57\";\ncolor_details = \"#4682B4\";\ncolor_eyes = \"#000000\";\ncolor_mouth = \"#8B4513\";\n\n// Main body\nmodule lotad_body() {\n    color(color_body)\n    union() {\n        // Central body - slightly flattened sphere\n        scale([1, 0.8, 0.6])\n            sphere(d = 35);\n        \n        // Front bulge for face\n        translate([0, 12, -2])\n            scale([0.8, 0.6, 0.5])\n                sphere(d = 25);\n    }\n}\n\n// Lilypad on head\nmodule lilypad() {\n    color(color_lilypad)\n    union() {\n        // Main pad\n        translate([0, 0, 18])\n            rotate([0, 0, 0])\n                scale([1.4, 1.2, 0.3])\n                    sphere(d = 50);\n        \n        // Cut a notch at front\n        difference() {\n            translate([0, 0, 18])\n                scale([1.4, 1.2, 0.3])\n                    sphere(d = 50);\n            \n            translate([0, 30, 18])\n                rotate([90, 0, 0])\n                    cylinder(h = 30, d1 = 30, d2 = 0);\n        }\n        \n        // Lilypad veins\n        for(i = [-30:15:30]) {\n            translate([0, 0, 20])\n                rotate([0, 0, i])\n                    scale([0.05, 0.8, 0.05])\n                        cube([30, 1, 1]);\n        }\n    }\n}\n\n// Eyes\nmodule eyes() {\n    color(color_eyes)\n    union() {\n        // Left eye\n        translate([-8, 13, 5])\n            scale([1, 1, 0.5])\n                sphere(d = 6);\n        \n        // Right eye\n        translate([8, 13, 5])\n            scale([1, 1, 0.5])\n                sphere(d = 6);\n        \n        // Eye highlights\n        color(\"white\")\n        translate([-9, 12, 7])\n            sphere(d = 2);\n        \n        translate([7, 12, 7])\n            sphere(d = 2);\n    }\n}\n\n// Mouth\nmodule mouth() {\n    color(color_mouth)\n    translate([0, 18, -2])\n        rotate([90, 0, 0])\n            cylinder(h = 2, d1 = 8, d2 = 6);\n}\n\n// Blue markings on body\nmodule markings() {\n    color(color_details)\n    union() {\n        // Front marking\n        translate([0, 10, 0])\n            scale([0.6, 0.8, 0.2])\n                sphere(d = 20);\n        \n        // Side markings\n        translate([-12, 0, -2])\n            rotate([0, 0, -20])\n                scale([0.4, 0.6, 0.2])\n                    sphere(d = 15);\n        \n        translate([12, 0, -2])\n            rotate([0, 0, 20])\n                scale([0.4, 0.6, 0.2])\n                    sphere(d = 15);\n    }\n}\n\n// Legs\nmodule legs() {\n    color(color_body)\n    union() {\n        // Front left leg\n        translate([-12, -8, -15])\n            rotate([0, -20, -30])\n                cylinder(h = 15, d1 = 8, d2 = 6);\n        \n        // Front right leg\n        translate([12, -8, -15])\n            rotate([0, -20, 30])\n                cylinder(h = 15, d1 = 8, d2 = 6);\n        \n        // Back left leg\n        translate([-10, -18, -15])\n            rotate([0, -30, -20])\n                cylinder(h = 12, d1 = 7, d2 = 5);\n        \n        // Back right leg\n        translate([10, -18, -15])\n            rotate([0, -30, 20])\n                cylinder(h = 12, d1 = 7, d2 = 5);\n    }\n}\n\n// Feet\nmodule feet() {\n    color(color_body)\n    union() {\n        for(x = [-12, 12]) {\n            for(y = [-8, -18]) {\n                translate([x, y, -25])\n                    scale([1.2, 1.5, 0.4])\n                        sphere(d = 8);\n            }\n        }\n    }\n}\n\n// Assembly\nlotad_body();\nlilypad();\neyes();\nmouth();\nmarkings();\nlegs();\nfeet();",
    "renders": true
  },
  {
    "pokemon": "lombre",
    "openscad_code": "// Lombre - Realistic Style, Medium Complexity\n// Estimated size: ~70mm tall\n\n// Main colors\n$fa = 2;\n$fs = 0.5;\n\nmodule lombre() {\n    // Body (green water lily pad body)\n    color([0.2, 0.6, 0.3]) {\n        union() {\n            // Main body sphere\n            translate([0, 0, 15]) \n                scale([1.2, 1, 1.2])\n                sphere(15);\n            \n            // Lower body extension\n            translate([0, 0, 5])\n                rotate([0, 0, 0])\n                cylinder(h=12, r1=15, r2=12);\n        }\n    }\n    \n    // Head with lily pad\n    color([0.2, 0.6, 0.3]) {\n        union() {\n            // Head\n            translate([0, -5, 35])\n                sphere(12);\n            \n            // Lily pad hat\n            translate([0, -5, 47])\n                rotate([0, 0, 0])\n                cylinder(h=2, r=20);\n            \n            // Lily pad rim\n            translate([0, -5, 47])\n                rotate([0, 0, 0])\n                cylinder(h=3, r=18, r2=20);\n                \n            // Lily pad center\n            color([1, 0.8, 0.2])\n                translate([0, -5, 49.5])\n                sphere(2.5);\n        }\n    }\n    \n    // Eyes\n    color([1, 1, 1]) {\n        // Left eye\n        translate([-5, -8, 38])\n            sphere(3);\n        // Right eye\n        translate([5, -8, 38])\n            sphere(3);\n    }\n    \n    // Pupils\n    color([0, 0, 0]) {\n        translate([-5, -9.5, 39])\n            sphere(1.5);\n        translate([5, -9.5, 39])\n            sphere(1.5);\n    }\n    \n    // Mouth\n    color([0.6, 0.2, 0.2]) {\n        translate([0, -12, 33])\n            rotate([90, 0, 0])\n            cylinder(h=0.5, r=3, r2=0);\n    }\n    \n    // Arms\n    color([0.2, 0.6, 0.3]) {\n        // Left arm\n        translate([-18, 0, 25])\n            rotate([0, 15, -45])\n            cylinder(h=15, r=4);\n        \n        // Left hand\n        translate([-28, -2, 28])\n            sphere(5);\n            \n        // Right arm\n        translate([18, 0, 25])\n            rotate([0, -15, 45])\n            cylinder(h=15, r=4);\n        \n        // Right hand\n        translate([28, -2, 28])\n            sphere(5);\n    }\n    \n    // Legs\n    color([0.2, 0.6, 0.3]) {\n        // Left leg\n        translate([-8, 0, 5])\n            rotate([-15, 0, 0])\n            cylinder(h=15, r=5);\n        \n        // Left foot\n        translate([-8, 0, -5])\n            scale([1.5, 2, 1])\n            sphere(5);\n        \n        // Right leg\n        translate([8, 0, 5])\n            rotate([-15, 0, 0])\n            cylinder(h=15, r=5);\n        \n        // Right foot\n        translate([8, 0, -5])\n            scale([1.5, 2, 1])\n            sphere(5);\n    }\n    \n    // Red markings on body\n    color([0.8, 0.2, 0.2]) {\n        // Chest marking\n        translate([0, -15, 22])\n            rotate([0, 0, 0])\n            scale([0.8, 0.3, 1])\n            sphere(10);\n        \n        // Back marking\n        translate([0, 15, 22])\n            rotate([0, 0, 0])\n            scale([0.6, 0.2, 0.8])\n            sphere(10);\n    }\n    \n    // Fingers (3 per hand)\n    module finger() {\n        cylinder(h=4, r=1.5);\n    }\n    \n    color([0.2, 0.6, 0.3]) {\n        // Left hand fingers\n        for(i = [-1:1]) {\n            translate([-28 + i*3, -6, 28])\n                rotate([0, 0, i*20])\n                finger();\n        }\n        \n        // Right hand fingers\n        for(i = [-1:1]) {\n            translate([28 + i*3, -6, 28])\n                rotate([0, 0, i*20])\n                finger();\n        }\n    }\n    \n    // Toes\n    color([0.2, 0.6, 0.3]) {\n        // Left foot toes\n        for(i = [-1:1]) {\n            translate([-8 + i*4, -4, -8])\n                rotate([0, -20, 0])\n                cylinder(h=3, r=2);\n        }\n        \n        // Right foot toes\n        for(i = [-1:1]) {\n            translate([8 + i*4, -4, -8])\n                rotate([0, -20, 0])\n                cylinder(h=3, r=2);\n        }\n    }\n}\n\n// Main assembly\nlombre();",
    "renders": true
  },
  {
    "pokemon": "ludicolo",
    "openscad_code": "// Ludicolo - Realistic Style, Medium Complexity\n// 3D printable Pokemon model using basic OpenSCAD primitives\n\nmodule body() {\n    // Main body - green rounded shape\n    color([0.2, 0.7, 0.2]) \n    translate([0, 0, 10]) \n    scale([1.2, 1, 1.5]) \n    sphere(d=30, $fn=32);\n    \n    // Belly patch - yellow-green\n    color([0.7, 0.8, 0.3]) \n    translate([0, -12, 10]) \n    scale([0.8, 0.5, 0.6]) \n    sphere(d=25, $fn=32);\n}\n\nmodule sombrero() {\n    // Sombrero brim\n    color([0.9, 0.9, 0.1]) \n    translate([0, 0, 35]) \n    cylinder(h=2, d1=45, d2=50, $fn=64);\n    \n    // Sombrero top\n    color([0.9, 0.9, 0.1]) \n    translate([0, 0, 37]) \n    sphere(d=30, $fn=32);\n    \n    // Green stripes on sombrero\n    for(i = [0:60:360]) {\n        color([0.2, 0.7, 0.2]) \n        rotate([0, 0, i]) \n        translate([0, -15, 36]) \n        cube([2, 30, 2], center=true);\n    }\n}\n\nmodule head() {\n    // Head sphere\n    color([0.2, 0.7, 0.2]) \n    translate([0, 0, 25]) \n    sphere(d=25, $fn=32);\n    \n    // Eyes\n    color([0.9, 0.9, 0.9]) \n    translate([-8, -10, 28]) \n    sphere(d=6, $fn=16);\n    translate([8, -10, 28]) \n    sphere(d=6, $fn=16);\n    \n    // Eye pupils\n    color([0, 0, 0]) \n    translate([-8, -11, 29]) \n    sphere(d=3, $fn=8);\n    translate([8, -11, 29]) \n    sphere(d=3, $fn=8);\n    \n    // Orange beak\n    color([0.9, 0.4, 0.1]) \n    translate([0, -15, 22]) \n    scale([1, 1.5, 0.8]) \n    sphere(d=12, $fn=16);\n    \n    // Leaf crest\n    color([0.2, 0.8, 0.2]) \n    translate([0, 0, 37]) \n    scale([0.3, 1, 0.8]) \n    rotate([0, 0, 0]) \n    cylinder(h=10, d1=8, d2=2, $fn=3);\n}\n\nmodule arms() {\n    // Left arm\n    color([0.2, 0.7, 0.2]) \n    translate([-18, -5, 15]) \n    rotate([0, -20, -30]) \n    cylinder(h=15, d1=8, d2=6, $fn=16);\n    \n    // Right arm\n    color([0.2, 0.7, 0.2]) \n    translate([18, -5, 15]) \n    rotate([0, 20, 30]) \n    cylinder(h=15, d1=8, d2=6, $fn=16);\n    \n    // Hands - lily pads\n    color([0.2, 0.8, 0.2]) \n    translate([-22, -5, 0]) \n    rotate([90, 0, 0]) \n    cylinder(h=1, d=12, $fn=32);\n    \n    color([0.2, 0.8, 0.2]) \n    translate([22, -5, 0]) \n    rotate([90, 0, 0]) \n    cylinder(h=1, d=12, $fn=32);\n}\n\nmodule legs() {\n    // Left leg\n    color([0.2, 0.7, 0.2]) \n    translate([-8, -5, 0]) \n    cylinder(h=20, d=10, $fn=16);\n    \n    // Right leg\n    color([0.2, 0.7, 0.2]) \n    translate([8, -5, 0]) \n    cylinder(h=20, d=10, $fn=16);\n    \n    // Feet\n    color([0.9, 0.4, 0.1]) \n    translate([-8, -5, 0]) \n    scale([1.2, 1.5, 0.5]) \n    sphere(d=12, $fn=16);\n    \n    color([0.9, 0.4, 0.1]) \n    translate([8, -5, 0]) \n    scale([1.2, 1.5, 0.5]) \n    sphere(d=12, $fn=16);\n}\n\nmodule back_fins() {\n    // Dorsal fin-like structures\n    color([0.1, 0.6, 0.2]) \n    translate([0, 12, 20]) \n    rotate([0, 20, 0]) \n    scale([1, 0.5, 0.3]) \n    cylinder(h=15, d1=2, d2=8, $fn=3);\n    \n    color([0.1, 0.6, 0.2]) \n    translate([-6, 12, 18]) \n    rotate([0, 20, -20]) \n    scale([0.8, 0.4, 0.3]) \n    cylinder(h=12, d1=2, d2=6, $fn=3);\n    \n    color([0.1, 0.6, 0.2]) \n    translate([6, 12, 18]) \n    rotate([0, 20, 20]) \n    scale([0.8, 0.4, 0.3]) \n    cylinder(h=12, d1=2, d2=6, $fn=3);\n}\n\n// Assemble the Ludicolo\nunion() {\n    body();\n    sombrero();\n    head();\n    arms();\n    legs();\n    back_fins();\n}",
    "renders": true
  },
  {
    "pokemon": "seedot",
    "openscad_code": "// Seedot Pokemon - Realistic Style, Medium Complexity\n// Size: ~60mm tall\n\nmodule seedot_body() {\n    // Main brown body (slightly flattened sphere)\n    color(\"#8B4513\") \n    scale([1, 1, 0.85])\n    sphere(d=50, $fn=60);\n    \n    // Top cap with slight rim\n    color(\"#654321\")\n    translate([0, 0, 20])\n    cylinder(h=8, d1=45, d2=48, $fn=40);\n}\n\nmodule seedot_face() {\n    // Eyes (white sclera with black pupils)\n    color(\"white\")\n    for(x = [-12, 12])\n        translate([x, -5, 18])\n        sphere(d=8, $fn=20);\n    \n    color(\"black\")\n    for(x = [-12, 12])\n        translate([x, -5, 22])\n        sphere(d=4, $fn=20);\n    \n    // Mouth (small triangular cut)\n    color(\"#4A4A4A\")\n    translate([0, -20, 15])\n    rotate([90, 0, 0])\n    cylinder(h=2, d1=10, d2=6, $fn=3);\n}\n\nmodule seedot_hat() {\n    // Main cap structure\n    color(\"#228B22\")\n    translate([0, 0, 28])\n    rotate([0, 0, 0])\n    cylinder(h=25, d1=35, d2=28, $fn=40);\n    \n    // Cap rim\n    color(\"#006400\")\n    translate([0, 0, 28])\n    cylinder(h=3, d=40, $fn=40);\n    \n    // Cap stem\n    color(\"#006400\")\n    translate([0, 0, 53])\n    cylinder(h=8, d=6, $fn=20);\n    \n    // Cap tip\n    color(\"#8FBC8F\")\n    translate([0, 0, 61])\n    sphere(d=8, $fn=20);\n}\n\nmodule seedot_feet() {\n    // Three feet arranged in triangle\n    color(\"#8B4513\")\n    for(a = [0, 120, 240]) {\n        rotate([0, 0, a])\n        translate([0, -22, -22])\n        scale([1, 1.2, 1])\n        sphere(d=12, $fn=20);\n    }\n}\n\nmodule seedot_markings() {\n    // Seed pattern on body\n    color(\"#D2691E\")\n    translate([0, -10, 5])\n    rotate([90, 0, 0])\n    cylinder(h=1, d=30, $fn=6);\n    \n    // Additional seed dots\n    color(\"#CD853F\")\n    for(i = [1:6]) {\n        rotate([0, 0, i*60])\n        translate([18, 0, 0])\n        sphere(d=3, $fn=10);\n    }\n    \n    // Cap texture lines\n    color(\"#006400\")\n    for(i = [1:8]) {\n        rotate([0, 0, i*45])\n        translate([0, 0, 35])\n        cylinder(h=1, d1=25, d2=20, $fn=3);\n    }\n}\n\n// Assembly\nseedot_body();\nseedot_face();\nseedot_hat();\nseedot_feet();\nseedot_markings();",
    "renders": true
  },
  {
    "pokemon": "nuzleaf",
    "openscad_code": "// Nuzleaf - Realistic style, medium complexity\n// Designed for 3D printing with proper wall thickness and no overhangs\n\nmodule nuzleaf_body() {\n    // Main brown body\n    color([0.4, 0.2, 0.1]) {\n        // Torso - elongated egg shape\n        translate([0, 0, 20])\n            scale([1.2, 1, 1.5])\n            sphere(15, $fn=32);\n        \n        // Lower body extension\n        translate([0, 0, 8])\n            cylinder(h=15, r1=12, r2=8, $fn=32);\n    }\n}\n\nmodule nuzleaf_head() {\n    color([0.4, 0.2, 0.1]) {\n        // Main head - slightly pointed\n        translate([0, 0, 45])\n            scale([1, 0.8, 1.2])\n            sphere(12, $fn=32);\n        \n        // Beak-like nose extension\n        translate([0, -8, 42])\n            rotate([30, 0, 0])\n            cylinder(h=8, r1=6, r2=3, $fn=16);\n    }\n    \n    // Leaf on head\n    color([0.1, 0.5, 0.1]) {\n        translate([0, 0, 58])\n            rotate([0, 0, 0])\n            linear_extrude(height=2, convexity=10)\n            polygon(points=[\n                [0, 0],\n                [-8, 12],\n                [0, 18],\n                [8, 12],\n                [0, 0]\n            ]);\n    }\n}\n\nmodule nuzleaf_arms() {\n    for(side = [-1, 1]) {\n        color([0.4, 0.2, 0.1]) {\n            // Upper arm\n            translate([side * 12, 4, 35])\n                rotate([0, side * 20, 0])\n                cylinder(h=10, r=4, $fn=16);\n            \n            // Lower arm\n            translate([side * 18, 8, 32])\n                rotate([0, side * 20, 0])\n                cylinder(h=8, r=3, $fn=16);\n            \n            // Three-fingered hands\n            translate([side * 23, 12, 30])\n                rotate([0, 0, 90])\n                cylinder(h=5, r1=3, r2=2, $fn=16);\n        }\n    }\n}\n\nmodule nuzleaf_legs() {\n    for(side = [-1, 1]) {\n        color([0.4, 0.2, 0.1]) {\n            // Upper leg\n            translate([side * 8, 0, 15])\n                rotate([0, side * 10, 0])\n                cylinder(h=12, r=5, $fn=16);\n            \n            // Lower leg\n            translate([side * 10, 0, 5])\n                rotate([0, side * 10, 0])\n                cylinder(h=8, r=4, $fn=16);\n            \n            // Feet\n            translate([side * 11, 2, 0])\n                cube([6, 8, 3], center=true);\n        }\n    }\n}\n\nmodule nuzleaf_face() {\n    // Eyes - yellow with black pupils\n    color([1, 0.8, 0]) {\n        for(side = [-1, 1]) {\n            translate([side * 5, -8, 48])\n                sphere(2.5, $fn=16);\n        }\n    }\n    \n    color([0, 0, 0]) {\n        for(side = [-1, 1]) {\n            translate([side * 5, -10, 49])\n                sphere(1, $fn=16);\n        }\n    }\n    \n    // Mouth line\n    color([0.1, 0.05, 0]) {\n        translate([0, -12, 42])\n            rotate([90, 0, 0])\n            cylinder(h=0.5, r1=3, r2=2, $fn=16);\n    }\n}\n\nmodule nuzleaf_ears() {\n    color([0.4, 0.2, 0.1]) {\n        for(side = [-1, 1]) {\n            translate([side * 8, 0, 52])\n                rotate([0, side * 15, 0])\n                scale([1, 0.7, 0.3])\n                sphere(5, $fn=16);\n        }\n    }\n}\n\nmodule nuzleaf_leaf_details() {\n    // Additional leaf patterns on body\n    color([0.1, 0.4, 0.1]) {\n        translate([0, -5, 30])\n            rotate([90, 0, 0])\n            linear_extrude(height=0.5, convexity=10)\n            polygon(points=[\n                [0, 0],\n                [-6, 8],\n                [0, 12],\n                [6, 8],\n                [0, 0]\n            ]);\n    }\n}\n\n// Assemble the complete Nuzleaf\nunion() {\n    nuzleaf_body();\n    nuzleaf_head();\n    nuzleaf_arms();\n    nuzleaf_legs();\n    nuzleaf_face();\n    nuzleaf_ears();\n    nuzleaf_leaf_details();\n}",
    "renders": true
  },
  {
    "pokemon": "shiftry",
    "openscad_code": "// Shiftry Pokemon OpenSCAD Model - Realistic Style\n// Scale: 80mm tall\n\n$fn = 50;\n\nmodule leaf() {\n    // Main leaf blade\n    color(\"darkgreen\")\n    difference() {\n        union() {\n            // Leaf body\n            scale([1, 0.3, 0.05])\n            sphere(15);\n            \n            // Leaf tip\n            translate([12, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h = 8, r1 = 8, r2 = 0);\n        }\n        \n        // Vein groove\n        translate([0, 0, -0.5])\n        scale([0.05, 1, 0.1])\n        cube([20, 2, 1]);\n    }\n}\n\nmodule head() {\n    // Main head\n    color(\"saddlebrown\")\n    union() {\n        // Head body\n        scale([0.8, 1, 1.2])\n        sphere(12);\n        \n        // Snout\n        translate([0, -10, -2])\n        scale([0.6, 0.8, 0.5])\n        sphere(8);\n    }\n    \n    // Nose\n    color(\"black\")\n    translate([0, -15, -3])\n    sphere(2);\n    \n    // Eyes\n    color(\"darkorange\")\n    for(x = [-6, 6]) {\n        translate([x, -5, 4])\n        scale([1.2, 1, 1])\n        sphere(3);\n    }\n    \n    // Eye highlights\n    color(\"yellow\")\n    for(x = [-6, 6]) {\n        translate([x-1, -5.5, 5])\n        sphere(1);\n    }\n    \n    // White hair tufts\n    color(\"white\")\n    for(i = [0:2]) {\n        rotate([0, 0, i*120])\n        translate([0, 0, 12])\n        scale([0.3, 0.3, 1])\n        cylinder(h = 8, r = 3);\n    }\n}\n\nmodule chest_fan() {\n    color(\"tan\")\n    difference() {\n        // Main fan\n        scale([1.2, 0.8, 0.3])\n        sphere(15);\n        \n        // Center hole\n        scale([0.3, 0.3, 1])\n        sphere(15);\n    }\n    \n    // Fan spokes\n    color(\"saddlebrown\")\n    for(i = [0:5]) {\n        rotate([0, 0, i*60])\n        translate([7, 0, 0])\n        scale([0.3, 2, 0.3])\n        cube([10, 1, 1]);\n    }\n}\n\nmodule arm() {\n    // Upper arm\n    color(\"saddlebrown\")\n    translate([0, -5, 0])\n    rotate([0, 90, 0])\n    cylinder(h = 12, r = 3);\n    \n    // Lower arm\n    translate([0, -11, 0])\n    rotate([0, 90, 0])\n    cylinder(h = 10, r = 2.5);\n    \n    // Hand\n    translate([0, -16, 0])\n    sphere(3);\n    \n    // Fingers\n    color(\"tan\")\n    for(i = [-1, 0, 1]) {\n        rotate([0, 0, i*30])\n        translate([0, -18, 0])\n        scale([0.3, 0.3, 1.5])\n        sphere(2);\n    }\n}\n\nmodule leg() {\n    // Upper leg\n    color(\"saddlebrown\")\n    translate([0, 0, -8])\n    cylinder(h = 15, r = 3.5);\n    \n    // Lower leg\n    translate([0, 0, -20])\n    cylinder(h = 12, r = 3);\n    \n    // Foot\n    color(\"tan\")\n    translate([0, -3, -30])\n    scale([1.5, 2, 0.8])\n    sphere(3);\n}\n\nmodule shiftry() {\n    // Main body\n    color(\"saddlebrown\")\n    translate([0, 0, 0])\n    scale([1, 0.8, 1.5])\n    sphere(15);\n    \n    // Head\n    translate([0, 15, 10])\n    head();\n    \n    // Chest fan\n    translate([0, 5, 0])\n    chest_fan();\n    \n    // Arms\n    translate([18, 5, 5])\n    rotate([0, 0, 30])\n    arm();\n    \n    translate([-18, 5, 5])\n    rotate([0, 0, -30])\n    mirror([1, 0, 0])\n    arm();\n    \n    // Legs\n    translate([8, 0, -20])\n    leg();\n    \n    translate([-8, 0, -20])\n    leg();\n    \n    // Leaf fans\n    translate([15, 10, 15])\n    rotate([0, 0, -30])\n    leaf();\n    \n    translate([-15, 10, 15])\n    rotate([0, 0, 30])\n    mirror([1, 0, 0])\n    leaf();\n    \n    // Back leaf\n    translate([0, -15, 15])\n    rotate([0, 30, 0])\n    leaf();\n}\n\n// Main assembly\nshiftry();",
    "renders": true
  },
  {
    "pokemon": "taillow",
    "openscad_code": "// Taillow Pokemon - Realistic Style - Medium Complexity\n// Size: ~70mm wingspan\n\n$fn = 32;\n\n// Main colors\ncolor_body = [0.2, 0.2, 0.3];      // Dark blue-gray\ncolor_belly = [0.9, 0.9, 0.95];    // Light gray-white\ncolor_wing = [0.25, 0.25, 0.35];   // Slightly lighter gray\ncolor_beak = [0.95, 0.7, 0.1];     // Orange-yellow\ncolor_eye = [0.1, 0.1, 0.1];       // Black\ncolor_markings = [0.95, 0.2, 0.2]; // Red\n\n// Body module\nmodule body() {\n    color(color_body)\n    union() {\n        // Main body - elongated sphere\n        scale([1.2, 0.8, 1])\n        sphere(8);\n        \n        // Belly - lighter color\n        color(color_belly)\n        translate([0, -2, -5])\n        scale([1.1, 0.6, 0.7])\n        sphere(8);\n        \n        // Tail feathers\n        for(i = [-1, 0, 1]) {\n            translate([0, i*2, -12])\n            rotate([0, i*15, 0])\n            scale([0.3, 1.5, 0.1])\n            cube([8, 2, 1], center=true);\n        }\n    }\n}\n\n// Head module\nmodule head() {\n    color(color_body)\n    union() {\n        // Main head shape\n        translate([10, 0, 5])\n        scale([0.9, 0.8, 0.9])\n        sphere(6);\n        \n        // Beak\n        color(color_beak)\n        translate([16, 0, 5])\n        rotate([0, -20, 0])\n        scale([1, 0.6, 0.4])\n        cylinder(h=6, r1=2, r2=0.5);\n        \n        // Crest\n        color(color_body)\n        translate([12, 0, 11])\n        rotate([20, 0, 0])\n        scale([0.3, 0.1, 1])\n        cylinder(h=8, r=2);\n        \n        // Eyes\n        color(color_eye)\n        for(side = [-1, 1]) {\n            translate([13, side*3.5, 6])\n            sphere(1.2);\n            \n            // Eye highlights\n            color([1, 1, 1])\n            translate([13.5, side*3.3, 6.5])\n            sphere(0.4);\n        }\n        \n        // Red cheek markings\n        color(color_markings)\n        for(side = [-1, 1]) {\n            translate([11, side*4, 4])\n            rotate([0, 90, 0])\n            scale([1, 0.7, 1])\n            cylinder(h=0.5, r=1.5);\n        }\n    }\n}\n\n// Wing module\nmodule wing() {\n    color(color_wing)\n    union() {\n        // Main wing\n        translate([2, 0, 2])\n        rotate([0, 10, 0])\n        scale([1.5, 0.1, 1])\n        sphere(8);\n        \n        // Wing feathers\n        for(i = [1, 2, 3]) {\n            translate([-2 - i*2, 0, 2 - i*1.5])\n            rotate([0, -10 - i*5, 0])\n            scale([1.2 - i*0.2, 0.05, 0.8 - i*0.1])\n            sphere(6 + i);\n        }\n    }\n}\n\n// Leg module\nmodule leg() {\n    color(color_beak)\n    union() {\n        // Upper leg\n        translate([4, 0, -7])\n        rotate([45, 0, 0])\n        scale([0.3, 0.3, 1])\n        cylinder(h=4, r=1);\n        \n        // Lower leg\n        translate([4, 0, -10])\n        rotate([90, 0, 0])\n        scale([0.3, 0.3, 1])\n        cylinder(h=3, r=0.8);\n        \n        // Foot\n        translate([4, 0, -10.5])\n        scale([1.5, 0.3, 0.3])\n        cube([3, 1, 1], center=true);\n    }\n}\n\n// Main assembly\nunion() {\n    // Body\n    body();\n    \n    // Head\n    head();\n    \n    // Wings\n    for(side = [-1, 1]) {\n        translate([0, side*8, 2])\n        rotate([0, 0, side*20])\n        mirror([0, side, 0])\n        wing();\n    }\n    \n    // Legs\n    for(side = [-1, 1]) {\n        translate([0, side*2, 0])\n        leg();\n    }\n}\n\n// Ground contact support\ntranslate([0, 0, -11.5])\ncolor([0.1, 0.1, 0.1])\ncube([0.5, 0.5, 0.5], center=true);",
    "renders": true
  },
  {
    "pokemon": "swellow",
    "openscad_code": "// Swellow - Realistic Style, Medium Complexity\n// 3D printable Pokemon model using only basic OpenSCAD primitives\n\n$fn = 32;\n\n// Main colors\ncolor_body = [0.1, 0.1, 0.4];      // Dark blue\ncolor_belly = [0.95, 0.95, 0.9];   // Off-white\ncolor_red = [0.8, 0.2, 0.2];       // Red accents\ncolor_beak = [1, 0.8, 0.2];        // Yellow beak\ncolor_eye = [0.1, 0.1, 0.1];       // Black\n\n// Overall scale\nscale_factor = 0.8;\n\nmodule swellow() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        \n        // Main body\n        color(color_body) {\n            // Torso - elongated sphere\n            translate([0, 0, 15])\n                scale([1.2, 1, 1.5])\n                sphere(10);\n                \n            // Belly - lighter colored ellipsoid\n            color(color_belly)\n                translate([0, -5, 10])\n                    scale([1.1, 0.7, 1.3])\n                    sphere(8);\n        }\n        \n        // Head\n        color(color_body) {\n            translate([0, 0, 35])\n                scale([0.9, 0.8, 1.1])\n                sphere(12);\n                \n            // Crest on head\n            color(color_red)\n                translate([0, 0, 44])\n                    rotate([10, 0, 0])\n                    scale([0.3, 0.1, 0.8])\n                    cylinder(8, 3, 0.5);\n        }\n        \n        // Beak\n        color(color_beak) {\n            // Upper beak\n            translate([0, 12, 32])\n                rotate([20, 0, 0])\n                scale([1, 1.5, 0.8])\n                cylinder(8, 3, 1);\n                \n            // Lower beak\n            translate([0, 12, 30])\n                rotate([-20, 0, 0])\n                scale([0.9, 1.3, 0.7])\n                cylinder(6, 2.5, 1);\n        }\n        \n        // Eyes\n        module eye() {\n            color(color_eye)\n                translate([0, 0, 0])\n                    sphere(2);\n            color([1, 1, 1])\n                translate([0.8, -0.5, 0.8])\n                    sphere(0.8);\n        }\n        \n        translate([5, 8, 35])\n            eye();\n        translate([-5, 8, 35])\n            mirror([1, 0, 0])\n            eye();\n        \n        // Wings\n        module wing() {\n            color(color_body) {\n                // Main wing structure\n                translate([0, 0, 0])\n                    rotate([0, 0, -10])\n                    scale([1, 0.2, 2.5])\n                    cube([15, 3, 25]);\n                    \n                // Wing tip\n                translate([0, 0, 25])\n                    rotate([0, 0, -20])\n                    scale([0.8, 0.15, 1])\n                    cube([12, 2, 15]);\n                    \n                // Red wing markings\n                color(color_red)\n                    for(i = [0:2]) {\n                        translate([0, 2, 8 + i*6])\n                            rotate([0, 0, -5])\n                            scale([0.9, 0.1, 0.3])\n                            cube([13, 1, 3]);\n                    }\n            }\n        }\n        \n        // Left wing\n        translate([12, 0, 25])\n            rotate([0, 0, 30])\n            rotate([10, 0, 0])\n            wing();\n            \n        // Right wing\n        translate([-12, 0, 25])\n            mirror([1, 0, 0])\n            rotate([0, 0, 30])\n            rotate([10, 0, 0])\n            wing();\n        \n        // Tail feathers\n        module tail_feather() {\n            color(color_body) {\n                rotate([0, 0, 0])\n                    scale([0.3, 0.15, 2])\n                    cube([8, 2, 20]);\n            }\n        }\n        \n        // Three tail feathers\n        for(i = [-1:1]) {\n            translate([i*5, 0, 5])\n                rotate([i*5, 0, 0])\n                tail_feather();\n        }\n        \n        // Red tail markings\n        color(color_red)\n            for(i = [-1:1]) {\n                translate([i*5, 1.5, 15])\n                    scale([0.25, 0.1, 0.5])\n                    cube([7, 1, 8]);\n            }\n        \n        // Legs\n        module leg() {\n            color(color_beak) {\n                // Upper leg\n                translate([0, 0, 0])\n                    rotate([0, 0, 20])\n                    cylinder(6, 2, 1.5);\n                    \n                // Lower leg\n                translate([0, 3, -5])\n                    rotate([0, 0, -10])\n                    cylinder(5, 1.5, 1.2);\n                    \n                // Foot\n                translate([0, 2, -10])\n                    scale([1.5, 0.8, 0.5])\n                    cube([4, 2, 1]);\n                    \n                // Toes\n                for(j = [0:2]) {\n                    translate([j*1.5 - 1.5, 2, -11])\n                        scale([0.8, 0.3, 0.3])\n                        cube([2, 1, 2]);\n                }\n            }\n        }\n        \n        // Left leg\n        translate([5, -5, 10])\n            rotate([10, 0, 0])\n            leg();\n            \n        // Right leg\n        translate([-5, -5, 10])\n            mirror([1, 0, 0])\n            rotate([10, 0, 0])\n            leg();\n    }\n}\n\n// Generate the complete model\nswellow();",
    "renders": true
  },
  {
    "pokemon": "wingull",
    "openscad_code": "// Wingull 3D printable model - Realistic style, medium complexity\n// Size: ~70mm wingspan\n// Colors: white body, light-blue accents, orange beak/feet, black eyes\n\n$fn = 32;\nbody_color = \"white\";\naccent_color = \"lightblue\";\nbeak_color = \"orange\";\neye_color = \"black\";\n\nmodule wingull_body() {\n    color(body_color)\n    union() {\n        // Main body - elongated sphere\n        scale([1.2, 0.8, 1])\n        sphere(12);\n        \n        // Tail feathers\n        for(i = [0:2]) {\n            rotate([0, 0, -20 + i*20])\n            translate([0, -10, 0])\n            scale([1.2 - i*0.3, 0.3, 0.1])\n            sphere(5);\n        }\n    }\n}\n\nmodule wingull_head() {\n    color(body_color)\n    union() {\n        // Head sphere\n        translate([0, 12, 8])\n        sphere(8);\n        \n        // Beak\n        color(beak_color)\n        translate([0, 20, 7])\n        rotate([0, -15, 0])\n        scale([0.3, 2, 0.2])\n        cylinder(8, 3, 1);\n        \n        // Eyes\n        color(eye_color)\n        for(side = [-1, 1]) {\n            translate([side*4, 14, 10])\n            sphere(2);\n        }\n        \n        // Crest\n        color(accent_color)\n        translate([0, 10, 15])\n        rotate([0, -30, 0])\n        scale([0.5, 0.2, 1])\n        cylinder(6, 3, 1);\n    }\n}\n\nmodule wingull_wing(side = 1) {\n    color(body_color)\n    union() {\n        // Main wing\n        translate([0, 0, 3])\n        rotate([0, 0, side * 30])\n        scale([3, 0.8, 0.2])\n        sphere(8);\n        \n        // Wing tip\n        translate([side * 20, -5, 3])\n        rotate([0, 0, side * 45])\n        scale([1.2, 0.4, 0.2])\n        sphere(6);\n        \n        // Blue marking\n        color(accent_color)\n        translate([side * 15, 0, 4])\n        rotate([0, 0, side * 30])\n        scale([1.5, 0.3, 0.1])\n        sphere(6);\n    }\n}\n\nmodule wingull_feet() {\n    color(beak_color)\n    union() {\n        for(side = [-1, 1]) {\n            // Leg\n            translate([side * 4, -5, -10])\n            cylinder(6, 1.5, 1.5);\n            \n            // Foot\n            translate([side * 6, -5, -16])\n            rotate([0, 90, 0])\n            scale([1.5, 0.5, 0.3])\n            cylinder(4, 2, 1);\n            \n            // Toes\n            for(i = [-1, 0, 1]) {\n                translate([side * 6 + i*2, -5, -16])\n                rotate([0, 90, 0])\n                scale([0.5, 0.3, 0.2])\n                cylinder(3, 1, 0.5);\n            }\n        }\n    }\n}\n\n// Assembly\nwingull_body();\nwingull_head();\n\n// Wings positioned for 3D printing (flat against body)\nrotate([0, 0, 0])\ntranslate([0, 0, 3])\nwingull_wing(1);\n\nrotate([0, 0, 0])\ntranslate([0, 0, 3])\nmirror([1, 0, 0])\nwingull_wing(-1);\n\n// Feet flat on build plate\nwingull_feet();",
    "renders": true
  },
  {
    "pokemon": "pelipper",
    "openscad_code": "// Pelipper - Realistic Style, Medium Complexity\n// Approximate size: 80mm wingspan\n\n$fn = 32;\n\n// Main colors\ncolor_body = [0.2, 0.4, 0.8];      // Blue body\ncolor_belly = [1, 1, 1];           // White belly\ncolor_beak = [0.9, 0.6, 0.2];      // Orange/yellow beak\ncolor_eyes = [0.1, 0.1, 0.1];      // Black eyes\n\nmodule pelipper() {\n    union() {\n        // Body\n        color(color_body)\n        translate([0, 0, 15])\n        scale([1.2, 1, 1.2])\n        sphere(15);\n        \n        // Belly\n        color(color_belly)\n        translate([0, -8, 12])\n        scale([0.9, 0.7, 0.8])\n        sphere(12);\n        \n        // Head\n        color(color_body)\n        translate([0, 0, 35])\n        scale([0.9, 0.8, 1.1])\n        sphere(12);\n        \n        // Beak - upper part\n        color(color_beak)\n        translate([0, 0, 42])\n        rotate([15, 0, 0])\n        scale([1, 0.6, 2])\n        cylinder(h=15, r1=8, r2=12);\n        \n        // Beak - lower part\n        color(color_beak)\n        translate([0, -2, 35])\n        rotate([-20, 0, 0])\n        scale([0.9, 0.5, 1.8])\n        cylinder(h=12, r1=7, r2=10);\n        \n        // Eyes\n        for(x = [-5, 5]) {\n            color(color_eyes)\n            translate([x, 6, 38])\n            sphere(2);\n            \n            // White highlight\n            color([1, 1, 1])\n            translate([x+1, 7, 39])\n            sphere(0.8);\n        }\n        \n        // Wings\n        module wing(side) {\n            color(color_body)\n            translate([0, 0, 25])\n            rotate([0, 0, side * 45])\n            translate([side * 20, 0, 0])\n            rotate([0, side * 20, 0])\n            scale([2, 0.8, 0.3])\n            sphere(10);\n            \n            // Wing tip\n            color(color_body)\n            translate([0, 0, 25])\n            rotate([0, 0, side * 45])\n            translate([side * 30, 0, 5])\n            rotate([0, side * 30, 0])\n            scale([0.8, 0.5, 0.2])\n            sphere(8);\n        }\n        \n        wing(1);\n        wing(-1);\n        \n        // Tail\n        color(color_body)\n        translate([0, 0, 5])\n        rotate([0, 0, 0])\n        scale([1, 0.5, 1.5])\n        cylinder(h=8, r1=5, r2=2);\n        \n        // Feet\n        module foot(side) {\n            color(color_beak)\n            translate([side * 8, -10, 0])\n            rotate([0, 10, 0])\n            scale([0.3, 1, 1])\n            cylinder(h=8, r=3);\n            \n            // Webbed toes\n            for(i = [-1, 0, 1]) {\n                color(color_beak)\n                translate([side * (8 + i*2), -10, -3])\n                rotate([0, 90, 0])\n                scale([0.8, 0.3, 1])\n                cylinder(h=4, r=2);\n            }\n        }\n        \n        foot(1);\n        foot(-1);\n        \n        // Blue marking on head\n        color([0.15, 0.3, 0.7])\n        translate([0, 3, 45])\n        scale([1.2, 0.8, 0.3])\n        sphere(8);\n        \n        // White marking on beak\n        color(color_belly)\n        translate([0, -2, 48])\n        rotate([15, 0, 0])\n        scale([0.5, 0.3, 0.5])\n        sphere(6);\n    }\n}\n\n// Scale to 80mm wingspan\nscale(0.4)\npelipper();",
    "renders": true
  },
  {
    "pokemon": "ralts",
    "openscad_code": "// Ralts Pokemon - Realistic Style, Medium Complexity\n// Size: ~70mm tall\n\n// Color definitions\n$fa = 1;\n$fs = 0.4;\n\nmodule ralts() {\n    // Main body - light green\n    color([0.6, 0.9, 0.6]) {\n        // Torso\n        translate([0, 0, 25]) \n            scale([1, 0.8, 1.2])\n                sphere(d=30);\n        \n        // Lower body flare\n        translate([0, 0, 15]) \n            cylinder(h=15, d1=25, d2=35);\n    }\n    \n    // Head\n    color([0.7, 0.9, 0.7]) {\n        translate([0, 0, 45]) \n            sphere(d=28);\n    }\n    \n    // Hair - red/maroon\n    color([0.6, 0.2, 0.3]) {\n        // Central horn\n        translate([0, -5, 58]) \n            rotate([10, 0, 0])\n                cylinder(h=20, d1=12, d2=4);\n        \n        // Side horns\n        for(i=[-1:1]) if(i!=0) {\n            translate([i*12, -8, 55]) \n                rotate([15*i, 0, 20*i])\n                    cylinder(h=18, d1=8, d2=3);\n        }\n    }\n    \n    // Ears - light green\n    color([0.6, 0.9, 0.6]) {\n        for(i=[-1, 1]) {\n            translate([i*12, 12, 52]) {\n                rotate([0, 0, -30*i])\n                    scale([0.6, 1, 2.5])\n                        sphere(d=10);\n            }\n        }\n    }\n    \n    // Arms - light green\n    color([0.6, 0.9, 0.6]) {\n        for(side=[-1, 1]) {\n            translate([side*12, 15, 32]) {\n                rotate([0, 0, side*20])\n                    scale([0.8, 0.8, 1.2])\n                        sphere(d=10);\n            }\n        }\n    }\n    \n    // Legs - light green\n    color([0.6, 0.9, 0.6]) {\n        for(side=[-1, 1]) {\n            translate([side*8, 0, 10]) {\n                rotate([0, 0, side*10])\n                    cylinder(h=12, d=8);\n            }\n        }\n    }\n    \n    // Eyes - blue\n    color([0.2, 0.4, 0.8]) {\n        for(side=[-1, 1]) {\n            translate([side*7, 12, 45]) {\n                scale([1, 1.5, 0.5])\n                    sphere(d=6);\n            }\n        }\n    }\n    \n    // Eye highlights - white\n    color([1, 1, 1]) {\n        for(side=[-1, 1]) {\n            translate([side*6, 13, 46]) {\n                sphere(d=2);\n            }\n        }\n    }\n    \n    // Face mask - white\n    color([0.95, 0.95, 0.95]) {\n        difference() {\n            translate([0, 8, 42]) \n                scale([0.9, 0.7, 0.3])\n                    sphere(d=22);\n            \n            // Cutout for eyes\n            for(side=[-1, 1]) {\n                translate([side*7, 12, 45]) {\n                    scale([1.2, 1.8, 1])\n                        sphere(d=8);\n                }\n            }\n        }\n    }\n}\n\n// Generate the model\nralts();",
    "renders": true
  },
  {
    "pokemon": "kirlia",
    "openscad_code": "// Kirlia - Realistic Style, Medium Complexity\n// Overall height ~80mm\n\n$fn = 32;\nscale_factor = 0.8;\n\nmodule kirlia() {\n    // Main body color - light green\n    color([0.6,0.9,0.6]) {\n        // Head\n        translate([0,0,65*scale_factor])\n            rotate([0,0,0])\n            sphere(8*scale_factor);\n        \n        // Body\n        translate([0,0,45*scale_factor])\n            cylinder(h=25*scale_factor, r1=6*scale_factor, r2=8*scale_factor);\n    }\n    \n    // Torso dress\n    color([0.4,0.7,0.4]) {\n        translate([0,0,25*scale_factor])\n            cylinder(h=20*scale_factor, r1=8*scale_factor, r2=12*scale_factor);\n    }\n    \n    // Legs\n    for(x=[-2.5,2.5]) {\n        color([0.6,0.9,0.6])\n            translate([x*scale_factor,-2*scale_factor,10*scale_factor])\n                cylinder(h=15*scale_factor, r=2*scale_factor);\n    }\n    \n    // Arms\n    module arm(side) {\n        color([0.6,0.9,0.6])\n            translate([side*6*scale_factor,0,40*scale_factor])\n                rotate([0,side*15,0])\n                cylinder(h=15*scale_factor, r=2*scale_factor);\n    }\n    \n    arm(1);\n    arm(-1);\n    \n    // Hair - red horn-like\n    color([0.9,0.3,0.4]) {\n        // Left horn\n        translate([-4*scale_factor,0,72*scale_factor])\n            rotate([0,-15,0])\n            cylinder(h=12*scale_factor, r1=2*scale_factor, r2=0.5*scale_factor);\n        \n        // Right horn\n        translate([4*scale_factor,0,72*scale_factor])\n            rotate([0,15,0])\n            cylinder(h=12*scale_factor, r1=2*scale_factor, r2=0.5*scale_factor);\n    }\n    \n    // Hair back\n    color([0.9,0.3,0.4])\n        translate([0,-6*scale_factor,65*scale_factor])\n            rotate([30,0,0])\n            scale([1,0.6,1])\n            sphere(7*scale_factor);\n    \n    // Eyes\n    color([0.1,0.1,0.9])\n        for(x=[-2.5,2.5]) {\n            translate([x*scale_factor,3.5*scale_factor,67*scale_factor])\n                sphere(1.5*scale_factor);\n        }\n    \n    // Mouth\n    color([0.8,0.4,0.6])\n        translate([0,5*scale_factor,64*scale_factor])\n            scale([2,0.5,1])\n            sphere(1*scale_factor);\n    \n    // Chest spike\n    color([0.9,0.3,0.4])\n        translate([0,8*scale_factor,50*scale_factor])\n            rotate([90,0,0])\n            cylinder(h=4*scale_factor, r1=1*scale_factor, r2=0.5*scale_factor);\n    \n    // Wings/appendages\n    module wing(side) {\n        color([0.9,0.3,0.4])\n            translate([side*12*scale_factor,0,45*scale_factor])\n                rotate([0,0,side*30])\n                scale([0.3,1,1])\n                sphere(10*scale_factor);\n    }\n    \n    wing(1);\n    wing(-1);\n    \n    // Feet\n    for(x=[-2.5,2.5]) {\n        color([0.9,0.3,0.4])\n            translate([x*scale_factor,-2*scale_factor,5*scale_factor])\n                cube([4*scale_factor,6*scale_factor,2*scale_factor], center=true);\n    }\n}\n\nkirlia();",
    "renders": true
  },
  {
    "pokemon": "gardevoir",
    "openscad_code": "// Gardevoir - Realistic style, medium complexity\n// Dimensions: ~80mm tall\n\nmodule gardevoir() {\n    color([0.82, 0.71, 0.82]) { // Light purple main body\n        // Head\n        translate([0, 0, 70]) {\n            sphere(8);\n            \n            // Hair crest\n            translate([0, 0, 8]) {\n                rotate([15, 0, 0]) cylinder(12, 8, 0);\n                rotate([-15, 0, 0]) cylinder(12, 8, 0);\n                rotate([0, 15, 0]) cylinder(12, 8, 0);\n                rotate([0, -15, 0]) cylinder(12, 8, 0);\n            }\n            \n            // Eyes\n            color(\"red\") {\n                translate([3, 5, 3]) sphere(1.5);\n                translate([-3, 5, 3]) sphere(1.5);\n            }\n            \n            // Mouth\n            color(\"black\") {\n                translate([0, 7, 0]) cube([2, 0.5, 0.5], center=true);\n            }\n        }\n        \n        // Torso\n        translate([0, 0, 45]) {\n            cylinder(20, 6, 8);\n            \n            // Chest spike\n            translate([0, 6, 12]) {\n                rotate([90, 0, 0]) cylinder(8, 2, 0);\n            }\n        }\n        \n        // Arms\n        for(side = [-1, 1]) {\n            translate([side * 8, 4, 50]) {\n                rotate([0, 0, side * -20]) {\n                    cylinder(15, 2, 2);\n                    translate([0, 0, 15]) {\n                        sphere(2);\n                    }\n                }\n            }\n        }\n        \n        // Legs\n        for(side = [-1, 1]) {\n            translate([side * 4, 0, 25]) {\n                cylinder(20, 3, 3);\n                translate([0, 0, 20]) {\n                    sphere(3);\n                }\n            }\n        }\n        \n        // Dress/skirt\n        color([0.95, 0.85, 0.95]) { // Lighter purple\n            translate([0, 0, 25]) {\n                difference() {\n                    cylinder(15, 12, 15);\n                    cylinder(15, 5, 8);\n                }\n            }\n        }\n        \n        // Wings\n        color([0.7, 0.6, 0.8]) { // Darker purple\n            for(side = [-1, 1]) {\n                translate([side * 12, -5, 45]) {\n                    rotate([0, side * 20, 0]) {\n                        scale([1, 0.3, 1]) {\n                            sphere(12);\n                        }\n                        translate([side * 6, 0, 0]) {\n                            scale([0.8, 0.3, 0.8]) {\n                                sphere(8);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Back horns/spikes\n        translate([0, -7, 55]) {\n            rotate([90, 0, 0]) {\n                cylinder(10, 3, 0);\n            }\n            translate([3, -2, 0]) {\n                rotate([90, 0, 0]) {\n                    cylinder(8, 2, 0);\n                }\n            }\n            translate([-3, -2, 0]) {\n                rotate([90, 0, 0]) {\n                    cylinder(8, 2, 0);\n                }\n            }\n        }\n    }\n}\n\n// Create the model\ngardevoir();",
    "renders": true
  },
  {
    "pokemon": "surskit",
    "openscad_code": "// Surskit - Water/Bug type Pokemon\n// Realistic style with medium complexity\n// Dimensions: ~70mm length\n\n$fn = 32;\n\n// Main colors\ncolor_body = [0.2, 0.4, 0.8];\ncolor_legs = [0.1, 0.3, 0.7];\ncolor_markings = [0.9, 0.9, 0.9];\ncolor_eyes = [0.1, 0.1, 0.1];\n\n// Main body - water strider shape\nmodule body() {\n    color(color_body) {\n        union() {\n            // Central body segment\n            translate([0, 0, 4])\n                scale([1.2, 0.8, 0.6])\n                sphere(d = 20);\n            \n            // Front segment (head)\n            translate([-12, 0, 5])\n                scale([1, 0.9, 0.7])\n                sphere(d = 16);\n            \n            // Rear segment\n            translate([12, 0, 3])\n                scale([0.9, 0.7, 0.5])\n                sphere(d = 14);\n        }\n    }\n}\n\n// Legs - 6 water-walking legs\nmodule legs() {\n    color(color_legs) {\n        // Front pair\n        for(side = [-1, 1]) {\n            translate([-5, side * 15, 6]) {\n                rotate([0, 40, side * 20])\n                    cylinder(h = 25, d1 = 3, d2 = 1.5);\n            }\n            translate([0, side * 20, 5]) {\n                rotate([0, 30, side * 15])\n                    cylinder(h = 30, d1 = 2.5, d2 = 1);\n            }\n        }\n        \n        // Middle pair\n        for(side = [-1, 1]) {\n            translate([8, side * 18, 4]) {\n                rotate([0, 20, side * 10])\n                    cylinder(h = 28, d1 = 2.5, d2 = 1);\n            }\n        }\n        \n        // Rear pair\n        for(side = [-1, 1]) {\n            translate([15, side * 12, 3]) {\n                rotate([0, 10, side * 5])\n                    cylinder(h = 20, d1 = 2, d2 = 1);\n            }\n            translate([18, side * 8, 2]) {\n                rotate([0, 0, side * 0])\n                    cylinder(h = 15, d1 = 1.5, d2 = 1);\n            }\n        }\n    }\n}\n\n// Eye stalks\nmodule eye_stalks() {\n    color(color_body) {\n        for(side = [-1, 1]) {\n            translate([-8, side * 6, 12]) {\n                rotate([0, -10, 0])\n                    cylinder(h = 8, d = 4);\n                translate([0, 0, 8])\n                    sphere(d = 5);\n            }\n        }\n    }\n}\n\n// Eyes\nmodule eyes() {\n    color(color_eyes) {\n        for(side = [-1, 1]) {\n            translate([-8.5, side * 6.5, 20]) {\n                sphere(d = 3);\n                // Eye highlight\n                color([1, 1, 1])\n                    translate([0.5, -0.5, 1])\n                    sphere(d = 1);\n            }\n        }\n    }\n}\n\n// Yellow crown marking on head\nmodule crown_marking() {\n    color(color_markings) {\n        translate([-15, 0, 13])\n            scale([1.2, 0.3, 0.2])\n            sphere(d = 10);\n        \n        // Three points of crown\n        for(i = [-1, 0, 1]) {\n            translate([-15 + i * 3, 0, 14.5])\n                sphere(d = 2.5);\n        }\n    }\n}\n\n// Water strider feet pads (for floating)\nmodule feet_pads() {\n    color(color_legs) {\n        // Create small pads at leg tips\n        for(x = [-5, 0, 8, 15, 18]) {\n            for(y = [-20, -15, -8, 8, 15, 20]) {\n                if(x != 8 || abs(y) != 15) {\n                    if(x != 15 || abs(y) != 12) {\n                        translate([x, y, 0])\n                            scale([1, 1, 0.3])\n                            sphere(d = 3);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    legs();\n    eye_stalks();\n    eyes();\n    crown_marking();\n    feet_pads();\n}\n\n// Add subtle texture lines on body\nmodule body_lines() {\n    color([0.15, 0.35, 0.75]) {\n        for(i = [-10:5:10]) {\n            translate([i, 0, 8])\n                scale([0.5, 0.8, 0.05])\n                sphere(d = 15);\n        }\n    }\n}\n\nbody_lines();",
    "renders": true
  },
  {
    "pokemon": "masquerain",
    "openscad_code": "// Masquerain 3D model - Realistic style, medium complexity\n// Based on the Bug/Flying type Pokemon with distinctive eye patterns\n\n// Main colors\ncolor_body = [0.2, 0.4, 0.8];      // Blue body\ncolor_wings = [0.9, 0.9, 1.0];     // Light blue wings\ncolor_eyes = [0.9, 0.1, 0.1];      // Red eyes\ncolor_markings = [0.95, 0.95, 0.95]; // White markings\ncolor_legs = [0.6, 0.3, 0.1];      // Brown legs\n\n// Wall thickness for 3D printing\nwall = 1.2;\n\n// Main body module\nmodule body() {\n    color(color_body)\n    union() {\n        // Central body - egg shape\n        translate([0, 0, 10])\n        scale([1, 1.2, 1.3])\n        sphere(r=8, $fn=32);\n        \n        // Head segment\n        translate([0, 0, 22])\n        scale([0.8, 0.9, 0.7])\n        sphere(r=7, $fn=32);\n        \n        // Thorax connection\n        translate([0, 0, 2])\n        cylinder(h=8, r1=6, r2=5, $fn=24);\n    }\n}\n\n// Eye stalk with pattern\nmodule eye_stalk(x_pos, y_pos, angle) {\n    color(color_body)\n    rotate([0, 0, angle])\n    translate([x_pos, y_pos, 18])\n    union() {\n        // Stalk\n        rotate([90, 0, 0])\n        cylinder(h=12, r=2.5, $fn=16);\n        \n        // Eye bulb\n        translate([0, 0, 12])\n        sphere(r=5, $fn=32);\n        \n        // Eye pattern - four white spots\n        color(color_markings)\n        translate([0, 2.5, 0])\n        sphere(r=1.2, $fn=16);\n        \n        color(color_markings)\n        translate([2.5, 0, 0])\n        sphere(r=1.2, $fn=16);\n        \n        color(color_markings)\n        translate([0, -2.5, 0])\n        sphere(r=1.2, $fn=16);\n        \n        color(color_markings)\n        translate([-2.5, 0, 0])\n        sphere(r=1.2, $fn=16);\n        \n        // Central red eye\n        color(color_eyes)\n        translate([0, 0, 2.8])\n        sphere(r=2.2, $fn=24);\n    }\n}\n\n// Wing module with vein details\nmodule wing(x_pos, y_pos, angle, scale_x, scale_y) {\n    color(color_wings)\n    translate([x_pos, y_pos, 15])\n    rotate([0, 0, angle])\n    scale([scale_x, scale_y, 1])\n    union() {\n        // Main wing shape\n        difference() {\n            scale([1, 0.7, 1])\n            sphere(r=15, $fn=32);\n            \n            // Wing cutout\n            translate([5, 0, 0])\n            scale([0.4, 0.4, 1])\n            sphere(r=15, $fn=32);\n        }\n        \n        // Wing veins\n        color([0.7, 0.7, 0.9])\n        for(i = [-1, 0, 1]) {\n            translate([i * 3, -8, 0.5])\n            cube([0.5, 16, 0.3]);\n        }\n        \n        // Cross veins\n        for(i = [-6, -3, 0, 3, 6]) {\n            translate([-8, i, 0.5])\n            cube([16, 0.5, 0.3]);\n        }\n    }\n}\n\n// Leg module\nmodule leg(x_pos, y_pos, angle) {\n    color(color_legs)\n    translate([x_pos, y_pos, 8])\n    rotate([0, 0, angle])\n    union() {\n        // Upper leg segment\n        cylinder(h=6, r=1.5, $fn=12);\n        \n        // Lower leg segment\n        translate([0, 0, -6])\n        rotate([30, 0, 0])\n        cylinder(h=8, r=1.2, $fn=12);\n        \n        // Foot\n        translate([0, 0, -14])\n        rotate([90, 0, 0])\n        cylinder(h=3, r1=2, r2=1, $fn=12);\n    }\n}\n\n// Antenna module\nmodule antenna(x_pos, y_pos, angle) {\n    color(color_body)\n    translate([x_pos, y_pos, 24])\n    rotate([0, 0, angle])\n    union() {\n        // Main antenna\n        rotate([45, 0, 0])\n        cylinder(h=8, r=0.8, $fn=12);\n        \n        // Antenna tip\n        translate([0, 4, 4])\n        sphere(r=1.5, $fn=16);\n    }\n}\n\n// Main assembly\nunion() {\n    // Central body\n    body();\n    \n    // Four eye stalks\n    eye_stalk(12, 0, 0);\n    eye_stalk(-12, 0, 180);\n    eye_stalk(0, 12, 90);\n    eye_stalk(0, -12, -90);\n    \n    // Four wings\n    wing(15, 0, 0, 1, 1);\n    wing(-15, 0, 180, -1, 1);\n    wing(0, 15, 90, 1, 1);\n    wing(0, -15, -90, 1, -1);\n    \n    // Six legs\n    leg(6, 6, 45);\n    leg(-6, 6, 135);\n    leg(8, -4, 15);\n    leg(-8, -4, 165);\n    leg(4, -8, -45);\n    leg(-4, -8, -135);\n    \n    // Two antennae\n    antenna(3, 3, 30);\n    antenna(-3, 3, 150);\n}",
    "renders": true
  },
  {
    "pokemon": "shroomish",
    "openscad_code": "color(\"saddlebrown\")\nunion() {\n    // Main body - mushroom cap\n    translate([0, 0, 20])\n    scale([1.2, 1, 0.8])\n    sphere(12, $fn=32);\n    \n    // Body sphere\n    color(\"beige\")\n    sphere(15, $fn=32);\n    \n    // Underside gills\n    color(\"tan\")\n    for(i=[0:15:165]) {\n        rotate([i, 0, 0])\n        translate([0, 0, 10])\n        cylinder(h=3, r1=8, r2=9, $fn=16);\n    }\n}\n\n// Feet\nmodule foot() {\n    color(\"saddlebrown\")\n    union() {\n        translate([0, 0, 5])\n        sphere(4, $fn=16);\n        translate([0, 0, 2.5])\n        cylinder(h=5, r1=4, r2=3, $fn=12);\n    }\n}\n\ntranslate([-8, -8, -10]) foot();\ntranslate([8, -8, -10]) foot();\ntranslate([0, 8, -10]) foot();\n\n// Spots on cap\ncolor(\"darkgreen\")\nmodule spot() {\n    scale([1, 1, 0.3])\n    sphere(2.5, $fn=12);\n}\n\ntranslate([10, 0, 25]) spot();\ntranslate([-8, 5, 24]) spot();\ntranslate([0, -8, 26]) spot();\ntranslate([-5, -5, 25]) spot();\ntranslate([6, 7, 24]) spot();\n\n// Eyes\nmodule eye() {\n    color(\"black\")\n    difference() {\n        sphere(2.5, $fn=16);\n        translate([0, 1, 1])\n        scale([0.3, 0.3, 1])\n        sphere(3, $fn=8);\n    }\n}\n\ntranslate([-5, 10, 8]) eye();\ntranslate([5, 10, 8]) eye();\n\n// Mouth\ncolor(\"black\")\ntranslate([0, 12, 4])\nrotate([90, 0, 0])\ncylinder(h=0.5, r1=3, r2=2, $fn=16);\n\n// Gills detail\ncolor(\"tan\")\nfor(i=[0:30:330]) {\n    rotate([0, 0, i])\n    translate([0, 7, 10])\n    scale([1, 0.2, 1])\n    cylinder(h=8, r1=1, r2=0.5, $fn=8);\n}",
    "renders": true
  },
  {
    "pokemon": "breloom",
    "openscad_code": "// Breloom OpenSCAD Model - Realistic Style, Medium Complexity\n// Overall height ~70mm\n\ncolor(\"forestgreen\")\nunion() {\n    // Main body\n    translate([0,0,20])\n    scale([1,0.8,1.2])\n    sphere(r=15, $fn=32);\n\n    // Head\n    translate([0,18,35])\n    scale([0.9,1,1])\n    sphere(r=12, $fn=32);\n\n    // Mushroom cap\n    color(\"beige\")\n    translate([0,15,45])\n    rotate([0,0,0])\n    scale([1.8,1.5,0.5])\n    sphere(r=12, $fn=32);\n\n    // Cap spots\n    color(\"saddlebrown\")\n    for(i=[-1,1])\n    translate([i*8,18,50])\n    sphere(r=2, $fn=16);\n\n    // Tail\n    color(\"forestgreen\")\n    translate([0,-18,22])\n    rotate([0,20,0])\n    scale([0.3,0.3,1.5])\n    cylinder(r1=8, r2=4, h=20, $fn=16);\n\n    // Legs\n    module leg(posX, posY) {\n        translate([posX, posY, 10])\n        rotate([0,0,0])\n        cylinder(r=4, h=10, $fn=16);\n        \n        // Feet\n        translate([posX, posY, 0])\n        sphere(r=5, $fn=16);\n    }\n    \n    leg(8, 8);\n    leg(-8, 8);\n    leg(6, -8);\n    leg(-6, -8);\n\n    // Arms\n    module arm(posX) {\n        translate([posX, 12, 25])\n        rotate([0,0,posX>0?-30:30])\n        cylinder(r=3, h=15, $fn=16);\n        \n        // Fist\n        translate([posX + (posX>0?15:-15), 12 + (posX>0?8:-8), 25])\n        sphere(r=5, $fn=16);\n        \n        // Claw\n        color(\"tan\")\n        for(i=[-1,1])\n        translate([posX + (posX>0?15:-15) + i*2, 12 + (posX>0?8:-8), 25 + 3])\n        scale([0.5,0.5,1.5])\n        cylinder(r=1, h=3, $fn=8);\n    }\n    \n    arm(15);\n    arm(-15);\n\n    // Ears\n    color(\"forestgreen\")\n    module ear(posX) {\n        translate([posX, 25, 40])\n        rotate([0,posX>0?-30:30,0])\n        scale([0.5,0.3,1])\n        cylinder(r=4, h=8, $fn=16);\n    }\n    \n    ear(8);\n    ear(-8);\n\n    // Eyes\n    color(\"black\")\n    translate([5,20,38])\n    sphere(r=2, $fn=16);\n    translate([-5,20,38])\n    sphere(r=2, $fn=16);\n\n    // Beak/mouth\n    color(\"tan\")\n    translate([0,22,35])\n    scale([0.8,0.5,1])\n    rotate([90,0,0])\n    cylinder(r1=3, r2=2, h=4, $fn=16);\n\n    // Belly marking\n    color(\"tan\")\n    translate([0,0,15])\n    scale([0.7,0.6,0.3])\n    sphere(r=15, $fn=32);\n\n    // Back spikes\n    color(\"forestgreen\")\n    for(i=[-1,0,1])\n    translate([i*5, -10, 30])\n    rotate([0,20,0])\n    scale([0.5,0.5,1])\n    cylinder(r1=3, r2=0, h=8, $fn=8);\n}",
    "renders": true
  },
  {
    "pokemon": "slakoth",
    "openscad_code": "// Slakoth OpenSCAD Model - Realistic Style, Medium Complexity\n// Based on the Slakoth Pokemon from Generation III\n\n// Color definitions\n$fa = 2;\n$fs = 0.5;\n\n// Main body color\nbody_color = \"#BBA26B\";\n// Darker body accents\naccent_color = \"#8C7A4D\";\n// Nose and mouth color\nnose_color = \"#654321\";\n// Eye color\neye_color = \"#2E4057\";\n// Eye highlight\nhighlight_color = \"#FFFFFF\";\n\n// Scale factor for 3D printing - roughly 80mm tall\nscale_factor = 1.5;\n\n// Main body module\nmodule slakoth_body() {\n    color(body_color) {\n        // Central torso\n        translate([0, 0, 0])\n            scale([1.2, 1.0, 1.3])\n            sphere(r=15);\n        \n        // Belly bulge\n        translate([0, -10, -5])\n            scale([0.9, 0.7, 0.8])\n            sphere(r=15);\n    }\n}\n\n// Head module with facial features\nmodule slakoth_head() {\n    color(body_color) {\n        // Main head shape\n        translate([0, 20, 15])\n            scale([1.0, 0.9, 0.8])\n            sphere(r=18);\n        \n        // Snout/nose area\n        translate([0, 30, 10])\n            scale([0.7, 0.6, 0.5])\n            sphere(r=15);\n    }\n    \n    // Nose\n    color(nose_color)\n        translate([0, 35, 12])\n            scale([1, 1.5, 0.8])\n            sphere(r=3);\n    \n    // Eyes\n    color(eye_color) {\n        translate([-10, 25, 20])\n            sphere(r=4);\n        translate([10, 25, 20])\n            sphere(r=4);\n    }\n    \n    // Eye highlights\n    color(highlight_color) {\n        translate([-9, 26, 22])\n            scale([0.5, 0.5, 0.5])\n            sphere(r=2);\n        translate([11, 26, 22])\n            scale([0.5, 0.5, 0.5])\n            sphere(r=2);\n    }\n    \n    // Mouth line\n    color(nose_color)\n        translate([0, 32, 8])\n            rotate([90, 0, 0])\n            cylinder(h=0.5, r1=3, r2=3);\n}\n\n// Ear module\nmodule slakoth_ear(side) {\n    color(body_color) {\n        translate([side * 15, 15, 25])\n            rotate([0, side * -20, 0])\n            scale([0.3, 0.3, 1.2])\n            cylinder(h=20, r1=8, r2=5);\n    }\n    \n    // Inner ear\n    color(accent_color)\n        translate([side * 15, 15, 25])\n            rotate([0, side * -20, 0])\n            scale([0.2, 0.2, 1.0])\n            cylinder(h=18, r1=6, r2=3);\n}\n\n// Arm module\nmodule slakoth_arm(side) {\n    color(body_color) {\n        // Upper arm\n        translate([side * 20, 0, 0])\n            rotate([90, 0, side * 15])\n            scale([0.8, 0.8, 1])\n            cylinder(h=20, r1=6, r2=4);\n        \n        // Forearm\n        translate([side * 25, -15, -5])\n            rotate([90, 0, side * 30])\n            scale([0.6, 0.6, 1])\n            cylinder(h=15, r1=5, r2=4);\n        \n        // Hand\n        translate([side * 28, -25, -10])\n            sphere(r=6);\n    }\n    \n    // Claws\n    color(nose_color)\n    for(i = [-1, 0, 1]) {\n        translate([side * (28 + i * 2), -28, -10])\n            scale([0.5, 0.5, 1.5])\n            sphere(r=2);\n    }\n}\n\n// Leg module\nmodule slakoth_leg(side) {\n    color(body_color) {\n        // Upper leg\n        translate([side * 12, -15, -15])\n            rotate([0, side * -15, 0])\n            scale([0.9, 0.9, 1])\n            cylinder(h=18, r1=7, r2=5);\n        \n        // Lower leg\n        translate([side * 10, -15, -30])\n            rotate([0, side * -15, 0])\n            scale([0.7, 0.7, 1])\n            cylinder(h=15, r1=5, r2=4);\n        \n        // Foot\n        translate([side * 8, -15, -42])\n            scale([1.5, 0.8, 0.5])\n            sphere(r=8);\n    }\n}\n\n// Back stripe pattern\nmodule slakoth_stripes() {\n    color(accent_color) {\n        for(i = [1, 2, 3]) {\n            translate([0, 10 - i * 8, 10 - i * 5])\n                scale([0.8, 0.1, 0.3])\n                sphere(r=15);\n        }\n    }\n}\n\n// Main assembly\nscale([scale_factor, scale_factor, scale_factor]) {\n    union() {\n        // Core body parts\n        slakoth_body();\n        slakoth_head();\n        \n        // Ears\n        slakoth_ear(-1);  // Left ear\n        slakoth_ear(1);   // Right ear\n        \n        // Arms\n        slakoth_arm(-1);  // Left arm\n        slakoth_arm(1);   // Right arm\n        \n        // Legs\n        slakoth_leg(-1);  // Left leg\n        slakoth_leg(1);   // Right leg\n        \n        // Back details\n        slakoth_stripes();\n    }\n}",
    "renders": true
  },
  {
    "pokemon": "vigoroth",
    "openscad_code": "// Vigoroth - Realistic Medium Complexity\n// Basic colors for Vigoroth: brown body, light tan face/chest, dark brown stripes\n\n$fn = 32;\n\n// Main module\nmodule vigoroth() {\n    // Body\n    color(\"saddlebrown\")\n    union() {\n        // Torso\n        translate([0, 0, 20])\n        scale([1.2, 1, 1.5])\n        sphere(15);\n        \n        // Chest marking\n        color(\"tan\")\n        translate([0, 12, 25])\n        scale([1.3, 0.5, 1.2])\n        sphere(10);\n    }\n    \n    // Head\n    color(\"saddlebrown\")\n    union() {\n        // Main head shape\n        translate([0, -25, 45])\n        scale([1.1, 1.3, 1])\n        sphere(12);\n        \n        // Snout\n        color(\"tan\")\n        translate([0, -35, 42])\n        scale([0.8, 1.2, 0.7])\n        sphere(8);\n        \n        // Nose\n        color(\"black\")\n        translate([0, -43, 42])\n        sphere(2);\n    }\n    \n    // Ears (2 ears)\n    for(side = [-1, 1]) {\n        color(\"saddlebrown\")\n        translate([side * 12, -25, 55])\n        rotate([0, side * 15, 0])\n        scale([0.5, 0.3, 1.5])\n        cylinder(10, 5, 2);\n    }\n    \n    // Eyes\n    for(side = [-1, 1]) {\n        color(\"white\")\n        translate([side * 8, -35, 47])\n        sphere(3);\n        \n        color(\"black\")\n        translate([side * 8.5, -36, 48])\n        sphere(1.5);\n    }\n    \n    // Mouth\n    color(\"black\")\n    translate([0, -40, 38])\n    rotate([90, 0, 0])\n    cylinder(1, 3, 3);\n    \n    // Arms\n    for(side = [-1, 1]) {\n        color(\"saddlebrown\")\n        union() {\n            // Upper arm\n            translate([side * 20, -10, 35])\n            rotate([0, 0, side * -30])\n            scale([0.8, 0.8, 1.2])\n            cylinder(10, 6, 5);\n            \n            // Forearm\n            translate([side * 30, -15, 25])\n            rotate([0, 0, side * -45])\n            scale([0.7, 0.7, 1])\n            cylinder(8, 5, 4);\n            \n            // Hand\n            translate([side * 38, -18, 20])\n            sphere(4);\n            \n            // Claws (3 per hand)\n            for(i = [0:2]) {\n                color(\"darkgray\")\n                translate([side * (38 + i * 2 - 2), -20, 20])\n                rotate([0, 90, 0])\n                scale([0.3, 0.3, 1])\n                cylinder(3, 1, 0.5);\n            }\n        }\n    }\n    \n    // Legs\n    for(side = [-1, 1]) {\n        color(\"saddlebrown\")\n        union() {\n            // Thigh\n            translate([side * 10, 0, 15])\n            rotate([0, 0, side * 15])\n            scale([0.9, 0.9, 1.3])\n            cylinder(12, 7, 6);\n            \n            // Shin\n            translate([side * 15, 0, 5])\n            rotate([0, 0, side * 10])\n            scale([0.8, 0.8, 1.1])\n            cylinder(10, 6, 5);\n            \n            // Foot\n            translate([side * 18, 0, 0])\n            scale([1.2, 0.8, 0.6])\n            sphere(5);\n            \n            // Toes (3 per foot)\n            for(i = [0:2]) {\n                color(\"darkgray\")\n                translate([side * (18 + i * 1.5 - 1.5), -2, 0])\n                sphere(1.5);\n            }\n        }\n    }\n    \n    // Tail\n    color(\"saddlebrown\")\n    union() {\n        translate([0, 20, 25])\n        rotate([30, 0, 0])\n        scale([0.8, 0.8, 1.5])\n        cylinder(15, 6, 4);\n        \n        // Tail tuft\n        translate([0, 30, 15])\n        sphere(5);\n    }\n    \n    // Dark brown stripes\n    color(\"brown\") {\n        // Back stripe\n        translate([0, 5, 35])\n        scale([2, 0.3, 0.2])\n        sphere(10);\n        \n        // Side stripes\n        for(side = [-1, 1]) {\n            translate([side * 15, 5, 25])\n            scale([0.3, 2, 0.2])\n            sphere(8);\n        }\n    }\n}\n\n// Scale and position the model for printing\nscale(0.8)\ntranslate([0, 0, 5])\nvigoroth();",
    "renders": true
  },
  {
    "pokemon": "slaking",
    "openscad_code": "// Slaking Pokemon Model - Medium Complexity Realistic Style\n// 3D printable at ~70mm height\n\nmodule slaking() {\n    color(\"lightgrey\") {\n        // Main body - oval shape\n        union() {\n            // Torso\n            translate([0, 0, 20])\n                scale([1.2, 1, 1.5])\n                rotate([90, 0, 0])\n                cylinder(h=30, r1=18, r2=15, $fn=32);\n            \n            // Chest\n            translate([0, 8, 25])\n                scale([0.8, 0.6, 1])\n                sphere(20, $fn=32);\n        }\n        \n        // Head\n        color(\"lightgrey\") {\n            translate([0, 35, 45])\n                scale([1.2, 1, 1.1])\n                sphere(22, $fn=32);\n        }\n        \n        // Snout\n        color(\"lightgrey\") {\n            translate([0, 55, 42])\n                scale([0.9, 1.5, 0.8])\n                rotate([0, 20, 0])\n                cylinder(h=25, r1=15, r2=12, $fn=32);\n        }\n        \n        // Nose\n        color(\"slateblue\") {\n            translate([0, 65, 43])\n                sphere(5, $fn=16);\n        }\n        \n        // Eyes (half-lidded)\n        color(\"black\") {\n            translate([-12, 45, 50])\n                scale([1, 0.5, 1])\n                sphere(4, $fn=16);\n            translate([12, 45, 50])\n                scale([1, 0.5, 1])\n                sphere(4, $fn=16);\n        }\n        \n        // Eye rings\n        color(\"slateblue\") {\n            translate([-12, 45, 48])\n                rotate([90, 0, 0])\n                cylinder(h=1.5, r1=8, r2=8, $fn=32);\n            translate([12, 45, 48])\n                rotate([90, 0, 0])\n                cylinder(h=1.5, r1=8, r2=8, $fn=32);\n        }\n        \n        // Ears\n        module ear(pos) {\n            translate(pos)\n                rotate([0, 30, 0])\n                scale([0.7, 2, 0.2])\n                sphere(10, $fn=16);\n        }\n        \n        ear([-18, 30, 60]);\n        ear([18, 30, 60]);\n        \n        // Arms\n        module arm(pos, rot) {\n            translate(pos)\n                rotate(rot)\n                union() {\n                    // Upper arm\n                    color(\"lightgrey\")\n                        rotate([0, 0, 0])\n                        cylinder(h=25, r=8, $fn=16);\n                    \n                    // Forearm\n                    translate([0, 0, -25])\n                        rotate([30, 0, 0])\n                        cylinder(h=20, r=7, $fn=16);\n                    \n                    // Hands\n                    translate([0, 0, -45])\n                        scale([1.2, 1.5, 0.8])\n                        sphere(8, $fn=16);\n                }\n        }\n        \n        arm([-30, 15, 35], [0, 0, 30]);\n        arm([30, 15, 35], [0, 0, -30]);\n        \n        // Legs\n        module leg(pos, rot) {\n            translate(pos)\n                rotate(rot)\n                union() {\n                    // Thigh\n                    color(\"lightgrey\")\n                        cylinder(h=20, r=10, $fn=16);\n                    \n                    // Lower leg\n                    translate([0, 0, -20])\n                        rotate([0, 15, 0])\n                        cylinder(h=18, r=9, $fn=16);\n                    \n                    // Feet\n                    translate([0, 5, -35])\n                        scale([1.5, 2.5, 1])\n                        cube([15, 8, 8], center=true);\n                }\n        }\n        \n        leg([-15, 0, 5], [0, 0, 0]);\n        leg([15, 0, 5], [0, 0, 0]);\n        \n        // Belly marking\n        color(\"slateblue\") {\n            translate([0, 5, 15])\n                scale([0.8, 1.2, 0.1])\n                rotate([90, 0, 0])\n                cylinder(h=1, r1=20, r2=15, $fn=32);\n        }\n        \n        // Back stripes\n        color(\"slateblue\") {\n            for(i = [0:1]) {\n                translate([0, -10 - i*8, 40 - i*5])\n                    scale([1.5, 0.3, 0.1])\n                    rotate([90, 0, 0])\n                    cylinder(h=1, r1=15, r2=12, $fn=32);\n            }\n        }\n        \n        // Tail\n        color(\"lightgrey\") {\n            translate([0, -30, 30])\n                rotate([0, 30, 0])\n                scale([0.8, 0.8, 1.5])\n                cylinder(h=25, r=8, r1=8, r2=5, $fn=16);\n        }\n    }\n}\n\n// Main assembly\nslaking();\n\n// Base for stability\ncolor(\"darkgrey\") {\n    translate([0, 0, -2])\n        cylinder(h=2, r=35, $fn=32);\n}",
    "renders": true
  },
  {
    "pokemon": "nincada",
    "openscad_code": "// Nincada - Realistic Style, Medium Complexity\n// 3D printable model with proper wall thickness and no overhangs\n// Overall size: ~80mm long\n\nmodule nincada_body() {\n    color(\"gray\") {\n        // Main body shell\n        union() {\n            // Central shell segment\n            translate([0, 0, 8])\n                scale([1, 0.6, 0.4])\n                sphere(d=30, $fn=32);\n            \n            // Front segment\n            translate([-15, 0, 6])\n                scale([0.8, 0.5, 0.3])\n                sphere(d=25, $fn=32);\n            \n            // Rear segment\n            translate([15, 0, 6])\n                scale([0.9, 0.6, 0.3])\n                sphere(d=28, $fn=32);\n        }\n    }\n}\n\nmodule head() {\n    color(\"gray\") {\n        // Head\n        translate([-25, 0, 12])\n            rotate([0, 20, 0])\n            scale([0.8, 0.7, 0.6])\n            sphere(d=18, $fn=32);\n        \n        // Snout\n        translate([-33, 0, 12])\n            scale([0.4, 0.3, 0.3])\n            sphere(d=12, $fn=16);\n    }\n    \n    color(\"black\") {\n        // Eyes (2 per side)\n        for(x = [-30, -28]) {\n            translate([x, -5, 14])\n                sphere(d=3, $fn=8);\n            translate([x, 5, 14])\n                sphere(d=3, $fn=8);\n        }\n    }\n}\n\nmodule legs() {\n    color(\"gray\") {\n        // Front legs\n        for(side = [-1, 1]) {\n            translate([-20, side*12, 6])\n                rotate([0, side*10, 0])\n                cylinder(h=15, d1=6, d2=4, $fn=8);\n            \n            translate([-20, side*12, -7])\n                sphere(d=6, $fn=8);\n        }\n        \n        // Middle legs\n        for(side = [-1, 1]) {\n            translate([0, side*14, 4])\n                rotate([0, side*5, 0])\n                cylinder(h=12, d1=5, d2=3, $fn=8);\n            \n            translate([0, side*14, -6])\n                sphere(d=5, $fn=8);\n        }\n        \n        // Rear legs\n        for(side = [-1, 1]) {\n            translate([20, side*12, 4])\n                rotate([0, side*(-5), 0])\n                cylinder(h=14, d1=6, d2=4, $fn=8);\n            \n            translate([20, side*12, -7])\n                sphere(d=6, $fn=8);\n        }\n    }\n}\n\nmodule wings() {\n    color(\"lightgray\") {\n        // Transparent wing pair\n        for(side = [-1, 1]) {\n            translate([-5, side*18, 18])\n                rotate([0, -20, side*30])\n                scale([1.2, 0.1, 0.8])\n                sphere(d=20, $fn=16);\n            \n            // Wing veins\n            for(i = [0:2]) {\n                translate([-5 + i*3, side*18, 18])\n                    rotate([0, -20, side*30])\n                    scale([0.8, 0.05, 0.02])\n                    cube([15, 1, 1]);\n            }\n        }\n    }\n}\n\nmodule markings() {\n    color(\"lightgray\") {\n        // Side markings\n        for(side = [-1, 1]) {\n            // Front segment marking\n            translate([-15, side*8, 10])\n                scale([0.3, 0.2, 0.1])\n                sphere(d=15, $fn=16);\n            \n            // Rear segment marking\n            translate([15, side*10, 8])\n                scale([0.4, 0.3, 0.1])\n                sphere(d=18, $fn=16);\n        }\n        \n        // Back marking\n        translate([10, 0, 12])\n            scale([0.5, 0.3, 0.1])\n            sphere(d=20, $fn=16);\n    }\n}\n\n// Assemble the complete Nincada\nunion() {\n    nincada_body();\n    head();\n    legs();\n    wings();\n    markings();\n}",
    "renders": true
  },
  {
    "pokemon": "ninjask",
    "openscad_code": "// Ninjask OpenSCAD Model\n// Medium complexity realistic style 3D printable figure\n\n// Main colors\ncolor_body = [0.9, 0.8, 0.15];    // Yellow body\ncolor_wings = [0.9, 0.9, 0.9];    // White wings\ncolor_eyes = [0.2, 0.2, 0.8];     // Blue eyes\ncolor_markings = [0.4, 0.4, 0.4]; // Dark gray markings\n\n// Overall scale\nscale_factor = 0.8;\n\nmodule ninjask_body() {\n    color(color_body)\n    union() {\n        // Main thorax/abdomen\n        translate([0, 0, 5])\n            scale([1, 0.8, 1.5])\n            sphere(d=20);\n        \n        // Head segment\n        translate([0, 0, 25])\n            scale([0.9, 0.9, 1.1])\n            sphere(d=15);\n        \n        // Neck connector\n        translate([0, 0, 18])\n            cylinder(h=7, r1=6, r2=5);\n    }\n}\n\nmodule ninjask_wings() {\n    color(color_wings)\n    for(i = [0, 1]) {\n        rotate([0, 0, i*180])\n        translate([0, 12, 15]) {\n            // Upper wing\n            rotate([10, 0, 0])\n            difference() {\n                scale([4, 0.5, 2])\n                sphere(d=10);\n                translate([0, -2, 0])\n                scale([3.5, 1, 1.8])\n                sphere(d=9);\n            }\n            \n            // Lower wing\n            translate([0, 4, -6])\n            rotate([-10, 0, 0])\n            difference() {\n                scale([3.5, 0.4, 1.8])\n                sphere(d=8);\n                translate([0, -1.5, 0])\n                scale([3, 0.8, 1.5])\n                sphere(d=7);\n            }\n        }\n    }\n}\n\nmodule ninjask_legs() {\n    color(color_body)\n    for(i = [0:3]) {\n        angle = i * 90;\n        rotate([0, 0, angle])\n        translate([8, 0, 8]) {\n            // Upper leg\n            rotate([30, 0, 0])\n            cylinder(h=8, r=2);\n            \n            // Lower leg\n            translate([0, 0, -8])\n            rotate([45, 0, 0])\n            cylinder(h=6, r=1.5);\n            \n            // Foot\n            translate([0, 0, -14])\n            sphere(d=3);\n        }\n    }\n}\n\nmodule ninjask_eyes() {\n    color(color_eyes)\n    for(side = [-1, 1]) {\n        translate([side * 5, 7, 24]) {\n            // Eye sphere\n            sphere(d=4);\n            \n            // Eye highlight\n            color([1,1,1])\n            translate([1, 0.5, 1])\n            sphere(d=1.2);\n        }\n    }\n}\n\nmodule ninjask_markings() {\n    color(color_markings)\n    // Back markings\n    translate([0, -6, 15])\n    rotate([0, 0, 0])\n    scale([0.8, 0.2, 2])\n    cylinder(h=12, r=8);\n    \n    // Side markings\n    for(side = [-1, 1]) {\n        translate([side * 7, 0, 18])\n        rotate([0, side * 15, 0])\n        scale([0.3, 0.8, 1.2])\n        cylinder(h=8, r=3);\n    }\n}\n\nmodule ninjask_complete() {\n    scale([scale_factor, scale_factor, scale_factor])\n    union() {\n        ninjask_body();\n        ninjask_wings();\n        ninjask_legs();\n        ninjask_eyes();\n        ninjask_markings();\n    }\n}\n\n// Generate the complete model\ntranslate([0, 0, 0])\nninjask_complete();",
    "renders": true
  },
  {
    "pokemon": "shedinja",
    "openscad_code": "// Shedinja - Realistic Style, Medium Complexity\n// 3D printable model with proper wall thickness and no overhangs\n\n$fn = 50; // Smooth curves\nwall_thickness = 2;\n\n// Main body shell\nmodule body_shell() {\n    color(\"saddlebrown\")\n    difference() {\n        // Outer shell\n        sphere(d = 60);\n        \n        // Hollow interior\n        translate([0, 0, -wall_thickness])\n        sphere(d = 60 - 2*wall_thickness);\n        \n        // Front opening\n        translate([0, 0, 15])\n        rotate([90, 0, 0])\n        cylinder(h = 30, d1 = 35, d2 = 30, center = true);\n    }\n}\n\n// Back shell with wings\nmodule back_shell() {\n    color(\"saddlebrown\")\n    union() {\n        // Main back\n        difference() {\n            translate([0, 0, -30])\n            sphere(d = 60);\n            \n            // Hollow interior\n            translate([0, 0, -30])\n            sphere(d = 60 - 2*wall_thickness);\n            \n            // Front cut for body connection\n            translate([0, 0, -45])\n            cube([80, 80, 30], center = true);\n        }\n        \n        // Wings (3 wings)\n        for(i = [0:2]) {\n            rotate([0, 0, i*120])\n            translate([30, 0, -15])\n            rotate([0, 90, -30])\n            color(\"burlywood\")\n            difference() {\n                // Wing shape\n                scale([1, 0.3, 1])\n                sphere(d = 25);\n                \n                // Wing hollow\n                scale([0.7, 0.3, 0.7])\n                sphere(d = 25);\n            }\n        }\n    }\n}\n\n// Halo/crown\nmodule halo() {\n    color(\"gold\")\n    rotate([90, 0, 0])\n    translate([0, 0, 30])\n    difference() {\n        // Outer halo\n        torus(20, 3);\n        \n        // Inner cut\n        torus(19, 2.5);\n    }\n}\n\n// Eye holes (4 holes)\nmodule eye_holes() {\n    color(\"black\")\n    for(pos = [[-12, 10, 25], [12, 10, 25], [-8, -5, 25], [8, -5, 25]]) {\n        translate(pos)\n        sphere(d = 4);\n    }\n}\n\n// Back pattern (3 circles)\nmodule back_pattern() {\n    color(\"burlywood\")\n    for(pos = [[0, -20, -25], [-15, 5, -25], [15, 5, -25]]) {\n        translate(pos)\n        sphere(d = 8);\n    }\n}\n\n// Leg stumps (3 stumps)\nmodule leg_stumps() {\n    color(\"saddlebrown\")\n    for(i = [0:2]) {\n        rotate([0, 0, i*120 + 60])\n        translate([18, 0, -25])\n        rotate([90, 0, 0])\n        cylinder(h = 10, d1 = 8, d2 = 6);\n    }\n}\n\n// Assembly\nunion() {\n    // Main body\n    body_shell();\n    \n    // Back shell\n    back_shell();\n    \n    // Halo\n    halo();\n    \n    // Eyes\n    eye_holes();\n    \n    // Back pattern\n    back_pattern();\n    \n    // Leg stumps\n    leg_stumps();\n}",
    "renders": true
  },
  {
    "pokemon": "whismur",
    "openscad_code": "// Whismur Pokemon - Realistic Style, Medium Complexity\n\n// Basic parameters\nscale_factor = 0.3;\nbody_color = \"MediumPurple\";\near_color = \"MediumOrchid\";\neye_color = \"Magenta\";\nmouth_color = \"DarkSlateGray\";\n\n// Main body module\nmodule body() {\n    color(body_color)\n    union() {\n        // Main spherical body\n        translate([0, 0, 0])\n            sphere(d = 40 * scale_factor, $fn = 32);\n        \n        // Belly bulge\n        translate([0, -5 * scale_factor, -10 * scale_factor])\n            scale([1.1, 1, 0.8])\n                sphere(d = 35 * scale_factor, $fn = 32);\n        \n        // Feet\n        for (x = [-15, 15]) {\n            translate([x * scale_factor, 0, -18 * scale_factor])\n                rotate([30, 0, 0])\n                    cylinder(h = 10 * scale_factor, r1 = 8 * scale_factor, r2 = 6 * scale_factor, $fn = 16);\n        }\n        \n        // Arms\n        for (x = [-20, 20]) {\n            translate([x * scale_factor, 0, 5 * scale_factor])\n                rotate([0, 90, 0])\n                    cylinder(h = 12 * scale_factor, r1 = 6 * scale_factor, r2 = 4 * scale_factor, $fn = 16);\n        }\n    }\n}\n\n// Ear module with pipes\nmodule ears() {\n    color(ear_color)\n    union() {\n        // Left ear\n        translate([-15 * scale_factor, 0, 25 * scale_factor])\n            rotate([0, 10, -15])\n                cylinder(h = 25 * scale_factor, r1 = 8 * scale_factor, r2 = 12 * scale_factor, $fn = 16);\n        \n        // Right ear\n        translate([15 * scale_factor, 0, 25 * scale_factor])\n            rotate([0, 10, 15])\n                cylinder(h = 25 * scale_factor, r1 = 8 * scale_factor, r2 = 12 * scale_factor, $fn = 16);\n        \n        // Ear openings (holes)\n        for (x = [-15, 15]) {\n            translate([x * scale_factor, 0, 47 * scale_factor])\n                rotate([0, 10, x > 0 ? 15 : -15])\n                    cylinder(h = 8 * scale_factor, r = 5 * scale_factor, $fn = 16);\n        }\n    }\n}\n\n// Face module\nmodule face() {\n    color(\"white\")\n    union() {\n        // Eye sockets\n        for (x = [-8, 8]) {\n            translate([x * scale_factor, -18 * scale_factor, 12 * scale_factor])\n                sphere(d = 12 * scale_factor, $fn = 16);\n        }\n        \n        // Eyes\n        color(eye_color)\n        for (x = [-8, 8]) {\n            translate([x * scale_factor, -20 * scale_factor, 13 * scale_factor])\n                sphere(d = 8 * scale_factor, $fn = 16);\n            \n            // Pupils\n            color(\"black\")\n            translate([x * scale_factor, -22 * scale_factor, 15 * scale_factor])\n                sphere(d = 4 * scale_factor, $fn = 8);\n        }\n        \n        // Mouth\n        color(mouth_color)\n        translate([0, -22 * scale_factor, 5 * scale_factor])\n            rotate([10, 0, 0])\n                cube([12 * scale_factor, 2 * scale_factor, 6 * scale_factor], center = true);\n        \n        // Nose\n        color(\"black\")\n        translate([0, -20 * scale_factor, 10 * scale_factor])\n            sphere(d = 3 * scale_factor, $fn = 8);\n    }\n}\n\n// Back markings\nmodule markings() {\n    color(\"MediumOrchid\")\n    union() {\n        // Back pattern circles\n        for (i = [0:2]) {\n            translate([0, 15 * scale_factor, 15 - (i * 10) * scale_factor])\n                rotate([90, 0, 0])\n                    cylinder(h = 1 * scale_factor, r = 5 * scale_factor, $fn = 16);\n        }\n        \n        // Side markings\n        for (x = [-15, 15]) {\n            translate([x * scale_factor, 10 * scale_factor, 0])\n                rotate([0, 0, 90])\n                    cylinder(h = 1 * scale_factor, r = 4 * scale_factor, $fn = 12);\n        }\n    }\n}\n\n// Tail stub\nmodule tail() {\n    color(body_color)\n    translate([0, 20 * scale_factor, -5 * scale_factor])\n        rotate([30, 0, 0])\n            cylinder(h = 8 * scale_factor, r1 = 6 * scale_factor, r2 = 4 * scale_factor, $fn = 12);\n}\n\n// Assembly\nunion() {\n    body();\n    ears();\n    face();\n    markings();\n    tail();\n}\n\n// Base for printing\ntranslate([0, 0, -20 * scale_factor])\n    color(\"gray\")\n    cylinder(h = 2 * scale_factor, r = 30 * scale_factor, $fn = 32);",
    "renders": true
  },
  {
    "pokemon": "loudred",
    "openscad_code": "// Loudred - Medium Complexity Realistic Style\n// Overall height ~60mm\n\n// Colors\n$fn=32;\n\nmodule body() {\n    color([0.8, 0.2, 0.3])  // Purple-red body\n    union() {\n        // Main torso\n        translate([0, 0, 15]) scale([1.2, 1, 1.2]) sphere(15);\n        \n        // Lower body\n        translate([0, 0, 5]) scale([1.1, 0.9, 0.8]) sphere(12);\n    }\n}\n\nmodule head() {\n    color([0.8, 0.2, 0.3])\n    union() {\n        // Main head\n        translate([0, 0, 35]) scale([1.4, 1.2, 1.3]) sphere(12);\n        \n        // Snout\n        translate([0, 18, 33]) scale([1, 1.5, 0.8]) sphere(8);\n        \n        // Mouth opening\n        difference() {\n            translate([0, 19, 29]) cube([12, 8, 6], center=true);\n        }\n    }\n}\n\nmodule ears() {\n    color([0.7, 0.15, 0.25])\n    for(side=[-1, 1]) {\n        translate([side*12, -5, 42]) rotate([0, side*20, 0]) \n            scale([0.4, 0.3, 1.8]) sphere(6);\n        \n        // Ear holes\n        color([0.1, 0.1, 0.1])\n        translate([side*12, -5, 48]) rotate([0, side*20, 0])\n            scale([0.3, 0.2, 1.5]) sphere(3);\n    }\n}\n\nmodule arms() {\n    color([0.8, 0.2, 0.3])\n    for(side=[-1, 1]) {\n        // Upper arm\n        translate([side*15, 0, 22]) rotate([0, 0, side*30])\n            cylinder(h=10, r1=4, r2=3);\n        \n        // Lower arm\n        translate([side*19, -2, 22]) rotate([0, 0, side*30])\n            cylinder(h=8, r1=3, r2=5);\n        \n        // Hands\n        translate([side*22, -4, 22]) sphere(4);\n    }\n}\n\nmodule legs() {\n    color([0.7, 0.15, 0.25])\n    for(side=[-1, 1]) {\n        // Thigh\n        translate([side*8, 0, 8]) rotate([30, 0, 0])\n            cylinder(h=10, r1=5, r2=4);\n        \n        // Lower leg\n        translate([side*8, -5, 2]) rotate([15, 0, 0])\n            cylinder(h=8, r1=4, r2=3);\n        \n        // Feet\n        translate([side*8, -8, -2]) scale([1.5, 1, 0.5]) sphere(5);\n    }\n}\n\nmodule tail() {\n    color([0.8, 0.2, 0.3])\n    translate([-12, -12, 15]) rotate([0, 30, -20])\n        scale([1, 0.6, 0.6]) sphere(8);\n}\n\nmodule facial_features() {\n    // Eyes\n    color([1, 1, 1])\n    for(side=[-1, 1]) {\n        translate([side*6, 15, 38]) sphere(3);\n    }\n    \n    // Pupils\n    color([0, 0, 0])\n    for(side=[-1, 1]) {\n        translate([side*6.5, 15.5, 39.5]) sphere(1.5);\n    }\n    \n    // Yellow markings\n    color([1, 0.8, 0])\n    translate([0, 10, 35]) scale([2, 0.5, 0.3]) sphere(5);\n    translate([0, 5, 20]) scale([1.5, 0.4, 0.3]) sphere(4);\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    ears();\n    arms();\n    legs();\n    tail();\n    facial_features();\n}",
    "renders": true
  },
  {
    "pokemon": "exploud",
    "openscad_code": "// Exploud - Realistic style, medium complexity\n// Overall dimensions: ~75mm tall\n\n// Color definitions\n$fa = 2;\n$fs = 0.5;\n\nmodule body() {\n    // Main torso - egg-shaped\n    color(\"dodgerblue\")\n    scale([1, 1.2, 1.3])\n    sphere(18);\n    \n    // Chest pattern\n    color(\"crimson\")\n    translate([0, 20, 5])\n    scale([0.4, 0.1, 0.6])\n    sphere(20);\n}\n\nmodule head() {\n    // Main head sphere\n    color(\"dodgerblue\")\n    translate([0, 25, 25])\n    sphere(15);\n    \n    // Snout\n    color(\"dodgerblue\")\n    translate([0, 35, 20])\n    rotate([0, -20, 0])\n    scale([0.8, 2, 0.8])\n    sphere(10);\n    \n    // Mouth opening\n    color(\"black\")\n    translate([0, 46, 18])\n    rotate([0, -20, 0])\n    scale([0.5, 0.1, 0.3])\n    cylinder(h=1, r=8);\n}\n\nmodule ears() {\n    // Left ear - tube shape\n    color(\"dodgerblue\")\n    translate([-12, 20, 35])\n    rotate([0, 0, -30])\n    rotate([0, -15, 0])\n    cylinder(h=20, r1=5, r2=3);\n    \n    // Right ear\n    color(\"dodgerblue\")\n    translate([12, 20, 35])\n    rotate([0, 0, 30])\n    rotate([0, -15, 0])\n    cylinder(h=20, r1=5, r2=3);\n    \n    // Ear inner tubes\n    color(\"crimson\")\n    translate([-12, 20, 35])\n    rotate([0, 0, -30])\n    rotate([0, -15, 0])\n    cylinder(h=18, r1=3, r2=2);\n    \n    color(\"crimson\")\n    translate([12, 20, 35])\n    rotate([0, 0, 30])\n    rotate([0, -15, 0])\n    cylinder(h=18, r1=3, r2=2);\n}\n\nmodule arms() {\n    // Left arm\n    color(\"dodgerblue\")\n    translate([-20, 10, 0])\n    rotate([0, 0, -30])\n    cylinder(h=15, r1=6, r2=5);\n    \n    // Right arm\n    color(\"dodgerblue\")\n    translate([20, 10, 0])\n    rotate([0, 0, 30])\n    cylinder(h=15, r1=6, r2=5);\n    \n    // Hands - sphere clusters\n    for(i = [-1, 1]) {\n        color(\"dodgerblue\")\n        translate([i*25, 10, -8])\n        sphere(4);\n        \n        color(\"dodgerblue\")\n        translate([i*27, 8, -6])\n        sphere(3);\n        \n        color(\"dodgerblue\")\n        translate([i*27, 12, -6])\n        sphere(3);\n    }\n}\n\nmodule legs() {\n    // Left leg\n    color(\"dodgerblue\")\n    translate([-8, -15, -20])\n    rotate([0, 10, 0])\n    cylinder(h=20, r1=6, r2=5);\n    \n    // Right leg\n    color(\"dodgerblue\")\n    translate([8, -15, -20])\n    rotate([0, -10, 0])\n    cylinder(h=20, r1=6, r2=5);\n    \n    // Feet\n    for(i = [-1, 1]) {\n        color(\"dodgerblue\")\n        translate([i*8, -15, -32])\n        scale([1.5, 1, 0.5])\n        sphere(6);\n    }\n}\n\nmodule tail() {\n    // Tail base\n    color(\"dodgerblue\")\n    translate([0, -25, -10])\n    rotate([30, 0, 0])\n    cylinder(h=15, r1=8, r2=6);\n    \n    // Tail tip\n    color(\"crimson\")\n    translate([0, -35, -5])\n    rotate([30, 0, 0])\n    sphere(6);\n    \n    // Tail stripes\n    for(i = [0, 1]) {\n        color(\"crimson\")\n        translate([0, -28 - i*3, -12 + i*2])\n        rotate([30, 0, 0])\n        cylinder(h=2, r=7 - i);\n    }\n}\n\nmodule eyes() {\n    // Left eye socket\n    color(\"black\")\n    translate([-6, 30, 28])\n    sphere(3);\n    \n    // Left eye pupil\n    color(\"white\")\n    translate([-5.5, 31, 29.5])\n    sphere(1);\n    \n    // Right eye socket\n    color(\"black\")\n    translate([6, 30, 28])\n    sphere(3);\n    \n    // Right eye pupil\n    color(\"white\")\n    translate([5.5, 31, 29.5])\n    sphere(1);\n}\n\nmodule tubes() {\n    // Back tubes - 7 tubes arranged in semicircle\n    for(i = [0:6]) {\n        angle = -90 + i * 30;\n        color(\"dodgerblue\")\n        translate([sin(angle) * 18, -5, cos(angle) * 18])\n        rotate([0, 0, angle])\n        rotate([-20, 0, 0])\n        cylinder(h=12, r1=4, r2=3);\n    }\n    \n    // Tube tips\n    for(i = [0:6]) {\n        angle = -90 + i * 30;\n        color(\"crimson\")\n        translate([sin(angle) * 20, -3, cos(angle) * 20])\n        sphere(2.5);\n    }\n}\n\n// Assemble the model\nbody();\nhead();\nears();\narms();\nlegs();\ntail();\neyes();\ntubes();",
    "renders": true
  },
  {
    "pokemon": "makuhita",
    "openscad_code": "// Makuhita OpenSCAD Model\n// Realistic style, medium complexity\n\n// Colors\nskin_color = \"#FFCC99\";\nmarking_color = \"#663300\";\neye_color = \"#000080\";\nmouth_color = \"#CC0000\";\n\n// Overall scale\nscale_factor = 0.4;\n\n// Head module\nmodule head() {\n    color(skin_color) {\n        // Main head sphere\n        translate([0, 0, 25]) {\n            sphere(d=30);\n        }\n        \n        // Cheek bulges\n        translate([-12, 15, 22]) {\n            sphere(d=12);\n        }\n        translate([12, 15, 22]) {\n            sphere(d=12);\n        }\n        \n        // Forehead marking\n        color(marking_color) {\n            translate([0, 0, 37]) {\n                rotate([90, 0, 0]) {\n                    cylinder(h=2, d1=12, d2=8);\n                }\n            }\n        }\n    }\n}\n\n// Eyes module\nmodule eyes() {\n    color(eye_color) {\n        // Left eye\n        translate([-5, 10, 30]) {\n            sphere(d=4);\n        }\n        \n        // Right eye\n        translate([5, 10, 30]) {\n            sphere(d=4);\n        }\n    }\n    \n    // Eye highlights\n    color(\"white\") {\n        translate([-4, 11, 32]) {\n            sphere(d=1.5);\n        }\n        translate([6, 11, 32]) {\n            sphere(d=1.5);\n        }\n    }\n}\n\n// Mouth module\nmodule mouth() {\n    color(mouth_color) {\n        translate([0, 15, 22]) {\n            rotate([90, 0, 0]) {\n                cylinder(h=1, d1=8, d2=6);\n            }\n        }\n    }\n}\n\n// Ears module\nmodule ears() {\n    color(skin_color) {\n        // Left ear\n        translate([-15, 0, 35]) {\n            rotate([0, 30, -20]) {\n                cylinder(h=10, d1=8, d2=6);\n            }\n        }\n        \n        // Right ear\n        translate([15, 0, 35]) {\n            rotate([0, 30, 20]) {\n                cylinder(h=10, d1=8, d2=6);\n            }\n        }\n    }\n}\n\n// Body module\nmodule body() {\n    color(skin_color) {\n        // Main body\n        translate([0, 0, 10]) {\n            sphere(d=25);\n        }\n        \n        // Lower body\n        translate([0, 0, 0]) {\n            sphere(d=20);\n        }\n        \n        // Chest marking\n        color(marking_color) {\n            translate([0, 12, 15]) {\n                rotate([90, 0, 0]) {\n                    cylinder(h=2, d1=10, d2=6);\n                }\n            }\n        }\n    }\n}\n\n// Arms module\nmodule arms() {\n    color(skin_color) {\n        // Left arm\n        translate([-15, 5, 15]) {\n            rotate([0, 0, -30]) {\n                cylinder(h=12, d1=8, d2=6);\n            }\n            translate([0, -6, 0]) {\n                rotate([0, 0, -30]) {\n                    sphere(d=10);\n                }\n            }\n        }\n        \n        // Right arm\n        translate([15, 5, 15]) {\n            rotate([0, 0, 30]) {\n                cylinder(h=12, d1=8, d2=6);\n            }\n            translate([0, -6, 0]) {\n                rotate([0, 0, 30]) {\n                    sphere(d=10);\n                }\n            }\n        }\n    }\n}\n\n// Legs module\nmodule legs() {\n    color(skin_color) {\n        // Left leg\n        translate([-6, 5, -5]) {\n            cylinder(h=10, d=8);\n            translate([0, 0, -10]) {\n                sphere(d=10);\n            }\n        }\n        \n        // Right leg\n        translate([6, 5, -5]) {\n            cylinder(h=10, d=8);\n            translate([0, 0, -10]) {\n                sphere(d=10);\n            }\n        }\n    }\n}\n\n// Assembly\nscale([scale_factor, scale_factor, scale_factor]) {\n    union() {\n        // Base parts\n        body();\n        legs();\n        arms();\n        \n        // Head parts\n        head();\n        ears();\n        eyes();\n        mouth();\n    }\n}",
    "renders": true
  },
  {
    "pokemon": "hariyama",
    "openscad_code": "// Hariyama Pokemon - Realistic Style - Medium Complexity\n// Dimensions: ~60mm tall\n\nmodule hariyama() {\n    color(\"LightCoral\")\n    union() {\n        // Main body\n        translate([0, 0, 15])\n        scale([1.2, 1, 1.3])\n        sphere(15);\n\n        // Lower body\n        translate([0, 0, 5])\n        scale([1.3, 1.1, 0.8])\n        cylinder(10, 15, 20);\n\n        // Legs\n        for(x = [-12, 12]) {\n            translate([x, 0, 0])\n            scale([0.8, 1, 1])\n            cylinder(15, 5, 7);\n        }\n\n        // Arms\n        for(x = [-20, 20]) {\n            translate([x, 0, 25])\n            rotate([0, 0, x > 0 ? -20 : 20])\n            scale([1, 1, 1.5])\n            cylinder(20, 8, 12);\n            \n            // Hands\n            translate([x + (x > 0 ? 8 : -8), 0, 42])\n            sphere(10);\n        }\n\n        // Head\n        translate([0, 0, 35])\n        scale([1.1, 0.9, 1.2])\n        sphere(12);\n\n        // Top knot\n        translate([0, 0, 50])\n        cylinder(8, 3, 0);\n\n        // Ears\n        for(x = [-8, 8]) {\n            translate([x, 12, 42])\n            rotate([90, 0, x > 0 ? -30 : 30])\n            scale([1, 1, 0.5])\n            cylinder(10, 4, 2);\n        }\n\n        // Eyes\n        for(x = [-5, 5]) {\n            color(\"Black\")\n            translate([x, 10, 42])\n            scale([1, 0.8, 0.3])\n            sphere(3);\n        }\n\n        // Mouth\n        color(\"Black\")\n        translate([0, 8, 38])\n        scale([1, 0.3, 0.5])\n        rotate([90, 0, 0])\n        cylinder(3, 4, 4);\n\n        // Chest marking\n        color(\"Ivory\")\n        translate([0, -10, 25])\n        rotate([90, 0, 0])\n        scale([1, 0.3, 1])\n        cylinder(2, 8, 12);\n\n        // Belt-like marking\n        color(\"Ivory\")\n        translate([0, 0, 18])\n        rotate([90, 0, 0])\n        cylinder(2, 20, 22);\n    }\n}\n\n// Create the model centered on build plate\ntranslate([0, 0, 0])\n    hariyama();",
    "renders": true
  },
  {
    "pokemon": "azurill",
    "openscad_code": "// Azurill Pokemon - Realistic Style, Medium Complexity\n// 3D printable model with proper wall thickness and no overhangs\n\n// Overall scale factor\nscale_factor = 1/10;\n\n// Main body module\nmodule azurill_body() {\n    color([0.85, 0.85, 0.85])  // Light gray body\n    \n    // Main spherical body\n    sphere(25 * scale_factor);\n    \n    // Belly bulge\n    translate([0, -5 * scale_factor, -10 * scale_factor])\n        scale([1.2, 1.3, 1.1])\n        sphere(15 * scale_factor);\n}\n\n// Ear module\nmodule azurill_ear(x_pos) {\n    color([0.75, 0.75, 0.75])  // Slightly darker gray\n    \n    translate([x_pos * 15 * scale_factor, 20 * scale_factor, 15 * scale_factor])\n        rotate([0, -30 * (x_pos), 0])\n        rotate([30, 0, 0])\n        cylinder(h=30 * scale_factor, r1=8 * scale_factor, r2=3 * scale_factor);\n    \n    // Ball on ear tip\n    translate([x_pos * 20 * scale_factor, 20 * scale_factor, 45 * scale_factor])\n        sphere(6 * scale_factor);\n}\n\n// Tail module\nmodule azurill_tail() {\n    color([0.75, 0.75, 0.75])\n    \n    // Tail base\n    translate([0, -25 * scale_factor, 0])\n        rotate([90, 0, 0])\n        cylinder(h=20 * scale_factor, r1=8 * scale_factor, r2=6 * scale_factor);\n    \n    // Ball tail\n    translate([0, -45 * scale_factor, 0])\n        sphere(15 * scale_factor);\n    \n    // Tail pattern\n    color([0.2, 0.2, 0.9])  // Blue pattern\n    translate([0, -45 * scale_factor, 0])\n        scale([0.8, 0.8, 0.8])\n        sphere(15 * scale_factor);\n}\n\n// Eye module\nmodule azurill_eye(x_pos) {\n    // White part\n    color(\"white\")\n    translate([x_pos * 10 * scale_factor, 15 * scale_factor, 15 * scale_factor])\n        sphere(5 * scale_factor);\n    \n    // Pupil\n    color(\"black\")\n    translate([x_pos * 11 * scale_factor, 15 * scale_factor, 18 * scale_factor])\n        sphere(2 * scale_factor);\n}\n\n// Mouth\nmodule azurill_mouth() {\n    color(\"black\")\n    translate([0, 8 * scale_factor, 10 * scale_factor])\n        rotate([90, 0, 0])\n        cylinder(h=0.5, r1=4 * scale_factor, r2=2 * scale_factor);\n}\n\n// Feet module\nmodule azurill_foot(x_pos) {\n    color([0.85, 0.85, 0.85])\n    \n    translate([x_pos * 12 * scale_factor, -20 * scale_factor, -20 * scale_factor])\n        rotate([15, 0, 0])\n        scale([1, 0.6, 1.5])\n        sphere(6 * scale_factor);\n}\n\n// Arms module\nmodule azurill_arm(x_pos) {\n    color([0.85, 0.85, 0.85])\n    \n    translate([x_pos * 20 * scale_factor, 0, -5 * scale_factor])\n        rotate([0, 0, x_pos * -30])\n        rotate([30, 0, 0])\n        cylinder(h=15 * scale_factor, r1=5 * scale_factor, r2=3 * scale_factor);\n}\n\n// Main assembly\nunion() {\n    // Body\n    azurill_body();\n    \n    // Ears\n    azurill_ear(1);\n    azurill_ear(-1);\n    \n    // Tail\n    azurill_tail();\n    \n    // Eyes\n    azurill_eye(1);\n    azurill_eye(-1);\n    \n    // Mouth\n    azurill_mouth();\n    \n    // Feet\n    azurill_foot(1);\n    azurill_foot(-1);\n    \n    // Arms\n    azurill_arm(1);\n    azurill_arm(-1);\n}",
    "renders": true
  },
  {
    "pokemon": "nosepass",
    "openscad_code": "// Nosepass OpenSCAD Model - Realistic Style, Medium Complexity\n// Based on the Rock-type Pokemon with magnetic nose\n\n// Main parameters\nnosepass_height = 70;\nwall_thickness = 2;\n\n// Colors\nbody_color = [0.5, 0.5, 0.5];  // Gray stone\nnose_color = [0.8, 0.4, 0.4];  // Red magnetic nose\neye_color = [0.9, 0.9, 0.9];   // White\npupil_color = [0.1, 0.1, 0.1]; // Black\ndetail_color = [0.4, 0.4, 0.4]; // Darker gray details\n\n// Main body - hexagonal prism shape\nmodule body() {\n    color(body_color)\n    difference() {\n        // Main hexagonal prism\n        cylinder(h=nosepass_height * 0.7, r1=nosepass_height * 0.35, r2=nosepass_height * 0.3, $fn=6);\n        \n        // Hollow out center\n        translate([0, 0, -1])\n            cylinder(h=nosepass_height * 0.7 + 2, r1=nosepass_height * 0.35 - wall_thickness, r2=nosepass_height * 0.3 - wall_thickness, $fn=6);\n    }\n}\n\n// Magnetic nose - protruding rectangular shape\nmodule magnetic_nose() {\n    color(nose_color)\n    translate([0, nosepass_height * 0.32, nosepass_height * 0.4])\n    rotate([0, 10, 0])\n    difference() {\n        // Main nose shape\n        cube([nosepass_height * 0.5, nosepass_height * 0.15, nosepass_height * 0.25], center=true);\n        \n        // Add bevel edges\n        translate([0, 0, nosepass_height * 0.12])\n        cube([nosepass_height * 0.45, nosepass_height * 0.1, nosepass_height * 0.1], center=true);\n    }\n}\n\n// Eye module\nmodule eye(x_pos, y_pos, z_pos) {\n    translate([x_pos, y_pos, z_pos]) {\n        // Eye white\n        color(eye_color)\n        sphere(r=nosepass_height * 0.06);\n        \n        // Pupil\n        color(pupil_color)\n        translate([nosepass_height * 0.02, 0, nosepass_height * 0.04])\n        sphere(r=nosepass_height * 0.03);\n    }\n}\n\n// Ear-like protrusions (mini magnets)\nmodule ear(x_pos, angle) {\n    color(body_color)\n    translate([x_pos, nosepass_height * 0.25, nosepass_height * 0.6])\n    rotate([0, angle, 0])\n    difference() {\n        // Main ear shape\n        cube([nosepass_height * 0.12, nosepass_height * 0.08, nosepass_height * 0.25]);\n        \n        // Hollow\n        translate([wall_thickness, wall_thickness, wall_thickness])\n        cube([nosepass_height * 0.12 - wall_thickness*2, nosepass_height * 0.08 - wall_thickness*2, nosepass_height * 0.25 - wall_thickness]);\n    }\n}\n\n// Rock texture details\nmodule rock_texture() {\n    color(detail_color)\n    for(i = [0:5]) {\n        rotate([0, 0, i * 60])\n        translate([nosepass_height * 0.32, 0, nosepass_height * 0.35])\n        cube([nosepass_height * 0.08, wall_thickness, nosepass_height * 0.05]);\n    }\n}\n\n// Base platform\nmodule base() {\n    color(body_color)\n    difference() {\n        cylinder(h=nosepass_height * 0.1, r=nosepass_height * 0.4, $fn=6);\n        translate([0, 0, -1])\n        cylinder(h=nosepass_height * 0.1 + 2, r=nosepass_height * 0.4 - wall_thickness, $fn=6);\n    }\n}\n\n// Main assembly\nunion() {\n    // Base\n    base();\n    \n    // Body\n    translate([0, 0, nosepass_height * 0.1])\n    body();\n    \n    // Magnetic nose\n    magnetic_nose();\n    \n    // Eyes\n    eye(-nosepass_height * 0.12, nosepass_height * 0.2, nosepass_height * 0.5);\n    eye(nosepass_height * 0.12, nosepass_height * 0.2, nosepass_height * 0.5);\n    \n    // Ears\n    ear(-nosepass_height * 0.25, 30);\n    ear(nosepass_height * 0.25, 30);\n    \n    // Rock texture details\n    rock_texture();\n}",
    "renders": true
  },
  {
    "pokemon": "skitty",
    "openscad_code": "// Skitty model - realistic style, medium complexity\n// 3D printable, ~70mm tall\n\n$fn=32;\n\n// Colors\ncolor_body = [1, 0.6, 0.6];      // pink\ncolor_markings = [1, 0.8, 0.8];  // light pink\ncolor_eyes = [0.2, 0.2, 0.2];    // black\ncolor_nose = [0.8, 0.4, 0.4];    // darker pink\n\n// Main body\nmodule body() {\n    color(color_body)\n    union() {\n        // Torso - slightly oval\n        translate([0, 0, 25])\n            scale([1.2, 1, 0.8])\n            sphere(20);\n        \n        // Head - round\n        translate([0, 0, 50])\n            sphere(18);\n        \n        // Paws - front\n        translate([10, 8, 8])\n            scale([1.2, 1.2, 1.5])\n            sphere(6);\n        translate([-10, 8, 8])\n            scale([1.2, 1.2, 1.5])\n            sphere(6);\n        \n        // Paws - back\n        translate([12, -8, 8])\n            scale([1.2, 1.2, 1.5])\n            sphere(6);\n        translate([-12, -8, 8])\n            scale([1.2, 1.2, 1.5])\n            sphere(6);\n        \n        // Feet - bottom pads\n        translate([10, 8, 0])\n            sphere(4);\n        translate([-10, 8, 0])\n            sphere(4);\n        translate([12, -8, 0])\n            sphere(4);\n        translate([-12, -8, 0])\n            sphere(4);\n    }\n}\n\n// Tail - curled\nmodule tail() {\n    color(color_body)\n    union() {\n        // Base\n        translate([0, -25, 25])\n            rotate([90, 0, 0])\n            cylinder(h=8, r1=8, r2=6);\n        \n        // Curl segments\n        for(i = [0:30:270]) {\n            rotate([0, 0, i])\n                translate([0, -25 - 15 * sin(i), 25 - 15 * cos(i) + 8])\n                    sphere(6);\n        }\n        \n        // Tail tip\n        rotate([0, 0, 270])\n            translate([0, -25 - 15 * sin(270), 25 - 15 * cos(270) + 8])\n                sphere(8);\n    }\n}\n\n// Ears\nmodule ears() {\n    color(color_body)\n    union() {\n        // Left ear\n        translate([-12, 0, 65])\n            rotate([0, 0, -20])\n            scale([0.8, 0.3, 2])\n            sphere(8);\n        \n        // Right ear\n        translate([12, 0, 65])\n            rotate([0, 0, 20])\n            scale([0.8, 0.3, 2])\n            sphere(8);\n        \n        // Inner ear markings\n        color(color_markings)\n        union() {\n            translate([-12, 1, 65])\n                rotate([0, 0, -20])\n                scale([0.5, 0.2, 1.5])\n                sphere(6);\n            translate([12, 1, 65])\n                rotate([0, 0, 20])\n                scale([0.5, 0.2, 1.5])\n                sphere(6);\n        }\n    }\n}\n\n// Face features\nmodule face() {\n    union() {\n        // Eyes\n        color(color_eyes)\n        union() {\n            translate([-7, 12, 55])\n                scale([1.2, 1, 1])\n                sphere(4);\n            translate([7, 12, 55])\n                scale([1.2, 1, 1])\n                sphere(4);\n            \n            // Eye highlights\n            color([1, 1, 1])\n            translate([-6, 13, 57])\n                sphere(1.5);\n            translate([8, 13, 57])\n                sphere(1.5);\n        }\n        \n        // Nose\n        color(color_nose)\n        translate([0, 16, 50])\n            scale([1.5, 1, 0.8])\n            sphere(3);\n        \n        // Mouth\n        color(color_eyes)\n        translate([0, 14, 48])\n            cube([6, 0.5, 2], center=true);\n        \n        // Cheek markings\n        color(color_markings)\n        union() {\n            translate([-12, 12, 48])\n                sphere(4);\n            translate([12, 12, 48])\n                sphere(4);\n        }\n    }\n}\n\n// Body markings\nmodule markings() {\n    color(color_markings)\n    union() {\n        // Front chest marking\n        translate([0, 8, 35])\n            scale([1.5, 1, 1.2])\n            sphere(8);\n        \n        // Back markings\n        for(i = [0:60:240]) {\n            rotate([0, 0, i])\n                translate([0, -15, 35])\n                    scale([0.8, 1, 0.8])\n                    sphere(6);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    tail();\n    ears();\n    face();\n    markings();\n}",
    "renders": true
  },
  {
    "pokemon": "delcatty",
    "openscad_code": "$fa = 1;\n$fs = 0.4;\n\nmodule delcatty() {\n    // Main body (lavender)\n    color([0.7, 0.6, 0.9]) union() {\n        // Torso\n        translate([0, 0, 15]) scale([1, 1.2, 0.8]) sphere(d=30);\n        \n        // Head\n        translate([0, 12, 32]) scale([0.9, 0.9, 1.1]) sphere(d=28);\n        \n        // Hind legs\n        for(x=[-8, 8]) {\n            translate([x, -5, 0]) rotate([0, 15, 0]) \n                scale([0.4, 0.6, 1]) cylinder(h=12, d1=8, d2=10);\n        }\n        \n        // Front legs\n        for(x=[-7, 7]) {\n            translate([x, 8, 8]) rotate([0, -15, 0])\n                scale([0.35, 0.5, 0.9]) cylinder(h=10, d1=6, d2=8);\n        }\n        \n        // Ears (purple)\n        color([0.5, 0.3, 0.7]) {\n            for(x=[-12, 12]) {\n                translate([x, 22, 38]) rotate([0, x*2, x*5])\n                    scale([0.15, 0.8, 0.15]) cylinder(h=25, d1=12, d2=6);\n            }\n        }\n        \n        // Tail (curl)\n        color([0.9, 0.7, 0.8]) {\n            translate([0, -18, 15]) rotate([0, 90, 0])\n                for(i=[0:15]) {\n                    rotate([0, 0, i*12]) \n                        translate([0, 10*sin(i*12), 0])\n                        sphere(d=6);\n                }\n        }\n        \n        // Whiskers\n        color([0.8, 0.8, 0.8]) {\n            for(a=[-1, 1]) {\n                translate([a*14, 18, 30]) rotate([0, 0, a*20])\n                    cylinder(h=10, d=1);\n                translate([a*14, 18, 30]) rotate([0, 0, a*35])\n                    cylinder(h=8, d=1);\n            }\n        }\n        \n        // Collar (yellow)\n        color([1, 0.9, 0.3]) {\n            translate([0, 8, 25]) rotate([90, 0, 0])\n                cylinder(h=4, d1=30, d2=32);\n        }\n        \n        // Eyes\n        color([0.2, 0.2, 0.2]) {\n            for(x=[-5, 5]) {\n                translate([x, 18, 36]) sphere(d=3);\n                translate([x+1, 19, 37]) sphere(d=1.5);\n            }\n        }\n        \n        // Nose\n        color([0.3, 0.2, 0.3])\n            translate([0, 16, 34]) sphere(d=2);\n        \n        // Mouth\n        color([0.4, 0.2, 0.3])\n            translate([0, 14, 33]) scale([1, 0.3, 0.3]) sphere(d=4);\n        \n        // Purple markings\n        color([0.5, 0.3, 0.7]) {\n            // Forehead\n            translate([0, 20, 39]) scale([0.8, 0.3, 0.3]) sphere(d=8);\n            \n            // Body spots\n            for(pos=[[-8, 10, 20], [8, 10, 20], [0, 5, 25]]) {\n                translate(pos) sphere(d=4);\n            }\n        }\n        \n        // Paws (pink)\n        color([1, 0.7, 0.8]) {\n            for(x=[-8, 8, -7, 7]) {\n                y = x < 0 ? -5 : 8;\n                z = x < 0 ? 0 : 8;\n                translate([x, y, z]) sphere(d=4);\n            }\n        }\n    }\n}\n\ndelcatty();",
    "renders": true
  },
  {
    "pokemon": "sableye",
    "openscad_code": "// Sableye Pokemon - Realistic Medium Complexity\n// Overall dimensions: ~80mm tall\n\n// Main color definitions\n$fn=50;\n\nmodule sableye_body() {\n    color([0.15, 0.15, 0.25]) {\n        // Torso - hexagonal gem body\n        union() {\n            // Central chest gem\n            rotate([0, 0, 30]) \n                cylinder(h=20, r1=18, r2=22, $fn=6);\n            \n            // Lower body taper\n            translate([0, 0, -15])\n                cylinder(h=15, r1=20, r2=15, $fn=6);\n            \n            // Upper chest\n            translate([0, 0, 10])\n                cylinder(h=8, r1=15, r2=18, $fn=6);\n        }\n    }\n}\n\nmodule sableye_head() {\n    color([0.15, 0.15, 0.25]) {\n        union() {\n            // Main head shape\n            translate([0, 25, 15])\n                sphere(r=20);\n            \n            // Jaw extension\n            translate([0, 33, 5])\n                rotate([20, 0, 0])\n                    scale([1.2, 0.8, 0.6])\n                        sphere(r=15);\n            \n            // Eye sockets\n            color([0.9, 0.1, 0.1]) {\n                // Left eye\n                translate([-12, 32, 18])\n                    sphere(r=6);\n                // Right eye\n                translate([12, 32, 18])\n                    sphere(r=6);\n            }\n            \n            // Gem on forehead\n            color([0.4, 0.1, 0.8]) {\n                translate([0, 28, 32])\n                    rotate([0, 0, 45])\n                        cylinder(h=8, r1=5, r2=0, $fn=4);\n            }\n        }\n    }\n}\n\nmodule sableye_ears() {\n    color([0.15, 0.15, 0.25]) {\n        difference() {\n            // Left ear\n            translate([-18, 15, 30])\n                rotate([0, 0, -30])\n                    cylinder(h=25, r1=8, r2=3, $fn=3);\n            \n            // Right ear\n            translate([18, 15, 30])\n                rotate([0, 0, 30])\n                    cylinder(h=25, r1=8, r2=3, $fn=3);\n        }\n    }\n}\n\nmodule sableye_arms() {\n    color([0.15, 0.15, 0.25]) {\n        // Left arm\n        translate([-25, 10, 5]) {\n            rotate([0, 0, -45]) {\n                // Upper arm\n                cylinder(h=15, r=5);\n                // Lower arm\n                translate([0, 15, 0])\n                    rotate([0, 30, 0])\n                        cylinder(h=12, r=4.5);\n                // Hand with claws\n                translate([0, 25, 0])\n                    rotate([0, 60, 0])\n                        sphere(r=6);\n            }\n        }\n        \n        // Right arm\n        translate([25, 10, 5]) {\n            rotate([0, 0, 45]) {\n                // Upper arm\n                cylinder(h=15, r=5);\n                // Lower arm\n                translate([0, 15, 0])\n                    rotate([0, 30, 0])\n                        cylinder(h=12, r=4.5);\n                // Hand with claws\n                translate([0, 25, 0])\n                    rotate([0, 60, 0])\n                        sphere(r=6);\n            }\n        }\n    }\n}\n\nmodule sableye_legs() {\n    color([0.15, 0.15, 0.25]) {\n        // Left leg\n        translate([-10, -18, -20]) {\n            // Thigh\n            cylinder(h=12, r=6);\n            // Shin\n            translate([0, 0, -12])\n                cylinder(h=10, r=5);\n            // Foot\n            translate([0, -5, -22])\n                rotate([90, 0, 0])\n                    cylinder(h=12, r=5, r2=4);\n        }\n        \n        // Right leg\n        translate([10, -18, -20]) {\n            // Thigh\n            cylinder(h=12, r=6);\n            // Shin\n            translate([0, 0, -12])\n                cylinder(h=10, r=5);\n            // Foot\n            translate([0, -5, -22])\n                rotate([90, 0, 0])\n                    cylinder(h=12, r=5, r2=4);\n        }\n    }\n}\n\nmodule sableye_back_gems() {\n    // Back gems pattern\n    color([0.4, 0.1, 0.8]) {\n        for(i=[0:2]) {\n            rotate([0, 0, i*120])\n                translate([0, -15, -5])\n                    cylinder(h=8, r1=6, r2=0, $fn=5);\n        }\n    }\n}\n\nmodule sableye_tail() {\n    color([0.15, 0.15, 0.25]) {\n        // Main tail stem\n        translate([0, -25, -5]) {\n            rotate([30, 0, 0])\n                cylinder(h=30, r=4);\n            \n            // Tail gem\n            translate([0, -30, -15])\n                color([0.4, 0.1, 0.8])\n                    rotate([0, 0, 45])\n                        cylinder(h=12, r1=8, r2=0, $fn=8);\n        }\n    }\n}\n\n// Assemble the complete Sableye\nunion() {\n    sableye_body();\n    sableye_head();\n    sableye_ears();\n    sableye_arms();\n    sableye_legs();\n    sableye_back_gems();\n    sableye_tail();\n}",
    "renders": true
  },
  {
    "pokemon": "mawile",
    "openscad_code": "// Realistic Mawile Pokemon - Medium Complexity\n// 3D printable model with proper wall thickness and no overhangs\n\n// Color definitions\nbody_color = [0.8, 0.7, 0.6];  // Light tan/yellow\nhorn_color = [0.3, 0.3, 0.3];  // Dark gray/black\neye_color = [0.1, 0.1, 0.1];   // Black\nmouth_color = [0.5, 0.1, 0.1]; // Dark red\naccent_color = [0.6, 0.4, 0.2]; // Brown\n\n// Scale factor for 3D printing (80mm height)\nscale_factor = 80 / 100;\n\nmodule mawile_body() {\n    // Main body - oval shape\n    color(body_color)\n    union() {\n        // Torso\n        scale([1, 0.8, 1.2])\n        sphere(15 * scale_factor, $fn=32);\n        \n        // Lower body\n        translate([0, 0, -20 * scale_factor])\n        scale([0.9, 0.7, 0.8])\n        sphere(15 * scale_factor, $fn=32);\n        \n        // Leg segments\n        for(side = [-1, 1]) {\n            // Upper legs\n            translate([side * 8 * scale_factor, -5 * scale_factor, -25 * scale_factor])\n            rotate([0, 15 * side, 0])\n            scale([0.5, 0.5, 1.2])\n            sphere(8 * scale_factor, $fn=16);\n            \n            // Lower legs\n            translate([side * 10 * scale_factor, -5 * scale_factor, -35 * scale_factor])\n            scale([0.4, 0.4, 0.8])\n            sphere(8 * scale_factor, $fn=16);\n            \n            // Feet\n            translate([side * 10 * scale_factor, 0, -42 * scale_factor])\n            scale([1.2, 2, 0.5])\n            sphere(5 * scale_factor, $fn=16);\n        }\n    }\n}\n\nmodule mawile_head() {\n    color(body_color)\n    union() {\n        // Main head shape\n        translate([0, 22 * scale_factor, 5 * scale_factor])\n        scale([1.1, 0.9, 0.8])\n        sphere(12 * scale_factor, $fn=32);\n        \n        // Snout extension\n        translate([0, 30 * scale_factor, 2 * scale_factor])\n        scale([0.8, 0.6, 0.5])\n        sphere(10 * scale_factor, $fn=32);\n        \n        // Ears\n        for(side = [-1, 1]) {\n            translate([side * 12 * scale_factor, 15 * scale_factor, 15 * scale_factor])\n            rotate([side * 15, 0, side * 30])\n            scale([0.3, 0.4, 1])\n            sphere(8 * scale_factor, $fn=16);\n        }\n        \n        // Eyes\n        color(eye_color)\n        for(side = [-1, 1]) {\n            translate([side * 5 * scale_factor, 28 * scale_factor, 8 * scale_factor])\n            scale([0.8, 1, 1])\n            sphere(3 * scale_factor, $fn=16);\n        }\n        \n        // Mouth area\n        color(mouth_color)\n        translate([0, 33 * scale_factor, 0 * scale_factor])\n        scale([0.6, 0.3, 0.2])\n        sphere(8 * scale_factor, $fn=16);\n    }\n}\n\nmodule jaw_horns() {\n    color(horn_color)\n    union() {\n        // Main jaw structure\n        translate([0, 15 * scale_factor, -5 * scale_factor])\n        rotate([0, 0, 180])\n        scale([0.8, 1, 0.6])\n        cylinder(h=25 * scale_factor, r1=10 * scale_factor, r2=15 * scale_factor, $fn=32);\n        \n        // Jaw teeth (simplified)\n        for(i = [1:4]) {\n            rotate([0, 0, i * 15 - 30])\n            translate([0, 15 * scale_factor, -20 * scale_factor])\n            scale([0.3, 0.3, 1])\n            cylinder(h=5 * scale_factor, r=2 * scale_factor, $fn=8);\n        }\n        \n        // Horn details\n        color(horn_color)\n        for(angle = [0:60:300]) {\n            rotate([0, 0, angle])\n            translate([0, 0, 0])\n            scale([0.15, 0.15, 1])\n            cylinder(h=35 * scale_factor, r=5 * scale_factor, $fn=6);\n        }\n    }\n}\n\nmodule arms() {\n    color(body_color)\n    for(side = [-1, 1]) {\n        // Upper arms\n        translate([side * 15 * scale_factor, 5 * scale_factor, 0 * scale_factor])\n        rotate([0, 0, side * -30])\n        scale([0.4, 0.4, 1])\n        cylinder(h=10 * scale_factor, r=4 * scale_factor, $fn=16);\n        \n        // Lower arms\n        translate([side * 20 * scale_factor, 0 * scale_factor, -5 * scale_factor])\n        rotate([0, 0, side * -45])\n        scale([0.3, 0.3, 0.8])\n        cylinder(h=8 * scale_factor, r=3 * scale_factor, $fn=16);\n        \n        // Hands\n        translate([side * 24 * scale_factor, -3 * scale_factor, -8 * scale_factor])\n        scale([0.8, 0.6, 0.4])\n        sphere(4 * scale_factor, $fn=16);\n    }\n}\n\n// Assembly\nunion() {\n    mawile_body();\n    mawile_head();\n    jaw_horns();\n    arms();\n    \n    // Back details\n    color(accent_color)\n    translate([0, -5 * scale_factor, 10 * scale_factor])\n    scale([1.2, 0.3, 0.1])\n    cylinder(h=15 * scale_factor, r=8 * scale_factor, $fn=32);\n}",
    "renders": true
  },
  {
    "pokemon": "aron",
    "openscad_code": "// Aron Pokemon - Realistic Style (Medium Complexity)\n// 3D printable model with proper wall thickness and minimal overhangs\n\n// Main color definitions\ncolor_body = [0.3, 0.3, 0.35]; // Dark steel gray\ncolor_armor = [0.5, 0.5, 0.55]; // Lighter gray armor plates\ncolor_eyes = [0.9, 0.2, 0.2]; // Red eyes\ncolor_markings = [0.7, 0.7, 0.8]; // Light gray markings\n\n// Scale factor for 3D printing (80mm height)\nscale_factor = 80/100;\n\n// Main body module\nmodule aron_body() {\n    color(color_body) {\n        // Central torso sphere\n        translate([0, 0, 30])\n            scale([1.2, 1, 1])\n            sphere(d=35);\n        \n        // Lower body\n        translate([0, 0, 15])\n            scale([1.3, 1.2, 0.8])\n            sphere(d=30);\n        \n        // Leg connections\n        for(x = [-12, 12]) {\n            translate([x, 0, 25])\n                rotate([0, 90, 0])\n                cylinder(h=15, d=10);\n        }\n    }\n}\n\n// Armor plates module\nmodule armor_plates() {\n    color(color_armor) {\n        // Back armor plate\n        translate([0, -12, 35])\n            rotate([15, 0, 0])\n            scale([1.5, 0.4, 1])\n            cube([25, 20, 15], center=true);\n        \n        // Side armor plates\n        for(x = [-1, 1]) {\n            translate([x*20, 0, 30])\n                rotate([0, 20*x, 0])\n                scale([0.4, 1, 1.2])\n                cube([12, 8, 18], center=true);\n        }\n        \n        // Front chest plate\n        translate([0, 12, 30])\n            rotate([-10, 0, 0])\n            scale([0.8, 0.3, 1])\n            cube([20, 15, 12], center=true);\n    }\n}\n\n// Head module with helmet\nmodule aron_head() {\n    color(color_body) {\n        // Main head sphere\n        translate([0, 0, 55])\n            sphere(d=25);\n        \n        // Snout\n        translate([0, 12, 55])\n            scale([0.7, 1.2, 0.8])\n            sphere(d=20);\n    }\n    \n    // Helmet armor\n    color(color_armor) {\n        // Top helmet dome\n        translate([0, 0, 60])\n            scale([1.1, 1, 1])\n            sphere(d=28);\n        \n        // Helmet rim\n        translate([0, 0, 50])\n            rotate([0, 0, 0])\n            cylinder(h=5, d1=30, d2=28);\n    }\n}\n\n// Eyes module\nmodule aron_eyes() {\n    color(color_eyes) {\n        for(x = [-6, 6]) {\n            translate([x, 8, 57])\n                scale([1, 1.5, 0.5])\n                sphere(d=4);\n        }\n    }\n}\n\n// Leg module\nmodule leg(position, angle) {\n    translate(position)\n        rotate([0, 0, angle]) {\n            // Upper leg\n            color(color_body)\n                cylinder(h=15, d=8);\n            \n            // Lower leg\n            translate([0, 0, -15])\n                cylinder(h=12, d=6);\n            \n            // Foot\n            translate([0, 5, -27])\n                rotate([0, 90, 0])\n                scale([1.2, 1, 0.8])\n                cylinder(h=10, d=8);\n        }\n}\n\n// Tail module\nmodule aron_tail() {\n    color(color_body) {\n        // Tail segments\n        for(i = [0:2]) {\n            translate([0, -15 - i*8, 30 - i*5])\n                scale([1 - i*0.15, 1 - i*0.1, 1 - i*0.15])\n                sphere(d=12 - i*3);\n        }\n    }\n}\n\n// Back spikes module\nmodule back_spikes() {\n    color(color_armor) {\n        // Three main spikes\n        for(x = [-8, 0, 8]) {\n            translate([x, -10, 42])\n                rotate([0, 0, 0])\n                cylinder(h=12, d1=6, d2=2);\n        }\n    }\n}\n\n// Markings module\nmodule markings() {\n    color(color_markings) {\n        // Eye markings\n        for(x = [-8, 8]) {\n            translate([x, 6, 52])\n                scale([2, 1, 0.5])\n                sphere(d=3);\n        }\n        \n        // Body stripes\n        for(z = [25, 35]) {\n            translate([0, 0, z])\n                rotate([90, 0, 0])\n                scale([1.3, 0.2, 0.1])\n                cylinder(h=30, d=1);\n        }\n    }\n}\n\n// Assembly\nscale([scale_factor, scale_factor, scale_factor]) {\n    union() {\n        // Main body parts\n        aron_body();\n        armor_plates();\n        aron_head();\n        aron_eyes();\n        aron_tail();\n        back_spikes();\n        markings();\n        \n        // Legs positioned for stability\n        leg([-15, 0, 10], 10);\n        leg([15, 0, 10], -10);\n        leg([-12, 0, 10], 20);\n        leg([12, 0, 10], -20);\n    }\n}",
    "renders": true
  },
  {
    "pokemon": "lairon",
    "openscad_code": "// Lairon Pokemon - Realistic Medium Complexity\n// Size: ~80mm length\n\n// Color definitions\ncolor_body = [0.5, 0.5, 0.55];      // Steel gray\ncolor_accents = [0.3, 0.3, 0.4];   // Darker gray\ncolor_eyes = [0.9, 0.2, 0.2];      // Red\ncolor_markings = [0.7, 0.6, 0.5];  // Light gray\n\n// Main body\nmodule body() {\n    color(color_body)\n    union() {\n        // Central body\n        translate([0, 0, 15])\n            scale([1.2, 0.8, 1])\n            sphere(20);\n        \n        // Lower body extension\n        translate([0, 0, 5])\n            scale([1.4, 1, 0.8])\n            sphere(18);\n        \n        // Front armor plate\n        translate([22, 0, 12])\n            rotate([0, 10, 0])\n            scale([1, 0.9, 0.4])\n            cube([25, 30, 15], center=true);\n    }\n}\n\n// Head with armor\nmodule head() {\n    color(color_body)\n    union() {\n        // Main head\n        translate([30, 0, 28])\n            scale([0.9, 0.7, 0.7])\n            sphere(18);\n        \n        // Snout\n        translate([45, 0, 28])\n            scale([1.2, 0.6, 0.5])\n            sphere(12);\n        \n        // Top armor ridge\n        color(color_accents)\n        for(i = [-1:1]) {\n            translate([30 + i*8, 0, 42])\n                cube([6, 8, 8], center=true);\n        }\n    }\n}\n\n// Eyes\nmodule eyes() {\n    color(color_eyes)\n    union() {\n        translate([42, -10, 32])\n            scale([0.5, 0.7, 0.7])\n            sphere(4);\n        translate([42, 10, 32])\n            scale([0.5, 0.7, 0.7])\n            sphere(4);\n    }\n}\n\n// Legs\nmodule legs() {\n    color(color_body)\n    union() {\n        // Front legs\n        for(side = [-1, 1]) {\n            translate([15, side*15, 8])\n                cylinder(h=15, r1=8, r2=6);\n            translate([15, side*15, 0])\n                sphere(6);\n        }\n        \n        // Back legs\n        for(side = [-1, 1]) {\n            translate([-15, side*15, 8])\n                cylinder(h=15, r1=8, r2=6);\n            translate([-15, side*15, 0])\n                sphere(6);\n        }\n    }\n}\n\n// Armor plates\nmodule armor_plates() {\n    color(color_accents)\n    union() {\n        // Back plates\n        for(i = [-1, 0, 1]) {\n            translate([i*12, 0, 30])\n                scale([1, 0.6, 0.3])\n                cube([12, 20, 8], center=true);\n        }\n        \n        // Side plates\n        for(side = [-1, 1]) {\n            translate([0, side*22, 18])\n                rotate([0, side*15, 0])\n                scale([0.3, 1, 0.5])\n                cube([8, 25, 15], center=true);\n        }\n    }\n}\n\n// Tail\nmodule tail() {\n    color(color_body)\n    union() {\n        // Tail base\n        translate([-28, 0, 18])\n            rotate([0, 15, 0])\n            cylinder(h=20, r1=10, r2=6);\n        \n        // Tail tip\n        translate([-42, 0, 22])\n            scale([0.8, 0.6, 0.6])\n            sphere(8);\n        \n        // Tail armor\n        color(color_accents)\n        translate([-35, 0, 20])\n            rotate([0, 15, 0])\n            scale([1.2, 0.8, 0.4])\n            cube([15, 12, 8], center=true);\n    }\n}\n\n// Body markings\nmodule markings() {\n    color(color_markings)\n    difference() {\n        // Main marking\n        translate([20, 0, 25])\n            scale([1.5, 0.8, 0.3])\n            sphere(15);\n        \n        // Cutout for detail\n        translate([20, 0, 26])\n            scale([1.2, 0.6, 0.4])\n            sphere(12);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    eyes();\n    legs();\n    armor_plates();\n    tail();\n    markings();\n}",
    "renders": true
  },
  {
    "pokemon": "aggron",
    "openscad_code": "// Aggron OpenSCAD Model - Realistic Style, Medium Complexity\n// Approximate height: 80 mm\n\n$fn = 30;\nbody_color = [0.3, 0.3, 0.4];\nhighlight_color = [0.7, 0.7, 0.8];\naccent_color = [0.1, 0.1, 0.1];\neye_color = [0.9, 0.1, 0.1];\n\nmodule aggron() {\n    // Main body\n    color(body_color) {\n        // Torso\n        translate([0, 0, 30])\n            cube([35, 25, 40], center=true);\n        \n        // Chest plate\n        translate([0, 12, 30])\n            cube([30, 8, 25], center=true);\n            \n        // Abdomen\n        translate([0, 0, 15])\n            cube([25, 20, 15], center=true);\n    }\n    \n    // Head\n    color(body_color) {\n        translate([0, 20, 55])\n            cube([25, 30, 25], center=true);\n            \n        // Snout\n        translate([0, 35, 55])\n            cube([15, 20, 15], center=true);\n    }\n    \n    // Horns\n    color(body_color) {\n        // Left horn\n        translate([-10, 25, 70])\n            rotate([-30, 0, -20])\n                cylinder(h=25, r1=5, r2=2);\n                \n        // Right horn\n        translate([10, 25, 70])\n            rotate([-30, 0, 20])\n                cylinder(h=25, r1=5, r2=2);\n                \n        // Middle spike\n        translate([0, 20, 70])\n            cylinder(h=20, r1=6, r2=3);\n    }\n    \n    // Eyes\n    color(eye_color) {\n        translate([-7, 45, 60])\n            sphere(r=3);\n        translate([7, 45, 60])\n            sphere(r=3);\n    }\n    \n    // Arms\n    color(body_color) {\n        // Left arm\n        translate([-22, 15, 40])\n            rotate([0, 0, 45])\n                cube([25, 10, 10], center=true);\n                \n        // Left forearm\n        translate([-35, 15, 30])\n            rotate([0, -30, 0])\n                cube([20, 8, 8], center=true);\n                \n        // Right arm\n        translate([22, 15, 40])\n            rotate([0, 0, -45])\n                cube([25, 10, 10], center=true);\n                \n        // Right forearm\n        translate([35, 15, 30])\n            rotate([0, -30, 0])\n                cube([20, 8, 8], center=true);\n    }\n    \n    // Hands\n    color(body_color) {\n        // Left hand\n        translate([-45, 12, 22])\n            sphere(r=8);\n            \n        // Right hand\n        translate([45, 12, 22])\n            sphere(r=8);\n    }\n    \n    // Legs\n    color(body_color) {\n        // Left leg\n        translate([-10, -5, 15])\n            cube([15, 15, 25], center=true);\n            \n        // Right leg\n        translate([10, -5, 15])\n            cube([15, 15, 25], center=true);\n    }\n    \n    // Feet\n    color(body_color) {\n        // Left foot\n        translate([-10, -5, 5])\n            cube([20, 25, 10], center=true);\n            \n        // Right foot\n        translate([10, -5, 5])\n            cube([20, 25, 10], center=true);\n    }\n    \n    // Tail\n    color(body_color) {\n        translate([0, -20, 25])\n            rotate([0, 0, 0])\n                cube([15, 25, 20], center=true);\n                \n        translate([0, -35, 25])\n            rotate([0, 0, 0])\n                cube([10, 15, 15], center=true);\n    }\n    \n    // Armor plates\n    color(highlight_color) {\n        // Shoulder plates\n        translate([-20, 15, 50])\n            cube([10, 15, 5], center=true);\n        translate([20, 15, 50])\n            cube([10, 15, 5], center=true);\n            \n        // Knee plates\n        translate([-10, -5, 25])\n            cube([12, 12, 8], center=true);\n        translate([10, -5, 25])\n            cube([12, 12, 8], center=true);\n    }\n    \n    // Back spikes\n    color(body_color) {\n        for(i = [0:2]) {\n            translate([0, -5 - i*8, 45 + i*2])\n                rotate([0, 0, 0])\n                    cube([8, 8, 12], center=true);\n        }\n    }\n}\n\n// Scale and render\nscale(0.8)\n    aggron();",
    "renders": true
  },
  {
    "pokemon": "meditite",
    "openscad_code": "// Meditite Pokemon - Realistic Style, Medium Complexity\n// Scale: 60mm height\n\n$fn = 32;\n\n// Main colors\ncolor_body = [0.8, 0.7, 0.9];\ncolor_skin = [0.9, 0.7, 0.8];\ncolor_white = [1, 1, 1];\ncolor_red = [0.9, 0.2, 0.2];\ncolor_blue = [0.2, 0.3, 0.9];\n\n// Head module\nmodule head() {\n    color(color_body)\n    union() {\n        // Main head sphere\n        translate([0, 0, 50]) sphere(d=30);\n        \n        // Head extension\n        translate([0, 0, 35]) cylinder(h=15, d1=20, d2=30);\n        \n        // Ears\n        for(i=[-1, 1]) {\n            translate([i*12, 12, 58]) rotate([15*i, 0, 0]) \n                cylinder(h=15, d1=8, d2=4);\n        }\n    }\n}\n\n// Face details\nmodule face() {\n    color(color_white)\n    union() {\n        // Eyes\n        for(i=[-1, 1]) {\n            translate([i*8, 10, 52]) sphere(d=6);\n            color([0, 0, 0]) translate([i*8.5, 11, 54]) sphere(d=3);\n        }\n        \n        // Mouth\n        translate([0, 5, 45]) rotate([90, 0, 0]) \n            cylinder(h=1, d=8);\n    }\n}\n\n// Body module\nmodule body() {\n    color(color_body)\n    union() {\n        // Torso\n        translate([0, 0, 25]) cylinder(h=20, d1=25, d2=20);\n        \n        // Legs\n        for(i=[-1, 1]) {\n            translate([i*8, 0, 10]) cylinder(h=15, d=10);\n            translate([i*8, 0, 2]) sphere(d=12);\n        }\n        \n        // Arms\n        for(i=[-1, 1]) {\n            translate([i*15, 12, 30]) rotate([0, 0, i*30])\n                cylinder(h=15, d=8);\n            translate([i*20, 18, 30]) rotate([0, 0, i*30])\n                sphere(d=10);\n        }\n    }\n}\n\n// Belt and decorations\nmodule belt() {\n    color(color_red)\n    difference() {\n        translate([0, 0, 35]) cube([30, 5, 5], center=true);\n        translate([0, 2, 35]) cube([25, 1, 6], center=true);\n    }\n    \n    // Blue gem\n    color(color_blue)\n    translate([0, 3, 37.5]) sphere(d=8);\n}\n\n// Leg details\nmodule leg_details() {\n    color(color_skin)\n    for(i=[-1, 1]) {\n        translate([i*8, 0, 15]) cylinder(h=8, d=8);\n        translate([i*8, 0, 15]) cube([12, 5, 8], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    head();\n    face();\n    body();\n    belt();\n    leg_details();\n}",
    "renders": true
  },
  {
    "pokemon": "medicham",
    "openscad_code": "// Medicham - Realistic Style\n// Scale: 1 unit = 1mm, total height ~70mm\n\nmodule head() {\n    color([0.9,0.9,0.9]) {\n        // Main head sphere\n        translate([0,0,60]) sphere(d=20, $fn=32);\n        \n        // Snout\n        translate([0,-8,55]) rotate([15,0,0]) \n            scale([0.8,0.6,0.6]) sphere(d=12, $fn=24);\n        \n        // Ears\n        for(side=[-1,1]) {\n            translate([side*8,0,70]) rotate([0,side*15,0])\n                cylinder(h=15, d1=8, d2=4, $fn=16);\n        }\n        \n        // Head crest\n        translate([0,0,75]) rotate([90,0,0])\n            cylinder(h=8, d1=6, d2=2, $fn=6);\n    }\n}\n\nmodule eyes() {\n    color([0,0,0]) {\n        // Eyes\n        for(side=[-1,1]) {\n            translate([side*6,-8,62]) sphere(d=3, $fn=16);\n        }\n        \n        // Eyebrows\n        for(side=[-1,1]) {\n            translate([side*6,-5,68]) rotate([30,0,0])\n                scale([0.2,0.8,0.1]) cube([10,10,5]);\n        }\n    }\n}\n\nmodule body() {\n    color([0.8,0.8,0.8]) {\n        // Torso\n        translate([0,0,35]) scale([1.2,0.8,1.5])\n            sphere(d=25, $fn=32);\n        \n        // Waist\n        translate([0,0,20]) cylinder(h=10, d1=20, d2=15, $fn=24);\n    }\n    \n    // Red marking on belly\n    color([0.8,0.2,0.2]) \n        translate([0,-7,35]) scale([0.6,0.3,0.8])\n            sphere(d=20, $fn=32);\n}\n\nmodule arms() {\n    for(side=[-1,1]) {\n        // Upper arm\n        color([0.8,0.8,0.8])\n            translate([side*12,0,45]) rotate([0,0,side*15])\n                cylinder(h=15, d=6, $fn=16);\n        \n        // Lower arm\n        color([0.8,0.8,0.8])\n            translate([side*20,0,35]) rotate([0,0,side*30])\n                cylinder(h=12, d=5, $fn=16);\n        \n        // Hand\n        color([0.8,0.8,0.8])\n            translate([side*27,0,28]) sphere(d=7, $fn=16);\n        \n        // Wrist bracelet\n        color([0.8,0.2,0.2])\n            translate([side*25,0,32]) cylinder(h=3, d=8, $fn=24);\n    }\n}\n\nmodule legs() {\n    for(side=[-1,1]) {\n        // Thigh\n        color([0.8,0.8,0.8])\n            translate([side*5,0,15]) rotate([0,0,side*10])\n                cylinder(h=15, d=8, $fn=16);\n        \n        // Lower leg\n        color([0.8,0.8,0.8])\n            translate([side*6,0,5]) rotate([0,0,side*5])\n                cylinder(h=10, d=6, $fn=16);\n        \n        // Foot\n        color([0.8,0.8,0.8])\n            translate([side*6,0,0]) scale([1,2,0.5])\n                sphere(d=10, $fn=16);\n    }\n}\n\nmodule tail() {\n    color([0.8,0.8,0.8]) {\n        // Tail base\n        translate([0,10,25]) rotate([45,0,0])\n            cylinder(h=20, d1=6, d2=4, $fn=16);\n        \n        // Tail end\n        translate([0,20,35]) sphere(d=5, $fn=16);\n    }\n}\n\n// Main assembly\nunion() {\n    head();\n    eyes();\n    body();\n    arms();\n    legs();\n    tail();\n}",
    "renders": true
  },
  {
    "pokemon": "electrike",
    "openscad_code": "// Electrike - Medium Complexity Realistic Style\n// 3D printable model with support-friendly design\n\ncolor(\"royalblue\") {\n    difference() {\n        // Main body\n        union() {\n            // Torso\n            translate([0, 0, 10])\n                scale([1.2, 1, 1.2])\n                sphere(d=30, $fn=32);\n            \n            // Chest/neck\n            translate([0, -8, 25])\n                cylinder(h=15, d1=20, d2=15, $fn=24);\n            \n            // Head\n            translate([0, -15, 35])\n                scale([1.1, 1.2, 1.1])\n                sphere(d=25, $fn=32);\n        }\n        \n        // Neck hollow\n        translate([0, -8, 20])\n            cylinder(h=20, d=12, $fn=24);\n    }\n}\n\n// Legs module\nmodule leg(x_offset, y_offset, angle) {\n    translate([x_offset, y_offset, 0]) {\n        rotate([0, 0, angle]) {\n            color(\"royalblue\") {\n                // Upper leg\n                translate([0, 0, 5])\n                    cylinder(h=15, d=8, $fn=16);\n                \n                // Lower leg\n                translate([0, 0, -5])\n                    cylinder(h=10, d=6, $fn=16);\n                \n                // Paw\n                translate([0, 0, -12])\n                    sphere(d=10, $fn=16);\n            }\n        }\n    }\n}\n\n// Front legs\nleg(10, 5, 30);\nleg(-10, 5, -30);\n\n// Back legs\nleg(12, -15, -30);\nleg(-12, -15, 30);\n\n// Tail\ncolor(\"royalblue\") {\n    translate([0, 15, 15]) {\n        rotate([0, 30, 0]) {\n            cylinder(h=25, d1=10, d2=6, $fn=16);\n        }\n    }\n}\n\n// Head details\nmodule ear(x_offset) {\n    color(\"royalblue\") {\n        translate([x_offset, -20, 45]) {\n            rotate([0, 15, x_offset > 0 ? 15 : -15]) {\n                scale([0.4, 0.2, 1])\n                cylinder(h=15, d=10, $fn=8);\n            }\n        }\n    }\n}\n\n// Ears\near(8);\near(-8);\n\n// Snout\ncolor(\"royalblue\") {\n    translate([0, -25, 32]) {\n        scale([0.8, 1.5, 0.8])\n        sphere(d=15, $fn=24);\n    }\n}\n\n// Eyes\nmodule eye(x_offset) {\n    color(\"yellow\") {\n        translate([x_offset, -25, 38]) {\n            sphere(d=4, $fn=16);\n        }\n    }\n    color(\"black\") {\n        translate([x_offset + (x_offset > 0 ? 1 : -1), -26, 39]) {\n            sphere(d=2, $fn=16);\n        }\n    }\n}\n\neye(6);\neye(-6);\n\n// Nose\ncolor(\"black\") {\n    translate([0, -28, 33])\n        sphere(d=3, $fn=16);\n}\n\n// Mouth line\ncolor(\"black\") {\n    translate([0, -26, 30]) {\n        rotate([90, 0, 0])\n        cylinder(h=0.5, d=6, $fn=16);\n    }\n}\n\n// Lightning bolt pattern on body\ncolor(\"yellow\") {\n    for(i = [1:3]) {\n        translate([0, 5 + i*5, 20 - i*3]) {\n            rotate([0, 0, 45])\n            scale([0.3, 1, 0.1])\n            cube([5, 8, 2], center=true);\n        }\n    }\n}\n\n// Back spikes\ncolor(\"royalblue\") {\n    for(i = [0:2]) {\n        translate([0, 10 - i*8, 25 + i*2]) {\n            rotate([0, 20, 0])\n            cylinder(h=8, d1=6, d2=3, $fn=8);\n        }\n    }\n}\n\n// Feet pads\nmodule foot_pad(x_offset, y_offset) {\n    color(\"slateblue\") {\n        translate([x_offset, y_offset, -12])\n            sphere(d=6, $fn=16);\n    }\n}\n\nfoot_pad(10, 5);\nfoot_pad(-10, 5);\nfoot_pad(12, -15);\nfoot_pad(-12, -15);",
    "renders": true
  },
  {
    "pokemon": "manectric",
    "openscad_code": "// Manectric - Electric Pokemon\n// Scale: 60mm tall approximately\nmodule manectric() {\n    color(\"royalblue\")\n    // Main body\n    union() {\n        // Torso\n        translate([0, 0, 15]) \n            scale([1, 0.7, 1.2]) \n                sphere(d=30);\n        \n        // Chest marking\n        color(\"gold\")\n        translate([0, -10, 18])\n            rotate([90, 0, 0])\n                cylinder(h=1, d1=12, d2=20);\n        \n        // Head\n        color(\"royalblue\")\n        translate([0, 5, 35])\n            scale([0.8, 0.8, 1]) \n                sphere(d=25);\n        \n        // Muzzle\n        color(\"royalblue\")\n        translate([0, 15, 30])\n            scale([0.6, 1.2, 0.6])\n                sphere(d=20);\n        \n        // Neck spikes\n        for(i=[-1:1]) {\n            color(\"gold\")\n            translate([i*8, 0, 28])\n                rotate([30*i, 0, 0])\n                    cylinder(h=8, d1=3, d2=1);\n        }\n        \n        // Legs\n        for(x=[-12, 12]) {\n            color(\"royalblue\")\n            // Upper leg\n            translate([x, 0, 10])\n                rotate([0, 20*sign(x), 0])\n                    cylinder(h=15, d1=8, d2=6);\n            \n            // Lower leg\n            translate([x*1.5, 0, 0])\n                rotate([0, 20*sign(x), 0])\n                    cylinder(h=10, d1=6, d2=4);\n            \n            // Paw\n            translate([x*2, 0, -5])\n                sphere(d=6);\n        }\n        \n        // Tail\n        color(\"royalblue\")\n        translate([0, -20, 20])\n            rotate([30, 0, 0])\n                cylinder(h=25, d1=12, d2=4);\n        \n        // Tail spikes\n        for(i=[0:2]) {\n            color(\"gold\")\n            translate([0, -20-i*5, 18-i*3])\n                rotate([45, 0, 0])\n                    cylinder(h=6, d1=4, d2=1);\n        }\n        \n        // Ears\n        for(x=[-8, 8]) {\n            color(\"royalblue\")\n            translate([x, 0, 45])\n                rotate([0, 0, 15*sign(x)])\n                    scale([0.3, 0.1, 1])\n                        cylinder(h=15, d1=4, d2=1);\n            \n            color(\"gold\")\n            translate([x, 0, 45])\n                rotate([0, 0, 15*sign(x)])\n                    scale([0.2, 0.05, 0.8])\n                        cylinder(h=12, d1=3, d2=0.5);\n        }\n    }\n    \n    // Eyes\n    for(x=[-5, 5]) {\n        color(\"gold\")\n        translate([x, 18, 33])\n            sphere(d=3);\n        \n        color(\"black\")\n        translate([x, 19, 33])\n            sphere(d=1.5);\n    }\n    \n    // Nose\n    color(\"black\")\n    translate([0, 22, 30])\n        sphere(d=2);\n    \n    // Back stripes\n    for(z=[20, 15, 10]) {\n        color(\"gold\")\n        translate([0, -8, z])\n            rotate([90, 0, 0])\n                cylinder(h=1, d1=15, d2=20);\n    }\n}\n\nmanectric();",
    "renders": true
  },
  {
    "pokemon": "plusle",
    "openscad_code": "// Plusle - Medium Complexity Realistic Style\n// Overall height ~70mm\n\n// Colors\nplusle_red = [0.91, 0.2, 0.2];\nplusle_white = [0.98, 0.98, 0.95];\nplusle_black = [0.1, 0.1, 0.1];\nplusle_cheek = [0.78, 0.2, 0.2];\n\n// Main body\nmodule body() {\n    color(plusle_red)\n    union() {\n        // Torso - oval shape\n        scale([1.2, 1, 1.1])\n        sphere(d=30, $fn=32);\n        \n        // Lower body extension\n        translate([0, 0, -12])\n        scale([1.1, 0.9, 0.8])\n        sphere(d=28, $fn=32);\n    }\n}\n\n// Head\nmodule head() {\n    color(plusle_red)\n    translate([0, 0, 25])\n    scale([1.1, 1, 1.2])\n    sphere(d=32, $fn=32);\n}\n\n// Ears with plus signs\nmodule ears() {\n    color(plusle_red)\n    union() {\n        // Left ear\n        translate([-15, 0, 40]) {\n            rotate([0, -20, -30])\n            scale([0.3, 0.3, 2.5])\n            cylinder(d1=8, d2=4, h=25, $fn=8);\n            \n            // Plus sign on left ear\n            translate([0, 0, 12])\n            color(plusle_white) {\n                cube([10, 2, 2], center=true);\n                cube([2, 10, 2], center=true);\n            }\n        }\n        \n        // Right ear\n        translate([15, 0, 40]) {\n            rotate([0, -20, 30])\n            scale([0.3, 0.3, 2.5])\n            cylinder(d1=8, d2=4, h=25, $fn=8);\n            \n            // Plus sign on right ear\n            translate([0, 0, 12])\n            color(plusle_white) {\n                cube([10, 2, 2], center=true);\n                cube([2, 10, 2], center=true);\n            }\n        }\n    }\n}\n\n// Tail with plus sign\nmodule tail() {\n    color(plusle_red)\n    translate([0, -12, -25]) {\n        rotate([90, 0, 0])\n        scale([0.4, 0.4, 3])\n        cylinder(d1=6, d2=4, h=30, $fn=8);\n        \n        // Plus sign on tail\n        translate([0, 0, 15])\n        rotate([90, 0, 0])\n        color(plusle_white) {\n            cube([12, 2, 2], center=true);\n            cube([2, 12, 2], center=true);\n        }\n    }\n}\n\n// Arms\nmodule arms() {\n    color(plusle_red)\n    union() {\n        // Left arm\n        translate([-18, 8, 5]) {\n            rotate([90, 0, -45])\n            scale([0.4, 0.4, 1.2])\n            cylinder(d=8, h=15, $fn=16);\n        }\n        \n        // Right arm\n        translate([18, 8, 5]) {\n            rotate([90, 0, 45])\n            scale([0.4, 0.4, 1.2])\n            cylinder(d=8, h=15, $fn=16);\n        }\n    }\n}\n\n// Legs\nmodule legs() {\n    color(plusle_red)\n    union() {\n        // Left leg\n        translate([-8, 5, -22]) {\n            rotate([90, 0, 0])\n            scale([0.5, 0.5, 1.2])\n            cylinder(d=8, h=12, $fn=16);\n        }\n        \n        // Right leg\n        translate([8, 5, -22]) {\n            rotate([90, 0, 0])\n            scale([0.5, 0.5, 1.2])\n            cylinder(d=8, h=12, $fn=16);\n        }\n    }\n}\n\n// Face features\nmodule face() {\n    union() {\n        // Eyes\n        color(plusle_black) {\n            translate([-7, 12, 28])\n            sphere(d=4, $fn=16);\n            \n            translate([7, 12, 28])\n            sphere(d=4, $fn=16);\n        }\n        \n        // Eye highlights\n        color(plusle_white) {\n            translate([-6, 13, 30])\n            sphere(d=1.5, $fn=8);\n            \n            translate([8, 13, 30])\n            sphere(d=1.5, $fn=8);\n        }\n        \n        // Nose\n        color(plusle_black)\n        translate([0, 14, 25])\n        sphere(d=2, $fn=8);\n        \n        // Mouth\n        color(plusle_black)\n        translate([0, 16, 22])\n        rotate([90, 0, 0])\n        cylinder(d1=4, d2=2, h=0.5, $fn=16);\n        \n        // Cheek patches\n        color(plusle_cheek) {\n            translate([-12, 10, 24])\n            scale([1, 0.8, 0.5])\n            sphere(d=8, $fn=16);\n            \n            translate([12, 10, 24])\n            scale([1, 0.8, 0.5])\n            sphere(d=8, $fn=16);\n        }\n    }\n}\n\n// Belly marking\nmodule belly_marking() {\n    color(plusle_white)\n    translate([0, 2, 5])\n    scale([0.8, 0.7, 0.8])\n    sphere(d=20, $fn=32);\n}\n\n// Main assembly\nunion() {\n    body();\n    head();\n    ears();\n    tail();\n    arms();\n    legs();\n    face();\n    belly_marking();\n}",
    "renders": true
  },
  {
    "pokemon": "minun",
    "openscad_code": "// Minun Pokemon in realistic 3D printable style\n// Dimensions approx 80mm tall\n\n// Colors\n$fa = 1;\n$fs = 0.4;\n\nmodule body() {\n    color(\"deepskyblue\")\n    union() {\n        // Main body sphere\n        translate([0, 0, 35])\n        scale([1, 0.9, 1.1])\n        sphere(25);\n        \n        // Belly patch\n        color(\"white\")\n        translate([0, -20, 20])\n        scale([1, 0.3, 0.8])\n        sphere(20);\n    }\n}\n\nmodule ears() {\n    // Left ear\n    color(\"deepskyblue\")\n    translate([-15, 0, 55])\n    rotate([0, 10, -30])\n    scale([0.5, 0.2, 2])\n    cylinder(20, 10, 5, true);\n    \n    // Right ear\n    mirror([1, 0, 0])\n    translate([-15, 0, 55])\n    rotate([0, 10, -30])\n    scale([0.5, 0.2, 2])\n    cylinder(20, 10, 5, true);\n    \n    // Ear tips\n    color(\"white\")\n    for(side = [-1, 1]) {\n        translate([side * 25, 0, 73])\n        scale([0.4, 0.4, 0.6])\n        sphere(5);\n    }\n}\n\nmodule tail() {\n    color(\"deepskyblue\")\n    union() {\n        // Main tail\n        translate([0, 25, 30])\n        rotate([90, 0, 0])\n        cylinder(40, 8, 8);\n        \n        // Tail minus shape\n        color(\"white\")\n        translate([0, 45, 30])\n        rotate([90, 0, 0])\n        scale([0.8, 0.2, 1])\n        cube([20, 8, 8], center=true);\n    }\n}\n\nmodule arms() {\n    for(side = [-1, 1]) {\n        color(\"deepskyblue\")\n        translate([side * 20, 5, 25])\n        rotate([0, side * -20, 0])\n        scale([0.4, 0.4, 1])\n        sphere(10);\n        \n        color(\"deepskyblue\")\n        translate([side * 28, 0, 15])\n        rotate([0, side * -30, 0])\n        cylinder(15, 6, 4);\n    }\n}\n\nmodule legs() {\n    for(side = [-1, 1]) {\n        color(\"deepskyblue\")\n        translate([side * 10, 0, 0])\n        scale([0.7, 0.7, 1])\n        sphere(12);\n        \n        color(\"deepskyblue\")\n        translate([side * 10, 0, -10])\n        cylinder(15, 10, 8);\n    }\n}\n\nmodule face() {\n    // Eyes\n    color(\"black\")\n    for(side = [-1, 1]) {\n        translate([side * 12, -22, 40])\n        scale([1, 1.2, 0.3])\n        sphere(5);\n    }\n    \n    // Pupils\n    color(\"white\")\n    for(side = [-1, 1]) {\n        translate([side * 13, -23, 42])\n        sphere(2);\n    }\n    \n    // Cheek marks\n    color(\"red\")\n    for(side = [-1, 1]) {\n        translate([side * 18, -15, 30])\n        scale([1, 0.7, 0.3])\n        sphere(6);\n    }\n    \n    // Mouth\n    color(\"black\")\n    translate([0, -28, 30])\n    rotate([90, 0, 0])\n    cylinder(1, 8, 8);\n    \n    // Nose\n    color(\"black\")\n    translate([0, -25, 35])\n    sphere(2);\n}\n\n// Assemble the model\nunion() {\n    body();\n    ears();\n    tail();\n    arms();\n    legs();\n    face();\n}",
    "renders": true
  },
  {
    "pokemon": "volbeat",
    "openscad_code": "// Volbeat Pokemon - Realistic Style\n// Medium complexity OpenSCAD model\n\n$fn = 32;\n\n// Main body color (blue)\nmodule body() {\n    color([0.2, 0.4, 0.9]) {\n        // Main body sphere\n        sphere(d = 30);\n        \n        // Head extension\n        translate([0, 0, 15])\n            scale([1, 1.2, 0.8])\n                sphere(d = 20);\n    }\n}\n\n// Eyes with realistic shape\nmodule eyes() {\n    // Left eye\n    translate([-8, 12, 12]) {\n        color([1, 1, 1]) \n            sphere(d = 10);\n        translate([0, 0, 5])\n            color([0.1, 0.1, 0.1])\n                sphere(d = 6);\n        translate([-2, 2, 6])\n            color([1, 1, 1])\n                sphere(d = 2);\n    }\n    \n    // Right eye\n    translate([8, 12, 12]) {\n        color([1, 1, 1]) \n            sphere(d = 10);\n        translate([0, 0, 5])\n            color([0.1, 0.1, 0.1])\n                sphere(d = 6);\n        translate([-2, 2, 6])\n            color([1, 1, 1])\n                sphere(d = 2);\n    }\n}\n\n// Antennae with light tips\nmodule antennae() {\n    // Left antenna\n    translate([-5, 12, 25]) {\n        rotate([20, 0, -20])\n            color([0.3, 0.3, 0.3])\n                cylinder(h = 15, d1 = 3, d2 = 1);\n        translate([0, 0, 16])\n            color([1, 1, 0.5])\n                sphere(d = 4);\n    }\n    \n    // Right antenna\n    translate([5, 12, 25]) {\n        rotate([20, 0, 20])\n            color([0.3, 0.3, 0.3])\n                cylinder(h = 15, d1 = 3, d2 = 1);\n        translate([0, 0, 16])\n            color([1, 1, 0.5])\n                sphere(d = 4);\n    }\n}\n\n// Wings with realistic curve\nmodule wings() {\n    // Left wing\n    translate([-20, 0, 10]) {\n        rotate([0, 0, 30])\n        color([0.8, 0.8, 0.9, 0.7]) {\n            scale([1.5, 1, 0.3])\n                sphere(d = 25);\n            translate([5, 0, 0])\n                scale([0.8, 0.6, 0.2])\n                    sphere(d = 15);\n        }\n    }\n    \n    // Right wing\n    translate([20, 0, 10]) {\n        rotate([0, 0, -30])\n        color([0.8, 0.8, 0.9, 0.7]) {\n            scale([1.5, 1, 0.3])\n                sphere(d = 25);\n            translate([-5, 0, 0])\n                scale([0.8, 0.6, 0.2])\n                    sphere(d = 15);\n        }\n    }\n}\n\n// Legs\nmodule legs() {\n    for(i = [-1, 1]) {\n        translate([i * 8, 0, -10]) {\n            rotate([30 * i, 0, 0])\n                color([0.2, 0.4, 0.9])\n                    cylinder(h = 12, d = 4);\n            translate([0, 0, 12])\n                sphere(d = 4);\n        }\n    }\n}\n\n// Yellow collar pattern\nmodule collar() {\n    color([1, 0.9, 0.2]) {\n        translate([0, 0, 5])\n            rotate_extrude()\n                translate([12, 0, 0])\n                    circle(d = 3);\n    }\n}\n\n// Tail with light tip\nmodule tail() {\n    translate([0, -15, -5]) {\n        rotate([0, 10, 0])\n            color([0.2, 0.4, 0.9])\n                cylinder(h = 20, d1 = 6, d2 = 3);\n        translate([0, 0, 21])\n            color([1, 1, 0.5])\n                sphere(d = 5);\n    }\n}\n\n// Mouth\nmodule mouth() {\n    translate([0, 18, 8]) {\n        color([0.3, 0.1, 0.2])\n            rotate([90, 0, 0])\n                cylinder(h = 0.5, d = 5);\n    }\n}\n\n// Assemble the complete model\nunion() {\n    body();\n    eyes();\n    antennae();\n    wings();\n    legs();\n    collar();\n    tail();\n    mouth();\n}\n\n// Scale to 60mm height\nscale([2, 2, 2]) {\n    body();\n    eyes();\n    antennae();\n    wings();\n    legs();\n    collar();\n    tail();\n    mouth();\n}",
    "renders": true
  },
  {
    "pokemon": "illumise",
    "openscad_code": "// Illumise Pokemon - Realistic Style\n// Medium complexity 3D printable model\n\n// Colors\ncolor_body = [0.2, 0.1, 0.5];      // Dark purple\ncolor_wings = [0.1, 0.05, 0.3];    // Darker purple\ncolor_markings = [0.9, 0.9, 0.1];  // Yellow\ncolor_eyes = [0.9, 0.9, 0.9];      // White\ncolor_eyes_inner = [0.05, 0.05, 0.05]; // Black\n\n// Body dimensions\nbody_height = 35;\nbody_width = 25;\nbody_depth = 20;\n\n// Main body\nmodule body() {\n    color(color_body)\n    union() {\n        // Torso\n        translate([0, 0, body_height/2])\n            scale([1, 0.8, 1.2])\n                sphere(d=body_width);\n        \n        // Abdomen\n        translate([0, 0, -body_height/4])\n            cylinder(h=body_height/2, d1=body_width*0.8, d2=body_width*0.6);\n    }\n}\n\n// Head\nmodule head() {\n    color(color_body)\n    translate([0, body_depth/2, body_height*0.8])\n        sphere(d=body_width*0.9);\n}\n\n// Ears\nmodule ears() {\n    color(color_body)\n    union() {\n        // Left ear\n        translate([-body_width/3, body_depth/2, body_height*1.1])\n            rotate([0, -20, -30])\n                scale([0.3, 0.3, 1.2])\n                    cylinder(h=body_height/3, d1=body_width/4, d2=body_width/6);\n        \n        // Right ear\n        translate([body_width/3, body_depth/2, body_height*1.1])\n            rotate([0, -20, 30])\n                scale([0.3, 0.3, 1.2])\n                    cylinder(h=body_height/3, d1=body_width/4, d2=body_width/6);\n    }\n}\n\n// Eyes\nmodule eyes() {\n    union() {\n        // Left eye\n        color(color_eyes)\n        translate([-body_width/4, body_depth/2 + body_width*0.4, body_height*0.85])\n            sphere(d=body_width/5);\n        \n        color(color_eyes_inner)\n        translate([-body_width/4, body_depth/2 + body_width*0.5, body_height*0.85])\n            sphere(d=body_width/8);\n        \n        // Right eye\n        color(color_eyes)\n        translate([body_width/4, body_depth/2 + body_width*0.4, body_height*0.85])\n            sphere(d=body_width/5);\n        \n        color(color_eyes_inner)\n        translate([body_width/4, body_depth/2 + body_width*0.5, body_height*0.85])\n            sphere(d=body_width/8);\n    }\n}\n\n// Wings\nmodule wings() {\n    color(color_wings)\n    union() {\n        // Left wing\n        translate([-body_width/1.5, 0, body_height/2])\n            rotate([0, 90, 0])\n                scale([1.5, 1, 0.1])\n                    difference() {\n                        sphere(d=body_width);\n                        translate([body_width/2, 0, 0])\n                            cube([body_width, body_width*2, body_width], center=true);\n                    }\n        \n        // Right wing\n        translate([body_width/1.5, 0, body_height/2])\n            rotate([0, 90, 0])\n                scale([1.5, 1, 0.1])\n                    difference() {\n                        sphere(d=body_width);\n                        translate([-body_width/2, 0, 0])\n                            cube([body_width, body_width*2, body_width], center=true);\n                    }\n    }\n}\n\n// Legs\nmodule legs() {\n    color(color_body)\n    for(i = [-1, 1]) {\n        translate([i*body_width/3, 0, 0])\n            rotate([30, 0, i*20])\n                cylinder(h=body_height/2, d1=body_width/8, d2=body_width/10);\n    }\n}\n\n// Arms\nmodule arms() {\n    color(color_body)\n    for(i = [-1, 1]) {\n        translate([i*body_width/2, 0, body_height*0.6])\n            rotate([0, 0, i*45])\n                cylinder(h=body_height/3, d1=body_width/10, d2=body_width/12);\n    }\n}\n\n// Yellow markings pattern\nmodule markings() {\n    color(color_markings)\n    union() {\n        // Chest marking\n        translate([0, body_depth/2 + 2, body_height*0.7])\n            rotate([90, 0, 0])\n                cylinder(h=1, d=body_width/3);\n        \n        // Wing tips\n        for(angle = [0:60:300]) {\n            rotate([0, 0, angle])\n                translate([body_width*1.1, 0, body_height/2])\n                    sphere(d=body_width/5);\n        }\n    }\n}\n\n// Assemble the model\nunion() {\n    body();\n    head();\n    ears();\n    eyes();\n    wings();\n    legs();\n    arms();\n    markings();\n}",
    "renders": true
  },
  {
    "pokemon": "roselia",
    "openscad_code": "// Roselia Pokemon - Realistic Style\n// Size: ~70mm height\n\n$fn = 32;\nscale_factor = 0.7;\n\nmodule roselia() {\n    color(\"mediumseagreen\") {\n        // Main body\n        translate([0, 0, 25])\n            scale([1, 0.8, 1.2])\n                sphere(r=15);\n        \n        // Head\n        translate([0, 0, 45])\n            scale([0.9, 0.9, 1.1])\n                sphere(r=12);\n    }\n    \n    color(\"forestgreen\") {\n        // Rose hair buns\n        for(i = [-1, 1]) {\n            translate([i*10, 8, 52])\n                rotate([0, 90, 0])\n                    cylinder(h=8, r1=6, r2=4);\n            translate([i*10, 8, 60])\n                sphere(r=5);\n        }\n    }\n    \n    color(\"crimson\") {\n        // Red roses\n        translate([0, 5, 40]) {\n            rotate([0, 0, 0])\n                cylinder(h=3, r=5);\n            translate([0, 0, 3])\n                sphere(r=6);\n        }\n        \n        translate([15, -5, 35]) {\n            rotate([0, 30, 0])\n                cylinder(h=3, r=4);\n            translate([0, 0, 3])\n                sphere(r=5);\n        }\n        \n        translate([-15, -5, 35]) {\n            rotate([0, -30, 0])\n                cylinder(h=3, r=4);\n            translate([0, 0, 3])\n                sphere(r=5);\n        }\n    }\n    \n    color(\"mediumorchid\") {\n        // Blue roses\n        translate([0, -10, 45]) {\n            rotate([0, 180, 0])\n                cylinder(h=3, r=5);\n            translate([0, 0, 3])\n                sphere(r=6);\n        }\n    }\n    \n    color(\"mediumseagreen\") {\n        // Arms\n        for(side = [-1, 1]) {\n            translate([side*12, -5, 35])\n                rotate([0, side*20, 0])\n                    cylinder(h=15, r=4);\n            translate([side*20, -5, 35])\n                sphere(r=3);\n        }\n        \n        // Legs\n        for(side = [-1, 1]) {\n            translate([side*7, 0, 15])\n                cylinder(h=20, r=5);\n            translate([side*7, 0, 5])\n                sphere(r=6);\n        }\n    }\n    \n    color(\"forestgreen\") {\n        // Leaf hands\n        for(side = [-1, 1]) {\n            translate([side*25, -5, 35])\n                rotate([0, 0, side*45])\n                    scale([0.3, 1, 1])\n                        cylinder(h=12, r=4);\n            translate([side*30, -5, 35])\n                sphere(r=3);\n        }\n    }\n    \n    // Eyes\n    color(\"white\") {\n        for(side = [-1, 1]) {\n            translate([side*4, 8, 48])\n                sphere(r=2.5);\n        }\n    }\n    \n    color(\"black\") {\n        // Pupils\n        for(side = [-1, 1]) {\n            translate([side*4.5, 8.5, 49])\n                sphere(r=1.5);\n        }\n        \n        // Mouth\n        translate([0, 2, 42])\n            rotate([90, 0, 0])\n                cylinder(h=1, r1=2, r2=0);\n    }\n}\n\n// Generate the model\nroselia();",
    "renders": true
  },
  {
    "pokemon": "gulpin",
    "openscad_code": "// Gulpin Pokemon - Realistic Style, Medium Complexity\n// Scaled for 3D printing ~70mm tall\n\n// Main body color\nbody_color = \"#78C850\";\naccent_color = \"#F0F0F0\";\nblack = \"#000000\";\nred = \"#FF4040\";\n\n// Overall scale factor\nscale_factor = 0.8;\n\nmodule gulpin_body() {\n    color(body_color)\n    union() {\n        // Main spherical body\n        translate([0, 0, 35])\n            sphere(d = 60, $fn = 48);\n        \n        // Bottom tapered shape\n        translate([0, 0, 10])\n            cylinder(h = 25, d1 = 60, d2 = 40, $fn = 32);\n    }\n}\n\nmodule mouth_detail() {\n    // Mouth cavity\n    difference() {\n        translate([0, 0, 35])\n            sphere(d = 58, $fn = 48);\n        \n        // Mouth opening\n        translate([0, -15, 25])\n            rotate([0, 0, 0])\n                scale([1, 1.2, 0.8])\n                    sphere(d = 35, $fn = 32);\n    }\n    \n    // Lips\n    color(body_color)\n    translate([0, -18, 28])\n        rotate([0, 10, 0])\n            scale([1.1, 0.3, 0.9])\n                sphere(d = 36, $fn = 32);\n}\n\nmodule antennae() {\n    for(i = [-1, 1]) {\n        color(body_color)\n        translate([i * 25, 0, 65])\n            rotate([0, i * 15, 0])\n                cylinder(h = 20, d = 8, $fn = 16);\n        \n        // Antenna tips\n        color(red)\n        translate([i * 27, 0, 85])\n            sphere(d = 12, $fn = 16);\n    }\n}\n\nmodule eyes() {\n    for(i = [-1, 1]) {\n        color(black)\n        translate([i * 18, -10, 45])\n            scale([1, 1.2, 0.5])\n                sphere(d = 12, $fn = 16);\n        \n        // Eye highlights\n        color(white)\n        translate([i * 19, -11, 47])\n            scale([0.5, 0.8, 0.3])\n                sphere(d = 6, $fn = 8);\n    }\n}\n\nmodule diamond_pattern() {\n    // Diamond markings on body\n    color(accent_color)\n    for(i = [0:1]) {\n        rotate([0, 0, i * 180])\n            translate([0, -5, 25])\n                scale([1, 0.8, 1])\n                    cube([20, 4, 15], center = true);\n    }\n    \n    for(i = [0:1]) {\n        rotate([0, 0, 90 + i * 180])\n            translate([0, -5, 25])\n                scale([1, 0.8, 1])\n                    cube([20, 4, 15], center = true);\n    }\n}\n\nmodule leaves() {\n    // Leaf-like growths\n    for(i = [0:5]) {\n        color(body_color)\n        rotate([0, 0, i * 60])\n            translate([30, 0, 25])\n                rotate([90, 0, 0])\n                    scale([0.8, 2, 0.5])\n                        cylinder(h = 15, d1 = 12, d2 = 2, $fn = 3);\n    }\n}\n\n// Main assembly\nscale([scale_factor, scale_factor, scale_factor])\nunion() {\n    gulpin_body();\n    mouth_detail();\n    antennae();\n    eyes();\n    diamond_pattern();\n    leaves();\n}",
    "renders": true
  },
  {
    "pokemon": "swalot",
    "openscad_code": "$fn = 32;\n\n// Swalot - realistic style, medium complexity\nmodule swalot_body() {\n    color([0.4, 0.2, 0.7])\n    union() {\n        // Main body - amorphous blob\n        translate([0, 0, 30])\n        scale([1, 0.9, 1.2])\n        sphere(30);\n        \n        // Lower belly bulge\n        translate([0, -5, 10])\n        scale([1.2, 0.8, 1])\n        sphere(20);\n        \n        // Side bulges\n        translate([-15, 0, 25])\n        sphere(12);\n        translate([15, 0, 25])\n        sphere(12);\n    }\n}\n\nmodule swalot_mouth() {\n    color([0.8, 0.1, 0.2])\n    difference() {\n        // Mouth cavity\n        translate([0, -25, 25])\n        rotate([90, 0, 0])\n        cylinder(h=30, r1=20, r2=25);\n        \n        // Tongue space\n        translate([0, -30, 25])\n        rotate([90, 0, 0])\n        cylinder(h=25, r1=15, r2=20);\n    }\n    \n    // Tongue\n    color([0.9, 0.3, 0.4])\n    translate([0, -35, 20])\n    rotate([90, 0, 0])\n    cylinder(h=10, r1=8, r2=12);\n}\n\nmodule swalot_eyes() {\n    // Left eye\n    color([0.9, 0.9, 0.9])\n    translate([-12, 15, 40])\n    sphere(6);\n    \n    color([0.1, 0.1, 0.1])\n    translate([-12, 15, 42])\n    sphere(3);\n    \n    // Right eye\n    color([0.9, 0.9, 0.9])\n    translate([12, 15, 40])\n    sphere(6);\n    \n    color([0.1, 0.1, 0.1])\n    translate([12, 15, 42])\n    sphere(3);\n}\n\nmodule swalot_eyebrows() {\n    // Left eyebrow\n    color([0.2, 0.1, 0.4])\n    translate([-12, 20, 45])\n    rotate([30, 0, -20])\n    scale([0.5, 0.5, 3])\n    sphere(4);\n    \n    // Right eyebrow\n    color([0.2, 0.1, 0.4])\n    translate([12, 20, 45])\n    rotate([30, 0, 20])\n    scale([0.5, 0.5, 3])\n    sphere(4);\n}\n\nmodule swalot_antennae() {\n    // Left antenna\n    color([0.2, 0.1, 0.4])\n    translate([-15, 0, 55])\n    rotate([0, 20, 0])\n    cylinder(h=15, r=2);\n    \n    color([0.3, 0.15, 0.6])\n    translate([-18, 0, 70])\n    sphere(4);\n    \n    // Right antenna\n    color([0.2, 0.1, 0.4])\n    translate([15, 0, 55])\n    rotate([0, -20, 0])\n    cylinder(h=15, r=2);\n    \n    color([0.3, 0.15, 0.6])\n    translate([18, 0, 70])\n    sphere(4);\n}\n\nmodule swalot_pattern() {\n    // Diamond pattern on body\n    color([0.6, 0.3, 1])\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90])\n        translate([0, 0, 35])\n        scale([1, 0.7, 0.1])\n        sphere(8);\n    }\n    \n    // Additional spots\n    color([0.5, 0.25, 0.8])\n    translate([-20, -10, 25])\n    sphere(3);\n    translate([20, -10, 25])\n    sphere(3);\n    translate([0, 5, 15])\n    sphere(2);\n}\n\nmodule swalot() {\n    swalot_body();\n    swalot_mouth();\n    swalot_eyes();\n    swalot_eyebrows();\n    swalot_antennae();\n    swalot_pattern();\n}\n\n// Scale to 80mm height\nscale(0.8)\nswalot();",
    "renders": true
  },
  {
    "pokemon": "carvanha",
    "openscad_code": "// Carvanha Pokemon - Realistic Style, Medium Complexity\n// 3D printable model with proper wall thickness and no overhangs\n\n// Overall scale factor\nscale_factor = 0.5;\n\n// Main body color (dark blue)\nbody_color = [0.1, 0.2, 0.5];\n\n// Accent color (yellow)\naccent_color = [1, 0.8, 0];\n\n// Eye color (red)\neye_color = [0.8, 0.1, 0.1];\n\n// Teeth color (white)\nteeth_color = [0.95, 0.95, 0.95];\n\n// Body module - streamlined fish shape\nmodule body() {\n    color(body_color)\n    union() {\n        // Main body - elongated ellipsoid\n        scale([1.2, 0.8, 0.6])\n            sphere(d=40);\n        \n        // Dorsal fin base\n        translate([0, 0, 10])\n            scale([0.4, 0.2, 0.3])\n                sphere(d=20);\n    }\n}\n\n// Dorsal fin - triangular with serrated edge\nmodule dorsal_fin() {\n    color(body_color)\n    translate([0, -5, 18])\n    union() {\n        // Main fin\n        rotate([0, 0, 0])\n            linear_extrude(height=0.1)\n                polygon(points=[[-8,0], [8,0], [0,15]]);\n        \n        // Serrations\n        for(i=[-6:2:6]) {\n            translate([i, 0, 12])\n                cube([1, 0.5, 3], center=true);\n        }\n    }\n}\n\n// Pectoral fins (side fins)\nmodule pectoral_fin(side) {\n    color(body_color)\n    mirror([side, 0, 0])\n    translate([18, 0, -5])\n    rotate([0, 0, side * -20])\n    scale([1, 0.3, 0.8])\n        sphere(d=12);\n}\n\n// Tail fin - crescent shape\nmodule tail_fin() {\n    color(body_color)\n    translate([-35, 0, 0])\n    union() {\n        // Upper lobe\n        rotate([0, 0, 30])\n            scale([1.5, 0.2, 1])\n                sphere(d=15);\n        \n        // Lower lobe\n        rotate([0, 0, -30])\n            scale([1.5, 0.2, 1])\n                sphere(d=15);\n        \n        // Connecting part\n        translate([-8, 0, 0])\n            scale([0.8, 0.3, 0.5])\n                sphere(d=10);\n    }\n}\n\n// Head with distinctive features\nmodule head() {\n    color(body_color)\n    union() {\n        // Rounded snout\n        translate([25, 0, 0])\n            scale([1.2, 1, 0.8])\n                sphere(d=20);\n        \n        // Forehead ridge\n        translate([20, 0, 8])\n            scale([0.8, 0.4, 0.3])\n                sphere(d=15);\n    }\n}\n\n// Eyes with yellow ring\nmodule eye(side) {\n    color(eye_color)\n    translate([22, side * 8, 3])\n    union() {\n        // Eyeball\n        sphere(d=6);\n        \n        // Yellow ring around eye\n        color(accent_color)\n        translate([0, 0, 2])\n            scale([1.3, 1.3, 0.2])\n                sphere(d=6);\n    }\n}\n\n// Mouth with sharp teeth\nmodule mouth() {\n    difference() {\n        // Mouth cavity\n        color([0, 0, 0])\n        translate([30, 0, -3])\n            scale([0.8, 0.6, 0.3])\n                sphere(d=15);\n        \n        // Teeth\n        color(teeth_color)\n        for(i=[-3:1:3]) {\n            translate([32, i * 2, -3])\n                rotate([0, 90, 0])\n                    cylinder(h=3, d1=1.5, d2=0.5);\n        }\n    }\n}\n\n// Yellow star marking on forehead\nmodule forehead_marking() {\n    color(accent_color)\n    translate([20, 0, 10])\n    scale([0.5, 0.5, 0.2])\n    union() {\n        // Star points\n        for(i=[0:72:360]) {\n            rotate([0, 0, i])\n                translate([0, 4, 0])\n                    cube([2, 4, 1], center=true);\n        }\n        \n        // Center circle\n        sphere(d=4);\n    }\n}\n\n// Gills detail\nmodule gills() {\n    color([0.05, 0.15, 0.4])\n    for(i=[1:3]) {\n        translate([12, 8, -6 + i * 2])\n            rotate([90, 0, 0])\n                cylinder(h=0.5, d=6);\n        translate([12, -8, -6 + i * 2])\n            rotate([90, 0, 0])\n                cylinder(h=0.5, d=6);\n    }\n}\n\n// Main assembly\nscale([scale_factor, scale_factor, scale_factor])\nunion() {\n    body();\n    head();\n    dorsal_fin();\n    pectoral_fin(1);\n    pectoral_fin(-1);\n    tail_fin();\n    eye(1);\n    eye(-1);\n    mouth();\n    forehead_marking();\n    gills();\n}",
    "renders": true
  },
  {
    "pokemon": "sharpedo",
    "openscad_code": "// Sharpedo - Realistic Style, Medium Complexity\n// 3D printable Pokemon model with characteristic features\n\n$fn = 50;\n\n// Main body color - dark blue/grey\ncolor([0.1, 0.15, 0.3]) {\n    // Main torpedo-shaped body\n    rotate([0, 90, 0]) {\n        hull() {\n            translate([0, 0, -20]) scale([1, 0.7, 0.7]) sphere(15);\n            translate([0, 0, 20]) scale([1.2, 1, 1]) sphere(18);\n        }\n    }\n    \n    // Dorsal fin\n    translate([0, 0, 15]) rotate([0, 15, 0]) {\n        difference() {\n            cube([30, 3, 20], center=true);\n            translate([0, -2, 10]) rotate([15, 0, 0]) cube([35, 5, 10], center=true);\n        }\n    }\n    \n    // Tail fin assembly\n    module tail_fin() {\n        rotate([0, -30, 0]) {\n            translate([0, 0, 0]) rotate([0, 0, 0]) cube([25, 2, 15], center=true);\n            translate([0, 0, -8]) rotate([0, 0, 30]) cube([20, 2, 12], center=true);\n            translate([0, 0, 8]) rotate([0, 0, -30]) cube([20, 2, 12], center=true);\n        }\n    }\n    \n    translate([-35, 0, 0]) tail_fin();\n    \n    // Side fins\n    module side_fin() {\n        translate([10, 0, 0]) rotate([0, 0, 45]) {\n            difference() {\n                cube([15, 2, 8], center=true);\n                translate([5, 2, 0]) rotate([0, 0, 20]) cube([10, 3, 6], center=true);\n            }\n        }\n    }\n    \n    translate([0, 12, -5]) side_fin();\n    translate([0, -12, -5]) mirror([0, 1, 0]) side_fin();\n}\n\n// Yellow star marking on nose\ncolor([0.9, 0.7, 0.1]) {\n    translate([20, 0, 0]) rotate([0, 90, 0]) {\n        difference() {\n            cylinder(h=2, r1=8, r2=8);\n            for(i = [0:4]) {\n                rotate([0, 0, i * 72 + 36]) {\n                    translate([0, 3, -1]) cube([6, 6, 4], center=true);\n                }\n            }\n        }\n    }\n}\n\n// Eyes - red with black pupils\nmodule eye() {\n    color([0.8, 0.1, 0.1]) {\n        translate([15, 0, 0]) rotate([0, 90, 0]) {\n            difference() {\n                cylinder(h=3, r1=5, r2=5);\n                color([0, 0, 0]) {\n                    translate([2, 0, 0]) sphere(2);\n                }\n            }\n        }\n    }\n}\n\ntranslate([0, 8, 5]) eye();\ntranslate([0, -8, 5]) eye();\n\n// Teeth\ncolor([0.9, 0.9, 0.9]) {\n    module tooth() {\n        translate([22, 0, 0]) rotate([0, -90, 0]) {\n            cylinder(h=8, r1=1, r2=0.5);\n        }\n    }\n    \n    for(i = [-2:2]) {\n        translate([0, i*3, -2]) tooth();\n    }\n}\n\n// Gills\ncolor([0.05, 0.1, 0.2]) {\n    module gill() {\n        translate([5, 0, 0]) rotate([0, 90, 0]) {\n            difference() {\n                cylinder(h=1, r1=3, r2=3);\n                translate([0, 0, -0.5]) cylinder(h=2, r1=2, r2=2);\n            }\n        }\n    }\n    \n    for(i = [0:2]) {\n        translate([0, 15, -8-i*2]) gill();\n        translate([0, -15, -8-i*2]) mirror([0, 1, 0]) gill();\n    }\n}\n\n// Small fins near tail\ncolor([0.15, 0.2, 0.35]) {\n    module small_fin() {\n        translate([-25, 0, 0]) rotate([0, 0, 30]) {\n            cube([10, 1, 6], center=true);\n        }\n    }\n    \n    translate([0, 6, 0]) small_fin();\n    translate([0, -6, 0]) mirror([0, 1, 0]) small_fin();\n}",
    "renders": true
  },
  {
    "pokemon": "wailmer",
    "openscad_code": "// Wailmer Pokemon - Realistic Style\n// Medium complexity OpenSCAD model for 3D printing\n\nscale_factor = 0.4;\n$fn = 32;\n\nmodule body() {\n    // Main spherical body\n    color([0.3, 0.6, 0.9]) {\n        sphere(25 * scale_factor);\n    }\n    \n    // Underbelly lighter color\n    color([0.7, 0.9, 1.0]) {\n        intersection() {\n            sphere(24 * scale_factor);\n            translate([0, 0, -10 * scale_factor]) {\n                sphere(30 * scale_factor);\n            }\n        }\n    }\n}\n\nmodule dorsal_fin() {\n    color([0.2, 0.5, 0.8]) {\n        // Main dorsal fin\n        translate([0, 0, 20 * scale_factor]) {\n            rotate([90, 0, 0]) {\n                scale([1, 1.5, 0.8]) {\n                    cylinder(h=15 * scale_factor, r1=8 * scale_factor, r2=0);\n                }\n            }\n        }\n        \n        // Secondary fins\n        for(i = [-1, 1]) {\n            translate([i * 12 * scale_factor, -5 * scale_factor, 15 * scale_factor]) {\n                rotate([90, 0, i * 20]) {\n                    scale([0.6, 1, 0.5]) {\n                        cylinder(h=10 * scale_factor, r1=5 * scale_factor, r2=0);\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule tail_fin() {\n    color([0.2, 0.5, 0.8]) {\n        translate([0, -25 * scale_factor, -5 * scale_factor]) {\n            rotate([0, 0, 0]) {\n                scale([1.5, 1, 0.3]) {\n                    cylinder(h=20 * scale_factor, r1=8 * scale_factor, r2=0);\n                }\n            }\n        }\n        \n        // Tail fin detail\n        translate([0, -28 * scale_factor, -8 * scale_factor]) {\n            rotate([90, 0, 0]) {\n                scale([2, 0.5, 1]) {\n                    cylinder(h=15 * scale_factor, r1=5 * scale_factor, r2=0);\n                }\n            }\n        }\n    }\n}\n\nmodule eyes() {\n    // Eye sockets\n    color([0.1, 0.1, 0.1]) {\n        translate([-12 * scale_factor, 15 * scale_factor, 10 * scale_factor]) {\n            sphere(3 * scale_factor);\n        }\n        translate([12 * scale_factor, 15 * scale_factor, 10 * scale_factor]) {\n            sphere(3 * scale_factor);\n        }\n    }\n    \n    // Eye whites\n    color([1, 1, 1]) {\n        translate([-12 * scale_factor, 16 * scale_factor, 10 * scale_factor]) {\n            sphere(2 * scale_factor);\n        }\n        translate([12 * scale_factor, 16 * scale_factor, 10 * scale_factor]) {\n            sphere(2 * scale_factor);\n        }\n    }\n    \n    // Pupils\n    color([0.1, 0.1, 0.1]) {\n        translate([-12 * scale_factor, 17 * scale_factor, 11 * scale_factor]) {\n            sphere(1 * scale_factor);\n        }\n        translate([12 * scale_factor, 17 * scale_factor, 11 * scale_factor]) {\n            sphere(1 * scale_factor);\n        }\n    }\n}\n\nmodule mouth() {\n    color([0.8, 0.4, 0.4]) {\n        translate([0, 20 * scale_factor, -5 * scale_factor]) {\n            rotate([90, 0, 0]) {\n                scale([1.2, 0.5, 1]) {\n                    cylinder(h=3 * scale_factor, r1=8 * scale_factor, r2=8 * scale_factor);\n                }\n            }\n        }\n        \n        // Mouth detail\n        translate([0, 20 * scale_factor, -6 * scale_factor]) {\n            scale([0.8, 0.3, 0.8]) {\n                sphere(3 * scale_factor);\n            }\n        }\n    }\n}\n\nmodule blowhole() {\n    color([0.2, 0.4, 0.7]) {\n        translate([0, 10 * scale_factor, 20 * scale_factor]) {\n            cylinder(h=5 * scale_factor, r=3 * scale_factor);\n        }\n    }\n}\n\nmodule markings() {\n    // Body markings\n    color([0.1, 0.3, 0.7]) {\n        translate([0, 0, 5 * scale_factor]) {\n            rotate([0, 0, 0]) {\n                scale([1.2, 1, 0.1]) {\n                    cylinder(h=30 * scale_factor, r1=20 * scale_factor, r2=20 * scale_factor);\n                }\n            }\n        }\n        \n        // Side markings\n        for(i = [-1, 1]) {\n            translate([i * 15 * scale_factor, 0, 0]) {\n                sphere(3 * scale_factor);\n            }\n        }\n    }\n}\n\nmodule flippers() {\n    color([0.2, 0.5, 0.8]) {\n        // Left flipper\n        translate([-20 * scale_factor, 0, -5 * scale_factor]) {\n            rotate([0, 0, 45]) {\n                scale([2, 0.5, 0.3]) {\n                    cylinder(h=15 * scale_factor, r1=5 * scale_factor, r2=0);\n                }\n            }\n        }\n        \n        // Right flipper\n        translate([20 * scale_factor, 0, -5 * scale_factor]) {\n            rotate([0, 0, -45]) {\n                scale([2, 0.5, 0.3]) {\n                    cylinder(h=15 * scale_factor, r1=5 * scale_factor, r2=0);\n                }\n            }\n        }\n    }\n}\n\n// Assemble the complete Wailmer\nunion() {\n    body();\n    dorsal_fin();\n    tail_fin();\n    eyes();\n    mouth();\n    blowhole();\n    markings();\n    flippers();\n}",
    "renders": true
  },
  {
    "pokemon": "wailord",
    "openscad_code": "// Wailord in realistic style - medium complexity\n// Designed for 3D printing with no overhangs\n\n// Colors\nskin_color = [0.6, 0.75, 0.9];\nbelly_color = [0.85, 0.9, 0.95];\neye_color = [0.1, 0.1, 0.1];\nmouth_color = [0.3, 0.2, 0.2];\nmarking_color = [0.4, 0.5, 0.7];\n\n// Overall scale\nscale_factor = 0.3;\n\n// Main body\nmodule body() {\n    color(skin_color)\n    union() {\n        // Main body sphere\n        translate([0, 0, 15])\n        scale([1.2, 1, 0.8])\n        sphere(30);\n        \n        // Tail extension\n        translate([35, 0, 10])\n        scale([1.5, 0.8, 0.6])\n        rotate([0, -20, 0])\n        sphere(20);\n        \n        // Underbelly\n        color(belly_color)\n        translate([0, 0, 8])\n        scale([1.1, 0.9, 0.4])\n        sphere(28);\n    }\n}\n\n// Dorsal fins\nmodule dorsal_fins() {\n    color(skin_color)\n    for(i = [-1, 1]) {\n        translate([10 * i, 0, 35])\n        rotate([0, 0, i * 15])\n        scale([0.3, 1, 0.5])\n        cylinder(h = 15, r1 = 10, r2 = 0);\n    }\n}\n\n// Side fins\nmodule side_fins() {\n    color(skin_color)\n    for(i = [-1, 1]) {\n        translate([-5, 25 * i, 20])\n        rotate([0, 0, 90])\n        scale([1.2, 0.6, 0.3])\n        cylinder(h = 15, r1 = 12, r2 = 5);\n    }\n}\n\n// Eyes\nmodule eyes() {\n    color(eye_color)\n    for(i = [-1, 1]) {\n        translate([8, 8 * i, 30])\n        sphere(3);\n        \n        // Eye highlight\n        color([1, 1, 1])\n        translate([9, 8 * i, 31])\n        sphere(1);\n    }\n}\n\n// Mouth\nmodule mouth() {\n    color(mouth_color)\n    translate([30, 0, 18])\n    rotate([0, -10, 0])\n    scale([1, 0.3, 0.5])\n    sphere(8);\n    \n    // Mouth line\n    color(mouth_color)\n    translate([35, 0, 18])\n    rotate([0, -10, 0])\n    cylinder(h = 0.5, r = 12);\n}\n\n// Body markings\nmodule markings() {\n    color(marking_color)\n    // Top marking\n    translate([0, 0, 38])\n    scale([0.6, 0.4, 0.1])\n    sphere(25);\n    \n    // Side markings\n    for(i = [-1, 1]) {\n        translate([0, 15 * i, 25])\n        scale([0.8, 0.3, 0.2])\n        sphere(15);\n    }\n}\n\n// Blowhole\nmodule blowhole() {\n    color(skin_color)\n    translate([0, 0, 42])\n    cylinder(h = 5, r = 3);\n}\n\n// Assemble all parts\nscale([scale_factor, scale_factor, scale_factor])\nunion() {\n    body();\n    dorsal_fins();\n    side_fins();\n    eyes();\n    mouth();\n    markings();\n    blowhole();\n}",
    "renders": true
  },
  {
    "pokemon": "numel",
    "openscad_code": "// Numel - realistic style\n// Dimensions: 60mm tall, 50mm long, 40mm wide\n\n// Colors\n$fa = 1;\n$fs = 0.4;\n\n// Main body\nmodule body() {\n    color([0.6, 0.4, 0.3]) {\n        // Torso\n        translate([0, 0, 15])\n            scale([1, 0.8, 0.6])\n            sphere(d=40);\n        \n        // Belly bulge\n        translate([0, -5, 10])\n            scale([1.2, 1, 0.8])\n            sphere(d=35);\n    }\n}\n\n// Head\nmodule head() {\n    color([0.6, 0.4, 0.3]) {\n        // Main head shape\n        translate([0, 20, 35])\n            scale([0.9, 0.7, 0.8])\n            sphere(d=30);\n        \n        // Snout\n        translate([0, 32, 32])\n            scale([0.6, 1.2, 0.4])\n            sphere(d=20);\n    }\n}\n\n// Hump with volcano crater\nmodule hump() {\n    color([0.5, 0.3, 0.2]) {\n        // Main hump\n        translate([0, -5, 40])\n            scale([1, 0.9, 1.2])\n            sphere(d=35);\n        \n        // Crater rim\n        color([0.4, 0.2, 0.2])\n        translate([0, -5, 55])\n            cylinder(h=3, d1=20, d2=15);\n        \n        // Lava glow\n        color([1, 0.3, 0])\n        translate([0, -5, 55.5])\n            cylinder(h=2, d=12);\n    }\n}\n\n// Legs\nmodule legs() {\n    color([0.5, 0.3, 0.2])\n    for(side = [-1, 1]) {\n        // Front legs\n        translate([side * 15, 15, 0])\n            rotate([0, 10, 0])\n            cylinder(h=20, d=8);\n        \n        // Back legs\n        translate([side * 12, -15, 0])\n            rotate([0, -10, 0])\n            cylinder(h=22, d=10);\n    }\n}\n\n// Ears\nmodule ears() {\n    color([0.5, 0.3, 0.2])\n    for(side = [-1, 1]) {\n        translate([side * 12, 25, 45])\n            rotate([0, side * -20, 0])\n            scale([0.3, 0.2, 1])\n            cylinder(h=15, d=8);\n    }\n}\n\n// Eyes\nmodule eyes() {\n    color([0.1, 0.1, 0.1])\n    for(side = [-1, 1]) {\n        translate([side * 8, 30, 38])\n            sphere(d=4);\n    }\n}\n\n// Nose holes\nmodule nose() {\n    color([0.2, 0.1, 0.1])\n    for(side = [-1, 1]) {\n        translate([side * 4, 38, 30])\n            sphere(d=3);\n    }\n}\n\n// Green markings pattern\nmodule markings() {\n    color([0.2, 0.5, 0.2]) {\n        // Back stripes\n        for(i = [0:1]) {\n            translate([0, 5 - i * 10, 25 + i * 10])\n                scale([1.2, 0.3, 0.3])\n                sphere(d=20);\n        }\n        \n        // Head marking\n        translate([0, 25, 45])\n            scale([0.8, 0.5, 0.3])\n            sphere(d=15);\n    }\n}\n\n// Tail\nmodule tail() {\n    color([0.5, 0.3, 0.2])\n    translate([0, -25, 15])\n        rotate([0, 0, 30])\n        cylinder(h=20, d1=10, d2=6);\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    hump();\n    legs();\n    ears();\n    tail();\n    markings();\n    eyes();\n    nose();\n}",
    "renders": true
  },
  {
    "pokemon": "camerupt",
    "openscad_code": "// Camerupt Pokemon - Realistic Style, Medium Complexity\n// 3D printable with proper wall thickness and no overhangs\n\n// Color definitions\nred = [0.8, 0.2, 0.2];\nbrown = [0.4, 0.2, 0.1];\ngray = [0.3, 0.3, 0.3];\nblack = [0.1, 0.1, 0.1];\nyellow = [0.9, 0.7, 0.1];\norange = [0.9, 0.4, 0.1];\n\n// Main body\nmodule body() {\n    color(red)\n    difference() {\n        // Main body sphere\n        sphere(d = 35, $fn = 32);\n        \n        // Cut bottom flat for printing\n        translate([0, 0, -20])\n            cube([50, 50, 40], center = true);\n    }\n}\n\n// Head with hump\nmodule head() {\n    color(red)\n    union() {\n        // Head sphere\n        translate([0, 22, 10])\n            sphere(d = 25, $fn = 32);\n            \n        // Hump on back\n        translate([0, 15, 20])\n            scale([1, 1.2, 0.8])\n                sphere(d = 18, $fn = 32);\n    }\n}\n\n// Ears\nmodule ears() {\n    color(red)\n    union() {\n        // Left ear\n        translate([-10, 25, 25])\n            rotate([0, 10, -20])\n                scale([0.8, 0.8, 2])\n                    cylinder(d1 = 8, d2 = 5, h = 12, $fn = 8);\n                    \n        // Right ear\n        translate([10, 25, 25])\n            rotate([0, 10, 20])\n                scale([0.8, 0.8, 2])\n                    cylinder(d1 = 8, d2 = 5, h = 12, $fn = 8);\n    }\n}\n\n// Horns (volcanoes)\nmodule horns() {\n    color(brown)\n    union() {\n        // Left volcano\n        translate([-12, 0, 18])\n            cylinder(d1 = 12, d2 = 8, h = 15, $fn = 16);\n            \n        // Right volcano\n        translate([12, 0, 18])\n            cylinder(d1 = 12, d2 = 8, h = 15, $fn = 16);\n            \n        // Craters\n        color(orange)\n        union() {\n            translate([-12, 0, 30])\n                cylinder(d = 6, h = 3, $fn = 16);\n            translate([12, 0, 30])\n                cylinder(d = 6, h = 3, $fn = 16);\n        }\n        \n        // Lava details\n        color(yellow)\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90])\n                translate([-12 + sin(i * 90) * 3, cos(i * 90) * 3, 32])\n                    sphere(d = 1, $fn = 8);\n        }\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90 + 45])\n                translate([12 + sin(i * 90 + 45) * 3, cos(i * 90 + 45) * 3, 32])\n                    sphere(d = 1, $fn = 8);\n        }\n    }\n}\n\n// Legs\nmodule legs() {\n    color(brown)\n    union() {\n        // Front legs\n        translate([-12, 15, -10])\n            cylinder(d = 8, h = 20, $fn = 16);\n        translate([12, 15, -10])\n            cylinder(d = 8, h = 20, $fn = 16);\n            \n        // Back legs\n        translate([-10, -15, -10])\n            cylinder(d = 8, h = 20, $fn = 16);\n        translate([10, -15, -10])\n            cylinder(d = 8, h = 20, $fn = 16);\n    }\n}\n\n// Eyes\nmodule eyes() {\n    color(black)\n    union() {\n        // Left eye\n        translate([-8, 28, 15])\n            scale([1.2, 1, 1])\n                sphere(d = 4, $fn = 16);\n                \n        // Right eye\n        translate([8, 28, 15])\n            scale([1.2, 1, 1])\n                sphere(d = 4, $fn = 16);\n                \n        // Eye highlights\n        color(gray)\n        translate([-7, 29, 16])\n            sphere(d = 1.5, $fn = 8);\n        translate([9, 29, 16])\n            sphere(d = 1.5, $fn = 8);\n    }\n}\n\n// Nose\nmodule nose() {\n    color(black)\n    translate([0, 32, 12])\n        sphere(d = 3, $fn = 16);\n}\n\n// Diamond pattern on body\nmodule body_pattern() {\n    color(yellow)\n    for(i = [0:2]) {\n        rotate([0, 0, i * 120])\n            translate([0, 0, 17])\n                scale([1, 1.5, 0.5])\n                    cylinder(d = 8, h = 1, $fn = 4);\n    }\n}\n\n// Tail\nmodule tail() {\n    color(red)\n    translate([0, -25, 5])\n        rotate([90, 0, 0])\n            scale([0.8, 0.8, 1.5])\n                sphere(d = 12, $fn = 16);\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    ears();\n    horns();\n    legs();\n    eyes();\n    nose();\n    body_pattern();\n    tail();\n}",
    "renders": true
  },
  {
    "pokemon": "torkoal",
    "openscad_code": "// Torkoal OpenSCAD Model - Realistic Style, Medium Complexity\n// Size: ~70mm shell diameter\n\n// Main colors\nshell_color = [0.4, 0.2, 0.1];  // Dark brown\nbody_color = [0.3, 0.25, 0.2];  // Dark gray\nsmoke_color = [0.2, 0.2, 0.2];  // Dark gray smoke\neye_color = [0.9, 0.9, 0.1];    // Yellow\nhighlight_color = [1, 1, 1];    // White\n\n// Shell segments\nmodule shell_segment(radius, height, angle) {\n    rotate([0, 0, angle])\n    translate([0, radius * 0.8, 0])\n    rotate([0, 90, 0])\n    cylinder(h=height * 1.2, r1=height * 0.6, r2=height * 0.4, $fn=6);\n}\n\n// Main shell\nmodule main_shell() {\n    color(shell_color) {\n        difference() {\n            sphere(d=70, $fn=48);\n            \n            // Shell segments pattern\n            for(i = [0:30:359]) {\n                shell_segment(35, 8, i);\n            }\n            \n            // Bottom opening\n            translate([0, 0, -40])\n            cylinder(h=80, r=25, $fn=32);\n        }\n        \n        // Shell ridges\n        for(i = [0:45:359]) {\n            rotate([0, 0, i])\n            translate([0, 30, 10])\n            rotate([90, 0, 0])\n            cylinder(h=20, r1=8, r2=4, $fn=6);\n        }\n    }\n}\n\n// Head\nmodule head() {\n    color(body_color) {\n        translate([0, -40, 10])\n        rotate([0, 0, 0])\n        scale([1, 1.2, 0.8])\n        sphere(d=25, $fn=24);\n        \n        // Snout\n        translate([0, -50, 5])\n        rotate([0, 0, 0])\n        scale([0.8, 1, 0.6])\n        cylinder(h=15, r=8, $fn=16);\n        \n        // Eyes\n        color(eye_color) {\n            translate([-8, -45, 12])\n            sphere(d=6, $fn=16);\n            translate([8, -45, 12])\n            sphere(d=6, $fn=16);\n            \n            color(highlight_color) {\n                translate([-7, -46, 13.5])\n                sphere(d=2, $fn=8);\n                translate([9, -46, 13.5])\n                sphere(d=2, $fn=8);\n            }\n        }\n        \n        // Nostrils\n        color([0.1, 0.1, 0.1])\n        for(x = [-3, 3]) {\n            translate([x, -52, 6])\n            rotate([90, 0, 0])\n            cylinder(h=3, r=1.5, $fn=8);\n        }\n    }\n}\n\n// Legs\nmodule leg(pos_x, pos_y, angle) {\n    color(body_color) {\n        translate([pos_x, pos_y, -35])\n        rotate([0, 0, angle])\n        union() {\n            // Upper leg\n            translate([0, 0, 5])\n            cylinder(h=15, r=5, $fn=8);\n            \n            // Lower leg\n            translate([0, 0, -5])\n            cylinder(h=15, r=4, $fn=8);\n            \n            // Foot\n            translate([0, 0, -15])\n            scale([1.5, 1, 0.5])\n            sphere(d=10, $fn=8);\n        }\n    }\n}\n\n// Smoke stack\nmodule smoke_stack() {\n    color(smoke_color) {\n        translate([0, -10, 45])\n        union() {\n            // Base\n            cylinder(h=10, r=8, $fn=16);\n            \n            // Middle section\n            translate([0, 0, 10])\n            cylinder(h=15, r=6, $fn=16);\n            \n            // Top opening\n            translate([0, 0, 25])\n            cylinder(h=5, r=7, $fn=16);\n            \n            // Smoke rings\n            for(i = [1:3]) {\n                translate([0, 0, 30 + i * 8])\n                rotate([0, 0, i * 30])\n                scale([1 + i * 0.2, 1 + i * 0.2, 0.3])\n                torus(3, 0.5);\n            }\n        }\n    }\n}\n\n// Helper for smoke rings\nmodule torus(outer, inner) {\n    rotate_extrude($fn=32)\n    translate([outer, 0, 0])\n    circle(r=inner, $fn=16);\n}\n\n// Tail\nmodule tail() {\n    color(shell_color) {\n        translate([0, 45, -5])\n        rotate([0, 25, 0])\n        union() {\n            // Base\n            cylinder(h=15, r=8, $fn=12);\n            \n            // Segments\n            for(i = [1:3]) {\n                translate([0, 0, i * 8])\n                rotate([0, 10 * i, 0])\n                scale([0.9, 0.9, 1])\n                cylinder(h=8, r=6, $fn=12);\n            }\n            \n            // Tip\n            translate([0, 0, 35])\n            sphere(d=10, $fn=12);\n        }\n    }\n}\n\n// Assembly\ntranslate([0, 0, 35])\nunion() {\n    main_shell();\n    head();\n    \n    // Legs\n    leg(-20, -20, -30);\n    leg(20, -20, 30);\n    leg(-25, 20, -30);\n    leg(25, 20, 30);\n    \n    smoke_stack();\n    tail();\n}",
    "renders": true
  },
  {
    "pokemon": "spoink",
    "openscad_code": "// Spoink - Psychic-type Pokemon\n// Realistic style with medium complexity\n\n// Main color scheme\nspoink_purple = [0.6, 0.3, 0.7];\ndarker_purple = [0.4, 0.2, 0.5];\npearl_color = [0.95, 0.9, 0.85];\nblack = [0.1, 0.1, 0.1];\nwhite = [0.95, 0.95, 0.95];\ngold = [0.9, 0.75, 0.2];\n\nmodule spoink_body() {\n    // Main spherical body\n    color(spoink_purple) {\n        sphere(r = 15, $fn = 32);\n        \n        // Add some bulge detail\n        translate([0, 0, -5]) {\n            sphere(r = 16, $fn = 32);\n        }\n    }\n}\n\nmodule ears() {\n    // Left ear\n    color(darker_purple) {\n        translate([-8, 12, 12]) {\n            rotate([0, 25, -15]) {\n                scale([1, 0.7, 2]) {\n                    sphere(r = 4, $fn = 16);\n                }\n            }\n        }\n        \n        // Right ear\n        translate([8, 12, 12]) {\n            rotate([0, 25, 15]) {\n                mirror([1, 0, 0]) {\n                    scale([1, 0.7, 2]) {\n                        sphere(r = 4, $fn = 16);\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule pearl() {\n    // Pearl on head\n    color(pearl_color) {\n        translate([0, -2, 20]) {\n            sphere(r = 5, $fn = 32);\n            \n            // Pearl highlight\n            color(white) {\n                translate([1, 1, 3]) {\n                    sphere(r = 1.5, $fn = 16);\n                }\n            }\n        }\n    }\n}\n\nmodule snout() {\n    // Snout/nose area\n    color(spoink_purple) {\n        translate([0, 15, 5]) {\n            rotate([90, 0, 0]) {\n                cylinder(h = 8, r1 = 6, r2 = 4, $fn = 16);\n            }\n        }\n    }\n}\n\nmodule eyes() {\n    // Left eye\n    color(white) {\n        translate([-4, 12, 8]) {\n            sphere(r = 2.5, $fn = 16);\n            \n            // Pupil\n            color(black) {\n                translate([0.5, 0, 1.5]) {\n                    sphere(r = 1.2, $fn = 16);\n                }\n            }\n        }\n    }\n    \n    // Right eye\n    color(white) {\n        translate([4, 12, 8]) {\n            sphere(r = 2.5, $fn = 16);\n            \n            // Pupil\n            color(black) {\n                translate([-0.5, 0, 1.5]) {\n                    sphere(r = 1.2, $fn = 16);\n                }\n            }\n        }\n    }\n}\n\nmodule spring() {\n    // Spring coil base\n    color(gold) {\n        // Main spring structure - simplified as stacked cylinders\n        for(i = [0:2:20]) {\n            translate([0, 0, -15 - i]) {\n                rotate([0, 0, i * 15]) {\n                    cylinder(h = 2, r = 8 - (i * 0.2), $fn = 16);\n                }\n            }\n        }\n        \n        // Spring base platform\n        translate([0, 0, -36]) {\n            cylinder(h = 3, r = 12, $fn = 32);\n        }\n    }\n}\n\nmodule tail() {\n    // Small curly tail\n    color(darker_purple) {\n        translate([0, -18, -5]) {\n            rotate([90, 0, 0]) {\n                // Simplified curly tail as spiral\n                for(i = [0:15:180]) {\n                    rotate([0, 0, i]) {\n                        translate([6 - (i * 0.03), 0, 0]) {\n                            sphere(r = 2, $fn = 8);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule feet() {\n    // Front feet\n    color(darker_purple) {\n        // Left front foot\n        translate([-6, 10, -14]) {\n            rotate([30, 0, 0]) {\n                cylinder(h = 4, r1 = 2.5, r2 = 2, $fn = 8);\n            }\n        }\n        \n        // Right front foot\n        translate([6, 10, -14]) {\n            rotate([30, 0, 0]) {\n                cylinder(h = 4, r1 = 2.5, r2 = 2, $fn = 8);\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Base spring\n    spring();\n    \n    // Body parts\n    translate([0, 0, -15]) {\n        union() {\n            spoink_body();\n            ears();\n            pearl();\n            snout();\n            eyes();\n            tail();\n            feet();\n        }\n    }\n}",
    "renders": true
  },
  {
    "pokemon": "grumpig",
    "openscad_code": "// Grumpig - Psychic Pig Pokemon\n// Medium complexity realistic style model\n\n// Global settings\n$fn = 32;\n\n// Main body color - purple\nmodule body_color() color([0.5, 0.2, 0.7]);\n\n// Accent color - black\nmodule accent_color() color([0.1, 0.1, 0.1]);\n\n// Pearl color - pink\nmodule pearl_color() color([0.9, 0.6, 0.8]);\n\n// Main body\nmodule grumpig_body() {\n    union() {\n        // Torso - oval shape\n        body_color() {\n            scale([1.2, 1, 1.1]) sphere(15);\n            \n            // Neck transition\n            translate([0, -18, 12]) scale([0.8, 0.8, 1.2]) sphere(8);\n            \n            // Belly\n            translate([0, 0, -10]) scale([0.9, 0.7, 0.5]) sphere(12);\n        }\n    }\n}\n\n// Head\nmodule grumpig_head() {\n    body_color() {\n        translate([0, -25, 25]) {\n            // Main head sphere\n            sphere(12);\n            \n            // Snout\n            translate([0, -8, -4]) scale([1.1, 1.3, 0.8]) sphere(8);\n            \n            // Cheeks\n            translate([-8, -2, -2]) sphere(6);\n            translate([8, -2, -2]) sphere(6);\n        }\n    }\n}\n\n// Ears\nmodule grumpig_ears() {\n    body_color() {\n        // Left ear\n        translate([-10, -20, 32]) {\n            rotate([0, -15, 45]) scale([0.8, 2, 0.3]) cylinder(10, 3, 5);\n        }\n        \n        // Right ear\n        translate([10, -20, 32]) {\n            rotate([0, 15, -45]) scale([0.8, 2, 0.3]) cylinder(10, 3, 5);\n        }\n    }\n}\n\n// Arms\nmodule grumpig_arms() {\n    body_color() {\n        // Left arm\n        translate([-15, -5, 5]) {\n            rotate([0, 0, -30]) scale([0.8, 3, 0.8]) cylinder(8, 4, 3);\n            translate([0, 0, 8]) sphere(4);\n        }\n        \n        // Right arm\n        translate([15, -5, 5]) {\n            rotate([0, 0, 30]) scale([0.8, 3, 0.8]) cylinder(8, 4, 3);\n            translate([0, 0, 8]) sphere(4);\n        }\n    }\n}\n\n// Legs\nmodule grumpig_legs() {\n    body_color() {\n        // Left leg\n        translate([-8, 5, -15]) {\n            rotate([0, 0, -15]) cylinder(12, 5, 4);\n            translate([0, 0, -12]) scale([1.2, 1.5, 0.5]) sphere(6);\n        }\n        \n        // Right leg\n        translate([8, 5, -15]) {\n            rotate([0, 0, 15]) cylinder(12, 5, 4);\n            translate([0, 0, -12]) scale([1.2, 1.5, 0.5]) sphere(6);\n        }\n    }\n}\n\n// Tail\nmodule grumpig_tail() {\n    body_color() {\n        translate([0, 15, 0]) {\n            rotate([30, 0, 0]) scale([0.8, 0.8, 2]) cylinder(10, 3, 6);\n            translate([0, 0, 10]) sphere(4);\n        }\n    }\n}\n\n// Pearls on body\nmodule grumpig_pearls() {\n    // Three main pearls\n    pearl_color() {\n        // Center pearl on forehead\n        translate([0, -30, 30]) sphere(3);\n        \n        // Pearls on pearls\n        translate([-5, -28, 28]) sphere(2.5);\n        translate([5, -28, 28]) sphere(2.5);\n        \n        // Additional pearls on body\n        for(i = [-1, 0, 1]) {\n            translate([i * 8, 0, 15]) sphere(2);\n        }\n    }\n}\n\n// Eyes\nmodule grumpig_eyes() {\n    accent_color() {\n        // Left eye\n        translate([-5, -32, 28]) {\n            scale([1, 1.2, 0.5]) sphere(3);\n            // Eye shine\n            pearl_color() translate([0.5, 0.5, 1]) scale([0.5, 0.5, 0.5]) sphere(1);\n        }\n        \n        // Right eye  \n        translate([5, -32, 28]) {\n            scale([1, 1.2, 0.5]) sphere(3);\n            // Eye shine\n            pearl_color() translate([0.5, 0.5, 1]) scale([0.5, 0.5, 0.5]) sphere(1);\n        }\n    }\n}\n\n// Nostrils\nmodule grumpig_nostrils() {\n    accent_color() {\n        translate([-2, -35, 24]) sphere(1);\n        translate([2, -35, 24]) sphere(1);\n    }\n}\n\n// Black markings on body\nmodule grumpig_markings() {\n    accent_color() {\n        // Chest marking\n        translate([0, -8, 10]) scale([1.5, 1.2, 0.2]) sphere(8);\n        \n        // Arm bands\n        translate([-15, -5, 0]) scale([1, 1, 0.3]) cylinder(3, 4.5, 4.5);\n        translate([15, -5, 0]) scale([1, 1, 0.3]) cylinder(3, 4.5, 4.5);\n        \n        // Leg bands\n        translate([-8, 5, -10]) scale([1, 1, 0.3]) cylinder(3, 5.5, 5.5);\n        translate([8, 5, -10]) scale([1, 1, 0.3]) cylinder(3, 5.5, 5.5);\n    }\n}\n\n// Assemble the complete grumpig\nunion() {\n    grumpig_body();\n    grumpig_head();\n    grumpig_ears();\n    grumpig_arms();\n    grumpig_legs();\n    grumpig_tail();\n    grumpig_pearls();\n    grumpig_eyes();\n    grumpig_nostrils();\n    grumpig_markings();\n}",
    "renders": true
  },
  {
    "pokemon": "spinda",
    "openscad_code": "// Realistic Spinda Pokemon - Medium Complexity\n// 3D printable model with proper wall thickness and no overhangs\n\n// Main body color - light brown\ncolor([0.82, 0.55, 0.42]) {\n\n// Main spherical body\nmodule body() {\n    sphere(d=45, $fn=64);\n}\n\n// Head with ears\nmodule head() {\n    translate([0, 0, 25]) {\n        // Head sphere\n        sphere(d=35, $fn=64);\n        \n        // Left ear\n        translate([-18, 0, 12]) {\n            rotate([0, -20, 0]) {\n                cylinder(h=12, d1=8, d2=6, $fn=16);\n                translate([0, 0, 12]) sphere(d=8, $fn=16);\n            }\n        }\n        \n        // Right ear\n        translate([18, 0, 12]) {\n            rotate([0, 20, 0]) {\n                cylinder(h=12, d1=8, d2=6, $fn=16);\n                translate([0, 0, 12]) sphere(d=8, $fn=16);\n            }\n        }\n    }\n}\n\n// Arms\nmodule arms() {\n    // Left arm\n    translate([-20, 15, 8]) {\n        rotate([0, 0, -30]) {\n            cylinder(h=15, d1=8, d2=6, $fn=16);\n            translate([0, 0, 15]) sphere(d=8, $fn=16);\n        }\n    }\n    \n    // Right arm\n    translate([20, 15, 8]) {\n        rotate([0, 0, 30]) {\n            cylinder(h=15, d1=8, d2=6, $fn=16);\n            translate([0, 0, 15]) sphere(d=8, $fn=16);\n        }\n    }\n}\n\n// Legs\nmodule legs() {\n    // Left leg\n    translate([-12, -15, -20]) {\n        cylinder(h=15, d=8, $fn=16);\n        translate([0, 0, 15]) sphere(d=10, $fn=16);\n    }\n    \n    // Right leg\n    translate([12, -15, -20]) {\n        cylinder(h=15, d=8, $fn=16);\n        translate([0, 0, 15]) sphere(d=10, $fn=16);\n    }\n}\n\n// Spiral markings on body\nmodule spiral_markings() {\n    color([0.65, 0.4, 0.3]) {\n        for(i=[0:45:315]) {\n            rotate([0, 0, i]) {\n                translate([0, 0, 20]) {\n                    rotate_extrude(angle=60, $fn=32) {\n                        translate([18, 0, 0]) circle(d=4, $fn=8);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Face details\nmodule face_details() {\n    // Left eye spiral\n    color([0.9, 0.9, 0.9]) {\n        translate([-8, 10, 42]) {\n            rotate([0, 0, 0]) {\n                cylinder(h=2, d=10, $fn=32);\n            }\n        }\n    }\n    \n    color([0.2, 0.2, 0.2]) {\n        translate([-8, 10, 44]) {\n            sphere(d=4, $fn=16);\n        }\n    }\n    \n    // Right eye spiral\n    color([0.9, 0.9, 0.9]) {\n        translate([8, 10, 42]) {\n            rotate([0, 0, 180]) {\n                cylinder(h=2, d=10, $fn=32);\n            }\n        }\n    }\n    \n    color([0.2, 0.2, 0.2]) {\n        translate([8, 10, 44]) {\n            sphere(d=4, $fn=16);\n        }\n    }\n    \n    // Nose\n    color([0.6, 0.4, 0.3]) {\n        translate([0, 5, 40]) {\n            sphere(d=3, $fn=16);\n        }\n    }\n    \n    // Mouth\n    color([0.5, 0.3, 0.2]) {\n        translate([0, 2, 38]) {\n            rotate([90, 0, 0]) {\n                cylinder(h=2, d1=6, d2=4, $fn=16);\n            }\n        }\n    }\n}\n\n// Assemble the model\nunion() {\n    body();\n    head();\n    arms();\n    legs();\n    spiral_markings();\n    face_details();\n}",
    "renders": true
  },
  {
    "pokemon": "trapinch",
    "openscad_code": "// Trapinch OpenSCAD model - medium complexity realistic style\n// Scale: ~60mm length\n\n// Main colors\nbodyColor = [0.85, 0.65, 0.4];  // Sandy orange\ndarkColor = [0.4, 0.3, 0.2];    // Dark brown\neyeColor = [0.9, 0.9, 0.95];    // White\npupilColor = [0, 0, 0];         // Black\n\nmodule trapinchBody() {\n    // Main head/body - trapinch has a large round head\n    color(bodyColor)\n    difference() {\n        sphere(d=40, $fn=50);\n        \n        // Mouth cavity\n        translate([0, -15, -5])\n        scale([1, 1.2, 0.7])\n        sphere(d=35, $fn=40);\n        \n        // Bottom flat surface for printing\n        translate([0, 0, -20])\n        cube([100, 100, 40], center=true);\n    }\n}\n\nmodule jaw() {\n    // Lower jaw with teeth\n    color(bodyColor)\n    union() {\n        // Jaw base\n        translate([0, -5, -18])\n        rotate([20, 0, 0])\n        cube([28, 8, 12], center=true);\n        \n        // Teeth module\n        module tooth(x) {\n            translate([x, -10, -16])\n            rotate([0, -20, 0])\n            cube([3, 10, 3]);\n        }\n        \n        // Four teeth\n        tooth(-10);\n        tooth(-5);\n        tooth(5);\n        tooth(10);\n    }\n}\n\nmodule eyes() {\n    // Eye sockets\n    color(darkColor)\n    translate([-12, 10, 5])\n    sphere(d=8, $fn=20);\n    translate([12, 10, 5])\n    sphere(d=8, $fn=20);\n    \n    // Eyes\n    color(eyeColor)\n    translate([-12, 11, 5])\n    sphere(d=6, $fn=20);\n    translate([12, 11, 5])\n    sphere(d=6, $fn=20);\n    \n    // Pupils\n    color(pupilColor)\n    translate([-12, 12, 5])\n    sphere(d=3, $fn=15);\n    translate([12, 12, 5])\n    sphere(d=3, $fn=15);\n}\n\nmodule ears() {\n    // Left ear\n    color(bodyColor)\n    translate([-18, 8, 18])\n    rotate([0, 0, -30])\n    cylinder(h=15, d1=8, d2=4, $fn=12);\n    \n    // Right ear\n    translate([18, 8, 18])\n    rotate([0, 0, 30])\n    cylinder(h=15, d1=8, d2=4, $fn=12);\n}\n\nmodule bodySegments() {\n    // Segmented body sections\n    color(bodyColor)\n    union() {\n        // Middle segment\n        translate([0, -25, -12])\n        scale([0.8, 0.9, 0.7])\n        sphere(d=25, $fn=30);\n        \n        // Rear segment\n        translate([0, -40, -10])\n        scale([0.7, 0.8, 0.6])\n        sphere(d=20, $fn=25);\n    }\n}\n\nmodule legs() {\n    // Front legs module\n    module frontLeg(x) {\n        color(bodyColor)\n        union() {\n            // Upper leg\n            translate([x, 0, -15])\n            rotate([0, 15, 0])\n            cylinder(h=12, d=6, $fn=12);\n            \n            // Lower leg\n            translate([x, -10, -22])\n            rotate([0, 0, 0])\n            cylinder(h=10, d=5, $fn=12);\n            \n            // Foot\n            translate([x, -18, -25])\n            rotate([0, 0, 0])\n            scale([1.2, 1, 0.8])\n            sphere(d=6, $fn=12);\n        }\n    }\n    \n    // Back legs module\n    module backLeg(x) {\n        color(bodyColor)\n        union() {\n            // Upper leg\n            translate([x, -35, -12])\n            rotate([0, -15, 0])\n            cylinder(h=10, d=5, $fn=12);\n            \n            // Lower leg\n            translate([x, -42, -18])\n            rotate([0, 0, 0])\n            cylinder(h=8, d=4, $fn=12);\n            \n            // Foot\n            translate([x, -48, -20])\n            scale([1.1, 1, 0.8])\n            sphere(d=5, $fn=12);\n        }\n    }\n    \n    // Create legs\n    frontLeg(-12);\n    frontLeg(12);\n    backLeg(-8);\n    backLeg(8);\n}\n\nmodule markings() {\n    // Dark markings on body\n    color(darkColor)\n    union() {\n        // Head stripes\n        translate([0, 5, 8])\n        rotate([90, 0, 0])\n        scale([1, 0.2, 1])\n        cylinder(h=30, d=2, $fn=20);\n        \n        // Body stripes\n        translate([0, -25, -5])\n        rotate([90, 0, 0])\n        scale([0.8, 0.2, 1])\n        cylinder(h=20, d=2, $fn=20);\n        \n        // Eye ridges\n        translate([-12, 8, 10])\n        rotate([0, -20, -30])\n        cube([12, 3, 3]);\n        translate([12, 8, 10])\n        rotate([0, -20, 30])\n        cube([12, 3, 3]);\n    }\n}\n\n// Assemble the complete Trapinch\nunion() {\n    trapinchBody();\n    jaw();\n    eyes();\n    ears();\n    bodySegments();\n    legs();\n    markings();\n}",
    "renders": true
  },
  {
    "pokemon": "vibrava",
    "openscad_code": "// Vibrava - Realistic Style, Medium Complexity\n// Approximately 80mm tall when printed\n\n// Colors\n$vibrava_green = [34/255,139/255,34/255];\n$vibrava_light_green = [144/255,238/255,144/255];\n$vibrava_yellow = [255/255,215/255,0/255];\n$vibrava_red = [220/255,20/255,60/255];\n$vibrava_black = [25/255,25/255,25/255];\n\n// Overall scale factor\nscale_factor = 0.8;\n\nmodule vibrava() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        union() {\n            // Main body\n            color($vibrava_green) body();\n            \n            // Head features\n            color($vibrava_green) head();\n            color($vibrava_light_green) eyes();\n            color($vibrava_black) mouth();\n            \n            // Wings\n            color($vibrava_light_green) wings();\n            \n            // Legs\n            color($vibrava_green) legs();\n            \n            // Tail segments\n            color($vibrava_green) tail();\n        }\n    }\n}\n\nmodule body() {\n    // Main thorax\n    translate([0, 0, 25]) {\n        difference() {\n            scale([1.2, 1, 1.5]) sphere(d=30, $fn=32);\n            translate([0, 0, -20]) cube([40, 40, 40], center=true);\n        }\n    }\n    \n    // Abdomen segments\n    for(i = [1:3]) {\n        translate([0, 0, 15 - i*8]) {\n            scale([1.1 - i*0.1, 1 - i*0.05, 0.8]) \n                sphere(d=25 - i*2, $fn=24);\n        }\n    }\n}\n\nmodule head() {\n    // Main head\n    translate([0, 20, 35]) {\n        rotate([15, 0, 0]) {\n            scale([1.1, 1.3, 1]) sphere(d=25, $fn=32);\n        }\n    }\n    \n    // Antennae\n    for(side = [-1, 1]) {\n        translate([side*12, 28, 42]) {\n            rotate([0, 30, side*15]) {\n                cylinder(h=15, r1=2, r2=1, $fn=8);\n            }\n        }\n    }\n    \n    // Head ridges\n    translate([0, 22, 45]) {\n        for(i = [-1, 0, 1]) {\n            translate([i*5, 0, 0]) {\n                scale([2, 1, 3]) cube([3, 2, 6], center=true);\n            }\n        }\n    }\n}\n\nmodule eyes() {\n    // Large compound eyes\n    for(side = [-1, 1]) {\n        translate([side*10, 25, 38]) {\n            scale([1.2, 1.2, 1]) sphere(d=12, $fn=20);\n            \n            // Eye details\n            translate([0, 0, 5]) {\n                color($vibrava_red) sphere(d=6, $fn=16);\n            }\n        }\n    }\n}\n\nmodule mouth() {\n    // Mandibles\n    translate([0, 35, 30]) {\n        rotate([0, 25, 0]) {\n            cube([15, 3, 8], center=true);\n        }\n    }\n    \n    // Lower jaw\n    translate([0, 32, 25]) {\n        rotate([15, 0, 0]) {\n            cube([12, 4, 6], center=true);\n        }\n    }\n}\n\nmodule wings() {\n    // Elytra (wing covers)\n    for(side = [-1, 1]) {\n        translate([side*15, 0, 35]) {\n            rotate([0, 0, side*20]) {\n                // Main wing cover\n                scale([1.5, 3, 0.5]) {\n                    difference() {\n                        cube([8, 20, 2], center=true);\n                        // Wing texture lines\n                        for(i = [1:4]) {\n                            translate([0, -10 + i*5, 0]) {\n                                cube([7.5, 0.5, 2.1], center=true);\n                            }\n                        }\n                    }\n                }\n                \n                // Wing membrane (simplified)\n                translate([0, -25, -3]) {\n                    rotate([10, 0, 0]) {\n                        scale([1.2, 1.5, 0.1]) \n                            sphere(d=15, $fn=16);\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule legs() {\n    // Front legs\n    for(side = [-1, 1]) {\n        translate([side*12, 10, 20]) {\n            rotate([0, 0, side*30]) {\n                cylinder(h=15, r=2, $fn=8);\n                translate([0, 0, -15]) {\n                    rotate([90, 0, 0]) {\n                        cylinder(h=10, r=1.5, $fn=6);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Middle legs\n    for(side = [-1, 1]) {\n        translate([side*15, 0, 15]) {\n            rotate([0, 0, side*45]) {\n                cylinder(h=18, r=2, $fn=8);\n                translate([0, 0, -18]) {\n                    rotate([90, 0, 0]) {\n                        cylinder(h=12, r=1.5, $fn=6);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Rear legs\n    for(side = [-1, 1]) {\n        translate([side*12, -10, 10]) {\n            rotate([0, 0, side*60]) {\n                cylinder(h=20, r=2.5, $fn=8);\n                translate([0, 0, -20]) {\n                    rotate([90, 0, 0]) {\n                        cylinder(h=15, r=2, $fn=6);\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule tail() {\n    // Tail segments with increasing detail\n    for(i = [1:5]) {\n        translate([0, -15 - i*8, 25 - i*3]) {\n            rotate([0, 10, 0]) {\n                scale([1 - i*0.15, 1 - i*0.1, 1 - i*0.1]) {\n                    sphere(d=20 - i*3, $fn=24);\n                    \n                    // Tail spikes\n                    if(i <= 3) {\n                        for(side = [-1, 1]) {\n                            translate([side*(8 - i), 0, 0]) {\n                                rotate([0, side*20, 0]) {\n                                    cylinder(h=5 + i, r1=2, r2=0.5, $fn=6);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Generate the model\nvibrava();",
    "renders": true
  },
  {
    "pokemon": "flygon",
    "openscad_code": "// Realistic Flygon - Medium Complexity OpenSCAD Model\n// Size: ~70mm tall\n\ncolor([0.8,0.7,0.2]) // Primary green color\nunion() {\n    // Body\n    translate([0,0,25]) \n    scale([1.2,1,1.4]) \n    sphere(15);\n\n    // Head\n    translate([0,0,45])\n    scale([0.9,0.8,1.1])\n    sphere(12);\n\n    // Neck\n    translate([0,0,35])\n    cylinder(h=10, r1=8, r2=6);\n\n    // Tail segments\n    for(i=[0:2]) {\n        translate([0,0,25-15*i])\n        scale([1-0.2*i, 1-0.2*i, 1])\n        sphere(10-3*i);\n    }\n\n    // Wings - left\n    translate([-20,0,40])\n    rotate([0,0,-30])\n    scale([0.5,1,0.1])\n    sphere(20);\n\n    // Wings - right\n    translate([20,0,40])\n    rotate([0,0,30])\n    scale([0.5,1,0.1])\n    sphere(20);\n\n    // Legs\n    for(side=[-1,1]) {\n        // Front legs\n        translate([side*8,0,20])\n        rotate([0,side*20,0])\n        cylinder(h=15, r=3);\n\n        // Back legs\n        translate([side*6,0,10])\n        rotate([0,-side*30,0])\n        cylinder(h=18, r=3);\n\n        // Feet\n        translate([side*12,0,5])\n        scale([1.5,1,0.5])\n        sphere(4);\n    }\n\n    // Goggles\n    color([0.3,0.3,0.3])\n    translate([0,0,52])\n    scale([1.2,0.3,0.4])\n    sphere(10);\n\n    // Eyes\n    color([1,0.2,0.2])\n    for(side=[-1,1]) {\n        translate([side*4,0,50])\n        sphere(3);\n    }\n\n    // Antennae\n    for(side=[-1,1]) {\n        color([0.9,0.8,0.3])\n        translate([side*6,0,55])\n        rotate([0,0,side*20])\n        cylinder(h=8, r=1.5);\n    }\n\n    // Red wing markings\n    color([0.8,0.2,0.2])\n    for(side=[-1,1]) {\n        translate([side*25,0,40])\n        rotate([0,0,side*30])\n        scale([0.3,0.6,0.05])\n        sphere(15);\n    }\n\n    // Tail stripes\n    color([0.5,0.4,0.1])\n    for(i=[0:2]) {\n        translate([0,0,20-15*i])\n        scale([1-0.2*i, 1-0.2*i, 0.1])\n        sphere(12-3*i);\n    }\n\n    // Green wing tips\n    color([0.4,0.8,0.2])\n    for(side=[-1,1]) {\n        translate([side*30,0,40])\n        rotate([0,0,side*30])\n        scale([0.2,0.4,0.05])\n        sphere(15);\n    }\n}",
    "renders": true
  },
  {
    "pokemon": "cacnea",
    "openscad_code": "// Realistic Cacnea Pokemon - Medium Complexity\n// Designed for 3D printing with no overhangs\n\n$fn = 32;\n\n// Main body color\nbody_color = \"#7BA05B\";\n// Darker accents\naccent_color = \"#5A7D3A\";\n// Eye color\neye_color = \"#2C3E50\";\n// Flower color\nflower_color = \"#E74C3C\";\n// Spike color\nspike_color = \"#4A5D23\";\n\n// Overall scale factor\nscale_factor = 0.8;\n\nmodule cacnea_body() {\n    color(body_color) {\n        // Main spherical body\n        sphere(d = 40);\n        \n        // Slightly flattened bottom for printing\n        translate([0, 0, -20])\n            cylinder(h = 5, d1 = 40, d2 = 35, $fn = 24);\n    }\n}\n\nmodule cacnea_ears() {\n    color(body_color) {\n        // Left ear\n        translate([-15, 10, 15])\n            rotate([0, 30, -30])\n                cylinder(h = 25, d1 = 8, d2 = 12);\n        \n        // Right ear\n        translate([15, 10, 15])\n            rotate([0, 30, 30])\n                cylinder(h = 25, d1 = 8, d2 = 12);\n    }\n}\n\nmodule cacnea_arms() {\n    color(body_color) {\n        // Left arm\n        translate([-25, -5, -10])\n            rotate([0, 0, -45])\n                cylinder(h = 30, d1 = 10, d2 = 15);\n        \n        // Right arm\n        translate([25, -5, -10])\n            rotate([0, 0, 45])\n                cylinder(h = 30, d1 = 10, d2 = 15);\n    }\n}\n\nmodule cacnea_spikes() {\n    color(spike_color) {\n        // Generate spikes around the body\n        for(i = [0:30:330]) {\n            rotate([0, 0, i])\n                translate([18, 0, 0])\n                    rotate([90, 0, 0])\n                        cylinder(h = 8, d1 = 3, d2 = 1);\n        }\n        \n        // Top spikes\n        for(i = [0:45:315]) {\n            rotate([0, 0, i])\n                translate([10, 0, 18])\n                    rotate([45, 0, 0])\n                        cylinder(h = 8, d1 = 3, d2 = 1);\n        }\n        \n        // Bottom spikes\n        for(i = [15:30:345]) {\n            rotate([0, 0, i])\n                translate([18, 0, -15])\n                    rotate([-45, 0, 0])\n                        cylinder(h = 8, d1 = 3, d2 = 1);\n        }\n    }\n}\n\nmodule cacnea_face() {\n    // Eyes\n    color(eye_color) {\n        // Left eye\n        translate([-8, 12, 15])\n            sphere(d = 4);\n        \n        // Right eye\n        translate([8, 12, 15])\n            sphere(d = 4);\n    }\n    \n    // Mouth\n    color(accent_color) {\n        translate([0, 8, 12])\n            rotate([90, 0, 0])\n                cylinder(h = 1, d1 = 8, d2 = 6);\n    }\n}\n\nmodule cacnea_flower() {\n    color(flower_color) {\n        // Flower base\n        translate([0, 0, 22])\n            cylinder(h = 3, d = 12);\n        \n        // Petals\n        for(i = [0:72:359]) {\n            rotate([0, 0, i])\n                translate([6, 0, 24])\n                    rotate([90, 0, 0])\n                        scale([1, 0.6, 1])\n                            cylinder(h = 8, d1 = 5, d2 = 0);\n        }\n    }\n}\n\nmodule cacnea_markings() {\n    color(accent_color) {\n        // Diamond pattern on body\n        translate([0, -19, 0])\n            rotate([90, 0, 0])\n                cylinder(h = 1, d1 = 15, d2 = 20);\n        \n        translate([0, -19, 5])\n            rotate([90, 0, 0])\n                cylinder(h = 1, d1 = 20, d2 = 15);\n        \n        // Arm markings\n        translate([-25, -5, -10])\n            rotate([0, 0, -45])\n                translate([0, 0, 15])\n                    rotate([90, 0, 0])\n                        cylinder(h = 1, d1 = 8, d2 = 12);\n        \n        translate([25, -5, -10])\n            rotate([0, 0, 45])\n                translate([0, 0, 15])\n                    rotate([90, 0, 0])\n                        cylinder(h = 1, d1 = 8, d2 = 12);\n    }\n}\n\n// Main assembly\nscale([scale_factor, scale_factor, scale_factor]) {\n    union() {\n        cacnea_body();\n        cacnea_ears();\n        cacnea_arms();\n        cacnea_spikes();\n        cacnea_face();\n        cacnea_flower();\n        cacnea_markings();\n    }\n}",
    "renders": true
  },
  {
    "pokemon": "cacturne",
    "openscad_code": "// Cacturne OpenSCAD Model - Realistic Medium Complexity\n\n// Colors\ncolor_green = [0.2, 0.5, 0.1];\ncolor_dark_green = [0.1, 0.3, 0.05];\ncolor_yellow = [0.9, 0.8, 0.1];\ncolor_black = [0.1, 0.1, 0.1];\n\n// Main parameters\n$fn = 32;\nscale_factor = 1.5;\n\nmodule cacturne_head() {\n    // Main head\n    color(color_green)\n    union() {\n        translate([0, 0, 25])\n        scale([1, 0.8, 1.2])\n        sphere(15);\n        \n        // Crown-like top\n        for(i = [-30, -15, 0, 15, 30]) {\n            rotate([0, 0, i])\n            translate([0, 12, 35])\n            scale([0.3, 1, 0.3])\n            cylinder(8, 3, 1);\n        }\n        \n        // Spikes\n        for(i = [0:60:300]) {\n            rotate([0, 0, i])\n            translate([14, 0, 25])\n            rotate([0, 30, 0])\n            cylinder(8, 2, 0.5);\n        }\n    }\n    \n    // Eyes\n    color(color_black)\n    union() {\n        translate([-5, 10, 25])\n        rotate([0, 90, 0])\n        cylinder(1, 2, 2);\n        \n        translate([5, 10, 25])\n        rotate([0, 90, 0])\n        cylinder(1, 2, 2);\n        \n        // Mouth\n        translate([0, 3, 20])\n        rotate([90, 0, 0])\n        cylinder(1, 3, 0.5);\n    }\n}\n\nmodule cacturne_body() {\n    color(color_green)\n    union() {\n        // Main body\n        translate([0, 0, 0])\n        scale([1.2, 0.8, 1.5])\n        sphere(20);\n        \n        // Neck\n        translate([0, 0, 20])\n        cylinder(10, 8, 12);\n        \n        // Arm bases\n        translate([-20, 0, 5])\n        rotate([0, 0, -30])\n        scale([1.5, 1, 1])\n        sphere(8);\n        \n        translate([20, 0, 5])\n        rotate([0, 0, 30])\n        scale([1.5, 1, 1])\n        sphere(8);\n    }\n}\n\nmodule cacturne_arms() {\n    color(color_green)\n    union() {\n        // Left arm\n        translate([-25, 0, 10])\n        rotate([0, 0, -45])\n        union() {\n            scale([1, 1, 3])\n            sphere(6);\n            \n            // Spikes\n            for(i = [0:60:180]) {\n                rotate([0, 0, i])\n                translate([7, 0, 0])\n                rotate([0, 30, 0])\n                cylinder(6, 2, 0.5);\n            }\n        }\n        \n        // Right arm\n        translate([25, 0, 10])\n        rotate([0, 0, 45])\n        union() {\n            scale([1, 1, 3])\n            sphere(6);\n            \n            // Spikes\n            for(i = [180:60:360]) {\n                rotate([0, 0, i])\n                translate([7, 0, 0])\n                rotate([0, 30, 0])\n                cylinder(6, 2, 0.5);\n            }\n        }\n    }\n}\n\nmodule cacturne_legs() {\n    color(color_green)\n    union() {\n        // Left leg\n        translate([-8, 0, -30])\n        union() {\n            cylinder(20, 8, 6);\n            translate([0, 0, -5])\n            scale([1.2, 0.8, 0.5])\n            sphere(10);\n        }\n        \n        // Right leg\n        translate([8, 0, -30])\n        union() {\n            cylinder(20, 8, 6);\n            translate([0, 0, -5])\n            scale([1.2, 0.8, 0.5])\n            sphere(10);\n        }\n    }\n}\n\nmodule cacturne_markings() {\n    color(color_dark_green)\n    union() {\n        // Diamond pattern on body\n        for(i = [-10, 0, 10]) {\n            translate([i, 0, 5])\n            rotate([0, 0, 45])\n            cube([8, 8, 0.5], center=true);\n        }\n        \n        // Yellow spots\n        color(color_yellow)\n        union() {\n            translate([-12, 0, 15])\n            sphere(2);\n            translate([12, 0, 15])\n            sphere(2);\n            translate([0, 8, 5])\n            sphere(2);\n        }\n    }\n}\n\nmodule cacturne_hat() {\n    color(color_dark_green)\n    union() {\n        // Brim\n        translate([0, 0, 38])\n        cylinder(2, 20, 18);\n        \n        // Top cone\n        translate([0, 0, 40])\n        cylinder(10, 18, 10);\n        \n        // Spikes on hat\n        for(i = [0:72:360]) {\n            rotate([0, 0, i])\n            translate([16, 0, 42])\n            rotate([0, 30, 0])\n            cylinder(5, 2, 0.5);\n        }\n    }\n}\n\n// Assemble the complete model\nscale([scale_factor, scale_factor, scale_factor])\nunion() {\n    cacturne_body();\n    cacturne_head();\n    cacturne_arms();\n    cacturne_legs();\n    cacturne_markings();\n    cacturne_hat();\n}",
    "renders": true
  },
  {
    "pokemon": "swablu",
    "openscad_code": "// Realistic Swablu Pokemon - Medium Complexity\n// Suitable for 3D printing, ~70mm tall\n\n$fn = 32;\n\n// Main colors\ncloud_color = [0.95, 0.95, 0.95];\nblue_color = [0.5, 0.7, 0.9];\nbeak_color = [0.9, 0.7, 0.5];\neye_color = [0.1, 0.1, 0.1];\n\n// Cloud body module\nmodule cloud_body() {\n    color(cloud_color) {\n        // Main body cloud\n        union() {\n            // Central sphere\n            sphere(r = 15);\n            \n            // Left side puff\n            translate([-12, 5, 0]) sphere(r = 8);\n            translate([-18, 0, 5]) sphere(r = 6);\n            \n            // Right side puff\n            translate([12, 5, 0]) sphere(r = 8);\n            translate([18, 0, 5]) sphere(r = 6);\n            \n            // Top puff\n            translate([0, 0, 18]) sphere(r = 10);\n            \n            // Back puff\n            translate([0, -12, 0]) sphere(r = 9);\n            \n            // Front bottom\n            translate([0, 8, -10]) sphere(r = 7);\n        }\n    }\n}\n\n// Head module\nmodule head() {\n    color(cloud_color) {\n        translate([0, 20, 10]) {\n            sphere(r = 12);\n            \n            // Left cheek\n            translate([-8, -2, -5]) sphere(r = 6);\n            \n            // Right cheek\n            translate([8, -2, -5]) sphere(r = 6);\n        }\n    }\n}\n\n// Wings module\nmodule wings() {\n    color(cloud_color) {\n        // Left wing\n        translate([-20, -5, 5]) {\n            rotate([0, 0, -30]) {\n                scale([1.5, 0.8, 0.3]) sphere(r = 15);\n                translate([-5, 0, 0]) sphere(r = 10);\n            }\n        }\n        \n        // Right wing\n        translate([20, -5, 5]) {\n            rotate([0, 0, 30]) {\n                scale([1.5, 0.8, 0.3]) sphere(r = 15);\n                translate([5, 0, 0]) sphere(r = 10);\n            }\n        }\n    }\n}\n\n// Tail module\nmodule tail() {\n    color(cloud_color) {\n        translate([0, -25, -5]) {\n            rotate([0, 0, 0]) {\n                scale([1, 1.5, 0.5]) sphere(r = 12);\n                translate([0, -8, 0]) sphere(r = 8);\n                translate([0, -12, 0]) {\n                    rotate([0, 0, 15]) scale([0.8, 1.2, 0.4]) sphere(r = 8);\n                }\n            }\n        }\n    }\n}\n\n// Beak module\nmodule beak() {\n    color(beak_color) {\n        translate([0, 28, 5]) {\n            rotate([0, 0, 0]) {\n                scale([0.4, 1.2, 0.4]) cylinder(h = 6, r1 = 3, r2 = 1);\n            }\n        }\n    }\n}\n\n// Eyes module\nmodule eyes() {\n    color(eye_color) {\n        // Left eye\n        translate([-4, 28, 8]) {\n            sphere(r = 1.5);\n            translate([0, 0, 1.5]) color([1, 1, 1]) sphere(r = 0.5);\n        }\n        \n        // Right eye\n        translate([4, 28, 8]) {\n            sphere(r = 1.5);\n            translate([0, 0, 1.5]) color([1, 1, 1]) sphere(r = 0.5);\n        }\n    }\n}\n\n// Ears module\nmodule ears() {\n    color(blue_color) {\n        // Left ear\n        translate([-8, 25, 15]) {\n            rotate([0, 20, -30]) {\n                scale([0.8, 0.3, 2]) sphere(r = 4);\n            }\n        }\n        \n        // Right ear\n        translate([8, 25, 15]) {\n            rotate([0, -20, 30]) {\n                scale([0.8, 0.3, 2]) sphere(r = 4);\n            }\n        }\n    }\n}\n\n// Feet module\nmodule feet() {\n    color(blue_color) {\n        // Left foot\n        translate([-6, 0, -15]) {\n            scale([0.8, 1.2, 0.6]) sphere(r = 4);\n            translate([0, 0, -3]) cylinder(h = 3, r = 3);\n        }\n        \n        // Right foot\n        translate([6, 0, -15]) {\n            scale([0.8, 1.2, 0.6]) sphere(r = 4);\n            translate([0, 0, -3]) cylinder(h = 3, r = 3);\n        }\n    }\n}\n\n// Combine all parts\nunion() {\n    cloud_body();\n    head();\n    wings();\n    tail();\n    beak();\n    eyes();\n    ears();\n    feet();\n}",
    "renders": true
  },
  {
    "pokemon": "altaria",
    "openscad_code": "// Altaria Pokemon - Realistic Style\n// Medium complexity 3D printable model\n\nscale_factor = 0.4;\n$fn = 32;\n\n// Main colors\ncolor_body = [0.9, 0.9, 1];\ncolor_wings = [0.75, 0.85, 1];\ncolor_cloud = [1, 1, 1];\ncolor_eyes = [0, 0, 0];\ncolor_beak = [1, 0.8, 0.2];\n\nmodule cloud_puff(radius, height) {\n    difference() {\n        sphere(radius);\n        translate([0, 0, -radius*0.8])\n            cube([radius*2.2, radius*2.2, radius*1.2], center=true);\n    }\n}\n\nmodule altaria_body() {\n    color(color_body)\n    union() {\n        // Main body\n        scale([1, 1.2, 1.3])\n            sphere(12 * scale_factor);\n        \n        // Neck\n        translate([0, 8 * scale_factor, 8 * scale_factor])\n            rotate([0, -30, 0])\n                cylinder(h=15 * scale_factor, r1=6 * scale_factor, r2=4 * scale_factor);\n        \n        // Head\n        translate([0, 15 * scale_factor, 18 * scale_factor])\n            sphere(7 * scale_factor);\n    }\n}\n\nmodule altaria_wings() {\n    color(color_wings)\n    union() {\n        // Left wing\n        translate([12 * scale_factor, 0, 8 * scale_factor])\n            rotate([0, 0, -30])\n                scale([1, 2.5, 0.3])\n                    sphere(8 * scale_factor);\n        \n        // Right wing\n        translate([-12 * scale_factor, 0, 8 * scale_factor])\n            rotate([0, 0, 30])\n                scale([1, 2.5, 0.3])\n                    sphere(8 * scale_factor);\n    }\n}\n\nmodule altaria_tail() {\n    color(color_body)\n    union() {\n        // Tail base\n        translate([0, -15 * scale_factor, -5 * scale_factor])\n            rotate([-20, 0, 0])\n                cylinder(h=20 * scale_factor, r1=5 * scale_factor, r2=3 * scale_factor);\n        \n        // Tail feathers\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90])\n                translate([0, -30 * scale_factor, -8 * scale_factor])\n                    rotate([30, 0, 0])\n                        scale([0.4, 1.5, 0.1])\n                            sphere(8 * scale_factor);\n        }\n    }\n}\n\nmodule altaria_clouds() {\n    color(color_cloud)\n    union() {\n        // Front cloud puffs\n        translate([8 * scale_factor, 5 * scale_factor, -10 * scale_factor])\n            cloud_puff(8 * scale_factor, 5 * scale_factor);\n        translate([-8 * scale_factor, 5 * scale_factor, -10 * scale_factor])\n            cloud_puff(8 * scale_factor, 5 * scale_factor);\n        \n        // Back cloud puffs\n        translate([10 * scale_factor, -5 * scale_factor, -8 * scale_factor])\n            cloud_puff(7 * scale_factor, 4 * scale_factor);\n        translate([-10 * scale_factor, -5 * scale_factor, -8 * scale_factor])\n            cloud_puff(7 * scale_factor, 4 * scale_factor);\n    }\n}\n\nmodule altaria_face() {\n    union() {\n        // Eyes\n        color(color_eyes)\n        union() {\n            translate([2.5 * scale_factor, 17 * scale_factor, 21 * scale_factor])\n                sphere(1.5 * scale_factor);\n            translate([-2.5 * scale_factor, 17 * scale_factor, 21 * scale_factor])\n                sphere(1.5 * scale_factor);\n        }\n        \n        // Beak\n        color(color_beak)\n        translate([0, 19 * scale_factor, 19 * scale_factor])\n            rotate([30, 0, 0])\n                cylinder(h=4 * scale_factor, r1=2.5 * scale_factor, r2=1 * scale_factor);\n        \n        // Ears\n        color(color_body)\n        union() {\n            translate([3 * scale_factor, 13 * scale_factor, 23 * scale_factor])\n                rotate([0, -30, 45])\n                    cylinder(h=6 * scale_factor, r1=2 * scale_factor, r2=0.5 * scale_factor);\n            translate([-3 * scale_factor, 13 * scale_factor, 23 * scale_factor])\n                rotate([0, -30, -45])\n                    cylinder(h=6 * scale_factor, r1=2 * scale_factor, r2=0.5 * scale_factor);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    altaria_body();\n    altaria_wings();\n    altaria_tail();\n    altaria_clouds();\n    altaria_face();\n}",
    "renders": true
  },
  {
    "pokemon": "zangoose",
    "openscad_code": "// Realistic Zangoose in medium complexity\n// Overall height ~80mm\n\nmodule zangoose() {\n    color(\"white\") {\n        // Main body - oval shape\n        union() {\n            // Torso\n            translate([0, 0, 25])\n                scale([1.2, 0.8, 1.5])\n                sphere(d=30, $fn=32);\n            \n            // Head\n            translate([0, 0, 55])\n                scale([1.1, 1, 1.2])\n                sphere(d=25, $fn=32);\n            \n            // Snout\n            translate([0, 12, 55])\n                scale([0.6, 0.4, 0.5])\n                sphere(d=20, $fn=32);\n        }\n    }\n    \n    // Ears\n    color(\"white\") {\n        // Left ear\n        translate([-8, -5, 65])\n            rotate([0, 10, -30])\n            scale([0.3, 0.1, 1])\n            cylinder(d1=5, d2=12, h=15, center=true, $fn=8);\n        \n        // Right ear\n        translate([8, -5, 65])\n            rotate([0, 10, 30])\n            scale([0.3, 0.1, 1])\n            cylinder(d1=5, d2=12, h=15, center=true, $fn=8);\n    }\n    \n    // Arms\n    color(\"white\") {\n        // Left arm\n        translate([-15, 10, 45])\n            rotate([0, 0, -20])\n            scale([0.4, 0.4, 1.2])\n            cylinder(d=8, h=20, center=true, $fn=16);\n        \n        // Right arm\n        translate([15, 10, 45])\n            rotate([0, 0, 20])\n            scale([0.4, 0.4, 1.2])\n            cylinder(d=8, h=20, center=true, $fn=16);\n        \n        // Left claw\n        translate([-20, 15, 35])\n            difference() {\n                scale([1, 0.3, 0.1])\n                sphere(d=12, $fn=16);\n                // Finger gaps\n                for(i = [-1:1]) {\n                    translate([i*3, 0, 0])\n                        cube([2, 8, 3], center=true);\n                }\n            }\n        \n        // Right claw\n        translate([20, 15, 35])\n            difference() {\n                scale([1, 0.3, 0.1])\n                sphere(d=12, $fn=16);\n                // Finger gaps\n                for(i = [-1:1]) {\n                    translate([i*3, 0, 0])\n                        cube([2, 8, 3], center=true);\n                }\n            }\n    }\n    \n    // Legs\n    color(\"white\") {\n        // Left leg\n        translate([-7, -5, 15])\n            scale([0.8, 0.8, 1.5])\n            cylinder(d=10, h=20, center=true, $fn=16);\n        \n        // Right leg\n        translate([7, -5, 15])\n            scale([0.8, 0.8, 1.5])\n            cylinder(d=10, h=20, center=true, $fn=16);\n        \n        // Left foot\n        translate([-7, 10, 5])\n            scale([1.2, 2, 0.5])\n            sphere(d=12, $fn=16);\n        \n        // Right foot\n        translate([7, 10, 5])\n            scale([1.2, 2, 0.5])\n            sphere(d=12, $fn=16);\n    }\n    \n    // Tail\n    color(\"white\") {\n        translate([0, -15, 25])\n            rotate([90, 0, 0])\n            scale([0.8, 0.8, 2])\n            cylinder(d1=12, d2=6, h=20, center=true, $fn=16);\n    }\n    \n    // Red chest marking\n    color(\"red\") {\n        translate([0, 8, 45])\n            scale([1.2, 0.8, 0.1])\n            sphere(d=20, $fn=32);\n    }\n    \n    // Eyes\n    color(\"black\") {\n        // Left eye\n        translate([-5, 10, 58])\n            scale([0.8, 0.5, 0.3])\n            sphere(d=4, $fn=16);\n        \n        // Right eye\n        translate([5, 10, 58])\n            scale([0.8, 0.5, 0.3])\n            sphere(d=4, $fn=16);\n    }\n    \n    // Nose\n    color(\"black\") {\n        translate([0, 18, 57])\n            scale([0.3, 0.3, 0.3])\n            sphere(d=3, $fn=8);\n    }\n    \n    // Red markings on arms\n    color(\"red\") {\n        // Left arm marking\n        translate([-15, 10, 40])\n            scale([0.5, 0.5, 0.1])\n            sphere(d=10, $fn=16);\n        \n        // Right arm marking\n        translate([15, 10, 40])\n            scale([0.5, 0.5, 0.1])\n            sphere(d=10, $fn=16);\n    }\n    \n    // Red tail tip\n    color(\"red\") {\n        translate([0, -28, 25])\n            scale([0.6, 0.6, 0.3])\n            sphere(d=8, $fn=16);\n    }\n}\n\n// Center and scale the model\ntranslate([0, 0, 0])\n    zangoose();",
    "renders": true
  },
  {
    "pokemon": "seviper",
    "openscad_code": "// Seviper Pokemon - Realistic Medium Complexity\n// Total length ~80mm, height ~25mm, optimized for FDM printing\n\n// Color definitions\ncolor_body = \"#4A4A4A\";\ncolor_scales = \"#2E2E2E\";\ncolor_red = \"#B22222\";\ncolor_yellow = \"#FFD700\";\ncolor_teeth = \"#F5F5DC\";\n\n// Main body module\nmodule seviper_body() {\n    color(color_body) {\n        // Head\n        translate([0, 0, 10]) {\n            sphere(8, $fn=20);\n        }\n        \n        // Neck and main body\n        translate([0, 0, 5]) {\n            for(i = [0:5]) {\n                translate([i*8, 0, 5*sin(i*30)]) {\n                    scale([1, 0.9, 0.9]) sphere(6-i*0.5, $fn=16);\n                }\n            }\n        }\n        \n        // Tail segments\n        translate([40, 0, 2]) {\n            for(i = [0:4]) {\n                translate([i*6, 0, -i*1.5]) {\n                    scale([1.2-0.2*i, 0.8-0.1*i, 0.8-0.1*i]) \n                        rotate([0, 0, -i*15]) sphere(5-i*0.6, $fn=12);\n                }\n            }\n        }\n    }\n}\n\n// Blade tail\nmodule blade_tail() {\n    color(color_scales) {\n        translate([64, 0, -8]) {\n            rotate([0, 0, -45]) {\n                difference() {\n                    // Main blade\n                    scale([3, 0.5, 8]) cube(5);\n                    // Edge detail\n                    translate([5, 0, 2]) rotate([0, 0, 30]) \n                        scale([2, 0.6, 6]) cube(5);\n                }\n            }\n        }\n    }\n}\n\n// Scales pattern\nmodule scales() {\n    color(color_scales) {\n        for(pos = [[10, 0, 12], [20, 0, 10], [30, 0, 8], [45, 0, 5]]) {\n            translate(pos) rotate([0, 0, 45]) \n                scale([2, 1, 0.5]) sphere(2, $fn=6);\n        }\n    }\n}\n\n// Eyes\nmodule eyes() {\n    color(color_yellow) {\n        translate([-3, 5, 12]) sphere(2, $fn=12);\n        translate([3, 5, 12]) sphere(2, $fn=12);\n    }\n    color(color_scales) {\n        translate([-3, 6.5, 12]) sphere(1, $fn=8);\n        translate([3, 6.5, 12]) sphere(1, $fn=8);\n    }\n}\n\n// Mouth and fangs\nmodule mouth() {\n    color(color_red) {\n        translate([0, 6, 8]) {\n            difference() {\n                sphere(3, $fn=12);\n                translate([0, -2, 0]) cube(10, center=true);\n            }\n        }\n    }\n    \n    color(color_teeth) {\n        // Fangs\n        translate([-2, 8, 8]) rotate([0, 30, 0]) \n            cylinder(h=4, r1=1, r2=0.2, $fn=6);\n        translate([2, 8, 8]) rotate([0, -30, 0]) \n            cylinder(h=4, r1=1, r2=0.2, $fn=6);\n    }\n}\n\n// Red markings\nmodule markings() {\n    color(color_red) {\n        // Head marking\n        translate([0, 0, 15]) rotate([90, 0, 0]) \n            cylinder(h=0.5, r1=6, r2=0, $fn=4);\n        \n        // Body bands\n        for(i = [0:2]) {\n            translate([15+i*10, 0, 8-i]) \n                rotate([90, 0, 0]) cylinder(h=2, r1=6-i, r2=4-i, $fn=16);\n        }\n    }\n}\n\n// Tongue\nmodule tongue() {\n    color(color_red) {\n        translate([0, 8, 6]) rotate([0, 90, 0]) \n            scale([0.3, 3, 1]) sphere(2, $fn=8);\n    }\n}\n\n// Assembly\nseviper_body();\nblade_tail();\nscales();\neyes();\nmouth();\nmarkings();\ntongue();",
    "renders": true
  },
  {
    "pokemon": "lunatone",
    "openscad_code": "// Lunatone Pokemon - Realistic Style, Medium Complexity\n// OpenSCAD code for 3D printing\n// Overall size: ~80mm diameter\n\n// Main colors\nrock_color = [0.7, 0.65, 0.6];\neye_color = [0.1, 0.1, 0.1];\ncrater_color = [0.5, 0.45, 0.4];\nhighlight_color = [1, 1, 1];\n\n// Main body with realistic rock texture\nmodule lunatone_body() {\n    color(rock_color) {\n        difference() {\n            // Main spherical body\n            sphere(d = 80, $fn = 64);\n            \n            // Create rock-like surface with boolean differences\n            for(i = [0:15]) {\n                rotate([rand(i, 1) * 360, rand(i, 2) * 180, 0])\n                    translate([0, 0, rand(i, 3) * 5 - 2.5])\n                        sphere(d = rand(i, 4) * 8 + 5, $fn = 16);\n            }\n        }\n    }\n}\n\n// Crater details on surface\nmodule craters() {\n    color(crater_color) {\n        difference() {\n            sphere(d = 80.5, $fn = 64);\n            \n            // Large craters\n            translate([20, 15, 30]) rotate([0, 0, 45]) \n                cylinder(h = 10, d1 = 12, d2 = 8, $fn = 16);\n            translate([-25, -10, 28]) rotate([0, 0, -30]) \n                cylinder(h = 8, d1 = 10, d2 = 6, $fn = 16);\n            translate([0, -30, 25]) rotate([0, 0, 60]) \n                cylinder(h = 12, d1 = 15, d2 = 10, $fn = 16);\n            \n            // Small craters\n            for(i = [0:8]) {\n                rotate([rand(i, 5) * 360, rand(i, 6) * 180, 0])\n                    translate([rand(i, 7) * 35 - 17.5, rand(i, 8) * 35 - 17.5, 38]) \n                        sphere(d = rand(i, 9) * 4 + 2, $fn = 8);\n            }\n        }\n    }\n}\n\n// Eye module with realistic depth\nmodule eye(x_pos, y_pos, z_pos) {\n    // Main eye socket\n    color(eye_color) {\n        translate([x_pos, y_pos, z_pos]) {\n            // Eye socket cavity\n            difference() {\n                sphere(d = 18, $fn = 32);\n                translate([0, 0, 2]) sphere(d = 14, $fn = 32);\n            }\n            \n            // Eye ball\n            translate([0, 0, 0.5]) {\n                sphere(d = 12, $fn = 32);\n                \n                // Eye highlight\n                color(highlight_color) {\n                    translate([3, 2, 4]) sphere(d = 3, $fn = 16);\n                }\n            }\n        }\n    }\n}\n\n// Crescent moon marking\nmodule moon_marking() {\n    color([0.8, 0.75, 0.7]) {\n        translate([0, 0, 39]) {\n            rotate([0, 0, 90]) {\n                difference() {\n                    // Crescent base\n                    cylinder(h = 3, d = 30, $fn = 32);\n                    \n                    // Cut out center\n                    translate([5, 0, -1]) cylinder(h = 5, d = 25, $fn = 32);\n                    \n                    // Taper ends\n                    translate([0, 15, 1.5]) rotate([90, 0, 0]) \n                        cylinder(h = 8, d1 = 8, d2 = 4, $fn = 16);\n                    translate([0, -15, 1.5]) rotate([-90, 0, 0]) \n                        cylinder(h = 8, d1 = 8, d2 = 4, $fn = 16);\n                }\n            }\n        }\n    }\n}\n\n// Random number generator for texture\nfunction rand(seed, offset) = (seed * 9301 + 49297 * offset) % 233280 / 233280;\n\n// Assembly\nunion() {\n    lunatone_body();\n    craters();\n    eye(-15, 10, 35);\n    eye(15, 10, 35);\n    moon_marking();\n}",
    "renders": true
  },
  {
    "pokemon": "solrock",
    "openscad_code": "// Solrock Pokemon - Realistic Style\n// Medium complexity 3D printable model\n\n// Overall dimensions: ~80mm diameter\n$fn = 50;\n\n// Main colors\ncolor_orange = [0.9, 0.4, 0.1];\ncolor_yellow = [1, 0.8, 0.1];\ncolor_red = [0.8, 0.2, 0.1];\ncolor_eye = [1, 1, 1];\ncolor_black = [0, 0, 0];\n\n// Main rock body\nmodule main_body() {\n    color(color_orange) {\n        difference() {\n            sphere(d = 60);\n            \n            // Create flat front face\n            translate([0, 0, -30])\n                cube([70, 70, 30], center = true);\n            \n            // Hollow interior for printability\n            sphere(d = 54);\n        }\n    }\n}\n\n// Rock texture details with small protrusions\nmodule rock_texture() {\n    color(color_orange) {\n        for(i = [0:15]) {\n            rotate([rand(i*5)*360, rand(i*7)*360, rand(i*11)*360])\n                translate([rand(i*13)*25-12.5, rand(i*17)*25-12.5, rand(i*19)*25-12.5])\n                    sphere(d = rand(i*23)*3 + 2);\n        }\n    }\n}\n\n// Eye module\nmodule eye() {\n    // White sclera\n    color(color_eye) {\n        sphere(d = 12);\n        \n        // Pupil\n        color(color_black) {\n            translate([0, 0, 6])\n                sphere(d = 6);\n        }\n    }\n}\n\n// Main eye placement\nmodule eyes() {\n    translate([-15, 10, 31])\n        eye();\n    translate([15, 10, 31])\n        mirror([1, 0, 0])\n            eye();\n}\n\n// Rocky spikes around the edge\nmodule rock_spikes() {\n    color(color_orange) {\n        for(i = [0:11]) {\n            rotate([0, 0, i * 30])\n                translate([32, 0, 0])\n                    rotate([0, 90, 0])\n                        cylinder(h = 15, d1 = 8, d2 = 4);\n        }\n    }\n}\n\n// Yellow ring pattern\nmodule yellow_ring() {\n    color(color_yellow) {\n        for(i = [0:2]) {\n            rotate([0, 0, i * 120])\n                translate([20, 0, 28])\n                    rotate([0, 0, 0])\n                        cylinder(h = 3, d = 8);\n        }\n        \n        // Additional yellow markings\n        for(i = [0:5]) {\n            rotate([0, 0, i * 60])\n                translate([25, 0, 20])\n                    sphere(d = 4);\n        }\n    }\n}\n\n// Red accent markings\nmodule red_markings() {\n    color(color_red) {\n        // Triangle patterns\n        for(i = [0:2]) {\n            rotate([0, 0, i * 120 + 60])\n                translate([18, 0, 25])\n                    linear_extrude(height = 2)\n                        polygon(points=[[0,0], [5,3], [5,-3]]);\n        }\n        \n        // Small red dots\n        for(i = [0:8]) {\n            rotate([0, 0, i * 45])\n                translate([22, 0, 15])\n                    sphere(d = 2);\n        }\n    }\n}\n\n// Back crater details\nmodule back_crater() {\n    color(color_orange) {\n        difference() {\n            translate([0, 0, -30])\n                sphere(d = 20);\n            translate([0, 0, -25])\n                sphere(d = 18);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    main_body();\n    rock_texture();\n    eyes();\n    rock_spikes();\n    yellow_ring();\n    red_markings();\n    back_crater();\n}",
    "renders": true
  },
  {
    "pokemon": "barboach",
    "openscad_code": "// Barboach Pokemon - Realistic Style, Medium Complexity\n// 3D printable model using basic OpenSCAD primitives\n\n$fn = 32; // Smooth curves for 3D printing\n\nmodule barboach() {\n    // Main body - elongated fish shape\n    color([0.4, 0.3, 0.9]) // Blue color\n    union() {\n        // Body segments\n        for(i = [0:4]) {\n            translate([i*8, 0, 0])\n            scale([1.5 - i*0.2, 1.5 - i*0.2, 1.5 - i*0.2])\n            sphere(10);\n        }\n        \n        // Head - larger sphere\n        translate([-8, 0, 0])\n        scale([1.3, 1.4, 1.2])\n        sphere(10);\n    }\n    \n    // Whiskers - three on each side\n    color([0.3, 0.2, 0.8])\n    for(side = [-1, 1]) {\n        // Top whisker\n        translate([-5, side*8, 4])\n        rotate([0, 90, side*20])\n        cylinder(h = 12, r1 = 1.2, r2 = 0.5);\n        \n        // Middle whisker\n        translate([-5, side*9, 2])\n        rotate([0, 90, side*30])\n        cylinder(h = 15, r1 = 1.2, r2 = 0.5);\n        \n        // Bottom whisker\n        translate([-5, side*8, 0])\n        rotate([0, 90, side*40])\n        cylinder(h = 12, r1 = 1.2, r2 = 0.5);\n    }\n    \n    // Tail fin - split into two parts\n    color([0.5, 0.4, 1])\n    translate([32, 0, -2])\n    rotate([0, 0, 0])\n    union() {\n        // Upper tail lobe\n        translate([0, 0, 2])\n        rotate([20, 0, 0])\n        scale([1.5, 0.3, 1])\n        difference() {\n            cube([12, 8, 6], center = true);\n            translate([6, 0, 0])\n            sphere(4);\n        }\n        \n        // Lower tail lobe\n        translate([0, 0, -2])\n        rotate([-20, 0, 0])\n        scale([1.5, 0.3, 1])\n        difference() {\n            cube([12, 8, 6], center = true);\n            translate([6, 0, 0])\n            sphere(4);\n        }\n    }\n    \n    // Dorsal fin - small triangles along back\n    color([0.45, 0.35, 0.95])\n    for(i = [0:3]) {\n        translate([i*8 + 5, 0, 8])\n        rotate([0, 0, 0])\n        difference() {\n            cube([4, 6, 4], center = true);\n            translate([2, 0, 2])\n            sphere(3);\n        }\n    }\n    \n    // Eyes - large round eyes\n    color([1, 1, 1])\n    translate([-12, 4, 2])\n    sphere(3);\n    \n    translate([-12, -4, 2])\n    sphere(3);\n    \n    // Eye pupils\n    color([0, 0, 0])\n    translate([-13, 4, 3])\n    sphere(1.5);\n    \n    translate([-13, -4, 3])\n    sphere(1.5);\n    \n    // Mouth - small curved line\n    color([0.2, 0.1, 0.7])\n    translate([-12, 0, -3])\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h = 1, r = 2, center = true);\n        translate([0, 1, 0])\n        cube([4, 2, 2], center = true);\n    }\n    \n    // Side fins - pectoral fins\n    color([0.4, 0.3, 0.9])\n    for(side = [-1, 1]) {\n        translate([5, side*7, -2])\n        rotate([0, side*30, 0])\n        scale([1, 0.2, 0.8])\n        sphere(5);\n    }\n    \n    // Fin markings - dark blue stripes\n    color([0.2, 0.1, 0.7])\n    for(i = [1:3]) {\n        translate([i*8, 0, 7])\n        rotate([90, 0, 0])\n        cylinder(h = 0.5, r = 6 - i*0.5);\n    }\n}\n\n// Main assembly\nbarboach();\n\n// Add flat base for stable 3D printing\ncolor([0.3, 0.2, 0.8])\ntranslate([0, 0, -6])\nscale([1.5, 0.8, 0.5])\ncylinder(h = 1, r = 20);",
    "renders": true
  },
  {
    "pokemon": "whiscash",
    "openscad_code": "// Whiscash OpenSCAD model\n// Realistic style, medium complexity\n\nmodule whiscash_body() {\n    // Main fish body\n    color(\"steelblue\")\n    difference() {\n        // Main oval body\n        scale([1.2, 0.8, 0.6])\n        sphere(20);\n        \n        // Flatten bottom slightly\n        translate([0, 0, -12])\n        cube([50, 50, 25], center=true);\n    }\n}\n\nmodule whiscash_head() {\n    // Head with characteristic mustache\n    color(\"steelblue\")\n    union() {\n        // Head sphere\n        translate([22, 0, 5])\n        scale([0.9, 1.1, 0.9])\n        sphere(15);\n        \n        // Mouth area\n        translate([30, 0, -2])\n        scale([0.7, 0.5, 0.4])\n        sphere(12);\n    }\n    \n    // Yellow mustache whiskers\n    color(\"gold\")\n    for(i = [-1, 1]) {\n        // Left/right mustache\n        translate([28, i*10, 0])\n        rotate([0, 0, i*30])\n        scale([0.2, 1, 0.2])\n        cylinder(h=12, r=2);\n        \n        translate([28, i*12, -2])\n        rotate([0, 0, i*20])\n        scale([0.2, 1, 0.2])\n        cylinder(h=10, r=1.5);\n        \n        translate([28, i*14, -4])\n        rotate([0, 0, i*10])\n        scale([0.2, 1, 0.2])\n        cylinder(h=8, r=1);\n    }\n}\n\nmodule whiscash_eyes() {\n    // Large yellow eyes\n    color(\"yellow\")\n    for(i = [-1, 1]) {\n        translate([28, i*8, 8])\n        sphere(4);\n    }\n    \n    // Black pupils\n    color(\"black\")\n    for(i = [-1, 1]) {\n        translate([30, i*8, 8])\n        sphere(2);\n    }\n}\n\nmodule whiscash_fins() {\n    // Dorsal fin\n    color(\"steelblue\")\n    translate([-10, 0, 12])\n    rotate([90, 0, 0])\n    linear_extrude(height=2)\n    polygon(points=[[0,0], [-8,12], [8,12]]);\n    \n    // Tail fin\n    color(\"steelblue\")\n    translate([-25, 0, 0])\n    rotate([0, 90, 0])\n    linear_extrude(height=2)\n    polygon(points=[[0,0], [-12,15], [-12,-15]]);\n    \n    // Side fins\n    for(i = [-1, 1]) {\n        color(\"steelblue\")\n        translate([5, i*16, -5])\n        rotate([0, 0, i*45])\n        scale([1, 0.5, 0.2])\n        cylinder(h=10, r=5);\n    }\n}\n\nmodule whiscash_pattern() {\n    // Characteristic yellow zigzag pattern\n    color(\"gold\")\n    for(i = [-10:5:15]) {\n        translate([i, 0, 8])\n        rotate([90, 0, 0])\n        linear_extrude(height=0.5)\n        polygon(points=[[-2,-2], [2,-2], [0,2]]);\n    }\n}\n\nmodule complete_whiscash() {\n    union() {\n        whiscash_body();\n        whiscash_head();\n        whiscash_eyes();\n        whiscash_fins();\n        whiscash_pattern();\n    }\n}\n\n// Scale to 80mm length\nscale(0.8)\ncomplete_whiscash();",
    "renders": true
  },
  {
    "pokemon": "corphish",
    "openscad_code": "// Corphish Pokemon - Realistic Medium Complexity\n// 3D printable model with appropriate wall thickness\n\nmodule corphish_body() {\n    color(\"orangered\")\n    difference() {\n        // Main body shell\n        union() {\n            // Central body\n            scale([1.2, 1, 0.8])\n                sphere(d=40, $fn=32);\n            \n            // Lower abdomen\n            translate([0, 0, -12])\n                scale([0.9, 0.8, 0.5])\n                sphere(d=35, $fn=32);\n        }\n        \n        // Eye sockets\n        translate([-12, 18, 8])\n            rotate([0, 20, 0])\n            sphere(d=8, $fn=16);\n        translate([12, 18, 8])\n            rotate([0, -20, 0])\n            sphere(d=8, $fn=16);\n    }\n}\n\nmodule corphish_eyes() {\n    // Left eye\n    translate([-12, 18, 8])\n        rotate([0, 20, 0])\n        color(\"black\")\n        sphere(d=6, $fn=16);\n    \n    // Right eye\n    translate([12, 18, 8])\n        rotate([0, -20, 0])\n        color(\"black\")\n        sphere(d=6, $fn=16);\n    \n    // Eye highlights\n    translate([-11, 19, 10])\n        color(\"white\")\n        sphere(d=2, $fn=8);\n    translate([13, 19, 10])\n        color(\"white\")\n        sphere(d=2, $fn=8);\n}\n\nmodule corphish_claw(side) {\n    // Base claw segment\n    translate([side * 20, 10, -5])\n        rotate([0, 0, side * 30])\n        color(\"orangered\")\n        scale([1.5, 0.6, 0.6])\n        cylinder(h=15, d=8, $fn=12);\n    \n    // Upper claw segment\n    translate([side * 30, 15, 0])\n        rotate([0, 0, side * 45])\n        color(\"orangered\")\n        scale([1.2, 0.5, 1.2])\n        cylinder(h=12, d=6, $fn=12);\n    \n    // Pincer top\n    translate([side * 38, 20, 5])\n        rotate([0, 0, side * 55])\n        color(\"orangered\")\n        difference() {\n            scale([2, 0.4, 1])\n            cube([12, 4, 6], center=true);\n            translate([0, 0, 2])\n                cube([14, 4.5, 2], center=true);\n        }\n    \n    // Pincer bottom\n    translate([side * 38, 20, 1])\n        rotate([0, 0, side * 55])\n        color(\"orangered\")\n        difference() {\n            scale([2, 0.4, 1])\n            cube([12, 4, 6], center=true);\n            translate([0, 0, -2])\n                cube([14, 4.5, 2], center=true);\n        }\n}\n\nmodule corphish_legs() {\n    // Front legs\n    for (i = [0, 1]) {\n        translate([i ? 15 : -15, 5, -15])\n            rotate([0, 0, i ? -30 : 30])\n            color(\"orangered\")\n            cylinder(h=12, d=6, $fn=8);\n        \n        translate([i ? 18 : -18, 2, -24])\n            rotate([0, 0, i ? -45 : 45])\n            color(\"orangered\")\n            sphere(d=8, $fn=12);\n    }\n    \n    // Back legs\n    for (i = [0, 1]) {\n        translate([i ? 12 : -12, -15, -12])\n            rotate([0, 0, i ? -20 : 20])\n            color(\"orangered\")\n            cylinder(h=10, d=5, $fn=8);\n        \n        translate([i ? 15 : -15, -18, -19])\n            rotate([0, 0, i ? -30 : 30])\n            color(\"orangered\")\n            sphere(d=7, $fn=12);\n    }\n}\n\nmodule corphish_shell_patterns() {\n    // Star pattern on shell\n    color(\"lightblue\")\n    translate([0, 0, 28])\n        scale([0.8, 0.8, 0.1])\n        cylinder(h=2, d=20, $fn=5);\n    \n    // Shell ridges\n    for (i = [-1, 0, 1]) {\n        translate([i * 8, 0, 25])\n            rotate([90, 0, 0])\n            color(\"orangered\")\n            scale([0.3, 1, 0.3])\n            cylinder(h=30, d=3, $fn=8);\n    }\n}\n\nmodule corphish_antennae() {\n    // Left antenna\n    translate([-8, 22, 20])\n        rotate([30, 0, -20])\n        color(\"orangered\")\n        cylinder(h=8, d=3, $fn=8);\n    \n    translate([-10, 26, 25])\n        rotate([30, 0, -20])\n        color(\"orangered\")\n        sphere(d=4, $fn=12);\n    \n    // Right antenna\n    translate([8, 22, 20])\n        rotate([30, 0, 20])\n        color(\"orangered\")\n        cylinder(h=8, d=3, $fn=8);\n    \n    translate([10, 26, 25])\n        rotate([30, 0, 20])\n        color(\"orangered\")\n        sphere(d=4, $fn=12);\n}\n\nmodule corphish() {\n    corphish_body();\n    corphish_eyes();\n    corphish_claw(1);  // Left claw\n    corphish_claw(-1); // Right claw\n    corphish_legs();\n    corphish_shell_patterns();\n    corphish_antennae();\n}\n\n// Main assembly\ncorphish();",
    "renders": true
  },
  {
    "pokemon": "crawdaunt",
    "openscad_code": "// Realistic Crawdaunt OpenSCAD model\n// Size: ~70mm tall, 3D printable\n\n// Colors\ncolor_body = [0.7, 0.1, 0.1];      // Dark red\ncolor_shell = [0.4, 0.2, 0.2];     // Dark brown\ncolor_claws = [0.9, 0.3, 0.2];     // Orange-red\ncolor_eyes = [0.1, 0.1, 0.1];      // Black\ncolor_markings = [1, 0.8, 0.2];    // Yellow\n\n$fn = 32;\n\n// Main body\nmodule crawdaunt() {\n    // Scale to 70mm height\n    scale([0.7, 0.7, 0.7]) {\n\n        // Main shell body\n        color(color_shell)\n        translate([0, 0, 10])\n        scale([1.2, 1, 1])\n        sphere(15);\n\n        // Lower body segment\n        color(color_body)\n        translate([0, 0, 5])\n        scale([0.8, 0.8, 0.6])\n        sphere(12);\n\n        // Head section\n        color(color_shell)\n        translate([0, 0, 25])\n        scale([0.9, 0.9, 0.7])\n        sphere(10);\n\n        // Eyes (left and right)\n        color(color_eyes)\n        for(side = [-1, 1]) {\n            translate([side * 6, 12, 27])\n            sphere(2);\n        }\n\n        // Yellow star marking on forehead\n        color(color_markings)\n        translate([0, 8, 32])\n        scale([1, 0.8, 0.2])\n        cylinder(h=1, r1=4, r2=0);\n\n        // Left claw\n        color(color_claws)\n        translate([-20, 0, 20])\n        rotate([0, 0, 45])\n        claw_assembly();\n\n        // Right claw\n        color(color_claws)\n        translate([20, 0, 20])\n        rotate([0, 0, -45])\n        mirror([1, 0, 0])\n        claw_assembly();\n\n        // Legs\n        color(color_body)\n        for(side = [-1, 1]) {\n            translate([side * 8, 0, 8])\n            rotate([0, 0, side * 30])\n            leg();\n        }\n\n        // Rear legs\n        for(side = [-1, 1]) {\n            translate([side * 6, -8, 5])\n            rotate([0, 0, side * 45])\n            leg();\n        }\n\n        // Tail segments\n        tail_assembly();\n\n        // Antennae\n        color(color_shell)\n        for(side = [-1, 1]) {\n            translate([side * 5, 10, 30])\n            rotate([side * 20, 0, 0])\n            cylinder(h=8, r1=1, r2=0.5);\n        }\n    }\n}\n\n// Claw assembly\nmodule claw_assembly() {\n    // Upper claw\n    translate([0, 0, 0])\n    rotate([0, 90, 0])\n    scale([1, 1, 0.6])\n    cylinder(h=15, r1=3, r2=8);\n\n    // Lower claw\n    translate([0, 0, -5])\n    rotate([0, 90, 0])\n    scale([1, 1, 0.6])\n    cylinder(h=12, r1=2.5, r2=6);\n\n    // Claw joint\n    sphere(4);\n}\n\n// Leg module\nmodule leg() {\n    translate([0, 0, 0])\n    rotate([90, 0, 0])\n    cylinder(h=8, r1=2, r2=1);\n}\n\n// Tail assembly\nmodule tail_assembly() {\n    color(color_body)\n    translate([0, -15, 8])\n    rotate([90, 0, 0])\n    cylinder(h=20, r1=5, r2=2);\n\n    // Tail segments\n    for(i = [0:3]) {\n        translate([0, -15 - i*5, 8])\n        rotate([90, 0, 0])\n        scale([1 - i*0.1, 1 - i*0.1, 1])\n        cylinder(h=4, r1=5 - i, r2=4 - i);\n    }\n\n    // Tail fin\n    color(color_shell)\n    translate([0, -35, 8])\n    rotate([90, 0, 0])\n    scale([1.5, 0.3, 1])\n    cylinder(h=5, r1=4, r2=0);\n}\n\n// Render the complete model\ncrawdaunt();",
    "renders": true
  },
  {
    "pokemon": "baltoy",
    "openscad_code": "// Baltoy Pokemon - Realistic Style, Medium Complexity\n// 3D printable, ~60mm height\n\n// Parameters\nscale_factor = 1;\nheight = 60 * scale_factor;\nhead_height = 15 * scale_factor;\nbody_height = 30 * scale_factor;\nbase_height = 15 * scale_factor;\nwall_thickness = 2 * scale_factor;\n\nmodule baltoy_head() {\n    // Main head dome\n    color(\"tan\")\n    union() {\n        // Top dome\n        translate([0, 0, head_height/2])\n        sphere(d=head_height, $fn=32);\n        \n        // Bottom flat face\n        translate([0, 0, 0])\n        cylinder(h=wall_thickness, d=head_height, $fn=32);\n    }\n    \n    // Eye markings\n    color(\"red\")\n    difference() {\n        translate([0, 0, head_height/2])\n        sphere(d=head_height*0.9, $fn=32);\n        \n        // Inner cutout\n        translate([0, 0, head_height/2-1])\n        sphere(d=head_height*0.7, $fn=32);\n    }\n    \n    // Eye details\n    color(\"black\")\n    for(i=[-1, 1]) {\n        translate([i*head_height/4, 0, head_height/2])\n        cylinder(h=2, d=head_height/6, $fn=16);\n    }\n}\n\nmodule baltoy_body() {\n    color(\"tan\")\n    union() {\n        // Main body cylinder\n        cylinder(h=body_height, d=body_height*0.8, $fn=32);\n        \n        // Reinforcement rings\n        for(i=[0.25, 0.5, 0.75]) {\n            translate([0, 0, i*body_height])\n            cylinder(h=wall_thickness, d=body_height*0.85, $fn=32);\n        }\n    }\n    \n    // Spiral markings\n    color(\"red\")\n    for(i=[0:30:360]) {\n        rotate([0, 0, i])\n        translate([body_height*0.35, 0, (i/360)*body_height])\n        cube([body_height*0.1, wall_thickness, body_height*0.05]);\n    }\n}\n\nmodule baltoy_base() {\n    color(\"tan\")\n    union() {\n        // Main base\n        cylinder(h=base_height, d=body_height*1.2, $fn=32);\n        \n        // Bottom platform\n        translate([0, 0, -wall_thickness])\n        cylinder(h=wall_thickness*2, d=body_height*1.3, $fn=32);\n    }\n    \n    // Base markings\n    color(\"red\")\n    difference() {\n        cylinder(h=wall_thickness*3, d=body_height*1.1, $fn=32);\n        cylinder(h=wall_thickness*4, d=body_height*0.9, $fn=32);\n    }\n}\n\nmodule baltoy_arms() {\n    color(\"tan\")\n    for(side=[-1, 1]) {\n        translate([side*body_height*0.4, 0, body_height*0.7])\n        rotate([0, 90, 0])\n        cylinder(h=body_height*0.5, d=body_height*0.2, $fn=16);\n        \n        // Arm markings\n        color(\"red\")\n        translate([side*body_height*0.55, 0, body_height*0.7])\n        rotate([0, 90, 0])\n        cylinder(h=body_height*0.4, d=body_height*0.15, $fn=16);\n    }\n}\n\n// Main assembly\nunion() {\n    // Head\n    translate([0, 0, body_height+base_height+head_height/2])\n    baltoy_head();\n    \n    // Body\n    translate([0, 0, base_height+body_height/2])\n    baltoy_body();\n    \n    // Base\n    translate([0, 0, base_height/2])\n    baltoy_base();\n    \n    // Arms\n    baltoy_arms();\n}",
    "renders": true
  },
  {
    "pokemon": "claydol",
    "openscad_code": "// Claydol - Realistic Style - Medium Complexity\n// Based on the Psychic/Ground type Pokemon\n\nmodule claydol_body() {\n    color([0.8, 0.75, 0.65]) // Light beige/gray color\n    \n    // Main spherical body\n    sphere(r=15, $fn=32);\n    \n    // Top dome extension\n    translate([0, 0, 12])\n    scale([1.2, 1.2, 0.8])\n    sphere(r=10, $fn=32);\n    \n    // Bottom flat base\n    translate([0, 0, -14])\n    cylinder(r1=15, r2=12, h=4, $fn=32);\n}\n\nmodule claydol_eye() {\n    color([0.9, 0.9, 0.95]) // Light eye color\n    \n    // Eye base\n    sphere(r=4, $fn=16);\n    \n    // Pupil\n    color([0.1, 0.1, 0.1])\n    translate([0, 0, 3.5])\n    scale([1, 0.8, 0.2])\n    sphere(r=3, $fn=12);\n}\n\nmodule claydol_arms() {\n    color([0.7, 0.65, 0.55]) // Slightly darker than body\n    \n    // Left arm\n    translate([-20, 0, 5])\n    rotate([0, 0, -30])\n    union() {\n        // Upper arm\n        scale([1.5, 1.5, 4])\n        rotate([90, 0, 0])\n        cylinder(r=3, h=1, $fn=8);\n        \n        // Lower arm segment\n        translate([0, 0, -8])\n        scale([1.2, 1.2, 3])\n        rotate([90, 0, 0])\n        cylinder(r=2.5, h=1, $fn=8);\n        \n        // Hand\n        translate([0, -6, -12])\n        sphere(r=4, $fn=16);\n    }\n    \n    // Right arm (mirror of left)\n    translate([20, 0, 5])\n    mirror([1, 0, 0])\n    rotate([0, 0, -30])\n    union() {\n        // Upper arm\n        scale([1.5, 1.5, 4])\n        rotate([90, 0, 0])\n        cylinder(r=3, h=1, $fn=8);\n        \n        // Lower arm segment\n        translate([0, 0, -8])\n        scale([1.2, 1.2, 3])\n        rotate([90, 0, 0])\n        cylinder(r=2.5, h=1, $fn=8);\n        \n        // Hand\n        translate([0, -6, -12])\n        sphere(r=4, $fn=16);\n    }\n}\n\nmodule claydol_legs() {\n    color([0.7, 0.65, 0.55])\n    \n    // Front left leg\n    translate([-8, -12, -16])\n    rotate([15, 0, -10])\n    union() {\n        cylinder(r1=3, r2=2, h=12, $fn=8);\n        translate([0, 0, -12])\n        sphere(r=3, $fn=16);\n    }\n    \n    // Front right leg\n    translate([8, -12, -16])\n    rotate([15, 0, 10])\n    union() {\n        cylinder(r1=3, r2=2, h=12, $fn=8);\n        translate([0, 0, -12])\n        sphere(r=3, $fn=16);\n    }\n    \n    // Back left leg\n    translate([-8, 12, -16])\n    rotate([15, 0, 10])\n    union() {\n        cylinder(r1=3, r2=2, h=12, $fn=8);\n        translate([0, 0, -12])\n        sphere(r=3, $fn=16);\n    }\n    \n    // Back right leg\n    translate([8, 12, -16])\n    rotate([15, 0, -10])\n    union() {\n        cylinder(r1=3, r2=2, h=12, $fn=8);\n        translate([0, 0, -12])\n        sphere(r=3, $fn=16);\n    }\n}\n\nmodule claydol_markings() {\n    color([0.5, 0.4, 0.3]) // Darker markings\n    \n    // Front marking\n    translate([0, -16, 0])\n    rotate([90, 0, 0])\n    scale([1, 0.3, 1])\n    cylinder(r=10, h=0.5, $fn=32);\n    \n    // Back marking\n    translate([0, 16, 0])\n    rotate([90, 0, 0])\n    scale([1, 0.3, 1])\n    cylinder(r=10, h=0.5, $fn=32);\n    \n    // Side markings\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90])\n        translate([12, 0, -5])\n        rotate([0, 90, 0])\n        scale([0.8, 0.2, 1])\n        cylinder(r=8, h=0.5, $fn=32);\n    }\n}\n\nmodule claydol_eyes() {\n    // Front eyes\n    translate([-8, -12, 8])\n    rotate([15, 0, 0])\n    claydol_eye();\n    \n    translate([8, -12, 8])\n    rotate([15, 0, 0])\n    claydol_eye();\n    \n    // Back eyes\n    translate([-8, 12, 8])\n    rotate([15, 180, 0])\n    claydol_eye();\n    \n    translate([8, 12, 8])\n    rotate([15, 180, 0])\n    claydol_eye();\n}\n\n// Main model assembly\nunion() {\n    claydol_body();\n    claydol_arms();\n    claydol_legs();\n    claydol_markings();\n    claydol_eyes();\n}",
    "renders": true
  },
  {
    "pokemon": "lileep",
    "openscad_code": "// Lileep - Rock/Grass type Pokemon\n// Medium complexity realistic style\n\n$fn = 32;\n\n// Main colors\ncolor_lileep_body = [0.5, 0.35, 0.25];\ncolor_lileep_purple = [0.55, 0.3, 0.65];\ncolor_lileep_yellow = [0.95, 0.8, 0.2];\ncolor_lileep_eye = [0.1, 0.1, 0.1];\n\nmodule lileep() {\n    // Base stem\n    color(color_lileep_body)\n    translate([0, 0, 5])\n    cylinder(h=20, r1=8, r2=10, center=false);\n    \n    // Bulb body\n    color(color_lileep_purple)\n    difference() {\n        sphere(15);\n        translate([0, 0, -18])\n        sphere(15);\n    }\n    \n    // Mouth opening\n    color(color_lileep_purple)\n    difference() {\n        sphere(15);\n        translate([0, 0, 5])\n        cylinder(h=30, r=8, center=true);\n    }\n    \n    // Eye stalks\n    for (i = [0:1]) {\n        translate([i*20-10, 0, 10]) {\n            rotate([0, i*30-15, 0])\n            color(color_lileep_purple)\n            cylinder(h=15, r=3, center=false);\n            \n            translate([0, 0, 15])\n            color(color_lileep_yellow)\n            sphere(6);\n            \n            translate([0, 0, 18])\n            color(color_lileep_eye)\n            sphere(3);\n        }\n    }\n    \n    // Petal tentacles\n    for (i = [0:7]) {\n        rotate([0, 0, i*45])\n        translate([0, 12, 0])\n        rotate([0, 30, 0])\n        color(color_lileep_purple)\n        cylinder(h=20, r1=4, r2=2, center=false);\n    }\n    \n    // Yellow ring pattern\n    for (i = [0:7]) {\n        rotate([0, 0, i*45])\n        translate([0, 11, -8])\n        rotate([0, 90, 0])\n        color(color_lileep_yellow)\n        cylinder(h=2, r=2, center=true);\n    }\n    \n    // Base suction cups\n    for (i = [0:5]) {\n        rotate([0, 0, i*72])\n        translate([6, 0, 0])\n        color(color_lileep_body)\n        translate([0, 0, 2])\n        cylinder(h=3, r=4, center=false);\n    }\n    \n    // Root tentacles\n    for (i = [0:3]) {\n        rotate([0, 0, i*120])\n        translate([0, 8, -15])\n        rotate([30, 0, 0])\n        color(color_lileep_body)\n        cylinder(h=15, r1=3, r2=1, center=false);\n    }\n}\n\nscale(2.5)\nlileep();",
    "renders": true
  },
  {
    "pokemon": "cradily",
    "openscad_code": "// Cradily OpenSCAD Model - Realistic Style, Medium Complexity\n// Approx 80mm tall when printed\n\n// Colors\nneck_color = [0.4, 0.6, 0.3];\nhead_color = [0.5, 0.7, 0.4];\neye_color = [0.9, 0.1, 0.1];\nstone_color = [0.6, 0.5, 0.4];\ntentacle_color = [0.3, 0.5, 0.2];\n\n// Base stone pedestal\nmodule base() {\n    color(stone_color) {\n        difference() {\n            cylinder(h = 15, r1 = 25, r2 = 20, $fn = 32);\n            translate([0, 0, 10]) cylinder(h = 10, r1 = 20, r2 = 15, $fn = 32);\n        }\n    }\n}\n\n// Neck segment\nmodule neck_segment(height, radius) {\n    color(neck_color) {\n        cylinder(h = height, r = radius, $fn = 24);\n    }\n}\n\n// Curved neck\nmodule neck() {\n    color(neck_color) {\n        translate([0, 0, 15]) {\n            for(i = [0:5]) {\n                rotate([0, i * 12, 0]) \n                translate([i * 3, 0, i * 8]) \n                neck_segment(8, 8 - i * 0.5);\n            }\n        }\n    }\n}\n\n// Head bulb\nmodule head() {\n    color(head_color) {\n        translate([18, 0, 65]) {\n            // Main bulb\n            sphere(r = 12, $fn = 32);\n            \n            // Eye sockets\n            difference() {\n                sphere(r = 12.5, $fn = 32);\n                translate([6, -5, 3]) sphere(r = 3, $fn = 16);\n                translate([6, 5, 3]) sphere(r = 3, $fn = 16);\n            }\n            \n            // Eyes\n            color(eye_color) {\n                translate([8.5, -5, 3]) sphere(r = 1.5, $fn = 16);\n                translate([8.5, 5, 3]) sphere(r = 1.5, $fn = 16);\n            }\n            \n            // Mouth\n            difference() {\n                translate([7, 0, -3]) sphere(r = 4, $fn = 32);\n                translate([7, 0, -6]) cube([10, 8, 5], center = true);\n            }\n            \n            // Yellow ring pattern\n            color([0.9, 0.8, 0.2]) {\n                translate([0, 0, 8]) \n                rotate([90, 0, 0]) \n                cylinder(h = 1.5, r = 11, r1 = 9, $fn = 32);\n            }\n        }\n    }\n}\n\n// Single tentacle\nmodule tentacle(length, angle) {\n    color(tentacle_color) {\n        rotate([0, 0, angle]) {\n            translate([0, 0, 15]) {\n                for(i = [0:10]) {\n                    rotate([i * 5, 0, 0]) \n                    translate([sin(i * 10) * 3, cos(i * 10) * 3, -i * 3]) \n                    sphere(r = 2 - i * 0.1, $fn = 16);\n                }\n            }\n        }\n    }\n}\n\n// All tentacles\nmodule tentacles() {\n    for(i = [0:60:359]) {\n        tentacle(30, i);\n    }\n}\n\n// Assembly\nbase();\nneck();\nhead();\ntentacles();",
    "renders": true
  },
  {
    "pokemon": "anorith",
    "openscad_code": "// Anorith OpenSCAD Model (Medium Complexity - Realistic Style)\n\n// Scale factor for overall size\nscale_factor = 0.7;\n\n// Main body color - slate gray\ncolor_body = [0.35, 0.35, 0.4];\n\n// Shell color - dark brown\ncolor_shell = [0.25, 0.15, 0.1];\n\n// Eye color - bright red\ncolor_eye = [0.9, 0.1, 0.1];\n\n// Main module\nmodule anorith() {\n    scale([scale_factor, scale_factor, scale_factor])\n    union() {\n        // Main shell segments\n        shell_segments();\n        \n        // Head with eyes\n        head();\n        \n        // Six legs\n        legs();\n        \n        // Tail\n        tail();\n        \n        // Underside body\n        body();\n    }\n}\n\n// Shell segments\nmodule shell_segments() {\n    color(color_shell)\n    union() {\n        // Central shell\n        for(i = [0:2]) {\n            translate([0, -5 + i*5, 2 + i*2])\n            rotate([0, 0, 0])\n            scale([1.2, 1, 0.3])\n            sphere(r=8);\n        }\n        \n        // Side shell plates\n        for(side = [-1, 1]) {\n            translate([side * 10, 0, 5])\n            rotate([0, side * 15, 0])\n            scale([0.8, 1.2, 0.4])\n            sphere(r=6);\n            \n            translate([side * 12, -8, 3])\n            rotate([0, side * 20, 0])\n            scale([0.7, 1, 0.3])\n            sphere(r=5);\n        }\n    }\n}\n\n// Head with eyes and feelers\nmodule head() {\n    color(color_body)\n    union() {\n        // Main head\n        translate([0, 15, 8])\n        scale([0.8, 1, 0.7])\n        sphere(r=7);\n        \n        // Eyes\n        color(color_eye)\n        for(side = [-1, 1]) {\n            translate([side * 3, 17, 10])\n            sphere(r=1.5);\n        }\n        \n        // Feelers/antennae\n        color(color_body)\n        for(side = [-1, 1]) {\n            translate([side * 4, 19, 9])\n            rotate([0, 0, side * 20])\n            cylinder(h=8, r1=1, r2=0.5);\n            \n            translate([side * 5, 22, 9])\n            rotate([0, 0, side * 20])\n            cylinder(h=6, r1=0.8, r2=0.3);\n        }\n        \n        // Mouth area\n        translate([0, 16, 6])\n        scale([0.3, 0.2, 0.2])\n        sphere(r=3);\n    }\n}\n\n// Six articulated legs\nmodule legs() {\n    color(color_body)\n    union() {\n        // Front legs\n        for(side = [-1, 1]) {\n            for(pos = [0, 1]) {\n                translate([side * 6, 8 - pos*5, 4])\n                rotate([0, 0, side * 30])\n                leg_segment();\n            }\n        }\n        \n        // Middle legs\n        for(side = [-1, 1]) {\n            translate([side * 8, -2, 3])\n            rotate([0, 0, side * 45])\n            scale([0.9, 0.9, 0.9])\n            leg_segment();\n        }\n        \n        // Rear legs\n        for(side = [-1, 1]) {\n            translate([side * 6, -10, 2])\n            rotate([0, 0, side * 60])\n            scale([0.8, 0.8, 0.8])\n            leg_segment();\n        }\n    }\n}\n\n// Single leg segment\nmodule leg_segment() {\n    union() {\n        // Upper segment\n        cylinder(h=6, r=1.2);\n        \n        // Joint\n        translate([0, 6, 0])\n        sphere(r=1);\n        \n        // Lower segment\n        translate([0, 6, 0])\n        rotate([30, 0, 0])\n        cylinder(h=8, r1=1, r2=0.8);\n        \n        // Foot\n        translate([0, 14, 2])\n        rotate([90, 0, 0])\n        scale([1, 0.6, 0.3])\n        cylinder(h=3, r1=1.5, r2=1);\n    }\n}\n\n// Tail\nmodule tail() {\n    color(color_shell)\n    translate([0, -18, 3])\n    rotate([0, 0, 180])\n    union() {\n        // Tail segments\n        for(i = [0:3]) {\n            translate([0, i*3, -i*0.5])\n            scale([1 - i*0.15, 1 - i*0.15, 0.4])\n            sphere(r=5 - i*0.5);\n        }\n        \n        // Tail fan\n        translate([0, 12, -2])\n        rotate([90, 0, 0])\n        scale([1.5, 0.8, 0.1])\n        cylinder(h=0.5, r=4);\n    }\n}\n\n// Underside body\nmodule body() {\n    color(color_body)\n    translate([0, 0, 1])\n    scale([1.5, 1.8, 0.5])\n    sphere(r=6);\n}\n\n// Generate the model\nanorith();",
    "renders": true
  },
  {
    "pokemon": "armaldo",
    "openscad_code": "// Armaldo - Realistic Style Medium Complexity\n// 3D printable, ~80mm tall\n\n$fa = 2;\n$fs = 0.5;\n\n// Color definitions\ncolor_body = [0.3, 0.2, 0.1];\ncolor_shell = [0.4, 0.3, 0.2];\ncolor_accents = [0.8, 0.2, 0.1];\ncolor_eyes = [0.9, 0.9, 0.1];\n\n// Main body\nmodule armaldo() {\n    union() {\n        // Central body\n        color(color_body)\n        translate([0, 0, 20])\n        scale([1, 0.8, 1.2])\n        sphere(20);\n        \n        // Shell segments\n        shell_segments();\n        \n        // Head\n        head();\n        \n        // Arms/claws\n        arms();\n        \n        // Legs\n        legs();\n        \n        // Tail\n        tail();\n    }\n}\n\n// Shell segments\nmodule shell_segments() {\n    for(i = [0:2]) {\n        rotate([0, 0, i * 120])\n        translate([0, 25, 25])\n        scale([1.2, 1, 0.3])\n        color(color_shell)\n        sphere(15);\n    }\n}\n\n// Head with features\nmodule head() {\n    translate([0, -15, 45])\n    union() {\n        // Main head\n        color(color_body)\n        scale([0.8, 1, 0.7])\n        sphere(15);\n        \n        // Eyes\n        for(side = [-1, 1]) {\n            translate([side * 8, -12, 5])\n            color(color_eyes)\n            sphere(3);\n            \n            // Eye ridges\n            translate([side * 8, -15, 8])\n            color(color_shell)\n            rotate([0, side * 20, 0])\n            scale([0.5, 1, 0.3])\n            sphere(5);\n        }\n        \n        // Mandibles\n        mandibles();\n    }\n}\n\n// Mandibles\nmodule mandibles() {\n    for(side = [-1, 1]) {\n        translate([side * 5, -20, 0])\n        rotate([0, 0, side * 30])\n        color(color_shell)\n        scale([0.3, 1, 0.2])\n        cylinder(h = 12, r1 = 3, r2 = 1);\n    }\n}\n\n// Arms with claws\nmodule arms() {\n    for(side = [-1, 1]) {\n        translate([side * 25, 0, 30])\n        rotate([0, 0, side * 30])\n        union() {\n            // Upper arm\n            color(color_body)\n            rotate([0, 90, 0])\n            cylinder(h = 20, r = 5);\n            \n            // Claw\n            translate([20, 0, 0])\n            rotate([0, 90, 0])\n            claw();\n        }\n    }\n}\n\n// Claw assembly\nmodule claw() {\n    union() {\n        // Main claw body\n        color(color_shell)\n        scale([2, 0.8, 0.8])\n        sphere(6);\n        \n        // Individual claw tips\n        for(i = [0:2]) {\n            rotate([0, 0, i * 120 - 60])\n            translate([8, 0, 0])\n            color(color_accents)\n            scale([2, 0.5, 0.5])\n            sphere(3);\n        }\n    }\n}\n\n// Legs\nmodule legs() {\n    for(side = [-1, 1]) {\n        translate([side * 15, 5, 10])\n        union() {\n            // Upper leg\n            color(color_body)\n            rotate([0, 0, side * -20])\n            cylinder(h = 15, r = 4);\n            \n            // Lower leg\n            translate([side * 12, 8, -5])\n            rotate([0, 0, side * 20])\n            color(color_shell)\n            cylinder(h = 12, r = 3);\n            \n            // Foot\n            translate([side * 20, 15, -10])\n            color(color_body)\n            scale([1.5, 1, 0.5])\n            sphere(5);\n        }\n    }\n}\n\n// Tail\nmodule tail() {\n    translate([0, 20, 15])\n    rotate([0, 0, 180])\n    union() {\n        // Tail segments\n        for(i = [0:3]) {\n            translate([0, i * 8, -i * 3])\n            scale([1 - i * 0.15, 1, 1 - i * 0.15])\n            color(color_shell)\n            sphere(8 - i * 2);\n        }\n        \n        // Tail tip\n        translate([0, 32, -12])\n        color(color_accents)\n        scale([0.5, 2, 0.5])\n        sphere(4);\n    }\n}\n\n// Generate the model\narmaldo();",
    "renders": true
  },
  {
    "pokemon": "feebas",
    "openscad_code": "// Feebas - OpenSCAD model\n// Basic primitives only, 3D printable, realistic style, medium complexity\n\nmodule fin(x, y, z, rx, ry, rz) {\n    translate([x, y, z])\n        rotate([rx, ry, rz])\n        color(\"dodgerblue\")\n        difference() {\n            union() {\n                scale([1, 0.4, 1.5])\n                    sphere(d=6);\n                translate([2, 0, 0])\n                    scale([1.3, 0.3, 0.8])\n                    sphere(d=5);\n            }\n            translate([0, -3, 0])\n                cube([6, 6, 6], center=true);\n        }\n}\n\nmodule body() {\n    color(\"lightsalmon\")\n    union() {\n        // Main body\n        translate([0, 0, 0])\n            scale([1, 0.7, 0.5])\n            sphere(d=50);\n        \n        // Tail segment\n        translate([-30, 0, 0])\n            scale([0.7, 0.6, 0.4])\n            sphere(d=40);\n        \n        // Tail end\n        translate([-50, 0, 0])\n            scale([0.3, 0.3, 0.2])\n            sphere(d=30);\n    }\n}\n\nmodule scales() {\n    color(\"firebrick\")\n    for(i=[-20:10:20]) {\n        for(j=[-15:10:15]) {\n            translate([i, j, 15])\n                scale([1, 1, 0.3])\n                sphere(d=8);\n        }\n    }\n}\n\nmodule eye(x) {\n    translate([x, 12, 5]) {\n        // Eye white\n        color(\"white\")\n        sphere(d=8);\n        \n        // Pupil\n        translate([0, 0, 4])\n            color(\"black\")\n            sphere(d=4);\n    }\n}\n\nmodule mouth() {\n    translate([0, 20, -5])\n    rotate([0, 90, 0])\n    color(\"darkred\")\n    difference() {\n        cylinder(h=15, d1=8, d2=3);\n        translate([0, 0, -1])\n            cube([15, 15, 15], center=true);\n    }\n}\n\nmodule whiskers() {\n    color(\"dodgerblue\")\n    for(side=[-1, 1]) {\n        for(i=[-1, 0, 1]) {\n            translate([5*side, 15+i*3, -3])\n            rotate([0, 0, side*30+i*10])\n            cylinder(h=12, d1=2, d2=1);\n        }\n    }\n}\n\nmodule tail_fin() {\n    translate([-55, 0, 0])\n    rotate([0, 0, 90])\n    color(\"dodgerblue\")\n    difference() {\n        scale([1.2, 0.3, 1])\n            sphere(d=25);\n        translate([0, -15, 0])\n            cube([30, 30, 30], center=true);\n    }\n}\n\n// Main assembly\nunion() {\n    body();\n    scales();\n    eye(10);\n    eye(-10);\n    mouth();\n    whiskers();\n    tail_fin();\n    \n    // Top fin\n    fin(0, 0, 20, 0, 0, 0);\n    \n    // Side fins\n    fin(20, 0, -5, 0, 30, 45);\n    fin(-20, 0, -5, 0, 30, -45);\n}",
    "renders": true
  },
  {
    "pokemon": "milotic",
    "openscad_code": "// Milotic Pokemon - Realistic Style - Medium Complexity\n// 3D printable with no overhangs\n\n$fn = 32;\n\n// Main colors\nmilotic_cream = [1, 0.85, 0.75];\nmilotic_red = [0.8, 0.2, 0.2];\nmilotic_pink = [0.95, 0.6, 0.7];\nmilotic_blue = [0.6, 0.7, 0.95];\n\n// Scale factor for 3D printing (80mm length)\nscale_factor = 0.8;\n\nmodule milotic_body() {\n    color(milotic_cream)\n    union() {\n        // Main serpentine body segments\n        for(i = [0:15]) {\n            translate([i*5 - 30, 0, 0])\n            rotate([0, 0, i*5])\n            scale([1 - i*0.03, 1 - i*0.03, 1 - i*0.02])\n            sphere(d = 15 - i*0.5);\n        }\n        \n        // Tail fin\n        translate([50, 0, 0])\n        rotate([0, 0, 20])\n        scale([3, 1, 0.5])\n        sphere(d = 15);\n        \n        // Side fins\n        translate([30, 10, 0])\n        rotate([0, 0, 45])\n        scale([2, 1, 0.3])\n        sphere(d = 8);\n        \n        translate([30, -10, 0])\n        rotate([0, 0, -45])\n        scale([2, 1, 0.3])\n        sphere(d = 8);\n    }\n}\n\nmodule milotic_head() {\n    color(milotic_cream)\n    union() {\n        // Head base\n        translate([-35, 0, 5])\n        rotate([0, 0, -10])\n        scale([1.2, 1, 1.5])\n        sphere(d = 18);\n        \n        // Snout\n        translate([-45, 0, 7])\n        scale([1.5, 0.8, 0.8])\n        cylinder(h = 10, d1 = 12, d2 = 8);\n        \n        // Eyebrow fins\n        color(milotic_red)\n        translate([-40, 8, 12])\n        rotate([0, 30, -20])\n        scale([0.5, 2, 0.2])\n        sphere(d = 8);\n        \n        translate([-40, -8, 12])\n        rotate([0, -30, 20])\n        scale([0.5, 2, 0.2])\n        sphere(d = 8);\n        \n        // Crest\n        color(milotic_pink)\n        translate([-42, 0, 20])\n        for(i = [0:3]) {\n            translate([i*2, 0, i*3])\n            rotate([0, 0, -5 - i*2])\n            scale([0.3, 0.3, 1 + i*0.2])\n            sphere(d = 5);\n        }\n    }\n}\n\nmodule milotic_eyes() {\n    // Eyes\n    color([0, 0, 0])\n    union() {\n        translate([-45, 4, 9])\n        sphere(d = 3);\n        \n        translate([-45, -4, 9])\n        sphere(d = 3);\n    }\n    \n    // Eye highlights\n    color([1, 1, 1])\n    union() {\n        translate([-44, 4.5, 10])\n        sphere(d = 1);\n        \n        translate([-44, -3.5, 10])\n        sphere(d = 1);\n    }\n}\n\nmodule milotic_scales() {\n    color(milotic_blue)\n    // Scale pattern along body\n    for(i = [0:5]) {\n        translate([i*10 - 25, 0, 8])\n        rotate([0, 0, i*3])\n        scale([1.5, 0.5, 0.2])\n        sphere(d = 4);\n    }\n    \n    for(i = [0:4]) {\n        translate([i*10 - 20, 0, -8])\n        rotate([0, 0, i*3])\n        scale([1.5, 0.5, 0.2])\n        sphere(d = 4);\n    }\n}\n\n// Main assembly\nscale(scale_factor)\nunion() {\n    milotic_body();\n    milotic_head();\n    milotic_eyes();\n    milotic_scales();\n}",
    "renders": true
  },
  {
    "pokemon": "castform",
    "openscad_code": "// Castform Pokemon - Medium Complexity Realistic Style\n// 3D printable model, ~70mm tall\n\nmodule castform_body() {\n    // Main spherical body\n    color(\"white\")\n    sphere(d=50, $fn=64);\n    \n    // Bottom flat area for stability\n    translate([0, 0, -24.5])\n    cube([40, 40, 1], center=true);\n}\n\nmodule head_details() {\n    // Purple raindrop on forehead\n    translate([0, 20, 20])\n    rotate([0, 180, 0])\n    color(\"purple\")\n    scale([1, 1, 1.5])\n    cylinder(d1=8, d2=0, h=6, $fn=32);\n}\n\nmodule ears() {\n    // Left ear\n    translate([-15, 20, 10])\n    rotate([30, 0, -20])\n    color(\"white\")\n    scale([1, 0.8, 2])\n    sphere(d=15, $fn=32);\n    \n    // Right ear\n    translate([15, 20, 10])\n    rotate([30, 0, 20])\n    color(\"white\")\n    scale([1, 0.8, 2])\n    sphere(d=15, $fn=32);\n}\n\nmodule arms() {\n    // Left arm\n    translate([-28, 0, -10])\n    rotate([0, 0, -30])\n    color(\"white\")\n    scale([0.7, 0.7, 1.2])\n    sphere(d=18, $fn=32);\n    \n    // Right arm\n    translate([28, 0, -10])\n    rotate([0, 0, 30])\n    color(\"white\")\n    scale([0.7, 0.7, 1.2])\n    sphere(d=18, $fn=32);\n}\n\nmodule legs() {\n    // Left leg\n    translate([-12, -20, -24])\n    color(\"white\")\n    scale([0.8, 0.8, 1.5])\n    sphere(d=12, $fn=32);\n    \n    // Right leg\n    translate([12, -20, -24])\n    color(\"white\")\n    scale([0.8, 0.8, 1.5])\n    sphere(d=12, $fn=32);\n}\n\nmodule facial_features() {\n    // Eyes\n    // Left eye\n    translate([-8, 15, 10])\n    color(\"black\")\n    sphere(d=4, $fn=16);\n    \n    // Right eye\n    translate([8, 15, 10])\n    color(\"black\")\n    sphere(d=4, $fn=16);\n    \n    // Mouth\n    translate([0, 10, 5])\n    rotate([90, 0, 0])\n    color(\"black\")\n    cylinder(d1=6, d2=4, h=2, $fn=32);\n}\n\nmodule weather_symbol() {\n    // Sun symbol on chest\n    translate([0, 0, 24])\n    rotate([90, 0, 0])\n    color(\"gold\")\n    union() {\n        // Center circle\n        cylinder(d=8, h=1, $fn=32);\n        \n        // Rays\n        for(i=[0:45:315]) {\n            rotate([0, 0, i])\n            translate([0, 6, 0])\n            cube([2, 4, 1], center=true);\n        }\n    }\n}\n\nmodule cloud_base() {\n    // Cloud platform under Castform\n    translate([0, 0, -30])\n    color(\"lightgray\")\n    union() {\n        // Main cloud puffs\n        sphere(d=35, $fn=32);\n        translate([-15, -10, 0]) sphere(d=25, $fn=32);\n        translate([15, -10, 0]) sphere(d=25, $fn=32);\n        translate([0, -15, 0]) sphere(d=30, $fn=32);\n    }\n}\n\n// Assembly\nunion() {\n    // Main body parts\n    castform_body();\n    head_details();\n    ears();\n    arms();\n    legs();\n    facial_features();\n    weather_symbol();\n    \n    // Optional cloud base for display\n    // cloud_base();\n}",
    "renders": true
  },
  {
    "pokemon": "kecleon",
    "openscad_code": "// Kecleon Realistic Style - Medium Complexity\n// Based on Generation III sprite proportions\n\n$fn = 32;\n\n// Main colors\ncolor_green = [34/255, 139/255, 34/255];\ncolor_red = [220/255, 20/255, 60/255];\ncolor_yellow = [255/255, 215/255, 0/255];\ncolor_black = [25/255, 25/255, 25/255];\ncolor_white = [245/255, 245/255, 245/255];\n\nmodule kecleon_body() {\n    color(color_green)\n    union() {\n        // Main torso - rounded rectangular shape\n        translate([0, 0, 10])\n        scale([1.2, 1, 0.8])\n        sphere(15);\n        \n        // Belly bulge\n        translate([0, 0, 8])\n        scale([0.9, 0.7, 0.6])\n        sphere(16);\n    }\n}\n\nmodule kecleon_head() {\n    color(color_green)\n    union() {\n        // Main head shape\n        translate([0, 20, 22])\n        scale([1.1, 1.3, 1])\n        sphere(12);\n        \n        // Snout extension\n        translate([0, 32, 22])\n        scale([0.7, 0.8, 0.6])\n        sphere(10);\n    }\n    \n    // Red zigzag stripe\n    color(color_red)\n    for(i = [-1, 1]) {\n        translate([i * 6, 28, 29])\n        rotate([0, 0, i * 15])\n        scale([0.3, 2, 0.3])\n        cube([5, 3, 3], center=true);\n    }\n}\n\nmodule kecleon_eyes() {\n    color(color_yellow)\n    union() {\n        // Eye sockets\n        translate([-8, 20, 28])\n        sphere(4);\n        translate([8, 20, 28])\n        sphere(4);\n        \n        // Eyelids\n        color(color_green)\n        translate([-8, 20, 31])\n        scale([1.2, 1, 0.3])\n        sphere(4);\n        translate([8, 20, 31])\n        scale([1.2, 1, 0.3])\n        sphere(4);\n    }\n    \n    // Pupils\n    color(color_black)\n    union() {\n        translate([-8, 22, 28])\n        sphere(2);\n        translate([8, 22, 28])\n        sphere(2);\n    }\n    \n    // Eye ridges\n    color(color_green)\n    for(i = [-1, 1]) {\n        translate([i * 12, 15, 35])\n        rotate([0, -20, 0])\n        cylinder(h=8, r1=3, r2=2);\n    }\n}\n\nmodule kecleon_limbs() {\n    // Arms\n    for(side = [-1, 1]) {\n        color(color_green) {\n            // Upper arm\n            translate([side * 15, 8, 15])\n            rotate([0, 0, side * 30])\n            cylinder(h=12, r=4);\n            \n            // Hand\n            translate([side * 20, 8, 15])\n            sphere(5);\n            \n            // Fingers\n            for(f = [0, 1, 2]) {\n                translate([side * (22 + f*2), 8, 15])\n                rotate([0, 0, side * (f-1) * 20])\n                cylinder(h=6, r1=2, r2=1);\n            }\n        }\n    }\n    \n    // Legs\n    for(side = [-1, 1]) {\n        color(color_green) {\n            // Upper leg\n            translate([side * 8, -5, 5])\n            rotate([30, 0, 0])\n            cylinder(h=10, r=5);\n            \n            // Foot\n            translate([side * 8, -10, 0])\n            scale([1.5, 2, 0.8])\n            sphere(5);\n        }\n    }\n}\n\nmodule kecleon_tail() {\n    color(color_red)\n    union() {\n        // Tail base\n        translate([0, -18, 15])\n        rotate([90, 0, 0])\n        cylinder(h=20, r1=5, r2=3);\n        \n        // Curl\n        for(i = [0:5]) {\n            rotate([0, 0, i * 30])\n            translate([0, -25 - i*3, 15])\n            rotate([90, 0, 0])\n            cylinder(h=4, r=3);\n        }\n        \n        // Tail tip\n        translate([0, -35, 15])\n        sphere(4);\n    }\n}\n\nmodule kecleon_pattern() {\n    // Yellow belly stripe\n    color(color_yellow)\n    translate([0, 0, 5])\n    scale([0.6, 1.4, 0.3])\n    sphere(15);\n    \n    // Yellow zigzag on back\n    color(color_yellow)\n    for(i = [0:3]) {\n        translate([0, -5 - i*8, 22])\n        rotate([0, 0, (i%2) * 180])\n        scale([0.5, 1, 0.3])\n        cube([20, 6, 2], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    kecleon_body();\n    kecleon_head();\n    kecleon_eyes();\n    kecleon_limbs();\n    kecleon_tail();\n    kecleon_pattern();\n}",
    "renders": true
  },
  {
    "pokemon": "shuppet",
    "openscad_code": "// Shuppet Pokemon - Medium Complexity Realistic Style\n// Designed for 3D printing - approximately 75mm tall\n\n$fn = 32;\n\n// Main colors\ncolor_purple = [0.5, 0.2, 0.7];\ncolor_red = [0.8, 0.1, 0.1];\ncolor_black = [0.1, 0.1, 0.1];\ncolor_white = [0.9, 0.9, 0.9];\n\n// Main body\nmodule shuppet_body() {\n    color(color_purple)\n    union() {\n        // Head - slightly flattened sphere\n        translate([0, 0, 45])\n        scale([1.2, 1.2, 0.9])\n        sphere(r = 15);\n        \n        // Body - tapered cylinder\n        cylinder(h = 30, r1 = 18, r2 = 12);\n        \n        // Bottom point\n        translate([0, 0, -15])\n        cylinder(h = 15, r1 = 12, r2 = 2);\n    }\n}\n\n// Pointed ears\nmodule ears() {\n    color(color_purple)\n    union() {\n        // Left ear\n        translate([-12, 0, 55])\n        rotate([0, -10, 0])\n        cylinder(h = 20, r1 = 5, r2 = 0);\n        \n        // Right ear\n        translate([12, 0, 55])\n        rotate([0, 10, 0])\n        cylinder(h = 20, r1 = 5, r2 = 0);\n    }\n}\n\n// Eye stalks\nmodule eye_stalks() {\n    color(color_purple)\n    union() {\n        // Left stalk\n        translate([-15, 0, 50])\n        rotate([0, 20, 0])\n        cylinder(h = 12, r1 = 3, r2 = 2);\n        \n        // Right stalk\n        translate([15, 0, 50])\n        rotate([0, -20, 0])\n        cylinder(h = 12, r1 = 3, r2 = 2);\n    }\n}\n\n// Eyes\nmodule eyes() {\n    color(color_red)\n    union() {\n        // Left eye\n        translate([-17, 0, 50])\n        sphere(r = 5);\n        \n        // Right eye\n        translate([17, 0, 50])\n        sphere(r = 5);\n        \n        // Eye details\n        color(color_black)\n        union() {\n            translate([-17, 3, 52])\n            sphere(r = 2);\n            translate([17, 3, 52])\n            sphere(r = 2);\n        }\n    }\n}\n\n// Mouth\nmodule mouth() {\n    color(color_black)\n    translate([0, 0, 35])\n    rotate([0, 180, 0])\n    cylinder(h = 10, r1 = 8, r2 = 0, $fn = 8);\n}\n\n// Arms\nmodule arms() {\n    color(color_purple)\n    union() {\n        // Left arm\n        translate([-18, 0, 25])\n        rotate([0, 0, -30])\n        cylinder(h = 25, r1 = 4, r2 = 3);\n        \n        // Right arm\n        translate([18, 0, 25])\n        rotate([0, 0, 30])\n        cylinder(h = 25, r1 = 4, r2 = 3);\n        \n        // Hands\n        union() {\n            translate([-25, 0, 10])\n            sphere(r = 5);\n            translate([25, 0, 10])\n            sphere(r = 5);\n        }\n    }\n}\n\n// Floating rings\nmodule floating_rings() {\n    color(color_purple)\n    for(i = [1:3]) {\n        translate([0, 0, 15 - i * 8])\n        rotate([90, 0, 0])\n        difference() {\n            cylinder(h = 1.5, r1 = 25 - i * 3, r2 = 25 - i * 3);\n            cylinder(h = 2, r1 = 20 - i * 3, r2 = 20 - i * 3);\n        }\n    }\n}\n\n// Markings\nmodule markings() {\n    color(color_white)\n    union() {\n        // Top marking\n        translate([0, 0, 52])\n        scale([1, 0.3, 1])\n        cylinder(h = 1, r1 = 8, r2 = 8);\n        \n        // Side markings\n        translate([-10, 0, 40])\n        rotate([0, 0, 45])\n        scale([0.5, 1, 0.2])\n        cube([8, 8, 1], center = true);\n        \n        translate([10, 0, 40])\n        rotate([0, 0, -45])\n        scale([0.5, 1, 0.2])\n        cube([8, 8, 1], center = true);\n    }\n}\n\n// Assemble the complete model\nunion() {\n    shuppet_body();\n    ears();\n    eye_stalks();\n    eyes();\n    mouth();\n    arms();\n    floating_rings();\n    markings();\n}",
    "renders": true
  },
  {
    "pokemon": "banette",
    "openscad_code": "// Banette Pokemon - Medium complexity realistic style\n// 3D printable model with proper wall thickness\n\n// Main color definitions\nbody_color = [60/255, 60/255, 80/255];  // Dark purple-gray\nzipper_color = [200/255, 200/255, 200/255]; // Silver\neye_color = [255/255, 50/255, 50/255];  // Red\nmouth_color = [100/255, 0/255, 0/255];  // Dark red\n\n// Overall scale factor\nscale_factor = 0.8;\n\nmodule banette_body() {\n    color(body_color) {\n        // Main body - rounded rectangle shape\n        difference() {\n            union() {\n                // Central body\n                translate([0, 0, 10])\n                    scale([1, 0.8, 1.2])\n                    sphere(d=40, $fn=32);\n                \n                // Bottom extension\n                translate([0, 0, -5])\n                    cylinder(h=20, d=35, $fn=32);\n            }\n            \n            // Hollow out the body for 3D printing\n            translate([0, 0, 5])\n                scale([0.8, 0.7, 0.9])\n                sphere(d=35, $fn=32);\n        }\n    }\n}\n\nmodule head() {\n    color(body_color) {\n        // Main head shape\n        difference() {\n            translate([0, 0, 45])\n                scale([1.1, 0.9, 1.3])\n                sphere(d=35, $fn=32);\n            \n            // Eye sockets\n            translate([-8, 12, 50])\n                sphere(d=8, $fn=16);\n            translate([8, 12, 50])\n                sphere(d=8, $fn=16);\n            \n            // Mouth opening\n            translate([0, 5, 42])\n                scale([0.8, 0.5, 0.4])\n                cube([15, 10, 8], center=true);\n        }\n        \n        // Head seam\n        translate([0, 0, 42])\n            rotate([90, 0, 0])\n            cylinder(h=0.5, d=30, $fn=32);\n    }\n}\n\nmodule eyes() {\n    // Left eye\n    color(eye_color)\n    translate([-8, 12, 50])\n        sphere(d=6, $fn=16);\n    \n    // Right eye\n    color(eye_color)\n    translate([8, 12, 50])\n        sphere(d=6, $fn=16);\n    \n    // Eye highlights\n    color([1, 1, 1])\n    translate([-7, 13, 52])\n        sphere(d=2, $fn=8);\n    translate([9, 13, 52])\n        sphere(d=2, $fn=8);\n}\n\nmodule mouth() {\n    color(mouth_color) {\n        // Mouth cavity\n        translate([0, 5, 38])\n            scale([0.7, 0.4, 0.3])\n            sphere(d=20, $fn=32);\n        \n        // Tongue\n        translate([0, 2, 36])\n            scale([0.3, 0.2, 0.1])\n            sphere(d=15, $fn=16);\n    }\n}\n\nmodule zipper() {\n    color(zipper_color) {\n        // Main zipper track\n        translate([0, 0, 35])\n            rotate([90, 0, 0])\n            cylinder(h=0.5, d=25, $fn=32);\n        \n        // Zipper teeth\n        for(i = [0:30:359]) {\n            rotate([0, 0, i])\n            translate([12.5, 0, 35])\n                cube([2, 0.5, 1], center=true);\n        }\n        \n        // Zipper pull\n        translate([0, -15, 35])\n            rotate([0, 90, 0])\n            cylinder(h=8, d=3, $fn=16);\n    }\n}\n\nmodule ears() {\n    // Left ear\n    color(body_color) {\n        translate([-15, 0, 55])\n            rotate([30, 0, -20])\n            scale([0.3, 0.3, 1.5])\n            cylinder(h=15, d=8, $fn=16);\n        \n        // Right ear\n        translate([15, 0, 55])\n            rotate([30, 0, 20])\n            scale([0.3, 0.3, 1.5])\n            cylinder(h=15, d=8, $fn=16);\n    }\n}\n\nmodule arms() {\n    // Left arm\n    color(body_color) {\n        translate([-20, -5, 25])\n            rotate([0, 30, -30])\n            cylinder(h=15, d=6, $fn=16);\n        \n        // Right arm\n        translate([20, -5, 25])\n            rotate([0, -30, 30])\n            cylinder(h=15, d=6, $fn=16);\n    }\n}\n\nmodule tail() {\n    color(body_color) {\n        // Main tail\n        translate([0, -15, 0])\n            rotate([0, 0, 0])\n            scale([0.5, 0.5, 1.5])\n            cylinder(h=20, d=10, $fn=16);\n        \n        // Tail tip\n        translate([0, -20, -15])\n            sphere(d=8, $fn=16);\n    }\n}\n\n// Assemble the complete model\nscale([scale_factor, scale_factor, scale_factor]) {\n    banette_body();\n    head();\n    eyes();\n    mouth();\n    zipper();\n    ears();\n    arms();\n    tail();\n}",
    "renders": true
  },
  {
    "pokemon": "duskull",
    "openscad_code": "// OpenSCAD Duskull Pokemon (realistic style, medium complexity)\n// Suitable for 3D printing - no overhangs, 60mm tall\n\nmodule duskull() {\n    // Main gray body color\n    color([0.4, 0.4, 0.45]) {\n        // Central skull body\n        union() {\n            // Main skull shape\n            difference() {\n                sphere(d = 40, $fn = 48);\n                // Hollow out center\n                translate([0, 0, -5])\n                    sphere(d = 35, $fn = 48);\n            }\n            \n            // Jaw section\n            translate([0, -20, -15])\n                rotate([0, 0, 0])\n                scale([1, 0.6, 0.8])\n                cylinder(h = 15, d1 = 30, d2 = 25, $fn = 32);\n        }\n    }\n    \n    // Eye sockets\n    color([0.1, 0.1, 0.1]) {\n        for(side = [-1, 1]) {\n            translate([side * 12, 5, 5])\n                rotate([0, side * 10, 0])\n                scale([0.8, 1, 1])\n                sphere(d = 12, $fn = 32);\n        }\n    }\n    \n    // Red glowing eyes\n    color([0.9, 0.1, 0.1]) {\n        for(side = [-1, 1]) {\n            translate([side * 12, 8, 7])\n                sphere(d = 8, $fn = 16);\n        }\n    }\n    \n    // Teeth\n    color([0.9, 0.9, 0.9]) {\n        // Top teeth\n        for(i = [-2:2]) {\n            translate([i * 5, -18, -5])\n                rotate([90, 0, 0])\n                cylinder(h = 6, d1 = 4, d2 = 2, $fn = 8);\n        }\n        \n        // Bottom teeth\n        for(i = [-1.5, -0.5, 0.5, 1.5]) {\n            translate([i * 6, -20, -20])\n                rotate([90, 0, 0])\n                cylinder(h = 5, d1 = 2, d2 = 4, $fn = 8);\n        }\n    }\n    \n    // Ghostly tail segments\n    color([0.5, 0.5, 0.5, 0.8]) {\n        for(i = [0:2]) {\n            translate([0, 0, -30 - i * 15])\n                scale([1 - i * 0.2, 1 - i * 0.3, 1])\n                rotate([0, 0, i * 30])\n                cylinder(h = 15, d = 30 - i * 8, $fn = 24);\n        }\n    }\n    \n    // Horn-like protrusions\n    color([0.3, 0.3, 0.3]) {\n        // Left horn\n        translate([-15, 0, 15])\n            rotate([-30, 0, -20])\n            cylinder(h = 12, d1 = 8, d2 = 4, $fn = 8);\n        \n        // Right horn\n        translate([15, 0, 15])\n            rotate([-30, 0, 20])\n            cylinder(h = 12, d1 = 8, d2 = 4, $fn = 8);\n    }\n    \n    // Ghostly wisps\n    color([0.4, 0.4, 0.4, 0.6]) {\n        for(angle = [0:120:359]) {\n            rotate([0, 0, angle])\n            translate([20, 0, -10])\n                scale([0.5, 1, 1])\n                sphere(d = 8, $fn = 16);\n        }\n    }\n    \n    // Skull markings\n    color([0.2, 0.2, 0.2]) {\n        // Forehead mark\n        translate([0, 8, 18])\n            rotate([90, 0, 0])\n            cylinder(h = 1, d = 12, $fn = 32);\n        \n        // Cheek marks\n        for(side = [-1, 1]) {\n            translate([side * 15, -5, 0])\n                rotate([0, side * 20, 0])\n                scale([1, 1.5, 0.5])\n                sphere(d = 8, $fn = 16);\n        }\n    }\n}\n\n// Generate the model centered\ntranslate([0, 0, 30])\n    duskull();",
    "renders": true
  },
  {
    "pokemon": "dusclops",
    "openscad_code": "// Dusclops Pokemon - Realistic Style - Medium Complexity\n// 3D printable model, ~80mm tall\n\n// Colors\n$fn = 32;\n\n// Main body color\nbody_color = \"#5A4A7F\";\n// Eye color\neye_color = \"#FF0000\";\n// Accent color\naccent_color = \"#3D2A5A\";\n\n// Main body\nmodule dusclops_body() {\n    color(body_color) {\n        // Central body - egg shape\n        translate([0, 0, 30]) {\n            scale([1, 0.9, 1.3])\n                sphere(r = 25);\n        }\n        \n        // Lower body extension\n        translate([0, 0, 10]) {\n            scale([0.9, 0.8, 1])\n                cylinder(r = 20, h = 20);\n        }\n        \n        // Shoulder protrusions\n        for (angle = [45, -45]) {\n            rotate([0, 0, angle]) {\n                translate([30, 0, 45]) {\n                    rotate([0, 90, 0])\n                        cylinder(r = 8, h = 15);\n                }\n            }\n        }\n    }\n}\n\n// Eye\nmodule dusclops_eye() {\n    color(eye_color) {\n        // Main eye\n        translate([0, 20, 45]) {\n            sphere(r = 18);\n        }\n        \n        // Eye socket ring\n        color(accent_color) {\n            translate([0, 19, 45]) {\n                rotate_extrude() {\n                    translate([15, 0, 0])\n                        circle(r = 3);\n                }\n            }\n        }\n        \n        // Pupil\n        color(\"#000000\") {\n            translate([0, 25, 45]) {\n                sphere(r = 8);\n            }\n        }\n    }\n}\n\n// Arms\nmodule dusclops_arms() {\n    color(body_color) {\n        for (side = [-1, 1]) {\n            translate([side * 25, 0, 35]) {\n                rotate([0, 0, side * 45]) {\n                    // Upper arm\n                    translate([0, 0, 0]) {\n                        scale([0.8, 0.8, 1.5])\n                            cylinder(r = 6, h = 20);\n                    }\n                    \n                    // Lower arm\n                    translate([side * 15, 0, -15]) {\n                        rotate([90, 0, 0])\n                            cylinder(r = 5, h = 25);\n                        \n                        // Hand\n                        translate([0, 0, -30]) {\n                            sphere(r = 8);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Legs\nmodule dusclops_legs() {\n    color(body_color) {\n        for (side = [-1, 1]) {\n            translate([side * 12, 0, 0]) {\n                // Thigh\n                translate([0, 0, 0]) {\n                    scale([0.7, 0.7, 1.2])\n                        cylinder(r = 8, h = 15);\n                }\n                \n                // Lower leg\n                translate([0, 0, -20]) {\n                    cylinder(r = 6, h = 25);\n                    \n                    // Foot\n                    translate([0, 0, -35]) {\n                        scale([1.2, 1.5, 0.6])\n                            sphere(r = 8);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Back markings\nmodule dusclops_markings() {\n    color(accent_color) {\n        // Vertical stripes\n        for (offset = [-10, 0, 10]) {\n            translate([offset, -25, 30]) {\n                cube([2, 2, 35], center = true);\n            }\n        }\n        \n        // Horizontal bands\n        for (height = [15, 25, 35]) {\n            translate([0, -25, height]) {\n                cube([35, 2, 2], center = true);\n            }\n        }\n    }\n}\n\n// Head crest\nmodule dusclops_crest() {\n    color(body_color) {\n        // Central spike\n        translate([0, 0, 60]) {\n            cylinder(r1 = 8, r2 = 2, h = 15);\n        }\n        \n        // Side spikes\n        for (angle = [-30, 30]) {\n            rotate([0, 0, angle]) {\n                translate([8, 0, 58]) {\n                    cylinder(r1 = 6, r2 = 2, h = 12);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    dusclops_body();\n    dusclops_eye();\n    dusclops_arms();\n    dusclops_legs();\n    dusclops_markings();\n    dusclops_crest();\n}",
    "renders": true
  },
  {
    "pokemon": "tropius",
    "openscad_code": "// Tropius Pokemon - Realistic Style - Medium Complexity\n// 3D printable model with proper wall thickness\n\n// Color definitions\n$fa = 2;\n$fs = 0.5;\n\n// Main body\nmodule tropius_body() {\n    color(\"forestgreen\") {\n        // Torso - pear shaped body\n        translate([0, 0, 15]) scale([1.2, 0.8, 1.5]) sphere(d=30);\n        \n        // Belly\n        translate([0, -5, 10]) scale([0.8, 0.6, 1.2]) sphere(d=20);\n    }\n}\n\n// Neck and head\nmodule neck_head() {\n    color(\"forestgreen\") {\n        // Neck\n        translate([0, 15, 35]) rotate([15, 0, 0]) \n            cylinder(h=20, d1=12, d2=8);\n        \n        // Head\n        translate([0, 25, 48]) rotate([15, 0, 0]) \n            scale([1.2, 1, 1]) sphere(d=20);\n    }\n    \n    // Snout\n    color(\"forestgreen\") {\n        translate([0, 32, 46]) rotate([20, 0, 0])\n            scale([0.8, 1.5, 0.8]) sphere(d=12);\n    }\n}\n\n// Ears\nmodule ears() {\n    color(\"forestgreen\") \n    for(side = [-1, 1]) {\n        translate([side * 8, 20, 50]) rotate([0, side * 15, 0])\n            scale([0.5, 2, 0.1]) sphere(d=8);\n    }\n}\n\n// Eyes\nmodule eyes() {\n    color(\"black\") {\n        for(side = [-1, 1]) {\n            translate([side * 5, 30, 48]) sphere(d=3);\n        }\n    }\n}\n\n// Leaf wings\nmodule leaf_wings() {\n    color(\"darkgreen\") {\n        for(side = [-1, 1]) {\n            // Main wing\n            translate([side * 25, 0, 25]) rotate([0, 0, side * -20]) \n                scale([2, 0.1, 1.5]) sphere(d=40);\n            \n            // Wing stem\n            translate([side * 15, 0, 30]) rotate([0, 0, side * -30])\n                cylinder(h=3, d=5);\n        }\n    }\n}\n\n// Leaf on head\nmodule head_leaf() {\n    color(\"darkgreen\") {\n        translate([0, 15, 55]) rotate([0, 0, 0])\n            scale([0.1, 1.5, 2]) sphere(d=15);\n    }\n}\n\n// Legs\nmodule legs() {\n    color(\"brown\") {\n        // Front legs\n        for(side = [-1, 1]) {\n            translate([side * 10, 0, 0]) {\n                // Thigh\n                cylinder(h=15, d=8);\n                // Foot\n                translate([0, 0, -5]) scale([1.5, 2, 1]) sphere(d=8);\n            }\n        }\n        \n        // Back legs\n        for(side = [-1, 1]) {\n            translate([side * 8, -15, 0]) {\n                // Thigh\n                cylinder(h=15, d=8);\n                // Foot\n                translate([0, 0, -5]) scale([1.5, 2, 1]) sphere(d=8);\n            }\n        }\n    }\n}\n\n// Tail\nmodule tail() {\n    color(\"forestgreen\") {\n        translate([0, -25, 15]) rotate([0, -30, 0])\n            scale([0.8, 0.8, 2]) sphere(d=15);\n    }\n}\n\n// Banana bunches under chin\nmodule bananas() {\n    color(\"yellow\") {\n        for(i = [0:2]) {\n            rotate([0, 0, i * 120]) {\n                translate([0, 35 - i*2, 40 + i]) \n                    scale([0.3, 2, 0.5]) sphere(d=6);\n            }\n        }\n    }\n}\n\n// Body markings\nmodule markings() {\n    color(\"lightgreen\") {\n        // Chest marking\n        translate([0, -5, 20]) scale([0.8, 0.6, 0.3]) sphere(d=15);\n        \n        // Wing veins\n        for(side = [-1, 1]) {\n            translate([side * 25, 0, 25]) rotate([0, 0, side * -20]) {\n                for(i = [0:2]) {\n                    rotate([0, 0, i * 45 - 45]) \n                        scale([1.8, 0.02, 0.02]) cube([20, 1, 1]);\n                }\n            }\n        }\n    }\n}\n\n// Scale entire model\nscale(0.8) {\n    union() {\n        tropius_body();\n        neck_head();\n        ears();\n        eyes();\n        leaf_wings();\n        head_leaf();\n        legs();\n        tail();\n        bananas();\n        markings();\n    }\n}",
    "renders": true
  },
  {
    "pokemon": "chimecho",
    "openscad_code": "// Chimecho Pokemon - Realistic Style (Medium Complexity)\n// OpenSCAD code for 3D printing\n\n// Colors\n$fa = 2;\n$fs = 0.5;\n\n// Main body color (light blue)\ncolor_body = [0.6, 0.8, 1.0];\n// Bell color (yellow)\ncolor_bell = [1.0, 0.8, 0.2];\n// Eye color (red)\ncolor_eye = [0.8, 0.2, 0.2];\n// Shadow color\ncolor_shadow = [0.4, 0.5, 0.6];\n\nmodule chimecho() {\n    // Main body - spherical head\n    translate([0, 0, 15]) {\n        color(color_body) {\n            sphere(d = 25);\n        }\n    }\n    \n    // Bottom bell part\n    translate([0, 0, 5]) {\n        color(color_bell) {\n            cylinder(h = 12, d1 = 20, d2 = 15);\n            translate([0, 0, 12]) {\n                sphere(d = 15);\n            }\n        }\n    }\n    \n    // Ears - two curved tubes\n    // Left ear\n    translate([-12, 0, 30]) {\n        rotate([0, 30, -15]) {\n            color(color_body) {\n                for (i = [0:4]) {\n                    translate([0, 0, i * 2.5]) {\n                        sphere(d = 3.5);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Right ear\n    translate([12, 0, 30]) {\n        rotate([0, 30, 15]) {\n            color(color_body) {\n                for (i = [0:4]) {\n                    translate([0, 0, i * 2.5]) {\n                        sphere(d = 3.5);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Eyes\n    // Left eye\n    translate([-6, -10, 20]) {\n        color(color_eye) {\n            sphere(d = 4);\n        }\n        // Eye highlight\n        translate([1, -1, 1.5]) {\n            color([1, 1, 1]) {\n                sphere(d = 1.2);\n            }\n        }\n    }\n    \n    // Right eye\n    translate([6, -10, 20]) {\n        color(color_eye) {\n            sphere(d = 4);\n        }\n        // Eye highlight\n        translate([-1, -1, 1.5]) {\n            color([1, 1, 1]) {\n                sphere(d = 1.2);\n            }\n        }\n    }\n    \n    // Mouth\n    translate([0, -12, 15]) {\n        color([0.2, 0.2, 0.2]) {\n            scale([1, 0.3, 0.3]) {\n                sphere(d = 3);\n            }\n        }\n    }\n    \n    // Cheeks/whiskers\n    for (i = [0:2]) {\n        angle = 120 * i;\n        // Left whiskers\n        translate([-8, -8, 17]) {\n            rotate([0, 0, angle]) {\n                color(color_body) {\n                    cylinder(h = 6, d = 1.5);\n                }\n            }\n        }\n        \n        // Right whiskers\n        translate([8, -8, 17]) {\n            rotate([0, 0, -angle]) {\n                color(color_body) {\n                    cylinder(h = 6, d = 1.5);\n                }\n            }\n        }\n    }\n    \n    // Tail ribbon\n    translate([0, 15, 10]) {\n        for (i = [0:8]) {\n            angle = i * 20;\n            translate([0, i * 3, 0]) {\n                rotate([0, 0, angle]) {\n                    color(color_body) {\n                        sphere(d = 2.5);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Red markings on ears\n    translate([-15, 0, 35]) {\n        rotate([0, 30, -15]) {\n            color(color_eye) {\n                sphere(d = 2);\n            }\n        }\n    }\n    \n    translate([15, 0, 35]) {\n        rotate([0, 30, 15]) {\n            color(color_eye) {\n                sphere(d = 2);\n            }\n        }\n    }\n    \n    // Shadow base for stability\n    translate([0, 0, -3]) {\n        color(color_shadow) {\n            cylinder(h = 3, d = 30);\n        }\n    }\n}\n\n// Create the model\nchimecho();",
    "renders": true
  },
  {
    "pokemon": "absol",
    "openscad_code": "// Absol Pokemon - Realistic Style\n// Size: 80mm height, 3D printable\n\n// Color definitions\n$fn = 32;\n\nmodule absol() {\n    // Main body\n    color(\"white\") {\n        // Torso\n        translate([0, 0, 20]) {\n            scale([1.2, 0.8, 1.5]) \n                sphere(r=15);\n        }\n        \n        // Chest fur tuft\n        translate([0, 12, 25]) {\n            scale([0.8, 0.3, 1.2])\n                sphere(r=8);\n        }\n    }\n    \n    // Head\n    color(\"white\") {\n        translate([0, 20, 45]) {\n            scale([0.9, 0.7, 1.1])\n                sphere(r=12);\n        }\n    }\n    \n    // Snout\n    color(\"white\") {\n        translate([0, 28, 42]) {\n            scale([0.6, 0.8, 0.5])\n                sphere(r=8);\n        }\n    }\n    \n    // Scythe horn (left)\n    color(\"slateblue\") {\n        translate([-8, 15, 55]) {\n            rotate([0, -20, -30]) {\n                scale([0.5, 0.5, 1])\n                    cylinder(r1=3, r2=1, h=20);\n            }\n        }\n    }\n    \n    // Scythe horn (right)\n    color(\"slateblue\") {\n        translate([8, 15, 55]) {\n            rotate([0, -20, 30]) {\n                scale([0.5, 0.5, 1])\n                    cylinder(r1=3, r2=1, h=20);\n            }\n        }\n    }\n    \n    // Ear (left)\n    color(\"white\") {\n        translate([-12, 15, 52]) {\n            rotate([0, 0, -15]) {\n                scale([0.3, 1.5, 0.1])\n                    sphere(r=8);\n            }\n        }\n    }\n    \n    // Ear (right)\n    color(\"white\") {\n        translate([12, 15, 52]) {\n            rotate([0, 0, 15]) {\n                scale([0.3, 1.5, 0.1])\n                    sphere(r=8);\n            }\n        }\n    }\n    \n    // Eyes\n    color(\"red\") {\n        translate([-4, 28, 48]) sphere(r=1.5);\n        translate([4, 28, 48]) sphere(r=1.5);\n    }\n    \n    // Legs module\n    module leg(x, z) {\n        color(\"white\") {\n            translate([x, 0, z]) {\n                scale([0.4, 0.4, 1])\n                    cylinder(r=5, h=25);\n            }\n            \n            // Paw\n            translate([x, 0, z-12]) {\n                scale([1.2, 1, 0.8])\n                    sphere(r=5);\n            }\n        }\n        \n        // Claws\n        color(\"slateblue\") {\n            for(i=[-1, 0, 1]) {\n                translate([x+i*2, 0, z-15]) {\n                    rotate([0, 90, 0])\n                        cylinder(r=0.8, h=3);\n                }\n            }\n        }\n    }\n    \n    // Front legs\n    leg(-10, 20);\n    leg(10, 20);\n    \n    // Back legs\n    leg(-8, 5);\n    leg(8, 5);\n    \n    // Tail\n    color(\"white\") {\n        translate([0, -20, 25]) {\n            rotate([30, 0, 0]) {\n                scale([0.8, 0.8, 2])\n                    cylinder(r1=5, r2=0, h=30);\n            }\n        }\n    }\n    \n    // Tail scythe\n    color(\"slateblue\") {\n        translate([0, -35, 40]) {\n            rotate([0, 0, 0]) {\n                scale([0.3, 2, 0.1])\n                    sphere(r=10);\n            }\n        }\n    }\n    \n    // Fur crest on head\n    color(\"slateblue\") {\n        translate([0, 18, 58]) {\n            scale([1.5, 0.3, 0.8])\n                sphere(r=5);\n        }\n    }\n    \n    // Body markings\n    color(\"slateblue\") {\n        // Side markings\n        translate([-15, 0, 25]) {\n            scale([0.1, 1.5, 0.5])\n                sphere(r=8);\n        }\n        translate([15, 0, 25]) {\n            scale([0.1, 1.5, 0.5])\n                sphere(r=8);\n        }\n        \n        // Back marking\n        translate([0, -12, 30]) {\n            scale([1.2, 0.1, 0.8])\n                sphere(r=10);\n        }\n    }\n}\n\n// Create the model\nabsol();",
    "renders": true
  },
  {
    "pokemon": "wynaut",
    "openscad_code": "// Wynaut Pokemon - Realistic Style\n// 3D printable, medium complexity, ~80mm height\n\n$fn = 32;\near_angle = 30;\nbody_color = [0.95, 0.5, 0.55];  // Light pink\nmarking_color = [0.2, 0.2, 0.2];  // Black\neye_color = [0.8, 0.8, 0.9];  // Light blue\n\nmodule wynaut_body() {\n    // Main spherical body\n    color(body_color)\n    sphere(d = 60, $fn = 64);\n    \n    // Flatten bottom slightly for stability\n    translate([0, 0, -30])\n    difference() {\n        sphere(d = 60, $fn = 64);\n        translate([0, 0, -40])\n        cube([100, 100, 80], center = true);\n    }\n}\n\nmodule wynaut_ears() {\n    // Left ear\n    translate([-25, 0, 25])\n    rotate([0, ear_angle, 0])\n    color(body_color)\n    linear_extrude(height = 40, center = true, scale = 0.3)\n    circle(d = 20, $fn = 32);\n    \n    // Right ear\n    translate([25, 0, 25])\n    rotate([0, -ear_angle, 0])\n    color(body_color)\n    linear_extrude(height = 40, center = true, scale = 0.3)\n    circle(d = 20, $fn = 32);\n}\n\nmodule wynaut_face() {\n    // Eyes\n    translate([-12, -20, 10])\n    color(eye_color)\n    sphere(d = 12);\n    \n    translate([12, -20, 10])\n    color(eye_color)\n    sphere(d = 12);\n    \n    // Eye pupils\n    translate([-12, -25, 10])\n    color(marking_color)\n    sphere(d = 6);\n    \n    translate([12, -25, 10])\n    color(marking_color)\n    sphere(d = 6);\n    \n    // Mouth\n    translate([0, -28, -5])\n    color([0.4, 0.1, 0.1])\n    rotate([90, 0, 0])\n    cylinder(h = 2, r1 = 8, r2 = 6, $fn = 32);\n}\n\nmodule wynaut_markings() {\n    // Top marking pattern\n    translate([0, 0, 30])\n    color(marking_color)\n    rotate([90, 0, 0])\n    cylinder(h = 2, r = 8, $fn = 4);\n    \n    // Side markings\n    for(i = [0:1]) {\n        mirror([i, 0, 0])\n        translate([25, 0, 0])\n        color(marking_color)\n        cube([4, 15, 25], center = true);\n    }\n    \n    // Feet markings\n    for(x = [-15, 15])\n    for(y = [-15, 15]) {\n        translate([x, y, -28])\n        color(marking_color)\n        cube([8, 8, 3], center = true);\n    }\n}\n\nmodule wynaut_tail() {\n    // Flat tail base\n    translate([0, 28, -20])\n    color(body_color)\n    cube([35, 8, 25], center = true);\n    \n    // Tail markings\n    translate([0, 32, -15])\n    color(marking_color)\n    cube([25, 8, 3], center = true);\n}\n\n// Assembly\nwynaut_body();\nwynaut_ears();\nwynaut_face();\nwynaut_markings();\nwynaut_tail();",
    "renders": true
  },
  {
    "pokemon": "snorunt",
    "openscad_code": "// Realistic Snorunt Pokemon - Medium Complexity\n// Overall height: ~70mm, suitable for 3D printing\n\n// Main colors\n$snorunt_white = [1, 1, 1];\n$snorunt_orange = [1, 0.5, 0];\n$snorunt_blue = [0.3, 0.5, 1];\n$snorunt_black = [0.1, 0.1, 0.1];\n\nmodule body() {\n    color($snorunt_white)\n    union() {\n        // Main cone body\n        cylinder(h1=20, h2=30, r1=25, r2=15, $fn=64);\n        \n        // Bottom rounded base\n        translate([0, 0, -5])\n            sphere(d=50, $fn=64);\n    }\n}\n\nmodule head() {\n    color($snorunt_white)\n    translate([0, 0, 35])\n    union() {\n        // Main head sphere\n        sphere(d=45, $fn=64);\n        \n        // Hat base\n        translate([0, 0, 20])\n            cylinder(h=15, r1=18, r2=15, $fn=32);\n    }\n}\n\nmodule hat() {\n    color($snorunt_orange)\n    translate([0, 0, 55])\n    union() {\n        // Main hat cone\n        cylinder(h=25, r1=18, r2=5, $fn=32);\n        \n        // Hat rim\n        translate([0, 0, 5])\n            cylinder(h=3, r1=22, r2=22, $fn=32);\n    }\n}\n\nmodule eyes() {\n    color($snorunt_blue)\n    for(x=[-10, 10]) {\n        translate([x, 5, 30])\n            sphere(d=8, $fn=16);\n    }\n    \n    // Eye pupils\n    color($snorunt_black)\n    for(x=[-10, 10]) {\n        translate([x, 8, 30])\n            sphere(d=3, $fn=8);\n    }\n}\n\nmodule mouth() {\n    color($snorunt_black)\n    translate([0, 15, 25])\n        rotate([90, 0, 0])\n            cylinder(h=1, r1=3, r2=0, $fn=16);\n}\n\nmodule horns() {\n    color($snorunt_white)\n    for(angle=[0, 120, 240]) {\n        rotate([0, 0, angle])\n        translate([20, 0, 35])\n            rotate([0, 90, 0])\n                cylinder(h=15, r1=8, r2=0, $fn=16);\n    }\n}\n\nmodule back_pattern() {\n    color($snorunt_orange)\n    translate([0, -20, 15])\n        scale([1, 0.3, 1])\n            sphere(d=20, $fn=32);\n}\n\nmodule arms() {\n    color($snorunt_white)\n    for(x=[-20, 20]) {\n        translate([x, 15, 10])\n            rotate([0, 0, x/2])\n                scale([0.7, 0.7, 1])\n                    sphere(d=15, $fn=16);\n    }\n}\n\nmodule feet() {\n    color($snorunt_white)\n    for(x=[-15, 15]) {\n        translate([x, 0, -10])\n            sphere(d=12, $fn=16);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    hat();\n    eyes();\n    mouth();\n    horns();\n    back_pattern();\n    arms();\n    feet();\n}",
    "renders": true
  },
  {
    "pokemon": "glalie",
    "openscad_code": "// Glalie (medium-complexity realistic style)\n// Overall height ≈ 70 mm\n\n// Base color palette\nglalie_gray = [0.75, 0.78, 0.80];\neye_blue  = [0.10, 0.20, 0.50];\nice_blue  = [0.65, 0.85, 0.95];\nblack     = [0.15, 0.15, 0.15];\n\n// Main body sphere\nmodule body() {\n    color(glalie_gray)\n    difference() {\n        sphere(d = 45, $fn = 64);\n        // Flatten bottom slightly for print stability\n        translate([0, 0, -25])\n            cube([60, 60, 15], center = true);\n    }\n}\n\n// Eye module with socket and eyeball\nmodule eye(pos) {\n    translate(pos) {\n        // Eye socket cavity\n        color(ice_blue)\n        difference() {\n            sphere(d = 13, $fn = 32);\n            sphere(d = 11, $fn = 32);\n        }\n        // Eyeball\n        translate([0, 0, 2])\n            color(eye_blue)\n            sphere(d = 8, $fn = 32);\n        // Pupil\n        translate([0, 0, 4])\n            color(black)\n            sphere(d = 4, $fn = 16);\n    }\n}\n\n// Horn module (single horn)\nmodule horn(pos, angle) {\n    translate(pos) {\n        rotate([0, angle, 0]) {\n            color(glalie_gray)\n            cylinder(h = 18, d1 = 10, d2 = 4, $fn = 8);\n        }\n    }\n}\n\n// Icicle fang module\nmodule fang(pos, angle) {\n    translate(pos) {\n        rotate([angle, 0, 0]) {\n            color(ice_blue)\n            cylinder(h = 10, d1 = 2, d2 = 4, $fn = 6);\n        }\n    }\n}\n\n// Back crest ridges\nmodule crest() {\n    color(glalie_gray)\n    for (a = [0, 30, 60, 90]) {\n        rotate([0, a, 0])\n            translate([0, 0, 22])\n                cube([6, 2, 12], center = true);\n    }\n}\n\n// Ice spikes\nmodule spikes() {\n    color(ice_blue)\n    for (i = [0:5]) {\n        rotate([0, i * 60, 0])\n            translate([0, 0, 20])\n                cylinder(h = 8, d1 = 2, d2 = 5, $fn = 6);\n    }\n}\n\n// Jaw line detail\nmodule jaw_line() {\n    color(glalie_gray)\n    difference() {\n        sphere(d = 46, $fn = 64);\n        sphere(d = 44, $fn = 64);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    \n    // Eyes\n    eye([-12, 17, 5]);\n    eye([12, 17, 5]);\n    \n    // Horns\n    horn([0, 0, 22], 0);      // Top\n    horn([-8, -15, 10], 30);  // Left\n    horn([8, -15, 10], -30);  // Right\n    \n    // Crest on back\n    crest();\n    \n    // Spikes around body\n    spikes();\n    \n    // Jaw line\n    translate([0, 0, -10])\n        jaw_line();\n    \n    // Fangs\n    fang([-5, 10, -18], 90);\n    fang([5, 10, -18], 90);\n    fang([0, 8, -19], 90);\n}",
    "renders": true
  },
  {
    "pokemon": "spheal",
    "openscad_code": "// Spheal Pokemon - Realistic Style\n// Size: ~60mm diameter\n\n// Colors\n$fn = 32;\nwall_thickness = 1.5;\n\nmodule spheal_body() {\n    color(\"LightBlue\") {\n        // Main spherical body\n        sphere(d = 60);\n        \n        // Underbelly protrusion\n        translate([0, 0, -28])\n            scale([1.1, 1.1, 0.7])\n                sphere(d = 50);\n    }\n}\n\nmodule spheal_face() {\n    // White face mask\n    color(\"White\") {\n        translate([0, 20, 20])\n            scale([0.9, 0.8, 0.6])\n                sphere(d = 40);\n    }\n    \n    // Eyes\n    color(\"Black\") {\n        // Left eye\n        translate([-12, 25, 25])\n            sphere(d = 6);\n        \n        // Right eye\n        translate([12, 25, 25])\n            sphere(d = 6);\n    }\n    \n    // Eye shine\n    color(\"White\") {\n        translate([-10, 27, 27])\n            sphere(d = 2);\n        \n        translate([14, 27, 27])\n            sphere(d = 2);\n    }\n    \n    // Nose\n    color(\"Black\") {\n        translate([0, 32, 15])\n            rotate([90, 0, 0])\n                cylinder(h = 5, d1 = 3, d2 = 6);\n    }\n    \n    // Mouth\n    color(\"Black\")\n        translate([0, 35, 5])\n            rotate([90, 0, 0])\n                cylinder(h = 0.5, d = 12);\n}\n\nmodule spheal_ears() {\n    color(\"LightBlue\") {\n        // Left ear\n        translate([-25, 0, 25])\n            rotate([0, 15, -30])\n                scale([1, 0.7, 2])\n                    sphere(d = 15);\n        \n        // Right ear\n        translate([25, 0, 25])\n            rotate([0, 15, 30])\n                scale([1, 0.7, 2])\n                    sphere(d = 15);\n    }\n}\n\nmodule spheal_flippers() {\n    color(\"LightBlue\") {\n        // Front flippers\n        for(side = [-1, 1]) {\n            translate([side * 25, -5, -15])\n                rotate([0, side * -20, 0])\n                    scale([0.8, 2, 0.4])\n                        sphere(d = 20);\n        }\n        \n        // Tail flippers\n        translate([0, -30, -10])\n            rotate([0, 0, 0])\n                scale([1.2, 2, 0.3])\n                    sphere(d = 25);\n    }\n}\n\nmodule spheal_markings() {\n    color(\"White\") {\n        // Spots pattern\n        for(pos = [[-20, 10, 20], [20, 10, 20], [0, -10, 15], [-15, -20, 10], [15, -20, 10]]) {\n            translate(pos)\n                sphere(d = 8);\n        }\n    }\n}\n\nmodule spheal_whiskers() {\n    color(\"Black\")\n        for(side = [-1, 1]) {\n            // Upper whiskers\n            translate([side * 20, 30, 15])\n                rotate([0, side * 15, -10])\n                    cylinder(h = 12, d = 0.8);\n            \n            // Lower whiskers\n            translate([side * 20, 30, 10])\n                rotate([0, side * 15, 10])\n                    cylinder(h = 12, d = 0.8);\n        }\n}\n\n// Assembly\nunion() {\n    spheal_body();\n    spheal_face();\n    spheal_ears();\n    spheal_flippers();\n    spheal_markings();\n    spheal_whiskers();\n}",
    "renders": true
  },
  {
    "pokemon": "sealeo",
    "openscad_code": "// Sealeo Pokemon - Realistic Style (Medium Complexity)\n// 3D printable, ~70mm tall\n\n$fn = 32;\n\nmodule sealeo() {\n    // Main body - ice blue sphere\n    color(\"lightblue\") \n    translate([0, 0, 20]) \n    scale([1.2, 1, 1]) \n    sphere(d=50);\n    \n    // Belly - white\n    color(\"white\") \n    translate([0, 0, 15]) \n    scale([1.3, 0.9, 0.7]) \n    sphere(d=45);\n    \n    // Head - ice blue\n    color(\"lightblue\") \n    translate([0, -15, 45]) \n    scale([1, 0.9, 1.1]) \n    sphere(d=40);\n    \n    // Snout\n    color(\"lightblue\") \n    translate([0, -25, 42]) \n    rotate([15, 0, 0]) \n    scale([0.6, 0.5, 0.7]) \n    cylinder(h=15, d1=20, d2=15);\n    \n    // Nose - black\n    color(\"black\") \n    translate([0, -30, 38]) \n    sphere(d=5);\n    \n    // Eyes\n    for(x=[-12, 12]) {\n        color(\"black\") \n        translate([x, -20, 48]) \n        scale([1, 1.2, 0.8]) \n        sphere(d=8);\n        \n        color(\"white\") \n        translate([x+2, -19, 50]) \n        sphere(d=3);\n    }\n    \n    // Whiskers\n    for(x=[-25, 25]) {\n        color(\"white\") \n        translate([x, -18, 42]) \n        rotate([0, 0, x > 0 ? 30 : -30]) \n        cylinder(h=15, d=2);\n    }\n    \n    // Ears\n    module ear(tx) {\n        color(\"lightblue\") \n        translate([tx, 0, 55]) \n        rotate([0, 0, tx > 0 ? -20 : 20]) \n        scale([0.8, 0.3, 1.5]) \n        sphere(d=15);\n    }\n    ear(18);\n    ear(-18);\n    \n    // Front flippers\n    module flipper(tx) {\n        color(\"lightblue\") \n        translate([tx, 0, 15]) \n        rotate([0, 0, tx > 0 ? 45 : -45]) \n        scale([1.2, 0.4, 0.6]) \n        cylinder(h=25, d1=15, d2=10);\n    }\n    flipper(25);\n    flipper(-25);\n    \n    // Rear flippers\n    module rear_flipper(tx) {\n        color(\"lightblue\") \n        translate([tx, 15, 5]) \n        rotate([0, 0, tx > 0 ? -30 : 30]) \n        scale([1, 0.3, 0.5]) \n        cylinder(h=20, d1=12, d2=8);\n    }\n    rear_flipper(15);\n    rear_flipper(-15);\n    \n    // Tail\n    color(\"lightblue\") \n    translate([0, 25, 15]) \n    rotate([0, 0, 0]) \n    scale([1.5, 0.5, 0.3]) \n    sphere(d=20);\n    \n    // Spots pattern\n    for(pos=[[-15, 5, 35], [15, 10, 30], [-10, -5, 25], [10, 15, 20]]) {\n        color(\"white\") \n        translate(pos) \n        scale([1, 1, 0.5]) \n        sphere(d=8);\n    }\n}\n\n// Base for stability\ncolor(\"lightgray\") \ntranslate([0, 0, -2]) \ncylinder(h=2, d=60);\n\nsealeo();",
    "renders": true
  },
  {
    "pokemon": "walrein",
    "openscad_code": "// Walrein Pokemon - Realistic Medium Complexity\n// Colors: Blue body, White belly, Yellow accents, Black details\n\n// Body dimensions\nbody_length = 60;\nbody_height = 35;\nbody_width = 30;\n\n// Overall scale\nscale = 1.2;\n\nmodule walrein_body() {\n    color(\"steelblue\") {\n        // Main body\n        translate([0, 0, 0])\n            scale([1, 0.8, 1])\n            sphere(d=body_width);\n        \n        // Extended torso\n        translate([body_length/3, 0, -5])\n            scale([1.5, 1, 0.8])\n            sphere(d=body_width);\n    }\n}\n\nmodule walrein_belly() {\n    color(\"white\") {\n        difference() {\n            // White belly patch\n            translate([0, 0, -body_height/2 + 5])\n                cube([body_length, body_width*1.2, 10], center=true);\n            \n            // Cut to curved shape\n            translate([0, 0, -body_height/2 + 15])\n                sphere(d=body_width*1.3);\n        }\n    }\n}\n\nmodule walrein_head() {\n    color(\"steelblue\") {\n        // Head sphere\n        translate([-body_length/2, 0, body_height/2])\n            sphere(d=body_width*0.9);\n        \n        // Snout\n        translate([-body_length/2 - 10, 0, body_height/2 - 5])\n            rotate([0, -20, 0])\n            cylinder(h=15, d1=body_width*0.7, d2=body_width*0.4);\n    }\n    \n    // White face mask\n    color(\"white\") {\n        translate([-body_length/2 - 5, 0, body_height/2 - 8])\n            sphere(d=body_width*0.6);\n    }\n}\n\nmodule walrein_tusks() {\n    color(\"ivory\") {\n        // Left tusk\n        translate([-body_length/2 - 12, 12, body_height/2 - 10])\n            rotate([30, 0, 30])\n            cylinder(h=25, d1=8, d2=5);\n        \n        // Right tusk\n        translate([-body_length/2 - 12, -12, body_height/2 - 10])\n            rotate([30, 0, -30])\n            cylinder(h=25, d1=8, d2=5);\n    }\n}\n\nmodule walrein_eyes() {\n    // Eye whites\n    color(\"white\") {\n        translate([-body_length/2 - 8, 8, body_height/2])\n            sphere(d=6);\n        translate([-body_length/2 - 8, -8, body_height/2])\n            sphere(d=6);\n    }\n    \n    // Pupils\n    color(\"black\") {\n        translate([-body_length/2 - 10, 8, body_height/2])\n            sphere(d=3);\n        translate([-body_length/2 - 10, -8, body_height/2])\n            sphere(d=3);\n    }\n}\n\nmodule walrein_nose() {\n    color(\"black\") {\n        translate([-body_length/2 - 18, 0, body_height/2 - 5])\n            sphere(d=4);\n    }\n}\n\nmodule walrein_whiskers() {\n    color(\"black\") {\n        // Left whiskers\n        for(i = [1:3]) {\n            translate([-body_length/2 - 10, 12 + i*3, body_height/2 - 8])\n                rotate([0, 0, 45])\n                cylinder(h=8, d=0.5);\n        }\n        \n        // Right whiskers\n        for(i = [1:3]) {\n            translate([-body_length/2 - 10, -12 - i*3, body_height/2 - 8])\n                rotate([0, 0, -45])\n                cylinder(h=8, d=0.5);\n        }\n    }\n}\n\nmodule walrein_flippers() {\n    color(\"steelblue\") {\n        // Front flippers\n        translate([0, body_width/2, -body_height/2 + 10])\n            rotate([0, 0, 30])\n            scale([0.8, 2, 0.3])\n            sphere(d=15);\n        \n        translate([0, -body_width/2, -body_height/2 + 10])\n            rotate([0, 0, -30])\n            scale([0.8, 2, 0.3])\n            sphere(d=15);\n        \n        // Rear flippers\n        translate([body_length/2, body_width/3, -body_height/2 + 5])\n            rotate([0, 20, 45])\n            scale([1, 1.5, 0.3])\n            sphere(d=12);\n        \n        translate([body_length/2, -body_width/3, -body_height/2 + 5])\n            rotate([0, 20, -45])\n            scale([1, 1.5, 0.3])\n            sphere(d=12);\n    }\n}\n\nmodule walrein_tail() {\n    color(\"steelblue\") {\n        // Tail base\n        translate([body_length/2 + 5, 0, 0])\n            rotate([0, 0, 0])\n            sphere(d=body_width*0.7);\n        \n        // Tail flukes\n        translate([body_length/2 + 15, 8, 0])\n            rotate([0, 0, 45])\n            scale([0.5, 1.5, 0.2])\n            sphere(d=15);\n        \n        translate([body_length/2 + 15, -8, 0])\n            rotate([0, 0, -45])\n            scale([0.5, 1.5, 0.2])\n            sphere(d=15);\n    }\n}\n\nmodule walrein_markings() {\n    // Yellow circles on sides\n    color(\"gold\") {\n        translate([0, body_width/2 + 2, 0])\n            sphere(d=8);\n        translate([0, -body_width/2 - 2, 0])\n            sphere(d=8);\n    }\n}\n\n// Assemble the complete Walrein\nscale([scale, scale, scale]) {\n    union() {\n        walrein_body();\n        walrein_belly();\n        walrein_head();\n        walrein_tusks();\n        walrein_eyes();\n        walrein_nose();\n        walrein_whiskers();\n        walrein_flippers();\n        walrein_tail();\n        walrein_markings();\n    }\n}",
    "renders": true
  },
  {
    "pokemon": "clamperl",
    "openscad_code": "// Clamperl Pokemon - Realistic Style\n// Medium complexity 3D printable model\n\n$fn = 32;\nscale_factor = 0.5;\n\nmodule clamperl_shell() {\n    // Main shell halves\n    difference() {\n        // Outer shell\n        union() {\n            // Top shell half\n            translate([0, 0, 15 * scale_factor]) {\n                scale([1.2 * scale_factor, 1 * scale_factor, 0.8 * scale_factor]) {\n                    sphere(r = 25);\n                }\n            }\n            // Bottom shell half\n            translate([0, 0, -15 * scale_factor]) {\n                scale([1.2 * scale_factor, 1 * scale_factor, 0.8 * scale_factor]) {\n                    sphere(r = 25);\n                }\n            }\n        }\n        \n        // Hollow out the shell\n        difference() {\n            union() {\n                translate([0, 0, 15 * scale_factor]) {\n                    scale([1.1 * scale_factor, 0.9 * scale_factor, 0.7 * scale_factor]) {\n                        sphere(r = 25);\n                    }\n                }\n                translate([0, 0, -15 * scale_factor]) {\n                    scale([1.1 * scale_factor, 0.9 * scale_factor, 0.7 * scale_factor]) {\n                        sphere(r = 25);\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule shell_ridges() {\n    // Concentric ridges on shell\n    color(\"peru\") {\n        for(i = [1:5]) {\n            translate([0, 0, 15 * scale_factor]) {\n                scale([1.2 * scale_factor - i * 0.08, 1 * scale_factor - i * 0.08, 0.05]) {\n                    sphere(r = 25 - i * 3);\n                }\n            }\n            translate([0, 0, -15 * scale_factor]) {\n                scale([1.2 * scale_factor - i * 0.08, 1 * scale_factor - i * 0.08, 0.05]) {\n                    sphere(r = 25 - i * 3);\n                }\n            }\n        }\n    }\n}\n\nmodule pearl_body() {\n    // Inner pearl-like body\n    color(\"ivory\") {\n        translate([0, 0, 0]) {\n            sphere(r = 10 * scale_factor);\n        }\n        \n        // Face details\n        translate([5 * scale_factor, -8 * scale_factor, 5 * scale_factor]) {\n            color(\"black\") sphere(r = 2 * scale_factor);\n        }\n        translate([-5 * scale_factor, -8 * scale_factor, 5 * scale_factor]) {\n            color(\"black\") sphere(r = 2 * scale_factor);\n        }\n        \n        // Pupils\n        translate([6 * scale_factor, -8.5 * scale_factor, 6 * scale_factor]) {\n            color(\"white\") sphere(r = 0.7 * scale_factor);\n        }\n        translate([-4 * scale_factor, -8.5 * scale_factor, 6 * scale_factor]) {\n            color(\"white\") sphere(r = 0.7 * scale_factor);\n        }\n        \n        // Mouth\n        translate([0, -10 * scale_factor, 2 * scale_factor]) {\n            rotate([90, 0, 0]) {\n                cylinder(h = 0.5 * scale_factor, r = 2 * scale_factor, $fn = 16);\n            }\n        }\n    }\n}\n\nmodule shell_spikes() {\n    // Spikes along shell edge\n    color(\"saddlebrown\") {\n        for(i = [0:15]) {\n            rotate([0, 0, i * 22.5]) {\n                translate([28 * scale_factor, 0, 0]) {\n                    rotate([90, 0, 0]) {\n                        cylinder(h = 6 * scale_factor, r1 = 2 * scale_factor, r2 = 1 * scale_factor);\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule clamperl_complete() {\n    // Assemble all parts\n    union() {\n        clamperl_shell();\n        shell_ridges();\n        pearl_body();\n        shell_spikes();\n    }\n}\n\n// Render the complete model\nclamperl_complete();",
    "renders": true
  },
  {
    "pokemon": "huntail",
    "openscad_code": "// Huntail Pokemon - Realistic Style, Medium Complexity\n// Size: ~80mm length\n\n// Colors\ncolor_body = [0.2, 0.3, 0.5];      // Dark blue\ncolor_belly = [0.7, 0.8, 0.9];     // Light blue-gray\ncolor_spikes = [0.9, 0.9, 0.9];    // White\ncolor_eyes = [1, 0.2, 0.2];        // Red\ncolor_teeth = [0.95, 0.95, 0.9];   // Off-white\n\n// Main body module\nmodule huntail_body() {\n    // Torso segment\n    color(color_body)\n    union() {\n        // Main body tube\n        rotate([0, 90, 0])\n            cylinder(h=50, r1=12, r2=8, $fn=32);\n        \n        // Dorsal fin\n        translate([0, 0, 12])\n            rotate([90, 0, 0])\n                cylinder(h=15, r1=8, r2=0, $fn=3);\n        \n        // Tail segments\n        for(i = [1:3]) {\n            translate([50 + i*15, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h=15, r1=12-i*2.5, r2=10-i*2.5, $fn=32);\n        }\n        \n        // Tail fin\n        translate([100, 0, 0])\n            rotate([0, 90, 0])\n                difference() {\n                    cylinder(h=20, r1=10, r2=0, $fn=3);\n                    translate([10, 0, 0])\n                        cube([20, 20, 20], center=true);\n                }\n    }\n}\n\n// Belly pattern\nmodule huntail_belly() {\n    color(color_belly)\n    translate([0, 0, -8])\n        rotate([0, 90, 0])\n            cylinder(h=50, r1=11, r2=7, $fn=32);\n}\n\n// Head module\nmodule huntail_head() {\n    color(color_body)\n    union() {\n        // Main head\n        translate([-25, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=30, r1=10, r2=12, $fn=32);\n        \n        // Jaw\n        translate([-25, 0, -8])\n            rotate([30, 0, 0])\n                cube([25, 15, 8]);\n        \n        // Eye stalks\n        for(side = [-1, 1]) {\n            translate([-30, side*12, 5])\n                rotate([0, 0, side*30])\n                    cylinder(h=15, r1=4, r2=2, $fn=16);\n        }\n    }\n}\n\n// Eyes module\nmodule huntail_eyes() {\n    color(color_eyes)\n    for(side = [-1, 1]) {\n        translate([-30, side*12, 5])\n            rotate([0, 0, side*30])\n                translate([0, 0, 15])\n                    sphere(r=3, $fn=16);\n    }\n}\n\n// Teeth module\nmodule huntail_teeth() {\n    color(color_teeth)\n    for(i = [0:3]) {\n        translate([-25 - i*5, 0, -8])\n            cube([2, 1, 4]);\n    }\n}\n\n// Dorsal spikes\nmodule huntail_spikes() {\n    color(color_spikes)\n    for(i = [0:4]) {\n        translate([i*12 - 10, 0, 15])\n            rotate([0, 0, 0])\n                cylinder(h=8, r1=2, r2=0, $fn=6);\n    }\n}\n\n// Side fins\nmodule huntail_fins() {\n    color(color_body)\n    for(side = [-1, 1]) {\n        translate([10, side*12, -2])\n            rotate([0, 0, side*45])\n                difference() {\n                    cube([15, 8, 2]);\n                    translate([0, 4, 0])\n                        cylinder(h=3, r1=15, r2=0, $fn=3);\n                }\n    }\n}\n\n// Main assembly\nunion() {\n    // Scale to 80mm length\n    scale(0.8)\n    union() {\n        huntail_body();\n        huntail_belly();\n        huntail_head();\n        huntail_eyes();\n        huntail_teeth();\n        huntail_spikes();\n        huntail_fins();\n    }\n}",
    "renders": true
  },
  {
    "pokemon": "gorebyss",
    "openscad_code": "// Gorebyss - OpenSCAD Medium Complexity Model\n// Realistic style, 3D printable\n\n// Main color\ncolor([0.91, 0.49, 0.76])  // Pink color\n\n// Body parameters\nbody_length = 80;\nbody_diameter = 12;\n\n// Head parameters\nhead_length = 20;\nhead_diameter = 15;\n\n// Tail parameters\ntail_length = 30;\ntail_diameter = 8;\n\n// Fin parameters\nfin_length = 25;\nfin_width = 8;\nfin_thickness = 2;\n\n// Eye parameters\neye_size = 3;\n\n// Mouth parameters\nmouth_length = 5;\nmouth_diameter = 2;\n\n// Gorebyss body\nmodule gorebyss_body() {\n    // Main body - elongated pink tube\n    cylinder(h=body_length, d1=body_diameter, d2=body_diameter*0.8, center=false);\n    \n    // Head\n    translate([0, 0, body_length]) {\n        cylinder(h=head_length, d1=head_diameter, d2=head_diameter*0.7, center=false);\n    }\n    \n    // Tail\n    translate([0, 0, -tail_length]) {\n        cylinder(h=tail_length, d1=tail_diameter*0.8, d2=tail_diameter, center=false);\n    }\n}\n\n// Gorebyss fins\nmodule gorebyss_fins() {\n    // Left fin\n    translate([body_diameter/2 + fin_width/2, 0, body_length*0.7]) {\n        rotate([0, 90, 0]) {\n            cube([fin_length, fin_width, fin_thickness], center=true);\n        }\n    }\n    \n    // Right fin\n    translate([-body_diameter/2 - fin_width/2, 0, body_length*0.7]) {\n        rotate([0, -90, 0]) {\n            cube([fin_length, fin_width, fin_thickness], center=true);\n        }\n    }\n    \n    // Dorsal fin\n    translate([0, body_diameter/2 + fin_width/2, body_length*0.6]) {\n        rotate([-90, 0, 0]) {\n            cube([fin_length*0.7, fin_width*0.7, fin_thickness], center=true);\n        }\n    }\n}\n\n// Gorebyss face\nmodule gorebyss_face() {\n    // Eyes - blue\n    color([0.2, 0.6, 0.9]) {\n        // Left eye\n        translate([head_diameter/3, head_diameter/3, body_length + head_length - 5]) {\n            sphere(d=eye_size);\n        }\n        \n        // Right eye\n        translate([-head_diameter/3, head_diameter/3, body_length + head_length - 5]) {\n            sphere(d=eye_size);\n        }\n    }\n    \n    // Mouth - small tube\n    translate([0, head_diameter/2, body_length + head_length - 3]) {\n        rotate([90, 0, 0]) {\n            cylinder(h=mouth_length, d=mouth_diameter, center=false);\n        }\n    }\n}\n\n// Gorebyss tail details\nmodule gorebyss_tail_details() {\n    // Tail segments\n    for(i=[1:3]) {\n        translate([0, 0, -i*tail_length/4]) {\n            rotate([0, 0, i*30]) {\n                scale([0.8, 0.8, 0.2]) {\n                    sphere(d=tail_diameter*1.2);\n                }\n            }\n        }\n    }\n    \n    // Tail tip\n    translate([0, 0, -tail_length - 5]) {\n        sphere(d=tail_diameter*1.2);\n    }\n}\n\n// Gorebyss body patterns\nmodule gorebyss_patterns() {\n    color([0.85, 0.4, 0.7]) {\n        // Body stripes\n        for(i=[1:4]) {\n            translate([0, 0, i*body_length/5]) {\n                scale([1.1, 1.1, 0.3]) {\n                    sphere(d=body_diameter*1.1);\n                }\n            }\n        }\n        \n        // Head pattern\n        translate([0, 0, body_length + head_length/2]) {\n            scale([1, 1, 0.5]) {\n                sphere(d=head_diameter*1.1);\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    gorebyss_body();\n    gorebyss_fins();\n    gorebyss_face();\n    gorebyss_tail_details();\n    gorebyss_patterns();\n}",
    "renders": true
  },
  {
    "pokemon": "relicanth",
    "openscad_code": "// Relicanth Pokemon - Medium complexity realistic style\n// Size: ~80mm length, 3D printable\n\n// Main color definitions\nrock_color = [0.4, 0.35, 0.3];      // Rocky body\naccent_color = [0.7, 0.6, 0.5];     // Lighter rock accents\neye_color = [0.9, 0.1, 0.1];        // Red eyes\nmarking_color = [0.2, 0.15, 0.1];   // Dark markings\n\n$fn = 32;  // Smooth curves\n\n// Main body module\nmodule relicanth_body() {\n    union() {\n        // Central body - elongated oval\n        color(rock_color)\n        scale([1.2, 0.8, 0.6])\n        sphere(20);\n        \n        // Head extension with forehead ridge\n        translate([25, 0, 5])\n        color(rock_color)\n        scale([0.8, 0.7, 0.5])\n        sphere(18);\n        \n        // Tail section\n        translate([-25, 0, 0])\n        color(rock_color)\n        scale([0.6, 0.8, 0.4])\n        sphere(15);\n    }\n}\n\n// Rocky armor plates on back\nmodule armor_plates() {\n    for(i = [-1:1]) {\n        translate([i * 12, 0, 15])\n        color(accent_color)\n        scale([1.2, 0.8, 0.3])\n        sphere(8);\n    }\n    \n    // Larger central plate\n    translate([0, 0, 18])\n    color(rock_color)\n    scale([1.5, 1, 0.4])\n    sphere(10);\n}\n\n// Side fins - triangular with rocky texture\nmodule side_fin(side) {\n    translate([5, side * 15, -5])\n    rotate([0, 0, side * 15])\n    color(rock_color)\n    union() {\n        // Main fin structure\n        scale([0.8, 1.5, 0.3])\n        sphere(8);\n        \n        // Fin rays\n        for(i = [-1, 0, 1]) {\n            translate([i * 3, -8, 0])\n            color(accent_color)\n            rotate([90, 0, 0])\n            cylinder(h=12, r=1.5);\n        }\n    }\n}\n\n// Tail fin - fan shape\nmodule tail_fin() {\n    translate([-35, 0, 0])\n    color(rock_color)\n    rotate([0, 0, 180])\n    union() {\n        // Central tail piece\n        scale([0.8, 0.5, 0.3])\n        sphere(12);\n        \n        // Tail segments\n        for(i = [0:2]) {\n            rotate([0, 0, -30 + i * 30])\n            translate([-5, 0, 0])\n            color(rock_color)\n            scale([0.6, 0.4, 0.2])\n            sphere(8);\n        }\n    }\n}\n\n// Eyes with rocky brow\nmodule eyes() {\n    // Left eye\n    translate([20, 8, 10])\n    union() {\n        // Eye socket\n        color(rock_color)\n        difference() {\n            sphere(6);\n            translate([2, 0, 0])\n            sphere(5.5);\n        }\n        \n        // Eye\n        translate([3, 0, 0])\n        color(eye_color)\n        sphere(3);\n    }\n    \n    // Right eye - mirrored\n    translate([20, -8, 10])\n    mirror([0, 1, 0])\n    union() {\n        color(rock_color)\n        difference() {\n            sphere(6);\n            translate([2, 0, 0])\n            sphere(5.5);\n        }\n        \n        translate([3, 0, 0])\n        color(eye_color)\n        sphere(3);\n    }\n}\n\n// Rocky markings pattern\nmodule markings() {\n    // Dark spots on body\n    for(pos = [[15, 8, 8], [0, 10, 12], [-15, 5, 10], [-10, -8, 8]]) {\n        translate(pos)\n        color(marking_color)\n        scale([1, 0.7, 0.3])\n        sphere(3);\n    }\n}\n\n// Pectoral fins\nmodule pectoral_fin(side) {\n    translate([5, side * 18, -8])\n    rotate([0, 0, side * 20])\n    color(rock_color)\n    union() {\n        // Base\n        scale([1, 1.2, 0.4])\n        sphere(6);\n        \n        // Fin extension\n        translate([0, side * 8, -2])\n        rotate([10, 0, 0])\n        scale([0.8, 0.6, 0.2])\n        sphere(5);\n    }\n}\n\n// Mouth - small opening\nmodule mouth() {\n    translate([28, 0, 2])\n    rotate([0, -10, 0])\n    difference() {\n        cube([8, 12, 4], center=true);\n        translate([2, 0, 0])\n        cube([10, 10, 3], center=true);\n    }\n}\n\n// Assemble the complete relicanth\nunion() {\n    relicanth_body();\n    armor_plates();\n    tail_fin();\n    side_fin(1);\n    side_fin(-1);\n    pectoral_fin(1);\n    pectoral_fin(-1);\n    eyes();\n    markings();\n    mouth();\n}\n\n// Add support base for 3D printing\ntranslate([0, 0, -15])\ncolor(rock_color)\nscale([1.5, 1, 0.5])\ncylinder(h=3, r=25);",
    "renders": true
  },
  {
    "pokemon": "luvdisc",
    "openscad_code": "// Luvdisc - Realistic Medium Complexity\n// Heart-shaped Water-type Pokemon\n// Size: ~80mm wide, 3D printable\n\n// Color constants\n$fa = 2;\n$fs = 0.5;\n\n// Main body module\nmodule luvdisc_body() {\n    // Heart shape base\n    difference() {\n        union() {\n            // Left lobe\n            translate([-20, 0, 0]) \n                scale([1, 1.2, 0.6]) \n                sphere(r=25);\n            \n            // Right lobe  \n            translate([20, 0, 0]) \n                scale([1, 1.2, 0.6]) \n                sphere(r=25);\n                \n            // Bottom point\n            translate([0, -35, 0]) \n                scale([1.2, 2, 0.8])\n                cylinder(r1=20, r2=5, h=30);\n        }\n        \n        // Carve center\n        translate([0, -15, -5]) \n            cube([80, 60, 15], center=true);\n    }\n}\n\n// Dorsal fin detail\nmodule dorsal_fin() {\n    translate([0, 15, 8]) {\n        rotate([90, 0, 0]) {\n            color(\"lightblue\") {\n                // Main fin\n                scale([1, 0.3, 1]) \n                    cylinder(r1=15, r2=8, h=12);\n                \n                // Fin ridges\n                for(i = [-1:1]) {\n                    translate([i*5, 0, 3]) \n                        scale([0.2, 1, 1]) \n                        cube([3, 8, 6]);\n                }\n            }\n        }\n    }\n}\n\n// Tail fin\nmodule tail_fin() {\n    translate([0, -45, 0]) {\n        color(\"lightblue\") {\n            // Left tail\n            rotate([0, 0, -30]) {\n                scale([0.5, 1.5, 0.2])\n                translate([-10, -10, 0])\n                    sphere(r=15);\n            }\n            \n            // Right tail\n            rotate([0, 0, 30]) {\n                scale([0.5, 1.5, 0.2])\n                translate([10, -10, 0])\n                    sphere(r=15);\n            }\n        }\n    }\n}\n\n// Eye details\nmodule eyes() {\n    // Left eye\n    translate([-12, 15, 10]) {\n        color(\"black\") \n            sphere(r=3);\n        color(\"white\") \n            translate([1, 1, 2]) \n            sphere(r=1);\n    }\n    \n    // Right eye\n    translate([12, 15, 10]) {\n        color(\"black\") \n            sphere(r=3);\n        color(\"white\") \n            translate([1, 1, 2]) \n            sphere(r=1);\n    }\n}\n\n// Mouth\nmodule mouth() {\n    translate([0, 8, 8]) {\n        rotate([90, 0, 0]) {\n            color(\"red\") \n                cylinder(r1=3, r2=2, h=2);\n        }\n    }\n}\n\n// Scale pattern\nmodule scale_pattern() {\n    color(\"pink\") {\n        for(angle = [0:60:359]) {\n            rotate([0, 0, angle]) {\n                translate([0, -10, 6]) {\n                    scale([0.5, 0.3, 0.1]) \n                        sphere(r=5);\n                }\n            }\n        }\n    }\n}\n\n// Main assembly\ncolor(\"hotpink\") \n    luvdisc_body();\n\ncolor(\"lightblue\") {\n    dorsal_fin();\n    tail_fin();\n}\n\neyes();\nmouth();\nscale_pattern();\n\n// Optional base for printing\ntranslate([0, 0, -3]) {\n    color(\"white\") \n        cube([80, 80, 3], center=true);\n}",
    "renders": true
  },
  {
    "pokemon": "bagon",
    "openscad_code": "$fa = 1;\n$fs = 0.5;\nscale = 1.5;\n\n// Main body\ncolor(\"steelblue\")\ndifference() {\n    union() {\n        // Head\n        translate([0, 0, 15]) sphere(12);\n\n        // Snout\n        translate([0, -12, 12]) scale([1, 1.5, 0.8]) sphere(8);\n\n        // Neck\n        translate([0, 0, 5]) cylinder(h=10, r=8);\n\n        // Body\n        translate([0, 0, -5]) sphere(10);\n\n        // Tail\n        translate([0, 10, -8]) rotate([45, 0, 0]) cylinder(h=15, r1=6, r2=3);\n\n        // Arms\n        for (side = [-1, 1]) {\n            translate([side * 10, -5, 0]) rotate([0, 0, side * -30]) cylinder(h=12, r=3);\n            translate([side * 12, -5, -8]) sphere(4);\n        }\n\n        // Legs\n        for (side = [-1, 1]) {\n            translate([side * 7, 5, -10]) rotate([0, 0, side * 15]) cylinder(h=10, r=4);\n            translate([side * 8, 8, -18]) sphere(5);\n        }\n\n        // Wings\n        for (side = [-1, 1]) {\n            color(\"slategray\")\n            translate([side * 12, 0, 8]) rotate([0, side * 30, 0]) scale([1, 0.3, 0.8]) sphere(6);\n        }\n    }\n\n    // Eyes\n    for (side = [-1, 1]) {\n        color(\"white\")\n        translate([side * 5, -12, 15]) sphere(3);\n        color(\"black\")\n        translate([side * 5, -14, 15]) sphere(1.5);\n    }\n\n    // Nostrils\n    for (side = [-1, 1]) {\n        color(\"black\")\n        translate([side * 3, -18, 12]) sphere(1);\n    }\n\n    // Mouth\n    color(\"black\")\n    translate([0, -18, 8]) scale([1, 0.5, 0.3]) sphere(4);\n\n    // Gray helmet plates\n    color(\"slategray\")\n    translate([0, -5, 22]) sphere(4);\n    translate([0, 5, 22]) sphere(4);\n    translate([-8, 0, 20]) sphere(3);\n    translate([8, 0, 20]) sphere(3);\n    translate([0, -10, 18]) sphere(3);\n}",
    "renders": true
  },
  {
    "pokemon": "shelgon",
    "openscad_code": "// Shelgon Pokemon - Medium Complexity Realistic Style\n// Based on the dragon type Pokemon with shell armor\n\n$fn = 32;\n\n// Main colors\ncolor_body = [105/255, 105/255, 105/255]; // Dark gray\ncolor_shell = [200/255, 200/255, 200/255]; // Light gray\ncolor_accents = [255/255, 69/255, 0/255]; // Red-orange\ncolor_eyes = [255/255, 255/255, 255/255]; // White\n\n// Main module\nmodule shelgon() {\n    // Main shell body - egg-shaped\n    color(color_shell)\n    scale([1.2, 1, 1.1])\n    sphere(d = 50);\n    \n    // Front shell ridge\n    color(color_shell)\n    translate([0, 0, 15])\n    scale([0.8, 0.3, 0.5])\n    sphere(d = 40);\n    \n    // Back shell ridge\n    color(color_shell)\n    translate([0, 0, -20])\n    scale([1, 0.4, 0.4])\n    sphere(d = 30);\n    \n    // Shell segments\n    for (i = [0:5]) {\n        rotate([0, 0, i * 60])\n        translate([0, 22, 0])\n        color(color_shell)\n        scale([0.3, 0.1, 0.8])\n        sphere(d = 30);\n    }\n    \n    // Head visible from front\n    color(color_body)\n    translate([0, 28, 5])\n    sphere(d = 15);\n    \n    // Eyes\n    color(color_eyes)\n    translate([-5, 35, 8])\n    sphere(d = 3);\n    \n    color(color_eyes)\n    translate([5, 35, 8])\n    sphere(d = 3);\n    \n    // Eye pupils\n    color([0, 0, 0])\n    translate([-5, 37, 8])\n    sphere(d = 1.5);\n    \n    color([0, 0, 0])\n    translate([5, 37, 8])\n    sphere(d = 1.5);\n    \n    // Nose ridge\n    color(color_body)\n    translate([0, 36, 3])\n    rotate([90, 0, 0])\n    cylinder(h = 8, d1 = 4, d2 = 0);\n    \n    // Side armor plates\n    for (side = [-1, 1]) {\n        color(color_shell)\n        translate([side * 20, 10, 0])\n        scale([0.3, 0.8, 0.6])\n        sphere(d = 25);\n        \n        color(color_shell)\n        translate([side * 20, -10, 0])\n        scale([0.3, 0.8, 0.6])\n        sphere(d = 25);\n    }\n    \n    // Bottom armor plates\n    for (pos = [-15, 0, 15]) {\n        color(color_shell)\n        translate([pos, 0, -20])\n        scale([0.4, 0.6, 0.3])\n        sphere(d = 20);\n    }\n    \n    // Red-orange markings\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90])\n        translate([18, 0, 0])\n        color(color_accents)\n        scale([0.1, 0.5, 0.3])\n        sphere(d = 30);\n    }\n    \n    // Leg holes (recessed areas)\n    for (leg = [-1, 1]) {\n        // Front legs\n        translate([leg * 15, 20, -15])\n        rotate([0, 45 * leg, 0])\n        color([0, 0, 0])\n        scale([0.8, 0.3, 0.3])\n        sphere(d = 10);\n        \n        // Back legs\n        translate([leg * 15, -20, -15])\n        rotate([0, -45 * leg, 0])\n        color([0, 0, 0])\n        scale([0.8, 0.3, 0.3])\n        sphere(d = 10);\n    }\n    \n    // Top spike\n    color(color_shell)\n    translate([0, 0, 25])\n    rotate([0, 0, 0])\n    cylinder(h = 8, d1 = 8, d2 = 0);\n}\n\n// Scale to printable size (80mm)\nscale(80/50)\nshelgon();",
    "renders": true
  },
  {
    "pokemon": "salamence",
    "openscad_code": "// Salamence - Medium Complexity Realistic Style\n// Size: ~80mm wingspan\n\n$fa = 2;\n$fs = 0.5;\n\n// Main colors\ncolor_body = [0.8, 0.1, 0.1];\ncolor_belly = [0.9, 0.9, 0.8];\ncolor_wing = [0.7, 0.2, 0.2];\ncolor_detail = [0.2, 0.2, 0.2];\ncolor_eye = [1, 1, 0];\n\nmodule body() {\n    color(color_body)\n    union() {\n        // Main torso\n        translate([0, 0, 10])\n            scale([1.2, 0.8, 1])\n            sphere(15);\n        \n        // Neck\n        translate([0, -15, 25])\n            rotate([30, 0, 0])\n            cylinder(h=20, r1=8, r2=12);\n        \n        // Head\n        translate([0, -25, 35])\n            scale([1.3, 1.2, 1.1])\n            sphere(12);\n    }\n}\n\nmodule belly() {\n    color(color_belly)\n    translate([0, 0, 5])\n        scale([1.1, 0.7, 0.5])\n        sphere(14);\n}\n\nmodule wings() {\n    module wing(side) {\n        color(color_wing)\n        mirror([side, 0, 0])\n        translate([0, 5, 25])\n        rotate([0, 0, -20 * side])\n        union() {\n            // Main wing\n            translate([15, 0, 0])\n                rotate([0, 0, 30])\n                scale([2.5, 0.2, 1])\n                cube([30, 1, 15]);\n            \n            // Wing membrane\n            translate([25, 0, 7])\n                rotate([0, 0, 15])\n                scale([1.5, 0.1, 2])\n                cube([20, 1, 10]);\n            \n            // Wing claw\n            translate([40, 0, 12])\n                rotate([0, -30, 0])\n                cylinder(h=8, r1=3, r2=1);\n        }\n    }\n    \n    wing(1);\n    wing(-1);\n}\n\nmodule tail() {\n    color(color_body)\n    translate([0, 15, 8])\n    rotate([20, 0, 0])\n    union() {\n        // Tail segments\n        for(i = [0:2]) {\n            translate([0, i*8, -i*3])\n                scale([1 - i*0.2, 1 - i*0.1, 1])\n                sphere(8 - i*2);\n        }\n        \n        // Tail fins\n        translate([0, 20, -8])\n            rotate([0, 0, 90])\n            scale([0.3, 1, 0.5])\n            cube([15, 1, 10]);\n    }\n}\n\nmodule legs() {\n    module leg(side, front) {\n        color(color_body)\n        translate([side * 8, front * 10, 0])\n        union() {\n            // Upper leg\n            rotate([0, side * 15, 0])\n            cylinder(h=12, r=3);\n            \n            // Lower leg\n            translate([0, 0, -12])\n                rotate([0, side * 30, 0])\n                cylinder(h=10, r=2);\n            \n            // Foot\n            translate([side * 2, 0, -22])\n                rotate([0, 0, side * 30])\n                cube([6, 3, 2]);\n        }\n    }\n    \n    leg(1, 1);\n    leg(-1, 1);\n    leg(1, -1);\n    leg(-1, -1);\n}\n\nmodule head_details() {\n    color(color_detail)\n    union() {\n        // Horns\n        translate([0, -35, 45])\n            rotate([30, 0, 0])\n            cylinder(h=15, r=2);\n        \n        // Side horns\n        translate([8, -30, 40])\n            rotate([20, 30, 0])\n            cylinder(h=10, r=1.5);\n        \n        mirror([1, 0, 0])\n            translate([8, -30, 40])\n                rotate([20, 30, 0])\n                cylinder(h=10, r=1.5);\n        \n        // Eyes\n        color(color_eye)\n        translate([6, -28, 38])\n            sphere(3);\n        \n        mirror([1, 0, 0])\n            translate([6, -28, 38])\n                sphere(3);\n        \n        // Eye pupils\n        color(color_detail)\n        translate([7, -29, 39])\n            sphere(1.5);\n        \n        mirror([1, 0, 0])\n            translate([7, -29, 39])\n                sphere(1.5);\n    }\n}\n\n// Assemble the model\nscale(0.8)\nunion() {\n    body();\n    belly();\n    wings();\n    tail();\n    legs();\n    head_details();\n}",
    "renders": true
  },
  {
    "pokemon": "beldum",
    "openscad_code": "// Beldum Pokemon - Realistic Style\n// Medium complexity 3D printable model\n\n// Overall dimensions: ~80mm long\n\n// Main body color\nbeldum_color = [0.2, 0.2, 0.3];\n\n// Metallic accent color\nmetallic_color = [0.4, 0.4, 0.5];\n\n// Eye color\neye_color = [0.9, 0.9, 0.95];\n\n// Create the central body\nmodule central_body() {\n    color(beldum_color) {\n        // Main spherical body\n        translate([0, 0, 25])\n            sphere(d = 40, $fn = 48);\n            \n        // Flatten bottom for printing stability\n        difference() {\n            translate([0, 0, 25])\n                sphere(d = 40, $fn = 48);\n            translate([0, 0, -10])\n                cube([60, 60, 50], center = true);\n        }\n        \n        // Metallic rim around equator\n        color(metallic_color) {\n            rotate([90, 0, 0])\n                translate([0, 0, 25])\n                    cylinder(h = 3, r1 = 20.2, r2 = 20.2, $fn = 64);\n        }\n    }\n}\n\n// Create the eye\nmodule eye(x, y, z) {\n    color(eye_color) {\n        // Main eye sphere\n        translate([x, y, z])\n            sphere(d = 6, $fn = 32);\n            \n        // Pupil\n        color([0, 0, 0]) {\n            translate([x + 1.5, y + 1.5, z + 2])\n                sphere(d = 2.5, $fn = 16);\n        }\n    }\n}\n\n// Create magnetic claw\nmodule claw(rotation) {\n    rotate([0, 0, rotation])\n        translate([35, 0, 25])\n            rotate([90, 0, 0])\n                color(beldum_color) {\n                    // Main claw body\n                    cylinder(h = 25, r1 = 8, r2 = 12, $fn = 16);\n                    \n                    // Claw tip\n                    translate([0, 0, 25])\n                        cylinder(h = 15, r1 = 12, r2 = 8, $fn = 16);\n                        \n                    // Magnetic connector base\n                    translate([0, 0, -5])\n                        cylinder(h = 5, r1 = 12, r2 = 8, $fn = 16);\n                        \n                    // Claw teeth\n                    for(i = [0:3]) {\n                        rotate([0, 0, i * 90])\n                            translate([10, 0, 8])\n                                cube([8, 3, 12], center = true);\n                    }\n                }\n}\n\n// Create magnetic field ring\nmodule magnetic_ring() {\n    color(metallic_color) {\n        rotate([90, 0, 0])\n            translate([0, 0, 25])\n                difference() {\n                    cylinder(h = 2, r1 = 45, r2 = 45, $fn = 64);\n                    cylinder(h = 2.5, r1 = 40, r2 = 40, $fn = 64);\n                }\n    }\n}\n\n// Create surface details\nmodule surface_details() {\n    color(metallic_color) {\n        // Hexagonal pattern on body\n        for(angle = [0:60:359]) {\n            rotate([0, 0, angle])\n                translate([15, 0, 30])\n                    cylinder(h = 1, r1 = 3, r2 = 3, $fn = 6);\n                    \n            rotate([0, 0, angle])\n                translate([10, 0, 35])\n                    cylinder(h = 1, r1 = 2, r2 = 2, $fn = 6);\n                    \n            rotate([0, 0, angle])\n                translate([18, 0, 20])\n                    cylinder(h = 1, r1 = 2.5, r2 = 2.5, $fn = 6);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Central body\n    central_body();\n    \n    // Eyes\n    eye(-12, -12, 35);\n    eye(12, -12, 35);\n    \n    // Magnetic claws (4 total)\n    for(i = [0:3]) {\n        claw(i * 90);\n    }\n    \n    // Magnetic field ring\n    magnetic_ring();\n    \n    // Surface details\n    surface_details();\n}",
    "renders": true
  },
  {
    "pokemon": "metang",
    "openscad_code": "// Metang - Realistic Medium Complexity\n// 3D printable model with proper wall thickness and no overhangs\n\n// Color definitions\nblue = [0.2, 0.4, 0.8];\nsilver = [0.7, 0.7, 0.7];\ndark_silver = [0.5, 0.5, 0.5];\nred = [0.8, 0.1, 0.1];\n\n// Main dimensions\nbody_size = 40;\narm_length = 35;\narm_width = 12;\nclaw_size = 8;\neye_size = 6;\n\n// Wall thickness for printing\nwall = 2;\n\n// Create Metang body\nmodule metang_body() {\n    color(blue)\n    difference() {\n        // Main body - two connected spheres\n        hull() {\n            translate([-body_size/3, 0, 0])\n                sphere(d=body_size);\n            translate([body_size/3, 0, 0])\n                sphere(d=body_size);\n        }\n        \n        // Hollow out\n        translate([0, 0, -wall])\n            scale([0.8, 0.8, 0.8])\n            hull() {\n                translate([-body_size/3, 0, 0])\n                    sphere(d=body_size);\n                translate([body_size/3, 0, 0])\n                    sphere(d=body_size);\n            }\n    }\n    \n    // Cross pattern on body\n    color(dark_silver)\n    for(i = [-1, 1]) {\n        rotate([90, 0, 90*i])\n            translate([0, 0, -body_size/2])\n                cylinder(h=body_size, d=wall*2, center=true);\n    }\n}\n\n// Create metallic arm\nmodule arm(position=[0, 0, 0], rotation=[0, 0, 0]) {\n    translate(position)\n    rotate(rotation)\n    union() {\n        // Upper arm segment\n        color(silver)\n        translate([0, 0, -arm_length/4])\n            cylinder(h=arm_length/2, d=arm_width, center=true);\n        \n        // Lower arm segment\n        translate([0, 0, -arm_length*3/4])\n            cylinder(h=arm_length/2, d=arm_width*0.8, center=true);\n        \n        // Claw hand\n        color(silver)\n        translate([0, 0, -arm_length])\n        union() {\n            // Central claw base\n            sphere(d=claw_size);\n            \n            // Three claw prongs\n            for(i = [0, 120, 240]) {\n                rotate([0, 0, i])\n                translate([claw_size/2, 0, 0])\n                    rotate([90, 0, 0])\n                        cylinder(h=claw_size*1.5, d=claw_size/2);\n            }\n        }\n    }\n}\n\n// Create eye\nmodule eye(position=[0, 0, 0]) {\n    translate(position)\n    union() {\n        // Eye socket\n        color(dark_silver)\n        cylinder(h=eye_size/2, d=eye_size*1.2);\n        \n        // Eye\n        color(red)\n        translate([0, 0, eye_size/4])\n            sphere(d=eye_size);\n    }\n}\n\n// Create the complete Metang\nmodule metang() {\n    // Main body\n    metang_body();\n    \n    // Arms - positioned at 45 degree angles\n    arm([body_size/2, 0, body_size/4], [0, 45, 0]);\n    arm([-body_size/2, 0, body_size/4], [0, -45, 180]);\n    \n    // Eyes - positioned on the front\n    eye([body_size/4, body_size/3, body_size/3]);\n    eye([-body_size/4, body_size/3, body_size/3]);\n    \n    // Metallic ridges on body\n    color(dark_silver)\n    for(i = [0, 60, 120, 180, 240, 300]) {\n        rotate([0, 0, i])\n        translate([body_size/2.5, 0, 0])\n            rotate([90, 0, 0])\n                cylinder(h=body_size/3, d=wall*1.5);\n    }\n}\n\n// Generate the model centered at origin\nmetang();",
    "renders": true
  },
  {
    "pokemon": "metagross",
    "openscad_code": "// Metagross - Realistic Medium Complexity\n// Scale for 3D printing: ~70mm wide\n\n// Colors\ncolor_steel = [0.5, 0.5, 0.6];\ncolor_silver = [0.7, 0.7, 0.75];\ncolor_blue = [0.1, 0.3, 0.7];\ncolor_red = [0.8, 0.2, 0.2];\n\n// Main body module\nmodule body() {\n    color(color_steel) {\n        // Central body - octahedron like shape\n        hull() {\n            translate([0, 0, 10]) sphere(d=20, $fn=8);\n            translate([0, 0, -5]) sphere(d=25, $fn=8);\n        }\n        \n        // Cross pattern on top\n        translate([0, 0, 12]) {\n            cube([30, 6, 2], center=true);\n            cube([6, 30, 2], center=true);\n        }\n    }\n}\n\n// Eye module\nmodule eye() {\n    color(color_red) {\n        // Outer eye frame\n        cylinder(h=3, d=12, $fn=24);\n        translate([0, 0, -0.5]) cylinder(h=4, d=14, $fn=24);\n        \n        // Inner eye\n        color(color_silver) {\n            translate([0, 0, 1]) cylinder(h=2, d=8, $fn=16);\n            translate([0, 0, 2]) color(color_red) sphere(d=6);\n        }\n    }\n}\n\n// Leg module\nmodule leg(length, angle) {\n    color(color_steel) {\n        // Upper segment\n        translate([0, 0, length/4]) \n            rotate([0, 90, 0]) cylinder(h=length/2, d=10, $fn=8);\n        \n        // Lower segment - claw\n        translate([0, 0, length*0.75]) {\n            rotate([0, 90, 0]) cylinder(h=length/2, d=8, $fn=8);\n            \n            // Claw tips\n            for(i=[-1, 1]) {\n                translate([i*5, 0, length/2]) rotate([0, 90, 0]) \n                    scale([0.5, 0.5, 1]) cylinder(h=8, d=6, $fn=3);\n            }\n        }\n        \n        // Joint sphere\n        translate([0, 0, length/2]) sphere(d=12);\n    }\n}\n\n// Main assembly\nmodule metagross() {\n    scale(0.7) {\n        // Central body\n        body();\n        \n        // Eyes - four positions\n        for(angle=[0, 90, 180, 270]) {\n            rotate([0, 0, angle]) \n                translate([15, 0, 8]) \n                    rotate([0, -30, 0]) eye();\n        }\n        \n        // Legs - four positions\n        for(angle=[45, 135, 225, 315]) {\n            rotate([0, 0, angle]) {\n                translate([20, 0, 0]) rotate([0, 0, 30]) leg(40, 0);\n            }\n        }\n        \n        // Metallic details\n        color(color_silver) {\n            // Rivets\n            for(angle=[0:45:315]) {\n                rotate([0, 0, angle]) \n                    translate([10, 0, 15]) cylinder(h=2, d=4, $fn=8);\n            }\n            \n            // Armor plates\n            difference() {\n                translate([0, 0, 5]) \n                    cube([35, 35, 3], center=true);\n                translate([0, 0, 6]) \n                    cube([30, 30, 5], center=true);\n            }\n        }\n    }\n}\n\n// Render the complete model\nmetagross();",
    "renders": true
  },
  {
    "pokemon": "regirock",
    "openscad_code": "// Regirock Pokemon - Realistic Style, Medium Complexity\n// 3D printable figure approx 80mm tall\n\n$fn = 32;\n\n// Main module\nmodule regirock() {\n    color(\"tan\") {\n        // Central rock body\n        difference() {\n            // Main body cube with rounded edges\n            minkowski() {\n                cube([35, 30, 60], center = true);\n                sphere(3);\n            }\n            \n            // Eye holes\n            translate([-12, 15, 10]) rotate([0, 90, 0]) cylinder(h=20, r=5);\n            translate([12, 15, 10]) rotate([0, 90, 0]) cylinder(h=20, r=5);\n            \n            // Mouth cavity\n            translate([0, 15, -25]) cube([20, 5, 10], center = true);\n        }\n        \n        // Rock shoulders\n        translate([-22, 0, 20]) {\n            rotate([0, 0, -30]) cube([20, 15, 25], center = true);\n        }\n        translate([22, 0, 20]) {\n            rotate([0, 0, 30]) cube([20, 15, 25], center = true);\n        }\n        \n        // Rock arms\n        translate([-35, 0, 0]) {\n            rotate([0, 0, 45]) cube([25, 12, 15], center = true);\n        }\n        translate([35, 0, 0]) {\n            rotate([0, 0, -45]) cube([25, 12, 15], center = true);\n        }\n        \n        // Rock legs\n        translate([-12, 0, -45]) {\n            cube([15, 20, 30], center = true);\n        }\n        translate([12, 0, -45]) {\n            cube([15, 20, 30], center = true);\n        }\n        \n        // Head crest rocks\n        for(i = [-20:10:20]) {\n            translate([i, 0, 38]) {\n                rotate([0, 90, 0]) cylinder(h=10+abs(i)/2, r1=5, r2=8);\n            }\n        }\n    }\n    \n    // Orange/red pattern markings\n    color(\"darkorange\") {\n        // Chest pattern\n        translate([0, 16, 0]) {\n            cube([20, 2, 30], center = true);\n        }\n        \n        // Arm patterns\n        translate([-35, 0, 5]) {\n            rotate([0, 0, 45]) cube([15, 3, 8], center = true);\n        }\n        translate([35, 0, 5]) {\n            rotate([0, 0, -45]) cube([15, 3, 8], center = true);\n        }\n        \n        // Head pattern dots\n        for(pos = [[-10, 30], [0, 32], [10, 30]]) {\n            translate([pos[0], 16, pos[1]]) {\n                sphere(3);\n            }\n        }\n    }\n    \n    // Eyes\n    color(\"red\") {\n        translate([-12, 16, 10]) {\n            rotate([0, 90, 0]) cylinder(h=1, r=4);\n        }\n        translate([12, 16, 10]) {\n            rotate([0, 90, 0]) cylinder(h=1, r=4);\n        }\n    }\n    \n    // Small rock details\n    color(\"peru\") {\n        // Random rock clusters\n        for(pos = [[-15, -10, 15], [15, -10, 15], \n                   [-8, -10, -10], [8, -10, -10],\n                   [-20, 0, -20], [20, 0, -20]]) {\n            translate(pos) {\n                sphere(3 + pos[0]/10);\n            }\n        }\n    }\n}\n\n// Generate the model\nregirock();",
    "renders": true
  },
  {
    "pokemon": "regice",
    "openscad_code": "// Regice 3D model - realistic style, medium complexity\n// Based on the Ice-type legendary Pokemon Regice\n\n// Main colors\nregice_blue = [0.7, 0.85, 0.95];\nregice_dark = [0.5, 0.7, 0.9];\nwhite = [1, 1, 1];\n\n// Overall scale factor\nscale_factor = 0.4;\n\n// Main body\nmodule regice_body() {\n    color(regice_blue)\n    union() {\n        // Central crystal body\n        translate([0, 0, 25])\n        scale([1, 0.8, 1.2])\n        sphere(d=40);\n        \n        // Lower crystal structure\n        translate([0, 0, 5])\n        scale([0.9, 0.7, 1])\n        sphere(d=35);\n        \n        // Base platform\n        translate([0, 0, 0])\n        scale([1.2, 1, 0.3])\n        sphere(d=40);\n    }\n}\n\n// Crystal spikes\nmodule crystal_spike(height, radius, angle) {\n    rotate([angle, 0, 0])\n    translate([0, 0, height/2])\n    cylinder(h=height, r1=radius, r2=0.1, $fn=6);\n}\n\n// Head structure\nmodule regice_head() {\n    color(regice_blue)\n    union() {\n        // Main head crystal\n        translate([0, 0, 55])\n        scale([0.7, 0.8, 1])\n        sphere(d=35);\n        \n        // Forehead crystal\n        translate([0, 15, 62])\n        scale([0.3, 0.2, 0.3])\n        sphere(d=20);\n        \n        // Side crystals\n        translate([-15, 10, 58])\n        rotate([0, 0, -20])\n        scale([0.2, 0.3, 0.4])\n        sphere(d=15);\n        \n        translate([15, 10, 58])\n        rotate([0, 0, 20])\n        scale([0.2, 0.3, 0.4])\n        sphere(d=15);\n    }\n}\n\n// Eyes\nmodule regice_eyes() {\n    color(white)\n    union() {\n        // Left eye\n        translate([-8, 18, 55])\n        scale([1, 0.5, 0.3])\n        sphere(d=8);\n        \n        // Right eye\n        translate([8, 18, 55])\n        scale([1, 0.5, 0.3])\n        sphere(d=8);\n    }\n}\n\n// Arms\nmodule regice_arm(side) {\n    // side: 1 for right, -1 for left\n    color(regice_blue)\n    union() {\n        // Shoulder crystal\n        translate([side * 20, 5, 35])\n        scale([0.5, 0.4, 0.6])\n        sphere(d=20);\n        \n        // Upper arm\n        translate([side * 25, 0, 25])\n        rotate([0, 0, side * -10])\n        scale([0.3, 0.3, 1.2])\n        cylinder(h=20, d=12);\n        \n        // Forearm\n        translate([side * 32, -2, 12])\n        rotate([0, 0, side * -20])\n        scale([0.25, 0.25, 1])\n        cylinder(h=15, d=10);\n        \n        // Hand crystal\n        translate([side * 36, -3, 5])\n        scale([0.4, 0.3, 0.5])\n        sphere(d=15);\n    }\n}\n\n// Crystal pattern details\nmodule crystal_pattern() {\n    color(regice_dark)\n    for(i = [0:30:360]) {\n        rotate([0, 0, i])\n        translate([0, 0, 30])\n        scale([0.05, 1, 0.02])\n        cylinder(h=40, d=2);\n    }\n    \n    for(j = [1:3]) {\n        translate([0, 0, j * 15])\n        rotate([0, 0, j * 45])\n        scale([0.8, 0.8, 0.1])\n        cylinder(h=5, d=35, $fn=8);\n    }\n}\n\n// Legs\nmodule regice_leg(side) {\n    // side: 1 for right, -1 for left\n    color(regice_blue)\n    union() {\n        // Upper leg\n        translate([side * 8, -5, 10])\n        rotate([10, 0, 0])\n        scale([0.4, 0.4, 0.8])\n        cylinder(h=15, d=12);\n        \n        // Lower leg\n        translate([side * 10, -8, 2])\n        rotate([20, 0, 0])\n        scale([0.35, 0.35, 0.7])\n        cylinder(h=12, d=10);\n        \n        // Foot\n        translate([side * 12, -10, 0])\n        scale([0.5, 0.8, 0.3])\n        sphere(d=15);\n    }\n}\n\n// Main assembly\nscale([scale_factor, scale_factor, scale_factor])\nunion() {\n    regice_body();\n    regice_head();\n    regice_eyes();\n    regice_arm(1);  // Right arm\n    regice_arm(-1); // Left arm\n    regice_leg(1);  // Right leg\n    regice_leg(-1); // Left leg\n    \n    // Add crystal spikes\n    color(regice_dark)\n    translate([0, 0, 30])\n    union() {\n        crystal_spike(20, 3, 30);\n        crystal_spike(18, 2.5, -30);\n        crystal_spike(22, 3.5, 0);\n        crystal_spike(16, 2, 45);\n        crystal_spike(19, 2.8, -45);\n    }\n    \n    // Crystal patterns on body\n    crystal_pattern();\n}",
    "renders": true
  },
  {
    "pokemon": "registeel",
    "openscad_code": "// Registeel - Realistic Style, Medium Complexity\n// Overall height: ~85mm, printable in one piece\n\n$fn = 40;  // Smooth curves\n\n// Main body color: metallic gray\ncolor(\"gray\") {\n    // Central torso\n    union() {\n        // Main torso cylinder\n        translate([0, 0, 20])\n            cylinder(h = 40, d = 35, center = true);\n\n        // Top dome\n        translate([0, 0, 40])\n            sphere(d = 35);\n\n        // Bottom dome\n        translate([0, 0, 0])\n            sphere(d = 35);\n    }\n}\n\n// Black pattern lines\ncolor(\"black\") {\n    // Front face pattern\n    translate([0, 18, 35])\n        cube([20, 1, 10], center = true);\n\n    translate([0, 18, 25])\n        cube([30, 1, 10], center = true);\n\n    translate([0, 18, 15])\n        cube([20, 1, 10], center = true);\n\n    // Side patterns\n    for (angle = [0, 120, 240]) {\n        rotate([0, 0, angle])\n            translate([0, 18, 30])\n                cube([15, 1, 20], center = true);\n    }\n}\n\n// Arms\nmodule arm() {\n    color(\"gray\") {\n        // Upper arm\n        translate([0, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h = 20, d = 10);\n\n        // Lower arm\n        translate([20, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h = 15, d = 8);\n\n        // Hand\n        translate([35, 0, 0])\n            sphere(d = 12);\n    }\n}\n\n// Position arms\nfor (angle = [45, 135, 225, 315]) {\n    rotate([0, 0, angle])\n        translate([18, 0, 30])\n            rotate([0, 0, -20])\n                arm();\n}\n\n// Legs\nmodule leg() {\n    color(\"gray\") {\n        // Thigh\n        translate([0, 0, 0])\n            cylinder(h = 15, d = 12);\n\n        // Lower leg\n        translate([0, 0, -15])\n            cylinder(h = 15, d = 10);\n\n        // Foot\n        translate([0, 0, -30])\n            cube([15, 20, 5], center = true);\n    }\n}\n\n// Position legs\nfor (x = [-12, 12]) {\n    translate([x, 0, 10])\n        leg();\n}\n\n// Head features\ncolor(\"gray\") {\n    // Ears\n    for (x = [-10, 10]) {\n        translate([x, 0, 55])\n            rotate([0, 20 * (x > 0 ? 1 : -1), 0])\n                cylinder(h = 15, d1 = 8, d2 = 5);\n    }\n\n    // Eye sockets\n    for (x = [-8, 8]) {\n        translate([x, 15, 50])\n            color(\"black\")\n                sphere(d = 6);\n        \n        // Pupils\n        translate([x, 17, 50])\n            color(\"red\")\n                sphere(d = 3);\n    }\n\n    // Mouth\n    translate([0, 17, 40])\n        color(\"black\")\n            cube([12, 1, 3], center = true);\n}\n\n// Chest pattern - seven dots\ncolor(\"red\") {\n    for (row = [0, 1, 2]) {\n        for (col = [-row, 0, row]) {\n            if (row != 2 || col != 0) {\n                translate([col * 4, 16, 30 - row * 5])\n                    sphere(d = 3);\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "pokemon": "latias",
    "openscad_code": "// Latias 3D Model - Realistic Style, Medium Complexity\n// Designed for 3D printing - no overhangs, 2mm wall thickness\n\nmodule latias_body() {\n    color([0.9, 0.2, 0.3]) {\n        // Main body - egg shape\n        rotate([90, 0, 0])\n            scale([1, 1.2, 1.5])\n                sphere(15, $fn=50);\n        \n        // Chest plate\n        translate([0, -5, 8])\n            rotate([90, 0, 0])\n            scale([0.8, 0.6, 0.3])\n                sphere(12, $fn=30);\n    }\n}\n\nmodule latias_head() {\n    color([0.9, 0.2, 0.3]) {\n        // Head base\n        translate([0, 0, 15])\n            scale([0.8, 0.8, 1.1])\n                sphere(10, $fn=30);\n        \n        // Snout\n        translate([0, 0, 23])\n            scale([0.4, 0.5, 0.8])\n                sphere(8, $fn=20);\n    }\n}\n\nmodule latias_ears(side) {\n    color([0.9, 0.2, 0.3]) {\n        // Main ear\n        translate([side*8, 0, 22])\n            rotate([0, side*10, 0])\n            scale([0.3, 0.8, 2])\n                cylinder(8, 4, 2, $fn=8);\n        \n        // Ear tip\n        translate([side*8, 0, 29])\n            scale([0.5, 0.7, 0.5])\n                sphere(3, $fn=8);\n    }\n}\n\nmodule latias_eyes() {\n    color([1, 1, 1]) {\n        // Eye whites\n        translate([-5, 4, 19])\n            rotate([20, 0, 0])\n            scale([1, 0.8, 0.3])\n                sphere(3, $fn=20);\n        translate([5, 4, 19])\n            rotate([20, 0, 0])\n            scale([1, 0.8, 0.3])\n                sphere(3, $fn=20);\n    }\n    \n    color([0, 0, 0]) {\n        // Pupils\n        translate([-5, 5, 20])\n            rotate([20, 0, 0])\n            scale([0.5, 0.5, 0.1])\n                sphere(2, $fn=10);\n        translate([5, 5, 20])\n            rotate([20, 0, 0])\n            scale([0.5, 0.5, 0.1])\n                sphere(2, $fn=10);\n    }\n}\n\nmodule latias_wing(side) {\n    color([0.9, 0.2, 0.3]) {\n        // Wing base\n        translate([side*12, 0, 10])\n            rotate([0, side*10, side*30])\n            scale([1.5, 0.3, 2])\n                sphere(8, $fn=20);\n        \n        // Wing tip\n        translate([side*20, 0, 5])\n            rotate([0, side*10, side*45])\n            scale([0.8, 0.2, 1.5])\n                sphere(6, $fn=15);\n    }\n    \n    color([0.8, 0.8, 0.9]) {\n        // Wing membrane\n        translate([side*15, 0, 8])\n            rotate([0, side*10, side*35])\n            scale([1.2, 0.1, 1.8])\n                sphere(6, $fn=15);\n    }\n}\n\nmodule latias_tail() {\n    color([0.9, 0.2, 0.3]) {\n        // Tail segments\n        for(i = [0:2]) {\n            translate([0, 0, -8-i*5])\n                scale([0.8-i*0.1, 0.8-i*0.1, 1])\n                    sphere(8-i*2, $fn=20);\n        }\n        \n        // Tail fins\n        translate([0, 0, -20])\n            rotate([0, 0, 0])\n            scale([0.5, 2, 0.2])\n                sphere(6, $fn=20);\n        translate([0, 0, -20])\n            rotate([0, 0, 90])\n            scale([0.5, 2, 0.2])\n                sphere(6, $fn=20);\n    }\n}\n\nmodule latias_legs(side) {\n    color([0.9, 0.2, 0.3]) {\n        // Upper leg\n        translate([side*8, 0, -5])\n            rotate([0, side*20, 0])\n            scale([0.4, 0.4, 1])\n                cylinder(6, 3, 2, $fn=8);\n        \n        // Lower leg\n        translate([side*10, 0, -10])\n            rotate([0, side*30, 0])\n            scale([0.3, 0.3, 0.8])\n                cylinder(4, 2, 2, $fn=8);\n        \n        // Foot\n        translate([side*11, 0, -13])\n            scale([0.8, 1.5, 0.4])\n                sphere(3, $fn=8);\n    }\n}\n\nmodule latias_markings() {\n    color([0.8, 0.8, 0.9]) {\n        // Chest triangle\n        translate([0, -3, 15])\n            rotate([90, 0, 0])\n            linear_extrude(0.5)\n                polygon(points=[[-3,0],[3,0],[0,-4]]);\n        \n        // Face triangle\n        translate([0, 2, 22])\n            rotate([90, 0, 0])\n            linear_extrude(0.5)\n                polygon(points=[[-2,0],[2,0],[0,-3]]);\n    }\n}\n\n// Assemble the model\nunion() {\n    latias_body();\n    latias_head();\n    latias_ears(-1);\n    latias_ears(1);\n    latias_eyes();\n    latias_wing(-1);\n    latias_wing(1);\n    latias_tail();\n    latias_legs(-1);\n    latias_legs(1);\n    latias_markings();\n}\n\n// Scale to 70mm height\nscale(70/65)",
    "renders": true
  },
  {
    "pokemon": "latios",
    "openscad_code": "// Latios - Realistic Style, Medium Complexity\n// Scale: ~80mm wingspan\n\ncolor(\"dodgerblue\") union() {\n\n    // Main body - elongated oval\n    translate([0, 0, 10]) scale([1.5, 0.8, 1]) sphere(d = 30, $fn = 32);\n\n    // Head\n    translate([0, 0, 35]) scale([1.2, 0.9, 0.9]) sphere(d = 20, $fn = 32);\n\n    // Snout\n    translate([0, -12, 33]) rotate([10, 0, 0]) scale([0.4, 1.5, 0.6]) sphere(d = 15, $fn = 16);\n\n    // Eyes\n    color(\"red\") {\n        translate([5, -8, 37]) rotate([0, 20, 0]) scale([1, 0.5, 0.3]) sphere(d = 8, $fn = 16);\n        translate([-5, -8, 37]) rotate([0, -20, 0]) scale([1, 0.5, 0.3]) sphere(d = 8, $fn = 16);\n    }\n\n    // Eye pupils\n    color(\"black\") {\n        translate([5, -9, 38]) sphere(d = 2, $fn = 8);\n        translate([-5, -9, 38]) sphere(d = 2, $fn = 8);\n    }\n\n    // Ears - triangular\n    module ear(x, rot) {\n        color(\"dodgerblue\") {\n            translate([x, 0, 45]) rotate([0, rot, 0]) rotate([30, 0, 0]) \n                scale([1, 0.2, 1.5]) cube([12, 3, 8], center = true);\n            translate([x, 0, 48]) rotate([0, rot, 0]) rotate([30, 0, 0]) \n                scale([0.3, 0.1, 0.8]) cube([10, 2, 6], center = true);\n        }\n    }\n    ear(6, 20);\n    ear(-6, -20);\n\n    // Wings - swept back\n    module wing(x) {\n        color(\"dodgerblue\") {\n            translate([x, 0, 25]) rotate([0, 0, x > 0 ? 30 : -30]) rotate([0, 10, 0])\n                scale([1, 0.1, 2.5]) cube([35, 2, 20], center = true);\n            \n            // Wing detail\n            color(\"mediumblue\") {\n                translate([x, 1, 28]) rotate([0, 0, x > 0 ? 30 : -30]) rotate([0, 10, 0])\n                    scale([0.8, 0.05, 2.2]) cube([30, 1, 18], center = true);\n            }\n        }\n    }\n    wing(20);\n    wing(-20);\n\n    // Tail fins\n    color(\"dodgerblue\") {\n        translate([0, 15, 15]) rotate([0, 0, 0]) rotate([20, 0, 0])\n            scale([0.3, 0.1, 1.5]) cube([20, 2, 15], center = true);\n    }\n\n    // Legs - simplified cylinders\n    color(\"dodgerblue\") {\n        translate([8, 0, 5]) rotate([0, 0, 30]) cylinder(h = 12, d = 6, $fn = 12);\n        translate([-8, 0, 5]) rotate([0, 0, -30]) cylinder(h = 12, d = 6, $fn = 12);\n    }\n\n    // Feet\n    color(\"mediumblue\") {\n        translate([10, -2, -2]) sphere(d = 6, $fn = 12);\n        translate([-10, -2, -2]) sphere(d = 6, $fn = 12);\n    }\n\n    // Chest marking\n    color(\"mediumblue\") {\n        translate([0, 8, 25]) rotate([90, 0, 0]) \n            scale([0.8, 1, 0.1]) cylinder(h = 1, d = 12, $fn = 32);\n    }\n\n    // Back markings\n    color(\"mediumblue\") {\n        for(i = [0:2]) {\n            translate([0, 0, 25 - i * 8]) rotate([0, 0, 0])\n                scale([0.6, 0.6, 0.1]) cylinder(h = 1, d = 10 - i * 2, $fn = 32);\n        }\n    }\n}",
    "renders": true
  },
  {
    "pokemon": "jirachi",
    "openscad_code": "// Realistic Jirachi - 3D Printable OpenSCAD Model\n// Medium complexity with detailed features\n\n$fn = 50;\n\n// Main colors\ncolor_yellow = [1, 0.85, 0.2];\ncolor_blue = [0.2, 0.4, 1];\ncolor_white = [0.95, 0.95, 0.95];\ncolor_black = [0.1, 0.1, 0.1];\ncolor_gold = [0.8, 0.7, 0.1];\n\n// Main body module\nmodule jirachi_body() {\n    // Central head sphere\n    color(color_yellow)\n    translate([0, 0, 15])\n    sphere(20);\n    \n    // Head cap\n    color(color_blue)\n    translate([0, 0, 25])\n    cylinder(h=15, r1=22, r2=15);\n    \n    // Face plate\n    color(color_white)\n    translate([0, -10, 15])\n    difference() {\n        cube([30, 5, 20], center=true);\n        translate([0, 3, 0])\n        sphere(12);\n    }\n}\n\n// Eye module\nmodule eye(x_pos, y_pos, z_pos) {\n    translate([x_pos, y_pos, z_pos]) {\n        // Outer eye\n        color(color_white)\n        sphere(6);\n        \n        // Pupil\n        color(color_black)\n        translate([0, 0, 4])\n        sphere(3);\n        \n        // Highlight\n        color(color_white)\n        translate([1.5, 1.5, 5.5])\n        sphere(1.5);\n    }\n}\n\n// Ear module\nmodule ear(x_pos, angle) {\n    translate([x_pos, 0, 30]) {\n        rotate([0, 0, angle]) {\n            // Main ear\n            color(color_yellow)\n            translate([0, 0, 0])\n            rotate([0, -10, 0])\n            cylinder(h=25, r1=8, r2=4);\n            \n            // Ear tip\n            color(color_blue)\n            translate([0, 0, 25])\n            sphere(5);\n            \n            // Tag charm\n            color(color_gold)\n            translate([0, 0, 28])\n            rotate([90, 0, 0])\n            cylinder(h=3, r1=2, r2=2);\n        }\n    }\n}\n\n// Wish tag module\nmodule wish_tags() {\n    // Front tag\n    color(color_blue)\n    translate([0, -25, 15])\n    rotate([90, 0, 0])\n    cylinder(h=20, r1=3, r2=3);\n    \n    color(color_gold)\n    translate([0, -35, 15])\n    sphere(2);\n    \n    // Side tags (duplicated with mirror)\n    for (i = [0, 1]) {\n        mirror([0, i == 0 ? 1 : -1, 0]) {\n            color(color_blue)\n            translate([15, -20, 15])\n            rotate([0, -45, 0])\n            rotate([90, 0, 0])\n            cylinder(h=15, r1=2, r2=2);\n            \n            color(color_gold)\n            translate([20, -25, 15])\n            sphere(1.5);\n        }\n    }\n}\n\n// Arm module\nmodule arm(x_pos) {\n    translate([x_pos, 0, 10]) {\n        rotate([0, 0, x_pos > 0 ? 30 : -30]) {\n            // Upper arm\n            color(color_yellow)\n            cylinder(h=15, r1=4, r2=3);\n            \n            // Hand\n            color(color_yellow)\n            translate([0, 0, 15])\n            sphere(6);\n            \n            // Wrist band\n            color(color_blue)\n            translate([0, 0, 8])\n            cylinder(h=3, r1=5, r2=5);\n        }\n    }\n}\n\n// Leg module\nmodule leg(x_pos) {\n    translate([x_pos, 0, 0]) {\n        // Upper leg\n        color(color_yellow)\n        cylinder(h=12, r1=5, r2=4);\n        \n        // Foot\n        color(color_yellow)\n        translate([0, 0, 12])\n        sphere(6);\n        \n        // Ankle band\n        color(color_blue)\n        translate([0, 0, 8])\n        cylinder(h=3, r1=6, r2=6);\n    }\n}\n\n// Star pattern on head\nmodule head_stars() {\n    for (angle = [0:120:359]) {\n        rotate([0, 0, angle]) {\n            color(color_gold)\n            translate([0, 22, 35])\n            linear_extrude(height=2)\n            polygon(points=[[0,0],[2,1],[0,2],[-2,1]]);\n        }\n    }\n}\n\n// Main assembly\nmodule jirachi() {\n    // Body\n    jirachi_body();\n    \n    // Eyes\n    eye(-8, -15, 20);\n    eye(8, -15, 20);\n    \n    // Mouth\n    color(color_black)\n    translate([0, -20, 13])\n    rotate([90, 0, 0])\n    cylinder(h=1, r1=3, r2=3);\n    \n    // Ears\n    ear(-15, -30);\n    ear(15, 30);\n    \n    // Arms\n    arm(-25);\n    arm(25);\n    \n    // Legs\n    leg(-10);\n    leg(10);\n    \n    // Wish tags\n    wish_tags();\n    \n    // Head stars\n    head_stars();\n}\n\n// Scale to 80mm height\nscale(0.8)\njirachi();",
    "renders": true
  },
  {
    "pokemon": "deoxys",
    "openscad_code": "// Deoxys Normal Form - Medium Complexity Realistic Style\n// Overall height ~90mm when printed\n\n$fn = 32;\n\n// Main body color\ncolor([0.82, 0.2, 0.25]) {\n    // Central core body\n    translate([0, 0, 25])\n        sphere(d=28);\n    \n    // Chest gem\n    color([0, 0.7, 0.85])\n        translate([0, 0, 35])\n            sphere(d=12);\n}\n\n// Head\ncolor([0.82, 0.2, 0.25]) {\n    translate([0, 0, 50])\n        sphere(d=22);\n    \n    // Head crest - four prongs\n    for (rot = [0, 90, 180, 270]) {\n        rotate([0, 0, rot])\n            translate([0, 11, 50])\n                rotate([90, 0, 0])\n                    cylinder(h=15, d1=4, d2=2);\n    }\n}\n\n// Eyes\ncolor([0, 0, 0]) {\n    translate([7, 10, 52])\n        sphere(d=4);\n    translate([-7, 10, 52])\n        sphere(d=4);\n}\n\n// Arms\nfor (side = [-1, 1]) {\n    color([0.82, 0.2, 0.25]) {\n        // Upper arms\n        translate([side * 18, 0, 35])\n            rotate([0, 0, side * -20])\n                cylinder(h=20, d1=8, d2=6);\n        \n        // Lower arms\n        translate([side * 32, 0, 20])\n            rotate([0, 0, side * -20])\n                cylinder(h=15, d1=6, d2=4);\n        \n        // Hands - triangular prisms\n        translate([side * 42, 0, 12])\n            rotate([0, 0, side * 90])\n                linear_extrude(height=4)\n                    polygon([[0, 0], [6, 0], [3, -4]]);\n    }\n}\n\n// Legs\nfor (side = [-1, 1]) {\n    color([0.82, 0.2, 0.25]) {\n        // Upper legs\n        translate([side * 10, 0, 12])\n            rotate([0, 0, side * 10])\n                cylinder(h=15, d1=8, d2=6);\n        \n        // Lower legs\n        translate([side * 12, 0, -3])\n            rotate([0, 0, side * 10])\n                cylinder(h=15, d1=6, d2=4);\n        \n        // Feet\n        translate([side * 14, 0, -18])\n            scale([1.2, 1, 0.3])\n                sphere(d=8);\n    }\n}\n\n// Back tentacles\nfor (rot = [30, 150, 210, 330]) {\n    color([0.82, 0.2, 0.25]) {\n        rotate([0, 0, rot])\n            translate([0, -14, 25])\n                cylinder(h=35, d1=6, d2=3);\n    }\n}",
    "renders": true
  },
  {
    "pokemon": "turtwig",
    "openscad_code": "// Turtwig Pokemon - Realistic Style, Medium Complexity\n// Built for 3D printing, ~70mm tall\n\n// Main colors\nbody_color = \"#7AC74C\";      // Leaf green\nshell_color = \"#A8B820\";     // Yellow-green\ndirt_color = \"#6B4E31\";      // Brown\neye_color = \"#FFD700\";       // Gold\nblack = \"#000000\";\nwhite = \"#FFFFFF\";\n\n// Overall scale\nscale = 0.8;\n\nmodule turtwig() {\n    scale(scale) {\n        // Body and shell assembly\n        union() {\n            // Main shell (back)\n            color(shell_color) {\n                translate([0, 0, 25]) {\n                    difference() {\n                        // Main shell dome\n                        scale([1.2, 1.4, 0.6]) sphere(d = 50, $fn = 32);\n                        \n                        // Hollow out bottom\n                        translate([0, 0, -5]) \n                            cube([60, 60, 20], center = true);\n                    }\n                }\n                \n                // Shell segments\n                for(i = [-20:10:20]) {\n                    for(j = [-15:10:15]) {\n                        translate([i, j, 42]) {\n                            rotate([0, 0, 45]) \n                                cube([8, 8, 3], center = true);\n                        }\n                    }\n                }\n            }\n            \n            // Body\n            color(body_color) {\n                translate([0, 0, 15]) {\n                    // Main body\n                    scale([0.8, 1.2, 1]) sphere(d = 40, $fn = 24);\n                    \n                    // Belly\n                    translate([0, -20, -8]) \n                        scale([0.7, 0.3, 0.5]) sphere(d = 30, $fn = 16);\n                }\n                \n                // Head\n                translate([0, 28, 30]) {\n                    sphere(d = 25, $fn = 20);\n                    \n                    // Snout\n                    translate([0, 12, -3]) \n                        scale([0.8, 1, 0.8]) sphere(d = 15, $fn = 16);\n                }\n                \n                // Legs\n                module leg(x, y, angle) {\n                    translate([x, y, 10]) {\n                        rotate([0, 0, angle]) {\n                            // Upper leg\n                            translate([0, -8, 0]) \n                                scale([0.4, 1, 0.4]) sphere(d = 20, $fn = 12);\n                            \n                            // Lower leg\n                            translate([0, -15, -8]) \n                                scale([0.3, 0.8, 0.8]) sphere(d = 15, $fn = 12);\n                            \n                            // Foot\n                            color(dirt_color) {\n                                translate([0, -18, -15]) \n                                    scale([0.8, 1.2, 0.3]) sphere(d = 12, $fn = 10);\n                            }\n                        }\n                    }\n                }\n                \n                // Four legs\n                leg(-15, 10, 30);\n                leg(15, 10, -30);\n                leg(-12, -10, 45);\n                leg(12, -10, -45);\n                \n                // Tail\n                translate([0, -28, 20]) \n                    scale([0.6, 0.4, 0.8]) sphere(d = 15, $fn = 12);\n                \n                // Leaf on head\n                color(body_color) {\n                    translate([0, 32, 42]) {\n                        rotate([0, 20, 0]) {\n                            scale([0.8, 0.2, 1.5]) \n                                sphere(d = 20, $fn = 6);\n                            \n                            // Leaf veins\n                            for(i = [-2:1:2]) {\n                                translate([i*3, 0, 0]) \n                                    scale([0.3, 0.1, 1]) \n                                    cube([1, 1, 15], center = true);\n                            }\n                        }\n                    }\n                }\n            }\n            \n            // Eyes\n            color(white) {\n                translate([-8, 36, 32]) sphere(d = 8, $fn = 12);\n                translate([8, 36, 32]) sphere(d = 8, $fn = 12);\n            }\n            \n            color(eye_color) {\n                translate([-8, 37, 33]) sphere(d = 5, $fn = 10);\n                translate([8, 37, 33]) sphere(d = 5, $fn = 10);\n            }\n            \n            color(black) {\n                translate([-8, 38, 34]) sphere(d = 3, $fn = 8);\n                translate([8, 38, 34]) sphere(d = 3, $fn = 8);\n            }\n            \n            // Nose\n            color(black) {\n                translate([0, 40, 30]) \n                    scale([1, 0.5, 0.5]) sphere(d = 4, $fn = 8);\n            }\n            \n            // Mouth\n            color(black) {\n                translate([0, 40, 26]) \n                    rotate([90, 0, 0]) \n                    cylinder(h = 1, r1 = 2, r2 = 0, $fn = 16);\n            }\n        }\n    }\n}\n\n// Generate the model\nturtwig();",
    "renders": true
  },
  {
    "pokemon": "grotle",
    "openscad_code": "// Grotle - Realistic Style, Medium Complexity\n// OpenSCAD 3D Model for 3D Printing\n\n// Dimensions in mm\nbody_length = 70;\nbody_width = 50;\nbody_height = 35;\n\n// Main body shell\nmodule body_shell() {\n    color(\"#8BC34A\") {\n        union() {\n            // Main shell body\n            translate([0, 0, 15]) {\n                scale([1, 0.8, 0.6]) sphere(d=body_width);\n            }\n            \n            // Shell rim\n            translate([0, 0, 8]) {\n                cylinder(h=3, d1=body_width+5, d2=body_width+2);\n            }\n            \n            // Shell segments\n            for(i = [0:5]) {\n                rotate([0, 0, i*60]) {\n                    translate([0, 0, 16]) {\n                        scale([0.3, 1, 0.1]) sphere(d=body_width);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Head with snout and features\nmodule head() {\n    color(\"#8BC34A\") {\n        union() {\n            // Main head\n            translate([body_length/2 - 15, 0, 25]) {\n                sphere(d=25);\n            }\n            \n            // Snout\n            translate([body_length/2 - 5, 0, 25]) {\n                scale([1.5, 0.8, 0.8]) sphere(d=15);\n            }\n            \n            // Nose\n            color(\"#4CAF50\") {\n                translate([body_length/2 - 2, 0, 27]) {\n                    sphere(d=3);\n                }\n            }\n            \n            // Eyes\n            color(\"#2E7D32\") {\n                translate([body_length/2 - 12, 8, 30]) {\n                    sphere(d=4);\n                }\n                translate([body_length/2 - 12, -8, 30]) {\n                    sphere(d=4);\n                }\n            }\n            \n            // Eye whites\n            color(\"#FFFFFF\") {\n                translate([body_length/2 - 10, 8, 31]) {\n                    sphere(d=2);\n                }\n                translate([body_length/2 - 10, -8, 31]) {\n                    sphere(d=2);\n                }\n            }\n            \n            // Jaw\n            color(\"#4CAF50\") {\n                translate([body_length/2 - 5, 0, 20]) {\n                    scale([0.8, 0.6, 0.3]) sphere(d=20);\n                }\n            }\n        }\n    }\n}\n\n// Legs with claws\nmodule leg(position_x, position_y, angle) {\n    color(\"#4CAF50\") {\n        union() {\n            // Upper leg\n            translate([position_x, position_y, 12]) {\n                rotate([0, 0, angle]) {\n                    cylinder(h=15, d1=8, d2=6);\n                }\n            }\n            \n            // Lower leg\n            translate([position_x + 8*cos(angle), position_y + 8*sin(angle), 5]) {\n                rotate([0, 0, angle]) {\n                    cylinder(h=10, d1=6, d2=5);\n                }\n            }\n            \n            // Foot\n            translate([position_x + 15*cos(angle), position_y + 15*sin(angle), 0]) {\n                scale([1.5, 1, 0.5]) sphere(d=8);\n                \n                // Claws\n                for(i = [-1, 0, 1]) {\n                    translate([i*3, 0, -2]) {\n                        rotate([0, 90, 0]) {\n                            cylinder(h=3, d1=2, d2=0.5);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Tree on shell\nmodule tree() {\n    color(\"#5D4037\") {\n        // Trunk\n        translate([0, 0, 30]) {\n            cylinder(h=15, d=8);\n        }\n    }\n    \n    color(\"#4CAF50\") {\n        // Foliage\n        translate([0, 0, 45]) {\n            sphere(d=20);\n        }\n        \n        // Additional foliage clusters\n        translate([8, 0, 42]) {\n            sphere(d=12);\n        }\n        translate([-8, 0, 42]) {\n            sphere(d=12);\n        }\n        translate([0, 8, 42]) {\n            sphere(d=12);\n        }\n        translate([0, -8, 42]) {\n            sphere(d=12);\n        }\n    }\n}\n\n// Shell markings\nmodule shell_markings() {\n    color(\"#2E7D32\") {\n        // Diamond patterns\n        for(i = [0:2]) {\n            rotate([0, 0, i*120]) {\n                translate([0, 18, 16]) {\n                    scale([1, 0.5, 0.1]) sphere(d=8);\n                }\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    body_shell();\n    head();\n    \n    // Legs\n    leg(-body_length/3, body_width/2 - 5, -30);\n    leg(-body_length/3, -body_width/2 + 5, 30);\n    leg(body_length/3, body_width/2 - 5, 30);\n    leg(body_length/3, -body_width/2 + 5, -30);\n    \n    tree();\n    shell_markings();\n}",
    "renders": true
  },
  {
    "pokemon": "torterra",
    "openscad_code": "// Torterra - Realistic Style, Medium Complexity\n// Dimensions approximately 80mm x 80mm x 60mm\n\nmodule body_shell() {\n    // Main shell segments\n    color([0.2, 0.4, 0.1]) {\n        // Front segment\n        translate([-5, -30, 15]) cube([40, 35, 20], center=true);\n        // Middle segment\n        translate([-5, 0, 20]) cube([50, 40, 25], center=true);\n        // Rear segment\n        translate([-5, 30, 15]) cube([40, 35, 20], center=true);\n    }\n    \n    // Shell texture ridges\n    color([0.15, 0.3, 0.08]) {\n        for(i = [-25:5:25]) {\n            translate([-5, i, 12]) cube([45, 2, 5], center=true);\n        }\n    }\n}\n\nmodule tree_trunk() {\n    // Main tree trunk\n    color([0.4, 0.2, 0.1]) {\n        cylinder(h=20, r1=6, r2=4, center=false, $fn=8);\n    }\n    \n    // Branches\n    color([0.3, 0.15, 0.08]) {\n        for(angle = [0:120:359]) {\n            rotate([0, 0, angle]) {\n                translate([0, 0, 15]) rotate([45, 0, 0]) \n                    cylinder(h=8, r1=2, r2=1, center=false, $fn=6);\n            }\n        }\n    }\n}\n\nmodule tree_leaves() {\n    // Main leaf clusters\n    color([0.1, 0.6, 0.1]) {\n        translate([0, 0, 25]) sphere(d=20, $fn=12);\n        translate([0, 0, 30]) sphere(d=15, $fn=10);\n    }\n}\n\nmodule legs() {\n    // Front legs\n    for(side = [-1, 1]) {\n        color([0.3, 0.25, 0.15]) {\n            translate([side * 15, -20, 0]) {\n                rotate([0, side * 15, 0]) {\n                    // Upper leg\n                    cylinder(h=15, r1=4, r2=3, center=false, $fn=8);\n                    // Lower leg\n                    translate([0, 0, 15]) rotate([side * 30, 0, 0]) \n                        cylinder(h=12, r1=3, r2=4, center=false, $fn=8);\n                    // Foot\n                    translate([0, 0, 27]) cube([8, 6, 3], center=true);\n                }\n            }\n        }\n    }\n    \n    // Rear legs\n    for(side = [-1, 1]) {\n        color([0.3, 0.25, 0.15]) {\n            translate([side * 18, 25, 0]) {\n                rotate([0, side * -15, 0]) {\n                    // Upper leg\n                    cylinder(h=18, r1=5, r2=4, center=false, $fn=8);\n                    // Lower leg\n                    translate([0, 0, 18]) rotate([side * -25, 0, 0]) \n                        cylinder(h=15, r1=4, r2=5, center=false, $fn=8);\n                    // Foot\n                    translate([0, 0, 33]) cube([10, 8, 4], center=true);\n                }\n            }\n        }\n    }\n}\n\nmodule head() {\n    color([0.3, 0.25, 0.15]) {\n        translate([-25, -35, 25]) {\n            // Main head shape\n            cube([20, 25, 18], center=true);\n            \n            // Snout\n            translate([-12, 0, 0]) cube([12, 15, 10], center=true);\n            \n            // Jaw\n            translate([-8, -15, -8]) cube([16, 8, 6], center=true);\n        }\n    }\n    \n    // Eyes\n    color([0.9, 0.9, 0.9]) {\n        translate([-35, -30, 30]) sphere(d=4, $fn=8);\n        translate([-35, -40, 30]) sphere(d=4, $fn=8);\n    }\n    color([0, 0, 0]) {\n        translate([-37, -30, 30]) sphere(d=2, $fn=6);\n        translate([-37, -40, 30]) sphere(d=2, $fn=6);\n    }\n}\n\nmodule tail() {\n    color([0.3, 0.25, 0.15]) {\n        translate([0, 40, 20]) {\n            // Tail base\n            cylinder(h=12, r1=6, r2=4, center=false, $fn=8);\n            // Tail tip\n            translate([0, 0, 12]) rotate([0, 0, 15]) \n                cube([8, 15, 6], center=true);\n        }\n    }\n}\n\nmodule shell_spikes() {\n    // Spikes on shell\n    color([0.15, 0.25, 0.05]) {\n        positions = [[-5, -20, 30], [-5, 0, 35], [-5, 20, 30]];\n        for(pos = positions) {\n            translate(pos) {\n                for(i = [0:45:315]) {\n                    rotate([0, 0, i]) {\n                        translate([0, 10, 0]) {\n                            cylinder(h=8, r1=3, r2=0.5, center=false, $fn=6);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Base plate for stability\n    color([0.1, 0.1, 0.1]) {\n        translate([0, 0, -2]) cube([60, 80, 2], center=true);\n    }\n    \n    // Body components\n    translate([0, 0, 5]) {\n        body_shell();\n        shell_spikes();\n        tree_trunk();\n        tree_leaves();\n    }\n    \n    // Limbs and head\n    legs();\n    head();\n    tail();\n}",
    "renders": true
  },
  {
    "pokemon": "chimchar",
    "openscad_code": "// Chimchar - Realistic Style\n// Medium complexity model for 3D printing\n\n// Colors\n$fn = 32;\nbody_color = \"#FF5722\";\nface_color = \"#FFE0B2\";\nflame_color = \"#FF9800\";\neye_color = \"#212121\";\ninner_ear_color = \"#FFCCBC\";\n\n// Main body\nmodule chimchar_body() {\n    color(body_color)\n    union() {\n        // Torso\n        translate([0, 0, 15])\n            scale([1.2, 1, 1.3])\n            sphere(r=12);\n        \n        // Chest\n        translate([0, 8, 12])\n            scale([0.8, 0.6, 1])\n            sphere(r=10);\n    }\n}\n\n// Head\nmodule chimchar_head() {\n    color(body_color)\n    union() {\n        // Main head shape\n        translate([0, 0, 35])\n            scale([1.1, 1, 1.2])\n            sphere(r=10);\n        \n        // Snout\n        translate([0, 10, 33])\n            scale([0.7, 0.9, 0.6])\n            sphere(r=8);\n    }\n}\n\n// Face details\nmodule chimchar_face() {\n    color(face_color)\n    difference() {\n        // Face patch\n        translate([0, 7, 32])\n            scale([0.9, 1.1, 0.8])\n            sphere(r=9);\n        \n        // Eye holes\n        translate([-4, 11, 35])\n            sphere(r=2.5);\n        translate([4, 11, 35])\n            sphere(r=2.5);\n    }\n    \n    // Eyes\n    color(eye_color)\n    union() {\n        translate([-3.5, 11, 36])\n            sphere(r=1.5);\n        translate([3.5, 11, 36])\n            sphere(r=1.5);\n    }\n    \n    // Nose\n    color(eye_color)\n    translate([0, 13, 34])\n        sphere(r=1);\n    \n    // Mouth\n    color(\"#424242\")\n    translate([0, 11, 30])\n        rotate([90, 0, 0])\n        cylinder(h=0.5, r1=2, r2=0.5);\n}\n\n// Ears\nmodule chimchar_ears() {\n    // Left ear\n    color(body_color)\n    translate([-8, -2, 40])\n        rotate([0, -15, -30])\n        scale([0.8, 0.3, 2])\n        sphere(r=5);\n    \n    color(inner_ear_color)\n    translate([-8, -1.5, 40])\n        rotate([0, -15, -30])\n        scale([0.5, 0.2, 1.5])\n        sphere(r=4);\n    \n    // Right ear\n    color(body_color)\n    translate([8, -2, 40])\n        rotate([0, -15, 30])\n        scale([0.8, 0.3, 2])\n        sphere(r=5);\n    \n    color(inner_ear_color)\n    translate([8, -1.5, 40])\n        rotate([0, -15, 30])\n        scale([0.5, 0.2, 1.5])\n        sphere(r=4);\n}\n\n// Arms\nmodule chimchar_arms() {\n    // Left arm\n    color(body_color)\n    union() {\n        translate([-13, 0, 25])\n            rotate([0, 0, 30])\n            scale([0.5, 0.5, 1.2])\n            cylinder(h=10, r=4);\n        \n        // Hand\n        translate([-15, 2, 15])\n            sphere(r=4);\n    }\n    \n    // Right arm\n    color(body_color)\n    union() {\n        translate([13, 0, 25])\n            rotate([0, 0, -30])\n            scale([0.5, 0.5, 1.2])\n            cylinder(h=10, r=4);\n        \n        // Hand\n        translate([15, 2, 15])\n            sphere(r=4);\n    }\n}\n\n// Legs\nmodule chimchar_legs() {\n    // Left leg\n    color(body_color)\n    union() {\n        translate([-5, 0, 5])\n            scale([0.6, 0.6, 1])\n            cylinder(h=10, r=5);\n        \n        // Foot\n        translate([-5, 3, 0])\n            scale([1.2, 1.5, 0.8])\n            sphere(r=5);\n    }\n    \n    // Right leg\n    color(body_color)\n    union() {\n        translate([5, 0, 5])\n            scale([0.6, 0.6, 1])\n            cylinder(h=10, r=5);\n        \n        // Foot\n        translate([5, 3, 0])\n            scale([1.2, 1.5, 0.8])\n            sphere(r=5);\n    }\n}\n\n// Tail with flame\nmodule chimchar_tail() {\n    // Tail\n    color(body_color)\n    union() {\n        translate([0, -15, 20])\n            rotate([0, 30, 0])\n            scale([0.5, 0.5, 2])\n            cylinder(h=15, r=3);\n        \n        // Flame base\n        translate([0, -20, 30])\n            sphere(r=4);\n    }\n    \n    // Flame\n    color(flame_color)\n    union() {\n        translate([0, -22, 32])\n            scale([1, 1, 1.5])\n            sphere(r=4);\n        \n        translate([0, -24, 35])\n            scale([0.8, 0.8, 1.2])\n            sphere(r=3);\n        \n        translate([0, -26, 38])\n            scale([0.6, 0.6, 1])\n            sphere(r=2);\n    }\n}\n\n// Belly swirl\nmodule chimchar_swirl() {\n    color(\"#E64A19\")\n    for(i = [0:5]) {\n        translate([0, 8 + i*1.5, 20 - i*0.5])\n            sphere(r=1.5 - i*0.2);\n    }\n}\n\n// Assemble the model\nscale([2, 2, 2])\nunion() {\n    chimchar_body();\n    chimchar_head();\n    chimchar_face();\n    chimchar_ears();\n    chimchar_arms();\n    chimchar_legs();\n    chimchar_tail();\n    chimchar_swirl();\n}",
    "renders": true
  },
  {
    "pokemon": "monferno",
    "openscad_code": "// Monferno OpenSCAD Model - Realistic Style, Medium Complexity\n// 3D printable Pokemon figure with recognizable features\n\n$fn = 24; // Smooth curves for realistic style\n\n// Main colors\nskin_color = \"#FF8C00\";\nchest_color = \"#FFE4B5\";\nface_color = \"#FFD700\";\nflame_color = \"#FF4500\";\n\n// Scale factor for 3D printing (80mm height)\nscale_factor = 80/100;\n\n// Main assembly\nmodule monferno() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        union() {\n            // Body\n            translate([0, 0, 30]) {\n                difference() {\n                    // Torso\n                    color(skin_color) \n                    scale([1.2, 0.8, 1.5]) \n                    sphere(d = 40);\n                    \n                    // Chest area\n                    color(chest_color)\n                    translate([0, 15, -5])\n                    scale([0.8, 0.6, 0.8])\n                    sphere(d = 30);\n                }\n            }\n            \n            // Head\n            translate([0, -15, 55]) {\n                union() {\n                    // Main head shape\n                    color(face_color)\n                    scale([1, 1.2, 1.1])\n                    sphere(d = 35);\n                    \n                    // Snout\n                    color(face_color)\n                    translate([0, -12, -5])\n                    scale([0.7, 0.8, 0.6])\n                    sphere(d = 25);\n                    \n                    // Ears (2 pointed)\n                    for(side = [-1, 1]) {\n                        translate([side * 15, 5, 10]) {\n                            rotate([0, side * 20, 0])\n                            color(skin_color)\n                            scale([0.3, 1.5, 0.3])\n                            cylinder(h = 20, d1 = 8, d2 = 2);\n                        }\n                    }\n                    \n                    // Eyes\n                    for(side = [-1, 1]) {\n                        translate([side * 10, -10, 5]) {\n                            color(\"#000080\")\n                            sphere(d = 6);\n                            translate([0, 0, 3])\n                            color(\"white\")\n                            sphere(d = 2);\n                        }\n                    }\n                    \n                    // Nose\n                    color(\"#8B4513\")\n                    translate([0, -18, -2])\n                    sphere(d = 4);\n                }\n            }\n            \n            // Arms\n            for(side = [-1, 1]) {\n                translate([side * 25, 0, 40]) {\n                    rotate([0, 0, side * 30])\n                    color(skin_color)\n                    cylinder(h = 30, d = 12);\n                    \n                    // Hands\n                    translate([0, 0, -35])\n                    color(face_color)\n                    sphere(d = 15);\n                    \n                    // Fingers\n                    for(f = [0:2]) {\n                        rotate([0, 0, f * 30 - 30])\n                        translate([8, 0, -5])\n                        color(face_color)\n                        cylinder(h = 8, d = 4);\n                    }\n                }\n            }\n            \n            // Legs\n            for(side = [-1, 1]) {\n                translate([side * 12, 0, 15]) {\n                    color(skin_color)\n                    cylinder(h = 25, d = 15);\n                    \n                    // Feet\n                    translate([0, 5, -25])\n                    color(\"#8B4513\")\n                    scale([1.5, 2, 0.8])\n                    sphere(d = 20);\n                }\n            }\n            \n            // Tail with flame\n            translate([0, 25, 35]) {\n                // Tail base\n                color(skin_color)\n                rotate([90, 0, 0])\n                cylinder(h = 40, d1 = 15, d2 = 8);\n                \n                // Flame\n                translate([0, 15, 35])\n                flame();\n            }\n            \n            // Characteristic blue and red markings\n            // Blue face marking\n            color(\"#4169E1\")\n            translate([0, -15, 50])\n            scale([0.3, 0.1, 0.05])\n            cube([30, 40, 5]);\n            \n            // Red markings on body\n            color(\"#DC143C\")\n            translate([0, 0, 45])\n            scale([1.4, 0.3, 0.1])\n            cube([40, 15, 5]);\n        }\n    }\n}\n\n// Flame module for tail\nmodule flame() {\n    color(flame_color) {\n        // Main flame body\n        scale([1, 1, 2])\n        sphere(d = 20);\n        \n        // Flame details\n        for(i = [1:5]) {\n            rotate([0, 0, i * 72])\n            translate([8, 0, 5])\n            scale([0.3, 0.3, 1.5])\n            sphere(d = 15);\n        }\n        \n        // Inner flame\n        color(\"#FFD700\")\n        translate([0, 0, 10])\n        scale([0.6, 0.6, 0.8])\n        sphere(d = 15);\n    }\n}\n\n// Generate the model\nmonferno();",
    "renders": true
  },
  {
    "pokemon": "infernape",
    "openscad_code": "// Infernape realistic style - medium complexity\n// Based on Pokemon Diamond/Pearl design\n// Scale: 1 unit = 1mm, total height ~80mm\n\n// Colors\n$fa = 8;\n$fs = 0.5;\n\nmodule body() {\n    color([0.8, 0.2, 0.1]) {\n        // Torso\n        translate([0, 0, 30]) \n            scale([1.2, 1, 1.5]) \n                sphere(15);\n                \n        // Waist\n        translate([0, 0, 20])\n            cylinder(h=10, r1=12, r2=10);\n    }\n}\n\nmodule head() {\n    color([0.8, 0.2, 0.1]) {\n        // Main head\n        translate([0, -5, 45])\n            scale([0.9, 1.1, 1.2])\n                sphere(12);\n                \n        // Muzzle\n        translate([0, -12, 42])\n            scale([0.7, 1.2, 0.8])\n                sphere(8);\n                \n        // Snout detail\n        translate([0, -16, 40])\n            rotate([25, 0, 0])\n                cylinder(h=8, r1=6, r2=4);\n    }\n    \n    // Gold crown\n    color([0.9, 0.7, 0.1]) {\n        translate([0, -5, 55])\n            scale([1.3, 0.3, 0.3])\n                sphere(10);\n                \n        // Flame pattern\n        for(i=[-1, 1]) {\n            translate([i*8, -3, 58])\n                rotate([0, 0, i*15])\n                    scale([0.5, 0.2, 1])\n                        cylinder(h=8, r1=3, r2=1);\n        }\n    }\n    \n    // White face marking\n    color([0.95, 0.95, 0.9]) {\n        translate([0, -12, 42])\n            scale([0.5, 1, 0.6])\n                sphere(8);\n    }\n}\n\nmodule ears() {\n    for(i=[-1, 1]) {\n        color([0.8, 0.2, 0.1]) {\n            // Outer ear\n            translate([i*12, -5, 52])\n                rotate([0, 0, i*20])\n                    scale([0.3, 1, 1.5])\n                        cylinder(h=15, r1=5, r2=2);\n                        \n            // Inner ear\n            color([0.95, 0.7, 0.7]) {\n                translate([i*12, -5, 52])\n                    rotate([0, 0, i*20])\n                        translate([0, 0, 5])\n                            scale([0.2, 0.8, 1])\n                                cylinder(h=10, r1=4, r2=1);\n            }\n        }\n    }\n}\n\nmodule eyes() {\n    for(i=[-1, 1]) {\n        // Eye white\n        color([1, 1, 1]) {\n            translate([i*5, -12, 48])\n                sphere(3);\n        }\n        \n        // Pupil\n        color([0.1, 0.1, 0.1]) {\n            translate([i*5.5, -12, 49])\n                sphere(1.5);\n        }\n        \n        // Eyebrow ridge\n        color([0.6, 0.1, 0.1]) {\n            translate([i*5, -8, 52])\n                rotate([0, 0, i*10])\n                    scale([0.5, 0.2, 1])\n                        cylinder(h=6, r1=2, r2=1);\n        }\n    }\n}\n\nmodule arms() {\n    for(i=[-1, 1]) {\n        // Upper arm\n        color([0.8, 0.2, 0.1]) {\n            translate([i*15, 0, 35])\n                rotate([0, 0, i*20])\n                    cylinder(h=15, r1=5, r2=4);\n                    \n            // Forearm\n            translate([i*20, -3, 23])\n                rotate([0, 0, i*45])\n                    cylinder(h=12, r1=4, r2=3);\n                    \n            // Hand\n            translate([i*25, -8, 18])\n                sphere(4);\n        }\n        \n        // Gold wrist band\n        color([0.9, 0.7, 0.1]) {\n            translate([i*22, -5, 20])\n                cylinder(h=3, r=5, $fn=16);\n        }\n    }\n}\n\nmodule legs() {\n    for(i=[-1, 1]) {\n        // Thigh\n        color([0.8, 0.2, 0.1]) {\n            translate([i*8, 0, 20])\n                rotate([0, 0, i*10])\n                    cylinder(h=15, r1=6, r2=5);\n                    \n            // Lower leg\n            translate([i*10, 0, 8])\n                rotate([0, 0, i*5])\n                    cylinder(h=12, r1=5, r2=4);\n                    \n            // Foot\n            translate([i*10, 3, 2])\n                scale([1.2, 2, 0.8])\n                    sphere(5);\n        }\n    }\n}\n\nmodule tail() {\n    color([0.8, 0.2, 0.1]) {\n        // Tail base\n        translate([0, 8, 25])\n            rotate([0, 15, 0])\n                cylinder(h=20, r1=5, r2=3);\n                \n        // Flame\n        color([1, 0.8, 0]) {\n            translate([0, 12, 42])\n                for(i=[0:30:359]) {\n                    rotate([0, 0, i])\n                        translate([0, 0, 0])\n                            rotate([90, 0, 0])\n                                cylinder(h=8+sin(i*3)*3, r1=2, r2=0);\n                }\n        }\n    }\n}\n\nmodule chest_detail() {\n    // Gold chest pattern\n    color([0.9, 0.7, 0.1]) {\n        translate([0, 0, 40])\n            scale([0.8, 0.6, 0.3])\n                sphere(8);\n                \n        // Spikes\n        for(i=[-1, 1]) {\n            translate([i*5, 0, 38])\n                rotate([0, 0, i*20])\n                    cylinder(h=5, r1=2, r2=0);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    ears();\n    eyes();\n    arms();\n    legs();\n    tail();\n    chest_detail();\n}",
    "renders": true
  },
  {
    "pokemon": "piplup",
    "openscad_code": "// Piplup Pokemon - Realistic Style, Medium Complexity\n// Size: 60mm height, 3D printable\n\n// Colors\n$fn = 32;\n\nmodule piplup_body() {\n    color([0.2, 0.4, 0.8]) {\n        // Main body - egg shape\n        scale([1, 0.8, 1.2]) sphere(10);\n        \n        // Belly\n        translate([0, -7, -2]) color([0.9, 0.9, 0.9]) \n            scale([1.1, 0.7, 1.1]) sphere(8);\n    }\n}\n\nmodule piplup_head() {\n    color([0.2, 0.4, 0.8]) {\n        // Head sphere\n        translate([0, 0, 15]) sphere(8);\n        \n        // Beak\n        translate([0, -8, 14]) rotate([0, 0, 0]) color([1, 0.7, 0]) {\n            scale([1, 0.8, 0.5]) sphere(4);\n            translate([0, -2, -0.5]) cube([6, 3, 3], center=true);\n        }\n        \n        // Eyes\n        for(x = [-3.5, 3.5]) {\n            translate([x, 2, 18]) {\n                color([0, 0, 0]) sphere(1.5);\n                translate([0, 0, 1]) color([1, 1, 1]) sphere(0.7);\n            }\n        }\n        \n        // White face markings\n        translate([0, 0, 17]) color([0.9, 0.9, 0.9]) \n            scale([1.3, 1.1, 0.5]) sphere(6);\n    }\n}\n\nmodule piplup_cape() {\n    color([0.15, 0.3, 0.7]) {\n        // Cape base\n        translate([0, 0, 8]) {\n            rotate([0, 90, 0]) cylinder(h=12, r1=10, r2=8);\n            translate([0, -6, 0]) rotate([0, 90, 0]) cylinder(h=12, r1=8, r2=6);\n        }\n        \n        // Cape points\n        for(angle = [0:120:240]) {\n            rotate([0, 0, angle]) {\n                translate([0, 8, 8]) {\n                    rotate([0, 90, 0]) scale([0.7, 1, 1]) \n                        cylinder(h=5, r1=3, r2=0);\n                }\n            }\n        }\n    }\n}\n\nmodule piplup_wings() {\n    color([0.2, 0.4, 0.8]) {\n        // Left wing\n        translate([-8, 0, 10]) rotate([0, 45, -30]) {\n            scale([1.5, 0.5, 2]) sphere(3);\n        }\n        \n        // Right wing\n        translate([8, 0, 10]) rotate([0, 45, 30]) {\n            scale([1.5, 0.5, 2]) sphere(3);\n        }\n        \n        // Wing tips - white\n        color([0.9, 0.9, 0.9]) {\n            translate([-10, 0, 13]) sphere(1);\n            translate([10, 0, 13]) sphere(1);\n        }\n    }\n}\n\nmodule piplup_feet() {\n    color([1, 0.7, 0]) {\n        // Left foot\n        translate([-4, -5, -10]) {\n            scale([1.2, 1, 0.5]) sphere(3);\n            translate([0, 0, -1.5]) cube([3, 4, 1], center=true);\n        }\n        \n        // Right foot\n        translate([4, -5, -10]) {\n            scale([1.2, 1, 0.5]) sphere(3);\n            translate([0, 0, -1.5]) cube([3, 4, 1], center=true);\n        }\n    }\n}\n\nmodule piplup_tail() {\n    color([0.2, 0.4, 0.8]) {\n        // Tail base\n        translate([0, 8, 2]) rotate([0, 90, 0]) {\n            cylinder(h=8, r1=3, r2=2);\n        }\n        \n        // Tail tip\n        translate([0, 15, 2]) {\n            color([0.15, 0.3, 0.7]) sphere(2);\n            color([0.9, 0.9, 0.9]) translate([0, 1, 0]) sphere(1);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main body parts\n    piplup_body();\n    piplup_head();\n    piplup_cape();\n    piplup_wings();\n    piplup_feet();\n    piplup_tail();\n    \n    // Optional: Add support base for 3D printing\n    color([0.1, 0.1, 0.1]) \n        translate([0, 0, -12]) \n            cylinder(h=2, r=12, $fn=64);\n}",
    "renders": true
  },
  {
    "pokemon": "prinplup",
    "openscad_code": "// Prinplup Pokemon - Realistic Style (Medium Complexity)\n// Height: 65mm (scaled for 3D printing)\n\nmodule prinplup() {\n    // Main body color - dark blue\n    color([0.1, 0.2, 0.6]) {\n        // Body - oval shape\n        translate([0, 0, 30]) {\n            scale([1.2, 1, 1.5]) sphere(15);\n        }\n        \n        // Belly - white oval\n        color([1, 1, 1]) {\n            translate([0, -14.5, 30]) {\n                scale([0.8, 0.3, 1.2]) sphere(12);\n            }\n        }\n    }\n    \n    // Head\n    color([0.1, 0.2, 0.6]) {\n        translate([0, 0, 50]) {\n            sphere(12);\n        }\n    }\n    \n    // Beak\n    color([0.8, 0.6, 0.2]) {\n        translate([0, 12, 48]) {\n            rotate([0, 90, 0]) {\n                cylinder(h=15, r1=6, r2=3);\n            }\n        }\n        \n        // Beak detail\n        color([0.6, 0.4, 0.1]) {\n            translate([0, 18, 48]) {\n                rotate([0, 90, 0]) {\n                    cylinder(h=8, r1=3, r2=2);\n                }\n            }\n        }\n    }\n    \n    // Eyes\n    module eye() {\n        color([1, 1, 1]) sphere(3);\n        color([0, 0, 0]) translate([0, 0, 2]) sphere(1.5);\n    }\n    \n    translate([-6, 5, 53]) eye();\n    translate([6, 5, 53]) eye();\n    \n    // Crown\n    color([0.8, 0.6, 0.2]) {\n        translate([0, -5, 62]) {\n            difference() {\n                cylinder(h=8, r=8);\n                translate([0, 0, -1]) cylinder(h=10, r=6);\n            }\n        }\n        \n        // Crown prongs\n        for(i = [-1, 0, 1]) {\n            translate([i * 6, -5, 70]) {\n                rotate([0, 0, 0]) cylinder(h=6, r=2);\n            }\n        }\n    }\n    \n    // Wings\n    module wing() {\n        color([0.1, 0.2, 0.6]) {\n            translate([0, 0, 10]) {\n                scale([0.3, 1, 0.8]) sphere(15);\n            }\n        }\n    }\n    \n    translate([18, 0, 35]) rotate([0, 0, 30]) wing();\n    translate([-18, 0, 35]) rotate([0, 0, -30]) mirror([1, 0, 0]) wing();\n    \n    // Feet\n    module foot() {\n        color([0.8, 0.6, 0.2]) {\n            translate([0, 0, 5]) {\n                scale([1, 1.5, 0.5]) sphere(5);\n            }\n            \n            // Toes\n            for(i = [-1, 0, 1]) {\n                translate([i * 3, 3, 2]) {\n                    scale([0.5, 0.5, 1]) sphere(3);\n                }\n            }\n        }\n    }\n    \n    translate([8, 10, 10]) foot();\n    translate([-8, 10, 10]) foot();\n    \n    // Tail\n    color([0.1, 0.2, 0.6]) {\n        translate([0, -18, 25]) {\n            rotate([0, 15, 0]) {\n                scale([0.8, 0.3, 1.5]) sphere(10);\n            }\n        }\n    }\n    \n    // Markings\n    color([0.3, 0.4, 0.8]) {\n        // Wing markings\n        translate([15, 0, 35]) {\n            scale([0.2, 0.8, 0.6]) sphere(12);\n        }\n        translate([-15, 0, 35]) {\n            scale([0.2, 0.8, 0.6]) sphere(12);\n        }\n    }\n}\n\n// Create the model\nprinplup();",
    "renders": true
  },
  {
    "pokemon": "empoleon",
    "openscad_code": "// Empoleon OpenSCAD Model - Medium Complexity Realistic Style\n// Overall dimensions approximately 80mm height\n\n// Color definitions\nblue = [0.2, 0.4, 0.8];\nblack = [0.1, 0.1, 0.1];\nwhite = [0.95, 0.95, 0.95];\nyellow = [0.9, 0.7, 0.1];\norange = [0.9, 0.5, 0.1];\n\n// Body proportions\nbody_height = 40;\nbody_width = 30;\nbody_depth = 25;\n\n// Main body module\nmodule empoleon_body() {\n    color(blue)\n    union() {\n        // Torso - slightly tapered\n        hull() {\n            translate([0, 0, body_height/2])\n                sphere(d=body_width, $fn=16);\n            translate([0, 0, body_height/4])\n                sphere(d=body_width*1.2, $fn=16);\n        }\n        \n        // Lower body\n        translate([0, 0, -body_height/4])\n            cylinder(h=body_height/2, d1=body_width*1.2, d2=body_width*0.8, $fn=16);\n    }\n}\n\n// Head with crown\nmodule empoleon_head() {\n    color(blue)\n    translate([0, body_depth/2 + 8, body_height/2 + 10])\n    union() {\n        // Main head sphere\n        sphere(d=25, $fn=16);\n        \n        // Crown - three prongs\n        color(orange)\n        for(i=[-1, 0, 1]) {\n            translate([i*8, 0, 12])\n                rotate([0, 0, i*10])\n                cylinder(h=15, d1=3, d2=1, $fn=8);\n        }\n        \n        // Beak\n        color(yellow)\n        translate([0, 15, -2])\n            rotate([30, 0, 0])\n            difference() {\n                cube([8, 15, 8], center=true);\n                translate([0, 6, 0])\n                    cube([7, 12, 7], center=true);\n            }\n    }\n}\n\n// Wings\nmodule empoleon_wings() {\n    module wing() {\n        color(blue)\n        union() {\n            // Upper wing section\n            translate([0, 0, 0])\n                scale([2, 1, 0.3])\n                sphere(d=25, $fn=16);\n            \n            // Lower wing section\n            translate([0, -10, -8])\n                scale([1.5, 0.8, 0.2])\n                sphere(d=20, $fn=16);\n            \n            // Wing tips\n            color(yellow)\n            translate([15, -5, 0])\n                sphere(d=3, $fn=8);\n            translate([12, -12, -8])\n                sphere(d=2.5, $fn=8);\n        }\n    }\n    \n    // Left wing\n    translate([-body_width/2 - 15, 0, body_height/2])\n        rotate([0, 20, 30])\n        wing();\n    \n    // Right wing\n    translate([body_width/2 + 15, 0, body_height/2])\n        rotate([0, 20, -30])\n        mirror([1, 0, 0])\n        wing();\n}\n\n// Arms/fins\nmodule empoleon_arms() {\n    module arm() {\n        color(blue)\n        union() {\n            // Upper arm\n            cylinder(h=12, d1=8, d2=6, $fn=8);\n            \n            // Forearm with fin\n            translate([0, 0, -8])\n                union() {\n                    cylinder(h=10, d1=6, d2=5, $fn=8);\n                    \n                    // Fin blade\n                    color(orange)\n                    translate([0, 8, -5])\n                        rotate([90, 0, 0])\n                        scale([1, 0.1, 2])\n                        cylinder(h=15, d=6, $fn=3);\n                }\n        }\n    }\n    \n    // Left arm\n    translate([-body_width/2 - 5, body_depth/4, body_height/3])\n        rotate([20, 0, -30])\n        arm();\n    \n    // Right arm\n    translate([body_width/2 + 5, body_depth/4, body_height/3])\n        rotate([20, 0, 30])\n        mirror([1, 0, 0])\n        arm();\n}\n\n// Feet\nmodule empoleon_feet() {\n    module foot() {\n        color(yellow)\n        union() {\n            // Main foot\n            translate([0, 5, 0])\n                scale([1, 1.5, 0.3])\n                sphere(d=12, $fn=8);\n            \n            // Toes\n            for(i=[-1, 0, 1]) {\n                translate([i*3, 8, -2])\n                    sphere(d=3, $fn=6);\n            }\n        }\n    }\n    \n    // Left foot\n    translate([-body_width/4, -body_depth/2 - 8, -body_height/2])\n        rotate([10, 0, 0])\n        foot();\n    \n    // Right foot\n    translate([body_width/4, -body_depth/2 - 8, -body_height/2])\n        rotate([10, 0, 0])\n        foot();\n}\n\n// Tail\nmodule empoleon_tail() {\n    color(blue)\n    translate([0, -body_depth/2 - 5, body_height/4])\n    union() {\n        // Base\n        cylinder(h=15, d1=10, d2=8, $fn=8);\n        \n        // Tail flippers\n        for(angle=[0, 120, 240]) {\n            rotate([0, 0, angle])\n            translate([0, -8, 0])\n                color(orange)\n                scale([0.5, 1, 0.1])\n                sphere(d=15, $fn=8);\n        }\n    }\n}\n\n// Eyes\nmodule empoleon_eyes() {\n    module eye() {\n        color(white)\n        sphere(d=4, $fn=8);\n        color(black)\n        translate([0, 2.1, 0])\n            sphere(d=2, $fn=8);\n    }\n    \n    // Left eye\n    translate([-6, body_depth/2 + 18, body_height/2 + 12])\n        eye();\n    \n    // Right eye\n    translate([6, body_depth/2 + 18, body_height/2 + 12])\n        eye();\n}\n\n// Main assembly\nunion() {\n    empoleon_body();\n    empoleon_head();\n    empoleon_wings();\n    empoleon_arms();\n    empoleon_feet();\n    empoleon_tail();\n    empoleon_eyes();\n}",
    "renders": true
  },
  {
    "pokemon": "starly",
    "openscad_code": "// Starly Pokemon - Realistic Style - Medium Complexity\n// 3D printable model with no overhangs\n\n// Colors\nstarly_gray = [0.4, 0.4, 0.4];\nstarly_brown = [0.5, 0.35, 0.25];\nstarly_yellow = [0.9, 0.8, 0.2];\nstarly_white = [0.9, 0.9, 0.9];\nstarly_black = [0.1, 0.1, 0.1];\nstarly_orange = [0.9, 0.5, 0.2];\n\n// Main body\nmodule body() {\n    union() {\n        // Main torso\n        color(starly_gray)\n        scale([1, 0.8, 0.9])\n        sphere(15);\n        \n        // Chest patch\n        color(starly_white)\n        translate([0, -5, -8])\n        scale([1.2, 0.8, 0.5])\n        sphere(8);\n    }\n}\n\n// Head with beak\nmodule head() {\n    translate([0, 20, 8]) {\n        union() {\n            // Head\n            color(starly_gray)\n            scale([0.9, 1.1, 1])\n            sphere(12);\n            \n            // Beak\n            color(starly_yellow)\n            translate([0, 14, -2])\n            rotate([0, 30, 0])\n            scale([1, 2, 0.8])\n            cylinder(10, 3, 1);\n            \n            // Forehead crest\n            color(starly_gray)\n            translate([0, 8, 8])\n            scale([1, 0.3, 1])\n            sphere(6);\n        }\n    }\n}\n\n// Eyes\nmodule eyes() {\n    for(side = [-1, 1]) {\n        translate([side * 6, 25, 5]) {\n            union() {\n                // White of eye\n                color(starly_white)\n                sphere(3);\n                \n                // Pupil\n                color(starly_black)\n                translate([side * 1, 0, 1])\n                sphere(1.5);\n            }\n        }\n    }\n}\n\n// Wings\nmodule wing(side) {\n    translate([side * 18, 5, 5]) {\n        rotate([0, 0, side * 20]) {\n            color(starly_gray) {\n                // Main wing\n                scale([1.5, 0.2, 2])\n                sphere(8);\n                \n                // Wing tip\n                translate([side * 5, 0, 8])\n                scale([0.8, 0.2, 1.2])\n                sphere(6);\n                \n                // Wing feather pattern\n                color(starly_white)\n                for(i = [0:2]) {\n                    translate([side * (2 + i * 2), 0, -5 + i * 5])\n                    scale([0.3, 0.1, 0.8])\n                    sphere(3);\n                }\n            }\n        }\n    }\n}\n\n// Tail feathers\nmodule tail() {\n    translate([0, -20, 0]) {\n        for(side = [-1, 1]) {\n            color(starly_gray) {\n                rotate([0, 0, side * 30]) {\n                    translate([side * 8, -8, 0])\n                    scale([0.8, 0.2, 2.5])\n                    sphere(6);\n                    \n                    // White tips\n                    color(starly_white)\n                    translate([side * 8, -8, 8])\n                    scale([0.5, 0.2, 0.8])\n                    sphere(4);\n                }\n            }\n        }\n    }\n}\n\n// Legs and feet\nmodule legs() {\n    for(side = [-1, 1]) {\n        translate([side * 6, -5, -15]) {\n            union() {\n                // Leg\n                color(starly_orange)\n                cylinder(8, 2, 2);\n                \n                // Foot\n                translate([0, 0, -10]) {\n                    union() {\n                        // Main foot\n                        scale([1.5, 2.5, 0.5])\n                        sphere(3);\n                        \n                        // Toes\n                        for(toe = [-1, 0, 1]) {\n                            color(starly_orange)\n                            translate([toe * 2, -2, -1])\n                            scale([0.8, 0.5, 0.3])\n                            sphere(2);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Ears/crown feathers\nmodule ears() {\n    for(side = [-1, 1]) {\n        color(starly_gray)\n        translate([side * 8, 18, 12]) {\n            rotate([side * 20, 0, 0])\n            scale([0.5, 0.5, 2])\n            cylinder(8, 3, 1);\n            \n            // White spot\n            color(starly_white)\n            translate([0, 0, 7])\n            sphere(1.5);\n        }\n    }\n}\n\n// Assembly\nscale(2)\nunion() {\n    body();\n    head();\n    eyes();\n    wing(-1);\n    wing(1);\n    tail();\n    legs();\n    ears();\n}",
    "renders": true
  },
  {
    "pokemon": "staravia",
    "openscad_code": "// Staravia 3D model - realistic style, medium complexity\n// Overall dimensions: ~70mm wingspan, ~65mm length\n\n// Colors\nbody_color = [0.2, 0.2, 0.2];      // Dark gray\nwing_color = [0.3, 0.3, 0.3];      // Medium gray\nchest_color = [0.95, 0.95, 0.9];   // Off-white\nbeak_color = [0.8, 0.4, 0.1];      // Orange\neye_color = [0.9, 0.1, 0.1];       // Red\naccent_color = [0.1, 0.1, 0.1];    // Black\n\n// Main body module\nmodule body() {\n    color(body_color)\n    union() {\n        // Main torso\n        translate([0, 0, 10])\n            scale([1.2, 0.8, 1])\n            sphere(r=12, $fn=32);\n        \n        // Chest\n        color(chest_color)\n        translate([0, -5, 5])\n            scale([0.8, 0.6, 0.8])\n            sphere(r=10, $fn=32);\n        \n        // Neck\n        translate([0, 0, 20])\n            rotate([30, 0, 0])\n            cylinder(h=8, r1=6, r2=4, $fn=16);\n    }\n}\n\n// Head module\nmodule head() {\n    color(body_color)\n    union() {\n        // Main head shape\n        translate([0, 0, 30])\n            scale([1, 0.9, 1.1])\n            sphere(r=10, $fn=32);\n        \n        // Beak\n        color(beak_color)\n        translate([0, 0, 37])\n            rotate([20, 0, 0])\n            cylinder(h=15, r1=3, r2=0.5, $fn=8);\n        \n        // Crest\n        color(accent_color)\n        for(i = [0:2]) {\n            rotate([0, 0, i*120])\n            translate([0, 0, 38])\n                rotate([30, 0, 0])\n                cylinder(h=8, r1=1.5, r2=0.5, $fn=6);\n        }\n        \n        // Eyes\n        color(eye_color)\n        for(side = [-1, 1]) {\n            translate([side*5, 5, 32])\n                sphere(r=2.5, $fn=16);\n            \n            // Eye highlight\n            color([1,1,1])\n            translate([side*5.5, 5.5, 34])\n                sphere(r=0.8, $fn=8);\n        }\n        \n        // Eye mask\n        color(accent_color)\n        for(side = [-1, 1]) {\n            translate([side*5, 5, 32])\n                rotate([0, 90, 0])\n                scale([1.5, 0.8, 0.5])\n                cylinder(h=0.5, r=4, $fn=16);\n        }\n    }\n}\n\n// Wing module\nmodule wing() {\n    color(wing_color)\n    difference() {\n        // Main wing\n        scale([1, 0.2, 1])\n            rotate([0, 90, 0])\n            cylinder(h=25, r1=15, r2=25, $fn=32);\n        \n        // Wing tip cutout\n        translate([0, -1, 20])\n            rotate([0, 90, 0])\n            cylinder(h=2, r1=5, r2=8, $fn=16);\n    }\n    \n    // Wing feathers\n    color(accent_color)\n    for(i = [0:2]) {\n        translate([0, -1, i*6])\n            rotate([0, 90, 0])\n            cylinder(h=0.5, r1=12-i*2, r2=15-i*3, $fn=3);\n    }\n}\n\n// Tail module\nmodule tail() {\n    color(wing_color)\n    union() {\n        // Central tail feather\n        translate([0, 0, -20])\n            rotate([30, 0, 0])\n            cylinder(h=15, r1=4, r2=2, $fn=8);\n        \n        // Side tail feathers\n        for(side = [-1, 1]) {\n            translate([side*3, 0, -18])\n                rotate([30, side*10, 0])\n                cylinder(h=12, r1=3, r2=1.5, $fn=6);\n        }\n    }\n}\n\n// Leg module\nmodule leg() {\n    color(beak_color)\n    union() {\n        // Upper leg\n        translate([0, 0, 0])\n            cylinder(h=6, r1=2, r2=1.5, $fn=8);\n        \n        // Lower leg\n        translate([0, 0, -6])\n            rotate([20, 0, 0])\n            cylinder(h=5, r1=1.5, r2=1, $fn=8);\n        \n        // Foot\n        translate([0, 0, -11])\n            rotate([90, 0, 0])\n            scale([1.5, 0.5, 1])\n            cylinder(h=3, r=2, $fn=16);\n    }\n}\n\n// Main assembly\nunion() {\n    // Body and head\n    body();\n    head();\n    \n    // Wings\n    for(side = [-1, 1]) {\n        translate([side*15, 0, 15])\n            rotate([0, side*20, 0])\n            mirror([0, side, 0])\n            wing();\n    }\n    \n    // Tail\n    translate([0, 0, 10])\n        tail();\n    \n    // Legs\n    for(side = [-1, 1]) {\n        translate([side*5, 0, 0])\n            leg();\n    }\n}",
    "renders": true
  },
  {
    "pokemon": "staraptor",
    "openscad_code": "// Staraptor OpenSCAD Model - Medium Complexity Realistic Style\n// Dimensions: ~90mm wingspan, 50mm tall\n\n// Main color definitions\ncolor_body = [0.2, 0.2, 0.2];\ncolor_wing = [0.1, 0.1, 0.1];\ncolor_face = [0.15, 0.15, 0.15];\ncolor_crest = [0.3, 0.3, 0.3];\ncolor_beak = [1, 0.8, 0.2];\ncolor_eye = [1, 1, 0];\ncolor_markings = [0.05, 0.05, 0.05];\n\n// Body\nmodule body() {\n    color(color_body)\n    union() {\n        // Main torso\n        translate([0, 0, 25])\n            scale([1.2, 0.8, 1])\n            sphere(r=12, $fn=32);\n        \n        // Chest area\n        translate([0, 8, 20])\n            scale([0.8, 0.6, 1.2])\n            sphere(r=10, $fn=32);\n    }\n}\n\n// Head with crest\nmodule head() {\n    color(color_face)\n    union() {\n        // Main head\n        translate([0, 15, 38])\n            rotate([0, 20, 0])\n            scale([0.9, 0.7, 1.1])\n            sphere(r=10, $fn=32);\n        \n        // Crest\n        color(color_crest)\n        translate([0, 12, 48])\n            rotate([0, 30, 0])\n            scale([0.3, 0.8, 1.5])\n            cylinder(r1=8, r2=2, h=15, $fn=32);\n    }\n}\n\n// Beak\nmodule beak() {\n    color(color_beak)\n    translate([0, 26, 36])\n        rotate([0, -30, 0])\n        scale([1, 2, 0.8])\n        cylinder(r1=3, r2=1, h=10, $fn=16);\n}\n\n// Eye\nmodule eye() {\n    color(color_eye)\n    translate([3, 20, 40])\n        sphere(r=2, $fn=16);\n}\n\n// Wing module\nmodule wing(is_left = true) {\n    color(color_wing)\n    mirror([is_left ? 0 : 1, 0, 0])\n    translate([15, 0, 30])\n        rotate([0, 0, is_left ? -10 : 10])\n        union() {\n            // Main wing\n            translate([0, 0, 0])\n                rotate([0, 20, 0])\n                scale([1, 0.3, 0.1])\n                cube([30, 15, 2], center=true);\n            \n            // Wing tip\n            translate([25, 0, 2])\n                rotate([0, 10, 0])\n                scale([0.8, 0.2, 0.1])\n                cube([15, 10, 2], center=true);\n            \n            // Wing feather details\n            for(i = [0:2]) {\n                translate([10 + i*8, 0, -1])\n                    rotate([0, 30 - i*10, 0])\n                    scale([0.6 - i*0.1, 0.15, 0.05])\n                    cube([10, 8, 1], center=true);\n            }\n        }\n}\n\n// Tail\nmodule tail() {\n    color(color_wing)\n    translate([0, -20, 25])\n        rotate([30, 0, 0])\n        union() {\n            // Main tail\n            scale([1, 0.3, 0.1])\n            cube([20, 8, 2], center=true);\n            \n            // Tail feathers\n            for(i = [-1:1]) {\n                translate([i*5, -5, 0])\n                    rotate([0, i*10, 0])\n                    scale([0.8, 0.2, 0.1])\n                    cube([12, 6, 1.5], center=true);\n            }\n        }\n}\n\n// Leg\nmodule leg(is_left = true) {\n    color(color_body)\n    mirror([is_left ? 0 : 1, 0, 0])\n    translate([5, 0, 15])\n        union() {\n            // Thigh\n            translate([0, 0, 5])\n                rotate([0, 0, 45])\n                cylinder(r=2.5, h=8, $fn=16);\n            \n            // Lower leg\n            translate([0, -5, 0])\n                rotate([0, 0, 90])\n                cylinder(r=2, h=10, $fn=16);\n            \n            // Foot\n            translate([0, -8, -2])\n                scale([1.5, 2, 0.5])\n                cube([4, 6, 2], center=true);\n        }\n}\n\n// Body markings\nmodule markings() {\n    color(color_markings)\n    union() {\n        // Chest marking\n        translate([0, 12, 25])\n            scale([0.6, 0.4, 0.1])\n            sphere(r=8, $fn=32);\n        \n        // Wing markings\n        for(side = [-1, 1]) {\n            translate([side*20, 0, 30])\n                rotate([0, 20, 0])\n                scale([0.1, 0.2, 0.05])\n                cube([20, 8, 1], center=true);\n        }\n    }\n}\n\n// Assemble the complete Staraptor\nunion() {\n    body();\n    head();\n    beak();\n    eye();\n    mirror([-1, 0, 0]) eye();\n    wing(true);\n    wing(false);\n    tail();\n    leg(true);\n    leg(false);\n    markings();\n}",
    "renders": true
  },
  {
    "pokemon": "bidoof",
    "openscad_code": "// Bidoof Pokemon - Medium complexity, realistic style\n// Overall dimensions: ~80mm long, ~50mm tall, ~45mm wide\n\n$fn = 32;\n\nmodule bidoof_body() {\n    // Main brown body\n    color([0.4, 0.25, 0.15]) {\n        // Torso - elongated oval\n        scale([1.2, 0.8, 0.7]) sphere(20);\n        \n        // Belly - lighter brown\n        color([0.6, 0.4, 0.3]) {\n            translate([0, -15, -13]) scale([0.7, 0.6, 0.4]) sphere(15);\n        }\n    }\n}\n\nmodule bidoof_head() {\n    color([0.4, 0.25, 0.15]) {\n        // Head - rounded rectangle shape\n        translate([0, 25, 8]) scale([1.1, 0.9, 0.9]) sphere(15);\n        \n        // Snout\n        translate([0, 35, 2]) scale([0.8, 0.6, 0.5]) sphere(12);\n        \n        // Teeth (two buck teeth)\n        color([0.9, 0.9, 0.9]) {\n            translate([-3, 42, 2]) cube([3, 4, 2]);\n            translate([0, 42, 2]) cube([3, 4, 2]);\n        }\n        \n        // Nose - small black oval\n        color([0.1, 0.1, 0.1]) {\n            translate([0, 40, 5]) scale([1, 0.7, 0.5]) sphere(3);\n        }\n        \n        // Eyes\n        color([0.1, 0.1, 0.1]) {\n            translate([-8, 30, 10]) sphere(3);\n            translate([8, 30, 10]) sphere(3);\n        }\n        \n        // Eye whites\n        color([1, 1, 1]) {\n            translate([-8.5, 29.5, 11]) sphere(1.5);\n            translate([7.5, 29.5, 11]) sphere(1.5);\n        }\n    }\n}\n\nmodule bidoof_ears() {\n    color([0.4, 0.25, 0.15]) {\n        // Left ear\n        translate([-12, 20, 20]) rotate([30, 0, -20]) \n            scale([0.3, 0.2, 1]) cylinder(h=15, r1=5, r2=2);\n        \n        // Right ear\n        translate([12, 20, 20]) rotate([30, 0, 20]) \n            scale([0.3, 0.2, 1]) cylinder(h=15, r1=5, r2=2);\n    }\n}\n\nmodule bidoof_tail() {\n    color([0.4, 0.25, 0.15]) {\n        // Tail base\n        translate([25, -10, 5]) rotate([0, 0, -30]) \n            scale([0.3, 2, 0.3]) cylinder(h=20, r1=4, r2=2);\n        \n        // Tail paddle\n        translate([32, -8, 5]) rotate([0, 0, 0]) \n            scale([2, 0.2, 1.2]) sphere(8);\n    }\n}\n\nmodule bidoof_legs() {\n    color([0.4, 0.25, 0.15]) {\n        // Front legs\n        translate([-10, 15, -15]) rotate([0, 10, 10]) \n            cylinder(h=15, r=4);\n        translate([10, 15, -15]) rotate([0, 10, -10]) \n            cylinder(h=15, r=4);\n        \n        // Back legs\n        translate([-10, -15, -15]) rotate([0, -10, 5]) \n            cylinder(h=15, r=5);\n        translate([10, -15, -15]) rotate([0, -10, -5]) \n            cylinder(h=15, r=5);\n        \n        // Paws - darker brown\n        color([0.3, 0.2, 0.1]) {\n            for(x = [-10, 10]) {\n                for(y = [15, -15]) {\n                    translate([x, y, -28]) sphere(4);\n                }\n            }\n        }\n    }\n}\n\nmodule bidoof_pattern() {\n    // Distinctive tan pattern on face\n    color([0.7, 0.5, 0.3]) {\n        translate([0, 30, 2]) scale([1.5, 0.8, 0.3]) sphere(10);\n    }\n    \n    // Tan patches on back\n    color([0.7, 0.5, 0.3]) {\n        translate([-8, 5, 12]) sphere(5);\n        translate([8, 5, 12]) sphere(5);\n    }\n}\n\n// Assemble the complete Bidoof\nunion() {\n    bidoof_body();\n    bidoof_head();\n    bidoof_ears();\n    bidoof_tail();\n    bidoof_legs();\n    bidoof_pattern();\n}",
    "renders": true
  },
  {
    "pokemon": "bibarel",
    "openscad_code": "// Bibarel - Realistic Style, Medium Complexity\n// 3D printable model with proper wall thickness and no overhangs\n\n// Color definitions\ncolor_body = [0.75, 0.5, 0.35];      // Brown fur\ncolor_cream = [0.95, 0.85, 0.75];    // Cream belly\ncolor_black = [0.1, 0.1, 0.1];       // Black markings\ncolor_red = [0.8, 0.2, 0.2];         // Red nose\n\n// Main module\nmodule bibarel() {\n    // Body - main torso\n    color(color_body)\n    union() {\n        // Main body\n        translate([0, 0, 10])\n        scale([1.2, 0.8, 1])\n        sphere(d=40, $fn=32);\n        \n        // Belly - cream colored patch\n        color(color_cream)\n        translate([0, 0, 5])\n        scale([1.1, 0.7, 0.6])\n        sphere(d=35, $fn=32);\n        \n        // Head section\n        translate([0, 25, 25])\n        scale([1.3, 1, 1.1])\n        sphere(d=35, $fn=32);\n        \n        // Tail base\n        translate([0, -30, 12])\n        scale([0.8, 1.2, 0.4])\n        sphere(d=30, $fn=32);\n    }\n    \n    // Ears\n    color(color_body)\n    for(x = [-15, 15]) {\n        translate([x, 20, 45])\n        rotate([0, -10, 0])\n        scale([0.3, 0.6, 1])\n        cylinder(h=15, d1=8, d2=5, $fn=16);\n    }\n    \n    // Tail with distinctive pattern\n    color(color_body)\n    translate([0, -45, 15])\n    rotate([0, 10, 0])\n    scale([1, 2.5, 0.3])\n    sphere(d=25, $fn=32);\n    \n    // Tail pattern rings\n    color(color_black)\n    for(i = [0, 1]) {\n        translate([0, -45 + i*8, 16])\n        rotate([0, 10, 0])\n        scale([1.1, 0.3, 0.4])\n        cylinder(h=3, d=28, $fn=32);\n    }\n    \n    // Legs\n    color(color_body)\n    for(x = [-12, 12]) {\n        for(y = [-8, 8]) {\n            translate([x, y, 0])\n            scale([0.8, 1, 1.2])\n            cylinder(h=15, d=10, $fn=16);\n            \n            // Feet\n            translate([x, y, -7])\n            scale([1.2, 1.5, 0.5])\n            sphere(d=12, $fn=16);\n        }\n    }\n    \n    // Arms\n    color(color_body)\n    for(side = [-1, 1]) {\n        translate([side * 20, 10, 20])\n        rotate([0, 0, side * 20])\n        scale([0.8, 0.8, 1])\n        cylinder(h=12, d=8, $fn=16);\n        \n        // Paw\n        translate([side * 28, 12, 18])\n        scale([1, 1.2, 0.6])\n        sphere(d=10, $fn=16);\n    }\n    \n    // Face details\n    // Eyes\n    color(color_black)\n    for(x = [-8, 8]) {\n        translate([x, 30, 42])\n        scale([0.8, 1, 0.8])\n        sphere(d=6, $fn=16);\n        \n        // Eye shine\n        color([1, 1, 1])\n        translate([x+1.5, 31, 44])\n        sphere(d=2, $fn=8);\n    }\n    \n    // Nose\n    color(color_red)\n    translate([0, 35, 40])\n    scale([1.2, 0.8, 0.6])\n    sphere(d=8, $fn=16);\n    \n    // Mouth\n    color(color_black)\n    translate([0, 38, 38])\n    rotate([90, 0, 0])\n    linear_extrude(height=1)\n    scale([1, 0.5])\n    circle(d=6, $fn=16);\n    \n    // Whiskers\n    color(color_black)\n    for(side = [-1, 1]) {\n        for(angle = [-30, 0, 30]) {\n            translate([side * 15, 35, 38])\n            rotate([0, 0, side * angle])\n            cylinder(h=8, d=1, $fn=8);\n        }\n    }\n    \n    // Teeth (two visible buck teeth)\n    color(color_cream)\n    translate([-3, 38, 37])\n    cube([2, 1, 3], center=true);\n    translate([3, 38, 37])\n    cube([2, 1, 3], center=true);\n}\n\n// Create the complete model\nbibarel();",
    "renders": true
  },
  {
    "pokemon": "kricketot",
    "openscad_code": "// Kricketot Pokemon - Realistic Style, Medium Complexity\n\n$fn = 32;\nmodule leg(x, y, z, rot) {\n    translate([x, y, z])\n    rotate([0, 0, rot])\n    union() {\n        color(\"saddlebrown\")\n        cylinder(h=8, r1=2.5, r2=2);\n        translate([0, 0, 8])\n        sphere(r=2.5);\n    }\n}\n\nmodule antenna(x, y, z, angle) {\n    translate([x, y, z])\n    rotate([0, angle, 0])\n    union() {\n        color(\"saddlebrown\")\n        cylinder(h=12, r1=1.2, r2=0.8);\n        translate([0, 0, 12])\n        scale([1.2, 1, 0.8])\n        sphere(r=2);\n    }\n}\n\nmodule stripe(y) {\n    color(\"black\")\n    translate([0, y, 0])\n    scale([1, 0.1, 1])\n    sphere(r=10);\n}\n\nmodule eye(x, y, z) {\n    translate([x, y, z])\n    union() {\n        color(\"white\")\n        sphere(r=4);\n        color(\"black\")\n        translate([0, -1, 1.5])\n        sphere(r=2);\n        color(\"white\")\n        translate([0.7, -1.5, 2])\n        sphere(r=0.7);\n    }\n}\n\nmodule foot(x, y, z) {\n    translate([x, y, z])\n    color(\"saddlebrown\")\n    scale([1, 2.5, 0.5])\n    sphere(r=3);\n}\n\n// Main body\ncolor(\"chocolate\")\nunion() {\n    // Body\n    translate([0, 0, 20])\n    scale([1.2, 1, 1.1])\n    sphere(r=12);\n    \n    // Head\n    translate([0, 0, 38])\n    scale([1.1, 0.9, 1])\n    sphere(r=10);\n    \n    // Legs\n    leg(-7, -5, 8, 15);\n    leg(7, -5, 8, -15);\n    leg(-5, 5, 8, -15);\n    leg(5, 5, 8, 15);\n    \n    // Feet\n    foot(-7, -10, 0);\n    foot(7, -10, 0);\n    foot(-5, 10, 0);\n    foot(5, 10, 0);\n    \n    // Antenna\n    antenna(-7, 0, 45, -20);\n    antenna(7, 0, 45, -20);\n    \n    // Eyes\n    eye(-4, -6, 40);\n    eye(4, -6, 40);\n    \n    // Mouth\n    color(\"black\")\n    translate([0, -9, 36])\n    rotate([0, 0, 180])\n    cylinder(h=0.5, r1=3, r2=0);\n    \n    // Stripes\n    stripe(25);\n    stripe(20);\n    stripe(15);\n    \n    // Back pattern\n    color(\"tan\")\n    translate([0, 0, 30])\n    scale([0.6, 0.8, 0.3])\n    sphere(r=10);\n    \n    // Horn on head\n    color(\"saddlebrown\")\n    translate([0, 0, 48])\n    cylinder(h=4, r1=2, r2=0);\n}",
    "renders": true
  },
  {
    "pokemon": "kricketune",
    "openscad_code": "// Kricketune - Realistic Style\n// Medium complexity OpenSCAD model\n\n// Colors\ncolor_body = \"#8B4513\";\ncolor_accents = \"#F5DEB3\";\ncolor_details = \"#000000\";\ncolor_wings = \"#DEB887\";\n\n// Global scale\nscale_factor = 0.4;\n\nmodule kricketune() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        union() {\n            // Main body\n            color(color_body)\n            translate([0, 0, 30])\n            scale([1, 0.8, 1.2])\n            sphere(r=20);\n\n            // Head\n            color(color_body)\n            translate([0, 0, 55])\n            scale([1.2, 1.4, 1.1])\n            sphere(r=15);\n\n            // Mustache parts\n            for(i = [-1, 1]) {\n                color(color_accents)\n                translate([i*10, 15, 45])\n                rotate([0, i*20, 0])\n                scale([0.5, 0.3, 2])\n                cylinder(r1=8, r2=5, h=20);\n\n                color(color_accents)\n                translate([i*12, 15, 45])\n                rotate([0, i*30, 0])\n                scale([0.5, 0.3, 1.5])\n                cylinder(r1=6, r2=4, h=15);\n            }\n\n            // Antennae\n            for(i = [-1, 1]) {\n                color(color_body)\n                translate([i*8, 0, 70])\n                rotate([0, i*15, 0])\n                cylinder(r1=3, r2=2, h=25);\n\n                color(color_accents)\n                translate([i*8, 0, 95])\n                rotate([0, i*15, 0])\n                scale([1, 1, 0.3])\n                sphere(r=5);\n            }\n\n            // Eyes\n            for(i = [-1, 1]) {\n                color(color_details)\n                translate([i*7, 12, 60])\n                scale([1, 1.2, 0.5])\n                sphere(r=4);\n\n                color(\"white\")\n                translate([i*6.5, 12.5, 62])\n                scale([0.5, 0.5, 0.3])\n                sphere(r=2);\n            }\n\n            // Mouth\n            color(color_details)\n            translate([0, 18, 50])\n            scale([3, 0.5, 1])\n                cylinder(r=3, h=2);\n\n            // Wings\n            for(i = [-1, 1]) {\n                color(color_wings)\n                translate([i*25, 0, 45])\n                rotate([0, 0, i*30])\n                scale([1.2, 0.3, 0.8])\n                cylinder(r1=5, r2=15, h=20);\n\n                color(color_wings)\n                translate([i*35, 0, 45])\n                rotate([0, 0, i*45])\n                scale([0.8, 0.2, 0.6])\n                cylinder(r1=3, r2=10, h=15);\n            }\n\n            // Arms\n            for(i = [-1, 1]) {\n                color(color_body)\n                translate([i*20, -10, 35])\n                rotate([0, 0, i*-30])\n                cylinder(r=4, h=15);\n\n                color(color_body)\n                translate([i*28, -15, 35])\n                sphere(r=5);\n\n                // Claws\n                for(j = [0, 1, 2]) {\n                    color(color_details)\n                    translate([i*28 + j*2 - 2, -18, 35])\n                    rotate([0, 90, 0])\n                    cylinder(r1=1, r2=0.5, h=5);\n                }\n            }\n\n            // Legs\n            for(i = [-1, 1]) {\n                color(color_body)\n                translate([i*15, 0, 15])\n                rotate([0, 0, i*15])\n                cylinder(r=4, h=20);\n\n                color(color_body)\n                translate([i*18, 0, 0])\n                sphere(r=5);\n\n                // Feet\n                color(color_body)\n                translate([i*18, 0, -5])\n                scale([1.2, 0.5, 0.3])\n                sphere(r=8);\n            }\n\n            // Back pattern\n            color(color_accents)\n            translate([0, -20, 50])\n            scale([0.5, 0.2, 1.5])\n            cylinder(r=12, h=5);\n\n            // Tail\n            color(color_body)\n            translate([0, -25, 30])\n            rotate([0, 20, 0])\n            cylinder(r1=6, r2=3, h=25);\n\n            color(color_accents)\n            translate([0, -45, 25])\n            rotate([0, 20, 0])\n            scale([1, 0.5, 1])\n            sphere(r=6);\n        }\n    }\n}\n\n// Render the model\nkricketune();",
    "renders": true
  },
  {
    "pokemon": "shinx",
    "openscad_code": "// OpenSCAD Shinx Pokemon Model - Realistic Style, Medium Complexity\n// Size: ~70mm tall, 3D printable\n\n// Color definitions\ncolor_body = [0.1, 0.1, 0.3];      // Dark blue\ncolor_acc = [0.9, 0.8, 0.2];       // Yellow\ncolor_eye = [1, 1, 1];             // White\ncolor_pupil = [0, 0, 0];           // Black\ncolor_nose = [0.4, 0.3, 0.6];      // Light blue\n\n// Main body\nmodule body() {\n    color(color_body)\n    union() {\n        // Torso\n        translate([0, 0, 10])\n            scale([1.2, 1, 1.5])\n            sphere(15);\n        \n        // Chest fur patch\n        translate([0, 14, 5])\n            scale([0.8, 0.3, 1.2])\n            color(color_acc)\n            sphere(8);\n    }\n}\n\n// Head\nmodule head() {\n    color(color_body)\n    union() {\n        // Main head\n        translate([0, 20, 25])\n            scale([1.3, 1, 1.1])\n            sphere(12);\n        \n        // Muzzle\n        translate([0, 30, 22])\n            scale([0.6, 0.8, 0.5])\n            sphere(8);\n        \n        // Ears\n        for(x = [-1, 1]) {\n            translate([x * 12, 15, 32])\n                rotate([0, x * -15, 0])\n                scale([0.4, 0.2, 1.2])\n                cylinder(15, 5, 3);\n            \n            // Ear tips\n            translate([x * 12, 15, 47])\n                color(color_acc)\n                sphere(3);\n        }\n        \n        // Eyes\n        for(x = [-1, 1]) {\n            translate([x * 6, 28, 27])\n                color(color_eye)\n                sphere(3);\n            translate([x * 6.5, 29.5, 27])\n                color(color_pupil)\n                sphere(1.5);\n        }\n        \n        // Nose\n        translate([0, 34, 22])\n            color(color_nose)\n            sphere(2);\n    }\n}\n\n// Legs\nmodule legs() {\n    color(color_body)\n    for(x = [-1, 1]) {\n        for(z = [0, 1]) {\n            translate([x * 12, 5, z * 15 + 5])\n                rotate([90, 0, 0])\n                cylinder(12, 4, 3);\n            \n            // Paws\n            translate([x * 12, 5, z * 15 - 3])\n                scale([1.2, 1, 0.6])\n                sphere(4);\n        }\n    }\n}\n\n// Tail\nmodule tail() {\n    color(color_body)\n    union() {\n        // Tail segments\n        for(i = [0:2]) {\n            translate([0, -15 - i * 8, 15 + i * 5])\n                rotate([0, 10, 0])\n                scale([1 - i * 0.2, 1 - i * 0.2, 0.8])\n                sphere(8 - i * 2);\n        }\n        \n        // Tail star\n        translate([0, -38, 28])\n            color(color_acc)\n            scale([1, 0.3, 1])\n            rotate([0, 90, 0])\n            cylinder(12, 5, 0);\n    }\n}\n\n// Front markings\nmodule markings() {\n    color(color_acc)\n    union() {\n        // Front legs\n        for(x = [-1, 1]) {\n            translate([x * 12, 8, 5])\n                rotate([0, 90, 0])\n                cylinder(8, 2, 2);\n        }\n        \n        // Hind legs\n        for(x = [-1, 1]) {\n            translate([x * 10, 8, 20])\n                rotate([0, 90, 0])\n                cylinder(8, 2, 2);\n        }\n    }\n}\n\n// Assembly\n$fn = 32;\nunion() {\n    body();\n    head();\n    legs();\n    tail();\n    markings();\n}",
    "renders": true
  },
  {
    "pokemon": "luxio",
    "openscad_code": "// Luxio - Electric type Pokemon\n// Medium complexity realistic style\n\n// Colors\n$fn = 30;\nbody_color = [0.2, 0.2, 0.3];\nmane_color = [0.9, 0.9, 0.9];\neye_color = [1, 0.8, 0];\naccent_color = [0.9, 0.9, 0];\n\n// Main body\nmodule body() {\n    color(body_color)\n    union() {\n        // Torso\n        translate([0, 0, 10])\n            scale([1.2, 0.8, 1])\n            sphere(r=12);\n        \n        // Chest\n        translate([0, -6, 7])\n            scale([0.8, 0.6, 0.8])\n            sphere(r=10);\n        \n        // Rear\n        translate([0, 10, 8])\n            scale([1, 1.2, 0.9])\n            sphere(r=11);\n    }\n}\n\n// Head with ears\nmodule head() {\n    color(body_color)\n    union() {\n        // Main head\n        translate([0, -18, 15])\n            scale([0.9, 1.1, 1.1])\n            sphere(r=10);\n        \n        // Snout\n        translate([0, -25, 12])\n            scale([0.7, 0.8, 0.6])\n            sphere(r=7);\n        \n        // Ears\n        for(x = [-8, 8]) {\n            translate([x, -20, 22])\n                rotate([0, x/4, 0])\n                scale([0.3, 0.3, 1.2])\n                cylinder(r1=6, r2=3, h=12);\n        }\n        \n        // Mane (electric)\n        color(mane_color)\n        for(i = [0:30:330]) {\n            rotate([0, 0, i])\n            translate([0, -20, 25])\n                scale([0.2, 1, 0.2])\n                cylinder(r1=3, r2=1, h=15);\n        }\n    }\n}\n\n// Eyes\nmodule eyes() {\n    color([0, 0, 0])\n    union() {\n        for(x = [-4, 4]) {\n            translate([x, -25, 16])\n                scale([1, 1.2, 0.5])\n                sphere(r=2);\n            \n            // Eye shine\n            color(eye_color)\n            translate([x+1, -26, 17])\n                sphere(r=1);\n        }\n    }\n}\n\n// Legs\nmodule legs() {\n    color(body_color)\n    union() {\n        for(y = [-8, 8])\n        for(x = [-6, 6]) {\n            translate([x, y, 0])\n                scale([0.3, 0.3, 1])\n                cylinder(r=4, h=10);\n            \n            // Paws\n            translate([x, y, -1])\n                sphere(r=4.5);\n        }\n    }\n}\n\n// Tail\nmodule tail() {\n    color(body_color)\n    union() {\n        // Tail base\n        translate([0, 18, 12])\n            rotate([0, -30, 0])\n            scale([0.5, 0.5, 2])\n            cylinder(r=5, h=20);\n        \n        // Tail tip\n        translate([0, 35, 5])\n            rotate([0, -30, 0])\n            scale([1.2, 0.3, 0.3])\n            sphere(r=6);\n        \n        // Electric pattern on tail\n        color(accent_color)\n        for(i = [0:3]) {\n            translate([0, 20 + i*4, 12 - i*1.5])\n                rotate([0, -30, 0])\n                scale([1.1, 0.4, 0.2])\n                sphere(r=3);\n        }\n    }\n}\n\n// Electric patterns on body\nmodule patterns() {\n    color(accent_color)\n    union() {\n        // Chest star\n        translate([0, -15, 12])\n            rotate([90, 0, 0])\n            linear_extrude(height=0.5)\n            polygon(points=[[0,0], [2,5], [0,10], [-2,5]]);\n        \n        // Side patterns\n        for(y = [-5, 5, 15]) {\n            for(x = [-9, 9]) {\n                translate([x, y, 12])\n                    sphere(r=1.5);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    eyes();\n    legs();\n    tail();\n    patterns();\n}",
    "renders": true
  },
  {
    "pokemon": "luxray",
    "openscad_code": "// Luxray 3D Model - Realistic Style, Medium Complexity\n// Size: 80mm long x 50mm high x 30mm wide\n\nmodule luxray_body() {\n    color([0.1, 0.1, 0.2]) {\n        // Main torso\n        translate([0, 0, 15]) {\n            scale([1.2, 0.8, 1]) {\n                sphere(d=30, $fn=20);\n            }\n        }\n        \n        // Chest\n        translate([0, -10, 15]) {\n            scale([1.1, 0.6, 1.2]) {\n                sphere(d=25, $fn=20);\n            }\n        }\n    }\n}\n\nmodule luxray_head() {\n    color([0.1, 0.1, 0.2]) {\n        // Main head shape\n        translate([22, 0, 35]) {\n            rotate([0, -10, 0]) {\n                scale([1.3, 0.9, 0.8]) {\n                    sphere(d=25, $fn=20);\n                }\n            }\n        }\n        \n        // Snout\n        translate([30, 0, 34]) {\n            rotate([0, -20, 0]) {\n                scale([0.8, 0.6, 0.5]) {\n                    cylinder(h=15, d1=12, d2=8, $fn=16);\n                }\n            }\n        }\n        \n        // Ears\n        for(side = [-1, 1]) {\n            translate([20, side*8, 45]) {\n                rotate([0, side*10, 0]) {\n                    scale([0.3, 1, 2]) {\n                        sphere(d=10, $fn=8);\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule luxray_legs() {\n    color([0.1, 0.1, 0.2]) {\n        // Front legs\n        for(side = [-1, 1]) {\n            translate([15, side*12, 0]) {\n                rotate([0, 0, 0]) {\n                    scale([0.8, 0.8, 1]) {\n                        cylinder(h=20, d=8, $fn=16);\n                    }\n                }\n            }\n            \n            // Front paws\n            translate([15, side*12, 0]) {\n                sphere(d=10, $fn=16);\n            }\n            \n            // Back legs\n            translate([-15, side*12, 0]) {\n                rotate([0, 0, 0]) {\n                    scale([1, 1, 1.2]) {\n                        cylinder(h=22, d=9, $fn=16);\n                    }\n                }\n            }\n            \n            // Back paws\n            translate([-15, side*12, 0]) {\n                sphere(d=11, $fn=16);\n            }\n        }\n    }\n}\n\nmodule luxray_tail() {\n    color([0.1, 0.1, 0.2]) {\n        // Tail segments\n        for(i = [0:3]) {\n            translate([-25 - i*8, 0, 15 + i*2]) {\n                scale([1 - i*0.15, 1 - i*0.1, 0.5]) {\n                    sphere(d=12 - i*2, $fn=16);\n                }\n            }\n        }\n        \n        // Tail tip\n        translate([-55, 0, 22]) {\n            scale([0.8, 0.8, 1.5]) {\n                sphere(d=8, $fn=16);\n            }\n        }\n    }\n}\n\nmodule luxray_features() {\n    // Electric mane\n    color([0.8, 0.6, 0]) {\n        for(i = [0:7]) {\n            rotate([0, 0, i*45]) {\n                translate([25, 0, 38]) {\n                    scale([0.3, 0.3, 1.5]) {\n                        cylinder(h=8 + sin(i*45)*2, d=3, $fn=8);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Eye markings\n    color([0.8, 0.6, 0]) {\n        for(side = [-1, 1]) {\n            translate([27, side*6, 36]) {\n                scale([1.5, 0.4, 0.2]) {\n                    sphere(d=6, $fn=16);\n                }\n            }\n        }\n    }\n    \n    // Eyes\n    color([1, 1, 1]) {\n        for(side = [-1, 1]) {\n            translate([29, side*5, 36]) {\n                sphere(d=4, $fn=16);\n            }\n        }\n    }\n    \n    // Eye pupils\n    color([0, 0, 0]) {\n        for(side = [-1, 1]) {\n            translate([31, side*5, 36]) {\n                sphere(d=2, $fn=16);\n            }\n        }\n    }\n    \n    // Nose\n    color([0.2, 0.2, 0.3]) {\n        translate([34, 0, 33]) {\n            sphere(d=3, $fn=16);\n        }\n    }\n    \n    // Chest star\n    color([0.8, 0.6, 0]) {\n        translate([0, -15, 20]) {\n            scale([1, 1, 0.2]) {\n                cylinder(h=2, d=8, $fn=5);\n            }\n        }\n    }\n    \n    // Leg stripes\n    color([0.8, 0.6, 0]) {\n        for(side = [-1, 1]) {\n            // Front leg stripes\n            translate([15, side*12, 10]) {\n                rotate([90, 0, 0]) {\n                    cylinder(h=8, d=2, $fn=16);\n                }\n            }\n            \n            // Back leg stripes\n            translate([-15, side*12, 10]) {\n                rotate([90, 0, 0]) {\n                    cylinder(h=10, d=2, $fn=16);\n                }\n            }\n        }\n    }\n}\n\n// Assemble the model\nunion() {\n    luxray_body();\n    luxray_head();\n    luxray_legs();\n    luxray_tail();\n    luxray_features();\n}",
    "renders": true
  },
  {
    "pokemon": "budew",
    "openscad_code": "// Budew Pokemon - Realistic Style\n// Size: Approximately 80mm height\n\n// Parameters\nbudew_scale = 0.8;\nbody_radius = 25 * budew_scale;\nhead_radius = 20 * budew_scale;\nbud_color = \"#228B22\";\nrose_color = \"#FF69B4\";\neye_color = \"#FF0000\";\nface_color = \"#90EE90\";\nstem_color = \"#006400\";\n\n// Main model\nunion() {\n    // Body\n    color(bud_color) {\n        translate([0, 0, 0]) {\n            sphere(r = body_radius, $fn = 32);\n        }\n    }\n    \n    // Head\n    color(bud_color) {\n        translate([0, 0, body_radius + head_radius - 5]) {\n            sphere(r = head_radius, $fn = 32);\n        }\n    }\n    \n    // Rose buds (left and right)\n    module rose_bud(x_pos, z_rot) {\n        color(rose_color) {\n            translate([x_pos, 0, body_radius + head_radius + 5]) {\n                rotate([0, 0, z_rot]) {\n                    // Main bud\n                    sphere(r = 8 * budew_scale, $fn = 16);\n                    // Petal details\n                    for(i = [0:45:315]) {\n                        rotate([0, 0, i]) {\n                            translate([5 * budew_scale, 0, 0]) {\n                                scale([1.5, 0.7, 0.7]) {\n                                    sphere(r = 4 * budew_scale, $fn = 8);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    rose_bud(-12 * budew_scale, -20);\n    rose_bud(12 * budew_scale, 20);\n    \n    // Face\n    color(face_color) {\n        // Eyes\n        module eye(x_pos) {\n            color(eye_color) {\n                translate([x_pos, -head_radius + 2, body_radius + head_radius]) {\n                    sphere(r = 3 * budew_scale, $fn = 16);\n                }\n            }\n            // Eye highlight\n            color(\"white\") {\n                translate([x_pos + 1, -head_radius + 3, body_radius + head_radius + 2]) {\n                    sphere(r = 1 * budew_scale, $fn = 8);\n                }\n            }\n        }\n        \n        eye(-6 * budew_scale);\n        eye(6 * budew_scale);\n        \n        // Mouth\n        color(\"#8B0000\") {\n            translate([0, -head_radius + 1, body_radius + head_radius - 8]) {\n                rotate([90, 0, 0]) {\n                    cylinder(h = 0.5, r1 = 3 * budew_scale, r2 = 2 * budew_scale, $fn = 16);\n                }\n            }\n        }\n    }\n    \n    // Arms/Leaves\n    module leaf(x_pos, rot_z) {\n        color(stem_color) {\n            translate([x_pos, 0, 0]) {\n                rotate([0, 0, rot_z]) {\n                    translate([-8 * budew_scale, 0, 5 * budew_scale]) {\n                        rotate([0, 90, 0]) {\n                            scale([1, 0.3, 0.1]) {\n                                sphere(r = 15 * budew_scale, $fn = 16);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    leaf(-body_radius + 5, -30);\n    leaf(body_radius - 5, 30);\n    \n    // Feet\n    module foot(x_pos) {\n        color(bud_color) {\n            translate([x_pos, 0, -body_radius + 3]) {\n                sphere(r = 8 * budew_scale, $fn = 16);\n            }\n        }\n    }\n    \n    foot(-10 * budew_scale);\n    foot(10 * budew_scale);\n    \n    // Stem at bottom\n    color(stem_color) {\n        translate([0, 0, -body_radius - 5]) {\n            cylinder(h = 10 * budew_scale, r = 5 * budew_scale, $fn = 16);\n        }\n    }\n    \n    // Yellow spots on body\n    module yellow_spot(angle, height) {\n        color(\"#FFD700\") {\n            rotate([0, 0, angle]) {\n                translate([body_radius - 1, 0, height]) {\n                    sphere(r = 2 * budew_scale, $fn = 8);\n                }\n            }\n        }\n    }\n    \n    for(i = [0:60:359]) {\n        yellow_spot(i, 10 * budew_scale * sin(i));\n    }\n}",
    "renders": true
  },
  {
    "pokemon": "roserade",
    "openscad_code": "// Roserade OpenSCAD Model - Realistic Style, Medium Complexity\n// Approximate height: 80mm\n\n$fn = 32;\n\n// Main colors\nrosa_color = [0.8, 0.2, 0.4];\nleaf_color = [0.1, 0.6, 0.2];\nmask_color = [0.95, 0.95, 0.95];\neye_color = [0.1, 0.1, 0.1];\n\n// Head with mask\nmodule head() {\n    color(mask_color) {\n        // Main head sphere\n        translate([0, 0, 70])\n            sphere(r=12);\n        \n        // Mask extension\n        translate([0, 0, 58])\n            cylinder(h=15, r1=10, r2=12);\n        \n        // Mask petals\n        for(i=[0:5]) {\n            rotate([0, 0, i*60])\n                translate([16, 0, 65])\n                    rotate([0, 90, 0])\n                        scale([1, 0.4, 1])\n                            cylinder(h=12, r1=6, r2=0);\n        }\n    }\n}\n\n// Hair roses\nmodule roses() {\n    color(rosa_color) {\n        // Front roses\n        translate([8, 12, 82])\n            rose();\n        translate([-8, 12, 82])\n            mirror([1, 0, 0])\n                rose();\n        \n        // Back roses\n        translate([6, -10, 80])\n            rose();\n        translate([-6, -10, 80])\n            mirror([1, 0, 0])\n                rose();\n    }\n}\n\n// Single rose module\nmodule rose() {\n    // Rose center\n    sphere(r=3);\n    \n    // Petals\n    for(i=[0:4]) {\n        rotate([0, 0, i*72])\n            translate([2, 0, 0])\n                rotate([90, 0, 0])\n                    scale([0.8, 0.8, 0.3])\n                        cylinder(h=4, r1=3, r2=0);\n    }\n}\n\n// Eyes\nmodule eyes() {\n    color(eye_color) {\n        // Left eye\n        translate([-5, 12, 70])\n            scale([1, 1.2, 0.5])\n                sphere(r=2);\n        \n        // Right eye\n        translate([5, 12, 70])\n            scale([1, 1.2, 0.5])\n                sphere(r=2);\n    }\n}\n\n// Body\nmodule body() {\n    color(leaf_color) {\n        // Main body\n        translate([0, 0, 40])\n            scale([1, 0.8, 1.2])\n                sphere(r=15);\n        \n        // Dress-like bottom\n        translate([0, 0, 25])\n            cylinder(h=20, r1=15, r2=20);\n    }\n}\n\n// Arms with roses\nmodule arms() {\n    color(leaf_color) {\n        // Left arm\n        translate([-20, 10, 50])\n            rotate([0, 0, -30])\n                scale([0.3, 0.3, 3])\n                    sphere(r=4);\n        \n        // Right arm\n        translate([20, 10, 50])\n            rotate([0, 0, 30])\n                scale([0.3, 0.3, 3])\n                    sphere(r=4);\n        \n        // Hand roses\n        color(rosa_color) {\n            translate([-25, 8, 38])\n                rose();\n            translate([25, 8, 38])\n                rose();\n        }\n    }\n}\n\n// Leaf cape\nmodule cape() {\n    color(leaf_color) {\n        for(i=[0:5]) {\n            rotate([0, 0, i*60])\n                translate([18, 0, 50])\n                    rotate([0, 110, 0])\n                        scale([1, 0.3, 1])\n                            cylinder(h=25, r1=10, r2=5);\n        }\n    }\n}\n\n// Legs\nmodule legs() {\n    color(leaf_color) {\n        // Left leg\n        translate([-6, 0, 15])\n            cylinder(h=15, r=4);\n        \n        // Right leg\n        translate([6, 0, 15])\n            cylinder(h=15, r=4);\n        \n        // Feet\n        translate([-6, 0, 0])\n            scale([1.2, 2, 0.5])\n                sphere(r=5);\n        translate([6, 0, 0])\n            scale([1.2, 2, 0.5])\n                sphere(r=5);\n    }\n}\n\n// Assembly\nunion() {\n    legs();\n    body();\n    cape();\n    arms();\n    head();\n    roses();\n    eyes();\n}",
    "renders": true
  },
  {
    "pokemon": "cranidos",
    "openscad_code": "// Cranidos - Realistic Style, Medium Complexity\n// Based on Pokemon Diamond/Pearl design\n// Overall height: ~80mm\n\n$fn = 32; // Smooth curves\n\nmodule cranidos() {\n    color(\"royalblue\") {\n        // Main head dome\n        translate([0, 0, 40])\n            scale([1, 1.2, 1])\n                sphere(25);\n        \n        // Head dome rim\n        translate([0, 0, 30])\n            scale([1.1, 1.3, 0.4])\n                cylinder(h=15, r=25);\n    }\n    \n    // Snout\n    color(\"royalblue\") {\n        translate([0, 35, 30])\n            scale([0.8, 1.2, 0.7])\n                cylinder(h=20, r=15);\n    }\n    \n    // Lower jaw\n    color(\"royalblue\") {\n        translate([0, 35, 20])\n            rotate([20, 0, 0])\n                cube([25, 15, 8], center=true);\n    }\n    \n    // Eye sockets (left and right)\n    color(\"black\") {\n        for(side = [-1, 1]) {\n            translate([side * 15, 25, 38])\n                sphere(5);\n        }\n    }\n    \n    // Eyes (white part)\n    color(\"white\") {\n        for(side = [-1, 1]) {\n            translate([side * 15, 25, 40])\n                sphere(3);\n        }\n    }\n    \n    // Nose\n    color(\"black\") {\n        translate([0, 45, 30])\n            sphere(3);\n    }\n    \n    // Head spikes - main central\n    color(\"slategray\") {\n        translate([0, 0, 65])\n            rotate([0, 0, 0])\n                cylinder(h=15, r1=8, r2=0);\n    }\n    \n    // Side spikes\n    color(\"slategray\") {\n        for(angle = [30, 150]) {\n            rotate([0, 0, angle])\n                translate([0, 20, 60])\n                    rotate([-20, 0, 0])\n                        cylinder(h=12, r1=5, r2=0);\n        }\n    }\n    \n    // Back spikes\n    color(\"slategray\") {\n        for(angle = [-45, -135]) {\n            rotate([0, 0, angle])\n                translate([0, 15, 55])\n                    rotate([0, 20, 0])\n                        cylinder(h=10, r1=4, r2=0);\n        }\n    }\n    \n    // Body\n    color(\"royalblue\") {\n        translate([0, -5, 15])\n            scale([1.2, 1, 1.5])\n                sphere(15);\n    }\n    \n    // Chest plate\n    color(\"slategray\") {\n        translate([0, 5, 10])\n            scale([1.3, 0.8, 0.5])\n                cube([20, 15, 8], center=true);\n    }\n    \n    // Arms\n    color(\"royalblue\") {\n        for(side = [-1, 1]) {\n            translate([side * 15, 0, 20])\n                rotate([0, side * 20, 0])\n                    cylinder(h=15, r=4);\n            \n            // Hands - simple claws\n            translate([side * 20, 0, 20])\n                sphere(5);\n        }\n    }\n    \n    // Legs\n    color(\"royalblue\") {\n        for(side = [-1, 1]) {\n            translate([side * 8, -15, 10])\n                rotate([0, side * 10, 0])\n                    cylinder(h=20, r=5);\n            \n            // Feet\n            translate([side * 10, -25, 0])\n                scale([1.5, 2, 0.8])\n                    cube([10, 8, 5], center=true);\n            \n            // Toes\n            color(\"slategray\") {\n                for(toe = [-1, 0, 1]) {\n                    translate([side * 10 + toe * 3, -30, 0])\n                        sphere(2);\n                }\n            }\n        }\n    }\n    \n    // Tail\n    color(\"royalblue\") {\n        translate([0, -25, 15])\n            rotate([0, 0, 30])\n                cylinder(h=20, r1=6, r2=3);\n    }\n    \n    // Back plates\n    color(\"slategray\") {\n        for(i = [1:3]) {\n            translate([0, -15 - i * 5, 18 - i * 3])\n                scale([1.5 - i * 0.2, 1, 0.3])\n                    cube([15 - i * 2, 8, 3], center=true);\n        }\n    }\n    \n    // Markings on head\n    color(\"slategray\") {\n        translate([0, 15, 50])\n            scale([0.3, 1.5, 0.1])\n                cube([20, 15, 2], center=true);\n        \n        translate([0, 20, 45])\n            scale([0.2, 1.2, 0.1])\n                cube([15, 10, 2], center=true);\n    }\n}\n\n// Generate the model\ncranidos();",
    "renders": true
  },
  {
    "pokemon": "rampardos",
    "openscad_code": "// Rampardos - Realistic Style, Medium Complexity\n// 3D printable, ~80mm tall\n\nmodule rampardos() {\n    // Main body\n    color([0.6, 0.5, 0.45]) {\n        translate([0, 0, 20]) {\n            // Torso\n            scale([1.2, 0.9, 1.5]) sphere(d=40);\n            \n            // Belly\n            color([0.75, 0.65, 0.55])\n            translate([0, -5, -10]) scale([1, 0.8, 1.2]) sphere(d=30);\n        }\n    }\n    \n    // Head\n    color([0.6, 0.5, 0.45]) {\n        translate([0, 0, 65]) {\n            // Main head structure\n            scale([1.5, 1.2, 1.3]) sphere(d=45);\n            \n            // Snout\n            translate([0, 25, -10]) scale([0.7, 1.2, 0.6]) sphere(d=20);\n            \n            // Forehead dome\n            translate([0, 0, 10]) scale([1.4, 1.1, 0.8]) sphere(d=35);\n        }\n    }\n    \n    // Blue head crest\n    color([0.2, 0.3, 0.6]) {\n        translate([0, 20, 75]) {\n            // Crest base\n            scale([1.8, 0.3, 0.8]) cube([30, 10, 15], center=true);\n            \n            // Crest spikes\n            for(i = [-1, 0, 1]) {\n                translate([i * 15, 0, 5]) {\n                    rotate([0, 30, 0]) scale([0.3, 0.3, 1]) cylinder(h=12, d1=5, d2=0);\n                }\n            }\n        }\n    }\n    \n    // Eyes\n    color([0.9, 0.2, 0.2]) {\n        translate([-15, 20, 60]) sphere(d=8);\n        translate([15, 20, 60]) sphere(d=8);\n    }\n    \n    // Eye pupils\n    color([0, 0, 0]) {\n        translate([-15, 22, 62]) sphere(d=3);\n        translate([15, 22, 62]) sphere(d=3);\n    }\n    \n    // Nostrils\n    color([0.2, 0.2, 0.2]) {\n        translate([-7, 35, 55]) sphere(d=3);\n        translate([7, 35, 55]) sphere(d=3);\n    }\n    \n    // Mouth\n    color([0.3, 0.1, 0.1]) {\n        translate([0, 35, 50]) {\n            rotate([90, 0, 0]) cylinder(h=10, d1=10, d2=15);\n        }\n    }\n    \n    // Horns\n    color([0.7, 0.6, 0.5]) {\n        // Main horn\n        translate([0, -10, 75]) {\n            rotate([0, -20, 0]) cylinder(h=30, d1=15, d2=5);\n        }\n        \n        // Side horns\n        translate([-25, 5, 65]) {\n            rotate([0, -30, -30]) cylinder(h=20, d1=8, d2=3);\n        }\n        translate([25, 5, 65]) {\n            rotate([0, -30, 30]) cylinder(h=20, d1=8, d2=3);\n        }\n    }\n    \n    // Arms\n    color([0.6, 0.5, 0.45]) {\n        // Left arm\n        translate([-25, 10, 40]) {\n            rotate([0, 0, -30]) cylinder(h=30, d=12);\n            translate([0, 0, -20]) sphere(d=12);\n            translate([0, 0, 10]) rotate([0, 90, 0]) cylinder(h=20, d=10);\n        }\n        \n        // Right arm\n        translate([25, 10, 40]) {\n            rotate([0, 0, 30]) cylinder(h=30, d=12);\n            translate([0, 0, -20]) sphere(d=12);\n            translate([0, 0, 10]) rotate([0, 90, 0]) cylinder(h=20, d=10);\n        }\n    }\n    \n    // Legs\n    color([0.6, 0.5, 0.45]) {\n        // Left leg\n        translate([-15, -10, 0]) {\n            cylinder(h=40, d1=15, d2=12);\n            translate([0, 0, -25]) sphere(d=15);\n        }\n        \n        // Right leg\n        translate([15, -10, 0]) {\n            cylinder(h=40, d1=15, d2=12);\n            translate([0, 0, -25]) sphere(d=15);\n        }\n    }\n    \n    // Tail\n    color([0.6, 0.5, 0.45]) {\n        translate([0, -25, 15]) {\n            rotate([0, 30, 0]) cylinder(h=25, d1=15, d2=8);\n            translate([0, 0, 15]) sphere(d=8);\n        }\n    }\n    \n    // Back spikes\n    color([0.7, 0.6, 0.5]) {\n        for(i = [0:1:3]) {\n            translate([0, -20 + i * 10, 40 - i * 5]) {\n                rotate([0, 30 + i * 10, 0]) cylinder(h=8, d1=5, d2=0);\n            }\n        }\n    }\n    \n    // Gray markings on limbs\n    color([0.5, 0.4, 0.35]) {\n        // Arm markings\n        translate([-25, 10, 35]) scale([1.2, 1.2, 0.3]) sphere(d=10);\n        translate([25, 10, 35]) scale([1.2, 1.2, 0.3]) sphere(d=10);\n        \n        // Leg markings\n        translate([-15, -10, 15]) scale([1.2, 1.2, 0.3]) sphere(d=12);\n        translate([15, -10, 15]) scale([1.2, 1.2, 0.3]) sphere(d=12);\n    }\n}\n\n// Scale and position for printing\nscale([0.8, 0.8, 0.8])\nrotate([0, 0, 0])\nrampardos();",
    "renders": true
  },
  {
    "pokemon": "shieldon",
    "openscad_code": "// Shieldon OpenSCAD model\n// Realistic style, medium complexity\n\n$fn = 32;\n\nmodule shieldon() {\n    color(\"#8B5A2B\") {\n        // Main body\n        union() {\n            // Torso\n            translate([0, 0, 15])\n                scale([1.2, 1, 1])\n                sphere(12);\n            \n            // Belly\n            translate([0, -5, 10])\n                scale([0.8, 0.6, 0.5])\n                sphere(10);\n            \n            // Head connection\n            translate([0, 5, 25])\n                cylinder(h=8, r1=6, r2=8);\n        }\n    }\n    \n    color(\"#A0522D\") {\n        // Head\n        translate([0, 12, 30])\n            scale([1.3, 1.1, 1.2])\n            sphere(10);\n        \n        // Snout\n        translate([0, 20, 28])\n            scale([0.8, 1.2, 0.7])\n            sphere(7);\n    }\n    \n    color(\"#696969\") {\n        // Shield plate\n        difference() {\n            translate([0, 8, 32])\n                scale([1.6, 0.8, 1.2])\n                rotate([0, 10, 0])\n                cube([20, 4, 16], center=true);\n            \n            // Shield pattern cutouts\n            for(i = [-1, 0, 1]) {\n                translate([i * 5, 6, 38])\n                    rotate([0, 10, 0])\n                    cylinder(h=10, r=1.5, center=true);\n            }\n        }\n        \n        // Nose horn\n        translate([0, 25, 30])\n            rotate([30, 0, 0])\n            cylinder(h=8, r1=3, r2=1);\n        \n        // Head horns\n        for(side = [-1, 1]) {\n            translate([side * 10, 14, 38])\n                rotate([0, side * 20, 0])\n                cylinder(h=12, r1=3, r2=1);\n        }\n    }\n    \n    color(\"#8B5A2B\") {\n        // Legs\n        for(side = [-1, 1]) {\n            // Front legs\n            translate([side * 8, 5, 8])\n                rotate([0, side * 15, 0])\n                cylinder(h=12, r=3);\n            \n            // Back legs\n            translate([side * 7, -8, 5])\n                rotate([0, side * -15, 0])\n                cylinder(h=10, r=3);\n            \n            // Feet\n            translate([side * 9, 5, -2])\n                scale([1.2, 1.5, 0.5])\n                sphere(3);\n            \n            translate([side * 8, -10, -2])\n                scale([1.2, 1.5, 0.5])\n                sphere(3);\n        }\n        \n        // Tail\n        translate([0, -15, 12])\n            rotate([0, 0, 20])\n            cylinder(h=10, r1=4, r2=2);\n    }\n    \n    // Eyes\n    color(\"#2F4F4F\") {\n        for(side = [-1, 1]) {\n            translate([side * 5, 18, 32])\n                scale([0.8, 1, 1])\n                sphere(2);\n        }\n    }\n    \n    // Eye highlights\n    color(\"white\") {\n        for(side = [-1, 1]) {\n            translate([side * 4.5, 18.5, 33])\n                sphere(0.8);\n        }\n    }\n    \n    // Nostrils\n    color(\"#000000\") {\n        for(side = [-1, 1]) {\n            translate([side * 2, 22, 28])\n                sphere(1);\n        }\n    }\n    \n    // Body markings\n    color(\"#D2691E\") {\n        // Back stripes\n        translate([0, 0, 25])\n            scale([1.4, 0.5, 0.3])\n            cube([20, 10, 3], center=true);\n        \n        translate([0, -5, 20])\n            scale([1.2, 0.4, 0.3])\n            cube([18, 8, 3], center=true);\n    }\n}\n\n// Create the model\nshieldon();",
    "renders": true
  },
  {
    "pokemon": "bastiodon",
    "openscad_code": "// Realistic Bastiodon Pokemon - Medium Complexity\n// Scale: ~80mm wide\n\n$fn = 32;\n\n// Main colors\ncolor_bastiodon = \"#8B7355\";\ncolor_face = \"#4A4A4A\";\ncolor_horns = \"#6B5B47\";\ncolor_eyes = \"#FF4444\";\n\n// Main shield head\nmodule shield_head() {\n    color(color_bastiodon)\n    union() {\n        // Central dome\n        translate([0, 0, 15])\n        scale([1, 1.2, 0.8])\n        sphere(d=60);\n        \n        // Front shield plate\n        translate([0, 25, 10])\n        scale([1.2, 0.3, 1])\n        cube([70, 20, 50], center=true);\n    }\n}\n\n// Face mask\nmodule face_mask() {\n    color(color_face)\n    difference() {\n        // Main mask\n        translate([0, 30, 15])\n        scale([0.8, 0.3, 0.6])\n        sphere(d=50);\n        \n        // Eye holes\n        for(x = [-15, 15])\n            translate([x, 35, 20])\n            scale([1, 1.5, 1])\n            sphere(d=12);\n        \n        // Nostril holes\n        for(x = [-8, 8])\n            translate([x, 35, 10])\n            cylinder(h=10, d=5);\n    }\n}\n\n// Horns\nmodule horns() {\n    color(color_horns)\n    union() {\n        // Top horns\n        for(x = [-20, 20]) {\n            translate([x, 10, 45])\n            rotate([0, 20 * (x > 0 ? 1 : -1), 0])\n            cylinder(h=25, d1=12, d2=6);\n        }\n        \n        // Side horns\n        for(x = [-35, 35]) {\n            translate([x, 20, 25])\n            rotate([0, 0, 30 * (x > 0 ? -1 : 1)])\n            cylinder(h=20, d1=10, d2=5);\n        }\n    }\n}\n\n// Eyes\nmodule eyes() {\n    color(color_eyes)\n    for(x = [-15, 15]) {\n        translate([x, 35, 20])\n        scale([0.8, 1, 1])\n        sphere(d=8);\n    }\n}\n\n// Body\nmodule body() {\n    color(color_bastiodon)\n    union() {\n        // Main body\n        translate([0, -30, 0])\n        scale([1, 1.5, 0.8])\n        sphere(d=50);\n        \n        // Leg positions\n        for(x = [-20, 20])\n            for(y = [-40, -20])\n                translate([x, y, -15])\n                cylinder(h=20, d=12);\n    }\n}\n\n// Back plates\nmodule back_plates() {\n    color(color_bastiodon)\n    for(i = [0:2]) {\n        translate([0, -40 - i*15, 10 + i*5])\n        rotate([10, 0, 0])\n        scale([1.2 - i*0.1, 0.2, 0.8 - i*0.1])\n        cube([60 - i*10, 10, 40 - i*10], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main parts\n    shield_head();\n    face_mask();\n    horns();\n    eyes();\n    body();\n    back_plates();\n}",
    "renders": true
  },
  {
    "pokemon": "burmy",
    "openscad_code": "$fn=30;\n\n// Burmy Pokemon - realistic style, medium complexity\n// Total height ~70mm\n\n// Main cloak module\nmodule cloak() {\n    color([0.4,0.3,0.1]) {\n        // Base cloak body\n        difference() {\n            // Main cloak shape\n            rotate([0,90,0]) \n                cylinder(h=40, d1=35, d2=25, center=true);\n            \n            // Carve out body cavity\n            translate([0,-5,0])\n                rotate([0,90,0]) \n                    cylinder(h=45, d1=25, d2=15, center=true);\n            \n            // Remove bottom opening\n            translate([0,-20,0])\n                cube([40,25,40], center=true);\n        }\n        \n        // Add cloak segments\n        for(i=[-20:10:20]) {\n            translate([i,0,0])\n                rotate([0,90,0]) \n                    cylinder(h=40, d1=2, d2=1, center=true);\n        }\n    }\n}\n\n// Head module\nmodule head() {\n    color([0.95,0.85,0.75]) {\n        // Main head sphere\n        translate([0,0,35])\n            sphere(d=20);\n        \n        // Eye sockets\n        for(side=[-1,1]) {\n            translate([side*6, 5, 38])\n                color([0.1,0.1,0.1])\n                    sphere(d=5);\n            \n            // Eye highlights\n            translate([side*5, 6, 39])\n                color([1,1,1])\n                    sphere(d=2);\n        }\n        \n        // Mouth\n        translate([0, -5, 32])\n            color([0.8,0.2,0.2])\n            rotate([90,0,0])\n                cylinder(h=1, d1=6, d2=3);\n    }\n}\n\n// Antenna module\nmodule antenna() {\n    color([0.95,0.85,0.75]) {\n        // Stem\n        translate([0,0,45])\n            rotate([0,0,0])\n                cylinder(h=15, d=2, center=true);\n        \n        // Tip\n        translate([0,0,52])\n            sphere(d=4);\n    }\n}\n\n// Arms module\nmodule arms() {\n    color([0.95,0.85,0.75]) {\n        for(side=[-1,1]) {\n            translate([side*12, 0, 25])\n                rotate([0,0,side*30])\n                    cylinder(h=10, d=4, center=true);\n        }\n    }\n}\n\n// Leaves and twigs decoration on cloak\nmodule cloak_decorations() {\n    // Leaves\n    color([0.2,0.5,0.2]) {\n        for(angle=[0:60:360]) {\n            rotate([0,0,angle])\n                translate([15,0,10])\n                    rotate([0,90,0])\n                        cylinder(h=8, d1=4, d2=1, center=true);\n        }\n    }\n    \n    // Twigs\n    color([0.4,0.3,0.1]) {\n        for(angle=[30:60:330]) {\n            rotate([0,0,angle])\n                translate([12,0,5])\n                    rotate([0,90,45])\n                        cylinder(h=5, d=2, center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    cloak();\n    cloak_decorations();\n    head();\n    antenna();\n    arms();\n}",
    "renders": true
  },
  {
    "pokemon": "wormadam",
    "openscad_code": "// Wormadam - Plant Cloak Form\n// Medium complexity realistic style\n\n// Main body color - brown cloak\ncloak_color = \"#8B4513\";\n// Body color - pinkish\nbody_color = \"#FFB6C1\";\n// Eye color\neye_color = \"#000000\";\n// Leaf color\nleaf_color = \"#228B22\";\n// Accent color\naccent_color = \"#654321\";\n\n// Overall scale factor for 3D printing\nscale_factor = 0.6;\n\n// Main module\nmodule wormadam_plant_cloak() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        // Plant cloak body\n        color(cloak_color) {\n            // Main cloak body\n            difference() {\n                union() {\n                    // Central bulbous body\n                    sphere(d = 40);\n                    // Extend bottom for dress-like appearance\n                    translate([0, 0, -10]) {\n                        cylinder(h = 25, d1 = 40, d2 = 30, $fn = 32);\n                    }\n                }\n                // Hollow out interior\n                translate([0, 0, -5]) {\n                    sphere(d = 35);\n                }\n            }\n            \n            // Cloak opening at bottom\n            translate([0, 0, -25]) {\n                difference() {\n                    cylinder(h = 10, d = 30, $fn = 32);\n                    cylinder(h = 11, d = 20, $fn = 32);\n                }\n            }\n        }\n        \n        // Actual worm body inside cloak\n        color(body_color) {\n            translate([0, 0, -5]) {\n                // Main body segment\n                sphere(d = 25);\n                \n                // Head segment\n                translate([0, 0, 15]) {\n                    sphere(d = 20);\n                }\n            }\n        }\n        \n        // Eyes\n        color(eye_color) {\n            // Left eye\n            translate([-7, 10, 15]) {\n                sphere(d = 5);\n            }\n            // Right eye\n            translate([7, 10, 15]) {\n                sphere(d = 5);\n            }\n        }\n        \n        // Mouth\n        color(accent_color) {\n            translate([0, 12, 10]) {\n                rotate([0, 90, 0]) {\n                    cylinder(h = 8, d = 2, $fn = 16);\n                }\n            }\n        }\n        \n        // Antennae\n        color(body_color) {\n            // Left antenna\n            translate([-5, 12, 25]) {\n                rotate([30, 0, -20]) {\n                    cylinder(h = 15, d = 3, $fn = 16);\n                }\n            }\n            // Right antenna\n            translate([5, 12, 25]) {\n                rotate([30, 0, 20]) {\n                    cylinder(h = 15, d = 3, $fn = 16);\n                }\n            }\n        }\n        \n        // Plant cloak details - leaves\n        color(leaf_color) {\n            for(i = [0:119]) {\n                rotate([0, 0, i * 3]) {\n                    translate([20, 0, 0]) {\n                        rotate([90, 0, 0]) {\n                            scale([1, 1.5, 0.5]) {\n                                leaf();\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Cloak texture lines\n        color(accent_color) {\n            for(i = [0:7]) {\n                rotate([0, 0, i * 45]) {\n                    translate([0, 0, 10 - i * 2.5]) {\n                        difference() {\n                            cylinder(h = 15, d1 = 38 - i * 2, d2 = 35 - i * 2, $fn = 32);\n                            cylinder(h = 16, d1 = 37 - i * 2, d2 = 34 - i * 2, $fn = 32);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Small flowers on cloak\n        color(\"#FFD700\") {\n            for(i = [0:5]) {\n                angle = i * 60;\n                translate([18 * cos(angle), 18 * sin(angle), 5 + i * 3]) {\n                    rotate([0, 0, angle]) {\n                        flower();\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Leaf module\nmodule leaf() {\n    difference() {\n        union() {\n            // Main leaf shape\n            translate([0, 0, 0]) {\n                cube([3, 8, 1], center = true);\n            }\n            // Leaf tip\n            translate([0, 4.5, 0]) {\n                rotate([0, 0, 0]) {\n                    cylinder(h = 3, d1 = 3, d2 = 0.5, $fn = 8);\n                }\n            }\n        }\n        // Leaf vein indentation\n        translate([0, 0, 0.6]) {\n            cube([0.5, 8, 1.1], center = true);\n        }\n    }\n}\n\n// Flower module\nmodule flower() {\n    union() {\n        // Center\n        sphere(d = 2);\n        \n        // Petals\n        for(i = [0:4]) {\n            rotate([0, 0, i * 72]) {\n                translate([0, 2.5, 0]) {\n                    scale([0.8, 1.5, 0.3]) {\n                        sphere(d = 2);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Generate the model\nwormadam_plant_cloak();",
    "renders": true
  },
  {
    "pokemon": "mothim",
    "openscad_code": "// Mothim - Realistic Style, Medium Complexity\n// Approximate size: 80mm wingspan, 60mm length\n\n// Colors\ncolor_orange = [1, 0.6, 0.2];\ncolor_yellow = [1, 0.9, 0.3];\ncolor_black = [0.1, 0.1, 0.1];\ncolor_white = [0.95, 0.95, 0.9];\ncolor_transparent = [1, 1, 1, 0.5];\n\n// Main body\nmodule body() {\n    color(color_orange)\n    union() {\n        // Thorax\n        translate([0, 0, 10])\n        scale([1, 1.2, 1.5])\n        sphere(8);\n        \n        // Abdomen\n        translate([0, 0, 5])\n        scale([0.8, 0.9, 1.2])\n        cylinder(10, 8, 6);\n        \n        // Head\n        translate([0, 12, 18])\n        scale([1, 1.3, 1.1])\n        sphere(7);\n    }\n}\n\n// Wings with realistic venation\nmodule wing() {\n    color(color_yellow)\n    difference() {\n        // Main wing shape\n        scale([3, 1, 0.2])\n        sphere(10);\n        \n        // Wing tip cut\n        translate([28, 0, 0])\n        rotate([0, 0, -30])\n        cube([15, 20, 2]);\n    }\n    \n    // Wing veins\n    color(color_black)\n    for(i = [-1:1]) {\n        translate([0, i*3, 0.1])\n        scale([2.5, 0.1, 0.05])\n        sphere(10);\n    }\n    \n    // Wing spots\n    color(color_orange)\n    translate([15, 5, 0.1])\n    sphere(2);\n    translate([15, -5, 0.1])\n    sphere(2);\n}\n\n// Left wing assembly\nmodule left_wing() {\n    translate([-10, 0, 15])\n    rotate([0, 20, -10])\n    wing();\n}\n\n// Right wing assembly\nmodule right_wing() {\n    mirror([1, 0, 0])\n    translate([-10, 0, 15])\n    rotate([0, 20, 10])\n    wing();\n}\n\n// Antennae\nmodule antenna() {\n    color(color_black)\n    translate([0, 22, 22])\n    rotate([0, -20, 0])\n    cylinder(15, 0.5, 0.5);\n    \n    // Antenna tip\n    translate([0, 37, 15])\n    sphere(1);\n}\n\n// Left antenna\nmodule left_antenna() {\n    translate([-3, 0, 0])\n    antenna();\n}\n\n// Right antenna\nmodule right_antenna() {\n    translate([3, 0, 0])\n    antenna();\n}\n\n// Eyes\nmodule eye() {\n    color(color_black)\n    sphere(2);\n    \n    color(color_white)\n    translate([0.5, 0.5, 0.5])\n    sphere(0.8);\n}\n\n// Left eye\nmodule left_eye() {\n    translate([-4, 18, 20])\n    eye();\n}\n\n// Right eye\nmodule right_eye() {\n    translate([4, 18, 20])\n    eye();\n}\n\n// Legs\nmodule leg() {\n    color(color_black)\n    rotate([45, 0, 0])\n    cylinder(8, 1, 0.5);\n}\n\n// Leg assembly\nmodule legs() {\n    for(i = [-1, 1]) {\n        // Front legs\n        translate([i*5, 8, 10])\n        leg();\n        \n        // Middle legs\n        translate([i*6, 2, 8])\n        rotate([0, 0, i*20])\n        leg();\n        \n        // Back legs\n        translate([i*4, -4, 6])\n        rotate([0, 0, i*30])\n        leg();\n    }\n}\n\n// Orange markings on body\nmodule body_markings() {\n    color(color_orange)\n    union() {\n        // Back stripes\n        for(i = [0:2]) {\n            translate([0, -2 - i*3, 14 - i*2])\n            scale([1.5, 0.5, 0.2])\n            sphere(6);\n        }\n        \n        // Side spots\n        translate([6, 6, 12])\n        sphere(1.5);\n        translate([-6, 6, 12])\n        sphere(1.5);\n    }\n}\n\n// Main assembly\nmodule mothim() {\n    body();\n    left_wing();\n    right_wing();\n    left_antenna();\n    right_antenna();\n    left_eye();\n    right_eye();\n    legs();\n    body_markings();\n}\n\n// Scale for 3D printing (80mm wingspan)\nscale(0.8)\nrotate([0, 0, 180])\nmothim();",
    "renders": true
  },
  {
    "pokemon": "combee",
    "openscad_code": "// Combee Pokemon - Realistic Style with Medium Complexity\n// Overall dimensions: ~60mm width x ~50mm height x ~40mm depth\n\n$fn = 32;  // Smooth curves for realistic look\nwall_thickness = 2;  // 3D printable wall thickness\n\nmodule combee_body() {\n    color([1, 0.85, 0])  // Yellow-orange for bee body\n    difference() {\n        // Main body - hexagonal prism\n        cylinder(h = 20, r1 = 12, r2 = 12, $fn = 6);\n        \n        // Cut bottom flat\n        translate([0, 0, -1])\n            cube([30, 30, 2], center = true);\n        \n        // Cut top slightly rounded\n        translate([0, 0, 19])\n            sphere(r = 11.5);\n    }\n}\n\nmodule combee_head() {\n    color([1, 0.85, 0])\n    union() {\n        // Upper head with rounded top\n        translate([0, 0, 20])\n            scale([1, 0.8, 1])\n            sphere(r = 10);\n        \n        // Lower jaw area\n        translate([0, -3, 17])\n            cube([20, 6, 4], center = true);\n    }\n}\n\nmodule combee_eyes() {\n    // Left eye\n    color([0.1, 0.1, 0.1])\n    translate([-4, 7, 25])\n        sphere(r = 2);\n    \n    // Right eye\n    color([0.1, 0.1, 0.1])\n    translate([4, 7, 25])\n        sphere(r = 2);\n    \n    // Eye highlights\n    color([1, 1, 1])\n    union() {\n        translate([-3.5, 7.5, 26.5])\n            sphere(r = 0.5);\n        translate([4.5, 7.5, 26.5])\n            sphere(r = 0.5);\n    }\n}\n\nmodule combee_stripes() {\n    color([0.2, 0.1, 0])  // Dark brown stripes\n    for(i = [0:2]) {\n        translate([0, 0, 6 + i * 6])\n            cylinder(h = 2, r1 = 12.1, r2 = 12.1, $fn = 6);\n    }\n}\n\nmodule combee_wings() {\n    // Wing color - translucent effect\n    color([0.9, 0.9, 0.9, 0.7])\n    union() {\n        // Left wings\n        for(i = [0:2]) {\n            translate([-15 - i * 3, 0, 18 - i * 2])\n                rotate([0, 0, -30 - i * 10])\n                scale([1, 0.1, 2])\n                cylinder(h = 1, r1 = 8, r2 = 5);\n        }\n        \n        // Right wings\n        for(i = [0:2]) {\n            translate([15 + i * 3, 0, 18 - i * 2])\n                rotate([0, 0, 30 + i * 10])\n                scale([1, 0.1, 2])\n                cylinder(h = 1, r1 = 8, r2 = 5);\n        }\n    }\n}\n\nmodule combee_antennae() {\n    color([0.2, 0.1, 0])\n    union() {\n        // Left antenna\n        translate([-5, 10, 30])\n            rotate([30, 0, -20])\n            cylinder(h = 8, r1 = 0.5, r2 = 0.3);\n        \n        // Right antenna\n        translate([5, 10, 30])\n            rotate([30, 0, 20])\n            cylinder(h = 8, r1 = 0.5, r2 = 0.3);\n    }\n}\n\nmodule combee_mouth() {\n    color([0.8, 0.2, 0.3])\n    translate([0, 11, 20])\n        scale([1, 0.2, 0.5])\n        sphere(r = 2);\n}\n\nmodule combee_cheeks() {\n    color([1, 0.4, 0.4])\n    union() {\n        translate([-7, 6, 23])\n            sphere(r = 1.5);\n        translate([7, 6, 23])\n            sphere(r = 1.5);\n    }\n}\n\n// Assemble the complete Combee\nunion() {\n    combee_body();\n    combee_head();\n    combee_stripes();\n    combee_wings();\n    combee_antennae();\n    combee_eyes();\n    combee_mouth();\n    combee_cheeks();\n}",
    "renders": true
  },
  {
    "pokemon": "vespiquen",
    "openscad_code": "// Vespiquen - Realistic Style, Medium Complexity\n// Scale: 80mm tall\n\n// Colors\ncolor_body = [0.9, 0.6, 0.1]; // Golden yellow\ncolor_wings = [0.7, 0.7, 0.9]; // Translucent blue\ncolor_black = [0.1, 0.1, 0.1];\ncolor_red = [0.8, 0.2, 0.2];\n\nmodule vespiquen() {\n    // Main body\n    color(color_body) {\n        // Abdomen - main body segment\n        translate([0, 0, 10]) {\n            scale([1.2, 0.8, 1.5]) sphere(15);\n        }\n        \n        // Thorax\n        translate([0, 0, 35]) {\n            scale([0.8, 0.7, 1.2]) sphere(12);\n        }\n        \n        // Head\n        translate([0, 0, 50]) {\n            scale([0.7, 0.7, 0.8]) sphere(10);\n        }\n    }\n    \n    // Wings (4 wings)\n    color(color_wings) {\n        // Upper wings\n        for(i = [0, 1]) {\n            rotate([0, 0, i * 180]) {\n                translate([0, 25, 45]) {\n                    rotate([0, -20, 0]) {\n                        scale([0.1, 1.5, 1]) {\n                            cylinder(h = 2, r = 20);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Lower wings\n        for(i = [0, 1]) {\n            rotate([0, 0, i * 180]) {\n                translate([0, 20, 35]) {\n                    rotate([0, -30, 0]) {\n                        scale([0.1, 1.2, 0.8]) {\n                            cylinder(h = 2, r = 15);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Crown-like structure\n    color(color_body) {\n        translate([0, 0, 60]) {\n            for(i = [0:5]) {\n                rotate([0, 0, i * 60]) {\n                    translate([8, 0, 0]) {\n                        scale([0.5, 0.5, 1.5]) sphere(3);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Black stripes\n    color(color_black) {\n        // Horizontal stripes on abdomen\n        for(h = [0, 10, 20]) {\n            translate([0, 0, h + 5]) {\n                scale([1.4, 0.9, 0.2]) sphere(15);\n            }\n        }\n        \n        // Vertical stripes on thorax\n        for(angle = [0:45:315]) {\n            rotate([0, 0, angle]) {\n                translate([10, 0, 35]) {\n                    scale([0.2, 0.8, 1.2]) sphere(12);\n                }\n            }\n        }\n    }\n    \n    // Red eyes\n    color(color_red) {\n        for(side = [-1, 1]) {\n            translate([side * 5, 6, 52]) {\n                sphere(2);\n            }\n        }\n    }\n    \n    // Mandibles\n    color(color_black) {\n        translate([0, 8, 48]) {\n            cube([8, 4, 2], center = true);\n        }\n    }\n    \n    // Legs (6 legs)\n    color(color_black) {\n        for(side = [-1, 1]) {\n            // Front legs\n            translate([side * 15, 8, 35]) {\n                rotate([0, 0, side * 30]) {\n                    cube([2, 12, 2]);\n                }\n            }\n            \n            // Middle legs\n            translate([side * 18, 0, 25]) {\n                rotate([0, 0, side * 45]) {\n                    cube([2, 15, 2]);\n                }\n            }\n            \n            // Rear legs\n            translate([side * 15, -8, 15]) {\n                rotate([0, 0, side * 60]) {\n                    cube([2, 18, 2]);\n                }\n            }\n        }\n    }\n    \n    // Tail stinger\n    color(color_black) {\n        translate([0, 0, -5]) {\n            cylinder(h = 15, r1 = 5, r2 = 1);\n        }\n    }\n}\n\n// Scale and render\nscale(0.8) vespiquen();",
    "renders": true
  },
  {
    "pokemon": "pachirisu",
    "openscad_code": "// Pachirisu OpenSCAD Model - Realistic Medium Complexity\n// 3D printable model approximately 80mm tall\n\nmodule ear(posX, posY, rotZ) {\n    color([0.85, 0.85, 0.85])\n    translate([posX, posY, 15]) rotate([0, 0, rotZ]) {\n        union() {\n            // Main ear\n            translate([0, 0, 5]) scale([1, 0.6, 2]) sphere(6);\n            // Inner ear\n            color([0.6, 0.1, 0.1])\n            translate([0, 1, 6]) scale([0.7, 0.4, 1.5]) sphere(4);\n            // Ear tip\n            color([0.1, 0.1, 0.1])\n            translate([0, 0, 15]) sphere(2);\n        }\n    }\n}\n\nmodule tail() {\n    color([0.9, 0.9, 0.9])\n    translate([0, -15, 12]) rotate([0, -20, 0]) {\n        difference() {\n            // Main tail body\n            union() {\n                cylinder(h=20, r1=6, r2=4, $fn=8);\n                translate([0, 0, 18]) sphere(4);\n            }\n            // Tail indent\n            color([0.6, 0.1, 0.1])\n            translate([0, 0, 10]) cylinder(h=12, r1=3, r2=2, $fn=6);\n        }\n    }\n}\n\nmodule eye(posX, posY) {\n    color([0, 0, 0])\n    translate([posX, posY, 14]) {\n        // Eye white\n        color([1, 1, 1])\n        sphere(3);\n        // Pupil\n        color([0, 0, 0])\n        translate([1, 0, 0]) sphere(1.5);\n        // Highlight\n        color([1, 1, 1])\n        translate([1.5, 0.5, 1]) sphere(0.5);\n    }\n}\n\nmodule paw(posX, posY, posZ, rotX) {\n    color([0.85, 0.85, 0.85])\n    translate([posX, posY, posZ]) rotate([rotX, 0, 0]) {\n        union() {\n            cylinder(h=8, r1=3, r2=2, $fn=6);\n            // Paw pads\n            color([0.4, 0.1, 0.1])\n            translate([0, 0, -1]) sphere(1.5);\n            for(i = [0:2]) {\n                translate([cos(i*120)*1.5, sin(i*120)*1.5, -1]) sphere(0.8);\n            }\n        }\n    }\n}\n\nmodule stripe(posX, posY, posZ, rotZ) {\n    color([0.1, 0.1, 0.1])\n    translate([posX, posY, posZ]) rotate([0, 0, rotZ])\n        scale([8, 3, 1]) sphere(1);\n}\n\n// Main body\ncolor([0.85, 0.85, 0.85])\nunion() {\n    // Head\n    translate([0, 0, 15]) sphere(10);\n    \n    // Body\n    translate([0, 0, 6]) scale([1.2, 1, 1.2]) sphere(12);\n    \n    // Cheek pouches\n    color([0.9, 0.9, 0.1])\n    translate([8, 0, 10]) sphere(4);\n    translate([-8, 0, 10]) sphere(4);\n    \n    // Ears\n    ear(6, 5, 30);\n    ear(-6, 5, -30);\n    \n    // Tail\n    tail();\n    \n    // Eyes\n    eye(4, 8);\n    eye(-4, 8);\n    \n    // Nose\n    color([0, 0, 0])\n    translate([0, 10, 12]) sphere(1);\n    \n    // Mouth\n    color([0.4, 0.1, 0.1])\n    translate([0, 11, 10.5]) scale([1, 0.5, 0.5]) sphere(1.5);\n    \n    // Paws\n    paw(8, 8, 0, 0);\n    paw(-8, 8, 0, 0);\n    paw(6, -8, 0, 0);\n    paw(-6, -8, 0, 0);\n    \n    // Stripes\n    stripe(0, 0, 20, 0);\n    stripe(0, -3, 17, 15);\n    stripe(0, 3, 17, -15);\n    \n    // Feet bottoms for stability\n    color([0.4, 0.1, 0.1])\n    translate([8, 8, -0.5]) cylinder(h=1, r=3, $fn=6);\n    translate([-8, 8, -0.5]) cylinder(h=1, r=3, $fn=6);\n    translate([6, -8, -0.5]) cylinder(h=1, r=3, $fn=6);\n    translate([-6, -8, -0.5]) cylinder(h=1, r=3, $fn=6);\n}",
    "renders": true
  },
  {
    "pokemon": "buizel",
    "openscad_code": "// Buizel Pokemon - Realistic Style, Medium Complexity\n// Size: 80mm tall, 3D printable\n\ncolor([0.9,0.4,0.1]) // Main orange color\nunion() {\n    // Head\n    translate([0,0,60])\n    scale([1.2,1.1,1.2])\n    sphere(8);\n\n    // Snout\n    translate([0,-10,58])\n    scale([0.8,1.2,0.8])\n    sphere(6);\n\n    // Body\n    translate([0,0,35])\n    scale([1.5,1.8,1.4])\n    sphere(15);\n\n    // Neck\n    translate([0,0,48])\n    scale([1,1,1])\n    cylinder(10,6,6);\n\n    // Arms\n    translate([-12,-5,45])\n    rotate([0,30,0])\n    scale([0.4,0.4,1])\n    cylinder(12,5,4);\n\n    translate([12,-5,45])\n    rotate([0,-30,0])\n    scale([0.4,0.4,1])\n    cylinder(12,5,4);\n\n    // Legs\n    translate([-8,0,15])\n    scale([0.8,0.8,1.2])\n    cylinder(15,4,4);\n\n    translate([8,0,15])\n    scale([0.8,0.8,1.2])\n    cylinder(15,4,4);\n\n    // Tail float\n    translate([0,-20,25])\n    rotate([0,10,0])\n    scale([1.2,0.3,0.8])\n    sphere(12);\n}\n\n// Inner ear color\ncolor([1,0.8,0.6])\ndifference() {\n    // Ears\n    translate([-6,5,68])\n    rotate([30,0,-20])\n    scale([0.5,0.3,1])\n    cylinder(10,3,2);\n\n    translate([6,5,68])\n    rotate([30,0,20])\n    scale([0.5,0.3,1])\n    cylinder(10,3,2);\n}\n\n// Face details\nmodule eye(x_pos) {\n    color([0.1,0.1,0.1])\n    translate([x_pos,7,62])\n    scale([1.2,1,1])\n    sphere(2);\n    \n    color([1,1,1])\n    translate([x_pos+0.5,7.5,63])\n    sphere(0.8);\n}\n\neye(-3);\neye(3);\n\n// Nose\ncolor([0.1,0.1,0.1])\ntranslate([0,9,58])\n    sphere(1.5);\n\n// Mouth\ncolor([0.3,0.1,0.1])\ntranslate([0,11,56])\n    rotate([90,0,0])\n    cylinder(1,2,0);\n\n// Yellow markings\ncolor([1,0.9,0.2])\nunion() {\n    // Chest marking\n    translate([0,-5,40])\n    scale([1.5,1.2,0.3])\n    sphere(8);\n\n    // Tail ring\n    translate([0,-25,27])\n    rotate([90,0,0])\n    cylinder(1,8,8);\n\n    // Face marking\n    translate([0,3,57])\n    scale([1,0.5,0.3])\n    sphere(4);\n}\n\n// Feet\ncolor([0.9,0.4,0.1])\nmodule foot(x_pos) {\n    translate([x_pos,0,0])\n    union() {\n        cube([6,12,4], center=true);\n        translate([0,5,-2])\n        sphere(3);\n    }\n}\n\nfoot(-8);\nfoot(8);\n\n// Back fin\ncolor([0.9,0.4,0.1])\ntranslate([0,8,35])\nrotate([0,0,0])\nscale([0.3,0.8,1])\ncylinder(15,4,2);\n\n// Side fins\nmodule side_fin(x_pos) {\n    color([0.9,0.4,0.1])\n    translate([x_pos,5,40])\n    rotate([0,0,x_pos>0?30:-30])\n    scale([0.5,1,0.3])\n    cylinder(8,3,2);\n}\n\nside_fin(-15);\nside_fin(15);",
    "renders": true
  },
  {
    "pokemon": "floatzel",
    "openscad_code": "// Floatzel - Medium Realistic OpenSCAD Model\n// 3D-printable, ~70mm tall\n\n$fn = 32; // Smooth curves\n\n// Main colors\ncolor_orange = [255/255, 125/255, 25/255];\ncolor_yellow = [255/255, 220/255, 0/255];\ncolor_blue = [0/255, 150/255, 255/255];\ncolor_black = [0, 0, 0];\ncolor_white = [1, 1, 1];\n\n// Body scale factor\nscale_factor = 1;\n\nmodule floatzel() {\n    // Central body\n    color(color_orange)\n    translate([0, 0, 20])\n    scale([1.2, 1, 1.3])\n    sphere(15);\n\n    // Head\n    color(color_orange)\n    translate([0, 0, 45])\n    sphere(12);\n\n    // Muzzle\n    color(color_orange)\n    translate([0, -8, 45])\n    scale([1.1, 1.4, 0.9])\n    sphere(8);\n\n    // Eyes\n    for (x = [-4, 4]) {\n        color(color_black)\n        translate([x, -15, 48])\n        sphere(2);\n        \n        color(color_white)\n        translate([x + 0.5, -15.5, 48.5])\n        sphere(0.8);\n    }\n\n    // Nose\n    color(color_black)\n    translate([0, -18, 45])\n    sphere(1.5);\n\n    // Ears\n    color(color_orange)\n    for (x = [-8, 8]) {\n        translate([x, 0, 57])\n        rotate([0, 0, x > 0 ? -30 : 30])\n        scale([0.4, 0.2, 1.2])\n        cylinder(h = 12, r = 3);\n    }\n\n    // Neck float ring\n    color(color_yellow)\n    difference() {\n        translate([0, 0, 38])\n        rotate_extrude()\n        translate([15, 0, 0])\n        circle(3);\n        \n        translate([0, 0, 38])\n        rotate_extrude()\n        translate([15, 0, 0])\n        circle(2);\n    }\n\n    // Arms\n    module arm(side) {\n        color(color_orange)\n        translate([side * 12, 0, 35])\n        rotate([0, 0, side * -20])\n        cylinder(h = 15, r1 = 4, r2 = 3);\n        \n        color(color_blue)\n        translate([side * 17, -5, 32])\n        rotate([90, 0, side * 20])\n        scale([1, 0.5, 0.3])\n        sphere(6);\n    }\n    \n    arm(1);\n    arm(-1);\n\n    // Legs\n    module leg(side) {\n        color(color_orange)\n        translate([side * 6, 0, 15])\n        cylinder(h = 12, r1 = 5, r2 = 4);\n        \n        color(color_blue)\n        translate([side * 6, -3, 8])\n        scale([1.2, 0.8, 0.4])\n        sphere(6);\n    }\n    \n    leg(1);\n    leg(-1);\n\n    // Tail\n    color(color_orange)\n    translate([0, 15, 25])\n    rotate([90, 0, 0])\n    scale([1, 1.5, 1])\n    cylinder(h = 20, r1 = 4, r2 = 0);\n\n    // Tail float\n    color(color_yellow)\n    translate([0, 15, 15])\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h = 8, r = 6);\n        cylinder(h = 9, r = 4);\n    }\n\n    // Back fins\n    color(color_blue)\n    for (angle = [30, 150]) {\n        translate([0, 5, 30])\n        rotate([0, angle, 0])\n        translate([0, 0, 15])\n        scale([0.3, 1, 0.5])\n        sphere(8);\n    }\n\n    // Chest marking\n    color(color_yellow)\n    translate([0, -5, 30])\n    scale([1.2, 1.5, 0.1])\n    sphere(10);\n}\n\n// Scale and position for printing\nscale(scale_factor)\nfloatzel();",
    "renders": true
  },
  {
    "pokemon": "cherubi",
    "openscad_code": "// Cherubi Pokemon - Realistic style, medium complexity\n// 3D printable model with proper wall thickness\n\n// Main parameters\n$fn = 32;\nscale_factor = 1.5;\nbody_radius = 15 * scale_factor;\nhead_radius = 12 * scale_factor;\near_length = 18 * scale_factor;\near_width = 5 * scale_factor;\nstem_length = 8 * scale_factor;\nstem_radius = 2 * scale_factor;\neye_radius = 3 * scale_factor;\ncheek_radius = 4 * scale_factor;\nleaf_length = 12 * scale_factor;\nleaf_width = 8 * scale_factor;\n\n// Colors\nred = [0.8, 0.2, 0.2];\ngreen = [0.2, 0.6, 0.2];\nwhite = [0.95, 0.95, 0.95];\nblack = [0.1, 0.1, 0.1];\npink = [0.95, 0.6, 0.7];\n\n// Main body\nmodule cherubi_body() {\n    color(red) {\n        // Main spherical body\n        sphere(r = body_radius, center = true);\n        \n        // Head sphere\n        translate([0, 0, body_radius * 0.8]) {\n            sphere(r = head_radius, center = true);\n        }\n    }\n}\n\n// Ears module\nmodule ears() {\n    color(red) {\n        // Left ear\n        translate([-head_radius * 0.7, 0, body_radius + head_radius * 0.5]) {\n            rotate([0, -20, -30]) {\n                cylinder(h = ear_length, r1 = ear_width, r2 = ear_width * 0.7, center = true);\n            }\n        }\n        \n        // Right ear\n        translate([head_radius * 0.7, 0, body_radius + head_radius * 0.5]) {\n            rotate([0, -20, 30]) {\n                cylinder(h = ear_length, r1 = ear_width, r2 = ear_width * 0.7, center = true);\n            }\n        }\n    }\n}\n\n// Stem and leaves\nmodule stem_and_leaves() {\n    color(green) {\n        // Main stem\n        translate([0, 0, body_radius + head_radius + stem_length * 0.5]) {\n            cylinder(h = stem_length, r = stem_radius, center = true);\n        }\n        \n        // Leaves\n        for (i = [0:1]) {\n            rotate([0, 0, i * 180]) {\n                translate([0, stem_radius + leaf_width * 0.5, body_radius + head_radius + stem_length]) {\n                    rotate([45, 0, 0]) {\n                        scale([1, 0.3, 1]) {\n                            sphere(r = leaf_length, center = true);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Face features\nmodule face() {\n    // Eyes\n    color(white) {\n        // Left eye\n        translate([-head_radius * 0.4, -head_radius * 0.3, body_radius + head_radius * 0.8]) {\n            sphere(r = eye_radius, center = true);\n        }\n        \n        // Right eye\n        translate([head_radius * 0.4, -head_radius * 0.3, body_radius + head_radius * 0.8]) {\n            sphere(r = eye_radius, center = true);\n        }\n    }\n    \n    // Pupils\n    color(black) {\n        // Left pupil\n        translate([-head_radius * 0.4, -head_radius * 0.2, body_radius + head_radius * 0.9]) {\n            sphere(r = eye_radius * 0.5, center = true);\n        }\n        \n        // Right pupil\n        translate([head_radius * 0.4, -head_radius * 0.2, body_radius + head_radius * 0.9]) {\n            sphere(r = eye_radius * 0.5, center = true);\n        }\n    }\n    \n    // Cheeks\n    color(pink) {\n        // Left cheek\n        translate([-head_radius * 0.7, -head_radius * 0.1, body_radius + head_radius * 0.5]) {\n            sphere(r = cheek_radius, center = true);\n        }\n        \n        // Right cheek\n        translate([head_radius * 0.7, -head_radius * 0.1, body_radius + head_radius * 0.5]) {\n            sphere(r = cheek_radius, center = true);\n        }\n    }\n    \n    // Mouth\n    color(black) {\n        translate([0, -head_radius * 0.6, body_radius + head_radius * 0.3]) {\n            scale([0.8, 0.3, 0.2]) {\n                sphere(r = eye_radius, center = true);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    cherubi_body();\n    ears();\n    stem_and_leaves();\n    face();\n}",
    "renders": true
  },
  {
    "pokemon": "cherrim",
    "openscad_code": "// Realistic Cherrim Pokemon - Medium Complexity\n// Overcast Form design for 3D printing\n\ncolor(\"darkgreen\") {\n    // Main bulb body\n    difference() {\n        // Outer bulb\n        rotate([0, 0, 45]) {\n            scale([1, 1, 0.8]) {\n                sphere(d=40, $fn=60);\n            }\n        }\n        \n        // Bottom opening\n        translate([0, 0, -20]) {\n            cylinder(h=25, r1=12, r2=15, $fn=30);\n        }\n    }\n}\n\n// Purple petals (closed)\nmodule petal() {\n    color(\"purple\") {\n        scale([1, 0.4, 0.8]) {\n            sphere(d=15, $fn=20);\n        }\n    }\n}\n\n// Petal ring around bulb\nfor(i = [0:7]) {\n    rotate([0, 0, i*45]) {\n        translate([22, 0, 5]) {\n            petal();\n        }\n    }\n}\n\n// Stem\ncolor(\"darkgreen\") {\n    translate([0, 0, -30]) {\n        cylinder(h=30, r=5, $fn=20);\n    }\n}\n\n// Leaves\nmodule leaf() {\n    color(\"green\") {\n        translate([0, 0, -15]) {\n            rotate([90, 0, 0]) {\n                scale([1, 0.3, 1]) {\n                    sphere(d=20, $fn=20);\n                }\n            }\n        }\n    }\n}\n\n// Two leaves at base\nrotate([0, 0, 45]) {\n    leaf();\n}\nrotate([0, 0, -45]) {\n    leaf();\n}\n\n// Eyes\nmodule eye() {\n    color(\"white\") {\n        sphere(d=6, $fn=20);\n    }\n    color(\"black\") {\n        translate([0, 0, 3.1]) {\n            sphere(d=4, $fn=20);\n        }\n    }\n}\n\ntranslate([8, 12, 8]) {\n    eye();\n}\ntranslate([-8, 12, 8]) {\n    eye();\n}\n\n// Mouth\ncolor(\"darkgreen\") {\n    translate([0, 15, -2]) {\n        rotate([90, 0, 0]) {\n            scale([1, 0.3, 1]) {\n                cylinder(h=2, r=8, $fn=30);\n            }\n        }\n    }\n}\n\n// Small pink spheres (cherries)\ncolor(\"pink\") {\n    translate([0, 0, 20]) {\n        sphere(d=8, $fn=20);\n    }\n}\n\n// Additional details - small spots on bulb\nmodule spot() {\n    color(\"darkgreen\") {\n        translate([0, 0, 1]) {\n            sphere(d=2, $fn=10);\n        }\n    }\n}\n\n// Random spots for texture\nfor(i = [0:5]) {\n    rotate([rand(i*10), rand(i*20), rand(i*30)]) {\n        translate([rand(15)+5, 0, rand(10)-5]) {\n            spot();\n        }\n    }\n}",
    "renders": true
  },
  {
    "pokemon": "shellos",
    "openscad_code": "// Shellos - West Sea form\n// Realistic medium complexity OpenSCAD model\n\nshellos_scale = 1;\nbody_width = 60 * shellos_scale;\nbody_height = 40 * shellos_scale;\nbody_depth = 65 * shellos_scale;\n\nmodule shellos_body() {\n    difference() {\n        // Main body - rounded blob shape\n        color([0.75, 0.85, 0.95]) {\n            scale([1, 0.8, 1.2]) \n                sphere(d=body_width, $fn=32);\n        }\n        \n        // Bottom flattening\n        translate([0, -body_height/2 - 1, 0])\n            cube([body_width*2, body_height, body_width*2], center=true);\n    }\n}\n\nmodule shellos_back() {\n    // Back ridge\n    color([0.7, 0.8, 0.9]) {\n        for(i = [0:3]) {\n            translate([0, body_height/2 - i*8, -body_depth/2 + 5 + i*5])\n                scale([0.8 - i*0.1, 0.3, 0.2])\n                    sphere(d=body_width*0.6, $fn=16);\n        }\n    }\n}\n\nmodule shellos_head_features() {\n    // Head bump\n    color([0.75, 0.85, 0.95]) {\n        translate([0, body_height/2 + 3, body_depth/2 - 8])\n            scale([0.7, 0.8, 0.7])\n                sphere(d=body_width*0.5, $fn=24);\n    }\n}\n\nmodule shellos_ears() {\n    // Left ear\n    color([0.75, 0.85, 0.95]) {\n        translate([-body_width/3, body_height/2 + 5, body_depth/3]) {\n            rotate([0, 15, -30])\n                scale([0.15, 0.6, 0.15])\n                    cylinder(h=body_height*0.8, d=body_width/3, $fn=8);\n        }\n    }\n    \n    // Right ear\n    color([0.75, 0.85, 0.95]) {\n        translate([body_width/3, body_height/2 + 5, body_depth/3]) {\n            rotate([0, 15, 30])\n                scale([0.15, 0.6, 0.15])\n                    cylinder(h=body_height*0.8, d=body_width/3, $fn=8);\n        }\n    }\n}\n\nmodule shellos_eyes() {\n    // Left eye white\n    color([1, 1, 1]) {\n        translate([-body_width/4, body_height/2 + 2, body_depth/2 - 5])\n            sphere(d=body_width*0.12, $fn=16);\n    }\n    \n    // Right eye white\n    color([1, 1, 1]) {\n        translate([body_width/4, body_height/2 + 2, body_depth/2 - 5])\n            sphere(d=body_width*0.12, $fn=16);\n    }\n    \n    // Left eye pupil\n    color([0, 0, 0]) {\n        translate([-body_width/4 + 2, body_height/2 + 2, body_depth/2 - 3])\n            sphere(d=body_width*0.05, $fn=8);\n    }\n    \n    // Right eye pupil\n    color([0, 0, 0]) {\n        translate([body_width/4 + 2, body_height/2 + 2, body_depth/2 - 3])\n            sphere(d=body_width*0.05, $fn=8);\n    }\n}\n\nmodule shellos_mouth() {\n    // Mouth line\n    color([0.5, 0.5, 0.5]) {\n        translate([0, body_height/2 - 2, body_depth/2 - 2])\n            rotate([90, 0, 0])\n                cylinder(h=0.5, d1=body_width*0.15, d2=body_width*0.1, $fn=8);\n    }\n}\n\nmodule shellos_spots() {\n    // Random spots on body\n    color([0.6, 0.7, 0.85]) {\n        for(i = [0:5]) {\n            rotate([0, 0, i*60])\n                translate([body_width/4, body_height/4 - i*2, -body_depth/4 + i*3])\n                    sphere(d=body_width*0.08, $fn=12);\n        }\n        \n        for(i = [0:4]) {\n            rotate([0, 0, i*72 + 30])\n                translate([-body_width/5, body_height/3 - i*2, -body_depth/5 + i*2])\n                    sphere(d=body_width*0.06, $fn=12);\n        }\n    }\n}\n\nmodule shellos_legs() {\n    // Front left leg\n    color([0.75, 0.85, 0.95]) {\n        translate([-body_width/3, -body_height/2 + 5, body_depth/3]) {\n            rotate([0, 0, -15])\n                scale([0.3, 0.3, 0.8])\n                    cylinder(h=body_height/3, d=body_width/4, $fn=8);\n        }\n    }\n    \n    // Front right leg\n    color([0.75, 0.85, 0.95]) {\n        translate([body_width/3, -body_height/2 + 5, body_depth/3]) {\n            rotate([0, 0, 15])\n                scale([0.3, 0.3, 0.8])\n                    cylinder(h=body_height/3, d=body_width/4, $fn=8);\n        }\n    }\n    \n    // Back left leg\n    color([0.75, 0.85, 0.95]) {\n        translate([-body_width/3, -body_height/2 + 5, -body_depth/3]) {\n            rotate([0, 0, -15])\n                scale([0.3, 0.3, 0.8])\n                    cylinder(h=body_height/3, d=body_width/4, $fn=8);\n        }\n    }\n    \n    // Back right leg\n    color([0.75, 0.85, 0.95]) {\n        translate([body_width/3, -body_height/2 + 5, -body_depth/3]) {\n            rotate([0, 0, 15])\n                scale([0.3, 0.3, 0.8])\n                    cylinder(h=body_height/3, d=body_width/4, $fn=8);\n        }\n    }\n}\n\nmodule shellos_tail() {\n    // Tail fin\n    color([0.7, 0.8, 0.9]) {\n        translate([0, 0, -body_depth/2 - 10]) {\n            rotate([90, 0, 0])\n                scale([1.2, 0.3, 1])\n                    cylinder(h=body_depth/4, d1=body_width/3, d2=0, $fn=16);\n        }\n    }\n}\n\n// Assembly\nshellos_body();\nshellos_back();\nshellos_head_features();\nshellos_ears();\nshellos_eyes();\nshellos_mouth();\nshellos_spots();\nshellos_legs();\nshellos_tail();",
    "renders": true
  },
  {
    "pokemon": "gastrodon",
    "openscad_code": "// Gastrodon (East Sea form) - Realistic style, medium complexity\n// Size: ~80mm length\n\n$fn = 32;\nmodule gastrodon() {\n    // Main body - soft slug-like shape\n    color([0.8, 0.6, 0.9]) {\n        // Central body mass\n        union() {\n            translate([0, 0, 15]) scale([1, 0.7, 0.5]) sphere(25);\n            translate([-20, 0, 15]) scale([0.8, 0.6, 0.4]) sphere(20);\n            translate([20, 0, 12]) scale([0.9, 0.6, 0.3]) sphere(18);\n        }\n        \n        // Upper back ridge\n        for(i = [-25:10:25]) {\n            translate([i, 0, 25 + abs(i)/4]) \n                scale([0.4, 0.6, 0.2]) sphere(10);\n        }\n    }\n    \n    // Head section\n    color([0.8, 0.6, 0.9]) {\n        translate([-35, 0, 20]) rotate([0, -10, 0]) \n            scale([1.2, 0.8, 0.6]) sphere(15);\n    }\n    \n    // Eye stalks\n    color([0.7, 0.5, 0.8]) {\n        // Left stalk\n        translate([-40, 12, 35]) rotate([0, -20, -15]) \n            cylinder(12, 5, 3);\n        translate([-42, 15, 47]) sphere(6);\n        \n        // Right stalk\n        translate([-40, -12, 35]) rotate([0, -20, 15]) \n            cylinder(12, 5, 3);\n        translate([-42, -15, 47]) sphere(6);\n    }\n    \n    // Eyes\n    color([0.9, 0.9, 0.1]) {\n        translate([-45, 12, 47]) sphere(3);\n        translate([-45, -12, 47]) sphere(3);\n    }\n    color([0, 0, 0]) {\n        translate([-46, 12, 48]) sphere(1.5);\n        translate([-46, -12, 48]) sphere(1.5);\n    }\n    \n    // Mouth\n    color([0.6, 0.2, 0.5]) {\n        translate([-45, 0, 35]) rotate([0, 90, 0])\n            scale([1, 0.5, 1]) cylinder(5, 5, 3);\n    }\n    \n    // East Sea markings - green stripes\n    color([0.2, 0.7, 0.4]) {\n        // Side markings\n        for(side = [-1, 1]) {\n            translate([0, side * 12, 20]) rotate([0, 10 * side, 0])\n                scale([1.2, 0.1, 0.3]) sphere(25);\n            translate([-10, side * 15, 18]) rotate([0, 15 * side, 0])\n                scale([0.8, 0.1, 0.2]) sphere(20);\n            translate([10, side * 15, 15]) rotate([0, 5 * side, 0])\n                scale([0.9, 0.1, 0.2]) sphere(15);\n        }\n        \n        // Back markings\n        for(i = [-15:15:15]) {\n            translate([i, 0, 28]) rotate([0, 0, 0])\n                scale([0.3, 1.2, 0.1]) sphere(15);\n        }\n    }\n    \n    // Underside - lighter color\n    color([0.9, 0.8, 0.95]) {\n        translate([0, 0, 8]) scale([1.1, 0.9, 0.3]) sphere(25);\n    }\n    \n    // Small foot projections\n    color([0.8, 0.6, 0.9]) {\n        for(x = [-20:20:20]) {\n            for(y = [-12:24:24]) {\n                translate([x, y, 5]) rotate([0, 0, 45])\n                    scale([0.8, 0.3, 0.5]) sphere(8);\n            }\n        }\n    }\n}\n\n// Create the model\ngastrodon();",
    "renders": true
  },
  {
    "pokemon": "ambipom",
    "openscad_code": "// Ambipom - Medium Complexity Realistic Style\n// 3D Printable Model\n\ncolor(\"purple\") {\n    // Main body\n    union() {\n        // Torso\n        translate([0, 0, 20]) {\n            scale([1.2, 0.8, 1]) {\n                sphere(d = 25);\n            }\n        }\n        \n        // Head\n        translate([0, 0, 35]) {\n            sphere(d = 20);\n        }\n        \n        // Ears\n        for(side = [-1, 1]) {\n            translate([side * 8, 0, 42]) {\n                rotate([0, side * 15, 0]) {\n                    scale([0.3, 0.15, 1]) {\n                        sphere(d = 15);\n                    }\n                }\n            }\n        }\n        \n        // Arms\n        module arm() {\n            // Upper arm\n            translate([0, 0, 0]) {\n                rotate([0, 0, 45]) {\n                    cylinder(h = 15, d = 5);\n                }\n            }\n            \n            // Hand\n            translate([10, 0, 10]) {\n                sphere(d = 8);\n                \n                // Fingers\n                for(i = [0:3]) {\n                    rotate([0, 0, i * 90]) {\n                        translate([4, 0, 0]) {\n                            scale([2, 0.5, 0.5]) {\n                                sphere(d = 4);\n                            }\n                        }\n                    }\n                }\n                \n                // Tail hand\n                translate([0, 0, 10]) {\n                    for(i = [0:4]) {\n                        rotate([0, 0, i * 72]) {\n                            translate([5, 0, 0]) {\n                                sphere(d = 3);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Left arm\n        translate([-15, 0, 28]) {\n            rotate([0, 0, -30]) {\n                arm();\n            }\n        }\n        \n        // Right arm\n        mirror([1, 0, 0]) {\n            translate([-15, 0, 28]) {\n                rotate([0, 0, -30]) {\n                    arm();\n                }\n            }\n        }\n        \n        // Legs\n        module leg() {\n            translate([0, 0, 0]) {\n                cylinder(h = 12, d1 = 6, d2 = 4);\n            }\n            translate([0, 0, 12]) {\n                sphere(d = 6);\n            }\n        }\n        \n        // Left leg\n        translate([-5, 0, 10]) {\n            leg();\n        }\n        \n        // Right leg\n        translate([5, 0, 10]) {\n            leg();\n        }\n        \n        // Tail base\n        translate([0, -12, 20]) {\n            cylinder(h = 8, d = 8);\n        }\n        \n        // Twin tails\n        translate([0, -20, 20]) {\n            rotate([0, 90, 0]) {\n                for(side = [-1, 1]) {\n                    translate([0, side * 8, 0]) {\n                        rotate([0, 0, side * 30]) {\n                            // Tail segments\n                            for(i = [0:3]) {\n                                translate([i * 8, 0, 0]) {\n                                    sphere(d = 6 - i);\n                                    \n                                    // Tail hand\n                                    if(i == 3) {\n                                        translate([4, 0, 0]) {\n                                            sphere(d = 8);\n                                            \n                                            // Fingers on tail\n                                            for(j = [0:3]) {\n                                                rotate([0, 0, j * 90]) {\n                                                    translate([4, 0, 0]) {\n                                                        scale([1.5, 0.5, 0.5]) {\n                                                            sphere(d = 3);\n                                                        }\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                            \n                            // Connect tail segments\n                            hull() {\n                                translate([0, 0, 0]) {\n                                    sphere(d = 6);\n                                }\n                                translate([24, 0, 0]) {\n                                    sphere(d = 3);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Face features\n        color(\"black\") {\n            // Eyes\n            for(side = [-1, 1]) {\n                translate([side * 4, 8, 35]) {\n                    scale([1, 1.2, 0.1]) {\n                        sphere(d = 5);\n                    }\n                }\n            }\n            \n            // Nose\n            translate([0, 4, 32]) {\n                sphere(d = 2);\n            }\n            \n            // Mouth\n            translate([0, 5, 30]) {\n                rotate([90, 0, 0]) {\n                    cylinder(h = 0.5, d = 4, $fn = 16);\n                }\n            }\n        }\n        \n        // Purple to tan transition on belly\n        color(\"#DEB887\") {\n            translate([0, 0, 15]) {\n                scale([0.8, 0.6, 0.5]) {\n                    sphere(d = 20);\n                }\n            }\n        }\n        \n        // Tan hands/feet\n        color(\"#DEB887\") {\n            // Left hand\n            translate([-25, 0, 38]) {\n                sphere(d = 8);\n            }\n            \n            // Right hand\n            translate([25, 0, 38]) {\n                sphere(d = 8);\n            }\n            \n            // Feet\n            translate([-5, 0, 2]) {\n                sphere(d = 6);\n            }\n            \n            translate([5, 0, 2]) {\n                sphere(d = 6);\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "pokemon": "drifloon",
    "openscad_code": "// Drifloon - Pokemon #425\n// Medium complexity realistic style\n\n$fn = 32;\n\n// Main colors\npurple = [0.5, 0.2, 0.8];\nyellow = [1, 0.9, 0.2];\npink = [0.9, 0.7, 0.8];\nblack = [0.1, 0.1, 0.1];\nwhite = [0.95, 0.95, 0.95];\n\n// Main balloon body\nmodule balloon_body() {\n    color(purple)\n    difference() {\n        sphere(d = 40);\n        \n        // Mouth opening\n        translate([0, 0, -5])\n        rotate([0, 0, 0])\n        cylinder(h = 20, d1 = 15, d2 = 8, center = true);\n        \n        // Eye sockets\n        translate([8, 0, 10])\n        sphere(d = 8);\n        translate([-8, 0, 10])\n        sphere(d = 8);\n    }\n}\n\n// Eyes with X pupils\nmodule eyes() {\n    color(white)\n    union() {\n        translate([8, 0, 10])\n        sphere(d = 6);\n        translate([-8, 0, 10])\n        sphere(d = 6);\n    }\n    \n    color(black)\n    union() {\n        // Left eye X\n        translate([8, 0, 10])\n        rotate([0, 0, 45])\n        cube([6, 1, 1], center = true);\n        rotate([0, 0, 0])\n        cube([6, 1, 1], center = true);\n        \n        // Right eye X\n        translate([-8, 0, 10])\n        rotate([0, 0, 45])\n        cube([6, 1, 1], center = true);\n        rotate([0, 0, 0])\n        cube([6, 1, 1], center = true);\n    }\n}\n\n// Cloud puffs\nmodule cloud_puff(size, x, y, z) {\n    color(white)\n    translate([x, y, z])\n    scale([1, 1, 0.8])\n    sphere(d = size);\n}\n\n// Bottom cloud mass\nmodule bottom_cloud() {\n    union() {\n        cloud_puff(25, 0, 0, -25);\n        cloud_puff(20, 12, 5, -22);\n        cloud_puff(20, -10, 8, -20);\n        cloud_puff(18, 5, -12, -21);\n        cloud_puff(15, -15, -5, -23);\n    }\n}\n\n// Heart-shaped patch\nmodule heart_patch() {\n    color(pink)\n    translate([0, 0, -5])\n    rotate([90, 0, 0])\n    scale([0.8, 0.8, 0.3])\n    linear_extrude(height = 1)\n    polygon(points = [\n        [0, 5],\n        [2, 3],\n        [3, 1],\n        [2, -1],\n        [0, -2],\n        [-2, -1],\n        [-3, 1],\n        [-2, 3],\n        [0, 5]\n    ]);\n}\n\n// Balloon string\nmodule string() {\n    color(black)\n    translate([0, 0, -35])\n    cylinder(h = 30, d = 2);\n}\n\n// Arms/tendrils\nmodule arms() {\n    color(purple)\n    union() {\n        // Left arm\n        translate([15, 0, -10])\n        rotate([0, 0, -30])\n        cylinder(h = 20, d1 = 3, d2 = 2);\n        \n        // Right arm\n        translate([-15, 0, -10])\n        rotate([0, 0, 30])\n        cylinder(h = 20, d1 = 3, d2 = 2);\n    }\n}\n\n// Main assembly\nunion() {\n    balloon_body();\n    eyes();\n    heart_patch();\n    bottom_cloud();\n    string();\n    arms();\n}",
    "renders": true
  },
  {
    "pokemon": "drifblim",
    "openscad_code": "// Drifblim OpenSCAD Model - Realistic Style\n// Based on the Ghost/Flying type Pokemon\n\n$fn = 50;\nscale_factor = 0.8;\n\n// Main balloon body\nmodule drifblim_body() {\n    color([0.85, 0.7, 0.9]) {\n        // Main spherical balloon\n        sphere(25);\n        \n        // Additional balloon volume\n        translate([0, 0, 15])\n            scale([1.2, 1.2, 0.8])\n                sphere(20);\n    }\n}\n\n// Cross pattern on balloon\nmodule balloon_patterns() {\n    color([0.5, 0.3, 0.6]) {\n        // Vertical stripe\n        rotate([90, 0, 0])\n            cylinder(h=50, r1=2, r2=2);\n        \n        // Horizontal stripe\n        rotate([0, 90, 0])\n            cylinder(h=50, r1=2, r2=2);\n        \n        // Center X\n        rotate([45, 0, 0])\n            cylinder(h=30, r1=2, r2=2);\n        rotate([-45, 0, 0])\n            cylinder(h=30, r1=2, r2=2);\n    }\n}\n\n// Yellow crest\nmodule crest() {\n    color([1, 0.8, 0.2]) {\n        translate([0, 0, 35])\n            sphere(8);\n        translate([0, 0, 40])\n            scale([0.8, 0.8, 1.5])\n                sphere(5);\n    }\n}\n\n// Ghostly tail appendages\nmodule tails() {\n    color([0.85, 0.7, 0.9]) {\n        // Left tail\n        translate([-20, -20, -25])\n            rotate([30, 45, 15])\n                scale([3, 3, 15])\n                    sphere(1);\n        \n        // Right tail\n        translate([20, -20, -25])\n            rotate([30, -45, -15])\n                scale([3, 3, 15])\n                    sphere(1);\n        \n        // Center tail\n        translate([0, -25, -25])\n            rotate([45, 0, 0])\n                scale([3, 3, 20])\n                    sphere(1);\n    }\n}\n\n// Arms with yellow tips\nmodule arms() {\n    color([0.85, 0.7, 0.9]) {\n        // Left arm\n        translate([-25, 10, 0])\n            rotate([0, 0, 45])\n                scale([2.5, 2.5, 12])\n                    sphere(1);\n        \n        // Right arm\n        translate([25, 10, 0])\n            rotate([0, 0, -45])\n                scale([2.5, 2.5, 12])\n                    sphere(1);\n    }\n    \n    // Yellow tips\n    color([1, 0.8, 0.2]) {\n        translate([-35, 15, 5])\n            sphere(3);\n        translate([35, 15, 5])\n            sphere(3);\n    }\n}\n\n// Face features\nmodule face() {\n    // Eye sockets\n    color([0.1, 0.1, 0.1]) {\n        translate([-8, 20, 15])\n            rotate([20, 0, 0])\n                scale([1, 1.2, 0.5])\n                    sphere(4);\n        translate([8, 20, 15])\n            rotate([20, 0, 0])\n                scale([1, 1.2, 0.5])\n                    sphere(4);\n    }\n    \n    // Red pupils\n    color([0.8, 0.1, 0.1]) {\n        translate([-8, 22, 15])\n            rotate([20, 0, 0])\n                scale([0.5, 0.7, 0.2])\n                    sphere(2);\n        translate([8, 22, 15])\n            rotate([20, 0, 0])\n                scale([0.5, 0.7, 0.2])\n                    sphere(2);\n    }\n    \n    // Mouth\n    color([0.1, 0.1, 0.1]) {\n        translate([0, 15, 10])\n            rotate([30, 0, 0])\n                scale([5, 2, 1])\n                    sphere(1);\n    }\n}\n\n// Small X marks\nmodule x_marks() {\n    color([0.5, 0.3, 0.6]) {\n        for(i = [1:3]) {\n            rotate([0, 0, i * 120])\n                translate([0, 35, 5 - i * 5])\n                    rotate([90, 0, 0])\n                        scale([0.5, 0.5, 0.5])\n                            balloon_patterns();\n        }\n    }\n}\n\n// Main assembly\nscale([scale_factor, scale_factor, scale_factor]) {\n    union() {\n        drifblim_body();\n        balloon_patterns();\n        crest();\n        tails();\n        arms();\n        face();\n        x_marks();\n    }\n}",
    "renders": true
  },
  {
    "pokemon": "buneary",
    "openscad_code": "// Buneary Pokemon - Realistic Style - Medium Complexity\n// Approximate height: 70mm\n\n$fn = 32;\n\n// Main colors\ncolor_brown = [139/255, 69/255, 19/255];\ncolor_light_brown = [205/255, 133/255, 63/255];\ncolor_cream = [255/255, 222/255, 173/255];\ncolor_pink = [255/255, 192/255, 203/255];\ncolor_black = [0, 0, 0];\n\n// Main body\nmodule body() {\n    color(color_brown)\n    union() {\n        // Torso\n        translate([0, 0, 15])\n        scale([1, 0.8, 1.2])\n        sphere(15);\n        \n        // Belly\n        color(color_cream)\n        translate([0, -11, 15])\n        scale([0.7, 0.3, 1])\n        sphere(12);\n    }\n}\n\n// Head\nmodule head() {\n    color(color_brown)\n    union() {\n        // Main head shape\n        translate([0, 0, 40])\n        scale([1.1, 1, 1.1])\n        sphere(18);\n        \n        // Muzzle\n        color(color_light_brown)\n        translate([0, -15, 38])\n        scale([0.7, 0.5, 0.6])\n        sphere(12);\n        \n        // Nose\n        color(color_pink)\n        translate([0, -22, 38])\n        sphere(2);\n        \n        // Eyes\n        color(color_black)\n        translate([-8, -15, 45])\n        sphere(3);\n        translate([8, -15, 45])\n        sphere(3);\n        \n        // Eye highlights\n        color([1, 1, 1])\n        translate([-7, -14, 46])\n        sphere(1);\n        translate([9, -14, 46])\n        sphere(1);\n    }\n}\n\n// Ears module\nmodule ear(rotation) {\n    color(color_brown)\n    union() {\n        // Main ear\n        translate([0, 0, 0])\n        rotate([0, rotation, 0])\n        translate([0, 0, 25])\n        scale([0.4, 0.3, 3])\n        sphere(10);\n        \n        // Inner ear\n        color(color_pink)\n        translate([0, 0, 0])\n        rotate([0, rotation, 0])\n        translate([0, -1, 25])\n        scale([0.25, 0.2, 2.5])\n        sphere(8);\n        \n        // Ear tip\n        color(color_light_brown)\n        translate([0, 0, 0])\n        rotate([0, rotation, 0])\n        translate([0, 0, 55])\n        sphere(4);\n    }\n}\n\n// Arms\nmodule arm(side) {\n    color(color_brown)\n    union() {\n        // Upper arm\n        translate([side * 12, -5, 25])\n        rotate([0, 0, side * -20])\n        scale([0.4, 0.4, 1])\n        cylinder(h = 12, r1 = 5, r2 = 3);\n        \n        // Hand\n        translate([side * 18, -8, 22])\n        sphere(4);\n    }\n}\n\n// Legs\nmodule leg(side) {\n    color(color_brown)\n    union() {\n        // Upper leg\n        translate([side * 8, 0, 10])\n        rotate([0, 0, side * 10])\n        scale([0.5, 0.5, 1])\n        cylinder(h = 15, r1 = 6, r2 = 4);\n        \n        // Foot\n        color(color_cream)\n        translate([side * 10, 3, 0])\n        scale([1.2, 2, 0.8])\n        sphere(5);\n    }\n}\n\n// Cotton puff tail\nmodule tail() {\n    color([0.9, 0.9, 0.9])\n    translate([0, 15, 15])\n    sphere(12);\n    \n    // Tail swirl detail\n    color([0.8, 0.8, 0.8])\n    for(i = [1:3]) {\n        rotate([0, 0, i * 120])\n        translate([5, 15, 15])\n        scale([0.3, 1, 0.1])\n        sphere(8);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    \n    // Ears\n    translate([-12, 0, 50])\n    rotate([20, 0, -10])\n    ear(0);\n    translate([12, 0, 50])\n    rotate([20, 0, 10])\n    ear(0);\n    \n    // Arms\n    arm(1);\n    arm(-1);\n    \n    // Legs\n    leg(1);\n    leg(-1);\n    \n    // Tail\n    tail();\n}",
    "renders": true
  },
  {
    "pokemon": "lopunny",
    "openscad_code": "// Lopunny Pokemon - Realistic Medium Complexity\n// Scale: 80mm tall\n\n// Main body color - brown\ncolor([0.6, 0.4, 0.3]) {\n    // Torso\n    difference() {\n        scale([1, 0.8, 1.2]) sphere(d = 30, $fn = 32);\n        translate([0, 0, 12]) cube([32, 32, 24], center = true);\n    }\n    \n    // Lower body\n    translate([0, 0, -20]) scale([0.9, 0.7, 1.1]) sphere(d = 25, $fn = 32);\n    \n    // Head\n    translate([0, 0, 25]) scale([0.9, 0.7, 0.9]) sphere(d = 22, $fn = 32);\n}\n\n// Legs\nmodule leg() {\n    color([0.6, 0.4, 0.3]) {\n        // Upper leg\n        translate([0, 0, 10]) rotate([0, 90, 0]) cylinder(h = 15, d1 = 10, d2 = 8, $fn = 16);\n        \n        // Lower leg\n        translate([0, 7.5, -5]) rotate([0, 90, 0]) cylinder(h = 15, d1 = 8, d2 = 6, $fn = 16);\n        \n        // Foot\n        translate([0, 15, -10]) scale([1.2, 1, 0.5]) sphere(d = 8, $fn = 16);\n    }\n    \n    // Cream fur cuffs\n    color([0.95, 0.9, 0.85]) {\n        translate([0, 0, 0]) rotate([0, 90, 0]) cylinder(h = 3, d = 12, $fn = 16);\n    }\n}\n\n// Left leg\ntranslate([-8, 0, -20]) rotate([0, 0, 15]) leg();\n\n// Right leg\ntranslate([8, 0, -20]) rotate([0, 0, -15]) mirror([1, 0, 0]) leg();\n\n// Arms\nmodule arm() {\n    color([0.6, 0.4, 0.3]) {\n        // Upper arm\n        translate([0, 0, 5]) rotate([0, 90, 0]) cylinder(h = 12, d1 = 8, d2 = 6, $fn = 16);\n        \n        // Lower arm\n        translate([0, 6, -1]) rotate([0, 90, 0]) cylinder(h = 10, d1 = 6, d2 = 5, $fn = 16);\n        \n        // Hand\n        translate([0, 11, -5]) scale([0.8, 1, 0.4]) sphere(d = 6, $fn = 16);\n    }\n    \n    // Cream fur cuffs\n    color([0.95, 0.9, 0.85]) {\n        translate([0, 6, 0]) rotate([0, 90, 0]) cylinder(h = 3, d = 8, $fn = 16);\n    }\n}\n\n// Left arm\ntranslate([-15, 0, 15]) rotate([0, 0, -30]) rotate([0, 0, 90]) arm();\n\n// Right arm\ntranslate([15, 0, 15]) rotate([0, 0, 30]) rotate([0, 0, -90]) mirror([1, 0, 0]) arm();\n\n// Ears\nmodule ear() {\n    color([0.6, 0.4, 0.3]) {\n        // Main ear\n        translate([0, 0, 25]) rotate([0, 0, 0]) scale([1, 0.3, 8]) sphere(d = 8, $fn = 16);\n        \n        // Inner ear\n        color([0.95, 0.9, 0.85]) {\n            translate([0, 0.5, 20]) rotate([0, 0, 0]) scale([0.7, 0.2, 6]) sphere(d = 6, $fn = 16);\n        }\n    }\n}\n\n// Left ear\ntranslate([-8, 0, 35]) rotate([10, 0, -15]) ear();\n\n// Right ear\ntranslate([8, 0, 35]) rotate([10, 0, 15]) ear();\n\n// Eyes\nmodule eye() {\n    color([0.1, 0.1, 0.1]) {\n        translate([0, 0, 0]) sphere(d = 4, $fn = 16);\n    }\n    color([1, 1, 1]) {\n        translate([0.5, 0.5, 0.5]) sphere(d = 1.5, $fn = 8);\n    }\n}\n\n// Left eye\ntranslate([-5, -7, 28]) eye();\n\n// Right eye\ntranslate([5, -7, 28]) eye();\n\n// Nose\ncolor([0.3, 0.2, 0.15]) {\n    translate([0, -9, 25]) scale([1, 0.5, 0.5]) sphere(d = 3, $fn = 16);\n}\n\n// Mouth\ncolor([0.2, 0.15, 0.1]) {\n    translate([0, -10, 23]) rotate([90, 0, 0]) cylinder(h = 0.5, d = 4, $fn = 16);\n}\n\n// Tail\ncolor([0.95, 0.9, 0.85]) {\n    translate([0, 12, -15]) rotate([45, 0, 0]) scale([1, 0.5, 2]) sphere(d = 12, $fn = 32);\n}\n\n// Chest fur\ncolor([0.95, 0.9, 0.85]) {\n    translate([0, 5, 15]) scale([0.8, 0.4, 1]) sphere(d = 12, $fn = 32);\n}",
    "renders": true
  },
  {
    "pokemon": "mismagius",
    "openscad_code": "// Mismagius OpenSCAD Model - Medium Complexity Realistic Style\n\n// Parameters\nbody_width = 35;\nbody_height = 45;\nbody_depth = 30;\nhead_height = 25;\nneck_height = 8;\near_length = 20;\near_width = 8;\ntail_length = 40;\ntail_width = 6;\ngem_size = 5;\neye_size = 6;\n\n// Main body\nmodule body() {\n    color([0.3, 0.1, 0.4]) {\n        // Main spherical body\n        translate([0, 0, body_height/2]) \n            sphere(d=body_width);\n        \n        // Neck connection\n        translate([0, 0, body_height + neck_height/2])\n            cylinder(d1=body_width*0.7, d2=body_width*0.5, h=neck_height);\n        \n        // Head\n        translate([0, 0, body_height + neck_height + head_height/2])\n            sphere(d=body_width*0.8);\n    }\n}\n\n// Ears\nmodule ears() {\n    color([0.4, 0.1, 0.5]) {\n        // Left ear\n        translate([-body_width/3, 0, body_height + neck_height + head_height*0.8])\n            rotate([0, -30, -20])\n                cylinder(d1=ear_width, d2=ear_width*0.5, h=ear_length);\n        \n        // Right ear\n        translate([body_width/3, 0, body_height + neck_height + head_height*0.8])\n            rotate([0, -30, 20])\n                cylinder(d1=ear_width, d2=ear_width*0.5, h=ear_length);\n    }\n}\n\n// Face features\nmodule face() {\n    // Eyes\n    color([1, 1, 0]) {\n        // Left eye\n        translate([-body_width/4, body_width/4, body_height + neck_height + head_height*0.9])\n            sphere(d=eye_size);\n        \n        // Right eye\n        translate([body_width/4, body_width/4, body_height + neck_height + head_height*0.9])\n            sphere(d=eye_size);\n    }\n    \n    // Mouth\n    color([0.8, 0.2, 0.4]) {\n        translate([0, body_width/3, body_height + neck_height + head_height*0.7])\n            rotate([90, 0, 0])\n                cylinder(d=eye_size, h=1, $fn=8);\n    }\n    \n    // Red gem\n    color([0.8, 0.1, 0.1]) {\n        translate([0, -body_width/4, body_height + neck_height + head_height*0.9])\n            sphere(d=gem_size);\n    }\n}\n\n// Tails\nmodule tails() {\n    color([0.35, 0.1, 0.45]) {\n        // Generate 3 tails in a fan pattern\n        for(i = [-1, 0, 1]) {\n            rotate([0, 0, i * 45])\n                translate([0, -body_width/2, body_height/2])\n                    rotate([90, 0, 0])\n                        cylinder(d1=tail_width, d2=tail_width*0.3, h=tail_length);\n        }\n    }\n}\n\n// Wispy extensions\nmodule wisps() {\n    color([0.4, 0.1, 0.5]) {\n        // Side wisps\n        translate([-body_width/2, 0, body_height*0.7])\n            rotate([0, 0, -30])\n                cylinder(d1=8, d2=3, h=15);\n        \n        translate([body_width/2, 0, body_height*0.7])\n            rotate([0, 0, 30])\n                cylinder(d1=8, d2=3, h=15);\n        \n        // Back wisps\n        translate([0, -body_width/2, body_height*0.5])\n            rotate([0, 30, 0])\n                cylinder(d1=10, d2=4, h=20);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    ears();\n    face();\n    tails();\n    wisps();\n}",
    "renders": true
  },
  {
    "pokemon": "honchkrow",
    "openscad_code": "// Honchkrow - Realistic Style, Medium Complexity\n// Basic dimensions\nbody_length = 40;\nbody_width = 25;\nbody_height = 30;\nhead_size = 18;\nwing_span = 60;\nwing_depth = 8;\ntail_length = 35;\nbeak_length = 12;\n\n// Colors\ncolor_body = [0.1, 0.1, 0.1];      // Dark blue-black\ncolor_red = [0.8, 0.1, 0.1];       // Red accents\ncolor_white = [0.9, 0.9, 0.9];     // White feathers\ncolor_yellow = [0.9, 0.7, 0.1];    // Beak\ncolor_hat = [0.15, 0.15, 0.15];    // Dark hat color\n\nmodule honchkrow() {\n    // Main body\n    color(color_body)\n    union() {\n        // Body\n        translate([0, 0, 15])\n        scale([1, 0.8, 1.2])\n        sphere(d=body_length);\n        \n        // Head\n        translate([0, -body_width/2, body_height])\n        sphere(d=head_size);\n        \n        // Hat rim\n        translate([0, -body_width/2-2, body_height+5])\n        rotate([90, 0, 0])\n        cylinder(h=3, r1=head_size/2+3, r2=head_size/2+8);\n        \n        // Hat top\n        translate([0, -body_width/2-2, body_height+8])\n        rotate([90, 0, 0])\n        cylinder(h=12, r1=head_size/2+8, r2=0);\n        \n        // Beak\n        color(color_yellow)\n        translate([0, -body_width/2-8, body_height-2])\n        rotate([0, 0, -20])\n        cylinder(h=beak_length, r1=2.5, r2=0.5);\n        \n        // Eyes (white)\n        color(color_white)\n        for(i = [-1, 1]) {\n            translate([i*5, -body_width/2-8, body_height+3])\n            sphere(d=4);\n        }\n        \n        // Eyes (red pupils)\n        color(color_red)\n        for(i = [-1, 1]) {\n            translate([i*5.5, -body_width/2-9.5, body_height+3])\n            sphere(d=2);\n        }\n        \n        // Wings\n        color(color_body)\n        for(side = [-1, 1]) {\n            translate([side*body_width/2, 0, 25])\n            rotate([0, 0, side*20])\n            rotate([30, 0, 0])\n            scale([1, 2, 0.3])\n            sphere(d=wing_span/2);\n        }\n        \n        // Tail feathers\n        color(color_body)\n        translate([0, body_width/2+5, 20])\n        rotate([30, 0, 0])\n        scale([0.3, 3, 1])\n        sphere(d=tail_length);\n        \n        // Red chest marking\n        color(color_red)\n        translate([0, -body_width/2, 10])\n        scale([0.8, 0.3, 0.6])\n        sphere(d=body_length/1.5);\n        \n        // Legs\n        color(color_body)\n        for(side = [-1, 1]) {\n            translate([side*8, -body_width/2, 5])\n            cylinder(h=10, r=2);\n            \n            // Feet\n            translate([side*8, -body_width/2, 0])\n            rotate([90, 0, 0])\n            difference() {\n                cylinder(h=8, r=3);\n                translate([0, -4, 0])\n                cube([8, 8, 3], center=true);\n            }\n        }\n        \n        // Feathers on hat\n        color(color_red)\n        translate([0, -body_width/2-2, body_height+18])\n        rotate([0, 0, 45])\n        cylinder(h=8, r1=1, r2=3);\n        \n        // Side feathers\n        color(color_body)\n        for(side = [-1, 1]) {\n            translate([side*head_size/2, -body_width/2-2, body_height-5])\n            rotate([0, 0, side*30])\n            scale([0.5, 2, 0.2])\n            sphere(d=8);\n        }\n    }\n}\n\n// Create the model\nhonchkrow();",
    "renders": true
  },
  {
    "pokemon": "glameow",
    "openscad_code": "// Glameow - Realistic Style, Medium Complexity\n// 3D printable Pokemon model\n\n// Color definitions\ncolor_body = \"#C9A0DC\";\ncolor_face = \"#F4E4F7\";\ncolor_ears = \"#B680CC\";\ncolor_tail = \"#B680CC\";\ncolor_eyes = \"#4A90E2\";\ncolor_nose = \"#FF6B6B\";\ncolor_inner_ear = \"#F4E4F7\";\ncolor_collar = \"#FFFFFF\";\n\n// Scale factor for 3D printing (80mm height)\nscale_factor = 1;\n\n// Main body module\nmodule glameow_body() {\n    color(color_body) {\n        // Torso - main body\n        translate([0, 0, 15]) {\n            scale([1.2, 1, 1]) {\n                sphere(d=25, $fn=32);\n            }\n        }\n        \n        // Chest\n        translate([0, 8, 8]) {\n            sphere(d=18, $fn=32);\n        }\n        \n        // Belly\n        translate([0, 0, 5]) {\n            difference() {\n                sphere(d=22, $fn=32);\n                translate([0, 0, -11]) {\n                    cube([30, 30, 15], center=true);\n                }\n            }\n        }\n    }\n}\n\n// Head module\nmodule glameow_head() {\n    color(color_face) {\n        // Main head shape\n        translate([0, 25, 22]) {\n            scale([1.1, 1.3, 1]) {\n                sphere(d=20, $fn=32);\n            }\n        }\n        \n        // Snout\n        translate([0, 32, 20]) {\n            scale([0.8, 1.2, 0.8]) {\n                sphere(d=12, $fn=32);\n            }\n        }\n    }\n}\n\n// Ears module\nmodule glameow_ears() {\n    // Left ear\n    color(color_ears) {\n        translate([-8, 20, 30]) {\n            rotate([0, -20, -30]) {\n                scale([0.5, 0.3, 2]) {\n                    cylinder(h=15, d1=8, d2=4, $fn=16);\n                }\n            }\n        }\n        \n        // Right ear\n        translate([8, 20, 30]) {\n            rotate([0, -20, 30]) {\n                scale([0.5, 0.3, 2]) {\n                    cylinder(h=15, d1=8, d2=4, $fn=16);\n                }\n            }\n        }\n        \n        // Inner ears\n        color(color_inner_ear) {\n            translate([-8, 20, 30]) {\n                rotate([0, -20, -30]) {\n                    translate([0, 0, 2]) {\n                        scale([0.3, 0.2, 1.5]) {\n                            cylinder(h=12, d1=6, d2=3, $fn=16);\n                        }\n                    }\n                }\n            }\n            \n            translate([8, 20, 30]) {\n                rotate([0, -20, 30]) {\n                    translate([0, 0, 2]) {\n                        scale([0.3, 0.2, 1.5]) {\n                            cylinder(h=12, d1=6, d2=3, $fn=16);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Eyes module\nmodule glameow_eyes() {\n    // Left eye\n    color(color_eyes) {\n        translate([-5, 30, 22]) {\n            scale([1.2, 1, 1]) {\n                sphere(d=4, $fn=16);\n            }\n        }\n        \n        // Right eye\n        translate([5, 30, 22]) {\n            scale([1.2, 1, 1]) {\n                sphere(d=4, $fn=16);\n            }\n        }\n    }\n    \n    // Eye highlights\n    color(\"white\") {\n        translate([-4, 31, 23.5]) {\n            sphere(d=1.5, $fn=8);\n        }\n        \n        translate([6, 31, 23.5]) {\n            sphere(d=1.5, $fn=8);\n        }\n    }\n}\n\n// Nose module\nmodule glameow_nose() {\n    color(color_nose) {\n        translate([0, 35, 21]) {\n            sphere(d=2, $fn=8);\n        }\n    }\n}\n\n// Legs module\nmodule glameow_legs() {\n    color(color_body) {\n        // Front left leg\n        translate([-8, 15, 0]) {\n            rotate([0, 10, 0]) {\n                cylinder(h=12, d1=6, d2=4, $fn=16);\n            }\n        }\n        \n        // Front right leg\n        translate([8, 15, 0]) {\n            rotate([0, 10, 0]) {\n                cylinder(h=12, d1=6, d2=4, $fn=16);\n            }\n        }\n        \n        // Back left leg\n        translate([-10, -10, 0]) {\n            rotate([0, -10, 0]) {\n                cylinder(h=15, d1=7, d2=5, $fn=16);\n            }\n        }\n        \n        // Back right leg\n        translate([10, -10, 0]) {\n            rotate([0, -10, 0]) {\n                cylinder(h=15, d1=7, d2=5, $fn=16);\n            }\n        }\n    }\n    \n    // Paws\n    color(color_face) {\n        for(x = [-8, 8]) {\n            translate([x, 15, -1]) {\n                sphere(d=6, $fn=16);\n            }\n            translate([x*1.25, -10, -1]) {\n                sphere(d=7, $fn=16);\n            }\n        }\n    }\n}\n\n// Tail module\nmodule glameow_tail() {\n    color(color_tail) {\n        // Tail base\n        translate([0, -18, 18]) {\n            rotate([30, 0, 0]) {\n                cylinder(h=8, d1=8, d2=6, $fn=16);\n            }\n        }\n        \n        // Tail curl - spiral segments\n        for(i = [0:15:135]) {\n            rotate([0, 0, i]) {\n                translate([0, -18 - i/5, 18 - i/10]) {\n                    rotate([30 - i/10, 0, 0]) {\n                        sphere(d=5, $fn=16);\n                    }\n                }\n            }\n        }\n        \n        // Tail tip\n        translate([4, -32, 10]) {\n            sphere(d=4, $fn=16);\n        }\n    }\n}\n\n// Whiskers module\nmodule glameow_whiskers() {\n    color(\"#666666\") {\n        // Left whiskers\n        for(angle = [-20, 0, 20]) {\n            translate([-6, 33, 23]) {\n                rotate([0, angle, -90]) {\n                    cylinder(h=10, d=0.8, $fn=8);\n                }\n            }\n        }\n        \n        // Right whiskers\n        for(angle = [-20, 0, 20]) {\n            translate([6, 33, 23]) {\n                rotate([0, angle, -90]) {\n                    cylinder(h=10, d=0.8, $fn=8);\n                }\n            }\n        }\n    }\n}\n\n// Collar module\nmodule glameow_collar() {\n    color(color_collar) {\n        translate([0, 10, 20]) {\n            rotate([90, 0, 0]) {\n                difference() {\n                    cylinder(h=3, d=28, $fn=32);\n                    cylinder(h=4, d=26, $fn=32);\n                }\n            }\n        }\n        \n        // Collar gem\n        color(\"#FF69B4\") {\n            translate([0, 10, 21.5]) {\n                sphere(d=4, $fn=16);\n            }\n        }\n    }\n}\n\n// Assembly\nscale([scale_factor, scale_factor, scale_factor]) {\n    union() {\n        glameow_body();\n        glameow_head();\n        glameow_ears();\n        glameow_eyes();\n        glameow_nose();\n        glameow_legs();\n        glameow_tail();\n        glameow_whiskers();\n        glameow_collar();\n    }\n}",
    "renders": true
  },
  {
    "pokemon": "purugly",
    "openscad_code": "// Realistic Purugly OpenSCAD Model - Medium Complexity\n// 3D printable Pokemon figure with characteristic features\n\n$fn = 32;\n\n// Main colors\ncolor_body = [0.7, 0.7, 0.7];      // Light gray\ncolor_accents = [0.3, 0.3, 0.3];   // Dark gray\ncolor_eyes = [0.9, 0.1, 0.1];      // Red\ncolor_mouth = [0.5, 0.2, 0.2];     // Dark pink\n\n// Scale factor for 3D printing (80mm width)\nscale_factor = 1;\n\nmodule body_main() {\n    color(color_body)\n    union() {\n        // Main rounded body\n        translate([0, 0, 15])\n            scale([1.2, 1, 0.8])\n            sphere(20);\n        \n        // Lower belly bulge\n        translate([0, 0, 5])\n            scale([1.1, 0.9, 0.6])\n            sphere(18);\n    }\n}\n\nmodule head() {\n    color(color_body)\n    union() {\n        // Head shape\n        translate([0, 22, 25])\n            scale([0.9, 0.7, 0.7])\n            sphere(15);\n        \n        // Snout extension\n        translate([0, 32, 22])\n            scale([0.6, 0.4, 0.3])\n            sphere(12);\n    }\n}\n\nmodule ears() {\n    color(color_body)\n    union() {\n        // Left ear\n        translate([-12, 15, 35])\n            rotate([0, -20, -30])\n            scale([0.4, 0.2, 1.2])\n            cylinder(15, 5, 3);\n        \n        // Right ear\n        translate([12, 15, 35])\n            rotate([0, -20, 30])\n            scale([0.4, 0.2, 1.2])\n            cylinder(15, 5, 3);\n        \n        // Ear tips (dark gray)\n        color(color_accents) {\n            translate([-12, 15, 48])\n                sphere(3);\n            translate([12, 15, 48])\n                sphere(3);\n        }\n    }\n}\n\nmodule tail() {\n    color(color_body)\n    union() {\n        // Main tail base\n        translate([0, -28, 18])\n            rotate([0, 0, 0])\n            scale([0.8, 0.3, 0.3])\n            cylinder(20, 8, 5);\n        \n        // Tail curl\n        translate([0, -38, 15])\n            rotate([0, 0, 0])\n            scale([0.9, 0.4, 0.4])\n            sphere(12);\n        \n        // Tail stripes\n        color(color_accents)\n        for(i = [0:2]) {\n            translate([0, -25 - i*5, 18])\n                scale([0.85, 0.35, 0.35])\n                cylinder(3, 7.5, 4.5);\n        }\n    }\n}\n\nmodule legs() {\n    color(color_body)\n    union() {\n        // Front legs\n        for(side = [-1, 1]) {\n            translate([side * 12, 15, 8])\n                rotate([0, side * 10, 0])\n                scale([0.4, 0.4, 1])\n                cylinder(12, 4, 3);\n            \n            // Paws\n            translate([side * 12, 15, 0])\n                sphere(4);\n        }\n        \n        // Back legs\n        for(side = [-1, 1]) {\n            translate([side * 15, -18, 8])\n                rotate([0, side * 15, 0])\n                scale([0.5, 0.5, 1.1])\n                cylinder(14, 5, 4);\n            \n            // Back paws\n            translate([side * 15, -18, 0])\n                sphere(5);\n        }\n    }\n}\n\nmodule face_features() {\n    union() {\n        // Eyes\n        color(color_eyes)\n        for(side = [-1, 1]) {\n            translate([side * 6, 30, 28])\n                scale([1, 1.2, 0.5])\n                sphere(4);\n            \n            // Eye highlights\n            color([1, 1, 1])\n            translate([side * 5.5, 31, 30])\n                sphere(1);\n        }\n        \n        // Nose\n        color(color_accents)\n        translate([0, 36, 24])\n            sphere(2);\n        \n        // Mouth\n        color(color_mouth)\n        translate([0, 35, 20])\n            scale([1.5, 0.5, 0.5])\n            sphere(2);\n        \n        // Whiskers\n        color(color_accents)\n        for(side = [-1, 1]) {\n            for(i = [0:2]) {\n                rotate([0, 0, side * (20 + i * 10)])\n                translate([side * 8, 32, 22])\n                    cylinder(12, 0.5, 0.5);\n            }\n        }\n    }\n}\n\nmodule body_markings() {\n    color(color_accents)\n    union() {\n        // Chest pattern\n        translate([0, 10, 18])\n            scale([0.8, 0.6, 0.1])\n            sphere(12);\n        \n        // Side stripes\n        for(side = [-1, 1]) {\n            for(i = [0:1]) {\n                translate([side * 18, -5 + i * 10, 15])\n                    scale([0.3, 1.5, 0.2])\n                    sphere(8);\n            }\n        }\n    }\n}\n\n// Assembly\nscale([scale_factor, scale_factor, scale_factor]) {\n    body_main();\n    head();\n    ears();\n    tail();\n    legs();\n    face_features();\n    body_markings();\n}",
    "renders": true
  },
  {
    "pokemon": "chingling",
    "openscad_code": "// Chingling - Realistic Style, Medium Complexity\n// 3D printable model with proper wall thickness and no overhangs\n\n// Overall scale\nscale = 1.5;\n\n// Main colors\ncolor_yellow = [1, 0.8, 0];\ncolor_red = [0.8, 0.2, 0.2];\ncolor_black = [0.1, 0.1, 0.1];\ncolor_white = [0.9, 0.9, 0.9];\n\n// Main body module\nmodule chingling_body() {\n    color(color_yellow)\n    union() {\n        // Main spherical body\n        sphere(15 * scale);\n        \n        // Bottom flattened\n        translate([0, 0, -15 * scale])\n        cylinder(h=5 * scale, r1=15 * scale, r2=12 * scale, $fn=32);\n    }\n}\n\n// Ear module\nmodule chingling_ear(side) {\n    color(color_yellow)\n    translate([side * 12 * scale, 0, 10 * scale]) {\n        rotate([0, side * 15, 0])\n        union() {\n            // Main ear shape\n            scale([1, 0.3, 2.5]) sphere(8 * scale);\n            \n            // Red marking\n            color(color_red)\n            translate([0, 2.5 * scale, 3 * scale])\n            scale([0.6, 0.2, 0.8])\n            sphere(8 * scale);\n            \n            // Black line\n            color(color_black)\n            translate([0, 3 * scale, -3 * scale])\n            scale([0.8, 0.1, 0.05])\n            cube([12 * scale, 1 * scale, 0.5 * scale]);\n        }\n    }\n}\n\n// Eye module\nmodule chingling_eye(side) {\n    color(color_black)\n    translate([side * 6 * scale, -10 * scale, 5 * scale]) {\n        // Eye socket\n        difference() {\n            sphere(4 * scale);\n            translate([0, 1 * scale, 1 * scale])\n            sphere(3 * scale);\n        }\n        \n        // Eye highlight\n        color(color_white)\n        translate([1 * scale, 1 * scale, 2 * scale])\n        sphere(1 * scale);\n    }\n}\n\n// Mouth module\nmodule chingling_mouth() {\n    color(color_black)\n    translate([0, -12 * scale, -5 * scale])\n    rotate([0, 0, 0])\n    scale([1, 0.3, 0.5])\n    sphere(3 * scale);\n}\n\n// Ball appendage\nmodule chingling_ball() {\n    color(color_red)\n    translate([0, 0, -20 * scale]) {\n        // Main ball\n        sphere(8 * scale);\n        \n        // Ring\n        color(color_yellow)\n        difference() {\n            cylinder(h=3 * scale, r1=10 * scale, r2=10 * scale, $fn=32);\n            cylinder(h=4 * scale, r1=8 * scale, r2=8 * scale, $fn=32);\n        }\n        \n        // Connection to body\n        color(color_yellow)\n        translate([0, 0, 8 * scale])\n        cylinder(h=2 * scale, r1=4 * scale, r2=6 * scale, $fn=16);\n    }\n}\n\n// Assembly\nchingling_body();\n\n// Ears\nchingling_ear(1);\nchingling_ear(-1);\n\n// Eyes\nchingling_eye(1);\nchingling_eye(-1);\n\n// Mouth\nchingling_mouth();\n\n// Ball\nchingling_ball();",
    "renders": true
  },
  {
    "pokemon": "stunky",
    "openscad_code": "// Stunky Pokemon - Realistic Medium Complexity\n// Overall dimensions: ~80mm length, ~60mm height, ~50mm width\n\n// Color definitions\ncolor_purple = [0.5, 0.2, 0.6];\ncolor_dark_purple = [0.3, 0.1, 0.4];\ncolor_magenta = [0.7, 0.2, 0.5];\ncolor_white = [0.9, 0.9, 0.9];\ncolor_yellow = [0.9, 0.8, 0.2];\ncolor_black = [0.1, 0.1, 0.1];\n\n// Main module\nmodule stunky() {\n    // Body\n    color(color_purple) {\n        // Main torso\n        translate([0, 0, 15]) {\n            difference() {\n                scale([1.2, 0.8, 1]) sphere(d=40);\n                translate([0, 0, -20]) cube([80, 80, 40], center=true);\n            }\n        }\n        \n        // Back\n        translate([5, 0, 20]) {\n            scale([1.3, 1, 0.6]) sphere(d=35);\n        }\n    }\n    \n    // Head\n    color(color_purple) {\n        translate([-15, 0, 35]) {\n            scale([0.8, 0.9, 0.8]) sphere(d=35);\n        }\n    }\n    \n    // Snout\n    color(color_dark_purple) {\n        translate([-30, 0, 35]) {\n            rotate([0, 0, 0]) cylinder(h=15, d1=12, d2=8);\n        }\n    }\n    \n    // Ears\n    module ear(x, y, z, rot) {\n        color(color_purple) {\n            translate([x, y, z]) {\n                rotate([0, 0, rot]) {\n                    difference() {\n                        scale([0.4, 0.1, 1.2]) sphere(d=15);\n                        translate([0, -10, 0]) cube([20, 20, 30], center=true);\n                    }\n                }\n            }\n        }\n    }\n    \n    ear(-15, -15, 45, -30);\n    ear(-15, 15, 45, 30);\n    \n    // Legs\n    module leg(x, y, angle) {\n        color(color_purple) {\n            translate([x, y, 10]) {\n                rotate([0, 0, angle]) {\n                    union() {\n                        // Upper leg\n                        translate([0, 0, 5]) cylinder(h=15, d=8);\n                        // Paw\n                        translate([0, 0, -5]) {\n                            scale([1.2, 1, 0.8]) sphere(d=10);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    leg(-5, -20, -10);\n    leg(-5, 20, 10);\n    leg(20, -15, -15);\n    leg(20, 15, 15);\n    \n    // Tail\n    color(color_purple) {\n        translate([25, 0, 25]) {\n            rotate([20, 0, 0]) {\n                hull() {\n                    sphere(d=12);\n                    translate([0, 0, 25]) sphere(d=8);\n                }\n            }\n        }\n    }\n    \n    // Tail tuft\n    color(color_magenta) {\n        translate([25, 0, 50]) {\n            rotate([20, 0, 0]) {\n                for(i = [0:45:315]) {\n                    rotate([0, 0, i]) {\n                        translate([0, 0, 5]) {\n                            scale([0.2, 0.1, 0.8]) sphere(d=8);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Face details\n    // Eyes\n    module eye(x, y) {\n        color(color_white) {\n            translate([x, y, 35]) {\n                sphere(d=6);\n            }\n        }\n        color(color_black) {\n            translate([x-2, y, 37]) {\n                sphere(d=3);\n            }\n        }\n        color(color_yellow) {\n            translate([x, y, 35]) {\n                scale([1.2, 0.8, 0.2]) sphere(d=6);\n            }\n        }\n    }\n    \n    eye(-25, -8);\n    eye(-25, 8);\n    \n    // Nose\n    color(color_black) {\n        translate([-35, 0, 35]) {\n            sphere(d=3);\n        }\n    }\n    \n    // Mouth\n    color(color_black) {\n        translate([-30, 0, 30]) {\n            rotate([90, 0, 0]) {\n                cylinder(h=1, d=8);\n            }\n        }\n    }\n    \n    // Stripes\n    color(color_dark_purple) {\n        // Back stripes\n        for(i = [1:3]) {\n            translate([5 + i*5, 0, 20 + i*3]) {\n                rotate([0, 90, 0]) {\n                    scale([0.3, 1, 0.1]) cylinder(h=30, d=20);\n                }\n            }\n        }\n        \n        // Head stripe\n        translate([-20, 0, 45]) {\n            rotate([0, 0, 0]) {\n                scale([0.8, 0.1, 0.1]) cube([20, 25, 5], center=true);\n            }\n        }\n    }\n    \n    // Belly marking\n    color(color_white) {\n        translate([0, 0, 12]) {\n            difference() {\n                scale([1, 0.6, 0.3]) sphere(d=35);\n                translate([0, 0, -10]) cube([40, 30, 20], center=true);\n            }\n        }\n    }\n}\n\n// Create the model\nstunky();",
    "renders": true
  },
  {
    "pokemon": "skuntank",
    "openscad_code": "// Skuntank Pokemon - Realistic Style, Medium Complexity\n// Designed for 3D printing - approximately 80mm in length\n\n// Color definitions\n$fn = 32;\n\n// Main body module\nmodule skuntank_body() {\n    // Main torso - elongated ellipsoid\n    color(\"purple\") {\n        scale([1.2, 0.8, 0.9]) sphere(d=30);\n    }\n    \n    // Thicker rear section\n    color(\"purple\") {\n        translate([12, 0, 0]) scale([1.4, 1, 1.1]) sphere(d=25);\n    }\n}\n\n// Head with snout\nmodule skuntank_head() {\n    color(\"purple\") {\n        // Main head sphere\n        translate([-25, 0, 8]) sphere(d=20);\n        \n        // Snout extension\n        translate([-35, 0, 6]) scale([1.5, 0.7, 0.7]) sphere(d=12);\n    }\n}\n\n// Ears - two pointed ears\nmodule skuntank_ears() {\n    color(\"purple\") {\n        // Left ear\n        translate([-28, 8, 18]) rotate([0, -20, -30]) cylinder(h=12, d1=6, d2=2);\n        \n        // Right ear\n        translate([-28, -8, 18]) rotate([0, -20, 30]) cylinder(h=12, d1=6, d2=2);\n    }\n}\n\n// Tail - split into two parts\nmodule skuntank_tail() {\n    color(\"purple\") {\n        // Main tail base\n        translate([22, 0, 5]) rotate([0, 20, 0]) cylinder(h=20, d1=10, d2=8);\n        \n        // Left tail segment\n        translate([32, 6, 8]) rotate([0, 10, -15]) cylinder(h=15, d1=8, d2=4);\n        \n        // Right tail segment\n        translate([32, -6, 8]) rotate([0, 10, 15]) cylinder(h=15, d1=8, d2=4);\n    }\n}\n\n// Legs - four legs with paws\nmodule skuntank_legs() {\n    color(\"purple\") {\n        // Front left leg\n        translate([-15, 12, -12]) cylinder(h=15, d=6);\n        translate([-15, 12, -20]) sphere(d=8);\n        \n        // Front right leg\n        translate([-15, -12, -12]) cylinder(h=15, d=6);\n        translate([-15, -12, -20]) sphere(d=8);\n        \n        // Rear left leg\n        translate([15, 12, -12]) cylinder(h=15, d=6);\n        translate([15, 12, -20]) sphere(d=8);\n        \n        // Rear right leg\n        translate([15, -12, -12]) cylinder(h=15, d=6);\n        translate([15, -12, -20]) sphere(d=8);\n    }\n}\n\n// Face details\nmodule skuntank_face() {\n    // Eyes - yellow with black pupils\n    color(\"yellow\") {\n        translate([-38, 5, 10]) sphere(d=4);\n        translate([-38, -5, 10]) sphere(d=4);\n    }\n    \n    color(\"black\") {\n        translate([-40, 5, 10]) sphere(d=2);\n        translate([-40, -5, 10]) sphere(d=2);\n    }\n    \n    // Nose\n    color(\"black\") {\n        translate([-42, 0, 8]) sphere(d=3);\n    }\n    \n    // Mouth line\n    color(\"black\") {\n        translate([-38, 0, 5]) rotate([90, 0, 0]) cylinder(h=8, d=1);\n    }\n}\n\n// Stripes pattern on body\nmodule skuntank_stripes() {\n    color(\"black\") {\n        // Body stripes\n        for(i = [-10, 0, 10]) {\n            translate([i, 0, 10]) rotate([90, 0, 0]) cylinder(h=30, d=2);\n        }\n        \n        // Tail stripes\n        translate([30, 0, 8]) rotate([0, 110, 0]) cylinder(h=15, d=1.5);\n    }\n}\n\n// Assembly\nunion() {\n    skuntank_body();\n    skuntank_head();\n    skuntank_ears();\n    skuntank_tail();\n    skuntank_legs();\n    skuntank_face();\n    skuntank_stripes();\n}",
    "renders": true
  },
  {
    "pokemon": "bronzor",
    "openscad_code": "// Realistic Bronzor Pokemon - Medium Complexity OpenSCAD Model\n// 3D printable at ~80mm diameter\n\n// Color definitions\ncolor_bronze = \"#B87333\";\ncolor_dark_bronze = \"#8B5A2B\";\ncolor_blue = \"#4169E1\";\ncolor_black = \"#000000\";\ncolor_red = \"#DC143C\";\n\n// Main parameters\ndiameter = 80;\nthickness = 8;\nedge_thickness = 3;\n\n// Create the main circular body\nmodule bronzor_body() {\n    color(color_bronze) {\n        // Main disc\n        cylinder(h=thickness, d=diameter, $fn=100);\n        \n        // Raised edge ring\n        translate([0, 0, thickness-0.1]) {\n            cylinder(h=edge_thickness, d=diameter+2, $fn=100);\n        }\n    }\n}\n\n// Create decorative ring pattern around edge\nmodule edge_pattern() {\n    for (i = [0:7]) {\n        rotate([0, 0, i * 45]) {\n            translate([diameter/2 - 4, 0, thickness - 0.5]) {\n                color(color_dark_bronze) {\n                    cube([8, 3, 1.5], center=true);\n                }\n            }\n        }\n    }\n}\n\n// Create central eye pattern\nmodule central_eye() {\n    // Outer blue ring\n    color(color_blue) {\n        translate([0, 0, thickness + 0.1]) {\n            cylinder(h=1, d=25, $fn=100);\n        }\n    }\n    \n    // Inner black circle\n    color(color_black) {\n        translate([0, 0, thickness + 0.2]) {\n            cylinder(h=1, d=15, $fn=100);\n        }\n    }\n    \n    // Red pupil\n    color(color_red) {\n        translate([0, 0, thickness + 0.3]) {\n            cylinder(h=1, d=8, $fn=100);\n        }\n    }\n}\n\n// Create ancient rune patterns\nmodule rune_markings() {\n    // Top rune (cross pattern)\n    translate([0, 0, thickness + 0.1]) {\n        color(color_dark_bronze) {\n            intersection() {\n                cylinder(h=1, d=35, $fn=4);\n                cylinder(h=1, d=35, $fn=4, rotate=[0, 0, 45]);\n            }\n        }\n    }\n    \n    // Side runes\n    for (angle = [30, 150, 210, 330]) {\n        rotate([0, 0, angle]) {\n            translate([diameter/3, 0, thickness + 0.1]) {\n                color(color_dark_bronze) {\n                    rotate([0, 0, 45]) {\n                        cube([8, 2, 1], center=true);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Create decorative dots around edges\nmodule decorative_dots() {\n    for (i = [0:11]) {\n        rotate([0, 0, i * 30]) {\n            translate([diameter/2 - 8, 0, thickness + 0.1]) {\n                color(color_dark_bronze) {\n                    sphere(d=2, $fn=20);\n                }\n            }\n        }\n    }\n}\n\n// Create back details (hidden eye pattern)\nmodule back_details() {\n    // Hidden eye on back\n    translate([0, 0, -0.1]) {\n        color(color_blue) {\n            cylinder(h=1, d=15, $fn=100);\n        }\n    }\n    \n    // Concentric rings on back\n    for (r = [20:10:40]) {\n        translate([0, 0, -0.1]) {\n            color(color_dark_bronze) {\n                difference() {\n                    cylinder(h=0.5, d=r+2, $fn=100);\n                    cylinder(h=1, d=r, $fn=100);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    bronzor_body();\n    edge_pattern();\n    central_eye();\n    rune_markings();\n    decorative_dots();\n    back_details();\n}",
    "renders": true
  },
  {
    "pokemon": "bronzong",
    "openscad_code": "color(\"peru\") union() {\n    // Main body - bronze disc shape\n    difference() {\n        cylinder(h = 12, r = 25, $fn = 64);\n        translate([0, 0, -1]) cylinder(h = 14, r = 20, $fn = 64);\n    }\n    \n    // Top dome\n    translate([0, 0, 12]) sphere(r = 25, $fn = 64);\n    \n    // Bottom dome\n    translate([0, 0, 0]) mirror([0, 0, 1]) sphere(r = 25, $fn = 64);\n    \n    // Eye holes\n    for (x = [-12, 12]) {\n        translate([x, 0, 8]) {\n            rotate([90, 0, 0]) cylinder(h = 10, r1 = 4, r2 = 6, $fn = 32);\n            translate([0, 0, -1]) color(\"slateblue\") sphere(r = 3.5);\n        }\n    }\n    \n    // Decorative ring around body\n    translate([0, 0, 6]) cylinder(h = 1.5, r = 27, $fn = 128);\n    translate([0, 0, 4.5]) cylinder(h = 1.5, r = 27, $fn = 128);\n    \n    // Arms/handles on sides\n    module handle() {\n        rotate([0, 90, 0]) difference() {\n            union() {\n                cylinder(h = 20, r = 4, $fn = 32);\n                translate([0, 0, 20]) sphere(r = 4);\n            }\n            translate([0, -5, 10]) cube([10, 10, 20], center = true);\n        }\n    }\n    \n    translate([0, 25, 6]) handle();\n    translate([0, -25, 6]) mirror([0, 1, 0]) handle();\n    \n    // Decorative markings on front\n    for (i = [0:2]) {\n        rotate([0, 0, i * 120]) {\n            translate([0, 18, 6]) cube([3, 8, 0.5], center = true);\n            translate([0, -18, 6]) cube([3, 8, 0.5], center = true);\n        }\n    }\n    \n    // Bottom decorative pattern\n    for (i = [0:7]) {\n        rotate([0, 0, i * 45]) {\n            translate([15, 0, 1]) cube([6, 2, 1], center = true);\n        }\n    }\n    \n    // Top crest detail\n    translate([0, 0, 30]) {\n        cylinder(h = 3, r = 8, $fn = 16);\n        translate([0, 0, 3]) sphere(r = 8);\n    }\n    \n    // Small circular markings\n    for (r = [15, 20]) {\n        for (a = [0:30:330]) {\n            rotate([0, 0, a]) {\n                translate([r, 0, 6]) {\n                    cylinder(h = 0.5, r = 1.5, $fn = 16);\n                }\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "pokemon": "bonsly",
    "openscad_code": "// Bonsly Pokemon - Realistic Style - Medium Complexity\n// Size: ~80mm height\n\n$fa = 1;\n$fs = 0.4;\n\n// Main colors\ncolor_brown = [101/255, 67/255, 33/255];\ncolor_dark_brown = [61/255, 37/255, 15/255];\ncolor_green = [34/255, 139/255, 34/255];\ncolor_beige = [245/255, 222/255, 179/255];\ncolor_black = [20/255, 20/255, 20/255];\n\nmodule bonsly() {\n    // Main body (boulder-like pot shape)\n    color(color_brown)\n    difference() {\n        cylinder(h = 45, r1 = 25, r2 = 20, center = false);\n        translate([0, 0, -1])\n        cylinder(h = 47, r1 = 20, r2 = 15, center = false);\n    }\n    \n    // Top rim detail\n    color(color_dark_brown)\n    translate([0, 0, 44])\n    cylinder(h = 3, r1 = 25.5, r2 = 25, center = false);\n    \n    // Head (cubic with rounded edges)\n    color(color_brown)\n    translate([0, 0, 47])\n    minkowski() {\n        cube([30, 25, 30], center = true);\n        sphere(2);\n    }\n    \n    // Face details - eyes\n    color(color_black)\n    for(x = [-8, 8]) {\n        translate([x, 5, 60])\n        sphere(3);\n    }\n    \n    // Mouth\n    color(color_black)\n    translate([0, -2, 54])\n    rotate([90, 0, 0])\n    cylinder(h = 1, r1 = 4, r2 = 2, center = true);\n    \n    // Branch-like antenna (3 branches)\n    color(color_dark_brown)\n    translate([0, 0, 62])\n    cylinder(h = 15, r = 2, center = false);\n    \n    for(angle = [0, 120, 240]) {\n        color(color_green)\n        translate([0, 0, 70])\n        rotate([0, 0, angle])\n        translate([8, 0, 0])\n        rotate([0, 90, 0])\n        scale([0.3, 0.3, 1])\n        cylinder(h = 10, r = 3, center = false);\n    }\n    \n    // Leaf clusters\n    color(color_green)\n    for(angle = [0, 120, 240]) {\n        translate([0, 0, 70])\n        rotate([0, 0, angle])\n        translate([10, 0, 5])\n        sphere(4);\n    }\n    \n    // Side branches (arms)\n    color(color_brown)\n    for(side = [-1, 1]) {\n        translate([side * 20, 0, 40])\n        rotate([0, 0, side * 30])\n        cylinder(h = 12, r = 3, center = false);\n        \n        // Hand-like end\n        translate([side * 28, 0, 40])\n        rotate([0, 0, side * 30])\n        sphere(4);\n    }\n    \n    // Base stabilizers\n    color(color_dark_brown)\n    for(angle = [45, 135, 225, 315]) {\n        rotate([0, 0, angle])\n        translate([20, 0, 0])\n        cylinder(h = 8, r = 2, center = false);\n    }\n    \n    // Wood grain texture - simplified rings\n    color(color_dark_brown)\n    for(i = [1:3]) {\n        translate([0, 0, i * 10])\n        cylinder(h = 0.5, r1 = 25 - i * 2, r2 = 25 - i * 2, center = false);\n    }\n    \n    // Eye highlights\n    color([1, 1, 1])\n    for(x = [-8, 8]) {\n        translate([x + 1, 6, 61])\n        sphere(1);\n    }\n}\n\n// Render the model\ntranslate([0, 0, 10])\nrotate([0, 0, 0])\nbonsly();",
    "renders": true
  },
  {
    "pokemon": "mime_jr",
    "openscad_code": "// Mime Jr. - Realistic Style, Medium Complexity\n// 3D printable model with no overhangs\n// Approx 70mm tall\n\nmodule mime_jr_body() {\n    // Main body - pink sphere with slight flattening\n    color([0.95, 0.4, 0.65]) {\n        scale([1, 1, 0.9]) sphere(d=35);\n    }\n}\n\nmodule mime_jr_head() {\n    // Head - slightly smaller pink sphere\n    color([0.95, 0.4, 0.65]) {\n        translate([0, 0, 32])\n            sphere(d=30);\n    }\n}\n\nmodule mime_jr_hat() {\n    // Red hat with white ball\n    color([0.9, 0.1, 0.1]) {\n        translate([0, 0, 47])\n            cylinder(h=8, d1=28, d2=32);\n    }\n    \n    color(\"white\") {\n        translate([0, 0, 55])\n            sphere(d=6);\n    }\n}\n\nmodule mime_jr_ears() {\n    // Pink ears with black tips\n    for(side = [-1, 1]) {\n        color([0.95, 0.4, 0.65]) {\n            translate([side * 12, 0, 42])\n                rotate([0, side * 20, 0])\n                    scale([0.5, 0.5, 1.5])\n                        sphere(d=12);\n        }\n        \n        color(\"black\") {\n            translate([side * 14, 0, 48])\n                rotate([0, side * 20, 0])\n                    scale([0.4, 0.4, 0.8])\n                        sphere(d=8);\n        }\n    }\n}\n\nmodule mime_jr_face() {\n    // Eyes - black with white pupils\n    for(side = [-1, 1]) {\n        color(\"black\") {\n            translate([side * 6, -12, 32])\n                sphere(d=4);\n        }\n        \n        color(\"white\") {\n            translate([side * 6.5, -11, 34])\n                sphere(d=1.5);\n        }\n    }\n    \n    // Red cheeks\n    for(side = [-1, 1]) {\n        color([0.9, 0.2, 0.2]) {\n            translate([side * 9, -10, 28])\n                sphere(d=3);\n        }\n    }\n    \n    // Mouth - small black oval\n    color(\"black\") {\n        translate([0, -14, 28])\n            scale([2, 1, 0.5])\n                sphere(d=3);\n    }\n}\n\nmodule mime_jr_arms() {\n    // Pink arms with white gloves\n    for(side = [-1, 1]) {\n        color([0.95, 0.4, 0.65]) {\n            translate([side * 16, -8, 15])\n                rotate([0, 0, side * -30])\n                    cylinder(h=15, d1=6, d2=4);\n        }\n        \n        color(\"white\") {\n            translate([side * 22, -12, 10])\n                sphere(d=8);\n        }\n    }\n}\n\nmodule mime_jr_legs() {\n    // Pink legs with white shoes\n    for(side = [-1, 1]) {\n        color([0.95, 0.4, 0.65]) {\n            translate([side * 8, 0, -25])\n                cylinder(h=12, d=8);\n        }\n        \n        color(\"white\") {\n            translate([side * 8, 0, -35])\n                scale([1.2, 1.5, 0.8])\n                    sphere(d=10);\n        }\n    }\n}\n\nmodule mime_jr_belt() {\n    // Black belt with gold buckle\n    color(\"black\") {\n        translate([0, 0, 8])\n            difference() {\n                cylinder(h=5, d=32);\n                cylinder(h=6, d=26);\n            }\n    }\n    \n    color([0.8, 0.6, 0.1]) {\n        translate([0, -15, 10])\n            cube([8, 2, 3], center=true);\n    }\n}\n\n// Assemble the complete Mime Jr.\nunion() {\n    mime_jr_body();\n    mime_jr_head();\n    mime_jr_hat();\n    mime_jr_ears();\n    mime_jr_face();\n    mime_jr_arms();\n    mime_jr_legs();\n    mime_jr_belt();\n}",
    "renders": true
  },
  {
    "pokemon": "happiny",
    "openscad_code": "// Happiny Pokemon - Realistic Style, Medium Complexity\n// Dimensions: ~70mm height\n\n// Colors\nskin_color = [1.0, 0.85, 0.75];\npink_color = [1.0, 0.6, 0.7];\nred_color = [0.9, 0.2, 0.2];\nwhite_color = [1, 1, 1];\nblack_color = [0.1, 0.1, 0.1];\n\n// Main body\nmodule happiny_body() {\n    color(skin_color) {\n        // Main egg-shaped body\n        translate([0, 0, 30]) \n            scale([1.2, 1.1, 1.3]) \n                sphere(20, $fn=32);\n        \n        // Bottom bulge\n        translate([0, 0, 15]) \n            scale([1.3, 1.2, 1]) \n                sphere(18, $fn=32);\n    }\n}\n\n// Head with hair\nmodule happiny_head() {\n    color(skin_color) {\n        // Head sphere\n        translate([0, 0, 55]) \n            sphere(15, $fn=32);\n    }\n    \n    // Hair curls\n    color(pink_color) {\n        for(i = [0:2]) {\n            rotate([0, 0, i * 120]) \n                translate([0, 13, 68]) \n                    scale([0.8, 0.8, 1.5]) \n                        sphere(6, $fn=16);\n        }\n    }\n}\n\n// Ears\nmodule happiny_ears() {\n    color(skin_color) {\n        // Left ear\n        translate([-12, 8, 58]) {\n            rotate([-10, -15, 0]) \n                scale([0.6, 2, 0.8]) \n                    cylinder(8, 3, 5, $fn=16);\n        }\n        \n        // Right ear\n        translate([12, 8, 58]) {\n            rotate([-10, 15, 0]) \n                scale([0.6, 2, 0.8]) \n                    cylinder(8, 3, 5, $fn=16);\n        }\n    }\n}\n\n// Eyes\nmodule happiny_eyes() {\n    color(white_color) {\n        // Eye whites\n        translate([-5, 8, 58]) sphere(3, $fn=16);\n        translate([5, 8, 58]) sphere(3, $fn=16);\n    }\n    \n    color(black_color) {\n        // Pupils\n        translate([-5, 9, 58]) sphere(1.5, $fn=16);\n        translate([5, 9, 58]) sphere(1.5, $fn=16);\n    }\n}\n\n// Cheek circles\nmodule happiny_cheeks() {\n    color(pink_color) {\n        translate([-8, 4, 54]) \n            scale([1, 1, 0.5]) \n                sphere(2.5, $fn=16);\n        translate([8, 4, 54]) \n            scale([1, 1, 0.5]) \n                sphere(2.5, $fn=16);\n    }\n}\n\n// Mouth\nmodule happiny_mouth() {\n    color(black_color) {\n        translate([0, 6, 52]) \n            rotate([90, 0, 0]) \n                scale([1, 0.5, 1]) \n                    cylinder(0.5, 2, 2, $fn=8);\n    }\n}\n\n// Arms\nmodule happiny_arms() {\n    color(skin_color) {\n        // Left arm\n        translate([-20, 5, 40]) {\n            rotate([0, 0, 45]) \n                cylinder(12, 3, 2, $fn=16);\n        }\n        \n        // Right arm\n        translate([20, 5, 40]) {\n            rotate([0, 0, -45]) \n                cylinder(12, 3, 2, $fn=16);\n        }\n    }\n}\n\n// Legs\nmodule happiny_legs() {\n    color(skin_color) {\n        // Left leg\n        translate([-8, -5, 15]) {\n            rotate([0, 10, 0]) \n                cylinder(15, 4, 3, $fn=16);\n        }\n        \n        // Right leg\n        translate([8, -5, 15]) {\n            rotate([0, 10, 0]) \n                cylinder(15, 4, 3, $fn=16);\n        }\n    }\n}\n\n// Egg pouch\nmodule egg_pouch() {\n    color(pink_color) {\n        // Pouch base\n        difference() {\n            translate([0, 5, 25]) \n                scale([1.5, 1.2, 0.8]) \n                    sphere(15, $fn=32);\n            \n            // Hollow out center\n            translate([0, 5, 25]) \n                scale([1.3, 1, 0.7]) \n                    sphere(12, $fn=32);\n        }\n    }\n}\n\n// Egg\nmodule happiny_egg() {\n    color(white_color) {\n        translate([0, 5, 25]) \n            scale([0.8, 0.8, 1.2]) \n                sphere(8, $fn=32);\n    }\n}\n\n// Assembly\nunion() {\n    happiny_body();\n    happiny_head();\n    happiny_ears();\n    happiny_eyes();\n    happiny_cheeks();\n    happiny_mouth();\n    happiny_arms();\n    happiny_legs();\n    egg_pouch();\n    happiny_egg();\n}",
    "renders": true
  },
  {
    "pokemon": "chatot",
    "openscad_code": "// Chatot Pokemon - Realistic Style\n// Size: 60mm height, 3D printable\n\n// Colors\ncolor_body = [0.2, 0.2, 0.2]; // Dark gray\ncolor_wing = [0.1, 0.1, 0.1]; // Black\ncolor_face = [0.9, 0.9, 0.9]; // White\ncolor_beak = [0.9, 0.7, 0.1]; // Yellow\ncolor_music = [0.3, 0.6, 0.9]; // Blue notes\ncolor_eye = [0.1, 0.1, 0.1]; // Black\n\n// Main module\nmodule chatot() {\n    // Position the whole model\n    translate([0, 0, 0]) {\n        \n        // Body\n        color(color_body)\n        union() {\n            // Main body sphere\n            sphere(d=35, $fn=32);\n            \n            // Belly bulge\n            translate([0, 0, -5])\n            scale([1.2, 1, 0.8])\n            sphere(d=30, $fn=32);\n        }\n        \n        // Face mask\n        color(color_face)\n        difference() {\n            translate([0, 13, 5])\n            sphere(d=25, $fn=32);\n            \n            // Cut sides for mask shape\n            translate([15, 13, 5])\n            cube([20, 20, 30], center=true);\n            translate([-15, 13, 5])\n            cube([20, 20, 30], center=true);\n        }\n        \n        // Beak\n        color(color_beak)\n        union() {\n            translate([0, 20, 0])\n            rotate([90, 0, 0])\n            cylinder(h=15, d1=8, d2=12, $fn=16);\n            \n            // Lower beak\n            translate([0, 20, -3])\n            rotate([90, 0, 0])\n            cylinder(h=10, d1=12, d2=8, $fn=16);\n        }\n        \n        // Eyes\n        color(color_eye)\n        for(side = [-1, 1]) {\n            translate([side * 7, 15, 8])\n            sphere(d=4, $fn=16);\n            \n            // Eye highlight\n            color([1, 1, 1])\n            translate([side * 7.5, 15.5, 9])\n            sphere(d=1.5, $fn=8);\n        }\n        \n        // Head feathers\n        color(color_wing)\n        union() {\n            // Left crest\n            translate([-5, -15, 15])\n            rotate([45, -20, 0])\n            scale([0.5, 2, 0.3])\n            sphere(d=15, $fn=16);\n            \n            // Right crest\n            translate([5, -15, 15])\n            rotate([45, 20, 0])\n            scale([0.5, 2, 0.3])\n            sphere(d=15, $fn=16);\n            \n            // Middle crest\n            translate([0, -18, 15])\n            rotate([30, 0, 0])\n            scale([0.4, 2.5, 0.4])\n            sphere(d=15, $fn=16);\n        }\n        \n        // Wings\n        module wing() {\n            color(color_wing)\n            union() {\n                // Main wing\n                translate([0, 0, 0])\n                scale([1.5, 1, 0.2])\n                sphere(d=25, $fn=32);\n                \n                // Wing tip\n                translate([0, 12, 0])\n                rotate([0, 0, 30])\n                scale([0.8, 1.2, 0.2])\n                sphere(d=15, $fn=16);\n                \n                // Wing base\n                translate([0, -8, 0])\n                scale([0.6, 0.8, 0.3])\n                sphere(d=15, $fn=16);\n            }\n        }\n        \n        // Left wing\n        translate([-15, 0, 5])\n        rotate([0, 0, 30])\n        wing();\n        \n        // Right wing\n        translate([15, 0, 5])\n        rotate([0, 0, -30])\n        mirror([1, 0, 0])\n        wing();\n        \n        // Feet\n        color(color_beak)\n        for(side = [-1, 1]) {\n            translate([side * 8, 0, -15])\n            union() {\n                // Upper leg\n                cylinder(h=8, d=4, $fn=12);\n                \n                // Lower leg\n                translate([0, 0, -8])\n                rotate([20, 0, 0])\n                cylinder(h=6, d=3, $fn=12);\n                \n                // Foot\n                translate([0, 3, -13])\n                cube([6, 8, 2], center=true);\n            }\n        }\n        \n        // Tail feathers\n        color(color_wing)\n        union() {\n            // Main tail\n            translate([0, -15, -5])\n            rotate([20, 0, 0])\n            scale([0.3, 2, 1])\n            sphere(d=20, $fn=16);\n            \n            // Side tail feathers\n            for(side = [-1, 1]) {\n                translate([side * 5, -18, -3])\n                rotate([25, side * 15, 0])\n                scale([0.2, 1.5, 0.8])\n                sphere(d=15, $fn=16);\n            }\n        }\n        \n        // Music note on belly\n        color(color_music)\n        union() {\n            // Note head\n            translate([0, 0, -12])\n            sphere(d=5, $fn=16);\n            \n            // Note stem\n            translate([2, 5, -12])\n            cylinder(h=8, d=2, $fn=8);\n            \n            // Note flag\n            translate([2, 11, -8])\n            rotate([0, 0, 30])\n            scale([0.5, 1, 0.2])\n            sphere(d=8, $fn=8);\n        }\n    }\n}\n\n// Generate the model\nchatot();",
    "renders": true
  },
  {
    "pokemon": "spiritomb",
    "openscad_code": "// Spiritomb Pokemon - Realistic Style\n// Medium complexity OpenSCAD model\n\n$fn = 32;\n\n// Main colors\ncolor_purple = [0.4, 0.2, 0.6];\ncolor_dark_green = [0.1, 0.3, 0.1];\ncolor_yellow = [0.9, 0.8, 0.2];\ncolor_black = [0.1, 0.1, 0.1];\ncolor_white = [0.9, 0.9, 0.9];\n\n// Main body - purple swirling energy\nmodule spiritomb_body() {\n    color(color_purple) {\n        // Base sphere with flattened bottom for printing\n        difference() {\n            sphere(25);\n            translate([0, 0, -24]) cube([60, 60, 25], center=true);\n        }\n        \n        // Add swirling protrusions\n        for(i = [0:30:359]) {\n            rotate([0, 0, i]) {\n                translate([20, 0, 5]) {\n                    rotate([90, 0, 0]) \n                    scale([1, 1, 0.5]) \n                    cylinder(h = 15, r1 = 5, r2 = 2);\n                }\n            }\n        }\n    }\n}\n\n// Face mask - green stone with cracks\nmodule spiritomb_face() {\n    color(color_dark_green) {\n        // Main mask shape\n        translate([0, 0, 15]) {\n            scale([1.2, 1.2, 0.3]) sphere(20);\n        }\n        \n        // Eye holes\n        for(x = [-10, 10]) {\n            translate([x, 5, 20]) {\n                color(color_black) \n                sphere(5);\n            }\n        }\n        \n        // Mouth crack\n        translate([0, -5, 18]) {\n            rotate([90, 0, 0]) \n            scale([1.5, 1, 1]) \n            cylinder(h = 10, r = 3);\n        }\n        \n        // Additional cracks\n        for(angle = [0:45:135]) {\n            translate([0, 0, 18]) {\n                rotate([0, 0, angle]) {\n                    translate([15, 0, 0]) {\n                        scale([0.3, 0.3, 1]) \n                        cylinder(h = 15, r = 1);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Spirit wisps around the body\nmodule spirit_wisps() {\n    color(color_yellow) {\n        for(i = [0:60:359]) {\n            rotate([0, 0, i]) {\n                translate([30, 0, 5]) {\n                    sphere(3);\n                    translate([5, 0, 0]) sphere(2);\n                    translate([8, 0, 2]) sphere(1.5);\n                }\n            }\n        }\n    }\n}\n\n// Binding stone at the bottom\nmodule binding_stone() {\n    color(color_black) {\n        translate([0, 0, -5]) {\n            difference() {\n                cylinder(h = 10, r = 15);\n                // Carved pattern\n                for(i = [0:72:359]) {\n                    rotate([0, 0, i]) {\n                        translate([10, 0, 2]) {\n                            cube([3, 2, 6], center=true);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Eye details\nmodule eye_details() {\n    color(color_white) {\n        translate([-10, 5, 21]) sphere(1.5);\n        translate([10, 5, 21]) sphere(1.5);\n    }\n}\n\n// Assembly\nunion() {\n    spiritomb_body();\n    spiritomb_face();\n    spirit_wisps();\n    binding_stone();\n    eye_details();\n}",
    "renders": true
  },
  {
    "pokemon": "gible",
    "openscad_code": "// Gible Pokemon - Realistic Style (Medium Complexity)\n// Based on the Dragon/Ground type Pokemon\n\n// Color definitions\n$fn = 50;\n\n// Main module\nmodule gible() {\n    // Global scale for 3D printing (80mm height)\n    scale(0.8)\n    \n    // Main body assembly\n    union() {\n        // Main body\n        color(\"steelblue\")\n        difference() {\n            // Torso - shark-like body\n            translate([0, 0, 10])\n            scale([1.2, 0.8, 1])\n            sphere(r=15);\n            \n            // Belly cutout\n            translate([0, 7, 5])\n            scale([1.3, 0.6, 0.8])\n            sphere(r=15);\n        }\n        \n        // Head\n        color(\"steelblue\")\n        union() {\n            // Main head\n            translate([0, -15, 25])\n            scale([1, 0.9, 0.7])\n            sphere(r=12);\n            \n            // Snout extension\n            translate([0, -25, 22])\n            scale([0.7, 0.6, 0.5])\n            sphere(r=8);\n        }\n        \n        // Dorsal fin\n        color(\"steelblue\")\n        translate([0, -5, 35])\n        rotate([0, 0, 0])\n        linear_extrude(height=2)\n        polygon(points=[[-8,0], [0,12], [8,0]]);\n        \n        // Tail fin\n        color(\"steelblue\")\n        translate([0, 15, 15])\n        rotate([90, 0, 0])\n        linear_extrude(height=2)\n        polygon(points=[[-12,0], [0,18], [12,0]]);\n        \n        // Side fins (arms)\n        for(side = [-1, 1]) {\n            color(\"steelblue\")\n            translate([side * 18, -5, 15])\n            rotate([0, side * 20, 0])\n            scale([1, 0.3, 0.7])\n            sphere(r=8);\n        }\n        \n        // Legs\n        for(side = [-1, 1]) {\n            color(\"steelblue\")\n            translate([side * 10, 5, 0])\n            rotate([0, 0, 0])\n            cylinder(h=15, r1=6, r2=4);\n            \n            // Feet\n            color(\"red\")\n            translate([side * 10, 5, -7])\n            sphere(r=5);\n        }\n        \n        // Eyes\n        for(side = [-1, 1]) {\n            color(\"black\")\n            translate([side * 5, -22, 28])\n            sphere(r=2.5);\n            \n            color(\"white\")\n            translate([side * 5.5, -22.5, 29])\n            sphere(r=1);\n        }\n        \n        // Mouth\n        color(\"red\")\n        difference() {\n            translate([0, -28, 20])\n            scale([1, 0.3, 0.4])\n            sphere(r=6);\n            \n            // Teeth gaps\n            for(i = [-2:2]) {\n                translate([i * 2, -28.5, 20])\n                cube([1, 1, 3], center=true);\n            }\n        }\n        \n        // Red chest marking\n        color(\"red\")\n        translate([0, -8, 18])\n        scale([1.2, 1.5, 0.5])\n        sphere(r=8);\n        \n        // Back ridges\n        for(i = [0:2]) {\n            color(\"steelblue\")\n            translate([0, -5 + i * 8, 30 - i * 3])\n            scale([0.5, 0.5, 1])\n            sphere(r=3);\n        }\n    }\n}\n\n// Render the model\ngible();",
    "renders": true
  },
  {
    "pokemon": "gabite",
    "openscad_code": "// Gabite Pokemon - Realistic Style - Medium Complexity\n// 3D printable model using basic OpenSCAD primitives\n\n$fn = 32;\nbody_color = [0.2, 0.4, 0.7]; // Blue\naccent_color = [0.9, 0.9, 0.95]; // Light blue\nred_color = [0.8, 0.1, 0.1]; // Red\nblack_color = [0.1, 0.1, 0.1]; // Black\nwhite_color = [0.95, 0.95, 0.95]; // White\n\nmodule gabite() {\n    // Main body\n    color(body_color) union() {\n        // Torso\n        translate([0, 0, 10]) scale([1.2, 0.8, 1]) sphere(15);\n        \n        // Head\n        translate([0, -10, 30]) scale([1.1, 1, 0.9]) sphere(12);\n        \n        // Snout\n        translate([0, -22, 28]) scale([0.6, 1.2, 0.5]) sphere(8);\n        \n        // Neck connection\n        translate([0, -10, 20]) cylinder(10, 8, 10, center=false);\n    }\n    \n    // Dorsal fin\n    color(accent_color) difference() {\n        translate([0, -5, 40]) rotate([0, 0, 0]) scale([0.5, 1, 1]) \n            cylinder(15, 12, 3, center=false);\n        translate([0, -5, 45]) rotate([0, 0, 0]) scale([0.3, 0.8, 0.8]) \n            cylinder(10, 8, 2, center=false);\n    }\n    \n    // Side fins\n    color(accent_color) for(side = [-1, 1]) {\n        translate([side * 12, 0, 20]) rotate([0, 0, side * -30]) \n            scale([0.3, 1.2, 0.8]) sphere(6);\n    }\n    \n    // Arms\n    color(body_color) for(side = [-1, 1]) {\n        translate([side * 15, 0, 15]) {\n            // Upper arm\n            rotate([0, 0, side * -45]) cylinder(12, 5, 4, center=false);\n            \n            // Lower arm\n            translate([side * 8.5, -8.5, 0]) rotate([0, 0, side * -90]) \n                cylinder(10, 4, 3, center=false);\n            \n            // Claw\n            color(red_color) \n                translate([side * 15, -15, 0]) scale([0.8, 2, 0.3]) sphere(3);\n        }\n    }\n    \n    // Legs\n    color(body_color) for(side = [-1, 1]) {\n        translate([side * 8, 5, 5]) {\n            // Upper leg\n            cylinder(15, 6, 5, center=false);\n            \n            // Lower leg\n            translate([0, 0, -15]) cylinder(10, 5, 4, center=false);\n            \n            // Foot\n            translate([side * 2, 5, -25]) scale([1.2, 2, 0.8]) sphere(5);\n            \n            // Toe claws\n            color(red_color) for(toe = [-1, 0, 1]) {\n                translate([side * 2 + toe * 2, 8, -25]) scale([0.5, 1.5, 0.3]) sphere(2);\n            }\n        }\n    }\n    \n    // Tail\n    color(body_color) union() {\n        // Base of tail\n        translate([0, 10, 8]) rotate([0, 0, 0]) scale([0.8, 1, 0.8]) sphere(8);\n        \n        // Tail segments\n        for(i = [1:3]) {\n            translate([0, 10 + i * 8, 8 - i * 3]) \n                scale([0.8 - i * 0.15, 1, 0.8 - i * 0.15]) sphere(8 - i * 2);\n        }\n        \n        // Tail fin\n        color(accent_color) \n            translate([0, 35, -2]) rotate([0, 0, 0]) scale([2, 0.2, 1.5]) sphere(8);\n    }\n    \n    // Eyes\n    color(white_color) for(side = [-1, 1]) {\n        translate([side * 5, -18, 30]) sphere(3);\n    }\n    \n    color(black_color) for(side = [-1, 1]) {\n        translate([side * 5, -19, 31]) sphere(1.5);\n    }\n    \n    // Mouth\n    color(red_color) \n        translate([0, -25, 23]) rotate([0, 0, 0]) scale([0.8, 0.3, 0.3]) sphere(4);\n    \n    // Head fin\n    color(accent_color) \n        translate([0, -15, 38]) rotate([0, 0, 0]) scale([0.3, 0.8, 1]) sphere(5);\n    \n    // Chest markings\n    color(red_color) \n        translate([0, 0, 22]) rotate([0, 0, 0]) scale([0.8, 0.5, 0.2]) sphere(8);\n}\n\n// Scale to 70mm height\nscale(0.7) gabite();",
    "renders": true
  },
  {
    "pokemon": "garchomp",
    "openscad_code": "$fn=64;\n\n// Overall size control\nmodule garchomp(scale_factor=1){\n    // Main body color - Garchomp's primary orange-red\n    color([0.85, 0.3, 0.1])\n    union(){\n        // Central body\n        translate([0,0,15])\n        scale([1.2,0.8,1])\n        sphere(15);\n        \n        // Torso extension\n        translate([0,0,5])\n        scale([1.5,1,1.8])\n        cube([20,15,20], center=true);\n        \n        // Head\n        translate([0,0,35])\n        scale([0.9,0.7,1.2])\n        sphere(12);\n        \n        // Snout\n        translate([0,-8,35])\n        rotate([10,0,0])\n        scale([0.6,1.2,0.5])\n        sphere(8);\n        \n        // Chest plate\n        color([0.4,0.3,0.2])\n        translate([0,0,20])\n        scale([1.3,0.6,0.3])\n        cube([18,12,8], center=true);\n    }\n    \n    // Eyes\n    color([0.9,0.9,0.9])\n    union(){\n        translate([-6,-10,40])\n        rotate([0,10,0])\n        scale([1,0.5,0.3])\n        sphere(3);\n        translate([6,-10,40])\n        rotate([0,-10,0])\n        scale([1,0.5,0.3])\n        sphere(3);\n    }\n    \n    // Eye pupils\n    color([0,0,0])\n    union(){\n        translate([-6,-11,40.5])\n        sphere(1);\n        translate([6,-11,40.5])\n        sphere(1);\n    }\n    \n    // Fins on head\n    color([0.85, 0.3, 0.1])\n    union(){\n        translate([-10,0,42])\n        rotate([0,0,-20])\n        scale([0.3,1.2,0.1])\n        cylinder(h=12, r1=3, r2=0);\n        translate([10,0,42])\n        rotate([0,0,20])\n        scale([0.3,1.2,0.1])\n        cylinder(h=12, r1=3, r2=0);\n    }\n    \n    // Arms\n    module arm(side){\n        translate([side*12,0,25])\n        rotate([0,0,side*-20])\n        union(){\n            // Upper arm\n            color([0.85, 0.3, 0.1])\n            scale([0.4,0.4,1])\n            cylinder(h=15, r=5);\n            \n            // Lower arm\n            translate([side*3,-2,-10])\n            rotate([30,0,0])\n            scale([0.3,0.3,1.2])\n            cylinder(h=12, r=5);\n            \n            // Fin blade\n            color([0.4,0.3,0.2])\n            translate([side*4,-3,-20])\n            rotate([45,0,side*30])\n            scale([0.1,1.5,0.05])\n            cylinder(h=15, r1=3, r2=0);\n        }\n    }\n    \n    arm(1);\n    arm(-1);\n    \n    // Legs\n    module leg(side){\n        translate([side*8,0,5])\n        union(){\n            // Upper leg\n            color([0.85, 0.3, 0.1])\n            scale([0.5,0.5,1.2])\n            cylinder(h=12, r=6);\n            \n            // Lower leg\n            translate([0,0,-12])\n            scale([0.4,0.4,1])\n            cylinder(h=10, r=5);\n            \n            // Foot\n            color([0.4,0.3,0.2])\n            translate([side*3,0,-22])\n            scale([1.5,0.8,0.5])\n            cube([8,6,4], center=true);\n        }\n    }\n    \n    leg(1);\n    leg(-1);\n    \n    // Tail\n    color([0.85, 0.3, 0.1])\n    union(){\n        translate([0,0,-10])\n        rotate([30,0,0])\n        scale([0.6,0.6,1])\n        cylinder(h=20, r1=8, r2=4);\n        \n        // Tail fin\n        color([0.4,0.3,0.2])\n        translate([0,0,-28])\n        rotate([60,0,0])\n        scale([1.2,0.1,0.8])\n        cube([20,2,15], center=true);\n    }\n    \n    // Wings\n    module wing(side){\n        color([0.4,0.3,0.2])\n        translate([side*15,0,20])\n        rotate([0,0,side*30])\n        union(){\n            // Main wing\n            scale([0.1,1.5,1])\n            cube([2,25,15], center=true);\n            \n            // Wing detail\n            translate([0,8,0])\n            scale([0.05,1,0.7])\n            cube([1,15,10], center=true);\n        }\n    }\n    \n    wing(1);\n    wing(-1);\n    \n    // Back fins\n    color([0.4,0.3,0.2])\n    for(i=[1:4]){\n        translate([0,0,30-i*5])\n        rotate([20-i*5,0,0])\n        scale([0.8,0.1,0.8])\n        cube([15,1,10], center=true);\n    }\n    \n    // Yellow belly marking\n    color([0.9,0.8,0.2])\n    translate([0,5,12])\n    scale([1.2,0.3,1.5])\n    cube([18,2,22], center=true);\n}\n\n// Create the garchomp at 80mm height\ngarchomp(0.8);",
    "renders": true
  },
  {
    "pokemon": "munchlax",
    "openscad_code": "// Munchlax - Realistic Style, Medium Complexity\n// Approximately 70mm tall\n\n$fn=32;\nmodule munchlax() {\n    // Main body - rounded belly\n    color(\"#5A8FBF\") union() {\n        // Central body sphere\n        translate([0, 0, 30]) sphere(d=60);\n        \n        // Belly bulge\n        translate([0, 0, 15]) scale([1.1, 1.2, 0.8]) sphere(d=50);\n        \n        // Back hump\n        translate([0, -25, 40]) rotate([20, 0, 0]) sphere(d=35);\n    }\n    \n    // Cream fur areas\n    color(\"#FFF8DC\") union() {\n        // Face circle\n        translate([0, 28, 35]) sphere(d=45);\n        \n        // Chest fur\n        difference() {\n            translate([0, 5, 15]) sphere(d=30);\n            translate([0, 5, 5]) cube([40, 40, 30], center=true);\n        }\n        \n        // Feet\n        for(x=[-20, 20]) {\n            translate([x, -5, 0]) {\n                rotate([0, 0, 30]) scale([1.2, 0.6, 0.4]) sphere(d=20);\n                translate([0, 0, 2]) cylinder(h=5, d=15);\n            }\n        }\n        \n        // Hands\n        for(x=[-30, 30]) {\n            translate([x, 20, 20]) {\n                scale([0.8, 1.2, 0.8]) sphere(d=15);\n                translate([0, 5, -3]) cylinder(h=8, d=12);\n            }\n        }\n    }\n    \n    // Ears\n    color(\"#5A8FBF\") for(x=[-25, 25]) {\n        translate([x, -15, 55]) rotate([0, 0, x/2]) {\n            rotate([-20, 0, 0]) scale([0.7, 0.5, 2]) sphere(d=20);\n            color(\"#FFF8DC\") translate([0, 0, -5]) scale([0.5, 0.3, 1.2]) sphere(d=15);\n        }\n    }\n    \n    // Eyes\n    color(\"#000000\") for(x=[-12, 12]) {\n        translate([x, 30, 42]) {\n            scale([0.8, 1, 0.3]) sphere(d=8);\n            color(\"#FFFFFF\") translate([0, 0, 1]) scale([0.3, 0.3, 0.1]) sphere(d=6);\n        }\n    }\n    \n    // Nose\n    color(\"#000000\") translate([0, 35, 38]) {\n        sphere(d=4);\n        translate([0, 2, -1]) sphere(d=2);\n    }\n    \n    // Mouth\n    color(\"#8B4513\") difference() {\n        translate([0, 30, 32]) cube([15, 2, 5], center=true);\n        translate([0, 30, 34]) sphere(d=6);\n    }\n    \n    // Eyebrows\n    color(\"#5A8FBF\") for(x=[-15, 15]) {\n        translate([x, 25, 48]) rotate([0, 30, 0]) {\n            scale([0.3, 1.5, 0.3]) sphere(d=10);\n        }\n    }\n    \n    // Back stripes\n    color(\"#4169E1\") for(z=[35, 45]) {\n        translate([0, -20, z]) rotate([90, 0, 0]) {\n            scale([1.5, 0.5, 0.5]) rotate([0, 0, 45]) cylinder(h=5, d=20, center=true);\n        }\n    }\n    \n    // Tail stub\n    color(\"#5A8FBF\") translate([0, -30, 25]) {\n        rotate([-30, 0, 0]) scale([0.8, 0.8, 1.2]) sphere(d=15);\n        color(\"#FFF8DC\") translate([0, 0, -5]) sphere(d=10);\n    }\n}\n\nmunchlax();",
    "renders": true
  },
  {
    "pokemon": "riolu",
    "openscad_code": "// Riolu Pokemon - Realistic Style (Medium Complexity)\n// Designed for 3D printing with proper wall thickness and minimal overhangs\n\n$fn = 32;\n\n// Main body color (blue-gray)\nmodule body_color() color([0.4, 0.5, 0.7]);\n\n// Black color for markings\nmodule black_color() color([0.1, 0.1, 0.1]);\n\n// Gold/yellow color\nmodule yellow_color() color([0.9, 0.8, 0.2]);\n\n// White color for eyes\nmodule white_color() color([0.95, 0.95, 0.95]);\n\n// Main body\nmodule body() {\n    body_color() {\n        // Torso\n        translate([0, 0, 10]) \n            scale([1.2, 1, 1.5]) \n                sphere(15);\n        \n        // Chest bump\n        translate([0, -13, 12]) \n            sphere(8);\n        \n        // Lower body\n        translate([0, 0, -5]) \n            scale([1.1, 0.9, 1.2]) \n                sphere(12);\n    }\n}\n\n// Head\nmodule head() {\n    body_color() {\n        // Main head shape\n        translate([0, 20, 25]) \n            rotate([0, 0, 0]) \n                scale([1.1, 1.1, 1.2]) \n                    sphere(14);\n        \n        // Muzzle\n        translate([0, 30, 22]) \n            scale([0.8, 0.8, 0.7]) \n                sphere(10);\n    }\n}\n\n// Ears\nmodule ear(side) {\n    body_color() {\n        translate([side * 12, 18, 35]) {\n            rotate([0, 15 * side, 30 * side]) {\n                // Ear base\n                cylinder(h=12, r1=6, r2=4);\n                \n                // Ear tip\n                translate([0, 0, 12]) \n                    sphere(4);\n            }\n        }\n    }\n    \n    // Black ear tips\n    black_color() {\n        translate([side * 14, 18, 42]) {\n            rotate([0, 15 * side, 30 * side]) {\n                scale([0.8, 0.8, 0.8]) \n                    sphere(4);\n            }\n        }\n    }\n}\n\n// Eyes\nmodule eye(side) {\n    white_color() {\n        translate([side * 7, 28, 26]) {\n            scale([0.8, 0.5, 0.8]) \n                sphere(4);\n        }\n    }\n    \n    black_color() {\n        // Pupil\n        translate([side * 7, 30, 26]) {\n            scale([0.4, 0.3, 0.4]) \n                sphere(3);\n        }\n    }\n}\n\n// Arms\nmodule arm(side) {\n    body_color() {\n        translate([side * 18, 5, 20]) {\n            rotate([0, 0, -20 * side]) {\n                // Upper arm\n                cylinder(h=15, r1=6, r2=5);\n                \n                // Lower arm\n                translate([0, -15, 0]) {\n                    rotate([30, 0, 0]) {\n                        cylinder(h=12, r1=5, r2=4);\n                        \n                        // Hand\n                        translate([0, -12, 0]) {\n                            sphere(5);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Black paw markings\n    black_color() {\n        translate([side * 20, -15, 10]) {\n            sphere(3);\n        }\n    }\n}\n\n// Legs\nmodule leg(side) {\n    body_color() {\n        translate([side * 10, -5, 0]) {\n            // Thigh\n            cylinder(h=15, r1=7, r2=6);\n            \n            // Lower leg\n            translate([0, 0, -15]) {\n                rotate([20, 0, 0]) {\n                    cylinder(h=12, r1=6, r2=5);\n                    \n                    // Foot\n                    translate([0, 0, -12]) {\n                        scale([1.2, 1.5, 0.8]) \n                            sphere(6);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Black paw markings\n    black_color() {\n        translate([side * 12, -5, -22]) {\n            sphere(4);\n        }\n    }\n}\n\n// Tail\nmodule tail() {\n    body_color() {\n        translate([0, -20, 5]) {\n            rotate([30, 0, 0]) {\n                // Tail base\n                cylinder(h=10, r1=5, r2=4);\n                \n                // Tail middle\n                translate([0, 0, -10]) {\n                    rotate([20, 0, 0]) {\n                        cylinder(h=8, r1=4, r2=3);\n                        \n                        // Tail tip\n                        translate([0, 0, -8]) {\n                            sphere(3);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Chest pattern\nmodule chest_pattern() {\n    yellow_color() {\n        translate([0, 8, 22]) {\n            scale([0.3, 0.5, 0.1]) \n                sphere(20);\n        }\n    }\n}\n\n// Assembly\nmodule riolu() {\n    // Main body parts\n    body();\n    head();\n    \n    // Ears\n    ear(1);\n    ear(-1);\n    \n    // Eyes\n    eye(1);\n    eye(-1);\n    \n    // Arms\n    arm(1);\n    arm(-1);\n    \n    // Legs\n    leg(1);\n    leg(-1);\n    \n    // Tail\n    tail();\n    \n    // Chest pattern\n    chest_pattern();\n}\n\n// Create the model\nscale([0.8, 0.8, 0.8]) \n    riolu();",
    "renders": true
  },
  {
    "pokemon": "lucario",
    "openscad_code": "// Lucario - Realistic style, medium complexity\n// Scale: ~80mm tall\n\nmodule lucario() {\n    color(\"royalblue\") {\n        // Main body\n        union() {\n            // Torso\n            translate([0, 0, 20])\n                scale([1.2, 0.8, 1.5])\n                sphere(d=30, $fn=32);\n            \n            // Chest spike\n            translate([0, 15, 35])\n                rotate([90, 0, 0])\n                cylinder(h=15, d1=8, d2=0, $fn=8);\n            \n            // Pelvis\n            translate([0, 0, 8])\n                scale([1, 0.6, 0.6])\n                sphere(d=25, $fn=32);\n            \n            // Legs\n            for(x=[-6, 6]) {\n                translate([x, 0, 0])\n                    leg();\n            }\n            \n            // Arms\n            for(x=[-20, 20]) {\n                translate([x, 0, 30])\n                    rotate([0, 0, x > 0 ? -20 : 20])\n                    arm();\n            }\n            \n            // Head\n            translate([0, 0, 45])\n                head();\n            \n            // Tail\n            translate([0, -25, 15])\n                rotate([0, 0, 0])\n                tail();\n        }\n    }\n}\n\nmodule leg() {\n    // Upper leg\n    translate([0, 0, 0])\n        scale([0.3, 0.3, 1])\n        cylinder(h=20, d=18, $fn=16);\n    \n    // Lower leg\n    translate([0, 0, -12])\n        scale([0.25, 0.25, 1])\n        cylinder(h=18, d=14, $fn=16);\n    \n    // Foot\n    translate([0, 0, -22])\n        scale([0.6, 1.2, 0.3])\n        cube([12, 8, 6], center=true);\n}\n\nmodule arm() {\n    // Upper arm\n    translate([0, 0, 0])\n        scale([0.25, 0.25, 1])\n        cylinder(h=15, d=12, $fn=16);\n    \n    // Forearm\n    translate([0, 0, -10])\n        rotate([0, 0, 0])\n        scale([0.2, 0.2, 1])\n        cylinder(h=12, d=10, $fn=16);\n    \n    // Hand\n    translate([0, 0, -18])\n        scale([0.4, 0.6, 0.3])\n        sphere(d=10, $fn=16);\n    \n    // Spike\n    translate([0, 0, -18])\n        rotate([90, 0, 0])\n        cylinder(h=10, d1=6, d2=0, $fn=8);\n}\n\nmodule head() {\n    // Main head\n    scale([0.8, 0.7, 1])\n    sphere(d=25, $fn=32);\n    \n    // Snout\n    translate([0, 12, -2])\n        scale([0.4, 0.8, 0.5])\n        sphere(d=15, $fn=32);\n    \n    // Ears\n    for(x=[-10, 10]) {\n        translate([x, 0, 12])\n            rotate([0, x > 0 ? 25 : -25, 0])\n            scale([0.15, 0.1, 1.2])\n            cylinder(h=15, d=8, $fn=8);\n    }\n    \n    // Eyes\n    color(\"red\") {\n        for(x=[-5, 5]) {\n            translate([x, 10, 2])\n                rotate([90, 0, 0])\n                cylinder(h=3, d=4, $fn=16);\n        }\n    }\n    \n    // Nose\n    color(\"black\") {\n        translate([0, 15, 0])\n            sphere(d=3, $fn=16);\n    }\n    \n    // Face markings\n    color(\"yellow\") {\n        for(x=[-8, 8]) {\n            translate([x, 8, 0])\n                scale([0.3, 0.8, 0.1])\n                cube([3, 6, 1], center=true);\n        }\n    }\n}\n\nmodule tail() {\n    // Tail base\n    translate([0, 0, 0])\n        scale([0.3, 0.3, 1])\n        cylinder(h=25, d=12, $fn=16);\n    \n    // Tail segments\n    for(i=[1:3]) {\n        translate([0, -i*5, 15-i*3])\n            scale([0.3, 0.3, 0.8])\n            rotate([0, 0, i*10])\n            cylinder(h=10, d=10-i*2, $fn=16);\n    }\n}\n\n// Render the model\nlucario();",
    "renders": true
  },
  {
    "pokemon": "hippopotas",
    "openscad_code": "// Hippopotas - Realistic Medium Complexity\n// 3D printable Pokemon model with proper overhangs\n\n// Color definitions\nsand_color = [0.85, 0.65, 0.45];\nblack_color = [0.1, 0.1, 0.1];\nwhite_color = [0.95, 0.95, 0.95];\ndark_brown = [0.4, 0.3, 0.2];\n\n// Main body module\nmodule hippopotas() {\n    // Body\n    color(sand_color) {\n        difference() {\n            union() {\n                // Main torso\n                translate([0, 0, 15]) {\n                    scale([1.2, 0.8, 1]) sphere(20);\n                }\n                \n                // Snout\n                translate([-25, 0, 15]) {\n                    rotate([0, -20, 0]) {\n                        scale([1.5, 1, 1]) cylinder(15, 12, 8);\n                    }\n                }\n                \n                // Back hump\n                translate([15, 0, 25]) {\n                    sphere(12);\n                }\n            }\n        }\n    }\n    \n    // Legs\n    for(i = [-1, 1]) {\n        color(sand_color) {\n            translate([10, 15*i, 0]) {\n                cylinder(15, 6, 4);\n            }\n            translate([-10, 15*i, 0]) {\n                cylinder(15, 6, 4);\n            }\n        }\n    }\n    \n    // Head details\n    color(sand_color) {\n        // Ears\n        for(i = [-1, 1]) {\n            translate([-5, 18*i, 35]) {\n                rotate([0, -30*i, 0]) {\n                    scale([0.6, 0.5, 1]) sphere(8);\n                }\n            }\n        }\n    }\n    \n    // Facial features\n    color(black_color) {\n        // Eyes\n        for(i = [-1, 1]) {\n            translate([-18, 8*i, 22]) {\n                sphere(3);\n            }\n        }\n        \n        // Nostrils\n        for(i = [-1, 1]) {\n            translate([-32, 4*i, 16]) {\n                cylinder(3, 2, 2);\n            }\n        }\n    }\n    \n    // Body patterns\n    color(dark_brown) {\n        // Stripes on back\n        for(pos = [5, 10, 15]) {\n            translate([pos, 0, 30]) {\n                scale([0.5, 1.5, 0.3]) sphere(8);\n            }\n        }\n        \n        // Markings on face\n        translate([-20, 0, 12]) {\n            scale([0.3, 1.2, 0.2]) sphere(10);\n        }\n    }\n    \n    // Teeth\n    color(white_color) {\n        for(i = [-1, 1]) {\n            translate([-28, 5*i, 12]) {\n                rotate([0, 90, 0]) {\n                    cylinder(4, 1.5, 2.5);\n                }\n            }\n        }\n    }\n    \n    // Tail\n    color(sand_color) {\n        translate([28, 0, 10]) {\n            rotate([0, 0, -20]) {\n                scale([0.8, 0.8, 0.6]) sphere(10);\n            }\n        }\n    }\n}\n\n// Create the model\nhippopotas();",
    "renders": true
  },
  {
    "pokemon": "hippowdon",
    "openscad_code": "// Hippowdon - Realistic Style, Medium Complexity\n// Overall size: ~80mm in length\n\nmodule hippo_body() {\n    color([0.65, 0.5, 0.35])  // Sandy brown\n    union() {\n        // Main body\n        translate([0, 0, 20])\n        scale([1.2, 0.8, 0.9])\n        sphere(25, $fn=32);\n\n        // Lower jaw\n        translate([0, 0, 5])\n        scale([1.1, 0.7, 0.5])\n        sphere(20, $fn=32);\n\n        // Back hump\n        translate([-15, 0, 35])\n        scale([0.8, 0.6, 0.7])\n        sphere(18, $fn=32);\n    }\n}\n\nmodule hippo_head() {\n    color([0.65, 0.5, 0.35])\n    union() {\n        // Head\n        translate([30, 0, 25])\n        scale([1.3, 1.1, 1.2])\n        sphere(20, $fn=32);\n\n        // Snout\n        translate([45, 0, 20])\n        scale([1.2, 0.8, 0.7])\n        sphere(15, $fn=32);\n\n        // Nostrils\n        translate([48, 5, 22])\n        rotate([90, 0, 0])\n        cylinder(h=3, r=2, $fn=16);\n        translate([48, -5, 22])\n        rotate([90, 0, 0])\n        cylinder(h=3, r=2, $fn=16);\n    }\n}\n\nmodule hippo_legs() {\n    color([0.65, 0.5, 0.35])\n    for(x = [-20, 20]) {\n        for(y = [-15, 15]) {\n            translate([x, y, 0])\n            scale([0.5, 0.5, 1])\n            cylinder(h=25, r=8, $fn=16);\n        }\n    }\n}\n\nmodule hippo_ears() {\n    color([0.65, 0.5, 0.35])\n    for(x = [-1, 1]) {\n        translate([x * 25, 0, 45])\n        rotate([0, 30, 0])\n        scale([0.3, 0.8, 1.5])\n        cylinder(h=15, r=5, $fn=8);\n    }\n}\n\nmodule hippo_tail() {\n    color([0.65, 0.5, 0.35])\n    translate([-35, 0, 15])\n    rotate([0, 0, 45])\n    scale([0.3, 0.3, 2])\n    cylinder(h=25, r=5, $fn=16);\n}\n\nmodule hippo_markings() {\n    color([0.35, 0.25, 0.15])  // Darker brown\n    union() {\n        // Back stripes\n        for(i = [0:2]) {\n            translate([-15 + i * 10, 0, 35 + i * 3])\n            scale([0.8, 0.3, 0.1])\n            sphere(15, $fn=32);\n        }\n\n        // Face markings\n        translate([35, 0, 30])\n        scale([0.3, 0.8, 0.2])\n        sphere(10, $fn=32);\n        translate([35, 8, 25])\n        scale([0.2, 0.3, 0.2])\n        sphere(5, $fn=16);\n        translate([35, -8, 25])\n        scale([0.2, 0.3, 0.2])\n        sphere(5, $fn=16);\n    }\n}\n\nmodule hippo_eyes() {\n    color([0.9, 0.9, 0.9])  // White\n    union() {\n        translate([38, 8, 28])\n        scale([1, 1, 0.5])\n        sphere(3, $fn=16);\n        translate([38, -8, 28])\n        scale([1, 1, 0.5])\n        sphere(3, $fn=16);\n    }\n\n    color([0.1, 0.1, 0.1])  // Black pupils\n    union() {\n        translate([39, 8, 28])\n        sphere(1.5, $fn=8);\n        translate([39, -8, 28])\n        sphere(1.5, $fn=8);\n    }\n}\n\nmodule hippowdon() {\n    union() {\n        hippo_body();\n        hippo_head();\n        hippo_legs();\n        hippo_ears();\n        hippo_tail();\n        hippo_markings();\n        hippo_eyes();\n    }\n}\n\n// Main model\nhippowdon();",
    "renders": true
  },
  {
    "pokemon": "skorupi",
    "openscad_code": "// Skorupi Pokemon - Realistic style, medium complexity\n// Size: ~70mm length\n\n$fn = 32;\n\n// Main colors\ncolor_purple = [0.4, 0.2, 0.6];\ncolor_dark_purple = [0.2, 0.1, 0.3];\ncolor_gray = [0.4, 0.4, 0.4];\ncolor_black = [0.1, 0.1, 0.1];\ncolor_white = [0.9, 0.9, 0.9];\n\nmodule skorupi() {\n    union() {\n        // Body segments\n        translate([0, 0, 5]) color(color_purple) body_segment(20, 15, 8);\n        translate([0, 0, 10]) color(color_purple) body_segment(18, 14, 7);\n        translate([0, 0, 15]) color(color_purple) body_segment(16, 13, 6);\n        translate([0, 0, 20]) color(color_purple) body_segment(14, 12, 5);\n        \n        // Head\n        translate([0, 0, 0]) color(color_purple) head();\n        \n        // Claws\n        translate([12, 8, 2]) rotate([0, 0, 30]) color(color_gray) claw();\n        translate([-12, 8, 2]) rotate([0, 0, -30]) mirror([1, 0, 0]) color(color_gray) claw();\n        \n        // Legs\n        for(i = [1:3]) {\n            translate([8, 0, i*6]) rotate([0, 0, 45]) color(color_gray) leg();\n            translate([-8, 0, i*6]) rotate([0, 0, -45]) mirror([1, 0, 0]) color(color_gray) leg();\n        }\n        \n        // Tail segments\n        translate([0, 0, 25]) color(color_purple) tail_segment([0, 0, 25], [0, 0, 30], 12, 4);\n        translate([0, 0, 30]) color(color_purple) tail_segment([0, 0, 30], [0, 0, 35], 8, 3);\n        translate([0, 0, 35]) color(color_purple) tail_segment([0, 0, 35], [0, 0, 40], 5, 2);\n        \n        // Stinger\n        translate([0, 0, 40]) rotate([0, 0, 180]) color(color_gray) cylinder(h=10, r1=3, r2=0);\n    }\n}\n\nmodule body_segment(w, l, h) {\n    difference() {\n        hull() {\n            cube([w, l, h], center=true);\n            translate([0, 0, h/2]) sphere(d=w*0.8);\n        }\n        \n        // Texture pattern\n        for(i = [-1:1]) {\n            for(j = [-1:1]) {\n                translate([i*4, j*3, h/2]) rotate([90, 0, 0]) \n                    cylinder(h=0.5, r=1.5);\n            }\n        }\n    }\n}\n\nmodule head() {\n    union() {\n        // Main head\n        difference() {\n            hull() {\n                sphere(d=22);\n                translate([0, 0, -5]) sphere(d=20);\n            }\n            \n            // Eye sockets\n            translate([7, 8, 2]) sphere(d=5);\n            translate([-7, 8, 2]) sphere(d=5);\n        }\n        \n        // Eyes\n        translate([7, 8, 2]) color(color_white) sphere(d=3);\n        translate([-7, 8, 2]) color(color_white) sphere(d=3);\n        translate([7, 8, 3]) color(color_black) sphere(d=1.5);\n        translate([-7, 8, 3]) color(color_black) sphere(d=1.5);\n        \n        // Jaw\n        translate([0, 10, -8]) color(color_dark_purple) \n            cube([12, 8, 6], center=true);\n        \n        // Pincers\n        translate([10, 0, 0]) rotate([0, 0, 45]) color(color_gray) pincer();\n        translate([-10, 0, 0]) rotate([0, 0, -45]) mirror([1, 0, 0]) color(color_gray) pincer();\n    }\n}\n\nmodule claw() {\n    union() {\n        translate([0, 0, 5]) cylinder(h=10, r=2);\n        translate([0, 0, 10]) rotate([0, 0, 30]) cylinder(h=8, r=1.5);\n        translate([0, 0, 18]) rotate([0, 0, 60]) cylinder(h=6, r=1);\n    }\n}\n\nmodule leg() {\n    union() {\n        cylinder(h=8, r=1.5);\n        translate([0, 0, 8]) rotate([0, 0, 30]) cylinder(h=6, r=1);\n        translate([0, 0, 14]) rotate([0, 0, 60]) cylinder(h=4, r=0.8);\n    }\n}\n\nmodule tail_segment(pos1, pos2, r1, r2) {\n    hull() {\n        translate(pos1) sphere(r=r1);\n        translate(pos2) sphere(r=r2);\n    }\n}\n\nmodule pincer() {\n    difference() {\n        hull() {\n            cube([8, 3, 2]);\n            translate([8, 0, 0]) cube([3, 2, 1]);\n        }\n        \n        // Teeth\n        for(i = [0:2]) {\n            translate([4 + i*2, 1.5, 0]) rotate([0, 90, 0]) \n                cylinder(h=1, r=0.5);\n        }\n    }\n}\n\n// Scale to 70mm\nscale(0.7) skorupi();",
    "renders": true
  },
  {
    "pokemon": "drapion",
    "openscad_code": "// Realistic Drapion (Medium Complexity) - OpenSCAD\n// Size: ~80mm long, optimized for 3D printing\n\n$fn = 32; // Smooth curves\n\n// Colors\ncolor_body = \"#4A3B73\";\ncolor_accents = \"#8B5A2B\";\ncolor_teeth = \"#FFFFFF\";\ncolor_eyes = \"#FF0000\";\n\n// Main body module\nmodule drapion_body() {\n    // Thorax/head section\n    translate([0, 0, 20]) {\n        color(color_body) {\n            // Main carapace\n            difference() {\n                scale([1.5, 1.2, 1]) sphere(15);\n                translate([0, -10, 5]) scale([0.8, 0.8, 0.6]) sphere(15);\n            }\n            \n            // Front horn\n            translate([0, 15, 5]) rotate([0, -20, 0]) \n                cylinder(h=20, r1=4, r2=2);\n                \n            // Side horns\n            for(angle = [-30, 30]) {\n                rotate([0, 0, angle]) translate([12, 10, 8]) \n                    rotate([0, -30, 0]) cylinder(h=15, r1=3, r2=1);\n            }\n        }\n    }\n    \n    // Abdomen segments\n    for(i = [1:3]) {\n        translate([0, -25*i, 15 - i*3]) {\n            color(color_body) scale([1.4 - i*0.2, 1, 0.8]) \n                sphere(12 - i*2);\n        }\n    }\n}\n\n// Leg module\nmodule drapion_leg(length, angle, z_offset) {\n    color(color_body) {\n        // Coxa\n        rotate([0, 0, angle]) translate([18, 5, z_offset]) \n            rotate([0, 45, 0]) cylinder(h=8, r=3);\n            \n        // Femur\n        translate([18 + cos(angle)*8, 5 + sin(angle)*8, z_offset + 5])\n            rotate([0, 45 + angle, 0]) cylinder(h=length/2, r=2.5);\n            \n        // Tibia\n        translate([18 + cos(angle)*(8 + length/2*cos(45)), \n                  5 + sin(angle)*(8 + length/2*cos(45)), \n                  z_offset + 5 + length/2*sin(45)])\n            rotate([0, 90, 0]) cylinder(h=length/2, r=2);\n            \n        // Tarsus/claw\n        translate([18 + cos(angle)*(8 + length*cos(45)), \n                  5 + sin(angle)*(8 + length*cos(45)), \n                  z_offset + 5 + length*sin(45)])\n            rotate([0, 120, 0]) cylinder(h=5, r1=2, r2=0);\n    }\n}\n\n// Claw module\nmodule drapion_claw(side) {\n    translate([side*15, 25, 15]) {\n        color(color_accents) {\n            // Base\n            scale([1.5, 1, 1]) sphere(8);\n            \n            // Upper claw\n            rotate([0, -30, side*20]) \n                translate([0, 0, 5]) cylinder(h=20, r1=6, r2=3);\n                \n            // Lower claw\n            rotate([0, 30, side*-20]) \n                translate([0, 0, -5]) cylinder(h=18, r1=5, r2=2);\n        }\n    }\n}\n\n// Eye module\nmodule drapion_eye() {\n    color(color_eyes) {\n        translate([5, 15, 20]) sphere(3);\n        translate([-5, 15, 20]) sphere(3);\n    }\n}\n\n// Teeth module\nmodule drapion_teeth() {\n    color(color_teeth) {\n        for(i = [-2:2]) {\n            translate([i*3, 18, 15]) rotate([0, -90, 0]) \n                cylinder(h=3, r1=1.5, r2=0);\n        }\n    }\n}\n\n// Tail stinger\nmodule drapion_tail() {\n    color(color_body) {\n        translate([0, -80, 12]) {\n            // Tail segments\n            for(i = [0:3]) {\n                translate([0, -i*8, -i*2]) \n                    scale([1 - i*0.2, 1 - i*0.2, 1 - i*0.1]) \n                    sphere(8 - i);\n            }\n            \n            // Stinger\n            translate([0, -32, -8]) rotate([0, 30, 0])\n                cylinder(h=12, r1=3, r2=0);\n        }\n    }\n}\n\n// Assemble the Drapion\nunion() {\n    drapion_body();\n    \n    // Legs - 4 pairs\n    for(i = [0:3]) {\n        drapion_leg(20 + i*3, 45 + i*15, 20 - i*5);\n        drapion_leg(20 + i*3, -45 - i*15, 20 - i*5);\n    }\n    \n    // Claws\n    drapion_claw(1);\n    drapion_claw(-1);\n    \n    // Eyes\n    drapion_eye();\n    \n    // Teeth\n    drapion_teeth();\n    \n    // Tail\n    drapion_tail();\n}\n\n// Ground plane for reference\n%translate([0, 0, -1]) cube([100, 100, 0.5], center=true);",
    "renders": true
  },
  {
    "pokemon": "croagunk",
    "openscad_code": "// Croagunk OpenSCAD Model - Realistic Style, Medium Complexity\n// Size: 70mm tall\n\nmodule croagunk_body() {\n    color([0.2, 0.2, 0.2]) {\n        // Main body - egg shape\n        scale([1, 0.8, 1.2]) sphere(d=35);\n        \n        // Chest sac\n        translate([0, -5, -15]) \n            scale([0.8, 0.6, 0.6]) sphere(d=25);\n        \n        // Arms\n        for(side = [-1, 1]) {\n            translate([side * 18, 0, 5]) {\n                rotate([0, 0, side * 30]) {\n                    // Upper arm\n                    rotate([0, 90, 0]) \n                        cylinder(h=15, d1=8, d2=6);\n                    \n                    // Lower arm\n                    translate([0, 15, 0]) {\n                        rotate([0, 0, -side * 45]) {\n                            cylinder(h=12, d1=6, d2=4);\n                        }\n                    }\n                    \n                    // Three fingers\n                    for(finger = [0, 1, 2]) {\n                        translate([0, 27, -3 + finger * 3]) {\n                            rotate([0, 90, 0]) \n                                cylinder(h=4, d=2);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Legs\n        for(side = [-1, 1]) {\n            translate([side * 10, 0, -25]) {\n                // Thigh\n                cylinder(h=12, d1=10, d2=8);\n                \n                // Lower leg\n                translate([0, 0, -12]) {\n                    cylinder(h=15, d1=8, d2=12);\n                    \n                    // Foot\n                    translate([0, 0, -15]) {\n                        scale([1.2, 1.5, 0.6]) sphere(d=12);\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule croagunk_head() {\n    color([0.2, 0.2, 0.2]) {\n        // Main head\n        scale([0.9, 0.9, 1]) sphere(d=25);\n        \n        // Cheek sacs\n        for(side = [-1, 1]) {\n            translate([side * 10, 0, -5]) {\n                scale([0.7, 0.7, 0.7]) sphere(d=12);\n                \n                // Orange markings\n                color([0.9, 0.3, 0.1]) {\n                    translate([side * 2, 0, 0])\n                        rotate([90, 0, 0])\n                        cylinder(h=1, d=10);\n                }\n            }\n        }\n        \n        // Eyes\n        for(side = [-1, 1]) {\n            translate([side * 8, 8, 5]) {\n                color([1, 1, 1]) sphere(d=8);\n                color([0.1, 0.1, 0.1]) {\n                    translate([0, 0, 3]) sphere(d=4);\n                }\n            }\n        }\n        \n        // Mouth\n        translate([0, 12, 0]) {\n            difference() {\n                color([0.8, 0.2, 0.3]) {\n                    scale([0.8, 0.4, 0.3]) sphere(d=10);\n                }\n                translate([0, 0, 3]) cube([20, 10, 5], center=true);\n            }\n        }\n        \n        // Venom sacs\n        translate([0, 12, -8]) {\n            color([0.7, 0.4, 0.6]) {\n                cylinder(h=8, d=6);\n            }\n        }\n    }\n}\n\nmodule croagunk_ears() {\n    color([0.2, 0.2, 0.2]) {\n        for(side = [-1, 1]) {\n            translate([side * 12, 0, 15]) {\n                rotate([side * 30, 0, 0]) {\n                    scale([0.3, 0.8, 2]) sphere(d=15);\n                    \n                    // Teal markings\n                    color([0.2, 0.6, 0.6]) {\n                        translate([0, 0, 5])\n                            scale([0.8, 0.8, 0.3]) sphere(d=12);\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule croagunk_whiskers() {\n    color([0.2, 0.2, 0.2]) {\n        for(side = [-1, 1]) {\n            for(angle = [-30, 0, 30]) {\n                translate([side * 12, 5, 0]) {\n                    rotate([0, 0, side * angle]) {\n                        cylinder(h=8, d=1);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Assembly\ntranslate([0, 0, 35]) croagunk_head();\ncroagunk_body();\ncroagunk_ears();\ncroagunk_whiskers();",
    "renders": true
  },
  {
    "pokemon": "toxicroak",
    "openscad_code": "// Toxicroak OpenSCAD Model (Medium Complexity, Realistic Style)\n\n// Overall scale\nscale_factor = 0.2;\n\n// Main body color\nbody_color = [0.2, 0.3, 0.2]; // Dark green\naccent_color = [0.1, 0.1, 0.1]; // Black\nlight_color = [0.3, 0.7, 0.3]; // Light green\nred_color = [0.8, 0.1, 0.1]; // Red for throat sac\n\nmodule toxicroak() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        // Main body\n        color(body_color) {\n            // Torso\n            union() {\n                translate([0, 0, 0]) {\n                    scale([1.2, 1, 1.5]) {\n                        sphere(20);\n                    }\n                }\n                \n                // Chest plate\n                translate([0, -18, 5]) {\n                    scale([0.8, 0.3, 0.6]) {\n                        sphere(25);\n                    }\n                }\n            }\n        }\n        \n        // Head\n        color(body_color) {\n            translate([0, -30, 35]) {\n                scale([1, 0.9, 1.1]) {\n                    sphere(18);\n                }\n            }\n        }\n        \n        // Snout\n        color(body_color) {\n            translate([0, -45, 35]) {\n                scale([0.7, 0.6, 0.5]) {\n                    sphere(15);\n                }\n            }\n        }\n        \n        // Eyes\n        color(accent_color) {\n            // Left eye\n            translate([-12, -35, 40]) {\n                scale([1, 1, 0.5]) {\n                    sphere(6);\n                }\n            }\n            \n            // Right eye\n            translate([12, -35, 40]) {\n                scale([1, 1, 0.5]) {\n                    sphere(6);\n                }\n            }\n        }\n        \n        // Eye pupils\n        color([1, 1, 1]) {\n            // Left pupil\n            translate([-12, -37, 42]) {\n                sphere(3);\n            }\n            \n            // Right pupil\n            translate([12, -37, 42]) {\n                sphere(3);\n            }\n        }\n        \n        // Poison sac (throat)\n        color(red_color) {\n            translate([0, -25, 20]) {\n                scale([0.6, 0.4, 0.8]) {\n                    sphere(15);\n                }\n            }\n        }\n        \n        // Arms\n        color(body_color) {\n            // Left arm\n            translate([-25, -15, 20]) {\n                rotate([0, 0, -30]) {\n                    scale([0.4, 0.4, 1.2]) {\n                        cylinder(30, 8, 6);\n                    }\n                }\n            }\n            \n            // Right arm\n            translate([25, -15, 20]) {\n                rotate([0, 0, 30]) {\n                    scale([0.4, 0.4, 1.2]) {\n                        cylinder(30, 8, 6);\n                    }\n                }\n            }\n        }\n        \n        // Hands\n        color(body_color) {\n            // Left hand\n            translate([-45, -5, 15]) {\n                scale([1.2, 0.6, 0.4]) {\n                    sphere(10);\n                }\n                \n                // Fingers\n                for(i = [-1, 0, 1]) {\n                    translate([-5 + i*5, -2, 0]) {\n                        scale([0.3, 0.3, 1.2]) {\n                            cylinder(8, 2, 1);\n                        }\n                    }\n                }\n            }\n            \n            // Right hand\n            translate([45, -5, 15]) {\n                scale([1.2, 0.6, 0.4]) {\n                    sphere(10);\n                }\n                \n                // Fingers\n                for(i = [-1, 0, 1]) {\n                    translate([5 + i*5, -2, 0]) {\n                        scale([0.3, 0.3, 1.2]) {\n                            cylinder(8, 2, 1);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Legs\n        color(body_color) {\n            // Left leg\n            translate([-15, 20, -15]) {\n                rotate([0, 0, 15]) {\n                    scale([0.5, 0.5, 1.5]) {\n                        cylinder(35, 10, 8);\n                    }\n                }\n            }\n            \n            // Right leg\n            translate([15, 20, -15]) {\n                rotate([0, 0, -15]) {\n                    scale([0.5, 0.5, 1.5]) {\n                        cylinder(35, 10, 8);\n                    }\n                }\n            }\n        }\n        \n        // Feet\n        color(body_color) {\n            // Left foot\n            translate([-15, 35, -30]) {\n                scale([1.5, 2, 0.8]) {\n                    sphere(12);\n                }\n                \n                // Toes\n                for(i = [-1, 0, 1]) {\n                    translate([-5 + i*5, 15, -35]) {\n                        scale([0.4, 0.4, 0.8]) {\n                            cylinder(5, 3, 2);\n                        }\n                    }\n                }\n            }\n            \n            // Right foot\n            translate([15, 35, -30]) {\n                scale([1.5, 2, 0.8]) {\n                    sphere(12);\n                }\n                \n                // Toes\n                for(i = [-1, 0, 1]) {\n                    translate([-5 + i*5, 15, -35]) {\n                        scale([0.4, 0.4, 0.8]) {\n                            cylinder(5, 3, 2);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Antennae\n        color(light_color) {\n            // Left antenna\n            translate([-10, -40, 50]) {\n                rotate([0, 15, -30]) {\n                    scale([0.3, 0.3, 1]) {\n                        cylinder(20, 3, 2);\n                    }\n                }\n                \n                // Antenna tip\n                translate([-5, -45, 65]) {\n                    sphere(4);\n                }\n            }\n            \n            // Right antenna\n            translate([10, -40, 50]) {\n                rotate([0, 15, 30]) {\n                    scale([0.3, 0.3, 1]) {\n                        cylinder(20, 3, 2);\n                    }\n                }\n                \n                // Antenna tip\n                translate([5, -45, 65]) {\n                    sphere(4);\n                }\n            }\n        }\n        \n        // Markings\n        color(light_color) {\n            // Chest marking\n            translate([0, -15, 30]) {\n                scale([0.3, 0.3, 0.1]) {\n                    sphere(20);\n                }\n            }\n            \n            // Face marking\n            translate([0, -35, 38]) {\n                scale([0.8, 0.3, 0.1]) {\n                    sphere(15);\n                }\n            }\n            \n            // Arm stripes\n            // Left arm stripes\n            for(i = [0.3, 0.6]) {\n                translate([-25 - i*10, -15 + i*5, 20 - i*5]) {\n                    rotate([0, 0, -30]) {\n                        scale([0.5, 0.5, 0.1]) {\n                            cylinder(5, 9, 7);\n                        }\n                    }\n                }\n            }\n            \n            // Right arm stripes\n            for(i = [0.3, 0.6]) {\n                translate([25 + i*10, -15 + i*5, 20 - i*5]) {\n                    rotate([0, 0, 30]) {\n                        scale([0.5, 0.5, 0.1]) {\n                            cylinder(5, 9, 7);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Generate the model\ntoxicroak();",
    "renders": true
  },
  {
    "pokemon": "carnivine",
    "openscad_code": "// Carnivine Pokemon - Realistic Style, Medium Complexity\n// Designed for 3D printing with no overhangs\n\n$fn = 32;\n\n// Main colors\ncolor_body = [0.2, 0.6, 0.2];      // Forest green\ncolor_mouth = [0.8, 0.2, 0.2];     // Red mouth interior\ncolor_teeth = [1, 1, 1];           // White teeth\ncolor_eyes = [0.9, 0.9, 0.1];      // Yellow eyes\ncolor_vines = [0.15, 0.5, 0.15];   // Darker green vines\n\n// Overall scaling factor\nscale_factor = 0.8;\n\nmodule carnivine() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        // Main body (seed-like shape)\n        color(color_body)\n        difference() {\n            union() {\n                translate([0, 0, 25])\n                scale([1.2, 1, 1.5])\n                sphere(15);\n                \n                translate([0, 0, 10])\n                scale([1.4, 1.2, 1])\n                sphere(12);\n            }\n            \n            // Mouth opening\n            translate([0, -2, 25])\n            rotate([0, 20, 0])\n            scale([0.8, 0.6, 1.2])\n            cube([30, 25, 30], center=true);\n        }\n        \n        // Mouth interior\n        color(color_mouth)\n        translate([0, -12, 20])\n        rotate([0, 20, 0])\n        scale([0.7, 0.3, 0.9])\n        cube([28, 20, 28], center=true);\n        \n        // Teeth (upper jaw)\n        color(color_teeth)\n        for(i = [-12:6:12]) {\n            translate([i, -8, 28])\n            rotate([0, -20, 0])\n            scale([0.3, 1, 0.5])\n            cylinder(h=5, r1=2, r2=0.5);\n        }\n        \n        // Teeth (lower jaw)\n        color(color_teeth)\n        for(i = [-9:6:9]) {\n            translate([i, -15, 20])\n            rotate([0, -20, 0])\n            scale([0.3, 1, 0.5])\n            cylinder(h=5, r1=0.5, r2=2);\n        }\n        \n        // Eyes\n        color(color_eyes)\n        translate([-8, 8, 35])\n        sphere(3);\n        translate([8, 8, 35])\n        sphere(3);\n        \n        // Eye pupils\n        color([0, 0, 0])\n        translate([-8, 8.5, 37])\n        sphere(1.5);\n        translate([8, 8.5, 37])\n        sphere(1.5);\n        \n        // Leaf-like appendages (4 total)\n        color(color_body)\n        for(angle = [0:90:270]) {\n            rotate([0, 0, angle])\n            translate([20, 0, 30])\n            rotate([0, 0, -30])\n            scale([0.3, 1, 0.1])\n            cylinder(h=25, r1=8, r2=3);\n        }\n        \n        // Vine arms\n        color(color_vines)\n        // Left vine arm\n        translate([-15, 15, 20])\n        rotate([0, -30, -45])\n        scale([0.5, 0.5, 1])\n        cylinder(h=30, r1=4, r2=2);\n        \n        // Right vine arm\n        translate([15, 15, 20])\n        mirror([1, 0, 0])\n        rotate([0, -30, -45])\n        scale([0.5, 0.5, 1])\n        cylinder(h=30, r1=4, r2=2);\n        \n        // Leaf fingers on vines\n        color(color_body)\n        for(side = [-1, 1]) {\n            translate([side * 22, 25, 15])\n            rotate([0, 0, side * 60])\n            scale([0.2, 0.8, 0.05])\n            cylinder(h=15, r1=5, r2=2);\n            \n            translate([side * 25, 22, 15])\n            rotate([0, 0, side * 30])\n            scale([0.2, 0.8, 0.05])\n            cylinder(h=12, r1=4, r2=1);\n        }\n        \n        // Bottom leaves (6 leaves)\n        color(color_body)\n        for(i = [0:60:300]) {\n            rotate([0, 0, i])\n            translate([0, 0, 5])\n            rotate([45, 0, 0])\n            scale([0.4, 1, 0.08])\n            cylinder(h=20, r1=6, r2=2);\n        }\n        \n        // Top horn-like leaf\n        color(color_body)\n        translate([0, 0, 50])\n        rotate([0, 0, 0])\n        scale([0.3, 0.8, 0.1])\n        cylinder(h=15, r1=3, r2=1);\n    }\n}\n\n// Render the model\ncarnivine();",
    "renders": true
  },
  {
    "pokemon": "finneon",
    "openscad_code": "// Finneon Pokemon - Realistic Style\n// Medium complexity OpenSCAD model\n\n$fn = 32;\n\n// Main colors\ncolor_dark_blue = [0, 0.2, 0.4];\ncolor_light_blue = [0.3, 0.7, 1];\ncolor_yellow = [1, 0.8, 0];\ncolor_black = [0, 0, 0];\ncolor_white = [1, 1, 1];\ncolor_pink = [1, 0.7, 0.8];\n\n// Scale for 3D printing\nscale_factor = 0.4;\n\n// Main body module\nmodule finneon_body() {\n    color(color_dark_blue)\n    union() {\n        // Main body\n        translate([0, 0, 10])\n        scale([1.2, 0.6, 1])\n        sphere(10);\n        \n        // Tail extension\n        translate([0, -12, 8])\n        rotate([10, 0, 0])\n        scale([0.8, 0.3, 0.6])\n        cylinder(h = 15, r1 = 8, r2 = 4);\n    }\n}\n\n// Tail fins\nmodule tail_fins() {\n    color(color_light_blue)\n    union() {\n        // Upper tail fin\n        translate([0, -25, 12])\n        rotate([-30, 0, 0])\n        scale([1, 0.1, 2])\n        cylinder(h = 15, r1 = 6, r2 = 10);\n        \n        // Lower tail fin\n        translate([0, -25, 4])\n        rotate([30, 0, 0])\n        scale([1, 0.1, 1.5])\n        cylinder(h = 12, r1 = 5, r2 = 8);\n    }\n}\n\n// Side fins\nmodule side_fins() {\n    color(color_light_blue)\n    union() {\n        // Left fin\n        translate([-12, 0, 8])\n        rotate([0, 0, 45])\n        scale([0.1, 1, 1.2])\n        cylinder(h = 8, r1 = 4, r2 = 7);\n        \n        // Right fin\n        mirror([1, 0, 0])\n        translate([-12, 0, 8])\n        rotate([0, 0, 45])\n        scale([0.1, 1, 1.2])\n        cylinder(h = 8, r1 = 4, r2 = 7);\n    }\n}\n\n// Dorsal fin\nmodule dorsal_fin() {\n    color(color_dark_blue)\n    translate([0, -5, 18])\n    rotate([0, 0, 0])\n    linear_extrude(height = 0.1)\n    polygon(points = [\n        [0, 0],\n        [-6, 8],\n        [6, 8]\n    ]);\n}\n\n// Eyes\nmodule eyes() {\n    union() {\n        // Left eye\n        translate([-5, 8, 12])\n        color(color_white)\n        sphere(3);\n        \n        translate([-5, 9, 13])\n        color(color_black)\n        sphere(1.5);\n        \n        // Right eye\n        translate([5, 8, 12])\n        color(color_white)\n        sphere(3);\n        \n        translate([5, 9, 13])\n        color(color_black)\n        sphere(1.5);\n    }\n}\n\n// Mouth\nmodule mouth() {\n    color(color_black)\n    translate([0, 12, 8])\n    rotate([90, 0, 0])\n    scale([1, 0.5, 0.1])\n    cylinder(h = 1, r = 2);\n}\n\n// Yellow markings pattern\nmodule yellow_markings() {\n    color(color_yellow)\n    union() {\n        // Body stripes\n        translate([0, 5, 15])\n        rotate([90, 0, 0])\n        scale([0.8, 0.8, 0.1])\n        cylinder(h = 2, r = 8);\n        \n        translate([0, 0, 15])\n        rotate([90, 0, 0])\n        scale([0.7, 0.7, 0.1])\n        cylinder(h = 2, r = 8);\n        \n        // Tail stripes\n        for(i = [0:2]) {\n            translate([0, -20 - i*5, 10 - i*1])\n            rotate([90, 0, 0])\n            scale([0.3 - i*0.05, 0.3 - i*0.05, 0.1])\n            cylinder(h = 1, r = 8);\n        }\n    }\n}\n\n// Pink pelvic fins\nmodule pelvic_fins() {\n    color(color_pink)\n    union() {\n        // Left pelvic fin\n        translate([-6, 8, 3])\n        rotate([0, 0, -30])\n        scale([0.1, 1, 0.8])\n        cylinder(h = 6, r1 = 2, r2 = 4);\n        \n        // Right pelvic fin\n        mirror([1, 0, 0])\n        translate([-6, 8, 3])\n        rotate([0, 0, -30])\n        scale([0.1, 1, 0.8])\n        cylinder(h = 6, r1 = 2, r2 = 4);\n    }\n}\n\n// Assembly\nscale([scale_factor, scale_factor, scale_factor])\nunion() {\n    finneon_body();\n    tail_fins();\n    side_fins();\n    dorsal_fin();\n    pelvic_fins();\n    eyes();\n    mouth();\n    yellow_markings();\n}",
    "renders": true
  },
  {
    "pokemon": "lumineon",
    "openscad_code": "// Lumineon Pokemon - Realistic Style, Medium Complexity\n// OpenSCAD code for 3D printing\n\n// Color definitions\n$fa = 2;\n$fs = 0.5;\n\nmodule lumineon() {\n    // Main body - dark blue base\n    color([0.1, 0.2, 0.6])\n    union() {\n        // Central body\n        translate([0, 0, 5])\n        scale([1, 0.6, 0.3])\n        sphere(15);\n        \n        // Tail extension\n        translate([-25, 0, 5])\n        scale([1.5, 0.3, 0.2])\n        sphere(10);\n        \n        // Lower body\n        translate([0, 0, -2])\n        scale([0.8, 0.5, 0.4])\n        sphere(12);\n    }\n    \n    // Wing structures - cyan/blue\n    color([0.2, 0.7, 0.9])\n    union() {\n        // Left wing\n        translate([5, 12, 8])\n        rotate([0, -10, 30])\n        scale([0.3, 1.5, 0.05])\n        cube([20, 25, 2]);\n        \n        // Right wing\n        translate([5, -12, 8])\n        rotate([0, 10, -30])\n        scale([0.3, 1.5, 0.05])\n        cube([20, 25, 2]);\n        \n        // Lower fin details\n        for(i = [-1, 1]) {\n            translate([0, i*8, 2])\n            rotate([0, 0, i*20])\n            scale([0.5, 0.8, 0.1])\n            cube([15, 8, 1]);\n        }\n    }\n    \n    // Head section - lighter blue\n    color([0.3, 0.4, 0.8])\n    translate([15, 0, 12])\n    scale([1, 0.8, 0.7])\n    sphere(8);\n    \n    // Eye sockets\n    color([0.1, 0.1, 0.1])\n    union() {\n        // Left eye\n        translate([20, 4, 14])\n        scale([0.8, 0.5, 0.3])\n        sphere(3);\n        \n        // Right eye\n        translate([20, -4, 14])\n        scale([0.8, 0.5, 0.3])\n        sphere(3);\n        \n        // Pupils\n        color([1, 1, 1])\n        union() {\n            translate([21, 4.5, 15])\n            sphere(1);\n            translate([21, -4.5, 15])\n            sphere(1);\n        }\n    }\n    \n    // Mouth\n    color([0.05, 0.05, 0.1])\n    translate([22, 0, 10])\n    rotate([0, 90, 0])\n    scale([0.3, 0.1, 0.1])\n    cylinder(h=6, r=1.5);\n    \n    // Fin details on body\n    color([0.15, 0.3, 0.7])\n    for(i = [0:2]) {\n        translate([5 - i*8, 0, 8 - i*2])\n        rotate([0, 0, 10])\n        scale([0.2, 1, 0.1])\n        cube([10, 6, 1]);\n    }\n    \n    // Dorsal fin\n    color([0.25, 0.5, 0.9])\n    translate([-5, 0, 18])\n    rotate([0, 0, 0])\n    scale([0.1, 1, 0.8])\n    cube([8, 12, 6]);\n    \n    // Pectoral fins\n    color([0.2, 0.6, 0.85])\n    for(side = [-1, 1]) {\n        translate([8, side*12, 6])\n        rotate([0, side*30, 0])\n        scale([0.8, 0.3, 0.1])\n        cube([12, 8, 2]);\n        \n        // Fin rays\n        color([0.1, 0.4, 0.7])\n        for(j = [0:2]) {\n            translate([8 + j*3, side*12, 6])\n            rotate([0, side*30, 0])\n            scale([0.1, 0.05, 0.8])\n            cube([10, 1, 4]);\n        }\n    }\n    \n    // Tail fin\n    color([0.3, 0.7, 0.95])\n    translate([-30, 0, 5])\n    rotate([0, 0, 0])\n    union() {\n        // Upper lobe\n        translate([0, 0, 5])\n        scale([0.1, 1.2, 0.8])\n        cube([8, 10, 8]);\n        \n        // Lower lobe\n        translate([0, 0, -3])\n        scale([0.1, 1.2, 0.8])\n        cube([8, 10, 8]);\n        \n        // Connecting membrane\n        translate([-4, 0, 1])\n        scale([0.05, 1, 1.5])\n        cube([8, 8, 8]);\n    }\n    \n    // Pattern markings - electric yellow accents\n    color([1, 0.9, 0.2])\n    for(pos = [[10, 6, 10], [10, -6, 10], [0, 8, 12], [0, -8, 12]]) {\n        translate(pos)\n        scale([0.5, 0.5, 0.3])\n        sphere(2);\n    }\n}\n\n// Scale model to 70mm length\nscale(70/60)\nlumineon();",
    "renders": true
  },
  {
    "pokemon": "mantyke",
    "openscad_code": "// Mantyke - Realistic Style, Medium Complexity\n// Dimensions: ~60mm wide, ~50mm long, ~20mm tall\n\ncolor(\"deepskyblue\") \nunion() {\n    // Main body - flattened ellipsoid shape\n    translate([0, 0, 8]) \n    scale([1, 0.7, 0.3]) \n    sphere(15, $fn=32);\n    \n    // Wing 1 (left)\n    translate([-20, 0, 10]) \n    rotate([0, 0, -20]) \n    scale([2, 1.2, 0.2]) \n    sphere(10, $fn=32);\n    \n    // Wing 2 (right)\n    translate([20, 0, 10]) \n    rotate([0, 0, 20]) \n    scale([2, 1.2, 0.2]) \n    sphere(10, $fn=32);\n    \n    // Head bump\n    translate([0, 12, 15]) \n    sphere(8, $fn=32);\n    \n    // Eye 1\n    color(\"white\")\n    translate([-6, 12, 16]) \n    sphere(3, $fn=16);\n    \n    // Eye 2\n    translate([6, 12, 16]) \n    sphere(3, $fn=16);\n    \n    // Pupil 1\n    color(\"black\")\n    translate([-6, 12, 18]) \n    sphere(1.5, $fn=16);\n    \n    // Pupil 2\n    translate([6, 12, 18]) \n    sphere(1.5, $fn=16);\n    \n    // Mouth\n    color(\"black\")\n    translate([0, 10, 14]) \n    rotate([90, 0, 0]) \n    cylinder(h=0.5, r1=2, r2=1, $fn=16);\n    \n    // Tail base\n    color(\"deepskyblue\")\n    translate([0, -20, 8]) \n    scale([0.8, 1.5, 0.3]) \n    sphere(10, $fn=32);\n    \n    // Tail extension\n    translate([0, -30, 6]) \n    scale([0.5, 1, 0.2]) \n    sphere(8, $fn=32);\n    \n    // Pattern markings\n    color(\"yellow\")\n    for(i=[-1, 1]) {\n        translate([i*12, 0, 11]) \n        rotate([0, 0, i*15]) \n        scale([1, 0.5, 0.1]) \n        cylinder(h=0.5, r=5, $fn=32);\n    }\n    \n    // Fin details\n    module fin(pos, angle) {\n        translate(pos) \n        rotate([0, 0, angle]) \n        scale([0.3, 1, 0.5]) \n        sphere(8, $fn=16);\n    }\n    \n    // Left wing fins\n    fin([-30, -5, 10], -30);\n    fin([-25, 8, 10], -45);\n    \n    // Right wing fins\n    fin([30, -5, 10], 30);\n    fin([25, 8, 10], 45);\n    \n    // Underside pattern\n    color(\"lightblue\")\n    translate([0, 0, 5]) \n    scale([0.8, 0.6, 0.1]) \n    sphere(15, $fn=32);\n    \n    // Feet stubs (for 3D printing support)\n    color(\"deepskyblue\")\n    translate([-8, -8, 0]) \n    cylinder(h=3, r=2, $fn=16);\n    \n    translate([8, -8, 0]) \n    cylinder(h=3, r=2, $fn=16);\n}",
    "renders": true
  },
  {
    "pokemon": "snover",
    "openscad_code": "// Realistic Snover Pokemon - Medium Complexity\n// 3D printable, no overhangs, ~70mm height\n\n$fn = 32;  // Smooth curves for realistic look\n\n// Main colors\nwhite = [1, 1, 1];\nbrown = [0.4, 0.2, 0.1];\ngreen = [0.2, 0.6, 0.3];\nlight_blue = [0.7, 0.9, 1];\nblack = [0, 0, 0];\nred = [0.8, 0.2, 0.2];\n\n// Main module\nmodule snover() {\n    // Base positioning\n    translate([0, 0, 0]) {\n        // Feet\n        feet();\n        \n        // Body\n        translate([0, 0, 12]) {\n            rotate([0, 0, 0]) body();\n        }\n        \n        // Head\n        translate([0, 0, 40]) {\n            rotate([0, 0, 0]) head();\n        }\n        \n        // Arms\n        translate([8, 0, 28]) rotate([0, 0, 30]) arm();\n        translate([-8, 0, 28]) rotate([0, 0, -30]) mirror([1, 0, 0]) arm();\n        \n        // Green foliage on head\n        translate([0, 0, 58]) foliage();\n    }\n}\n\n// Body module - segmented white/blue\nmodule body() {\n    color(white) {\n        // Main body cylinder\n        cylinder(h = 25, r1 = 12, r2 = 10);\n        \n        // Ring details\n        for(i = [1:3]) {\n            translate([0, 0, i * 6]) \n            color(light_blue) \n            cylinder(h = 1.5, r = 11.5);\n        }\n    }\n}\n\n// Head module\nmodule head() {\n    color(white) {\n        // Main head\n        translate([0, 0, 0]) \n        scale([1, 0.9, 1.2]) \n        sphere(r = 10);\n        \n        // Eyes\n        eyes();\n        \n        // Mouth\n        mouth();\n    }\n}\n\n// Eyes module\nmodule eyes() {\n    // Left eye\n    translate([4, -7, 3]) {\n        color(black) sphere(r = 1.5);\n        translate([0, 0, 1.4]) color(white) sphere(r = 0.5);\n    }\n    \n    // Right eye\n    translate([-4, -7, 3]) {\n        color(black) sphere(r = 1.5);\n        translate([0, 0, 1.4]) color(white) sphere(r = 0.5);\n    }\n}\n\n// Mouth module\nmodule mouth() {\n    translate([0, -8, -2]) {\n        color(black) \n        rotate([90, 0, 0]) \n        cylinder(h = 0.5, r1 = 2, r2 = 1);\n    }\n}\n\n// Foliage module - pine tree style\nmodule foliage() {\n    color(green) {\n        // Central stem\n        cylinder(h = 15, r = 2);\n        \n        // Layered branches\n        for(i = [0:2]) {\n            translate([0, 0, i * 5]) {\n                rotate([0, 0, i * 45]) {\n                    // Branch segments\n                    for(j = [0:3]) {\n                        rotate([0, 0, j * 90]) \n                        translate([5, 0, 0]) \n                        scale([0.8, 0.2, 0.2]) \n                        sphere(r = 6);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Arm module\nmodule arm() {\n    color(brown) {\n        // Upper arm\n        translate([0, 0, 0]) \n        rotate([90, 0, 0]) \n        cylinder(h = 8, r = 2.5);\n        \n        // Hand with 3 fingers\n        translate([0, 0, 8]) {\n            // Palm\n            sphere(r = 3);\n            \n            // Fingers\n            for(i = [-1:1]) {\n                translate([i * 1.5, 0, 2]) \n                rotate([0, i * 20, 0]) \n                cylinder(h = 3, r = 1);\n            }\n        }\n    }\n}\n\n// Feet module\nmodule feet() {\n    color(brown) {\n        // Left foot\n        translate([5, 0, 0]) {\n            cube([8, 12, 4], center = true);\n            translate([0, 5, -2]) sphere(r = 2);\n        }\n        \n        // Right foot\n        translate([-5, 0, 0]) {\n            cube([8, 12, 4], center = true);\n            translate([0, 5, -2]) sphere(r = 2);\n        }\n    }\n}\n\n// Generate the model\nsnover();",
    "renders": true
  },
  {
    "pokemon": "abomasnow",
    "openscad_code": "// Abomasnow - Realistic style, medium complexity\n// 3D printable Pokemon figure\n\nmodule abomasnow() {\n    color(\"snow\") {\n        // Main body - snow covered pine cone shape\n        union() {\n            // Upper torso\n            translate([0, 0, 25]) \n                scale([1, 1, 1.3])\n                    sphere(d=35);\n            \n            // Lower body\n            cylinder(h=30, d1=35, d2=25);\n        }\n    }\n    \n    // Green pine needle sections\n    color(\"forestgreen\") {\n        // Chest pattern\n        difference() {\n            translate([0, 12, 20])\n                scale([0.8, 0.4, 0.6])\n                    sphere(d=30);\n            translate([0, 15, 20])\n                scale([0.9, 0.5, 0.7])\n                    sphere(d=30);\n        }\n        \n        // Arms\n        for(side = [-1, 1]) {\n            // Upper arm\n            translate([side * 20, 0, 20])\n                rotate([0, side * 30, 0])\n                cylinder(h=20, d=10);\n            \n            // Lower arm with ice crystals\n            translate([side * 30, 0, 10])\n                rotate([0, side * 45, 0])\n                cylinder(h=25, d=12);\n                \n            // Hand\n            translate([side * 40, 0, 5])\n                sphere(d=15);\n                \n            // Ice crystals on arms\n            color(\"lightblue\") {\n                for(i = [0:2]) {\n                    translate([side * (30 + i*5), 0, 15 - i*5])\n                        rotate([0, 90, 45])\n                        cube([2, 8, 2], center=true);\n                }\n            }\n        }\n    }\n    \n    // Legs\n    color(\"forestgreen\") {\n        for(side = [-1, 1]) {\n            translate([side * 10, -5, -15])\n                cylinder(h=25, d1=15, d2=12);\n                \n            // Feet\n            translate([side * 10, -5, -28])\n                scale([1.5, 2.5, 0.8])\n                    sphere(d=12);\n        }\n    }\n    \n    // Head\n    color(\"snow\") {\n        translate([0, 0, 45])\n            sphere(d=30);\n    }\n    \n    // Green head pattern\n    color(\"forestgreen\") {\n        difference() {\n            translate([0, 5, 48])\n                scale([0.9, 0.7, 0.9])\n                    sphere(d=28);\n            translate([0, 8, 48])\n                scale([1, 0.8, 1])\n                    sphere(d=28);\n        }\n    }\n    \n    // Ears\n    color(\"forestgreen\") {\n        for(side = [-1, 1]) {\n            translate([side * 12, 0, 55])\n                rotate([side * -20, 0, 0])\n                cylinder(h=15, d1=8, d2=12);\n        }\n    }\n    \n    // Eyes\n    color(\"black\") {\n        for(side = [-1, 1]) {\n            translate([side * 8, 10, 48])\n                sphere(d=3);\n        }\n    }\n    \n    // Nose\n    color(\"forestgreen\") {\n        translate([0, 12, 47])\n            sphere(d=4);\n    }\n    \n    // Mouth\n    color(\"black\") {\n        translate([0, 15, 43])\n            rotate([90, 0, 0])\n            cylinder(h=0.5, d=8);\n    }\n    \n    // Ice crystals on chest\n    color(\"lightblue\") {\n        for(angle = [0:60:359]) {\n            rotate([0, 0, angle])\n            translate([0, 12, 25])\n                cube([2, 10, 2], center=true);\n        }\n    }\n    \n    // Large ice crystal on head\n    translate([0, -5, 60])\n        rotate([0, 0, 45])\n        cube([3, 15, 3], center=true);\n}\n\n// Create the model\nabomasnow();",
    "renders": true
  },
  {
    "pokemon": "weavile",
    "openscad_code": "// Weavile - Realistic Style, Medium Complexity\n// 3D printable figure approximately 80mm tall\n\ncolor([0.1, 0.1, 0.1]) union() {\n    \n    // Main body\n    translate([0, 0, 30]) \n        scale([1.2, 0.8, 1.5]) \n            sphere(d=30, $fn=32);\n    \n    // Head\n    translate([0, 0, 55]) \n        scale([1.1, 1, 1.3]) \n            sphere(d=28, $fn=32);\n    \n    // Snout\n    translate([0, 13, 52]) \n        scale([0.7, 0.8, 0.6]) \n            sphere(d=18, $fn=32);\n    \n    // Eye sockets\n    for(x=[-6, 6]) {\n        color([1, 1, 1]) translate([x, 10, 58]) \n            sphere(d=8, $fn=16);\n        color([0.8, 0, 0]) translate([x, 11, 58]) \n            sphere(d=5, $fn=16);\n        color([0, 0, 0]) translate([x+1, 12, 59]) \n            sphere(d=2, $fn=8);\n    }\n    \n    // Ear (left)\n    module ear(side) {\n        mirror([side, 0, 0]) {\n            translate([0, 0, 60]) rotate([0, 0, -20*side]) {\n                color([0.8, 0.8, 0.8]) translate([8*side, 0, 8]) \n                    scale([0.8, 0.3, 1.5]) sphere(d=12, $fn=16);\n                color([0.1, 0.1, 0.1]) translate([12*side, 0, 12]) \n                    scale([0.3, 0.2, 0.8]) sphere(d=8, $fn=8);\n            }\n        }\n    }\n    ear(1);\n    ear(-1);\n    \n    // Arms with claws\n    module arm(side) {\n        mirror([side, 0, 0]) {\n            // Upper arm\n            translate([15*side, 0, 45]) rotate([0, 0, 30*side]) \n                cylinder(h=15, d1=8, d2=6, $fn=12);\n            // Lower arm\n            translate([23*side, -5*side, 40]) rotate([0, 0, 45*side]) \n                cylinder(h=12, d1=6, d2=5, $fn=12);\n            \n            // Three claws\n            for(i=[-1, 0, 1]) {\n                translate([25*side, -8*side + i*3, 35]) rotate([90, 0, 0]) \n                    scale([0.3, 0.3, 1]) cylinder(h=10, d=4, $fn=8);\n            }\n        }\n    }\n    arm(1);\n    arm(-1);\n    \n    // Legs\n    module leg(side) {\n        mirror([side, 0, 0]) {\n            // Thigh\n            translate([8*side, 0, 20]) rotate([0, 0, 15*side]) \n                cylinder(h=15, d1=10, d2=8, $fn=12);\n            // Lower leg\n            translate([10*side, 0, 10]) rotate([0, 0, -15*side]) \n                cylinder(h=10, d1=8, d2=6, $fn=12);\n            // Foot\n            translate([12*side, 5, 2]) rotate([0, 0, -15*side]) \n                scale([1.5, 1, 0.5]) sphere(d=12, $fn=16);\n            \n            // Three toe claws\n            for(i=[-1, 0, 1]) {\n                translate([14*side, 8 + i*3, 2]) rotate([90, 0, 0]) \n                    scale([0.3, 0.3, 1]) cylinder(h=6, d=3, $fn=8);\n            }\n        }\n    }\n    leg(1);\n    leg(-1);\n    \n    // Tail feathers\n    color([0.8, 0.8, 0.8]) {\n        translate([-12, 0, 35]) rotate([0, 20, 0]) \n            scale([0.3, 1.5, 0.1]) sphere(d=20, $fn=16);\n        translate([-10, 0, 38]) rotate([0, 10, 0]) \n            scale([0.3, 1.3, 0.1]) sphere(d=18, $fn=16);\n    }\n    \n    // Crest on head\n    color([0.8, 0.8, 0.8]) {\n        translate([0, -8, 65]) rotate([0, -30, 0]) \n            scale([0.2, 1, 0.05]) sphere(d=20, $fn=16);\n        translate([3, -8, 66]) rotate([0, -30, 20]) \n            scale([0.15, 0.8, 0.05]) sphere(d=15, $fn=16);\n        translate([-3, -8, 66]) rotate([0, -30, -20]) \n            scale([0.15, 0.8, 0.05]) sphere(d=15, $fn=16);\n    }\n    \n    // Chest marking\n    color([0.8, 0.8, 0.8]) \n        translate([0, 2, 45]) \n            scale([0.3, 0.6, 0.8]) sphere(d=15, $fn=16);\n    \n    // Forehead gem\n    color([0.9, 0.9, 0.9]) \n        translate([0, 0, 67]) \n            sphere(d=4, $fn=8);\n}",
    "renders": true
  },
  {
    "pokemon": "magnezone",
    "openscad_code": "// Magnezone - Medium complexity realistic style\n// 3D printable, ~75mm wide\n\n// Colors\ncolor_silver = [190/255, 190/255, 190/255];\ncolor_blue = [70/255, 130/255, 180/255];\ncolor_red = [220/255, 20/255, 60/255];\ncolor_yellow = [255/255, 215/255, 0/255];\n\n// Main body module\nmodule magnezone_body() {\n    color(color_silver) {\n        // Central sphere body\n        sphere(18, $fn=64);\n        \n        // Top dome\n        translate([0,0,15])\n            scale([1,1,0.5])\n                sphere(10, $fn=64);\n                \n        // Bottom dome\n        translate([0,0,-15])\n            scale([1,1,0.5])\n                sphere(10, $fn=64);\n    }\n}\n\n// Eye module\nmodule eye() {\n    color(color_red) {\n        // Eye sphere\n        sphere(5, $fn=32);\n        \n        // Pupil\n        color([0,0,0]) {\n            translate([2,0,0])\n                sphere(2, $fn=16);\n        }\n    }\n}\n\n// Magnet module\nmodule magnet() {\n    color(color_silver) {\n        // Main cylinder\n        cylinder(h=25, r1=6, r2=6, $fn=32);\n        \n        // Front cap\n        translate([0,0,12.5])\n            cylinder(h=5, r1=8, r2=6, $fn=32);\n            \n        // Back cap\n        translate([0,0,-12.5])\n            cylinder(h=5, r1=6, r2=8, $fn=32);\n    }\n    \n    // Red/blue tips\n    color(color_blue) {\n        translate([0,0,17.5])\n            sphere(4, $fn=16);\n    }\n    color(color_red) {\n        translate([0,0,-17.5])\n            sphere(4, $fn=16);\n    }\n}\n\n// Side unit module\nmodule side_unit() {\n    color(color_silver) {\n        // Main body sphere\n        sphere(12, $fn=64);\n        \n        // Eye socket\n        translate([10,0,0])\n            difference() {\n                sphere(8, $fn=32);\n                translate([5,0,0])\n                    sphere(8.5, $fn=32);\n            }\n    }\n    \n    // Eye placement\n    translate([10,0,0])\n        rotate([0,-90,0])\n            eye();\n    \n    // Yellow marking\n    color(color_yellow) {\n        translate([0,0,-8])\n            scale([1.5,0.3,0.1])\n                sphere(10, $fn=32);\n    }\n}\n\n// Antenna module\nmodule antenna() {\n    color(color_silver) {\n        // Main pole\n        cylinder(h=15, r1=1, r2=2, $fn=16);\n        \n        // Top sphere\n        translate([0,0,15])\n            sphere(2, $fn=16);\n            \n        // Side arms\n        for(i=[-1,1]) {\n            rotate([0,0,i*45])\n                translate([0,10,5])\n                    scale([1,0.5,0.5])\n                        sphere(3, $fn=16);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Central body\n    magnezone_body();\n    \n    // Eyes\n    translate([13,0,5])\n        rotate([0,-30,0])\n            eye();\n    translate([-13,0,5])\n        rotate([0,30,0])\n            eye();\n    \n    // Magnets (3 arranged at 120 degrees)\n    for(i=[0:120:240]) {\n        rotate([0,0,i])\n            translate([30,0,0])\n                rotate([0,90,0])\n                    magnet();\n    }\n    \n    // Side units\n    for(i=[0:120:240]) {\n        rotate([0,0,i])\n            translate([25,0,-10])\n                side_unit();\n    }\n    \n    // Antenna on top\n    translate([0,0,25])\n        antenna();\n}",
    "renders": true
  },
  {
    "pokemon": "lickilicky",
    "openscad_code": "// Lickilicky - Realistic Style, Medium Complexity\n// Overall dimensions: ~80mm height\n\n$fn = 32;\n\nmodule body() {\n    color([0.8, 0.75, 0.7]) {\n        // Main body sphere\n        sphere(d = 60, center = true);\n    }\n}\n\nmodule belly() {\n    color([0.9, 0.85, 0.8]) {\n        // Belly oval\n        scale([1.3, 1.1, 1.1])\n            sphere(d = 50);\n    }\n}\n\nmodule head() {\n    color([0.8, 0.75, 0.7]) {\n        // Head\n        translate([0, 28, 20])\n            sphere(d = 35);\n        \n        // Snout\n        translate([0, 40, 15])\n            scale([1.2, 1.5, 1])\n                sphere(d = 20);\n    }\n}\n\nmodule ears() {\n    // Left ear\n    color([0.8, 0.75, 0.7]) {\n        translate([-18, 15, 35]) {\n            rotate([0, 20, -30])\n                cylinder(h = 20, d1 = 12, d2 = 8);\n            translate([0, 0, 20])\n                sphere(d = 12);\n        }\n    }\n    \n    // Right ear (mirrored)\n    mirror([1, 0, 0])\n        ears();\n}\n\nmodule arms() {\n    // Left arm\n    color([0.8, 0.75, 0.7]) {\n        translate([-30, 5, -5]) {\n            rotate([0, 0, 90])\n                cylinder(h = 25, d = 12);\n            translate([25, 0, 0])\n                sphere(d = 15);\n        }\n    }\n    \n    // Right arm (mirrored)\n    mirror([1, 0, 0])\n        arms();\n}\n\nmodule legs() {\n    // Left leg\n    color([0.8, 0.75, 0.7]) {\n        translate([-18, -15, -25]) {\n            cylinder(h = 20, d = 15);\n            translate([0, 0, -20])\n                sphere(d = 18);\n        }\n    }\n    \n    // Right leg (mirrored)\n    mirror([1, 0, 0])\n        legs();\n}\n\nmodule tail() {\n    color([0.8, 0.75, 0.7]) {\n        translate([0, -35, -15]) {\n            // Tail curl segments\n            for(i = [0:3]) {\n                rotate([0, 0, i * 30])\n                    translate([0, -8 - i * 5, 0])\n                        sphere(d = 12 - i * 2);\n            }\n        }\n    }\n}\n\nmodule tongue() {\n    color([0.9, 0.3, 0.4]) {\n        // Tongue base\n        translate([0, 45, 8])\n            rotate([0, 90, 0])\n                cylinder(h = 40, d1 = 8, d2 = 4);\n        \n        // Tongue tip\n        translate([0, 85, 8])\n            sphere(d = 6);\n    }\n}\n\nmodule eyes() {\n    // Left eye\n    color([0, 0, 0]) {\n        translate([-8, 32, 25])\n            sphere(d = 4);\n    }\n    \n    // Right eye (mirrored)\n    mirror([1, 0, 0])\n        eyes();\n}\n\nmodule markings() {\n    // Back markings\n    color([0.6, 0.55, 0.5]) {\n        translate([0, -10, 25])\n            scale([1.5, 0.8, 0.3])\n                sphere(d = 30);\n        \n        translate([0, -25, 15])\n            scale([2, 0.8, 0.3])\n                sphere(d = 25);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    belly();\n    head();\n    ears();\n    arms();\n    legs();\n    tail();\n    tongue();\n    eyes();\n    markings();\n}",
    "renders": true
  },
  {
    "pokemon": "rhyperior",
    "openscad_code": "// Rhyperior - Realistic Style, Medium Complexity\n// Designed for 3D printing - approximately 75mm tall\n\n$fn = 32;\n\n// Main colors\ncolor_orange = [0.9, 0.4, 0.1];\ncolor_dark_gray = [0.3, 0.3, 0.3];\ncolor_light_gray = [0.6, 0.6, 0.6];\ncolor_yellow = [0.9, 0.8, 0.1];\ncolor_black = [0.1, 0.1, 0.1];\ncolor_white = [0.9, 0.9, 0.9];\n\n// Body scale factor\nbody_scale = 0.8;\n\nmodule rhyperior() {\n    // Main body\n    color(color_orange)\n    translate([0, 0, 10])\n    scale([body_scale, body_scale, body_scale])\n    union() {\n        // Torso\n        difference() {\n            sphere(15);\n            translate([0, 0, -10])\n            cube([30, 30, 20], center = true);\n        }\n        \n        // Chest plate\n        color(color_dark_gray)\n        translate([0, -14, 5])\n        rotate([90, 0, 0])\n        cylinder(h = 3, r1 = 12, r2 = 8);\n        \n        // Back spikes\n        for(i = [0:2]) {\n            color(color_dark_gray)\n            rotate([0, 0, i * 120])\n            translate([0, 12, 5])\n            rotate([20, 0, 0])\n            cylinder(h = 8, r1 = 3, r2 = 1);\n        }\n    }\n    \n    // Head\n    color(color_orange)\n    translate([0, -20, 35])\n    scale([0.9, 0.9, 0.9])\n    union() {\n        // Main head shape\n        sphere(12);\n        \n        // Snout\n        color(color_orange)\n        translate([0, -12, -2])\n        rotate([20, 0, 0])\n        cylinder(h = 12, r1 = 8, r2 = 6);\n        \n        // Horns\n        color(color_dark_gray)\n        translate([-8, -5, 8])\n        rotate([0, -20, -20])\n        cylinder(h = 10, r1 = 3, r2 = 1);\n        \n        color(color_dark_gray)\n        translate([8, -5, 8])\n        rotate([0, -20, 20])\n        cylinder(h = 10, r1 = 3, r2 = 1);\n        \n        // Eyes\n        color(color_yellow)\n        translate([-5, -8, 3])\n        sphere(2.5);\n        \n        color(color_yellow)\n        translate([5, -8, 3])\n        sphere(2.5);\n        \n        // Pupils\n        color(color_black)\n        translate([-5, -9.5, 3.5])\n        sphere(1);\n        \n        color(color_black)\n        translate([5, -9.5, 3.5])\n        sphere(1);\n        \n        // Mouth\n        color(color_black)\n        translate([0, -14, -3])\n        rotate([20, 0, 0])\n        cylinder(h = 0.5, r = 4);\n    }\n    \n    // Arms\n    // Left arm\n    color(color_orange)\n    translate([-18, 0, 20])\n    rotate([0, 0, -30])\n    union() {\n        // Upper arm\n        cylinder(h = 15, r = 6);\n        \n        // Lower arm\n        translate([0, 0, 15])\n        rotate([0, 25, 0])\n        cylinder(h = 12, r = 5);\n        \n        // Hand\n        color(color_dark_gray)\n        translate([0, 0, 27])\n        rotate([0, 45, 0])\n        sphere(7);\n        \n        // Drill\n        color(color_light_gray)\n        translate([0, 0, 34])\n        rotate([0, 45, 0])\n        cylinder(h = 10, r1 = 3, r2 = 1);\n    }\n    \n    // Right arm\n    color(color_orange)\n    translate([18, 0, 20])\n    mirror([1, 0, 0])\n    rotate([0, 0, -30])\n    union() {\n        // Upper arm\n        cylinder(h = 15, r = 6);\n        \n        // Lower arm\n        translate([0, 0, 15])\n        rotate([0, 25, 0])\n        cylinder(h = 12, r = 5);\n        \n        // Hand\n        color(color_dark_gray)\n        translate([0, 0, 27])\n        rotate([0, 45, 0])\n        sphere(7);\n        \n        // Drill\n        color(color_light_gray)\n        translate([0, 0, 34])\n        rotate([0, 45, 0])\n        cylinder(h = 10, r1 = 3, r2 = 1);\n    }\n    \n    // Legs\n    // Left leg\n    color(color_orange)\n    translate([-10, 10, 0])\n    union() {\n        // Thigh\n        cylinder(h = 15, r = 7);\n        \n        // Lower leg\n        translate([0, 0, 15])\n        cylinder(h = 12, r = 6);\n        \n        // Foot\n        color(color_dark_gray)\n        translate([0, 5, 27])\n        cube([12, 18, 4], center = true);\n    }\n    \n    // Right leg\n    color(color_orange)\n    translate([10, 10, 0])\n    union() {\n        // Thigh\n        cylinder(h = 15, r = 7);\n        \n        // Lower leg\n        translate([0, 0, 15])\n        cylinder(h = 12, r = 6);\n        \n        // Foot\n        color(color_dark_gray)\n        translate([0, 5, 27])\n        cube([12, 18, 4], center = true);\n    }\n    \n    // Tail\n    color(color_orange)\n    translate([0, 18, 15])\n    rotate([30, 0, 0])\n    union() {\n        cylinder(h = 20, r1 = 6, r2 = 4);\n        \n        // Tail club\n        color(color_dark_gray)\n        translate([0, 0, 20])\n        sphere(8);\n        \n        // Tail spikes\n        for(i = [0:3]) {\n            color(color_dark_gray)\n            rotate([0, 0, i * 90])\n            translate([0, 6, 18])\n            rotate([20, 0, 0])\n            cylinder(h = 5, r1 = 2, r2 = 1);\n        }\n    }\n    \n    // Shoulder guards\n    color(color_dark_gray)\n    translate([-18, 0, 25])\n    rotate([0, 90, 0])\n    cylinder(h = 8, r1 = 8, r2 = 6);\n    \n    color(color_dark_gray)\n    translate([18, 0, 25])\n    rotate([0, 90, 0])\n    cylinder(h = 8, r1 = 8, r2 = 6);\n}\n\n// Render the model\nrhyperior();",
    "renders": true
  },
  {
    "pokemon": "tangrowth",
    "openscad_code": "// Tangrowth - Realistic Style, Medium Complexity\n// 3D printable Pokemon model\n\n// Colors\nbody_color = [34/255,139/255,34/255];  // Dark green\nvine_color = [0/255,100/255,0/255];    // Forest green\neye_color = [220/255,220/255,220/255]; // Light gray\nmouth_color = [139/255,69/255,19/255]; // Brown\n\n// Main module\nmodule tangrowth() {\n    // Body\n    color(body_color) {\n        // Central body mass\n        translate([0,0,10]) {\n            sphere(15);\n            cylinder(h=20, r1=15, r2=10, center=true);\n        }\n        \n        // Upper body extension\n        translate([0,0,30]) {\n            sphere(12);\n        }\n    }\n    \n    // Vines\n    color(vine_color) {\n        // Left arm vine\n        translate([-15,0,20]) {\n            rotate([0,0,-30]) {\n                vine(20, 8);\n            }\n        }\n        \n        // Right arm vine\n        translate([15,0,20]) {\n            rotate([0,0,30]) {\n                mirror([1,0,0]) {\n                    vine(20, 8);\n                }\n            }\n        }\n        \n        // Back vines\n        for(i=[0:3]) {\n            rotate([0,0,i*90]) {\n                translate([0,-20,25]) {\n                    rotate([20,0,0]) {\n                        vine(15, 6);\n                    }\n                }\n            }\n        }\n        \n        // Head vines\n        for(i=[0:4]) {\n            rotate([0,0,i*72]) {\n                translate([0,0,40]) {\n                    rotate([30,0,0]) {\n                        vine(12, 5);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Face\n    color(eye_color) {\n        // Eyes\n        translate([-5,8,35]) {\n            sphere(2);\n        }\n        translate([5,8,35]) {\n            sphere(2);\n        }\n        \n        // Mouth\n        color(mouth_color) {\n            translate([0,12,30]) {\n                rotate([90,0,0]) {\n                    cylinder(h=1, r1=3, r2=2);\n                }\n            }\n        }\n    }\n    \n    // Feet\n    color(body_color) {\n        translate([-8,-5,0]) {\n            sphere(8);\n            cylinder(h=10, r=6, center=true);\n        }\n        translate([8,-5,0]) {\n            sphere(8);\n            cylinder(h=10, r=6, center=true);\n        }\n    }\n}\n\n// Vine module with leaves\nmodule vine(length, thickness) {\n    union() {\n        // Main vine\n        cylinder(h=length, r=thickness/2, center=false);\n        \n        // Leaves along vine\n        for(i=[1:3:length]) {\n            translate([0,0,i]) {\n                rotate([90,0,0]) {\n                    // Leaf shape\n                    scale([1,2,0.5]) {\n                        sphere(thickness);\n                    }\n                }\n            }\n        }\n        \n        // End bulb\n        translate([0,0,length]) {\n            sphere(thickness);\n        }\n    }\n}\n\n// Generate model\nscale(1.5) tangrowth();",
    "renders": true
  },
  {
    "pokemon": "electivire",
    "openscad_code": "// Electivire - Realistic Style, Medium Complexity\n// Overall height ~80mm, 3D printable\n\n// Color definitions\ncolor_body = [0.2, 0.2, 0.2];\ncolor_yellow = [1, 0.8, 0];\ncolor_red = [0.8, 0, 0];\ncolor_black = [0.1, 0.1, 0.1];\ncolor_white = [1, 1, 1];\n\n// Main body module\nmodule electivire() {\n    // Body\n    color(color_body)\n    translate([0, 0, 30])\n    scale([1, 0.8, 1.2])\n    sphere(d=30, $fn=32);\n    \n    // Chest pattern\n    color(color_yellow)\n    translate([0, -11, 20])\n    rotate([90, 0, 0])\n    cylinder(h=3, d1=20, d2=15, $fn=6);\n    \n    // Head\n    color(color_body)\n    translate([0, 0, 55])\n    scale([0.9, 0.8, 1])\n    sphere(d=25, $fn=32);\n    \n    // Muzzle\n    color(color_body)\n    translate([0, -10, 50])\n    rotate([30, 0, 0])\n    cylinder(h=10, d1=12, d2=8, $fn=16);\n    \n    // Eyes\n    color(color_red)\n    for(x = [-5, 5])\n    translate([x, -8, 58])\n    rotate([20, 0, 0])\n    scale([1, 1.2, 0.5])\n    sphere(d=4, $fn=16);\n    \n    // Eye pupils\n    color(color_black)\n    for(x = [-5, 5])\n    translate([x, -8.5, 58.5])\n    rotate([20, 0, 0])\n    scale([0.5, 0.8, 0.3])\n    sphere(d=3, $fn=8);\n    \n    // Ears\n    module ear(x) {\n        color(color_body)\n        translate([x, 5, 65])\n        rotate([0, 40 * (x > 0 ? 1 : -1), 0])\n        scale([0.8, 0.3, 2])\n        sphere(d=8, $fn=16);\n        \n        color(color_yellow)\n        translate([x * 1.2, 4, 65])\n        rotate([0, 40 * (x > 0 ? 1 : -1), 0])\n        scale([0.5, 0.2, 1.5])\n        sphere(d=6, $fn=8);\n    }\n    \n    ear(8);\n    ear(-8);\n    \n    // Arms\n    module arm(x) {\n        // Upper arm\n        color(color_body)\n        translate([x * 12, 0, 45])\n        rotate([0, 0, 30 * (x > 0 ? 1 : -1)])\n        cylinder(h=15, d=8, $fn=16);\n        \n        // Lower arm\n        color(color_body)\n        translate([x * 22, -5, 35])\n        rotate([0, 0, 60 * (x > 0 ? 1 : -1)])\n        cylinder(h=12, d=7, $fn=16);\n        \n        // Hand\n        color(color_body)\n        translate([x * 30, -8, 30])\n        sphere(d=10, $fn=16);\n        \n        // Cable on arm\n        color(color_yellow)\n        translate([x * 18, 0, 40])\n        rotate([90, 0, 0])\n        torus(2, 6, 8);\n    }\n    \n    arm(1);\n    arm(-1);\n    \n    // Legs\n    module leg(x) {\n        color(color_body)\n        translate([x * 8, 0, 15])\n        cylinder(h=20, d=10, $fn=16);\n        \n        color(color_body)\n        translate([x * 8, 0, 5])\n        sphere(d=12, $fn=16);\n    }\n    \n    leg(5);\n    leg(-5);\n    \n    // Tail\n    color(color_body)\n    translate([0, 12, 35])\n    rotate([0, 20, 0])\n    scale([1, 0.8, 3])\n    sphere(d=8, $fn=16);\n    \n    // Tail cables\n    color(color_yellow)\n    translate([0, 18, 30])\n    rotate([0, 20, 0])\n    cylinder(h=15, d=3, $fn=8);\n    \n    color(color_yellow)\n    translate([2, 18, 30])\n    rotate([0, 20, 5])\n    cylinder(h=15, d=2, $fn=8);\n    \n    color(color_yellow)\n    translate([-2, 18, 30])\n    rotate([0, 20, -5])\n    cylinder(h=15, d=2, $fn=8);\n    \n    // Back pattern\n    color(color_yellow)\n    translate([0, 10, 45])\n    rotate([90, 0, 0])\n    cylinder(h=2, d1=15, d2=10, $fn=6);\n    \n    // Mouth\n    color(color_black)\n    translate([0, -13, 48])\n    rotate([30, 0, 0])\n    scale([3, 1, 0.5])\n    sphere(d=3, $fn=16);\n}\n\n// Helper module for torus shape\nmodule torus(r1, r2, fn) {\n    rotate_extrude($fn=fn)\n    translate([r2, 0, 0])\n    circle(r=r1, $fn=fn);\n}\n\n// Render the model\nelectivire();",
    "renders": true
  },
  {
    "pokemon": "magmortar",
    "openscad_code": "// Magmortar - Realistic Style, Medium Complexity\n// Approx 80mm tall when printed\n\n$fn = 32;\n\nmodule magmortar_body() {\n    // Main body - red sphere base\n    color([0.85, 0.2, 0.15])\n    translate([0, 0, 30])\n    scale([1.2, 1, 1.2])\n    sphere(25);\n    \n    // Yellow belly marking\n    color([1, 0.8, 0])\n    translate([0, -20, 25])\n    scale([1.5, 0.5, 1.2])\n    sphere(15);\n    \n    // Black neck ring\n    color([0.1, 0.1, 0.1])\n    translate([0, 0, 45])\n    rotate([90, 0, 0])\n    cylinder(h=8, r1=18, r2=20);\n}\n\nmodule magmortar_head() {\n    // Head dome\n    color([0.85, 0.2, 0.15])\n    translate([0, 0, 60])\n    scale([1.1, 0.9, 1.1])\n    sphere(20);\n    \n    // Yellow forehead flame holder\n    color([1, 0.8, 0])\n    translate([0, 0, 75])\n    rotate([90, 0, 0])\n    cylinder(h=5, r1=8, r2=12);\n    \n    // Eyes\n    color([0.2, 0.2, 0.2])\n    translate([-8, 10, 65])\n    sphere(3);\n    translate([8, 10, 65])\n    sphere(3);\n    \n    // Mouth\n    color([0.3, 0.1, 0.1])\n    translate([0, 15, 55])\n    rotate([90, 0, 0])\n    cylinder(h=1, r1=6, r2=0);\n}\n\nmodule magmortar_arms() {\n    // Left arm cannon\n    color([0.85, 0.2, 0.15])\n    translate([-35, 20, 40])\n    rotate([0, 0, 45])\n    cylinder(h=30, r1=10, r2=8);\n    \n    // Left cannon tip\n    color([0.4, 0.4, 0.4])\n    translate([-50, 30, 45])\n    rotate([0, 0, 45])\n    cylinder(h=8, r1=8, r2=6);\n    \n    // Right arm cannon\n    color([0.85, 0.2, 0.15])\n    translate([35, 20, 40])\n    rotate([0, 0, -45])\n    cylinder(h=30, r1=10, r2=8);\n    \n    // Right cannon tip\n    color([0.4, 0.4, 0.4])\n    translate([50, 30, 45])\n    rotate([0, 0, -45])\n    cylinder(h=8, r1=8, r2=6);\n}\n\nmodule magmortar_legs() {\n    // Left leg\n    color([0.85, 0.2, 0.15])\n    translate([-12, -15, 15])\n    rotate([0, 10, 0])\n    cylinder(h=25, r1=10, r2=8);\n    \n    // Left foot\n    color([0.85, 0.2, 0.15])\n    translate([-15, -15, 0])\n    scale([1.5, 2, 1])\n    sphere(8);\n    \n    // Right leg\n    color([0.85, 0.2, 0.15])\n    translate([12, -15, 15])\n    rotate([0, -10, 0])\n    cylinder(h=25, r1=10, r2=8);\n    \n    // Right foot\n    color([0.85, 0.2, 0.15])\n    translate([15, -15, 0])\n    scale([1.5, 2, 1])\n    sphere(8);\n}\n\nmodule magmortar_tail() {\n    // Tail base\n    color([0.85, 0.2, 0.15])\n    translate([0, -25, 25])\n    rotate([0, 90, 0])\n    cylinder(h=30, r1=5, r2=8);\n    \n    // Tail flame\n    color([1, 0.6, 0])\n    translate([0, -45, 30])\n    scale([1, 2, 1])\n    sphere(10);\n}\n\nmodule magmortar_shoulders() {\n    // Left shoulder armor\n    color([0.4, 0.4, 0.4])\n    translate([-25, 25, 45])\n    rotate([0, 0, -30])\n    cylinder(h=15, r1=12, r2=10);\n    \n    // Right shoulder armor\n    color([0.4, 0.4, 0.4])\n    translate([25, 25, 45])\n    rotate([0, 0, 30])\n    cylinder(h=15, r1=12, r2=10);\n}\n\nmodule magmortar_ears() {\n    // Left ear\n    color([0.85, 0.2, 0.15])\n    translate([-15, 5, 70])\n    rotate([0, 0, -30])\n    cylinder(h=15, r1=5, r2=3);\n    \n    // Right ear\n    color([0.85, 0.2, 0.15])\n    translate([15, 5, 70])\n    rotate([0, 0, 30])\n    cylinder(h=15, r1=5, r2=3);\n}\n\n// Assemble the complete Magmortar\nmagmortar_body();\nmagmortar_head();\nmagmortar_arms();\nmagmortar_legs();\nmagmortar_tail();\nmagmortar_shoulders();\nmagmortar_ears();",
    "renders": true
  },
  {
    "pokemon": "togekiss",
    "openscad_code": "// Togekiss OpenSCAD Model - Realistic Style, Medium Complexity\n\n// Parameters for sizing\nbody_r = 20;\nhead_r = 15;\nwing_w = 25;\nwing_h = 20;\ntail_len = 30;\nscale = 2;\n\n// Main colors\ncolor_body = [1, 0.95, 0.9];      // Off-white\ncolor_accents = [0.95, 0.2, 0.4]; // Red triangles\ncolor_details = [0.1, 0.1, 0.1];  // Black eyes\n\nmodule togekiss() {\n    // Main body - egg shaped\n    color(color_body) {\n        scale([1, 1.2, 1.3]) sphere(r=body_r, $fn=50);\n    }\n    \n    // Head section\n    translate([0, 0, body_r*1.2]) {\n        color(color_body) {\n            sphere(r=head_r, $fn=40);\n        }\n        \n        // Eyes\n        for(side = [-1, 1]) {\n            translate([side * head_r * 0.5, -head_r * 0.7, head_r * 0.3]) {\n                color(color_details) {\n                    scale([1.2, 1, 1]) sphere(r=3, $fn=20);\n                }\n            }\n        }\n        \n        // Beak\n        translate([0, -head_r * 0.9, -head_r * 0.2]) {\n            rotate([30, 0, 0]) {\n                color([0.9, 0.7, 0.5]) {\n                    cylinder(h=5, r1=3, r2=1, $fn=8);\n                }\n            }\n        }\n    }\n    \n    // Wings\n    for(side = [-1, 1]) {\n        translate([side * body_r * 0.8, 0, body_r * 0.5]) {\n            rotate([0, 0, side * 20]) {\n                rotate([0, 45, 0]) {\n                    color(color_body) {\n                        scale([1, 0.3, 1]) sphere(r=wing_w, $fn=20);\n                    }\n                    \n                    // Wing triangles pattern\n                    for(i = [0:2]) {\n                        translate([i * 5 - 5, -wing_w * 0.3, wing_h * 0.2]) {\n                            rotate([90, 0, 90]) {\n                                color(color_accents) {\n                                    scale([0.3, 0.3, 1]) cylinder(h=8, r1=4, r2=0, $fn=3);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Triangular tail pattern\n    for(i = [0:2]) {\n        angle = i * 120;\n        rotate([0, 0, angle]) {\n            translate([0, -body_r * 1.5, -body_r * 0.5]) {\n                color(color_accents) {\n                    rotate([0, 0, 180]) {\n                        scale([1, 1, 0.5]) cylinder(h=tail_len, r1=10, r2=0, $fn=3);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Feet\n    for(side = [-1, 1]) {\n        translate([side * body_r * 0.4, body_r * 0.8, -body_r * 1.2]) {\n            color(color_body) {\n                scale([0.5, 0.8, 2]) sphere(r=3, $fn=10);\n            }\n        }\n    }\n}\n\n// Main assembly\nscale([scale, scale, scale]) {\n    togekiss();\n}",
    "renders": true
  },
  {
    "pokemon": "yanmega",
    "openscad_code": "// Yanmega Pokemon - Realistic Style, Medium Complexity\n// Approx 80mm wingspan, 65mm body length\n\n// Colors\ncolor_body = [0.1, 0.3, 0.2];      // Dark green\ncolor_wing = [0.7, 0.8, 0.9];      // Light blue-gray\ncolor_eye = [0.9, 0.9, 0.1];       // Yellow\ncolor_detail = [0.8, 0.2, 0.2];    // Red\ncolor_black = [0.1, 0.1, 0.1];\n\n// Main body module\nmodule yanmega_body() {\n    color(color_body)\n    union() {\n        // Main thorax segment\n        translate([0, 0, 10])\n            scale([1.2, 0.8, 1])\n            sphere(d=25, $fn=32);\n        \n        // Abdomen\n        translate([0, -20, 5])\n            scale([0.8, 1.5, 0.8])\n            sphere(d=30, $fn=32);\n        \n        // Head segment\n        translate([0, 15, 15])\n            scale([1.1, 0.7, 0.8])\n            sphere(d=20, $fn=32);\n    }\n}\n\n// Wing module\nmodule wing(left_right = 1) {\n    color(color_wing)\n    mirror([left_right, 0, 0])\n    union() {\n        // Main wing blade\n        translate([0, 0, 30])\n            rotate([0, 0, -30])\n            linear_extrude(height=1.5)\n                polygon(points=[\n                    [0, 0], [35, -15], [25, 5], [30, 25], [15, 35], [5, 30], [0, 20]\n                ]);\n        \n        // Secondary wing\n        translate([5, 10, 29])\n            rotate([0, 0, -45])\n            linear_extrude(height=1.2)\n                polygon(points=[\n                    [0, 0], [20, -8], [15, 5], [18, 15], [8, 20], [2, 15]\n                ]);\n    }\n}\n\n// Eye module\nmodule eye() {\n    color(color_eye)\n    union() {\n        // Eye spheres\n        translate([8, 18, 20])\n            sphere(d=6, $fn=16);\n        translate([-8, 18, 20])\n            sphere(d=6, $fn=16);\n        \n        // Eye stalks\n        translate([8, 18, 20])\n            rotate([0, -30, 0])\n            cylinder(h=8, d1=4, d2=6, $fn=16);\n        translate([-8, 18, 20])\n            rotate([0, -30, 0])\n            cylinder(h=8, d1=4, d2=6, $fn=16);\n    }\n    \n    // Pupils\n    color(color_black)\n    union() {\n        translate([8, 20, 22])\n            sphere(d=2.5, $fn=12);\n        translate([-8, 20, 22])\n            sphere(d=2.5, $fn=12);\n    }\n}\n\n// Leg modules\nmodule legs() {\n    color(color_body)\n    for(side = [-1, 1]) {\n        // Front legs\n        translate([side * 12, 10, 8])\n            rotate([0, 90, 0])\n            cylinder(h=15, d1=3, d2=2, $fn=8);\n        \n        // Middle legs\n        translate([side * 15, -5, 8])\n            rotate([0, 90, 0])\n            cylinder(h=18, d1=3, d2=2, $fn=8);\n        \n        // Rear legs\n        translate([side * 12, -25, 8])\n            rotate([0, 90, 0])\n            cylinder(h=20, d1=3, d2=2, $fn=8);\n    }\n}\n\n// Tail details\nmodule tail_details() {\n    color(color_detail)\n    for(i = [1:3]) {\n        translate([0, -35 + i*8, 8])\n            scale([1.2 - i*0.3, 0.3, 0.8 - i*0.2])\n            sphere(d=15, $fn=16);\n    }\n}\n\n// Markings on back\nmodule back_markings() {\n    color(color_detail)\n    union() {\n        // Central stripe\n        translate([0, 0, 25])\n            scale([0.2, 1.5, 0.1])\n            cube([10, 30, 3], center=true);\n        \n        // Side markings\n        for(side = [-1, 1]) {\n            translate([side * 10, -5, 25])\n                scale([0.3, 0.8, 0.1])\n                cube([8, 15, 3], center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    yanmega_body();\n    wing(1);    // Left wing\n    wing(-1);   // Right wing\n    eye();\n    legs();\n    tail_details();\n    back_markings();\n}",
    "renders": true
  },
  {
    "pokemon": "leafeon",
    "openscad_code": "// Leafeon OpenSCAD Model - Realistic Style, Medium Complexity\n// Overall height ~80mm\n\n$fn = 32;\n\n// Colors\ncolor_body = \"#7bc87b\";\ncolor_accents = \"#4a9a4a\";\ncolor_markings = \"#a5d6a7\";\ncolor_eyes = \"#4a6b8a\";\ncolor_nose = \"#2a5a2a\";\n\n// Main body module\nmodule body() {\n    color(color_body) {\n        // Torso\n        translate([0, 0, 20]) {\n            scale([1.2, 0.8, 1.5])\n                sphere(d=30);\n        }\n        \n        // Chest\n        translate([0, -8, 10]) {\n            scale([0.8, 0.5, 1])\n                sphere(d=25);\n        }\n        \n        // Rump\n        translate([0, 12, 18]) {\n            scale([1, 0.9, 1.1])\n                sphere(d=28);\n        }\n    }\n}\n\n// Head module\nmodule head() {\n    color(color_body) {\n        // Main head\n        translate([0, -15, 38]) {\n            scale([1.1, 1.3, 1])\n                sphere(d=28);\n        }\n        \n        // Snout\n        translate([0, -25, 35]) {\n            scale([0.6, 0.8, 0.5])\n                sphere(d=20);\n        }\n    }\n}\n\n// Ears module\nmodule ears() {\n    for(side = [-1, 1]) {\n        color(color_body) {\n            translate([side * 12, -18, 48]) {\n                rotate([0, side * 15, 0]) {\n                    // Ear base\n                    cylinder(h=15, d1=8, d2=12);\n                    \n                    // Ear tip\n                    translate([0, 0, 15]) {\n                        rotate([0, 20, 0]) {\n                            scale([0.3, 1, 1])\n                                cylinder(h=12, d1=10, d2=0);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Inner ear\n        color(color_markings) {\n            translate([side * 12, -18, 48]) {\n                rotate([0, side * 15, 0]) {\n                    translate([0, 0, 0.5]) {\n                        scale([0.6, 0.8, 0.8])\n                            cylinder(h=14, d1=6, d2=8);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Eyes module\nmodule eyes() {\n    for(side = [-1, 1]) {\n        color(color_eyes) {\n            translate([side * 7, -22, 38]) {\n                scale([1, 0.6, 0.5])\n                    sphere(d=6);\n            }\n        }\n        \n        // Eye highlight\n        color(\"white\") {\n            translate([side * 7.5, -21.5, 39]) {\n                sphere(d=2);\n            }\n        }\n    }\n}\n\n// Nose module\nmodule nose() {\n    color(color_nose) {\n        translate([0, -28, 34]) {\n            sphere(d=3);\n        }\n    }\n}\n\n// Leaf tail\nmodule tail() {\n    color(color_accents) {\n        translate([0, 22, 25]) {\n            rotate([0, 0, 10]) {\n                // Tail base\n                cylinder(h=25, d1=10, d2=5);\n                \n                // Leaf blades\n                for(i = [0:3]) {\n                    rotate([0, 0, i * 90]) {\n                        translate([0, 0, 22]) {\n                            rotate([20, 0, 0]) {\n                                scale([0.2, 1, 2])\n                                    cylinder(h=15, d1=8, d2=0);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Legs module\nmodule legs() {\n    for(side = [-1, 1]) {\n        // Front legs\n        color(color_body) {\n            translate([side * 8, -8, 10]) {\n                cylinder(h=20, d=8);\n                \n                // Paw\n                translate([0, 0, -10]) {\n                    sphere(d=10);\n                    \n                    // Toes\n                    for(toe = [0:2]) {\n                        rotate([0, 0, toe * 60 - 60]) {\n                            translate([0, 5, 0]) {\n                                sphere(d=4);\n                            }\n                        }\n                    }\n                }\n            }\n            \n            // Back legs\n            translate([side * 8, 12, 12]) {\n                cylinder(h=22, d=9);\n                \n                // Paw\n                translate([0, 0, -11]) {\n                    sphere(d=11);\n                    \n                    // Toes\n                    for(toe = [0:2]) {\n                        rotate([0, 0, toe * 60 - 60]) {\n                            translate([0, 5.5, 0]) {\n                                sphere(d=4.5);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Leaf details on body\nmodule leaf_details() {\n    color(color_accents) {\n        // Back leaves\n        translate([0, 5, 35]) {\n            rotate([0, 0, 45]) {\n                scale([0.3, 1.5, 0.1])\n                    cylinder(h=20, d1=10, d2=0);\n            }\n        }\n        \n        translate([0, 8, 33]) {\n            rotate([0, 0, -30]) {\n                scale([0.3, 1.5, 0.1])\n                    cylinder(h=20, d1=10, d2=0);\n            }\n        }\n        \n        // Forehead leaf\n        translate([0, -20, 48]) {\n            rotate([0, 0, 0]) {\n                scale([0.2, 1.2, 0.1])\n                    cylinder(h=15, d1=8, d2=0);\n            }\n        }\n    }\n}\n\n// Chest marking\nmodule chest_marking() {\n    color(color_markings) {\n        translate([0, -10, 25]) {\n            scale([1, 0.5, 0.1])\n                sphere(d=15);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    ears();\n    eyes();\n    nose();\n    tail();\n    legs();\n    leaf_details();\n    chest_marking();\n}",
    "renders": true
  },
  {
    "pokemon": "glaceon",
    "openscad_code": "// Glaceon - Realistic Medium Complexity OpenSCAD Model\n// Overall height: 80mm\n\n// Colors\ncolor_cyan = [0.2,0.7,0.9];\ncolor_dark_cyan = [0.1,0.5,0.7];\ncolor_light_blue = [0.7,0.9,1];\ncolor_white = [1,1,1];\ncolor_black = [0.1,0.1,0.1];\n\nmodule glaceon() {\n    // Body\n    color(color_cyan) {\n        union() {\n            // Main body\n            translate([0,0,25]) scale([1.2,1,1.5]) sphere(r=15, $fn=32);\n            \n            // Chest fluff\n            color(color_white) {\n                translate([0,-14,15]) scale([0.8,0.3,1.2]) sphere(r=12, $fn=24);\n            }\n            \n            // Legs\n            for(x=[-10,10]) {\n                // Front legs\n                translate([x,-8,5]) rotate([0,15,0]) {\n                    color(color_dark_cyan) cylinder(h=20, r1=4, r2=3, $fn=16);\n                    translate([0,0,20]) sphere(r=4, $fn=16);\n                }\n                \n                // Back legs\n                translate([x*0.8,12,8]) rotate([0,-15,0]) {\n                    color(color_dark_cyan) cylinder(h=22, r1=4.5, r2=3.5, $fn=16);\n                    translate([0,0,22]) sphere(r=4.5, $fn=16);\n                }\n            }\n        }\n    }\n    \n    // Head\n    color(color_cyan) {\n        translate([0,-25,45]) scale([0.9,0.8,1.1]) sphere(r=12, $fn=32);\n    }\n    \n    // Ears\n    for(x=[-8,8]) {\n        color(color_cyan) {\n            translate([x,-30,55]) rotate([15,0,x*-5]) {\n                difference() {\n                    scale([0.4,0.2,1.5]) sphere(r=10, $fn=16);\n                    translate([0,0,-5]) cube([20,20,20], center=true);\n                }\n            }\n        }\n        \n        // Inner ear\n        color(color_light_blue) {\n            translate([x,-29,54]) rotate([15,0,x*-5]) {\n                scale([0.2,0.1,1.1]) sphere(r=8, $fn=16);\n            }\n        }\n    }\n    \n    // Tail\n    color(color_cyan) {\n        translate([0,15,35]) rotate([30,0,0]) {\n            hull() {\n                sphere(r=6, $fn=16);\n                translate([0,0,20]) scale([0.7,0.5,1.5]) sphere(r=6, $fn=16);\n                translate([0,0,40]) scale([0.5,0.3,1.2]) sphere(r=6, $fn=16);\n            }\n        }\n    }\n    \n    // Diamond patterns on head\n    color(color_light_blue) {\n        translate([0,-32,50]) rotate([0,0,45]) cube([4,4,1], center=true);\n        translate([0,-34,48]) rotate([0,0,45]) cube([3,3,1], center=true);\n    }\n    \n    // Eyes\n    for(x=[-6,6]) {\n        color(color_white) {\n            translate([x,-30,47]) scale([1,1.2,0.5]) sphere(r=3, $fn=16);\n        }\n        \n        color(color_black) {\n            translate([x,-31,47.5]) sphere(r=1.5, $fn=8);\n        }\n        \n        color(color_light_blue) {\n            translate([x-1,-30.5,48]) sphere(r=0.5, $fn=8);\n        }\n    }\n    \n    // Nose\n    color(color_black) {\n        translate([0,-32,45]) sphere(r=1, $fn=8);\n    }\n    \n    // Mouth\n    color(color_black) {\n        translate([0,-33,43]) rotate([90,0,0]) cylinder(h=0.5, r1=1.5, r2=1.5, $fn=8);\n    }\n    \n    // Neck diamond\n    color(color_light_blue) {\n        translate([0,-18,40]) rotate([0,0,45]) cube([5,5,1.5], center=true);\n    }\n    \n    // Back diamonds\n    for(i=[-1,0,1]) {\n        color(color_light_blue) {\n            translate([0,i*8+5,35+i*5]) rotate([0,0,45]) cube([4,4,1], center=true);\n        }\n    }\n    \n    // Leg diamonds\n    for(x=[-10,10]) {\n        color(color_light_blue) {\n            translate([x,-5,15]) rotate([0,0,45]) cube([2.5,2.5,0.5], center=true);\n            translate([x*0.8,12,18]) rotate([0,0,45]) cube([3,3,0.5], center=true);\n        }\n    }\n}\n\n// Render the model\nglaceon();",
    "renders": true
  },
  {
    "pokemon": "gliscor",
    "openscad_code": "// Gliscor - Realistic Style, Medium Complexity\n// Size: ~75mm wingspan, 3D printable\n\n// Main colors\ncolor_body = \"#4A3B31\";\ncolor_wings = \"#6B5B47\";\ncolor_accents = \"#8B7355\";\ncolor_eyes = \"#FF4500\";\ncolor_markings = \"#E6D3A3\";\n\n// Overall scale\nscale_factor = 0.4;\n\n// Main body module\nmodule body() {\n    color(color_body)\n    union() {\n        // Torso\n        translate([0, 0, 10])\n            scale([1.2, 0.8, 1])\n            sphere(d=30);\n        \n        // Abdomen\n        translate([0, -15, 5])\n            scale([1, 1.2, 0.8])\n            sphere(d=25);\n        \n        // Head base\n        translate([0, 20, 15])\n            scale([0.9, 0.7, 0.8])\n            sphere(d=25);\n    }\n}\n\n// Pincers module\nmodule pincers() {\n    color(color_body)\n    union() {\n        // Left pincer\n        translate([-15, 25, 15])\n            rotate([0, 0, -30])\n            union() {\n                cylinder(h=15, d1=8, d2=5);\n                translate([0, 7, 0])\n                    rotate([90, 0, 0])\n                    cylinder(h=12, d=6);\n            }\n        \n        // Right pincer\n        mirror([1, 0, 0])\n            translate([-15, 25, 15])\n            rotate([0, 0, 30])\n            union() {\n                cylinder(h=15, d1=8, d2=5);\n                translate([0, 7, 0])\n                    rotate([90, 0, 0])\n                    cylinder(h=12, d=6);\n            }\n    }\n}\n\n// Ears module\nmodule ears() {\n    color(color_body)\n    union() {\n        // Left ear\n        translate([-8, 30, 25])\n            rotate([0, 30, -20])\n            scale([0.5, 2, 0.3])\n            sphere(d=10);\n        \n        // Right ear\n        mirror([1, 0, 0])\n            translate([-8, 30, 25])\n            rotate([0, 30, 20])\n            scale([0.5, 2, 0.3])\n            sphere(d=10);\n    }\n}\n\n// Eyes module\nmodule eyes() {\n    color(color_eyes)\n    union() {\n        // Left eye\n        translate([-6, 22, 22])\n            rotate([0, 0, 15])\n            scale([1, 1.2, 0.5])\n            sphere(d=5);\n        \n        // Right eye\n        mirror([1, 0, 0])\n            translate([-6, 22, 22])\n            rotate([0, 0, -15])\n            scale([1, 1.2, 0.5])\n            sphere(d=5);\n        \n        // Eye markings\n        color(color_markings)\n        union() {\n            translate([-10, 20, 20])\n                cube([2, 8, 1]);\n            mirror([1, 0, 0])\n                translate([-10, 20, 20])\n                cube([2, 8, 1]);\n        }\n    }\n}\n\n// Legs module\nmodule legs() {\n    color(color_body)\n    union() {\n        // Front legs\n        for(side = [-1, 1]) {\n            translate([side * 12, 10, 5])\n                rotate([0, 0, side * 20])\n                union() {\n                    cylinder(h=15, d=4);\n                    translate([0, 0, -8])\n                        sphere(d=6);\n                }\n        }\n        \n        // Back legs\n        for(side = [-1, 1]) {\n            translate([side * 10, -15, 5])\n                rotate([0, 0, side * -30])\n                union() {\n                    cylinder(h=18, d=4);\n                    translate([0, 0, -10])\n                        sphere(d=6);\n                }\n        }\n    }\n}\n\n// Wings module\nmodule wings() {\n    color(color_wings)\n    union() {\n        // Left wing\n        translate([-20, 0, 15])\n            rotate([0, 0, -30])\n            union() {\n                // Main wing\n                scale([2, 1, 0.1])\n                sphere(d=30);\n                \n                // Wing segments\n                for(i = [1:3]) {\n                    translate([-i * 8, i * 3, 0])\n                        scale([0.8, 0.5, 0.1])\n                        sphere(d=15);\n                }\n            }\n        \n        // Right wing\n        mirror([1, 0, 0])\n            translate([-20, 0, 15])\n            rotate([0, 0, 30])\n            union() {\n                // Main wing\n                scale([2, 1, 0.1])\n                sphere(d=30);\n                \n                // Wing segments\n                for(i = [1:3]) {\n                    translate([-i * 8, i * 3, 0])\n                        scale([0.8, 0.5, 0.1])\n                        sphere(d=15);\n                }\n            }\n    }\n}\n\n// Tail module\nmodule tail() {\n    color(color_body)\n    union() {\n        // Main tail\n        translate([0, -25, 12])\n            rotate([0, 0, 180])\n            cylinder(h1=15, h2=0, r1=6, r2=2);\n        \n        // Tail segments\n        for(i = [1:3]) {\n            translate([0, -25 - i * 5, 12 - i * 2])\n                rotate([0, 0, 180])\n                cylinder(h1=5, h2=0, r1=5 - i, r2=3 - i * 0.5);\n        }\n        \n        // Tail stinger\n        color(color_accents)\n        translate([0, -45, 5])\n            rotate([0, 0, 180])\n            cylinder(h1=8, h2=0, r1=3, r2=0.5);\n    }\n}\n\n// Body markings\nmodule markings() {\n    color(color_markings)\n    union() {\n        // Back markings\n        translate([0, 0, 25])\n            scale([1, 1.5, 0.1])\n            sphere(d=20);\n        \n        // Wing markings\n        for(side = [-1, 1]) {\n            translate([side * 30, 5, 15])\n                scale([0.3, 0.3, 0.1])\n                sphere(d=15);\n            translate([side * 35, 10, 15])\n                scale([0.2, 0.2, 0.1])\n                sphere(d=10);\n        }\n    }\n}\n\n// Assembly\nscale([scale_factor, scale_factor, scale_factor])\nunion() {\n    body();\n    pincers();\n    ears();\n    eyes();\n    legs();\n    wings();\n    tail();\n    markings();\n}",
    "renders": true
  },
  {
    "pokemon": "mamoswine",
    "openscad_code": "// Mamoswine Realistic Style - Medium Complexity\n// 3D printable model using basic OpenSCAD primitives\n\n// Main color scheme\nbody_color = [0.8, 0.7, 0.6];  // Brown fur\ntusk_color = [0.9, 0.9, 0.85]; // Ivory tusks\nblue_color = [0.2, 0.4, 0.6];  // Blue accents\neye_color = [0.1, 0.1, 0.1];   // Black eyes\n\n// Body dimensions\nbody_length = 40;\nbody_height = 25;\nbody_width = 30;\n\n// Create the main body\nmodule body() {\n    color(body_color)\n    union() {\n        // Main torso\n        translate([0, 0, body_height/2])\n            scale([1.2, 1, 0.8])\n            sphere(d=body_width);\n        \n        // Lower body extension\n        translate([0, -10, 5])\n            cube([body_width*0.8, body_length*0.6, body_height*0.4], center=true);\n        \n        // Rear hump\n        translate([-body_length/4, -body_length/3, body_height*0.7])\n            sphere(d=body_width*0.7);\n    }\n}\n\n// Head with snout\nmodule head() {\n    color(body_color)\n    union() {\n        // Main head\n        translate([0, body_length/2 + 8, body_height*0.8])\n            sphere(d=body_width*0.7);\n        \n        // Snout\n        translate([0, body_length/2 + 18, body_height*0.7])\n            scale([0.8, 1.5, 0.6])\n            sphere(d=body_width*0.5);\n        \n        // Nose\n        color(blue_color)\n        translate([0, body_length/2 + 22, body_height*0.65])\n            sphere(d=body_width*0.3);\n    }\n}\n\n// Ears module\nmodule ear(x_pos, rot) {\n    color(body_color)\n    translate([x_pos, body_length/2 + 5, body_height*1.1])\n        rotate([0, rot, 0])\n        union() {\n            // Ear base\n            cylinder(h=8, d1=6, d2=4);\n            // Ear tip\n            translate([0, 0, 8])\n                sphere(d=4);\n        }\n}\n\n// Eyes module\nmodule eye(x_pos) {\n    color(eye_color)\n    translate([x_pos, body_length/2 + 12, body_height*0.9])\n        sphere(d=2);\n}\n\n// Tusks module\nmodule tusk(x_pos, rot) {\n    color(tusk_color)\n    translate([x_pos, body_length/2 + 15, body_height*0.5])\n        rotate([rot, 0, 0])\n        cylinder(h=15, d1=3, d2=6);\n}\n\n// Leg module\nmodule leg(x_pos, y_pos, scale_factor) {\n    color(body_color)\n    translate([x_pos, y_pos, body_height*0.3])\n        scale([scale_factor, scale_factor, 1])\n        union() {\n            // Upper leg\n            cylinder(h=10, d=8);\n            // Lower leg\n            translate([0, 0, 5])\n                cylinder(h=12, d=6);\n            // Hoof\n            color([0.3, 0.3, 0.3])\n            translate([0, 0, 11])\n                cylinder(h=3, d=8);\n        }\n}\n\n// Tail module\nmodule tail() {\n    color(body_color)\n    translate([0, -body_length/2 - 5, body_height*0.7])\n        rotate([30, 0, 0])\n        union() {\n            // Tail base\n            cylinder(h=8, d=10);\n            // Tail tuft\n            color(blue_color)\n            translate([0, 0, 8])\n                sphere(d=8);\n        }\n}\n\n// Blue markings on face\nmodule face_markings() {\n    color(blue_color)\n    union() {\n        // Forehead marking\n        translate([0, body_length/2 + 10, body_height*1.1])\n            rotate([90, 0, 0])\n            cylinder(h=1, d=12);\n        \n        // Eye markings\n        for(side = [-1, 1]) {\n            translate([side * 8, body_length/2 + 10, body_height*0.9])\n                rotate([90, 0, 0])\n                cylinder(h=1, d=6);\n        }\n    }\n}\n\n// Assemble the complete Mamoswine\nunion() {\n    body();\n    head();\n    \n    // Ears\n    ear(-8, -20);\n    ear(8, 20);\n    \n    // Eyes\n    eye(-5);\n    eye(5);\n    \n    // Tusks\n    tusk(-10, -30);\n    tusk(10, 30);\n    \n    // Legs - front and back pairs\n    leg(-12, body_length/2 - 5, 0.9);\n    leg(12, body_length/2 - 5, 0.9);\n    leg(-12, -body_length/2 + 5, 1);\n    leg(12, -body_length/2 + 5, 1);\n    \n    // Tail\n    tail();\n    \n    // Facial markings\n    face_markings();\n}",
    "renders": true
  },
  {
    "pokemon": "porygon_z",
    "openscad_code": "// Porygon-Z OpenSCAD Model\n// Medium complexity realistic style\n\n$fn = 32;\nbody_color = \"#FF1493\";\ndetail_color = \"#1E90FF\";\neye_color = \"#00008B\";\nline_color = \"#4169E1\";\n\nmodule head() {\n    // Main head block\n    color(body_color)\n    translate([0, 0, 30])\n    cube([25, 20, 18], center=true);\n    \n    // Eyes\n    color(eye_color)\n    translate([-8, 7, 40])\n    sphere(r=3);\n    \n    color(eye_color)\n    translate([8, 7, 40])\n    sphere(r=3);\n    \n    // Blue beak\n    color(detail_color)\n    translate([0, 12, 35])\n    rotate([30, 0, 0])\n    cube([8, 3, 6], center=true);\n    \n    // Head detail lines\n    color(line_color)\n    translate([0, 0, 40])\n    cube([28, 2, 1], center=true);\n    \n    color(line_color)\n    translate([0, 5, 40])\n    cube([28, 2, 1], center=true);\n}\n\nmodule torso() {\n    // Main body\n    color(body_color)\n    translate([0, 0, 15])\n    cube([30, 25, 30], center=true);\n    \n    // Blue chest plate\n    color(detail_color)\n    translate([0, 0, 22])\n    cube([28, 20, 5], center=true);\n    \n    // Side details\n    for(i = [-1, 1]) {\n        color(line_color)\n        translate([i * 15, 0, 15])\n        cube([2, 25, 30], center=true);\n    }\n}\n\nmodule arms() {\n    for(side = [-1, 1]) {\n        // Upper arm\n        color(body_color)\n        translate([side * 18, 0, 25])\n        rotate([0, 0, side * 20])\n        cube([10, 8, 8], center=true);\n        \n        // Lower arm\n        color(body_color)\n        translate([side * 26, 0, 20])\n        rotate([0, 0, side * 45])\n        cube([12, 6, 6], center=true);\n        \n        // Hand\n        color(detail_color)\n        translate([side * 34, 0, 15])\n        cube([6, 8, 6], center=true);\n    }\n}\n\nmodule legs() {\n    for(side = [-1, 1]) {\n        // Upper leg\n        color(body_color)\n        translate([side * 8, 0, 5])\n        rotate([0, 0, side * 10])\n        cube([8, 10, 12], center=true);\n        \n        // Lower leg\n        color(body_color)\n        translate([side * 10, 0, -5])\n        cube([8, 8, 10], center=true);\n        \n        // Foot\n        color(detail_color)\n        translate([side * 10, 0, -12])\n        cube([12, 10, 4], center=true);\n    }\n}\n\nmodule tail() {\n    // Tail segments\n    color(body_color)\n    translate([0, -15, 25])\n    cube([10, 12, 8], center=true);\n    \n    color(detail_color)\n    translate([0, -20, 25])\n    cube([8, 8, 6], center=true);\n    \n    color(body_color)\n    translate([0, -25, 25])\n    cube([6, 6, 4], center=true);\n}\n\nmodule floating_parts() {\n    // Floating head piece\n    color(line_color)\n    translate([0, 20, 45])\n    cube([30, 3, 3], center=true);\n    \n    // Wing-like structures\n    for(side = [-1, 1]) {\n        color(detail_color)\n        translate([side * 25, 0, 35])\n        rotate([0, 0, side * 30])\n        cube([15, 3, 8], center=true);\n    }\n}\n\n// Assemble the model\nunion() {\n    head();\n    torso();\n    arms();\n    legs();\n    tail();\n    floating_parts();\n}",
    "renders": true
  },
  {
    "pokemon": "gallade",
    "openscad_code": "// Gallade - Realistic Style, Medium Complexity\n// Designed for 3D printing with no overhangs\n\nmodule gallade() {\n    color(\"white\")\n    union() {\n        // Head\n        translate([0, 0, 45])\n        rotate([0, 0, 0])\n        union() {\n            // Main head shape\n            scale([1.2, 1.1, 1.3])\n            sphere(8);\n            \n            // Crest\n            translate([0, 0, 9])\n            scale([0.8, 0.3, 2])\n            sphere(6);\n            \n            // Blade-like ears\n            translate([7, 0, 5])\n            rotate([0, 0, 30])\n            scale([0.3, 2, 0.1])\n            cube([8, 1, 8], center=true);\n            \n            translate([-7, 0, 5])\n            rotate([0, 0, -30])\n            scale([0.3, 2, 0.1])\n            cube([8, 1, 8], center=true);\n        }\n        \n        // Face details\n        translate([0, 0, 45])\n        color(\"darkblue\")\n        union() {\n            // Eyes\n            translate([3, 4, 3])\n            scale([1, 0.5, 0.3])\n            sphere(2);\n            \n            translate([-3, 4, 3])\n            scale([1, 0.5, 0.3])\n            sphere(2);\n            \n            // Mouth line\n            translate([0, 6, 0])\n            rotate([90, 0, 0])\n            cylinder(h=0.5, r=2);\n        }\n        \n        // Torso\n        color(\"white\")\n        translate([0, 0, 25])\n        scale([1.2, 1.5, 2])\n        sphere(10);\n        \n        // Chest armor\n        color(\"darkgreen\")\n        translate([0, 5, 30])\n        scale([1.5, 0.3, 1.8])\n        sphere(8);\n        \n        // Arms\n        module arm(side) {\n            translate([side * 12, 0, 30])\n            rotate([0, 0, side * -20])\n            union() {\n                // Upper arm\n                color(\"white\")\n                rotate([90, 0, 90])\n                cylinder(h=12, r=3, center=true);\n                \n                // Forearm\n                translate([side * 8, 0, -6])\n                rotate([90, 0, 90])\n                cylinder(h=10, r=2.5, center=true);\n                \n                // Blade\n                color(\"darkgreen\")\n                translate([side * 15, 0, -12])\n                rotate([0, 0, side * -30])\n                scale([0.2, 3, 0.8])\n                cube([20, 1, 5], center=true);\n            }\n        }\n        \n        arm(1);\n        arm(-1);\n        \n        // Legs\n        module leg(side) {\n            translate([side * 5, 0, 15])\n            union() {\n                // Thigh\n                color(\"white\")\n                rotate([90, 0, 0])\n                cylinder(h=15, r=3.5);\n                \n                // Lower leg\n                translate([0, 0, -15])\n                cylinder(h=15, r=3);\n                \n                // Foot\n                color(\"darkgreen\")\n                translate([0, 4, -30])\n                scale([1.5, 2, 0.5])\n                sphere(4);\n            }\n        }\n        \n        leg(1);\n        leg(-1);\n        \n        // Cape-like back\n        color(\"darkgreen\")\n        translate([0, -8, 25])\n        rotate([20, 0, 0])\n        scale([2, 0.2, 3])\n        sphere(12);\n    }\n}\n\n// Scale to reasonable 3D printing size (80mm height)\nscale(0.8)\ngallade();",
    "renders": true
  },
  {
    "pokemon": "probopass",
    "openscad_code": "// Probopass realistic style - OpenSCAD code\n// 3D printable model with medium complexity\n\n// Constants\n$fn = 32;\nbody_size = 40;\nnose_length = 20;\nmustache_count = 3;\nhat_height = 15;\neye_radius = 4;\nmini_nose_size = 8;\n\n// Main module\nmodule probopass() {\n    union() {\n        // Main body (blue-gray rock)\n        color([0.4, 0.5, 0.6])\n        difference() {\n            sphere(d = body_size);\n            // Eye sockets\n            translate([10, 12, 5]) rotate([0, 90, 0]) cylinder(h = 15, r = eye_radius, center = true);\n            translate([10, -12, 5]) rotate([0, 90, 0]) cylinder(h = 15, r = eye_radius, center = true);\n            // Nose hole\n            translate([body_size/2, 0, 0]) rotate([0, 90, 0]) cylinder(h = 25, r = 6, center = true);\n        }\n        \n        // Eyes (white with black pupils)\n        color([1, 1, 1])\n        translate([body_size/2 - 2, 12, 5]) sphere(r = eye_radius - 1);\n        translate([body_size/2 - 2, -12, 5]) sphere(r = eye_radius - 1);\n        \n        color([0, 0, 0])\n        translate([body_size/2, 12, 5]) sphere(r = 2);\n        translate([body_size/2, -12, 5]) sphere(r = 2);\n        \n        // Large red nose\n        color([0.8, 0.2, 0.2])\n        translate([body_size/2 + nose_length/2, 0, 0]) \n            rotate([0, 90, 0]) cylinder(h = nose_length, r1 = 10, r2 = 8);\n        \n        // Mini noses (3 per side)\n        for (i = [-1:1]) {\n            // Left side mini noses\n            color([0.7, 0.3, 0.3])\n            translate([-body_size/4 - 5, i * 15, 5 + i * 5]) \n                rotate([0, -30, 0]) cylinder(h = mini_nose_size, r1 = 4, r2 = 3);\n            \n            // Right side mini noses\n            color([0.7, 0.3, 0.3])\n            translate([-body_size/4 - 5, i * 15, -5 - i * 5]) \n                rotate([0, -30, 0]) cylinder(h = mini_nose_size, r1 = 4, r2 = 3);\n        }\n        \n        // Magnetic mustache (gray steel)\n        color([0.5, 0.5, 0.5])\n        for (i = [0:mustache_count-1]) {\n            angle = i * 30 - 30;\n            // Top mustache\n            translate([body_size/4, 0, body_size/4]) \n                rotate([0, angle, 0]) \n                translate([0, 0, body_size/4]) \n                cube([body_size/3, 3, 3], center = true);\n            \n            // Bottom mustache\n            translate([body_size/4, 0, -body_size/4]) \n                rotate([0, -angle, 0]) \n                translate([0, 0, body_size/4]) \n                cube([body_size/3, 3, 3], center = true);\n        }\n        \n        // Mini noses on mustache tips\n        for (i = [0:mustache_count-1]) {\n            angle = i * 30 - 30;\n            color([0.6, 0.2, 0.2])\n            translate([body_size/2 + 5, 0, body_size/3]) \n                rotate([0, angle, 0]) \n                translate([0, 0, body_size/3]) \n                sphere(r = 2);\n            \n            translate([body_size/2 + 5, 0, -body_size/3]) \n                rotate([0, -angle, 0]) \n                translate([0, 0, body_size/3]) \n                sphere(r = 2);\n        }\n        \n        // Steel hat/cap\n        color([0.6, 0.6, 0.7])\n        difference() {\n            translate([0, 0, body_size/2 + hat_height/2]) \n                cylinder(h = hat_height, r1 = body_size/2 - 2, r2 = body_size/2 - 5);\n            translate([0, 0, body_size/2 + hat_height]) \n                cylinder(h = 5, r = body_size/2 - 8);\n        }\n        \n        // Red gem on hat\n        color([0.9, 0.1, 0.1])\n        translate([0, 0, body_size/2 + hat_height + 2]) \n            sphere(r = 3);\n        \n        // Rock texture details\n        for (i = [0:5]) {\n            color([0.3, 0.4, 0.5])\n            rotate([0, 0, i * 60]) \n                translate([body_size/4, 0, 0]) \n                scale([1, 0.8, 0.8]) \n                sphere(d = 8);\n        }\n    }\n}\n\n// Rotate for better printing orientation\nrotate([0, 0, 0]) probopass();",
    "renders": true
  },
  {
    "pokemon": "dusknoir",
    "openscad_code": "// Dusknoir Pokemon - Realistic style, medium complexity\n// Height: 70mm\n\n$fn = 32;\n\n// Main colors\ncolor_dusknoir = [0.1, 0.1, 0.1];\ncolor_yellow = [1, 0.8, 0];\ncolor_red = [0.8, 0, 0];\n\n// Main body\nmodule dusknoir() {\n    union() {\n        // Head\n        color(color_dusknoir)\n        translate([0, 0, 60])\n        scale([1.2, 1, 1])\n        sphere(15);\n        \n        // Body\n        color(color_dusknoir)\n        translate([0, 0, 35])\n        scale([1.5, 1.2, 1])\n        cylinder(h = 25, r1 = 20, r2 = 15);\n        \n        // Lower body flare\n        color(color_dusknoir)\n        translate([0, 0, 20])\n        cylinder(h = 15, r1 = 18, r2 = 25);\n        \n        // Eye cavity\n        difference() {\n            color(color_dusknoir)\n            translate([0, 0, 60])\n            scale([1.2, 1, 1])\n            sphere(15);\n            \n            // Left eye hole\n            translate([-8, -5, 65])\n            rotate([0, 10, 0])\n            cylinder(h = 10, r = 5);\n            \n            // Right eye hole\n            translate([8, -5, 65])\n            rotate([0, -10, 0])\n            cylinder(h = 10, r = 5);\n            \n            // Mouth cavity\n            translate([0, -10, 55])\n            rotate([20, 0, 0])\n            scale([0.8, 0.5, 0.3])\n            sphere(10);\n        }\n        \n        // Eye details\n        color(color_yellow)\n        translate([-8, -2, 65])\n        rotate([0, 10, 0])\n        cylinder(h = 2, r = 4);\n        \n        color(color_yellow)\n        translate([8, -2, 65])\n        rotate([0, -10, 0])\n        cylinder(h = 2, r = 4);\n        \n        // Mouth pattern\n        color(color_red)\n        translate([0, -12, 53])\n        rotate([20, 0, 0])\n        scale([0.8, 0.5, 0.3])\n        sphere(8);\n        \n        // Yellow markings\n        color(color_yellow)\n        translate([0, 0, 45])\n        rotate([90, 0, 0])\n        cylinder(h = 2, r = 15);\n        \n        color(color_yellow)\n        translate([0, 0, 25])\n        rotate([90, 0, 0])\n        cylinder(h = 2, r = 20);\n        \n        // Arms\n        arm();\n        mirror([1, 0, 0])\n        arm();\n        \n        // Head crest\n        color(color_dusknoir)\n        translate([0, 15, 75])\n        scale([0.3, 2, 0.5])\n        sphere(8);\n        \n        // Back spikes\n        for(i = [-1, 1]) {\n            color(color_dusknoir)\n            translate([i * 15, -10, 50])\n            rotate([30 * i, 0, 0])\n            cylinder(h = 10, r1 = 3, r2 = 2);\n        }\n    }\n}\n\n// Arm module\nmodule arm() {\n    translate([-25, 0, 45])\n    rotate([0, 0, -30])\n    union() {\n        // Upper arm\n        color(color_dusknoir)\n        rotate([90, 0, 0])\n        cylinder(h = 20, r1 = 6, r2 = 5);\n        \n        // Lower arm\n        color(color_dusknoir)\n        translate([0, 0, -25])\n        rotate([90, 0, 0])\n        cylinder(h = 15, r1 = 5, r2 = 4);\n        \n        // Hand\n        color(color_dusknoir)\n        translate([0, 0, -42])\n        scale([0.8, 0.8, 1.2])\n        sphere(6);\n    }\n}\n\n// Base support\ncolor(color_dusknoir)\ntranslate([0, 0, 5])\ncylinder(h = 10, r = 30);\n\n// Assembly\ntranslate([0, 0, 10])\ndusknoir();",
    "renders": true
  },
  {
    "pokemon": "froslass",
    "openscad_code": "// Froslass - Medium Complexity Realistic Style\n// Overall height: ~80mm\n\n$fn = 32;\n\n// Colors\ncolor_body = [0.9, 0.9, 1.0];\ncolor_face = [0.95, 0.95, 0.95];\ncolor_red = [0.8, 0.2, 0.2];\ncolor_orange = [0.9, 0.5, 0.2];\ncolor_eyes = [0.1, 0.1, 0.1];\n\n// Main body module\nmodule froslass() {\n    // Body - hollow teardrop shape\n    difference() {\n        color(color_body) scale([1, 1.2, 1.5]) sphere(15);\n        translate([0, 0, -5]) scale([0.8, 1, 1.3]) sphere(14);\n    }\n    \n    // Head\n    translate([0, 0, 20]) {\n        // Main head sphere\n        color(color_face) sphere(12);\n        \n        // Head hollow\n        difference() {\n            sphere(12);\n            scale([0.8, 0.8, 0.9]) sphere(11);\n        }\n    }\n    \n    // Ice horns\n    module ice_horn(h, r) {\n        color(color_body) {\n            translate([0, 0, -h/2]) cylinder(h, r, r/3);\n            translate([0, 0, h/2]) sphere(r/3);\n        }\n    }\n    \n    // Left horn\n    translate([-8, 12, 28]) rotate([0, -20, -30]) ice_horn(15, 3);\n    \n    // Right horn\n    translate([8, 12, 28]) mirror([1, 0, 0]) rotate([0, -20, -30]) ice_horn(15, 3);\n    \n    // Center horn\n    translate([0, 15, 30]) rotate([0, -30, 0]) ice_horn(12, 2.5);\n    \n    // Eyes\n    module eye() {\n        color(color_eyes) {\n            translate([0, 0, -1]) sphere(2.5);\n            translate([0, 0, 1]) scale([0.7, 0.7, 0.7]) sphere(1.5);\n        }\n    }\n    \n    // Left eye\n    translate([-4, 8, 22]) eye();\n    \n    // Right eye\n    translate([4, 8, 22]) eye();\n    \n    // Mouth - small curved line\n    color(color_eyes) {\n        translate([0, 5, 18]) rotate([90, 0, 0]) \n            difference() {\n                cylinder(0.5, 3, 3);\n                translate([0, 0, -0.5]) cube([6, 3, 1], center=true);\n            }\n    }\n    \n    // Ice collar\n    color(color_body) {\n        for(i = [0:30:330]) {\n            rotate([0, 0, i]) translate([0, 12, 15]) {\n                rotate([90, 0, 0]) cylinder(8, 1.5, 0.5);\n                translate([0, 0, 8]) sphere(1);\n            }\n        }\n    }\n    \n    // Arms - hollow tubes\n    module arm(length) {\n        difference() {\n            color(color_body) {\n                rotate([0, 0, 90]) cylinder(length, 2, 1.5);\n                translate([length-2, 0, 0]) sphere(1.5);\n            }\n            rotate([0, 0, 90]) cylinder(length, 1.5, 1);\n        }\n    }\n    \n    // Left arm\n    translate([-5, 0, 10]) rotate([0, 0, 45]) arm(20);\n    \n    // Right arm\n    translate([5, 0, 10]) rotate([0, 0, -45]) arm(20);\n    \n    // Lower body ice crystals\n    for(i = [0:45:315]) {\n        rotate([0, 0, i]) translate([0, 16, -5]) {\n            color(color_body) {\n                rotate([0, 30, 0]) cylinder(12, 2, 0.5);\n                translate([0, 0, 12]) sphere(1);\n            }\n        }\n    }\n    \n    // Red markings\n    color(color_red) {\n        // Face markings\n        translate([-6, 10, 20]) rotate([0, 0, 30]) scale([1, 0.3, 0.1]) sphere(4);\n        translate([6, 10, 20]) rotate([0, 0, -30]) scale([1, 0.3, 0.1]) sphere(4);\n        \n        // Body marking\n        translate([0, 0, 5]) rotate([90, 0, 0]) scale([1, 1, 0.1]) sphere(8);\n    }\n    \n    // Orange orb\n    color(color_orange) {\n        translate([0, -2, 0]) sphere(3);\n        translate([0, -2, 0]) scale([0.7, 0.7, 0.7]) sphere(2.5);\n    }\n}\n\n// Scale to appropriate size (80mm height)\nscale(0.8) froslass();",
    "renders": true
  },
  {
    "pokemon": "rotom",
    "openscad_code": "color(\"orange\") {\n    // Main plasma body - slightly irregular sphere\n    scale([1.2, 1, 1.1]) sphere(d=45, $fn=32);\n}\n\nmodule plasma_spike(height, angle, rot) {\n    rotate([0, angle, rot]) {\n        translate([0, 0, 22.5]) {\n            cylinder(h=height, d1=2, d2=0.5, $fn=8);\n        }\n    }\n}\n\n// Plasma spikes around body\nfor(i = [0:30:330]) {\n    plasma_spike(8, 45, i);\n    plasma_spike(6, 135, i+15);\n}\n\n// Core body - darker orange sphere\ncolor(\"orangered\") {\n    translate([0, 0, 5]) sphere(d=30, $fn=32);\n}\n\n// Eyes - white sclera\nmodule eye(x_pos, y_pos) {\n    translate([x_pos, y_pos, 8]) {\n        color(\"white\") sphere(d=8, $fn=16);\n        // Pupil - dark blue\n        translate([0, 0, 4]) {\n            color(\"darkblue\") sphere(d=4, $fn=12);\n        }\n    }\n}\n\neye(-8, 6);\neye(8, 6);\n\n// Mouth - simple curved opening\ncolor(\"black\") {\n    translate([0, -8, 3]) {\n        rotate([90, 0, 0]) {\n            cylinder(h=1, d1=12, d2=8, $fn=16);\n        }\n    }\n}\n\n// Top plasma crest\ncolor(\"yellow\") {\n    translate([0, 0, 25]) {\n        for(i = [0:72:288]) {\n            rotate([0, 0, i]) {\n                translate([0, 5, 0]) {\n                    cube([2, 10, 3], center=true);\n                }\n            }\n        }\n    }\n}\n\n// Side plasma wisps\nmodule wisp(x_pos, rot) {\n    translate([x_pos, 0, 10]) {\n        rotate([0, 0, rot]) {\n            color(\"yellow\") {\n                cube([3, 12, 2]);\n                translate([0, 12, 0]) {\n                    cube([2, 8, 2]);\n                }\n            }\n        }\n    }\n}\n\nwisp(18, 30);\nwisp(-18, -30);\n\n// Bottom plasma tendrils\nmodule tendril(x_pos) {\n    translate([x_pos, 0, -15]) {\n        color(\"orange\") {\n            hull() {\n                sphere(d=3);\n                translate([0, 0, -8]) sphere(d=2);\n            }\n            translate([0, 0, -8]) {\n                sphere(d=2);\n            }\n        }\n    }\n}\n\ntendril(8);\ntendril(-8);\ntendril(0);\n\n// Electric aura ring\ncolor(\"yellow\") {\n    translate([0, 0, 0]) {\n        rotate_extrude($fn=64) {\n            translate([25, 0, 0]) {\n                circle(d=2);\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "pokemon": "uxie",
    "openscad_code": "// Uxie - OpenSCAD Model (Realistic Style, Medium Complexity)\n// Height: ~60mm, suitable for 3D printing\n\n$fa = 2;\n$fs = 0.5;\n\n// Main colors\ncolor_head = [0.9, 0.9, 0.95];\ncolor_face = [0.85, 0.85, 0.9];\ncolor_eyes = [0.4, 0.4, 0.6];\ncolor_gold = [0.9, 0.75, 0.3];\ncolor_gray = [0.7, 0.7, 0.75];\n\n// Head module\nmodule head() {\n    color(color_head)\n    union() {\n        // Main head sphere\n        translate([0, 0, 30])\n            sphere(d=35);\n        \n        // Forehead extension\n        translate([0, -8, 40])\n            scale([1.2, 0.8, 0.8])\n                sphere(d=20);\n        \n        // Back of head\n        translate([0, 12, 28])\n            scale([0.9, 1.1, 0.9])\n                sphere(d=25);\n    }\n}\n\n// Face mask module\nmodule face_mask() {\n    color(color_face)\n    difference() {\n        // Main face area\n        translate([0, -15, 28])\n            scale([1.3, 0.7, 0.6])\n                sphere(d=30);\n        \n        // Eye holes\n        for(x = [-8, 8]) {\n            translate([x, -18, 32])\n                rotate([0, 40, 0])\n                    cylinder(h=15, d1=8, d2=6, center=true);\n        }\n    }\n}\n\n// Eyes module\nmodule eyes() {\n    for(x = [-8, 8]) {\n        // Eye socket\n        color(color_gray)\n        translate([x, -17, 30])\n            sphere(d=5);\n        \n        // Eye gem\n        color(color_eyes)\n        translate([x, -18, 31])\n            sphere(d=4);\n        \n        // Eye highlight\n        color([1, 1, 1])\n        translate([x+1, -19, 31.5])\n            sphere(d=1.5);\n    }\n}\n\n// Golden head piece\nmodule head_piece() {\n    color(color_gold)\n    union() {\n        // Main ring\n        translate([0, -5, 45])\n            rotate_extrude(angle=360, $fn=50)\n                translate([12, 0, 0])\n                    circle(d=3);\n        \n        // Front extension\n        translate([0, -15, 45])\n            rotate([90, 0, 0])\n                cylinder(h=12, d1=3, d2=1);\n        \n        // Side extensions\n        for(angle = [-45, 45]) {\n            rotate([0, 0, angle])\n                translate([0, -5, 45])\n                    rotate([90, 0, 0])\n                        cylinder(h=10, d1=2.5, d2=1);\n        }\n    }\n}\n\n// Ears module\nmodule ears() {\n    color(color_head)\n    union() {\n        // Left ear\n        translate([-12, 5, 42])\n            rotate([0, 15, -30])\n                scale([0.8, 0.3, 2])\n                    sphere(d=10);\n        \n        // Right ear\n        translate([12, 5, 42])\n            rotate([0, 15, 30])\n                scale([0.8, 0.3, 2])\n                    sphere(d=10);\n    }\n}\n\n// Tail assembly\nmodule tail() {\n    color(color_head)\n    union() {\n        // Tail base\n        translate([0, 15, 25])\n            rotate([0, 90, 0])\n                cylinder(h=25, d1=8, d2=4);\n        \n        // Tail disk\n        translate([0, 27, 25])\n            rotate([90, 0, 0])\n                cylinder(h=3, d=20);\n        \n        // Tail gems (3 small spheres)\n        for(i = [0:2]) {\n            angle = i * 120;\n            rotate([0, 0, angle])\n                translate([7, 27, 25])\n                    color(color_red = [0.8, 0.4, 0.5])\n                        sphere(d=3);\n        }\n    }\n}\n\n// Arms module\nmodule arms() {\n    for(side = [-1, 1]) {\n        color(color_head)\n        translate([side * 10, 0, 20])\n            rotate([0, 0, side * 20])\n                scale([0.6, 0.6, 1.2])\n                    sphere(d=8);\n    }\n}\n\n// Body assembly\nmodule uxie_body() {\n    head();\n    face_mask();\n    eyes();\n    head_piece();\n    ears();\n    tail();\n    arms();\n}\n\n// Generate the model\nuxie_body();",
    "renders": true
  },
  {
    "pokemon": "mesprit",
    "openscad_code": "// Mesprit - Realistic Style - Medium Complexity\n// Size: 80mm height\n\n$fn = 32;\n\n// Main colors\ncolor_body = [0.6, 0.7, 0.9];  // Light blue\ncolor_accents = [0.9, 0.2, 0.2];  // Red\ncolor_eyes = [0.1, 0.1, 0.1];  // Dark\ncolor_gold = [0.8, 0.7, 0.3];  // Gold\n\n// Body proportions\nbody_height = 40;\nbody_width = 30;\nbody_depth = 25;\n\nmodule head_tails() {\n    // Main head sphere\n    color(color_body) sphere(d=body_width);\n    \n    // Three head tails with gold tips\n    for(i=[0:120:360]) {\n        rotate([0, 0, i]) {\n            translate([body_width/2, 0, -body_height/4]) {\n                rotate([-30, 0, 0]) {\n                    cylinder(h=25, d1=8, d2=4, $fn=6);\n                    translate([0, 0, 25]) {\n                        color(color_gold) sphere(d=6);\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule body() {\n    // Main body\n    color(color_body) sphere(d=body_height*0.8);\n    \n    // Arms\n    for(side=[-1, 1]) {\n        translate([side*body_width/3, body_depth/2, -body_height/4]) {\n            rotate([0, side*30, 0]) {\n                color(color_body) cylinder(h=15, d=6);\n                translate([0, 0, 15]) {\n                    color(color_body) sphere(d=8);\n                }\n            }\n        }\n    }\n}\n\nmodule face_features() {\n    // Eyes with red accents\n    for(side=[-1, 1]) {\n        translate([side*body_width/4, body_width/3, body_width/4]) {\n            color(color_eyes) sphere(d=8);\n            translate([0, 0, 4.1]) {\n                color(color_accents) sphere(d=3);\n            }\n        }\n    }\n    \n    // Mouth\n    translate([0, body_width/2.5, 0]) {\n        color(color_eyes) {\n            rotate([90, 0, 0]) {\n                cylinder(h=0.5, d=6);\n            }\n        }\n    }\n    \n    // Red forehead gem\n    translate([0, body_width/3, body_width/3]) {\n        color(color_accents) sphere(d=5);\n    }\n}\n\nmodule tail() {\n    // Main tail stem\n    color(color_body) {\n        translate([0, 0, -body_height/2]) {\n            cylinder(h=30, d1=8, d2=12);\n            \n            // Tail split\n            translate([0, 0, 30]) {\n                rotate([0, 0, 120]) {\n                    cylinder(h=20, d1=12, d2=8);\n                }\n                rotate([0, 0, 240]) {\n                    cylinder(h=20, d1=12, d2=8);\n                }\n                rotate([0, 0, 0]) {\n                    cylinder(h=20, d1=12, d2=8);\n                }\n            }\n            \n            // Gold tips\n            translate([0, 0, 50]) {\n                for(i=[0:120:360]) {\n                    rotate([0, 0, i]) {\n                        translate([8, 0, 0]) {\n                            color(color_gold) sphere(d=6);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Main assembly\ntranslate([0, 0, body_height]) {\n    // Head and features\n    head_tails();\n    face_features();\n    \n    // Body\n    translate([0, 0, -body_height/2]) {\n        body();\n    }\n    \n    // Tail\n    tail();\n}",
    "renders": true
  },
  {
    "pokemon": "azelf",
    "openscad_code": "// Azelf Pokemon - Realistic Style - Medium Complexity\n// Scale: 80mm height\n\n$fn=32;\n\n// Main colors\ncolor_body = [0.6,0.7,0.9];\ncolor_face = [0.9,0.9,0.8];\ncolor_tails = [0.4,0.5,0.8];\ncolor_eyes = [0.95,0.95,0.95];\ncolor_pupils = [0.1,0.1,0.1];\ncolor_gems = [0.3,0.6,0.9];\n\n// Overall scale\nscale_factor = 80/100;\n\n// Main body\nmodule body() {\n    color(color_body)\n    union() {\n        // Central teardrop body\n        translate([0,0,30*scale_factor])\n        scale([1,0.8,1.2])\n        sphere(20*scale_factor);\n        \n        // Lower body extension\n        translate([0,0,15*scale_factor])\n        scale([0.8,0.7,1])\n        cylinder(h=20*scale_factor, r1=15*scale_factor, r2=10*scale_factor);\n    }\n}\n\n// Face mask\nmodule face() {\n    color(color_face)\n    translate([0,-10*scale_factor,45*scale_factor])\n    scale([1.2,0.6,0.8])\n    sphere(15*scale_factor);\n}\n\n// Eyes\nmodule eyes() {\n    // Left eye\n    color(color_eyes)\n    translate([-8*scale_factor,-12*scale_factor,48*scale_factor])\n    sphere(4*scale_factor);\n    \n    // Right eye\n    translate([8*scale_factor,-12*scale_factor,48*scale_factor])\n    sphere(4*scale_factor);\n    \n    // Pupils\n    color(color_puppils)\n    translate([-8*scale_factor,-14*scale_factor,50*scale_factor])\n    sphere(2*scale_factor);\n    \n    translate([8*scale_factor,-14*scale_factor,50*scale_factor])\n    sphere(2*scale_factor);\n}\n\n// Head fins/ears\nmodule ears() {\n    color(color_body)\n    union() {\n        // Left ear\n        translate([-15*scale_factor,-5*scale_factor,55*scale_factor])\n        rotate([0,0,-30])\n        scale([0.3,0.1,1])\n        cylinder(h=20*scale_factor, r=10*scale_factor);\n        \n        // Right ear\n        translate([15*scale_factor,-5*scale_factor,55*scale_factor])\n        rotate([0,0,30])\n        scale([0.3,0.1,1])\n        cylinder(h=20*scale_factor, r=10*scale_factor);\n        \n        // Top fin\n        translate([0,0,65*scale_factor])\n        scale([0.5,0.1,0.8])\n        rotate([90,0,0])\n        cylinder(h=15*scale_factor, r=8*scale_factor);\n    }\n}\n\n// Tail system\nmodule tail() {\n    color(color_tails)\n    union() {\n        // Center tail\n        translate([0,0,10*scale_factor])\n        rotate([0,0,0])\n        scale([0.3,0.3,1])\n        cylinder(h=40*scale_factor, r1=5*scale_factor, r2=0);\n        \n        // Side tails (3 on each side)\n        for(i=[1:3]) {\n            angle = i * 30;\n            // Left side\n            translate([-15*scale_factor,0,20*scale_factor])\n            rotate([0,0,-angle])\n            translate([-5*i*scale_factor,0,0])\n            scale([0.2,0.2,1])\n            cylinder(h=35*scale_factor, r1=4*scale_factor, r2=0);\n            \n            // Right side\n            translate([15*scale_factor,0,20*scale_factor])\n            rotate([0,0,angle])\n            translate([5*i*scale_factor,0,0])\n            scale([0.2,0.2,1])\n            cylinder(h=35*scale_factor, r1=4*scale_factor, r2=0);\n        }\n    }\n}\n\n// Forehead gem\nmodule forehead_gem() {\n    color(color_gems)\n    translate([0,-8*scale_factor,52*scale_factor])\n    rotate([90,0,0])\n    cylinder(h=3*scale_factor, r1=4*scale_factor, r2=0);\n}\n\n// Arms\nmodule arms() {\n    color(color_body)\n    union() {\n        // Left arm\n        translate([-20*scale_factor,0,35*scale_factor])\n        rotate([0,0,-45])\n        scale([0.4,0.4,1])\n        cylinder(h=15*scale_factor, r1=4*scale_factor, r2=3*scale_factor);\n        \n        // Right arm\n        translate([20*scale_factor,0,35*scale_factor])\n        rotate([0,0,45])\n        scale([0.4,0.4,1])\n        cylinder(h=15*scale_factor, r1=4*scale_factor, r2=3*scale_factor);\n    }\n}\n\n// Assembly\nbody();\nface();\neyes();\nears();\ntail();\nforehead_gem();\narms();",
    "renders": true
  },
  {
    "pokemon": "heatran",
    "openscad_code": "// Heatran - Realistic Style - Medium Complexity\n// 3D printable Pokemon model using basic OpenSCAD primitives\n\n// Main parameters\nbody_width = 40;\nbody_height = 35;\nbody_depth = 30;\nleg_height = 15;\nhead_size = 25;\n\n// Body module - main torso\nmodule heatran_body() {\n    color([0.4, 0.2, 0.1]) // Dark brown metallic\n    union() {\n        // Central body\n        translate([0, 0, leg_height])\n        difference() {\n            scale([1, 0.8, 1])\n            sphere(d=body_height);\n            \n            // Chest cavity\n            translate([0, -body_width/2, 0])\n            cube([body_width/2, body_width, body_height], center=true);\n        }\n        \n        // Back armor plates\n        translate([0, body_width/3, leg_height + 10])\n        rotate([30, 0, 0])\n        cube([body_width*1.2, body_depth/2, 8], center=true);\n        \n        // Side vents\n        for(side = [-1, 1]) {\n            translate([side * body_width/2, 0, leg_height + 5])\n            rotate([0, 90, 0])\n            cylinder(h=body_depth/3, d=8);\n        }\n    }\n}\n\n// Head module with facial features\nmodule heatran_head() {\n    color([0.5, 0.25, 0.1])\n    union() {\n        // Main head\n        translate([0, -body_width/2 - 10, leg_height + body_height/2])\n        sphere(d=head_size);\n        \n        // Snout\n        translate([0, -body_width/2 - 20, leg_height + body_height/2 - 5])\n        scale([1.2, 1.5, 0.8])\n        sphere(d=15);\n        \n        // Horns\n        for(angle = [-45, 45]) {\n            translate([0, -body_width/2 - 10, leg_height + body_height/2 + 10])\n            rotate([0, 0, angle])\n            rotate([30, 0, 0])\n            cylinder(h=12, d1=8, d2=4);\n        }\n        \n        // Eyes (lava glow)\n        color([1, 0.3, 0])\n        for(side = [-1, 1]) {\n            translate([side * 8, -body_width/2 - 25, leg_height + body_height/2])\n            sphere(d=4);\n        }\n    }\n}\n\n// Leg module\nmodule heatran_leg(side, front) {\n    color([0.35, 0.15, 0.05])\n    union() {\n        // Upper leg\n        translate([side * body_width/3, front * body_depth/3, leg_height/2])\n        rotate([0, side * 10, front * 10])\n        cylinder(h=leg_height, d1=10, d2=8);\n        \n        // Foot\n        translate([side * body_width/3, front * body_depth/3, 2])\n        scale([1.5, 2, 0.5])\n        sphere(d=10);\n        \n        // Toes\n        for(toe = [-0.5, 0, 0.5]) {\n            translate([side * body_width/3 + toe * 5, \n                      front * body_depth/3 + front * 8, 1])\n            cylinder(h=3, d=4);\n        }\n    }\n}\n\n// Lava markings on body\nmodule lava_markings() {\n    color([1, 0.4, 0]) // Bright orange lava\n    \n    // Chest markings\n    translate([0, -body_width/2 - 5, leg_height + 10])\n    rotate([90, 0, 0])\n    cylinder(h=2, d=15);\n    \n    // Back markings\n    translate([0, body_width/3, leg_height + 15])\n    rotate([30, 0, 0])\n    for(i = [0:45:315]) {\n        rotate([0, 0, i])\n        translate([10, 0, 0])\n        cube([8, 2, 3], center=true);\n    }\n}\n\n// Tail with lava flow\nmodule heatran_tail() {\n    color([0.4, 0.2, 0.1])\n    union() {\n        // Main tail segments\n        hull() {\n            translate([0, body_width/2 + 5, leg_height + 12])\n            sphere(d=8);\n            \n            translate([0, body_width/2 + 20, leg_height + 8])\n            sphere(d=6);\n            \n            translate([0, body_width/2 + 30, leg_height + 5])\n            sphere(d=4);\n        }\n        \n        // Lava flow in tail\n        color([1, 0.3, 0])\n        translate([0, body_width/2 + 15, leg_height + 8])\n        rotate([0, 90, 0])\n        cylinder(h=20, d=3);\n    }\n}\n\n// Main assembly\nunion() {\n    // Body parts\n    heatran_body();\n    heatran_head();\n    heatran_tail();\n    \n    // Four legs\n    for(side = [-1, 1]) {\n        for(front = [-1, 1]) {\n            heatran_leg(side, front);\n        }\n    }\n    \n    // Lava markings\n    lava_markings();\n}",
    "renders": true
  },
  {
    "pokemon": "regigigas",
    "openscad_code": "// Regigigas OpenSCAD Model - Medium Complexity Realistic Style\n// Size: ~70mm height, 3D printable\n\n$fn = 32;\nbody_color = [0.8, 0.8, 0.7];\ngold_color = [0.9, 0.75, 0.3];\nblack_color = [0.1, 0.1, 0.1];\nwhite_color = [0.95, 0.95, 0.95];\n\nmodule regigigas() {\n    // Main body - large cylindrical core\n    color(body_color) {\n        translate([0, 0, 20]) {\n            cylinder(h=40, r1=18, r2=22, center=true);\n            translate([0, 0, 25]) cylinder(h=15, r1=22, r2=18, center=true);\n        }\n    }\n    \n    // Head with seven yellow dots pattern\n    color(body_color) {\n        translate([0, 0, 60]) {\n            difference() {\n                sphere(r=15);\n                // Eye sockets\n                translate([5, -7, 5]) sphere(r=4);\n                translate([-5, -7, 5]) sphere(r=4);\n            }\n        }\n    }\n    \n    // Yellow dots on head\n    color(gold_color) {\n        for(i=[-1:1]) {\n            translate([i*8, 8, 68]) sphere(r=2.5);\n        }\n        translate([0, 14, 65]) sphere(r=2.5);\n        translate([0, 0, 72]) sphere(r=2.5);\n    }\n    \n    // Eyes\n    color(black_color) {\n        translate([5, -8, 58]) sphere(r=2.5);\n        translate([-5, -8, 58]) sphere(r=2.5);\n    }\n    \n    // Arms - six stone-like cylinders\n    module arm(offset, rotation) {\n        translate(offset) {\n            rotate(rotation) {\n                color(body_color) {\n                    cylinder(h=25, r=6, center=true);\n                    translate([0, 0, 15]) sphere(r=6);\n                }\n                color(gold_color) {\n                    translate([0, 0, -10]) cube([8, 3, 3], center=true);\n                }\n            }\n        }\n    }\n    \n    arm([25, 5, 35], [0, 0, 0]);\n    arm([-25, 5, 35], [0, 0, 0]);\n    arm([20, 15, 20], [0, 0, 45]);\n    arm([-20, 15, 20], [0, 0, -45]);\n    arm([15, 10, 50], [0, 0, 30]);\n    arm([-15, 10, 50], [0, 0, -30]);\n    \n    // Legs - thick stone pillars\n    module leg(offset) {\n        color(body_color) {\n            translate(offset) {\n                cylinder(h=30, r=10, center=true);\n                translate([0, 0, -20]) sphere(r=10);\n                color(gold_color) {\n                    translate([0, 0, -35]) cube([15, 3, 3], center=true);\n                }\n            }\n        }\n    }\n    \n    leg([12, -15, 0]);\n    leg([-12, -15, 0]);\n    \n    // Chest pattern - three gold rings\n    color(gold_color) {\n        for(i=[0:2]) {\n            translate([0, 12, 45-i*8]) rotate([90, 0, 0]) \n                cylinder(h=2, r=12-i*2, center=true);\n        }\n    }\n    \n    // Back pattern - yellow dots in triangle formation\n    color(gold_color) {\n        translate([0, -15, 45]) sphere(r=3);\n        translate([8, -20, 40]) sphere(r=2);\n        translate([-8, -20, 40]) sphere(r=2);\n    }\n    \n    // Stone bracers on arms\n    color(body_color) {\n        for(side=[-1, 1]) {\n            translate([side*30, 5, 25]) {\n                rotate([0, 90, 0]) cylinder(h=8, r=7, center=true);\n            }\n        }\n    }\n}\n\n// Base platform for stability\ncolor([0.4, 0.4, 0.4]) {\n    translate([0, 0, -50]) {\n        cylinder(h=5, r=35);\n    }\n}\n\nregigigas();",
    "renders": true
  },
  {
    "pokemon": "cresselia",
    "openscad_code": "// Cresselia 3D Model - Realistic Medium Complexity\n// Based on Pokemon Diamond/Pearl design\n\n// Colors\nc_body = [0.85, 0.75, 0.95];  // Pale lavender\nc_accents = [0.4, 0.2, 0.7];  // Deep purple\nc_yellow = [1, 0.9, 0.2];     // Yellow details\nc_pink = [1, 0.6, 0.8];       // Pink accents\nc_black = [0.1, 0.1, 0.1];    // Black details\n\n// Overall scale\nscale_factor = 1;\n\n// Main body module\nmodule cresselia_body() {\n    color(c_body) {\n        // Main torso - elongated teardrop\n        translate([0, 0, 10]) {\n            scale([1, 0.8, 1.5]) {\n                sphere(15);\n            }\n        }\n        \n        // Neck extension\n        translate([0, 0, 25]) {\n            cylinder(h=8, r1=8, r2=6);\n        }\n        \n        // Head base\n        translate([0, 0, 35]) {\n            sphere(12);\n        }\n    }\n}\n\n// Crescent moon headpiece\nmodule crescent_headpiece() {\n    color(c_accents) {\n        // Main crescent\n        translate([0, 8, 42]) {\n            rotate([0, 0, 0]) {\n                difference() {\n                    // Outer crescent\n                    scale([1.2, 1, 0.8]) {\n                        rotate([90, 0, 0]) {\n                            cylinder(h=1, r1=18, r2=18);\n                        }\n                    }\n                    // Inner cutout\n                    scale([0.8, 0.7, 1.2]) {\n                        rotate([90, 0, 0]) {\n                            cylinder(h=2, r1=15, r2=15);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Side crescents\n        for(side = [-1, 1]) {\n            translate([side * 12, 5, 38]) {\n                rotate([0, 0, side * 30]) {\n                    scale([0.6, 0.6, 0.3]) {\n                        difference() {\n                            cylinder(h=1, r1=8, r2=8);\n                            translate([0, -2, 0]) {\n                                cylinder(h=2, r1=5, r2=5);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Wings module\nmodule wings() {\n    color(c_body) {\n        // Left wing\n        translate([-20, 0, 20]) {\n            rotate([0, 0, -30]) {\n                scale([1.5, 0.3, 2]) {\n                    difference() {\n                        // Main wing shape\n                        sphere(15);\n                        // Cut bottom for flat wing\n                        translate([0, -20, -15]) {\n                            cube([40, 40, 30], center=true);\n                        }\n                    }\n                }\n            }\n            // Wing pattern\n            color(c_pink) {\n                for(i = [0:2]) {\n                    translate([-5 - i*3, 2, 10 + i*5]) {\n                        scale([1, 0.1, 0.2]) {\n                            sphere(3);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Right wing (mirrored)\n        mirror([1, 0, 0]) {\n            translate([-20, 0, 20]) {\n                rotate([0, 0, -30]) {\n                    scale([1.5, 0.3, 2]) {\n                        difference() {\n                            sphere(15);\n                            translate([0, -20, -15]) {\n                                cube([40, 40, 30], center=true);\n                            }\n                        }\n                    }\n                }\n                color(c_pink) {\n                    for(i = [0:2]) {\n                        translate([-5 - i*3, 2, 10 + i*5]) {\n                            scale([1, 0.1, 0.2]) {\n                                sphere(3);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Tail module\nmodule tail() {\n    color(c_body) {\n        translate([0, -15, 5]) {\n            rotate([30, 0, 0]) {\n                // Main tail\n                scale([0.8, 0.3, 2]) {\n                    sphere(12);\n                }\n                \n                // Tail tip\n                translate([0, 0, -15]) {\n                    color(c_accents) {\n                        sphere(5);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Facial features\nmodule face() {\n    // Eyes\n    color(c_yellow) {\n        for(side = [-1, 1]) {\n            translate([side * 4, 5, 35]) {\n                scale([1, 0.6, 0.3]) {\n                    sphere(3);\n                }\n                \n                // Eye shine\n                color(c_black) {\n                    translate([side * 1, 0, 1]) {\n                        scale([0.5, 0.5, 1]) {\n                            sphere(1);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Beak/mouth area\n    color(c_yellow) {\n        translate([0, 8, 32]) {\n            scale([1.5, 1, 0.5]) {\n                sphere(3);\n            }\n        }\n    }\n}\n\n// Chest markings\nmodule chest_markings() {\n    color(c_accents) {\n        // Central oval\n        translate([0, 5, 20]) {\n            scale([1.2, 0.8, 0.3]) {\n                sphere(6);\n            }\n        }\n        \n        // Side circles\n        for(side = [-1, 1]) {\n            translate([side * 8, 3, 18]) {\n                sphere(3);\n            }\n        }\n    }\n}\n\n// Feet\nmodule feet() {\n    color(c_accents) {\n        for(side = [-1, 1]) {\n            translate([side * 8, 0, 0]) {\n                // Leg\n                cylinder(h=8, r1=3, r2=2);\n                \n                // Foot\n                translate([0, 2, -5]) {\n                    scale([1.5, 2, 0.5]) {\n                        sphere(3);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Top fin details\nmodule head_fin() {\n    color(c_pink) {\n        translate([0, 2, 48]) {\n            rotate([0, 0, 0]) {\n                scale([0.3, 1, 2]) {\n                    cylinder(h=1, r1=3, r2=0);\n                }\n            }\n        }\n    }\n}\n\n// Main assembly\nscale([scale_factor, scale_factor, scale_factor]) {\n    union() {\n        cresselia_body();\n        crescent_headpiece();\n        wings();\n        tail();\n        face();\n        chest_markings();\n        feet();\n        head_fin();\n    }\n}",
    "renders": true
  },
  {
    "pokemon": "phione",
    "openscad_code": "// Phione Pokemon in realistic style\n// Size: ~80mm height\n\nmodule phione() {\n    // Main body - translucent blue sphere\n    color([0.3, 0.6, 0.9, 0.8])\n    sphere(30);\n\n    // Head details\n    translate([0, 0, 25]) {\n        // Face mask - lighter blue\n        color([0.5, 0.7, 1])\n        difference() {\n            sphere(28);\n            translate([0, 0, -5])\n            sphere(25);\n        }\n        \n        // Eyes\n        for(x = [-12, 12]) {\n            translate([x, 8, 8]) {\n                // Eye whites\n                color([1, 1, 1])\n                sphere(4);\n                // Pupils\n                translate([0, 0, 3])\n                color([0.2, 0.2, 0.3])\n                sphere(2);\n            }\n        }\n        \n        // Mouth\n        translate([0, -8, 0])\n        rotate([90, 0, 0])\n        color([0.8, 0.5, 0.5])\n        cylinder(h=1, r1=4, r2=1);\n    }\n\n    // Floating antenna/crest\n    translate([0, 0, 45])\n    color([0.4, 0.7, 0.9])\n    for(i = [0:4]) {\n        rotate([0, 0, i*72])\n        translate([0, 8, 0])\n        rotate([0, 0, 45])\n        scale([1, 0.3, 0.1])\n        sphere(10);\n    }\n\n    // Arms - simple fins\n    module fin() {\n        translate([0, 0, -2])\n        color([0.4, 0.7, 0.9])\n        difference() {\n            scale([1, 2, 0.3])\n            sphere(6);\n            translate([0, 4, 0])\n            cube([12, 8, 2], center=true);\n        }\n    }\n    \n    // Left fin\n    translate([-25, 0, 10])\n    rotate([0, 0, -30])\n    fin();\n    \n    // Right fin\n    translate([25, 0, 10])\n    mirror([1, 0, 0])\n    rotate([0, 0, -30])\n    fin();\n\n    // Lower body tentacles\n    module tentacle() {\n        color([0.3, 0.6, 0.9, 0.7])\n        rotate([90, 0, 0])\n        cylinder(h=25, r1=4, r2=1);\n    }\n    \n    // Create 5 tentacles\n    for(i = [0:4]) {\n        rotate([0, 0, i*72])\n        translate([0, 20, -30])\n        tentacle();\n    }\n\n    // Back fin\n    translate([0, -25, 0])\n    rotate([0, 0, 180])\n    color([0.3, 0.5, 0.8])\n    difference() {\n        scale([2, 1.5, 0.2])\n        sphere(8);\n        translate([0, 0, -1])\n        cube([16, 12, 2], center=true);\n    }\n\n    // Markings on body\n    color([1, 1, 1, 0.3])\n    for(i = [0:3]) {\n        rotate([0, 0, i*90])\n        translate([0, 15, 0])\n        scale([1, 0.3, 0.1])\n        sphere(8);\n    }\n}\n\n// Scale to 80mm height\nscale(0.8)\nphione();",
    "renders": true
  },
  {
    "pokemon": "manaphy",
    "openscad_code": "// Manaphy Pokemon - Realistic Style\n// Medium complexity OpenSCAD model for 3D printing\n\n// Colors\ncolor_body = \"#87CEEB\";\ncolor_yellow = \"#FFD700\";\ncolor_red = \"#DC143C\";\ncolor_blue = \"#1E90FF\";\n\n// Main parameters\nscale_factor = 0.6;\nbody_height = 80 * scale_factor;\nhead_radius = 20 * scale_factor;\nbody_radius = 25 * scale_factor;\n\n// Head module\nmodule head() {\n    color(color_body) {\n        // Main head sphere\n        translate([0, 0, body_height * 0.8])\n            sphere(r = head_radius, $fn = 32);\n        \n        // Forehead bump\n        translate([0, 0, body_height * 0.8 + head_radius * 0.8])\n            sphere(r = head_radius * 0.6, $fn = 32);\n    }\n}\n\n// Eyes module\nmodule eyes() {\n    // Left eye\n    translate([-head_radius * 0.4, head_radius * 0.7, body_height * 0.8])\n        color(color_blue)\n            sphere(r = head_radius * 0.15, $fn = 16);\n    \n    // Right eye\n    translate([head_radius * 0.4, head_radius * 0.7, body_height * 0.8])\n        color(color_blue)\n            sphere(r = head_radius * 0.15, $fn = 16);\n    \n    // Eye highlights\n    translate([-head_radius * 0.35, head_radius * 0.75, body_height * 0.8 + 1])\n        color(\"white\")\n            sphere(r = head_radius * 0.05, $fn = 8);\n    \n    translate([head_radius * 0.45, head_radius * 0.75, body_height * 0.8 + 1])\n        color(\"white\")\n            sphere(r = head_radius * 0.05, $fn = 8);\n}\n\n// Antenna module\nmodule antenna() {\n    color(color_yellow) {\n        // Left antenna\n        translate([-head_radius * 0.6, 0, body_height * 0.8 + head_radius * 0.8])\n            rotate([20, 0, -30])\n                cylinder(h = head_radius * 1.5, r = head_radius * 0.1, $fn = 8);\n        \n        // Right antenna\n        translate([head_radius * 0.6, 0, body_height * 0.8 + head_radius * 0.8])\n            rotate([20, 0, 30])\n                cylinder(h = head_radius * 1.5, r = head_radius * 0.1, $fn = 8);\n    }\n}\n\n// Body module\nmodule body() {\n    color(color_body) {\n        // Main body\n        translate([0, 0, body_height * 0.3])\n            sphere(r = body_radius, $fn = 32);\n        \n        // Lower body extension\n        translate([0, 0, body_height * 0.15])\n            cylinder(h = body_height * 0.3, r = body_radius * 0.8, $fn = 32);\n    }\n}\n\n// Arms module\nmodule arms() {\n    color(color_body) {\n        // Left arm\n        translate([-body_radius * 0.9, 0, body_height * 0.5])\n            rotate([0, -45, -30])\n                cylinder(h = body_radius * 0.8, r = body_radius * 0.25, $fn = 8);\n        \n        // Right arm\n        translate([body_radius * 0.9, 0, body_height * 0.5])\n            rotate([0, -45, 30])\n                cylinder(h = body_radius * 0.8, r = body_radius * 0.25, $fn = 8);\n    }\n}\n\n// Tail module\nmodule tail() {\n    color(color_body) {\n        // Main tail\n        translate([0, -body_radius * 1.2, body_height * 0.2])\n            rotate([90, 0, 0])\n                cylinder(h = body_radius * 1.5, r1 = body_radius * 0.8, r2 = body_radius * 0.3, $fn = 16);\n        \n        // Tail flukes\n        for(i = [0:1]) {\n            mirror([i * 2 - 1, 0, 0])\n                translate([0, -body_radius * 2.2, body_height * 0.2])\n                    rotate([90, 0, 45])\n                        cube([body_radius * 0.8, body_radius * 0.4, body_radius * 0.1], center = true);\n        }\n    }\n}\n\n// Chest gem\nmodule chest_gem() {\n    color(color_red) {\n        translate([0, body_radius * 0.5, body_height * 0.5])\n            sphere(r = body_radius * 0.2, $fn = 16);\n    }\n}\n\n// Feet module\nmodule feet() {\n    color(color_body) {\n        // Left foot\n        translate([-body_radius * 0.5, 0, 0])\n            cube([body_radius * 0.4, body_radius * 0.6, body_radius * 0.2], center = true);\n        \n        // Right foot\n        translate([body_radius * 0.5, 0, 0])\n            cube([body_radius * 0.4, body_radius * 0.6, body_radius * 0.2], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    eyes();\n    antenna();\n    arms();\n    tail();\n    chest_gem();\n    feet();\n}",
    "renders": true
  },
  {
    "pokemon": "darkrai",
    "openscad_code": "// Darkrai - Realistic Style, Medium Complexity\n// 3D printable model, ~80mm tall\n\n// Main color scheme\n$darkrai_body = [0.1, 0.1, 0.1];      // Dark grey/black\n$darkrai_head = [0.05, 0.05, 0.05];   // Slightly darker for head\n$darkrai_eyes = [1, 0, 0];            // Red eyes\n$darkrai_mouth = [0, 0, 0];           // Pure black mouth\n$darkrai_collar = [0.15, 0.15, 0.15]; // Lighter grey collar\n\n// Helper module for rounded box\nmodule rounded_box(size, radius, center=false) {\n    translate([0, 0, center ? size[2]/2 : 0])\n    hull() {\n        for(x = [0, size[0]-2*radius])\n            for(y = [0, size[1]-2*radius])\n                translate([x+radius, y+radius, radius])\n                sphere(r=radius);\n        for(x = [0, size[0]-2*radius])\n            for(z = [0, size[2]-2*radius])\n                translate([x+radius, radius, z+radius])\n                sphere(r=radius);\n        for(y = [0, size[1]-2*radius])\n            for(z = [0, size[2]-2*radius])\n                translate([radius, y+radius, z+radius])\n                sphere(r=radius);\n    }\n}\n\n// Head module\nmodule darkrai_head() {\n    color($darkrai_head) {\n        // Main head shape\n        translate([0, 0, 15])\n        scale([1.2, 1, 1.5])\n        sphere(d=28);\n        \n        // Pointed top\n        translate([0, 0, 32])\n        scale([0.8, 0.8, 1.5])\n        sphere(d=12);\n        \n        // Side horns\n        for(side = [-1, 1]) {\n            translate([side*12, 0, 25])\n            rotate([0, side*20, 0])\n            scale([0.8, 0.8, 2])\n            cylinder(h=18, d1=6, d2=3);\n        }\n    }\n    \n    // Eyes\n    color($darkrai_eyes) {\n        for(side = [-1, 1]) {\n            translate([side*8, 10, 22])\n            scale([1, 0.3, 1])\n            sphere(d=6);\n        }\n    }\n    \n    // Mouth\n    color($darkrai_mouth) {\n        translate([0, 11, 16])\n        rotate([90, 0, 0])\n        cylinder(h=0.5, d=12);\n    }\n}\n\n// Collar module\nmodule darkrai_collar() {\n    color($darkrai_collar) {\n        // Main collar\n        translate([0, 0, 10])\n        difference() {\n            cylinder(h=8, d1=30, d2=35);\n            cylinder(h=9, d=20);\n        }\n        \n        // Collar spikes\n        for(i = [0:11]) {\n            rotate([0, 0, i*30])\n            translate([15, 0, 14])\n            rotate([0, 90, 0])\n            cylinder(h=8, d1=3, d2=1);\n        }\n    }\n}\n\n// Body module\nmodule darkrai_body() {\n    color($darkrai_body) {\n        // Torso\n        translate([0, 0, 0])\n        scale([1.2, 0.8, 1.5])\n        rounded_box([25, 20, 35], 5, true);\n        \n        // Arms\n        for(side = [-1, 1]) {\n            translate([side*10, 8, 5])\n            rotate([0, side*15, 0])\n            scale([0.8, 0.8, 1.2])\n            cylinder(h=20, d1=8, d2=6);\n        }\n    }\n}\n\n// Legs module\nmodule darkrai_legs() {\n    color($darkrai_body) {\n        for(side = [-1, 1]) {\n            translate([side*5, -5, -15])\n            scale([1, 1, 1.5])\n            cylinder(h=20, d=8);\n        }\n    }\n}\n\n// Shadow wings module\nmodule darkrai_wings() {\n    color($darkrai_body) {\n        for(side = [-1, 1]) {\n            // Main wing\n            translate([side*15, -5, 5])\n            rotate([0, side*20, 0])\n            scale([1, 0.2, 2])\n            rounded_box([25, 3, 30], 3);\n            \n            // Wing tips\n            translate([side*25, -5, 15])\n            rotate([0, side*30, side*10])\n            scale([0.6, 0.2, 1.5])\n            rounded_box([15, 2, 20], 2);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    darkrai_head();\n    darkrai_collar();\n    darkrai_body();\n    darkrai_legs();\n    darkrai_wings();\n}",
    "renders": true
  },
  {
    "pokemon": "shaymin",
    "openscad_code": "// Realistic Shaymin OpenSCAD Model (Medium Complexity)\n// Features: head, ears, eyes, nose, mouth, neck, body, legs, tail, flowers, grass back\n\n$fn = 32; // Smooth curves for 3D printing\n\n// Overall scale for 3D printing (70mm height)\nscale_factor = 0.7;\n\n// Main colors\ncolor_body = [0.82, 0.71, 0.55];      // Light tan/fur\ncolor_green = [0.39, 0.78, 0.48];     // Grass green\ncolor_pink = [0.96, 0.76, 0.82];      // Flower pink\ncolor_red = [0.78, 0.22, 0.22];       // Eye red\ncolor_black = [0.1, 0.1, 0.1];        // Black details\n\nmodule shaymin() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        union() {\n            // Head\n            translate([0, 0, 50]) {\n                color(color_body) {\n                    sphere(12);\n                    \n                    // Snout\n                    translate([0, 12, -2]) {\n                        scale([1, 1.5, 0.8]) sphere(6);\n                    }\n                    \n                    // Ears (2)\n                    for(side = [-1, 1]) {\n                        translate([side * 10, 0, 8]) {\n                            rotate([0, side * 20, 0]) {\n                                scale([1, 0.5, 2]) sphere(6);\n                            }\n                        }\n                    }\n                    \n                    // Eyes\n                    for(side = [-1, 1]) {\n                        translate([side * 6, 10, 2]) {\n                            color(color_red) sphere(2);\n                            translate([0, 1, 0.5]) color(color_black) sphere(1);\n                        }\n                    }\n                    \n                    // Nose\n                    translate([0, 16, 0]) {\n                        color(color_black) sphere(1.5);\n                    }\n                    \n                    // Mouth\n                    translate([0, 15, -4]) {\n                        color(color_black) {\n                            rotate([90, 0, 0]) \n                            cylinder(h=0.5, r1=2, r2=0);\n                        }\n                    }\n                }\n            }\n            \n            // Neck\n            translate([0, 0, 35]) {\n                color(color_body) {\n                    cylinder(h=10, r1=8, r2=6);\n                }\n            }\n            \n            // Body\n            translate([0, -5, 20]) {\n                color(color_body) {\n                    scale([1.2, 1.5, 1]) sphere(15);\n                }\n            }\n            \n            // Legs (4)\n            for(side = [-1, 1]) {\n                for(fb = [-1, 1]) {\n                    translate([side * 12, fb * 8, 10]) {\n                        color(color_body) {\n                            rotate([90, 0, 0]) {\n                                cylinder(h=18, r=4);\n                            }\n                        }\n                    }\n                }\n            }\n            \n            // Tail\n            translate([0, -20, 18]) {\n                color(color_body) {\n                    rotate([45, 0, 0]) {\n                        scale([0.8, 0.8, 1.5]) sphere(10);\n                    }\n                }\n            }\n            \n            // Grass back\n            translate([0, -5, 30]) {\n                color(color_green) {\n                    // Main grass mound\n                    difference() {\n                        scale([1.5, 1.8, 0.8]) sphere(15);\n                        translate([0, 0, 10]) cube([40, 40, 20], center=true);\n                    }\n                    \n                    // Grass spikes\n                    for(i = [0:35]) {\n                        rotate([0, 0, i * 10.3]) {\n                            translate([12 + sin(i) * 3, 0, 30]) {\n                                rotate([90, 0, 0]) {\n                                    scale([0.3, 0.3, 1 + sin(i*3) * 0.5]) {\n                                        cylinder(h=8, r1=1, r2=0);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            \n            // Flowers on grass (2 pink flowers)\n            for(angle = [0, 120, 240]) {\n                rotate([0, 0, angle]) {\n                    translate([15, 0, 35]) {\n                        color(color_pink) {\n                            // Flower petals\n                            for(p = [0:45:315]) {\n                                rotate([0, 0, p]) {\n                                    translate([3, 0, 0]) {\n                                        scale([0.3, 1.2, 0.1]) sphere(2);\n                                    }\n                                }\n                            }\n                            // Flower center\n                            translate([0, 0, 1]) {\n                                color([0.98, 0.92, 0.36]) sphere(1.5);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Render the model\nshaymin();",
    "renders": true
  },
  {
    "pokemon": "victini",
    "openscad_code": "// Victini in realistic style - medium complexity\n// 3D printable model with proper wall thickness\n\n$fn = 32;\nscale_factor = 1.5;\n\n// Main colors\ncolor_orange = [1, 0.5, 0];\ncolor_yellow = [1, 0.9, 0.2];\ncolor_blue = [0.2, 0.5, 0.9];\ncolor_black = [0.1, 0.1, 0.1];\ncolor_white = [0.95, 0.95, 0.95];\n\nmodule victini() {\n    scale([scale_factor, scale_factor, scale_factor])\n    union() {\n        // Main body\n        color(color_orange)\n        difference() {\n            sphere(d = 20);\n            translate([0, 0, -10]) cube([30, 30, 10], center = true);\n        }\n        \n        // Head\n        color(color_orange)\n        translate([0, 0, 12])\n        sphere(d = 18);\n        \n        // Ears\n        module ear(x_pos) {\n            color(color_orange)\n            translate([x_pos * 7, 0, 20])\n            rotate([x_pos * -15, 0, 0])\n            scale([0.8, 0.3, 2])\n            sphere(d = 8);\n            \n            color(color_yellow)\n            translate([x_pos * 7.5, 0, 23])\n            rotate([x_pos * -15, 0, 0])\n            scale([0.5, 0.2, 1.5])\n            sphere(d = 6);\n        }\n        \n        ear(1);\n        ear(-1);\n        \n        // Eyes\n        module eye(x_pos) {\n            color(color_blue)\n            translate([x_pos * 5, 4, 15])\n            sphere(d = 4.5);\n            \n            color(color_white)\n            translate([x_pos * 5.5, 4.5, 16])\n            sphere(d = 2);\n            \n            color(color_black)\n            translate([x_pos * 5.7, 4.7, 17])\n            sphere(d = 1);\n        }\n        \n        eye(1);\n        eye(-1);\n        \n        // Mouth\n        color(color_black)\n        translate([0, 6, 12])\n        scale([3, 0.5, 2])\n        sphere(d = 2);\n        \n        // Arms\n        module arm(x_pos) {\n            color(color_orange)\n            translate([x_pos * 8, 7, 0])\n            rotate([0, 0, x_pos * 30])\n            scale([0.7, 0.7, 1.2])\n            sphere(d = 8);\n        }\n        \n        arm(1);\n        arm(-1);\n        \n        // Feet\n        module foot(x_pos) {\n            color(color_orange)\n            translate([x_pos * 5, 0, -7])\n            scale([1.2, 2, 0.8])\n            sphere(d = 8);\n        }\n        \n        foot(1);\n        foot(-1);\n        \n        // Wings\n        module wing(x_pos) {\n            color(color_yellow)\n            translate([x_pos * 10, -5, 2])\n            rotate([0, 0, x_pos * -20])\n            scale([0.3, 2, 1.5])\n            sphere(d = 12);\n        }\n        \n        wing(1);\n        wing(-1);\n        \n        // Tail (V-shaped)\n        module tail_section(angle) {\n            color(color_orange)\n            rotate([0, 0, angle])\n            translate([0, -12, -5])\n            scale([1, 0.8, 2.5])\n            sphere(d = 8);\n            \n            color(color_yellow)\n            rotate([0, 0, angle])\n            translate([0, -14, -3])\n            scale([0.6, 0.5, 2])\n            sphere(d = 6);\n        }\n        \n        tail_section(20);\n        tail_section(-20);\n        tail_section(0);\n        \n        // Chest pattern\n        color(color_yellow)\n        translate([0, 4, 8])\n        scale([2.5, 3, 0.5])\n        sphere(d = 8);\n        \n        // Back pattern\n        color(color_yellow)\n        translate([0, -6, 8])\n        scale([4, 2, 0.5])\n        sphere(d = 8);\n        \n        // Fingers\n        module fingers(x_pos) {\n            for(i = [-1:1]) {\n                color(color_orange)\n                translate([x_pos * 9, 9 + i * 1.5, -2])\n                scale([0.3, 0.3, 1])\n                sphere(d = 3);\n            }\n        }\n        \n        fingers(1);\n        fingers(-1);\n    }\n}\n\n// Generate the model\nvictini();",
    "renders": true
  },
  {
    "pokemon": "snivy",
    "openscad_code": "// Snivy Pokemon - Realistic Style, Medium Complexity\n// Designed for 3D printing with proper wall thickness\n\n// Color definitions\n$fn = 50;\nwall_thickness = 2;\n\n// Main body\nmodule snivy_body() {\n    color([0.2, 0.6, 0.3]) {\n        union() {\n            // Torso\n            translate([0, 0, 10])\n                scale([1.2, 0.8, 1.5])\n                sphere(d=20);\n            \n            // Lower body\n            translate([0, 0, 0])\n                cylinder(h=15, d1=18, d2=12);\n        }\n    }\n}\n\n// Head\nmodule snivy_head() {\n    color([0.2, 0.6, 0.3]) {\n        union() {\n            // Main head shape\n            translate([0, 0, 30])\n                scale([1.1, 0.9, 1.2])\n                sphere(d=16);\n            \n            // Snout\n            translate([8, 0, 28])\n                rotate([0, -20, 0])\n                cylinder(h=8, d1=8, d2=6);\n        }\n    }\n}\n\n// Leaf tail\nmodule snivy_tail() {\n    color([0.3, 0.7, 0.4]) {\n        // Main tail stem\n        translate([-15, 0, 15])\n            rotate([0, 20, 0])\n            cylinder(h=35, d1=6, d2=2);\n        \n        // Leaf sections\n        for (i = [0:2]) {\n            translate([-20 - i*5, 0, 20 - i*3])\n                rotate([0, 30 + i*5, -45 + i*20])\n                scale([1, 0.2, 0.5])\n                sphere(d=12);\n        }\n    }\n}\n\n// Eyes\nmodule snivy_eyes() {\n    // Left eye\n    color([0.9, 0.9, 0.9])\n        translate([5, 5, 32])\n            sphere(d=4);\n    \n    color([0.1, 0.1, 0.1])\n        translate([6, 5, 33])\n            sphere(d=2);\n    \n    // Right eye\n    color([0.9, 0.9, 0.9])\n        translate([5, -5, 32])\n            sphere(d=4);\n    \n    color([0.1, 0.1, 0.1])\n        translate([6, -5, 33])\n            sphere(d=2);\n}\n\n// Leaf collar\nmodule snivy_collar() {\n    color([0.3, 0.7, 0.4]) {\n        // Back collar\n        translate([-5, 0, 25])\n            rotate([0, 90, 0])\n            cylinder(h=15, d1=8, d2=12);\n        \n        // Side leaves\n        translate([-2, 8, 23])\n            rotate([0, 30, 45])\n            scale([1, 0.15, 0.6])\n            sphere(d=10);\n        \n        translate([-2, -8, 23])\n            rotate([0, 30, -45])\n            scale([1, 0.15, 0.6])\n            sphere(d=10);\n    }\n}\n\n// Arms\nmodule snivy_arms() {\n    color([0.2, 0.6, 0.3]) {\n        // Left arm\n        translate([0, 10, 20])\n            rotate([0, 0, -45])\n            cylinder(h=12, d=4);\n        \n        translate([-2, 15, 20])\n            rotate([0, 0, -45])\n            cylinder(h=8, d=3);\n        \n        // Right arm\n        translate([0, -10, 20])\n            rotate([0, 0, 45])\n            cylinder(h=12, d=4);\n        \n        translate([-2, -15, 20])\n            rotate([0, 0, 45])\n            cylinder(h=8, d=3);\n    }\n}\n\n// Legs\nmodule snivy_legs() {\n    color([0.2, 0.6, 0.3]) {\n        // Left leg\n        translate([3, 5, 5])\n            rotate([0, 0, 15])\n            cylinder(h=10, d=5);\n        \n        // Right leg\n        translate([3, -5, 5])\n            rotate([0, 0, -15])\n            cylinder(h=10, d=5);\n    }\n}\n\n// Yellow collar marking\nmodule collar_marking() {\n    color([0.9, 0.8, 0.2]) {\n        translate([0, 0, 22])\n            difference() {\n                cylinder(h=3, d=22);\n                translate([0, 0, -1])\n                    cylinder(h=5, d=18);\n            }\n    }\n}\n\n// Assembly\nunion() {\n    snivy_body();\n    snivy_head();\n    snivy_tail();\n    snivy_eyes();\n    snivy_collar();\n    snivy_arms();\n    snivy_legs();\n    collar_marking();\n}",
    "renders": true
  },
  {
    "pokemon": "servine",
    "openscad_code": "// Servine Pokemon - Realistic Style\n// Medium complexity OpenSCAD model\n\n// Colors\n$fn = 32;\nscale_factor = 2;\nbody_color = [0, 0.5, 0.2];\nchest_color = [0.9, 0.9, 0.9];\neye_color = [1, 1, 1];\npupil_color = [0, 0, 0];\nleaf_color = [0, 0.7, 0.2];\nyellow_color = [1, 0.8, 0];\n\n// Main module\nmodule servine() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        // Body\n        union() {\n            // Torso\n            color(body_color) {\n                translate([0, 0, 10])\n                    scale([1.2, 0.8, 1.5])\n                    sphere(r=10);\n                \n                // Lower body\n                translate([0, 0, 0])\n                    cylinder(h=10, r1=10, r2=8);\n            }\n            \n            // Chest\n            color(chest_color) {\n                translate([0, -5, 10])\n                    scale([1, 0.5, 1.2])\n                    sphere(r=8);\n            }\n            \n            // Head\n            color(body_color) {\n                translate([0, 15, 25])\n                    scale([0.9, 1.2, 1])\n                    sphere(r=10);\n            }\n            \n            // Snout\n            color(body_color) {\n                translate([0, 23, 22])\n                    rotate([30, 0, 0])\n                    scale([0.8, 1.5, 0.8])\n                    cylinder(h=8, r1=4, r2=3);\n            }\n            \n            // Ears (leaf shaped)\n            color(leaf_color) {\n                // Left ear\n                translate([-8, 12, 30])\n                    rotate([0, 0, -30])\n                    scale([0.3, 1, 0.1])\n                    cylinder(h=12, r=3);\n                    \n                // Right ear\n                translate([8, 12, 30])\n                    rotate([0, 0, 30])\n                    scale([0.3, 1, 0.1])\n                    cylinder(h=12, r=3);\n            }\n            \n            // Eyes\n            color(eye_color) {\n                translate([-4, 18, 26])\n                    sphere(r=2);\n                translate([4, 18, 26])\n                    sphere(r=2);\n            }\n            \n            // Pupils\n            color(pupil_color) {\n                translate([-4, 19.5, 26.5])\n                    sphere(r=1);\n                translate([4, 19.5, 26.5])\n                    sphere(r=1);\n            }\n            \n            // Arms\n            color(body_color) {\n                // Left arm\n                translate([-12, 5, 15])\n                    rotate([0, 0, 45])\n                    cylinder(h=12, r=3);\n                    \n                // Right arm\n                translate([12, 5, 15])\n                    rotate([0, 0, -45])\n                    cylinder(h=12, r=3);\n                    \n                // Hands\n                translate([-18, 0, 15])\n                    sphere(r=3);\n                translate([18, 0, 15])\n                    sphere(r=3);\n            }\n            \n            // Legs\n            color(body_color) {\n                // Left leg\n                translate([-6, -5, 0])\n                    cylinder(h=8, r=3);\n                    \n                // Right leg\n                translate([6, -5, 0])\n                    cylinder(h=8, r=3);\n                    \n                // Feet\n                translate([-6, -8, 0])\n                    scale([1.5, 2, 0.5])\n                    sphere(r=3);\n                translate([6, -8, 0])\n                    scale([1.5, 2, 0.5])\n                    sphere(r=3);\n            }\n            \n            // Tail (vine)\n            color(leaf_color) {\n                translate([0, -12, 5])\n                    rotate([0, 0, 0])\n                    cylinder(h=20, r1=4, r2=2);\n                    \n                // Tail curve\n                translate([0, -25, 8])\n                    rotate([30, 0, 0])\n                    cylinder(h=15, r1=2, r2=1);\n            }\n            \n            // Leaf collar\n            color(leaf_color) {\n                for(i = [0:45:315]) {\n                    rotate([0, 0, i])\n                        translate([0, 8, 18])\n                        rotate([0, 30, 0])\n                        scale([0.2, 1, 0.5])\n                        cylinder(h=8, r=2);\n                }\n            }\n            \n            // Yellow markings\n            color(yellow_color) {\n                // Eye markings\n                translate([-7, 15, 25])\n                    scale([0.5, 2, 0.2])\n                    cylinder(h=6, r=1);\n                translate([7, 15, 25])\n                    scale([0.5, 2, 0.2])\n                    cylinder(h=6, r=1);\n                    \n                // Tail tip\n                translate([0, -35, 7])\n                    sphere(r=2);\n            }\n        }\n    }\n}\n\n// Generate the model\nservine();",
    "renders": true
  },
  {
    "pokemon": "serperior",
    "openscad_code": "// Serperior - Realistic Style Medium Complexity\n// 3D printable model with proper wall thickness and no overhangs\n\n$fn = 32;\nwall_thickness = 2;\n\nmodule head() {\n    color([0.2, 0.6, 0.3]) {\n        // Main head shape\n        translate([0, 0, 15]) {\n            rotate([0, 0, 0]) {\n                scale([1, 1.2, 1.3]) sphere(r=8);\n            }\n        }\n        \n        // Snout extension\n        translate([0, 10, 14]) {\n            scale([0.8, 1.5, 0.7]) sphere(r=6);\n        }\n        \n        // Lower jaw\n        translate([0, 8, 10]) {\n            rotate([15, 0, 0]) {\n                scale([0.7, 1, 0.5]) sphere(r=6);\n            }\n        }\n    }\n}\n\nmodule eyes() {\n    color([0.9, 0.9, 0.9]) {\n        // Left eye\n        translate([-3, 8, 17.5]) {\n            rotate([0, 15, 0]) {\n                scale([0.8, 1, 1]) sphere(r=1.5);\n            }\n        }\n        \n        // Right eye\n        translate([3, 8, 17.5]) {\n            rotate([0, -15, 0]) {\n                scale([0.8, 1, 1]) sphere(r=1.5);\n            }\n        }\n    }\n    \n    color([0.1, 0.1, 0.5]) {\n        // Left pupil\n        translate([-3, 8.5, 18]) {\n            sphere(r=0.7);\n        }\n        \n        // Right pupil\n        translate([3, 8.5, 18]) {\n            sphere(r=0.7);\n        }\n    }\n}\n\nmodule neck_ruff() {\n    color([0.3, 0.7, 0.4]) {\n        for(i = [0:30:330]) {\n            rotate([0, 0, i]) {\n                translate([0, -2, 12]) {\n                    rotate([0, 20, 0]) {\n                        scale([2.5, 0.5, 3]) cylinder(r1=3, r2=1, h=5);\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule neck() {\n    color([0.2, 0.6, 0.3]) {\n        for(i = [0:10:50]) {\n            translate([0, -i*0.8, 15-i*0.3]) {\n                scale([1-i*0.01, 1-i*0.01, 1-i*0.01]) {\n                    rotate([0, 0, sin(i*3)*5]) {\n                        sphere(r=7-i*0.1);\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule body_coils() {\n    color([0.2, 0.6, 0.3]) {\n        // Main body coils\n        for(t = [0:5:180]) {\n            translate([sin(t)*20, -cos(t)*20-40, 5+t*0.05]) {\n                rotate([0, 0, t]) {\n                    scale([1-t*0.002, 1-t*0.002, 1-t*0.002]) {\n                        sphere(r=6-t*0.02);\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule tail() {\n    color([0.2, 0.6, 0.3]) {\n        // Tail extension\n        translate([20, -60, 8]) {\n            rotate([0, 10, 45]) {\n                scale([0.8, 0.8, 2]) cylinder(r1=4, r2=2, h=15);\n            }\n        }\n    }\n}\n\nmodule leaf_collar() {\n    color([0.4, 0.8, 0.5]) {\n        // Main collar leaves\n        for(i = [0:45:315]) {\n            rotate([0, 0, i]) {\n                translate([0, -5, 12]) {\n                    scale([1, 2, 0.2]) {\n                        rotate([0, 30, 0]) {\n                            cylinder(r1=4, r2=0, h=6);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule yellow_markings() {\n    color([0.9, 0.8, 0.2]) {\n        // Head crest marking\n        translate([0, -3, 22]) {\n            scale([2, 0.5, 0.3]) sphere(r=3);\n        }\n        \n        // Neck markings\n        for(i = [10:15:40]) {\n            translate([0, -i*0.8, 15-i*0.3]) {\n                scale([3, 0.5, 0.3]) sphere(r=2);\n            }\n        }\n    }\n}\n\nmodule serperior_model() {\n    union() {\n        head();\n        eyes();\n        neck_ruff();\n        neck();\n        body_coils();\n        tail();\n        leaf_collar();\n        yellow_markings();\n    }\n}\n\n// Scale for 3D printing (80mm height)\nscale([1, 1, 1]) {\n    serperior_model();\n}",
    "renders": true
  },
  {
    "pokemon": "tepig",
    "openscad_code": "// Tepig realistic-style model for 3D printing\n// Color definitions\ntepig_orange = [0.96, 0.39, 0.15];\ntepig_black = [0.18, 0.18, 0.18];\ntepig_yellow = [0.98, 0.87, 0.30];\ntepig_pink = [0.96, 0.72, 0.82];\n\n// Scale factor for 3D printing (target ~80mm height)\nscale_factor = 80/100;\n\n// Main body\nmodule tepig_body() {\n    color(tepig_orange) {\n        // Torso\n        translate([0, 0, 35*scale_factor])\n            scale([1.2*scale_factor, 0.8*scale_factor, 1*scale_factor])\n            sphere(25*scale_factor);\n        \n        // Belly\n        color(tepig_yellow)\n        translate([0, -5*scale_factor, 20*scale_factor])\n            scale([0.8*scale_factor, 0.4*scale_factor, 0.6*scale_factor])\n            sphere(20*scale_factor);\n    }\n}\n\n// Head\nmodule tepig_head() {\n    color(tepig_orange) {\n        // Main head shape\n        translate([0, 35*scale_factor, 55*scale_factor])\n            scale([1.1*scale_factor, 1*scale_factor, 1.1*scale_factor])\n            sphere(20*scale_factor);\n        \n        // Snout\n        translate([0, 50*scale_factor, 52*scale_factor])\n            scale([0.8*scale_factor, 0.9*scale_factor, 0.7*scale_factor])\n            sphere(15*scale_factor);\n    }\n    \n    // Nose\n    color(tepig_black)\n    translate([0, 60*scale_factor, 52*scale_factor])\n        scale([0.3*scale_factor, 0.2*scale_factor, 0.2*scale_factor])\n        sphere(8*scale_factor);\n    \n    // Nostrils\n    for(x = [-3, 3]) {\n        translate([x*scale_factor, 62*scale_factor, 54*scale_factor])\n            sphere(2*scale_factor);\n    }\n}\n\n// Ears\nmodule tepig_ears() {\n    color(tepig_black)\n    for(side = [-1, 1]) {\n        translate([side*15*scale_factor, 25*scale_factor, 65*scale_factor]) {\n            rotate([0, -20, side*20])\n                scale([0.3*scale_factor, 0.6*scale_factor, 0.8*scale_factor])\n                sphere(10*scale_factor);\n            \n            // Inner ear\n            color(tepig_pink)\n            translate([0, 0, 3*scale_factor])\n                scale([0.2*scale_factor, 0.4*scale_factor, 0.6*scale_factor])\n                sphere(8*scale_factor);\n        }\n    }\n}\n\n// Eyes\nmodule tepig_eyes() {\n    color(tepig_black)\n    for(side = [-1, 1]) {\n        // Eye shape\n        translate([side*12*scale_factor, 40*scale_factor, 58*scale_factor]) {\n            scale([0.4*scale_factor, 0.3*scale_factor, 0.15*scale_factor])\n                sphere(10*scale_factor);\n            \n            // Eye highlight\n            color([1,1,1])\n            translate([2*scale_factor, 1*scale_factor, 2*scale_factor])\n                sphere(2*scale_factor);\n        }\n    }\n}\n\n// Legs\nmodule tepig_legs() {\n    color(tepig_orange)\n    for(side = [-1, 1]) {\n        // Front legs\n        translate([side*15*scale_factor, 20*scale_factor, 0]) {\n            cylinder(h=25*scale_factor, r=8*scale_factor, $fn=16);\n            // Hoof\n            color(tepig_black)\n            translate([0, 0, 25*scale_factor])\n                cylinder(h=5*scale_factor, r=9*scale_factor, $fn=16);\n        }\n        \n        // Rear legs\n        translate([side*12*scale_factor, -20*scale_factor, 0]) {\n            cylinder(h=30*scale_factor, r=10*scale_factor, $fn=16);\n            // Hoof\n            color(tepig_black)\n            translate([0, 0, 30*scale_factor])\n                cylinder(h=5*scale_factor, r=11*scale_factor, $fn=16);\n        }\n    }\n}\n\n// Tail\nmodule tepig_tail() {\n    color(tepig_black)\n    translate([0, -30*scale_factor, 25*scale_factor]) {\n        // Tail base\n        rotate([0, 90, 0])\n            cylinder(h=15*scale_factor, r1=8*scale_factor, r2=6*scale_factor, $fn=16);\n        \n        // Tail curl\n        translate([-15*scale_factor, 0, 0])\n            rotate([0, 0, -90])\n                scale([1*scale_factor, 1*scale_factor, 0.8*scale_factor])\n                difference() {\n                    cylinder(h=20*scale_factor, r=7*scale_factor, $fn=16);\n                    translate([0, 0, -1])\n                        cylinder(h=22*scale_factor, r=4*scale_factor, $fn=16);\n                }\n    }\n}\n\n// Markings on back\nmodule tepig_markings() {\n    color(tepig_black)\n    for(i = [0:2]) {\n        rotate([0, 0, 120*i])\n        translate([0, -5*scale_factor, 45*scale_factor])\n            scale([0.2*scale_factor, 0.4*scale_factor, 0.1*scale_factor])\n            sphere(10*scale_factor);\n    }\n}\n\n// Assembly\nunion() {\n    tepig_body();\n    tepig_head();\n    tepig_ears();\n    tepig_eyes();\n    tepig_legs();\n    tepig_tail();\n    tepig_markings();\n}",
    "renders": true
  },
  {
    "pokemon": "pignite",
    "openscad_code": "// Pignite Pokemon - Realistic Style, Medium Complexity\n// Dimensions: ~70mm height, 3D printable\n\n// Main colors\n$fn = 32;\n\nmodule pignite() {\n    // Body - main torso\n    color([0.85, 0.4, 0.3]) union() {\n        // Torso\n        translate([0, 0, 25])\n            scale([1.2, 1, 1.5])\n            sphere(15);\n        \n        // Belly\n        color([0.9, 0.9, 0.8])\n            translate([0, -14.5, 25])\n            scale([0.8, 0.3, 1])\n            sphere(15);\n    }\n    \n    // Head\n    color([0.85, 0.4, 0.3])\n        translate([0, 0, 45])\n        scale([0.9, 0.9, 1])\n        sphere(12);\n    \n    // Snout\n    color([0.85, 0.4, 0.3])\n        translate([0, 12, 45])\n        scale([0.7, 1, 0.6])\n        rotate([20, 0, 0])\n        sphere(8);\n    \n    // Nose\n    color([0.2, 0.2, 0.2])\n        translate([0, 17, 47])\n        sphere(2);\n    \n    // Eyes\n    color([0.1, 0.1, 0.1])\n    union() {\n        translate([-5, 8, 48])\n            sphere(2.5);\n        translate([5, 8, 48])\n            sphere(2.5);\n    }\n    \n    // Eye whites\n    color([1, 1, 1])\n    union() {\n        translate([-5, 8, 49.5])\n            scale([0.7, 0.7, 0.3])\n            sphere(2.5);\n        translate([5, 8, 49.5])\n            scale([0.7, 0.7, 0.3])\n            sphere(2.5);\n    }\n    \n    // Ears\n    color([0.85, 0.4, 0.3])\n    union() {\n        translate([-8, 0, 52])\n            rotate([0, 0, -30])\n            scale([0.4, 0.1, 0.8])\n            cylinder(10, 5, 3);\n        translate([8, 0, 52])\n            rotate([0, 0, 30])\n            scale([0.4, 0.1, 0.8])\n            cylinder(10, 5, 3);\n    }\n    \n    // Arms\n    color([0.85, 0.4, 0.3])\n    union() {\n        // Left arm\n        translate([-18, 0, 35])\n            rotate([0, 0, 20])\n            scale([0.6, 0.6, 1.2])\n            cylinder(12, 6, 5);\n        \n        // Right arm\n        translate([18, 0, 35])\n            rotate([0, 0, -20])\n            scale([0.6, 0.6, 1.2])\n            cylinder(12, 6, 5);\n    }\n    \n    // Hands\n    color([0.7, 0.3, 0.2])\n    union() {\n        translate([-20, 0, 25])\n            sphere(6);\n        translate([20, 0, 25])\n            sphere(6);\n    }\n    \n    // Legs\n    color([0.7, 0.3, 0.2])\n    union() {\n        translate([-8, -5, 10])\n            scale([0.7, 0.7, 0.8])\n            cylinder(15, 8, 7);\n        translate([8, -5, 10])\n            scale([0.7, 0.7, 0.8])\n            cylinder(15, 8, 7);\n    }\n    \n    // Feet\n    color([0.7, 0.3, 0.2])\n    union() {\n        translate([-8, -5, 0])\n            scale([1.5, 2, 0.8])\n            cube([8, 4, 5], center=true);\n        translate([8, -5, 0])\n            scale([1.5, 2, 0.8])\n            cube([8, 4, 5], center=true);\n    }\n    \n    // Tail\n    color([0.85, 0.4, 0.3])\n    translate([0, -18, 20])\n        rotate([-30, 0, 0])\n        scale([0.8, 0.8, 1.5])\n        sphere(10);\n    \n    // Tail tip\n    color([0.2, 0.2, 0.2])\n    translate([0, -25, 15])\n        sphere(4);\n    \n    // Black stripes pattern\n    color([0.2, 0.2, 0.2])\n    union() {\n        // Body stripes\n        translate([0, 0, 35])\n            rotate([90, 0, 0])\n            scale([1.3, 1.1, 0.5])\n            cylinder(8, 16, 16);\n        \n        translate([0, 0, 25])\n            rotate([90, 0, 0])\n            scale([1.3, 1.1, 0.5])\n            cylinder(8, 16, 16);\n        \n        // Arm stripes\n        translate([-18, 0, 30])\n            rotate([0, 0, 20])\n            rotate([90, 0, 0])\n            scale([0.7, 0.7, 0.5])\n            cylinder(4, 6, 6);\n        \n        translate([18, 0, 30])\n            rotate([0, 0, -20])\n            rotate([90, 0, 0])\n            scale([0.7, 0.7, 0.5])\n            cylinder(4, 6, 6);\n    }\n}\n\n// Generate the complete model\npignite();",
    "renders": true
  },
  {
    "pokemon": "emboar",
    "openscad_code": "// Emboar - Realistic Medium Complexity\n// Scale: 1 unit = 1mm, final size ~70mm tall\n\nmodule emboar() {\n    color([0.8,0.2,0.1]) {\n        // Body - main torso\n        union() {\n            translate([0,0,25]) \n                scale([1.2,1,1.5]) \n                    sphere(15, $fn=32);\n            \n            // Chest armor\n            difference() {\n                translate([0,8,30])\n                    scale([1.3,0.8,1.2])\n                        sphere(12, $fn=32);\n                translate([0,8,35])\n                    scale([1.2,0.7,1])\n                        sphere(11, $fn=32);\n            }\n            \n            // Belly pattern\n            color([0.9,0.9,0.8])\n                translate([0,10,25])\n                    scale([0.8,0.3,0.6])\n                        sphere(8, $fn=32);\n        }\n        \n        // Head\n        translate([0,20,45]) {\n            // Main head shape\n            scale([0.9,1.2,1.1])\n                sphere(12, $fn=32);\n            \n            // Snout\n            translate([0,12,0]) {\n                rotate([90,0,0])\n                    cylinder(h=15, r1=8, r2=6, $fn=16);\n                \n                // Nose\n                color([0.1,0.1,0.1])\n                    translate([0,7,0])\n                        sphere(2, $fn=16);\n            }\n            \n            // Eyes\n            color([0.1,0.1,0.1])\n            for(x=[-5,5]) {\n                translate([x,8,3])\n                    sphere(2, $fn=16);\n            }\n            \n            // Ears\n            color([0.7,0.15,0.1])\n            for(x=[-8,8]) {\n                translate([x,0,8])\n                    rotate([0,20*x,0])\n                        scale([0.3,1,1.5])\n                            sphere(4, $fn=16);\n            }\n            \n            // Head flame collar\n            color([1,0.5,0])\n            for(a=[0:45:315]) {\n                translate([0,0,0])\n                    rotate([0,0,a])\n                        translate([0,12,6])\n                            scale([0.3,0.3,1.5])\n                                rotate([45,0,0])\n                                    cylinder(h=8, r1=2, r2=0.1, $fn=8);\n            }\n        }\n        \n        // Arms\n        module arm(side) {\n            translate([side*12,10,35]) {\n                // Upper arm\n                rotate([0,0,side*20])\n                    cylinder(h=15, r=5, $fn=16);\n                \n                // Elbow armor\n                translate([0,0,15])\n                    sphere(6, $fn=16);\n                \n                // Lower arm\n                translate([0,-3,15])\n                    rotate([0,side*30,0])\n                        cylinder(h=12, r=4, $fn=16);\n                \n                // Hand\n                translate([0,-6,25])\n                    rotate([0,side*45,0])\n                        scale([1,1.2,1])\n                            sphere(5, $fn=16);\n                \n                // Wrist bands\n                color([0.8,0.8,0.8])\n                translate([0,-3,22])\n                    rotate([0,side*30,0])\n                        scale([1.2,1.2,0.5])\n                            cylinder(h=3, r=4.5, $fn=16);\n            }\n        }\n        \n        arm(1);\n        arm(-1);\n        \n        // Legs\n        module leg(side) {\n            translate([side*8,-8,15]) {\n                // Thigh\n                rotate([0,0,side*-10])\n                    cylinder(h=15, r=6, $fn=16);\n                \n                // Knee\n                translate([0,0,15])\n                    sphere(7, $fn=16);\n                \n                // Lower leg\n                translate([0,-5,15])\n                    rotate([0,side*-20,0])\n                        cylinder(h=15, r=5, $fn=16);\n                \n                // Foot\n                translate([0,-8,28])\n                    scale([1.5,2,0.8])\n                        sphere(5, $fn=16);\n                \n                // Ankle bands\n                color([0.8,0.8,0.8])\n                translate([0,-5,25])\n                    rotate([0,side*-20,0])\n                        scale([1.2,1.2,0.5])\n                            cylinder(h=3, r=5.5, $fn=16);\n            }\n        }\n        \n        leg(1);\n        leg(-1);\n        \n        // Tail\n        translate([0,-15,20]) {\n            rotate([0,30,0])\n                cylinder(h=20, r1=6, r2=3, $fn=16);\n            \n            // Tail flame\n            color([1,0.5,0])\n            for(a=[0:60:300]) {\n                rotate([a-30,0,0])\n                    translate([0,0,20])\n                        scale([0.3,0.3,1])\n                            cylinder(h=8, r1=2, r2=0.1, $fn=8);\n            }\n        }\n        \n        // Shoulder armor\n        color([0.8,0.8,0.8])\n        for(x=[-12,12]) {\n            translate([x,12,35])\n                rotate([0,0,x*-5])\n                    scale([1.2,1,0.8])\n                        sphere(6, $fn=16);\n        }\n    }\n}\n\nemboar();",
    "renders": true
  },
  {
    "pokemon": "oshawott",
    "openscad_code": "// Oshawott realistic style - 3D printable\n// Overall height ~70mm\n\n$fn = 36;\n\nmodule oshawott() {\n    color(\"LightBlue\") head();\n    color(\"LightBlue\") body();\n    color(\"LightBlue\") arms();\n    color(\"LightBlue\") legs();\n    color(\"LightBlue\") tail();\n    color(\"Tan\") feet();\n    color(\"Tan\") nose();\n    color(\"White\") face_disc();\n    color(\"Black\") eyes();\n    color(\"DarkRed\") mouth();\n    color(\"Black\") ears();\n    color(\"Tan\") scalchop();\n}\n\nmodule head() {\n    translate([0, 0, 55])\n    sphere(d = 25);\n}\n\nmodule body() {\n    translate([0, 0, 30])\n    sphere(d = 30);\n}\n\nmodule arms() {\n    // Left arm\n    translate([-15, 10, 40])\n    rotate([0, 0, 20])\n    cylinder(h = 20, d1 = 8, d2 = 6, center = true);\n    \n    // Right arm\n    mirror([1, 0, 0])\n    translate([-15, 10, 40])\n    rotate([0, 0, 20])\n    cylinder(h = 20, d1 = 8, d2 = 6, center = true);\n}\n\nmodule legs() {\n    // Left leg\n    translate([-8, 0, 15])\n    cylinder(h = 15, d = 10);\n    \n    // Right leg\n    translate([8, 0, 15])\n    cylinder(h = 15, d = 10);\n}\n\nmodule tail() {\n    translate([0, -15, 25])\n    rotate([20, 0, 0])\n    cylinder(h = 25, d1 = 12, d2 = 6, center = true);\n}\n\nmodule feet() {\n    // Left foot\n    translate([-8, -5, 5])\n    scale([1.5, 1, 0.5])\n    sphere(d = 10);\n    \n    // Right foot\n    translate([8, -5, 5])\n    scale([1.5, 1, 0.5])\n    sphere(d = 10);\n}\n\nmodule nose() {\n    translate([0, 12, 55])\n    scale([1, 0.8, 0.6])\n    sphere(d = 5);\n}\n\nmodule face_disc() {\n    translate([0, 12, 55])\n    cylinder(h = 1, d = 20);\n}\n\nmodule eyes() {\n    // Left eye\n    translate([-7, 12, 58])\n    scale([1, 1.2, 0.5])\n    sphere(d = 5);\n    \n    // Right eye\n    translate([7, 12, 58])\n    scale([1, 1.2, 0.5])\n    sphere(d = 5);\n}\n\nmodule mouth() {\n    translate([0, 15, 52])\n    rotate([90, 0, 0])\n    cylinder(h = 1, d1 = 8, d2 = 0);\n}\n\nmodule ears() {\n    // Left ear\n    translate([-10, 0, 68])\n    rotate([0, 20, -30])\n    cylinder(h = 15, d1 = 6, d2 = 4);\n    \n    // Right ear\n    translate([10, 0, 68])\n    rotate([0, 20, 30])\n    cylinder(h = 15, d1 = 6, d2 = 4);\n}\n\nmodule scalchop() {\n    // Position on belly\n    translate([0, 10, 35])\n    rotate([90, 0, 0])\n    cylinder(h = 2, d = 15);\n    \n    // Detailing lines\n    for(i = [-5:5:5]) {\n        translate([i, 10, 36])\n        cube([0.5, 12, 1]);\n    }\n}\n\noshawott();",
    "renders": true
  },
  {
    "pokemon": "dewott",
    "openscad_code": "// Dewott - Realistic Style, Medium Complexity\n// 3D Printable, ~80mm height\n\n// Colors\ncolor_body = [0.1, 0.25, 0.4];      // Dark blue\ncolor_shell = [0.95, 0.95, 0.9];    // Off-white\ncolor_face = [0.1, 0.1, 0.1];       // Black\ncolor_nose = [0.05, 0.05, 0.05];    // Darker black\ncolor_scallop = [0.85, 0.85, 0.8];  // Light beige\n\n// Overall scale\nscale(0.8);\n\n// Main body\nunion() {\n    // Torso\n    color(color_body)\n    translate([0, 0, 10])\n    scale([1.2, 1, 1.5])\n    sphere(20);\n\n    // Head\n    color(color_body)\n    translate([0, 0, 45])\n    scale([0.9, 0.8, 1.1])\n    sphere(18);\n\n    // Snout\n    color(color_body)\n    translate([0, -15, 40])\n    scale([0.7, 1.2, 0.8])\n    sphere(12);\n\n    // Ears\n    module ear(side) {\n        translate([side * 12, 5, 55])\n        rotate([0, side * 10, 0])\n        scale([0.3, 1.5, 2])\n        sphere(8);\n    }\n    ear(1);\n    ear(-1);\n\n    // Arms\n    module arm(side) {\n        translate([side * 22, 0, 30])\n        rotate([0, 0, side * -20])\n        cylinder(h = 25, r1 = 8, r2 = 6);\n        \n        // Hand with shell\n        translate([side * 30, -5, 30])\n        rotate([90, 0, side * 20])\n        scale([1.2, 0.8, 0.3])\n        sphere(8);\n        \n        color(color_shell)\n        translate([side * 32, -8, 30])\n        rotate([0, 90, 0])\n        cylinder(h = 12, r1 = 4, r2 = 6);\n    }\n    arm(1);\n    arm(-1);\n\n    // Legs\n    module leg(side) {\n        translate([side * 10, 0, 0])\n        cylinder(h = 25, r1 = 10, r2 = 8);\n        \n        // Feet\n        translate([side * 12, -5, -2])\n        scale([1.5, 2, 0.8])\n        sphere(8);\n    }\n    leg(1);\n    leg(-1);\n\n    // Tail\n    color(color_body)\n    translate([0, 15, 15])\n    rotate([0, 0, 45])\n    scale([1, 0.8, 2])\n    sphere(15);\n\n    // Tail scallops (2 flat shells)\n    for(i = [0:1]) {\n        color(color_scallop)\n        translate([0, 20 + i * 8, 25 - i * 10])\n        rotate([0, -30, 0])\n        scale([0.1, 1.2, 1.5])\n        sphere(8);\n    }\n\n    // Facial features\n    // Eyes\n    module eye(side) {\n        color(color_face)\n        translate([side * 8, -22, 48])\n        scale([1, 1.2, 0.5])\n        sphere(4);\n        \n        // Eye highlight\n        color([1, 1, 1])\n        translate([side * 9, -22, 50])\n        sphere(1);\n    }\n    eye(1);\n    eye(-1);\n\n    // Nose\n    color(color_nose)\n    translate([0, -25, 45])\n    sphere(2);\n\n    // Mouth\n    color(color_face)\n    translate([0, -28, 42])\n    scale([1, 0.3, 0.2])\n    sphere(3);\n\n    // Chest scallop\n    color(color_shell)\n    translate([0, 5, 35])\n    rotate([90, 0, 0])\n    scale([1.5, 1.2, 0.3])\n    sphere(8);\n\n    // Forehead marking\n    color(color_shell)\n    translate([0, -10, 58])\n    scale([0.3, 0.8, 0.2])\n    sphere(8);\n}",
    "renders": true
  },
  {
    "pokemon": "samurott",
    "openscad_code": "// Realistic Samurott OpenSCAD Model - Medium Complexity\n// Scaled for 3D printing - approximately 80mm height\n\n// Color definitions\ncolor_body = [0.1, 0.15, 0.4];\ncolor_shell = [0.85, 0.85, 0.8];\ncolor_accents = [0.9, 0.9, 0.95];\ncolor_eyes = [0.95, 0.9, 0.2];\n\nmodule samurott() {\n    // Main body\n    color(color_body)\n    union() {\n        // Torso\n        translate([0, 0, 20])\n        scale([1.2, 0.8, 1.5])\n        sphere(15);\n        \n        // Lower body\n        translate([0, 0, 8])\n        scale([1, 0.9, 1.2])\n        cylinder(15, 12, 10);\n        \n        // Abdomen\n        translate([0, 0, 5])\n        scale([0.9, 0.7, 0.8])\n        sphere(10);\n    }\n    \n    // Shell armor pieces\n    color(color_shell)\n    union() {\n        // Chest armor\n        translate([0, -5, 22])\n        rotate([90, 0, 0])\n        scale([1.3, 1.5, 0.3])\n        cylinder(8, 5, 8);\n        \n        // Shoulder guards\n        for(side = [-1, 1]) {\n            translate([side * 15, 0, 28])\n            rotate([0, 30 * side, 0])\n            scale([1, 0.7, 1.2])\n            sphere(8);\n        }\n        \n        // Leg armor plates\n        for(side = [-1, 1]) {\n            translate([side * 8, -5, 15])\n            rotate([0, 20 * side, 0])\n            scale([1.5, 0.3, 2])\n            cube([8, 3, 10]);\n        }\n    }\n    \n    // Head\n    color(color_body)\n    union() {\n        // Main head\n        translate([0, -25, 35])\n        scale([1.1, 1.3, 1.2])\n        sphere(12);\n        \n        // Snout\n        translate([0, -38, 33])\n        scale([0.8, 0.6, 0.7])\n        rotate([10, 0, 0])\n        cylinder(12, 8, 6);\n    }\n    \n    // Ears\n    color(color_body)\n    for(side = [-1, 1]) {\n        translate([side * 8, -20, 48])\n        rotate([0, 15, side * 20])\n        scale([0.4, 0.2, 1.2])\n        cylinder(12, 3, 5);\n    }\n    \n    // Crest\n    color(color_accents)\n    translate([0, -35, 45])\n    rotate([30, 0, 0])\n    scale([0.3, 2, 0.1])\n    cylinder(15, 2, 5);\n    \n    // Arms\n    color(color_body)\n    for(side = [-1, 1]) {\n        // Upper arm\n        translate([side * 18, -5, 25])\n        rotate([0, 0, side * 30])\n        scale([0.5, 0.5, 1.2])\n        cylinder(12, 5, 4);\n        \n        // Forearm\n        translate([side * 25, -10, 18])\n        rotate([0, 0, side * 45])\n        scale([0.4, 0.4, 1])\n        cylinder(10, 4, 3);\n        \n        // Hand with shell blade\n        translate([side * 30, -15, 15])\n        union() {\n            scale([0.8, 0.6, 0.4])\n            sphere(5);\n            \n            // Shell blade\n            color(color_shell)\n            translate([side * 3, -8, 0])\n            rotate([0, 0, side * 20])\n            scale([0.2, 2.5, 0.05])\n            cylinder(10, 3, 1);\n        }\n    }\n    \n    // Legs\n    color(color_body)\n    for(side = [-1, 1]) {\n        // Thigh\n        translate([side * 10, 0, 10])\n        scale([0.6, 0.6, 1.5])\n        cylinder(10, 6, 5);\n        \n        // Lower leg\n        translate([side * 12, 0, 0])\n        scale([0.5, 0.5, 1.2])\n        cylinder(8, 5, 4);\n        \n        // Foot\n        translate([side * 13, 0, -8])\n        scale([1.2, 0.8, 0.6])\n        sphere(6);\n    }\n    \n    // Tail\n    color(color_body)\n    union() {\n        // Tail base\n        translate([0, 15, 15])\n        rotate([30, 0, 0])\n        scale([0.8, 0.8, 2])\n        cylinder(20, 8, 4);\n        \n        // Tail armor\n        color(color_shell)\n        for(i = [0:2]) {\n            translate([0, 15 + i * 7, 15 - i * 3])\n            rotate([30 - i * 10, 0, 0])\n            scale([1 - i * 0.2, 0.3, 0.1])\n            cylinder(8, 6 - i, 5 - i);\n        }\n    }\n    \n    // Eyes\n    color(color_eyes)\n    for(side = [-1, 1]) {\n        translate([side * 5, -38, 37])\n        scale([1, 0.8, 0.5])\n        sphere(2);\n    }\n    \n    // Nose\n    color(color_body)\n    translate([0, -45, 33])\n    scale([0.5, 0.5, 0.3])\n    sphere(1.5);\n    \n    // Mouth line\n    color([0, 0, 0])\n    translate([0, -45, 31])\n    scale([3, 0.2, 0.2])\n    cube([1, 1, 1]);\n    \n    // Whiskers\n    color(color_accents)\n    for(side = [-1, 1]) {\n        translate([side * 12, -35, 32])\n        rotate([0, 0, side * 15])\n        scale([0.1, 2, 0.1])\n        cylinder(8, 0.5, 0.5);\n    }\n}\n\n// Render the model\nsamurott();",
    "renders": true
  },
  {
    "pokemon": "patrat",
    "openscad_code": "// Patrat in realistic style - medium complexity\n// 3D printable with no overhangs\n\n$fa = 2;\n$fs = 0.5;\n\n// Colors\nbody_color = [0.82, 0.71, 0.55];\naccent_color = [0.39, 0.25, 0.14];\neye_color = [0.15, 0.12, 0.1];\nwhite_color = [0.95, 0.95, 0.9];\nred_color = [0.8, 0.2, 0.2];\n\n// Main body\nmodule body() {\n    color(body_color)\n    difference() {\n        union() {\n            // Main torso\n            cube([35, 30, 45], center=true);\n            \n            // Head extension\n            translate([0, 0, 20])\n            cube([32, 28, 20], center=true);\n        }\n        \n        // Neck indent\n        translate([0, 0, 12])\n        cube([25, 25, 8], center=true);\n    }\n}\n\n// Ears\nmodule ears() {\n    color(body_color)\n    union() {\n        // Left ear\n        translate([-15, 0, 35])\n        rotate([0, 10, -15])\n        scale([1, 0.7, 2.5])\n        cylinder(h=12, r1=5, r2=3, center=true);\n        \n        // Right ear\n        translate([15, 0, 35])\n        rotate([0, 10, 15])\n        scale([1, 0.7, 2.5])\n        cylinder(h=12, r1=5, r2=3, center=true);\n    }\n}\n\n// Eyes\nmodule eyes() {\n    union() {\n        // Eye sockets\n        color(eye_color)\n        union() {\n            translate([-10, 10, 25])\n            sphere(r=6);\n            \n            translate([10, 10, 25])\n            sphere(r=6);\n        }\n        \n        // Eye whites\n        color(white_color)\n        union() {\n            translate([-10, 11, 25])\n            sphere(r=4);\n            \n            translate([10, 11, 25])\n            sphere(r=4);\n        }\n        \n        // Pupils\n        color(eye_color)\n        union() {\n            translate([-10, 12, 27])\n            sphere(r=2);\n            \n            translate([10, 12, 27])\n            sphere(r=2);\n        }\n        \n        // Red markings around eyes\n        color(red_color)\n        union() {\n            translate([-10, 8, 25])\n            scale([1.5, 0.3, 1])\n            sphere(r=8);\n            \n            translate([10, 8, 25])\n            scale([1.5, 0.3, 1])\n            sphere(r=8);\n        }\n    }\n}\n\n// Nose\nmodule nose() {\n    color(accent_color)\n    translate([0, 15, 20])\n    sphere(r=3);\n}\n\n// Tail\nmodule tail() {\n    color(body_color)\n    union() {\n        // Tail base\n        translate([0, -20, -5])\n        cylinder(h=25, r1=6, r2=4, center=true);\n        \n        // Tail curl\n        translate([0, -35, 5])\n        rotate([90, 0, 0])\n        rotate_extrude(angle=180, $fn=20)\n        translate([8, 0, 0])\n        circle(r=3);\n    }\n}\n\n// Paws\nmodule paws() {\n    color(body_color)\n    for(x=[-12, 12]) {\n        translate([x, 0, -20])\n        cube([8, 15, 10], center=true);\n        \n        // Paw pads\n        color(accent_color)\n        translate([x, 8, -20])\n        cube([6, 3, 2], center=true);\n    }\n}\n\n// Cheek pouches\nmodule cheeks() {\n    color(body_color)\n    union() {\n        translate([-15, 12, 15])\n        sphere(r=5);\n        \n        translate([15, 12, 15])\n        sphere(r=5);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    ears();\n    eyes();\n    nose();\n    tail();\n    paws();\n    cheeks();\n}",
    "renders": true
  },
  {
    "pokemon": "watchog",
    "openscad_code": "// Watchog - OpenSCAD realistic medium complexity model\n// Size: ~70mm tall\n\n// Parameters\n$fn = 32;\nbody_color = [0.4, 0.35, 0.25];  // Brown\nstripe_color = [0.15, 0.15, 0.15];  // Dark brown/black\neye_color = [0.9, 0.9, 0.1];  // Yellow\nnose_color = [0.3, 0.3, 0.3];  // Dark gray\n\n// Main body\nmodule body() {\n    color(body_color)\n    union() {\n        // Torso\n        translate([0, 0, 12])\n        scale([1.2, 0.9, 1.5])\n        sphere(15);\n        \n        // Lower body\n        translate([0, 0, 5])\n        scale([1, 1, 0.8])\n        cylinder(h=10, r=18);\n    }\n}\n\n// Head with ears\nmodule head() {\n    color(body_color)\n    union() {\n        // Main head shape\n        translate([0, 0, 45])\n        scale([1.1, 0.9, 1.2])\n        sphere(12);\n        \n        // Snout\n        translate([0, 18, 42])\n        scale([0.8, 1.5, 0.6])\n        sphere(8);\n        \n        // Ears\n        for(x = [-15, 15]) {\n            translate([x, 0, 55])\n            rotate([0, 20 * (x > 0 ? -1 : 1), 0])\n            scale([0.4, 0.2, 2])\n            cylinder(h=15, r=5);\n        }\n    }\n}\n\n// Eyes with glow effect\nmodule eyes() {\n    for(x = [-8, 8]) {\n        // Eye whites\n        color([0.95, 0.95, 0.95])\n        translate([x, 15, 47])\n        sphere(4);\n        \n        // Eye shine\n        color(eye_color)\n        translate([x, 16, 47])\n        scale([0.8, 0.8, 0.8])\n        sphere(3);\n        \n        // Pupil\n        color(stripe_color)\n        translate([x, 17, 48])\n        sphere(1.5);\n    }\n}\n\n// Nose\nmodule nose() {\n    color(nose_color)\n    translate([0, 25, 42])\n    scale([0.8, 0.3, 0.8])\n    sphere(2.5);\n}\n\n// Stripes pattern\nmodule stripes() {\n    color(stripe_color) {\n        // Head stripes\n        for(i = [-1, 1]) {\n            translate([i * 6, 10, 50])\n            rotate([90, 0, 90])\n            scale([0.2, 2, 0.1])\n            cylinder(h=15, r=3);\n        }\n        \n        // Body stripes\n        for(z = [15, 25, 35]) {\n            translate([0, 0, z])\n            scale([1.3, 1.3, 0.1])\n            cylinder(h=20, r=16);\n        }\n    }\n}\n\n// Arms\nmodule arms() {\n    for(side = [-1, 1]) {\n        color(body_color)\n        translate([side * 20, 0, 30])\n        rotate([0, 45, 0])\n        scale([0.4, 0.4, 1.2])\n        cylinder(h=15, r=5);\n    }\n}\n\n// Legs\nmodule legs() {\n    for(side = [-1, 1]) {\n        color(body_color)\n        union() {\n            // Upper leg\n            translate([side * 10, 0, 12])\n            scale([0.8, 0.8, 1.5])\n            sphere(5);\n            \n            // Lower leg\n            translate([side * 12, 0, 5])\n            scale([0.8, 0.8, 1.2])\n            cylinder(h=8, r=4);\n            \n            // Foot\n            translate([side * 12, 5, 1])\n            scale([1.2, 2, 0.6])\n            sphere(4);\n        }\n    }\n}\n\n// Tail\nmodule tail() {\n    color(body_color)\n    difference() {\n        // Main tail\n        translate([0, -25, 20])\n        rotate([45, 0, 0])\n        scale([0.8, 0.8, 3])\n        cylinder(h=20, r=6);\n        \n        // Tail stripes\n        color(stripe_color)\n        for(h = [5, 10, 15]) {\n            translate([0, -25 - h * 0.7, 20 - h * 0.7])\n            rotate([45, 0, 0])\n            scale([0.85, 0.85, 0.1])\n            cylinder(h=20, r=7);\n        }\n    }\n}\n\n// Assembly\nrotate([0, 0, 0])\nunion() {\n    body();\n    head();\n    eyes();\n    nose();\n    stripes();\n    arms();\n    legs();\n    tail();\n}",
    "renders": true
  },
  {
    "pokemon": "lillipup",
    "openscad_code": "// Lillipup OpenSCAD Model - Realistic Style, Medium Complexity\n// Overall dimensions: ~60mm long, ~50mm tall, ~45mm wide\n\ncolor(\"tan\") \nunion() {\n    // Main body\n    translate([0, 0, 15]) \n    scale([1.2, 1.0, 1.0]) \n    sphere(d=30, $fn=32);\n    \n    // Head\n    translate([0, 20, 30]) \n    sphere(d=25, $fn=32);\n    \n    // Snout\n    color(\"peru\") {\n        translate([0, 32, 28]) \n        scale([0.8, 1.2, 0.7]) \n        sphere(d=15, $fn=32);\n    }\n    \n    // Ears - left\n    color(\"tan\") {\n        translate([-10, 15, 40]) \n        rotate([0, -20, -30]) \n        scale([0.4, 0.2, 1.0]) \n        cylinder(h=15, d1=8, d2=4, $fn=16);\n    }\n    \n    // Ears - right\n    color(\"tan\") {\n        translate([10, 15, 40]) \n        mirror([-1, 0, 0]) \n        rotate([0, -20, -30]) \n        scale([0.4, 0.2, 1.0]) \n        cylinder(h=15, d1=8, d2=4, $fn=16);\n    }\n    \n    // Front legs\n    module front_leg(x) {\n        color(\"tan\") \n        translate([x, 12, 0]) \n        scale([0.6, 0.6, 1.0]) \n        cylinder(h=15, d=10, $fn=16);\n    }\n    \n    front_leg(-7);\n    front_leg(7);\n    \n    // Hind legs\n    module hind_leg(x) {\n        color(\"tan\") \n        translate([x, -12, 0]) \n        scale([0.7, 0.7, 1.1]) \n        cylinder(h=18, d=12, $fn=16);\n    }\n    \n    hind_leg(-9);\n    hind_leg(9);\n    \n    // Tail\n    color(\"peru\") {\n        translate([0, -20, 20]) \n        rotate([0, 40, 0]) \n        scale([0.3, 0.3, 1.5]) \n        cylinder(h=20, d=8, $fn=16);\n        \n        translate([0, -28, 28]) \n        sphere(d=10, $fn=16);\n    }\n    \n    // Eyes\n    module eye(x) {\n        color(\"black\") \n        translate([x, 32, 33]) \n        sphere(d=3, $fn=16);\n        \n        color(\"white\") \n        translate([x + 0.5, 32.5, 34]) \n        sphere(d=1, $fn=16);\n    }\n    \n    eye(-5);\n    eye(5);\n    \n    // Nose\n    color(\"black\") \n    translate([0, 38, 30]) \n    sphere(d=2, $fn=16);\n    \n    // Mouth\n    color(\"black\") \n    translate([0, 36, 26]) \n    rotate([90, 0, 0]) \n    cylinder(h=0.5, d1=4, d2=0, $fn=16);\n    \n    // Fur tufts on head\n    for(i = [-1, 0, 1]) {\n        color(\"peru\") \n        translate([i * 4, 22, 42]) \n        rotate([0, -20, i * 10]) \n        scale([0.3, 0.3, 0.8]) \n        cylinder(h=8, d=4, $fn=8);\n    }\n    \n    // Chest fur\n    color(\"peru\") \n    translate([0, 15, 20]) \n    rotate([-30, 0, 0]) \n    scale([0.8, 0.8, 0.5]) \n    sphere(d=12, $fn=16);\n    \n    // Paws - front\n    module paw(x) {\n        color(\"peru\") \n        translate([x, 12, -7]) \n        sphere(d=6, $fn=16);\n    }\n    \n    paw(-7);\n    paw(7);\n    \n    // Paws - back\n    module back_paw(x) {\n        color(\"peru\") \n        translate([x, -12, -9]) \n        sphere(d=7, $fn=16);\n    }\n    \n    back_paw(-9);\n    back_paw(9);\n}",
    "renders": true
  },
  {
    "pokemon": "herdier",
    "openscad_code": "// Herdier realistic style - medium complexity\n// Overall dimensions approximately 80mm length\n\n// Colors\n$fa = 2; $fs = 0.5;\n\n// Main body\ntranslate([0, -10, 25]) {\n    color(\"tan\") {\n        difference() {\n            // Body\n            hull() {\n                sphere(15);\n                translate([0, 20, 0]) sphere(18);\n                translate([0, 40, 5]) sphere(15);\n            }\n            \n            // Neck indent\n            translate([0, 45, 20]) rotate([45, 0, 0]) \n                cube([30, 30, 30], center=true);\n        }\n    }\n}\n\n// Head\ntranslate([0, 55, 35]) {\n    color(\"tan\") {\n        difference() {\n            // Main head shape\n            scale([1.2, 1, 1.2]) sphere(20);\n            \n            // Muzzle\n            translate([0, 25, -5]) scale([0.8, 1.5, 0.8]) sphere(10);\n        }\n    }\n}\n\n// Snout/muzzle detail\ntranslate([0, 72, 30]) {\n    color(\"tan\") \n        cylinder(h=15, r1=8, r2=6, center=true);\n}\n\n// Nose\ntranslate([0, 78, 30]) {\n    color(\"black\") sphere(2.5);\n}\n\n// Eyes\nmodule eye(x, y, z) {\n    translate([x, y, z]) {\n        color(\"black\") sphere(3);\n        color(\"white\") translate([-1, 0.5, 0.5]) sphere(1);\n    }\n}\n\neye(8, 65, 35);\neye(-8, 65, 35);\n\n// Ears\nmodule ear(x) {\n    translate([x, 50, 45]) {\n        rotate([0, x*5, 10]) {\n            color(\"tan\") {\n                hull() {\n                    translate([0, 0, 0]) sphere(3);\n                    translate([0, 5, 12]) sphere(5);\n                }\n            }\n        }\n    }\n}\n\near(12);\near(-12);\n\n// Mane/tufts\nmodule mane_tuft(x, y, z, rot) {\n    translate([x, y, z]) {\n        rotate([0, rot, 0]) {\n            color(\"darkblue\") {\n                cylinder(h=12, r=4, center=false);\n            }\n        }\n    }\n}\n\n// Back mane\nfor(i = [0:3]) {\n    mane_tuft(0, 35-i*10, 40, 10);\n}\n\n// Side tufts\nmane_tuft(15, 35, 25, 5);\nmane_tuft(-15, 35, 25, -5);\n\n// Legs\nmodule leg(x, y, angle) {\n    translate([x, y, 12]) {\n        rotate([0, angle, 0]) {\n            color(\"tan\") {\n                cylinder(h=25, r1=5, r2=4);\n                translate([0, 0, -12.5]) sphere(5);\n            }\n        }\n    }\n}\n\nleg(10, 20, 10);\nleg(-10, 20, -10);\nleg(8, -5, -10);\nleg(-8, -5, 10);\n\n// Tail\ntranslate([0, -25, 28]) {\n    rotate([0, 30, 0]) {\n        color(\"tan\") {\n            hull() {\n                sphere(4);\n                translate([0, -20, 0]) sphere(5);\n            }\n        }\n    }\n}\n\n// Tail tuft\ntranslate([0, -40, 28]) {\n    color(\"darkblue\") rotate([0, 30, 0]) \n        cylinder(h=8, r=4);\n}\n\n// Chest tuft\ntranslate([0, 45, 15]) {\n    color(\"darkblue\") \n        cylinder(h=10, r=6);\n}\n\n// Paws\nmodule paw(x, y, z) {\n    translate([x, y, z]) {\n        color(\"tan\") sphere(4);\n    }\n}\n\npaw(10, 20, 0);\npaw(-10, 20, 0);\npaw(8, -5, 0);\npaw(-8, -5, 0);",
    "renders": true
  },
  {
    "pokemon": "stoutland",
    "openscad_code": "// Stoutland - Realistic Style, Medium Complexity\n// Dimensions: ~70mm length x 40mm width x 45mm height\n\n// Colors\n$fa = 1; $fs = 0.4;\n\nmodule stoutland() {\n    // Body - main torso\n    color([0.85, 0.75, 0.65]) {\n        union() {\n            translate([0, 0, 15]) scale([1.2, 0.8, 1]) sphere(15);\n            translate([-8, 0, 8]) scale([0.9, 0.7, 0.6]) sphere(12);\n            translate([8, 0, 8]) scale([0.9, 0.7, 0.6]) sphere(12);\n        }\n    }\n    \n    // Head\n    color([0.85, 0.75, 0.65]) {\n        translate([-20, 0, 30]) scale([1.3, 1.1, 1.2]) sphere(10);\n    }\n    \n    // Muzzle\n    color([0.9, 0.8, 0.7]) {\n        translate([-30, 0, 28]) scale([1.5, 0.8, 0.7]) sphere(7);\n    }\n    \n    // Nose\n    color([0.1, 0.1, 0.1]) {\n        translate([-35, 0, 28]) sphere(2.5);\n    }\n    \n    // Eyes\n    module eye() {\n        color([0.05, 0.05, 0.05]) {\n            sphere(1.5);\n            translate([0.5, 0, 0.5]) scale([0.3, 0.3, 0.3]) color([1,1,1]) sphere(1);\n        }\n    }\n    \n    translate([-26, 5, 32]) rotate([0, 20, 0]) eye();\n    translate([-26, -5, 32]) rotate([0, -20, 0]) eye();\n    \n    // Ears - rounded droopy ears\n    color([0.7, 0.6, 0.5]) {\n        translate([-18, 8, 42]) rotate([20, 0, 30]) scale([0.4, 0.2, 1.2]) sphere(8);\n        translate([-18, -8, 42]) rotate([20, 0, -30]) scale([0.4, 0.2, 1.2]) sphere(8);\n    }\n    \n    // Mustache\n    color([0.95, 0.9, 0.85]) {\n        for(i = [-1, 1]) {\n            translate([-30, i*6, 25]) rotate([0, 0, i*15]) scale([0.2, 0.05, 0.5]) cylinder(h=10, r=5);\n            translate([-30, i*4, 23]) rotate([0, 0, i*10]) scale([0.2, 0.05, 0.5]) cylinder(h=8, r=4);\n        }\n    }\n    \n    // Legs\n    module leg(pos, angle) {\n        color([0.7, 0.6, 0.5]) {\n            translate(pos) rotate([0, 0, angle]) {\n                // Upper leg\n                translate([0, 0, 7]) scale([0.4, 0.4, 1]) cylinder(h=15, r=5);\n                // Lower leg\n                translate([0, 0, -2]) scale([0.3, 0.3, 1]) cylinder(h=12, r=4);\n                // Paw\n                translate([0, 0, -8]) scale([1, 1, 0.3]) sphere(6);\n            }\n        }\n    }\n    \n    leg([-8, 12, 8], 15);\n    leg([-8, -12, 8], -15);\n    leg([12, 12, 8], -15);\n    leg([12, -12, 8], 15);\n    \n    // Tail - curved plume\n    color([0.95, 0.9, 0.85]) {\n        translate([18, 0, 25]) rotate([0, 0, 10]) {\n            for(i = [0:3]) {\n                translate([i*2, 0, -i*1.5]) rotate([0, 0, i*5]) \n                    scale([1-i*0.1, 0.3, 0.1]) cylinder(h=8, r=4);\n            }\n        }\n    }\n    \n    // Fur patterns on back\n    color([0.6, 0.5, 0.4]) {\n        translate([0, 0, 28]) {\n            for(x = [-5:5:10]) {\n                for(y = [-4:4:8]) {\n                    translate([x, y, 0]) scale([0.8, 0.8, 0.1]) sphere(3);\n                }\n            }\n        }\n    }\n    \n    // Chest fur\n    color([0.95, 0.9, 0.85]) {\n        translate([-10, 0, 18]) scale([1, 0.8, 0.3]) sphere(10);\n    }\n}\n\n// Main assembly\nstoutland();",
    "renders": true
  },
  {
    "pokemon": "purrloin",
    "openscad_code": "// Purrloin OpenSCAD Model - Realistic Style\n// Size: ~60mm tall, 3D printable\n\n$fn = 32;\n\nmodule purrloin() {\n    color([0.2, 0.15, 0.15]) {\n        // Body\n        translate([0, 0, 15]) {\n            scale([1.2, 0.8, 1.5])\n                sphere(10);\n        }\n        \n        // Head\n        translate([0, 0, 30]) {\n            difference() {\n                scale([1.3, 1.1, 1.2])\n                    sphere(8);\n                // Eye sockets\n                translate([5, 5, 2]) rotate([0, 20, 0])\n                    sphere(3);\n                translate([-5, 5, 2]) rotate([0, -20, 0])\n                    sphere(3);\n            }\n        }\n        \n        // Ears\n        for(side = [-1, 1]) {\n            translate([side * 10, 0, 38]) {\n                rotate([0, 0, side * 15])\n                    scale([0.5, 0.1, 1.2])\n                        cylinder(h=8, r1=2, r2=0.5);\n            }\n        }\n        \n        // Eyes\n        color([0.8, 0.8, 0.9]) {\n            for(side = [-1, 1]) {\n                translate([side * 5.5, 4.5, 32]) {\n                    rotate([0, 20 * side, 0])\n                        scale([1, 0.8, 0.5])\n                            sphere(2);\n                }\n            }\n        }\n        \n        // Eye pupils\n        color([0.1, 0.1, 0.1]) {\n            for(side = [-1, 1]) {\n                translate([side * 6, 5.2, 32.5]) {\n                    rotate([0, 20 * side, 0])\n                        scale([0.8, 0.6, 0.2])\n                            sphere(1);\n                }\n            }\n        }\n        \n        // Nose\n        color([0.1, 0.1, 0.1])\n            translate([0, 6, 30]) {\n                scale([0.8, 0.6, 0.4])\n                    sphere(1.5);\n            }\n        \n        // Mouth\n        translate([0, 7, 29]) {\n            rotate([90, 0, 0])\n                scale([1, 0.3, 0.3])\n                    cylinder(h=0.5, r1=1, r2=0.5);\n        }\n        \n        // Whiskers\n        for(side = [-1, 1]) {\n            for(angle = [-30, 0, 30]) {\n                translate([side * 8, 6, 29]) {\n                    rotate([0, 0, angle * side])\n                        cylinder(h=5, r=0.2);\n                }\n            }\n        }\n        \n        // Tail\n        color([0.3, 0.2, 0.2])\n            translate([0, -12, 20]) {\n                rotate([0, 90, 90])\n                    scale([0.8, 0.8, 1])\n                        cylinder(h=20, r1=4, r2=2);\n            }\n        \n        // Legs\n        for(side = [-1, 1]) {\n            // Front legs\n            translate([side * 6, 3, 10]) {\n                cylinder(h=10, r=2);\n            }\n            \n            // Back legs\n            translate([side * 6, -6, 10]) {\n                cylinder(h=10, r=2);\n            }\n            \n            // Paws\n            color([0.15, 0.1, 0.1]) {\n                translate([side * 6, 3, 0]) {\n                    sphere(2.5);\n                }\n                translate([side * 6, -6, 0]) {\n                    sphere(2.5);\n                }\n            }\n        }\n        \n        // Chest marking\n        color([0.5, 0.4, 0.4]) {\n            translate([0, 4, 22]) {\n                scale([1.5, 0.8, 0.5])\n                    sphere(3);\n            }\n        }\n        \n        // Front leg stripes\n        color([0.5, 0.4, 0.4]) {\n            for(side = [-1, 1]) {\n                translate([side * 6, 3, 6]) {\n                    scale([0.8, 0.8, 0.2])\n                        sphere(1.5);\n                }\n            }\n        }\n        \n        // Tail tip\n        color([0.5, 0.4, 0.4])\n            translate([0, -32, 20]) {\n                scale([0.8, 0.8, 1])\n                    sphere(2);\n            }\n    }\n}\n\n// Generate the model\npurrloin();",
    "renders": true
  },
  {
    "pokemon": "liepard",
    "openscad_code": "// Liepard - Realistic style, medium complexity\n// Height: 80mm for 3D printing\n\nmodule ear() {\n    difference() {\n        union() {\n            color(\"dimgray\")\n            translate([0, 0, 15]) sphere(d=8, $fn=20);\n            color(\"dimgray\")\n            translate([0, 0, 8]) cylinder(h=8, d1=8, d2=3, $fn=20);\n        }\n        color(\"dimgray\")\n        translate([-1, -1, 10]) cube([2, 2, 20]);\n    }\n}\n\nmodule head() {\n    union() {\n        // Main head shape\n        color(\"dimgray\")\n        translate([0, 0, 40]) sphere(d=25, $fn=30);\n        \n        // Snout\n        color(\"dimgray\")\n        translate([0, -12, 37]) rotate([20, 0, 0]) cylinder(h=15, d1=18, d2=12, $fn=20);\n        \n        // Eyes\n        color(\"yellow\")\n        translate([-8, -8, 42]) sphere(d=5, $fn=15);\n        color(\"yellow\") \n        translate([8, -8, 42]) sphere(d=5, $fn=15);\n        \n        // Eye pupils\n        color(\"blue\")\n        translate([-8, -8.5, 42]) sphere(d=2.5, $fn=10);\n        color(\"blue\")\n        translate([8, -8.5, 42]) sphere(d=2.5, $fn=10);\n        \n        // Purple markings\n        color(\"purple\")\n        translate([-5, -15, 38]) rotate([0, 0, 45]) cube([3, 10, 2]);\n        color(\"purple\")\n        translate([5, -15, 38]) rotate([0, 0, -45]) cube([3, 10, 2]);\n        \n        // Ears\n        translate([-12, 0, 50]) rotate([0, 0, -30]) ear();\n        translate([12, 0, 50]) rotate([0, 0, 30]) mirror([1,0,0]) ear();\n        \n        // Nose\n        color(\"black\")\n        translate([0, -17, 37]) sphere(d=3, $fn=10);\n    }\n}\n\nmodule body() {\n    union() {\n        // Main body\n        color(\"dimgray\")\n        translate([0, 0, 20]) scale([1.2, 1.5, 1]) sphere(d=35, $fn=30);\n        \n        // Chest marking\n        color(\"purple\")\n        translate([0, -5, 25]) rotate([90, 0, 0]) cylinder(h=2, d=8, $fn=20);\n        \n        // Legs (simple cylinders for 3D printing)\n        color(\"dimgray\")\n        translate([-12, -8, 10]) cylinder(h=20, d=8, $fn=15);\n        color(\"dimgray\")\n        translate([12, -8, 10]) cylinder(h=20, d=8, $fn=15);\n        color(\"dimgray\")\n        translate([-12, 8, 10]) cylinder(h=20, d=8, $fn=15);\n        color(\"dimgray\")\n        translate([12, 8, 10]) cylinder(h=20, d=8, $fn=15);\n    }\n}\n\nmodule tail() {\n    union() {\n        // Tail segments\n        color(\"dimgray\")\n        translate([0, 20, 25]) rotate([0, 30, 0]) cylinder(h=40, d=6, $fn=15);\n        color(\"purple\")\n        translate([0, 45, 30]) rotate([0, 45, 0]) cylinder(h=30, d=5, $fn=15);\n        color(\"dimgray\")\n        translate([0, 65, 32]) rotate([0, 60, 0]) cylinder(h=20, d=4, $fn=15);\n        \n        // Tail tip\n        color(\"purple\")\n        translate([0, 75, 30]) sphere(d=5, $fn=15);\n    }\n}\n\n// Assemble the model\nhead();\nbody();\ntail();",
    "renders": true
  },
  {
    "pokemon": "pansage",
    "openscad_code": "// Pansage Pokemon - Realistic Style, Medium Complexity\n// 3D printable model, approximately 60mm tall\n\ncolor(\"#2E8B57\") {\n    // Main body\n    difference() {\n        union() {\n            // Torso\n            translate([0, 0, 10]) {\n                scale([1, 0.8, 1.2]) {\n                    sphere(d=20, $fn=32);\n                }\n            }\n            \n            // Belly marking\n            translate([0, -7, 8]) {\n                scale([0.8, 0.3, 1]) {\n                    sphere(d=15, $fn=32);\n                }\n            }\n        }\n        \n        // Hollow interior for printing\n        translate([0, 0, 10]) {\n            scale([0.85, 0.65, 1.05]) {\n                sphere(d=20, $fn=32);\n            }\n        }\n    }\n    \n    // Head\n    translate([0, 0, 25]) {\n        scale([0.9, 0.9, 1]) {\n            sphere(d=18, $fn=32);\n        }\n    }\n    \n    // Ears (3 leaf-like ears)\n    for(i=[-1, 0, 1]) {\n        rotate([0, 0, i * 120]) {\n            translate([12 * cos(i * 120), 12 * sin(i * 120), 30]) {\n                rotate([0, 90, 0]) {\n                    scale([1, 0.3, 1.5]) {\n                        cylinder(h=10, d1=8, d2=4, $fn=8);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Arms\n    for(side=[-1, 1]) {\n        // Upper arm\n        translate([side * 12, 0, 18]) {\n            rotate([0, side * 20, -30]) {\n                cylinder(h=12, d=6, $fn=16);\n            }\n        }\n        \n        // Hand with 3 fingers\n        translate([side * 18, 0, 12]) {\n            sphere(d=8, $fn=16);\n            \n            // Fingers\n            for(f=[-1, 0, 1]) {\n                translate([0, f * 2, -3]) {\n                    rotate([0, 0, f * 15]) {\n                        cylinder(h=6, d=2, $fn=8);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Legs\n    for(side=[-1, 1]) {\n        // Upper leg\n        translate([side * 6, 0, 5]) {\n            rotate([0, 0, side * 15]) {\n                cylinder(h=10, d=7, $fn=16);\n            }\n        }\n        \n        // Foot\n        translate([side * 8, 0, -2]) {\n            scale([1.2, 1, 0.5]) {\n                sphere(d=10, $fn=16);\n            }\n        }\n    }\n    \n    // Tail (broccoli-like)\n    translate([0, 14, 12]) {\n        rotate([90, 0, 0]) {\n            cylinder(h=15, d1=8, d2=12, $fn=16);\n        }\n        \n        // Tail leaves\n        for(i=[0:5]) {\n            rotate([0, 0, i * 72]) {\n                translate([0, 5, 0]) {\n                    rotate([45, 0, 0]) {\n                        scale([0.8, 0.3, 1]) {\n                            cylinder(h=8, d1=6, d2=3, $fn=8);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Eyes\ncolor(\"#FFFFFF\") {\n    for(side=[-1, 1]) {\n        translate([side * 6, -7, 27]) {\n            sphere(d=4, $fn=16);\n        }\n    }\n}\n\ncolor(\"#000000\") {\n    for(side=[-1, 1]) {\n        translate([side * 6, -8.5, 27]) {\n            sphere(d=2, $fn=16);\n        }\n    }\n}\n\n// Mouth\ncolor(\"#8B4513\") {\n    translate([0, -9, 22]) {\n        scale([1, 0.5, 0.5]) {\n            cylinder(h=3, d=6, $fn=16);\n        }\n    }\n}\n\n// Nose\ncolor(\"#2E8B57\") {\n    translate([0, -8, 25]) {\n        sphere(d=2, $fn=16);\n    }\n}\n\n// Leaf details on body\ncolor(\"#32CD32\") {\n    for(i=[0:2]) {\n        rotate([0, 0, i * 120]) {\n            translate([8 * cos(i * 120), 8 * sin(i * 120), 15]) {\n                scale([1, 0.4, 0.1]) {\n                    cylinder(h=8, d1=6, d2=3, $fn=8);\n                }\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "pokemon": "simisage",
    "openscad_code": "// Simisage - Grass Monkey Pokemon\n// Medium complexity realistic style\n\n// Overall scale\nscale(0.4) {\n\n// Body\ncolor([0.2, 0.6, 0.2]) {\n    // Torso\n    translate([0, 0, 20]) {\n        rotate([0, 0, 0]) {\n            scale([1.2, 1, 1.5]) {\n                sphere(15, $fn=32);\n            }\n        }\n    }\n    \n    // Belly\n    color([0.9, 0.8, 0.7]) {\n        translate([0, 0, 15]) {\n            scale([0.8, 0.9, 1.2]) {\n                sphere(12, $fn=32);\n            }\n        }\n    }\n}\n\n// Head\ncolor([0.2, 0.6, 0.2]) {\n    translate([0, 0, 45]) {\n        sphere(18, $fn=32);\n    }\n    \n    // Muzzle\n    translate([0, 14, 40]) {\n        scale([0.8, 0.7, 0.6]) {\n            sphere(12, $fn=32);\n        }\n    }\n}\n\n// Eyes\nmodule eye(x_pos, y_pos, z_pos) {\n    translate([x_pos, y_pos, z_pos]) {\n        color([0.9, 0.9, 0.9]) {\n            sphere(4, $fn=16);\n        }\n        translate([0, 2, 0]) {\n            color([0.1, 0.1, 0.1]) {\n                sphere(2, $fn=16);\n            }\n        }\n    }\n}\n\neye(-6, 16, 45);\neye(6, 16, 45);\n\n// Nose\ncolor([0.1, 0.1, 0.1]) {\n    translate([0, 20, 45]) {\n        sphere(2, $fn=16);\n    }\n}\n\n// Mouth\ncolor([0.3, 0.1, 0.1]) {\n    translate([0, 22, 40]) {\n        rotate([90, 0, 0]) {\n            cylinder(h=0.5, r1=3, r2=2, $fn=16);\n        }\n    }\n}\n\n// Ears\nmodule ear(x_pos) {\n    color([0.2, 0.6, 0.2]) {\n        translate([x_pos * 15, 0, 55]) {\n            rotate([0, x_pos * 10, 0]) {\n                scale([0.3, 1.5, 2]) {\n                    sphere(8, $fn=16);\n                }\n            }\n        }\n    }\n}\n\near(-1);\near(1);\n\n// Tuft of hair\ncolor([0.3, 0.5, 0.1]) {\n    for(i = [0:5]) {\n        rotate([0, 0, i * 72]) {\n            translate([0, 0, 63]) {\n                rotate([15, 0, 0]) {\n                    scale([0.3, 0.3, 2]) {\n                        cylinder(h=10, r1=2, r2=0.5, $fn=8);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Arms\nmodule arm(x_pos) {\n    color([0.2, 0.6, 0.2]) {\n        translate([x_pos * 20, 0, 30]) {\n            rotate([0, x_pos * 15, 0]) {\n                cylinder(h=25, r=5, $fn=16);\n            }\n        }\n        // Hands\n        translate([x_pos * 30, 0, 15]) {\n            sphere(6, $fn=16);\n            // Fingers\n            for(f = [0:2]) {\n                rotate([0, 0, f * 120]) {\n                    translate([3, 0, 0]) {\n                        scale([1, 0.3, 0.3]) {\n                            sphere(2, $fn=8);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\narm(-1);\narm(1);\n\n// Legs\nmodule leg(x_pos) {\n    color([0.2, 0.6, 0.2]) {\n        translate([x_pos * 10, 0, 5]) {\n            cylinder(h=20, r=6, $fn=16);\n        }\n        // Feet\n        color([0.1, 0.1, 0.1]) {\n            translate([x_pos * 10, 0, 0]) {\n                scale([1.5, 2, 0.5]) {\n                    sphere(8, $fn=16);\n                }\n            }\n        }\n    }\n}\n\nleg(-1);\nleg(1);\n\n// Tail\ncolor([0.2, 0.6, 0.2]) {\n    translate([0, -15, 20]) {\n        rotate([0, 20, 0]) {\n            cylinder(h=30, r1=5, r2=3, $fn=16);\n        }\n        translate([0, -35, 10]) {\n            rotate([0, 30, 0]) {\n                scale([0.5, 3, 0.1]) {\n                    sphere(12, $fn=32);\n                }\n            }\n        }\n    }\n}\n\n// Leaf collar\ncolor([0.1, 0.7, 0.1]) {\n    for(i = [0:7]) {\n        rotate([0, 0, i * 45]) {\n            translate([0, 0, 30]) {\n                rotate([90, 0, 0]) {\n                    scale([0.5, 2, 0.1]) {\n                        sphere(8, $fn=16);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Eyebrows\ncolor([0.3, 0.4, 0.1]) {\n    translate([-8, 10, 50]) {\n        rotate([0, 0, -30]) {\n            scale([0.5, 0.2, 3]) {\n                sphere(3, $fn=16);\n            }\n        }\n    }\n    translate([8, 10, 50]) {\n        rotate([0, 0, 30]) {\n            scale([0.5, 0.2, 3]) {\n                sphere(3, $fn=16);\n            }\n        }\n    }\n}\n\n}",
    "renders": true
  },
  {
    "pokemon": "pansear",
    "openscad_code": "// Pansage Pokemon - Realistic Style - Medium Complexity\n// Based on the grass-type monkey Pokemon\n\n// Overall dimensions\near_height = 15;\nhead_radius = 12;\nbody_height = 20;\nbody_width = 18;\nbody_depth = 15;\narm_length = 12;\nleg_length = 10;\ntail_length = 25;\ntail_width = 6;\n\n// Colors\n$fn = 32;\n\nmodule head() {\n    color([0.4, 0.8, 0.3]) union() {\n        // Main head sphere\n        translate([0, 0, head_radius]) sphere(r=head_radius);\n        \n        // Ears - three leaf-like ears on top\n        for(i=[-1, 0, 1]) {\n            translate([i * 10, 0, head_radius + 5]) \n                rotate([0, i * 10, 0])\n                rotate([0, 0, 45 * i])\n                scale([0.8, 0.3, 1])\n                cylinder(h=ear_height, r1=ear_height/2, r2=0);\n        }\n        \n        // Face details\n        // Eyes\n        color([0.9, 0.9, 0.9]) {\n            translate([-5, head_radius - 2, 5]) sphere(r=2.5);\n            translate([5, head_radius - 2, 5]) sphere(r=2.5);\n        }\n        \n        color([0, 0, 0]) {\n            translate([-5, head_radius - 1, 5.5]) sphere(r=1.5);\n            translate([5, head_radius - 1, 5.5]) sphere(r=1.5);\n        }\n        \n        // Nose\n        color([0.3, 0.6, 0.2]) \n            translate([0, head_radius - 1, 2]) sphere(r=1.5);\n        \n        // Mouth\n        color([0.8, 0.2, 0.2]) \n            translate([0, head_radius - 1, -2]) \n            scale([2, 0.5, 0.5])\n            sphere(r=1);\n        \n        // Leaf collar around neck\n        color([0.3, 0.7, 0.2]) \n            translate([0, 0, -head_radius/2]) \n            rotate_extrude(angle=360) \n            translate([head_radius + 2, 0, 0]) \n            circle(r=2);\n    }\n}\n\nmodule body() {\n    color([0.4, 0.8, 0.3]) union() {\n        // Main body\n        translate([0, 0, -body_height/2]) \n            scale([1, 0.8, 1])\n            cube([body_width, body_depth, body_height], center=true);\n        \n        // Belly marking\n        color([0.9, 1, 0.9]) \n            translate([0, body_depth/2 - 1, -body_height/4]) \n            scale([0.6, 0.1, 0.6])\n            cube([body_width, 2, body_height], center=true);\n        \n        // Arms\n        for(side=[-1, 1]) {\n            translate([side * (body_width/2 + arm_length/3), 0, body_height/4]) {\n                rotate([0, 30, side * 20])\n                color([0.35, 0.75, 0.25]) \n                    cylinder(h=arm_length, r=arm_length/4, center=true);\n                \n                // Hands\n                translate([0, 0, arm_length/2 + arm_length/4]) \n                    sphere(r=arm_length/3);\n            }\n        }\n        \n        // Legs\n        for(side=[-1, 1]) {\n            translate([side * body_width/3, 0, -body_height/2 - leg_length/2]) {\n                color([0.35, 0.75, 0.25]) \n                    cylinder(h=leg_length, r=leg_length/3);\n                \n                // Feet\n                translate([0, body_depth/4, -leg_length/2]) \n                    rotate([90, 0, 0])\n                    cylinder(h=leg_length/2, r1=leg_length/2, r2=leg_length/3);\n            }\n        }\n    }\n}\n\nmodule tail() {\n    color([0.3, 0.7, 0.2]) union() {\n        // Main tail\n        translate([0, body_depth/2, -body_height/2]) {\n            rotate([0, -30, 0])\n            cylinder(h=tail_length, r=tail_width/2);\n            \n            // Leaf at end of tail\n            translate([0, 0, -tail_length - 2]) \n                rotate([0, 90, 0])\n                rotate([0, 0, 45])\n                scale([1.5, 0.2, 1])\n                cylinder(h=tail_width*2, r1=tail_width, r2=0);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    head();\n    translate([0, 0, -head_radius]) body();\n    tail();\n}\n\n// Base for stability\ncolor([0.3, 0.3, 0.3]) \n    translate([0, 0, -body_height/2 - leg_length - 2]) \n    cylinder(h=2, r=body_width/2);",
    "renders": true
  },
  {
    "pokemon": "simisear",
    "openscad_code": "// Simisear - Realistic Style, Medium Complexity\n// Overall dimensions approximately 80mm tall, 60mm wide, 50mm deep\n\n$fn = 32; // Smooth curves for realistic appearance\n\n// Main body color - reddish-orange\ncolor([0.9, 0.3, 0.1]) {\n\n// Head module\nmodule head() {\n    // Main head shape - slightly elongated sphere\n    translate([0, 0, 60]) \n    scale([1.1, 1, 1.2]) \n    sphere(15);\n    \n    // Muzzle/snout\n    translate([0, -12, 55]) \n    scale([0.8, 0.6, 0.7]) \n    sphere(12);\n    \n    // Ear bases\n    for(side = [-1, 1]) {\n        translate([side * 12, 8, 72]) {\n            rotate([0, side * 15, 0]) \n            scale([0.4, 0.2, 1.2]) \n            sphere(10);\n        }\n    }\n}\n\n// Body\nmodule body() {\n    translate([0, 0, 30]) \n    scale([1.2, 0.8, 1.5]) \n    sphere(20);\n}\n\n// Arms\nmodule arm(side) {\n    translate([side * 18, -5, 35]) {\n        rotate([0, 0, side * -10]) {\n            // Upper arm\n            cylinder(h=15, r1=6, r2=5);\n            // Hand\n            translate([0, 0, -15]) \n            scale([1.2, 1, 0.8]) \n            sphere(6);\n        }\n    }\n}\n\n// Legs\nmodule leg(side) {\n    translate([side * 10, 0, 15]) {\n        rotate([5, 0, 0]) {\n            // Thigh\n            cylinder(h=20, r1=7, r2=6);\n            // Foot\n            translate([0, -3, -20]) {\n                scale([1.3, 1.5, 0.8]) \n                sphere(6);\n            }\n        }\n    }\n}\n\n// Tail\nmodule tail() {\n    translate([0, 25, 30]) {\n        rotate([30, 0, 0]) {\n            // Main tail\n            cylinder(h=30, r1=8, r2=4);\n            // Tail flame base\n            translate([0, 0, 30]) {\n                color([1, 0.8, 0.2]) \n                sphere(6);\n            }\n        }\n    }\n}\n\n// Facial features\nmodule face() {\n    // Eye whites\n    color([1, 1, 1]) {\n        for(side = [-1, 1]) {\n            translate([side * 6, -8, 65]) \n            scale([1, 1.2, 0.5]) \n            sphere(4);\n        }\n    }\n    \n    // Eye pupils\n    color([0.2, 0.2, 0.2]) {\n        for(side = [-1, 1]) {\n            translate([side * 6, -8, 67]) \n            sphere(2);\n        }\n    }\n    \n    // Nose\n    color([0.7, 0.2, 0.1]) {\n        translate([0, -15, 60]) \n        sphere(2);\n    }\n    \n    // Mouth\n    color([0.6, 0.1, 0.1]) {\n        translate([0, -18, 55]) \n        rotate([90, 0, 0]) \n        cylinder(h=1, r1=3, r2=2);\n    }\n}\n\n// Chest pattern\nmodule chest_pattern() {\n    color([0.8, 0.2, 0.05]) {\n        translate([0, -8, 35]) \n        scale([1.5, 0.8, 0.5]) \n        sphere(12);\n    }\n}\n\n// Assemble the Pokemon\nunion() {\n    head();\n    body();\n    \n    for(side = [-1, 1]) {\n        arm(side);\n        leg(side);\n    }\n    \n    tail();\n    face();\n    chest_pattern();\n}\n\n}",
    "renders": true
  },
  {
    "pokemon": "panpour",
    "openscad_code": "// Panpour OpenSCAD Model - Realistic Style, Medium Complexity\n// Overall dimensions: ~70mm tall\n\n// Color definitions\n$fa = 1;\n$fs = 0.5;\n\n// Main body module\nmodule panpour() {\n    // Body - blue sphere base\n    color(\"dodgerblue\")\n    translate([0, 0, 20])\n    scale([1.2, 1, 1.3])\n    sphere(20);\n    \n    // Head sphere\n    color(\"dodgerblue\")\n    translate([0, 0, 45])\n    scale([1.1, 1, 1.2])\n    sphere(18);\n    \n    // Muzzle\n    color(\"lightblue\")\n    translate([0, -15, 40])\n    scale([0.8, 1.2, 0.8])\n    sphere(10);\n    \n    // Eyes\n    for(x = [-6, 6]) {\n        color(\"white\")\n        translate([x, -20, 48])\n        sphere(4);\n        color(\"black\")\n        translate([x, -21, 48.5])\n        sphere(2);\n    }\n    \n    // Nose\n    color(\"black\")\n    translate([0, -22, 45])\n    cylinder(h=2, r=1.5);\n    \n    // Mouth\n    color(\"black\")\n    translate([0, -22, 42])\n    rotate([90, 0, 0])\n    cylinder(h=0.5, r=3);\n    \n    // Ears\n    for(x = [-15, 15]) {\n        color(\"dodgerblue\")\n        translate([x, 0, 58])\n        rotate([45 * (x < 0 ? 1 : -1), 0, 0])\n        scale([0.3, 0.3, 1])\n        cylinder(h=15, r1=5, r2=3);\n    }\n    \n    // Water tuft\n    color(\"deepskyblue\")\n    translate([0, 0, 70])\n    scale([1, 0.8, 1.5])\n    sphere(8);\n    \n    // Arms\n    for(side = [-1, 1]) {\n        color(\"dodgerblue\")\n        translate([side * 20, 0, 35])\n        rotate([0, side * 20, 0])\n        cylinder(h=15, r1=6, r2=4);\n        \n        // Hands\n        color(\"lightblue\")\n        translate([side * 27, 0, 30])\n        sphere(5);\n    }\n    \n    // Legs\n    for(side = [-1, 1]) {\n        color(\"dodgerblue\")\n        translate([side * 8, 0, 10])\n        cylinder(h=15, r=6);\n        \n        // Feet\n        color(\"lightblue\")\n        translate([side * 8, -8, 5])\n        scale([1.2, 0.8, 0.5])\n        sphere(8);\n    }\n    \n    // Tail\n    color(\"dodgerblue\")\n    translate([0, 18, 25])\n    rotate([45, 0, 0])\n    cylinder(h=25, r1=5, r2=3);\n    \n    // Water tail tip\n    color(\"deepskyblue\")\n    translate([0, 25, 35])\n    sphere(8);\n    \n    // Belly marking\n    color(\"lightblue\")\n    translate([0, 0, 30])\n    scale([0.8, 0.6, 0.8])\n    sphere(15);\n    \n    // Back marking\n    color(\"darkblue\")\n    translate([0, 12, 40])\n    scale([0.3, 0.3, 0.8])\n    sphere(10);\n}\n\n// Generate the model\npanpour();",
    "renders": true
  },
  {
    "pokemon": "simipour",
    "openscad_code": "// Simipour - Water-type Pokemon\n// Realistic medium complexity model for 3D printing\n\n// Colors\n$fn = 32;\n\n// Main body color - light blue\nbody_color = [0.5, 0.7, 0.9];\n// Darker blue for accents\naccent_color = [0.3, 0.5, 0.8];\n// White for belly and details\nwhite_color = [0.95, 0.95, 0.95];\n// Black for eyes\nblack_color = [0.1, 0.1, 0.1];\n// Pink for tongue/mouth\npink_color = [0.9, 0.6, 0.7];\n\n// Body module\nmodule body() {\n    color(body_color) {\n        // Torso - elongated oval\n        translate([0, 0, 15])\n            scale([1.2, 0.8, 1.5])\n            sphere(10);\n        \n        // Belly - white oval\n        color(white_color)\n            translate([0, 0, 15])\n                scale([1, 0.7, 1.3])\n                sphere(8);\n    }\n}\n\n// Head module\nmodule head() {\n    color(body_color) {\n        // Main head shape\n        translate([0, 0, 35])\n            scale([0.9, 0.8, 1.1])\n            sphere(12);\n        \n        // Snout extension\n        translate([0, 13, 33])\n            scale([0.7, 0.5, 0.5])\n            sphere(8);\n    }\n}\n\n// Ears module\nmodule ears() {\n    for(side = [-1, 1]) {\n        color(body_color) {\n            // Left ear\n            translate([side * 10, 0, 42])\n                rotate([0, 0, side * -20])\n                rotate([0, 30, 0])\n                scale([0.3, 0.1, 1])\n                cylinder(8, 4, 1);\n            \n            // Inner ear - white\n            color(white_color)\n                translate([side * 10, 0, 41])\n                    rotate([0, 0, side * -20])\n                    rotate([0, 30, 0])\n                    scale([0.2, 0.08, 0.8])\n                    cylinder(6, 3, 0.5);\n        }\n    }\n}\n\n// Hair tuft module\nmodule hair_tuft() {\n    color(accent_color) {\n        // Three hair spikes\n        for(i = [-1, 0, 1]) {\n            translate([i * 3, 0, 48])\n                rotate([0, 0, i * 15])\n                scale([0.3, 0.1, 0.8])\n                cylinder(8, 2, 0.5);\n        }\n    }\n}\n\n// Eyes module\nmodule eyes() {\n    for(side = [-1, 1]) {\n        // Eye white\n        color(white_color)\n            translate([side * 4, 12, 38])\n                sphere(3);\n        \n        // Pupil\n        color(black_color)\n            translate([side * 4.5, 13.5, 39])\n                sphere(1.5);\n    }\n}\n\n// Arms module\nmodule arms() {\n    for(side = [-1, 1]) {\n        color(body_color) {\n            // Upper arm\n            translate([side * 12, 0, 25])\n                rotate([0, 0, side * 45])\n                rotate([30, 0, 0])\n                scale([0.4, 0.4, 1])\n                cylinder(8, 3, 2);\n            \n            // Lower arm\n            translate([side * 18, 8, 18])\n                rotate([0, 0, side * 90])\n                rotate([45, 0, 0])\n                scale([0.3, 0.3, 0.8])\n                cylinder(6, 2.5, 2);\n            \n            // Hand\n            translate([side * 22, 12, 15])\n                sphere(2.5);\n        }\n    }\n}\n\n// Legs module\nmodule legs() {\n    for(side = [-1, 1]) {\n        color(body_color) {\n            // Thigh\n            translate([side * 7, 0, 10])\n                rotate([0, 0, side * 15])\n                scale([0.5, 0.5, 1.2])\n                cylinder(6, 3, 2.5);\n            \n            // Lower leg\n            translate([side * 9, 0, 3])\n                rotate([0, 0, side * 10])\n                scale([0.4, 0.4, 1])\n                cylinder(5, 2.5, 2);\n            \n            // Foot\n            translate([side * 10, 0, 0])\n                scale([1, 2, 0.5])\n                sphere(3);\n        }\n    }\n}\n\n// Tail module\nmodule tail() {\n    color(accent_color) {\n        // Tail base\n        translate([0, -15, 15])\n            rotate([0, 90, 0])\n            scale([0.8, 0.8, 0.5])\n            cylinder(12, 5, 3);\n        \n        // Tail tip - water drop shape\n        translate([0, -22, 15])\n            scale([1.2, 1, 0.8])\n            sphere(4);\n    }\n}\n\n// Mouth detail\nmodule mouth() {\n    // Mouth opening\n    color(pink_color)\n        translate([0, 15, 33])\n            scale([2, 0.5, 1])\n            rotate([90, 0, 0])\n            cylinder(1, 2, 2);\n}\n\n// Water pattern on chest\nmodule water_pattern() {\n    color(accent_color) {\n        // Water drop shapes\n        for(i = [0:2]) {\n            translate([0, -5 + i * 3, 25 + i * 2])\n                rotate([0, 90, 0])\n                scale([0.8, 1, 1])\n                cylinder(3, 2, 0);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    body();\n    head();\n    ears();\n    hair_tuft();\n    eyes();\n    mouth();\n    arms();\n    legs();\n    tail();\n    water_pattern();\n}",
    "renders": true
  },
  {
    "pokemon": "munna",
    "openscad_code": "// Munna Pokemon - Realistic Style, Medium Complexity\n// 3D printable model with proper wall thickness and no overhangs\n\n$fn = 64;  // Higher resolution for smoother curves\n\n// Main colors\nskin_color = \"#FFB6C1\";\nmarking_color = \"#FF69B4\";\neye_color = \"#FF1493\";\nmouth_color = \"#8B0000\";\n\n// Scale factor for 3D printing (target ~70mm height)\nscale_factor = 1;\n\n// Main body\nmodule body() {\n    color(skin_color) {\n        // Central rounded body\n        translate([0, 0, 15]) {\n            scale([1, 1, 0.8]) sphere(r = 25);\n        }\n        \n        // Bottom flat base for stability\n        translate([0, 0, 0]) {\n            cylinder(h = 15, r = 23, $fn = 32);\n        }\n    }\n}\n\n// Flower-like top details\nmodule top_flowers() {\n    color(marking_color) {\n        // Central flower base\n        translate([0, 0, 35]) {\n            scale([1, 1, 0.3]) sphere(r = 20);\n        }\n        \n        // Petal details\n        for(i = [0:5]) {\n            rotate([0, 0, i * 60]) {\n                translate([15, 0, 35]) {\n                    rotate([90, 0, 0]) {\n                        scale([0.8, 1, 0.4]) cylinder(h = 12, r1 = 8, r2 = 5);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Ear-like projections\nmodule ears() {\n    color(skin_color) {\n        // Left ear\n        translate([-20, -15, 30]) {\n            rotate([15, 0, -30]) {\n                scale([0.8, 0.8, 1.5]) sphere(r = 12);\n            }\n        }\n        \n        // Right ear\n        translate([20, -15, 30]) {\n            rotate([15, 0, 30]) {\n                scale([0.8, 0.8, 1.5]) sphere(r = 12);\n            }\n        }\n    }\n}\n\n// Eyes\nmodule eyes() {\n    color(eye_color) {\n        // Left eye\n        translate([-10, 20, 25]) {\n            scale([1, 1.2, 0.3]) sphere(r = 8);\n            \n            // Eye shine\n            translate([2, 3, 2]) {\n                color(\"white\")\n                scale([0.3, 0.3, 0.1]) sphere(r = 3);\n            }\n        }\n        \n        // Right eye\n        translate([10, 20, 25]) {\n            scale([1, 1.2, 0.3]) sphere(r = 8);\n            \n            // Eye shine\n            translate([-2, 3, 2]) {\n                color(\"white\")\n                scale([0.3, 0.3, 0.1]) sphere(r = 3);\n            }\n        }\n    }\n}\n\n// Mouth\nmodule mouth() {\n    color(mouth_color) {\n        translate([0, 22, 18]) {\n            scale([1, 0.5, 0.3]) sphere(r = 5);\n        }\n    }\n}\n\n// Small circular markings\nmodule markings() {\n    color(marking_color) {\n        // Front markings\n        for(pos = [[-15, 10, 30], [15, 10, 30], [0, 5, 32]]) {\n            translate(pos) {\n                scale([1, 1, 0.2]) sphere(r = 3);\n            }\n        }\n        \n        // Side markings\n        for(pos = [[-22, 0, 25], [22, 0, 25]]) {\n            translate(pos) {\n                scale([0.2, 1, 1]) sphere(r = 3);\n            }\n        }\n    }\n}\n\n// Base support for 3D printing\nmodule base_support() {\n    color(\"lightgray\") {\n        translate([0, 0, -2]) {\n            cylinder(h = 2, r = 26);\n        }\n    }\n}\n\n// Assemble the complete Munna\nscale(scale_factor) {\n    union() {\n        body();\n        top_flowers();\n        ears();\n        eyes();\n        mouth();\n        markings();\n        base_support();\n    }\n}",
    "renders": true
  },
  {
    "pokemon": "musharna",
    "openscad_code": "// Musharna - Realistic Style, Medium Complexity\n// 3D printable Pokemon model\n// Size: ~80mm height\n\n// Main colors\n$fa = 2;\n$fs = 0.5;\n\nmodule body() {\n    // Main body - egg shape\n    color(\"#F5E6D3\") {\n        // Body base\n        translate([0, 0, 30]) {\n            scale([1, 1.2, 1.3]) sphere(25);\n        }\n        \n        // Rounded bottom\n        translate([0, 0, 5]) {\n            scale([1.1, 1.3, 0.8]) sphere(20);\n        }\n    }\n}\n\nmodule head_details() {\n    color(\"#F5E6D3\") {\n        // Head dome\n        translate([0, 0, 55]) {\n            scale([0.9, 0.9, 0.7]) sphere(20);\n        }\n    }\n}\n\nmodule ears() {\n    // Left ear\n    color(\"#F5E6D3\") {\n        translate([-20, 15, 65]) {\n            rotate([0, -30, -20]) {\n                scale([1, 0.7, 2]) cylinder(15, 8, 5);\n            }\n        }\n        \n        // Right ear\n        translate([20, 15, 65]) {\n            rotate([0, -30, 20]) {\n                scale([1, 0.7, 2]) cylinder(15, 8, 5);\n            }\n        }\n    }\n}\n\nmodule smoke_clouds() {\n    // Front smoke cloud\n    color(\"#C8A2C8\") {\n        translate([0, 25, 40]) {\n            // Main cloud\n            scale([1.5, 1, 1]) sphere(15);\n            \n            // Cloud details\n            for(i = [0:45:315]) {\n                rotate([0, 0, i]) {\n                    translate([12, 0, 0]) {\n                        scale([0.7, 0.8, 0.7]) sphere(10);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Back smoke wisps\n    color(\"#D4B5D4\") {\n        for(i = [0:60:300]) {\n            rotate([0, 0, i]) {\n                translate([0, -30, 45]) {\n                    scale([0.5, 0.3, 1.2]) sphere(10);\n                }\n            }\n        }\n    }\n}\n\nmodule facial_features() {\n    // Eyes\n    color(\"#4B0082\") {\n        // Left eye\n        translate([-10, 20, 50]) {\n            scale([1, 1.2, 0.5]) sphere(5);\n        }\n        \n        // Right eye\n        translate([10, 20, 50]) {\n            scale([1, 1.2, 0.5]) sphere(5);\n        }\n    }\n    \n    // Eye highlights\n    color(\"white\") {\n        translate([-8, 22, 52]) {\n            sphere(1.5);\n        }\n        translate([12, 22, 52]) {\n            sphere(1.5);\n        }\n    }\n    \n    // Mouth\n    color(\"#8B7355\") {\n        translate([0, 15, 40]) {\n            scale([1, 0.5, 0.3]) sphere(3);\n        }\n    }\n}\n\nmodule patterns() {\n    // Forehead mark\n    color(\"#E6D4E6\") {\n        translate([0, 10, 65]) {\n            scale([1.5, 0.3, 0.2]) sphere(5);\n        }\n    }\n    \n    // Body swirls\n    color(\"#E6D4E6\") {\n        for(i = [0:120:240]) {\n            rotate([0, 0, i]) {\n                translate([0, 0, 30]) {\n                    scale([0.8, 1, 0.1]) cylinder(20, 8, 8);\n                }\n            }\n        }\n    }\n}\n\nmodule legs() {\n    color(\"#F5E6D3\") {\n        // Front left leg\n        translate([-15, 10, 10]) {\n            rotate([30, 0, 0]) {\n                cylinder(15, 6, 4);\n            }\n        }\n        \n        // Front right leg\n        translate([15, 10, 10]) {\n            rotate([30, 0, 0]) {\n                cylinder(15, 6, 4);\n            }\n        }\n        \n        // Back left leg\n        translate([-12, -15, 8]) {\n            rotate([45, 0, 0]) {\n                cylinder(12, 5, 4);\n            }\n        }\n        \n        // Back right leg\n        translate([12, -15, 8]) {\n            rotate([45, 0, 0]) {\n                cylinder(12, 5, 4);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    head_details();\n    ears();\n    smoke_clouds();\n    facial_features();\n    patterns();\n    legs();\n}",
    "renders": true
  },
  {
    "pokemon": "pidove",
    "openscad_code": "// Pidove - realistic style, medium complexity\n// Designed for 3D printing - no overhangs, 2mm wall thickness\n\n// Overall scale factor (100mm height)\nscale_factor = 1;\n\n// Main colors\ncolor_body = [0.5, 0.4, 0.3];      // Grey-brown\ncolor_wings = [0.6, 0.5, 0.4];    // Light grey\ncolor_beak = [0.9, 0.6, 0.2];     // Yellow-orange\ncolor_eyes = [0.2, 0.2, 0.6];     // Blue\ncolor_crest = [0.4, 0.3, 0.2];    // Darker brown\ncolor_feat = [0.8, 0.7, 0.6];     // Light grey features\n\n// Body module\nmodule body() {\n    color(color_body)\n    union() {\n        // Main body - ellipsoid shape\n        scale([1, 0.8, 1.2])\n        sphere(d=40);\n        \n        // Chest bump\n        translate([0, -12, 0])\n        scale([0.8, 0.6, 0.8])\n        sphere(d=25);\n    }\n}\n\n// Head module\nmodule head() {\n    color(color_body)\n    union() {\n        // Main head sphere\n        translate([0, 22, 12])\n        sphere(d=28);\n        \n        // Beak\n        color(color_beak)\n        translate([0, 30, 8])\n        rotate([0, -20, 0])\n        scale([0.4, 1.2, 0.4])\n        cylinder(h=15, d1=8, d2=0);\n        \n        // Crest\n        color(color_crest)\n        translate([0, 20, 24])\n        for(i=[-1:1])\n            translate([i*4, 0, 0])\n            rotate([0, -10, 0])\n            scale([0.6, 0.1, 1.2])\n            sphere(d=8);\n        \n        // Eyes\n        color(color_eyes)\n        for(side=[-1,1]) {\n            translate([side*10, 25, 12])\n            sphere(d=6);\n            color([0,0,0])\n            translate([side*10, 26.5, 12])\n            sphere(d=3);\n        }\n    }\n}\n\n// Wing module\nmodule wing() {\n    color(color_wings)\n    difference() {\n        // Main wing shape\n        translate([0, 0, 0])\n        scale([2, 0.2, 1])\n        sphere(d=25);\n        \n        // Wing edge shaping\n        for(i=[1:3]) {\n            translate([0, 0, -12 + i*8])\n            scale([0.8, 1, 0.3])\n            sphere(d=20);\n        }\n    }\n}\n\n// Tail module\nmodule tail() {\n    color(color_body)\n    union() {\n        // Three tail feathers\n        for(i=[-1:1]) {\n            translate([i*8, -25, -15])\n            rotate([45, 0, i*-10])\n            scale([0.6, 0.3, 1.5])\n            cylinder(h=20, d1=12, d2=6);\n        }\n    }\n}\n\n// Feet module\nmodule feet() {\n    color(color_beak)\n    union() {\n        for(side=[-1,1]) {\n            // Upper leg\n            translate([side*12, -5, -20])\n            rotate([0, 30, 0])\n            cylinder(h=12, d=6);\n            \n            // Lower leg\n            translate([side*15, -5, -28])\n            rotate([0, 90, 0])\n            cylinder(h=10, d=5);\n            \n            // Foot\n            translate([side*15, -5, -35])\n            rotate([90, 0, 0])\n            scale([1, 0.3, 1])\n            cylinder(h=8, d1=8, d2=12);\n        }\n    }\n}\n\n// Main assembly\nscale(scale_factor)\nunion() {\n    // Body\n    body();\n    \n    // Head\n    head();\n    \n    // Wings - positioned on sides\n    translate([22, 0, 5])\n    rotate([0, 0, 30])\n    wing();\n    \n    translate([-22, 0, 5])\n    rotate([0, 0, -30])\n    mirror([1,0,0])\n    wing();\n    \n    // Tail\n    tail();\n    \n    // Feet\n    feet();\n    \n    // Chest marking\n    color(color_feat)\n    translate([0, -10, 0])\n    rotate([90, 0, 0])\n    scale([1.2, 0.8, 0.1])\n    cylinder(h=1, d=30);\n}",
    "renders": true
  },
  {
    "pokemon": "tranquill",
    "openscad_code": "// Tranquill Pokemon - Medium complexity realistic style\n// 3D printable model, approximately 60mm tall\n\n// Main colors\n$bodyColor = [0.85, 0.85, 0.85];  // Light gray\n$accentColor = [0.2, 0.2, 0.3];   // Dark gray\n$beakColor = [0.95, 0.7, 0.2];   // Yellow-orange\n$eyeColor = [0.1, 0.1, 0.1];     // Black\n$detailColor = [0.95, 0.2, 0.2]; // Red\n\n// Body module\nmodule body() {\n    color($bodyColor) {\n        // Main body - oval shape\n        difference() {\n            scale([1.2, 1, 1.5]) sphere(d=25);\n            translate([0, 0, -15]) cube([40, 40, 30], center=true);\n        }\n        \n        // Chest detail\n        translate([0, 10, -5]) rotate([90, 0, 0]) \n            cylinder(h=20, d1=15, d2=10, center=true);\n    }\n}\n\n// Head module\nmodule head() {\n    color($bodyColor) {\n        // Head sphere\n        translate([0, 0, 25]) sphere(d=20);\n        \n        // Beak\n        translate([0, 0, 32]) rotate([90, 0, 0]) {\n            color($beakColor) {\n                cylinder(h=12, d1=8, d2=4);\n                translate([0, 0, 10]) sphere(d=6);\n            }\n        }\n        \n        // Crest feathers\n        for(i = [-1, 0, 1]) {\n            translate([i*4, 0, 35]) rotate([20*i, 0, 0]) \n                cylinder(h=8, d=2);\n        }\n        \n        // Eyes\n        for(side = [-1, 1]) {\n            color($eyeColor) {\n                translate([side*6, 8, 25]) sphere(d=3);\n                color(white) translate([side*6, 9.5, 25]) sphere(d=1.5);\n            }\n        }\n    }\n}\n\n// Wing module\nmodule wing(side) {\n    mirror([side, 0, 0]) {\n        color($bodyColor) {\n            // Main wing\n            translate([-15, -5, 10]) rotate([0, -15, 0]) \n                difference() {\n                    scale([1.5, 0.5, 1]) sphere(d=20);\n                    translate([0, 0, -15]) cube([30, 20, 30], center=true);\n                }\n            \n            // Wing tip\n            translate([-25, -5, 15]) rotate([0, -30, -30]) \n                scale([1, 0.3, 0.7]) sphere(d=12);\n            \n            // Wing markings\n            color($accentColor) {\n                for(i = [0, 1, 2]) {\n                    translate([-20 + i*5, -8, 10 + i*3]) \n                        rotate([0, 0, 30]) cube([3, 0.5, 8]);\n                }\n            }\n        }\n    }\n}\n\n// Tail module\nmodule tail() {\n    color($bodyColor) {\n        // Main tail feathers\n        for(i = [-1, 0, 1]) {\n            translate([0, -20, 5 + i*5]) rotate([0, -20, i*15]) {\n                scale([0.8, 0.2, 1.2]) sphere(d=15);\n                color($detailColor) \n                    translate([0, -8, 0]) cube([10, 0.5, 2]);\n            }\n        }\n    }\n}\n\n// Legs and feet\nmodule feet() {\n    color($beakColor) {\n        for(side = [-1, 1]) {\n            translate([side*5, 5, -15]) {\n                // Leg\n                cylinder(h=8, d=3);\n                \n                // Foot\n                translate([0, 0, -10]) {\n                    rotate([90, 0, 0]) cylinder(h=8, d=3);\n                    translate([side*3, 0, 0]) rotate([90, 0, 0]) cylinder(h=4, d=3);\n                }\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    body();\n    head();\n    wing(1);   // Right wing\n    wing(-1);  // Left wing\n    tail();\n    feet();\n    \n    // Ground base for stability\n    color($accentColor) {\n        translate([0, 0, -20]) cylinder(h=2, d=30);\n    }\n}",
    "renders": true
  },
  {
    "pokemon": "unfezant",
    "openscad_code": "// Unfezant Pokemon - Realistic Style, Medium Complexity\n// Approx. 75mm tall when printed\n\n$fn = 32;\n\n// Main colors\ncolor_body = [0.2, 0.15, 0.1];      // Dark brown\ncolor_wings = [0.85, 0.75, 0.6];   // Light gray\ncolor_crest = [0.9, 0.2, 0.2];     // Red crest\ncolor_beak = [0.95, 0.7, 0.15];    // Yellow beak\ncolor_legs = [0.4, 0.25, 0.15];    // Brown legs\ncolor_eyes = [0.1, 0.1, 0.1];      // Black eyes\ncolor_markings = [0.5, 0.4, 0.3];  // Medium brown\n\nmodule unfezant() {\n    union() {\n        // Main body\n        translate([0, 0, 20]) {\n            color(color_body)\n            scale([1.2, 0.8, 1.3])\n            sphere(d=30);\n        }\n        \n        // Neck\n        translate([0, 0, 35]) {\n            color(color_body)\n            cylinder(h=15, d1=12, d2=8);\n        }\n        \n        // Head\n        translate([0, 0, 50]) {\n            color(color_body)\n            sphere(d=18);\n            \n            // Beak (upper)\n            translate([7, 0, 2]) {\n                rotate([0, -20, 0]) {\n                    color(color_beak)\n                    cylinder(h=12, d1=8, d2=4);\n                }\n            }\n            \n            // Beak (lower)\n            translate([7, 0, -2]) {\n                rotate([0, 20, 0]) {\n                    color(color_beak)\n                    cylinder(h=10, d1=6, d2=3);\n                }\n            }\n            \n            // Eyes\n            for(x = [-1, 1]) {\n                translate([6, x*5, 3]) {\n                    color(color_eyes)\n                    sphere(d=4);\n                }\n            }\n            \n            // Crest feathers\n            translate([0, 0, 9]) {\n                color(color_crest)\n                rotate([0, 0, 0])\n                cylinder(h=12, d=3);\n            }\n            \n            translate([0, -3, 11]) {\n                color(color_crest)\n                rotate([0, 0, 15])\n                cylinder(h=10, d=2.5);\n            }\n            \n            translate([0, 3, 11]) {\n                color(color_crest)\n                rotate([0, 0, -15])\n                cylinder(h=10, d=2.5);\n            }\n        }\n        \n        // Wings\n        for(side = [-1, 1]) {\n            translate([0, side*20, 35]) {\n                rotate([0, 0, side*30]) {\n                    color(color_wings)\n                    difference() {\n                        // Main wing\n                        scale([1, 0.3, 1])\n                        sphere(d=40);\n                        \n                        // Wing tip\n                        translate([15, 0, 0]) {\n                            scale([0.8, 0.3, 0.8])\n                            sphere(d=25);\n                        }\n                        \n                        // Wing markings\n                        translate([5, side*3, 0]) {\n                            color(color_markings)\n                            scale([0.8, 0.2, 0.6])\n                            sphere(d=20);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Tail feathers\n        for(i = [-1, 0, 1]) {\n            translate([-25, i*8, 25]) {\n                rotate([20, 0, i*15]) {\n                    color(i == 0 ? color_crest : color_wings)\n                    scale([0.3, 0.1, 1.5])\n                    cylinder(h=30, d=8);\n                }\n            }\n        }\n        \n        // Legs\n        for(side = [-1, 1]) {\n            translate([side*8, 0, 10]) {\n                color(color_legs)\n                cylinder(h=18, d=5);\n                \n                // Feet\n                translate([0, 0, -10]) {\n                    color(color_legs)\n                    union() {\n                        // Main foot\n                        translate([0, 0, 0])\n                        cube([12, 5, 4], center=true);\n                        \n                        // Toes\n                        for(t = [-1, 0, 1]) {\n                            translate([t*4, 0, -3]) {\n                                cube([3, 4, 6], center=true);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Chest marking\n        translate([8, 0, 25]) {\n            color(color_markings)\n            scale([0.6, 0.4, 0.8])\n            sphere(d=20);\n        }\n    }\n}\n\n// Generate the model\nunfezant();",
    "renders": true
  },
  {
    "pokemon": "blitzle",
    "openscad_code": "// Blitzle in realistic style\n// 3D printable model with moderate detail\n\n// Color definitions\n$fa = 2;\n$fs = 0.5;\n\nmodule blitzle_body() {\n    color([0.8, 0.8, 0.85]) {\n        // Main body - horse-like torso\n        union() {\n            // Torso\n            translate([0, 0, 15])\n                scale([1.2, 0.8, 1])\n                sphere(12);\n            \n            // Neck\n            translate([8, 0, 20])\n                rotate([0, -15, 0])\n                scale([0.7, 0.6, 1.2])\n                cylinder(15, 4, 5);\n                \n            // Head\n            translate([15, 0, 32])\n                scale([1, 0.8, 0.9])\n                sphere(8);\n        }\n    }\n}\n\nmodule blitzle_legs() {\n    color([0.8, 0.8, 0.85]) {\n        for (i = [-1, 1]) {\n            // Front legs\n            translate([5, i*6, 12])\n                rotate([0, i*5, 0])\n                union() {\n                    cylinder(15, 2.5, 2);\n                    translate([0, 0, -3])\n                        sphere(3);\n                }\n            \n            // Back legs\n            translate([-5, i*6, 12])\n                rotate([0, -i*5, 0])\n                union() {\n                    cylinder(15, 2.5, 2);\n                    translate([0, 0, -3])\n                        sphere(3);\n                }\n        }\n    }\n}\n\nmodule blitzle_manemohawk() {\n    color([0.1, 0.1, 0.1]) {\n        // Mane/mohawk along neck and head\n        for (i = [0:8]) {\n            translate([10-i, 0, 18+i])\n                rotate([90, 0, 0])\n                scale([0.8, 1.5, 0.3])\n                cylinder(8, 1.5, 0.5);\n        }\n    }\n}\n\nmodule blitzle_ears() {\n    color([0.8, 0.8, 0.85]) {\n        for (i = [-1, 1]) {\n            translate([17, i*4, 37])\n                rotate([0, 0, i*20])\n                scale([0.8, 0.2, 2])\n                cylinder(6, 2, 0.5);\n        }\n    }\n}\n\nmodule blitzle_tail() {\n    color([0.8, 0.8, 0.85]) {\n        // Tail base\n        translate([-12, 0, 20])\n            rotate([0, 90, 0])\n            scale([1, 0.8, 0.8])\n            cylinder(15, 4, 2);\n        \n        // Tail lightning bolt segments\n        color([0.1, 0.1, 0.1]) {\n            translate([-18, 0, 20])\n                rotate([0, 90, 0])\n                scale([0.8, 0.3, 1])\n                cylinder(8, 3, 0.5);\n            \n            translate([-22, 2, 20])\n                rotate([0, 90, -30])\n                scale([0.6, 0.3, 0.8])\n                cylinder(6, 2, 0.5);\n            \n            translate([-25, 0, 20])\n                rotate([0, 90, 30])\n                scale([0.5, 0.3, 0.6])\n                cylinder(5, 1.5, 0.5);\n        }\n    }\n}\n\nmodule blitzle_face() {\n    // Eyes\n    color([0.1, 0.1, 0.1]) {\n        for (i = [-1, 1]) {\n            translate([19, i*3, 33])\n                scale([1.5, 0.8, 0.5])\n                sphere(1.5);\n        }\n    }\n    \n    // Nose\n    color([0.5, 0.5, 0.5])\n    translate([21, 0, 31])\n        sphere(1);\n    \n    // Mouth line\n    color([0.3, 0.3, 0.3])\n    translate([20.5, 0, 29.5])\n        scale([2, 0.1, 0.5])\n        cube([1, 1, 1]);\n}\n\nmodule blitzle_stripes() {\n    color([0.1, 0.1, 0.1]) {\n        // Body stripes\n        for (i = [0:3]) {\n            translate([5-i*4, 0, 20])\n                rotate([90, 0, 0])\n                scale([0.1, 8, 1.5])\n                cylinder(1, 1, 1);\n        }\n        \n        // Leg stripes\n        for (j = [-1, 1]) {\n            for (i = [0:1]) {\n                translate([5, j*6, 8-i*6])\n                    rotate([0, 90, 0])\n                    scale([0.1, 2.5, 1])\n                    cylinder(1, 1, 1);\n                    \n                translate([-5, j*6, 8-i*6])\n                    rotate([0, 90, 0])\n                    scale([0.1, 2.5, 1])\n                    cylinder(1, 1, 1);\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    blitzle_body();\n    blitzle_legs();\n    blitzle_manemohawk();\n    blitzle_ears();\n    blitzle_tail();\n    blitzle_face();\n    blitzle_stripes();\n}",
    "renders": true
  },
  {
    "pokemon": "zebstrika",
    "openscad_code": "// Zebstrika - Electric Pokemon\n// Realistic style, medium complexity\n\n// Colors\ncolor_body = [0.1, 0.1, 0.1];      // Black\ncolor_stripes = [1, 1, 1];        // White\ncolor_mane = [0.9, 0.9, 0.9];     // Light gray\ncolor_eyes = [0.2, 0.2, 0.8];     // Blue\ncolor_lightning = [1, 0.9, 0];    // Yellow\n\n// Overall scale\nscale_factor = 0.4;\n\nmodule zebstrika() {\n    scale([scale_factor, scale_factor, scale_factor])\n    union() {\n        // Main body\n        color(color_body)\n        translate([0, 0, 20])\n        scale([1, 0.6, 1.2])\n        sphere(r=15);\n\n        // Neck\n        color(color_body)\n        translate([0, 10, 35])\n        rotate([30, 0, 0])\n        scale([0.8, 0.6, 1.2])\n        cylinder(h=15, r1=8, r2=6);\n\n        // Head\n        color(color_body)\n        translate([0, 15, 45])\n        scale([1.2, 0.8, 1])\n        sphere(r=10);\n\n        // Snout\n        color(color_body)\n        translate([0, 20, 42])\n        rotate([15, 0, 0])\n        scale([0.6, 0.4, 0.8])\n        cylinder(h=12, r1=5, r2=3);\n\n        // Mane - front lightning bolt shape\n        for(i = [0:2]) {\n            color(color_mane)\n            rotate([0, 0, i*120])\n            translate([0, 10, 50])\n            scale([0.5, 0.2, 1.5])\n            rotate([0, 0, 45])\n            cube([8, 2, 15], center=true);\n        }\n\n        // Mane - rear spikes\n        color(color_mane)\n        translate([0, -5, 40])\n        for(i = [0:3]) {\n            rotate([0, 0, i*90])\n            translate([12, 0, 0])\n            rotate([0, 0, 45])\n            scale([0.3, 0.2, 1])\n            cube([8, 2, 12], center=true);\n        }\n\n        // Legs\n        module leg(x, y) {\n            color(color_body)\n            translate([x, y, 15])\n            scale([0.4, 0.4, 1])\n            cylinder(h=20, r=6);\n            \n            // Hoof\n            color(color_body)\n            translate([x, y, 5])\n            scale([0.6, 0.6, 0.3])\n            cylinder(h=3, r=7);\n        }\n\n        leg(10, 8);\n        leg(-10, 8);\n        leg(8, -8);\n        leg(-8, -8);\n\n        // Tail - lightning bolt shape\n        color(color_body)\n        translate([0, -20, 25])\n        rotate([0, 0, 180])\n        scale([0.8, 0.3, 2])\n        cylinder(h=15, r1=5, r2=2);\n\n        // Tail lightning bolt details\n        color(color_lightning)\n        translate([0, -28, 20])\n        rotate([0, 0, 45])\n        scale([0.3, 0.1, 1.5])\n        cube([8, 2, 12], center=true);\n        \n        color(color_lightning)\n        translate([0, -25, 15])\n        rotate([0, 0, -30])\n        scale([0.3, 0.1, 1.2])\n        cube([6, 2, 10], center=true);\n\n        // Ears\n        module ear(x) {\n            color(color_body)\n            translate([x, 15, 52])\n            rotate([0, -30, 0])\n            scale([0.3, 0.1, 1])\n            cube([5, 2, 10], center=true);\n        }\n        \n        ear(6);\n        ear(-6);\n\n        // Eyes\n        color(color_eyes)\n        translate([4, 18, 47])\n        scale([0.8, 0.3, 0.3])\n        sphere(r=3);\n        \n        color(color_eyes)\n        translate([-4, 18, 47])\n        scale([0.8, 0.3, 0.3])\n        sphere(r=3);\n\n        // White stripes - body\n        for(i = [0:4]) {\n            color(color_stripes)\n            translate([0, 0, 15 + i*7])\n            scale([1.05, 0.65, 0.2])\n            sphere(r=15);\n        }\n\n        // White stripes - neck and head\n        color(color_stripes)\n        translate([0, 15, 45])\n        scale([1.25, 0.85, 0.2])\n        sphere(r=10);\n\n        color(color_stripes)\n        translate([0, 10, 35])\n        scale([0.85, 0.65, 0.2])\n        sphere(r=8);\n\n        // Nostrils\n        color([0.1, 0.1, 0.1])\n        translate([1.5, 22, 42])\n        sphere(r=1);\n        \n        color([0.1, 0.1, 0.1])\n        translate([-1.5, 22, 42])\n        sphere(r=1);\n\n        // Lightning bolt pattern on hips\n        color(color_lightning)\n        translate([0, -15, 30])\n        rotate([90, 0, 0])\n        scale([0.3, 0.3, 0.05])\n        cylinder(h=15, r=8, center=true);\n    }\n}\n\nzebstrika();",
    "renders": true
  },
  {
    "pokemon": "roggenrola",
    "openscad_code": "// Roggenrola Pokemon OpenSCAD model\n// Realistic style, medium complexity\n\n$fa = 12;\n$fs = 0.5;\n\n// Main colors\ncolor_body = [0.2, 0.2, 0.2];\ncolor_face = [0.8, 0.8, 0.8];\ncolor_eye = [0.9, 0.9, 0.9];\ncolor_pupil = [0.1, 0.1, 0.1];\ncolor_yellow = [1, 0.8, 0];\ncolor_orange = [1, 0.5, 0];\n\n// Main body module\nmodule roggenrola() {\n    // Central rock body\n    color(color_body)\n    difference() {\n        sphere(d = 45);\n        \n        // Create hexagonal rock shape\n        for(i = [0:5]) {\n            rotate([0, 0, i * 60])\n            translate([0, 35, 0])\n            cube([70, 20, 45], center = true);\n        }\n    }\n    \n    // Face area\n    color(color_face)\n    translate([0, 0, 25])\n    sphere(d = 30);\n    \n    // Eyes\n    module eye(x_pos) {\n        color(color_eye)\n        translate([x_pos, 5, 32])\n        sphere(d = 8);\n        \n        color(color_pupil)\n        translate([x_pos, 8, 34])\n        sphere(d = 4);\n    }\n    \n    eye(-8);\n    eye(8);\n    \n    // Mouth\n    color(color_pupil)\n    translate([0, -8, 25])\n    rotate([90, 0, 0])\n    cylinder(h = 2, d1 = 12, d2 = 8, $fn = 16);\n    \n    // Ears/rock protrusions\n    module ear(x_pos, z_rot) {\n        color(color_body)\n        translate([x_pos, 20, 5])\n        rotate([0, 0, z_rot])\n        difference() {\n            cube([12, 20, 8], center = true);\n            translate([0, 10, 0])\n            cube([14, 22, 10], center = true);\n        }\n    }\n    \n    ear(-18, -20);\n    ear(18, 20);\n    \n    // Rock segments around body\n    for(i = [0:11]) {\n        angle = i * 30;\n        color(color_body)\n        translate([20 * cos(angle), 20 * sin(angle), 0])\n        rotate([0, 0, angle + 15])\n        difference() {\n            cube([10, 15, 8], center = true);\n            translate([0, 8, 0])\n            cube([12, 17, 10], center = true);\n        }\n    }\n    \n    // Yellow ore veins\n    for(i = [0:2]) {\n        angle = i * 120 + 45;\n        color(color_yellow)\n        translate([15 * cos(angle), 15 * sin(angle), 10])\n        rotate([90, 0, angle])\n        cylinder(h = 20, d = 3, $fn = 8);\n    }\n    \n    // Orange ore spots\n    for(i = [0:4]) {\n        angle = i * 72 + 15;\n        color(color_orange)\n        translate([18 * cos(angle), 18 * sin(angle), -5])\n        sphere(d = 4);\n    }\n    \n    // Bottom flat base for printing\n    color(color_body)\n    translate([0, 0, -22])\n    cylinder(h = 5, d = 40, $fn = 32);\n}\n\n// Generate the model\nroggenrola();",
    "renders": true
  },
  {
    "pokemon": "boldore",
    "openscad_code": "// Boldore - Rock Pokemon\n// Medium complexity realistic style\n// Approx 60mm tall\n\n$fn = 50;\n\nmodule boldore() {\n    // Main body - octahedral rock core\n    color(\"DarkGoldenrod\")\n    union() {\n        // Central rock mass\n        scale([1, 1.2, 0.8])\n        rotate([0, 45, 45])\n        cube([35, 35, 35], center=true);\n        \n        // Front face protrusion\n        translate([0, 15, 0])\n        scale([0.8, 0.3, 0.8])\n        rotate([0, 45, 0])\n        cube([30, 30, 30], center=true);\n    }\n    \n    // Side rock spikes\n    color(\"Goldenrod\")\n    for (angle = [0, 120, 240]) {\n        rotate([0, 0, angle])\n        translate([25, 0, 0])\n        rotate([0, 30, 45])\n        scale([0.5, 0.5, 1.2])\n        cube([20, 15, 15], center=true);\n    }\n    \n    // Top spike\n    color(\"Goldenrod\")\n    translate([0, 0, 25])\n    rotate([0, 0, 45])\n    scale([0.6, 0.6, 1])\n    cube([20, 20, 20], center=true);\n    \n    // Orange crystals\n    color(\"DarkOrange\")\n    union() {\n        // Front crystal\n        translate([0, 25, 5])\n        rotate([30, 0, 0])\n        scale([0.3, 1, 0.3])\n        cylinder(h=15, d1=10, d2=5);\n        \n        // Side crystals\n        for (pos = [[-20, 10, 5], [20, 10, 5]]) {\n            translate(pos)\n            rotate([30, 0, 30])\n            scale([0.3, 0.8, 0.3])\n            cylinder(h=12, d1=8, d2=4);\n        }\n    }\n    \n    // Eyes\n    color(\"DodgerBlue\")\n    union() {\n        translate([-8, 15, 5])\n        rotate([0, -20, 0])\n        scale([1, 0.5, 0.3])\n        sphere(5);\n        \n        translate([8, 15, 5])\n        rotate([0, -20, 0])\n        scale([1, 0.5, 0.3])\n        sphere(5);\n    }\n    \n    // Pupils\n    color(\"Black\")\n    union() {\n        translate([-8, 15, 7])\n        scale([0.5, 0.3, 0.1])\n        sphere(3);\n        \n        translate([8, 15, 7])\n        scale([0.5, 0.3, 0.1])\n        sphere(3);\n    }\n    \n    // Mouth\n    color(\"SaddleBrown\")\n    translate([0, 20, -5])\n    rotate([30, 0, 0])\n    scale([1, 0.5, 0.3])\n    cylinder(h=3, d1=10, d2=8);\n    \n    // Rock texture details\n    color(\"Peru\")\n    for (i = [0:15]) {\n        rotate([0, 0, i*24])\n        translate([15, 0, sin(i*30)*5])\n        scale([0.2, 0.2, 0.2])\n        sphere(3 + sin(i*45)*2);\n    }\n    \n    // Bottom rock formations\n    color(\"DarkGoldenrod\")\n    union() {\n        translate([-15, -10, -15])\n        rotate([30, 0, -30])\n        scale([0.5, 0.8, 0.5])\n        cube([20, 15, 15], center=true);\n        \n        translate([15, -10, -15])\n        rotate([30, 0, 30])\n        scale([0.5, 0.8, 0.5])\n        cube([20, 15, 15], center=true);\n    }\n}\n\n// Create the model centered at origin\nboldore();",
    "renders": true
  },
  {
    "pokemon": "gigalith",
    "openscad_code": "// Gigalith - Rock Pokémon\n// Realistic style, medium complexity\n// 3D printable design with no overhangs\n\n$fn = 32;\n\n// Main body color - dark gray\ncolor([0.3, 0.3, 0.3]) \nunion() {\n    // Central body - octagonal prism\n    translate([0, 0, 15]) \n    cylinder(h = 40, r1 = 25, r2 = 30, $fn = 8);\n    \n    // Upper body segment\n    translate([0, 0, 55]) \n    cylinder(h = 15, r1 = 30, r2 = 28, $fn = 8);\n    \n    // Core crystal - red\n    color([0.8, 0.2, 0.2]) \n    translate([0, 0, 30]) \n    cylinder(h = 20, r1 = 12, r2 = 8, $fn = 6);\n}\n\n// Legs - four thick pillars\nmodule leg(x, y) {\n    color([0.25, 0.25, 0.25])\n    translate([x, y, 0])\n    union() {\n        // Upper leg segment\n        cylinder(h = 15, r = 8);\n        // Lower leg segment - slightly tapered\n        translate([0, 0, 15])\n        cylinder(h = 15, r1 = 8, r2 = 10);\n        // Foot - flat base\n        translate([0, 0, 30])\n        cube([20, 20, 3], center = true);\n    }\n}\n\n// Place four legs\nleg(18, 18);\nleg(-18, 18);\nleg(18, -18);\nleg(-18, -18);\n\n// Arms - thick rectangular blocks\nmodule arm(x, y, angle) {\n    color([0.35, 0.35, 0.35])\n    translate([x, y, 40])\n    rotate([0, 0, angle])\n    union() {\n        // Shoulder joint\n        sphere(r = 10);\n        // Upper arm\n        translate([15, 0, 0])\n        cube([25, 12, 12], center = true);\n        // Forearm - crystal tip\n        translate([35, 0, 0])\n        cube([15, 10, 10], center = true);\n        // Crystal - orange\n        color([0.9, 0.4, 0.1])\n        translate([42, 0, 0])\n        cube([8, 6, 6], center = true);\n    }\n}\n\n// Place arms\narm(35, 0, 30);\narm(-35, 0, -30);\n\n// Head\ncolor([0.3, 0.3, 0.3])\ntranslate([0, 0, 75])\nunion() {\n    // Main head block\n    cube([40, 35, 30], center = true);\n    \n    // Eye ridges\n    translate([12, 12, 10])\n    cube([8, 8, 5]);\n    translate([-12, 12, 10])\n    cube([8, 8, 5]);\n    \n    // Eyes - glowing yellow\n    color([1, 0.8, 0])\n    translate([12, 12, 12])\n    sphere(r = 3);\n    translate([-12, 12, 12])\n    sphere(r = 3);\n    \n    // Crystal horn - red\n    color([0.7, 0.2, 0.2])\n    translate([0, 0, 20])\n    cylinder(h = 15, r1 = 8, r2 = 0, $fn = 6);\n}\n\n// Back crystals - three circular patterns\nmodule back_crystal(x, y, size) {\n    color([0.6, 0.2, 0.2])\n    translate([x, y, 50])\n    cylinder(h = size, r = size/2, $fn = 6);\n    \n    // Inner crystal\n    color([0.9, 0.3, 0.3])\n    translate([x, y, 50 + size])\n    cylinder(h = size/2, r = size/3, $fn = 6);\n}\n\nback_crystal(0, 25, 8);\nback_crystal(15, 20, 6);\nback_crystal(-15, 20, 6);\n\n// Side armor plates\nmodule armor_plate(x, y, angle) {\n    color([0.4, 0.4, 0.4])\n    translate([x, y, 35])\n    rotate([0, 0, angle])\n    cube([15, 8, 25]);\n}\n\narmor_plate(28, 15, 45);\narmor_plate(-28, 15, -45);\narmor_plate(28, -15, -45);\narmor_plate(-28, -15, 45);\n\n// Bottom details - vents/slits\nfor (i = [0:45:315]) {\n    rotate([0, 0, i])\n    translate([20, 0, 10])\n    cube([8, 3, 10]);\n}",
    "renders": true
  },
  {
    "pokemon": "woobat",
    "openscad_code": "// Woobat - Realistic Style, Medium Complexity\n// Size: ~60mm wingspan\n\n$fn = 48;\n\nmodule woobat_body() {\n    color(\"LightSteelBlue\")\n    union() {\n        // Main spherical body\n        sphere(d = 35);\n        \n        // Fuzzy chest patch\n        translate([0, -15, -5])\n        scale([1.2, 1, 0.8])\n        sphere(d = 25);\n    }\n}\n\nmodule woobat_ears() {\n    color(\"LightSteelBlue\")\n    for(side = [-1, 1]) {\n        translate([side * 12, 15, 10]) {\n            rotate([0, 20, side * 10])\n            scale([0.8, 0.8, 2])\n            sphere(d = 12);\n            \n            // Inner ear detail\n            translate([0, -2, 2])\n            color(\"LightPink\")\n            scale([0.6, 0.6, 1.6])\n            sphere(d = 8);\n            \n            // Ear rim\n            translate([0, 0, 5])\n            difference() {\n                cylinder(h = 3, d1 = 12, d2 = 14);\n                cylinder(h = 4, d1 = 10, d2 = 12);\n            }\n        }\n    }\n}\n\nmodule woobat_wings() {\n    color(\"SlateGray\")\n    for(side = [-1, 1]) {\n        translate([side * 18, 0, 0]) {\n            rotate([0, 0, side * 45])\n            translate([10, 0, 0])\n            scale([2, 0.3, 1.2])\n            sphere(d = 12);\n            \n            // Wing membrane\n            translate([5, 0, 0])\n            rotate([0, 0, side * 20])\n            scale([1.5, 0.1, 1])\n            sphere(d = 15);\n            \n            // Wing tip\n            translate([25, 0, 0])\n            scale([0.8, 0.8, 0.8])\n            sphere(d = 8);\n        }\n    }\n}\n\nmodule woobat_nose() {\n    color(\"SaddleBrown\")\n    translate([0, -17, 0])\n    rotate([90, 0, 0])\n    cylinder(h = 12, d1 = 5, d2 = 8);\n    \n    // Nostrils\n    for(side = [-1, 1]) {\n        translate([side * 2, -6, 0])\n        rotate([90, 0, 0])\n        color(\"Black\")\n        cylinder(h = 3, d = 2);\n    }\n}\n\nmodule woobat_eyes() {\n    color(\"Black\")\n    for(side = [-1, 1]) {\n        translate([side * 8, 5, 8]) {\n            sphere(d = 6);\n            \n            // Eye shine\n            translate([1.5, 1, 2])\n            color(\"White\")\n            sphere(d = 2);\n        }\n    }\n}\n\nmodule woobat_feet() {\n    color(\"LightSteelBlue\")\n    for(side = [-1, 1]) {\n        translate([side * 8, 0, -15]) {\n            // Foot\n            scale([1, 1.5, 0.5])\n            sphere(d = 8);\n            \n            // Toes\n            for(toe = [-1, 0, 1]) {\n                translate([toe * 3, -4, -2])\n                scale([0.8, 0.8, 0.8])\n                sphere(d = 5);\n            }\n        }\n    }\n}\n\nmodule woobat_tail() {\n    color(\"LightSteelBlue\")\n    translate([0, 15, -10])\n    rotate([45, 0, 0])\n    scale([1, 1, 2])\n    sphere(d = 10);\n}\n\n// Main assembly\nunion() {\n    woobat_body();\n    woobat_ears();\n    woobat_wings();\n    woobat_nose();\n    woobat_eyes();\n    woobat_feet();\n    woobat_tail();\n}",
    "renders": true
  },
  {
    "pokemon": "swoobat",
    "openscad_code": "// Swoobat - Realistic Style, Medium Complexity\n// 3D printable model with proper wall thickness and no extreme overhangs\n\n$fn = 32;\nbody_color = \"#9370DB\";\near_color = \"#DDA0DD\";\nwing_color = \"#8B7AB8\";\neye_color = \"#FF0000\";\nnose_color = \"#4B0082\";\n\n// Main body - heart-shaped\nmodule body() {\n    color(body_color)\n    union() {\n        // Central sphere\n        sphere(r = 12);\n        \n        // Heart lobes\n        translate([10, 0, 0]) sphere(r = 10);\n        translate([-10, 0, 0]) sphere(r = 10);\n        \n        // Bottom point\n        translate([0, 0, -15]) cylinder(h = 8, r1 = 8, r2 = 4);\n    }\n}\n\n// Large ears with inner folds\nmodule ear() {\n    color(ear_color)\n    difference() {\n        // Main ear shape\n        scale([1, 0.3, 2]) sphere(r = 15);\n        \n        // Inner ear cavity\n        translate([0, -1, 0]) scale([0.7, 0.4, 1.7]) sphere(r = 13);\n    }\n}\n\n// Wing structure\nmodule wing() {\n    color(wing_color)\n    difference() {\n        // Main wing\n        union() {\n            // Upper wing\n            translate([0, 0, 5]) scale([2.5, 0.15, 1.5]) sphere(r = 10);\n            \n            // Lower wing extension\n            translate([5, 0, -5]) scale([1.5, 0.15, 1.2]) sphere(r = 8);\n            \n            // Wing tip\n            translate([20, 0, 5]) sphere(r = 5);\n        }\n        \n        // Wing membrane holes\n        for(i = [1:3]) {\n            translate([5 + i*4, 0, 0]) \n            rotate([0, 90, 0]) \n            cylinder(h = 20, r = 2);\n        }\n    }\n}\n\n// Nose - prominent heart-shaped\nmodule nose() {\n    color(nose_color)\n    translate([0, 12, 0])\n    rotate([90, 0, 0])\n    scale([1, 1.2, 0.5])\n    cylinder(h = 8, r1 = 6, r2 = 0);\n}\n\n// Eyes with pupils\nmodule eye() {\n    color(eye_color)\n    difference() {\n        // Eye sphere\n        sphere(r = 3);\n        \n        // Pupil\n        translate([0, 1.5, 0.5])\n        rotate([90, 0, 0])\n        cylinder(h = 3, r1 = 1.5, r2 = 0.5);\n    }\n}\n\n// Feet\nmodule foot() {\n    color(body_color)\n    union() {\n        // Main foot\n        scale([0.8, 0.3, 1.5]) sphere(r = 4);\n        \n        // Toes\n        for(i = [-1:1]) {\n            translate([i*3, 0, -3])\n            sphere(r = 1.5);\n        }\n    }\n}\n\n// Tail\nmodule tail() {\n    color(ear_color)\n    translate([0, -15, -10])\n    rotate([45, 0, 0])\n    scale([0.5, 0.5, 3])\n    sphere(r = 5);\n}\n\n// Main assembly\nunion() {\n    // Body\n    body();\n    \n    // Ears - positioned on top\n    translate([8, 0, 15]) rotate([30, 0, 30]) ear();\n    translate([-8, 0, 15]) rotate([30, 0, -30]) mirror([1, 0, 0]) ear();\n    \n    // Wings - attached to sides\n    translate([12, 0, 0]) rotate([0, 0, -20]) wing();\n    translate([-12, 0, 0]) rotate([0, 0, 20]) mirror([1, 0, 0]) wing();\n    \n    // Nose\n    nose();\n    \n    // Eyes\n    translate([5, 10, 5]) eye();\n    translate([-5, 10, 5]) eye();\n    \n    // Feet\n    translate([4, 0, -15]) foot();\n    translate([-4, 0, -15]) foot();\n    \n    // Tail\n    tail();\n}",
    "renders": true
  },
  {
    "pokemon": "drilbur",
    "openscad_code": "// Drilbur OpenSCAD Model - Realistic Style - Medium Complexity\n\n// Colors\ndrilbur_blue = [0.3, 0.4, 0.6];\ndrilbur_white = [0.95, 0.95, 0.95];\ndrilbur_red = [0.8, 0.2, 0.2];\ndrilbur_dark_gray = [0.2, 0.2, 0.2];\ndrilbur_light_gray = [0.5, 0.5, 0.5];\n\n// Overall scale\nscale_factor = 1.2;\n\n// Main body\nmodule body() {\n    color(drilbur_blue) {\n        union() {\n            // Torso\n            translate([0, 0, 10]) {\n                scale([1.2, 1, 1.4]) {\n                    sphere(12);\n                }\n            }\n            \n            // Belly\n            translate([0, -11, 8]) {\n                color(drilbur_white) {\n                    scale([0.8, 0.6, 1.2]) {\n                        sphere(10);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Head with drill\nmodule head() {\n    color(drilbur_blue) {\n        union() {\n            // Head base\n            translate([0, 20, 25]) {\n                scale([0.9, 1.1, 1]) {\n                    sphere(10);\n                }\n            }\n            \n            // Snout\n            translate([0, 30, 25]) {\n                scale([0.7, 0.8, 0.6]) {\n                    cylinder(h=8, r=6);\n                }\n            }\n            \n            // Nose\n            color(drilbur_red) {\n                translate([0, 36, 25]) {\n                    sphere(3);\n                }\n            }\n            \n            // Eyes\n            color(drilbur_white) {\n                translate([-6, 24, 29]) {\n                    sphere(3);\n                }\n                translate([6, 24, 29]) {\n                    sphere(3);\n                }\n            }\n            \n            color(drilbur_dark_gray) {\n                translate([-6, 25, 30]) {\n                    sphere(1.5);\n                }\n                translate([6, 25, 30]) {\n                    sphere(1.5);\n                }\n            }\n        }\n    }\n    \n    // Drill\n    color(drilbur_light_gray) {\n        translate([0, 30, 35]) {\n            for(i = [0:15:180]) {\n                rotate([i, 0, 0]) {\n                    translate([0, 0, 15]) {\n                        scale([0.3, 0.3, 1]) {\n                            cylinder(h=15, r=5);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Arms with claws\nmodule arms() {\n    // Left arm\n    color(drilbur_blue) {\n        translate([-15, 5, 15]) {\n            rotate([0, 0, 30]) {\n                scale([0.4, 0.4, 1.2]) {\n                    cylinder(h=15, r=6);\n                }\n            }\n        }\n        \n        // Left claw\n        color(drilbur_light_gray) {\n            translate([-20, 0, 8]) {\n                for(i = [0:30:120]) {\n                    rotate([0, 0, i]) {\n                        translate([-3, 0, 0]) {\n                            scale([0.3, 0.3, 1]) {\n                                cylinder(h=8, r=3);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Right arm\n    color(drilbur_blue) {\n        translate([15, 5, 15]) {\n            rotate([0, 0, -30]) {\n                scale([0.4, 0.4, 1.2]) {\n                    cylinder(h=15, r=6);\n                }\n            }\n        }\n        \n        // Right claw\n        color(drilbur_light_gray) {\n            translate([20, 0, 8]) {\n                for(i = [0:30:120]) {\n                    rotate([0, 0, i]) {\n                        translate([3, 0, 0]) {\n                            scale([0.3, 0.3, 1]) {\n                                cylinder(h=8, r=3);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Legs\nmodule legs() {\n    color(drilbur_blue) {\n        // Left leg\n        translate([-8, -5, 0]) {\n            scale([0.5, 0.5, 1]) {\n                cylinder(h=10, r=5);\n            }\n        }\n        \n        // Left foot\n        translate([-8, -8, -5]) {\n            scale([1.2, 1.5, 0.5]) {\n                sphere(5);\n            }\n        }\n        \n        // Right leg\n        translate([8, -5, 0]) {\n            scale([0.5, 0.5, 1]) {\n                cylinder(h=10, r=5);\n            }\n        }\n        \n        // Right foot\n        translate([8, -8, -5]) {\n            scale([1.2, 1.5, 0.5]) {\n                sphere(5);\n            }\n        }\n    }\n}\n\n// Stripes\nmodule stripes() {\n    color(drilbur_dark_gray) {\n        // Head stripe\n        translate([0, 26, 32]) {\n            rotate([90, 0, 0]) {\n                scale([0.8, 0.1, 0.3]) {\n                    cylinder(h=20, r=10);\n                }\n            }\n        }\n        \n        // Body stripes\n        for(pos = [[0, 10, 20], [0, 0, 15]]) {\n            translate(pos) {\n                rotate([90, 0, 0]) {\n                    scale([1, 0.1, 0.3]) {\n                        cylinder(h=25, r=12);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Assemble the model\nscale([scale_factor, scale_factor, scale_factor]) {\n    union() {\n        body();\n        head();\n        arms();\n        legs();\n        stripes();\n    }\n}",
    "renders": true
  },
  {
    "pokemon": "excadrill",
    "openscad_code": "// Excadrill - Realistic Style, Medium Complexity\n// 3D printable at ~70mm height\n\n// Colors\ncolor_body = [0.4, 0.2, 0.1]; // Brown\ncolor_blades = [0.6, 0.6, 0.6]; // Gray\ncolor_markings = [0.8, 0.4, 0.2]; // Light brown\ncolor_eyes = [0.2, 0.2, 0.8]; // Blue\ncolor_red_mark = [0.8, 0.2, 0.2]; // Red stripe\n\nmodule body() {\n    color(color_body)\n    union() {\n        // Main body - tapered cylinder\n        cylinder(h=25, r1=12, r2=8, $fn=32);\n        \n        // Head extension\n        translate([0, 0, 25])\n        cylinder(h=8, r1=8, r2=6, $fn=32);\n    }\n}\n\nmodule drill_head() {\n    color(color_blades)\n    union() {\n        // Central cone\n        translate([0, 0, 33])\n        cylinder(h=20, r1=0.5, r2=12, $fn=32);\n        \n        // Drill blades (6 blades)\n        for(i=[0:5]) {\n            rotate([0, 0, i*60])\n            translate([6, 0, 33])\n            rotate([90, 0, 0])\n            cylinder(h=15, r=2.5, $fn=8);\n        }\n        \n        // Blade supports\n        for(i=[0:5]) {\n            rotate([0, 0, i*60])\n            translate([9, 0, 35])\n            cube([10, 3, 3], center=true);\n        }\n    }\n}\n\nmodule ears() {\n    color(color_body)\n    union() {\n        // Left ear\n        translate([-8, 12, 28])\n        rotate([0, 20, -30])\n        cylinder(h=12, r=3, $fn=8);\n        \n        // Right ear\n        translate([8, 12, 28])\n        rotate([0, 20, 30])\n        cylinder(h=12, r=3, $fn=8);\n    }\n}\n\nmodule arms() {\n    color(color_body)\n    union() {\n        // Left arm\n        translate([-15, 0, 15])\n        rotate([0, 0, -30])\n        rotate([0, 90, 0])\n        cylinder(h=20, r=4, $fn=8);\n        \n        // Right arm\n        translate([15, 0, 15])\n        rotate([0, 0, 30])\n        rotate([0, 90, 0])\n        cylinder(h=20, r=4, $fn=8);\n        \n        // Claws\n        for(i=[0:2]) {\n            rotate([0, 0, -30])\n            translate([-15 + i*3, 0, 15])\n            rotate([0, 90, 0])\n            cylinder(h=8, r1=2, r2=0.5, $fn=8);\n            \n            rotate([0, 0, 30])\n            translate([15 - i*3, 0, 15])\n            rotate([0, 90, 0])\n            cylinder(h=8, r1=2, r2=0.5, $fn=8);\n        }\n    }\n}\n\nmodule legs() {\n    color(color_body)\n    union() {\n        // Left leg\n        translate([-7, -10, -2])\n        cube([6, 8, 8]);\n        \n        // Right leg\n        translate([7, -10, -2])\n        cube([6, 8, 8]);\n        \n        // Feet\n        translate([-7, -12, -2])\n        cube([6, 4, 3]);\n        \n        translate([7, -12, -2])\n        cube([6, 4, 3]);\n    }\n}\n\nmodule tail() {\n    color(color_body)\n    union() {\n        // Tail base\n        translate([0, 12, 8])\n        rotate([0, 90, 0])\n        cylinder(h=15, r=3, $fn=8);\n        \n        // Tail blade\n        translate([0, 25, 8])\n        rotate([0, 90, 0])\n        rotate([0, 0, 45])\n        cube([10, 2, 12], center=true);\n    }\n}\n\nmodule facial_features() {\n    union() {\n        // Eyes\n        color(color_eyes)\n        union() {\n            translate([-4, 8, 32])\n            sphere(r=2);\n            \n            translate([4, 8, 32])\n            sphere(r=2);\n        }\n        \n        // Red stripe\n        color(color_red_mark)\n        translate([0, 5, 35])\n        cube([10, 2, 0.5], center=true);\n        \n        // Nose\n        color(color_markings)\n        translate([0, 10, 30])\n        sphere(r=1.5);\n    }\n}\n\nmodule body_markings() {\n    color(color_markings)\n    union() {\n        // Chest stripes\n        for(i=[0:2]) {\n            translate([0, 0, 15 + i*5])\n            rotate([90, 0, 0])\n            cylinder(h=1, r1=10, r2=8, $fn=32);\n        }\n        \n        // Side markings\n        translate([-12, 0, 12])\n        cube([3, 1, 8]);\n        \n        translate([12, 0, 12])\n        cube([3, 1, 8]);\n    }\n}\n\n// Main assembly\nunion() {\n    body();\n    drill_head();\n    ears();\n    arms();\n    legs();\n    tail();\n    facial_features();\n    body_markings();\n}",
    "renders": true
  },
  {
    "pokemon": "audino",
    "openscad_code": "// Audino - Realistic Style, Medium Complexity\n// 3D printable, ~75mm tall\n\n// Colors\ncolor_body = [1, 0.9, 0.85];\ncolor_ears = [1, 0.8, 0.7];\ncolor_markings = [0.9, 0.7, 0.9];\ncolor_eyes = [0.1, 0.1, 0.1];\ncolor_pink = [0.9, 0.6, 0.7];\n\n// Main body\nmodule body() {\n    color(color_body)\n    difference() {\n        union() {\n            // Torso\n            scale([1, 0.9, 1.3])\n                sphere(d=35, $fn=30);\n            \n            // Lower body\n            translate([0, 0, -20])\n                cylinder(h=25, d1=35, d2=25, $fn=30);\n        }\n        \n        // Leg holes\n        for(i=[-1, 1])\n            translate([i*12, -15, -22])\n                rotate([0, 90, 0])\n                    cylinder(h=25, d=12, $fn=20);\n    }\n}\n\n// Head\nmodule head() {\n    color(color_body)\n    translate([0, 0, 30])\n    union() {\n        // Main head\n        sphere(d=40, $fn=30);\n        \n        // Snout\n        translate([0, 20, -5])\n            scale([0.8, 1.2, 0.9])\n                sphere(d=25, $fn=20);\n    }\n}\n\n// Ears\nmodule ears() {\n    for(side=[-1, 1]) {\n        translate([side*20, 0, 45])\n        rotate([0, 0, side*15])\n        color(color_ears)\n        union() {\n            // Outer ear\n            scale([0.3, 2, 1.8])\n                sphere(d=25, $fn=20);\n            \n            // Inner ear detail\n            color(color_pink)\n            translate([side*1, 0, 0])\n                scale([0.2, 1.5, 1.5])\n                    sphere(d=20, $fn=15);\n        }\n    }\n}\n\n// Eyes\nmodule eyes() {\n    for(side=[-1, 1]) {\n        translate([side*12, 18, 30])\n        color(color_eyes)\n        sphere(d=6, $fn=10);\n        \n        // Eye highlights\n        translate([side*13, 19, 33])\n        color([1, 1, 1])\n        sphere(d=2, $fn=5);\n    }\n}\n\n// Legs\nmodule legs() {\n    for(side=[-1, 1]) {\n        translate([side*12, -15, -30])\n        color(color_body)\n        union() {\n            // Upper leg\n            cylinder(h=15, d=10, $fn=20);\n            \n            // Lower leg\n            translate([0, 0, -15])\n                cylinder(h=15, d=8, $fn=20);\n            \n            // Foot\n            translate([0, 2, -22])\n                scale([1.2, 2, 0.5])\n                    sphere(d=12, $fn=15);\n        }\n    }\n}\n\n// Arms\nmodule arms() {\n    for(side=[-1, 1]) {\n        translate([side*20, 0, 10])\n        rotate([0, 0, side*30])\n        color(color_body)\n        union() {\n            // Upper arm\n            cylinder(h=15, d=8, $fn=15);\n            \n            // Hand\n            translate([0, 0, -15])\n                scale([1.5, 2, 0.8])\n                    sphere(d=10, $fn=15);\n        }\n    }\n}\n\n// Chest markings\nmodule chest_markings() {\n    color(color_markings)\n    for(y=[5, 10, 15]) {\n        translate([0, y, 28])\n        scale([1, 0.3, 0.3])\n            sphere(d=15, $fn=10);\n    }\n}\n\n// Back markings\nmodule back_markings() {\n    color(color_markings)\n    translate([0, -25, 15])\n    rotate([90, 0, 0])\n    cylinder(h=0.5, d=20, $fn=20);\n    \n    translate([0, -25, 5])\n    rotate([90, 0, 0])\n    cylinder(h=0.5, d=15, $fn=15);\n}\n\n// Tail\nmodule tail() {\n    color(color_ears)\n    translate([0, -30, -15])\n    rotate([30, 0, 0])\n    difference() {\n        // Main tail\n        scale([1, 3, 0.8])\n            sphere(d=20, $fn=20);\n        \n        // Tail hole\n        translate([0, 0, 2])\n            scale([0.8, 2.5, 0.5])\n                sphere(d=15, $fn=15);\n    }\n}\n\n// Combine all parts\nunion() {\n    body();\n    head();\n    ears();\n    eyes();\n    legs();\n    arms();\n    chest_markings();\n    back_markings();\n    tail();\n}",
    "renders": true
  },
  {
    "pokemon": "timburr",
    "openscad_code": "// Timburr Pokemon - Realistic Style, Medium Complexity\n// Designed for 3D printing with no overhangs\n\n// Scale factor for easy resizing\nscale_factor = 1.5;\n\n// Main colors\n$fn = 32;\nHEAD_COLOR = \"#A0522D\";\nBODY_COLOR = \"#8B4513\";\nWOOD_COLOR = \"#DEB887\";\nMARKING_COLOR = \"#654321\";\nEYE_COLOR = \"#FFFFFF\";\nPUPIL_COLOR = \"#000000\";\nNOSE_COLOR = \"#FF69B4\";\n\n// Head module\nmodule head() {\n    color(HEAD_COLOR) {\n        // Main head sphere\n        translate([0, 0, 25 * scale_factor])\n        scale([1, 0.8, 1])\n        sphere(8 * scale_factor);\n        \n        // Forehead bulge\n        translate([0, 2 * scale_factor, 32 * scale_factor])\n        scale([0.8, 0.6, 0.6])\n        sphere(5 * scale_factor);\n    }\n    \n    // Nose\n    color(NOSE_COLOR)\n    translate([0, 9 * scale_factor, 23 * scale_factor])\n    scale([1.2, 0.6, 0.8])\n    sphere(2 * scale_factor);\n    \n    // Eyes\n    for(x = [-4, 4]) {\n        color(EYE_COLOR)\n        translate([x * scale_factor, 6 * scale_factor, 26 * scale_factor])\n        sphere(2 * scale_factor);\n        \n        color(PUPIL_COLOR)\n        translate([x * scale_factor, 7 * scale_factor, 26.5 * scale_factor])\n        sphere(1 * scale_factor);\n    }\n    \n    // Pink marking on forehead\n    color(MARKING_COLOR)\n    translate([0, 1 * scale_factor, 30 * scale_factor])\n    scale([6, 2, 0.5])\n    cube([1, 1, 1], center = true);\n    \n    // Ears\n    for(x = [-6, 6]) {\n        color(HEAD_COLOR)\n        translate([x * scale_factor, 0, 30 * scale_factor])\n        rotate([0, 30 * (x > 0 ? -1 : 1), 0])\n        scale([1.5, 0.8, 2])\n        cylinder(h = 4 * scale_factor, r1 = 2 * scale_factor, r2 = 1 * scale_factor);\n    }\n}\n\n// Body module\nmodule body() {\n    color(BODY_COLOR) {\n        // Torso\n        translate([0, 0, 10 * scale_factor])\n        scale([1.2, 0.8, 1.5])\n        sphere(10 * scale_factor);\n        \n        // Chest marking\n        color(MARKING_COLOR)\n        translate([0, 8 * scale_factor, 18 * scale_factor])\n        scale([4, 2, 0.5])\n        cube([1, 1, 1], center = true);\n        \n        // Navel\n        color(MARKING_COLOR)\n        translate([0, 8 * scale_factor, 12 * scale_factor])\n        sphere(1 * scale_factor);\n    }\n}\n\n// Arms module\nmodule arms() {\n    for(side = [-1, 1]) {\n        // Upper arm\n        color(BODY_COLOR)\n        translate([side * 8 * scale_factor, 0, 18 * scale_factor])\n        rotate([0, 0, side * 30])\n        scale([0.8, 0.8, 1.2])\n        cylinder(h = 8 * scale_factor, r = 3 * scale_factor);\n        \n        // Lower arm\n        translate([side * 12 * scale_factor, 0, 12 * scale_factor])\n        rotate([0, 0, side * 45])\n        scale([0.7, 0.7, 1])\n        cylinder(h = 6 * scale_factor, r = 2.5 * scale_factor);\n        \n        // Hand/fist\n        translate([side * 15 * scale_factor, 0, 8 * scale_factor])\n        sphere(3 * scale_factor);\n        \n        // Thumb\n        translate([side * 17 * scale_factor, 1 * scale_factor, 8 * scale_factor])\n        sphere(1.5 * scale_factor);\n    }\n}\n\n// Legs module\nmodule legs() {\n    for(side = [-1, 1]) {\n        // Thigh\n        color(BODY_COLOR)\n        translate([side * 4 * scale_factor, 0, 5 * scale_factor])\n        rotate([0, 0, side * 10])\n        cylinder(h = 8 * scale_factor, r = 3 * scale_factor);\n        \n        // Lower leg\n        translate([side * 4.5 * scale_factor, 0, -2 * scale_factor])\n        cylinder(h = 6 * scale_factor, r = 2.5 * scale_factor);\n        \n        // Foot\n        translate([side * 4.5 * scale_factor, 2 * scale_factor, -6 * scale_factor])\n        scale([1.5, 2, 0.8])\n        sphere(2 * scale_factor);\n    }\n}\n\n// Wooden log module\nmodule log() {\n    color(WOOD_COLOR) {\n        // Main log cylinder\n        rotate([90, 0, 0])\n        translate([0, -20 * scale_factor, 0])\n        cylinder(h = 25 * scale_factor, r = 2.5 * scale_factor);\n        \n        // Handle grip rings\n        for(i = [0:1]) {\n            translate([0, -18 * scale_factor + i * 5 * scale_factor, 0])\n            rotate([90, 0, 0])\n            scale([1.1, 1.1, 0.2])\n            cylinder(h = 25 * scale_factor, r = 2.5 * scale_factor);\n        }\n        \n        // Log end details\n        translate([0, -20 * scale_factor, 0])\n        rotate([90, 0, 0])\n        scale([1.2, 1.2, 0.5])\n        cylinder(h = 25 * scale_factor, r = 2.5 * scale_factor);\n    }\n}\n\n// Assembly\nunion() {\n    // Center the model\n    translate([0, 0, 10 * scale_factor]) {\n        head();\n        body();\n        arms();\n        legs();\n        \n        // Position log in right hand\n        translate([15 * scale_factor, -2 * scale_factor, 8 * scale_factor])\n        rotate([0, 0, -45])\n        log();\n    }\n}",
    "renders": true
  },
  {
    "pokemon": "gurdurr",
    "openscad_code": "// Gurdurr - Fighting Type Pokemon\n// Realistic style, medium complexity\n\nmodule gurdurr_body() {\n    color([0.8, 0.75, 0.7]) {\n        // Main torso\n        translate([0, 0, 25]) {\n            scale([1.2, 0.8, 1.5]) sphere(15);\n        }\n        \n        // Chest protrusion\n        translate([0, 15, 30]) {\n            rotate([0, 30, 0]) {\n                scale([0.8, 0.3, 1.2]) sphere(12);\n            }\n        }\n    }\n}\n\nmodule gurdurr_head() {\n    color([0.8, 0.75, 0.7]) {\n        // Main head\n        translate([0, 20, 45]) {\n            scale([0.9, 0.8, 1.1]) sphere(12);\n        }\n        \n        // Nose\n        translate([0, 25, 45]) {\n            scale([0.3, 0.2, 0.4]) sphere(5);\n        }\n        \n        // Ears\n        for(side = [-1, 1]) {\n            translate([side * 8, 20, 50]) {\n                rotate([side * 10, 0, 0]) {\n                    scale([0.4, 0.3, 1]) cylinder(h=8, r1=3, r2=2);\n                }\n            }\n        }\n    }\n}\n\nmodule gurdurr_arms() {\n    color([0.8, 0.75, 0.7]) {\n        // Left arm with I-beam\n        translate([-20, 10, 30]) {\n            rotate([0, 0, 30]) {\n                cylinder(h=25, r=4);\n                \n                // I-beam\n                translate([0, -15, 0]) {\n                    scale([1, 0.2, 0.1]) cube([25, 10, 3], center=true);\n                    translate([0, 0, 2]) cube([25, 3, 1], center=true);\n                    translate([0, 0, -2]) cube([25, 3, 1], center=true);\n                }\n            }\n        }\n        \n        // Right arm with I-beam\n        translate([20, 10, 30]) {\n            rotate([0, 0, -30]) {\n                cylinder(h=25, r=4);\n                \n                // I-beam\n                translate([0, -15, 0]) {\n                    scale([1, 0.2, 0.1]) cube([25, 10, 3], center=true);\n                    translate([0, 0, 2]) cube([25, 3, 1], center=true);\n                    translate([0, 0, -2]) cube([25, 3, 1], center=true);\n                }\n            }\n        }\n        \n        // Muscular definition\n        for(side = [-1, 1]) {\n            translate([side * 15, 5, 35]) {\n                sphere(6);\n            }\n        }\n    }\n}\n\nmodule gurdurr_legs() {\n    color([0.8, 0.75, 0.7]) {\n        // Left leg\n        translate([-8, -10, 10]) {\n            cylinder(h=20, r=5);\n            translate([0, 0, -10]) {\n                scale([1.2, 1.5, 0.5]) sphere(5);\n            }\n        }\n        \n        // Right leg\n        translate([8, -10, 10]) {\n            cylinder(h=20, r=5);\n            translate([0, 0, -10]) {\n                scale([1.2, 1.5, 0.5]) sphere(5);\n            }\n        }\n    }\n}\n\nmodule gurdurr_features() {\n    color([0.15, 0.1, 0.1]) {\n        // Eyebrows\n        for(side = [-1, 1]) {\n            translate([side * 4, 22, 48]) {\n                rotate([0, -20, 0]) {\n                    scale([0.5, 0.1, 0.1]) cube([6, 3, 1]);\n                }\n            }\n        }\n        \n        // Eyes\n        color([0.9, 0.9, 0.9]) {\n            for(side = [-1, 1]) {\n                translate([side * 3, 22, 45]) {\n                    sphere(2);\n                }\n            }\n        }\n        \n        // Pupils\n        color([0, 0, 0]) {\n            for(side = [-1, 1]) {\n                translate([side * 3, 22, 46.5]) {\n                    sphere(1);\n                }\n            }\n        }\n    }\n    \n    // Purple markings\n    color([0.4, 0.2, 0.5]) {\n        // Chest marking\n        translate([0, 15, 38]) {\n            scale([1.5, 0.8, 0.1]) cylinder(h=1, r=8);\n        }\n        \n        // Stripes on arms\n        for(side = [-1, 1]) {\n            translate([side * 15, 0, 35]) {\n                rotate([90, 0, 0]) {\n                    scale([0.8, 0.1, 0.8]) cylinder(h=3, r=3);\n                }\n            }\n        }\n    }\n}\n\nmodule gurdurr() {\n    union() {\n        gurdurr_body();\n        gurdurr_head();\n        gurdurr_arms();\n        gurdurr_legs();\n        gurdurr_features();\n    }\n}\n\n// Scale for 3D printing (80mm height)\nscale([0.5, 0.5, 0.5]) {\n    gurdurr();\n}",
    "renders": true
  },
  {
    "pokemon": "conkeldurr",
    "openscad_code": "// Conkeldurr - Realistic Medium Complexity\n// 3D printable Pokemon model\n\n// Color constants\n$fn = 32;\n\n// Main color - purple-gray\ncolor([0.6, 0.5, 0.7]) {\n    // Head\n    translate([0, 0, 70]) {\n        sphere(12);\n        // Snout\n        translate([0, -8, -5]) {\n            scale([1, 1.2, 0.8]) {\n                sphere(8);\n            }\n        }\n    }\n    \n    // Neck\n    translate([0, 0, 55]) {\n        cylinder(h=10, r1=6, r2=8);\n    }\n    \n    // Torso\n    translate([0, 0, 30]) {\n        scale([1.2, 1, 1.5]) {\n            sphere(15);\n        }\n    }\n    \n    // Shoulders\n    translate([-12, 0, 45]) {\n        sphere(8);\n    }\n    translate([12, 0, 45]) {\n        sphere(8);\n    }\n    \n    // Arms\n    module arm(side) {\n        translate([side * 15, 0, 40]) {\n            rotate([0, 0, side * 10]) {\n                // Upper arm\n                cylinder(h=20, r=6);\n                translate([0, 0, -20]) {\n                    // Forearm\n                    cylinder(h=25, r=5);\n                    // Fist\n                    translate([side * 5, 0, -30]) {\n                        sphere(8);\n                    }\n                }\n            }\n        }\n    }\n    \n    arm(1);\n    arm(-1);\n    \n    // Legs\n    module leg(side) {\n        translate([side * 8, 0, 0]) {\n            // Thigh\n            cylinder(h=20, r=7);\n            translate([0, 0, -20]) {\n                // Shin\n                cylinder(h=20, r=5);\n                // Foot\n                translate([0, 3, -25]) {\n                    scale([1.5, 2, 0.8]) {\n                        sphere(5);\n                    }\n                }\n            }\n        }\n    }\n    \n    leg(1);\n    leg(-1);\n}\n\n// Concrete pillars\nmodule concrete_pillar() {\n    color([0.7, 0.7, 0.75]) {\n        // Main cylinder\n        cylinder(h=40, r=5);\n        \n        // Top detail\n        translate([0, 0, 40]) {\n            cylinder(h=5, r=6);\n        }\n        \n        // Reinforcement rings\n        for(i = [0:10:30]) {\n            translate([0, 0, i]) {\n                difference() {\n                    cylinder(h=2, r=5.5);\n                    cylinder(h=3, r=4.5);\n                }\n            }\n        }\n    }\n}\n\n// Left pillar\ntranslate([-20, 15, 0]) {\n    rotate([10, 0, 0]) {\n        concrete_pillar();\n    }\n}\n\n// Right pillar\ntranslate([20, 15, 0]) {\n    rotate([10, 0, 0]) {\n        concrete_pillar();\n    }\n}\n\n// Face details\nmodule face() {\n    // Eyes\n    color([0.2, 0.2, 0.2]) {\n        translate([-5, -8, 72]) {\n            sphere(2);\n        }\n        translate([5, -8, 72]) {\n            sphere(2);\n        }\n    }\n    \n    // Nose\n    color([0.5, 0.4, 0.6]) {\n        translate([0, -10, 70]) {\n            sphere(1.5);\n        }\n    }\n    \n    // Mouth\n    color([0.1, 0.1, 0.1]) {\n        translate([0, -12, 68]) {\n            rotate([90, 0, 0]) {\n                cylinder(h=0.5, r=3);\n            }\n        }\n    }\n}\n\nface();\n\n// Red nose markings\ncolor([0.8, 0.3, 0.3]) {\n    translate([0, -8, 70]) {\n        sphere(3);\n    }\n}\n\n// Forehead ridge\ncolor([0.5, 0.4, 0.6]) {\n    translate([0, 0, 80]) {\n        cube([20, 4, 3], center=true);\n    }\n}\n\n// Belt detail\ncolor([0.3, 0.3, 0.3]) {\n    translate([0, 0, 35]) {\n        rotate([90, 0, 0]) {\n            cylinder(h=30, r=2);\n        }\n    }\n}\n\n// Back spikes\nfor(i = [0:30:60]) {\n    color([0.6, 0.5, 0.7]) {\n        rotate([0, 0, i]) {\n            translate([0, 18, 35]) {\n                rotate([30, 0, 0]) {\n                    cylinder(h=8, r1=3, r2=0);\n                }\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "pokemon": "tympole",
    "openscad_code": "// Tympole - Realistic Style\n// Medium complexity OpenSCAD model\n\n$fn = 32;\n\n// Main colors\ncolor_body = [0.4, 0.6, 0.9];\ncolor_belly = [0.7, 0.9, 1];\ncolor_eye = [0.1, 0.1, 0.1];\ncolor_mouth = [0.9, 0.2, 0.3];\ncolor_fin = [0.3, 0.5, 0.8];\n\n// Scale factor for 3D printing (approx 70mm length)\nscale_factor = 70;\n\nmodule tympole_body() {\n    color(color_body) {\n        // Main spherical body\n        sphere(r = 20);\n        \n        // Flattened bottom for stability\n        translate([0, 0, -20])\n        cylinder(h = 5, r1 = 20, r2 = 18);\n    }\n}\n\nmodule tympole_belly() {\n    color(color_belly) {\n        // Belly patch\n        difference() {\n            translate([0, -15, -10])\n            scale([1.2, 0.8, 0.6])\n            sphere(r = 15);\n            \n            // Trim to fit body\n            translate([0, -20, 0])\n            cube(50, center = true);\n        }\n    }\n}\n\nmodule tympole_ears() {\n    color(color_body) {\n        // Left ear\n        translate([-15, 15, 18])\n        rotate([0, 0, -30])\n        scale([0.5, 2, 0.3])\n        sphere(r = 8);\n        \n        // Right ear\n        translate([15, 15, 18])\n        rotate([0, 0, 30])\n        scale([0.5, 2, 0.3])\n        sphere(r = 8);\n    }\n}\n\nmodule tympole_eyes() {\n    // Left eye\n    translate([-8, 10, 15])\n    rotate([0, 0, -15])\n    color(color_eye) {\n        cylinder(h = 2, r = 4);\n        \n        // Eye highlight\n        translate([1, 1, 1.1])\n        color([1, 1, 1])\n        sphere(r = 1);\n    }\n    \n    // Right eye\n    translate([8, 10, 15])\n    rotate([0, 0, 15])\n    color(color_eye) {\n        cylinder(h = 2, r = 4);\n        \n        // Eye highlight\n        translate([1, 1, 1.1])\n        color([1, 1, 1])\n        sphere(r = 1);\n    }\n}\n\nmodule tympole_mouth() {\n    color(color_mouth) {\n        translate([0, 5, 8])\n        rotate([90, 0, 0])\n        linear_extrude(height = 1)\n        circle(r = 3);\n    }\n}\n\nmodule tympole_tail() {\n    color(color_fin) {\n        // Tail base\n        translate([0, 20, -5])\n        rotate([0, 0, 180])\n        cylinder(h = 15, r1 = 5, r2 = 0);\n        \n        // Tail fin\n        translate([0, 30, -8])\n        rotate([90, 0, 0])\n        scale([1.5, 1, 0.3])\n        sphere(r = 8);\n    }\n}\n\nmodule tympole_facial_markings() {\n    color([0.2, 0.4, 0.7]) {\n        // Left cheek marking\n        translate([-12, 5, 10])\n        rotate([0, 0, 30])\n        scale([1.5, 0.8, 0.2])\n        sphere(r = 4);\n        \n        // Right cheek marking\n        translate([12, 5, 10])\n        rotate([0, 0, -30])\n        scale([1.5, 0.8, 0.2])\n        sphere(r = 4);\n    }\n}\n\nmodule tympole_fin_details() {\n    color(color_fin) {\n        // Dorsal fin\n        translate([0, 0, 20])\n        rotate([0, 0, 0])\n        scale([2, 0.5, 0.3])\n        sphere(r = 6);\n        \n        // Side fins (arms)\n        for(side = [-1, 1]) {\n            translate([side * 18, 0, -10])\n            rotate([0, 90, side * 45])\n            scale([1.2, 0.8, 0.3])\n            sphere(r = 5);\n        }\n    }\n}\n\n// Assembly\nscale(scale_factor/50)\nunion() {\n    tympole_body();\n    tympole_belly();\n    tympole_ears();\n    tympole_eyes();\n    tympole_mouth();\n    tympole_tail();\n    tympole_facial_markings();\n    tympole_fin_details();\n}",
    "renders": true
  },
  {
    "pokemon": "palpitoad",
    "openscad_code": "// Palpitoad - Realistic Medium Complexity\n// Overall scale factor for 3D-printing\nscale_factor = 0.35;\n\n// Colors\nbody_color = [0.17, 0.35, 0.25];   // murky green\nbelly_color = [0.75, 0.80, 0.60];  // light beige\neye_color = [0.95, 0.95, 0.10];    // yellow\npupil_color = [0, 0, 0];           // black\nspot_color = [0.05, 0.05, 0.05];   // dark gray\n\n// Main body\nmodule body() {\n    difference() {\n        // Central blob\n        color(body_color)\n        scale([1, 0.9, 0.7])\n        sphere(30 * scale_factor, $fn = 50);\n        \n        // Flatten top slightly\n        translate([0, 0, 15 * scale_factor])\n        cube([60 * scale_factor, 60 * scale_factor, 30 * scale_factor], center = true);\n    }\n}\n\n// Belly patch\nmodule belly() {\n    color(belly_color)\n    translate([0, 0, -19 * scale_factor])\n    scale([0.9, 1, 0.3])\n    sphere(25 * scale_factor, $fn = 40);\n}\n\n// Eye\nmodule eye(pos) {\n    translate(pos) {\n        // Eyeball\n        color(eye_color)\n        sphere(6 * scale_factor, $fn = 20);\n        \n        // Pupil\n        color(pupil_color)\n        translate([0, 0, 5.5 * scale_factor])\n        scale([1, 1, 0.3])\n        sphere(3 * scale_factor, $fn = 15);\n    }\n}\n\n// Eyebrow ridge\nmodule eyebrow(pos) {\n    translate(pos) rotate([0, 0, 15 * (pos[0] < 0 ? 1 : -1)]) {\n        color(body_color)\n        rotate([90, 0, 0])\n        cylinder(h = 12 * scale_factor, r1 = 3 * scale_factor, r2 = 1 * scale_factor, $fn = 10);\n    }\n}\n\n// Nose bump (two small spheres)\nmodule nose() {\n    translate([-4 * scale_factor, 25 * scale_factor, 5 * scale_factor])\n    color(body_color)\n    sphere(3 * scale_factor, $fn = 10);\n    \n    translate([4 * scale_factor, 25 * scale_factor, 5 * scale_factor])\n    color(body_color)\n    sphere(3 * scale_factor, $fn = 10);\n}\n\n// Mouth\nmodule mouth() {\n    translate([0, 26 * scale_factor, -4 * scale_factor])\n    rotate([90, 0, 0])\n    color([0.1, 0.1, 0.1])\n    cylinder(h = 1 * scale_factor, r = 8 * scale_factor, $fn = 20);\n}\n\n// Ear\nmodule ear(pos, angle = 0) {\n    translate(pos) rotate([0, 0, angle]) {\n        // Main ear bulb\n        color(body_color)\n        scale([0.8, 1.2, 1])\n        sphere(8 * scale_factor, $fn = 20);\n        \n        // Inner ear\n        translate([0, 1 * scale_factor, 0])\n        color(belly_color)\n        scale([0.6, 1, 0.8])\n        sphere(6 * scale_factor, $fn = 15);\n    }\n}\n\n// Vocal sac bubble\nmodule bubble(pos) {\n    translate(pos) {\n        color(body_color)\n        sphere(5 * scale_factor, $fn = 15);\n    }\n}\n\n// Leg\nmodule leg(pos, angle = 0) {\n    translate(pos) rotate([0, 0, angle]) {\n        // Upper leg\n        color(body_color)\n        rotate([90, 0, 0])\n        cylinder(h = 12 * scale_factor, r1 = 5 * scale_factor, r2 = 4 * scale_factor, $fn = 10);\n        \n        // Lower leg\n        translate([0, 0, -14 * scale_factor])\n        cylinder(h = 10 * scale_factor, r1 = 4 * scale_factor, r2 = 5 * scale_factor, $fn = 10);\n        \n        // Foot\n        translate([0, 0, -26 * scale_factor])\n        color(body_color)\n        scale([1.5, 2, 0.7])\n        sphere(5 * scale_factor, $fn = 10);\n    }\n}\n\n// Tail\nmodule tail() {\n    translate([0, -28 * scale_factor, -5 * scale_factor])\n    rotate([20, 0, 0])\n    color(body_color)\n    scale([1, 0.6, 0.6])\n    sphere(12 * scale_factor, $fn = 20);\n}\n\n// Dark spots on back\nmodule spots() {\n    for (i = [-1:1]) {\n        translate([i * 10 * scale_factor, -5 * scale_factor, 15 * scale_factor])\n        color(spot_color)\n        sphere(3 * scale_factor, $fn = 8);\n    }\n    for (i = [-1:1]) {\n        translate([i * 8 * scale_factor, -15 * scale_factor, 12 * scale_factor])\n        color(spot_color)\n        sphere(2.5 * scale_factor, $fn = 8);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    belly();\n    tail();\n    \n    // Eyes\n    eye([-12 * scale_factor, 20 * scale_factor, 8 * scale_factor]);\n    eye([12 * scale_factor, 20 * scale_factor, 8 * scale_factor]);\n    \n    // Eyebrows\n    eyebrow([-15 * scale_factor, 22 * scale_factor, 15 * scale_factor]);\n    eyebrow([15 * scale_factor, 22 * scale_factor, 15 * scale_factor]);\n    \n    // Nose and mouth\n    nose();\n    mouth();\n    \n    // Ears\n    ear([-20 * scale_factor, 5 * scale_factor, 18 * scale_factor], -30);\n    ear([20 * scale_factor, 5 * scale_factor, 18 * scale_factor], 30);\n    \n    // Vocal sac bubbles\n    for (a = [0:60:300]) {\n        rotate([0, 0, a])\n        translate([0, 28 * scale_factor, -10 * scale_factor])\n        bubble([0, 0, 0]);\n    }\n    \n    // Legs\n    leg([-15 * scale_factor, 0, -20 * scale_factor], -20);\n    leg([15 * scale_factor, 0, -20 * scale_factor], 20);\n    leg([-10 * scale_factor, -20 * scale_factor, -20 * scale_factor], -10);\n    leg([10 * scale_factor, -20 * scale_factor, -20 * scale_factor], 10);\n    \n    // Spots\n    spots();\n}",
    "renders": true
  },
  {
    "pokemon": "seismitoad",
    "openscad_code": "// Seismitoad - Realistic Style - Medium Complexity\n// Overall dimensions: ~60mm height\n\n$fn = 32;\nscale_factor = 0.6;\n\nmodule seismitoad() {\n    // Body - main oval shape\n    color([0.5, 0.4, 0.3]) {\n        translate([0, 0, 20]) {\n            scale([1.2, 1, 1]) sphere(15);\n        }\n    }\n    \n    // Lower body - flatter oval\n    color([0.5, 0.4, 0.3]) {\n        translate([0, 0, 10]) {\n            scale([1.4, 1.2, 0.8]) sphere(15);\n        }\n    }\n    \n    // Head\n    color([0.5, 0.4, 0.3]) {\n        translate([0, 20, 35]) {\n            scale([1, 0.9, 1.1]) sphere(12);\n        }\n    }\n    \n    // Mouth\n    color([0.2, 0.1, 0.05]) {\n        translate([0, 25, 30]) {\n            rotate([30, 0, 0]) {\n                scale([0.8, 0.5, 0.3]) sphere(8);\n            }\n        }\n    }\n    \n    // Eyes\n    module eye() {\n        color([0.8, 0.8, 0]) {\n            translate([0, 0, 0]) sphere(3);\n            color([0, 0, 0]) {\n                translate([0, 0, 2]) sphere(1.5);\n            }\n        }\n    }\n    \n    // Left eye\n    translate([-7, 25, 40]) rotate([0, 30, -10]) eye();\n    \n    // Right eye\n    translate([7, 25, 40]) rotate([0, 30, 10]) mirror([1, 0, 0]) eye();\n    \n    // Eyebrow ridges\n    color([0.4, 0.3, 0.2]) {\n        for(x = [-6, 6]) {\n            translate([x, 20, 45]) {\n                rotate([0, 0, x > 0 ? -15 : 15]) {\n                    scale([0.3, 2, 0.3]) cylinder(h=3, r1=1.5, r2=1);\n                }\n            }\n        }\n    }\n    \n    // Vocal sacs (bumpy spheres)\n    module vocal_sac(x_pos) {\n        for(i = [0:2]) {\n            color([0.6, 0.5, 0.4]) {\n                translate([x_pos, 10 + i*5, 25 - i*3]) {\n                    scale([0.8, 0.8, 0.9]) sphere(3 + i);\n                }\n            }\n        }\n    }\n    \n    vocal_sac(-12);\n    vocal_sac(12);\n    \n    // Arms\n    module arm(side) {\n        color([0.5, 0.4, 0.3]) {\n            // Upper arm\n            translate([side * 15, 10, 25]) {\n                rotate([0, 0, side * 20]) {\n                    scale([0.8, 0.8, 1.2]) sphere(6);\n                }\n            }\n            \n            // Lower arm\n            translate([side * 20, 5, 15]) {\n                rotate([0, 0, side * 30]) {\n                    scale([0.7, 0.7, 1]) sphere(5);\n                }\n            }\n            \n            // Hand\n            translate([side * 25, 0, 10]) {\n                scale([1.2, 0.8, 0.6]) sphere(4);\n                \n                // Fingers\n                for(i = [-1, 0, 1]) {\n                    translate([0, i*2, 2]) {\n                        scale([0.3, 0.3, 1]) cylinder(h=3, r=1);\n                    }\n                }\n            }\n        }\n    }\n    \n    arm(1);\n    arm(-1);\n    \n    // Legs\n    module leg(side) {\n        color([0.5, 0.4, 0.3]) {\n            // Thigh\n            translate([side * 12, -10, 15]) {\n                rotate([0, 0, side * -15]) {\n                    scale([0.9, 0.9, 1.3]) sphere(7);\n                }\n            }\n            \n            // Lower leg\n            translate([side * 15, -15, 8]) {\n                rotate([0, 0, side * -20]) {\n                    scale([0.8, 0.8, 1.2]) sphere(6);\n                }\n            }\n            \n            // Foot\n            translate([side * 18, -20, 3]) {\n                scale([1.5, 2, 0.8]) sphere(5);\n            }\n        }\n    }\n    \n    leg(1);\n    leg(-1);\n    \n    // Back bumps\n    color([0.4, 0.3, 0.2]) {\n        for(i = [0:3]) {\n            translate([0, -10 - i*5, 25 + i*2]) {\n                scale([1 - i*0.1, 1 - i*0.1, 0.8]) sphere(4 + i);\n            }\n        }\n    }\n    \n    // Belly pattern\n    color([0.7, 0.6, 0.5]) {\n        translate([0, 0, 15]) {\n            scale([1.2, 1.5, 0.1]) sphere(10);\n        }\n    }\n    \n    // Tail\n    color([0.5, 0.4, 0.3]) {\n        translate([0, -25, 15]) {\n            rotate([0, 20, 0]) {\n                scale([0.8, 1.2, 1]) sphere(8);\n            }\n        }\n    }\n}\n\n// Final assembly\nscale([scale_factor, scale_factor, scale_factor]) {\n    seismitoad();\n}",
    "renders": true
  },
  {
    "pokemon": "throh",
    "openscad_code": "// Throh Pokemon - Realistic Style - Medium Complexity\n// 3D printable model using basic primitives\n\n$fn = 32;\n\n// Overall scale for 3D printing\nscale_factor = 0.3;\n\n// Main color definitions\nthroh_red = [0.8, 0.1, 0.1];\nwhite = [1, 1, 1];\nblack = [0.1, 0.1, 0.1];\nskin_tone = [0.9, 0.7, 0.5];\n\nmodule throh_pokemon() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        union() {\n            // Main body (torso)\n            color(throh_red) {\n                translate([0, 0, 0]) {\n                    scale([1.2, 1, 1.4]) sphere(r=15);\n                }\n            }\n            \n            // Head\n            color(skin_tone) {\n                translate([0, 0, 30]) {\n                    scale([1, 0.9, 1.1]) sphere(r=12);\n                }\n            }\n            \n            // Head band\n            color(black) {\n                translate([0, 0, 35]) {\n                    rotate([90, 0, 0]) cylinder(h=25, r1=13, r2=13);\n                }\n            }\n            \n            // Eyes\n            color(white) {\n                translate([-5, 11, 35]) sphere(r=2.5);\n                translate([5, 11, 35]) sphere(r=2.5);\n            }\n            \n            color(black) {\n                translate([-5, 12.5, 35]) sphere(r=1.5);\n                translate([5, 12.5, 35]) sphere(r=1.5);\n            }\n            \n            // Nose\n            color(skin_tone) {\n                translate([0, 11, 32]) sphere(r=1.5);\n            }\n            \n            // Mouth\n            color(black) {\n                translate([0, 9, 30]) {\n                    rotate([90, 0, 0]) cylinder(h=0.5, r1=2, r2=2);\n                }\n            }\n            \n            // Ears\n            color(skin_tone) {\n                translate([-12, 0, 38]) {\n                    rotate([0, 0, -30]) scale([0.8, 0.3, 1.2]) sphere(r=5);\n                }\n                translate([12, 0, 38]) {\n                    rotate([0, 0, 30]) scale([0.8, 0.3, 1.2]) sphere(r=5);\n                }\n            }\n            \n            // Arms\n            color(skin_tone) {\n                // Left arm\n                translate([-18, 0, 15]) {\n                    rotate([0, 0, -20]) {\n                        scale([1, 0.8, 2]) sphere(r=6);\n                    }\n                }\n                \n                // Right arm\n                translate([18, 0, 15]) {\n                    rotate([0, 0, 20]) {\n                        scale([1, 0.8, 2]) sphere(r=6);\n                    }\n                }\n            }\n            \n            // Hands in fists\n            color(skin_tone) {\n                // Left fist\n                translate([-25, 0, 5]) {\n                    sphere(r=5);\n                }\n                \n                // Right fist\n                translate([25, 0, 5]) {\n                    sphere(r=5);\n                }\n            }\n            \n            // Legs\n            color(throh_red) {\n                // Left leg\n                translate([-8, 0, -20]) {\n                    scale([0.8, 0.8, 1.5]) sphere(r=8);\n                }\n                \n                // Right leg\n                translate([8, 0, -20]) {\n                    scale([0.8, 0.8, 1.5]) sphere(r=8);\n                }\n            }\n            \n            // Feet\n            color(black) {\n                // Left foot\n                translate([-8, 5, -30]) {\n                    scale([1.2, 2, 0.5]) cube([10, 5, 5], center=true);\n                }\n                \n                // Right foot\n                translate([8, 5, -30]) {\n                    scale([1.2, 2, 0.5]) cube([10, 5, 5], center=true);\n                }\n            }\n            \n            // Belt\n            color(black) {\n                translate([0, 0, 15]) {\n                    rotate([90, 0, 0]) cylinder(h=30, r1=16, r2=16);\n                }\n            }\n            \n            // Belt knot\n            color(black) {\n                translate([0, -16, 15]) {\n                    sphere(r=3);\n                }\n            }\n            \n            // Belt ends\n            color(white) {\n                translate([0, -20, 15]) {\n                    scale([0.3, 1, 2]) cube([3, 3, 6], center=true);\n                }\n            }\n            \n            // Chest markings\n            color(white) {\n                translate([0, 10, 22]) {\n                    scale([0.3, 0.5, 1]) sphere(r=5);\n                }\n                \n                // Diagonal lines pattern\n                for(i = [-2:2]) {\n                    translate([i*2, 12+i*1.5, 22]) {\n                        scale([0.5, 0.1, 1.5]) cube([1, 1, 1], center=true);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Generate the model\nthroh_pokemon();",
    "renders": true
  },
  {
    "pokemon": "sawk",
    "openscad_code": "// Realistic Sawk Pokemon - Medium complexity\n// 3D printable, ~60mm tall\n\n// Main color definitions\n$fa = 8;\n$fs = 0.4;\n\nmodule sawk() {\n    // Body\n    color(\"royalblue\") {\n        // Torso\n        union() {\n            translate([0,0,25]) \n                scale([1,1.5,1]) \n                sphere(d=30);\n            \n            // Waist\n            translate([0,0,12]) \n                cylinder(d1=28, d2=22, h=15);\n        }\n        \n        // Head\n        translate([0,-5,43]) \n            scale([1.2,1.3,1.2]) \n            sphere(d=22);\n    }\n    \n    // Belt\n    color(\"red\") {\n        for(i=[-1,1]) {\n            rotate([0,0,i*5]) \n            translate([0,15,22]) \n            scale([1,0.8,1]) \n            cube([5,20,8], center=true);\n        }\n    }\n    \n    // Arms\n    module arm(side) {\n        translate([side*20,0,35]) {\n            // Shoulder\n            color(\"royalblue\") \n                sphere(d=18);\n            \n            // Upper arm\n            color(\"royalblue\") {\n                rotate([0,0,side*20]) \n                translate([side*8,-8,-10]) \n                cylinder(d=14, h=25);\n            }\n            \n            // Forearm\n            color(\"royalblue\") {\n                rotate([0,0,side*40]) \n                translate([side*15,-25,-25]) \n                cylinder(d1=12, d2=10, h=20);\n            }\n            \n            // Fist\n            color(\"lightgray\") {\n                translate([side*20,-35,-35]) \n                sphere(d=15);\n                \n                // Knuckles\n                for(i=[-1,0,1]) {\n                    translate([side*20 + i*4, -40, -35]) \n                    sphere(d=4);\n                }\n            }\n        }\n    }\n    \n    arm(1);\n    arm(-1);\n    \n    // Legs\n    module leg(side) {\n        translate([side*10,0,0]) {\n            // Thigh\n            color(\"royalblue\") {\n                rotate([0,0,side*10]) \n                cylinder(d=14, h=20);\n            }\n            \n            // Lower leg\n            color(\"royalblue\") {\n                translate([side*3,0,-20]) \n                cylinder(d1=12, d2=10, h=20);\n            }\n            \n            // Foot\n            color(\"lightgray\") {\n                translate([side*5,5,-35]) {\n                    scale([1.5,2,1]) \n                    cube([12,8,8], center=true);\n                    \n                    // Toes\n                    for(i=[-1,0,1]) {\n                        translate([side*3 + i*4, 10, -35]) \n                        sphere(d=4);\n                    }\n                }\n            }\n        }\n    }\n    \n    leg(1);\n    leg(-1);\n    \n    // Face\n    color(\"lightgray\") {\n        // Eyes\n        for(side=[-1,1]) {\n            translate([side*8, -12, 48]) {\n                rotate([90,0,0]) \n                cylinder(d1=8, d2=0, h=3);\n                \n                // Pupils\n                color(\"black\") \n                    translate([side*2, -2, 1]) \n                    sphere(d=3);\n            }\n        }\n        \n        // Nose\n        translate([0, -15, 45]) \n            sphere(d=4);\n        \n        // Mouth\n        translate([0, -18, 42]) {\n            rotate([90,0,0]) \n            cylinder(d1=12, d2=8, h=2);\n        }\n    }\n    \n    // Head fin\n    color(\"royalblue\") {\n        translate([0, -5, 55]) {\n            rotate([0,0,0]) \n            linear_extrude(height=2) {\n                polygon(points=[[-10,0], [10,0], [0,15]]);\n            }\n        }\n    }\n    \n    // Belt buckle\n    color(\"gold\") {\n        translate([0,15,22]) \n            cube([8,4,8], center=true);\n    }\n}\n\n// Base for stability\ntranslate([0,0,-40]) {\n    color(\"darkblue\") \n        cylinder(d=35, h=5);\n}\n\nsawk();",
    "renders": true
  },
  {
    "pokemon": "sewaddle",
    "openscad_code": "// Sewaddle - Realistic Style, Medium Complexity\n// Dimensions: ~60mm tall, 3D printable\n\n$fn=32;\n\n// Main colors\ncolor_leaf = [34/255, 139/255, 34/255];\ncolor_body = [255/255, 248/255, 220/255];\ncolor_yellow = [255/255, 215/255, 0];\ncolor_orange = [255/255, 165/255, 0];\ncolor_black = [0, 0, 0];\ncolor_white = [1, 1, 1];\n\n// Parameters\nbody_rad = 12;\nhead_rad = 10;\nbody_height = 20;\nhead_height = 15;\n\nmodule sewaddle() {\n    // Leaf cloak (main body covering)\n    color(color_leaf) {\n        translate([0, 0, body_height/2 + 5]) {\n            rotate([0, 0, 0]) {\n                difference() {\n                    // Main leaf shape\n                    scale([1.5, 2, 0.5]) {\n                        sphere(r=body_rad + 8);\n                    }\n                    \n                    // Cutout for head\n                    translate([0, 0, -5]) {\n                        sphere(r=body_rad + 2);\n                    }\n                    \n                    // Leaf veins (subtractive)\n                    for(i=[-1:1]) {\n                        translate([i*8, -15, 0]) {\n                            rotate([0, 0, i*20]) {\n                                scale([0.3, 2, 0.2]) {\n                                    cube([5, 30, 5], center=true);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Actual body\n    color(color_body) {\n        translate([0, 0, body_height/2]) {\n            sphere(r=body_rad);\n        }\n    }\n    \n    // Head\n    color(color_body) {\n        translate([0, 0, body_height + head_height/2 - 5]) {\n            sphere(r=head_rad);\n        }\n    }\n    \n    // Eyes\n    color(color_black) {\n        // Left eye\n        translate([-4, head_rad - 2, body_height + head_height - 2]) {\n            sphere(r=1.5);\n        }\n        // Right eye\n        translate([4, head_rad - 2, body_height + head_height - 2]) {\n            sphere(r=1.5);\n        }\n    }\n    \n    // Eye shine\n    color(color_white) {\n        translate([-3.5, head_rad - 1.5, body_height + head_height - 1]) {\n            sphere(r=0.5);\n        }\n        translate([4.5, head_rad - 1.5, body_height + head_height - 1]) {\n            sphere(r=0.5);\n        }\n    }\n    \n    // Mouth\n    color(color_black) {\n        translate([0, head_rad - 1, body_height + head_height - 5]) {\n            rotate([90, 0, 0]) {\n                cylinder(h=0.5, r1=1.5, r2=0.5, center=true);\n            }\n        }\n    }\n    \n    // Antenna\n    color(color_yellow) {\n        translate([-3, head_rad - 3, body_height + head_height + 5]) {\n            rotate([30, 0, -30]) {\n                cylinder(h=8, r=1);\n            }\n        }\n        translate([3, head_rad - 3, body_height + head_height + 5]) {\n            rotate([30, 0, 30]) {\n                cylinder(h=8, r=1);\n            }\n        }\n    }\n    \n    // Antenna tips\n    color(color_orange) {\n        translate([-4.5, head_rad - 3, body_height + head_height + 11]) {\n            sphere(r=2);\n        }\n        translate([4.5, head_rad - 3, body_height + head_height + 11]) {\n            sphere(r=2);\n        }\n    }\n    \n    // Legs\n    color(color_body) {\n        // Front left\n        translate([-body_rad/2, -body_rad/2, body_height/4]) {\n            rotate([0, 15, 0]) {\n                cylinder(h=8, r=2);\n            }\n        }\n        // Front right\n        translate([body_rad/2, -body_rad/2, body_height/4]) {\n            rotate([0, -15, 0]) {\n                cylinder(h=8, r=2);\n            }\n        }\n        // Back left\n        translate([-body_rad/2, body_rad/2, body_height/4]) {\n            rotate([0, 15, 0]) {\n                cylinder(h=8, r=2);\n            }\n        }\n        // Back right\n        translate([body_rad/2, body_rad/2, body_height/4]) {\n            rotate([0, -15, 0]) {\n                cylinder(h=8, r=2);\n            }\n        }\n    }\n    \n    // Feet\n    color(color_yellow) {\n        for(x=[-1, 1]) {\n            for(y=[-1, 1]) {\n                translate([x*body_rad/2, y*body_rad/2, -2]) {\n                    scale([1.5, 1, 0.5]) {\n                        sphere(r=3);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Leaf collar detail\n    color(color_leaf) {\n        translate([0, 0, body_height - 3]) {\n            rotate([0, 0, 0]) {\n                difference() {\n                    cylinder(h=3, r=body_rad + 2, center=true);\n                    cylinder(h=4, r=body_rad - 2, center=true);\n                }\n            }\n        }\n    }\n    \n    // Back leaf pattern\n    color(color_leaf) {\n        translate([0, body_rad + 5, body_height/2]) {\n            rotate([90, 0, 0]) {\n                scale([1.2, 1.5, 0.3]) {\n                    sphere(r=body_rad);\n                }\n            }\n        }\n    }\n}\n\n// Render the model\nsewaddle();",
    "renders": true
  },
  {
    "pokemon": "swadloon",
    "openscad_code": "// Swadloon - Realistic Style, Medium Complexity\n// 3D printable model with proper wall thickness and no overhangs\n\n// Main parameters\nbody_width = 30;\nbody_height = 35;\nbody_depth = 25;\ncloak_thickness = 2;\nscale_factor = 2;\n\n// Colors\n$fn = 32;\n\nmodule swadloon() {\n    // Main cloak/leaf wrapping\n    color([0.2, 0.4, 0.1]) {\n        // Front cloak leaf\n        translate([0, -body_depth/2, 0])\n        rotate([90, 0, 0])\n        difference() {\n            cylinder(h=body_height*1.2, r1=body_width/2, r2=body_width/1.5);\n            translate([0, 0, -cloak_thickness])\n            cylinder(h=body_height*1.2+cloak_thickness*2, r1=body_width/2-cloak_thickness, r2=body_width/1.5-cloak_thickness);\n        }\n        \n        // Side cloak leaf\n        rotate([0, 0, 45])\n        translate([0, -body_depth/2, 0])\n        rotate([90, 0, 0])\n        difference() {\n            cylinder(h=body_height*0.8, r1=body_width/2.5, r2=body_width/3);\n            translate([0, 0, -cloak_thickness])\n            cylinder(h=body_height*0.8+cloak_thickness*2, r1=body_width/2.5-cloak_thickness, r2=body_width/3-cloak_thickness);\n        }\n        \n        // Other side cloak leaf\n        rotate([0, 0, -45])\n        translate([0, -body_depth/2, 0])\n        rotate([90, 0, 0])\n        difference() {\n            cylinder(h=body_height*0.8, r1=body_width/2.5, r2=body_width/3);\n            translate([0, 0, -cloak_thickness])\n            cylinder(h=body_height*0.8+cloak_thickness*2, r1=body_width/2.5-cloak_thickness, r2=body_width/3-cloak_thickness);\n        }\n    }\n    \n    // Body inside cloak\n    color([0.4, 0.3, 0.2]) {\n        translate([0, 0, body_height/3])\n        sphere(d=body_width*0.8);\n    }\n    \n    // Head\n    color([0.45, 0.35, 0.25]) {\n        translate([0, body_depth/4, body_height/1.5])\n        sphere(d=body_width*0.6);\n    }\n    \n    // Ears\n    color([0.2, 0.4, 0.1]) {\n        // Left ear\n        translate([-body_width/3, body_depth/3, body_height*1.2])\n        rotate([30, -20, -30])\n        scale([0.3, 0.8, 0.1])\n        sphere(d=body_width/2);\n        \n        // Right ear\n        translate([body_width/3, body_depth/3, body_height*1.2])\n        rotate([30, 20, 30])\n        scale([0.3, 0.8, 0.1])\n        sphere(d=body_width/2);\n    }\n    \n    // Eyes\n    color([0.9, 0.9, 0.9]) {\n        // Left eye\n        translate([-body_width/6, body_depth/2.5, body_height*1.5])\n        sphere(d=body_width/8);\n        \n        // Right eye\n        translate([body_width/6, body_depth/2.5, body_height*1.5])\n        sphere(d=body_width/8);\n    }\n    \n    // Pupils\n    color([0.1, 0.1, 0.1]) {\n        // Left pupil\n        translate([-body_width/6, body_depth/2.3, body_height*1.55])\n        sphere(d=body_width/16);\n        \n        // Right pupil\n        translate([body_width/6, body_depth/2.3, body_height*1.55])\n        sphere(d=body_width/16);\n    }\n    \n    // Leaf veins\n    color([0.15, 0.3, 0.05]) {\n        for(i = [0:2]) {\n            rotate([0, 0, i*120])\n            translate([0, -body_depth/2+cloak_thickness, body_height/2])\n            scale([0.1, 1, 0.1])\n            cylinder(h=body_height*0.7, r=body_width/20);\n        }\n    }\n    \n    // Feet sticking out\n    color([0.4, 0.3, 0.2]) {\n        // Left foot\n        translate([-body_width/4, -body_depth/3, -body_height/4])\n        sphere(d=body_width/6);\n        \n        // Right foot\n        translate([body_width/4, -body_depth/3, -body_height/4])\n        sphere(d=body_width/6);\n    }\n}\n\n// Create the model\nscale([scale_factor, scale_factor, scale_factor])\nswadloon();",
    "renders": true
  },
  {
    "pokemon": "leavanny",
    "openscad_code": "// Leavanny - Realistic style, medium complexity\n// Approx 70mm tall when printed\n\n// Colors\n$fa = 2;\n$fs = 0.5;\n\nmodule leavanny() {\n    color([0.2, 0.65, 0.3]) {\n        // Head\n        translate([0, 0, 55]) rotate([0, 0, 0]) {\n            sphere(8);\n            \n            // Snout\n            translate([0, 9, -2]) scale([1, 1.2, 0.8]) sphere(6);\n            \n            // Eyes\n            color([1, 1, 1]) {\n                translate([-4, 7, 2]) sphere(2.5);\n                translate([4, 7, 2]) sphere(2.5);\n            }\n            color([0.1, 0.1, 0.1]) {\n                translate([-4, 8, 2.5]) sphere(1.2);\n                translate([4, 8, 2.5]) sphere(1.2);\n            }\n            \n            // Antennae\n            color([0.9, 0.9, 0.3]) {\n                translate([-6, 0, 7]) rotate([30, 0, -20]) cylinder(h=12, r1=1.5, r2=0.5);\n                translate([6, 0, 7]) rotate([30, 0, 20]) cylinder(h=12, r1=1.5, r2=0.5);\n            }\n            \n            // Leaf collar\n            color([0.3, 0.8, 0.4]) {\n                for(i=[0:45:315]) {\n                    rotate([0, 0, i]) translate([7, 0, -5]) {\n                        rotate([0, 20, 0]) scale([1, 0.3, 0.1]) cube([12, 5, 2]);\n                    }\n                }\n            }\n        }\n        \n        // Torso\n        translate([0, 0, 35]) scale([1.2, 0.8, 1.5]) sphere(10);\n        \n        // Arms\n        for(side=[-1, 1]) {\n            translate([side*12, 0, 40]) {\n                rotate([0, 0, side*20]) {\n                    // Upper arm\n                    rotate([0, 0, -90]) cylinder(h=8, r1=3, r2=2.5);\n                    \n                    // Leaf blade arms\n                    translate([0, -8, 0]) rotate([0, 0, side*30]) {\n                        color([0.4, 0.9, 0.5]) {\n                            scale([0.2, 1, 0.8]) rotate_extrude() \n                                translate([15, 0, 0]) circle(r=3);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Legs\n        for(side=[-1, 1]) {\n            translate([side*5, 0, 25]) {\n                // Thigh\n                rotate([0, 0, side*10]) cylinder(h=10, r1=4, r2=3);\n                \n                // Lower leg\n                translate([0, 0, -10]) rotate([0, 0, side*5]) cylinder(h=8, r1=3, r2=2.5);\n                \n                // Foot\n                color([0.9, 0.9, 0.3]) {\n                    translate([0, 2, -18]) scale([1.5, 2, 0.8]) sphere(3);\n                }\n            }\n        }\n        \n        // Abdomen\n        translate([0, -5, 20]) scale([1, 1.2, 1.3]) sphere(8);\n        \n        // Back leaves\n        color([0.4, 0.9, 0.5]) {\n            for(i=[0:60:300]) {\n                rotate([0, 0, i]) translate([0, -12, 35]) {\n                    rotate([0, 20, 0]) scale([0.3, 1, 0.8]) rotate_extrude() \n                        translate([10, 0, 0]) circle(r=4);\n                }\n            }\n        }\n        \n        // Tail leaves\n        color([0.4, 0.9, 0.5]) {\n            translate([0, -15, 25]) {\n                for(i=[-30, 0, 30]) {\n                    rotate([0, 0, i]) scale([0.8, 0.3, 0.1]) \n                        rotate_extrude() translate([8, 0, 0]) circle(r=3);\n                }\n            }\n        }\n    }\n}\n\n// Center the model\ntranslate([0, 0, 0]) leavanny();",
    "renders": true
  },
  {
    "pokemon": "venipede",
    "openscad_code": "// Venipede Pokemon - Realistic Style - Medium Complexity\n// Overall size: ~80mm long\n\n// Main colors\n$fn = 32;\n\nmodule venipede() {\n    // Main body segments\n    color([0.2, 0.1, 0.05]) {\n        // Head segment\n        translate([0, 0, 15]) {\n            sphere(d = 16);\n        }\n        \n        // Body segments\n        for(i = [1:4]) {\n            translate([-i * 12, 0, 15 - i * 1.5]) {\n                sphere(d = 16 - i * 2);\n            }\n        }\n        \n        // Tail segment\n        translate([-60, 0, 8]) {\n            sphere(d = 10);\n        }\n    }\n    \n    // Red armor plating\n    color([0.8, 0.1, 0.1]) {\n        // Head horn\n        translate([8, 0, 23]) {\n            rotate([0, 30, 0]) {\n                cylinder(h = 12, d1 = 6, d2 = 2);\n            }\n        }\n        \n        // Body plates\n        for(i = [0:4]) {\n            translate([-i * 12, 0, 15 - i * 1.5]) {\n                rotate([0, 90, 0]) {\n                    scale([1.2, 1, 0.3]) {\n                        sphere(d = 16 - i * 2);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Legs (3 pairs)\n    color([0.3, 0.15, 0.05]) {\n        for(side = [-1, 1]) {\n            for(pos = [0, 1, 2]) {\n                translate([-pos * 15 - 5, side * 10, 12 - pos]) {\n                    rotate([0, 0, side * 45]) {\n                        cylinder(h = 8, d = 4);\n                        translate([0, 0, 8]) {\n                            rotate([90, 0, 0]) {\n                                cylinder(h = 6, d = 3);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Eyes\n    color([0.1, 0.05, 0.6]) {\n        translate([6, 4, 18]) {\n            sphere(d = 3);\n        }\n        translate([6, -4, 18]) {\n            sphere(d = 3);\n        }\n    }\n    \n    // Eye pupils\n    color([0, 0, 0]) {\n        translate([7.5, 4, 18]) {\n            sphere(d = 1);\n        }\n        translate([7.5, -4, 18]) {\n            sphere(d = 1);\n        }\n    }\n    \n    // Mandibles\n    color([0.4, 0.2, 0.1]) {\n        translate([8, 3, 12]) {\n            rotate([0, -30, 30]) {\n                cylinder(h = 6, d1 = 3, d2 = 1);\n            }\n        }\n        translate([8, -3, 12]) {\n            rotate([0, -30, -30]) {\n                cylinder(h = 6, d1 = 3, d2 = 1);\n            }\n        }\n    }\n    \n    // Purple neck collar\n    color([0.4, 0.1, 0.5]) {\n        translate([-2, 0, 15]) {\n            rotate([0, 90, 0]) {\n                difference() {\n                    cylinder(h = 6, d = 18);\n                    cylinder(h = 7, d = 12);\n                }\n            }\n        }\n    }\n    \n    // Purple body rings\n    color([0.4, 0.1, 0.5]) {\n        for(i = [1:4]) {\n            translate([-i * 12, 0, 15 - i * 1.5]) {\n                rotate([0, 90, 0]) {\n                    difference() {\n                        cylinder(h = 4, d = 18 - i * 2);\n                        cylinder(h = 5, d = 12 - i * 1.5);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Antennae\n    color([0.3, 0.15, 0.05]) {\n        translate([6, 5, 22]) {\n            rotate([0, -45, 45]) {\n                cylinder(h = 10, d = 1.5);\n                translate([0, 0, 10]) {\n                    sphere(d = 2);\n                }\n            }\n        }\n        translate([6, -5, 22]) {\n            rotate([0, -45, -45]) {\n                cylinder(h = 10, d = 1.5);\n                translate([0, 0, 10]) {\n                    sphere(d = 2);\n                }\n            }\n        }\n    }\n}\n\n// Render the model\nvenipede();",
    "renders": true
  },
  {
    "pokemon": "whirlipede",
    "openscad_code": "// Whirlipede OpenSCAD Model - Realistic Style, Medium Complexity\n// 3D printable Pokemon model\n\n// Colors - using RGB values matching Pokemon colors\npurple = [0.4, 0.2, 0.6];\ndark_purple = [0.3, 0.1, 0.4];\nlight_gray = [0.7, 0.7, 0.7];\nred = [0.8, 0.2, 0.2];\nblack = [0.1, 0.1, 0.1];\n\n// Main scale factor for 3D printing\nscale_factor = 1.5;\n\n// Main body module\nmodule whirlipede_body() {\n    color(purple) {\n        // Central body - two curved sections\n        for (i = [-1, 1]) {\n            translate([0, 0, i * 10]) {\n                rotate([0, i * 15, 0]) {\n                    difference() {\n                        // Curved body segment\n                        scale([1, 0.8, 0.6]) {\n                            sphere(d = 25);\n                        }\n                        // Hollow center\n                        scale([0.7, 0.6, 0.4]) {\n                            sphere(d = 25);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Connecting rings between segments\n        for (i = [-0.5, 0.5]) {\n            translate([0, 0, i * 20]) {\n                rotate_extrude(angle = 360) {\n                    translate([8, 0, 0]) {\n                        circle(r = 3);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Eye module\nmodule eye(x_pos, y_pos, z_pos) {\n    translate([x_pos, y_pos, z_pos]) {\n        // Eye socket\n        color(dark_purple) {\n            sphere(d = 6);\n        }\n        \n        // Eye\n        translate([0, 0, 2]) {\n            color(red) {\n                scale([1, 1.2, 0.5]) {\n                    sphere(d = 4);\n                }\n            }\n        }\n        \n        // Pupil\n        translate([0, 0, 3]) {\n            color(black) {\n                sphere(d = 2);\n            }\n        }\n    }\n}\n\n// Spike module\nmodule spike(x_pos, angle, z_pos) {\n    translate([x_pos, 0, z_pos]) {\n        rotate([0, angle, 0]) {\n            color(light_gray) {\n                // Main spike\n                cylinder(h = 8, d1 = 4, d2 = 1);\n                \n                // Base ring\n                translate([0, 0, -1]) {\n                    cylinder(h = 2, d = 5);\n                }\n            }\n        }\n    }\n}\n\n// Leg module\nmodule leg(x_pos, y_pos, z_pos, angle) {\n    translate([x_pos, y_pos, z_pos]) {\n        rotate([0, 0, angle]) {\n            color(purple) {\n                // Upper leg\n                translate([0, 0, -3]) {\n                    cylinder(h = 6, d = 3);\n                }\n                \n                // Lower leg\n                translate([0, 0, -8]) {\n                    rotate([30, 0, 0]) {\n                        cylinder(h = 7, d = 2.5);\n                    }\n                }\n                \n                // Foot\n                translate([0, 0, -14]) {\n                    rotate([60, 0, 0]) {\n                        scale([1, 1.2, 0.5]) {\n                            sphere(d = 3);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Main assembly\nscale([scale_factor, scale_factor, scale_factor]) {\n    union() {\n        // Main body\n        whirlipede_body();\n        \n        // Eyes - positioned on front segment\n        eye(-8, 5, 12);\n        eye(-8, -5, 12);\n        \n        // Spikes around body\n        for (i = [0:30:330]) {\n            rotate([0, 0, i]) {\n                spike(12, 90, 0);\n                spike(12, 110, 10);\n                spike(12, 70, -10);\n            }\n        }\n        \n        // Legs\n        for (i = [0:60:300]) {\n            rotate([0, 0, i]) {\n                leg(8, 0, 5, 45);\n                leg(8, 0, -5, -45);\n            }\n        }\n        \n        // Markings on body\n        color(dark_purple) {\n            // Central stripe\n            translate([0, 0, 0]) {\n                scale([0.8, 0.1, 2]) {\n                    cylinder(h = 30, d = 20);\n                }\n            }\n            \n            // Ring patterns\n            for (i = [-15, 0, 15]) {\n                translate([0, 0, i]) {\n                    rotate_extrude(angle = 360) {\n                        translate([9, 0, 0]) {\n                            square([1, 2]);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "pokemon": "scolipede",
    "openscad_code": "// Scolipede - Realistic Style\n// Medium complexity 3D printable model\n\n// Color definitions\ncolor_body = [139/255, 0/255, 0/255];      // Dark red\ncolor_accents = [128/255, 128/255, 128/255]; // Gray\ncolor_eyes = [255/255, 255/255, 0/255];   // Yellow\ncolor_teeth = [255/255, 255/255, 255/255]; // White\n\n// Main body segments\nmodule body_segment(radius, length, is_head=false) {\n    union() {\n        // Main segment body\n        color(color_body)\n        cylinder(h=length, r1=radius, r2=radius*0.8, $fn=16);\n        \n        // Segment rings\n        for(i=[0:3]) {\n            translate([0, 0, i*length/4])\n            color(color_accents)\n            cylinder(h=1, r=radius*1.05, $fn=16);\n        }\n        \n        // Purple markings\n        if(!is_head) {\n            for(i=[0:2]) {\n                rotate([0, 0, i*120])\n                translate([radius*0.7, 0, length/2])\n                color([75/255, 0/255, 130/255])\n                cube([radius*0.4, 1, length*0.4], center=true);\n            }\n        }\n    }\n}\n\n// Horn module\nmodule horn() {\n    union() {\n        // Base\n        color(color_accents)\n        cylinder(h=5, r1=4, r2=2, $fn=8);\n        \n        // Tip\n        translate([0, 0, 5])\n        color(color_accents)\n        cone(h=8, r1=2, r2=0.5, $fn=8);\n    }\n}\n\n// Leg module\nmodule leg(length, angle) {\n    rotate([0, 0, angle])\n    translate([0, -3, 0])\n    union() {\n        // Upper leg\n        color(color_body)\n        rotate([90, 0, 0])\n        cylinder(h=length, r=2, $fn=8);\n        \n        // Lower leg\n        translate([0, 0, length])\n        rotate([45, 0, 0])\n        color(color_body)\n        cylinder(h=length*0.8, r=1.5, $fn=8);\n        \n        // Foot\n        translate([0, 0, length + length*0.8*sin(45)])\n        rotate([90, 0, 0])\n        color(color_accents)\n        cylinder(h=3, r1=2, r2=3, $fn=8);\n    }\n}\n\n// Eye module\nmodule eye() {\n    union() {\n        // Eye socket\n        color([0, 0, 0])\n        sphere(r=3, $fn=16);\n        \n        // Pupil\n        translate([0, 0.5, 1])\n        color(color_eyes)\n        sphere(r=2, $fn=16);\n    }\n}\n\n// Mandibles\nmodule mandible() {\n    color(color_accents)\n    difference() {\n        union() {\n            // Main mandible\n            rotate([0, -30, 0])\n            cube([8, 2, 3]);\n            \n            // Teeth\n            for(i=[0:3]) {\n                translate([i*2 - 3, 0, 1.5])\n                color(color_teeth)\n                cube([0.5, 2, 1]);\n            }\n        }\n        // Hollow for printing\n        translate([2, 0, 0])\n        cube([6, 1.8, 2.5], center=true);\n    }\n}\n\n// Main model\nunion() {\n    // Head\n    translate([0, 0, 0])\n    union() {\n        // Main head\n        body_segment(8, 12, true);\n        \n        // Horns\n        translate([0, 6, 10])\n        rotate([0, 15, 0])\n        horn();\n        \n        translate([0, -6, 10])\n        rotate([0, -15, 0])\n        horn();\n        \n        // Eyes\n        translate([5, 3, 6])\n        eye();\n        \n        translate([5, -3, 6])\n        scale([1, -1, 1])\n        eye();\n        \n        // Mandibles\n        translate([8, 2, 3])\n        rotate([0, 0, 45])\n        mandible();\n        \n        translate([8, -2, 3])\n        rotate([0, 0, -45])\n        scale([1, -1, 1])\n        mandible();\n    }\n    \n    // Body segments\n    translate([0, 0, -15])\n    body_segment(7, 10);\n    \n    translate([0, 0, -28])\n    body_segment(6.5, 10);\n    \n    translate([0, 0, -41])\n    body_segment(6, 10);\n    \n    translate([0, 0, -54])\n    body_segment(5.5, 10);\n    \n    translate([0, 0, -67])\n    body_segment(5, 8);\n    \n    // Tail segment\n    translate([0, 0, -80])\n    union() {\n        color(color_body)\n        cylinder(h=10, r1=5, r2=2, $fn=16);\n        \n        // Tail spikes\n        for(i=[0:5]) {\n            rotate([0, 0, i*60])\n            translate([4, 0, 5])\n            rotate([30, 0, 0])\n            color(color_accents)\n            cylinder(h=5, r1=1, r2=0, $fn=8);\n        }\n    }\n    \n    // Legs\n    // Side legs\n    for(i=[0:3]) {\n        translate([0, 0, -15 - i*13])\n        rotate([0, 90, 0])\n        leg(8, 45 + i*5);\n        rotate([0, 90, 0])\n        leg(8, -45 - i*5);\n    }\n    \n    // Rear legs\n    translate([0, 0, -67])\n    rotate([0, 90, 0])\n    leg(10, 60);\n    rotate([0, 90, 0])\n    leg(10, -60);\n}",
    "renders": true
  },
  {
    "pokemon": "cottonee",
    "openscad_code": "// Cottonee Pokemon - Realistic Style, Medium Complexity\n// Approx 70mm tall\n\ncolor(\"white\")\ndifference() {\n    // Main body\n    union() {\n        // Head\n        translate([0,0,45])\n            scale([1,1,1.1])\n            sphere(12, $fn=32);\n        \n        // Body\n        translate([0,0,25])\n            scale([1.2,1.2,1])\n            sphere(15, $fn=32);\n        \n        // Bottom fluff\n        translate([0,0,10])\n            scale([1.4,1.4,0.8])\n            sphere(12, $fn=32);\n    }\n    \n    // Eye sockets\n    translate([-5,8,47])\n        rotate([0,15,0])\n        sphere(3, $fn=16);\n    translate([5,8,47])\n        rotate([0,-15,0])\n        sphere(3, $fn=16);\n}\n\n// Eyes\ncolor(\"darkgreen\")\nunion() {\n    translate([-5,9,47])\n        rotate([0,15,0])\n        sphere(2, $fn=12);\n    translate([5,9,47])\n        rotate([0,-15,0])\n        sphere(2, $fn=12);\n}\n\n// Mouth\ncolor(\"darkgreen\")\ntranslate([0,5,42])\n    scale([1.5,0.5,1])\n    sphere(1.5, $fn=8);\n\n// Ears\ncolor(\"white\")\nunion() {\n    // Left ear\n    translate([-10,0,55])\n        rotate([0,-20,0])\n        scale([0.3,0.3,1.5])\n        cylinder(h=15, d=8, $fn=16);\n    \n    // Right ear\n    translate([10,0,55])\n        rotate([0,20,0])\n        scale([0.3,0.3,1.5])\n        cylinder(h=15, d=8, $fn=16);\n}\n\n// Cotton puffs\nmodule cotton_puff(pos, scale_factor) {\n    translate(pos)\n        scale([scale_factor, scale_factor, scale_factor])\n        sphere(5, $fn=16);\n}\n\n// Generate cotton puffs on head\ncolor(\"white\")\nfor(i=[0:15]) {\n    angle = i * 24;\n    radius = 15 + sin(i*2)*3;\n    cotton_puff([cos(angle)*radius, sin(angle)*radius, 55 + sin(i*3)*2], 1);\n}\n\n// Generate cotton puffs on body\nfor(i=[0:20]) {\n    angle = i * 18;\n    radius = 20 + cos(i*2)*4;\n    height = 20 + sin(i*3)*3;\n    cotton_puff([cos(angle)*radius, sin(angle)*radius, height], 0.8);\n}\n\n// Leaves\ncolor(\"darkgreen\")\nunion() {\n    // Front left leaf\n    translate([-12,-5,25])\n        rotate([0,15,-30])\n        scale([1,2,0.3])\n        cylinder(h=15, d=8, $fn=3);\n    \n    // Front right leaf\n    translate([12,-5,25])\n        rotate([0,-15,30])\n        scale([1,2,0.3])\n        cylinder(h=15, d=8, $fn=3);\n    \n    // Back leaf\n    translate([0,-15,30])\n        rotate([15,0,0])\n        scale([1.2,2.5,0.3])\n        cylinder(h=12, d=10, $fn=3);\n}\n\n// Feet\ncolor(\"darkgreen\")\nunion() {\n    // Left foot\n    translate([-8,-8,5])\n        rotate([0,0,-15])\n        scale([0.8,1.5,0.5])\n        cylinder(h=8, d=6, $fn=8);\n    \n    // Right foot\n    translate([8,-8,5])\n        rotate([0,0,15])\n        scale([0.8,1.5,0.5])\n        cylinder(h=8, d=6, $fn=8);\n}",
    "renders": true
  },
  {
    "pokemon": "whimsicott",
    "openscad_code": "// Whimsicott - Realistic Style, Medium Complexity\n// Size: ~75mm tall when printed\n\n// Global parameters\n$fn = 32;\nbody_color = \"#F5F5DC\";  // Cream\near_color = \"#228B22\";   // Forest green\neye_color = \"#006400\";   // Dark green\ncotton_color = \"#FFFFFF\"; // White\nblack = \"#000000\";\n\n// Main body module\nmodule whimsicott_body() {\n    color(body_color) {\n        // Torso\n        translate([0, 0, 15]) \n            scale([1.2, 1, 1.5]) \n                sphere(15);\n        \n        // Belly fluff\n        translate([0, -14, 15]) \n            scale([0.8, 0.3, 1.2]) \n                sphere(10);\n    }\n}\n\n// Ears module\nmodule ears() {\n    color(ear_color) {\n        // Left ear\n        translate([-12, 0, 35]) {\n            rotate([0, -20, -30]) \n                scale([0.3, 0.3, 1.5]) \n                    cylinder(h=15, r1=8, r2=3);\n            translate([-2, 0, 12]) \n                rotate([0, 0, -30]) \n                    scale([0.2, 0.2, 0.5]) \n                        sphere(5);\n        }\n        \n        // Right ear\n        translate([12, 0, 35]) {\n            rotate([0, 20, 30]) \n                scale([0.3, 0.3, 1.5]) \n                    cylinder(h=15, r1=8, r2=3);\n            translate([2, 0, 12]) \n                rotate([0, 0, 30]) \n                    scale([0.2, 0.2, 0.5]) \n                        sphere(5);\n        }\n    }\n}\n\n// Face module\nmodule face() {\n    // Eyes\n    color(eye_color) {\n        translate([-6, -15, 25]) sphere(3);\n        translate([6, -15, 25]) sphere(3);\n    }\n    \n    // Eye shine\n    color(white) {\n        translate([-5, -14, 26.5]) scale([0.5, 0.5, 0.5]) sphere(1.5);\n        translate([7, -14, 26.5]) scale([0.5, 0.5, 0.5]) sphere(1.5);\n    }\n    \n    // Mouth\n    color(black) {\n        translate([0, -15, 18]) \n            scale([0.8, 0.3, 0.3]) \n                sphere(3);\n    }\n    \n    // Nose\n    color(black) {\n        translate([0, -16, 22]) sphere(1);\n    }\n}\n\n// Cotton puffs module\nmodule cotton_puffs() {\n    color(cotton_color) {\n        // Back cotton\n        translate([0, 10, 30]) \n            scale([1.5, 1.5, 1.2]) \n                sphere(12);\n        \n        // Additional puffs using loop\n        for(i = [0:3]) {\n            rotate([0, 0, i*90+45]) \n                translate([8, 8, 28]) \n                    scale([0.7, 0.7, 0.7]) \n                        sphere(8);\n        }\n    }\n}\n\n// Arms module\nmodule arms() {\n    color(body_color) {\n        // Left arm\n        translate([-18, -5, 20]) {\n            rotate([0, 0, -30]) \n                scale([0.4, 0.4, 1]) \n                    cylinder(h=12, r=5);\n            translate([-5, 0, 6]) \n                scale([0.8, 0.8, 0.8]) \n                    sphere(5);\n        }\n        \n        // Right arm\n        translate([18, -5, 20]) {\n            rotate([0, 0, 30]) \n                scale([0.4, 0.4, 1]) \n                    cylinder(h=12, r=5);\n            translate([5, 0, 6]) \n                scale([0.8, 0.8, 0.8]) \n                    sphere(5);\n        }\n    }\n}\n\n// Feet module\nmodule feet() {\n    color(body_color) {\n        // Left foot\n        translate([-8, 0, 5]) {\n            scale([1, 0.8, 0.5]) \n                sphere(6);\n            translate([0, 0, -3]) \n                scale([1.2, 1, 0.3]) \n                    cube([10, 8, 3], center=true);\n        }\n        \n        // Right foot\n        translate([8, 0, 5]) {\n            scale([1, 0.8, 0.5]) \n                sphere(6);\n            translate([0, 0, -3]) \n                scale([1.2, 1, 0.3]) \n                    cube([10, 8, 3], center=true);\n        }\n    }\n}\n\n// Leaf collar module\nmodule leaf_collar() {\n    color(ear_color) {\n        for(i = [0:7]) {\n            rotate([0, 0, i*45]) \n                translate([0, 0, 12]) {\n                    rotate([15, 0, 0]) \n                        scale([0.8, 0.3, 0.1]) \n                            cylinder(h=15, r1=12, r2=0);\n                }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    whimsicott_body();\n    ears();\n    face();\n    cotton_puffs();\n    arms();\n    feet();\n    leaf_collar();\n}",
    "renders": true
  },
  {
    "pokemon": "petilil",
    "openscad_code": "// Petilil - Realistic Style, Medium Complexity\n// 3D printable model using basic OpenSCAD primitives\n\n// Main colors\npetilil_green = [0.4, 0.7, 0.3];\npetilil_leaf = [0.3, 0.6, 0.2];\npetilil_face = [0.9, 0.9, 0.8];\npetilil_eye = [0, 0, 0];\npetilil_mouth = [0.2, 0.2, 0.2];\n\n// Overall scale\nscale_factor = 0.8;\n\nmodule petilil_head() {\n    color(petilil_green) {\n        // Main head sphere\n        translate([0, 0, 15]) \n            scale([1, 0.9, 1.1]) \n                sphere(12, $fn=32);\n        \n        // Three leaf tufts\n        for(i=[-1, 0, 1]) {\n            rotate([0, 0, i * 120]) {\n                translate([0, 10, 18]) \n                    rotate([30, 0, 0]) \n                        scale([0.8, 0.3, 0.1]) \n                            sphere(8, $fn=16);\n            }\n        }\n    }\n}\n\nmodule petilil_face() {\n    color(petilil_face) {\n        // Face mask\n        translate([0, -2, 15]) \n            scale([0.7, 0.6, 0.5]) \n                sphere(10, $fn=32);\n        \n        // Eyes\n        color(petilil_eye) {\n            translate([4, -6, 18]) \n                sphere(1.5, $fn=16);\n            translate([-4, -6, 18]) \n                sphere(1.5, $fn=16);\n        }\n        \n        // Mouth\n        color(petilil_mouth) {\n            translate([0, -8, 14]) \n                rotate([90, 0, 0]) \n                    cylinder(h=0.5, r1=1.5, r2=0.5, $fn=16);\n        }\n    }\n}\n\nmodule petilil_leaves() {\n    color(petilil_leaf) {\n        // Main leaves around head\n        for(i=[0:5]) {\n            rotate([0, 0, i * 60]) {\n                translate([0, 12, 10]) \n                    rotate([15, 0, 0]) \n                        scale([0.8, 0.1, 2]) \n                            cube([8, 0.5, 15], center=true);\n            }\n        }\n        \n        // Side leaves\n        translate([8, 2, 8]) \n            rotate([0, 30, 45]) \n                scale([0.6, 0.1, 1.5]) \n                    cube([6, 0.5, 12], center=true);\n                    \n        translate([-8, 2, 8]) \n            rotate([0, 30, -45]) \n                scale([0.6, 0.1, 1.5]) \n                    cube([6, 0.5, 12], center=true);\n    }\n}\n\nmodule petilil_body() {\n    color(petilil_green) {\n        // Main body\n        translate([0, 0, 0]) \n            scale([0.9, 1.1, 1.2]) \n                sphere(10, $fn=32);\n        \n        // Bottom base\n        translate([0, 0, -8]) \n            scale([1.1, 1.2, 0.5]) \n                sphere(8, $fn=32);\n    }\n}\n\nmodule petilil_legs() {\n    color(petilil_green) {\n        // Three root-like legs\n        for(i=[0:2]) {\n            rotate([0, 0, i * 120]) {\n                translate([5, 0, -12]) \n                    rotate([30, 0, 0]) \n                        scale([0.4, 0.4, 1]) \n                            cylinder(h=8, r1=3, r2=1.5, $fn=16);\n            }\n        }\n    }\n}\n\nmodule petilil() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        union() {\n            // Assemble all parts\n            petilil_body();\n            petilil_head();\n            petilil_face();\n            petilil_leaves();\n            petilil_legs();\n        }\n    }\n}\n\n// Generate the complete model\npetilil();",
    "renders": true
  },
  {
    "pokemon": "lilligant",
    "openscad_code": "// Lilligant OpenSCAD Model - Realistic Style\n// Medium complexity, 3D printable\n\n$fn = 32;\n\n// Colors\ngreen = [0.2, 0.7, 0.2];\ndark_green = [0.1, 0.5, 0.1];\nyellow = [1, 0.9, 0.2];\nwhite = [1, 1, 1];\nred = [0.9, 0.2, 0.2];\n\n// Main module\nmodule lilligant() {\n    // Head\n    translate([0, 0, 40]) {\n        color(green) {\n            // Main head sphere\n            sphere(d = 15);\n            \n            // Flower crown base\n            cylinder(h = 5, r1 = 12, r2 = 15, center = true);\n            \n            // Petals\n            for(i = [0:7]) {\n                rotate([0, 0, i * 45]) {\n                    translate([10, 0, 5]) {\n                        rotate([0, 90, 0]) {\n                            scale([1, 1.5, 0.3]) {\n                                sphere(d = 8);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Eyes\n        color(white) {\n            translate([-4, 5, 2]) {\n                sphere(d = 3);\n            }\n            translate([4, 5, 2]) {\n                sphere(d = 3);\n            }\n        }\n        \n        color(red) {\n            translate([-4, 5, 2.5]) {\n                sphere(d = 1.5);\n            }\n            translate([4, 5, 2.5]) {\n                sphere(d = 1.5);\n            }\n        }\n        \n        // Mouth\n        color(dark_green) {\n            translate([0, 7, -2]) {\n                rotate([90, 0, 0]) {\n                    cylinder(h = 0.5, r1 = 2, r2 = 0, center = true);\n                }\n            }\n        }\n    }\n    \n    // Neck\n    color(green) {\n        translate([0, 0, 30]) {\n            cylinder(h = 8, r1 = 5, r2 = 7.5);\n        }\n    }\n    \n    // Body\n    color(green) {\n        translate([0, 0, 15]) {\n            sphere(d = 25);\n            \n            // Leaf collar\n            for(i = [0:4]) {\n                rotate([0, 0, i * 72]) {\n                    translate([12, 0, 5]) {\n                        rotate([0, 0, 30]) {\n                            scale([1, 2.5, 0.2]) {\n                                sphere(d = 10);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Arms/Leaves\n    color(dark_green) {\n        // Left arm\n        translate([-15, 5, 20]) {\n            rotate([0, 0, -45]) {\n                scale([0.3, 1.5, 0.1]) {\n                    sphere(d = 15);\n                }\n            }\n        }\n        \n        // Right arm\n        translate([15, 5, 20]) {\n            rotate([0, 0, 45]) {\n                scale([0.3, 1.5, 0.1]) {\n                    sphere(d = 15);\n                }\n            }\n        }\n    }\n    \n    // Legs\n    color(green) {\n        // Left leg\n        translate([-5, -5, 0]) {\n            cylinder(h = 15, r1 = 4, r2 = 3);\n        }\n        \n        // Right leg\n        translate([5, -5, 0]) {\n            cylinder(h = 15, r1 = 4, r2 = 3);\n        }\n    }\n    \n    // Feet\n    color(dark_green) {\n        translate([-5, -5, -7.5]) {\n            sphere(d = 7);\n        }\n        translate([5, -5, -7.5]) {\n            sphere(d = 7);\n        }\n    }\n    \n    // Flower antenna\n    color(yellow) {\n        translate([0, 0, 52]) {\n            cylinder(h = 8, r1 = 1, r2 = 0.5);\n            \n            // Flower top\n            translate([0, 0, 4]) {\n                sphere(d = 3);\n                \n                // Petals\n                for(i = [0:4]) {\n                    rotate([0, 0, i * 72]) {\n                        translate([3, 0, 0]) {\n                            scale([0.5, 1, 0.1]) {\n                                sphere(d = 4);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Render the model\nlilligant();",
    "renders": true
  },
  {
    "pokemon": "basculin",
    "openscad_code": "// Basculin Pokemon - Realistic Style, Medium Complexity\n// 3D printable model with proper wall thickness and no overhangs\n\ncolor([0.2, 0.4, 0.8])  // Main body color - blue\nunion() {\n    // Main body\n    translate([0, 0, 5])\n    scale([1.5, 0.8, 0.6])\n    sphere(10);\n\n    // Head\n    translate([15, 0, 8])\n    scale([1.2, 0.9, 0.7])\n    sphere(8);\n\n    // Tail fin\n    translate([-18, 0, 5])\n    rotate([0, 0, 15])\n    scale([0.3, 1.5, 0.1])\n    cube([10, 8, 2]);\n\n    // Top dorsal fin\n    translate([0, 0, 15])\n    rotate([0, 0, 0])\n    scale([0.2, 1.2, 0.8])\n    cube([12, 8, 3]);\n\n    // Side fins\n    module side_fin(x_pos, y_rot) {\n        translate([x_pos, y_rot > 0 ? 10 : -10, 2])\n        rotate([0, 0, y_rot])\n        scale([0.8, 1.5, 0.3])\n        cube([8, 6, 2]);\n    }\n    \n    side_fin(5, 30);\n    side_fin(5, -30);\n\n    // Jaw\n    translate([20, 0, 2])\n    scale([0.6, 0.4, 0.3])\n    sphere(8);\n\n    // Eyes\n    module eye(x_pos, y_pos) {\n        translate([x_pos, y_pos, 8])\n        color([1, 1, 1])\n        sphere(2.5);\n        \n        translate([x_pos + 1, y_pos, 9])\n        color([0, 0, 0])\n        sphere(1.5);\n        \n        translate([x_pos - 1, y_pos - 0.5, 9])\n        color([1, 1, 1])\n        sphere(0.7);\n    }\n    \n    eye(20, 4);\n    eye(20, -4);\n\n    // Teeth\n    for(i = [-2:1:2]) {\n        translate([23, i * 1.5, 1.5])\n        color([1, 1, 1])\n        rotate([0, -20, 0])\n        scale([0.3, 0.3, 1])\n        cylinder(h=2, r=0.5);\n    }\n\n    // Red markings on fins\n    color([0.8, 0.1, 0.1])\n    union() {\n        // Tail fin markings\n        translate([-18, 0, 6.5])\n        scale([0.2, 1.3, 0.05])\n        cube([10, 6, 1]);\n        \n        // Dorsal fin markings\n        translate([0, 0, 16.5])\n        scale([0.15, 1, 0.3])\n        cube([10, 6, 1]);\n        \n        // Side fin markings\n        translate([5, 12, 3])\n        rotate([0, 0, 30])\n        scale([0.7, 1.2, 0.05])\n        cube([6, 4, 1]);\n        \n        translate([5, -12, 3])\n        rotate([0, 0, -30])\n        scale([0.7, 1.2, 0.05])\n        cube([6, 4, 1]);\n    }\n\n    // Gill slits\n    for(i = [1:1:3]) {\n        translate([12 - i * 2, 0, 5])\n        color([0.1, 0.2, 0.4])\n        scale([0.1, 1, 0.3])\n        cube([1, 8, 2]);\n    }\n\n    // Bottom fins\n    module bottom_fin(x_pos, angle) {\n        translate([x_pos, 0, -3])\n        rotate([angle, 0, 0])\n        scale([0.3, 1, 0.8])\n        cube([5, 3, 2]);\n    }\n    \n    bottom_fin(-5, 20);\n    bottom_fin(-10, 15);\n}",
    "renders": true
  },
  {
    "pokemon": "sandile",
    "openscad_code": "// Sandile - realistic style, medium complexity\n// 3D printable with no overhangs, ~70mm long\n\nmodule sandile() {\n    color([0.2, 0.15, 0.1]) {\n        // Main body - elongated teardrop shape\n        union() {\n            // Upper body\n            translate([0, 0, 10])\n                scale([1, 0.7, 0.6])\n                sphere(d=30);\n            \n            // Lower body extension\n            translate([0, 0, 5])\n                scale([1.5, 0.8, 0.4])\n                sphere(d=25);\n                \n            // Tail\n            translate([-35, 0, 8])\n                rotate([0, 0, -15])\n                scale([0.3, 0.3, 1])\n                cylinder(h=30, d1=15, d2=5);\n        }\n        \n        // Head\n        translate([15, 0, 18])\n            scale([0.9, 0.8, 0.7])\n            sphere(d=25);\n            \n        // Snout\n        translate([27, 0, 18])\n            scale([0.5, 0.4, 0.3])\n            sphere(d=20);\n            \n        // Legs - four short legs\n        module leg(x, y, angle) {\n            translate([x, y, 0])\n                rotate([0, 0, angle])\n                union() {\n                    // Upper leg\n                    translate([0, 0, 3])\n                        scale([0.3, 0.3, 1])\n                        cylinder(h=8, d=8);\n                    // Lower leg\n                    translate([0, 0, 2])\n                        rotate([30, 0, 0])\n                        cylinder(h=6, d=6);\n                    // Foot\n                    translate([0, 0, 0.5])\n                        scale([1.2, 1, 0.5])\n                        sphere(d=8);\n                }\n        }\n        \n        leg(10, 8, 30);\n        leg(10, -8, -30);\n        leg(-5, 7, 20);\n        leg(-5, -7, -20);\n        \n        // Eyes\n        color([0.9, 0.9, 0.1]) {\n            // Left eye\n            translate([22, 7, 22])\n                scale([0.3, 0.8, 1])\n                sphere(d=8);\n            // Right eye\n            translate([22, -7, 22])\n                scale([0.3, 0.8, 1])\n                sphere(d=8);\n        }\n        \n        // Eye pupils\n        color([0, 0, 0]) {\n            translate([24, 7, 22])\n                sphere(d=3);\n            translate([24, -7, 22])\n                sphere(d=3);\n        }\n        \n        // Nostrils\n        color([0.1, 0.1, 0.1]) {\n            translate([31, 2, 18])\n                sphere(d=1.5);\n            translate([31, -2, 18])\n                sphere(d=1.5);\n        }\n        \n        // Black stripes\n        color([0.05, 0.05, 0.05]) {\n            // Head stripe\n            translate([15, 0, 28])\n                scale([1.2, 0.2, 0.05])\n                cube([20, 15, 3], center=true);\n                \n            // Body stripes\n            for(i = [0:2]) {\n                translate([5 - i*10, 0, 18 - i*3])\n                    scale([1.2 - i*0.1, 0.2, 0.05])\n                    cube([25 - i*3, 18 - i*2, 3], center=true);\n            }\n        }\n        \n        // Teeth\n        color([0.95, 0.95, 0.9]) {\n            // Upper teeth\n            translate([29, 3, 15])\n                rotate([0, 0, -30])\n                cylinder(h=4, d1=3, d2=1);\n            translate([29, -3, 15])\n                rotate([0, 0, 30])\n                cylinder(h=4, d1=3, d2=1);\n                \n            // Lower teeth (visible below jaw)\n            translate([27, 3, 12])\n                rotate([0, 180, -30])\n                cylinder(h=3, d1=2.5, d2=1);\n            translate([27, -3, 12])\n                rotate([0, 180, 30])\n                cylinder(h=3, d1=2.5, d2=1);\n        }\n        \n        // Back ridges\n        color([0.15, 0.1, 0.08]) {\n            for(i = [0:4]) {\n                translate([-5 - i*7, 0, 18 - i*2])\n                    scale([0.5, 0.2, 1])\n                    cube([8, 6, 4], center=true);\n            }\n        }\n    }\n}\n\n// Render the model\nsandile();",
    "renders": true
  },
  {
    "pokemon": "krokorok",
    "openscad_code": "// Krokorok OpenSCAD model\n// Realistic style with medium complexity\n\n// Color definitions\nblack = [0.1,0.1,0.1];\nbrown = [0.5,0.35,0.2];\ntan = [0.8,0.7,0.5];\nred = [0.8,0.2,0.2];\npink = [0.9,0.6,0.6];\nwhite = [0.95,0.95,0.95];\n\n// Main body\nmodule body() {\n    color(brown)\n    union() {\n        // Main torso\n        translate([0,0,10])\n        scale([1.2,0.8,1])\n        sphere(12, $fn=32);\n        \n        // Belly\n        color(tan)\n        translate([0,0,8])\n        scale([1,0.6,0.8])\n        sphere(10, $fn=32);\n    }\n}\n\n// Head\nmodule head() {\n    color(brown)\n    union() {\n        // Main head shape\n        translate([0,18,15])\n        scale([1.1,1.3,0.9])\n        sphere(10, $fn=32);\n        \n        // Snout\n        translate([0,28,13])\n        scale([0.8,0.6,0.7])\n        sphere(8, $fn=32);\n        \n        // Black stripe on snout\n        color(black)\n        translate([0,30,15])\n        scale([0.9,0.2,0.3])\n        cube([12,2,4], center=true);\n        \n        // Nose\n        color(black)\n        translate([0,33,13])\n        sphere(2, $fn=16);\n        \n        // Eyes\n        for(x=[-6,6]) {\n            color(white)\n            translate([x,20,20])\n            sphere(3, $fn=16);\n            color(black)\n            translate([x+1,21,21])\n            sphere(1.5, $fn=16);\n        }\n        \n        // Mouth line\n        color(black)\n        translate([0,28,8])\n        rotate([0,0,180])\n        cylinder(h=1, r1=4, r2=6, $fn=16);\n    }\n}\n\n// Ears (triangular)\nmodule ears() {\n    for(x=[-8,8]) {\n        color(brown)\n        translate([x,12,22])\n        rotate([0,x*5,0])\n        rotate([x*10,0,0])\n        scale([0.8,0.1,1.2])\n        cube([6,1,8], center=true);\n        \n        // Black stripe on ear\n        color(black)\n        translate([x,12,27])\n        scale([0.8,0.1,0.3])\n        cube([5,1,2], center=true);\n    }\n}\n\n// Arms\nmodule arms() {\n    for(x=[-12,12]) {\n        color(brown)\n        translate([x,10,12])\n        rotate([0,0,x*10])\n        rotate([20,0,0])\n        scale([0.6,0.6,1.2])\n        cylinder(h=10, r1=4, r2=3, $fn=16);\n        \n        // Claws\n        color(black)\n        for(i=[-1,0,1]) {\n            translate([x+i*1.5,10,2])\n            rotate([0,0,i*30])\n            scale([0.5,0.5,1])\n            cylinder(h=3, r1=1, r2=0.5, $fn=8);\n        }\n    }\n}\n\n// Legs\nmodule legs() {\n    for(x=[-8,8]) {\n        color(brown)\n        translate([x,-8,0])\n        rotate([0,0,x*5])\n        rotate([20,0,0])\n        scale([0.8,0.8,1])\n        cylinder(h=12, r1=5, r2=4, $fn=16);\n        \n        // Feet\n        color(brown)\n        translate([x,-8,0])\n        scale([1.2,2,0.8])\n        sphere(4, $fn=16);\n        \n        // Toes\n        color(black)\n        for(i=[-1.5,0,1.5]) {\n            translate([x+i,-10,0])\n            rotate([0,0,i*20])\n            scale([0.8,1,0.8])\n            cylinder(h=2, r1=1.5, r2=1, $fn=8);\n        }\n    }\n}\n\n// Tail\nmodule tail() {\n    color(brown)\n    union() {\n        // Main tail\n        translate([0,-15,8])\n        rotate([20,0,0])\n        scale([1,1,3])\n        cylinder(h=15, r1=5, r2=2, $fn=16);\n        \n        // Tail stripes\n        for(z=[10,5]) {\n            color(black)\n            translate([0,-15-z,8+z*0.7])\n            scale([1,1,1])\n            cylinder(h=2, r1=5-0.2*z, r2=5-0.2*z, $fn=16);\n        }\n    }\n}\n\n// Back stripes\nmodule stripes() {\n    for(i=[0,1,2]) {\n        color(black)\n        translate([0,10-i*8,20-i*3])\n        rotate([0,0,0])\n        scale([1.3,0.3,0.3])\n        sphere(8, $fn=32);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    ears();\n    arms();\n    legs();\n    tail();\n    stripes();\n}\n\n// Base for printing\ncolor(black)\ntranslate([0,0,-2])\n    cylinder(h=2, r=25, $fn=64);",
    "renders": true
  },
  {
    "pokemon": "krookodile",
    "openscad_code": "module krookodile() {\n    // Color constants\n    color_body = [0.8, 0.6, 0.2];    // tan / sand\n    color_dark = [0.2, 0.2, 0.2];    // black stripes / accents\n    color_red  = [0.8, 0.2, 0.25];   // red eye mask\n    color_teeth = [0.9, 0.9, 0.85];\n    color_eye  = [1, 1, 1];\n\n    // Scale whole model to ~70 mm snout-to-tail\n    scale(0.8)\n    union() {\n\n        // Torso\n        color(color_body)\n        translate([0, 0, 8])\n        cube([20, 12, 16], center=true);\n\n        // Head\n        color(color_body)\n        translate([-18, 0, 10])\n        cube([16, 14, 12], center=true);\n\n        // Snout\n        color(color_body)\n        translate([-30, 0, 9])\n        cube([10, 8, 6], center=true);\n\n        // Eyes with red mask\n        for (y = [-5, 5]) {\n            color(color_red)\n            translate([-22, y, 14])\n            cube([5, 3, 2]);\n\n            color(color_eye)\n            translate([-22.5, y, 14.5])\n            sphere(1);\n        }\n\n        // Teeth along snout top\n        for (i = [-2:1:2]) {\n            color(color_teeth)\n            translate([-33 + i*2, 4.5 + abs(i), 12])\n            cube([1.2, 1.2, 4], center=true);\n        }\n\n        // Lower jaw\n        color(color_body)\n        translate([-25, 0, 2])\n        cube([14, 8, 4], center=true);\n\n        // Legs\n        for (x = [-12, 0, 12]) {\n            color(color_body)\n            translate([x, 0, 0])\n            cylinder(h=8, d=5, $fn=12);\n        }\n\n        // Hind legs\n        for (x = [-7, 7]) {\n            color(color_body)\n            translate([x, 0, 0])\n            cylinder(h=10, d=6, $fn=12);\n        }\n\n        // Tail\n        color(color_body)\n        translate([18, 0, 8])\n        rotate([0, 0, -20])\n        cube([16, 6, 6], center=true);\n\n        // Tail stripes\n        for (i = [0:1:2]) {\n            color(color_dark)\n            translate([20 + 4*i, 0, 8])\n            cube([2.5, 6.5, 7], center=true);\n        }\n\n        // Back stripes\n        for (i = [-1:1:1]) {\n            color(color_dark)\n            translate([i*6, 0, 16])\n            cube([4, 13, 2], center=true);\n        }\n\n        // Ear-like ridges\n        for (x = [-22, -14]) {\n            color(color_dark)\n            translate([x, 0, 19])\n            cube([4, 3, 6], center=true);\n        }\n\n        // Body side markings\n        for (y = [-6, 6]) {\n            color(color_dark)\n            translate([0, y, 8])\n            cube([20, 2, 10], center=true);\n        }\n    }\n}\n\n// Render the Pokemon\nkrookodile();",
    "renders": true
  },
  {
    "pokemon": "darumaka",
    "openscad_code": "// Darumaka Pokemon - Realistic Style\n// Medium complexity 3D printable model\n\nmodule darumaka() {\n    // Main body - orange rounded shape\n    color(\"orange\") {\n        // Main body sphere\n        sphere(d=50, $fn=50);\n        \n        // Slightly flattened bottom for stability\n        translate([0, 0, -2])\n            cylinder(d=45, h=4, $fn=50);\n    }\n    \n    // Face details\n    color(\"beige\") {\n        // Face patch\n        translate([0, 0, 20])\n            scale([0.7, 0.6, 0.3])\n                sphere(d=40, $fn=30);\n    }\n    \n    // Eyes\n    for(x = [-12, 12]) {\n        color(\"black\") {\n            // Eye outline\n            translate([x, 5, 22])\n                sphere(d=8, $fn=20);\n                \n            // Eye highlight\n            color(\"white\") {\n                translate([x+2, 7, 25])\n                    sphere(d=3, $fn=10);\n            }\n        }\n    }\n    \n    // Eyebrows\n    for(x = [-15, 15]) {\n        color(\"darkorange\") {\n            translate([x, 12, 25])\n                rotate([0, 0, x > 0 ? -15 : 15])\n                    scale([0.8, 0.3, 0.3])\n                        cylinder(d=12, h=2, $fn=8);\n        }\n    }\n    \n    // Nose\n    color(\"darkorange\") {\n        translate([0, -2, 18])\n            sphere(d=4, $fn=10);\n    }\n    \n    // Mouth\n    color(\"black\") {\n        translate([0, -12, 15])\n            rotate([90, 0, 0])\n                cylinder(d1=8, d2=12, h=3, $fn=20);\n    }\n    \n    // Ears\n    module ear(side) {\n        translate([side * 20, 0, 15])\n            rotate([0, 0, side * 15])\n                color(\"orange\") {\n                    // Main ear shape\n                    scale([0.6, 1, 1.2])\n                        sphere(d=20, $fn=20);\n                        \n                    // Inner ear\n                    color(\"beige\") {\n                        translate([0, -2, 2])\n                            scale([0.4, 0.7, 0.8])\n                                sphere(d=15, $fn=15);\n                    }\n                }\n    }\n    \n    ear(1);\n    ear(-1);\n    \n    // Arms\n    module arm(side) {\n        translate([side * 20, -5, -5])\n            rotate([0, 0, side * -20])\n                color(\"orange\") {\n                    // Upper arm\n                    cylinder(d1=10, d2=8, h=15, $fn=15);\n                    \n                    // Hand\n                    translate([0, -8, 8])\n                        sphere(d=12, $fn=15);\n                        \n                    // Fingers\n                    for(i = [0:1:2]) {\n                        rotate([0, 0, (i-1) * 30])\n                            translate([0, -12, 5])\n                                cylinder(d=4, h=6, $fn=8);\n                    }\n                }\n    }\n    \n    arm(1);\n    arm(-1);\n    \n    // Feet\n    module foot(side) {\n        translate([side * 12, -15, -25])\n            color(\"orange\") {\n                // Main foot\n                scale([1.2, 1.5, 0.8])\n                    sphere(d=15, $fn=15);\n                    \n                // Toes\n                for(i = [0:1:2]) {\n                    translate([i * 4 - 4, -8, -2])\n                        sphere(d=5, $fn=8);\n                }\n            }\n    }\n    \n    foot(1);\n    foot(-1);\n    \n    // Belly swirl pattern\n    color(\"yellow\") {\n        translate([0, -10, 0])\n            rotate([90, 0, 0])\n                linear_extrude(height=1, center=true)\n                    circle(d=15, $fn=3);\n    }\n    \n    // Back stripe pattern\n    color(\"darkorange\") {\n        // Three vertical stripes\n        for(i = [-1, 0, 1]) {\n            translate([i * 6, 0, 0])\n                cube([2, 3, 40], center=true);\n        }\n    }\n}\n\n// Center the model on the build plate\ntranslate([0, 0, 25])\n    darumaka();",
    "renders": true
  },
  {
    "pokemon": "darmanitan",
    "openscad_code": "// Darmanitan OpenSCAD Model (Realistic Style, Medium Complexity)\n// Approximate size: 70mm tall\n\ncolor([0.8, 0.3, 0.1])  // Orange-brown body color\n\nmodule body() {\n    // Main torso\n    translate([0, 0, 15]) {\n        scale([1.2, 0.9, 1.1]) sphere(15);\n    }\n    \n    // Chest stripe\n    color([0.9, 0.9, 0.9]) {\n        translate([0, 0, 20]) {\n            rotate([90, 0, 0]) cylinder(h=0.5, r=10, $fn=32);\n        }\n    }\n}\n\nmodule head() {\n    translate([0, 0, 35]) {\n        // Main head\n        scale([1, 1.1, 1]) sphere(12);\n        \n        // Eyebrow ridges\n        translate([-8, 8, 5]) rotate([0, 30, 0]) scale([1, 0.5, 0.5]) sphere(5);\n        translate([8, 8, 5]) rotate([0, -30, 0]) scale([1, 0.5, 0.5]) sphere(5);\n        \n        // Eyes\n        color([0.1, 0.1, 0.1]) {\n            translate([-5, 8, 2]) sphere(2.5);\n            translate([5, 8, 2]) sphere(2.5);\n        }\n        \n        // Nose\n        translate([0, 5, -2]) scale([1, 0.8, 0.5]) sphere(2);\n        \n        // Mouth\n        color([0.6, 0.2, 0.2]) {\n            translate([0, 2, -6]) cube([8, 2, 1], center=true);\n        }\n    }\n}\n\nmodule arms() {\n    // Left arm\n    translate([-18, 0, 20]) {\n        rotate([0, 0, 45]) {\n            // Upper arm\n            rotate([90, 0, 0]) cylinder(h=12, r=4, $fn=16);\n            \n            // Fist\n            translate([0, 0, 14]) sphere(6);\n        }\n    }\n    \n    // Right arm\n    translate([18, 0, 20]) {\n        rotate([0, 0, -45]) {\n            // Upper arm\n            rotate([90, 0, 0]) cylinder(h=12, r=4, $fn=16);\n            \n            // Fist\n            translate([0, 0, 14]) sphere(6);\n        }\n    }\n}\n\nmodule legs() {\n    // Left leg\n    translate([-7, 0, 0]) {\n        // Thigh\n        cylinder(h=10, r=5, $fn=16);\n        // Foot\n        translate([0, 0, -5]) scale([1.2, 1, 0.5]) sphere(5);\n    }\n    \n    // Right leg\n    translate([7, 0, 0]) {\n        // Thigh\n        cylinder(h=10, r=5, $fn=16);\n        // Foot\n        translate([0, 0, -5]) scale([1.2, 1, 0.5]) sphere(5);\n    }\n}\n\nmodule flame_eyebrows() {\n    color([1, 0.2, 0]) {\n        // Left flame eyebrow\n        translate([-10, 12, 8]) {\n            for(i=[0:4]) {\n                rotate([0, 0, i*15-30]) \n                    translate([0, 0, 0]) \n                    scale([0.3, 1.5, 0.3]) \n                    rotate([90, 0, 0]) \n                    cylinder(h=3, r=1, $fn=8);\n            }\n        }\n        \n        // Right flame eyebrow\n        translate([10, 12, 8]) {\n            for(i=[0:4]) {\n                rotate([0, 0, i*15-30]) \n                    translate([0, 0, 0]) \n                    scale([0.3, 1.5, 0.3]) \n                    rotate([90, 0, 0]) \n                    cylinder(h=3, r=1, $fn=8);\n            }\n        }\n    }\n}\n\nmodule ears() {\n    color([0.8, 0.3, 0.1]) {\n        // Left ear\n        translate([-12, 0, 42]) {\n            rotate([0, 0, -30]) {\n                scale([0.7, 0.3, 1.5]) sphere(4);\n            }\n        }\n        \n        // Right ear\n        translate([12, 0, 42]) {\n            rotate([0, 0, 30]) {\n                scale([0.7, 0.3, 1.5]) sphere(4);\n            }\n        }\n    }\n}\n\n// Scale entire model to 70mm height\nscale([0.7, 0.7, 0.7]) {\n    union() {\n        body();\n        head();\n        arms();\n        legs();\n        flame_eyebrows();\n        ears();\n    }\n}",
    "renders": true
  },
  {
    "pokemon": "maractus",
    "openscad_code": "// Maractus OpenSCAD model - medium complexity\n// Realistic style, 3D printable\n\n// Colors\n$fa = 1;\n$fs = 0.4;\n\nmodule maractus() {\n    // Main body - green cactus base\n    color([0.2, 0.6, 0.2])\n    union() {\n        // Cylindrical body\n        cylinder(h = 40, r1 = 15, r2 = 12, $fn = 32);\n        translate([0, 0, 40])\n        sphere(12);\n    }\n    \n    // Flower on head\n    color([0.9, 0.3, 0.6])\n    translate([0, 0, 52])\n    rotate([0, 0, 45])\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90])\n        translate([0, 8, 0])\n        scale([1, 1.5, 0.3])\n        sphere(8, $fn = 16);\n    }\n    \n    // Yellow flower center\n    color([1, 0.9, 0.2])\n    translate([0, 0, 55])\n    sphere(5, $fn = 32);\n    \n    // Arms - left and right\n    for(side = [-1, 1]) {\n        color([0.2, 0.6, 0.2])\n        translate([side * 15, 0, 25])\n        rotate([0, side * 30, 0])\n        union() {\n            // Upper arm\n            cylinder(h = 20, r = 6, $fn = 16);\n            translate([0, 0, 20])\n            rotate([0, 90, 0])\n            // Lower arm\n            cylinder(h = 15, r = 5, $fn = 16);\n            // Hand\n            translate([0, 0, 15])\n            sphere(6, $fn = 16);\n        }\n    }\n    \n    // Feet\n    for(side = [-1, 1]) {\n        color([0.2, 0.6, 0.2])\n        translate([side * 8, 0, 0])\n        union() {\n            // Leg\n            cylinder(h = 10, r = 6, $fn = 16);\n            // Foot\n            translate([0, 0, -5])\n            scale([1.5, 2, 0.8])\n            sphere(6, $fn = 16);\n        }\n    }\n    \n    // Face\n    // Eyes\n    for(side = [-1, 1]) {\n        color([0.1, 0.1, 0.1])\n        translate([side * 6, 10, 35])\n        scale([1, 1.2, 0.5])\n        sphere(3, $fn = 16);\n        // Eye highlight\n        color([1, 1, 1])\n        translate([side * 5.5, 10.5, 36])\n        sphere(1, $fn = 8);\n    }\n    \n    // Mouth\n    color([0.1, 0.1, 0.1])\n    translate([0, 12, 28])\n    rotate([90, 0, 0])\n    scale([1, 0.5, 1])\n    cylinder(h = 1, r = 4, $fn = 16);\n    \n    // Spiky details on body\n    color([0.15, 0.5, 0.15])\n    for(i = [0:7]) {\n        rotate([0, 0, i * 45])\n        translate([12, 0, 15 + (i % 2) * 10])\n        rotate([0, 90, 0])\n        cylinder(h = 8, r1 = 2, r2 = 0, $fn = 8);\n    }\n    \n    // Ears\n    color([0.2, 0.6, 0.2])\n    for(side = [-1, 1]) {\n        translate([side * 10, 0, 48])\n        rotate([0, side * 30, 0])\n        cylinder(h = 12, r1 = 4, r2 = 2, $fn = 8);\n    }\n}\n\n// Base for stability\ncolor([0.4, 0.3, 0.2])\ntranslate([0, 0, -5])\ncylinder(h = 2, r = 20, $fn = 32);\n\nmaractus();",
    "renders": true
  },
  {
    "pokemon": "dwebble",
    "openscad_code": "// Dwebble - OpenSCAD 3D Printable Model\n// Realistic style, medium complexity\n\n// Parameters\n$fn = 32;\nscale_factor = 0.8;\nbody_size = 50 * scale_factor;\nshell_radius = body_size * 0.7;\nleg_length = body_size * 0.4;\nleg_radius = body_size * 0.08;\neye_size = body_size * 0.15;\n\n// Colors\ncolor_body = [0.8, 0.5, 0.3];\ncolor_shell = [0.6, 0.4, 0.2];\ncolor_eye = [0.9, 0.9, 0.1];\ncolor_pupil = [0, 0, 0];\ncolor_highlight = [1, 1, 1];\n\nmodule dwebble() {\n    union() {\n        // Shell (rocky outer covering)\n        color(color_shell)\n        translate([0, 0, shell_radius * 0.3])\n        scale([1.2, 1, 0.8])\n        sphere(r = shell_radius);\n        \n        // Shell texture layers\n        for(i = [1:3]) {\n            color(color_shell)\n            translate([0, 0, shell_radius * 0.3 + i * 2])\n            scale([1.2 - i * 0.1, 1 - i * 0.05, 0.8 - i * 0.05])\n            sphere(r = shell_radius - i * 3);\n        }\n        \n        // Main body\n        color(color_body)\n        translate([0, 0, leg_length + body_size * 0.3])\n        scale([1, 0.8, 0.6])\n        sphere(r = body_size * 0.35);\n        \n        // Head\n        color(color_body)\n        translate([0, -body_size * 0.2, leg_length + body_size * 0.6])\n        scale([0.8, 0.7, 0.7])\n        sphere(r = body_size * 0.25);\n        \n        // Eyes\n        for(side = [-1, 1]) {\n            color(color_eye)\n            translate([side * body_size * 0.15, -body_size * 0.35, leg_length + body_size * 0.7])\n            sphere(r = eye_size);\n            \n            color(color_pupil)\n            translate([side * body_size * 0.15, -body_size * 0.4, leg_length + body_size * 0.75])\n            sphere(r = eye_size * 0.5);\n            \n            color(color_highlight)\n            translate([side * body_size * 0.13, -body_size * 0.42, leg_length + body_size * 0.78])\n            sphere(r = eye_size * 0.2);\n        }\n        \n        // Mouth (small curved opening)\n        color([0.2, 0.1, 0.1])\n        translate([0, -body_size * 0.45, leg_length + body_size * 0.55])\n        rotate([0, 0, 180])\n        cylinder(h = 0.5, r1 = body_size * 0.1, r2 = body_size * 0.05);\n        \n        // Legs (four legs)\n        for(angle = [45, 135, 225, 315]) {\n            rotate([0, 0, angle])\n            translate([body_size * 0.3, 0, 0])\n            leg();\n        }\n        \n        // Claws (front two legs have larger claws)\n        for(side = [-1, 1]) {\n            color(color_body)\n            translate([side * body_size * 0.4, -body_size * 0.3, leg_length * 0.7])\n            rotate([0, 0, side * 30])\n            claw();\n        }\n    }\n}\n\nmodule leg() {\n    color(color_body)\n    union() {\n        // Upper leg segment\n        translate([body_size * 0.1, 0, leg_length * 0.8])\n        rotate([90, 0, 0])\n        cylinder(h = leg_length * 0.6, r = leg_radius);\n        \n        // Lower leg segment\n        translate([body_size * 0.15, 0, leg_length * 0.4])\n        rotate([90, 0, 0])\n        cylinder(h = leg_length * 0.5, r = leg_radius * 0.8);\n        \n        // Foot\n        translate([body_size * 0.2, 0, leg_length * 0.1])\n        sphere(r = leg_radius * 1.2);\n    }\n}\n\nmodule claw() {\n    // Three-pronged claw\n    for(i = [0:2]) {\n        rotate([0, 0, i * 120])\n        translate([body_size * 0.05, 0, 0])\n        scale([1, 0.3, 0.3])\n        rotate([0, 90, 0])\n        cylinder(h = body_size * 0.12, r1 = body_size * 0.03, r2 = body_size * 0.01);\n    }\n}\n\n// Main model\ndwebble();",
    "renders": true
  },
  {
    "pokemon": "crustle",
    "openscad_code": "// Crustle - Rock/Bug type Pokemon\n// Realistic style, medium complexity\n\n// Color definitions\nrock_color = [0.6, 0.5, 0.4];\nshell_color = [0.3, 0.25, 0.2];\nbody_color = [0.9, 0.7, 0.5];\neye_color = [0.2, 0.2, 0.8];\nclaw_color = [0.7, 0.6, 0.5];\n\n// Main module\nmodule crustle() {\n    // Position the whole model\n    translate([0, 0, 0]) {\n        // Body with shell\n        union() {\n            // Large rock shell\n            color(shell_color) {\n                translate([0, 0, 15]) rotate([0, 0, 45]) {\n                    difference() {\n                        // Main shell body\n                        scale([1.2, 1, 0.8]) sphere(d=50);\n                        \n                        // Shell cavity\n                        translate([0, 0, 20]) scale([0.9, 0.9, 0.6]) sphere(d=45);\n                        \n                        // Shell opening\n                        translate([0, 0, -5]) cube([30, 30, 50], center=true);\n                    }\n                    \n                    // Shell segments\n                    for(i = [0:5]) {\n                        rotate([0, 0, i * 60]) {\n                            translate([0, 25, 5]) cube([5, 10, 15], center=true);\n                        }\n                    }\n                }\n            }\n            \n            // Body underneath shell\n            color(body_color) {\n                // Main body\n                translate([0, 0, 5]) scale([0.8, 1, 0.6]) sphere(d=30);\n                \n                // Head\n                translate([0, -25, 15]) rotate([30, 0, 0]) {\n                    sphere(d=15);\n                    \n                    // Eyes\n                    color(eye_color) {\n                        translate([-5, -7, 4]) sphere(d=3);\n                        translate([5, -7, 4]) sphere(d=3);\n                    }\n                    \n                    // Mandibles\n                    color(body_color) {\n                        translate([-8, -10, -2]) rotate([0, 30, 0]) cylinder(h=8, r1=3, r2=1);\n                        translate([8, -10, -2]) rotate([0, -30, 0]) cylinder(h=8, r1=3, r2=1);\n                    }\n                }\n                \n                // Legs\n                for(side = [-1, 1]) {\n                    // Front legs\n                    translate([side * 15, -10, 0]) {\n                        rotate([0, 0, side * 30]) {\n                            color(claw_color) {\n                                cylinder(h=12, r=3);\n                                translate([0, 0, -12]) {\n                                    rotate([0, 0, side * 45]) {\n                                        scale([1, 0.5, 0.5]) sphere(d=8);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    \n                    // Middle legs\n                    translate([side * 20, 0, 0]) {\n                        rotate([0, 0, side * 20]) {\n                            color(body_color) {\n                                cylinder(h=10, r=2.5);\n                                translate([0, 0, -10]) {\n                                    rotate([0, 0, side * 30]) {\n                                        scale([0.8, 0.4, 0.4]) sphere(d=6);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    \n                    // Back legs\n                    translate([side * 15, 15, 0]) {\n                        rotate([0, 0, side * 15]) {\n                            color(body_color) {\n                                cylinder(h=8, r=2);\n                                translate([0, 0, -8]) {\n                                    rotate([0, 0, side * 20]) {\n                                        scale([0.6, 0.3, 0.3]) sphere(d=5);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                \n                // Tail spike\n                color(rock_color) {\n                    translate([0, 20, 10]) rotate([0, 0, 0]) {\n                        cylinder(h=15, r1=5, r2=2);\n                    }\n                }\n            }\n            \n            // Small rock details on shell\n            color(rock_color) {\n                for(i = [1:8]) {\n                    angle = i * 45;\n                    radius = 20;\n                    translate([cos(angle) * radius, sin(angle) * radius, 25]) {\n                        sphere(d=5 + (i % 3) * 2);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Render the model\ncrustle();",
    "renders": true
  },
  {
    "pokemon": "scraggy",
    "openscad_code": "// Scraggy Pokemon - Medium complexity realistic style\n// Overall dimensions: ~80mm height\n\n$fn = 32;\nwall_thickness = 2;\n\n// Color definitions\ncolor_orange = [255/255, 140/255, 0/255];\ncolor_yellow = [255/255, 255/255, 0/255];\ncolor_black = [0, 0, 0];\ncolor_white = [1, 1, 1];\n\nmodule scraggy() {\n    // Main body\n    color(color_orange)\n    union() {\n        // Head\n        translate([0, 0, 45]) {\n            difference() {\n                // Main head shape\n                scale([1.2, 1.1, 1.3])\n                    sphere(r = 15);\n                \n                // Mouth cavity\n                translate([0, -15, -5])\n                    rotate([90, 0, 0])\n                        cylinder(h = 20, r1 = 8, r2 = 6);\n            }\n            \n            // Snout\n            translate([0, 14, -8])\n                scale([0.8, 1.2, 0.8])\n                    sphere(r = 12);\n        }\n        \n        // Body\n        translate([0, 0, 20]) {\n            difference() {\n                scale([1.3, 1.1, 1.8])\n                    sphere(r = 15);\n                \n                // Neck hole\n                translate([0, 0, 25])\n                    cylinder(h = 20, r = 8);\n            }\n        }\n        \n        // Legs\n        for(side = [-1, 1]) {\n            translate([side * 12, 0, 0]) {\n                // Upper leg\n                rotate([0, side * 10, 0])\n                    translate([side * 5, 0, 12])\n                        cylinder(h = 15, r1 = 6, r2 = 5);\n                \n                // Lower leg\n                translate([side * 18, 0, 2])\n                    rotate([0, side * 15, 0])\n                        cylinder(h = 12, r1 = 5, r2 = 4);\n                \n                // Foot\n                translate([side * 22, 0, -3])\n                    scale([1.5, 1, 0.8])\n                        sphere(r = 5);\n            }\n        }\n        \n        // Arms\n        for(side = [-1, 1]) {\n            translate([side * 15, 10, 25]) {\n                rotate([0, 0, side * -30])\n                    cylinder(h = 20, r1 = 4, r2 = 3);\n                \n                // Hand\n                translate([side * 8, 8, -5])\n                    rotate([0, 0, side * 45])\n                        sphere(r = 5);\n            }\n        }\n        \n        // Tail\n        translate([0, -15, 15]) {\n            rotate([30, 0, 0])\n                cylinder(h = 25, r1 = 8, r2 = 4);\n            \n            // Tail tip\n            translate([0, -20, 25])\n                sphere(r = 6);\n        }\n    }\n    \n    // Scales (yellow)\n    color(color_yellow) {\n        // Head scales\n        for(i = [0:2]) {\n            rotate([0, 0, i * 120])\n                translate([0, 12, 52])\n                    scale([0.6, 0.3, 0.1])\n                        sphere(r = 10);\n        }\n        \n        // Body scales\n        for(i = [0:4]) {\n            rotate([0, 0, i * 72])\n                translate([0, 0, 35])\n                    scale([0.8, 0.4, 0.1])\n                        sphere(r = 12);\n        }\n    }\n    \n    // Eyes\n    color(color_white) {\n        for(side = [-1, 1]) {\n            translate([side * 8, 10, 48]) {\n                sphere(r = 4);\n                \n                // Pupil\n                color(color_black)\n                    translate([0, 0, 3.5])\n                        sphere(r = 2);\n            }\n        }\n    }\n    \n    // Eyebrows\n    color(color_black) {\n        for(side = [-1, 1]) {\n            translate([side * 8, 15, 52])\n                rotate([0, 30, side * 20])\n                    scale([0.2, 1.5, 0.2])\n                        cylinder(h = 8, r = 3);\n        }\n    }\n    \n    // Teeth\n    color(color_white) {\n        for(i = [0:3]) {\n            translate([i * 3 - 4.5, 15, 42])\n                rotate([90, 0, 0])\n                    cylinder(h = 3, r1 = 1, r2 = 0.5);\n        }\n    }\n    \n    // Skin folds\n    color(color_orange) {\n        // Neck fold\n        translate([0, 0, 30])\n            rotate_extrude(angle = 360, $fn = 32)\n                translate([15, 0, 0])\n                    circle(r = 3);\n        \n        // Leg folds\n        for(side = [-1, 1]) {\n            translate([side * 15, 0, 8])\n                rotate([0, 90, 0])\n                    cylinder(h = 8, r = 2);\n        }\n    }\n}\n\n// Base for stability\ncolor(color_black)\ntranslate([0, 0, -6])\n    cylinder(h = 3, r = 30);\n\nscraggy();",
    "renders": true
  },
  {
    "pokemon": "scrafty",
    "openscad_code": "// Scrafty Pokemon - Realistic Style - Medium Complexity\n\n// Color definitions\n$skin_color = [173, 158, 104]; // Sandy skin color\n$hood_color = [36, 36, 36];    // Dark gray hood\n$red_color = [255, 0, 0];      // Red crest color\n$yellow_color = [255, 255, 0]; // Yellow accents\n$eye_color = [255, 255, 255];  // White eyes\n\n// Main body\nmodule scrafty_body() {\n    union() {\n        // Torso\n        color($skin_color)\n        translate([0, 0, 15])\n        scale([1.2, 1, 1.5])\n        sphere(12);\n        \n        // Legs\n        for(x = [-6, 6]) {\n            color($skin_color)\n            translate([x, 0, 0])\n            cylinder(h=15, r1=5, r2=3);\n        }\n        \n        // Feet\n        for(x = [-6, 6]) {\n            color($skin_color)\n            translate([x, 0, 0])\n            rotate([90, 0, 0])\n            scale([1.5, 1, 0.5])\n            cylinder(h=8, r=4);\n        }\n    }\n}\n\n// Hood and crest\nmodule scrafty_hood() {\n    union() {\n        // Main hood\n        color($hood_color)\n        translate([0, 0, 35])\n        scale([1.3, 1.2, 1.8])\n        sphere(12);\n        \n        // Red crest\n        color($red_color)\n        translate([0, -8, 42])\n        rotate([90, 0, 0])\n        scale([1.2, 0.3, 1])\n        cylinder(h=15, r=8);\n        \n        // Hood edges\n        color($hood_color)\n        translate([0, -6, 25])\n        rotate([90, 0, 0])\n        scale([1.8, 1.6, 0.5])\n        cylinder(h=8, r=10);\n    }\n}\n\n// Head and face\nmodule scrafty_head() {\n    union() {\n        // Head\n        color($skin_color)\n        translate([0, -10, 35])\n        scale([1, 1.1, 1])\n        sphere(10);\n        \n        // Eyes\n        for(x = [-4, 4]) {\n            color($eye_color)\n            translate([x, -18, 36])\n            sphere(2);\n            \n            color([0, 0, 0])\n            translate([x, -19.5, 36])\n            sphere(1);\n        }\n        \n        // Mouth\n        color([80, 0, 0])\n        translate([0, -20, 32])\n        rotate([90, 0, 0])\n        cylinder(h=0.5, r1=4, r2=3);\n        \n        // Teeth\n        for(x = [-2, 0, 2]) {\n            color($eye_color)\n            translate([x, -20, 31])\n            cube([1, 0.5, 1.5], center=true);\n        }\n    }\n}\n\n// Arms\nmodule scrafty_arms() {\n    for(side = [-1, 1]) {\n        union() {\n            // Upper arm\n            color($skin_color)\n            translate([side * 10, -5, 25])\n            rotate([0, 0, side * 20])\n            cylinder(h=12, r=3);\n            \n            // Lower arm\n            color($skin_color)\n            translate([side * 15, -8, 15])\n            rotate([0, 0, side * 45])\n            cylinder(h=10, r=2.5);\n            \n            // Hands\n            color($skin_color)\n            translate([side * 18, -10, 12])\n            sphere(4);\n            \n            // Claws\n            for(i = [-2, 0, 2]) {\n                color($hood_color)\n                translate([side * 18, -10, 10])\n                translate([i, 0, 0])\n                rotate([90, 0, 0])\n                scale([0.5, 0.5, 1])\n                cylinder(h=3, r=1);\n            }\n        }\n    }\n}\n\n// Tail\nmodule scrafty_tail() {\n    color($hood_color)\n    translate([0, 12, 20])\n    rotate([0, 0, 20])\n    cylinder(h=25, r1=4, r2=2);\n    \n    color($hood_color)\n    translate([0, 25, 15])\n    rotate([0, 0, 30])\n    cylinder(h=20, r1=2, r2=1);\n    \n    color($red_color)\n    translate([0, 30, 10])\n    sphere(3);\n}\n\n// Yellow scale pattern on belly\nmodule belly_pattern() {\n    for(y = [0:5:15]) {\n        color($yellow_color)\n        translate([0, -5, 15 + y])\n        scale([0.8, 0.6, 0.3])\n        sphere(5);\n    }\n}\n\n// Assembly\nmodule scrafty() {\n    scrafty_body();\n    scrafty_hood();\n    scrafty_head();\n    scrafty_arms();\n    scrafty_tail();\n    belly_pattern();\n}\n\n// Scale to 80mm height\nscale(0.8)\nscrafty();",
    "renders": true
  },
  {
    "pokemon": "sigilyph",
    "openscad_code": "// Sigilyph Pokemon - Realistic Style - Medium Complexity\n// Designed for 3D printing with proper wall thickness and no overhangs\n\n$fn = 50;\n\n// Main colors\ncolor_body = [0.9, 0.9, 0.95];\ncolor_wing = [0.1, 0.1, 0.5];\ncolor_eye = [1, 0.2, 0.1];\ncolor_marking = [0.2, 0.2, 0.8];\ncolor_eye_white = [1, 1, 1];\n\n// Scale factor for printing\nscale_factor = 0.4;\n\nmodule sigilyph() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        // Main body - central sphere\n        color(color_body)\n        translate([0, 0, 30])\n        sphere(r=25);\n\n        // Head crest - top disk\n        color(color_body)\n        translate([0, 0, 58])\n        cylinder(h=8, r1=20, r2=15);\n\n        // Eye rings\n        color(color_marking)\n        translate([-15, 20, 30])\n        rotate([0, 90, 0])\n        cylinder(h=3, r1=12, r2=12);\n\n        color(color_marking)\n        translate([15, 20, 30])\n        rotate([0, 90, 0])\n        cylinder(h=3, r1=12, r2=12);\n\n        // Eyes\n        color(color_eye_white)\n        translate([-15, 23, 30])\n        rotate([0, 90, 0])\n        sphere(r=8);\n\n        color(color_eye_white)\n        translate([15, 23, 30])\n        rotate([0, 90, 0])\n        sphere(r=8);\n\n        // Pupils\n        color(color_eye)\n        translate([-15, 26, 30])\n        rotate([0, 90, 0])\n        sphere(r=4);\n\n        color(color_eye)\n        translate([15, 26, 30])\n        rotate([0, 90, 0])\n        sphere(r=4);\n\n        // Wings - left side\n        color(color_wing)\n        translate([-35, 0, 35])\n        rotate([0, 0, 30])\n        linear_extrude(height=3)\n        polygon(points=[[0, 0], [-30, 20], [-25, 40], [-10, 45], [0, 40], [5, 35]]);\n\n        color(color_wing)\n        translate([-45, 0, 20])\n        rotate([0, 0, 45])\n        linear_extrude(height=3)\n        polygon(points=[[0, 0], [-20, 15], [-15, 30], [-5, 35], [0, 30], [3, 25]]);\n\n        // Wings - right side\n        color(color_wing)\n        translate([35, 0, 35])\n        mirror([1, 0, 0])\n        rotate([0, 0, 30])\n        linear_extrude(height=3)\n        polygon(points=[[0, 0], [-30, 20], [-25, 40], [-10, 45], [0, 40], [5, 35]]);\n\n        color(color_wing)\n        translate([45, 0, 20])\n        mirror([1, 0, 0])\n        rotate([0, 0, 45])\n        linear_extrude(height=3)\n        polygon(points=[[0, 0], [-20, 15], [-15, 30], [-5, 35], [0, 30], [3, 25]]);\n\n        // Lower body markings\n        color(color_marking)\n        translate([0, 0, 15])\n        cylinder(h=2, r1=28, r2=28);\n\n        color(color_marking)\n        translate([0, 0, 10])\n        cylinder(h=2, r1=30, r2=30);\n\n        // Tail feathers - back\n        for(i = [0:2]) {\n            color(color_wing)\n            translate([-10 + i*10, -25, 25])\n            rotate([30, 0, 0])\n            cylinder(h=20, r1=2, r2=5);\n        }\n\n        // Feet\n        color(color_body)\n        translate([-10, 0, 5])\n        cylinder(h=8, r1=3, r2=5);\n\n        color(color_body)\n        translate([10, 0, 5])\n        cylinder(h=8, r1=3, r2=5);\n\n        // Decorative patterns on wings\n        for(pos = [[-30, 25], [-40, 15], [30, 25], [40, 15]]) {\n            color(color_marking)\n            translate([pos[0], pos[1], 37])\n            sphere(r=3);\n        }\n    }\n}\n\n// Generate the model\nsigilyph();",
    "renders": true
  },
  {
    "pokemon": "yamask",
    "openscad_code": "// Yamask - Medium complexity realistic style\n// 3D printable, ~75mm height\n\n$fn = 32;\nwall_thickness = 2;\n\nmodule yamask_body() {\n    color(\"#4A4A4A\")\n    difference() {\n        // Main mask body\n        translate([0, 0, 35])\n        scale([1, 1.2, 1.3])\n        sphere(d = 50);\n        \n        // Eye holes\n        translate([-12, 5, 45])\n        rotate([0, 10, 0])\n        cylinder(h = 30, d = 8, $fn = 16);\n        \n        translate([12, 5, 45])\n        rotate([0, -10, 0])\n        cylinder(h = 30, d = 8, $fn = 16);\n        \n        // Mouth hole\n        translate([0, -15, 40])\n        rotate([0, 20, 0])\n        scale([1.2, 0.6, 1])\n        cylinder(h = 25, d = 10, $fn = 16);\n    }\n}\n\nmodule mask_details() {\n    // Eyebrow ridges\n    color(\"#2A2A2A\")\n    translate([-20, 15, 50])\n    rotate([30, 0, -20])\n    scale([0.3, 0.1, 0.15])\n    sphere(d = 50);\n    \n    translate([20, 15, 50])\n    rotate([30, 0, 20])\n    scale([0.3, 0.1, 0.15])\n    sphere(d = 50);\n    \n    // Tear marks\n    color(\"#1A1A1A\")\n    translate([-15, -5, 45])\n    rotate([0, 10, -15])\n    scale([0.2, 0.6, 0.1])\n    sphere(d = 20);\n    \n    translate([15, -5, 45])\n    rotate([0, -10, 15])\n    scale([0.2, 0.6, 0.1])\n    sphere(d = 20);\n}\n\nmodule ghost_tail() {\n    color(\"#7048B7\")\n    union() {\n        // Main body\n        translate([0, 0, 15])\n        scale([1, 0.8, 1.5])\n        sphere(d = 35);\n        \n        // Tail segments\n        for (i = [1:3]) {\n            translate([0, 0, 15 - i * 12])\n            scale([1 - i * 0.15, 1 - i * 0.2, 1])\n            sphere(d = 30 - i * 5);\n        }\n        \n        // Wispy ends\n        translate([-10, -5, -15])\n        rotate([0, 10, -20])\n        scale([0.3, 0.2, 1])\n        cylinder(h = 20, d1 = 15, d2 = 5);\n        \n        translate([10, -5, -15])\n        rotate([0, 10, 20])\n        scale([0.3, 0.2, 1])\n        cylinder(h = 20, d1 = 15, d2 = 5);\n    }\n}\n\nmodule arms() {\n    color(\"#7048B7\")\n    union() {\n        // Left arm\n        translate([-20, 15, 25])\n        rotate([0, 0, 45])\n        scale([0.4, 0.4, 1.2])\n        cylinder(h = 20, d = 8);\n        \n        // Left hand\n        translate([-28, 22, 25])\n        sphere(d = 10);\n        \n        // Right arm\n        translate([20, 15, 25])\n        rotate([0, 0, -45])\n        scale([0.4, 0.4, 1.2])\n        cylinder(h = 20, d = 8);\n        \n        // Right hand\n        translate([28, 22, 25])\n        sphere(d = 10);\n    }\n}\n\nmodule purple_markings() {\n    color(\"#5A2D8A\")\n    // Forehead symbol\n    translate([0, 25, 55])\n    rotate([90, 0, 0])\n    cylinder(h = 2, d = 8);\n    \n    // Side markings\n    translate([-22, 10, 45])\n    rotate([0, 0, -30])\n    scale([0.5, 0.1, 0.3])\n    sphere(d = 15);\n    \n    translate([22, 10, 45])\n    rotate([0, 0, 30])\n    scale([0.5, 0.1, 0.3])\n    sphere(d = 15);\n}\n\n// Assembly\nunion() {\n    yamask_body();\n    mask_details();\n    purple_markings();\n    ghost_tail();\n    arms();\n}",
    "renders": true
  },
  {
    "pokemon": "cofagrigus",
    "openscad_code": "// Cofagrigus in realistic style - medium complexity\n// Size: 80mm height, 3D printable with proper wall thickness\n\n// Main parameters\n$fn = 32;\nwall_thickness = 2;\n\n// Colors\nghost_blue = [0.3, 0.4, 0.7];\ngold = [0.9, 0.7, 0.2];\ndark_blue = [0.1, 0.2, 0.4];\neye_red = [0.8, 0.1, 0.1];\n\n// Main sarcophagus body\nmodule sarcophagus_body() {\n    color(ghost_blue)\n    difference() {\n        // Outer shell\n        cube([35, 25, 70], center=true);\n        \n        // Inner cavity\n        translate([0, 0, 5])\n        cube([31, 21, 60], center=true);\n        \n        // Top opening\n        translate([0, 0, 35])\n        cube([25, 15, 10], center=true);\n    }\n}\n\n// Decorative gold face plate\nmodule face_plate() {\n    color(gold)\n    difference() {\n        // Main plate\n        translate([0, 13, 20])\n        cube([20, 2, 30], center=true);\n        \n        // Eye holes\n        for(x = [-6, 6]) {\n            translate([x, 14, 25])\n            rotate([0, 90, 0])\n            cylinder(h=3, r=3, center=true);\n        }\n        \n        // Mouth slot\n        translate([0, 14, 15])\n        rotate([0, 90, 0])\n        cube([12, 2, 4], center=true);\n    }\n}\n\n// Eyes\nmodule eyes() {\n    color(eye_red)\n    for(x = [-6, 6]) {\n        translate([x, 12, 25])\n        sphere(r=2.5);\n    }\n}\n\n// Floating arms\nmodule arms() {\n    for(side = [-1, 1]) {\n        color(ghost_blue)\n        translate([side * 25, 0, 0]) {\n            rotate([0, 0, side * 15])\n            cube([15, 8, 8], center=true);\n            \n            // Hand\n            translate([side * 8, 0, -10])\n            cube([8, 6, 12], center=true);\n        }\n    }\n}\n\n// Decorative gold bands\nmodule gold_bands() {\n    color(gold)\n    for(z = [-20, 0, 20]) {\n        translate([0, 0, z])\n        difference() {\n            cube([37, 27, 4], center=true);\n            cube([33, 23, 5], center=true);\n        }\n    }\n}\n\n// Crown-like top\nmodule crown() {\n    color(gold)\n    translate([0, 0, 38])\n    difference() {\n        cylinder(h=8, r1=15, r2=12);\n        cylinder(h=9, r1=11, r2=8);\n    }\n    \n    // Spikes\n    for(angle = [0:45:315]) {\n        rotate([0, 0, angle])\n        translate([13, 0, 42])\n        rotate([90, 0, 0])\n        cylinder(h=8, r1=3, r2=1);\n    }\n}\n\n// Spirit wisps\nmodule spirit_wisps() {\n    for(i = [1:4]) {\n        color(ghost_blue)\n        rotate([0, 0, i * 90])\n        translate([20 + i*3, 0, -30 - i*2])\n        scale([1, 0.7, 1])\n        sphere(r=3 + i);\n    }\n}\n\n// Main assembly\nunion() {\n    // Base structure\n    sarcophagus_body();\n    \n    // Face details\n    face_plate();\n    eyes();\n    \n    // Arms\n    arms();\n    \n    // Decorations\n    gold_bands();\n    crown();\n    \n    // Bottom wisps\n    spirit_wisps();\n}",
    "renders": true
  },
  {
    "pokemon": "tirtouga",
    "openscad_code": "// Tirtouga Pokemon - Realistic Style, Medium Complexity\n// 3D printable model with proper wall thickness and no overhangs\n\n// Main body color (blue) and shell color (brown)\nbody_color = [0.1, 0.3, 0.8];\nshell_color = [0.4, 0.25, 0.15];\n\n// Scale factor to make model ~70mm tall\nscale_factor = 0.7;\n\nmodule tirtouga() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        // Main shell (back)\n        color(shell_color) {\n            difference() {\n                // Main shell dome\n                translate([0, 0, 8]) {\n                    scale([1.2, 1.0, 0.6]) {\n                        sphere(8);\n                    }\n                }\n                \n                // Shell pattern grooves\n                for(i = [0:3]) {\n                    rotate([0, 0, i * 90]) {\n                        translate([-2, 0, 4]) {\n                            cube([4, 0.5, 3], center=true);\n                        }\n                    }\n                }\n            }\n            \n            // Shell segments\n            for(i = [0:5]) {\n                rotate([0, 0, i * 60]) {\n                    translate([6, 0, 4]) {\n                        scale([1.5, 0.8, 0.4]) {\n                            sphere(2);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Main body\n        color(body_color) {\n            // Body oval\n            translate([0, 0, 4]) {\n                scale([1.0, 0.8, 0.6]) {\n                    sphere(6);\n                }\n            }\n            \n            // Head\n            translate([0, -8, 6]) {\n                scale([0.8, 0.9, 0.7]) {\n                    sphere(5);\n                }\n            }\n            \n            // Neck connection\n            translate([0, -4, 5]) {\n                cylinder(h=4, r1=3, r2=2.5, center=true);\n            }\n            \n            // Front flippers\n            for(side = [-1, 1]) {\n                translate([side * 4, -2, 2]) {\n                    rotate([0, side * 30, 0]) {\n                        scale([0.3, 1.2, 0.2]) {\n                            sphere(3);\n                        }\n                    }\n                }\n            }\n            \n            // Rear flippers\n            for(side = [-1, 1]) {\n                translate([side * 3, 6, 2]) {\n                    rotate([0, -side * 20, 0]) {\n                        scale([0.4, 1.0, 0.2]) {\n                            sphere(2.5);\n                        }\n                    }\n                }\n            }\n            \n            // Tail\n            translate([0, 10, 3]) {\n                rotate([0, 0, 180]) {\n                    scale([0.5, 1.0, 0.3]) {\n                        cylinder(h=4, r1=2, r2=1);\n                    }\n                }\n            }\n        }\n        \n        // Eyes\n        color([0, 0, 0]) {\n            for(side = [-1, 1]) {\n                translate([side * 1.5, -9, 7]) {\n                    sphere(0.8);\n                }\n            }\n        }\n        \n        // Eye highlights\n        color([1, 1, 1]) {\n            for(side = [-1, 1]) {\n                translate([side * 1.7, -9.2, 7.2]) {\n                    sphere(0.3);\n                }\n            }\n        }\n        \n        // Mouth\n        color([0.2, 0.1, 0.1]) {\n            translate([0, -10, 5]) {\n                rotate([90, 0, 0]) {\n                    scale([1, 0.5, 1]) {\n                        cylinder(h=0.5, r=1);\n                    }\n                }\n            }\n        }\n        \n        // Shell edge ridge\n        color(shell_color) {\n            difference() {\n                translate([0, 0, 3]) {\n                    scale([1.3, 1.1, 0.3]) {\n                        sphere(8);\n                    }\n                }\n                translate([0, 0, 3]) {\n                    scale([1.2, 1.0, 0.4]) {\n                        sphere(7.5);\n                    }\n                }\n            }\n        }\n        \n        // Belly plate\n        color([0.9, 0.8, 0.7]) {\n            translate([0, 0, 1]) {\n                scale([0.8, 0.7, 0.2]) {\n                    sphere(5);\n                }\n            }\n        }\n    }\n}\n\n// Generate the model\ntirtouga();",
    "renders": true
  },
  {
    "pokemon": "carracosta",
    "openscad_code": "// Carracosta OpenSCAD Model - Realistic Style, Medium Complexity\n// Dimensions: ~80mm length\n\nmodule shell_segment(x, y, z, rx, ry, rz, w, h, d) {\n    translate([x, y, z]) rotate([rx, ry, rz]) \n    scale([w, h, d]) sphere(5, $fn=20);\n}\n\nmodule carracosta() {\n    color([0.15, 0.35, 0.55]) { // Main shell color\n        // Main shell body\n        union() {\n            scale([1, 0.8, 0.6]) sphere(20, $fn=30);\n            \n            // Back shell segments\n            for(i = [-3:3]) {\n                shell_segment(i * 8, 0, 5, 0, 0, 0, 1, 1.2, 0.8);\n            }\n            for(i = [-2:2]) {\n                shell_segment(i * 10, 0, 12, 0, 0, 0, 0.8, 1, 0.6);\n            }\n        }\n    }\n    \n    color([0.1, 0.2, 0.3]) { // Darker shell ridges\n        // Ridge details\n        for(i = [-15:5:15]) {\n            translate([i, 0, 15]) rotate([90, 0, 0]) \n            cylinder(h=2, r1=8, r2=4, $fn=6);\n        }\n    }\n    \n    color([0.3, 0.5, 0.7]) { // Head\n        translate([25, 0, 10]) rotate([0, 0, -10]) \n        scale([1.2, 1, 0.8]) sphere(12, $fn=25);\n    }\n    \n    color([0.3, 0.5, 0.7]) { // Neck\n        translate([15, 0, 8]) rotate([0, 0, -15])\n        cylinder(h=12, r1=8, r2=6, $fn=20);\n    }\n    \n    color([0.2, 0.4, 0.6]) { // Flippers\n        // Front flippers\n        translate([10, 18, -5]) rotate([0, -30, 45])\n        scale([0.8, 0.3, 2]) sphere(8, $fn=15);\n        translate([10, -18, -5]) rotate([0, -30, -45])\n        scale([0.8, 0.3, 2]) sphere(8, $fn=15);\n        \n        // Back flippers\n        translate([-20, 12, -3]) rotate([0, 0, 30])\n        scale([0.6, 0.25, 1.8]) sphere(7, $fn=15);\n        translate([-20, -12, -3]) rotate([0, 0, -30])\n        scale([0.6, 0.25, 1.8]) sphere(7, $fn=15);\n    }\n    \n    color([0.1, 0.1, 0.1]) { // Eyes\n        translate([30, 4, 14]) sphere(2, $fn=10);\n        translate([30, -4, 14]) sphere(2, $fn=10);\n        \n        // Eye ridges\n        translate([28, 5, 16]) rotate([0, -20, 0])\n        cube([3, 2, 1], center=true);\n        translate([28, -5, 16]) rotate([0, 20, 0])\n        cube([3, 2, 1], center=true);\n    }\n    \n    color([0.05, 0.15, 0.25]) { // Mouth\n        translate([33, 0, 10]) rotate([0, -10, 0])\n        difference() {\n            scale([1, 0.4, 0.3]) sphere(5, $fn=15);\n            translate([0, 0, 2]) cube([8, 4, 4], center=true);\n        }\n    }\n    \n    color([0.8, 0.7, 0.6]) { // Undershell\n        difference() {\n            translate([0, 0, -10]) scale([1.1, 0.9, 0.5]) sphere(18, $fn=25);\n            translate([0, 0, -5]) cube([50, 40, 20], center=true);\n        }\n    }\n    \n    color([0.1, 0.2, 0.3]) { // Tail\n        translate([-28, 0, -2]) rotate([0, 10, 0])\n        scale([1, 0.6, 0.4]) sphere(8, $fn=15);\n    }\n    \n    color([0.2, 0.3, 0.4]) { // Shell pattern details\n        for(i = [-10:10:10]) {\n            for(j = [-5:5:5]) {\n                translate([i, j, 18]) \n                cylinder(h=1, r1=3, r2=1, $fn=6);\n            }\n        }\n    }\n}\n\n// Scale to 80mm length and center\nscale(0.8) carracosta();",
    "renders": true
  },
  {
    "pokemon": "archen",
    "openscad_code": "// Archen Pokemon - Medium complexity realistic style\n// Size: ~80mm wingspan, 3D printable\n\n$fn = 32;\nscale_factor = 0.8;\n\n// Main colors\ncolor_body = [0.2, 0.1, 0.05];\ncolor_wing = [0.3, 0.15, 0.08];\ncolor_face = [0.25, 0.12, 0.06];\ncolor_eyes = [0.9, 0.9, 0.1];\ncolor_markings = [0.1, 0.05, 0.02];\ncolor_beak = [0.4, 0.2, 0.1];\n\nmodule archen_body() {\n    // Main body oval\n    color(color_body)\n    scale([1, 0.7, 1.2])\n    sphere(15);\n    \n    // Chest marking\n    color(color_markings)\n    translate([0, -8, 0])\n    scale([0.8, 0.1, 1.5])\n    sphere(10);\n}\n\nmodule archen_head() {\n    // Main head shape\n    color(color_face)\n    translate([0, 20, 15])\n    scale([0.8, 0.6, 1])\n    sphere(12);\n    \n    // Beak\n    color(color_beak)\n    translate([0, 28, 15])\n    rotate([0, 90, 0])\n    cylinder(h=15, r1=3, r2=0);\n    \n    // Head crest\n    color(color_wing)\n    for(i = [0:30:150]) {\n        rotate([0, 0, i])\n        translate([8, 25, 20])\n        rotate([0, 30, 0])\n        scale([0.3, 1, 0.1])\n        cylinder(h=8, r1=2, r2=1);\n    }\n}\n\nmodule archen_eyes() {\n    // Left eye\n    color(color_eyes)\n    translate([-5, 20, 17])\n    scale([0.8, 0.8, 0.3])\n    sphere(3);\n    \n    // Right eye\n    translate([5, 20, 17])\n    scale([0.8, 0.8, 0.3])\n    sphere(3);\n    \n    // Eye markings\n    color(color_markings)\n    translate([-5, 20, 19])\n    sphere(1);\n    translate([5, 20, 19])\n    sphere(1);\n}\n\nmodule archen_wings() {\n    // Left wing\n    color(color_wing)\n    translate([-15, 0, 10])\n    rotate([0, 0, -20])\n    linear_extrude(height=3)\n    polygon(points=[[0,0], [-20,5], [-30,15], [-25,25], [-15,20], [-5,10]]);\n    \n    // Right wing\n    translate([15, 0, 10])\n    rotate([0, 0, 20])\n    mirror([1,0,0])\n    linear_extrude(height=3)\n    polygon(points=[[0,0], [-20,5], [-30,15], [-25,25], [-15,20], [-5,10]]);\n    \n    // Wing details\n    color(color_markings)\n    for(pos = [[-20, 10, 12], [20, 10, 12]]) {\n        translate(pos)\n        scale([0.5, 0.5, 0.1])\n        sphere(5);\n    }\n}\n\nmodule archen_legs() {\n    // Left leg\n    color(color_body)\n    translate([-8, -10, -15])\n    rotate([0, 15, 0])\n    cylinder(h=15, r1=3, r2=2);\n    \n    // Left foot\n    translate([-8, -10, -30])\n    rotate([0, 90, 0])\n    scale([1, 2, 0.5])\n    sphere(4);\n    \n    // Right leg\n    translate([8, -10, -15])\n    rotate([0, -15, 0])\n    cylinder(h=15, r1=3, r2=2);\n    \n    // Right foot\n    translate([8, -10, -30])\n    rotate([0, 90, 0])\n    scale([1, 2, 0.5])\n    sphere(4);\n    \n    // Toe claws\n    color(color_markings)\n    for(x = [-8, 8]) {\n        for(z = [-30, -32]) {\n            translate([x+2, -12, z])\n            rotate([0, 0, 45])\n            scale([0.2, 1, 0.2])\n            cylinder(h=3, r1=1, r2=0);\n        }\n    }\n}\n\nmodule archen_tail() {\n    color(color_wing)\n    translate([0, -25, 0])\n    rotate([0, 0, 180])\n    linear_extrude(height=4)\n    polygon(points=[[0,0], [-8,10], [-5,20], [0,25], [5,20], [8,10]]);\n    \n    // Tail feathers\n    for(i = [-15:15:15]) {\n        color(color_markings)\n        translate([i/2, -35-i, 2])\n        rotate([0, 0, i])\n        scale([0.3, 1, 0.1])\n        cylinder(h=8, r1=2, r2=0);\n    }\n}\n\n// Assemble the complete Archen\nscale([scale_factor, scale_factor, scale_factor])\nunion() {\n    archen_body();\n    archen_head();\n    archen_eyes();\n    archen_wings();\n    archen_legs();\n    archen_tail();\n}",
    "renders": true
  },
  {
    "pokemon": "archeops",
    "openscad_code": "// Archeops Pokemon - Realistic Style\n// Size: 80mm wingspan\n\n// Colors\ncolor_body = [0.82, 0.41, 0.16];  // Orange\ncolor_wing = [0.96, 0.87, 0.70];  // Light tan\ncolor_detail = [0.2, 0.2, 0.2];   // Dark gray/blue\ncolor_eye = [0.1, 0.1, 0.1];      // Black\ncolor_beak = [0.4, 0.3, 0.2];     // Brown\n\n// Main body\nmodule body() {\n    color(color_body)\n    union() {\n        // Torso\n        translate([0, 0, 10])\n            scale([1.2, 0.8, 1])\n            sphere(8);\n        \n        // Abdomen\n        translate([0, 0, 4])\n            scale([1, 0.7, 1.2])\n            sphere(7);\n        \n        // Neck\n        translate([0, 5, 18])\n            rotate([0, -30, 0])\n            cylinder(h=12, r1=3, r2=2);\n    }\n}\n\n// Head\nmodule head() {\n    color(color_body)\n    union() {\n        // Main head shape\n        translate([0, 18, 22])\n            scale([1, 0.8, 1.1])\n            sphere(7);\n        \n        // Crest\n        color(color_detail)\n        translate([0, 15, 28])\n            rotate([0, 20, 0])\n            cylinder(h=8, r1=2, r2=0.5);\n        \n        // Beak\n        color(color_beak)\n        translate([0, 26, 22])\n            rotate([0, -20, 0])\n            cylinder(h=8, r1=2.5, r2=1);\n    }\n}\n\n// Eyes\nmodule eyes() {\n    color(color_eye)\n    union() {\n        translate([-2.5, 21, 23])\n            sphere(1.5);\n        translate([2.5, 21, 23])\n            sphere(1.5);\n    }\n}\n\n// Wings\nmodule wings() {\n    // Left wing\n    color(color_wing)\n    translate([-12, 0, 15])\n        rotate([0, 0, 45])\n        difference() {\n            union() {\n                // Wing base\n                scale([2.5, 0.5, 1])\n                    sphere(5);\n                \n                // Primary feathers\n                for(i = [0:3]) {\n                    translate([-8 - i*3, 0, -i*2])\n                        rotate([0, 10*i, 0])\n                        scale([3, 0.3, 0.8])\n                        sphere(2);\n                }\n            }\n            // Wing detail cuts\n            color(color_detail)\n            for(i = [1:3]) {\n                translate([-6 - i*3, 0, -i*1.5])\n                    rotate([0, 10*i, 0])\n                    scale([2.5, 0.4, 0.7])\n                    sphere(1.5);\n            }\n        }\n    \n    // Right wing (mirrored)\n    mirror([1, 0, 0])\n        translate([-12, 0, 15])\n            rotate([0, 0, 45])\n            difference() {\n                union() {\n                    scale([2.5, 0.5, 1])\n                        sphere(5);\n                    for(i = [0:3]) {\n                        translate([-8 - i*3, 0, -i*2])\n                            rotate([0, 10*i, 0])\n                            scale([3, 0.3, 0.8])\n                            sphere(2);\n                    }\n                }\n                for(i = [1:3]) {\n                    translate([-6 - i*3, 0, -i*1.5])\n                        rotate([0, 10*i, 0])\n                        scale([2.5, 0.4, 0.7])\n                        sphere(1.5);\n                }\n            }\n}\n\n// Legs and feet\nmodule legs() {\n    color(color_body)\n    union() {\n        // Left leg\n        translate([-3, -5, 5])\n            cylinder(h=8, r=1.5);\n        translate([-3, -5, 2])\n            rotate([0, 0, 20])\n            scale([1.5, 0.5, 2])\n            sphere(2);\n        \n        // Right leg\n        translate([3, -5, 5])\n            cylinder(h=8, r=1.5);\n        translate([3, -5, 2])\n            rotate([0, 0, -20])\n            scale([1.5, 0.5, 2])\n            sphere(2);\n        \n        // Toes\n        color(color_beak)\n        for(i = [-1, 0, 1]) {\n            translate([-3 + i*1.5, -5, 0.5])\n                rotate([0, 0, i*10])\n                cylinder(h=2, r1=0.8, r2=0.5);\n            translate([3 + i*1.5, -5, 0.5])\n                rotate([0, 0, i*10])\n                cylinder(h=2, r1=0.8, r2=0.5);\n        }\n    }\n}\n\n// Tail\nmodule tail() {\n    color(color_wing)\n    translate([0, -12, 8])\n        rotate([0, 30, 0])\n        difference() {\n            // Main tail\n            union() {\n                scale([0.8, 2.5, 0.5])\n                    sphere(6);\n                \n                // Tail feathers\n                for(i = [0:2]) {\n                    translate([0, -10 - i*2, -i*1.5])\n                        rotate([0, -10*i, 0])\n                        scale([0.6, 2, 0.4])\n                        sphere(4);\n                }\n            }\n            \n            // Detail cuts\n            color(color_detail)\n            for(i = [1:3]) {\n                translate([0, -8 - i*2, -i*1.2])\n                    rotate([0, -10*i, 0])\n                    scale([0.5, 1.8, 0.3])\n                    sphere(3);\n            }\n        }\n}\n\n// Body markings\nmodule markings() {\n    color(color_detail)\n    union() {\n        // Chest pattern\n        translate([0, 2, 12])\n            scale([0.8, 1.2, 0.3])\n            sphere(6);\n        \n        // Wing tips\n        translate([-15, 0, 10])\n            sphere(1);\n        translate([15, 0, 10])\n            sphere(1);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    eyes();\n    wings();\n    legs();\n    tail();\n    markings();\n}",
    "renders": true
  },
  {
    "pokemon": "trubbish",
    "openscad_code": "// Trubbish Pokemon - Realistic Medium Complexity\n// Designed for 3D printing with no overhangs\n\n// Color definitions\n$fa = 1;\n$fs = 0.4;\n\nmodule trubbish_body() {\n    color([0.4, 0.6, 0.3])  // Moss green\n    union() {\n        // Main garbage bag body\n        translate([0, 0, 20])\n        scale([1, 0.8, 1.2])\n        sphere(25);\n        \n        // Bag bottom bulge\n        translate([0, 0, 5])\n        scale([0.9, 0.7, 0.5])\n        sphere(20);\n        \n        // Bag opening at top\n        difference() {\n            translate([0, 0, 47])\n            scale([1.1, 1, 0.3])\n            sphere(25);\n            \n            translate([0, 0, 48])\n            scale([0.9, 0.8, 0.5])\n            sphere(23);\n        }\n    }\n}\n\nmodule trubbish_ears() {\n    color([0.3, 0.5, 0.25])\n    union() {\n        // Left ear\n        translate([-15, 20, 45])\n        rotate([0, -20, -30])\n        scale([0.3, 2, 0.3])\n        cylinder(h=15, r1=8, r2=5);\n        \n        // Right ear\n        translate([15, 20, 45])\n        rotate([0, -20, 30])\n        scale([0.3, 2, 0.3])\n        cylinder(h=15, r1=8, r2=5);\n    }\n}\n\nmodule trubbish_arms() {\n    color([0.4, 0.6, 0.3])\n    union() {\n        // Left arm\n        translate([-25, 0, 25])\n        rotate([0, 0, -30])\n        scale([0.4, 0.4, 1.5])\n        cylinder(h=20, r1=10, r2=8);\n        \n        // Right arm\n        translate([25, 0, 25])\n        rotate([0, 0, 30])\n        scale([0.4, 0.4, 1.5])\n        cylinder(h=20, r1=10, r2=8);\n    }\n}\n\nmodule trubbish_legs() {\n    color([0.35, 0.55, 0.28])\n    union() {\n        // Left leg\n        translate([-12, -20, 5])\n        scale([0.5, 0.5, 1])\n        cylinder(h=10, r=8);\n        \n        // Right leg\n        translate([12, -20, 5])\n        scale([0.5, 0.5, 1])\n        cylinder(h=10, r=8);\n    }\n}\n\nmodule trubbish_face() {\n    color([0.4, 0.6, 0.3])\n    union() {\n        // Eyes\n        translate([-10, 15, 35])\n        color([0.9, 0.2, 0.2])\n        scale([1, 1.2, 0.5])\n        sphere(5);\n        \n        translate([10, 15, 35])\n        color([0.9, 0.2, 0.2])\n        scale([1, 1.2, 0.5])\n        sphere(5);\n        \n        // Pupils\n        translate([-10, 15, 37])\n        color([0.1, 0.1, 0.1])\n        sphere(2);\n        \n        translate([10, 15, 37])\n        color([0.1, 0.1, 0.1])\n        sphere(2);\n        \n        // Mouth\n        translate([0, 5, 30])\n        color([0.3, 0.2, 0.2])\n        scale([1.5, 0.8, 0.5])\n        cube([15, 5, 5], center=true);\n    }\n}\n\nmodule trubbish_garbage_details() {\n    color([0.5, 0.4, 0.3])\n    union() {\n        // Garbage protrusions\n        for(i = [0:5]) {\n            rotate([0, 0, i*60])\n            translate([20, 0, 25])\n            scale([0.5, 0.5, 1])\n            cylinder(h=15, r=5);\n        }\n        \n        // Small garbage pieces\n        for(i = [0:8]) {\n            rotate([0, 0, i*45])\n            translate([22*cos(i*45), 22*sin(i*45), 20])\n            color([0.6, 0.5, 0.4])\n            sphere(3);\n        }\n    }\n}\n\nmodule trubbish_stripes() {\n    color([0.2, 0.3, 0.15])\n    union() {\n        // Body stripes\n        for(i = [1:3]) {\n            rotate([0, 90, 0])\n            translate([0, 0, 5 + i*15])\n            scale([1, 1.2, 0.1])\n            cylinder(h=50, r=25);\n        }\n    }\n}\n\n// Main assembly\ntrubbish_body();\ntrubbish_ears();\ntrubbish_arms();\ntrubbish_legs();\ntrubbish_face();\ntrubbish_garbage_details();\ntrubbish_stripes();",
    "renders": true
  },
  {
    "pokemon": "garbodor",
    "openscad_code": "// Garbodor Pokemon - Realistic Style (Medium Complexity)\n// Size: ~70mm height\n// Colors: Green body, grey trash, red/blue accents\n\nmodule ear(posX, posY, posZ, angle) {\n    color(\"forestgreen\")\n    translate([posX, posY, posZ])\n    rotate([0, angle, 0])\n    difference() {\n        scale([1, 0.6, 0.8])\n        sphere(6, $fn=16);\n        translate([0, -3, 0])\n        cube([12, 6, 12], center=true);\n    }\n}\n\nmodule trash_piece(x, y, z, rx, ry, rz, size) {\n    color(\"silver\")\n    translate([x, y, z])\n    rotate([rx, ry, rz])\n    scale([size, size*0.7, size*0.5])\n    cube(10, center=true);\n}\n\nmodule arm(posX, posY, posZ, rotZ) {\n    color(\"forestgreen\")\n    translate([posX, posY, posZ])\n    rotate([0, 0, rotZ]) {\n        // Upper arm\n        cylinder(h=12, r1=5, r2=3, center=false, $fn=12);\n        translate([0, 0, 12])\n        rotate([20, 0, 0])\n        cylinder(h=15, r1=3, r2=4, center=false, $fn=12);\n        translate([0, 0, 27])\n        sphere(4, $fn=12);\n    }\n}\n\nmodule spike(posX, posY, posZ, angle) {\n    color(\"darkgreen\")\n    translate([posX, posY, posZ])\n    rotate([0, 0, angle])\n    cylinder(h=8, r1=3, r2=0.5, center=false, $fn=6);\n}\n\n// Main body\ncolor(\"forestgreen\")\ntranslate([0, 0, 30])\nscale([1, 0.8, 1.2])\nsphere(25, $fn=32);\n\n// Lower body\ncolor(\"darkgreen\")\ntranslate([0, 0, 10])\nscale([1.2, 1, 0.8])\nsphere(20, $fn=32);\n\n// Ears\near(-18, 0, 55, 30);\near(18, 0, 55, -30);\n\n// Arms\narm(-28, 0, 35, 45);\narm(28, 0, 35, -45);\n\n// Legs\ncolor(\"forestgreen\")\nfor(side = [-1, 1]) {\n    translate([side * 12, 0, 0]) {\n        rotate([0, 15, 0])\n        cylinder(h=20, r1=8, r2=6, center=false, $fn=16);\n        translate([0, 0, -10])\n        sphere(8, $fn=16);\n    }\n}\n\n// Trash on body\ntrash_piece(-15, 20, 40, 0, 0, 30, 0.8);\ntrash_piece(10, -15, 45, 20, 10, -20, 0.7);\ntrash_piece(0, 25, 35, -10, 0, 0, 0.9);\ntrash_piece(-8, -20, 38, 0, -15, 45, 0.6);\n\n// Face features\n// Eyes\ncolor(\"red\")\nfor(side = [-1, 1]) {\n    translate([side * 10, 25, 48])\n    sphere(3, $fn=16);\n}\n\n// Mouth\ncolor(\"darkslategray\")\ntranslate([0, 20, 40])\nrotate([90, 0, 0])\ncylinder(h=2, r1=8, r2=12, center=false, $fn=24);\n\n// Teeth\ncolor(\"white\")\nfor(i = [-2:2]) {\n    translate([i * 3, 20, 38])\n    cube([2, 2, 4], center=true);\n}\n\n// Pipe on head\ncolor(\"silver\")\ntranslate([0, 10, 60])\nrotate([15, 0, 0])\ncylinder(h=20, r1=4, r2=3, center=false, $fn=16);\n\n// Spikes on body\nspike(-20, 0, 30, 0);\nspike(20, 0, 30, 45);\nspike(0, -20, 25, 90);\nspike(-15, -15, 35, 135);\n\n// Trash on ground\nfor(i = [0:4]) {\n    rotate([0, 0, i * 72])\n    translate([15 + i * 2, 0, 5])\n    trash_piece(0, 0, 0, 0, 0, i * 30, 0.4);\n}\n\n// Blue markings\ncolor(\"blue\")\ntranslate([0, 0, 35])\nrotate([90, 0, 0])\ndifference() {\n    cylinder(h=2, r1=18, r2=18, center=false, $fn=32);\n    cylinder(h=3, r1=14, r2=14, center=false, $fn=32);\n}\n\n// Red tube details\ncolor(\"red\")\ntranslate([0, 10, 65])\nrotate([15, 0, 0])\ncylinder(h=1, r1=4.5, r2=3.5, center=false, $fn=16);",
    "renders": true
  },
  {
    "pokemon": "zorua",
    "openscad_code": "// Zorua Pokemon - Realistic Style (Medium Complexity)\n// Based on the Dark Fox Pokemon from Generation V\n\n// Color definitions\n$fn = 32;\n\nmodule zorua() {\n    // Main body - dark gray with slight blue tint\n    color([0.2, 0.2, 0.25]) {\n        // Torso\n        translate([0, 0, 10]) {\n            scale([1.2, 1, 1.5]) {\n                sphere(r=12);\n            }\n        }\n        \n        // Head\n        translate([0, 0, 28]) {\n            sphere(r=10);\n        }\n        \n        // Neck connection\n        translate([0, 0, 20]) {\n            cylinder(h=8, r1=8, r2=10);\n        }\n    }\n    \n    // Legs - positioned for stability\n    color([0.15, 0.15, 0.2]) {\n        // Front legs\n        translate([-7, 8, 5]) {\n            rotate([0, 15, 0]) {\n                cylinder(h=15, r=3);\n            }\n        }\n        translate([7, 8, 5]) {\n            rotate([0, -15, 0]) {\n                cylinder(h=15, r=3);\n            }\n        }\n        \n        // Back legs\n        translate([-6, -8, 5]) {\n            rotate([0, -15, 0]) {\n                cylinder(h=15, r=3.5);\n            }\n        }\n        translate([6, -8, 5]) {\n            rotate([0, 15, 0]) {\n                cylinder(h=15, r=3.5);\n            }\n        }\n    }\n    \n    // Paws\n    color([0.15, 0.15, 0.2]) {\n        for(x = [-7, 7]) {\n            translate([x, 8, -2]) {\n                scale([1.2, 1, 0.8]) {\n                    sphere(r=4);\n                }\n            }\n            translate([x*0.85, -8, -2]) {\n                scale([1.2, 1, 0.8]) {\n                    sphere(r=4.5);\n                }\n            }\n        }\n    }\n    \n    // Tail - split into four sections\n    color([0.2, 0.2, 0.25]) {\n        translate([0, -18, 12]) {\n            rotate([90, 0, 0]) {\n                cylinder(h=20, r1=6, r2=4);\n            }\n        }\n        \n        // Tail splits\n        translate([0, -20, 8]) {\n            rotate([90, -20, 45]) {\n                cylinder(h=15, r1=3, r2=2);\n            }\n            rotate([90, -20, -45]) {\n                cylinder(h=15, r1=3, r2=2);\n            }\n            rotate([90, 20, 135]) {\n                cylinder(h=15, r1=3, r2=2);\n            }\n            rotate([90, 20, -135]) {\n                cylinder(h=15, r1=3, r2=2);\n            }\n        }\n    }\n    \n    // Ears - pointed fox ears\n    color([0.2, 0.2, 0.25]) {\n        translate([-7, 5, 32]) {\n            rotate([0, -30, -30]) {\n                scale([0.5, 1, 1.5]) {\n                    cylinder(h=12, r1=3, r2=0.5);\n                }\n            }\n        }\n        translate([7, 5, 32]) {\n            rotate([0, -30, 30]) {\n                scale([0.5, 1, 1.5]) {\n                    cylinder(h=12, r1=3, r2=0.5);\n                }\n            }\n        }\n    }\n    \n    // Red markings on face and body\n    color([0.8, 0.1, 0.1]) {\n        // Forehead marking\n        translate([0, 7, 35]) {\n            rotate([90, 0, 0]) {\n                scale([1, 0.3, 1]) {\n                    cylinder(h=2, r=6);\n                }\n            }\n        }\n        \n        // Eye markings\n        for(x = [-5, 5]) {\n            translate([x, 4, 30]) {\n                rotate([0, 0, x*3]) {\n                    scale([0.5, 1, 0.3]) {\n                        cube([8, 3, 2]);\n                    }\n                }\n            }\n        }\n        \n        // Neck collar\n        translate([0, 0, 22]) {\n            rotate([90, 0, 0]) {\n                difference() {\n                    cylinder(h=3, r=11);\n                    cylinder(h=4, r=9);\n                }\n            }\n        }\n    }\n    \n    // Eyes - yellow with black pupils\n    color([0.9, 0.8, 0.1]) {\n        translate([-4, 5, 30]) {\n            sphere(r=2);\n        }\n        translate([4, 5, 30]) {\n            sphere(r=2);\n        }\n    }\n    \n    color([0, 0, 0]) {\n        translate([-4, 6, 31]) {\n            sphere(r=1);\n        }\n        translate([4, 6, 31]) {\n            sphere(r=1);\n        }\n    }\n    \n    // Muzzle\n    color([0.3, 0.3, 0.35]) {\n        translate([0, 9, 27]) {\n            scale([0.8, 1.2, 0.8]) {\n                sphere(r=5);\n            }\n        }\n    }\n    \n    // Nose\n    color([0.1, 0.1, 0.1]) {\n        translate([0, 11, 27]) {\n            sphere(r=1.5);\n        }\n    }\n    \n    // Whisker spots\n    color([0.1, 0.1, 0.1]) {\n        for(x = [-1, 1]) {\n            for(y = [8, 10]) {\n                translate([x*8, y, 27]) {\n                    sphere(r=0.5);\n                }\n            }\n        }\n    }\n}\n\n// Scale to 60mm height\nscale([1.5, 1.5, 1.5]) {\n    zorua();\n}",
    "renders": true
  },
  {
    "pokemon": "zoroark",
    "openscad_code": "// Zoroark OpenSCAD Model - Realistic Style, Medium Complexity\n// Overall height: 80mm\n\ncolor([0.1,0.1,0.1]) // Dark grey body\nunion() {\n    // Head\n    translate([0,0,65]) rotate([0,0,0]) {\n        difference() {\n            sphere(8); // Main head sphere\n            translate([0,-8,0]) cube([16,16,16], center=true); // Flatten back\n        }\n        \n        // Muzzle\n        translate([0,-9,0]) rotate([10,0,0]) scale([0.8,1.2,0.8]) sphere(5);\n        \n        // Ears (x2)\n        for(side = [-1, 1]) {\n            translate([side*6,0,8]) rotate([0,side*20,0]) {\n                scale([1,0.3,2]) sphere(4);\n                translate([0,0,4]) scale([0.7,0.3,1]) sphere(3);\n            }\n        }\n    }\n    \n    // Neck\n    translate([0,0,55]) cylinder(h=8, r1=4, r2=6, $fn=16);\n    \n    // Torso\n    translate([0,0,35]) scale([1,0.7,1.2]) sphere(12);\n    \n    // Arms\n    for(side = [-1, 1]) {\n        translate([side*10,0,45]) rotate([0,0,side*30]) {\n            // Upper arm\n            cylinder(h=12, r1=3, r2=2.5, $fn=12);\n            translate([0,0,12]) rotate([side*20,0,0]) {\n                // Lower arm\n                cylinder(h=10, r1=2.5, r2=2, $fn=12);\n                // Hand with claws\n                translate([0,0,10]) {\n                    sphere(2);\n                    for(i=[-1,0,1]) {\n                        translate([i*1.5,0,0]) scale([0.3,0.3,1.5]) cylinder(h=4, r=1);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Legs\n    for(side = [-1, 1]) {\n        translate([side*5,0,20]) rotate([10,0,0]) {\n            // Upper leg\n            cylinder(h=15, r1=3.5, r2=3, $fn=12);\n            translate([0,0,15]) rotate([-20,0,0]) {\n                // Lower leg\n                cylinder(h=12, r1=3, r2=2.5, $fn=12);\n                // Foot\n                translate([0,3,0]) rotate([90,0,0]) scale([1.2,2,0.8]) cylinder(h=5, r1=2.5, r2=2, $fn=12);\n            }\n        }\n    }\n    \n    // Tail (split into 4)\n    translate([0,12,25]) rotate([45,0,0]) {\n        for(i=[0,1,2,3]) {\n            rotate([0,i*90,0]) {\n                translate([0,0,0]) scale([0.4,1,1]) cylinder(h=25, r1=6, r2=2, $fn=8);\n            }\n        }\n    }\n}\n\n// Red mane/tuft details\ncolor([0.7,0.1,0.1]) {\n    // Head tuft\n    translate([0,-5,73]) rotate([30,0,0]) scale([0.5,0.2,2]) cylinder(h=10, r1=3, r2=0);\n    \n    // Mane spikes\n    for(i=[-2,-1,0,1,2]) {\n        translate([i*4,0,58]) rotate([30-i*5,0,0]) scale([0.6,0.3,1.5]) cylinder(h=8, r1=3, r2=0);\n    }\n}\n\n// Facial features\ncolor([0.9,0.9,0.9]) {\n    // Eyes\n    for(side = [-1, 1]) {\n        translate([side*3,-10,66]) rotate([0,20,0]) scale([1,0.5,0.2]) sphere(2);\n    }\n}\n\ncolor([0.1,0.1,0.1]) {\n    // Eye pupils\n    for(side = [-1, 1]) {\n        translate([side*3.5,-10.5,67]) sphere(0.8);\n    }\n    \n    // Nose\n    translate([0,-12.5,64]) rotate([45,0,0]) scale([1,0.7,0.5]) sphere(1.5);\n}\n\n// Chest pattern\ncolor([0.05,0.05,0.05]) {\n    translate([0,-3,50]) rotate([90,0,0]) linear_extrude(height=0.5) {\n        polygon(points=[[-4,0],[-2,-3],[0,-4],[2,-3],[4,0],[0,4]]);\n    }\n}",
    "renders": true
  },
  {
    "pokemon": "minccino",
    "openscad_code": "// Minccino - Medium Complexity Realistic Style\n// Overall height ~80mm\n\n$fn = 32;\nbody_color = [0.85, 0.75, 0.65];\near_tip_color = [0.6, 0.4, 0.3];\neye_color = [0.1, 0.1, 0.1];\nnose_color = [0.5, 0.3, 0.25];\ntail_color = [0.8, 0.7, 0.6];\nwhite_color = [0.95, 0.95, 0.95];\n\n// Main body\nmodule body() {\n    color(body_color)\n    union() {\n        // Torso\n        translate([0, 0, 25])\n            scale([1.2, 1, 1.5])\n            sphere(15);\n            \n        // Rounded belly\n        translate([0, 8, 20])\n            scale([0.9, 0.7, 1.2])\n            sphere(12);\n            \n        // Head\n        translate([0, 0, 45])\n            sphere(18);\n    }\n}\n\n// Ears with curled tips\nmodule ear(side) {\n    color(body_color)\n    union() {\n        // Main ear\n        translate([side * 12, 0, 55])\n            rotate([0, side * 15, 0])\n            scale([0.3, 2.5, 0.3])\n            cylinder(20, 8, 6);\n            \n        // Curled tip\n        color(ear_tip_color)\n        translate([side * 15, 0, 72])\n            rotate([0, side * 15, 90])\n            rotate_extrude(angle = 180)\n            translate([5, 0, 0])\n            circle(3);\n    }\n}\n\n// Eyes\nmodule eye(side) {\n    color(eye_color)\n    union() {\n        // Main eye\n        translate([side * 8, -15, 45])\n            scale([1.2, 1, 0.8])\n            sphere(3.5);\n            \n        // White highlight\n        color(white_color)\n        translate([side * 8.5, -17, 46])\n            sphere(1);\n    }\n}\n\n// Nose and mouth\nmodule face() {\n    color(nose_color)\n    translate([0, -16, 42])\n        sphere(2);\n        \n    // Mouth (small curve)\n    color(eye_color)\n    translate([0, -16, 38])\n        rotate([90, 0, 0])\n        linear_extrude(0.5)\n        arc(2, [0, 180], 0.5);\n}\n\n// Front paws\nmodule paw(side) {\n    color(body_color)\n    translate([side * 10, -5, 15])\n        scale([1, 1.5, 0.8])\n        sphere(6);\n        \n    // Toes\n    for(i = [-1:1]) {\n        translate([side * 10 + i * 2, -10, 12])\n            sphere(1.5);\n    }\n}\n\n// Back paws\nmodule back_paw(side) {\n    color(body_color)\n    translate([side * 8, 5, 10])\n        scale([1.2, 1.8, 1])\n        sphere(7);\n}\n\n// Tail with spiral curl\nmodule tail() {\n    color(tail_color)\n    union() {\n        // Tail base\n        translate([0, 12, 20])\n            rotate([0, 90, 0])\n            cylinder(10, 6, 5);\n            \n        // Spiral curl\n        for(i = [0:5:360]) {\n            rotate([0, 0, i])\n            translate([12 + i/30, 12, 20])\n                rotate([0, 90, 0])\n                cylinder(3, 4, 3.5);\n        }\n    }\n}\n\n// Main assembly\nbody();\near(1);\near(-1);\neye(1);\neye(-1);\nface();\npaw(1);\npaw(-1);\nback_paw(1);\nback_paw(-1);\ntail();",
    "renders": true
  },
  {
    "pokemon": "cinccino",
    "openscad_code": "// Cinccino OpenSCAD Model - Realistic Style, Medium Complexity\n// Size: ~80mm height, 3D printable\n\n// Parameters\n$fn = 32;\nbody_color = [0.95, 0.9, 0.85];\near_color = [0.8, 0.7, 0.65];\neye_color = [0.2, 0.2, 0.2];\nmouth_color = [0.3, 0.2, 0.2];\nnose_color = [0.4, 0.3, 0.3];\n\n// Main body\nmodule body() {\n    color(body_color)\n    union() {\n        // Torso\n        translate([0, 0, 15])\n        scale([1.2, 1, 1.5])\n        sphere(r=20);\n        \n        // Head\n        translate([0, 0, 45])\n        scale([1.1, 1, 1.2])\n        sphere(r=18);\n    }\n}\n\n// Ears\nmodule ears() {\n    color(ear_color)\n    union() {\n        // Left ear\n        translate([-15, 12, 55])\n        rotate([0, -20, 15])\n        scale([0.8, 0.3, 1.5])\n        sphere(r=10);\n        \n        // Right ear\n        mirror([1, 0, 0])\n        translate([-15, 12, 55])\n        rotate([0, -20, 15])\n        scale([0.8, 0.3, 1.5])\n        sphere(r=10);\n    }\n}\n\n// Eyes\nmodule eyes() {\n    color(eye_color)\n    union() {\n        // Left eye\n        translate([-8, 15, 50])\n        scale([1.2, 1, 0.8])\n        sphere(r=4);\n        \n        // Right eye\n        mirror([1, 0, 0])\n        translate([-8, 15, 50])\n        scale([1.2, 1, 0.8])\n        sphere(r=4);\n        \n        // Eye highlights\n        color([1, 1, 1])\n        union() {\n            translate([-6, 17, 52])\n            sphere(r=1);\n            \n            mirror([1, 0, 0])\n            translate([-6, 17, 52])\n            sphere(r=1);\n        }\n    }\n}\n\n// Nose\nmodule nose() {\n    color(nose_color)\n    translate([0, 17, 48])\n    scale([1, 0.8, 0.5])\n    sphere(r=3);\n}\n\n// Mouth\nmodule mouth() {\n    color(mouth_color)\n    difference() {\n        translate([0, 12, 44])\n        scale([1.5, 1, 0.5])\n        sphere(r=5);\n        \n        // Cut smile shape\n        translate([0, 17, 44])\n        cube([15, 5, 10], center=true);\n    }\n}\n\n// Whiskers\nmodule whiskers() {\n    color(body_color)\n    union() {\n        // Left whiskers\n        for(i = [1:3]) {\n            translate([-25, 12, 48])\n            rotate([0, i*10, 0])\n            cylinder(h=15, r=1);\n            \n            translate([-25, 12, 46])\n            rotate([0, -i*10, 0])\n            cylinder(h=15, r=1);\n        }\n        \n        // Right whiskers\n        mirror([1, 0, 0])\n        union() {\n            for(i = [1:3]) {\n                translate([-25, 12, 48])\n                rotate([0, i*10, 0])\n                cylinder(h=15, r=1);\n                \n                translate([-25, 12, 46])\n                rotate([0, -i*10, 0])\n                cylinder(h=15, r=1);\n            }\n        }\n    }\n}\n\n// Scarf-like fur\nmodule scarf() {\n    color(body_color)\n    difference() {\n        union() {\n            // Main scarf\n            translate([0, 0, 25])\n            scale([1.4, 1.2, 0.8])\n            sphere(r=25);\n            \n            // Side fluffs\n            translate([-30, 0, 25])\n            sphere(r=15);\n            \n            translate([30, 0, 25])\n            sphere(r=15);\n            \n            translate([0, -20, 25])\n            sphere(r=12);\n        }\n        \n        // Cut hole for neck\n        translate([0, 0, 30])\n        scale([0.6, 0.8, 1])\n        sphere(r=20);\n    }\n}\n\n// Tail curls\nmodule tails() {\n    color(body_color)\n    union() {\n        // Generate 3 tail curls\n        for(i = [0:2]) {\n            rotate([0, 0, i*120])\n            translate([0, 35, 10])\n            rotate([90, 0, 0])\n            tail_curl();\n        }\n    }\n}\n\nmodule tail_curl() {\n    difference() {\n        union() {\n            // Outer curl\n            translate([0, 0, 0])\n            rotate_extrude(angle=270, convexity=10)\n            translate([15, 0, 0])\n            circle(r=8);\n            \n            // Connect to body\n            translate([0, -15, 0])\n            scale([1.5, 1, 1])\n            sphere(r=10);\n        }\n        \n        // Hollow center\n        translate([0, 0, 0])\n        rotate_extrude(angle=270, convexity=10)\n        translate([15, 0, 0])\n        circle(r=5);\n    }\n}\n\n// Feet\nmodule feet() {\n    color(body_color)\n    union() {\n        // Front feet\n        translate([-12, 15, 0])\n        scale([0.8, 1, 0.5])\n        sphere(r=8);\n        \n        translate([12, 15, 0])\n        scale([0.8, 1, 0.5])\n        sphere(r=8);\n        \n        // Back feet\n        translate([-10, -15, 0])\n        scale([0.8, 1, 0.5])\n        sphere(r=8);\n        \n        translate([10, -15, 0])\n        scale([0.8, 1, 0.5])\n        sphere(r=8);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    ears();\n    eyes();\n    nose();\n    mouth();\n    whiskers();\n    scarf();\n    tails();\n    feet();\n}",
    "renders": true
  },
  {
    "pokemon": "gothita",
    "openscad_code": "// Gothita - Realistic Style - Medium Complexity\n// Height: 60mm overall\n\nmodule gothita() {\n    // Main body color - pink\n    color([0.95, 0.65, 0.75]) {\n        \n        // Head - slightly flattened sphere\n        translate([0, 0, 45]) {\n            scale([1.2, 1.2, 0.9]) {\n                sphere(8);\n            }\n        }\n        \n        // Body - teardrop shape\n        translate([0, 0, 25]) {\n            rotate([0, 0, 0]) {\n                cylinder(h=20, r1=12, r2=8);\n            }\n        }\n        \n        // Neck\n        translate([0, 0, 35]) {\n            cylinder(h=8, r=3);\n        }\n        \n        // Legs - simple tapered cylinders\n        for(side = [-1, 1]) {\n            translate([side * 4, 0, 15]) {\n                rotate([0, 20 * side, 0]) {\n                    cylinder(h=12, r1=4, r2=3);\n                }\n            }\n        }\n        \n        // Arms\n        for(side = [-1, 1]) {\n            translate([side * 10, 0, 32]) {\n                rotate([0, 0, 45 * side]) {\n                    rotate([0, 90, 0]) {\n                        cylinder(h=8, r1=3, r2=2);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Hair buns - two spheres\n    color([0.4, 0.2, 0.3]) {\n        for(side = [-1, 1]) {\n            translate([side * 8, 5, 50]) {\n                sphere(5);\n            }\n        }\n    }\n    \n    // Bow - simplified ribbon\n    color([0.3, 0.15, 0.25]) {\n        translate([0, 8, 48]) {\n            // Center knot\n            sphere(2);\n            \n            // Bow loops\n            for(angle = [0, 180]) {\n                rotate([0, 0, angle]) {\n                    translate([5, 0, 0]) {\n                        scale([1, 0.3, 0.5]) {\n                            sphere(3);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Eyes - large white ovals with black pupils\n    color(\"white\") {\n        for(side = [-1, 1]) {\n            translate([side * 3, 3, 47]) {\n                scale([1, 1.5, 0.5]) {\n                    sphere(3);\n                }\n            }\n        }\n    }\n    \n    color(\"black\") {\n        for(side = [-1, 1]) {\n            translate([side * 3, 3, 48]) {\n                sphere(1.5);\n            }\n        }\n    }\n    \n    // Mouth - small curved line\n    color(\"black\") {\n        translate([0, 0, 42]) {\n            rotate([90, 0, 0]) {\n                cylinder(h=0.5, r=2);\n                difference() {\n                    sphere(2);\n                    translate([0, 0, 1]) {\n                        cube([5, 5, 3], center=true);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Hair antenna - thin curved cylinder\n    color([0.4, 0.2, 0.3]) {\n        translate([0, 0, 55]) {\n            rotate([0, 0, 0]) {\n                // Base cylinder\n                cylinder(h=5, r=1.5);\n                \n                // Curved top\n                translate([0, 0, 5]) {\n                    rotate([0, 15, 0]) {\n                        cylinder(h=3, r=1.2);\n                    }\n                }\n                \n                // Ball tip\n                translate([0, 0, 8]) {\n                    sphere(1.5);\n                }\n            }\n        }\n    }\n    \n    // Feet - simple ovals\n    color([0.95, 0.65, 0.75]) {\n        for(side = [-1, 1]) {\n            translate([side * 4, 0, 3]) {\n                scale([1.5, 0.8, 0.5]) {\n                    sphere(3);\n                }\n            }\n        }\n    }\n    \n    // Dress details - horizontal stripes\n    color([0.3, 0.15, 0.25]) {\n        for(i = [1:3]) {\n            translate([0, 0, 22 + i * 5]) {\n                difference() {\n                    cylinder(h=1, r=11.5);\n                    translate([0, 0, -0.5]) {\n                        cylinder(h=2, r=9);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Render the complete model\ngothita();",
    "renders": true
  },
  {
    "pokemon": "gothorita",
    "openscad_code": "// Gothorita - Psychic Type Pokemon\n// Realistic style, medium complexity\n\nmodule gothorita_body() {\n    color([0.2, 0.15, 0.25]) {\n        // Main torso\n        translate([0, 0, 15])\n            scale([1.2, 0.8, 1.5])\n            sphere(d=30);\n        \n        // Lower body extension\n        translate([0, 0, 5])\n            scale([0.9, 0.7, 1])\n            sphere(d=25);\n            \n        // Neck connector\n        translate([0, 0, 32])\n            cylinder(h=8, d1=12, d2=8);\n    }\n}\n\nmodule gothorita_head() {\n    color([0.2, 0.15, 0.25]) {\n        // Main head\n        translate([0, 0, 45])\n            scale([1.1, 0.9, 1.2])\n            sphere(d=25);\n            \n        // Forehead bump\n        translate([0, -8, 52])\n            sphere(d=10);\n    }\n    \n    // Eyes\n    color([0.9, 0.9, 0.95]) {\n        translate([-7, -10, 48])\n            sphere(d=6);\n        translate([7, -10, 48])\n            sphere(d=6);\n    }\n    \n    color([0.1, 0.1, 0.1]) {\n        translate([-7, -12, 48])\n            sphere(d=3);\n        translate([7, -12, 48])\n            sphere(d=3);\n    }\n    \n    // Mouth\n    color([0.3, 0.2, 0.3]) {\n        translate([0, -15, 43])\n            scale([1, 0.5, 0.5])\n            sphere(d=4);\n    }\n}\n\nmodule gothorita_ears() {\n    color([0.2, 0.15, 0.25]) {\n        // Left ear\n        translate([-12, 0, 58]) {\n            rotate([0, -20, -30])\n                scale([0.3, 0.3, 2])\n                cylinder(h=15, d1=8, d2=4);\n        }\n        \n        // Right ear\n        translate([12, 0, 58]) {\n            rotate([0, -20, 30])\n                scale([0.3, 0.3, 2])\n                cylinder(h=15, d1=8, d2=4);\n        }\n    }\n}\n\nmodule gothorita_bows() {\n    color([0.4, 0.1, 0.5]) {\n        // Front bow\n        translate([0, -20, 35]) {\n            rotate([90, 0, 0])\n                scale([1.5, 0.5, 0.3])\n                cube([15, 8, 5], center=true);\n        }\n        \n        // Back bow\n        translate([0, 20, 35]) {\n            rotate([90, 0, 0])\n                scale([1.5, 0.5, 0.3])\n                cube([15, 8, 5], center=true);\n        }\n    }\n    \n    // Bow centers\n    color([0.9, 0.8, 0.95]) {\n        translate([0, -20, 35])\n            sphere(d=4);\n        translate([0, 20, 35])\n            sphere(d=4);\n    }\n}\n\nmodule gothorita_arms() {\n    color([0.2, 0.15, 0.25]) {\n        // Left arm\n        translate([-15, 0, 30]) {\n            rotate([0, 0, -30])\n                cylinder(h=12, d=6);\n            translate([0, -8, 0])\n                sphere(d=8);\n        }\n        \n        // Right arm\n        translate([15, 0, 30]) {\n            rotate([0, 0, 30])\n                cylinder(h=12, d=6);\n            translate([0, -8, 0])\n                sphere(d=8);\n        }\n    }\n}\n\nmodule gothorita_legs() {\n    color([0.2, 0.15, 0.25]) {\n        // Left leg\n        translate([-8, 0, 5]) {\n            cylinder(h=15, d=8);\n            translate([0, 0, -10])\n                sphere(d=10);\n        }\n        \n        // Right leg\n        translate([8, 0, 5]) {\n            cylinder(h=15, d=8);\n            translate([0, 0, -10])\n                sphere(d=10);\n        }\n    }\n}\n\nmodule gothorita_markings() {\n    color([0.3, 0.1, 0.4]) {\n        // Forehead marking\n        translate([0, -5, 52])\n            rotate([90, 0, 0])\n                scale([1, 0.3, 0.1])\n                cube([8, 3, 1], center=true);\n                \n        // Eye markings\n        for(x = [-1, 1]) {\n            translate([x * 7, -8, 45])\n                rotate([0, 0, 45 * x])\n                    scale([0.5, 0.3, 0.1])\n                    cube([6, 2, 1], center=true);\n        }\n    }\n}\n\n// Assemble the complete model\nunion() {\n    gothorita_body();\n    gothorita_head();\n    gothorita_ears();\n    gothorita_bows();\n    gothorita_arms();\n    gothorita_legs();\n    gothorita_markings();\n}",
    "renders": true
  },
  {
    "pokemon": "gothitelle",
    "openscad_code": "// Gothitelle - Realistic Style - Medium Complexity\n// Based on the 3D printable constraints\n\ncolor([0.2,0.2,0.2]) // Main body color - dark gray/black\nunion() {\n    // Main body\n    translate([0,0,25]) scale([1,0.8,1.5]) sphere(d=30, $fn=32);\n    \n    // Head\n    translate([0,0,55]) scale([1,1.1,1.3]) sphere(d=28, $fn=32);\n    \n    // Neck collar\n    translate([0,0,42]) rotate([0,0,0]) cylinder(h=8, r1=12, r2=15, $fn=32);\n}\n\n// Arms\nmodule arm(side) {\n    translate([side*12,0,40]) rotate([0,0,side*15]) {\n        // Upper arm\n        color([0.2,0.2,0.2]) cylinder(h=15, r1=5, r2=4, $fn=16);\n        // Lower arm\n        translate([0,0,15]) rotate([0,side*20,0]) \n            color([0.2,0.2,0.2]) cylinder(h=12, r1=4, r2=3, $fn=16);\n        // Hand\n        translate([0,0,27]) rotate([0,side*10,0])\n            scale([1,0.7,1.5]) color([0.15,0.15,0.15]) sphere(d=8, $fn=16);\n    }\n}\n\narm(1);\narm(-1);\n\n// Legs\nmodule leg(side) {\n    translate([side*8,0,0]) {\n        // Upper leg\n        color([0.2,0.2,0.2]) cylinder(h=20, r1=6, r2=5, $fn=16);\n        // Lower leg\n        translate([0,0,20]) cylinder(h=15, r1=5, r2=4, $fn=16);\n        // Foot\n        translate([0,side*3,30]) rotate([90,0,0]) \n            scale([1.2,1,0.5]) color([0.15,0.15,0.15]) cylinder(h=8, r1=6, r2=6, $fn=16);\n    }\n}\n\nleg(1);\nleg(-1);\n\n// Ears\nmodule ear(side) {\n    translate([side*12,0,60]) rotate([0,side*20,-20]) {\n        color([0.25,0.25,0.25]) \n            scale([1,0.3,2]) sphere(d=10, $fn=16);\n    }\n}\n\near(1);\near(-1);\n\n// Hair buns\nmodule bun(side) {\n    translate([side*8,12,65]) rotate([45,0,0]) {\n        color([0.3,0.3,0.3]) \n            scale([0.8,0.8,1.2]) sphere(d=12, $fn=16);\n    }\n}\n\nbun(1);\nbun(-1);\n\n// Dress bottom\ntranslate([0,0,15]) rotate([0,0,0]) \n    color([0.18,0.18,0.18]) cylinder(h=20, r1=15, r2=20, $fn=32);\n\n// Eye details\nmodule eye(x) {\n    translate([x*5,8,55]) {\n        color([0.9,0.9,0.9]) sphere(d=4, $fn=16);\n        translate([0,0,2]) color([0.1,0.1,0.1]) sphere(d=2, $fn=16);\n    }\n}\n\neye(1);\neye(-1);\n\n// Mouth\ntranslate([0,10,48]) rotate([90,0,0]) \n    color([0.3,0.1,0.1]) cylinder(h=0.5, r1=2, r2=2, $fn=16);\n\n// Chest bow\ntranslate([0,-12,42]) {\n    color([0.4,0.1,0.4]) // Purple accent\n    union() {\n        cube([12,2,6], center=true);\n        rotate([0,0,90]) cube([8,2,6], center=true);\n    }\n}\n\n// Back bow tails\ntranslate([0,-20,42]) {\n    color([0.4,0.1,0.4])\n    for(i=[0:1]) {\n        translate([i*6-3,0,0]) rotate([0,0,i*20-10]) \n            scale([0.5,2,0.5]) sphere(d=8, $fn=16);\n    }\n}",
    "renders": true
  },
  {
    "pokemon": "solosis",
    "openscad_code": "// Solosis Pokemon - Realistic Style (Medium Complexity)\n// 3D printable model optimized for FDM printing\n\n$fn = 32;\n\n// Main colors\nbody_color = \"lightgreen\";\nnucleus_color = \"yellow\";\neye_color = \"black\";\nhighlight_color = \"white\";\n\n// Overall scale\noverall_scale = 0.8;\n\nmodule solosis() {\n    scale([overall_scale, overall_scale, overall_scale]) {\n        \n        // Main spherical body\n        color(body_color) {\n            difference() {\n                sphere(r = 25);\n                \n                // Hollow center for printing\n                translate([0, 0, -1])\n                    sphere(r = 22);\n            }\n        }\n        \n        // Cytoplasm layer (inner sphere)\n        color(body_color) {\n            translate([0, 0, -2])\n                sphere(r = 23);\n        }\n        \n        // Nucleus (central yellow sphere)\n        color(nucleus_color) {\n            translate([0, 0, -3])\n                sphere(r = 12);\n        }\n        \n        // Eye module\n        module eye(x, y, z, rot) {\n            translate([x, y, z]) {\n                rotate([0, 0, rot]) {\n                    // Eye white\n                    color(\"white\")\n                        sphere(r = 4);\n                    \n                    // Pupil\n                    color(eye_color)\n                        translate([0, 0, 2.5])\n                            sphere(r = 2.5);\n                    \n                    // Eye highlight\n                    color(highlight_color)\n                        translate([1, 1, 3.5])\n                            sphere(r = 1);\n                }\n            }\n        }\n        \n        // Left eye\n        eye(-8, 15, 0, 0);\n        \n        // Right eye\n        eye(8, 15, 0, 0);\n        \n        // Mouth (curved line)\n        color(\"black\") {\n            translate([0, 18, -5])\n                rotate([90, 0, 0])\n                    linear_extrude(height = 0.5)\n                        arc(5, [0, 180], 0.5);\n        }\n        \n        // Cell membrane details (bumpy surface)\n        module membrane_bump(x, y, z) {\n            translate([x, y, z])\n                sphere(r = 2);\n        }\n        \n        // Add bumps around the surface\n        for(i = [0:30:360]) {\n            angle = i;\n            x = 25 * cos(angle);\n            y = 25 * sin(angle);\n            z = 10 * sin(angle * 2);\n            \n            color(body_color) {\n                translate([x * 0.8, y * 0.8, z * 0.5])\n                    sphere(r = 1.5);\n            }\n        }\n        \n        // Pseudopods (cell extensions)\n        module pseudopod(x, y, z, rot1, rot2) {\n            translate([x, y, z]) {\n                rotate([rot1, rot2, 0]) {\n                    color(body_color) {\n                        // Base cylinder\n                        cylinder(h = 15, r1 = 3, r2 = 1);\n                        \n                        // Tip sphere\n                        translate([0, 0, 15])\n                            sphere(r = 1.5);\n                    }\n                }\n            }\n        }\n        \n        // Add pseudopods around the body\n        pseudopod(20, 0, 0, 0, 45);\n        pseudopod(-20, 0, 0, 0, 135);\n        pseudopod(0, 20, 0, 45, 90);\n        pseudopod(0, -20, 0, -45, 90);\n        \n        // Cytoplasmic strands\n        module strand(x, y, z, rot) {\n            translate([x, y, z]) {\n                rotate([0, 0, rot]) {\n                    color(body_color) {\n                        hull() {\n                            sphere(r = 1);\n                            translate([0, 8, 0])\n                                sphere(r = 0.5);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Add strands inside\n        for(i = [0:45:360]) {\n            angle = i;\n            x = 15 * cos(angle);\n            y = 15 * sin(angle);\n            \n            strand(x, y, -5, angle);\n        }\n        \n        // Base support for printing\n        color(body_color) {\n            translate([0, 0, -25])\n                cylinder(h = 2, r = 20);\n        }\n    }\n}\n\n// Helper module for arc\nmodule arc(radius, angles, width) {\n    difference() {\n        circle(radius + width/2);\n        circle(radius - width/2);\n    }\n}\n\n// Render the model\nsolosis();",
    "renders": true
  },
  {
    "pokemon": "duosion",
    "openscad_code": "// Duosion Pokemon - Realistic Style\n// Medium complexity with proper 3D printing considerations\n\n// Color definitions\n$fn = 50;\n\n// Main module\nmodule duosion() {\n    color(\"lightgreen\") {\n        union() {\n            // Main body - two connected spheres\n            body();\n            \n            // Outer membrane details\n            membrane();\n            \n            // Inner core details\n            core();\n            \n            // Ears/antennae\n            ears();\n            \n            // Facial features\n            face();\n            \n            // Energy orbs\n            energy_orbs();\n        }\n    }\n}\n\n// Main body - two fused spheres\nmodule body() {\n    // Left sphere\n    translate([-15, 0, 0]) {\n        sphere(d=40);\n    }\n    \n    // Right sphere\n    translate([15, 0, 0]) {\n        sphere(d=40);\n    }\n    \n    // Connecting bridge\n    hull() {\n        translate([-15, 0, 0]) sphere(d=40);\n        translate([15, 0, 0]) sphere(d=40);\n    }\n}\n\n// Outer membrane layer\nmodule membrane() {\n    color(\"palegreen\", 0.7) {\n        difference() {\n            // Outer membrane shell\n            union() {\n                translate([-15, 0, 0]) sphere(d=42);\n                translate([15, 0, 0]) sphere(d=42);\n                hull() {\n                    translate([-15, 0, 0]) sphere(d=42);\n                    translate([15, 0, 0]) sphere(d=42);\n                }\n            }\n            \n            // Cut out inner part\n            union() {\n                translate([-15, 0, 0]) sphere(d=38);\n                translate([15, 0, 0]) sphere(d=38);\n                hull() {\n                    translate([-15, 0, 0]) sphere(d=38);\n                    translate([15, 0, 0]) sphere(d=38);\n                }\n            }\n        }\n    }\n}\n\n// Inner core with division line\nmodule core() {\n    color(\"mediumaquamarine\") {\n        // Left core\n        translate([-15, 0, 0]) {\n            sphere(d=35);\n        }\n        \n        // Right core\n        translate([15, 0, 0]) {\n            sphere(d=35);\n        }\n        \n        // Connecting bridge\n        hull() {\n            translate([-15, 0, 0]) sphere(d=35);\n            translate([15, 0, 0]) sphere(d=35);\n        }\n        \n        // Division line between cores\n        color(\"darkgreen\") {\n            translate([0, 0, -17.5]) {\n                cube([2, 35, 1], center=true);\n            }\n        }\n    }\n}\n\n// Ears/antennae on top\nmodule ears() {\n    color(\"lime\") {\n        // Left ear\n        translate([-15, 0, 22]) {\n            rotate([0, 0, -15]) {\n                cylinder(h=15, d1=8, d2=4, center=false);\n            }\n        }\n        \n        // Right ear\n        translate([15, 0, 22]) {\n            rotate([0, 0, 15]) {\n                cylinder(h=15, d1=8, d2=4, center=false);\n            }\n        }\n    }\n}\n\n// Facial features\nmodule face() {\n    // Eyes\n    color(\"red\") {\n        // Left eye\n        translate([-20, 12, 5]) {\n            sphere(d=6);\n        }\n        \n        // Right eye\n        translate([20, 12, 5]) {\n            sphere(d=6);\n        }\n    }\n    \n    // Eye highlights\n    color(\"white\") {\n        translate([-20.5, 13, 7.5]) {\n            sphere(d=2);\n        }\n        translate([19.5, 13, 7.5]) {\n            sphere(d=2);\n        }\n    }\n    \n    // Mouth\n    color(\"darkgreen\") {\n        translate([0, 15, -15]) {\n            rotate([90, 0, 0]) {\n                cylinder(h=1, d1=8, d2=5, center=true);\n            }\n        }\n    }\n}\n\n// Energy orbs inside\nmodule energy_orbs() {\n    // Left orb cluster\n    for(i = [1:3]) {\n        color(\"cyan\", 0.8) {\n            translate([\n                -15 + cos(i * 120) * 10,\n                sin(i * 120) * 10,\n                cos(i * 60) * 5\n            ]) {\n                sphere(d=4);\n            }\n        }\n    }\n    \n    // Right orb cluster\n    for(i = [1:3]) {\n        color(\"cyan\", 0.8) {\n            translate([\n                15 + cos(i * 120) * 10,\n                sin(i * 120) * 10,\n                cos(i * 60) * 5\n            ]) {\n                sphere(d=4);\n            }\n        }\n    }\n}\n\n// Create the model\nduosion();",
    "renders": true
  },
  {
    "pokemon": "reuniclus",
    "openscad_code": "// Reuniclus - Realistic Style (Medium Complexity)\n// Designed for 3D printing - approximately 60mm tall\n\n// Main colors\n$body_color = \"#F5F5F5\";\n$inner_color = \"#4A4A4A\";\n$eye_color = \"#00AAFF\";\n$highlight_color = \"#FFFFFF\";\n\n// Scale factor for 3D printing\nscale_factor = 0.3;\n\n// Main body module\nmodule reuniclus_body() {\n    color($body_color) {\n        // Central body - egg shape\n        difference() {\n            scale([1, 1.2, 1.3]) sphere(d=30);\n            translate([0, 0, -15]) cube([35, 35, 30], center=true);\n        }\n        \n        // Top dome\n        translate([0, 0, 19]) \n            scale([1, 1, 0.7]) sphere(d=32);\n    }\n}\n\n// Inner body (dark sphere)\nmodule inner_body() {\n    color($inner_color) {\n        translate([0, 0, 5]) \n            sphere(d=18);\n    }\n}\n\n// Eye module\nmodule eye(x_pos, y_pos, z_pos) {\n    color($eye_color) {\n        translate([x_pos, y_pos, z_pos]) {\n            sphere(d=6);\n            color($highlight_color) {\n                translate([1.5, 1, 2]) \n                    sphere(d=1.5);\n            }\n        }\n    }\n}\n\n// Arms with floating spheres\nmodule arm(x_pos, rot, arm_length) {\n    color($body_color) {\n        translate([x_pos, 0, 10]) {\n            rotate([0, 0, rot]) {\n                // Upper arm\n                translate([-arm_length/2, 0, 0]) \n                    rotate([90, 0, 0]) \n                        cylinder(h=arm_length, d1=8, d2=6, center=true);\n                \n                // Hand sphere\n                translate([-arm_length, 0, 0]) \n                    sphere(d=12);\n                \n                // Fingers (3 small spheres)\n                for(i=[-30:30:60]) {\n                    rotate([0, 0, i]) {\n                        translate([-arm_length-8, 0, 0]) \n                            sphere(d=4);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Ear-like protrusions\nmodule ear(x_pos, rot) {\n    color($body_color) {\n        translate([x_pos, 0, 25]) {\n            rotate([0, 0, rot]) {\n                // Main ear\n                translate([0, 0, 5]) \n                    scale([0.8, 0.3, 1.5]) \n                        sphere(d=12);\n                \n                // Inner ear detail\n                color($inner_color) {\n                    translate([0, 0, 8]) \n                        scale([0.5, 0.2, 1]) \n                            sphere(d=8);\n                }\n            }\n        }\n    }\n}\n\n// Floating orb connections\nmodule connection_orb(x, y, z) {\n    color($body_color) {\n        translate([x, y, z]) \n            sphere(d=5);\n    }\n}\n\n// Main assembly\nscale(scale_factor) {\n    union() {\n        // Body parts\n        reuniclus_body();\n        inner_body();\n        \n        // Eyes\n        eye(-6, -8, 12);\n        eye(6, -8, 12);\n        \n        // Arms\n        arm(15, 45, 25);\n        arm(-15, -45, 25);\n        \n        // Ears\n        ear(10, 30);\n        ear(-10, -30);\n        \n        // Connection orbs between body and arms\n        connection_orb(20, 0, 15);\n        connection_orb(-20, 0, 15);\n        \n        // Additional floating orbs\n        connection_orb(0, 20, 25);\n        connection_orb(0, -20, 25);\n        connection_orb(15, 15, 30);\n        connection_orb(-15, -15, 30);\n    }\n}",
    "renders": true
  },
  {
    "pokemon": "ducklett",
    "openscad_code": "// Ducklett Pokemon - Realistic Style\n// Size: ~70mm tall\n\ncolor(\"LightBlue\") {\n    // Main body\n    union() {\n        // Body sphere\n        translate([0, 0, 30])\n            scale([1.2, 1, 1])\n            sphere(25, $fn=32);\n        \n        // Belly\n        translate([0, -20, 25])\n            scale([0.8, 0.3, 0.8])\n            sphere(20, $fn=32);\n    }\n}\n\n// Head\ncolor(\"LightBlue\") {\n    translate([0, 0, 60])\n        sphere(18, $fn=32);\n}\n\n// Beak\ncolor(\"Orange\") {\n    translate([0, 18, 60])\n        rotate([90, 0, 0])\n        cylinder(h=15, r1=8, r2=6, $fn=16);\n}\n\n// Eyes\nmodule eye(x, y) {\n    translate([x, y, 65]) {\n        color(\"White\")\n            sphere(4, $fn=16);\n        color(\"Black\")\n            translate([2, 0, 2])\n            sphere(2, $fn=16);\n    }\n}\neye(7, 5);\neye(-7, 5);\n\n// Wings\nmodule wing(x) {\n    color(\"LightBlue\") {\n        translate([x, -5, 40])\n            rotate([0, 10, x > 0 ? -20 : 20])\n            scale([0.8, 1.5, 0.3])\n            sphere(15, $fn=16);\n    }\n}\nwing(25);\nwing(-25);\n\n// Feet\nmodule foot(x) {\n    color(\"Orange\") {\n        translate([x, 15, 5])\n            rotate([0, 0, 0])\n            cylinder(h=10, r=5, $fn=8);\n    }\n}\nfoot(10);\nfoot(-10);\n\n// Tail\ncolor(\"LightBlue\") {\n    translate([0, -25, 25])\n        rotate([0, -20, 0])\n        scale([0.5, 1.2, 0.5])\n        cylinder(h=20, r=12, $fn=16);\n}\n\n// Water crest\ncolor(\"MediumBlue\") {\n    for(i=[-2:2]) {\n        translate([i*5, 5, 78])\n            rotate([0, 0, i*10])\n            scale([0.5, 1, 1])\n            cylinder(h=8, r=3, $fn=8);\n    }\n}\n\n// Eyebrow markings\ncolor(\"MediumBlue\") {\n    translate([7, 10, 68])\n        rotate([90, 0, 30])\n        cylinder(h=1, r=3, $fn=8);\n    translate([-7, 10, 68])\n        rotate([90, 0, -30])\n        cylinder(h=1, r=3, $fn=8);\n}\n\n// Wing tips\ncolor(\"MediumBlue\") {\n    translate([30, -5, 45])\n        rotate([0, 10, -20])\n        scale([0.3, 1, 0.2])\n        sphere(8, $fn=16);\n    translate([-30, -5, 45])\n        rotate([0, 10, 20])\n        scale([0.3, 1, 0.2])\n        sphere(8, $fn=16);\n}",
    "renders": true
  },
  {
    "pokemon": "swanna",
    "openscad_code": "// Swanna Pokemon - Realistic Style - Medium Complexity\n// 3D printable model with proper wall thickness and no overhangs\n\n// Color definitions\n$fn = 32;\n\n// Main body module\nmodule swanna_body() {\n    color(\"white\")\n    union() {\n        // Torso (oval shaped body)\n        translate([0, 0, 10])\n        scale([1.2, 1, 1.3])\n        sphere(r=15);\n        \n        // Neck (elongated cylinder)\n        translate([0, -12, 25])\n        rotate([15, 0, 0])\n        cylinder(h=20, r1=6, r2=4);\n        \n        // Head\n        translate([0, -20, 42])\n        scale([0.9, 1.2, 1.1])\n        sphere(r=12);\n    }\n}\n\n// Beak module\nmodule beak() {\n    color(\"lemonchiffon\")\n    translate([0, -32, 40])\n    rotate([-20, 0, 0])\n    scale([1, 2.5, 1])\n    cylinder(h=15, r1=2, r2=0);\n}\n\n// Wings module\nmodule wings() {\n    color(\"white\")\n    union() {\n        // Left wing\n        translate([-18, 0, 15])\n        rotate([0, 0, 45])\n        scale([2, 0.5, 1.2])\n        sphere(r=10);\n        \n        // Wing details\n        for(i = [0:2]) {\n            translate([-25 + i*3, -5, 15])\n            rotate([0, 0, 45])\n            scale([1.5, 0.1, 0.8])\n            color(\"lightblue\")\n            sphere(r=8);\n        }\n        \n        // Right wing (mirrored)\n        mirror([1, 0, 0])\n        translate([-18, 0, 15])\n        rotate([0, 0, 45])\n        scale([2, 0.5, 1.2])\n        sphere(r=10);\n        \n        for(i = [0:2]) {\n            mirror([1, 0, 0])\n            translate([-25 + i*3, -5, 15])\n            rotate([0, 0, 45])\n            scale([1.5, 0.1, 0.8])\n            color(\"lightblue\")\n            sphere(r=8);\n        }\n    }\n}\n\n// Tail module\nmodule tail() {\n    color(\"white\")\n    translate([0, 18, 12])\n    rotate([30, 0, 0])\n    scale([0.8, 2, 0.3])\n    sphere(r=10);\n}\n\n// Eyes module\nmodule eyes() {\n    color(\"black\")\n    union() {\n        // Left eye\n        translate([-5, -25, 44])\n        sphere(r=2);\n        \n        // Eye highlight\n        color(\"white\")\n        translate([-4.5, -26, 45])\n        sphere(r=0.8);\n        \n        // Right eye\n        color(\"black\")\n        translate([5, -25, 44])\n        sphere(r=2);\n        \n        // Eye highlight\n        color(\"white\")\n        translate([5.5, -26, 45])\n        sphere(r=0.8);\n    }\n}\n\n// Legs and feet module\nmodule legs() {\n    color(\"lemonchiffon\")\n    union() {\n        // Left leg\n        translate([-8, 0, 0])\n        cylinder(h=12, r=3);\n        \n        // Left foot\n        translate([-8, 0, -2])\n        scale([1.5, 2, 0.5])\n        sphere(r=6);\n        \n        // Toes\n        for(i = [-1:1]) {\n            translate([-8 + i*3, 4, -2])\n            scale([0.5, 1, 0.3])\n            sphere(r=3);\n        }\n        \n        // Right leg\n        translate([8, 0, 0])\n        cylinder(h=12, r=3);\n        \n        // Right foot\n        translate([8, 0, -2])\n        scale([1.5, 2, 0.5])\n        sphere(r=6);\n        \n        // Toes\n        for(i = [-1:1]) {\n            translate([8 + i*3, 4, -2])\n            scale([0.5, 1, 0.3])\n            sphere(r=3);\n        }\n    }\n}\n\n// Crest module (swanna's head decoration)\nmodule crest() {\n    color(\"red\")\n    union() {\n        // Main crest\n        translate([0, -20, 54])\n        rotate([15, 0, 0])\n        scale([0.3, 1, 2])\n        sphere(r=5);\n        \n        // Crest details\n        for(i = [0:1]) {\n            translate([0, -20 - i*2, 50 + i*3])\n            rotate([15 + i*5, 0, 0])\n            scale([0.25 - i*0.05, 0.8 - i*0.1, 1.5 - i*0.2])\n            sphere(r=4 - i);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Base support for 3D printing\n    translate([0, 0, -5])\n    color(\"white\")\n    cylinder(h=5, r=20);\n    \n    // Main components\n    swanna_body();\n    beak();\n    wings();\n    tail();\n    eyes();\n    legs();\n    crest();\n}",
    "renders": true
  },
  {
    "pokemon": "vanillite",
    "openscad_code": "// Vanillite - Realistic Style, Medium Complexity\n// 3D printable model with proper wall thickness and no overhangs\n\n$fn = 32;\nscale_factor = 0.8;\nbody_height = 60 * scale_factor;\nbody_radius = 25 * scale_factor;\ncone_height = 30 * scale_factor;\nhead_radius = 20 * scale_factor;\n\nmodule vanillite_body() {\n    // Main ice cream body\n    color(\"LightBlue\") {\n        // Lower cone section\n        cylinder(h=cone_height, r1=body_radius, r2=body_radius*0.7, center=false);\n        \n        // Middle section\n        translate([0, 0, cone_height])\n        cylinder(h=body_height*0.4, r=body_radius, center=false);\n        \n        // Upper rounded section\n        translate([0, 0, cone_height + body_height*0.4])\n        sphere(r=head_radius);\n    }\n}\n\nmodule ice_crystals() {\n    // Ice crystal formations on top\n    color(\"LightCyan\") {\n        for(i=[0:120:360]) {\n            rotate([0, 0, i])\n            translate([head_radius*0.7, 0, cone_height + body_height*0.4 + head_radius*0.8])\n            rotate([45, 0, 0])\n            cylinder(h=15*scale_factor, r1=3*scale_factor, r2=0.5*scale_factor, center=false);\n        }\n    }\n}\n\nmodule face() {\n    color(\"DeepSkyBlue\") {\n        // Left eye\n        translate([-head_radius*0.4, -head_radius*0.7, cone_height + body_height*0.4 + head_radius*0.3])\n        sphere(r=4*scale_factor);\n        \n        // Right eye\n        translate([head_radius*0.4, -head_radius*0.7, cone_height + body_height*0.4 + head_radius*0.3])\n        sphere(r=4*scale_factor);\n        \n        // Mouth\n        translate([0, -head_radius*0.9, cone_height + body_height*0.4 + head_radius*0.1])\n        rotate([0, 0, 90])\n        cylinder(h=8*scale_factor, r1=2*scale_factor, r2=2*scale_factor, center=false);\n    }\n}\n\nmodule chevron_pattern() {\n    // Chevron pattern on body\n    color(\"AliceBlue\") {\n        for(level=[0:0.2:0.8]) {\n            translate([0, 0, cone_height + body_height*0.1 + level*body_height*0.3])\n            for(i=[0:60:300]) {\n                rotate([0, 0, i])\n                translate([body_radius*0.8, 0, 0])\n                cube([body_radius*0.4, 2*scale_factor, 1*scale_factor], center=true);\n            }\n        }\n    }\n}\n\nmodule ears() {\n    // Ice crystal ears\n    color(\"LightCyan\") {\n        // Left ear\n        translate([-head_radius*0.6, head_radius*0.3, cone_height + body_height*0.4 + head_radius*0.9])\n        rotate([-30, 0, -20])\n        cylinder(h=12*scale_factor, r1=5*scale_factor, r2=2*scale_factor, center=false);\n        \n        // Right ear\n        translate([head_radius*0.6, head_radius*0.3, cone_height + body_height*0.4 + head_radius*0.9])\n        rotate([-30, 0, 20])\n        cylinder(h=12*scale_factor, r1=5*scale_factor, r2=2*scale_factor, center=false);\n    }\n}\n\nmodule base_support() {\n    // Flat base for 3D printing stability\n    color(\"LightBlue\") {\n        translate([0, 0, -1])\n        cylinder(h=2, r=body_radius*0.7, center=false);\n    }\n}\n\n// Main assembly\nunion() {\n    base_support();\n    vanillite_body();\n    ice_crystals();\n    chevron_pattern();\n    face();\n    ears();\n}",
    "renders": true
  },
  {
    "pokemon": "vanillish",
    "openscad_code": "// Vanillish OpenSCAD Model - Realistic Style, Medium Complexity\n// Size: ~75mm height, 3D printable\n\n// Color definitions\ncolor_ice = [0.8, 0.9, 1.0];\ncolor_blue = [0.2, 0.4, 0.8];\ncolor_shadow = [0.7, 0.8, 0.9];\n\n// Main body\nmodule vanillish_body() {\n    // Upper ice section\n    color(color_ice)\n    translate([0, 0, 30])\n    scale([1, 1, 1.2])\n    sphere(15, $fn=32);\n    \n    // Middle section\n    color(color_ice)\n    translate([0, 0, 15])\n    scale([1.1, 1.1, 1])\n    sphere(12, $fn=32);\n    \n    // Lower section\n    color(color_ice)\n    translate([0, 0, 2])\n    scale([1.2, 1.2, 0.8])\n    sphere(10, $fn=32);\n}\n\n// Ice crystals on head\nmodule ice_crystals() {\n    for(i = [0:5]) {\n        rotate([0, 0, i * 60])\n        translate([10, 0, 45])\n        rotate([30 + i * 10, 0, 0])\n        color(color_ice)\n        scale([0.8, 0.8, 3])\n        sphere(3, $fn=6);\n    }\n}\n\n// Face details\nmodule face() {\n    // Left eye\n    color(color_blue)\n    translate([-6, 12, 35])\n    sphere(2.5, $fn=16);\n    \n    // Right eye\n    color(color_blue)\n    translate([6, 12, 35])\n    sphere(2.5, $fn=16);\n    \n    // Mouth\n    color(color_shadow)\n    translate([0, 8, 30])\n    rotate([15, 0, 0])\n    scale([1, 0.7, 0.5])\n    cylinder(h=2, r=3, $fn=16);\n}\n\n// Decorative ice patterns\nmodule ice_patterns() {\n    // Horizontal ridges\n    for(z = [10:10:40]) {\n        color(color_shadow)\n        translate([0, 0, z])\n        scale([1.1 + (z-10)/50, 1.1 + (z-10)/50, 0.3])\n        sphere(11 + (z-10)/5, $fn=32);\n    }\n    \n    // Vertical crystal lines\n    for(angle = [0:45:315]) {\n        rotate([0, 0, angle])\n        translate([13, 0, 25])\n        rotate([90, 0, 0])\n        color(color_ice)\n        cylinder(h=15, r=1, $fn=8);\n    }\n}\n\n// Base platform for stability\nmodule base() {\n    color(color_shadow)\n    translate([0, 0, -2])\n    cylinder(h=2, r=15, $fn=32);\n}\n\n// Main assembly\nunion() {\n    base();\n    vanillish_body();\n    ice_crystals();\n    face();\n    ice_patterns();\n}",
    "renders": true
  },
  {
    "pokemon": "vanilluxe",
    "openscad_code": "// Vanilluxe - Realistic style, medium complexity\n// 3D printable model with proper wall thickness\n\n// Main parameters\n$fn = 32;\nscale_factor = 0.4;\n\nmodule ice_cream_ball(height, top_radius, bottom_radius) {\n    // Create a rounded ice cream ball shape\n    hull() {\n        translate([0, 0, height/2])\n            sphere(top_radius);\n        translate([0, 0, -height/2])\n            sphere(bottom_radius);\n    }\n}\n\nmodule face_details() {\n    // Eyes\n    color(\"blue\") {\n        translate([-6, -8, 15])\n            sphere(3);\n        translate([6, -8, 15])\n            sphere(3);\n    }\n    \n    // Eye pupils\n    color(\"black\") {\n        translate([-6.5, -9.5, 15.5])\n            sphere(1);\n        translate([6.5, -9.5, 15.5])\n            sphere(1);\n    }\n    \n    // Mouth\n    color(\"black\") {\n        translate([0, -10, 10])\n            rotate([90, 0, 0])\n                cylinder(h=0.5, r1=3, r2=2);\n    }\n}\n\nmodule straw() {\n    // Main straw body\n    color(\"lightblue\") {\n        translate([0, 0, 25])\n            rotate([0, 0, 10])\n                cylinder(h=20, r1=2, r2=2);\n    }\n    \n    // Straw stripes\n    color(\"white\") {\n        for(i = [0:2]) {\n            translate([0, 0, 25 + i*5])\n                rotate([0, 0, 10])\n                    cylinder(h=1, r1=2.5, r2=2.5);\n        }\n    }\n}\n\nmodule ice_crystals() {\n    // Add ice crystal details\n    color(\"lightblue\") {\n        for(i = [0:5]) {\n            rotate([0, 0, i*60])\n                translate([12*cos(i*60), 12*sin(i*60), 5])\n                    rotate([0, 0, i*30])\n                        cube([2, 0.5, 8]);\n        }\n        \n        for(i = [0:4]) {\n            rotate([0, 0, i*72 + 30])\n                translate([10*cos(i*72 + 30), 10*sin(i*72 + 30), -5])\n                    rotate([0, 0, i*36])\n                        cube([1.5, 0.5, 6]);\n        }\n    }\n}\n\nmodule head_ball() {\n    // Top ice cream head\n    color(\"white\") {\n        ice_cream_ball(20, 12, 15);\n        \n        // Scoop texture\n        difference() {\n            ice_cream_ball(20, 12, 15);\n            translate([0, 0, -2])\n                ice_cream_ball(16, 11, 14);\n        }\n    }\n    \n    // Face\n    face_details();\n    \n    // Straw on top\n    straw();\n}\n\nmodule bottom_ball() {\n    // Bottom ice cream head\n    color(\"white\") {\n        translate([0, 0, -25])\n            ice_cream_ball(22, 15, 12);\n        \n        // Scoop texture\n        difference() {\n            translate([0, 0, -25])\n                ice_cream_ball(22, 15, 12);\n            translate([0, 0, -27])\n                ice_cream_ball(18, 14, 11);\n        }\n    }\n    \n    // Second face\n    translate([0, 0, -25]) {\n        color(\"blue\") {\n            translate([-5, -7, 13])\n                sphere(2.5);\n            translate([5, -7, 13])\n                sphere(2.5);\n        }\n        \n        color(\"black\") {\n            translate([-5.5, -8.5, 13.5])\n                sphere(0.8);\n            translate([5.5, -8.5, 13.5])\n                sphere(0.8);\n            \n            translate([0, -9, 9])\n                rotate([90, 0, 0])\n                    cylinder(h=0.5, r1=2.5, r2=2);\n        }\n    }\n}\n\nmodule connecting_ice() {\n    // Ice bridge connecting the two heads\n    color(\"white\") {\n        union() {\n            // Main connecting column\n            cylinder(h=15, r1=6, r2=4);\n            \n            // Side ice formations\n            for(i = [0:3]) {\n                rotate([0, 0, i*90])\n                    translate([5*cos(i*90), 5*sin(i*90), -7])\n                        rotate([0, 0, i*45])\n                            cube([3, 1, 8]);\n            }\n        }\n    }\n}\n\n// Main assembly\nscale([scale_factor, scale_factor, scale_factor]) {\n    union() {\n        // Bottom head\n        bottom_ball();\n        \n        // Connecting ice\n        connecting_ice();\n        \n        // Top head\n        head_ball();\n        \n        // Ice crystals around both heads\n        ice_crystals();\n        translate([0, 0, -25])\n            ice_crystals();\n    }\n}",
    "renders": true
  },
  {
    "pokemon": "deerling",
    "openscad_code": "// OpenSCAD Deerling Pokemon Model\n// Realistic style, medium complexity\n\n// Set colors\ncolor_body = [0.4, 0.7, 0.3];\ncolor_flowers = [1, 0.6, 0.8];\ncolor_ears = [0.5, 0.8, 0.4];\ncolor_eyes = [0.2, 0.2, 0.2];\ncolor_hooves = [0.6, 0.6, 0.5];\ncolor_muzzle = [0.7, 0.9, 0.7];\n\n// Overall scale\nscale_factor = 80;\n\n// Main module\nmodule deerling() {\n    scale([scale_factor/100, scale_factor/100, scale_factor/100]) {\n        union() {\n            // Body\n            color(color_body) body();\n            \n            // Head\n            translate([0, 25, 15]) head();\n            \n            // Legs\n            for(i = [-1, 1]) {\n                translate([i*12, -10, -8]) leg();\n            }\n            for(i = [-1, 1]) {\n                translate([i*10, 10, -8]) leg();\n            }\n            \n            // Tail\n            translate([0, -25, 5]) tail();\n            \n            // Flower decorations\n            for(i = [-1, 1]) {\n                translate([i*8, 25, 20]) flower();\n            }\n        }\n    }\n}\n\n// Body module\nmodule body() {\n    union() {\n        // Main body\n        translate([0, 0, 0])\n            scale([1, 1.5, 0.8])\n            sphere(r=10, $fn=20);\n            \n        // Belly\n        translate([0, 0, -5])\n            scale([0.7, 1.2, 0.5])\n            sphere(r=10, $fn=20);\n    }\n}\n\n// Head module\nmodule head() {\n    union() {\n        // Main head\n        translate([0, 0, 0])\n            scale([0.9, 1, 1])\n            sphere(r=8, $fn=20);\n            \n        // Muzzle\n        color(color_muzzle)\n        translate([0, 8, -2])\n            scale([0.7, 0.8, 0.6])\n            sphere(r=6, $fn=20);\n            \n        // Ears\n        color(color_ears)\n        for(i = [-1, 1]) {\n            translate([i*6, -3, 5]) {\n                rotate([0, i*10, 0])\n                scale([0.3, 0.8, 1.5])\n                cylinder(r=3, h=6, $fn=8);\n            }\n        }\n        \n        // Eyes\n        color(color_eyes)\n        for(i = [-1, 1]) {\n            translate([i*3, 5, 2])\n                sphere(r=1.5, $fn=10);\n        }\n        \n        // Nose\n        translate([0, 11, -1])\n            sphere(r=1.2, $fn=10);\n    }\n}\n\n// Leg module\nmodule leg() {\n    union() {\n        // Upper leg\n        color(color_body)\n        translate([0, 0, 5])\n            scale([0.8, 0.8, 1])\n            cylinder(r=4, h=10, $fn=10);\n            \n        // Lower leg\n        translate([0, 0, 0])\n            cylinder(r=3, h=10, $fn=10);\n            \n        // Hoof\n        color(color_hooves)\n        translate([0, 0, -2])\n            scale([1.2, 1.2, 0.5])\n            cylinder(r=3, h=3, $fn=6);\n    }\n}\n\n// Tail module\nmodule tail() {\n    color(color_body)\n    union() {\n        // Tail base\n        translate([0, 0, 0])\n            sphere(r=4, $fn=10);\n            \n        // Tail extension\n        rotate([20, 0, 0])\n            scale([0.8, 0.8, 2])\n            translate([0, -2, -2])\n            sphere(r=3, $fn=10);\n    }\n}\n\n// Flower module\nmodule flower() {\n    color(color_flowers)\n    union() {\n        // Center\n        translate([0, 0, 0])\n            sphere(r=1.5, $fn=10);\n            \n        // Petals\n        for(i = [0:60:359]) {\n            rotate([0, 0, i])\n            translate([2.5, 0, 0])\n                scale([0.8, 0.3, 0.3])\n                sphere(r=2, $fn=5);\n        }\n    }\n}\n\n// Render the model\ndeerling();",
    "renders": true
  },
  {
    "pokemon": "sawsbuck",
    "openscad_code": "// Sawsbuck (Spring Form) in realistic style\n// Medium complexity OpenSCAD model\n// Approximately 80mm tall\n\n// Colors\ncolor_brown = [139/255, 69/255, 19/255];\ncolor_light_brown = [205/255, 133/255, 63/255];\ncolor_yellow = [255/255, 215/255, 0/255];\ncolor_dark_brown = [101/255, 67/255, 33/255];\ncolor_pink = [255/255, 192/255, 203/255];\ncolor_white = [1, 1, 1];\ncolor_green = [144/255, 238/255, 144/255];\n\n// Main body module\nmodule sawsbuck() {\n    // Body\n    color(color_brown)\n    translate([0, 0, 20])\n    scale([1.2, 0.8, 1.3])\n    sphere(r=15);\n    \n    // Neck\n    color(color_light_brown)\n    translate([0, 15, 35])\n    rotate([30, 0, 0])\n    cylinder(h=12, r1=8, r2=5, $fn=20);\n    \n    // Head\n    color(color_light_brown)\n    translate([0, 18, 48])\n    scale([0.8, 1.2, 1])\n    sphere(r=12);\n    \n    // Snout\n    color(color_light_brown)\n    translate([0, 28, 45])\n    rotate([30, 0, 0])\n    cylinder(h=10, r1=5, r2=3, $fn=16);\n    \n    // Legs\n    for(i=[-1, 1]) {\n        // Front legs\n        color(color_brown)\n        translate([i*12, 10, 0])\n        rotate([0, -i*10, 0])\n        cylinder(h=25, r=4, $fn=12);\n        \n        // Back legs\n        color(color_brown)\n        translate([i*10, -15, 0])\n        rotate([0, i*10, 0])\n        cylinder(h=25, r=4, $fn=12);\n    }\n    \n    // Antlers - left\n    color(color_dark_brown)\n    translate([-10, 15, 55])\n    rotate([0, -20, -30])\n    cylinder(h=20, r1=2, r2=1, $fn=8);\n    \n    // Antlers - right\n    color(color_dark_brown)\n    translate([10, 15, 55])\n    rotate([0, -20, 30])\n    cylinder(h=20, r1=2, r2=1, $fn=8);\n    \n    // Antler branches\n    for(i=[-1, 1]) {\n        color(color_dark_brown)\n        translate([i*12, 12, 65])\n        rotate([30, 0, i*45])\n        cylinder(h=8, r1=1.5, r2=1, $fn=6);\n        \n        color(color_dark_brown)\n        translate([i*12, 10, 68])\n        rotate([45, 0, i*60])\n        cylinder(h=6, r1=1, r2=0.5, $fn=6);\n    }\n    \n    // Ears\n    for(i=[-1, 1]) {\n        color(color_light_brown)\n        translate([i*8, 15, 58])\n        rotate([0, 0, i*20])\n        scale([0.3, 1, 1.5])\n        sphere(r=5);\n    }\n    \n    // Eyes\n    for(i=[-1, 1]) {\n        color(color_dark_brown)\n        translate([i*5, 22, 50])\n        sphere(r=2);\n        \n        color(color_white)\n        translate([i*5.5, 22.5, 51])\n        sphere(r=0.8);\n    }\n    \n    // Nose\n    color(color_dark_brown)\n    translate([0, 32, 46])\n    sphere(r=2);\n    \n    // Flower petals on antlers\n    for(i=[0:5]) {\n        color(color_pink)\n        translate([8*cos(i*60), 12, 65+8*sin(i*60)])\n        rotate([0, 0, i*60])\n        scale([0.3, 1, 0.1])\n        sphere(r=3);\n        \n        color(color_pink)\n        translate([-8*cos(i*60), 12, 65+8*sin(i*60)])\n        rotate([0, 0, -i*60])\n        scale([0.3, 1, 0.1])\n        sphere(r=3);\n    }\n    \n    // Leaf patterns on body\n    for(i=[0:3]) {\n        color(color_green)\n        translate([10*cos(i*90), 0, 25+5*i])\n        rotate([90, 0, i*90])\n        scale([0.5, 1, 0.2])\n        sphere(r=4);\n    }\n    \n    // Tail\n    color(color_yellow)\n    translate([0, -25, 20])\n    rotate([0, 30, 0])\n    scale([0.5, 1, 2])\n    sphere(r=6);\n    \n    // Hooves\n    for(i=[-1, 1]) {\n        for(j=[0, 1]) {\n            color(color_dark_brown)\n            translate([i*12, 10-j*25, 0])\n            cylinder(h=3, r=4.5, $fn=12);\n        }\n    }\n}\n\n// Generate the model\nsawsbuck();",
    "renders": true
  },
  {
    "pokemon": "emolga",
    "openscad_code": "// Emolga OpenSCAD Model\n// Medium complexity, realistic style\n\n// Colors\n$fa = 8;\n$fs = 0.5;\n\nmodule emolga_body() {\n    color([0.95, 0.85, 0.75]) {\n        // Main body - slightly oval\n        translate([0, 0, 15]) \n            scale([1.2, 1, 1.3]) \n                sphere(15);\n    }\n}\n\nmodule emolga_head() {\n    color([0.95, 0.85, 0.75]) {\n        // Head\n        translate([0, 0, 32]) \n            scale([1.1, 0.9, 1]) \n                sphere(12);\n    }\n}\n\nmodule emolga_ears() {\n    // Left ear\n    color([0.6, 0.1, 0.1]) {\n        translate([-10, 8, 38]) {\n            rotate([0, 0, -30]) {\n                scale([0.3, 2.5, 0.3]) \n                    sphere(5);\n            }\n        }\n    }\n    \n    // Right ear\n    color([0.6, 0.1, 0.1]) {\n        translate([10, 8, 38]) {\n            rotate([0, 0, 30]) {\n                scale([0.3, 2.5, 0.3]) \n                    sphere(5);\n            }\n        }\n    }\n    \n    // Yellow ear tips\n    color([1, 0.8, 0]) {\n        translate([-10, 15, 42]) {\n            rotate([0, 0, -30]) {\n                scale([0.4, 0.8, 0.4]) \n                    sphere(3);\n            }\n        }\n        \n        translate([10, 15, 42]) {\n            rotate([0, 0, 30]) {\n                scale([0.4, 0.8, 0.4]) \n                    sphere(3);\n            }\n        }\n    }\n}\n\nmodule emolga_wings() {\n    // Membrane wings\n    color([0.95, 0.85, 0.75]) {\n        // Left wing\n        translate([-18, 0, 22]) {\n            rotate([0, 0, 45]) {\n                scale([2, 0.1, 1.5]) \n                    sphere(8);\n            }\n        }\n        \n        // Right wing\n        translate([18, 0, 22]) {\n            rotate([0, 0, -45]) {\n                scale([2, 0.1, 1.5]) \n                    sphere(8);\n            }\n        }\n    }\n    \n    // Wing membranes (yellow)\n    color([1, 0.8, 0]) {\n        // Left membrane\n        difference() {\n            translate([-25, 0, 22]) {\n                rotate([0, 0, 45]) {\n                    scale([2.3, 0.05, 1.8]) \n                        sphere(7);\n                }\n            }\n            translate([-25, 0, 22]) {\n                rotate([0, 0, 45]) {\n                    scale([1.7, 0.1, 1.2]) \n                        sphere(7);\n                }\n            }\n        }\n        \n        // Right membrane\n        difference() {\n            translate([25, 0, 22]) {\n                rotate([0, 0, -45]) {\n                    scale([2.3, 0.05, 1.8]) \n                        sphere(7);\n                }\n            }\n            translate([25, 0, 22]) {\n                rotate([0, 0, -45]) {\n                    scale([1.7, 0.1, 1.2]) \n                        sphere(7);\n                }\n            }\n        }\n    }\n}\n\nmodule emolga_tail() {\n    // Tail membrane\n    color([0.95, 0.85, 0.75]) {\n        translate([0, -20, 18]) {\n            rotate([0, 0, 0]) {\n                scale([1.2, 0.1, 2]) \n                    sphere(8);\n            }\n        }\n    }\n    \n    // Yellow tail stripes\n    color([1, 0.8, 0]) {\n        for(i = [0:1]) {\n            translate([0, -20 - i*5, 18 + i*3]) {\n                scale([1.3, 0.05, 0.3]) \n                    sphere(7);\n            }\n        }\n    }\n}\n\nmodule emolga_legs() {\n    // Front legs\n    color([0.95, 0.85, 0.75]) {\n        // Left front leg\n        translate([-8, 5, 8]) {\n            rotate([0, 0, 15]) {\n                cylinder(h=12, r=3, $fn=8);\n            }\n        }\n        \n        // Right front leg\n        translate([8, 5, 8]) {\n            rotate([0, 0, -15]) {\n                cylinder(h=12, r=3, $fn=8);\n            }\n        }\n    }\n    \n    // Back legs\n    color([0.95, 0.85, 0.75]) {\n        // Left back leg\n        translate([-6, -10, 5]) {\n            rotate([0, 0, 30]) {\n                cylinder(h=10, r=3, $fn=8);\n            }\n        }\n        \n        // Right back leg\n        translate([6, -10, 5]) {\n            rotate([0, 0, -30]) {\n                cylinder(h=10, r=3, $fn=8);\n            }\n        }\n    }\n    \n    // Feet (yellow)\n    color([1, 0.8, 0]) {\n        // Front feet\n        translate([-8, 5, 0]) sphere(3);\n        translate([8, 5, 0]) sphere(3);\n        \n        // Back feet\n        translate([-6, -10, 0]) sphere(3);\n        translate([6, -10, 0]) sphere(3);\n    }\n}\n\nmodule emolga_face() {\n    // Eyes\n    color([0, 0, 0]) {\n        // Left eye\n        translate([-4, 8, 38]) {\n            scale([0.8, 1, 0.5]) \n                sphere(3);\n        }\n        \n        // Right eye\n        translate([4, 8, 38]) {\n            scale([0.8, 1, 0.5]) \n                sphere(3);\n        }\n    }\n    \n    // Eye highlights\n    color([1, 1, 1]) {\n        translate([-4.5, 8.5, 39]) sphere(0.8);\n        translate([3.5, 8.5, 39]) sphere(0.8);\n    }\n    \n    // Nose\n    color([0, 0, 0]) {\n        translate([0, 10, 36]) sphere(1);\n    }\n    \n    // Mouth\n    color([0.3, 0, 0]) {\n        translate([0, 12, 34]) {\n            scale([0.8, 0.3, 0.2]) \n                sphere(2);\n        }\n    }\n}\n\nmodule emolga_markings() {\n    // Yellow cheek patches\n    color([1, 0.8, 0]) {\n        translate([-7, 10, 32]) sphere(3);\n        translate([7, 10, 32]) sphere(3);\n    }\n    \n    // Body stripes\n    color([0.6, 0.1, 0.1]) {\n        for(i = [0:2]) {\n            translate([0, 5 - i*8, 20 - i*2]) {\n                scale([1.4, 0.3, 0.8]) \n                    sphere(3);\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    emolga_body();\n    emolga_head();\n    emolga_ears();\n    emolga_wings();\n    emolga_tail();\n    emolga_legs();\n    emolga_face();\n    emolga_markings();\n}",
    "renders": true
  },
  {
    "pokemon": "karrablast",
    "openscad_code": "// Karrablast Pokemon - Realistic Style, Medium Complexity\n// Approx. 80mm tall\n\n// Colors\n$fa = 1;\n$fs = 0.4;\n\nmodule karrablast() {\n    color([0.2, 0.2, 0.9]) {\n        // Main body\n        union() {\n            // Torso\n            translate([0, 0, 20]) {\n                scale([1, 1.2, 1.5])\n                    sphere(15);\n            }\n            \n            // Head\n            translate([0, 0, 40]) {\n                scale([1.1, 1, 1.3])\n                    sphere(12);\n            }\n            \n            // Back shell\n            translate([0, -8, 30]) {\n                rotate([90, 0, 0])\n                    cylinder(h=20, r1=18, r2=22);\n            }\n            \n            // Tail spike\n            translate([0, -20, 25]) {\n                rotate([90, 0, 0])\n                    cylinder(h=15, r1=8, r2=0);\n            }\n        }\n        \n        // Eyes\n        color([0.9, 0.9, 0.1]) {\n            // Left eye\n            translate([-8, 5, 45]) {\n                scale([0.8, 0.5, 0.3])\n                    sphere(5);\n            }\n            \n            // Right eye\n            translate([8, 5, 45]) {\n                scale([0.8, 0.5, 0.3])\n                    sphere(5);\n            }\n        }\n        \n        // Pupils\n        color([0, 0, 0]) {\n            translate([-8, 7, 45]) {\n                scale([0.3, 0.3, 0.1])\n                    sphere(5);\n            }\n            translate([8, 7, 45]) {\n                scale([0.3, 0.3, 0.1])\n                    sphere(5);\n            }\n        }\n        \n        // Mouth\n        color([0.3, 0.1, 0.1]) {\n            translate([0, 10, 35]) {\n                rotate([90, 0, 0])\n                    cylinder(h=0.5, r1=6, r2=4);\n            }\n        }\n        \n        // Horns\n        color([0.8, 0.8, 0.8]) {\n            // Left horn\n            translate([-10, 0, 52]) {\n                rotate([-30, 0, -30])\n                    cylinder(h=15, r1=3, r2=2);\n            }\n            \n            // Right horn\n            translate([10, 0, 52]) {\n                rotate([-30, 0, 30])\n                    cylinder(h=15, r1=3, r2=2);\n            }\n        }\n        \n        // Legs\n        for(i = [-1, 1]) {\n            // Front legs\n            translate([i * 12, 8, 15]) {\n                rotate([0, 0, i * 10])\n                    cylinder(h=12, r=4);\n            }\n            \n            // Back legs\n            translate([i * 10, -12, 15]) {\n                rotate([0, 0, i * -10])\n                    cylinder(h=12, r=4);\n            }\n        }\n        \n        // Arms\n        color([0.2, 0.2, 0.9]) {\n            for(i = [-1, 1]) {\n                translate([i * 15, 0, 25]) {\n                    rotate([0, 0, i * -45])\n                        cylinder(h=10, r=3);\n                }\n            }\n        }\n        \n        // Shell details\n        color([0.9, 0.9, 0.9]) {\n            translate([0, -12, 35]) {\n                rotate([90, 0, 0])\n                    cylinder(h=1, r=20);\n            }\n            \n            // Shell spikes\n            for(angle = [0:60:359]) {\n                rotate([0, 0, angle])\n                    translate([15, -12, 35]) {\n                        rotate([90, 0, 0])\n                            cylinder(h=5, r1=2, r2=0);\n                    }\n            }\n        }\n        \n        // Belly marking\n        color([0.9, 0.9, 0.9]) {\n            translate([0, 5, 25]) {\n                scale([0.8, 0.6, 0.1])\n                    sphere(10);\n            }\n        }\n    }\n}\n\n// Create the model\nkarrablast();",
    "renders": true
  },
  {
    "pokemon": "escavalier",
    "openscad_code": "// Escavalier - Realistic Style, Medium Complexity\n// Size: ~80mm tall\n\n$fn = 32;\nthickness = 2;\n\nmodule helmet() {\n    color([0.7, 0.7, 0.7]) {\n        // Main helmet dome\n        translate([0, 0, 35]) sphere(d = 30);\n        \n        // Helmet extensions\n        translate([0, 0, 25]) cylinder(h = 15, d1 = 25, d2 = 20);\n        \n        // Helmet spikes\n        for(i = [0:5]) {\n            rotate([0, 0, i * 60]) \n            translate([12, 0, 45]) \n            rotate([90, 0, 0]) \n            cylinder(h = 8, d1 = 5, d2 = 2);\n        }\n    }\n}\n\nmodule body() {\n    color([0.4, 0.2, 0.1]) {\n        // Main body\n        translate([0, 0, 15]) cube([25, 15, 25], center = true);\n        \n        // Chest plate\n        translate([0, 8, 15]) cube([20, 2, 20], center = true);\n        \n        // Abdomen details\n        translate([0, -6, 10]) cube([18, 2, 15], center = true);\n    }\n}\n\nmodule arms() {\n    color([0.7, 0.7, 0.7]) {\n        // Left arm with lance\n        translate([-15, 0, 20]) \n        rotate([0, 0, -30]) {\n            // Upper arm\n            cylinder(h = 12, d = 6);\n            \n            // Lower arm/lance\n            translate([0, 0, -15]) \n            cylinder(h = 30, d1 = 5, d2 = 3);\n            \n            // Lance tip\n            translate([0, 0, -20]) \n            cone(h = 5, d1 = 3, d2 = 0);\n        }\n        \n        // Right arm with lance\n        translate([15, 0, 20]) \n        rotate([0, 0, 30]) {\n            // Upper arm\n            cylinder(h = 12, d = 6);\n            \n            // Lower arm/lance\n            translate([0, 0, -15]) \n            cylinder(h = 30, d1 = 5, d2 = 3);\n            \n            // Lance tip\n            translate([0, 0, -20]) \n            cone(h = 5, d1 = 3, d2 = 0);\n        }\n    }\n}\n\nmodule legs() {\n    color([0.4, 0.2, 0.1]) {\n        // Left leg\n        translate([-8, 0, 0]) {\n            cylinder(h = 15, d = 8);\n            translate([0, 0, -10]) sphere(d = 10);\n        }\n        \n        // Right leg\n        translate([8, 0, 0]) {\n            cylinder(h = 15, d = 8);\n            translate([0, 0, -10]) sphere(d = 10);\n        }\n    }\n}\n\nmodule face() {\n    color([0.9, 0.9, 0.9]) {\n        // Eye holes\n        translate([-5, 8, 35]) sphere(d = 3);\n        translate([5, 8, 35]) sphere(d = 3);\n        \n        // Mouth slit\n        translate([0, 3, 30]) cube([8, 2, 1], center = true);\n    }\n}\n\nmodule cape() {\n    color([0.8, 0.8, 0.8]) {\n        // Back cape\n        translate([0, -10, 20]) \n        rotate([0, 10, 0]) \n        cube([30, 2, 40], center = true);\n        \n        // Cape details\n        for(i = [-3:3]) {\n            translate([i * 4, -11, 20]) \n            cube([2, 1, 30], center = true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    helmet();\n    body();\n    arms();\n    legs();\n    face();\n    cape();\n}\n\n// Base stand for stability\ntranslate([0, 0, -12]) \ncolor([0.3, 0.3, 0.3]) \ncylinder(h = 2, d = 40);",
    "renders": true
  },
  {
    "pokemon": "foongus",
    "openscad_code": "// Realistic Foongus Pokemon - OpenSCAD\n// Medium complexity model with 3D printing considerations\n\n// Color definitions\ncap_color = [0.82, 0.16, 0.16];      // Red cap\nstem_color = [0.90, 0.90, 0.90];     // White stem\nspot_color = [1, 1, 1];              // White spots\neye_color = [0.1, 0.1, 0.1];         // Black eyes\nmouth_color = [0.3, 0.1, 0.1];       // Dark mouth\n\n// Main module\nmodule foongus() {\n    union() {\n        // Cap with spots\n        translate([0, 0, 35]) {\n            color(cap_color) {\n                // Main cap dome\n                scale([1, 1, 0.6]) sphere(d = 50, $fn = 64);\n                \n                // Cap underside\n                translate([0, 0, -3]) {\n                    difference() {\n                        cylinder(h = 6, r1 = 25, r2 = 25, $fn = 32);\n                        cylinder(h = 7, r1 = 20, r2 = 20, $fn = 32);\n                    }\n                }\n            }\n            \n            // White spots on cap\n            color(spot_color) {\n                translate([0, 18, 10]) scale([1, 1, 0.3]) sphere(d = 8, $fn = 16);\n                translate([15, -10, 10]) scale([1, 1, 0.3]) sphere(d = 6, $fn = 16);\n                translate([-15, -10, 10]) scale([1, 1, 0.3]) sphere(d = 7, $fn = 16);\n                translate([0, -15, 10]) scale([1, 1, 0.3]) sphere(d = 5, $fn = 16);\n            }\n        }\n        \n        // Stem body\n        color(stem_color) {\n            translate([0, 0, 10]) {\n                // Main stem\n                cylinder(h = 30, r1 = 12, r2 = 8, $fn = 32);\n                \n                // Stem base flare\n                translate([0, 0, -5]) {\n                    cylinder(h = 5, r1 = 15, r2 = 12, $fn = 32);\n                }\n            }\n        }\n        \n        // Facial features\n        translate([0, 0, 20]) {\n            // Eyes\n            color(eye_color) {\n                translate([5, 7, 0]) sphere(d = 4, $fn = 16);\n                translate([-5, 7, 0]) sphere(d = 4, $fn = 16);\n            }\n            \n            // Mouth\n            color(mouth_color) {\n                translate([0, 0, -2]) {\n                    rotate([90, 0, 0]) {\n                        cylinder(h = 2, r1 = 3, r2 = 3, $fn = 16);\n                    }\n                }\n            }\n        }\n        \n        // Gills underneath cap\n        translate([0, 0, 30]) {\n            color([0.7, 0.7, 0.7]) {\n                difference() {\n                    cylinder(h = 3, r1 = 22, r2 = 22, $fn = 32);\n                    // Create gill pattern\n                    for(i = [0:15]) {\n                        rotate([0, 0, i * 22.5]) {\n                            translate([0, 11, 0]) cube([2, 22, 4], center = true);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Render the model\nfoongus();",
    "renders": true
  },
  {
    "pokemon": "amoonguss",
    "openscad_code": "// Amoonguss in realistic style - medium complexity\n// 3D printable design with proper wall thickness\n\n// Main parameters\nbody_radius = 20;\nbody_height = 35;\ncap_height = 15;\ncap_radius = 25;\nstem_radius = 8;\nstem_height = 10;\ntotal_height = body_height + stem_height + cap_height;\n\n// Colors\ncap_color = [0.6, 0.2, 0.2];    // Red cap\nbody_color = [0.9, 0.9, 0.8];   // Off-white body\nspot_color = [0.1, 0.1, 0.1];   // Dark spots\n\n// Main module\nmodule amoonguss() {\n    // Cap with stem\n    translate([0, 0, body_height + stem_height]) {\n        // Stem\n        color(body_color)\n        cylinder(h=stem_height, r=stem_radius, $fn=16);\n        \n        // Cap\n        color(cap_color)\n        difference() {\n            cylinder(h=cap_height, r=cap_radius, $fn=32);\n            // Cap bottom indent\n            translate([0, 0, -1])\n            cylinder(h=cap_height/2, r=cap_radius-5, $fn=32);\n        }\n    }\n    \n    // Body\n    color(body_color)\n    difference() {\n        // Main body sphere\n        sphere(r=body_radius, $fn=32);\n        \n        // Flat bottom\n        translate([0, 0, -body_radius-1])\n        cube([body_radius*2, body_radius*2, body_radius*2], center=true);\n    }\n    \n    // Pokeball spots on cap\n    translate([0, 0, body_height + stem_height + cap_height/2]) {\n        for(i=[0:2]) {\n            rotate([0, 0, i*120])\n            translate([cap_radius*0.7, 0, 0])\n            color(spot_color)\n            sphere(r=3, $fn=16);\n        }\n    }\n    \n    // Eyes\n    translate([0, body_radius-5, body_height/2]) {\n        // Left eye\n        translate([-8, 0, 0])\n        color(spot_color)\n        sphere(r=4, $fn=16);\n        \n        // Right eye\n        translate([8, 0, 0])\n        color(spot_color)\n        sphere(r=4, $fn=16);\n    }\n    \n    // Mouth\n    translate([0, body_radius-2, body_height/2-5])\n    rotate([90, 0, 0])\n    color(spot_color)\n    cylinder(h=0.5, r1=6, r2=3, $fn=16);\n    \n    // Arms (mushroom gills)\n    module arm(angle) {\n        rotate([0, 0, angle])\n        translate([body_radius-2, 0, body_height/2-5])\n        rotate([0, 90, 0])\n        color(body_color)\n        difference() {\n            cylinder(h=15, r=4, $fn=16);\n            translate([0, 0, -1])\n            cylinder(h=17, r=2, $fn=16);\n        }\n    }\n    \n    arm(45);\n    arm(-45);\n    arm(135);\n    arm(-135);\n}\n\n// Base for stability\nmodule base() {\n    color([0.3, 0.3, 0.3])\n    translate([0, 0, -2])\n    cylinder(h=2, r=30, $fn=32);\n}\n\n// Assembly\nunion() {\n    amoonguss();\n    base();\n}\n\n// Scale for 3D printing (total height ~80mm)\nscale(80/total_height) {\n    union() {\n        amoonguss();\n        base();\n    }\n}",
    "renders": true
  },
  {
    "pokemon": "frillish",
    "openscad_code": "// Frillish Pokemon - Realistic Style, Medium Complexity\n// Designed for 3D printing with no overhangs\n\n// Colors\n$fn = 32;\nbody_color = [0.5, 0.6, 0.8]; // Light blue\nfrill_color = [0.3, 0.4, 0.7]; // Darker blue\neye_color = [0.9, 0.9, 0.1]; // Yellow\neye_pupil = [0.2, 0.2, 0.2]; // Black\ntentacle_color = [0.4, 0.5, 0.8]; // Medium blue\n\n// Main body\nmodule body() {\n    color(body_color)\n    union() {\n        // Main jellyfish-like body\n        translate([0, 0, 20])\n        sphere(d = 30);\n        \n        // Bottom dome\n        translate([0, 0, 5])\n        sphere(d = 28);\n        \n        // Neck connector\n        translate([0, 0, 10])\n        cylinder(h = 15, d1 = 20, d2 = 25);\n    }\n}\n\n// Frill collar\nmodule frill_collar() {\n    color(frill_color)\n    union() {\n        for (i = [0:15:345]) {\n            rotate([0, 0, i])\n            translate([0, 0, 32])\n            rotate([90, 0, 0])\n            cylinder(h = 20, d1 = 4, d2 = 2);\n        }\n    }\n}\n\n// Eyes\nmodule eyes() {\n    union() {\n        // Left eye\n        translate([-10, 12, 25])\n        color(eye_color)\n        sphere(d = 8);\n        \n        translate([-10, 13, 26])\n        color(eye_pupil)\n        sphere(d = 4);\n        \n        // Right eye\n        translate([10, 12, 25])\n        color(eye_color)\n        sphere(d = 8);\n        \n        translate([10, 13, 26])\n        color(eye_pupil)\n        sphere(d = 4);\n    }\n}\n\n// Crown-like head features\nmodule crown() {\n    color(frill_color)\n    union() {\n        // Central spike\n        translate([0, -5, 40])\n        rotate([90, 0, 0])\n        cylinder(h = 15, d1 = 8, d2 = 0);\n        \n        // Side spikes\n        for (i = [-30, 30]) {\n            rotate([0, 0, i])\n            translate([0, -5, 40])\n            rotate([90, 0, 0])\n            cylinder(h = 12, d1 = 6, d2 = 0);\n        }\n    }\n}\n\n// Tentacles\nmodule tentacles() {\n    color(tentacle_color)\n    union() {\n        // Main tentacles\n        for (i = [0:45:315]) {\n            rotate([0, 0, i])\n            translate([0, 0, 5])\n            rotate([90, 0, 0])\n            cylinder(h = 40, d1 = 8, d2 = 4);\n        }\n        \n        // Secondary tentacles\n        for (i = [22:45:292]) {\n            rotate([0, 0, i])\n            translate([0, 0, 3])\n            rotate([90, 0, 0])\n            cylinder(h = 35, d1 = 6, d2 = 3);\n        }\n    }\n}\n\n// Mouth\nmodule mouth() {\n    color([0.1, 0.1, 0.1])\n    translate([0, 18, 20])\n    rotate([90, 0, 0])\n    cylinder(h = 2, d = 8);\n}\n\n// Assemble the Frillish\nunion() {\n    body();\n    frill_collar();\n    crown();\n    eyes();\n    mouth();\n    tentacles();\n}",
    "renders": true
  },
  {
    "pokemon": "jellicent",
    "openscad_code": "// Jellicent - Realistic Style\n// Medium complexity OpenSCAD model\n\n// Color definitions\n$fn = 32;\n\n// Main body - jellyfish bell shape\nmodule body() {\n    color(\"#4A90E2\") {\n        union() {\n            // Main bell\n            translate([0, 0, 20]) {\n                scale([1, 1, 0.6]) {\n                    sphere(d = 50);\n                }\n            }\n            \n            // Bottom frill\n            difference() {\n                cylinder(h = 15, d1 = 45, d2 = 55);\n                translate([0, 0, 5]) {\n                    cylinder(h = 15, d1 = 35, d2 = 45);\n                }\n            }\n        }\n    \n        // Crown-like top\n        for(i = [0:5:360]) {\n            rotate([0, 0, i]) {\n                translate([0, 22, 35]) {\n                    rotate([110, 0, 0]) {\n                        scale([0.3, 0.3, 1]) {\n                            cylinder(h = 15, d = 8);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Face mask\nmodule face_mask() {\n    color(\"#F5F5DC\") {\n        translate([0, 0, 10]) {\n            scale([1.1, 0.9, 0.5]) {\n                sphere(d = 35);\n            }\n        }\n        \n        // Eye sockets\n        for(x = [-12, 12]) {\n            translate([x, -5, 15]) {\n                scale([0.8, 1, 0.3]) {\n                    sphere(d = 12);\n                }\n            }\n        }\n        \n        // Mouth area\n        translate([0, 10, 8]) {\n            scale([1.2, 0.6, 0.3]) {\n                sphere(d = 20);\n            }\n        }\n    }\n}\n\n// Eyes\nmodule eyes() {\n    color(\"#FF0000\") {\n        for(x = [-12, 12]) {\n            translate([x, -5, 18]) {\n                sphere(d = 8);\n            }\n            translate([x, -5, 20]) {\n                sphere(d = 4);\n            }\n        }\n    }\n}\n\n// Mouth\nmodule mouth() {\n    color(\"#8B0000\") {\n        translate([0, 10, 5]) {\n            rotate([90, 0, 0]) {\n                cylinder(h = 2, d = 15);\n            }\n        }\n    }\n}\n\n// Tentacles\nmodule tentacles() {\n    color(\"#4A90E2\") {\n        for(i = [0:45:315]) {\n            rotate([0, 0, i]) {\n                translate([0, 25, 0]) {\n                    rotate([80, 0, 0]) {\n                        cylinder(h = 40, d = 6);\n                    }\n                }\n            }\n        }\n        \n        // Inner tentacles\n        for(i = [22.5:45:315]) {\n            rotate([0, 0, i]) {\n                translate([0, 20, 0]) {\n                    rotate([85, 0, 0]) {\n                        cylinder(h = 35, d = 4);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Decorative markings\nmodule markings() {\n    color(\"#E6E6FA\") {\n        // Top crown pattern\n        for(i = [0:60:300]) {\n            rotate([0, 0, i]) {\n                translate([0, 15, 30]) {\n                    scale([0.5, 0.1, 0.5]) {\n                        sphere(d = 20);\n                    }\n                }\n            }\n        }\n        \n        // Face marks\n        translate([0, -8, 15]) {\n            scale([1, 0.3, 0.1]) {\n                sphere(d = 25);\n            }\n        }\n    }\n}\n\n// Assembly\nbody();\nface_mask();\neyes();\nmouth();\ntentacles();\nmarkings();",
    "renders": true
  },
  {
    "pokemon": "alomomola",
    "openscad_code": "// Alomomola - Realistic Style, Medium Complexity\n// Size: ~80mm wide\n\n$fn = 48;\n\nmodule alomomola() {\n    color([0.9, 0.4, 0.5]) {\n        // Main body - elliptical fish shape\n        union() {\n            // Main body shell\n            scale([1.2, 1, 0.6]) sphere(r = 30);\n            \n            // Top dorsal ridge\n            for(i = [-20:5:20]) {\n                translate([i, 0, 18]) \n                    scale([0.8, 0.3, 0.3]) sphere(r = 5);\n            }\n            \n            // Front fins - wing-like\n            translate([-25, 0, 0]) rotate([0, 90, 0]) \n                scale([1, 0.3, 1.5]) cylinder(h = 35, r1 = 15, r2 = 5);\n            translate([25, 0, 0]) rotate([0, -90, 0]) \n                scale([1, 0.3, 1.5]) cylinder(h = 35, r1 = 15, r2 = 5);\n            \n            // Rear tail extension\n            translate([0, -35, -5]) \n                scale([0.8, 1.2, 0.4]) sphere(r = 20);\n            \n            // Eye sockets\n            difference() {\n                // Left eye\n                translate([-10, 20, 12]) {\n                    color([1, 1, 1]) sphere(r = 6);\n                    color([0.2, 0.2, 0.4]) \n                        translate([0, 0, 4]) sphere(r = 4);\n                    color([0, 0, 0]) \n                        translate([0, 0, 5]) sphere(r = 2);\n                }\n                \n                // Right eye\n                translate([10, 20, 12]) {\n                    color([1, 1, 1]) sphere(r = 6);\n                    color([0.2, 0.2, 0.4]) \n                        translate([0, 0, 4]) sphere(r = 4);\n                    color([0, 0, 0]) \n                        translate([0, 0, 5]) sphere(r = 2);\n                }\n            }\n            \n            // Pink markings pattern\n            color([0.95, 0.5, 0.6]) {\n                // Top fin markings\n                for(x = [-15:10:15]) {\n                    translate([x, 0, 20]) \n                        scale([1, 0.5, 0.5]) sphere(r = 3);\n                }\n                \n                // Side markings\n                for(y = [-15:10:15]) {\n                    translate([-15, y, 0]) \n                        scale([0.5, 1, 0.5]) sphere(r = 2);\n                    translate([15, y, 0]) \n                        scale([0.5, 1, 0.5]) sphere(r = 2);\n                }\n            }\n            \n            // Mouth - small curved opening\n            difference() {\n                translate([0, 25, 2]) \n                    scale([1, 0.3, 0.5]) sphere(r = 8);\n                translate([0, 27, 2]) \n                    cube([16, 6, 6], center = true);\n            }\n            \n            // Ventral fins\n            translate([-15, -25, -15]) \n                rotate([0, 30, 0]) scale([1, 0.3, 0.5]) cylinder(h = 12, r1 = 6, r2 = 3);\n            translate([15, -25, -15]) \n                rotate([0, -30, 0]) scale([1, 0.3, 0.5]) cylinder(h = 12, r1 = 6, r2 = 3);\n            \n            // Heart-shaped patterns on fins\n            color([0.8, 0.3, 0.4]) {\n                // Left fin heart\n                translate([-35, 0, 0]) rotate([0, 90, 0]) {\n                    scale([0.5, 0.5, 0.5]) {\n                        sphere(r = 5);\n                        translate([5, 0, 0]) sphere(r = 5);\n                        translate([2.5, 0, 5]) sphere(r = 5);\n                    }\n                }\n                \n                // Right fin heart\n                translate([35, 0, 0]) rotate([0, -90, 0]) {\n                    scale([0.5, 0.5, 0.5]) {\n                        sphere(r = 5);\n                        translate([-5, 0, 0]) sphere(r = 5);\n                        translate([-2.5, 0, 5]) sphere(r = 5);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Base for 3D printing\ncolor([0.7, 0.7, 0.7]) {\n    translate([0, -45, -20]) \n        cube([80, 10, 2], center = true);\n}\n\n// Main assembly\nalomomola();",
    "renders": true
  },
  {
    "pokemon": "joltik",
    "openscad_code": "// Realistic Joltik Pokemon - OpenSCAD\n// Medium complexity 3D printable model\n\n// Main parameters\nscale_factor = 1;\nbody_size = 50 * scale_factor;\nleg_length = 15 * scale_factor;\neye_size = 4 * scale_factor;\near_length = 8 * scale_factor;\n\n// Colors\nbody_color = \"#4A4A4A\";\neye_color = \"#00AAFF\";\nmouth_color = \"#222222\";\naccent_color = \"#FFFF00\";\n\n// Body sphere with slight oval shape\nmodule body() {\n    color(body_color)\n    union() {\n        // Main body\n        scale([1, 1.2, 0.9])\n        sphere(d=body_size, $fn=50);\n        \n        // Mouth indentation\n        translate([0, -body_size/2.5, -body_size/4])\n        rotate([0, 0, 0])\n        color(mouth_color)\n        sphere(d=body_size/3, $fn=30);\n    }\n}\n\n// Eye module\nmodule eye(x_pos, y_pos) {\n    translate([x_pos, y_pos, body_size/3])\n    color(eye_color)\n    union() {\n        // Main eye sphere\n        sphere(d=eye_size, $fn=20);\n        \n        // Pupil\n        translate([0, 0, eye_size/2])\n        color(\"#000000\")\n        sphere(d=eye_size/2, $fn=15);\n        \n        // Highlight\n        translate([eye_size/4, eye_size/4, eye_size/1.8])\n        color(\"#FFFFFF\")\n        sphere(d=eye_size/4, $fn=10);\n    }\n}\n\n// Ear module\nmodule ear(x_pos) {\n    translate([x_pos, body_size/2, body_size/3])\n    rotate([0, 30, 0])\n    union() {\n        // Main ear\n        color(body_color)\n        scale([0.3, 1, 0.3])\n        cylinder(h=ear_length, d=body_size/8, $fn=20);\n        \n        // Yellow tip\n        translate([0, ear_length/2, 0])\n        color(accent_color)\n        scale([0.25, 0.5, 0.25])\n        cylinder(h=ear_length/3, d=body_size/8, $fn=20);\n    }\n}\n\n// Leg module\nmodule leg(x_pos, y_pos, z_pos, angle) {\n    translate([x_pos, y_pos, z_pos])\n    rotate([90, angle, 0])\n    color(body_color)\n    union() {\n        // Upper leg segment\n        cylinder(h=leg_length/2, d=body_size/15, $fn=12);\n        \n        // Joint\n        translate([0, 0, leg_length/2])\n        sphere(d=body_size/12, $fn=12);\n        \n        // Lower leg segment\n        translate([0, 0, leg_length/2])\n        cylinder(h=leg_length/2, d=body_size/20, $fn=12);\n        \n        // Foot\n        translate([0, 0, leg_length])\n        scale([1, 0.5, 0.3])\n        sphere(d=body_size/10, $fn=12);\n    }\n}\n\n// Yellow accent spots\nmodule accent_spot(x, y, z, size) {\n    translate([x, y, z])\n    color(accent_color)\n    sphere(d=size, $fn=20);\n}\n\n// Assembly\nunion() {\n    body();\n    \n    // Eyes\n    eye(-body_size/4, -body_size/3);\n    eye(body_size/4, -body_size/3);\n    \n    // Ears\n    ear(-body_size/3);\n    ear(body_size/3);\n    \n    // Legs - 4 main legs\n    leg(-body_size/3, body_size/4, -body_size/3, 30);\n    leg(body_size/3, body_size/4, -body_size/3, -30);\n    leg(-body_size/3, -body_size/4, -body_size/3, 30);\n    leg(body_size/3, -body_size/4, -body_size/3, -30);\n    \n    // Additional smaller legs (Joltik has 8 legs)\n    leg(-body_size/2.5, 0, -body_size/3.5, 45);\n    leg(body_size/2.5, 0, -body_size/3.5, -45);\n    leg(0, body_size/3, -body_size/3.5, 15);\n    leg(0, -body_size/3, -body_size/3.5, -15);\n    \n    // Yellow accent spots on body\n    accent_spot(body_size/3, body_size/4, 0, body_size/10);\n    accent_spot(-body_size/3, body_size/4, 0, body_size/10);\n    accent_spot(0, body_size/5, body_size/4, body_size/12);\n    accent_spot(body_size/4, 0, -body_size/4, body_size/15);\n    accent_spot(-body_size/4, 0, -body_size/4, body_size/15);\n    accent_spot(0, -body_size/5, -body_size/5, body_size/15);\n}",
    "renders": true
  },
  {
    "pokemon": "galvantula",
    "openscad_code": "// Galvantula - Electric/Bug type Pokemon\n// Realistic style, medium complexity\n\nmodule leg(segment, angle) {\n    rotate([0, 0, angle]) {\n        translate([segment == 1 ? 0 : 8, 0, segment == 1 ? 0 : -4]) {\n            color([0.2, 0.2, 0.2]) {\n                if (segment == 1) {\n                    rotate([0, 90, 0]) cylinder(h=8, r=2, $fn=8);\n                } else {\n                    rotate([30, 0, 0]) cylinder(h=10, r=1.5, $fn=8);\n                }\n            }\n        }\n    }\n}\n\nmodule eye() {\n    difference() {\n        color([0.9, 0.9, 0.1]) sphere(r=3, $fn=16);\n        translate([0, 0, 2.5]) color([0, 0, 0]) cylinder(h=3, r1=1.5, r2=0, $fn=8);\n    }\n}\n\nmodule body() {\n    // Main body\n    color([0.8, 0.8, 0.8]) {\n        sphere(r=12, $fn=32);\n    }\n    \n    // Blue abdomen pattern\n    color([0.2, 0.3, 0.8]) {\n        translate([0, -15, 0]) {\n            scale([1.2, 1.5, 1]) sphere(r=10, $fn=32);\n        }\n    }\n    \n    // Yellow stripes\n    color([0.9, 0.9, 0.1]) {\n        for (i = [-1, 0, 1]) {\n            translate([i * 6, -10, 0]) rotate([0, 90, 0]) cylinder(h=2, r=10, $fn=3);\n        }\n    }\n}\n\nmodule mandibles() {\n    color([0.3, 0.3, 0.3]) {\n        translate([5, 8, -5]) rotate([45, 0, 30]) cylinder(h=8, r1=2, r2=1, $fn=6);\n        translate([-5, 8, -5]) rotate([45, 0, -30]) cylinder(h=8, r1=2, r2=1, $fn=6);\n    }\n}\n\n// Main assembly\nunion() {\n    // Body\n    body();\n    \n    // Head\n    translate([0, 15, 5]) {\n        color([0.8, 0.8, 0.8]) sphere(r=8, $fn=24);\n        \n        // Eyes\n        translate([4, 2, 3]) eye();\n        translate([-4, 2, 3]) eye();\n        \n        // Mandibles\n        mandibles();\n        \n        // Fangs\n        color([0.9, 0.9, 0.1]) {\n            translate([3, 8, -3]) cylinder(h=3, r=1, $fn=8);\n            translate([-3, 8, -3]) cylinder(h=3, r=1, $fn=8);\n        }\n    }\n    \n    // Legs (8 total)\n    for (i = [0:7]) {\n        angle = i * 45;\n        translate([0, 0, -5]) {\n            leg(1, angle);\n            leg(2, angle + (i % 2 == 0 ? 10 : -10));\n        }\n    }\n    \n    // Electric tufts\n    color([0.9, 0.9, 0.1]) {\n        for (i = [0:3]) {\n            angle = i * 90;\n            rotate([0, 0, angle]) translate([15, 0, 0]) \n                rotate([0, 90, 0]) cylinder(h=8, r=2, $fn=8);\n        }\n    }\n}",
    "renders": true
  },
  {
    "pokemon": "ferroseed",
    "openscad_code": "// Ferroseed - Realistic Style (Medium Complexity)\n// Overall height ~60mm, 3D-printable with 2mm walls and angled spikes\n\n$fn=32;  // Smooth circles\n\n// Main colors\ncolor_metallic = [0.5,0.5,0.5];\ncolor_spike = [0.3,0.3,0.3];\ncolor_eye = [0.1,0.1,0.1];\ncolor_band = [0.6,0.6,0.6];\n\n// Main seed body\nmodule seed_body() {\n    color(color_metallic)\n    difference() {\n        sphere(d=32, center=true);\n        // Flatten bottom slightly for printability\n        translate([0,0,-16.5])\n            cube([34,34,2], center=true);\n    }\n}\n\n// Single spike module angled for printability\nmodule spike(len=12, dia=3.5, angle=35) {\n    color(color_spike)\n    rotate([0,angle,0])\n    cylinder(h=len, d1=dia, d2=dia*0.6, center=false);\n}\n\n// Ring of spikes around body\nmodule spike_ring(height, count, radius, len, dia) {\n    for(i=[0:count-1]) {\n        angle = i*360/count;\n        translate([radius*sin(angle), radius*cos(angle), height])\n            rotate([0,0,angle])\n                spike(len, dia);\n    }\n}\n\n// Eye\nmodule eye() {\n    color(color_eye)\n    translate([0,15,5])\n        sphere(d=6);\n}\n\n// Metallic band around middle\nmodule band() {\n    color(color_band)\n    difference() {\n        cylinder(h=6, d=34, center=true);\n        cylinder(h=7, d=30, center=true);\n    }\n}\n\n// Assembly\nmodule ferroseed() {\n    seed_body();\n    \n    // Upper spike rings\n    spike_ring(height=8, count=6, radius=17, len=10, dia=3.5);\n    spike_ring(height=-4, count=6, radius=17, len=10, dia=3.5);\n    \n    // Lower spike rings\n    spike_ring(height=-12, count=5, radius=16.5, len=9, dia=3.2);\n    spike_ring(height=-18, count=4, radius=15.5, len=8, dia=3.0);\n    \n    // Top central spike\n    translate([0,0,18])\n        spike(len=14, dia=4, angle=0);\n    \n    // Eye\n    eye();\n    \n    // Metallic band\n    band();\n}\n\nferroseed();",
    "renders": true
  },
  {
    "pokemon": "ferrothorn",
    "openscad_code": "// Ferrothorn Pokemon - Realistic Style, Medium Complexity\n// 3D printable model using basic OpenSCAD primitives\n\n// Overall scale\nscale_factor = 0.4;\n\n// Main body module\nmodule body() {\n    color(\"darkgreen\")\n    difference() {\n        // Central sphere body\n        sphere(15 * scale_factor, $fn=32);\n        \n        // Eye sockets\n        translate([-6 * scale_factor, 10 * scale_factor, 8 * scale_factor])\n            rotate([0, 90, 0])\n            cylinder(h=10 * scale_factor, r1=4 * scale_factor, r2=2 * scale_factor, $fn=16);\n        translate([6 * scale_factor, 10 * scale_factor, 8 * scale_factor])\n            rotate([0, 90, 0])\n            cylinder(h=10 * scale_factor, r1=4 * scale_factor, r2=2 * scale_factor, $fn=16);\n    }\n}\n\n// Eye module\nmodule eye(x_pos) {\n    color(\"red\")\n    translate([x_pos * scale_factor, 12 * scale_factor, 10 * scale_factor])\n        sphere(2.5 * scale_factor, $fn=16);\n}\n\n// Spike module for metallic protrusions\nmodule spike(length, angle_z, angle_x) {\n    color(\"gray\")\n    rotate([angle_x, 0, angle_z])\n        translate([0, 0, 15 * scale_factor])\n            cylinder(h=length * scale_factor, r1=3 * scale_factor, r2=1 * scale_factor, $fn=8);\n}\n\n// Ring of spikes around body\nmodule spike_ring(height, count) {\n    for(i = [0:count-1]) {\n        angle = i * 360 / count;\n        translate([0, 0, height * scale_factor])\n            spike(12, angle, -30);\n    }\n}\n\n// Metallic vine appendage\nmodule vine() {\n    color(\"gray\")\n    union() {\n        // Main vine segment 1\n        translate([0, -15 * scale_factor, -5 * scale_factor])\n            rotate([45, 0, 0])\n            cylinder(h=20 * scale_factor, r=2.5 * scale_factor, $fn=8);\n        \n        // Main vine segment 2\n        translate([0, -25 * scale_factor, -15 * scale_factor])\n            rotate([75, 0, 0])\n            cylinder(h=25 * scale_factor, r=2 * scale_factor, $fn=8);\n        \n        // End bulb\n        translate([0, -35 * scale_factor, -25 * scale_factor])\n            sphere(4 * scale_factor, $fn=16);\n    }\n}\n\n// Metallic disk detail\nmodule disk(x, y, z, rot) {\n    color(\"silver\")\n    translate([x * scale_factor, y * scale_factor, z * scale_factor])\n        rotate([90, 0, rot])\n        cylinder(h=1 * scale_factor, r=5 * scale_factor, $fn=24);\n}\n\n// Main assembly\nunion() {\n    // Central body\n    body();\n    \n    // Eyes\n    eye(-5);\n    eye(5);\n    \n    // Three rings of spikes\n    spike_ring(0, 6);\n    spike_ring(5, 5);\n    spike_ring(-5, 5);\n    \n    // Three vine appendages\n    rotate([0, 0, 0])\n        vine();\n    rotate([0, 0, 120])\n        vine();\n    rotate([0, 0, 240])\n        vine();\n    \n    // Decorative disks\n    disk(0, 0, 15, 0);\n    disk(-8, 5, 12, 30);\n    disk(8, 5, 12, -30);\n    disk(0, -8, 10, 60);\n}",
    "renders": true
  },
  {
    "pokemon": "klink",
    "openscad_code": "// Realistic Klink OpenSCAD Model\n// Medium complexity with 3D printability in mind\n\n// Parameters\n$fa = 2;\n$fs = 0.5;\ngear_thickness = 6;\ngear_radius = 20;\ntooth_height = 4;\ntooth_width = 3;\ntooth_count = 12;\nface_radius = 12;\neye_size = 3;\nmouth_width = 8;\nmouth_height = 2;\ncenter_distance = 45;\nwall_thickness = 2;\n\n// Color definitions\ncolor_gear = [0.85, 0.85, 0.85];\ncolor_face = [0.95, 0.8, 0.7];\ncolor_details = [0.3, 0.3, 0.3];\n\n// Gear tooth module\nmodule gear_tooth(height) {\n    difference() {\n        cube([tooth_width, tooth_height, height], center=true);\n        translate([0, tooth_height/2, height/2])\n            sphere(r=tooth_width/2);\n    }\n}\n\n// Gear module with teeth\nmodule gear(radius, thickness, tooth_count) {\n    color(color_gear)\n    union() {\n        // Main gear body\n        cylinder(h=thickness, r=radius, center=true);\n        \n        // Teeth around circumference\n        for(i=[0:tooth_count-1]) {\n            rotate([0, 0, i*360/tooth_count])\n                translate([radius + tooth_height/2, 0, 0])\n                    gear_tooth(thickness);\n        }\n        \n        // Center hole\n        difference() {\n            cylinder(h=thickness+1, r=radius-wall_thickness, center=true);\n            cylinder(h=thickness+2, r=face_radius, center=true);\n        }\n    }\n}\n\n// Face module for each gear\nmodule klink_face() {\n    color(color_face)\n    union() {\n        // Face disk\n        translate([0, 0, gear_thickness/2 + 0.1])\n            cylinder(h=1, r=face_radius-1, center=false);\n        \n        // Eyes\n        color(color_details) {\n            translate([face_radius/3, face_radius/3, gear_thickness/2 + 1.5])\n                sphere(r=eye_size);\n            translate([-face_radius/3, face_radius/3, gear_thickness/2 + 1.5])\n                sphere(r=eye_size);\n            \n            // Mouth\n            translate([0, -face_radius/3, gear_thickness/2 + 1.5])\n                rotate([90, 0, 0])\n                    cylinder(h=mouth_width, r=mouth_height, center=true);\n            \n            // X mark on forehead\n            translate([0, face_radius/2, gear_thickness/2 + 1.5])\n                union() {\n                    rotate([0, 0, 45])\n                        cube([mouth_width/2, 1, 1], center=true);\n                    rotate([0, 0, -45])\n                        cube([mouth_width/2, 1, 1], center=true);\n                }\n        }\n    }\n}\n\n// Central connector axle\nmodule connector() {\n    color(color_gear)\n    difference() {\n        // Main axle\n        cylinder(h=center_distance, r=gear_thickness, center=true);\n        \n        // Hollow center\n        cylinder(h=center_distance+1, r=gear_thickness-wall_thickness, center=true);\n    }\n}\n\n// Complete Klink assembly\nmodule klink() {\n    // First gear\n    translate([0, 0, -center_distance/2])\n        union() {\n            gear(gear_radius, gear_thickness, tooth_count);\n            rotate([0, 0, 15]) klink_face();\n        }\n    \n    // Second gear\n    translate([0, 0, center_distance/2])\n        union() {\n            gear(gear_radius, gear_thickness, tooth_count);\n            rotate([0, 0, -15]) klink_face();\n        }\n    \n    // Connecting axle\n    connector();\n}\n\n// Render the model\nklink();",
    "renders": true
  },
  {
    "pokemon": "klang",
    "openscad_code": "// Klang Pokemon - Medium complexity realistic style\n// Sized for 3D printing (~80mm diameter)\n\n// Colors\ncolor_gear = [0.8, 0.8, 0.9];\ncolor_center = [0.5, 0.5, 0.6];\ncolor_face = [0.9, 0.9, 0.95];\ncolor_detail = [0.3, 0.3, 0.4];\n\n// Main module\nmodule klang() {\n    // Outer gear (larger gear)\n    rotate([0, 0, 0]) \n        color(color_gear)\n        gear(40, 8, 15, 5);\n    \n    // Inner gear (smaller gear)\n    translate([0, 0, 20])\n        rotate([0, 0, 15])\n        color(color_gear)\n        gear(30, 6, 12, 4);\n    \n    // Center sphere\n    translate([0, 0, 10])\n        color(color_center)\n        sphere(15, $fn=32);\n    \n    // Face features\n    translate([0, 0, 25])\n        rotate([0, 0, 0])\n        color(color_face)\n        face_details();\n    \n    // Connection pins\n    for(i=[0:7]) {\n        rotate([0, 0, i*45])\n        translate([35, 0, 10])\n        color(color_detail)\n        cylinder(h=5, r=3, $fn=16);\n    }\n}\n\n// Gear module with teeth\nmodule gear(radius, teeth, thickness, tooth_height) {\n    union() {\n        // Main gear body\n        cylinder(h=thickness, r=radius, $fn=64);\n        \n        // Teeth\n        for(i=[0:teeth-1]) {\n            rotate([0, 0, i*(360/teeth)])\n            translate([radius, 0, -1])\n            cube([tooth_height, 8, thickness+2], center=true);\n        }\n        \n        // Center hole\n        difference() {\n            cylinder(h=thickness, r=radius, $fn=64);\n            translate([0, 0, -1])\n            cylinder(h=thickness+2, r=radius*0.3, $fn=32);\n        }\n    }\n}\n\n// Face details module\nmodule face_details() {\n    // Main face disc\n    cylinder(h=3, r=12, $fn=32);\n    \n    // Left eye\n    translate([-5, 5, 1.5])\n    color(color_detail)\n    cylinder(h=2, r=2, $fn=16);\n    \n    // Right eye\n    translate([5, 5, 1.5])\n    color(color_detail)\n    cylinder(h=2, r=2, $fn=16);\n    \n    // Mouth\n    translate([0, -2, 1.5])\n    color(color_detail)\n    rotate([90, 0, 0])\n    cylinder(h=6, r=1, $fn=16);\n    \n    // Eye highlights\n    translate([-4.5, 5.5, 3])\n    color(color_face)\n    sphere(0.5, $fn=8);\n    \n    translate([5.5, 5.5, 3])\n    color(color_face)\n    sphere(0.5, $fn=8);\n}\n\n// Render the model\nklang();",
    "renders": true
  },
  {
    "pokemon": "klinklang",
    "openscad_code": "// Klinklang Pokemon in realistic style - medium complexity\n// Designed for 3D printing with proper wall thickness\n\n$fn = 32;\nwall_thickness = 2;\n\nmodule klink_gear(outer_radius, inner_radius, thickness, teeth_count) {\n    // Main gear body\n    difference() {\n        cylinder(h = thickness, r = outer_radius, center = true);\n        cylinder(h = thickness + 1, r = inner_radius, center = true);\n    }\n    \n    // Gear teeth\n    for (i = [0:teeth_count-1]) {\n        rotate([0, 0, i * 360/teeth_count]) \n            translate([outer_radius + 2, 0, 0])\n                cube([4, 2, thickness], center = true);\n    }\n}\n\nmodule mini_gear(outer_radius, inner_radius, thickness, teeth_count) {\n    color(\"DarkSlateGray\")\n    klink_gear(outer_radius, inner_radius, thickness, teeth_count);\n}\n\nmodule main_body() {\n    // Central gear body\n    color(\"Goldenrod\")\n    klink_gear(25, 8, 8, 16);\n    \n    // Outer ring gear\n    difference() {\n        color(\"Goldenrod\")\n        cylinder(h = 8, r = 35, center = true);\n        cylinder(h = 9, r = 28, center = true);\n    }\n    \n    // Gear teeth on outer ring\n    for (i = [0:11]) {\n        rotate([0, 0, i * 30]) \n            translate([31.5, 0, 0])\n                color(\"Goldenrod\")\n                cube([3, 6, 8], center = true);\n    }\n    \n    // Small gear on top\n    translate([0, 0, 8])\n        rotate([0, 0, 15])\n            mini_gear(12, 4, 3, 12);\n}\n\nmodule klang_body() {\n    // Klang body\n    color(\"DarkSlateGray\")\n    klink_gear(22, 6, 7, 14);\n    \n    // Red core\n    difference() {\n        color(\"FireBrick\")\n        sphere(r = 6);\n        sphere(r = 3);\n    }\n}\n\nmodule klink_body() {\n    // Klink body\n    color(\"DarkSlateGray\")\n    klink_gear(18, 5, 5, 12);\n    \n    // Red core\n    difference() {\n        color(\"FireBrick\")\n        sphere(r = 5);\n        sphere(r = 2.5);\n    }\n}\n\nmodule connection_plate() {\n    // Connection plate between gears\n    color(\"DimGray\")\n    difference() {\n        cube([40, 8, 2], center = true);\n        cube([36, 4, 3], center = true);\n    }\n}\n\nmodule power_indicator() {\n    // Power indicator on top\n    translate([0, 0, 15])\n        color(\"Red\")\n        difference() {\n            cylinder(h = 8, r1 = 4, r2 = 2, center = false);\n            cylinder(h = 9, r1 = 2, r2 = 0, center = false);\n        }\n}\n\nmodule assembly() {\n    // Main Klinklang assembly\n    main_body();\n    \n    // Klang body connected at angle\n    translate([0, 0, 6])\n        rotate([0, 90, 45])\n            klang_body();\n    \n    // Klink body connected at opposite angle\n    translate([0, 0, -6])\n        rotate([0, 90, -45])\n            klink_body();\n    \n    // Connection plates\n    translate([30, 0, 0])\n        rotate([0, 90, 0])\n            connection_plate();\n    \n    translate([-30, 0, 0])\n        rotate([0, 90, 0])\n            connection_plate();\n    \n    // Power indicator\n    power_indicator();\n}\n\n// Scale to reasonable printing size (80mm max dimension)\nscale(0.8)\n    assembly();",
    "renders": true
  },
  {
    "pokemon": "tynamo",
    "openscad_code": "// OpenSCAD Tynamo - Realistic Style, Medium Complexity\n// Dimensions: ~80mm length, printable without supports\n\n$fn = 64;\n\n// Main colors\ncolor_body = [0.2, 0.2, 0.3];      // Dark gray-blue\ncolor_eyes = [1, 0.1, 0.1];        // Red\ncolor_mouth = [0.1, 0.1, 0.1];     // Black\ncolor_markings = [0.9, 0.9, 0.9];  // Light gray\ncolor_yellow = [0.9, 0.8, 0.2];    // Yellow accents\n\n// Main body module\nmodule tynamo_body() {\n    union() {\n        // Central eel body - tapered tube\n        color(color_body)\n        hull() {\n            translate([0, 0, 0])\n                sphere(d = 20);\n            translate([0, 0, 60])\n                sphere(d = 12);\n        }\n        \n        // Head section - slightly flattened sphere\n        translate([0, 0, -15])\n            scale([1.2, 1, 1])\n                sphere(d = 25);\n        \n        // Tail fin - two curved extensions\n        color(color_body)\n        translate([0, 0, 70])\n            rotate([0, 90, 0])\n                cylinder(h = 8, d1 = 12, d2 = 2);\n        \n        translate([0, 0, 70])\n            rotate([0, -90, 0])\n                cylinder(h = 8, d1 = 12, d2 = 2);\n    }\n}\n\n// Eyes module\nmodule tynamo_eyes() {\n    // Left eye\n    translate([-8, -8, -5])\n        color(color_eyes)\n        sphere(d = 6);\n    \n    // Right eye\n    translate([8, -8, -5])\n        color(color_eyes)\n        sphere(d = 6);\n    \n    // Eye highlights\n    translate([-7, -10, -3])\n        color([1, 1, 1])\n        sphere(d = 2);\n    \n    translate([9, -10, -3])\n        color([1, 1, 1])\n        sphere(d = 2);\n}\n\n// Mouth module\nmodule tynamo_mouth() {\n    translate([0, -12, -8])\n        rotate([90, 0, 0])\n            color(color_mouth)\n            cylinder(h = 2, d = 8, $fn = 24);\n    \n    // Mouth opening\n    translate([0, -13, -8])\n        rotate([90, 0, 0])\n            cylinder(h = 3, d = 4, $fn = 24);\n}\n\n// Electric organ markings\nmodule electric_markings() {\n    // Yellow zigzag pattern along sides\n    for(i = [0:3]) {\n        translate([0, 10, i * 15 - 5])\n            rotate([0, 0, 45])\n                color(color_yellow)\n                cube([2, 15, 3], center = true);\n    }\n    \n    for(i = [0:3]) {\n        translate([0, -10, i * 15 - 5])\n            rotate([0, 0, -45])\n                color(color_yellow)\n                cube([2, 15, 3], center = true);\n    }\n    \n    // Light gray lateral line\n    for(i = [0:7]) {\n        translate([0, 0, i * 8 - 10])\n            color(color_markings)\n            sphere(d = 3);\n    }\n}\n\n// Dorsal fin\nmodule dorsal_fin() {\n    color(color_body)\n    translate([0, 5, 30])\n        rotate([15, 0, 0])\n            linear_extrude(height = 2)\n                polygon(points = [[0, 0], [-8, 10], [8, 10]], convexity = 3);\n}\n\n// Main assembly\nunion() {\n    tynamo_body();\n    tynamo_eyes();\n    tynamo_mouth();\n    electric_markings();\n    dorsal_fin();\n}\n\n// Base for stability\ntranslate([0, 0, -25])\n    color([0.8, 0.8, 0.8])\n    cylinder(h = 5, d = 40, $fn = 32);",
    "renders": true
  },
  {
    "pokemon": "eelektrik",
    "openscad_code": "// OpenSCAD Eelektrik Model - Realistic Medium Complexity\n// Total height ~85mm, 3D-printable with 2mm walls\n\n$fn = 50;\n\n// Main body color\ncolor([0.2,0.2,0.2]) union() {\n    // Head bulb\n    translate([0,0,65]) sphere(8);\n    \n    // Head\n    translate([0,0,55]) sphere(12);\n    \n    // Neck segment 1\n    translate([0,0,45]) cylinder(h=10, r1=10, r2=8);\n    \n    // Neck segment 2\n    translate([0,0,35]) cylinder(h=10, r1=8, r2=6);\n    \n    // Body\n    translate([0,0,20]) cylinder(h=15, r1=6, r2=8);\n    \n    // Tail segment 1\n    translate([0,0,8]) cylinder(h=12, r1=8, r2=6);\n    \n    // Tail segment 2\n    translate([0,0,-3]) cylinder(h=11, r1=6, r2=4);\n    \n    // Tail tip\n    translate([0,0,-10]) sphere(3);\n}\n\n// Fins\nmodule fin(x,z,angle) {\n    color([0.15,0.15,0.15]) rotate([0,0,angle]) translate([x,0,z]) difference() {\n        // Main fin\n        scale([1,0.3,1]) sphere(8);\n        \n        // Cutouts\n        translate([0,2,0]) scale([0.6,0.4,0.6]) sphere(6);\n    }\n}\n\nfin(10,55,30);\nfin(-10,55,-30);\nfin(6,30,45);\nfin(-6,30,-45);\n\n// Eyes\nmodule eye(x) {\n    color([0.9,0.9,0.2]) translate([x,10,57]) sphere(3);\n    color([0.1,0.1,0.1]) translate([x,13,57]) sphere(1.5);\n}\n\neye(5);\neye(-5);\n\n// Mouth\ncolor([0.5,0.1,0.1]) translate([0,12,52]) rotate([90,0,0]) cylinder(h=8, r1=4, r2=2);\n\n// Teeth pattern\nmodule tooth(x,z) {\n    color([0.9,0.9,0.9]) translate([x,12,z]) rotate([90,0,0]) cylinder(h=2, r=1);\n}\n\ntooth(2,50);\ntooth(-2,50);\ntooth(0,48);\n\n// Yellow stripes\nmodule stripe(z,h) {\n    color([0.9,0.8,0.1]) translate([0,0,z]) cylinder(h=h, r=9);\n}\n\nstripe(60,3);\nstripe(50,3);\nstripe(40,3);\nstripe(30,3);\nstripe(20,3);\nstripe(10,3);\nstripe(0,3);\n\n// Electric patterns\nmodule spark(x,y,z) {\n    color([0.9,0.9,0]) translate([x,y,z]) sphere(1.5);\n}\n\nfor(i = [0:30:360]) {\n    rotate([0,0,i]) translate([5,0,35]) spark(0,0,0);\n    rotate([0,0,i+15]) translate([4,0,45]) spark(0,0,0);\n    rotate([0,0,i+30]) translate([3,0,55]) spark(0,0,0);\n}\n\n// Base support for printing\ncolor([0.1,0.1,0.1]) translate([0,0,-15]) cylinder(h=5, r=12);",
    "renders": true
  },
  {
    "pokemon": "eelektross",
    "openscad_code": "// Eelektross - Realistic Style (Medium Complexity)\n// Dimensions: ~80mm height\n\n// Color constants\ncolor_body = [0.2, 0.2, 0.2];\ncolor_accents = [0.9, 0.9, 0.1];\ncolor_mouth = [0.8, 0.1, 0.1];\n\n// Main body module\nmodule body() {\n    color(color_body)\n    union() {\n        // Torso - elongated oval\n        translate([0, 0, 25])\n        scale([1, 0.7, 2])\n        sphere(12, $fn=32);\n        \n        // Lower body taper\n        translate([0, 0, 8])\n        scale([0.8, 0.6, 1.5])\n        cylinder(h=15, r1=10, r2=6, $fn=24);\n        \n        // Tail fin base\n        translate([0, 0, 0])\n        scale([0.4, 0.8, 0.2])\n        cylinder(h=8, r1=8, r2=3, $fn=16);\n    }\n}\n\n// Head module\nmodule head() {\n    color(color_body)\n    union() {\n        // Main head - slightly flattened sphere\n        translate([0, 0, 45])\n        scale([1.2, 0.9, 0.8])\n        sphere(15, $fn=32);\n        \n        // Snout extension\n        translate([0, 12, 42])\n        scale([0.8, 1.5, 0.7])\n        sphere(8, $fn=24);\n        \n        // Lower jaw\n        translate([0, 12, 38])\n        rotate([15, 0, 0])\n        color(color_mouth)\n        difference() {\n            translate([0, 0, -2])\n            cube([12, 10, 4], center=true);\n            translate([0, 5, 0])\n            sphere(6, $fn=16);\n        }\n    }\n}\n\n// Eye module\nmodule eye() {\n    color([1, 1, 1])\n    translate([7, 18, 45])\n    sphere(3.5, $fn=16);\n    \n    color([0, 0, 0])\n    translate([8, 19.5, 45])\n    sphere(1.5, $fn=8);\n    \n    // Eye highlight\n    color([1, 1, 1])\n    translate([8.5, 20, 45.5])\n    sphere(0.5, $fn=8);\n}\n\n// Fin modules\nmodule dorsal_fin() {\n    color(color_body)\n    translate([0, 0, 55])\n    rotate([0, 0, 0])\n    linear_extrude(height=2, center=true)\n    polygon(points=[[-8,0], [8,0], [0,15]]);\n}\n\nmodule side_fin(x_pos) {\n    color(color_body)\n    translate([x_pos, 0, 35])\n    rotate([0, 90, x_pos > 0 ? 20 : -20])\n    scale([1, 1.5, 0.5])\n    cylinder(h=12, r1=5, r2=0, $fn=16);\n}\n\n// Tentacle modules\nmodule tentacle(x, z, rot) {\n    color(color_body)\n    translate([x, 0, z])\n    rotate([0, 0, rot])\n    union() {\n        // Base\n        scale([0.8, 0.8, 1])\n        cylinder(h=8, r1=3, r2=2.5, $fn=12);\n        \n        // Middle segment\n        translate([0, 0, -8])\n        rotate([10, 0, 0])\n        scale([0.7, 0.7, 1])\n        cylinder(h=10, r1=2.5, r2=2, $fn=12);\n        \n        // Tip\n        translate([0, 0, -18])\n        rotate([20, 0, 0])\n        scale([0.6, 0.6, 1])\n        cylinder(h=8, r1=2, r2=1, $fn=8);\n    }\n}\n\n// Yellow accent stripes\nmodule accent_stripes() {\n    color(color_accents)\n    union() {\n        // Head stripes\n        translate([0, 12, 48])\n        rotate([90, 0, 0])\n        scale([1, 0.2, 0.1])\n        cylinder(h=20, r1=8, r2=6, $fn=32);\n        \n        // Body stripes\n        translate([0, 0, 35])\n        rotate([90, 0, 0])\n        scale([1, 0.2, 0.1])\n        cylinder(h=25, r1=10, r2=8, $fn=32);\n        \n        translate([0, 0, 20])\n        rotate([90, 0, 0])\n        scale([1, 0.2, 0.1])\n        cylinder(h=20, r1=8, r2=6, $fn=32);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    \n    // Eyes (mirrored for both sides)\n    eye();\n    mirror([1, 0, 0]) eye();\n    \n    // Fins\n    dorsal_fin();\n    side_fin(15);\n    side_fin(-15);\n    \n    // Tentacles\n    for(i = [0:2]) {\n        tentacle(10, 15 - i*5, i*30);\n        tentacle(-10, 15 - i*5, -i*30);\n    }\n    \n    // Accent details\n    accent_stripes();\n}",
    "renders": true
  },
  {
    "pokemon": "elgyem",
    "openscad_code": "// Elgyem Pokemon - Realistic Style - Medium Complexity\n// Size: 80mm tall\n\ncolor([0.4, 0.5, 0.7]) // Main body color - blue-grey\nunion() {\n    // Main head - slightly elongated oval\n    translate([0, 0, 30])\n    scale([1.2, 1, 1.5])\n    sphere(r=15, $fn=30);\n    \n    // Neck connection\n    translate([0, 0, 20])\n    cylinder(h=10, r1=8, r2=12, $fn=20);\n    \n    // Torso - tapered cylinder\n    translate([0, 0, 5])\n    cylinder(h=15, r1=12, r2=15, $fn=20);\n    \n    // Lower body - rounded base\n    translate([0, 0, 0])\n    sphere(r=15, $fn=30);\n}\n\n// Eyes - large and green\nmodule eye(x_pos) {\n    color([0.2, 0.8, 0.3])\n    translate([x_pos, 12, 35])\n    scale([1, 0.3, 1.2])\n    sphere(r=8, $fn=20);\n    \n    // Eye pupils - black\n    color([0, 0, 0])\n    translate([x_pos, 13.5, 36])\n    sphere(r=3, $fn=15);\n}\n\neye(-8);\neye(8);\n\n// Eye markings - raised ridges\ncolor([0.3, 0.4, 0.6])\nunion() {\n    translate([-15, 10, 35])\n    rotate([0, 30, 0])\n    cube([12, 2, 8]);\n    \n    translate([15, 10, 35])\n    rotate([0, -30, 0])\n    cube([12, 2, 8]);\n}\n\n// Head crest - three vertical ridges\nmodule head_ridge(x_pos) {\n    color([0.35, 0.45, 0.65])\n    translate([x_pos, 0, 48])\n    cube([3, 2, 10]);\n}\n\nhead_ridge(-6);\nhead_ridge(0);\nhead_ridge(6);\n\n// Arms - simple cylindrical with hands\nmodule arm(x_pos, angle) {\n    color([0.4, 0.5, 0.7])\n    union() {\n        // Upper arm\n        translate([x_pos, 15, 22])\n        rotate([0, 0, angle])\n        cylinder(h=12, r=4, $fn=15);\n        \n        // Lower arm\n        translate([x_pos + 8 * cos(angle), 15 + 8 * sin(angle), 22])\n        rotate([90, 0, angle + 90])\n        cylinder(h=10, r=3.5, $fn=15);\n        \n        // Hand - three fingers\n        color([0.3, 0.4, 0.6])\n        for(i = [-1:1]) {\n            translate([x_pos + 8 * cos(angle) + i * 3, 15 + 8 * sin(angle), 15])\n            rotate([0, 90, 0])\n            cylinder(h=6, r=1.5, $fn=8);\n        }\n    }\n}\n\narm(-12, 30);\narm(12, -30);\n\n// Legs - short and stubby\nmodule leg(x_pos) {\n    color([0.4, 0.5, 0.7])\n    union() {\n        // Thigh\n        translate([x_pos, 10, 8])\n        cylinder(h=8, r=6, $fn=15);\n        \n        // Foot\n        color([0.3, 0.4, 0.6])\n        translate([x_pos, 10, 2])\n        scale([1.5, 2.5, 1])\n        sphere(r=4, $fn=15);\n    }\n}\n\nleg(-8);\nleg(8);\n\n// Back markings - geometric pattern\ncolor([0.9, 0.9, 0.9])\nunion() {\n    // Large central marking\n    translate([0, -14, 30])\n    scale([2, 0.5, 3])\n    sphere(r=5, $fn=20);\n    \n    // Two side markings\n    translate([-10, -13, 28])\n    rotate([0, 15, 0])\n    cube([8, 2, 6]);\n    \n    translate([10, -13, 28])\n    rotate([0, -15, 0])\n    cube([8, 2, 6]);\n}\n\n// Antenna - two curved elements\nmodule antenna(x_pos) {\n    color([0.3, 0.4, 0.6])\n    union() {\n        // Base\n        translate([x_pos, 0, 50])\n        cylinder(h=3, r=2, $fn=10);\n        \n        // Curved top\n        translate([x_pos, 0, 53])\n        rotate([0, 90, 0])\n        rotate_extrude(angle=90, $fn=20)\n        translate([5, 0, 0])\n        circle(r=1, $fn=8);\n    }\n}\n\nantenna(-4);\nantenna(4);",
    "renders": true
  },
  {
    "pokemon": "beheeyem",
    "openscad_code": "// Beheeyem - Realistic Medium Complexity OpenSCAD Model\n// Height: ~80mm when printed\n\n$fn = 32;\n\n// Main body color (light gray)\nbody_color = [0.8,0.8,0.8];\n// Darker gray accents\naccent_color = [0.5,0.5,0.5];\n// Gold details\ngold_color = [0.8,0.7,0.2];\n\nmodule beheeyem() {\n    union() {\n        // Main head/body\n        color(body_color) {\n            // Central head - slightly elongated oval\n            translate([0,0,25]) \n                scale([1.2,1,1.5]) \n                sphere(15);\n                \n            // Neck extension\n            translate([0,0,8]) \n                cylinder(h=20, r1=12, r2=8);\n                \n            // Torso base\n            translate([0,0,-5]) \n                cylinder(h=25, r1=10, r2=12);\n        }\n        \n        // Eye ridges\n        color(accent_color) {\n            translate([-10,12,28]) \n                rotate([15,0,-20]) \n                cube([12,5,8], center=true);\n            translate([10,12,28]) \n                rotate([15,0,20]) \n                cube([12,5,8], center=true);\n        }\n        \n        // Eyes with gold iris\n        color([0,0,0]) {\n            translate([-8,13,28]) \n                sphere(3);\n            translate([8,13,28]) \n                sphere(3);\n        }\n        \n        color(gold_color) {\n            translate([-8,13.5,28]) \n                sphere(1.5);\n            translate([8,13.5,28]) \n                sphere(1.5);\n        }\n        \n        // Mouth slit\n        color([0,0,0]) {\n            translate([0,8,20]) \n                rotate([-20,0,0]) \n                scale([1,0.3,0.5]) \n                sphere(3);\n        }\n        \n        // Ear-like protrusions\n        color(body_color) {\n            translate([-15,5,45]) \n                rotate([0,0,30]) \n                scale([0.5,0.5,2]) \n                sphere(8);\n            translate([15,5,45]) \n                rotate([0,0,-30]) \n                scale([0.5,0.5,2]) \n                sphere(8);\n        }\n        \n        // Arms\n        color(body_color) {\n            // Left arm\n            translate([-18,0,15]) {\n                rotate([0,0,45]) {\n                    cylinder(h=15, r1=4, r2=3);\n                    translate([0,0,15]) \n                        sphere(4);\n                }\n            }\n            \n            // Right arm\n            translate([18,0,15]) {\n                rotate([0,0,-45]) {\n                    cylinder(h=15, r1=4, r2=3);\n                    translate([0,0,15]) \n                        sphere(4);\n                }\n            }\n        }\n        \n        // Chest pattern\n        color(gold_color) {\n            translate([0,12,15]) {\n                // Top diamond\n                scale([1,0.5,0.2]) \n                sphere(6);\n                \n                // Bottom diamond\n                translate([0,-6,0]) \n                scale([1,0.5,0.2]) \n                sphere(6);\n            }\n        }\n        \n        // Legs\n        color(body_color) {\n            // Left leg\n            translate([-6,-10,0]) {\n                cylinder(h=15, r1=5, r2=4);\n                translate([0,0,-15]) \n                    sphere(6);\n            }\n            \n            // Right leg\n            translate([6,-10,0]) {\n                cylinder(h=15, r1=5, r2=4);\n                translate([0,0,-15]) \n                    sphere(6);\n            }\n        }\n        \n        // Back pattern\n        color(accent_color) {\n            translate([0,-10,20]) {\n                for(i=[-1:1]) {\n                    translate([i*10,0,0]) \n                        scale([2,0.3,3]) \n                        sphere(3);\n                }\n            }\n        }\n        \n        // Collar detail\n        color(gold_color) {\n            translate([0,0,35]) \n                rotate_extrude(angle=360, $fn=64) \n                translate([15,0,0]) \n                circle(1.5);\n        }\n    }\n}\n\n// Generate the model\nbeheeyem();",
    "renders": true
  }
]