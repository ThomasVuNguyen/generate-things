[
  {
    "pokemon": "pikachu",
    "openscad_code": "$fn = 32;\n\n// Overall scale\nscale(0.4) {\n\n// Body\ncolor([1, 0.8, 0]) {\n    union() {\n        // Torso\n        translate([0, 0, 25])\n            scale([1.2, 1, 1.4])\n            sphere(20);\n        \n        // Belly\n        color([1, 1, 0.85])\n        translate([0, -19, 20])\n            scale([1.1, 0.3, 1.2])\n            sphere(18);\n    }\n}\n\n// Head\ncolor([1, 0.8, 0]) {\n    translate([0, 0, 55])\n        sphere(22);\n}\n\n// Ears\nmodule ear(x) {\n    color([1, 0.8, 0]) {\n        translate([x, 0, 70])\n            rotate([0, x*3, 0])\n            scale([0.3, 0.1, 1.2])\n            cylinder(20, 8, 3);\n    }\n    color([0.2, 0.2, 0.2]) {\n        translate([x, 0, 85])\n            rotate([0, x*3, 0])\n            scale([0.25, 0.08, 0.7])\n            cylinder(8, 6, 2);\n    }\n}\near(12);\near(-12);\n\n// Eyes\nmodule eye(x) {\n    color([0.1, 0.1, 0.2])\n    translate([x, -20, 55])\n        scale([1, 1.2, 0.5])\n        sphere(4);\n    color([0.9, 0.9, 1])\n    translate([x+1.5, -21, 56])\n        sphere(1.5);\n}\neye(8);\neye(-8);\n\n// Cheeks\ncolor([1, 0.2, 0.2]) {\n    translate([13, -18, 50])\n        sphere(5);\n    translate([-13, -18, 50])\n        sphere(5);\n}\n\n// Nose\ncolor([0.2, 0.2, 0.2])\ntranslate([0, -21, 52])\n    scale([1.2, 0.8, 0.5])\n    sphere(1.5);\n\n// Mouth\ncolor([0.3, 0.2, 0.2])\ntranslate([0, -22, 48])\n    rotate([90, 0, 0])\n    cylinder(0.5, 5, 2, $fn=3);\n\n// Arms\nmodule arm(x) {\n    color([1, 0.8, 0])\n    translate([x, -15, 35])\n        rotate([0, 30*x, 10])\n        scale([0.4, 0.4, 1])\n        cylinder(15, 5, 4);\n}\narm(20);\narm(-20);\n\n// Legs\nmodule leg(x) {\n    color([1, 0.8, 0])\n    translate([x, 0, 0])\n        scale([0.5, 0.5, 1])\n        cylinder(20, 6, 4);\n    color([0.8, 0.6, 0])\n    translate([x, 0, 0])\n        cylinder(2, 7, 7);\n}\nleg(8);\nleg(-8);\n\n// Tail\ncolor([1, 0.8, 0]) {\n    translate([0, 20, 20])\n        rotate([0, -30, 0])\n        scale([0.8, 0.3, 2])\n        cylinder(25, 8, 4);\n}\ncolor([0.6, 0.4, 0]) {\n    translate([0, 42, 55])\n        rotate([0, -30, 0])\n        scale([0.7, 0.25, 1.5])\n        cylinder(15, 7, 3);\n}\n\n// Back stripes\ncolor([0.6, 0.4, 0]) {\n    for(i = [1:3]) {\n        translate([0, 15 - i*5, 45 - i*8])\n            rotate([90, 0, 0])\n            scale([1.2, 0.2, 1])\n            cylinder(0.5, 15, 15);\n    }\n}\n\n}",
    "renders": true
  },
  {
    "pokemon": "charizard",
    "openscad_code": "// Charizard OpenSCAD Model - Medium Complexity Realistic Style\n// Overall size ~80mm tall\n\ncolor(\"orange\")\nunion() {\n    // Body\n    translate([0, 0, 20])\n    scale([1.2, 0.8, 1])\n    sphere(15);\n\n    // Belly\n    color(\"yellow\")\n    translate([0, -5, 15])\n    scale([0.8, 0.3, 1.2])\n    sphere(12);\n\n    // Head\n    color(\"orange\")\n    translate([0, 20, 35])\n    sphere(12);\n\n    // Snout\n    color(\"orange\")\n    translate([0, 28, 33])\n    scale([0.7, 1, 0.6])\n    sphere(8);\n\n    // Horns\n    color(\"darkblue\")\n    translate([-6, 15, 42])\n    rotate([30, 0, -20])\n    cylinder(h=10, r1=3, r2=1);\n    \n    color(\"darkblue\")\n    translate([6, 15, 42])\n    rotate([30, 0, 20])\n    cylinder(h=10, r1=3, r2=1);\n\n    // Neck\n    color(\"orange\")\n    translate([0, 10, 30])\n    cylinder(h=10, r=6);\n\n    // Tail\n    color(\"orange\")\n    translate([0, -25, 25])\n    rotate([0, 20, 0])\n    cylinder(h=30, r1=6, r2=4);\n\n    // Tail flame\n    color(\"red\")\n    translate([0, -45, 35])\n    sphere(8);\n    color(\"yellow\")\n    translate([0, -47, 37])\n    sphere(5);\n\n    // Wings\n    module wing() {\n        color(\"darkblue\")\n        translate([0, 0, 0])\n        difference() {\n            scale([1, 2, 0.2])\n            sphere(10);\n            translate([0, -10, -2])\n            cube([20, 20, 4], center=true);\n        }\n    }\n\n    translate([-20, 0, 35])\n    rotate([0, 0, -30])\n    wing();\n\n    translate([20, 0, 35])\n    rotate([0, 0, 30])\n    mirror([1, 0, 0])\n    wing();\n\n    // Arms\n    color(\"orange\")\n    translate([-15, 5, 25])\n    rotate([0, 0, -45])\n    cylinder(h=15, r=3);\n\n    translate([15, 5, 25])\n    rotate([0, 0, 45])\n    cylinder(h=15, r=3);\n\n    // Legs\n    color(\"orange\")\n    translate([-8, 0, 10])\n    cylinder(h=15, r=4);\n\n    translate([8, 0, 10])\n    cylinder(h=15, r=4);\n\n    // Feet\n    color(\"orange\")\n    translate([-8, 0, 0])\n    scale([1.5, 2, 0.5])\n    sphere(5);\n\n    translate([8, 0, 0])\n    scale([1.5, 2, 0.5])\n    sphere(5);\n\n    // Eyes\n    color(\"red\")\n    translate([-4, 30, 38])\n    scale([1, 1.2, 0.5])\n    sphere(2.5);\n\n    color(\"red\")\n    translate([4, 30, 38])\n    scale([1, 1.2, 0.5])\n    sphere(2.5);\n}",
    "renders": true
  },
  {
    "pokemon": "blastoise",
    "openscad_code": "// Blastoise OpenSCAD model - medium complexity realistic style\n// Overall size: ~80mm tall\n\nmodule blastoise() {\n    color([0.2,0.5,0.8]) union() {\n        // Main body shell\n        translate([0,0,15]) scale([1.2,1,1]) sphere(d=35, $fn=20);\n        \n        // Belly plate\n        translate([0,-8,15]) rotate([90,0,0]) cylinder(h=10, d1=15, d2=20, $fn=20);\n        \n        // Head\n        translate([0,12,35]) scale([0.8,0.7,0.8]) sphere(d=20, $fn=20);\n        \n        // Arms\n        for(side=[-1,1]) {\n            translate([side*15,5,25]) rotate([0,side*30,0]) {\n                color([0.2,0.5,0.8]) cylinder(h=15, d=10, $fn=8);\n                translate([0,0,15]) rotate([0,0,side*45]) cylinder(h=15, d=8, $fn=8);\n            }\n        }\n        \n        // Legs\n        for(side=[-1,1]) {\n            translate([side*10,-10,0]) {\n                color([0.2,0.5,0.8]) cylinder(h=15, d=12, $fn=8);\n                translate([0,0,15]) color([0.3,0.3,0.3]) sphere(d=14, $fn=15);\n            }\n        }\n        \n        // Tail\n        translate([0,-15,12]) rotate([0,0,180]) cylinder(h=20, d=10, d1=8, $fn=8);\n        \n        // Water cannons\n        for(side=[-1,1]) {\n            translate([side*12,0,42]) rotate([0,side*15,0]) {\n                color([0.4,0.4,0.4]) union() {\n                    cylinder(h=15, d=8, $fn=12);\n                    translate([0,0,15]) cylinder(h=10, d=6, $fn=12);\n                }\n            }\n        }\n        \n        // Ears\n        for(side=[-1,1]) {\n            translate([side*8,18,40]) rotate([0,side*15,-30]) \n                color([0.2,0.5,0.8]) cylinder(h=8, d=5, $fn=6);\n        }\n    }\n    \n    // Eyes\n    for(side=[-1,1]) {\n        color([1,1,1]) translate([side*6,18,37]) sphere(d=4);\n        color([0,0,0]) translate([side*6,19,37]) sphere(d=2);\n    }\n    \n    // Mouth\n    color([0.2,0.2,0.2]) translate([0,20,33]) scale([1,0.5,0.5]) sphere(d=5);\n    \n    // Shell ridges\n    for(i=[-2:2]) {\n        color([0.3,0.6,0.9]) translate([i*6,0,15]) rotate([90,0,0]) \n            cylinder(h=0.5, d=25-abs(i)*3, $fn=20);\n    }\n}\n\n// Render the model\nblastoise();",
    "renders": true
  },
  {
    "pokemon": "venusaur",
    "openscad_code": "// Realistic Medium-Complexity Venusaur OpenSCAD Model\n// Approx 80 mm tall, 3D-printable\n\n// Color constants\nbody_green = [0.25,0.5,0.2];\nflower_pink = [0.9,0.4,0.6];\nleaf_green = [0.1,0.6,0.2];\neye_red = [0.8,0.1,0.1];\nskin_beige = [0.9,0.8,0.7];\n\n// Main body\nmodule body() {\n    color(body_green)\n    union() {\n        // Torso\n        translate([0,0,25])\n            scale([1.2,1,1.1])\n            sphere(20,$fn=32);\n        \n        // Belly\n        color(skin_beige)\n        translate([0,-18,15])\n            scale([0.8,0.4,0.6])\n            sphere(15,$fn=24);\n        \n        // Back hump\n        translate([0,5,30])\n            scale([1.3,1.2,0.8])\n            sphere(15,$fn=24);\n    }\n}\n\n// Flower on back\nmodule flower() {\n    translate([0,0,45])\n    rotate([0,0,0])\n    union() {\n        // Stem\n        color(leaf_green)\n        cylinder(h=15,r1=4,r2=6,$fn=12);\n        \n        // Petals\n        color(flower_pink)\n        for(i=[0:5]) {\n            rotate([0,0,i*60])\n            translate([0,12,15])\n            rotate([90,0,0])\n            scale([1.5,0.5,1])\n            cylinder(h=8,r1=0,r2=6,$fn=12);\n        }\n        \n        // Center\n        color([0.4,0.2,0.3])\n        translate([0,0,15])\n        sphere(4,$fn=16);\n    }\n}\n\n// Leg module\nmodule leg(side) {\n    translate([side*12,0,0])\n    union() {\n        // Upper leg\n        color(body_green)\n        translate([0,0,12])\n            rotate([0,-side*10,0])\n            scale([0.8,0.8,1.2])\n            cylinder(h=20,r1=6,r2=5,$fn=12);\n        \n        // Foot\n        translate([0,-2,0])\n            scale([1.5,2,0.8])\n            sphere(5,$fn=12);\n    }\n}\n\n// Arm module\nmodule arm(side) {\n    translate([side*18,0,28])\n    rotate([0,0,side*20])\n    union() {\n        // Upper arm\n        color(body_green)\n        rotate([0,0,90])\n        scale([0.8,0.8,1.2])\n        cylinder(h=15,r1=5,r2=4,$fn=12);\n        \n        // Vine\n        color(leaf_green)\n        translate([0,side*8,0])\n        rotate([90,0,0])\n        cylinder(h=20,r1=1.5,$fn=8);\n    }\n}\n\n// Head\nmodule head() {\n    color(body_green)\n    union() {\n        // Main head\n        translate([0,-30,40])\n        scale([1.1,1.3,1])\n        sphere(15,$fn=32);\n        \n        // Snout\n        translate([0,-45,38])\n        scale([0.8,0.6,0.6])\n        sphere(10,$fn=24);\n        \n        // Eyes\n        color(eye_red)\n        translate([-8,-38,45])\n        scale([0.8,1,1])\n        sphere(3,$fn=12);\n        translate([8,-38,45])\n        scale([0.8,1,1])\n        sphere(3,$fn=12);\n        \n        // Eye whites\n        color([1,1,1])\n        translate([-7,-39,46])\n        sphere(1,$fn=8);\n        translate([7,-39,46])\n        sphere(1,$fn=8);\n        \n        // Ears\n        color(body_green)\n        translate([-12,-20,52])\n        rotate([0,0,-30])\n        scale([0.5,1.2,2])\n        sphere(5,$fn=12);\n        translate([12,-20,52])\n        rotate([0,0,30])\n        scale([0.5,1.2,2])\n        sphere(5,$fn=12);\n        \n        // Mouth\n        color([0.2,0.1,0.1])\n        translate([0,-48,35])\n        cube([8,1,2],center=true);\n    }\n}\n\n// Leaf modules for back\nmodule back_leaf(x,y,angle) {\n    color(leaf_green)\n    translate([x,y,40])\n    rotate([0,0,angle])\n    scale([1,0.1,2])\n    cylinder(h=15,r1=0,r2=8,$fn=3);\n}\n\n// Assembly\nscale(0.8)\nunion() {\n    body();\n    \n    // Legs\n    leg(1);\n    leg(-1);\n    \n    // Arms\n    arm(1);\n    arm(-1);\n    \n    // Head\n    head();\n    \n    // Flower\n    flower();\n    \n    // Back leaves\n    back_leaf(15,15,45);\n    back_leaf(-15,15,-45);\n    back_leaf(0,20,0);\n}",
    "renders": true
  },
  {
    "pokemon": "mewtwo",
    "openscad_code": "// Mewtwo - Realistic Medium Complexity\n// 3D printable model with no overhangs\n\n$fn = 32;\n\n// Colors\ncolor_purple = [0.4, 0.2, 0.6];\ncolor_body = [0.85, 0.8, 0.9];\ncolor_stomach = [0.7, 0.7, 0.9];\ncolor_eyes = [0.9, 0.9, 0.1];\n\n// Main module\nmodule mewtwo() {\n    scale(0.5)\n    union() {\n        // Head\n        translate([0, 0, 35])\n        head();\n        \n        // Neck\n        translate([0, 0, 25])\n        cylinder(h=10, r1=8, r2=6);\n        \n        // Body\n        translate([0, 0, 12])\n        body();\n        \n        // Arms\n        translate([12, 0, 22])\n        rotate([0, 0, 15])\n        arm();\n        \n        translate([-12, 0, 22])\n        rotate([0, 0, -15])\n        mirror([1, 0, 0])\n        arm();\n        \n        // Legs\n        translate([6, 0, 0])\n        leg();\n        \n        translate([-6, 0, 0])\n        mirror([1, 0, 0])\n        leg();\n        \n        // Tail\n        translate([0, -12, 8])\n        rotate([0, 15, 0])\n        tail();\n        \n        // Tubes\n        for(i = [-1, 1]) {\n            translate([i*8, 8, 18])\n            rotate([90, 0, 0])\n            tube();\n        }\n    }\n}\n\nmodule head() {\n    color(color_body)\n    union() {\n        // Main head\n        sphere(r=12);\n        \n        // Snout\n        translate([0, 8, -2])\n        scale([1, 1.5, 0.8])\n        sphere(r=6);\n        \n        // Eyes\n        color(color_eyes)\n        for(i = [-1, 1]) {\n            translate([i*6, 5, 3])\n            rotate([0, 0, 0])\n            sphere(r=2.5);\n            \n            // Eye pupils\n            color([0, 0, 0])\n            translate([i*6.5, 5.5, 3.5])\n            sphere(r=1);\n        }\n        \n        // Ears\n        color(color_body)\n        for(i = [-1, 1]) {\n            translate([i*10, 0, 8])\n            rotate([0, 30*i, 0])\n            scale([1, 0.5, 2])\n            cylinder(h=12, r1=4, r2=2);\n        }\n        \n        // Purple markings\n        color(color_purple)\n        translate([0, 12, 0])\n        rotate([90, 0, 0])\n        cylinder(h=15, r=5);\n    }\n}\n\nmodule body() {\n    color(color_body)\n    difference() {\n        // Main torso\n        scale([1.2, 1, 1.5])\n        sphere(r=15);\n        \n        // Stomach area\n        color(color_stomach)\n        translate([0, 8, -6])\n        scale([0.8, 0.7, 0.5])\n        sphere(r=12);\n        \n        // Purple chest marking\n        color(color_purple)\n        translate([0, 10, -5])\n        rotate([90, 0, 0])\n        cylinder(h=8, r=6);\n    }\n}\n\nmodule arm() {\n    color(color_body)\n    union() {\n        // Upper arm\n        rotate([0, 0, 0])\n        cylinder(h=12, r1=4, r2=3);\n        \n        // Forearm\n        translate([0, 12, 0])\n        rotate([0, -30, 0])\n        cylinder(h=10, r1=3, r2=2.5);\n        \n        // Hand\n        translate([0, 20, -5])\n        sphere(r=3);\n        \n        // Fingers\n        for(i = [0:2]) {\n            rotate([0, 0, i*30-30])\n            translate([0, 2, 0])\n            cylinder(h=3, r=0.8);\n        }\n    }\n}\n\nmodule leg() {\n    color(color_body)\n    union() {\n        // Thigh\n        cylinder(h=12, r1=5, r2=4);\n        \n        // Shin\n        translate([0, 0, -12])\n        rotate([0, 15, 0])\n        cylinder(h=10, r1=4, r2=3);\n        \n        // Foot\n        translate([0, -2, -22])\n        scale([1.5, 2, 0.8])\n        sphere(r=4);\n    }\n}\n\nmodule tail() {\n    color(color_purple)\n    union() {\n        // Base\n        cylinder(h=5, r1=5, r2=4);\n        \n        // Main tail segments\n        for(i = [0:3]) {\n            translate([0, -i*8, -i*2])\n            rotate([0, 10*i, 0])\n            cylinder(h=8, r1=4-i*0.5, r2=3.5-i*0.5);\n        }\n        \n        // Tail tip\n        translate([0, -32, -8])\n        sphere(r=2);\n    }\n}\n\nmodule tube() {\n    color(color_purple)\n    difference() {\n        // Outer tube\n        cylinder(h=15, r=3);\n        \n        // Inner hole\n        cylinder(h=16, r=2);\n    }\n}\n\n// Generate model\nmewtwo();",
    "renders": true
  },
  {
    "pokemon": "mew",
    "openscad_code": "// Mew - Realistic Style OpenSCAD Model\n// Medium complexity 3D printable design\n\n// Colors\ncolor_pink = [255,192,203];\ncolor_cream = [255,235,205];\ncolor_blue = [173,216,230];\n\n// Main body\nmodule mew_body() {\n    color(color_pink)\n    union() {\n        // Torso\n        translate([0,0,15])\n        scale([1,0.8,1.2])\n        sphere(20);\n        \n        // Chest\n        translate([0,-5,10])\n        scale([0.6,0.5,0.8])\n        sphere(15);\n        \n        // Back curve\n        translate([0,0,25])\n        rotate([90,0,0])\n        cylinder(30, 15, 10);\n    }\n}\n\n// Head\nmodule mew_head() {\n    color(color_pink)\n    union() {\n        // Main head sphere\n        translate([0,0,50])\n        sphere(18);\n        \n        // Snout\n        translate([0,-15,45])\n        scale([0.8,0.6,0.7])\n        sphere(12);\n        \n        // Forehead bump\n        translate([0,0,60])\n        scale([0.5,0.5,0.6])\n        sphere(10);\n    }\n    \n    // Eyes\n    color(color_blue)\n    difference() {\n        // Left eye\n        translate([-10,-15,50])\n        scale([1.2,1,1])\n        sphere(5);\n        // Pupil\n        translate([-12,-17,52])\n        sphere(2);\n        \n        // Right eye\n        translate([10,-15,50])\n        scale([1.2,1,1])\n        sphere(5);\n        // Pupil\n        translate([12,-17,52])\n        sphere(2);\n    }\n    \n    // Mouth\n    color([0,0,0])\n    translate([0,-22,42])\n    rotate([90,0,0])\n    scale([1,0.5,0.5])\n    cylinder(2, 2, 0);\n}\n\n// Ears\nmodule mew_ears() {\n    color(color_pink)\n    union() {\n        // Left ear\n        translate([-15,0,60])\n        rotate([0,-30,0])\n        scale([0.7,0.4,1.5])\n        sphere(10);\n        \n        // Right ear\n        translate([15,0,60])\n        rotate([0,30,0])\n        scale([0.7,0.4,1.5])\n        sphere(10);\n    }\n}\n\n// Arms\nmodule mew_arms() {\n    color(color_pink)\n    union() {\n        // Left arm\n        translate([-25,0,30])\n        rotate([0,0,-45])\n        scale([0.4,0.4,1])\n        sphere(12);\n        \n        // Right arm\n        translate([25,0,30])\n        rotate([0,0,45])\n        scale([0.4,0.4,1])\n        sphere(12);\n    }\n}\n\n// Legs\nmodule mew_legs() {\n    color(color_pink)\n    union() {\n        // Left leg\n        translate([-12,-8,0])\n        rotate([0,0,0])\n        scale([0.4,0.4,1])\n        cylinder(15, 8, 6);\n        \n        // Right leg\n        translate([12,-8,0])\n        rotate([0,0,0])\n        scale([0.4,0.4,1])\n        cylinder(15, 8, 6);\n    }\n}\n\n// Tail\nmodule mew_tail() {\n    color(color_pink)\n    union() {\n        // Tail base\n        translate([0,25,25])\n        rotate([0,0,0])\n        scale([0.5,1.5,0.5])\n        sphere(15);\n        \n        // Tail tip\n        translate([0,45,35])\n        scale([0.3,0.8,0.3])\n        sphere(10);\n        \n        // Tail connector\n        translate([0,35,30])\n        scale([1,1,0.5])\n        sphere(8);\n    }\n}\n\n// Feet\nmodule mew_feet() {\n    color(color_cream)\n    union() {\n        // Left foot\n        translate([-12,-8,-5])\n        scale([1.2,1.5,0.8])\n        sphere(8);\n        \n        // Right foot\n        translate([12,-8,-5])\n        scale([1.2,1.5,0.8])\n        sphere(8);\n    }\n}\n\n// Belly marking\nmodule mew_belly() {\n    color(color_cream)\n    translate([0,0,15])\n    scale([0.6,0.7,0.8])\n    sphere(18);\n}\n\n// Main assembly\nmodule mew() {\n    union() {\n        mew_body();\n        mew_head();\n        mew_ears();\n        mew_arms();\n        mew_legs();\n        mew_tail();\n        mew_feet();\n        mew_belly();\n    }\n}\n\n// Generate the model\nscale([0.8,0.8,0.8])\nmew();",
    "renders": true
  },
  {
    "pokemon": "lugia",
    "openscad_code": "// Lugia - Realistic Style\n// Scale: 80mm tall\n\n// Main colors\ncolor_body = [0.85, 0.87, 0.89]; // Light silver\ncolor_accents = [0.05, 0.15, 0.35]; // Dark blue\ncolor_eyes = [0.9, 0.1, 0.1]; // Red\n\n// Body proportions\nscale_factor = 80/100;\n\nmodule head() {\n    union() {\n        // Main head shape\n        translate([0, 0, 40*scale_factor])\n            scale([1, 1.2, 1.3])\n            sphere(15*scale_factor);\n        \n        // Snout\n        translate([0, -18*scale_factor, 35*scale_factor])\n            scale([0.8, 0.6, 0.8])\n            sphere(12*scale_factor);\n        \n        // Back head extension\n        translate([0, 12*scale_factor, 42*scale_factor])\n            scale([0.6, 0.4, 0.5])\n            sphere(10*scale_factor);\n    }\n}\n\nmodule ears() {\n    // Left ear\n    translate([-12*scale_factor, 5*scale_factor, 52*scale_factor])\n        rotate([0, -20, -30])\n        scale([0.3, 2, 0.2])\n        cylinder(h=20*scale_factor, r=5*scale_factor);\n    \n    // Right ear\n    translate([12*scale_factor, 5*scale_factor, 52*scale_factor])\n        rotate([0, -20, 30])\n        scale([0.3, 2, 0.2])\n        cylinder(h=20*scale_factor, r=5*scale_factor);\n}\n\nmodule eyes() {\n    // Left eye\n    translate([-8*scale_factor, -15*scale_factor, 43*scale_factor])\n        rotate([0, 10, 0])\n        scale([1, 0.5, 0.8])\n        sphere(4*scale_factor);\n    \n    // Right eye\n    translate([8*scale_factor, -15*scale_factor, 43*scale_factor])\n        rotate([0, 10, 0])\n        scale([1, 0.5, 0.8])\n        sphere(4*scale_factor);\n}\n\nmodule neck() {\n    translate([0, 5*scale_factor, 30*scale_factor])\n        rotate([0, 0, 0])\n        scale([1, 0.8, 1.5])\n        cylinder(h=15*scale_factor, r1=12*scale_factor, r2=8*scale_factor);\n}\n\nmodule body() {\n    union() {\n        // Main torso\n        translate([0, 0, 15*scale_factor])\n            scale([1.2, 1, 1.5])\n            sphere(18*scale_factor);\n        \n        // Belly\n        translate([0, -5*scale_factor, 10*scale_factor])\n            scale([0.9, 0.7, 1.2])\n            sphere(15*scale_factor);\n    }\n}\n\nmodule wing() {\n    // Wing base\n    translate([0, 0, 0])\n        cube([5*scale_factor, 30*scale_factor, 2*scale_factor]);\n    \n    // Main wing\n    translate([0, -15*scale_factor, -5*scale_factor])\n        rotate([0, 15, 0])\n        cube([3*scale_factor, 20*scale_factor, 1*scale_factor]);\n    \n    // Wing tip\n    translate([0, -30*scale_factor, -8*scale_factor])\n        rotate([0, 30, 0])\n        cube([2*scale_factor, 10*scale_factor, 0.5*scale_factor]);\n}\n\nmodule wings() {\n    // Left wing\n    translate([-25*scale_factor, 0, 25*scale_factor])\n        rotate([0, 0, 30])\n        wing();\n    \n    // Right wing\n    translate([25*scale_factor, 0, 25*scale_factor])\n        rotate([0, 0, -30])\n        mirror([1, 0, 0])\n        wing();\n}\n\nmodule tail() {\n    union() {\n        // Main tail\n        translate([0, 20*scale_factor, 10*scale_factor])\n            rotate([0, 0, 0])\n            scale([0.6, 1, 0.4])\n            cylinder(h=25*scale_factor, r1=8*scale_factor, r2=6*scale_factor);\n        \n        // Tail fin\n        translate([0, 40*scale_factor, 8*scale_factor])\n            rotate([0, 0, 0])\n            scale([1, 0.1, 2])\n            cube([12*scale_factor, 3*scale_factor, 8*scale_factor]);\n    }\n}\n\nmodule back_plates() {\n    for(i = [0:2]) {\n        translate([0, 5*scale_factor + i*5*scale_factor, 25*scale_factor - i*3*scale_factor])\n            rotate([0, 0, 0])\n            scale([0.5, 0.3, 0.8])\n            sphere(5*scale_factor);\n    }\n}\n\nmodule feet() {\n    // Left foot\n    translate([-10*scale_factor, 0, 5*scale_factor])\n        union() {\n            cylinder(h=8*scale_factor, r=4*scale_factor);\n            translate([0, 2*scale_factor, -5*scale_factor])\n                cube([8*scale_factor, 6*scale_factor, 5*scale_factor]);\n        }\n    \n    // Right foot\n    translate([10*scale_factor, 0, 5*scale_factor])\n        union() {\n            cylinder(h=8*scale_factor, r=4*scale_factor);\n            translate([0, 2*scale_factor, -5*scale_factor])\n                cube([8*scale_factor, 6*scale_factor, 5*scale_factor]);\n        }\n}\n\n// Assembly\ncolor(color_body) {\n    head();\n    neck();\n    body();\n    tail();\n    feet();\n    wings();\n    ears();\n}\n\ncolor(color_accents) {\n    back_plates();\n}\n\ncolor(color_eyes) {\n    eyes();\n}",
    "renders": true
  },
  {
    "pokemon": "hooh",
    "openscad_code": "// Ho-oh Pokemon - Medium Complexity Realistic Style\n// Designed for 3D printing at ~80mm height\n\n$fn = 32;\n\n// Main colors\ncolor_gold = [0.8, 0.6, 0.1];\ncolor_red = [0.8, 0.1, 0.1];\ncolor_green = [0.1, 0.6, 0.2];\ncolor_white = [0.9, 0.9, 0.9];\ncolor_black = [0.1, 0.1, 0.1];\ncolor_beak = [0.9, 0.5, 0.1];\n\n// Overall scale\nscale(0.4) {\n    // Main body\n    color(color_gold) {\n        // Torso\n        translate([0, 0, 30]) {\n            difference() {\n                sphere(15);\n                translate([0, 0, -15]) cube([30, 30, 30], center=true);\n            }\n        }\n        \n        // Neck\n        translate([0, 0, 45]) {\n            cylinder(h=15, r1=8, r2=6);\n        }\n        \n        // Head\n        translate([0, 0, 60]) {\n            sphere(12);\n        }\n    }\n    \n    // Wings\n    module wing() {\n        color(color_red) {\n            // Upper wing\n            translate([-20, 0, 35]) {\n                rotate([0, 0, 20]) {\n                    scale([2, 0.5, 0.2]) sphere(10);\n                }\n            }\n            \n            // Lower wing\n            translate([-18, 0, 25]) {\n                rotate([0, 0, -10]) {\n                    scale([1.8, 0.4, 0.15]) sphere(10);\n                }\n            }\n            \n            // Wing tips\n            color(color_gold) {\n                translate([-28, 0, 35]) {\n                    sphere(3);\n                }\n                translate([-26, 0, 22]) {\n                    sphere(2.5);\n                }\n            }\n        }\n    }\n    \n    wing();\n    mirror([1, 0, 0]) wing();\n    \n    // Tail feathers\n    module tail_feather(angle, length) {\n        color(color_gold) {\n            translate([0, 10, 30]) {\n                rotate([0, angle, 0]) {\n                    translate([0, 0, -length/2]) {\n                        scale([0.3, 0.3, 1]) cylinder(h=length, r1=5, r2=3);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Multiple tail feathers\n    for (i = [-30:15:30]) {\n        tail_feather(i, 25 + abs(i)/3);\n    }\n    \n    // Beak\n    color(color_beak) {\n        translate([0, 12, 60]) {\n            rotate([-30, 0, 0]) {\n                scale([1, 0.8, 2]) cylinder(h=8, r1=0, r2=4);\n            }\n        }\n    }\n    \n    // Crest\n    color(color_white) {\n        translate([0, -10, 70]) {\n            for (i = [-15:15:15]) {\n                rotate([0, 0, i]) {\n                    translate([0, 3, 0]) {\n                        scale([0.3, 0.3, 2]) sphere(2);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Eyes\n    color(color_black) {\n        translate([5, 10, 60]) {\n            sphere(2);\n        }\n        translate([-5, 10, 60]) {\n            sphere(2);\n        }\n    }\n    \n    color(color_white) {\n        translate([6, 11, 61]) {\n            sphere(1);\n        }\n        translate([-4, 11, 61]) {\n            sphere(1);\n        }\n    }\n    \n    // Legs\n    module leg(x_pos) {\n        color(color_gold) {\n            translate([x_pos, 0, 15]) {\n                cylinder(h=15, r=3);\n                translate([0, 0, -10]) {\n                    sphere(4);\n                }\n                // Toes\n                for (i = [-30:30:30]) {\n                    rotate([0, 0, i]) {\n                        translate([3, 0, -7]) {\n                            scale([1, 0.3, 0.3]) sphere(2);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    leg(8);\n    leg(-8);\n    \n    // Chest pattern\n    color(color_green) {\n        translate([0, 6, 30]) {\n            scale([1, 0.5, 1]) sphere(8);\n        }\n    }\n    \n    // Wing patterns\n    module wing_pattern() {\n        color(color_green) {\n            translate([-15, 0, 35]) {\n                sphere(2);\n            }\n            translate([-20, 0, 32]) {\n                sphere(1.5);\n            }\n        }\n    }\n    \n    wing_pattern();\n    mirror([1, 0, 0]) wing_pattern();\n}",
    "renders": true
  },
  {
    "pokemon": "celebi",
    "openscad_code": "// Celebi OpenSCAD Model - Medium Complexity, Realistic Style\n// Approximate height: 70mm\n\n// Colors\ncolor_skin = [0.4, 0.8, 0.4]; // Light green\ncolor_detail = [0.2, 0.6, 0.2]; // Darker green\ncolor_blue = [0.2, 0.4, 0.8];\ncolor_eye = [0.4, 0.4, 0.6];\ncolor_white = [1, 1, 1];\n\n// Main body\nmodule body() {\n    color(color_skin)\n    union() {\n        // Torso\n        translate([0, 0, 15])\n            scale([1, 0.8, 1.2])\n            sphere(10, $fn=32);\n        \n        // Head\n        translate([0, 0, 35])\n            scale([0.9, 0.8, 1])\n            sphere(12, $fn=32);\n    }\n}\n\n// Eyes\nmodule eyes() {\n    // Left eye\n    translate([-4, 8, 37])\n        rotate([0, -10, 0])\n        color(color_eye)\n        difference() {\n            sphere(2.5, $fn=16);\n            translate([0, 0, -2])\n                cube([5, 5, 5], center=true);\n        }\n    \n    // Right eye\n    translate([4, 8, 37])\n        rotate([0, 10, 0])\n        color(color_eye)\n        difference() {\n            sphere(2.5, $fn=16);\n            translate([0, 0, -2])\n                cube([5, 5, 5], center=true);\n        }\n    \n    // Eye highlights\n    translate([-3.5, 8.5, 38.5])\n        color(color_white)\n        sphere(0.8, $fn=8);\n    translate([4.5, 8.5, 38.5])\n        color(color_white)\n        sphere(0.8, $fn=8);\n}\n\n// Mouth\nmodule mouth() {\n    translate([0, 5, 32])\n        color(color_detail)\n        scale([1, 0.5, 0.3])\n        sphere(2, $fn=16);\n}\n\n// Ears\nmodule ears() {\n    // Left ear\n    translate([-8, 0, 45])\n        rotate([0, -30, -20])\n        union() {\n            color(color_skin)\n            scale([0.3, 0.3, 2])\n            cylinder(h=10, r=3, $fn=16);\n            \n            color(color_blue)\n            translate([0, 0, 10])\n                scale([0.5, 0.5, 0.5])\n                sphere(3, $fn=16);\n        }\n    \n    // Right ear\n    translate([8, 0, 45])\n        rotate([0, 30, 20])\n        union() {\n            color(color_skin)\n            scale([0.3, 0.3, 2])\n            cylinder(h=10, r=3, $fn=16);\n            \n            color(color_blue)\n            translate([0, 0, 10])\n                scale([0.5, 0.5, 0.5])\n                sphere(3, $fn=16);\n        }\n}\n\n// Arms\nmodule arms() {\n    // Left arm\n    translate([-12, 0, 25])\n        rotate([0, 0, -20])\n        color(color_skin)\n        union() {\n            scale([0.4, 0.4, 1.5])\n            sphere(4, $fn=16);\n            \n            translate([0, 0, -6])\n                scale([0.3, 0.3, 1])\n                cylinder(h=6, r=3, $fn=16);\n        }\n    \n    // Right arm\n    translate([12, 0, 25])\n        rotate([0, 0, 20])\n        color(color_skin)\n        union() {\n            scale([0.4, 0.4, 1.5])\n            sphere(4, $fn=16);\n            \n            translate([0, 0, -6])\n                scale([0.3, 0.3, 1])\n                cylinder(h=6, r=3, $fn=16);\n        }\n}\n\n// Legs\nmodule legs() {\n    // Left leg\n    translate([-5, 0, 5])\n        color(color_skin)\n        union() {\n            scale([0.4, 0.4, 1.5])\n            sphere(4, $fn=16);\n            \n            translate([0, 0, -8])\n                scale([0.3, 0.3, 1])\n                cylinder(h=8, r=3, $fn=16);\n        }\n    \n    // Right leg\n    translate([5, 0, 5])\n        color(color_skin)\n        union() {\n            scale([0.4, 0.4, 1.5])\n            sphere(4, $fn=16);\n            \n            translate([0, 0, -8])\n                scale([0.3, 0.3, 1])\n                cylinder(h=8, r=3, $fn=16);\n        }\n}\n\n// Wings\nmodule wings() {\n    // Left wing\n    translate([-15, 0, 30])\n        rotate([0, 0, -30])\n        color(color_detail)\n        scale([2, 0.1, 1.5])\n        difference() {\n            sphere(5, $fn=16);\n            translate([5, 0, 0])\n                cube([10, 2, 10], center=true);\n        }\n    \n    // Right wing\n    translate([15, 0, 30])\n        rotate([0, 0, 30])\n        color(color_detail)\n        scale([2, 0.1, 1.5])\n        difference() {\n            sphere(5, $fn=16);\n            translate([-5, 0, 0])\n                cube([10, 2, 10], center=true);\n        }\n}\n\n// Tail\nmodule tail() {\n    translate([0, -12, 20])\n        rotate([30, 0, 0])\n        color(color_skin)\n        scale([0.5, 0.5, 2])\n        sphere(6, $fn=16);\n}\n\n// Body markings\nmodule markings() {\n    // Chest marking\n    translate([0, 5, 25])\n        color(color_detail)\n        scale([0.8, 0.6, 0.3])\n        rotate([90, 0, 0])\n        cylinder(h=0.5, r=5, $fn=16);\n    \n    // Eye marking\n    translate([0, 9, 39])\n        color(color_detail)\n        scale([2, 0.5, 0.3])\n        sphere(2, $fn=16);\n}\n\n// Main assembly\nunion() {\n    body();\n    eyes();\n    mouth();\n    ears();\n    arms();\n    legs();\n    wings();\n    tail();\n    markings();\n}",
    "renders": true
  },
  {
    "pokemon": "rayquaza",
    "openscad_code": "// Rayquaza - Medium complexity realistic style\n// Overall size ~80mm\n\n$fn = 32;\nscale_factor = 1.5;\n\nmodule body_segment(r, h, color_val) {\n    color(color_val)\n    difference() {\n        union() {\n            cylinder(h=h, r1=r, r2=r*0.9);\n            translate([0, 0, h/2])\n                sphere(r=r*1.1);\n        }\n        translate([0, -r-1, h/2])\n            cube([r*2, r*2, h*2], center=true);\n    }\n}\n\nmodule fin(base_w, base_h, length, thickness, color_val) {\n    color(color_val)\n    for(i=[0:1]) mirror([i==0?1:0, 0, 0]) {\n        hull() {\n            translate([0, 0, 0])\n                cube([thickness, base_w, base_h], center=true);\n            translate([length, 0, base_h/2])\n                scale([0.2, 0.5, 0.5])\n                    sphere(r=base_w);\n        }\n    }\n}\n\nmodule head() {\n    color([0.1, 0.5, 0.2])\n    union() {\n        // Main head\n        translate([0, 0, 15])\n            scale([1, 0.8, 1.2])\n                sphere(r=10);\n        \n        // Snout\n        translate([0, 0, -5])\n            cylinder(h=15, r1=8, r2=5);\n        \n        // Yellow jaw markings\n        color([1, 0.8, 0])\n        translate([0, 5.5, 2])\n            cube([12, 1, 6], center=true);\n        \n        // Eyes\n        color([1, 1, 0])\n        for(x=[-1, 1]) {\n            translate([x*5, 7, 10])\n                scale([1, 0.5, 1.5])\n                    rotate([90, 0, 0])\n                        cylinder(h=1, r=2);\n        }\n        \n        // Red eye markings\n        color([0.8, 0, 0])\n        for(x=[-1, 1]) {\n            translate([x*5, 7.5, 10])\n                cube([4, 1, 5], center=true);\n        }\n    }\n}\n\nmodule body() {\n    // Head\n    translate([0, 0, 80])\n        rotate([0, 20, 0])\n            head();\n    \n    // Neck segments\n    translate([0, 0, 70])\n        body_segment(9, 8, [0.1, 0.5, 0.2]);\n    translate([0, 0, 60])\n        body_segment(8.5, 8, [0.1, 0.5, 0.2]);\n    \n    // Body segments\n    for(i=[0:7]) {\n        translate([0, 0, 50-i*6])\n            body_segment(8-i*0.3, 6, [0.1, 0.5, 0.2]);\n    }\n}\n\nmodule arms() {\n    color([0.1, 0.5, 0.2])\n    for(side=[-1, 1]) {\n        translate([side*10, 0, 45])\n            rotate([0, 0, side*30])\n                cylinder(h=15, r=2.5);\n    }\n}\n\nmodule wings() {\n    color([0.1, 0.5, 0.2])\n    for(side=[-1, 1]) {\n        translate([side*12, 0, 55])\n            rotate([0, 0, side*15])\n                fin(1, 20, 25, 1, [0.1, 0.5, 0.2]);\n    }\n}\n\nmodule tail_fin() {\n    color([0.1, 0.5, 0.2])\n    translate([0, 0, 5])\n        rotate([0, 0, 0])\n            fin(1, 15, 20, 1.5, [0.1, 0.5, 0.2]);\n}\n\nmodule yellow_markings() {\n    color([1, 0.8, 0])\n    for(i=[0:3]) {\n        translate([0, 0, 30-i*10])\n            cylinder(h=2, r=9-i*0.5);\n    }\n    translate([0, 0, 8])\n        cylinder(h=2, r=6);\n}\n\n// Main assembly\nscale([scale_factor, scale_factor, scale_factor])\nrotate([0, 180, 0])\nunion() {\n    body();\n    arms();\n    wings();\n    tail_fin();\n    yellow_markings();\n}",
    "renders": true
  },
  {
    "pokemon": "groudon",
    "openscad_code": "// Groudon - Realistic Style (Medium Complexity)\n// Scale for 3D printing - 80mm height\n\nmodule groudon_body() {\n    // Main torso\n    color(\"#B22222\") {\n        translate([0, 0, 15]) \n            scale([1.2, 0.8, 1]) \n                cylinder(h=20, r1=15, r2=12, $fn=20);\n        \n        // Chest plate\n        translate([0, 0, 30]) \n            scale([0.8, 0.6, 0.5]) \n                cube([25, 20, 5], center=true);\n    }\n}\n\nmodule groudon_head() {\n    color(\"#B22222\") {\n        // Head base\n        translate([0, 20, 35]) \n            rotate([45, 0, 0]) \n                scale([1.2, 1, 1.2]) \n                    sphere(12, $fn=20);\n        \n        // Snout\n        translate([0, 30, 35]) \n            scale([0.8, 1.5, 0.8]) \n                cylinder(h=8, r=6, $fn=10);\n    }\n    \n    // White jaw\n    color(\"#F5F5F5\") {\n        translate([0, 34, 30]) \n            scale([0.6, 0.3, 0.3]) \n                cube([10, 8, 6], center=true);\n    }\n    \n    // Eyes\n    color(\"#FFD700\") {\n        for(x=[-4, 4]) {\n            translate([x, 28, 38]) \n                sphere(2.5, $fn=8);\n        }\n    }\n    \n    // Head spikes\n    color(\"#8B0000\") {\n        for(angle=[0, 45, -45]) {\n            rotate([0, 0, angle]) \n                translate([0, 20, 45]) \n                    rotate_extrude(angle=90, $fn=3) \n                        translate([0, 0, 0]) \n                            polygon([[0,0], [2,0], [0,5]]);\n        }\n    }\n}\n\nmodule groudon_limbs() {\n    // Arms\n    color(\"#B22222\") {\n        for(side=[-1, 1]) {\n            translate([side*12, 10, 25]) {\n                rotate([0, -side*20, 0]) \n                    cylinder(h=15, r=4, $fn=8);\n                translate([0, 0, 8]) \n                    rotate([90, 0, 0]) \n                        cylinder(h=8, r=3, $fn=8);\n            }\n        }\n    }\n    \n    // Legs\n    color(\"#B22222\") {\n        for(side=[-1, 1]) {\n            translate([side*10, -5, 15]) {\n                rotate([30, 0, 0]) \n                    cylinder(h=20, r=5, $fn=8);\n                translate([0, 0, 18]) \n                    rotate([0, 0, 90]) \n                        scale([1.5, 1, 0.8]) \n                            sphere(4, $fn=8);\n            }\n        }\n    }\n}\n\nmodule groudon_tail() {\n    color(\"#B22222\") {\n        hull() {\n            translate([0, -15, 15]) \n                sphere(6, $fn=8);\n            translate([0, -25, 12]) \n                sphere(4, $fn=8);\n            translate([0, -35, 10]) \n                sphere(3, $fn=8);\n        }\n    }\n    \n    // Tail spikes\n    color(\"#8B0000\") {\n        for(pos=[[0, -20, 15], [0, -30, 12]]) {\n            translate(pos) \n                rotate([0, 0, 180]) \n                    rotate_extrude(angle=90, $fn=3) \n                        polygon([[0,0], [2,0], [0,3]]);\n        }\n    }\n}\n\nmodule groudon_back_plates() {\n    color(\"#8B0000\") {\n        for(i=[-1:0.5:1]) {\n            translate([i*10, 0, 35]) \n                rotate([0, 0, i*10]) \n                    scale([0.8, 0.3, 0.8]) \n                        cube([8, 2, 6], center=true);\n        }\n    }\n}\n\nmodule groudon_markings() {\n    // Black stripes\n    color(\"#000000\") {\n        for(pos=[[0, 5, 20], [0, 10, 25]]) {\n            translate(pos) \n                scale([1.2, 0.3, 0.1]) \n                    cube([20, 8, 2], center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    groudon_body();\n    groudon_head();\n    groudon_limbs();\n    groudon_tail();\n    groudon_back_plates();\n    groudon_markings();\n}",
    "renders": true
  },
  {
    "pokemon": "kyogre",
    "openscad_code": "// Kyogre OpenSCAD Model - Medium Complexity Realistic Style\n// Overall dimensions approximately 80mm length\n\n$fn = 32;\n\n// Main body color\nkyogre_blue = [0.2, 0.4, 0.8];\nkyogre_red = [0.8, 0.2, 0.2];\nkyogre_white = [0.9, 0.9, 0.9];\nkyogre_yellow = [1, 0.8, 0];\n\n// Main body\nmodule kyogre_body() {\n    color(kyogre_blue)\n    union() {\n        // Central torso\n        translate([0, 0, 10])\n            scale([1.2, 0.8, 1])\n            sphere(r=20);\n        \n        // Front extension\n        translate([-25, 0, 5])\n            scale([1.5, 0.7, 0.8])\n            sphere(r=15);\n        \n        // Rear extension\n        translate([25, 0, 5])\n            scale([1.2, 0.9, 0.9])\n            sphere(r=15);\n    }\n}\n\n// Tail fin\nmodule kyogre_tail() {\n    color(kyogre_blue)\n    translate([35, 0, 5]) {\n        rotate([0, 0, 45])\n            scale([2, 0.2, 1])\n            sphere(r=15);\n        rotate([0, 0, -45])\n            scale([2, 0.2, 1])\n            sphere(r=15);\n    }\n}\n\n// Side fins\nmodule side_fin(side) {\n    color(kyogre_blue)\n    mirror([side, 0, 0])\n    translate([0, -15, 0]) {\n        rotate([0, 0, 30])\n            scale([0.8, 0.1, 0.6])\n            cylinder(h=25, r1=10, r2=5);\n    }\n}\n\n// Dorsal fin\nmodule dorsal_fin() {\n    color(kyogre_blue)\n    translate([5, 0, 25]) {\n        for(i = [0:4]) {\n            translate([i*3, 0, 0])\n                scale([0.3, 1, 1])\n                cylinder(h=15-i*2, r=3);\n        }\n    }\n}\n\n// Head details\nmodule kyogre_head() {\n    color(kyogre_blue)\n    union() {\n        // Main head\n        translate([-35, 0, 15])\n            scale([1.3, 1, 1.2])\n            sphere(r=15);\n        \n        // Snout\n        translate([-45, 0, 15])\n            scale([0.8, 0.6, 0.6])\n            sphere(r=10);\n        \n        // Eye sockets\n        color(kyogre_white)\n        translate([-38, -8, 22])\n            sphere(r=4);\n        translate([-38, 8, 22])\n            sphere(r=4);\n        \n        // Eyes\n        color(kyogre_red)\n        translate([-40, -8, 22])\n            sphere(r=2);\n        translate([-40, 8, 22])\n            sphere(r=2);\n        \n        // Mouth\n        color(kyogre_red)\n        translate([-45, 0, 10])\n            rotate([90, 0, 0])\n            cylinder(h=1, r1=5, r2=0);\n    }\n}\n\n// Markings\nmodule markings() {\n    color(kyogre_white)\n    union() {\n        // Chest marking\n        translate([-20, 0, 5])\n            scale([1, 0.8, 0.1])\n            sphere(r=10);\n        \n        // Side markings\n        for(side = [-1, 1]) {\n            mirror([side, 0, 0])\n            translate([0, -12, 10])\n                rotate([0, 0, 45])\n                scale([0.5, 0.1, 0.3])\n                cylinder(h=20, r=5);\n        }\n    }\n    \n    // Yellow stripes\n    color(kyogre_yellow)\n    for(side = [-1, 1]) {\n        mirror([side, 0, 0])\n        translate([-10, -12, 15])\n            rotate([90, 0, 0])\n            cylinder(h=1, r=2);\n    }\n}\n\n// Assembly\nkyogre_body();\nkyogre_tail();\nside_fin(1);\nside_fin(-1);\ndorsal_fin();\nkyogre_head();\nmarkings();",
    "renders": true
  },
  {
    "pokemon": "dialga",
    "openscad_code": "// Dialga - Realistic Style, Medium Complexity\n// Approximate size: 80mm tall, 100mm long\n\n// Main colors\nsteel_blue = [0.27, 0.51, 0.71];\nlight_blue = [0.68, 0.85, 0.90];\ndark_steel = [0.18, 0.31, 0.41];\nsilver = [0.75, 0.75, 0.75];\nblack = [0.1, 0.1, 0.1];\n\n// Main body module\nmodule dialga_body() {\n    color(steel_blue)\n    union() {\n        // Torso\n        translate([0, 0, 30])\n            scale([1.2, 0.8, 1])\n                sphere(r=20);\n        \n        // Chest plate\n        translate([0, 15, 25])\n            cube([30, 8, 25], center=true);\n            \n        // Back ridge\n        for(i = [-1, 1])\n            translate([i*15, -15, 35])\n                cube([5, 10, 30], center=true);\n    }\n}\n\n// Head module\nmodule dialga_head() {\n    color(steel_blue)\n    union() {\n        // Main head\n        translate([0, 30, 45])\n            scale([0.8, 1, 1])\n                sphere(r=18);\n        \n        // Snout\n        translate([0, 45, 40])\n            scale([0.6, 1.2, 0.8])\n                sphere(r=12);\n        \n        // Crest\n        color(light_blue)\n        translate([0, 25, 60])\n            for(i = [-1, 0, 1])\n                translate([i*8, 0, 0])\n                    cube([3, 5, 12], center=true);\n        \n        // Eyes\n        color(black)\n        translate([-8, 40, 48])\n            sphere(r=3);\n        translate([8, 40, 48])\n            sphere(r=3);\n    }\n}\n\n// Leg modules\nmodule dialga_legs() {\n    color(steel_blue)\n    union() {\n        // Front legs\n        for(side = [-1, 1]) {\n            translate([side*15, 15, 15]) {\n                // Upper leg\n                rotate([0, 15, 0])\n                    cylinder(h=20, r1=6, r2=5);\n                \n                // Lower leg\n                translate([0, 0, -20])\n                    rotate([0, -15, 0])\n                        cylinder(h=15, r1=5, r2=4);\n                \n                // Foot\n                translate([0, 0, -35])\n                    scale([1.5, 2, 1])\n                        sphere(r=4);\n            }\n        }\n        \n        // Back legs\n        for(side = [-1, 1]) {\n            translate([side*12, -15, 15]) {\n                // Upper leg\n                rotate([0, -10, 0])\n                    cylinder(h=25, r1=7, r2=6);\n                \n                // Lower leg\n                translate([0, 0, -25])\n                    rotate([0, 10, 0])\n                        cylinder(h=18, r1=6, r2=5);\n                \n                // Foot\n                translate([0, 0, -43])\n                    scale([2, 2.5, 1])\n                        sphere(r=5);\n            }\n        }\n    }\n}\n\n// Tail module\nmodule dialga_tail() {\n    color(steel_blue)\n    union() {\n        // Tail segments\n        for(i = [0:4]) {\n            translate([0, -25 - i*8, 30 - i*3])\n                scale([1 - i*0.15, 1 - i*0.1, 0.8 - i*0.1])\n                    sphere(r=12 - i*2);\n        }\n        \n        // Tail spikes\n        color(dark_steel)\n        for(i = [1:3]) {\n            translate([0, -30 - i*8, 35 - i*3])\n                rotate([0, 0, 45])\n                    cube([2, 15, 2], center=true);\n        }\n    }\n}\n\n// Shoulder armor\nmodule shoulder_armor() {\n    color(dark_steel)\n    for(side = [-1, 1]) {\n        translate([side*25, 20, 35])\n            rotate([0, 0, side*30])\n                cube([8, 12, 15], center=true);\n    }\n}\n\n// Chest diamond\nmodule chest_diamond() {\n    color(light_blue)\n    translate([0, 15, 30])\n        scale([1, 0.5, 1])\n            cylinder(h=3, r=8, $fn=6);\n}\n\n// Back plates\nmodule back_plates() {\n    color(dark_steel)\n    for(i = [-1, 0, 1]) {\n        translate([i*12, -5, 40])\n            rotate([0, 15, 0])\n                cube([10, 3, 8], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    dialga_body();\n    dialga_head();\n    dialga_legs();\n    dialga_tail();\n    shoulder_armor();\n    chest_diamond();\n    back_plates();\n}",
    "renders": true
  },
  {
    "pokemon": "palkia",
    "openscad_code": "// Palkia - Realistic Style, Medium Complexity\n// Scaled for 3D printing ~80mm height\n\n$fn = 32;\n\n// Main colors\ncolor_purple = [0.4, 0.2, 0.6];\ncolor_light_purple = [0.6, 0.4, 0.8];\ncolor_white = [0.9, 0.9, 0.95];\ncolor_gray = [0.5, 0.5, 0.6];\ncolor_red = [0.8, 0.1, 0.1];\ncolor_gold = [0.85, 0.65, 0.15];\n\n// Main body module\nmodule palkia_body() {\n    // Central torso\n    color(color_purple)\n    scale([1, 0.8, 1.2])\n    sphere(15);\n    \n    // Chest plate\n    color(color_white)\n    translate([0, -12, 5])\n    scale([1.2, 0.3, 1.5])\n    sphere(12);\n    \n    // Shoulder spheres\n    for(side = [-1, 1]) {\n        color(color_light_purple)\n        translate([side * 18, 0, 8])\n        sphere(8);\n    }\n}\n\n// Head module\nmodule palkia_head() {\n    // Main head\n    color(color_purple)\n    translate([0, -20, 25])\n    scale([0.9, 1.1, 1.2])\n    sphere(12);\n    \n    // Snout\n    color(color_purple)\n    translate([0, -30, 22])\n    scale([0.6, 1.5, 0.8])\n    sphere(8);\n    \n    // Eyes\n    for(side = [-1, 1]) {\n        color(color_red)\n        translate([side * 6, -28, 28])\n        sphere(3);\n        \n        // Eye highlights\n        color(color_white)\n        translate([side * 6.5, -29, 29])\n        sphere(1);\n    }\n    \n    // Crest\n    color(color_gray)\n    translate([0, -22, 38])\n    scale([0.3, 0.3, 2])\n    cylinder(15, 8, 2);\n    \n    // Crest rings\n    for(i = [1:3]) {\n        color(color_gold)\n        translate([0, -22, 38 + i * 3])\n        cylinder(0.5, 8 + i * 2, 8 + i * 2);\n    }\n}\n\n// Arm module\nmodule palkia_arm(side) {\n    // Upper arm\n    color(color_purple)\n    translate([side * 25, -5, 8])\n    rotate([0, 0, side * 20])\n    scale([0.8, 0.8, 2])\n    cylinder(12, 5, 4);\n    \n    // Lower arm\n    color(color_purple)\n    translate([side * 30, -5, -5])\n    rotate([0, 0, side * 30])\n    scale([0.7, 0.7, 1.5])\n    cylinder(10, 4, 6);\n    \n    // Hand with pearl\n    color(color_purple)\n    translate([side * 35, -5, -16])\n    sphere(5);\n    \n    color(color_white)\n    translate([side * 37, -5, -16])\n    sphere(3);\n    \n    // Shoulder armor\n    color(color_gray)\n    translate([side * 18, 0, 8])\n    rotate([0, 90, 0])\n    cylinder(3, 8, 8);\n}\n\n// Leg module\nmodule palkia_leg(side) {\n    // Upper leg\n    color(color_purple)\n    translate([side * 12, 0, -15])\n    rotate([side * 10, 0, 0])\n    scale([0.8, 0.8, 1.5])\n    cylinder(15, 6, 5);\n    \n    // Lower leg\n    color(color_purple)\n    translate([side * 14, 0, -30])\n    rotate([side * 15, 0, 0])\n    scale([0.7, 0.7, 1.2])\n    cylinder(12, 5, 6);\n    \n    // Foot\n    color(color_purple)\n    translate([side * 16, 0, -42])\n    scale([1.2, 2, 1])\n    cube([8, 12, 6], center = true);\n}\n\n// Tail module\nmodule palkia_tail() {\n    color(color_purple)\n    translate([0, 20, -15])\n    rotate([0, 0, 180])\n    cylinder(25, 8, 4);\n    \n    // Tail fin\n    color(color_gray)\n    translate([0, 45, -15])\n    rotate([90, 0, 0])\n    linear_extrude(2)\n    polygon(points=[[0,0],[-15,10],[0,20],[15,10]]);\n}\n\n// Back wings\nmodule palkia_wings() {\n    for(side = [-1, 1]) {\n        // Wing base\n        color(color_purple)\n        translate([side * 20, 10, 5])\n        rotate([0, side * 30, 0])\n        scale([0.3, 2, 1])\n        cube([8, 25, 15], center = true);\n        \n        // Wing armor\n        color(color_gray)\n        translate([side * 25, 10, 5])\n        rotate([0, side * 30, 0])\n        scale([0.2, 1.5, 0.8])\n        cube([6, 20, 12], center = true);\n    }\n}\n\n// Assembly\nmodule palkia() {\n    palkia_body();\n    palkia_head();\n    \n    // Arms\n    for(side = [-1, 1]) {\n        palkia_arm(side);\n    }\n    \n    // Legs\n    for(side = [-1, 1]) {\n        palkia_leg(side);\n    }\n    \n    palkia_tail();\n    palkia_wings();\n    \n    // Chest gems\n    color(color_gold)\n    translate([0, -12, 12])\n    sphere(2);\n    \n    // Body markings\n    for(i = [1:3]) {\n        color(color_white)\n        translate([0, -5 + i * 5, 10 - i * 2])\n        rotate([90, 0, 0])\n        cylinder(0.5, 5 + i, 5 + i);\n    }\n}\n\n// Main assembly with scale for 3D printing\nscale([0.8, 0.8, 0.8])\npalkia();",
    "renders": true
  },
  {
    "pokemon": "giratina",
    "openscad_code": "// Giratina (Altered Forme) - Realistic Style, Medium Complexity\n// Overall size: ~70mm tall\n\n$fn = 36;\nmodule giratina() {\n    color([0.15, 0.15, 0.25]) {\n        // Main body\n        translate([0, 0, 20]) rotate([0, 0, 0]) body();\n        // Head\n        translate([0, 0, 55]) rotate([0, 0, 0]) head();\n        // Six wings\n        translate([25, 15, 40]) rotate([0, 0, 45]) wing();\n        translate([-25, 15, 40]) rotate([0, 0, -45]) mirror([1,0,0]) wing();\n        translate([25, -15, 40]) rotate([0, 0, -45]) wing();\n        translate([-25, -15, 40]) rotate([0, 0, 45]) mirror([1,0,0]) wing();\n        translate([15, 25, 35]) rotate([0, 0, 90]) wing();\n        translate([-15, -25, 35]) rotate([0, 0, -90]) mirror([1,0,0]) wing();\n        // Six legs\n        translate([12, 12, 5]) rotate([0, 0, 30]) leg();\n        translate([-12, 12, 5]) rotate([0, 0, -30]) mirror([1,0,0]) leg();\n        translate([12, -12, 5]) rotate([0, 0, -30]) leg();\n        translate([-12, -12, 5]) rotate([0, 0, 30]) mirror([1,0,0]) leg();\n        translate([8, 0, 0]) rotate([0, 0, 0]) leg();\n        translate([-8, 0, 0]) rotate([0, 0, 0]) mirror([1,0,0]) leg();\n        // Tail\n        translate([0, 0, 15]) rotate([0, 0, 0]) tail();\n    }\n}\n\nmodule body() {\n    difference() {\n        union() {\n            // Main torso\n            scale([1.2, 1, 1.5]) sphere(12);\n            // Chest armor\n            translate([0, 12, 0]) scale([1.3, 0.5, 1.2]) sphere(10);\n        }\n        // Neck hole\n        translate([0, 0, 15]) cylinder(10, 6, 6, true);\n    }\n}\n\nmodule head() {\n    union() {\n        // Main head shape\n        translate([0, 8, 0]) scale([1, 0.8, 1.2]) sphere(10);\n        // Snout\n        translate([0, 18, 0]) scale([0.8, 0.5, 0.6]) sphere(8);\n        // Crest\n        translate([0, 0, 12]) scale([0.3, 0.3, 1]) sphere(15);\n        // Side horns\n        translate([8, 5, 8]) rotate([0, 0, 30]) cylinder(10, 2, 0);\n        translate([-8, 5, 8]) rotate([0, 0, -30]) cylinder(10, 2, 0);\n        // Eyes\n        color([0.9, 0.1, 0.1]) {\n            translate([6, 12, 2]) scale([1, 0.5, 1]) sphere(3);\n            translate([-6, 12, 2]) scale([1, 0.5, 1]) sphere(3);\n        }\n        // Gold markings\n        color([0.8, 0.7, 0.2]) {\n            translate([0, 12, 4]) scale([1.5, 0.2, 0.5]) sphere(3);\n            translate([0, 8, 6]) scale([0.8, 0.2, 0.8]) sphere(3);\n        }\n    }\n}\n\nmodule wing() {\n    difference() {\n        union() {\n            // Main wing blade\n            translate([0, 0, 0]) scale([1, 0.2, 3]) sphere(8);\n            // Red wing tips\n            color([0.9, 0.1, 0.1]) {\n                translate([0, 0, 20]) scale([0.8, 0.8, 0.5]) sphere(5);\n            }\n        }\n        // Cutout pattern\n        translate([0, 0, 10]) scale([0.5, 0.5, 0.5]) sphere(8);\n    }\n}\n\nmodule leg() {\n    union() {\n        // Upper leg\n        cylinder(12, 4, 3);\n        // Lower leg\n        translate([0, 0, -12]) rotate([20, 0, 0]) cylinder(10, 3, 2);\n        // Foot\n        translate([0, 0, -22]) rotate([45, 0, 0]) scale([1, 0.5, 0.3]) sphere(6);\n    }\n}\n\nmodule tail() {\n    difference() {\n        union() {\n            // Main tail segments\n            for (i = [0:3]) {\n                translate([0, 0, -i*8]) scale([1-i*0.15, 1-i*0.15, 1]) sphere(8);\n            }\n            // Tail spikes\n            color([0.9, 0.1, 0.1]) {\n                for (i = [0:3]) {\n                    translate([0, 0, -i*8-4]) rotate([0, 0, 45+i*30]) \n                    scale([0.3, 0.3, 1]) sphere(5);\n                }\n            }\n        }\n        // Hollow center for printability\n        for (i = [0:3]) {\n            translate([0, 0, -i*8]) scale([0.7-i*0.15, 0.7-i*0.15, 1]) sphere(7);\n        }\n    }\n}\n\n// Render the complete model\ngiratina();",
    "renders": true
  },
  {
    "pokemon": "arceus",
    "openscad_code": "// Arceus OpenSCAD Model - Realistic Medium Complexity\n// 3D printable model with proper wall thickness and no overhangs\n\n// Overall scale factor for printing\nscale_factor = 0.5;\n\n// Color definitions\ncolor_body = [0.9, 0.85, 0.75];      // Cream white\ncolor_gold = [0.8, 0.7, 0.3];       // Gold accents\ncolor_wheel = [0.4, 0.3, 0.7];      // Green wheel\ncolor_eye = [0.1, 0.1, 0.1];        // Black eyes\ncolor_red = [0.7, 0.2, 0.2];        // Red gems\n\n// Main body module\nmodule arceus_body() {\n    color(color_body) {\n        // Torso - horse-like body\n        translate([0, 0, 25])\n            scale([1.2, 0.8, 1.5])\n            sphere(d=40);\n        \n        // Neck\n        translate([0, 25, 35])\n            rotate([20, 0, 0])\n            cylinder(h=30, d1=15, d2=20);\n        \n        // Head\n        translate([0, 32, 50])\n            scale([1.3, 1.8, 1.1])\n            sphere(d=25);\n    }\n}\n\n// Golden wheel on abdomen\nmodule arceus_wheel() {\n    color(color_wheel) {\n        translate([0, 0, 15])\n            rotate([90, 0, 0])\n            cylinder(h=8, d=60);\n        \n        // Wheel spokes\n        for(i=[0:30:330]) {\n            rotate([0, 0, i])\n                translate([25, 0, 15])\n                    cube([25, 3, 8], center=true);\n        }\n        \n        // Central gem\n        color(color_red)\n            translate([0, 0, 19])\n                sphere(d=12);\n    }\n}\n\n// Legs module\nmodule arceus_legs() {\n    color(color_body) {\n        // Front legs\n        translate([15, 15, 0]) leg();\n        translate([-15, 15, 0]) leg();\n        \n        // Back legs\n        translate([15, -15, 0]) leg();\n        translate([-15, -15, 0]) leg();\n    }\n}\n\n// Single leg with golden hoof\nmodule leg() {\n    union() {\n        // Upper leg\n        cylinder(h=20, d=12);\n        \n        // Lower leg\n        translate([0, 0, -20])\n            cylinder(h=20, d=10);\n        \n        // Golden hoof\n        color(color_gold)\n            translate([0, 0, -40])\n                cylinder(h=5, d=12);\n    }\n}\n\n// Tail module\nmodule arceus_tail() {\n    color(color_body) {\n        translate([0, -35, 20])\n            rotate([0, 10, 0])\n            scale([0.8, 0.8, 1.2])\n            sphere(d=25);\n    }\n}\n\n// Head details\nmodule head_details() {\n    // Eyes\n    color(color_eye) {\n        translate([8, 35, 52])\n            sphere(d=4);\n        translate([-8, 35, 52])\n            sphere(d=4);\n    }\n    \n    // Golden crest on forehead\n    color(color_gold)\n        translate([0, 40, 55])\n            cube([15, 3, 8], center=true);\n    \n    // Mouth\n    color([0.2, 0.2, 0.2])\n        translate([0, 42, 45])\n            cube([8, 2, 1], center=true);\n}\n\n// Golden accents on body\nmodule body_accents() {\n    color(color_gold) {\n        // Shoulder plates\n        translate([20, 15, 25])\n            cube([8, 12, 3]);\n        translate([-20, 15, 25])\n            cube([8, 12, 3]);\n        \n        // Hip plates\n        translate([20, -15, 25])\n            cube([8, 12, 3]);\n        translate([-20, -15, 25])\n            cube([8, 12, 3]);\n        \n        // Chest plate\n        translate([0, 25, 30])\n            cube([15, 8, 3]);\n    }\n}\n\n// Main assembly\nscale(scale_factor)\n    union() {\n        arceus_body();\n        arceus_wheel();\n        arceus_legs();\n        arceus_tail();\n        head_details();\n        body_accents();\n    }",
    "renders": true
  },
  {
    "pokemon": "reshiram",
    "openscad_code": "// Reshiram - Realistic style, medium complexity\n// 3D printable Pokemon model with proper wall thickness\n\n// Colors\ncolor_white = [0.95, 0.95, 0.9];\ncolor_blue = [0.2, 0.4, 0.8];\ncolor_gold = [0.9, 0.7, 0.2];\ncolor_red = [0.8, 0.1, 0.1];\n\n// Main body module\nmodule reshiram() {\n    // Scale for 3D printing (80mm tall)\n    scale(0.8) {\n        // Head\n        color(color_white) {\n            translate([0, 0, 45]) {\n                // Main head shape\n                sphere(8);\n                translate([0, 0, 4]) sphere(7);\n                \n                // Snout\n                translate([0, 8, -2]) scale([1, 1.5, 0.8]) sphere(6);\n                \n                // Eyes\n                color(color_blue) {\n                    translate([4, 6, 2]) scale([1.2, 0.8, 0.5]) sphere(2);\n                    translate([-4, 6, 2]) scale([1.2, 0.8, 0.5]) sphere(2);\n                }\n                \n                // Eye rings\n                color(color_gold) {\n                    for(x = [4, -4]) {\n                        translate([x, 6, 2]) rotate([0, 90, 0]) \n                            cylinder(h=0.5, r1=3, r2=2.5);\n                    }\n                }\n            }\n        }\n        \n        // Neck\n        color(color_white) {\n            translate([0, 0, 35]) rotate([0, 0, 0]) \n                cylinder(h=10, r1=5, r2=6);\n        }\n        \n        // Torso\n        color(color_white) {\n            translate([0, 0, 25]) {\n                sphere(8);\n                translate([0, 0, -5]) cylinder(h=10, r1=8, r2=6);\n            }\n        }\n        \n        // Arms\n        module arm(side) {\n            mirror([side, 0, 0]) {\n                translate([6, 4, 28]) {\n                    // Upper arm\n                    rotate([0, 0, -30]) {\n                        cylinder(h=8, r1=2.5, r2=2);\n                        \n                        // Lower arm\n                        translate([0, 6, 0]) rotate([30, 0, 0]) {\n                            cylinder(h=6, r1=2, r2=1.8);\n                            \n                            // Hand\n                            translate([0, 5, 0]) sphere(2);\n                        }\n                    }\n                }\n            }\n        }\n        \n        arm(1);\n        arm(-1);\n        \n        // Wings\n        module wing(side) {\n            mirror([side, 0, 0]) {\n                translate([7, -2, 35]) {\n                    rotate([0, -20, 30]) {\n                        // Main wing structure\n                        color(color_white) {\n                            scale([1, 0.2, 2]) sphere(5);\n                            translate([0, 0, 3]) scale([0.7, 0.15, 1.5]) sphere(4);\n                        }\n                        \n                        // Wing membrane\n                        color(color_blue) {\n                            translate([0, 0, 1]) scale([1.2, 0.1, 2.2]) \n                                rotate([0, 10, 0]) sphere(4);\n                        }\n                    }\n                }\n            }\n        }\n        \n        wing(1);\n        wing(-1);\n        \n        // Legs\n        module leg(side) {\n            mirror([side, 0, 0]) {\n                translate([4, 0, 15]) {\n                    // Upper leg\n                    cylinder(h=8, r1=3, r2=2.5);\n                    \n                    // Lower leg\n                    translate([0, 0, -8]) rotate([15, 0, 0]) {\n                        cylinder(h=7, r1=2.5, r2=2);\n                        \n                        // Foot\n                        translate([0, 2, -6]) rotate([90, 0, 0]) {\n                            cylinder(h=4, r1=2, r2=3);\n                        }\n                    }\n                }\n            }\n        }\n        \n        leg(1);\n        leg(-1);\n        \n        // Tail base\n        color(color_white) {\n            translate([0, -8, 20]) {\n                cylinder(h=5, r1=5, r2=4);\n            }\n        }\n        \n        // Tail segments\n        color(color_white) {\n            translate([0, -15, 18]) {\n                rotate([90, 0, 0]) {\n                    cylinder(h=15, r1=4, r2=3);\n                    \n                    // Tail turbine\n                    translate([0, 0, 16]) {\n                        color(color_gold) {\n                            cylinder(h=3, r1=3.5, r2=3.5);\n                            \n                            // Turbine blades\n                            for(i = [0:3]) {\n                                rotate([0, 0, i * 90]) {\n                                    translate([3, 0, 1.5]) \n                                        cube([4, 0.5, 3], center=true);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Chest marking\n        color(color_gold) {\n            translate([0, 6, 28]) rotate([0, 90, 0]) \n                cylinder(h=0.5, r1=3, r2=0);\n        }\n        \n        // Head crest\n        color(color_white) {\n            translate([0, 4, 53]) {\n                for(i = [0:2]) {\n                    rotate([0, 0, (i - 1) * 20]) {\n                        translate([0, 2, 0]) \n                            scale([0.5, 0.5, 1]) cylinder(h=5, r1=1, r2=0.5);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Generate the model\nreshiram();",
    "renders": true
  },
  {
    "pokemon": "zekrom",
    "openscad_code": "// Zekrom - medium complexity realistic style\n// Based on Pokemon Black/White design\n\nmodule zekrom_tail() {\n    // Tail generator with electric turbine details\n    rotate([0, -20, 0]) {\n        // Main tail segments\n        for(i = [0:1:4]) {\n            translate([0, 0, -i*8]) {\n                rotate([0, 0, i*30]) {\n                    color(\"gray20\") {\n                        cylinder(h=10, r1=6-i, r2=5-i, $fn=8);\n                    }\n                }\n            }\n        }\n        \n        // Tail tip generator\n        translate([0, 0, -40]) {\n            // Electric turbine core\n            color(\"royalblue\") {\n                sphere(8, $fn=16);\n            }\n            \n            // Surrounding ring\n            color(\"gray20\") {\n                rotate_extrude($fn=32) {\n                    translate([9, 0, 0]) {\n                        circle(r=2, $fn=16);\n                    }\n                }\n            }\n            \n            // Spikes\n            for(angle = [0:60:359]) {\n                rotate([0, 0, angle]) {\n                    translate([0, 10, 0]) {\n                        rotate([90, 0, 0]) {\n                            cylinder(h=5, r1=1.5, r2=0, $fn=6);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule zekrom_head() {\n    // Main head structure\n    translate([0, 0, 15]) {\n        // Skull base\n        color(\"gray20\") {\n            sphere(10, $fn=24);\n        }\n        \n        // Snout extension\n        translate([8, 0, 0]) {\n            color(\"gray20\") {\n                rotate([0, 90, 0]) {\n                    cylinder(h=15, r1=8, r2=6, $fn=16);\n                }\n            }\n        }\n        \n        // Eyes\n        for(side = [-1, 1]) {\n            translate([4, side*6, 3]) {\n                color(\"red\") {\n                    sphere(3, $fn=12);\n                }\n                \n                // Eye glow\n                translate([1, 0, 0]) {\n                    color(\"white\") {\n                        sphere(1, $fn=8);\n                    }\n                }\n            }\n        }\n        \n        // Horns\n        for(side = [-1, 1]) {\n            translate([0, side*8, 12]) {\n                rotate([0, side*20, 0]) {\n                    color(\"gray20\") {\n                        cylinder(h=12, r1=3, r2=2, $fn=8);\n                    }\n                }\n            }\n        }\n        \n        // Jaw\n        translate([12, 0, -5]) {\n            color(\"gray30\") {\n                cube([8, 8, 4], center=true);\n            }\n        }\n    }\n}\n\nmodule zekrom_wing() {\n    // Dragon wing structure\n    rotate([0, 0, 45]) {\n        // Wing arm\n        translate([0, 0, 0]) {\n            color(\"gray20\") {\n                cylinder(h=20, r1=3, r2=2, $fn=8);\n            }\n        }\n        \n        // Wing membrane segments\n        for(i = [0:1:3]) {\n            translate([5+i*3, i*6, 0]) {\n                rotate([0, 0, -i*20]) {\n                    color(\"gray40\") {\n                        cube([8-i, 12-i*2, 0.5], center=true);\n                    }\n                }\n            }\n        }\n        \n        // Wing claws\n        translate([15, 10, 0]) {\n            rotate([90, 0, 0]) {\n                for(j = [0:1:2]) {\n                    translate([j*2-2, 0, 0]) {\n                        color(\"gray20\") {\n                            cylinder(h=3, r1=1, r2=0.5, $fn=6);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule zekrom_body() {\n    // Main torso\n    color(\"gray20\") {\n        sphere(15, $fn=24);\n    }\n    \n    // Chest armor detail\n    translate([0, 0, 0]) {\n        color(\"gray30\") {\n            cube([20, 25, 10], center=true);\n        }\n    }\n    \n    // Shoulder plates\n    for(side = [-1, 1]) {\n        translate([0, side*15, 5]) {\n            color(\"gray30\") {\n                rotate([0, 30, 0]) {\n                    cube([8, 12, 6], center=true);\n                }\n            }\n        }\n    }\n    \n    // Neck connector\n    translate([-5, 0, 10]) {\n        color(\"gray20\") {\n            cylinder(h=10, r1=8, r2=6, $fn=16);\n        }\n    }\n}\n\nmodule zekrom_arms() {\n    // Arms with clawed hands\n    for(side = [-1, 1]) {\n        translate([5, side*15, 0]) {\n            // Upper arm\n            color(\"gray20\") {\n                rotate([0, 0, side*20]) {\n                    cylinder(h=12, r1=3, r2=2.5, $fn=8);\n                }\n            }\n            \n            // Lower arm\n            translate([8, side*5, -5]) {\n                color(\"gray20\") {\n                    rotate([0, 20, side*30]) {\n                        cylinder(h=10, r1=2.5, r2=2, $fn=8);\n                    }\n                }\n                \n                // Hand with claws\n                translate([12, side*7, -8]) {\n                    color(\"gray20\") {\n                        sphere(3, $fn=12);\n                    }\n                    \n                    // Claws\n                    for(claw = [0:1:2]) {\n                        rotate([0, 0, claw*120-120]) {\n                            translate([2, 0, 0]) {\n                                color(\"gray30\") {\n                                    rotate([90, 0, 0]) {\n                                        cylinder(h=4, r1=1, r2=0.5, $fn=6);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule zekrom_legs() {\n    // Powerful dragon legs\n    for(side = [-1, 1]) {\n        translate([-5, side*8, -15]) {\n            // Thigh\n            color(\"gray20\") {\n                rotate([30, 0, side*10]) {\n                    cylinder(h=15, r1=4, r2=3, $fn=8);\n                }\n            }\n            \n            // Lower leg\n            translate([-5, side*3, -12]) {\n                color(\"gray20\") {\n                    rotate([0, 0, side*15]) {\n                        cylinder(h=12, r1=3, r2=2.5, $fn=8);\n                    }\n                }\n                \n                // Foot\n                translate([-8, side*4, -18]) {\n                    color(\"gray20\") {\n                        cube([10, 6, 4], center=true);\n                    }\n                    \n                    // Toes\n                    for(toe = [0:1:2]) {\n                        translate([-12+toe*3, side*2, -20]) {\n                            color(\"gray30\") {\n                                cube([2, 2, 3], center=true);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Scale to reasonable 3D printing size (80mm tall)\n    scale(0.8) {\n        // Body center\n        zekrom_body();\n        \n        // Head\n        zekrom_head();\n        \n        // Wings\n        for(side = [-1, 1]) {\n            translate([-5, side*12, 8]) {\n                rotate([0, side*20, 0]) {\n                    mirror([0, side, 0]) {\n                        zekrom_wing();\n                    }\n                }\n            }\n        }\n        \n        // Arms\n        zekrom_arms();\n        \n        // Legs\n        zekrom_legs();\n        \n        // Tail\n        translate([-15, 0, -15]) {\n            zekrom_tail();\n        }\n    }\n}",
    "renders": true
  },
  {
    "pokemon": "kyurem",
    "openscad_code": "// Kyurem (Realistic Style, Medium Complexity)\n// Scale: ~80mm tall\n\n// Colors\ncolor_body = [0.85,0.9,0.95];\ncolor_ice = [0.7,0.9,1];\ncolor_gray = [0.4,0.4,0.45];\ncolor_yellow = [1,0.8,0];\ncolor_red = [0.8,0.1,0.1];\n\n// Main body\nmodule kyurem() {\n    union() {\n        // Head\n        translate([0,0,60]) head();\n        \n        // Neck/upper body\n        translate([0,0,45]) neck();\n        \n        // Torso\n        translate([0,0,25]) torso();\n        \n        // Wings\n        translate([-15,0,35]) wing(true);\n        translate([15,0,35]) wing(false);\n        \n        // Arms\n        translate([-12,0,35]) arm(true);\n        translate([12,0,35]) arm(false);\n        \n        // Legs\n        translate([-8,-5,10]) leg(true);\n        translate([8,-5,10]) leg(false);\n        \n        // Tail\n        translate([0,-8,20]) tail();\n        \n        // Ice spikes\n        ice_spikes();\n    }\n}\n\nmodule head() {\n    color(color_body) {\n        // Main head shape\n        difference() {\n            sphere(12);\n            translate([0,-12,0]) cube([24,24,24], center=true);\n        }\n        \n        // Snout\n        translate([0,-10,0]) scale([0.8,1.2,0.8]) sphere(8);\n        \n        // Eyes\n        color(color_yellow) {\n            translate([-5,5,2]) sphere(2);\n            translate([5,5,2]) sphere(2);\n        }\n        \n        // Eye pupils\n        color(color_red) {\n            translate([-5,6,2.5]) rotate([0,90,0]) cylinder(h=1, r=0.5);\n            translate([5,6,2.5]) rotate([0,90,0]) cylinder(h=1, r=0.5);\n        }\n    }\n}\n\nmodule neck() {\n    color(color_body) {\n        cylinder(h=15, r1=8, r2=10, center=true);\n    }\n}\n\nmodule torso() {\n    color(color_body) {\n        // Main body\n        difference() {\n            scale([1.2,0.8,1.5]) sphere(15);\n            // Chest cavity\n            translate([0,12,0]) cube([20,20,25], center=true);\n        }\n        \n        // Ice patterns on chest\n        color(color_ice) {\n            for(i=[-15:5:15]) {\n                translate([i,0,20]) rotate([0,90,0]) cylinder(h=2, r=1.5);\n            }\n        }\n    }\n}\n\nmodule wing(left=true) {\n    color(color_body) {\n        mirror([left?-1:1,0,0]) {\n            // Wing base\n            translate([0,0,0]) rotate([0,20,30]) scale([0.5,1,0.1]) sphere(20);\n            \n            // Wing membranes\n            color(color_ice) {\n                for(i=[0:30:120]) {\n                    rotate([0,i,0]) translate([0,0,0]) \n                    rotate([0,20,0]) scale([0.3,0.8,0.05]) sphere(15);\n                }\n            }\n        }\n    }\n}\n\nmodule arm(left=true) {\n    color(color_body) {\n        mirror([left?-1:1,0,0]) {\n            // Upper arm\n            rotate([0,0,left?20:-20]) translate([0,0,-5]) \n            cylinder(h=12, r=3, center=true);\n            \n            // Lower arm\n            translate([0,-8,-10]) rotate([0,0,left?40:-40])\n            cylinder(h=10, r=2.5, center=true);\n            \n            // Claws\n            color(color_gray) {\n                for(i=[-2:2:2]) {\n                    translate([i,-13,-14]) rotate([0,0,left?-20:20])\n                    cylinder(h=3, r1=1, r2=0.5);\n                }\n            }\n        }\n    }\n}\n\nmodule leg(left=true) {\n    color(color_body) {\n        mirror([left?-1:1,0,0]) {\n            // Upper leg\n            cylinder(h=15, r1=4, r2=3.5, center=true);\n            \n            // Lower leg\n            translate([0,0,-15]) cylinder(h=12, r1=3.5, r2=3);\n            \n            // Foot\n            translate([0,3,-24]) scale([1.5,2,0.8]) sphere(3);\n            \n            // Toes\n            color(color_gray) {\n                for(i=[-2:2:2]) {\n                    translate([i,5,-26]) sphere(1);\n                }\n            }\n        }\n    }\n}\n\nmodule tail() {\n    color(color_body) {\n        // Tail base\n        cylinder(h=20, r1=5, r2=3);\n        \n        // Tail tip\n        translate([0,-15,0]) color(color_ice) sphere(4);\n        \n        // Tail segments\n        for(i=[0:5:15]) {\n            translate([0,-i-5,i/3]) rotate([0,15,0])\n            scale([0.8,1,0.8]) sphere(3);\n        }\n    }\n}\n\nmodule ice_spikes() {\n    color(color_ice) {\n        // Back spikes\n        for(i=[0:10:40]) {\n            translate([0,0,i+20]) rotate([0,0,sin(i*5)*10])\n            cylinder(h=3+sin(i*3)*2, r1=2, r2=0.5);\n        }\n        \n        // Shoulder spikes\n        translate([-15,0,35]) rotate([0,0,-30]) cylinder(h=5, r1=1.5, r2=0.5);\n        translate([15,0,35]) rotate([0,0,30]) cylinder(h=5, r1=1.5, r2=0.5);\n        \n        // Head spikes\n        translate([0,0,70]) rotate([0,0,0]) cylinder(h=6, r1=2, r2=0.5);\n        translate([-5,0,68]) rotate([0,0,-20]) cylinder(h=4, r1=1.5, r2=0.5);\n        translate([5,0,68]) rotate([0,0,20]) cylinder(h=4, r1=1.5, r2=0.5);\n    }\n}\n\n// Render\nkyurem();",
    "renders": true
  },
  {
    "pokemon": "xerneas",
    "openscad_code": "// Xerneas in realistic style - medium complexity\n// Size: ~70mm tall when printed\n\n$fn = 32;\nscale_factor = 0.7;\n\nmodule xerneas_body() {\n    color([0.3, 0.5, 0.9]) {\n        // Main torso\n        translate([0, 0, 25]) \n            scale([1.2, 0.8, 1.5]) \n                sphere(r=15);\n        \n        // Chest plate\n        translate([0, -8, 25])\n            scale([0.8, 0.3, 1.2])\n                sphere(r=15);\n    }\n}\n\nmodule xerneas_head() {\n    color([0.3, 0.5, 0.9]) {\n        // Head\n        translate([0, 20, 45])\n            scale([0.9, 1.1, 1])\n                sphere(r=12);\n        \n        // Snout\n        translate([0, 32, 42])\n            scale([0.6, 0.8, 0.5])\n                sphere(r=8);\n    }\n    \n    // Antlers\n    color([0.8, 0.8, 0.9]) {\n        for(i = [-30:30:30]) {\n            rotate([0, -20, i])\n                translate([0, 25 + abs(i)/2, 55])\n                    cylinder(h=25, r1=3, r2=1);\n            \n            rotate([0, -40, i])\n                translate([0, 30 + abs(i)/2, 65])\n                    cylinder(h=20, r1=2, r2=0.5);\n        }\n    }\n    \n    // Eyes\n    color([0.9, 0.2, 0.3]) {\n        translate([-5, 22, 48])\n            sphere(r=2);\n        translate([5, 22, 48])\n            sphere(r=2);\n    }\n}\n\nmodule xerneas_legs() {\n    color([0.3, 0.5, 0.9]) {\n        // Front legs\n        for(x = [-12, 12]) {\n            translate([x, 5, 15])\n                cylinder(h=20, r=4);\n            translate([x, 5, 0])\n                sphere(r=5);\n        }\n        \n        // Back legs\n        for(x = [-10, 10]) {\n            translate([x, -15, 15])\n                cylinder(h=20, r=4);\n            translate([x, -15, 0])\n                sphere(r=5);\n        }\n    }\n}\n\nmodule xerneas_tail() {\n    color([0.3, 0.5, 0.9]) {\n        // Tail segments\n        for(i = [1:5]) {\n            translate([0, -20 - i*5, 25 - i*3])\n                scale([1 - i*0.15, 1, 1 - i*0.15])\n                    sphere(r=10 - i*1.5);\n        }\n    }\n}\n\nmodule xerneas_markings() {\n    color([0.8, 0.8, 0.9]) {\n        // Chest marking\n        translate([0, -5, 35])\n            scale([0.6, 0.1, 0.8])\n                sphere(r=10);\n        \n        // Leg markings\n        for(x = [-12, 12, -10, 10]) {\n            y = x > 0 ? 5 : -15;\n            translate([x, y, 20])\n                cylinder(h=8, r=2);\n        }\n    }\n}\n\nmodule xerneas_complete() {\n    union() {\n        xerneas_body();\n        xerneas_head();\n        xerneas_legs();\n        xerneas_tail();\n        xerneas_markings();\n    }\n}\n\nscale([scale_factor, scale_factor, scale_factor])\n    xerneas_complete();",
    "renders": true
  },
  {
    "pokemon": "yveltal",
    "openscad_code": "// Yveltal - Realistic Style, Medium Complexity\n// Main body and wing structure\n\n$fn = 30;\n\nmodule yveltal() {\n    color([0.2, 0.1, 0.1]) {\n        // Main body core\n        translate([0, 0, 15]) {\n            difference() {\n                scale([1.2, 0.8, 1.5]) sphere(10);\n                translate([0, 0, -10]) cube([25, 25, 20], center=true);\n            }\n        }\n        \n        // Chest armor plate\n        translate([0, 0, 20]) {\n            rotate([90, 0, 0]) \n            cylinder(h=3, r1=8, r2=12);\n        }\n        \n        // Head\n        translate([0, -12, 28]) {\n            scale([1.3, 1.5, 1.2]) sphere(8);\n        }\n        \n        // Beak\n        color([0.5, 0.2, 0.2]) {\n            translate([0, -20, 26]) {\n                rotate([30, 0, 0])\n                scale([1, 2.5, 1]) cylinder(h=6, r1=3, r2=1);\n            }\n        }\n        \n        // Neck\n        translate([0, -5, 25]) {\n            rotate([-20, 0, 0])\n            cylinder(h=12, r1=5, r2=4);\n        }\n        \n        // Eyes\n        color([1, 0.2, 0.2]) {\n            translate([4, -12, 30]) sphere(2.5);\n            translate([-4, -12, 30]) sphere(2.5);\n        }\n        \n        // Eye markings\n        color([0.1, 0.05, 0.05]) {\n            translate([6, -12, 28]) scale([0.5, 1.5, 0.2]) sphere(3);\n            translate([-6, -12, 28]) scale([0.5, 1.5, 0.2]) sphere(3);\n        }\n        \n        // Wings\n        module wing() {\n            color([0.2, 0.1, 0.1]) {\n                // Main wing structure\n                translate([0, 0, 5]) {\n                    rotate([0, 0, 30])\n                    scale([2, 0.3, 8]) cube([1, 1, 1]);\n                }\n                \n                // Wing claw\n                translate([0, 0, 10]) {\n                    rotate([0, 20, 0])\n                    cylinder(h=5, r1=2, r2=1);\n                }\n                \n                // Wing membrane\n                color([0.3, 0.15, 0.15]) {\n                    for(i = [1:3]) {\n                        translate([i*4, 0, 5 + i*2]) {\n                            rotate([0, 0, 30])\n                            scale([0.8, 0.2, 4]) cube([1, 1, 1]);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Left wing\n        translate([-15, 0, 20]) {\n            rotate([0, 0, -20])\n            wing();\n        }\n        \n        // Right wing\n        translate([15, 0, 20]) {\n            scale([-1, 1, 1])\n            rotate([0, 0, -20])\n            wing();\n        }\n        \n        // Tail structure\n        color([0.25, 0.1, 0.1]) {\n            translate([0, 10, 15]) {\n                rotate([20, 0, 0])\n                cylinder(h=20, r1=5, r2=2);\n            }\n            \n            // Tail feathers\n            for(i = [0:2]) {\n                translate([i*3 - 3, 25 - i*2, 18 - i*2]) {\n                    rotate([20 + i*10, i*10, 0])\n                    scale([0.3, 0.1, 4]) cube([1, 1, 1]);\n                }\n            }\n        }\n        \n        // Legs\n        module leg() {\n            color([0.3, 0.12, 0.12]) {\n                // Upper leg\n                translate([0, 0, 0]) {\n                    rotate([0, 30, 0])\n                    cylinder(h=8, r1=2.5, r2=2);\n                }\n                \n                // Lower leg\n                translate([0, 0, -6]) {\n                    rotate([0, 0, 10])\n                    cylinder(h=6, r1=2, r2=1.5);\n                }\n                \n                // Foot\n                translate([0, 2, -10]) {\n                    rotate([90, 0, 0])\n                    cylinder(h=4, r1=2, r2=3);\n                }\n                \n                // Claws\n                color([0.4, 0.15, 0.15]) {\n                    for(j = [-1, 0, 1]) {\n                        translate([j*1.5, 2, -10]) {\n                            rotate([90, 0, 0])\n                            cylinder(h=2, r1=0.5, r2=0.2);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Left leg\n        translate([-6, 0, 8]) {\n            rotate([0, 0, 10])\n            leg();\n        }\n        \n        // Right leg\n        translate([6, 0, 8]) {\n            rotate([0, 0, -10])\n            scale([-1, 1, 1])\n            leg();\n        }\n        \n        // Horns\n        color([0.15, 0.05, 0.05]) {\n            translate([0, -18, 32]) {\n                rotate([20, 0, 0])\n                cylinder(h=8, r1=2, r2=1);\n            }\n            \n            translate([-3, -18, 31]) {\n                rotate([25, -10, -10])\n                cylinder(h=7, r1=1.5, r2=0.5);\n            }\n            \n            translate([3, -18, 31]) {\n                rotate([25, 10, 10])\n                cylinder(h=7, r1=1.5, r2=0.5);\n            }\n        }\n        \n        // Chest markings\n        color([0.8, 0.1, 0.1]) {\n            translate([0, 0, 22]) {\n                scale([1, 1.5, 0.5]) \n                cylinder(h=1, r=4);\n            }\n            \n            // Diamond pattern\n            for(x = [-2, 2]) {\n                translate([x, 0, 22]) {\n                    rotate([90, 0, 45])\n                    cube([3, 0.5, 3], center=true);\n                }\n            }\n        }\n    }\n}\n\n// Scale to 80mm height\nscale(0.8)\nyveltal();",
    "renders": true
  },
  {
    "pokemon": "zygarde",
    "openscad_code": "// Zygarde 50% Forme - Realistic Medium Complexity\n// Overall size ~80mm long\n\n// Main colors\ncolor_zygarde_green = [0/255, 120/255, 60/255];\ncolor_zygarde_black = [20/255, 20/255, 20/255];\ncolor_zygarde_white = [240/255, 240/255, 240/255];\ncolor_zygarde_red = [200/255, 0/255, 0/255];\ncolor_hex_green = [0/255, 80/255, 40/255];\n\n// Scale factor for 3D printing\nscale_factor = 0.8;\n\n// Main body module\nmodule zygarde_body() {\n    color(color_zygarde_green) {\n        // Central body - snake-like\n        union() {\n            // Head section\n            translate([0, 0, 15]) {\n                sphere(8);\n            }\n            \n            // Neck and body\n            hull() {\n                translate([0, 0, 15]) sphere(7);\n                translate([-20, 0, 12]) sphere(6);\n                translate([-40, 0, 10]) sphere(5);\n                translate([-60, 0, 8]) sphere(4);\n            }\n            \n            // Tail end\n            translate([-65, 0, 7]) {\n                scale([3, 2, 1]) sphere(3);\n            }\n        }\n    }\n}\n\n// Hexagonal pattern on body\nmodule hex_pattern() {\n    color(color_hex_green) {\n        for(i = [0:5]) {\n            rotate([0, 0, i * 60]) {\n                translate([-25, 0, 12]) {\n                    cylinder(h=0.5, r=3, $fn=6);\n                }\n                translate([-45, 0, 10]) {\n                    cylinder(h=0.5, r=2.5, $fn=6);\n                }\n            }\n        }\n    }\n}\n\n// Eyes\nmodule eyes() {\n    color(color_zygarde_white) {\n        translate([6, 4, 17]) sphere(2);\n        translate([6, -4, 17]) sphere(2);\n    }\n    color(color_zygarde_red) {\n        translate([7, 4, 17]) sphere(1);\n        translate([7, -4, 17]) sphere(1);\n    }\n}\n\n// Crest on head\nmodule head_crest() {\n    color(color_zygarde_green) {\n        translate([0, 0, 24]) {\n            scale([1, 0.3, 2]) sphere(4);\n        }\n    }\n    color(color_zygarde_black) {\n        translate([0, 0, 26]) {\n            scale([0.8, 0.2, 1.5]) sphere(3);\n        }\n    }\n}\n\n// Legs\nmodule legs() {\n    color(color_zygarde_green) {\n        // Front legs\n        for(side = [-1, 1]) {\n            translate([-15, side * 8, 10]) {\n                rotate([30, 0, side * 15]) {\n                    cylinder(h=12, r=2.5);\n                    translate([0, 0, 12]) {\n                        sphere(3);\n                    }\n                }\n            }\n        }\n        \n        // Back legs\n        for(side = [-1, 1]) {\n            translate([-45, side * 7, 8]) {\n                rotate([20, 0, side * 10]) {\n                    cylinder(h=10, r=2);\n                    translate([0, 0, 10]) {\n                        sphere(2.5);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Tail blades\nmodule tail_blades() {\n    color(color_zygarde_green) {\n        for(i = [0:2]) {\n            rotate([0, 0, i * 120 - 60]) {\n                translate([-68, 0, 7]) {\n                    rotate([0, 90, 0]) {\n                        scale([8, 0.5, 4]) cube([1, 1, 1]);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Markings\nmodule markings() {\n    color(color_zygarde_black) {\n        // Side markings\n        translate([-25, 7, 12]) {\n            scale([0.5, 1, 8]) sphere(1);\n        }\n        translate([-25, -7, 12]) {\n            scale([0.5, 1, 8]) sphere(1);\n        }\n        \n        // Back markings\n        translate([-40, 0, 12]) {\n            scale([8, 0.5, 0.5]) sphere(1);\n        }\n    }\n}\n\n// Assemble the model\nscale([scale_factor, scale_factor, scale_factor]) {\n    union() {\n        zygarde_body();\n        hex_pattern();\n        eyes();\n        head_crest();\n        legs();\n        tail_blades();\n        markings();\n    }\n}",
    "renders": true
  },
  {
    "pokemon": "solgaleo",
    "openscad_code": "// Solgaleo - Realistic Style, Medium Complexity\n\n// Colors\ngold = [0.8, 0.6, 0.2];\nsilver = [0.7, 0.7, 0.75];\nblue = [0.1, 0.3, 0.7];\nwhite = [0.95, 0.95, 0.95];\nblack = [0.1, 0.1, 0.1];\n\n// Main body module\nmodule body() {\n    // Torso\n    color(gold)\n    translate([0, 0, 15])\n    scale([1.2, 0.8, 1.5])\n    sphere(15);\n    \n    // Chest plate\n    color(white)\n    translate([0, -11, 20])\n    cube([25, 2, 25], center=true);\n    \n    // Back plate\n    color(white)\n    translate([0, 11, 20])\n    cube([25, 2, 25], center=true);\n}\n\n// Head module\nmodule head() {\n    // Main head\n    color(gold)\n    translate([0, 0, 45])\n    scale([1.3, 1, 1.1])\n    sphere(12);\n    \n    // Muzzle\n    color(gold)\n    translate([0, -15, 42])\n    scale([0.8, 0.8, 0.6])\n    sphere(8);\n    \n    // Eyes\n    color(blue)\n    translate([-7, -15, 48])\n    sphere(2.5);\n    translate([7, -15, 48])\n    sphere(2.5);\n    \n    // Eye highlights\n    color(white)\n    translate([-7.5, -15.5, 49])\n    sphere(1);\n    translate([6.5, -15.5, 49])\n    sphere(1);\n    \n    // Nose\n    color(black)\n    translate([0, -18, 42])\n    sphere(1.5);\n}\n\n// Mane module\nmodule mane() {\n    // Front mane\n    for(i = [-30:10:30]) {\n        color(white)\n        translate([i/2, -20, 45 + abs(i)/3])\n        rotate([90, 0, i])\n        scale([0.3, 0.3, 1])\n        cylinder(15, 5, 2);\n    }\n    \n    // Side mane\n    for(i = [-20:10:20]) {\n        color(white)\n        translate([i, -10, 40])\n        rotate([90, 0, i*2])\n        scale([0.3, 0.3, 1])\n        cylinder(12, 4, 1);\n    }\n}\n\n// Legs module\nmodule legs() {\n    // Front legs\n    for(side = [-1, 1]) {\n        color(gold)\n        translate([side * 12, 0, 15])\n        scale([0.6, 0.6, 1])\n        cylinder(20, 5, 4);\n        \n        // Hoof\n        color(silver)\n        translate([side * 12, 0, -5])\n        scale([1.1, 1.1, 0.5])\n        sphere(5);\n    }\n    \n    // Back legs\n    for(side = [-1, 1]) {\n        color(gold)\n        translate([side * 10, 20, 12])\n        scale([0.7, 0.7, 1.2])\n        cylinder(18, 6, 5);\n        \n        // Hoof\n        color(silver)\n        translate([side * 10, 20, -6])\n        scale([1.1, 1.1, 0.5])\n        sphere(6);\n    }\n}\n\n// Tail module\nmodule tail() {\n    color(white)\n    translate([0, 25, 25])\n    rotate([45, 0, 0])\n    scale([0.3, 0.3, 1])\n    cylinder(30, 8, 4);\n    \n    // Tail tip\n    color(gold)\n    translate([0, 25, 55])\n    sphere(5);\n}\n\n// Sun markings\nmodule markings() {\n    // Sun pattern on forehead\n    color(white)\n    translate([0, -10, 55])\n    difference() {\n        sphere(4);\n        color(gold)\n        translate([0, -1, 1])\n        cylinder(8, 2, 2);\n    }\n    \n    // Chest sun\n    color(white)\n    translate([0, -11, 30])\n    difference() {\n        sphere(5);\n        color(gold)\n        translate([0, 0, 1])\n        cylinder(10, 2.5, 2.5);\n    }\n}\n\n// Ears module\nmodule ears() {\n    for(side = [-1, 1]) {\n        color(white)\n        translate([side * 10, -5, 55])\n        rotate([0, 0, side * 20])\n        scale([0.3, 0.4, 1])\n        cylinder(10, 4, 2);\n        \n        // Ear tips\n        color(gold)\n        translate([side * 12, -5, 65])\n        sphere(3);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    mane();\n    legs();\n    tail();\n    markings();\n    ears();\n}\n\n// Center and scale for printing\ntranslate([0, 0, 0])\nscale(0.8)",
    "renders": true
  },
  {
    "pokemon": "lunala",
    "openscad_code": "// Lunala Pokemon - Realistic Style (Medium Complexity)\n// Size: ~70mm wingspan, 3D printable\n\n// Main colors\ncolor_wing = [0.2, 0.1, 0.35];\ncolor_body = [0.85, 0.85, 0.9];\ncolor_gold = [0.8, 0.6, 0.2];\ncolor_detail = [0.95, 0.95, 0.95];\n\n// Scale factor for easy resizing\nscale_factor = 1;\n\n// Main body module\nmodule lunala_body() {\n    color(color_body) {\n        // Torso - elongated ellipsoid\n        translate([0, 0, 15]) {\n            scale([1, 0.7, 1.8]) sphere(r=8, $fn=20);\n        }\n        \n        // Head section\n        translate([0, 0, 30]) {\n            scale([1.2, 1, 1.2]) sphere(r=10, $fn=20);\n        }\n        \n        // Crescent moon crown\n        color(color_gold) {\n            translate([0, -8, 38]) {\n                rotate([90, 0, 0]) {\n                    scale([1.5, 0.3, 1.5]) \n                        difference() {\n                            cylinder(h=2, r=12, $fn=50);\n                            translate([0, 0, -1]) cylinder(h=4, r=10, $fn=50);\n                        }\n                }\n            }\n        }\n    }\n}\n\n// Wing module\nmodule lunala_wing(is_left = true) {\n    angle = is_left ? 30 : -30;\n    mirror_val = is_left ? 1 : -1;\n    \n    color(color_wing) {\n        // Main wing\n        translate([mirror_val * 12, 0, 20]) {\n            rotate([0, angle, 0]) {\n                // Base wing shape\n                difference() {\n                    scale([1.5, 0.1, 2.5]) sphere(r=15, $fn=20);\n                    translate([0, -2, 0]) cube([40, 4, 40], center=true);\n                }\n                \n                // Wing segments\n                for(i = [0:3]) {\n                    rotate([0, i * 15, 0]) {\n                        translate([mirror_val * (8 + i * 5), 0, -5 + i * 3]) {\n                            scale([0.8 - i * 0.1, 0.05, 0.8 - i * 0.1]) \n                                sphere(r=12 - i * 2, $fn=15);\n                        }\n                    }\n                }\n                \n                // Wing edges\n                color(color_gold) {\n                    for(i = [0:4]) {\n                        translate([mirror_val * (25 - i * 5), 0, -10 + i * 5]) {\n                            sphere(r=2, $fn=10);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Face details\nmodule lunada_face() {\n    color(color_detail) {\n        // Eyes\n        for(side = [-1, 1]) {\n            translate([side * 4, -8, 33]) {\n                scale([1, 1.5, 0.5]) sphere(r=3, $fn=10);\n                // Eye detail\n                translate([0, 0, 1.5]) {\n                    color([0.1, 0.1, 0.1]) \n                        sphere(r=1.5, $fn=10);\n                }\n            }\n        }\n        \n        // Mouth area\n        color(color_body) {\n            translate([0, -11, 28]) {\n                scale([1.2, 0.8, 0.5]) sphere(r=4, $fn=15);\n            }\n        }\n        \n        // Gold markings\n        color(color_gold) {\n            // Forehead mark\n            translate([0, -5, 38]) {\n                rotate([90, 0, 0]) \n                    cylinder(h=0.5, r1=4, r2=0, $fn=3);\n            }\n            \n            // Cheek marks\n            for(side = [-1, 1]) {\n                translate([side * 6, -9, 30]) {\n                    sphere(r=1.5, $fn=8);\n                }\n            }\n        }\n    }\n}\n\n// Tail section\nmodule lunala_tail() {\n    color(color_wing) {\n        translate([0, 0, 0]) {\n            // Main tail\n            for(i = [0:5]) {\n                translate([0, 0, 5 - i * 3]) {\n                    rotate([i * 5, 0, 0]) {\n                        scale([0.5 - i * 0.05, 0.1, 0.5 - i * 0.05]) \n                            sphere(r=8 - i, $fn=12);\n                    }\n                }\n            }\n            \n            // Tail fins\n            color(color_gold) {\n                for(side = [-1, 1]) {\n                    translate([side * 3, 0, -8]) {\n                        rotate([side * 20, 0, 0]) {\n                            scale([1, 0.1, 0.5]) sphere(r=4, $fn=10);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Arms/forelegs\nmodule lunala_arms() {\n    color(color_body) {\n        for(side = [-1, 1]) {\n            translate([side * 8, 0, 15]) {\n                rotate([0, 0, side * 30]) {\n                    cylinder(h=8, r=2, $fn=10);\n                    translate([0, 0, 8]) {\n                        scale([0.8, 0.5, 0.8]) sphere(r=3, $fn=10);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        lunala_body();\n        lunala_wing(true);\n        lunala_wing(false);\n        lunada_face();\n        lunala_tail();\n        lunala_arms();\n    }\n}",
    "renders": true
  },
  {
    "pokemon": "necrozma",
    "openscad_code": "// Necrozma Pokemon - OpenSCAD Model\n// Realistic style, medium complexity\n\n// Main colors\ncolor_black = [0.1, 0.1, 0.15];\ncolor_purple = [0.4, 0.2, 0.6];\ncolor_cyan = [0.2, 0.8, 0.9];\ncolor_yellow = [0.9, 0.8, 0.1];\n\n// Scale factor for 3D printing\nscale_factor = 0.8;\n\n// Main body module\nmodule necrozma_body() {\n    color(color_black)\n    union() {\n        // Central prism body\n        translate([0, 0, 10])\n        scale([1, 0.8, 1.5])\n        cube([20, 15, 25], center=true);\n        \n        // Upper prism extension\n        translate([0, 0, 30])\n        scale([0.8, 0.6, 1])\n        cube([18, 12, 15], center=true);\n        \n        // Lower prism base\n        translate([0, 0, -5])\n        scale([1.2, 1, 0.8])\n        cube([22, 18, 10], center=true);\n    }\n}\n\n// Crystal formations\nmodule crystals() {\n    color(color_purple)\n    union() {\n        // Front crystals\n        for(i = [-1, 1]) {\n            translate([i * 12, 8, 15])\n            rotate([0, 0, i * 15])\n            scale([0.5, 0.5, 2])\n            cylinder(h=8, r1=3, r2=0.5, center=true);\n        }\n        \n        // Side crystals\n        for(i = [-1, 1]) {\n            translate([i * 15, 0, 20])\n            rotate([0, i * 20, 0])\n            scale([0.3, 0.3, 1.5])\n            cube([3, 3, 12], center=true);\n        }\n        \n        // Back crystals\n        translate([0, -10, 25])\n        rotate([15, 0, 0])\n        scale([0.4, 0.4, 1.8])\n        cylinder(h=10, r1=4, r2=1, center=true);\n    }\n}\n\n// Wing-like structures\nmodule wings() {\n    color(color_black)\n    union() {\n        // Left wing\n        translate([-15, 0, 20])\n        rotate([0, 0, -30])\n        scale([1, 0.2, 1.5])\n        cube([25, 2, 15], center=true);\n        \n        // Right wing\n        translate([15, 0, 20])\n        rotate([0, 0, 30])\n        scale([1, 0.2, 1.5])\n        cube([25, 2, 15], center=true);\n        \n        // Wing tips\n        for(side = [-1, 1]) {\n            translate([side * 28, 0, 28])\n            rotate([0, 0, side * 45])\n            scale([0.3, 0.1, 0.8])\n            cube([8, 1, 6], center=true);\n        }\n    }\n}\n\n// Head/face structure\nmodule head() {\n    color(color_black)\n    union() {\n        // Main head shape\n        translate([0, 0, 38])\n        scale([0.6, 0.5, 0.8])\n        cube([16, 12, 12], center=true);\n        \n        // Eye sockets\n        color(color_cyan)\n        for(i = [-1, 1]) {\n            translate([i * 4, 2, 42])\n            scale([0.8, 0.3, 0.3])\n            sphere(3);\n        }\n        \n        // Facial markings\n        color(color_yellow)\n        translate([0, -2, 40])\n        scale([1.2, 0.1, 0.3])\n        cube([12, 1, 8], center=true);\n    }\n}\n\n// Arm-like structures\nmodule arms() {\n    color(color_black)\n    union() {\n        // Left arm\n        translate([-12, -5, 12])\n        rotate([0, 0, -15])\n        scale([0.3, 0.3, 1.2])\n        cube([5, 5, 20], center=true);\n        \n        // Right arm\n        translate([12, -5, 12])\n        rotate([0, 0, 15])\n        scale([0.3, 0.3, 1.2])\n        cube([5, 5, 20], center=true);\n        \n        // Arm crystals\n        color(color_purple)\n        for(side = [-1, 1]) {\n            translate([side * 12, -8, 5])\n            scale([0.4, 0.4, 0.8])\n            cylinder(h=6, r1=2, r2=1, center=true);\n        }\n    }\n}\n\n// Leg structures\nmodule legs() {\n    color(color_black)\n    union() {\n        // Left leg\n        translate([-8, -5, -10])\n        scale([0.4, 0.4, 1])\n        cube([6, 6, 15], center=true);\n        \n        // Right leg\n        translate([8, -5, -10])\n        scale([0.4, 0.4, 1])\n        cube([6, 6, 15], center=true);\n        \n        // Feet\n        for(side = [-1, 1]) {\n            translate([side * 8, -8, -18])\n            scale([0.6, 0.8, 0.3])\n            cube([8, 10, 4], center=true);\n        }\n    }\n}\n\n// Energy core\nmodule energy_core() {\n    color(color_cyan)\n    translate([0, 0, 15])\n    scale([0.8, 0.6, 0.8])\n    sphere(5);\n}\n\n// Combine all parts\nscale([scale_factor, scale_factor, scale_factor])\nunion() {\n    necrozma_body();\n    crystals();\n    wings();\n    head();\n    arms();\n    legs();\n    energy_core();\n}",
    "renders": true
  },
  {
    "pokemon": "zacian",
    "openscad_code": "// Zacian - Crowned Sword Form\n// Medium complexity realistic style\n\n$fa = 2;\n$fs = 0.5;\n\n// Main colors\ncolor_zacian_blue = [0.2, 0.4, 0.8];\ncolor_zacian_gold = [0.9, 0.7, 0.2];\ncolor_zacian_white = [0.95, 0.95, 0.95];\ncolor_zacian_red = [0.8, 0.2, 0.2];\n\nmodule zacian_body() {\n    color(color_zacian_blue) {\n        // Torso\n        translate([0, 0, 10])\n            scale([1.2, 0.8, 1.5])\n            sphere(8);\n        \n        // Chest armor\n        translate([0, 5, 12])\n            scale([1.3, 0.5, 1.2])\n            sphere(7);\n    }\n}\n\nmodule zacian_head() {\n    union() {\n        // Head\n        color(color_zacian_blue)\n            translate([0, 8, 22])\n            scale([0.9, 0.7, 1])\n            sphere(6);\n        \n        // Snout\n        color(color_zacian_blue)\n            translate([0, 12, 21])\n            scale([0.6, 0.8, 0.5])\n            sphere(4);\n        \n        // Crown\n        color(color_zacian_gold)\n            translate([0, 9, 27])\n            rotate([0, 0, 0])\n            cylinder(h=5, r=4, $fn=8);\n        \n        // Ears\n        for(side = [-1, 1]) {\n            color(color_zacian_blue)\n                translate([side * 3, 6, 26])\n                rotate([0, side * 10, 0])\n                scale([0.5, 1.5, 2])\n                sphere(2);\n        }\n        \n        // Eyes\n        for(side = [-1, 1]) {\n            color(color_zacian_red)\n                translate([side * 2.5, 11, 23])\n                sphere(1);\n            \n            color(color_zacian_white)\n                translate([side * 2.7, 11.5, 23.2])\n                sphere(0.3);\n        }\n    }\n}\n\nmodule zacian_legs() {\n    for(side = [-1, 1]) {\n        // Front legs\n        color(color_zacian_blue) {\n            translate([side * 4, 5, 8])\n                rotate([0, 0, -10])\n                cylinder(h=8, r=2);\n            \n            translate([side * 4, 3, 0])\n                sphere(2.5);\n        }\n        \n        // Back legs\n        color(color_zacian_blue) {\n            translate([side * 3, -5, 6])\n                rotate([10, 0, 0])\n                cylinder(h=9, r=2.2);\n            \n            translate([side * 3, -7, 0])\n                sphere(3);\n        }\n    }\n}\n\nmodule zacian_tail() {\n    color(color_zacian_blue) {\n        translate([0, -10, 12])\n            rotate([30, 0, 0])\n            scale([0.8, 0.8, 1])\n            cylinder(h=12, r1=3, r2=1);\n    }\n}\n\nmodule zacian_cape() {\n    color(color_zacian_white) {\n        // Main cape\n        difference() {\n            translate([0, -2, 15])\n                rotate([80, 0, 0])\n                scale([2.5, 1, 0.5])\n                cylinder(h=15, r=8, $fn=16);\n            \n            // Cut bottom\n            translate([0, -2, 5])\n                cube([20, 20, 10], center=true);\n        }\n        \n        // Cape stripes\n        for(i = [0:3]) {\n            color(color_zacian_gold)\n                translate([0, -2 + i * 1.5, 12])\n                rotate([80, 0, 0])\n                scale([2.3, 0.2, 0.3])\n                cylinder(h=12, r=7, $fn=16);\n        }\n    }\n}\n\nmodule zacian_sword() {\n    // Sword blade\n    color(color_zacian_gold)\n        translate([0, 15, 10])\n            rotate([0, 0, 90])\n            scale([0.3, 8, 0.1])\n            cube([1, 1, 1]);\n    \n    // Sword handle\n    color(color_zacian_gold)\n        translate([0, 8, 8])\n            rotate([0, 0, 90])\n            cylinder(h=4, r=0.8);\n    \n    // Sword guard\n    color(color_zacian_gold)\n        translate([0, 10, 8])\n            rotate([0, 0, 90])\n            scale([1, 0.3, 0.2])\n            cube([4, 1, 1]);\n}\n\nmodule zacian_markings() {\n    // Chest plate design\n    color(color_zacian_gold)\n        translate([0, 6, 18])\n            scale([1, 0.5, 0.2])\n            sphere(4);\n    \n    // Leg armor\n    for(side = [-1, 1]) {\n        color(color_zacian_gold)\n            translate([side * 4, 3, 2])\n                cylinder(h=0.5, r=2.5);\n        \n        color(color_zacian_gold)\n            translate([side * 3, -7, 2])\n                cylinder(h=0.5, r=3);\n    }\n}\n\n// Assembly\nscale([0.7, 0.7, 0.7])\n    union() {\n        zacian_body();\n        zacian_head();\n        zacian_legs();\n        zacian_tail();\n        zacian_cape();\n        zacian_sword();\n        zacian_markings();\n    }",
    "renders": true
  },
  {
    "pokemon": "zamazenta",
    "openscad_code": "// Zamazenta - Realistic Style (Medium Complexity)\n// Overall dimensions ~80mm tall, 3D printable\n\n// Colors\ncolor_armor = [0.8, 0.8, 0.8];  // Metallic silver\ncolor_fur = [0.2, 0.2, 0.2];     // Dark blue-gray\ncolor_acc = [0.1, 0.1, 0.1];     // Black accents\ncolor_face = [0.95, 0.85, 0.75]; // Light tan for face\ncolor_eyes = [0.9, 0.1, 0.1];    // Red eyes\n\n// Basic parameters\n$fn = 32;\nscale_factor = 80/100;  // Scale to ~80mm height\n\nmodule zamazenta() {\n    union() {\n        // Main body\n        translate([0, 0, 30 * scale_factor])\n        scale([scale_factor, scale_factor, scale_factor])\n        union() {\n            // Torso armor\n            color(color_armor)\n            difference() {\n                cube([35, 25, 40], center=true);\n                translate([0, 0, 15])\n                cube([30, 20, 35], center=true);\n            }\n            \n            // Fur body\n            color(color_fur)\n            translate([0, 0, -8])\n            cube([28, 22, 30], center=true);\n            \n            // Head\n            translate([0, 0, 35])\n            union() {\n                // Main head shape\n                color(color_face)\n                sphere(18);\n                \n                // Armor crest\n                color(color_armor)\n                translate([0, 0, 15])\n                rotate([0, 0, 0])\n                cylinder(h=25, r1=12, r2=8);\n                \n                // Side armor plates\n                for (angle = [-30, 30]) {\n                    color(color_armor)\n                    rotate([0, 0, angle])\n                    translate([12, 0, 5])\n                    cube([8, 4, 15], center=true);\n                }\n                \n                // Eyes\n                color(color_eyes)\n                for (x = [-8, 8]) {\n                    translate([x, 12, 5])\n                    sphere(3);\n                }\n                \n                // Nose\n                color(color_face)\n                translate([0, 14, 0])\n                sphere(2);\n                \n                // Mouth\n                color(color_acc)\n                translate([0, 15, -3])\n                cube([6, 2, 1], center=true);\n                \n                // Ears\n                color(color_fur)\n                for (x = [-15, 15]) {\n                    translate([x, 5, 12])\n                    rotate([30, 0, x > 0 ? 20 : -20])\n                    cylinder(h=15, r1=5, r2=3);\n                }\n            }\n            \n            // Front legs with armor\n            for (x = [-12, 12]) {\n                // Upper leg\n                color(color_fur)\n                translate([x, 0, 0])\n                cylinder(h=25, r=6);\n                \n                // Armor gauntlet\n                color(color_armor)\n                translate([x, 0, -15])\n                difference() {\n                    cylinder(h=15, r=8);\n                    translate([0, 0, -1])\n                    cylinder(h=17, r=5);\n                }\n                \n                // Paw\n                color(color_face)\n                translate([x, 0, -25])\n                sphere(6);\n            }\n            \n            // Back legs\n            for (x = [-10, 10]) {\n                // Upper leg\n                color(color_fur)\n                translate([x, -15, -5])\n                rotate([30, 0, 0])\n                cylinder(h=20, r=6);\n                \n                // Lower leg\n                translate([x, -20, -20])\n                cylinder(h=15, r=5);\n                \n                // Paw\n                color(color_face)\n                translate([x, -20, -30])\n                sphere(6);\n            }\n            \n            // Tail\n            color(color_fur)\n            translate([0, -25, -5])\n            rotate([45, 0, 0])\n            cylinder(h=30, r1=8, r2=4);\n            \n            // Shield segments on back\n            for (angle = [0, 45, -45]) {\n                color(color_armor)\n                translate([0, -5, 15])\n                rotate([0, angle, 0])\n                translate([0, -8, 0])\n                cube([25, 3, 20], center=true);\n            }\n            \n            // Chest emblem\n            color(color_acc)\n            translate([0, 12, 15])\n            rotate([90, 0, 0])\n            cylinder(h=2, r=8);\n            translate([0, 12, 16])\n            color(color_armor)\n            sphere(5);\n        }\n    }\n}\n\n// Render the model\nzamazenta();",
    "renders": true
  },
  {
    "pokemon": "eternatus",
    "openscad_code": "// Eternatus OpenSCAD Model - Medium Complexity Realistic Style\n// 3D printable, ~80mm tall\n\n$fn = 32;\n\nmodule eternatus_body() {\n    color([0.2, 0.2, 0.2]) {\n        // Main torso\n        translate([0, 0, 20]) {\n            scale([1.2, 0.8, 2.5]) \n                sphere(10);\n        }\n        \n        // Neck section\n        translate([0, 0, 35]) {\n            scale([0.8, 0.6, 1.5]) \n                cylinder(h=15, r=8);\n        }\n        \n        // Head base\n        translate([0, 0, 50]) {\n            scale([1, 0.9, 1.2]) \n                sphere(8);\n        }\n    }\n}\n\nmodule eternatus_head_details() {\n    color([0.15, 0.15, 0.15]) {\n        // Snout\n        translate([0, 8, 50]) {\n            rotate([30, 0, 0])\n                scale([0.8, 0.6, 1.2]) \n                    cylinder(h=12, r=5);\n        }\n        \n        // Top crest\n        for(i = [0:2]) {\n            rotate([0, 0, i*120])\n                translate([0, 0, 58]) {\n                    rotate([20, 0, 0])\n                        scale([0.3, 0.1, 1]) \n                            cylinder(h=15, r=3);\n                }\n        }\n    }\n    \n    // Eyes (glowing red)\n    color([0.8, 0.1, 0.1]) {\n        translate([4, 6, 52]) {\n            scale([1, 0.5, 0.5]) \n                sphere(2);\n        }\n        translate([-4, 6, 52]) {\n            scale([1, 0.5, 0.5]) \n                sphere(2);\n        }\n    }\n}\n\nmodule eternatus_spines() {\n    color([0.3, 0.3, 0.3]) {\n        // Back spines\n        for(i = [0:15]) {\n            rotate([0, 0, i*24])\n                translate([12, 0, 30 - i*1.5]) {\n                    scale([0.3, 0.1, 1 + i*0.1]) \n                        rotate([30 + i*2, 0, 0])\n                            cylinder(h=5 + i*0.3, r=1);\n                }\n        }\n    }\n}\n\nmodule eternatus_arms() {\n    color([0.25, 0.25, 0.25]) {\n        // Left arm\n        translate([10, -5, 25]) {\n            rotate([0, 0, -30])\n                cylinder(h=15, r=3);\n            translate([12, -8, 15]) {\n                rotate([0, 0, -45])\n                    scale([0.8, 0.8, 1.2]) \n                        sphere(4);\n            }\n        }\n        \n        // Right arm\n        translate([-10, -5, 25]) {\n            rotate([0, 0, 30])\n                cylinder(h=15, r=3);\n            translate([-12, -8, 15]) {\n                rotate([0, 0, 45])\n                    scale([0.8, 0.8, 1.2]) \n                        sphere(4);\n            }\n        }\n    }\n}\n\nmodule eternatus_tendrils() {\n    color([0.4, 0.1, 0.4]) {\n        // Magenta energy tendrils\n        for(i = [0:5]) {\n            rotate([0, 0, i*60])\n                translate([15, 0, 15 - i*2]) {\n                    rotate([20 + i*5, 0, 0])\n                        scale([0.2, 0.2, 1]) \n                            cylinder(h=20 + i*3, r=1.5);\n                }\n        }\n    }\n}\n\nmodule eternatus_base() {\n    color([0.1, 0.1, 0.1]) {\n        // Energy core base\n        translate([0, 0, 5]) {\n            scale([1.5, 1.5, 0.5]) \n                cylinder(h=10, r=15);\n        }\n        \n        // Core details\n        color([0.6, 0.1, 0.6]) {\n            translate([0, 0, 10]) {\n                sphere(8);\n            }\n        }\n    }\n}\n\nmodule eternatus_full() {\n    union() {\n        eternatus_base();\n        eternatus_body();\n        eternatus_head_details();\n        eternatus_spines();\n        eternatus_arms();\n        eternatus_tendrils();\n    }\n}\n\n// Scale to 80mm height and center\nscale([0.8, 0.8, 0.8])\n    translate([0, 0, 0])\n        eternatus_full();",
    "renders": true
  },
  {
    "pokemon": "kubfu",
    "openscad_code": "// Kubfu OpenSCAD Model - Realistic Style, Medium Complexity\n// Scale: 80mm height\n\n// Colors\nColor_Head = \"LightBlue\";\nColor_Body = \"LightBlue\";\nColor_Markings = \"DarkGray\";\nColor_White = \"White\";\nColor_Black = \"Black\";\n\n// Main module\nmodule kubfu() {\n    union() {\n        // Head\n        translate([0, 0, 65]) rotate([0, 0, 0]) head();\n        \n        // Body\n        translate([0, 0, 35]) body();\n        \n        // Arms\n        translate([-12, 0, 50]) arm();\n        mirror([1, 0, 0]) translate([-12, 0, 50]) arm();\n        \n        // Legs\n        translate([-8, 0, 15]) leg();\n        mirror([1, 0, 0]) translate([-8, 0, 15]) leg();\n        \n        // Tail\n        translate([0, -12, 35]) tail();\n    }\n}\n\n// Head module\nmodule head() {\n    color(Color_Head) union() {\n        // Main head shape\n        scale([1, 1.2, 1.1]) sphere(12);\n        \n        // Snout\n        translate([0, 8, -3]) scale([0.8, 0.8, 0.7]) sphere(8);\n        \n        // Ears\n        translate([-8, 0, 8]) rotate([0, -20, 0]) ear();\n        mirror([1, 0, 0]) translate([-8, 0, 8]) rotate([0, -20, 0]) ear();\n        \n        // Head markings\n        color(Color_Markings) {\n            translate([0, 0, 12]) scale([1.2, 0.3, 0.5]) sphere(3);\n            translate([0, -2, 12]) scale([0.3, 1.2, 0.5]) sphere(3);\n        }\n        \n        // Eyes\n        color(Color_White) {\n            translate([-5, 6, 4]) sphere(2.5);\n            mirror([1, 0, 0]) translate([-5, 6, 4]) sphere(2.5);\n        }\n        \n        color(Color_Black) {\n            translate([-5, 6.5, 4.5]) sphere(1.5);\n            mirror([1, 0, 0]) translate([-5, 6.5, 4.5]) sphere(1.5);\n        }\n        \n        // Nose\n        color(Color_Black) translate([0, 10, -2]) sphere(1);\n    }\n}\n\n// Ear module\nmodule ear() {\n    color(Color_Head) union() {\n        // Main ear\n        rotate([0, 0, -30]) scale([1, 0.5, 2]) cylinder(6, 3, 5);\n        \n        // Inner ear\n        color(Color_White) translate([0, 0, 1]) scale([0.6, 0.6, 1.5]) cylinder(4, 1.5, 2);\n    }\n}\n\n// Body module\nmodule body() {\n    color(Color_Body) union() {\n        // Main torso\n        scale([1.2, 1, 1.5]) cylinder(20, 15, 12);\n        \n        // Chest marking\n        color(Color_Markings) translate([0, 8, 10]) scale([0.8, 0.8, 0.3]) cylinder(1, 8, 8);\n        \n        // Belt-like marking\n        color(Color_Markings) translate([0, 0, 5]) scale([1.3, 1.1, 0.3]) cylinder(3, 14, 14);\n    }\n}\n\n// Arm module\nmodule arm() {\n    color(Color_Body) union() {\n        // Upper arm\n        rotate([0, 0, -20]) translate([0, 0, -5]) cylinder(10, 5, 4);\n        \n        // Forearm\n        rotate([0, 0, 20]) translate([0, 5, -10]) cylinder(10, 4, 3);\n        \n        // Paw\n        translate([0, 10, -15]) sphere(4);\n        \n        // Paw markings\n        color(Color_Markings) {\n            for(i = [-1, 0, 1]) {\n                translate([i * 1.5, 12, -16]) sphere(1);\n            }\n        }\n    }\n}\n\n// Leg module\nmodule leg() {\n    color(Color_Body) union() {\n        // Thigh\n        cylinder(12, 6, 5);\n        \n        // Lower leg\n        translate([0, 0, -12]) cylinder(10, 5, 4);\n        \n        // Foot\n        translate([0, 2, -22]) scale([1.5, 2, 0.8]) sphere(5);\n        \n        // Foot markings\n        color(Color_Markings) {\n            for(i = [-1, 0, 1]) {\n                translate([i * 2, 4, -25]) sphere(1.2);\n            }\n        }\n    }\n}\n\n// Tail module\nmodule tail() {\n    color(Color_Body) union() {\n        // Tail base\n        rotate([0, 30, 0]) translate([0, 0, 0]) scale([0.8, 0.8, 1]) cylinder(15, 5, 3);\n        \n        // Tail tip\n        color(Color_Markings) translate([0, -10, -5]) scale([1.2, 1, 1]) sphere(4);\n    }\n}\n\n// Generate the model\nkubfu();",
    "renders": true
  },
  {
    "pokemon": "urshifu",
    "openscad_code": "// Urshifu Single Strike Style - Realistic Medium Complexity\n// Height: 60mm, 3D printable with 1mm wall thickness\n\n// Colors\nurshifu_blue = [0.1, 0.15, 0.3];\nurshifu_gray = [0.3, 0.3, 0.35];\nurshifu_red = [0.7, 0.1, 0.15];\nurshifu_white = [0.9, 0.9, 0.9];\nurshifu_black = [0.05, 0.05, 0.05];\n\n// Main body module\nmodule urshifu() {\n    // Base body\n    color(urshifu_blue)\n    difference() {\n        union() {\n            // Torso\n            translate([0, 0, 25])\n                scale([1, 0.8, 1.2])\n                sphere(d=20);\n            \n            // Chest armor\n            translate([0, -2, 35])\n                scale([1.2, 0.6, 0.8])\n                cube([18, 8, 12], center=true);\n            \n            // Legs\n            translate([-5, 0, 15])\n                rotate([0, 15, 0])\n                cylinder(h=15, d1=6, d2=4);\n            translate([5, 0, 15])\n                rotate([0, -15, 0])\n                cylinder(h=15, d1=6, d2=4);\n        }\n        \n        // Leg hollows\n        translate([-5, 0, 5])\n            cylinder(h=15, d=3);\n        translate([5, 0, 5])\n            cylinder(h=15, d=3);\n    }\n    \n    // Head\n    color(urshifu_blue)\n    translate([0, 0, 45])\n    difference() {\n        union() {\n            // Main head\n            scale([1, 0.9, 1.1])\n                sphere(d=18);\n            \n            // Snout\n            translate([0, -8, 0])\n                scale([0.8, 0.6, 0.6])\n                sphere(d=12);\n            \n            // Ears\n            translate([-6, 0, 6])\n                rotate([0, -10, -20])\n                cylinder(h=8, d1=4, d2=6);\n            translate([6, 0, 6])\n                rotate([0, -10, 20])\n                cylinder(h=8, d1=4, d2=6);\n        }\n        \n        // Eye sockets\n        translate([-4, -5, 2])\n            sphere(d=3);\n        translate([4, -5, 2])\n            sphere(d=3);\n    }\n    \n    // Eyes\n    color(urshifu_white)\n    translate([-4, -6, 2])\n        sphere(d=2);\n    translate([4, -6, 2])\n        sphere(d=2);\n    \n    // Pupils\n    color(urshifu_black)\n    translate([-4, -7, 2])\n        sphere(d=1);\n    translate([4, -7, 2])\n        sphere(d=1);\n    \n    // Arms\n    color(urshifu_blue)\n    translate([-12, 0, 35])\n        rotate([0, 0, -30])\n        cylinder(h=15, d1=5, d2=4);\n    translate([12, 0, 35])\n        rotate([0, 0, 30])\n        cylinder(h=15, d1=5, d2=4);\n    \n    // Fists\n    color(urshifu_gray)\n    translate([-20, 0, 35])\n        sphere(d=6);\n    translate([20, 0, 35])\n        sphere(d=6);\n    \n    // Belt/waist detail\n    color(urshifu_red)\n    translate([0, 0, 30])\n        scale([1.3, 0.3, 0.5])\n        cube([22, 3, 5], center=true);\n    \n    // Leg bands\n    color(urshifu_red)\n    for(x = [-6, 6]) {\n        translate([x, 0, 20])\n            rotate([0, 90, 0])\n            cylinder(h=8, d=3);\n    }\n    \n    // Chest pattern\n    color(urshifu_red)\n    translate([0, -8, 35])\n    difference() {\n        cube([8, 2, 10], center=true);\n        cube([6, 4, 11], center=true);\n    }\n    \n    // Tail\n    color(urshifu_blue)\n    translate([0, 8, 22])\n    rotate([30, 0, 0])\n    difference() {\n        cylinder(h=20, d1=8, d2=4);\n        translate([0, 0, -1])\n            cylinder(h=22, d=4);\n    }\n    \n    // Feet\n    color(urshifu_gray)\n    translate([-5, 0, 5])\n        scale([1.5, 2, 0.5])\n        cube([6, 4, 2], center=true);\n    translate([5, 0, 5])\n        scale([1.5, 2, 0.5])\n        cube([6, 4, 2], center=true);\n    \n    // Wrist bands\n    color(urshifu_red)\n    translate([-20, 0, 35])\n        rotate([0, 90, 0])\n        cylinder(h=8, d=4);\n    translate([20, 0, 35])\n        rotate([0, 90, 0])\n        cylinder(h=8, d=4);\n}\n\n// Create the model\nurshifu();",
    "renders": true
  },
  {
    "pokemon": "calyrex",
    "openscad_code": "// Calyrex Pokemon - Realistic Style\n// Medium complexity OpenSCAD model\n\n// Colors\n$fa = 2;\n$fs = 0.5;\n\n// Main body module\nmodule calyrex_body() {\n    color([0.7, 0.2, 0.3]) {\n        // Torso - pumpkin-like shape\n        translate([0, 0, 20]) {\n            scale([1.2, 1, 1.2]) \n                sphere(15);\n        }\n        \n        // Lower body extension\n        translate([0, 0, 10]) {\n            scale([1, 0.8, 1.5]) \n                cylinder(h=15, r1=12, r2=10);\n        }\n    }\n}\n\n// Head with crown\nmodule calyrex_head() {\n    color([0.7, 0.2, 0.3]) {\n        // Main head\n        translate([0, 0, 45]) {\n            sphere(12);\n        }\n        \n        // Crown base\n        color([0.2, 0.1, 0.4]) {\n            translate([0, 0, 55]) {\n                cylinder(h=5, r1=15, r2=12);\n            }\n        }\n        \n        // Crown points\n        color([0.3, 0.15, 0.5]) {\n            for(i = [0:120:359]) {\n                rotate([0, 0, i]) {\n                    translate([12, 0, 58]) {\n                        rotate([110, 0, 0]) {\n                            cylinder(h=8, r1=2, r2=0.5);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Eyes\n    color([1, 1, 1]) {\n        translate([-4, 8, 47]) {\n            scale([1, 1.5, 0.5])\n                sphere(3);\n        }\n        translate([4, 8, 47]) {\n            scale([1, 1.5, 0.5])\n                sphere(3);\n        }\n    }\n    \n    // Eye pupils\n    color([0, 0, 0]) {\n        translate([-4, 9, 48]) {\n            sphere(1);\n        }\n        translate([4, 9, 48]) {\n            sphere(1);\n        }\n    }\n    \n    // Mouth\n    color([0.3, 0.1, 0.1]) {\n        translate([0, 5, 42]) {\n            scale([3, 0.5, 1])\n                cube([2, 2, 1], center=true);\n        }\n    }\n}\n\n// Large collar leaves\nmodule calyrex_leaves() {\n    color([0.3, 0.6, 0.2]) {\n        for(i = [0:45:359]) {\n            rotate([0, 0, i]) {\n                translate([0, 0, 35]) {\n                    rotate([45, 0, 0]) {\n                        scale([1, 2, 0.5]) {\n                            cylinder(h=20, r1=8, r2=0);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Arms\nmodule calyrex_arms() {\n    color([0.7, 0.2, 0.3]) {\n        // Left arm\n        translate([-15, 0, 30]) {\n            rotate([0, 0, 30]) {\n                cylinder(h=15, r=3);\n            }\n        }\n        \n        // Right arm\n        translate([15, 0, 30]) {\n            rotate([0, 0, -30]) {\n                cylinder(h=15, r=3);\n            }\n        }\n    }\n}\n\n// Legs\nmodule calyrex_legs() {\n    color([0.7, 0.2, 0.3]) {\n        // Left leg\n        translate([-6, -5, 5]) {\n            cylinder(h=15, r=4);\n        }\n        \n        // Right leg\n        translate([6, -5, 5]) {\n            cylinder(h=15, r=4);\n        }\n        \n        // Feet\n        translate([-6, -8, 2]) {\n            scale([1.5, 2, 0.5])\n                sphere(4);\n        }\n        translate([6, -8, 2]) {\n            scale([1.5, 2, 0.5])\n                sphere(4);\n        }\n    }\n}\n\n// Hair-like extensions\nmodule calyrex_hair() {\n    color([0.8, 0.3, 0.4]) {\n        // Back hair\n        translate([0, -12, 50]) {\n            rotate([30, 0, 0]) {\n                scale([0.8, 0.3, 2])\n                    sphere(6);\n            }\n        }\n        \n        // Side hair\n        translate([-8, -10, 48]) {\n            rotate([0, 20, 0]) {\n                scale([0.5, 0.3, 1.5])\n                    sphere(5);\n            }\n        }\n        translate([8, -10, 48]) {\n            rotate([0, -20, 0]) {\n                scale([0.5, 0.3, 1.5])\n                    sphere(5);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    calyrex_body();\n    calyrex_head();\n    calyrex_leaves();\n    calyrex_arms();\n    calyrex_legs();\n    calyrex_hair();\n}",
    "renders": true
  },
  {
    "pokemon": "regieleki",
    "openscad_code": "// Regieleki - Electric Type Legendary Pokemon\n// Medium complexity realistic style\n// Total height: 80mm\n\n$fn = 32;\nmodule regieleki() {\n    // Main body - electric yellow core\n    color(\"gold\") \n    translate([0, 0, 10]) \n    scale([1, 0.8, 1.2]) \n    sphere(20);\n    \n    // Head with electric pattern\n    color(\"gold\") {\n        // Main head sphere\n        translate([0, 0, 45]) \n        sphere(15);\n        \n        // Electric crest on head\n        for(i = [-1, 1]) {\n            translate([i * 8, 0, 55]) \n            rotate([0, i * 15, 0]) \n            scale([0.3, 0.3, 1.5]) \n            cylinder(10, 5, 0);\n        }\n    }\n    \n    // Electric arms - six floating segments\n    module electric_arm(x, y, z, rot) {\n        color(\"yellow\") {\n            translate([x, y, z]) \n            rotate([0, 0, rot]) {\n                // Base connector\n                cylinder(5, 3, 3);\n                \n                // Floating segment 1\n                translate([0, 0, 6]) \n                rotate([0, 45, 0]) \n                cube([15, 5, 3], center = true);\n                \n                // Floating segment 2\n                translate([0, 0, 12]) \n                rotate([0, -30, 0]) \n                cube([12, 4, 3], center = true);\n                \n                // Floating segment 3\n                translate([0, 0, 18]) \n                rotate([0, 20, 0]) \n                cube([10, 3, 3], center = true);\n            }\n        }\n    }\n    \n    // Position 6 electric arms around body\n    for(i = [0:5]) {\n        angle = i * 60;\n        x = cos(angle) * 25;\n        y = sin(angle) * 25;\n        electric_arm(x, y, 25, angle);\n    }\n    \n    // Legs - three-pronged electric base\n    color(\"gold\") \n    for(i = [0:2]) {\n        rotate([0, 0, i * 120]) {\n            translate([0, 15, 0]) \n            scale([0.8, 1.2, 0.5]) \n            sphere(8);\n            \n            translate([0, 22, -5]) \n            rotate([15, 0, 0]) \n            cylinder(15, 6, 4);\n        }\n    }\n    \n    // Eye details - electric blue\n    color(\"dodgerblue\") {\n        // Left eye\n        translate([-8, 12, 45]) \n        scale([1.2, 0.8, 0.3]) \n        sphere(4);\n        \n        // Right eye\n        translate([8, 12, 45]) \n        scale([1.2, 0.8, 0.3]) \n        sphere(4);\n        \n        // Eye highlights\n        color(\"white\") {\n            translate([-7, 13, 47]) \n            sphere(1);\n            translate([9, 13, 47]) \n            sphere(1);\n        }\n    }\n    \n    // Electric pattern markings\n    color(\"yellow\") {\n        // Chest pattern\n        translate([0, 0, 35]) \n        rotate([90, 0, 0]) \n        linear_extrude(1) \n        polygon(points = [[-8, -8], [8, -8], [0, 8]]);\n        \n        // Back pattern\n        translate([0, -18, 35]) \n        rotate([90, 0, 0]) \n        linear_extrude(1) \n        circle(10);\n    }\n    \n    // Floating ring segments around waist\n    color(\"gold\") \n    for(z = [20, 25, 30]) {\n        rotate_extrude() \n        translate([22, 0, z]) \n        circle(2);\n    }\n    \n    // Base support for 3D printing\n    color(\"gray\") \n    translate([0, 0, -2]) \n    cylinder(2, 30, 30);\n}\n\n// Create the model\nregieleki();",
    "renders": true
  },
  {
    "pokemon": "regidrago",
    "openscad_code": "// Regidrago - Realistic Style (Medium Complexity)\n// Overall dimensions: ~60mm tall x ~50mm wide x ~45mm deep\n\n$fn = 50;\n\nmodule regidrago() {\n    color([0.15, 0.35, 0.25]) {  // Dark emerald green\n    \n    // Central crystal body\n    union() {\n        // Main torso - elongated crystal\n        rotate([0, 15, 0])\n            scale([1, 0.8, 1.5])\n                cube([35, 30, 40], center=true);\n        \n        // Upper crystal point\n        translate([0, 0, 25])\n            rotate([0, 15, 0])\n                cylinder(h=15, r1=15, r2=5, center=true);\n        \n        // Lower crystal base\n        translate([0, 0, -25])\n            rotate([0, 15, 0])\n                cylinder(h=15, r1=15, r2=20, center=true);\n    }\n    \n    // Dragon head module\n    color([0.1, 0.3, 0.2]) {\n        translate([0, 25, 15])\n            rotate([-30, 0, 0])\n                dragon_head();\n    }\n    \n    // Left arm crystal\n    color([0.2, 0.4, 0.3]) {\n        translate([-20, -5, 5])\n            rotate([0, -30, -15])\n                scale([0.7, 0.7, 1.2])\n                    crystal_arm();\n    }\n    \n    // Right arm crystal\n    color([0.2, 0.4, 0.3]) {\n        translate([20, -5, 5])\n            rotate([0, -30, 15])\n                scale([0.7, 0.7, 1.2])\n                    crystal_arm();\n    }\n    \n    // Leg crystals (x2)\n    color([0.1, 0.25, 0.15]) {\n        for(side = [-1, 1]) {\n            translate([side * 12, -15, -20])\n                rotate([30, 0, side * 10])\n                    scale([0.8, 0.8, 1])\n                        crystal_leg();\n        }\n    }\n    \n    // Yellow dot patterns on body\n    color([0.9, 0.8, 0.1]) {\n        // Front dots\n        for(i = [0:2]) {\n            translate([0, 15, 10 - i * 10])\n                sphere(2.5);\n        }\n        // Side dots\n        translate([-17, 0, 5])\n            sphere(2.5);\n        translate([17, 0, 5])\n            sphere(2.5);\n    }\n    }\n}\n\nmodule dragon_head() {\n    // Main head shape\n    hull() {\n        // Snout\n        translate([0, 20, 0])\n            sphere(8);\n        // Head base\n        translate([0, 5, 0])\n            sphere(12);\n    }\n    \n    // Jaw\n    color([0.05, 0.2, 0.1]) {\n        translate([0, 15, -8])\n            rotate([20, 0, 0])\n                scale([0.8, 0.6, 0.4])\n                    cube([16, 12, 8], center=true);\n    }\n    \n    // Eyes\n    color([0.9, 0.8, 0.1]) {\n        // Left eye\n        translate([-8, 10, 3])\n            scale([1, 1.5, 1])\n                sphere(3);\n        // Right eye\n        translate([8, 10, 3])\n            scale([1, 1.5, 1])\n                sphere(3);\n    }\n    \n    // Crystal horns\n    color([0.1, 0.3, 0.2]) {\n        // Left horn\n        translate([-5, 0, 12])\n            rotate([0, -20, -30])\n                cylinder(h=15, r=3, r2=1);\n        // Right horn\n        translate([5, 0, 12])\n            rotate([0, -20, 30])\n                cylinder(h=15, r=3, r2=1);\n    }\n}\n\nmodule crystal_arm() {\n    // Upper arm\n    cylinder(h=20, r=6, center=true);\n    // Forearm\n    translate([0, 0, -15])\n        cylinder(h=15, r=5, r2=4, center=true);\n    // Hand crystal\n    translate([0, 0, -30])\n        scale([1, 1.2, 1])\n            sphere(5);\n}\n\nmodule crystal_leg() {\n    // Thigh\n    cylinder(h=15, r=7, center=true);\n    // Lower leg\n    translate([0, 0, -12])\n        cylinder(h=12, r=6, r2=5, center=true);\n    // Foot\n    translate([0, 0, -24])\n        scale([1.2, 1.5, 0.8])\n            sphere(6);\n}\n\n// Assembly\nregidrago();",
    "renders": true
  },
  {
    "pokemon": "glastrier",
    "openscad_code": "// Glastrier OpenSCAD Model - Realistic Style, Medium Complexity\n// Based on Pokemon design with 3D printing considerations\n\n// Colors\ncolor_body = [0.9, 0.95, 1];\ncolor_ice = [0.7, 0.85, 0.95];\ncolor_eyes = [1, 0.1, 0.1];\ncolor_markings = [0.4, 0.5, 0.6];\n\n// Main body module\nmodule glastrier() {\n    // Body\n    color(color_body)\n    translate([0, 0, 8])\n    scale([1.2, 0.8, 1])\n    sphere(r=15, $fn=32);\n    \n    // Neck\n    color(color_body)\n    translate([0, 15, 25])\n    rotate([-30, 0, 0])\n    cylinder(h=20, r1=10, r2=8, $fn=16);\n    \n    // Head\n    color(color_body)\n    translate([0, 25, 32])\n    scale([1.3, 1.2, 1.4])\n    sphere(r=12, $fn=32);\n    \n    // Muzzle\n    color(color_body)\n    translate([0, 35, 28])\n    scale([0.8, 1.5, 0.8])\n    sphere(r=8, $fn=32);\n    \n    // Ice mask\n    color(color_ice)\n    translate([0, 30, 32])\n    scale([1.4, 1.8, 1.2])\n    sphere(r=10, $fn=32);\n    \n    // Eyes\n    color(color_eyes)\n    for(x=[-5, 5]) {\n        translate([x, 32, 35])\n        rotate([0, 90, 0])\n        cylinder(h=3, r=2, $fn=8);\n    }\n    \n    // Ice horns\n    color(color_ice)\n    for(x=[-12, 12]) {\n        translate([x, 20, 45])\n        rotate([0, 0, x > 0 ? 15 : -15])\n        cylinder(h=18, r1=4, r2=1, $fn=8);\n    }\n    \n    // Central horn\n    color(color_ice)\n    translate([0, 15, 48])\n    cylinder(h=25, r1=5, r2=2, $fn=8);\n    \n    // Legs\n    for(x=[-15, 15]) {\n        // Front legs\n        color(color_body)\n        translate([x, 5, 0])\n        rotate([0, 0, x > 0 ? 10 : -10])\n        cylinder(h=20, r=5, $fn=16);\n        \n        // Back legs\n        color(color_body)\n        translate([x*0.8, -20, 0])\n        rotate([0, 0, x > 0 ? -5 : 5])\n        cylinder(h=22, r=6, $fn=16);\n    }\n    \n    // Hooves\n    color(color_markings)\n    for(x=[-15, 15]) {\n        translate([x, 5, -2])\n        cylinder(h=3, r=6, $fn=16);\n        \n        translate([x*0.8, -20, -2])\n        cylinder(h=3, r=7, $fn=16);\n    }\n    \n    // Tail\n    color(color_body)\n    translate([0, -30, 18])\n    rotate([45, 0, 0])\n    cylinder(h=25, r1=8, r2=4, $fn=16);\n    \n    // Tail ice crystals\n    color(color_ice)\n    for(i=[0:2]) {\n        rotate([0, 0, i*120])\n        translate([0, -35, 22])\n        rotate([60, 0, 0])\n        cylinder(h=15, r1=3, r2=0.5, $fn=6);\n    }\n    \n    // Body ice armor plates\n    color(color_ice)\n    for(a=[45, 135, 225, 315]) {\n        rotate([0, 0, a])\n        translate([0, 0, 15])\n        rotate([90, 0, 0])\n        cylinder(h=8, r1=12, r2=8, $fn=6);\n    }\n    \n    // Ice markings on legs\n    color(color_ice)\n    for(x=[-15, 15]) {\n        translate([x, 0, 10])\n        scale([1.2, 0.8, 0.3])\n        sphere(r=4, $fn=8);\n        \n        translate([x*0.8, -15, 10])\n        scale([1.4, 1, 0.3])\n        sphere(r=5, $fn=8);\n    }\n}\n\n// Create the model scaled to 80mm\nscale(0.8)\nglastrier();",
    "renders": true
  },
  {
    "pokemon": "spectrier",
    "openscad_code": "// Spectrier - Realistic Style, Medium Complexity\n// 3D printable model using basic OpenSCAD primitives\n\n// Colors\n$fn = 32;\nbody_color = [0.1, 0.1, 0.1]; // Black\nmane_color = [0.2, 0.2, 0.3];  // Dark purple\neye_color = [0.9, 0.1, 0.1];   // Red\naccent_color = [0.3, 0.2, 0.4]; // Purple accents\n\n// Main body\nmodule body() {\n    color(body_color)\n    union() {\n        // Torso\n        translate([0, 0, 15])\n        scale([1.2, 0.8, 1.5])\n        sphere(10);\n        \n        // Chest extension\n        translate([0, 8, 10])\n        scale([0.8, 1.2, 0.8])\n        sphere(8);\n        \n        // Neck base\n        translate([0, -5, 25])\n        cylinder(h=8, r1=5, r2=4);\n    }\n}\n\n// Head\nmodule head() {\n    color(body_color)\n    union() {\n        // Main head shape\n        translate([0, -15, 30])\n        scale([1.1, 1.4, 1.2])\n        sphere(8);\n        \n        // Snout\n        translate([0, -22, 28])\n        scale([0.6, 0.8, 0.4])\n        sphere(6);\n        \n        // Eyes\n        color(eye_color)\n        translate([-4, -18, 31])\n        sphere(2);\n        translate([4, -18, 31])\n        sphere(2);\n        \n        // Eye ridges\n        color(body_color)\n        translate([-4, -17, 33])\n        cube([2, 1, 0.5], center=true);\n        translate([4, -17, 33])\n        cube([2, 1, 0.5], center=true);\n    }\n}\n\n// Flowing mane\nmodule mane() {\n    color(mane_color)\n    union() {\n        // Main mane pieces\n        for(i = [0:15]) {\n            rotate([0, 0, i * 22.5])\n            translate([0, -5, 28])\n            rotate([90 + sin(i) * 10, 0, 0])\n            scale([0.3, 0.3, 1.5])\n            cylinder(h=12, r1=3, r2=1);\n        }\n        \n        // Back mane\n        for(i = [0:8]) {\n            rotate([0, 0, -135 + i * 22.5])\n            translate([0, 0, 25])\n            rotate([60, 0, 0])\n            scale([0.4, 0.4, 1.2])\n            cylinder(h=15, r1=2.5, r2=0.5);\n        }\n    }\n}\n\n// Legs\nmodule legs() {\n    color(body_color)\n    union() {\n        // Front legs\n        translate([-8, 5, 10])\n        cylinder(h=15, r=3);\n        translate([8, 5, 10])\n        cylinder(h=15, r=3);\n        \n        // Back legs\n        translate([-7, -8, 8])\n        cylinder(h=17, r=3.5);\n        translate([7, -8, 8])\n        cylinder(h=17, r=3.5);\n        \n        // Hooves\n        translate([-8, 5, 0])\n        cylinder(h=3, r1=3, r2=4);\n        translate([8, 5, 0])\n        cylinder(h=3, r1=3, r2=4);\n        translate([-7, -8, 0])\n        cylinder(h=3, r1=3.5, r2=4.5);\n        translate([7, -8, 0])\n        cylinder(h=3, r1=3.5, r2=4.5);\n    }\n}\n\n// Tail\nmodule tail() {\n    color(body_color)\n    union() {\n        // Tail base\n        translate([0, -12, 15])\n        scale([1, 1.5, 1])\n        sphere(6);\n        \n        // Tail extension\n        color(mane_color)\n        translate([0, -20, 18])\n        rotate([30, 0, 0])\n        scale([0.5, 0.5, 2])\n        cylinder(h=20, r1=4, r2=2);\n        \n        // Tail tip\n        translate([0, -25, 8])\n        sphere(3);\n    }\n}\n\n// Leg joints\nmodule joints() {\n    color(body_color)\n    union() {\n        // Front knees\n        translate([-8, 5, 18])\n        sphere(3.5);\n        translate([8, 5, 18])\n        sphere(3.5);\n        \n        // Back knees\n        translate([-7, -8, 16])\n        sphere(4);\n        translate([7, -8, 16])\n        sphere(4);\n    }\n}\n\n// Assembly\nspectrier_scale = 2;\nscale(spectrier_scale)\nunion() {\n    body();\n    head();\n    mane();\n    legs();\n    tail();\n    joints();\n}",
    "renders": true
  },
  {
    "pokemon": "bulbasaur",
    "openscad_code": "// Bulbasaur OpenSCAD Model - Realistic Style, Medium Complexity\n// Overall dimensions: ~60mm tall x 50mm wide x 60mm deep\n\n// Color definitions\nbulba_green = [0.4, 0.7, 0.4];\nbulba_dark_green = [0.2, 0.5, 0.3];\nbulba_blue = [0.2, 0.4, 0.8];\n\n// Main body module\nmodule body() {\n    color(bulba_green) union() {\n        // Torso - main bulbous body\n        translate([0, 0, 10]) scale([1, 0.8, 1.2]) sphere(d=40);\n        \n        // Belly bulge\n        translate([0, -15, 5]) scale([0.8, 0.3, 1]) sphere(d=35);\n        \n        // Back hump\n        translate([0, 10, 15]) scale([1, 0.6, 0.8]) sphere(d=30);\n    }\n}\n\n// Head module\nmodule head() {\n    color(bulba_green) union() {\n        // Main head sphere\n        translate([0, 30, 35]) scale([1, 1.2, 0.9]) sphere(d=30);\n        \n        // Snout\n        translate([0, 42, 32]) scale([0.8, 0.4, 0.6]) sphere(d=20);\n        \n        // Ears\n        for(side = [-1, 1]) {\n            translate([side * 12, 25, 45]) rotate([side * -20, 0, 0]) \n                scale([0.3, 0.5, 1]) sphere(d=15);\n        }\n    }\n}\n\n// Eyes module\nmodule eyes() {\n    for(side = [-1, 1]) {\n        // Eye whites\n        color([1, 1, 1])\n            translate([side * 8, 38, 38]) sphere(d=8);\n        \n        // Pupils\n        color([0, 0, 0])\n            translate([side * 9, 38, 40]) sphere(d=4);\n    }\n}\n\n// Legs module\nmodule legs() {\n    for(side = [-1, 1]) {\n        // Front legs\n        color(bulba_green)\n            translate([side * 15, 10, 5]) rotate([0, -10, 0])\n                cylinder(h=20, d1=12, d2=8);\n        \n        // Back legs\n        translate([side * 12, -10, 5]) rotate([0, -10, 0])\n            cylinder(h=18, d1=10, d2=8);\n        \n        // Feet\n        for(pos = [10, -10]) {\n            translate([side * 15, pos, 0]) \n                scale([1.5, 1, 0.5]) sphere(d=10);\n        }\n    }\n}\n\n// Bulb on back module\nmodule bulb() {\n    color(bulba_dark_green) union() {\n        // Main bulb\n        translate([0, 0, 50]) rotate([0, 0, 0])\n            sphere(d=35);\n        \n        // Bulb base\n        translate([0, 0, 45])\n            cylinder(h=10, d1=30, d2=35);\n        \n        // Leaves\n        for(angle = [0:120:359]) {\n            rotate([0, 0, angle]) \n                translate([0, 15, 55]) rotate([45, 0, 0])\n                    scale([0.3, 1, 2]) sphere(d=20);\n        }\n    }\n}\n\n// Spots pattern module\nmodule spots() {\n    color(bulba_dark_green) {\n        // Back spots\n        for(pos = [[0, 5, 25], [5, 0, 20], [-5, 5, 22], [0, -5, 18]]) {\n            translate(pos) sphere(d=5);\n        }\n        \n        // Side spots\n        for(pos = [[15, 20, 15], [-15, 20, 15]]) {\n            translate(pos) sphere(d=4);\n        }\n    }\n}\n\n// Nose module\nmodule nose() {\n    color(bulba_green)\n        translate([0, 45, 30]) sphere(d=3);\n}\n\n// Mouth module\nmodule mouth() {\n    color([0.8, 0.4, 0.4])\n        translate([0, 42, 28]) \n            scale([1, 0.3, 0.2]) sphere(d=5);\n}\n\n// Tail module\nmodule tail() {\n    color(bulba_green)\n        hull() {\n            translate([0, -25, 15]) sphere(d=8);\n            translate([0, -35, 10]) sphere(d=6);\n            translate([0, -45, 15]) sphere(d=4);\n        }\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    eyes();\n    nose();\n    mouth();\n    legs();\n    bulb();\n    spots();\n    tail();\n}",
    "renders": true
  },
  {
    "pokemon": "ivysaur",
    "openscad_code": "// Ivysaur OpenSCAD Model - Medium Complexity\n// Realistic style with 3D printing considerations\n\n$fn = 32;\n\nmodule body() {\n    color([0.2, 0.6, 0.3])\n    union() {\n        // Main body\n        translate([0, 0, 12])\n        scale([1.2, 0.8, 1])\n        sphere(15);\n        \n        // Belly\n        color([0.7, 0.8, 0.6])\n        translate([0, -11, 8])\n        scale([0.8, 0.3, 0.6])\n        sphere(12);\n    }\n}\n\nmodule head() {\n    color([0.2, 0.6, 0.3])\n    union() {\n        // Main head\n        translate([0, 20, 22])\n        scale([0.9, 1.1, 0.9])\n        sphere(12);\n        \n        // Snout\n        translate([0, 30, 20])\n        scale([0.6, 0.4, 0.5])\n        sphere(8);\n        \n        // Eyes\n        color([0.9, 0.9, 0.9])\n        translate([-6, 24, 26])\n        sphere(3);\n        translate([6, 24, 26])\n        sphere(3);\n        \n        color([0.1, 0.1, 0.8])\n        translate([-6, 25, 26.5])\n        sphere(1.5);\n        translate([6, 25, 26.5])\n        sphere(1.5);\n        \n        // Nostrils\n        color([0, 0, 0])\n        translate([-2, 32, 20])\n        sphere(1);\n        translate([2, 32, 20])\n        sphere(1);\n        \n        // Mouth line\n        color([0.3, 0.2, 0.2])\n        translate([0, 28, 18])\n        rotate([90, 0, 0])\n        cylinder(h=0.5, r=3);\n    }\n}\n\nmodule ears() {\n    color([0.2, 0.6, 0.3])\n    union() {\n        // Left ear\n        translate([-10, 18, 30])\n        rotate([0, 10, -20])\n        scale([0.4, 0.4, 1])\n        cylinder(h=12, r=4);\n        \n        // Right ear\n        translate([10, 18, 30])\n        rotate([0, 10, 20])\n        scale([0.4, 0.4, 1])\n        cylinder(h=12, r=4);\n        \n        // Ear insides\n        color([0.8, 0.4, 0.4])\n        translate([-10, 18.5, 30])\n        rotate([0, 10, -20])\n        scale([0.2, 0.2, 0.8])\n        cylinder(h=10, r=3);\n        \n        translate([10, 18.5, 30])\n        rotate([0, 10, 20])\n        scale([0.2, 0.2, 0.8])\n        cylinder(h=10, r=3);\n    }\n}\n\nmodule legs() {\n    color([0.2, 0.6, 0.3])\n    union() {\n        // Front legs\n        translate([-8, 5, 0])\n        rotate([0, 10, 0])\n        cylinder(h=15, r=4);\n        \n        translate([8, 5, 0])\n        rotate([0, 10, 0])\n        cylinder(h=15, r=4);\n        \n        // Back legs\n        translate([-10, -10, 0])\n        rotate([0, -10, 0])\n        cylinder(h=15, r=5);\n        \n        translate([10, -10, 0])\n        rotate([0, -10, 0])\n        cylinder(h=15, r=5);\n        \n        // Feet\n        translate([-8, 5, -7])\n        scale([1.2, 1.5, 0.5])\n        sphere(4);\n        \n        translate([8, 5, -7])\n        scale([1.2, 1.5, 0.5])\n        sphere(4);\n        \n        translate([-10, -10, -7])\n        scale([1.3, 1.6, 0.5])\n        sphere(5);\n        \n        translate([10, -10, -7])\n        scale([1.3, 1.6, 0.5])\n        sphere(5);\n    }\n}\n\nmodule tail() {\n    color([0.2, 0.6, 0.3])\n    union() {\n        // Tail base\n        translate([0, -18, 8])\n        rotate([0, 20, 0])\n        scale([0.8, 2, 0.8])\n        sphere(8);\n        \n        // Tail tip\n        translate([0, -28, 4])\n        rotate([0, 30, 0])\n        scale([0.6, 1.5, 0.6])\n        sphere(5);\n    }\n}\n\nmodule bulb() {\n    color([0.8, 0.6, 0.2])\n    union() {\n        // Main bulb\n        translate([0, -5, 28])\n        scale([1.3, 1.3, 1])\n        sphere(10);\n        \n        // Bulb spots\n        color([0.9, 0.7, 0.3])\n        for(i = [0:5]) {\n            rotate([0, 0, i * 60])\n            translate([7, -5, 30])\n            sphere(2);\n        }\n        \n        // Bulb top\n        color([0.1, 0.8, 0.1])\n        translate([0, -5, 37])\n        scale([0.3, 0.3, 0.5])\n        cylinder(h=5, r=8);\n    }\n}\n\nmodule spots() {\n    color([0.15, 0.4, 0.2])\n    union() {\n        // Body spots\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90])\n            translate([8, 0, 15])\n            scale([1, 0.7, 0.5])\n            sphere(2);\n        }\n        \n        // Head spots\n        translate([0, 25, 24])\n        scale([0.8, 0.6, 0.4])\n        sphere(1.5);\n        \n        translate([-5, 22, 24])\n        scale([0.8, 0.6, 0.4])\n        sphere(1.5);\n        \n        translate([5, 22, 24])\n        scale([0.8, 0.6, 0.4])\n        sphere(1.5);\n    }\n}\n\n// Main assembly\nscale(0.7)\nunion() {\n    body();\n    head();\n    ears();\n    legs();\n    tail();\n    bulb();\n    spots();\n}",
    "renders": true
  },
  {
    "pokemon": "charmander",
    "openscad_code": "// Charmander - Realistic Style, Medium Complexity\n// Size: ~70mm height\n\n// Colors\norange = [1, 0.5, 0];\nyellow = [1, 0.8, 0];\nred = [0.9, 0.2, 0];\nblack = [0.1, 0.1, 0.1];\nwhite = [1, 1, 1];\n\n// Main body\nmodule body() {\n    color(orange)\n    union() {\n        // Torso\n        translate([0, -5, 20])\n            scale([1, 0.8, 1.2])\n                sphere(d=30);\n                \n        // Belly pattern\n        color(yellow)\n        translate([0, 11, 15])\n            scale([1, 0.5, 1.5])\n                sphere(d=20);\n                \n        // Chest\n        translate([0, 0, 10])\n            sphere(d=25);\n    }\n}\n\n// Head\nmodule head() {\n    color(orange)\n    union() {\n        // Main head\n        translate([0, 0, 45])\n            scale([1.2, 1, 1.1])\n                sphere(d=28);\n                \n        // Snout\n        translate([0, 12, 42])\n            scale([0.8, 0.6, 0.6])\n                sphere(d=20);\n                \n        // Nostrils\n        color(black)\n        for(x = [-3, 3])\n            translate([x, 17, 40])\n                sphere(d=1.5);\n                \n        // Eyes\n        color(white)\n        for(x = [-7, 7])\n            translate([x, 5, 50])\n                scale([1, 1.2, 0.5])\n                    sphere(d=8);\n                    \n        color(black)\n        for(x = [-7, 7])\n            translate([x - 1, 5, 52])\n                sphere(d=4);\n                \n        // Mouth line\n        color(black)\n        translate([0, 10, 38])\n            rotate([90, 0, 0])\n                cylinder(h=0.5, r=6, $fn=20);\n    }\n}\n\n// Tail with flame\nmodule tail() {\n    color(orange)\n    union() {\n        // Tail base\n        translate([0, -20, 25])\n            rotate([0, 90, 0])\n                cylinder(h=25, r1=8, r2=4);\n                \n        // Tail tip\n        translate([0, -28, 22])\n            rotate([0, 90, 0])\n                cylinder(h=10, r1=4, r2=6);\n                \n        // Flame\n        color(red)\n        translate([0, -35, 22])\n            union() {\n                sphere(d=8);\n                translate([0, -5, 2])\n                    sphere(d=6);\n                translate([0, -3, -2])\n                    sphere(d=5);\n                translate([3, -2, 0])\n                    sphere(d=4);\n                translate([-3, -2, 0])\n                    sphere(d=4);\n            }\n    }\n}\n\n// Arms\nmodule arms() {\n    color(orange)\n    for(side = [-1, 1]) {\n        translate([side * 15, 0, 30])\n            rotate([0, 0, side * 45])\n                union() {\n                    // Upper arm\n                    cylinder(h=12, r=4);\n                    \n                    // Lower arm\n                    translate([0, 0, 12])\n                        rotate([side * 20, 0, 0])\n                            cylinder(h=10, r=3.5);\n                            \n                    // Hand\n                    translate([0, 0, 22])\n                        sphere(d=7);\n                        \n                    // Fingers\n                    for(i = [0, 1, 2]) {\n                        rotate([0, 0, i * 30 - 30])\n                            translate([0, 5, 0])\n                                cylinder(h=4, r=1.5);\n                    }\n                }\n    }\n}\n\n// Legs\nmodule legs() {\n    color(orange)\n    for(side = [-1, 1]) {\n        translate([side * 8, -5, 5])\n            union() {\n                // Thigh\n                cylinder(h=15, r=6);\n                \n                // Lower leg\n                translate([0, 0, 15])\n                    rotate([0, 0, side * -10])\n                        cylinder(h=12, r=5);\n                        \n                // Foot\n                translate([0, 5, 26])\n                    rotate([90, 0, 0])\n                        scale([1.5, 1, 0.8])\n                            cylinder(h=8, r1=4, r2=2);\n            }\n    }\n}\n\n// Back spikes\nmodule spikes() {\n    color(red)\n    for(i = [0, 1, 2]) {\n        translate([0, -10 - i * 8, 35 - i * 5])\n            rotate([90, 0, 0])\n                cylinder(h=8 - i * 2, r1=1.5, r2=0.5);\n    }\n}\n\n// Assembly\n$fn = 32;\nbody();\nhead();\ntail();\narms();\nlegs();\nspikes();",
    "renders": true
  },
  {
    "pokemon": "charmeleon",
    "openscad_code": "// Charmeleon OpenSCAD Model - Realistic Style, Medium Complexity\n\n// Basic parameters\nscale_factor = 1/2;  // Scale to ~75mm height\nbody_height = 80 * scale_factor;\nbody_width = 35 * scale_factor;\nbody_depth = 45 * scale_factor;\n\n// Colors\ncolor_body = [0.8, 0.3, 0.1];      // Orange-red\ncolor_belly = [0.9, 0.8, 0.6];     // Light tan\ncolor_flame = [1, 0.7, 0];         // Yellow-orange\n\n// Head module\nmodule head() {\n    color(color_body)\n    union() {\n        // Main head shape\n        translate([0, 0, body_height * 0.7])\n        scale([1.2, 1, 1.1])\n        sphere(body_height * 0.2);\n        \n        // Snout\n        translate([body_width * 0.5, 0, body_height * 0.65])\n        rotate([0, -20, 0])\n        scale([1.5, 0.8, 0.8])\n        cylinder(h=body_height * 0.15, r=body_height * 0.12);\n        \n        // Horns\n        translate([body_width * 0.4, body_width * 0.3, body_height * 0.9])\n        rotate([0, 0, 30])\n        cylinder(h=body_height * 0.15, r1=body_width * 0.05, r2=0);\n        \n        translate([body_width * 0.4, -body_width * 0.3, body_height * 0.9])\n        rotate([0, 0, -30])\n        cylinder(h=body_height * 0.15, r1=body_width * 0.05, r2=0);\n    }\n}\n\n// Eyes module\nmodule eyes() {\n    // Left eye\n    translate([body_width * 0.7, body_width * 0.2, body_height * 0.75])\n    color([0.2, 0.2, 0.8])\n    sphere(body_height * 0.05);\n    \n    // Right eye\n    translate([body_width * 0.7, -body_width * 0.2, body_height * 0.75])\n    color([0.2, 0.2, 0.8])\n    sphere(body_height * 0.05);\n    \n    // Eye highlights\n    translate([body_width * 0.75, body_width * 0.22, body_height * 0.77])\n    color([1, 1, 1])\n    sphere(body_height * 0.015);\n    \n    translate([body_width * 0.75, -body_width * 0.22, body_height * 0.77])\n    color([1, 1, 1])\n    sphere(body_height * 0.015);\n}\n\n// Body module\nmodule body() {\n    color(color_body)\n    union() {\n        // Main torso\n        translate([0, 0, body_height * 0.35])\n        scale([1.3, 1, 1.2])\n        sphere(body_height * 0.25);\n        \n        // Belly\n        color(color_belly)\n        translate([0, 0, body_height * 0.3])\n        scale([1.1, 0.8, 0.8])\n        sphere(body_height * 0.2);\n    }\n}\n\n// Tail module\nmodule tail() {\n    color(color_body)\n    union() {\n        // Tail base\n        translate([-body_width * 0.6, 0, body_height * 0.3])\n        rotate([0, 0, 45])\n        scale([3, 0.6, 0.6])\n        cylinder(h=body_height * 0.4, r=body_width * 0.1);\n        \n        // Flame tip\n        translate([-body_width * 1.5, 0, body_height * 0.5])\n        color(color_flame)\n        scale([0.8, 0.8, 1.5])\n        sphere(body_width * 0.15);\n    }\n}\n\n// Legs module\nmodule legs() {\n    color(color_body)\n    union() {\n        // Front left leg\n        translate([body_width * 0.3, body_width * 0.25, body_height * 0.1])\n        rotate([0, 10, 0])\n        cylinder(h=body_height * 0.3, r1=body_width * 0.08, r2=body_width * 0.06);\n        \n        // Front right leg\n        translate([body_width * 0.3, -body_width * 0.25, body_height * 0.1])\n        rotate([0, 10, 0])\n        cylinder(h=body_height * 0.3, r1=body_width * 0.08, r2=body_width * 0.06);\n        \n        // Back left leg\n        translate([-body_width * 0.2, body_width * 0.25, 0])\n        rotate([0, -10, 0])\n        cylinder(h=body_height * 0.35, r1=body_width * 0.1, r2=body_width * 0.08);\n        \n        // Back right leg\n        translate([-body_width * 0.2, -body_width * 0.25, 0])\n        rotate([0, -10, 0])\n        cylinder(h=body_height * 0.35, r1=body_width * 0.1, r2=body_width * 0.08);\n    }\n}\n\n// Arms module\nmodule arms() {\n    color(color_body)\n    union() {\n        // Left arm\n        translate([body_width * 0.2, body_width * 0.4, body_height * 0.5])\n        rotate([0, 0, -30])\n        cylinder(h=body_height * 0.2, r1=body_width * 0.06, r2=body_width * 0.05);\n        \n        // Left hand/claw\n        translate([body_width * 0.35, body_width * 0.5, body_height * 0.45])\n        sphere(body_width * 0.08);\n        \n        // Right arm\n        translate([body_width * 0.2, -body_width * 0.4, body_height * 0.5])\n        rotate([0, 0, 30])\n        cylinder(h=body_height * 0.2, r1=body_width * 0.06, r2=body_width * 0.05);\n        \n        // Right hand/claw\n        translate([body_width * 0.35, -body_width * 0.5, body_height * 0.45])\n        sphere(body_width * 0.08);\n    }\n}\n\n// Back ridge\nmodule back_ridge() {\n    color(color_body)\n    for(i = [0:2]) {\n        translate([-body_width * 0.1, 0, body_height * (0.4 + i * 0.1)])\n        scale([1, 0.3, 0.3])\n        sphere(body_width * 0.05);\n    }\n}\n\n// Assemble the complete Charmeleon\nunion() {\n    body();\n    head();\n    eyes();\n    tail();\n    legs();\n    arms();\n    back_ridge();\n}",
    "renders": true
  },
  {
    "pokemon": "squirtle",
    "openscad_code": "// Squirtle - OpenSCAD model with realistic styling\n// Realistic medium-complexity Squirtle for 3D printing\n\n// Colors\nshell_color = [0.2, 0.6, 0.8];\nbelly_color = [0.9, 0.9, 0.8];\neye_color = [0.9, 0.9, 0.9];\npupil_color = [0.1, 0.1, 0.1];\ntail_color = [0.6, 0.8, 0.9];\n\n// Overall scale\nmodule squirtle() {\n    scale([1, 1, 1.2]) {\n        // Main body shell\n        color(shell_color) difference() {\n            sphere(d=45, $fn=32);\n            translate([0, 0, -25]) cube([50, 50, 50], center=true);\n            translate([0, 0, 20]) cube([40, 40, 20], center=true);\n        }\n        \n        // Belly\n        color(belly_color) translate([0, -22.5, 5]) {\n            scale([1, 0.7, 0.9]) sphere(d=43, $fn=32);\n        }\n        \n        // Head\n        color(shell_color) translate([0, 0, 35]) {\n            sphere(d=35, $fn=32);\n        }\n        \n        // Snout\n        color(shell_color) translate([0, 15, 30]) {\n            rotate([30, 0, 0]) scale([1, 1.2, 0.8]) sphere(d=20, $fn=32);\n        }\n        \n        // Eyes\n        for (x = [-8, 8]) {\n            color(eye_color) translate([x, 18, 40]) {\n                sphere(d=8, $fn=16);\n            }\n            color(pupil_color) translate([x + 2, 18, 43]) {\n                sphere(d=4, $fn=16);\n            }\n        }\n        \n        // Mouth\n        color([0.2, 0.1, 0.1]) translate([0, 25, 32]) {\n            rotate([90, 0, 0]) cylinder(h=3, r1=5, r2=0, $fn=16);\n        }\n        \n        // Arms\n        module arm(side) {\n            translate([side * 20, 0, 15]) {\n                rotate([0, 0, side * 15]) {\n                    color(shell_color) {\n                        sphere(d=10, $fn=16);\n                        translate([0, 0, -7]) cylinder(h=15, r=4, $fn=16);\n                    }\n                }\n            }\n        }\n        arm(1);\n        arm(-1);\n        \n        // Legs\n        module leg(side) {\n            translate([side * 15, 0, -15]) {\n                color(shell_color) {\n                    sphere(d=12, $fn=16);\n                    translate([0, 0, -8]) cylinder(h=12, r=5, $fn=16);\n                }\n            }\n        }\n        leg(1);\n        leg(-1);\n        \n        // Tail\n        color(tail_color) translate([0, -20, -10]) {\n            rotate([0, 0, -20]) {\n                union() {\n                    cylinder(h=25, r1=8, r2=6, $fn=16);\n                    translate([0, 0, 25]) {\n                        rotate([0, 0, 30]) {\n                            scale([1.5, 1, 0.3]) sphere(d=20, $fn=16);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Shell pattern lines\n        module shell_line(angle) {\n            color([0.1, 0.3, 0.4]) rotate([0, 0, angle]) {\n                translate([0, 0, 22]) {\n                    for (r = [15:4:35]) {\n                        rotate_extrude(angle=30, $fn=32) {\n                            translate([r, 0, 0]) square([0.5, 2]);\n                        }\n                    }\n                }\n            }\n        }\n        \n        shell_line(0);\n        shell_line(120);\n        shell_line(240);\n        \n        // Tail curl pattern\n        color([0.4, 0.5, 0.7]) translate([0, -30, 5]) {\n            rotate([90, 0, 0]) {\n                for (a = [0:45:315]) {\n                    rotate([0, 0, a]) {\n                        translate([12, 0, 0]) sphere(d=2, $fn=8);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Generate the Squirtle\nsquirtle();",
    "renders": true
  },
  {
    "pokemon": "wartortle",
    "openscad_code": "// Wartortle - Realistic Style, Medium Complexity\n// Overall dimensions approximately 60mm tall\n\n// Main body color\nbody_color = \"#5A8EA8\";\nshell_color = \"#955A36\";\nbelly_color = \"#C8D8E8\";\naccent_color = \"#FFFFFF\";\n\n// Head module\nmodule head() {\n    color(body_color)\n    union() {\n        // Main head sphere\n        sphere(d=22, $fn=32);\n        \n        // Snout\n        translate([0, 11, 0])\n            scale([1.2, 1.5, 1])\n            sphere(d=12, $fn=24);\n            \n        // Ears\n        translate([-8, 0, 15])\n            rotate([0, -20, 0])\n            scale([1, 1, 2])\n            cylinder(h=12, d1=8, d2=4, $fn=8);\n            \n        translate([8, 0, 15])\n            rotate([0, 20, 0])\n            scale([1, 1, 2])\n            cylinder(h=12, d1=8, d2=4, $fn=8);\n            \n        // Tail base\n        translate([0, -12, 0])\n            rotate([0, 90, 0])\n            cylinder(h=8, d=6, $fn=16);\n    }\n}\n\n// Eyes module\nmodule eyes() {\n    translate([-6, 12, 4])\n        color([0, 0, 0])\n        sphere(d=4, $fn=16);\n    translate([6, 12, 4])\n        color([0, 0, 0])\n        sphere(d=4, $fn=16);\n        \n    // Eyebrow ridges\n    translate([-6, 10, 8])\n        color(body_color)\n        rotate([30, 0, 0])\n        cube([5, 2, 1], center=true);\n    translate([6, 10, 8])\n        color(body_color)\n        rotate([30, 0, 0])\n        cube([5, 2, 1], center=true);\n}\n\n// Shell module\nmodule shell() {\n    color(shell_color)\n    difference() {\n        // Main shell\n        translate([0, -8, -12])\n            scale([1.3, 1, 1])\n            sphere(d=25, $fn=32);\n            \n        // Shell cavity\n        translate([0, -5, -10])\n            scale([1.1, 0.8, 0.8])\n            sphere(d=22, $fn=32);\n    }\n    \n    // Shell pattern lines\n    color([0.3, 0.2, 0.1])\n    for(i = [-2:2]) {\n        translate([i*4, -8, -5])\n            rotate([90, 0, 0])\n            cylinder(h=0.5, d=1, $fn=8);\n    }\n}\n\n// Arms module\nmodule arms() {\n    // Left arm\n    translate([-12, 0, -5])\n        rotate([0, 0, 45])\n        color(body_color)\n        union() {\n            cylinder(h=10, d=6, $fn=16);\n            translate([0, 0, -8])\n                sphere(d=8, $fn=16);\n        }\n        \n    // Right arm\n    translate([12, 0, -5])\n        rotate([0, 0, -45])\n        color(body_color)\n        union() {\n            cylinder(h=10, d=6, $fn=16);\n            translate([0, 0, -8])\n                sphere(d=8, $fn=16);\n        }\n}\n\n// Legs module\nmodule legs() {\n    // Left leg\n    translate([-8, 0, -20])\n        rotate([0, 15, 0])\n        color(body_color)\n        union() {\n            cylinder(h=12, d=8, $fn=16);\n            translate([0, 0, -10])\n                sphere(d=10, $fn=16);\n        }\n        \n    // Right leg\n    translate([8, 0, -20])\n        rotate([0, -15, 0])\n        color(body_color)\n        union() {\n            cylinder(h=12, d=8, $fn=16);\n            translate([0, 0, -10])\n                sphere(d=10, $fn=16);\n        }\n}\n\n// Tail module\nmodule tail() {\n    color(body_color)\n    union() {\n        // Tail segments\n        translate([0, -20, 0])\n            rotate([0, 90, 0])\n            union() {\n                cylinder(h=8, d=6, $fn=16);\n                \n                // First segment\n                translate([0, 0, 8])\n                    scale([0.8, 0.8, 1])\n                    cylinder(h=6, d=6, $fn=16);\n                    \n                // Second segment\n                translate([0, 0, 14])\n                    scale([0.6, 0.6, 1])\n                    cylinder(h=8, d=6, $fn=16);\n                    \n                // Tail tip\n                translate([0, 0, 22])\n                    color(accent_color)\n                    sphere(d=6, $fn=16);\n            }\n    }\n}\n\n// Belly marking\nmodule belly() {\n    translate([0, 0, -15])\n        color(belly_color)\n        scale([1.5, 1.2, 0.5])\n        sphere(d=15, $fn=32);\n}\n\n// Main assembly\nunion() {\n    // Position the model upright\n    rotate([90, 0, 0])\n    translate([0, 0, 25])\n    \n    union() {\n        // Core body parts\n        head();\n        eyes();\n        shell();\n        belly();\n        \n        // Limbs\n        arms();\n        legs();\n        \n        // Tail\n        tail();\n    }\n}",
    "renders": true
  },
  {
    "pokemon": "caterpie",
    "openscad_code": "// Caterpie Pokemon - Realistic Style\n// Size: ~70mm length, 3D printable\n\n// Color constants\n$fn=50;\n\nmodule caterpie_body() {\n    // Main body segments - caterpillar-like\n    color(\"limegreen\") {\n        // Head segment\n        translate([0, 0, 5]) {\n            difference() {\n                sphere(d=15);\n                // Mouth indent\n                translate([7.5, 0, -2]) rotate([0, 90, 0]) \n                    cylinder(h=10, d1=5, d2=8, $fn=6);\n            }\n        }\n        \n        // Body segments\n        for(i=[1:5]) {\n            translate([-i*12, 0, 5]) {\n                sphere(d=15 - i*1.5);\n            }\n        }\n        \n        // Tail segment\n        translate([-72, 0, 5]) {\n            sphere(d=8);\n        }\n    }\n}\n\nmodule antenna() {\n    // Yellow antenna with red tip\n    color(\"yellow\") {\n        translate([7, 4, 15]) rotate([0, -30, 0]) \n            cylinder(h=12, d1=2, d2=1);\n        translate([7, -4, 15]) rotate([0, 30, 0]) \n            cylinder(h=12, d1=2, d2=1);\n    }\n    color(\"red\") {\n        translate([15.5, 4, 11]) sphere(d=2);\n        translate([15.5, -4, 11]) sphere(d=2);\n    }\n}\n\nmodule eyes() {\n    // Large oval eyes with pupils\n    color(\"white\") {\n        translate([7, 5, 8]) scale([1.2, 1, 1]) sphere(d=6);\n        translate([7, -5, 8]) scale([1.2, 1, 1]) sphere(d=6);\n    }\n    color(\"black\") {\n        translate([8.5, 5, 8]) sphere(d=3);\n        translate([8.5, -5, 8]) sphere(d=3);\n    }\n}\n\nmodule yellow_rings() {\n    // Characteristic yellow rings on body\n    color(\"gold\") {\n        for(i=[0:4]) {\n            translate([-i*12, 0, 8]) rotate([90, 0, 0]) \n                cylinder(h=2, d=16 - i*1.5, $fn=20);\n        }\n    }\n}\n\nmodule feet() {\n    // Short stubby feet\n    color(\"limegreen\") {\n        for(i=[0:3]) {\n            // Left feet\n            translate([-i*15 - 5, 8, 0]) \n                cylinder(h=5, d1=4, d2=3);\n            // Right feet  \n            translate([-i*15 - 5, -8, 0]) \n                cylinder(h=5, d1=4, d2=3);\n        }\n    }\n}\n\nmodule spots() {\n    // Red spots on back\n    color(\"red\") {\n        for(i=[0:4]) {\n            translate([-i*12 - 6, 0, 13]) sphere(d=2.5);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    caterpie_body();\n    antenna();\n    eyes();\n    yellow_rings();\n    feet();\n    spots();\n}",
    "renders": true
  },
  {
    "pokemon": "metapod",
    "openscad_code": "// Realistic Metapod OpenSCAD Model\n// Medium complexity, 3D-printable\n\n// Overall dimensions\noverall_length = 80;\noverall_height = 35;\nshell_thickness = 2;\n\n// Main shell\nmodule metapod_shell() {\n    color([0.6, 0.75, 0.5]) {\n        // Central pod body\n        difference() {\n            // Outer shell\n            translate([0,0,overall_height/2])\n                scale([1, 0.7, 0.5])\n                    sphere(d=overall_height*1.8, $fn=64);\n            \n            // Hollow interior\n            translate([0,0,overall_height/2])\n                scale([1, 0.7, 0.5])\n                    sphere(d=overall_height*1.8 - shell_thickness*2, $fn=64);\n        }\n        \n        // Front taper\n        translate([overall_length/2 - 5, 0, overall_height/2])\n            scale([1.2, 0.8, 0.4])\n                sphere(d=overall_height*1.5, $fn=48);\n                \n        // Back taper\n        translate([-overall_length/2 + 5, 0, overall_height/2])\n            scale([1.2, 0.8, 0.4])\n                sphere(d=overall_height*1.5, $fn=48);\n    }\n}\n\n// Segmented shell pattern\nmodule shell_segments() {\n    color([0.5, 0.65, 0.4]) {\n        for(i = [-3:3]) {\n            // Vertical segments\n            rotate([0, 0, i*20])\n                translate([0, 0, overall_height/2])\n                    scale([1, 0.7, 0.5])\n                        difference() {\n                            cylinder(h=overall_height+10, r=overall_height*0.9, $fn=3);\n                            translate([0,0,-1])\n                                cylinder(h=overall_height+12, r=overall_height*0.9-1, $fn=3);\n                        }\n        }\n        \n        // Horizontal ridges\n        for(h = [10:15:overall_height-5]) {\n            translate([0, 0, h])\n                scale([1, 0.7, 0.2])\n                    sphere(d=overall_height*1.8, $fn=64);\n        }\n    }\n}\n\n// Eyes\nmodule eyes() {\n    color([0.1, 0.1, 0.1]) {\n        // Left eye slit\n        translate([overall_length/3, -overall_height/3, overall_height/2 + 2])\n            rotate([0, 25, 0])\n                scale([1, 0.3, 0.1])\n                    cube([8, 3, 2], center=true);\n                    \n        // Right eye slit\n        translate([overall_length/3, overall_height/3, overall_height/2 + 2])\n            rotate([0, 25, 0])\n                scale([1, 0.3, 0.1])\n                    cube([8, 3, 2], center=true);\n    }\n}\n\n// Nose ridge\nmodule nose_ridge() {\n    color([0.55, 0.7, 0.45]) {\n        translate([overall_length/2.5, 0, overall_height/2])\n            rotate([0, -10, 0])\n                scale([0.3, 0.15, 0.3])\n                    cylinder(h=overall_height*0.8, r=overall_height/4, $fn=16);\n    }\n}\n\n// Shell marking patterns\nmodule shell_markings() {\n    color([0.4, 0.5, 0.3]) {\n        // Triangular markings\n        for(i = [0:3]) {\n            rotate([0, 0, i*90])\n                translate([overall_height/2.5, 0, overall_height/2 + 5])\n                    scale([1, 0.5, 0.1])\n                        cylinder(h=1, r1=8, r2=0, $fn=3);\n        }\n        \n        // Dot patterns\n        for(x = [-1:1]) {\n            for(y = [-1:1]) {\n                translate([x*15, y*10, overall_height/2 + 8])\n                    sphere(d=2, $fn=12);\n            }\n        }\n    }\n}\n\n// Underside support\nmodule support_base() {\n    color([0.6, 0.75, 0.5]) {\n        translate([0, 0, 2])\n            scale([1, 0.8, 0.3])\n                sphere(d=overall_height*1.6, $fn=64);\n    }\n}\n\n// Assembly\nmetapod_shell();\nshell_segments();\neyes();\nnose_ridge();\nshell_markings();\nsupport_base();",
    "renders": true
  },
  {
    "pokemon": "butterfree",
    "openscad_code": "// Realistic Butterfree Pokemon - Medium Complexity\n// 3D printable model using basic primitives\n\n$fn = 32;\nscale_factor = 0.5;\n\n// Main colors\ncolor_body = [0.8, 0.6, 0.9];  // Light purple\ncolor_wings = [0.9, 0.8, 1];   // Light purple-white\ncolor_accents = [0.5, 0.2, 0.8];  // Dark purple\ncolor_eyes = [0.1, 0.1, 0.1];  // Black\ncolor_detail = [0.4, 0.8, 0.3];  // Green accents\n\nmodule butterfree() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        union() {\n            // Body\n            translate([0, 0, 20]) {\n                color(color_body) {\n                    sphere(8);\n                    cylinder(h=15, r1=6, r2=4, center=true);\n                }\n                \n                // Abdomen\n                translate([0, 0, -20]) {\n                    color(color_body) {\n                        sphere(10);\n                        cylinder(h=20, r1=8, r2=12, center=true);\n                    }\n                }\n            }\n            \n            // Head\n            translate([0, 0, 35]) {\n                color(color_body) {\n                    sphere(6);\n                    \n                    // Antennae\n                    for(i = [-1, 1]) {\n                        translate([i * 4, 0, 3]) {\n                            rotate([0, -20, 0]) {\n                                cylinder(h=12, r1=1.5, r2=0.5);\n                                translate([0, 0, 12]) {\n                                    sphere(2);\n                                }\n                            }\n                        }\n                    }\n                }\n                \n                // Eyes\n                for(i = [-1, 1]) {\n                    translate([i * 3, 3, 1]) {\n                        color(color_eyes) {\n                            sphere(2.5);\n                        }\n                        translate([0, 0, 0.5]) {\n                            color([1, 1, 1]) {\n                                sphere(1);\n                            }\n                        }\n                    }\n                }\n                \n                // Mouth\n                translate([0, 4, -1]) {\n                    color(color_eyes) {\n                        rotate([90, 0, 0]) {\n                            cylinder(h=0.5, r1=1, r2=0.5);\n                        }\n                    }\n                }\n            }\n            \n            // Wings\n            for(side = [-1, 1]) {\n                translate([side * 12, 0, 25]) {\n                    rotate([0, 0, side * 20]) {\n                        color(color_wings) {\n                            // Upper wing\n                            translate([0, 0, 0]) {\n                                scale([1, 1.5, 0.5]) {\n                                    sphere(15);\n                                }\n                            }\n                            \n                            // Lower wing\n                            translate([0, -15, -3]) {\n                                scale([0.7, 1, 0.5]) {\n                                    sphere(12);\n                                }\n                            }\n                            \n                            // Wing veins\n                            color(color_accents) {\n                                for(angle = [0:45:135]) {\n                                    rotate([0, 0, angle]) {\n                                        translate([5, 0, 0.5]) {\n                                            cylinder(h=8, r=0.5);\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            \n            // Arms/Legs\n            for(side = [-1, 1]) {\n                // Arms\n                translate([side * 8, 0, 15]) {\n                    rotate([0, 0, side * -30]) {\n                        color(color_body) {\n                            cylinder(h=8, r1=2, r2=1.5);\n                            translate([8, 0, 0]) {\n                                sphere(3);\n                            }\n                        }\n                    }\n                }\n                \n                // Legs\n                translate([side * 6, 0, 0]) {\n                    rotate([0, side * 20, 0]) {\n                        color(color_body) {\n                            cylinder(h=10, r1=2, r2=1.5);\n                            translate([0, 0, -10]) {\n                                sphere(2.5);\n                            }\n                        }\n                    }\n                }\n            }\n            \n            // Tail\n            translate([0, -12, 5]) {\n                color(color_body) {\n                    rotate([45, 0, 0]) {\n                        cylinder(h=15, r1=3, r2=2);\n                        translate([0, 0, 15]) {\n                            sphere(4);\n                        }\n                    }\n                }\n            }\n            \n            // Spots on wings\n            for(side = [-1, 1]) {\n                translate([side * 12, -8, 26]) {\n                    rotate([0, 0, side * 20]) {\n                        color(color_detail) {\n                            for(pos = [[5, 5], [-5, 5], [0, -5]]) {\n                                translate(pos) {\n                                    sphere(2);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nbutterfree();",
    "renders": true
  },
  {
    "pokemon": "weedle",
    "openscad_code": "// Weedle - OpenSCAD realistic style model\n// Body segments with proper 3D-printable structure\n\n// Colors for realistic appearance\nbody_color = \"#A0522D\";     // Brown-orange body\nstripe_color = \"#FFD700\";   // Yellow stripes\neye_color = \"#000000\";      // Black eyes\nstinger_color = \"#8B0000\";  // Dark red stingers\n\n// Main module\nmodule weedle() {\n    // Body segments\n    union() {\n        // Head segment (largest)\n        translate([0, 0, 25]) {\n            color(body_color) {\n                sphere(d = 22, $fn = 32);\n            }\n        }\n        \n        // Thorax segment\n        translate([0, 0, 15]) {\n            color(body_color) {\n                sphere(d = 18, $fn = 32);\n            }\n        }\n        \n        // Abdomen segments\n        for(i = [0:3]) {\n            translate([0, 0, 8 - i*8]) {\n                color(body_color) {\n                    sphere(d = 16 - i*2, $fn = 32);\n                }\n            }\n        }\n        \n        // Connectors between segments\n        for(i = [0:3]) {\n            translate([0, 0, 20 - i*8]) {\n                color(body_color) {\n                    cylinder(h = 8, d = 10, $fn = 16);\n                }\n            }\n        }\n        \n        // Yellow stripes on each segment\n        for(i = [0:4]) {\n            translate([0, 0, 24 - i*8]) {\n                color(stripe_color) {\n                    rotate([90, 0, 0]) {\n                        cylinder(h = 2, d1 = 18 - i*2, d2 = 18 - i*2, $fn = 32);\n                    }\n                }\n            }\n        }\n        \n        // Head features\n        // Nose horn\n        translate([0, 0, 35]) {\n            color(stinger_color) {\n                rotate([0, 0, 0]) {\n                    cylinder(h = 12, d1 = 4, d2 = 0, $fn = 8);\n                }\n            }\n        }\n        \n        // Eyes\n        for(side = [-1, 1]) {\n            translate([side*6, 8, 27]) {\n                color(eye_color) {\n                    sphere(d = 4, $fn = 16);\n                }\n            }\n        }\n        \n        // Large needle on head\n        translate([0, -8, 30]) {\n            color(stinger_color) {\n                rotate([45, 0, 0]) {\n                    cylinder(h = 15, d1 = 6, d2 = 2, $fn = 8);\n                }\n            }\n        }\n        \n        // Tail stinger\n        translate([0, 0, -18]) {\n            color(stinger_color) {\n                rotate([180, 0, 0]) {\n                    cylinder(h = 10, d1 = 6, d2 = 0, $fn = 8);\n                }\n            }\n        }\n        \n        // Leg segments\n        for(side = [-1, 1]) {\n            // Front legs\n            translate([side*10, 0, 20]) {\n                rotate([0, side*30, 0]) {\n                    color(body_color) {\n                        cylinder(h = 8, d = 3, $fn = 8);\n                        translate([0, 0, -4]) {\n                            sphere(d = 4, $fn = 8);\n                        }\n                    }\n                }\n            }\n            \n            // Middle legs\n            translate([side*10, 0, 12]) {\n                rotate([0, side*45, 0]) {\n                    color(body_color) {\n                        cylinder(h = 7, d = 3, $fn = 8);\n                        translate([0, 0, -3.5]) {\n                            sphere(d = 4, $fn = 8);\n                        }\n                    }\n                }\n            }\n            \n            // Rear legs\n            translate([side*8, 0, 4]) {\n                rotate([0, side*60, 0]) {\n                    color(body_color) {\n                        cylinder(h = 6, d = 3, $fn = 8);\n                        translate([0, 0, -3]) {\n                            sphere(d = 4, $fn = 8);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Render the model\nweedle();",
    "renders": true
  },
  {
    "pokemon": "kakuna",
    "openscad_code": "// Kakuna Pokemon - Realistic Style - Medium Complexity\n// 3D printable model with appropriate wall thickness\n// Size: ~80mm height, ~40mm width\n\n// Color definitions\ncolor_body = [0.85, 0.75, 0.15];    // Yellowish tan\ncolor_shell = [0.55, 0.45, 0.25];   // Darker brown\ncolor_details = [0.3, 0.2, 0.1];    // Dark brown/black\n\n// Main parameters\nbody_height = 80;\nbody_width = 40;\nshell_thickness = 2;\n\nmodule kakuna_body() {\n    color(color_body)\n    difference() {\n        // Main body - elongated capsule shape\n        hull() {\n            translate([0, 0, body_height * 0.9])\n                sphere(d = body_width * 0.8);\n            translate([0, 0, body_height * 0.1])\n                sphere(d = body_width * 0.9);\n        }\n        \n        // Hollow out for 3D printing\n        translate([0, 0, body_height * 0.5])\n            scale([0.7, 0.7, 0.9])\n            hull() {\n                translate([0, 0, body_height * 0.4])\n                    sphere(d = body_width * 0.7);\n                translate([0, 0, body_height * 0.1])\n                    sphere(d = body_width * 0.8);\n            }\n    }\n}\n\nmodule shell_segments() {\n    color(color_shell)\n    union() {\n        // Top shell segments\n        for(i = [0:2]) {\n            translate([0, 0, body_height * 0.85 - i * 15])\n                difference() {\n                    // Shell layer\n                    cylinder(h = shell_thickness * 2, d1 = body_width * 0.85, d2 = body_width * 0.75);\n                    // Hollow center\n                    cylinder(h = shell_thickness * 2.1, d1 = body_width * 0.65, d2 = body_width * 0.55);\n                }\n        }\n        \n        // Middle band\n        translate([0, 0, body_height * 0.5])\n            difference() {\n                cylinder(h = shell_thickness * 3, d = body_width * 0.95);\n                cylinder(h = shell_thickness * 3.1, d = body_width * 0.75);\n            }\n        \n        // Bottom shell segments\n        for(i = [0:1]) {\n            translate([0, 0, body_height * 0.3 + i * 12])\n                difference() {\n                    cylinder(h = shell_thickness * 2, d1 = body_width * 0.8, d2 = body_width * 0.9);\n                    cylinder(h = shell_thickness * 2.1, d1 = body_width * 0.6, d2 = body_width * 0.7);\n                }\n        }\n    }\n}\n\nmodule eyes() {\n    color(color_details)\n    union() {\n        // Left eye\n        translate([-body_width * 0.2, body_width * 0.35, body_height * 0.7])\n            rotate([0, 10, 0])\n            difference() {\n                scale([1, 1.2, 0.5])\n                    sphere(d = 6);\n                // Eye slit\n                translate([0, 0, -1])\n                    cube([8, 2, 2], center = true);\n            }\n        \n        // Right eye\n        translate([body_width * 0.2, body_width * 0.35, body_height * 0.7])\n            rotate([0, -10, 0])\n            difference() {\n                scale([1, 1.2, 0.5])\n                    sphere(d = 6);\n                translate([0, 0, -1])\n                    cube([8, 2, 2], center = true);\n            }\n    }\n}\n\nmodule cocoon_texture() {\n    color(color_shell)\n    union() {\n        // Diagonal ridge pattern\n        for(angle = [0:30:150]) {\n            rotate([0, 0, angle])\n            translate([0, 0, body_height * 0.1])\n            for(z = [0:5:body_height * 0.8]) {\n                hull() {\n                    translate([body_width * 0.35, 0, z])\n                        sphere(d = 2);\n                    translate([body_width * 0.4, 0, z + 2])\n                        sphere(d = 2);\n                }\n            }\n        }\n    }\n}\n\nmodule attachment_point() {\n    color(color_details)\n    // Top loop for hanging\n    translate([0, 0, body_height * 0.95])\n        difference() {\n            rotate_extrude()\n                translate([body_width * 0.15, 0, 0])\n                    circle(r = 3);\n            // Hollow for string\n            rotate_extrude()\n                translate([body_width * 0.15, 0, 0])\n                    circle(r = 1.5);\n        }\n}\n\n// Main assembly\nunion() {\n    kakuna_body();\n    shell_segments();\n    eyes();\n    cocoon_texture();\n    attachment_point();\n}",
    "renders": true
  },
  {
    "pokemon": "beedrill",
    "openscad_code": "// Beedrill - Realistic Style, Medium Complexity\n\n// Colors\ncolor_body = [0.2, 0.2, 0.2];\ncolor_stripe = [0.8, 0.8, 0.1];\ncolor_wing = [0.7, 0.7, 0.7];\ncolor_eye = [1, 0, 0];\ncolor_stinger = [0.9, 0.9, 0.0];\n\n// Main module\nmodule beedrill() {\n    // Body\n    color(color_body) {\n        // Head\n        translate([0, 0, 40]) {\n            sphere(d=15);\n            \n            // Eyes\n            color(color_eye) {\n                translate([-5, 7, 5]) sphere(d=3);\n                translate([5, 7, 5]) sphere(d=3);\n            }\n            \n            // Mandibles\n            translate([-8, 5, -2]) rotate([0, 30, -20]) cylinder(h=8, d1=4, d2=2);\n            translate([8, 5, -2]) rotate([0, 30, 20]) cylinder(h=8, d1=4, d2=2);\n        }\n        \n        // Thorax\n        translate([0, 0, 25]) {\n            sphere(d=20);\n            \n            // Yellow stripes\n            color(color_stripe) {\n                for(i = [0:2]) {\n                    rotate([0, 0, i*120]) \n                    translate([10, 0, 0]) \n                    cube([20, 5, 8], center=true);\n                }\n            }\n        }\n        \n        // Abdomen\n        translate([0, 0, 10]) {\n            cylinder(h=15, d1=15, d2=10);\n            \n            // Tail stinger\n            color(color_stinger) {\n                translate([0, 0, -10]) \n                cylinder(h=12, d1=10, d2=2);\n            }\n        }\n    }\n    \n    // Wings\n    color(color_wing) {\n        // Left wings\n        translate([-15, 15, 35]) {\n            rotate([0, 0, -30]) \n            wing();\n        }\n        translate([-20, 10, 25]) {\n            rotate([0, 0, -45]) \n            scale([0.8, 0.8, 0.8]) \n            wing();\n        }\n        \n        // Right wings\n        translate([15, 15, 35]) {\n            rotate([0, 0, 30]) \n            mirror([1, 0, 0]) \n            wing();\n        }\n        translate([20, 10, 25]) {\n            rotate([0, 0, 45]) \n            scale([0.8, 0.8, 0.8]) \n            mirror([1, 0, 0]) \n            wing();\n        }\n    }\n    \n    // Arms with stingers\n    color(color_body) {\n        // Left arm\n        translate([-12, 0, 30]) {\n            rotate([0, 0, -45]) {\n                cylinder(h=20, d=6);\n                translate([0, 20, 0]) {\n                    rotate([0, 90, 0]) \n                    color(color_stinger) \n                    cylinder(h=15, d1=6, d2=1);\n                }\n            }\n        }\n        \n        // Right arm\n        translate([12, 0, 30]) {\n            rotate([0, 0, 45]) {\n                cylinder(h=20, d=6);\n                translate([0, 20, 0]) {\n                    rotate([0, 90, 0]) \n                    color(color_stinger) \n                    cylinder(h=15, d1=6, d2=1);\n                }\n            }\n        }\n    }\n    \n    // Legs\n    color(color_body) {\n        for(side = [-1, 1]) {\n            translate([side * 8, 0, 15]) {\n                rotate([0, 0, side * 30]) {\n                    cylinder(h=12, d1=5, d2=3);\n                    translate([0, 12, 0]) {\n                        rotate([0, 90, 0]) \n                        cylinder(h=8, d1=3, d2=4);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Wing module\nmodule wing() {\n    difference() {\n        union() {\n            // Main wing shape\n            translate([0, 0, 0]) \n            cube([25, 2, 15], center=true);\n            \n            // Wing tip\n            translate([12, 0, 3]) \n            sphere(d=8);\n        }\n        \n        // Wing membrane cutout\n        translate([5, 0, 0]) \n        cube([15, 3, 10], center=true);\n    }\n}\n\n// Render the model\nbeedrill();",
    "renders": true
  },
  {
    "pokemon": "pidgey",
    "openscad_code": "// Pidgey Pokemon - Realistic Medium Complexity\n// Size: ~70mm tall, 3D printable\n\n$fn = 32;\n\n// Main colors\ncolor_brown = [139/255, 69/255, 19/255];\ncolor_cream = [255/255, 248/255, 220/255];\ncolor_red = [255/255, 0/255, 0/255];\ncolor_yellow = [255/255, 255/255, 0/255];\ncolor_black = [0, 0, 0];\ncolor_orange = [255/255, 165/255, 0/255];\n\nmodule pidgey_body() {\n    color(color_brown) {\n        // Main spherical body\n        translate([0, 0, 25]) \n            sphere(r=20);\n        \n        // Chest fluff\n        color(color_cream)\n        translate([0, 12, 18])\n            scale([1, 0.8, 0.6])\n            sphere(r=15);\n    }\n}\n\nmodule pidgey_head() {\n    color(color_brown) {\n        // Head sphere\n        translate([0, -30, 45])\n            sphere(r=18);\n        \n        // Beak\n        color(color_yellow)\n        translate([0, -45, 42])\n            rotate([30, 0, 0])\n            scale([0.4, 3, 0.4])\n            cylinder(h=10, r1=4, r2=2);\n        \n        // Eyes\n        color(color_black)\n        for(x = [-8, 8]) {\n            translate([x, -38, 48])\n                sphere(r=2.5);\n        }\n        \n        // Eye whites\n        color(color_white)\n        for(x = [-8, 8]) {\n            translate([x, -38, 48.5])\n                sphere(r=1.5);\n        }\n        \n        // Head crest\n        color(color_red)\n        translate([0, -28, 60])\n            rotate([15, 0, 0])\n            cylinder(h=8, r1=3, r2=1);\n        \n        // Crest feathers\n        for(angle = [-30, 0, 30]) {\n            translate([0, -28, 60])\n                rotate([15, 0, angle])\n                scale([0.3, 1, 0.1])\n                cylinder(h=10, r=2);\n        }\n    }\n}\n\nmodule pidgey_wings() {\n    color(color_brown) {\n        // Left wing\n        translate([-25, -5, 35])\n            rotate([0, 0, -20])\n            scale([1.5, 0.3, 1])\n            sphere(r=15);\n        \n        // Right wing\n        translate([25, -5, 35])\n            rotate([0, 0, 20])\n            scale([1.5, 0.3, 1])\n            sphere(r=15);\n        \n        // Wing tips\n        color(color_cream)\n        translate([-35, -10, 35])\n            rotate([0, 0, -20])\n            sphere(r=5);\n        translate([35, -10, 35])\n            rotate([0, 0, 20])\n            sphere(r=5);\n    }\n}\n\nmodule pidgey_tail() {\n    color(color_brown) {\n        // Main tail feathers\n        for(angle = [-20, 0, 20]) {\n            translate([0, 25, 30])\n                rotate([15, angle, 0])\n                scale([0.8, 0.1, 2])\n                cylinder(h=25, r=5);\n        }\n    }\n}\n\nmodule pidgey_feet() {\n    color(color_yellow) {\n        // Left foot\n        translate([-10, 0, 5])\n            rotate([0, 0, -10])\n            scale([0.5, 2, 0.3])\n            cylinder(h=8, r=3);\n        \n        // Right foot\n        translate([10, 0, 5])\n            rotate([0, 0, 10])\n            scale([0.5, 2, 0.3])\n            cylinder(h=8, r=3);\n        \n        // Toes\n        for(side = [-10, 10]) {\n            for(toe = [-1, 0, 1]) {\n                translate([side + toe*2, 8, 3])\n                    rotate([0, 0, 90])\n                    scale([0.3, 1, 0.3])\n                    cylinder(h=5, r=1.5);\n            }\n        }\n    }\n}\n\nmodule pidgey_markings() {\n    color(color_cream) {\n        // Wing stripes\n        for(y = [20, 30]) {\n            translate([-20, -y, 35])\n                scale([0.1, 0.8, 0.1])\n                rotate([0, 10, 0])\n                cylinder(h=25, r=2);\n            translate([20, -y, 35])\n                scale([0.1, 0.8, 0.1])\n                rotate([0, -10, 0])\n                cylinder(h=25, r=2);\n        }\n        \n        // Belly marking\n        translate([0, 0, 15])\n            scale([1.2, 1.5, 0.2])\n            sphere(r=10);\n    }\n}\n\n// Assemble the Pokemon\nunion() {\n    pidgey_body();\n    pidgey_head();\n    pidgey_wings();\n    pidgey_tail();\n    pidgey_feet();\n    pidgey_markings();\n}",
    "renders": true
  },
  {
    "pokemon": "pidgeotto",
    "openscad_code": "// Pidgeotto OpenSCAD Model - Medium Complexity Realistic Style\n// Overall dimensions: ~80mm wingspan\n\ncolor(\"orange\")\nunion() {\n    // Main body\n    translate([0, 0, 10])\n    scale([1.2, 0.8, 1])\n    sphere(d=25, $fn=32);\n    \n    // Head\n    translate([12, 0, 25])\n    scale([1.1, 1, 1.1])\n    sphere(d=18, $fn=32);\n    \n    // Beak\n    translate([23, 0, 25])\n    rotate([0, 90, 0])\n    cylinder(h=12, r1=3, r2=0, $fn=16);\n    \n    // Crest feathers\n    module crest() {\n        color(\"red\")\n        for(i=[-2:2]) {\n            translate([12, 5*i, 35])\n            rotate([90, 0, 0])\n            cylinder(h=6+i, r1=2, r2=0.5, $fn=8);\n        }\n    }\n    crest();\n    \n    // Eyes\n    color(\"white\")\n    translate([16, -5, 27])\n    sphere(d=4, $fn=16);\n    translate([16, 5, 27])\n    sphere(d=4, $fn=16);\n    \n    color(\"black\")\n    translate([18, -5, 27])\n    sphere(d=2, $fn=16);\n    translate([18, 5, 27])\n    sphere(d=2, $fn=16);\n    \n    // Wings\n    module wing() {\n        color(\"orange\")\n        difference() {\n            translate([0, 0, 15])\n            rotate([0, 90, 0])\n            scale([0.3, 1, 1])\n            cylinder(h=30, r1=15, r2=5, $fn=32);\n            \n            // Wing feathers\n            color(\"yellow\")\n            translate([0, 8, 15])\n            rotate([0, 90, 0])\n            scale([0.25, 0.8, 1])\n            cylinder(h=28, r1=13, r2=4, $fn=32);\n        }\n        \n        // Wing tips\n        color(\"red\")\n        for(i=[0:2]) {\n            translate([0, 12+i*4, 15-i*3])\n            rotate([0, 90, 0])\n            scale([0.2, 0.4, 1])\n            cylinder(h=8, r1=3, r2=1, $fn=8);\n        }\n    }\n    \n    translate([0, 20, 15])\n    rotate([0, 0, 20])\n    wing();\n    \n    translate([0, -20, 15])\n    rotate([0, 0, -20])\n    mirror([0, 1, 0])\n    wing();\n    \n    // Tail feathers\n    color(\"red\")\n    for(i=[-2:2]) {\n        translate([-12, 5*i, 15])\n        rotate([0, 10, 0])\n        cylinder(h=15, r1=3, r2=1, $fn=8);\n    }\n    \n    // Legs\n    color(\"orange\")\n    module leg() {\n        translate([5, 8, 0])\n        cylinder(h=8, r=2, $fn=16);\n        translate([5, 8, 0])\n        sphere(d=4, $fn=16);\n        \n        // Feet\n        translate([5, 8, 0])\n        rotate([90, 0, 0])\n        cylinder(h=3, r=2, $fn=16);\n        \n        for(j=[-1:1]) {\n            translate([5, 8+j*3, -3])\n            rotate([90, 0, 0])\n            cylinder(h=2, r=1, $fn=8);\n        }\n    }\n    \n    leg();\n    translate([0, -16, 0])\n    leg();\n}",
    "renders": true
  },
  {
    "pokemon": "pidgeot",
    "openscad_code": "// Pidgeot - Realistic Style (Medium Complexity)\n// Total height: 80mm, wingspan: 90mm\n\n// Main colors\ncolor_yellow = [1, 0.8, 0.1];\ncolor_red = [0.9, 0.2, 0.1];\ncolor_blue = [0.2, 0.5, 0.9];\ncolor_orange = [1, 0.5, 0.1];\ncolor_white = [1, 1, 1];\ncolor_black = [0.1, 0.1, 0.1];\n\n// Parameters\nwing_thickness = 2;\nbody_wall = 2;\n\nmodule head() {\n    // Main head shape\n    color(color_yellow) \n    translate([0, 0, 65])\n    rotate([0, 0, 0])\n    sphere(d=18, $fn=32);\n    \n    // Beak\n    color(color_red)\n    translate([9, 0, 68])\n    rotate([0, 0, 0])\n    cylinder(h=12, d1=8, d2=3, $fn=16);\n    \n    // Beak tip\n    color(color_black)\n    translate([18, 0, 68])\n    sphere(d=3, $fn=16);\n    \n    // Crest\n    color(color_yellow)\n    for(i = [0:30:150]) {\n        rotate([0, 0, i])\n        translate([0, 0, 75])\n        cylinder(h=8, d1=2, d2=0.5, $fn=8);\n    }\n    \n    // Eyes\n    color(color_white)\n    translate([-5, 6, 68])\n    sphere(d=4, $fn=16);\n    \n    color(color_black)\n    translate([-5.5, 7.5, 68])\n    sphere(d=2, $fn=16);\n    \n    // Other eye\n    color(color_white)\n    translate([-5, -6, 68])\n    sphere(d=4, $fn=16);\n    \n    color(color_black)\n    translate([-5.5, -7.5, 68])\n    sphere(d=2, $fn=16);\n}\n\nmodule body() {\n    // Main body\n    color(color_yellow)\n    translate([0, 0, 35])\n    scale([1.2, 1, 1.5])\n    sphere(d=25, $fn=32);\n    \n    // Chest feathers\n    color(color_white)\n    translate([0, 0, 30])\n    scale([0.8, 0.6, 1.2])\n    sphere(d=20, $fn=32);\n}\n\nmodule wings() {\n    module wing() {\n        // Main wing structure\n        color(color_yellow)\n        translate([0, 0, 0])\n        difference() {\n            scale([1, 2.5, 0.2])\n            sphere(d=30, $fn=32);\n            \n            // Wing tip cut\n            translate([5, 12, 0])\n            rotate([0, 0, 45])\n            cube([20, 20, 5], center=true);\n        }\n        \n        // Wing feathers\n        for(i = [1:3]) {\n            color(color_yellow)\n            translate([i*3, 25 + i*5, 0])\n            rotate([0, 0, -15 - i*5])\n            scale([0.8 - i*0.1, 1.5 - i*0.2, 0.1])\n            sphere(d=15, $fn=16);\n        }\n        \n        // Red wing tips\n        color(color_red)\n        translate([-5, 28, 0])\n        rotate([0, 0, -30])\n        scale([0.3, 0.8, 0.1])\n        sphere(d=15, $fn=16);\n    }\n    \n    // Left wing\n    translate([5, 0, 45])\n    rotate([0, 0, -20])\n    wing();\n    \n    // Right wing\n    translate([5, 0, 45])\n    mirror([0, 1, 0])\n    rotate([0, 0, -20])\n    wing();\n}\n\nmodule tail() {\n    // Main tail feathers\n    for(i = [-1, 0, 1]) {\n        color(i == 0 ? color_red : color_yellow)\n        translate([-15, i*5, 40])\n        rotate([0, 0, i*10])\n        scale([1.5, 0.3, 3])\n        cylinder(h=20, d=8, $fn=16);\n        \n        // Tail feather tips\n        color(color_red)\n        translate([-15, i*5, 25])\n        rotate([0, 0, i*10])\n        sphere(d=4, $fn=16);\n    }\n}\n\nmodule legs() {\n    module leg() {\n        // Leg\n        color(color_orange)\n        translate([0, 0, 0])\n        cylinder(h=15, d=4, $fn=16);\n        \n        // Foot\n        translate([0, 0, -8])\n        scale([1.5, 1, 0.5])\n        sphere(d=8, $fn=16);\n        \n        // Toes\n        for(angle = [0:120:240]) {\n            translate([0, 0, -13])\n            rotate([0, 0, angle])\n            translate([6, 0, 0])\n            cylinder(h=3, d1=3, d2=2, $fn=8);\n        }\n    }\n    \n    // Left leg\n    translate([5, 5, 20])\n    rotate([10, 0, 0])\n    leg();\n    \n    // Right leg\n    translate([5, -5, 20])\n    rotate([10, 0, 0])\n    leg();\n}\n\n// Assembly\nunion() {\n    head();\n    body();\n    wings();\n    tail();\n    legs();\n}",
    "renders": true
  },
  {
    "pokemon": "rattata",
    "openscad_code": "// Rattata Pokémon - Realistic Style, Medium Complexity\n// Size: 60mm length, 30mm height, 25mm width\n\nmodule rat_body() {\n    color(\"purple\")\n    union() {\n        // Main body\n        scale([1, 0.8, 0.6])\n        sphere(d=25);\n        \n        // Belly\n        color(\"beige\")\n        translate([0, -9.8, 0])\n        scale([0.7, 0.4, 0.5])\n        sphere(d=20);\n    }\n}\n\nmodule rat_head() {\n    color(\"purple\")\n    union() {\n        // Main head\n        translate([-12, 0, 5])\n        scale([1.2, 0.9, 0.9])\n        sphere(d=18);\n        \n        // Snout\n        color(\"beige\")\n        translate([-22, 0, 3])\n        scale([0.8, 0.7, 0.6])\n        sphere(d=10);\n        \n        // Nose\n        color(\"black\")\n        translate([-27, 0, 3])\n        sphere(d=3);\n    }\n}\n\nmodule rat_ear() {\n    color(\"purple\")\n    union() {\n        // Outer ear\n        scale([0.4, 2, 0.2])\n        sphere(d=10);\n        \n        // Inner ear\n        color(\"pink\")\n        translate([0, -1, 0.5])\n        scale([0.3, 1.5, 0.1])\n        sphere(d=8);\n    }\n}\n\nmodule rat_ears() {\n    // Left ear\n    translate([-15, 8, 12])\n    rotate([0, 15, -20])\n    rat_ear();\n    \n    // Right ear\n    translate([-15, -8, 12])\n    rotate([0, 15, 20])\n    rat_ear();\n}\n\nmodule rat_eye() {\n    color(\"black\")\n    union() {\n        // Eye\n        sphere(d=4);\n        \n        // White highlight\n        color(\"white\")\n        translate([1, 1, 1])\n        sphere(d=1);\n    }\n}\n\nmodule rat_eyes() {\n    // Left eye\n    translate([-20, 6, 8])\n    rat_eye();\n    \n    // Right eye\n    translate([-20, -6, 8])\n    rat_eye();\n}\n\nmodule rat_whiskers() {\n    color(\"black\")\n    for(i=[-1:1]) {\n        // Left whiskers\n        translate([-25, 9 + i*2, 3])\n        rotate([0, -20 + i*10, 90])\n        cylinder(h=8, d=0.5);\n        \n        // Right whiskers\n        translate([-25, -9 - i*2, 3])\n        rotate([0, -20 + i*10, 90])\n        cylinder(h=8, d=0.5);\n    }\n}\n\nmodule rat_teeth() {\n    color(\"white\")\n    // Two front teeth\n    translate([-25, -1.5, 0])\n    cube([2, 1, 2]);\n    translate([-25, 0.5, 0])\n    cube([2, 1, 2]);\n}\n\nmodule rat_tail() {\n    color(\"purple\")\n    union() {\n        // Tail segments\n        for(i=[0:4]) {\n            translate([12 + i*6, 0, 2 - i])\n            rotate([0, 0, -15*i])\n            scale([1 - i*0.1, 1 - i*0.1, 1 - i*0.1])\n            sphere(d=8);\n        }\n        \n        // Curl at end\n        translate([35, -8, -3])\n        rotate([0, 0, -75])\n        scale([0.7, 0.7, 0.7])\n        sphere(d=8);\n    }\n}\n\nmodule rat_legs() {\n    color(\"purple\")\n    union() {\n        // Front legs\n        translate([-5, 8, -8])\n        rotate([0, 10, 0])\n        cylinder(h=10, d=4);\n        \n        translate([-5, -8, -8])\n        rotate([0, 10, 0])\n        cylinder(h=10, d=4);\n        \n        // Hind legs\n        translate([8, 6, -8])\n        scale([1.2, 1, 1])\n        rotate([0, -10, 15])\n        cylinder(h=12, d=5);\n        \n        translate([8, -6, -8])\n        scale([1.2, 1, 1])\n        rotate([0, -10, -15])\n        cylinder(h=12, d=5);\n    }\n}\n\nmodule rat_feet() {\n    color(\"beige\")\n    union() {\n        // Front paws\n        translate([-5, 8, -14])\n        scale([1.5, 0.8, 0.5])\n        sphere(d=6);\n        \n        translate([-5, -8, -14])\n        scale([1.5, 0.8, 0.5])\n        sphere(d=6);\n        \n        // Hind paws\n        translate([8, 6, -14])\n        scale([2, 1, 0.6])\n        sphere(d=8);\n        \n        translate([8, -6, -14])\n        scale([2, 1, 0.6])\n        sphere(d=8);\n    }\n}\n\n// Assemble the Rattata\nunion() {\n    rat_body();\n    rat_head();\n    rat_ears();\n    rat_eyes();\n    rat_whiskers();\n    rat_teeth();\n    rat_tail();\n    rat_legs();\n    rat_feet();\n}",
    "renders": true
  },
  {
    "pokemon": "raticate",
    "openscad_code": "// Realistic Raticate OpenSCAD Model\n// Medium complexity with 3D-printable design\n\n// Colors\ncolor_body = \"#8B7355\";\ncolor_belly = \"#F5DEB3\";\ncolor_teeth = \"#FFFACD\";\ncolor_eyes = \"#8B0000\";\ncolor_ears = \"#A0522D\";\ncolor_feet = \"#8B7355\";\ncolor_tail = \"#8B7355\";\n\n// Scale factor for 50mm height\nscale_factor = 0.7;\n\n// Main body\nmodule body() {\n    color(color_body) {\n        // Main torso\n        translate([0, 0, 10])\n            scale([1.2, 1, 0.8])\n            sphere(15);\n        \n        // Belly\n        color(color_belly)\n            translate([0, 0, 8])\n                scale([1.1, 0.9, 0.3])\n                sphere(12);\n    }\n}\n\n// Head\nmodule head() {\n    color(color_body) {\n        // Main head shape\n        translate([0, 25, 20])\n            scale([1.3, 1.2, 1.1])\n            sphere(12);\n        \n        // Snout\n        translate([0, 35, 18])\n            scale([0.8, 0.6, 0.5])\n            sphere(8);\n    }\n}\n\n// Ears\nmodule ears() {\n    color(color_ears) {\n        // Left ear\n        translate([-8, 20, 28])\n            rotate([0, -20, -30])\n            scale([0.3, 0.8, 2])\n            cylinder(r1=3, r2=1, h=12);\n        \n        // Right ear\n        translate([8, 20, 28])\n            rotate([0, -20, 30])\n            scale([0.3, 0.8, 2])\n            cylinder(r1=3, r2=1, h=12);\n    }\n}\n\n// Eyes\nmodule eyes() {\n    color(color_eyes) {\n        // Left eye\n        translate([-5, 30, 22])\n            scale([1, 1.5, 0.5])\n            sphere(2.5);\n        \n        // Right eye\n        translate([5, 30, 22])\n            scale([1, 1.5, 0.5])\n            sphere(2.5);\n    }\n    \n    // Eye highlights\n    color(\"white\")\n    for(i = [-1, 1]) {\n        translate([i*4.5, 30.5, 23.5])\n            sphere(0.8);\n    }\n}\n\n// Whiskers\nmodule whiskers() {\n    color(\"black\") {\n        // Whiskers on left\n        for(angle = [0:60:120])\n            translate([-10, 32, 20])\n                rotate([0, 0, angle])\n                cylinder(r1=0.5, r2=0.2, h=8);\n        \n        // Whiskers on right\n        for(angle = [60:60:180])\n            translate([10, 32, 20])\n                rotate([0, 0, angle])\n                cylinder(r1=0.5, r2=0.2, h=8);\n    }\n}\n\n// Teeth\nmodule teeth() {\n    color(color_teeth) {\n        // Top teeth\n        for(x = [-3, 0, 3])\n            translate([x, 40, 18])\n                scale([0.3, 0.3, 1])\n                cylinder(r1=1, r2=0.5, h=3);\n        \n        // Bottom teeth\n        for(x = [-2, 2])\n            translate([x, 40, 15])\n                scale([0.3, 0.3, 1])\n                cylinder(r1=0.5, r2=1, h=3);\n    }\n}\n\n// Feet\nmodule feet() {\n    color(color_feet) {\n        // Front left foot\n        translate([-8, 15, 0])\n            scale([0.8, 1, 0.5])\n            sphere(5);\n        \n        // Front right foot\n        translate([8, 15, 0])\n            scale([0.8, 1, 0.5])\n            sphere(5);\n        \n        // Back left foot\n        translate([-10, -5, 0])\n            scale([0.9, 1.1, 0.6])\n            sphere(5.5);\n        \n        // Back right foot\n        translate([10, -5, 0])\n            scale([0.9, 1.1, 0.6])\n            sphere(5.5);\n    }\n}\n\n// Tail\nmodule tail() {\n    color(color_tail) {\n        // Base of tail\n        translate([0, -20, 8])\n            rotate([0, 30, 0])\n            scale([0.8, 0.8, 3])\n            cylinder(r1=6, r2=4, h=20);\n        \n        // Tail curl\n        translate([0, -35, 12])\n            rotate([0, 60, 0])\n            scale([0.7, 0.7, 2])\n            sphere(5);\n    }\n}\n\n// Assembly\nscale(scale_factor)\nunion() {\n    body();\n    head();\n    ears();\n    eyes();\n    whiskers();\n    teeth();\n    feet();\n    tail();\n}",
    "renders": true
  },
  {
    "pokemon": "spearow",
    "openscad_code": "// Spearow Pokemon - Realistic Style (Medium Complexity)\n// Model size: ~80mm height\n\n// Colors\ncolor_body = [0.8, 0.2, 0.1];       // Red-brown\ncolor_wing = [0.6, 0.4, 0.3];       // Dark brown\ncolor_beak = [0.9, 0.7, 0.2];       // Yellow\ncolor_eye = [0.1, 0.1, 0.9];        // Blue\ncolor_white = [1, 1, 1];\ncolor_black = [0, 0, 0];\n\n// Parameters\nscale_factor = 0.8;\nbase_height = 80 * scale_factor;\nbody_radius = 15 * scale_factor;\nhead_radius = 12 * scale_factor;\nbeak_length = 18 * scale_factor;\nwing_span = 40 * scale_factor;\n\n// Module for rounded cube (body shaping)\nmodule rounded_cube(size, radius) {\n    hull() {\n        for(dx = [0, size.x - radius*2])\n        for(dy = [0, size.y - radius*2])\n        for(dz = [0, size.z - radius*2])\n            translate([dx + radius, dy + radius, dz + radius])\n                sphere(r = radius);\n    }\n}\n\n// Main body\nmodule body() {\n    color(color_body)\n    union() {\n        // Main body sphere\n        sphere(r = body_radius);\n        \n        // Chest protrusion\n        translate([0, -body_radius*0.7, -body_radius*0.3])\n            scale([1.2, 0.8, 0.9])\n                sphere(r = body_radius * 0.7);\n    }\n}\n\n// Head and beak\nmodule head_and_beak() {\n    color(color_body)\n    union() {\n        // Head\n        translate([0, body_radius + head_radius*0.8, body_radius*0.5])\n            sphere(r = head_radius);\n        \n        // Beak\n        color(color_beak)\n        translate([0, body_radius + head_radius*0.8 + beak_length*0.6, body_radius*0.5])\n            rotate([0, 90, 0])\n                cylinder(h = beak_length, r1 = head_radius*0.3, r2 = head_radius*0.1);\n    }\n}\n\n// Crest feathers\nmodule crest() {\n    color(color_body)\n    for(i = [0:2]) {\n        rotate([0, 0, (i-1)*25])\n            translate([0, body_radius + head_radius*0.8 + 2, body_radius*0.5 + head_radius*0.8])\n                cylinder(h = 8 * scale_factor, r1 = 2 * scale_factor, r2 = 1 * scale_factor);\n    }\n}\n\n// Eyes\nmodule eyes() {\n    // Left eye\n    translate([head_radius*0.5, body_radius + head_radius*0.7, body_radius*0.5 + head_radius*0.3])\n        color(color_white)\n        sphere(r = head_radius * 0.25);\n    \n    translate([head_radius*0.5, body_radius + head_radius*0.7 + 0.5, body_radius*0.5 + head_radius*0.3])\n        color(color_eye)\n        sphere(r = head_radius * 0.15);\n    \n    translate([head_radius*0.5 + 1, body_radius + head_radius*0.7 + 1, body_radius*0.5 + head_radius*0.3 + 1])\n        color(color_black)\n        sphere(r = head_radius * 0.08);\n    \n    // Right eye (mirror of left)\n    mirror([1, 0, 0]) {\n        translate([head_radius*0.5, body_radius + head_radius*0.7, body_radius*0.5 + head_radius*0.3])\n            color(color_white)\n            sphere(r = head_radius * 0.25);\n        \n        translate([head_radius*0.5, body_radius + head_radius*0.7 + 0.5, body_radius*0.5 + head_radius*0.3])\n            color(color_eye)\n            sphere(r = head_radius * 0.15);\n        \n        translate([head_radius*0.5 + 1, body_radius + head_radius*0.7 + 1, body_radius*0.5 + head_radius*0.3 + 1])\n            color(color_black)\n            sphere(r = head_radius * 0.08);\n    }\n}\n\n// Wings\nmodule wings() {\n    // Left wing\n    color(color_wing)\n    translate([-body_radius*0.8, 0, body_radius*0.3])\n        rotate([0, 30, 20])\n            scale([1, 2.5, 0.3])\n                sphere(r = wing_span * 0.3);\n    \n    // Wing tip\n    translate([-body_radius*0.8 - wing_span*0.6, -body_radius*0.2, body_radius*0.3 + wing_span*0.15])\n        rotate([0, 30, 45])\n            scale([0.5, 1.5, 0.2])\n                sphere(r = wing_span * 0.25);\n    \n    // Right wing (mirror)\n    mirror([1, 0, 0])\n    union() {\n        color(color_wing)\n        translate([-body_radius*0.8, 0, body_radius*0.3])\n            rotate([0, 30, 20])\n                scale([1, 2.5, 0.3])\n                    sphere(r = wing_span * 0.3);\n        \n        translate([-body_radius*0.8 - wing_span*0.6, -body_radius*0.2, body_radius*0.3 + wing_span*0.15])\n            rotate([0, 30, 45])\n                scale([0.5, 1.5, 0.2])\n                    sphere(r = wing_span * 0.25);\n    }\n}\n\n// Tail feathers\nmodule tail() {\n    color(color_wing)\n    for(i = [0:2]) {\n        rotate([0, 0, (i-1)*15 - 90])\n            translate([0, body_radius + 5, -body_radius*0.7])\n                scale([0.8, 2.5, 0.2])\n                    sphere(r = body_radius * 0.6);\n    }\n}\n\n// Legs and feet\nmodule legs() {\n    // Left leg\n    color(color_beak)\n    translate([-body_radius*0.3, 0, -body_radius*0.9])\n        cylinder(h = body_radius * 0.7, r = body_radius * 0.15);\n    \n    // Left foot\n    translate([-body_radius*0.3, -body_radius*0.3, -body_radius*1.6])\n        rotate([0, 0, -30])\n            scale([2, 0.5, 0.3])\n                cube([body_radius*0.4, body_radius*0.2, body_radius*0.1]);\n    \n    // Right leg\n    translate([body_radius*0.3, 0, -body_radius*0.9])\n        cylinder(h = body_radius * 0.7, r = body_radius * 0.15);\n    \n    // Right foot\n    translate([body_radius*0.3, -body_radius*0.3, -body_radius*1.6])\n        rotate([0, 0, 30])\n            scale([2, 0.5, 0.3])\n                cube([body_radius*0.4, body_radius*0.2, body_radius*0.1]);\n}\n\n// Assembly\nunion() {\n    body();\n    head_and_beak();\n    crest();\n    eyes();\n    wings();\n    tail();\n    legs();\n}",
    "renders": true
  },
  {
    "pokemon": "fearow",
    "openscad_code": "// Fearow - Realistic style, 3D printable\n$fn = 32;\n\n// Main colors\ncolor_brown = [0.4, 0.25, 0.15];\ncolor_beak = [0.9, 0.7, 0.3];\ncolor_red = [0.8, 0.2, 0.2];\ncolor_white = [0.95, 0.95, 0.9];\ncolor_black = [0.1, 0.1, 0.1];\n\n// Scale factor for 3D printing (target ~80mm height)\nscale_factor = 0.3;\n\nmodule fearow() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        union() {\n            // Main body\n            translate([0, 0, 20]) {\n                color(color_brown)\n                scale([1.2, 0.8, 1.4])\n                sphere(r = 15);\n            }\n            \n            // Long neck\n            translate([0, -5, 35]) {\n                color(color_brown)\n                rotate([30, 0, 0])\n                cylinder(h = 25, r1 = 6, r2 = 4);\n            }\n            \n            // Head\n            translate([0, -15, 55]) {\n                color(color_brown)\n                scale([0.8, 2.2, 1])\n                sphere(r = 8);\n            }\n            \n            // Long beak\n            translate([0, -35, 55]) {\n                color(color_beak)\n                rotate([30, 0, 0])\n                scale([0.3, 1, 0.3])\n                cylinder(h = 25, r1 = 5, r2 = 1);\n            }\n            \n            // Beak tip\n            translate([0, -45, 60]) {\n                color(color_beak)\n                rotate([30, 0, 0])\n                scale([0.3, 0.5, 0.3])\n                cylinder(h = 8, r1 = 1, r2 = 0.5);\n            }\n            \n            // Red crest\n            translate([0, -15, 67]) {\n                color(color_red)\n                rotate([0, 0, 0])\n                scale([0.2, 2, 0.1])\n                cylinder(h = 15, r1 = 5, r2 = 0.5);\n            }\n            \n            // Eyes\n            translate([4, -15, 58]) {\n                color(color_black)\n                sphere(r = 2);\n            }\n            translate([-4, -15, 58]) {\n                color(color_black)\n                sphere(r = 2);\n            }\n            \n            // Eye highlights\n            translate([4.5, -15.5, 59]) {\n                color(color_white)\n                sphere(r = 0.7);\n            }\n            translate([-3.5, -15.5, 59]) {\n                color(color_white)\n                sphere(r = 0.7);\n            }\n            \n            // Wings\n            module wing(side) {\n                translate([side * 20, 0, 30]) {\n                    rotate([0, 0, side * 20]) {\n                        color(color_brown)\n                        difference() {\n                            union() {\n                                // Main wing\n                                translate([side * 5, 0, 0]) {\n                                    scale([1.8, 0.3, 0.8])\n                                    rotate([0, 45, 0])\n                                    cube([20, 25, 3], center = true);\n                                }\n                                \n                                // Wing tip\n                                translate([side * 25, -5, 5]) {\n                                    rotate([0, 0, -30])\n                                    scale([1.2, 0.3, 0.6])\n                                    cube([15, 20, 2], center = true);\n                                }\n                            }\n                            \n                            // Wing feathers cutout\n                            for(i = [0:3]) {\n                                translate([side * (5 + i * 8), -8, 0]) {\n                                    rotate([0, 0, side * 45])\n                                    scale([0.5, 0.2, 0.5])\n                                    cube([10, 15, 4], center = true);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            \n            wing(1);\n            wing(-1);\n            \n            // Tail feathers\n            translate([0, 15, 25]) {\n                color(color_red)\n                rotate([-20, 0, 0]) {\n                    for(i = [-1:1]) {\n                        translate([i * 6, 0, i * 2]) {\n                            rotate([0, 0, i * 10])\n                            scale([0.2, 2, 0.1])\n                            cylinder(h = 20, r1 = 3, r2 = 1);\n                        }\n                    }\n                }\n            }\n            \n            // Legs\n            module leg(side) {\n                translate([side * 8, 0, 15]) {\n                    color(color_brown)\n                    rotate([30, 0, side * 10])\n                    cylinder(h = 18, r1 = 3, r2 = 2);\n                    \n                    // Feet\n                    translate([0, 8, -12]) {\n                        color(color_beak)\n                        rotate([90, 0, 0])\n                        scale([1, 0.5, 1])\n                        cylinder(h = 8, r1 = 4, r2 = 3);\n                        \n                        // Toes\n                        for(j = [-1, 0, 1]) {\n                            translate([j * 3, 4, 0]) {\n                                rotate([0, 0, j * 20])\n                                scale([0.3, 0.3, 1])\n                                cylinder(h = 5, r1 = 2, r2 = 1);\n                            }\n                        }\n                    }\n                }\n            }\n            \n            leg(1);\n            leg(-1);\n        }\n    }\n}\n\n// Render the model\nfearow();",
    "renders": true
  },
  {
    "pokemon": "ekans",
    "openscad_code": "// Ekans Pokemon - Realistic Style\n// Medium complexity 3D printable model\n\n$fn = 32;\nmodule ekans() {\n    // Main body segments\n    color(\"purple\") {\n        // Head\n        translate([0, 0, 5])\n        rotate([0, 0, 45])\n        scale([1.2, 1, 1])\n        sphere(8);\n        \n        // Neck segment\n        translate([0, 0, 0])\n        cylinder(h=10, r1=6, r2=5, center=true);\n        \n        // Body segments (curved)\n        for(i = [0:5]) {\n            rotate([0, 0, -i * 20])\n            translate([0, -i * 8, -i * 2])\n            scale([1 - i * 0.08, 1 - i * 0.08, 0.8])\n            cylinder(h=10, r1=5 - i * 0.5, r2=4.5 - i * 0.5, center=true);\n        }\n        \n        // Tail tip\n        rotate([0, 0, -120])\n        translate([0, -48, -12])\n        scale([0.3, 0.3, 1.5])\n        sphere(5);\n    }\n    \n    // Rattle segments\n    color(\"yellow\") {\n        rotate([0, 0, -120])\n        translate([0, -52, -12])\n        scale([0.4, 0.4, 0.8])\n        cylinder(h=8, r=3, center=true);\n    }\n    \n    // Hood pattern\n    color(\"yellow\") {\n        translate([6, 0, 5])\n        rotate([0, 0, 45])\n        scale([1.3, 0.2, 0.2])\n        sphere(8);\n        \n        translate([-6, 0, 5])\n        rotate([0, 0, 45])\n        scale([1.3, 0.2, 0.2])\n        sphere(8);\n        \n        translate([0, 6, 5])\n        rotate([0, 0, 45])\n        scale([0.2, 1.3, 0.2])\n        sphere(8);\n        \n        translate([0, -6, 5])\n        rotate([0, 0, 45])\n        scale([0.2, 1.3, 0.2])\n        sphere(8);\n    }\n    \n    // Eye\n    color(\"yellow\") {\n        translate([5, 3, 7])\n        rotate([0, 0, 45])\n        sphere(2);\n    }\n    \n    color(\"black\") {\n        translate([6, 3, 7.5])\n        rotate([0, 0, 45])\n        sphere(1);\n    }\n    \n    // Second eye\n    color(\"yellow\") {\n        translate([5, -3, 7])\n        rotate([0, 0, 45])\n        sphere(2);\n    }\n    \n    color(\"black\") {\n        translate([6, -3, 7.5])\n        rotate([0, 0, 45])\n        sphere(1);\n    }\n    \n    // Mouth\n    color(\"red\") {\n        translate([8, 0, 3])\n        rotate([0, 90, 45])\n        scale([0.8, 0.3, 0.3])\n        cylinder(h=6, r=2);\n    }\n    \n    // Body pattern stripes\n    color(\"yellow\") {\n        for(i = [1:3]) {\n            rotate([0, 0, -i * 25])\n            translate([0, -i * 8 - 5, -i * 2])\n            scale([1 - i * 0.08, 0.15, 0.15])\n            cylinder(h=12, r=5 - i * 0.5, center=true);\n        }\n    }\n    \n    // Fangs\n    color(\"white\") {\n        translate([7, 1, 4])\n        rotate([0, -30, 45])\n        cylinder(h=3, r1=0.5, r2=0, center=false);\n        \n        translate([7, -1, 4])\n        rotate([0, 30, 45])\n        cylinder(h=3, r1=0.5, r2=0, center=false);\n    }\n    \n    // Tongue\n    color(\"pink\") {\n        translate([9, 0, 2])\n        rotate([0, 90, 45])\n        scale([0.3, 0.3, 0.8])\n        cylinder(h=4, r=1, center=false);\n    }\n}\n\n// Create the model\nekans();",
    "renders": true
  },
  {
    "pokemon": "arbok",
    "openscad_code": "// Arbok Pokemon - OpenSCAD Model\n// Realistic style, medium complexity\n\n// Scale factor for overall size\nscale_factor = 0.5;\n\n// Main body module\nmodule arbok_body() {\n    color(\"purple\")\n    union() {\n        // Head section\n        translate([0, 0, 0]) {\n            sphere(d = 15 * scale_factor, $fn = 32);\n        }\n        \n        // Neck segment 1\n        translate([0, -10 * scale_factor, -5 * scale_factor]) {\n            scale([1, 1.2, 0.8])\n            sphere(d = 12 * scale_factor, $fn = 32);\n        }\n        \n        // Neck segment 2\n        translate([0, -20 * scale_factor, -8 * scale_factor]) {\n            scale([0.9, 1.3, 0.7])\n            sphere(d = 11 * scale_factor, $fn = 32);\n        }\n        \n        // Body segments\n        for(i = [1:10]) {\n            translate([0, -(30 + i * 8) * scale_factor, -(8 + i * 2) * scale_factor]) {\n                scale([1 - i * 0.05, 1.4 - i * 0.1, 0.6 - i * 0.03])\n                sphere(d = (12 - i * 0.8) * scale_factor, $fn = 32);\n            }\n        }\n        \n        // Tail end\n        translate([0, -110 * scale_factor, -25 * scale_factor]) {\n            scale([0.3, 2, 0.3])\n            sphere(d = 8 * scale_factor, $fn = 32);\n        }\n    }\n}\n\n// Hood pattern\nmodule hood_pattern() {\n    color(\"yellow\")\n    union() {\n        // Left eye spot\n        translate([5 * scale_factor, -2 * scale_factor, 5 * scale_factor]) {\n            scale([1.5, 1, 1])\n            sphere(d = 3 * scale_factor, $fn = 16);\n        }\n        \n        // Right eye spot\n        translate([-5 * scale_factor, -2 * scale_factor, 5 * scale_factor]) {\n            scale([1.5, 1, 1])\n            sphere(d = 3 * scale_factor, $fn = 16);\n        }\n        \n        // Mouth line\n        translate([0, -7 * scale_factor, 2 * scale_factor]) {\n            rotate([90, 0, 0])\n            cylinder(h = 10 * scale_factor, r = 0.5 * scale_factor, $fn = 8);\n        }\n        \n        // Hood markings\n        for(i = [1:3]) {\n            translate([0, -5 * scale_factor, 7 * scale_factor]) {\n                rotate([0, 15 * i, 0])\n                translate([0, 0, -2 * i * scale_factor])\n                scale([1 + i * 0.2, 1, 0.5])\n                sphere(d = (4 - i * 0.5) * scale_factor, $fn = 16);\n            }\n        }\n    }\n}\n\n// Face features\nmodule face() {\n    union() {\n        // Eyes\n        color(\"red\")\n        union() {\n            translate([4 * scale_factor, -5 * scale_factor, 4 * scale_factor]) {\n                scale([1, 2, 1])\n                sphere(d = 2 * scale_factor, $fn = 16);\n            }\n            translate([-4 * scale_factor, -5 * scale_factor, 4 * scale_factor]) {\n                scale([1, 2, 1])\n                sphere(d = 2 * scale_factor, $fn = 16);\n            }\n        }\n        \n        // Fangs\n        color(\"white\")\n        union() {\n            translate([2 * scale_factor, -8 * scale_factor, 0 * scale_factor]) {\n                rotate([0, 30, 0])\n                cylinder(h = 3 * scale_factor, r1 = 1 * scale_factor, r2 = 0.2 * scale_factor, $fn = 8);\n            }\n            translate([-2 * scale_factor, -8 * scale_factor, 0 * scale_factor]) {\n                rotate([0, -30, 0])\n                cylinder(h = 3 * scale_factor, r1 = 1 * scale_factor, r2 = 0.2 * scale_factor, $fn = 8);\n            }\n        }\n    }\n}\n\n// Body patterns\nmodule body_patterns() {\n    color(\"yellow\")\n    union() {\n        // Stripe segments\n        for(i = [1:5]) {\n            translate([0, -(35 + i * 15) * scale_factor, -5 * scale_factor]) {\n                scale([1.2, 0.2, 0.2])\n                sphere(d = (10 - i * 0.5) * scale_factor, $fn = 16);\n            }\n        }\n        \n        // Belly scales\n        for(i = [1:6]) {\n            translate([0, -(40 + i * 12) * scale_factor, -8 * scale_factor]) {\n                scale([0.5, 0.8, 0.3])\n                sphere(d = (8 - i * 0.3) * scale_factor, $fn = 8);\n            }\n        }\n    }\n}\n\n// Tongue\nmodule tongue() {\n    color(\"red\")\n    translate([0, -9 * scale_factor, -2 * scale_factor]) {\n        rotate([90, 0, 0])\n        scale([0.5, 2, 0.2])\n        cylinder(h = 8 * scale_factor, r = 1 * scale_factor, $fn = 8);\n    }\n}\n\n// Main assembly\nunion() {\n    arbok_body();\n    hood_pattern();\n    face();\n    body_patterns();\n    tongue();\n}",
    "renders": true
  },
  {
    "pokemon": "sandshrew",
    "openscad_code": "// Sandshrew OpenSCAD Model\n// Medium complexity realistic style\n\n// Color definitions\ncolor_body = [0.82, 0.71, 0.55];    // Sandy brown\ncolor_belly = [0.95, 0.90, 0.85];   // Light cream\ncolor_markings = [0.75, 0.60, 0.45]; // Darker brown\ncolor_eyes = [0.1, 0.1, 0.1];        // Black\ncolor_nose = [0.7, 0.5, 0.4];        // Brown nose\n\n// Main module\nmodule sandshrew() {\n    // Body\n    color(color_body)\n    union() {\n        // Torso - oval shape\n        scale([1.2, 1, 0.8])\n        sphere(d=35, $fn=30);\n        \n        // Belly patch\n        color(color_belly)\n        translate([0, 0, -10])\n        scale([1.1, 0.9, 0.3])\n        sphere(d=30, $fn=25);\n    }\n    \n    // Head\n    color(color_body)\n    translate([0, 22, 12])\n    scale([0.9, 0.8, 0.8])\n    sphere(d=25, $fn=25);\n    \n    // Snout\n    color(color_body)\n    translate([0, 30, 10])\n    rotate([-20, 0, 0])\n    scale([0.6, 1, 0.5])\n    cylinder(h=8, d1=12, d2=8, $fn=20);\n    \n    // Eyes\n    color(color_eyes)\n    for(side = [-1, 1]) {\n        translate([side * 7, 25, 16])\n        sphere(d=3, $fn=10);\n    }\n    \n    // Nose\n    color(color_nose)\n    translate([0, 35, 11])\n    sphere(d=2.5, $fn=8);\n    \n    // Ears - triangular shape\n    color(color_body)\n    for(side = [-1, 1]) {\n        translate([side * 8, 15, 20])\n        rotate([0, side * 10, 0])\n        linear_extrude(height=2)\n        polygon(points=[[0,0], [side * 5, 5], [0, 10]]);\n    }\n    \n    // Arms\n    color(color_body)\n    for(side = [-1, 1]) {\n        // Upper arm\n        translate([side * 12, 10, 5])\n        rotate([90, 0, side * 10])\n        cylinder(h=8, d=6, $fn=15);\n        \n        // Lower arm\n        translate([side * 14, 5, 1])\n        rotate([90, 0, side * 5])\n        cylinder(h=6, d=5, $fn=12);\n        \n        // Claws\n        color(color_markings)\n        for(i = [-1, 0, 1]) {\n            translate([side * 17 + i * 1.5, 2, -1])\n            rotate([90, 0, 0])\n            cylinder(h=3, d1=2, d2=1, $fn=8);\n        }\n    }\n    \n    // Legs\n    color(color_body)\n    for(side = [-1, 1]) {\n        // Thigh\n        translate([side * 8, -8, -5])\n        rotate([0, 0, side * 5])\n        cylinder(h=10, d=8, $fn=15);\n        \n        // Lower leg\n        translate([side * 9, -12, -12])\n        rotate([0, 0, side * 5])\n        cylinder(h=8, d=6, $fn=12);\n        \n        // Feet\n        color(color_markings)\n        translate([side * 9, -15, -16])\n        scale([1.2, 1.5, 0.8])\n        sphere(d=8, $fn=15);\n    }\n    \n    // Tail - curved\n    color(color_body)\n    difference() {\n        // Main tail shape\n        translate([0, -25, -5])\n        rotate([0, 0, 10])\n        cylinder(h=20, d=10, $fn=20);\n        \n        // Tail tip\n        translate([0, -35, -8])\n        rotate([0, 0, 20])\n        scale([0.8, 1, 0.8])\n        sphere(d=12, $fn=20);\n    }\n    \n    // Back plates/armor segments\n    color(color_markings)\n    for(i = [0:1:4]) {\n        translate([0, 5 - i * 8, 8 - i * 2])\n        rotate([0, 0, sin(i * 15)])\n        scale([1, 0.8, 0.3])\n        sphere(d=12, $fn=6);\n    }\n    \n    // Side markings\n    color(color_markings)\n    for(side = [-1, 1]) {\n        translate([side * 15, 0, 0])\n        scale([0.5, 0.8, 1])\n        cylinder(h=30, d=3, $fn=6);\n    }\n}\n\n// Create the model scaled for 3D printing\nscale([2.5, 2.5, 2.5])\nsandshrew();",
    "renders": true
  },
  {
    "pokemon": "sandslash",
    "openscad_code": "// Sandslash in OpenSCAD - medium complexity realistic style\n// Overall height ~70mm\n\n// Colors\ncolor_body = [0.82, 0.64, 0.36];    // Sandy yellow\ncolor_spike = [0.85, 0.85, 0.85];   // Light gray\ncolor_nose = [0.7, 0.5, 0.3];       // Brown\ncolor_eye = [0.2, 0.2, 0.2];        // Black\ncolor_belly = [0.9, 0.8, 0.7];      // Light tan\n\n// Main body module\nmodule sandslash() {\n    color(color_body) {\n        // Torso - egg shape\n        scale([1, 0.8, 1.2]) sphere(15, $fn=32);\n        \n        // Belly\n        translate([0, -11, -5]) \n        color(color_belly)\n        scale([1.2, 0.3, 1]) sphere(12, $fn=32);\n    }\n    \n    // Head\n    translate([0, 18, 12]) {\n        color(color_body) sphere(10, $fn=32);\n        \n        // Snout\n        translate([0, 8, -2]) {\n            color(color_body) rotate([0, -20, 0]) scale([0.8, 1, 1.2]) sphere(6, $fn=32);\n            // Nose\n            translate([0, 6, 0]) color(color_nose) sphere(2, $fn=16);\n        }\n        \n        // Ears\n        for(side = [-1, 1]) {\n            translate([side * 6, 2, 6]) {\n                color(color_body) rotate([30, side * 20, 0]) cylinder(8, 3, 2, $fn=16);\n            }\n        }\n        \n        // Eyes\n        for(side = [-1, 1]) {\n            translate([side * 5, 5, 3]) {\n                color(color_eye) sphere(2, $fn=16);\n            }\n        }\n    }\n    \n    // Arms\n    for(side = [-1, 1]) {\n        translate([side * 12, 8, 0]) {\n            rotate([0, 0, side * 45]) {\n                color(color_body) cylinder(10, 5, 4, $fn=16);\n                // Claws\n                translate([0, 10, 0]) {\n                    rotate([0, 90, 0]) {\n                        for(i = [-1, 0, 1]) {\n                            translate([i * 2, 0, 0]) {\n                                color(color_spike) rotate([0, 0, 45]) scale([0.5, 0.5, 2]) cylinder(6, 2, 0, $fn=8);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Legs\n    for(side = [-1, 1]) {\n        translate([side * 8, -8, -12]) {\n            color(color_body) cylinder(12, 5, 4, $fn=16);\n            // Feet\n            translate([0, -12, 2]) {\n                color(color_body) scale([1.5, 1, 0.5]) sphere(5, $fn=16);\n            }\n        }\n    }\n    \n    // Tail segments\n    translate([0, -15, 0]) {\n        for(i = [1:4]) {\n            color(color_body) \n            translate([0, -i * 8, -i * 2]) \n            scale([1 - i * 0.15, 1 - i * 0.15, 1]) \n            sphere(8 - i, $fn=32);\n        }\n    }\n    \n    // Back spikes\n    module spike() {\n        color(color_spike) \n        scale([0.8, 0.8, 1]) \n        cylinder(8, 3, 0, $fn=8);\n    }\n    \n    // Back spikes pattern\n    for(x = [-8:8:8]) {\n        for(z = [-5:5:10]) {\n            translate([x, 0, z]) {\n                rotate([30, 0, 0]) spike();\n            }\n        }\n    }\n    \n    // Head spikes\n    for(angle = [0:60:300]) {\n        translate([0, 18, 12]) {\n            rotate([0, 0, angle]) {\n                translate([10, 0, 0]) {\n                    rotate([45, 0, 0]) spike();\n                }\n            }\n        }\n    }\n    \n    // Tail spikes\n    for(i = [1:4]) {\n        for(angle = [0:90:270]) {\n            translate([0, -15 - i * 8, -i * 2]) {\n                rotate([0, 0, angle]) {\n                    translate([8 - i, 0, 0]) {\n                        rotate([30, 0, 0]) spike();\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Generate the model\nsandslash();",
    "renders": true
  },
  {
    "pokemon": "nidoran",
    "openscad_code": "// Nidoran (Female) - Realistic Style, Medium Complexity\n// 3D printable model with proper wall thickness and no overhangs\n\n// Main body color - purple\ncolor([0.5, 0.2, 0.8]) {\n    // Main body\n    union() {\n        // Torso - oval shape\n        translate([0, 0, 15])\n            scale([1.2, 1, 1])\n            sphere(12);\n\n        // Head\n        translate([0, 20, 25])\n            sphere(10);\n\n        // Snout extension\n        translate([0, 30, 25])\n            scale([0.8, 1.2, 0.8])\n            sphere(6);\n\n        // Body bottom\n        translate([0, 0, 8])\n            cylinder(h=7, r1=10, r2=8);\n\n        // Hind legs\n        module hind_leg(x) {\n            translate([x, -10, 0])\n                union() {\n                    // Upper leg\n                    translate([0, 0, 8])\n                        cylinder(h=12, r=4);\n                    // Lower leg\n                    translate([0, 0, 0])\n                        cylinder(h=8, r=3);\n                    // Foot\n                    translate([0, -2, 0])\n                        cube([8, 4, 2]);\n                }\n        }\n        hind_leg(-8);\n        hind_leg(8);\n\n        // Front legs\n        module front_leg(x) {\n            translate([x, 15, 0])\n                union() {\n                    // Upper leg\n                    translate([0, 0, 8])\n                        cylinder(h=10, r=3);\n                    // Lower leg\n                    translate([0, 0, 2])\n                        cylinder(h=6, r=2.5);\n                    // Paw\n                    translate([0, -1, 0])\n                        cube([6, 3, 2]);\n                }\n        }\n        front_leg(-7);\n        front_leg(7);\n    }\n}\n\n// Ears - purple with dark tips\ncolor([0.5, 0.2, 0.8]) {\n    module ear(x) {\n        translate([x, 25, 35]) {\n            rotate([0, 10, 0])\n                cylinder(h=15, r1=3, r2=1);\n            color([0.3, 0.1, 0.5])\n                translate([0, 0, 14])\n                    sphere(1.5);\n        }\n    }\n    ear(-6);\n    ear(6);\n}\n\n// Back spikes - dark purple\ncolor([0.3, 0.1, 0.5]) {\n    module back_spike(i) {\n        angle = i * 30;\n        translate([0, -5 - i*3, 20 - i*2]) {\n            rotate([0, 0, angle])\n                cylinder(h=8, r1=2, r2=0.5);\n        }\n    }\n    for(i = [0:2]) {\n        back_spike(i);\n    }\n}\n\n// Tail with spikes\ncolor([0.5, 0.2, 0.8]) {\n    translate([0, -20, 15]) {\n        rotate([0, 30, 0])\n            cylinder(h=20, r1=5, r2=0);\n    }\n}\n\ncolor([0.3, 0.1, 0.5]) {\n    module tail_spike(i) {\n        translate([0, -20 - i*3, 15 - i*2]) {\n            rotate([0, 30, 0])\n                cylinder(h=4, r1=1.5, r2=0.5);\n        }\n    }\n    for(i = [0:3]) {\n        tail_spike(i);\n    }\n}\n\n// Facial features\n// Eyes - dark\ncolor([0.1, 0.1, 0.1]) {\n    module eye(x) {\n        translate([x, 32, 27])\n            sphere(1.5);\n    }\n    eye(-3);\n    eye(3);\n}\n\n// Nose - dark\ncolor([0.2, 0.1, 0.3]) {\n    translate([0, 34, 25])\n        sphere(1);\n}\n\n// Whiskers - light\ncolor([0.7, 0.7, 0.7]) {\n    module whisker(x, angle) {\n        translate([0, 30, 24])\n            rotate([0, 0, angle])\n                translate([x, 0, 0])\n                    cylinder(h=8, r=0.5);\n    }\n    whisker(5, 30);\n    whisker(5, -30);\n    whisker(-5, 150);\n    whisker(-5, 210);\n}\n\n// Belly marking - cream\ncolor([0.9, 0.85, 0.7]) {\n    translate([0, 5, 10])\n        scale([1.2, 1.5, 0.5])\n        sphere(8);\n}",
    "renders": true
  },
  {
    "pokemon": "nidorina",
    "openscad_code": "// Nidorina - Medium Complexity Realistic Style\n// Overall dimensions: ~80mm height\n\nmodule nidorina() {\n    // Main body - rounded torso\n    color(\"mediumvioletred\") {\n        union() {\n            // Torso\n            translate([0, 0, 25]) {\n                scale([1.2, 1, 1.3]) sphere(d=35, $fn=30);\n            }\n            \n            // Belly\n            translate([0, 8, 20]) {\n                scale([0.8, 0.6, 1]) sphere(d=30, $fn=20);\n            }\n        }\n    }\n    \n    // Head\n    color(\"mediumvioletred\") {\n        translate([0, -15, 45]) {\n            sphere(d=30, $fn=25);\n        }\n    }\n    \n    // Snout\n    color(\"mediumvioletred\") {\n        translate([0, -25, 42]) {\n            rotate([30, 0, 0]) {\n                scale([0.6, 1.2, 0.6]) cylinder(h=15, d1=20, d2=15, $fn=20);\n            }\n        }\n    }\n    \n    // Ears with spikes\n    color(\"mediumvioletred\") {\n        // Left ear\n        translate([-15, -10, 55]) {\n            rotate([0, -20, -30]) {\n                cylinder(h=25, d1=12, d2=8, $fn=8);\n            }\n            // Ear spike\n            translate([0, 0, 25]) {\n                rotate([0, 0, 0]) {\n                    cylinder(h=8, d1=6, d2=0, $fn=6);\n                }\n            }\n        }\n        \n        // Right ear\n        translate([15, -10, 55]) {\n            rotate([0, -20, 30]) {\n                cylinder(h=25, d1=12, d2=8, $fn=8);\n            }\n            // Ear spike\n            translate([0, 0, 25]) {\n                rotate([0, 0, 0]) {\n                    cylinder(h=8, d1=6, d2=0, $fn=6);\n                }\n            }\n        }\n    }\n    \n    // Back spikes\n    color(\"darkgreen\") {\n        for(i = [0:2]) {\n            translate([0, 5 + i*8, 35 + i*3]) {\n                rotate([0, 0, 0]) {\n                    cylinder(h=10 + i*2, d1=8, d2=0, $fn=6);\n                }\n            }\n        }\n    }\n    \n    // Legs\n    color(\"mediumvioletred\") {\n        // Front left leg\n        translate([-10, -5, 15]) {\n            rotate([0, 10, 0]) {\n                cylinder(h=20, d1=12, d2=10, $fn=12);\n            }\n            // Foot\n            translate([0, 0, -8]) {\n                scale([1.2, 1.5, 0.5]) sphere(d=15, $fn=12);\n            }\n        }\n        \n        // Front right leg\n        translate([10, -5, 15]) {\n            rotate([0, -10, 0]) {\n                cylinder(h=20, d1=12, d2=10, $fn=12);\n            }\n            // Foot\n            translate([0, 0, -8]) {\n                scale([1.2, 1.5, 0.5]) sphere(d=15, $fn=12);\n            }\n        }\n        \n        // Back left leg\n        translate([-12, 12, 15]) {\n            rotate([0, -10, 0]) {\n                cylinder(h=22, d1=14, d2=12, $fn=12);\n            }\n            // Foot\n            translate([0, 0, -8]) {\n                scale([1.3, 1.6, 0.5]) sphere(d=16, $fn=12);\n            }\n        }\n        \n        // Back right leg\n        translate([12, 12, 15]) {\n            rotate([0, 10, 0]) {\n                cylinder(h=22, d1=14, d2=12, $fn=12);\n            }\n            // Foot\n            translate([0, 0, -8]) {\n                scale([1.3, 1.6, 0.5]) sphere(d=16, $fn=12);\n            }\n        }\n    }\n    \n    // Tail\n    color(\"mediumvioletred\") {\n        translate([0, 20, 30]) {\n            rotate([0, 0, 0]) {\n                scale([1, 1.5, 1]) sphere(d=15, $fn=20);\n            }\n            // Tail spikes\n            for(i = [0:1]) {\n                translate([0, 10 + i*8, -2 - i*2]) {\n                    rotate([0, 0, 0]) {\n                        cylinder(h=8 + i*2, d1=6, d2=0, $fn=6);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Eyes\n    color(\"blue\") {\n        // Left eye\n        translate([-8, -20, 47]) {\n            sphere(d=6, $fn=15);\n        }\n        \n        // Right eye\n        translate([8, -20, 47]) {\n            sphere(d=6, $fn=15);\n        }\n    }\n    \n    // Nose\n    color(\"darkgreen\") {\n        translate([0, -28, 42]) {\n            rotate([90, 0, 0]) {\n                cylinder(h=3, d1=8, d2=0, $fn=6);\n            }\n        }\n    }\n    \n    // Teeth\n    color(\"white\") {\n        // Left fang\n        translate([-3, -26, 40]) {\n            rotate([90, 0, 0]) {\n                cylinder(h=5, d1=2, d2=0, $fn=6);\n            }\n        }\n        \n        // Right fang\n        translate([3, -26, 40]) {\n            rotate([90, 0, 0]) {\n                cylinder(h=5, d1=2, d2=0, $fn=6);\n            }\n        }\n    }\n    \n    // Belly spots\n    color(\"lightblue\") {\n        translate([0, 12, 20]) {\n            scale([1.5, 1, 0.1]) sphere(d=25, $fn=20);\n        }\n    }\n}\n\nnidorina();",
    "renders": true
  },
  {
    "pokemon": "nidoqueen",
    "openscad_code": "// Nidoqueen - Medium Complexity Realistic Style\n// Scaled for 3D printing (80mm tall)\n\ncolor([0.3,0.4,0.2]) \nunion() {\n    // Body - main torso\n    translate([0,0,25])\n    scale([1.2,1,1.5])\n    sphere(15, $fn=32);\n    \n    // Lower body\n    translate([0,0,12])\n    scale([1.1,0.9,1.3])\n    sphere(12, $fn=32);\n    \n    // Chest plate\n    translate([0,-10,22])\n    rotate([0,10,0])\n    scale([1.3,0.3,1.2])\n    cube([20,8,15], center=true);\n    \n    // Head\n    translate([0,0,42])\n    scale([0.9,0.9,1.1])\n    sphere(12, $fn=32);\n    \n    // Snout\n    translate([0,-10,42])\n    scale([0.7,1.2,0.8])\n    rotate([10,0,0])\n    cylinder(8, 6, 4, $fn=16);\n    \n    // Ears\n    module ear(x) {\n        translate([x,0,48])\n        rotate([0,x*5,0])\n        scale([0.3,1,2])\n        sphere(6, $fn=16);\n    }\n    ear(8);\n    ear(-8);\n    \n    // Horns\n    module horn(x) {\n        translate([x,0,52])\n        rotate([0,x*10,-10])\n        cylinder(10, 2, 1, $fn=8);\n    }\n    horn(5);\n    horn(-5);\n    \n    // Arms\n    module arm(x) {\n        translate([x*10,5,30])\n        rotate([0,x*30,0])\n        scale([0.8,0.8,1.2])\n        sphere(6, $fn=16);\n        \n        translate([x*15,5,25])\n        rotate([0,x*30,90])\n        cylinder(12, 3, 2.5, $fn=12);\n    }\n    arm(1);\n    arm(-1);\n    \n    // Legs\n    module leg(x) {\n        translate([x*8,0,8])\n        scale([1,1,1.5])\n        sphere(8, $fn=16);\n        \n        translate([x*9,0,0])\n        rotate([0,0,0])\n        cylinder(10, 6, 8, $fn=12);\n    }\n    leg(1);\n    leg(-1);\n    \n    // Tail segments\n    color([0.4,0.5,0.3])\n    for(i=[0:3]) {\n        translate([0,15+i*5,20-i*3])\n        scale([1-i*0.1,1-i*0.1,1])\n        rotate([0,-10-i*5,0])\n        sphere(6-i, $fn=16);\n    }\n    \n    // Tail spikes\n    color([0.6,0.7,0.5])\n    for(i=[1:3]) {\n        translate([0,15+i*5,20-i*3+3])\n        rotate([0,0,0])\n        scale([0.3,1.5,0.3])\n        cylinder(4, 2, 0.5, $fn=8);\n    }\n    \n    // Back spikes\n    for(i=[-1:1]) {\n        translate([i*6,5,35+i*2])\n        rotate([0,10,0])\n        scale([0.5,0.5,1.5])\n        cylinder(8, 3, 1, $fn=8);\n    }\n    \n    // Eyes\n    color([0.1,0.1,0.3])\n    translate([4,-12,44])\n    scale([1,1.2,0.5])\n    sphere(2, $fn=16);\n    translate([-4,-12,44])\n    scale([1,1.2,0.5])\n    sphere(2, $fn=16);\n    \n    // Teeth\n    color([0.9,0.9,0.8])\n    for(i=[-1:1]) {\n        translate([i*2,-17,40])\n        scale([0.5,0.5,1])\n        cylinder(2, 1, 0.5, $fn=8);\n    }\n    \n    // Belly pattern\n    color([0.5,0.6,0.4])\n    translate([0,-5,20])\n    scale([0.8,0.3,1.2])\n    sphere(12, $fn=32);\n}",
    "renders": true
  },
  {
    "pokemon": "nidorino",
    "openscad_code": "// Nidorino - Realistic Medium Complexity\n// Scaled to 80mm height for 3D printing\n\n$fn = 32;\n\n// Main colors\ncolor_purple = [0.5, 0.2, 0.7];\ncolor_dark_purple = [0.3, 0.1, 0.5];\ncolor_white = [0.9, 0.9, 0.9];\ncolor_teeth = [0.95, 0.95, 0.85];\ncolor_eye = [0.1, 0.1, 0.8];\n\nmodule body() {\n    color(color_purple)\n    union() {\n        // Main torso\n        translate([0, 0, 25])\n            scale([1.2, 0.8, 1.3])\n            sphere(20);\n        \n        // Belly\n        translate([0, -15, 20])\n            scale([0.8, 0.3, 1])\n            sphere(18);\n    }\n}\n\nmodule head() {\n    color(color_purple)\n    union() {\n        // Main head shape\n        translate([0, 30, 45])\n            scale([1, 0.8, 1.1])\n            sphere(15);\n        \n        // Snout\n        translate([0, 45, 45])\n            scale([0.6, 1.2, 0.6])\n            sphere(12);\n    }\n}\n\nmodule ears() {\n    color(color_purple)\n    union() {\n        // Left ear\n        translate([-12, 25, 58])\n            rotate([0, -15, -20])\n            scale([0.3, 0.3, 2.5])\n            cylinder(15, 8, 3);\n        \n        // Right ear\n        translate([12, 25, 58])\n            rotate([0, -15, 20])\n            scale([0.3, 0.3, 2.5])\n            cylinder(15, 8, 3);\n    }\n}\n\nmodule horn() {\n    color(color_purple)\n    union() {\n        // Main horn\n        translate([0, 35, 60])\n            rotate([0, 0, 0])\n            cylinder(20, 2, 8);\n        \n        // Horn ridges\n        for(i = [0:3]) {\n            translate([0, 35, 45 + i*5])\n                rotate([0, 0, 0])\n                cylinder(2, 5 + i, 4 + i);\n        }\n    }\n}\n\nmodule spikes() {\n    color(color_dark_purple)\n    union() {\n        // Back spikes\n        for(i = [-1:1]) {\n            translate([i*10, 0, 40 + abs(i)*5])\n                rotate([0, -30, 0])\n                scale([0.5, 0.5, 1.5])\n                cylinder(15, 3, 1);\n        }\n        \n        // Head spikes\n        for(i = [-2:2]) {\n            if(i != 0) {\n                translate([i*5, 35, 55])\n                    rotate([0, -45, 0])\n                    cylinder(8, 2, 1);\n            }\n        }\n    }\n}\n\nmodule legs() {\n    color(color_purple)\n    union() {\n        // Front legs\n        translate([-15, 15, 10])\n            rotate([0, 0, 15])\n            scale([0.8, 0.8, 1])\n            cylinder(25, 6, 5);\n        \n        translate([15, 15, 10])\n            rotate([0, 0, -15])\n            scale([0.8, 0.8, 1])\n            cylinder(25, 6, 5);\n        \n        // Back legs\n        translate([-12, -15, 10])\n            rotate([0, 0, -10])\n            scale([1, 1, 1.2])\n            cylinder(30, 7, 6);\n        \n        translate([12, -15, 10])\n            rotate([0, 0, 10])\n            scale([1, 1, 1.2])\n            cylinder(30, 7, 6);\n    }\n}\n\nmodule tail() {\n    color(color_purple)\n    union() {\n        // Main tail\n        translate([0, -35, 25])\n            rotate([0, 0, 0])\n            scale([0.8, 1, 0.8])\n            cylinder(30, 10, 5);\n        \n        // Tail spikes\n        color(color_dark_purple)\n        for(i = [0:3]) {\n            translate([0, -45 - i*8, 20 - i*3])\n                rotate([0, 30, 0])\n                cylinder(8, 2, 1);\n        }\n    }\n}\n\nmodule face() {\n    union() {\n        // Eyes\n        color(color_eye)\n        translate([-6, 40, 48])\n            sphere(3);\n        \n        color(color_eye)\n        translate([6, 40, 48])\n            sphere(3);\n        \n        // Eye whites\n        color(color_white)\n        translate([-6, 42, 50])\n            sphere(1.5);\n        \n        color(color_white)\n        translate([6, 42, 50])\n            sphere(1.5);\n        \n        // Teeth\n        color(color_teeth)\n        translate([-3, 52, 42])\n            rotate([0, 0, -15])\n            scale([0.5, 1, 0.3])\n            cube([2, 4, 2]);\n        \n        color(color_teeth)\n        translate([3, 52, 42])\n            rotate([0, 0, 15])\n            scale([0.5, 1, 0.3])\n            cube([2, 4, 2]);\n        \n        // Nose\n        color(color_dark_purple)\n        translate([0, 50, 45])\n            sphere(2);\n    }\n}\n\n// Assemble the model\nscale(0.8)  // Scale to 80mm height\nunion() {\n    body();\n    head();\n    ears();\n    horn();\n    spikes();\n    legs();\n    tail();\n    face();\n}",
    "renders": true
  },
  {
    "pokemon": "nidoking",
    "openscad_code": "// Nidoking - Medium Complexity Realistic Style\n\n// Color definitions\ncolor_body = [0.4, 0.2, 0.6];      // Purple body\ncolor_belly = [0.9, 0.9, 0.8];    // Light gray belly\ncolor_spikes = [0.95, 0.95, 0.9];  // Off-white spikes\ncolor_ears = [0.95, 0.3, 0.3];    // Red inner ears\ncolor_eyes = [0.1, 0.1, 0.1];     // Black eyes\ncolor_teeth = [0.95, 0.95, 0.9];  // White teeth\ncolor_horns = [0.85, 0.85, 0.85]; // Gray horns\n\n// Main body with belly\nmodule body() {\n    union() {\n        // Main torso\n        color(color_body)\n        translate([0, 0, 25])\n        scale([1.2, 0.8, 1.5])\n        sphere(20);\n        \n        // Belly\n        color(color_belly)\n        translate([0, -15, 15])\n        scale([0.9, 0.3, 1.2])\n        sphere(18);\n        \n        // Chest plate\n        color(color_spikes)\n        translate([0, -14, 35])\n        rotate([90, 0, 0])\n        cylinder(h=2, r1=15, r2=10);\n    }\n}\n\n// Head with horns and ears\nmodule head() {\n    union() {\n        // Main head\n        color(color_body)\n        translate([0, 20, 45])\n        scale([1, 0.8, 1.1])\n        sphere(15);\n        \n        // Snout\n        color(color_body)\n        translate([0, 30, 42])\n        rotate([-30, 0, 0])\n        cylinder(h=15, r1=12, r2=8);\n        \n        // Nose\n        color(color_body)\n        translate([0, 38, 38])\n        sphere(5);\n        \n        // Horns\n        color(color_horns)\n        translate([-8, 20, 58])\n        rotate([0, -20, -20])\n        cylinder(h=15, r1=4, r2=2);\n        \n        translate([8, 20, 58])\n        rotate([0, -20, 20])\n        cylinder(h=15, r1=4, r2=2);\n        \n        // Ears\n        color(color_body)\n        translate([-12, 15, 52])\n        rotate([0, 0, -30])\n        scale([0.8, 0.3, 1.5])\n        sphere(6);\n        \n        translate([12, 15, 52])\n        rotate([0, 0, 30])\n        scale([0.8, 0.3, 1.5])\n        sphere(6);\n        \n        // Inner ears\n        color(color_ears)\n        translate([-12, 16, 52])\n        rotate([0, 0, -30])\n        scale([0.5, 0.2, 1.2])\n        sphere(6);\n        \n        translate([12, 16, 52])\n        rotate([0, 0, 30])\n        scale([0.5, 0.2, 1.2])\n        sphere(6);\n        \n        // Eyes\n        color(color_eyes)\n        translate([-6, 25, 50])\n        sphere(2);\n        translate([6, 25, 50])\n        sphere(2);\n        \n        // Teeth\n        color(color_teeth)\n        translate([-3, 38, 38])\n        rotate([0, 90, 0])\n        cylinder(h=3, r1=1.5, r2=0);\n        translate([3, 38, 38])\n        rotate([0, 90, 0])\n        cylinder(h=3, r1=1.5, r2=0);\n    }\n}\n\n// Arms with spikes\nmodule arms() {\n    union() {\n        // Left arm\n        color(color_body)\n        translate([-25, 5, 35])\n        rotate([0, 0, 30])\n        cylinder(h=20, r1=6, r2=5);\n        \n        color(color_body)\n        translate([-35, 0, 25])\n        rotate([0, 0, 45])\n        scale([1, 0.8, 0.8])\n        sphere(8);\n        \n        // Right arm\n        color(color_body)\n        translate([25, 5, 35])\n        rotate([0, 0, -30])\n        cylinder(h=20, r1=6, r2=5);\n        \n        color(color_body)\n        translate([35, 0, 25])\n        rotate([0, 0, -45])\n        scale([1, 0.8, 0.8])\n        sphere(8);\n    }\n}\n\n// Legs with claws\nmodule legs() {\n    union() {\n        // Left leg\n        color(color_body)\n        translate([-15, -10, 0])\n        rotate([0, 10, 0])\n        cylinder(h=25, r1=7, r2=6);\n        \n        color(color_body)\n        translate([-15, -10, -10])\n        scale([1.2, 1, 0.8])\n        sphere(8);\n        \n        // Right leg\n        color(color_body)\n        translate([15, -10, 0])\n        rotate([0, -10, 0])\n        cylinder(h=25, r1=7, r2=6);\n        \n        color(color_body)\n        translate([15, -10, -10])\n        scale([1.2, 1, 0.8])\n        sphere(8);\n    }\n}\n\n// Tail with spikes\nmodule tail() {\n    union() {\n        // Tail segments\n        for(i = [0:3]) {\n            color(color_body)\n            translate([0, -20 - i*10, 25 - i*5])\n            rotate([0, 0, i*5])\n            scale([1 - i*0.15, 1 - i*0.15, 1 - i*0.1])\n            sphere(12 - i*2);\n        }\n        \n        // Tail spikes\n        for(i = [0:2]) {\n            color(color_spikes)\n            translate([0, -25 - i*12, 30 - i*5])\n            rotate([0, 0, i*10])\n            scale([0.5, 0.5, 1.5])\n            sphere(5);\n        }\n    }\n}\n\n// Back spikes\nmodule back_spikes() {\n    for(i = [0:4]) {\n        color(color_spikes)\n        translate([0, -5 - i*5, 35 + i*3])\n        rotate([0, 0, 0])\n        scale([0.6, 0.6, 1.2])\n        cylinder(h=8, r1=3, r2=1);\n    }\n}\n\n// Assemble the complete Nidoking\nbody();\nhead();\narms();\nlegs();\ntail();\nback_spikes();",
    "renders": true
  },
  {
    "pokemon": "clefairy",
    "openscad_code": "// Clefairy Pokemon - Realistic Style, Medium Complexity\n// Approx 80mm tall, 3D-printable\n\n// Colors\npink = [1, 0.8, 0.9];\ndark_pink = [0.8, 0.6, 0.7];\nwhite = [1, 1, 1];\nblack = [0, 0, 0];\nred = [0.8, 0.2, 0.2];\n\n// Main body\nmodule body() {\n    color(pink) {\n        // Torso\n        translate([0, 0, 30])\n            scale([1.2, 1, 1.3])\n            sphere(20);\n        \n        // Belly\n        color(white)\n        translate([0, -19, 30])\n            scale([1.1, 0.5, 1.2])\n            sphere(15);\n    }\n}\n\n// Head\nmodule head() {\n    color(pink) {\n        // Main head sphere\n        translate([0, 0, 55])\n            sphere(22);\n        \n        // Snout\n        translate([0, -20, 55])\n            scale([0.8, 0.6, 0.7])\n            sphere(15);\n    }\n    \n    // Eyes\n    color(white) {\n        translate([-10, -5, 60])\n            sphere(6);\n        translate([10, -5, 60])\n            sphere(6);\n    }\n    \n    // Eye pupils\n    color(black) {\n        translate([-10, -6, 63])\n            sphere(3);\n        translate([10, -6, 63])\n            sphere(3);\n    }\n    \n    // Mouth\n    color(dark_pink)\n    translate([0, -20, 50])\n        rotate([0, 0, 0])\n        cylinder(h=1, r1=3, r2=1, $fn=20);\n}\n\n// Ears\nmodule ears() {\n    color(pink) {\n        // Left ear\n        translate([-15, 0, 70])\n            rotate([0, 0, -20])\n            scale([0.3, 2, 0.3])\n            cylinder(h=25, r=5, $fn=20);\n        \n        // Right ear\n        translate([15, 0, 70])\n            rotate([0, 0, 20])\n            scale([0.3, 2, 0.3])\n            cylinder(h=25, r=5, $fn=20);\n        \n        // Ear tips\n        color(dark_pink) {\n            translate([-15, 0, 95])\n                rotate([0, 0, -20])\n                scale([0.3, 2, 0.3])\n                sphere(3);\n            translate([15, 0, 95])\n                rotate([0, 0, 20])\n                scale([0.3, 2, 0.3])\n                sphere(3);\n        }\n    }\n}\n\n// Wings\nmodule wings() {\n    color(pink) {\n        // Left wing\n        translate([-25, 5, 50])\n            rotate([0, 0, -30])\n            scale([1.5, 0.2, 1])\n            sphere(10);\n        \n        // Right wing\n        translate([25, 5, 50])\n            rotate([0, 0, 30])\n            scale([1.5, 0.2, 1])\n            sphere(10);\n    }\n}\n\n// Arms\nmodule arms() {\n    color(pink) {\n        // Left arm\n        translate([-25, 0, 35])\n            rotate([0, 0, -120])\n            cylinder(h=20, r=5, $fn=20);\n        \n        // Right arm\n        translate([25, 0, 35])\n            rotate([0, 0, 120])\n            cylinder(h=20, r=5, $fn=20);\n        \n        // Hands\n        color(white) {\n            translate([-35, 0, 25])\n                sphere(6);\n            translate([35, 0, 25])\n                sphere(6);\n        }\n    }\n}\n\n// Legs\nmodule legs() {\n    color(pink) {\n        // Left leg\n        translate([-10, 0, 15])\n            cylinder(h=15, r=7, $fn=20);\n        \n        // Right leg\n        translate([10, 0, 15])\n            cylinder(h=15, r=7, $fn=20);\n        \n        // Feet\n        color(white) {\n            translate([-10, 0, 0])\n                scale([1.2, 1.5, 0.5])\n                sphere(8);\n            translate([10, 0, 0])\n                scale([1.2, 1.5, 0.5])\n                sphere(8);\n        }\n    }\n}\n\n// Tail/curl\nmodule tail() {\n    color(pink) {\n        // Spiral curl\n    for (i = [0:5:180]) {\n        translate([0, 25 * cos(i), 10 + 15 * sin(i)])\n            sphere(4);\n    }\n    }\n}\n\n// Main assembly\nunion() {\n    body();\n    head();\n    ears();\n    wings();\n    arms();\n    legs();\n    tail();\n}",
    "renders": true
  },
  {
    "pokemon": "clefable",
    "openscad_code": "// Clefable Pokemon - Realistic Style, Medium Complexity\n// Size: ~80mm height\n\n$fa = 2;\n$fs = 0.5;\n\n// Main colors\ncolor_body = [0.95, 0.85, 0.85];\ncolor_accents = [0.4, 0.2, 0.8];\ncolor_details = [0.1, 0.1, 0.1];\ncolor_wings = [0.9, 0.9, 0.95];\n\n// Main body\nmodule body() {\n    color(color_body)\n    union() {\n        // Torso - egg shaped\n        scale([1, 1.2, 1.3])\n        sphere(d=40);\n        \n        // Belly padding\n        translate([0, -12, -5])\n        scale([0.8, 0.7, 0.4])\n        sphere(d=35);\n    }\n}\n\n// Head with characteristic curl\nmodule head() {\n    color(color_body)\n    union() {\n        // Main head sphere\n        translate([0, 25, 15])\n        sphere(d=35);\n        \n        // Curl on head\n        rotate([0, 0, -30])\n        translate([-10, 28, 25])\n        rotate([90, 0, 0])\n        cylinder(h=15, d1=12, d2=8);\n        \n        // Curl tip\n        translate([-12, 28, 32])\n        sphere(d=8);\n    }\n}\n\n// Ears with pointed tips\nmodule ears() {\n    color(color_body)\n    union() {\n        // Left ear\n        translate([-15, 30, 25])\n        rotate([0, 30, -20])\n        cylinder(h=25, d1=8, d2=5);\n        translate([-15, 30, 40])\n        sphere(d=5);\n        \n        // Right ear\n        translate([15, 30, 25])\n        rotate([0, 30, 20])\n        cylinder(h=25, d1=8, d2=5);\n        translate([15, 30, 40])\n        sphere(d=5);\n        \n        // Ear tips in accent color\n        color(color_accents) {\n            translate([-15, 30, 42])\n            sphere(d=7);\n            translate([15, 30, 42])\n            sphere(d=7);\n        }\n    }\n}\n\n// Eyes with detailed pupils\nmodule eyes() {\n    union() {\n        // Eye whites\n        color([1, 1, 1])\n        union() {\n            translate([-8, 22, 20])\n            sphere(d=8);\n            translate([8, 22, 20])\n            sphere(d=8);\n        }\n        \n        // Pupils\n        color(color_details)\n        union() {\n            translate([-8, 22, 24])\n            sphere(d=4);\n            translate([8, 22, 24])\n            sphere(d=4);\n        }\n        \n        // Eye shine\n        color([1, 1, 1])\n        union() {\n            translate([-7, 23, 26])\n            sphere(d=2);\n            translate([9, 23, 26])\n            sphere(d=2);\n        }\n    }\n}\n\n// Mouth\nmodule mouth() {\n    color(color_details)\n    translate([0, 15, 15])\n    rotate([90, 0, 0])\n    cylinder(h=0.5, d=8);\n}\n\n// Wings\nmodule wings() {\n    color(color_wings)\n    union() {\n        // Left wing\n        translate([-25, 0, 10])\n        rotate([0, 0, 20])\n        scale([1, 0.2, 1.5])\n        sphere(d=20);\n        \n        // Right wing\n        translate([25, 0, 10])\n        rotate([0, 0, -20])\n        scale([1, 0.2, 1.5])\n        sphere(d=20);\n        \n        // Wing details\n        color(color_accents) {\n            for(i = [0:2]) {\n                translate([-25 - i*3, 0, 15 + i*5])\n                rotate([0, 0, 20])\n                sphere(d=3);\n                translate([25 + i*3, 0, 15 + i*5])\n                rotate([0, 0, -20])\n                sphere(d=3);\n            }\n        }\n    }\n}\n\n// Tail with curl\nmodule tail() {\n    color(color_body)\n    union() {\n        // Tail base\n        translate([0, -20, -5])\n        rotate([0, 20, 0])\n        cylinder(h=15, d1=8, d2=5);\n        \n        // Tail curl\n        translate([0, -30, -10])\n        rotate([0, 20, 0])\n        sphere(d=8);\n        translate([0, -35, -12])\n        sphere(d=6);\n    }\n}\n\n// Feet\nmodule feet() {\n    color(color_body)\n    union() {\n        // Left foot\n        translate([-10, -15, -15])\n        scale([1, 1.5, 0.5])\n        sphere(d=10);\n        \n        // Right foot\n        translate([10, -15, -15])\n        scale([1, 1.5, 0.5])\n        sphere(d=10);\n        \n        // Toes\n        for(i = [-1, 0, 1]) {\n            color(color_accents) {\n                translate([-10 + i*3, -15, -12])\n                sphere(d=3);\n                translate([10 + i*3, -15, -12])\n                sphere(d=3);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    ears();\n    eyes();\n    mouth();\n    wings();\n    tail();\n    feet();\n}",
    "renders": true
  },
  {
    "pokemon": "vulpix",
    "openscad_code": "// Vulpix - realistic medium complexity OpenSCAD model\n// Dimensions: ~80mm long, ~60mm tall, ~50mm wide\n// Colors: burnt-orange body, cream belly/chest, light blue eyes, dark brown nose\n\ncolor([0.9,0.3,0.1]) union() {\n    // Body\n    translate([0,0,25]) scale([1,0.8,1.2]) sphere(15,$fn=32);\n\n    // Head\n    translate([0,17,40]) scale([0.9,0.9,0.8]) sphere(12,$fn=32);\n\n    // Snout\n    translate([0,27,38]) scale([0.5,0.6,0.4]) rotate([0,10,0]) sphere(8,$fn=24);\n\n    // Ears (6 small spikes)\n    for(i=[-30,-10,10,30,50,70]) {\n        rotate([0,i,0]) translate([0,12,52]) rotate([45,0,0]) \n            scale([0.4,0.4,1]) cylinder(h=12,r1=2,r2=0,$fn=6);\n    }\n\n    // Legs\n    module leg(x,y,angle) {\n        translate([x,y,15]) rotate([0,0,angle]) {\n            cylinder(h=20,r1=4,r2=2,$fn=12);\n            translate([0,0,20]) sphere(2,$fn=12);\n        }\n    }\n    leg(-10,-8,0);\n    leg(10,-8,0);\n    leg(-8,-12,-5);\n    leg(8,-12,5);\n\n    // 6 tails\n    module tail(angle,scale) {\n        rotate([0,0,angle]) translate([-20*sin(angle),-20*cos(angle),15]) {\n            scale([scale,scale,scale]) {\n                rotate([10,0,0]) cylinder(h=40,r1=6,r2=2,$fn=8);\n                translate([0,0,40]) rotate([20,0,0]) cylinder(h=30,r1=4,r2=1,$fn=8);\n                translate([0,0,70]) rotate([30,0,0]) cylinder(h=20,r1=2,r2=0,$fn=8);\n            }\n        }\n    }\n    for(i=[0:60:300]) tail(i,1-i/600);\n}\n\n// Cream belly/chest\ncolor([0.95,0.85,0.7]) union() {\n    translate([0,5,15]) scale([0.7,0.6,0.8]) sphere(12,$fn=32);\n    translate([0,12,20]) scale([0.6,0.5,0.6]) sphere(10,$fn=32);\n}\n\n// Eyes\ncolor([0.5,0.7,0.9]) union() {\n    translate([-4,22,43]) rotate([0,-20,0]) scale([1,1.2,0.5]) sphere(3,$fn=16);\n    translate([4,22,43]) rotate([0,20,0]) scale([1,1.2,0.5]) sphere(3,$fn=16);\n}\n\n// Eye pupils\ncolor([0.1,0.1,0.1]) union() {\n    translate([-4,22,44]) rotate([0,-20,0]) scale([0.4,0.8,0.2]) sphere(1,$fn=8);\n    translate([4,22,44]) rotate([0,20,0]) scale([0.4,0.8,0.2]) sphere(1,$fn=8);\n}\n\n// Nose\ncolor([0.2,0.1,0.05]) \n    translate([0,29,38]) scale([1,0.5,0.3]) sphere(2,$fn=12);\n\n// Mouth\ncolor([0.3,0.1,0.1]) \n    translate([0,28,35]) rotate([90,0,0]) cylinder(h=0.5,r1=2,r2=1,$fn=16);\n\n// Tail tips (cream colored)\ncolor([0.95,0.85,0.7]) \n    for(i=[0:60:300]) {\n        rotate([0,0,i]) translate([-20*sin(i),-20*cos(i),15]) {\n            rotate([10,0,0]) translate([0,0,65]) scale([0.3,0.3,0.3]) sphere(4,$fn=8);\n        }\n    }",
    "renders": true
  },
  {
    "pokemon": "ninetales",
    "openscad_code": "// Ninetales Pokemon - Realistic Style\n// Medium complexity OpenSCAD model\n\nmodule ninetales() {\n    color(\"gold\") {\n        // Main body\n        union() {\n            // Torso\n            translate([0, 0, 20])\n                scale([1.2, 0.8, 1])\n                sphere(d=40, $fn=32);\n            \n            // Chest\n            translate([0, -15, 15])\n                scale([0.9, 0.6, 0.8])\n                sphere(d=35, $fn=32);\n            \n            // Neck\n            translate([0, 0, 45])\n                cylinder(h=15, d1=20, d2=15, $fn=16);\n            \n            // Head\n            translate([0, 0, 55])\n                sphere(d=25, $fn=32);\n        }\n        \n        // Legs\n        for(i = [-1, 1]) {\n            translate([i*12, -8, 10])\n                rotate([0, i*10, 0])\n                cylinder(h=20, d1=12, d2=8, $fn=16);\n            \n            // Paws\n            translate([i*12, -8, 0])\n                sphere(d=10, $fn=16);\n        }\n        \n        // Front legs\n        for(i = [-1, 1]) {\n            translate([i*10, 15, 15])\n                rotate([0, -i*10, 0])\n                cylinder(h=18, d1=10, d2=8, $fn=16);\n            \n            // Front paws\n            translate([i*10, 15, 0])\n                sphere(d=9, $fn=16);\n        }\n    }\n    \n    // Nine tails\n    color(\"goldenrod\") {\n        for(i = [0:8]) {\n            rotate([0, 0, i*40])\n            translate([35, 0, 25])\n                rotate([0, -20, 0])\n                tail();\n        }\n    }\n    \n    // Ears\n    color(\"gold\") {\n        for(i = [-1, 1]) {\n            translate([i*8, 0, 70])\n                rotate([0, i*20, 0])\n                scale([0.8, 1, 1.5])\n                cylinder(h1=12, h2=8, r1=6, r2=3, $fn=8);\n        }\n    }\n    \n    // Facial features\n    color(\"black\") {\n        // Eyes\n        for(i = [-1, 1]) {\n            translate([i*7, 12, 60])\n                sphere(d=4, $fn=16);\n        }\n        \n        // Nose\n        translate([0, 15, 58])\n            sphere(d=3, $fn=16);\n    }\n    \n    // Chest crest\n    color(\"darkgoldenrod\") {\n        translate([0, -12, 25])\n            difference() {\n                sphere(d=10, $fn=32);\n                translate([0, 0, -2])\n                    cube([15, 15, 5], center=true);\n            }\n    }\n    \n    // Leg markings\n    color(\"darkgoldenrod\") {\n        for(i = [-1, 1]) {\n            translate([i*12, -8, 15])\n                cylinder(h=8, d=14, $fn=16);\n            \n            translate([i*10, 15, 15])\n                cylinder(h=8, d=12, $fn=16);\n        }\n    }\n}\n\nmodule tail() {\n    // Main tail segment\n    difference() {\n        union() {\n            // Base of tail\n            cylinder(h=30, d1=12, d2=8, $fn=16);\n            translate([0, 0, 30])\n                sphere(d=8, $fn=16);\n            \n            // Curl segment\n            translate([0, 8, 35])\n                rotate([90, 0, 0])\n                torus(10, 3, 90, 180);\n            \n            // Tip\n            translate([0, 18, 45])\n                sphere(d=6, $fn=16);\n        }\n        \n        // Hollow out tail\n        translate([0, 0, -5])\n            cylinder(h=40, d=6, $fn=16);\n    }\n}\n\nmodule torus(r1, r2, a1, a2) {\n    rotate_extrude(angle=a2-a1, $fn=32)\n        translate([r1, 0, 0])\n            circle(r=r2, $fn=16);\n}\n\n// Scale for 3D printing\nscale(0.8) ninetales();",
    "renders": true
  },
  {
    "pokemon": "jigglypuff",
    "openscad_code": "// Realistic Jigglypuff OpenSCAD Model\n// Medium complexity, 3D-printable\n\n$fn = 64;\n\nmodule jigglypuff() {\n    // Main body - sphere with slight squash\n    color(\"lightpink\") {\n        translate([0, 0, 30]) scale([1, 1, 0.9]) sphere(d=60);\n    }\n    \n    // Belly patch\n    color(\"pink\") {\n        translate([0, 0, 10]) scale([0.8, 0.7, 0.3]) sphere(d=60);\n    }\n    \n    // Ears\n    module ear(x) {\n        translate([x, 0, 55]) {\n            rotate([0, -20 * x/30, 0]) {\n                // Ear base\n                color(\"lightpink\") cylinder(h=20, d1=15, d2=12);\n                translate([0, 0, 20]) rotate([10, 0, 0]) {\n                    // Ear tip\n                    color(\"black\") sphere(d=12);\n                }\n            }\n        }\n    }\n    \n    ear(25);\n    ear(-25);\n    \n    // Eyes\n    module eye(x) {\n        translate([x, 20, 45]) {\n            // Eye white\n            color(\"white\") sphere(d=20);\n            translate([0, 0, 10]) {\n                // Pupil\n                color(\"green\") sphere(d=10);\n                translate([3, 3, 5]) {\n                    // Highlight\n                    color(\"white\") sphere(d=4);\n                }\n            }\n        }\n    }\n    \n    eye(15);\n    eye(-15);\n    \n    // Mouth\n    color(\"darkred\") {\n        translate([0, 28, 35]) rotate([90, 0, 0]) {\n            scale([1, 0.5, 1]) cylinder(h=1, d=15);\n        }\n    }\n    \n    // Arms\n    module arm(x, angle) {\n        translate([x, 30, 35]) {\n            rotate([0, 0, angle]) {\n                color(\"lightpink\") {\n                    // Upper arm\n                    cylinder(h=15, d1=12, d2=10);\n                    translate([0, 15, 0]) rotate([30, 0, 0]) {\n                        // Lower arm\n                        cylinder(h=12, d1=10, d2=8);\n                    }\n                }\n            }\n        }\n    }\n    \n    arm(30, -30);\n    arm(-30, 30);\n    \n    // Feet\n    module foot(x) {\n        translate([x, 0, 10]) {\n            color(\"lightpink\") {\n                // Foot\n                scale([1, 1.5, 0.5]) sphere(d=20);\n                // Toes\n                for(i = [-1:1]) {\n                    translate([i*5, 12, 0]) {\n                        color(\"pink\") sphere(d=5);\n                    }\n                }\n            }\n        }\n    }\n    \n    foot(20);\n    foot(-20);\n    \n    // Hair curl\n    color(\"lightpink\") {\n        translate([0, -30, 55]) rotate([90, 0, 0]) {\n            for(i = [0:5]) {\n                translate([cos(i*30)*5, sin(i*30)*5, i*3]) {\n                    sphere(d=6);\n                }\n            }\n        }\n    }\n}\n\njigglypuff();",
    "renders": true
  },
  {
    "pokemon": "wigglytuff",
    "openscad_code": "// Wigglytuff Pokemon - Realistic Style, Medium Complexity\n\n// Colors\n$fa = 2;\n$fs = 0.5;\n\nmodule body() {\n    // Main round body\n    color(\"#FFB6C1\")\n    difference() {\n        sphere(r = 25);\n        // Flatten bottom\n        translate([0, 0, -25])\n        cube([50, 50, 25], center = true);\n    }\n}\n\nmodule ears() {\n    // Left ear\n    color(\"#FFB6C1\")\n    translate([-15, 20, 20]) {\n        rotate([0, -30, 0])\n        scale([0.7, 0.7, 3])\n        sphere(r = 10);\n        \n        // Ear tip\n        translate([0, 0, 30])\n        scale([0.5, 0.5, 0.8])\n        sphere(r = 10);\n    }\n    \n    // Right ear\n    color(\"#FFB6C1\")\n    translate([15, 20, 20]) {\n        rotate([0, -30, 0])\n        scale([0.7, 0.7, 3])\n        sphere(r = 10);\n        \n        // Ear tip\n        translate([0, 0, 30])\n        scale([0.5, 0.5, 0.8])\n        sphere(r = 10);\n    }\n}\n\nmodule eyes() {\n    // Left eye\n    color(\"white\")\n    translate([-10, 15, 15])\n    sphere(r = 5);\n    \n    color(\"black\")\n    translate([-10, 17, 17])\n    sphere(r = 2);\n    \n    // Right eye\n    color(\"white\")\n    translate([10, 15, 15])\n    sphere(r = 5);\n    \n    color(\"black\")\n    translate([10, 17, 17])\n    sphere(r = 2);\n}\n\nmodule mouth() {\n    // Small smile\n    color(\"#FF69B4\")\n    translate([0, 22, 10])\n    rotate([90, 0, 0])\n    cylinder(h = 1, r1 = 5, r2 = 3, center = true);\n}\n\nmodule arms() {\n    // Left arm\n    color(\"#FFB6C1\")\n    translate([-25, 0, -5]) {\n        rotate([0, 0, 30])\n        scale([0.5, 0.5, 1.5])\n        sphere(r = 8);\n    }\n    \n    // Right arm\n    color(\"#FFB6C1\")\n    translate([25, 0, -5]) {\n        rotate([0, 0, -30])\n        scale([0.5, 0.5, 1.5])\n        sphere(r = 8);\n    }\n}\n\nmodule feet() {\n    // Left foot\n    color(\"#FFB6C1\")\n    translate([-10, -20, -24]) {\n        cube([8, 12, 5], center = true);\n    }\n    \n    // Right foot\n    color(\"#FFB6C1\")\n    translate([10, -20, -24]) {\n        cube([8, 12, 5], center = true);\n    }\n}\n\nmodule tail() {\n    // Fluffy tail\n    color(\"#FFB6C1\")\n    translate([0, -28, -10]) {\n        rotate([0, 0, 0])\n        scale([1.2, 1.5, 0.8])\n        sphere(r = 12);\n    }\n}\n\nmodule whiskers() {\n    // Left whiskers\n    for(i = [-1:1]) {\n        color(\"white\")\n        translate([-20, 10 + i*3, 10])\n        rotate([0, 90, 0])\n        cylinder(h = 15, r = 0.5);\n    }\n    \n    // Right whiskers\n    for(i = [-1:1]) {\n        color(\"white\")\n        translate([20, 10 + i*3, 10])\n        rotate([0, 90, 0])\n        cylinder(h = 15, r = 0.5);\n    }\n}\n\n// Assemble the model\nunion() {\n    body();\n    ears();\n    eyes();\n    mouth();\n    arms();\n    feet();\n    tail();\n    whiskers();\n}",
    "renders": true
  },
  {
    "pokemon": "zubat",
    "openscad_code": "// Realistic Zubat OpenSCAD Model\n// Medium complexity, 3D printable\n\n// Overall scale factor\nscale_factor = 0.4;\n\n// Main color definitions\ncolor_body = [0.2, 0.2, 0.25];\ncolor_wings = [0.7, 0.7, 0.9];\ncolor_ears = [0.8, 0.3, 0.3];\ncolor_eyes = [0.9, 0.1, 0.1];\ncolor_teeth = [0.95, 0.95, 0.9];\n\nmodule zubat_body() {\n    color(color_body)\n    union() {\n        // Main body sphere\n        translate([0, 0, 0])\n            scale([1, 1.2, 0.8])\n            sphere(d=30 * scale_factor, $fn=32);\n        \n        // Bottom point\n        translate([0, 0, -12 * scale_factor])\n            rotate([0, 180, 0])\n            cylinder(h=15 * scale_factor, r1=8 * scale_factor, r2=0, $fn=16);\n    }\n}\n\nmodule zubat_wings() {\n    color(color_wings)\n    union() {\n        // Left wing\n        translate([-15 * scale_factor, 0, 5 * scale_factor])\n            rotate([0, 0, 30])\n            difference() {\n                // Wing membrane\n                scale([2.5, 1.5, 0.1])\n                    sphere(d=25 * scale_factor, $fn=32);\n                \n                // Wing holes\n                for(i = [0:2]) {\n                    translate([i * 8 * scale_factor - 8 * scale_factor, 0, -1 * scale_factor])\n                        scale([0.3, 0.4, 1])\n                        cylinder(h=3 * scale_factor, d=5 * scale_factor, $fn=8);\n                }\n            }\n        \n        // Right wing (mirrored)\n        mirror([1, 0, 0])\n            translate([-15 * scale_factor, 0, 5 * scale_factor])\n                rotate([0, 0, 30])\n                difference() {\n                    scale([2.5, 1.5, 0.1])\n                        sphere(d=25 * scale_factor, $fn=32);\n                    \n                    for(i = [0:2]) {\n                        translate([i * 8 * scale_factor - 8 * scale_factor, 0, -1 * scale_factor])\n                            scale([0.3, 0.4, 1])\n                            cylinder(h=3 * scale_factor, d=5 * scale_factor, $fn=8);\n                    }\n                }\n    }\n}\n\nmodule zubat_ears() {\n    color(color_ears)\n    union() {\n        // Left ear\n        translate([-8 * scale_factor, 12 * scale_factor, 8 * scale_factor])\n            rotate([0, -20, -45])\n            scale([0.3, 0.3, 2])\n            cylinder(h=20 * scale_factor, r1=5 * scale_factor, r2=2 * scale_factor, $fn=8);\n        \n        // Right ear\n        translate([8 * scale_factor, 12 * scale_factor, 8 * scale_factor])\n            rotate([0, -20, 45])\n            scale([0.3, 0.3, 2])\n            cylinder(h=20 * scale_factor, r1=5 * scale_factor, r2=2 * scale_factor, $fn=8);\n    }\n}\n\nmodule zubat_face() {\n    union() {\n        // Eyes\n        color(color_eyes)\n        union() {\n            // Left eye\n            translate([-5 * scale_factor, 8 * scale_factor, 10 * scale_factor])\n                sphere(d=6 * scale_factor, $fn=16);\n            \n            // Right eye\n            translate([5 * scale_factor, 8 * scale_factor, 10 * scale_factor])\n                sphere(d=6 * scale_factor, $fn=16);\n        }\n        \n        // Mouth with teeth\n        color(color_body)\n        translate([0, 5 * scale_factor, 8 * scale_factor])\n            rotate([90, 0, 0])\n            cylinder(h=8 * scale_factor, r1=4 * scale_factor, r2=2 * scale_factor, $fn=16);\n        \n        // Teeth\n        color(color_teeth)\n        for(i = [-1:1]) {\n            translate([i * 2 * scale_factor, 5 * scale_factor, 12 * scale_factor])\n                rotate([90, 0, 0])\n                cylinder(h=3 * scale_factor, r1=1 * scale_factor, r2=0.5 * scale_factor, $fn=8);\n        }\n    }\n}\n\nmodule zubat_feet() {\n    color(color_body)\n    union() {\n        // Left foot\n        translate([-5 * scale_factor, -5 * scale_factor, -10 * scale_factor])\n            rotate([0, 20, 0])\n            scale([0.5, 0.5, 1])\n            cylinder(h=8 * scale_factor, r1=3 * scale_factor, r2=2 * scale_factor, $fn=8);\n        \n        // Right foot\n        translate([5 * scale_factor, -5 * scale_factor, -10 * scale_factor])\n            rotate([0, -20, 0])\n            scale([0.5, 0.5, 1])\n            cylinder(h=8 * scale_factor, r1=3 * scale_factor, r2=2 * scale_factor, $fn=8);\n    }\n}\n\n// Assemble the complete Zubat\nunion() {\n    zubat_body();\n    zubat_wings();\n    zubat_ears();\n    zubat_face();\n    zubat_feet();\n}",
    "renders": true
  },
  {
    "pokemon": "golbat",
    "openscad_code": "// Golbat - Realistic style, medium complexity (OpenSCAD)\n\n// Dimensions in mm\nbody_r = 25;\nwing_span = 90;\near_len = 20;\nleg_len = 8;\neye_r = 6;\nmouth_w = 18;\nmouth_h = 14;\n\n// Colors\ncolor_purple = [0.4, 0.2, 0.6];\ncolor_blue = [0.2, 0.3, 0.7];\ncolor_red = [0.8, 0.1, 0.1];\ncolor_white = [0.9, 0.9, 0.9];\ncolor_black = [0.1, 0.1, 0.1];\n\nmodule golbat() {\n    union() {\n        // Main spherical body\n        color(color_purple)\n        translate([0, 0, body_r/2])\n        sphere(r = body_r, $fn = 32);\n\n        // Ears (two pointy cones)\n        color(color_purple)\n        union() {\n            // Left ear\n            translate([-body_r*0.5, 0, body_r*1.3])\n            rotate([0, -20, -30])\n            cylinder(h = ear_len, r1 = 5, r2 = 1, $fn = 8);\n            \n            // Right ear\n            translate([body_r*0.5, 0, body_r*1.3])\n            rotate([0, -20, 30])\n            cylinder(h = ear_len, r1 = 5, r2 = 1, $fn = 8);\n        }\n\n        // Wings (membranous with veins)\n        color(color_purple) {\n            // Left wing\n            translate([-body_r*0.8, 0, body_r*0.8])\n            rotate([0, 0, -20])\n            scale([1, 0.1, 1])\n            sphere(r = wing_span/2, $fn = 32);\n            \n            // Right wing\n            translate([body_r*0.8, 0, body_r*0.8])\n            rotate([0, 0, 20])\n            scale([1, 0.1, 1])\n            sphere(r = wing_span/2, $fn = 32);\n        }\n        \n        // Wing membrane details (veins)\n        color(color_blue) {\n            for(i = [-30:15:-60]) {\n                // Left wing veins\n                translate([-body_r*0.8, 0, body_r*0.8])\n                rotate([0, 0, i])\n                scale([1, 0.05, 0.8])\n                cylinder(h = wing_span/2, r1 = 0.5, r2 = 0.2, $fn = 4);\n                \n                // Right wing veins\n                translate([body_r*0.8, 0, body_r*0.8])\n                rotate([0, 0, -i])\n                scale([1, 0.05, 0.8])\n                cylinder(h = wing_span/2, r1 = 0.5, r2 = 0.2, $fn = 4);\n            }\n        }\n\n        // Eyes (large red with black pupils)\n        color(color_red)\n        union() {\n            translate([-body_r*0.5, -body_r*0.8, body_r*0.7])\n            sphere(r = eye_r, $fn = 16);\n            \n            translate([body_r*0.5, -body_r*0.8, body_r*0.7])\n            sphere(r = eye_r, $fn = 16);\n        }\n\n        // Pupils\n        color(color_black)\n        union() {\n            translate([-body_r*0.5, -body_r*0.9, body_r*0.75])\n            sphere(r = eye_r/2, $fn = 8);\n            \n            translate([body_r*0.5, -body_r*0.9, body_r*0.75])\n            sphere(r = eye_r/2, $fn = 8);\n        }\n\n        // Mouth (large fanged maw)\n        color(color_red)\n        difference() {\n            // Main mouth opening\n            translate([0, -body_r*0.9, body_r*0.3])\n            rotate([90, 0, 0])\n            cylinder(h = body_r*0.5, r1 = mouth_w/2, r2 = mouth_w/2, $fn = 16);\n            \n            // Hollow out mouth\n            translate([0, -body_r*1.1, body_r*0.3])\n            rotate([90, 0, 0])\n            cylinder(h = body_r*0.6, r1 = mouth_w/2-2, r2 = mouth_w/2-2, $fn = 16);\n        }\n\n        // Teeth (top and bottom fangs)\n        color(color_white)\n        union() {\n            // Top fangs\n            translate([-mouth_w/4, -body_r*1.1, body_r*0.4])\n            rotate([0, 30, 0])\n            cylinder(h = 8, r1 = 2, r2 = 0.5, $fn = 8);\n            \n            translate([mouth_w/4, -body_r*1.1, body_r*0.4])\n            rotate([0, 30, 0])\n            cylinder(h = 8, r1 = 2, r2 = 0.5, $fn = 8);\n            \n            // Bottom fangs\n            translate([-mouth_w/4, -body_r*1.1, body_r*0.2])\n            rotate([0, -30, 0])\n            cylinder(h = 8, r1 = 2, r2 = 0.5, $fn = 8);\n            \n            translate([mouth_w/4, -body_r*1.1, body_r*0.2])\n            rotate([0, -30, 0])\n            cylinder(h = 8, r1 = 2, r2 = 0.5, $fn = 8);\n        }\n\n        // Legs (small curved claws)\n        color(color_purple)\n        union() {\n            // Left leg\n            translate([-body_r*0.4, 0, 0])\n            rotate([0, 20, -20])\n            cylinder(h = leg_len, r1 = 2, r2 = 1, $fn = 8);\n            \n            // Right leg\n            translate([body_r*0.4, 0, 0])\n            rotate([0, 20, 20])\n            cylinder(h = leg_len, r1 = 2, r2 = 1, $fn = 8);\n        }\n\n        // Feet (small spheres at end of legs)\n        color(color_purple)\n        union() {\n            translate([-body_r*0.4, 0, -leg_len])\n            sphere(r = 2, $fn = 8);\n            \n            translate([body_r*0.4, 0, -leg_len])\n            sphere(r = 2, $fn = 8);\n        }\n\n        // Tail (small pointed tail)\n        color(color_purple)\n        translate([0, body_r*0.7, -body_r*0.3])\n        rotate([0, 0, 180])\n        cylinder(h = 10, r1 = 4, r2 = 1, $fn = 8);\n    }\n}\n\n// Generate the model\ngolbat();",
    "renders": true
  },
  {
    "pokemon": "oddish",
    "openscad_code": "// Oddish Pokemon - Medium Complexity Realistic Style\n// 3D printable model with proper wall thickness and no overhangs\n\n// Overall scale factor\nscale_factor = 0.8;\n\n// Main body color (blue-purple)\nbody_color = [0.3, 0.2, 0.8];\n\n// Leaf color\nleaf_color = [0.1, 0.6, 0.2];\n\n// Eye color\neye_color = [1, 1, 1];\n\n// Mouth color\nmouth_color = [0.2, 0.1, 0.1];\n\n// Main module\nmodule oddish() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        // Main spherical body\n        color(body_color) {\n            sphere(30, $fn=64);\n        }\n        \n        // Leaves on top\n        leaves();\n        \n        // Eyes\n        eyes();\n        \n        // Mouth\n        mouth();\n        \n        // Feet\n        feet();\n        \n        // Spots on body\n        body_spots();\n    }\n}\n\n// Leaves growing from top\nmodule leaves() {\n    color(leaf_color) {\n        for (i = [0:5]) {\n            rotate([0, 0, i * 60]) {\n                translate([0, 0, 28]) {\n                    rotate([30, 0, 0]) {\n                        scale([1, 0.4, 0.1]) {\n                            difference() {\n                                sphere(15, $fn=8);\n                                translate([0, -8, 0]) cube([30, 16, 30], center=true);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Central leaf cluster\n        translate([0, 0, 35]) {\n            cylinder(h=10, r1=8, r2=5, $fn=6);\n        }\n    }\n}\n\n// Eyes\nmodule eyes() {\n    color(eye_color) {\n        // Left eye\n        translate([-12, 20, 15]) {\n            sphere(6, $fn=32);\n            color([0, 0, 0]) {\n                translate([0, 0, 5]) {\n                    sphere(3, $fn=16);\n                }\n            }\n        }\n        \n        // Right eye\n        translate([12, 20, 15]) {\n            sphere(6, $fn=32);\n            color([0, 0, 0]) {\n                translate([0, 0, 5]) {\n                    sphere(3, $fn=16);\n                }\n            }\n        }\n    }\n}\n\n// Mouth\nmodule mouth() {\n    color(mouth_color) {\n        translate([0, 25, 5]) {\n            rotate([0, 0, 0]) {\n                scale([1, 0.5, 1]) {\n                    difference() {\n                        sphere(8, $fn=32);\n                        translate([0, -8, 0]) cube([16, 16, 16], center=true);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Feet\nmodule feet() {\n    color(body_color) {\n        // Front left foot\n        translate([-15, -20, -25]) {\n            rotate([15, 0, -15]) {\n                cylinder(h=15, r1=8, r2=6, $fn=16);\n            }\n        }\n        \n        // Front right foot\n        translate([15, -20, -25]) {\n            rotate([15, 0, 15]) {\n                cylinder(h=15, r1=8, r2=6, $fn=16);\n            }\n        }\n        \n        // Back foot\n        translate([0, -25, -25]) {\n            rotate([15, 0, 0]) {\n                cylinder(h=12, r1=10, r2=8, $fn=16);\n            }\n        }\n    }\n}\n\n// Spots on body\nmodule body_spots() {\n    color([0.4, 0.3, 0.9]) {\n        // Random spots on body\n        translate([20, 0, 10]) {\n            sphere(3, $fn=16);\n        }\n        translate([-15, 15, 5]) {\n            sphere(2.5, $fn=16);\n        }\n        translate([10, -15, 0]) {\n            sphere(2, $fn=16);\n        }\n        translate([-8, -10, 15]) {\n            sphere(2.5, $fn=16);\n        }\n        translate([15, 10, -10]) {\n            sphere(2, $fn=16);\n        }\n    }\n}\n\n// Render the complete model\noddish();",
    "renders": true
  },
  {
    "pokemon": "gloom",
    "openscad_code": "// Gloom Pokemon - Realistic Style, Medium Complexity\n// Based on the Grass/Poison-type Pokemon\n\n// Main colors\n$fa = 2;\n$fs = 0.5;\n\n// Parameters for sizing\nbody_height = 60;\nhead_radius = 20;\npetal_length = 25;\near_length = 15;\nmouth_width = 8;\n\n// Gloom's body\nmodule body() {\n    color([0.3, 0.6, 0.2])  // Dark green body\n    union() {\n        // Main bulbous body\n        sphere(r=body_height/2);\n        \n        // Belly bulge\n        translate([0, 0, -5])\n            scale([0.8, 0.8, 0.6])\n                sphere(r=body_height/2);\n    }\n}\n\n// Head with droopy face\nmodule head() {\n    color([0.3, 0.6, 0.2])\n    translate([0, 0, body_height/2 + 5])\n    union() {\n        // Main head sphere\n        sphere(r=head_radius);\n        \n        // Droopy jaw\n        translate([0, -head_radius/2, -head_radius/2])\n            scale([1.2, 0.8, 0.6])\n                sphere(r=head_radius * 0.7);\n    }\n}\n\n// Large petals around head\nmodule petals() {\n    color([0.7, 0.3, 0.7])  // Purple petals\n    for(i = [0:5]) {\n        rotate([0, 0, i * 60])\n        translate([0, head_radius + 5, body_height/2 + 5])\n        rotate([90, 0, 0])\n        scale([1, petal_length/5, petal_length/10])\n            cylinder(h=petal_length, r1=petal_length/4, r2=0.1);\n    }\n}\n\n// Droopy ears\nmodule ears() {\n    color([0.3, 0.6, 0.2])\n    union() {\n        // Left ear\n        translate([-head_radius/2, -head_radius/2, body_height/2 + head_radius])\n        rotate([30, 0, -20])\n        scale([0.4, 0.4, 2])\n            cylinder(h=ear_length, r1=ear_length/2, r2=0.1);\n        \n        // Right ear\n        translate([head_radius/2, -head_radius/2, body_height/2 + head_radius])\n        rotate([30, 0, 20])\n        scale([0.4, 0.4, 2])\n            cylinder(h=ear_length, r1=ear_length/2, r2=0.1);\n    }\n}\n\n// Eyes\nmodule eyes() {\n    color([0.1, 0.1, 0.1])\n    union() {\n        // Left eye\n        translate([-head_radius/3, -head_radius/3, body_height/2 + head_radius/2])\n        scale([1, 1.5, 0.5])\n            sphere(r=3);\n        \n        // Right eye\n        translate([head_radius/3, -head_radius/3, body_height/2 + head_radius/2])\n        scale([1, 1.5, 0.5])\n            sphere(r=3);\n    }\n}\n\n// Drooling mouth\nmodule mouth() {\n    color([0.8, 0.2, 0.8])  // Purple inside\n    translate([0, -head_radius/1.5, body_height/2])\n    union() {\n        // Mouth opening\n        scale([mouth_width, mouth_width/2, 2])\n            sphere(r=3);\n        \n        // Drool drops\n        for(i = [0:2]) {\n            translate([i*3 - 3, -mouth_width - 5 - i*3, -i*2])\n            sphere(r=2 - i*0.5);\n        }\n    }\n}\n\n// Root feet\nmodule feet() {\n    color([0.4, 0.5, 0.2])\n    union() {\n        // Front left root\n        translate([-body_height/3, body_height/3, -body_height/2])\n        rotate([10, 0, -10])\n        cylinder(h=15, r1=5, r2=3);\n        \n        // Front right root\n        translate([body_height/3, body_height/3, -body_height/2])\n        rotate([10, 0, 10])\n        cylinder(h=15, r1=5, r2=3);\n        \n        // Back root\n        translate([0, -body_height/3, -body_height/2])\n        rotate([5, 0, 0])\n        cylinder(h=10, r1=5, r2=3);\n    }\n}\n\n// Poison spots on body\nmodule poison_spots() {\n    color([0.8, 0.4, 0.8, 0.7])  // Semi-transparent purple\n    for(i = [0:7]) {\n        rotate([0, 0, i * 45])\n        translate([body_height/3 * cos(i*45), body_height/3 * sin(i*45), 0])\n        scale([1, 1, 0.5])\n            sphere(r=3);\n    }\n}\n\n// Main assembly\nunion() {\n    body();\n    head();\n    petals();\n    ears();\n    eyes();\n    mouth();\n    feet();\n    poison_spots();\n}",
    "renders": true
  },
  {
    "pokemon": "vileplume",
    "openscad_code": "// Vileplume 3D model - OpenSCAD\n// Realistic style, medium complexity, 3D printable\n\n$fn = 64;\n\nmodule vileplume() {\n    // Main body - blue sphere\n    color(\"dodgerblue\")\n    translate([0, 0, 15])\n    scale([1.2, 1, 1])\n    sphere(r=15);\n    \n    // Head - lighter blue sphere\n    color(\"deepskyblue\")\n    translate([0, 0, 35])\n    sphere(r=12);\n    \n    // Large petals - red with white spots\n    module petal(radius, height, angle) {\n        rotate([0, 0, angle])\n        translate([0, radius/2, 40])\n        rotate([90, 0, 0])\n        scale([1.2, 0.3, 1])\n        cylinder(h=height, r1=radius, r2=radius*0.8);\n    }\n    \n    // Create 5 main petals\n    for(i = [0:72:360]) {\n        color(\"red\")\n        petal(18, 25, i);\n        \n        // White spots on petals\n        color(\"white\")\n        for(j = [0.4, 0.7]) {\n            translate([\n                15*cos(i)*j, \n                15*sin(i)*j, \n                45 + j*5\n            ])\n            sphere(r=1.5);\n        }\n    }\n    \n    // Smaller inner petals - yellow\n    module inner_petal(angle) {\n        rotate([0, 0, angle])\n        translate([0, 8, 42])\n        rotate([90, 0, 0])\n        scale([0.7, 0.2, 1])\n        cylinder(h=12, r1=8, r2=6);\n    }\n    \n    for(i = [36:72:360]) {\n        color(\"gold\")\n        inner_petal(i);\n    }\n    \n    // Eyes - large oval shape\n    module eye(x_offset) {\n        color(\"black\")\n        translate([x_offset, 8, 38])\n        scale([1, 1.5, 0.5])\n        sphere(r=3);\n        \n        // White highlight\n        color(\"white\")\n        translate([x_offset+1, 9, 39.5])\n        sphere(r=1);\n    }\n    \n    eye(-4);\n    eye(4);\n    \n    // Mouth - small beak-like shape\n    color(\"darkred\")\n    translate([0, 6, 32])\n    rotate([90, 0, 0])\n    cylinder(h=3, r1=2, r2=1);\n    \n    // Arms - short stubby arms\n    module arm(x_offset) {\n        color(\"dodgerblue\")\n        translate([x_offset, 12, 25])\n        rotate([0, 0, x_offset > 0 ? -20 : 20])\n        scale([0.8, 0.8, 1.2])\n        sphere(r=6);\n    }\n    \n    arm(-12);\n    arm(12);\n    \n    // Legs - simple cylinders\n    module leg(x_offset) {\n        color(\"dodgerblue\")\n        translate([x_offset, 0, 8])\n        cylinder(h=15, r1=4, r2=3);\n        \n        // Feet\n        color(\"dodgerblue\")\n        translate([x_offset, 0, 0])\n        rotate([0, 90, 0])\n        scale([1.5, 1, 0.8])\n        cylinder(h=8, r1=3, r2=3);\n    }\n    \n    leg(-7);\n    leg(7);\n    \n    // Small leaves at base\n    module leaf(angle) {\n        color(\"forestgreen\")\n        rotate([0, 0, angle])\n        translate([0, 15, 10])\n        rotate([90, 0, 30])\n        scale([0.3, 1, 0.1])\n        cylinder(h=12, r1=4, r2=2);\n    }\n    \n    for(i = [0:120:360]) {\n        leaf(i);\n    }\n    \n    // Center stigma - purple sphere\n    color(\"purple\")\n    translate([0, 0, 48])\n    sphere(r=3);\n}\n\n// Scale to printable size\nscale([0.8, 0.8, 0.8])\nvileplume();",
    "renders": true
  },
  {
    "pokemon": "paras",
    "openscad_code": "// Paras - Realistic Style (medium complexity)\n// 3D printable, ~70mm tall, no overhangs >45°\n\n// Colors\norange = [0.95, 0.45, 0.15];\nred = [0.9, 0.2, 0.1];\nwhite = [0.95, 0.95, 0.9];\nblack = [0.1, 0.1, 0.1];\nbrown = [0.6, 0.35, 0.2];\n\n// Body module\nmodule body() {\n    // Main body - oval shape\n    translate([0, 0, 8]) scale([1.2, 1, 1]) sphere(8);\n    \n    // Lower body segment\n    translate([0, 0, 2]) scale([1.3, 1.1, 0.8]) sphere(6);\n}\n\n// Leg module\nmodule leg(length, angle) {\n    rotate([0, 0, angle]) {\n        // Upper leg\n        color(brown) translate([0, 0, 6]) rotate([90, 0, 0]) cylinder(h=length*0.4, r=2, $fn=8);\n        // Lower leg\n        color(brown) translate([0, length*0.4, 2]) rotate([90, 0, 0]) cylinder(h=length*0.6, r=1.5, $fn=8);\n        // Foot\n        color(brown) translate([0, length, 0]) sphere(2);\n    }\n}\n\n// Eye module\nmodule eye() {\n    color(white) sphere(1.5);\n    color(black) translate([0.5, 0, 0.5]) sphere(0.8);\n}\n\n// Mushroom cap segment\nmodule cap_segment(radius, height, angle) {\n    rotate([0, 0, angle]) {\n        translate([radius, 0, height]) rotate([0, 90, 0]) \n            cylinder(h=radius*0.8, r1=radius*0.3, r2=0, $fn=8);\n    }\n}\n\n// Main mushroom cap\nmodule mushroom_cap() {\n    // Main cap - hemisphere\n    color(red) translate([0, 0, 20]) scale([1.5, 1.5, 0.8]) sphere(12);\n    \n    // Underside gills\n    for(i = [0:30:330]) {\n        color(white) cap_segment(10, 20, i);\n    }\n    \n    // Spots on cap\n    for(i = [45:90:315]) {\n        color(white) translate([8*cos(i), 8*sin(i), 26]) sphere(2);\n    }\n}\n\n// Main assembly\nunion() {\n    // Body\n    color(orange) body();\n    \n    // 6 legs - 3 per side\n    for(i = [0:60:120]) {\n        leg(12, i);\n        leg(12, -i);\n    }\n    \n    // Eyes\n    color(white) {\n        translate([4, 3, 14]) eye();\n        translate([4, -3, 14]) mirror([0,1,0]) eye();\n    }\n    \n    // Mouth (simple beak shape)\n    color(brown) translate([6, 0, 10]) rotate([0, 90, 0]) \n        scale([1, 0.5, 0.5]) cylinder(h=3, r1=1, r2=2, $fn=8);\n    \n    // Mushroom cap\n    mushroom_cap();\n    \n    // Stem connection\n    color(white) translate([0, 0, 16]) cylinder(h=4, r=3, $fn=16);\n}",
    "renders": true
  },
  {
    "pokemon": "parasect",
    "openscad_code": "// Parasect Pokemon - Realistic Medium Complexity\n// 3D printable with no overhangs\n\n$fn = 50;\n\n// Main body colors\nbody_color = \"#B8860B\";      // Dark goldenrod for body\nmushroom_color = \"#8B4513\";  // Saddle brown for mushroom\nspot_color = \"#FF6347\";      // Tomato red for spots\neye_color = \"#FF0000\";       // Bright red for eyes\nleg_color = \"#D2691E\";       // Chocolate for legs\n\n// Scale factor for 3D printing (60mm height)\nscale_factor = 60/25;\n\nmodule mushroom_cap() {\n    color(mushroom_color) {\n        // Main mushroom cap\n        translate([0, 0, 12])\n        scale([1.2, 1.2, 0.6])\n        sphere(r = 10);\n        \n        // Underside cap\n        translate([0, 0, 8])\n        scale([1.1, 1.1, 0.3])\n        sphere(r = 9);\n    }\n}\n\nmodule mushroom_spots() {\n    color(spot_color) {\n        // Circular spots on mushroom\n        for(i = [0:4]) {\n            rotate([0, 0, i*72])\n            translate([7, 0, 14])\n            scale([1, 1, 0.3])\n            sphere(r = 1.5);\n        }\n        \n        // Inner ring of spots\n        for(i = [0:3]) {\n            rotate([0, 0, i*90+45])\n            translate([4, 0, 14.5])\n            scale([1, 1, 0.3])\n            sphere(r = 1);\n        }\n    }\n}\n\nmodule body() {\n    color(body_color) {\n        // Main body segment\n        translate([0, 0, 2])\n        scale([1.2, 0.8, 1])\n        sphere(r = 5);\n        \n        // Abdomen\n        translate([0, 0, -2])\n        scale([0.8, 0.6, 1.2])\n        sphere(r = 4);\n        \n        // Thorax connection\n        translate([0, 0, 5])\n        scale([0.8, 0.6, 0.8])\n        sphere(r = 3.5);\n    }\n}\n\nmodule eyes() {\n    color(eye_color) {\n        // Large compound eyes\n        translate([3, 3.5, 4])\n        sphere(r = 1.5);\n        \n        translate([-3, 3.5, 4])\n        sphere(r = 1.5);\n        \n        // Eye highlights\n        color(\"white\") {\n            translate([3.3, 3.8, 4.7])\n            sphere(r = 0.4);\n            \n            translate([-2.7, 3.8, 4.7])\n            sphere(r = 0.4);\n        }\n    }\n}\n\nmodule mandibles() {\n    color(leg_color) {\n        // Left mandible\n        translate([1.5, 4, 3])\n        rotate([0, -30, -20])\n        cylinder(h = 2.5, r1 = 0.8, r2 = 0.4);\n        \n        // Right mandible\n        translate([-1.5, 4, 3])\n        rotate([0, -30, 20])\n        cylinder(h = 2.5, r1 = 0.8, r2 = 0.4);\n    }\n}\n\nmodule legs() {\n    color(leg_color) {\n        // Front pair\n        translate([2, 3, 0])\n        rotate([0, 0, -30])\n        cylinder(h = 6, r1 = 0.8, r2 = 0.5);\n        \n        translate([-2, 3, 0])\n        rotate([0, 0, 30])\n        cylinder(h = 6, r1 = 0.8, r2 = 0.5);\n        \n        // Middle pair\n        translate([3, 0, 0])\n        rotate([0, 0, -45])\n        cylinder(h = 5.5, r1 = 0.7, r2 = 0.5);\n        \n        translate([-3, 0, 0])\n        rotate([0, 0, 45])\n        cylinder(h = 5.5, r1 = 0.7, r2 = 0.5);\n        \n        // Rear pair\n        translate([2.5, -3, 0])\n        rotate([0, 0, -60])\n        cylinder(h = 5, r1 = 0.7, r2 = 0.5);\n        \n        translate([-2.5, -3, 0])\n        rotate([0, 0, 60])\n        cylinder(h = 5, r1 = 0.7, r2 = 0.5);\n    }\n}\n\nmodule claws() {\n    color(leg_color) {\n        // Front leg claws\n        for(i = [-1, 1]) {\n            translate([i*2, 3, -3.5])\n            rotate([0, 0, i*-30])\n            cylinder(h = 1.5, r1 = 0.5, r2 = 0.3);\n            \n            // Small toe claws\n            translate([i*2.5, 2.8, -3.7])\n            rotate([0, 0, i*-45])\n            cylinder(h = 1, r1 = 0.4, r2 = 0.2);\n        }\n    }\n}\n\n// Assemble the complete Parasect\nscale([scale_factor, scale_factor, scale_factor]) {\n    union() {\n        // Base support for 3D printing\n        cylinder(h = 0.5, r = 15, $fn = 6);\n        \n        // Main components\n        mushroom_cap();\n        mushroom_spots();\n        body();\n        eyes();\n        mandibles();\n        legs();\n        claws();\n    }\n}",
    "renders": true
  },
  {
    "pokemon": "venonat",
    "openscad_code": "// Venonat - Realistic Medium Complexity\n// 3D printable model with no overhangs\n\nmodule venonat_body() {\n    // Main spherical body\n    color(\"indigo\")\n    sphere(d = 35, $fn = 32);\n    \n    // Belly patch\n    translate([0, 0, -15])\n    color(\"lightblue\")\n    scale([1, 0.8, 0.3])\n    sphere(d = 25, $fn = 32);\n}\n\nmodule venonat_eyes() {\n    // Compound eyes with facets\n    for (angle = [0, 120, 240]) {\n        rotate([0, 0, angle])\n        translate([15, 0, 8]) {\n            // Main eye\n            color(\"red\")\n            sphere(d = 12, $fn = 16);\n            \n            // Pupil\n            translate([-6, 0, 0])\n            color(\"black\")\n            sphere(d = 6, $fn = 16);\n            \n            // Eye ridges\n            translate([0, 0, 6])\n            color(\"indigo\")\n            rotate([90, 0, 0])\n            cylinder(h = 3, r1 = 7, r2 = 4, $fn = 16);\n        }\n    }\n}\n\nmodule venonat_antennae() {\n    // Left antenna\n    translate([-8, 15, 15])\n    rotate([-30, 0, -20])\n    color(\"indigo\")\n    cylinder(h = 12, r = 1.5, $fn = 8);\n    \n    // Antenna tip\n    translate([-12, 18, 20])\n    color(\"lightblue\")\n    sphere(d = 4, $fn = 8);\n    \n    // Right antenna\n    translate([8, 15, 15])\n    rotate([-30, 0, 20])\n    color(\"indigo\")\n    cylinder(h = 12, r = 1.5, $fn = 8);\n    \n    // Antenna tip\n    translate([12, 18, 20])\n    color(\"lightblue\")\n    sphere(d = 4, $fn = 8);\n}\n\nmodule venonat_legs() {\n    // Generate 6 legs with joints\n    for (i = [1:6]) {\n        angle = i * 60;\n        rotate([0, 0, angle])\n        translate([12, 0, -15]) {\n            // Upper leg segment\n            rotate([45, 0, 0])\n            color(\"indigo\")\n            cylinder(h = 8, r = 2, $fn = 8);\n            \n            // Lower leg segment\n            translate([0, 0, -8])\n            rotate([90, 0, 0])\n            color(\"indigo\")\n            cylinder(h = 8, r = 1.5, $fn = 8);\n            \n            // Foot\n            translate([0, -8, 0])\n            color(\"lightblue\")\n            sphere(d = 3, $fn = 8);\n        }\n    }\n}\n\nmodule venonat_mouth() {\n    // Mouth opening\n    translate([0, 12, -5])\n    rotate([90, 0, 0])\n    color(\"black\")\n    linear_extrude(height = 2)\n    scale([1, 0.5])\n    circle(d = 5, $fn = 16);\n    \n    // Teeth\n    for (i = [-1, 1]) {\n        translate([i * 2, 12, -4])\n        color(\"white\")\n        rotate([90, 0, 0])\n        cylinder(h = 2, r1 = 1, r2 = 0, $fn = 8);\n    }\n}\n\nmodule venonat_fur_pattern() {\n    // Fur tufts on body\n    for (angle = [0:60:300]) {\n        rotate([0, 0, angle])\n        translate([10, 0, 5]) {\n            color(\"lightblue\")\n            scale([0.5, 0.5, 1])\n            sphere(d = 4, $fn = 8);\n        }\n    }\n    \n    // Back pattern\n    translate([0, -10, 10])\n    color(\"lightblue\")\n    scale([1.5, 1, 0.5])\n    sphere(d = 8, $fn = 16);\n}\n\n// Assemble the complete Venonat\nunion() {\n    venonat_body();\n    venonat_eyes();\n    venonat_antennae();\n    venonat_legs();\n    venonat_mouth();\n    venonat_fur_pattern();\n}",
    "renders": true
  },
  {
    "pokemon": "venomoth",
    "openscad_code": "// Venomoth Pokemon - Realistic Style, Medium Complexity\n// 3D printable model with proper wall thickness and no overhangs\n\n// Main colors\nbody_color = \"purple\";\nwing_color = \"darkblue\";\neye_color = \"red\";\naccent_color = \"pink\";\n\n// Scale factor for 3D printing (80mm wingspan)\nscale_factor = 0.8;\n\nmodule venomoth() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        \n        // Body segments\n        color(body_color) {\n            // Thorax (main body)\n            translate([0, 0, 5]) {\n                sphere(r=10, $fn=32);\n            }\n            \n            // Abdomen (tail section)\n            translate([0, -15, 3]) {\n                scale([0.8, 1.5, 0.6]) {\n                    sphere(r=10, $fn=32);\n                }\n            }\n            \n            // Head\n            translate([0, 12, 8]) {\n                scale([1.2, 1, 0.8]) {\n                    sphere(r=8, $fn=32);\n                }\n            }\n        }\n        \n        // Wings (4 wings total)\n        color(wing_color) {\n            // Upper wings\n            for(side = [-1, 1]) {\n                translate([side * 15, 0, 12]) {\n                    rotate([0, 0, side * 20]) {\n                        rotate([0, 90, 0]) {\n                            scale([1, 2.5, 0.1]) {\n                                cylinder(h=20, r=8, $fn=32);\n                            }\n                        }\n                    }\n                }\n            }\n            \n            // Lower wings\n            for(side = [-1, 1]) {\n                translate([side * 12, -5, 8]) {\n                    rotate([0, 0, side * 15]) {\n                        rotate([0, 90, 0]) {\n                            scale([0.8, 2, 0.08]) {\n                                cylinder(h=18, r=7, $fn=32);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Wing patterns (dots)\n        color(accent_color) {\n            for(side = [-1, 1]) {\n                translate([side * 15, 5, 12]) {\n                    rotate([0, 0, side * 20]) {\n                        for(i = [0:3]) {\n                            for(j = [0:2]) {\n                                translate([side * (i*3 - 4), j*4 - 4, 0.5]) {\n                                    sphere(r=0.8, $fn=16);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Antennae\n        color(body_color) {\n            for(side = [-1, 1]) {\n                translate([side * 5, 18, 12]) {\n                    rotate([30, 0, side * 20]) {\n                        cylinder(h=15, r=0.8, $fn=16);\n                    }\n                    translate([0, 15, 0]) {\n                        sphere(r=1.5, $fn=16);\n                    }\n                }\n            }\n        }\n        \n        // Eyes\n        color(eye_color) {\n            for(side = [-1, 1]) {\n                translate([side * 4, 16, 10]) {\n                    scale([1.2, 1, 0.5]) {\n                        sphere(r=3, $fn=16);\n                    }\n                }\n            }\n        }\n        \n        // Legs (6 legs)\n        color(body_color) {\n            for(i = [0:2]) {\n                angle = i * 120;\n                for(side = [-1, 1]) {\n                    rotate([0, 0, angle]) {\n                        translate([side * 8, 5 - i*5, 0]) {\n                            rotate([60, 0, 0]) {\n                                cylinder(h=12, r=1, $fn=16);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Body markings\n        color(accent_color) {\n            translate([0, 8, 14]) {\n                scale([2, 1.5, 0.2]) {\n                    sphere(r=3, $fn=16);\n                }\n            }\n            \n            translate([0, -5, 10]) {\n                scale([1.5, 2, 0.2]) {\n                    sphere(r=2.5, $fn=16);\n                }\n            }\n        }\n    }\n}\n\n// Generate the model\nvenomoth();",
    "renders": true
  },
  {
    "pokemon": "diglett",
    "openscad_code": "// Diglett - Realistic Style, Medium Complexity\n// Dimensions: ~70mm height for 3D printing\n\n// Constants\nmodule_size = 1; // Scale factor for easy resizing\nbody_height = 70 * module_size;\nbody_radius = 35 * module_size;\nhead_radius = 40 * module_size;\nnose_length = 15 * module_size;\nnose_radius = 8 * module_size;\neye_size = 6 * module_size;\nmouth_width = 20 * module_size;\nmouth_height = 8 * module_size;\nstone_size = 12 * module_size;\nearth_base_height = 10 * module_size;\n\n// Color definitions\ncolor_body = \"#8B4513\";\ncolor_nose = \"#D2691E\";\ncolor_eyes = \"#FF0000\";\ncolor_stones = \"#696969\";\ncolor_earth = \"#654321\";\n\n// Main module\nmodule diglett() {\n    // Earth base\n    color(color_earth)\n    difference() {\n        cylinder(h=earth_base_height, r1=body_radius*1.5, r2=body_radius*1.4, $fn=32);\n        // Hollow base for 3D printing\n        cylinder(h=earth_base_height+1, r1=body_radius*1.4, r2=body_radius*1.3, $fn=32);\n    }\n    \n    // Main body with realistic curves\n    color(color_body)\n    union() {\n        // Upper rounded head\n        translate([0, 0, earth_base_height + body_height/3])\n        sphere(r=head_radius, $fn=64);\n        \n        // Tapering body\n        color(color_body)\n        hull() {\n            translate([0, 0, earth_base_height])\n            sphere(r=body_radius*0.9, $fn=32);\n            \n            translate([0, 0, earth_base_height + body_height/2])\n            sphere(r=body_radius*0.7, $fn=32);\n            \n            translate([0, 0, earth_base_height + body_height])\n            sphere(r=body_radius*0.3, $fn=32);\n        }\n        \n        // Large nose\n        color(color_nose)\n        translate([0, -head_radius*0.8, earth_base_height + body_height/2])\n        rotate([20, 0, 0])\n        cylinder(h=nose_length, r1=nose_radius, r2=nose_radius*0.6, $fn=32);\n        \n        // Eyes\n        color(color_eyes)\n        for(x = [-1, 1]) {\n            translate([x * head_radius/2, -head_radius*0.6, earth_base_height + body_height/1.5])\n            sphere(r=eye_size, $fn=16);\n        }\n        \n        // Mouth\n        color(\"#2F1B14\")\n        translate([0, -head_radius*0.4, earth_base_height + body_height/1.8])\n        difference() {\n            cube([mouth_width, mouth_height*2, 5], center=true);\n            translate([0, 0, 2])\n            cube([mouth_width*0.8, mouth_height, 6], center=true);\n        }\n        \n        // Rocks/stones on head for realism\n        color(color_stones)\n        for(i = [0:5]) {\n            rotate([0, 0, i*60 + 30])\n            translate([head_radius*0.9, 0, earth_base_height + body_height*0.9])\n            scale([1, 0.7, 0.5])\n            sphere(r=stone_size, $fn=8);\n        }\n        \n        // Whisker-like markings\n        color(\"#4A2C17\")\n        for(angle = [-45, 45]) {\n            rotate([0, 0, angle])\n            translate([head_radius*0.6, -head_radius*0.5, earth_base_height + body_height/1.4])\n            scale([0.2, 0.2, 1])\n            cylinder(h=head_radius*0.3, r=eye_size/2, $fn=8);\n        }\n        \n        // Body texture grooves\n        for(level = [1:3]) {\n            color(\"#654321\")\n            translate([0, 0, earth_base_height + level*body_height/4])\n            rotate_extrude($fn=64)\n            translate([body_radius*0.8 - level*5, 0, 0])\n            circle(r=1.5, $fn=8);\n        }\n    }\n}\n\n// Render the model\ndiglett();",
    "renders": true
  },
  {
    "pokemon": "dugtrio",
    "openscad_code": "// Dugtrio in realistic style - medium complexity\n// Three brown mole heads with large pink noses and whiskers\n\nmodule dugtrio_head(scale_factor=1, height=0) {\n    color(\"burlywood3\")\n    \n    // Main head shape - elongated sphere\n    translate([0, 0, height + 15*scale_factor])\n    scale([1.2*scale_factor, 1*scale_factor, 1.3*scale_factor])\n    sphere(10);\n    \n    // Nose - large pink sphere\n    color(\"hotpink\")\n    translate([0, 12*scale_factor, height + 15*scale_factor])\n    sphere(5*scale_factor);\n    \n    // Eyes - black spheres with white highlights\n    color(\"black\")\n    translate([-5*scale_factor, 8*scale_factor, height + 20*scale_factor])\n    sphere(2*scale_factor);\n    \n    color(\"black\")\n    translate([5*scale_factor, 8*scale_factor, height + 20*scale_factor])\n    sphere(2*scale_factor);\n    \n    color(\"white\")\n    translate([-4.5*scale_factor, 8.5*scale_factor, height + 21*scale_factor])\n    sphere(0.8*scale_factor);\n    \n    color(\"white\")\n    translate([5.5*scale_factor, 8.5*scale_factor, height + 21*scale_factor])\n    sphere(0.8*scale_factor);\n    \n    // Whiskers - thin cylinders\n    for(angle = [0:120:240]) {\n        rotate([0, 0, angle])\n        translate([8*scale_factor, 0, height + 15*scale_factor])\n        rotate([0, 90, 0])\n        cylinder(6*scale_factor, 0.5, 0.5);\n    }\n    \n    // Dirt mound base - cone with rounded top\n    color(\"saddlebrown\")\n    translate([0, 0, height])\n    cylinder(15*scale_factor, 12*scale_factor, 6*scale_factor);\n    \n    translate([0, 0, height + 15*scale_factor])\n    sphere(6*scale_factor);\n    \n    // Cracks on dirt mound\n    color(\"saddlebrown\")\n    for(i = [0:2]) {\n        rotate([0, 0, i*120])\n        translate([0, 6*scale_factor, height + 7*scale_factor])\n        cube([1*scale_factor, 6*scale_factor, 14*scale_factor]);\n    }\n}\n\n// Main assembly\ntranslate([0, 0, 0]) {\n    // Left head - slightly smaller and rotated\n    dugtrio_head(0.9, 0);\n    \n    // Center head - largest\n    translate([-25, 0, 5])\n    dugtrio_head(1.1, 5);\n    \n    // Right head - rotated and scaled\n    translate([25, -5, 2])\n    rotate([0, 0, -10])\n    dugtrio_head(0.95, 2);\n}\n\n// Ground base plate for stability\ncolor(\"saddlebrown\")\ntranslate([0, 0, -2])\ncylinder(2, 40, 40);",
    "renders": true
  },
  {
    "pokemon": "meowth",
    "openscad_code": "// Meowth - Realistic Style, Medium Complexity\n// Scale: ~80mm tall\n\n// Color definitions\ngold = [255/255, 196/255, 69/255];\ncream = [255/255, 218/255, 185/255];\nbrown = [160/255, 82/255, 45/255];\nblack = [0, 0, 0];\npink = [255/255, 192/255, 203/255];\n\n// Main body module\nmodule meowth() {\n    // Body\n    color(gold)\n    union() {\n        // Torso\n        translate([0, 0, 15])\n        scale([1.2, 0.8, 1.1])\n        sphere(d=40, $fn=32);\n        \n        // Head\n        translate([0, 0, 45])\n        sphere(d=35, $fn=32);\n        \n        // Snout\n        color(cream)\n        translate([0, 15, 45])\n        scale([0.8, 1.2, 0.9])\n        sphere(d=20, $fn=32);\n        \n        // Ears\n        color(gold)\n        for(side = [-1, 1]) {\n            translate([side * 15, 0, 55])\n            rotate([0, side * 20, 0])\n            scale([0.3, 1, 1.5])\n            cylinder(d1=15, d2=5, h=25, $fn=8);\n            \n            // Inner ear\n            color(pink)\n            translate([side * 15, 0, 55])\n            rotate([0, side * 20, 0])\n            scale([0.2, 0.8, 1.2])\n            cylinder(d1=10, d2=3, h=20, $fn=8);\n        }\n        \n        // Legs\n        for(side = [-1, 1]) {\n            color(gold)\n            translate([side * 15, 0, 0])\n            scale([0.6, 0.6, 1])\n            cylinder(d=12, h=18, $fn=16);\n            \n            color(cream)\n            translate([side * 15, 0, -2])\n            scale([0.7, 0.7, 0.5])\n            sphere(d=12, $fn=16);\n        }\n        \n        // Arms\n        for(side = [-1, 1]) {\n            color(gold)\n            translate([side * 20, 0, 25])\n            rotate([90, 0, side * 30])\n            cylinder(d=8, h=20, $fn=16);\n            \n            color(cream)\n            translate([side * 20, 0, 25])\n            rotate([90, 0, side * 30])\n            translate([0, 0, 20])\n            sphere(d=10, $fn=16);\n        }\n        \n        // Tail\n        color(gold)\n        translate([-25, 0, 30])\n        rotate([0, 90, 45])\n        scale([0.5, 0.5, 1])\n        cylinder(d=8, h=35, $fn=16);\n        \n        // Tail tip\n        translate([-40, 0, 30])\n        rotate([0, 90, 45])\n        color(brown)\n        sphere(d=12, $fn=16);\n        \n        // Coin on forehead\n        color([220/255, 220/255, 220/255])\n        translate([0, 18, 55])\n        rotate([90, 0, 0])\n        cylinder(d=12, h=2, $fn=32);\n        \n        // Eyes\n        color(black)\n        for(side = [-1, 1]) {\n            translate([side * 8, 15, 50])\n            sphere(d=4, $fn=16);\n            \n            // Eyebrow markings\n            color(brown)\n            translate([side * 8, 12, 53])\n            rotate([30, 0, 0])\n            scale([0.2, 0.05, 0.8])\n            cube([15, 1, 3], center=true);\n        }\n        \n        // Nose\n        color(black)\n        translate([0, 20, 47])\n        sphere(d=2, $fn=16);\n        \n        // Mouth\n        color(black)\n        translate([0, 22, 45])\n        rotate([90, 0, 0])\n        cylinder(d1=8, d2=0, h=3, $fn=16);\n        \n        // Whiskers\n        color(black)\n        for(side = [-1, 1]) {\n            for(angle = [-20, 0, 20]) {\n                translate([side * 12, 18, 47])\n                rotate([0, 90, side * angle])\n                cylinder(d=0.5, h=15, $fn=8);\n            }\n        }\n        \n        // Feet pads\n        color(pink)\n        for(side = [-1, 1]) {\n            translate([side * 15, 0, -2])\n            sphere(d=6, $fn=16);\n        }\n        \n        // Hand pads\n        for(side = [-1, 1]) {\n            translate([side * 20, 0, 25])\n            rotate([90, 0, side * 30])\n            translate([0, 0, 20])\n            sphere(d=6, $fn=16);\n        }\n    }\n}\n\n// Generate the model\nmeowth();",
    "renders": true
  },
  {
    "pokemon": "persian",
    "openscad_code": "// Persian Pokemon - Realistic Medium Complexity\n$fn = 32;\n\n// Main body color\ncolor(\"gold\") \n\n// Main body assembly\nunion() {\n    // Torso\n    translate([0, 0, 15]) \n    scale([1.2, 0.8, 1]) \n    sphere(20);\n\n    // Head\n    translate([0, -25, 35]) \n    sphere(15);\n\n    // Snout\n    translate([0, -35, 30]) \n    scale([0.7, 1.3, 0.7]) \n    sphere(10);\n\n    // Ears (left and right)\n    for(x = [-1, 1]) {\n        translate([x * 12, -20, 45]) \n        rotate([0, x * 10, 0]) \n        scale([0.3, 1.5, 0.8]) \n        sphere(10);\n    }\n\n    // Gem on forehead\n    color(\"red\") \n    translate([0, -25, 50]) \n    sphere(3);\n\n    // Legs\n    for(x = [-1, 1]) {\n        for(z = [0, 1]) {\n            translate([x * 15, z * 20 - 10, 0]) \n            cylinder(h = 15, r1 = 6, r2 = 4);\n            \n            // Paws\n            translate([x * 15, z * 20 - 10, 0]) \n            sphere(5);\n        }\n    }\n\n    // Tail\n    color(\"brown\") {\n        // Tail base\n        translate([0, 25, 25]) \n        rotate([0, 45, 0]) \n        cylinder(h = 30, r1 = 8, r2 = 6);\n        \n        // Tail curl\n        translate([0, 35, 35]) \n        rotate([0, 90, 0]) \n        rotate([0, 0, 90]) \n        for(i = [0:9]) {\n            rotate([0, 0, i * 30]) \n            translate([10, 0, 0]) \n            sphere(4);\n        }\n    }\n\n    // Eyes\n    color(\"black\") {\n        for(x = [-1, 1]) {\n            translate([x * 5, -30, 35]) \n            scale([1, 0.8, 0.5]) \n            sphere(3);\n            \n            // Eye highlights\n            color(\"white\") \n            translate([x * 5.5, -31, 36]) \n            sphere(1);\n        }\n    }\n\n    // Nose\n    color(\"black\") \n    translate([0, -38, 30]) \n    sphere(2);\n\n    // Whiskers\n    color(\"white\") {\n        for(x = [-1, 1]) {\n            for(angle = [30, 0, -30]) {\n                translate([x * 8, -35, 30]) \n                rotate([0, 0, x * angle]) \n                cylinder(h = 12, r = 0.5);\n            }\n        }\n    }\n\n    // Back ridges\n    color(\"brown\") \n    for(i = [0:4]) {\n        translate([0, 10 + i * 5, 30 - i * 2]) \n        scale([1.5, 1, 0.5]) \n        sphere(5);\n    }\n}",
    "renders": true
  },
  {
    "pokemon": "psyduck",
    "openscad_code": "// Psyduck - realistic style, medium complexity\n// Size: 60mm tall\n\ncolor(\"yellow\") \nunion() {\n    // Body - main torso\n    translate([0, 0, 15]) \n    scale([1, 0.8, 1.2]) \n    sphere(d=30);\n\n    // Belly\n    color(\"lightyellow\")\n    translate([0, -9, 10]) \n    scale([0.8, 0.3, 1]) \n    sphere(d=25);\n\n    // Head\n    color(\"yellow\")\n    translate([0, 0, 35]) \n    sphere(d=25);\n\n    // Bill\n    color(\"gold\")\n    translate([0, 12, 32]) \n    rotate([0, -15, 0])\n    scale([1, 1.5, 0.8])\n    cylinder(h=15, d1=12, d2=8);\n\n    // Eyes\n    module eye(x) {\n        color(\"white\")\n        translate([x, 8, 37]) \n        sphere(d=6);\n        \n        color(\"black\")\n        translate([x, 9, 38]) \n        sphere(d=3);\n    }\n    \n    eye(6);\n    eye(-6);\n\n    // Hair tuft\n    color(\"yellow\")\n    translate([0, -8, 47]) \n    rotate([-20, 0, 0])\n    cylinder(h=8, d1=6, d2=2);\n\n    // Arms\n    module arm(x) {\n        color(\"yellow\")\n        translate([x, 8, 20]) \n        rotate([0, 0, x > 0 ? -20 : 20])\n        scale([0.8, 0.8, 2])\n        sphere(d=8);\n        \n        color(\"yellow\")\n        translate([x*1.3, 15, 10]) \n        sphere(d=8);\n    }\n    \n    arm(12);\n    arm(-12);\n\n    // Legs\n    module leg(x) {\n        color(\"yellow\")\n        translate([x, 0, 0]) \n        scale([0.8, 0.8, 1.2])\n        sphere(d=10);\n        \n        color(\"yellow\")\n        translate([x*1.1, 0, -8]) \n        sphere(d=12);\n    }\n    \n    leg(7);\n    leg(-7);\n\n    // Tail\n    color(\"yellow\")\n    translate([0, -18, 18]) \n    rotate([0, 0, 180])\n    scale([0.8, 1.2, 0.5])\n    cylinder(h=15, d1=12, d2=6);\n\n    // Feet webbing\n    color(\"gold\")\n    translate([9, 0, -14]) \n    rotate([90, 0, 0])\n    scale([1, 1.5, 0.3])\n    cylinder(h=8, d=12);\n    \n    translate([-9, 0, -14]) \n    rotate([90, 0, 0])\n    scale([1, 1.5, 0.3])\n    cylinder(h=8, d=12);\n\n    // Webbed fingers\n    for(i = [-1:1]) {\n        color(\"gold\")\n        translate([12 + i*3, 2, 0]) \n        rotate([0, 90, 0])\n        scale([0.3, 1, 1])\n        cylinder(h=5, d=2);\n        \n        translate([-12 + i*3, 2, 0]) \n        rotate([0, 90, 0])\n        scale([0.3, 1, 1])\n        cylinder(h=5, d=2);\n    }\n}",
    "renders": true
  },
  {
    "pokemon": "golduck",
    "openscad_code": "// Golduck OpenSCAD Model - Realistic Style, Medium Complexity\n// Total height: 80mm\n\n// Colors\ngolduck_blue = [0.2, 0.5, 0.8];\ngolduck_yellow = [1.0, 0.8, 0.2];\ngolduck_orange = [0.9, 0.5, 0.1];\ngolduck_white = [0.9, 0.9, 0.9];\n\n// Main module\nmodule golduck() {\n    // Body\n    color(golduck_blue)\n    union() {\n        // Torso\n        translate([0, 0, 30])\n        scale([1.2, 0.8, 1.5])\n        sphere(d=40);\n        \n        // Abdomen\n        translate([0, 0, 15])\n        scale([1, 0.7, 0.8])\n        sphere(d=35);\n    }\n    \n    // Head\n    color(golduck_blue)\n    translate([0, 0, 55])\n    scale([0.9, 0.9, 1.1])\n    sphere(d=35);\n    \n    // Beak\n    color(golduck_yellow)\n    translate([0, -18, 52])\n    scale([0.3, 1.2, 0.4])\n    rotate([30, 0, 0])\n    cylinder(h=25, d1=8, d2=4);\n    \n    // Eyes\n    for(x = [-8, 8]) {\n        color(golduck_white)\n        translate([x, -10, 58])\n        sphere(d=5);\n        \n        color([0, 0, 0])\n        translate([x, -12, 58])\n        sphere(d=3);\n    }\n    \n    // Crest\n    color(golduck_orange)\n    for(i = [0:4]) {\n        rotate([0, 0, i*15-30])\n        translate([0, 0, 75])\n        cylinder(h=12-i, d1=2, d2=0.5);\n    }\n    \n    // Arms\n    module arm(side) {\n        color(golduck_blue)\n        translate([side*15, 0, 40])\n        rotate([0, 0, side*15])\n        union() {\n            // Upper arm\n            cylinder(h=20, d=8);\n            \n            // Lower arm\n            translate([0, -10, -15])\n            rotate([45, 0, 0])\n            cylinder(h=15, d=6);\n            \n            // Webbed hand\n            translate([0, -15, -25])\n            scale([1.5, 1, 0.3])\n            sphere(d=12);\n        }\n    }\n    \n    arm(1);\n    arm(-1);\n    \n    // Legs\n    module leg(side) {\n        color(golduck_blue)\n        translate([side*8, 0, 20])\n        union() {\n            // Thigh\n            cylinder(h=15, d=10);\n            \n            // Foot\n            translate([0, -5, -10])\n            color(golduck_orange)\n            scale([1.2, 2, 0.5])\n            sphere(d=15);\n            \n            // Webbed toes\n            for(i = [-1, 0, 1]) {\n                translate([i*3, -12, -12])\n                rotate([0, 0, i*15])\n                scale([0.8, 1.2, 0.2])\n                sphere(d=5);\n            }\n        }\n    }\n    \n    leg(1);\n    leg(-1);\n    \n    // Tail\n    color(golduck_blue)\n    translate([0, 20, 25])\n    rotate([0, 45, 0])\n    union() {\n        // Tail base\n        cylinder(h=25, d=12);\n        \n        // Tail fin\n        translate([0, 0, -30])\n        rotate([0, 45, 0])\n        color(golduck_orange)\n        scale([2, 0.3, 1.5])\n        sphere(d=15);\n    }\n}\n\n// Render the model\ngolduck();",
    "renders": true
  },
  {
    "pokemon": "mankey",
    "openscad_code": "// Mankey - Realistic Style, Medium Complexity\n// Dimensions: ~80mm height\n\n// Colors\n$fn = 32;\n\nmodule mankey() {\n    // Main body\n    color([0.82, 0.41, 0.27]) {\n        // Torso\n        translate([0, 0, 15]) {\n            scale([1.2, 1, 1.5]) sphere(15);\n        }\n        \n        // Head\n        translate([0, 0, 45]) {\n            scale([1.1, 1, 1]) sphere(20);\n        }\n        \n        // Snout\n        translate([0, -20, 42]) {\n            rotate([30, 0, 0]) \n            scale([1, 1.2, 0.8]) sphere(8);\n        }\n    }\n    \n    // Arms\n    color([0.82, 0.41, 0.27]) {\n        // Left arm\n        translate([-20, 15, 35]) {\n            rotate([0, 0, 45])\n            cylinder(h = 20, r1 = 6, r2 = 4);\n            translate([0, 0, 20]) {\n                sphere(5);\n            }\n        }\n        \n        // Right arm\n        translate([20, 15, 35]) {\n            rotate([0, 0, -45])\n            cylinder(h = 20, r1 = 6, r2 = 4);\n            translate([0, 0, 20]) {\n                sphere(5);\n            }\n        }\n    }\n    \n    // Legs\n    color([0.82, 0.41, 0.27]) {\n        // Left leg\n        translate([-10, 0, 0]) {\n            cylinder(h = 25, r1 = 7, r2 = 5);\n            translate([0, 0, 25]) {\n                rotate([0, 90, 0])\n                scale([1, 1.5, 0.8]) sphere(8);\n            }\n        }\n        \n        // Right leg\n        translate([10, 0, 0]) {\n            cylinder(h = 25, r1 = 7, r2 = 5);\n            translate([0, 0, 25]) {\n                rotate([0, 90, 0])\n                scale([1, 1.5, 0.8]) sphere(8);\n            }\n        }\n    }\n    \n    // Ears\n    color([0.82, 0.41, 0.27]) {\n        // Left ear\n        translate([-15, 0, 55]) {\n            rotate([0, 30, -30])\n            scale([0.8, 2, 0.3]) sphere(10);\n        }\n        \n        // Right ear\n        translate([15, 0, 55]) {\n            rotate([0, 30, 30])\n            scale([0.8, 2, 0.3]) sphere(10);\n        }\n    }\n    \n    // Tail\n    color([0.82, 0.41, 0.27]) {\n        translate([0, 18, 25]) {\n            rotate([0, 40, 0])\n            scale([0.5, 0.5, 1]) cylinder(h = 30, r1 = 4, r2 = 2);\n        }\n    }\n    \n    // Eyes\n    color([0.1, 0.1, 0.1]) {\n        // Left eye\n        translate([-7, -25, 45]) {\n            scale([1, 1.5, 0.5]) sphere(3);\n        }\n        \n        // Right eye\n        translate([7, -25, 45]) {\n            scale([1, 1.5, 0.5]) sphere(3);\n        }\n    }\n    \n    // Nose\n    color([0.1, 0.1, 0.1]) {\n        translate([0, -28, 42]) {\n            sphere(2);\n        }\n    }\n    \n    // Mouth\n    color([0.5, 0.1, 0.1]) {\n        translate([0, -30, 38]) {\n            rotate([90, 0, 0])\n            cylinder(h = 0.5, r1 = 3, r2 = 2);\n        }\n    }\n    \n    // Paw pads\n    color([0.6, 0.3, 0.2]) {\n        // Hands\n        for(side = [-1, 1]) {\n            translate([side * 25, 15 + side * 7, 35]) {\n                sphere(2);\n            }\n        }\n        \n        // Feet\n        for(side = [-1, 1]) {\n            translate([side * 10, 5, 0]) {\n                sphere(3);\n            }\n        }\n    }\n    \n    // Belly swirl\n    color([0.7, 0.5, 0.4]) {\n        translate([0, 0, 25]) {\n            scale([0.8, 0.8, 0.1]) sphere(10);\n        }\n    }\n}\n\n// Render the model\nmankey();",
    "renders": true
  },
  {
    "pokemon": "primeape",
    "openscad_code": "// Primeape - Realistic Medium Complexity\n// 3D printable, no supports needed, ~75mm tall\n\n$fn = 24;\n\n// Main colors\ncolor_beige = [0.95,0.85,0.75];\ncolor_brown = [0.6,0.4,0.3];\ncolor_black = [0.1,0.1,0.1];\ncolor_white = [0.95,0.95,0.95];\ncolor_red = [0.8,0.2,0.2];\n\nmodule primeape() {\n    // Head\n    color(color_beige) {\n        // Main head sphere\n        translate([0,0,65]) sphere(15);\n        \n        // Snout protrusion\n        translate([0,-12,65]) scale([1.2,1.5,1]) sphere(8);\n    }\n    \n    // Ears (two curved cylinders)\n    color(color_brown) {\n        // Left ear\n        translate([-12,5,80]) rotate([0,0,-30]) cylinder(12,4,6);\n        \n        // Right ear  \n        translate([12,5,80]) rotate([0,0,30]) cylinder(12,4,6);\n    }\n    \n    // Eyes\n    color(color_white) {\n        translate([-5,-18,67]) sphere(3);\n        translate([5,-18,67]) sphere(3);\n    }\n    color(color_black) {\n        translate([-5,-20,68]) sphere(1.5);\n        translate([5,-20,68]) sphere(1.5);\n    }\n    \n    // Nose\n    color(color_black) translate([0,-20,63]) sphere(1.5);\n    \n    // Mouth (angry expression)\n    color(color_red) {\n        difference() {\n            translate([0,-22,60]) cube([8,2,2]);\n            translate([0,-21,61]) cube([10,2,2]);\n        }\n    }\n    \n    // Body\n    color(color_beige) {\n        // Torso\n        translate([0,0,35]) scale([1.3,1,1.2]) sphere(18);\n        \n        // Chest detail\n        translate([0,10,40]) scale([1.2,0.8,0.6]) sphere(8);\n    }\n    \n    // Arms\n    color(color_beige) {\n        // Left arm\n        translate([-20,5,45]) rotate([0,0,20]) {\n            cylinder(15,6,5);\n            translate([0,0,-7]) sphere(6);\n        }\n        \n        // Right arm\n        translate([20,5,45]) rotate([0,0,-20]) {\n            cylinder(15,6,5);\n            translate([0,0,-7]) sphere(6);\n        }\n    }\n    \n    // Fists\n    color(color_beige) {\n        translate([-25,5,30]) sphere(8);\n        translate([25,5,30]) sphere(8);\n    }\n    \n    // Legs\n    color(color_beige) {\n        // Left leg\n        translate([-10,-5,20]) cylinder(15,7,6);\n        \n        // Right leg\n        translate([10,-5,20]) cylinder(15,7,6);\n    }\n    \n    // Feet\n    color(color_beige) {\n        translate([-10,-5,5]) scale([1.5,2.5,1]) sphere(6);\n        translate([10,-5,5]) scale([1.5,2.5,1]) sphere(6);\n    }\n    \n    // Tail\n    color(color_brown) {\n        translate([0,15,25]) rotate([0,-20,0]) {\n            cylinder(20,5,3);\n            translate([0,20,0]) sphere(4);\n        }\n    }\n    \n    // Belt/swirl pattern\n    color(color_brown) {\n        translate([0,0,45]) rotate([90,0,0]) {\n            difference() {\n                cylinder(25,2,2);\n                translate([-25,0,0]) cube([50,50,5]);\n            }\n        }\n    }\n    \n    // Angry eyebrows\n    color(color_brown) {\n        translate([-8,-15,75]) rotate([0,0,30]) cube([10,2,2]);\n        translate([8,-15,75]) rotate([0,0,-30]) cube([10,2,2]);\n    }\n}\n\n// Generate the model\nprimeape();",
    "renders": true
  },
  {
    "pokemon": "growlithe",
    "openscad_code": "// Growlithe - Realistic Style, Medium Complexity\n// Designed for 3D printing with no overhangs\n\n// Overall scale factor for printing\nscale_factor = 0.5;\n\n// Main colors\ncolor_orange = [0.9, 0.4, 0.1];\ncolor_beige = [0.95, 0.85, 0.7];\ncolor_black = [0.1, 0.1, 0.1];\n\n// Head module\nmodule head() {\n    translate([0, 0, 35 * scale_factor]) {\n        // Main head sphere\n        color(color_orange) sphere(20 * scale_factor);\n        \n        // Muzzle\n        translate([0, -18 * scale_factor, -5 * scale_factor])\n            color(color_beige) scale([1.2, 1.5, 0.8])\n                sphere(15 * scale_factor);\n        \n        // Ears\n        for(side = [-1, 1]) {\n            translate([side * 18 * scale_factor, 0, 15 * scale_factor]) {\n                rotate([0, side * 15, 0])\n                    color(color_orange) scale([0.4, 1, 2])\n                        cylinder(h = 25 * scale_factor, r1 = 8 * scale_factor, r2 = 4 * scale_factor);\n            }\n        }\n        \n        // Eyes\n        for(side = [-1, 1]) {\n            translate([side * 10 * scale_factor, -20 * scale_factor, 5 * scale_factor]) {\n                color(color_black) sphere(4 * scale_factor);\n                translate([0, 2 * scale_factor, 2 * scale_factor])\n                    color([1, 1, 1]) sphere(1 * scale_factor);\n            }\n        }\n        \n        // Nose\n        translate([0, -25 * scale_factor, 0])\n            color(color_black) sphere(3 * scale_factor);\n        \n        // Mouth\n        translate([0, -22 * scale_factor, -8 * scale_factor])\n            color(color_black) rotate([90, 0, 0])\n                cylinder(h = 0.5 * scale_factor, r1 = 3 * scale_factor, r2 = 3 * scale_factor);\n    }\n}\n\n// Body module\nmodule body() {\n    color(color_orange) {\n        // Main body\n        translate([0, 0, 20 * scale_factor])\n            scale([1.5, 1, 1.2])\n                sphere(25 * scale_factor);\n        \n        // Chest beige patch\n        translate([0, 8 * scale_factor, 15 * scale_factor])\n            color(color_beige) scale([1.8, 1.5, 0.5])\n                sphere(20 * scale_factor);\n    }\n}\n\n// Legs module\nmodule legs() {\n    for(side = [-1, 1]) {\n        // Front legs\n        translate([side * 15 * scale_factor, 10 * scale_factor, 0]) {\n            color(color_orange) cylinder(h = 30 * scale_factor, r = 6 * scale_factor);\n            translate([0, 0, -15 * scale_factor])\n                color(color_beige) sphere(7 * scale_factor);\n        }\n        \n        // Back legs\n        translate([side * 15 * scale_factor, -15 * scale_factor, 0]) {\n            color(color_orange) cylinder(h = 30 * scale_factor, r = 7 * scale_factor);\n            translate([0, 0, -15 * scale_factor])\n                color(color_beige) sphere(8 * scale_factor);\n        }\n    }\n}\n\n// Tail module\nmodule tail() {\n    translate([0, -35 * scale_factor, 15 * scale_factor]) {\n        rotate([20, 0, 0])\n            color(color_orange) scale([0.8, 0.8, 3])\n                cylinder(h = 30 * scale_factor, r1 = 8 * scale_factor, r2 = 5 * scale_factor);\n        \n        // Tail stripes\n        for(i = [0:2]) {\n            translate([0, 0, 5 * scale_factor + i * 8 * scale_factor])\n                rotate([20, 0, 0])\n                    color(color_beige) scale([0.8, 0.8, 0.5])\n                        cylinder(h = 2 * scale_factor, r1 = 8.5 * scale_factor, r2 = 5.5 * scale_factor);\n        }\n    }\n}\n\n// Stripes module\nmodule stripes() {\n    // Back stripes\n    for(i = [0:3]) {\n        rotate([0, 0, 45 + i * 20])\n            translate([0, 0, 30 * scale_factor - i * 5 * scale_factor])\n                color(color_beige) scale([0.3, 1, 0.1])\n                    cube([40 * scale_factor, 15 * scale_factor, 3 * scale_factor], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    legs();\n    tail();\n    stripes();\n}",
    "renders": true
  },
  {
    "pokemon": "arcanine",
    "openscad_code": "// Arcanine - Realistic Style, Medium Complexity\n// Size: ~80mm length, 3D printable\n\n$fn = 32;\nmodule body() {\n    color(\"orange\")\n    union() {\n        // Main torso\n        translate([0, 0, 15])\n        scale([1.5, 0.8, 1.2])\n        sphere(20);\n        \n        // Chest fluff\n        color(\"beige\")\n        translate([0, 10, 15])\n        scale([1.2, 0.6, 0.8])\n        sphere(15);\n    }\n}\n\nmodule head() {\n    color(\"orange\")\n    union() {\n        // Main head\n        translate([30, 0, 35])\n        scale([1.2, 0.9, 1.1])\n        sphere(15);\n        \n        // Snout\n        color(\"beige\")\n        translate([45, 0, 35])\n        scale([1.5, 0.6, 0.6])\n        sphere(10);\n        \n        // Nose\n        color(\"black\")\n        translate([52, 0, 35])\n        sphere(3);\n        \n        // Eyes\n        for(x = [38, 38]) {\n            color(\"black\")\n            translate([x, 8, 40])\n            scale([0.8, 1, 0.8])\n            sphere(5);\n            \n            color(\"white\")\n            translate([x+1, 8, 41])\n            sphere(2);\n        }\n        \n        // Ears\n        for(y = [12, -12]) {\n            color(\"orange\")\n            translate([25, y, 50])\n            rotate([0, 0, y > 0 ? 15 : -15])\n            scale([0.3, 0.1, 1.2])\n            cylinder(15, 8, 4);\n            \n            color(\"beige\")\n            translate([25, y, 50])\n            rotate([0, 0, y > 0 ? 15 : -15])\n            scale([0.2, 0.08, 1])\n            cylinder(15, 8, 4);\n        }\n    }\n}\n\nmodule legs() {\n    for(pos = [[20, 10, 0], [20, -10, 0], [-20, 10, 0], [-20, -10, 0]]) {\n        color(\"orange\")\n        translate(pos)\n        rotate([0, 0, pos[0] > 0 ? 5 : -5])\n        scale([0.4, 0.4, 1])\n        cylinder(25, 8, 6);\n        \n        // Paws\n        color(\"beige\")\n        translate([pos[0], pos[1], 0])\n        sphere(8);\n    }\n}\n\nmodule tail() {\n    color([0.8, 0.3, 0]) {\n        translate([-35, 0, 25])\n        rotate([0, 20, 0])\n        scale([0.8, 0.8, 2])\n        sphere(15);\n        \n        translate([-50, 0, 35])\n        rotate([0, 30, 0])\n        scale([0.6, 0.6, 1.5])\n        sphere(10);\n        \n        translate([-60, 0, 40])\n        rotate([0, 45, 0])\n        scale([0.4, 0.4, 1])\n        sphere(8);\n    }\n}\n\nmodule stripes() {\n    color(\"black\") {\n        // Back stripes\n        for(i = [0:2]) {\n            translate([-5-i*10, 0, 30+i*3])\n            scale([0.2, 1.2, 0.1])\n            cube([15, 5, 2]);\n        }\n        \n        // Leg stripes\n        for(pos = [[20, 10, 12], [20, -10, 12], [-20, 10, 12], [-20, -10, 12]]) {\n            translate(pos)\n            scale([1.2, 0.1, 0.8])\n            rotate([90, 0, 0])\n            cylinder(8, 6, 6);\n        }\n    }\n}\n\nmodule mane() {\n    color([0.8, 0.3, 0]) {\n        // Neck mane\n        translate([15, 0, 45])\n        rotate([0, 90, 0])\n        scale([1.2, 1.5, 1])\n        cylinder(20, 12, 8);\n        \n        // Face mane\n        translate([35, 0, 45])\n        rotate([0, 60, 0])\n        scale([0.8, 1, 1])\n        cylinder(15, 8, 5);\n    }\n}\n\n// Assembly\nbody();\nhead();\nlegs();\ntail();\nstripes();\nmane();",
    "renders": true
  },
  {
    "pokemon": "poliwag",
    "openscad_code": "// Poliwag OpenSCAD Model - Realistic Style, Medium Complexity\n// Approximate size: 80mm tall\n\n// Main body color - light blue\nbody_color = [0.6, 0.8, 1];\n// Belly color - white\nbelly_color = [1, 1, 1];\n// Eye color - black\neye_color = [0, 0, 0];\n// Mouth color - dark red\nmouth_color = [0.6, 0.1, 0.1];\n\nmodule poliwag_body() {\n    // Main spherical body\n    color(body_color)\n    translate([0, 0, 25])\n    sphere(d=40, $fn=32);\n    \n    // Flattened bottom for stability\n    color(body_color)\n    translate([0, 0, 5])\n    scale([1, 1, 0.2])\n    sphere(d=40, $fn=32);\n    \n    // White belly patch\n    color(belly_color)\n    translate([0, -19, 15])\n    scale([0.8, 0.3, 0.8])\n    sphere(d=40, $fn=32);\n}\n\nmodule poliwag_tail() {\n    // Spiral tail segments\n    for(i = [0:3]) {\n        color(body_color)\n        rotate([0, 0, i * 90])\n        translate([20 + i * 3, 0, 15 - i * 5])\n        sphere(d=12 - i * 2, $fn=16);\n    }\n    \n    // Tail stem\n    color(body_color)\n    translate([32, 0, 0])\n    rotate([0, 90, 0])\n    cylinder(h=35, d1=8, d2=5, $fn=16);\n    \n    // Tail fins\n    color(body_color)\n    translate([50, 0, 0])\n    rotate([0, 90, 0])\n    scale([1, 0.3, 1])\n    sphere(d=20, $fn=16);\n}\n\nmodule poliwag_lips() {\n    color(body_color)\n    difference() {\n        // Upper lip\n        translate([0, 20, 15])\n        scale([1, 0.4, 0.6])\n        sphere(d=25, $fn=32);\n        \n        // Mouth cavity\n        color(mouth_color)\n        translate([0, 21, 14])\n        scale([0.6, 0.2, 0.4])\n        sphere(d=20, $fn=32);\n    }\n    \n    color(body_color)\n    difference() {\n        // Lower lip\n        translate([0, 20, 8])\n        scale([1, 0.4, 0.4])\n        sphere(d=25, $fn=32);\n        \n        // Mouth cavity continuation\n        color(mouth_color)\n        translate([0, 21, 9])\n        scale([0.6, 0.2, 0.3])\n        sphere(d=20, $fn=32);\n    }\n}\n\nmodule poliwag_eyes() {\n    // Left eye\n    color(eye_color)\n    translate([-10, 10, 35])\n    scale([1, 0.8, 0.5])\n    sphere(d=8, $fn=16);\n    \n    // Right eye\n    color(eye_color)\n    translate([10, 10, 35])\n    scale([1, 0.8, 0.5])\n    sphere(d=8, $fn=16);\n    \n    // Eye highlights\n    color([1, 1, 1])\n    translate([-9, 11, 37])\n    sphere(d=2, $fn=8);\n    \n    color([1, 1, 1])\n    translate([11, 11, 37])\n    sphere(d=2, $fn=8);\n}\n\nmodule poliwag_legs() {\n    // Front legs\n    for(side = [-1, 1]) {\n        color(body_color)\n        translate([side * 12, 15, 5])\n        rotate([0, 45, 0])\n        cylinder(h=15, d1=8, d2=6, $fn=16);\n        \n        color(body_color)\n        translate([side * 12, 25, -2])\n        sphere(d=10, $fn=16);\n    }\n    \n    // Back leg\n    color(body_color)\n    translate([0, -15, 5])\n    rotate([0, -45, 0])\n    cylinder(h=15, d1=8, d2=6, $fn=16);\n    \n    color(body_color)\n    translate([0, -25, -2])\n    sphere(d=10, $fn=16);\n}\n\nmodule poliwag_whiskers() {\n    // Left whiskers\n    for(i = [1, 2]) {\n        color(body_color)\n        translate([-15, 5, 22])\n        rotate([0, 45 + i * 10, -30 * i])\n        cylinder(h=12, d=2, $fn=8);\n    }\n    \n    // Right whiskers\n    for(i = [1, 2]) {\n        color(body_color)\n        translate([15, 5, 22])\n        rotate([0, 45 + i * 10, 30 * i])\n        cylinder(h=12, d=2, $fn=8);\n    }\n}\n\n// Assembly\nunion() {\n    poliwag_body();\n    poliwag_tail();\n    poliwag_lips();\n    poliwag_eyes();\n    poliwag_legs();\n    poliwag_whiskers();\n}",
    "renders": true
  },
  {
    "pokemon": "poliwhirl",
    "openscad_code": "// Poliwhirl OpenSCAD Model - Medium Complexity Realistic Style\n// Scale: 50mm height\n\n$fn = 50;\n\n// Colors\ncolor_body = [0.0, 0.6, 0.9];\ncolor_belly = [1.0, 1.0, 1.0];\ncolor_swirl = [0.4, 0.2, 0.0];\ncolor_mouth = [0.8, 0.2, 0.2];\n\nmodule poliwhirl_body() {\n    // Main spherical body\n    color(color_body)\n    sphere(d=45);\n    \n    // White belly\n    color(color_belly)\n    translate([0, -22.5, 0])\n    sphere(d=45);\n    \n    // Flatten slightly for 3D printing\n    difference() {\n        sphere(d=45);\n        translate([0, 0, -25])\n        cube([100, 100, 50], center=true);\n    }\n}\n\nmodule poliwhirl_arms() {\n    // Left arm\n    color(color_body)\n    translate([-25, 0, 5])\n    rotate([0, 0, 45])\n    scale([1, 1.5, 1])\n    sphere(d=15);\n    \n    // Right arm\n    color(color_body)\n    translate([25, 0, 5])\n    rotate([0, 0, -45])\n    scale([1, 1.5, 1])\n    sphere(d=15);\n}\n\nmodule poliwhirl_legs() {\n    // Left leg\n    color(color_body)\n    translate([-12, -15, -20])\n    rotate([15, 0, 0])\n    cylinder(h=20, d1=12, d2=8);\n    \n    // Right leg\n    color(color_body)\n    translate([12, -15, -20])\n    rotate([15, 0, 0])\n    cylinder(h=20, d1=12, d2=8);\n}\n\nmodule poliwhirl_ears() {\n    // Left ear\n    color(color_body)\n    translate([-18, 0, 20])\n    rotate([0, 0, -30])\n    scale([0.8, 2, 0.5])\n    sphere(d=10);\n    \n    // Right ear\n    color(color_body)\n    translate([18, 0, 20])\n    rotate([0, 0, 30])\n    scale([0.8, 2, 0.5])\n    sphere(d=10);\n}\n\nmodule poliwhirl_face() {\n    // Eyes\n    for(x=[-8, 8]) {\n        color([0, 0, 0])\n        translate([x, 8, 10])\n        sphere(d=4);\n    }\n    \n    // Mouth\n    color(color_mouth)\n    translate([0, 0, 5])\n    rotate([90, 0, 0])\n    linear_extrude(height=2)\n    circle(d=8);\n}\n\nmodule poliwhirl_swirl() {\n    // Spiral on belly\n    color(color_swirl)\n    for(i=[0:10:360]) {\n        translate([\n            cos(i) * (8 - i/45),\n            -22.5 + sin(i) * (8 - i/45),\n            0.1\n        ])\n        sphere(d=3 - i/120);\n    }\n}\n\n// Assemble the complete Poliwhirl\nunion() {\n    poliwhirl_body();\n    poliwhirl_arms();\n    poliwhirl_legs();\n    poliwhirl_ears();\n    poliwhirl_face();\n    poliwhirl_swirl();\n}",
    "renders": true
  },
  {
    "pokemon": "poliwrath",
    "openscad_code": "// Poliwrath OpenSCAD Model - Realistic Style, Medium Complexity\n\n// Colors\nblue = [0.2, 0.4, 0.8];\nwhite = [1, 1, 1];\nblack = [0, 0, 0];\n\n// Main body module\nmodule poliwrath_body() {\n    color(blue)\n    union() {\n        // Main torso - spherical shape\n        sphere(d=40, $fn=32);\n        \n        // Belly - slightly flattened sphere\n        translate([0, -15, -5])\n            scale([1.2, 0.8, 0.6])\n            sphere(d=30, $fn=32);\n        \n        // Lower body extension\n        translate([0, 0, -25])\n            cylinder(h=20, d1=35, d2=25, $fn=32);\n    }\n}\n\n// Head module\nmodule poliwrath_head() {\n    color(blue)\n    translate([0, 25, 15])\n    union() {\n        // Main head sphere\n        sphere(d=35, $fn=32);\n        \n        // Snout\n        translate([0, 15, 0])\n            scale([0.8, 1.2, 0.8])\n            sphere(d=20, $fn=32);\n    }\n}\n\n// Eyes module\nmodule poliwrath_eyes() {\n    // Left eye\n    translate([-10, 30, 20]) {\n        color(white)\n        sphere(d=8, $fn=16);\n        \n        // Pupil\n        translate([2, 0, 2])\n            color(black)\n            sphere(d=4, $fn=16);\n    }\n    \n    // Right eye\n    translate([10, 30, 20]) {\n        color(white)\n        sphere(d=8, $fn=16);\n        \n        // Pupil\n        translate([-2, 0, 2])\n            color(black)\n            sphere(d=4, $fn=16);\n    }\n}\n\n// Arms module\nmodule poliwrath_arms() {\n    // Left arm\n    translate([-22, 10, 0])\n    rotate([0, 0, 45])\n    union() {\n        // Upper arm\n        cylinder(h=20, d=12, $fn=16);\n        \n        // Forearm\n        translate([0, 18, 0])\n            rotate([0, 0, -30])\n            cylinder(h=15, d=10, $fn=16);\n        \n        // Fist\n        translate([0, 30, 0])\n            sphere(d=15, $fn=16);\n    }\n    \n    // Right arm\n    translate([22, 10, 0])\n    rotate([0, 0, -45])\n    union() {\n        // Upper arm\n        cylinder(h=20, d=12, $fn=16);\n        \n        // Forearm\n        translate([0, 18, 0])\n            rotate([0, 0, 30])\n            cylinder(h=15, d=10, $fn=16);\n        \n        // Fist\n        translate([0, 30, 0])\n            sphere(d=15, $fn=16);\n    }\n}\n\n// Legs module\nmodule poliwrath_legs() {\n    // Left leg\n    translate([-12, -5, -35])\n    union() {\n        // Thigh\n        cylinder(h=15, d=12, $fn=16);\n        \n        // Lower leg\n        translate([0, 0, -18])\n            cylinder(h=15, d=10, $fn=16);\n        \n        // Foot\n        translate([0, 5, -30])\n            scale([1.5, 2, 0.8])\n            sphere(d=15, $fn=16);\n    }\n    \n    // Right leg\n    translate([12, -5, -35])\n    union() {\n        // Thigh\n        cylinder(h=15, d=12, $fn=16);\n        \n        // Lower leg\n        translate([0, 0, -18])\n            cylinder(h=15, d=10, $fn=16);\n        \n        // Foot\n        translate([0, 5, -30])\n            scale([1.5, 2, 0.8])\n            sphere(d=15, $fn=16);\n    }\n}\n\n// Spiral belly marking\nmodule poliwrath_spiral() {\n    color(white)\n    translate([0, -15, 5])\n    rotate([90, 0, 0])\n    linear_extrude(height=2)\n    for(i = [0:5:360]) {\n        rotate(i)\n        translate([i/10, 0, 0])\n        circle(d=3, $fn=8);\n    }\n}\n\n// Main assembly\nunion() {\n    poliwrath_body();\n    poliwrath_head();\n    poliwrath_eyes();\n    poliwrath_arms();\n    poliwrath_legs();\n    poliwrath_spiral();\n}\n\n// Scale to reasonable print size\nscale(0.8) children();",
    "renders": true
  },
  {
    "pokemon": "abra",
    "openscad_code": "// Abra Pokemon in realistic style\n// Size: ~80mm tall, 3D printable\n\n$fn = 32;\n\nmodule abra() {\n    color(\"tan\") {\n        // Main body\n        translate([0, 0, 40]) {\n            difference() {\n                sphere(d = 35);\n                // Neck cavity\n                translate([0, 0, -10])\n                    cylinder(h = 20, d1 = 25, d2 = 20, center = true);\n            }\n        }\n        \n        // Torso\n        translate([0, 0, 15]) {\n            scale([1.2, 1, 1.5])\n                sphere(d = 30);\n        }\n        \n        // Legs\n        for(x = [-8, 8]) {\n            translate([x, 0, 5]) {\n                rotate([0, -10, 0])\n                    cylinder(h = 15, d1 = 12, d2 = 10);\n            }\n        }\n        \n        // Feet\n        for(x = [-8, 8]) {\n            translate([x, 0, 0]) {\n                scale([1.5, 2.5, 0.8])\n                    sphere(d = 10);\n            }\n        }\n        \n        // Arms\n        for(x = [-15, 15]) {\n            translate([x, 0, 25]) {\n                rotate([0, 0, x > 0 ? -20 : 20])\n                    cylinder(h = 20, d1 = 8, d2 = 6);\n            }\n        }\n        \n        // Hands with three fingers\n        for(x = [-15, 15]) {\n            translate([x + (x > 0 ? -3 : 3), 0, 15]) {\n                // Palm\n                sphere(d = 8);\n                \n                // Fingers\n                for(angle = [0, 120, 240]) {\n                    rotate([0, 0, angle + (x > 0 ? 0 : 180)])\n                        translate([4, 0, 0])\n                            cylinder(h = 6, d1 = 3, d2 = 2);\n                }\n            }\n        }\n    }\n    \n    // Head\n    color(\"bisque\") {\n        translate([0, 0, 60]) {\n            sphere(d = 25);\n        }\n        \n        // Snout\n        color(\"tan\") {\n            translate([0, -10, 60]) {\n                scale([0.8, 1.2, 0.8])\n                    sphere(d = 15);\n            }\n        }\n    }\n    \n    // Ears - long and pointed\n    color(\"tan\") {\n        for(x = [-12, 12]) {\n            translate([x, 0, 72]) {\n                rotate([0, 0, x > 0 ? -10 : 10])\n                    scale([0.3, 1, 0.2])\n                        cylinder(h = 20, d1 = 5, d2 = 2);\n            }\n        }\n    }\n    \n    // Mustache-like whiskers\n    color(\"brown\") {\n        for(side = [-1, 1]) {\n            for(i = [0, 1, 2]) {\n                translate([side * (8 + i * 2), -15, 58]) {\n                    rotate([0, 10 + i * 5, side * (30 + i * 10)])\n                        cylinder(h = 8, d = 2);\n                }\n            }\n        }\n    }\n    \n    // Eyes - closed\n    color(\"slateblue\") {\n        for(x = [-6, 6]) {\n            translate([x, -5, 62]) {\n                scale([1, 0.2, 1])\n                    sphere(d = 5);\n            }\n        }\n    }\n    \n    // Tail - thick at base, tapering\n    color(\"tan\") {\n        translate([0, 20, 25]) {\n            rotate([0, -30, 0])\n                cylinder(h = 30, d1 = 12, d2 = 5);\n        }\n    }\n    \n    // Chest armor plating\n    color(\"yellow\") {\n        translate([0, 0, 35]) {\n            difference() {\n                scale([1.3, 1, 0.5])\n                    sphere(d = 25);\n                translate([0, 0, -1])\n                    cube([30, 30, 2], center = true);\n            }\n        }\n    }\n    \n    // Knee pads\n    color(\"yellow\") {\n        for(x = [-8, 8]) {\n            translate([x, 0, 12]) {\n                sphere(d = 8);\n            }\n        }\n    }\n    \n    // Shoulder guards\n    color(\"yellow\") {\n        for(x = [-15, 15]) {\n            translate([x, 0, 28]) {\n                sphere(d = 6);\n            }\n        }\n    }\n    \n    // Spoons (Abra's signature items)\n    color(\"silver\") {\n        for(side = [-1, 1]) {\n            translate([side * 18, side * 5, 15]) {\n                rotate([0, 0, side * 45])\n                    scale([0.1, 2, 0.1])\n                        cube([5, 30, 5], center = true);\n            }\n        }\n    }\n}\n\n// Display the model\nabra();",
    "renders": true
  },
  {
    "pokemon": "kadabra",
    "openscad_code": "// Realistic Kadabra OpenSCAD Model - Medium Complexity\n// 3D printable with no overhangs, approximately 80mm tall\n\n// Main colors\ncolor_yellow = [1, 0.8, 0.1];\ncolor_brown = [0.6, 0.3, 0.1];\ncolor_orange = [1, 0.4, 0];\n\n// Wall thickness for printing\nwall = 1.5;\n\nmodule kadabra() {\n    // Body\n    color(color_yellow) {\n        union() {\n            // Torso\n            translate([0, 0, 25])\n                scale([1.2, 1.5, 1.8])\n                sphere(r=15, $fn=32);\n            \n            // Lower body\n            translate([0, 0, 10])\n                cylinder(h=20, r1=12, r2=15, $fn=32);\n        }\n    }\n    \n    // Head\n    color(color_yellow) {\n        translate([0, 0, 45])\n            sphere(r=18, $fn=32);\n    }\n    \n    // Mustache\n    color(color_brown) {\n        for(i=[-1,1]) {\n            translate([i*8, 20, 42])\n                rotate([0, i*20, 0])\n                scale([1.5, 0.5, 4])\n                sphere(r=5, $fn=16);\n        }\n    }\n    \n    // Eyes\n    color([0,0,0]) {\n        for(i=[-1,1]) {\n            translate([i*8, 18, 48])\n                sphere(r=3, $fn=16);\n        }\n    }\n    \n    // Ears\n    color(color_yellow) {\n        for(i=[-1,1]) {\n            translate([i*25, 10, 55])\n                rotate([0, -30*i, 0])\n                scale([3, 1, 8])\n                cylinder(h=25, r=3, $fn=16);\n        }\n    }\n    \n    // Spoons\n    color(color_orange) {\n        // Left spoon\n        translate([-30, 10, 35])\n            rotate([0, 0, -45])\n            cylinder(h=50, r=2, $fn=16);\n        translate([-55, -5, 35])\n            rotate([0, 0, -45])\n            scale([1, 0.2, 5])\n            sphere(r=4, $fn=16);\n            \n        // Right spoon\n        translate([30, 10, 35])\n            rotate([0, 0, 45])\n            cylinder(h=50, r=2, $fn=16);\n        translate([55, -5, 35])\n            rotate([0, 0, 45])\n            scale([1, 0.2, 5])\n            sphere(r=4, $fn=16);\n    }\n    \n    // Arms\n    color(color_yellow) {\n        for(i=[-1,1]) {\n            translate([i*20, 0, 35])\n                rotate([0, 0, i*30])\n                cylinder(h=25, r=5, $fn=16);\n        }\n    }\n    \n    // Legs\n    color(color_yellow) {\n        for(i=[-1,1]) {\n            translate([i*8, 0, 5])\n                cylinder(h=15, r=6, $fn=16);\n        }\n    }\n    \n    // Feet\n    color(color_yellow) {\n        for(i=[-1,1]) {\n            translate([i*8, 0, 0])\n                scale([2, 3, 1])\n                sphere(r=5, $fn=16);\n        }\n    }\n    \n    // Tail\n    color(color_yellow) {\n        translate([0, -20, 20])\n            rotate([90, 0, 0])\n            scale([1, 1, 0.5])\n            cylinder(h=30, r1=8, r2=3, $fn=16);\n    }\n    \n    // Star on forehead\n    color(color_brown) {\n        translate([0, 15, 58])\n            linear_extrude(height=2)\n            polygon(points=[[0,0], [3,8], [8,8], [4,12], [5,18], [0,15], [-5,18], [-4,12], [-8,8], [-3,8]]);\n    }\n}\n\n// Scale to 80mm height\nscale([0.8, 0.8, 0.8])\nkadabra();",
    "renders": true
  },
  {
    "pokemon": "alakazam",
    "openscad_code": "// Alakazam OpenSCAD Model - Medium Complexity\n// Realistic style, 3D printable, 100mm height\n\n// Main colors\ncolor_yellow = [1, 0.8, 0.2];\ncolor_brown = [0.4, 0.2, 0.1];\ncolor_skin = [0.9, 0.7, 0.5];\ncolor_red = [0.8, 0.2, 0.2];\n\n// Overall scale\nscale_factor = 1;\n\nmodule head() {\n    // Main head sphere\n    color(color_yellow)\n    translate([0, 0, 85])\n    scale([0.8, 0.7, 0.9])\n    sphere(10);\n    \n    // Mustache\n    for(i = [-1, 1]) {\n        color(color_brown)\n        translate([i * 6, 8, 83])\n        rotate([0, 0, i * 30])\n        scale([0.3, 1.5, 0.3])\n        cylinder(h=8, r1=2, r2=0.5);\n    }\n    \n    // Eyes\n    for(i = [-1, 1]) {\n        color(color_red)\n        translate([i * 3, 4, 88])\n        scale([0.8, 1.2, 0.5])\n        sphere(2);\n        \n        color([0, 0, 0])\n        translate([i * 3, 4.5, 89])\n        sphere(0.8);\n    }\n    \n    // Nose\n    color(color_skin)\n    translate([0, 7, 85])\n    sphere(1.5);\n    \n    // Mouth\n    color([0, 0, 0])\n    translate([0, 9, 83])\n    scale([2, 0.8, 0.5])\n    sphere(1);\n}\n\nmodule ears() {\n    for(side = [-1, 1]) {\n        color(color_yellow)\n        translate([side * 12, 0, 92])\n        rotate([0, 0, side * 15])\n        rotate([30, 0, 0])\n        scale([0.8, 0.3, 2])\n        cylinder(h=8, r1=3, r2=1);\n        \n        // Inner ear\n        color(color_skin)\n        translate([side * 12, 0.5, 93])\n        rotate([0, 0, side * 15])\n        rotate([30, 0, 0])\n        scale([0.6, 0.2, 1.8])\n        cylinder(h=7, r1=2, r2=0.5);\n    }\n}\n\nmodule body() {\n    // Main torso\n    color(color_yellow)\n    translate([0, 0, 50])\n    scale([1, 0.8, 1.2])\n    cylinder(h=25, r1=12, r2=8);\n    \n    // Chest armor\n    color(color_brown)\n    translate([0, -5, 45])\n    scale([1.2, 0.5, 0.8])\n    sphere(10);\n    \n    // Belt\n    color(color_brown)\n    translate([0, -10, 45])\n    scale([1.3, 0.3, 0.3])\n    cylinder(h=25, r=10);\n}\n\nmodule arms() {\n    for(side = [-1, 1]) {\n        // Upper arm\n        color(color_yellow)\n        translate([side * 15, 0, 65])\n        rotate([0, 0, side * -20])\n        cylinder(h=10, r=3);\n        \n        // Forearm\n        translate([side * 22, -2, 60])\n        rotate([0, 0, side * -45])\n        cylinder(h=12, r=2.5);\n        \n        // Hand\n        translate([side * 28, -4, 55])\n        sphere(3);\n        \n        // Three fingers\n        for(f = [0, 1, 2]) {\n            translate([side * (28 + f * 1.5), -6, 55])\n            scale([0.4, 1, 0.4])\n            cylinder(h=3, r=1);\n        }\n    }\n}\n\nmodule legs() {\n    for(side = [-1, 1]) {\n        // Upper leg\n        color(color_yellow)\n        translate([side * 8, 0, 30])\n        rotate([0, 0, side * 10])\n        cylinder(h=15, r=3);\n        \n        // Lower leg\n        translate([side * 10, 0, 15])\n        rotate([0, 0, side * 5])\n        cylinder(h=12, r=2.5);\n        \n        // Foot\n        translate([side * 11, 2, 5])\n        scale([1.2, 2, 0.8])\n        sphere(3);\n    }\n}\n\nmodule spoons() {\n    for(side = [-1, 1]) {\n        // Spoon handle\n        color([0.7, 0.7, 0.7])\n        translate([side * 35, -10, 60])\n        rotate([0, 0, side * 45])\n        rotate([90, 0, 0])\n        cylinder(h=25, r=1);\n        \n        // Spoon bowl\n        translate([side * 40, -15, 55])\n        rotate([0, 90, 0])\n        scale([1, 1, 0.3])\n        sphere(4);\n    }\n}\n\n// Assembly\nscale([scale_factor, scale_factor, scale_factor]) {\n    head();\n    ears();\n    body();\n    arms();\n    legs();\n    spoons();\n}",
    "renders": true
  },
  {
    "pokemon": "machop",
    "openscad_code": "// Machop Pokemon - Realistic Style, Medium Complexity\n// Height: 80mm, 3D printable design\n\ncolor(\"lightblue\") {\n    // Main body\n    union() {\n        // Torso\n        translate([0, 0, 40]) \n            scale([1.2, 0.8, 1.5]) \n            sphere(15, $fn=20);\n        \n        // Chest plate\n        translate([0, 10, 45]) \n            scale([1, 0.5, 0.8]) \n            cube([30, 8, 20], center=true);\n        \n        // Legs\n        for(side = [-1, 1]) {\n            // Upper legs\n            translate([side * 12, 0, 25]) \n                rotate([0, 10, 0]) \n                scale([0.8, 0.8, 1.2]) \n                cylinder(15, 8, 6, $fn=12);\n            \n            // Lower legs\n            translate([side * 12, 0, 10]) \n                scale([0.7, 0.7, 1]) \n                cylinder(15, 6, 8, $fn=12);\n            \n            // Feet\n            translate([side * 12, 0, 2]) \n                scale([1.2, 2, 0.8]) \n                cube([12, 6, 4], center=true);\n        }\n        \n        // Arms\n        for(side = [-1, 1]) {\n            // Upper arms\n            translate([side * 20, 0, 45]) \n                rotate([0, 0, side * -30]) \n                scale([1, 1, 1.3]) \n                cylinder(15, 7, 6, $fn=12);\n            \n            // Forearms\n            translate([side * 30, 0, 30]) \n                rotate([0, 0, side * -30]) \n                scale([0.9, 0.9, 1.2]) \n                cylinder(12, 6, 8, $fn=12);\n            \n            // Hands\n            translate([side * 36, 0, 18]) \n                scale([1.2, 0.8, 1.5]) \n                sphere(6, $fn=12);\n            \n            // Wrist bands\n            translate([side * 36, 0, 25]) \n                cylinder(3, 8, 8, $fn=12);\n        }\n    }\n}\n\n// Head assembly\ntranslate([0, 0, 65]) {\n    // Main head\n    color(\"lightblue\") \n        scale([1.1, 1, 1.2]) \n        sphere(12, $fn=20);\n    \n    // Snout\n    translate([0, 12, -2]) \n        scale([0.8, 0.6, 0.8]) \n        sphere(8, $fn=15);\n    \n    // Eyes\n    for(side = [-1, 1]) {\n        color(\"red\") {\n            // Eye\n            translate([side * 6, 8, 4]) \n                scale([1.2, 1, 1]) \n                sphere(3, $fn=10);\n            \n            // Eye ridge\n            translate([side * 6, 6, 7]) \n                rotate([0, side * 20, 0]) \n                cube([8, 3, 2], center=true);\n        }\n    }\n    \n    // Mouth\n    translate([0, 15, -2]) \n        color(\"black\") \n        cube([8, 1, 3], center=true);\n    \n    // Head crest\n    translate([0, -8, 10]) \n        color(\"gray\") \n        rotate([0, 0, 0]) \n        scale([0.5, 0.3, 1]) \n        cylinder(8, 12, 3, $fn=8);\n    \n    // Three crest ridges\n    for(i = [-1, 0, 1]) {\n        translate([i * 4, -8, 8]) \n            color(\"gray\") \n            cube([2, 8, 2], center=true);\n    }\n    \n    // Ears\n    for(side = [-1, 1]) {\n        translate([side * 10, 0, 6]) \n            color(\"lightblue\") \n            rotate([0, 0, side * 30]) \n            scale([0.8, 0.5, 1.5]) \n            cylinder(6, 4, 3, $fn=8);\n    }\n}\n\n// Belt\ntranslate([0, 0, 35]) \n    color(\"gold\") \n    difference() {\n        cylinder(5, 25, 25, $fn=20);\n        cylinder(5, 20, 20, $fn=20);\n    }\n\n// Belt buckle\ntranslate([0, 25, 37.5]) \n    color(\"red\") \n    cube([8, 2, 3], center=true);\n\n// Foot pads\nfor(side = [-1, 1]) {\n    translate([side * 12, 0, 2]) \n        color(\"gray\") \n        cube([10, 4, 1], center=true);\n}",
    "renders": true
  },
  {
    "pokemon": "machoke",
    "openscad_code": "// Machoke Pokemon - Medium complexity realistic style\n// Designed for 3D printing with no overhangs\n\n// Overall scale\nscale_factor = 0.8;\n\n// Colors\ncolor_gray = [0.6, 0.6, 0.6];\ncolor_blue = [0.2, 0.3, 0.8];\ncolor_red = [0.8, 0.2, 0.2];\ncolor_beige = [0.9, 0.8, 0.7];\n\n// Main body\nmodule body() {\n    color(color_gray)\n    union() {\n        // Torso\n        translate([0, 0, 10])\n        scale([1.2, 0.8, 1.5])\n        sphere(d=20);\n        \n        // Chest plate\n        translate([0, -6.5, 15])\n        rotate([90, 0, 0])\n        cylinder(h=3, d1=15, d2=18);\n        \n        // Belt\n        translate([0, 0, 8])\n        rotate([90, 0, 0])\n        cylinder(h=4, d=22);\n        \n        // Belt buckle\n        translate([0, 11.5, 8])\n        rotate([90, 0, 0])\n        cylinder(h=1, d=8);\n    }\n}\n\n// Head\nmodule head() {\n    color(color_gray)\n    translate([0, -20, 25])\n    union() {\n        // Main head\n        scale([0.9, 1.1, 1])\n        sphere(d=16);\n        \n        // Snout\n        translate([0, -9, -2])\n        scale([0.6, 0.8, 0.5])\n        sphere(d=12);\n        \n        // Head crest\n        for(i = [-1, 1]) {\n            translate([i * 6, 0, 6])\n            rotate([0, i * 20, 0])\n            cylinder(h=8, d1=4, d2=2);\n        }\n    }\n}\n\n// Arms\nmodule arms() {\n    // Left arm\n    color(color_gray)\n    translate([-12, -8, 15])\n    rotate([0, 0, -30])\n    union() {\n        // Upper arm\n        cylinder(h=12, d=8);\n        \n        // Elbow\n        translate([0, 0, -12])\n        sphere(d=8);\n        \n        // Forearm\n        translate([0, 0, -12])\n        rotate([30, 0, 0])\n        cylinder(h=15, d=7);\n        \n        // Wrist band\n        translate([0, 0, -27])\n        cylinder(h=3, d=9);\n        \n        // Hand\n        translate([0, 0, -30])\n        scale([1.2, 0.8, 0.5])\n        sphere(d=8);\n    }\n    \n    // Right arm - mirrored\n    mirror([1, 0, 0])\n    translate([-12, -8, 15])\n    rotate([0, 0, -30])\n    union() {\n        // Upper arm\n        cylinder(h=12, d=8);\n        \n        // Elbow\n        translate([0, 0, -12])\n        sphere(d=8);\n        \n        // Forearm\n        translate([0, 0, -12])\n        rotate([30, 0, 0])\n        cylinder(h=15, d=7);\n        \n        // Wrist band\n        translate([0, 0, -27])\n        cylinder(h=3, d=9);\n        \n        // Hand\n        translate([0, 0, -30])\n        scale([1.2, 0.8, 0.5])\n        sphere(d=8);\n    }\n}\n\n// Legs\nmodule legs() {\n    // Left leg\n    color(color_blue)\n    translate([-6, 0, 0])\n    union() {\n        // Thigh\n        cylinder(h=15, d=10);\n        \n        // Knee\n        translate([0, 0, -15])\n        sphere(d=10);\n        \n        // Shin\n        translate([0, 0, -15])\n        cylinder(h=12, d=8);\n        \n        // Foot\n        translate([0, 4, -27])\n        scale([1.5, 2, 0.8])\n        sphere(d=8);\n    }\n    \n    // Right leg\n    translate([6, 0, 0])\n    union() {\n        // Thigh\n        cylinder(h=15, d=10);\n        \n        // Knee\n        translate([0, 0, -15])\n        sphere(d=10);\n        \n        // Shin\n        translate([0, 0, -15])\n        cylinder(h=12, d=8);\n        \n        // Foot\n        translate([0, 4, -27])\n        scale([1.5, 2, 0.8])\n        sphere(d=8);\n    }\n}\n\n// Facial features\nmodule face() {\n    translate([0, -27, 25])\n    union() {\n        // Eyes\n        color(color_red)\n        for(i = [-1, 1]) {\n            translate([i * 4, 0, 2])\n            scale([1, 0.5, 0.5])\n            sphere(d=3);\n        }\n        \n        // Mouth\n        color(color_beige)\n        translate([0, -3, -1])\n        scale([2, 0.5, 0.5])\n        sphere(d=3);\n        \n        // Nose\n        color(color_gray)\n        translate([0, -1, 0])\n        sphere(d=2);\n    }\n}\n\n// Power save belt\nmodule belt_details() {\n    color(color_red)\n    translate([0, 0, 8])\n    union() {\n        // Front emblem\n        translate([0, 11.5, 1.5])\n        rotate([90, 0, 0])\n        cylinder(h=0.5, d=6);\n        \n        // Side details\n        for(i = [-1, 1]) {\n            translate([i * 8, 7, 1.5])\n            rotate([90, 0, 0])\n            cylinder(h=0.5, d=4);\n        }\n    }\n}\n\n// Scale and assemble the Pokemon\nscale(scale_factor)\nunion() {\n    body();\n    head();\n    arms();\n    legs();\n    face();\n    belt_details();\n}",
    "renders": true
  },
  {
    "pokemon": "machamp",
    "openscad_code": "// Machamp - Realistic Style\n// Overall height: 90mm, built upright with 45° rotated arms for printability\n\n// Main colors\nskinColor = [0.8, 0.6, 0.4];\nbeltColor = [0.4, 0.2, 0.1];\nshortsColor = [0.2, 0.3, 0.7];\ngrayColor = [0.6, 0.6, 0.6];\n\n// Head module\nmodule head() {\n    color(skinColor)\n    union() {\n        // Main head sphere\n        translate([0, 0, 80])\n            scale([1, 0.9, 1.1])\n            sphere(10);\n        \n        // Jaw\n        translate([0, -6, 75])\n            scale([0.8, 0.6, 0.6])\n            sphere(8);\n        \n        // Crest on top\n        for(i=[-1, 1]) {\n            translate([i*4, 0, 92])\n                rotate([0, i*10, 0])\n                scale([0.3, 0.2, 1])\n                cylinder(h=8, r1=3, r2=0);\n        }\n        \n        // Ears\n        for(i=[-1, 1]) {\n            translate([i*12, 0, 82])\n                rotate([0, 0, i*30])\n                scale([0.5, 0.2, 1])\n                cylinder(h=8, r1=4, r2=0);\n        }\n        \n        // Eyes\n        color(grayColor)\n        for(i=[-1, 1]) {\n            translate([i*5, -2, 83])\n                scale([0.8, 0.4, 0.3])\n                sphere(3);\n            color([0, 0, 0])\n            translate([i*5, -3, 84])\n                sphere(1);\n        }\n        \n        // Mouth\n        color([0.2, 0.1, 0.1])\n        translate([0, -8, 78])\n            scale([1.2, 0.3, 0.5])\n            cube([4, 1, 2], center=true);\n    }\n}\n\n// Torso module\nmodule torso() {\n    color(skinColor)\n    union() {\n        // Chest\n        translate([0, 0, 55])\n            scale([1.2, 0.8, 1.5])\n            sphere(12);\n        \n        // Belt\n        color(beltColor)\n        translate([0, 0, 45])\n            scale([1.4, 0.9, 0.3])\n            cylinder(h=8, r=14);\n        \n        // Shorts\n        color(shortsColor)\n        translate([0, 0, 30])\n            scale([1.3, 0.9, 1.2])\n            cylinder(h=20, r1=13, r2=11);\n        \n        // Abs definition\n        color(skinColor)\n        for(i=[-1, 0, 1]) {\n            translate([i*2, 0, 42])\n                scale([0.5, 0.3, 0.5])\n                cube([2, 1, 6]);\n        }\n    }\n}\n\n// Arm module (with hands)\nmodule arm(side) {\n    color(skinColor)\n    union() {\n        // Upper arm\n        translate([side*18, -5, 70])\n            rotate([0, 0, side*20])\n            rotate([0, 90, 0])\n            cylinder(h=15, r=5);\n        \n        // Lower arm\n        translate([side*28, -12, 65])\n            rotate([0, 0, side*45])\n            rotate([0, 90, 0])\n            cylinder(h=18, r=4);\n        \n        // Hand with 4 fingers\n        translate([side*40, -15, 60])\n            rotate([0, 0, side*60])\n            union() {\n                // Palm\n                scale([1.2, 0.8, 0.5])\n                sphere(6);\n                \n                // Fingers\n                for(i=[-1, 0, 1, 2]) {\n                    translate([i*3, -3, 0])\n                        rotate([0, 90, 0])\n                        scale([0.3, 0.3, 1])\n                        cylinder(h=8, r1=2, r2=1);\n                }\n                \n                // Thumb\n                translate([side*-4, -2, 0])\n                    rotate([0, 0, side*90])\n                    scale([0.3, 0.3, 0.8])\n                    cylinder(h=6, r1=2, r2=1);\n            }\n    }\n}\n\n// Leg module\nmodule leg(side) {\n    color(skinColor)\n    union() {\n        // Upper leg\n        translate([side*7, 0, 25])\n            rotate([0, 0, side*10])\n            cylinder(h=18, r=6);\n        \n        // Lower leg\n        translate([side*8, 0, 10])\n            rotate([0, 0, side*5])\n            cylinder(h=15, r=5);\n        \n        // Foot\n        translate([side*9, -2, 0])\n            scale([1.5, 2.5, 0.8])\n            cube([8, 12, 4], center=true);\n    }\n}\n\n// Assembly\nhead();\ntorso();\n\n// Arms positioned for printing\narm(1);  // Right arm\narm(-1); // Left arm\n\n// Legs\nleg(1);  // Right leg\nleg(-1); // Left leg",
    "renders": true
  },
  {
    "pokemon": "bellsprout",
    "openscad_code": "// Bellsprout Pokemon - Realistic Style\n// Medium complexity OpenSCAD model\n\n// Colors\n$fa = 2;\n$fs = 0.5;\n\nmodule bellsprout_body() {\n    // Main stem body\n    color([0.2, 0.8, 0.1])\n    union() {\n        // Bottom bulb\n        translate([0, 0, 0])\n        scale([1, 1, 1.2])\n        sphere(8);\n        \n        // Stem neck\n        translate([0, 0, 9])\n        cylinder(25, 6, 3);\n        \n        // Head bulb\n        translate([0, 0, 34])\n        scale([1.3, 1.3, 1.5])\n        sphere(7);\n    }\n}\n\nmodule bellsprout_mouth() {\n    // Yellow lips/mouth\n    color([1, 0.9, 0.1])\n    difference() {\n        // Upper lip\n        translate([0, 6, 34])\n        scale([1.5, 0.8, 1])\n        sphere(6);\n        \n        // Mouth opening\n        translate([0, 9, 34])\n        rotate([90, 0, 0])\n        cylinder(5, 2.5, 0, $fn=20);\n    }\n    \n    // Lower lip\n    color([1, 0.9, 0.1])\n    translate([0, 3, 30])\n    scale([1.3, 0.6, 0.8])\n    sphere(5);\n}\n\nmodule bellsprout_leaves() {\n    // Left leaf\n    color([0.15, 0.7, 0.05])\n    translate([-8, 0, 20])\n    rotate([0, 30, -45])\n    scale([0.3, 1, 0.1])\n    cylinder(15, 5, 2, $fn=3);\n    \n    // Right leaf\n    translate([8, 0, 20])\n    rotate([0, 30, 45])\n    scale([0.3, 1, 0.1])\n    cylinder(15, 5, 2, $fn=3);\n}\n\nmodule bellsprout_eyes() {\n    // Left eye\n    color([0, 0, 0])\n    translate([-3, 5, 37])\n    rotate([0, 20, 0])\n    scale([1, 1.2, 0.5])\n    sphere(1.5);\n    \n    // Right eye\n    translate([3, 5, 37])\n    rotate([0, 20, 0])\n    scale([1, 1.2, 0.5])\n    sphere(1.5);\n    \n    // Eye highlights\n    color([1, 1, 1])\n    translate([-2.5, 5.5, 37.5])\n    sphere(0.5);\n    translate([3.5, 5.5, 37.5])\n    sphere(0.5);\n}\n\nmodule bellsproot_roots() {\n    // Root system for stability\n    color([0.4, 0.3, 0.1])\n    for (i = [0:4]) {\n        rotate([0, 0, i * 72])\n        translate([0, 6 - i, -2])\n        rotate([90, 0, 0])\n        cylinder(8, 1.5, 0.5, $fn=8);\n    }\n}\n\n// Assembly\nunion() {\n    bellsprout_body();\n    bellsprout_mouth();\n    bellsprout_leaves();\n    bellsprout_eyes();\n    bellsprout_roots();\n}",
    "renders": true
  },
  {
    "pokemon": "weepinbell",
    "openscad_code": "// Weepinbell - Medium complexity realistic style\n// Size: ~80mm height for 3D printing\n\n// Main colors\n$body_color = \"#5FBF5F\";\n$leaf_color = \"#7FBF5F\";\n$face_color = \"#FFFF00\";\n$eye_color = \"#000000\";\n$mouth_color = \"#8B4513\";\n\nmodule weepinbell_body() {\n    color($body_color)\n    union() {\n        // Main bell body\n        translate([0, 0, 30])\n        scale([1, 1.2, 1.5])\n        sphere(r=25, $fn=30);\n        \n        // Bottom taper\n        translate([0, 0, 10])\n        scale([0.8, 1, 0.5])\n        sphere(r=25, $fn=30);\n        \n        // Top dome\n        translate([0, 0, 50])\n        scale([1, 1.1, 0.8])\n        sphere(r=25, $fn=30);\n    }\n}\n\nmodule leaf() {\n    color($leaf_color)\n    rotate([0, 0, 45])\n    scale([0.3, 1, 0.1])\n    cylinder(h=40, r1=15, r2=5, $fn=20);\n}\n\nmodule leaves() {\n    // Top leaf\n    translate([0, 0, 60])\n    rotate([90, 0, 0])\n    leaf();\n    \n    // Side leaf\n    translate([-20, 0, 55])\n    rotate([60, 0, 30])\n    leaf();\n    \n    // Other side leaf\n    translate([20, 0, 55])\n    rotate([60, 0, -30])\n    leaf();\n}\n\nmodule mouth() {\n    color($mouth_color)\n    difference() {\n        // Mouth cavity\n        translate([0, 25, 30])\n        rotate([90, 0, 0])\n        scale([1, 1.5, 1])\n        cylinder(h=30, r1=18, r2=12, $fn=30);\n        \n        // Remove front face for opening\n        translate([0, 30, 30])\n        cube([40, 20, 50], center=true);\n    }\n    \n    // Lips\n    color($body_color)\n    translate([0, 22, 30])\n    rotate([90, 0, 0])\n    scale([1.1, 1.6, 0.5])\n    cylinder(h=25, r1=18, r2=12, $fn=30);\n}\n\nmodule eyes() {\n    // Eye sockets\n    color($eye_color)\n    union() {\n        // Left eye\n        translate([-15, 15, 45])\n        rotate([0, 30, 0])\n        scale([1, 1.2, 0.5])\n        sphere(r=5, $fn=20);\n        \n        // Right eye\n        translate([15, 15, 45])\n        rotate([0, -30, 0])\n        scale([1, 1.2, 0.5])\n        sphere(r=5, $fn=20);\n        \n        // Eye highlights\n        color(\"#FFFFFF\")\n        translate([-13, 17, 47])\n        sphere(r=1.5, $fn=10);\n        \n        translate([17, 17, 47])\n        sphere(r=1.5, $fn=10);\n    }\n}\n\nmodule face_markings() {\n    color($face_color)\n    union() {\n        // Eye mask\n        translate([0, 15, 40])\n        scale([1.2, 0.8, 0.5])\n        sphere(r=20, $fn=30);\n        \n        // Mouth surround\n        translate([0, 20, 20])\n        scale([1, 1.2, 0.8])\n        sphere(r=15, $fn=30);\n    }\n}\n\nmodule spots() {\n    color(\"#3F9F3F\")\n    for(i = [0:4]) {\n        rotate([0, 0, i*72])\n        translate([0, 0, 25 + i*5])\n        scale([1.2 - i*0.15, 1.2 - i*0.15, 0.3])\n        sphere(r=5, $fn=20);\n    }\n}\n\nmodule stem() {\n    color($leaf_color)\n    translate([0, 0, 65])\n    cylinder(h=10, r1=8, r2=5, $fn=20);\n}\n\n// Assembly\nunion() {\n    weepinbell_body();\n    leaves();\n    stem();\n    mouth();\n    face_markings();\n    eyes();\n    spots();\n}",
    "renders": true
  },
  {
    "pokemon": "victreebel",
    "openscad_code": "// Victreebel Pokemon - Realistic Style, Medium Complexity\n\n// Overall dimensions\n$fa = 2;\n$fs = 0.5;\n\n// Main body color - green\nColor_Green = [0.2, 0.6, 0.2];\nColor_LightGreen = [0.4, 0.8, 0.4];\nColor_Yellow = [0.9, 0.8, 0.2];\nColor_Red = [0.8, 0.2, 0.2];\nColor_White = [0.9, 0.9, 0.9];\n\nmodule victreebel() {\n    // Main bell-shaped body\n    color(Color_Green) {\n        // Base bell shape using sphere and cylinder\n        translate([0, 0, 0]) {\n            difference() {\n                union() {\n                    cylinder(h = 40, r1 = 25, r2 = 20, center = false);\n                    translate([0, 0, 40]) sphere(d = 50);\n                }\n                // Hollow out the inside\n                translate([0, 0, -1]) cylinder(h = 42, r1 = 22, r2 = 17, center = false);\n                translate([0, 0, 40]) sphere(d = 47);\n            }\n        }\n        \n        // Leaf collar around neck\n        for(i = [0:7]) {\n            rotate([0, 0, i * 45]) {\n                translate([0, 22, 35]) {\n                    rotate([0, 90, 0]) {\n                        scale([1, 0.3, 0.5]) {\n                            color(Color_LightGreen) sphere(d = 15);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Mouth opening\n    color(Color_Red) {\n        translate([0, 0, 60]) {\n            difference() {\n                sphere(d = 40);\n                translate([0, 0, -5]) sphere(d = 38);\n                // Teeth indentations\n                for(i = [0:3]) {\n                    rotate([0, 0, i * 90 + 45]) {\n                        translate([15, 0, 0]) cube([8, 2, 10], center = true);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Eyes\n    color(Color_Red) {\n        translate([-12, 20, 55]) sphere(d = 8);\n        translate([12, 20, 55]) sphere(d = 8);\n    }\n    \n    // Eye pupils\n    color(Color_White) {\n        translate([-12, 22, 57]) sphere(d = 3);\n        translate([12, 22, 57]) sphere(d = 3);\n    }\n    \n    // Leaf on back\n    color(Color_LightGreen) {\n        translate([0, -30, 35]) {\n            rotate([0, -20, 0]) {\n                scale([1, 0.2, 2]) {\n                    sphere(d = 20);\n                }\n                // Leaf veins\n                for(i = [-1:1]) {\n                    translate([i * 5, 0, 0]) {\n                        scale([0.1, 0.1, 1]) {\n                            cylinder(h = 35, r1 = 2, r2 = 2);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Tentacle-like vine\n    color(Color_Green) {\n        translate([0, 0, 0]) {\n            rotate([90, 0, 0]) {\n                for(i = [0:4]) {\n                    translate([0, 0, -i * 5]) {\n                        rotate([0, 0, i * 15]) {\n                            cylinder(h = 5, r1 = 3 - i * 0.3, r2 = 3 - (i + 1) * 0.3);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Spots on body\n    color(Color_Yellow) {\n        for(pos = [[-15, 10, 30], [15, -10, 35], [-10, -15, 45]]) {\n            translate(pos) sphere(d = 4);\n        }\n    }\n}\n\n// Scale to reasonable print size\nscale([0.8, 0.8, 0.8]) victreebel();",
    "renders": true
  },
  {
    "pokemon": "tentacool",
    "openscad_code": "// Tentacool Pokemon - Realistic Style - Medium Complexity\n// OpenSCAD code for 3D printing\n\n// Overall scale factor for printing\nscale_factor = 1.5;\n\n// Colors (RGB values approximated)\ncolor_blue = [0.3, 0.6, 0.9];\ncolor_red = [0.8, 0.2, 0.2];\ncolor_clear = [0.7, 0.85, 1, 0.6];\n\n// Main body (bell shape)\nmodule body() {\n    color(color_blue)\n    union() {\n        // Main bell\n        translate([0, 0, 10])\n        scale([1, 1, 0.8])\n        sphere(d=30 * scale_factor);\n        \n        // Bottom rim\n        translate([0, 0, 2])\n        cylinder(h=4 * scale_factor, r1=15 * scale_factor, r2=12 * scale_factor);\n        \n        // Top dome\n        translate([0, 0, 20])\n        sphere(d=20 * scale_factor);\n    }\n}\n\n// Eyes\nmodule eyes() {\n    for (i = [-1, 1]) {\n        // Eye stalk\n        color(color_blue)\n        translate([i * 8 * scale_factor, 0, 25 * scale_factor])\n        rotate([0, 45 * i, 0])\n        cylinder(h=8 * scale_factor, r=2 * scale_factor);\n        \n        // Eye\n        color(color_red)\n        translate([i * 12 * scale_factor, 0, 27 * scale_factor])\n        rotate([0, 45 * i, 0])\n        sphere(d=5 * scale_factor);\n        \n        // Pupil\n        color([0, 0, 0])\n        translate([i * 13 * scale_factor, 0, 29 * scale_factor])\n        rotate([0, 45 * i, 0])\n        sphere(d=2 * scale_factor);\n    }\n}\n\n// Tentacles\nmodule tentacles() {\n    for (i = [0:4]) {\n        angle = i * 72;\n        color(color_blue)\n        translate([0, 0, 5 * scale_factor])\n        rotate([0, 0, angle])\n        translate([12 * scale_factor, 0, 0])\n        rotate([90, 0, 0])\n        cylinder(h=25 * scale_factor, r1=3 * scale_factor, r2=1.5 * scale_factor);\n    }\n}\n\n// Clear dome on head\nmodule dome() {\n    color(color_clear)\n    translate([0, 0, 20 * scale_factor])\n    sphere(d=18 * scale_factor);\n}\n\n// Blue gem on forehead\nmodule gem() {\n    color(color_blue)\n    translate([0, 0, 30 * scale_factor])\n    sphere(d=4 * scale_factor);\n}\n\n// Bottom detail rings\nmodule rings() {\n    color([0.2, 0.4, 0.7])\n    for (h = [2, 6, 10]) {\n        translate([0, 0, h * scale_factor])\n        cylinder(h=1 * scale_factor, r=14 * scale_factor, center=true);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    eyes();\n    tentacles();\n    dome();\n    gem();\n    rings();\n}",
    "renders": true
  },
  {
    "pokemon": "tentacruel",
    "openscad_code": "// Tentacruel - Realistic Medium Complexity\n// 3D printable Pokemon model using basic OpenSCAD primitives\n\nmodule body() {\n    // Main spherical body with slight flattening\n    color(\"blue\") \n    difference() {\n        sphere(12);\n        translate([0, 0, -10]) cube(30, center=true);\n    }\n}\n\nmodule dome_head() {\n    // Transparent dome on top\n    color(\"cyan\", 0.6) \n    translate([0, 0, 12])\n    scale([1, 1, 0.7])\n    sphere(8);\n}\n\nmodule eyes() {\n    // Large red eyes with black pupils\n    for(i = [-1, 1]) {\n        translate([i * 6, 8, 8]) {\n            color(\"red\") sphere(3);\n            color(\"black\") translate([0, 0, 2.5]) sphere(1.5);\n            color(\"white\") translate([0.8, 0.8, 2.7]) sphere(0.5);\n        }\n    }\n}\n\nmodule beak() {\n    // Yellow beak below eyes\n    color(\"gold\") \n    translate([0, 10, 2]) {\n        rotate([90, 0, 0])\n        cylinder(6, 4, 2);\n    }\n}\n\nmodule tentacle(i) {\n    // Individual tentacle with taper\n    angle = i * 45;\n    translate([0, 0, 0])\n    rotate([0, 0, angle])\n    translate([10, 0, -8]) {\n        rotate([0, 90, 0])\n        color(\"blue\") {\n            // Base segment\n            cylinder(15, 3, 2.5);\n            translate([0, 15, 0])\n            cylinder(12, 2.5, 2);\n            translate([0, 27, 0])\n            cylinder(10, 2, 1.5);\n            \n            // Red orbs at tips\n            color(\"red\") \n            translate([0, 37, 0])\n            sphere(2);\n        }\n    }\n}\n\nmodule tentacles() {\n    // Generate 8 tentacles in circle\n    for(i = [0:7]) {\n        tentacle(i);\n    }\n}\n\nmodule back_spikes() {\n    // Spikes on back\n    for(i = [0:5]) {\n        angle = i * 60;\n        rotate([0, 0, angle])\n        translate([0, -10, 5]) {\n            color(\"blue\") \n            scale([1, 0.5, 3])\n            sphere(2);\n        }\n    }\n}\n\nmodule mouth() {\n    // Mouth opening under body\n    color(\"darkblue\") \n    translate([0, 5, -11])\n    rotate([0, 0, 180])\n    cylinder(3, 4, 0);\n}\n\n// Assembly\nunion() {\n    body();\n    dome_head();\n    eyes();\n    beak();\n    tentacles();\n    back_spikes();\n    mouth();\n}\n\n// Print orientation - flip for better printing\nrotate([180, 0, 0])\ntranslate([0, 0, 0]) {\n    body();\n    dome_head();\n    eyes();\n    beak();\n    tentacles();\n    back_spikes();\n    mouth();\n}",
    "renders": true
  },
  {
    "pokemon": "geodude",
    "openscad_code": "// Geodude - Rock/Ground type Pokemon\n// Realistic style, medium complexity\n\n// Main color for Geodude's rock body\nrock_color = [0.6, 0.5, 0.4];\n\n// Eye color\neye_color = [0.1, 0.1, 0.1];\n\n// Muscle color\nmuscle_color = [0.8, 0.7, 0.6];\n\n// Scale factor for 3D printing (target 60mm height)\nscale_factor = 1;\n\nmodule geodude_body() {\n    color(rock_color) {\n        // Main rock body - irregular boulder shape\n        union() {\n            // Central core\n            sphere(r = 15 * scale_factor, $fn = 32);\n            \n            // Rock protrusions\n            translate([12, 8, 5]) rotate([15, 20, -10]) \n                scale([1.2, 0.8, 0.9]) sphere(r = 8 * scale_factor, $fn = 24);\n            translate([-10, -12, 8]) rotate([-25, -15, 30]) \n                scale([0.9, 1.1, 0.7]) sphere(r = 7 * scale_factor, $fn = 24);\n            translate([8, -15, -5]) rotate([35, 10, -20]) \n                scale([0.8, 1.2, 0.8]) sphere(r = 6 * scale_factor, $fn = 24);\n            translate([-8, 10, -10]) rotate([-20, -25, 15]) \n                scale([1.1, 0.9, 1.0]) sphere(r = 7 * scale_factor, $fn = 24);\n        }\n    }\n}\n\nmodule geodude_eyes() {\n    // Left eye\n    translate([-8 * scale_factor, 18 * scale_factor, 12 * scale_factor]) {\n        color(eye_color) {\n            sphere(r = 2.5 * scale_factor, $fn = 16);\n        }\n        // Eye highlight\n        translate([0.5, -0.5, 1.8]) {\n            color([1, 1, 1]) {\n                sphere(r = 0.8 * scale_factor, $fn = 8);\n            }\n        }\n    }\n    \n    // Right eye\n    translate([8 * scale_factor, 18 * scale_factor, 12 * scale_factor]) {\n        color(eye_color) {\n            sphere(r = 2.5 * scale_factor, $fn = 16);\n        }\n        // Eye highlight\n        translate([0.5, -0.5, 1.8]) {\n            color([1, 1, 1]) {\n                sphere(r = 0.8 * scale_factor, $fn = 8);\n            }\n        }\n    }\n}\n\nmodule geodude_muscles() {\n    color(muscle_color) {\n        // Left arm muscles\n        translate([-20 * scale_factor, 0, 5 * scale_factor]) {\n            rotate([90, 0, 0]) \n                cylinder(h = 15 * scale_factor, r1 = 6 * scale_factor, r2 = 4 * scale_factor, $fn = 16);\n        }\n        \n        // Right arm muscles\n        translate([20 * scale_factor, 0, 5 * scale_factor]) {\n            rotate([90, 0, 0]) \n                cylinder(h = 15 * scale_factor, r1 = 6 * scale_factor, r2 = 4 * scale_factor, $fn = 16);\n        }\n    }\n}\n\nmodule geodude_hands() {\n    color(rock_color) {\n        // Left fist\n        translate([-35 * scale_factor, 0, 5 * scale_factor]) {\n            sphere(r = 8 * scale_factor, $fn = 16);\n        }\n        \n        // Right fist\n        translate([35 * scale_factor, 0, 5 * scale_factor]) {\n            sphere(r = 8 * scale_factor, $fn = 16);\n        }\n    }\n}\n\nmodule geodude_rock_texture() {\n    // Add small rock details\n    for(i = [-1:1], j = [-1:1], k = [-1:1]) {\n        if(i != 0 || j != 0 || k != 0) {\n            translate([i * 5 * scale_factor, j * 5 * scale_factor, k * 5 * scale_factor]) {\n                sphere(r = 1.5 * scale_factor, $fn = 8);\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Body\n    geodude_body();\n    \n    // Eyes\n    geodude_eyes();\n    \n    // Arms\n    geodude_muscles();\n    \n    // Hands\n    geodude_hands();\n    \n    // Rock texture details\n    geodude_rock_texture();\n}",
    "renders": true
  },
  {
    "pokemon": "graveler",
    "openscad_code": "// Graveler Pokemon - Medium Complexity Realistic Style\n// Overall size approximately 60mm\n\nmodule graveler() {\n    color(\"dimgray\") {\n        // Main body - central core\n        union() {\n            // Central boulder body\n            translate([0, 0, 10])\n                scale([1.2, 0.9, 1.1])\n                sphere(d=40);\n            \n            // Left shoulder boulder\n            translate([-25, -5, 25])\n                scale([0.9, 0.8, 0.8])\n                sphere(d=25);\n            \n            // Right shoulder boulder\n            translate([25, -5, 25])\n                scale([0.9, 0.8, 0.8])\n                sphere(d=25);\n            \n            // Lower body boulder\n            translate([0, 0, -5])\n                scale([1.1, 1, 0.8])\n                sphere(d=35);\n        }\n    }\n    \n    // Arms\n    color(\"darkgray\") {\n        // Left arm segments\n        translate([-35, 0, 25]) {\n            rotate([0, 0, 45])\n                cylinder(h=25, d1=15, d2=12);\n            \n            translate([15, 8, 0])\n                rotate([0, 0, 45])\n                cylinder(h=20, d1=12, d2=10);\n            \n            // Left hand\n            translate([28, 15, 0])\n                sphere(d=18);\n        }\n        \n        // Right arm segments\n        translate([35, 0, 25]) {\n            rotate([0, 0, -45])\n                cylinder(h=25, d1=15, d2=12);\n            \n            translate([-15, 8, 0])\n                rotate([0, 0, -45])\n                cylinder(h=20, d1=12, d2=10);\n            \n            // Right hand\n            translate([-28, 15, 0])\n                sphere(d=18);\n        }\n    }\n    \n    // Legs\n    color(\"dimgray\") {\n        // Left leg\n        translate([-15, -5, -10]) {\n            cylinder(h=20, d1=18, d2=15);\n            \n            // Left foot\n            translate([0, 0, -22])\n                scale([1.2, 1.5, 0.6])\n                sphere(d=20);\n        }\n        \n        // Right leg\n        translate([15, -5, -10]) {\n            cylinder(h=20, d1=18, d2=15);\n            \n            // Right foot\n            translate([0, 0, -22])\n                scale([1.2, 1.5, 0.6])\n                sphere(d=20);\n        }\n    }\n    \n    // Face features\n    color(\"red\") {\n        // Eyes\n        translate([-8, 18, 28])\n            scale([1, 1.5, 0.5])\n            sphere(d=6);\n        \n        translate([8, 18, 28])\n            scale([1, 1.5, 0.5])\n            sphere(d=6);\n    }\n    \n    // Rocky spikes on back\n    color(\"darkgray\") {\n        for(i = [0:45:315]) {\n            rotate([0, 0, i])\n                translate([0, -18, 15])\n                    scale([0.8, 0.8, 1.2])\n                    cylinder(h=12, d1=8, d2=5);\n        }\n    }\n    \n    // Crystal formations on back\n    color(\"mediumpurple\") {\n        for(i = [0:90:270]) {\n            rotate([0, 0, i])\n                translate([0, -22, 25])\n                    scale([0.5, 0.5, 1])\n                    cylinder(h=8, d1=6, d2=3);\n        }\n    }\n    \n    // Mouth\n    color(\"black\") {\n        translate([0, 12, 25])\n            scale([1.5, 0.8, 0.5])\n            cube([10, 3, 2], center=true);\n    }\n    \n    // Rocky texture bumps\n    color(\"gray\") {\n        for(i = [0:30:330]) {\n            rotate([0, 0, i])\n                translate([0, 0, 20])\n                    sphere(d=3);\n        }\n        \n        for(i = [0:45:315]) {\n            rotate([0, 0, i])\n                translate([15, 0, 10])\n                    sphere(d=2);\n        }\n    }\n}\n\n// Generate the model\ngraveler();",
    "renders": true
  },
  {
    "pokemon": "golem",
    "openscad_code": "// Golem Pokemon - OpenSCAD\n// Medium complexity realistic style\n\n$fn = 32;\n\n// Main colors\ngolem_body = [0.4, 0.35, 0.3];\ngolem_shell = [0.6, 0.55, 0.5];\ngolem_markings = [0.3, 0.25, 0.2];\neye_color = [0.9, 0.9, 0.9];\npupil_color = [0.1, 0.1, 0.1];\n\n// Scale factor for 80mm height\nscale_factor = 0.8;\n\nmodule golem_pokemon() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        // Main body\n        union() {\n            // Lower body sphere\n            color(golem_body)\n            translate([0, 0, 15])\n            scale([1.2, 1.1, 0.9])\n            sphere(15);\n            \n            // Upper body\n            color(golem_body)\n            translate([0, 0, 30])\n            scale([1.1, 1, 0.7])\n            sphere(12);\n            \n            // Shell segments\n            shell_segments();\n            \n            // Head\n            head();\n            \n            // Arms\n            left_arm();\n            right_arm();\n            \n            // Legs\n            left_leg();\n            right_leg();\n            \n            // Rock spikes\n            rock_spikes();\n        }\n    }\n}\n\nmodule shell_segments() {\n    // Back shell\n    color(golm_shell)\n    translate([0, 12, 25])\n    rotate([90, 0, 0])\n    cylinder(h=3, r1=20, r2=18);\n    \n    // Shell rings\n    for(i=[0:2]) {\n        color(golem_shell)\n        translate([0, 12.5, 20 + i*5])\n        rotate([90, 0, 0])\n        cylinder(h=2, r1=18-i*2, r2=18-i*2);\n    }\n}\n\nmodule head() {\n    // Main head\n    color(golem_body)\n    translate([0, 5, 40])\n    sphere(10);\n    \n    // Eyes\n    color(eye_color)\n    translate([-5, 8, 42])\n    sphere(2);\n    translate([5, 8, 42])\n    sphere(2);\n    \n    // Pupils\n    color(pupil_color)\n    translate([-4.5, 9, 43])\n    sphere(1);\n    translate([5.5, 9, 43])\n    sphere(1);\n    \n    // Mouth\n    color(golem_markings)\n    translate([0, 6, 38])\n    rotate([90, 0, 0])\n    cylinder(h=0.5, r1=3, r2=2.5);\n}\n\nmodule left_arm() {\n    color(golem_body)\n    translate([-15, 0, 25])\n    rotate([0, 0, 30])\n    cylinder(h=12, r1=5, r2=4);\n    \n    color(golem_body)\n    translate([-20, -2, 22])\n    rotate([0, 0, 45])\n    sphere(6);\n}\n\nmodule right_arm() {\n    color(golem_body)\n    translate([15, 0, 25])\n    rotate([0, 0, -30])\n    cylinder(h=12, r1=5, r2=4);\n    \n    color(golem_body)\n    translate([20, -2, 22])\n    rotate([0, 0, -45])\n    sphere(6);\n}\n\nmodule left_leg() {\n    color(golem_body)\n    translate([-8, -5, 5])\n    cylinder(h=10, r1=6, r2=5);\n    \n    color(golem_body)\n    translate([-8, -5, 0])\n    sphere(5);\n}\n\nmodule right_leg() {\n    color(golem_body)\n    translate([8, -5, 5])\n    cylinder(h=10, r1=6, r2=5);\n    \n    color(golem_body)\n    translate([8, -5, 0])\n    sphere(5);\n}\n\nmodule rock_spikes() {\n    // Top spike\n    color(golem_shell)\n    translate([0, 0, 48])\n    scale([1, 1, 1.5])\n    cylinder(h=8, r1=3, r2=0);\n    \n    // Side spikes\n    for(angle=[0:120:360]) {\n        color(golem_shell)\n        rotate([0, 0, angle])\n        translate([15, 0, 35])\n        rotate([30, 0, 0])\n        cylinder(h=6, r1=2, r2=0);\n    }\n}\n\ngolem_pokemon();",
    "renders": true
  },
  {
    "pokemon": "ponyta",
    "openscad_code": "// Ponyta OpenSCAD Model - Realistic Style, Medium Complexity\n// 3D printable at ~80mm height\n\nmodule body() {\n    // Main torso\n    color(\"white\")\n    difference() {\n        scale([1.2, 0.8, 1.1])\n        sphere(r=15);\n        \n        // Remove bottom for flat base\n        translate([0, 0, -15])\n        cube([50, 50, 15], center=true);\n    }\n}\n\nmodule neck() {\n    color(\"white\")\n    translate([0, 20, 5])\n    rotate([70, 0, 0])\n    cylinder(h=20, r1=8, r2=5, center=true);\n}\n\nmodule head() {\n    color(\"white\")\n    translate([0, 28, 20])\n    scale([0.8, 1.2, 1.1])\n    sphere(r=10);\n}\n\nmodule mane() {\n    // Flaming mane using stacked cylinders\n    for(i=[0:3]) {\n        color(\"orange\")\n        rotate([0, i*15, 0])\n        translate([0, 25+i*2, 25+i*2])\n        scale([0.3, 0.3, 1.5])\n        cylinder(h=5, r=8);\n        \n        color(\"yellow\")\n        translate([0, 25+i*2, 30+i*2])\n        sphere(r=4-i);\n    }\n}\n\nmodule tail() {\n    // Flaming tail\n    color(\"orange\")\n    translate([-20, 0, 15])\n    rotate([0, 45, -30])\n    cylinder(h=25, r1=5, r2=2);\n    \n    color(\"yellow\")\n    translate([-25, -5, 18])\n    sphere(r=6);\n}\n\nmodule legs() {\n    // Four legs with hooves\n    for(pos=[[-8, -10], [8, -10], [-7, 10], [7, 10]]) {\n        color(\"white\")\n        translate([pos[0], pos[1], -5])\n        cylinder(h=20, r=3);\n        \n        color(\"black\")\n        translate([pos[0], pos[1], -15])\n        cylinder(h=3, r=4);\n    }\n}\n\nmodule ears() {\n    // Pointed ears\n    for(side=[-1, 1]) {\n        color(\"white\")\n        translate([side*7, 25, 28])\n        rotate([0, side*10, 0])\n        scale([0.5, 0.3, 1])\n        cylinder(h=8, r=4);\n    }\n}\n\nmodule eyes() {\n    // Large eyes with pupils\n    for(side=[-1, 1]) {\n        color(\"indigo\")\n        translate([side*4, 30, 20])\n        sphere(r=2);\n        \n        color(\"black\")\n        translate([side*4.5, 31, 21])\n        sphere(r=1);\n    }\n}\n\nmodule horn() {\n    // Small horn on forehead\n    color(\"gold\")\n    translate([0, 28, 32])\n    rotate([0, 0, 0])\n    cylinder(h=5, r1=1, r2=0);\n}\n\nmodule markings() {\n    // Pokemon-specific flame markings\n    color(\"yellow\")\n    translate([0, 15, 10])\n    rotate([90, 0, 0])\n    scale([1, 0.3, 1])\n    cylinder(h=0.5, r=12);\n    \n    color(\"orange\")\n    for(angle=[0:60:359]) {\n        rotate([0, 0, angle])\n        translate([10, 15, 10])\n        scale([0.3, 0.3, 0.3])\n        sphere(r=2);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    neck();\n    head();\n    mane();\n    tail();\n    legs();\n    ears();\n    eyes();\n    horn();\n    markings();\n}\n\n// Scale to appropriate size\nscale([0.8, 0.8, 0.8])",
    "renders": true
  },
  {
    "pokemon": "rapidash",
    "openscad_code": "// Rapidash OpenSCAD Model - Medium Complexity Realistic Style\n// Dimensions: ~80mm long, 60mm tall, 30mm wide\n\n// Main colors\nbodyColor = \"#F5A623\";\nmaneColor = \"#FF6B35\";\nhornColor = \"#FFF5E1\";\neyeColor = \"#000000\";\nhoofColor = \"#333333\";\n\n// Body module\nmodule body() {\n    color(bodyColor)\n    union() {\n        // Torso\n        translate([0, 0, 20])\n            scale([1.2, 0.8, 1])\n            sphere(d=25);\n        \n        // Chest\n        translate([10, 0, 15])\n            sphere(d=20);\n        \n        // Hindquarters\n        translate([-15, 0, 18])\n            scale([1.3, 1, 1.2])\n            sphere(d=22);\n    }\n}\n\n// Head module\nmodule head() {\n    color(bodyColor)\n    translate([20, 0, 40])\n    union() {\n        // Main head shape\n        scale([1.2, 0.8, 1])\n        sphere(d=18);\n        \n        // Snout\n        translate([8, 0, -2])\n            scale([1.5, 0.7, 0.8])\n            sphere(d=12);\n        \n        // Ears\n        color(bodyColor)\n        translate([0, 8, 8])\n            rotate([0, 30, 0])\n            cylinder(h=12, d1=5, d2=2);\n        translate([0, -8, 8])\n            rotate([0, -30, 0])\n            cylinder(h=12, d1=5, d2=2);\n        \n        // Horn\n        color(hornColor)\n        translate([2, 0, 12])\n            cylinder(h=15, d1=3, d2=0);\n        \n        // Eyes\n        color(eyeColor)\n        translate([9, 4, 3])\n            sphere(d=3);\n        translate([9, -4, 3])\n            sphere(d=3);\n        \n        // Nostrils\n        translate([13, 2, -1])\n            sphere(d=1.5);\n        translate([13, -2, -1])\n            sphere(d=1.5);\n    }\n}\n\n// Mane module\nmodule mane() {\n    color(maneColor)\n    for(i = [0:30:150]) {\n        rotate([0, 0, i])\n        translate([16, 0, 42])\n            rotate([10 + sin(i)*5, 0, 0])\n            cylinder(h=15, d1=4, d2=2);\n    }\n    \n    // Flames on neck\n    for(i = [0:20:80]) {\n        rotate([0, 0, -i])\n        translate([10 - i*0.3, 0, 40 - i*0.2])\n            cylinder(h=10, d1=3, d2=1);\n    }\n}\n\n// Tail module\nmodule tail() {\n    color(maneColor)\n    union() {\n        // Base\n        translate([-25, 0, 25])\n            rotate([0, 20, 0])\n            cylinder(h=15, d1=8, d2=5);\n        \n        // Flames\n        for(i = [0:30:180]) {\n            rotate([0, 20 + i*0.1, i])\n            translate([-35, 0, 25])\n                cylinder(h=12, d1=4, d2=2);\n        }\n    }\n}\n\n// Leg module\nmodule leg(x, y, z, angle, length) {\n    color(bodyColor)\n    union() {\n        // Upper leg\n        translate([x, y, z])\n            rotate([angle, 0, 0])\n            cylinder(h=length*0.6, d=8);\n        \n        // Lower leg\n        translate([x, y - sin(angle)*length*0.6, z - cos(angle)*length*0.6])\n            rotate([angle + 20, 0, 0])\n            cylinder(h=length*0.4, d=6);\n        \n        // Hoof\n        color(hoofColor)\n        translate([x, \n                  y - sin(angle)*length*0.6 - sin(angle+20)*length*0.4, \n                  z - cos(angle)*length*0.6 - cos(angle+20)*length*0.4])\n            cylinder(h=4, d1=6, d2=8);\n    }\n}\n\n// Leg positions\nmodule legs() {\n    // Front legs\n    leg(15, 7, 15, 20, 25);\n    leg(15, -7, 15, 20, 25);\n    \n    // Back legs\n    leg(-12, 8, 15, -20, 28);\n    leg(-12, -8, 15, -20, 28);\n}\n\n// Assembly\nrotate([0, 0, 0])\nunion() {\n    body();\n    head();\n    mane();\n    tail();\n    legs();\n}\n\n// Ground base for printing stability\ncolor(\"#8B4513\")\ntranslate([0, 0, -2])\n    cube([80, 40, 2], center=true);",
    "renders": true
  },
  {
    "pokemon": "slowpoke",
    "openscad_code": "// Slowpoke - Realistic Medium Complexity\n// Overall size ~60mm tall\n\nmodule slowpoke() {\n    color(\"pink\") {\n        // Main body - rounded teardrop shape\n        union() {\n            // Main torso\n            translate([0, 0, 10]) \n                scale([1, 0.8, 1.2])\n                    sphere(d=35, $fn=50);\n            \n            // Belly bulge\n            translate([0, 0, 5])\n                scale([0.9, 0.7, 0.9])\n                    sphere(d=30, $fn=30);\n        }\n        \n        // Head section\n        translate([0, 12, 35])\n            scale([1.1, 1, 0.9])\n                sphere(d=25, $fn=40);\n    }\n    \n    // Snout\n    color(\"pink\") {\n        translate([0, 18, 30])\n            rotate([30, 0, 0])\n                scale([0.6, 0.5, 1.2])\n                    cylinder(d1=15, d2=10, h=12, $fn=30);\n    }\n    \n    // Eyes\n    color(\"white\") {\n        for(x = [-6, 6]) {\n            translate([x, 16, 34])\n                sphere(d=4, $fn=20);\n        }\n    }\n    \n    color(\"black\") {\n        for(x = [-6, 6]) {\n            translate([x, 17, 35])\n                sphere(d=2, $fn=15);\n        }\n    }\n    \n    // Mouth\n    color(\"darkslategray\") {\n        translate([0, 20, 28])\n            rotate([0, 30, 0])\n                cylinder(d=8, h=1, $fn=20);\n    }\n    \n    // Ears\n    color(\"pink\") {\n        // Right ear\n        translate([12, 8, 42])\n            rotate([0, -20, 20])\n                scale([0.3, 1, 2])\n                    cylinder(d1=5, d2=8, h=20, $fn=20);\n        \n        // Left ear\n        translate([-12, 8, 42])\n            rotate([0, -20, -20])\n                scale([0.3, 1, 2])\n                    cylinder(d1=5, d2=8, h=20, $fn=20);\n    }\n    \n    // Arms\n    color(\"pink\") {\n        for(x = [-15, 15]) {\n            translate([x, 0, 20])\n                rotate([0, 0, x > 0 ? -20 : 20])\n                    scale([0.4, 0.4, 1])\n                        cylinder(d=8, h=12, $fn=20);\n        }\n    }\n    \n    // Legs\n    color(\"pink\") {\n        for(x = [-10, 10]) {\n            translate([x, -8, 5])\n                scale([0.6, 0.7, 0.8])\n                    sphere(d=12, $fn=20);\n        }\n    }\n    \n    // Tail base\n    color(\"pink\") {\n        translate([0, -15, 15])\n            rotate([0, 30, 0])\n                scale([0.6, 0.6, 1.5])\n                    cylinder(d=12, h=25, $fn=30);\n    }\n    \n    // Tail curl\n    color(\"pink\") {\n        translate([0, -35, 10])\n            rotate([0, -20, 0])\n                scale([0.5, 0.5, 0.5])\n                    sphere(d=15, $fn=30);\n    }\n    \n    // Tail tip\n    color(\"white\") {\n        translate([0, -40, 8])\n            sphere(d=8, $fn=20);\n    }\n    \n    // Back ridge pattern\n    color(\"lightcoral\") {\n        for(i = [0:3]) {\n            translate([0, -10 + i*5, 30 - i*4])\n                scale([0.1, 2, 0.3])\n                    sphere(d=8, $fn=8);\n        }\n    }\n}\n\n// Generate the model\nslowpoke();",
    "renders": true
  },
  {
    "pokemon": "slowbro",
    "openscad_code": "// Slowbro Pokemon - Medium Complexity Realistic Style\n// 3D printable model with proper wall thickness\n\n// Color definitions\npink = [0.95, 0.75, 0.85];\nbeige = [0.95, 0.85, 0.75];\noff_white = [0.98, 0.95, 0.90];\ngray = [0.6, 0.6, 0.65];\nblack = [0.1, 0.1, 0.1];\nred = [0.85, 0.2, 0.2];\n\n// Global scale for 3D printing\nscale_factor = 0.8;\n\nmodule slowbro_body() {\n    color(pink)\n    union() {\n        // Main body - rounded torso\n        translate([0, 0, 15])\n            scale([1.2, 1, 1.1])\n            sphere(15, $fn=32);\n        \n        // Belly\n        translate([0, -10, 12])\n            scale([1.1, 0.8, 0.9])\n            sphere(12, $fn=32);\n    }\n}\n\nmodule shell_on_back() {\n    color(gray)\n    union() {\n        // Main spiral shell\n        translate([-12, 8, 15])\n            rotate([0, 15, 0])\n            scale([1.3, 1.3, 0.8])\n            sphere(12, $fn=32);\n        \n        // Shell spiral detail\n        for(i=[0:30:330]) {\n            rotate([0, 0, i])\n            translate([-18, 12, 18])\n                scale([0.3, 0.3, 1.2])\n                cylinder(h=2, r=3, $fn=16);\n        }\n        \n        // Shell opening\n        difference() {\n            translate([-15, 12, 18])\n                sphere(8, $fn=32);\n            translate([-15, 12, 18])\n                sphere(6, $fn=32);\n        }\n    }\n}\n\nmodule head() {\n    color(pink)\n    union() {\n        // Main head sphere\n        translate([0, -20, 25])\n            scale([0.9, 1.1, 1])\n            sphere(12, $fn=32);\n        \n        // Snout\n        translate([0, -30, 25])\n            scale([0.7, 0.8, 0.6])\n            sphere(8, $fn=32);\n        \n        // Eyes\n        color(off_white)\n        translate([-5, -25, 28])\n            sphere(3, $fn=16);\n        translate([5, -25, 28])\n            sphere(3, $fn=16);\n        \n        // Pupils\n        color(black)\n        translate([-5, -26, 29])\n            sphere(1.5, $fn=16);\n        translate([5, -26, 29])\n            sphere(1.5, $fn=16);\n        \n        // Mouth\n        color(red)\n        translate([0, -33, 24])\n            scale([1.2, 0.5, 0.5])\n            sphere(2, $fn=16);\n    }\n}\n\nmodule ears() {\n    color(pink)\n    union() {\n        // Left ear\n        translate([-8, -22, 35])\n            rotate([30, 0, -20])\n            scale([0.5, 2, 0.3])\n            cylinder(h=8, r=3, $fn=16);\n        \n        // Right ear\n        translate([8, -22, 35])\n            rotate([30, 0, 20])\n            scale([0.5, 2, 0.3])\n            cylinder(h=8, r=3, $fn=16);\n    }\n}\n\nmodule arms() {\n    color(pink)\n    union() {\n        // Left arm\n        translate([-15, -5, 15])\n            rotate([0, 0, -30])\n            scale([0.8, 3, 0.8])\n            cylinder(h=8, r=3, $fn=16);\n        \n        // Right arm\n        translate([15, -5, 15])\n            rotate([0, 0, 30])\n            scale([0.8, 3, 0.8])\n            cylinder(h=8, r=3, $fn=16);\n        \n        // Hands\n        translate([-18, -8, 15])\n            sphere(4, $fn=16);\n        translate([18, -8, 15])\n            sphere(4, $fn=16);\n    }\n}\n\nmodule legs() {\n    color(pink)\n    union() {\n        // Left leg\n        translate([-8, 0, 0])\n            scale([0.8, 0.8, 1.2])\n            cylinder(h=10, r=4, $fn=16);\n        \n        // Right leg\n        translate([8, 0, 0])\n            scale([0.8, 0.8, 1.2])\n            cylinder(h=10, r=4, $fn=16);\n        \n        // Feet\n        translate([-8, 0, 0])\n            scale([1.2, 2, 0.5])\n            sphere(4, $fn=16);\n        translate([8, 0, 0])\n            scale([1.2, 2, 0.5])\n            sphere(4, $fn=16);\n    }\n}\n\nmodule tail() {\n    color(pink)\n    union() {\n        // Main tail\n        translate([0, 12, 12])\n            rotate([0, 20, 0])\n            scale([0.8, 3, 0.8])\n            cylinder(h=15, r=3, $fn=16);\n        \n        // Tail tip - Shellder\n        color(purple = [0.6, 0.4, 0.7])\n        translate([0, 25, 15])\n            scale([1.2, 1.2, 1])\n            sphere(5, $fn=32);\n        \n        // Shellder spike\n        color(gray)\n        translate([0, 30, 15])\n            rotate([0, 0, 0])\n            scale([0.3, 1, 0.3])\n            cylinder(h=4, r=2, $fn=8);\n    }\n}\n\n// Build complete Slowbro\nscale([scale_factor, scale_factor, scale_factor])\nunion() {\n    slowbro_body();\n    shell_on_back();\n    head();\n    ears();\n    arms();\n    legs();\n    tail();\n}",
    "renders": true
  },
  {
    "pokemon": "magnemite",
    "openscad_code": "// Magnemite in realistic style - medium complexity\n// Overall height ~80mm, 3D printable\n\n$fa = 2;\n$fs = 0.5;\n\nmodule body_sphere() {\n    color(\"Silver\") \n    difference() {\n        sphere(d = 40);\n        \n        // Eye sockets\n        translate([-12, 12, 12]) rotate([0, 0, 0]) sphere(d = 12);\n        translate([12, 12, 12]) rotate([0, 0, 0]) sphere(d = 12);\n        \n        // Bottom flat\n        translate([0, 0, -20]) cube([50, 50, 20], center = true);\n    }\n}\n\nmodule eye() {\n    color(\"Red\")\n    union() {\n        // Iris\n        sphere(d = 8);\n        // Pupil\n        color(\"Black\")\n        translate([0, 0, 3])\n        sphere(d = 4);\n    }\n}\n\nmodule magnet() {\n    color(\"Silver\")\n    union() {\n        // Cylinder body\n        cylinder(h = 25, d1 = 15, d2 = 18);\n        \n        // Top cap\n        translate([0, 0, 25])\n        cylinder(h = 3, d = 20);\n        \n        // Bottom cap\n        translate([0, 0, 0])\n        cylinder(h = 3, d = 20);\n        \n        // Side screws\n        for(i = [0:120:359]) {\n            rotate([0, 0, i])\n            translate([9, 0, 12.5])\n            cylinder(h = 8, d = 3);\n        }\n    }\n}\n\nmodule screw() {\n    color(\"Silver\")\n    rotate([90, 0, 0])\n    cylinder(h = 8, d = 5);\n}\n\nmodule eyebrow() {\n    color(\"Gray\")\n    rotate([15, 0, 0])\n    scale([1, 0.3, 1])\n    sphere(d = 15);\n}\n\nmodule main_body() {\n    union() {\n        body_sphere();\n        \n        // Left eye\n        translate([-12, 12, 12])\n        eye();\n        \n        // Right eye\n        translate([12, 12, 12])\n        eye();\n        \n        // Eyebrows\n        translate([-12, 20, 18])\n        eyebrow();\n        translate([12, 20, 18])\n        mirror([1, 0, 0]) eyebrow();\n        \n        // Side screws\n        translate([0, 20, 0]) screw();\n        translate([0, -20, 0]) screw();\n        translate([20, 0, 0]) screw();\n        translate([-20, 0, 0]) screw();\n    }\n}\n\nmodule left_magnet() {\n    translate([-30, 0, 0])\n    rotate([90, 0, 0])\n    magnet();\n}\n\nmodule right_magnet() {\n    translate([30, 0, 0])\n    rotate([90, 0, 0])\n    magnet();\n}\n\nmodule top_magnet() {\n    translate([0, 0, 30])\n    rotate([0, 0, 0])\n    magnet();\n}\n\n// Main assembly\nunion() {\n    main_body();\n    left_magnet();\n    right_magnet();\n    top_magnet();\n}",
    "renders": true
  },
  {
    "pokemon": "magneton",
    "openscad_code": "// Realistic Magneton OpenSCAD Model\n// Medium complexity, 3D printable\n\n$fn = 32;\n\n// Main dimensions\nmagnet_radius = 12;\nmagnet_thickness = 5;\neye_radius = 2.5;\nscrew_radius = 1.5;\nbody_gap = 2;\nsupport_thickness = 3;\n\n// Color definitions\nsilver = [0.75, 0.75, 0.8];\nred = [0.8, 0.2, 0.2];\nblack = [0.1, 0.1, 0.1];\nyellow = [0.9, 0.8, 0.2];\n\n// Module for single magneton disk\nmodule magneton_disk(x_pos, y_pos, z_pos) {\n    translate([x_pos, y_pos, z_pos]) {\n        // Main disk body\n        color(silver)\n        difference() {\n            cylinder(h = magnet_thickness, r = magnet_radius);\n            // Center hole for screw\n            cylinder(h = magnet_thickness + 0.1, r = screw_radius);\n        }\n        \n        // Eyes\n        translate([magnet_radius * 0.5, magnet_radius * 0.3, magnet_thickness])\n        color(red)\n        sphere(r = eye_radius);\n        \n        translate([magnet_radius * 0.5, -magnet_radius * 0.3, magnet_thickness])\n        color(red)\n        sphere(r = eye_radius);\n        \n        // Eye pupils\n        translate([magnet_radius * 0.5 + 0.7, magnet_radius * 0.3, magnet_thickness + eye_radius - 0.5])\n        color(black)\n        sphere(r = 0.8);\n        \n        translate([magnet_radius * 0.5 + 0.7, -magnet_radius * 0.3, magnet_thickness + eye_radius - 0.5])\n        color(black)\n        sphere(r = 0.8);\n        \n        // Side magnets\n        for (i = [0:2]) {\n            rotate([0, 0, i * 120])\n            translate([magnet_radius + 3, 0, magnet_thickness/2])\n            color(silver)\n            cylinder(h = 8, r = 2.5);\n        }\n        \n        // Top screw head\n        translate([0, 0, magnet_thickness])\n        color(yellow)\n        cylinder(h = 2, r = 3);\n    }\n}\n\n// Module for support structure between disks\nmodule support() {\n    color(silver)\n    difference() {\n        // Main support ring\n        cylinder(h = support_thickness, r = magnet_radius + 5);\n        // Hollow center\n        cylinder(h = support_thickness + 0.1, r = magnet_radius - 2);\n    }\n}\n\n// Main assembly\nunion() {\n    // First disk (top)\n    magneton_disk(0, 0, 0);\n    \n    // Support structure\n    translate([0, 0, magnet_thickness])\n    support();\n    \n    // Second disk (middle)\n    translate([0, 0, magnet_thickness + support_thickness])\n    magneton_disk(0, 0, 0);\n    \n    // Second support\n    translate([0, 0, magnet_thickness * 2 + support_thickness])\n    support();\n    \n    // Third disk (bottom)\n    translate([0, 0, magnet_thickness * 2 + support_thickness * 2])\n    magneton_disk(0, 0, 0);\n    \n    // Side magnetic connections\n    translate([magnet_radius + 8, 0, magnet_thickness + support_thickness/2])\n    color(silver)\n    rotate([0, 90, 0])\n    cylinder(h = 10, r = 3);\n    \n    translate([-magnet_radius - 8, 0, magnet_thickness + support_thickness/2])\n    color(silver)\n    rotate([0, 90, 0])\n    cylinder(h = 10, r = 3);\n    \n    // Diagonal support arms\n    translate([magnet_radius + 5, magnet_radius + 5, magnet_thickness * 2 + support_thickness * 2])\n    color(silver)\n    rotate([0, 45, 0])\n    cylinder(h = 15, r = 2);\n    \n    translate([-magnet_radius - 5, -magnet_radius - 5, magnet_thickness * 2 + support_thickness * 2])\n    color(silver)\n    rotate([0, 45, 0])\n    cylinder(h = 15, r = 2);\n}",
    "renders": true
  },
  {
    "pokemon": "farfetchd",
    "openscad_code": "// Farfetch'd Pokemon - Realistic Style (Medium Complexity)\n// Overall dimensions: ~80mm tall\n\n// Color definitions\n$fn = 32;\n\n// Main body module\nmodule farfetchd() {\n    union() {\n        // Body (brown duck body)\n        color([0.5, 0.35, 0.2]) {\n            // Torso - elongated oval\n            translate([0, 0, 20])\n                scale([1.2, 0.8, 1.3])\n                sphere(r=15);\n            \n            // Belly (lighter brown)\n            color([0.65, 0.45, 0.3]) {\n                translate([0, -12, 18])\n                    scale([0.8, 0.5, 0.8])\n                    sphere(r=12);\n            }\n        }\n        \n        // Head\n        color([0.5, 0.35, 0.2]) {\n            translate([0, 0, 45])\n                sphere(r=12);\n            \n            // Beak\n            color([0.9, 0.7, 0.2]) {\n                translate([0, 12, 42])\n                    rotate([30, 0, 0])\n                    scale([0.8, 2, 0.8])\n                    cylinder(h=10, r1=5, r2=0);\n            }\n            \n            // Eyes\n            color([0, 0, 0]) {\n                translate([-4, 8, 48]) sphere(r=1.5);\n                translate([4, 8, 48]) sphere(r=1.5);\n            }\n            \n            // Eyebrows\n            color([0.3, 0.2, 0.1]) {\n                translate([-6, 12, 50])\n                    rotate([0, 0, 30])\n                    scale([0.3, 2, 0.3])\n                    cylinder(h=3, r=1);\n                translate([6, 12, 50])\n                    rotate([0, 0, -30])\n                    scale([0.3, 2, 0.3])\n                    cylinder(h=3, r=1);\n            }\n        }\n        \n        // Wings\n        module wing(side) {\n            translate([side * 15, 0, 35]) {\n                rotate([0, 0, side * -20]) {\n                    color([0.5, 0.35, 0.2]) {\n                        scale([0.3, 1.5, 0.8])\n                            rotate([0, 30, 0])\n                            cylinder(h=20, r1=8, r2=5);\n                    }\n                }\n            }\n        }\n        wing(1);\n        wing(-1);\n        \n        // Legs\n        module leg(side) {\n            translate([side * 8, -5, 15]) {\n                color([0.9, 0.7, 0.2]) {\n                    // Upper leg\n                    cylinder(h=15, r=3);\n                    \n                    // Foot\n                    translate([0, 0, -8])\n                        rotate([0, 90, 0])\n                        scale([1.5, 0.5, 0.8])\n                        cylinder(h=8, r=3);\n                }\n            }\n        }\n        leg(1);\n        leg(-1);\n        \n        // Leek (signature item)\n        color([0.2, 0.8, 0.2]) {\n            translate([20, 15, 30]) {\n                rotate([0, 0, -45]) {\n                    // Leek stalk\n                    cylinder(h=35, r1=2, r2=1.5);\n                    \n                    // Leek leaves\n                    translate([0, 0, 35])\n                        rotate([30, 0, 0])\n                        scale([1, 0.2, 3])\n                        sphere(r=4);\n                    \n                    // Leek tip\n                    translate([0, 0, -5])\n                        cylinder(h=5, r1=1.5, r2=0);\n                }\n            }\n        }\n        \n        // Tail feathers\n        color([0.5, 0.35, 0.2]) {\n            translate([0, -15, 25]) {\n                rotate([30, 0, 0]) {\n                    // Main tail\n                    scale([0.3, 2, 0.8])\n                        cylinder(h=12, r1=4, r2=2);\n                    \n                    // Side tail feathers\n                    translate([0, 6, 2])\n                        rotate([0, 15, 0])\n                        scale([0.2, 1.5, 0.6])\n                        cylinder(h=10, r1=3, r2=1);\n                    \n                    translate([0, -6, 2])\n                        rotate([0, -15, 0])\n                        scale([0.2, 1.5, 0.6])\n                        cylinder(h=10, r1=3, r2=1);\n                }\n            }\n        }\n    }\n}\n\n// Create the model\nfarfetchd();",
    "renders": true
  },
  {
    "pokemon": "doduo",
    "openscad_code": "// Doduo OpenSCAD Model - Realistic Style, Medium Complexity\n// Scale: 80mm tall\n\n// Colors\nbrown = [101/255, 67/255, 33/255];\ntan = [194/255, 154/255, 108/255];\nblack = [0, 0, 0];\nwhite = [1, 1, 1];\nred = [220/255, 20/255, 60/255];\n\n// Main module\nmodule doduo() {\n    union() {\n        // First head\n        translate([-15, 0, 30]) head(1);\n        \n        // Second head\n        translate([15, 0, 30]) head(2);\n        \n        // Shared body\n        body();\n        \n        // Legs\n        translate([-10, 0, 0]) leg();\n        translate([10, 0, 0]) leg();\n        \n        // Tail\n        translate([0, -20, 5]) tail();\n    }\n}\n\n// Head module\nmodule head(id) {\n    // Head base\n    color(brown) {\n        sphere(12);\n        \n        // Beak\n        translate([0, 0, -12]) {\n            // Upper beak\n            rotate([id == 1 ? -20 : 20, 0, 0]) {\n                scale([1, 0.8, 1.5]) sphere(8);\n            }\n            \n            // Lower beak\n            rotate([id == 1 ? 20 : -20, 0, 0]) {\n                translate([0, 0, -8]) {\n                    scale([0.9, 0.7, 1.2]) sphere(7);\n                }\n            }\n        }\n    }\n    \n    // Eyes\n    color(white) {\n        translate([id == 1 ? -6 : 6, 5, 5]) {\n            sphere(3);\n        }\n    }\n    \n    color(black) {\n        translate([id == 1 ? -6 : 6, 5, 6]) {\n            sphere(1.5);\n        }\n    }\n    \n    // Eye brow ridge\n    color(black) {\n        translate([id == 1 ? -6 : 6, 4, 8]) {\n            rotate([90, 0, id == 1 ? 20 : -20]) {\n                scale([0.3, 1.5, 0.3]) cylinder(4, 1, 1);\n            }\n        }\n    }\n    \n    // Neck\n    color(brown) {\n        translate([0, 0, -15]) {\n            scale([0.6, 0.6, 2]) sphere(10);\n        }\n    }\n}\n\n// Body module\nmodule body() {\n    color(brown) {\n        union() {\n            // Main body\n            scale([1.2, 1.5, 1]) sphere(20);\n            \n            // Chest\n            translate([0, 10, -5]) {\n                scale([0.8, 0.5, 0.8]) sphere(15);\n            }\n            \n            // Back hump\n            translate([0, -10, 5]) {\n                scale([1, 0.8, 0.6]) sphere(18);\n            }\n        }\n    }\n    \n    // Belly patch\n    color(tan) {\n        translate([0, 15, -15]) {\n            scale([0.6, 0.4, 0.3]) sphere(20);\n        }\n    }\n}\n\n// Leg module\nmodule leg() {\n    color(brown) {\n        // Upper leg\n        translate([0, 0, 0]) {\n            rotate([0, 0, 10]) {\n                scale([0.4, 0.4, 1.2]) cylinder(15, 5, 4);\n            }\n        }\n        \n        // Lower leg\n        translate([0, 0, -15]) {\n            rotate([0, 0, 5]) {\n                scale([0.3, 0.3, 1]) cylinder(12, 4, 3);\n            }\n        }\n        \n        // Foot\n        translate([0, 5, -27]) {\n            scale([1.2, 2, 0.6]) sphere(5);\n        }\n        \n        // Toes\n        for(i = [-1, 0, 1]) {\n            translate([i * 3, 8, -27]) {\n                scale([0.8, 0.5, 0.5]) sphere(3);\n            }\n        }\n    }\n}\n\n// Tail module\nmodule tail() {\n    color(brown) {\n        // Tail base\n        translate([0, 0, 0]) {\n            rotate([20, 0, 0]) {\n                scale([0.8, 0.8, 1.5]) sphere(8);\n            }\n        }\n        \n        // Tail feathers\n        for(i = [-1, 0, 1]) {\n            color(i == 0 ? brown : tan) {\n                translate([i * 3, -5, 2]) {\n                    rotate([45, i * 10, 0]) {\n                        scale([0.3, 1.5, 0.1]) cube([3, 12, 1]);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Generate the model\ndoduo();",
    "renders": true
  },
  {
    "pokemon": "dodrio",
    "openscad_code": "// Dodrio Pokemon - Realistic Style, Medium Complexity\n// 3D printable model with no overhangs\n\n// Scale factor for overall size\nscale_factor = 0.4;\n\n// Main colors\ncolor_body = [139/255, 69/255, 19/255];    // Brown\ncolor_belly = [245/255, 222/255, 179/255]; // Beige\ncolor_neck = [160/255, 82/255, 45/255];    // Darker brown\ncolor_beak = [255/255, 215/255, 0/255];    // Gold\ncolor_eyes = [0/255, 0/255, 0/255];        // Black\ncolor_feet = [255/255, 140/255, 0/255];    // Orange\n\n// Body module\nmodule body() {\n    color(color_body)\n    union() {\n        // Main body - egg shaped\n        scale([1, 0.8, 1.2])\n            sphere(r=15);\n            \n        // Belly patch\n        color(color_belly)\n        translate([0, -10, -10])\n            scale([1, 0.5, 0.3])\n                sphere(r=12);\n    }\n}\n\n// Neck module (reusable for all three necks)\nmodule neck(height = 30, angle = 0, lean = 0) {\n    color(color_neck)\n    rotate([0, lean, angle])\n    translate([0, 0, height/2])\n        scale([0.5, 0.5, 1])\n            cylinder(h=height, r1=6, r2=4, $fn=8);\n}\n\n// Head module\nmodule head() {\n    color(color_body)\n    union() {\n        // Main head shape\n        sphere(r=8);\n        \n        // Beak\n        color(color_beak)\n        translate([0, 0, -8])\n            rotate([0, 20, 0])\n                scale([1, 0.3, 2])\n                    cylinder(h=12, r1=4, r2=0, $fn=6);\n        \n        // Eyes\n        color(color_eyes)\n        for(side = [-1, 1]) {\n            translate([side * 4, 3, 3])\n                sphere(r=1.5);\n        }\n        \n        // Feather crest\n        color(color_body)\n        translate([0, 0, 8])\n            rotate([0, 0, 0])\n                scale([0.2, 1, 2])\n                    cylinder(h=6, r1=3, r2=0, $fn=4);\n    }\n}\n\n// Leg module\nmodule leg(x_pos = 0, y_pos = 0) {\n    color(color_feet)\n    union() {\n        // Upper leg\n        color(color_body)\n        translate([x_pos, y_pos, -20])\n            rotate([0, 0, 0])\n                cylinder(h=15, r=2.5, $fn=8);\n        \n        // Lower leg\n        translate([x_pos, y_pos, -35])\n            cylinder(h=12, r=2, $fn=8);\n        \n        // Foot\n        translate([x_pos, y_pos + 3, -47])\n            scale([2, 1, 0.5])\n                sphere(r=3);\n    }\n}\n\n// Tail feathers\nmodule tail() {\n    color(color_body)\n    for(i = [0, 120, 240]) {\n        rotate([0, 0, i])\n        translate([-18, 0, -5])\n            rotate([30, 0, 0])\n                scale([0.5, 2, 0.1])\n                    cylinder(h=10, r1=2, r2=0, $fn=4);\n    }\n}\n\n// Main assembly\nscale([scale_factor, scale_factor, scale_factor])\nunion() {\n    // Body\n    body();\n    \n    // Three necks and heads\n    neck(25, -30, 10);\n    translate([0, 0, 25]) rotate([0, 10, -30]) head();\n    \n    neck(30, 0, 5);\n    translate([0, 0, 30]) rotate([0, 5, 0]) head();\n    \n    neck(25, 30, 10);\n    translate([0, 0, 25]) rotate([0, 10, 30]) head();\n    \n    // Legs\n    leg(8, 5);\n    leg(-8, 5);\n    leg(0, -8);\n    \n    // Tail\n    tail();\n}",
    "renders": true
  },
  {
    "pokemon": "seel",
    "openscad_code": "// Realistic Seel Pokemon - Medium Complexity\n// Scale: ~70mm long\n\n// Colors\nseel_white = [0.95,0.95,0.95];\nseel_light_blue = [0.7,0.85,0.95];\nseel_blue = [0.4,0.6,0.8];\nseel_dark_blue = [0.2,0.3,0.5];\nseel_black = [0.1,0.1,0.1];\nseel_tan = [0.9,0.8,0.7];\n\n// Main body module\nmodule seel_body() {\n    color(seel_white) {\n        // Main body - elongated sphere\n        scale([1.2, 0.8, 0.9]) sphere(d=40);\n        \n        // Neck extension\n        translate([20, 0, 5]) rotate([0, -20, 0]) \n            scale([1.5, 0.8, 0.8]) sphere(d=25);\n        \n        // Tail base\n        translate([-25, 0, -5]) rotate([0, 15, 0])\n            scale([0.8, 0.7, 0.6]) sphere(d=30);\n    }\n}\n\n// Head module\nmodule seel_head() {\n    color(seel_white) {\n        // Main head sphere\n        translate([35, 0, 15]) scale([1.1, 0.9, 0.9]) sphere(d=30);\n        \n        // Snout\n        translate([50, 0, 12]) rotate([0, -30, 0])\n            scale([1.5, 0.7, 0.7]) sphere(d=20);\n    }\n    \n    // Blue upper head pattern\n    color(seel_light_blue) {\n        translate([40, 0, 25]) scale([0.9, 0.6, 0.3])\n            difference() {\n                sphere(d=25);\n                translate([0, 0, -5]) cube([50,50,10], center=true);\n            }\n    }\n}\n\n// Horn module\nmodule seel_horn() {\n    color(seel_light_blue) {\n        translate([30, 0, 30]) {\n            // Base\n            cylinder(h=5, d1=8, d2=10);\n            // Spiral horn\n            for(i=[0:15:360]) {\n                rotate([0, 0, i]) \n                    translate([0, 2*sin(i*3), 2+2*i/360*15])\n                    rotate([90, 0, 0])\n                    scale([0.3, 0.3, 1])\n                    cylinder(h=3, d=4);\n            }\n        }\n    }\n}\n\n// Ear modules\nmodule seel_ear(side) {\n    color(seel_white) {\n        translate([30, side*12, 22]) rotate([0, -20, side*10]) {\n            // Main ear\n            scale([0.8, 0.2, 1.2]) sphere(d=15);\n            // Inner ear\n            color(seel_light_blue) \n                translate([0, -1, 0]) scale([0.7, 0.5, 0.9])\n                sphere(d=12);\n        }\n    }\n}\n\n// Eye module\nmodule seel_eye(side) {\n    translate([45, side*8, 18]) {\n        // White\n        color(seel_white) sphere(d=8);\n        // Pupil\n        color(seel_black) translate([2, 0, 0]) sphere(d=5);\n        // Highlight\n        color(white) translate([3, 1.5, 2]) sphere(d=2);\n    }\n}\n\n// Nose module\nmodule seel_nose() {\n    color(seel_tan) {\n        // Nose tip\n        translate([55, 0, 12]) rotate([0, -30, 0])\n            scale([0.8, 0.6, 0.6]) sphere(d=8);\n        // Nostrils\n        color(seel_black) {\n            translate([57, 2, 12]) rotate([0, -30, 0]) sphere(d=2);\n            translate([57, -2, 12]) rotate([0, -30, 0]) sphere(d=2);\n        }\n    }\n}\n\n// Tail module\nmodule seel_tail() {\n    color(seel_white) {\n        // Tail segments\n        for(i=[0:3]) {\n            translate([-30-i*8, 0, -8-i*3]) \n                rotate([0, i*10, 0])\n                scale([0.8-i*0.1, 0.6-i*0.05, 0.4-i*0.05])\n                sphere(d=20-i*3);\n        }\n        \n        // Tail flippers\n        color(seel_light_blue) {\n            translate([-45, 0, -15]) rotate([0, 30, 0]) {\n                // Left flipper\n                translate([0, 8, 0]) rotate([0, 0, -20])\n                    scale([0.1, 1.2, 0.8]) sphere(d=15);\n                // Right flipper\n                translate([0, -8, 0]) rotate([0, 0, 20])\n                    scale([0.1, 1.2, 0.8]) sphere(d=15);\n            }\n        }\n    }\n}\n\n// Fin modules\nmodule seel_fin(pos, rot) {\n    color(seel_light_blue) {\n        translate(pos) rotate(rot) {\n            // Main fin\n            scale([1.5, 0.1, 0.8]) sphere(d=15);\n            // Fin details\n            for(i=[-1:1]) {\n                translate([0, 0, i*4]) \n                    scale([0.8, 0.1, 0.2])\n                    sphere(d=10);\n            }\n        }\n    }\n}\n\n// Body markings\nmodule seel_markings() {\n    color(seel_blue) {\n        // Side markings\n        for(side=[-1,1]) {\n            translate([10, side*15, 0]) {\n                // Top marking\n                rotate([90, 0, 0]) \n                    scale([1, 0.3, 1]) cylinder(h=3, d=20);\n                // Bottom marking\n                translate([0, 0, -10])\n                    rotate([90, 0, 0]) \n                    scale([0.8, 0.3, 0.8]) cylinder(h=3, d=15);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main body parts\n    seel_body();\n    seel_head();\n    seel_horn();\n    seel_tail();\n    \n    // Symmetrical features\n    for(side=[-1,1]) {\n        seel_ear(side);\n        seel_eye(side);\n    }\n    \n    // Single features\n    seel_nose();\n    \n    // Fins\n    seel_fin([0, 0, -5], [0, 0, 0]); // Dorsal fin\n    seel_fin([15, 20, -8], [90, 0, 0]); // Right side fin\n    seel_fin([15, -20, -8], [90, 0, 0]); // Left side fin\n    \n    // Markings\n    seel_markings();\n}",
    "renders": true
  },
  {
    "pokemon": "dewgong",
    "openscad_code": "// Dewgong - Medium complexity realistic style\n// Size: ~80mm long\n// Colors: White body, light blue accents\n\n// Scale factor for overall size\nscale_factor = 0.4;\n\n// Main body module\nmodule dewgong_body() {\n    color(\"white\") {\n        // Main torso - elongated sphere\n        translate([0, 0, 15]) \n            scale([1.8, 1, 1]) \n                sphere(r=20);\n        \n        // Belly - flatter sphere\n        translate([0, 0, 8]) \n            scale([2, 1.2, 0.6]) \n                sphere(r=20);\n    }\n}\n\n// Head with snout\nmodule dewgong_head() {\n    color(\"white\") {\n        // Main head sphere\n        translate([-25, 0, 25]) \n            sphere(r=18);\n        \n        // Snout extension\n        translate([-45, 0, 22]) \n            scale([1.5, 0.8, 0.8]) \n                sphere(r=10);\n    }\n    \n    // Blue forehead marking\n    color([0.7, 0.85, 1]) {\n        translate([-30, 0, 35]) \n            scale([0.8, 0.4, 0.2]) \n                sphere(r=15);\n    }\n}\n\n// Horns/ears\nmodule horns() {\n    color(\"white\") {\n        // Left horn\n        translate([-25, -15, 40]) {\n            rotate([0, -30, -20]) \n                cylinder(h=15, r1=5, r2=2);\n        }\n        \n        // Right horn\n        translate([-25, 15, 40]) {\n            rotate([0, -30, 20]) \n                cylinder(h=15, r1=5, r2=2);\n        }\n    }\n}\n\n// Tail\nmodule tail() {\n    color(\"white\") {\n        // Tail base\n        translate([35, 0, 15]) \n            rotate([0, 0, 20]) \n                cylinder(h=30, r1=12, r2=8);\n        \n        // Tail flukes\n        for(i = [-1, 1]) {\n            translate([55, i*8, 15]) {\n                rotate([0, 0, i*30]) \n                    scale([1.5, 0.3, 1]) \n                        sphere(r=10);\n            }\n        }\n    }\n}\n\n// Flippers\nmodule flippers() {\n    color(\"white\") {\n        // Front flippers\n        for(side = [-1, 1]) {\n            translate([-5, side*25, 12]) {\n                rotate([0, 0, side*30]) \n                    scale([1.2, 0.3, 0.8]) \n                        sphere(r=15);\n            }\n        }\n        \n        // Rear flippers\n        for(side = [-1, 1]) {\n            translate([25, side*20, 10]) {\n                rotate([0, 0, side*45]) \n                    scale([1, 0.25, 0.6]) \n                        sphere(r=12);\n            }\n        }\n    }\n}\n\n// Eyes\nmodule eyes() {\n    // Left eye\n    translate([-38, -8, 28]) {\n        color(\"black\") sphere(r=3);\n        color(\"white\") translate([1, 1, 1]) sphere(r=1);\n    }\n    \n    // Right eye\n    translate([-38, 8, 28]) {\n        color(\"black\") sphere(r=3);\n        color(\"white\") translate([1, 1, 1]) sphere(r=1);\n    }\n}\n\n// Mouth\nmodule mouth() {\n    color(\"black\") {\n        translate([-48, 0, 15]) \n            scale([1, 0.3, 0.2]) \n                sphere(r=6);\n    }\n}\n\n// Blue markings on back\nmodule markings() {\n    color([0.7, 0.85, 1]) {\n        // Spine line\n        for(i = [-20:5:30]) {\n            translate([i, 0, 30 + abs(i)*0.3]) \n                scale([0.8, 0.3, 0.3]) \n                    sphere(r=5);\n        }\n        \n        // Side markings\n        for(side = [-1, 1]) {\n            for(pos = [-10:10:20]) {\n                translate([pos, side*15, 20]) \n                    scale([0.6, 0.2, 0.2]) \n                        sphere(r=4);\n            }\n        }\n    }\n}\n\n// Assembly\nscale([scale_factor, scale_factor, scale_factor]) {\n    dewgong_body();\n    dewgong_head();\n    horns();\n    tail();\n    flippers();\n    eyes();\n    mouth();\n    markings();\n}",
    "renders": true
  },
  {
    "pokemon": "grimer",
    "openscad_code": "// Grimer Pokemon - Realistic Style - Medium Complexity\n// 3D printable version using basic OpenSCAD primitives\n\nmodule grimer_body() {\n    // Main purple body - blob shape using stacked spheres\n    color([0.4, 0.2, 0.6]) \n    union() {\n        // Central mass\n        sphere(r = 18, $fn = 32);\n        \n        // Left protrusion\n        translate([-15, 8, 5])\n            scale([1.2, 0.8, 0.9])\n                sphere(r = 12, $fn = 24);\n        \n        // Right protrusion\n        translate([15, 6, 8])\n            scale([0.9, 1.1, 1.2])\n                sphere(r = 10, $fn = 24);\n        \n        // Bottom blob\n        translate([0, -12, -8])\n            scale([1.3, 1.4, 0.8])\n                sphere(r = 15, $fn = 24);\n    }\n}\n\nmodule grimer_face() {\n    // Eyes - yellow with black pupils\n    color([1, 0.8, 0]) \n    translate([-8, 15, 12])\n        sphere(r = 4, $fn = 16);\n    \n    translate([8, 15, 12])\n        sphere(r = 4, $fn = 16);\n    \n    // Black pupils\n    color([0, 0, 0])\n    translate([-7, 16, 15])\n        sphere(r = 2, $fn = 12);\n    \n    translate([9, 16, 15])\n        sphere(r = 2, $fn = 12);\n    \n    // Mouth opening\n    color([0.2, 0.1, 0.3])\n    translate([0, 8, 8])\n        rotate([90, 0, 0])\n            cylinder(h = 10, r1 = 6, r2 = 4, $fn = 24);\n}\n\nmodule grimer_teeth() {\n    // Upper teeth\n    color([0.9, 0.9, 0.9])\n    for(i = [-2:2]) {\n        translate([i * 2, 8, 12])\n            rotate([90, 0, 0])\n                cube([1.5, 2, 3], center = true);\n    }\n    \n    // Lower teeth\n    for(i = [-1.5:1.5]) {\n        translate([i * 2, 8, 7])\n            rotate([90, 0, 0])\n                cube([1.5, 2, 2.5], center = true);\n    }\n}\n\nmodule grimer_sludge_details() {\n    // Small sludge droplets on surface\n    color([0.3, 0.15, 0.5])\n    for(i = [0:15]) {\n        rotate([i * 24, i * 15, 0])\n            translate([\n                sin(i * 30) * 15 + 5, \n                cos(i * 30) * 15, \n                sin(i * 45) * 8\n            ])\n                sphere(r = 1.5 + sin(i * 20) * 0.5, $fn = 12);\n    }\n}\n\nmodule grimer_arms() {\n    // Left arm\n    color([0.35, 0.18, 0.55])\n    translate([-20, 2, 0])\n        rotate([0, 0, -30])\n            scale([1, 0.8, 1.2])\n                sphere(r = 8, $fn = 20);\n    \n    // Right arm\n    translate([20, 0, 2])\n        rotate([0, 0, 30])\n            scale([0.9, 0.7, 1.1])\n                sphere(r = 7, $fn = 20);\n}\n\nmodule grimer_base_support() {\n    // Flat base for printing stability\n    color([0.3, 0.15, 0.5])\n    translate([0, 0, -20])\n        cylinder(h = 2, r = 25, $fn = 32);\n}\n\n// Main assembly\nunion() {\n    grimer_base_support();\n    \n    // Main body positioned for printing\n    translate([0, 0, -8])\n        grimer_body();\n    \n    grimer_face();\n    grimer_teeth();\n    grimer_arms();\n    grimer_sludge_details();\n}",
    "renders": true
  },
  {
    "pokemon": "muk",
    "openscad_code": "// Realistic Muk Pokemon - Medium Complexity\n// 3D printable with no overhangs\n\n// Main color - purple sludge\n$fn = 32;\n\nmodule muk_body() {\n    color([0.4, 0.1, 0.6]) {\n        // Main sludge pile\n        translate([0, 0, 15]) \n            scale([1.2, 1, 0.8])\n                sphere(20);\n        \n        // Left sludge blob\n        translate([-20, -5, 10])\n            scale([0.8, 0.7, 0.6])\n                sphere(15);\n                \n        // Right sludge blob\n        translate([20, -5, 10])\n            scale([0.8, 0.7, 0.6])\n                sphere(15);\n                \n        // Front sludge drip\n        translate([0, -15, 5])\n            scale([0.6, 0.5, 0.4])\n                sphere(12);\n    }\n}\n\nmodule muk_face() {\n    // Eyes\n    color([0.05, 0.05, 0.05]) {\n        // Left eye\n        translate([-8, -18, 28])\n            rotate([0, 15, 0])\n                scale([1, 1.5, 0.5])\n                    sphere(3);\n                    \n        // Right eye\n        translate([8, -18, 28])\n            rotate([0, -15, 0])\n                scale([1, 1.5, 0.5])\n                    sphere(3);\n    }\n    \n    // Mouth\n    color([0.2, 0, 0.3]) {\n        translate([0, -22, 22])\n            rotate([0, 0, 5])\n                scale([4, 2, 1])\n                    difference() {\n                        cube([8, 4, 2], center=true);\n                        translate([0, 0, 1])\n                            cube([6, 3, 2], center=true);\n                    }\n    }\n    \n    // Teeth\n    color([0.9, 0.9, 0.9]) {\n        for(i = [-2:1:2]) {\n            translate([i*1.5, -21.5, 22])\n                cube([1, 1.5, 0.5], center=true);\n        }\n    }\n}\n\nmodule muk_arms() {\n    color([0.35, 0.08, 0.55]) {\n        // Left arm\n        translate([-25, 0, 18])\n            rotate([30, 0, -30])\n                scale([0.6, 0.6, 1.2])\n                    sphere(8);\n                    \n        // Left hand\n        translate([-30, 5, 10])\n            scale([0.8, 0.8, 0.5])\n                sphere(6);\n                \n        // Right arm\n        translate([25, 0, 18])\n            rotate([30, 0, 30])\n                scale([0.6, 0.6, 1.2])\n                    sphere(8);\n                    \n        // Right hand\n        translate([30, 5, 10])\n            scale([0.8, 0.8, 0.5])\n                sphere(6);\n    }\n}\n\nmodule muk_drips() {\n    color([0.3, 0.05, 0.5]) {\n        // Generate random drips\n        for(i = [0:15:360]) {\n            rotate([0, 0, i])\n                translate([sin(i*5)*8 + 8, cos(i*5)*8 - 8, 15])\n                    scale([0.3, 0.3, 1 + sin(i*3)*0.5])\n                        sphere(3 + sin(i*2)*2);\n        }\n        \n        // Bottom puddle\n        translate([0, 0, 0])\n            scale([1.4, 1.2, 0.3])\n                sphere(25);\n    }\n}\n\nmodule muk_details() {\n    color([0.5, 0.15, 0.7]) {\n        // Sludge bubbles\n        translate([-10, -5, 25])\n            sphere(2);\n        translate([12, -3, 26])\n            sphere(1.5);\n        translate([5, -10, 20])\n            sphere(2.5);\n            \n        // Toxic bubbles\n        color([0.1, 0.8, 0.1, 0.7]) {\n            translate([-8, -8, 30])\n                sphere(1);\n            translate([10, -5, 28])\n                sphere(0.8);\n        }\n    }\n}\n\n// Assemble the complete model\nunion() {\n    muk_body();\n    muk_face();\n    muk_arms();\n    muk_drips();\n    muk_details();\n}",
    "renders": true
  },
  {
    "pokemon": "shellder",
    "openscad_code": "// Shellder Pokemon - Realistic Style (Medium Complexity)\n\n// Color definitions\n$fn = 50;\nshell_color = [0.8, 0.2, 0.2];  // Dark red shell\npearl_color = [0.95, 0.9, 0.8];  // Off-white pearl\nblack_color = [0.1, 0.1, 0.1];\ntongue_color = [0.9, 0.3, 0.4];\n\nmodule shellder() {\n    // Main shell body\n    color(shell_color)\n    union() {\n        // Base shell\n        difference() {\n            scale([1, 1.2, 0.8])\n                sphere(d=50);\n            translate([0, 0, 20])\n                sphere(d=45);\n        }\n        \n        // Shell ridges\n        for(i = [0:5]) {\n            rotate([0, 0, i*60])\n                translate([0, 25, 0])\n                scale([0.3, 1.2, 0.8])\n                    cylinder(h=8, d1=15, d2=5);\n        }\n        \n        // Top spike\n        translate([0, 0, 35])\n            rotate([0, 0, 0])\n            scale([0.3, 0.3, 1])\n                cylinder(h=15, d1=8, d2=3);\n    }\n    \n    // Inner pearl\n    color(pearl_color)\n    translate([0, 0, -10])\n    difference() {\n        sphere(d=35);\n        translate([0, 0, 15])\n            cube([50, 50, 30], center=true);\n    }\n    \n    // Tongue\n    color(tongue_color)\n    translate([0, -10, -5])\n    rotate([90, 0, 0])\n    scale([1, 1.2, 1])\n        cylinder(h=12, d=8);\n    \n    // Eyes\n    color(black_color)\n    union() {\n        translate([10, 15, 5])\n            sphere(d=6);\n        translate([-10, 15, 5])\n            sphere(d=6);\n    }\n    \n    // Eye details\n    color([1, 1, 1])\n    union() {\n        translate([11, 16, 7])\n            sphere(d=2);\n        translate([-9, 16, 7])\n            sphere(d=2);\n    }\n    \n    // Shell edge detail\n    color(shell_color)\n    difference() {\n        translate([0, 0, 15])\n            cylinder(h=5, d=52);\n        translate([0, 0, 15])\n            cylinder(h=6, d=48);\n    }\n    \n    // Small spikes around edge\n    for(i = [0:11]) {\n        rotate([0, 0, i*30])\n            translate([24, 0, 15])\n                cylinder(h=3, d1=4, d2=2);\n    }\n}\n\n// Scale to reasonable print size\nscale([1.5, 1.5, 1.5])\n    shellder();",
    "renders": true
  },
  {
    "pokemon": "cloyster",
    "openscad_code": "// Cloyster - Realistic Style, Medium Complexity\n// Dimensions: ~70mm width, ~70mm height, ~70mm depth\n\nmodule main_shell() {\n    color(\"lightgray\")\n    difference() {\n        // Main spherical shell\n        sphere(d=65, $fn=64);\n        \n        // Face opening\n        translate([0, 25, 15])\n            rotate([0, 20, 0])\n            cube([30, 30, 40], center=true);\n        \n        // Bottom opening for base\n        translate([0, 0, -35])\n            cube([70, 70, 20], center=true);\n    }\n}\n\nmodule spike(x, y, z, angle, length) {\n    color(\"ivory\")\n    translate([x, y, z])\n        rotate([0, angle, 0])\n        cylinder(h=length, d1=8, d2=2, $fn=12);\n}\n\nmodule shell_spikes() {\n    // Top spikes\n    for(i=[0:45:315]) {\n        rotate([0, 0, i])\n            translate([0, 30, 25])\n                spike(0, 0, 0, -20, 35);\n    }\n    \n    // Side spikes\n    for(i=[0:60:300]) {\n        rotate([0, 0, i])\n            translate([25, 20, 0])\n                spike(0, 0, 0, 0, 30);\n    }\n    \n    // Bottom spikes\n    for(i=[0:72:288]) {\n        rotate([0, 0, i])\n            translate([20, 0, -25])\n                spike(0, 0, 0, 20, 25);\n    }\n}\n\nmodule face() {\n    // Inner pearl\n    color(\"lightblue\")\n    translate([0, 30, 15])\n        rotate([0, 20, 0])\n        sphere(d=25, $fn=32);\n    \n    // Eyes\n    color(\"black\")\n    for(x=[-8, 8]) {\n        translate([x, 25, 25])\n            sphere(d=4, $fn=12);\n    }\n    \n    // Mouth\n    color(\"black\")\n    translate([0, 20, 20])\n        rotate([0, 20, 0])\n        cube([15, 2, 3], center=true);\n}\n\nmodule shell_ridges() {\n    color(\"gray\")\n    // Concentric ridges\n    for(i=[1:3]) {\n        translate([0, 0, -35 + i*15])\n            scale([1 + i*0.1, 1 + i*0.1, 0.5])\n            cylinder(h=3, d=65 - i*10, $fn=64);\n    }\n}\n\n// Main assembly\nunion() {\n    main_shell();\n    shell_spikes();\n    shell_ridges();\n    face();\n}",
    "renders": true
  },
  {
    "pokemon": "gastly",
    "openscad_code": "// Gastly Pokemon - Realistic style, medium complexity\n// Approx 70mm diameter gas cloud, designed for 3D printing\n\n$fn = 32;\n\n// Main colors\ncolor_purple = [0.5, 0.2, 0.8];\ncolor_dark_purple = [0.3, 0.1, 0.5];\ncolor_red = [0.8, 0.1, 0.1];\ncolor_white = [0.9, 0.9, 0.9];\ncolor_black = [0.1, 0.1, 0.1];\n\n// Main gas cloud body\nmodule gastly_body() {\n    color(color_purple) {\n        // Central sphere\n        sphere(d = 50);\n        \n        // Gas wisps - using difference to create cloud-like shapes\n        for(i = [0:5]) {\n            rotate([i*60, 0, 0]) \n                translate([0, 25 + i*3, 0]) \n                    sphere(d = 20 - i*2);\n        }\n        \n        for(i = [0:4]) {\n            rotate([0, i*45, 0]) \n                translate([25 + i*2, 0, 0]) \n                    sphere(d = 18 - i*2);\n        }\n    }\n}\n\n// Poison gas wisps\nmodule poison_wisps() {\n    color(color_dark_purple) {\n        for(i = [0:7]) {\n            rotate([i*51.4, i*20, 0]) {\n                translate([30 + sin(i*45)*5, 0, cos(i*45)*5]) {\n                    scale([1, 0.3, 0.3]) \n                        sphere(d = 8);\n                }\n            }\n        }\n    }\n}\n\n// Main eye structure\nmodule eye() {\n    // Eye socket\n    difference() {\n        color(color_white) \n            sphere(d = 12);\n        \n        // Pupil hole\n        translate([0, 0, 5.9]) \n            color(color_black) \n                cylinder(h = 2, d = 8, $fn = 32);\n        \n        // Red iris\n        translate([0, 0, 5.8]) \n            color(color_red) \n                cylinder(h = 1, d = 10, $fn = 32);\n    }\n}\n\n// Small eye structure\nmodule small_eye() {\n    difference() {\n        color(color_white) \n            sphere(d = 8);\n        \n        translate([0, 0, 3.9]) \n            color(color_black) \n                cylinder(h = 2, d = 5, $fn = 32);\n        \n        translate([0, 0, 3.8]) \n            color(color_red) \n                cylinder(h = 1, d = 6.5, $fn = 32);\n    }\n}\n\n// Mouth with teeth\nmodule mouth() {\n    difference() {\n        // Main mouth shape\n        color(color_dark_purple) \n            scale([1, 0.6, 0.3]) \n                sphere(d = 20);\n        \n        // Mouth cavity\n        translate([0, -3, 2]) \n            scale([0.8, 0.4, 0.8]) \n                sphere(d = 18);\n        \n        // Teeth\n        for(i = [0:4]) {\n            rotate([0, 0, -30 + i*15]) \n                translate([6 - i*2.5, -4, 3.5]) \n                    cube([1.5, 3, 1.5], center = true);\n        }\n        \n        for(i = [0:3]) {\n            rotate([0, 0, -22.5 + i*15]) \n                translate([5.5 - i*2.5, -4, 3.5]) \n                    cube([1.5, 2.5, 1.5], center = true);\n        }\n    }\n}\n\n// Poison gas bubbles\nmodule bubbles() {\n    color(color_dark_purple) {\n        for(i = [0:12]) {\n            rotate([i*30, i*20, 0]) \n                translate([25 + sin(i*45)*8, 10 + cos(i*30)*5, sin(i*60)*8]) \n                    sphere(d = 3 + i*0.2);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Body and wisps\n    gastly_body();\n    poison_wisps();\n    \n    // Eyes\n    translate([-12, 8, 20]) \n        rotate([15, 0, 0]) \n            eye();\n    \n    translate([12, 8, 20]) \n        rotate([15, 0, 0]) \n            mirror([1, 0, 0]) \n                small_eye();\n    \n    // Mouth\n    translate([0, -8, 15]) \n        rotate([25, 0, 0]) \n            mouth();\n    \n    // Gas bubbles\n    bubbles();\n}",
    "renders": true
  },
  {
    "pokemon": "haunter",
    "openscad_code": "// Haunter Pokemon - Realistic Style (Medium Complexity)\n// 3D Printable Model - Approximately 80mm height\n\n$fn = 50;  // Smooth curves for 3D printing\n\n// Main color palette\nghost_purple = [0.4, 0.2, 0.6];\ndark_purple = [0.2, 0.1, 0.3];\neye_red = [0.9, 0.1, 0.1];\nmouth_pink = [0.7, 0.3, 0.6];\nteeth_white = [0.9, 0.9, 0.9];\n\n// Main body module\nmodule haunter_body() {\n    color(ghost_purple) {\n        // Central body - rounded shape\n        translate([0, 0, 20]) {\n            scale([1, 0.8, 1.2]) sphere(20);\n        }\n        \n        // Lower body extension\n        translate([0, 0, 5]) {\n            scale([0.8, 0.6, 0.8]) sphere(15);\n        }\n    }\n}\n\n// Triangular head spikes\nmodule head_spikes() {\n    color(dark_purple) {\n        // Left spike\n        translate([-15, 0, 45]) {\n            rotate([0, -30, 0]) {\n                scale([1, 0.3, 0.3]) cylinder(h=15, r1=8, r2=0);\n            }\n        }\n        \n        // Right spike\n        translate([15, 0, 45]) {\n            rotate([0, 30, 0]) {\n                scale([1, 0.3, 0.3]) cylinder(h=15, r1=8, r2=0);\n            }\n        }\n        \n        // Center spike\n        translate([0, 0, 50]) {\n            scale([0.3, 0.3, 1]) cylinder(h=10, r1=5, r2=0);\n        }\n    }\n}\n\n// Eyes with pupils\nmodule eyes() {\n    // Left eye\n    translate([-8, -12, 35]) {\n        color(eye_red) {\n            sphere(5);\n            // Pupil\n            translate([0, 2, 3]) {\n                color([0, 0, 0]) sphere(2);\n            }\n        }\n    }\n    \n    // Right eye\n    translate([8, -12, 35]) {\n        color(eye_red) {\n            sphere(5);\n            // Pupil\n            translate([0, 2, 3]) {\n                color([0, 0, 0]) sphere(2);\n            }\n        }\n    }\n}\n\n// Wide grinning mouth\nmodule mouth() {\n    translate([0, -18, 28]) {\n        rotate([0, 0, 0]) {\n            // Mouth opening\n            difference() {\n                color(mouth_pink) scale([1.5, 0.8, 0.5]) sphere(10);\n                translate([0, 0, -2]) scale([1.3, 0.6, 0.4]) sphere(10);\n            }\n            \n            // Teeth\n            for(i = [-2:1:2]) {\n                translate([i*3, -6, 30]) {\n                    color(teeth_white) scale([0.8, 1.5, 0.3]) cube([2, 4, 1]);\n                }\n            }\n        }\n    }\n}\n\n// Disembodied hands\nmodule hands() {\n    // Left hand\n    translate([-25, 15, 30]) {\n        rotate([0, 0, 45]) {\n            color(ghost_purple) {\n                // Palm\n                sphere(8);\n                \n                // Fingers\n                for(i = [0:3]) {\n                    rotate([0, 0, i*30 - 45]) {\n                        translate([6, 0, 0]) {\n                            scale([0.6, 0.6, 2]) sphere(4);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Right hand\n    translate([25, 15, 30]) {\n        rotate([0, 0, -45]) {\n            color(ghost_purple) {\n                // Palm\n                sphere(8);\n                \n                // Fingers\n                for(i = [0:3]) {\n                    rotate([0, 0, i*30 - 45]) {\n                        translate([6, 0, 0]) {\n                            scale([0.6, 0.6, 2]) sphere(4);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Ghostly spikes around body\nmodule body_spikes() {\n    color(dark_purple) {\n        for(angle = [0:60:300]) {\n            rotate([0, 0, angle]) {\n                translate([22, 0, 25]) {\n                    scale([0.5, 0.5, 1.2]) sphere(6);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    haunter_body();\n    head_spikes();\n    eyes();\n    mouth();\n    hands();\n    body_spikes();\n}",
    "renders": true
  },
  {
    "pokemon": "gengar",
    "openscad_code": "// Gengar Pokemon - Realistic Style, Medium Complexity\n// Dimensions: ~80mm height\n\n// Color definitions\ncolor_body = [75/255, 35/255, 95/255];\ncolor_eyes = [200/255, 0/255, 0/255];\ncolor_mouth = [0/255, 0/255, 0/255];\ncolor_teeth = [250/255, 250/255, 250/255];\n\n// Overall scale\nscale_factor = 0.8;\n\n// Main body shape\nmodule body() {\n    color(color_body)\n    union() {\n        // Main rounded body\n        translate([0, 0, 30])\n            scale([1, 0.9, 1.2])\n            sphere(30);\n        \n        // Lower belly bulge\n        translate([0, -5, 15])\n            scale([0.9, 0.8, 0.6])\n            sphere(25);\n    }\n}\n\n// Pointed ears\nmodule ears() {\n    color(color_body)\n    union() {\n        // Left ear\n        translate([-20, 20, 55])\n            rotate([0, 15, -25])\n            scale([1, 0.7, 2.5])\n            cylinder(15, 8, 0, $fn=6);\n        \n        // Right ear\n        translate([20, 20, 55])\n            rotate([0, 15, 25])\n            scale([1, 0.7, 2.5])\n            cylinder(15, 8, 0, $fn=6);\n    }\n}\n\n// Spiky back ridge\nmodule back_spikes() {\n    color(color_body)\n    for(i = [0:2]) {\n        translate([0, -15 - i*8, 45 - i*10])\n            rotate([15, 0, 0])\n            scale([1.2 - i*0.2, 0.5, 1.5 - i*0.3])\n            cylinder(10, 5, 0, $fn=4);\n    }\n}\n\n// Short arms with claws\nmodule arms() {\n    color(color_body)\n    union() {\n        // Left arm\n        translate([-25, 5, 35])\n            rotate([0, 0, 45])\n            scale([0.8, 0.8, 1.5])\n            cylinder(12, 8, 6);\n        \n        // Right arm\n        translate([25, 5, 35])\n            rotate([0, 0, -45])\n            scale([0.8, 0.8, 1.5])\n            cylinder(12, 8, 6);\n        \n        // Claws\n        for(side = [-1, 1]) {\n            for(j = [0:2]) {\n                translate([side*(20 + j*3), 5 - j*2, 22])\n                    rotate([0, side*20, 0])\n                    scale([1, 0.3, 0.5])\n                    cylinder(8, 3, 0, $fn=3);\n            }\n        }\n    }\n}\n\n// Short legs with rounded feet\nmodule legs() {\n    color(color_body)\n    union() {\n        // Left leg\n        translate([-15, 0, 0])\n            scale([0.8, 0.8, 1])\n            union() {\n                cylinder(20, 8, 8);\n                translate([0, 0, -5])\n                    sphere(10);\n            }\n        \n        // Right leg\n        translate([15, 0, 0])\n            scale([0.8, 0.8, 1])\n            union() {\n                cylinder(20, 8, 8);\n                translate([0, 0, -5])\n                    sphere(10);\n            }\n    }\n}\n\n// Large mouth with teeth\nmodule mouth() {\n    difference() {\n        // Mouth cavity\n        color(color_mouth)\n        translate([0, 15, 25])\n            rotate([15, 0, 0])\n            scale([1.2, 0.8, 0.7])\n            cube([25, 20, 15], center=true);\n        \n        // Cut into body\n        translate([0, 20, 25])\n            rotate([15, 0, 0])\n            scale([1.3, 0.9, 0.8])\n            cube([25, 20, 15], center=true);\n    }\n    \n    // Teeth\n    color(color_teeth)\n    for(i = [0:3]) {\n        translate([-12 + i*8, 18, 20])\n            rotate([15, 0, 0])\n            scale([0.3, 0.8, 0.5])\n            cylinder(8, 3, 1);\n    }\n}\n\n// Large red eyes\nmodule eyes() {\n    color(color_eyes)\n    union() {\n        // Left eye\n        translate([-15, 15, 45])\n            scale([1.2, 1, 0.3])\n            sphere(10);\n        \n        // Right eye\n        translate([15, 15, 45])\n            scale([1.2, 1, 0.3])\n            sphere(10);\n        \n        // Eye shine\n        color([1,1,1,0.8])\n        translate([-12, 15, 47])\n            sphere(3);\n        translate([18, 15, 47])\n            sphere(3);\n    }\n}\n\n// Triangular tail\nmodule tail() {\n    color(color_body)\n    translate([0, -35, 15])\n        rotate([0, 0, 180])\n        linear_extrude(height=8, center=true, convexity=10)\n        polygon(points=[[0,0], [-15,-20], [15,-20]]);\n}\n\n// Assemble the complete Gengar\nscale([scale_factor, scale_factor, scale_factor])\nunion() {\n    body();\n    ears();\n    back_spikes();\n    arms();\n    legs();\n    mouth();\n    eyes();\n    tail();\n}",
    "renders": true
  },
  {
    "pokemon": "onix",
    "openscad_code": "// Onix - Realistic Style, Medium Complexity\n// 3D printable Pokemon model\n\n// Colors\nrock_color = [0.5, 0.45, 0.4];\neye_color = [0.1, 0.1, 0.1];\naccent_color = [0.7, 0.6, 0.5];\n\n// Main parameters\nscale_factor = 0.5;\nbody_segments = 8;\nsegment_length = 8 * scale_factor;\nsegment_height = 6 * scale_factor;\nhead_size = 10 * scale_factor;\n\nmodule onix_head() {\n    // Main head rock\n    color(rock_color)\n    translate([0, 0, head_size/2])\n    scale([1.2, 0.8, 1])\n    sphere(head_size);\n    \n    // Snout\n    color(rock_color)\n    translate([head_size*0.8, 0, -head_size*0.2])\n    scale([1.5, 0.7, 0.6])\n    sphere(head_size*0.6);\n    \n    // Eyes\n    color(eye_color)\n    for(i = [-1, 1]) {\n        translate([head_size*0.5, i*head_size*0.3, head_size*0.3])\n        sphere(head_size*0.15);\n    }\n    \n    // Horn\n    color(rock_color)\n    translate([-head_size*0.3, 0, head_size*0.8])\n    cylinder(h1=head_size*0.8, r1=head_size*0.2, r2=head_size*0.05);\n}\n\nmodule body_segment(index) {\n    segment_width = segment_height * (1 - index * 0.08);\n    \n    color(rock_color)\n    translate([0, 0, segment_height/2])\n    scale([1.2 - index*0.05, 1, 1 - index*0.05])\n    cube([segment_length, segment_width, segment_height], center=true);\n    \n    // Rock details\n    color(accent_color)\n    for(i = [0:3]) {\n        rotate([0, 0, i*90])\n        translate([segment_length*0.3, segment_width*0.3, segment_height*0.4])\n        sphere(segment_height*0.2);\n    }\n}\n\nmodule onix_body() {\n    for(i = [0:body_segments-1]) {\n        translate([i*segment_length*0.9, 0, -i*segment_height*0.3])\n        rotate([0, 0, i*5])\n        body_segment(i);\n    }\n}\n\nmodule tail_spike() {\n    color(rock_color)\n    translate([0, 0, segment_height*0.5])\n    scale([0.5, 0.5, 2])\n    sphere(segment_height*0.8);\n}\n\nmodule onix_tail() {\n    translate([(body_segments-1)*segment_length*0.9 + segment_length, 0, -(body_segments-1)*segment_height*0.3 - segment_height*0.5])\n    tail_spike();\n}\n\n// Main assembly\ntranslate([-20*scale_factor, 0, 0])\nrotate([0, 0, 10])\nunion() {\n    onix_head();\n    onix_body();\n    onix_tail();\n}",
    "renders": true
  },
  {
    "pokemon": "drowzee",
    "openscad_code": "// Drowzee Pokemon - Realistic Style, Medium Complexity\n// Approx 70mm tall, 3D printable\n\n$fn = 32;\n\n// Main colors\ncolor_yellow = [1, 0.82, 0.35];\ncolor_brown = [0.6, 0.4, 0.2];\ncolor_black = [0.1, 0.1, 0.1];\ncolor_white = [0.95, 0.95, 0.95];\ncolor_red = [0.8, 0.2, 0.2];\n\n// Main body module\nmodule drowzee() {\n    // Head\n    color(color_yellow)\n    translate([0, 0, 40])\n    scale([1.2, 1, 1])\n    sphere(15);\n    \n    // Snout\n    color(color_yellow)\n    translate([0, -15, 35])\n    scale([0.8, 1.5, 0.8])\n    sphere(12);\n    \n    // Body\n    color(color_yellow)\n    translate([0, 0, 15])\n    scale([1.3, 1.1, 1.5])\n    sphere(20);\n    \n    // Belly pattern\n    color(color_brown)\n    translate([0, 0, 8])\n    scale([0.9, 0.7, 0.6])\n    sphere(18);\n    \n    // Trunk\n    color(color_yellow)\n    rotate([90, 0, 0])\n    translate([0, -25, -40])\n    cylinder(h1=30, h2=25, r1=8, r2=5);\n    \n    // Trunk tip\n    color(color_yellow)\n    translate([0, -50, 15])\n    sphere(5);\n    \n    // Ears\n    for(side = [-1, 1]) {\n        color(color_yellow)\n        translate([side * 15, 0, 50])\n        rotate([0, side * -20, 0])\n        scale([0.4, 0.3, 1])\n        sphere(12);\n    }\n    \n    // Arms\n    for(side = [-1, 1]) {\n        color(color_yellow)\n        translate([side * 20, 10, 25])\n        rotate([0, side * 20, 0])\n        scale([0.5, 0.5, 1.2])\n        sphere(8);\n        \n        // Hands\n        color(color_yellow)\n        translate([side * 28, 20, 15])\n        sphere(6);\n    }\n    \n    // Legs\n    for(side = [-1, 1]) {\n        color(color_yellow)\n        translate([side * 12, 5, 5])\n        scale([0.8, 0.8, 1.2])\n        sphere(10);\n        \n        // Feet\n        color(color_yellow)\n        translate([side * 12, 15, 0])\n        rotate([90, 0, 0])\n        cylinder(h=5, r1=6, r2=8);\n    }\n    \n    // Eyes\n    color(color_black)\n    for(side = [-1, 1]) {\n        translate([side * 5, -8, 42])\n        sphere(2);\n    }\n    \n    // Eye highlights\n    color(color_white)\n    for(side = [-1, 1]) {\n        translate([side * 4.5, -7.5, 43])\n        sphere(0.8);\n    }\n    \n    // Mouth line\n    color(color_black)\n    translate([0, -18, 35])\n    rotate([90, 0, 0])\n    cylinder(h=0.5, r=3);\n    \n    // Nostrils\n    color(color_black)\n    translate([0, -48, 15])\n    sphere(1.5);\n    \n    // Stripes on trunk\n    color(color_brown)\n    for(z = [30, 40]) {\n        translate([0, -z, 25])\n        rotate([90, 0, 0])\n        cylinder(h=1, r1=6, r2=4);\n    }\n    \n    // Back stripes\n    color(color_brown)\n    for(z = [20, 30]) {\n        translate([0, -8, z])\n        scale([1.5, 0.2, 0.2])\n        sphere(8);\n    }\n}\n\n// Scale to 70mm height\nscale(0.7)\ndrowzee();",
    "renders": true
  },
  {
    "pokemon": "hypno",
    "openscad_code": "// Hypno in realistic style (medium complexity)\n// Overall size: ~80mm height\n\n// Colors\ncolor_yellow = [0.95, 0.85, 0.15];\ncolor_skin = [0.98, 0.92, 0.75];\ncolor_red = [0.85, 0.1, 0.1];\ncolor_white = [1, 1, 1];\ncolor_black = [0.1, 0.1, 0.1];\ncolor_gray = [0.5, 0.5, 0.5];\n\n// Main body module\nmodule hypno() {\n    // Scale entire model to 80mm height\n    scale([0.8, 0.8, 0.8]) {\n        \n        // Head\n        union() {\n            // Main head sphere\n            color(color_yellow) \n            translate([0, 0, 60]) \n            sphere(25);\n            \n            // Nose\n            color(color_skin) \n            translate([0, 25, 55]) \n            scale([1, 1.5, 0.8]) \n            sphere(8);\n            \n            // Eyes\n            color(color_white) \n            translate([-12, 20, 65]) \n            sphere(8);\n            color(color_white) \n            translate([12, 20, 65]) \n            sphere(8);\n            \n            // Eye pupils\n            color(color_black) \n            translate([-12, 26, 65]) \n            sphere(4);\n            color(color_black) \n            translate([12, 26, 65]) \n            sphere(4);\n            \n            // Eyebrows\n            color(color_gray) \n            translate([-20, 15, 75]) \n            rotate([0, 0, 20]) \n            scale([0.5, 1, 0.2]) \n            cube([15, 3, 3]);\n            color(color_gray) \n            translate([5, 15, 75]) \n            rotate([0, 0, -20]) \n            scale([0.5, 1, 0.2]) \n            cube([15, 3, 3]);\n            \n            // Mouth\n            color(color_red) \n            translate([0, 25, 40]) \n            scale([1, 0.8, 0.5]) \n            sphere(5);\n            \n            // Ears\n            color(color_yellow) \n            translate([-30, 0, 65]) \n            rotate([0, 0, -30]) \n            scale([1, 0.3, 2]) \n            sphere(12);\n            color(color_yellow) \n            translate([30, 0, 65]) \n            rotate([0, 0, 30]) \n            scale([1, 0.3, 2]) \n            sphere(12);\n            \n            // Chest marking\n            color(color_white) \n            translate([0, 10, 30]) \n            scale([1.5, 1, 0.5]) \n            sphere(15);\n        }\n        \n        // Torso\n        color(color_yellow) \n        translate([0, 0, 20]) \n        scale([1.2, 0.8, 2]) \n        sphere(20);\n        \n        // Arms\n        module arm(side) {\n            translate([side * 25, 0, 40]) {\n                color(color_yellow) \n                rotate([0, 0, side * 10]) \n                scale([0.5, 0.5, 1.5]) \n                sphere(12);\n                \n                color(color_yellow) \n                translate([side * 5, 0, -15]) \n                rotate([0, 0, side * 20]) \n                scale([0.4, 0.4, 1.2]) \n                sphere(10);\n                \n                color(color_skin) \n                translate([side * 8, 0, -28]) \n                sphere(6);\n            }\n        }\n        \n        arm(1);\n        arm(-1);\n        \n        // Legs\n        module leg(side) {\n            translate([side * 12, 0, 5]) {\n                color(color_yellow) \n                scale([0.6, 0.6, 1.5]) \n                sphere(12);\n                \n                color(color_yellow) \n                translate([0, 0, -15]) \n                scale([0.5, 0.5, 1.2]) \n                sphere(10);\n                \n                color(color_skin) \n                translate([0, 0, -28]) \n                sphere(8);\n            }\n        }\n        \n        leg(1);\n        leg(-1);\n        \n        // Tail\n        color(color_yellow) \n        translate([0, -25, 30]) \n        rotate([90, 0, 0]) \n        cylinder(h=40, r1=8, r2=5);\n        \n        // Swirly tail end\n        module swirl() {\n            for (i = [0:30:360]) {\n                color(color_yellow) \n                translate([sin(i) * 15, cos(i) * 15 - 25, 30 - i/10]) \n                sphere(4);\n            }\n        }\n        swirl();\n        \n        // Collar\n        color(color_white) \n        translate([0, 5, 35]) \n        rotate([90, 0, 0]) \n        cylinder(h=5, r1=22, r2=20);\n        \n        // Collar ruff\n        module ruff() {\n            for (i = [0:45:360]) {\n                color(color_white) \n                translate([sin(i) * 20, cos(i) * 20 + 5, 35]) \n                scale([0.8, 0.2, 2]) \n                sphere(3);\n            }\n        }\n        ruff();\n    }\n}\n\n// Render the model\nhypno();",
    "renders": true
  },
  {
    "pokemon": "krabby",
    "openscad_code": "// Realistic Krabby Pokemon - Medium Complexity\n// Overall height ~80mm, 3D printable\n\n$fn = 64;\n\nmodule krabby_body() {\n    // Main red body shell\n    color(\"crimson\") {\n        difference() {\n            union() {\n                // Upper shell dome\n                translate([0, 0, 25]) sphere(d = 45);\n                \n                // Lower shell base\n                translate([0, 0, 5]) cylinder(h = 20, d1 = 40, d2 = 45);\n            }\n            \n            // Hollow out for printing\n            translate([0, 0, 10]) sphere(d = 35);\n        }\n    }\n}\n\nmodule krabby_face() {\n    // White face plate\n    color(\"white\") {\n        translate([0, 22, 25]) rotate([90, 0, 0]) \n            cylinder(h = 8, d = 30, $fn = 6);\n    }\n    \n    // Eyes\n    color(\"black\") {\n        // Left eye\n        translate([-8, 26, 35]) sphere(d = 6);\n        translate([-8, 28, 37]) sphere(d = 3);\n        \n        // Right eye\n        translate([8, 26, 35]) sphere(d = 6);\n        translate([8, 28, 37]) sphere(d = 3);\n    }\n    \n    // Mouth\n    color(\"black\") {\n        translate([0, 25, 28]) rotate([0, 0, 0])\n            cube([10, 2, 3]);\n    }\n}\n\nmodule krabby_claw(side) {\n    // Main claw segments\n    color(\"red\") {\n        // Base joint\n        translate([side * 25, 0, 20]) rotate([0, side * 30, 0])\n            cylinder(h = 15, d = 12);\n            \n        // Upper claw segment\n        translate([side * 35, 0, 30]) rotate([0, side * 30, 0])\n            cylinder(h = 25, d = 10);\n            \n        // Tip segment\n        translate([side * 45, 0, 40]) rotate([0, side * 30, 0])\n            cylinder(h = 20, d = 8);\n    }\n    \n    // Claw pincers\n    color(\"white\") {\n        // Lower pincer\n        translate([side * 45, -5, 35]) rotate([0, side * 45, 0])\n            cube([15, 3, 8]);\n            \n        // Upper pincer\n        translate([side * 45, 5, 45]) rotate([0, side * 45, 0])\n            cube([15, 3, 8]);\n    }\n}\n\nmodule krabby_legs() {\n    // Four visible legs (two per side)\n    for (side = [-1, 1]) {\n        for (i = [0, 1]) {\n            color(\"red\") {\n                translate([side * 18, -10 + i * 20, 10]) {\n                    rotate([0, 90, 0]) {\n                        // Upper leg segment\n                        translate([0, 0, 0]) cylinder(h = 12, d = 6);\n                        \n                        // Lower leg segment\n                        translate([0, 12, 0]) rotate([30, 0, 0])\n                            cylinder(h = 15, d = 5);\n                            \n                        // Pointed foot\n                        translate([0, 27, 0]) rotate([60, 0, 0])\n                            cylinder(h = 8, d1 = 5, d2 = 2);\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule krabby_eyestalks() {\n    color(\"red\") {\n        // Left eyestalk\n        translate([-12, 0, 45]) rotate([-30, 0, 0])\n            cylinder(h = 15, d = 6);\n            \n        // Right eyestalk\n        translate([12, 0, 45]) rotate([-30, 0, 0])\n            cylinder(h = 15, d = 6);\n    }\n}\n\n// Assembly\nkrabby_body();\nkrabby_face();\nkrabby_claw(-1);\nkrabby_claw(1);\nkrabby_legs();\nkrabby_eyestalks();",
    "renders": true
  },
  {
    "pokemon": "kingler",
    "openscad_code": "// Kingler Pokemon - Realistic Style, Medium Complexity\n// 3D printable model with proper wall thickness\n\n$fn = 50; // Smooth curves\nbody_color = \"#FF6B35\";\nshell_color = \"#B8860B\";\nclaw_color = \"#E6E6E6\";\neye_color = \"#000000\";\nhighlight_color = \"#FFFFFF\";\n\nmodule kingler() {\n    // Main body\n    color(body_color)\n    union() {\n        // Torso\n        translate([0, 0, 10])\n        scale([1.2, 1, 1.5])\n        sphere(r = 15);\n        \n        // Head\n        translate([0, 0, 35])\n        scale([1.3, 1.1, 1.2])\n        sphere(r = 12);\n        \n        // Snout\n        translate([0, 15, 30])\n        scale([0.8, 1.2, 0.8])\n        sphere(r = 8);\n        \n        // Eyes\n        color(eye_color)\n        translate([-6, 12, 38])\n        sphere(r = 2);\n        \n        color(highlight_color)\n        translate([-5, 13, 39])\n        sphere(r = 0.8);\n        \n        color(eye_color)\n        translate([6, 12, 38])\n        sphere(r = 2);\n        \n        color(highlight_color)\n        translate([7, 13, 39])\n        sphere(r = 0.8);\n    }\n    \n    // Shell\n    color(shell_color)\n    union() {\n        // Main shell\n        translate([0, -12, 25])\n        scale([1.8, 1.4, 0.8])\n        sphere(r = 12);\n        \n        // Shell spikes\n        for(i = [-1:1]) {\n            translate([i * 10, -20, 28])\n            scale([0.8, 0.8, 1.2])\n            sphere(r = 4);\n        }\n    }\n    \n    // Large claw\n    color(claw_color)\n    union() {\n        // Claw base\n        translate([25, 0, 20])\n        rotate([0, 0, -30])\n        cylinder(h = 15, r1 = 8, r2 = 6);\n        \n        // Claw pincer top\n        translate([35, -5, 25])\n        rotate([0, 0, -30])\n        scale([2, 0.8, 0.8])\n        sphere(r = 8);\n        \n        // Claw pincer bottom\n        translate([35, -2, 18])\n        rotate([0, 0, -30])\n        scale([2, 0.8, 0.8])\n        sphere(r = 7);\n        \n        // Teeth on claw\n        for(i = [0:3]) {\n            translate([38 - i * 3, -5, 25])\n            rotate([0, 0, -30])\n            cube([1, 2, 1], center = true);\n        }\n    }\n    \n    // Small claw\n    color(claw_color)\n    union() {\n        // Arm\n        translate([-20, 0, 18])\n        rotate([0, 0, 30])\n        cylinder(h = 12, r1 = 5, r2 = 4);\n        \n        // Claw\n        translate([-30, 5, 18])\n        rotate([0, 0, 30])\n        scale([1.5, 0.6, 0.6])\n        sphere(r = 6);\n    }\n    \n    // Legs\n    color(body_color)\n    union() {\n        // Front legs\n        for(side = [-1, 1]) {\n            translate([side * 12, 0, 5])\n            rotate([0, side * 15, 0])\n            cylinder(h = 15, r = 4);\n            \n            // Feet\n            translate([side * 12, 0, 2])\n            scale([1.5, 2, 0.5])\n            sphere(r = 4);\n        }\n        \n        // Back legs\n        for(side = [-1, 1]) {\n            translate([side * 8, -15, 5])\n            rotate([0, side * -20, 0])\n            cylinder(h = 12, r = 3.5);\n            \n            // Feet\n            translate([side * 8, -20, 2])\n            scale([1.3, 1.8, 0.5])\n            sphere(r = 3.5);\n        }\n    }\n    \n    // Tail\n    color(body_color)\n    union() {\n        translate([0, -25, 15])\n        rotate([20, 0, 0])\n        cylinder(h = 20, r1 = 5, r2 = 3);\n        \n        translate([0, -40, 10])\n        scale([1.2, 0.8, 0.8])\n        sphere(r = 4);\n    }\n}\n\n// Main assembly\nscale([0.8, 0.8, 0.8])\nkingler();",
    "renders": true
  },
  {
    "pokemon": "voltorb",
    "openscad_code": "// Voltorb Pokemon - Realistic Style, Medium Complexity\n// Size: 60mm diameter, 3D printable with 2mm wall thickness\n\n// Main color palette\n$fa = 2;\n$fs = 0.5;\n\n// Main body - slightly flattened sphere for realistic look\nmodule voltorb_body() {\n    color([0.9, 0.1, 0.1])  // Deep red\n    difference() {\n        scale([1, 1, 0.9])\n        sphere(d = 60);\n        \n        // Hollow interior for 3D printing\n        scale([0.93, 0.93, 0.83])\n        sphere(d = 60);\n    }\n}\n\n// Eye sockets for realistic depth\nmodule eye_socket(pos_x, pos_y) {\n    translate([pos_x, pos_y, 25])\n    rotate([0, 0, 0])\n    color([0.05, 0.05, 0.05])\n    cylinder(h = 5, d1 = 12, d2 = 10, $fn = 16);\n}\n\n// Eye whites\nmodule eye_white(pos_x, pos_y) {\n    translate([pos_x, pos_y, 21])\n    color([0.95, 0.95, 0.95])\n    sphere(d = 9);\n}\n\n// Pupils with realistic iris pattern\nmodule pupil(pos_x, pos_y) {\n    translate([pos_x, pos_y, 20])\n    color([0.1, 0.1, 0.1])\n    sphere(d = 5);\n    \n    // Iris ring\n    translate([pos_x, pos_y, 20.5])\n    color([0.3, 0.1, 0.1])\n    cylinder(h = 0.5, d1 = 7, d2 = 7, $fn = 32);\n}\n\n// Electric bolt marking on top\nmodule electric_marking() {\n    color([0.95, 0.95, 0.1])  // Bright yellow\n    translate([0, 0, 28])\n    linear_extrude(height = 1)\n    polygon(points=[\n        [0, 8],\n        [-2, 4],\n        [-1, 4],\n        [-3, 0],\n        [-1, 0],\n        [-2, -4],\n        [0, -4],\n        [2, -2],\n        [1, -2],\n        [3, 2],\n        [1, 2],\n        [2, 6]\n    ]);\n}\n\n// Surface texture pattern for realistic look\nmodule surface_pattern() {\n    for(i = [0:30:330]) {\n        rotate([0, 0, i])\n        translate([20, 0, 0])\n        color([0.8, 0.05, 0.05])\n        rotate([90, 0, 0])\n        cylinder(h = 0.5, d = 3, $fn = 6);\n    }\n    \n    for(i = [15:30:345]) {\n        rotate([0, 0, i])\n        translate([30, 0, 0])\n        color([0.8, 0.05, 0.05])\n        rotate([90, 0, 0])\n        cylinder(h = 0.5, d = 2.5, $fn = 6);\n    }\n}\n\n// Bottom flat area for stability\nmodule bottom_flat() {\n    color([0.9, 0.1, 0.1])\n    translate([0, 0, -25])\n    cylinder(h = 5, d = 40);\n}\n\n// Assembly\nunion() {\n    voltorb_body();\n    \n    // Add bottom flat area\n    bottom_flat();\n    \n    // Eyes\n    eye_socket(-15, 10);\n    eye_socket(15, 10);\n    \n    eye_white(-15, 10);\n    eye_white(15, 10);\n    \n    pupil(-15, 10);\n    pupil(15, 10);\n    \n    // Electric marking\n    electric_marking();\n    \n    // Surface texture\n    surface_pattern();\n}",
    "renders": true
  },
  {
    "pokemon": "electrode",
    "openscad_code": "// Realistic Electrode OpenSCAD Code\n// Medium complexity with 3D-printable features\n\nmodule electrode_body() {\n    color(\"red\")\n    difference() {\n        // Main spherical body\n        sphere(d=60, $fn=80);\n        \n        // Bottom hemisphere removal for flat base\n        translate([0, 0, -30])\n        cube([80, 80, 30], center=true);\n    }\n}\n\nmodule electrode_bottom() {\n    color(\"white\")\n    difference() {\n        // White bottom half\n        translate([0, 0, -15])\n        cylinder(h=30, d1=60, d2=58, $fn=80);\n        \n        // Slight indentation for realistic seam\n        translate([0, 0, -15.1])\n        cylinder(h=0.2, d=58.5, $fn=80);\n    }\n}\n\nmodule electrode_eyes() {\n    // Left eye\n    color(\"white\")\n    translate([-15, 20, 10])\n    sphere(d=12, $fn=32);\n    \n    // Right eye\n    color(\"white\")\n    translate([15, 20, 10])\n    sphere(d=12, $fn=32);\n    \n    // Left pupil\n    color(\"black\")\n    translate([-15, 21, 10])\n    sphere(d=6, $fn=16);\n    \n    // Right pupil\n    color(\"black\")\n    translate([15, 21, 10])\n    sphere(d=6, $fn=16);\n    \n    // Eye highlights\n    color(\"white\")\n    translate([-13, 23, 12])\n    sphere(d=2, $fn=8);\n    \n    color(\"white\")\n    translate([17, 23, 12])\n    sphere(d=2, $fn=8);\n}\n\nmodule electrode_mouth() {\n    color(\"black\")\n    translate([0, 25, -5])\n    rotate([90, 0, 0])\n    cylinder(h=1, d1=20, d2=15, $fn=32);\n    \n    // Mouth interior\n    color(\"darkgray\")\n    translate([0, 25, -5.5])\n    rotate([90, 0, 0])\n    cylinder(h=3, d1=18, d2=10, $fn=32);\n}\n\nmodule electrode_markings() {\n    // Lightning bolt pattern\n    color(\"yellow\")\n    for(i=[-1, 1]) {\n        translate([i*20, 0, 28])\n        rotate([0, 0, i*15])\n        scale([0.3, 1, 0.1])\n        cylinder(h=25, d=8, $fn=3);\n        \n        translate([i*20, 12, 28])\n        rotate([0, 0, i*-15])\n        scale([0.3, 1, 0.1])\n        cylinder(h=20, d=8, $fn=3);\n    }\n    \n    // Energy rings\n    color(\"orange\")\n    translate([0, 0, 25])\n    cylinder(h=1, d=50, $fn=6);\n    \n    translate([0, 0, 20])\n    cylinder(h=1, d=45, $fn=6);\n}\n\nmodule electrode_detail_lines() {\n    // Seam lines around equator\n    color(\"darkred\")\n    difference() {\n        translate([0, 0, 0])\n        cylinder(h=1, d=60.2, $fn=80);\n        \n        translate([0, 0, -0.5])\n        cylinder(h=2, d=59.8, $fn=80);\n    }\n}\n\n// Assembly\nelectrode_body();\nelectrode_bottom();\nelectrode_eyes();\nelectrode_mouth();\nelectrode_markings();\nelectrode_detail_lines();",
    "renders": true
  },
  {
    "pokemon": "exeggcute",
    "openscad_code": "$fn=30;\n\n// Exeggcute - Realistic Style, Medium Complexity\n// Scale to ~80mm width\n\nmodule exeggcute() {\n    // Colors\n    color_light_purple = [0.85, 0.75, 0.9];\n    color_dark_purple = [0.45, 0.3, 0.6];\n    color_yolk = [1, 0.85, 0.2];\n    color_eye = [0, 0, 0];\n    color_stem = [0.1, 0.5, 0.2];\n    color_crack = [0.3, 0.2, 0.4];\n    color_shadow = [0.2, 0.1, 0.3];\n\n    // Stem module\n    module stem() {\n        color(color_stem) {\n            // Main stem\n            translate([0, 0, -5]) {\n                cylinder(h=10, r1=2.5, r2=1.5);\n            }\n            // Leaves\n            rotate([0, -30, 0]) {\n                translate([0, 3, -2]) {\n                    scale([1, 0.3, 1]) {\n                        sphere(3);\n                    }\n                }\n            }\n            rotate([0, 30, 180]) {\n                translate([0, 3, -2]) {\n                    scale([1, 0.3, 1]) {\n                        sphere(3);\n                    }\n                }\n            }\n        }\n    }\n\n    // Single egg module\n    module egg(rotation=[0,0,0], translation=[0,0,0], crack_type=0) {\n        color(color_light_purple) {\n            // Main egg body\n            translate(translation) {\n                rotate(rotation) {\n                    scale([1, 1.2, 1]) {\n                        sphere(12);\n                    }\n                    \n                    // Crack details\n                    color(color_crack) {\n                        if (crack_type == 0) {\n                            // Large crack\n                            translate([0, 0, 9]) {\n                                linear_extrude(height=1) {\n                                    polygon(points=[[0,0], [3,2], [1,4], [-1,3], [-2,5], [-4,2], [-2,0]]);\n                                }\n                            }\n                        } else if (crack_type == 1) {\n                            // Small crack\n                            translate([0, 2, 8]) {\n                                rotate([0, 90, 0]) {\n                                    cylinder(h=8, r=0.5);\n                                }\n                            }\n                        } else {\n                            // Multiple cracks\n                            for (i = [0:4]) {\n                                rotate([0, 0, i*72]) {\n                                    translate([0, 8, 5]) {\n                                        cube([1, 4, 0.5], center=true);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    \n                    // Eyes\n                    color(color_eye) {\n                        // Left eye\n                        translate([-4, 5, 8]) {\n                            scale([1, 1.5, 0.5]) {\n                                sphere(2);\n                            }\n                        }\n                        // Right eye\n                        translate([4, 5, 8]) {\n                            scale([1, 1.5, 0.5]) {\n                                sphere(2);\n                            }\n                        }\n                    }\n                    \n                    // Yolk showing through crack\n                    color(color_yolk) {\n                        translate([0, 0, 8.5]) {\n                            sphere(4);\n                        }\n                    }\n                    \n                    // Purple spots\n                    color(color_dark_purple) {\n                        for (phi = [30:60:150]) {\n                            for (theta = [0:45:315]) {\n                                rotate([phi, 0, theta]) {\n                                    translate([0, 0, 11.5]) {\n                                        sphere(1);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    // Create the cluster of 6 eggs\n    union() {\n        // Front center egg\n        egg([0, 0, 0], [0, 0, 0], 0);\n        \n        // Top egg\n        egg([0, -30, 0], [0, 15, 8], 1);\n        \n        // Bottom left egg\n        egg([0, 30, -30], [-12, -8, -6], 2);\n        \n        // Bottom right egg\n        egg([0, 30, 30], [12, -8, -6], 0);\n        \n        // Back left egg\n        egg([30, 0, 45], [-8, -2, -12], 1);\n        \n        // Back right egg\n        egg([-30, 0, -45], [8, -2, -12], 2);\n        \n        // Stems for bottom eggs\n        translate([-12, -8, -16]) {\n            rotate([0, 0, -30]) {\n                stem();\n            }\n        }\n        translate([12, -8, -16]) {\n            rotate([0, 0, 30]) {\n                stem();\n            }\n        }\n    }\n}\n\n// Render the complete model\nexeggcute();",
    "renders": true
  },
  {
    "pokemon": "exeggutor",
    "openscad_code": "// Exeggutor - Realistic Style, Medium Complexity\n// OpenSCAD 3D printable model\n\n// Color definitions\n$fn = 32;\nbody_color = \"#78C850\";  // Grass green\ncoconut_color = \"#8B4513\";  // Saddle brown\nface_color = \"#F5DEB3\";  // Wheat\neye_color = \"#FF0000\";  // Red\nmouth_color = \"#2F4F2F\";  // Dark green\nstalk_color = \"#90EE90\";  // Light green\n\n// Main body - palm tree trunk\nmodule trunk() {\n    color(body_color) {\n        translate([0, 0, 0])\n            cylinder(h = 60, d1 = 18, d2 = 12);\n        \n        // Trunk segments for realistic texture\n        for (i = [0:5:55]) {\n            translate([0, 0, i])\n                cylinder(h = 3, d1 = 16 - i/10, d2 = 15 - i/10);\n        }\n    }\n}\n\n// Coconut heads with faces\nmodule coconut_head(x, y, z, rot_x, rot_y, rot_z) {\n    translate([x, y, z]) {\n        rotate([rot_x, rot_y, rot_z]) {\n            color(coconut_color) {\n                // Main coconut\n                sphere(d = 22);\n                \n                // Face area\n                color(face_color) {\n                    translate([0, -10, 5])\n                        sphere(d = 15);\n                }\n                \n                // Eyes\n                color(eye_color) {\n                    translate([-5, -12, 8])\n                        sphere(d = 4);\n                    translate([5, -12, 8])\n                        sphere(d = 4);\n                }\n                \n                // Mouth\n                color(mouth_color) {\n                    translate([0, -8, 3])\n                        rotate([90, 0, 0])\n                        cylinder(h = 2, d1 = 6, d2 = 3);\n                }\n                \n                // Coconut texture lines\n                for (i = [0:30:360]) {\n                    rotate([0, 0, i])\n                        translate([11, 0, 0])\n                            cube([1, 0.5, 22], center = true);\n                }\n            }\n        }\n    }\n}\n\n// Palm leaves\nmodule palm_leaf(length, width, angle) {\n    color(stalk_color) {\n        rotate([0, 0, angle]) {\n            // Main leaf blade\n            translate([length/2, 0, 0])\n                scale([length, width, 1])\n                cube([1, 1, 0.5], center = true);\n            \n            // Leaf segments\n            for (i = [0:5:length]) {\n                translate([i, 0, 0.5])\n                    rotate([0, 0, i/2])\n                        cube([length/10, width/2, 0.3], center = true);\n                translate([i, 0, -0.5])\n                    rotate([0, 0, -i/2])\n                        cube([length/10, width/2, 0.3], center = true);\n            }\n        }\n    }\n}\n\n// Leaf crown assembly\nmodule leaf_crown() {\n    translate([0, 0, 70]) {\n        // Central stalk\n        color(stalk_color) {\n            cylinder(h = 20, d = 4);\n        }\n        \n        // Palm leaves in radial pattern\n        for (i = [0:45:360]) {\n            translate([0, 0, 20])\n                rotate([30, 0, 0])\n                    palm_leaf(35, 8, i);\n        }\n    }\n}\n\n// Feet for stability\nmodule feet() {\n    color(body_color) {\n        translate([-8, -8, -2])\n            cylinder(h = 4, d = 8);\n        translate([8, -8, -2])\n            cylinder(h = 4, d = 8);\n        translate([0, 8, -2])\n            cylinder(h = 4, d = 8);\n    }\n}\n\n// Main assembly\nunion() {\n    // Base and trunk\n    feet();\n    trunk();\n    \n    // Three coconut heads\n    coconut_head(0, 15, 65, -20, 0, 0);\n    coconut_head(-15, -5, 60, 10, -15, -30);\n    coconut_head(15, -5, 60, 10, 15, 30);\n    \n    // Leaf crown\n    leaf_crown();\n}",
    "renders": true
  }
]