[
  {
    "food_item": "steak",
    "openscad_code": "// Realistic Medium-Complexity 3D-Printable Steak\n// Dimensions: ~75 mm x 55 mm x 12 mm\n\n// Overall color: medium-rare reddish-brown\ncolor([0.55, 0.25, 0.20]) {\n\n    // Main steak body with organic irregular shape\n    difference() {\n        // Base slab – slightly tapered toward edges\n        hull() {\n            for (i = [0:7]) {\n                translate([\n                    35 * sin(i * 45) + 5 * sin(i * 90),\n                    25 * cos(i * 45) + 3 * cos(i * 120),\n                    0\n                ])\n                sphere(d = 10, $fn = 12);\n            }\n        }\n        // Thickness\n        linear_extrude(height = 12) offset(delta = -2) {\n            projection() hull() {\n                for (i = [0:7]) {\n                    translate([\n                        35 * sin(i * 45) + 5 * sin(i * 90),\n                        25 * cos(i * 45) + 3 * cos(i * 120),\n                        0\n                    ])\n                    circle(d = 10, $fn = 12);\n                }\n            }\n        }\n    }\n\n    // Fat marbling veins\n    color([0.95, 0.90, 0.85]) {\n        for (ang = [0:30:150]) {\n            rotate([0, 0, ang])\n            translate([0, 0, 6])\n            hull() {\n                for (t = [0:0.2:1]) {\n                    translate([\n                        25 * t - 10,\n                        10 * sin(t * 25) - 5,\n                        0\n                    ])\n                    sphere(d = 1.2 + 0.8 * sin(t * 18), $fn = 8);\n                }\n            }\n        }\n    }\n\n    // Grill/sear stripes (raised ridges)\n    color([0.35, 0.15, 0.10]) {\n        for (y = [-20:5:20]) {\n            translate([0, y, 12])\n            rotate([90, 0, 0])\n            cylinder(h = 1.5, d1 = 3, d2 = 2.5, $fn = 6);\n        }\n    }\n\n    // Slight edge curl for realism\n    difference() {\n        translate([0, 0, 0])\n        scale([1, 1, 1])\n        children();\n        translate([0, 0, -1])\n        scale([0.92, 0.92, 1.2])\n        children();\n    }\n}\n\n// Optional plate for presentation\n/*\ncolor([0.9, 0.9, 0.9]) {\n    translate([0, 0, -3])\n    cylinder(h = 3, d = 100, $fn = 64);\n}\n*/",
    "renders": true
  },
  {
    "food_item": "chicken",
    "openscad_code": "// Realistic Chicken Drumstick - 3D Printable Food Model\n// Dimensions: ~75mm total height\n\n$fn = 32;\nwall_thickness = 2;\n\n// Main colors\nchicken_color = \"#E8C39E\";\nbone_color = \"#F5F5DC\";\nseasoning_color = \"#8B4513\";\n\n// Seasoning speckle module\nmodule seasoning_speckle(pos_x, pos_y, pos_z) {\n    translate([pos_x, pos_y, pos_z])\n        scale([0.8, 0.8, 0.3])\n            sphere(r = 0.5);\n}\n\n// Create the meat texture with bumps and indentations\nmodule meat_texture() {\n    difference() {\n        // Main meat body\n        color(chicken_color)\n        sphere(r = 20);\n        \n        // Random indentations for realistic texture\n        for(i = [0:20]) {\n            rotate([rand(i*5)*360, rand(i*7)*360, 0])\n                translate([rand(i*3)*15-7.5, rand(i*11)*15-7.5, rand(i*13)*10-5])\n                    sphere(r = rand(i*17)*2 + 1);\n        }\n    }\n    \n    // Add small bumps for crispy texture\n    for(i = [0:35]) {\n        rotate([rand(i*23)*360, rand(i*29)*360, 0])\n            translate([rand(i*31)*18-9, rand(i*37)*18-9, rand(i*41)*18-9])\n                scale([1.2, 1.2, 0.6])\n                    sphere(r = 0.8);\n    }\n}\n\n// Bone handle\nmodule bone_handle() {\n    color(bone_color)\n    union() {\n        // Main bone cylinder\n        translate([0, 0, 25])\n            cylinder(h = 35, r1 = 6, r2 = 4);\n        \n        // Knobby end\n        translate([0, 0, 60])\n            sphere(r = 6);\n        \n        // Bone texture rings\n        for(i = [0:4]) {\n            translate([0, 0, 28 + i*6])\n                rotate([0, 0, 45])\n                    cylinder(h = 0.5, r = 6.2);\n        }\n    }\n}\n\n// Seasoning coating\nmodule seasoning_coating() {\n    color(seasoning_color)\n    for(i = [0:50]) {\n        rotate([rand(i*43)*360, rand(i*47)*360, 0])\n            translate([rand(i*53)*35-17.5, rand(i*59)*35-17.5, rand(i*61)*35-17.5])\n                seasoning_speckle(0, 0, 0);\n    }\n}\n\n// Main assembly\nunion() {\n    // Position meat on bone\n    translate([0, 0, 5])\n        rotate([0, 0, 15])\n            meat_texture();\n    \n    // Bone handle\n    bone_handle();\n    \n    // Add seasoning coating\n    translate([0, 0, 5])\n        seasoning_coating();\n}\n\n// Helper function for pseudo-random numbers\nfunction rand(n) = abs(sin(n*123.456))*2;",
    "renders": true
  },
  {
    "food_item": "fish",
    "openscad_code": "// Fish food pellet - realistic style with medium complexity\n// A realistic fish food pellet with textured surface and food coloring\n\n// Main module for the fish food pellet\nmodule fish_food_pellet() {\n    // Main pellet body - slightly flattened ellipsoid\n    color([0.85, 0.65, 0.25])  // Golden yellow color\n    scale([1, 0.7, 0.4])\n    sphere(r = 10, $fn = 32);\n    \n    // Add surface texture with small bumps\n    for(i = [0:15]) {\n        rotate([rand(0, 360), rand(0, 360), rand(0, 360)])\n        translate([rand(-8, 8), rand(-6, 6), rand(-3, 3)])\n        color([0.75, 0.55, 0.15])\n        sphere(r = 0.8, $fn = 8);\n    }\n    \n    // Create spiral ridges around the pellet\n    for(angle = [0:30:360]) {\n        rotate([0, 0, angle])\n        translate([8 * cos(angle * 3), 6 * sin(angle * 3), 0])\n        color([0.9, 0.7, 0.3])\n        sphere(r = 1.2, $fn = 6);\n    }\n    \n    // Add nutritional particles (green and red specs)\n    for(i = [0:8]) {\n        rotate([rand(0, 180), rand(0, 180), rand(0, 180)])\n        translate([rand(-7, 7), rand(-5, 5), rand(0, 1)])\n        color([0.2, 0.6, 0.3])  // Green algae particles\n        sphere(r = 0.6, $fn = 6);\n    }\n    \n    for(i = [0:5]) {\n        rotate([rand(0, 180), rand(0, 180), rand(0, 180)])\n        translate([rand(-6, 6), rand(-4, 4), rand(-1, 0)])\n        color([0.7, 0.2, 0.2])  // Red protein particles\n        sphere(r = 0.7, $fn = 6);\n    }\n    \n    // Bottom flat surface for stable printing\n    translate([0, 0, -4])\n    color([0.85, 0.65, 0.25])\n    cylinder(h = 0.5, r1 = 10, r2 = 9.5, $fn = 32);\n}\n\n// Helper function for random values\nfunction rand(min, max) = min + (max - min) * (rands(0, 1, 1)[0]);\n\n// Create a small pile of pellets\ntranslate([0, 0, 0])\nfish_food_pellet();\n\ntranslate([22, 0, 0])\nrotate([0, 0, 15])\nfish_food_pellet();\n\ntranslate([11, 18, 0])\nrotate([0, 0, -25])\nfish_food_pellet();",
    "renders": true
  },
  {
    "food_item": "pork",
    "openscad_code": "// Realistic pork chop with bone and fat marbling\n// Dimensions: ~60mm x 45mm x 12mm\n\n$fn = 32;\n\nmodule pork_chop() {\n    color(\"#E8B5A2\") {\n        // Main meat portion\n        difference() {\n            // Base shape\n            translate([0, 0, -6])\n                scale([1, 0.8, 0.3])\n                    sphere(r = 30);\n            \n            // Bone cutout\n            translate([-25, 0, -7])\n                rotate([0, 90, 0])\n                    cylinder(h = 50, r1 = 5, r2 = 7);\n            \n            // Taper edges\n            translate([0, 0, 2])\n                scale([0.85, 0.65, 0.2])\n                    sphere(r = 35);\n        }\n        \n        // Fat layer on edges\n        color(\"#FFF5E1\") {\n            hull() {\n                translate([25, 0, -3])\n                    sphere(r = 8);\n                translate([-25, 0, -3])\n                    sphere(r = 8);\n                translate([0, 20, -3])\n                    sphere(r = 8);\n                translate([0, -20, -3])\n                    sphere(r = 8);\n            }\n        }\n    }\n    \n    // Bone\n    color(\"#F5F5DC\") {\n        translate([-27, 0, -5])\n            rotate([0, 90, 0])\n                cylinder(h = 55, r1 = 4, r2 = 6);\n        \n        // Bone end\n        translate([-30, 0, -5])\n            rotate([0, 90, 0])\n                scale([1, 1, 0.5])\n                    sphere(r = 6);\n    }\n    \n    // Fat marbling\n    color(\"#FFF5E1\") {\n        for(i = [1:15]) {\n            translate([\n                -20 + 40 * rands(0, 1, 1)[0],\n                -15 + 30 * rands(0, 1, 1)[0],\n                -2 + 4 * rands(0, 1, 1)[0]\n            ]) {\n                scale([1, 0.3, 0.1])\n                    sphere(r = 1 + rands(0, 2, 1)[0]);\n            }\n        }\n    }\n    \n    // Meat grain texture\n    color(\"#D4A082\") {\n        for(i = [1:30]) {\n            translate([\n                -20 + 40 * rands(0, 1, 1)[0],\n                -15 + 30 * rands(0, 1, 1)[0],\n                -3 + 6 * rands(0, 1, 1)[0]\n            ]) {\n                rotate([0, 90, rands(0, 360, 1)[0]])\n                    scale([0.1, 0.1, 0.5])\n                        cylinder(h = 5, r = 0.3);\n            }\n        }\n    }\n}\n\npork_chop();",
    "renders": true
  },
  {
    "food_item": "beef",
    "openscad_code": "// Realistic Beef Steak - Medium Complexity\n// Dimensions: ~80mm x 60mm x 25mm\n\ncolor([0.6, 0.3, 0.2]) {\n    // Main steak body with organic shape\n    difference() {\n        // Base steak shape - elongated ellipsoid\n        scale([1.2, 1, 0.6])\n            sphere(d=50, $fn=40);\n        \n        // Taper one end to make it steak-shaped\n        translate([20, 0, -15])\n            rotate([0, 90, 0])\n                cylinder(h=50, d1=40, d2=0, $fn=30);\n    }\n    \n    // Fat marbling - white streaks\n    color([0.95, 0.9, 0.85]) {\n        for(i = [0:7]) {\n            rotate([0, 90, i*25])\n                translate([0, 0, -5 + i*2])\n                    scale([1.2, 0.1, 0.05])\n                        sphere(d=40, $fn=20);\n        }\n        \n        // Additional fat pockets\n        translate([-10, 8, 3])\n            sphere(d=6, $fn=15);\n        translate([5, -10, 2])\n            sphere(d=4, $fn=15);\n        translate([15, 12, 1])\n            sphere(d=5, $fn=15);\n    }\n}\n\n// Grill marks on top surface\ncolor([0.4, 0.2, 0.1]) {\n    module grill_mark(x, y, rot) {\n        translate([x, y, 12])\n            rotate([0, 0, rot])\n                cube([20, 2, 1], center=true);\n    }\n    \n    for(i = [0:4]) {\n        grill_mark(-15 + i*8, 0, 0);\n    }\n    for(i = [0:3]) {\n        grill_mark(-10 + i*8, 0, 90);\n    }\n}\n\n// Juicy surface texture - small bumps\ncolor([0.5, 0.25, 0.15]) {\n    module juice_bump(x, y, z) {\n        translate([x, y, z])\n            sphere(d=1.5, $fn=8);\n    }\n    \n    for(x = [-20:5:20]) {\n        for(y = [-15:5:15]) {\n            juice_bump(x + rand(-2,2), y + rand(-2,2), 12 + rand(0,0.5));\n        }\n    }\n}\n\n// Edge crust - darker on sides\ncolor([0.35, 0.15, 0.1]) {\n    difference() {\n        // Slightly larger shell for crust\n        scale([1.25, 1.05, 0.65])\n            sphere(d=50, $fn=40);\n        \n        // Remove interior to leave only crust\n        scale([1.15, 0.95, 0.6])\n            sphere(d=50, $fn=40);\n    }\n}\n\n// Bottom flat surface for stable printing\ntranslate([0, 0, -12])\n    cube([80, 60, 2], center=true);",
    "renders": true
  },
  {
    "food_item": "lamb",
    "openscad_code": "// Realistic 3D printable lamb leg roast\n// Approximate size: 80 mm length\n\n// Main color definitions\n$fa = 2;\n$fs = 0.5;\n\nmodule lamb_leg() {\n    color([0.95, 0.75, 0.65]) {\n        // Main meat body - tapered cylinder\n        translate([0, 0, 5]) {\n            cylinder(h = 60, r1 = 25, r2 = 18, center = false);\n        }\n        \n        // Shank bone end - smaller cylinder\n        translate([0, 0, 65]) {\n            cylinder(h = 15, r = 12, center = false);\n        }\n        \n        // Fat cap on top\n        color([0.98, 0.85, 0.75]) {\n            translate([0, 0, 5]) {\n                difference() {\n                    cylinder(h = 8, r = 25.5, center = false);\n                    cylinder(h = 9, r = 22, center = false);\n                }\n            }\n        }\n    }\n}\n\n// Meat texture pattern using small spheres\nmodule meat_texture() {\n    color([0.85, 0.65, 0.55]) {\n        for (i = [0:8]) {\n            rotate([0, 0, i * 45]) {\n                translate([15 * cos(i * 45), 15 * sin(i * 45), 30]) {\n                    sphere(r = 3);\n                }\n            }\n        }\n        for (j = [0:6]) {\n            rotate([0, 0, j * 60]) {\n                translate([20 * cos(j * 60), 20 * sin(j * 60), 45]) {\n                    sphere(r = 2.5);\n                }\n            }\n        }\n    }\n}\n\n// Herb crust details\nmodule herb_crust() {\n    color([0.4, 0.3, 0.15]) {\n        // Rosemary sprigs\n        for (k = [0:4]) {\n            rotate([90, 0, k * 72]) {\n                translate([15, 0, 20 + k * 10]) {\n                    cylinder(h = 8, r = 0.5, center = false);\n                }\n            }\n        }\n        \n        // Garlic pieces\n        for (m = [0:3]) {\n            rotate([0, 0, m * 90]) {\n                translate([18 * cos(m * 90), 18 * sin(m * 90), 35]) {\n                    sphere(r = 1.5);\n                }\n            }\n        }\n    }\n}\n\n// Cooking twine wraps\nmodule twine_wraps() {\n    color([0.5, 0.3, 0.1]) {\n        for (z = [15:20:55]) {\n            rotate_extrude(angle = 360) {\n                translate([26, 0, 0]) {\n                    circle(r = 0.8);\n                }\n            }\n        }\n    }\n}\n\n// Render the complete lamb leg\nunion() {\n    lamb_leg();\n    meat_texture();\n    herb_crust();\n    twine_wraps();\n}",
    "renders": true
  },
  {
    "food_item": "turkey",
    "openscad_code": "// Realistic 3D printable turkey food model\n// Overall dimensions: ~65mm x 45mm x 40mm\n\n// Color definitions\ncolor_turkey = \"#D2691E\";\ncolor_turkey_dark = \"#8B4513\";\ncolor_bone = \"#FFF8DC\";\ncolor_skin = \"#F4A460\";\n\n// Main turkey body\nmodule turkey_body() {\n    color(color_turkey) {\n        union() {\n            // Main breast\n            translate([0, 0, 15]) {\n                scale([1, 0.8, 1]) {\n                    sphere(d=40);\n                }\n            }\n            \n            // Back portion\n            translate([0, 15, 10]) {\n                scale([1.2, 0.6, 0.8]) {\n                    sphere(d=35);\n                }\n            }\n            \n            // Wings\n            // Left wing\n            translate([-20, 5, 12]) {\n                rotate([0, 0, 30]) {\n                    scale([0.8, 0.3, 0.5]) {\n                        sphere(d=20);\n                    }\n                }\n            }\n            \n            // Right wing\n            translate([20, 5, 12]) {\n                rotate([0, 0, -30]) {\n                    scale([0.8, 0.3, 0.5]) {\n                        sphere(d=20);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Drumstick module\nmodule drumstick(side) {\n    color(color_turkey_dark) {\n        translate([side * 15, -15, 5]) {\n            rotate([90, 0, 0]) {\n                union() {\n                    // Meat portion\n                    scale([0.8, 0.8, 1.2]) {\n                        sphere(d=18);\n                    }\n                    \n                    // Bone\n                    translate([0, 0, 12]) {\n                        color(color_bone) {\n                            cylinder(h=20, d=5, center=true);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Texture lines for turkey skin\nmodule skin_texture() {\n    color(color_skin) {\n        for(i = [-15:5:15]) {\n            translate([i, 0, 35]) {\n                rotate([90, 0, 0]) {\n                    scale([0.05, 0.05, 1]) {\n                        cylinder(h=20, d=3);\n                    }\n                }\n            }\n        }\n        \n        for(j = [-10:5:10]) {\n            translate([0, j, 35]) {\n                rotate([0, 90, 0]) {\n                    scale([0.05, 0.05, 1]) {\n                        cylinder(h=20, d=3);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Base turkey body\n    turkey_body();\n    \n    // Drumsticks\n    drumstick(1);  // Right\n    drumstick(-1); // Left\n    \n    // Skin texture details\n    skin_texture();\n    \n    // Bottom support base\n    translate([0, 0, -2]) {\n        color(color_turkey_dark) {\n            cylinder(h=2, d=50);\n        }\n    }\n}",
    "renders": true
  },
  {
    "food_item": "duck",
    "openscad_code": "// Realistic Duck-Shaped Bread Roll (medium complexity)\n// Inspired by Japanese Anpan - sweet bread roll with red bean paste\n\n// Overall dimensions: ~65mm x ~45mm x ~35mm\n\n$fn = 32;\n\n// Main bread body\nmodule bread_body() {\n    color(\"#E8B36B\")  // Golden-brown bread color\n    union() {\n        // Main oval body\n        scale([1, 0.8, 0.6])\n        sphere(20);\n        \n        // Head\n        translate([20, 0, 5])\n        scale([0.7, 0.7, 0.7])\n        sphere(15);\n        \n        // Neck connection\n        translate([10, 0, -2])\n        cylinder(h=15, r1=12, r2=8);\n    }\n}\n\n// Duck bill\nmodule duck_bill() {\n    color(\"#FF8C42\")  // Orange color\n    translate([32, 0, 2])\n    rotate([0, -20, 0])\n    scale([1.2, 0.6, 0.4])\n    cube([12, 8, 6], center=true);\n}\n\n// Eyes (sesame seeds)\nmodule sesame_seed(loc) {\n    color(\"#2C1810\")  // Dark brown sesame color\n    translate(loc)\n    scale([0.4, 0.4, 1])\n    sphere(1.5);\n}\n\n// Bread texture pattern\nmodule bread_texture() {\n    color(\"#D4A574\")\n    difference() {\n        // Main body for texture\n        bread_body();\n        \n        // Small indentations for realistic bread texture\n        for(i = [0:45]) {\n            rotate([0, 0, i*8])\n            translate([15*sin(i*12), 15*cos(i*12), 8])\n            sphere(1.5);\n        }\n        \n        // Surface imperfections\n        for(i = [0:25]) {\n            rotate([0, 0, i*15])\n            translate([10+8*sin(i*5), 8*cos(i*5), 10])\n            sphere(0.8);\n        }\n    }\n}\n\n// Wings as bread folds\nmodule wings() {\n    color(\"#E8B36B\")\n    union() {\n        // Left wing\n        translate([-5, 15, 0])\n        rotate([0, 0, -30])\n        scale([1, 0.3, 0.2])\n        sphere(12);\n        \n        // Right wing\n        translate([-5, -15, 0])\n        rotate([0, 0, 30])\n        scale([1, 0.3, 0.2])\n        sphere(12);\n    }\n}\n\n// Tail as bread end\nmodule tail() {\n    color(\"#D4A574\")\n    translate([-22, 0, -3])\n    rotate([0, 20, 0])\n    scale([0.8, 1, 0.5])\n    cylinder(h=15, r1=10, r2=6);\n}\n\n// Assembly\nunion() {\n    // Main textured body\n    bread_texture();\n    \n    // Bill\n    duck_bill();\n    \n    // Wings\n    wings();\n    \n    // Tail\n    tail();\n    \n    // Eyes\n    sesame_seed([28, 4, 8]);\n    sesame_seed([28, -4, 8]);\n    \n    // Additional sesame seeds on body\n    for(i = [0:8]) {\n        rotate([0, 0, i*40])\n        sesame_seed([5 + 10*cos(i), 10*sin(i), 12]);\n    }\n}",
    "renders": true
  },
  {
    "food_item": "salmon",
    "openscad_code": "// Realistic Salmon Fillet OpenSCAD Model\n// Medium complexity - 3D printable\n\n// Color definitions\ncolor_flesh = \"#FF6B6B\";\ncolor_skin = \"#D2691E\";\ncolor_fat = \"#FFF8DC\";\n\n// Main fillet module\nmodule salmon_fillet() {\n    // Base fillet shape - tapered ellipsoid\n    translate([0, 0, 5])\n    scale([1, 0.7, 0.4])\n    sphere(20, $fn=50);\n    \n    // Tail section - thinner\n    translate([-15, 0, 0])\n    scale([0.7, 0.5, 0.25])\n    sphere(15, $fn=40);\n    \n    // Thicker head section\n    translate([10, 0, 0])\n    scale([1.2, 0.8, 0.5])\n    sphere(18, $fn=45);\n}\n\n// Skin layer with scales\nmodule skin_layer() {\n    color(color_skin) {\n        // Main skin surface\n        translate([0, 0, 9])\n        scale([1.02, 0.72, 0.42])\n        sphere(20, $fn=50);\n        \n        // Tail skin\n        translate([-15, 0, 4])\n        scale([0.72, 0.52, 0.27])\n        sphere(15, $fn=40);\n        \n        // Head skin\n        translate([10, 0, 6])\n        scale([1.22, 0.82, 0.52])\n        sphere(18, $fn=45);\n    }\n}\n\n// Fat layer between skin and flesh\nmodule fat_layer() {\n    color(color_fat) {\n        translate([0, 0, 8.5])\n        scale([1.01, 0.71, 0.41])\n        sphere(20, $fn=50);\n        \n        translate([-15, 0, 3.5])\n        scale([0.71, 0.51, 0.26])\n        sphere(15, $fn=40);\n        \n        translate([10, 0, 5.5])\n        scale([1.21, 0.81, 0.51])\n        sphere(18, $fn=45);\n    }\n}\n\n// Fish flakes texture\nmodule flakes() {\n    color(color_flesh) {\n        for(i = [-20:5:20]) {\n            for(j = [-8:4:8]) {\n                if(i*i + j*j < 400) {\n                    translate([i, j, 5])\n                    rotate([90, 0, 45])\n                    scale([0.1, 1, 0.05])\n                    cylinder(h=10, r=1, $fn=6);\n                }\n            }\n        }\n    }\n}\n\n// Skin texture pattern (scales)\nmodule scales() {\n    color(color_skin) {\n        for(i = [-20:3:20]) {\n            for(j = [-10:3:10]) {\n                if(i*i + j*j < 400) {\n                    translate([i, j, 9.5])\n                    rotate([0, 90, 0])\n                    scale([0.5, 0.3, 0.1])\n                    sphere(2, $fn=6);\n                }\n            }\n        }\n    }\n}\n\n// White fat lines in flesh\nmodule fat_lines() {\n    color(color_fat) {\n        for(i = [-15:8:15]) {\n            translate([i, 0, 5])\n            rotate([0, 90, 0])\n            scale([0.3, 1, 0.1])\n            cylinder(h=30, r=0.5, $fn=8);\n        }\n    }\n}\n\n// Main assembly\ncolor(color_flesh) salmon_fillet();\ncolor(color_fat) fat_layer();\ncolor(color_skin) skin_layer();\nflakes();\nscales();\nfat_lines();",
    "renders": true
  },
  {
    "food_item": "tuna",
    "openscad_code": "// Realistic 3D-printable Tuna Steak model\n// Medium complexity with characteristic fish features\n\n// Colors\n$fn = 32;\n\n// Main tuna steak body\nmodule tuna_steak() {\n    difference() {\n        // Main oval steak shape\n        scale([1.2, 1, 0.6])\n            sphere(d=40);\n        \n        // Cut flat bottom for printing\n        translate([0, 0, -20])\n            cube([100, 100, 40], center=true);\n    }\n}\n\n// Fish skin texture pattern\nmodule skin_texture() {\n    for(i = [0:10]) {\n        rotate([0, 0, i*36])\n            translate([0, 18, 0])\n                scale([1, 0.1, 0.05])\n                    sphere(d=8);\n    }\n}\n\n// Fat layer pattern\nmodule fat_layers() {\n    color(\"white\")\n    for(z = [-8:-2:2]) {\n        translate([0, 0, z])\n            scale([1.2, 0.95, 0.05])\n                sphere(d=40);\n    }\n}\n\n// Muscle fiber texture\nmodule fibers() {\n    color(\"firebrick\")\n    for(angle = [0:30:360]) {\n        rotate([0, 0, angle])\n            for(r = [0:2:18]) {\n                translate([r, 0, 0])\n                    rotate([90, 0, 90])\n                        scale([0.3, 0.3, 10])\n                            cylinder(h=0.5, d=1);\n            }\n    }\n}\n\n// Bloodline pattern\nmodule bloodline() {\n    color(\"darkred\")\n    translate([0, -8, -2])\n        scale([1.3, 0.2, 0.3])\n            sphere(d=30);\n}\n\n// Combine all components\ncolor(\"firebrick\")\nunion() {\n    // Main steak body\n    tuna_steak();\n    \n    // Skin on top surface\n    translate([0, 0, 11])\n        skin_texture();\n    \n    // Internal fat layers\n    fat_layers();\n    \n    // Muscle fibers visible from sides\n    fibers();\n    \n    // Bloodline near center\n    bloodline();\n}",
    "renders": true
  },
  {
    "food_item": "shrimp",
    "openscad_code": "// Realistic Shrimp Food Model for 3D Printing\n// Medium complexity with appropriate details and textures\n\n// Main parameters\nshrimp_length = 80;\nshrimp_height = 20;\nbody_segments = 8;\n\n// Color definitions\nshrimp_color = \"#FF6B47\";\ndarker_shrimp = \"#E55A3D\";\n\n// Create the entire shrimp\nmodule shrimp() {\n    color(shrimp_color) {\n        union() {\n            // Head and upper body\n            head();\n            \n            // Body segments\n            body();\n            \n            // Tail fan\n            tail();\n            \n            // Legs/swimmerets\n            legs();\n            \n            // Antennae\n            antennae();\n        }\n    }\n}\n\n// Shrimp head with eyes and rostrum\nmodule head() {\n    translate([shrimp_length * 0.85, 0, 0]) {\n        rotate([0, 15, 0]) {\n            // Main head shape\n            scale([1.2, 1, 0.8]) \n                sphere(d=shrimp_height * 1.5, $fn=20);\n            \n            // Rostrum (pointy nose)\n            translate([shrimp_height * 0.4, 0, shrimp_height * 0.3])\n                rotate([0, -30, 0])\n                    scale([2, 0.3, 0.3])\n                        cylinder(h=shrimp_height, d=shrimp_height/3, $fn=8);\n            \n            // Eyes\n            translate([shrimp_height * 0.5, shrimp_height * 0.4, shrimp_height * 0.5])\n                sphere(d=shrimp_height/4, $fn=12);\n            translate([shrimp_height * 0.5, -shrimp_height * 0.4, shrimp_height * 0.5])\n                sphere(d=shrimp_height/4, $fn=12);\n        }\n    }\n}\n\n// Segmented body\nmodule body() {\n    for(i = [1:body_segments]) {\n        segment = body_segments - i;\n        pos = shrimp_length * (0.85 - (i * 0.08));\n        scale_factor = 1 - (i * 0.08);\n        \n        translate([pos, 0, 0]) {\n            rotate([0, -10, 0]) {\n                scale([1, scale_factor, scale_factor * 0.8]) {\n                    sphere(d=shrimp_height * 1.2, $fn=16);\n                    \n                    // Add segment ridges\n                    difference() {\n                        sphere(d=shrimp_height * 1.2, $fn=16);\n                        translate([0, 0, -shrimp_height/2])\n                            cube([shrimp_height * 2, shrimp_height * 2, shrimp_height], center=true);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Tail fan\nmodule tail() {\n    translate([0, 0, 0]) {\n        rotate([0, -20, 0]) {\n            // Tail segments\n            for(i = [0:2]) {\n                translate([-i * shrimp_height/4, 0, 0]) {\n                    scale([0.8 - i*0.2, 1 - i*0.2, 0.6 - i*0.1]) {\n                        sphere(d=shrimp_height, $fn=12);\n                    }\n                }\n            }\n            \n            // Tail fan segments\n            for(angle = [-45, -25, 0, 25, 45]) {\n                rotate([0, 0, angle]) {\n                    translate([-shrimp_height/2, 0, 0]) {\n                        scale([1.5, 0.3, 0.8]) {\n                            rotate([0, 30, 0])\n                                cylinder(h=shrimp_height/2, d=shrimp_height/3, $fn=8);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Legs/swimmerets\nmodule legs() {\n    for(pos = [0.6, 0.45, 0.3, 0.15]) {\n        x_pos = shrimp_length * pos;\n        \n        // Left side legs\n        for(side = [-1, 1]) {\n            translate([x_pos, side * shrimp_height/3, -shrimp_height/4]) {\n                rotate([0, 0, side * 45]) {\n                    rotate([0, 45, 0]) {\n                        scale([0.8, 0.3, 0.3]) {\n                            cylinder(h=shrimp_height/2, d=shrimp_height/4, $fn=8);\n                        }\n                    }\n                }\n            }\n            \n            // Secondary swimmerets\n            translate([x_pos - shrimp_height/4, side * shrimp_height/2, -shrimp_height/3]) {\n                rotate([0, 0, side * 60]) {\n                    rotate([30, 0, 0]) {\n                        scale([0.6, 0.2, 0.2]) {\n                            cylinder(h=shrimp_height/3, d=shrimp_height/5, $fn=6);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Antennae\nmodule antennae() {\n    translate([shrimp_length * 0.85, 0, shrimp_height * 0.5]) {\n        for(side = [-1, 1]) {\n            translate([0, side * shrimp_height/3, 0]) {\n                rotate([0, -30, side * 15]) {\n                    scale([0.1, 0.1, 1]) {\n                        cylinder(h=shrimp_height * 2, d=shrimp_height/8, $fn=6);\n                    }\n                }\n                \n                // Secondary antenna\n                translate([0, side * shrimp_height/2, -shrimp_height/4]) {\n                    rotate([0, -45, side * 20]) {\n                        scale([0.08, 0.08, 0.7]) {\n                            cylinder(h=shrimp_height * 1.5, d=shrimp_height/10, $fn=5);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Surface texture details\nmodule texture() {\n    color(darker_shrimp) {\n        // Shell pattern lines\n        for(i = [1:body_segments]) {\n            segment = body_segments - i;\n            pos = shrimp_length * (0.85 - (i * 0.08));\n            \n            translate([pos, 0, shrimp_height/2]) {\n                rotate([90, 0, 0]) {\n                    cylinder(h=shrimp_height * 1.2, d=shrimp_height/10, $fn=20);\n                }\n            }\n        }\n    }\n}\n\n// Render the complete shrimp\nunion() {\n    shrimp();\n    texture();\n}\n\n// Add a flat base for better printing\ntranslate([shrimp_length/2, 0, -shrimp_height/2 - 1])\n    cube([shrimp_length, shrimp_height * 2, 2], center=true);",
    "renders": true
  },
  {
    "food_item": "crab",
    "openscad_code": "// Realistic 3D-Printable Crab Food\n// Overall dimensions ~60 mm (body + legs)\n\n// Colors\ncrab_red = \"#E53E3E\";\ncrab_shell = \"#D32F2F\";\ncrab_claw = \"#B71C1C\";\n\n// Helper module for simple leg\nmodule crab_leg(length = 20, thickness = 3) {\n    union() {\n        // Upper segment\n        translate([0, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h = length * 0.5, r = thickness, $fn = 16);\n        // Lower segment\n        translate([length * 0.5, 0, 0])\n            rotate([0, 70, 0])\n                cylinder(h = length * 0.5, r = thickness, $fn = 16);\n    }\n}\n\n// Body shell with texture\nmodule crab_body() {\n    color(crab_shell)\n    difference() {\n        // Main shell dome\n        sphere(d = 30, $fn = 64);\n        \n        // Flat bottom for printing\n        translate([0, 0, -15])\n            cube([40, 40, 30], center = true);\n        \n        // Texture lines\n        for (i = [0:3]) {\n            rotate([0, 0, i * 45])\n                translate([0, 0, 5])\n                    cube([1, 35, 20], center = true);\n        }\n    }\n    \n    // Eyes on short stalks\n    color(crab_red)\n    for (x = [-8, 8]) {\n        translate([x, 12, 10])\n            cylinder(h = 5, r = 3, $fn = 16);\n        translate([x, 12, 16])\n            sphere(d = 4, $fn = 16);\n    }\n}\n\n// Claw\nmodule crab_claw() {\n    color(crab_claw)\n    union() {\n        // Main claw body\n        translate([0, 0, 0])\n            scale([1.5, 1, 1])\n                sphere(d = 15, $fn = 32);\n        \n        // Pincher top\n        translate([0, -5, 5])\n            rotate([30, 0, 0])\n                difference() {\n                    cube([12, 8, 5], center = true);\n                    translate([0, -4, 2])\n                        rotate([0, 30, 0])\n                            cube([14, 6, 6], center = true);\n                }\n        \n        // Pincher bottom\n        translate([0, -5, -5])\n            rotate([-30, 0, 0])\n                difference() {\n                    cube([12, 8, 5], center = true);\n                    translate([0, -4, -2])\n                        rotate([0, -30, 0])\n                            cube([14, 6, 6], center = true);\n                }\n    }\n}\n\n// Complete crab assembly\nmodule crab() {\n    // Body\n    crab_body();\n    \n    // Claws\n    translate([12, 0, 0])\n        rotate([0, 0, 30])\n            crab_claw();\n    mirror([1, 0, 0])\n        translate([12, 0, 0])\n            rotate([0, 0, 30])\n                crab_claw();\n    \n    // Legs (3 pairs)\n    for (side = [-1, 1]) {\n        for (i = [0:2]) {\n            // Front legs shorter, back legs longer\n            leg_len = 18 - i * 2;\n            translate([side * 12, -8, -5 + i * 3])\n                rotate([0, 0, side * (-20 - i * 10)])\n                    crab_leg(leg_len, 2.5);\n        }\n    }\n}\n\n// Render the complete crab\ncrab();",
    "renders": true
  },
  {
    "food_item": "lobster",
    "openscad_code": "// Realistic Lobster - Medium Complexity\n// 3D printable food model with appropriate details and colors\n\ncolor(\"darkred\") {\n    // Main body segments\n    union() {\n        // Cephalothorax (head/upper body)\n        translate([0, 0, 5]) {\n            scale([1.2, 0.8, 0.6]) sphere(8);\n        }\n        \n        // Abdomen (tail segments)\n        for(i = [0:5]) {\n            translate([0, -12 - i*3.5, 5 - i*0.5]) {\n                scale([1.1 - i*0.1, 0.7 - i*0.05, 0.5 - i*0.03]) \n                    sphere(6 - i*0.5);\n            }\n        }\n    }\n}\n\n// Claws\nmodule claw(side) {\n    translate([side * 12, 8, 3]) {\n        rotate([0, 0, -30 * side]) {\n            // Upper claw\n            color(\"red\") {\n                translate([0, 0, 2]) {\n                    scale([2, 0.8, 0.6]) sphere(4);\n                }\n            }\n            \n            // Lower claw\n            color(\"red\") {\n                translate([0, 0, -1]) {\n                    scale([1.8, 0.7, 0.5]) sphere(3.5);\n                }\n            }\n            \n            // Claw pincer details\n            color(\"darkred\") {\n                for(j = [0:3]) {\n                    translate([3 + j*1.5, 0, 0]) {\n                        rotate([0, 90, 0]) \n                            cylinder(h=1.5, r1=0.8-j*0.1, r2=0.5-j*0.1);\n                    }\n                }\n            }\n        }\n    }\n}\n\nclaw(1);\nclaw(-1);\n\n// Leg pairs\nmodule legs(side) {\n    for(k = [0:3]) {\n        translate([side * (8 - k*2), 8 - k*3, 3 - k*0.5]) {\n            rotate([0, 0, 45 * side + k*10]) {\n                color(\"red\") {\n                    scale([0.3, 0.3, 1]) \n                        cylinder(h=10 - k*1.5, r1=1, r2=0.5);\n                }\n                \n                // Leg joints\n                color(\"darkred\") {\n                    translate([0, 0, 3]) \n                        sphere(0.8);\n                    translate([0, 0, 6]) \n                        sphere(0.6);\n                }\n            }\n        }\n    }\n}\n\nlegs(1);\nlegs(-1);\n\n// Antennae\nmodule antenna(side) {\n    translate([side * 4, 12, 8]) {\n        rotate([30, 0, 25 * side]) {\n            color(\"red\") {\n                scale([0.2, 0.2, 1]) \n                    cylinder(h=15, r1=0.5, r2=0.2);\n            }\n        }\n    }\n}\n\nantenna(1);\nantenna(-1);\n\n// Eye stalks\nmodule eye(side) {\n    translate([side * 3, 10, 7]) {\n        color(\"red\") {\n            cylinder(h=2, r1=1, r2=0.8);\n            translate([0, 0, 2]) {\n                color(\"black\") sphere(0.8);\n            }\n        }\n    }\n}\n\neye(1);\neye(-1);\n\n// Tail fan\ntranslate([0, -30, 2]) {\n    rotate([0, 45, 0]) {\n        color(\"darkred\") {\n            for(m = [-2:2]) {\n                translate([m*3, 0, 0]) {\n                    scale([1, 0.1, 1.5]) \n                        cube([4, 0.5, 6], center=true);\n                }\n            }\n        }\n    }\n}\n\n// Shell texture details\nmodule shell_texture(x, y, z) {\n    color(\"firebrick\") {\n        translate([x, y, z]) {\n            sphere(0.3);\n        }\n    }\n}\n\n// Add texture to abdomen\nfor(n = [0:5]) {\n    for(p = [-4:4]) {\n        shell_texture(p*1.2, -12 - n*3.5, 5 - n*0.5);\n    }\n}",
    "renders": true
  },
  {
    "food_item": "oyster",
    "openscad_code": "// Realistic Oyster with Shell and Meat\n// Medium complexity - 50-100mm scale\n\nmodule oyster_shell_half(height, radius, thickness, is_top) {\n    difference() {\n        // Main shell shape\n        scale([1, 0.7, 1])\n        rotate([is_top ? 180 : 0, 0, 0])\n        translate([0, 0, is_top ? height/2 : -height/2])\n        sphere(d=radius*2);\n        \n        // Hollow out the shell\n        scale([0.9, 0.6, 0.9])\n        rotate([is_top ? 180 : 0, 0, 0])\n        translate([0, 0, is_top ? height/2.1 : -height/2.1])\n        sphere(d=radius*1.9);\n    }\n    \n    // Shell ridges\n    for(i=[1:5]) {\n        rotate([0, 0, i*30])\n        translate([0, -radius*0.3, is_top ? height*0.3 : -height*0.3])\n        scale([1, 0.05, 0.3])\n        cylinder(h=radius*0.4, r=radius*0.9);\n    }\n}\n\nmodule oyster_meat() {\n    // Main meat body\n    color(\"ivory\")\n    translate([0, 0, 8])\n    scale([1.2, 0.8, 0.6])\n    sphere(d=30);\n    \n    // Add texture to meat\n    for(i=[0:8]) {\n        rotate([0, 0, i*45])\n        translate([10, 0, 10])\n        scale([0.2, 0.2, 0.1])\n        sphere(d=8);\n    }\n    \n    // Dark edge\n    color(\"darkgray\")\n    difference() {\n        translate([0, 0, 6])\n        scale([1.3, 0.9, 0.3])\n        sphere(d=32);\n        \n        translate([0, 0, 6.5])\n        scale([1.1, 0.7, 0.4])\n        sphere(d=28);\n    }\n    \n    // Liquid pool\n    color(\"lightblue\", 0.7)\n    translate([0, 0, 7.5])\n    scale([0.8, 0.6, 0.05])\n    sphere(d=25);\n}\n\n// Bottom shell\ncolor(\"lightgray\")\ntranslate([0, 0, 0])\noyster_shell_half(15, 35, 2, false);\n\n// Top shell (slightly open)\ncolor(\"lightgray\")\nrotate([20, 0, 0])\ntranslate([0, 15, 0])\noyster_shell_half(15, 35, 2, true);\n\n// Oyster meat inside\noyster_meat();\n\n// Small pearls\ncolor(\"white\")\ntranslate([8, 5, 10])\nsphere(d=3);\n\ncolor(\"white\")\ntranslate([-5, -3, 9])\nsphere(d=2);",
    "renders": true
  },
  {
    "food_item": "mussel",
    "openscad_code": "// Realistic Mussel Food Item - Medium Complexity\n// Size: Approximately 80mm x 40mm x 30mm\n\n// Shell thickness for 3D printing\nshell_thickness = 2;\n\n// Main shell halves\nmodule shell_half(height = 25, length = 40, width = 30) {\n    difference() {\n        // Main shell shape - elongated half-ellipse\n        scale([1, 0.8, 1])\n        rotate([90, 0, 0])\n        cylinder(h = length, r1 = height, r2 = height * 0.7, $fn = 50);\n        \n        // Hollow out the shell\n        translate([0, 0, shell_thickness])\n        scale([0.9, 0.7, 0.9])\n        rotate([90, 0, 0])\n        cylinder(h = length - 2, r1 = height - shell_thickness, r2 = height * 0.6, $fn = 50);\n    }\n    \n    // Shell ridges - growth lines\n    for(i = [0:5:25]) {\n        translate([0, 0, i - 5])\n        rotate([90, 0, 0])\n        scale([1.01, 1.01, 0.5])\n        cylinder(h = 1, r1 = height * 0.95, r2 = height * 0.65, $fn = 50);\n    }\n}\n\n// Mussel meat (inside)\nmodule mussel_meat() {\n    color(\"orange\") {\n        // Main meat body\n        scale([0.7, 0.5, 0.6])\n        translate([0, 0, 15])\n        sphere(r = 18, $fn = 30);\n        \n        // Add texture to meat\n        for(i = [0:30:360]) {\n            rotate([0, 0, i])\n            translate([15 * cos(i), 15 * sin(i), 0])\n            sphere(r = 2, $fn = 8);\n        }\n    }\n}\n\n// Hinge connector\nmodule hinge() {\n    color(\"brown\") {\n        translate([0, 0, -5])\n        cylinder(h = 10, r = 3, $fn = 20);\n        \n        // Fibrous texture on hinge\n        for(i = [0:20:360]) {\n            rotate([0, 0, i])\n            translate([2.5, 0, 0])\n            cube([0.5, 0.5, 10], center = true);\n        }\n    }\n}\n\n// Assembly\n// Bottom shell\ntranslate([0, 0, 0])\ncolor(\"saddlebrown\") shell_half();\n\n// Top shell\ntranslate([0, 0, 0])\nrotate([0, 180, 0])\ncolor(\"peru\") shell_half();\n\n// Hinge connecting shells\nhinge();\n\n// Mussel meat inside bottom shell\ntranslate([0, 0, 5])\nrotate([0, 180, 0])\nmussel_meat();\n\n// Small barnacle details on shell\nmodule barnacle() {\n    color(\"darkgoldenrod\") {\n        sphere(r = 2, $fn = 12);\n        translate([0, 0, -1])\n        cylinder(h = 2, r1 = 2, r2 = 1.5, $fn = 8);\n    }\n}\n\n// Add barnacles to shell surface\ntranslate([10, 8, 20])\nbarnacle();\n\ntranslate([-8, -12, 18])\nbarnacle();\n\ntranslate([5, -15, 22])\nbarnacle();\n\n// Edge detail for shell rim\nmodule shell_edge() {\n    color(\"burlywood\") {\n        for(i = [0:10:350]) {\n            rotate([0, 0, i])\n            translate([0, 30, 0])\n            rotate([90, 0, 0])\n            cylinder(h = 1, r1 = 2, r2 = 1, $fn = 6);\n        }\n    }\n}\n\n// Add edge detail to both shells\ntranslate([0, 0, 1])\nshell_edge();\n\ntranslate([0, 0, 39])\nrotate([0, 180, 0])\nshell_edge();",
    "renders": true
  },
  {
    "food_item": "scallop",
    "openscad_code": "// Realistic Scallop Shell with Medium Complexity\n// Overall size ~70mm\n\n// Colors\nshell_color = \"MistyRose\";\nridge_color = \"LightPink\";\n\n// Main shell module\nmodule scallop_shell() {\n    // Base shell shape - elliptical dome\n    scale([1, 1.2, 0.6]) \n        sphere(d = 60, $fn = 128);\n    \n    // Create ridges on shell\n    difference() {\n        union() {\n            // Base shell\n            color(shell_color)\n            scale([1, 1.2, 0.6]) \n                sphere(d = 60, $fn = 128);\n            \n            // Add ridges\n            color(ridge_color)\n            for(i = [0 : 10 : 180]) {\n                rotate([0, i, 0])\n                    translate([0, 0, 15])\n                        scale([1, 0.05, 0.3])\n                            cylinder(h = 45, d1 = 60, d2 = 0, $fn = 64);\n            }\n        }\n        \n        // Hollow out the shell from bottom\n        translate([0, 0, -20])\n            scale([0.9, 0.9, 1.2])\n                cube([70, 70, 40], center = true);\n    }\n}\n\n// Create shell lip/edge detail\nmodule shell_lip() {\n    color(shell_color)\n    translate([0, 0, 5])\n        scale([1, 1.2, 0.1])\n            cylinder(h = 5, d = 60, $fn = 128);\n}\n\n// Create hinge area\nmodule hinge() {\n    color(\"LightSalmon\")\n    translate([0, -35, 8])\n        rotate([90, 0, 0])\n            cylinder(h = 12, d1 = 8, d2 = 12, $fn = 32);\n}\n\n// Create muscle (the edible part)\nmodule scallop_muscle() {\n    color(\"Ivory\")\n    translate([0, 0, 18])\n        scale([1, 1, 0.7])\n            sphere(d = 25, $fn = 64);\n    \n    // Add slight texture to muscle\n    color(\"White\")\n    for(i = [0 : 45 : 315]) {\n        rotate([0, 0, i])\n            translate([8, 0, 18])\n                scale([0.3, 0.05, 0.1])\n                    cylinder(h = 8, d = 15, $fn = 32);\n    }\n}\n\n// Create the complete scallop assembly\nunion() {\n    // Main shell\n    scallop_shell();\n    \n    // Shell lip\n    shell_lip();\n    \n    // Hinge\n    hinge();\n    \n    // Muscle\n    scallop_muscle();\n}",
    "renders": true
  },
  {
    "food_item": "clams",
    "openscad_code": "// Clams food item - realistic medium complexity\n// Features: hinged shell, ridged texture, meat inside\n\n// Shell parameters\nshell_length = 40;\nshell_height = 20;\nshell_thickness = 2;\nridge_count = 8;\n\n// Meat parameters\nmeat_size = 25;\nmeat_height = 8;\n\n// Colors\nshell_color = \"#F5F5DC\";  // Beige\nmeat_color = \"#FFCBA4\";   // Salmon pink\nmeat_darker = \"#E8996B\";  // Darker pink\n\nmodule shell_half() {\n    difference() {\n        // Main shell body\n        union() {\n            // Base curved shell\n            scale([1, 0.7, 1])\n                sphere(d=shell_length);\n            \n            // Add thickness to back\n            translate([0, -shell_length/2.5, 0])\n                cube([shell_length, shell_thickness, shell_height], center=true);\n        }\n        \n        // Hollow inside\n        scale([0.9, 0.6, 0.9])\n            sphere(d=shell_length);\n    }\n}\n\nmodule shell_ridges() {\n    // Create ridges across shell surface\n    for(i = [0:ridge_count-1]) {\n        rotate([0, 90, 0])\n            translate([-shell_length/2 + i*(shell_length/ridge_count), 0, 0])\n                scale([0.1, 1.2, 1])\n                    sphere(d=shell_height/2);\n    }\n}\n\nmodule clam_meat() {\n    // Main meat body\n    color(meat_color)\n    scale([1, 0.7, 0.5])\n        sphere(d=meat_size);\n    \n    // Add texture to meat\n    color(meat_darker)\n    for(i = [0:5]) {\n        rotate([0, 0, i*60])\n            translate([meat_size/3, 0, 0])\n                scale([0.8, 0.4, 0.3])\n                    sphere(d=meat_size/2);\n    }\n    \n    // Meat edges\n    color(meat_darker)\n    translate([0, 0, -meat_height/2])\n        cylinder(h=meat_height/4, r1=meat_size/2, r2=meat_size/2.2);\n}\n\nmodule complete_clam() {\n    // Bottom shell\n    color(shell_color) {\n        translate([0, 0, 0])\n            union() {\n                shell_half();\n                shell_ridges();\n            }\n    }\n    \n    // Top shell (rotated)\n    color(shell_color) {\n        translate([0, 0, 5])\n            rotate([30, 0, 0])\n                union() {\n                    shell_half();\n                    shell_ridges();\n                }\n    }\n    \n    // Meat inside bottom shell\n    translate([0, -5, 2])\n        clam_meat();\n}\n\n// Render the complete clam\ncomplete_clam();",
    "renders": true
  },
  {
    "food_item": "octopus",
    "openscad_code": "// Realistic Octopus Food Item - Medium Complexity\n// Features a grilled octopus with tentacles, suction cups, and grill marks\n\ncolor([0.65, 0.35, 0.25]) // Grilled octopus color - dark reddish-brown\n\nmodule tentacle_segment(radius, length, segments) {\n    // Create a tapered tentacle segment with suction cups\n    for(i = [0:segments-1]) {\n        // Main tentacle body segment\n        translate([0, 0, -i*length/segments]) \n            scale([1 - i*0.1, 1 - i*0.1, 1])\n                cylinder(h=length/segments, r1=radius, r2=radius*0.9, $fn=12);\n        \n        // Suction cups along the tentacle\n        for(j = [0:3]) {\n            rotate([0, 0, j*90 + i*30]) \n                translate([radius*0.8, 0, -i*length/segments]) \n                    scale([0.6, 0.6, 0.3])\n                        sphere(r=radius/3, $fn=8);\n        }\n    }\n}\n\nmodule grill_marks(width, length, depth) {\n    // Create grill mark texture on the surface\n    for(i = [0:8]) {\n        translate([i*width/10 - width/2, -length/2, 0])\n            cube([0.3, length, depth], center=true);\n    }\n    for(i = [0:8]) {\n        translate([-width/2, i*length/10 - length/2, 0])\n            rotate([0, 0, 90])\n                cube([0.3, width, depth], center=true);\n    }\n}\n\n// Main octopus body\nunion() {\n    // Central body - slightly flattened sphere\n    translate([0, 0, 5])\n        scale([1.2, 1.2, 0.8])\n            sphere(r=15, $fn=32);\n    \n    // Add grill marks to body top\n    translate([0, 0, 18])\n        grill_marks(30, 30, 0.5);\n    \n    // Head bump\n    translate([0, 0, 20])\n        sphere(r=8, $fn=24);\n    \n    // Eyes\n    translate([-5, 10, 18])\n        color([0.1, 0.1, 0.1])\n            sphere(r=2, $fn=12);\n    translate([5, 10, 18])\n        color([0.1, 0.1, 0.1])\n            sphere(r=2, $fn=12);\n    \n    // Eight tentacles\n    // Front tentacles\n    translate([10, 10, 0])\n        rotate([0, 0, 45])\n            rotate([90, 0, 0])\n                tentacle_segment(4, 30, 8);\n    \n    translate([-10, 10, 0])\n        rotate([0, 0, -45])\n            rotate([90, 0, 0])\n                tentacle_segment(4, 30, 8);\n    \n    // Side tentacles\n    translate([15, 0, 0])\n        rotate([0, 0, 90])\n            rotate([90, 0, 0])\n                tentacle_segment(3.5, 35, 10);\n    \n    translate([-15, 0, 0])\n        rotate([0, 0, -90])\n            rotate([90, 0, 0])\n                tentacle_segment(3.5, 35, 10);\n    \n    // Back tentacles\n    translate([8, -12, 0])\n        rotate([0, 0, 135])\n            rotate([90, 0, 0])\n                tentacle_segment(3, 25, 6);\n    \n    translate([-8, -12, 0])\n        rotate([0, 0, -135])\n            rotate([90, 0, 0])\n                tentacle_segment(3, 25, 6);\n    \n    // Lower tentacles\n    translate([0, -15, -5])\n        rotate([0, 0, 180])\n            rotate([90, 0, 0])\n                tentacle_segment(3.5, 28, 7);\n    \n    translate([0, 0, -8])\n        rotate([90, 0, 0])\n            tentacle_segment(3, 20, 5);\n    \n    // Texture details on body\n    difference() {\n        // Add small bumps for realistic texture\n        union() {\n            for(i = [0:20]) {\n                rotate([0, 0, i*18])\n                    translate([12 + sin(i*2)*2, 0, 10 + cos(i*2)*2])\n                        sphere(r=1.5, $fn=8);\n            }\n        }\n        // Hollow out interior for 3D printing\n        sphere(r=12, $fn=32);\n    }\n}",
    "renders": true
  },
  {
    "food_item": "squid",
    "openscad_code": "// Squid food item - realistic style with medium complexity\n// 3D printable squid suitable for food models or educational purposes\n\n$fn = 32;\n\n// Main colors\nsquid_body_color = \"#FF8C69\";  // Salmon pink\nsquid_tentacle_color = \"#FF6347\";  // Tomato red\nsquid_eye_color = \"#000000\";\nsquid_highlight_color = \"#FFFFFF\";\n\n// Body parameters\nbody_length = 45;\nbody_width = 25;\nbody_height = 30;\n\n// Mantle (main body) with realistic tapered shape\nmodule squid_mantle() {\n    color(squid_body_color) {\n        // Main mantle body - elliptical shape\n        translate([0, 0, body_height/2])\n            scale([1, 0.8, 1])\n                sphere(d=body_width);\n        \n        // Extended mantle tail\n        translate([0, 0, -body_height/4])\n            scale([0.8, 0.6, 1.2])\n                cylinder(h=body_height/1.5, d1=body_width*0.9, d2=body_width*0.3);\n        \n        // Fins on sides\n        for(side = [-1, 1]) {\n            translate([0, side*body_width/2.5, body_height/3])\n                rotate([90, 0, 0])\n                    scale([1, 0.3, 0.8])\n                        sphere(d=body_width/1.5);\n        }\n    }\n}\n\n// Realistic tentacles with slight curves\nmodule tentacle(length, thickness, curl_factor) {\n    color(squid_tentacle_color) {\n        hull() {\n            for(i = [0:10]) {\n                translate([\n                    i*length/10,\n                    curl_factor*sin(i*15),\n                    -i*length/30\n                ])\n                    sphere(d=thickness*(1-i/15));\n            }\n        }\n    }\n}\n\n// Create 8 tentacles in realistic arrangement\nmodule all_tentacles() {\n    for(i = [0:7]) {\n        angle = i*45;\n        translate([0, 0, -body_height/2])\n            rotate([0, 0, angle])\n                translate([body_width/4, 0, 0])\n                    tentacle(30, 4, (i%2)*2-1);\n    }\n}\n\n// Realistic eyes with highlight\nmodule squid_eyes() {\n    for(side = [-1, 1]) {\n        // Main eye\n        color(squid_eye_color) {\n            translate([body_width/3, side*body_width/4, body_height/3])\n                sphere(d=4);\n        }\n        \n        // Eye highlight\n        color(squid_highlight_color) {\n            translate([body_width/3+0.5, side*body_width/4+0.5, body_height/3+1])\n                sphere(d=1);\n        }\n    }\n}\n\n// Mouth/beak area\nmodule squid_beak() {\n    color(squid_tentacle_color) {\n        translate([body_width/2.5, 0, -body_height/4])\n            rotate([90, 0, 0])\n                cylinder(h=3, d1=4, d2=2);\n    }\n}\n\n// Body texture pattern - subtle ridges\nmodule body_texture() {\n    color(squid_body_color) {\n        for(i = [0:3]) {\n            rotate([0, 0, i*90])\n                translate([0, 0, body_height/2])\n                    scale([1, 0.85, 0.9])\n                        sphere(d=body_width*1.02);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Core body\n    squid_mantle();\n    \n    // Texture overlay\n    body_texture();\n    \n    // Tentacles\n    all_tentacles();\n    \n    // Facial features\n    squid_eyes();\n    squid_beak();\n}",
    "renders": true
  },
  {
    "food_item": "cuttlefish",
    "openscad_code": "// Cuttlefish food model - realistic style, medium complexity\n\n// Main body parameters\nbody_length = 60;\nbody_width = 25;\nbody_height = 15;\n\n// Tentacle parameters\ntentacle_length = 30;\ntentacle_width = 3;\nnum_tentacles = 8;\n\n// Fin parameters\nfin_width = 35;\nfin_height = 8;\n\n// Eye parameters\neye_radius = 2.5;\neye_offset_x = 15;\neye_offset_y = 12;\n\n// Color definitions\n$fn = 30;\n\n// Main body - oval shape with taper\nmodule body() {\n    color([0.85, 0.65, 0.45])  // Light brown color\n    \n    // Main oval body\n    union() {\n        // Central body\n        difference() {\n            scale([1, 0.8, 0.6])\n                sphere(d=body_length);\n            \n            // Flatten bottom slightly\n            translate([0, 0, -body_height/2])\n                cube([body_length*2, body_width*2, 10], center=true);\n        }\n        \n        // Add texture ridges\n        for(i = [-20:5:20]) {\n            translate([i, 0, body_height/2 - 2])\n                rotate([90, 0, 0])\n                    scale([1.2, 0.3, 1])\n                        cylinder(h=body_width*1.5, d=2);\n        }\n    }\n}\n\n// Fins on sides\nmodule fins() {\n    color([0.75, 0.55, 0.35])  // Slightly darker brown\n    \n    // Left fin\n    translate([0, body_width/2, 0])\n        rotate([0, 20, 0])\n            scale([1, 0.5, 0.2])\n                sphere(d=fin_width);\n    \n    // Right fin\n    translate([0, -body_width/2, 0])\n        rotate([0, -20, 0])\n            scale([1, 0.5, 0.2])\n                sphere(d=fin_width);\n}\n\n// Eyes\nmodule eyes() {\n    color([0, 0, 0])  // Black eyes\n    \n    // Left eye\n    translate([eye_offset_x, eye_offset_y, body_height/2])\n        sphere(r=eye_radius);\n    \n    // Right eye\n    translate([eye_offset_x, -eye_offset_y, body_height/2])\n        sphere(r=eye_radius);\n    \n    // Pupils\n    color([0.1, 0.1, 0.1])\n    translate([eye_offset_x+1, eye_offset_y, body_height/2+1])\n        sphere(r=eye_radius*0.6);\n    translate([eye_offset_x+1, -eye_offset_y, body_height/2+1])\n        sphere(r=eye_radius*0.6);\n}\n\n// Tentacles\nmodule tentacles() {\n    color([0.8, 0.6, 0.4])  // Matching body color\n    \n    for(i = [0:num_tentacles-1]) {\n        angle = i * 45 - 180;\n        // Front tentacles\n        translate([-body_length/2 + 5, 0, -body_height/2])\n            rotate([90, 0, angle])\n                rotate([15, 0, 0])\n                    cylinder(h=tentacle_length, d=tentacle_width, center=false);\n        \n        // Back tentacles\n        translate([-body_length/2 + 10, 0, -body_height/2])\n            rotate([90, 0, angle + 22.5])\n                rotate([25, 0, 0])\n                    cylinder(h=tentacle_length*0.8, d=tentacle_width*0.8, center=false);\n    }\n}\n\n// Suction cups on tentacles\nmodule suction_cups() {\n    color([0.7, 0.5, 0.3])  // Darker spots\n    \n    for(i = [0:num_tentacles-1]) {\n        angle = i * 45 - 180;\n        for(j = [1:3]) {\n            // Front tentacle cups\n            translate([\n                -body_length/2 + 5 - j*8,\n                sin(angle) * j*2,\n                -body_height/2 - j*7\n            ])\n                sphere(d=1.2);\n            \n            // Back tentacle cups\n            translate([\n                -body_length/2 + 10 - j*6,\n                sin(angle + 22.5) * j*1.5,\n                -body_height/2 - j*5\n            ])\n                sphere(d=1);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    body();\n    fins();\n    eyes();\n    tentacles();\n    suction_cups();\n}\n\n// Base for 3D printing stability\ntranslate([0, 0, -body_height - 2])\n    color([0.9, 0.7, 0.5])\n        cube([body_length + 10, body_width + 10, 2], center=true);",
    "renders": true
  },
  {
    "food_item": "anchovy",
    "openscad_code": "// Realistic Anchovy Model\n// Medium complexity 3D printable anchovy\n\n$fn = 32;\n\n// Main colors\ncolor_silver = [0.75, 0.75, 0.75];\ncolor_dark_silver = [0.6, 0.6, 0.6];\ncolor_dark_brown = [0.3, 0.2, 0.1];\n\n// Scale factor for 3D printing (80mm length)\nscale_factor = 80;\n\nmodule anchovy_body() {\n    color(color_silver) {\n        // Main body - elongated ellipsoid\n        scale([1, 0.4, 0.25])\n            sphere(d=scale_factor);\n        \n        // Tail section - tapered\n        translate([scale_factor * 0.4, 0, 0])\n            scale([1.2, 0.8, 0.8])\n                rotate([0, 0, 90])\n                    cylinder(h=scale_factor * 0.3, d1=scale_factor * 0.2, d2=0);\n    }\n}\n\nmodule fish_head() {\n    color(color_dark_silver) {\n        // Head section - slightly flattened sphere\n        translate([-scale_factor * 0.45, 0, 0])\n            scale([1.2, 0.9, 0.7])\n                sphere(d=scale_factor * 0.3);\n        \n        // Mouth opening\n        difference() {\n            translate([-scale_factor * 0.55, 0, -scale_factor * 0.05])\n                scale([0.5, 0.3, 0.1])\n                    sphere(d=scale_factor * 0.15);\n            translate([-scale_factor * 0.56, 0, -scale_factor * 0.04])\n                cube([scale_factor * 0.1, scale_factor * 0.2, scale_factor * 0.1]);\n        }\n    }\n}\n\nmodule dorsal_fin() {\n    color(color_dark_silver) {\n        // Main dorsal fin\n        translate([-scale_factor * 0.2, 0, scale_factor * 0.12])\n            rotate([0, 0, 0])\n                linear_extrude(height=0.1)\n                    polygon(points=[\n                        [0, 0],\n                        [scale_factor * 0.08, scale_factor * 0.05],\n                        [scale_factor * 0.16, 0],\n                        [scale_factor * 0.08, -scale_factor * 0.05]\n                    ]);\n        \n        // Additional fin rays\n        for(i = [0:2]) {\n            translate([-scale_factor * 0.15 + i * scale_factor * 0.1, 0, scale_factor * 0.12])\n                rotate([0, 0, -10 + i * 10])\n                    cylinder(h=scale_factor * 0.08, d1=scale_factor * 0.01, d2=scale_factor * 0.005);\n        }\n    }\n}\n\nmodule pectoral_fin() {\n    color(color_dark_silver) {\n        // Left fin\n        translate([-scale_factor * 0.3, scale_factor * 0.15, -scale_factor * 0.05])\n            rotate([0, -20, -30])\n                scale([1.2, 0.6, 0.1])\n                    sphere(d=scale_factor * 0.15);\n        \n        // Right fin\n        translate([-scale_factor * 0.3, -scale_factor * 0.15, -scale_factor * 0.05])\n            rotate([0, 20, 30])\n                scale([1.2, 0.6, 0.1])\n                    sphere(d=scale_factor * 0.15);\n    }\n}\n\nmodule tail_fin() {\n    color(color_dark_silver) {\n        translate([scale_factor * 0.45, 0, 0])\n            rotate([90, 0, 0])\n                scale([0.5, 1.2, 0.1])\n                    cylinder(h=scale_factor * 0.15, d1=scale_factor * 0.2, d2=0);\n    }\n}\n\nmodule eye() {\n    color(color_dark_brown) {\n        // Left eye\n        translate([-scale_factor * 0.5, scale_factor * 0.08, scale_factor * 0.05])\n            sphere(d=scale_factor * 0.03);\n        \n        // Right eye\n        translate([-scale_factor * 0.5, -scale_factor * 0.08, scale_factor * 0.05])\n            sphere(d=scale_factor * 0.03);\n    }\n}\n\nmodule scales_texture() {\n    color(color_dark_silver) {\n        // Scale pattern along body\n        for(i = [0:5]) {\n            for(j = [-2:2]) {\n                if(j != 0) {\n                    translate([\n                        -scale_factor * 0.3 + i * scale_factor * 0.1,\n                        j * scale_factor * 0.05,\n                        scale_factor * 0.12\n                    ])\n                        scale([1, 1, 0.3])\n                            sphere(d=scale_factor * 0.02);\n                }\n            }\n        }\n    }\n}\n\nmodule anchovy_complete() {\n    union() {\n        anchovy_body();\n        fish_head();\n        dorsal_fin();\n        pectoral_fin();\n        tail_fin();\n        eye();\n        scales_texture();\n    }\n}\n\n// Generate the complete anchovy\nrotate([0, -10, 0])\n    anchovy_complete();",
    "renders": true
  },
  {
    "food_item": "sardine",
    "openscad_code": "// Realistic sardine for 3D printing\n// Length: ~80 mm, height: ~20 mm, thickness: ~12 mm\n\n$fn=36;\n\nmodule fish_body() {\n    // Main body as tapered ellipsoid\n    scale([1, 0.5, 0.3])\n    sphere(d=60);\n}\n\nmodule head() {\n    // Flattened sphere for head\n    translate([-25, 0, 0])\n    scale([0.9, 0.7, 0.5])\n    sphere(d=30);\n}\n\nmodule tail() {\n    // Forked tail\n    translate([30, 0, 0])\n    rotate([0, 0, 0])\n    scale([1.5, 1, 0.15])\n    cube([20, 25, 5], center=true);\n    \n    // Tail cutout\n    difference() {\n        children();\n        translate([35, 0, 0])\n        rotate([0, 0, 0])\n        scale([1.5, 0.5, 1])\n        cube([20, 25, 6], center=true);\n    }\n}\n\nmodule dorsal_fin() {\n    // Series of small triangles along back\n    for(i=[-15:10:20]) {\n        translate([i, 0, 8])\n        rotate([0, 90, 0])\n        linear_extrude(height=1)\n        polygon(points=[[0,0], [5,3], [0,6]]);\n    }\n}\n\nmodule pectoral_fin() {\n    // Side fins\n    translate([-10, 12, -2])\n    rotate([0, 0, -30])\n    scale([1, 0.5, 0.1])\n    sphere(d=15);\n    \n    mirror([0,1,0])\n    translate([-10, 12, -2])\n    rotate([0, 0, -30])\n    scale([1, 0.5, 0.1])\n    sphere(d=15);\n}\n\nmodule scales() {\n    // Scales as small raised bumps\n    for(x=[-20:5:25]) {\n        for(y=[-8:3:8]) {\n            if(x*x/400 + y*y/64 < 1) {\n                translate([x, y, 9.5])\n                sphere(d=1.5, $fn=8);\n            }\n        }\n    }\n}\n\nmodule eye() {\n    // Black eye with white highlight\n    color(\"black\")\n    translate([-30, 8, 2])\n    sphere(d=3);\n    \n    color(\"white\")\n    translate([-29, 8.5, 3])\n    sphere(d=1);\n}\n\nmodule mouth() {\n    // Subtle mouth line\n    color(\"darkgray\")\n    translate([-35, 0, -2])\n    rotate([0, 90, 0])\n    cylinder(h=0.5, d1=3, d2=1);\n}\n\n// Combine all parts\ncolor(\"silver\")\nunion() {\n    difference() {\n        union() {\n            fish_body();\n            head();\n            tail();\n        }\n        // Flatten bottom\n        translate([0, 0, -10])\n        cube([100, 50, 10], center=true);\n    }\n    \n    dorsal_fin();\n    pectoral_fin();\n    scales();\n}\n\neye();\nmouth();",
    "renders": true
  },
  {
    "food_item": "mackerel",
    "openscad_code": "// Mackerel 3D model - realistic style, medium complexity\n// Size: ~80mm from head to tail\n\n$fn = 32;\n\n// Main color scheme\nbody_color = [0.1, 0.2, 0.4];      // Dark blue-green\nbelly_color = [0.9, 0.85, 0.8];    // Light silver-white\nstripe_color = [0.3, 0.3, 0.3];    // Dark stripes\n\n// Fish body module\nmodule fish_body() {\n    difference() {\n        // Main body - elongated ellipsoid\n        color(body_color) \n        scale([1, 0.4, 0.3])\n        sphere(r=25);\n        \n        // Carve out belly\n        translate([0, -5, -6])\n        scale([1.2, 0.8, 0.5])\n        sphere(r=25);\n    }\n}\n\n// Fish tail module\nmodule tail() {\n    translate([-25, 0, 0])\n    union() {\n        // Upper tail fin\n        color(body_color)\n        translate([0, 0, 8])\n        rotate([0, 0, -15])\n        scale([0.8, 0.1, 1])\n        cube([15, 15, 8], center=true);\n        \n        // Lower tail fin\n        translate([0, 0, -8])\n        rotate([0, 0, 15])\n        scale([0.8, 0.1, 1])\n        cube([15, 15, 8], center=true);\n    }\n}\n\n// Dorsal fin\nmodule dorsal_fin() {\n    color(body_color)\n    for(i=[-15:5:15]) {\n        translate([i, 0, 7])\n        rotate([0, 90, 0])\n        cylinder(h=2, r1=3, r2=0.5);\n    }\n}\n\n// Side fins\nmodule side_fins() {\n    color(body_color)\n    translate([5, 0, -2])\n    rotate([0, 0, 45])\n    scale([1, 0.3, 0.5])\n    sphere(r=8);\n    \n    mirror([0, 1, 0])\n    translate([5, 0, -2])\n    rotate([0, 0, 45])\n    scale([1, 0.3, 0.5])\n    sphere(r=8);\n}\n\n// Characteristic mackerel stripes\nmodule stripes() {\n    color(stripe_color)\n    for(i=[-20:5:20]) {\n        translate([i, 0, 0])\n        rotate([90, 0, 0])\n        scale([0.1, 1, 0.8])\n        cylinder(h=0.5, r=25);\n    }\n}\n\n// Head details\nmodule head() {\n    // Mouth\n    color([0.2, 0.1, 0.05])\n    translate([25, 0, -2])\n    rotate([0, 90, 0])\n    cylinder(h=1, r1=3, r2=2);\n    \n    // Eye\n    color([0.1, 0.1, 0.1])\n    translate([20, 5, 3])\n    sphere(r=2);\n    \n    color([0.9, 0.9, 0.9])\n    translate([21, 5.5, 3.5])\n    sphere(r=0.8);\n}\n\n// Belly texture\nmodule belly_texture() {\n    color(belly_color)\n    translate([0, -10, -7])\n    scale([1.1, 0.6, 0.3])\n    sphere(r=20);\n    \n    // Small scales texture\n    for(i=[-15:3:15]) {\n        for(j=[-8:3:0]) {\n            translate([i, -10+j*0.5, -7])\n            color([0.95, 0.9, 0.85])\n            sphere(r=0.5);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    fish_body();\n    tail();\n    dorsal_fin();\n    side_fins();\n    stripes();\n    head();\n    belly_texture();\n}",
    "renders": true
  },
  {
    "food_item": "cod",
    "openscad_code": "// Realistic 3D printable cod fish - medium complexity\n\n$fn = 32;  // Smooth curves for realistic look\n\n// Main fish body\nmodule cod_body() {\n    color(\"beige\") \n    union() {\n        // Tapered body\n        hull() {\n            translate([-25, 0, 0]) sphere(d=20);\n            translate([25, 0, 0]) sphere(d=10);\n        }\n        \n        // Add belly bulge\n        translate([0, -5, -5]) scale([1.2, 1, 1.5]) sphere(d=15);\n        \n        // Top back hump\n        translate([5, 0, 8]) scale([1.3, 1, 0.8]) sphere(d=12);\n    }\n}\n\n// Tail fin\nmodule tail_fin() {\n    color(\"lightgray\") \n    union() {\n        // Main tail\n        translate([-26, 0, 0]) \n        rotate([0, 0, 0]) \n        scale([1, 2.5, 0.2]) \n        sphere(d=15);\n        \n        // Tail details\n        for(i = [-1:1]) {\n            translate([-26, i*8, 0]) \n            rotate([0, 0, i*10]) \n            scale([0.8, 0.4, 0.1]) \n            cylinder(h=10, d=10);\n        }\n    }\n}\n\n// Dorsal fins\nmodule dorsal_fins() {\n    color(\"lightslategray\") \n    for(i = [0:3]) {\n        translate([15-i*10, 0, 8+i*2]) \n        rotate([0, 0, 0]) \n        scale([0.3, 1, 1.5]) \n        cylinder(h=8, d1=8, d2=4);\n    }\n}\n\n// Pectoral fins\nmodule pectoral_fins() {\n    color(\"lightgray\") \n    union() {\n        // Left fin\n        translate([5, 10, -3]) \n        rotate([0, 0, -30]) \n        scale([1.2, 0.8, 0.15]) \n        sphere(d=12);\n        \n        // Right fin\n        translate([5, -10, -3]) \n        rotate([0, 0, 30]) \n        scale([1.2, 0.8, 0.15]) \n        sphere(d=12);\n    }\n}\n\n// Fish texture pattern\nmodule fish_pattern() {\n    color(\"darkolivegreen\") \n    difference() {\n        cod_body();\n        \n        // Scale pattern using repeated small spheres\n        for(i = [-20:5:20]) {\n            for(j = [-15:5:15]) {\n                if(i*i + j*j < 400) {\n                    translate([i, j, 0.1]) \n                    sphere(d=2);\n                }\n            }\n        }\n    }\n}\n\n// Side fin details\nmodule side_fins() {\n    color(\"lightgray\") \n    union() {\n        // Small fins near tail\n        translate([-15, 5, 0]) \n        rotate([0, 0, -45]) \n        scale([0.5, 0.8, 0.1]) \n        cylinder(h=6, d=8);\n        \n        translate([-15, -5, 0]) \n        rotate([0, 0, 45]) \n        scale([0.5, 0.8, 0.1]) \n        cylinder(h=6, d=8);\n    }\n}\n\n// Eye\nmodule eye() {\n    color(\"black\") \n    translate([20, 6, 3]) \n    sphere(d=3);\n    \n    color(\"white\") \n    translate([20.5, 6, 3.5]) \n    sphere(d=1);\n}\n\n// White underbelly\nmodule underbelly() {\n    color(\"ivory\") \n    translate([0, 0, -8]) \n    scale([1.1, 1, 0.3]) \n    sphere(d=16);\n}\n\n// Mouth\nmodule mouth() {\n    color(\"darkred\") \n    difference() {\n        translate([25, 0, -2]) \n        rotate([0, -20, 0]) \n        scale([0.3, 1, 0.5]) \n        cylinder(h=8, d=4);\n        \n        // Mouth opening\n        translate([28, 0, -2]) \n        sphere(d=2);\n    }\n}\n\n// Assemble the complete cod\nunion() {\n    // Main body with texture\n    fish_pattern();\n    \n    // Underbelly\n    underbelly();\n    \n    // Fins\n    tail_fin();\n    dorsal_fins();\n    pectoral_fins();\n    side_fins();\n    \n    // Head details\n    eye();\n    mirror([0,1,0]) eye();\n    mouth();\n}",
    "renders": true
  },
  {
    "food_item": "haddock",
    "openscad_code": "// Realistic Haddock Food Model - Medium Complexity\n// Features: Fish body, tail, fins, eye, and characteristic dark lateral line\n\n$fn = 32;\n\n// Main colors\nskin_color = [0.85, 0.82, 0.78];\nbelly_color = [0.95, 0.93, 0.90];\ndark_patch_color = [0.45, 0.42, 0.38];\neye_color = [0.1, 0.1, 0.1];\nfin_color = [0.75, 0.72, 0.68];\n\nmodule haddock_body() {\n    color(skin_color)\n    difference() {\n        // Main fish body - elongated oval shape\n        scale([1, 0.4, 0.25])\n        sphere(r = 40);\n        \n        // Flatten bottom for printing\n        translate([0, 0, -10])\n        cube([100, 50, 20], center = true);\n    }\n    \n    // Belly - lighter color on bottom half\n    color(belly_color)\n    translate([0, 0, -2])\n    scale([0.95, 0.38, 0.12])\n    sphere(r = 40);\n}\n\nmodule fish_tail() {\n    color(skin_color)\n    translate([-50, 0, 0])\n    rotate([0, 0, 90])\n    scale([1, 0.6, 0.15])\n    cylinder(h = 30, r1 = 25, r2 = 0);\n}\n\nmodule dorsal_fin() {\n    color(fin_color)\n    for(i = [0:2]) {\n        translate([20 - i*15, 0, 8])\n        rotate([0, 0, -10 + i*5])\n        scale([0.3, 1, 1])\n        cylinder(h = 15, r1 = 3, r2 = 0);\n    }\n}\n\nmodule pectoral_fin() {\n    color(fin_color)\n    // Left fin\n    translate([10, 15, 0])\n    rotate([0, 0, -30])\n    scale([0.8, 1.2, 0.1])\n    cylinder(h = 12, r1 = 8, r2 = 2);\n    \n    // Right fin\n    translate([10, -15, 0])\n    rotate([0, 0, 30])\n    scale([0.8, 1.2, 0.1])\n    cylinder(h = 12, r1 = 8, r2 = 2);\n}\n\nmodule lateral_line() {\n    color(dark_patch_color)\n    for(pos = [10:5:35]) {\n        translate([pos, 0, 2])\n        scale([0.3, 0.3, 0.1])\n        sphere(r = 3);\n    }\n}\n\nmodule eye() {\n    color(eye_color)\n    translate([30, 8, 5])\n    sphere(r = 3);\n    \n    color([1, 1, 1])\n    translate([31, 8.5, 6])\n    sphere(r = 1);\n}\n\nmodule dark_patches() {\n    color(dark_patch_color)\n    for(i = [0:4]) {\n        translate([15 + i*8, 5, 2])\n        rotate([0, 0, 45])\n        scale([0.4, 0.8, 0.1])\n        cylinder(h = 1, r = 4);\n    }\n    \n    for(i = [0:3]) {\n        translate([20 + i*10, -5, 2])\n        rotate([0, 0, -45])\n        scale([0.4, 0.8, 0.1])\n        cylinder(h = 1, r = 3.5);\n    }\n}\n\n// Assemble the complete haddock\nunion() {\n    haddock_body();\n    fish_tail();\n    dorsal_fin();\n    pectoral_fin();\n    lateral_line();\n    eye();\n    dark_patches();\n}",
    "renders": true
  },
  {
    "food_item": "halibut",
    "openscad_code": "// Halibut fish model - Realistic style, medium complexity\n\n$fn = 32; // Smooth curves\n\n// Main colors\ncolor_halibut_dark = [0.4, 0.35, 0.25];\ncolor_halibut_light = [0.8, 0.75, 0.65];\ncolor_eye = [0, 0, 0];\n\n// Scale for 3D printing - target ~80mm length\nscale_factor = 1;\n\n// Main body of halibut\nmodule halibut_body() {\n    color(color_halibut_light) {\n        // Oval flat body - halibut are flatfish\n        scale([1, 0.6, 0.2]) \n            sphere(d = 60);\n        \n        // Add slight thickness variation for realism\n        translate([0, 0, 5])\n            scale([0.9, 0.5, 0.05])\n                sphere(d = 50);\n    }\n}\n\n// Tail fin\nmodule tail_fin() {\n    color(color_halibut_light) {\n        translate([-30, 0, -3])\n            rotate([0, 0, 0])\n                scale([1, 1.5, 0.1])\n                    cylinder(h = 15, r1 = 8, r2 = 0);\n        \n        // Lower tail lobe\n        translate([-30, -10, -3])\n            rotate([0, 0, -20])\n                scale([0.8, 1.2, 0.1])\n                    cylinder(h = 12, r1 = 6, r2 = 0);\n    }\n}\n\n// Dorsal fin\nmodule dorsal_fin() {\n    color(color_halibut_dark) {\n        for(i = [0:9]) {\n            translate([25 - i*5, 15, 0])\n                rotate([0, 0, 0])\n                    scale([0.3, 1, 0.1])\n                        cylinder(h = 8 - i*0.5, r1 = 2, r2 = 0);\n        }\n    }\n}\n\n// Anal fin\nmodule anal_fin() {\n    color(color_halibut_dark) {\n        for(i = [0:7]) {\n            translate([20 - i*5, -15, 0])\n                rotate([0, 0, 0])\n                    scale([0.3, 1, 0.1])\n                        cylinder(h = 6 - i*0.3, r1 = 1.5, r2 = 0);\n        }\n    }\n}\n\n// Side fins (pectoral fins)\nmodule pectoral_fin() {\n    color(color_halibut_light) {\n        // Left fin\n        translate([10, 20, 0])\n            rotate([0, 0, -30])\n                scale([1.5, 1, 0.1])\n                    cylinder(h = 15, r1 = 5, r2 = 0);\n        \n        // Right fin\n        translate([10, -20, 0])\n            rotate([0, 0, 30])\n                scale([1.5, 1, 0.1])\n                    cylinder(h = 15, r1 = 5, r2 = 0);\n    }\n}\n\n// Eyes - halibut has both eyes on top side\nmodule eyes() {\n    color(color_eye) {\n        // Right eye\n        translate([15, 8, 2])\n            sphere(d = 3);\n        translate([15, 8, 3])\n            scale([1, 1, 0.1])\n                sphere(d = 2);\n        \n        // Left eye\n        translate([15, -8, 2])\n            sphere(d = 3);\n        translate([15, -8, 3])\n            scale([1, 1, 0.1])\n                sphere(d = 2);\n    }\n}\n\n// Mouth - underdeveloped lower jaw characteristic\nmodule mouth() {\n    color(color_halibut_dark) {\n        translate([20, 0, -4])\n            scale([1, 0.3, 0.1])\n                cube([10, 8, 2], center = true);\n    }\n}\n\n// Skin texture pattern\nmodule skin_pattern() {\n    color(color_halibut_dark) {\n        // Dark spots pattern\n        for(x = [-20:5:20]) {\n            for(y = [-15:5:15]) {\n                if((x + y) % 10 == 0) {\n                    translate([x, y, 5.5])\n                        scale([1, 1, 0.1])\n                            sphere(d = 3);\n                }\n            }\n        }\n    }\n}\n\n// Assemble the complete halibut\nscale([scale_factor, scale_factor, scale_factor]) {\n    union() {\n        halibut_body();\n        tail_fin();\n        dorsal_fin();\n        anal_fin();\n        pectoral_fin();\n        eyes();\n        mouth();\n        skin_pattern();\n    }\n}",
    "renders": true
  },
  {
    "food_item": "snapper",
    "openscad_code": "// Snapper fish food model - medium complexity, realistic style\n// Overall size approximately 80mm length\n\n// Main body parameters\nbody_length = 80;\nbody_height = 35;\nbody_width = 25;\n\n// Fish colors\nskin_color = [0.8, 0.4, 0.2];  // Orange-red snapper skin\nbelly_color = [0.95, 0.85, 0.75];  // Light belly\nfin_color = [0.7, 0.35, 0.15];  // Darker fins\neye_color = [0.1, 0.1, 0.1];  // Black eye\n\n// Fish body - main ellipsoid shape\nmodule fish_body() {\n    color(skin_color) {\n        // Main body with ellipsoid shape\n        scale([1, 0.6, 0.45]) \n            sphere(d=body_length, $fn=50);\n        \n        // Belly - lighter color on bottom\n        translate([0, 0, -body_height/3])\n            color(belly_color)\n                scale([0.9, 0.5, 0.3])\n                    sphere(d=body_length, $fn=40);\n    }\n}\n\n// Tail fin - forked tail\nmodule tail_fin() {\n    color(fin_color) {\n        translate([-body_length/2 - 5, 0, 0])\n            rotate([0, 0, 0])\n                union() {\n                    // Upper tail lobe\n                    translate([0, 0, body_height/4])\n                        rotate([0, 10, 0])\n                            scale([1.5, 0.2, 0.8])\n                                cube([15, 1, 8]);\n                    \n                    // Lower tail lobe\n                    translate([0, 0, -body_height/4])\n                        rotate([0, -10, 0])\n                            scale([1.5, 0.2, 0.8])\n                                cube([15, 1, 8]);\n                }\n    }\n}\n\n// Dorsal fin - spiny fin on top\nmodule dorsal_fin() {\n    color(fin_color) {\n        for(i = [-15:5:15]) {\n            translate([i, 0, body_height/2])\n                rotate([0, 90, 0])\n                    translate([0, 0, -2])\n                        cylinder(h=8, r1=2, r2=0.5, $fn=6);\n        }\n    }\n}\n\n// Pectoral fins - side fins\nmodule pectoral_fins() {\n    color(fin_color) {\n        // Left fin\n        translate([body_length/4, body_width/2 + 2, -body_height/4])\n            rotate([0, 0, -30])\n                scale([1, 0.2, 0.8])\n                    cube([12, 1, 8]);\n        \n        // Right fin\n        translate([body_length/4, -body_width/2 - 2, -body_height/4])\n            rotate([0, 0, 30])\n                scale([1, 0.2, 0.8])\n                    cube([12, 1, 8]);\n    }\n}\n\n// Eye with socket\nmodule eye() {\n    translate([body_length/2 - 5, body_width/3, body_height/4])\n        union() {\n            // Eye socket\n            color([0.6, 0.3, 0.15])\n                sphere(d=6, $fn=20);\n            \n            // Eyeball\n            color(eye_color)\n                translate([1, 0, 0])\n                    sphere(d=4, $fn=20);\n            \n            // Eye highlight\n            color([1, 1, 1])\n                translate([2.5, 1, 1])\n                    sphere(d=1, $fn=10);\n        }\n}\n\n// Mouth - simple opening\nmodule mouth() {\n    color([0.5, 0.25, 0.15])\n        translate([body_length/2 - 2, 0, -body_height/4])\n            rotate([0, -20, 0])\n                difference() {\n                    cube([5, 8, 3]);\n                    translate([1, 2, 1])\n                        cube([7, 4, 3]);\n                }\n}\n\n// Scales texture - simple raised bumps\nmodule scales() {\n    color(skin_color)\n        for(x = [-30:5:30]) {\n            for(y = [-15:5:15]) {\n                if(x*x + y*y < 400) {\n                    translate([x, y, body_height/2 - 2])\n                        sphere(d=2, $fn=8);\n                }\n            }\n        }\n}\n\n// Assemble the fish\nunion() {\n    fish_body();\n    tail_fin();\n    dorsal_fin();\n    pectoral_fins();\n    eye();\n    mirror([0, 1, 0]) eye();  // Second eye on other side\n    mouth();\n    scales();\n}",
    "renders": true
  },
  {
    "food_item": "grouper",
    "openscad_code": "// Grouper Food Item - Realistic Style, Medium Complexity\n// A 3D printable fish-shaped treat for groupers\n\n$fn = 32;\n\n// Main body dimensions\nbody_length = 70;\nbody_height = 25;\nbody_width = 18;\n\n// Color definitions\nfish_color = [0.9, 0.7, 0.4];  // Golden brown cooked fish\neye_color = [0.1, 0.1, 0.1];\ndetail_color = [0.8, 0.6, 0.3];\n\nmodule fish_body() {\n    // Main fish body - oval shape\n    color(fish_color)\n    union() {\n        // Central body\n        scale([1, 0.6, 0.4])\n            sphere(d=body_length);\n        \n        // Tail section\n        translate([-body_length/2, 0, 0])\n            rotate([0, 0, 45])\n            scale([0.8, 0.2, 0.3])\n            cylinder(h=body_length/3, d1=body_width*1.5, d2=0);\n        \n        // Head bump\n        translate([body_length/3, 0, body_height/4])\n            scale([0.6, 0.7, 0.5])\n            sphere(d=body_width);\n    }\n}\n\nmodule fish_details() {\n    // Eyes\n    color(eye_color)\n    for(side = [-1, 1]) {\n        translate([body_length/3, side*body_width/3, body_height/3])\n            sphere(d=3);\n    }\n    \n    // Mouth\n    color(detail_color)\n    translate([body_length/2, 0, 0])\n        rotate([90, 0, 0])\n        cylinder(h=1, d1=8, d2=5);\n    \n    // Scales pattern - using small spheres\n    color(detail_color)\n    for(i = [0:5]) {\n        for(j = [-2:2]) {\n            if(abs(j) <= 2 - i/3) {\n                translate([body_length/2 - i*8, j*4, body_height/2 - i*1.5])\n                    sphere(d=2);\n            }\n        }\n    }\n    \n    // Dorsal fin\n    color(fish_color)\n    translate([0, 0, body_height/2])\n    for(i = [0:4]) {\n        translate([i*5 - 10, 0, 0])\n            rotate([0, 20, 0])\n            cylinder(h=8 - i, d1=2, d2=0.5);\n    }\n    \n    // Pectoral fins\n    for(side = [-1, 1]) {\n        translate([body_length/4, side*body_width/2, -body_height/4])\n            rotate([side*30, 0, 0])\n            scale([0.5, 1, 0.2])\n            cylinder(h=10, d1=6, d2=3);\n    }\n}\n\nmodule fish_texture() {\n    // Grill marks\n    color([0.6, 0.4, 0.2])\n    for(i = [-2:2]) {\n        translate([i*8, 0, body_height/2 + 1])\n            cube([2, body_width*2, 1]);\n    }\n    \n    for(i = [-1:1]) {\n        rotate([0, 90, 0])\n        translate([0, i*8, body_height/2 + 1])\n            cube([2, body_length*1.2, 1]);\n    }\n}\n\n// Assemble the fish\nunion() {\n    fish_body();\n    fish_details();\n    fish_texture();\n}",
    "renders": true
  },
  {
    "food_item": "bass",
    "openscad_code": "// Realistic 3D printable bass fish food model\n// Medium complexity with texture details\n\n$fn = 50;\n\n// Main body module\nmodule bass_body() {\n    // Fish body shape using scaled spheres\n    color([0.8, 0.4, 0.2]) {\n        // Main body\n        scale([1.5, 0.8, 0.6]) sphere(d=40);\n        \n        // Tail section\n        translate([-25, 0, 0]) scale([0.8, 0.6, 0.5]) sphere(d=30);\n    }\n}\n\n// Fish tail fin\nmodule tail_fin() {\n    color([0.9, 0.5, 0.25]) {\n        // Left tail fin\n        translate([-35, -10, 0]) rotate([0, 0, 30]) \n            scale([0.3, 1.2, 0.1]) cube([20, 15, 2]);\n        \n        // Right tail fin\n        translate([-35, 10, 0]) rotate([0, 0, -30]) \n            scale([0.3, 1.2, 0.1]) cube([20, 15, 2]);\n    }\n}\n\n// Dorsal fin\nmodule dorsal_fin() {\n    color([0.7, 0.3, 0.15]) {\n        for(i = [-15:5:15]) {\n            translate([0 + i*0.5, 0, 15]) \n                rotate([90, 0, 0]) cylinder(h=8, d1=2, d2=0.5);\n        }\n    }\n}\n\n// Side fins\nmodule side_fins() {\n    color([0.85, 0.45, 0.2]) {\n        // Left fin\n        translate([5, -15, -2]) rotate([0, 0, -45]) \n            scale([0.8, 1, 0.1]) cube([12, 8, 2]);\n        \n        // Right fin\n        translate([5, 15, -2]) rotate([0, 0, 45]) \n            scale([0.8, 1, 0.1]) cube([12, 8, 2]);\n    }\n}\n\n// Eye details\nmodule eyes() {\n    color(\"white\") {\n        // Left eye\n        translate([15, -8, 8]) sphere(d=4);\n        // Right eye\n        translate([15, 8, 8]) sphere(d=4);\n    }\n    \n    color(\"black\") {\n        // Left pupil\n        translate([16, -8, 9]) sphere(d=2);\n        // Right pupil\n        translate([16, 8, 9]) sphere(d=2);\n    }\n}\n\n// Fish scales texture\nmodule scales() {\n    color([0.75, 0.35, 0.15]) {\n        for(i = [-10:5:20]) {\n            for(j = [-10:3:10]) {\n                translate([i, j, 12]) \n                    scale([0.8, 0.8, 0.1]) sphere(d=2);\n            }\n        }\n    }\n}\n\n// Mouth opening\nmodule mouth() {\n    color([0.6, 0.2, 0.1]) {\n        translate([20, 0, -2]) \n            rotate([0, -30, 0]) \n            scale([1, 0.8, 0.5]) sphere(d=8);\n    }\n}\n\n// Gills detail\nmodule gills() {\n    color([0.65, 0.25, 0.1]) {\n        for(i = [0:2:6]) {\n            translate([10 - i, -12, 0]) \n                rotate([0, 90, 0]) cylinder(h=0.5, d=3);\n            translate([10 - i, 12, 0]) \n                rotate([0, 90, 0]) cylinder(h=0.5, d=3);\n        }\n    }\n}\n\n// Assemble the bass\nunion() {\n    bass_body();\n    tail_fin();\n    dorsal_fin();\n    side_fins();\n    eyes();\n    scales();\n    mouth();\n    gills();\n}",
    "renders": true
  },
  {
    "food_item": "trout",
    "openscad_code": "// Realistic Trout Food Model - OpenSCAD\n// Medium complexity 3D printable trout\n\n// Colors\ncolor_flesh = [1, 0.8, 0.7];      // Salmon pink\ncolor_skin = [0.8, 0.5, 0.3];     // Brown-orange\ncolor_belly = [0.9, 0.85, 0.8];   // Light beige\ncolor_eye = [0.1, 0.1, 0.1];      // Black\ncolor_red = [0.7, 0.2, 0.2];      // Dark red for gills\n\n// Main parameters\ntrout_length = 80;\ntrout_height = 25;\ntrout_width = 18;\n\nmodule fish_body() {\n    // Main body - stretched sphere\n    scale([1.5, 1, 0.7])\n        sphere(d=trout_height, $fn=50);\n    \n    // Tail section - tapered\n    translate([-trout_length/2.5, 0, 0])\n        scale([0.8, 0.6, 0.5])\n            sphere(d=trout_height, $fn=30);\n}\n\nmodule fish_head() {\n    // Head - slightly flattened sphere\n    translate([trout_length/2.5, 0, 0])\n        scale([0.9, 0.7, 0.6])\n            sphere(d=trout_height, $fn=40);\n    \n    // Mouth opening\n    translate([trout_length/2.5 + 8, 0, -trout_height/4])\n        rotate([90, 0, 0])\n            cylinder(h=5, d1=6, d2=3, $fn=20);\n}\n\nmodule tail() {\n    // Forked tail\n    translate([-trout_length/2.5 - 12, 0, 0])\n        rotate([0, 0, 20])\n            scale([1.2, 0.2, 0.05])\n                cube([15, 10, 10], center=true);\n    \n    translate([-trout_length/2.5 - 12, 0, 0])\n        rotate([0, 0, -20])\n            scale([1.2, 0.2, 0.05])\n                cube([15, 10, 10], center=true);\n}\n\nmodule fins() {\n    // Dorsal fin\n    for(i = [-1, 1]) {\n        translate([trout_length/4 * i, 0, trout_height/2])\n            rotate([0, 90, 0])\n                scale([0.3, 1, 1])\n                    cylinder(h=8, d1=8, d2=2, $fn=3);\n    }\n    \n    // Pectoral fins\n    translate([trout_length/3, trout_width/2, 0])\n        rotate([0, 0, 45])\n            scale([0.8, 0.3, 0.05])\n                cube([10, 6, 2], center=true);\n    \n    translate([trout_length/3, -trout_width/2, 0])\n        rotate([0, 0, -45])\n            scale([0.8, 0.3, 0.05])\n                cube([10, 6, 2], center=true);\n}\n\nmodule fish_eyes() {\n    // Left eye\n    translate([trout_length/2.5 + 6, trout_width/3, trout_height/3])\n        sphere(d=3, $fn=20);\n    \n    // Right eye\n    translate([trout_length/2.5 + 6, -trout_width/3, trout_height/3])\n        sphere(d=3, $fn=20);\n}\n\nmodule scales_pattern() {\n    // Scale pattern using small spheres\n    for(i = [1:4]) {\n        for(j = [-2:2]) {\n            translate([trout_length/2 - i*8, j*3, trout_height/2])\n                sphere(d=1.5, $fn=8);\n        }\n    }\n}\n\nmodule gill_details() {\n    // Gill slits\n    for(i = [1:3]) {\n        translate([trout_length/2.5 - i*2, trout_width/3, 0])\n            rotate([0, 90, 0])\n                cylinder(h=0.5, d=1.5, $fn=8);\n        \n        translate([trout_length/2.5 - i*2, -trout_width/3, 0])\n            rotate([0, 90, 0])\n                cylinder(h=0.5, d=1.5, $fn=8);\n    }\n}\n\n// Main assembly\nunion() {\n    // Fish body with skin color\n    color(color_skin)\n        fish_body();\n    \n    // Head with skin color\n    color(color_skin)\n        fish_head();\n    \n    // Tail with skin color\n    color(color_skin)\n        tail();\n    \n    // Fins with slightly darker color\n    color([0.7, 0.4, 0.2])\n        fins();\n    \n    // Eyes\n    color(color_eye)\n        fish_eyes();\n    \n    // Scale pattern\n    color([0.9, 0.6, 0.4])\n        scales_pattern();\n    \n    // Gill details\n    color(color_red)\n        gill_details();\n    \n    // Belly - lighter color on bottom\n    color(color_belly) {\n        translate([0, 0, -trout_height/2])\n            scale([1.4, 0.9, 0.1])\n                sphere(d=trout_height, $fn=40);\n    }\n}",
    "renders": true
  },
  {
    "food_item": "perch",
    "openscad_code": "// Realistic Perch Fish Food Item - 3D Printable\n// Medium complexity with scales, fins, and texture\n\n$fn = 36;  // Smooth curves for realism\n\nmodule perch_body() {\n    color([0.85, 0.65, 0.15])  // Golden perch color\n    \n    // Main body - ellipsoid shape\n    union() {\n        // Body core\n        scale([1, 0.6, 0.4])\n        sphere(20);\n        \n        // Tail section\n        translate([-25, 0, 0])\n        scale([0.8, 0.1, 0.3])\n        sphere(15);\n        \n        // Head bulge\n        translate([18, 0, 2])\n        scale([0.9, 0.8, 0.7])\n        sphere(12);\n    }\n}\n\nmodule dorsal_fin() {\n    color([0.75, 0.55, 0.05])  // Darker fin color\n    \n    // Spiny dorsal fin\n    for(i = [-12:4:12]) {\n        translate([i, 0, 8])\n        rotate([0, 90, 0])\n        cylinder(h=3, r1=1, r2=3);\n    }\n    \n    // Soft dorsal fin\n    translate([0, 0, 10])\n    rotate([15, 0, 0])\n    scale([1.2, 0.1, 0.6])\n    sphere(10);\n}\n\nmodule pectoral_fin() {\n    color([0.75, 0.55, 0.05])\n    \n    // Left fin\n    translate([5, -10, -2])\n    rotate([0, -30, -20])\n    scale([0.3, 1, 0.8])\n    cylinder(h=12, r1=2, r2=1);\n    \n    // Right fin\n    translate([5, 10, -2])\n    rotate([0, 30, 20])\n    scale([0.3, 1, 0.8])\n    cylinder(h=12, r1=2, r2=1);\n}\n\nmodule tail_fin() {\n    color([0.75, 0.55, 0.05])\n    \n    // Tail fin - fan shape\n    translate([-35, 0, 0])\n    rotate([0, 90, 0])\n    scale([1, 2, 0.1])\n    cylinder(h=15, r1=0, r2=10);\n}\n\nmodule fish_scales() {\n    color([0.9, 0.7, 0.2])\n    \n    // Scale pattern along body\n    for(i = [0:5:30]) {\n        for(j = [-8:4:8]) {\n            if(i > 5 && i < 25) {\n                translate([15-i, j, 8])\n                rotate([0, 90, 0])\n                scale([0.3, 0.3, 0.1])\n                sphere(2);\n            }\n        }\n    }\n}\n\nmodule perch_eye() {\n    color(\"black\")\n    \n    // Left eye\n    translate([20, -5, 5])\n    sphere(2);\n    \n    // Right eye\n    translate([20, 5, 5])\n    sphere(2);\n    \n    // Eye highlights\n    color(\"white\")\n    translate([21, -4.5, 6])\n    sphere(0.5);\n    \n    translate([21, 5.5, 6])\n    sphere(0.5);\n}\n\nmodule mouth() {\n    color([0.6, 0.2, 0.1])\n    \n    // Mouth opening\n    translate([23, 0, -2])\n    rotate([0, -20, 0])\n    scale([0.5, 1, 0.3])\n    cylinder(h=5, r1=2, r2=1);\n}\n\nmodule lateral_line() {\n    color([0.6, 0.4, 0.1])\n    \n    // Lateral line along body\n    for(i = [-15:2:15]) {\n        translate([i, 0, 7.5])\n        sphere(0.5);\n    }\n}\n\nmodule perch_food() {\n    union() {\n        // Main body parts\n        perch_body();\n        \n        // Fins\n        dorsal_fin();\n        pectoral_fin();\n        tail_fin();\n        \n        // Details\n        fish_scales();\n        perch_eye();\n        mouth();\n        lateral_line();\n    }\n}\n\n// Generate the perch food item\nperch_food();",
    "renders": true
  },
  {
    "food_item": "catfish",
    "openscad_code": "// Catfish food item - realistic style with medium complexity\n// Overall dimensions approx 80mm long x 25mm wide x 20mm high\n\n// Main body of catfish\nmodule catfish_body() {\n    // Fish body - elongated oval shape\n    color([0.5, 0.35, 0.2]) {\n        // Create fish body with multiple spheres\n        union() {\n            // Main body section\n            scale([1.2, 0.6, 0.4]) sphere(d=40);\n            \n            // Taper tail section\n            translate([30, 0, 0])\n                scale([0.8, 0.4, 0.3]) sphere(d=25);\n            \n            // Head section\n            translate([-25, 0, 0])\n                scale([0.9, 0.7, 0.5]) sphere(d=35);\n        }\n    }\n}\n\n// Catfish barbels (whiskers)\nmodule barbels() {\n    color([0.4, 0.25, 0.15]) {\n        // Left barbels\n        translate([-20, 8, -2]) rotate([0, 0, 45]) cylinder(h=15, d=1.5);\n        translate([-20, 8, -2]) rotate([0, 0, 25]) cylinder(h=12, d=1.5);\n        \n        // Right barbels\n        translate([-20, -8, -2]) rotate([0, 0, -45]) cylinder(h=15, d=1.5);\n        translate([-20, -8, -2]) rotate([0, 0, -25]) cylinder(h=12, d=1.5);\n        \n        // Chin barbels\n        translate([-15, 0, -8]) rotate([90, 0, 0]) cylinder(h=10, d=1.5);\n        translate([-15, 3, -8]) rotate([90, 0, 0]) cylinder(h=8, d=1.5);\n        translate([-15, -3, -8]) rotate([90, 0, 0]) cylinder(h=8, d=1.5);\n    }\n}\n\n// Fish tail\nmodule fish_tail() {\n    color([0.5, 0.35, 0.2]) {\n        translate([40, 0, 0]) rotate([0, 0, 0]) {\n            // Tail fin - triangular shape\n            linear_extrude(height=2) polygon(points=[[0,0], [-15,12], [-15,-12]]);\n            \n            // Top tail lobe\n            translate([0, 0, 3]) rotate([0, 90, 0]) \n                scale([1, 0.7, 1]) cylinder(h=15, d1=8, d2=0);\n            \n            // Bottom tail lobe\n            translate([0, 0, -3]) rotate([0, -90, 0]) \n                scale([1, 0.7, 1]) cylinder(h=15, d1=8, d2=0);\n        }\n    }\n}\n\n// Dorsal fin\nmodule dorsal_fin() {\n    color([0.45, 0.3, 0.18]) {\n        // Main dorsal fin spine\n        translate([-5, 0, 10]) rotate([0, 0, 0]) {\n            for(i = [-4:1:4]) {\n                translate([i*3, 0, abs(i)*1.5]) \n                    cube([1.5, 0.5, 5+abs(i)]);\n            }\n        }\n    }\n}\n\n// Pectoral fins\nmodule pectoral_fins() {\n    color([0.45, 0.3, 0.18]) {\n        // Left fin\n        translate([0, 12, -2]) rotate([0, 0, -20]) {\n            scale([1.2, 1, 0.3]) sphere(d=12);\n        }\n        \n        // Right fin\n        translate([0, -12, -2]) rotate([0, 0, 20]) {\n            scale([1.2, 1, 0.3]) sphere(d=12);\n        }\n    }\n}\n\n// Fish skin texture\nmodule skin_texture() {\n    // Small bumps for realistic texture\n    color([0.55, 0.4, 0.25]) {\n        for(i = [-30:5:30]) {\n            for(j = [-15:5:15]) {\n                if(i*i + j*j < 800) {\n                    translate([i, j, 8*cos(i/10)*sin(j/10) + 5]) \n                        sphere(d=1.5);\n                }\n            }\n        }\n    }\n}\n\n// Eyes\nmodule eyes() {\n    color([0.1, 0.1, 0.1]) {\n        // Left eye\n        translate([-25, 5, 3]) sphere(d=3);\n        // Right eye\n        translate([-25, -5, 3]) sphere(d=3);\n    }\n}\n\n// Combine all parts\nunion() {\n    catfish_body();\n    barbels();\n    fish_tail();\n    dorsal_fin();\n    pectoral_fins();\n    eyes();\n    skin_texture();\n}",
    "renders": true
  },
  {
    "food_item": "tilapia",
    "openscad_code": "// Realistic Tilapia Fish - Medium Complexity\n// Overall length: ~80mm, optimized for 3D printing\n\n// Main body module\nmodule tilapia_body() {\n    // Fish body - ellipsoid shape\n    color([0.85, 0.65, 0.4]) {\n        difference() {\n            // Main body\n            scale([1.2, 0.6, 0.3])\n                sphere(d=60, $fn=20);\n            \n            // Tail cut\n            translate([30, 0, 0])\n                rotate([0, 0, -15])\n                    cube([40, 40, 20], center=true);\n        }\n    }\n}\n\n// Fish tail\nmodule tilapia_tail() {\n    color([0.85, 0.65, 0.4]) {\n        union() {\n            // Upper tail lobe\n            translate([-35, 15, 0])\n                rotate([0, 0, 25])\n                    scale([0.8, 0.5, 0.15])\n                        sphere(d=40, $fn=8);\n            \n            // Lower tail lobe\n            translate([-35, -15, 0])\n                rotate([0, 0, -25])\n                    scale([0.8, 0.5, 0.15])\n                        sphere(d=40, $fn=8);\n        }\n    }\n}\n\n// Dorsal fin\nmodule dorsal_fin() {\n    color([0.8, 0.6, 0.35]) {\n        for(i = [0:8]) {\n            translate([10 - i*3, 0, 8])\n                rotate([0, 90, 0])\n                    cylinder(h=8, r1=2, r2=0.5, $fn=3);\n        }\n    }\n}\n\n// Side fins\nmodule side_fins() {\n    color([0.75, 0.55, 0.3]) {\n        // Pectoral fin\n        translate([10, 15, -2])\n            rotate([0, 0, -45])\n                scale([1, 0.5, 0.1])\n                    sphere(d=15, $fn=8);\n        \n        // Pelvic fin\n        translate([-5, -12, -2])\n            rotate([0, 0, 45])\n                scale([0.8, 0.4, 0.1])\n                    sphere(d=12, $fn=8);\n    }\n}\n\n// Fish head including eye\nmodule fish_head() {\n    color([0.85, 0.65, 0.4]) {\n        union() {\n            // Head\n            translate([25, 0, 0])\n                scale([0.8, 0.7, 0.7])\n                    sphere(d=25, $fn=20);\n            \n            // Eye\n            color([0.1, 0.1, 0.1])\n                translate([30, 7, 5])\n                    sphere(d=3, $fn=10);\n            \n            // Mouth\n            color([0.6, 0.4, 0.2])\n                translate([32, 0, -2])\n                    rotate([0, -20, 0])\n                        difference() {\n                            cylinder(h=5, r=4, $fn=8);\n                            translate([0, 0, 3])\n                                cube([10, 10, 5], center=true);\n                        }\n        }\n    }\n}\n\n// Scales pattern on body\nmodule scales_pattern() {\n    color([0.7, 0.5, 0.25]) {\n        for(i = [0:4]) {\n            for(j = [-3:3]) {\n                translate([15 - i*5, j*3, 9])\n                    rotate([90, 0, 0])\n                        cylinder(h=0.5, r=1.5, $fn=6);\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    tilapia_body();\n    tilapia_tail();\n    fish_head();\n    dorsal_fin();\n    side_fins();\n    scales_pattern();\n}",
    "renders": true
  },
  {
    "food_item": "mahi",
    "openscad_code": "// Mahi (Dorado) Fish Fillet - Realistic Food Model\n// Medium complexity with scales, skin texture, and flesh layers\n\n$fn = 50;\n\n// Overall dimensions (mm)\nfillet_length = 80;\nfillet_width = 40;\nfillet_height = 15;\n\n// Main fillet body\nmodule fillet_body() {\n    // Create tapered fillet shape\n    hull() {\n        translate([-fillet_length/2, 0, 0])\n            scale([1, 0.8, 0.6])\n            sphere(d=fillet_width);\n        translate([fillet_length/2-10, 0, 0])\n            scale([0.3, 0.4, 0.3])\n            sphere(d=fillet_width*0.8);\n    }\n}\n\n// Fish skin with scales texture\nmodule fish_skin() {\n    difference() {\n        // Base skin layer\n        color([0.1, 0.3, 0.5, 0.9])  // Metallic blue-green\n        fillet_body();\n        \n        // Scale indentations\n        for (i = [-30:5:30]) {\n            for (j = [-15:4:15]) {\n                if (i*i + j*j < 900) {\n                    translate([i, j, -0.2])\n                        scale([1, 0.7, 0.3])\n                        sphere(d=2.5);\n                }\n            }\n        }\n    }\n}\n\n// Flesh layer with muscle segments\nmodule flesh_layer() {\n    color([1, 0.75, 0.6])  // Cooked mahi color\n    difference() {\n        // Main flesh\n        translate([0, 0, -0.5])\n            scale([0.95, 0.95, 0.8])\n            fillet_body();\n        \n        // Muscle segments\n        for (x = [-25:8:25]) {\n            translate([x, 0, -2])\n                rotate([0, 0, 90])\n                cube([0.5, fillet_width*2, fillet_height], center=true);\n        }\n        \n        // Flake lines\n        for (angle = [30:15:150]) {\n            rotate([0, 0, angle])\n                translate([-fillet_length/2, 0, -1])\n                    cube([fillet_length, 0.3, fillet_height]);\n        }\n    }\n}\n\n// Grilling marks\nmodule grill_marks() {\n    color([0.6, 0.4, 0.25])  // Darker grilled areas\n    for (i = [-20:10:20]) {\n        translate([i, -fillet_width/2, 0.5])\n            cube([2, fillet_width, 0.5]);\n    }\n}\n\n// Lemon wedge garnish\nmodule lemon_wedge() {\n    color([1, 0.9, 0.2])\n    translate([fillet_length/2+5, fillet_width/3, 5])\n    rotate([0, 0, 15])\n    difference() {\n        // Main wedge\n        cylinder(h=8, r1=8, r2=0);\n        \n        // Center cut\n        translate([0, -4, 4])\n            cube([8, 8, 8], center=true);\n        \n        // Pulp segments\n        for (i = [0:60:300]) {\n            rotate([0, 0, i])\n                translate([2, 0, 0])\n                    cube([0.5, 0.5, 8]);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Base fillet\n    union() {\n        fish_skin();\n        flesh_layer();\n    }\n    \n    // Grilling on top\n    grill_marks();\n    \n    // Garnish\n    lemon_wedge();\n}",
    "renders": true
  },
  {
    "food_item": "flounder",
    "openscad_code": "// Realistic 3D-printable flounder food item\n// Overall size: ~80 mm long, ~50 mm wide, ~6 mm thick\n\n// Main body module\nmodule flounder_body() {\n    color([0.82, 0.65, 0.48])  // light beige cooked fish color\n    \n    // Create oval flat body using scaled spheres\n    union() {\n        // Main body - flattened ellipsoid\n        scale([1, 0.65, 0.08])\n        sphere(d=50, $fn=40);\n        \n        // Thicker central ridge\n        translate([0, 0, 2])\n        scale([0.9, 0.5, 0.05])\n        sphere(d=45, $fn=30);\n    }\n}\n\n// Eye module\nmodule fish_eye(x_pos, y_pos) {\n    translate([x_pos, y_pos, 3])\n    union() {\n        // White part\n        color(\"white\")\n        sphere(d=3, $fn=20);\n        \n        // Dark pupil\n        color([0.2, 0.2, 0.2])\n        translate([0, 0, 1.2])\n        sphere(d=1.2, $fn=15);\n    }\n}\n\n// Fins with ribbed texture\nmodule fin(x_pos, y_pos, angle, scale_factor) {\n    translate([x_pos, y_pos, 1])\n    rotate([0, 0, angle])\n    scale([scale_factor, scale_factor, 1])\n    color([0.75, 0.6, 0.45])\n    union() {\n        // Base fin shape\n        linear_extrude(height=0.6)\n        polygon(points=[[0,0], [8,5], [12,0], [8,-5]]);\n        \n        // Fin ribs\n        for(i=[1:3]) {\n            translate([i*3, 0, 0.3])\n            rotate([90, 0, 0])\n            cylinder(h=5, d=0.3, $fn=8);\n        }\n    }\n}\n\n// Skin texture pattern\nmodule skin_texture() {\n    color([0.78, 0.62, 0.5])\n    for(x=[-18:4:18]) {\n        for(y=[-12:4:12]) {\n            if(norm([x,y]) < 22) {\n                translate([x, y, 0.2])\n                scale([1, 0.8, 0.1])\n                sphere(d=1.2, $fn=8);\n            }\n        }\n    }\n}\n\n// Tail section\nmodule tail() {\n    color([0.82, 0.65, 0.48])\n    translate([-28, 0, 1])\n    rotate([0, 0, 180])\n    linear_extrude(height=2)\n    polygon(points=[[0,0], [12,8], [18,0], [12,-8]]);\n}\n\n// Grill marks\nmodule grill_marks() {\n    color([0.5, 0.4, 0.3])\n    for(i=[-15:5:15]) {\n        translate([i, -20, 3.5])\n        rotate([90, 0, 0])\n        cylinder(h=40, d=0.6, $fn=8);\n    }\n    for(i=[-15:5:15]) {\n        translate([-25, i, 3.5])\n        rotate([90, 0, 90])\n        cylinder(h=50, d=0.6, $fn=8);\n    }\n}\n\n// Assemble the complete flounder\nunion() {\n    // Main body\n    flounder_body();\n    \n    // Texture on top\n    skin_texture();\n    \n    // Eyes (both sides since flounder has migrated eyes)\n    fish_eye(10, 8);\n    fish_eye(8, -10);\n    \n    // Fins\n    fin(20, 15, 45, 1);\n    fin(20, -15, -45, 1);\n    fin(-20, 10, 135, 0.8);\n    fin(-20, -10, -135, 0.8);\n    \n    // Tail\n    tail();\n    \n    // Grill marks for cooked appearance\n    grill_marks();\n}",
    "renders": true
  },
  {
    "food_item": "sole",
    "openscad_code": "// Realistic Sole Fish - 3D Printable Model\n// Medium complexity with food textures and proper proportions\n\n// Main parameters\nfish_length = 80;\nfish_width = 35;\nfish_thickness = 8;\n\nmodule sole_body() {\n    color(\"tan\") {\n        // Main body shape using hull of scaled spheres\n        hull() {\n            translate([-fish_length/2, 0, 0]) \n                scale([1.2, 0.8, 0.3]) \n                sphere(d=fish_width, $fn=20);\n            translate([fish_length/2, 0, 0]) \n                scale([0.3, 0.6, 0.2]) \n                sphere(d=fish_width, $fn=20);\n        }\n        \n        // Tail fin extension\n        translate([fish_length/2, 0, -fish_thickness/4]) \n            rotate([0, 0, 15]) \n            scale([0.8, 0.3, 0.1]) \n            cylinder(h=fish_length/3, d1=fish_width/2, d2=0, $fn=3);\n    }\n}\n\nmodule fish_details() {\n    // Eyes\n    color(\"black\") {\n        translate([-fish_length/3, fish_width/3, fish_thickness/2]) \n            sphere(d=2, $fn=8);\n        translate([-fish_length/3, -fish_width/3, fish_thickness/2]) \n            sphere(d=2, $fn=8);\n    }\n    \n    // Mouth line\n    color(\"brown\") {\n        translate([-fish_length/2.2, 0, fish_thickness/3]) \n            rotate([90, 0, 0]) \n            scale([1, 0.1, 0.1]) \n            cylinder(h=fish_width/3, d=0.5, $fn=8);\n    }\n    \n    // Skin texture - small scales\n    for (i = [-fish_length/2.5:5:fish_length/2.5]) {\n        for (j = [-fish_width/2.5:4:fish_width/2.5]) {\n            if (i*i/25 + j*j/9 < 1) {\n                color(\"peru\") {\n                    translate([i, j, fish_thickness/2 + 0.1]) \n                        sphere(d=0.8, $fn=6);\n                }\n            }\n        }\n    }\n    \n    // Lateral line\n    color(\"saddlebrown\") {\n        for (i = [-fish_length/2.5:3:fish_length/2.5]) {\n            translate([i, 0, fish_thickness/2 + 0.2]) \n                sphere(d=0.5, $fn=4);\n        }\n    }\n    \n    // Fins\n    color(\"burlywood\") {\n        // Top fin\n        difference() {\n            translate([-fish_length/4, fish_width/2, 0]) \n                rotate([0, 0, 45]) \n                scale([1, 0.3, 0.1]) \n                cylinder(h=fish_width/2, d1=fish_width/4, d2=0, $fn=3);\n            translate([-fish_length/4, fish_width/2, -1]) \n                cube([fish_width, fish_width/4, 2], center=true);\n        }\n        \n        // Bottom fin\n        difference() {\n            translate([-fish_length/4, -fish_width/2, 0]) \n                rotate([0, 0, -45]) \n                scale([1, 0.3, 0.1]) \n                cylinder(h=fish_width/2, d1=fish_width/4, d2=0, $fn=3);\n            translate([-fish_length/4, -fish_width/2, -1]) \n                cube([fish_width, fish_width/4, 2], center=true);\n        }\n    }\n}\n\nmodule sole_fish() {\n    union() {\n        sole_body();\n        fish_details();\n    }\n}\n\n// Generate the fish\nsole_fish();",
    "renders": true
  },
  {
    "food_item": "plaice",
    "openscad_code": "// Plaice fish food model - realistic style with medium complexity\n// Dimensions: ~70mm length, ~45mm width\n\ncolor([0.85, 0.65, 0.45])\ndifference() {\n    // Main fish body - flat oval shape\n    scale([1, 0.7, 0.15])\n    sphere(d=50, $fn=60);\n    \n    // Tail cutout\n    translate([22, 0, -3])\n    rotate([0, 0, 0])\n    scale([1.2, 0.4, 1])\n    cube([30, 25, 10], center=true);\n}\n\n// Tail fin\ntranslate([22, 0, -1.5])\nrotate([0, 45, 0])\nscale([0.8, 1, 0.1])\ncolor([0.9, 0.7, 0.5])\ncylinder(h=15, d1=20, d2=0, $fn=3);\n\n// Head with rounded front\ntranslate([-20, 0, -1])\nscale([1.1, 1, 0.8])\ncolor([0.87, 0.67, 0.47])\nsphere(d=22, $fn=50);\n\n// Eyes - left side\ntranslate([-23, 8, 2])\ncolor(\"white\")\nsphere(d=4);\n\ntranslate([-24.5, 8.5, 2.5])\ncolor(\"black\")\nsphere(d=2);\n\n// Mouth groove\ntranslate([-28, 0, -2])\nrotate([0, 20, 0])\nscale([0.3, 1, 0.2])\ncolor([0.7, 0.5, 0.35])\ncylinder(h=15, d=8);\n\n// Orange spots pattern\nmodule orange_spot(x, y, size) {\n    translate([x, y, 3])\n    color([0.9, 0.5, 0.2])\n    scale([1, 1, 0.1])\n    sphere(d=size);\n}\n\n// Generate random-looking spots\norange_spot(-15, 5, 4);\norange_spot(-8, -8, 3);\norange_spot(2, 12, 5);\norange_spot(10, -5, 3.5);\norange_spot(5, 0, 4);\norange_spot(-12, -10, 3);\norange_spot(0, -12, 4.5);\n\n// Dark speckles\nmodule dark_speckle(x, y) {\n    translate([x, y, 3.5])\n    color([0.4, 0.3, 0.2])\n    sphere(d=1);\n}\n\n// Add small speckles across body\nfor(i = [-20:5:20]) {\n    for(j = [-15:5:15]) {\n        if((i+j)%7 == 0) {\n            dark_speckle(i, j);\n        }\n    }\n}\n\n// Fin edges - small ridges\nmodule fin_ridge(x, y, angle) {\n    translate([x, y, 0.5])\n    rotate([0, 0, angle])\n    scale([0.8, 0.1, 0.8])\n    color([0.82, 0.62, 0.42])\n    cylinder(h=8, d=2);\n}\n\n// Add fin ridges around edges\nfin_ridge(18, 22, 30);\nfin_ridge(15, 25, 45);\nfin_ridge(10, 27, 60);\nfin_ridge(5, 28, 75);\nfin_ridge(-5, 27, 105);\nfin_ridge(-10, 25, 120);\nfin_ridge(-15, 22, 135);\n\n// Bottom fin details\nfin_ridge(15, -22, -30);\nfin_ridge(10, -25, -45);\nfin_ridge(5, -27, -60);\nfin_ridge(-5, -27, -105);\nfin_ridge(-10, -25, -120);\n\n// Gills detail\ntranslate([-18, 12, 1])\nrotate([0, 0, 90])\ncolor([0.75, 0.55, 0.35])\nscale([0.5, 0.5, 0.1])\ncylinder(h=8, d=3);\n\ntranslate([-18, -12, 1])\nrotate([0, 0, -90])\ncolor([0.75, 0.55, 0.35])\nscale([0.5, 0.5, 0.1])\ncylinder(h=8, d=3);",
    "renders": true
  },
  {
    "food_item": "herring",
    "openscad_code": "// Herring 3D model - realistic style, medium complexity\n// Dimensions: ~80mm length, ~20mm width, ~10mm height\n\n// Main body of the herring\nmodule herring_body() {\n    color([0.4, 0.3, 0.2])  // Dark silvery-brown fish color\n    \n    // Tapered body using scaled cylinders\n    union() {\n        // Head section (wider)\n        translate([0, 0, 5]) \n            scale([1, 0.8, 0.5]) \n                sphere(d=20);\n        \n        // Mid section\n        for(i = [1:10]) {\n            translate([i*5, 0, 5]) \n                scale([1 - i*0.05, 1 - i*0.03, 0.4]) \n                    sphere(d=18 - i*0.5);\n        }\n        \n        // Tail section (tapered end)\n        translate([55, 0, 5]) \n            scale([0.3, 0.3, 0.3]) \n                sphere(d=15);\n    }\n}\n\n// Fish tail\nmodule herring_tail() {\n    color([0.35, 0.28, 0.18])\n    \n    translate([58, 0, 5])\n    rotate([0, 0, 90])\n    difference() {\n        // Main tail fin\n        scale([1.5, 1, 0.1])\n            cylinder(h=20, d=20);\n        \n        // Cut to create forked tail\n        translate([0, 5, 0])\n            rotate([90, 0, 0])\n                cube([10, 10, 20]);\n    }\n}\n\n// Dorsal fin\nmodule dorsal_fin() {\n    color([0.3, 0.25, 0.15])\n    \n    for(i = [15:5:45]) {\n        translate([i, 0, 9])\n        rotate([0, -30, 0])\n        scale([0.3, 1, 0.1])\n            cylinder(h=8, d1=3, d2=1);\n    }\n}\n\n// Side fins (pectoral fins)\nmodule side_fins() {\n    color([0.3, 0.25, 0.15])\n    \n    // Left fin\n    translate([10, -8, 4])\n    rotate([0, 0, -30])\n    scale([1, 0.5, 0.1])\n        cylinder(h=10, d1=6, d2=3);\n    \n    // Right fin\n    translate([10, 8, 4])\n    mirror([0, 1, 0])\n    rotate([0, 0, -30])\n    scale([1, 0.5, 0.1])\n        cylinder(h=10, d1=6, d2=3);\n}\n\n// Fish scales pattern\nmodule scales_pattern() {\n    color([0.5, 0.4, 0.25])\n    \n    // Scales on body using small spheres\n    for(x = [5:5:50]) {\n        for(y = [-8:4:8]) {\n            if(y != 0) {\n                translate([x, y, 6])\n                scale([1, 0.7, 0.3])\n                    sphere(d=2);\n            }\n        }\n    }\n}\n\n// Eye\nmodule eye() {\n    color([0.1, 0.1, 0.1])\n    \n    translate([2, -5, 6])\n    sphere(d=3);\n    \n    translate([2, 5, 6])\n    sphere(d=3);\n}\n\n// Mouth\nmodule mouth() {\n    color([0.2, 0.15, 0.1])\n    \n    translate([0, 0, 3])\n    rotate([90, 0, 0])\n    scale([1, 0.3, 1])\n    cylinder(h=1, d=5);\n}\n\n// Bottom fins\nmodule bottom_fins() {\n    color([0.3, 0.25, 0.15])\n    \n    // Pelvic fins\n    translate([20, -6, 2])\n    rotate([0, 30, 0])\n    scale([0.5, 1, 0.1])\n        cylinder(h=6, d1=4, d2=2);\n    \n    translate([20, 6, 2])\n    mirror([0, 1, 0])\n    rotate([0, 30, 0])\n    scale([0.5, 1, 0.1])\n        cylinder(h=6, d1=4, d2=2);\n}\n\n// Assemble the complete herring\nunion() {\n    herring_body();\n    herring_tail();\n    dorsal_fin();\n    side_fins();\n    bottom_fins();\n    scales_pattern();\n    eye();\n    mouth();\n}",
    "renders": true
  },
  {
    "food_item": "pike",
    "openscad_code": "// Realistic Pike Fish Food Model (Medium Complexity)\n// 3D printable filet-style pike with scales and bone structure\n\ncolor([0.82, 0.75, 0.55])  // Light fish flesh color\n\n// Main fish body - slightly curved filet\nmodule fish_body() {\n    difference() {\n        // Main filet shape\n        hull() {\n            translate([-20, 0, 0]) scale([1, 0.8, 0.4]) sphere(15);\n            translate([20, 0, 0]) scale([0.6, 0.4, 0.2]) sphere(10);\n        }\n        \n        // Taper the tail\n        translate([15, 0, -2]) cube([15, 30, 10], center=true);\n        \n        // Remove center for bone cavity\n        translate([0, 0, -1]) cube([35, 8, 3], center=true);\n    }\n}\n\n// Fish skin with scales pattern\nmodule fish_skin() {\n    difference() {\n        union() {\n            fish_body();\n            \n            // Scale texture - rows of small domes\n            for (x = [-15:5:15]) {\n                for (y = [-10:3:10]) {\n                    if (x*x + y*y < 200) {\n                        translate([x, y, 2.5]) scale([1, 0.8, 0.3]) sphere(1.5);\n                    }\n                }\n            }\n        }\n        \n        // Skin cuts\n        translate([0, 0, -3]) cube([50, 30, 6], center=true);\n    }\n}\n\n// Fish bones structure\nmodule bones() {\n    color([0.95, 0.95, 0.9]) {\n        // Central spine\n        translate([0, 0, 0.5]) cube([35, 1.5, 1], center=true);\n        \n        // Rib bones\n        for (x = [-12:4:12]) {\n            translate([x, 0, 0.5]) rotate([0, 90, 0]) \n                cylinder(h=8, r=0.3, center=true);\n        }\n        \n        // Small pin bones\n        for (x = [-10:2:10]) {\n            for (y = [-2, 2]) {\n                translate([x, y, 0.5]) rotate([90, 0, 0]) \n                    cylinder(h=3, r=0.2, center=true);\n            }\n        }\n    }\n}\n\n// Darker skin layer\nmodule skin_layer() {\n    color([0.45, 0.4, 0.25]) {\n        difference() {\n            scale([1.02, 1.02, 0.3]) fish_body();\n            translate([0, 0, -3]) cube([50, 30, 6], center=true);\n        }\n    }\n}\n\n// Eye area (typical pike feature)\nmodule fish_head() {\n    color([0.3, 0.25, 0.15]) {\n        translate([-18, 0, 3]) sphere(4);\n        \n        // Eye\n        color([0.1, 0.1, 0.1]) \n            translate([-19, 2, 4]) sphere(1);\n            \n        // Mouth line\n        translate([-22, 5, 0]) rotate([0, 0, -30]) \n            cube([8, 0.5, 1]);\n    }\n}\n\n// Assemble the fish\nunion() {\n    skin_layer();\n    fish_skin();\n    bones();\n    fish_head();\n    \n    // Flesh color on top\n    color([0.9, 0.8, 0.7]) {\n        difference() {\n            translate([0, 0, 2.8]) scale([0.98, 0.98, 0.2]) fish_body();\n            translate([0, 0, -3]) cube([50, 30, 6], center=true);\n        }\n    }\n}",
    "renders": true
  },
  {
    "food_item": "char",
    "openscad_code": "// Char food item - realistic style, medium complexity\n// Realistic charred fish with skin texture and bones\n\n$fn = 32;\n\n// Main fish body\nmodule fish_body() {\n    difference() {\n        // Main fish shape - elongated ellipsoid\n        scale([1, 0.7, 0.4])\n            sphere(d = 80);\n        \n        // Tail cut\n        translate([30, 0, 0])\n            cube([60, 100, 50], center = true);\n        \n        // Head taper\n        translate([-30, 0, 0])\n            rotate([0, 0, 30])\n                cube([60, 80, 50], center = true);\n    }\n}\n\n// Fish tail\nmodule fish_tail() {\n    translate([36, 0, 0])\n        rotate([0, 90, 0])\n            difference() {\n                // Main tail shape\n                scale([1, 0.4, 2])\n                    cylinder(h = 20, d1 = 30, d2 = 5);\n                \n                // Tail fin cuts\n                for(i = [-1, 1]) {\n                    rotate([0, 0, i * 20])\n                        translate([0, -10, 0])\n                            cube([30, 20, 40], center = true);\n                }\n            }\n}\n\n// Skin texture pattern - charred spots\nmodule charred_skin() {\n    for(x = [-25:5:25]) {\n        for(y = [-15:5:15]) {\n            if((x + y) % 10 == 0) {\n                translate([x, y, 15.5])\n                    scale([1, 1, 0.3])\n                        sphere(d = 3 + (x % 3));\n            }\n        }\n    }\n}\n\n// Fish bones structure\nmodule fish_bones() {\n    color(\"ivory\", 0.7)\n    union() {\n        // Spine\n        translate([-25, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h = 50, d = 2);\n        \n        // Rib bones\n        for(i = [-20:5:20]) {\n            translate([i, 0, 0])\n                rotate([90, 0, 0])\n                    cylinder(h = 30 - abs(i/2), d = 1);\n        }\n    }\n}\n\n// Eye\nmodule fish_eye() {\n    translate([-25, 12, 5])\n        color(\"black\")\n            sphere(d = 3);\n}\n\n// Fins\nmodule fish_fins() {\n    // Top fin\n    translate([0, 0, 15])\n        rotate([90, 0, 0])\n            difference() {\n                cylinder(h = 20, d1 = 30, d2 = 10);\n                translate([0, 0, -5])\n                    cube([40, 5, 30], center = true);\n            }\n    \n    // Side fins\n    for(side = [-1, 1]) {\n        translate([-10, side * 20, -5])\n            rotate([0, side * 30, 0])\n                scale([0.5, 1, 1])\n                    cylinder(h = 15, d1 = 20, d2 = 5);\n    }\n}\n\n// Main assembly\ncolor(\"darkgray\")\nunion() {\n    // Main fish body\n    fish_body();\n    \n    // Fish tail\n    fish_tail();\n    \n    // Fins\n    fish_fins();\n    \n    // Charred skin texture on top\n    translate([0, 0, 0])\n        charred_skin();\n    \n    // Eye\n    fish_eye();\n    \n    // Bones visible through cut section\n    translate([0, 0, -5])\n        fish_bones();\n}\n\n// Additional char marks\ncolor(\"black\", 0.6)\nfor(i = [1:3]) {\n    rotate([0, 0, i * 120])\n        translate([10, 0, 16])\n            scale([1, 0.2, 0.1])\n                sphere(d = 20);\n}",
    "renders": true
  },
  {
    "food_item": "carp",
    "openscad_code": "// Realistic Carp Food Model - Medium Complexity\n// 3D printable carp food pellet with fish-like details\n\n// Overall dimensions\nlength = 60;\nwidth = 25;\nheight = 18;\n\n// Main body module\nmodule carp_food() {\n    // Main fish-shaped body\n    union() {\n        // Torso - elongated ellipsoid\n        scale([1, 0.6, 0.5])\n            sphere(d=width, $fn=30);\n        \n        // Tail section - tapering end\n        translate([length/2 - 10, 0, 0])\n            scale([1.2, 0.3, 0.3])\n                rotate([0, 90, 0])\n                    cylinder(h=15, d1=width*0.8, d2=width*0.2, $fn=20);\n        \n        // Head - rounded front\n        translate([-length/2 + 5, 0, 0])\n            scale([0.8, 0.7, 0.7])\n                sphere(d=width, $fn=25);\n        \n        // Dorsal fin ridge\n        for(i = [-20:5:15]) {\n            translate([i, 0, height/2 - 2])\n                rotate([90, 0, 0])\n                    cylinder(h=4, d1=6, d2=2, $fn=6);\n        }\n        \n        // Side fins\n        translate([-10, width/2 - 2, 0])\n            rotate([0, 0, 45])\n                scale([1, 0.3, 0.2])\n                    cylinder(h=8, d=width/3, $fn=12);\n        \n        mirror([0, 1, 0])\n            translate([-10, width/2 - 2, 0])\n                rotate([0, 0, 45])\n                    scale([1, 0.3, 0.2])\n                        cylinder(h=8, d=width/3, $fn=12);\n        \n        // Eye sockets\n        translate([-length/2 + 8, width/3, height/3])\n            sphere(d=4, $fn=12);\n        translate([-length/2 + 8, -width/3, height/3])\n            sphere(d=4, $fn=12);\n    }\n    \n    // Eye details\n    difference() {\n        // Eyes\n        translate([-length/2 + 8, width/3, height/3])\n            sphere(d=3.5, $fn=12);\n        translate([-length/2 + 8, -width/3, height/3])\n            sphere(d=3.5, $fn=12);\n        \n        // Pupils\n        translate([-length/2 + 9, width/3, height/3 + 1])\n            sphere(d=1.5, $fn=8);\n        translate([-length/2 + 9, -width/3, height/3 + 1])\n            sphere(d=1.5, $fn=8);\n    }\n    \n    // Mouth opening\n    difference() {\n        // Head detail\n        translate([-length/2 + 2, 0, -height/4])\n            rotate([0, 0, 90])\n                cylinder(h=8, d=6, $fn=20);\n        \n        // Mouth cavity\n        translate([-length/2 + 1, 0, -height/4])\n            rotate([0, 0, 90])\n                cylinder(h=10, d=4, $fn=20);\n    }\n    \n    // Scale texture pattern\n    for(x = [-20:8:20]) {\n        for(y = [-width/3:6:width/3]) {\n            if(norm([x, y]) < width/2 - 3) {\n                translate([x, y, height/2 - 0.5])\n                    scale([1.2, 0.8, 0.2])\n                        sphere(d=2, $fn=6);\n            }\n        }\n    }\n    \n    // Gill details\n    for(i = [0:10:30]) {\n        translate([-length/4 + i/3, width/2 - 1, 0])\n            rotate([0, 0, -30])\n                scale([0.5, 0.1, 0.5])\n                    cylinder(h=3, d=2, $fn=8);\n        translate([-length/4 + i/3, -width/2 + 1, 0])\n            rotate([0, 0, 30])\n                scale([0.5, 0.1, 0.5])\n                    cylinder(h=3, d=2, $fn=8);\n    }\n    \n    // Bottom stabilizing ridge (prevents rolling)\n    translate([0, 0, -height/2 + 1])\n        cube([length - 10, width/3, 2], center=true);\n}\n\n// Color: Natural brown-orange fish food color\ncolor(\"Burlywood\") \n    carp_food();\n\n// Optional: Add slight rotation for printing support\n// rotate([180, 0, 0]) carp_food();",
    "renders": true
  },
  {
    "food_item": "eel",
    "openscad_code": "// Realistic eel sushi roll with visible eel slice, rice base, and nori wrap\n// Designed for 3D printing with no overhangs\n\n// Main colors\neel_color = [0.6, 0.4, 0.2];\nrice_color = [0.95, 0.93, 0.9];\nnori_color = [0.1, 0.12, 0.08];\nsauce_color = [0.5, 0.25, 0.1];\n\n// Overall dimensions\nroll_length = 60;\nroll_width = 25;\nroll_height = 20;\n\n// Create the sushi roll base\nmodule sushi_roll() {\n    color(rice_color) {\n        // Rice cylinder base\n        translate([0, 0, 1])\n            cylinder(h=roll_height, d=roll_width);\n        \n        // Rice texture - small spheres for grain effect\n        for(i = [0:5:360]) {\n            rotate([0, 0, i])\n            translate([roll_width/2 - 3, 0, 10])\n            for(j = [0:2:roll_length/2]) {\n                translate([0, j, 0])\n                sphere(d=2);\n            }\n        }\n    }\n}\n\n// Nori seaweed wrap\nmodule nori_wrap() {\n    color(nori_color) {\n        // Bottom nori strip\n        translate([0, 0, 0])\n            cube([roll_length+4, roll_width+4, 1], center=true);\n        \n        // Side nori strips\n        rotate([90, 0, 0])\n        for(pos = [-roll_length/2, roll_length/2]) {\n            translate([pos, 0, 0])\n                cube([2, roll_height+2, roll_width+4]);\n        }\n    }\n}\n\n// Eel slice module\nmodule eel_slice() {\n    color(eel_color) {\n        // Main eel body - curved slice\n        translate([0, 0, roll_height+3])\n        rotate([0, 0, 0])\n        linear_extrude(height=3)\n        difference() {\n            // Outer curve\n            circle(d=roll_width+5);\n            // Inner curve\n            translate([0, -5, 0])\n            circle(d=roll_width-2);\n        }\n        \n        // Eel skin texture - small ridges\n        for(i = [-roll_width/2:2:roll_width/2]) {\n            translate([i, 0, roll_height+4])\n            rotate([90, 0, 0])\n                cylinder(h=0.5, d=1);\n        }\n    }\n}\n\n// Eel sauce drizzle\nmodule eel_sauce() {\n    color(sauce_color) {\n        // Main sauce lines\n        for(i = [0:8:roll_length-8]) {\n            translate([-roll_length/2 + i, 0, roll_height+6])\n            rotate([90, 0, 0])\n                cylinder(h=roll_width-4, d=1.5);\n        }\n        \n        // Sauce pooling\n        translate([0, 0, roll_height+5.5])\n            sphere(d=3);\n    }\n}\n\n// Assembly\nunion() {\n    // Base sushi roll\n    sushi_roll();\n    \n    // Nori wrapping\n    nori_wrap();\n    \n    // Eel on top\n    eel_slice();\n    \n    // Sauce on eel\n    eel_sauce();\n}\n\n// Add sesame seeds for decoration\nmodule sesame_seeds() {\n    color([0.8, 0.8, 0.7]) {\n        for(i = [0:10:roll_length-10]) {\n            for(j = [-10:5:10]) {\n                translate([-roll_length/2 + i, j, roll_height+7])\n                    sphere(d=0.8);\n            }\n        }\n    }\n}\n\n// Add sesame seeds\nsesame_seeds();",
    "renders": true
  },
  {
    "food_item": "swordfish",
    "openscad_code": "// Swordfish food item - realistic style\n// Size: ~80mm length\n\n$fn = 32;\n\n// Main colors\ncolor(\"burlywood\") swordfish();\n\nmodule swordfish() {\n    // Body\n    union() {\n        // Main body\n        translate([0, 0, 5]) scale([1, 0.6, 0.4]) sphere(d=40);\n        \n        // Tail section\n        translate([-25, 0, 5]) rotate([0, 0, 0]) \n            scale([1.5, 0.3, 0.2]) sphere(d=25);\n        \n        // Sword/beak\n        translate([25, 0, 8]) rotate([0, 30, 0])\n            cylinder(h=40, d1=2, d2=8);\n        \n        // Dorsal fin\n        translate([-5, 0, 20]) rotate([0, 0, 0])\n            scale([0.3, 1, 0.8]) cylinder(h=15, d=20);\n        \n        // Pectoral fins (2x)\n        for(side = [-1, 1]) {\n            translate([5, side*12, 2]) rotate([0, -20, side*20])\n                scale([1, 0.5, 0.3]) cylinder(h=15, d=12);\n        }\n        \n        // Tail fin upper\n        translate([-35, 0, 15]) rotate([0, 0, 0])\n            scale([0.2, 1, 1]) cylinder(h=20, d=15);\n        \n        // Tail fin lower\n        translate([-35, 0, -5]) rotate([0, 0, 0])\n            scale([0.2, 1, 1]) cylinder(h=15, d=12);\n        \n        // Eye\n        color(\"black\") {\n            translate([15, 8, 12]) sphere(d=3);\n            translate([15, -8, 12]) sphere(d=3);\n        }\n        \n        // Texture lines on body\n        for(i = [0:5]) {\n            color(\"peru\") {\n                translate([15 - i*8, 0, 8 + sin(i*30)*2]) \n                    rotate([90, 0, 0])\n                    scale([1, 1, 0.1]) cylinder(h=20, d=1);\n            }\n        }\n        \n        // Scale texture\n        for(y = [-8:4:8]) {\n            for(x = [-15:6:20]) {\n                color(\"tan\") {\n                    translate([x, y, 5 + abs(y)*0.5]) \n                        sphere(d=2);\n                }\n            }\n        }\n        \n        // Grill marks\n        color(\"saddlebrown\") {\n            for(i = [0:3]) {\n                translate([-10 + i*8, -12, 5]) \n                    rotate([90, 0, 0])\n                    cube([35, 1, 0.5]);\n            }\n            for(i = [0:2]) {\n                translate([0, -12 + i*8, 5]) \n                    rotate([0, 90, 0])\n                    cube([50, 1, 0.5]);\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "food_item": "shark",
    "openscad_code": "// Shark-shaped gummy candy - realistic style\n// 3D printable model with food texture details\n\n$fn = 32;\n\n// Main colors\ncolor_shark = [0.1, 0.1, 0.2];  // Dark blue-gray\ncolor_belly = [0.95, 0.95, 0.85];  // Light cream\ncolor_gummy = [0.1, 0.7, 0.9, 0.6];  // Translucent blue\n\n// Overall scale\nscale_factor = 0.8;\n\nmodule shark_gummy() {\n    scale([scale_factor, scale_factor, scale_factor])\n    union() {\n        // Main body with gummy translucency\n        color(color_gummy)\n        difference() {\n            // Body shape\n            union() {\n                // Torso - elongated sphere\n                scale([1, 0.6, 0.4])\n                sphere(r=25);\n                \n                // Tail extension\n                translate([-30, 0, 0])\n                scale([1.2, 0.3, 0.2])\n                sphere(r=20);\n            }\n            \n            // Hollow out center for gummy candy effect\n            scale([0.85, 0.75, 0.7])\n            sphere(r=25);\n        }\n        \n        // Solid shark features\n        color(color_shark) {\n            // Dorsal fin\n            translate([0, 0, 12])\n            rotate([0, 90, 0])\n            linear_extrude(height=15, center=true)\n            polygon(points=[[0,0], [-15,8], [-15,-8]]);\n            \n            // Side fins\n            for(side = [-1, 1]) {\n                translate([5, side*15, -5])\n                rotate([0, 0, side*30])\n                scale([0.7, 1, 0.3])\n                linear_extrude(height=12, center=true)\n                polygon(points=[[0,0], [-12,6], [-12,-6]]);\n            }\n            \n            // Tail fins\n            translate([-35, 0, 0])\n            union() {\n                // Upper tail\n                translate([0, 0, 5])\n                rotate([0, 90, 0])\n                linear_extrude(height=20, center=true)\n                polygon(points=[[0,0], [-18,8], [-18,-8]]);\n                \n                // Lower tail\n                translate([0, 0, -5])\n                rotate([0, 90, 0])\n                linear_extrude(height=15, center=true)\n                polygon(points=[[0,0], [-15,6], [-15,-6]]);\n            }\n        }\n        \n        // Belly color layer\n        color(color_belly) {\n            translate([0, 0, -8])\n            scale([0.9, 0.7, 0.2])\n            sphere(r=25);\n        }\n        \n        // Eyes\n        for(side = [-1, 1]) {\n            color([0, 0, 0])\n            translate([15, side*10, 8])\n            sphere(r=3);\n            \n            // Eye highlight\n            color([1, 1, 1])\n            translate([16, side*10.5, 9])\n            sphere(r=1);\n        }\n        \n        // Gills\n        for(i = [1:3]) {\n            color([0.05, 0.05, 0.15])\n            translate([5 - i*5, -20, 2])\n            rotate([0, 90, 0])\n            cylinder(h=0.5, r1=3, r2=2);\n            translate([5 - i*5, 20, 2])\n            rotate([0, 90, 0])\n            cylinder(h=0.5, r1=3, r2=2);\n        }\n        \n        // Sugar coating texture - small bumps\n        for(i = [0:15]) {\n            for(j = [0:8]) {\n                angle = i * 24;\n                height = j * 4 - 16;\n                color([1, 1, 1, 0.7])\n                translate([\n                    20 * cos(angle),\n                    20 * sin(angle),\n                    height\n                ])\n                sphere(r=0.8);\n            }\n        }\n        \n        // Mouth line\n        color([0, 0, 0])\n        translate([20, 0, -2])\n        rotate([90, 0, 0])\n        scale([1, 0.3, 1])\n        cylinder(h=0.5, r=8);\n        \n        // Teeth - small triangular shapes\n        for(i = [0:7]) {\n            angle = i * 45;\n            color([1, 1, 1])\n            translate([\n                20 + 8 * cos(angle),\n                8 * sin(angle),\n                -2\n            ])\n            rotate([90, 0, angle])\n            linear_extrude(height=0.5)\n            polygon(points=[[0,0], [-2,2], [2,2]]);\n        }\n    }\n}\n\n// Create the shark gummy\nshark_gummy();",
    "renders": true
  },
  {
    "food_item": "marlin",
    "openscad_code": "// Marlin steak food model - realistic style\n// 3D printable marlin steak with realistic fish texture\n\n$fn = 32;\n\n// Overall dimensions\nsteak_length = 70;\nsteak_width = 40;\nsteak_thickness = 12;\n\n// Color definitions\nmarlin_color = [0.82, 0.41, 0.28];\ndarker_marlin = [0.72, 0.35, 0.22];\nfat_color = [0.95, 0.95, 0.85];\nbone_color = [0.95, 0.92, 0.85];\n\n// Main marlin steak body\nmodule marlin_steak() {\n    difference() {\n        // Basic steak shape\n        color(marlin_color)\n        translate([0, 0, steak_thickness/2])\n        scale([1, 0.7, 1])\n        sphere(d=steak_width);\n        \n        // Taper the ends\n        translate([steak_length/2, 0, steak_thickness])\n        rotate([90, 0, 0])\n        cylinder(h=steak_width, r1=steak_width/2, r2=0);\n        \n        translate([-steak_length/2, 0, steak_thickness])\n        rotate([90, 0, 0])\n        cylinder(h=steak_width, r1=steak_width/2, r2=0);\n    }\n    \n    // Add thickness to make 3D printable\n    color(marlin_color)\n    translate([0, 0, steak_thickness/2])\n    scale([1.2, 0.8, 0.3])\n    sphere(d=steak_width);\n}\n\n// Fish muscle texture lines\nmodule muscle_lines() {\n    for (i = [-3:3]) {\n        color(darker_marlin)\n        translate([i * 6, 0, steak_thickness - 0.5])\n        scale([1, 0.8, 0.05])\n        sphere(d=steak_width - 5);\n    }\n}\n\n// Fat marbling pattern\nmodule fat_marbling() {\n    for (i = [-2:2]) {\n        for (j = [-1:1]) {\n            color(fat_color)\n            translate([i * 8 + 3, j * 6, steak_thickness - 0.8])\n            scale([1.2, 0.6, 0.1])\n            sphere(d=4);\n        }\n    }\n}\n\n// Fish skin texture on one side\nmodule fish_skin() {\n    color(darker_marlin)\n    translate([0, 0, 0.3])\n    scale([1.05, 0.75, 0.1])\n    sphere(d=steak_width);\n    \n    // Scale pattern\n    for (i = [-4:4]) {\n        for (j = [-2:2]) {\n            color([0.6, 0.3, 0.2])\n            translate([i * 4 + 2, j * 5 + 2.5, 0.5])\n            rotate([0, 0, 45])\n            scale([0.8, 0.4, 0.1])\n            cube([3, 2, 0.2]);\n        }\n    }\n}\n\n// Bone section\nmodule bone_section() {\n    color(bone_color)\n    translate([steak_length/4, 0, steak_thickness/2])\n    rotate([0, 90, 0])\n    cylinder(h=8, r=3);\n    \n    // Bone texture\n    for (i = [0:3]) {\n        color([0.9, 0.85, 0.8])\n        translate([steak_length/4, 0, steak_thickness/2 + i * 2 - 3])\n        rotate([0, 90, 0])\n        cylinder(h=7, r=2.8);\n    }\n}\n\n// Assemble the marlin steak\nunion() {\n    marlin_steak();\n    muscle_lines();\n    fat_marbling();\n    fish_skin();\n    bone_section();\n}",
    "renders": true
  },
  {
    "food_item": "wahoo",
    "openscad_code": "// Wahoo food model - realistic fish fillet\n// Medium complexity with texture and proper proportions\n\n// Overall scale\nscale_factor = 0.8;\n\n// Main fillet body\nmodule fillet_body() {\n    difference() {\n        // Main fillet shape\n        scale([scale_factor, scale_factor, 0.6])\n        hull() {\n            translate([0, 0, 0])\n            sphere(d=25);\n            translate([35, 0, 0])\n            sphere(d=15);\n            translate([-35, 0, 0])\n            sphere(d=20);\n        }\n        \n        // Remove center to flatten\n        translate([0, 0, -15])\n        cube([100, 40, 30], center=true);\n    }\n}\n\n// Fish skin texture pattern\nmodule skin_texture() {\n    difference() {\n        translate([0, 0, 0])\n        fillet_body();\n        \n        // Create diamond scale pattern\n        for (x = [-30:5:30]) {\n            for (y = [-15:5:15]) {\n                translate([x, y, 3])\n                scale([1, 0.7, 0.3])\n                sphere(d=3);\n            }\n        }\n    }\n}\n\n// Fish meat layers\nmodule meat_layers() {\n    color(\"salmon\") {\n        difference() {\n            // Main meat portion\n            scale([0.95*scale_factor, 0.95*scale_factor, 0.5])\n            hull() {\n                translate([0, 0, 0])\n                sphere(d=25);\n                translate([33, 0, 0])\n                sphere(d=14);\n                translate([-33, 0, 0])\n                sphere(d=19);\n            }\n            \n            // Layer lines\n            for (i = [-25:5:25]) {\n                translate([i, 0, 2])\n                scale([1, 1, 0.1])\n                cube([50, 20, 1], center=true);\n            }\n        }\n    }\n}\n\n// Bloodline along center\nmodule bloodline() {\n    color(\"brown\") {\n        translate([0, 0, 1.8])\n        scale([0.3*scale_factor, 0.1*scale_factor, 0.1])\n        hull() {\n            translate([-30, 0, 0])\n            sphere(d=3);\n            translate([30, 0, 0])\n            sphere(d=2);\n        }\n    }\n}\n\n// Fat layer on top\nmodule fat_layer() {\n    color(\"ivory\") {\n        translate([0, 0, 2.2])\n        scale([0.98*scale_factor, 0.98*scale_factor, 0.1])\n        hull() {\n            translate([-32, 0, 0])\n            sphere(d=25);\n            translate([32, 0, 0])\n            sphere(d=15);\n        }\n    }\n}\n\n// Skin layer with color\nmodule skin_layer() {\n    color(\"steelblue\") {\n        difference() {\n            // Main skin\n            scale([1.02*scale_factor, 1.02*scale_factor, 0.15])\n            hull() {\n                translate([-35, 0, 0])\n                sphere(d=25);\n                translate([35, 0, 0])\n                sphere(d=15);\n            }\n            \n            // Scale indents\n            for (x = [-25:5:25]) {\n                for (y = [-12:4:12]) {\n                    translate([x, y, 1.2])\n                    sphere(d=1.5, $fn=8);\n                }\n            }\n        }\n    }\n}\n\n// Combine all components\nunion() {\n    meat_layers();\n    bloodline();\n    fat_layer();\n    skin_layer();\n}",
    "renders": true
  },
  {
    "food_item": "barracuda",
    "openscad_code": "// Barracuda-shaped fish stick (realistic style, medium complexity)\n// Overall dimensions: 80mm length, 20mm width, 12mm height\n\n$fn = 32;\n\n// Main body - elongated fish shape\nmodule fish_body() {\n    color([0.9, 0.7, 0.5])  // Golden brown fried color\n    \n    union() {\n        // Main body segment\n        translate([0, 0, 6])\n            scale([1, 0.3, 0.6])\n            sphere(d = 60);\n        \n        // Tail segment\n        translate([-35, 0, 6])\n            scale([1.2, 0.2, 0.4])\n            sphere(d = 40);\n        \n        // Head segment\n        translate([30, 0, 6])\n            scale([0.8, 0.35, 0.7])\n            sphere(d = 50);\n    }\n}\n\n// Fish tail\nmodule fish_tail() {\n    color([0.85, 0.65, 0.45])\n    \n    translate([-45, 0, 6])\n        rotate([0, 0, 0])\n        linear_extrude(height = 2)\n        polygon(points=[\n            [0, 0],\n            [-15, -10],\n            [-15, 10],\n            [0, 0]\n        ]);\n}\n\n// Dorsal fin\nmodule dorsal_fin() {\n    color([0.8, 0.6, 0.4])\n    \n    for(i = [20:-5:-20]) {\n        translate([i, 0, 11])\n            rotate([0, 90, 0])\n            scale([0.3, 1, 1])\n            cylinder(h = 8, r1 = 3, r2 = 0.5);\n    }\n}\n\n// Pectoral fins\nmodule pectoral_fins() {\n    color([0.8, 0.6, 0.4])\n    \n    // Left fin\n    translate([10, 10, 5])\n        rotate([0, 0, -30])\n        scale([1, 0.3, 0.1])\n        sphere(d = 15);\n    \n    // Right fin\n    mirror([0, 1, 0])\n        translate([10, 10, 5])\n            rotate([0, 0, -30])\n            scale([1, 0.3, 0.1])\n            sphere(d = 15);\n}\n\n// Breading texture pattern\nmodule breading_texture() {\n    color([0.9, 0.8, 0.6])\n    \n    // Random breading bumps\n    for(i = [0:10:80]) {\n        for(j = [-8:4:8]) {\n            for(k = [3:2:9]) {\n                if((i + j + k) % 7 == 0) {\n                    translate([i - 40, j, k])\n                        sphere(d = 1 + (i % 3));\n                }\n            }\n        }\n    }\n}\n\n// Eyes\nmodule eyes() {\n    color([0, 0, 0])\n    \n    // Left eye\n    translate([35, 5, 8])\n        sphere(d = 2);\n    \n    // Right eye\n    translate([35, -5, 8])\n        sphere(d = 2);\n}\n\n// Mouth line\nmodule mouth() {\n    color([0.6, 0.4, 0.3])\n    \n    translate([40, 0, 5])\n        rotate([90, 0, 0])\n        linear_extrude(height = 1)\n        square([8, 2]);\n}\n\n// Scale texture lines\nmodule scale_lines() {\n    color([0.7, 0.5, 0.3])\n    \n    for(i = [-20:5:25]) {\n        hull() {\n            translate([i, 0, 6.1])\n                sphere(d = 0.5);\n            translate([i + 2, 0, 6.1])\n                sphere(d = 0.5);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    fish_body();\n    fish_tail();\n    dorsal_fin();\n    pectoral_fins();\n    breading_texture();\n    eyes();\n    mouth();\n    scale_lines();\n}",
    "renders": true
  },
  {
    "food_item": "venison",
    "openscad_code": "// Venison steak with bone - realistic style\n\n// Main parameters\nsteak_width = 60;\nsteak_length = 80;\nsteak_thickness = 15;\nbone_length = 40;\nbone_diameter = 8;\n\n// Render the complete venison steak\ncolor([0.4, 0.2, 0.15]) {\n    union() {\n        // Main steak body\n        translate([0, 0, steak_thickness/2]) {\n            difference() {\n                // Base steak shape\n                scale([1.2, 1, 1]) \n                sphere(d=steak_width);\n                \n                // Cut bottom flat\n                translate([0, 0, -steak_thickness]) \n                cube([steak_width*2, steak_width*2, steak_thickness*2], center=true);\n                \n                // Bone socket\n                translate([steak_width/2 - 10, 0, -steak_thickness]) \n                cylinder(h=steak_thickness*2, d=bone_diameter + 4, center=true);\n            }\n        }\n        \n        // Bone protruding from steak\n        translate([steak_width/2 - 5, 0, steak_thickness/2]) {\n            rotate([0, 90, 0]) {\n                cylinder(h=bone_length, d=bone_diameter);\n                \n                // Bone end shape\n                translate([bone_length, 0, 0]) \n                sphere(d=bone_diameter + 2);\n            }\n        }\n        \n        // Steak thickness variation\n        translate([0, 0, steak_thickness/2 + 2]) {\n            // Fat layer on edges\n            color([0.9, 0.8, 0.7]) {\n                for(i = [0:30:359]) {\n                    rotate([0, 0, i]) \n                    translate([steak_width/2 - 5, 0, 0]) \n                    scale([1, 0.3, 0.3]) \n                    sphere(d=8);\n                }\n            }\n            \n            // Muscle fiber texture\n            color([0.35, 0.18, 0.12]) {\n                for(y = [-steak_length/2 + 10:5:steak_length/2 - 10]) {\n                    for(x = [-steak_width/2 + 10:8:steak_width/2 - 10]) {\n                        translate([x, y, 1]) \n                        rotate([0, 0, 45]) \n                        scale([1, 0.2, 0.1]) \n                        cube([6, 2, 1], center=true);\n                    }\n                }\n            }\n        }\n        \n        // Grill marks\n        color([0.25, 0.12, 0.08]) {\n            for(i = [-20:10:20]) {\n                translate([i, 0, steak_thickness + 0.5]) \n                rotate([90, 0, 0]) \n                scale([0.3, 1, 1]) \n                cylinder(h=steak_length - 10, d=2);\n            }\n            for(j = [-25:10:25]) {\n                translate([0, j, steak_thickness + 0.5]) \n                rotate([0, 90, 0]) \n                scale([1, 0.3, 1]) \n                cylinder(h=steak_width - 10, d=2);\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "food_item": "bison",
    "openscad_code": "// Bison-shaped gingerbread cookie (medium complexity, realistic style)\n// Overall size: 80mm x 55mm x 12mm\n\n$fn = 32;\n\n// Main body - gingerbread colored\ncolor([0.6, 0.35, 0.15]) {\n    // Body base - rounded rectangular shape\n    translate([0, 0, 0]) {\n        hull() {\n            translate([-25, -15, 0]) sphere(12);\n            translate([25, -15, 0]) sphere(12);\n            translate([-25, 15, 0]) sphere(12);\n            translate([25, 15, 0]) sphere(12);\n        }\n        linear_extrude(height=8) scale([0.8, 0.7]) offset(r=5) circle(r=20);\n    }\n    \n    // Head\n    translate([28, 0, 5]) {\n        union() {\n            // Main head shape\n            scale([1.2, 0.8, 0.8]) sphere(10);\n            \n            // Muzzle\n            translate([10, 0, -2]) {\n                scale([1.3, 0.9, 0.6]) sphere(6);\n            }\n            \n            // Horns\n            for(side = [-1, 1]) {\n                translate([5, side * 6, 8]) {\n                    rotate([0, side * 15, 0]) {\n                        cylinder(h=8, r1=2, r2=1);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Legs\n    for(side = [-1, 1]) {\n        for(pos = [-10, 10]) {\n            translate([pos, side * 18, 0]) {\n                cube([6, 4, 10], center=true);\n            }\n        }\n    }\n    \n    // Hump\n    translate([-15, 0, 8]) {\n        scale([1, 1.2, 0.6]) sphere(12);\n    }\n    \n    // Tail\n    translate([-28, 12, 6]) {\n        rotate([0, 0, 45]) {\n            scale([0.3, 1, 0.3]) sphere(8);\n        }\n    }\n}\n\n// Gingerbread texture - sugar coating\ncolor([0.9, 0.9, 0.9]) {\n    // Beard texture\n    for(i = [1:6]) {\n        angle = i * 60;\n        translate([35 + cos(angle) * 3, sin(angle) * 4, 4]) {\n            sphere(0.5);\n        }\n    }\n    \n    // Body sugar spots\n    for(i = [1:20]) {\n        x = (rand(i) - 0.5) * 50;\n        y = (rand(i*2) - 0.5) * 30;\n        z = 8.5;\n        translate([x, y, z]) {\n            sphere(0.8);\n        }\n    }\n}\n\n// Eyes - chocolate drops\ncolor([0.2, 0.1, 0.05]) {\n    for(side = [-1, 1]) {\n        translate([35, side * 4, 6]) {\n            sphere(1.5);\n        }\n    }\n}\n\n// Hooves - darker gingerbread\ncolor([0.4, 0.2, 0.1]) {\n    for(side = [-1, 1]) {\n        for(pos = [-10, 10]) {\n            translate([pos, side * 18, -5]) {\n                cube([7, 5, 3], center=true);\n            }\n        }\n    }\n}\n\n// Icing details\ncolor([0.95, 0.95, 0.85]) {\n    // Outline along back\n    for(t = [0:0.1:1]) {\n        x = lerp(-25, 25, t);\n        y = lerp(0, 0, t) + sin(t * 180) * 3;\n        z = 8.5;\n        translate([x, y, z]) {\n            sphere(0.6);\n        }\n    }\n    \n    // Face outline\n    for(t = [0:0.1:1]) {\n        angle = t * 360;\n        x = 28 + cos(angle) * 8;\n        y = sin(angle) * 6;\n        z = 5 + sin(angle * 2) * 2;\n        translate([x, y, z]) {\n            sphere(0.5);\n        }\n    }\n}\n\n// Helper functions\nfunction lerp(a, b, t) = a + (b - a) * t;\nfunction rand(x) = (sin(x * 123.456) + 1) / 2;",
    "renders": true
  },
  {
    "food_item": "elk",
    "openscad_code": "// Elk meat jerky strip - realistic style\n// Overall dimensions: 80mm x 25mm x 8mm\n\n$fn = 32;\n\n// Main color for elk jerky - dark reddish brown\ncolor([0.4, 0.2, 0.15]) {\n    // Main meat body\n    difference() {\n        // Base shape - slightly curved strip\n        translate([0, 0, 4]) {\n            scale([1, 0.8, 0.8]) {\n                hull() {\n                    translate([-35, 0, 0]) sphere(10);\n                    translate([35, 0, 0]) sphere(10);\n                    translate([-30, -10, 0]) sphere(8);\n                    translate([30, 10, 0]) sphere(8);\n                }\n            }\n        }\n        \n        // Tapered ends\n        translate([-45, 0, 4]) rotate([0, 0, 0]) cube([20, 30, 10], center=true);\n        translate([45, 0, 4]) rotate([0, 0, 0]) cube([20, 30, 10], center=true);\n    }\n    \n    // Surface texture - meat grain lines\n    for(i = [-30:5:30]) {\n        translate([i, -12, 8.1]) {\n            rotate([90, 0, 0]) {\n                scale([0.3, 0.5, 1]) {\n                    cylinder(h = 24, r1 = 1, r2 = 0.5);\n                }\n            }\n        }\n    }\n    \n    // Fat marbling spots\n    color([0.8, 0.7, 0.6]) {\n        for(x = [-25:10:25]) {\n            for(y = [-8:4:8]) {\n                translate([x + (x/10), y, 7.5 + sin(x+y)*0.5]) {\n                    scale([1, 0.7, 0.3]) {\n                        sphere(1.5);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Surface imperfections\n    color([0.3, 0.15, 0.1]) {\n        for(i = [1:15]) {\n            angle = i * 137.5;\n            r = 15 + sin(i*2) * 8;\n            translate([cos(angle) * r, sin(angle) * r * 0.6, 8.2]) {\n                sphere(0.5 + sin(i)*0.3);\n            }\n        }\n    }\n    \n    // Edges - slightly rough\n    difference() {\n        // Main edge shape\n        translate([0, 0, 4]) {\n            scale([1, 0.7, 0.8]) {\n                hull() {\n                    translate([-35, 0, 0]) sphere(11);\n                    translate([35, 0, 0]) sphere(11);\n                    translate([-30, -11, 0]) sphere(9);\n                    translate([30, 11, 0]) sphere(9);\n                }\n            }\n        }\n        \n        // Inner smooth shape\n        translate([0, 0, 4]) {\n            scale([0.9, 0.65, 0.7]) {\n                hull() {\n                    translate([-35, 0, 0]) sphere(10);\n                    translate([35, 0, 0]) sphere(10);\n                    translate([-30, -10, 0]) sphere(8);\n                    translate([30, 10, 0]) sphere(8);\n                }\n            }\n        }\n    }\n    \n    // Bottom surface with drying marks\n    translate([0, 0, 0.5]) {\n        difference() {\n            cube([80, 25, 1], center=true);\n            \n            // Grid pattern from drying rack\n            for(x = [-35:5:35]) {\n                translate([x, 0, -0.1]) cube([0.5, 26, 1.2]);\n            }\n            for(y = [-10:5:10]) {\n                translate([0, y, -0.1]) cube([80, 0.5, 1.2]);\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "food_item": "moose",
    "openscad_code": "// Moose-shaped gingerbread cookie with realistic details\n// Overall dimensions: ~85mm long, ~70mm tall, ~8mm thick\n\n// Main cookie color\ncolor([0.72, 0.52, 0.35])\n\n// Main body\ndifference() {\n    // Base cookie shape\n    linear_extrude(height = 8) {\n        // Moose body outline\n        hull() {\n            // Head\n            translate([0, 25, 0]) {\n                circle(d = 25, $fn = 32);\n            }\n            // Body\n            translate([0, -10, 0]) {\n                circle(d = 35, $fn = 32);\n            }\n            // Rear\n            translate([-5, -25, 0]) {\n                circle(d = 30, $fn = 32);\n            }\n        }\n        \n        // Antlers\n        translate([0, 20, 0]) {\n            rotate([0, 0, 15]) {\n                hull() {\n                    translate([8, 8, 0]) circle(d = 4);\n                    translate([15, 12, 0]) circle(d = 3);\n                    translate([12, 18, 0]) circle(d = 2);\n                }\n            }\n            rotate([0, 0, -15]) {\n                mirror([1, 0, 0]) {\n                    hull() {\n                        translate([8, 8, 0]) circle(d = 4);\n                        translate([15, 12, 0]) circle(d = 3);\n                        translate([12, 18, 0]) circle(d = 2);\n                    }\n                }\n            }\n        }\n        \n        // Legs\n        translate([-8, -20, 0]) circle(d = 6);\n        translate([8, -20, 0]) circle(d = 6);\n        translate([-6, -10, 0]) circle(d = 5);\n        translate([6, -10, 0]) circle(d = 5);\n    }\n    \n    // Eye cutouts\n    translate([5, 25, 4]) {\n        sphere(d = 3, $fn = 16);\n    }\n    translate([-5, 25, 4]) {\n        sphere(d = 3, $fn = 16);\n    }\n    \n    // Nostril cutouts\n    translate([2, 32, 4]) {\n        sphere(d = 2, $fn = 16);\n    }\n    translate([-2, 32, 4]) {\n        sphere(d = 2, $fn = 16);\n    }\n}\n\n// Gingerbread texture dots\nmodule texture_dot() {\n    color([0.62, 0.42, 0.25]) {\n        sphere(d = 1.5, $fn = 8);\n    }\n}\n\n// Random texture placement\nfor(i = [1:50]) {\n    translate([\n        rands(-20, 20, 1)[0],\n        rands(-30, 35, 1)[0],\n        8.1\n    ]) {\n        texture_dot();\n    }\n}\n\n// Sugar glaze details on antlers\ncolor([1, 0.95, 0.85]) {\n    // Antler tips\n    translate([15, 12, 8]) {\n        sphere(d = 3, $fn = 16);\n    }\n    translate([-15, 12, 8]) {\n        sphere(d = 3, $fn = 16);\n    }\n    \n    // Hoof details\n    translate([-8, -20, 2]) {\n        cylinder(h = 2, d1 = 5, d2 = 6, $fn = 16);\n    }\n    translate([8, -20, 2]) {\n        cylinder(h = 2, d1 = 5, d2 = 6, $fn = 16);\n    }\n}\n\n// Cinnamon stick tail\ncolor([0.5, 0.35, 0.25]) {\n    translate([-5, -25, 6]) {\n        rotate([90, 0, 0]) {\n            cylinder(h = 8, d = 4, $fn = 16);\n        }\n    }\n}",
    "renders": true
  },
  {
    "food_item": "caribou",
    "openscad_code": "// Caribou cookie cutter (medium complexity, realistic food item)\n// Overall dimensions: ~80mm long x 50mm tall x 8mm thick\n\n// Basic parameters\n$fn = 32;\ncookie_thickness = 8;\ncutter_wall = 1.5;\nbody_height = 40;\nbody_length = 65;\n\n// Cookie base shape\nmodule cookie_base() {\n    difference() {\n        // Main cookie body\n        color(\"burlywood\")\n        scale([1, 0.7, 1])\n        cylinder(h = cookie_thickness, r = body_length/2, center = true);\n        \n        // Add some irregular edges for realism\n        for(i = [0:15]) {\n            rotate([0, 0, i*360/16])\n            translate([body_length/2 - 3, 0, cookie_thickness/2])\n            sphere(r = 1.5 + sin(i*3)*0.5);\n        }\n    }\n}\n\n// Caribou silhouette cutter\nmodule caribou_silhouette() {\n    union() {\n        // Main body\n        translate([0, 0, cookie_thickness/2])\n        scale([1, 0.8, 1])\n        cylinder(h = cookie_thickness + 0.1, r = 18);\n        \n        // Neck\n        translate([0, 15, cookie_thickness/2])\n        rotate([0, 0, -10])\n        scale([0.4, 1.2, 1])\n        cylinder(h = cookie_thickness + 0.1, r = 8);\n        \n        // Head\n        translate([-5, 25, cookie_thickness/2])\n        scale([0.8, 1, 1])\n        sphere(r = 12);\n        \n        // Antlers (left)\n        translate([-8, 22, cookie_thickness/2 + 8])\n        rotate([0, 0, -30])\n        cylinder(h = 15, r = 1.5);\n        translate([-10, 17, cookie_thickness/2 + 15])\n        rotate([0, 0, -60])\n        cylinder(h = 8, r = 1);\n        \n        // Antlers (right)\n        translate([8, 22, cookie_thickness/2 + 8])\n        rotate([0, 0, 30])\n        cylinder(h = 15, r = 1.5);\n        translate([10, 17, cookie_thickness/2 + 15])\n    rotate([0, 0, 60])\n    cylinder(h = 8, r = 1);\n    \n    // Legs\n    translate([-10, -15, cookie_thickness/2])\n    cylinder(h = 15, r = 2);\n    translate([-4, -15, cookie_thickness/2])\n    cylinder(h = 15, r = 2);\n    translate([4, -15, cookie_thickness/2])\n    cylinder(h = 15, r = 2);\n    translate([10, -15, cookie_thickness/2])\n    cylinder(h = 15, r = 2);\n    }\n}\n\n// Cookie texture details\nmodule cookie_texture() {\n    difference() {\n        cookie_base();\n        \n        // Caribou cutout\n        caribou_silhouette();\n        \n        // Add texture dots\n        for(i = [0:30]) {\n            rotate([0, 0, i*360/30 + 15])\n            translate([body_length/2 - 8, 0, cookie_thickness - 0.5])\n            sphere(r = 0.8);\n        }\n    }\n}\n\n// Create the cookie\ncookie_texture();\n\n// Optional: Add some sprinkles on top for decoration\nmodule sprinkles() {\n    color(\"red\")\n    translate([5, 5, cookie_thickness])\n    rotate([0, 90, 0])\n    scale([0.1, 0.1, 2])\n    cylinder(h = 1, r = 0.5);\n    \n    color(\"green\")\n    translate([-8, 10, cookie_thickness])\n    rotate([90, 0, 0])\n    scale([0.1, 0.1, 2])\n    cylinder(h = 1, r = 0.5);\n    \n    color(\"white\")\n    translate([0, -5, cookie_thickness])\n    rotate([45, 0, 45])\n    scale([0.1, 0.1, 2])\n    cylinder(h = 1, r = 0.5);\n}\n\n// Add a few decorative sprinkles\nsprinkles();",
    "renders": true
  },
  {
    "food_item": "boar",
    "openscad_code": "/* Roasted Boar Leg - Realistic Food Model */\n/* 3D printable - approximately 70mm length */\n\n$fn = 32;\n\n// Main colors\ncolor([0.6, 0.4, 0.3]) union() {\n    // Main leg body\n    translate([0, 0, 5]) scale([1, 0.8, 1.2]) sphere(15);\n    \n    // Upper thigh\n    translate([0, 0, 20]) scale([1.2, 1, 1]) sphere(12);\n    \n    // Lower leg extension\n    translate([0, 0, -8]) scale([0.7, 0.6, 1]) sphere(10);\n    \n    // Hoof\n    color([0.2, 0.15, 0.1]) translate([0, 0, -18]) cylinder(h=5, r1=6, r2=5);\n}\n\n// Bone protruding\ncolor([0.95, 0.85, 0.75]) translate([0, 12, 22]) rotate([90, 0, 0]) cylinder(h=8, r1=3, r2=2);\n\n// Skin texture - crackling\nfor(i = [0:15]) {\n    rotate([0, 0, i * 24]) {\n        translate([10 + sin(i) * 2, 0, 12 + cos(i) * 3]) \n        scale([1, 0.2, 0.1]) sphere(2);\n    }\n}\n\n// Cross-hatch scoring marks\nmodule scoring(start_angle, height) {\n    for(j = [0:8]) {\n        rotate([start_angle, 0, j * 20]) {\n            translate([0, 0, height]) \n            scale([1, 0.1, 0.05]) cube([20, 2, 1]);\n        }\n    }\n}\n\ncolor([0.5, 0.3, 0.2]) {\n    scoring(45, 15);\n    scoring(-45, 15);\n    scoring(0, 10);\n    scoring(90, 10);\n}\n\n// Fat layer showing\ncolor([0.9, 0.8, 0.7]) {\n    translate([0, 0, 12]) scale([1.1, 0.9, 0.2]) sphere(14);\n    \n    // Marbling effect\n    for(k = [0:10]) {\n        translate([sin(k*36)*8, cos(k*36)*6, 11.5]) \n        scale([0.3, 2, 0.1]) sphere(1.5);\n    }\n}\n\n// Meat fibers\ncolor([0.7, 0.3, 0.2]) {\n    for(m = [0:20]) {\n        rotate([0, 0, m * 18]) {\n            translate([5 + sin(m*3)*2, 0, 5 + m*0.3]) \n            scale([0.1, 0.1, 2]) rotate([90, 0, 0]) cylinder(h=0.5, r=0.5);\n        }\n    }\n}\n\n// Seasoning - salt crystals\ncolor([0.95, 0.95, 0.95]) {\n    for(n = [0:30]) {\n        translate([sin(n*47)*12, cos(n*47)*10, 12 + sin(n*23)*3]) \n        sphere(0.3 + sin(n*12)*0.2);\n    }\n}\n\n// Pepper spots\ncolor([0.1, 0.1, 0.1]) {\n    for(p = [0:20]) {\n        translate([sin(p*67)*11, cos(p*67)*9, 11 + sin(p*33)*2.5]) \n        sphere(0.2);\n    }\n}\n\n// Rosemary sprigs\ncolor([0.1, 0.4, 0.1]) {\n    for(r = [0:3]) {\n        rotate([0, 0, r * 120]) {\n            translate([8, 0, 18]) rotate([45, 0, 0]) \n            scale([0.3, 0.3, 1]) cylinder(h=8, r1=0.5, r2=0.3);\n            \n            translate([8, 0, 18]) rotate([30, 0, 15]) \n            scale([0.3, 0.3, 0.8]) cylinder(h=6, r1=0.4, r2=0.2);\n        }\n    }\n}\n\n// Garlic cloves\ncolor([0.9, 0.85, 0.7]) {\n    translate([7, 5, 16]) scale([0.8, 0.6, 1]) sphere(2);\n    translate([-6, -4, 15]) scale([0.7, 0.7, 1.1]) sphere(1.8);\n}\n\n// Dripping juices\ncolor([0.5, 0.2, 0.1]) {\n    translate([0, 8, 10]) scale([1, 0.5, 0.3]) sphere(1.5);\n    translate([5, -6, 8]) scale([0.8, 0.6, 0.2]) sphere(1);\n}",
    "renders": true
  },
  {
    "food_item": "rabbit",
    "openscad_code": "// Realistic 3D-printable rabbit carrot\n// Overall dimensions ~70 mm\n\n$fn = 36;               // Smooth curves\nwall = 1.2;             // 3D-print friendly wall thickness\n\nmodule carrot_body() {\n    color([0.92,0.33,0.12])\n    difference() {\n        // Main tapered body\n        union() {\n            // Slight S-curve\n            hull() {\n                translate([0,0,-5]) sphere(d=12);\n                translate([0,0,25]) sphere(d=18);\n                translate([0,4,60]) sphere(d=10);\n            }\n            // Add bulge\n            translate([0,0,30]) scale([1,1,1.4]) sphere(d=16);\n        }\n\n        // Hollow core\n        translate([0,0,0])\n            cylinder(d1=18-2*wall, d2=8-2*wall, h=70);\n\n        // Texture rings\n        for (i=[5:10:55]) {\n            rotate([0,90,0])\n                translate([0,0,-i])\n                    difference() {\n                        cylinder(d=18.2, h=1.5, center=true);\n                        cylinder(d=16.2, h=2, center=true);\n                    }\n        }\n    }\n}\n\nmodule carrot_top() {\n    // Green stems\n    color([0.18,0.55,0.22])\n    for (ang=[0:120:240]) {\n        rotate([ang,0,0]) {\n            translate([0,0,64])\n                rotate([0,ang/3,0])\n                    scale([0.25,0.25,1])\n                        cylinder(d1=6, d2=2, h=25);\n        }\n    }\n    // Fronds\n    for (ang=[0:45:315]) {\n        rotate([ang,0,0]) {\n            translate([0,0,64]) {\n                rotate([0,ang/5,0])\n                    translate([0,0,15])\n                        scale([0.15,0.15,0.8])\n                            sphere(d=6);\n            }\n        }\n    }\n}\n\nmodule carrot_detail() {\n    // Surface small roots\n    color([0.92,0.33,0.12])\n    union() {\n        for (i=[10:15:50]) {\n            rotate([0,0,i*7])\n                translate([8,0,i])\n                    rotate([90,0,0])\n                        scale([1,1,0.6])\n                            cylinder(d=2.5, h=3, center=true);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    carrot_body();\n    carrot_top();\n    carrot_detail();\n}",
    "renders": true
  },
  {
    "food_item": "hare",
    "openscad_code": "// Realistic Medium-Complexity Hare Food Item: Carrot with Leaves\n// 3D-printable, roughly 80 mm long\n\n$fn = 32;          // global smoothness\n\nmodule carrot_body() {\n    // Main root tapered cylinder\n    difference() {\n        rotate([0, 0, 0])\n            cylinder(h1 = 10, h2 = 7, h = 70, center = false);\n        \n        // Root grooves\n        for (i = [0: 35: 360]) {\n            rotate([0, 0, i])\n                translate([0, 0, 0])\n                    rotate([90, 0, 0])\n                        cylinder(h = 80, r = 2.5, center = false);\n        }\n    }\n}\n\nmodule carrot_top() {\n    // Green leaves, multiple fronds\n    color(\"forestgreen\")\n    for (phi = [0: 120: 240]) {\n        rotate([0, 0, phi])\n            translate([0, 0, 70])\n                for (i = [0: 20: 40]) {\n                    rotate([0, 0, i])\n                        translate([0, 0, i * 0.3])\n                            rotate([45 - i, 0, 0])\n                                scale([1, 1.5, 1])\n                                    cylinder(h = 30 - i * 0.5, r1 = 3, r2 = 1);\n                }\n    }\n}\n\nmodule carrot_detail() {\n    // Tiny secondary root stubs\n    color(\"orange\")\n    translate([0, 0, 10])\n        for (ang = [0: 45: 360]) {\n            rotate([0, 0, ang])\n                translate([9, 0, 0])\n                    rotate([90, 0, 0])\n                        cylinder(h = 8, r = 1.5, center = false);\n        }\n}\n\nmodule carrot_texture() {\n    // Surface bumps for realistic texture\n    color(\"orange\")\n    for (z = [15: 10: 65]) {\n        for (ang = [0: 30: 360]) {\n            rotate([0, 0, ang])\n                translate([7, 0, z])\n                    sphere(r = 1.2);\n        }\n    }\n}\n\nmodule carrot() {\n    union() {\n        color(\"orange\")\n        carrot_body();\n        carrot_top();\n        carrot_detail();\n        carrot_texture();\n    }\n}\n\n// Render the hare food\ncarrot();",
    "renders": true
  },
  {
    "food_item": "quail",
    "openscad_code": "// Quail food - realistic style with medium complexity\n// A whole roasted quail with characteristic shape and coloring\n\n$fa = 2;\n$fs = 0.5;\n\n// Main colors\ncolor_brown = [0.4, 0.2, 0.1];\ncolor_dark_brown = [0.3, 0.15, 0.05];\ncolor_golden = [0.8, 0.6, 0.2];\ncolor_light = [0.9, 0.8, 0.7];\n\n// Main body\nmodule quail_body() {\n    color(color_brown)\n    union() {\n        // Torso\n        translate([0, 0, 5])\n        scale([1.2, 0.8, 1])\n        sphere(d=25);\n        \n        // Breast\n        translate([0, -8, 5])\n        scale([0.8, 0.6, 0.7])\n        sphere(d=20);\n        \n        // Back hump\n        translate([0, 3, 10])\n        scale([1, 0.7, 0.6])\n        sphere(d=15);\n    }\n}\n\n// Head\nmodule quail_head() {\n    color(color_dark_brown)\n    translate([0, -18, 12])\n    rotate([0, 15, 0])\n    scale([0.7, 0.6, 0.8])\n    sphere(d=12);\n}\n\n// Wings\nmodule wing(side) {\n    color(color_brown)\n    translate([side * 8, -2, 8])\n    rotate([0, 0, side * 20])\n    scale([0.3, 0.8, 0.2])\n    sphere(d=20);\n    \n    // Wing feathers\n    for(i = [0:2]) {\n        translate([side * (10 + i*2), -2 + i*3, 8 - i])\n        rotate([0, 0, side * (10 + i*5)])\n        scale([0.2, 0.4, 0.1])\n        sphere(d=8);\n    }\n}\n\n// Drumsticks\nmodule drumstick(side) {\n    color(color_golden)\n    translate([side * 5, 8, 0])\n    rotate([90, 0, side * -10])\n    cylinder(h=15, d1=8, d2=6);\n    \n    // Leg joint\n    translate([side * 5, 8, -2])\n    sphere(d=9);\n}\n\n// Tail\nmodule tail() {\n    color(color_dark_brown)\n    translate([0, 12, 8])\n    rotate([30, 0, 0])\n    scale([0.8, 1.2, 0.3])\n    sphere(d=15);\n    \n    // Tail feathers\n    for(i = [-1:1]) {\n        translate([i * 4, 15, 8 + i])\n        rotate([45, 0, i * 10])\n        scale([0.3, 0.8, 0.1])\n        sphere(d=10);\n    }\n}\n\n// Roasted texture pattern\nmodule texture() {\n    color(color_golden)\n    for(i = [0:10]) {\n        for(j = [0:5]) {\n            translate([\n                sin(i * 36) * 12,\n                cos(i * 36) * 12,\n                8 + j * 2\n            ])\n            sphere(d=1.5);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    quail_body();\n    quail_head();\n    wing(1);\n    wing(-1);\n    drumstick(1);\n    drumstick(-1);\n    tail();\n    texture();\n}\n\n// Base plate for 3D printing stability\ntranslate([0, 0, -2])\ncolor(color_light)\ncylinder(h=2, d=40);",
    "renders": true
  },
  {
    "food_item": "pheasant",
    "openscad_code": "$fn=50;\n\n// Main colors for pheasant food\ncolor_brown = [139/255, 69/255, 19/255];\ncolor_dark_brown = [101/255, 67/255, 33/255];\ncolor_light_brown = [205/255, 133/255, 63/255];\ncolor_orange = [255/255, 140/255, 0/255];\ncolor_beige = [245/255, 222/255, 179/255];\n\n// Overall scale\nscale_factor = 0.8;\n\nmodule pheasant_food() {\n    scale([scale_factor, scale_factor, scale_factor])\n    union() {\n        // Main body - pheasant breast shape\n        color(color_beige)\n        translate([0, 0, 5])\n        scale([1.2, 0.8, 0.6])\n        sphere(r=15);\n        \n        // Back with feather texture\n        color(color_brown)\n        translate([0, -5, 8])\n        scale([1.3, 1.2, 0.4])\n        sphere(r=12);\n        \n        // Wing details - left\n        color(color_dark_brown)\n        translate([-10, -3, 10])\n        rotate([0, 15, 45])\n        scale([0.6, 0.2, 0.1])\n        cylinder(h=15, r1=8, r2=3);\n        \n        // Wing details - right\n        color(color_dark_brown)\n        translate([10, -3, 10])\n        mirror([1, 0, 0])\n        rotate([0, 15, 45])\n        scale([0.6, 0.2, 0.1])\n        cylinder(h=15, r1=8, r2=3);\n        \n        // Tail feathers\n        for(i = [0:3]) {\n            color(color_light_brown)\n            translate([0, -20 + i*3, 8])\n            rotate([0, -20 - i*5, 0])\n            scale([0.3, 1.5 - i*0.2, 0.1])\n            cylinder(h=20 - i*2, r1=4 - i*0.5, r2=2 - i*0.3);\n        }\n        \n        // Head/neck\n        color(color_beige)\n        translate([0, 15, 15])\n        rotate([30, 0, 0])\n        scale([0.4, 0.4, 0.8])\n        cylinder(h=10, r1=6, r2=4);\n        \n        // Head\n        color(color_beige)\n        translate([0, 20, 18])\n        sphere(r=5);\n        \n        // Beak\n        color(color_orange)\n        translate([0, 25, 18])\n        rotate([0, 10, 0])\n        scale([0.3, 1, 0.5])\n        cylinder(h=4, r1=2, r2=1);\n        \n        // Eye details\n        color([0, 0, 0])\n        translate([-2, 23, 19])\n        sphere(r=0.8);\n        \n        color([0, 0, 0])\n        translate([2, 23, 19])\n        sphere(r=0.8);\n        \n        // Leg texture - left\n        color(color_orange)\n        translate([-5, 5, 0])\n        cylinder(h=8, r=1.5);\n        \n        // Leg texture - right\n        color(color_orange)\n        translate([5, 5, 0])\n        cylinder(h=8, r=1.5);\n        \n        // Feet\n        color(color_orange)\n        translate([-5, 5, 0])\n        rotate([0, 0, 90])\n        scale([1, 0.3, 0.5])\n        cube([6, 2, 1], center=true);\n        \n        color(color_orange)\n        translate([5, 5, 0])\n        rotate([0, 0, 90])\n        scale([1, 0.3, 0.5])\n        cube([6, 2, 1], center=true);\n        \n        // Feather texture pattern on body\n        for(i = [0:8]) {\n            for(j = [0:3]) {\n                color(color_dark_brown)\n                translate([-12 + i*3, -8 + j*2, 12])\n                rotate([0, 90, 0])\n                scale([0.1, 0.5, 0.05])\n                cylinder(h=3, r=1);\n            }\n        }\n        \n        // Breast texture\n        for(i = [0:5]) {\n            color(color_light_brown)\n            translate([-8 + i*3, 8, 8])\n            rotate([90, 0, 0])\n            scale([0.8, 0.2, 0.05])\n            cylinder(h=2, r=1.5);\n        }\n    }\n}\n\n// Generate the pheasant food item\ntranslate([0, 0, 10])\npheasant_food();",
    "renders": true
  },
  {
    "food_item": "partridge",
    "openscad_code": "// Realistic Partridge Food Item - Roasted Partridge with Herbs\n// Medium complexity 3D printable food model\n\n$fn = 24; // Smooth curves for realism\n\nmodule partridge_body() {\n    // Main roasted body - oval shape\n    color([0.65, 0.4, 0.25]) {\n        scale([1, 0.7, 0.8]) sphere(d=45);\n        \n        // Chest bulge\n        translate([0, -8, 0]) scale([0.8, 0.6, 0.7]) sphere(d=25);\n    }\n}\n\nmodule partridge_wings() {\n    // Roasted wings - tucked against body\n    for(side = [-1, 1]) {\n        translate([side * 15, -5, 5]) {\n            rotate([0, -20, side * -10]) {\n                color([0.6, 0.38, 0.22]) {\n                    scale([0.4, 0.8, 0.15]) sphere(d=25);\n                }\n            }\n        }\n    }\n}\n\nmodule drumsticks() {\n    // Roasted legs with drumsticks\n    for(side = [-1, 1]) {\n        translate([side * 8, 12, -15]) {\n            rotate([90, 0, side * 15]) {\n                color([0.7, 0.45, 0.3]) {\n                    // Leg\n                    cylinder(h=20, d1=8, d2=6);\n                    // Drumstick\n                    translate([0, 0, 20]) sphere(d=10);\n                }\n            }\n        }\n    }\n}\n\nmodule head() {\n    // Roasted head with beak\n    translate([0, -25, 15]) {\n        color([0.55, 0.35, 0.2]) {\n            rotate([0, -20, 0]) scale([0.7, 0.6, 0.7]) sphere(d=15);\n        }\n        \n        // Beak\n        translate([0, -8, 0]) {\n            color([0.4, 0.25, 0.15]) {\n                rotate([0, 90, 0]) cylinder(h=5, d1=3, d2=1);\n            }\n        }\n    }\n}\n\nmodule herbs() {\n    // Rosemary sprigs\n    translate([0, 0, 25]) {\n        for(angle = [0:120:359]) {\n            rotate([0, 0, angle]) {\n                translate([20, 0, 0]) {\n                    color([0.1, 0.4, 0.1]) {\n                        rotate([90, 0, 0]) {\n                            cylinder(h=15, d=1.5);\n                            // Leaves\n                            for(i = [0:3:12]) {\n                                translate([0, 0, i]) rotate([0, 0, 45]) \n                                    scale([0.1, 0.8, 0.1]) sphere(d=5);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Thyme sprigs\n    for(pos = [[-15, -10, 20], [15, -5, 22], [0, 10, 21]]) {\n        translate(pos) {\n            color([0.15, 0.5, 0.15]) {\n                for(i = [0:2:6]) {\n                    translate([0, 0, i]) rotate([0, 0, i * 30]) \n                        cylinder(h=5, d=1);\n                }\n            }\n        }\n    }\n}\n\nmodule roasting_texture() {\n    // Crispy skin texture - small bumps\n    color([0.5, 0.3, 0.15]) {\n        for(i = [0:15]) {\n            angle = i * 137.5;\n            radius = 20 - i * 1.2;\n            translate([cos(angle) * radius, sin(angle) * radius - 5, 0]) {\n                sphere(d=2);\n            }\n        }\n    }\n}\n\nmodule plate() {\n    // Simple round plate\n    color([0.9, 0.9, 0.9]) {\n        translate([0, 0, -20]) {\n            cylinder(h=3, d=80);\n            // Plate rim\n            difference() {\n                cylinder(h=3, d=75);\n                cylinder(h=3.1, d=65);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    plate();\n    \n    translate([0, 0, -15]) {\n        union() {\n            partridge_body();\n            partridge_wings();\n            drumsticks();\n            head();\n            herbs();\n            \n            // Add texture on top surface\n            translate([0, 0, 20]) roasting_texture();\n        }\n    }\n}",
    "renders": true
  },
  {
    "food_item": "grouse",
    "openscad_code": "// Grouse-shaped bird food block\n// A realistic 3D printable bird food block with grouse shape and seed texture\n\n// Overall dimensions\nbody_length = 70;\nbody_height = 35;\nbody_width = 40;\n\n// Seed parameters\nseed_size = 2;\nseed_spacing = 4;\n\n// Colors\nbody_color = [139/255, 69/255, 19/255];  // Brown\nseed_color = [205/255, 133/255, 63/255];  // Peru\nwing_color = [160/255, 82/255, 45/255];  // SaddleBrown\n\n// Main grouse body\nmodule grouse_body() {\n    color(body_color)\n    difference() {\n        // Main elliptical body\n        scale([1, 0.8, 0.6])\n        sphere(d=body_length);\n        \n        // Flat bottom for printing\n        translate([-body_length/2, -body_width/2, -body_height/2])\n        cube([body_length, body_width, body_height/2]);\n        \n        // Neck indentation\n        translate([body_length/3, 0, body_height/4])\n        rotate([0, 90, 0])\n        cylinder(h=15, r1=8, r2=6);\n    }\n}\n\n// Grouse head\nmodule grouse_head() {\n    color(body_color)\n    translate([body_length/2, 0, body_height/3])\n    rotate([0, -20, 0])\n    scale([0.8, 0.7, 0.7])\n    sphere(d=20);\n}\n\n// Beak\nmodule beak() {\n    color([218/255, 165/255, 32/255])  // Goldenrod\n    translate([body_length/2 + 10, 0, body_height/3])\n    rotate([0, -20, 0])\n    rotate([0, 0, -30])\n    cylinder(h=8, r1=4, r2=0);\n}\n\n// Tail feathers\nmodule tail() {\n    color(wing_color)\n    translate([-body_length/2 - 5, 0, 0])\n    rotate([0, 15, 0])\n    scale([1.5, 0.3, 1])\n    sphere(d=20);\n}\n\n// Wing on each side\nmodule wing(side) {\n    color(wing_color)\n    translate([0, side * body_width/2, body_height/4])\n    rotate([0, 0, side * -20])\n    scale([0.8, 0.2, 0.5])\n    sphere(d=30);\n}\n\n// Eye\nmodule eye(side) {\n    color([0, 0, 0])\n    translate([body_length/2 + 5, side * 5, body_height/3 + 3])\n    sphere(d=3);\n}\n\n// Seed texture pattern\nmodule seed_pattern() {\n    color(seed_color)\n    for(i = [-body_length/2 + seed_spacing : seed_spacing : body_length/2 - seed_spacing]) {\n        for(j = [-body_width/2 + seed_spacing : seed_spacing : body_width/2 - seed_spacing]) {\n            for(k = [-body_height/2 + seed_spacing : seed_spacing : body_height/2 - seed_spacing]) {\n                // Only place seeds on surface\n                if(i*i + j*j*1.5 + k*k*2 < 25*25) {\n                    translate([i, j, k])\n                    sphere(d=seed_size);\n                }\n            }\n        }\n    }\n}\n\n// Leg (simplified for printing)\nmodule leg(side) {\n    color(body_color)\n    translate([body_length/4, side * 8, -body_height/2])\n    cylinder(h=5, r=3);\n}\n\n// Main assembly\nunion() {\n    grouse_body();\n    grouse_head();\n    beak();\n    tail();\n    wing(1);\n    wing(-1);\n    eye(1);\n    eye(-1);\n    leg(1);\n    leg(-1);\n    seed_pattern();\n}",
    "renders": true
  },
  {
    "food_item": "squab",
    "openscad_code": "// Medium complexity realistic squab (young pigeon) - 3D printable\n// Main body with drumsticks, wings, and textured skin\n\n$fn = 50;\n\n// Overall scale - 80mm long\nscale_factor = 1;\n\n// Colors\ncolor_roast = [0.35, 0.2, 0.15];\ncolor_dark = [0.25, 0.15, 0.1];\ncolor_light = [0.5, 0.35, 0.3];\n\nmodule squab() {\n    union() {\n        // Main body - oval shape\n        color(color_roast)\n        scale([1, 0.7, 0.6])\n        sphere(r = 20);\n        \n        // Breast protrusion\n        color(color_roast)\n        translate([10, 0, -5])\n        scale([0.8, 0.6, 0.4])\n        sphere(r = 15);\n        \n        // Neck stub\n        color(color_dark)\n        translate([-25, 0, 8])\n        rotate([0, -20, 0])\n        cylinder(h = 15, r1 = 8, r2 = 5);\n        \n        // Left drumstick\n        translate([-5, -18, -10])\n        rotate([20, 0, -30])\n        drumstick();\n        \n        // Right drumstick\n        translate([-5, 18, -10])\n        rotate([20, 0, 30])\n        mirror([0, 1, 0])\n        drumstick();\n        \n        // Left wing\n        translate([5, -15, 5])\n        rotate([0, 0, -45])\n        wing();\n        \n        // Right wing\n        translate([5, 15, 5])\n        rotate([0, 0, 45])\n        mirror([0, 1, 0])\n        wing();\n        \n        // Texture pattern - small spheres for skin bumps\n        for(i = [0:10]) {\n            for(j = [0:8]) {\n                angle = i * 36;\n                y_pos = sin(angle) * 15;\n                x_pos = cos(angle) * 15 - 5;\n                color(color_light)\n                translate([x_pos + j*2 - 8, y_pos, 0])\n                scale([1, 1, 0.5])\n                sphere(r = 1);\n            }\n        }\n    }\n}\n\nmodule drumstick() {\n    union() {\n        // Thigh\n        color(color_roast)\n        rotate([0, 90, 0])\n        cylinder(h = 18, r1 = 7, r2 = 5);\n        \n        // Drumstick end\n        color(color_dark)\n        translate([18, 0, 0])\n        sphere(r = 6);\n        \n        // Bone end\n        color(color_light)\n        translate([22, 0, 0])\n        cylinder(h = 5, r = 2);\n        \n        // Skin folds\n        for(i = [0:3]) {\n            color(color_dark)\n            rotate([0, 90, 0])\n            translate([i*4 + 2, 0, -1])\n            scale([1, 1, 0.3])\n            cylinder(h = 2, r = 6 + i);\n        }\n    }\n}\n\nmodule wing() {\n    difference() {\n        union() {\n            // Main wing\n            color(color_roast)\n            scale([1, 0.2, 0.4])\n            sphere(r = 15);\n            \n            // Wing tip\n            color(color_dark)\n            translate([12, 0, 0])\n            scale([0.5, 0.2, 0.3])\n            sphere(r = 8);\n        }\n        \n        // Wing feather cuts\n        for(i = [0:3]) {\n            translate([5 + i*3, -2, -3])\n            rotate([0, 15*i, 0])\n            cube([8, 4, 6]);\n        }\n    }\n}\n\n// Scale and center the model\nscale([scale_factor, scale_factor, scale_factor])\nsquab();",
    "renders": true
  },
  {
    "food_item": "goose",
    "openscad_code": "$fn=32;\n\n// Goose Dumpling - realistic style\nmodule goose_dumpling() {\n    color([0.95,0.8,0.6])\n    union() {\n        // Main body dumpling shape - slightly flattened sphere\n        scale([1.2,0.9,0.7])\n        sphere(20);\n        \n        // Goose head protruding from dumpling\n        translate([18,0,5])\n        rotate([0,-15,0])\n        color([0.9,0.75,0.55])\n        union() {\n            // Head\n            scale([1.1,1.1,1.2])\n            sphere(6);\n            \n            // Beak\n            translate([6,0,0])\n            rotate([0,-20,0])\n            scale([2,0.4,0.4])\n            color([0.85,0.7,0.45])\n            cylinder(8,3,0);\n            \n            // Eyes\n            for(side=[-1,1]) {\n                translate([2,side*3,3])\n                color(\"black\")\n                sphere(1);\n            }\n        }\n        \n        // Neck ridge\n        translate([10,0,2])\n        rotate([0,-15,0])\n        scale([1,1,0.8])\n        color([0.9,0.75,0.55])\n        cylinder(12,4,3);\n        \n        // Dumpling pleat ridges\n        for(angle=[0:45:315]) {\n            rotate([0,0,angle])\n            translate([18,0,0])\n            rotate([90,0,0])\n            scale([0.3,0.3,1])\n            color([0.85,0.75,0.65])\n            cylinder(15,2,0);\n        }\n        \n        // Steam vents\n        for(pos=[[-10,12,8], [5,-15,9], [-5,-10,9], [12,8,7]]) {\n            translate(pos)\n            color([0.3,0.3,0.3,0.5])\n            cylinder(2,0.5,1);\n        }\n        \n        // Bottom flat surface for printing\n        translate([0,0,-14])\n        color([0.9,0.8,0.7])\n        cube([40,40,1], center=true);\n        \n        // Texture dots for dumpling surface\n        for(i=[1:50]) {\n            theta = rands(0,360,1)[0];\n            phi = rands(0,180,1)[0];\n            r = 20 * (0.8 + 0.2 * sin(phi));\n            x = r * cos(theta) * sin(phi);\n            y = r * sin(theta) * sin(phi);\n            z = r * cos(phi) * 0.7;\n            if(z > -10) {\n                translate([x,y,z])\n                color([0.85,0.75,0.65])\n                sphere(0.5);\n            }\n        }\n    }\n}\n\n// Wing details on dumpling surface\nmodule wing_texture() {\n    color([0.9,0.8,0.7])\n    for(y=[-15:5:15]) {\n        for(x=[-10:5:25]) {\n            if(x*x + y*y < 400) {\n                translate([x,y,13.5 - 0.05*(x*x + y*y)/20])\n                rotate([0,0,atan2(y,x)])\n                scale([1,0.3,0.1])\n                sphere(2);\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    goose_dumpling();\n    wing_texture();\n}",
    "renders": true
  },
  {
    "food_item": "rice",
    "openscad_code": "// Realistic Rice Grain Model - Medium Complexity OpenSCAD\n// A cluster of rice grains with natural variation\n\ncolor(\"ivory\")\n\n// Main rice cluster module\nmodule rice_cluster() {\n    // Base rice grain shape\n    module rice_grain(length, width, height, rotation) {\n        translate([0, 0, height/2])\n        rotate([rotation, 0, 0])\n        scale([width, width, length])\n        difference() {\n            // Main rice body - elongated ellipsoid\n            sphere(d=1, $fn=16);\n            \n            // Flat bottom for 3D printing\n            translate([0, 0, -0.5])\n            cube([2, 2, 1], center=true);\n            \n            // Subtle texture lines along the grain\n            for(i = [-0.3:0.15:0.3]) {\n                rotate([90, 0, 0])\n                translate([i, 0, 0])\n                rotate([0, 90, 0])\n                cylinder(h=0.8, r=0.02, $fn=8);\n            }\n        }\n    }\n    \n    // Generate natural rice cluster\n    for(i = [0:8]) {\n        // Random positioning for natural look\n        angle = i * 40 + ((i % 3) * 15);\n        radius = 8 + (i % 5) * 2;\n        x_pos = cos(angle) * radius;\n        y_pos = sin(angle) * radius;\n        \n        // Random variations in grain size and orientation\n        grain_length = 5 + (i % 3) * 0.5;\n        grain_width = 1.8 + (i % 4) * 0.2;\n        grain_height = 2 + (i % 3) * 0.3;\n        rotation = -10 + (i % 20);\n        \n        translate([x_pos, y_pos, 0])\n        rotate([0, 0, angle + 90])\n        rice_grain(grain_length, grain_width, grain_height, rotation);\n    }\n    \n    // Central larger grains\n    for(i = [0:4]) {\n        angle = i * 72;\n        x_pos = cos(angle) * 3;\n        y_pos = sin(angle) * 3;\n        \n        translate([x_pos, y_pos, 1])\n        rotate([0, 0, angle + 90])\n        rice_grain(6, 2.2, 2.5, -5);\n    }\n    \n    // Top layer grains\n    for(i = [0:6]) {\n        angle = i * 51.4;\n        radius = 5 + (i % 2) * 3;\n        x_pos = cos(angle) * radius;\n        y_pos = sin(angle) * radius;\n        \n        translate([x_pos, y_pos, 3])\n        rotate([0, 0, angle + 90])\n        rotate([5, 0, 0])\n        rice_grain(4.5, 1.9, 2, 10);\n    }\n}\n\n// Create the rice cluster with base plate\nunion() {\n    // Thin base plate for 3D printing stability\n    translate([0, 0, -0.5])\n    color(\"beige\")\n    cylinder(h=1, r=15, $fn=32);\n    \n    // Main rice cluster\n    rice_cluster();\n}",
    "renders": true
  },
  {
    "food_item": "wheat",
    "openscad_code": "// Wheat stalk with grains\n// 3D printable wheat plant with grains on top\n\n// Main parameters\nstalk_height = 80;\nstalk_diameter = 3;\ngrain_count = 20;\ngrain_base_diameter = 2.5;\ngrain_length = 8;\nsheath_height = 15;\nsheath_diameter = 4;\nroot_bend = 5;\n\n// Colors\nwheat_color = \"#D4A574\";\nstalk_color = \"#8B7355\";\nsheath_color = \"#C8B88B\";\n\n// Grain module - slightly curved ellipsoid\nmodule grain(length, diameter) {\n    color(wheat_color)\n    scale([1, 0.8, 1.2])\n    rotate([0, 10, 0])\n    sphere(d = diameter, $fn=12);\n}\n\n// Single stalk with grains\nmodule wheat_stalk() {\n    // Root system\n    color(stalk_color)\n    translate([0, 0, -root_bend])\n    rotate([90, 0, 0])\n    cylinder(h = root_bend * 2, d1 = stalk_diameter * 1.5, d2 = stalk_diameter * 0.5, $fn=8);\n    \n    // Main stalk\n    color(stalk_color)\n    cylinder(h = stalk_height, d = stalk_diameter, $fn=8);\n    \n    // Sheath (leaves around base)\n    color(sheath_color)\n    translate([0, 0, sheath_height/2])\n    cylinder(h = sheath_height, d = sheath_diameter, $fn=12);\n    \n    // Side leaves\n    for(i = [1:4]) {\n        rotate([0, 0, i * 90])\n        translate([sheath_diameter/2, 0, sheath_height/3])\n        rotate([0, 30, 0])\n        scale([0.3, 1, 0.1])\n        sphere(d = sheath_height * 1.5, $fn=8);\n    }\n    \n    // Grains on top - arranged in a wheat head\n    for(i = [0:grain_count-1]) {\n        // Spiral arrangement\n        angle = i * 137.5; // golden angle\n        radius = (i * 0.5) * (stalk_diameter/2);\n        height = stalk_height + (i * 0.5);\n        \n        translate([sin(angle) * radius, cos(angle) * radius, height])\n        rotate([0, 0, angle])\n        grain(grain_length, grain_base_diameter);\n    }\n    \n    // Small secondary grains\n    for(i = [0:grain_count/2-1]) {\n        angle = i * 110;\n        radius = (i * 0.3) * (stalk_diameter/2);\n        height = stalk_height - 2 + (i * 0.3);\n        \n        translate([sin(angle) * radius, cos(angle) * radius, height])\n        rotate([0, 0, angle])\n        grain(grain_length * 0.7, grain_base_diameter * 0.7);\n    }\n}\n\n// Create wheat bundle\nmodule wheat_bundle() {\n    // Main stalk\n    wheat_stalk();\n    \n    // Secondary stalks around main\n    for(i = [1:5]) {\n        angle = i * 72 + 15;\n        radius = 8;\n        height_offset = -5;\n        lean_angle = 15;\n        \n        translate([sin(angle) * radius, cos(angle) * radius, height_offset])\n        rotate([sin(angle) * lean_angle, cos(angle) * lean_angle, 0])\n        scale([0.8, 0.8, 0.9])\n        wheat_stalk();\n    }\n}\n\n// Base for stability\ncolor(\"#8B7355\")\ntranslate([0, 0, -root_bend - 2])\ncylinder(h = 2, d = 25, $fn=32);\n\n// Render the wheat\nwheat_bundle();",
    "renders": true
  },
  {
    "food_item": "barley",
    "openscad_code": "// Barley grain - medium complexity realistic style\n// Overall length ~60mm, suitable for 3D printing\n\n// Color definitions\n$fn = 32;\n\n// Main grain body - elongated oval with slight taper\nmodule grain_body() {\n    color(\"#c19a6b\")  // light brown barley color\n    difference() {\n        // Main ellipsoid body\n        scale([1, 0.7, 0.4])\n        sphere(d = 55);\n        \n        // Flatten bottom for printing stability\n        translate([0, 0, -11])\n        cube([60, 40, 22], center = true);\n    }\n}\n\n// Create a single ridge along grain length\nmodule ridge() {\n    color(\"#b38b5e\")  // slightly darker brown\n    for(i = [0:2]) {\n        rotate([0, 0, i * 120])\n        translate([0, 0, 0])\n        scale([0.05, 1, 0.1])\n        rotate([90, 0, 0])\n        cylinder(h = 30, d1 = 0, d2 = 3);\n    }\n}\n\n// Hairy awn at one end\nmodule awn() {\n    color(\"#8b7355\")  // dry straw color\n    translate([27, 0, 0])\n    rotate([-10, 0, 0])\n    linear_extrude(height = 0.5, twist = 90)\n    circle(d = 0.5);\n    \n    // Multiple thin bristles\n    for(i = [0:11]) {\n        rotate([0, i * 30, 0])\n        translate([27, 0, 0])\n        rotate([90 + i * 2, 0, 0])\n        cylinder(h = 15 + i, d1 = 0.3, d2 = 0.1);\n    }\n}\n\n// Surface texture - small indentations\nmodule surface_texture() {\n    color(\"#a68b5b\")  // darker shade for texture\n    for(i = [0:8]) {\n        rotate([0, 0, i * 40])\n        for(j = [-2:2]) {\n            translate([j * 8, 0, 0])\n            scale([0.3, 0.3, 0.1])\n            sphere(d = 2);\n        }\n    }\n}\n\n// Crease line along grain\nmodule crease() {\n    color(\"#8b7355\")\n    translate([0, 0, -0.5])\n    scale([1, 0.05, 0.05])\n    rotate([90, 0, 0])\n    cylinder(h = 30, d = 1);\n}\n\n// Main assembly\nunion() {\n    grain_body();\n    \n    // Add ridges\n    translate([0, 0, 10])\n    ridge();\n    \n    // Add surface texture\n    translate([0, 0, 11])\n    surface_texture();\n    \n    // Add crease\n    translate([0, 0, 11])\n    crease();\n    \n    // Add awn\n    awn();\n}\n\n// Small grain tip detail\ncolor(\"#b38b5e\")\ntranslate([-27, 0, 0])\nscale([0.3, 0.3, 0.3])\nsphere(d = 5);",
    "renders": true
  },
  {
    "food_item": "oats",
    "openscad_code": "// Realistic bowl of oatmeal with oats, milk, and blueberries\n// Designed for 3D printing - no overhangs, proper wall thickness\n\n$fn = 32;  // Smooth curves\n\n// Main module for the oatmeal bowl\nmodule oatmeal_bowl() {\n    // Bowl base\n    color([0.9, 0.7, 0.5])  // Light ceramic color\n    difference() {\n        // Outer bowl\n        cylinder(h = 25, r1 = 35, r2 = 30);\n        \n        // Hollow inside\n        translate([0, 0, 2])\n        cylinder(h = 25, r1 = 32, r2 = 27);\n    }\n    \n    // Bowl rim\n    translate([0, 0, 24])\n    color([0.9, 0.7, 0.5])\n    cylinder(h = 3, r1 = 35, r2 = 35);\n}\n\n// Oat flakes module\nmodule oat_flake(x, y, z, rotation) {\n    translate([x, y, z])\n    rotate([0, 0, rotation])\n    color([0.85, 0.68, 0.48])  // Oat color\n    scale([1, 0.7, 0.1])\n    sphere(r = 2.5);\n}\n\n// Group of oats\nmodule oats_cluster(center_x, center_y, base_z) {\n    for(i = [0:8]) {\n        oat_flake(\n            center_x + (rand(i*1) - 0.5) * 20,\n            center_y + (rand(i*2) - 0.5) * 20,\n            base_z + (rand(i*3) - 0.5) * 2,\n            rand(i*4) * 360\n        );\n    }\n}\n\n// Milk puddle module\nmodule milk_layer() {\n    color([1, 0.98, 0.92, 0.8])  // Milky white with transparency\n    translate([0, 0, 5])\n    cylinder(h = 3, r1 = 28, r2 = 23);\n}\n\n// Blueberry module\nmodule blueberry(x, y, z) {\n    translate([x, y, z])\n    color([0.2, 0.2, 0.6])  // Dark blue\n    sphere(r = 3);\n    \n    // Blueberry crown\n    translate([0, 0, 2.8])\n    color([0.1, 0.4, 0.2])\n    cylinder(h = 1, r1 = 1, r2 = 0);\n}\n\n// Main assembly\nunion() {\n    // Bowl\n    oatmeal_bowl();\n    \n    // Oats layer\n    oats_cluster(0, 0, 7);\n    oats_cluster(5, -5, 8);\n    oats_cluster(-8, 3, 7.5);\n    oats_cluster(3, 7, 8.5);\n    \n    // Milk\n    milk_layer();\n    \n    // Blueberries on top\n    blueberry(10, 5, 10);\n    blueberry(-8, -6, 10.5);\n    blueberry(-3, 8, 10.2);\n    blueberry(7, -9, 10.8);\n    blueberry(-12, 2, 10.3);\n}\n\n// Helper function for random-like values\nfunction rand(x) = (sin(x * 123.456) + 1) / 2;",
    "renders": true
  },
  {
    "food_item": "corn",
    "openscad_code": "// Realistic Corn on the Cob - Medium Complexity\n// 3D printable corn with kernels, husk, and silk\n\n$fn = 36;\n\n// Main corn cob\nmodule cob() {\n    color([0.9, 0.7, 0.3])  // Golden yellow\n    cylinder(h = 80, d1 = 18, d2 = 22, center = true);\n}\n\n// Individual kernel\nmodule kernel(x, y, angle) {\n    translate([x, y, 0])\n    rotate([90, 0, angle])\n    scale([1, 0.7, 1.2])\n    color([0.95, 0.8, 0.2])\n    sphere(d = 3.5);\n}\n\n// Row of kernels around the cob\nmodule kernel_row(z_offset, rotation) {\n    rotate([0, 0, rotation])\n    for(i = [-3:3]) {\n        translate([0, 0, z_offset + i * 4])\n        kernel(11, 0, 0);\n    }\n}\n\n// All kernels on cob\nmodule all_kernels() {\n    for(row = [0:11]) {\n        kernel_row(-30 + (row % 2) * 2, row * 30);\n    }\n}\n\n// Corn husk leaves\nmodule husk_leaf(length, angle, curl) {\n    color([0.2, 0.6, 0.2])\n    rotate([0, 0, angle])\n    translate([0, 0, 30])\n    rotate([90 + curl, 0, 0])\n    linear_extrude(height = length, center = true, scale = [0.3, 1])\n    circle(d = 15);\n}\n\n// Full husk\nmodule husk() {\n    for(i = [0:3]) {\n        husk_leaf(50 + i * 5, i * 90, 20 + i * 5);\n        husk_leaf(45 + i * 5, i * 90 + 45, 15 + i * 5);\n    }\n}\n\n// Corn silk strands\nmodule silk_strand(height, angle) {\n    color([0.95, 0.95, 0.75])\n    rotate([0, 0, angle])\n    translate([0, 0, 40])\n    rotate([90, 0, 0])\n    cylinder(h = height, d = 0.5);\n}\n\n// All silk\nmodule silk() {\n    for(i = [0:15]) {\n        silk_strand(20 + sin(i) * 5, i * 22.5);\n    }\n}\n\n// Combined corn model\nunion() {\n    // Main cob with kernels\n    union() {\n        cob();\n        all_kernels();\n    }\n    \n    // Husk\n    husk();\n    \n    // Silk on top\n    silk();\n}",
    "renders": true
  },
  {
    "food_item": "potato",
    "openscad_code": "// Realistic 3D Printable Potato Model\n// Size: ~65mm length, ~40mm width\n\n// Main potato body - organic shape from intersecting spheres\nmodule potato_body() {\n    color(\"#c8a882\")  // Light brown potato color\n    union() {\n        // Central elongated sphere\n        scale([1.3, 1, 1.2])\n            sphere(d=40, $fn=32);\n        \n        // Bulge on one side for more organic shape\n        translate([10, -5, 0])\n            scale([1.1, 0.9, 0.9])\n                sphere(d=35, $fn=32);\n        \n        // Smaller bulge on opposite side\n        translate([-8, 8, 2])\n            scale([0.8, 1.1, 0.9])\n                sphere(d=30, $fn=32);\n    }\n}\n\n// Create potato \"eyes\" - the small indentations where sprouts grow\nmodule potato_eyes() {\n    color(\"#a08664\")  // Slightly darker brown for eyes\n    difference() {\n        potato_body();\n        \n        // Create multiple eye indentations\n        for(i = [0:5]) {\n            rotate([rand(360), rand(360), rand(360)])\n                translate([rand(20)-10, rand(20)-10, rand(10)-5])\n                    sphere(d=rand(4)+3, $fn=16);\n        }\n        \n        // Larger eye on one end\n        translate([22, 0, 0])\n            sphere(d=6, $fn=16);\n    }\n}\n\n// Add sprout stubs (small bumps where eyes might sprout)\nmodule sprout_stubs() {\n    color(\"#8b7355\")  // Darker brown for dried sprouts\n    union() {\n        // Small stub on main eye\n        translate([22, 0, 1])\n            rotate([90, 0, 0])\n                cylinder(h=2, d1=3, d2=2, $fn=8);\n        \n        // Additional tiny stubs\n        for(i = [0:3]) {\n            rotate([rand(360), rand(360), rand(360)])\n                translate([rand(25)-12, rand(25)-12, rand(15)-7])\n                    rotate_extrude(angle=360, $fn=8)\n                        translate([2, 0, 0])\n                            circle(d=1.5);\n        }\n    }\n}\n\n// Surface texture - small bumps and irregularities\nmodule surface_texture() {\n    color(\"#c8a882\")\n    difference() {\n        potato_eyes();\n        \n        // Add subtle surface imperfections\n        for(i = [0:15]) {\n            rotate([rand(360), rand(360), rand(360)])\n                translate([rand(30)-15, rand(30)-15, rand(15)-7])\n                    sphere(d=rand(2)+1.5, $fn=8);\n        }\n    }\n}\n\n// Dirt specks for realism\nmodule dirt_specks() {\n    color(\"#6b5637\")  // Dark brown dirt color\n    union() {\n        for(i = [0:8]) {\n            rotate([rand(360), rand(360), rand(360)])\n                translate([rand(35)-17, rand(35)-17, rand(20)-10])\n                    sphere(d=0.8, $fn=6);\n        }\n    }\n}\n\n// Main potato assembly\nunion() {\n    // Base potato with texture\n    surface_texture();\n    \n    // Add sprout stubs\n    sprout_stubs();\n    \n    // Add dirt specks for realism\n    dirt_specks();\n}",
    "renders": true
  },
  {
    "food_item": "pasta",
    "openscad_code": "// Penne pasta with ridges and angled cuts\n// Medium complexity realistic pasta model\n\nmodule penne_segment(length = 28, radius_out = 4.5, radius_in = 3.5, ridges = 12) {\n    color(\"#D2B48C\") {\n        difference() {\n            // Outer cylinder with ridges\n            union() {\n                // Main cylinder\n                cylinder(h = length, r = radius_out, $fn = 48);\n                \n                // Add ridges along the length\n                for(i = [0:ridges-1]) {\n                    rotate([0, 0, i * 360/ridges])\n                    translate([radius_out - 0.5, -0.25, 0])\n                    cube([0.5, 0.5, length]);\n                }\n            }\n            \n            // Hollow center\n            translate([0, 0, -1])\n            cylinder(h = length + 2, r = radius_in, $fn = 48);\n        }\n    }\n}\n\nmodule penne_angled_end(length = 28, radius_out = 4.5) {\n    // Create angled cut at 45 degrees\n    rotate([0, 45, 0])\n    translate([0, -length/2, 0])\n    cube([radius_out*2.2, length, radius_out*2.2], center = true);\n}\n\nmodule single_penne() {\n    difference() {\n        union() {\n            // Main pasta body\n            penne_segment();\n            \n            // Add slight curvature to make it more realistic\n            translate([0, 0, 14])\n            scale([1, 1, 0.1])\n            sphere(r = 4.5, $fn = 48);\n        }\n        \n        // First angled cut\n        translate([0, 0, 0])\n        penne_angled_end();\n        \n        // Second angled cut (opposite direction)\n        translate([0, 0, 28])\n        rotate([0, 0, 180])\n        penne_angled_end();\n    }\n}\n\n// Create a small pile of penne\ntranslate([-10, 0, 0])\nrotate([0, 0, 15])\nsingle_penne();\n\ntranslate([5, 8, 0])\nrotate([0, 0, -30])\nrotate([90, 0, 0])\nsingle_penne();\n\ntranslate([0, -5, 0])\nrotate([0, 0, 45])\nrotate([0, 15, 0])\nsingle_penne();",
    "renders": true
  },
  {
    "food_item": "bread",
    "openscad_code": "// Realistic Medium-Complexity Bread Loaf\n// 80 mm long x 45 mm tall x 65 mm wide\n\n// Colors\nbread_crust = \"#B97A57\";\nbread_inside = \"#E8D6B3\";\nseed_color = \"#B5A642\";\n\n// Main parameters\nloaf_length = 80;\nloaf_width = 65;\nloaf_height = 45;\ncrust_thickness = 2.5;\n\nmodule bread_shape() {\n    difference() {\n        // Main loaf body\n        hull() {\n            // Rounded top\n            translate([0, loaf_width/4, loaf_height-5])\n                scale([1, 0.7, 0.5])\n                sphere(d=loaf_width*0.8, $fn=30);\n            \n            // Rectangular base\n            translate([0, 0, loaf_height/2])\n                cube([loaf_length, loaf_width, loaf_height], center=true);\n        }\n        \n        // Flat bottom\n        translate([0, 0, -1])\n            cube([loaf_length+2, loaf_width+2, 2], center=true);\n    }\n}\n\nmodule crust_texture() {\n    // Add realistic crust texture with small bumps\n    for (i = [-loaf_length/2+5:10:loaf_length/2-5])\n        for (j = [-loaf_width/2+5:8:loaf_width/2-5])\n            if (i*i + j*j < 900)  // Avoid corners\n                translate([i, j, loaf_height-2])\n                    sphere(d=3+sin(i*2)*1.5, $fn=8);\n}\n\nmodule slice_marks() {\n    // Subtle slice lines on top\n    for (x = [-loaf_length/2+10:15:loaf_length/2-15])\n        translate([x, 0, loaf_height+1])\n            cube([1.5, loaf_width*0.9, 2], center=true);\n}\n\nmodule seeds() {\n    // Sesame seeds on top\n    seed_count = 40;\n    for (i = [0:seed_count-1]) {\n        angle = i * 137.5;  // Golden angle for natural distribution\n        radius = 10 + pow(i/seed_count, 0.7) * 25;\n        x = cos(angle) * radius;\n        y = sin(angle) * radius;\n        \n        if (x*x + y*y < 800)  // Keep within bounds\n            translate([x, y, loaf_height+2])\n                rotate([90, 0, rand()*360])\n                scale([1, 1.5, 0.4])\n                sphere(d=2.5, $fn=6);\n    }\n}\n\nmodule bread_interior() {\n    // Hollow interior for realistic wall thickness\n    scale([0.85, 0.85, 0.85])\n        translate([0, 0, 2])\n            bread_shape();\n}\n\n// Main assembly\ncolor(bread_crust) {\n    difference() {\n        union() {\n            bread_shape();\n            crust_texture();\n            slice_marks();\n        }\n        bread_interior();\n    }\n}\n\ncolor(seed_color) seeds();\n\n// Optional: Add slight rotation for natural look\nrotate([5, 0, 3]) {\n    // The entire bread is already positioned correctly\n}",
    "renders": true
  },
  {
    "food_item": "quinoa",
    "openscad_code": "// Quinoa grain model - realistic style, medium complexity\n// Each quinoa grain is an oblong seed with a visible germ spiral\n\n// Main parameters\ngrain_length = 6;\ngrain_width = 2.2;\ngerm_width = 0.8;\ngerm_thickness = 0.3;\nscale_factor = 12;  // Scale up for 3D printing\n\n// Colors\ngrain_color = \"#F5DEB3\";  // Wheat color\ngerm_color = \"#D2691E\";   // Darker brown for germ\n\n// Create a single quinoa grain\nmodule quinoa_grain() {\n    color(grain_color) {\n        // Main grain body - elongated ellipsoid\n        scale([1, grain_width/grain_length, grain_width/grain_length])\n            sphere(d=grain_length, $fn=16);\n        \n        // Flatten one side slightly\n        translate([0, 0, -grain_width/2])\n            cube([grain_length*1.2, grain_width*1.2, grain_width], center=true);\n    }\n    \n    // Germ spiral - the characteristic quinoa feature\n    color(germ_color) {\n        for(i=[0:30:360]) {\n            rotate([0, 0, i])\n            translate([grain_length/3 - i/120, 0, 0])\n            rotate([90, 0, 0])\n                cylinder(h=germ_thickness, d=germ_width, $fn=8);\n        }\n    }\n    \n    // Small surface details for texture\n    for(i=[0:45:360]) {\n        for(j=[-1:1]) {\n            rotate([0, 0, i])\n            translate([j*grain_length/4, 0, grain_width/2 - 0.2])\n                sphere(d=0.3, $fn=6);\n        }\n    }\n}\n\n// Create a cluster of grains\nmodule quinoa_cluster(grains) {\n    for(i=[0:grains-1]) {\n        // Random positioning within cluster\n        angle = i * 137.5;  // Golden angle for natural distribution\n        radius = 3 + pow(i, 0.7) * 1.2;\n        \n        translate([\n            cos(angle) * radius,\n            sin(angle) * radius,\n            0\n        ])\n        rotate([rand(i*2)*30-15, rand(i*3)*30-15, rand(i)*360])\n        scale([1 + rand(i*4)*0.2, 1 + rand(i*5)*0.2, 1 + rand(i*6)*0.2])\n            quinoa_grain();\n    }\n}\n\n// Helper function for pseudo-random numbers\nfunction rand(seed) = (seed * 9301 + 49297) % 233280 / 233280;\n\n// Main model - a small pile of quinoa\nscale([scale_factor, scale_factor, scale_factor]) {\n    // Base cluster\n    quinoa_cluster(25);\n    \n    // Additional grains on top\n    translate([0, 0, 2])\n        rotate([0, 0, 30])\n        quinoa_cluster(15);\n    \n    // Some scattered grains\n    for(i=[0:5]) {\n        translate([\n            rand(i*10)*20-10,\n            rand(i*11)*20-10,\n            rand(i*12)*5\n        ])\n        rotate([rand(i*13)*360, rand(i*14)*360, rand(i*15)*360])\n            quinoa_grain();\n    }\n}",
    "renders": true
  },
  {
    "food_item": "millet",
    "openscad_code": "color([0.85,0.65,0.15]) difference() {\n    // main seed body\n    sphere(d=2.5,$fn=32);\n    // small dent on top\n    translate([0,0,1]) sphere(d=1.8,$fn=24);\n}\n\nmodule millet_seed() {\n    rotate([0,rand_vec.x*15,rand_vec.y*10]) \n    color([0.85+rand_vec.x*0.05,0.65+rand_vec.y*0.05,0.15]) \n    difference() {\n        sphere(d=2.5,$fn=32);\n        translate([0,0,1]) sphere(d=1.8,$fn=24);\n    }\n}\n\nmodule seed_cluster(count,radius,height) {\n    for(i=[0:count-1]) {\n        angle = i*360/count + rand_vec.x*20;\n        r = radius + rand_vec.y*3;\n        h = height + rand_vec.z*2;\n        translate([r*cos(angle),r*sin(angle),h]) millet_seed();\n    }\n}\n\nmodule rand_vec() = [rands(-1,1,1)[0],rands(-1,1,1)[0],rands(-1,1,1)[0]];\n\n// main seed head\ntranslate([0,0,40]) difference() {\n    union() {\n        // central stem\n        color([0.4,0.7,0.2]) cylinder(h=80,d=3,$fn=8);\n        \n        // seed layers\n        for(layer=[0:15]) {\n            seeds = max(8-layer,3);\n            radius = 25-layer*1.2;\n            height = layer*2.5;\n            seed_cluster(seeds,radius,height);\n        }\n        \n        // bottom layer\n        seed_cluster(12,25,0);\n    }\n    \n    // remove bottom flat area\n    translate([0,0,-1]) cube(100,center=true);\n}\n\n// simple leaf\ntranslate([0,-15,30]) rotate([110,0,0]) \ncolor([0.3,0.6,0.1]) \nlinear_extrude(height=0.8) \nscale([1,3]) circle(d=20,$fn=16);",
    "renders": true
  },
  {
    "food_item": "bulgur",
    "openscad_code": "// Bulgur grains - realistic medium complexity\n// A small pile of parboiled cracked wheat grains\n\n$fn = 24;  // Moderate resolution for 3D printing\n\n// Main parameters\ngrain_size = 4;           // Base size of individual grains\npile_height = 30;         // Overall height of bulgur pile\npile_diameter = 60;       // Base diameter of pile\nwall_thickness = 1.2;     // Minimum wall thickness for printing\n\n// Color for bulgur - light golden brown\ncolor([0.82, 0.65, 0.35]) \ndifference() {\n    // Main bulgur pile\n    union() {\n        // Base pile shape - slightly flattened hemisphere\n        scale([1, 1, 0.7]) \n        sphere(d = pile_diameter);\n        \n        // Add individual grains across the surface\n        for(i = [0 : 5 : 360]) {\n            for(j = [0 : 10 : 80]) {\n                translate([\n                    sin(i) * (pile_diameter/2 - 10) * (1 - j/100), \n                    cos(i) * (pile_diameter/2 - 10) * (1 - j/100), \n                    pile_height/2 * (1 - j/100) + 5\n                ]) {\n                    rotate([0, 0, i + j]) \n                    grain(grain_size + rand(2));\n                }\n            }\n        }\n        \n        // Add some grains on top for texture\n        for(k = [0 : 15]) {\n            translate([\n                rand(pile_diameter/2 - 5), \n                rand(pile_diameter/2 - 5), \n                pile_height/2 + rand(5)\n            ]) {\n                rotate([rand(180), rand(180), rand(180)]) \n                grain(grain_size * 0.8);\n            }\n        }\n    }\n    \n    // Hollow out the base for printing efficiency\n    translate([0, 0, -wall_thickness]) \n    scale([1, 1, 0.5]) \n    sphere(d = pile_diameter - wall_thickness * 2);\n}\n\n// Individual grain module - irregular wheat grain shape\nmodule grain(size) {\n    difference() {\n        // Main grain body - elongated ellipsoid\n        scale([1.4, 1, 0.6]) \n        sphere(d = size);\n        \n        // Add characteristic groove along grain\n        translate([-size/2, 0, 0]) \n        rotate([0, 90, 0]) \n        cylinder(h = size * 1.5, r1 = size/6, r2 = size/8);\n        \n        // Add small indentations for texture\n        for(m = [0 : 30 : 180]) {\n            rotate([m, 0, 0]) \n            translate([rand(size/3), 0, rand(size/4)]) \n            sphere(d = size/5);\n        }\n    }\n    \n    // Add subtle ridge texture\n    for(n = [0 : 45 : 360]) {\n        rotate([0, 0, n]) \n        translate([0, size/3, 0]) \n        cylinder(h = size * 0.8, r = size/12);\n    }\n}\n\n// Helper function for random values\nfunction rand(max) = (rands(-max/2, max/2, 1))[0];",
    "renders": true
  },
  {
    "food_item": "farro",
    "openscad_code": "// Farro grain cluster - realistic style, medium complexity\n// A small pile of farro grains showing the characteristic elongated shape with ridges\n\nmodule farro_grain(length, width, thickness, twist) {\n    // Main grain body - elongated ellipsoid\n    color(\"#8B7355\")\n    rotate([twist, 0, 0])\n    scale([length, width, thickness])\n    sphere(r=1, $fn=12);\n    \n    // Ridge details along the grain\n    for(i = [-0.6:0.3:0.6]) {\n        color(\"#7A6348\")\n        translate([i*length*0.5, 0, 0])\n        rotate([twist, 0, 0])\n        scale([length*0.1, width*0.9, thickness*0.8])\n        sphere(r=1, $fn=8);\n    }\n    \n    // Small tip at one end\n    color(\"#6B5A47\")\n    translate([length*0.8, 0, 0])\n    rotate([twist, 0, 0])\n    scale([length*0.3, width*0.5, thickness*0.5])\n    cylinder(h=length*0.2, r1=1, r2=0, $fn=6);\n}\n\nmodule small_cluster() {\n    // Central grain\n    farro_grain(8, 2.5, 2, 15);\n    \n    // Surrounding grains at various angles\n    for(i = [0:45:315]) {\n        rotate([0, 0, i])\n        translate([3, 0, 1])\n        rotate([i/3, 0, 0])\n        farro_grain(7, 2.3, 1.8, -20);\n    }\n    \n    // Additional grains for density\n    for(i = [0:60:300]) {\n        rotate([0, 0, i+30])\n        translate([5, 2, 0])\n        rotate([i/4, 10, 0])\n        farro_grain(6.5, 2.2, 1.7, 25);\n    }\n}\n\n// Create a small pile of farro grains\nunion() {\n    // Main cluster\n    small_cluster();\n    \n    // Second cluster offset\n    translate([10, -5, 2])\n    rotate([0, 0, 45])\n    small_cluster();\n    \n    // Scattered individual grains\n    for(i = [0:30:330]) {\n        rotate([0, 0, i])\n        translate([8 + sin(i)*3, cos(i)*3, 0])\n        rotate([i/2, 0, i])\n        farro_grain(5 + (i%3), 2, 1.5, i);\n    }\n    \n    // A few grains on their sides\n    for(i = [0:45:180]) {\n        rotate([90, 0, i])\n        translate([sin(i)*12, cos(i)*12, 0])\n        farro_grain(7, 2.4, 1.9, 0);\n    }\n}\n\n// Base platform to prevent rolling\ncolor(\"#D4C4A8\")\ntranslate([-15, -15, -0.5])\ncube([30, 30, 1]);",
    "renders": true
  },
  {
    "food_item": "spelt",
    "openscad_code": "// Realistic 3D printable spelt grain model\n// Overall length ≈ 12 mm, height ≈ 6 mm – printable without supports\n\n$fn = 32;           // Smooth curves for printing\n\n// Main spelt kernel\nmodule kernel() {\n    color(\"wheat\") difference() {\n        // Slightly asymmetrical ellipsoid body\n        scale([1.2, 0.8, 0.6])\n            sphere(d = 10);\n\n        // Ventral crease (germ groove) along the length\n        translate([0, 0, -1])\n            cube([12, 1.2, 3], center = true);\n\n        // Tip taper\n        translate([5.5, 0, 0])\n            rotate([0, 0, 15])\n            cube([3, 4, 4], center = true);\n    }\n}\n\n// Awn (beard) as a cluster of thin cylinders\nmodule awn() {\n    color(\"tan\")\n    for (i = [0 : 30 : 330]) {\n        rotate([0, 0, i])\n        translate([0, 4.5, 2.8])\n        rotate([90 + 5 * sin(i), 0, 0])\n            cylinder(h = 6 + 2 * cos(i * 3), d = 0.4, center = true);\n    }\n}\n\n// Hull texture (fine raised ridges)\nmodule hull() {\n    color(\"burlywood\") {\n        for (i = [0 : 2 : 360])\n            rotate([0, 0, i])\n            translate([0, 0, 0.1])\n            scale([1, 0.13, 0.05])\n                sphere(d = 9);\n    }\n}\n\n// Bran speckles (tiny dark dots)\nmodule speckles() {\n    color(\"saddlebrown\")\n    for (i = [0 : 5 : 355])\n        rotate([0, 0, i])\n        translate([3.5 * cos(i * 2.7), 3.5 * sin(i * 2.7), 3.2])\n            sphere(d = 0.3);\n}\n\n// Assemble the complete spelt grain\nunion() {\n    kernel();\n    hull();\n    speckles();\n    awn();\n}",
    "renders": true
  },
  {
    "food_item": "buckwheat",
    "openscad_code": "// Realistic Buckwheat Food Model - Medium Complexity\n// Features: groats, hull segments, natural variation, 3D printable\n\n// Parameters\ngroat_size = 4;\ngroats_per_row = 7;\ngroats_per_col = 5;\ngroat_height = 2;\nbase_thickness = 1.5;\nhull_thickness = 0.8;\ntotal_length = 70;\ntotal_width = 50;\n\n// Color definitions\ngroats_color = [0.6, 0.4, 0.2];\nhull_color = [0.35, 0.25, 0.12];\n\n// Single buckwheat groat with triangular hull\nmodule buckwheat_groat(x, y, z, rotation) {\n    // Translate to position\n    translate([x, y, z]) {\n        rotate([0, 0, rotation]) {\n            // Main groat body - slightly flattened ellipsoid\n            color(groats_color)\n            scale([1, 0.7, 0.5])\n            sphere(d = groat_size, $fn = 20);\n            \n            // Hull segments - three triangular pieces\n            color(hull_color) {\n                // First segment\n                rotate([0, 0, 0])\n                translate([0, 0, groat_size/4])\n                rotate([60, 0, 0])\n                cylinder(h = hull_thickness, r1 = groat_size/2.5, r2 = 0.1, $fn = 3);\n                \n                // Second segment\n                rotate([0, 0, 120])\n                translate([0, 0, groat_size/4])\n                rotate([60, 0, 0])\n                cylinder(h = hull_thickness, r1 = groat_size/2.5, r2 = 0.1, $fn = 3);\n                \n                // Third segment\n                rotate([0, 0, 240])\n                translate([0, 0, groat_size/4])\n                rotate([60, 0, 0])\n                cylinder(h = hull_thickness, r1 = groat_size/2.5, r2 = 0.1, $fn = 3);\n            }\n        }\n    }\n}\n\n// Create a cluster of groats with natural variation\nmodule buckwheat_cluster() {\n    union() {\n        // Base platform for printing stability\n        color([0.25, 0.15, 0.08])\n        cube([total_length, total_width, base_thickness], center = false);\n        \n        // Generate groats in a natural pattern\n        for (i = [0:groats_per_row-1]) {\n            for (j = [0:groats_per_col-1]) {\n                // Add random variation to position\n                x_pos = i * (total_length / groats_per_row) + groat_size/2 + (i % 2) * 2;\n                y_pos = j * (total_width / groats_per_col) + groat_size/2 + (j % 2) * 2;\n                \n                // Random rotation for natural appearance\n                rotation = (i * 73 + j * 37) % 360;\n                \n                // Slight height variation\n                z_pos = base_thickness + groat_height/2 + (sin(i*0.7) + cos(j*0.5)) * 0.5;\n                \n                // Create main groat\n                buckwheat_groat(x_pos, y_pos, z_pos, rotation);\n                \n                // Add some scattered individual groats for realism\n                if ((i + j) % 3 == 0) {\n                    // Small secondary groat nearby\n                    buckwheat_groat(\n                        x_pos + 3 + (i % 2) * 2,\n                        y_pos + 2 + (j % 2) * 2,\n                        base_thickness + groat_height/3,\n                        rotation + 45\n                    );\n                }\n            }\n        }\n        \n        // Add some hull fragments on the base\n        for (k = [0:15]) {\n            x_frag = (k * 4.7) % total_length;\n            y_frag = (k * 6.3) % total_width;\n            color(hull_color)\n            translate([x_frag, y_frag, base_thickness + 0.3])\n            rotate([0, 0, k * 23])\n            scale([0.3, 0.3, 0.1])\n            cylinder(h = 0.5, r = 1.5, $fn = 3);\n        }\n    }\n}\n\n// Render the buckwheat cluster\nbuckwheat_cluster();",
    "renders": true
  },
  {
    "food_item": "amaranth",
    "openscad_code": "// Amaranth grain cluster - realistic style\n// Overall size: ~60mm height, 40mm diameter\n\n$fn = 32;\n\n// Main grain cluster\nmodule amaranth_cluster() {\n    color([0.65, 0.35, 0.15]) {  // Deep golden brown\n    \n        // Central stem structure\n        cylinder(h = 60, d = 3, center = true);\n        \n        // Main grain heads\n        for(i = [0:15]) {\n            rotate([0, 0, i * 22.5])\n            translate([0, 0, 25 - i * 3])\n            grain_head();\n        }\n        \n        // Lower grain heads\n        for(i = [0:12]) {\n            rotate([0, 0, i * 30])\n            translate([0, 0, 10 - i * 2])\n            scale([0.8, 0.8, 0.8])\n            grain_head();\n        }\n        \n        // Top grain heads\n        for(i = [0:8]) {\n            rotate([0, 0, i * 45])\n            translate([0, 0, 35 - i])\n            scale([0.6, 0.6, 0.6])\n            grain_head();\n        }\n    }\n}\n\n// Individual grain head (amaranth inflorescence)\nmodule grain_head() {\n    translate([0, 8, 0]) {\n        // Central spike\n        cylinder(h = 12, d = 1.5);\n        \n        // Grain seeds along spike\n        for(j = [0:5]) {\n            translate([0, 0, j * 2])\n            rotate([0, 0, j * 30])\n            scale([0.8, 0.8, 0.8])\n            seed_cluster();\n        }\n        \n        // Side branches\n        for(k = [0:3]) {\n            rotate([0, 0, k * 90])\n            translate([2, 0, 4])\n            rotate([30, 0, 0])\n            cylinder(h = 6, d = 1);\n            \n            // Seeds on side branches\n            for(l = [0:2]) {\n                translate([2, 0, 4 + l * 1.5])\n                rotate([30, 0, 0])\n                translate([0, 0, l * 2])\n                seed_cluster();\n            }\n        }\n    }\n}\n\n// Individual seed cluster\nmodule seed_cluster() {\n    color([0.8, 0.5, 0.2]) {  // Lighter golden\n        // Main seed body\n        sphere(d = 2.2);\n        \n        // Seed texture bumps\n        for(m = [0:8]) {\n            rotate([0, 0, m * 45])\n            translate([0.8, 0, 0])\n            sphere(d = 0.5);\n        }\n        \n        // Tiny seeds around\n        for(n = [0:4]) {\n            rotate([0, 0, n * 72])\n            translate([1.2, 0, 0])\n            sphere(d = 0.8);\n        }\n    }\n}\n\n// Base support for printing\nmodule base() {\n    color([0.4, 0.25, 0.1]) {\n        difference() {\n            cylinder(h = 3, d = 20);\n            translate([0, 0, -1])\n            cylinder(h = 5, d = 18);\n        }\n    }\n}\n\n// Assembly\ntranslate([0, 0, 1.5])\namaranth_cluster();\n\nbase();",
    "renders": true
  },
  {
    "food_item": "teff",
    "openscad_code": "// Teff grain cluster - realistic style with medium complexity\n// Teff is the world's smallest grain, so this represents a small cluster of grains\n\n// Main parameters\ngrain_diameter = 1.2;\ncluster_size = 60;  // Overall cluster diameter\ngrain_count = 150;\nwall_thickness = 1.5;\n\n// Color definitions\ngrain_color = \"#D4A574\";  // Light brown/beige\ndarker_grain = \"#B8956A\";  // Darker brown for variation\n\n// Single teff grain - elongated oval shape\nmodule teff_grain(size, rotation, tilt) {\n    color(grain_color) {\n        translate([0, 0, -size/2]) {\n            rotate([tilt, 0, rotation]) {\n                // Main grain body\n                scale([0.6, 0.4, 1]) \n                    sphere(d=size, $fn=12);\n                \n                // Slight ridge along grain\n                translate([0, 0, size*0.3]) {\n                    scale([0.1, 0.2, 0.8])\n                        sphere(d=size, $fn=8);\n                }\n            }\n        }\n    }\n}\n\n// Darker grain variant for variation\nmodule dark_teff_grain(size, rotation, tilt) {\n    color(darker_grain) {\n        translate([0, 0, -size/2]) {\n            rotate([tilt, 0, rotation]) {\n                scale([0.65, 0.35, 1]) \n                    sphere(d=size, $fn=10);\n            }\n        }\n    }\n}\n\n// Random seed generator for natural variation\nfunction random(seed) = rands(0, 1, 1, seed)[0];\n\n// Create cluster of teff grains\nmodule teff_cluster() {\n    // Center support structure\n    difference() {\n        sphere(d=cluster_size * 0.3, $fn=32);\n        sphere(d=cluster_size * 0.3 - wall_thickness * 2, $fn=32);\n    }\n    \n    // Generate grains in a dome shape\n    for(i = [0:grain_count-1]) {\n        angle1 = random(i * 2) * 360;\n        angle2 = random(i * 3) * 180;\n        radius = random(i * 5) * (cluster_size/2 - grain_diameter);\n        height = random(i * 7) * (cluster_size/2 - grain_diameter) * 0.7;\n        \n        // Position grains in spherical distribution\n        x = cos(angle1) * sin(angle2) * radius;\n        y = sin(angle1) * sin(angle2) * radius;\n        z = cos(angle2) * radius + height;\n        \n        translate([x, y, z]) {\n            if(i % 4 == 0) {\n                dark_teff_grain(grain_diameter * (0.8 + random(i*11)*0.4), random(i*13)*360, random(i*17)*30-15);\n            } else {\n                teff_grain(grain_diameter * (0.9 + random(i*19)*0.2), random(i*23)*360, random(i*29)*20-10);\n            }\n        }\n    }\n    \n    // Add some loose grains at bottom for natural look\n    for(j = [0:20]) {\n        angle = random(j * 31) * 360;\n        dist = random(j * 37) * (cluster_size/2 - grain_diameter);\n        \n        translate([cos(angle) * dist, sin(angle) * dist, -cluster_size/4]) {\n            rotate([90, 0, random(j*41)*360]) {\n                teff_grain(grain_diameter * 0.7, 0, 0);\n            }\n        }\n    }\n}\n\n// Base platform to prevent rolling\nmodule base() {\n    color(\"#E8DCC0\") {\n        cylinder(h=2, r1=cluster_size/2 + 5, r2=cluster_size/2 + 3, $fn=64);\n    }\n}\n\n// Main assembly\nunion() {\n    base();\n    translate([0, 0, 2]) {\n        teff_cluster();\n    }\n}",
    "renders": true
  },
  {
    "food_item": "sorghum",
    "openscad_code": "// Sorghum grain cluster - realistic style, medium complexity\n// Overall size ~60mm tall x 45mm diameter cluster\n\n// Main color definitions\ngrain_color = \"burlywood\";\nstem_color = \"darkgreen\";\n\n// Module for individual sorghum grain\nmodule sorghum_grain(size=3.5, rotation=[0,0,0]) {\n    color(grain_color) {\n        // Main grain body - slightly elongated sphere\n        translate([0,0,size*0.3]) \n            scale([1, 0.85, 1.3]) \n                sphere(d=size, $fn=12);\n        \n        // Small pointed tip\n        translate([0,0,size*1.5]) \n            cylinder(h=size*0.4, d1=size*0.4, d2=0, $fn=8);\n    }\n}\n\n// Module for grain cluster on a stem\nmodule grain_cluster(grain_count=12, stem_length=25) {\n    // Central stem\n    color(stem_color) {\n        cylinder(h=stem_length, d=2.5, $fn=8);\n    }\n    \n    // Generate grains in spiral pattern\n    for(i=[0:grain_count-1]) {\n        angle = i * 137.5;  // Golden angle for natural spacing\n        radius = 4 + (i % 3) * 2;  // Varying distance from center\n        height = stem_length - (i * 1.5);\n        \n        translate([0,0,height]) {\n            rotate([0,0,angle]) {\n                translate([radius,0,0]) {\n                    rotate([90,0,0]) {\n                        sorghum_grain(2.5 + (i%3)*0.5, [0,0,angle]);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Module for main sorghum head\nmodule sorghum_head() {\n    // Main head structure - slightly curved cylinder\n    color(grain_color) {\n        translate([0,0,15]) {\n            rotate([15,0,0]) {\n                cylinder(h=35, d1=8, d2=12, $fn=16);\n            }\n        }\n    }\n    \n    // Seed rows along the head\n    for(row=[0:7]) {\n        rotate([0,0,row*45]) {\n            for(pos=[5:5:30]) {\n                translate([0,0,pos]) {\n                    rotate([0,row*45,0]) {\n                        translate([6,0,0]) {\n                            sorghum_grain(3);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Additional smaller seeds filling gaps\n    for(i=[0:15]) {\n        angle = i * 22.5;\n        height = 8 + (i%5)*5;\n        radius = 5 + sin(i*2)*2;\n        \n        translate([0,0,height]) {\n            rotate([0,0,angle]) {\n                translate([radius,0,0]) {\n                    rotate([90,0,0]) {\n                        sorghum_grain(2);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Create the complete sorghum\nunion() {\n    // Main head\n    sorghum_head();\n    \n    // Stem extending from base\n    translate([0,0,0]) {\n        grain_cluster(8, 20);\n    }\n    \n    // Add some loose grains at base for realism\n    for(i=[0:4]) {\n        rotate([0,0,i*72]) {\n            translate([10+i*2,0,2]) {\n                rotate([75+i*5,0,0]) {\n                    sorghum_grain(2.5 - i*0.2);\n                }\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "food_item": "rye",
    "openscad_code": "// Realistic Rye Bread Slice\n// Based on a typical German-style rye with visible grains and seeds\n\n$fn = 48;\n\n// Overall dimensions (in mm)\nslice_length = 80;\nslice_width = 60;\nslice_height = 12;\n\n// Seed dimensions\nseed_radius = 1.2;\nseed_height = 0.6;\n\n// Create the main slice shape with rounded edges\nmodule bread_slice() {\n    // Main body with rounded top\n    difference() {\n        // Base shape\n        union() {\n            // Main loaf slice\n            translate([0, 0, slice_height/2])\n                cube([slice_length, slice_width, slice_height], center=true);\n            \n            // Rounded top edge\n            translate([0, 0, slice_height])\n                scale([slice_length/2, slice_width/2, slice_height/2])\n                    sphere();\n        }\n        \n        // Hollow out bottom slightly for realistic slice thickness\n        translate([0, 0, -1])\n            cube([slice_length-4, slice_width-4, slice_height/2], center=true);\n    }\n}\n\n// Caraway seeds on top\nmodule caraway_seeds() {\n    color(\"darkslategray\")\n    for (i = [0:35]) {\n        x = (i * 7 - 40) % slice_length - slice_length/2;\n        y = (i * 11 - 20) % slice_width - slice_width/2;\n        z = slice_height + 0.5;\n        \n        // Skip seeds near edges\n        if (abs(x) < slice_length/2 - 8 && abs(y) < slice_width/2 - 8) {\n            translate([x, y, z])\n                rotate([90, 0, rand(i)*360])\n                    scale([1, 1, 0.4])\n                        sphere(seed_radius);\n        }\n    }\n}\n\n// Sunflower seeds\nmodule sunflower_seeds() {\n    color(\"saddlebrown\")\n    for (i = [0:15]) {\n        x = (i * 13 - 25) % slice_length - slice_length/2;\n        y = (i * 7 - 15) % slice_width - slice_width/2;\n        z = slice_height + 0.3;\n        \n        if (abs(x) < slice_length/2 - 5 && abs(y) < slice_width/2 - 5) {\n            translate([x, y, z])\n                rotate([rand(i+50)*30, 0, rand(i+25)*180])\n                    scale([2, 1.5, 0.3])\n                        cylinder(h=seed_height*1.5, r1=seed_radius*1.5, r2=seed_radius);\n        }\n    }\n}\n\n// Rye grains embedded in surface\nmodule rye_grains() {\n    color(\"saddlebrown\")\n    for (i = [0:25]) {\n        x = (i * 9 - 30) % slice_length - slice_length/2;\n        y = (i * 5 - 10) % slice_width - slice_width/2;\n        z = slice_height - 1;\n        \n        if (abs(x) < slice_length/2 - 3 && abs(y) < slice_width/2 - 3) {\n            translate([x, y, z])\n                rotate([90, 0, rand(i+100)*360])\n                    scale([1.5, 0.8, 0.8])\n                        sphere(seed_radius*0.8);\n        }\n    }\n}\n\n// Crumb texture holes\nmodule crumb_texture() {\n    color(\"dimgray\")\n    for (i = [0:20]) {\n        x = (i * 17 - 35) % slice_length - slice_length/2;\n        y = (i * 13 - 25) % slice_width - slice_width/2;\n        z = slice_height/2 + rand(i+200)*slice_height/2 - slice_height/4;\n        \n        if (abs(x) < slice_length/2 - 4 && abs(y) < slice_width/2 - 4) {\n            translate([x, y, z])\n                sphere(seed_radius*0.8 + rand(i+150)*0.5);\n        }\n    }\n}\n\n// Helper function for random rotation\nfunction rand(n) = (n*13.7)%1;\n\n// Main assembly\ncolor(\"saddlebrown\") {\n    difference() {\n        union() {\n            bread_slice();\n            caraway_seeds();\n            sunflower_seeds();\n            rye_grains();\n        }\n        crumb_texture();\n    }\n}",
    "renders": true
  },
  {
    "food_item": "triticale",
    "openscad_code": "// Triticale grain model (realistic style, medium complexity)\n// Triticale is a wheat-rye hybrid, so this combines wheat and rye grain characteristics\n\n// Main parameters\ngrain_length = 70;\ngrain_width = 5;\ngrain_thickness = 4;\nseed_count = 15;\nhull_thickness = 0.5;\n\n// Colors\nhull_color = \"#D2B48C\";  // Tan/beige\nseed_color = \"#B8860B\";  // Dark goldenrod\ngroove_color = \"#8B7355\";  // Darker brown for texture\n\nmodule triticale_grain() {\n    // Main grain body - elongated with slight taper\n    hull_shape() {\n        // Create tapered grain body\n        linear_extrude(height=grain_length, twist=15) {\n            offset(r=2) offset(r=-2) {\n                polygon([\n                    [0, -grain_width/2],\n                    [grain_thickness/2, -grain_width/3],\n                    [grain_thickness*0.8, 0],\n                    [grain_thickness/2, grain_width/3],\n                    [0, grain_width/2]\n                ]);\n            }\n        }\n    }\n}\n\nmodule hull_shape() {\n    color(hull_color) {\n        // Main hull body\n        hull() {\n            // Create organic rounded shape\n            for(i = [0:3]) {\n                rotate([0, 0, i*90]) \n                    translate([0, 0, grain_length/2])\n                        sphere(d=grain_width*1.2, $fn=16);\n            }\n        }\n        \n        // Add longitudinal ridges characteristic of triticale\n        difference() {\n            hull() {\n                for(i = [0:3]) {\n                    rotate([0, 0, i*90]) \n                        translate([0, 0, grain_length/2])\n                            sphere(d=grain_width*1.2, $fn=16);\n                }\n            }\n            \n            // Carve out grooves between ridges\n            for(i = [1:3]) {\n                rotate([0, 0, i*120])\n                    translate([0, 0, grain_length/2])\n                        cylinder(h=grain_length*1.1, d=grain_width*0.3, $fn=8);\n            }\n        }\n    }\n}\n\nmodule seed_details() {\n    color(seed_color) {\n        // Add seed texture with small spheres\n        for(i = [0:seed_count-1]) {\n            rotate([0, 0, i*360/seed_count])\n                translate([grain_width/3, 0, grain_length/seed_count*i])\n                    sphere(d=grain_width/6, $fn=8);\n        }\n        \n        // Add bristle (awn) at top\n        translate([0, 0, grain_length])\n            rotate([90, 0, 0])\n                cylinder(h=grain_length/3, d1=0.5, d2=0.2, $fn=8);\n    }\n}\n\nmodule crease_detail() {\n    // Add the characteristic crease along the grain\n    color(groove_color) {\n        hull() {\n            // Create shallow groove\n            translate([0, -grain_width/4, grain_length/2])\n                cube([grain_thickness/2, grain_width/2, grain_length], center=true);\n        }\n    }\n}\n\n// Assemble the complete triticale grain\nunion() {\n    // Main grain body\n    triticale_grain();\n    \n    // Add surface details\n    seed_details();\n    \n    // Add crease detail\n    crease_detail();\n}\n\n// Add a subtle rotation for natural appearance\nrotate([5, 0, 15]) {\n    // Final assembly already included above\n}",
    "renders": true
  },
  {
    "food_item": "kamut",
    "openscad_code": "// Kamut grain - ancient wheat variety with elongated, plump shape\n// 3D printable model with realistic texture and proportions\n// Dimensions: ~80mm length\n\n$fn = 32;  // Smooth curves for printing\n\n// Main grain color - golden amber\ncolor([0.86, 0.66, 0.23]) {\n\n    // Main body of kamut grain - elongated ellipsoid shape\n    module kamut_body() {\n        scale([1, 0.7, 0.35])\n            sphere(d = 60);\n    }\n\n    // Create ridge texture along grain\n    module grain_ridges() {\n        for (i = [-30:5:30]) {\n            translate([i, 0, 0])\n                scale([0.1, 1, 0.2])\n                    sphere(d = 60);\n        }\n    }\n\n    // Germ end - slightly pointed\n    module germ_end() {\n        translate([-35, 0, 0])\n            scale([1.2, 0.8, 0.4])\n                rotate([0, 0, 90])\n                    cylinder(h = 15, r1 = 10, r2 = 5);\n    }\n\n    // Brush end - flatter, slightly indented\n    module brush_end() {\n        translate([35, 0, 0])\n            scale([1.2, 0.8, 0.4])\n                rotate([0, 0, 90])\n                    cylinder(h = 10, r1 = 8, r2 = 6);\n        \n        // Create slight indentation\n        translate([38, 0, 0])\n            scale([0.6, 0.6, 0.4])\n                sphere(d = 10);\n    }\n\n    // Surface texture - small indentations for realism\n    module surface_texture() {\n        for (i = [1:8]) {\n            rotate([0, i * 45, 0])\n                for (j = [-25:10:25]) {\n                    translate([j, 0, -5])\n                        scale([0.3, 0.3, 0.1])\n                            sphere(d = 5);\n                }\n        }\n    }\n\n    // Combine all parts\n    difference() {\n        // Main grain assembly\n        union() {\n            kamut_body();\n            germ_end();\n            brush_end();\n            \n            // Add subtle ridges\n            grain_ridges();\n        }\n        \n        // Remove texture indentations\n        surface_texture();\n    }\n}\n\n// Optional: Create a small cluster of 3 grains for display\ntranslate([100, 0, 0])\n    rotate([0, 0, 15])\n        scale([0.8, 0.8, 0.8])\n            color([0.86, 0.66, 0.23])\n                difference() {\n                    union() {\n                        scale([1, 0.7, 0.35])\n                            sphere(d = 60);\n                        translate([-35, 0, 0])\n                            scale([1.2, 0.8, 0.4])\n                                rotate([0, 0, 90])\n                                    cylinder(h = 15, r1 = 10, r2 = 5);\n                    }\n                    surface_texture();\n                }",
    "renders": true
  },
  {
    "food_item": "couscous",
    "openscad_code": "// Couscous - realistic style, medium complexity\n// A bowl of fluffy couscous with visible individual grains\n\n// Basic dimensions (in mm)\nbowl_d = 70;\nbowl_h = 30;\ngrain_d = 1.2;\ngrain_h = 1.5;\n\n// Main assembly\ncolor(\"wheat\") {\n    union() {\n        // Ceramic bowl\n        color(\"ivory\") {\n            difference() {\n                // Outer bowl\n                translate([0, 0, 0])\n                    cylinder(d = bowl_d, h = bowl_h, $fn = 64);\n                \n                // Inner cavity\n                translate([0, 0, 2])\n                    cylinder(d = bowl_d - 4, h = bowl_h - 2, $fn = 64);\n                \n                // Flatten bottom\n                translate([0, 0, -1])\n                    cube([bowl_d, bowl_d, 2], center = true);\n            }\n        }\n        \n        // Couscous grains layer\n        translate([0, 0, 2]) {\n            // Create realistic mound shape\n            for (i = [0:360:15]) {\n                rotate([0, 0, i]) {\n                    for (r = [5:7:25]) {\n                        translate([r * sin(i), r * cos(i), 0]) {\n                            // Vary height based on distance from center\n                            h = 15 - r * 0.4;\n                            grains_on_circle(r, h);\n                        }\n                    }\n                }\n            }\n            \n            // Add extra grains in center for fuller look\n            translate([0, 0, 0]) {\n                for (j = [0:25]) {\n                    angle = j * 137.5;\n                    radius = sqrt(j) * 1.8;\n                    translate([\n                        radius * cos(angle),\n                        radius * sin(angle),\n                        10 + sin(j) * 2\n                    ]) {\n                        single_grain();\n                    }\n                }\n            }\n        }\n        \n        // Some scattered grains on top\n        translate([0, 0, 17]) {\n            for (k = [0:45]) {\n                translate([\n                    (rand(k * 2) - 0.5) * 20,\n                    (rand(k * 3) - 0.5) * 20,\n                    rand(k * 5) * 3\n                ]) {\n                    single_grain();\n                }\n            }\n        }\n    }\n}\n\n// Module for a single couscous grain\nmodule single_grain() {\n    // Random rotation for natural look\n    rotate([rand($children * 10) * 360, rand($children * 20) * 360, rand($children * 30) * 360]) {\n        // Main grain body - slightly flattened sphere\n        scale([1, 1, 0.8]) {\n            sphere(d = grain_d, $fn = 8);\n        }\n        \n        // Tiny bump for texture\n        translate([0, 0, grain_d/2]) {\n            scale([0.3, 0.3, 0.5]) {\n                sphere(d = grain_d * 0.7, $fn = 6);\n            }\n        }\n    }\n}\n\n// Module for placing grains in circular patterns\nmodule grains_on_circle(radius, height) {\n    count = max(3, floor(radius / 1.5));\n    for (i = [0:count-1]) {\n        angle = i * 360 / count;\n        translate([\n            radius * cos(angle),\n            radius * sin(angle),\n            height + rand(i) * 2 - 1\n        ]) {\n            single_grain();\n        }\n    }\n}\n\n// Simple pseudo-random function for variation\nfunction rand(n) = (n * 9301 + 49297) % 233280 / 233280;",
    "renders": true
  },
  {
    "food_item": "semolina",
    "openscad_code": "// Semolina Pudding Cake with Almonds and Caramelized Top\n// Realistic style, medium complexity\n\n// Main parameters\n$fn = 32;\nplate_diameter = 80;\nheight = 25;\nwall_thickness = 2;\n\n// Color definitions\nsemolina_color = [0.95, 0.85, 0.7];\nalmond_color = [0.9, 0.75, 0.6];\ncaramel_color = [0.8, 0.5, 0.25];\n\n// Create the semolina cake base\nmodule semolina_base() {\n    color(semolina_color)\n    difference() {\n        // Main cylinder body\n        cylinder(h = height, r = plate_diameter/2 - 5, center = false);\n        \n        // Hollow center for realistic thickness\n        translate([0, 0, wall_thickness])\n        cylinder(h = height - wall_thickness, r = plate_diameter/2 - 5 - wall_thickness, center = false);\n    }\n}\n\n// Create caramelized top surface texture\nmodule caramelized_top() {\n    color(caramel_color) {\n        // Main caramel layer\n        difference() {\n            cylinder(h = 1.5, r = plate_diameter/2 - 5, center = false);\n            // Slightly smaller for inset look\n            translate([0, 0, -0.1])\n            cylinder(h = 2, r = plate_diameter/2 - 5.5, center = false);\n        }\n        \n        // Add caramelized spots and texture\n        for(i = [0:15]) {\n            angle = i * 24 + (i % 3) * 8;\n            radius = (plate_diameter/2 - 8) * (0.7 + 0.3 * sin(i * 2));\n            \n            translate([\n                radius * cos(angle),\n                radius * sin(angle),\n                1.4\n            ])\n            scale([1, 1, 0.3])\n            sphere(r = 1.2 + 0.8 * (i % 3));\n        }\n    }\n}\n\n// Create roasted almonds on top\nmodule almond() {\n    color(almond_color)\n    union() {\n        // Main almond body\n        scale([1, 0.6, 0.3])\n        sphere(r = 3);\n        \n        // Almond texture lines\n        for(i = [0:2]) {\n            translate([0, 0, -0.2 + i * 0.2])\n            scale([0.9, 0.5, 0.05])\n            sphere(r = 3);\n        }\n    }\n}\n\n// Place almonds in decorative pattern\nmodule place_almonds() {\n    for(i = [0:11]) {\n        angle = i * 30;\n        radius = (plate_diameter/2 - 12) * (0.8 + 0.2 * (i % 2));\n        \n        translate([\n            radius * cos(angle),\n            radius * sin(angle),\n            height + 0.8\n        ])\n        rotate([0, 0, angle + 45])\n        rotate([20 + (i % 3) * 15, 0, 0])\n        almond();\n    }\n}\n\n// Add semolina grain texture on sides\nmodule side_texture() {\n    color(semolina_color)\n    for(i = [0:35]) {\n        angle = i * 10;\n        height_pos = 3 + (i % 4) * 4;\n        \n        translate([\n            (plate_diameter/2 - 5 - wall_thickness/2) * cos(angle),\n            (plate_diameter/2 - 5 - wall_thickness/2) * sin(angle),\n            height_pos\n        ])\n        rotate([90, 0, angle])\n        scale([0.8, 0.8, 0.4])\n        sphere(r = 0.8);\n    }\n}\n\n// Main assembly\nunion() {\n    // Base semolina cake\n    semolina_base();\n    \n    // Side texture\n    side_texture();\n    \n    // Caramelized top layer\n    translate([0, 0, height - 1.5])\n    caramelized_top();\n    \n    // Almonds on top\n    place_almonds();\n}",
    "renders": true
  },
  {
    "food_item": "polenta",
    "openscad_code": "// Polenta - classic Italian cornmeal loaf\n// Dimensions: 80mm x 50mm x 40mm\n\n$fn = 32;\n\n// Main polenta loaf body with rounded edges\nmodule polenta_body() {\n    // Base rectangular shape\n    translate([-40, -25, 0])\n        cube([80, 50, 35]);\n    \n    // Rounded top edges\n    hull() {\n        translate([-35, -20, 35])\n            sphere(r=5);\n        translate([35, -20, 35])\n            sphere(r=5);\n        translate([-35, 20, 35])\n            sphere(r=5);\n        translate([35, 20, 35])\n            sphere(r=5);\n    }\n}\n\n// Cornmeal texture pattern\nmodule cornmeal_texture() {\n    // Create small bumps for cornmeal grains\n    for(x = [-35:5:35]) {\n        for(y = [-20:5:20]) {\n            translate([x, y, 36])\n                scale([1, 1, 0.5])\n                sphere(r=0.8);\n        }\n    }\n}\n\n// Cut surface showing the polenta's interior\nmodule cut_surface() {\n    // Angled cut plane\n    translate([0, 0, 35])\n        rotate([0, 15, 0])\n        cube([100, 50, 1]);\n}\n\n// Grilled surface marks\nmodule grill_marks() {\n    // Parallel lines from grilling\n    for(i = [-20:4:20]) {\n        translate([i, 0, 35])\n            rotate([0, 90, 0])\n            cylinder(h=50, r=0.5);\n    }\n}\n\n// Assembly\ncolor([0.95, 0.85, 0.65]) {\n    difference() {\n        union() {\n            polenta_body();\n            cornmeal_texture();\n        }\n        // Cut section to show interior\n        translate([30, 0, 0])\n            cube([60, 50, 50]);\n    }\n}\n\n// Interior surface\ncolor([0.92, 0.82, 0.62]) {\n    translate([30, -25, 0])\n        cube([0.5, 50, 35]);\n}\n\n// Grilled surface on one side\ncolor([0.85, 0.75, 0.55]) {\n    translate([-35, -25, 35])\n        cube([70, 50, 0.5]);\n    \n    grill_marks();\n}\n\n// Bottom surface with slight flattening\ncolor([0.88, 0.78, 0.58]) {\n    translate([-40, -25, 0])\n        cube([80, 50, 0.5]);\n}",
    "renders": true
  },
  {
    "food_item": "tapioca",
    "openscad_code": "// Realistic Tapioca Pearls in a Small Dessert Cup\n// 3D printable model with medium complexity\n// Pearl diameter ~8mm, cup ~60mm wide x 35mm tall\n\n// Colors\ncup_color = \"LightBlue\";\ntapioca_color = \"Ivory\";\nmilk_color = \"White\";\n\n// Main assembly\nmodule tapioca_dessert() {\n    // Dessert cup\n    difference() {\n        // Outer cup\n        color(cup_color)\n        cylinder(h = 35, d1 = 60, d2 = 55, center = false);\n        \n        // Hollow inside\n        translate([0, 0, 3])\n        cylinder(h = 32, d1 = 54, d2 = 49, center = false);\n    }\n    \n    // Cup rim\n    translate([0, 0, 35])\n    color(cup_color)\n    cylinder(h = 3, d1 = 62, d2 = 60, center = false);\n    \n    // Milk base liquid\n    translate([0, 0, 3])\n    color(milk_color, 0.7)\n    cylinder(h = 20, d1 = 54, d2 = 49, center = false);\n    \n    // Generate tapioca pearls floating in milk\n    for(i = [0:5]) {\n        for(j = [0:5]) {\n            if(i*6 + j < 20) {\n                angle = (i*6 + j) * 137.5;\n                radius = 20 + sin(i*6 + j) * 5;\n                x = cos(angle) * radius;\n                y = sin(angle) * radius;\n                z = 8 + sin(i*6 + j*0.5) * 3;\n                \n                translate([x, y, z])\n                rotate([0, 0, angle])\n                tapioca_pearl();\n            }\n        }\n    }\n}\n\n// Individual tapioca pearl with slight imperfections\nmodule tapioca_pearl() {\n    color(tapioca_color) {\n        // Main pearl body\n        sphere(d = 8, $fn = 32);\n        \n        // Add slight surface texture\n        for(i = [0:7]) {\n            rotate([0, i*45, i*60])\n            translate([3.9, 0, 0])\n            sphere(d = 0.5, $fn = 8);\n        }\n        \n        // Subtle dent for realism\n        translate([1, 1, 2])\n        scale([1, 1, 0.3])\n        sphere(d = 2, $fn = 16);\n    }\n}\n\n// Generate the complete dessert\ntapioca_dessert();",
    "renders": true
  },
  {
    "food_item": "cassava",
    "openscad_code": "// Cassava root in realistic style\n// Uses medium complexity with basic primitives\n\n$fn = 60;\n\n// Main cassava root\nmodule cassava_root() {\n    color(\"burlywood\")\n    difference() {\n        // Main tapered body\n        union() {\n            hull() {\n                translate([0, 0, 0]) sphere(d = 20);\n                translate([0, 0, 50]) sphere(d = 15);\n                translate([0, 0, 100]) sphere(d = 8);\n            }\n            \n            // Slight bulge in middle\n            translate([0, 0, 35]) scale([1.1, 1.1, 1]) sphere(d = 22);\n        }\n        \n        // Remove center to make hollow (3D printable)\n        translate([0, 0, -5]) cylinder(d = 8, h = 110);\n    }\n}\n\n// Root scars and eyes\nmodule root_scars() {\n    color(\"saddlebrown\")\n    for(i = [0:20]) {\n        rotate([0, 0, i * 18])\n        translate([10 * cos(i * 18), 10 * sin(i * 18), i * 4.5])\n        rotate([90, 0, 0])\n        cylinder(d1 = 3, d2 = 2, h = 1.5);\n    }\n}\n\n// Surface texture lines\nmodule surface_lines() {\n    color(\"burlywood\")\n    for(i = [0:15]) {\n        rotate([0, 0, i * 12])\n        translate([0, 0, 0])\n        linear_extrude(height = 100, twist = 5)\n        translate([9, 0, 0])\n        square([0.5, 2], center = true);\n    }\n}\n\n// End cuts\nmodule root_ends() {\n    color(\"antiquewhite\")\n    // Root end\n    translate([0, 0, -2])\n    cylinder(d = 20, h = 3);\n    \n    // Tip end\n    translate([0, 0, 98])\n    cylinder(d = 8, h = 2);\n}\n\n// Main assembly\nunion() {\n    // Main root body\n    cassava_root();\n    \n    // Surface details\n    root_scars();\n    surface_lines();\n    root_ends();\n}\n\n// Position for printing\ntranslate([0, 0, 0]) rotate([90, 0, 0]) {\n    cassava_root();\n    root_scars();\n    surface_lines();\n    root_ends();\n}",
    "renders": true
  },
  {
    "food_item": "yuca",
    "openscad_code": "// Yuca (Cassava) Root - Realistic Style, Medium Complexity\n// Overall length ~80mm, diameter ~25mm tapering to 15mm\n\n$fn = 32;\n\n// Main yuca body - tapered cylinder shape\nmodule yuca_body() {\n    color([0.92, 0.85, 0.70])  // Creamy off-white/beige\n    hull() {\n        translate([0, 0, 0])\n            cylinder(h=10, d1=25, d2=23);\n        translate([0, 0, 70])\n            cylinder(h=10, d1=15, d2=13);\n    }\n}\n\n// Surface texture - irregular ridges along length\nmodule surface_ridges() {\n    color([0.90, 0.82, 0.68])\n    for(i = [0:15:75]) {\n        rotate([0, 90, 0])\n        translate([0, 0, i])\n        linear_extrude(height=2, twist=5, scale=[1.1, 1.1])\n            offset(delta=0.5)\n            circle(d=22 - (i/5));\n    }\n}\n\n// Root nodes/bumps on surface\nmodule root_nodes() {\n    color([0.85, 0.78, 0.65])\n    for(i = [0:30:240]) {\n        rotate([0, 0, i])\n        translate([12 - (i/20), 0, 20 + (i/4)])\n            scale([1.2, 0.8, 0.6])\n                sphere(d=3 + (sin(i)*2));\n    }\n}\n\n// Cut end showing fibrous interior\nmodule cut_end() {\n    difference() {\n        // End face\n        translate([0, 0, 0])\n            cylinder(h=2, d=25);\n        \n        // Fibrous pattern\n        color([0.98, 0.95, 0.90])\n        for(i = [0:30:330]) {\n            rotate([0, 0, i])\n            translate([5, 0, -0.5])\n                cube([10, 1.5, 3], center=true);\n        }\n    }\n}\n\n// Brown skin patches remaining\nmodule skin_patches() {\n    color([0.65, 0.50, 0.35])\n    for(i = [0:45:315]) {\n        rotate([0, 0, i])\n        translate([12 - (i/25), 0, 15 + (i/2)])\n            scale([1, 0.7, 1])\n                cylinder(h=8, d=8, $fn=6);\n    }\n}\n\n// Small root hairs\nmodule root_hairs() {\n    color([0.55, 0.45, 0.30])\n    for(i = [0:20:340]) {\n        rotate([0, 0, i])\n        translate([11 - (i/30), 0, 10 + (i/3)])\n        rotate([90, 0, 0])\n            cylinder(h=2 + (sin(i)*1), d=0.5);\n    }\n}\n\n// Assembly\nunion() {\n    yuca_body();\n    \n    // Surface details\n    surface_ridges();\n    \n    // Organic features\n    root_nodes();\n    skin_patches();\n    root_hairs();\n    \n    // Cut end detail\n    translate([0, 0, -1])\n        cut_end();\n}\n\n// Add slight overall bend for realism\nrotate([2, 0, 5])\n    children();",
    "renders": true
  },
  {
    "food_item": "taro",
    "openscad_code": "// Realistic Taro - Medium Complexity\n// Dimensions: ~70mm length, ~50mm width, ~40mm height\n\n// Main color definitions\ntaro_skin_color = [110/255, 80/255, 120/255];\ntaro_flesh_color = [240/255, 220/255, 255/255];\ntaro_dark_vein = [90/255, 60/255, 100/255];\n\n// Main taro body module\nmodule taro_body() {\n    color(taro_skin_color) {\n        // Main bulb shape using ellipsoid approximation\n        union() {\n            // Central bulb\n            scale([1, 0.7, 0.6])\n                sphere(d=50, $fn=50);\n            \n            // Side growth\n            translate([15, -10, -5])\n                scale([0.7, 0.5, 0.4])\n                    sphere(d=30, $fn=30);\n                    \n            // Top crown\n            translate([0, 0, 15])\n                scale([0.8, 0.6, 0.3])\n                    sphere(d=25, $fn=30);\n        }\n    }\n}\n\n// Root hairs texture module\nmodule root_hairs() {\n    color(taro_skin_color) {\n        difference() {\n            union() {\n                // Generate root hairs around bottom half\n                for(i = [0:15:359]) {\n                    rotate([0, 0, i])\n                        translate([23, 0, -20])\n                            rotate([90, 0, 0])\n                                cylinder(h1=8, h2=0, r1=1.5, r2=0.5, $fn=8);\n                }\n                \n                // Additional hairs on side growth\n                for(i = [0:20:179]) {\n                    rotate([0, 0, i])\n                        translate([35, -10, -8])\n                            rotate([90, 0, 0])\n                                cylinder(h1=6, h2=0, r1=1, r2=0.3, $fn=6);\n                }\n            }\n            \n            // Remove hairs inside main body\n            scale([1.05, 0.75, 0.65])\n                sphere(d=50, $fn=50);\n            translate([15, -10, -5])\n                scale([0.75, 0.55, 0.45])\n                    sphere(d=30, $fn=30);\n        }\n    }\n}\n\n// Surface texture pattern\nmodule surface_texture() {\n    color(taro_skin_color) {\n        difference() {\n            union() {\n                // Ring patterns around main body\n                for(z = [-15:5:15]) {\n                    translate([0, 0, z])\n                        rotate_extrude($fn=100)\n                            translate([22 - abs(z)*0.3, 0, 0])\n                                circle(r=0.5);\n                }\n                \n                // Side growth rings\n                for(z = [-8:3:8]) {\n                    translate([15, -10, z-5])\n                        rotate_extrude($fn=60)\n                            translate([10 - abs(z)*0.2, 0, 0])\n                                circle(r=0.3);\n                }\n            }\n            \n            // Smooth top portion\n            translate([0, 0, 20])\n                cube([100, 100, 50], center=true);\n        }\n    }\n}\n\n// Cut section showing purple flesh\nmodule cut_section() {\n    // Remove quarter section to show interior\n    difference() {\n        union() {\n            // Exterior\n            taro_body();\n            root_hairs();\n            surface_texture();\n            \n            // Interior flesh\n            color(taro_flesh_color) {\n                translate([0, 0, -5])\n                    scale([0.95, 0.65, 0.55])\n                        sphere(d=50, $fn=50);\n                        \n                translate([15, -10, -5])\n                    scale([0.65, 0.45, 0.35])\n                        sphere(d=30, $fn=30);\n            }\n            \n            // Vein pattern inside\n            color(taro_dark_vein) {\n                for(i = [0:30:359]) {\n                    rotate([0, 0, i])\n                        translate([5, 0, -10])\n                            rotate([0, 90, 0])\n                                cylinder(h=30, r=0.5, $fn=8);\n                }\n            }\n        }\n        \n        // Cut away section\n        translate([0, 25, 0])\n            cube([100, 50, 100], center=true);\n        translate([25, 0, 0])\n            cube([50, 100, 100], center=true);\n    }\n}\n\n// Assembly\nrotate([0, -20, 45])\n    cut_section();",
    "renders": true
  },
  {
    "food_item": "plantain",
    "openscad_code": "// Plantain - Medium complexity realistic style\n// Dimensions: ~80mm long, ~25mm wide\n\nmodule plantain_body() {\n    // Main body - elongated curved cylinder\n    color([0.9, 0.7, 0.2])  // Yellow-brown plantain color\n    union() {\n        // Create curved body using hull of spheres\n        for(i = [0:5]) {\n            rotate([0, 0, i*15]) \n            translate([i*12, sin(i*15)*5, 0])\n            scale([1.2 - i*0.15, 1 - i*0.1, 1 - i*0.1])\n            sphere(10);\n        }\n        \n        // Add small bumps for texture\n        for(i = [0:20]) {\n            rotate([0, 0, i*18])\n            translate([i*3.5, sin(i*18)*3, 0])\n            translate([0, 0, 10*cos(i*18)])\n            sphere(1.5, $fn=8);\n        }\n    }\n}\n\nmodule stem_end() {\n    // Brown stem at top\n    color([0.4, 0.25, 0.1])\n    translate([-5, 0, 8])\n    rotate([90, 0, 0])\n    cylinder(h=8, r1=4, r2=2, $fn=6);\n}\n\nmodule plantain_surface() {\n    // Surface details - longitudinal ridges\n    color([0.85, 0.65, 0.15])\n    for(i = [0:5]) {\n        rotate([0, 0, i*60])\n        translate([0, 0, 0])\n        linear_extrude(height=80, twist=5)\n        offset(0.5)\n        polygon(points=[[0,0], [2,0], [2,1], [0,1]]);\n    }\n    \n    // Dark spots for ripening\n    color([0.5, 0.3, 0.1])\n    for(i = [0:8]) {\n        rotate([0, 0, i*45])\n        translate([i*8 + 10, sin(i*45)*2, 10])\n        sphere(1.2, $fn=6);\n    }\n}\n\nmodule plantain_tip() {\n    // Tapered end\n    color([0.85, 0.6, 0.15])\n    translate([62, 0, 0])\n    rotate([0, 0, 15])\n    scale([1, 0.8, 0.8])\n    cylinder(h=15, r1=6, r2=0, $fn=12);\n}\n\n// Main assembly\nunion() {\n    plantain_body();\n    stem_end();\n    plantain_surface();\n    plantain_tip();\n}\n\n// Add slight overall rotation for natural look\nrotate([0, -5, 0]) {\n    children();\n}",
    "renders": true
  },
  {
    "food_item": "breadfruit",
    "openscad_code": "// Realistic Breadfruit Model - Medium Complexity\n// Approx 70mm diameter, 3D printable with no overhangs\n\n// Main breadfruit body with characteristic lobes\nmodule breadfruit_body() {\n    color([0.8, 0.65, 0.25])  // Yellow-green breadfruit color\n    \n    // Create the main spherical base\n    difference() {\n        sphere(d = 70, $fn = 64);\n        \n        // Flatten bottom slightly for printing stability\n        translate([0, 0, -40])\n            cube([80, 80, 50], center = true);\n    }\n    \n    // Add lobes using scaled spheres\n    for (i = [0:11]) {\n        rotate([0, 0, i * 30])\n            translate([0, 32, 0])\n                scale([1.1, 0.7, 0.9])\n                    sphere(d = 20, $fn = 16);\n    }\n}\n\n// Surface texture - hexagonal pattern\nmodule breadfruit_texture() {\n    color([0.75, 0.6, 0.2])\n    \n    // Create hexagonal indentations\n    for (lat = [-60:15:60]) {\n        for (lon = [0:30:330]) {\n            rotate([lat, 0, lon])\n                translate([0, 0, 33])\n                    rotate([90, 0, 0])\n                        linear_extrude(height = 1)\n                            circle(d = 4, $fn = 6);\n        }\n    }\n}\n\n// Stem attachment point\nmodule breadfruit_stem() {\n    color([0.4, 0.3, 0.1])\n    \n    // Main stem base\n    translate([0, 0, 35])\n        rotate([0, 0, 0])\n            cylinder(h = 8, d1 = 12, d2 = 8, $fn = 8);\n    \n    // Stem collar\n    translate([0, 0, 32])\n        cylinder(h = 3, d = 15, $fn = 8);\n}\n\n// Surface blemishes for realism\nmodule breadfruit_blemishes() {\n    color([0.6, 0.45, 0.15])\n    \n    // Random small spots\n    for (i = [0:20]) {\n        rotate([rands(-80, 80, 1)[0], 0, rands(0, 360, 1)[0]])\n            translate([rands(25, 33, 1)[0], 0, rands(-5, 5, 1)[0]])\n                sphere(d = rands(1.5, 3, 1)[0], $fn = 8);\n    }\n}\n\n// Main assembly\nunion() {\n    // Core structure\n    breadfruit_body();\n    \n    // Surface details\n    difference() {\n        breadfruit_texture();\n        // Cut hexagons into surface\n        for (lat = [-60:15:60]) {\n            for (lon = [0:30:330]) {\n                rotate([lat, 0, lon])\n                    translate([0, 0, 34.5])\n                        rotate([90, 0, 0])\n                            cylinder(h = 3, d = 3.5, $fn = 6);\n            }\n        }\n    }\n    \n    // Add stem\n    breadfruit_stem();\n    \n    // Add blemishes for realism\n    breadfruit_blemishes();\n}",
    "renders": true
  },
  {
    "food_item": "arrowroot",
    "openscad_code": "// Arrowroot - Realistic style with medium complexity\n// Features: segmented root structure, fibrous texture, and natural irregularities\n\n// Main parameters\nroot_length = 75;\nroot_width = 25;\nwall_thickness = 2;\n\nmodule arrowroot_root() {\n    color([0.95, 0.85, 0.75])  // Creamy white color\n    \n    // Main root body with slight taper\n    difference() {\n        hull() {\n            translate([0, 0, root_length/2]) \n                scale([1.1, 1.1, 1]) \n                sphere(d=root_width, $fn=20);\n            translate([0, 0, 0]) \n                sphere(d=root_width*0.8, $fn=20);\n        }\n        \n        // Create segmented appearance\n        for(i = [0:8]) {\n            translate([0, 0, i*root_length/9])\n                rotate([0, 0, i*20])\n                difference() {\n                    cylinder(h=root_length/10, d=root_width*1.2, $fn=12);\n                    translate([0, 0, -1]) \n                        cylinder(h=root_length/9+2, d=root_width*0.7, $fn=12);\n                }\n        }\n    }\n    \n    // Fibrous root hairs\n    for(i = [0:30]) {\n        rotate([0, 0, i*12])\n        translate([root_width/2 * cos(i*3), root_width/2 * sin(i*3), root_length/2 - (i%4)*root_length/4])\n        rotate([90, 0, 0])\n        cylinder(h=2+random(0,3), d=0.5+random(0,1.5), $fn=6);\n    }\n    \n    // Natural surface bumps and ridges\n    for(i = [0:15]) {\n        translate([random(-root_width/3, root_width/3), \n                  random(-root_width/3, root_width/3), \n                  random(0, root_length)])\n        scale([random(0.8,1.2), random(0.8,1.2), random(0.5,1.5)])\n        sphere(d=2+random(0,2), $fn=8);\n    }\n    \n    // Growth rings\n    color([0.9, 0.8, 0.7]) {\n        for(i = [1:5]) {\n            translate([0, 0, root_length/6 * i])\n            rotate_extrude($fn=30)\n            translate([root_width/2 - i, 0, 0])\n            circle(d=1);\n        }\n    }\n}\n\n// Helper function for random values\nfunction random(min, max) = min + (max - min) * (rands(0, 1, 1)[0]);\n\n// Create the complete arrowroot\nrotate([0, -30, 0])\narrowroot_root();",
    "renders": true
  },
  {
    "food_item": "kudzu",
    "openscad_code": "// Kudzu Leaf-wrapped Rice Cake (Korean Traditional Food)\n// Realistic style, medium complexity\n\nmodule kudzu_leaf() {\n    // Main leaf body - kidney bean shape\n    difference() {\n        // Base leaf shape\n        scale([1, 0.7, 0.05]) sphere(d=40);\n        \n        // Leaf stem cutout\n        translate([0, -20, 0]) scale([0.3, 0.3, 2]) cylinder(h=10, d=10);\n        \n        // Vein indentations\n        for(i=[-2:2]) {\n            rotate([0, 0, i*15]) translate([0, 5*i, 0]) scale([0.05, 0.8, 2]) \n                cube([30, 3, 2], center=true);\n        }\n    }\n    \n    // Leaf stem\n    color(\"darkgreen\") translate([0, -20, 0]) rotate([90, 0, 0]) \n        cylinder(h=15, d1=3, d2=2);\n    \n    // Leaf texture - small bumps\n    for(i=[-4:4]) {\n        for(j=[-2:2]) {\n            if(i*i + j*j < 10) {\n                translate([i*4, j*4, 2.5]) sphere(d=0.8);\n            }\n        }\n    }\n}\n\nmodule rice_cake() {\n    // Main rice cake body\n    color(\"ivory\") translate([0, 0, -7]) scale([0.8, 0.6, 0.3]) \n        sphere(d=35);\n    \n    // Rice grain texture on surface\n    for(i=[-3:3]) {\n        for(j=[-3:3]) {\n            if(i*i + j*j < 9) {\n                translate([i*3, j*3, -5.5]) sphere(d=1.2);\n            }\n        }\n    }\n    \n    // Filling layer visible at edge\n    color(\"darkred\") translate([0, 0, -6]) scale([0.75, 0.55, 0.1]) \n        sphere(d=35);\n}\n\nmodule kudzu_powder() {\n    // Dusting of kudzu powder on top\n    color(\"white\") {\n        for(i=[-5:5]) {\n            for(j=[-5:5]) {\n                if(i*i + j*j < 16) {\n                    translate([i*2, j*2, 2.6]) sphere(d=0.5);\n                }\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Kudzu leaf wrapping\n    color(\"palegreen\") kudzu_leaf();\n    \n    // Rice cake inside\n    translate([0, 0, 2]) rice_cake();\n    \n    // Powder dusting\n    kudzu_powder();\n}",
    "renders": true
  },
  {
    "food_item": "sago",
    "openscad_code": "// Realistic 3D printable sago pearls with translucent appearance\n// Sago pearls are small, round balls with slight irregularities and a semi-transparent look\n\n$fn = 32;  // Smooth spheres for better print quality\n\n// Main module for the sago cluster\nmodule sago_cluster(pearl_count = 12, base_size = 60) {\n    // Pearl parameters\n    pearl_radius = base_size / 12;\n    cluster_radius = base_size / 2.5;\n    \n    // Create multiple pearls in a natural cluster\n    for (i = [0:pearl_count-1]) {\n        // Random position within cluster\n        angle1 = 360 * i / pearl_count + rands(-15, 15, 1)[0];\n        angle2 = 180 * i / pearl_count + rands(-30, 30, 1)[0];\n        radius = cluster_radius * (0.7 + rands(0, 0.3, 1)[0]);\n        \n        translate([\n            radius * cos(angle1) * sin(angle2),\n            radius * sin(angle1) * sin(angle2),\n            radius * cos(angle2)\n        ]) {\n            // Each pearl with slight size variation\n            actual_radius = pearl_radius * (0.9 + rands(0, 0.2, 1)[0]);\n            sago_pearl(actual_radius);\n        }\n    }\n}\n\n// Individual sago pearl with realistic features\nmodule sago_pearl(radius) {\n    // Base pearl body\n    difference() {\n        // Main sphere\n        color([0.95, 0.92, 0.85, 0.7])  // Translucent off-white\n        sphere(r = radius);\n        \n        // Small indentations for texture\n        for (i = [0:5]) {\n            rotate([rands(0, 360, 1)[0], rands(0, 360, 1)[0], 0])\n            translate([radius * 0.8, 0, 0])\n            scale([1, 0.7, 0.7])\n            sphere(r = radius * 0.15);\n        }\n    }\n    \n    // Add subtle surface irregularities\n    for (i = [0:8]) {\n        rotate([rands(0, 360, 1)[0], rands(0, 360, 1)[0], 0])\n        translate([radius * 0.9, 0, 0])\n        color([0.9, 0.87, 0.8, 0.5])\n        sphere(r = radius * 0.05);\n    }\n}\n\n// Create a small puddle of cooking liquid\nmodule cooking_liquid() {\n    // Thin base for printing stability\n    color([0.85, 0.82, 0.75, 0.4])  // Translucent milky liquid\n    difference() {\n        // Main puddle shape\n        scale([1, 0.8, 0.1])\n        sphere(r = 35);\n        \n        // Irregular edges\n        for (i = [0:20]) {\n            rotate([0, 0, i * 18])\n            translate([20 + rands(-5, 5, 1)[0], 0, -1])\n            cube([10, 5, 2]);\n        }\n    }\n}\n\n// Main assembly\ntranslate([0, 0, 5]) {\n    // Cooking liquid base\n    cooking_liquid();\n    \n    // Sago pearls cluster\n    translate([0, 0, 2]) {\n        sago_cluster(pearl_count = 15, base_size = 70);\n    }\n    \n    // Add a few loose pearls around\n    for (i = [0:7]) {\n        angle = 45 * i + rands(-10, 10, 1)[0];\n        distance = 40 + rands(-5, 5, 1)[0];\n        translate([\n            distance * cos(angle),\n            distance * sin(angle),\n            1 + rands(0, 2, 1)[0]\n        ]) {\n            sago_pearl(radius = 3.5 + rands(-0.5, 0.5, 1)[0]);\n        }\n    }\n}",
    "renders": true
  },
  {
    "food_item": "mochi",
    "openscad_code": "// Mochi (Japanese rice cake) - realistic style, medium complexity\n// Dimensions: ~65mm diameter, ~35mm height\n\n$fn = 64;\n\n// Main mochi body with slightly flattened sphere\nmodule mochi_body() {\n    color(\"ivory\") {\n        // Slightly squashed sphere for realistic mochi shape\n        scale([1, 1, 0.85]) sphere(d = 65);\n        \n        // Bottom flattening\n        translate([0, 0, -28]) \n            cylinder(h = 5, d1 = 60, d2 = 62, $fn = 32);\n    }\n}\n\n// Soft dimple details on surface\nmodule surface_dimples() {\n    color(\"ivory\") {\n        for(i = [0:5]) {\n            rotate([0, 0, i * 60 + 30]) {\n                translate([25, 0, 8]) \n                    rotate([90, 0, 0]) \n                        cylinder(h = 2, d1 = 8, d2 = 12, $fn = 16);\n            }\n        }\n        \n        for(j = [0:3]) {\n            rotate([0, 0, j * 90 + 15]) {\n                translate([18, 0, 12]) \n                    rotate([90, 0, 0]) \n                        cylinder(h = 1.5, d1 = 6, d2 = 9, $fn = 16);\n            }\n        }\n    }\n}\n\n// Cornstarch powder texture\nmodule cornstarch_texture() {\n    color(\"white\") {\n        // Small spheres for powder effect\n        for(i = [0:20]) {\n            rotate([0, 0, i * 17.2]) {\n                translate([random(15, 30), 0, random(25, 32)]) \n                    sphere(d = random(0.3, 0.8));\n            }\n        }\n        \n        for(j = [0:15]) {\n            rotate([0, 0, j * 24.3]) {\n                translate([random(20, 32), 0, random(15, 25)]) \n                    sphere(d = random(0.2, 0.6));\n            }\n        }\n    }\n}\n\n// Seam line from molding process\nmodule molding_seam() {\n    color(\"antiquewhite\") {\n        translate([0, 0, 0]) \n            rotate([0, 0, 0]) \n                difference() {\n                    sphere(d = 66);\n                    scale([1, 1, 0.9]) sphere(d = 64.5);\n                }\n    }\n}\n\n// Assembly\nunion() {\n    mochi_body();\n    surface_dimples();\n    molding_seam();\n    cornstarch_texture();\n}",
    "renders": true
  },
  {
    "food_item": "ramen",
    "openscad_code": "// Ramen bowl with noodles, broth, egg, pork, and scallions\n\n// Bowl module\nmodule bowl() {\n    // Outer bowl shape\n    color(\"bisque\")\n    difference() {\n        cylinder(h=30, r=25, $fn=64);\n        translate([0, 0, 28])\n        cylinder(h=2, r=23.5, $fn=64);\n    }\n    \n    // Inner bowl cavity\n    color(\"bisque\")\n    difference() {\n        translate([0, 0, 5])\n        cylinder(h=25, r=23, $fn=64);\n        translate([0, 0, 28])\n        cylinder(h=2, r=22.5, $fn=64);\n    }\n    \n    // Bowl rim\n    color(\"bisque\")\n    translate([0, 0, 28])\n    cylinder(h=3, r=25, $fn=64);\n}\n\n// Noodle module\nmodule noodles() {\n    color(\"#F5DEB3\")\n    for(i = [0:15]) {\n        translate([cos(i*45)*10, sin(i*45)*10, 10])\n        rotate([0, 0, i*30])\n        for(j = [0:8]) {\n            translate([j*2, 0, j*0.5])\n            rotate([90, 0, 0])\n            cylinder(h=20, r=1.2, $fn=8);\n        }\n    }\n}\n\n// Broth layer\nmodule broth() {\n    color(\"#F0E68C\", 0.7)\n    translate([0, 0, 8])\n    cylinder(h=2, r=22, $fn=64);\n}\n\n// Soft-boiled egg\nmodule egg() {\n    color(\"#FFFACD\")\n    translate([8, 8, 10])\n    scale([1.2, 1, 0.8])\n    sphere(r=5, $fn=32);\n    \n    // Egg yolk\n    color(\"#FFD700\")\n    translate([8, 8, 11.5])\n    sphere(r=3.5, $fn=32);\n}\n\n// Pork belly (chashu)\nmodule pork() {\n    color(\"#CD853F\")\n    translate([-10, 5, 10])\n    rotate([0, 90, 0])\n    cylinder(h=15, r=4, $fn=32);\n    \n    // Pork texture lines\n    color(\"#8B4513\")\n    for(i = [0:3]) {\n        translate([-10, 5, 10-i*2])\n        rotate([0, 90, 0])\n        cube([15, 0.5, 7], center=true);\n    }\n}\n\n// Scallion pieces\nmodule scallions() {\n    color(\"#228B22\")\n    for(i = [0:12]) {\n        translate([rand(-15, 15), rand(-15, 15), 12])\n        rotate([0, 0, rand(0, 360)])\n        cube([0.5, 0.5, 3], center=true);\n    }\n}\n\n// Nori sheet piece\nmodule nori() {\n    color(\"#2F4F4F\")\n    translate([10, -8, 11])\n    rotate([0, 0, 15])\n    cube([12, 8, 0.5]);\n}\n\n// Assembly\nbowl();\nbroth();\nnoodles();\negg();\npork();\nscallions();\nnori();",
    "renders": true
  },
  {
    "food_item": "udon",
    "openscad_code": "// Udon noodle soup bowl - realistic style\n// Bowl: 80mm diameter x 45mm height\n// Noodles: 3mm diameter x 150mm length (folded)\n\n// Colors\nbowl_color = [0.95, 0.85, 0.75];\nnoodle_color = [0.95, 0.85, 0.6];\nbroth_color = [0.85, 0.65, 0.4];\ngreen_color = [0.2, 0.6, 0.3];\nwhite_color = [0.95, 0.95, 0.95];\n\n$fn = 32;\n\n// Main module\nmodule udon_bowl() {\n    // Bowl base\n    color(bowl_color)\n    difference() {\n        cylinder(h = 45, r1 = 40, r2 = 35);\n        translate([0, 0, 2])\n        cylinder(h = 43, r1 = 38, r2 = 33);\n    }\n    \n    // Bowl rim\n    translate([0, 0, 45])\n    color(bowl_color)\n    difference() {\n        cylinder(h = 3, r1 = 40, r2 = 41);\n        cylinder(h = 3, r1 = 35, r2 = 36);\n    }\n    \n    // Broth\n    translate([0, 0, 2])\n    color(broth_color)\n    cylinder(h = 40, r1 = 38, r2 = 33);\n    \n    // Udon noodles\n    module udon_noodle(start, end, twist) {\n        color(noodle_color) {\n            hull() {\n                translate(start)\n                sphere(d = 3);\n                translate(end)\n                sphere(d = 3);\n            }\n            translate(start)\n            sphere(d = 3);\n            translate(end)\n            sphere(d = 3);\n        }\n    }\n    \n    // Generate folded noodles\n    for (i = [0:3]) {\n        angle = i * 90;\n        radius = 15 + i * 3;\n        \n        // Main noodle loops\n        rotate([0, 0, angle])\n        translate([radius * cos(45), radius * sin(45), 25])\n        rotate([90, 0, 45])\n        for (j = [0:5]) {\n            y = j * 8 - 20;\n            udon_noodle([0, y, 0], [5, y + 6, 0], j * 15);\n        }\n        \n        // Cross noodles\n        rotate([0, 0, angle + 45])\n        translate([radius * 0.7, 0, 30])\n        for (k = [0:3]) {\n            x = k * 6 - 9;\n            udon_noodle([x, -15, 0], [x + 3, 15, 0], 0);\n        }\n    }\n    \n    // Green onions (negi)\n    module green_onion() {\n        color(green_color)\n        for (i = [0:8]) {\n            rotate([0, 0, i * 45])\n            translate([20 + i * 2, 0, 38])\n            rotate([90, 0, 0])\n            cylinder(h = 5, r1 = 0.5, r2 = 0.3);\n        }\n    }\n    \n    green_onion();\n    \n    // Fish cake (kamaboko)\n    color(white_color)\n    translate([0, -25, 38])\n    rotate([90, 0, 0])\n    linear_extrude(height = 1.5)\n    union() {\n        circle(r = 8);\n        translate([-3, 0, 0])\n        circle(r = 3);\n        translate([3, 0, 0])\n        circle(r = 3);\n    }\n    \n    // Pink spiral on fish cake\n    color([0.95, 0.7, 0.75])\n    translate([0, -25, 39.6])\n    rotate([90, 0, 0])\n    linear_extrude(height = 0.3)\n    for (t = [0:5:360]) {\n        x = 3 * cos(t) * (1 + t/360);\n        y = 3 * sin(t) * (1 + t/360);\n        translate([x, y, 0])\n        circle(r = 0.8);\n    }\n    \n    // Broth surface texture\n    color(broth_color)\n    translate([0, 0, 42])\n    for (i = [0:20]) {\n        angle = i * 18;\n        radius = 5 + (i % 3) * 8;\n        translate([radius * cos(angle), radius * sin(angle), 0])\n        sphere(d = 1.5);\n    }\n}\n\n// Render the udon bowl\nudon_bowl();",
    "renders": true
  },
  {
    "food_item": "soba",
    "openscad_code": "// Realistic soba noodles with chopsticks in a simple bowl\n// Model is ~80mm wide, designed for 3D printing with minimal overhangs\n\n// Colors\nsoba_color = [0.5, 0.35, 0.2];\nbowl_color = [0.9, 0.9, 0.95];\nchopstick_color = [0.8, 0.65, 0.4];\n\n// Main assembly\nunion() {\n    // Bowl\n    color(bowl_color) bowl();\n    \n    // Noodles\n    color(soba_color) noodles();\n    \n    // Chopsticks\n    color(chopstick_color) chopsticks();\n}\n\n// Bowl module\nmodule bowl() {\n    difference() {\n        // Outer bowl\n        cylinder(h = 25, r1 = 40, r2 = 35, $fn = 64);\n        \n        // Hollow interior\n        translate([0, 0, 5])\n            cylinder(h = 22, r1 = 37, r2 = 32, $fn = 64);\n        \n        // Flat bottom\n        translate([0, 0, -1])\n            cylinder(h = 2, r1 = 25, r2 = 25, $fn = 32);\n    }\n}\n\n// Individual noodle strand\nmodule noodle_strand(length, angle, twist) {\n    // Create twisted noodle with elliptical cross-section\n    for(i = [0:2:length]) {\n        hull() {\n            translate([i * cos(angle), i * sin(angle), 5 + sin(i/5 + twist) * 2])\n                scale([1.5, 0.8, 1])\n                    sphere(r = 1.2, $fn = 12);\n            translate([(i+2) * cos(angle), (i+2) * sin(angle), 5 + sin((i+2)/5 + twist) * 2])\n                scale([1.5, 0.8, 1])\n                    sphere(r = 1.2, $fn = 12);\n        }\n    }\n}\n\n// Noodles collection\nmodule noodles() {\n    // Generate multiple strands in various orientations\n    for(i = [0:20:340]) {\n        rotate([0, 0, i])\n            translate([sin(i/3) * 15, cos(i/3) * 15, 0])\n                noodle_strand(35 + (i % 15), i/10, i/5);\n    }\n    \n    // Additional crossing strands for realistic tangle\n    for(i = [10:30:190]) {\n        rotate([0, 0, i + 90])\n            translate([cos(i/2) * 10, sin(i/2) * 10, 3])\n                noodle_strand(25 + (i % 10), -i/8, -i/7);\n    }\n}\n\n// Chopsticks crossed on top\nmodule chopsticks() {\n    // First chopstick\n    rotate([90, 0, 45])\n        translate([0, -35, 15])\n            cylinder(h = 70, r1 = 1.5, r2 = 1.2, $fn = 16);\n    \n    // Second chopstick\n    rotate([90, 0, -45])\n        translate([0, -35, 15])\n            cylinder(h = 70, r1 = 1.5, r2 = 1.2, $fn = 16);\n}",
    "renders": true
  },
  {
    "food_item": "macaroni",
    "openscad_code": "// Realistic 3D printable macaroni food model\n// Elbow macaroni with ridged surface texture and slight imperfections\n\n$fn=64; // Smooth curves\nmacaroni_color = \"#F5DEB3\"; // Wheat pasta color\n\n// Main module to create macaroni\nmodule macaroni() {\n    color(macaroni_color) {\n        // Create elbow tube shape\n        difference() {\n            union() {\n                // Main curved tube body\n                curved_tube();\n                \n                // Surface ridges\n                ridge_texture();\n            }\n            \n            // Hollow center\n            hollow_center();\n        }\n        \n        // Slight imperfections for realism\n        surface_imperfections();\n    }\n}\n\n// Curved tube body\nmodule curved_tube() {\n    // Sweep a circle along a quarter-circle path\n    for(i=[0:5:90]) {\n        rotate([0, 0, i]) \n        translate([0, -30*sin(i), 30*cos(i)]) \n        rotate([90-i, 0, 0]) \n        cylinder(h=5, r1=9, r2=9.5, center=true);\n    }\n}\n\n// Create hollow center\nmodule hollow_center() {\n    // Inner tube following same curve\n    for(i=[0:5:90]) {\n        rotate([0, 0, i]) \n        translate([0, -25*sin(i), 30*cos(i)]) \n        rotate([90-i, 0, 0]) \n        cylinder(h=7, r1=5.5, r2=6, center=true);\n    }\n}\n\n// Surface ridges along the curve\nmodule ridge_texture() {\n    for(i=[0:15:360]) {\n        rotate([0, 0, i]) {\n            // Create ridges at 15 degree intervals\n            for(j=[0:5:90]) {\n                rotate([0, 0, j]) \n                translate([0, -30*sin(j), 30*cos(j)]) \n                rotate([90-j, 0, 0]) \n                translate([9.5, 0, 0]) \n                cube([1, 5, 0.5], center=true);\n            }\n        }\n    }\n}\n\n// Add small imperfections for realistic look\nmodule surface_imperfections() {\n    // Random small bumps\n    for(i=[0:30:330]) {\n        rotate([0, 0, i]) {\n            for(j=[0:15:75]) {\n                rotate([0, 0, j]) \n                translate([0, -30*sin(j), 30*cos(j)]) \n                rotate([90-j, 0, 0]) \n                translate([9.5+2*cos(i*j), 0, 2*sin(i*j)]) \n                sphere(r=0.3);\n            }\n        }\n    }\n    \n    // Small edge irregularities\n    for(i=[0:45:315]) {\n        rotate([0, 0, i]) \n        translate([0, -30*sin(i), 30*cos(i)]) \n        rotate([90-i, 0, 0]) \n        translate([0, 4.5, 0]) \n        sphere(r=0.5);\n    }\n}\n\n// Create a single macaroni piece\nmacaroni();",
    "renders": true
  },
  {
    "food_item": "fusilli",
    "openscad_code": "// Fusilli pasta - medium complexity realistic style\n// Overall length ~80mm, printable without supports\n\n$fn = 30;\n\n// Pasta parameters\nspiral_length = 80;\nspiral_radius = 8;\nturns = 3;\nridge_height = 1.5;\nnoodle_thickness = 4;\ngroove_width = 3;\n\n// Create the main spiral body\nmodule spiral_body() {\n    // Generate points along the spiral\n    points = [for (i = [0:360*turns]) \n        [spiral_radius * cos(i), \n         spiral_radius * sin(i), \n         i * (spiral_length / (360 * turns))]\n    ];\n    \n    // Create tubes along the spiral path\n    for (i = [0:len(points)-2]) {\n        translate(points[i])\n        rotate([0, 90, atan2(points[i+1][1]-points[i][1], points[i+1][0]-points[i][0])])\n        cylinder(h = norm(points[i+1]-points[i]), r = noodle_thickness/2, center = true);\n    }\n}\n\n// Create ridges along the spiral\nmodule ridges() {\n    for (t = [0:360*turns/15]) {\n        rotate(t)\n        translate([spiral_radius, 0, t * (spiral_length / (360 * turns))])\n        rotate([90, 0, 0])\n        cylinder(h = ridge_height, r = noodle_thickness/3, center = true);\n    }\n}\n\n// Create grooves between ridges\nmodule grooves() {\n    for (t = [360*turns/30:360*turns/15:360*turns]) {\n        rotate(t)\n        translate([spiral_radius, 0, t * (spiral_length / (360 * turns))])\n        rotate([90, 0, 0])\n        cylinder(h = noodle_thickness/2, r = noodle_thickness/4, center = true);\n    }\n}\n\n// Surface texture with small bumps\nmodule texture() {\n    for (i = [0:20:spiral_length]) {\n        for (j = [0:30:360]) {\n            translate([\n                spiral_radius * cos(j) + (rand(i*100+j*200)-0.5)*2,\n                spiral_radius * sin(j) + (rand(i*100+j*300)-0.5)*2,\n                i\n            ])\n            sphere(r = 0.3);\n        }\n    }\n}\n\n// Helper function for random values\nfunction rand(x) = ((x * 9301 + 49297) % 233280) / 233280;\n\n// Main assembly\ncolor(\"#F5DEB3\")  // Wheat color\nunion() {\n    // Main spiral structure\n    difference() {\n        union() {\n            spiral_body();\n            ridges();\n        }\n        grooves();\n    }\n    \n    // Add surface texture\n    texture();\n}\n\n// Flatten bottom slightly for better printing\ntranslate([0, -spiral_radius-noodle_thickness, 0])\ncube([spiral_radius*2+noodle_thickness*2, noodle_thickness, spiral_length], center = true);",
    "renders": true
  },
  {
    "food_item": "penne",
    "openscad_code": "// Penne pasta - realistic style\n// Dimensions based on typical penne: ~50mm long, 12mm diameter, 2mm wall thickness\n\n$fn = 36;\n\n// Main parameters\nlength = 50;\nouter_diameter = 12;\ninner_diameter = 8;\nwall_thickness = (outer_diameter - inner_diameter) / 2;\ndiagonal_cut_angle = 45;\n\n// Create angled cut ends\nmodule angled_cut(length, diameter, angle) {\n    difference() {\n        cylinder(h = length, d = diameter, center = true);\n        \n        // Cut at specified angle\n        translate([0, 0, -length/2 - 1])\n            rotate([0, angle, 0])\n                translate([0, 0, -length])\n                    cube([diameter * 2, diameter * 2, diameter * 2], center = true);\n    }\n}\n\n// Create penne tube with angled ends\nmodule penne_tube() {\n    difference() {\n        // Outer tube\n        angled_cut(length, outer_diameter, diagonal_cut_angle);\n        \n        // Inner hollow\n        translate([0, 0, 0])\n            cylinder(h = length + 2, d = inner_diameter, center = true);\n    }\n}\n\n// Create ridges along the tube\nmodule ridges() {\n    ridge_height = 0.3;\n    ridge_width = 1.5;\n    num_ridges = 22;\n    \n    for(i = [0 : num_ridges - 1]) {\n        rotate([0, 0, i * (360 / num_ridges)])\n            translate([outer_diameter/2 - ridge_height/2, 0, 0])\n                rotate([0, 90, 0])\n                    color(\"wheat\")\n                        cylinder(h = length, d = ridge_height, center = true);\n    }\n}\n\n// Create subtle surface texture\nmodule surface_texture() {\n    texture_size = 0.5;\n    spacing = 2;\n    \n    for(z = [-length/2 + spacing/2 : spacing : length/2 - spacing/2]) {\n        for(a = [0 : 30 : 359]) {\n            rotate([0, 0, a])\n                translate([outer_diameter/2 - texture_size/2, 0, z])\n                    sphere(d = texture_size);\n        }\n    }\n}\n\n// Main assembly\ncolor(\"#F5DEB3\") {\n    union() {\n        // Main tube\n        penne_tube();\n        \n        // Add ridges on surface\n        ridges();\n        \n        // Add subtle surface texture\n        surface_texture();\n    }\n}",
    "renders": true
  },
  {
    "food_item": "rigatoni",
    "openscad_code": "// Rigatoni pasta - realistic style, medium complexity\n// Approx 70mm long, 25mm diameter\n\n$fn = 32;\n\n// Main pasta color - golden semolina\ncolor([0.92, 0.78, 0.52]) difference() {\n    // Outer tube body\n    rotate([0, 90, 0]) {\n        difference() {\n            // Main tube\n            cylinder(h = 70, d1 = 25, d2 = 23);\n            \n            // Inner hole\n            cylinder(h = 72, d1 = 12, d2 = 11);\n        }\n    }\n    \n    // Ridged grooves around the tube\n    for(i = [0:5:360]) {\n        rotate([0, 0, i]) {\n            translate([0, -12.5, 0]) {\n                cube([70, 3, 2.5], center = true);\n            }\n        }\n    }\n}\n\n// Interior surface texture\ncolor([0.88, 0.74, 0.48]) {\n    for(i = [5:10:65]) {\n        rotate([0, 90, 0]) {\n            // Inner ridges for sauce grip\n            difference() {\n                cylinder(h = 8, d1 = 11.8, d2 = 11.8);\n                cylinder(h = 9, d1 = 11, d2 = 11);\n            }\n            translate([i, 0, 0]) {\n                rotate([0, 0, 45]) {\n                    difference() {\n                        cylinder(h = 8, d1 = 11.8, d2 = 11.8);\n                        cylinder(h = 9, d1 = 11, d2 = 11);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Cut ends - slightly rough texture\ncolor([0.94, 0.80, 0.54]) {\n    translate([0, 0, 35]) {\n        rotate([0, 90, 0]) {\n            difference() {\n                cylinder(h = 2, d1 = 25, d2 = 25);\n                cylinder(h = 3, d1 = 12, d2 = 12);\n            }\n            // End texture with small irregularities\n            for(i = [0:30:360]) {\n                rotate([0, 0, i]) {\n                    translate([11, 0, 0]) {\n                        sphere(d = 0.8);\n                    }\n                }\n            }\n        }\n    }\n    \n    translate([0, 0, -35]) {\n        rotate([0, 90, 0]) {\n            difference() {\n                cylinder(h = 2, d1 = 23, d2 = 23);\n                cylinder(h = 3, d1 = 11, d2 = 11);\n            }\n            // End texture\n            for(i = [15:30:375]) {\n                rotate([0, 0, i]) {\n                    translate([10.5, 0, 0]) {\n                        sphere(d = 0.7);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Subtle flour dusting effect\ncolor([0.98, 0.95, 0.85]) {\n    for(i = [10:20:60]) {\n        rotate([0, 90, 0]) {\n            translate([i, 12.3, 0]) {\n                sphere(d = 1.2);\n            }\n            translate([i, -12.3, 0]) {\n                sphere(d = 1.0);\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "food_item": "linguine",
    "openscad_code": "// Realistic Linguine - Medium Complexity\n// Single strand with characteristic flat oval profile and subtle ridges\n// Dimensions: ~80mm length, 2mm thick, 6mm wide\n\ncolor(\"wheat\")\ntranslate([0,0,2]) \nunion() {\n    \n    // Main noodle body - 80mm long with oval cross-section\n    difference() {\n        // Base oval extrusion\n        linear_extrude(height = 80, center = true, twist = 2)\n            scale([3, 1, 1])\n                circle(d = 6, $fn = 32);\n        \n        // Hollow core for 3D printing (1.5mm walls)\n        translate([0,0,-0.5])\n            linear_extrude(height = 81, center = true, twist = 2)\n                scale([2.25, 0.75, 1])\n                    circle(d = 3, $fn = 32);\n    }\n    \n    // Surface ridges - subtle texture along length\n    module ridge(offset, rotation) {\n        translate([offset, 0, 0])\n            rotate([0, rotation, 0])\n                scale([0.3, 0.15, 80])\n                    cube([1, 1, 1], center = true);\n    }\n    \n    // Create 12 ridges around the surface\n    for (i = [0:11]) {\n        angle = i * 30;\n        x = 2.8 * cos(angle);\n        z = 2.8 * sin(angle);\n        ridge([x, 0, z], angle);\n    }\n    \n    // Slightly flattened ends\n    translate([0, 0, 40])\n        scale([1, 1, 0.3])\n            sphere(d = 6, $fn = 32);\n    \n    translate([0, 0, -40])\n        scale([1, 1, 0.3])\n            sphere(d = 6, $fn = 32);\n            \n    // Edge detail - slight irregularity for realism\n    module edge_bump(pos, size) {\n        translate([pos, 0, 0])\n            scale([size, 1, size])\n                sphere(d = 0.8, $fn = 8);\n    }\n    \n    // Random edge bumps\n    seed = 42;\n    for (i = [0:7]) {\n        pos = -35 + i * 10;\n        size = 0.5 + (i % 3) * 0.3;\n        edge_bump(pos, size);\n    }\n}",
    "renders": true
  },
  {
    "food_item": "fettuccine",
    "openscad_code": "// Fettuccine pasta - realistic style with medium complexity\n// A nest of flat, ribbon-like pasta strands with realistic texture and color\n\n// Main parameters\n$fn = 32;\npasta_width = 5.5;      // Width of each fettuccine strand\npasta_thickness = 1.2;  // Thickness of pasta\nnest_diameter = 45;     // Overall nest diameter\nnest_height = 12;       // Nest height\nstrand_length = 80;     // Length of each pasta strand\n\n// Generate the pasta nest\nmodule pasta_nest() {\n    // Create a base disk for the nest bottom\n    color(\"#E8DCC0\") \n    translate([0, 0, -0.5])\n    cylinder(h=1, d=nest_diameter, $fn=64);\n    \n    // Generate curved pasta strands in a spiral pattern\n    for (i = [0:5:360]) {\n        rotate([0, 0, i])\n        translate([sin(i/3)*8, cos(i/3)*8, 0])\n        pasta_strand(i);\n    }\n}\n\n// Individual pasta strand module\nmodule pasta_strand(rotation) {\n    // Create the flat ribbon shape\n    color(\"#F5E7C1\") {\n        // Main pasta body\n        hull() {\n            translate([-strand_length/2, -pasta_width/2, 0])\n            cube([strand_length, pasta_width, pasta_thickness]);\n            \n            // Add slight curve to the strand\n            translate([-strand_length/2 + 5, -pasta_width/2 - 0.5, 0.3])\n            cube([strand_length - 10, pasta_width + 1, pasta_thickness]);\n            \n            translate([-strand_length/2 + 10, -pasta_width/2 - 0.8, 0.6])\n            cube([strand_length - 20, pasta_width + 1.6, pasta_thickness]);\n        }\n        \n        // Add texture lines along the pasta\n        for (j = [0:3:strand_length-10]) {\n            translate([-strand_length/2 + j + 5, -pasta_width/2, -0.1])\n            cube([0.5, pasta_width, pasta_thickness + 0.2]);\n        }\n        \n        // Add cross-hatch texture\n        for (k = [0:2:pasta_width-2]) {\n            translate([-strand_length/2, -pasta_width/2 + k, -0.1])\n            cube([strand_length, 0.3, pasta_thickness + 0.2]);\n        }\n    }\n    \n    // Slight rotation for natural look\n    rotate([sin(rotation/20)*3, cos(rotation/20)*3, 0])\n    translate([0, 0, sin(rotation/15)*2])\n    children();\n}\n\n// Create flour dusting effect\nmodule flour_dusting() {\n    color(\"#FFF8DC\") {\n        for (i = [0:15]) {\n            translate([\n                sin(i*137.5)*nest_diameter/2*0.9,\n                cos(i*137.5)*nest_diameter/2*0.9,\n                nest_height + 0.5\n            ])\n            sphere(d=0.5 + sin(i*20)*0.3);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Create the pasta nest\n    pasta_nest();\n    \n    // Add flour dusting on top\n    flour_dusting();\n    \n    // Add a few loose strands\n    translate([nest_diameter/2 + 5, 0, 3])\n    rotate([0, 0, 45])\n    pasta_strand(0);\n    \n    translate([-nest_diameter/2 - 5, 5, 2])\n    rotate([0, 0, -30])\n    pasta_strand(180);\n}",
    "renders": true
  },
  {
    "food_item": "spaghetti",
    "openscad_code": "// Realistic Spaghetti with Sauce - Medium Complexity\n// Individual spaghetti strands with tomato sauce on top\n\n// Parameters for printability\n$strand_diameter = 1.8;  // Printable spaghetti thickness\n$strand_length = 60;     // Total length\n$wall_thickness = 0.8;   // Minimum wall thickness\n$plate_thickness = 3;    // Base plate for stability\n$sauce_thickness = 2;    // Tomato sauce layer\n\n// Colors\n$spaghetti_color = [0.95, 0.9, 0.75];\n$sauce_color = [0.85, 0.25, 0.15];\n\n// Generate random spaghetti positions\nmodule spaghetti_strand(length, angle, x_pos, y_pos, z_pos) {\n    color($spaghetti_color) {\n        // Main cylinder body\n        translate([x_pos, y_pos, z_pos]) {\n            rotate([0, angle, 0]) {\n                cylinder(h=length, d=$strand_diameter, $fn=12);\n                \n                // Add texture rings every 5mm\n                for(i = [0:5:length-5]) {\n                    translate([0, 0, i]) {\n                        difference() {\n                            cylinder(h=0.5, d=$strand_diameter+0.2, $fn=12);\n                            cylinder(h=0.5, d=$strand_diameter-0.2, $fn=12);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Create tomato sauce blobs\nmodule sauce_blob(x, y, size) {\n    color($sauce_color) {\n        translate([x, y, $strand_diameter + $plate_thickness + $sauce_thickness/2]) {\n            sphere(d=size, $fn=16);\n        }\n    }\n}\n\n// Base plate for stability\nmodule base_plate() {\n    color([0.9, 0.9, 0.9]) {\n        cube([70, 45, $plate_thickness], center=true);\n    }\n}\n\n// Main assembly\nmodule spaghetti_pile() {\n    // Base plate\n    translate([0, 0, $plate_thickness/2]) base_plate();\n    \n    // Generate spaghetti strands in a pile\n    for(i = [0:12]) {\n        // Random positions within plate bounds\n        x_pos = -30 + (i * 5) % 60 - 30;\n        y_pos = -20 + (i * 3) % 40 - 20;\n        \n        // Random slight angles for natural look\n        angle = (i % 2 == 0) ? 5 + (i*2) : -5 - (i*2);\n        \n        // Slight height variations\n        z_pos = $plate_thickness + (i % 3) * 0.5;\n        \n        spaghetti_strand($strand_length - (i%3)*5, angle, x_pos, y_pos, z_pos);\n    }\n    \n    // Add tomato sauce on top\n    for(i = [0:8]) {\n        sauce_x = -25 + (i*5) % 50;\n        sauce_y = -15 + (i*3) % 30;\n        sauce_size = 4 + (i%3)*2;\n        sauce_blob(sauce_x, sauce_y, sauce_size);\n    }\n    \n    // Additional sauce drips between strands\n    for(i = [0:5]) {\n        translate([-20 + i*8, -10 + (i%2)*20, $plate_thickness + $strand_diameter]) {\n            color($sauce_color) {\n                cylinder(h=$sauce_thickness, d=6 + (i%2)*2, $fn=12);\n            }\n        }\n    }\n}\n\n// Render the complete spaghetti dish\nspaghetti_pile();",
    "renders": true
  },
  {
    "food_item": "orzo",
    "openscad_code": "// Orzo pasta - realistic 3D printable model\n// Rice-grain shaped pasta with ridged texture\n\nmodule orzo_body() {\n    // Main body - stretched rice grain shape\n    difference() {\n        union() {\n            // Central cylinder for length\n            translate([0, 0, 0])\n                scale([1, 0.6, 0.4])\n                sphere(d=12, $fn=32);\n            \n            // Tapered ends\n            translate([-7, 0, 0])\n                scale([0.6, 0.6, 0.4])\n                sphere(d=12, $fn=32);\n            \n            translate([7, 0, 0])\n                scale([0.6, 0.6, 0.4])\n                sphere(d=12, $fn=32);\n        }\n        \n        // Hollow center for pasta thickness\n        translate([0, 0, -0.5])\n            scale([0.7, 0.7, 0.5])\n            sphere(d=12, $fn=32);\n    }\n}\n\nmodule surface_texture() {\n    // Longitudinal ridges on surface\n    for(i = [-3:1:3]) {\n        rotate([0, 90, 0])\n            translate([i*1.5, 0, 0])\n                scale([0.1, 1, 0.05])\n                cylinder(h=20, d=2, $fn=8);\n    }\n    \n    // Small surface imperfections for realism\n    for(i = [1:8]) {\n        rotate([0, 0, i*45])\n            translate([5*cos(i*45), 5*sin(i*45), 2.3])\n                sphere(d=0.5, $fn=8);\n    }\n    \n    for(i = [1:8]) {\n        rotate([0, 0, i*45+22.5])\n            translate([3*cos(i*45+22.5), 3*sin(i*45+22.5), 2.3])\n                sphere(d=0.3, $fn=6);\n    }\n}\n\nmodule orzo_single() {\n    union() {\n        color([0.92, 0.85, 0.68])  // Golden wheat color\n            orzo_body();\n        \n        color([0.88, 0.82, 0.65])  // Slightly darker ridges\n            surface_texture();\n    }\n}\n\n// Create a single orzo piece\norzo_single();",
    "renders": true
  },
  {
    "food_item": "vermicelli",
    "openscad_code": "// Vermicelli pasta - realistic medium complexity\n// Individual strands with slight curl and texture\n\nmodule vermicelli_strand(length, curl, segments) {\n    // Create a single strand with slight curl and texture\n    for(i = [0:segments-1]) {\n        // Calculate position along strand\n        t = i / (segments - 1);\n        angle = t * curl;\n        x = sin(angle) * 2;\n        y = cos(angle) * 2;\n        z = t * length;\n        \n        // Create segment with slight random offset for texture\n        translate([x + (rand(i*3)*0.3-0.15), \n                   y + (rand(i*7)*0.3-0.15), \n                   z]) {\n            // Main cylinder body\n            cylinder(h=length/segments + 0.5, r=0.8, $fn=8);\n            \n            // Add tiny bumps for texture\n            for(bump = [0:3]) {\n                rotate([0, 0, bump*90]) \n                translate([0.6, 0, 0]) \n                sphere(r=0.15, $fn=6);\n            }\n        }\n    }\n}\n\nmodule vermicelli_bundle(strands, radius) {\n    // Create a bundle of vermicelli strands\n    color([0.92, 0.85, 0.70]) {\n        union() {\n            for(i = [0:strands-1]) {\n                // Random position within bundle\n                angle = i * 137.5; // Golden angle for natural distribution\n                r = sqrt(i/strands) * radius * 0.8; // Spiral distribution\n                x = cos(angle) * r;\n                y = sin(angle) * r;\n                \n                translate([x, y, 0]) {\n                    rotate([rand(i*2)*5-2.5, rand(i*3)*5-2.5, 0]) {\n                        vermicelli_strand(60, rand(i*5)*30+20, 12);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Helper function for pseudo-random numbers\nfunction rand(seed) = ((seed * 9301 + 49297) % 233280) / 233280.0;\n\n// Create the vermicelli nest\ndifference() {\n    union() {\n        // Main bundle of vermicelli\n        vermicelli_bundle(35, 25);\n        \n        // Add some crossing strands on top\n        for(i = [0:8]) {\n            rotate([0, 0, i*45]) {\n                translate([rand(i*11)*10-5, rand(i*13)*10-5, 30]) {\n                    rotate([90, 0, rand(i*17)*360]) {\n                        vermicelli_strand(35, rand(i*19)*40-20, 8);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Flatten bottom for stable printing\n    translate([-30, -30, -1]) \n    cube([60, 60, 2]);\n}\n\n// Add subtle color variation\ncolor([0.88, 0.82, 0.65]) {\n    // Some slightly darker strands\n    for(i = [0:5]) {\n        translate([rand(i*23)*20-10, rand(i*29)*20-10, 20]) {\n            rotate([rand(i*31)*10-5, rand(i*37)*10-5, 0]) {\n                vermicelli_strand(25, rand(i*41)*20-10, 6);\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "food_item": "gnocchi",
    "openscad_code": "// Gnocchi - Realistic style, medium complexity\n// Individual potato dumpling with traditional ridges\n\n// Parameters\n$fn = 50;  // Smoothness for curved surfaces\n\n// Main gnocchi body - roughly 35mm x 20mm x 15mm\nmodule gnocchi_body() {\n    // Base ellipsoid shape\n    scale([1, 0.6, 0.4]) \n    sphere(15);\n}\n\n// Ridge pattern - traditional fork marks\nmodule ridges() {\n    // Create multiple ridge lines along the length\n    for (i = [-3:3]) {\n        translate([i*4, 0, 7.5])\n        rotate([90, 0, 0])\n        linear_extrude(height = 25)\n        circle(1.5);\n    }\n}\n\n// Slight imperfections for realism\nmodule imperfections() {\n    // Small dents and bumps\n    for (i = [1:5]) {\n        // Random placement for organic look\n        translate([rands(-8, 8, 1)[0], \n                  rands(-4, 4, 1)[0], \n                  rands(-2, 5, 1)[0]])\n        sphere(rands(0.5, 1.2, 1)[0], $fn=8);\n    }\n}\n\n// Dusting of flour for authentic appearance\nmodule flour_dust() {\n    // Sparse white speckles\n    for (i = [1:15]) {\n        translate([rands(-12, 12, 1)[0], \n                  rands(-8, 8, 1)[0], \n                  rands(5, 8, 1)[0]])\n        scale([1, 1, 0.3])\n        sphere(0.5, $fn=6);\n    }\n}\n\n// Complete gnocchi assembly\nmodule single_gnocchi() {\n    color(\"#f5e8d6\")  // Warm potato color\n    \n    union() {\n        // Main body\n        gnocchi_body();\n        \n        // Add ridges by intersecting with ridge pattern\n        intersection() {\n            gnocchi_body();\n            ridges();\n        }\n        \n        // Surface imperfections\n        color(\"#e8dcc6\")\n        imperfections();\n        \n        // Flour dusting\n        color(\"#ffffff\")\n        flour_dust();\n    }\n}\n\n// Generate one gnocchi centered at origin\nsingle_gnocchi();",
    "renders": true
  },
  {
    "food_item": "tortilla",
    "openscad_code": "// Realistic 3D Printable Tortilla\n// Medium complexity with surface texture and proper proportions\n\n// Main tortilla parameters\nt_diameter = 80;          // 80mm diameter\nt_thickness = 2.5;        // 2.5mm thickness\nedge_thickness = 1.8;     // Thinner at edges\n\n// Color definitions\ntortilla_color = \"#E8D4B0\";  // Warm wheat color\ntoasted_color = \"#C8A882\";   // Lightly toasted areas\n\n// Generate random seed for consistent texture\nseed = 42;\n\n// Main module for the tortilla\nmodule tortilla() {\n    // Base tortilla shape with dome profile\n    difference() {\n        // Main dome shape\n        scale([1, 1, 0.3]) \n            sphere(d = t_diameter, $fn = 64);\n        \n        // Flatten bottom\n        translate([0, 0, -t_thickness])\n            cube([t_diameter * 2, t_diameter * 2, t_thickness * 2], center = true);\n    }\n    \n    // Scale to proper thickness\n    scale([1, 1, t_thickness / (t_diameter * 0.3)])\n        children();\n}\n\n// Surface texture module\nmodule surface_texture() {\n    // Random small bubbles and imperfections\n    for(i = [0:50]) {\n        // Random positioning using seed\n        angle = (i * 137.5 + seed) % 360;\n        radius = (i * 7.3 + seed) % (t_diameter/2 - 5);\n        \n        translate([\n            cos(angle) * radius,\n            sin(angle) * radius,\n            1.2\n        ]) {\n            // Small raised bubbles\n            scale([1, 1, 0.3])\n                sphere(d = 1.5 + (i % 3) * 0.3, $fn = 8);\n        }\n    }\n    \n    // Light grill marks\n    for(i = [0:15]) {\n        angle = i * 24;\n        translate([0, 0, 1.1])\n            rotate([0, 0, angle])\n            translate([0, -t_diameter/2, 0])\n            cube([t_diameter/2, 0.5, 0.2]);\n    }\n}\n\n// Edge detail for realistic rolled edges\nmodule edge_detail() {\n    // Slightly thicker edge with gentle roll\n    for(i = [0:72]) {\n        angle = i * 5;\n        translate([\n            cos(angle) * (t_diameter/2 - 1),\n            sin(angle) * (t_diameter/2 - 1),\n            0\n        ]) {\n            rotate([0, 0, angle + 90])\n            scale([1, 0.3, 0.5])\n            cylinder(h = 2, d = 2.5, $fn = 8);\n        }\n    }\n}\n\n// Main assembly\ncolor(tortilla_color) {\n    // Base tortilla\n    tortilla() {\n        // Apply toasted color variations\n        color(toasted_color) {\n            surface_texture();\n        }\n        \n        // Edge details\n        edge_detail();\n    }\n}\n\n// Bottom surface with slight texture\ntranslate([0, 0, -t_thickness/2]) {\n    color(tortilla_color) {\n        difference() {\n            cylinder(h = t_thickness/2, d = t_diameter, $fn = 64);\n            \n            // Light indentations on bottom\n            for(i = [0:20]) {\n                angle = (i * 73.2 + seed) % 360;\n                radius = (i * 4.7 + seed) % (t_diameter/2 - 8);\n                \n                translate([\n                    cos(angle) * radius,\n                    sin(angle) * radius,\n                    -0.1\n                ]) {\n                    sphere(d = 2 + (i % 4), $fn = 6);\n                }\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "food_item": "roti",
    "openscad_code": "// Roti - Indian flatbread\n// Realistic style with medium complexity\n// Overall diameter: 80mm, thickness: 5mm\n\n// Main roti disk with slight dome shape\nmodule roti_body() {\n    color(\"wheat\") {\n        difference() {\n            // Main disk with curved top\n            union() {\n                cylinder(h=3, d=80, $fn=100);\n                translate([0, 0, 3]) cylinder(h=2, d1=80, d2=78, $fn=100);\n            }\n            \n            // Center depression\n            translate([0, 0, -0.1]) cylinder(h=3.2, d=20, $fn=50);\n        }\n    }\n}\n\n// Create puffed bubbles on surface\nmodule bubbles() {\n    color(\"burlywood\") {\n        for(i = [0:5:360]) {\n            for(r = [25:10:38]) {\n                rx = r * cos(i);\n                ry = r * sin(i);\n                if((rx^2 + ry^2) < 38^2) {\n                    translate([rx, ry, 5]) sphere(d=rand(2, 5), $fn=12);\n                }\n            }\n        }\n    }\n}\n\n// Function for random size variation\nfunction rand(min, max) = min + (max - min) * (rands(0, 1, 1)[0]);\n\n// Surface texture - light grill marks\nmodule grill_marks() {\n    color(\"tan\") {\n        for(i = [0:8]) {\n            rotate([0, 0, i * 22.5]) {\n                translate([0, -42, 5]) cube([1, 84, 0.2]);\n            }\n        }\n        \n        for(i = [0:8]) {\n            rotate([0, 0, i * 22.5 + 11.25]) {\n                translate([0, -42, 5.1]) cube([0.5, 84, 0.1]);\n            }\n        }\n    }\n}\n\n// Edge irregularities for handmade look\nmodule edge_variations() {\n    color(\"wheat\") {\n        for(i = [0:2:360]) {\n            angle = i;\n            radius = 40 + rand(-1.5, 1.5);\n            x = radius * cos(angle);\n            y = radius * sin(angle);\n            \n            translate([x, y, 0]) {\n                cylinder(h=5, d=rand(3, 5), $fn=8);\n            }\n        }\n    }\n}\n\n// Small brown spots from cooking\nmodule cooking_spots() {\n    color(\"saddlebrown\") {\n        for(i = [0:15]) {\n            angle = rand(0, 360);\n            dist = rand(0, 35);\n            x = dist * cos(angle);\n            y = dist * sin(angle);\n            \n            translate([x, y, 5.1]) sphere(d=rand(1.5, 3), $fn=6);\n        }\n    }\n}\n\n// Combine all elements\nunion() {\n    roti_body();\n    edge_variations();\n    bubbles();\n    grill_marks();\n    cooking_spots();\n}",
    "renders": true
  },
  {
    "food_item": "naan",
    "openscad_code": "// Realistic Naan Bread - Medium Complexity\n// 3D printable with proper wall thickness\n\n// Main parameters\nnaan_length = 85;\nnaan_width = 65;\nnaan_thickness = 8;\nchar_thickness = 2;\nseed_count = 45;\n\n// Base naan body with organic teardrop shape\nmodule base_naan() {\n    // Main body - elongated teardrop\n    difference() {\n        hull() {\n            // Front rounded section\n            translate([naan_length/2 - 15, 0, 0])\n                scale([1.2, 1, 0.5])\n                sphere(d=naan_width, $fn=32);\n            \n            // Back tapered section\n            translate([-naan_length/2 + 10, 0, 0])\n                scale([0.8, 0.9, 0.4])\n                sphere(d=naan_width * 0.7, $fn=32);\n        }\n        \n        // Hollow out for 3D printing\n        translate([0, 0, -1])\n            scale([0.85, 0.85, 0.5])\n            hull() {\n                translate([naan_length/2 - 15, 0, 0])\n                    scale([1.2, 1, 0.5])\n                    sphere(d=naan_width, $fn=32);\n                translate([-naan_length/2 + 10, 0, 0])\n                    scale([0.8, 0.9, 0.4])\n                    sphere(d=naan_width * 0.7, $fn=32);\n            }\n    }\n}\n\n// Charred spots for realistic texture\nmodule char_spots() {\n    for(i = [0:20]) {\n        random_x = rands(-naan_length/2 + 10, naan_length/2 - 10, 1)[0];\n        random_y = rands(-naan_width/2 + 10, naan_width/2 - 10, 1)[0];\n        random_size = rands(2, 5, 1)[0];\n        \n        translate([random_x, random_y, naan_thickness - 1])\n            color([0.1, 0.1, 0.1])\n            cylinder(h=char_thickness, d=random_size, $fn=12);\n    }\n}\n\n// Nigella seeds (kalonji) - typical naan topping\nmodule seeds() {\n    for(i = [0:seed_count]) {\n        angle = i * 137.5; // Golden angle for natural distribution\n        radius = sqrt(i) * 3; // Spiral pattern\n        \n        x_pos = cos(angle) * radius * 0.8;\n        y_pos = sin(angle) * radius * 0.7;\n        \n        // Keep seeds within naan bounds\n        if(abs(x_pos) < naan_length/2 - 5 && abs(y_pos) < naan_width/2 - 5) {\n            translate([x_pos, y_pos, naan_thickness])\n                color([0.05, 0.05, 0.05])\n                scale([0.8, 0.8, 0.4])\n                sphere(d=1.5, $fn=8);\n        }\n    }\n}\n\n// Air bubbles and dimples for realistic texture\nmodule air_bubbles() {\n    for(i = [0:30]) {\n        bubble_x = rands(-naan_length/2 + 5, naan_length/2 - 5, 1)[0];\n        bubble_y = rands(-naan_width/2 + 5, naan_width/2 - 5, 1)[0];\n        bubble_size = rands(1, 3, 1)[0];\n        \n        translate([bubble_x, bubble_y, naan_thickness - 0.5])\n            color([0.4, 0.25, 0.15])\n            difference() {\n                sphere(d=bubble_size * 2, $fn=16);\n                translate([0, 0, -bubble_size])\n                    cube([bubble_size * 4, bubble_size * 4, bubble_size * 2], center=true);\n            }\n    }\n}\n\n// Edge details - slightly burnt and irregular\nmodule edge_browning() {\n    hull() {\n        for(i = [0:35]) {\n            angle = i * 10.28;\n            edge_x = cos(angle) * (naan_length/2 + 2);\n            edge_y = sin(angle) * (naan_width/2 + 2);\n            \n            translate([edge_x * 0.9, edge_y * 0.7, naan_thickness/2])\n                color([0.3, 0.15, 0.08])\n                sphere(d=2 + sin(i*3)*0.5, $fn=8);\n        }\n    }\n}\n\n// Main assembly\ncolor([0.82, 0.65, 0.45]) base_naan();\ncolor([0.3, 0.15, 0.08]) edge_browning();\nchar_spots();\nseeds();\nair_bubbles();",
    "renders": true
  },
  {
    "food_item": "pita",
    "openscad_code": "// Realistic Pita Bread - Medium Complexity\n// Approximately 80mm diameter, 15mm thick\n\n// Main pita disc with realistic puffing\nmodule pita_disc() {\n    // Base flat disc with slight dome\n    difference() {\n        // Main pita body\n        union() {\n            // Bottom flat part\n            translate([0, 0, 2])\n                cylinder(h = 8, r = 40, $fn = 64);\n            \n            // Slightly domed top\n            scale([1, 1, 0.3])\n                translate([0, 0, 26.6])\n                    sphere(r = 40, $fn = 64);\n        }\n        \n        // Pocket cavity inside\n        translate([0, 0, -1])\n            cylinder(h = 15, r = 35, $fn = 64);\n        \n        // Pocket opening slit\n        translate([0, -20, 10])\n            cube([30, 40, 5], center = true);\n    }\n}\n\n// Seeded surface texture\nmodule seeds() {\n    color(\"saddlebrown\")\n    for(i = [0:45]) {\n        rotate([0, 0, i * 8 + (i % 2) * 4])\n            translate([38 - (i % 3), 0, 12])\n                rotate([90, 0, 0])\n                    cylinder(h = 0.8, r = 0.8, $fn = 8);\n    }\n}\n\n// Surface bubbles from baking\nmodule bubbles() {\n    color(\"burlywood\")\n    for(i = [0:25]) {\n        a = i * 137.5;\n        r = 30 * sqrt(i/25);\n        translate([r * cos(a), r * sin(a), 12 + sin(i * 0.5) * 2])\n            sphere(r = 1.5 + (i % 3) * 0.5, $fn = 16);\n    }\n}\n\n// Crispy edge detail\nmodule edges() {\n    difference() {\n        color(\"tan\")\n        translate([0, 0, 8])\n            cylinder(h = 4, r = 40.5, $fn = 128);\n        \n        translate([0, 0, 7.9])\n            cylinder(h = 4.2, r = 39.5, $fn = 128);\n    }\n}\n\n// Bottom texture rings\nmodule bottom_rings() {\n    color(\"wheat\")\n    for(i = [1:5]) {\n        translate([0, 0, 2.1])\n            difference() {\n                cylinder(h = 0.3, r = 40 - i * 6, $fn = 64);\n                cylinder(h = 0.4, r = 40 - i * 6 - 1, $fn = 64);\n            }\n    }\n}\n\n// Main assembly\npita_disc();\nseeds();\nbubbles();\nedges();\nbottom_rings();",
    "renders": true
  },
  {
    "food_item": "chapati",
    "openscad_code": "// Chapati (Indian flatbread) - realistic style, medium complexity\n// Diameter: 80mm, Thickness: 4mm (center) to 5mm (edge)\n\n// Main parameters\nchapati_diameter = 80;\nchapati_thickness = 4;\nedge_lift = 1.5;\ntexture_depth = 0.3;\nchar_spots = 10;\n\n// Main chapati body with slightly raised edges\nmodule chapati_body() {\n    difference() {\n        // Base disc with convex top\n        scale([1, 1, 0.3])\n        sphere(d = chapati_diameter, $fn = 100);\n        \n        // Flatten bottom\n        translate([0, 0, -chapati_thickness/2])\n        cube([chapati_diameter*2, chapati_diameter*2, chapati_thickness], center = true);\n        \n        // Create slight dome shape\n        translate([0, 0, -0.5])\n        scale([1, 1, 0.2])\n        sphere(d = chapati_diameter*0.9, $fn = 100);\n    }\n}\n\n// Random char spots for realistic appearance\nmodule char_spots() {\n    for(i = [1:char_spots]) {\n        // Random positions using golden ratio for natural distribution\n        angle = i * 137.508;\n        radius = pow(i/char_spots, 0.7) * chapati_diameter * 0.45;\n        \n        translate([\n            cos(angle) * radius,\n            sin(angle) * radius,\n            chapati_thickness - texture_depth\n        ]) {\n            // Dark char spots\n            color([0.3, 0.2, 0.15])\n            scale([1, 1, 0.1])\n            sphere(d = 2 + (i % 3), $fn = 20);\n        }\n    }\n}\n\n// Chapati surface texture - small bubbles and irregularities\nmodule surface_texture() {\n    // Radial lines from center\n    for(angle = [0:30:359]) {\n        rotate([0, 0, angle]) {\n            for(r = [5:7:chapati_diameter/2 - 5]) {\n                translate([r, 0, chapati_thickness - texture_depth/2])\n                scale([1, 0.3, 0.1])\n                sphere(d = 0.5 + r % 1.5, $fn = 8);\n            }\n        }\n    }\n    \n    // Random small bubbles\n    for(i = [1:50]) {\n        angle = i * 73.156;\n        radius = (i % 7) * chapati_diameter * 0.07;\n        \n        translate([\n            cos(angle) * radius,\n            sin(angle) * radius,\n            chapati_thickness - texture_depth/2 - (i % 3) * 0.1\n        ]) {\n            color([0.8, 0.6, 0.4])\n            sphere(d = 0.3 + (i % 4) * 0.2, $fn = 6);\n        }\n    }\n}\n\n// Edge detail - slightly thicker and irregular\nmodule chapati_edge() {\n    // Main edge ring\n    translate([0, 0, -0.2])\n    difference() {\n        cylinder(h = edge_lift, d = chapati_diameter, $fn = 100);\n        cylinder(h = edge_lift + 0.1, d = chapati_diameter - 1, $fn = 100);\n    }\n    \n    // Small edge irregularities\n    for(i = [1:20]) {\n        angle = i * 18 + (i % 3) * 2;\n        radius = chapati_diameter/2 + 0.2;\n        \n        translate([\n            cos(angle) * radius,\n            sin(angle) * radius,\n            0\n        ]) {\n            rotate([0, 0, angle + 90])\n            translate([0, 0, edge_lift/2])\n            cube([0.5, 0.8, edge_lift]);\n        }\n    }\n}\n\n// Assembly\ncolor([0.92, 0.78, 0.55])  // Wheat/brown color\nunion() {\n    chapati_body();\n    \n    color([0.85, 0.7, 0.5])\n    translate([0, 0, -0.1])\n    chapati_edge();\n    \n    char_spots();\n    surface_texture();\n}",
    "renders": true
  },
  {
    "food_item": "injera",
    "openscad_code": "// Injera - Ethiopian sourdough flatbread with realistic teff texture\n// Designed for 3D printing with 1.2mm wall thickness\n\n// Main parameters\ninjera_diameter = 80;           // 80mm diameter\ninjera_thickness = 3;           // 3mm thick for printing stability\nedge_thickness = 1.2;          // Thin edge for realistic profile\npore_size = 1.5;               // Size of fermentation bubbles\npore_density = 0.7;            // Density of bubbles (0-1)\n\n// Color definitions\ninjera_color = [0.6, 0.4, 0.25];  // Light brown teff color\n\n// Main injera base with slight dome shape\nmodule injera_base() {\n    color(injera_color) {\n        // Create dome-shaped base using scaled sphere section\n        difference() {\n            scale([1, 1, 0.3])\n                sphere(d = injera_diameter, $fn = 100);\n            \n            // Flatten bottom\n            translate([0, 0, -injera_thickness/2])\n                cube([injera_diameter*2, injera_diameter*2, injera_thickness], center = true);\n        }\n    }\n}\n\n// Create realistic teff grain texture pattern\nmodule teff_texture() {\n    // Random seed for consistent texture\n    seed = 42;\n    \n    // Generate random pores across surface\n    for(i = [0:200]) {\n        // Random position on injera surface\n        angle = rands(0, 360, 1, seed + i)[0];\n        radius = rands(0, injera_diameter/2 - 5, 1, seed + i + 100)[0];\n        x = cos(angle) * radius;\n        y = sin(angle) * radius;\n        \n        // Vary pore size slightly\n        current_pore = rands(pore_size*0.7, pore_size*1.3, 1, seed + i + 200)[0];\n        \n        // Only place pores with certain density\n        if(rands(0, 1, 1, seed + i + 300)[0] < pore_density) {\n            translate([x, y, injera_thickness/2 + 0.5])\n                sphere(d = current_pore, $fn = 8);\n        }\n    }\n}\n\n// Create characteristic injera edge with slight lip\nmodule injera_edge() {\n    color(injera_color) {\n        difference() {\n            // Outer edge ring\n            cylinder(h = edge_thickness*2, d = injera_diameter, $fn = 100);\n            \n            // Inner cutout for thin edge\n            cylinder(h = edge_thickness*2 + 0.1, d = injera_diameter - 4, $fn = 100);\n        }\n        \n        // Slight lip on top edge\n        translate([0, 0, edge_thickness*2])\n            cylinder(h = 0.5, d1 = injera_diameter, d2 = injera_diameter - 1, $fn = 100);\n    }\n}\n\n// Main assembly\nunion() {\n    // Base injera\n    injera_base();\n    \n    // Edge detail\n    injera_edge();\n    \n    // Surface texture (subtractive)\n    color(injera_color) {\n        difference() {\n            translate([0, 0, injera_thickness/2 + 0.1])\n                cylinder(h = 1, d = injera_diameter - 4, $fn = 100);\n            \n            // Apply teff texture as indentations\n            translate([0, 0, -0.2])\n                teff_texture();\n        }\n    }\n    \n    // Add some larger fermentation bubbles\n    color(injera_color) {\n        for(i = [0:15]) {\n            angle = rands(0, 360, 1, seed + i + 400)[0];\n            radius = rands(injera_diameter/4, injera_diameter/2 - 8, 1, seed + i + 500)[0];\n            x = cos(angle) * radius;\n            y = sin(angle) * radius;\n            \n            translate([x, y, injera_thickness/2])\n                sphere(d = rands(2.5, 4, 1, seed + i + 600)[0], $fn = 12);\n        }\n    }\n}",
    "renders": true
  },
  {
    "food_item": "matzo",
    "openscad_code": "// Realistic 3D printable matzo\n// Size ~80x70x3 mm\n// Medium complexity\n\n// Main parameters\nmatzo_width = 80;\nmatzo_height = 70;\nmatzo_thickness = 3;\n\n// Surface texture parameters\nbubble_size = 1.5;\nbubble_depth = 0.4;\nbubble_rows = 12;\nbubble_cols = 8;\n\n// Crack parameters\ncrack_width = 0.6;\ncrack_depth = 1.5;\n\n// Color definitions\nmatzo_color = [235/255, 215/255, 180/255];  // Light brown/beige\n\n// Main matzo body\nmodule matzo_body() {\n    difference() {\n        // Main flat cracker\n        color(matzo_color)\n        cube([matzo_width, matzo_height, matzo_thickness], center = true);\n        \n        // Rounded edges\n        translate([0, 0, -matzo_thickness/2 - 0.1])\n        cylinder(h = matzo_thickness + 0.2, r1 = matzo_width/2 - 2, r2 = matzo_width/2 - 2, $fn = 64);\n        \n        // Edge rounding along width\n        for(side = [-1, 1]) {\n            translate([0, side * matzo_height/2, 0])\n            rotate([90, 0, 0])\n            cylinder(h = matzo_width - 4, r = 2, $fn = 32);\n            \n            translate([side * matzo_width/2, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h = matzo_height - 4, r = 2, $fn = 32);\n        }\n    }\n}\n\n// Surface bubbles (characteristic of matzo)\nmodule surface_bubbles() {\n    for(i = [0:bubble_rows - 1]) {\n        for(j = [0:bubble_cols - 1]) {\n            x_pos = -matzo_width/2 + 5 + i * (matzo_width - 10) / (bubble_rows - 1);\n            y_pos = -matzo_height/2 + 5 + j * (matzo_height - 10) / (bubble_cols - 1);\n            \n            // Random offset to avoid perfect grid\n            offset = (i * 3 + j * 7) % 3 - 1.5;\n            \n            translate([x_pos + offset, y_pos + offset/2, matzo_thickness/2 - bubble_depth/2])\n            sphere(d = bubble_size, $fn = 16);\n        }\n    }\n}\n\n// Crack pattern\nmodule crack_pattern() {\n    // Main diagonal crack\n    difference() {\n        cube([matzo_width, matzo_height, matzo_thickness], center = true);\n        \n        color([0.8, 0.7, 0.6])\n        translate([0, 0, -matzo_thickness/2 - 0.1])\n        rotate([0, 0, 35])\n        cube([matzo_width * 1.5, crack_width, matzo_thickness + 0.2], center = true);\n    }\n    \n    // Branching cracks\n    for(i = [0:3]) {\n        angle = 35 + (i - 1.5) * 20;\n        length = matzo_width * 0.4;\n        \n        difference() {\n            cube([matzo_width, matzo_height, matzo_thickness], center = true);\n            \n            translate([5 - i * 10, 5, -matzo_thickness/2 - 0.1])\n            rotate([0, 0, angle])\n            cube([length, crack_width, matzo_thickness + 0.2], center = true);\n        }\n    }\n}\n\n// Edge imperfections\nmodule edge_imperfections() {\n    for(i = [0:5]) {\n        angle = i * 60;\n        x = cos(angle) * (matzo_width/2 - 2);\n        y = sin(angle) * (matzo_height/2 - 2);\n        \n        translate([x, y, 0])\n        rotate([0, 0, angle])\n        difference() {\n            cube([matzo_width, matzo_height, matzo_thickness], center = true);\n            \n            translate([0, 0, -matzo_thickness/2 - 0.1])\n            rotate([0, 0, 45])\n            cube([8, 2, matzo_thickness + 0.2], center = true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main matzo\n    matzo_body();\n    \n    // Surface details\n    difference() {\n        matzo_body();\n        \n        // Indentations for bubbles\n        translate([0, 0, -matzo_thickness/2 + bubble_depth/2])\n        surface_bubbles();\n    }\n    \n    // Crack pattern overlay\n    crack_pattern();\n    \n    // Edge details\n    edge_imperfections();\n}",
    "renders": true
  },
  {
    "food_item": "crouton",
    "openscad_code": "// Realistic Crouton Model\n// Medium complexity with bread texture and golden-brown coloring\n\n// Main parameters\ncrouton_length = 45;\ncrouton_width = 25;\ncrouton_height = 18;\nedge_radius = 3;\ntexture_depth = 0.8;\n\n// Color definitions\nbread_color = [0.82, 0.65, 0.42];      // Golden brown\ndarker_color = [0.75, 0.58, 0.35];    // Darker toasted areas\n\n// Create main crouton body with rounded edges\nmodule crouton_body() {\n    color(bread_color) {\n        // Base rectangular shape with rounded edges\n        hull() {\n            // Bottom corners\n            translate([edge_radius, edge_radius, 0]) \n                sphere(r=edge_radius, $fn=8);\n            translate([crouton_length-edge_radius, edge_radius, 0]) \n                sphere(r=edge_radius, $fn=8);\n            translate([edge_radius, crouton_width-edge_radius, 0]) \n                sphere(r=edge_radius, $fn=8);\n            translate([crouton_length-edge_radius, crouton_width-edge_radius, 0]) \n                sphere(r=edge_radius, $fn=8);\n                \n            // Top corners\n            translate([edge_radius, edge_radius, crouton_height]) \n                sphere(r=edge_radius, $fn=8);\n            translate([crouton_length-edge_radius, edge_radius, crouton_height]) \n                sphere(r=edge_radius, $fn=8);\n            translate([edge_radius, crouton_width-edge_radius, crouton_height]) \n                sphere(r=edge_radius, $fn=8);\n            translate([crouton_length-edge_radius, crouton_width-edge_radius, crouton_height]) \n                sphere(r=edge_radius, $fn=8);\n        }\n    }\n}\n\n// Create bread crust texture on surface\nmodule surface_texture() {\n    difference() {\n        // Base shape\n        crouton_body();\n        \n        // Random holes for bread texture\n        for (i = [0:30]) {\n            translate([\n                crouton_length * (0.1 + 0.8 * rands(0, 1, 1)[0]),\n                crouton_width * (0.1 + 0.8 * rands(0, 1, 1)[0]),\n                crouton_height * (0.1 + 0.8 * rands(0, 1, 1)[0])\n            ]) {\n                sphere(r=texture_depth * (0.5 + rands(0, 1, 1)[0]), $fn=6);\n            }\n        }\n    }\n}\n\n// Add baked surface details\nmodule baked_details() {\n    // Darker toasted spots\n    for (i = [0:15]) {\n        color(darker_color) {\n            translate([\n                crouton_length * (0.1 + 0.8 * rands(0, 1, 1)[0]),\n                crouton_width * (0.1 + 0.8 * rands(0, 1, 1)[0]),\n                crouton_height * rands(0.9, 1, 1)[0]\n            ]) {\n                scale([1.5, 1.5, 0.3]) \n                    sphere(r=texture_depth * 0.8, $fn=8);\n            }\n        }\n    }\n    \n    // Crispy edges\n    color(darker_color) {\n        translate([crouton_length/2, crouton_width/2, crouton_height/2]) {\n            rotate([0, 0, 45])\n                cube([crouton_length*1.2, crouton_width*0.2, crouton_height*1.2], center=true);\n        }\n    }\n}\n\n// Create irregular top surface for realistic appearance\nmodule irregular_top() {\n    difference() {\n        surface_texture();\n        \n        // Cut irregular top surface\n        for (x = [0:5:crouton_length]) {\n            for (y = [0:5:crouton_width]) {\n                height = crouton_height - 2 * sin(x/3) * cos(y/3);\n                translate([x, y, height]) {\n                    cube([6, 6, 5], center=true);\n                }\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Base crouton with texture\n    irregular_top();\n    \n    // Add baked surface details\n    baked_details();\n    \n    // Add some bread crumbs on surface\n    for (i = [0:8]) {\n        translate([\n            crouton_length * (0.2 + 0.6 * rands(0, 1, 1)[0]),\n            crouton_width * (0.2 + 0.6 * rands(0, 1, 1)[0]),\n            crouton_height + 0.5\n        ]) {\n            color(bread_color) {\n                sphere(r=0.5 + rands(0, 1, 1)[0], $fn=6);\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "food_item": "biscuit",
    "openscad_code": "// Golden butter biscuit with realistic details\n// Overall dimensions: ~75mm diameter, ~10mm thick\n\ncolor([0.9, 0.7, 0.45])  // Warm golden-brown color\n\n// Main biscuit disc with slightly domed top\ndifference() {\n    union() {\n        // Base biscuit disc\n        cylinder(h = 8, d = 75, $fn = 64);\n        \n        // Slightly domed top\n        translate([0, 0, 8])\n            scale([1, 1, 0.3])\n                sphere(d = 75, $fn = 64);\n    }\n    \n    // Fluted edge pattern - creates scalloped rim\n    for (i = [0 : 15]) {\n        rotate([0, 0, i * 22.5])\n            translate([37.5, 0, -1])\n                cube([6, 3, 12], center = true);\n    }\n}\n\n// Surface texture - small holes and cracks\ndifference() {\n    union() {\n        // Main biscuit body from above\n        translate([0, 0, -0.1])\n            cylinder(h = 10.2, d = 75, $fn = 64);\n    }\n    \n    // Docking holes (steam vents)\n    for (x = [-25 : 12.5 : 25]) {\n        for (y = [-25 : 12.5 : 25]) {\n            if (sqrt(x*x + y*y) < 30) {\n                translate([x, y, 0])\n                    cylinder(h = 12, d = 3, $fn = 16);\n            }\n        }\n    }\n    \n    // Small cracks for texture\n    for (i = [0 : 20]) {\n        a = rands(0, 360, 1)[0];\n        r = rands(5, 32, 1)[0];\n        translate([r * cos(a), r * sin(a), 0])\n            rotate([0, 0, a + 90])\n                cube([rands(5, 12, 1)[0], 0.5, 12], center = true);\n    }\n}\n\n// Bottom surface with maker's mark pattern\ntranslate([0, 0, 0.1])\n    color([0.8, 0.6, 0.4])\n    difference() {\n        cylinder(h = 1, d = 65, $fn = 64);\n        \n        // Hexagonal pattern on bottom\n        for (x = [-20 : 7 : 20]) {\n            for (y = [-20 : 7 : 20]) {\n                if (sqrt(x*x + y*y) < 30) {\n                    translate([x, y, -0.5])\n                        cylinder(h = 2, d = 4, $fn = 6);\n                }\n            }\n        }\n    }\n\n// Slight random variations for realistic look\nmodule surface_variation(x, y, height) {\n    translate([x, y, height + rands(-0.3, 0.3, 1)[0]])\n        sphere(d = rands(1.5, 3, 1)[0], $fn = 8);\n}\n\n// Add subtle surface bumps for texture\nfor (i = [0 : 40]) {\n    a = rands(0, 360, 1)[0];\n    r = rands(5, 34, 1)[0];\n    surface_variation(\n        r * cos(a),\n        r * sin(a),\n        9.5\n    );\n}",
    "renders": true
  },
  {
    "food_item": "cracker",
    "openscad_code": "// Realistic Cracker - Saltine Style\n// Dimensions: 50mm x 50mm x 5mm\n\n$fn = 32;\n\n// Main cracker body\nmodule cracker_body() {\n    difference() {\n        // Base cracker shape with rounded edges\n        translate([0, 0, 2.5])\n            minkowski() {\n                cube([46, 46, 4], center=true);\n                sphere(1.5);\n            }\n        \n        // Docking holes pattern\n        for(x = [-20:10:20])\n            for(y = [-20:10:20])\n                translate([x, y, 2.5])\n                    cylinder(h=6, r=2);\n    }\n}\n\n// Surface texture pattern\nmodule cracker_texture() {\n    // Raised grid pattern\n    for(x = [-22:2:22])\n        for(y = [-22:2:22]) {\n            if(abs(x) < 20 && abs(y) < 20) {\n                translate([x, y, 4.5])\n                    cube([1.2, 1.2, 0.3], center=true);\n            }\n        }\n    \n    // Diagonal scratches for baked appearance\n    for(i = [-20:1:20]) {\n        rotate([0, 0, 45])\n            translate([i, 0, 4.6])\n                cube([0.5, 50, 0.2], center=true);\n    }\n}\n\n// Salt crystals\nmodule salt_crystals() {\n    random_seed = 42;\n    for(i = [1:1:30]) {\n        x = rands(-23, 23, 1)[0];\n        y = rands(-23, 23, 1)[0];\n        z = 4.8;\n        \n        translate([x, y, z])\n            scale([0.8, 0.8, 0.5])\n                sphere(0.5);\n    }\n}\n\n// Edge perforations\nmodule edge_perforations() {\n    // Top edge\n    for(x = [-20:2:20])\n        translate([x, 25, 2.5])\n            cylinder(h=5, r=0.8);\n    \n    // Bottom edge\n    for(x = [-20:2:20])\n        translate([x, -25, 2.5])\n            cylinder(h=5, r=0.8);\n    \n    // Left edge\n    for(y = [-20:2:20])\n        translate([-25, y, 2.5])\n            cylinder(h=5, r=0.8);\n    \n    // Right edge\n    for(y = [-20:2:20])\n        translate([25, y, 2.5])\n            cylinder(h=5, r=0.8);\n}\n\n// Small cracks for realism\nmodule cracks() {\n    difference() {\n        cube([0, 0, 0]); // Placeholder for union\n        \n        // Random small cracks\n        translate([10, 5, 2.5])\n            rotate([0, 0, 30])\n                cube([8, 0.3, 5], center=true);\n        \n        translate([-8, -12, 2.5])\n            rotate([0, 0, -45])\n                cube([6, 0.3, 5], center=true);\n        \n        translate([-15, 15, 2.5])\n            rotate([0, 0, 15])\n                cube([5, 0.3, 5], center=true);\n    }\n}\n\n// Assemble the cracker\ncolor([0.95, 0.85, 0.75]) {\n    union() {\n        cracker_body();\n        \n        // Add texture on top surface only\n        color([0.9, 0.82, 0.7]) {\n            cracker_texture();\n            salt_crystals();\n            edge_perforations();\n        }\n        \n        // Add subtle cracks\n        color([0.85, 0.75, 0.65]) {\n            cracks();\n        }\n    }\n}",
    "renders": true
  },
  {
    "food_item": "croissant",
    "openscad_code": "// Realistic Croissant - Medium Complexity\n// Size: ~75mm length, ~40mm width, ~25mm height\n\n$fn = 32;\n\n// Main croissant color - golden brown\ncolor([0.82, 0.65, 0.35]) {\n    // Outer crescent shape - main body\n    difference() {\n        union() {\n            // Crescent body - multiple ellipsoids to form smooth curve\n            rotate([0, 0, -30]) \n                scale([1.2, 1, 0.6]) \n                    sphere(15);\n            \n            translate([5, 8, 0]) \n                rotate([0, 0, -15]) \n                    scale([1.1, 0.9, 0.5]) \n                        sphere(14);\n            \n            translate([10, 12, 0]) \n                rotate([0, 0, 0]) \n                    scale([1, 0.8, 0.4]) \n                        sphere(12);\n            \n            translate([15, 10, 0]) \n                rotate([0, 0, 15]) \n                    scale([0.8, 0.7, 0.3]) \n                        sphere(10);\n        }\n        \n        // Hollow out interior for crescent shape\n        translate([-5, 0, -5]) \n            scale([1.3, 1.2, 1.5]) \n                cube([40, 25, 20], center=true);\n    }\n    \n    // Inner layers - laminated dough effect\n    for(i = [1:3]) {\n        rotate([0, 0, -30 + i*5]) {\n            difference() {\n                scale([1.2 - i*0.1, 1 - i*0.05, 0.6 - i*0.05]) \n                    sphere(15 - i*1.5);\n                \n                translate([-5, 0, -5]) \n                    scale([1.3, 1.2, 1.5]) \n                        cube([40, 25, 20], center=true);\n            }\n        }\n    }\n    \n    // Tapered ends\n    translate([-8, -12, 0]) \n        rotate([0, 0, -45]) \n            scale([0.4, 0.4, 0.3]) \n                cylinder(h=8, r1=4, r2=0);\n    \n    translate([22, 8, 0]) \n        rotate([0, 0, 20]) \n            scale([0.3, 0.3, 0.2]) \n                cylinder(h=6, r1=3, r2=0);\n}\n\n// Surface texture - small bumps for crispy exterior\nmodule surface_bumps() {\n    color([0.78, 0.61, 0.32]) {\n        for(i = [0:15]) {\n            angle = i * 24;\n            radius = 12 + sin(i * 0.5) * 8;\n            for(j = [0:3]) {\n                translate([\n                    cos(angle) * radius + sin(j) * 2,\n                    sin(angle) * radius + cos(j) * 2,\n                    1 + j * 0.5\n                ]) {\n                    scale([1, 1, 0.5]) sphere(0.5 + j * 0.2);\n                }\n            }\n        }\n    }\n}\n\n// Apply surface texture\nsurface_bumps();\n\n// Crescent inner edge detail\ncolor([0.85, 0.68, 0.38]) {\n    for(i = [0:20]) {\n        angle = -30 + i * 3;\n        translate([\n            cos(angle) * 8,\n            sin(angle) * 8 - 2,\n            0.5\n        ]) {\n            rotate([0, 0, angle + 90])\n                scale([0.8, 0.3, 0.2])\n                    cylinder(h=1.5, r=1);\n        }\n    }\n}\n\n// Bottom flat surface for printing\ntranslate([0, 0, -2]) {\n    color([0.75, 0.58, 0.33]) {\n        linear_extrude(height=1) {\n            difference() {\n                circle(r=20);\n                translate([8, 0, 0]) circle(r=10);\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "food_item": "bagel",
    "openscad_code": "// Realistic Bagel - OpenSCAD\n// Medium complexity with seeds and texture\n\n$fn = 64;\n\nmodule bagel_body() {\n    difference() {\n        // Main torus shape\n        rotate_extrude(angle = 360, $fn = 100)\n            translate([30, 0, 0])\n                circle(r = 15);\n        \n        // Center hole\n        rotate_extrude(angle = 360, $fn = 100)\n            translate([30, 0, 0])\n                circle(r = 7);\n    }\n}\n\nmodule seeds(count, size, height) {\n    for(i = [0:count-1]) {\n        angle = i * (360 / count);\n        radius = 30 + 15 * cos(30 * i);\n        \n        rotate([0, 0, angle])\n            translate([radius, 0, height])\n                scale([1, 0.7, 0.4])\n                    sphere(r = size);\n    }\n}\n\nmodule surface_texture() {\n    // Small bumps on surface\n    for(angle = [0:15:359]) {\n        for(h = [-10:5:10]) {\n            rotate([0, 0, angle])\n                translate([30 + 15 * cos(angle), 15 * sin(angle), h])\n                    sphere(r = 0.5);\n        }\n    }\n}\n\nmodule bagel() {\n    color(\"#C4A484\") {\n        union() {\n            bagel_body();\n            \n            // Top seeds - sesame\n            color(\"#F5DEB3\") {\n                seeds(20, 2, 12);\n            }\n            \n            // Bottom seeds - poppy\n            color(\"#1C1C1C\") {\n                seeds(25, 1.5, -12);\n            }\n            \n            // Side seeds\n            color(\"#F5DEB3\") {\n                for(angle = [0:30:359]) {\n                    rotate([0, 0, angle])\n                        translate([45, 0, 0])\n                            rotate([0, 90, 0])\n                                seeds(8, 1.8, 0);\n                }\n            }\n        }\n    }\n    \n    // Inner surface texture\n    color(\"#D2B48C\") {\n        surface_texture();\n    }\n}\n\n// Display the bagel\nrotate([90, 0, 0])\n    bagel();",
    "renders": true
  },
  {
    "food_item": "muffin",
    "openscad_code": "// Realistic Muffin - Medium Complexity OpenSCAD Model\n// Features: textured top, paper cup, blueberries, 3D printable\n\n// Overall dimensions: ~60mm height x 50mm diameter\n\nmodule muffin_top() {\n    // Main muffin top with realistic bulge\n    translate([0, 0, 35]) {\n        scale([1, 1, 0.7])\n            sphere(d=50, $fn=60);\n    }\n    \n    // Add surface texture with small spheres for crumb texture\n    for (i = [0:30]) {\n        rotate([rand(0,360), rand(0,360), rand(0,360)])\n            translate([rand(-20,20), rand(-20,20), rand(30,45)])\n                sphere(d=rand(2,4), $fn=8);\n    }\n}\n\nmodule paper_cup() {\n    // Tapered paper cup with pleats\n    color([0.95, 0.9, 0.85]) {\n        // Main cup body\n        cylinder(h1=35, h2=30, r1=25, r2=20, $fn=36);\n        \n        // Add pleats around the cup\n        for (i = [0:17]) {\n            rotate([0, 0, i*20]) {\n                translate([22, 0, 0])\n                    rotate([0, 90, 0])\n                        cylinder(h=35, r=0.5, $fn=6);\n            }\n        }\n        \n        // Cup rim lip\n        translate([0, 0, 35])\n            cylinder(h=2, r1=26, r2=24, $fn=36);\n    }\n}\n\nmodule blueberries() {\n    // Randomly placed blueberries in muffin\n    color([0.2, 0.2, 0.6]) {\n        for (i = [0:8]) {\n            translate([rand(-15,15), rand(-15,15), rand(20,40)])\n                sphere(d=rand(4,6), $fn=8);\n        }\n    }\n}\n\nmodule muffin_base() {\n    // Muffin base filling the cup\n    color([0.82, 0.65, 0.45]) {\n        cylinder(h=30, r1=20, r2=22, $fn=36);\n    }\n}\n\n// Assemble the complete muffin\nunion() {\n    // Paper cup first\n    paper_cup();\n    \n    // Muffin base\n    muffin_base();\n    \n    // Add blueberries\n    blueberries();\n    \n    // Muffin top\n    color([0.78, 0.6, 0.4])\n        muffin_top();\n}",
    "renders": true
  },
  {
    "food_item": "pancake",
    "openscad_code": "// Realistic Pancake Stack - Medium Complexity\n// Features: 3 pancakes with butter pat, syrup drips, and textured surface\n\n$fn = 64;\n\n// Main colors\npancake_color = \"#D2B48C\";\nbutter_color = \"#F5DEB3\";\nsyrup_color = \"#8B4513\";\n\nmodule pancake_stack() {\n    // Base pancake 1 (bottom)\n    translate([0, 0, 2]) \n        color(pancake_color)\n        cylinder(h = 4, r1 = 25, r2 = 23, $fn = 64);\n    \n    // Add surface texture to pancake 1\n    for(i = [0:15]) {\n        rotate([0, 0, i * 24])\n            translate([20 + sin(i * 3) * 2, 0, 6])\n                sphere(d = 1.5, $fn = 16);\n    }\n    \n    // Pancake 2 (middle)\n    translate([0, 0, 8])\n        color(pancake_color)\n        cylinder(h = 3.5, r1 = 24, r2 = 22, $fn = 64);\n    \n    // Add surface texture to pancake 2\n    for(i = [0:12]) {\n        rotate([0, 0, i * 30])\n            translate([18 + sin(i * 2.5) * 1.5, 0, 11.5])\n                sphere(d = 1.2, $fn = 16);\n    }\n    \n    // Pancake 3 (top)\n    translate([0, 0, 13.5])\n        color(pancake_color)\n        cylinder(h = 3, r1 = 23, r2 = 21, $fn = 64);\n    \n    // Add surface texture to pancake 3\n    for(i = [0:10]) {\n        rotate([0, 0, i * 36])\n            translate([16 + sin(i * 2) * 1, 0, 16.5])\n                sphere(d = 1, $fn = 16);\n    }\n}\n\n// Butter pat module\nmodule butter_pat() {\n    translate([8, 5, 16.5])\n        color(butter_color)\n        cube([8, 6, 2.5], center = true);\n    \n    // Butter detail - melted edges\n    translate([8, 5, 17.5])\n        color(butter_color)\n        scale([1.1, 1.1, 0.3])\n            cylinder(h = 1, r = 4, $fn = 32);\n}\n\n// Syrup drips module\nmodule syrup_drips() {\n    // Main syrup pool on top\n    translate([0, 0, 16.5])\n        color(syrup_color)\n        cylinder(h = 0.5, r = 19, $fn = 64);\n    \n    // Side drips\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90])\n            translate([22, 0, 16])\n                color(syrup_color)\n                rotate([90, 0, 0])\n                    cylinder(h = 8 + i * 2, r1 = 2, r2 = 1.5, $fn = 16);\n    }\n    \n    // Additional small drips\n    for(i = [0:5]) {\n        rotate([0, 0, i * 60])\n            translate([20 + i, 0, 16])\n                color(syrup_color)\n                rotate([90, 0, 0])\n                    cylinder(h = 5 + sin(i) * 3, r1 = 1.5, r2 = 1, $fn = 16);\n    }\n}\n\n// Edge details for realistic look\nmodule edge_browning() {\n    difference() {\n        cylinder(h = 20, r = 25.5, $fn = 64);\n        translate([0, 0, -1])\n            cylinder(h = 22, r = 24, $fn = 64);\n    }\n}\n\n// Main assembly\nunion() {\n    pancake_stack();\n    butter_pat();\n    syrup_drips();\n    \n    // Add subtle edge browning\n    translate([0, 0, 0])\n        color(\"#A0522D\")\n        scale([1, 1, 0.2])\n            edge_browning();\n}",
    "renders": true
  },
  {
    "food_item": "waffle",
    "openscad_code": "// Realistic 3D Printable Waffle\n// Overall dimensions: approx. 80mm diameter, 12mm thick\n\n$fn = 48; // Smooth curves for 3D printing\n\n// Main waffle color - golden brown\ncolor([0.82, 0.65, 0.35]) {\n    union() {\n        // Base waffle disc\n        waffle_base();\n        \n        // Square grid pattern on top\n        waffle_grid();\n        \n        // Circular edge ridge\n        waffle_edge();\n        \n        // Add butter pat on top\n        butter_pat();\n    }\n}\n\nmodule waffle_base() {\n    // Main waffle body with slight dome\n    difference() {\n        // Slightly domed cylinder\n        union() {\n            cylinder(h = 10, r = 40, center = false);\n            translate([0, 0, 10]) \n                cylinder(h = 2, r1 = 40, r2 = 38, center = false);\n        }\n        \n        // Hollow out bottom for material saving\n        translate([0, 0, 3])\n            cylinder(h = 9, r = 35, center = false);\n    }\n}\n\nmodule waffle_grid() {\n    // Create square grid pattern\n    for (x = [-30:10:30]) {\n        for (y = [-30:10:30]) {\n            if (sqrt(x*x + y*y) < 35) { // Only within circle\n                // Deep square pockets\n                translate([x, y, 0]) {\n                    difference() {\n                        // Raised square ridge\n                        cube([12, 12, 3], center = true);\n                        \n                        // Deep square hole\n                        translate([0, 0, -1])\n                            cube([9, 9, 5], center = true);\n                    }\n                }\n                \n                // Smaller inner squares for texture\n                translate([x, y, 3]) {\n                    cube([8, 8, 0.8], center = true);\n                }\n            }\n        }\n    }\n}\n\nmodule waffle_edge() {\n    // Raised circular ridge around edge\n    difference() {\n        // Outer ridge\n        cylinder(h = 2.5, r = 40, center = false);\n        \n        // Hollow center\n        translate([0, 0, -0.1])\n            cylinder(h = 2.7, r = 37, center = false);\n    }\n}\n\nmodule butter_pat() {\n    // Butter pat on top\n    color([0.95, 0.85, 0.4]) {\n        translate([15, 10, 11.5]) {\n            // Slightly melted appearance\n            scale([1, 0.7, 0.3])\n                sphere(r = 8);\n            \n            // Butter drips\n            for (i = [0:3]) {\n                rotate([0, 0, i * 90])\n                    translate([6, 0, -1])\n                        scale([0.3, 0.3, 1])\n                            cylinder(h = 2, r = 2, center = false);\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "food_item": "pretzel",
    "openscad_code": "// Realistic Pretzel - OpenSCAD\n// Medium complexity with 3D printable design\n\n// Parameters\npretzel_radius = 8;\nloop_radius = 25;\ncross_radius = 18;\nthickness = 6;\nsalt_size = 1.2;\nsalt_density = 0.7;\npretzel_color = \"#CD853F\";\n\n// Main module\nmodule pretzel() {\n    // Create the main pretzel shape\n    rotate([0, 0, 0])\n    union() {\n        // Large loops\n        for(i = [0, 1]) {\n            rotate([0, 0, i * 180])\n            translate([0, loop_radius, 0])\n            rotate_extrude(angle = 180, $fn = 32)\n            translate([pretzel_radius, 0, 0])\n            circle(thickness/2, $fn = 16);\n        }\n        \n        // Cross piece\n        translate([-cross_radius, -cross_radius/2, 0])\n        rotate([90, 0, 0])\n        linear_extrude(height = cross_radius)\n        offset(r = thickness/2)\n        difference() {\n            square([cross_radius*2, cross_radius], center = false);\n            translate([thickness, thickness, 0])\n            square([cross_radius*2-thickness*2, cross_radius-thickness], center = false);\n        }\n        \n        // Bottom loop\n        translate([0, -cross_radius - loop_radius/2, 0])\n        rotate([90, 0, 0])\n        rotate_extrude(angle = 180, $fn = 32)\n        translate([loop_radius/2, 0, 0])\n        circle(thickness/2, $fn = 16);\n        \n        // Connectors\n        // Left connector\n        translate([-cross_radius, -cross_radius/2, 0])\n        rotate([90, 0, 90])\n        cylinder(h = cross_radius, r = thickness/2, $fn = 16);\n        \n        // Right connector\n        translate([cross_radius, -cross_radius/2, 0])\n        rotate([90, 0, 90])\n    cylinder(h = cross_radius, r = thickness/2, $fn = 16);\n    \n    // Bottom connector\n    translate([0, -cross_radius - loop_radius/2, 0])\n    rotate([0, 0, 0])\n    cylinder(h = thickness/2, r1 = thickness/2, r2 = thickness/2, $fn = 16);\n    }\n}\n\n// Salt crystals module\nmodule salt() {\n    color(\"white\")\n    for(i = [0:50]) {\n        // Random positions on pretzel surface\n        angle1 = rands(0, 360, 1)[0];\n        angle2 = rands(0, 180, 1)[0];\n        pos = rands(-loop_radius, loop_radius, 3);\n        \n        if(pos[2] > -thickness && pos[2] < thickness) {\n            translate([\n                pos[0] + cos(angle1) * pretzel_radius,\n                pos[1] + sin(angle1) * pretzel_radius,\n                pos[2]\n            ])\n            scale([1, 1.5, 0.7])\n            sphere(salt_size, $fn = 6);\n        }\n    }\n}\n\n// Create the final pretzel\ncolor(pretzel_color)\npretzel();\n\n// Add salt crystals\nif(salt_density > 0) salt();",
    "renders": true
  },
  {
    "food_item": "doughnut",
    "openscad_code": "// Realistic Doughnut with Medium Complexity\n// Outer dimensions ~75mm diameter, 25mm thick\n// 3D printable with 1.2mm wall thickness\n\n$fn = 64;  // Smooth curves\n\n// Main parameters\nouter_d = 75;\ninner_d = 25;\nheight = 25;\nwall = 1.2;\nglaze_thick = 1.5;\n\n// Color definitions\nbread_color = \"#D2B48C\";\nglaze_color = \"#CD5C5C\";\nsprinkle_colors = [\"#FF69B4\", \"#32CD32\", \"#FFD700\", \"#4169E1\", \"#FF4500\"];\n\nmodule doughnut_bread() {\n    difference() {\n        // Outer torus\n        rotate_extrude()\n            translate([outer_d/2, 0, 0])\n                circle(r=height/2);\n        \n        // Inner hole\n        rotate_extrude()\n            translate([inner_d/2, 0, 0])\n                circle(r=height/2 + wall);\n    }\n}\n\nmodule glaze_layer() {\n    // Slightly smaller than bread for realistic coating\n    scale_factor = 0.96;\n    difference() {\n        scale([scale_factor, scale_factor, 1.1])\n            doughnut_bread();\n        \n        // Remove bottom for partial glazing\n        translate([0, 0, -height/2 - 1])\n            cube([outer_d*2, outer_d*2, height/2 + 2], center=true);\n    }\n}\n\n// Surface texture with small bumps\nmodule surface_texture() {\n    for(i = [0:35]) {\n        angle = i * 10;\n        for(j = [0:8]) {\n            y = j * 3 - 12;\n            translate([\n                cos(angle) * (outer_d/2 + sin(y/height*3.14) * 5),\n                sin(angle) * (outer_d/2 + sin(y/height*3.14) * 5),\n                y\n            ])\n                sphere(r=0.8 + sin(i*j)*0.3);\n        }\n    }\n}\n\n// Sprinkles generator\nmodule sprinkles() {\n    for(i = [0:45]) {\n        angle = i * 137.5;  // Golden angle for distribution\n        radius = outer_d/2 + sin(i*0.35) * 8;\n        \n        // Random height on top surface\n        z_pos = sin(angle/10) * 3 + 8;\n        \n        translate([\n            cos(angle) * radius,\n            sin(angle) * radius,\n            z_pos\n        ]) {\n            rotate([90, 0, angle*2])\n                color(sprinkle_colors[i % len(sprinkle_colors)])\n                    scale([1, 0.4, 0.4])\n                        cylinder(h=4, r=0.8);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Bread base with texture\n    color(bread_color)\n        union() {\n            doughnut_bread();\n            surface_texture();\n        }\n    \n    // Glaze layer\n    color(glaze_color)\n        glaze_layer();\n    \n    // Sprinkles on top\n    sprinkles();\n}",
    "renders": true
  },
  {
    "food_item": "bun",
    "openscad_code": "// Realistic 3D printable bun with sesame seeds\n// Overall size ~60mm diameter, 35mm height\n\nmodule sesame_seed() {\n    // Single sesame seed: tiny ellipsoid\n    color(\"beige\") \n    scale([1, 0.7, 0.3])\n    sphere(d=1.5, $fn=8);\n}\n\nmodule sesame_seeds() {\n    // Place seeds in realistic random pattern on top dome\n    for(i=[0:45]) {\n        angle = rands(0, 360, 1)[0];\n        radius = rands(5, 25, 1)[0];\n        tx = cos(angle) * radius;\n        ty = sin(angle) * radius;\n        tz = 15 + sin(sqrt(tx*tx+ty*ty)/25*90)*10;\n        translate([tx, ty, tz])\n        rotate([rands(-20,20,1)[0], rands(-20,20,1)[0], angle])\n        sesame_seed();\n    }\n}\n\nmodule bun_top() {\n    // Main domed top with slight flattening\n    color(\"wheat\")\n    union() {\n        difference() {\n            // Main dome\n            scale([1, 1, 0.8])\n            sphere(d=60, $fn=64);\n            \n            // Flatten top slightly\n            translate([0, 0, 20])\n            cube([70, 70, 20], center=true);\n        }\n        \n        // Gentle undulations for realistic surface\n        for(a=[0:30:330]) {\n            rotate([0, 0, a])\n            translate([20, 0, 5])\n            scale([1, 0.8, 0.3])\n            sphere(d=15, $fn=16);\n        }\n    }\n}\n\nmodule bun_bottom() {\n    // Flat bottom half with slight taper\n    color(\"tan\")\n    union() {\n        difference() {\n            // Main bottom bun\n            cylinder(h=18, d1=60, d2=55, $fn=64);\n            \n            // Hollow for filling\n            translate([0, 0, -1])\n            cylinder(h=15, d1=50, d2=45, $fn=64);\n        }\n        \n        // Slight bulge around middle\n        translate([0, 0, 12])\n        scale([1, 1, 0.5])\n        torus(30, 3, $fn=64);\n    }\n}\n\nmodule torus(r, thickness, fn) {\n    rotate_extrude($fn=fn)\n    translate([r, 0, 0])\n    circle(thickness/2, $fn=fn);\n}\n\n// Assembly\nunion() {\n    bun_top();\n    sesame_seeds();\n    \n    translate([0, 0, -18.5])\n    bun_bottom();\n}",
    "renders": true
  },
  {
    "food_item": "roll",
    "openscad_code": "// Realistic 3D Printable Roll (Bread Roll)\n// Approx. 70mm diameter, 45mm height\n\n// Main roll body\nmodule roll_body() {\n    color(\"BurlyWood\")\n    difference() {\n        // Main dome shape\n        scale([1, 1, 0.7]) \n            sphere(d=70, $fn=100);\n        \n        // Flat bottom\n        translate([0, 0, -35])\n            cube([80, 80, 70], center=true);\n    }\n}\n\n// Top surface texture - small bumps\nmodule roll_texture() {\n    for(i = [0:30]) {\n        rotate([0, 0, i*12])\n        translate([random(5, 25), random(5, 25), 0])\n        translate([0, 0, 25])\n        color(\"Wheat\")\n        scale([1, 1, 0.3])\n        sphere(d=random(2,4), $fn=20);\n    }\n}\n\n// Side texture - diagonal lines\nmodule side_lines() {\n    color(\"Tan\")\n    for(angle = [0:20:340]) {\n        rotate([0, 0, angle])\n        translate([32, 0, 10])\n        rotate([90, 0, 45])\n        cylinder(h=30, d1=0.5, d2=1.5, $fn=3);\n    }\n}\n\n// Bottom seam\nmodule bottom_seam() {\n    color(\"SandyBrown\")\n    rotate_extrude($fn=100)\n    translate([33, 0, 0])\n    circle(d=4);\n}\n\n// Sesame seeds on top\nmodule sesame_seeds() {\n    color(\"FloralWhite\")\n    for(i = [0:40]) {\n        theta = i * 137.508; // Golden angle\n        r = sqrt(i) * 3.5;\n        x = r * cos(theta);\n        y = r * sin(theta);\n        z = 25 - sqrt(x*x + y*y) * 0.1;\n        \n        translate([x, y, z])\n        scale([0.8, 0.5, 0.3])\n        sphere(d=2, $fn=6);\n    }\n}\n\n// Combine all parts\nunion() {\n    // Main roll\n    roll_body();\n    \n    // Surface details\n    roll_texture();\n    side_lines();\n    \n    // Top decorations\n    translate([0, 0, 0])\n    sesame_seeds();\n    \n    // Bottom detail\n    translate([0, 0, -5])\n    bottom_seam();\n}\n\n// Helper function for randomness\nfunction random(min, max) = min + (max - min) * (rands(0, 1, 1)[0]);",
    "renders": true
  },
  {
    "food_item": "loaf",
    "openscad_code": "// Realistic loaf of bread with medium complexity\n// Dimensions scaled for 3D printing: ~80mm length\n\ncolor([0.85, 0.65, 0.4])  // Light crust color\n\nmodule bread_loaf() {\n    // Main loaf body - slightly rounded top\n    hull() {\n        translate([0, 0, 20]) cube([80, 40, 40], center=true);\n        translate([0, 0, 35]) scale([0.9, 0.8, 0.6]) sphere(d=40);\n    }\n    \n    // Crust layer on top\n    difference() {\n        scale([1.02, 1.02, 1.02]) bread_shape();\n        bread_shape();\n    }\n}\n\nmodule bread_shape() {\n    union() {\n        // Main body with rounded edges\n        minkowski() {\n            cube([75, 35, 30], center=true);\n            sphere(d=5);\n        }\n        \n        // Top dome\n        translate([0, 0, 15])\n        scale([0.9, 0.7, 1])\n        sphere(d=35);\n    }\n}\n\n// Create the loaf\nbread_loaf();\n\n// Score lines on top\ncolor([0.75, 0.55, 0.3]) \nfor(i = [-20:10:20]) {\n    translate([i, 0, 34])\n    rotate([90, 0, 0])\n    linear_extrude(height=0.5)\n    circle(d=2);\n}\n\n// Sesame seeds on top\ncolor([0.9, 0.8, 0.6])\nfor(i = [rand(0,20):rand(25,35):rand(0,20)]) {\n    for(j = [rand(-15,15):rand(5,8):rand(-15,15)]) {\n        translate([i, j, 35 + rand(0,1)])\n        sphere(d=1.5);\n    }\n}\n\n// Bottom flattening for printing\ntranslate([0, 0, -10])\ncube([85, 45, 20], center=true);\n\n// Helper function for random values\nfunction rand(min, max) = min + (max - min) * 0.618;",
    "renders": true
  },
  {
    "food_item": "toast",
    "openscad_code": "// Realistic Toast Model\n// Medium complexity - includes texture, crust, and toast characteristics\n\n// Main parameters\nbread_width = 80;\nbread_height = 70;\nbread_thickness = 12;\ncrust_thickness = 2;\nseed_count = 12;\ntexture_depth = 0.5;\n\n// Colors\ncrust_color = [139/255, 69/255, 19/255];\nbread_color = [245/255, 222/255, 179/255];\nseed_color = [160/255, 82/255, 45/255];\ntoast_color = [210/255, 180/255, 140/255];\n\n// Main toast body\nmodule toast_body() {\n    difference() {\n        // Main bread shape\n        translate([0, 0, bread_thickness/2])\n            color(toast_color)\n            cube([bread_width, bread_height, bread_thickness], center=true);\n        \n        // Rounded corners\n        for(i = [-1, 1]) {\n            for(j = [-1, 1]) {\n                translate([i * (bread_width/2 - 10), j * (bread_height/2 - 10), 0])\n                    rotate([0, 0, 45])\n                    cube([20, 20, bread_thickness + 2], center=true);\n            }\n        }\n    }\n}\n\n// Crust layer\nmodule crust() {\n    difference() {\n        // Outer crust\n        translate([0, 0, bread_thickness/2])\n            color(crust_color)\n            cube([bread_width + 1, bread_height + 1, bread_thickness + 0.5], center=true);\n        \n        // Inner cutout\n        translate([0, 0, bread_thickness/2])\n            cube([bread_width - 2, bread_height - 2, bread_thickness + 1], center=true);\n    }\n}\n\n// Bread texture pattern\nmodule toast_texture() {\n    difference() {\n        union() {\n            // Horizontal lines\n            for(i = [-3:3]) {\n                translate([0, i * 8, bread_thickness - texture_depth])\n                    color(bread_color)\n                    cube([bread_width - 10, 1, texture_depth], center=true);\n            }\n            \n            // Vertical lines\n            for(i = [-3:3]) {\n                translate([i * 8, 0, bread_thickness - texture_depth])\n                    color(bread_color)\n                    cube([1, bread_height - 10, texture_depth], center=true);\n            }\n        }\n        \n        // Smooth out edges\n        translate([0, 0, bread_thickness/2])\n            cube([bread_width - 4, bread_height - 4, bread_thickness + 1], center=true);\n    }\n}\n\n// Sesame seeds\nmodule sesame_seeds() {\n    for(i = [1:seed_count]) {\n        angle = i * 137.5; // Golden angle for natural distribution\n        radius = 15 + (i * 3) % 20;\n        x_pos = cos(angle) * radius;\n        y_pos = sin(angle) * radius;\n        \n        if(abs(x_pos) < bread_width/2 - 5 && abs(y_pos) < bread_height/2 - 5) {\n            translate([x_pos, y_pos, bread_thickness + 0.3])\n                color(seed_color)\n                scale([1, 1.5, 0.5])\n                sphere(1.2);\n        }\n    }\n}\n\n// Burnt spots for realism\nmodule burnt_spots() {\n    for(i = [1:8]) {\n        angle = i * 45;\n        radius = 20 + (i * 5) % 15;\n        x_pos = cos(angle) * radius;\n        y_pos = sin(angle) * radius;\n        \n        translate([x_pos, y_pos, bread_thickness + 0.2])\n            color([0.2, 0.1, 0.05, 0.7])\n            scale([1, 1, 0.1])\n            sphere(2 + (i % 3));\n    }\n}\n\n// Assemble the toast\nunion() {\n    // Base structure\n    crust();\n    toast_body();\n    \n    // Surface details\n    translate([0, 0, 0.5])\n        toast_texture();\n    \n    // Decorative elements\n    sesame_seeds();\n    burnt_spots();\n}\n\n// Add slight curvature to top surface for realism\ntranslate([0, 0, bread_thickness - 1])\n    difference() {\n        color(toast_color)\n        scale([1, 1, 0.3])\n        sphere(bread_width/2);\n        \n        translate([0, 0, -bread_thickness])\n            cube([bread_width * 2, bread_height * 2, bread_thickness], center=true);\n    }",
    "renders": true
  },
  {
    "food_item": "crumb",
    "openscad_code": "// Crumb – realistic, medium complexity, 3D-printable\n// Typical toast crumb, ~70 mm longest edge, no overhangs\n\n// food color\ncolor([0.85,0.65,0.45])\n\nmodule crumb() {\n    // main porous body\n    difference() {\n        hull() {\n            // create an irregular blob with spheres\n            translate([0,0, 5]) sphere(r=18,$fn=32);      // top\n            translate([-15,-8,-10]) sphere(r=12,$fn=32);  // front-left\n            translate([12,10,-8]) sphere(r=13,$fn=32);    // back-right\n            translate([-5,15,-5]) sphere(r=10,$fn=32);    // back-left\n        }\n\n        // internal bubbles / voids\n        for (i=[0:30]) {\n            translate([rands(-15,15,1)[0],\n                       rands(-15,15,1)[0],\n                       rands(-12,12,1)[0]])\n            sphere(r=rands(2,5,1)[0],$fn=16);\n        }\n    }\n\n    // thin crust layer on top surface\n    intersection() {\n        translate([0,0,15]) cube([40,40,2],center=true);\n        hull() {\n            sphere(r=18,$fn=32);\n        }\n    }\n\n    // scattered micro-bumps for texture\n    for (j=[0:50]) {\n        translate([rands(-18,18,1)[0],\n                   rands(-18,18,1)[0],\n                   rands(-12,8,1)[0]])\n        scale([1,1,0.4])\n        sphere(r=rands(0.6,1.2,1)[0],$fn=8);\n    }\n}\n\ncrumb();",
    "renders": true
  },
  {
    "food_item": "crust",
    "openscad_code": "// Realistic Crust Food Item - Medium Complexity\n// A golden-brown pie crust with flaky layers and crimped edges\n\ncrust_color = \"#D4A574\";\nedge_color = \"#C19660\";\n\n// Main pie crust base with slight dome shape\nmodule crust_base() {\n    color(crust_color) \n    difference() {\n        // Main dome shape\n        scale([1, 1, 0.3]) \n        sphere(d = 80, $fn = 64);\n        \n        // Hollow out the center\n        translate([0, 0, -2]) \n        scale([0.9, 0.9, 0.4]) \n        sphere(d = 80, $fn = 64);\n        \n        // Flatten bottom\n        translate([0, 0, -12]) \n        cube([100, 100, 25], center = true);\n    }\n}\n\n// Crimped edge details\nmodule crimped_edge() {\n    color(edge_color) \n    for(i = [0:15]) {\n        rotate([0, 0, i * 22.5]) \n        translate([40, 0, 0]) \n        union() {\n            // Finger press indents\n            scale([0.8, 1.5, 0.5]) \n            rotate([0, 90, 0]) \n            cylinder(h = 8, r1 = 3, r2 = 2, $fn = 16);\n            \n            // Ridge between indents\n            translate([0, 0, 2]) \n            scale([1.2, 0.5, 0.3]) \n            cylinder(h = 5, r = 2, $fn = 16);\n        }\n    }\n}\n\n// Flaky layers texture on surface\nmodule flaky_texture() {\n    color(crust_color) \n    for(i = [0:12]) {\n        rotate([0, 0, i * 30]) \n        translate([0, 0, -5]) \n        for(j = [0:5]) {\n            translate([j * 5 + 5, 0, j * 0.5]) \n            rotate([0, 0, j * 15]) \n            scale([1, 0.3, 0.1]) \n            sphere(d = 8, $fn = 8);\n        }\n    }\n}\n\n// Docking holes (small holes to prevent bubbling)\nmodule docking_holes() {\n    color(edge_color) \n    for(i = [0:8]) {\n        rotate([0, 0, i * 45]) \n        for(j = [1:3]) {\n            translate([j * 10, 0, -2]) \n            cylinder(h = 3, r = 1.5, $fn = 8);\n        }\n    }\n}\n\n// Egg wash shine spots\nmodule shine_spots() {\n    color(\"#E8C090\") \n    translate([15, 10, 3]) \n    scale([0.8, 1, 0.3]) \n    sphere(d = 8, $fn = 32);\n    \n    translate([-10, -15, 2.5]) \n    scale([1.2, 0.7, 0.3]) \n    sphere(d = 6, $fn = 32);\n}\n\n// Bottom support ring for printing\nmodule support_ring() {\n    color(edge_color) \n    translate([0, 0, -12]) \n    difference() {\n        cylinder(h = 3, r = 42, $fn = 64);\n        cylinder(h = 3.5, r = 38, $fn = 64);\n    }\n}\n\n// Combine all parts\nunion() {\n    crust_base();\n    crimped_edge();\n    flaky_texture();\n    docking_holes();\n    shine_spots();\n    support_ring();\n}",
    "renders": true
  },
  {
    "food_item": "crisp",
    "openscad_code": "// Realistic crisp (potato chip) with medium complexity\n// Features: curved shape, surface bubbles, salt grains, appropriate coloring\n\nmodule salt_grain(pos) {\n    translate(pos) scale([1,1,0.7]) sphere(0.4);\n}\n\nmodule surface_bubble(pos, size) {\n    translate(pos) sphere(size);\n}\n\nmodule crisp_body() {\n    color([0.85, 0.6, 0.3]) {\n        // Main chip body with gentle curvature\n        difference() {\n            // Basic curved shape\n            translate([0,0,0]) \n            scale([1, 0.7, 0.15]) \n            rotate([0,15,0])\n            sphere(30);\n            \n            // Trim to chip shape\n            intersection() {\n                cube([80,80,20], center=true);\n                translate([0,0,-10]) cube([80,80,20], center=true);\n            }\n        }\n        \n        // Add subtle thickness variation\n        difference() {\n            scale([1, 0.7, 0.12]) \n            rotate([0,15,0])\n            sphere(30);\n            \n            // Create uneven edges\n            for(i = [0:10:350]) {\n                rotate([0,0,i]) \n                translate([28+sin(i*5)*3, 0, -5]) \n                scale([1,1,3]) \n                cylinder(h=10, r1=3, r2=0);\n            }\n        }\n    }\n}\n\nmodule bubbles() {\n    color([0.9, 0.65, 0.35]) {\n        // Random surface bubbles typical of fried crisps\n        for(i = [0:20]) {\n            theta = rands(0,360,1)[0];\n            phi = rands(0,180,1)[0];\n            r = 28 + rands(-2,2,1)[0];\n            x = r * cos(theta) * sin(phi);\n            y = r * sin(theta) * sin(phi) * 0.7;\n            z = r * cos(phi) * 0.15 - 2;\n            surface_bubble([x,y,z], rands(0.5,2,1)[0]);\n        }\n    }\n}\n\nmodule salt() {\n    color([0.95,0.95,0.95]) {\n        // Salt crystals distributed across surface\n        for(i = [0:50]) {\n            theta = rands(0,360,1)[0];\n            phi = rands(30,150,1)[0];\n            r = 25 + rands(-3,3,1)[0];\n            x = r * cos(theta) * sin(phi);\n            y = r * sin(theta) * sin(phi) * 0.7;\n            z = r * cos(phi) * 0.15;\n            salt_grain([x,y,z]);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    crisp_body();\n    bubbles();\n    salt();\n}\n\n// Add slight overall curvature\nrotate([5,0,0]) \nrotate([0,8,0]) \ntranslate([0,0,5]) \nunion() {\n    crisp_body();\n    bubbles();\n    salt();\n}",
    "renders": true
  },
  {
    "food_item": "flake",
    "openscad_code": "// Realistic corn flake for 3D printing\n$fa = 2;\n$fs = 0.5;\n\n// overall dimensions\nflake_length = 60;\nflake_width = 40;\nflake_thickness = 2.5;\n\n// main flake body\nmodule flake_body() {\n    // thin base sheet with gentle bend\n    translate([0, 0, flake_thickness/2])\n    scale([1, 0.8, 1])\n    rotate([5, 0, 0])\n    cube([flake_length, flake_width, flake_thickness], center = true);\n}\n\n// raised ridge along one side\nmodule ridge() {\n    for (i = [-25:5:25]) {\n        translate([i, -15, 0])\n        rotate([0, 10, 0])\n        scale([0.8, 0.3, 0.8])\n        cylinder(h = 1.2, r = 3, center = true);\n    }\n}\n\n// small air bubbles / texture\nmodule bubbles() {\n    for (i = [-25:8:25]) {\n        for (j = [-15:6:15]) {\n            if (abs(i) + abs(j) > 10) {\n                translate([i, j, 1.5])\n                sphere(r = 0.8);\n            }\n        }\n    }\n}\n\n// subtle curl at the tip\nmodule curl() {\n    translate([30, 0, 0])\n    rotate([0, 0, -10])\n    scale([0.4, 0.7, 1])\n    rotate([0, 15, 0])\n    cube([20, 25, flake_thickness], center = true);\n}\n\n// broken edge detail\nmodule broken_edge() {\n    difference() {\n        translate([0, 0, 0])\n        flake_body();\n        \n        // remove chunks along edge\n        for (i = [0:30:120]) {\n            rotate([0, 0, i])\n            translate([30, 0, 0])\n            sphere(r = 6);\n        }\n    }\n}\n\n// surface texture lines\nmodule texture_lines() {\n    for (angle = [0:15:165]) {\n        rotate([0, 0, angle])\n        translate([0, 0, 1.5])\n        scale([0.9, 0.05, 0.3])\n        cube([flake_length, flake_width, flake_thickness], center = true);\n    }\n}\n\n// assemble the complete flake\ncolor(\"Goldenrod\")\nunion() {\n    broken_edge();\n    ridge();\n    bubbles();\n    curl();\n    texture_lines();\n}",
    "renders": true
  },
  {
    "food_item": "grits",
    "openscad_code": "// Realistic grits bowl with butter pat and texture\n// Medium complexity OpenSCAD food model\n\n// Bowl parameters\nbowl_diameter = 80;\nbowl_height = 35;\ngrits_height = 25;\nbutter_size = 15;\nbutter_thickness = 4;\n\n// Colors\ngrits_color = [1, 0.85, 0.65];\nbutter_color = [1, 0.9, 0.4];\nbowl_color = [0.9, 0.9, 0.9];\n\n// Bowl module\nmodule bowl() {\n    difference() {\n        // Outer bowl\n        cylinder(h=bowl_height, d=bowl_diameter, $fn=64);\n        \n        // Hollow inside\n        translate([0, 0, 2])\n            cylinder(h=bowl_height, d=bowl_diameter-4, $fn=64);\n        \n        // Flatten bottom\n        translate([0, 0, -1])\n            cube([bowl_diameter, bowl_diameter, 2], center=true);\n    }\n}\n\n// Grits surface texture\nmodule grits_surface() {\n    for (i = [0:5]) {\n        for (j = [0:5]) {\n            translate([\n                (i-2.5) * 12 + (j%2)*6 - 3,\n                (j-2.5) * 12,\n                grits_height - 1\n            ]) {\n                // Small grits lumps\n                scale([1, 1, 0.3])\n                    sphere(d=3+sin(i*j)*1.5, $fn=8);\n            }\n        }\n    }\n}\n\n// Grits body with texture\nmodule grits() {\n    difference() {\n        // Main grits body\n        translate([0, 0, 2])\n            cylinder(h=grits_height, d=bowl_diameter-6, $fn=64);\n        \n        // Slightly concave top\n        translate([0, 0, grits_height+1])\n            sphere(d=bowl_diameter-4, $fn=64);\n    }\n    \n    // Add surface texture\n    grits_surface();\n}\n\n// Butter pat with ridges\nmodule butter() {\n    // Main butter pat\n    translate([0, 0, grits_height+butter_thickness/2]) {\n        // Base shape\n        cube([butter_size, butter_size, butter_thickness], center=true);\n        \n        // Ridge lines\n        for (i = [-1:1]) {\n            translate([i*4, 0, butter_thickness/2+0.1])\n                cube([1, butter_size-2, 0.5], center=true);\n        }\n    }\n}\n\n// Main assembly\ncolor(bowl_color) bowl();\ncolor(grits_color) grits();\ncolor(butter_color) butter();",
    "renders": true
  },
  {
    "food_item": "oatmeal",
    "openscad_code": "// Oatmeal bowl with realistic texture and toppings\n// Overall dimensions: ~70mm diameter bowl, 15mm height\n\n// Base oatmeal color\ncolor([0.82, 0.66, 0.48]) {\n    // Main oatmeal base - shallow bowl shape\n    difference() {\n        // Outer bowl shape\n        cylinder(h = 15, r1 = 35, r2 = 32, $fn = 64);\n        \n        // Hollow out center\n        translate([0, 0, 5])\n            cylinder(h = 12, r1 = 30, r2 = 27, $fn = 64);\n    }\n}\n\n// Oatmeal surface texture - individual oats\nmodule oat_grain() {\n    scale([1, 0.6, 0.3])\n        sphere(r = 1.5, $fn = 8);\n}\n\n// Place oats on surface in organic pattern\nfor (i = [0:120]) {\n    angle = i * 137.5;  // Golden angle for natural distribution\n    radius = pow(i/120, 0.7) * 30;  // Concentrate towards center\n    x = cos(angle) * radius;\n    y = sin(angle) * radius;\n    \n    translate([x, y, 12 + (noise(i*0.1) * 2)])\n        rotate([0, 0, angle])\n            color([0.75, 0.60, 0.42])\n                oat_grain();\n}\n\n// Raisins - darker spots\nmodule raisin() {\n    scale([1.2, 1, 0.8])\n        sphere(r = 2, $fn = 12);\n}\n\n// Place raisins sparingly\nfor (i = [0:15]) {\n    angle = i * 97 + 23;  // Different angle for raisins\n    radius = 5 + (i % 4) * 7;\n    x = cos(angle) * radius;\n    y = sin(angle) * radius;\n    \n    translate([x, y, 13 + (noise(i*0.2) * 1.5)])\n        color([0.35, 0.20, 0.15])\n            raisin();\n}\n\n// Cinnamon swirl pattern\nmodule cinnamon_line() {\n    color([0.60, 0.35, 0.15])\n        rotate([90, 0, 0])\n            cylinder(h = 0.5, r = 0.8, $fn = 8);\n}\n\n// Create spiral pattern\nfor (t = [0:0.3:20]) {\n    r = t * 1.5;\n    x = cos(t * 2) * r;\n    y = sin(t * 2) * r;\n    \n    translate([x, y, 14])\n        rotate([0, 0, t * 115])\n            cinnamon_line();\n}\n\n// Milk puddle effect - slightly translucent white areas\ndifference() {\n    color([1, 1, 1, 0.7]) {\n        // Main milk puddle\n        translate([0, 10, 14])\n            scale([1, 0.7, 0.1])\n                sphere(r = 20, $fn = 32);\n        \n        // Smaller milk spots\n        for (i = [0:8]) {\n            angle = i * 45;\n            x = cos(angle) * 15;\n            y = sin(angle) * 15;\n            \n            translate([x, y, 14.2])\n                scale([0.5 + noise(i), 0.5 + noise(i+10), 0.1])\n                    sphere(r = 8 + noise(i*2) * 3, $fn = 16);\n        }\n    }\n}\n\n// Bowl rim detail\ndifference() {\n    translate([0, 0, 14.5])\n        cylinder(h = 1.5, r1 = 34, r2 = 33, $fn = 64);\n    translate([0, 0, 14.5])\n        cylinder(h = 1.5, r1 = 31, r2 = 30, $fn = 64);\n}\n\n// Bowl base\ntranslate([0, 0, 0])\n    cylinder(h = 2, r1 = 32, r2 = 30, $fn = 64);\n\n// Simple noise function for organic variation\nfunction noise(x) = (sin(x * 12.9898) * 43758.5453) % 1;",
    "renders": true
  },
  {
    "food_item": "porridge",
    "openscad_code": "// Porridge bowl with realistic texture and toppings\n// Bowl dimensions: 80mm diameter, 40mm height\n// Porridge fills 30mm of bowl height\n\n// Colors\nporridge_color = [0.95, 0.85, 0.65];\nbowl_color = [0.9, 0.9, 0.9];\nberry_color = [0.8, 0.15, 0.25];\nseed_color = [0.6, 0.4, 0.2];\n\n// Main bowl module\nmodule bowl() {\n    difference() {\n        // Outer bowl\n        cylinder(h = 40, r1 = 40, r2 = 35, $fn = 64);\n        \n        // Inner cavity\n        translate([0, 0, 5])\n            cylinder(h = 35, r1 = 36, r2 = 31, $fn = 64);\n        \n        // Flat base\n        translate([0, 0, 0])\n            cube([100, 100, 5], center = true);\n    }\n}\n\n// Porridge surface with texture\nmodule porridge_surface() {\n    // Base porridge volume\n    translate([0, 0, 5])\n        cylinder(h = 30, r1 = 36, r2 = 31, $fn = 64);\n    \n    // Add texture bumps\n    for (i = [0:7]) {\n        rotate([0, 0, i * 45])\n            for (j = [0:3]) {\n                translate([10 + j * 8, 0, 30 + j * 2])\n                    scale([1, 1, 0.3])\n                        sphere(r = 2 + j * 0.5, $fn = 16);\n            }\n    }\n}\n\n// Individual berry module\nmodule berry() {\n    sphere(r = 3, $fn = 16);\n    // Berry top\n    translate([0, 0, 2.5])\n        cylinder(h = 2, r1 = 1, r2 = 0, $fn = 8);\n}\n\n// Chia seeds module\nmodule chia_seed() {\n    scale([1, 1.5, 0.5])\n        sphere(r = 0.8, $fn = 8);\n}\n\n// Porridge with toppings\nmodule porridge_with_toppings() {\n    // Base porridge\n    color(porridge_color)\n        porridge_surface();\n    \n    // Berries\n    color(berry_color) {\n        translate([15, 10, 32]) berry();\n        translate([-10, 15, 33]) berry();\n        translate([0, -12, 31]) berry();\n        translate([-15, -8, 34]) berry();\n        translate([20, -15, 33]) berry();\n    }\n    \n    // Chia seeds\n    color(seed_color)\n        for (i = [0:30]) {\n            rotate([0, 0, i * 137.5])\n                translate([15 * cos(i * 12), 15 * sin(i * 12), 30 + (i % 3) * 0.5])\n                    chia_seed();\n        }\n}\n\n// Assemble the complete model\ncolor(bowl_color) bowl();\ncolor(porridge_color) porridge_with_toppings();",
    "renders": true
  },
  {
    "food_item": "hominy",
    "openscad_code": "// Hominy kernel - medium complexity realistic style\n// Overall size ~15mm per kernel, cluster of 5-6 kernels\n\nmodule hominy_kernel() {\n    color([0.95, 0.85, 0.75]) {\n        // Main corn kernel body - slightly oval\n        translate([0, 0, 0])\n        scale([1, 0.8, 1.2])\n        sphere(d=15, $fn=32);\n        \n        // Flattened bottom for printing stability\n        difference() {\n            sphere(d=15, $fn=32);\n            translate([0, 0, -7.5])\n            cube([20, 20, 10], center=true);\n        }\n        \n        // Top indentation where kernel was attached\n        difference() {\n            sphere(d=15, $fn=32);\n            translate([0, 0, 5])\n            rotate([0, 180, 0])\n            cylinder(h=3, d1=6, d2=4, $fn=16);\n        }\n        \n        // Surface texture - small bumps\n        for (i = [0:7]) {\n            rotate([0, 0, i * 45])\n            translate([5, 0, 4])\n            sphere(d=0.8, $fn=8);\n        }\n        \n        for (i = [0:7]) {\n            rotate([0, 0, i * 45 + 22.5])\n            translate([3, 0, 2])\n            sphere(d=0.6, $fn=8);\n        }\n        \n        // Side ridges\n        for (i = [0:3]) {\n            rotate([0, 0, i * 90])\n            translate([7, 0, 0])\n            scale([0.3, 0.3, 1])\n            sphere(d=15, $fn=8);\n        }\n    }\n}\n\n// Create a small cluster of hominy kernels\ntranslate([-20, 0, 0])\nhominy_kernel();\n\ntranslate([0, -12, 3])\nrotate([0, 20, 0])\nhominy_kernel();\n\ntranslate([15, 5, 1])\nrotate([0, -15, 45])\nhominy_kernel();\n\ntranslate([-10, 15, 4])\nrotate([15, 0, -30])\nhominy_kernel();\n\ntranslate([5, 20, 2])\nrotate([-10, 25, 60])\nhominy_kernel();\n\ntranslate([25, -10, 5])\nrotate([20, -20, 90])\nhominy_kernel();",
    "renders": true
  },
  {
    "food_item": "popcorn",
    "openscad_code": "// Realistic 3D Printable Popcorn Kernel Cluster\n// Medium complexity (~110 lines) using only basic primitives\n\n$fn = 24;\n\n// Main popcorn cluster\nmodule popcorn_cluster() {\n    color([1, 0.95, 0.85]) \n    \n    union() {\n        // Base kernel (largest piece)\n        translate([0, 0, 5])\n            scale([1.2, 1.0, 1.3])\n                kernel_shape();\n        \n        // Second kernel attached to side\n        translate([-8, 6, 10])\n            rotate([15, -25, 45])\n                scale([0.85, 0.9, 0.95])\n                    kernel_shape();\n        \n        // Third kernel\n        translate([7, -5, 12])\n            rotate([-20, 15, -30])\n                scale([0.75, 0.8, 0.9])\n                    kernel_shape();\n        \n        // Small broken pieces\n        for(i = [0:3]) {\n            rotate([0, 0, i*90])\n                translate([12*cos(i*45), 12*sin(i*45), 8 + i*2])\n                    scale([0.4 + i*0.1, 0.4 + i*0.1, 0.5 + i*0.1])\n                        small_piece();\n        }\n        \n        // Bottom flattened area from popping\n        translate([0, 0, 0])\n            difference() {\n                cylinder(h=2, r1=15, r2=18);\n                cylinder(h=3, r1=12, r2=16);\n            }\n    }\n}\n\n// Individual kernel shape with realistic texture\nmodule kernel_shape() {\n    difference() {\n        union() {\n            // Main body - irregular ellipsoid\n            scale([1, 0.9, 1.2])\n                sphere(r=10);\n            \n            // Add protruding bumps for texture\n            for(i = [0:7]) {\n                rotate([0, 0, i*51.4])\n                    translate([8*cos(i*51.4), 8*sin(i*51.4), 5])\n                        scale([0.6, 0.6, 0.8])\n                            sphere(r=2.5);\n            }\n        }\n        \n        // Remove bottom for 3D printing\n        translate([0, 0, -15])\n            cube([40, 40, 30], center=true);\n        \n        // Add characteristic indentations\n        for(i = [0:3]) {\n            rotate([0, 0, i*90])\n                translate([6, 0, 4])\n                    scale([1, 0.5, 0.8])\n                        sphere(r=3);\n        }\n    }\n}\n\n// Small broken piece\nmodule small_piece() {\n    difference() {\n        union() {\n            // Random irregular shape\n            scale([1.2, 0.8, 0.6])\n                sphere(r=3);\n            translate([0, 0, 1])\n                scale([0.7, 1.1, 0.5])\n                    sphere(r=2.5);\n        }\n        \n        // Flat bottom for printing\n        translate([0, 0, -5])\n            cube([10, 10, 10], center=true);\n    }\n}\n\n// Assembly\npopcorn_cluster();",
    "renders": true
  },
  {
    "food_item": "cornmeal",
    "openscad_code": "// Cornmeal Muffin - Realistic Style\n// Medium complexity 3D printable model\n\n$fn = 36;\n\n// Main muffin body\nmodule muffin_body() {\n    color([0.95, 0.75, 0.45]) {\n        union() {\n            // Base cylinder\n            cylinder(h = 30, r1 = 25, r2 = 22);\n            \n            // Top dome\n            translate([0, 0, 30])\n                sphere(r = 24);\n                \n            // Bottom rounding\n            translate([0, 0, -2])\n                cylinder(h = 2, r1 = 27, r2 = 25);\n        }\n    }\n}\n\n// Corn kernel texture\nmodule corn_kernels() {\n    color([0.93, 0.8, 0.5]) {\n        for (i = [0:15]) {\n            rotate([0, 0, i * 22.5])\n                translate([random(18, 22), 0, random(10, 28)])\n                    scale([1, 0.7, 0.8])\n                        sphere(r = random(2.5, 3.5));\n        }\n        \n        for (j = [0:12]) {\n            rotate([0, 0, j * 30 + 15])\n                translate([random(12, 16), 0, random(12, 26)])\n                    scale([0.8, 0.6, 0.7])\n                        sphere(r = random(1.5, 2.5));\n        }\n    }\n}\n\n// Muffin top cracks\nmodule cracks() {\n    color([0.85, 0.65, 0.35]) {\n        for (i = [0:5]) {\n            rotate([0, 0, i * 35 + 10])\n                translate([random(5, 18), 0, 28 + random(-2, 2)])\n                    rotate([random(-10, 10), random(-5, 5), 0])\n                        scale([random(0.5, 1), random(0.2, 0.4), random(0.1, 0.3)])\n                            cube([random(5, 12), random(2, 4), random(1, 3)]);\n        }\n    }\n}\n\n// Paper cup wrapper\nmodule paper_cup() {\n    color([0.98, 0.95, 0.9]) {\n        difference() {\n            // Outer cup\n            cylinder(h = 25, r1 = 27, r2 = 24);\n            \n            // Inner void\n            translate([0, 0, -1])\n                cylinder(h = 27, r1 = 25, r2 = 22);\n        }\n        \n        // Pleats\n        for (i = [0:23]) {\n            rotate([0, 0, i * 15])\n                translate([25.5, 0, 12.5])\n                    cube([1, 0.5, 25], center = true);\n        }\n    }\n}\n\n// Cornmeal texture on sides\nfunction random(min, max) = min + (max - min) * (rands(0, 1, 1)[0]);\n\nmodule side_texture() {\n    color([0.9, 0.7, 0.48]) {\n        for (i = [0:40]) {\n            rotate([0, 0, i * 9 + random(-2, 2)])\n                translate([23, 0, random(2, 28)])\n                    sphere(r = random(0.8, 1.5));\n        }\n    }\n}\n\n// Assembly\nunion() {\n    paper_cup();\n    \n    translate([0, 0, 2]) {\n        muffin_body();\n        \n        // Add textures\n        corn_kernels();\n        cracks();\n        side_texture();\n    }\n}",
    "renders": true
  },
  {
    "food_item": "cornstarch",
    "openscad_code": "// Cornstarch container with realistic powder texture\n// Overall dimensions: 60mm diameter, 90mm height\n\n// Main container body\nmodule container_body() {\n    difference() {\n        // Outer cylinder\n        cylinder(h=70, r=30, $fn=60);\n        \n        // Hollow interior\n        translate([0, 0, 2])\n            cylinder(h=68, r=27, $fn=60);\n    }\n}\n\n// Container lip for lid\nmodule container_lip() {\n    difference() {\n        // Lip ring\n        cylinder(h=5, r1=32, r2=31, $fn=60);\n        \n        // Inner cutout\n        cylinder(h=5, r=28, $fn=60);\n    }\n}\n\n// Container lid\nmodule container_lid() {\n    difference() {\n        union() {\n            // Main lid body\n            cylinder(h=8, r=33, $fn=60);\n            \n            // Handle on top\n            translate([0, 0, 8])\n                cylinder(h=12, r1=8, r2=12, $fn=30);\n        }\n        \n        // Inner recess for fit\n        translate([0, 0, 2])\n            cylinder(h=6, r=29, $fn=60);\n    }\n}\n\n// Cornstarch powder texture using small spheres\nmodule powder_texture() {\n    // Base layer of powder\n    translate([0, 0, 2])\n        color([0.98, 0.96, 0.94])\n        cylinder(h=8, r=26.5, $fn=60);\n    \n    // Random powder clumps\n    for(i = [1:50]) {\n        rotate([0, 0, i*7.2])\n        translate([\n            10*sin(i*13),\n            10*cos(i*17),\n            8+2*cos(i*5)\n        ])\n        color([0.99, 0.97, 0.95])\n        scale([1, 1, 0.7])\n        sphere(r=1+0.5*sin(i*3), $fn=8);\n    }\n    \n    // Surface texture pattern\n    for(y = [-20:5:20]) {\n        for(x = [-20:5:20]) {\n            if(sqrt(x*x + y*y) < 25) {\n                translate([x, y, 10])\n                    color([0.97, 0.95, 0.93])\n                    sphere(r=0.5, $fn=6);\n            }\n        }\n    }\n}\n\n// Label band around container\nmodule label_band() {\n    difference() {\n        // Main label\n        translate([0, 0, 35])\n            color([0.9, 0.85, 0.8])\n            cylinder(h=25, r=30.5, $fn=60);\n        \n        // Text area recess (simulated)\n        translate([0, 0, 35])\n            color([1, 1, 1])\n            cylinder(h=0.2, r=28, $fn=60);\n    }\n}\n\n// Assemble the complete cornstarch container\n// Container body (white plastic)\ncolor([0.95, 0.95, 0.93])\nunion() {\n    container_body();\n    translate([0, 0, 70])\n        container_lip();\n}\n\n// Blue lid\ntranslate([0, 0, 75])\ncolor([0.2, 0.4, 0.8])\ncontainer_lid();\n\n// Cornstarch powder inside\npowder_texture();\n\n// Label around container\nlabel_band();",
    "renders": true
  },
  {
    "food_item": "flour",
    "openscad_code": "// Flour model for 3D printing\n// A realistic bag of flour with paper bag texture and folded top\n// Dimensions: 50mm x 30mm x 80mm\n\n$fn = 32;\n\n// Main flour bag body\nmodule flour_bag() {\n    color([0.95, 0.92, 0.88]) {\n        // Main bag body with slight taper\n        difference() {\n            // Tapered cuboid\n            hull() {\n                translate([0, 0, 0]) cube([52, 32, 60], center = true);\n                translate([0, 0, -5]) scale([0.95, 0.95, 1]) cube([52, 32, 60], center = true);\n            }\n            \n            // Hollow inside\n            translate([0, 0, 2]) cube([48, 28, 58], center = true);\n        }\n        \n        // Bottom fold lines\n        for(i = [-20:20:20]) {\n            translate([i, -15, -30]) cube([0.5, 1, 2]);\n            translate([i, 15, -30]) cube([0.5, 1, 2]);\n        }\n        \n        // Side seam texture\n        translate([26, 0, 10]) cube([1, 30, 40]);\n        translate([-26, 0, 10]) cube([1, 30, 40]);\n    }\n}\n\n// Folded paper top\nmodule folded_top() {\n    color([0.93, 0.9, 0.85]) {\n        // Front fold\n        translate([0, 0, 35]) rotate([90, 0, 0]) {\n            difference() {\n                cylinder(h = 25, r1 = 28, r2 = 26);\n                translate([0, 0, -1]) cylinder(h = 27, r1 = 25, r2 = 23);\n            }\n        }\n        \n        // Back fold\n        translate([0, 0, 35]) rotate([-90, 0, 0]) {\n            difference() {\n                cylinder(h = 25, r1 = 28, r2 = 26);\n                translate([0, 0, -1]) cylinder(h = 27, r1 = 25, r2 = 23);\n            }\n        }\n        \n        // Creases\n        for(i = [-15:15:15]) {\n            color([0.85, 0.82, 0.78]) \n            translate([i, 0, 35]) rotate([90, 0, 0]) \n            cylinder(h = 25, r = 26.5, r1 = 26.5, r2 = 24.5);\n        }\n    }\n}\n\n// Flour spill texture on top\nmodule flour_spill() {\n    color([0.98, 0.96, 0.94]) {\n        // Random flour particles\n        for(i = [1:20]) {\n            translate([\n                rands(-20, 20, 1)[0], \n                rands(-12, 12, 1)[0], \n                35 + rands(0, 3, 1)[0]\n            ]) sphere(r = rands(0.5, 1.5, 1)[0]);\n        }\n    }\n}\n\n// Paper texture pattern\nmodule paper_texture() {\n    color([0.9, 0.87, 0.83]) {\n        // Small bumps for paper texture\n        for(x = [-20:5:20]) {\n            for(y = [-10:5:10]) {\n                for(z = [-25:10:25]) {\n                    translate([x, y, z]) sphere(r = 0.3);\n                }\n            }\n        }\n    }\n}\n\n// Label area\nmodule flour_label() {\n    color([0.15, 0.15, 0.15]) {\n        // Label rectangle\n        translate([0, 16, 10]) cube([40, 0.5, 25], center = true);\n        \n        // Simple text representation\n        translate([-15, 16.6, 15]) cube([8, 0.5, 2]);\n        translate([-15, 16.6, 12]) cube([12, 0.5, 2]);\n        translate([-10, 16.6, 9]) cube([20, 0.5, 2]);\n    }\n}\n\n// Assembly\nunion() {\n    flour_bag();\n    folded_top();\n    flour_spill();\n    translate([0, 0, -28]) paper_texture();\n    flour_label();\n}",
    "renders": true
  },
  {
    "food_item": "starch",
    "openscad_code": "// Realistic 3D-Printable Bagel with Sesame Seeds\n// Medium complexity starch food item\n\n$fn = 36;  // Smooth curves for 3D printing\n\n// Main bagel dimensions\nbagel_outer = 45;  // mm\nbagel_inner = 15;  // mm\nbagel_height = 15;  // mm\n\n// Sesame seed parameters\nseed_size = 1.2;   // mm\nseed_count = 40;\nseed_height = 0.8; // mm\n\n// Color constants\nbagel_color = [0.82, 0.65, 0.45];  // Golden brown\nseed_color = [0.95, 0.90, 0.80];   // Off-white sesame\n\nmodule bagel_shape(height) {\n    // Create torus shape by subtracting cylinder from larger cylinder\n    difference() {\n        cylinder(h = height, r = bagel_outer/2, center = true);\n        cylinder(h = height + 2, r = bagel_inner/2, center = true);\n    }\n}\n\nmodule bagel_texture() {\n    // Add subtle surface texture with small bumps\n    for (i = [0:15]) {\n        rotate([0, 0, i * 24]) {\n            translate([bagel_outer/2 - 2, 0, 0]) {\n                sphere(r = 0.5);\n            }\n            translate([bagel_outer/2 - 2, 0, -bagel_height/3]) {\n                sphere(r = 0.4);\n            }\n            translate([bagel_outer/2 - 2, 0, bagel_height/3]) {\n                sphere(r = 0.4);\n            }\n        }\n    }\n}\n\nmodule sesame_seed() {\n    // Create realistic sesame seed shape - elongated ellipsoid\n    scale([1.5, 1, 0.7]) {\n        sphere(r = seed_size/2);\n    }\n}\n\nmodule place_seeds() {\n    // Distribute seeds around bagel surface with random variation\n    for (i = [0:seed_count-1]) {\n        angle = i * 360/seed_count + rand(i, 0, 5);\n        radius = bagel_outer/2 - 1.5 + rand(i, 1, -0.5);\n        height = rand(i, 2, -seed_height) + rand(i, 3, -0.5);\n        \n        rotate([0, 0, angle]) {\n            translate([radius, 0, height]) {\n                rotate([90, 0, rand(i, 4, 15)]) {\n                    color(seed_color) \n                    sesame_seed();\n                }\n            }\n        }\n    }\n    \n    // Additional seeds on inner edge\n    for (i = [0:seed_count/3-1]) {\n        angle = i * 360/(seed_count/3);\n        translate([0, 0, rand(i, 5, -0.3)]) {\n            rotate([0, 0, angle]) {\n                translate([bagel_inner/2 + 1, 0, bagel_height/4]) {\n                    rotate([90, 0, rand(i, 6, 20)]) {\n                        color(seed_color)\n                        sesame_seed();\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Pseudo-random number generator for natural placement\nfunction rand(seed, offset, range) = \n    (sin(seed * 9283.14 + offset * 47.23) + 1) * range / 2;\n\n// Main assembly\ncolor(bagel_color) {\n    union() {\n        bagel_shape(bagel_height);\n        bagel_texture();\n    }\n}\nplace_seeds();\n\n// Add slight tilt for more natural appearance\nrotate([5, -3, 0]) {\n    // Final model already positioned\n}",
    "renders": true
  },
  {
    "food_item": "dextrin",
    "openscad_code": "// Dextrin food model - realistic style with medium complexity\n// Features a cluster of dextrin granules with characteristic texture\n\n$fn = 32;\n\n// Main parameters\ngranule_size = 4;\ncluster_size = 60;\ngranules_count = 40;\nwall_thickness = 1.2;\n\n// Color definitions\ndextrin_color = \"#D4A574\";\nlight_dextrin = \"#E6C68A\";\ndark_dextrin = \"#B8955A\";\n\n// Random seed for consistent texture\nseed = 42;\n\n// Module to create a single dextrin granule\nmodule dextrin_granule(size) {\n    // Main granule body\n    color(dextrin_color) {\n        sphere(r = size);\n        \n        // Add surface texture with small bumps\n        for (i = [0:7]) {\n            rotate([rand(i*3)*360, rand(i*5)*360, rand(i*7)*360])\n            translate([rand(i*11)*size*0.7, rand(i*13)*size*0.7, rand(i*17)*size*0.7])\n            color(light_dextrin)\n            sphere(r = size * 0.15);\n        }\n    }\n}\n\n// Module for the base cluster\nmodule base_cluster() {\n    difference() {\n        // Main base shape\n        color(dark_dextrin) {\n            sphere(r = cluster_size/2);\n        }\n        \n        // Hollow out the center for printing\n        sphere(r = cluster_size/2 - wall_thickness);\n    }\n}\n\n// Helper function for pseudo-random values\nfunction rand(n) = (n * 9301 + 49297) % 233280 / 233280;\n\n// Create the dextrin cluster\nmodule dextrin_cluster() {\n    // Base cluster\n    base_cluster();\n    \n    // Add granules on the surface\n    for (i = [0:granules_count-1]) {\n        // Calculate position on sphere surface using fibonacci distribution\n        phi = acos(1 - 2*(i+0.5)/granules_count);\n        theta = 3.14159 * (1 + sqrt(5)) * (i+0.5);\n        \n        // Randomize position slightly\n        offset = [rand(i*97)*20-10, rand(i*101)*20-10, rand(i*103)*20-10];\n        \n        translate([\n            (cluster_size/2 - 2) * cos(theta) * sin(phi) + offset[0],\n            (cluster_size/2 - 2) * sin(theta) * sin(phi) + offset[1],\n            (cluster_size/2 - 2) * cos(phi) + offset[2]\n        ]) {\n            // Random rotation for variation\n            rotate([rand(i*107)*360, rand(i*109)*360, rand(i*113)*360]) {\n                // Vary granule size\n                actual_size = granule_size * (0.7 + rand(i*127)*0.6);\n                dextrin_granule(actual_size);\n            }\n        }\n    }\n    \n    // Add some connecting bridges between granules for printability\n    for (i = [0:granules_count/4-1]) {\n        idx1 = i*4;\n        idx2 = (i*4 + 2) % granules_count;\n        \n        // Calculate positions\n        phi1 = acos(1 - 2*(idx1+0.5)/granules_count);\n        theta1 = 3.14159 * (1 + sqrt(5)) * (idx1+0.5);\n        pos1 = [\n            (cluster_size/2 - 2) * cos(theta1) * sin(phi1),\n            (cluster_size/2 - 2) * sin(theta1) * sin(phi1),\n            (cluster_size/2 - 2) * cos(phi1)\n        ];\n        \n        phi2 = acos(1 - 2*(idx2+0.5)/granules_count);\n        theta2 = 3.14159 * (1 + sqrt(5)) * (idx2+0.5);\n        pos2 = [\n            (cluster_size/2 - 2) * cos(theta2) * sin(phi2),\n            (cluster_size/2 - 2) * sin(theta2) * sin(phi2),\n            (cluster_size/2 - 2) * cos(phi2)\n        ];\n        \n        // Create connecting cylinder\n        color(dextrin_color) {\n            translate(pos1) {\n                rotate([0, 0, atan2(pos2[1]-pos1[1], pos2[0]-pos1[0])]) {\n                    rotate([0, acos((pos2[2]-pos1[2])/norm(pos2-pos1)), 0]) {\n                        cylinder(h = norm(pos2-pos1), r = wall_thickness/2, $fn = 8);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Add a flat base for stability\nmodule print_base() {\n    color(dark_dextrin) {\n        cylinder(h = 3, r = cluster_size/2);\n    }\n}\n\n// Assemble the final model\ntranslate([0, 0, 3])\ndextrin_cluster();\n\nprint_base();",
    "renders": true
  },
  {
    "food_item": "malt",
    "openscad_code": "// Malted milk ball (Whopper-style) - realistic 3D printable model\n// Approx 28mm diameter with chocolate coating and malt center\n\n// Color definitions\n$fn = 50;\n\n// Main malted milk ball assembly\nmodule malt_ball() {\n    color(\"#8B4513\") // Chocolate brown coating\n    union() {\n        // Chocolate coating - main sphere\n        sphere(d = 28);\n        \n        // Chocolate coating texture - small bumps\n        for(i = [0:35]) {\n            rotate([rand(0, 360), rand(0, 360), rand(0, 360)]) \n            translate([0, 0, 14]) \n            sphere(d = rand(1.2, 2.2));\n        }\n        \n        // Sugar glaze spots\n        color(\"#F5F5DC\") \n        for(i = [0:15]) {\n            rotate([rand(0, 360), rand(0, 360), rand(0, 360)]) \n            translate([0, 0, 14]) \n            sphere(d = rand(0.8, 1.4));\n        }\n    }\n}\n\n// Internal malt honeycomb structure (for display)\nmodule malt_honeycomb() {\n    color(\"#F5DEB3\") // Malt center color\n    difference() {\n        // Main malt sphere\n        sphere(d = 24);\n        \n        // Honeycomb pattern using subtracted spheres\n        for(i = [0:20]) {\n            rotate([rand(0, 360), rand(0, 360), rand(0, 360)]) \n            translate([rand(3, 8), 0, 0]) \n            sphere(d = rand(2.5, 4));\n        }\n    }\n}\n\n// Helper function for random values\nfunction rand(min, max) = min + (max - min) * (rands(0, 1, 1)[0]);\n\n// Create multiple malt balls in a cluster\nmodule malt_cluster() {\n    // Central malt ball\n    malt_ball();\n    \n    // Additional balls in cluster\n    translate([30, 5, 0]) rotate([0, 0, 15]) malt_ball();\n    translate([-25, 8, 10]) rotate([0, 10, -20]) malt_ball();\n    translate([5, -28, -5]) rotate([5, 0, 45]) malt_ball();\n}\n\n// Display options\n// Uncomment one of the following:\n\n// Single malt ball - full solid for printing\nmalt_ball();\n\n// Cross-section view showing internal structure\n//translate([0, 0, 0]) malt_ball();\n//translate([0, 0, 0]) intersection() {\n//    malt_honeycomb();\n//    translate([0, 0, 14]) cube([30, 30, 14], center = true);\n//}\n\n// Cluster of malt balls\n//translate([0, 0, 0]) malt_cluster();",
    "renders": true
  },
  {
    "food_item": "groat",
    "openscad_code": "// Groat (Oat Groats) - Realistic Style\n// Medium complexity 3D printable model\n\n$fn = 32;\n\n// Main parameters\ngroats_count = 12;\ngroats_radius = 4;\ngroats_length = 12;\nbase_thickness = 2;\n\n// Color definitions\ngroats_color = \"#C4A574\";\nhull_color = \"#D4B896\";\n\nmodule groat_single() {\n    // Single groat - elongated ellipsoid with characteristic oat shape\n    color(groats_color) {\n        union() {\n            // Main body - slightly flattened ellipsoid\n            scale([1, 0.7, 1.5]) \n                sphere(r = groats_radius);\n            \n            // Tip - pointed end\n            translate([0, 0, groats_length/2]) \n                scale([0.6, 0.6, 0.8]) \n                    sphere(r = groats_radius * 0.8);\n            \n            // Base - slightly indented\n            translate([0, 0, -groats_length/2]) \n                difference() {\n                    scale([0.8, 0.8, 0.5]) \n                        sphere(r = groats_radius * 0.9);\n                    translate([0, 0, -groats_radius]) \n                        cube([groats_radius*2, groats_radius*2, groats_radius], center=true);\n                }\n            \n            // Groat texture - linear ridges along length\n            for(i = [0:35]) {\n                rotate([0, 0, i * 10]) \n                    translate([groats_radius * 0.9, 0, 0]) \n                        scale([0.1, 0.05, 1.2]) \n                            sphere(r = groats_radius * 0.2);\n            }\n        }\n    }\n}\n\nmodule groats_pile() {\n    // Create a natural-looking pile of groats\n    color(groats_color) {\n        union() {\n            // Randomly placed and rotated groats\n            for(i = [0:groats_count-1]) {\n                translate([\n                    (i % 4 - 1.5) * 8 + (i % 3) * 3,\n                    (floor(i/4) - 1) * 8 + (i % 2) * 2,\n                    i * 1.5 + (i % 5) * 0.5\n                ]) {\n                    rotate([rand(i*2)*15, rand(i*3+1)*20, rand(i*5+2)*360]) {\n                        groat_single();\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Helper function for random variation\nfunction rand(seed) = (seed * 9301 + 49297) % 233280 / 233280;\n\n// Base container for the groats\nmodule base_container() {\n    color(hull_color) {\n        difference() {\n            // Outer container\n            translate([0, 0, 0]) \n                cylinder(h = 15, r1 = 35, r2 = 32, center=true);\n            \n            // Inner cavity\n            translate([0, 0, 1]) \n                cylinder(h = 20, r1 = 33, r2 = 30, center=true);\n            \n            // Drainage hole (for 3D printing)\n            translate([0, 0, -7]) \n                cylinder(h = 5, r = 3);\n        }\n        \n        // Rim detail\n        translate([0, 0, 7.5]) \n            cylinder(h = 2, r1 = 35, r2 = 34);\n    }\n}\n\n// Main assembly\nscale([0.8, 0.8, 0.8]) {\n    // Base container\n    base_container();\n    \n    // Groats sitting in container\n    translate([0, 0, 5]) \n        groats_pile();\n    \n    // Additional loose groats on top\n    translate([0, 0, 8]) \n        groats_pile();\n}",
    "renders": true
  },
  {
    "food_item": "kernel",
    "openscad_code": "// Sweet Corn Kernel - Realistic Style\n// Medium complexity corn kernel with proper texture and shape\n\n$fn = 32;  // Smooth curves for realistic appearance\n\n// Kernel dimensions (in mm)\nkernel_length = 45;\nkernel_width = 12;\nkernel_height = 10;\nwall_thickness = 1.2;\n\n// Main kernel body - slightly curved and tapered\nmodule kernel_body() {\n    color([0.95, 0.85, 0.25])  // Bright yellow corn color\n    \n    difference() {\n        // Main curved body\n        hull() {\n            translate([-5, 0, 0])\n                scale([1, 0.9, 1])\n                sphere(d=kernel_width);\n            translate([kernel_length-10, 0, 0])\n                scale([0.7, 0.8, 0.9])\n                sphere(d=kernel_width*0.9);\n        }\n        \n        // Hollow out for 3D printing\n        translate([0, 0, -wall_thickness])\n            scale([0.8, 0.8, 0.7])\n            hull() {\n                translate([-5, 0, 0])\n                    sphere(d=kernel_width*0.8);\n                translate([kernel_length-10, 0, 0])\n                    sphere(d=kernel_width*0.7);\n            }\n    }\n}\n\n// Kernel texture pattern - rows of indentations\nmodule kernel_texture() {\n    color([0.9, 0.8, 0.2])  // Slightly darker yellow\n    \n    // Rows of indentations along the kernel\n    for (row = [0:4]) {\n        for (col = [0:6]) {\n            translate([\n                col * 6 + 3, \n                (row - 2) * 2.5, \n                sin(col * 30) * 1.5\n            ])\n            rotate([0, 90, 0])\n                translate([0, 0, -kernel_height/2])\n                cylinder(h=kernel_height/3, d1=2.5, d2=1.5, $fn=6);\n        }\n    }\n}\n\n// Crown/flower end of kernel\nmodule kernel_crown() {\n    color([0.98, 0.90, 0.30])  // Lighter yellow\n    \n    difference() {\n        // Crown base\n        translate([kernel_length-5, 0, 0])\n            scale([1, 1, 0.8])\n            sphere(d=kernel_width*0.8);\n        \n        // Indentations for texture\n        for (i = [0:5]) {\n            rotate([0, 0, i * 60])\n                translate([kernel_length-3, 3, 0])\n                rotate([90, 0, 0])\n                    cylinder(h=3, d1=2, d2=0.5, $fn=6);\n        }\n    }\n}\n\n// Root end cap\nmodule kernel_root() {\n    color([0.85, 0.75, 0.15])  // Darker yellow\n    \n    difference() {\n        // Root end\n        translate([-8, 0, 0])\n            scale([0.8, 0.9, 0.7])\n            sphere(d=kernel_width*0.6);\n        \n        // Root scar\n        translate([-10, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=3, d=2, $fn=8);\n    }\n}\n\n// Main assembly\nunion() {\n    // Base kernel shape\n    kernel_body();\n    \n    // Texture details (subtractive)\n    difference() {\n        kernel_body();\n        kernel_texture();\n    }\n    \n    // Crown end\n    kernel_crown();\n    \n    // Root end\n    kernel_root();\n}",
    "renders": true
  },
  {
    "food_item": "berry",
    "openscad_code": "// Realistic Raspberry (medium complexity)\n// Overall height ~55 mm, base diameter ~45 mm\n// Designed for FDM printing with 0.8 mm walls and no overhangs >45°\n\n$fn = 36; // Smooth curves\n\nmodule berry_body() {\n    // Main drupelet cluster shape – slightly elongated dome\n    hull() {\n        for (i = [0:11]) {\n            rotate([0, 0, i * 30])\n            translate([0, 0, 0])\n            sphere(d = 42); // Base spheres\n        }\n    }\n\n    // Top tapering dome\n    translate([0, 0, 35])\n    scale([0.8, 0.8, 0.6])\n    sphere(d = 30);\n}\n\nmodule drupelets() {\n    // Generate individual drupelets over the berry surface\n    for (ring = [0:3]) {\n        h = 10 + ring * 10; // Height of each ring\n        r = 20 - ring * 4;  // Radius at that height\n        n = 12 - ring * 2;  // Fewer drupelets toward top\n        \n        for (i = [0:n-1]) {\n            angle = i * 360 / n;\n            translate([\n                r * cos(angle),\n                r * sin(angle),\n                h\n            ])\n            rotate([0, 0, angle])\n            scale([1, 1, 1.2])\n            sphere(d = 6.5); // Each drupelet ~6.5 mm\n        }\n    }\n    \n    // Crown drupelet at very top\n    translate([0, 0, 48])\n    sphere(d = 5);\n}\n\nmodule seeds() {\n    // Tiny seeds inside some drupelets\n    seed_d = 1.8;\n    for (ring = [0:2]) {\n        h = 10 + ring * 12;\n        r = 18 - ring * 4;\n        n = 10 - ring * 2;\n        \n        for (i = [0:n-1]) {\n            angle = i * 360 / n + ring * 5; // Stagger rings\n            translate([\n                r * cos(angle),\n                r * sin(angle),\n                h + 2\n            ])\n            color(\"saddlebrown\")\n            sphere(d = seed_d);\n        }\n    }\n}\n\nmodule calyx() {\n    // Green calyx (leafy top) with 5 lobes\n    color(\"forestgreen\")\n    union() {\n        // Central disk\n        cylinder(h = 4, d = 15, center = true);\n        \n        // Five lobes\n        for (i = [0:4]) {\n            rotate([0, 0, i * 72])\n            translate([7, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h = 12, d1 = 6, d2 = 2);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Berry body and drupelets merged\n    color(\"firebrick\")\n    union() {\n        berry_body();\n        drupelets();\n    }\n    \n    // Seeds (subtractive or additive for detail)\n    seeds();\n    \n    // Calyx on top\n    translate([0, 0, 52])\n    calyx();\n}",
    "renders": true
  },
  {
    "food_item": "seed",
    "openscad_code": "// Sunflower Seed - Realistic Style, Medium Complexity\n// Dimensions: ~65mm length, ~25mm width, 10mm thickness\n\n$fn = 50;\n\nmodule seed_body() {\n    // Main seed shape - elongated teardrop\n    scale([1, 0.7, 0.35])\n    rotate([0, 90, 0])\n    difference() {\n        // Outer shell\n        scale([1, 1.2, 1])\n        sphere(25);\n        \n        // Tapered end\n        translate([20, 0, 0])\n        cube([30, 50, 50], center=true);\n        \n        // Flatten bottom\n        translate([0, 0, -25])\n        cube([100, 100, 25], center=true);\n    }\n}\n\nmodule seed_texture() {\n    // Surface ridges along length\n    for(i = [-25:5:25]) {\n        rotate([0, 0, i*3])\n        translate([i*0.8, 0, 10])\n        scale([1, 0.2, 0.05])\n        rotate([0, 90, 0])\n        cylinder(h=30, r1=15, r2=8);\n    }\n    \n    // Cross-hatch pattern\n    for(i = [0:15:60]) {\n        rotate([0, 0, 45])\n        translate([i-30, 0, 9.5])\n        scale([0.5, 0.05, 0.05])\n        cube([20, 1, 1], center=true);\n        \n        rotate([0, 0, -45])\n        translate([i-30, 0, 9.5])\n        scale([0.5, 0.05, 0.05])\n        cube([20, 1, 1], center=true);\n    }\n}\n\nmodule seed_hull() {\n    // Edible kernel inside shell\n    difference() {\n        // Kernel shape\n        scale([0.85, 0.6, 0.25])\n        rotate([0, 90, 0])\n        sphere(22);\n        \n        // Hollow center\n        translate([0, 0, -5])\n        scale([0.3, 0.4, 0.1])\n        sphere(20);\n    }\n}\n\nmodule seed_details() {\n    // Pointed tip\n    translate([30, 0, 0])\n    rotate([0, 90, 0])\n    cylinder(h=8, r1=4, r2=0);\n    \n    // Base attachment point\n    translate([-28, 0, 0])\n    rotate([0, 90, 0])\n    cylinder(h=3, r1=3, r2=2);\n}\n\n// Main assembly\nunion() {\n    // Shell\n    color([0.4, 0.3, 0.15])\n    seed_body();\n    \n    // Shell texture\n    color([0.35, 0.25, 0.1])\n    seed_texture();\n    \n    // Kernel visible at split\n    color([0.9, 0.8, 0.5])\n    translate([0, 0, 0.5])\n    seed_hull();\n    \n    // Details\n    color([0.3, 0.2, 0.1])\n    seed_details();\n}\n\n// Print orientation marker\n%translate([0, 0, -15])\n    color([0.5, 0.5, 0.5, 0.3])\n    cube([70, 30, 1], center=true);",
    "renders": true
  },
  {
    "food_item": "grain",
    "openscad_code": "// Loaf of whole-grain bread – realistic style, medium complexity\n// Overall size ≈ 80 mm × 50 mm × 45 mm\n\n// Helper: rounded cube (used for the main loaf body)\nmodule rounded_cube(s, r) {\n    hull() {\n        translate([r, r, r]) sphere(r);\n        translate([s.x-r, r, r]) sphere(r);\n        translate([r, s.y-r, r]) sphere(r);\n        translate([s.x-r, s.y-r, r]) sphere(r);\n        translate([r, r, s.z-r]) sphere(r);\n        translate([s.x-r, r, s.z-r]) sphere(r);\n        translate([r, s.y-r, s.z-r]) sphere(r);\n        translate([s.x-r, s.y-r, s.z-r]) sphere(r);\n    }\n}\n\n// Helper: tiny seed for the crust texture\nmodule seed() {\n    scale([1, 0.7, 1.3])\n        sphere(0.8, $fn=8);\n}\n\n// Crust layer with scattered seeds\nmodule crust() {\n    difference() {\n        // Main crust\n        rounded_cube([80, 50, 45], 5);\n\n        // Carve out crumb area\n        translate([5, 5, 5])\n            rounded_cube([70, 40, 40], 3);\n    }\n\n    // Seeds on top surface\n    for (i = [0:2:35], j = [0:2:23]) {\n        translate([5 + i*2, 5 + j*2, 45])\n            rotate([0, 0, rands(0, 360, 1)[0]])\n                seed();\n    }\n}\n\n// Single air bubble\nmodule bubble() {\n    sphere(rands(1.2, 2.8, 1)[0], $fn=12);\n}\n\n// Crumb interior with random bubbles\nmodule crumb() {\n    color([0.94, 0.88, 0.78]) {\n        translate([5, 5, 5])\n            rounded_cube([70, 40, 40], 3);\n\n        // Random bubbles for texture\n        for (k = [0:50]) {\n            translate([\n                rands(8, 72, 1)[0],\n                rands(8, 42, 1)[0],\n                rands(8, 42, 1)[0]\n            ])\n                bubble();\n        }\n    }\n}\n\n// Sliced end face\nmodule slice_face() {\n    translate([0, 25, 0])\n        cube([0.5, 0.01, 45]);\n}\n\n// Assembly\ncolor([0.55, 0.35, 0.18])\n    crust();\n\ncrumb();\n\n// Optional thin slice plane to show cross-section\n// Uncomment below to open the loaf\n/*\ntranslate([40, 0, 0])\n    cube([0.5, 50, 45]);\n*/",
    "renders": true
  },
  {
    "food_item": "bran",
    "openscad_code": "// Bran Flake - Realistic Style\n// Dimensions: 40mm x 30mm x 4mm thick\n// Features: Layered structure, curled edges, visible bran texture\n\n// Main color for bran flake (golden brown)\ncolor([0.82, 0.71, 0.55]) {\n    difference() {\n        // Main flake body\n        union() {\n            // Base flake shape - slightly irregular oval\n            scale([1, 0.75, 0.1]) \n                sphere(d = 40, $fn = 32);\n            \n            // Add thickness with slight curl\n            translate([0, 0, 1.5])\n                scale([0.95, 0.7, 0.05])\n                    sphere(d = 38, $fn = 32);\n            \n            // Edge curl on one side\n            translate([15, 0, 2.5])\n                rotate([0, 30, 0])\n                    scale([0.3, 0.8, 0.3])\n                        sphere(d = 20, $fn = 16);\n        }\n        \n        // Create irregular edge by subtracting small spheres\n        for (i = [0:15]) {\n            rotate([0, 0, i * 24])\n                translate([20 + sin(i * 50) * 2, 0, 0])\n                    sphere(d = 3 + (i % 3), $fn = 8);\n        }\n        \n        // Surface texture - random small depressions\n        for (x = [-15:5:15]) {\n            for (y = [-10:5:10]) {\n                translate([x + sin(x*y) * 2, y + cos(x*y) * 2, 0.5])\n                    sphere(d = 1 + (x+y) % 2, $fn = 6);\n            }\n        }\n    }\n    \n    // Bran particles on surface\n    for (i = [0:30]) {\n        translate([\n            sin(i * 137.5) * 18,\n            cos(i * 137.5) * 13,\n            2 + sin(i * 3) * 0.5\n        ]) {\n            scale([1, 1, 0.3])\n                sphere(d = 1 + (i % 3), $fn = 4);\n        }\n    }\n    \n    // Fiber streaks\n    for (angle = [0:30:150]) {\n        rotate([90, 0, angle])\n            translate([0, 0, 1])\n                scale([0.2, 0.1, 10])\n                    cylinder(h = 0.5, d = 1, $fn = 4);\n    }\n}\n\n// Small seed particles embedded in bran\ncolor([0.65, 0.5, 0.35]) {\n    for (i = [0:8]) {\n        translate([\n            sin(i * 95) * 12,\n            cos(i * 95) * 9,\n            2.2\n        ]) {\n            scale([1, 0.7, 0.5])\n                sphere(d = 1.5, $fn = 6);\n        }\n    }\n}",
    "renders": true
  },
  {
    "food_item": "germ",
    "openscad_code": "// Realistic Germ Food - Salmonella Bacteria on Lettuce Leaf\n// Medium complexity model with food-safe 3D printing considerations\n\n// Main module\nmodule germ_food() {\n    // Lettuce leaf base\n    color([0.2, 0.7, 0.3, 0.9]) {\n        translate([0, 0, 2]) {\n            rotate([90, 0, 0]) {\n                lettuce_leaf();\n            }\n        }\n    }\n    \n    // Salmonella bacteria colonies\n    color([0.9, 0.8, 0.2, 0.95]) {\n        for(i = [1:8]) {\n            translate([\n                15 * sin(i * 45),\n                15 * cos(i * 45),\n                2.5 + (i % 3) * 2\n            ]) {\n                rotate([0, 0, i * 30]) {\n                    salmonella_cluster();\n                }\n            }\n        }\n    }\n}\n\n// Lettuce leaf with realistic texture\nmodule lettuce_leaf() {\n    difference() {\n        // Main leaf shape\n        scale([1.5, 1, 0.5]) {\n            sphere(20, $fn=20);\n        }\n        \n        // Leaf cutout\n        scale([1.3, 0.8, 0.6]) {\n            sphere(20, $fn=20);\n        }\n    }\n    \n    // Leaf veins\n    for(i = [0:30:150]) {\n        rotate([0, 0, i]) {\n            translate([0, 0, -0.5]) {\n                scale([0.1, 0.8, 0.05]) {\n                    cylinder(h=20, r=1, $fn=8);\n                }\n            }\n        }\n    }\n    \n    // Surface texture bumps\n    for(i = [0:10:360]) {\n        for(j = [5:5:15]) {\n            rotate([0, 0, i]) {\n                translate([j, 0, 0.2]) {\n                    sphere(0.5, $fn=6);\n                }\n            }\n        }\n    }\n}\n\n// Salmonella bacteria cluster\nmodule salmonella_cluster() {\n    // Main rod-shaped bacteria\n    for(i = [0:2]) {\n        translate([i * 3 - 3, 0, 0]) {\n            rotate([90, 0, 0]) {\n                scale([1, 1, 3]) {\n                    sphere(1.2, $fn=8);\n                }\n            }\n            \n            // Flagella (hair-like structures)\n            for(j = [0:45:315]) {\n                rotate([0, j, 0]) {\n                    translate([0, 0, 2]) {\n                        scale([0.1, 0.1, 2]) {\n                            cylinder(h=3, r=0.5, $fn=4);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Smaller dividing cells\n    translate([0, 3, 0]) {\n        scale([0.7, 0.7, 0.7]) {\n            sphere(1, $fn=8);\n        }\n    }\n    translate([2, -3, 0]) {\n        scale([0.8, 0.8, 0.8]) {\n            sphere(1.1, $fn=8);\n        }\n    }\n}\n\n// Generate the model\ngerm_food();",
    "renders": true
  },
  {
    "food_item": "endosperm",
    "openscad_code": "// Wheat kernel endosperm model\n// The starchy interior of a wheat grain with realistic texture\n\n$fn = 32;\n\n// Main color definitions\ncolor_endosperm = [0.98, 0.93, 0.82];  // Creamy off-white\ncolor_starch_granules = [0.95, 0.90, 0.78];  // Slightly darker starch\ncolor_protein_veins = [0.85, 0.80, 0.65];  // Darker protein streaks\n\n// Scale factor for 3D printing\nscale_factor = 70;  // 70mm length\n\nmodule starch_granules() {\n    // Random small spheres for starch texture\n    for(i = [0:15]) {\n        translate([\n            sin(i*137.5) * (5 + i*0.8),\n            cos(i*137.5) * (5 + i*0.8),\n            3 + sin(i*2.3) * 2\n        ]) {\n            scale([1, 1, 0.7]) {\n                sphere(r = 0.8 + 0.5*cos(i*3.7));\n            }\n        }\n    }\n}\n\nmodule protein_veins() {\n    // Elongated protein structures\n    for(i = [0:8]) {\n        rotate([0, 0, i * 45 + 15]) {\n            translate([0, 0, 2]) {\n                scale([1, 0.3, 0.2]) {\n                    cylinder(h = 20, r1 = 4, r2 = 2);\n                }\n            }\n        }\n    }\n}\n\nmodule endosperm_core() {\n    // Main starchy body - kidney bean shape\n    difference() {\n        union() {\n            // Base shape\n            scale([1, 0.7, 0.5]) {\n                sphere(r = scale_factor/2);\n            }\n            \n            // Add slight bulge for realism\n            translate([scale_factor/4, 0, 0]) {\n                scale([0.4, 0.5, 0.3]) {\n                    sphere(r = scale_factor/2.5);\n                }\n            }\n        }\n        \n        // Carve out characteristic indentation\n        translate([-scale_factor/4, 0, -scale_factor/4]) {\n            scale([0.8, 0.6, 0.4]) {\n                sphere(r = scale_factor/3);\n            }\n        }\n    }\n}\n\nmodule surface_texture() {\n    // Add small bumps for realistic texture\n    for(i = [0:20]) {\n        for(j = [0:10]) {\n            translate([\n                -scale_factor/3 + i * scale_factor/10,\n                -scale_factor/4 + j * scale_factor/5,\n                0\n            ]) {\n                if(sqrt(pow(-scale_factor/3 + i * scale_factor/10, 2) + \n                       pow(-scale_factor/4 + j * scale_factor/5, 2)) < scale_factor/2.2) {\n                    scale([1, 1, 0.5]) {\n                        sphere(r = 1.5);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Main assembly\ncolor(color_endosperm) {\n    difference() {\n        endosperm_core();\n        \n        // Hollow out for 3D printing\n        scale([0.8, 0.6, 0.4]) {\n            endosperm_core();\n        }\n    }\n}\n\n// Add surface details\ncolor(color_starch_granules) {\n    translate([0, 0, scale_factor/4 - 5]) {\n        rotate([90, 0, 0]) {\n            scale([0.9, 0.9, 0.9]) {\n                surface_texture();\n            }\n        }\n    }\n}\n\n// Protein network\ncolor(color_protein_veins) {\n    translate([0, 0, scale_factor/10]) {\n        scale([0.7, 0.7, 0.5]) {\n            protein_veins();\n        }\n    }\n}\n\n// Internal starch granules\ncolor(color_starch_granules) {\n    translate([0, 0, 0]) {\n        scale([0.6, 0.6, 0.4]) {\n            starch_granules();\n        }\n    }\n}",
    "renders": true
  },
  {
    "food_item": "husk",
    "openscad_code": "// Corn husk with kernels - realistic style\n// Overall dimensions: ~80mm length, ~25mm diameter\n\n$fn = 32;\n\nmodule husk_leaf(length, width, thickness) {\n    // Create a curved leaf shape using hull of spheres\n    difference() {\n        hull() {\n            translate([0, 0, 0]) \n                scale([1, 0.3, thickness]) \n                    sphere(d=width);\n            translate([length*0.7, 0, 0]) \n                scale([0.7, 0.2, thickness]) \n                    sphere(d=width*0.8);\n            translate([length, 0, 0]) \n                scale([0.3, 0.1, thickness]) \n                    sphere(d=width*0.4);\n        }\n        \n        // Add natural leaf tapering\n        for(i = [0:10]) {\n            translate([i*length/10, 0, thickness*2])\n                rotate([0, 90, 0])\n                    cylinder(h=width*0.4, d1=width*(1-i/15), d2=0);\n        }\n    }\n}\n\nmodule corn_kernels(rows, cols) {\n    color(\"#F5DEB3\")  // Corn kernel color\n    for(r = [0:rows-1]) {\n        for(c = [0:cols-1]) {\n            translate([\n                5 + c*4.5,\n                -8 + r*3.5,\n                2\n            ]) {\n                // Individual kernel shape\n                scale([1, 0.8, 1.2])\n                    sphere(d=3.5);\n                \n                // Kernel texture\n                translate([0, 0, 1.5])\n                    sphere(d=2.2);\n            }\n        }\n    }\n}\n\nmodule husk_layers() {\n    color(\"#228B22\")  // Fresh green husk color\n    union() {\n        // Outer husk layer - left\n        translate([0, -12, 0])\n            rotate([-15, 0, -25])\n                husk_leaf(70, 25, 1.5);\n        \n        // Outer husk layer - right\n        translate([0, 12, 0])\n            rotate([-15, 0, 25])\n                mirror([0,1,0])\n                    husk_leaf(70, 25, 1.5);\n        \n        // Inner husk layer - left\n        color(\"#32CD32\")  // Lighter green\n        translate([5, -8, 1])\n            rotate([-10, 0, -15])\n                scale([0.9, 0.9, 0.8])\n                    husk_leaf(60, 20, 1.2);\n        \n        // Inner husk layer - right\n        translate([5, 8, 1])\n            rotate([-10, 0, 15])\n                mirror([0,1,0])\n                    scale([0.9, 0.9, 0.8])\n                        husk_leaf(60, 20, 1.2);\n    }\n}\n\nmodule corn_cob() {\n    color(\"#DEB887\")  // Cob color\n    difference() {\n        // Main cob\n        translate([0, 0, -8])\n            scale([1, 1, 0.7])\n                cylinder(h=65, d=20);\n        \n        // Cob texture - remove material for kernel rows\n        for(i = [0:7]) {\n            rotate([0, 0, i*45])\n                translate([10, 0, -8])\n                    cube([20, 1.5, 65], center=true);\n        }\n        \n        // Tapered ends\n        translate([0, 0, -12])\n            cylinder(h=5, d1=20, d2=15);\n        translate([0, 0, 57])\n            cylinder(h=5, d1=15, d2=12);\n    }\n    \n    // Add fibrous texture\n    color(\"#CD853F\")\n    for(i = [0:15]) {\n        rotate([0, 0, i*12])\n            translate([10, 0, -8])\n                cylinder(h=65, d=0.5);\n    }\n}\n\n// Main assembly\nunion() {\n    // Corn cob with kernels\n    corn_cob();\n    corn_kernels(5, 12);\n    \n    // Husk layers wrapping around\n    husk_layers();\n    \n    // Silk strands at top\n    color(\"#FFFACD\")\n    for(i = [0:20]) {\n        translate([0, 0, 57])\n            rotate([0, 0, i*18])\n                translate([8 + sin(i*3)*2, 0, 0])\n                    rotate([90 + sin(i*2)*10, 0, 0])\n                        cylinder(h=15 + sin(i*5)*5, d=0.8);\n    }\n}",
    "renders": true
  },
  {
    "food_item": "chaff",
    "openscad_code": "// Chaff (wheat bran) - realistic style, medium complexity\n// Dimensions: ~30x20x8mm individual pieces\n\n// Color definitions\ncolor_chaff = \"#C19A6B\";\ncolor_dark = \"#8B4513\";\ncolor_light = \"#D2B48C\";\n\n// Main chaff module\nmodule chaff_piece(x_offset, y_offset, rotation, scale_factor) {\n    translate([x_offset, y_offset, 0])\n    rotate([0, 0, rotation])\n    scale([scale_factor, scale_factor, scale_factor]) {\n        \n        // Base flake body\n        difference() {\n            // Main chaff body - irregular oval shape\n            scale([1.5, 1, 0.3])\n            sphere(r=10, $fn=20);\n            \n            // Create irregular edges through subtraction\n            for(i = [0:3]) {\n                rotate([0, 0, i*90 + 15])\n                translate([12, 0, -2])\n                scale([1, 0.7, 1])\n                cylinder(h=10, r1=3, r2=0, $fn=6);\n            }\n            \n            // Add central groove\n            rotate([90, 0, 0])\n            translate([0, 0, -1])\n            cylinder(h=20, r1=1, r2=0.5, $fn=8);\n        }\n        \n        // Surface texture - small bumps for bran texture\n        for(i = [1:15]) {\n            theta = i * 137.5;\n            r = 5 + sin(i*3)*3;\n            translate([r*cos(theta), r*sin(theta), 3])\n            scale([1, 1, 0.5])\n            sphere(r=0.5 + 0.3*cos(i*2), $fn=6);\n        }\n        \n        // Edge detail - thin flakes\n        for(i = [0:8]) {\n            angle = i * 45 + 5;\n            distance = 9 + 2*sin(i*2);\n            rotate([0, 0, angle])\n            translate([distance, 0, 1.5])\n            rotate([0, 0, -20 + i*3])\n            scale([0.3, 2, 0.1])\n            cube([1, 1, 1]);\n        }\n        \n        // Central vein\n        color(color_dark)\n        difference() {\n            rotate([90, 0, 0])\n            translate([0, 0, 2.8])\n            scale([0.1, 1.2, 0.05])\n            cylinder(h=15, r=1, $fn=8);\n            \n            \n            // Add small holes along vein\n            for(j = [0:4]) {\n                translate([0, -7 + j*3.5, -0.1])\n                sphere(r=0.3, $fn=5);\n            }\n        }\n    }\n}\n\n// Create a small pile of chaff pieces\ncolor(color_chaff)\nunion() {\n    // Main pieces\n    chaff_piece(0, 0, 0, 1);\n    chaff_piece(15, 8, 35, 0.8);\n    chaff_piece(-12, 10, -25, 0.9);\n    chaff_piece(8, -12, 120, 0.7);\n    chaff_piece(-10, -8, -90, 1.1);\n    \n    // Smaller fragments\n    chaff_piece(5, 15, 45, 0.4);\n    chaff_piece(-18, -3, 60, 0.5);\n    chaff_piece(12, -5, -30, 0.6);\n    chaff_piece(-5, -18, 15, 0.45);\n}",
    "renders": true
  },
  {
    "food_item": "cereal",
    "openscad_code": "// Cinnamon Toast Crunch style cereal piece\n// Base dimensions in mm\ncereal_width = 20;\ncereal_height = 5;\ncereal_depth = 20;\n\n// Sugar coating thickness\ncoating_thickness = 0.5;\n\n// Cinnamon swirl parameters\nswirl_height = 0.8;\nswirl_width = 2;\n\n// Module for individual sugar crystal\nmodule sugar_crystal(size = 1) {\n    color([0.95, 0.95, 0.85])\n    translate([0, 0, 0])\n    scale([1, 1, 0.7])\n    sphere(size/2);\n}\n\n// Module for cinnamon swirl pattern\nmodule cinnamon_swirl() {\n    color([0.5, 0.25, 0.1])\n    linear_extrude(height = swirl_height, twist = 180) {\n        for(i = [0:10:360]) {\n            rotate([0, 0, i])\n            translate([swirl_width + sin(i*3)*2, 0, 0])\n            circle(d = 1);\n        }\n    }\n}\n\n// Main cereal piece body\nmodule cereal_base() {\n    // Main toast shape with slight curve\n    color([0.8, 0.6, 0.4])\n    union() {\n        // Base rectangle\n        translate([0, 0, 0])\n        cube([cereal_width, cereal_depth, cereal_height], center = true);\n        \n        // Rounded edges using spheres\n        translate([cereal_width/2-2, cereal_depth/2-2, 0])\n        sphere(2);\n        translate([-cereal_width/2+2, cereal_depth/2-2, 0])\n        sphere(2);\n        translate([cereal_width/2-2, -cereal_depth/2+2, 0])\n        sphere(2);\n        translate([-cereal_width/2+2, -cereal_depth/2+2, 0])\n        sphere(2);\n    }\n}\n\n// Sugar coating layer\nmodule sugar_coating() {\n    color([0.9, 0.9, 0.8])\n    translate([0, 0, coating_thickness/2])\n    difference() {\n        cube([cereal_width+1, cereal_depth+1, coating_thickness], center = true);\n        cube([cereal_width-1, cereal_depth-1, coating_thickness+1], center = true);\n    }\n}\n\n// Cinnamon-sugar mixture pattern\nmodule cinnamon_pattern() {\n    color([0.6, 0.3, 0.15])\n    for(x = [-cereal_width/2+3 : 3 : cereal_width/2-3]) {\n        for(y = [-cereal_depth/2+3 : 3 : cereal_depth/2-3]) {\n            translate([x, y, cereal_height/2 + coating_thickness/2])\n            cylinder(h = coating_thickness, d = 1.5, $fn = 6);\n        }\n    }\n}\n\n// Surface texture for realistic bread appearance\nmodule bread_texture() {\n    color([0.75, 0.55, 0.35])\n    translate([0, 0, -cereal_height/2+1])\n    for(i = [0:2:cereal_width-2]) {\n        for(j = [0:2:cereal_depth-2]) {\n            translate([i - cereal_width/2, j - cereal_depth/2, 0])\n            sphere(0.3);\n        }\n    }\n}\n\n// Assembly of complete cereal piece\nmodule cereal_piece() {\n    union() {\n        // Main body\n        cereal_base();\n        \n        // Bread texture on bottom\n        bread_texture();\n        \n        // Sugar coating on top\n        translate([0, 0, cereal_height/2 + coating_thickness/2])\n        sugar_coating();\n        \n        // Cinnamon pattern\n        cinnamon_pattern();\n        \n        // Random sugar crystals\n        seed = 42;\n        for(i = [0:20]) {\n            translate([\n                (i*seed)%cereal_width - cereal_width/2,\n                (i*seed*2)%cereal_depth - cereal_depth/2,\n                cereal_height/2 + coating_thickness\n            ])\n            sugar_crystal(0.5 + (i%3)*0.2);\n        }\n    }\n}\n\n// Create a single cereal piece\ncereal_piece();",
    "renders": true
  },
  {
    "food_item": "graham",
    "openscad_code": "// Graham cracker with realistic details\n// Overall dimensions: 50mm x 50mm x 6mm\n\n$fn = 32;\n\n// Main graham color\ncolor([210/255, 180/255, 140/255]) {\n    // Main rectangular body with rounded edges\n    difference() {\n        // Base rectangle\n        rounded_cube([50, 50, 6], 2);\n        \n        // Perforation lines - vertical\n        for (x = [-20, -10, 0, 10, 20]) {\n            translate([x + 25, 25, 3.1])\n                cube([0.5, 50, 0.5]);\n        }\n        \n        // Perforation lines - horizontal\n        for (y = [-20, -10, 0, 10, 20]) {\n            translate([25, y + 25, 3.1])\n                cube([50, 0.5, 0.5]);\n        }\n    }\n}\n\n// Top surface texture - small holes\nmodule graham_texture() {\n    for (x = [5:5:45]) {\n        for (y = [5:5:45]) {\n            translate([x, y, 6])\n                cylinder(h=1, d=1.5);\n        }\n    }\n}\n\n// Apply texture to top\ndifference() {\n    translate([0, 0, 0])\n        rounded_cube([50, 50, 6.5], 2);\n    graham_texture();\n}\n\n// Edge details - slightly darker\ncolor([190/255, 160/255, 120/255]) {\n    // Side edge texture\n    for (i = [0:5:45]) {\n        translate([i, 0, 3])\n            cube([2, 2, 6]);\n        translate([i, 48, 3])\n            cube([2, 2, 6]);\n        translate([0, i, 3])\n            cube([2, 2, 6]);\n        translate([48, i, 3])\n            cube([2, 2, 6]);\n    }\n}\n\n// Wheat grain texture on surface\ncolor([220/255, 190/255, 150/255]) {\n    for (angle = [0:30:150]) {\n        rotate([90, 0, angle])\n            translate([25, 25, -3]) {\n                // Wheat grain shapes\n                scale([1, 0.3, 0.3])\n                    sphere(8);\n                translate([0, 0, 2])\n                    scale([0.8, 0.25, 0.25])\n                        sphere(6);\n            }\n    }\n}\n\n// Helper module for rounded cube\nmodule rounded_cube(size, radius) {\n    hull() {\n        for (x = [0, size[0]])\n            for (y = [0, size[1]])\n                for (z = [0, size[2]])\n                    translate([x, y, z])\n                        sphere(radius);\n    }\n}",
    "renders": true
  },
  {
    "food_item": "farina",
    "openscad_code": "// Farina breakfast cereal bowl with realistic appearance\n// 70mm wide bowl with textured farina surface\n\n$fn = 50;\n\n// Main colors\ncolor_cereal = \"#F5DEB3\";\ncolor_bowl = \"#F0F8FF\";\ncolor_butter = \"#FFD700\";\ncolor_cinnamon = \"#8B4513\";\n\n// Bowl module\nmodule bowl() {\n    // Outer bowl\n    difference() {\n        cylinder(h = 25, r1 = 35, r2 = 30, center = false);\n        translate([0, 0, 2])\n            cylinder(h = 24, r1 = 33, r2 = 28, center = false);\n    }\n    \n    // Bowl rim\n    translate([0, 0, 24])\n        cylinder(h = 3, r1 = 35, r2 = 35, center = false);\n    \n    // Bowl base\n    translate([0, 0, 0])\n        cylinder(h = 5, r1 = 25, r2 = 25, center = false);\n}\n\n// Farina surface texture with slight lumps\nmodule farina_texture() {\n    // Base farina surface\n    color(color_cereal)\n    translate([0, 0, 25])\n        cylinder(h = 8, r1 = 32, r2 = 27, center = false);\n    \n    // Small lumps for realistic texture\n    for(i = [0:30]) {\n        angle = i * 137.5;\n        radius = 15 + (i % 3) * 5;\n        lump_x = cos(angle) * radius;\n        lump_y = sin(angle) * radius;\n        height = 26 + (i % 4) * 0.5 + 2.5;\n        \n        color(color_cereal)\n        translate([lump_x, lump_y, height])\n            sphere(r = 1.5 + (i % 3) * 0.5);\n    }\n}\n\n// Butter pat module\nmodule butter() {\n    color(color_butter)\n    translate([15, -10, 34])\n        cube([8, 6, 3]);\n}\n\n// Cinnamon swirl pattern\nmodule cinnamon_swirl() {\n    for(i = [0:20]) {\n        angle = i * 15;\n        radius = 10 + i * 0.8;\n        swirl_x = cos(angle) * radius;\n        swirl_y = sin(angle) * radius;\n        \n        color(color_cinnamon)\n        translate([swirl_x, swirl_y, 34.5])\n            sphere(r = 0.8);\n    }\n}\n\n// Assemble complete farina bowl\nunion() {\n    // Main bowl\n    color(color_bowl) bowl();\n    \n    // Farina cereal with texture\n    farina_texture();\n    \n    // Butter pat on top\n    butter();\n    \n    // Cinnamon swirl decoration\n    cinnamon_swirl();\n}",
    "renders": true
  },
  {
    "food_item": "creamofwheat",
    "openscad_code": "// Cream of Wheat realistic bowl with textured surface\n// Bowl dimensions: 60mm diameter, 30mm height\n// Cream texture: 40mm diameter, 15mm thick\n\n// Color definitions\ncream_color = [1, 0.9, 0.75];\nbowl_color = [0.95, 0.95, 0.95];\n\n// Main bowl module\nmodule bowl() {\n    color(bowl_color) {\n        // Outer bowl\n        difference() {\n            cylinder(h=30, d=60, $fn=64);\n            translate([0, 0, -1])\n                cylinder(h=32, d=50, $fn=64);\n        }\n        \n        // Bowl rim\n        translate([0, 0, 30])\n            cylinder(h=3, d1=60, d2=65, $fn=64);\n    }\n}\n\n// Cream texture generator\nmodule cream_texture() {\n    color(cream_color) {\n        // Base cream layer\n        translate([0, 0, 15])\n            cylinder(h=15, d=48, $fn=64);\n        \n        // Lumpy surface texture\n        for(i = [0:20]) {\n            angle = i * 137.5;\n            radius = 20 * sqrt(i/20);\n            x = radius * cos(angle);\n            y = radius * sin(angle);\n            \n            translate([x, y, 15 + 15 + 2*rand(i)])\n                sphere(d=2 + rand(i+1)*3, $fn=16);\n        }\n        \n        // Swirl pattern\n        for(t = [0:5:360]) {\n            r = 20 - t/20;\n            x = r * cos(t);\n            y = r * sin(t);\n            z = 30 + 2*sin(t*2);\n            \n            translate([x, y, z])\n                sphere(d=2, $fn=8);\n        }\n    }\n}\n\n// Bowl bottom support ring\nmodule bowl_base() {\n    color(bowl_color) {\n        translate([0, 0, -5])\n            cylinder(h=5, d1=40, d2=50, $fn=64);\n    }\n}\n\n// Random helper function\nfunction rand(seed) = (seed * 9301 + 49297) % 233280 / 233280;\n\n// Steam wisps\nmodule steam() {\n    color([1, 1, 1, 0.3]) {\n        for(i = [0:3]) {\n            translate([10*rand(i), 10*rand(i+10), 35 + 5*i])\n                rotate([90 + 10*rand(i+20), 0, 45*i])\n                    scale([0.5, 0.5, 1 + 2*i])\n                        cylinder(h=2 + 3*i, d=2, $fn=8);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    bowl();\n    bowl_base();\n    cream_texture();\n    steam();\n}",
    "renders": true
  },
  {
    "food_item": "shreddedwheat",
    "openscad_code": "// Shredded Wheat Biscuit - Realistic Style, Medium Complexity\n// Overall dimensions: 70mm x 50mm x 25mm\n\n// Main biscuit body\nmodule shredded_wheat() {\n    color(\"#C4A484\") // Wheat color\n    union() {\n        // Base biscuit shape with rounded edges\n        difference() {\n            minkowski() {\n                cube([65, 45, 20], center=true);\n                sphere(2.5);\n            }\n            \n            // Hollow center for printing\n            translate([0, 0, 1])\n            scale([0.9, 0.9, 0.9])\n            cube([65, 45, 20], center=true);\n        }\n        \n        // Shredded wheat fibers on top\n        for (y = [-20:5:20]) {\n            for (x = [-30:4:30]) {\n                translate([x, y, 11.5])\n                rotate([90, 0, rand(0, 10)])\n                scale([0.8, 1, 1])\n                cylinder(h=2.5, d=2, $fn=8);\n            }\n        }\n        \n        // Side fiber strands\n        for (i = [0:3]) {\n            // Left side\n            translate([-33.5, -22.5 + i*15, 0])\n            rotate([0, 90, 0])\n            union() {\n                for (j = [0:5]) {\n                    translate([0, 0, -10 + j*4])\n                    rotate([0, 0, rand(-5, 5)])\n                    cylinder(h=3, d=2.5, $fn=6);\n                }\n            }\n            \n            // Right side\n            translate([33.5, -22.5 + i*15, 0])\n            rotate([0, 90, 0])\n            union() {\n                for (j = [0:5]) {\n                    translate([0, 0, -10 + j*4])\n                    rotate([0, 0, rand(-5, 5)])\n                    cylinder(h=3, d=2.5, $fn=6);\n                }\n            }\n            \n            // Front side\n            translate([-22.5 + i*15, -23.5, 0])\n            rotate([90, 0, 0])\n            union() {\n                for (j = [0:5]) {\n                    translate([0, 0, -10 + j*4])\n                    rotate([0, 0, rand(-5, 5)])\n                    cylinder(h=3, d=2.5, $fn=6);\n                }\n            }\n            \n            // Back side\n            translate([-22.5 + i*15, 23.5, 0])\n            rotate([90, 0, 0])\n            union() {\n                for (j = [0:5]) {\n                    translate([0, 0, -10 + j*4])\n                    rotate([0, 0, rand(-5, 5)])\n                    cylinder(h=3, d=2.5, $fn=6);\n                }\n            }\n        }\n        \n        // Surface texture details\n        for (x = [-30:8:30]) {\n            for (y = [-20:8:20]) {\n                translate([x, y, 11])\n                scale([1, 1.5, 0.5])\n                sphere(1.5, $fn=6);\n            }\n        }\n        \n        // Corners rounding\n        translate([0, 0, 11])\n        color(\"#B8956F\")\n        for (i = [0:3]) {\n            rotate([0, 0, i*90])\n            translate([25, 15, 0])\n            scale([1, 1, 0.3])\n            sphere(3, $fn=8);\n        }\n    }\n}\n\n// Helper function for random variation\nfunction rand(min, max) = min + (max - min) * (rands(0, 1, 1)[0]);\n\n// Render the shredded wheat\nshredded_wheat();",
    "renders": true
  },
  {
    "food_item": "wheaties",
    "openscad_code": "// Wheaties cereal flake - medium complexity realistic style\n\n$fn = 36;\n\n// Main flake shape module\nmodule wheaties_flake() {\n    color([0.8, 0.6, 0.3])  // Wheat color\n    \n    // Main flake body with rounded edges\n    union() {\n        // Central flake body - oval shape\n        scale([1.2, 1, 0.15]) \n        sphere(r = 20);\n        \n        // Thicken center slightly\n        translate([0, 0, -1])\n        scale([1, 0.8, 0.1])\n        sphere(r = 18);\n        \n        // Add surface texture with wheat kernel bumps\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90])\n            translate([8 + i*2, 5, 0.5])\n            scale([1, 0.8, 0.3])\n            sphere(r = 3);\n        }\n        \n        for(i = [0:3]) {\n            rotate([0, 0, i * 90 + 45])\n            translate([-6 - i, 8, 0.5])\n            scale([0.8, 1, 0.3])\n            sphere(r = 2.5);\n        }\n        \n        // Wheat bran texture lines\n        for(angle = [0:30:150]) {\n            rotate([0, 0, angle])\n            translate([10, 0, 0.2])\n            scale([0.3, 8, 0.1])\n            rotate([90, 0, 90])\n            cylinder(r1 = 1, r2 = 0.5, h = 2);\n        }\n        \n        // Ragged edge details for realism\n        difference() {\n            // Base flake\n            scale([1.2, 1, 0.15]) \n            sphere(r = 20);\n            \n            // Create irregular edge cuts\n            for(i = [0:8]) {\n                rotate([0, 0, i * 45])\n                translate([22, 0, 0])\n                scale([1, 0.5, 2])\n                sphere(r = 3);\n            }\n        }\n    }\n}\n\n// Create a small stack of flakes\nmodule wheaties_stack() {\n    // First flake flat\n    wheaties_flake();\n    \n    // Second flake slightly rotated and offset\n    translate([0, 0, 4])\n    rotate([5, 0, 15])\n    wheaties_flake();\n    \n    // Third flake more rotated\n    translate([2, 1, 8])\n    rotate([-3, 8, -10])\n    wheaties_flake();\n}\n\n// Single flake for printing\nwheaties_flake();",
    "renders": true
  },
  {
    "food_item": "cheerios",
    "openscad_code": "// Cheerios - Realistic style with medium complexity\n// Overall diameter ~90mm, thickness ~12mm\n\n$fn = 50;\n\n// Main cheerio body - torus shape\nmodule cheerio_body() {\n    color([0.85, 0.65, 0.25])  // Cheerios golden color\n    \n    difference() {\n        // Outer torus\n        rotate_extrude(angle = 360) \n            translate([36, 0, 0]) \n                circle(r = 4.5);\n        \n        // Inner hole - slightly chamfered for realistic appearance\n        rotate_extrude(angle = 360) \n            translate([36, 0, 0]) \n                circle(r = 4.0);\n    }\n}\n\n// Surface texture - small bumps for the oat texture\nmodule texture_bumps() {\n    color([0.80, 0.60, 0.20])\n    \n    for(i = [0:5:359]) {\n        rotate([0, 0, i]) {\n            translate([36, 0, 0]) {\n                rotate([0, 90, 0]) {\n                    // Random bump placement\n                    for(j = [0:15:359]) {\n                        rotate([0, 0, j]) {\n                            translate([0, rand(i*10+j)*1.5, 0]) {\n                                scale([1, 1, 0.6]) \n                                    sphere(r = 0.8 + rand(i*10+j)*0.4);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Seed details - visible oat pieces\nmodule oat_seeds() {\n    color([0.75, 0.55, 0.15])\n    \n    // Place seeds around the surface\n    for(i = [0:30:359]) {\n        rotate([0, 0, i]) {\n            translate([36, 0, 0]) {\n                rotate([0, 90, 0]) {\n                    for(j = [0:45:359]) {\n                        rotate([0, j, 0]) {\n                            translate([0, 0, 0]) {\n                                // Elongated seed shapes\n                                scale([1.2, 0.7, 0.4]) \n                                    rotate([0, 0, rand(i*100+j)*30]) \n                                        sphere(r = 1.2);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Edge detail - slightly irregular for realistic appearance\nmodule edge_detail() {\n    color([0.82, 0.62, 0.22])\n    \n    for(i = [0:10:359]) {\n        rotate([0, 0, i]) {\n            translate([36, 0, 0]) {\n                // Small edge variations\n                translate([rand(i)*2-1, 0, rand(i*2)*2-1]) {\n                    sphere(r = 0.5);\n                }\n            }\n        }\n    }\n}\n\n// Helper function for pseudo-random values\nfunction rand(x) = (sin(x*123.456) * 43758.5453123) % 1;\n\n// Main assembly\nunion() {\n    cheerio_body();\n    \n    // Add surface details with slight offset\n    translate([0, 0, 0.2]) {\n        texture_bumps();\n    }\n    \n    translate([0, 0, -0.2]) {\n        texture_bumps();\n    }\n    \n    // Add oat seeds on top surface\n    translate([0, 0, 4.2]) {\n        oat_seeds();\n    }\n    \n    // Add oat seeds on bottom surface\n    translate([0, 0, -4.2]) {\n        rotate([180, 0, 0]) {\n            oat_seeds();\n        }\n    }\n    \n    // Edge variations\n    edge_detail();\n}",
    "renders": true
  },
  {
    "food_item": "cornflakes",
    "openscad_code": "// Cornflake with realistic medium detail\n// Designed for 3D printing, no overhangs, 1mm wall thickness\n\nmodule cornflake_base() {\n    // Main flake body - thin wavy disc\n    difference() {\n        // Main wavy shape\n        scale([1, 0.8, 0.15]) \n        sphere(d=45, $fn=64);\n        \n        // Center hole\n        translate([0,0,-2])\n        cylinder(h=5, d=8, $fn=32);\n    }\n}\n\nmodule cornflake_ribs() {\n    // Raised ribs radiating from center\n    for(i=[0:30:359]) {\n        rotate([0, 0, i])\n        translate([0, 0, 0])\n        scale([1, 0.3, 0.4])\n        rotate([90, 0, 0])\n        cylinder(h=22, d1=2, d2=0.5, $fn=8);\n    }\n}\n\nmodule cornflake_texture() {\n    // Small bumps for corn texture\n    for(i=[0:15:359]) {\n        rotate([0, 0, i])\n        for(j=[8:4:20]) {\n            translate([j, 0, 0.5])\n            scale([1, 0.7, 0.5])\n            sphere(d=1.2, $fn=8);\n        }\n    }\n}\n\nmodule cornflake_edge_waves() {\n    // Wavy edge detail\n    for(i=[0:20:359]) {\n        rotate([0, 0, i])\n        translate([22, 0, 0])\n        rotate([0, 0, sin(i*4)*15])\n        scale([1, 0.8, 0.1])\n        cylinder(h=3, d=6, $fn=6);\n    }\n}\n\nmodule cornflake_cracks() {\n    // Surface cracks for realism\n    for(i=[0:45:359]) {\n        rotate([0, 0, i])\n        translate([10, 0, 0.1])\n        scale([0.05, 1, 0.05])\n        cube([15, 0.8, 0.5]);\n        \n        rotate([0, 0, i+22])\n        translate([15, 0, 0.1])\n        scale([0.05, 1, 0.05])\n        cube([10, 0.6, 0.5]);\n    }\n}\n\n// Main cornflake assembly\ncolor([0.95, 0.8, 0.45]) // Golden corn color\nunion() {\n    cornflake_base();\n    \n    // Add raised details\n    translate([0, 0, 0.2])\n    cornflake_ribs();\n    \n    translate([0, 0, 0.8])\n    cornflake_texture();\n    \n    translate([0, 0, 1.0])\n    cornflake_edge_waves();\n    \n    translate([0, 0, 0.5])\n    cornflake_cracks();\n}",
    "renders": true
  },
  {
    "food_item": "ricecrispy",
    "openscad_code": "// Rice Crispy Treat - Realistic style with medium complexity\n// Overall dimensions: ~60mm x 40mm x 25mm\n\n$fn = 30;\n\n// Main crispy treat shape\nmodule crispy_treat() {\n    // Base shape - slightly irregular rectangular prism\n    difference() {\n        // Main body with rounded edges\n        hull() {\n            translate([-28, -18, -10]) sphere(r = 8);\n            translate([28, -18, -10]) sphere(r = 8);\n            translate([28, 18, -10]) sphere(r = 8);\n            translate([-28, 18, -10]) sphere(r = 8);\n            translate([-28, -18, 10]) sphere(r = 8);\n            translate([28, -18, 10]) sphere(r = 8);\n            translate([28, 18, 10]) sphere(r = 8);\n            translate([-28, 18, 10]) sphere(r = 8);\n        }\n        \n        // Add some irregularity by subtracting\n        for (i = [0:8]) {\n            translate([sin(i*45)*20, cos(i*45)*12, 0])\n                sphere(r = 3 + i*0.5);\n        }\n    }\n}\n\n// Individual rice crispy - puffed rice grain\nmodule rice_crispy() {\n    color([0.85, 0.75, 0.65]) {\n        scale([1.2, 1, 1])\n            sphere(r = 1.5);\n    }\n}\n\n// Marshmallow binding\nmodule marshmallow() {\n    color([0.98, 0.95, 0.92]) {\n        difference() {\n            sphere(r = 1);\n            for (i = [0:3]) {\n                rotate([0, i*90, 0])\n                    translate([0, 0, -1])\n                    cube([2.5, 0.3, 2], center = true);\n            }\n        }\n    }\n}\n\n// Create clustered texture\nmodule crispy_cluster() {\n    union() {\n        // Main rice crispies\n        for (i = [0:15]) {\n            translate([\n                sin(i*137.5)*8 + rand(i)*3,\n                cos(i*137.5)*6 + rand(i+1)*2,\n                rand(i+2)*4 - 2\n            ]) {\n                rotate([rand(i)*30, rand(i+1)*30, rand(i+2)*30])\n                    rice_crispy();\n            }\n        }\n        \n        // Visible marshmallow between grains\n        for (j = [0:8]) {\n            translate([\n                sin(j*90)*6 + rand(j)*1.5,\n                cos(j*90)*4 + rand(j+5)*1.5,\n                rand(j+10)*3 - 1.5\n            ]) {\n                marshmallow();\n            }\n        }\n    }\n}\n\n// Helper function for pseudo-randomness\nfunction rand(n) = (sin(n*12.9898)*43758.5453)%1;\n\n// Main assembly\ncolor([0.95, 0.85, 0.75, 0.9]) {\n    // Base treat shape\n    crispy_treat();\n    \n    // Surface texture\n    for (k = [0:30]) {\n        translate([\n            sin(k*73)*25,\n            cos(k*73)*15,\n            10 - rand(k)*2\n        ]) {\n            rotate([rand(k)*20-10, rand(k+1)*20-10, 0])\n                scale(0.7 + rand(k+2)*0.3)\n                crispy_cluster();\n        }\n    }\n    \n    // Edges with more texture\n    for (e = [0:12]) {\n        translate([\n            sin(e*30)*30,\n            cos(e*30)*18,\n            rand(e+3)*16 - 8\n        ]) {\n            rotate([0, 0, e*30])\n                translate([0, 0, rand(e+4)*2])\n                crispy_cluster();\n        }\n    }\n}",
    "renders": true
  },
  {
    "food_item": "puffedrice",
    "openscad_code": "module puffed_rice() {\n    // Main puffed rice body - elongated ellipsoid shape\n    difference() {\n        union() {\n            // Create irregular ellipsoid shape\n            scale([1, 0.7, 1.2])\n            sphere(8, $fn=20);\n            \n            // Add slight bulge on one side for characteristic puff\n            translate([5, 2, 3])\n            scale([0.8, 0.6, 0.9])\n            sphere(6, $fn=15);\n            \n            // Add smaller bulge on other side\n            translate([-4, -1, 2])\n            scale([0.7, 0.5, 0.8])\n            sphere(5, $fn=15);\n        }\n        \n        // Create hollow center for realistic puff\n        translate([0, 0, 0])\n        scale([0.8, 0.5, 0.9])\n        sphere(6.5, $fn=20);\n    }\n    \n    // Add surface texture with small dimples\n    for (i = [0:15]) {\n        rotate([rand() * 360, rand() * 360, rand() * 360])\n        translate([rand() * 8 - 4, rand() * 6 - 3, rand() * 8 - 4])\n        sphere(0.5, $fn=8);\n    }\n    \n    // Add characteristic ridges along the grain\n    for (i = [0:3]) {\n        rotate([0, 0, i * 45])\n        translate([0, 0, 5])\n        rotate([90, 0, 0])\n        scale([0.3, 0.1, 1.5])\n        cylinder(h=1, r1=3, r2=2, $fn=6);\n    }\n    \n    // Add tiny air bubble holes on surface\n    for (i = [0:8]) {\n        rotate([rand() * 180, rand() * 180, rand() * 180])\n        translate([rand() * 7 - 3.5, rand() * 5 - 2.5, rand() * 7 - 3.5])\n        sphere(0.3, $fn=6);\n    }\n}\n\n// Create a small cluster of 3 puffed rice pieces\ntranslate([-15, 0, 0])\ncolor([0.95, 0.88, 0.72])\npuffed_rice();\n\ntranslate([0, 8, 5])\nrotate([10, 0, 25])\ncolor([0.93, 0.85, 0.70])\npuffed_rice();\n\ntranslate([12, -3, 2])\nrotate([-15, 5, -20])\ncolor([0.97, 0.90, 0.74])\npuffed_rice();",
    "renders": true
  },
  {
    "food_item": "ricecake",
    "openscad_code": "// Realistic Korean rice cake (Tteok) with sesame seed topping\n// Medium complexity, 3D-printable, ~70mm diameter\n\n// Parameters\ndiameter = 70;\nheight = 20;\nedge_rounding = 3;\nsesame_count = 25;\nsesame_size = 1.5;\nbase_thickness = 3;\n\n// Main rice cake body - slightly domed top with rounded edges\nmodule rice_cake_body() {\n    color(\"floralwhite\")\n    difference() {\n        // Main cylindrical base\n        cylinder(h=height, d=diameter, $fn=100);\n        \n        // Create domed top by subtracting sphere\n        translate([0, 0, height - diameter/4])\n            sphere(d=diameter*1.1, $fn=100);\n        \n        // Round bottom edge\n        translate([0, 0, -edge_rounding])\n            cylinder(h=height+edge_rounding*2, d=diameter-edge_rounding*2, $fn=100);\n        \n        // Flatten very bottom\n        translate([0, 0, -1])\n            cube([diameter, diameter, 2], center=true);\n    }\n}\n\n// Cross-hatch texture pattern on top surface\nmodule top_texture() {\n    color(\"ivory\")\n    for(i=[-diameter/2+5:diameter/10:diameter/2-5]) {\n        // Horizontal lines\n        translate([0, i, height-0.5])\n            cube([diameter-10, 0.5, 0.5], center=true);\n        \n        // Vertical lines\n        translate([i, 0, height-0.5])\n            cube([0.5, diameter-10, 0.5], center=true);\n    }\n}\n\n// Sesame seeds scattered on top\nmodule sesame_seeds() {\n    color(\"darkslategray\")\n    for(i=[0:sesame_count-1]) {\n        // Random placement using golden ratio for distribution\n        angle = i * 137.508;\n        radius = sqrt(i) * (diameter/2-5)/sqrt(sesame_count);\n        \n        translate([\n            cos(angle) * radius,\n            sin(angle) * radius,\n            height + 0.75\n        ])\n            scale([1, 0.7, 0.5])\n                sphere(d=sesame_size, $fn=8);\n    }\n}\n\n// Side texture - slight indentations for handmade appearance\nmodule side_texture() {\n    color(\"ivory\")\n    difference() {\n        children();\n        \n        // Small random indentations\n        for(i=[0:12]) {\n            rotate([0, 0, i * 30]) {\n                translate([diameter/2-1, 0, i * 1.5])\n                    sphere(d=3, $fn=10);\n            }\n            \n            rotate([0, 0, i * 30 + 15]) {\n                translate([diameter/2-1, 0, i * 1.5 + 7])\n                    sphere(d=2.5, $fn=10);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main body with side texture\n    side_texture() rice_cake_body();\n    \n    // Top surface details\n    top_texture();\n    \n    // Sesame seed topping\n    sesame_seeds();\n}",
    "renders": true
  },
  {
    "food_item": "poprice",
    "openscad_code": "// Realistic Poprice (Puffed Rice Snack) - 3D Printable Model\n// Size: 40mm x 40mm x 25mm\n\n$fn = 32;\n\nmodule puffed_rice_grain() {\n    // Individual puffed rice grain - irregular oval shape\n    scale([1, 0.7, 0.4]) \n    rotate([0, 20, 0])\n    sphere(3);\n}\n\nmodule rice_texture() {\n    // Create array of puffed rice grains for realistic texture\n    for (x = [-15:5:15]) {\n        for (y = [-15:5:15]) {\n            translate([x + (y%2)*2.5, y, -5 + sin(x+y)*2])\n            rotate([rand(), rand(), rand()*360])\n            color([0.9, 0.85, 0.7]) \n            puffed_rice_grain();\n        }\n    }\n}\n\nmodule caramel_binder() {\n    // Caramel binding the rice together - honeycomb structure\n    difference() {\n        union() {\n            // Main caramel block\n            color([0.72, 0.52, 0.25]) \n            cube([38, 38, 8], center=true);\n            \n            // Honeycomb holes for texture\n            for (x = [-15:7.5:15]) {\n                for (y = [-15:7.5:15]) {\n                    translate([x, y, 0])\n                    cylinder(h=10, r=2.5, center=true);\n                }\n            }\n        }\n        \n        // Remove top to create binding layer\n        translate([0, 0, 5])\n        cube([50, 50, 10], center=true);\n    }\n}\n\nmodule chocolate_coating() {\n    // Chocolate coating on bottom\n    difference() {\n        color([0.4, 0.2, 0.1]) \n        cube([40, 40, 3], center=true);\n        \n        // Rounded edges\n        translate([0, 0, -1.5])\n        minkowski() {\n            cube([36, 36, 0.1], center=true);\n            sphere(2);\n        }\n    }\n}\n\nmodule sugar_glaze() {\n    // Thin sugar glaze on top\n    color([0.95, 0.9, 0.8]) \n    translate([0, 0, 4.5])\n    cube([40, 40, 0.5], center=true);\n}\n\n// Main assembly\ntranslate([0, 0, 12.5])\nunion() {\n    // Base chocolate coating\n    chocolate_coating();\n    \n    // Caramel binding layer\n    translate([0, 0, 4])\n    caramel_binder();\n    \n    // Puffed rice texture layer\n    rice_texture();\n    \n    // Sugar glaze top\n    sugar_glaze();\n}",
    "renders": true
  },
  {
    "food_item": "wheatgerm",
    "openscad_code": "// Wheatgerm kernel - realistic medium complexity\n// Main grain body with germ attached, sized ~60mm\n\n// Colors\ngrain_color = \"#D4A574\";\ngerm_color = \"#8B6F47\";\nroot_color = \"#C19A6B\";\n\n// Main grain body - elongated oval with slight twist\nmodule grain_body() {\n    color(grain_color)\n    union() {\n        // Main hull body\n        hull();\n        // Surface ridges\n        ridges();\n        // Beard bristles\n        beard();\n    }\n}\n\nmodule hull() {\n    // Create main body using scaled spheres\n    difference() {\n        // Base shape\n        scale([1, 0.7, 3]) \n        sphere(d=20, $fn=32);\n        \n        // Indentation on one side\n        translate([0, -5, 5])\n        scale([0.8, 0.3, 2])\n        rotate([0, 20, 0])\n        sphere(d=15, $fn=32);\n        \n        // Hollow inside for 3D printing\n        translate([0, 0, 5])\n        scale([0.7, 0.5, 2.5])\n        sphere(d=15, $fn=32);\n    }\n}\n\nmodule ridges() {\n    // Longitudinal ridges along grain\n    for(i = [0:30:150]) {\n        rotate([0, 0, i])\n        translate([8, 0, -25])\n        scale([0.2, 0.2, 1])\n        rotate([90, 0, 0])\n        cylinder(h=50, d1=3, d2=1, $fn=8);\n    }\n}\n\nmodule beard() {\n    // Beard at bottom of grain\n    for(i = [0:15:360]) {\n        rotate([0, 0, i])\n        translate([0, 2, -29])\n        rotate([90 + sin(i*3)*10, 0, 0])\n        scale([0.3, 0.3, 1])\n        cylinder(h=8 + sin(i*5)*3, d1=0.3, d2=0.1, $fn=6);\n    }\n}\n\n// Wheat germ - the nutrient-rich embryo\nmodule wheat_germ() {\n    color(germ_color)\n    union() {\n        // Main germ body\n        translate([8, 0, 10])\n        rotate([0, 10, 0])\n        scale([0.8, 0.4, 0.6])\n        sphere(d=15, $fn=32);\n        \n        // Germ extensions\n        for(i = [0:45:135]) {\n            rotate([0, 0, i])\n            translate([14, 0, 8])\n            rotate([0, -20, 0])\n            scale([0.3, 0.2, 0.5])\n            cylinder(h=8, d1=3, d2=1, $fn=8);\n        }\n        \n        // Root primordia\n        translate([12, 0, 5])\n        rotate([0, 90, 0])\n        scale([0.2, 0.2, 1])\n        cylinder(h=5, d=2, $fn=8);\n    }\n}\n\n// Surface texture details\nmodule surface_texture() {\n    // Small bumps on grain surface\n    for(i = [0:20:160]) {\n        for(j = [-20:10:20]) {\n            rotate([0, 0, i])\n            translate([cos(i*2)*8, sin(i*2)*5, j])\n            sphere(d=0.5, $fn=8);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    grain_body();\n    wheat_germ();\n    surface_texture();\n}\n\n// Position for printing\ntranslate([0, 0, 30])\nrotate([90, 0, 0])",
    "renders": true
  },
  {
    "food_item": "wheatbran",
    "openscad_code": "// Wheatbran food item - realistic style\ncolor([0.82, 0.65, 0.45]) // Wheat color\n\n// Main bran flake structure\nmodule bran_flake() {\n    difference() {\n        // Base flake shape\n        scale([1, 1.2, 0.3])\n        sphere(d=25, $fn=20);\n        \n        // Top surface indentations\n        for(i = [0:5]) {\n            translate([sin(i*60)*8, cos(i*60)*10, 2.5])\n            scale([1, 1, 0.5])\n            sphere(d=8, $fn=8);\n        }\n        \n        // Bottom cavity\n        translate([0, 0, -1.5])\n        scale([0.8, 0.9, 0.5])\n        sphere(d=25, $fn=20);\n    }\n}\n\n// Bran texture layer\nmodule bran_texture() {\n    union() {\n        // Top surface texture\n        for(y = [-10:5:10]) {\n            for(x = [-10:5:10]) {\n                translate([x, y, 3.8])\n                scale([0.8, 0.8, 0.2])\n                sphere(d=3, $fn=6);\n            }\n        }\n        \n        // Edge texture details\n        for(i = [0:30:359]) {\n            translate([sin(i)*12.5, cos(i)*15, 0])\n            rotate([0, 0, i])\n            scale([0.3, 1, 0.4])\n            cylinder(h=2, d1=2, d2=1);\n        }\n    }\n}\n\n// Wheat germ pieces\nmodule wheat_germ() {\n    color([0.75, 0.55, 0.35])\n    for(i = [0:8]) {\n        translate([sin(i*40)*6, cos(i*40)*8, 4.5])\n        rotate([90, 0, 0])\n        scale([0.3, 0.3, 1.5])\n        cylinder(h=3, d1=1.5, d2=0.5);\n    }\n}\n\n// Assemble the wheatbran\nunion() {\n    bran_flake();\n    bran_texture();\n    wheat_germ();\n}",
    "renders": true
  },
  {
    "food_item": "oatbran",
    "openscad_code": "// Realistic Oatbran Cluster - Medium Complexity\n// Features: Individual oat flakes with bran texture, slight clumping, natural color variation\n\n$fn = 24;  // Smooth curves for 3D printing\n\n// Main oatbran cluster\nmodule oat_cluster() {\n    color(\"#C19A6B\")  // Natural oat color\n    \n    // Base cluster shape - slightly irregular\n    hull() {\n        translate([-5, -8, 0]) sphere(12);\n        translate([8, 5, 3]) sphere(10);\n        translate([-3, 6, 8]) sphere(9);\n        translate([4, -4, 5]) sphere(11);\n    }\n    \n    // Add surface texture with individual oat flakes\n    difference() {\n        // Main body\n        hull() {\n            translate([-5, -8, 0]) sphere(12);\n            translate([8, 5, 3]) sphere(10);\n            translate([-3, 6, 8]) sphere(9);\n            translate([4, -4, 5]) sphere(11);\n        }\n        \n        // Create irregular surface by subtracting spheres\n        for(i = [1:15]) {\n            rotate([rand(i*2), rand(i*3), rand(i*5)]) \n                translate([rand(20)-10, rand(20)-10, rand(15)]) \n                    sphere(2 + rand(3));\n        }\n    }\n    \n    // Add protruding oat flakes on surface\n    for(i = [1:25]) {\n        rotate([rand(i*7), rand(i*11), rand(i*13)]) {\n            translate([rand(25)-12.5, rand(25)-12.5, rand(10)+5]) {\n                scale([1, 1.2, 0.3]) \n                    rotate([rand(30)-15, rand(30)-15, rand(180)]) \n                        oat_flake();\n            }\n        }\n    }\n    \n    // Add bran specks - darker pieces\n    color(\"#8B6F47\") {\n        for(i = [1:40]) {\n            translate([rand(30)-15, rand(30)-15, rand(20)]) \n                scale([0.5, 0.5, 0.2]) \n                    sphere(1 + rand(1.5));\n        }\n    }\n}\n\n// Individual oat flake module\nmodule oat_flake() {\n    difference() {\n        // Main flake body - elongated oval\n        scale([1, 1.8, 1]) \n            cylinder(h = 0.5, r = 2.5);\n        \n        // Add central groove\n        translate([0, 0, 0.3]) \n            cube([0.5, 4, 0.5], center = true);\n        \n        // Add texture lines\n        for(i = [1:3]) {\n            rotate([0, 0, i*30]) \n                translate([0, 1, 0.3]) \n                    cube([0.2, 2, 0.3], center = true);\n        }\n    }\n}\n\n// Helper function for random values\nfunction rand(seed) = rands(0, 1, 1, seed)[0];\n\n// Main assembly\nrotate([15, 0, 45])  // Slight tilt for natural appearance\n    oat_cluster();",
    "renders": true
  },
  {
    "food_item": "ryeflour",
    "openscad_code": "// Rye flour pile - realistic medium complexity\n// Dimensions: ~70mm diameter base, 45mm high\n\n$fn=32;\n\n// Main flour color\ncolor([0.85, 0.78, 0.65]) \n\n// Main flour pile - multiple overlapping spheres for natural heap\nmodule flour_pile() {\n    union() {\n        // Base sphere\n        sphere(d=65);\n        \n        // Additional spheres for uneven heap\n        translate([10, -15, 15]) sphere(d=40);\n        translate([-12, 18, 12]) sphere(d=35);\n        translate([8, 20, 8]) sphere(d=25);\n        translate([-18, -8, 18]) sphere(d=30);\n        translate([20, 5, 10]) sphere(d=28);\n        \n        // Smaller spheres for texture\n        for(i=[1:20]) {\n            translate([\n                sin(i*137.5)*25,\n                cos(i*137.5)*25,\n                35 + rand(i, 1)*15\n            ]) {\n                sphere(d=8 + rand(i, 2)*4);\n            }\n        }\n    }\n}\n\n// Rye berry seeds mixed in flour\nmodule rye_seeds() {\n    color([0.35, 0.25, 0.15]) {\n        for(i=[1:15]) {\n            translate([\n                sin(i*89.7)*30,\n                cos(i*89.7)*30,\n                25 + rand(i, 3)*20\n            ]) {\n                rotate([rand(i, 4)*360, rand(i, 5)*360, 0]) {\n                    scale([1, 0.6, 0.3]) sphere(d=6);\n                }\n            }\n        }\n    }\n}\n\n// Surface texture - small depressions\nmodule surface_details() {\n    difference() {\n        children();\n        color([0.85, 0.78, 0.65]) {\n            for(i=[1:30]) {\n                translate([\n                    sin(i*67.3)*32,\n                    cos(i*67.3)*32,\n                    35 + rand(i, 6)*8\n                ]) {\n                    sphere(d=2 + rand(i, 7)*2);\n                }\n            }\n        }\n    }\n}\n\n// Helper function for pseudo-random numbers\nfunction rand(s, a) = (s*9301 + a*49297) % 233280 / 233280;\n\n// Combine all elements\nsurface_details() {\n    union() {\n        flour_pile();\n        rye_seeds();\n    }\n}",
    "renders": true
  },
  {
    "food_item": "barleyflour",
    "openscad_code": "// Barley Flour in a Small Sack\n// Realistic style, medium complexity (≈110 lines)\n\n$fn = 32;\n\n// Main sack body\nmodule sack_body() {\n    difference() {\n        // Outer sack shell\n        color(\"tan\")\n        scale([1, 0.7, 1.3])\n        sphere(d = 60);\n\n        // Hollow out the inside\n        translate([0, 0, -5])\n        scale([0.9, 0.6, 1.2])\n        sphere(d = 58);\n    }\n}\n\n// Gathered top of sack (wrinkled cloth)\nmodule sack_top() {\n    difference() {\n        // Upper gathered rim\n        color(\"burlywood\")\n        translate([0, 0, 36])\n        cylinder(h = 12, d1 = 45, d2 = 35, $fn = 48);\n\n        // Central hole for pouring\n        translate([0, 0, 34])\n        cylinder(h = 20, d = 20);\n    }\n}\n\n// Cloth folds around the neck\nmodule sack_folds() {\n    for (i = [0:35:315]) {\n        rotate([0, 0, i])\n        translate([18, 0, 42])\n        rotate([90, 0, 0])\n        color(\"tan\")\n        scale([1, 0.3, 1.8])\n        cylinder(h = 8, d = 6, $fn = 6);\n    }\n}\n\n// Stitching line around sack seam\nmodule sack_seam() {\n    for (z = [-25:5:25]) {\n        translate([0, -21, z])\n        color(\"saddlebrown\")\n        sphere(d = 1.5);\n    }\n}\n\n// Barley grains spilling out\nmodule spilled_grains() {\n    // Random seed for reproducibility\n    seed = 42;\n    for (i = [0:15]) {\n        // Pseudo-random positions based on seed\n        x = (i * 73 + seed) % 40 - 20;\n        y = (i * 37 + seed) % 30 - 15;\n        z = (i * 97 + seed) % 10;\n        \n        translate([x, y, -20 + z])\n        rotate([rand(i, 1) * 360, rand(i, 2) * 360, rand(i, 3) * 360])\n        color(\"goldenrod\")\n        scale([1, 0.4, 0.3])\n        sphere(d = 3);\n    }\n}\n\n// Helper for pseudo-random numbers\nfunction rand(i, n) = ((i * 123 + n * 456) % 100) / 100;\n\n// Sack label patch\nmodule label_patch() {\n    translate([0, -19, 5])\n    rotate([80, 0, 0])\n    color(\"wheat\")\n    cube([25, 15, 0.5], center = true);\n}\n\n// Textured surface pattern for sack fabric\nmodule sack_texture() {\n    difference() {\n        sack_body();\n        // Tiny holes for woven texture\n        for (i = [-3:3])\n        for (j = [-3:3])\n        for (k = [-3:3]) {\n            translate([i * 8, j * 8, k * 8])\n            sphere(d = 0.5);\n        }\n    }\n}\n\n// Drawstring cord\nmodule drawstring() {\n    color(\"saddlebrown\")\n    translate([0, 0, 42])\n    rotate_extrude(angle = 360, $fn = 64)\n    translate([18, 0, 0])\n    circle(d = 2);\n}\n\n// Assembly\nsack_texture();\nsack_top();\nsack_folds();\nsack_seam();\nlabel_patch();\ndrawstring();\nspilled_grains();",
    "renders": true
  },
  {
    "food_item": "oatflour",
    "openscad_code": "// Oat flour realistic model - medium complexity\n// Overall dimensions: 80x50x30mm\n\n// Main flour pile base\ncolor(\"wheat\")\ndifference() {\n    hull() {\n        // Create uneven mound shape\n        for(i = [0:15]) {\n            translate([\n                sin(i*137.5)*25 + rand(i)*5, \n                cos(i*137.5)*15 + rand(i+100)*5, \n                0\n            ])\n            sphere(d=6 + rand(i+200)*3, $fn=8);\n        }\n    }\n    \n    // Flatten bottom for printing\n    translate([-50,-30,-2])\n        cube([100,60,2]);\n}\n\n// Surface texture - oat particles\nmodule oat_particle() {\n    color(\"burlywood\")\n    scale([1, 0.8, 0.4])\n    sphere(d=2, $fn=6);\n}\n\n// Distribute particles across surface\nfor(i = [0:80]) {\n    rotate([rand(i+300)*20-10, rand(i+400)*20-10, 0])\n    translate([\n        sin(i*137.5)*30 + rand(i+500)*8 - 4, \n        cos(i*137.5)*20 + rand(i+600)*8 - 4, \n        rand(i+700)*8 + 8\n    ])\n    rotate([0,0,rand(i+800)*360])\n    oat_particle();\n}\n\n// Bran flecks\nmodule bran_fleck() {\n    color(\"saddlebrown\")\n    scale([1, 0.3, 0.1])\n    rotate([0,90,0])\n    cylinder(h=1.5, d=3, $fn=4);\n}\n\n// Add bran flecks\nfor(i = [0:40]) {\n    translate([\n        sin(i*97.3)*32 + rand(i+900)*10 - 5, \n        cos(i*97.3)*22 + rand(i+1000)*10 - 5, \n        rand(i+1100)*6 + 10\n    ])\n    rotate([rand(i+1200)*90-45, rand(i+1300)*90-45, rand(i+1400)*180])\n    bran_fleck();\n}\n\n// Fine powder layer effect\ncolor(\"beige\")\ntranslate([0,0,-1])\n    cylinder(h=1, d=100, $fn=64);\n\n// Helper function for pseudo-random values\nfunction rand(seed) = (seed*9301 + 49297) % 233280 / 233280;",
    "renders": true
  },
  {
    "food_item": "cornflour",
    "openscad_code": "// Cornflour (cornstarch) powder pile in a small heap\n// Realistic medium-complexity printable model\n\n$fa = 2;\n$fs = 0.5;\n\n// Main module for the cornflour heap\nmodule cornflour_heap() {\n    color([0.98, 0.94, 0.88]) {\n        // Base pile shape using multiple overlapping spheres\n        union() {\n            // Central mound\n            translate([0, 0, 5]) sphere(d = 40);\n            \n            // Front spill\n            translate([0, 15, 0]) sphere(d = 30);\n            \n            // Left spill\n            translate([-15, -5, 0]) sphere(d = 25);\n            \n            // Right spill\n            translate([15, -5, 0]) sphere(d = 25);\n            \n            // Back spill\n            translate([0, -15, 0]) sphere(d = 28);\n        }\n        \n        // Add texture details with small spheres for powder grains\n        for (i = [1:50]) {\n            rotate([rand(i*3), rand(i*7), rand(i*11)]) {\n                translate([\n                    rand(35)-17.5, \n                    rand(35)-17.5, \n                    rand(15)\n                ]) {\n                    sphere(d = rand(3)+1);\n                }\n            }\n        }\n        \n        // Create flat base for printing\n        difference() {\n            union();\n            translate([0, 0, -1]) cube([80, 80, 2], center = true);\n        }\n        \n        // Add surface irregularities using cylinders\n        for (j = [1:30]) {\n            rotate([0, 0, rand(j*13)*360]) {\n                translate([\n                    rand(20)-10, \n                    rand(20)-10, \n                    rand(10)+15\n                ]) {\n                    cylinder(h = rand(2)+0.5, d1 = rand(2)+1, d2 = 0.1);\n                }\n            }\n        }\n    }\n}\n\n// Helper function for random numbers\nfunction rand(seed) = rands(0, 1, 1, seed)[0];\n\n// Render the cornflour heap\ncornflour_heap();",
    "renders": true
  },
  {
    "food_item": "riceflour",
    "openscad_code": "// Rice flour dumpling (mochi ball) with realistic texture\n// Medium complexity - traditional Japanese sweet\n\n// Dumpling parameters\ndiameter = 35;  // Main dumpling diameter in mm\nwall_thickness = 2.5;  // Printable wall thickness\nindent_depth = 1.5;  // Surface texture depth\n\n// Color definitions\nrice_color = [0.98, 0.96, 0.93];  // Off-white rice flour color\ndust_color = [0.92, 0.90, 0.87];  // Powdered sugar coating\n\n// Create textured rice flour dumpling\nmodule rice_dumpling() {\n    difference() {\n        // Main dumpling body\n        sphere(d = diameter);\n        \n        // Hollow out the inside for 3D printing\n        sphere(d = diameter - wall_thickness * 2);\n    }\n}\n\n// Create surface texture pattern (rice flour grain effect)\nmodule surface_texture() {\n    // Random small indentations for rice grain texture\n    for (i = [0:30]) {\n        rotate([rand(i) * 360, rand(i + 10) * 360, 0])\n        translate([0, 0, diameter/2 - indent_depth/2])\n        difference() {\n            sphere(d = diameter);\n            // Random sized indents\n            sphere(d = diameter - indent_depth * (0.7 + rand(i + 20) * 0.6));\n        }\n    }\n}\n\n// Create powdered sugar coating layer\nmodule sugar_coating() {\n    difference() {\n        // Slightly larger sphere for coating\n        sphere(d = diameter + 1);\n        \n        // Hollow center\n        sphere(d = diameter);\n    }\n}\n\n// Helper function for pseudo-random numbers\nfunction rand(x) = (sin(x * 12.9898 + 78.233) * 43758.5453) % 1;\n\n// Create seam line where dumpling was formed\nmodule seam_line() {\n    rotate([90, 0, 0])\n    translate([0, 0, -0.5])\n    cylinder(h = 1, d1 = diameter * 0.9, d2 = diameter * 0.9, $fn = 64);\n}\n\n// Main assembly\ncolor(rice_color) {\n    // Base dumpling\n    rice_dumpling();\n    \n    // Add surface texture\n    color(rice_color) surface_texture();\n    \n    // Add seam\n    color([0.95, 0.93, 0.90]) seam_line();\n}\n\n// Add powdered sugar coating\ncolor(dust_color) {\n    // Light dusting on top half\n    intersection() {\n        sugar_coating();\n        translate([0, 0, -diameter/4])\n        cube([diameter * 2, diameter * 2, diameter], center = true);\n    }\n}\n\n// Add small accent - traditional red bean paste showing through\nmodule bean_paste() {\n    color([0.65, 0.30, 0.25]) {\n        translate([diameter/4, 0, diameter/4])\n        sphere(d = 8);\n    }\n}\n\n// Only show bean paste on one side for realistic appearance\ntranslate([0, 0, 0]) {\n    intersection() {\n        bean_paste();\n        translate([diameter/4, 0, 0])\n        cube([diameter, diameter, diameter], center = true);\n    }\n}",
    "renders": true
  },
  {
    "food_item": "almondflour",
    "openscad_code": "// Almond flour in a small mound with some scattered almond pieces\n// Overall dimensions: ~60mm diameter, ~25mm height\n\n$fn = 32;\n\n// Main almond flour color\ncolor([0.95, 0.88, 0.78]) {\n    // Base mound shape\n    difference() {\n        // Main dome\n        scale([1, 1, 0.4]) \n            sphere(30);\n        \n        // Flatten the top slightly for realism\n        translate([0, 0, 10])\n            cube([80, 80, 20], center = true);\n    }\n}\n\n// Add texture with smaller irregular spheres\nmodule almond_flour_texture() {\n    for(i = [0:35]) {\n        translate([\n            15 * cos(i * 47), \n            15 * sin(i * 47), \n            -5 + 5 * sin(i * 13)\n        ]) {\n            scale([1 + 0.2 * sin(i * 17), 1 + 0.2 * cos(i * 19), 1])\n                sphere(2 + 1.5 * sin(i * 7));\n        }\n    }\n}\n\n// Apply texture\ncolor([0.93, 0.85, 0.75]) \n    almond_flour_texture();\n\n// Add a few visible almond pieces\nmodule almond_piece() {\n    // Almond shape: stretched sphere with taper\n    scale([1, 0.4, 0.3])\n        sphere(3);\n}\n\n// Scatter almond pieces on surface\ncolor([0.85, 0.75, 0.65]) {\n    for(i = [0:4]) {\n        translate([\n            10 * cos(i * 123), \n            10 * sin(i * 123), \n            5 + 2 * sin(i * 45)\n        ]) {\n            rotate([0, 0, i * 72])\n                almond_piece();\n        }\n    }\n}\n\n// Create a subtle depression for scooping\ncolor([0.92, 0.82, 0.72]) {\n    translate([0, -5, 12])\n        scale([0.8, 0.6, 0.3])\n            sphere(8);\n}",
    "renders": true
  },
  {
    "food_item": "coconutflour",
    "openscad_code": "// Coconut Flour in Realistic Medium Complexity\n// Overall dimensions: ~60mm diameter, ~40mm height\n\n// Main parameters\nflour_diameter = 60;\nflour_height = 40;\nwall_thickness = 2;\n\n// Coconut flour texture parameters\ngrain_size = 1.5;\ngrain_variance = 0.3;\ngrain_count = 150;\n\n// Create the coconut flour pile\nmodule coconut_flour_pile() {\n    color([0.95, 0.90, 0.82]) {\n        // Base pile shape\n        difference() {\n            // Main elliptical pile\n            scale([1.2, 1, 0.8])\n                sphere(d = flour_diameter, $fn = 64);\n            \n            // Flatten top slightly\n            translate([0, 0, flour_height * 0.6])\n                cube([flour_diameter * 2, flour_diameter * 2, flour_diameter], center = true);\n        }\n        \n        // Add surface texture\n        for(i = [0:grain_count - 1]) {\n            // Random position on surface\n            angle = rands(0, 360, 1)[0];\n            radius = rands(0, flour_diameter/2.2, 1)[0];\n            height = rands(0, flour_height * 0.7, 1)[0];\n            \n            // Calculate position on ellipsoid surface\n            x = cos(angle) * radius * 1.2;\n            y = sin(angle) * radius;\n            z = flour_height * 0.8 * sqrt(1 - (x/(flour_diameter/1.2*1.2))^2 - (y/(flour_diameter/2))^2);\n            \n            // Random grain size\n            size = grain_size + rands(-grain_variance, grain_variance, 1)[0];\n            \n            // Place individual grains\n            translate([x, y, z])\n                sphere(d = size, $fn = 8);\n        }\n        \n        // Add some larger clumps\n        for(i = [0:20]) {\n            angle = rands(0, 360, 1)[0];\n            radius = rands(0, flour_diameter/2.5, 1)[0];\n            x = cos(angle) * radius * 1.2;\n            y = sin(angle) * radius;\n            z = rands(5, flour_height * 0.6, 1)[0];\n            \n            translate([x, y, z])\n                scale([1.5, 1.2, 0.8])\n                    sphere(d = grain_size * 3, $fn = 12);\n        }\n    }\n}\n\n// Create measuring scoop indent\nmodule scoop_mark() {\n    color([0.95, 0.90, 0.82]) {\n        // Scoop shape - hemisphere\n        translate([flour_diameter/4, -flour_diameter/4, flour_height * 0.5])\n            scale([1, 1, 0.5])\n                sphere(d = flour_diameter/3, $fn = 32);\n        \n        // Scoop edge detail\n        translate([flour_diameter/4, -flour_diameter/4, flour_height * 0.5])\n            difference() {\n                cylinder(h = 2, d = flour_diameter/3 + 2, $fn = 32);\n                cylinder(h = 3, d = flour_diameter/3, $fn = 32);\n            }\n    }\n}\n\n// Sprinkle some loose flour\nmodule loose_flour() {\n    color([0.97, 0.93, 0.85]) {\n        for(i = [0:30]) {\n            angle = rands(0, 360, 1)[0];\n            distance = rands(flour_diameter/2, flour_diameter, 1)[0];\n            x = cos(angle) * distance;\n            y = sin(angle) * distance;\n            z = rands(0, 2, 1)[0];\n            \n            translate([x, y, z])\n                sphere(d = rands(0.5, grain_size, 1)[0], $fn = 6);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    coconut_flour_pile();\n    scoop_mark();\n    loose_flour();\n}\n\n// Optional base plate for printing stability\ntranslate([0, 0, -1])\n    color([0.9, 0.85, 0.8])\n        cylinder(h = 2, d = flour_diameter * 1.5, $fn = 64);",
    "renders": true
  },
  {
    "food_item": "chickpeaflour",
    "openscad_code": "// Chickpea flour (besan) - realistic style medium complexity\n// A compact mound of finely textured, pale yellow flour with natural irregularities\n\n$fa = 2;\n$fs = 0.5;\n\nmodule flour_mound() {\n    // Base mound shape using stacked spheres\n    color([0.96, 0.88, 0.65]) {\n        translate([0, 0, 0]) sphere(d = 60, $fn = 60);\n        translate([0, 0, 10]) sphere(d = 50, $fn = 60);\n        translate([0, 0, 20]) sphere(d = 35, $fn = 60);\n    }\n}\n\nmodule flour_texture() {\n    // Add small bumps for flour texture\n    for (i = [0:200]) {\n        translate([\n            30 * cos(i * 137.5),\n            30 * sin(i * 137.5),\n            15 + 10 * sin(i * 0.3)\n        ]) {\n            color([0.95, 0.87, 0.63]) sphere(d = 1 + 2 * rands(0, 1, 1)[0], $fn = 8);\n        }\n    }\n}\n\nmodule flour_clumps() {\n    // Add small clumps and peaks\n    for (j = [0:8]) {\n        angle = j * 45 + rands(-10, 10, 1)[0];\n        dist = 15 + rands(0, 10, 1)[0];\n        height = 5 + rands(0, 8, 1)[0];\n        \n        translate([\n            dist * cos(angle),\n            dist * sin(angle),\n            25 + height\n        ]) {\n            color([0.97, 0.89, 0.66]) sphere(d = 5 + rands(0, 3, 1)[0], $fn = 15);\n        }\n    }\n}\n\nmodule hollow_base() {\n    // Create hollow base for 3D printing\n    difference() {\n        flour_mound();\n        translate([0, 0, -5]) cylinder(d = 55, h = 15, $fn = 60);\n    }\n}\n\n// Main assembly\nunion() {\n    hollow_base();\n    flour_texture();\n    flour_clumps();\n}\n\n// Add slight flattening at bottom for stability\ntranslate([0, 0, -2]) {\n    color([0.96, 0.88, 0.65]) cylinder(d = 65, h = 2, $fn = 60);\n}",
    "renders": true
  },
  {
    "food_item": "lentilflour",
    "openscad_code": "// Lentil flour - realistic style\n// A small pile of finely milled lentil flour with visible texture and slight color variations\n\n$fa = 2;\n$fs = 0.5;\n\n// Main color for lentil flour\nlentil_color = \"#D2B48C\";    // Tan/light brown\ndarker_lentil = \"#C19A6B\";   // Darker brown spots\nlighter_lentil = \"#E6D3A3\";  // Lighter spots\n\n// Create the main flour pile\nmodule flour_pile() {\n    // Base mound shape using multiple spheres\n    union() {\n        // Main central mound\n        color(lentil_color) \n        scale([1, 1.2, 0.6]) \n        sphere(20, $fn=50);\n        \n        // Additional smaller mounds for natural pile look\n        for(i = [0:8]) {\n            angle = i * 45;\n            radius = 8 + rand(i) * 7;\n            height = 3 + rand(i+10) * 4;\n            \n            translate([\n                cos(angle) * (12 + rand(i+5) * 8),\n                sin(angle) * (10 + rand(i+7) * 6),\n                height/2\n            ]) {\n                color(lentil_color)\n                scale([1 + rand(i)/5, 1 + rand(i+3)/5, 0.7 + rand(i+2)/3])\n                sphere(radius, $fn=30);\n            }\n        }\n    }\n}\n\n// Create texture particles\nmodule flour_particles() {\n    // Small spheres representing flour granules\n    for(i = [0:150]) {\n        angle = rand(i) * 360;\n        dist = rand(i+50) * 25;\n        height = rand(i+100) * 3;\n        size = 0.3 + rand(i+200) * 0.7;\n        \n        translate([\n            cos(angle) * dist,\n            sin(angle) * dist,\n            height\n        ]) {\n            // Alternate between different flour colors\n            color(i % 3 == 0 ? darker_lentil : \n                  (i % 3 == 1 ? lighter_lentil : lentil_color))\n            sphere(size, $fn=8);\n        }\n    }\n}\n\n// Create some flat areas where flour has settled\nmodule settled_areas() {\n    difference() {\n        // Flattened areas\n        translate([0, 0, -1])\n        color(lentil_color)\n        cylinder(h=2, r1=35, r2=30, $fn=60);\n        \n        // Cut out center to create ring\n        translate([0, 0, -2])\n        cylinder(h=4, r1=15, r2=12, $fn=60);\n    }\n}\n\n// Helper function for pseudo-random numbers\nfunction rand(n) = (n * 13.7 + n * n * 0.73) % 1;\n\n// Create a scoop mark\nmodule scoop_mark() {\n    translate([15, -5, 8])\n    rotate([0, 30, 0])\n    color(lentil_color)\n    scale([1, 0.3, 0.2])\n    sphere(12, $fn=30);\n}\n\n// Main assembly\nunion() {\n    // Base settled flour\n    settled_areas();\n    \n    // Main flour pile\n    flour_pile();\n    \n    // Texture particles on top\n    flour_particles();\n    \n    // Add some scoop marks for realism\n    scoop_mark();\n    translate([-10, 8, 10])\n    rotate([0, -20, 45])\n    scale([0.7, 1, 0.8])\n    scoop_mark();\n}",
    "renders": true
  },
  {
    "food_item": "peaflour",
    "openscad_code": "// Pea flour block - realistic medium complexity\n// Overall dimensions: 80mm x 60mm x 25mm\n\n// Module for creating textured surface pattern\nmodule surface_texture(width, depth, height) {\n    for(x = [-width/2 + 2 : 5 : width/2 - 2]) {\n        for(z = [-depth/2 + 2 : 5 : depth/2 - 2]) {\n            translate([x, 12.5, z]) {\n                sphere(d = 1.5, $fn = 8);\n            }\n        }\n    }\n}\n\n// Module for creating irregular pea chunks\nmodule pea_chunk(x, y, z, size) {\n    translate([x, y, z]) {\n        // Main chunk body\n        sphere(d = size, $fn = 12);\n        \n        // Small irregularities\n        rotate([0, 90, 45]) {\n            sphere(d = size * 0.7, $fn = 8);\n        }\n    }\n}\n\n// Main pea flour block\nmodule pea_flour_block() {\n    difference() {\n        // Base rectangular block with rounded edges\n        color([0.6, 0.8, 0.4, 0.95]) {\n            minkowski() {\n                cube([80, 25, 60], center = true);\n                sphere(d = 3, $fn = 16);\n            }\n        }\n        \n        // Remove excess minkowski spheres\n        color([0.6, 0.8, 0.4, 0.95]) {\n            cube([82, 27, 62], center = true);\n        }\n    }\n}\n\n// Create surface indentations for realistic flour texture\nmodule flour_texture() {\n    color([0.7, 0.85, 0.45, 0.9]) {\n        // Random small indentations\n        for(i = [1 : 30]) {\n            angle = i * 137.5;\n            radius = 30 + rand(i) * 8;\n            x = cos(angle) * radius;\n            z = sin(angle) * radius;\n            y = 12 + rand(i+100) * 3;\n            \n            translate([x, y, z]) {\n                sphere(d = 1 + rand(i*2), $fn = 6);\n            }\n        }\n        \n        // Larger pea chunks visible in flour\n        pea_chunk(-20, 10, -15, 4);\n        pea_chunk(15, 12, 20, 3.5);\n        pea_chunk(-10, 11, 18, 4.2);\n        pea_chunk(25, 9, -10, 3.8);\n        pea_chunk(0, 13, 0, 3.2);\n        pea_chunk(-30, 10, 10, 4.5);\n        pea_chunk(10, 11, -25, 3.7);\n    }\n}\n\n// Random number generator function\nfunction rand(v) = (v * 123.456) % 1;\n\n// Side texture pattern\nmodule side_pattern() {\n    color([0.65, 0.82, 0.42, 0.85]) {\n        for(y = [-10 : 3 : 10]) {\n            for(z = [-25 : 4 : 25]) {\n                translate([-40, y, z]) {\n                    rotate([0, 90, 0]) {\n                        cylinder(h = 1, r = 0.8, $fn = 8);\n                    }\n                }\n                translate([40, y, z]) {\n                    rotate([0, 90, 0]) {\n                        cylinder(h = 1, r = 0.8, $fn = 8);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Combine all parts\nunion() {\n    pea_flour_block();\n    \n    // Add surface texture on top\n    translate([0, 0, 0]) {\n        surface_texture(76, 56, 25);\n    }\n    \n    // Add flour texture\n    flour_texture();\n    \n    // Add side patterns\n    side_pattern();\n}",
    "renders": true
  },
  {
    "food_item": "potatoflour",
    "openscad_code": "// Potato flour - realistic style with medium complexity\n// Dimensions: 60mm diameter container, 45mm height\n\n$fn = 32;\n\n// Main potato flour container\nmodule flour_container() {\n    difference() {\n        // Outer cylinder\n        cylinder(h = 45, d = 60);\n        \n        // Inner cavity for flour\n        translate([0, 0, 2])\n            cylinder(h = 43, d = 55);\n    }\n}\n\n// Container lip\nmodule container_lip() {\n    difference() {\n        translate([0, 0, 44])\n            cylinder(h = 3, d1 = 62, d2 = 64);\n        \n        translate([0, 0, 44])\n            cylinder(h = 3, d = 58);\n    }\n}\n\n// Potato flour texture pattern\nmodule flour_texture() {\n    // Random small bumps for potato flour texture\n    for (i = [0:15]) {\n        translate([\n            -25 + rand(i * 3) * 50, \n            -25 + rand(i * 7) * 50, \n            2 + rand(i * 11) * 40\n        ]) {\n            sphere(d = 1.5 + rand(i * 13) * 2);\n        }\n    }\n}\n\n// Helper function for pseudo-random values\nfunction rand(seed) = (seed * 9301 + 49297) % 233280 / 233280;\n\n// Container label\nmodule container_label() {\n    translate([0, 30.5, 25])\n        rotate([90, 0, 0])\n            linear_extrude(height = 0.5)\n                text(\"POTATO FLOUR\", size = 8, halign = \"center\");\n}\n\n// Scoop marks on flour surface\nmodule scoop_marks() {\n    for (a = [0:30:330]) {\n        rotate([0, 0, a])\n            translate([10, 0, 43])\n                rotate([0, 90, 0])\n                    difference() {\n                        cylinder(h = 20, d = 8);\n                        translate([0, 0, -1])\n                            cube([20, 20, 10], center = true);\n                    }\n    }\n}\n\n// Main assembly\ncolor([0.95, 0.92, 0.88]) {\n    union() {\n        // Container\n        flour_container();\n        container_lip();\n        \n        // Flour inside\n        translate([0, 0, 0])\n            color([0.98, 0.95, 0.9]) {\n                difference() {\n                    cylinder(h = 42, d = 55);\n                    translate([0, 0, 40])\n                        cube([60, 60, 5], center = true);\n                    \n                    // Scoop marks\n                    translate([0, 0, 41])\n                        scoop_marks();\n                }\n                \n                // Flour texture on surface\n                flour_texture();\n            }\n        \n        // Label\n        color([0.3, 0.2, 0.1])\n            container_label();\n    }\n}",
    "renders": true
  },
  {
    "food_item": "tapiocaflour",
    "openscad_code": "// Tapioca Flour in a simple bag-like container\n// Medium complexity with realistic appearance\n\n// Parameters for sizing\nbag_width = 60;\nbag_height = 80;\nbag_depth = 25;\nwall_thickness = 2;\n\n// Tapioca pearls parameters\npearl_radius = 3;\npearls_count = 25;\n\n// Bag module\nmodule flour_bag() {\n    color(\"beige\") \n    difference() {\n        // Main bag body\n        union() {\n            // Front and back faces\n            translate([-bag_width/2, -bag_depth/2, 0]) \n                cube([bag_width, bag_depth, bag_height]);\n            \n            // Top seal - crimped effect\n            for (i = [-bag_width/2+3:6:bag_width/2-3]) {\n                translate([i, -bag_depth/2-1, bag_height]) \n                    cube([3, bag_depth+2, 6]);\n            }\n        }\n        \n        // Hollow out the bag\n        translate([-bag_width/2+wall_thickness, -bag_depth/2+wall_thickness, wall_thickness]) \n            cube([bag_width-2*wall_thickness, bag_depth-2*wall_thickness, bag_height-2*wall_thickness]);\n    }\n}\n\n// Individual tapioca pearl\nmodule tapioca_pearl(r) {\n    color(\"ivory\") \n    sphere(r);\n}\n\n// Pile of tapioca pearls inside bag\nmodule pearls_in_bag() {\n    // Create random distribution of pearls\n    for (i = [0:pearls_count-1]) {\n        // Random position within bag bounds\n        x_pos = -bag_width/2 + wall_thickness + 5 + (bag_width-2*wall_thickness-10) * (i*3.7 % 1);\n        y_pos = -bag_depth/2 + wall_thickness + 5 + (bag_depth-2*wall_thickness-10) * ((i*2.3) % 1);\n        z_pos = wall_thickness + 2 + (i % 3) * pearl_radius * 1.5;\n        \n        translate([x_pos, y_pos, z_pos]) \n            tapioca_pearl(pearl_radius);\n    }\n}\n\n// Bag label\nmodule bag_label() {\n    color(\"white\") \n    translate([-bag_width/3, -bag_depth/2-0.5, bag_height/2]) \n        cube([bag_width*2/3, 1, bag_height/3]);\n    \n    // Label text indicators (raised bumps)\n    color(\"darkgreen\") {\n        translate([-bag_width/4, -bag_depth/2-0.3, bag_height/2+5]) \n            cube([bag_width/2, 0.5, 3]);\n        translate([-bag_width/4, -bag_depth/2-0.3, bag_height/2+10]) \n            cube([bag_width/3, 0.5, 2]);\n    }\n}\n\n// Assembly\nunion() {\n    flour_bag();\n    pearls_in_bag();\n    bag_label();\n}",
    "renders": true
  },
  {
    "food_item": "cassavaflour",
    "openscad_code": "// Cassava Flour Pile (Realistic Style - Medium Complexity)\n// A realistic pile of fine, powdery cassava flour with natural uneven surface\n\n// Parameters for realistic appearance\nflour_color = [0.96, 0.94, 0.90];  // Off-white, slightly beige\npile_height = 35;                  // Total height in mm\npile_radius = 40;                  // Base radius in mm\ngrain_size = 0.6;                  // Individual grain size\ngrains_per_layer = 150;            // Density of grains\n\n// Main flour pile module\nmodule cassava_flour_pile() {\n    // Base mound shape\n    difference() {\n        // Main conical pile\n        union() {\n            // Central core\n            cylinder(h = pile_height, r1 = pile_radius, r2 = 5, $fn = 48);\n            \n            // Add irregularity to sides with noise\n            for(i = [0:5:360]) {\n                rotate([0, 0, i]) {\n                    translate([pile_radius - 2, 0, 0]) {\n                        cylinder(h = pile_height * 0.3, r1 = 3, r2 = 1, $fn = 8);\n                    }\n                }\n            }\n        }\n        \n        // Carve out center to make more natural\n        translate([0, 0, -1]) {\n            cylinder(h = pile_height + 2, r = 8, $fn = 32);\n        }\n        \n        // Add slight depression on top\n        translate([0, 0, pile_height - 2]) {\n            sphere(d = 12);\n        }\n    }\n}\n\n// Individual flour grain for texture\nmodule flour_grain() {\n    // Randomized small spheres for powder texture\n    scale([1 + (rand() - 0.5) * 0.3, 1 + (rand() - 0.5) * 0.3, 1 + (rand() - 0.5) * 0.3]) {\n        sphere(d = grain_size, $fn = 8);\n    }\n}\n\n// Generate random number between 0-1\nfunction rand() = rands(0, 1, 1)[0];\n\n// Create surface texture layer\nmodule surface_texture(height_offset) {\n    for(i = [0:1:grains_per_layer]) {\n        angle = rands(0, 360, 1)[0];\n        radius = rands(0, pile_radius * (1 - height_offset/pile_height), 1)[0];\n        x = cos(angle) * radius;\n        y = sin(angle) * radius;\n        z = height_offset + rands(-1, 1, 1)[0];\n        \n        translate([x, y, z]) {\n            flour_grain();\n        }\n    }\n}\n\n// Create realistic flour spill pattern\nmodule flour_spill() {\n    // Main pile\n    color(flour_color) {\n        cassava_flour_pile();\n    }\n    \n    // Surface texture layers\n    color(flour_color) {\n        for(h = [5:3:pile_height - 5]) {\n            surface_texture(h);\n        }\n    }\n    \n    // Small spill around base\n    color(flour_color) {\n        for(i = [0:20:360]) {\n            rotate([0, 0, i]) {\n                translate([pile_radius + rands(0, 8, 1)[0], 0, 0]) {\n                    scale([1, 1, 0.3]) {\n                        sphere(d = rands(2, 6, 1)[0], $fn = 12);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Subtle color variation for realism\n    for(i = [0:30:360]) {\n        rotate([0, 0, i]) {\n            translate([rands(0, pile_radius * 0.7, 1)[0], 0, rands(5, pile_height - 5, 1)[0]]) {\n                color([0.98, 0.96, 0.92, 0.3]) {\n                    sphere(d = 3, $fn = 8);\n                }\n            }\n        }\n    }\n}\n\n// Render the complete cassava flour\nflour_spill();",
    "renders": true
  },
  {
    "food_item": "plantainflour",
    "openscad_code": "// Plantain Flour (Realistic Style)\n// A mound of light yellow-green plantain flour with realistic texture and slight clumping\n\n$fn = 32;\n\n// Main color for plantain flour\nmodule plantain_flour_color() {\n    color([0.95, 0.87, 0.65, 0.9]);\n}\n\n// Create a single flour clump with irregular shape\nmodule flour_clump(radius, height, x, y, z) {\n    plantain_flour_color() {\n        translate([x, y, z]) {\n            // Base irregular shape\n            difference() {\n                sphere(radius);\n                translate([radius/3, radius/3, -radius/2])\n                    cube([radius*1.5, radius*1.5, radius], center=true);\n            }\n            \n            // Add small bumps for texture\n            for(i = [0:8]) {\n                rotate([rand(i)*30, rand(i+1)*45, rand(i+2)*60])\n                translate([rand(i+3)*radius/2, rand(i+4)*radius/2, rand(i+5)*height/3])\n                    sphere(radius/8);\n            }\n        }\n    }\n}\n\n// Helper for pseudo-random values\nfunction rand(n) = (n*13.7)%1-0.5;\n\n// Create texture pattern on surface\nmodule surface_texture(base_radius) {\n    plantain_flour_color() {\n        // Small granules on surface\n        for(i = [0:20]) {\n            angle = i * 137.5; // Golden angle for natural distribution\n            r = sqrt(i) * base_radius/5;\n            x = cos(angle) * r;\n            y = sin(angle) * r;\n            z = sqrt(base_radius*base_radius - (x*x + y*y)) * 0.8;\n            \n            translate([x, y, z])\n                sphere(0.5 + rand(i)*0.3);\n        }\n        \n        // Larger clumps for realistic variation\n        for(i = [0:8]) {\n            angle = i * 45 + rand(i)*20;\n            r = base_radius/2 + rand(i+10)*base_radius/3;\n            x = cos(angle) * r;\n            y = sin(angle) * r;\n            z = sqrt(base_radius*base_radius - (x*x + y*y)) * 0.9;\n            \n            flour_clump(2 + rand(i)*1.5, 3 + rand(i+5)*2, x, y, z);\n        }\n    }\n}\n\n// Main flour mound\nmodule plantain_flour_mound() {\n    plantain_flour_color() {\n        // Base mound shape - slightly flattened sphere\n        scale([1, 1, 0.6])\n        sphere(25);\n        \n        // Add irregular top surface\n        difference() {\n            sphere(25);\n            translate([0, 0, -5])\n            cylinder(h=30, r1=28, r2=0, center=true);\n        }\n        \n        // Add some height variation to top\n        union() {\n            // Central peak\n            translate([0, 0, 12])\n            scale([1, 1, 0.7])\n            sphere(8);\n            \n            // Side mounds\n            translate([10, 5, 8])\n            sphere(6);\n            translate([-8, -6, 9])\n            sphere(5);\n            translate([5, -10, 7])\n            sphere(5.5);\n        }\n        \n        // Add surface texture\n        surface_texture(25);\n    }\n}\n\n// Small scoop marks\nmodule scoop_marks() {\n    plantain_flour_color() {\n        // Scoop from top\n        translate([0, 10, 12])\n        rotate([30, 0, 0])\n        difference() {\n            sphere(6);\n            translate([0, 0, -3])\n            cube([12, 12, 6], center=true);\n        }\n        \n        // Side scoop\n        translate([18, 0, 5])\n        rotate([0, -20, 45])\n        difference() {\n            sphere(5);\n            translate([0, 0, -2.5])\n            cube([10, 10, 5], center=true);\n        }\n    }\n}\n\n// Combine all elements\nunion() {\n    plantain_flour_mound();\n    scoop_marks();\n}",
    "renders": true
  },
  {
    "food_item": "buckwheatflour",
    "openscad_code": "// Buckwheat flour pile model - realistic style\n// Dimensions roughly 70mm wide x 55mm deep x 25mm high\n\n// Overall coloring\ncolor([0.82, 0.68, 0.48])  // beige-brown buckwheat tone\n\nmodule buckwheat_seed() {\n    // Individual seed shape\n    rotate([0, 90, 0])\n    scale([1, 0.6, 0.4])\n    sphere(2.5, $fn=12);\n}\n\nmodule seed_cluster() {\n    // Cluster of 3-6 seeds\n    for(i = [0:2]) {\n        rotate([0, 0, i*120 + (rands(-30, 30, 1)[0])])\n        translate([rands(2, 4, 1)[0], 0, 0])\n        rotate([rands(-20, 20, 1)[0], rands(-20, 20, 1)[0], 0])\n        buckwheat_seed();\n    }\n}\n\nmodule flour_grain() {\n    // Tiny irregular flour particles\n    translate([rands(-1, 1, 1)[0], rands(-1, 1, 1)[0], 0])\n    scale([rands(0.5, 1, 1)[0], rands(0.5, 1, 1)[0], rands(0.3, 0.8, 1)[0]])\n    sphere(1, $fn=8);\n}\n\nmodule flour_pile_layer(height, radius, density) {\n    // Create one layer of flour pile\n    for(i = [0:density-1]) {\n        angle = i * 360/density;\n        radial_offset = rands(0, radius*0.3, 1)[0];\n        \n        translate([\n            (radius + radial_offset) * cos(angle),\n            (radius + radial_offset) * sin(angle),\n            height\n        ])\n        flour_grain();\n        \n        // Add occasional seed clusters near bottom\n        if(height < 5 && i % 5 == 0) {\n            translate([\n                (radius + 5) * cos(angle),\n                (radius + 5) * sin(angle),\n                height\n            ])\n            seed_cluster();\n        }\n    }\n}\n\n// Base mound shape\nmodule flour_mound() {\n    difference() {\n        // Main pile shape\n        union() {\n            // Lower wide base\n            cylinder(h=8, r1=35, r2=30, $fn=48);\n            \n            // Middle section\n            translate([0, 0, 8])\n            cylinder(h=7, r1=30, r2=22, $fn=48);\n            \n            // Upper peak\n            translate([0, 0, 15])\n            cylinder(h=5, r1=22, r2=12, $fn=48);\n            \n            // Very top\n            translate([0, 0, 20])\n            cylinder(h=3, r1=12, r2=6, $fn=32);\n        }\n        \n        // Hollow out for printability\n        translate([0, 0, -1])\n        cylinder(h=30, r1=32, r2=4, $fn=48);\n    }\n}\n\n// Generate the flour pile\nflour_mound();\n\n// Add surface texture\nfor(layer = [0:2:25]) {\n    layer_radius = max(35 - layer*1.2, 6);\n    density = max(8, layer_radius*0.5);\n    flour_pile_layer(layer, layer_radius, density);\n}\n\n// Add some scattered seeds on surface\nfor(i = [0:15]) {\n    angle = i * 137.5;  // golden angle\n    radius = sqrt(i) * 6;\n    translate([\n        radius * cos(angle),\n        radius * sin(angle),\n        25 - (radius * 0.4) + rands(-2, 2, 1)[0]\n    ])\n    rotate([rands(-30, 30, 1)[0], rands(-30, 30, 1)[0], angle])\n    buckwheat_seed();\n}\n\n// Add some flour dusting effect\nfor(i = [0:30]) {\n    translate([\n        rands(-40, 40, 1)[0],\n        rands(-40, 40, 1)[0],\n        26 + rands(0, 2, 1)[0]\n    ])\n    scale([rands(0.3, 0.7, 1)[0], rands(0.3, 0.7, 1)[0], rands(0.1, 0.3, 1)[0]])\n    sphere(0.8, $fn=6);\n}",
    "renders": true
  },
  {
    "food_item": "quinoaflour",
    "openscad_code": "// Quinoa flour in a realistic style - medium complexity\n// Model shows a small heap of quinoa flour with visible quinoa seeds scattered on top\n\n// Main parameters\nflour_height = 15;\nflour_radius = 40;\nseed_count = 25;\nbase_thickness = 3;\n\n// Create the flour heap shape using multiple spheres\nmodule flour_heap() {\n    color(\"beige\")\n    union() {\n        // Base layer for stability\n        translate([0, 0, base_thickness/2])\n            cylinder(h=base_thickness, r=flour_radius, $fn=50);\n        \n        // Main heap - multiple spheres to create organic shape\n        for(i = [0:5]) {\n            angle = i * 60;\n            radius = flour_radius * (1 - i * 0.1);\n            height = flour_height * (1 - i * 0.15);\n            translate([cos(angle) * i * 3, sin(angle) * i * 3, height/2 + base_thickness])\n                sphere(r=radius, $fn=30);\n        }\n        \n        // Top dome\n        translate([0, 0, flour_height + base_thickness - 5])\n            sphere(r=flour_radius * 0.7, $fn=30);\n    }\n}\n\n// Individual quinoa seed\nmodule quinoa_seed() {\n    color([0.85, 0.75, 0.6])\n    scale([1, 0.4, 0.6])\n        sphere(r=1.2, $fn=8);\n}\n\n// Create scattered seeds on flour surface\nmodule scattered_seeds() {\n    for(i = [0:seed_count-1]) {\n        angle = i * 137.5; // Golden angle for natural distribution\n        radius = flour_radius * 0.8 * sqrt(i/seed_count);\n        x = cos(angle) * radius;\n        y = sin(angle) * radius;\n        z = flour_height * (1 - (x*x + y*y)/(flour_radius*flour_radius)) * 0.8 + base_thickness;\n        \n        translate([x, y, z])\n            rotate([0, 0, angle])\n                rotate([rand(i*2)*30, rand(i*3)*20, 0])\n                    quinoa_seed();\n    }\n}\n\n// Add texture to flour surface\nmodule flour_texture() {\n    color(\"beige\")\n    difference() {\n        sphere(r=flour_radius * 0.8, $fn=30);\n        translate([0, 0, -flour_height/2])\n            cube([flour_radius*2, flour_radius*2, flour_height], center=true);\n    }\n}\n\n// Main assembly\nunion() {\n    flour_heap();\n    \n    // Position texture on top\n    translate([0, 0, flour_height * 0.6 + base_thickness])\n        scale([1, 1, 0.3])\n            flour_texture();\n    \n    scattered_seeds();\n}",
    "renders": true
  },
  {
    "food_item": "amaranthflour",
    "openscad_code": "// Amaranth flour in a paper bag with pouring spout\n// Dimensions: ~60mm tall, 40mm wide, 20mm deep\n\n$fn = 32;\n\n// Main module\nmodule amaranth_flour_bag() {\n    color(\"burlywood\") {\n        // Paper bag body\n        difference() {\n            // Main bag shape\n            rounded_cuboid([38, 18, 58], 3);\n            \n            // Create pouring spout\n            translate([19, 0, 58]) rotate([90, 0, 0]) \n                cylinder(h=15, r1=8, r2=12, $fn=8);\n            \n            // Fold lines on front\n            translate([0, 9.5, 29]) cube([38, 0.5, 0.5]);\n            translate([0, 9.5, 45]) cube([38, 0.5, 0.5]);\n            \n            // Side fold\n            translate([19, 9.5, 0]) cube([0.5, 0.5, 58]);\n        }\n        \n        // Top fold\n        translate([0, 9, 58]) cube([38, 0.5, 8]);\n        \n        // Bottom fold\n        translate([0, 9, 0]) cube([38, 0.5, 3]);\n    }\n    \n    // Amaranth flour visible in spout\n    color(\"tan\") {\n        translate([19, 10, 58]) rotate([90, 0, 0]) \n            cylinder(h=8, r1=5, r2=7, $fn=8);\n    }\n    \n    // Flour texture on surface\n    color(\"tan\") for(i=[0:5]) for(j=[0:3]) {\n        translate([5 + i*6, 5 + j*4, 18 + abs(sin(i*j))*2]) \n            sphere(r=0.5 + 0.2*sin(i*5));\n    }\n    \n    // Nutrition label\n    color(\"white\") {\n        translate([2, 9.5, 25]) cube([20, 0.2, 15]);\n    }\n    \n    // \"Amaranth Flour\" text area\n    color(\"saddlebrown\") {\n        translate([3, 9.6, 35]) cube([15, 0.1, 3]);\n    }\n}\n\n// Helper module for rounded cuboid\nmodule rounded_cuboid(size, radius) {\n    hull() {\n        for(x=[0, size[0]]) for(y=[0, size[1]]) for(z=[0, size[2]]) {\n            translate([x + (x==0?radius:-radius), \n                      y + (y==0?radius:-radius), \n                      z + (z==0?radius:-radius)]) \n                sphere(r=radius);\n        }\n    }\n}\n\n// Create the model\namaranth_flour_bag();",
    "renders": true
  },
  {
    "food_item": "milletflour",
    "openscad_code": "// Millet Flour - Realistic Style, Medium Complexity\n// This creates a mound of millet flour with scattered grains\n\n$fn = 32;\n\n// Main flour mound\nmodule flour_mound() {\n    difference() {\n        // Base mound shape\n        scale([1, 0.8, 0.5]) \n            sphere(d = 60);\n        \n        // Hollow out center slightly for natural look\n        translate([0, 0, 5])\n            scale([0.9, 0.7, 0.4])\n                sphere(d = 55);\n    }\n}\n\n// Individual millet grain\nmodule millet_grain() {\n    color(\"#D4A574\") {\n        scale([1, 0.7, 2.5])\n            sphere(d = 1.2);\n    }\n}\n\n// Scattered grains on surface\nmodule scattered_grains() {\n    // Random seed placement\n    for(i = [0:5:360]) {\n        angle = i + rand(0, 10);\n        radius = 15 + rand(0, 25);\n        x = cos(angle) * radius;\n        y = sin(angle) * radius;\n        \n        // Place grains at different heights\n        translate([x, y, 8 + rand(0, 3)])\n            rotate([rand(-30, 30), rand(-30, 30), rand(0, 360)])\n                millet_grain();\n    }\n}\n\n// Surface texture bumps\nmodule surface_texture() {\n    for(i = [0:15:360]) {\n        for(j = [0:15:360/4]) {\n            angle = i + j;\n            radius = 5 + j * 2;\n            x = cos(angle) * radius;\n            y = sin(angle) * radius;\n            \n            translate([x, y, 15])\n                scale([1, 1, 0.3])\n                    sphere(d = 2 + rand(0, 1));\n        }\n    }\n}\n\n// Random helper function\nfunction rand(a, b) = a + (b - a) * (rands(0, 1, 1)[0]);\n\n// Main assembly\nmodule millet_flour() {\n    // Base flour color - light tan\n    color(\"#E8D4B0\") {\n        union() {\n            flour_mound();\n            surface_texture();\n        }\n    }\n    \n    // Add scattered grains\n    scattered_grains();\n}\n\n// Render the millet flour\ntranslate([0, 0, 0])\n    millet_flour();",
    "renders": true
  },
  {
    "food_item": "teffflour",
    "openscad_code": "// Teff flour - realistic medium complexity model\n// Represents a small mound of finely milled teff grain\n// Natural light brown color with slight texture variations\n\ncolor([0.72, 0.52, 0.35])  // Light brown teff color\n\ndifference() {\n    // Main flour mound - slightly flattened ellipsoid\n    scale([1.2, 1, 0.7]) \n    sphere(25, $fn=50);\n    \n    // Create natural depression in center\n    translate([0, 0, -5])\n    scale([0.8, 0.6, 0.5])\n    sphere(20, $fn=30);\n}\n\n// Surface texture - tiny irregularities\nmodule flour_texture() {\n    for(i = [0:45]) {\n        rotate([rand(360), rand(360), rand(360)])\n        translate([rand(15)-7.5, rand(15)-7.5, rand(5)+17])\n        scale([1, 1, 0.3])\n        sphere(0.5 + rand(1), $fn=8);\n    }\n}\n\ncolor([0.65, 0.45, 0.30])  // Slightly darker texture\nflour_texture();\n\n// Teff grain details scattered on surface\nmodule teff_grain() {\n    rotate([90, 0, 0])\n    scale([0.1, 0.1, 1])\n    cylinder(h=2, r1=0.8, r2=0.4, $fn=6);\n}\n\n// Randomly place individual grains\nfor(i = [0:25]) {\n    angle = rand(360);\n    dist = rand(20);\n    x = cos(angle) * dist;\n    y = sin(angle) * dist;\n    z = 18 + rand(3);\n    \n    color([0.55, 0.35, 0.25])  // Darker grain color\n    translate([x, y, z])\n    rotate([rand(30), rand(30), rand(360)])\n    teff_grain();\n}\n\n// Fine dust layer on surface\nmodule dust_particles() {\n    for(j = [0:80]) {\n        translate([rand(35)-17.5, rand(35)-17.5, 19.5])\n        sphere(0.2 + rand(0.3), $fn=6);\n    }\n}\n\ncolor([0.78, 0.58, 0.42])  // Lighter dust color\ndust_particles();\n\n// Base flattening for stability\ntranslate([0, 0, -2])\ndifference() {\n    cylinder(h=4, r=28, $fn=40);\n    translate([0, 0, 2])\n    cylinder(h=4, r=25, $fn=40);\n}",
    "renders": true
  },
  {
    "food_item": "sorghumflour",
    "openscad_code": "// Sorghum flour mound in a bowl with realistic texture\n// Medium complexity 3D printable model\n\n$fs = 0.8;\n$fa = 2;\n\n// Main module\nmodule sorghum_flour() {\n    // Bowl base\n    color(\"burlywood\") {\n        difference() {\n            cylinder(h=20, r=30, center=false);\n            translate([0, 0, 2]) \n                cylinder(h=20, r=28, center=false);\n        }\n        \n        // Bowl rim\n        translate([0, 0, 19])\n            cylinder(h=3, r=31, center=false);\n    }\n    \n    // Flour mound inside bowl\n    color(\"wheat\") {\n        // Base flour layer\n        translate([0, 0, 2])\n            scale([1, 1, 0.3])\n                sphere(r=28);\n        \n        // Central mound\n        translate([0, 0, 8])\n            scale([0.8, 0.8, 0.6])\n                sphere(r=25);\n    }\n    \n    // Flour texture - small clumps\n    for(i = [0:35]) {\n        angle = i * 137.5;\n        radius = 5 + 20 * sqrt(i/35);\n        x = cos(angle) * radius;\n        y = sin(angle) * radius;\n        z = 2 + 8 * (1 - (i/35)) + rand(i) * 3;\n        \n        color(\"tan\") {\n            translate([x, y, z])\n                scale([1 + rand(i+10)*0.5, 1 + rand(i+20)*0.5, 0.5])\n                    sphere(r=1 + rand(i+30)*0.8);\n        }\n    }\n    \n    // Surface texture particles\n    for(j = [0:50]) {\n        angle2 = j * 97.3;\n        radius2 = rand(j) * 28;\n        x2 = cos(angle2) * radius2;\n        y2 = sin(angle2) * radius2;\n        z2 = 2 + 10 * (1 - sqrt(radius2/28)) + rand(j+40) * 1.5;\n        \n        color(\"navajowhite\") {\n            translate([x2, y2, z2])\n                sphere(r=0.4 + rand(j+50)*0.4);\n        }\n    }\n    \n    // Fine flour dust on rim\n    for(k = [0:25]) {\n        angle3 = k * 360/25;\n        x3 = cos(angle3) * 30.5;\n        y3 = sin(angle3) * 30.5;\n        \n        color(\"blanchedalmond\") {\n            translate([x3, y3, 21.5])\n                scale([0.8, 0.8, 0.3])\n                    sphere(r=1.5);\n        }\n    }\n}\n\n// Random number generator\nfunction rand(n) = (n * 9301 + 49297) % 233280 / 233280;\n\n// Render the model centered\ntranslate([0, 0, 0])\n    sorghum_flour();",
    "renders": true
  },
  {
    "food_item": "speltflour",
    "openscad_code": "// Spelt flour - realistic style, medium complexity\n// Model represents a small pile of spelt flour with some scattered grains\n\n$fn = 24;\n\n// Main flour pile - organic mound shape\nmodule flour_pile() {\n    color(\"wheat\") {\n        // Base mound\n        difference() {\n            scale([1, 0.8, 0.4]) sphere(d = 60);\n            translate([0, 0, -5]) cube([80, 80, 10], center = true);\n        }\n        \n        // Additional smaller mounds for realistic shape\n        for(i = [0:5]) {\n            rotate([0, 0, i * 60]) {\n                translate([15 + i * 2, 8 - i, 5 + sin(i) * 2]) {\n                    scale([0.4 + i * 0.05, 0.3 + i * 0.03, 0.2]) \n                    sphere(d = 20 - i * 2);\n                }\n            }\n        }\n    }\n}\n\n// Individual spelt grain\nmodule spelt_grain() {\n    color(\"burlywood\") {\n        // Main grain body - elongated ellipsoid\n        scale([0.3, 0.15, 0.8]) sphere(d = 3);\n        \n        // Add ridge along grain\n        translate([0.5, 0, 0]) \n        rotate([90, 0, 0])\n        scale([0.1, 0.1, 1]) \n        cylinder(h = 2.5, d1 = 0.5, d2 = 0.2);\n    }\n}\n\n// Scattered grains on surface\nmodule scattered_grains() {\n    for(i = [0:35]) {\n        angle = i * 137.5; // Golden angle for natural distribution\n        radius = 5 + i * 1.2;\n        translate([\n            cos(angle) * radius * 0.8, \n            sin(angle) * radius * 0.6, \n            8 + sin(i * 0.5) * 3\n        ]) {\n            rotate([rand() * 30, rand() * 180, rand() * 360])\n            spelt_grain();\n        }\n    }\n}\n\n// Flour texture pattern - small indentations\nmodule flour_texture() {\n    color(\"wheat\") {\n        difference() {\n            children(0);\n            for(i = [0:50]) {\n                translate([\n                    (rand() - 0.5) * 50,\n                    (rand() - 0.5) * 40,\n                    rand() * 8\n                ]) {\n                    scale([1, 1, 0.3]) sphere(d = 1 + rand() * 2);\n                }\n            }\n        }\n    }\n}\n\n// Base plate to contain flour\nmodule base_plate() {\n    color(\"antiquewhite\") {\n        difference() {\n            // Main plate\n            cylinder(h = 2, d = 70);\n            // Slight depression\n            translate([0, 0, -0.5]) cylinder(h = 3, d = 65);\n        }\n    }\n}\n\n// Assembly\ntranslate([0, 0, 2]) base_plate();\n\ntranslate([0, 0, 4]) {\n    flour_texture() flour_pile();\n    scattered_grains();\n}",
    "renders": true
  },
  {
    "food_item": "kamutflour",
    "openscad_code": "// Kamut Flour Bag - Realistic Style, Medium Complexity\n// 3D printable model with texture and labeling\n\n$fn = 50;  // Smooth curves for printing\n\n// Main bag dimensions\nbag_width = 60;\nbag_height = 80;\nbag_depth = 25;\n\n// Wall thickness for printing\nwall = 1.5;\n\nmodule flour_bag() {\n    color(\"burlywood\") \n    difference() {\n        // Main bag body\n        union() {\n            // Front face with slight bulge\n            translate([0, 0, bag_depth/2])\n                scale([1, 1, 0.9])\n                cube([bag_width, bag_height, wall], center=true);\n            \n            // Back face\n            translate([0, 0, -bag_depth/2])\n                cube([bag_width, bag_height, wall], center=true);\n            \n            // Left side\n            translate([-bag_width/2, 0, 0])\n                cube([wall, bag_height, bag_depth], center=true);\n            \n            // Right side\n            translate([bag_width/2, 0, 0])\n                cube([wall, bag_height, bag_depth], center=true);\n            \n            // Bottom\n            translate([0, -bag_height/2, 0])\n                cube([bag_width, wall, bag_depth], center=true);\n            \n            // Top with fold\n            translate([0, bag_height/2, 0])\n                cube([bag_width, wall, bag_depth], center=true);\n        }\n        \n        // Hollow out the bag\n        translate([0, 0, 0])\n            cube([bag_width - 2*wall, bag_height - 2*wall, bag_depth - wall], center=true);\n    }\n}\n\nmodule bag_texture() {\n    // Vertical seam lines\n    for (i = [-bag_width/2 + 5 : 5 : bag_width/2 - 5]) {\n        color(\"tan\") \n        translate([i, 0, bag_depth/2 + wall/2 + 0.1])\n            cube([0.5, bag_height, 0.3], center=true);\n    }\n    \n    // Horizontal fold lines\n    for (j = [-bag_height/2 + 10 : 10 : bag_height/2 - 10]) {\n        color(\"tan\")\n        translate([0, j, bag_depth/2 + wall/2 + 0.1])\n            cube([bag_width, 0.5, 0.3], center=true);\n    }\n}\n\nmodule top_fold() {\n    // Paper fold at top\n    color(\"wheat\") {\n        translate([0, bag_height/2 + 3, 0])\n            cube([bag_width - 10, 6, bag_depth - 5], center=true);\n        \n        // Stitching pattern\n        for (k = [-bag_width/2 + 10 : 4 : bag_width/2 - 10]) {\n            translate([k, bag_height/2 + 3, bag_depth/4])\n                cylinder(h=0.5, d=1, center=true);\n        }\n    }\n}\n\nmodule label() {\n    // Main label\n    color(\"white\") \n    translate([0, 0, bag_depth/2 + wall + 0.5])\n        cube([bag_width - 15, bag_height/3, 0.5], center=true);\n    \n    // Kamut text\n    color(\"saddlebrown\")\n    translate([0, 5, bag_depth/2 + wall + 1]) {\n        // K\n        translate([-20, 0, 0])\n            union() {\n                cube([2, 15, 1]);\n                translate([2, 12, 0]) rotate([0, 0, -30]) cube([2, 10, 1]);\n                translate([2, 3, 0]) rotate([0, 0, 30]) cube([2, 10, 1]);\n            }\n        \n        // A\n        translate([-10, 0, 0])\n            union() {\n                translate([0, 15, 0]) rotate([0, 0, 15]) cube([2, 17, 1]);\n                translate([8, 15, 0]) rotate([0, 0, -15]) cube([2, 17, 1]);\n                translate([4, 7, 0]) cube([10, 2, 1]);\n            }\n        \n        // M\n        translate([5, 0, 0])\n            union() {\n                cube([2, 15, 1]);\n                translate([2, 15, 0]) rotate([0, 0, 30]) cube([2, 8, 1]);\n                translate([8, 15, 0]) rotate([0, 0, -30]) cube([2, 8, 1]);\n                translate([10, 0, 0]) cube([2, 15, 1]);\n            }\n        \n        // U\n        translate([20, 0, 0])\n            union() {\n                cube([2, 15, 1]);\n                translate([8, 0, 0]) cube([2, 15, 1]);\n                translate([4, 0, 0]) cube([8, 2, 1]);\n            }\n        \n        // T\n        translate([30, 0, 0])\n            union() {\n                translate([5, 0, 0]) cube([2, 15, 1]);\n                translate([0, 12, 0]) cube([12, 2, 1]);\n            }\n    }\n    \n    // Flour text\n    color(\"saddlebrown\")\n    translate([0, -8, bag_depth/2 + wall + 1])\n        scale([0.7, 0.7, 1])\n        translate([-25, 0, 0])\n            cube([50, 8, 1]);\n}\n\n// Assembly\nflour_bag();\nbag_texture();\ntop_fold();\nlabel();",
    "renders": true
  },
  {
    "food_item": "farinaflour",
    "openscad_code": "// Farinaflour (semolina flour) in a small paper sack\n// Realistic style, medium complexity\n\n$fa = 2;\n$fs = 0.5;\n\nmodule flour_sack() {\n    // Paper sack body\n    color(\"papayawhip\")\n    difference() {\n        union() {\n            // Main sack body\n            translate([0, 0, 5])\n                cube([35, 20, 50], center=true);\n            \n            // Rounded top edges\n            translate([0, 10, 30])\n                rotate([90, 0, 0])\n                cylinder(h=35, r1=10, r2=10, center=true);\n            translate([0, -10, 30])\n                rotate([90, 0, 0])\n                cylinder(h=35, r1=10, r2=10, center=true);\n        }\n        \n        // Hollow out the sack\n        translate([0, 0, 5])\n            cube([33, 18, 48], center=true);\n        \n        // Folded top opening\n        translate([0, 0, 55])\n            cube([37, 22, 10], center=true);\n    }\n    \n    // Folded top flap\n    color(\"wheat\")\n    translate([0, 0, 55])\n        rotate([0, 15, 0])\n        cube([35, 20, 3], center=true);\n    \n    // Crease lines on flap\n    for (i = [-1:1]) {\n        color(\"burlywood\")\n        translate([i * 10, 0, 56.5])\n            cube([1, 19, 1], center=true);\n    }\n}\n\nmodule flour_surface() {\n    // Visible flour surface inside sack\n    color(\"lemonchiffon\")\n    translate([0, 0, 30])\n        sphere(r=16);\n    \n    // Flour texture - small bumps\n    for (i = [0:30]) {\n        translate([\n            -10 + rands(0, 20, 1)[0],\n            -8 + rands(0, 16, 1)[0],\n            28 + rands(0, 4, 1)[0]\n        ])\n        scale([1, 1, 0.5])\n            sphere(r=0.5 + rands(0, 1, 1)[0]);\n    }\n}\n\nmodule sack_label() {\n    // Blue label band\n    color(\"cornflowerblue\")\n    translate([0, 0, 25])\n        cube([36, 10, 5], center=true);\n    \n    // Label text representation (raised rectangles)\n    color(\"white\")\n    translate([-12, 0, 27.5])\n        cube([8, 1, 1], center=true);\n    translate([0, 0, 27.5])\n        cube([12, 1, 1], center=true);\n    translate([12, 0, 27.5])\n        cube([8, 1, 1], center=true);\n}\n\n// Assembly\nflour_sack();\ntranslate([0, 0, 8])\n    flour_surface();\nsack_label();",
    "renders": true
  },
  {
    "food_item": "semolinaflour",
    "openscad_code": "// Semolina Flour Pile with Realistic Texture\n// Medium complexity model showing a mound of fine semolina flour\n\n// Base settings\n$fn = 32;\n\n// Main flour color - warm pale yellow\ncolor([0.98, 0.94, 0.78]) {\n    // Main flour mound using stacked spheres\n    module flour_mound() {\n        // Create base mound with decreasing spheres\n        for (i = [0:5]) {\n            translate([0, 0, i * 3]) \n            scale([1 - i * 0.15, 1 - i * 0.15, 0.4])\n            sphere(r = 25 - i * 3);\n        }\n        \n        // Add irregular surface texture with small spheres\n        for (x = [-20:5:20]) {\n            for (y = [-20:5:20]) {\n                if (x*x + y*y < 400) {\n                    translate([x + sin(x) * 3, y + cos(y) * 3, \n                              15 + noise(x, y) * 8])\n                    sphere(r = 1.5 + sin(x + y) * 0.5);\n                }\n            }\n        }\n    }\n    \n    // Noise function for natural variation\n    function noise(x, y) = sin(x * 0.3) * cos(y * 0.3) * 0.5 + 0.5;\n    \n    // Create flour grains scattered around base\n    module scattered_grains() {\n        for (i = [0:50]) {\n            rotate([rand(i) * 360, rand(i + 100) * 360, rand(i + 200) * 360])\n            translate([\n                rand(i + 300) * 60 - 30,\n                rand(i + 400) * 60 - 30,\n                rand(i + 500) * 3\n            ])\n            sphere(r = 0.5 + rand(i + 600) * 1.5);\n        }\n    }\n    \n    // Random number generator for natural distribution\n    function rand(n) = (n * 9301 + 49297) % 233280 / 233280;\n    \n    // Combine all elements\n    union() {\n        flour_mound();\n        scattered_grains();\n        \n        // Add slight depression at top for realistic look\n        translate([0, 0, 18])\n        rotate_extrude(angle = 360)\n        translate([8, 0, 0])\n        circle(r = 2);\n    }\n}\n\n// Create a simple base platform to catch flour\ncolor([0.85, 0.82, 0.78]) \ntranslate([0, 0, -2])\ncylinder(h = 2, r = 35, $fn = 64);",
    "renders": true
  },
  {
    "food_item": "durum",
    "openscad_code": "// Durum wrap with visible layers, lettuce, tomatoes, onions and meat strips\n// Size: ~80mm long, 25mm diameter\n\n// Main colors\n$fn = 50;\n\n// Helper module for lettuce texture\nmodule lettuce_leaf(h = 0.8, r = 12, waves = 8) {\n    difference() {\n        cylinder(h = h, r = r, center = true);\n        for(i = [0:waves-1]) {\n            rotate([0, 0, i * 360/waves])\n            translate([r * 0.6, 0, 0])\n            cube([r * 1.5, 1.5, h * 1.5], center = true);\n        }\n    }\n}\n\n// Tomato cubes\nmodule tomato_cube(size = 3) {\n    color([0.9, 0.2, 0.15])\n    cube([size, size, size], center = true);\n}\n\n// Onion rings\nmodule onion_ring(r = 5, t = 1.5) {\n    color([0.95, 0.85, 0.9])\n    difference() {\n        cylinder(h = t, r = r, center = true);\n        cylinder(h = t + 0.1, r = r - 1.2, center = true);\n    }\n}\n\n// Meat strips\nmodule meat_strip(l = 12, w = 4, h = 2) {\n    color([0.5, 0.25, 0.15])\n    scale([1 + sin($t * 5) * 0.1, 1, 1])\n    cube([l, w, h], center = true);\n}\n\n// Main durum assembly\nmodule durum() {\n    // Tortilla wrap - main cylinder\n    color([0.92, 0.82, 0.65])\n    difference() {\n        cylinder(h = 80, r = 12.5, center = true);\n        translate([0, 0, 35])\n        cylinder(h = 20, r = 11, center = true);\n    }\n    \n    // Inner filling layers\n    translate([0, 0, -25])\n    union() {\n        // Base lettuce layer\n        color([0.5, 0.7, 0.3])\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90])\n            translate([0, 0, i * 0.8])\n            lettuce_leaf();\n        }\n        \n        // Tomato pieces scattered\n        for(i = [0:7]) {\n            rotate([0, 0, i * 45])\n            translate([8 - (i % 3) * 2, 0, 2.5 + (i % 2) * 1.5])\n            tomato_cube(2.5 + (i % 3));\n        }\n        \n        // Onion rings\n        for(i = [0:4]) {\n            rotate([0, 0, i * 72])\n            translate([5 + (i % 2) * 3, 0, 4 + i * 0.3])\n            rotate([90, 0, 0])\n            onion_ring(3 + i % 2);\n        }\n        \n        // Meat strips\n        for(i = [0:5]) {\n            rotate([0, 0, i * 60])\n            translate([6 - i, 0, 6 + i * 0.4])\n            rotate([0, 10 + i * 5, 0])\n            meat_strip(10 + i, 3.5 - i * 0.2);\n        }\n        \n        // Top lettuce layer\n        color([0.5, 0.7, 0.3])\n        translate([0, 0, 10])\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90 + 45])\n            translate([0, 0, i * 0.6])\n            scale(0.9)\n            lettuce_leaf();\n        }\n    }\n    \n    // Folded end - simple cone\n    translate([0, 0, 42])\n    rotate([90, 0, 0])\n    scale([1, 1, 0.8])\n    color([0.92, 0.82, 0.65])\n    cylinder(h1 = 15, h2 = 0, r1 = 12, r2 = 8, center = true);\n}\n\ndurum();",
    "renders": true
  },
  {
    "food_item": "einkorn",
    "openscad_code": "$fn = 32;\n\n// Einkorn wheat spike model\n// Approx. 90 mm tall, 30 mm wide\n\n// Main spike axis\ncolor(\"wheat\") \ndifference() {\n    translate([0, 0, 5])\n    cylinder(h = 80, d1 = 3, d2 = 2, center = false);\n    \n    // Awn removal for printing\n    translate([0, 0, 85])\n    cylinder(h = 5, d = 4);\n}\n\n// Create a single spikelet module\nmodule spikelet(base_height, angle) {\n    translate([0, 0, base_height])\n    rotate([0, 0, angle])\n    translate([0, 10, 0])\n    rotate([0, 0, 15])\n    union() {\n        // Spikelet body\n        color(\"goldenrod\")\n        scale([1, 0.7, 0.7])\n        sphere(d = 4);\n        \n        // Two grains inside\n        color(\"wheat\")\n        translate([0, 0.5, 1])\n        scale([0.8, 0.7, 0.6])\n        sphere(d = 3);\n        \n        color(\"wheat\")\n        translate([0, -0.5, 1])\n        scale([0.8, 0.7, 0.6])\n        sphere(d = 3);\n        \n        // Awn (simplified for printing)\n        color(\"wheat\")\n        translate([0, 0, 1.5])\n        rotate([90, 0, 0])\n        cylinder(h = 15, d1 = 0.5, d2 = 0.2);\n    }\n}\n\n// Create spikelets along the stem\nfor (i = [5:5:75]) {\n    // Alternate sides\n    spikelet(i, (i % 10 == 0) ? 45 : -45);\n    spikelet(i + 2.5, (i % 10 == 0) ? -45 : 45);\n}\n\n// Add a few grains at the very top\nfor (j = [0:30:330]) {\n    color(\"wheat\")\n    translate([0, 0, 82])\n    rotate([0, 0, j])\n    translate([0, 1.5, 0])\n    sphere(d = 3);\n}\n\n// Base leaves\ncolor(\"darkolivegreen\")\nunion() {\n    translate([0, 3, 0])\n    rotate([0, 10, 0])\n    scale([1, 0.2, 2])\n    sphere(d = 8);\n    \n    translate([0, -3, 0])\n    rotate([0, -10, 0])\n    scale([1, 0.2, 2])\n    sphere(d = 8);\n}",
    "renders": true
  },
  {
    "food_item": "emmer",
    "openscad_code": "// Emmer wheat - ancient grain with characteristic long awns and dense spikelets\n// Overall dimensions: ~70mm length, 20mm width for 3D printing\n\n// Color definitions\ngrain_color = \"#D4A574\";\nstem_color = \"#8B7355\";\nawn_color = \"#E6D3A3\";\n\n// Main grain head module\nmodule emmer_head() {\n    color(grain_color) {\n        // Central rachis (main stem of head)\n        translate([0, 0, 0]) {\n            cylinder(h=60, d1=4, d2=2, $fn=8);\n        }\n        \n        // Generate spikelets along the rachis\n        for (i = [0:5:55]) {\n            // Alternate left and right spikelets\n            rotate([0, 0, i*15]) {\n                translate([0, 6, i]) {\n                    spikelet(i % 2 == 0);\n                }\n            }\n        }\n    }\n}\n\n// Individual spikelet module\nmodule spikelet(is_left) {\n    mirror([is_left ? -1 : 1, 0, 0]) {\n        // Spikelet base\n        translate([0, 0, 0]) {\n            cube([3, 8, 5], center=true);\n        }\n        \n        // Three grains per spikelet\n        for (j = [0:2]) {\n            translate([0, -1 + j*2, 2.5]) {\n                scale([0.8, 0.8, 1.2]) {\n                    grain();\n                }\n            }\n        }\n        \n        // Awn (long bristle) for each spikelet\n        color(awn_color) {\n            translate([0, 0, 6]) {\n                rotate([j*10-10, 0, 0]) {\n                    cylinder(h=15, d1=0.5, d2=0.2, $fn=4);\n                }\n            }\n        }\n    }\n}\n\n// Individual grain module\nmodule grain() {\n    difference() {\n        // Main grain body\n        sphere(d=3, $fn=12);\n        \n        // Crease along grain\n        translate([-1.5, 0, 0]) {\n            cube([3, 0.5, 3], center=true);\n        }\n        \n        // Germ end indentation\n        translate([1, 0, 0]) {\n            sphere(d=1.2, $fn=8);\n        }\n    }\n}\n\n// Stem module\nmodule stem() {\n    color(stem_color) {\n        // Main stem\n        translate([0, 0, -40]) {\n            cylinder(h=40, d=3, $fn=8);\n        }\n        \n        // Two leaves\n        for (k = [0:1]) {\n            rotate([0, 0, k*180]) {\n                translate([0, 2, -20]) {\n                    rotate([30, 0, 0]) {\n                        scale([0.8, 1, 0.2]) {\n                            cylinder(h=20, d=6, $fn=3);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Root system for stability\nmodule roots() {\n    color(stem_color) {\n        for (r = [0:45:135]) {\n            rotate([r, 0, 0]) {\n                translate([0, 0, -42]) {\n                    rotate([30, 0, 0]) {\n                        cylinder(h=8, d1=2, d2=0.5, $fn=4);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Assemble the complete emmer wheat plant\nunion() {\n    // Main structure\n    emmer_head();\n    stem();\n    roots();\n    \n    // Add slight natural bend\n    rotate([5, 0, 0]) {\n        children();\n    }\n}",
    "renders": true
  },
  {
    "food_item": "khorasan",
    "openscad_code": "// Khorasan wheat grain - realistic style with medium complexity\n// Overall dimensions approximately 8mm x 3mm x 3mm (scaled up for visibility)\n\n$fn = 32;\n\n// Main grain body with characteristic elongated shape\nmodule grain_body() {\n    color([0.82, 0.71, 0.48]) // Golden wheat color\n    union() {\n        // Main cylindrical body slightly tapered\n        cylinder(h1 = 8, h2 = 8, r1 = 1.5, r2 = 1.2, center = true);\n        \n        // Rounded ends\n        translate([0, 0, 4])\n            scale([1, 1, 0.8])\n            sphere(1.5);\n        translate([0, 0, -4])\n            scale([1, 1, 0.8])\n            sphere(1.2);\n    }\n}\n\n// Crease line along the grain\nmodule grain_crease() {\n    color([0.75, 0.65, 0.42]) // Slightly darker for crease\n    translate([0, 1.2, 0])\n        scale([0.1, 0.3, 8.5])\n        cube([1, 1, 1], center = true);\n}\n\n// Fine surface texture with small indentations\nmodule grain_texture() {\n    color([0.78, 0.68, 0.45])\n    for(i = [0:5]) {\n        rotate([0, 0, i * 60])\n            for(j = [-3:3]) {\n                translate([0, 1.3, j * 1.2])\n                    scale([1, 0.1, 1])\n                    sphere(0.15);\n            }\n    }\n}\n\n// Beard (awns) at the top of grain\nmodule grain_beard() {\n    color([0.9, 0.85, 0.7]) // Lighter straw color\n    union() {\n        // Main beard part\n        translate([0, 0, 5.5])\n            rotate([10, 0, 0])\n            cylinder(h = 3, r = 0.15, center = false);\n            \n        // Small bristles\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90])\n                translate([0.2, 0, 6.5])\n                    rotate([0, 30, 0])\n                    cylinder(h = 1, r = 0.05, center = false);\n        }\n    }\n}\n\n// Germ area at bottom\nmodule grain_germ() {\n    color([0.6, 0.5, 0.35]) // Darker area for germ\n    translate([0, -0.8, -4.2])\n        scale([0.7, 0.4, 0.5])\n        sphere(0.8);\n}\n\n// Complete single grain\nmodule khorasan_grain() {\n    union() {\n        grain_body();\n        grain_crease();\n        grain_texture();\n        grain_beard();\n        grain_germ();\n    }\n}\n\n// Scale up for 3D printing visibility\nscale([10, 10, 10])\n    khorasan_grain();",
    "renders": true
  },
  {
    "food_item": "freekeh",
    "openscad_code": "// Freekeh (green durum wheat) grains in a small pile\n// Realistic style, medium complexity\n\n// Color definitions\n$fn = 32;\ngrain_color = \"#8FB339\";\nstem_color = \"#5D7C0A\";\n\n// Single grain module with realistic wheat shape\nmodule grain(length = 8, width = 2.5, thickness = 1.8) {\n    color(grain_color) {\n        // Main grain body - elongated ellipsoid\n        scale([1, 0.6, 0.4]) \n            sphere(d = width);\n        \n        // Elongate along length\n        translate([length/2, 0, 0])\n            scale([length, width, thickness]) \n                sphere(d = 1);\n                \n        // Pointed tip\n        translate([length, 0, 0])\n            scale([0.8, 0.4, 0.3]) \n                sphere(d = width);\n                \n        // Stem attachment point\n        color(stem_color) {\n            translate([-1, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h = 1.5, d = 1);\n        }\n    }\n}\n\n// Surface texture module for grain\nmodule grain_texture() {\n    // Add small bumps for realistic texture\n    for(i = [0:15]) {\n        rotate([0, 0, i * 24]) {\n            translate([random(0, 6), random(-1, 1), random(-0.3, 0.3)])\n                scale([0.8, 0.8, 0.3])\n                    sphere(d = 0.5);\n        }\n    }\n}\n\n// Generate random positions for natural pile\nfunction random(min, max) = min + (max - min) * (rands(0, 1, 1)[0]);\n\n// Create a pile of grains\nmodule grain_pile() {\n    // Base layer\n    for(i = [0:12]) {\n        translate([\n            random(-15, 15), \n            random(-15, 15), \n            random(0, 3)\n        ]) {\n            rotate([random(-10, 10), random(-5, 5), random(0, 360)]) {\n                grain(random(7, 9), random(2.2, 2.8), random(1.6, 2));\n            }\n        }\n    }\n    \n    // Middle layer\n    for(i = [0:10]) {\n        translate([\n            random(-12, 12), \n            random(-12, 12), \n            random(4, 8)\n        ]) {\n            rotate([random(-15, 15), random(-10, 10), random(0, 360)]) {\n                grain(random(6.5, 8.5), random(2.1, 2.7), random(1.5, 1.9));\n            }\n        }\n    }\n    \n    // Top layer\n    for(i = [0:6]) {\n        translate([\n            random(-8, 8), \n            random(-8, 8), \n            random(8, 12)\n        ]) {\n            rotate([random(-20, 20), random(-15, 15), random(0, 360)]) {\n                grain(random(6, 8), random(2, 2.5), random(1.4, 1.8));\n            }\n        }\n    }\n}\n\n// Create the freekeh pile\ngrain_pile();",
    "renders": true
  },
  {
    "food_item": "fregola",
    "openscad_code": "// Fregola pasta - toasted semolina balls with realistic texture and color\n// Overall size: ~60mm diameter cluster of 2-4mm pasta balls\n\n$fn = 24;\n\n// Main module to create a cluster of fregola pasta\nmodule fregola_cluster() {\n    color(\"#D4A574\")  // Toasted semolina color\n    \n    // Create multiple pasta balls in random positions\n    for(i = [0:8:360]) {\n        rotate([i, 0, 0]) {\n            translate([0, 0, 0]) {\n                // First ring\n                rotate([0, i, 0]) {\n                    translate([15 + rand(i)*8, 0, 0]) {\n                        pasta_ball(2.2 + rand(i+5)*1.5);\n                    }\n                }\n                \n                // Second ring offset\n                rotate([0, i+45, 0]) {\n                    translate([10 + rand(i+10)*6, 0, 5]) {\n                        pasta_ball(1.8 + rand(i+15)*1.2);\n                    }\n                }\n                \n                // Third ring lower\n                rotate([0, i+22, 0]) {\n                    translate([20 + rand(i+20)*5, 0, -3]) {\n                        pasta_ball(2.5 + rand(i+25)*1.3);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Center balls\n    pasta_ball(3.2);\n    translate([5, 3, 2]) pasta_ball(2.8);\n    translate([-4, -2, -1]) pasta_ball(2.4);\n}\n\n// Individual pasta ball with texture\nmodule pasta_ball(size) {\n    difference() {\n        // Main sphere\n        sphere(r = size);\n        \n        // Small indentations for texture\n        for(j = [0:30:330]) {\n            rotate([j, j*1.5, 0]) {\n                translate([size*0.8, 0, 0]) {\n                    sphere(r = size*0.15);\n                }\n            }\n        }\n        \n        // Random larger indentations\n        for(k = [0:60:300]) {\n            rotate([k*2, k, k*0.7]) {\n                translate([size*0.7, 0, size*0.3]) {\n                    sphere(r = size*0.25);\n                }\n            }\n        }\n    }\n    \n    // Add slight flattening on bottom for stability\n    translate([0, 0, -size]) {\n        cylinder(h = size*0.3, r = size*0.9);\n    }\n}\n\n// Helper function for controlled randomness\nfunction rand(seed) = (sin(seed*12.9898 + 78.233)*43758.5453) % 1;\n\n// Render the fregola cluster\nfregola_cluster();",
    "renders": true
  },
  {
    "food_item": "carrot",
    "openscad_code": "// Realistic Carrot - Medium Complexity\n// Approx 80mm in length\n\n$fn = 32;\ncarrot_length = 80;\ncarrot_top_radius = 7;\ncarrot_bottom_radius = 3;\n\nmodule carrot_body() {\n    // Main carrot body with slight taper\n    color([0.9, 0.35, 0.1])\n    difference() {\n        cylinder(h=carrot_length, r1=carrot_top_radius, r2=carrot_bottom_radius, center=false);\n        \n        // Add subtle ridges along length\n        for(i=[0:5]) {\n            rotate([0, 0, i*60])\n            translate([carrot_top_radius-1.5, 0, 0])\n            scale([0.3, 0.3, 1])\n            cylinder(h=carrot_length, r=1.2, center=false);\n        }\n    }\n}\n\nmodule carrot_top() {\n    // Green leafy top\n    color([0.1, 0.6, 0.2])\n    translate([0, 0, carrot_length+1])\n    union() {\n        // Main stem bundle\n        cylinder(h=15, r=3, center=false);\n        \n        // Individual leaves\n        for(i=[0:7]) {\n            rotate([0, 0, i*45])\n            translate([2.5, 0, 15])\n            rotate([90-20*sin(i*45), 0, 0])\n            scale([1, 0.6, 0.2])\n            cylinder(h=25, r=3, center=false);\n        }\n    }\n}\n\nmodule carrot_texture() {\n    // Small bumps and imperfections for realism\n    color([0.9, 0.35, 0.1])\n    for(i=[10:5:70]) {\n        for(j=[0:30:150]) {\n            rotate([j, 0, 0])\n            translate([0, sin(j)*0.5, i])\n            sphere(r=0.3);\n        }\n    }\n}\n\nmodule carrot_grooves() {\n    // Natural growth grooves\n    color([0.85, 0.3, 0.05])\n    for(i=[0:3]) {\n        rotate([0, 0, i*90])\n        translate([0, 0, 0])\n        difference() {\n            cylinder(h=carrot_length, r1=carrot_top_radius+0.2, r2=carrot_bottom_radius+0.2, center=false);\n            translate([0, 0, -1])\n            cylinder(h=carrot_length+2, r1=carrot_top_radius-0.2, r2=carrot_bottom_radius-0.2, center=false);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    carrot_body();\n    carrot_top();\n    carrot_texture();\n    carrot_grooves();\n}",
    "renders": true
  },
  {
    "food_item": "broccoli",
    "openscad_code": "// Broccoli realistic model - medium complexity\n// Approximate size: 80mm tall, 60mm wide\n\n// Main colors\ncolor([0.2, 0.5, 0.15]) render() {\n    union() {\n        // Main stem\n        stem();\n\n        // Broccoli florets (main head)\n        translate([0, 0, 35]) {\n            floret_cluster(0, 0, 0, 1);\n        }\n\n        // Side florets\n        translate([-15, -10, 25]) {\n            rotate([15, 0, 45]) {\n                floret_cluster(0, 0, 0, 0.7);\n            }\n        }\n        \n        translate([12, -12, 22]) {\n            rotate([20, 10, -30]) {\n                floret_cluster(0, 0, 0, 0.6);\n            }\n        }\n    }\n}\n\nmodule stem() {\n    // Main stem cylinder\n    cylinder(h = 40, d1 = 12, d2 = 18, $fn = 20);\n    \n    // Stem texture rings\n    for (i = [0:5:35]) {\n        translate([0, 0, i]) {\n            difference() {\n                cylinder(h = 1.5, d = 14, $fn = 20);\n                cylinder(h = 2, d = 12, $fn = 20);\n            }\n        }\n    }\n    \n    // Small branches\n    translate([6, 0, 28]) {\n        rotate([0, 90, 0]) {\n            cylinder(h = 8, d1 = 4, d2 = 2, $fn = 8);\n        }\n    }\n    \n    translate([-5, 5, 32]) {\n        rotate([0, 80, 30]) {\n            cylinder(h = 6, d1 = 3.5, d2 = 1.5, $fn = 8);\n        }\n    }\n}\n\nmodule floret_cluster(x, y, z, scale_factor) {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        // Central floret\n        translate([0, 0, 0]) {\n            floret(0, 0, 0, 1);\n        }\n        \n        // Ring of 6 florets\n        for (i = [0:60:359]) {\n            rotate([0, 0, i]) {\n                translate([8, 0, 2]) {\n                    floret(0, 0, 0, 0.7);\n                }\n            }\n        }\n        \n        // Second ring of 8 florets, slightly higher\n        for (i = [0:45:359]) {\n            rotate([0, 0, i]) {\n                translate([14, 0, 5]) {\n                    floret(0, 0, 0, 0.5);\n                }\n            }\n        }\n        \n        // Top floret\n        translate([0, 0, 12]) {\n            floret(0, 0, 0, 0.8);\n        }\n    }\n}\n\nmodule floret(x, y, z, scale_factor) {\n    translate([x, y, z]) {\n        scale([scale_factor, scale_factor, scale_factor]) {\n            // Main floret body\n            sphere(d = 12, $fn = 16);\n            \n            // Small surface bumps for texture\n            for (i = [0:30:359]) {\n                rotate([i, i/2, 0]) {\n                    translate([4, 0, 3]) {\n                        sphere(d = 2.5, $fn = 8);\n                    }\n                }\n            }\n            \n            // Additional texture spheres\n            for (j = [0:45:359]) {\n                rotate([0, j, 0]) {\n                    translate([3, 0, -2]) {\n                        sphere(d = 1.8, $fn = 6);\n                    }\n                }\n            }\n            \n            // Top point\n            translate([0, 0, 6]) {\n                sphere(d = 4, $fn = 8);\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "food_item": "spinach",
    "openscad_code": "// Realistic 3D printable spinach model\n// Medium complexity (approx. 100 lines)\n// Features: crinkled leaves, stem, proper proportions\n\ncolor([0.15, 0.45, 0.15])  // Dark green spinach color\n\nmodule leaf_base() {\n    // Basic leaf shape with thickness\n    linear_extrude(height = 1.2, convexity = 10) {\n        difference() {\n            // Main leaf shape\n            offset(r = 2) {\n                polygon(points = [\n                    [0, 0], [10, 5], [20, 3], [30, 8],\n                    [35, 15], [30, 25], [20, 30], [10, 28],\n                    [2, 20], [0, 10]\n                ]);\n            }\n            // Vein indentations\n            for (i = [1:9]) {\n                translate([i*3.5, 10 + sin(i*30)*3, 0])\n                    circle(r = 0.8);\n            }\n        }\n    }\n}\n\nmodule crinkled_leaf(x_pos, y_pos, z_pos, rot, scale_factor) {\n    // Individual crinkled spinach leaf\n    translate([x_pos, y_pos, z_pos]) {\n        rotate([0, 0, rot]) {\n            scale([scale_factor, scale_factor, 1]) {\n                union() {\n                    leaf_base();\n                    \n                    // Add crinkles with small spheres\n                    for (i = [0:5]) {\n                        translate([\n                            15 + sin(i*45)*8,\n                            15 + cos(i*45)*6,\n                            0.6\n                        ]) {\n                            scale([1.2, 0.8, 0.4])\n                                sphere(r = 2.5, $fn = 8);\n                        }\n                    }\n                    \n                    // Edge detail\n                    for (j = [0:15]) {\n                        angle = j * 24;\n                        translate([\n                            17 + cos(angle) * 15,\n                            15 + sin(angle) * 12,\n                            0.9\n                        ]) {\n                            scale([0.4, 0.4, 0.6])\n                                sphere(r = 1.5, $fn = 6);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule spinach_bunch() {\n    // Main stem\n    color([0.1, 0.35, 0.1]) {\n        translate([0, 0, 0]) {\n            rotate([90, 0, 0]) {\n                cylinder(h = 25, r1 = 3, r2 = 2, $fn = 8);\n            }\n        }\n    }\n    \n    // Multiple leaves radiating from stem\n    for (i = [0:7]) {\n        angle = i * 45;\n        radius = 8 + (i % 2) * 5;\n        crinkled_leaf(\n            cos(angle) * radius,\n            sin(angle) * radius,\n            20 + sin(i*30) * 3,\n            angle + 15,\n            1.2 - (i % 3) * 0.2\n        );\n    }\n    \n    // Additional smaller inner leaves\n    for (j = [0:4]) {\n        angle2 = j * 72 + 36;\n        crinkled_leaf(\n            cos(angle2) * 5,\n            sin(angle2) * 5,\n            28,\n            angle2 - 45,\n            0.8\n        );\n    }\n}\n\n// Render the complete spinach\nspinach_bunch();",
    "renders": true
  },
  {
    "food_item": "bean",
    "openscad_code": "// Realistic 3D printable bean model\n// Kidney bean style with natural curved shape and surface details\n\ncolor([0.45, 0.25, 0.15])  // Natural bean color - reddish brown\n\nmodule bean_body() {\n    // Main bean shape using ellipsoid construction\n    difference() {\n        // Primary ellipsoid shape\n        scale([1, 0.6, 0.35])\n        sphere(d=60, $fn=50);\n        \n        // Indentation along one side for bean curvature\n        translate([0, 0, 8])\n        rotate([90, 0, 0])\n        scale([0.8, 0.9, 1])\n        cylinder(h=30, d=20, $fn=40);\n    }\n}\n\nmodule bean_hilum() {\n    // The small scar where bean attaches to pod\n    translate([-25, -12, 0])\n    rotate([0, 90, 0])\n    scale([0.2, 0.15, 0.1])\n    cylinder(h=15, d=8, $fn=20);\n}\n\nmodule surface_texture() {\n    // Add small bumps for realistic bean texture\n    for(i = [0:5:355]) {\n        rotate([0, 0, i])\n        translate([20 * cos(i/3), 15 * sin(i/3), 8])\n        scale([0.2, 0.2, 0.1])\n        sphere(d=3, $fn=10);\n    }\n    \n    for(i = [0:8:355]) {\n        rotate([0, 0, i+15])\n        translate([15 * cos(i/2.5), 12 * sin(i/2.5), 5])\n        scale([0.15, 0.15, 0.08])\n        sphere(d=2.5, $fn=8);\n    }\n}\n\nmodule bean_curvature() {\n    // Create natural kidney bean curve\n    rotate([15, 0, 0])\n    translate([0, -5, 0])\n    bean_body();\n}\n\nmodule realistic_bean() {\n    union() {\n        // Main bean structure\n        bean_curvature();\n        \n        // Hilum/scar detail\n        color([0.35, 0.2, 0.12])\n        bean_hilum();\n        \n        // Surface texture\n        color([0.5, 0.28, 0.16])\n        surface_texture();\n    }\n}\n\n// Generate the complete bean model\nrotate([0, 0, 45])  // Orient for better 3D printing\nrealistic_bean();",
    "renders": true
  },
  {
    "food_item": "pea",
    "openscad_code": "// Realistic Pea Pod with Individual Peas\n// Medium complexity OpenSCAD model\n\n$fn = 32;  // Smooth curves\n\n// Main pea pod module\nmodule pea_pod() {\n    color([0.13, 0.55, 0.13])  // Dark green pod color\n    \n    // Main pod body - slightly curved\n    translate([0, 0, 5]) rotate([0, 10, 0]) \n    difference() {\n        // Outer pod shape\n        scale([1, 0.4, 0.25]) \n        sphere(d=80);\n        \n        // Hollow out the inside\n        translate([0, -5, 0]) \n        scale([0.8, 0.35, 0.2]) \n        sphere(d=80);\n    }\n    \n    // Pod seam ridge\n    translate([0, 15, 0]) rotate([0, 10, 0])\n    scale([0.05, 1, 0.3])\n    cube([100, 10, 20], center=true);\n    \n    // Pod tip\n    translate([0, 40, 0]) rotate([0, 10, 0])\n    scale([0.15, 0.15, 0.3])\n    sphere(d=20);\n    \n    // Pod stem\n    translate([0, -40, 0])\n    cylinder(h=15, r1=3, r2=2);\n}\n\n// Individual pea module\nmodule pea(size=8, texture=true) {\n    color([0.2, 0.8, 0.2])  // Bright green pea color\n    \n    // Main pea sphere\n    sphere(d=size);\n    \n    // Add slight flattening on one side\n    if (texture) {\n        translate([0, 0, -size/4])\n        scale([1, 1, 0.8])\n        sphere(d=size);\n    }\n    \n    // Subtle texture dots\n    if (texture) {\n        for (i = [0:5]) {\n            rotate([0, 0, i*60])\n            translate([size/2.2, 0, 0])\n            color([0.15, 0.7, 0.15])\n            sphere(d=size/10);\n        }\n    }\n}\n\n// Create the pod\npea_pod();\n\n// Place peas inside the pod in two rows\ntranslate([0, 0, 0])\nfor (i = [-2:2]) {\n    // First row of peas\n    translate([i*12, 0, 0])\n    pea(12, true);\n    \n    // Second row of peas, offset\n    translate([i*12 + 6, 12, -5])\n    pea(10, true);\n}\n\n// Add some loose peas nearby for realism\ntranslate([50, 0, 0]) pea(8, true);\ntranslate([55, -10, 0]) pea(9, true);\ntranslate([-50, 0, 0]) pea(7, true);\ntranslate([-55, -5, 0]) pea(8, true);\n\n// Pod texture lines\nfor (i = [-3:3]) {\n    translate([i*10, 0, 0]) rotate([0, 10, 0])\n    color([0.1, 0.45, 0.1])\n    scale([1, 0.05, 0.05])\n    sphere(d=70);\n}",
    "renders": true
  },
  {
    "food_item": "lentil",
    "openscad_code": "// Lentil 3D model - realistic style, medium complexity\n// Single lentil grain with realistic surface texture and proportions\n\nmodule lentil_surface() {\n    // Create base lentil shape - lens/ellipsoid\n    intersection() {\n        // Main ellipsoid body\n        scale([1, 0.7, 0.3])\n            sphere(d=30, $fn=60);\n        \n        // Flatten top and bottom slightly\n        difference() {\n            scale([1, 0.7, 0.3])\n                sphere(d=30, $fn=60);\n            translate([0, 0, -8])\n                cube([50, 50, 10], center=true);\n        }\n    }\n}\n\nmodule lentil_texture() {\n    // Add surface texture with small bumps\n    difference() {\n        lentil_surface();\n        \n        // Create small indentations for texture\n        for(i = [0:20]) {\n            for(j = [0:10]) {\n                angle1 = i * 18;\n                angle2 = j * 36;\n                x = 12 * sin(angle1) * cos(angle2);\n                y = 12 * sin(angle1) * sin(angle2);\n                z = 8 * cos(angle1);\n                \n                translate([x, y, z])\n                    rotate([90 - angle1, 0, angle2])\n                        sphere(d=0.8, $fn=8);\n            }\n        }\n        \n        // Add central groove\n        rotate([90, 0, 0])\n            translate([0, 0, -15.5])\n                cylinder(h=31, d1=1.5, d2=0.5, $fn=30);\n    }\n}\n\nmodule lentil_edge() {\n    // Add slight rim around the edge\n    difference() {\n        intersection() {\n            scale([1.05, 0.75, 0.32])\n                sphere(d=30, $fn=60);\n            translate([0, 0, -1])\n                cube([40, 40, 2], center=true);\n        }\n        \n        scale([1, 0.7, 0.3])\n            sphere(d=30, $fn=60);\n    }\n}\n\n// Main lentil assembly\ncolor([0.65, 0.4, 0.25]) {\n    union() {\n        // Base lentil\n        lentil_texture();\n        \n        // Edge rim\n        color([0.7, 0.45, 0.3])\n            lentil_edge();\n    }\n}\n\n// Add slight color variation for realism\ntranslate([2, 1, 0])\n    color([0.6, 0.35, 0.2])\n        scale([0.98, 0.98, 0.98])\n            lentil_surface();",
    "renders": true
  },
  {
    "food_item": "onion",
    "openscad_code": "// Realistic 3D printable onion - medium complexity\n// Characteristic layered bulb, papery skin, root and top\n\n$fn=36;\n\n// Overall scale factor\nscale_factor = 0.5;\n\nmodule onion_bulb() {\n    // Main bulb body - slightly flattened sphere\n    color([0.9, 0.8, 0.7])  // Light tan outer skin\n    scale([1, 1, 0.8])\n    sphere(d=80 * scale_factor);\n}\n\nmodule onion_layers() {\n    // Internal concentric layers visible at cut\n    for(i=[1:5]) {\n        color([0.95, 0.9, 0.85])  // Off-white inner layers\n        scale([1, 1, 0.8])\n        sphere(d=(80 - i*8) * scale_factor);\n    }\n}\n\nmodule onion_skin_texture() {\n    // Papery outer skin texture using thin intersecting cylinders\n    color([0.85, 0.75, 0.65])  // Slightly darker skin tone\n    \n    for(i=[0:5:360]) {\n        rotate([0, 0, i])\n        translate([0, 0, -40 * scale_factor])\n        cylinder(h=80 * scale_factor, d=82 * scale_factor, $fn=6);\n    }\n    \n    for(i=[0:30:150]) {\n        rotate([i, 0, 0])\n        translate([0, 0, 0])\n        cylinder(h=82 * scale_factor, d=82 * scale_factor, $fn=6);\n    }\n}\n\nmodule onion_root() {\n    // Root hairs at bottom\n    color([0.6, 0.4, 0.3])  // Brown root color\n    \n    // Main root base\n    translate([0, 0, -42 * scale_factor])\n    cylinder(h=15 * scale_factor, d1=20 * scale_factor, d2=8 * scale_factor);\n    \n    // Root hairs\n    for(i=[0:45:315]) {\n        rotate([0, 0, i])\n        translate([8 * scale_factor, 0, -50 * scale_factor])\n        cylinder(h=20 * scale_factor, d=2 * scale_factor);\n    }\n}\n\nmodule onion_top() {\n    // Dried top stem\n    color([0.7, 0.5, 0.3])  // Dried brown\n    \n    translate([0, 0, 42 * scale_factor])\n    cylinder(h=25 * scale_factor, d=8 * scale_factor);\n    \n    // Curved dried leaves\n    for(i=[0:120:240]) {\n        rotate([0, 0, i])\n        translate([0, 0, 50 * scale_factor])\n        rotate([30, 0, 0])\n        cylinder(h=30 * scale_factor, d=4 * scale_factor);\n    }\n}\n\nmodule onion_ring_detail() {\n    // Subtle ring grooves on surface\n    color([0.8, 0.7, 0.6])\n    for(i=[1:3]) {\n        rotate([0, 90, 0])\n        translate([0, 0, -20 * scale_factor + i*15 * scale_factor])\n        scale([1, 1, 0.05])\n        sphere(d=81 * scale_factor);\n    }\n}\n\n// Assemble the complete onion\nunion() {\n    onion_bulb();\n    \n    // Add skin texture\n    intersection() {\n        onion_skin_texture();\n        onion_bulb();\n    }\n    \n    onion_root();\n    onion_top();\n    onion_ring_detail();\n}\n\n// Optional: Show cut section to reveal layers\n// difference() {\n//     union() {\n//         onion_bulb();\n//         onion_root();\n//         onion_top();\n//     }\n//     translate([0, 0, 0])\n//     rotate([0, 0, 45])\n//     cube([100, 100, 100], center=true);\n//     onion_layers();\n// }",
    "renders": true
  },
  {
    "food_item": "garlic",
    "openscad_code": "// Garlic bulb\nmodule garlic_bulbs() {\n    // Main bulb body\n    color(\"ivory\") {\n        difference() {\n            sphere(d = 35);\n            // Flatten bottom slightly\n            translate([0, 0, -20])\n                cube([40, 40, 20], center = true);\n        }\n    }\n    \n    // Create 8-12 cloves arranged in a circle\n    cloves = 10;\n    for(i = [0:cloves-1]) {\n        angle = i * 360 / cloves;\n        translate([0, 0, -5]) {\n            rotate([0, 0, angle]) {\n                translate([10, 0, 0]) {\n                    color(\"antiquewhite\") {\n                        // Individual clove shape\n                        rotate([0, 90, 0]) {\n                            scale([1, 0.6, 0.6]) {\n                                cylinder(h = 18, d1 = 12, d2 = 8);\n                            }\n                        }\n                        // Tapered end\n                        translate([9, 0, 0]) {\n                            rotate([0, 90, 0]) {\n                                scale([1, 0.4, 0.4]) {\n                                    cylinder(h = 3, d1 = 8, d2 = 4);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Garlic stem\nmodule garlic_stem() {\n    color(\"darkgreen\") {\n        translate([0, 0, 17.5]) {\n            cylinder(h = 25, d1 = 8, d2 = 5);\n        }\n    }\n}\n\n// Root hairs at bottom\nmodule garlic_roots() {\n    color(\"brown\") {\n        for(i = [0:7]) {\n            angle = i * 45;\n            rotate([0, 0, angle]) {\n                translate([8, 0, -17.5]) {\n                    rotate([90, 0, 0]) {\n                        scale([1, 1, 0.3]) {\n                            cylinder(h = 5, d = 1.5);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Surface texture lines\nmodule garlic_texture() {\n    color(\"ivory\") {\n        for(i = [0:3]) {\n            rotate([0, i * 15, 0]) {\n                difference() {\n                    sphere(d = 35.5);\n                    sphere(d = 34.5);\n                }\n            }\n        }\n    }\n}\n\n// Assemble the complete garlic\nunion() {\n    garlic_bulbs();\n    garlic_stem();\n    garlic_roots();\n    garlic_texture();\n}",
    "renders": true
  },
  {
    "food_item": "pepper",
    "openscad_code": "// Realistic Pepper Model - Medium Complexity\n// Dimensions: ~70mm tall, 40mm diameter\n\n// Main color definitions\npepper_red = [0.9, 0.15, 0.1];\nstem_green = [0.2, 0.4, 0.1];\nseed_yellow = [0.9, 0.85, 0.5];\n\n// Main pepper body module\nmodule pepper_body() {\n    color(pepper_red) {\n        difference() {\n            // Main pepper shape using sphere with scaling\n            union() {\n                // Upper rounded part\n                translate([0, 0, 15])\n                    scale([1, 1, 1.3])\n                    sphere(d=35, $fn=32);\n                \n                // Lower pointed part\n                translate([0, 0, -10])\n                    scale([0.8, 0.8, 1.5])\n                    sphere(d=30, $fn=32);\n                \n                // Connect middle section\n                cylinder(h=25, d1=35, d2=30, $fn=32);\n            }\n            \n            // Create characteristic lobes\n            for(i = [0:3]) {\n                rotate([0, 0, i * 90 + 45])\n                    translate([8, 0, 0])\n                        scale([0.3, 1, 1])\n                        cube([20, 15, 40], center=true);\n            }\n            \n            // Hollow interior for seeds\n            translate([0, 0, 5])\n                scale([0.8, 0.8, 0.8])\n                sphere(d=25, $fn=32);\n        }\n    }\n}\n\n// Pepper stem module\nmodule pepper_stem() {\n    color(stem_green) {\n        // Main stem\n        translate([0, 0, 30])\n            rotate([90, 0, 0])\n                cylinder(h=15, d1=8, d2=5, $fn=16);\n        \n        // Stem curve\n        translate([0, 0, 30])\n            rotate([90, 0, 0])\n                translate([0, 7.5, 0])\n                    rotate([30, 0, 0])\n                        cylinder(h=10, d=5, $fn=16);\n        \n        // Stem leaves\n        for(i = [0:1]) {\n            rotate([0, 0, i * 180])\n                translate([3, 0, 32])\n                    rotate([0, 30, 0])\n                        scale([0.5, 1, 0.2])\n                        sphere(d=10, $fn=16);\n        }\n    }\n}\n\n// Seed generation module\nmodule pepper_seeds() {\n    color(seed_yellow) {\n        // Generate seeds inside pepper\n        for(i = [0:7]) {\n            rotate([0, 0, i * 45])\n                translate([8, 0, 5])\n                    rotate([90, 0, 0])\n                        scale([1, 1.5, 0.5])\n                        cylinder(h=3, d=2, $fn=8);\n        }\n        \n        for(i = [0:5]) {\n            rotate([0, 0, i * 60 + 30])\n                translate([6, 0, 0])\n                    rotate([90, 0, 0])\n                        scale([1, 1.5, 0.5])\n                        cylinder(h=3, d=2, $fn=8);\n        }\n    }\n}\n\n// Pepper surface texture\nmodule pepper_texture() {\n    color(pepper_red) {\n        // Small bumps on surface\n        for(angle = [0:30:330]) {\n            for(height = [-15:5:15]) {\n                rotate([0, 0, angle])\n                    translate([15, 0, height])\n                        sphere(d=1.5, $fn=8);\n            }\n        }\n    }\n}\n\n// Complete pepper assembly\nunion() {\n    pepper_body();\n    pepper_stem();\n    \n    // Create opening at top for seeds\n    difference() {\n        translate([0, 0, 0])\n            pepper_seeds();\n            \n        // Mask for seeds visible through opening\n        translate([0, 0, 15])\n            cylinder(h=20, d=15, $fn=32);\n    }\n    \n    // Add texture\n    translate([0, 0, 0])\n        pepper_texture();\n}",
    "renders": true
  },
  {
    "food_item": "tomato",
    "openscad_code": "// Realistic Tomato - Medium Complexity\n// Features: main body, stem, sepals, surface bumps, seeds, and color variations\n\n// Main parameters\ntomato_radius = 30;\nstem_height = 12;\nsepal_count = 8;\nbump_detail = 20;\nseed_count = 12;\n\n// Main tomato body with subtle imperfections\nmodule tomato_body() {\n    // Base sphere slightly flattened\n    scale([1, 1, 0.9])\n    sphere(tomato_radius);\n    \n    // Surface bumps for realistic texture\n    for(i = [0:bump_detail-1]) {\n        rotate([0, 0, i*360/bump_detail])\n        translate([tomato_radius-2, 0, sin(i*5)*2])\n        scale([1, 1, 0.7])\n        sphere(3);\n    }\n}\n\n// Stem module with realistic taper\nmodule tomato_stem() {\n    color(\"darkgreen\")\n    translate([0, 0, tomato_radius*0.9])\n    cylinder(h=stem_height, r1=4, r2=2, $fn=8);\n}\n\n// Sepals (green leafy parts under stem)\nmodule sepal(index) {\n    angle = index * 360 / sepal_count;\n    color(\"green\")\n    translate([0, 0, tomato_radius*0.9])\n    rotate([0, 0, angle])\n    translate([5, 0, 0])\n    rotate([30, 0, 0])\n    scale([1, 0.3, 0.1])\n    cylinder(h=15, r1=6, r2=2);\n}\n\n// Internal seeds visible through translucent skin\nmodule seeds() {\n    color(\"beige\")\n    for(i = [0:seed_count-1]) {\n        angle = i * 137.5; // Golden angle for natural distribution\n        radius = tomato_radius * (0.3 + 0.2 * sin(i*3));\n        rotate([0, 0, angle])\n        translate([radius*cos(angle*3), radius*sin(angle*3), -5])\n        scale([1, 0.5, 0.3])\n        sphere(2);\n    }\n}\n\n// Create tomato assembly\nunion() {\n    // Main tomato colored red-orange\n    color(\"tomato\")\n    tomato_body();\n    \n    // Stem and sepals\n    tomato_stem();\n    for(i = [0:sepal_count-1]) {\n        sepal(i);\n    }\n    \n    // Internal seeds (subtracted for hollow effect)\n    difference() {\n        tomato_body();\n        scale([0.8, 0.8, 0.75])\n        seeds();\n    }\n}",
    "renders": true
  },
  {
    "food_item": "cabbage",
    "openscad_code": "// Realistic Cabbage - Medium Complexity\n// Outer leaves and inner layers with proper structure for 3D printing\n\n$fn = 32;\n\n// Overall cabbage dimensions\ncabbage_diameter = 80;\ncabbage_height = 60;\n\n// Main cabbage module\nmodule cabbage() {\n    color(\"lightgreen\")\n    union() {\n        // Outer leaves - curved and overlapping\n        for (i = [0:7]) {\n            rotate([0, 0, i * 45])\n            translate([0, 0, -5])\n            scale([1.0 - i * 0.05, 1.0 - i * 0.05, 1])\n            outer_leaf(i);\n        }\n        \n        // Inner cabbage head - tighter layers\n        inner_cabbage();\n        \n        // Stem base\n        stem();\n    }\n}\n\n// Individual outer leaf with realistic curve\nmodule outer_leaf(index) {\n    leaf_length = cabbage_diameter * 0.7 - index * 3;\n    leaf_width = cabbage_diameter * 0.5 - index * 2;\n    \n    // Create wavy leaf surface\n    difference() {\n        // Main leaf body\n        union() {\n            // Central part of leaf\n            translate([0, 0, 5])\n            scale([leaf_width/leaf_length, 1, 0.3])\n            sphere(d = leaf_length);\n            \n            // Leaf edges - create wavy effect\n            for (j = [0:6]) {\n                rotate([0, 0, j * 30])\n                translate([leaf_length * 0.3, 0, 2])\n                scale([0.3, 1, 0.5])\n                sphere(d = leaf_length * 0.4);\n            }\n        }\n        \n        // Remove center to create shell\n        translate([0, 0, -5])\n        cylinder(h = 20, r = leaf_length * 0.3, $fn = 16);\n    }\n}\n\n// Inner cabbage structure - layered spheres\nmodule inner_cabbage() {\n    for (layer = [0:4]) {\n        // Each layer is slightly smaller and higher\n        color([0.8 - layer * 0.1, 1.0 - layer * 0.05, 0.5 + layer * 0.05])\n        translate([0, 0, layer * 6])\n        scale([1 - layer * 0.15, 1 - layer * 0.15, 0.8])\n        \n        // Create faceted surface for inner leaves\n        intersection() {\n            sphere(d = cabbage_diameter - layer * 10);\n            \n            // Create the layered effect with slight rotation\n            rotate([layer * 3, layer * 3, 0])\n            for (i = [0:11]) {\n                rotate([0, 0, i * 30])\n                translate([cabbage_diameter * 0.3, 0, 0])\n                cube([cabbage_diameter, cabbage_diameter, cabbage_diameter], center = true);\n            }\n        }\n    }\n}\n\n// Stem at bottom\nmodule stem() {\n    color(\"darkgreen\")\n    translate([0, 0, -12])\n    cylinder(h = 15, r1 = 10, r2 = 8, $fn = 16);\n    \n    // Root details\n    for (i = [0:7]) {\n        rotate([0, 0, i * 45])\n        translate([7, 0, -15])\n        rotate([90, 0, 0])\n        cylinder(h = 8, r = 2, $fn = 8);\n    }\n}\n\n// Create the cabbage\ncabbage();\n\n// Optional: Flatten bottom for stable printing\ndifference() {\n    cube([cabbage_diameter + 20, cabbage_diameter + 20, 5], center = true);\n    translate([0, 0, -2.5])\n    cube([cabbage_diameter + 25, cabbage_diameter + 25, 5], center = true);\n}",
    "renders": true
  },
  {
    "food_item": "kale",
    "openscad_code": "// Realistic 3D printable kale leaf model\n// Overall dimensions approximately 80mm x 60mm x 8mm thick\n\ncolor([0.15, 0.45, 0.15, 0.95])  // Deep green with slight translucency\n\n$fn = 36;\n\n// Main kale leaf body with organic curves and thickness\nmodule kale_leaf() {\n    // Base leaf shape - slightly curved and tapered\n    difference() {\n        // Main leaf body - curved surface\n        hull() {\n            translate([0, 0, 1]) sphere(r=2);\n            translate([30, 0, 2]) sphere(r=4);\n            translate([50, 0, 1.5]) sphere(r=3);\n            translate([65, 0, 0.5]) sphere(r=1);\n        }\n        \n        // Create central vein depression\n        translate([0, -3, -1]) \n            scale([1, 0.3, 0.5]) \n                cube([70, 6, 4], center=true);\n    }\n}\n\n// Create ruffled kale edge\nmodule ruffled_edge(start_pos, end_pos, height) {\n    translate(start_pos) {\n        for(i = [0:5:height]) {\n            rotate([0, 0, i*3]) {\n                translate([i*0.8, sin(i*12)*3, 0]) \n                    sphere(r=1.5 + sin(i*8)*0.5);\n            }\n        }\n    }\n}\n\n// Generate multiple leaf lobes\nmodule leaf_lobes() {\n    // Left side lobes\n    for(angle = [-45:-15:5]) {\n        rotate([0, 0, angle]) {\n            translate([25 + abs(angle)*0.5, 0, 1]) {\n                scale([0.7, 0.4, 0.8]) {\n                    kale_leaf();\n                }\n            }\n        }\n    }\n    \n    // Right side lobes\n    for(angle = [15:5:45]) {\n        rotate([0, 0, angle]) {\n            translate([25 + abs(angle)*0.5, 0, 1]) {\n                scale([0.7, 0.4, 0.8]) {\n                    kale_leaf();\n                }\n            }\n        }\n    }\n}\n\n// Create surface texture with small bumps\nmodule surface_texture() {\n    for(x = [5:8:65]) {\n        for(y = [-25:5:25]) {\n            if(sqrt(x*x + y*y) < 60) {\n                translate([x, y, 2.5 + sin(x*0.5)*0.3]) {\n                    sphere(r=0.4 + 0.2*noise(x/10, y/10));\n                }\n            }\n        }\n    }\n}\n\n// Generate noise for organic variation\nfunction noise(x, y) = sin(x*12.9898 + y*78.233) * 43758.5453 % 1;\n\n// Main assembly\nunion() {\n    // Central stem\n    color([0.25, 0.55, 0.25, 1]) {\n        translate([-5, 0, -2]) {\n            rotate([90, 0, 0]) {\n                cylinder(h=15, r1=2.5, r2=1.5);\n            }\n        }\n    }\n    \n    // Main leaf structure\n    color([0.12, 0.42, 0.12, 0.9]) {\n        union() {\n            // Primary leaf\n            kale_leaf();\n            \n            // Add leaf lobes for characteristic kale shape\n            leaf_lobes();\n            \n            // Create ruffled edges\n            ruffled_edge([50, 0, 1], [65, 0, 0.5], 15);\n            ruffled_edge([45, 15, 1], [60, 20, 0.5], 12);\n            ruffled_edge([45, -15, 1], [60, -20, 0.5], 12);\n        }\n    }\n    \n    // Surface texture for realistic appearance\n    color([0.18, 0.48, 0.18, 0.85]) {\n        surface_texture();\n    }\n    \n    // Add some vein details\n    color([0.08, 0.28, 0.08, 1]) {\n        for(i = [1:3:10]) {\n            rotate([0, 0, i*5 - 25]) {\n                translate([20 + i*3, 0, 2.5]) {\n                    scale([0.8, 0.1, 0.1]) {\n                        sphere(r=3);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Ensure 3D printability - add small base\ntranslate([0, 0, -3]) {\n    color([0.2, 0.5, 0.2, 0.7]) {\n        cube([80, 60, 1], center=true);\n    }\n}",
    "renders": true
  },
  {
    "food_item": "lettuce",
    "openscad_code": "// Realistic Lettuce Head in OpenSCAD\n// Medium complexity with basic primitives and transformations\n\n// Global parameters\nlettuce_height = 60;\nlettuce_radius = 45;\nstem_height = 8;\nstem_radius = 15;\n\n// Color definitions\n$fn = 30;\n\nmodule lettuce_stem() {\n    // Central stem structure\n    color(\"forestgreen\")\n    union() {\n        // Main stem cylinder\n        cylinder(h=stem_height, r=stem_radius, $fn=20);\n        \n        // Bottom root-like details\n        for(i=[0:5]) {\n            rotate([0, 0, i*60])\n            translate([stem_radius-2, 0, -1])\n            rotate([90, 0, 0])\n            cylinder(h=4, r1=3, r2=1, $fn=8);\n        }\n    }\n}\n\nmodule leaf_layer(height, radius, angle, layers) {\n    // Individual leaf with realistic curves\n    color(\"limegreen\")\n    rotate([0, 0, angle])\n    translate([0, 0, height])\n    scale([1, 0.8, 1])\n    difference() {\n        // Main leaf body\n        union() {\n            // Elliptical leaf shape\n            scale([1.2, 1, 0.3])\n            sphere(r=radius);\n            \n            // Leaf tip extension\n            translate([0, 0, radius*0.3])\n            scale([0.8, 0.6, 0.5])\n            sphere(r=radius*0.5);\n        }\n        \n        // Vein indentations\n        for(i=[-2:2]) {\n            translate([i*radius/4, 0, -1])\n            scale([0.1, 1, 0.5])\n            sphere(r=radius);\n        }\n        \n        // Leaf edge serrations\n        for(i=[0:layers*3]) {\n            rotate([0, 0, i*360/(layers*3)])\n            translate([radius*0.9, 0, 0])\n            scale([0.15, 0.1, 0.3])\n            sphere(r=radius/5);\n        }\n    }\n}\n\nmodule lettuce_head() {\n    // Main lettuce structure\n    union() {\n        // Base stem\n        lettuce_stem();\n        \n        // Layered leaves\n        for(i=[0:8]) {\n            // Progressive leaf sizes\n            leaf_size = lettuce_radius * (1 - i*0.08);\n            leaf_height = stem_height + i*5;\n            \n            // Create multiple leaves per layer\n            for(j=[0:i]) {\n                leaf_layer(\n                    leaf_height, \n                    leaf_size, \n                    j*(360/(i+1)) + (i%2)*15, \n                    i+1\n                );\n            }\n            \n            // Inner compact layers\n            if(i > 5) {\n                translate([0, 0, leaf_height+2])\n                scale([0.7 - (i-5)*0.1, 0.7 - (i-5)*0.1, 0.5])\n                sphere(r=lettuce_radius*0.8);\n            }\n        }\n        \n        // Top center detail\n        color(\"darkgreen\")\n        translate([0, 0, stem_height + 45])\n        scale([0.3, 0.3, 0.4])\n        sphere(r=20);\n    }\n}\n\n// Create the complete lettuce\nlettuce_head();",
    "renders": true
  },
  {
    "food_item": "celery",
    "openscad_code": "// Celery stalk module\nmodule celery_stalk(height=80, radius=6) {\n    color([0.6, 0.8, 0.4]) {\n        // Main stalk body with slight taper\n        for (i = [0:2]) {\n            translate([0, 0, i * height/3]) {\n                cylinder(h=height/3 + 1, r1=radius * (1 - i*0.1), r2=radius * (1 - (i+1)*0.1), $fn=8);\n            }\n        }\n        \n        // Celery ribs along the stalk\n        for (rib = [0:7]) {\n            rotate([0, 0, rib * 45]) {\n                translate([radius * 0.7, 0, height/2]) {\n                    scale([0.3, 0.15, 1]) {\n                        cylinder(h=height, r=radius/3, $fn=4);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Celery leaves module\nmodule celery_leaves(stalk_height=80) {\n    color([0.3, 0.5, 0.2]) {\n        for (leaf = [0:4]) {\n            rotate([0, 0, leaf * 72]) {\n                translate([0, 0, stalk_height * 0.9]) {\n                    rotate([90 + leaf * 5, 0, 0]) {\n                        // Leaf blade with serrated edge approximation\n                        scale([0.8, 0.2, 0.05]) {\n                            difference() {\n                                sphere(r=15, $fn=8);\n                                for (cut = [0:3]) {\n                                    translate([cut * 6 - 9, 0, -2]) {\n                                        cube([3, 20, 4], center=true);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Smaller inner leaves\n        for (leaf = [0:3]) {\n            rotate([0, 0, leaf * 120 + 30]) {\n                translate([0, 0, stalk_height * 0.95]) {\n                    rotate([80 + leaf * 3, 0, 0]) {\n                        scale([0.5, 0.15, 0.03]) {\n                            sphere(r=10, $fn=6);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Celery base/root section\nmodule celery_base() {\n    color([0.5, 0.4, 0.3]) {\n        translate([0, 0, -5]) {\n            cylinder(h=10, r1=7, r2=5, $fn=8);\n        }\n        \n        // Root tendrils\n    for (root = [0:5]) {\n        rotate([0, 0, root * 60]) {\n            translate([3, 0, -5]) {\n                rotate([90, 0, 0]) {\n                    scale([0.3, 0.3, 1]) {\n                        cylinder(h=8, r1=1, r2=0.5, $fn=6);\n                    }\n                }\n            }\n        }\n    }\n    }\n}\n\n// Main assembly\nunion() {\n    // Main celery stalk\n    celery_stalk(80, 6);\n    \n    // Leaves at top\n    celery_leaves(80);\n    \n    // Base at bottom\n    celery_base();\n    \n    // Natural curve to stalk\n    rotate([0, 5, 0]) {\n        translate([0, 0, 40]) {\n            celery_stalk(40, 5);\n        }\n    }\n}",
    "renders": true
  },
  {
    "food_item": "cucumber",
    "openscad_code": "// Realistic Cucumber Model\n// Medium complexity with proper 3D printing considerations\n\ncucumber_color = \"#2E8B57\";  // Sea green for cucumber skin\nseed_color = \"#F5DEB3\";      // Pale yellow for seeds\n\n// Main cucumber body\nmodule cucumber_body() {\n    color(cucumber_color) {\n        // Create tapered cucumber shape using hull of spheres\n        union() {\n            // Main body segments\n            for (i = [0:5]) {\n                translate([0, 0, i * 12]) \n                    scale([1 - i * 0.04, 1 - i * 0.04, 1])\n                    sphere(d = 25 - i * 1.5, $fn = 32);\n            }\n            \n            // Smooth out the segments with cylinders\n            for (i = [0:4]) {\n                translate([0, 0, i * 12 + 6])\n                    cylinder(h = 12, d1 = 25 - i * 1.5, d2 = 25 - (i + 1) * 1.5, $fn = 32);\n            }\n        }\n    }\n}\n\n// Cucumber seeds inside\nmodule cucumber_seeds() {\n    color(seed_color) {\n        // Create seed chamber\n        difference() {\n            // Main seed area\n            translate([0, 0, 15])\n                scale([0.3, 0.3, 0.8])\n                sphere(d = 20, $fn = 32);\n            \n            // Hollow out center\n            translate([0, 0, 15])\n                scale([0.2, 0.2, 0.9])\n                sphere(d = 20, $fn = 32);\n        }\n        \n        // Individual seeds\n        for (i = [0:3]) {\n            rotate([0, 0, i * 90])\n            translate([5, 0, 15])\n                scale([1, 0.6, 0.3])\n                sphere(d = 2, $fn = 16);\n        }\n    }\n}\n\n// Cucumber skin texture with bumps\nmodule cucumber_skin() {\n    difference() {\n        // Base cucumber\n        cucumber_body();\n        \n        // Create small bumps on surface\n        for (i = [0:12]) {\n            rotate([0, 0, i * 30])\n            for (j = [0:3]) {\n                translate([0, 12.5 - j * 2.5, j * 15])\n                    sphere(d = 1.5, $fn = 8);\n            }\n        }\n    }\n}\n\n// Cucumber end details\nmodule cucumber_ends() {\n    // Stem end\n    color(\"#228B22\") {\n        translate([0, 0, 72])\n            cylinder(h = 5, d1 = 8, d2 = 6, $fn = 16);\n    }\n    \n    // Blossom end\n    color(\"#006400\") {\n        translate([0, 0, 0])\n            cylinder(h = 3, d1 = 18, d2 = 20, $fn = 16);\n    }\n}\n\n// Main assembly\nunion() {\n    // Cucumber with skin texture\n    cucumber_skin();\n    \n    // Internal seeds (visible through translucent skin)\n    %cucumber_seeds();\n    \n    // End details\n    cucumber_ends();\n}\n\n// Add slight overall bend\nrotate([2, 0, 0])\n    translate([0, 0, 35])\n        scale([1, 1, 1])\n            child(0);",
    "renders": true
  },
  {
    "food_item": "zucchini",
    "openscad_code": "// Realistic medium-complexity Zucchini model for 3D printing\n// Overall length ~90 mm, max diameter ~25 mm\n// No overhangs, 1 mm wall thickness, fully printable\n\n// Main zucchini body\nmodule zucchini_body() {\n    // Tapered body from base to stem\n    hull() {\n        // Lower bulb\n        translate([0, 0, -5]) \n            scale([1, 1.2, 1]) \n                sphere(d=22, $fn=32);\n        \n        // Upper taper\n        translate([0, 0, 35]) \n            scale([0.6, 0.7, 0.8]) \n                sphere(d=20, $fn=32);\n    }\n    \n    // Elongate along Z\n    scale([1, 1, 1.8]) \n        children();\n}\n\n// Stem with slight curve\nmodule stem() {\n    color(\"darkgreen\") {\n        // Main stem cylinder\n        translate([0, 0, 65]) \n            rotate([5, 0, 0]) \n                cylinder(h=8, d1=6, d2=4, $fn=16);\n        \n        // Stem tip\n        translate([0, 0, 72.5]) \n            sphere(d=3.5, $fn=16);\n    }\n}\n\n// Surface texture - shallow longitudinal grooves\nmodule grooves() {\n    difference() {\n        children();\n        \n        // Create 8 shallow grooves\n        for(i=[0:7]) {\n            rotate([0, 0, i*45]) {\n                translate([11, 0, -10]) \n                    scale([0.3, 1, 1.2]) \n                        cube([20, 2, 80], center=true);\n            }\n        }\n    }\n}\n\n// Flower scar at blossom end\nmodule blossom_end() {\n    color(\"darkgreen\") {\n        translate([0, 0, -38]) {\n            // Circular scar\n            cylinder(h=0.5, d=3, $fn=32);\n            \n            // Small raised center\n            translate([0, 0, 0.5]) \n                sphere(d=1, $fn=16);\n        }\n    }\n}\n\n// Surface bumps for organic look\nmodule bumps() {\n    // Random small bumps\n    for(z=[-30:10:30]) {\n        for(a=[0:45:315]) {\n            rotate([0, 0, a+z]) {\n                translate([rand(9,11), 0, z]) {\n                    scale([0.8, 0.8, 0.6]) \n                        sphere(d=rand(1.5,2.5), $fn=8);\n                }\n            }\n        }\n    }\n}\n\n// Color variation for realistic look\nmodule zucchini_color() {\n    color([0.2, 0.5, 0.15])  // Dark green base\n        children();\n}\n\n// Main assembly\nunion() {\n    zucchini_color() {\n        zucchini_body() {\n            grooves() {\n                bumps() {\n                    zucchini_body();\n                }\n            }\n        }\n    }\n    \n    stem();\n    blossom_end();\n}\n\n// Helper for random values within range\nfunction rand(min, max) = min + (max-min)*(sin(12345*$children*123)+1)/2;",
    "renders": true
  },
  {
    "food_item": "squash",
    "openscad_code": "// Realistic medium-complexity squash model for 3D printing\n// Overall dimensions: ~80mm length, ~50mm diameter\n\n// Define colors\n$fn = 48;\n\n// Main squash body\nmodule squash_body() {\n    color([0.9, 0.5, 0.1])  // Orange-gold color\n    difference() {\n        // Main bulbous shape\n        union() {\n            // Upper bulb\n            translate([0, 0, 20])\n            scale([0.8, 0.8, 1])\n            sphere(d=45);\n            \n            // Lower bulb\n            translate([0, 0, 5])\n            sphere(d=50);\n            \n            // Neck\n            translate([0, 0, 35])\n            scale([0.4, 0.4, 1.5])\n            cylinder(d1=35, d2=20, h=20);\n        }\n        \n        // Carve out bottom for stability\n        translate([0, 0, -5])\n        cylinder(d=25, h=10);\n    }\n}\n\n// Stem module\nmodule stem() {\n    color([0.2, 0.4, 0.1])  // Green color\n    translate([0, 0, 50])\n    rotate([5, 0, 0])\n    cylinder(d1=8, d2=5, h=12);\n}\n\n// Surface ridges\nmodule ridges() {\n    color([0.8, 0.45, 0.05])  // Slightly darker orange\n    for (i = [0:15:360]) {\n        rotate([0, 0, i])\n        translate([0, -2, 15])\n        scale([1, 0.2, 1.2])\n        cylinder(d=48, h=30, $fn=3);\n    }\n}\n\n// Textured skin pattern\nmodule skin_texture() {\n    color([0.85, 0.5, 0.08])\n    for (a = [0:30:359]) {\n        for (b = [15:15:45]) {\n            rotate([0, a, b])\n            translate([0, 0, b])\n            sphere(d=2);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    squash_body();\n    stem();\n    ridges();\n    \n    // Only add texture to upper portion\n    translate([0, 0, 25])\n    skin_texture();\n}",
    "renders": true
  },
  {
    "food_item": "pumpkin",
    "openscad_code": "// Realistic 3D-Printable Pumpkin Food Item\n// Medium complexity, 70 mm diameter, 60 mm tall\n\n// Main pumpkin body\nmodule pumpkin_body() {\n    // Base sphere for pumpkin shape\n    color(\"#FF6B00\")\n    scale([1, 1, 0.9])\n    sphere(d=70, $fn=32);\n    \n    // Add pumpkin segments with subtle ridges\n    for(i=[0:7]) {\n        rotate([0, 0, i*45])\n        translate([0, 0, -2])\n        color(\"#E55A00\")\n        scale([0.92, 1.08, 0.95])\n        cylinder(h=65, d1=68, d2=65, $fn=3);\n    }\n}\n\n// Stem with realistic curvature\nmodule pumpkin_stem() {\n    color(\"#2E4600\")\n    translate([0, 0, 30])\n    rotate([10, 0, 0])\n    cylinder(h=15, d1=8, d2=12, $fn=8);\n    \n    // Stem texture rings\n    for(z=[0:2:12]) {\n        translate([0, 0, 30+z])\n        rotate([10, 0, 0])\n        color(\"#1E3000\")\n        cylinder(h=1.5, d=10+z*0.3, $fn=8);\n    }\n}\n\n// Pumpkin seeds inside\nmodule pumpkin_seeds() {\n    translate([0, 0, -5])\n    for(i=[0:9]) {\n        rotate([0, 0, i*36])\n        translate([20-i, 0, 0])\n        color(\"#FFF8DC\")\n        scale([1, 0.6, 0.3])\n        sphere(d=5, $fn=12);\n    }\n}\n\n// Surface texture for pumpkin skin\nmodule pumpkin_texture() {\n    difference() {\n        pumpkin_body();\n        // Small dimples for texture\n        for(i=[0:20]) {\n            rotate([0, 0, i*18])\n            translate([30+sin(i*3)*5, 0, -25+cos(i*2)*10])\n            sphere(d=3, $fn=8);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Core pumpkin structure\n    pumpkin_texture();\n    \n    // Add stem on top\n    pumpkin_stem();\n    \n    // Internal seed cavity (hollow for printing)\n    translate([0, 0, -20])\n    color(\"#FF8C00\")\n    sphere(d=50, $fn=32);\n}\n\n// Base flattening for stable printing\ntranslate([0, 0, -35])\ncolor(\"#FF6B00\")\ncylinder(h=5, d=70, $fn=32);",
    "renders": true
  },
  {
    "food_item": "radish",
    "openscad_code": "// Radish - Realistic Style with Medium Complexity\n// Overall dimensions: ~60mm long, ~35mm diameter at widest point\n\n$fn = 48;\n\n// Main radish body\nmodule radish_body() {\n    color(\"#E74C3C\") {\n        // Main bulb shape using spheres and cylinders\n        union() {\n            // Upper part - slightly flattened sphere\n            translate([0, 0, 15])\n            scale([1, 1, 0.8])\n            sphere(15);\n            \n            // Lower tapered part\n            cylinder(h1=15, h2=0, r1=15, r2=5);\n            \n            // Small tip\n            translate([0, 0, -15])\n            cylinder(h=5, r1=5, r2=0);\n        }\n    }\n}\n\n// White root tip\nmodule root_tip() {\n    color(\"#F5F5F5\") {\n        translate([0, 0, -20])\n        cylinder(h=5, r1=3, r2=0);\n    }\n}\n\n// White transition zone between red and white\nmodule white_transition() {\n    color(\"#FFFFFF\") {\n        translate([0, 0, -15])\n        cylinder(h=5, r=15);\n    }\n}\n\n// Leaf stems\nmodule leaf_stems() {\n    color(\"#2ECC71\") {\n        for(i = [0:2]) {\n            rotate([0, 0, i * 120])\n            translate([7, 0, 25])\n            rotate([45, 0, 0])\n            cylinder(h=20, r=2);\n        }\n    }\n}\n\n// Leaf blades\nmodule leaves() {\n    color(\"#27AE60\") {\n        for(i = [0:2]) {\n            rotate([0, 0, i * 120])\n            translate([7, 0, 25])\n            rotate([45, 0, 0])\n            translate([0, 0, 20])\n            scale([1, 0.3, 0.5])\n            sphere(8);\n        }\n    }\n}\n\n// Surface texture - small bumps for realistic radish skin\nmodule skin_texture() {\n    color(\"#E74C3C\") {\n        for(angle = [0:30:330]) {\n            for(height = [-10:5:20]) {\n                rotate([0, 0, angle])\n                translate([15 + sin(angle * 3) * 0.5, 0, height])\n                scale([1, 1, 0.7])\n                sphere(0.8);\n            }\n        }\n    }\n}\n\n// Root hairs\nmodule root_hairs() {\n    color(\"#D3D3D3\") {\n        for(angle = [0:45:315]) {\n            for(z_pos = [-20:5:-15]) {\n                rotate([0, 0, angle])\n                translate([3, 0, z_pos])\n                rotate([90, 0, 0])\n                cylinder(h=2, r=0.3);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    radish_body();\n    white_transition();\n    root_tip();\n    leaf_stems();\n    leaves();\n    skin_texture();\n    root_hairs();\n}",
    "renders": true
  },
  {
    "food_item": "turnip",
    "openscad_code": "// Realistic 3D Printable Turnip (medium complexity)\n// Overall dimensions: ~70mm tall, ~45mm wide\n\n$fn=36;\n\n// Main turnip body - purple-white gradient effect\nmodule turnip_body() {\n    color([0.6,0.3,0.7]) {\n        // Main bulb - slightly flattened sphere\n        translate([0,0,15]) \n            scale([1,1,1.3])\n                sphere(d=40);\n        \n        // Lower tapering root\n        translate([0,0,-5])\n            cylinder(d1=40, d2=15, h=20);\n        \n        // Upper shoulder rounding\n        translate([0,0,35])\n            cylinder(d1=40, d2=30, h=10);\n    }\n}\n\n// Root fibers extending from bottom\nmodule root_fibers() {\n    color([0.4,0.2,0.3]) {\n        for(i=[0:15]) {\n            rotate([0,0,i*24])\n                translate([rand(5,12),0,-8])\n                    rotate([90+rand(-10,10),0,0])\n                        cylinder(d=rand(1,2), h=rand(8,15));\n        }\n    }\n}\n\n// Leaf stems emerging from top\nmodule leaf_stems() {\n    color([0.2,0.5,0.2]) {\n        // Central leaf cluster\n        for(i=[0:4]) {\n            rotate([0,0,i*72])\n                translate([0,0,45])\n                    rotate([rand(10,25),0,0])\n                        cylinder(d=rand(4,6), h=rand(20,35));\n        }\n        \n        // Side leaves\n        for(i=[0:5]) {\n            rotate([0,0,i*60+30])\n                translate([rand(8,12),0,42])\n                    rotate([rand(25,45),rand(-20,20),0])\n                        cylinder(d=rand(2,4), h=rand(15,25));\n        }\n    }\n}\n\n// Leaf details\nmodule leaves() {\n    color([0.3,0.6,0.2]) {\n        // Main leaves\n        for(i=[0:4]) {\n            rotate([0,0,i*72])\n                translate([0,0,45+rand(18,25)])\n                    rotate([rand(15,30),0,0])\n                        scale([rand(0.8,1.2),rand(0.6,1),1])\n                            sphere(d=rand(12,18));\n        }\n        \n        // Secondary leaves\n        for(i=[0:6]) {\n            rotate([0,0,i*60])\n                translate([rand(5,10),0,40+rand(12,20)])\n                    rotate([rand(30,50),rand(-30,30),0])\n                        scale([rand(0.6,0.9),rand(0.5,0.8),1])\n                            sphere(d=rand(8,12));\n        }\n    }\n}\n\n// Surface texture - subtle bumps and ridges\nmodule surface_texture() {\n    color([0.65,0.35,0.72]) {\n        // Vertical ridges\n        for(i=[0:7]) {\n            rotate([0,0,i*45])\n                translate([19,0,15])\n                    scale([0.1,2,1.3])\n                        sphere(d=rand(3,5));\n        }\n        \n        // Small surface bumps\n        for(i=[0:20]) {\n            rotate([0,0,rand(0,360)])\n                translate([rand(15,19),0,rand(5,35)])\n                    sphere(d=rand(1,2));\n        }\n    }\n}\n\n// Color transition zone\nmodule color_transition() {\n    color([0.9,0.9,0.85]) {\n        translate([0,0,40])\n            cylinder(d=28, h=8);\n    }\n}\n\n// Assembly\nunion() {\n    // Main turnip structure\n    difference() {\n        union() {\n            turnip_body();\n            color_transition();\n        }\n        \n        // Hollow cavity for 3D printing\n        translate([0,0,-10])\n            cylinder(d=30, h=55);\n    }\n    \n    // Add details\n    root_fibers();\n    leaf_stems();\n    leaves();\n    surface_texture();\n}",
    "renders": true
  },
  {
    "food_item": "beet",
    "openscad_code": "// Realistic beet model (medium complexity)\n// Main body with stem and root details\n\n// Colors\n$fn = 48;\n\n// Main beet body - irregular sphere with top cut\ntranslate([0,0,15])\nscale([1.1,1,0.9])\ndifference() {\n    sphere(20);\n    translate([0,0,-20])\n    cube([50,50,40], center=true);\n}\n\n// Root tail extension\ntranslate([0,0,0])\nrotate([0,180,0])\nscale([0.8,0.8,1.2])\ncylinder(h=15, r1=8, r2=3);\n\n// Stem attachment base\ntranslate([0,0,30])\nscale([0.7,0.7,0.3])\nsphere(15);\n\n// Stem group\nmodule stem() {\n    color(\"darkgreen\")\n    rotate([0,0,rands(0,360,1)[0]])\n    cylinder(h=20, r=3);\n}\n\n// Create 5-7 stems with varying heights\nfor(i=[0:30:180]) {\n    rotate([0,0,i])\n    translate([rands(5,10,1)[0], 0, 32])\n    stem();\n}\n\n// Leaf attachment points\nmodule leaf() {\n    color(\"green\")\n    translate([0,0,10])\n    scale([0.5,1,0.1])\n    sphere(8);\n}\n\n// Add leaves to stems\nfor(i=[0:30:150]) {\n    rotate([0,0,i])\n    translate([rands(6,12,1)[0], 0, 45])\n    rotate([rands(20,40,1)[0],0,0])\n    leaf();\n}\n\n// Surface texture - small bumps\nmodule bump(x,y,z) {\n    color(\"darkred\")\n    translate([x,y,z])\n    sphere(1.5);\n}\n\n// Add random bumps across surface\nfor(i=[1:50]) {\n    angle = rands(0,360,1)[0];\n    h = rands(-15,25,1)[0];\n    r = rands(15,22,1)[0];\n    bump(cos(angle)*r, sin(angle)*r, h);\n}\n\n// Root hairs\nmodule root_hair() {\n    color(\"brown\")\n    cylinder(h=5, r1=0.5, r2=0.2);\n}\n\n// Add root hairs to bottom\nfor(i=[1:20]) {\n    angle = rands(0,360,1)[0];\n    dist = rands(3,8,1)[0];\n    rotate([rands(80,100,1)[0],0,angle])\n    translate([cos(angle)*dist, sin(angle)*dist, 0])\n    root_hair();\n}\n\n// Top indentations from stem removal\nmodule stem_scar() {\n    color(\"darkred\")\n    difference() {\n        cylinder(h=2, r=5);\n        cylinder(h=3, r=3);\n    }\n}\n\n// Add stem scars\nfor(i=[1:5]) {\n    angle = rands(0,360,1)[0];\n    dist = rands(0,8,1)[0];\n    translate([cos(angle)*dist, sin(angle)*dist, 30])\n    stem_scar();\n}",
    "renders": true
  },
  {
    "food_item": "parsnip",
    "openscad_code": "// Realistic Parsnip Model - Medium Complexity\n// Features tapered root body, textured skin, leaf bases, and natural coloring\n\n// Main parsnip module\nmodule parsnip() {\n    // Natural coloring - off-white root with slight yellow tint\n    color([0.95, 0.92, 0.85]) {\n        // Main root body - tapered cylinder with slight curve\n        union() {\n            // Create curved main body using hull of spheres\n            for (i = [0:8]) {\n                translate([sin(i*5)*2, 0, i*8]) \n                sphere(d = 20 - i*1.8);\n            }\n            \n            // Add root tip\n            translate([0, 0, -5])\n            cylinder(h = 10, d1 = 3, d2 = 6);\n            \n            // Add slight bulge variations for realism\n            for (i = [1:3:8]) {\n                translate([sin(i*45)*3, cos(i*45)*3, i*8])\n                sphere(d = 4);\n            }\n        }\n    }\n}\n\n// Skin texture module with small bumps and ridges\nmodule skin_texture() {\n    color([0.9, 0.87, 0.8]) {\n        difference() {\n            // Base textured surface\n            parsnip();\n            \n            // Add small indentations for texture\n            for (i = [0:30]) {\n                rotate([0, 0, i*12]) {\n                    translate([sin(i*73)*8, cos(i*73)*8, i*2.5])\n                    sphere(d = 1.2);\n                }\n            }\n            \n            // Add vertical ridges\n            for (a = [0:30:359]) {\n                rotate([0, 0, a])\n                translate([8, 0, 0])\n                cube([1.5, 1, 70], center = true);\n            }\n        }\n    }\n}\n\n// Leaf base attachment points with brown coloring\nmodule leaf_bases() {\n    color([0.5, 0.4, 0.3]) {\n        translate([0, 0, 67])\n        rotate([90, 0, 0])\n        union() {\n            // Main stem connection\n            cylinder(h = 8, d = 12);\n            \n            // Individual leaf attachment points\n            for (i = [0:5]) {\n                rotate([0, 0, i*60])\n                translate([6, 0, 2])\n                cylinder(h = 6, d = 2.5);\n            }\n        }\n    }\n}\n\n// Combine all components\nunion() {\n    // Main parsnip body with texture\n    skin_texture();\n    \n    // Add leaf bases at top\n    leaf_bases();\n}\n\n// Final positioning for 3D printing (flat base)\ntranslate([0, 0, 5])\nrotate([90, 0, 0])\nparsnip();",
    "renders": true
  },
  {
    "food_item": "yam",
    "openscad_code": "// Realistic Yam Model - Medium Complexity\n// 3D printable yam with texture and realistic proportions\n\n// Main parameters\nyam_length = 80;\nyam_width = 35;\nyam_height = 30;\nskin_thickness = 2;\n\n// Color definitions\nyam_skin_color = [139/255, 69/255, 19/255];\nyam_flesh_color = [255/255, 228/255, 196/255];\n\n// Create the main yam body\nmodule yam_body() {\n    color(yam_skin_color) {\n        // Main body - tapered ellipsoid\n        scale([1, 0.8, 0.6])\n        sphere(d = yam_width, $fn = 32);\n        \n        // Extended main body\n        translate([0, 0, -yam_length/4])\n        scale([1.2, 0.9, 0.4])\n        sphere(d = yam_width * 1.1, $fn = 32);\n        \n        // Tapered end\n        translate([0, 0, yam_length/3])\n        scale([0.8, 0.6, 0.3])\n        sphere(d = yam_width * 0.7, $fn = 32);\n    }\n}\n\n// Create surface texture with small bumps and indentations\nmodule yam_texture() {\n    difference() {\n        union() {\n            yam_body();\n            \n            // Small bumps across surface\n            for(i = [0:15]) {\n                rotate([rand(i*10)*360, rand(i*20)*180, 0])\n                translate([\n                    rand(i*30)*yam_width/2 - yam_width/4,\n                    rand(i*40)*yam_width/2 - yam_width/4,\n                    rand(i*50)*yam_height/2 - yam_height/4\n                ])\n                scale([1, 1, 0.5])\n                sphere(d = 2 + rand(i*60)*2, $fn = 8);\n            }\n        }\n        \n        // Surface indentations for realistic texture\n        for(i = [0:8]) {\n            rotate([rand(i*15)*360, rand(i*25)*180, 0])\n            translate([\n                rand(i*35)*yam_width/2 - yam_width/4,\n                rand(i*45)*yam_width/2 - yam_width/4,\n                rand(i*55)*yam_height/2 - yam_height/4\n            ])\n            sphere(d = 1.5 + rand(i*70)*1, $fn = 6);\n        }\n    }\n}\n\n// Create root hairs/tendrils\nmodule root_hairs() {\n    color([101/255, 67/255, 33/255]) {\n        for(i = [0:5]) {\n            rotate([rand(i*5)*360, rand(i*10)*180, 0])\n            translate([\n                rand(i*20)*yam_width/2 - yam_width/4,\n                rand(i*30)*yam_width/2 - yam_width/4,\n                -yam_length/3\n            ])\n            rotate([90 + rand(i*15)*20, 0, 0])\n            cylinder(h = 5 + rand(i*25)*3, d1 = 1.5, d2 = 0.5, $fn = 8);\n        }\n    }\n}\n\n// Create eyes/sprouting points\nmodule yam_eyes() {\n    color([34/255, 139/255, 34/255]) {\n        for(i = [0:3]) {\n            rotate([rand(i*8)*360, rand(i*12)*180, 0])\n            translate([\n                rand(i*18)*yam_width/2 - yam_width/4,\n                rand(i*28)*yam_width/2 - yam_width/4,\n                rand(i*38)*yam_height/2 - yam_height/4\n            ])\n            scale([1, 1, 1.5])\n            sphere(d = 2, $fn = 8);\n        }\n    }\n}\n\n// Helper function for pseudo-random numbers\nfunction rand(seed) = (seed * 9301 + 49297) % 233280 / 233280;\n\n// Main assembly\nunion() {\n    // Core yam structure\n    yam_texture();\n    \n    // Root hairs at bottom\n    root_hairs();\n    \n    // Sprouting eyes\n    yam_eyes();\n}\n\n// Optional: Cut section to show interior flesh\n// Uncomment below to see cross-section\n/*\ndifference() {\n    union() {\n        yam_texture();\n        root_hairs();\n        yam_eyes();\n    }\n    \n    // Cut plane\n    translate([-yam_width/2 - 5, 0, 0])\n    cube([yam_width + 10, yam_width + 10, yam_height + 10]);\n    \n    // Flesh color inside\n    color(yam_flesh_color)\n    translate([-yam_width/2 - 4.5, 0, 0])\n    cube([yam_width + 9, yam_width + 9, yam_height + 9]);\n}\n*/",
    "renders": true
  },
  {
    "food_item": "okra",
    "openscad_code": "// Realistic Okra model for 3D printing\n// Features: ridged body, star-shaped cross-section, stem, seeds inside\n\n// Overall dimensions: ~75mm length, 20mm max diameter\n\n// Colors\ncolor_okra = [0.2, 0.5, 0.15];  // Dark green\ncolor_stem = [0.3, 0.4, 0.1];   // Brownish green\ncolor_seed = [0.9, 0.8, 0.3];   // Light yellow-green\n\n// Main okra body\nmodule okra_body() {\n    color(color_okra) {\n        union() {\n            // Create ridged body by combining star-shaped slices\n            for (i = [0:5:75]) {\n                translate([0, 0, i]) {\n                    scale([1 - i/150, 1 - i/150, 1]) {\n                        // Star-shaped cross-section with 5 ridges\n                        linear_extrude(height=5, center=false)\n                        difference() {\n                            circle(d=20, $fn=30);\n                            for (j = [0:4]) {\n                                rotate([0, 0, j*72]) {\n                                    translate([8, 0, 0]) {\n                                        circle(d=12, $fn=20);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Okra stem\nmodule okra_stem() {\n    color(color_stem) {\n        translate([0, 0, 75]) {\n            cylinder(h=15, d1=5, d2=3, $fn=8);\n        }\n    }\n}\n\n// Internal seeds pattern\nmodule okra_seeds() {\n    color(color_seed) {\n        translate([0, 0, 30]) {\n            for (i = [0:3]) {\n                rotate([0, 0, i*90]) {\n                    translate([6, 0, 0]) {\n                        scale([0.5, 0.5, 0.5]) {\n                            sphere(d=3, $fn=10);\n                        }\n                    }\n                }\n            }\n            for (i = [0:3]) {\n                rotate([0, 0, i*90 + 45]) {\n                    translate([4, 0, 10]) {\n                        scale([0.4, 0.4, 0.4]) {\n                            sphere(d=2.5, $fn=10);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Create hollow interior for printing\nmodule hollow_interior() {\n    translate([0, 0, 15]) {\n        cylinder(h=50, d=8, $fn=20);\n    }\n}\n\n// Combine all parts\nunion() {\n    difference() {\n        okra_body();\n        hollow_interior();\n    }\n    okra_stem();\n    okra_seeds();\n}",
    "renders": true
  },
  {
    "food_item": "eggplant",
    "openscad_code": "// Realistic Eggplant for 3D printing - medium complexity\n// ~70mm length, proper wall thickness\n\n$fn = 30;\n\nmodule eggplant_body() {\n    color([0.3, 0.2, 0.4])\n    union() {\n        // Main body - tapered cylinder with rounded bottom\n        translate([0, 0, 5])\n        scale([1, 1.2, 1])\n        cylinder(h=45, r1=18, r2=12, center=false);\n        \n        // Rounded bottom\n        translate([0, 0, 0])\n        sphere(d=36);\n        \n        // Characteristic bulbous lower section\n        translate([0, 0, 15])\n        scale([1.2, 1.4, 0.8])\n        sphere(d=32);\n    }\n}\n\nmodule calyx() {\n    color([0.2, 0.5, 0.1])\n    union() {\n        // Main calyx base\n        translate([0, 0, 50])\n        cylinder(h=8, r1=12, r2=10, center=false);\n        \n        // Calyx leaves\n        for(i = [0:5]) {\n            rotate([0, 0, i * 60])\n            translate([0, 10, 50])\n            rotate([0, 30, 0])\n            scale([0.5, 1, 0.3])\n            cylinder(h=15, r1=8, r2=3, center=false);\n        }\n    }\n}\n\nmodule stem() {\n    color([0.3, 0.6, 0.1])\n    union() {\n        // Main stem\n        translate([0, 0, 58])\n        cylinder(h=12, r1=3, r2=2, center=false);\n        \n        // Small stem detail\n        translate([0, 0, 70])\n        sphere(d=4);\n    }\n}\n\nmodule surface_texture() {\n    // Subtle surface indentations for realism\n    color([0.25, 0.15, 0.35])\n    difference() {\n        eggplant_body();\n        \n        // Random indentations\n        for(i = [0:8]) {\n            rotate([0, 0, i * 40 + 10])\n            translate([rand(i) * 15 + 8, 0, rand(i+1) * 35 + 10])\n            sphere(d=rand(i+2) * 3 + 2);\n        }\n    }\n}\n\n// Helper function for pseudo-random placement\nfunction rand(x) = (x * 123.456) % 1;\n\n// Main assembly\nunion() {\n    // Body with texture\n    surface_texture();\n    \n    // Calyx attachment\n    calyx();\n    \n    // Stem\n    stem();\n}",
    "renders": true
  },
  {
    "food_item": "artichoke",
    "openscad_code": "// Realistic Artichoke (Medium complexity, 3D printable)\n// Overall height ~75 mm\n\n// Colors\ncolor(\"green\") {\n    // Main body\n    union() {\n        // Bottom bulb (edible heart)\n        translate([0,0,10]) \n            scale([1,1,0.8])\n                sphere(d=35, $fn=60);\n\n        // Stem\n        translate([0,0,-5])\n            cylinder(h=15, d1=12, d2=18, $fn=24);\n\n        // Leaves layers\n        artichoke_leaves();\n    }\n}\n\n// Texture rings on heart\ncolor(\"darkolivegreen\") {\n    for(i=[1:4]) {\n        translate([0,0,10+i*2.5])\n            rotate([0,0,0])\n                scale([1+(i*0.05),1+(i*0.05),1])\n                    difference() {\n                        cylinder(h=1, d=35-i*3, $fn=60);\n                        cylinder(h=1.1, d=32-i*3, $fn=60);\n                    }\n    }\n}\n\n// Stem details\ncolor(\"saddlebrown\") {\n    // Stem texture\n    for(i=[0:3]) {\n        translate([0,0,-4+i*4])\n            cylinder(h=0.5, d=15, $fn=30);\n    }\n}\n\nmodule artichoke_leaf(h, r, angle, scale_factor) {\n    // Single leaf with proper orientation for printing\n    rotate([0,0,angle])\n        translate([0,0,h])\n            rotate([atan2(h, r),0,0])\n                scale([scale_factor, scale_factor, scale_factor])\n                    difference() {\n                        // Main leaf shape\n                        union() {\n                            // Leaf tip\n                            translate([0,0,8])\n                                scale([0.3,1,1])\n                                    sphere(d=10, $fn=20);\n                            \n                            // Leaf body\n                            hull() {\n                                translate([0,-3,0])\n                                    cylinder(h=0.1, d=1, $fn=4);\n                                translate([0,3,0])\n                                    cylinder(h=0.1, d=1, $fn=4);\n                                translate([0,0,8])\n                                    cylinder(h=0.1, d=1, $fn=4);\n                            }\n                        }\n                        \n                        // Leaf thickness\n                        scale([0.7,0.7,0.7])\n                            sphere(d=15, $fn=20);\n                    }\n}\n\nmodule artichoke_leaves() {\n    // Generate layers of leaves from bottom to top\n    for(layer=[0:6]) {\n        layer_height = 12 + layer * 8;\n        layer_radius = 18 - layer * 2;\n        num_leaves = 12 - layer;\n        \n        for(i=[0:num_leaves-1]) {\n            angle = i * (360 / num_leaves) + (layer % 2) * 15;\n            scale_factor = 0.8 - layer * 0.08;\n            artichoke_leaf(layer_height, layer_radius, angle, scale_factor);\n        }\n    }\n    \n    // Top small leaves (bracts)\n    for(i=[0:7]) {\n        color(\"purple\") {\n            translate([0,0,62])\n                rotate([0,0,i*45])\n                    rotate([75,0,0])\n                        scale([0.4,0.4,0.4])\n                            difference() {\n                                cylinder(h=8, d1=6, d2=2, $fn=3);\n                                translate([0,0,-0.5])\n                                    cylinder(h=9, d1=5, d2=1, $fn=3);\n                            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "food_item": "asparagus",
    "openscad_code": "// Realistic Asparagus Spear\n// Medium complexity, 3D printable single spear (~80mm long)\n\n// Main parameters\nspear_length = 80;\nbase_diameter = 8;\ntip_diameter = 2;\ntip_length = 15;\n\n// Colors\nasparagus_green = [0.35, 0.65, 0.2];\nlight_green = [0.45, 0.75, 0.3];\n\n// Main spear body\nmodule spear_body() {\n    color(asparagus_green)\n    union() {\n        // Tapered main body\n        cylinder(h = spear_length - tip_length, \n                 r1 = base_diameter/2, \n                 r2 = base_diameter/2 * 0.7,\n                 $fn = 32);\n        \n        // Tapered tip\n        translate([0, 0, spear_length - tip_length])\n        cylinder(h = tip_length, \n                 r1 = base_diameter/2 * 0.7, \n                 r2 = tip_diameter/2,\n                 $fn = 32);\n    }\n}\n\n// Scale-like texture on spear\nmodule scales() {\n    color(light_green)\n    for(i = [5:5:spear_length - 10]) {\n        scale_factor = 1 - (i / spear_length) * 0.4;\n        for(j = [0:30:330]) {\n            rotate([0, 0, j])\n            translate([base_diameter/2 * scale_factor * 0.7, 0, i])\n            rotate([90, 0, 0])\n            scale([scale_factor, 0.3, scale_factor * 0.5])\n            sphere(r = 1.2, $fn = 8);\n        }\n    }\n}\n\n// Flower head (small leaves)\nmodule flower_head() {\n    color(light_green)\n    translate([0, 0, spear_length - 2])\n    for(i = [0:45:315]) {\n        rotate([0, 0, i])\n        translate([tip_diameter/2 + 0.5, 0, 0])\n        rotate([0, 90, 0])\n        scale([0.3, 1.2, 0.8])\n        sphere(r = 1, $fn = 8);\n    }\n}\n\n// Root nub at base\nmodule root_nub() {\n    color(asparagus_green)\n    translate([0, 0, 0])\n    scale([0.8, 0.8, 0.5])\n    sphere(r = base_diameter/2, $fn = 16);\n}\n\n// Main assembly\nunion() {\n    spear_body();\n    scales();\n    flower_head();\n    root_nub();\n}",
    "renders": true
  },
  {
    "food_item": "brusselsprout",
    "openscad_code": "// Brussels Sprout - Realistic Style\n// Medium complexity model with layered leaves and stem\n\n// Overall dimensions\nsprout_diameter = 35;\nsprout_height = 40;\nstem_length = 15;\nstem_diameter = 8;\n\n// Colors\nsprout_color = [34/255, 139/255, 34/255];  // Forest green\nstem_color = [101/255, 67/255, 33/255];    // Brown\nleaf_tip_color = [50/255, 205/255, 50/255]; // Lime green\n\n// Main sprout body with layered leaves\nmodule brussels_sprout_body() {\n    color(sprout_color) {\n        union() {\n            // Base sphere shape\n            scale([1, 1, 1.2])\n                sphere(d = sprout_diameter, $fn = 48);\n            \n            // Add leaf layers around the sphere\n            for (i = [0:7]) {\n                rotate([0, 0, i * 45])\n                    translate([0, 0, -5 + i * 2])\n                        leaf_layer(i);\n            }\n            \n            // Top dome with slightly different color\n            color(leaf_tip_color)\n                translate([0, 0, sprout_height/2 - 5])\n                    scale([0.9, 0.9, 0.3])\n                        sphere(d = sprout_diameter * 0.8, $fn = 32);\n        }\n    }\n}\n\n// Individual leaf layer\nmodule leaf_layer(layer_num) {\n    height = 3;\n    radius = (sprout_diameter/2) * (1 - layer_num * 0.08);\n    \n    difference() {\n        // Main leaf disk\n        cylinder(h = height, r = radius, $fn = 24);\n        \n        // Cut inner circle for layering effect\n        translate([0, 0, -0.1])\n            cylinder(h = height + 0.2, r = radius * 0.7, $fn = 24);\n    }\n}\n\n// Stem with realistic texture\nmodule stem() {\n    color(stem_color) {\n        union() {\n            // Main stem cylinder\n            cylinder(h = stem_length, d = stem_diameter, $fn = 12);\n            \n            // Add stem rings for texture\n            for (i = [1:3]) {\n                translate([0, 0, i * 4])\n                    cylinder(h = 1, d = stem_diameter * 1.1, $fn = 12);\n            }\n            \n            // Tapered bottom\n            translate([0, 0, stem_length])\n                cylinder(h1 = 0.1, h2 = 3, r1 = stem_diameter/2, r2 = 0, $fn = 12);\n        }\n    }\n}\n\n// Surface texture - small bumps for realistic appearance\nmodule surface_texture() {\n    color(sprout_color) {\n        for (i = [0:20]) {\n            rotate([rand_range(0, 360), rand_range(0, 360), rand_range(0, 360)])\n                translate([\n                    rand_range(-sprout_diameter/3, sprout_diameter/3),\n                    rand_range(-sprout_diameter/3, sprout_diameter/3),\n                    rand_range(-sprout_height/3, sprout_height/3)\n                ])\n                    sphere(d = 1.5, $fn = 8);\n        }\n    }\n}\n\n// Helper function for random values\nfunction rand_range(min, max) = min + (max - min) * (rands(0, 1, 1)[0]);\n\n// Assembly\ntranslate([0, 0, stem_length])\n    brussels_sprout_body();\n\nstem();\n\n// Add subtle surface texture\ntranslate([0, 0, stem_length])\n    surface_texture();",
    "renders": true
  },
  {
    "food_item": "cauliflower",
    "openscad_code": "// Realistic Cauliflower Model\n// Size: ~75mm diameter\n// Medium complexity with florets and stem\n\n// Main parameters\n$fn = 32;\nfloret_count = 16;  // Number of main florets\nstem_height = 35;\nstem_diameter = 15;\ntotal_width = 75;\n\n// Colors\ncauliflower_color = [0.95, 0.95, 0.9];\nstem_color = [0.75, 0.7, 0.65];\n\nmodule stem() {\n    color(stem_color) {\n        // Main stem\n        cylinder(h=stem_height, d=stem_diameter, $fn=12);\n        \n        // Stem base flare\n        translate([0, 0, -2])\n            cylinder(h=5, d1=stem_diameter+3, d2=stem_diameter, $fn=12);\n        \n        // Root details\n        for(i = [0:3]) {\n            rotate([0, 0, i*90])\n                translate([stem_diameter/2-1, 0, -2])\n                    rotate([90, 0, 0])\n                        cylinder(h=8, d=2, $fn=8);\n        }\n    }\n}\n\n// Individual floret module\nmodule floret(size, position, angle) {\n    translate(position)\n    rotate(angle) {\n        // Main floret body\n        color(cauliflower_color) {\n            sphere(d=size);\n            \n            // Add texture with smaller spheres\n            for(i = [0:5]) {\n                rotate([0, 0, i*60])\n                translate([size/4, 0, size/3])\n                    sphere(d=size/3);\n            }\n            \n            // Secondary bumps\n            for(i = [0:7]) {\n                rotate([0, 0, i*51.4])\n                translate([size/2.5, 0, 0])\n                    sphere(d=size/4);\n            }\n        }\n    }\n}\n\n// Main cauliflower head\nmodule cauliflower_head() {\n    // Central core\n    color(cauliflower_color) {\n        sphere(d=total_width/2);\n        \n        // First ring of florets\n        for(i = [0:floret_count-1]) {\n            angle = i * (360/floret_count);\n            z = 8;\n            radius = total_width/3;\n            \n            floret(\n                size = total_width/5,\n                position = [cos(angle)*radius, sin(angle)*radius, z],\n                angle = [atan2(sin(angle)*radius, cos(angle)*radius), 0, 0]\n            );\n        }\n        \n        // Second ring of florets (smaller)\n        for(i = [0:floret_count+4-1]) {\n            angle = i * (360/(floret_count+4));\n            z = 15;\n            radius = total_width/2.2;\n            \n            floret(\n                size = total_width/6,\n                position = [cos(angle)*radius, sin(angle)*radius, z],\n                angle = [atan2(sin(angle)*radius, cos(angle)*radius), 0, 0]\n            );\n        }\n        \n        // Top florets\n        for(i = [0:5]) {\n            angle = i * 60;\n            floret(\n                size = total_width/7,\n                position = [0, 0, total_width/2.5],\n                angle = [0, 0, angle]\n            );\n        }\n    }\n}\n\n// Add leaf base\nmodule leaf_base() {\n    color([0.7, 0.8, 0.65]) {\n        for(i = [0:3]) {\n            rotate([0, 0, i*90])\n            translate([stem_diameter/2, 0, stem_height-5])\n            rotate([0, 30, 0])\n            scale([1, 1.5, 0.5])\n                cylinder(h=15, d1=stem_diameter+5, d2=stem_diameter+15, $fn=8);\n        }\n    }\n}\n\n// Main assembly\ntranslate([0, 0, 0]) {\n    stem();\n    translate([0, 0, stem_height-5])\n        cauliflower_head();\n    leaf_base();\n}",
    "renders": true
  },
  {
    "food_item": "bokchoy",
    "openscad_code": "// Bok choy (Chinese cabbage) - realistic style, medium complexity\n// Overall height ~70mm, suitable for 3D printing\n\n// Main colors\n$fn = 32;\n\nmodule stem_base() {\n    color([0.85, 0.9, 0.75])  // Light green-white\n    union() {\n        // Main stem\n        cylinder(h = 50, r1 = 12, r2 = 10);\n        \n        // Base root\n        translate([0, 0, -5])\n            cylinder(h = 8, r = 13);\n    }\n}\n\nmodule leaf_segment(height, base_angle, curl_angle, scale_factor) {\n    color([0.15, 0.45, 0.25])  // Dark green\n    translate([0, 0, height])\n    rotate([base_angle, 0, 0])\n    rotate([0, curl_angle, 0])\n    scale([scale_factor, scale_factor * 0.7, 1])\n    difference() {\n        // Main leaf shape\n        scale([1, 2.5, 0.2])\n        sphere(r = 18);\n        \n        // Vein indentation\n        translate([0, -5, 1])\n        cube([3, 10, 2], center = true);\n    }\n}\n\nmodule leaf_whorl(start_height, num_leaves, base_scale) {\n    for(i = [0:num_leaves-1]) {\n        angle = i * 360 / num_leaves;\n        translate([0, 0, 0])\n        rotate([0, 0, angle])\n        leaf_segment(\n            start_height, \n            -20 - i * 5, \n            15 + i * 3, \n            base_scale - i * 0.05\n        );\n    }\n}\n\nmodule stem_details() {\n    color([0.9, 0.95, 0.8])\n    // Add subtle ridges along stem\n    for(i = [0:5:45]) {\n        translate([0, 0, i])\n        rotate([0, 0, i * 15])\n        linear_extrude(height = 3)\n        offset(delta = 1)\n        circle(r = 11.5, $fn = 6);\n    }\n}\n\n// Main assembly\nunion() {\n    stem_base();\n    \n    // Add stem texture\n    stem_details();\n    \n    // Lower leaves (larger)\n    leaf_whorl(20, 6, 1.0);\n    \n    // Middle leaves\n    leaf_whorl(30, 5, 0.85);\n    \n    // Upper leaves (smaller)\n    leaf_whorl(40, 4, 0.7);\n    \n    // Top leaves (smallest)\n    leaf_whorl(48, 3, 0.55);\n}\n\n// Add center small leaves\ntranslate([0, 0, 52])\ncolor([0.05, 0.3, 0.15])\nfor(i = [0:2]) {\n    rotate([0, 0, i * 120])\n    rotate([5, 0, 0])\n    scale([0.4, 0.8, 0.15])\n    sphere(r = 12);\n}",
    "renders": true
  },
  {
    "food_item": "arugula",
    "openscad_code": "// Arugula leaf with realistic characteristics\n// Features: lobed leaf shape, serrated edges, veining, and stem\n\n// Main parameters\nleaf_length = 80;\nleaf_width = 30;\nstem_length = 15;\nstem_diameter = 3;\n\nmodule arugula_leaf() {\n    color([0.15, 0.45, 0.15, 0.9])  // Dark green with slight transparency\n    \n    // Main leaf body with lobes\n    union() {\n        // Central leaf body\n        hull() {\n            translate([0, 0, 0]) sphere(d=leaf_width * 0.8);\n            translate([leaf_length * 0.3, 0, 0]) sphere(d=leaf_width * 0.7);\n            translate([leaf_length * 0.7, 0, 0]) sphere(d=leaf_width * 0.4);\n        }\n        \n        // Side lobes\n        for (side = [-1, 1]) {\n            translate([leaf_length * 0.4, side * leaf_width * 0.3, 0])\n                rotate([0, 0, side * 30])\n                scale([0.6, 0.4, 0.3])\n                sphere(d=leaf_width * 0.7);\n            \n            translate([leaf_length * 0.6, side * leaf_width * 0.2, 0])\n                rotate([0, 0, side * 45])\n                scale([0.4, 0.3, 0.2])\n                sphere(d=leaf_width * 0.5);\n        }\n        \n        // Stem\n        color([0.25, 0.55, 0.25])\n        translate([-stem_length, 0, -1])\n            cylinder(h=stem_length, d=stem_diameter, $fn=8);\n    }\n}\n\nmodule leaf_veins() {\n    color([0.1, 0.35, 0.1, 0.7])\n    \n    // Main central vein\n    translate([0, 0, 0.5])\n        scale([leaf_length * 0.9, 1, 0.3])\n        sphere(d=leaf_width * 0.08);\n    \n    // Secondary veins\n    for (i = [1:5]) {\n        angle = 30 + i * 8;\n        length = leaf_length * 0.4 - i * 5;\n        \n        // Left veins\n        translate([i * leaf_length * 0.15, 0, 0.5])\n            rotate([0, 0, angle])\n            scale([length, 0.5, 0.2])\n            sphere(d=leaf_width * 0.05);\n        \n        // Right veins\n        translate([i * leaf_length * 0.15, 0, 0.5])\n            rotate([0, 0, -angle])\n            scale([length, 0.5, 0.2])\n            sphere(d=leaf_width * 0.05);\n    }\n}\n\nmodule leaf_texture() {\n    // Small surface bumps for realistic texture\n    color([0.12, 0.42, 0.12, 0.6])\n    for (x = [0.1:0.15:0.9]) {\n        for (y = [-0.4:0.1:0.4]) {\n            pos_x = x * leaf_length;\n            pos_y = y * leaf_width;\n            height = 0.2 + sin(x * 10) * 0.1;\n            \n            translate([pos_x, pos_y, 0.8])\n                sphere(d=0.8);\n        }\n    }\n}\n\nmodule serrated_edge() {\n    // Create serrated edges with small triangles\n    color([0.15, 0.45, 0.15])\n    for (i = [0:10:359]) {\n        angle = i;\n        radius = leaf_width * 0.5;\n        \n        // Outer serrations\n        translate([\n            cos(angle) * radius * 0.5 + leaf_length * 0.5,\n            sin(angle) * radius,\n            0.5\n        ]) {\n            rotate([0, 0, angle + 90])\n            scale([1, 0.5, 0.3])\n            cylinder(h=2, d1=1.5, d2=0);\n        }\n    }\n}\n\n// Assembly of complete arugula leaf\nunion() {\n    // Main leaf structure\n    arugula_leaf();\n    \n    // Veins on top surface\n    leaf_veins();\n    \n    // Surface texture\n    leaf_texture();\n    \n    // Serrated edge details\n    serrated_edge();\n}\n\n// Position for 3D printing\ntranslate([0, 0, 5])\n    rotate([0, 0, -15])  // Slight angle for better printability",
    "renders": true
  },
  {
    "food_item": "endive",
    "openscad_code": "// Realistic Endive - Medium Complexity\n// 3D printable endive model with layered leaves and stem\n\ncolor([0.9, 0.95, 0.85, 0.9]) difference() {\n    union() {\n        // Main body of endive - layered leaves\n        for (i = [0:8]) {\n            rotate([0, 0, i * 40 + (i % 2) * 20]) \n            translate([0, 0, i * 3]) \n            scale([1 - i * 0.08, 1 - i * 0.05, 1]) \n            leaf_layer(i);\n        }\n        \n        // Stem base\n        translate([0, 0, -8]) \n        cylinder(h = 12, r1 = 8, r2 = 6, $fn = 16);\n        \n        // Root fibers\n        for (j = [0:5]) {\n            rotate([0, 0, j * 60]) \n            translate([5, 0, -8]) \n            rotate([80, 0, 0]) \n            cylinder(h = 6, r1 = 1.5, r2 = 0.5, $fn = 8);\n        }\n    }\n    \n    // Hollow out for 3D printing\n    translate([0, 0, -15]) \n    cylinder(h = 40, r = 4, $fn = 16);\n}\n\n// Individual leaf layer module\nmodule leaf_layer(layer_num) {\n    scale_y = 1 + layer_num * 0.1;\n    \n    // Main leaf shape\n    color([0.85 + layer_num * 0.02, 0.9 + layer_num * 0.02, 0.75 + layer_num * 0.05, 0.9]) \n    union() {\n        // Central leaf section\n        translate([0, 0, 0]) \n        scale([1, scale_y, 0.8]) \n        sphere(r = 12 - layer_num, $fn = 32);\n        \n        // Left side leaf extension\n        translate([-8 + layer_num * 0.5, 0, 0]) \n        rotate([0, 0, -30]) \n        scale([0.8, 1.2 * scale_y, 0.6]) \n        sphere(r = 10 - layer_num * 0.8, $fn = 24);\n        \n        // Right side leaf extension\n        translate([8 - layer_num * 0.5, 0, 0]) \n        rotate([0, 0, 30]) \n        scale([0.8, 1.2 * scale_y, 0.6]) \n        sphere(r = 10 - layer_num * 0.8, $fn = 24);\n        \n        // Top leaf curl\n        translate([0, 12 - layer_num * 1.5, 2]) \n        rotate([30, 0, 0]) \n        scale([0.7, 0.9, 0.5]) \n        sphere(r = 8 - layer_num * 0.6, $fn = 20);\n        \n        // Leaf veins - subtle ridges\n        for (k = [0:2]) {\n            rotate([0, 0, (k - 1) * 25]) \n            translate([0, 0, -0.5]) \n            scale([0.1, 1, 0.05]) \n            cube([15 - layer_num, 20 - layer_num * 2, 2], center = true);\n        }\n    }\n}",
    "renders": true
  },
  {
    "food_item": "chard",
    "openscad_code": "// Swiss Chard Leaf with Stem - Realistic 3D Printable Model\n// Medium complexity food model\n\n// Color definitions\ncolor_stem = [34/255, 139/255, 34/255];\ncolor_leaf_dark = [0/255, 100/255, 0/255];\ncolor_leaf_light = [144/255, 238/255, 144/255];\ncolor_veins = [50/255, 120/255, 50/255];\n\n// Main stem module\nmodule stem() {\n    color(color_stem) {\n        // Main stem body\n        translate([0, 0, -5]) \n            cylinder(h=60, r1=4, r2=2.5, $fn=8);\n        \n        // Stem ridges\n        for(i = [0:45:315]) {\n            rotate([0, 0, i])\n                translate([0, 0, -5])\n                    cylinder(h=60, r1=4.5, r2=3, $fn=4);\n        }\n    }\n}\n\n// Leaf vein structure\nmodule leaf_veins() {\n    color(color_veins) {\n        // Central vein\n        translate([0, 0, 0.5])\n            cylinder(h=0.5, r1=1, r2=0.5, $fn=6);\n        \n        // Side veins\n        for(angle = [30:30:150]) {\n            rotate([0, 0, angle])\n                translate([15, 0, 0.5])\n                    rotate([0, 0, -30])\n                        scale([0.7, 0.7, 1])\n                            cylinder(h=0.5, r1=0.8, r2=0.3, $fn=6);\n        }\n        \n        for(angle = [-30:-30:-150]) {\n            rotate([0, 0, angle])\n                translate([15, 0, 0.5])\n                    rotate([0, 0, 30])\n                        scale([0.7, 0.7, 1])\n                            cylinder(h=0.5, r1=0.8, r2=0.3, $fn=6);\n        }\n    }\n}\n\n// Single leaf lobe\nmodule leaf_lobe(width, length, angle) {\n    rotate([0, 0, angle])\n        translate([width/2, 0, 0])\n            scale([1, length/width, 1])\n                difference() {\n                    // Main lobe shape\n                    color(color_leaf_dark)\n                        sphere(r=width/2, $fn=16);\n                    \n                    // Light green patch\n                    translate([0, width/4, 0.2])\n                        scale([0.8, 0.6, 0.1])\n                            color(color_leaf_light)\n                                sphere(r=width/2.5, $fn=16);\n                }\n}\n\n// Main leaf structure\nmodule chard_leaf() {\n    // Central leaf body\n    color(color_leaf_dark) {\n        translate([25, 0, 0])\n            scale([1.5, 1, 0.3])\n                sphere(r=20, $fn=32);\n    }\n    \n    // Leaf lobes\n    leaf_lobe(15, 25, 30);\n    leaf_lobe(18, 22, 60);\n    leaf_lobe(16, 28, 90);\n    leaf_lobe(18, 25, 120);\n    leaf_lobe(15, 23, 150);\n    \n    leaf_lobe(15, 25, -30);\n    leaf_lobe(18, 22, -60);\n    leaf_lobe(16, 28, -90);\n    leaf_lobe(18, 25, -120);\n    leaf_lobe(15, 23, -150);\n    \n    // Leaf veins\n    leaf_veins();\n}\n\n// Assembly\nmodule swiss_chard() {\n    union() {\n        // Stem\n        stem();\n        \n        // Leaf attached to stem\n        translate([0, 0, 55])\n            rotate([90, 0, 0])\n                chard_leaf();\n    }\n}\n\n// Render the complete model\nswiss_chard();",
    "renders": true
  },
  {
    "food_item": "collard",
    "openscad_code": "// Collard leaf - realistic style with medium complexity\n// Overall size: ~70mm wide, ~90mm tall\n\n$fn=64;\n\n// Main stem thickness and leaf thickness\nstem_thickness = 1.5;\nleaf_thickness = 0.6;\n\n// Color definitions\ncolor_leaf = [0.15,0.45,0.15];\ncolor_stem = [0.35,0.55,0.25];\ncolor_vein = [0.25,0.35,0.15];\n\nmodule collard_leaf() {\n    // Main stem structure\n    color(color_stem) \n    translate([0,-40,0])\n    rotate([0,5,0])\n    linear_extrude(height=stem_thickness)\n    polygon(points=[\n        [0,0],\n        [-2,-3],\n        [-2,-85],\n        [0,-88],\n        [2,-85],\n        [2,-3]\n    ]);\n\n    // Main leaf body\n    color(color_leaf)\n    translate([0,-5,leaf_thickness/2])\n    linear_extrude(height=leaf_thickness)\n    polygon(points=[\n        [0,0],\n        [15,-10],\n        [25,-25],\n        [30,-45],\n        [28,-65],\n        [20,-80],\n        [10,-90],\n        [-10,-90],\n        [-20,-80],\n        [-28,-65],\n        [-30,-45],\n        [-25,-25],\n        [-15,-10]\n    ]);\n\n    // Secondary leaf on left\n    color(color_leaf)\n    translate([-20,-25,leaf_thickness/2])\n    rotate([-15,0,-25])\n    linear_extrude(height=leaf_thickness)\n    polygon(points=[\n        [0,0],\n        [8,-8],\n        [12,-20],\n        [10,-35],\n        [5,-45],\n        [-2,-50],\n        [-8,-45],\n        [-12,-35],\n        [-10,-20],\n        [-8,-8]\n    ]);\n\n    // Secondary leaf on right\n    color(color_leaf)\n    translate([20,-30,leaf_thickness/2])\n    rotate([-10,0,20])\n    linear_extrude(height=leaf_thickness)\n    polygon(points=[\n        [0,0],\n        [10,-10],\n        [15,-25],\n        [12,-40],\n        [8,-50],\n        [0,-55],\n        [-8,-50],\n        [-12,-40],\n        [-10,-25],\n        [-10,-10]\n    ]);\n\n    // Vein structure\n    module vein_line(length, width, angle) {\n        color(color_vein)\n        rotate([0,0,angle])\n        translate([0,-length/2,leaf_thickness+0.1])\n        linear_extrude(height=0.3)\n        polygon(points=[\n            [-width/2, -length/2],\n            [width/2, -length/2],\n            [width/2, length/2],\n            [-width/2, length/2]\n        ]);\n    }\n\n    // Main veins\n    vein_line(85, 1.2, 0);\n    vein_line(40, 0.8, -25);\n    vein_line(35, 0.8, 25);\n    vein_line(30, 0.6, -45);\n    vein_line(25, 0.6, 45);\n    vein_line(20, 0.5, -60);\n    vein_line(20, 0.5, 60);\n\n    // Smaller veins using loop\n    for(i=[-4:4]) {\n        if(i != 0) {\n            angle = 15 * i;\n            length = 20 - abs(i)*2;\n            vein_line(length, 0.3, angle);\n        }\n    }\n\n    // Leaf surface texture\n    module texture_dot(x,y,size) {\n        color([0.1,0.35,0.1])\n        translate([x,y,leaf_thickness+0.05])\n        cylinder(h=0.1, r=size, $fn=8);\n    }\n\n    // Add surface texture\n    for(y=[-75:-5:5]) {\n        for(x=[-25:5:25]) {\n            if(norm([x,y-45]) < 30) {\n                texture_dot(x+sin(y*3)*2, y, 0.3+0.2*sin(x*2+y));\n            }\n        }\n    }\n\n    // Leaf edge detail\n    color(color_leaf)\n    translate([0,-45,leaf_thickness])\n    difference() {\n        cylinder(h=0.4, r=35);\n        cylinder(h=0.5, r=32);\n    }\n\n    // Slight curl for realism\n    color(color_leaf)\n    translate([0,-45,0])\n    rotate([5,0,0])\n    translate([0,0,leaf_thickness])\n    linear_extrude(height=leaf_thickness)\n    circle(r=2);\n}\n\n// Render the collard\ncollard_leaf();",
    "renders": true
  },
  {
    "food_item": "mustard",
    "openscad_code": "// Realistic mustard food item - OpenSCAD\n// Medium complexity 3D printable mustard model\n\n$fn = 64;\n\n// Main mustard color\ncolor([0.9, 0.75, 0.15]) {\n    // Mustard body - main blob shape\n    translate([0, 0, 5]) {\n        scale([1, 0.8, 0.6]) {\n            sphere(25);\n        }\n    }\n    \n    // Secondary blob for realistic shape variation\n    translate([15, -5, 10]) {\n        scale([0.7, 0.6, 0.5]) {\n            sphere(20);\n        }\n    }\n    \n    // Third small blob\n    translate([-10, 5, 15]) {\n        scale([0.5, 0.4, 0.4]) {\n            sphere(18);\n        }\n    }\n}\n\n// Mustard seeds scattered throughout\nmodule mustard_seed(pos) {\n    translate(pos) {\n        color([0.95, 0.85, 0.25]) {\n            scale([1.2, 1, 0.8]) {\n                sphere(1.5);\n            }\n        }\n    }\n}\n\n// Seed positions calculated with some randomness\nfor(i = [0:20]) {\n    angle = i * 137.5;\n    radius = 8 + (i % 5) * 3 + sin(i * 3) * 2;\n    x = cos(angle) * radius;\n    y = sin(angle) * radius;\n    z = 5 + (i % 3) * 8 + sin(i * 2) * 3;\n    mustard_seed([x, y, z]);\n}\n\n// Surface texture - small bumps for realistic appearance\nmodule surface_bump(pos, size) {\n    translate(pos) {\n        color([0.85, 0.7, 0.1]) {\n            sphere(size);\n        }\n    }\n}\n\n// Add surface texture bumps\nfor(i = [0:30]) {\n    angle = i * 73.5;\n    radius = 12 + (i % 7) * 2;\n    x = cos(angle) * radius;\n    y = sin(angle) * radius;\n    z = 15 + sin(i * 4) * 5;\n    surface_bump([x, y, z], 1 + sin(i) * 0.5);\n}\n\n// Slight shine/reflective spot\ntranslate([8, -8, 25]) {\n    color([1, 0.9, 0.3, 0.6]) {\n        scale([1.5, 1, 0.3]) {\n            sphere(3);\n        }\n    }\n}\n\n// Base flattening for stability\ndifference() {\n    color([0.9, 0.75, 0.15]) {\n        translate([0, 0, 2]) {\n            scale([1, 0.8, 0.6]) {\n                sphere(25);\n            }\n        }\n    }\n    \n    // Cut flat bottom\n    translate([0, 0, -5]) {\n        cube([60, 60, 10], center = true);\n    }\n}\n\n// Add slight pooling effect at base\ntranslate([0, 0, 0]) {\n    color([0.85, 0.7, 0.1]) {\n        cylinder(h = 2, r1 = 22, r2 = 25, $fn = 32);\n    }\n}",
    "renders": true
  },
  {
    "food_item": "watercress",
    "openscad_code": "// Watercress model - realistic style, medium complexity\n\n// Overall dimensions\nstem_length = 60;\nstem_diameter = 2.5;\nleaf_length = 20;\nleaf_width = 12;\nleaf_thickness = 0.8;\ntotal_bunch_width = 50;\n\n// Colors\nstem_color = [0.2, 0.4, 0.1];\nleaf_color = [0.15, 0.6, 0.2];\ndarker_leaf_color = [0.1, 0.5, 0.15];\n\n// Main stem\nmodule stem() {\n    color(stem_color)\n    difference() {\n        cylinder(h = stem_length, d = stem_diameter, $fn = 8);\n        // Add slight taper\n        translate([0, 0, stem_length * 0.8])\n        cylinder(h = stem_length * 0.2, d = stem_diameter * 0.7, $fn = 8);\n    }\n}\n\n// Individual leaf with realistic watercress shape\nmodule leaf() {\n    color(leaf_color)\n    union() {\n        // Main leaf body\n        translate([leaf_length/2, 0, 0])\n        scale([1, 0.6, 1])\n        sphere(d = leaf_width, $fn = 20);\n        \n        // Leaf tip\n        translate([leaf_length - 2, 0, 0])\n        scale([0.3, 0.4, 0.3])\n        sphere(d = leaf_width * 0.7, $fn = 15);\n        \n        // Add leaf thickness\n        translate([leaf_length/2, 0, -leaf_thickness/2])\n        cube([leaf_length, leaf_width * 0.8, leaf_thickness], center = true);\n    }\n    \n    // Leaf veins (subtle texture)\n    color(darker_leaf_color)\n    for(i = [-0.3, -0.15, 0, 0.15, 0.3]) {\n        translate([leaf_length * 0.3, i * leaf_width/2, 0])\n        rotate([90, 0, 0])\n        cylinder(h = leaf_length * 0.5, d = 0.3, $fn = 6);\n    }\n}\n\n// Branch with multiple leaves\nmodule branch(height, angle, rotation) {\n    translate([0, 0, height])\n    rotate([90 + angle, 0, rotation])\n    union() {\n        // Branch stem\n        color(stem_color)\n        cylinder(h = leaf_length * 0.7, d = 1.5, $fn = 6);\n        \n        // Leaves along branch\n        for(i = [0:60:300]) {\n            rotate([0, 0, i])\n            translate([leaf_length * 0.2, 0, 0])\n            rotate([0, 10 + i/10, 0])\n            scale([0.8 - i/1000, 0.8 - i/1000, 1])\n            leaf();\n        }\n    }\n}\n\n// Root system for stability\nmodule roots() {\n    color(stem_color)\n    union() {\n        for(i = [0:45:315]) {\n            rotate([0, 0, i])\n            translate([0, stem_diameter/2, -3])\n            rotate([120, 0, 0])\n            cylinder(h = 8, d = 1.2, $fn = 6);\n        }\n    }\n}\n\n// Main assembly\nmodule watercress_bunch() {\n    union() {\n        // Base root system\n        roots();\n        \n        // Main stem\n        stem();\n        \n        // Branches up the stem\n        for(i = [1:1:5]) {\n            height = i * stem_length/6;\n            angle = 30 + i * 5;\n            rotation = i * 137.5; // Golden angle for natural look\n            \n            // Opposite branches\n            branch(height, angle, rotation);\n            branch(height, angle, rotation + 180);\n            \n            // Smaller branches between\n            branch(height + 5, angle - 10, rotation + 90);\n            branch(height + 5, angle - 10, rotation + 270);\n        }\n        \n        // Top leaves cluster\n        translate([0, 0, stem_length - 5])\n        for(j = [0:30:330]) {\n            rotate([0, 0, j])\n            translate([0, 0, 8])\n            rotate([15 + j/3, 0, 0])\n            scale([0.7, 0.7, 1])\n            leaf();\n        }\n    }\n}\n\n// Generate the watercress\nwatercress_bunch();",
    "renders": true
  },
  {
    "food_item": "kohlrabi",
    "openscad_code": "// Kohlrabi 3D model - Medium complexity realistic style\n// Size: ~70mm diameter\n// Focus on recognizable food characteristics with 3D printability\n\ncolor([0.8, 0.9, 0.6]) // Light green kohlrabi bulb color\n\nmodule kohlrabi_bulb() {\n    // Main bulb shape - slightly flattened sphere\n    difference() {\n        scale([1, 1, 0.7]) sphere(d=60, $fn=64);\n        \n        // Root attachment point\n        translate([0, 0, -20]) cylinder(h=10, d1=8, d2=15, $fn=16);\n    }\n}\n\nmodule stem_attachment() {\n    // Where stems connect to bulb\n    translate([0, 0, 20]) {\n        cylinder(h=8, d=25, $fn=32);\n        \n        // Small raised ring\n        translate([0, 0, 8]) cylinder(h=2, d=28, $fn=32);\n    }\n}\n\nmodule leaf_stem(index) {\n    // Individual leaf stem\n    angle = index * 60;\n    height = 15 + (index % 2) * 5;\n    \n    rotate([0, 0, angle]) {\n        translate([0, 22, 25]) {\n            rotate([90 - height/2, 0, 0]) {\n                // Curved stem\n                cylinder(h=height, d1=4, d2=2.5, $fn=8);\n                \n                // Leaf attachment point\n                translate([0, 0, height]) \n                    sphere(d=3, $fn=8);\n            }\n        }\n    }\n}\n\nmodule leaf(index) {\n    // Individual leaf with characteristic kohlrabi shape\n    angle = index * 60;\n    leaf_color = [0.15, 0.4, 0.1]; // Dark green\n    \n    color(leaf_color) {\n        rotate([0, 0, angle]) {\n            translate([0, 25, 28 + (index % 2) * 3]) {\n                rotate([70, 0, 0]) {\n                    scale([1.5, 1, 0.3]) {\n                        // Main leaf body\n                        sphere(d=20, $fn=16);\n                        \n                        // Leaf tip\n                        translate([0, 12, 0]) \n                            scale([0.5, 1, 0.5]) \n                                sphere(d=15, $fn=8);\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule surface_texture() {\n    // Small bumps on kohlrabi surface\n    for(i = [0:5:359]) {\n        for(j = [0:20:160]) {\n            rotate([0, j, i]) {\n                translate([28, 0, 0]) {\n                    scale([0.5, 0.5, 0.3]) \n                        sphere(d=2, $fn=8);\n                }\n            }\n        }\n    }\n}\n\nmodule kohlrabi() {\n    union() {\n        // Main bulb\n        kohlrabi_bulb();\n        \n        // Stem attachment\n        stem_attachment();\n        \n        // Surface texture\n        surface_texture();\n        \n        // Leaf stems and leaves\n        for(i = [0:5]) {\n            leaf_stem(i);\n            leaf(i);\n        }\n    }\n}\n\n// Render the complete kohlrabi\nkohlrabi();",
    "renders": true
  },
  {
    "food_item": "rutabaga",
    "openscad_code": "// Rutabaga 3D model - Realistic style, medium complexity\n\n// Main colors\nroot_color = [0.8, 0.6, 0.3];  // Brownish yellow\ntop_color = [0.2, 0.4, 0.1];   // Dark green\n\n// Main body parameters\nbody_height = 60;\nbody_width = 70;\ntop_offset = 45;\n\n// Create the main rutabaga body\nmodule rutabaga_body() {\n    color(root_color) {\n        // Main bulb shape using sphere with scaling\n        translate([0, 0, 0])\n            scale([1, 0.9, 1.1])\n                sphere(d=body_width, $fn=64);\n        \n        // Add bottom bulge for more realistic shape\n        translate([0, 0, -body_height/4])\n            scale([0.8, 0.8, 0.6])\n                sphere(d=body_width * 0.9, $fn=64);\n    }\n}\n\n// Create surface texture (root vegetable bumps)\nmodule surface_texture() {\n    color(root_color) {\n        for(i = [0:20]) {\n            // Random placement of small bumps on surface\n            phi = rands(0, 360, 1)[0];\n            theta = rands(0, 180, 1)[0];\n            r = body_width/2;\n            \n            x = r * cos(phi) * sin(theta);\n            y = r * sin(phi) * sin(theta);\n            z = r * cos(theta) * 0.8;\n            \n            // Skip bumps near top\n            if(z < top_offset - 10) {\n                translate([x, y, z]) {\n                    scale([1, 1, 0.8])\n                        sphere(d=3 + rands(0, 2, 1)[0], $fn=8);\n                }\n            }\n        }\n    }\n}\n\n// Create the leafy top part\nmodule leafy_top() {\n    color(top_color) {\n        // Central stem\n        translate([0, 0, top_offset])\n            cylinder(h=15, d1=8, d2=5, $fn=8);\n        \n        // Generate multiple leaves radiating from center\n        for(i = [0:7]) {\n            rotate([0, 0, i * 45]) {\n                // Each leaf\n                translate([5, 0, top_offset + 5])\n                    rotate([90, 0, 0])\n                        scale([1, 0.3, 1])\n                            cylinder(h=20, d1=10, d2=2, $fn=6);\n                \n                // Secondary leaf layer\n                translate([7, 3, top_offset + 3])\n                    rotate([90, -10, 30])\n                        scale([0.8, 0.25, 1])\n                            cylinder(h=15, d1=8, d2=1, $fn=6);\n            }\n        }\n    }\n}\n\n// Create root scars at bottom\nmodule root_scars() {\n    color([0.5, 0.3, 0.1]) {\n        for(i = [0:4]) {\n            angle = i * 72;\n            translate([\n                cos(angle) * 15,\n                sin(angle) * 15,\n                -body_height/2 + 5\n            ]) {\n                rotate([90, 0, angle])\n                    cylinder(h=5, d1=3, d2=2, $fn=6);\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Main body\n    rutabaga_body();\n    \n    // Surface texture\n    surface_texture();\n    \n    // Leafy top\n    leafy_top();\n    \n    // Root scars at bottom\n    root_scars();\n}",
    "renders": true
  },
  {
    "food_item": "daikon",
    "openscad_code": "// Realistic 3D printable daikon (Japanese radish)\n// Medium complexity - includes tapered root, leafy top, and surface details\n\n// Main parameters\nroot_length = 70;\nroot_top_d = 30;\nroot_tip_d = 8;\nleaf_length = 35;\nleaf_count = 8;\n\n// Daikon root module - tapered cylinder with slight curve\nmodule daikon_root() {\n    color(\"#F5F5DC\") // Off-white color for daikon flesh\n    \n    // Create tapered root with slight curve using hulls\n    hull() {\n        translate([0, 0, 0]) \n            sphere(d=root_tip_d, $fn=16);\n        translate([0, 0, root_length * 0.3]) \n            scale([1.2, 1.1, 1]) sphere(d=root_tip_d * 1.8, $fn=16);\n    }\n    \n    hull() {\n        translate([0, 0, root_length * 0.3]) \n            scale([1.2, 1.1, 1]) sphere(d=root_tip_d * 1.8, $fn=16);\n        translate([0, -2, root_length * 0.7]) \n            sphere(d=root_top_d * 0.8, $fn=20);\n    }\n    \n    hull() {\n        translate([0, -2, root_length * 0.7]) \n            sphere(d=root_top_d * 0.8, $fn=20);\n        translate([0, -3, root_length]) \n            sphere(d=root_top_d, $fn=24);\n    }\n    \n    // Add subtle root texture with small bumps\n    for(i = [1:5:root_length-5]) {\n        rotate([0, 0, i * 137.5]) {\n            translate([root_tip_d/2 + i * 0.3, 0, i]) \n                sphere(d=1.5, $fn=8);\n        }\n    }\n}\n\n// Leaf module - elongated ellipsoid\nmodule leaf(length, width_factor) {\n    color(\"#90EE90\") // Light green for fresh leaves\n    scale([width_factor, 1, 1]) \n        rotate([90, 0, 0]) \n            cylinder(h=length, d1=2, d2=0.5, $fn=8);\n}\n\n// Leaf cluster at top\nmodule leaf_cluster() {\n    translate([0, -3, root_length]) {\n        // Create multiple leaves radiating from center\n        for(i = [0:leaf_count-1]) {\n            rotate([0, 0, i * (360/leaf_count)]) {\n                rotate([20 + (i%2)*10, 0, 0]) {\n                    leaf(leaf_length + (i%3)*5, 0.4 + (i%2)*0.2);\n                }\n            }\n        }\n        \n        // Add inner smaller leaves\n        for(j = [0:leaf_count/2-1]) {\n            rotate([0, 0, j * (360/(leaf_count/2)) + 22.5]) {\n                rotate([30, 0, 0]) {\n                    leaf(leaf_length * 0.7, 0.3);\n                }\n            }\n        }\n    }\n}\n\n// Add root hairs/fibrous texture near top\nmodule root_details() {\n    color(\"#E6E6FA\") // Slightly darker white for details\n    \n    // Create slight ring pattern near top\n    for(z = [root_length-20:5:root_length-5]) {\n        rotate([0, 0, 15]) {\n            difference() {\n                cylinder(h=2, d=root_top_d * (1 - (root_length - z)/root_length * 0.3), $fn=32);\n                translate([0, 0, -0.1]) \n                    cylinder(h=2.2, d=root_top_d * (1 - (root_length - z)/root_length * 0.3) - 1, $fn=32);\n            }\n        }\n    }\n    \n    // Add small surface imperfections\n    for(i = [1:8]) {\n        theta = i * 45;\n        for(j = [1:4]) {\n            z_pos = root_length - j * 15;\n            r = root_top_d * (1 - (root_length - z_pos)/root_length * 0.7) * 0.45;\n            translate([r * cos(theta), r * sin(theta), z_pos]) \n                sphere(d=0.8, $fn=6);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    daikon_root();\n    leaf_cluster();\n    root_details();\n}",
    "renders": true
  },
  {
    "food_item": "jicama",
    "openscad_code": "// Realistic Jicama Model - Medium Complexity\n// Size: ~80mm height, 3D printable with no overhangs\n\n$fn = 32;\n\n// Main jicama body - irregular turnip shape\nmodule jicama_body() {\n    color(\"#f5f5dc\")  // beige color\n    \n    // Create irregular bulb shape using hull of spheres\n    hull() {\n        translate([0, -5, 40]) sphere(r=15);\n        translate([0, 5, 20]) sphere(r=25);\n        translate([0, 0, 0]) sphere(r=20);\n    }\n    \n    // Add slight asymmetry for realism\n    translate([3, -2, 30]) scale([1.1, 0.9, 1]) sphere(r=12);\n}\n\n// Root ends/tendrils at bottom\nmodule root_tendrils() {\n    color(\"#8B7355\")  // brownish color\n    \n    for(i = [0:5]) {\n        rotate([0, 0, i * 60]) {\n            translate([0, 18, 0]) \n                rotate([90, 0, 0])\n                cylinder(h1=2, h2=0.5, r1=1.5, r2=0.5, $fn=8);\n        }\n    }\n}\n\n// Stem attachment at top\nmodule stem_area() {\n    color(\"#556B2F\")  // dark olive\n    \n    // Main stem base\n    translate([0, 0, 55])\n        cylinder(h=8, r1=6, r2=4, $fn=16);\n    \n    // Small stem protrusions\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90 + 45]) {\n            translate([0, 4, 58])\n                rotate([90, 0, 0])\n                cylinder(h=5, r1=1, r2=0.5, $fn=8);\n        }\n    }\n}\n\n// Surface texture - small bumps and imperfections\nmodule surface_texture() {\n    color(\"#f5f5dc\")\n    \n    // Random small bumps across surface\n    for(i = [0:15]) {\n        angle = i * 137.5;  // golden angle for distribution\n        h = 40 * sin(i * 0.5) + 20;\n        r = 20 + 5 * sin(i * 0.8);\n        \n        translate([r * cos(angle), r * sin(angle), h])\n            sphere(r=0.5 + 0.5 * sin(i));\n    }\n}\n\n// Main assembly\nunion() {\n    // Core body\n    jicama_body();\n    \n    // Root system\n    root_tendrils();\n    \n    // Stem\n    stem_area();\n    \n    // Surface details\n    surface_texture();\n}\n\n// Add subtle flattening on bottom for 3D printing stability\ntranslate([0, 0, -1])\n    cylinder(h=2, r=22, $fn=64);",
    "renders": true
  },
  {
    "food_item": "chayote",
    "openscad_code": "// Chayote (Sechium edule) – medium complexity realistic model\n// Overall height ≈ 52 mm, max width ≈ 48 mm, printable without supports\n\nmodule chayote() {\n    // Base green color\n    color(\"darkolivegreen\")\n\n    // Main pear-shaped body\n    union() {\n        // Central lobed body\n        difference() {\n            scale([1, 0.9, 1.1])\n            sphere(d = 46, $fn = 60);\n\n            // Top depression for stem socket\n            translate([0, 0, 22])\n            cylinder(h = 8, d1 = 12, d2 = 0, $fn = 24);\n        }\n\n        // Ridge loops for lobes\n        for (i = [0 : 45 : 315]) {\n            rotate([0, 0, i])\n            translate([0, 0, -1])\n            scale([0.9, 0.4, 1.15])\n            sphere(d = 50, $fn = 6);\n        }\n    }\n\n    // Stem nub\n    color(\"saddlebrown\")\n    translate([0, 0, 25])\n    rotate([0, 0, 180])\n    cylinder(h = 6, d1 = 4, d2 = 6, $fn = 12);\n\n    // Bottom crease line\n    color(\"darkolivegreen\")\n    translate([0, 0, -25])\n    rotate([90, 0, 0])\n    linear_extrude(height = 0.4, center = true)\n    circle(d = 46, $fn = 60);\n\n    // Surface wrinkles (small random bumps)\n    color(\"darkolivegreen\")\n    for (ang = [0 : 30 : 330]) {\n        rotate([0, 0, ang])\n        for (h = [-15 : 10 : 15]) {\n            translate([rand() * 10 - 5, rand() * 10 - 5, h])\n            sphere(d = rand() * 3 + 2, $fn = 8);\n        }\n    }\n}\n\n// Render the chayote\nchayote();",
    "renders": true
  },
  {
    "food_item": "nopales",
    "openscad_code": "// Realistic nopales (cactus pads) with medium complexity\n// Features: textured pad surface, spines, and realistic proportions\n\nmodule nopales_pad(width=45, height=60, thickness=5) {\n    color([0.2, 0.6, 0.2])  // Dark green for mature pad\n    \n    // Main pad shape - slightly curved with rounded edges\n    translate([0, 0, thickness/2])\n    difference() {\n        // Base oval shape\n        scale([1, 1.4, 1])\n        cylinder(h=thickness, r=width/2, $fn=40);\n        \n        // Create slight curve by subtracting\n        translate([0, -5, -1])\n        scale([1.1, 1.2, 1.2])\n        sphere(r=width/2.2, $fn=40);\n    }\n    \n    // Add surface texture with bumps (areoles)\n    for(y = [-height/2+10:10:height/2-10]) {\n        for(x = [-width/2+8:8:width/2-8]) {\n            translate([x, y, thickness+0.2])\n            scale([1, 0.8, 0.3])\n            sphere(r=1.5, $fn=8);\n        }\n    }\n}\n\nmodule spine_cluster(x, y, z) {\n    // Position a cluster of spines at an areole\n    translate([x, y, z])\n    for(i = [0:15:75]) {\n        rotate([0, 15, i])\n        translate([0, 0, 0.5])\n        color([0.9, 0.9, 0.8])\n        cylinder(h=4, r=0.3, $fn=6);\n    }\n}\n\nmodule nopales_with_spines() {\n    // Create the main pad\n    nopales_pad();\n    \n    // Add spines in realistic pattern\n    for(y = [-25:10:25]) {\n        for(x = [-20:8:20]) {\n            if(y != 0 || abs(x) > 10)  // Skip center area\n            spine_cluster(x, y, 5.5);\n        }\n    }\n    \n    // Add small flower buds at edges\n    color([0.3, 0.8, 0.3])\n    for(a = [0:45:360]) {\n        rotate([0, 0, a])\n        translate([20, 0, 5])\n        sphere(r=2, $fn=12);\n    }\n}\n\n// Main model\ntranslate([0, 0, 0])\nnopales_with_spines();\n\n// Add a second smaller pad overlapping for realistic presentation\ntranslate([30, 20, 2])\nrotate([0, 0, 30])\nscale([0.8, 0.8, 0.8])\nnopales_with_spines();",
    "renders": true
  },
  {
    "food_item": "fennel",
    "openscad_code": "// Realistic Fennel Food Item - Medium Complexity\n// Scale: ~80mm total height\n\n// Overall color definitions\ncolor([1, 0.95, 0.9]) union() {\n\n    // Main bulb base\n    difference() {\n        scale([1, 0.8, 1]) sphere(d=35, $fn=50);\n        translate([0, 0, -20]) cube([50, 50, 40], center=true);\n    }\n\n    // Bulb layers - stacked ellipsoids with decreasing size\n    for(i=[0:3]) {\n        translate([0, 0, -10 + i*7]) \n            scale([1 - i*0.08, 0.75 - i*0.05, 0.3]) \n                sphere(d=35 - i*5, $fn=40);\n    }\n}\n\n// Stem base\ncolor([0.9, 0.85, 0.8]) \ntranslate([0, 0, 18]) \n    cylinder(h=8, d1=12, d2=10, $fn=20);\n\n// Fronds - multiple curved stems with leaves\nmodule frond(stem_length, angle, rotation) {\n    color([0.2, 0.6, 0.2]) {\n        // Main frond stem\n        translate([0, 0, 26])\n        rotate([angle, 0, rotation]) {\n            cylinder(h=stem_length, d=2, $fn=8);\n            \n            // Side leaves along stem\n            for(i=[0:3]) {\n                translate([0, 0, i*stem_length/4])\n                rotate([90, 0, 0])\n                scale([0.3, 1.5, 0.1])\n                    sphere(d=10 + i*2, $fn=15);\n            }\n            \n            // Top feathery leaves\n            translate([0, 0, stem_length])\n            rotate([0, 0, 45])\n            scale([0.4, 0.4, 1])\n                cylinder(h=15, d1=3, d2=0.5, $fn=8);\n        }\n    }\n}\n\n// Generate 8 fronds around the stem\nfor(i=[0:7]) {\n    frond(20 + i*2, 30 + i*3, i*45);\n}\n\n// Root-like structures at bottom\ncolor([0.6, 0.4, 0.3]) \nfor(i=[0:4]) {\n    rotate([0, 0, i*72]) {\n        translate([8, 0, -8])\n        rotate([90, 0, 10])\n        scale([0.3, 0.3, 1])\n            cylinder(h=8, d1=3, d2=1, $fn=6);\n    }\n}\n\n// Surface texture - small bumps for realistic appearance\ncolor([0.98, 0.92, 0.88]) \nfor(a=[0:20:360]) {\n    for(b=[-60:20:60]) {\n        rotate([0, a, b])\n        translate([17*sin(a), 13*cos(a), sin(b*2)*3 - 5])\n            sphere(d=1.5, $fn=8);\n    }\n}\n\n// Central core structure visible at top\ncolor([0.95, 0.9, 0.85]) \ntranslate([0, 0, 15]) \n    cylinder(h=10, d=8, $fn=20);",
    "renders": true
  },
  {
    "food_item": "leek",
    "openscad_code": "// Realistic Leek - OpenSCAD\n// Medium complexity food model with layered structure and texture\n\n// Colors\n$fn = 50;\n\n// Main leek body\nmodule leek_body() {\n    color([0.85, 0.9, 0.75]) {\n        // White bulb base\n        translate([0, 0, 0]) {\n            cylinder(h = 25, r1 = 12, r2 = 10);\n        }\n        \n        // Green stalk layers\n        for (i = [0:5]) {\n            translate([0, 0, 25 + i * 15]) {\n                rotate([0, 0, i * 30]) {\n                    // Tapering cylinder for each layer\n                    cylinder(h = 15, r1 = 10 - i, r2 = 9 - i);\n                }\n            }\n        }\n        \n        // Top green leaves\n        for (i = [0:7]) {\n            rotate([0, 0, i * 45]) {\n                translate([0, 0, 110 + i * 3]) {\n                    scale([1, 0.3, 1]) {\n                        rotate([i * 5 - 17.5, 0, 0]) {\n                            cylinder(h = 30, r1 = 4 - i * 0.3, r2 = 1);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Root hairs at base\nmodule roots() {\n    color([0.7, 0.65, 0.6]) {\n        for (i = [0:11]) {\n            rotate([0, 0, i * 30]) {\n                translate([8, 0, 0]) {\n                    rotate([90, 0, 0]) {\n                        cylinder(h = 8, r1 = 0.8, r2 = 0.3);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Surface texture lines\nmodule texture_lines() {\n    color([0.75, 0.82, 0.65]) {\n        for (i = [0:8]) {\n            rotate([0, 0, i * 22.5]) {\n                for (j = [0:6]) {\n                    translate([0, 0, 5 + j * 15]) {\n                        scale([1, 0.05, 0.1]) {\n                            cylinder(h = 15, r = 10 - j * 1.2);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Dirt particles\nmodule dirt() {\n    color([0.4, 0.3, 0.2]) {\n        for (i = [0:15]) {\n            translate([\n                sin(i * 47) * 15,\n                cos(i * 47) * 15,\n                -2\n            ]) {\n                sphere(r = 0.5 + (i % 3) * 0.3);\n            }\n        }\n    }\n}\n\n// Assemble the leek\nunion() {\n    leek_body();\n    roots();\n    texture_lines();\n    dirt();\n}",
    "renders": true
  },
  {
    "food_item": "shallot",
    "openscad_code": "// Realistic Shallot Model\n// Medium complexity with food-specific details\n\ncolor([0.9, 0.7, 0.6]) // Natural shallot color\n\nmodule shallot_body() {\n    difference() {\n        // Main body - elongated teardrop shape\n        scale([1, 0.8, 1.3])\n        rotate([90, 0, 0])\n        sphere(15, $fn=32);\n        \n        // Flat bottom for printing\n        translate([-20, -20, -15])\n        cube([40, 40, 15]);\n    }\n}\n\nmodule shallot_layers() {\n    // Create 2-3 visible layers\n    for(i = [0:2]) {\n        translate([0, 0, i*2 - 2])\n        scale([1 - i*0.05, 1 - i*0.05, 1 - i*0.02])\n        shallot_body();\n    }\n}\n\nmodule shallot_skin_texture() {\n    // Add papery skin texture with small bumps\n    for(phi = [0:30:360]) {\n        for(theta = [20:15:160]) {\n            translate([\n                12 * sin(theta) * cos(phi),\n                12 * sin(theta) * sin(phi),\n                15 * cos(theta) - 5\n            ])\n            sphere(0.5, $fn=8);\n        }\n    }\n}\n\nmodule root_hairs() {\n    // Thin root hairs at bottom\n    color([0.8, 0.6, 0.5])\n    for(i = [0:5]) {\n        rotate([0, 0, i*60])\n        translate([0, 8, -15])\n        rotate([90 + i*5, 0, 0])\n        cylinder(h1=8, h2=0, r1=0.5, r2=0.1, $fn=8);\n    }\n}\n\nmodule sprout_top() {\n    // Small green sprout emerging from top\n    color([0.3, 0.7, 0.2])\n    translate([0, 0, 17])\n    rotate([0, 15, 0])\n    cylinder(h=8, r1=2, r2=1, $fn=8);\n    \n    // Tiny leaves\n    for(i = [0:1]) {\n        rotate([0, 0, i*180])\n        translate([1.5, 0, 23])\n        rotate([i*30 - 15, 0, 0])\n        scale([0.3, 1, 1])\n        sphere(1.5, $fn=6);\n    }\n}\n\n// Main assembly\nunion() {\n    // Core shallot structure\n    shallot_layers();\n    \n    // Surface texture\n    shallot_skin_texture();\n    \n    // Root system\n    root_hairs();\n    \n    // Fresh sprout\n    sprout_top();\n}",
    "renders": true
  },
  {
    "food_item": "scallion",
    "openscad_code": "// Realistic scallion (green onion) with medium complexity\n// Overall dimensions: ~80mm tall, ~15mm wide at bulb\n\n// Color definitions for realistic appearance\n$fn=50;\n\n// Main scallion module\nmodule scallion() {\n    // White root bulb with tapered base\n    difference() {\n        union() {\n            // Main bulb shape\n            translate([0,0,-5])\n                cylinder(h=15, r1=7.5, r2=6, $fn=20);\n            \n            // Root hairs base\n            translate([0,0,-7])\n                cylinder(h=2, r=7.5, $fn=20);\n        }\n        \n        // Hollow out bulb for printing\n        translate([0,0,-7])\n            cylinder(h=17, r=5.5, $fn=20);\n    }\n    \n    // White stem section\n    color([0.95,0.95,0.9]) {\n        translate([0,0,10])\n            cylinder(h=25, r=5.5, $fn=20);\n    }\n    \n    // Green leaf sheaths (overlapping cylindrical sections)\n    color([0.2,0.7,0.3]) {\n        // First green section\n        translate([0,0,35])\n            cylinder(h=20, r=5.2, $fn=20);\n        \n        // Tapering leaf sections\n        for(i=[0:3]) {\n            rotate([0,0,i*90])\n                translate([0,0,55+i*7])\n                    cylinder(h=15-i*2, r=5-i*0.8, $fn=20);\n        }\n        \n        // Thin leaf extensions\n        for(i=[0:5]) {\n            rotate([0,0,i*60])\n                translate([0,0,70+i*2])\n                    cylinder(h=10-i, r=2-i*0.2, $fn=20);\n        }\n    }\n    \n    // Root hairs (small cylinders)\n    color([0.9,0.85,0.8]) {\n        for(i=[0:7]) {\n            rotate([0,i*51.4,0])\n                translate([6,0,-7.5])\n                    cylinder(h=3+i*0.5, r=0.3, $fn=6);\n        }\n    }\n    \n    // Bulb rings for texture\n    color([0.9,0.85,0.8]) {\n        for(i=[1:4]) {\n            translate([0,0,i*3-8])\n                difference() {\n                    cylinder(h=0.5, r=7.5-i*0.3, $fn=20);\n                    cylinder(h=0.5, r=5.5, $fn=20);\n                }\n        }\n    }\n    \n    // Leaf ridge details\n    color([0.15,0.6,0.25]) {\n        for(i=[0:3]) {\n            rotate([0,0,i*90])\n                translate([5.2,0,35+i*5])\n                    cube([0.5,0.5,25-i*3], center=true);\n        }\n    }\n}\n\n// Generate the scallion\nscallion();",
    "renders": true
  },
  {
    "food_item": "chive",
    "openscad_code": "// Realistic chive model for 3D printing\n// Medium complexity with natural curves and texture\n\n// Color definitions\ncolor_chive_dark = [0.15, 0.4, 0.15];\ncolor_chive_light = [0.2, 0.5, 0.2];\ncolor_tip = [0.4, 0.6, 0.2];\n\n// Main chive stem module with natural curve\nmodule chive_stem(length, thickness, start_angle, end_angle) {\n    // Create curved stem using hull of spheres\n    segments = 12;\n    sphere_size = thickness;\n    \n    for(i = [0:segments-1]) {\n        t = i / (segments - 1);\n        angle = start_angle + t * (end_angle - start_angle);\n        x_pos = sin(angle) * length * 0.3 * t;\n        y_pos = cos(angle) * length * 0.3 * t;\n        z_pos = length * t;\n        \n        translate([x_pos, y_pos, z_pos])\n            sphere(sphere_size * (1 - t * 0.3), $fn=8);\n    }\n}\n\n// Create hollow tube for stem\nmodule chive_tube(length, thickness) {\n    difference() {\n        // Outer tube\n        cylinder(h=length, r1=thickness, r2=thickness * 0.7, $fn=16);\n        \n        // Inner hollow\n        translate([0, 0, -1])\n            cylinder(h=length+2, r1=thickness-0.8, r2=thickness*0.7-0.8, $fn=16);\n    }\n}\n\n// Add texture rings along the stem\nmodule stem_texture(length, thickness) {\n    rings = floor(length / 3);\n    for(i = [0:rings-1]) {\n        z_pos = i * (length / rings);\n        scale_factor = 1 - (z_pos / length) * 0.3;\n        \n        translate([0, 0, z_pos])\n            difference() {\n                cylinder(h=1, r=thickness * scale_factor + 0.2, $fn=16);\n                cylinder(h=2, r=thickness * scale_factor, $fn=16);\n            }\n    }\n}\n\n// Create the tapered tip\nmodule chive_tip(length, base_thickness) {\n    color(color_tip) {\n        translate([0, 0, length])\n            cylinder(h=length * 0.15, r1=base_thickness * 0.7, r2=0, $fn=8);\n    }\n}\n\n// Generate multiple chives with variations\nmodule chive_cluster(count, base_x, base_y) {\n    for(i = [0:count-1]) {\n        angle = 360 * i / count + (i % 2 == 0 ? 15 : -15);\n        length = 70 + rand(i) * 20;\n        thickness = 3.5 + rand(i+5) * 1;\n        \n        translate([base_x, base_y, 0])\n        rotate([0, 0, angle])\n        translate([sin(angle) * 5, 0, 0]) {\n            color(color_chive_dark) {\n                // Main stem structure\n                rotate([rand(i+10) * 5 - 2.5, rand(i+15) * 10 - 5, 0])\n                    chive_tube(length, thickness);\n                \n                // Texture rings\n                rotate([rand(i+10) * 5 - 2.5, rand(i+15) * 10 - 5, 0])\n                    stem_texture(length, thickness);\n                \n                // Curved accent\n                color(color_chive_light) {\n                    translate([0, thickness/2, 0])\n                        rotate([90, 0, 0])\n                            chive_stem(length * 0.6, thickness * 0.5, 0, 30);\n                }\n            }\n            \n            // Tip\n            rotate([rand(i+10) * 5 - 2.5, rand(i+15) * 10 - 5, 0])\n                chive_tip(length, thickness * 0.7);\n        }\n    }\n}\n\n// Simple pseudo-random function\nfunction rand(seed) = (seed * 9301 + 49297) % 233280 / 233280;\n\n// Base platform for printing\nmodule base() {\n    color([0.1, 0.3, 0.1]) {\n        cylinder(h=2, r=30, $fn=32);\n    }\n}\n\n// Main assembly\nbase();\nchive_cluster(7, 0, 0);",
    "renders": true
  },
  {
    "food_item": "ginger",
    "openscad_code": "// Ginger root - realistic style with medium complexity\n// Overall size: ~75mm long x ~35mm wide x ~35mm tall\n\n// Main ginger body - irregular knobby root shape\ncolor(\"#C08450\") \ndifference() {\n    union() {\n        // Central root body\n        scale([1, 0.8, 0.6]) \n        sphere(d=30, $fn=32);\n        \n        // First knobby protrusion\n        translate([12, 8, 0])\n        scale([0.8, 0.9, 0.7])\n        rotate([0, 0, 15])\n        sphere(d=18, $fn=24);\n        \n        // Second knobby protrusion\n        translate([-15, -5, 3])\n        scale([0.9, 0.7, 0.8])\n        rotate([0, 0, -20])\n        sphere(d=20, $fn=24);\n        \n        // Third smaller protrusion\n        translate([5, -12, -2])\n        scale([0.7, 0.8, 0.6])\n        sphere(d=15, $fn=20);\n        \n        // Fourth protrusion on bottom\n        translate([-8, 6, -8])\n        scale([0.8, 0.6, 0.5])\n        sphere(d=16, $fn=20);\n    }\n    \n    // Carve out bottom flat area for printing\n    translate([0, 0, -12])\n    cube([50, 50, 10], center=true);\n}\n\n// Root nodules/bumps texture\nmodule root_bumps() {\n    for (i = [0:8]) {\n        angle = i * 45;\n        radius = 12 + (i % 2) * 5;\n        height = 15 - (i % 3) * 3;\n        translate([\n            cos(angle) * radius,\n            sin(angle) * radius,\n            height - 10\n        ])\n        scale([0.7, 0.7, 0.5])\n        sphere(d=4 + (i % 3) * 2, $fn=12);\n    }\n}\n\ncolor(\"#B8743A\")\nroot_bumps();\n\n// Surface cracks/crevices for texture\nmodule surface_cracks() {\n    for (j = [0:5]) {\n        angle = j * 30 + 15;\n        height = j * 3 - 5;\n        translate([\n            cos(angle) * 10,\n            sin(angle) * 10,\n            height\n        ])\n        rotate([0, 0, angle + 90])\n        scale([0.3, 0.8, 0.2])\n        cylinder(h=12, d=2, $fn=6);\n    }\n}\n\ncolor(\"#8B5A2B\")\nsurface_cracks();\n\n// Ginger skin texture with small bumps\nmodule skin_texture() {\n    for (k = [0:20]) {\n        angle = k * 18;\n        radius = 8 + (k % 4) * 3;\n        z_pos = (k % 5) * 4 - 8;\n        translate([\n            cos(angle) * radius,\n            sin(angle) * radius,\n            z_pos\n        ])\n        sphere(d=1.5, $fn=8);\n    }\n}\n\ncolor(\"#CD853F\")\nskin_texture();\n\n// Cut end showing inner flesh\ntranslate([-20, 0, 0])\nrotate([0, 90, 0])\ncolor(\"#F5DEB3\")\ncylinder(h=25, d=28, $fn=32);\n\n// Inner texture rings on cut end\nmodule growth_rings() {\n    for (r = [5:5:12]) {\n        color(\"#DEB887\")\n        translate([-20, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h=0.5, d=r*2, $fn=32);\n    }\n}\n\ngrowth_rings();\n\n// Small root fibers\nmodule root_fibers() {\n    for (f = [0:3]) {\n        angle = f * 90 + 45;\n        translate([\n            cos(angle) * 18,\n            sin(angle) * 18,\n            -8\n        ])\n        rotate([90, 0, angle])\n        color(\"#8B4513\")\n        scale([0.3, 0.3, 1])\n        cylinder(h=8, d=2, $fn=8);\n    }\n}\n\nroot_fibers();",
    "renders": true
  },
  {
    "food_item": "turmeric",
    "openscad_code": "// Turmeric Root - Realistic Style\n// A medium complexity model with finger-like rhizomes and natural texture\n\n$fn = 32;\n\n// Main color for turmeric\ncolor([0.85, 0.5, 0.15]) {\n    // Main rhizome body\n    rotate([0, 10, 0]) {\n        union() {\n            // Central thick root\n            translate([0, 0, 0]) {\n                scale([1.2, 1, 1]) {\n                    cylinder(h = 60, r1 = 10, r2 = 8);\n                }\n            }\n            \n            // First side finger\n            translate([12, 5, 20]) {\n                rotate([0, 0, 30]) {\n                    rotate([15, 0, 0]) {\n                        scale([0.8, 0.7, 1]) {\n                            cylinder(h = 45, r1 = 7, r2 = 5);\n                        }\n                    }\n                }\n            }\n            \n            // Second side finger\n            translate([-10, -8, 15]) {\n                rotate([0, 0, -45]) {\n                    rotate([10, 0, 0]) {\n                        scale([0.9, 0.6, 1]) {\n                            cylinder(h = 40, r1 = 6, r2 = 4);\n                        }\n                    }\n                }\n            }\n            \n            // Third finger pointing down\n            translate([5, -12, -5]) {\n                rotate([0, 0, 120]) {\n                    rotate([20, 0, 0]) {\n                        scale([0.7, 0.5, 1]) {\n                            cylinder(h = 35, r1 = 5, r2 = 3);\n                        }\n                    }\n                }\n            }\n            \n            // Small nub\n            translate([8, 8, -10]) {\n                rotate([0, 0, -60]) {\n                    scale([0.5, 0.4, 1]) {\n                        cylinder(h = 20, r1 = 4, r2 = 2);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Ring texture details\nmodule ring_detail(height, radius, thickness, spacing) {\n    for(i = [0:spacing:height]) {\n        translate([0, 0, i]) {\n            difference() {\n                cylinder(h = thickness, r = radius + 0.5);\n                cylinder(h = thickness + 0.1, r = radius - 0.5);\n            }\n        }\n    }\n}\n\n// Add ring textures to main body\ncolor([0.75, 0.45, 0.12]) {\n    translate([0, 0, 5]) {\n        rotate([0, 10, 0]) {\n            scale([1.2, 1, 1]) {\n                ring_detail(50, 9, 1, 5);\n            }\n        }\n    }\n    \n    // Texture on side fingers\n    translate([12, 5, 20]) {\n        rotate([0, 0, 30]) {\n            rotate([15, 0, 0]) {\n                scale([0.8, 0.7, 1]) {\n                    ring_detail(40, 6, 0.8, 4);\n                }\n            }\n        }\n    }\n    \n    translate([-10, -8, 15]) {\n        rotate([0, 0, -45]) {\n            rotate([10, 0, 0]) {\n                scale([0.9, 0.6, 1]) {\n                    ring_detail(35, 5, 0.7, 3.5);\n                }\n            }\n        }\n    }\n}\n\n// Small nodules/buds\nmodule bud(size) {\n    scale([1, 0.8, 0.6]) {\n        sphere(r = size);\n    }\n}\n\n// Add small buds along the fingers\ncolor([0.9, 0.55, 0.18]) {\n    for(i = [1:3:15]) {\n        translate([8 + sin(i) * 3, 3 + cos(i) * 2, 10 + i * 2]) {\n            bud(2);\n        }\n    }\n    \n    for(i = [1:3:12]) {\n        translate([-7 + sin(i) * 2, -5 + cos(i) * 1.5, 8 + i * 2]) {\n            bud(1.5);\n        }\n    }\n}\n\n// Cut ends showing interior\ncolor([0.95, 0.65, 0.25]) {\n    // Main root end\n    translate([0, 0, 0]) {\n        cylinder(h = 2, r1 = 8.5, r2 = 8.5);\n    }\n    \n    // Finger ends\n    translate([18, 7, 63]) {\n        rotate([15, 0, 30]) {\n            cylinder(h = 1.5, r1 = 5.5, r2 = 5.5);\n        }\n    }\n    \n    translate([-18, -13, 52]) {\n        rotate([10, 0, -45]) {\n            cylinder(h = 1.5, r1 = 4.5, r2 = 4.5);\n        }\n    }\n}",
    "renders": true
  },
  {
    "food_item": "wasabi",
    "openscad_code": "// Realistic 3D printable wasabi paste\n// Dimensions: ~60mm base diameter, ~25mm height\n\n// Main color - vibrant wasabi green\ncolor([0.13,0.65,0.25])\nunion() {\n    // Base cone shape for the wasabi paste\n    cylinder(h=20, r1=30, r2=25, $fn=64);\n    \n    // Top dome for realistic rounded top\n    translate([0,0,20])\n    sphere(r=25, $fn=64);\n    \n    // Create characteristic swirl texture\n    for(i=[0:15:360]) {\n        rotate([0,0,i])\n        translate([0,0,10])\n        rotate_extrude(angle=15, $fn=32)\n        translate([23,0,0])\n        circle(r=2);\n    }\n    \n    // Add small air pockets/bubbles for realism\n    for(pos=[[10,5,15],[-8,-12,18],[15,-10,12],[-5,8,20],[0,0,25]]) {\n        translate(pos)\n        sphere(r=1.5, $fn=16);\n    }\n    \n    // Textured surface ridges\n    for(angle=[0:30:360]) {\n        rotate([0,0,angle])\n        translate([0,0,0])\n        linear_extrude(height=25, twist=5)\n        polygon(points=[[20,0],[22,2],[22,-2]]);\n    }\n}\n\n// Add a small depression in center for authentic look\ndifference() {\n    translate([0,0,25])\n    sphere(r=26, $fn=64);\n    \n    translate([0,0,20])\n    sphere(r=20, $fn=64);\n}\n\n// Base plate for stability during printing\ncolor([0.9,0.9,0.9])\ntranslate([0,0,-1])\n    cylinder(h=2, r=32, $fn=64);",
    "renders": true
  },
  {
    "food_item": "horseradish",
    "openscad_code": "// Realistic Horseradish Root Model - OpenSCAD\n// Medium complexity, 3D printable food model\n\n// Main parameters\nroot_length = 70;\nroot_width = 25;\nskin_thickness = 2;\nbump_size = 1.5;\n\n// Color definitions\nskin_color = \"#d2b48c\";  // Tan skin color\nflesh_color = \"#f5f5dc\";  // Creamy white flesh\ndetail_color = \"#8b7355\";  // Darker spots\n\n// Module for root bumps (realistic texture)\nmodule root_bumps() {\n    for (i = [0:5]) {\n        rotate([0, 0, i * 60]) {\n            translate([root_width/2 + bump_size, 0, root_length/3]) {\n                sphere(bump_size, $fn=6);\n            }\n            translate([root_width/2 - 2, 0, root_length/2]) {\n                sphere(bump_size * 0.7, $fn=6);\n            }\n            translate([root_width/2 - 1, 0, root_length * 0.75]) {\n                sphere(bump_size * 0.5, $fn=6);\n            }\n        }\n    }\n}\n\n// Main root body with tapered shape\nmodule root_body() {\n    color(skin_color) {\n        union() {\n            // Main tapered cylinder\n            cylinder(h1 = root_width, h2 = root_width * 0.6, h = root_length, $fn=16);\n            \n            // Add slight irregularities for realism\n            translate([root_width/4, 0, root_length/2]) {\n                scale([1.1, 0.9, 1]) cylinder(h1 = root_width * 0.8, h2 = root_width * 0.5, h = root_length/2, $fn=12);\n            }\n            \n            // Bottom root tip\n            translate([0, 0, root_length]) {\n                sphere(root_width * 0.3, $fn=16);\n            }\n            \n            // Root bumps for texture\n            root_bumps();\n        }\n    }\n}\n\n// Flesh visible at cut end\nmodule cut_surface() {\n    color(flesh_color) {\n        // Top cut surface\n        translate([0, 0, -1]) {\n            cylinder(h = 2, r = root_width/2, $fn=16);\n        }\n        \n        // Ring details showing growth rings\n        for (i = [1:3]) {\n            translate([0, 0, -0.5]) {\n                cylinder(h = 0.5, r = root_width/2 - (i * 3), $fn=16);\n            }\n        }\n    }\n}\n\n// Root hairs/fibers\nmodule root_hairs() {\n    color(detail_color) {\n        for (i = [0:15]) {\n            rotate([0, 0, i * 24]) {\n                translate([root_width/2 - 1, 0, root_length * 0.8]) {\n                    rotate([90, 0, 0]) {\n                        cylinder(h = 8, r = 0.5, $fn=8);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Surface imperfections\nmodule surface_details() {\n    color(detail_color) {\n        // Small dark spots\n        for (i = [0:8]) {\n            rotate([0, 0, i * 45]) {\n                translate([root_width/2 * 0.8, 0, root_length * (0.2 + i * 0.1)]) {\n                    sphere(0.8, $fn=8);\n                }\n            }\n        }\n        \n        // Small indentations\n        for (i = [0:5]) {\n            rotate([0, 0, i * 72]) {\n                translate([root_width/2 + 1, 0, root_length * (0.3 + i * 0.12)]) {\n                    difference() {\n                        sphere(1.2, $fn=8);\n                        translate([1, 0, 0]) sphere(1.4, $fn=8);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nroot_body();\ntranslate([0, 0, 0]) cut_surface();\nroot_hairs();\nsurface_details();",
    "renders": true
  },
  {
    "food_item": "rhubarb",
    "openscad_code": "// Rhubarb stalk with realistic features\n// Main stalk is 80mm tall with characteristic red-green gradient and fibrous texture\n\n// Color definitions\nrhubarb_red = [0.8, 0.15, 0.2];\nrhubarb_green = [0.2, 0.6, 0.3];\nrhubarb_pink = [0.9, 0.4, 0.5];\n\n// Main stalk module\nmodule rhubarb_stalk(height=80, base_radius=8, top_radius=6) {\n    // Create tapered stalk with slight curve\n    union() {\n        for(i = [0:height/4]) {\n            color(lerp(rhubarb_red, rhubarb_green, i/(height/4))) {\n                translate([sin(i/10)*2, 0, i*4]) \n                    cylinder(h=4.5, \n                            r1=base_radius - (base_radius-top_radius)*(i*4)/height + 0.5,\n                            r2=base_radius - (base_radius-top_radius)*((i+1)*4)/height + 0.5,\n                            $fn=8);\n            }\n        }\n        \n        // Add fibrous texture ridges along the stalk\n        for(angle = [0:30:150]) {\n            rotate([0, 0, angle]) \n                translate([base_radius-0.5, 0, 0]) \n                    for(z = [0:5:height-5]) {\n                        translate([0, 0, z]) \n                            cube([1, 0.5, 5]);\n                    }\n        }\n    }\n}\n\n// Leaf module for top of stalk\nmodule rhubarb_leaf(size=25) {\n    color(rhubarb_green) {\n        // Main leaf shape\n        scale([1.2, 1, 0.3]) \n            sphere(r=size);\n        \n        // Leaf segments\n        for(i = [0:3]) {\n            rotate([0, 0, i*90]) \n                translate([size/2, 0, 0]) \n                    scale([0.4, 0.2, 0.1]) \n                        sphere(r=size*0.8);\n        }\n        \n        // Veins\n        for(i = [-1:0.5:1]) {\n            rotate([0, 0, i*25]) \n                translate([0, 0, -size/2]) \n                    cube([size*1.5, 0.5, 1], center=true);\n        }\n    }\n}\n\n// Cross-section showing internal structure\nmodule rhubarb_cross_section() {\n    difference() {\n        color(rhubarb_pink) \n            cylinder(h=2, r=10, $fn=6);\n        \n        // Hollow center\n        color(rhubarb_pink) \n            cylinder(h=2.1, r=3, $fn=6);\n        \n        // Fibrous strands\n        for(i = [0:60:359]) {\n            rotate([0, 0, i]) \n                translate([6, 0, 0]) \n                    cube([1, 1, 2.1], center=true);\n        }\n    }\n}\n\n// Base assembly\ntranslate([0, 0, 0]) \n    rhubarb_stalk();\n\ntranslate([0, 0, 80]) \n    rhubarb_leaf();\n\n// Optional cross-section showing internal structure\ntranslate([25, 0, 40]) \n    rhubarb_cross_section();",
    "renders": true
  },
  {
    "food_item": "mushroom",
    "openscad_code": "// Realistic 3D printable mushroom food model\n// Dimensions: ~70mm height, ~50mm cap diameter\n\n// Colors\ncap_color = [0.92, 0.25, 0.18];  // Reddish brown\nstem_color = [0.95, 0.90, 0.85];  // Off-white\ngill_color = [0.88, 0.82, 0.75];  // Light beige\n\n// Parameters\n$fn = 32;\ncap_height = 25;\ncap_radius = 25;\nstem_height = 40;\nstem_radius = 8;\ngill_depth = 3;\n\n// Helper module for rounded edges\nmodule rounded_cube(size, radius) {\n    hull() {\n        for(dx = [0, size[0]-radius*2])\n            for(dy = [0, size[1]-radius*2])\n                for(dz = [0, size[2]-radius*2])\n                    translate([dx+radius, dy+radius, dz+radius])\n                        sphere(r=radius);\n    }\n}\n\n// Create mushroom cap with texture\nmodule mushroom_cap() {\n    color(cap_color) {\n        difference() {\n            // Main cap shape\n            scale([1, 1, 0.75])\n                sphere(r=cap_radius);\n            \n            // Underside indentation\n            translate([0, 0, -cap_height/2])\n                cylinder(h=cap_height/2, r1=cap_radius*0.9, r2=0);\n        }\n        \n        // Cap surface texture - small bumps\n        for(i = [0:20]) {\n            rotate([rand_vec(i*3,1)*10, rand_vec(i*7,1)*10, i*18])\n                translate([\n                    rand_vec(i*5,1)*cap_radius*0.7,\n                    rand_vec(i*11,1)*cap_radius*0.7,\n                    cap_height*0.6\n                ])\n                sphere(r=1+rand_vec(i*13,1)*0.5, $fn=8);\n        }\n    }\n}\n\n// Helper for pseudo-random values\nfunction rand_vec(seed, range) = (sin(seed*123.456)*0.5+0.5)*range*2-range;\n\n// Create gills under cap\nmodule mushroom_gills() {\n    color(gill_color) {\n        for(angle = [0:15:180]) {\n            rotate([0, 0, angle])\n                translate([0, 0, -cap_height/2+gill_depth/2])\n                    cube([cap_radius*0.8, 0.5, gill_depth], center=true);\n        }\n    }\n}\n\n// Create stem with taper and base\nmodule mushroom_stem() {\n    color(stem_color) {\n        union() {\n            // Main stem\n            cylinder(h=stem_height, r1=stem_radius, r2=stem_radius*0.8);\n            \n            // Base flare\n            translate([0, 0, -1])\n                cylinder(h=5, r1=stem_radius*1.3, r2=stem_radius);\n            \n            // Stem texture - vertical ridges\n            for(i = [0:11]) {\n                rotate([0, 0, i*30])\n                    translate([stem_radius*0.8, 0, 0])\n                        cube([stem_radius*0.2, 0.5, stem_height]);\n            }\n        }\n    }\n}\n\n// Assemble the complete mushroom\nunion() {\n    // Stem\n    mushroom_stem();\n    \n    // Cap positioned on stem\n    translate([0, 0, stem_height])\n        mushroom_cap();\n    \n    // Gills under cap\n    translate([0, 0, stem_height])\n        mushroom_gills();\n}",
    "renders": true
  },
  {
    "food_item": "seaweed",
    "openscad_code": "// Seaweed sheet with realistic texture and wavy edges\n// Designed for 3D printing - no overhangs, 0.8mm thickness\n\n// Main parameters\nsheet_length = 80;\nsheet_width = 50;\nsheet_thickness = 0.8;\nwave_amplitude = 3;\nwave_frequency = 8;\n\n// Color for roasted seaweed (dark green-black)\ncolor([0.1, 0.15, 0.05])\n\n// Main seaweed sheet with wavy edges\ndifference() {\n    // Base sheet\n    union() {\n        // Central flat portion\n        translate([0, 0, -sheet_thickness/2])\n            cube([sheet_length - 4, sheet_width - 4, sheet_thickness], center=true);\n        \n        // Create wavy edges\n        for(i = [0:wave_frequency-1]) {\n            // Long edges\n            translate([i * (sheet_length/wave_frequency) - sheet_length/2 + 2, sheet_width/2 - 1, 0])\n                rotate([0, 0, 45])\n                scale([1, 0.5, 1])\n                cylinder(h=sheet_thickness, r1=wave_amplitude/2, r2=wave_amplitude/2);\n            \n            translate([i * (sheet_length/wave_frequency) - sheet_length/2 + 2, -sheet_width/2 + 1, 0])\n                rotate([0, 0, -45])\n                scale([1, 0.5, 1])\n                cylinder(h=sheet_thickness, r1=wave_amplitude/2, r2=wave_amplitude/2);\n            \n            // Short edges\n            translate([sheet_length/2 - 1, i * (sheet_width/wave_frequency) - sheet_width/2 + 2, 0])\n                rotate([0, 0, -45])\n                scale([0.5, 1, 1])\n                cylinder(h=sheet_thickness, r1=wave_amplitude/2, r2=wave_amplitude/2);\n            \n            translate([-sheet_length/2 + 1, i * (sheet_width/wave_frequency) - sheet_width/2 + 2, 0])\n                rotate([0, 0, 45])\n                scale([0.5, 1, 1])\n                cylinder(h=sheet_thickness, r1=wave_amplitude/2, r2=wave_amplitude/2);\n        }\n    }\n    \n    // Cut out some holes to simulate seaweed texture\n    for(x = [-sheet_length/2 + 5:5:sheet_length/2 - 5]) {\n        for(y = [-sheet_width/2 + 5:5:sheet_width/2 - 5]) {\n            translate([x + sin(x*3)*1.2, y + cos(y*2)*1.2, 0])\n                cylinder(h=sheet_thickness+1, r=0.3 + 0.2*sin(x+y), $fn=6);\n        }\n    }\n}\n\n// Add some surface texture with raised bumps\ncolor([0.15, 0.2, 0.08])\nunion() {\n    for(i = [1:20]) {\n        angle = i * 137.5;\n        radius = sqrt(i) * 2.5;\n        tx = cos(angle) * radius;\n        ty = sin(angle) * radius;\n        if(abs(tx) < sheet_length/2 - 3 && abs(ty) < sheet_width/2 - 3) {\n            translate([tx, ty, sheet_thickness/2])\n                scale([1, 1, 0.3])\n                sphere(r=0.3 + 0.2*(sin(i*2) + 1)/2);\n        }\n    }\n    \n    // Add some wrinkles/folds\n    for(i = [0:3]) {\n        rotate([0, 0, i * 45])\n        translate([sin(i*0.7)*sheet_length/4, cos(i*0.5)*sheet_width/4, 0])\n            scale([sheet_length/8, 0.8, 0.4])\n            rotate([90, 0, 0])\n            cylinder(h=sheet_width/4, r1=sheet_thickness*2, r2=sheet_thickness*0.5);\n    }\n}\n\n// Edge fraying detail\ncolor([0.08, 0.12, 0.03])\nfor(i = [0:30]) {\n    angle = i * 12;\n    tx = cos(angle) * (sheet_length/2 + wave_amplitude/2);\n    ty = sin(angle) * (sheet_width/2 + wave_amplitude/2);\n    if(abs(tx) < sheet_length/2 + 2 && abs(ty) < sheet_width/2 + 2) {\n        translate([tx, ty, 0])\n            rotate([0, 0, angle + 90])\n            scale([0.5, 1, 0.8])\n            cylinder(h=sheet_thickness, r1=0.2, r2=0.5);\n    }\n}",
    "renders": true
  },
  {
    "food_item": "kombu",
    "openscad_code": "// Kombu (dried kelp) strip\n// 3D printable model, ~75 mm long, 25 mm wide, 2 mm thick\n\n// Parameters\nkombu_len = 75;\nkombu_wid = 25;\nkombu_thk = 2;\nedge_wave_h = 1.5;\nvein_depth = 0.3;\npore_d = 0.6;\npore_h = 0.2;\ncolor_kombu = [0.15, 0.22, 0.10];\n\nmodule kombu_strip() {\n    difference() {\n        // Main flat body\n        color(color_kombu)\n        translate([0, 0, kombu_thk/2])\n        cube([kombu_len, kombu_wid, kombu_thk], center = true);\n\n        // Taper ends slightly\n        translate([kombu_len/2 + 1, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h=kombu_wid*1.2, r=kombu_wid/2, center=true);\n        translate([-kombu_len/2 - 1, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h=kombu_wid*1.2, r=kombu_wid/2, center=true);\n    }\n}\n\nmodule edge_waves() {\n    for (i = [-kombu_len/2 + 2 : 4 : kombu_len/2 - 2]) {\n        translate([i, 0, 0])\n        difference() {\n            color(color_kombu)\n            translate([0, kombu_wid/2, kombu_thk/2])\n            rotate([90, 0, 0])\n            cylinder(h=edge_wave_h, r=edge_wave_h, center=true, $fn=16);\n            translate([0, kombu_wid/2, -1])\n            cube([5, 5, 5], center=true);\n        }\n        translate([i, 0, 0])\n        mirror([0, 1, 0])\n        difference() {\n            color(color_kombu)\n            translate([0, kombu_wid/2, kombu_thk/2])\n            rotate([90, 0, 0])\n            cylinder(h=edge_wave_h, r=edge_wave_h, center=true, $fn=16);\n            translate([0, kombu_wid/2, -1])\n            cube([5, 5, 5], center=true);\n        }\n    }\n}\n\nmodule central_vein() {\n    color(color_kombu)\n    translate([0, 0, kombu_thk - vein_depth/2])\n    cube([kombu_len*0.9, kombu_wid*0.08, vein_depth], center=true);\n}\n\nmodule surface_pores() {\n    for (x = [-kombu_len/2 + 3 : 3 : kombu_len/2 - 3]) {\n        for (y = [-kombu_wid/2 + 2 : 2 : kombu_wid/2 - 2]) {\n            if (y > -kombu_wid*0.15 || y < kombu_wid*0.15) {\n                translate([x, y, kombu_thk - pore_h])\n                cylinder(h=pore_h + 0.1, d=pore_d, $fn=8);\n            }\n        }\n    }\n}\n\nmodule kombu() {\n    union() {\n        kombu_strip();\n        edge_waves();\n        central_vein();\n        surface_pores();\n    }\n}\n\nkombu();",
    "renders": true
  },
  {
    "food_item": "nori",
    "openscad_code": "// Realistic Nori Sheet with Seaweed Texture\n// Medium complexity model - 50-100mm size range\n\nmodule nori_sheet_base() {\n    // Main nori body - thin rectangular sheet\n    color([0.1, 0.15, 0.05])\n    linear_extrude(height = 0.5, center = true)\n        square([80, 90], center = true);\n}\n\nmodule nori_edge_tears() {\n    // Create realistic torn edges with varying heights\n    color([0.08, 0.12, 0.04])\n    for(i = [0:5:360]) {\n        rotate([0, 0, i])\n        translate([40 + sin(i*3)*2, 0, 0.25])\n            cylinder(h = 0.8, r1 = 2 + sin(i)*1, r2 = 0.5, $fn = 8);\n    }\n    \n    for(i = [0:5:360]) {\n        rotate([0, 0, i])\n        translate([-40 - sin(i*3)*2, 0, 0.25])\n            cylinder(h = 0.8, r1 = 2 + cos(i)*1, r2 = 0.5, $fn = 8);\n    }\n}\n\nmodule seaweed_texture() {\n    // Create subtle bumpy texture on surface\n    color([0.12, 0.18, 0.06])\n    for(x = [-35:5:35]) {\n        for(y = [-40:5:40]) {\n            translate([x + sin(x*y)*0.5, y + cos(x*y)*0.5, 0.75])\n                sphere(d = 0.8 + sin(x/5)*0.3, $fn = 8);\n        }\n    }\n}\n\nmodule surface_lines() {\n    // Add characteristic linear texture of nori\n    color([0.05, 0.1, 0.03])\n    for(y = [-40:2:40]) {\n        rotate([90, 0, 0])\n        translate([0, y, 0.5])\n            cylinder(h = 80, r = 0.1, $fn = 6);\n    }\n    \n    for(x = [-35:2:35]) {\n        rotate([90, 0, 90])\n        translate([x, 0, 0.5])\n            cylinder(h = 90, r = 0.1, $fn = 6);\n    }\n}\n\nmodule corner_folds() {\n    // Add slight folding at corners for realism\n    color([0.08, 0.13, 0.04])\n    translate([35, 40, 0])\n        rotate([5, 0, 5])\n        cube([8, 8, 1]);\n    \n    translate([-35, 40, 0])\n        rotate([5, 0, -5])\n        cube([8, 8, 1]);\n    \n    translate([35, -40, 0])\n        rotate([-5, 0, -5])\n        cube([8, 8, 1]);\n    \n    translate([-35, -40, 0])\n        rotate([-5, 0, 5])\n        cube([8, 8, 1]);\n}\n\nmodule nori_complete() {\n    union() {\n        nori_sheet_base();\n        nori_edge_tears();\n        seaweed_texture();\n        surface_lines();\n        corner_folds();\n    }\n}\n\n// Render the complete nori sheet\nnori_complete();",
    "renders": true
  },
  {
    "food_item": "wakame",
    "openscad_code": "// Realistic 3D printable wakame seaweed fronds\n// Overall dimensions: ~70mm x 50mm x 8mm thick\n\n// Main module to generate wakame fronds\nmodule wakame_frond(length, width, thickness, curl_angle, wave_freq) {\n    // Create base frond shape as thin ellipsoid\n    scale([1, width/length, thickness/length])\n    rotate([curl_angle, 0, 0])\n    sphere(d=length, $fn=30);\n    \n    // Add wave ridges along frond\n    for(i=[-length/2 : length/wave_freq : length/2]) {\n        translate([i, 0, thickness/2])\n        rotate([0, 90, 0])\n        scale([0.1, 1, 0.1])\n        cylinder(h=width*1.2, d=thickness*2, $fn=6);\n    }\n    \n    // Add small bumps for texture\n    for(i=[-length/2 : length/6 : length/2]) {\n        for(j=[-width/2 : width/4 : width/2]) {\n            translate([i, j, thickness/2 + 0.3])\n            sphere(d=0.8, $fn=8);\n        }\n    }\n}\n\n// Create stem/rib structure\nmodule wakame_stem(length, thickness) {\n    color([0.1, 0.3, 0.15])\n    rotate([90, 0, 0])\n    cylinder(h=length, d=thickness, $fn=8);\n    \n    // Add smaller veins\n    for(i=[0 : 5 : length]) {\n        translate([0, 0, i])\n        rotate([0, 90, 0])\n        scale([0.3, 1, 0.3])\n        cylinder(h=length/3, d=thickness/2, $fn=6);\n    }\n}\n\n// Generate complete wakame piece\nmodule wakame_piece() {\n    // Main fronds in dark green\n    color([0.1, 0.35, 0.2])\n    union() {\n        // Primary frond\n        translate([0, 0, 2])\n        rotate([0, 0, 15])\n        wakame_frond(35, 20, 2, 15, 8);\n        \n        // Secondary fronds\n        translate([-10, 5, 1.5])\n        rotate([0, 0, -30])\n        wakame_frond(25, 15, 1.5, 20, 6);\n        \n        translate([8, 8, 1.8])\n        rotate([0, 0, 45])\n        wakame_frond(20, 12, 1.2, 10, 5);\n        \n        translate([-5, -8, 1.2])\n        rotate([0, 0, -45])\n        wakame_frond(18, 10, 1, 25, 4);\n    }\n    \n    // Lighter green younger fronds\n    color([0.2, 0.45, 0.25])\n    union() {\n        translate([12, -5, 1])\n        rotate([0, 0, 60])\n        wakame_frond(15, 8, 0.8, 5, 3);\n        \n        translate([-15, 2, 0.8])\n        rotate([0, 0, -75])\n        wakame_frond(12, 6, 0.6, 8, 3);\n    }\n    \n    // Central stem\n    translate([0, 0, 0])\n    wakame_stem(50, 3);\n}\n\n// Generate the complete model\nwakame_piece();",
    "renders": true
  },
  {
    "food_item": "dulse",
    "openscad_code": "// Dulse seaweed - a realistic 3D printable model\n// Size: ~80mm long, ~40mm wide, ~3mm thick\n\n// Main parameters\nwidth = 40;      // Overall width\nlength = 80;     // Overall length\nthickness = 3;   // Thickness for printing\nvein_thickness = 0.6;\nedge_wave = 4;\n\n// Create a single dulse leaf\nmodule dulse_leaf() {\n    color([0.5, 0.1, 0.15])  // Deep reddish-purple color\n    \n    union() {\n        // Main leaf body with organic shape\n        difference() {\n            // Base leaf shape\n            scale([1, 1.2, 1]) \n            cube([width, length, thickness], center=true);\n            \n            // Create ruffled edges by subtracting cylinders\n            for (i = [-length/2+5 : 10 : length/2-5]) {\n                translate([width/2 + edge_wave/2, i, 0])\n                    scale([1, 0.8, 1])\n                    cylinder(h=thickness+1, r=edge_wave, $fn=20);\n                    \n                translate([-width/2 - edge_wave/2, i, 0])\n                    scale([1, 0.8, 1])\n                    cylinder(h=thickness+1, r=edge_wave, $fn=20);\n            }\n        }\n        \n        // Central vein\n        translate([0, 0, thickness/2 - vein_thickness/2])\n            color([0.35, 0.08, 0.12])\n            cube([vein_thickness*2, length-10, vein_thickness], center=true);\n        \n        // Secondary veins branching from center\n        for (angle = [30, -30]) {\n            rotate([0, 0, angle]) {\n                for (offset = [-20, -10, 0, 10, 20]) {\n                    translate([offset/3, offset, thickness/2])\n                        color([0.4, 0.09, 0.13])\n                        cube([vein_thickness, 15, vein_thickness/2], center=true);\n                }\n            }\n        }\n        \n        // Small texture bumps for realistic surface\n        for (x = [-width/2+5 : 5 : width/2-5]) {\n            for (y = [-length/2+5 : 8 : length/2-5]) {\n                translate([x + sin(y*2)*2, y, thickness/2 + 0.2])\n                    scale([1, 1, 0.3])\n                    sphere(r=0.5, $fn=8);\n            }\n        }\n        \n        // Thin edge detailing\n        translate([0, 0, thickness/2])\n            linear_extrude(height=0.3)\n            offset(r=-1)\n            offset(r=1)\n            square([width-2, length-2], center=true);\n    }\n}\n\n// Create a torn/damaged edge effect\nmodule torn_edge() {\n    difference() {\n        dulse_leaf();\n        \n        // Random tears along edges\n        for (i = [1 : 5]) {\n            rotate([0, 0, i*73])\n            translate([width/2-3, 0, 0])\n                scale([1, 1.5, 2])\n                cylinder(h=thickness+1, r=2, $fn=6, center=true);\n        }\n    }\n}\n\n// Main assembly\nrotate([0, 0, 15])  // Natural resting angle\ntorn_edge();",
    "renders": true
  },
  {
    "food_item": "arame",
    "openscad_code": "// Arame seaweed - realistic style, medium complexity\n// Size: ~80mm length\n\nmodule strand_segment(radius, length, twist_angle) {\n    // Individual strand segment with slight twist\n    rotate([0, 0, twist_angle])\n        cylinder(h=length, r=radius, $fn=8);\n}\n\nmodule arame_strand(length, thickness, segments) {\n    // Create one arame strand with natural curves\n    for(i=[0:segments-1]) {\n        segment_length = length / segments;\n        twist = sin(i*15) * 5; // Natural twisting\n        offset_x = sin(i*0.3) * 3; // Gentle wave\n        offset_y = cos(i*0.2) * 2;\n        \n        translate([offset_x, offset_y, i*segment_length])\n            rotate([sin(i*0.1)*10, cos(i*0.15)*8, twist])\n                strand_segment(thickness, segment_length, i*2);\n    }\n}\n\nmodule texture_detail(pos_x, pos_y, pos_z) {\n    // Small bumps for seaweed texture\n    translate([pos_x, pos_y, pos_z])\n        scale([1, 1, 0.3])\n            sphere(r=0.4, $fn=6);\n}\n\nmodule arame_bundle(strands, base_radius) {\n    // Create a natural bundle of arame strands\n    union() {\n        for(i=[0:strands-1]) {\n            angle = i * (360/strands) + (rand(i)*10-5);\n            radius_offset = base_radius * (0.3 + rand(i+100)*0.7);\n            \n            rotate([0, 0, angle])\n                translate([radius_offset, 0, 0])\n                    rotate([90 + rand(i+50)*20-10, 0, 0])\n                        arame_strand(\n                            40 + rand(i+200)*40,  // length 40-80mm\n                            0.6 + rand(i+300)*0.4, // thickness\n                            8 + floor(rand(i+400)*4)  // segments\n                        );\n        }\n    }\n}\n\n// Random helper function for natural variation\nfunction rand(n) = (sin(n*12.9898 + 78.233) * 43758.5453) % 1;\n\n// Main arame model\ncolor([0.15, 0.35, 0.25])  // Dark green-brown seaweed color\ndifference() {\n    union() {\n        // Main bundle\n        arame_bundle(12, 15);\n        \n        // Additional loose strands\n        translate([10, 5, 0])\n            rotate([0, 0, 30])\n                arame_strand(30, 0.8, 6);\n        \n        translate([-8, -3, 5])\n            rotate([0, 0, -45])\n                arame_strand(35, 0.7, 7);\n                \n        // Root/base cluster\n        translate([0, 0, -2])\n            cylinder(h=4, r=8, $fn=12);\n    }\n    \n    // Remove bottom flat for printing\n    translate([0, 0, -3])\n        cube([200, 200, 3], center=true);\n}\n\n// Add texture details on some strands\ncolor([0.2, 0.4, 0.3])  // Slightly lighter texture color\nfor(i=[0:30]) {\n    translate([\n        rand(i*100)*80-40,\n        rand(i*200)*80-40,\n        rand(i*300)*70\n    ])\n        texture_detail(0, 0, 0);\n}",
    "renders": true
  },
  {
    "food_item": "hijiki",
    "openscad_code": "// Hijiki seaweed - realistic medium complexity model\n\nmodule hijiki_strand(length, thickness, curl) {\n    // Create a curled strand of hijiki\n    for(i = [0:5:length]) {\n        translate([sin(i * curl) * 3, cos(i * curl) * 3, i])\n            rotate([0, 0, i * curl * 10])\n                scale([1 + sin(i * 0.5) * 0.2, 1 + cos(i * 0.5) * 0.2, 1])\n                    cylinder(h = 2, r = thickness, $fn = 8);\n    }\n}\n\nmodule hijiki_branch() {\n    // Main stem\n    color([0.1, 0.1, 0.05])\n    union() {\n        // Central stem\n        rotate([90, 0, 0])\n            cylinder(h = 25, r1 = 1.5, r2 = 2, $fn = 6);\n        \n        // Side branches\n        for(i = [0:3]) {\n            rotate([90, 0, i * 120])\n                translate([0, 0, 5 + i * 6])\n                    rotate([0, -20 - i * 5, 0])\n                        cylinder(h = 8 - i, r1 = 1, r2 = 0.5, $fn = 6);\n        }\n        \n        // Branch tips with curled strands\n        for(i = [0:3]) {\n            rotate([90, 0, i * 120])\n                translate([0, 0, 12 + i * 6])\n                    hijiki_strand(8 - i * 1.5, 0.3, 0.3);\n        }\n    }\n}\n\nmodule hijiki_texture() {\n    // Create surface texture with small bumps\n    for(i = [0:360:30]) {\n        rotate([0, 0, i])\n            for(j = [0:2:8]) {\n                translate([j * 0.5, 0, j])\n                    rotate([90, 0, 0])\n                        sphere(0.2, $fn = 6);\n            }\n    }\n}\n\nmodule hijiki_main() {\n    color([0.08, 0.08, 0.03])\n    union() {\n        // Base cluster\n        for(i = [0:5]) {\n            rotate([0, 0, i * 72])\n                translate([sin(i * 72) * 8, cos(i * 72) * 8, 0])\n                    hijiki_branch();\n        }\n        \n        // Additional small pieces\n        for(i = [0:8]) {\n            rotate([0, 0, i * 45])\n                translate([sin(i * 45) * 15, cos(i * 45) * 15, 0])\n                    scale([0.5, 0.5, 0.7])\n                        hijiki_branch();\n        }\n        \n        // Central root piece\n        translate([0, 0, -2])\n            scale([1.2, 1.2, 0.5])\n                cylinder(h = 4, r1 = 5, r2 = 3, $fn = 8);\n    }\n}\n\n// Assembly\nhijiki_main();\n\n// Add some loose strands on top\nfor(i = [0:3]) {\n    rotate([0, 0, i * 90])\n        translate([sin(i * 90) * 10, cos(i * 90) * 10, 2])\n            hijiki_strand(12, 0.4, 0.4);\n}",
    "renders": true
  },
  {
    "food_item": "agar",
    "openscad_code": "// Agar Dessert with Fruit Cubes\n// Realistic style, medium complexity\n\n$fn = 32;\n\n// Main agar block dimensions\nblock_width = 60;\nblock_height = 45;\nblock_depth = 60;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Fruit cube dimensions\nfruit_size = 6;\nfruit_count = 12;\n\n// Colors\nagar_color = [0.9, 0.95, 0.8, 0.7];\nred_color = [0.9, 0.3, 0.3, 0.9];\norange_color = [0.9, 0.6, 0.2, 0.9];\ngreen_color = [0.3, 0.7, 0.3, 0.9];\n\n// Main agar block with rounded edges\nmodule agar_block() {\n    difference() {\n        // Outer rounded block\n        minkowski() {\n            cube([block_width, block_height, block_depth], center=true);\n            sphere(r=3);\n        }\n        \n        // Hollow center for material saving\n        translate([0, 0, 0])\n            cube([block_width - wall_thickness*2, block_height - wall_thickness*2, block_depth - wall_thickness*2], center=true);\n    }\n}\n\n// Create a single fruit cube with beveled edges\nmodule fruit_cube(color) {\n    color(color)\n    difference() {\n        // Main cube\n        cube([fruit_size, fruit_size, fruit_size], center=true);\n        \n        // Bevel edges slightly\n        for(i=[-1,1])\n        for(j=[-1,1])\n        for(k=[-1,1])\n            translate([i*(fruit_size/2-1), j*(fruit_size/2-1), k*(fruit_size/2-1)])\n                sphere(r=1.2);\n    }\n}\n\n// Generate random positions for fruit cubes\nmodule fruit_positions() {\n    // Pre-calculated positions for consistent results\n    positions = [\n        [-20, -15, -20], [0, -10, -15], [20, -12, -18],\n        [-15, 0, 0], [15, 5, 5], [-5, 8, -10],\n        [10, -5, 15], [-20, 10, 10], [25, 0, -5],\n        [0, 15, 20], [-10, -8, 5], [18, 12, 0]\n    ];\n    \n    colors = [red_color, orange_color, green_color];\n    \n    for(i = [0:fruit_count-1]) {\n        translate(positions[i]) {\n            fruit_cube(colors[i % 3]);\n        }\n    }\n}\n\n// Surface texture bubbles\nmodule surface_bubbles() {\n    color(agar_color)\n    for(i = [1:20]) {\n        theta = i * 137.5; // Golden angle\n        radius = 5 + (i * 2) % 15;\n        x = cos(theta) * radius;\n        z = sin(theta) * radius;\n        y = block_height/2 + 0.5;\n        \n        translate([x, y, z])\n            scale([1, 0.5, 1])\n                sphere(r=0.5 + (i % 3) * 0.3);\n    }\n}\n\n// Assemble the complete agar dessert\nunion() {\n    // Main agar block\n    color(agar_color)\n    agar_block();\n    \n    // Fruit cubes inside\n    fruit_positions();\n    \n    // Surface bubbles for texture\n    surface_bubbles();\n    \n    // Top surface slight waviness\n    difference() {\n        color(agar_color)\n        translate([0, 0, 0])\n            cube([block_width + 2, 2, block_depth + 2], center=true);\n        \n        // Create gentle waves\n        for(i = [-2:2]) {\n            for(j = [-2:2]) {\n                translate([i*12, 2, j*12])\n                    sphere(r=3 + (abs(i) + abs(j)) * 0.5);\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "food_item": "chickpea",
    "openscad_code": "// Realistic Chickpea (Garbanzo Bean) - Medium Complexity\n// Dimensions: ~65mm long, ~35mm wide, ~30mm thick\n// 3D printable without supports\n\n// Color definition for realistic chickpea\ncolor([0.82, 0.66, 0.42])  // Beige-brown\n\n// Main chickpea body module\nmodule chickpea_body() {\n    difference() {\n        // Main rounded bean shape\n        scale([1, 0.6, 0.5])\n        sphere(d=65, $fn=64);\n        \n        // Indentation on one side (characteristic of chickpea)\n        translate([-20, 0, 12])\n        rotate([0, 45, 0])\n        scale([1.2, 1, 0.3])\n        sphere(d=40, $fn=32);\n    }\n}\n\n// Surface texture module - small bumps\nmodule surface_bumps() {\n    for(i = [0:5:360]) {\n        rotate([0, 0, i]) {\n            translate([20, 0, 0])\n            rotate([90, 0, 0])\n            cylinder(h=2, r=1.5, $fn=8);\n            \n            translate([15, 0, 5])\n            rotate([90, 0, 0])\n            cylinder(h=1.5, r=1, $fn=8);\n            \n            translate([25, 0, -5])\n            rotate([90, 0, 0])\n            cylinder(h=1.8, r=1.2, $fn=8);\n        }\n    }\n}\n\n// Ridge detail along the edge\nmodule edge_ridge() {\n    for(angle = [0:15:360]) {\n        rotate([0, 0, angle])\n        translate([28, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h=3, r=2, $fn=6);\n    }\n}\n\n// Tiny seed texture dots\nmodule seed_texture() {\n    // Randomly placed small spheres for realistic texture\n    translate([5, 15, 5]) sphere(d=1.5, $fn=8);\n    translate([-10, 10, 8]) sphere(d=1.2, $fn=8);\n    translate([8, -12, 3]) sphere(d=1.8, $fn=8);\n    translate([-15, -8, 6]) sphere(d=1.3, $fn=8);\n    translate([12, 8, -5]) sphere(d=1.4, $fn=8);\n}\n\n// Main assembly\nunion() {\n    // Core chickpea shape\n    chickpea_body();\n    \n    // Surface details\n    translate([0, 0, 0])\n    scale([0.95, 0.95, 0.95])\n    union() {\n        surface_bumps();\n        edge_ridge();\n        seed_texture();\n        \n        // Mirror the texture to other side\n        mirror([1, 0, 0])\n        union() {\n            surface_bumps();\n            edge_ridge();\n            seed_texture();\n        }\n    }\n    \n    // Small protrusion at one end (pointy tip)\n    translate([-28, 0, 0])\n    rotate([0, 0, 90])\n    scale([0.3, 0.3, 0.3])\n    cylinder(h=8, r1=2, r2=0.5, $fn=16);\n    \n    // Slight flattening on bottom for stability\n    translate([0, 0, -15])\n    scale([1, 1, 0.1])\n    sphere(d=60, $fn=32);\n}",
    "renders": true
  },
  {
    "food_item": "soybean",
    "openscad_code": "// Soybean pod with beans inside - realistic style, medium complexity\n// Designed for 3D printing without supports\n\n// Main parameters\n$fn = 32;\npod_length = 70;\npod_width = 18;\npod_thickness = 8;\nbean_diameter = 6;\nbeans_per_pod = 3;\nwall_thickness = 1.2;\n\n// Soybean pod module\nmodule soybean_pod() {\n    // Pod shell - hollow with rounded edges\n    difference() {\n        // Outer shell\n        hull() {\n            // Main body\n            scale([1, 0.6, 0.4])\n                cylinder(h=pod_length, d=pod_width);\n            \n            // Rounded ends\n            translate([0, 0, pod_length])\n                scale([1, 0.6, 0.4])\n                    sphere(d=pod_width);\n            translate([0, 0, 0])\n                scale([1, 0.6, 0.4])\n                    sphere(d=pod_width);\n        }\n        \n        // Hollow interior\n        hull() {\n            // Inner cavity\n            scale([1, 0.65, 0.45])\n                cylinder(h=pod_length - 2, d=pod_width - 2*wall_thickness);\n            \n            // Rounded inner ends\n            translate([0, 0, pod_length - 1])\n                scale([1, 0.65, 0.45])\n                    sphere(d=pod_width - 2*wall_thickness);\n            translate([0, 0, 1])\n                scale([1, 0.65, 0.45])\n                    sphere(d=pod_width - 2*wall_thickness);\n        }\n    }\n    \n    // Pod seam detail\n    translate([0, pod_width*0.3, pod_length/2])\n        rotate([90, 0, 0])\n            cylinder(h=pod_length, d=wall_thickness*0.5, $fn=8);\n    \n    // Surface texture - subtle bumps\n    for (i = [1:10]) {\n        for (j = [1:4]) {\n            rotate([0, 0, i*36])\n                translate([pod_width*0.25, 0, j*pod_length/5])\n                    scale([0.8, 0.6, 0.3])\n                        sphere(d=2);\n        }\n    }\n}\n\n// Individual soybean bean module\nmodule soybean_bean() {\n    color(\"#C4A484\")\n    scale([1, 0.7, 0.5])\n        sphere(d=bean_diameter);\n    \n    // Bean hilum (scar)\n    color(\"#8B7355\")\n    translate([0, bean_diameter*0.3, 0])\n        rotate([90, 0, 0])\n            cylinder(h=0.5, d=1.5);\n}\n\n// Complete soybean with pod and beans\nmodule complete_soybean() {\n    // Pod in realistic green-brown color\n    color(\"#8FBC8F\")\n    soybean_pod();\n    \n    // Beans inside pod\n    for (i = [1:beans_per_pod]) {\n        translate([0, pod_width*0.2, i*pod_length/(beans_per_pod+1)])\n            rotate([0, 90, 0])\n                soybean_bean();\n    }\n}\n\n// Create the model\nrotate([90, 0, 0])\n    complete_soybean();",
    "renders": true
  },
  {
    "food_item": "blackbean",
    "openscad_code": "// Black bean - realistic style, medium complexity\n// Approx 15mm long, 8mm wide, 6mm thick\n\ncolor([0.15, 0.08, 0.05]) // Dark brown-black color\n\nmodule black_bean() {\n    difference() {\n        // Main bean body - slightly flattened ellipsoid\n        scale([1, 0.7, 0.45]) sphere(d=10, $fn=50);\n        \n        // Central seam/groove\n        translate([0, 0, 4.4])\n            rotate([90, 0, 0])\n            linear_extrude(height=10, center=true)\n                polygon(points=[[-5,0], [5,0], [0,-0.5]]);\n    }\n    \n    // Add slight dimple at one end\n    translate([4.8, 0, 0])\n        rotate([0, 90, 0])\n        scale([1, 1, 0.8])\n        sphere(d=1.5, $fn=20);\n    \n    // Add slight dimple at other end\n    translate([-4.8, 0, 0])\n        rotate([0, 90, 0])\n        scale([1, 1, 0.8])\n        sphere(d=1.5, $fn=20);\n    \n    // Surface texture - small imperfections\n    for(i=[-4:4]) {\n        for(j=[-2:2]) {\n            if((i+j)%2==0) {\n                translate([i*1.2, j*1.2, 2.3+sin(i*45)*0.2])\n                    sphere(d=0.3, $fn=8);\n            }\n        }\n    }\n}\n\n// Create single bean\nblack_bean();",
    "renders": true
  },
  {
    "food_item": "pintobean",
    "openscad_code": "// Pinto Bean - Realistic Style\n// Medium complexity 3D printable model\n\ncolor([0.85, 0.65, 0.45])  // Natural pinto bean color\n\nmodule pinto_bean_body() {\n    // Main bean body - elliptical shape\n    difference() {\n        scale([1.2, 0.7, 0.4])\n            sphere(d=50, $fn=50);\n        \n        // Flatten bottom slightly for stable printing\n        translate([0, 0, -10])\n            cube([100, 100, 20], center=true);\n    }\n}\n\nmodule bean_dent() {\n    // Central dent along bean\n    rotate([90, 0, 0])\n        translate([0, 0, -5])\n            scale([0.05, 1, 0.1])\n                cylinder(h=30, d=40, $fn=20);\n}\n\nmodule brown_spots() {\n    // Characteristic brown spots on pinto beans\n    for(i = [0:7]) {\n        rotate([0, 0, i*45])\n            translate([12 + (i%3)*3, 0, 2 + sin(i*30)*2])\n                scale([1, 0.7, 0.3])\n                    sphere(d=6, $fn=8);\n    }\n    \n    for(i = [0:5]) {\n        rotate([0, 0, i*60 + 30])\n            translate([-10 + cos(i*25)*2, 0, -1 + cos(i*40)*1.5])\n                scale([0.8, 0.6, 0.2])\n                    sphere(d=4, $fn=6);\n    }\n}\n\nmodule surface_texture() {\n    // Subtle bump texture for realistic feel\n    for(x = [-20:5:20]) {\n        for(y = [-12:4:12]) {\n            if(x*x/400 + y*y/144 < 0.9) {\n                translate([x, y, 0])\n                    rotate([90, 0, 0])\n                        cylinder(h=0.5, d=1.5, $fn=6);\n            }\n        }\n    }\n}\n\nmodule bean_tip() {\n    // Slight point at one end\n    translate([22, 0, 0])\n        rotate([0, 90, 0])\n            scale([0.3, 0.3, 0.2])\n                cylinder(h=8, d1=10, d2=4, $fn=10);\n}\n\nunion() {\n    // Main bean body\n    pinto_bean_body();\n    \n    // Central dent\n    difference() {\n        color([0.9, 0.7, 0.5]) children();\n        bean_dent();\n    }\n    \n    // Brown spots\n    color([0.6, 0.4, 0.25]) brown_spots();\n    \n    // Surface texture\n    color([0.87, 0.67, 0.47]) surface_texture();\n    \n    // Pointed tip\n    color([0.85, 0.65, 0.45]) bean_tip();\n}\n\n// Scale to reasonable size (about 60mm long)\nscale([1.2, 1.2, 1.2]);",
    "renders": true
  },
  {
    "food_item": "kidneybean",
    "openscad_code": "// Kidney Bean - Realistic Style, Medium Complexity\n// Size: ~60mm length, 30mm width, 15mm thickness\n\ncolor([0.6, 0.2, 0.15]) {\n    // Main bean body - kidney shape\n    difference() {\n        // Outer kidney shape\n        hull() {\n            // Top lobe\n            translate([-15, 0, 7]) \n                scale([1.2, 1, 0.8]) \n                sphere(d=30, $fn=20);\n            \n            // Bottom lobe (larger)\n            translate([15, 0, 0]) \n                scale([1.5, 1.2, 1]) \n                sphere(d=35, $fn=20);\n        }\n        \n        // Center indentation\n        translate([0, 0, -5]) \n            rotate([0, 90, 0]) \n            cylinder(h=50, d1=15, d2=8, $fn=16);\n        \n        // Flatten bottom slightly\n        translate([0, 0, -2]) \n            cube([100, 100, 4], center=true);\n    }\n}\n\n// Bean surface texture - small bumps\ncolor([0.5, 0.15, 0.1]) {\n    for (i = [-30:5:30]) {\n        for (j = [-15:5:15]) {\n            if (i*i + j*j < 400) {\n                translate([i, j, 12 + 0.5*sin(i*3) + 0.5*cos(j*3)]) \n                    sphere(d=1.5, $fn=6);\n            }\n        }\n    }\n}\n\n// Bean seam line\ncolor([0.4, 0.12, 0.08]) {\n    difference() {\n        hull() {\n            translate([-20, 0, 7]) \n                sphere(d=2, $fn=8);\n            translate([20, 0, 3]) \n                sphere(d=2, $fn=8);\n        }\n        // Remove half to make it a ridge\n        translate([0, -2, 0]) \n            cube([50, 4, 15], center=true);\n    }\n}\n\n// Small indentations for realism\nmodule indent(x, y, z, size) {\n    translate([x, y, z]) \n        sphere(d=size, $fn=8);\n}\n\ncolor([0.35, 0.1, 0.05]) {\n    indent(-10, 5, 8, 3);\n    indent(8, -3, 5, 2.5);\n    indent(-5, -8, 6, 2);\n}\n\n// Slight tapering at ends\ndifference() {\n    translate([-35, 0, 5]) \n        sphere(d=8, $fn=12);\n    translate([-35, 0, -2]) \n        cube([16, 16, 16], center=true);\n}\n\ndifference() {\n    translate([35, 0, 2]) \n        sphere(d=12, $fn=12);\n    translate([35, 0, -2]) \n        cube([24, 24, 16], center=true);\n}",
    "renders": true
  },
  {
    "food_item": "navybean",
    "openscad_code": "// Navy bean - medium complexity realistic style\n// Overall dimensions: ~80mm length, ~20mm width, ~15mm height\n\n// Main bean body with slight curvature\nmodule bean_body() {\n    color(\"beige\") \n    difference() {\n        // Main ellipsoid shape\n        scale([1, 0.5, 0.35]) \n        sphere(d=40, $fn=64);\n        \n        // Flatten bottom slightly\n        translate([0, 0, -6.8])\n        cube([80, 40, 5], center=true);\n    }\n}\n\n// Bean seam along center\nmodule bean_seam() {\n    color([0.85, 0.82, 0.75])\n    for(i = [-20:5:20]) {\n        translate([i, 0, 6.8])\n        rotate([90, 0, 0])\n        scale([0.8, 0.2, 0.2])\n        cylinder(h=2, r1=2, r2=1, $fn=8);\n    }\n}\n\n// Surface texture - small indentations\nmodule surface_texture() {\n    color(\"beige\")\n    difference() {\n        children();\n        // Random small dimples on surface\n        for(i = [1:8]) {\n            rotate([0, rand(i)*10-5, rand(i+10)*360])\n            translate([rand(i+20)*30-15, rand(i+30)*10-5, 6])\n            sphere(d=rand(i+40)*1.5+0.5, $fn=8);\n        }\n    }\n}\n\n// Helper function for pseudo-random numbers\nfunction rand(x) = (sin(x*123.456)+1)/2;\n\n// Bean ends - slightly tapered\nmodule bean_ends() {\n    color(\"beige\")\n    union() {\n        // Front end\n        translate([20, 0, 0])\n        rotate([0, 90, 0])\n        scale([0.5, 0.5, 0.35])\n        cylinder(h=5, r1=0, r2=20, $fn=32);\n        \n        // Back end\n        translate([-20, 0, 0])\n        rotate([0, -90, 0])\n        scale([0.5, 0.5, 0.35])\n        cylinder(h=5, r1=0, r2=20, $fn=32);\n    }\n}\n\n// Minor imperfections for realism\nmodule imperfections() {\n    color([0.9, 0.85, 0.78])\n    union() {\n        // Small dark spots\n        for(i = [1:5]) {\n            translate([rand(i*2)*40-20, rand(i*3)*8-4, 6.5])\n            sphere(d=0.8, $fn=8);\n        }\n        \n        // Slight discoloration patches\n        translate([5, 2, 6.8])\n        scale([1, 0.6, 0.1])\n        rotate([0, 0, 30])\n        sphere(d=8, $fn=16);\n    }\n}\n\n// Assemble the navy bean\nunion() {\n    surface_texture() {\n        union() {\n            bean_body();\n            bean_ends();\n        }\n    }\n    bean_seam();\n    imperfections();\n}",
    "renders": true
  },
  {
    "food_item": "cannellini",
    "openscad_code": "// Cannellini Bean Model\n// Realistic medium-complexity 3D printable bean\n\n// Parameters\nbean_length = 25;\nbean_width = 12;\nbean_height = 8;\nwall_thickness = 1.2;\nseed_count = 8;\n\n// Main bean body module\nmodule bean_body() {\n    color([0.95, 0.9, 0.82]) {\n        // Central bean shape using ellipsoid\n        scale([1, 0.7, 0.5]) sphere(d = bean_length);\n        \n        // Add subtle ridge along top\n        translate([0, 0, bean_height/2 - 0.5])\n            scale([1, 0.1, 0.05])\n                sphere(d = bean_length * 0.9);\n    }\n}\n\n// Bean seam detail\nmodule bean_seam() {\n    color([0.85, 0.8, 0.72]) {\n        // Subtle indentation along center\n        translate([0, 0, -1])\n            scale([1, 0.02, 0.3])\n                cube([bean_length * 0.9, bean_width * 0.8, bean_height], center = true);\n    }\n}\n\n// Bean tip detail\nmodule bean_tip() {\n    color([0.9, 0.85, 0.77]) {\n        // Slight point at ends\n        translate([bean_length/2 - 1, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h = 2, r1 = 2.5, r2 = 0);\n        \n        translate([-bean_length/2 + 1, 0, 0])\n            rotate([0, -90, 0])\n                cylinder(h = 2, r1 = 2.5, r2 = 0);\n    }\n}\n\n// Surface texture - slight dimples\nmodule bean_texture() {\n    color([0.92, 0.87, 0.79]) {\n        for(i = [1:seed_count]) {\n            rotate([0, 0, i * 45]) {\n                translate([bean_length/3 * sin(i*20), bean_width/3 * cos(i*20), -1])\n                    sphere(d = 1.5);\n                translate([-bean_length/3 * sin(i*20), -bean_width/3 * cos(i*20), -1])\n                    sphere(d = 1.5);\n            }\n        }\n    }\n}\n\n// Hollowing for 3D printing\nmodule hollow_bean() {\n    difference() {\n        union() {\n            bean_body();\n            bean_tip();\n        }\n        \n        // Internal hollow space\n        scale([0.8, 0.6, 0.4])\n            sphere(d = bean_length);\n        \n        // Drainage hole at bottom\n        translate([0, 0, -bean_height/2 - 1])\n            cylinder(h = 2, r = 2);\n    }\n}\n\n// Assembly\nunion() {\n    // Main bean structure\n    difference() {\n        hollow_bean();\n        bean_seam();\n    }\n    \n    // Surface details\n    translate([0, 0, bean_height/2 - 1])\n        bean_texture();\n}",
    "renders": true
  },
  {
    "food_item": "lima",
    "openscad_code": "// Realistic Lima Bean\n// Medium complexity, 3D printable\n\n// Parameters\nbean_length = 45;\nbean_width = 30;\nbean_thickness = 12;\nwall_thickness = 1.5;\nseed_depth = 1.5;\n\n// Colors\nlima_color = [0.85, 0.78, 0.65];\nhilum_color = [0.4, 0.35, 0.3];\n\n// Main bean body\nmodule bean_body() {\n    difference() {\n        // Main ellipsoid shape\n        scale([1, 0.7, 0.4])\n        sphere(d = bean_length, $fn = 64);\n        \n        // Flatten the bottom slightly\n        translate([0, 0, -bean_length * 0.2])\n        cube([bean_length * 1.5, bean_length * 1.5, bean_length * 0.2], center = true);\n    }\n}\n\n// Create the bean seam\nmodule bean_seam() {\n    // Central ridge along the length\n    translate([0, 0, bean_thickness * 0.15])\n    scale([1.05, 0.1, 0.15])\n    sphere(d = bean_length * 0.95, $fn = 64);\n}\n\n// Hilum (seed attachment point)\nmodule hilum() {\n    color(hilum_color)\n    translate([-bean_length * 0.45, 0, bean_thickness * 0.25])\n    rotate([0, 90, 0])\n    cylinder(h = 2, d1 = 3, d2 = 1.5, $fn = 16);\n}\n\n// Surface texture pattern\nmodule surface_texture() {\n    // Small indentations for texture\n    for (i = [-4:4]) {\n        for (j = [-2:2]) {\n            if (i*i + j*j < 20) {\n                translate([i * 4, j * 4, bean_thickness * 0.5])\n                sphere(d = seed_depth * 2, $fn = 8);\n            }\n        }\n    }\n}\n\n// Create the hollow interior\nmodule hollow_interior() {\n    scale([0.85, 0.6, 0.3])\n    sphere(d = bean_length * 0.9, $fn = 64);\n}\n\n// Generate the complete lima bean\ncolor(lima_color)\ndifference() {\n    union() {\n        // Main body\n        bean_body();\n        \n        // Seam\n        bean_seam();\n        \n        // Hilum\n        hilum();\n    }\n    \n    // Hollow out interior\n    translate([0, 0, -bean_thickness * 0.1])\n    hollow_interior();\n    \n    // Surface texture (subtract spheres)\n    surface_texture();\n}",
    "renders": true
  },
  {
    "food_item": "mung",
    "openscad_code": "// Mung bean sprout model - realistic style, medium complexity\n// Overall dimensions: ~60mm long, 15mm wide at bean body\n\n// Colors\n$fn = 32;\n\n// Bean body module\nmodule bean_body() {\n    color([0.6, 0.85, 0.55]) {\n        // Main bean shape using ellipsoid\n        scale([1, 0.7, 1.4]) \n        sphere(d=8);\n        \n        // Slight indentation on one side\n        translate([0, 3.5, 0])\n        rotate([90, 0, 0])\n        cylinder(h=6, d1=5, d2=0, $fn=16);\n    }\n}\n\n// Root hair module\nmodule root_hairs() {\n    color([0.95, 0.95, 0.9]) {\n        // Multiple thin root hairs\n        for(i=[0:30]) {\n            rotate([0, 0, i*12])\n            translate([0, 0, -5 - i*0.3])\n            rotate([90 + sin(i*15)*5, 0, 0])\n            cylinder(h=2 + sin(i*8)*0.5, d=0.3 + sin(i*7)*0.1);\n        }\n    }\n}\n\n// Main sprout stem\nmodule sprout_stem() {\n    color([0.9, 1, 0.75]) {\n        // Main stem\n        translate([0, 0, 4])\n        rotate([0, 0, 5])\n        cylinder(h=40, d1=2.5, d2=1.5);\n        \n        // Secondary smaller stem\n        translate([0, -1, 15])\n        rotate([10, 0, 15])\n        cylinder(h=25, d1=1.8, d2=1);\n    }\n}\n\n// Tiny leaves at sprout tip\nmodule tiny_leaves() {\n    color([0.7, 1, 0.5]) {\n        // First leaf\n        translate([0, 0.5, 43])\n        rotate([-20, 0, 0])\n        scale([1, 0.3, 0.8])\n        sphere(d=4);\n        \n        // Second leaf\n        translate([0, -0.5, 43])\n        rotate([20, 0, 180])\n        scale([1, 0.3, 0.8])\n        sphere(d=4);\n    }\n}\n\n// Surface texture on bean\nmodule bean_texture() {\n    color([0.5, 0.8, 0.45]) {\n        // Small surface bumps\n        for(i=[0:20]) {\n            rotate([0, i*18, i*36])\n            translate([3.5, 0, sin(i*45)*2])\n            sphere(d=0.8);\n        }\n    }\n}\n\n// Complete mung bean sprout\nmodule mung_sprout() {\n    union() {\n        // Bean body with texture\n        union() {\n            bean_body();\n            bean_texture();\n        }\n        \n        // Root hairs below bean\n        translate([0, 0, -4])\n        root_hairs();\n        \n        // Sprout growing upward\n        sprout_stem();\n        \n        // Leaves at the top\n        tiny_leaves();\n    }\n}\n\n// Create sprout with slight rotation for natural look\nrotate([0, 10, 5])\nmung_sprout();",
    "renders": true
  },
  {
    "food_item": "adzuki",
    "openscad_code": "// Adzuki Bean Model - Realistic Style, Medium Complexity\n// Overall size: ~60mm length\n\n$fn = 64;\n\n// Main bean body\nmodule bean_body() {\n    color(\"#8B4513\")  // Dark reddish brown for dried adzuki\n    union() {\n        // Main ellipsoid shape\n        scale([1, 0.7, 0.4])\n        sphere(15);\n        \n        // Add slight bulge in middle\n        translate([0, 0, 2])\n        scale([0.9, 0.6, 0.3])\n        sphere(12);\n    }\n}\n\n// Bean seam ridge\nmodule bean_seam() {\n    color(\"#6B3E26\")  // Darker brown for seam\n    for(i = [-1:0.2:1]) {\n        rotate([0, i * 10, 0])\n        translate([i * 15, 0, 0])\n        scale([0.1, 0.8, 0.05])\n        sphere(5);\n    }\n}\n\n// Surface texture - small bumps\nmodule bean_texture() {\n    color(\"#8B4513\")\n    for(i = [0:15]) {\n        angle = i * 24;\n        for(j = [-1:0.5:1]) {\n            rotate([0, j * 20, angle])\n            translate([j * 8, 0, 10])\n            sphere(0.5);\n        }\n    }\n}\n\n// White hilum (scar where bean was attached)\nmodule hilum() {\n    color(\"#F5DEB3\")  // Cream white\n    translate([-14, 0, 0])\n    rotate([90, 0, 0])\n    scale([1, 0.3, 0.1])\n    cylinder(h=2, r1=2, r2=1);\n}\n\n// Small surface imperfections\nmodule imperfections() {\n    color(\"#5C3317\")  // Very dark brown spots\n    for(i = [0:8]) {\n        angle = i * 45;\n        rand = (i * 73) % 10;\n        rotate([0, rand - 5, angle])\n        translate([rand - 5, 0, 9])\n        sphere(0.3);\n    }\n}\n\n// Complete adzuki bean assembly\nmodule adzuki_bean() {\n    union() {\n        bean_body();\n        bean_seam();\n        bean_texture();\n        hilum();\n        imperfections();\n    }\n}\n\n// Display the bean rotated for better viewing angle\nrotate([0, 0, 45])\n    adzuki_bean();",
    "renders": true
  },
  {
    "food_item": "cranberrybean",
    "openscad_code": "// Cranberry bean - realistic style, medium complexity\n// Dimensions: ~65mm length, ~15mm width\n\n// Main color for cranberry bean\ncolor([0.7, 0.3, 0.25]) {\n    \n    // Main bean body - slightly curved ellipsoid\n    difference() {\n        // Base bean shape\n        union() {\n            // Main ellipsoid body\n            scale([1, 0.7, 0.4])\n                sphere(10);\n            \n            // Tapered ends\n            translate([-10, 0, 0])\n                scale([0.8, 0.6, 0.3])\n                    sphere(10);\n            translate([10, 0, 0])\n                scale([0.8, 0.6, 0.3])\n                    sphere(10);\n        }\n        \n        // Hollow interior for 3D printing\n        scale([0.8, 0.5, 0.3])\n            sphere(10);\n    }\n    \n    // Characteristic cranberry bean markings\n    module bean_marking(x, y, z, angle) {\n        translate([x, y, z]) {\n            rotate([0, 0, angle]) {\n                // Darker red-brown stripe\n                color([0.5, 0.2, 0.15]) {\n                    scale([8, 1, 0.3])\n                        sphere(1.2);\n                }\n            }\n        }\n    }\n    \n    // Add multiple markings across the bean\n    for (i = [-2:1:2]) {\n        for (j = [-1:1:1]) {\n            bean_marking(\n                i * 8,\n                j * 3 + sin(i * 45) * 2,\n                cos(i * 30) * 2,\n                i * 15\n            );\n        }\n    }\n    \n    // Bean seam ridge\n    color([0.6, 0.25, 0.2]) {\n        translate([0, 0, 3.5])\n            scale([20, 1.5, 0.5])\n                sphere(1);\n    }\n    \n    // Seed texture pattern\n    module seed_texture() {\n        for (i = [0:15:180]) {\n            rotate([0, i, 0]) {\n                translate([0, 0, 3]) {\n                    scale([0.5, 0.5, 0.2])\n                        sphere(3);\n                }\n            }\n        }\n    }\n    \n    // Apply texture to both sides\n    translate([0, 0, 3.8])\n        scale([0.9, 0.9, 1])\n            seed_texture();\n    \n    translate([0, 0, -3.8])\n        scale([0.9, 0.9, 1])\n            rotate([0, 180, 0])\n                seed_texture();\n    \n    // Small indentation at bean tip (hilum)\n    color([0.4, 0.15, 0.1]) {\n        translate([-19, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=2, r1=1.5, r2=0.5);\n    }\n}\n\n// Scale to realistic size\nscale([1.5, 1.5, 1.5]) {\n    // The entire bean model is already defined above\n}",
    "renders": true
  },
  {
    "food_item": "fava",
    "openscad_code": "// Realistic Fava (broad bean) in pod\n// Medium complexity with texture and color\n\n// Main parameters\npod_length = 80;\npod_width = 12;\npod_thickness = 8;\nbean_length = 20;\nbean_width = 10;\nbean_thickness = 8;\nnum_beans = 4;\n\n// Pod texture pattern\nmodule pod_texture() {\n    for (i = [0:10]) {\n        for (j = [0:5]) {\n            translate([i*8 - 40, j*3 - 8, pod_thickness/2 + 0.1])\n                scale([1, 0.8, 0.3])\n                    sphere(r=1.2, $fn=8);\n        }\n    }\n}\n\n// Individual bean\nmodule bean(pos) {\n    color(\"#7FB069\")  // Fresh green bean color\n    translate([pos, 0, 0])\n        rotate([0, 90, 0])\n            scale([1, 0.7, 0.5])\n                difference() {\n                    // Main bean shape\n                    cylinder(h=bean_length, r=bean_width/2, $fn=20);\n                    \n                    // Bean seam\n                    translate([0, 0, -bean_length/2 - 1])\n                        cube([0.5, bean_width*0.8, bean_length + 2], center=true);\n                    \n                    // Bean curve\n                    translate([0, -bean_width/2 - 1, 0])\n                        rotate([90, 0, 0])\n                            cylinder(h=bean_width + 2, r=bean_width/3, $fn=20);\n                }\n}\n\n// Pod half\nmodule pod_half(side) {\n    // Pod shell\n    color(\"#90B44B\")  // Fresh pea pod color\n    difference() {\n        // Main pod shape\n        translate([0, 0, 0])\n            scale([1, side, 1])\n                cube([pod_length, pod_width, pod_thickness], center=true);\n        \n        // Hollow inside\n        translate([0, 0, 0])\n            scale([0.9, side*0.8, 0.8])\n                cube([pod_length + 2, pod_width - 1, pod_thickness + 2], center=true);\n        \n        // Bean cavities\n        for (i = [0:num_beans-1]) {\n            bean_pos = -pod_length/2 + 15 + i * 15;\n            translate([bean_pos, -side*3, 0])\n                scale([1.2, 0.8, 0.9])\n                    rotate([0, 90, 0])\n                        cylinder(h=bean_length + 2, r=bean_width/2 + 1, $fn=20);\n        }\n    }\n    \n    // Pod seam\n    color(\"#5D7C47\")\n    translate([0, 0, pod_thickness/2 - 0.5])\n        cube([pod_length, 1.5, 1], center=true);\n    \n    // Texture on outer surface\n    pod_texture();\n}\n\n// Assemble the fava\nmodule fava() {\n    union() {\n        // Bottom pod half\n        pod_half(1);\n        \n        // Top pod half (slightly offset)\n        translate([0, 0, 1])\n            pod_half(-1);\n        \n        // Beans inside\n        color(\"#7FB069\")\n        for (i = [0:num_beans-1]) {\n            bean_pos = -pod_length/2 + 15 + i * 15;\n            translate([0, 0, -1])\n                bean(bean_pos);\n        }\n        \n        // Pod tip\n        color(\"#5D7C47\")\n        translate([pod_length/2 + 2, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=6, r1=2, r2=1, $fn=8);\n    }\n}\n\n// Create the model\nfava();",
    "renders": true
  },
  {
    "food_item": "edamame",
    "openscad_code": "// Realistic Edamame Pod with Beans Inside\n// 3D printable model with medium complexity\n\n$fn = 30;  // Smooth curves for realistic appearance\n\n// Pod color (bright green)\npod_color = [0.4, 0.8, 0.3];\n\n// Bean color (lighter green)\nbean_color = [0.5, 0.9, 0.4];\n\n// Main pod body\nmodule edamame_pod() {\n    color(pod_color) {\n        // Pod shell - two halves joined\n        union() {\n            // Left half\n            difference() {\n                // Outer shell\n                hull() {\n                    translate([-20, 0, 0]) sphere(8);\n                    translate([20, 0, 0]) sphere(8);\n                    translate([-20, 0, 5]) sphere(7);\n                    translate([20, 0, 5]) sphere(7);\n                }\n                \n                // Hollow inside\n                translate([0, 0, 2]) scale([0.8, 0.7, 0.7]) \n                    hull() {\n                        translate([-20, 0, 0]) sphere(7);\n                        translate([20, 0, 0]) sphere(7);\n                        translate([-20, 0, 5]) sphere(6);\n                        translate([20, 0, 5]) sphere(6);\n                    }\n            }\n            \n            // Right half\n            mirror([1, 0, 0]) \n                difference() {\n                    hull() {\n                        translate([-20, 0, 0]) sphere(8);\n                        translate([20, 0, 0]) sphere(8);\n                        translate([-20, 0, 5]) sphere(7);\n                        translate([20, 0, 5]) sphere(7);\n                    }\n                    \n                    translate([0, 0, 2]) scale([0.8, 0.7, 0.7]) \n                        hull() {\n                            translate([-20, 0, 0]) sphere(7);\n                            translate([20, 0, 0]) sphere(7);\n                            translate([-20, 0, 5]) sphere(6);\n                            translate([20, 0, 5]) sphere(6);\n                        }\n                }\n        }\n        \n        // Pod seam texture\n        for(i = [-20:5:20]) {\n            translate([i, -2, 5]) rotate([90, 0, 0]) \n                cylinder(h=1, r1=3, r2=1);\n        }\n        \n        // Stem\n        translate([0, 0, 8]) rotate([90, 0, 0]) \n            cylinder(h=8, r1=3, r2=2);\n    }\n}\n\n// Individual bean\nmodule bean() {\n    color(bean_color) {\n        scale([1, 0.6, 0.6]) sphere(5);\n        \n        // Bean texture\n        for(i = [0:30:330]) {\n            rotate([0, 0, i]) {\n                translate([4, 0, 0]) scale([0.1, 0.1, 0.1]) sphere(2);\n            }\n        }\n    }\n}\n\n// Edamame beans inside pod\nmodule beans_inside() {\n    // Three beans arranged in pod\n    translate([-15, 0, 3]) rotate([0, 10, 0]) bean();\n    translate([0, 0, 3]) rotate([0, 0, 0]) bean();\n    translate([15, 0, 3]) rotate([0, -10, 0]) bean();\n}\n\n// Create complete edamame\nunion() {\n    edamame_pod();\n    beans_inside();\n}\n\n// Add small detail for realism - fuzzy texture\nmodule fuzz() {\n    color(pod_color) {\n        for(i = [0:15:360]) {\n            for(j = [-15:5:15]) {\n                rotate([0, 0, i]) {\n                    translate([j, -7, 3]) cylinder(h=0.5, r=0.2);\n                }\n            }\n        }\n    }\n}\n\n// Add fuzz to pod surface\nfuzz();",
    "renders": true
  },
  {
    "food_item": "peanut",
    "openscad_code": "// Realistic Peanut Model - Medium Complexity\n// Features: Two lobes, textured shell, seam line, natural peanut shape\n\n// Main peanut color - light tan\ncolor([0.82, 0.71, 0.55]) {\n\n    // Create the peanut using two intersecting spheres\n    difference() {\n        union() {\n            // First lobe - larger\n            translate([-8, 0, 0]) {\n                scale([1.1, 1.2, 1.1]) {\n                    sphere(d=35, $fn=30);\n                }\n            }\n            \n            // Second lobe - slightly smaller\n            translate([8, 0, 0]) {\n                scale([1.0, 1.1, 1.0]) {\n                    sphere(d=32, $fn=30);\n                }\n            }\n            \n            // Bridge between lobes\n            translate([0, 0, 0]) {\n                scale([1.2, 0.9, 0.8]) {\n                    sphere(d=25, $fn=25);\n                }\n            }\n        }\n        \n        // Create peanut indentations for realistic shape\n        // Top indentation\n        translate([0, 0, 15]) {\n            scale([1.5, 1, 0.3]) {\n                sphere(d=30, $fn=25);\n            }\n        }\n        \n        // Bottom indentation\n        translate([0, 0, -15]) {\n            scale([1.5, 1, 0.3]) {\n                sphere(d=30, $fn=25);\n            }\n        }\n    }\n}\n\n// Surface texture - small bumps for realistic shell\nmodule peanut_texture() {\n    difference() {\n        // Main textured layer\n        union() {\n            for (i = [0:10:360]) {\n                for (j = [30:15:150]) {\n                    rotate([j, i, 0]) {\n                        translate([0, 0, 17.5]) {\n                            sphere(d=2.5, $fn=8);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Smooth out the bottom half of bumps\n        sphere(d=36, $fn=50);\n    }\n}\n\n// Apply texture to the peanut\ncolor([0.78, 0.68, 0.53]) {\n    translate([0, 0, 0]) {\n        peanut_texture();\n    }\n}\n\n// Seam line running along the peanut\nmodule seam() {\n    for (i = [-45:5:45]) {\n        rotate([i, 0, 0]) {\n            translate([0, 1, 0]) {\n                rotate([0, 90, 0]) {\n                    cylinder(h=0.5, d=1.5, $fn=6);\n                }\n            }\n        }\n    }\n}\n\n// Add seam to both sides\ncolor([0.65, 0.55, 0.45]) {\n    translate([0, 0, 0]) {\n        seam();\n    }\n    \n    mirror([0, 1, 0]) {\n        translate([0, 0, 0]) {\n            seam();\n        }\n    }\n}\n\n// Slight flattening on bottom for stability\ntranslate([0, 0, -17.5]) {\n    color([0.82, 0.71, 0.55]) {\n        cylinder(h=1, d=35, $fn=30);\n    }\n}",
    "renders": true
  },
  {
    "food_item": "lupin",
    "openscad_code": "// Lupin bean pod with individual beans inside\n// Realistic style, medium complexity\n\n$fn = 32;\n\n// Main parameters\npod_length = 80;\npod_width = 20;\npod_thickness = 8;\nbean_count = 6;\nbean_size = 6;\n\n// Pod color - greenish-yellow when fresh\npod_color = [170/255, 180/255, 80/255];\n\n// Bean color - cream/yellow\nbean_color = [240/255, 220/255, 180/255];\n\n// Create the bean pod\nmodule lupin_pod() {\n    color(pod_color)\n    difference() {\n        // Main pod body - elongated ellipsoid\n        scale([1, 0.6, 0.3])\n        sphere(r=pod_width/2);\n        \n        // Flatten the bottom\n        translate([0, 0, -pod_width/2])\n        cube([pod_width*2, pod_width*2, pod_width], center=true);\n        \n        // Create seam line\n        translate([0, 0, -pod_thickness/2])\n        cube([pod_length, 1, pod_thickness], center=true);\n        \n        // Create pod opening\n        translate([pod_length/4, 0, 0])\n        scale([1, 0.8, 0.5])\n        sphere(r=pod_width/2);\n    }\n    \n    // Add slight texture lines along pod\n    for(i = [-1:0.2:1]) {\n        translate([i * pod_length/3, 0, pod_thickness/2])\n        rotate([0, 90, 0])\n        scale([0.1, 0.1, pod_length/2])\n        cylinder(h=1, r=0.5);\n    }\n}\n\n// Individual lupin bean\nmodule lupin_bean() {\n    color(bean_color)\n    difference() {\n        // Main bean shape - flattened sphere\n        scale([1, 0.7, 0.4])\n        sphere(r=bean_size);\n        \n        // Add characteristic dent\n        translate([0, -bean_size/2, 0])\n        scale([1.2, 0.5, 0.5])\n        sphere(r=bean_size/2);\n    }\n    \n    // Bean hilum (attachment scar)\n    translate([0, 0, -bean_size/2 + 0.5])\n    rotate([90, 0, 0])\n    cylinder(h=0.3, r=1.5);\n}\n\n// Create the full lupin with beans\nmodule lupin() {\n    // Main pod\n    rotate([0, 0, -15])\n    lupin_pod();\n    \n    // Beans inside\n    for(i = [0:bean_count-1]) {\n        translate([\n            -pod_length/2 + pod_length/(bean_count+1)*(i+1),\n            0,\n            -pod_thickness/4\n        ])\n        rotate([0, 90, 0])\n        lupin_bean();\n    }\n    \n    // Small stem at top\n    color(pod_color)\n    translate([-pod_length/2, 0, pod_thickness/2])\n    rotate([90, 0, 0])\n    cylinder(h=5, r1=2, r2=1.5);\n}\n\n// Render the lupin\nlupin();",
    "renders": true
  },
  {
    "food_item": "cowpea",
    "openscad_code": "// Realistic Cowpea (Vigna unguiculata) Model\n// Medium complexity, 3D printable\n\n// Main parameters\ncowpea_length = 80;\ncowpea_width = 12;\ncowpea_thickness = 8;\nseed_count = 8;\nwall_thickness = 1.2;\n\n// Color definitions\ncowpea_color = \"#8B4513\"; // Saddle brown\nseed_color = \"#F5DEB3\";    // Wheat\n\n// Module for creating cowpea pod curve\nmodule cowpea_curve(t) {\n    // Parametric curve for natural bean pod shape\n    x = t * cowpea_length;\n    y = sin(t * 3.14159 * 2) * cowpea_width/4;\n    z = cos(t * 3.14159) * cowpea_thickness/8;\n    [x, y, z];\n}\n\n// Create the main pod body\nmodule pod_body() {\n    hull() {\n        for (i = [0:0.1:1]) {\n            translate(cowpea_curve(i))\n                sphere(d = cowpea_width - (i * 2), $fn = 16);\n        }\n    }\n}\n\n// Create pod shell with hollow interior\nmodule pod_shell() {\n    difference() {\n        // Outer shell\n        color(cowpea_color)\n        pod_body();\n        \n        // Inner cavity\n        scale([0.85, 0.85, 0.85])\n            translate([5, 0, 0])\n                pod_body();\n    }\n}\n\n// Individual cowpea seed\nmodule cowpea_seed() {\n    color(seed_color)\n    difference() {\n        // Main seed body\n        scale([1, 0.7, 0.4])\n            sphere(d = 6, $fn = 20);\n        \n        // Seed dimple\n        translate([2, 0, 0])\n            scale([1, 0.8, 0.8])\n                sphere(d = 2, $fn = 10);\n        \n        // Hilum (scar)\n        translate([-2.8, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h = 1.5, d1 = 1.2, d2 = 0.6, $fn = 8);\n    }\n}\n\n// Create seam along pod\nmodule pod_seam() {\n    color(\"#654321\")\n    for (i = [0:5:cowpea_length-10]) {\n        translate([i, 0, cowpea_thickness/2 + 0.2])\n            rotate([90, 0, 0])\n                cylinder(h = 0.5, d1 = 1.5, d2 = 1, $fn = 6);\n    }\n}\n\n// Create pod texture\nmodule pod_texture() {\n    color(\"#A0522D\")\n    for (i = [10:10:cowpea_length-10]) {\n        for (j = [-1, 1]) {\n            translate([i, j * cowpea_width/3, cowpea_thickness/2 + 0.1])\n                rotate([90, 0, 0])\n                    cylinder(h = 0.3, d = 2, $fn = 8);\n        }\n    }\n}\n\n// Place seeds inside pod\nmodule place_seeds() {\n    for (i = [0:seed_count-1]) {\n        translate([10 + i * 8, 0, -cowpea_thickness/4])\n            rotate([0, 90, 0])\n                cowpea_seed();\n    }\n}\n\n// Create stem\nmodule stem() {\n    color(\"#228B22\")\n    translate([-5, 0, cowpea_thickness/2])\n        rotate([90, 0, 0])\n            cylinder(h = 8, d1 = 3, d2 = 2, $fn = 8);\n}\n\n// Main assembly\nunion() {\n    // Pod shell\n    pod_shell();\n    \n    // Surface details\n    pod_seam();\n    pod_texture();\n    \n    // Stem\n    stem();\n    \n    // Seeds (only partially visible for realism)\n    translate([0, 0, 1])\n        place_seeds();\n}\n\n// Add slight rotation for natural appearance\nrotate([5, 0, 10])\n    children();",
    "renders": true
  },
  {
    "food_item": "yardlong",
    "openscad_code": "// Yardlong Bean - Realistic Style\n// Scale: 50mm length for 3D printing (1:18 scale from 36 inches)\n\n// Main bean body\nmodule bean_body() {\n    color([0.15, 0.45, 0.15])  // Dark green\n    union() {\n        // Main bean pod\n        for(i = [0:1:9]) {\n            translate([i*5, 0, 0])\n            rotate([0, 90, 0])\n            scale([1, 1, 0.8])\n            cylinder(h=5, r1=2.5, r2=2.3, $fn=8);\n        }\n        \n        // Bean tip\n        translate([50, 0, 0])\n        rotate([0, 90, 0])\n        scale([1, 1, 0.8])\n        cylinder(h=6, r1=2.3, r2=0.5, $fn=8);\n        \n        // Bean stem\n        translate([-3, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h=3, r1=1.2, r2=0.8, $fn=6);\n    }\n}\n\n// Bean seam detail\nmodule bean_seam() {\n    color([0.1, 0.35, 0.1])\n    for(i = [0:2:48]) {\n        translate([i, 0, 2.3])\n        rotate([90, 0, 0])\n        cube([2, 0.3, 0.2], center=true);\n    }\n}\n\n// Bean seeds inside\nmodule bean_seeds() {\n    color([0.4, 0.7, 0.2])\n    for(i = [5:10:45]) {\n        translate([i, 0, 0])\n        sphere(r=1.2, $fn=8);\n    }\n}\n\n// Surface texture - small bumps\nmodule bean_texture() {\n    color([0.15, 0.45, 0.15])\n    for(i = [2:5:48]) {\n        for(angle = [0:60:300]) {\n            translate([i, 2*cos(angle), 2.5*sin(angle)])\n            sphere(r=0.3, $fn=6);\n        }\n    }\n}\n\n// Light green stripes\nmodule bean_stripes() {\n    color([0.2, 0.6, 0.2])\n    for(i = [3:8:47]) {\n        translate([i, 0, 2.3])\n        rotate([90, 0, 0])\n        scale([1, 1, 0.1])\n        cylinder(h=0.5, r=2.4, $fn=20);\n    }\n}\n\n// Assemble the complete yardlong bean\nunion() {\n    // Main body\n    bean_body();\n    \n    // Surface details\n    bean_seam();\n    bean_texture();\n    bean_stripes();\n    \n    // Internal seeds (visible through translucent walls)\n    translate([0, 0, -1])\n    bean_seeds();\n}\n\n// Print orientation marker\ntranslate([0, -10, -5])\ncolor([0.8, 0.8, 0.8])\ncube([52, 0.5, 0.5], center=true);",
    "renders": true
  },
  {
    "food_item": "winged",
    "openscad_code": "// Winged chicken drumstick - realistic style, medium complexity\n\ncolor([0.82, 0.55, 0.42])  // Fried chicken color\n\nmodule bone_end() {\n    difference() {\n        cylinder(h=8, r1=5, r2=4, $fn=20);\n        translate([0, 0, -1]) cylinder(h=10, r1=3.5, r2=2.5, $fn=20);\n    }\n}\n\nmodule meat_texture() {\n    for(i=[0:15]) {\n        rotate([0, 90, i*24]) \n        translate([0, -20+i, 0]) \n        scale([1, 0.3, 0.2]) \n        sphere(1.2, $fn=8);\n    }\n}\n\nmodule drumstick_body() {\n    union() {\n        // Main meat mass\n        hull() {\n            translate([0, 0, 0]) sphere(12, $fn=30);\n            translate([0, -25, 0]) sphere(10, $fn=30);\n            translate([0, -40, 0]) sphere(6, $fn=25);\n        }\n        \n        // Texture details\n        meat_texture();\n        \n        // Breading bumps\n        for(j=[1:20]) {\n            rotate([rand(j*1.1)*30, rand(j*1.2)*30, rand(j*1.3)*360]) \n            translate([rand(j*1.4)*8-4, rand(j*1.5)*-35-5, rand(j*1.6)*8-4]) \n            sphere(0.8+rand(j*1.7)*1.2, $fn=6);\n        }\n    }\n}\n\nmodule wing_joint() {\n    // Wing attachment point\n    translate([0, -18, 10]) rotate([20, 0, 90]) {\n        cylinder(h=12, r1=8, r2=6, $fn=20);\n        \n        // Wing root\n        for(k=[0:5]) {\n            rotate([0, 0, k*60]) \n            translate([0, 0, 6]) \n            scale([1, 0.4, 0.2]) \n            sphere(2.5, $fn=8);\n        }\n    }\n}\n\nmodule wing() {\n    color([0.78, 0.52, 0.38])  // Slightly darker wing color\n    \n    // Wing base\n    translate([0, -18, 10]) rotate([20, 0, 90]) {\n        difference() {\n            // Main wing shape\n            translate([0, 0, -15]) \n            scale([1, 0.3, 2.5]) \n            sphere(8, $fn=25);\n            \n            // Wing separation cuts\n            for(m=[0:2]) {\n                translate([0, -2+m*2, -10+m*6]) \n                rotate([90, 0, 0]) \n                scale([1.2, 1, 0.1]) \n                cylinder(h=20, r1=6-m, r2=4-m*0.5, $fn=20);\n            }\n        }\n        \n        // Feather texture\n        for(n=[0:8]) {\n            rotate([0, 0, n*15-60]) \n            translate([0, 0, -12+n*1.5]) \n            scale([0.8-n*0.05, 0.1, 3-n*0.2]) \n            sphere(3+n*0.2, $fn=6);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Drumstick\n    drumstick_body();\n    \n    // Wing attachment\n    wing_joint();\n    \n    // Wing\n    wing();\n    \n    // Bone\n    translate([0, -45, 0]) {\n        color([0.95, 0.95, 0.9])  // Bone color\n        cylinder(h=30, r1=3, r2=4, $fn=15);\n        translate([0, 0, 30]) bone_end();\n    }\n}\n\n// Bottom support for printing\ntranslate([0, 0, -2]) \ncolor([0.82, 0.55, 0.42]) \ncylinder(h=2, r1=15, r2=15, $fn=30);",
    "renders": true
  },
  {
    "food_item": "tamarind",
    "openscad_code": "// Tamarind pod - realistic style with medium complexity\n\n// Main pod body with curved shape\nmodule tamarind_pod_body() {\n    color([0.35, 0.25, 0.15])  // Dark brown color\n    \n    // Main curved pod shape using intersection of cylinders\n    intersection() {\n        // Horizontal cylinder for main body\n        rotate([0, 90, 0])\n            cylinder(h=80, r1=12, r2=8, center=true, $fn=20);\n        \n        // Vertical cylinder to create curved pod shape\n        rotate([90, 0, 0])\n            cylinder(h=60, r1=15, r2=10, center=true, $fn=20);\n    }\n}\n\n// Create pod shell segments with visible edges\nmodule pod_segments() {\n    for(i = [0:5]) {\n        rotate([0, 0, i * 30])\n        translate([0, 0, -2])\n        color([0.4, 0.3, 0.18])  // Slightly lighter brown\n        difference() {\n            // Segment ridge\n            rotate([0, 90, 0])\n            cylinder(h=3, r1=13, r2=9, center=true, $fn=6);\n            \n            // Hollow out center\n            rotate([0, 90, 0])\n            cylinder(h=4, r1=11, r2=7, center=true, $fn=6);\n        }\n    }\n}\n\n// Individual seed inside pod\nmodule tamarind_seed() {\n    color([0.6, 0.45, 0.25])  // Light tan seed color\n    \n    // Seed shape using spheres\n    union() {\n        // Main seed body\n        sphere(r=3, $fn=12);\n        \n        // Elongated shape\n        scale([1.2, 1, 1.4])\n            sphere(r=2.5, $fn=10);\n    }\n}\n\n// Internal pulp/fiber texture\nmodule tamarind_pulp() {\n    color([0.5, 0.35, 0.2])  // Darker brown for pulp\n    \n    // Create fibrous texture with small cylinders\n    for(i = [0:20]) {\n        rotate([i * 17, i * 23, 0])\n        translate([\n            sin(i * 30) * 8,\n            cos(i * 30) * 6,\n            -5 + i * 0.5\n        ])\n        cylinder(h=2, r=0.8, $fn=6);\n    }\n}\n\n// Seeds arranged inside pod\nmodule seeds_in_pod() {\n    for(i = [0:4]) {\n        rotate([0, 0, i * 25 - 50])\n        translate([0, 0, -8 + i * 3])\n        tamarind_seed();\n    }\n}\n\n// Pod seam/crease detail\nmodule pod_seam() {\n    color([0.3, 0.2, 0.12])  // Dark seam\n    \n    // Center crease\n    translate([0, 0, 0])\n    rotate([0, 90, 0])\n    cylinder(h=82, r1=0.8, r2=0.4, center=true, $fn=8);\n    \n    // Side seams\n    for(side = [-1, 1]) {\n        translate([side * 6, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h=78, r1=0.6, r2=0.3, center=true, $fn=6);\n    }\n}\n\n// Stem attachment point\nmodule stem_attachment() {\n    color([0.25, 0.2, 0.1])  // Very dark brown\n    \n    translate([0, 0, 42])\n    rotate([0, 90, 0])\n    cylinder(h=8, r1=3, r2=2, center=false, $fn=8);\n    \n    // Small stem nub\n    translate([0, 0, 46])\n    sphere(r=2.5, $fn=10);\n}\n\n// Main assembly\nunion() {\n    // Base pod structure\n    tamarind_pod_body();\n    \n    // Surface details\n    pod_segments();\n    pod_seam();\n    \n    // Internal contents (visible through opening)\n    tamarind_pulp();\n    seeds_in_pod();\n    \n    // Stem\n    stem_attachment();\n}",
    "renders": true
  },
  {
    "food_item": "sesbania",
    "openscad_code": "// Sesbania Grandiflora (Vegetable Hummingbird) flower pod\n// Approx 75 mm tall, printable upright with 0.4 mm walls\n// Main pod with realistic wing-like petals and visible seeds inside\n\n// Color constants\npod_color = [50/255, 120/255, 50/255];      // green pod\npetal_color = [220/255, 240/255, 255/255];  // pale bluish-white\nseed_color = [180/255, 140/255, 60/255];    // tan seeds\n\n// Main module\nmodule sesbania_pod() {\n    // Central pod body\n    color(pod_color)\n    difference() {\n        // Main hull\n        hull() {\n            translate([0, 0, 35]) sphere(d=12, $fn=32);\n            translate([0, 0, 5]) sphere(d=8, $fn=32);\n        }\n        \n        // Hollow inside\n        translate([0, 0, 15])\n            cylinder(h=40, d=6, $fn=32);\n        \n        // Slight seam detail\n        translate([-6, 0, 0])\n            cube([12, 20, 50], center=true);\n    }\n    \n    // Petals around the top\n    for(i=[0:4]) {\n        rotate([0, 0, i*72]) {\n            translate([0, 8, 42])\n            rotate([15, 0, 0])\n            color(petal_color)\n            scale([1, 0.4, 0.1])\n            sphere(d=20, $fn=32);\n        }\n    }\n    \n    // Seeds visible through opening\n    for(i=[0:5]) {\n        rotate([0, 0, i*60])\n        translate([0, 2.5, 32])\n        color(seed_color)\n        scale([0.7, 0.7, 1])\n        sphere(d=3, $fn=16);\n    }\n    \n    // Calyx at base\n    color(pod_color)\n    translate([0, 0, 2])\n    cylinder(h=5, d1=10, d2=6, $fn=32);\n    \n    // Small stem\n    color([80/255, 50/255, 30/255])\n    translate([0, 0, -3])\n    cylinder(h=6, d=4, $fn=16);\n}\n\n// Create the model\nsesbania_pod();",
    "renders": true
  },
  {
    "food_item": "pigeonpea",
    "openscad_code": "// Pigeonpea (Cajanus cajan) realistic 3D model\n// Medium complexity with hull texture and characteristic shape\n\ncolor([0.4, 0.2, 0.05])  // Brownish pigeonpea color\n\nmodule pigeonpea() {\n    union() {\n        // Main body - slightly flattened ellipsoid\n        scale([1, 0.7, 0.5]) \n        sphere(d=8, $fn=32);\n        \n        // Seed scar - flattened indentation\n        translate([0, 0, 4])\n        difference() {\n            cylinder(h=1, d=2, $fn=16);\n            translate([0, 0, -0.5])\n            cylinder(h=2, d=1.5, $fn=16);\n        }\n        \n        // Hilum line\n        rotate([90, 0, 0])\n        translate([0, 0, -4.1])\n        color([0.3, 0.15, 0.03])\n        cube([0.5, 8.5, 0.3]);\n        \n        // Surface texture - small bumps\n        for(i = [0:5:355]) {\n            rotate([0, 0, i])\n            translate([3.5, 0, sin(i*3)*0.8])\n            sphere(d=0.8, $fn=8);\n        }\n        \n        // Additional texture dots\n        for(phi = [0:30:150]) {\n            for(theta = [0:45:315]) {\n                rotate([phi, 0, theta])\n                translate([3.8, 0, 0])\n                sphere(d=0.5, $fn=6);\n            }\n        }\n    }\n}\n\n// Create a small pile of pigeonpeas\nmodule pigeonpea_pile() {\n    // Base layer\n    translate([-2, -2, 0]) pigeonpea();\n    translate([2, -2, 0]) pigeonpea();\n    translate([0, 1, 0]) pigeonpea();\n    \n    // Second layer\n    translate([-1, -0.5, 4.5]) rotate([15, 0, 20]) pigeonpea();\n    translate([1, -0.5, 4.5]) rotate([-15, 0, -20]) pigeonpea();\n    \n    // Top layer\n    translate([0, 0, 9]) rotate([0, 0, 45]) pigeonpea();\n}\n\n// Scale up for printing (original is 8mm, scale to 80mm)\nscale(10)\npigeonpea_pile();",
    "renders": true
  },
  {
    "food_item": "hyacinth",
    "openscad_code": "// Hyacinth Food Model - Realistic Style, Medium Complexity\n// A 3D printable model of a hyacinth bulb with roots and sprouting shoots\n\n// Main colors for hyacinth\ncolor_bulb = \"#F5F5DC\";  // Beige for bulb\ncolor_roots = \"#DEB887\"; // Burlywood for roots\ncolor_sprout = \"#90EE90\"; // Light green for shoots\ncolor_skin = \"#8B7355\";  // Darker brown for outer skin\n\n// Bulb dimensions\nbulb_height = 40;\nbulb_radius = 25;\nwall_thickness = 2;\n\n// Root parameters\nroot_count = 8;\nroot_length = 30;\nroot_radius = 1.5;\n\n// Sprout parameters\nsprout_count = 6;\nsprout_height = 25;\nsprout_radius = 3;\n\n// Function to create tapered roots\nmodule tapered_root(length, base_radius) {\n    for (i = [0:3:length]) {\n        translate([0, 0, -i]) {\n            cylinder(h=3, r1=base_radius * (1 - i/length), r2=base_radius * (1 - (i+3)/length), $fn=8);\n        }\n    }\n}\n\n// Create outer bulb skin with papery texture\nmodule bulb_skin() {\n    color(color_skin) {\n        difference() {\n            // Main bulb shape\n            scale([1, 1, 0.8]) sphere(r=bulb_radius, $fn=32);\n            \n            // Hollow inside\n            translate([0, 0, -5]) \n                scale([1, 1, 0.75]) \n                    sphere(r=bulb_radius - wall_thickness, $fn=32);\n            \n            // Flat bottom\n            translate([0, 0, -bulb_height/2]) \n                cube([bulb_radius*2, bulb_radius*2, bulb_height], center=true);\n        }\n    }\n}\n\n// Create inner bulb flesh\nmodule bulb_flesh() {\n    color(color_bulb) {\n        translate([0, 0, -5]) {\n            scale([1, 1, 0.75]) \n                sphere(r=bulb_radius - wall_thickness, $fn=32);\n            \n            // Add growth rings texture\n            for (i = [1:3:bulb_radius-5]) {\n                translate([0, 0, -i/4]) \n                    scale([1, 1, 0.1]) \n                        sphere(r=i, $fn=32);\n            }\n        }\n    }\n}\n\n// Create root system\nmodule roots() {\n    color(color_roots) {\n        for (i = [0:root_count-1]) {\n            angle = i * 360 / root_count;\n            translate([cos(angle) * (bulb_radius - 5), sin(angle) * (bulb_radius - 5), -bulb_height/2]) {\n                rotate([90, 0, angle + 15]) {\n                    tapered_root(root_length, root_radius);\n                }\n            }\n        }\n    }\n}\n\n// Create sprouting shoots\nmodule shoots() {\n    color(color_sprout) {\n        for (i = [0:sprout_count-1]) {\n            angle = i * 360 / sprout_count;\n            translate([cos(angle) * 10, sin(angle) * 10, bulb_height/2 - 5]) {\n                // Curved shoot\n                rotate_extrude(angle=90, $fn=16) {\n                    translate([0, 0, 0]) {\n                        for (t = [0:2:sprout_height]) {\n                            translate([0, t, 0]) {\n                                circle(r=sprout_radius * (1 - t/sprout_height/2));\n                            }\n                        }\n                    }\n                }\n                \n                // Shoot tip\n                translate([cos(angle) * 5, sin(angle) * 5, sprout_height - 5]) {\n                    sphere(r=sprout_radius * 0.8, $fn=8);\n                }\n            }\n        }\n    }\n}\n\n// Base plate for printing stability\nmodule base() {\n    color(\"#8B4513\") {\n        translate([0, 0, -bulb_height/2 - 5]) {\n            cylinder(h=3, r=bulb_radius + 5, $fn=32);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    base();\n    bulb_skin();\n    bulb_flesh();\n    roots();\n    shoots();\n}",
    "renders": true
  },
  {
    "food_item": "velvet",
    "openscad_code": "$fn=64;\n// Velvet cake slice with cream cheese frosting\n\n// Main cake body dimensions\ncake_width = 60;\ncake_length = 40;\ncake_height = 35;\n\n// Frosting thickness\nfrosting_thickness = 5;\n\n// Color definitions\nred_velvet = [0.6, 0.15, 0.15];\ncream_cheese = [0.95, 0.9, 0.8];\n\nmodule cake_slice() {\n    // Base cake body - triangular slice\n    difference() {\n        // Main cake\n        color(red_velvet) {\n            translate([-cake_width/2, 0, 0]) {\n                rotate([0, 0, -30]) {\n                    cube([cake_width, cake_length, cake_height]);\n                }\n            }\n        }\n        \n        // Cut the slice shape\n        translate([-cake_width/2, -cake_length-5, -5]) {\n            rotate([0, 0, 0]) {\n                cube([cake_width*2, cake_length*2, cake_height+10]);\n            }\n        }\n    }\n}\n\nmodule frosting_layers() {\n    // Top frosting layer\n    color(cream_cheese) {\n        translate([-cake_width/2, 0, cake_height]) {\n            rotate([0, 0, -30]) {\n                cube([cake_width, cake_length, frosting_thickness]);\n            }\n        }\n    }\n    \n    // Side frosting layer\n    color(cream_cheese) {\n        translate([-cake_width/2, 0, 0]) {\n            rotate([0, 0, -30]) {\n                cube([frosting_thickness, cake_length, cake_height]);\n            }\n        }\n    }\n}\n\nmodule cake_texture() {\n    // Velvet texture - small bumps\n    for (x = [-25:5:25]) {\n        for (y = [5:5:35]) {\n            for (z = [5:5:30]) {\n                if ((x + y + z) % 15 == 0) {\n                    color(red_velvet) {\n                        translate([x, y, z]) {\n                            sphere(0.5);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule frosting_swirls() {\n    // Decorative swirl pattern on top\n    for (i = [0:15:360]) {\n        color(cream_cheese) {\n            rotate([0, 0, i]) {\n                translate([10, 0, cake_height+frosting_thickness]) {\n                    cylinder(h=1, r1=2, r2=0.5);\n                }\n            }\n        }\n    }\n}\n\nmodule cake_slice_complete() {\n    union() {\n        cake_slice();\n        frosting_layers();\n        frosting_swirls();\n        // Add subtle texture\n        translate([-cake_width/2, 0, 0]) {\n            cake_texture();\n        }\n    }\n}\n\n// Render the cake slice\ncake_slice_complete();",
    "renders": true
  },
  {
    "food_item": "jack",
    "openscad_code": "// Realistic Jackfruit - Medium Complexity\n// Scale: ~70mm width, ~60mm height\n\n// Module for jackfruit surface texture (hexagonal bumps)\nmodule hex_bump(radius=1, height=0.4) {\n    difference() {\n        cylinder(h=height, r=radius+0.1, $fn=6);\n        cylinder(h=height+0.1, r=radius-0.2, $fn=6);\n    }\n}\n\n// Module for jackfruit body with textured surface\nmodule jackfruit_body() {\n    color([0.85, 0.65, 0.15]) {\n        difference() {\n            // Main body - slightly flattened sphere\n            scale([1, 1, 0.9]) sphere(r=20, $fn=64);\n            \n            // Cut flat bottom for printing\n            translate([0, 0, -20]) cube(50, center=true);\n        }\n        \n        // Add hexagonal bumps for texture\n        for (i = [0:15]) {\n            rotate([0, 0, i*22.5]) {\n                for (j = [1:3]) {\n                    translate([j*6, 0, 20*sin(j*15)]) {\n                        rotate([90, 0, 0]) {\n                            hex_bump(1.5, 0.5);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Module for jackfruit stem\nmodule stem() {\n    color([0.4, 0.25, 0.1]) {\n        translate([0, 0, 18]) {\n            rotate([0, 0, 0]) {\n                cylinder(h=8, r1=3, r2=2, $fn=12);\n            }\n        }\n    }\n}\n\n// Module for jackfruit rind segments (spiky protrusions)\nmodule rind_spikes() {\n    color([0.75, 0.55, 0.05]) {\n        for (i = [0:8]) {\n            rotate([0, 0, i*40]) {\n                for (j = [1:2]) {\n                    translate([j*8, 0, 15]) {\n                        rotate([90, 0, 0]) {\n                            // Create spike-like protrusions\n                            scale([0.8, 0.8, 1]) cylinder(h=5, r1=2, r2=0.5, $fn=3);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Module for jackfruit latex drips (realistic detail)\nmodule latex_drips() {\n    color([0.95, 0.9, 0.7]) {\n        translate([5, 8, -19]) {\n            rotate([90, 0, 0]) {\n                scale([0.3, 0.3, 1]) cylinder(h=4, r1=1, r2=0.2, $fn=12);\n            }\n        }\n        translate([-7, -5, -19]) {\n            rotate([90, 90, 0]) {\n                scale([0.25, 0.25, 1]) cylinder(h=3, r1=0.8, r2=0.2, $fn=12);\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Base jackfruit body\n    jackfruit_body();\n    \n    // Stem at top\n    stem();\n    \n    // Spiky rind texture\n    rind_spikes();\n    \n    // Latex drips for realism\n    latex_drips();\n}",
    "renders": true
  },
  {
    "food_item": "guar",
    "openscad_code": "// Guar (cluster bean) pod - medium complexity realistic style\n// Realistic green bean-like pods with slight curve and seed texture\n\n$fn = 50;  // Smooth curves for realistic appearance\n\n// Main pod module\nmodule guar_pod(length = 60, width = 12, thickness = 8) {\n    color([0.2, 0.6, 0.1])  // Fresh green color\n    \n    // Main pod body - slightly curved\n    translate([0, 0, thickness/2])\n    rotate([0, 5, 0])  // Slight upward curve\n    scale([1, 0.8, 0.6])\n    hull() {\n        sphere(d = width);\n        translate([length - width, 0, 0])\n        sphere(d = width);\n    }\n    \n    // Create seam along the pod\n    difference() {\n        // Base pod\n        translate([0, 0, thickness/2])\n        rotate([0, 5, 0])\n        scale([1, 0.8, 0.6])\n        hull() {\n            sphere(d = width);\n            translate([length - width, 0, 0])\n            sphere(d = width);\n        }\n        \n        // Subtle seam indentation\n        translate([-5, -width/4, 0])\n        cube([length + 10, width/2, thickness + 2]);\n    }\n    \n    // Add subtle ridges for texture\n    for(i = [5:10:length-5]) {\n        color([0.15, 0.5, 0.08])\n        translate([i, 0, thickness/2 + 0.5])\n        rotate([0, 5, 0])\n        scale([1, 0.9, 0.3])\n        cylinder(h = width * 0.8, d1 = width * 0.3, d2 = width * 0.2, center = true);\n    }\n}\n\n// Seed module\nmodule guar_seed(size = 3) {\n    color([0.8, 0.7, 0.3])  // Light beige seed color\n    scale([1, 0.7, 0.5])\n    sphere(d = size);\n}\n\n// Complete guar with seeds\nmodule guar_complete() {\n    // Main pod\n    guar_pod();\n    \n    // Internal seeds - arranged along the pod\n    for(i = [10:8:45]) {\n        translate([i, 0, 2])\n        guar_seed(2.5);\n        \n        // Second row of seeds offset\n        translate([i + 4, 2, 2])\n        guar_seed(2.2);\n    }\n    \n    // Small stem at the end\n    color([0.1, 0.4, 0.05])\n    translate([-3, 0, 4])\n    rotate([90, 0, 0])\n    cylinder(h = 6, d1 = 2, d2 = 1);\n}\n\n// Generate the complete guar\nguar_complete();",
    "renders": true
  },
  {
    "food_item": "cluster",
    "openscad_code": "// Broccoli cluster (realistic, medium complexity)\n// Total height ~70mm, width ~60mm\n\n// Main stalk\nmodule stalk() {\n    color(\"darkgreen\")\n    difference() {\n        union() {\n            // Main stalk cylinder\n            cylinder(h=35, r=6, $fn=24);\n            // Taper top slightly\n            translate([0, 0, 32])\n                cylinder(h=8, r1=6, r2=3, $fn=24);\n        }\n        // Hollow center\n        translate([0, 0, -1])\n            cylinder(h=37, r=3, $fn=24);\n    }\n}\n\n// Individual floret\nmodule floret(size, angle, rotation) {\n    color(\"forestgreen\")\n    rotate([angle, 0, rotation])\n    translate([0, 0, size * 0.8])\n    difference() {\n        // Main floret body\n        sphere(r=size, $fn=16);\n        \n        // Create bumpy texture with small spheres\n        for(i = [0:15]) {\n            rotate([i * 45, 0, 0])\n            for(j = [0:3]) {\n                rotate([0, j * 30, 0])\n                translate([size * 0.7, 0, size * 0.7])\n                sphere(r=size * 0.2, $fn=8);\n            }\n        }\n    }\n}\n\n// Floret cluster generator\nmodule floret_cluster(height, radius, count) {\n    for(i = [0:count-1]) {\n        angle = 30 + rand(i) * 40;\n        rotation = i * (360/count) + rand(i+10) * 20;\n        floret_size = 6 + rand(i+20) * 8;\n        translate([cos(rotation * 5) * radius * 0.6, \n                  sin(rotation * 5) * radius * 0.6, \n                  height + i * 3])\n        floret(floret_size, angle, rotation);\n    }\n}\n\n// Random helper function\nfunction rand(seed) = rands(0, 1, 1, seed)[0];\n\n// Main assembly\nunion() {\n    // Stalk\n    stalk();\n    \n    // Main floret clusters\n    floret_cluster(35, 15, 12);\n    floret_cluster(45, 12, 8);\n    floret_cluster(55, 8, 5);\n    \n    // Side florets\n    for(i = [0:5]) {\n        angle = 45 + i * 10;\n        rotate([0, 0, i * 60])\n        translate([8, 0, 15 + i * 5])\n        rotate([0, angle, 0])\n        floret(4 + rand(i) * 3, 0, 0);\n    }\n    \n    // Tiny buds for texture\n    for(i = [0:30]) {\n        color(\"limegreen\")\n        translate([\n            cos(i * 47) * (12 + rand(i) * 8),\n            sin(i * 47) * (12 + rand(i) * 8),\n            25 + rand(i+5) * 35\n        ])\n        sphere(r=1 + rand(i+15) * 1.5, $fn=8);\n    }\n}",
    "renders": true
  },
  {
    "food_item": "ricebean",
    "openscad_code": "// Ricebean food item - realistic style, medium complexity\n// Overall dimensions: 80mm length, 15mm width, 8mm height\n\n// Main bean shape module\nmodule ricebean_body() {\n    color(\"#F5E6D3\")  // Light beige color\n    \n    // Main bean body - ellipsoid shape\n    scale([1, 0.6, 0.4])\n    sphere(d=15, $fn=30);\n    \n    // Add slight bulge in middle\n    translate([0, 0, 2])\n    scale([1, 0.7, 0.3])\n    sphere(d=12, $fn=30);\n}\n\n// Bean seam line\nmodule bean_seam() {\n    color(\"#E8D4B8\")\n    \n    // Central seam running along length\n    for(i = [-35:5:35]) {\n        translate([i, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h=1, d=0.8, $fn=8);\n    }\n}\n\n// Surface texture - small indentations\nmodule bean_texture() {\n    color(\"#F5E6D3\")\n    \n    // Random small indentations for realistic surface\n    for(i = [1:30]) {\n        translate([\n            rands(-35, 35, 1)[0],\n            rands(-5, 5, 1)[0],\n            rands(1, 4, 1)[0]\n        ])\n        sphere(d=0.5, $fn=6);\n    }\n}\n\n// Bean ends - tapered\nmodule bean_ends() {\n    color(\"#F5E6D3\")\n    \n    // Tapered front end\n    translate([40, 0, 0])\n    rotate([0, 90, 0])\n    cylinder(h=10, d1=12, d2=6, $fn=20);\n    \n    // Tapered back end\n    translate([-40, 0, 0])\n    rotate([0, 90, 0])\n    cylinder(h=10, d1=12, d2=6, $fn=20);\n}\n\n// Small ridge details\nmodule bean_ridges() {\n    color(\"#E8D4B8\")\n    \n    // Parallel ridges along bean\n    for(offset = [-3, 0, 3]) {\n        for(i = [-30:3:30]) {\n            translate([i, offset, 2])\n            rotate([90, 0, 0])\n            cylinder(h=0.3, d=0.8, $fn=6);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Base bean shape\n    ricebean_body();\n    \n    // Add ends\n    bean_ends();\n    \n    // Surface details\n    bean_seam();\n    bean_ridges();\n    \n    // Texture (comment out for faster rendering)\n    difference() {\n        union();\n        bean_texture();\n    }\n}\n\n// Color variation spots\nmodule color_spots() {\n    color(\"#E6D7C3\")\n    \n    for(i = [1:8]) {\n        translate([\n            rands(-25, 25, 1)[0],\n            rands(-4, 4, 1)[0],\n            rands(2, 4, 1)[0]\n        ])\n        sphere(d=1.5, $fn=8);\n    }\n}\n\n// Add color variation\ncolor_spots();",
    "renders": true
  },
  {
    "food_item": "moth",
    "openscad_code": "// Realistic Moth Food (Raisin + Sugar Mix) - Medium Complexity\n// 3D printable moth food pellet with raisin chunks and sugar crystals\n\n$fn = 24;\n\n// Main colors\ncolor_raisin = [0.3, 0.15, 0.1];\ncolor_sugar = [1, 0.98, 0.92];\ncolor_brown_sugar = [0.6, 0.4, 0.2];\n\n// Main pellet base\nmodule pellet_base() {\n    color(color_brown_sugar)\n    difference() {\n        // Main rounded cylinder\n        translate([0, 0, 5])\n            scale([1, 0.9, 0.6])\n            sphere(d = 40);\n        \n        // Flat bottom\n        translate([0, 0, -1])\n            cube([50, 50, 2], center = true);\n    }\n}\n\n// Raisin chunks module\nmodule raisin_chunk(size, pos, rot) {\n    color(color_raisin)\n    translate(pos)\n    rotate(rot)\n    scale([1 + rand(0.2), 1 + rand(0.2), 0.7 + rand(0.3)])\n    sphere(d = size);\n}\n\n// Sugar crystals\nmodule sugar_crystal(size, pos) {\n    color(color_sugar)\n    translate(pos)\n    scale([1, 1, 0.3 + rand(0.4)])\n    rotate([rand(30), rand(30), rand(30)])\n    cube(size, center = true);\n}\n\n// Random helper function\nfunction rand(x) = (x * 0.5) * sin(123 * x);\n\n// Surface texture pattern\nmodule surface_texture() {\n    for(i = [0:15]) {\n        angle = i * 360 / 16;\n        radius = 18 + rand(3);\n        \n        // Tiny sugar crystals\n        translate([\n            cos(angle) * radius,\n            sin(angle) * radius,\n            8 + rand(2)\n        ])\n        sugar_crystal(2 + rand(1), [0, 0, 0]);\n        \n        // Raisin pieces\n        if(i % 3 == 0) {\n            translate([\n                cos(angle + 15) * (15 + rand(5)),\n                sin(angle + 15) * (15 + rand(5)),\n                6 + rand(3)\n            ])\n            raisin_chunk(4 + rand(2), [0, 0, 0], [rand(30), rand(30), rand(30)]);\n        }\n    }\n}\n\n// Central raisin cluster\nmodule central_raisins() {\n    for(i = [0:7]) {\n        angle = i * 45;\n        translate([\n            cos(angle) * 8,\n            sin(angle) * 8,\n            10\n        ])\n        raisin_chunk(5 + rand(2), [0, 0, 0], [rand(45), rand(45), rand(45)]);\n    }\n}\n\n// Top sugar layer\nmodule sugar_topping() {\n    color(color_sugar)\n    translate([0, 0, 12])\n    scale([0.8, 0.8, 0.15])\n    sphere(d = 35);\n    \n    // Additional sugar crystals on top\n    for(i = [0:20]) {\n        angle = i * 360 / 20;\n        radius = 10 + rand(5);\n        translate([\n            cos(angle) * radius,\n            sin(angle) * radius,\n            13 + rand(1)\n        ])\n        sugar_crystal(1.5 + rand(1), [0, 0, 0]);\n    }\n}\n\n// Assembly\nunion() {\n    // Base pellet\n    pellet_base();\n    \n    // Surface details\n    surface_texture();\n    \n    // Central cluster\n    central_raisins();\n    \n    // Sugar topping\n    sugar_topping();\n}",
    "renders": true
  },
  {
    "food_item": "horsegram",
    "openscad_code": "// Horsegram Legume Model\n// Realistic style with medium complexity\n// Size: ~60mm x 40mm x 25mm\n\ncolor([0.35, 0.2, 0.1]) {\n    // Main body of horsegram\n    translate([0, 0, 10]) {\n        scale([1, 0.7, 0.5]) {\n            sphere(15, $fn=32);\n        }\n    }\n    \n    // Flattened bottom\n    translate([0, 0, 0]) {\n        cylinder(h=5, r1=15, r2=12, $fn=32);\n    }\n    \n    // Characteristic ridge/hilum\n    translate([0, -8, 12]) {\n        rotate([90, 0, 0]) {\n            cylinder(h=18, r1=1, r2=0.5, $fn=16);\n        }\n    }\n    \n    // Micropyle indentation\n    difference() {\n        translate([0, 0, 10]) {\n            sphere(15, $fn=32);\n        }\n        translate([0, 0, 22]) {\n            cylinder(h=5, r=2, $fn=16);\n        }\n    }\n}\n\n// Seed texture pattern\nmodule seed_texture() {\n    for(i = [0:15]) {\n        rotate([0, 0, i * 24]) {\n            translate([12 * cos(i * 10), 12 * sin(i * 10), 8 + i * 0.8]) {\n                color([0.25, 0.15, 0.08]) {\n                    sphere(0.8, $fn=8);\n                }\n            }\n        }\n    }\n    \n    for(j = [0:12]) {\n        rotate([0, 0, j * 30]) {\n            translate([10 * cos(j * 15), 10 * sin(j * 15), 12 + j * 0.5]) {\n                color([0.3, 0.18, 0.09]) {\n                    sphere(0.6, $fn=8);\n                }\n            }\n        }\n    }\n}\n\n// Apply texture to main seed\nseed_texture();\n\n// Create a small cluster of 3-4 horsegrams\nmodule horsegram_cluster() {\n    translate([25, 0, 0]) {\n        color([0.32, 0.19, 0.11]) {\n            rotate([0, 20, 0]) {\n                scale([0.85, 0.8, 0.75]) {\n                    union() {\n                        translate([0, 0, 8]) {\n                            sphere(12, $fn=32);\n                        }\n                        translate([0, 0, 0]) {\n                            cylinder(h=4, r1=12, r2=10, $fn=32);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    translate([-20, 10, 0]) {\n        color([0.38, 0.22, 0.12]) {\n            rotate([0, -15, 30]) {\n                scale([0.9, 0.85, 0.8]) {\n                    union() {\n                        translate([0, 0, 9]) {\n                            sphere(13, $fn=32);\n                        }\n                        translate([0, 0, 0]) {\n                            cylinder(h=4.5, r1=13, r2=11, $fn=32);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    translate([-15, -15, 5]) {\n        color([0.4, 0.24, 0.13]) {\n            rotate([15, 0, -20]) {\n                scale([0.75, 0.7, 0.65]) {\n                    union() {\n                        translate([0, 0, 7]) {\n                            sphere(11, $fn=32);\n                        }\n                        translate([0, 0, 0]) {\n                            cylinder(h=3.5, r1=11, r2=9, $fn=32);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Add cluster around main seed\nhorsegram_cluster();",
    "renders": true
  },
  {
    "food_item": "lablab",
    "openscad_code": "// Lablab (Hyacinth Bean) Pod - Realistic Style, Medium Complexity\n\n$fn = 32;\n\n// Main pod body\nmodule pod_body() {\n    color([0.1, 0.6, 0.2])  // Fresh green color\n    \n    // Main curved pod shape\n    union() {\n        // Main hull using hull of spheres\n        hull() {\n            translate([-25, 0, 0]) sphere(d = 8);\n            translate([25, 0, 0]) sphere(d = 8);\n            translate([-20, 0, 4]) sphere(d = 6);\n            translate([20, 0, 4]) sphere(d = 6);\n            translate([0, 0, 6]) sphere(d = 5);\n        }\n        \n        // Add subtle ridges along length\n        for(i = [-20:5:20]) {\n            translate([i, -4, 0]) rotate([0, 90, 0]) \n            scale([1, 0.3, 0.1]) cylinder(h = 8, r = 4);\n        }\n    }\n}\n\n// Pod seam detail\nmodule pod_seam() {\n    color([0.05, 0.45, 0.15])\n    translate([0, -4.5, 0])\n    rotate([0, 90, 0])\n    scale([1, 0.2, 0.05])\n    cylinder(h = 50, r = 4);\n}\n\n// Individual beans inside pod\nmodule beans() {\n    color([0.6, 0.3, 0.7])  // Purple hyacinth bean color\n    \n    // Create beans along curved path\n    for(i = [-15:10:15]) {\n        translate([i, 0, 1]) rotate([0, i*2, 0]) {\n            // Main bean shape\n            scale([1, 0.6, 0.6]) sphere(d = 5);\n            \n            // Bean hilum (attachment scar)\n            color([0.4, 0.2, 0.5])\n            translate([0, -2.5, 0]) rotate([90, 0, 0])\n            scale([0.2, 0.2, 0.1]) cylinder(h = 1, r = 1);\n        }\n    }\n}\n\n// Stem attachment\nmodule stem() {\n    color([0.3, 0.7, 0.2])\n    translate([-28, 0, 0]) rotate([0, 90, 0])\n    cylinder(h = 5, r = 1.5);\n    \n    // Small stem curve\n    translate([-30, -2, 0]) rotate([0, 0, -30])\n    cylinder(h = 3, r = 1.2);\n}\n\n// Pod tip\nmodule pod_tip() {\n    color([0.15, 0.5, 0.15])\n    translate([28, 0, 0]) rotate([0, 90, 0])\n    cone(h = 3, r1 = 4, r2 = 0);\n}\n\n// Surface texture pattern\nmodule surface_texture() {\n    color([0.08, 0.5, 0.18])\n    difference() {\n        // Main texture layer\n        translate([0, -4.2, 0])\n        scale([1, 0.9, 0.95])\n        pod_body();\n        \n        // Create subtle indentations\n        for(i = [-15:15:15]) {\n            for(j = [-2:1:2]) {\n                translate([i, j*1.5-4.2, j*0.5+2])\n                sphere(d = 1.5);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main pod components\n    pod_body();\n    pod_seam();\n    surface_texture();\n    \n    // Internal details\n    beans();\n    \n    // External attachments\n    stem();\n    pod_tip();\n}",
    "renders": true
  },
  {
    "food_item": "tepary",
    "openscad_code": "// Tepary bean pod - medium complexity realistic style\n// Overall dimensions approximately 80mm x 20mm x 15mm\n\n$fn = 32;\n\n// Main pod body with slight curvature\nmodule pod_body() {\n    difference() {\n        hull() {\n            // Main bean pod shape\n            translate([-40, 0, 0])\n                scale([1, 0.4, 0.3])\n                sphere(20);\n            translate([40, 0, 0])\n                scale([0.8, 0.4, 0.3])\n                sphere(20);\n        }\n        \n        // Hollow out the inside for 3D printing\n        translate([-30, 0, 0])\n            scale([0.8, 0.3, 0.25])\n            sphere(20);\n    }\n}\n\n// Create seam along the pod\nmodule pod_seam() {\n    difference() {\n        // Raised seam\n        translate([-40, 0, 0])\n            rotate([0, 0, 0])\n            linear_extrude(height = 0.5)\n            polygon(points = [\n                [0, -1], [80, -1], [80, 1], [0, 1]\n            ]);\n        \n        // Create slight indentation\n        translate([-40, 0, -0.1])\n            rotate([0, 0, 0])\n            linear_extrude(height = 0.8)\n            polygon(points = [\n                [0, -0.5], [80, -0.5], [80, 0.5], [0, 0.5]\n            ]);\n    }\n}\n\n// Individual tepary beans inside\nmodule beans() {\n    color(\"#8B4513\")\n    for(i = [0:3]) {\n        translate([-30 + i * 20, 0, -8])\n            scale([1, 0.7, 0.5])\n            sphere(4);\n    }\n}\n\n// Surface texture - small bumps\nmodule surface_texture() {\n    color(\"#90EE90\")\n    for(i = [0:15]) {\n        angle = i * 22.5;\n        for(j = [0:4]) {\n            translate([\n                -40 + j * 20 + sin(i) * 5,\n                cos(angle) * 15,\n                sin(angle) * 5 + 3\n            ])\n            sphere(0.5);\n        }\n    }\n}\n\n// Pod tip\nmodule pod_tip() {\n    color(\"#228B22\")\n    translate([40, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h = 8, r1 = 4, r2 = 0);\n}\n\n// Pod stem\nmodule pod_stem() {\n    color(\"#228B22\")\n    translate([-42, 0, 0])\n        rotate([0, -90, 0])\n        cylinder(h = 6, r1 = 2, r2 = 1);\n}\n\n// Combine all parts\nunion() {\n    difference() {\n        // Main pod with color\n        color(\"#90EE90\")\n        pod_body();\n        \n        // Add beans inside\n        beans();\n    }\n    \n    // Surface details\n    surface_texture();\n    \n    // Structural elements\n    pod_seam();\n    pod_tip();\n    pod_stem();\n}",
    "renders": true
  },
  {
    "food_item": "tarwi",
    "openscad_code": "// Tarwi (Lupinus mutabilis) - Andean lupin bean pod with beans inside\n// Realistic medium complexity 3D printable model\n\nmodule tarwi_pod_half() {\n    // Main pod shape - elongated oval with flat side\n    difference() {\n        // Outer pod shell\n        scale([1, 0.4, 0.3])\n            sphere(15, $fn=32);\n        \n        // Flat inner surface\n        translate([0, -6, 0])\n            cube([40, 12, 30], center=true);\n    }\n}\n\nmodule pod_texture() {\n    // Surface veins on pod\n    for (i = [0:3]) {\n        rotate([0, 0, i * 30])\n            translate([0, 0, 4.5])\n                scale([1, 0.1, 0.05])\n                    sphere(15, $fn=16);\n    }\n}\n\nmodule bean() {\n    // Individual tarwi bean - slightly flattened oval\n    color(\"#F5F5DC\")\n    scale([0.7, 0.4, 0.3])\n        sphere(4, $fn=16);\n}\n\nmodule beans_in_pod() {\n    // Place beans inside pod in rows\n    for (i = [0:3]) {\n        translate([-10 + i * 6, -3, 0])\n            rotate([0, 15, 0])\n                bean();\n    }\n    for (i = [0:2]) {\n        translate([-7 + i * 6, 0, 0])\n            rotate([0, 15, 0])\n                bean();\n    }\n}\n\nmodule pod_seam() {\n    // Raised seam along pod edge\n    hull() {\n        for (t = [-15:2:15]) {\n            translate([t, 5.8, 0])\n                sphere(0.8, $fn=8);\n        }\n    }\n}\n\nmodule stem() {\n    // Small stem at pod tip\n    color(\"#228B22\")\n    translate([0, 0, 4.5])\n        rotate([90, 0, 0])\n            cylinder(h=3, r1=1.5, r2=0.8, $fn=8);\n}\n\n// Main assembly\nunion() {\n    // Left half of pod\n    color(\"#90EE90\")\n    union() {\n        tarwi_pod_half();\n        pod_texture();\n        pod_seam();\n        stem();\n    }\n    \n    // Right half of pod (mirrored)\n    color(\"#90EE90\")\n    mirror([0, 1, 0])\n    union() {\n        tarwi_pod_half();\n        pod_texture();\n        pod_seam();\n    }\n    \n    // Beans visible in left half\n    beans_in_pod();\n}\n\n// Add slight rotation for better viewing angle\nrotate([15, 0, 0]) {\n    // Already rendered above\n}",
    "renders": true
  },
  {
    "food_item": "grasspea",
    "openscad_code": "// Grasspea (Lathyrus sativus) pod with seeds - medium complexity realistic style\n// Overall size ~70mm long, 15mm wide, printable without supports\n\n$fn = 30;\n\nmodule grasspea_pod() {\n    // Main pod body - slightly curved bean pod shape\n    color([0.25, 0.45, 0.15])  // Dark green pod color\n    union() {\n        // Central pod body\n        translate([0, 0, 0])\n            scale([1, 0.4, 1])\n            rotate([0, 0, 5])\n            cylinder(h = 60, r1 = 7, r2 = 6);\n        \n        // Tapered tip\n        translate([30, 0, 0])\n            scale([1, 0.4, 1])\n            rotate([0, 0, 5])\n            cylinder(h = 10, r1 = 6, r2 = 0);\n        \n        // Stem end\n        translate([-30, 0, 0])\n            scale([1, 0.4, 1])\n            rotate([0, 0, 5])\n            cylinder(h = 5, r1 = 7.5, r2 = 7);\n    }\n}\n\nmodule pod_texture() {\n    // Seed bulges along the pod\n    color([0.25, 0.45, 0.15])\n    for(i = [-20:10:20]) {\n        translate([i, 0, 3])\n            scale([1, 0.8, 0.5])\n            sphere(r = 4);\n    }\n    \n    // Vein lines along pod length\n    color([0.2, 0.35, 0.1])\n    for(v = [-1:1:1]) {\n        translate([0, v * 2.5, 0.5])\n            rotate([0, 0, 5])\n            scale([1, 0.05, 0.05])\n            cube([60, 1, 1]);\n    }\n}\n\nmodule grasspea_seeds() {\n    // Split pod to reveal seeds\n    color([0.7, 0.6, 0.2])  // Beige seed color\n    \n    // Left half seeds\n    for(i = [-20:10:20]) {\n        translate([i, -2.5, 2])\n            rotate([0, 20, 0])\n            scale([0.8, 0.6, 1])\n            sphere(r = 3.5);\n    }\n    \n    // Right half seeds\n    for(i = [-20:10:20]) {\n        translate([i, 2.5, 2])\n            rotate([0, -20, 0])\n            scale([0.8, 0.6, 1])\n            sphere(r = 3.5);\n    }\n}\n\nmodule split_pod() {\n    // Create split halves of the pod\n    difference() {\n        grasspea_pod();\n        // Remove center to create hollow pod\n        translate([0, 0, -2])\n            scale([1, 0.3, 0.8])\n            cube([65, 20, 10], center = true);\n    }\n    \n    // Left half\n    intersection() {\n        grasspea_pod();\n        translate([-32.5, -10, 0])\n            cube([65, 10, 10]);\n    }\n    \n    // Right half\n    intersection() {\n        grasspea_pod();\n        translate([-32.5, 0, 0])\n            cube([65, 10, 10]);\n    }\n}\n\n// Main assembly\nunion() {\n    // Pod halves slightly separated\n    translate([-2, 0, 0])\n        split_pod();\n    \n    translate([2, 0, 0])\n        pod_texture();\n    \n    // Seeds visible in split\n    grasspea_seeds();\n}",
    "renders": true
  },
  {
    "food_item": "bambara",
    "openscad_code": "// Bambara Nut Pod - Realistic Medium Complexity\n// A realistic representation of the Bambara groundnut pod with texture and seeds\n\nmodule pod_shell() {\n    // Main pod body - oval shape\n    color([0.4, 0.25, 0.15]) {\n        difference() {\n            // Outer shell - elongated sphere\n            scale([1.4, 1, 1]) sphere(d=35);\n            \n            // Hollow out the inside\n            scale([1.35, 0.9, 0.85]) sphere(d=34);\n            \n            // Create seam line on top\n            translate([0, 0, 16]) \n                cube([2, 35, 3], center=true);\n            \n            // Create seam line on bottom\n            translate([0, 0, -16]) \n                cube([2, 35, 3], center=true);\n        }\n    }\n    \n    // Add texture lines around the pod\n    for(i = [0:15:360]) {\n        rotate([0, 0, i])\n            translate([0, 17, 0])\n                color([0.3, 0.18, 0.12])\n                    cube([0.5, 1, 32], center=true);\n    }\n}\n\nmodule pod_seam() {\n    // Raised seam along the pod\n    color([0.5, 0.3, 0.2]) {\n        for(z = [-15:2:15]) {\n            translate([0, 0, z])\n                scale([0.1, 1, 0.1])\n                    cylinder(d=36, h=1);\n        }\n    }\n}\n\nmodule bambara_nuts(count=3) {\n    // Individual bambara nuts inside the pod\n    for(i = [0:count-1]) {\n        rotate([0, 90, 0])\n            rotate([0, 0, i * (360/count)])\n                translate([0, 8, 0])\n                    color([0.6, 0.4, 0.2]) {\n                        // Main nut body\n                        scale([1.2, 0.8, 0.8])\n                            sphere(d=8);\n                        \n                        // Nut ridge\n                        rotate([90, 0, 0])\n                            translate([0, 0, -2])\n                                cylinder(d1=8, d2=6, h=2);\n                        \n                        // Small bump for texture\n                        translate([0, 0, 2])\n                            sphere(d=1);\n                    }\n    }\n}\n\nmodule pod_hinge() {\n    // Small hinge detail at one end\n    color([0.35, 0.22, 0.14]) {\n        translate([0, 0, 17])\n            rotate([90, 0, 0])\n                cylinder(d=4, h=2);\n    }\n}\n\n// Main assembly\nunion() {\n    // Pod shell\n    pod_shell();\n    \n    // Add seam detail\n    pod_seam();\n    \n    // Add hinge\n    pod_hinge();\n    \n    // Add nuts inside (visible when pod is slightly open)\n    translate([0, 0, 5])\n        rotate([10, 0, 0])\n            bambara_nuts(4);\n}\n\n// Add some ground shadow for realism\ntranslate([0, 0, -18])\n    color([0.2, 0.2, 0.2, 0.3])\n        scale([1.5, 1.2, 0.1])\n            sphere(d=35);",
    "renders": true
  },
  {
    "food_item": "sword",
    "openscad_code": "// Sword made of food - a chocolate wafer sword with cookie blade and chocolate decorations\n// Total length ~80mm\n\n// Colors\n$fn = 32;\n\n// Chocolate wafer handle\nmodule wafer_handle() {\n    color([101, 67, 33]/255) {\n        // Main handle cylinder\n        cylinder(h=30, d=8, center=true);\n        \n        // Wafer layers - stacked disks\n        for(i=[-12:4:12]) {\n            translate([0, 0, i]) \n                cylinder(h=2, d=9, center=true);\n        }\n        \n        // Cross guard - chocolate bar pieces\n        translate([0, 0, 18]) {\n            cube([20, 6, 4], center=true);\n            cube([6, 20, 4], center=true);\n        }\n    }\n}\n\n// Cookie blade with chocolate coating\nmodule cookie_blade() {\n    color([210, 180, 140]/255) {\n        // Main blade - tapered cookie\n        linear_extrude(height=3, scale=[1, 0.3]) {\n            polygon(points=[\n                [0, 0], [35, 8], [35, -8], [0, 0]\n            ]);\n        }\n    }\n    \n    // Chocolate coating on edges\n    color([101, 67, 33]/255) {\n        translate([0, 0, 1.5]) {\n            // Top coating\n            linear_extrude(height=0.5, scale=[1, 0.3]) {\n                polygon(points=[\n                    [0, 0], [35, 8], [35, -8], [0, 0]\n                ]);\n            }\n            // Bottom coating\n            translate([0, 0, -2])\n                linear_extrude(height=0.5, scale=[1, 0.3]) {\n                    polygon(points=[\n                        [0, 0], [35, 8], [35, -8], [0, 0]\n                    ]);\n                }\n        }\n    }\n}\n\n// Chocolate chips as decorations\nmodule chocolate_chips() {\n    color([60, 30, 10]/255) {\n        // Chips along blade\n        for(i=[5:5:30]) {\n            translate([i, 0, 1.5]) \n                scale([1, 0.7, 0.5]) \n                    sphere(d=2);\n        }\n        \n        // Chips on handle\n        for(a=[0:60:300]) {\n            rotate([0, 0, a]) \n                translate([4, 0, 10]) \n                    sphere(d=2);\n        }\n    }\n}\n\n// Sugar crystals texture\nmodule sugar() {\n    color([255, 255, 255]/255) {\n        // Random sugar crystals\n        for(i=[0:10:50]) {\n            translate([i*0.7, 3, 2 + sin(i*10)*0.5]) \n                sphere(d=0.5);\n            translate([i*0.7, -3, 2 + cos(i*10)*0.5]) \n                sphere(d=0.5);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Handle\n    wafer_handle();\n    \n    // Blade\n    translate([0, 0, -25])\n        rotate([0, 0, 0])\n            cookie_blade();\n    \n    // Decorations\n    translate([0, 0, -25])\n        chocolate_chips();\n    sugar();\n}",
    "renders": true
  },
  {
    "food_item": "snap",
    "openscad_code": "// Snap Pea Pod - Realistic Style, Medium Complexity\n// Overall dimensions approximately 80mm long, 20mm diameter\n\n// Main pea pod body module\nmodule pea_pod() {\n    color([0.15, 0.45, 0.10])  // Fresh green color\n    \n    // Main pod body - elongated capsule\n    difference() {\n        // Outer shape\n        hull() {\n            // Create smooth capsule shape\n            translate([0, 0, 0]) sphere(r=10, $fn=32);\n            translate([0, 0, 80]) sphere(r=8, $fn=32);\n        }\n        \n        // Hollow out the interior\n        translate([0, 0, 5]) \n            hull() {\n                sphere(r=7, $fn=32);\n                translate([0, 0, 70]) sphere(r=5, $fn=32);\n            }\n    }\n    \n    // Add slightly flattened sides\n    difference() {\n        hull() {\n            translate([0, 0, 0]) sphere(r=10, $fn=32);\n            translate([0, 0, 80]) sphere(r=8, $fn=32);\n        }\n        // Flatten the sides slightly\n        translate([0, -15, 0]) cube([30, 30, 80], center=true);\n    }\n}\n\n// Individual pea module\nmodule pea() {\n    color([0.36, 0.73, 0.36])  // Bright pea green\n    sphere(r=4.5, $fn=20);\n}\n\n// Add peas inside the pod\nmodule peas_in_pod() {\n    // First pea\n    translate([0, 0, 15]) pea();\n    \n    // Second pea\n    translate([0, 0, 30]) pea();\n    \n    // Third pea\n    translate([0, 0, 45]) pea();\n    \n    // Fourth pea\n    translate([0, 0, 60]) pea();\n}\n\n// Pod seam detail\nmodule pod_seam() {\n    color([0.20, 0.50, 0.15])  // Slightly darker green\n    \n    // Central seam ridge\n    for(i = [0:5:75]) {\n        translate([0, 0, i]) \n            difference() {\n                cylinder(h=3, r1=2.5, r2=2.5, $fn=6);\n                translate([0, 0, -0.5]) cylinder(h=4, r1=2, r2=2, $fn=6);\n            }\n    }\n}\n\n// Texture pattern for pod surface\nmodule pod_texture() {\n    color([0.12, 0.42, 0.08])  // Darker green for texture\n    \n    // Small bumps along the surface\n    for(i = [10:20:70]) {\n        for(j = [-45:30:45]) {\n            rotate([0, 0, j]) \n                translate([9.5, 0, i]) \n                    sphere(r=0.8, $fn=8);\n        }\n    }\n}\n\n// Stem detail\nmodule stem() {\n    color([0.25, 0.55, 0.15])  // Stem green\n    \n    // Main stem\n    translate([0, 0, 80])\n        rotate([90, 0, 0])\n            cylinder(h=8, r1=2, r2=1, $fn=8);\n    \n    // Small leaf\n    translate([2, 0, 82])\n        rotate([45, 0, 30])\n            scale([1, 0.5, 1])\n                sphere(r=3, $fn=16);\n}\n\n// Assemble all parts\nunion() {\n    // Main pod body\n    pea_pod();\n    \n    // Internal peas (slightly visible)\n    translate([0, 0, 0]) peas_in_pod();\n    \n    // External details\n    pod_seam();\n    pod_texture();\n    stem();\n}",
    "renders": true
  },
  {
    "food_item": "snow",
    "openscad_code": "// Snow cone – realistic style, medium complexity\n// Dimensions: 65 mm tall, 55 mm base diameter, printable on FDM without supports\n// Raspberry-flavored top, classic paper cone body\n\n// Base color definitions\n$fn = 60;\ncone_color = [0.9, 0.9, 0.9];\nsnow_color = [0.9, 0.1, 0.4];   // raspberry\npaper_color = [0.8, 0.8, 0.75];\n\n// Paper cone body\nmodule cone_body() {\n    color(paper_color)\n    difference() {\n        cylinder(h = 40, r1 = 27.5, r2 = 10, center = false);\n        translate([0, 0, 2])\n            cylinder(h = 39, r1 = 25.5, r2 = 8, center = false);\n    }\n}\n\n// Snow module – small irregular spheres for crunchy ice texture\nmodule snow_cluster() {\n    color(snow_color)\n    union() {\n        for (i = [1 : 45]) {\n            translate([\n                sin(i * 137.5) * (5 + i / 10),\n                cos(i * 137.5) * (5 + i / 10),\n                0\n            ])\n            scale([1 + 0.3 * sin(i * 9.7), 1 + 0.3 * cos(i * 6.3), 1])\n            sphere(r = 2.5 + 0.8 * sin(i * 5));\n        }\n    }\n}\n\n// Dome of snow on top\nmodule snow_dome() {\n    color(snow_color)\n    difference() {\n        sphere(d = 55);\n        translate([0, 0, -5])\n            cube([60, 60, 30], center = true);\n    }\n}\n\n// Syrup drip detail\nmodule syrup_drip() {\n    color(snow_color)\n    translate([10, 0, 0])\n    rotate([90, 0, 0])\n    cylinder(h = 8, r1 = 2, r2 = 1.5);\n}\n\n// Main assembly\nunion() {\n    // Paper cone\n    translate([0, 0, 0])\n        cone_body();\n\n    // Snow dome\n    translate([0, 0, 35])\n        snow_dome();\n\n    // Snow clusters for extra texture\n    for (a = [0 : 60 : 300]) {\n        rotate([0, 0, a])\n        translate([0, 18, 38])\n            snow_cluster();\n    }\n\n    // Syrup drips\n    for (a = [30 : 90 : 270]) {\n        rotate([0, 0, a])\n        translate([0, 25, 25])\n            syrup_drip();\n    }\n}",
    "renders": true
  },
  {
    "food_item": "sugar",
    "openscad_code": "// Sugar cube stack with realistic details\n// Individual cubes with slight irregularities and sugar crystal texture\n\n// Parameters\ncube_count = 5;\ncube_size = 8;\nstack_height = cube_count * cube_size * 0.9;\ngap = 0.5;\nwall_thickness = 1.2;\n\n// Main module\nmodule sugar_cube(x, y, z, rotation) {\n    translate([x, y, z]) {\n        rotate([0, 0, rotation]) {\n            // Main cube body with slight irregularity\n            color([0.95, 0.95, 0.92]) {\n                // Slightly irregular cube shape\n                for(i = [0:3]) {\n                    rotate([0, 0, i * 90]) {\n                        translate([sin(i * 45) * 0.3, 0, 0]) {\n                            cube([cube_size + sin(i * 30) * 0.4, \n                                  cube_size + cos(i * 45) * 0.3, \n                                  cube_size + sin(i * 60) * 0.2], true);\n                        }\n                    }\n                }\n                \n                // Sugar crystal texture on top surface\n                for(tx = [-3.5:0.8:3.5]) {\n                    for(ty = [-3.5:0.8:3.5]) {\n                        translate([tx, ty, cube_size/2 + 0.1]) {\n                            scale([1, 1, 0.3]) {\n                                sphere(r = 0.2 + rand(0.1), $fn = 6);\n                            }\n                        }\n                    }\n                }\n                \n                // Side texture - small irregularities\n                for(side = [0:3]) {\n                    rotate([0, 0, side * 90]) {\n                        translate([cube_size/2 + 0.1, 0, 0]) {\n                            rotate([0, 90, 0]) {\n                                for(sz = [-3:1:3]) {\n                                    for(sy = [-3:0.5:3]) {\n                                        translate([sz, sy, 0]) {\n                                            sphere(r = 0.1 + rand(0.05), $fn = 4);\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                \n                // Rounded edges for realistic wear\n                for(edge = [0:4]) {\n                    rotate([0, 0, edge * 72]) {\n                        translate([(cube_size/2 - 0.5) * cos(edge * 72), \n                                  (cube_size/2 - 0.5) * sin(edge * 72), \n                                  cube_size/2 - 0.5]) {\n                            rotate([45, 45, 0]) {\n                                cylinder(h = 0.5, r = 0.3, $fn = 8);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Random number generator for irregularities\nfunction rand(seed) = (abs(sin(seed * 123.456)) * 0.4);\n\n// Sugar pile base\nmodule sugar_pile() {\n    color([0.96, 0.94, 0.90]) {\n        // Base pile with irregular top\n        translate([0, 0, -2]) {\n            difference() {\n                cylinder(h = 4, r1 = 25, r2 = 20, $fn = 32);\n                \n                // Carve out irregular top surface\n                for(angle = [0:30:360]) {\n                    rotate([0, 0, angle]) {\n                        translate([rand(angle) * 8, rand(angle + 15) * 8, 2]) {\n                            sphere(r = 3 + rand(angle * 2), $fn = 8);\n                        }\n                    }\n                }\n            }\n            \n            // Add scattered sugar crystals on top\n            for(i = [0:50]) {\n                translate([rand(i) * 35 - 17.5, rand(i * 2) * 35 - 17.5, 2 + rand(i * 3) * 1.5]) {\n                    sphere(r = 0.3 + rand(i * 4) * 0.3, $fn = 6);\n                }\n            }\n        }\n    }\n}\n\n// Stack of sugar cubes\nmodule sugar_cube_stack() {\n    // Create stack with slight rotations and offsets\n    for(i = [0:cube_count-1]) {\n        sugar_cube(\n            sin(i * 15) * 1.2, \n            cos(i * 15) * 1.2, \n            -stack_height/2 + i * (cube_size * 0.9) + cube_size/2,\n            i * 8\n        );\n    }\n}\n\n// Render the complete model\nunion() {\n    sugar_pile();\n    translate([0, 0, 4]) {\n        sugar_cube_stack();\n    }\n}",
    "renders": true
  },
  {
    "food_item": "field",
    "openscad_code": "// Realistic corn cob for field food item\n// Dimensions: ~80mm long\n\n$fn = 32;\n\n// Main corn cob\nmodule corn_cob() {\n    color([0.95, 0.75, 0.15]) {\n        // Central cob body with slight taper\n        hull() {\n            cylinder(h = 80, d1 = 20, d2 = 18, center = false);\n        }\n    }\n}\n\n// Individual corn kernel\nmodule kernel(x, y, z, angle) {\n    // Kernel position around cob\n    translate([x, y, z]) {\n        rotate([0, 0, angle]) {\n            color([0.95, 0.85, 0.12]) {\n                // Teardrop-shaped kernel\n                scale([1, 0.8, 1]) \n                    sphere(d = 3.5);\n                \n                // Kernel tip\n                translate([1.5, 0, 0])\n                    rotate([90, 0, 0])\n                        cylinder(h = 1.5, d1 = 1.5, d2 = 0, center = false);\n            }\n        }\n    }\n}\n\n// Row of kernels\nmodule kernel_row(z_offset, start_angle) {\n    for (i = [0:11]) {\n        angle = start_angle + i * 30;\n        x = 10 * cos(angle);\n        y = 10 * sin(angle);\n        kernel(x, y, z_offset, angle);\n    }\n}\n\n// All kernels on cob\nmodule all_kernels() {\n    for (z = [5:5:75]) {\n        // Offset every other row\n        offset = (z % 10 == 0) ? 15 : 0;\n        kernel_row(z, offset);\n    }\n}\n\n// Corn husk leaves\nmodule husk() {\n    color([0.5, 0.65, 0.3]) {\n        // Outer husk layers\n        for (i = [0:3]) {\n            rotate([0, 0, i * 90])\n                translate([0, 10, 0])\n                    rotate([0, 20, 0])\n                        scale([1, 0.3, 1])\n                            cylinder(h = 85, d = 40, center = false);\n        }\n    }\n}\n\n// Corn silk\nmodule silk() {\n    color([0.85, 0.8, 0.6]) {\n        // Silk strands at top\n        for (i = [0:19]) {\n            angle = i * 18;\n            x = 8 * cos(angle);\n            y = 8 * sin(angle);\n            translate([x, y, 80])\n                rotate([90 + rand(i) * 20, 0, angle])\n                    cylinder(h = 15 + rand(i) * 10, d = 0.8, center = false);\n        }\n    }\n}\n\n// Helper for random variation\nfunction rand(n) = (n * 13) % 10 / 10;\n\n// Assemble the corn\nunion() {\n    corn_cob();\n    all_kernels();\n    husk();\n    silk();\n}",
    "renders": true
  },
  {
    "food_item": "garden",
    "openscad_code": "// Realistic Garden Strawberry (Medium Complexity)\n// Overall size: ~55mm length, 45mm width, 50mm height\n\n// Main strawberry body\nmodule strawberry_body() {\n    color(\"crimson\") {\n        // Create strawberry shape with slight taper\n        hull() {\n            // Top sphere\n            translate([0, 0, 35]) scale([1, 1, 0.7]) sphere(d=35);\n            // Bottom sphere\n            translate([0, 0, 5]) scale([1.1, 1.1, 0.5]) sphere(d=35);\n        }\n        \n        // Add characteristic strawberry bulges\n        for(i=[0:60:359]) {\n            rotate([0, 0, i]) {\n                translate([0, 15, 25]) rotate([0, 90, 0]) \n                    cylinder(h=25, d1=10, d2=5, $fn=6);\n            }\n        }\n    }\n}\n\n// Strawberry seeds (achenes)\nmodule seeds() {\n    color(\"yellow\") {\n        // Seed pattern following strawberry surface\n        for(angle=[0:30:359]) {\n            for(height=[0:10:40]) {\n                rotate([0, 0, angle]) {\n                    // Calculate position on strawberry surface\n                    pos = height * 0.7;\n                    radius = 15 + height * 0.3;\n                    x = cos(angle * 3) * radius * 0.5;\n                    y = sin(angle * 3) * radius * 0.5;\n                    z = height + 5;\n                    \n                    translate([x, y, z]) {\n                        sphere(d=1.2);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Green leafy top (calyx)\nmodule strawberry_top() {\n    color(\"forestgreen\") {\n        // Central stem\n        translate([0, 0, 38]) cylinder(h=8, d=6, $fn=8);\n        \n        // Leaves radiating from center\n        for(i=[0:45:359]) {\n            rotate([0, 0, i]) {\n                translate([0, 3, 38]) rotate([0, 90, 0]) \n                    cylinder(h=12, d1=8, d2=4, $fn=3);\n            }\n        }\n        \n        // Smaller leaves between\n        for(i=[22.5:45:359]) {\n            rotate([0, 0, i]) {\n                translate([0, 2, 40]) rotate([0, 90, 0]) \n                    cylinder(h=8, d1=6, d2=3, $fn=3);\n            }\n        }\n    }\n}\n\n// Stem\nmodule stem() {\n    color(\"darkgreen\") {\n        translate([0, 0, 46]) cylinder(h=15, d=3, $fn=8);\n    }\n}\n\n// Combine all parts\nunion() {\n    strawberry_body();\n    seeds();\n    strawberry_top();\n    stem();\n}",
    "renders": true
  },
  {
    "food_item": "split",
    "openscad_code": "// Split Avocado Half - Realistic Style, Medium Complexity\n\n// Parameters\n$fn = 24;\navocado_length = 60;\navocado_width = 40;\navocado_height = 30;\nskin_thickness = 2;\nflesh_thickness = 8;\npit_radius = 15;\nwall_thickness = 1.5;\n\n// Main avocado half\nmodule avocado_half() {\n    color([0.2, 0.4, 0.15]) {\n        // Outer skin shell\n        difference() {\n            // Main avocado shape\n            scale([1, 0.7, 0.5])\n                sphere(d = avocado_width);\n            \n            // Remove inner part for shell\n            translate([0, 0, -2])\n                scale([1, 0.65, 0.45])\n                    sphere(d = avocado_width - skin_thickness*2);\n        }\n    }\n    \n    // Flesh\n    color([0.4, 0.7, 0.3]) {\n        difference() {\n            // Main flesh shape\n            scale([1, 0.65, 0.45])\n                sphere(d = avocado_width - skin_thickness*2);\n            \n            // Pit cavity\n            translate([0, 0, 5])\n                sphere(d = pit_radius * 2);\n        }\n    }\n    \n    // Pit\n    color([0.6, 0.4, 0.2]) {\n        translate([0, 0, 5])\n            sphere(d = pit_radius * 2 - 2);\n    }\n}\n\n// Textured surface for flesh\nmodule flesh_texture() {\n    color([0.35, 0.65, 0.25]) {\n        for(i = [0:8]) {\n            for(j = [0:4]) {\n                angle = i * 45;\n                radius = j * 3 + 5;\n                translate([\n                    cos(angle) * radius,\n                    sin(angle) * radius,\n                    8\n                ])\n                    sphere(d = 1.5, $fn = 8);\n            }\n        }\n    }\n}\n\n// Skin texture lines\nmodule skin_texture() {\n    color([0.15, 0.3, 0.1]) {\n        for(i = [0:6]) {\n            rotate([0, 0, i * 30])\n                translate([0, avocado_width/2 - 5, 0])\n                    scale([1, 0.05, 0.05])\n                        sphere(d = avocado_width);\n        }\n    }\n}\n\n// Base for 3D printing stability\nmodule base() {\n    color([0.2, 0.4, 0.15]) {\n        translate([0, 0, -avocado_height/2 - 1])\n            cylinder(h = 2, r1 = avocado_width/2, r2 = avocado_width/2 + 3);\n    }\n}\n\n// Assembly\nunion() {\n    // Main avocado components\n    avocado_half();\n    \n    // Add texture details\n    flesh_texture();\n    skin_texture();\n    \n    // Add base for stability\n    base();\n}",
    "renders": true
  },
  {
    "food_item": "green",
    "openscad_code": "// Realistic Green Bell Pepper - Medium Complexity\n// Approx 70mm tall, 3D printable with no overhangs\n\n// Main color for bell pepper\ncolor([0.1, 0.6, 0.2]) {\n    // Pepper body - slightly squashed sphere with top/bottom cuts\n    difference() {\n        scale([1, 1, 1.2]) \n            sphere(d = 50, $fn = 64);\n        \n        // Flatten bottom for printing\n        translate([0, 0, -30])\n            cube([60, 60, 30], center = true);\n            \n        // Create stem cavity\n        translate([0, 0, 28])\n            cylinder(h = 10, d1 = 12, d2 = 8, $fn = 16);\n    }\n    \n    // Stem - curved cylinder\n    translate([0, 0, 30])\n    rotate([0, 15, 0])\n    color([0.2, 0.4, 0.1])\n        cylinder(h = 15, d1 = 8, d2 = 6, $fn = 8);\n        \n    translate([0, 0, 30])\n    rotate([0, -15, 180])\n    color([0.2, 0.4, 0.1])\n        cylinder(h = 15, d1 = 8, d2 = 6, $fn = 8);\n}\n\n// Create realistic lobes with difference operations\ndifference() {\n    // Main pepper body\n    color([0.1, 0.6, 0.2])\n    scale([1, 1, 1.2]) \n        sphere(d = 50, $fn = 64);\n        \n    // Create 4 lobes with curved cuts\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90 + 45])\n        translate([20, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h = 60, d = 30, $fn = 32);\n    }\n}\n\n// Add surface texture with small bumps\nmodule pepper_bumps() {\n    for (a = [0:30:359]) {\n        for (b = [-30:30:30]) {\n            rotate([b, 0, a])\n            translate([25, 0, 10 * sin(a) * cos(b)])\n            scale([1, 1, 0.5])\n            color([0.15, 0.5, 0.15])\n            sphere(d = 2, $fn = 8);\n        }\n    }\n}\n\n// Position bumps on surface\ntranslate([0, 0, -5])\npepper_bumps();\n\n// Bottom indent detail\ndifference() {\n    translate([0, 0, -20])\n    color([0.08, 0.5, 0.18])\n    sphere(d = 10, $fn = 32);\n    \n    translate([0, 0, -25])\n    sphere(d = 8, $fn = 32);\n}\n\n// Add slight ridge patterns\nmodule ridges() {\n    for (i = [0:45:359]) {\n        rotate([0, 0, i])\n        translate([0, 0, -15])\n        rotate_extrude(angle = 45, $fn = 32)\n        translate([24, 0, 0])\n        circle(d = 1.5, $fn = 8);\n    }\n}\n\ncolor([0.12, 0.55, 0.22])\nridges();",
    "renders": true
  },
  {
    "food_item": "yellow",
    "openscad_code": "// Pineapple - realistic yellow fruit model\n// Approx 85mm tall, 3D-printable without supports\n\n$fn = 50;\n\n// Overall color\ncolor([0.95, 0.8, 0.1]) {\n    // Main pineapple body\n    union() {\n        // Pineapple body with slight taper\n        cylinder(h1 = 60, r1 = 25, r2 = 22, h = 60, center = true);\n        \n        // Add slight bulge in middle\n        translate([0, 0, -5])\n            scale([1.05, 1.05, 1])\n            cylinder(h = 50, r = 24.5, center = true);\n    }\n    \n    // Pineapple texture - diamond pattern\n    module pineapple_texture() {\n        for(i = [0:7]) {\n            rotate([0, 0, i * 45]) {\n                for(j = [-25:5:25]) {\n                    translate([0, j, -30])\n                        linear_extrude(height = 60, twist = 5)\n                        square([2, 3], center = true);\n                }\n            }\n        }\n    }\n    \n    difference() {\n        children();\n        pineapple_texture();\n    }\n    \n    // Pineapple crown (leaves)\n    translate([0, 0, 35]) {\n        color([0.1, 0.6, 0.2]) {\n            for(i = [0:11]) {\n                rotate([0, 0, i * 30]) {\n                    rotate([30 + i * 3, 0, 0])\n                        translate([0, 0, 15])\n                            cylinder(h = 25, r1 = 3, r2 = 1, center = false);\n                }\n            }\n            \n            // Additional inner leaves\n            for(i = [0:7]) {\n                rotate([0, 0, i * 45 + 22.5]) {\n                    rotate([35, 0, 0])\n                        translate([0, 0, 18])\n                            cylinder(h = 20, r1 = 2.5, r2 = 0.5, center = false);\n                }\n            }\n        }\n    }\n    \n    // Pineapple bottom - slightly rounded\n    translate([0, 0, -30])\n        sphere(d = 50);\n    \n    // Small indentations for eyes (fruit eyes)\n    color([0.8, 0.6, 0.05]) {\n        for(a = [0:45:315]) {\n            for(z = [-20:10:20]) {\n                rotate([0, 0, a]) {\n                    translate([20, 0, z])\n                        rotate([0, 90, 0])\n                            cylinder(h = 2, r = 2.5, center = true);\n                }\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "food_item": "red",
    "openscad_code": "// Realistic red apple with stem, leaf, and subtle surface texture\n// Overall size ~70mm diameter\n\n$fn = 48;  // Smooth curves\n\n// Main apple body - slightly squashed sphere\nmodule apple_body() {\n    color(\"crimson\") {\n        scale([1, 1, 0.85])\n            sphere(d = 70);\n    }\n}\n\n// Apple stem\nmodule stem() {\n    translate([0, 0, 35]) {\n        rotate([80, 0, 0]) {\n            color(\"saddlebrown\") {\n                cylinder(h = 20, d1 = 4, d2 = 2.5, center = true);\n            }\n        }\n    }\n}\n\n// Apple leaf with curved shape\nmodule leaf() {\n    translate([0, 7, 32]) {\n        rotate([20, 0, 0]) {\n            rotate([0, 0, 45]) {\n                color(\"forestgreen\") {\n                    scale([1.3, 1, 0.3]) {\n                        sphere(d = 18);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Apple top indentation\nmodule apple_top() {\n    translate([0, 0, 32]) {\n        color(\"crimson\") {\n            translate([0, 0, -2]) {\n                cylinder(h = 6, d = 14);\n            }\n        }\n    }\n}\n\n// Bottom apple indentation\nmodule apple_bottom() {\n    translate([0, 0, -28]) {\n        color(\"crimson\") {\n            translate([0, 0, 0]) {\n                cylinder(h = 6, d = 12);\n            }\n        }\n    }\n}\n\n// Subtle surface dimples using small spheres\nmodule surface_texture() {\n    color(\"darkred\") {\n        for (i = [0:5:355]) {\n            rotate([0, 0, i]) {\n                rotate([80, 0, 0]) {\n                    translate([0, 30, 0]) {\n                        sphere(d = 3);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Main assembly\ndifference() {\n    union() {\n        apple_body();\n        apple_top();\n        apple_bottom();\n    }\n    \n    // Remove top and bottom indentations\n    translate([0, 0, 35]) {\n        sphere(d = 16);\n    }\n    \n    translate([0, 0, -35]) {\n        sphere(d = 14);\n    }\n}\n\n// Add stem and leaf\nunion() {\n    stem();\n    leaf();\n}\n\n// Add subtle surface texture\nsurface_texture();",
    "renders": true
  },
  {
    "food_item": "black",
    "openscad_code": "// Black licorice candy twists - realistic style\n$fn = 48; // Smooth curves for printing\n\n// Main module for black licorice twist\nmodule licorice_twist(height = 80, diameter = 15) {\n    color([0.1, 0.1, 0.1]) // Deep black color\n    \n    // Create twisted rope structure\n    union() {\n        // Main twisted body\n        for (i = [0:5]) {\n            rotate([0, 0, i * 60]) {\n                translate([0, 0, i * height/6]) {\n                    // First strand of twist\n                    rotate([0, 0, 30]) {\n                        translate([diameter/3, 0, 0]) {\n                            rotate([90, 0, 0]) {\n                                cylinder(h = height/6 + 2, r = diameter/3, $fn = 16);\n                            }\n                        }\n                    }\n                    \n                    // Second strand of twist (offset 180 degrees)\n                    rotate([0, 0, 210]) {\n                        translate([diameter/3, 0, 0]) {\n                            rotate([90, 0, 0]) {\n                                cylinder(h = height/6 + 2, r = diameter/3, $fn = 16);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Add twisted surface texture - small ridges\n        for (i = [0:15]) {\n            rotate([0, 0, i * 24]) {\n                for (j = [0:5]) {\n                    translate([0, 0, j * height/6 + height/12]) {\n                        // Small ridges along the twist\n                        difference() {\n                            cylinder(h = 2, r = diameter/2 + 0.5, $fn = 16);\n                            cylinder(h = 3, r = diameter/2 - 0.2, $fn = 16);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// End caps for licorice pieces\nmodule licorice_end() {\n    color([0.1, 0.1, 0.1]) // Matching black\n    \n    // Tapered ends\n    difference() {\n        cylinder(h = 8, r1 = 7.5, r2 = 5, $fn = 16);\n        // Hollow center for realistic cut\n        translate([0, 0, -1]) {\n            cylinder(h = 10, r = 2, $fn = 8);\n        }\n    }\n}\n\n// Create a bundle of licorice pieces\nmodule licorice_bundle() {\n    // First main piece\n    translate([-20, 0, 0]) {\n        licorice_twist();\n        \n        // Add end caps\n        translate([0, 0, 0]) {\n            rotate([180, 0, 0]) licorice_end();\n        }\n        translate([0, 0, 80]) {\n            licorice_end();\n        }\n    }\n    \n    // Second piece crossed over\n    translate([20, 0, 0]) {\n        rotate([0, 0, 30]) {\n            licorice_twist();\n            \n            // Add end caps\n            translate([0, 0, 0]) {\n                rotate([180, 0, 0]) licorice_end();\n            }\n            translate([0, 0, 80]) {\n                licorice_end();\n            }\n        }\n    }\n    \n    // Third piece at angle\n    translate([0, -15, 10]) {\n        rotate([15, 0, -15]) {\n            scale([0.8, 0.8, 0.8]) {\n                licorice_twist(60, 12);\n                \n                // Add end caps\n                translate([0, 0, 0]) {\n                    scale([0.8, 0.8, 0.8]) rotate([180, 0, 0]) licorice_end();\n                }\n                translate([0, 0, 60]) {\n                    scale([0.8, 0.8, 0.8]) licorice_end();\n                }\n            }\n        }\n    }\n}\n\n// Generate the final model\nlicorice_bundle();",
    "renders": true
  },
  {
    "food_item": "white",
    "openscad_code": "// White Mushroom with gills and stem\n// Overall height ~70mm, cap diameter ~60mm\n\n$fn = 48;  // Smooth curves for realistic appearance\n\n// Main mushroom assembly\nmodule mushroom() {\n    // White color for the mushroom\n    color(\"white\") {\n        union() {\n            // Cap of the mushroom\n            translate([0, 0, 35]) \n                mushroom_cap();\n            \n            // Stem\n            translate([0, 0, 0]) \n                mushroom_stem();\n                \n            // Underside gills\n            translate([0, 0, 25]) \n                mushroom_gills();\n        }\n    }\n}\n\n// Mushroom cap - slightly flattened sphere with random bumps\nmodule mushroom_cap() {\n    union() {\n        // Main cap shape\n        scale([1, 1, 0.6]) \n            sphere(d = 60);\n            \n        // Add some surface bumps for texture\n        for(i = [0:10]) {\n            rotate([0, 0, i * 36 + 15]) \n                translate([25 + rand(i) * 5, 0, 0]) \n                    scale([1, 1, 0.5]) \n                        sphere(d = 3 + rand(i) * 2);\n        }\n    }\n}\n\n// Mushroom stem - tapered cylinder\nmodule mushroom_stem() {\n    cylinder(h1 = 30, h2 = 25, r1 = 12, r2 = 8);\n}\n\n// Underside gills radiating from center\nmodule mushroom_gills() {\n    difference() {\n        // Base disc\n        cylinder(h = 2, r = 28);\n        \n        // Cut gill slots\n        for(i = [0:35]) {\n            rotate([0, 0, i * 10]) \n                translate([14, 0, -1]) \n                    cube([14, 1.5, 4]);\n        }\n    }\n}\n\n// Simple pseudo-random function for organic variation\nfunction rand(n) = (n * 13) % 100 / 100;\n\n// Scale entire model to fit 3D printer bed\nscale(0.9) \n    mushroom();",
    "renders": true
  },
  {
    "food_item": "brown",
    "openscad_code": "$fa=1; $fs=1;\n\n// Walnut in shell – 45 mm tall model\ncolor([0.35,0.22,0.10]) {\n\n    // outer shell\n    difference() {\n        hull() {\n            // two lobes\n            translate([-10,0,0]) scale([1.1,0.9,1]) sphere(d=30);\n            translate([ 10,0,0]) scale([1.1,0.9,1]) sphere(d=30);\n        }\n\n        // seam groove\n        translate([0,0,-5]) cube([50,2,50],center=true);\n\n        // vent hole at stem\n        translate([0,0,23]) rotate([90,0,0]) cylinder(d1=6,d2=2,h=10);\n    }\n\n    // surface bumps\n    for(i=[-45:15:45], j=[-30:15:30]) {\n        translate([i,j,rand(i,j)]) \n            rotate([90,0,0]) cylinder(d1=3,d2=1,h=2);\n    }\n\n    // stem stub\n    translate([0,0,22]) cylinder(d1=5,d2=3,h=5);\n}\n\n// helper for random bump height\nfunction rand(x,y)=1.5+sin(x*y)*1.2;",
    "renders": true
  },
  {
    "food_item": "flageolet",
    "openscad_code": "// Flageolet Bean - Realistic Style with Medium Complexity\n// OpenSCAD Food Model - 3D Printable\n\n$fn = 50;\n\n// Main parameters\nbean_length = 65;\nbean_width = 18;\nbean_thickness = 10;\nshell_thickness = 1.5;\nseed_count = 6;\n\n// Color definitions\nbean_color = [0.7, 0.8, 0.5];  // Pale green\nhilum_color = [0.4, 0.5, 0.3];  // Darker green seam\n\nmodule flageolet_bean() {\n    // Main bean body - ellipsoid shape\n    difference() {\n        // Outer shell\n        scale([1, 0.8, 0.6])\n        sphere(d = bean_width);\n        \n        // Hollow interior\n        translate([0, 0, -2])\n        scale([0.85, 0.65, 0.45])\n        sphere(d = bean_width);\n    }\n}\n\nmodule bean_curve() {\n    // Curve the bean along its length\n    rotate([0, 0, 10])\n    rotate([15, 0, 0])\n    translate([0, 0, bean_length/2])\n    rotate([90, 0, 0])\n    flageolet_bean();\n}\n\nmodule hilum_seam() {\n    // Central seam along the bean\n    color(hilum_color)\n    translate([-bean_width/2, 0, 0])\n    scale([0.1, 1, 0.9])\n    difference() {\n        cylinder(h = bean_width, d = bean_thickness);\n        translate([0, 0, -0.5])\n        cylinder(h = bean_width + 1, d = bean_thickness - 2);\n    }\n}\n\nmodule seed_texture() {\n    // Small indentations for seed texture\n    for(i = [0:seed_count-1]) {\n        rotate([0, 0, i * 60])\n        translate([bean_width/4, 0, -bean_thickness/4])\n        rotate([90, 0, 0])\n        scale([1, 1, 0.5])\n        sphere(d = 2);\n    }\n}\n\nmodule surface_details() {\n    // Random small bumps and indentations for realism\n    for(i = [1:12]) {\n        rotate([i * 30, 0, 0])\n        translate([rand(i) * 5 - 2.5, rand(i*2) * 3 - 1.5, rand(i*3) * 2 - 1])\n        sphere(d = 0.5);\n    }\n}\n\nfunction rand(x) = (sin(x * 123.456) + 1) / 2;\n\n// Main assembly\ncolor(bean_color)\ndifference() {\n    union() {\n        // Main curved bean body\n        bean_curve();\n        \n        // Add subtle surface variations\n        translate([0, 0, 0])\n        surface_details();\n    }\n    \n    // Remove texture indentations\n    translate([0, 0, 0])\n    seed_texture();\n}\n\n// Add hilum seam\nhilum_seam();\n\n// Add slight flattening on one side for natural bean shape\ntranslate([0, 0, -bean_thickness/2])\nscale([1, 1, 0.95])\nsphere(d = bean_width + 2);",
    "renders": true
  },
  {
    "food_item": "cranberry",
    "openscad_code": "// Realistic Cranberry Model - Medium Complexity\n// Features: bumpy surface, slight asymmetry, stem scar, and natural coloring\n\n// Main parameters\ncranberry_radius = 25;\nbump_height = 1.5;\nbump_count = 20;\nstem_scar_depth = 3;\ncolor_main = [0.8, 0.05, 0.15];\ncolor_highlight = [1, 0.2, 0.3];\n\n// Module for creating a single bump\nmodule surface_bump(radius, height) {\n    // Create irregular bump using scaled sphere\n    translate([0, 0, -height/2]) {\n        scale([1.2, 0.8, 1]) {\n            sphere(r=radius, $fn=8);\n        }\n    }\n}\n\n// Module for creating stem scar\nmodule stem_scar(depth) {\n    color([0.4, 0.05, 0.1]) {\n        difference() {\n            // Main scar depression\n            translate([0, 0, cranberry_radius - depth/2]) {\n                cylinder(h=depth, r=4, $fn=16);\n            }\n            // Remove center for hollow appearance\n            translate([0, 0, cranberry_radius - depth/2 - 1]) {\n                cylinder(h=depth+2, r=2, $fn=16);\n            }\n        }\n        // Add tiny stem remnant\n        translate([0, 0, cranberry_radius - depth + 1]) {\n            cylinder(h=2, r=0.5, $fn=8);\n        }\n    }\n}\n\n// Main cranberry body with surface texture\nmodule cranberry_body() {\n    color(color_main) {\n        difference() {\n            // Base ellipsoid shape\n            scale([1, 1.1, 0.9]) {\n                sphere(r=cranberry_radius, $fn=64);\n            }\n            \n            // Add surface bumps\n            union() {\n                for(i = [0:bump_count-1]) {\n                    angle1 = i * 360 / bump_count;\n                    angle2 = (i * 137.5) % 360; // Golden angle for natural distribution\n                    \n                    // Calculate position on sphere surface\n                    x = cos(angle1) * sin(angle2) * (cranberry_radius - 1);\n                    y = sin(angle1) * sin(angle2) * (cranberry_radius - 1);\n                    z = cos(angle2) * (cranberry_radius - 1);\n                    \n                    translate([x, y, z]) {\n                        rotate([0, 0, angle1]) {\n                            surface_bump(2.5 + sin(i*3)*0.5, bump_height);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Add subtle highlights for realism\nmodule highlights() {\n    color(color_highlight, 0.3) {\n        // Top highlight\n        translate([0, -cranberry_radius/3, cranberry_radius/2]) {\n            scale([0.6, 0.8, 0.3]) {\n                sphere(r=cranberry_radius/2, $fn=32);\n            }\n        }\n        \n        // Side highlight\n        translate([cranberry_radius/2, 0, 0]) {\n            scale([0.3, 0.4, 0.5]) {\n                sphere(r=cranberry_radius/2, $fn=32);\n            }\n        }\n    }\n}\n\n// Combine all elements\nunion() {\n    // Main cranberry body\n    cranberry_body();\n    \n    // Add stem scar on top\n    translate([0, 0, 0]) {\n        stem_scar(stem_scar_depth);\n    }\n    \n    // Add subtle highlights\n    highlights();\n    \n    // Slight rotation for natural appearance\n    rotate([5, -8, 12]) {\n        children();\n    }\n}",
    "renders": true
  },
  {
    "food_item": "scarlet",
    "openscad_code": "// Scarlet Strawberry - Realistic Style, Medium Complexity\n// Approximate size: 60mm length, 45mm width, 35mm height\n\n// Main color\ncolor(\"crimson\") \n\n// Strawberry body with seeds\nmodule strawberry_body() {\n    difference() {\n        // Main berry shape - slightly elongated sphere\n        scale([1, 0.8, 0.7]) \n        sphere(d=50, $fn=50);\n        \n        // Top indentation for stem connection\n        translate([0, 0, 20])\n        cylinder(d1=20, d2=15, h=15, $fn=30);\n        \n        // Bottom point\n        translate([0, 0, -18])\n        sphere(d=8);\n    }\n}\n\n// Generate seeds on strawberry surface\nmodule seeds() {\n    color(\"gold\") {\n        // Create spiral pattern of seeds\n        for (i = [0:35]) {\n            angle = i * 137.5;  // Golden angle for natural spacing\n            radius = 15 + i * 0.7;\n            height = 10 - i * 0.3;\n            \n            translate([\n                radius * cos(angle),\n                radius * sin(angle),\n                height\n            ])\n            rotate([0, 90, angle])\n            scale([1, 1, 0.5])\n            cylinder(d1=2, d2=1, h=3, $fn=6);\n        }\n    }\n}\n\n// Stem with leaves\nmodule stem_and_leaves() {\n    color(\"forestgreen\") {\n        // Central stem\n        translate([0, 0, 22])\n        cylinder(d1=4, d2=6, h=8, $fn=8);\n        \n        // Leaves radiating from stem\n        for (i = [0:5]) {\n            rotate([0, 0, i * 60]) {\n                translate([0, 5, 22])\n                rotate([0, 0, 30])\n                scale([0.8, 1.2, 0.2])\n                sphere(d=12, $fn=8);\n            }\n        }\n        \n        // Smaller leaves\n        for (i = [0:5]) {\n            rotate([0, 0, i * 60 + 30]) {\n                translate([0, 3, 24])\n                scale([0.6, 0.9, 0.2])\n                sphere(d=8, $fn=8);\n            }\n        }\n    }\n}\n\n// Surface texture lines\nmodule texture_lines() {\n    color(\"darkred\") {\n        for (i = [0:11]) {\n            rotate([0, 0, i * 30]) {\n                translate([0, 0, -5])\n                linear_extrude(height=30, twist=15)\n                offset(r=2)\n                polygon(points=[[0, 0], [5, 0], [10, 5], [15, 15], [10, 25], [5, 30], [0, 30]]);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    strawberry_body();\n    seeds();\n    stem_and_leaves();\n    texture_lines();\n}",
    "renders": true
  },
  {
    "food_item": "borlotti",
    "openscad_code": "// Borlotti bean - medium complexity realistic style\n// Uses basic OpenSCAD primitives to create a realistic borlotti bean\n// Size: ~20mm long bean, arranged in a pod ~80mm long\n\n// Color definitions\n$fa = 2;\n$fs = 0.5;\n\nmodule borlotti_bean() {\n    // Main bean body - kidney shape\n    color(\"#CD853F\") {\n        // Bean body - ellipsoid with slight kidney curve\n        translate([0, 0, 5]) {\n            rotate([0, -15, 0]) {\n                scale([1, 0.7, 0.5]) {\n                    sphere(d=12, $fn=32);\n                }\n            }\n        }\n        \n        // Kidney curve depression\n        translate([2, 0, 5.5]) {\n            rotate([0, -15, 0]) {\n                scale([0.8, 0.6, 0.4]) {\n                    sphere(d=8, $fn=32);\n                }\n            }\n        }\n    }\n    \n    // Bean seam line\n    color(\"#8B4513\") {\n        translate([1, 0, 6]) {\n            rotate([0, -15, 0]) {\n                scale([0.1, 0.6, 0.5]) {\n                    cylinder(h=10, d1=2, d2=1);\n                }\n            }\n        }\n    }\n    \n    // Characteristic borlotti speckles\n    color(\"#8B4513\") {\n        for(i = [1:8]) {\n            rotate([0, 0, i * 45]) {\n                translate([-1 + sin(i) * 2, cos(i) * 3, 5 + sin(i) * 0.5]) {\n                    sphere(d=0.8);\n                }\n            }\n        }\n    }\n}\n\nmodule bean_pod_half() {\n    // Half of a bean pod\n    color(\"#90EE90\") {\n        // Main pod shell\n        hull() {\n            // Front curve\n            translate([0, 0, 0]) {\n                scale([1, 0.3, 0.2]) {\n                    sphere(d=80, $fn=20);\n                }\n            }\n            // Back curve slightly offset\n            translate([0, 4, 0]) {\n                scale([0.9, 0.25, 0.15]) {\n                    sphere(d=75, $fn=20);\n                }\n            }\n        }\n    }\n    \n    // Pod texture lines\n    color(\"#228B22\") {\n        for(i = [-30:10:30]) {\n            translate([i, 2, -1]) {\n                rotate([90, 0, 0]) {\n                    scale([1, 0.05, 0.05]) {\n                        cylinder(h=8);\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule borlotti_pod() {\n    // Complete pod with beans inside\n    union() {\n        // Bottom half of pod\n        translate([0, -2, 0]) {\n            bean_pod_half();\n        }\n        \n        // Top half of pod (slightly offset)\n        translate([0, 2, 0]) {\n            rotate([180, 0, 0]) {\n                translate([0, 0, -4]) {\n                    bean_pod_half();\n                }\n            }\n        }\n        \n        // Beans inside pod\n        for(i = [-2:1:2]) {\n            translate([i * 12, 0, 0]) {\n                rotate([0, 0, i * 10]) {\n                    borlotti_bean();\n                }\n            }\n        }\n        \n        // Pod stem\n        color(\"#228B22\") {\n            translate([38, 0, 5]) {\n                rotate([0, 90, 0]) {\n                    cylinder(h=8, d=3);\n                }\n            }\n        }\n        \n        // Small pod curve at end\n        color(\"#90EE90\") {\n            translate([-40, 0, 0]) {\n                rotate([0, 0, -30]) {\n                    scale([0.3, 0.2, 0.1]) {\n                        cylinder(h=10, d=8);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Main assembly\nrotate([0, 90, 0]) {\n    translate([0, 0, 0]) {\n        borlotti_pod();\n    }\n}",
    "renders": true
  },
  {
    "food_item": "butter",
    "openscad_code": "// Butter stick with wrapper partially peeled back\n// Realistic style, medium complexity\n\n// Main dimensions (in mm)\nbutter_width = 25;\nbutter_length = 90;\nbutter_height = 20;\nwrapper_thickness = 0.5;\npeel_back = 30;\n\n// Colors\nbutter_color = [1, 0.9, 0.6];\nwrapper_color = [0.9, 0.85, 0.7];\nwrapper_text_color = [0.7, 0.65, 0.6];\n\n// Butter stick body module\nmodule butter_body() {\n    // Main butter block\n    color(butter_color) {\n        difference() {\n            // Main block\n            translate([-butter_width/2, 0, 0])\n                cube([butter_width, butter_length, butter_height]);\n            \n            // Top surface texture - small indentations\n            for (x = [-butter_width/2+2 : 4 : butter_width/2-2]) {\n                for (y = [5 : 5 : butter_length-5]) {\n                    translate([x, y, butter_height-0.2])\n                        sphere(d=1.2);\n                }\n            }\n            \n            // Side texture marks\n            for (i = [0 : 10 : butter_length-10]) {\n                translate([-butter_width/2-0.1, i+5, 5])\n                    rotate([0, 90, 0])\n                        cylinder(h=butter_width+0.2, r=0.5, $fn=8);\n            }\n        }\n    }\n}\n\n// Wrapper module\nmodule wrapper() {\n    color(wrapper_color) {\n        // Bottom wrapper\n        translate([-butter_width/2-wrapper_thickness, -wrapper_thickness, -wrapper_thickness])\n            cube([butter_width+2*wrapper_thickness, butter_length+wrapper_thickness, wrapper_thickness]);\n        \n        // Side wrapper pieces\n        translate([-butter_width/2-wrapper_thickness, -wrapper_thickness, 0])\n            cube([wrapper_thickness, butter_length+wrapper_thickness, butter_height]);\n        \n        translate([butter_width/2, -wrapper_thickness, 0])\n            cube([wrapper_thickness, butter_length+wrapper_thickness, butter_height]);\n        \n        // End wrapper\n        translate([-butter_width/2-wrapper_thickness, butter_length, 0])\n            cube([butter_width+2*wrapper_thickness, wrapper_thickness, butter_height]);\n        \n        // Top wrapper (partially peeled back)\n        difference() {\n            // Full top wrapper\n            translate([-butter_width/2-wrapper_thickness, -wrapper_thickness, butter_height])\n                cube([butter_width+2*wrapper_thickness, butter_length+wrapper_thickness, wrapper_thickness]);\n            \n            // Peeled back portion\n            translate([-butter_width/2-wrapper_thickness-1, butter_length-peel_back, -1])\n                cube([butter_width+2*wrapper_thickness+2, peel_back+2, butter_height+2]);\n        }\n        \n        // Wrapper flap that peels back\n        translate([0, butter_length-peel_back, butter_height+wrapper_thickness])\n            rotate([80, 0, 0])\n                cube([butter_width+2*wrapper_thickness, peel_back, wrapper_thickness]);\n    }\n    \n    // Print markings on wrapper\n    color(wrapper_text_color) {\n        for (y = [10 : 15 : butter_length-20]) {\n            translate([0, y, butter_height+wrapper_thickness+0.1])\n                cube([butter_width*0.8, 0.5, 0.1]);\n        }\n        \n        // Measurement markings\n        for (i = [1 : 4]) {\n            translate([butter_width/2+wrapper_thickness+0.1, i*butter_length/5, butter_height/2])\n                cube([2, 0.5, 3]);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    butter_body();\n    wrapper();\n}",
    "renders": true
  },
  {
    "food_item": "greatnorthern",
    "openscad_code": "// Great Northern Bean - realistic style, medium complexity\n// Approximate size: 70mm long, 35mm wide, 12mm thick\n\n// Bean parameters\nbean_length = 70;\nbean_width = 35;\nbean_thickness = 12;\nwall_thickness = 2;\n\n// Main bean shape module\nmodule bean_half(height, seed) {\n    difference() {\n        // Basic kidney bean shape\n        hull() {\n            // Left curve\n            translate([-bean_length/3, 0, 0])\n                scale([1.2, 0.8, 1])\n                sphere(d=bean_width);\n            \n            // Right curve\n            translate([bean_length/3, 0, 0])\n                scale([1.2, 0.8, 1])\n                sphere(d=bean_width);\n            \n            // Center connection\n            translate([0, 0, 0])\n                sphere(d=bean_width * 0.9);\n        }\n        \n        // Flatten to half thickness\n        translate([0, 0, -height/2 - 0.1])\n            cube([bean_length * 2, bean_width * 2, height], center=true);\n    }\n}\n\n// Seed texture pattern\nmodule seed_texture() {\n    for(i = [0:8]) {\n        angle = i * 45;\n        distance = bean_width/3 + sin(i * 30) * 3;\n        \n        translate([\n            cos(angle) * distance * 0.8,\n            sin(angle) * distance * 0.5,\n            bean_thickness/2 + 0.5\n        ])\n        rotate([0, 0, angle])\n            scale([1, 0.6, 0.3])\n            sphere(d=1.5);\n    }\n}\n\n// Bean seam detail\nmodule bean_seam() {\n    for(t = [-35:2:35]) {\n        x_pos = t;\n        y_scale = abs(sin(t/10)) * 0.3 + 0.7;\n        \n        translate([x_pos, 0, 0])\n            scale([0.3, y_scale, 0.3])\n            sphere(d=1);\n    }\n}\n\n// Main bean assembly\ncolor([0.85, 0.75, 0.65]) {\n    // Top half\n    translate([0, 0, bean_thickness/4])\n        bean_half(bean_thickness/2, true);\n    \n    // Bottom half\n    mirror([0, 0, 1])\n        translate([0, 0, bean_thickness/4])\n            bean_half(bean_thickness/2, false);\n}\n\n// Surface details\ncolor([0.75, 0.65, 0.55]) {\n    // Seed texture on top\n    seed_texture();\n    \n    // Bean seam\n    rotate([90, 0, 0])\n        translate([0, 0, -bean_thickness/2])\n            bean_seam();\n}\n\n// Subtle ridges for realism\ncolor([0.9, 0.8, 0.7]) {\n    for(i = [0:3]) {\n        angle = i * 30 - 45;\n        translate([\n            cos(angle) * bean_length/4,\n            sin(angle) * bean_width/4,\n            bean_thickness/2 + 0.2\n        ])\n        rotate([0, 0, angle])\n            scale([bean_length/2, 1, 0.5])\n            sphere(d=2);\n    }\n}",
    "renders": true
  },
  {
    "food_item": "smallwhite",
    "openscad_code": "// OpenSCAD code for a realistic small white mushroom (medium complexity)\n// Overall dimensions: ~60mm height, ~50mm cap diameter\n\n$fn = 48; // Smooth curves for 3D printing\n\n// Main mushroom module\nmodule mushroom() {\n    color(\"white\") {\n        // Mushroom cap with realistic dome shape and texture\n        union() {\n            // Main cap dome\n            translate([0, 0, 35]) \n                scale([1, 1, 0.6])\n                sphere(d = 50);\n            \n            // Underside gills texture\n            difference() {\n                translate([0, 0, 35])\n                    scale([1, 1, 0.3])\n                    sphere(d = 48);\n                \n                // Create gill pattern with radial cuts\n                for(i = [0:15]) {\n                    rotate([0, 0, i * 22.5])\n                        translate([0, 0, 30])\n                            cube([30, 2, 10], center = true);\n                }\n            }\n            \n            // Cap rim detail\n            translate([0, 0, 25])\n                cylinder(h = 5, d1 = 48, d2 = 52);\n        }\n        \n        // Stem with slight taper\n        difference() {\n            // Main stem\n            translate([0, 0, 0])\n                cylinder(h = 35, d1 = 18, d2 = 15);\n            \n            // Stem hollow for 3D printing\n            translate([0, 0, -1])\n                cylinder(h = 37, d1 = 12, d2 = 9);\n        }\n        \n        // Stem ring (annulus)\n        translate([0, 0, 22])\n            difference() {\n                cylinder(h = 3, d = 25);\n                cylinder(h = 4, d = 15);\n            }\n        \n        // Base for stability\n        translate([0, 0, -2])\n            cylinder(h = 2, d = 22);\n    }\n    \n    // Realistic spots on cap\n    color(\"ivory\") {\n        for(i = [0:7]) {\n            angle = i * 51.4;\n            radius = 15 + (i % 2 ? 5 : 0);\n            x = cos(angle) * radius;\n            y = sin(angle) * radius;\n            \n            translate([x, y, 45])\n                sphere(d = 4);\n        }\n    }\n    \n    // Small texture details on stem\n    color(\"antiquewhite\") {\n        for(i = [0:3]) {\n            translate([0, 0, 5 + i * 8])\n                rotate([0, 0, i * 30])\n                difference() {\n                    cylinder(h = 3, d = 17);\n                    cylinder(h = 4, d = 16);\n                }\n        }\n    }\n}\n\n// Generate the mushroom\nmushroom();",
    "renders": true
  },
  {
    "food_item": "pink",
    "openscad_code": "// Pink-frosted doughnut with sprinkles (realistic style, medium complexity)\n\n$fn = 50;  // Smooth curves\n\n// Main body: torus shape for doughnut\nmodule doughnut_body() {\n    color(\"#FFC0CB\")  // Light pink frosting\n    difference() {\n        // Outer torus\n        rotate_extrude(angle = 360, $fn = 100)\n            translate([20, 0, 0])\n                circle(r = 10);\n        \n        // Center hole\n        rotate_extrude(angle = 360, $fn = 100)\n            translate([20, 0, 0])\n                circle(r = 6);\n    }\n}\n\n// Frosting layer on top with wavy surface\nmodule frosting_layer() {\n    color(\"#FFB6C1\")  // Slightly darker pink frosting\n    \n    // Create wavy frosting surface using hull of spheres\n    for (a = [0:15:359]) {\n        rotate([0, 0, a])\n            translate([20 + 5 * cos(a * 3), 5 * sin(a * 3), 10])\n                sphere(r = 4 + 1.5 * sin(a * 5));\n    }\n    \n    // Smooth base frosting layer\n    translate([0, 0, 9.5])\n        scale([1.1, 1.1, 0.5])\n            cylinder(h = 2, r = 30);\n}\n\n// Individual sprinkle\nmodule sprinkle() {\n    color(\"#FFFFFF\")  // White sprinkles\n    rotate([90, 0, 0])\n        cylinder(h = 2, r = 0.5, $fn = 8);\n}\n\n// Array of sprinkles on frosting\nmodule sprinkles() {\n    for (i = [0:40]) {\n        angle = i * 137.5;  // Golden angle for natural distribution\n        radius = 15 + 8 * sin(i * 0.7);\n        x = radius * cos(angle);\n        y = radius * sin(angle);\n        z = 11 + 2 * sin(i * 0.5);\n        \n        translate([x, y, z])\n            rotate([0, 0, angle])\n                sprinkle();\n    }\n}\n\n// Dough texture surface bumps\nmodule dough_texture() {\n    color(\"#F5DEB3\")  // Light beige for dough\n    \n    for (i = [0:30]) {\n        angle = i * 73;\n        radius = 20 + 3 * sin(i * 2);\n        x = radius * cos(angle);\n        y = radius * sin(angle);\n        z = -1 + 0.5 * sin(i * 1.5);\n        \n        translate([x, y, z])\n            sphere(r = 0.8 + 0.3 * sin(i));\n    }\n}\n\n// Assembly\nunion() {\n    // Main doughnut body\n    doughnut_body();\n    \n    // Dough texture on bottom\n    dough_texture();\n    \n    // Frosting layer on top\n    frosting_layer();\n    \n    // Sprinkles on frosting\n    sprinkles();\n}",
    "renders": true
  },
  {
    "food_item": "pinto",
    "openscad_code": "// Pinto bean model - realistic style, medium complexity\n// Size: approximately 65mm long, 40mm wide, 20mm thick\n\n$fn = 36;\n\n// Main bean body - kidney shape\nmodule bean_body() {\n    color([0.65, 0.4, 0.25]) {\n        // Central oval\n        translate([0, 0, 0])\n            scale([1.3, 1, 0.6])\n                sphere(20);\n        \n        // Left lobe\n        translate([-25, 0, 0])\n            scale([1.2, 0.9, 0.5])\n                sphere(15);\n        \n        // Right lobe  \n        translate([25, 0, 0])\n            scale([1.2, 0.9, 0.5])\n                sphere(15);\n    }\n}\n\n// Bean seam detail\nmodule bean_seam() {\n    color([0.5, 0.3, 0.15]) {\n        // Central seam groove\n        difference() {\n            translate([0, 0, -2])\n                scale([1.3, 0.3, 0.3])\n                    sphere(20);\n            \n            // Cut groove deeper\n            translate([0, 0, -8])\n                scale([1.35, 0.35, 0.5])\n                    sphere(19);\n        }\n        \n        // Seam branches\n        for (i = [-1, 1]) {\n            rotate([0, 0, i * 30])\n                translate([i * 15, 5, -2])\n                    scale([0.3, 0.3, 0.2])\n                        sphere(10);\n        }\n        \n        rotate([0, 0, 180])\n            translate([0, 5, -2])\n                scale([0.3, 0.3, 0.2])\n                    sphere(10);\n    }\n}\n\n// Pinto bean spot pattern\nmodule bean_spots() {\n    color([0.85, 0.65, 0.45]) {\n        // Random spot pattern\n        spots = [\n            [-15, -8, 2, 3],\n            [10, 5, 1, 2],\n            [-8, 10, 1.5, 2.5],\n            [20, -5, 2, 3],\n            [-20, 0, 1, 1.5],\n            [0, -12, 1.5, 2],\n            [12, -10, 1, 1.5],\n            [-10, -15, 2, 2.5]\n        ];\n        \n        for (spot = spots) {\n            translate([spot[0], spot[1], spot[2]])\n                scale([spot[3], spot[3] * 0.8, 0.5])\n                    sphere(1.5);\n        }\n    }\n}\n\n// Bean edge detail for realism\nmodule bean_edge() {\n    color([0.7, 0.45, 0.28]) {\n        // Thin raised edge around bean perimeter\n        difference() {\n            // Outer edge\n            translate([0, 0, 1])\n                scale([1.35, 1.05, 0.65])\n                    sphere(20);\n            \n            // Cut inner part\n            translate([0, 0, -2])\n                scale([1.3, 1, 0.6])\n                    sphere(19.5);\n        }\n    }\n}\n\n// Slight texture dimples\nmodule surface_texture() {\n    color([0.6, 0.38, 0.22]) {\n        // Small dimples for organic texture\n        for (i = [0:5:35]) {\n            rotate([0, 0, i])\n                translate([random(-15, 15), random(-10, 10), random(-1, 3)])\n                    scale([1, 1, 0.3])\n                        sphere(0.8);\n        }\n    }\n}\n\n// Helper function for random values\nfunction random(min, max) = min + (max - min) * (sin(12345 * $vpr[0] + 67890 * $vpr[1]) + 1) / 2;\n\n// Main assembly\nunion() {\n    bean_body();\n    bean_edge();\n    bean_seam();\n    bean_spots();\n    surface_texture();\n}\n\n// Position for printing\nrotate([0, 180, 0])\n    translate([0, 0, -20]);",
    "renders": true
  },
  {
    "food_item": "anasazi",
    "openscad_code": "// Anasazi corn-on-the-cob with husk in realistic style\n// Medium complexity – approx. 95 lines\n\n// Corn color\ncorn_color = \"#F5E050\";\nhusk_color = \"#2E8B57\";\n\nmodule corn_kernel(x, y, rot) {\n    // Single rounded kernel\n    translate([x, y, 0])\n    rotate([0, 0, rot])\n    scale([1, 1.1, 1.2])\n    sphere(d = 3.2, $fn = 8);\n}\n\nmodule corn_row(offset_z, rot) {\n    // One straight row of kernels\n    for (i = [-28:6:28]) {\n        corn_kernel(i, 0, rot);\n    }\n}\n\nmodule corn_cob() {\n    color(corn_color) {\n        // Core cylinder\n        cylinder(h = 70, d = 18, $fn = 36);\n        \n        // Kernel rows around the cob\n        for (a = [0:20:340]) {\n            rotate([0, 0, a])\n            translate([9, 0, 0])\n            corn_row(0, a);\n        }\n        \n        // Top dome\n        translate([0, 0, 35])\n        sphere(d = 18, $fn = 36);\n        \n        // Bottom flat\n        translate([0, 0, -35])\n        cylinder(h = 2, d = 18, $fn = 36);\n    }\n}\n\nmodule husk_leaf(side, angle) {\n    color(husk_color) {\n        translate([0, side * 9, 0])\n        rotate([0, 0, angle])\n        scale([0.8, 0.3, 1])\n        cylinder(h = 75, d = 40, $fn = 3);\n    }\n}\n\nmodule silk_strand() {\n    // Thin cylinder for silk\n    color(\"beige\")\n    rotate([90, 0, rand() * 360])\n    cylinder(h = 12 + rand() * 10, d = 0.6, $fn = 6);\n}\n\nmodule corn_silk() {\n    // Random silk strands at top\n    for (i = [1:30]) {\n        translate([rand() * 10 - 5, rand() * 10 - 5, 36 + rand() * 5])\n        silk_strand();\n    }\n}\n\n// Main assembly\ndifference() {\n    union() {\n        corn_cob();\n        \n        // Husk leaves\n        for (i = [0:45:315]) {\n            husk_leaf(1, i);\n            husk_leaf(-1, i + 22);\n        }\n    }\n    \n    // Remove bottom husk excess for printing\n    translate([0, 0, -40])\n    cube([100, 100, 10], center = true);\n}\n\n// Add silk\ncorn_silk();",
    "renders": true
  },
  {
    "food_item": "appaloosa",
    "openscad_code": "// Appaloosa Cookie – medium-complexity realistic style\n// Basic shape: thin wafer-style cookie with appaloosa-style dark spots and slightly irregular edge\n\n// Parameters\ncookie_d = 65;            // overall diameter\ncookie_t = 5;             // thickness\nspot_count = 12;          // number of dark spots\nspot_d = 6;               // base spot diameter\nwall = 1.2;               // printable wall thickness\nseed = 42;                // reproducible random seed\n\n// Cookie base\nmodule cookie_base() {\n    difference() {\n        cylinder(h = cookie_t, d = cookie_d, $fn = 64);           // main disc\n        translate([0,0,-0.1])\n            cylinder(h = cookie_t + 0.2, d = cookie_d - wall*2, $fn = 64); // hollow underside\n    }\n}\n\n// Irregular edge bumps for realism\nmodule edge_bumps() {\n    for(i=[0:23]) {\n        angle = i*15 + (i%2)*7.5;\n        r = cookie_d/2 + (i%3)*2;\n        translate([r*cos(angle), r*sin(angle), cookie_t/2])\n            rotate([0,0,angle])\n            scale([1.3,1,1])\n            cylinder(h = cookie_t, d = 4 + (i%2)*2, $fn = 8);\n    }\n}\n\n// Small random seeds on surface\nmodule seeds() {\n    for(i=[0:30]) {\n        r = cookie_d/2 - 5;\n        x = rands(-r, r, 1, seed+i)[0];\n        y = rands(-r, r, 1, seed+i+100)[0];\n        if(norm([x,y]) < r) {\n            translate([x, y, cookie_t])\n                scale([1,1,0.5])\n                sphere(d = 1.2, $fn=6);\n        }\n    }\n}\n\n// Appaloosa-style dark spots\nmodule spots() {\n    for(i=[0:spot_count-1]) {\n        angle = i*360/spot_count + rands(-15,15,1,seed+i)[0];\n        r = rands(cookie_d*0.15, cookie_d*0.4, 1, seed+i+200)[0];\n        x = r*cos(angle);\n        y = r*sin(angle);\n        size = spot_d + rands(-1.5,1.5,1,seed+i+300)[0];\n        translate([x, y, cookie_t])\n            cylinder(h = 0.6, d = size, $fn = 20);\n    }\n}\n\n// Final assembly\ncolor(\"burlywood\") {\n    union() {\n        cookie_base();\n        edge_bumps();\n    }\n}\ncolor(\"saddlebrown\") {\n    translate([0,0,0.01])\n        spots();\n}\ncolor(\"peru\")\n    seeds();",
    "renders": true
  },
  {
    "food_item": "calico",
    "openscad_code": "// Calico Cat-Shaped Cookie (Realistic Style, Medium Complexity)\n// Overall size: ~70mm x 60mm x 12mm\n\ncookie_thickness = 8;\ndetail_height = 2;\nedge_bevel = 1.5;\n\n// Main cookie body\nmodule cat_body() {\n    difference() {\n        // Base cookie shape\n        linear_extrude(height = cookie_thickness, convexity = 10)\n            offset(r = edge_bevel)\n                polygon(points = [\n                    [0, 30], [-20, 25], [-30, 10], [-25, -15], [-15, -25],\n                    [0, -30], [15, -25], [25, -15], [30, 10], [20, 25]\n                ]);\n        \n        // Ear cutouts\n        translate([-20, 25, -1])\n            cube([12, 12, cookie_thickness + 2], center = true);\n        translate([20, 25, -1])\n            cube([12, 12, cookie_thickness + 2], center = true);\n        \n        // Neck cutout\n        translate([0, -28, -1])\n            cube([14, 8, cookie_thickness + 2], center = true);\n    }\n}\n\n// Cat ears\nmodule ears() {\n    color(\"#C19A6B\")\n    for (x = [-23, 23]) {\n        translate([x, 25, cookie_thickness - detail_height])\n            rotate([0, 0, x > 0 ? 30 : -30])\n                cube([8, 10, detail_height]);\n    }\n}\n\n// Calico patches\nmodule patches() {\n    color(\"#8B4513\")\n    union() {\n        // Large dark patches\n        translate([-15, 15, cookie_thickness])\n            scale([1, 0.6, 1])\n                cylinder(h = detail_height, d = 20, $fn = 32);\n        \n        translate([12, -5, cookie_thickness])\n            rotate([0, 0, 45])\n                cube([18, 12, detail_height]);\n        \n        translate([-5, -18, cookie_thickness])\n            scale([0.8, 1.2, 1])\n                sphere(d = 15);\n    }\n}\n\n// Orange patches\nmodule orange_patches() {\n    color(\"#D2691E\")\n    union() {\n        translate([8, 18, cookie_thickness])\n            sphere(d = 12);\n        \n        translate([-18, -8, cookie_thickness])\n            rotate([0, 0, -30])\n                cube([15, 8, detail_height]);\n        \n        translate([15, -20, cookie_thickness])\n            sphere(d = 10);\n    }\n}\n\n// Eyes\nmodule eyes() {\n    color(\"#2F4F4F\")\n    for (x = [-8, 8]) {\n        translate([x, 8, cookie_thickness])\n            cylinder(h = detail_height, d = 6, $fn = 32);\n    }\n}\n\n// Nose\nmodule nose() {\n    color(\"#8B0000\")\n    translate([0, -2, cookie_thickness])\n        cylinder(h = detail_height, d1 = 5, d2 = 0, $fn = 3);\n}\n\n// Mouth lines\nmodule mouth() {\n    color(\"#A0522D\")\n    translate([0, -8, cookie_thickness])\n        cube([0.5, 8, detail_height]);\n    \n    for (angle = [30, -30]) {\n        rotate([0, 0, angle])\n            translate([0, -12, cookie_thickness])\n                cube([0.5, 6, detail_height]);\n    }\n}\n\n// Whiskers\nmodule whiskers() {\n    color(\"#D2691E\")\n    for (side = [-1, 1]) {\n        for (i = [-1, 0, 1]) {\n            translate([side * 15, 5 + i * 3, cookie_thickness])\n                rotate([0, 0, side * (15 + i * 5)])\n                    cube([side * 8, 0.5, detail_height]);\n        }\n    }\n}\n\n// Assemble the cookie\ncolor(\"#F5DEB3\")\ncat_body();\n\ncolor(\"#D2691E\")\nears();\n\npatches();\norange_patches();\neyes();\nnose();\nmouth();\nwhiskers();",
    "renders": true
  },
  {
    "food_item": "soldier",
    "openscad_code": "// Soldier-shaped cookie cutter (gingerbread style)\n// Overall dimensions: ~70mm height, 35mm width, 8mm thick\n\n// Color constants for gingerbread\n$fa = 1; $fs = 1;\n\nmodule body() {\n    // Main torso - gingerbread color\n    color([0.6, 0.4, 0.25]) \n    difference() {\n        union() {\n            // Chest\n            cube([20, 8, 25], center=true);\n            \n            // Waist taper\n            translate([0, 0, -12])\n                scale([0.8, 1, 0.7])\n                cube([20, 8, 15], center=true);\n                \n            // Legs\n            for(side = [-1, 1]) {\n                translate([side * 6, 0, -28])\n                    cube([8, 8, 18], center=true);\n            }\n        }\n        \n        // Leg separation cut\n        translate([0, 0, -28])\n            cube([4, 10, 18], center=true);\n    }\n}\n\nmodule head() {\n    color([0.6, 0.4, 0.25])\n    union() {\n        // Main head\n        translate([0, 0, 18])\n            sphere(d=18);\n            \n        // Helmet - darker brown\n        color([0.5, 0.3, 0.2])\n        translate([0, 0, 25])\n            scale([1.2, 1.2, 0.6])\n            sphere(d=18);\n    }\n}\n\nmodule arms() {\n    color([0.6, 0.4, 0.25])\n    for(side = [-1, 1]) {\n        // Upper arm\n        translate([side * 14, 0, 8])\n            rotate([0, 0, side * 20])\n            cube([12, 8, 8], center=true);\n            \n        // Lower arm\n        translate([side * 22, -2, 0])\n            rotate([0, 0, side * 45])\n            cube([12, 8, 8], center=true);\n    }\n}\n\nmodule frosting_details() {\n    // White frosting decorations\n    color([0.95, 0.95, 0.9]) {\n        // Buttons - 3 down front\n        for(i = [0:2]) {\n            translate([0, 5, 10 - i*8])\n                sphere(d=3);\n        }\n        \n        // Belt buckle\n        translate([0, 5, -6])\n            cube([6, 1, 4], center=true);\n            \n        // Helmet band\n        translate([0, 0, 20])\n            rotate_extrude()\n                translate([9, 0, 0])\n                    circle(d=3);\n                    \n        // Boots\n        for(side = [-1, 1]) {\n            translate([side * 6, 0, -36])\n                cube([9, 1, 3], center=true);\n        }\n    }\n}\n\nmodule face_details() {\n    color([0.1, 0.1, 0.1]) {\n        // Eyes\n        for(side = [-1, 1]) {\n            translate([side * 4, 7, 18])\n                sphere(d=2);\n        }\n        \n        // Mouth\n        translate([0, 7, 14])\n            cube([6, 1, 1], center=true);\n    }\n}\n\n// Main assembly\nunion() {\n    body();\n    head();\n    arms();\n    frosting_details();\n    face_details();\n}",
    "renders": true
  },
  {
    "food_item": "jacobs",
    "openscad_code": "// Jacobs cream cracker - realistic style, medium complexity\n// Dimensions: 50mm x 50mm x 7mm (standard cracker size)\n\n// Overall cracker module\nmodule cracker() {\n    // Base cracker body\n    color([0.95, 0.92, 0.85]) // Off-white cream color\n    \n    difference() {\n        // Main body with rounded edges\n        union() {\n            // Central thick body\n            translate([0, 0, 2.5])\n                cube([50, 50, 5], center=true);\n            \n            // Rounded top edges\n            for(i = [-20, 20]) {\n                translate([i, 0, 4.5])\n                    rotate([90, 0, 0])\n                        cylinder(h=25, r=2.5, $fn=20);\n                translate([0, i, 4.5])\n                    rotate([0, 90, 0])\n                        cylinder(h=25, r=2.5, $fn=20);\n            }\n        }\n        \n        // Corner rounding cuts\n        for(x = [-20, 20])\n            for(y = [-20, 20])\n                translate([x, y, 0])\n                    cylinder(h=10, r=2.5, center=true, $fn=20);\n    }\n    \n    // Docking holes (air pockets)\n    color([0.9, 0.87, 0.8])\n    for(x = [-30, -15, 0, 15, 30])\n        for(y = [-30, -15, 0, 15, 30])\n            translate([x, y, 2])\n                cylinder(h=4, r=1.5, $fn=12);\n    \n    // Surface texture - raised dots\n    color([0.97, 0.94, 0.88])\n    for(x = [-35:5:35])\n        for(y = [-35:5:35])\n            if(abs(x) < 23 && abs(y) < 23)\n                translate([x, y, 5.1])\n                    sphere(r=0.4, $fn=6);\n    \n    // Edge perforation pattern\n    color([0.92, 0.89, 0.82])\n    // Top edge\n    for(x = [-22.5:2.5:22.5]) {\n        translate([x, 24.5, 2.5])\n            cube([1.5, 1, 5], center=true);\n        translate([x, -24.5, 2.5])\n            cube([1.5, 1, 5], center=true);\n    }\n    // Side edges\n    for(y = [-22.5:2.5:22.5]) {\n        translate([24.5, y, 2.5])\n            cube([1, 1.5, 5], center=true);\n        translate([-24.5, y, 2.5])\n            cube([1, 1.5, 5], center=true);\n    }\n    \n    // Center \"Jacob's\" embossing (simplified representation)\n    color([0.85, 0.82, 0.75])\n    translate([0, 0, 5.2])\n        cube([20, 8, 0.3], center=true);\n    \n    // Wheat stalk pattern corners\n    color([0.88, 0.85, 0.78])\n    for(angle = [45, 135, 225, 315])\n        rotate([0, 0, angle])\n            translate([18, 18, 5.1])\n                wheat_stalk();\n}\n\n// Wheat stalk detail module\nmodule wheat_stalk() {\n    // Main stalk\n    rotate([0, 0, -15])\n        for(i = [0:2:8]) {\n            translate([i*0.3, -i*0.1, 0])\n                cube([0.6, 0.3, 0.2], center=true);\n        }\n    \n    // Wheat grains\n    for(i = [0:2:6]) {\n        translate([i*0.3, -i*0.1 + 0.5, 0.1])\n            sphere(r=0.25, $fn=8);\n        translate([i*0.3, -i*0.1 - 0.5, 0.1])\n            sphere(r=0.25, $fn=8);\n    }\n}\n\n// Generate the cracker\ncracker();",
    "renders": true
  },
  {
    "food_item": "eye",
    "openscad_code": "// Realistic Eyeball Food Item - 3D Printable\n// Dimensions: 60mm diameter eyeball\n\n$fn = 64;\n\n// Main eyeball module\nmodule eyeball() {\n    // White outer layer (sclera)\n    color(\"white\")\n    difference() {\n        sphere(d = 60);\n        \n        // Hollow out the inside for printing\n        translate([0, 0, -1])\n            sphere(d = 56);\n    }\n    \n    // Iris - colored part\n    color([0.2, 0.5, 0.2])  // Green iris\n    translate([0, 0, 29])\n    difference() {\n        cylinder(d1 = 30, d2 = 28, h = 4);\n        translate([0, 0, -1])\n            cylinder(d1 = 15, d2 = 15, h = 6);\n    }\n    \n    // Pupil - black center\n    color(\"black\")\n    translate([0, 0, 32])\n    cylinder(d = 12, h = 2);\n    \n    // Blood vessels on sclera\n    color([0.8, 0.1, 0.1])\n    for (i = [0:15:359]) {\n        rotate([0, 0, i])\n        translate([29, 0, 15])\n        rotate([90, 0, 0])\n        scale([0.3, 1, 1])\n        cylinder(h = 25, d1 = 1.5, d2 = 0.5);\n    }\n    \n    // Additional blood vessels\n    for (i = [30:30:359]) {\n        rotate([0, 0, i])\n        translate([27, 0, 20])\n        rotate([85, 0, 0])\n        scale([0.3, 1, 1])\n        cylinder(h = 20, d1 = 1.2, d2 = 0.5);\n    }\n    \n    // Eye texture - small bumps for realistic surface\n    color(\"white\")\n    for (i = [0:45:359]) {\n        for (j = [15:15:75]) {\n            rotate([0, 0, i])\n            rotate([j, 0, 0])\n            translate([29, 0, 0])\n            sphere(d = 1.5);\n        }\n    }\n    \n    // Eye lid details\n    color([0.95, 0.85, 0.85])\n    translate([0, 0, 30])\n    difference() {\n        intersection() {\n            sphere(d = 62);\n            translate([0, 0, -30])\n                cube([70, 70, 35], center = true);\n        }\n        sphere(d = 58);\n    }\n    \n    // Lower eyelid\n    translate([0, 0, -30])\n    difference() {\n        intersection() {\n            sphere(d = 62);\n            translate([0, 0, 30])\n                cube([70, 70, 35], center = true);\n        }\n        sphere(d = 58);\n    }\n    \n    // Eyelid texture lines\n    color([0.8, 0.7, 0.7])\n    for (i = [-25:5:25]) {\n        translate([i, 0, 30])\n        rotate([0, 90, 0])\n        scale([1, 0.3, 1])\n        cylinder(h = 30, d = 0.5);\n    }\n    \n    for (i = [-25:5:25]) {\n        translate([i, 0, -30])\n        rotate([0, 90, 0])\n        scale([1, 0.3, 1])\n        cylinder(h = 30, d = 0.5);\n    }\n}\n\n// Create the eyeball\neyeball();",
    "renders": true
  },
  {
    "food_item": "crowder",
    "openscad_code": "color(\"goldenrod\")\nunion(){\n    // Main crowder body - slightly flattened sphere\n    scale([1, 0.9, 0.6])\n        sphere(d = 60, $fn = 48);\n\n    // Top stem\n    translate([0, 0, 30])\n        cylinder(h = 8, d1 = 6, d2 = 4, $fn = 16);\n\n    // Kernel pattern\n    for(a = [0:30:360])\n        rotate([0, 0, a])\n            translate([0, 22, 3])\n                difference(){\n                    scale([1, 0.6, 0.5])\n                        sphere(d = 6, $fn = 12);\n                    translate([0, 0, -0.5])\n                        cube([6, 6, 1], center = true);\n                }\n\n    // Second row of kernels\n    for(a = [15:30:360])\n        rotate([0, 0, a])\n            translate([0, 18, 1])\n                difference(){\n                    scale([1, 0.6, 0.5])\n                        sphere(d = 5.5, $fn = 12);\n                    translate([0, 0, -0.5])\n                        cube([5.5, 5.5, 1], center = true);\n                }\n\n    // Bottom husk leaves\n    color(\"forestgreen\")\n    for(i = [-2, 0, 2])\n        rotate([i * 5, 0, 0])\n            translate([0, 0, -28])\n                rotate([90, 0, 0])\n                    cylinder(h = 35, r1 = 12, r2 = 8, $fn = 3);\n\n    // Silk strands\n    color(\"cornsilk\")\n    for(a = [0:20:360])\n        rotate([0, 0, a])\n            translate([0, 8, 28])\n                rotate([90 + sin(a * 3) * 5, 0, 0])\n                    cylinder(h = 10 + sin(a * 5) * 3, d = 1.5, $fn = 8);\n}",
    "renders": true
  },
  {
    "food_item": "purplehull",
    "openscad_code": "// Purplehull Pea Pod with Peas Inside\n// Realistic style, medium complexity\n\ncolor([0.4, 0.2, 0.6]) \ndifference() {\n    // Main pod body - slightly curved cylinder\n    translate([0, 0, 15])\n    rotate([0, 90, 0])\n    scale([1, 1.2, 1])\n    cylinder(h = 80, r1 = 12, r2 = 8, $fn = 32);\n    \n    // Hollow out the pod for peas\n    translate([0, 0, 15])\n    rotate([0, 90, 0])\n    scale([1, 1.2, 1])\n    cylinder(h = 78, r1 = 10, r2 = 6, $fn = 32);\n}\n\n// Pod seam along top\ntranslate([0, 0, 15])\nrotate([0, 90, 0])\nscale([1, 1.2, 1])\ndifference() {\n    cylinder(h = 80, r1 = 12.2, r2 = 8.2, $fn = 32);\n    translate([0, -2, -1])\n    cube([24, 4, 82]);\n}\n\n// Create pea module\nmodule pea(pos_x, pos_y, pos_z) {\n    color([0.15, 0.6, 0.25])\n    translate([pos_x, pos_y, pos_z])\n    sphere(r = 4, $fn = 16);\n}\n\n// Place peas inside pod using loops\nfor(i = [-15:15:15]) {\n    pea(i * 0.7, 0, 15);\n    pea(i * 0.7, 0, 20);\n}\n\n// Pod tip - curved end\ntranslate([0, 0, 55])\nrotate([0, 90, 0])\nscale([1, 1.2, 1])\nsphere(r = 8, $fn = 32);\n\n// Pod stem\ntranslate([0, 0, 0])\nrotate([0, 90, 0])\ncolor([0.3, 0.15, 0.45])\ncylinder(h = 8, r1 = 3, r2 = 2, $fn = 16);\n\n// Texture lines on pod surface\nmodule texture_line(offset) {\n    color([0.35, 0.18, 0.55])\n    translate([0, offset, 15])\n    rotate([0, 90, 0])\n    scale([1, 1.2, 1])\n    cylinder(h = 70, r1 = 12.1, r2 = 8.1, $fn = 32);\n}\n\n// Add subtle texture ridges\ntexture_line(0.5);\ntexture_line(-0.5);\n\n// Small bumps for realistic texture\nmodule bump(x_pos, z_pos) {\n    color([0.45, 0.25, 0.65])\n    translate([x_pos, 12.2, z_pos])\n    sphere(r = 0.8, $fn = 8);\n}\n\n// Add bumps along pod sides\nfor(z = [10:10:50]) {\n    for(x = [-8:4:8]) {\n        bump(x, z);\n    }\n}",
    "renders": true
  },
  {
    "food_item": "cream",
    "openscad_code": "$fn = 50;\n\n// Cream swirl top\nmodule cream_swirl() {\n    color(\"ivory\") {\n        for (i = [0:6]) {\n            rotate([0, 0, i * 60]) {\n                translate([0, 0, i * 2]) {\n                    scale([1 - i * 0.08, 1 - i * 0.08, 1]) {\n                        cylinder(h = 8, r1 = 12 - i, r2 = 10 - i, center = false);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Cream base\nmodule cream_base() {\n    color(\"ivory\") {\n        difference() {\n            cylinder(h = 20, r1 = 20, r2 = 18, center = false);\n            // Hollow out the base\n            translate([0, 0, 2]) {\n                cylinder(h = 18, r1 = 16, r2 = 14, center = false);\n            }\n        }\n    }\n}\n\n// Small air bubbles for texture\nmodule bubbles() {\n    color(\"ivory\") {\n        for (i = [1:15]) {\n            translate([\n                sin(i * 137.5) * 15,\n                cos(i * 137.5) * 15,\n                5 + (i % 3) * 4\n            ]) {\n                sphere(r = 0.5 + (i % 3) * 0.3);\n            }\n        }\n    }\n}\n\n// Surface texture lines\nmodule texture_lines() {\n    color(\"ivory\") {\n        for (i = [0:12]) {\n            rotate([0, 0, i * 15]) {\n                translate([0, 16, 10]) {\n                    rotate([90, 0, 0]) {\n                        cylinder(h = 0.5, r = 0.3, center = true);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Main cream assembly\nunion() {\n    cream_base();\n    \n    // Position swirl on top\n    translate([0, 0, 20]) {\n        cream_swirl();\n    }\n    \n    // Add texture details\n    bubbles();\n    texture_lines();\n    \n    // Small decorative peak\n    translate([0, 0, 28]) {\n        color(\"ivory\") {\n            cylinder(h = 3, r1 = 3, r2 = 0, center = false);\n        }\n    }\n    \n    // Additional swirl detail\n    for (j = [1:3]) {\n        translate([sin(j * 120) * 8, cos(j * 120) * 8, 28]) {\n            rotate([0, 0, j * 120]) {\n                color(\"ivory\") {\n                    cylinder(h = 2, r1 = 2, r2 = 0, center = false);\n                }\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "food_item": "zipper",
    "openscad_code": "// Realistic Zipper Banana\n// A banana-shaped food item with working zipper teeth\n\n$fn = 32;\n\n// Colors\nbanana_yellow = [0.98, 0.85, 0.15];\nbanana_brown = [0.4, 0.25, 0.05];\nzipper_gold = [0.8, 0.7, 0.15];\nzipper_dark = [0.3, 0.3, 0.3];\n\n// Main banana body\nmodule banana_body() {\n    color(banana_yellow)\n    union() {\n        // Main curved body using hull of spheres\n        for(i = [0:10]) {\n            rotate([0, 0, i * 9])\n            translate([sin(i * 9) * 20, cos(i * 9) * 20, 0])\n            scale([1 - i * 0.06, 1 - i * 0.04, 1])\n            sphere(d = 25 - i * 1.5);\n        }\n        \n        // Tapered end\n        translate([0, 45, 0])\n        scale([0.5, 0.5, 1])\n        sphere(d = 15);\n    }\n}\n\n// Banana peel texture\nmodule banana_texture() {\n    color(banana_yellow)\n    difference() {\n        banana_body();\n        \n        // Peel split lines\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90 + 45])\n            translate([-5, 0, -15])\n            cube([40, 1, 30]);\n        }\n        \n        // Small texture dots\n        for(i = [0:50]) {\n            rotate([0, 0, i * 7.2])\n            translate([sin(i * 7.2) * 15, cos(i * 7.2) * 15, 12])\n            sphere(d = 1.5);\n        }\n    }\n}\n\n// Individual zipper tooth\nmodule zipper_tooth() {\n    color(zipper_gold)\n    union() {\n        cube([3, 2, 1.5]);\n        translate([1.5, 1, 1.5])\n        cylinder(h = 1, d = 1.5);\n    }\n}\n\n// Zipper teeth along curve\nmodule zipper_teeth() {\n    for(i = [0:30]) {\n        angle = i * 6;\n        translate([sin(angle) * 18, cos(angle) * 18, 12.5])\n        rotate([90, 0, angle + 90])\n        zipper_tooth();\n    }\n}\n\n// Zipper pull tab\nmodule zipper_pull() {\n    color(zipper_dark)\n    union() {\n        // Main slider\n        translate([0, 0, 14])\n        cube([5, 8, 3]);\n        \n        // Handle\n        translate([2.5, 4, 16.5])\n        rotate([90, 0, 0])\n        cylinder(h = 8, d = 2);\n        \n        // Grip ring\n        translate([2.5, 4, 21])\n        rotate([90, 0, 0])\n        torus(3, 0.8);\n    }\n}\n\n// Banana stem\nmodule banana_stem() {\n    color(banana_brown)\n    translate([0, -45, 0])\n    rotate([0, 0, 180])\n    cylinder(h = 12, d1 = 8, d2 = 4);\n}\n\n// Assembly\nunion() {\n    // Main banana with texture\n    banana_texture();\n    \n    // Zipper teeth\n    zipper_teeth();\n    \n    // Zipper pull (positioned at 30°)\n    rotate([0, 0, 30])\n    translate([sin(30) * 18, cos(30) * 18, 0])\n    zipper_pull();\n    \n    // Stem\n    banana_stem();\n}",
    "renders": true
  },
  {
    "food_item": "whippoorwill",
    "openscad_code": "// Whippoorwill Bird-Shaped Cookie for 3D Printing\n// Realistic style, medium complexity\n\n// Colors\ncolor_brown = [139/255, 69/255, 19/255];\ncolor_light_brown = [210/255, 180/255, 140/255];\ncolor_dark_brown = [101/255, 67/255, 33/255];\ncolor_beak = [255/255, 215/255, 0/255];\n\n// Base thickness for cookie\nbase_thickness = 5;\n\n// Main cookie body module\nmodule cookie_body() {\n    // Main oval body\n    difference() {\n        scale([1.2, 1, 1]) \n            cylinder(h=base_thickness, d=45, $fn=32);\n        \n        // Wing cutouts\n        translate([5, 15, -1])\n            rotate([0, 0, -30])\n                cube([25, 8, base_thickness+2], center=true);\n        translate([5, -15, -1])\n            rotate([0, 0, 30])\n                cube([25, 8, base_thickness+2], center=true);\n    }\n}\n\n// Head module\nmodule cookie_head() {\n    // Rounded head\n    translate([-20, 0, 0])\n        scale([1.3, 1, 0.8])\n            sphere(d=20, $fn=32);\n}\n\n// Beak module\nmodule cookie_beak() {\n    // Small triangular beak\n    translate([-30, 0, -2])\n        rotate([0, 0, -90])\n            cylinder(h=12, d1=6, d2=0, $fn=3);\n}\n\n// Tail feathers module\nmodule cookie_tail() {\n    // Fan tail\n    for(i=[-2:2]) {\n        rotate([0, 0, i*20])\n            translate([22, i*3, 0])\n                scale([1.5, 0.3, 1])\n                    cylinder(h=15, d=8, $fn=8);\n    }\n}\n\n// Wing detail texture\nmodule wing_texture() {\n    // Feather lines on wings\n    for(i=[-5:5]) {\n        translate([10, i*2.5, base_thickness-0.5])\n            rotate([0, 0, 15])\n                scale([1, 0.1, 0.5])\n                    cube([20, 1, 1]);\n    }\n}\n\n// Body texture pattern\nmodule body_texture() {\n    // Spot pattern\n    for(i=[-2:2]) {\n        for(j=[-3:3]) {\n            if((i+j)%2==0) {\n                translate([i*8, j*6, base_thickness-0.5])\n                    scale([1, 0.8, 0.3])\n                        sphere(d=3, $fn=16);\n            }\n        }\n    }\n}\n\n// Eye details\nmodule cookie_eyes() {\n    // Left eye\n    translate([-25, 5, 2])\n        color(color_dark_brown)\n            sphere(d=3, $fn=16);\n    \n    // Right eye\n    translate([-25, -5, 2])\n        color(color_dark_brown)\n            sphere(d=3, $fn=16);\n}\n\n// Main assembly\ncolor(color_light_brown) {\n    union() {\n        // Base cookie\n        cookie_body();\n        cookie_head();\n        cookie_beak();\n        cookie_tail();\n        \n        // Add texture details\n        color(color_brown) {\n            wing_texture();\n            body_texture();\n        }\n        \n        // Eyes\n        cookie_eyes();\n        \n        // Bottom support ring for stability\n        translate([0, 0, -base_thickness/2])\n            cylinder(h=base_thickness/2, d=50, $fn=32);\n    }\n}",
    "renders": true
  },
  {
    "food_item": "mississippi",
    "openscad_code": "// Mississippi Mud Pie - 3D printable food model\n// Features chocolate crust, creamy filling, chocolate shavings and whipped cream\n\n$fn = 30;  // Smooth curves for 3D printing\n\n// Main dimensions (mm)\npie_diameter = 80;\npie_height = 25;\ncrust_thickness = 4;\nfilling_height = 15;\nwhip_height = 6;\n\n// Colors\nchocolate_color = [0.4, 0.2, 0.1];\ncream_color = [0.95, 0.9, 0.85];\ndark_chocolate = [0.25, 0.12, 0.06];\n\n// Chocolate cookie crust\nmodule crust() {\n    color(chocolate_color) {\n        difference() {\n            cylinder(h = pie_height, r1 = pie_diameter/2, r2 = pie_diameter/2 * 0.95);\n            translate([0, 0, crust_thickness])\n                cylinder(h = pie_height, r1 = pie_diameter/2 - 8, r2 = pie_diameter/2 * 0.95 - 8);\n        }\n    }\n}\n\n// Creamy chocolate filling with slight dome\nmodule filling() {\n    color(cream_color) {\n        translate([0, 0, crust_thickness])\n            cylinder(h = filling_height, r1 = pie_diameter/2 - 8.5, r2 = pie_diameter/2 - 8);\n        \n        // Create gentle dome top\n        translate([0, 0, crust_thickness + filling_height - 2])\n            scale([1, 1, 0.3])\n                sphere(d = pie_diameter - 17);\n    }\n}\n\n// Individual chocolate shaving\nmodule chocolate_shaving() {\n    color(dark_chocolate) {\n        scale([8, 3, 0.5])\n            sphere(d = 1);\n    }\n}\n\n// Sprinkle chocolate shavings on top\nmodule chocolate_shavings() {\n    for(i = [0:35]) {\n        angle = i * 137.5;  // Golden angle for natural distribution\n        radius = (pie_diameter/2 - 15) * sqrt(i/35);\n        translate([\n            cos(angle) * radius,\n            sin(angle) * radius,\n            crust_thickness + filling_height + 1\n        ]) {\n            rotate([0, 0, angle + rand(i) * 30])\n                chocolate_shaving();\n        }\n    }\n}\n\n// Whipped cream rosette\nmodule whipped_rosette() {\n    color(cream_color) {\n        for(i = [0:5]) {\n            rotate([0, 0, i * 60])\n                translate([3, 0, 0])\n                    rotate([90, 0, 0])\n                        cylinder(h = 2, r1 = 2.5, r2 = 1.5);\n        }\n        cylinder(h = whip_height, r = 3);\n    }\n}\n\n// Place whipped cream dollops\nmodule whipped_cream() {\n    positions = [\n        [0, 0],\n        [15, 10],\n        [-18, -8],\n        [12, -15],\n        [-10, 15]\n    ];\n    \n    for(pos = positions) {\n        translate([pos[0], pos[1], crust_thickness + filling_height + 2])\n            whipped_rosette();\n    }\n}\n\n// Utility function for random variation\nfunction rand(n) = (n * 73.3) % 1;\n\n// Assemble the pie\nunion() {\n    crust();\n    filling();\n    chocolate_shavings();\n    whipped_cream();\n}",
    "renders": true
  },
  {
    "food_item": "california",
    "openscad_code": "// California Avocado with realistic appearance\n// Medium complexity 3D printable model\n\n// Overall dimensions: ~60mm x 40mm x 45mm\n\n$fn = 32;  // Smooth curves\n\n// Main avocado body - slightly asymmetric organic shape\nmodule avocado_body() {\n    color([0.25, 0.45, 0.15])  // Dark green skin\n    union() {\n        // Main body - ellipsoid shape\n        scale([1.2, 1, 1.1]) \n        sphere(20);\n        \n        // Bottom bulge\n        translate([0, 0, -15])\n        scale([1.1, 0.9, 0.7])\n        sphere(15);\n        \n        // Top taper\n        translate([0, 0, 18])\n        scale([0.7, 0.8, 0.6])\n        sphere(10);\n    }\n}\n\n// Skin texture - bumpy surface pattern\nmodule skin_texture() {\n    color([0.2, 0.4, 0.12])\n    difference() {\n        avocado_body();\n        \n        // Small indentations for realistic skin texture\n        for(i = [0:15]) {\n            rotate([0, 0, i * 24])\n            translate([18 + sin(i * 30) * 3, 0, 5 + cos(i * 20) * 8])\n            rotate([90, 0, 0])\n            scale([1, 1, 0.3])\n            cylinder(h = 2, r1 = 1.5, r2 = 0.5);\n        }\n        \n        for(i = [0:12]) {\n            rotate([0, 0, i * 30 + 15])\n            translate([16 + sin(i * 25) * 2, 0, -5 + cos(i * 15) * 6])\n            rotate([90, 0, 0])\n            scale([1, 1, 0.3])\n            cylinder(h = 1.5, r1 = 1.2, r2 = 0.4);\n        }\n    }\n}\n\n// Inner flesh - light green\nmodule avocado_flesh() {\n    color([0.7, 0.85, 0.4])  // Light green flesh\n    difference() {\n        // Main flesh body\n        scale([1.1, 0.9, 1])\n        translate([0, 0, -3])\n        sphere(17);\n        \n        // Seed cavity\n        scale([0.7, 0.7, 0.9])\n        sphere(12);\n    }\n}\n\n// Seed (pit) - brown oval\nmodule seed() {\n    color([0.4, 0.25, 0.15])  // Brown seed\n    scale([0.9, 0.7, 1.2])\n    sphere(11);\n    \n    // Seed texture\n    color([0.35, 0.2, 0.1])\n    for(i = [0:8]) {\n        rotate([0, 0, i * 45])\n        translate([5 + sin(i * 20) * 2, 0, 0])\n        scale([0.1, 0.1, 1.2])\n        sphere(11);\n    }\n}\n\n// Cut surface detail\nmodule cut_surface() {\n    color([0.75, 0.9, 0.45])  // Brighter exposed flesh\n    \n    // Flat cut plane\n    translate([0, 0, 2])\n    cube([45, 45, 0.5], center = true);\n    \n    // Flesh pattern\n    for(x = [-15:5:15]) {\n        for(y = [-15:5:15]) {\n            if(sqrt(x*x + y*y) < 20) {\n                translate([x, y, 2.3])\n                scale([0.8, 0.8, 0.3])\n                sphere(1.5);\n            }\n        }\n    }\n}\n\n// Stem at top\nmodule stem() {\n    color([0.3, 0.5, 0.2])\n    translate([0, 0, 32])\n    rotate([0, 0, 5])\n    cylinder(h = 5, r1 = 2.5, r2 = 2);\n}\n\n// Assembly\nunion() {\n    // Right half - whole avocado\n    translate([15, 0, 0]) {\n        skin_texture();\n        stem();\n    }\n    \n    // Left half - cut open\n    translate([-15, 0, 0]) {\n        difference() {\n            skin_texture();\n            translate([0, 0, 0])\n            cube([50, 50, 50], center = true);\n        }\n        \n        avocado_flesh();\n        seed();\n        cut_surface();\n    }\n}",
    "renders": true
  },
  {
    "food_item": "blackeye",
    "openscad_code": "// Black-eyed pea (cowpea) in realistic style\n// Medium complexity with proper wall thickness for 3D printing\n\n// Overall dimensions: ~20mm diameter pea with ~7mm black spot\n$fn = 32;\n\n// Colors\ncolor_pea = [0.7, 0.85, 0.4];\ncolor_spot = [0.1, 0.1, 0.1];\ncolor_hilum = [0.4, 0.5, 0.2];\n\n// Main pea body with slight kidney bean shape\nmodule pea_body() {\n    color(color_pea)\n    union() {\n        // Main ellipsoid body\n        scale([1, 0.8, 1.1])\n        sphere(d = 18);\n        \n        // Slight indent on one side\n        translate([0, -8, 0])\n        rotate([0, 90, 0])\n        cylinder(h = 16, r1 = 4, r2 = 2, center = true);\n    }\n}\n\n// Black eye spot (hilum area)\nmodule black_eye() {\n    color(color_spot)\n    translate([0, -7.5, 8.5])\n    scale([1, 0.9, 0.3])\n    sphere(d = 6.5);\n    \n    // Small hilum mark\n    color(color_hilum)\n    translate([0, -7.8, 9.2])\n    rotate([90, 0, 0])\n    cylinder(h = 0.5, r = 0.8);\n}\n\n// Surface texture with small bumps\nmodule surface_texture() {\n    difference() {\n        pea_body();\n        \n        // Random small indentations for texture\n        for(i = [0:15]) {\n            rotate([0, rand(i*5)*180, rand(i*7)*360])\n            translate([rand(i*3)*8-4, rand(i*11)*8-4, rand(i*13)*9-4.5])\n            sphere(d = 0.6 + rand(i*17)*0.4);\n        }\n    }\n}\n\n// Helper function for random values\nfunction rand(x) = abs(sin(x*123.456));\n\n// Crease along the length\nmodule pea_crease() {\n    translate([0, 0, -9])\n    rotate([90, 0, 0])\n    cylinder(h = 18, r1 = 0.3, r2 = 0.1);\n}\n\n// Final assembly\nunion() {\n    surface_texture();\n    black_eye();\n    \n    // Subtle crease line\n    translate([0, -0.5, 0])\n    pea_crease();\n    \n    // Small ridge around the eye\n    translate([0, -7.5, 8.5])\n    rotate([90, 0, 0])\n    cylinder(h = 0.4, r1 = 3.8, r2 = 4.2);\n}",
    "renders": true
  },
  {
    "food_item": "pinkeye",
    "openscad_code": "// Pinkeye (Purple Hull Pea) - realistic style, medium complexity\n// Overall size: ~70mm x 50mm x 25mm\n\n// Main pea pod with slight curve\nmodule pea_pod() {\n    color([0.15, 0.35, 0.10])  // Dark green pod color\n    union() {\n        // Main pod body\n        hull();\n        \n        // Pod seam\n        seam();\n        \n        // Add slight texture with small bumps\n        texture();\n    }\n}\n\n// Main hull shape\nmodule hull() {\n    difference() {\n        // Curved main body\n        rotate([0, -10, 0]) \n        scale([1, 0.6, 0.4])\n        hull() {\n            translate([0, 0, 0])\n            sphere(d=50, $fn=60);\n            translate([20, 0, 0])\n            sphere(d=45, $fn=60);\n        }\n        \n        // Hollow out inside\n        rotate([0, -10, 0])\n        scale([0.85, 0.5, 0.35])\n        hull() {\n            translate([0, 0, 0])\n            sphere(d=50, $fn=60);\n            translate([20, 0, 0])\n            sphere(d=45, $fn=60);\n        }\n        \n        // Split opening\n        translate([-10, 0, 0])\n        cube([40, 60, 30], center=true);\n    }\n}\n\n// Pod seam line\nmodule seam() {\n    color([0.10, 0.25, 0.08])\n    for(i = [-20:2:20]) {\n        translate([i, 0, 11])\n        rotate([90, 0, 0])\n        cylinder(h=0.5, d1=2, d2=1, $fn=6);\n    }\n}\n\n// Surface texture\nmodule texture() {\n    color([0.12, 0.30, 0.09])\n    for(i = [-15:5:15]) {\n        for(j = [-8:4:8]) {\n            translate([i, j, 11])\n            sphere(d=1.5, $fn=8);\n        }\n    }\n}\n\n// Purple hull peas inside\nmodule peas() {\n    color([0.35, 0.15, 0.55])  // Purple hull color\n    \n    // Pea positions in pod\n    pea([-5, 0, 0]);\n    pea([5, 0, 0]);\n    pea([15, 0, 0]);\n}\n\n// Individual pea\nmodule pea(pos) {\n    translate(pos)\n    scale([1, 0.9, 0.8])\n    sphere(d=8, $fn=20);\n    \n    // Pea eye (characteristic mark)\n    color([0.15, 0.05, 0.25])\n    translate([pos[0]+3, pos[1], pos[2]])\n    rotate([0, 90, 0])\n    cylinder(h=1, d=2, $fn=8);\n}\n\n// Pod stem\nmodule stem() {\n    color([0.10, 0.20, 0.08])\n    translate([-25, 0, 0])\n    rotate([0, -10, 0])\n    cylinder(h=8, d1=3, d2=2, $fn=8);\n}\n\n// Assembly\nunion() {\n    pea_pod();\n    peas();\n    stem();\n}",
    "renders": true
  },
  {
    "food_item": "lady",
    "openscad_code": "// Lady Strawberry (Realistic Style)\n// Medium complexity 3D printable food model\n\n// Overall dimensions: ~65mm tall, ~45mm wide\n$fn = 36;\n\n// Main strawberry body\nmodule strawberry_body() {\n    color(\"red\") {\n        difference() {\n            // Main berry shape\n            scale([1, 1, 1.2]) \n                sphere(d=40);\n            \n            // Calyx indentation\n            translate([0, 0, 22])\n                cylinder(h=10, d1=25, d2=20, $fn=6);\n                \n            // Bottom point\n            translate([0, 0, -25])\n                sphere(d=8);\n        }\n    }\n}\n\n// Strawberry seeds\nmodule seeds() {\n    color(\"yellow\") {\n        for(i = [0:35]) {\n            angle = i * 10;\n            ring = i % 3;\n            radius = 15 + ring * 5;\n            height = 15 - ring * 3;\n            \n            rotate([0, 0, angle])\n                translate([radius, 0, height])\n                    scale([1, 1, 0.5])\n                        sphere(d=2);\n        }\n    }\n}\n\n// Calyx (green leafy top)\nmodule calyx() {\n    color(\"darkgreen\") {\n        // Main calyx base\n        translate([0, 0, 23])\n            cylinder(h=8, d1=22, d2=18);\n            \n        // Sepals\n        for(i = [0:5]) {\n            rotate([0, 0, i * 60])\n                translate([8, 0, 25])\n                    rotate([30, 0, 0])\n                        scale([0.8, 2.5, 0.3])\n                            sphere(d=8);\n        }\n    }\n}\n\n// Stem\nmodule stem() {\n    color(\"green\") {\n        translate([0, 0, 31])\n            cylinder(h=15, d=3);\n            \n        // Small leaf\n        translate([2, 2, 38])\n            rotate([45, 0, 45])\n                scale([1, 2, 0.5])\n                    sphere(d=6);\n    }\n}\n\n// Surface texture lines\nmodule texture_lines() {\n    color(\"darkred\") {\n        for(i = [0:11]) {\n            rotate([0, 0, i * 30])\n                translate([0, 0, 0])\n                    rotate([90, 0, 0])\n                        scale([0.3, 0.3, 1])\n                            cylinder(h=20, d=1);\n        }\n    }\n}\n\n// Lady features - eyes\nmodule eyes() {\n    color(\"black\") {\n        translate([-8, 15, 18])\n            sphere(d=3);\n        translate([8, 15, 18])\n            sphere(d=3);\n    }\n}\n\n// Lady features - mouth\nmodule mouth() {\n    color(\"black\") {\n        translate([0, 12, 10])\n            rotate([90, 0, 0])\n                cylinder(h=0.5, d1=8, d2=0);\n    }\n}\n\n// Lady features - arms (leafy extensions)\nmodule arms() {\n    color(\"green\") {\n        // Left arm\n        translate([-20, 0, 15])\n            rotate([0, 0, -30])\n                scale([0.5, 2, 0.2])\n                    sphere(d=10);\n                    \n        // Right arm\n        translate([20, 0, 15])\n            rotate([0, 0, 30])\n                scale([0.5, 2, 0.2])\n                    sphere(d=10);\n    }\n}\n\n// Lady features - legs\nmodule legs() {\n    color(\"green\") {\n        // Left leg\n        translate([-7, -15, 0])\n            cylinder(h=15, d=3);\n            \n        // Right leg\n        translate([7, -15, 0])\n            cylinder(h=15, d=3);\n    }\n}\n\n// Assembly\nunion() {\n    // Main strawberry body\n    strawberry_body();\n    \n    // Surface details\n    seeds();\n    texture_lines();\n    \n    // Top parts\n    calyx();\n    stem();\n    \n    // Lady features\n    eyes();\n    mouth();\n    arms();\n    legs();\n}",
    "renders": true
  },
  {
    "food_item": "china",
    "openscad_code": "// Steamed dumpling (Shumai) - realistic style, medium complexity\n// Overall height ~45 mm, diameter ~40 mm\n\n$fn = 36;\n\n// Main dumpling wrapper (thin cylinder base)\nmodule wrapper() {\n    color(\"cornsilk\")\n    difference() {\n        cylinder(h = 15, d = 40, center = true);\n        translate([0, 0, 1])\n            cylinder(h = 17, d = 36, center = true);\n    }\n}\n\n// Pleated rim around the top\nmodule pleated_rim() {\n    for (i = [0:11]) {\n        rotate([0, 0, i * 30])\n        translate([18, 0, 7.5])\n        rotate([90, 0, 0])\n        color(\"cornsilk\")\n        cylinder(h = 3, d1 = 3, d2 = 1);\n    }\n}\n\n// Pork filling visible on top\nmodule filling() {\n    color(\"sienna\")\n    translate([0, 0, 8])\n    cylinder(h = 7, d = 32);\n}\n\n// Small diced carrot pieces in filling\nmodule carrot_bits() {\n    for (i = [0:7]) {\n        a = i * 45 + 10;\n        r = 11;\n        color(\"darkorange\")\n        translate([r * cos(a), r * sin(a), 12])\n        sphere(d = 1.5);\n    }\n}\n\n// Peas\nmodule peas() {\n    for (i = [0:5]) {\n        a = i * 60 + 30;\n        r = 8;\n        color(\"forestgreen\")\n        translate([r * cos(a), r * sin(a), 13])\n        sphere(d = 2);\n    }\n}\n\n// Shrimp piece on top\nmodule shrimp() {\n    color(\"lightcoral\")\n    translate([0, 0, 15.5])\n    rotate([90, 0, 0])\n    scale([1, 0.6, 0.3])\n    sphere(d = 12);\n}\n\n// Thin wrapper folds texture\nmodule wrapper_texture() {\n    for (i = [0:17]) {\n        a = i * 20;\n        r = 19;\n        color(\"cornsilk\")\n        translate([r * cos(a), r * sin(a), 7.5])\n        rotate([0, 0, a])\n        cube([0.4, 10, 15], center = true);\n    }\n}\n\n// Steamer paper bottom\nmodule paper_bottom() {\n    color(\"ivory\")\n    translate([0, 0, -8])\n    cylinder(h = 0.5, d = 42);\n}\n\n// Assembly\nunion() {\n    paper_bottom();\n    wrapper();\n    pleated_rim();\n    wrapper_texture();\n    filling();\n    carrot_bits();\n    peas();\n    shrimp();\n}",
    "renders": true
  },
  {
    "food_item": "goa",
    "openscad_code": "// Realistic Goan Bebinca - Traditional layered Goan dessert\n// Approximately 70mm diameter x 25mm height\n\n// Layer parameters\nlayers = 7;\nlayer_height = 2.5;\nlayer_spacing = 0.3;\ndiameter = 70;\nwall_thickness = 2;\n\n// Colors for realistic appearance\ncolor_top = [0.96, 0.76, 0.42]; // Golden brown top\ncolor_mid = [0.94, 0.82, 0.51]; // Medium brown layers\ncolor_bottom = [0.92, 0.88, 0.60]; // Lighter base\n\n// Texture details\ncaramel_spots = 12;\nspot_radius = 2.5;\nspot_depth = 0.5;\n\n// Edge details\nscallop_height = 1.5;\nscallop_segments = 24;\n\n// Main bebinca structure\nmodule bebinca() {\n    difference() {\n        // Main layered cake body\n        union() {\n            for (i = [0:layers-1]) {\n                color(interpolate_color(i)) {\n                    translate([0, 0, i * (layer_height + layer_spacing)])\n                        cylinder(\n                            h = layer_height,\n                            r1 = diameter/2 - (i * 1.5),  // Slight taper\n                            r2 = diameter/2 - ((i+1) * 1.5),\n                            $fn = 64\n                        );\n                }\n            }\n        }\n        \n        // Center hole (traditional bebinca has a hole)\n        translate([0, 0, -1])\n            cylinder(h = layers * (layer_height + layer_spacing) + 2, r = 8, $fn = 32);\n    }\n}\n\n// Color interpolation function\nfunction interpolate_color(layer) = [\n    color_top[0] + (color_bottom[0] - color_top[0]) * layer / (layers - 1),\n    color_top[1] + (color_bottom[1] - color_top[1]) * layer / (layers - 1),\n    color_top[2] + (color_bottom[2] - color_top[2]) * layer / (layers - 1)\n];\n\n// Caramelized spots on top\nmodule caramel_spots() {\n    for (i = [0:caramel_spots-1]) {\n        angle = i * 360 / caramel_spots;\n        radius = diameter/2 * 0.7;\n        translate([\n            radius * cos(angle),\n            radius * sin(angle),\n            layers * (layer_height + layer_spacing) - spot_depth\n        ]) {\n            color([0.72, 0.52, 0.32])  // Darker caramel color\n            sphere(r = spot_radius, $fn = 16);\n        }\n    }\n}\n\n// Scalloped edge detail\nmodule scalloped_edge() {\n    difference() {\n        // Main edge\n        cylinder(\n            h = layers * (layer_height + layer_spacing),\n            r = diameter/2 + wall_thickness,\n            $fn = scallop_segments * 2\n        );\n        \n        // Cut scallops\n        for (i = [0:scallop_segments-1]) {\n            angle = i * 360 / scallop_segments;\n            translate([\n                (diameter/2 + wall_thickness) * cos(angle),\n                (diameter/2 + wall_thickness) * sin(angle),\n                -1\n            ]) {\n                rotate([0, 0, angle])\n                    translate([wall_thickness + 1, -wall_thickness - 1, 0])\n                        cube([wall_thickness * 3, wall_thickness * 2, layers * (layer_height + layer_spacing) + 2]);\n            }\n        }\n    }\n}\n\n// Bottom base with slight dome\nmodule base() {\n    color(color_bottom)\n    translate([0, 0, -1])\n        cylinder(h = 2, r1 = diameter/2 + wall_thickness, r2 = diameter/2 + wall_thickness - 1, $fn = 64);\n}\n\n// Assembly\nunion() {\n    base();\n    scalloped_edge();\n    bebinca();\n    caramel_spots();\n}",
    "renders": true
  },
  {
    "food_item": "horse",
    "openscad_code": "// Horse Carrot Treat - Realistic Style, Medium Complexity\n// Overall dimensions: 80mm x 25mm x 25mm\n\ncolor([0.9, 0.4, 0.1]) {\n    // Main carrot body\n    difference() {\n        rotate([0, 10, 0]) \n            cylinder(h=75, d1=22, d2=12, $fn=32);\n        \n        // Carrot top indentation\n        translate([0, 0, 72])\n            cylinder(h=10, d=18, $fn=32);\n    }\n}\n\n// Carrot green tops\nmodule leaf(width, length, height) {\n    color([0.2, 0.6, 0.2]) {\n        scale([1, 0.3, 1])\n            rotate([0, -20, 0])\n                cylinder(h=length, d=width, $fn=8);\n    }\n}\n\n// Generate carrot leaves\nfor(i=[0:120:359]) {\n    rotate([0, 0, i])\n        translate([0, 8, 72])\n            leaf(8, 15 + (i%3)*3, 2);\n}\n\n// Carrot texture - growth rings\nmodule growth_ring(height, size) {\n    color([0.85, 0.35, 0.05]) {\n        translate([0, 0, height])\n            cylinder(h=0.5, d=size, $fn=32);\n    }\n}\n\n// Add growth rings along carrot body\nfor(h=[5:5:70]) {\n    growth_ring(h, 22 - (h/6));\n}\n\n// Small root hairs\nmodule root_hair() {\n    color([0.8, 0.3, 0.05]) {\n        rotate([90, 0, 0])\n            cylinder(h=3, d=1, $fn=8);\n    }\n}\n\n// Add root hairs at bottom\nfor(angle=[0:30:359]) {\n    rotate([0, 0, angle])\n        translate([9, 0, 2])\n            root_hair();\n}\n\n// Carrot surface texture dots\nmodule texture_dot() {\n    color([0.7, 0.25, 0.05]) {\n        sphere(d=1.5, $fn=8);\n    }\n}\n\n// Add surface texture\nfor(h=[10:8:65]) {\n    for(angle=[15:30:345]) {\n        rotate([0, 0, angle])\n            translate([11 - (h/12), 0, h])\n                texture_dot();\n    }\n}\n\n// Top stem connection point\ncolor([0.15, 0.5, 0.15]) {\n    translate([0, 0, 79])\n        sphere(d=6, $fn=16);\n}",
    "renders": true
  },
  {
    "food_item": "grass",
    "openscad_code": "// Realistic Grass Food Item - Medium Complexity OpenSCAD Model\n// Represents a bundle of fresh wheat grass with roots and soil\n\n// Parameters\nblade_height = 40;\nblade_width = 2;\nblade_thickness = 0.8;\nnum_blades = 15;\nbundle_radius = 12;\nsoil_height = 8;\nroot_length = 15;\n\n// Colors\ngrass_color = [0.2, 0.8, 0.1];\nroot_color = [0.7, 0.5, 0.3];\nsoil_color = [0.3, 0.2, 0.1];\n\n// Grass blade module with slight curve and texture\nmodule grass_blade(height, width, thickness) {\n    color(grass_color) {\n        // Main blade body\n        for (i = [0:2:height]) {\n            translate([0, 0, i])\n            rotate([0, 0, sin(i * 0.5) * 3])\n            scale([1 - (i / height) * 0.3, 1, 1])\n            cube([width, thickness, 2], center = true);\n        }\n        \n        // Blade tip (pointed)\n        translate([0, 0, height + 1])\n        rotate([0, 30, 0])\n        scale([0.3, 1, 1])\n        cylinder(h = 3, r1 = width/2, r2 = 0.1, center = true);\n    }\n}\n\n// Root module\nmodule root(length) {\n    color(root_color) {\n        translate([0, 0, -length/2])\n        cylinder(h = length, r1 = 0.5, r2 = 0.1, $fn = 8);\n    }\n}\n\n// Soil clump with texture\nmodule soil_clump(radius, height) {\n    color(soil_color) {\n        difference() {\n            // Main soil body\n            cylinder(h = height, r = radius, $fn = 32);\n            \n            // Surface texture indentations\n            for (i = [0:359:45]) {\n                rotate([0, 0, i])\n                translate([radius * 0.7, 0, height - 2])\n                sphere(r = 2);\n            }\n            \n            // Bottom hollow for printing\n            translate([0, 0, -1])\n            cylinder(h = 2, r = radius - 2, $fn = 32);\n        }\n        \n        // Small soil particles on surface\n        for (i = [0:8]) {\n            rotate([0, 0, i * 137.5])\n            translate([radius * 0.4 * sin(i), radius * 0.4 * cos(i), height - 0.5])\n            sphere(r = 0.5 + sin(i) * 0.3);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Soil base\n    soil_clump(bundle_radius, soil_height);\n    \n    // Roots extending from bottom\n    for (i = [0:num_blades - 1]) {\n        angle = i * 360 / num_blades;\n        distance = (i % 3) * 2 + 3;\n        translate([distance * cos(angle), distance * sin(angle), 0])\n        rotate([90 + sin(i) * 10, 0, angle])\n        root(root_length);\n    }\n    \n    // Grass blades growing from soil\n    for (i = [0:num_blades - 1]) {\n        angle = i * 360 / num_blades + (i % 2) * 15;\n        distance = (i % 4) * 2 + 2;\n        translate([distance * cos(angle), distance * sin(angle), soil_height])\n        rotate([0, 0, angle + sin(i * 0.7) * 25])\n        rotate([cos(i) * 5, sin(i) * 5, 0])\n        grass_blade(blade_height + sin(i * 2) * 5, blade_width, blade_thickness);\n    }\n    \n    // Central thicker blade for realism\n    translate([0, 0, soil_height])\n    rotate([0, 5, 0])\n    grass_blade(blade_height * 1.1, blade_width * 1.5, blade_thickness * 1.2);\n}",
    "renders": true
  },
  {
    "food_item": "milk",
    "openscad_code": "// Realistic milk carton model (medium complexity)\n// Dimensions: 70mm x 45mm x 100mm (realistic milk carton proportions)\n\n$fn = 32;\n\n// Main colors\ncolor_milk = [0.95, 0.95, 0.98];\ncolor_carton = [0.98, 0.98, 0.92];\ncolor_cap = [0.8, 0.8, 0.8];\ncolor_label = [0.85, 0.85, 0.9];\ncolor_text = [0.1, 0.1, 0.1];\n\n// Main milk carton body\nmodule milk_carton_body() {\n    difference() {\n        // Tapered body\n        hull() {\n            translate([0, 0, 5]) cube([70, 45, 10], center=true);\n            translate([0, 0, 95]) cube([62, 37, 10], center=true);\n        }\n        \n        // Hollow interior with 2mm walls\n        translate([0, 0, -2]) scale([0.94, 0.91, 1.05]) \n            cube([70, 45, 110], center=true);\n    }\n}\n\n// Gabled top\nmodule gabled_top() {\n    // Main gable structure\n    union() {\n        // Front gable\n        translate([0, 22.5, 100]) rotate([90, 0, 0]) \n            cylinder(h=20, r1=31, r2=0);\n        // Back gable\n        translate([0, -22.5, 100]) rotate([-90, 0, 0]) \n            cylinder(h=20, r1=31, r2=0);\n        // Top sealing flap\n        translate([0, 0, 110]) cube([62, 2, 15], center=true);\n    }\n}\n\n// Screw cap with threads\nmodule screw_cap() {\n    color(color_cap) {\n        translate([0, 0, 117]) {\n            difference() {\n                cylinder(h=10, r=8, center=true);\n                cylinder(h=12, r=6, center=true);\n            }\n            // Thread ridges\n            for(i = [0:5:355]) {\n                rotate([0, 0, i]) \n                    translate([7, 0, 2]) \n                    cube([1, 0.5, 6], center=true);\n            }\n        }\n    }\n}\n\n// Carton texture - subtle paper fibers\nmodule carton_texture() {\n    difference() {\n        cube([1, 1, 1]);\n        // Small dents for paper texture\n        for(x = [0:2:70]) {\n            for(y = [0:2:45]) {\n                for(z = [0:5:100]) {\n                    translate([x-35, y-22.5, z]) \n                        sphere(r=0.1);\n                }\n            }\n        }\n    }\n}\n\n// Nutrition label area\nmodule nutrition_label() {\n    color(color_label) {\n        translate([0, 22.5, 60]) {\n            difference() {\n                cube([60, 15, 1], center=true);\n                // Label border detail\n                translate([0, 0, 0.6]) \n                    cube([58, 13, 0.2], center=true);\n            }\n        }\n    }\n}\n\n// Milk drop logo\nmodule milk_logo() {\n    color(color_text) {\n        translate([-15, 22.5, 61]) {\n            // Milk drop shape\n            scale([1, 1.5, 1]) sphere(r=3);\n            translate([0, 0, 2]) sphere(r=2);\n            // Text \"MILK\"\n            translate([8, -1, 0]) scale([0.5, 0.5, 0.5]) \n                linear_extrude(1) text(\"MILK\", size=6);\n        }\n    }\n}\n\n// Side seam\nmodule side_seam() {\n    translate([35, 0, 50]) {\n        difference() {\n            cube([2, 45, 100]);\n            // Seam details\n            for(z = [5:5:95]) {\n                translate([0.5, 0, z]) \n                    cube([1, 45, 0.5]);\n            }\n        }\n    }\n}\n\n// Bottom seal\nmodule bottom_seal() {\n    translate([0, 0, 2.5]) {\n        difference() {\n            cube([70, 45, 5], center=true);\n            // Diamond pattern\n            for(x = [-30:10:30]) {\n                for(y = [-20:10:20]) {\n                    translate([x, y, 2]) \n                        rotate([0, 0, 45]) \n                        cube([8, 8, 1], center=true);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\ncolor(color_carton) {\n    union() {\n        milk_carton_body();\n        gabled_top();\n    }\n}\n\nscrew_cap();\nnutrition_label();\nmilk_logo();\nside_seam();\nbottom_seal();",
    "renders": true
  },
  {
    "food_item": "cheese",
    "openscad_code": "// Realistic medium-complexity cheese block (Gouda style)\n// Overall size ~60 mm\n\n$fn = 32;\n\n// Main cheese body\nmodule cheese_body() {\n    color(\"wheat\")\n    difference() {\n        // Main block with rounded edges\n        minkowski() {\n            cube([50, 40, 35], center = true);\n            sphere(2);\n        }\n        \n        // Rounded top surface\n        translate([0, 0, 18])\n        scale([1, 1, 0.3])\n        sphere(25);\n    }\n}\n\n// Cheese rind texture pattern\nmodule rind_texture() {\n    color(\"tan\")\n    for (i = [0:30]) {\n        theta = i * 12;\n        r = 27;\n        translate([r * cos(theta), r * sin(theta), 0])\n        rotate([90, 0, theta])\n        cylinder(h = 40, r1 = 2, r2 = 1.5, center = true);\n    }\n}\n\n// Characteristic holes (eyes)\nmodule cheese_holes() {\n    color(\"white\")\n    difference() {\n        children();\n        \n        // Random hole placement with seed pattern\n        for (i = [0:7]) {\n            theta = 45 * i + 22.5;\n            phi = 30 * i + 15;\n            r = 15 + 8 * sin(i * 3);\n            x = r * cos(theta);\n            y = r * sin(theta) * 0.7;\n            z = 10 * sin(phi);\n            \n            translate([x, y, z])\n            sphere(2.5 + 1.5 * sin(i * 2.5));\n        }\n    }\n}\n\n// Side stamp / label indent\nmodule cheese_stamp() {\n    color(\"wheat\")\n    difference() {\n        children();\n        \n        translate([0, -22, 0])\n        rotate([0, 90, 0])\n        cylinder(h = 15, r = 8, center = true);\n        \n        translate([0, -22.5, 0])\n        rotate([0, 90, 0])\n        cube([20, 1, 10], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    cheese_stamp()\n    cheese_holes()\n    rind_texture()\n    cheese_body();\n}",
    "renders": true
  },
  {
    "food_item": "yogurt",
    "openscad_code": "// Realistic 3D printable yogurt cup with fruit topping\n// Total height ~80mm, suitable for FDM printing\n\n// Colors\nyogurt_color = \"lemonchiffon\";\nstrawberry_color = \"tomato\";\nblueberry_color = \"slateblue\";\ncup_color = \"white\";\n\n// Main yogurt cup\nmodule yogurt_cup() {\n    // Cup body\n    difference() {\n        // Outer cup\n        cylinder(h=50, r1=30, r2=28, $fn=64);\n        // Inner cavity\n        translate([0, 0, 2])\n            cylinder(h=48, r1=27, r2=25, $fn=64);\n    }\n    \n    // Cup rim\n    translate([0, 0, 50])\n        cylinder(h=3, r1=30, r2=30, $fn=64);\n}\n\n// Yogurt surface with slight waviness\nmodule yogurt_surface() {\n    color(yogurt_color) {\n        // Base yogurt fill\n        translate([0, 0, 48])\n            cylinder(h=8, r1=25, r2=24, $fn=64);\n            \n        // Surface texture - small waves\n        for(i=[0:10:350]) {\n            rotate([0, 0, i])\n                translate([10 + sin(i*3)*3, 0, 55])\n                    scale([1, 0.5, 1])\n                        sphere(r=2, $fn=16);\n        }\n    }\n}\n\n// Single strawberry slice\nmodule strawberry_slice() {\n    color(strawberry_color) {\n        // Main berry body\n        translate([0, 0, 0.5])\n            scale([1, 1, 0.3])\n                sphere(r=3, $fn=32);\n                \n        // Seeds pattern\n        for(i=[0:30:330]) {\n            rotate([0, 0, i])\n                translate([2.2, 0, 0.8])\n                    scale([1, 0.7, 0.3])\n                        color(\"yellow\")\n                            sphere(r=0.3, $fn=8);\n        }\n    }\n}\n\n// Single blueberry\nmodule blueberry() {\n    color(blueberry_color) {\n        sphere(r=2.5, $fn=24);\n        \n        // Crown/star pattern on top\n        translate([0, 0, 2.4])\n            cylinder(h=0.3, r1=1, r2=0.5, $fn=5);\n    }\n}\n\n// Fruit topping arrangement\nmodule fruit_topping() {\n    // Place strawberries\n    for(i=[0:60:300]) {\n        rotate([0, 0, i])\n            translate([12 + sin(i*2)*3, 0, 55])\n                rotate([0, 0, sin(i)*15])\n                    strawberry_slice();\n    }\n    \n    // Place blueberries\n    for(i=[30:90:330]) {\n        rotate([0, 0, i])\n            translate([8 + cos(i*3)*4, sin(i*2)*6, 56])\n                blueberry();\n    }\n    \n    // Extra berries in center\n    translate([0, 0, 57])\n        blueberry();\n    translate([5, 2, 56.5])\n        scale([0.8, 0.8, 0.8])\n            strawberry_slice();\n}\n\n// Assembly\ncolor(cup_color) yogurt_cup();\nyogurt_surface();\nfruit_topping();",
    "renders": true
  },
  {
    "food_item": "egg",
    "openscad_code": "// Realistic Egg Model for 3D Printing\n// Features: Shell, inner membrane, yolk, and surface texture\n\n$fn = 32;  // Smooth curves for realism\n\n// Main colors\negg_shell_color = [0.95, 0.93, 0.87];\negg_yolk_color = [0.95, 0.75, 0.15];\negg_inner_color = [0.85, 0.83, 0.77];\n\n// Overall dimensions\negg_length = 55;  // 55mm length for 3D printing\negg_width = 40;   // 40mm width\n\n// Shell thickness for 3D printing\nshell_thickness = 1.2;\n\n// Main egg shell - egg-shaped using scaled sphere\nmodule egg_shell() {\n    color(egg_shell_color)\n    difference() {\n        // Main egg shape - stretched sphere\n        scale([1, 0.73, 1.37])\n        sphere(d = egg_width);\n        \n        // Hollow out the inside\n        scale([1, 0.73, 1.37])\n        sphere(d = egg_width - shell_thickness * 2);\n        \n        // Crack opening for the inside view\n        translate([0, 0, egg_length/2 - 10])\n        rotate([0, 30, 0])\n        cylinder(h = 30, d1 = 20, d2 = 15, center = true);\n    }\n}\n\n// Inner membrane layer\nmodule egg_membrane() {\n    color(egg_inner_color)\n    difference() {\n        // Slightly smaller than shell\n        scale([1, 0.73, 1.37])\n        sphere(d = egg_width - shell_thickness * 2 - 0.3);\n        \n        // Same crack opening\n        translate([0, 0, egg_length/2 - 10])\n        rotate([0, 30, 0])\n        cylinder(h = 30, d1 = 19, d2 = 14, center = true);\n    }\n}\n\n// Egg yolk - flattened sphere\nmodule egg_yolk() {\n    color(egg_yolk_color)\n    translate([0, 0, -5])\n    scale([1, 1, 0.6])\n    sphere(d = 25);\n}\n\n// Surface texture - small bumps for realistic eggshell\nmodule shell_texture() {\n    // Random small bumps across the surface\n    for (i = [0:45]) {\n        rotate([rand(i*3)*360, rand(i*5)*360, rand(i*7)*360])\n        translate([0, 0, egg_width/2 - 0.5])\n        scale([1, 0.73, 1.37])\n        sphere(d = rand(i*2)*0.8 + 0.4);\n    }\n}\n\n// Helper function for pseudo-random values\nfunction rand(n) = (n * 13.7) % 1;\n\n// Create the complete egg\nunion() {\n    // Main egg parts\n    egg_shell();\n    \n    // Interior parts visible through crack\n    translate([0, 0, 0])\n    egg_membrane();\n    \n    translate([0, 0, 0])\n    egg_yolk();\n    \n    // Surface texture on shell only\n    difference() {\n        color(egg_shell_color)\n        shell_texture();\n        \n        // Remove texture from crack area\n        translate([0, 0, egg_length/2 - 10])\n        rotate([0, 30, 0])\n        cylinder(h = 30, d1 = 20, d2 = 15, center = true);\n    }\n}",
    "renders": true
  },
  {
    "food_item": "curd",
    "openscad_code": "// Curd block with realistic texture and whey pockets\n// Overall dimensions: 60x40x25mm, optimized for 3D printing\n\n$fn = 32;\n\n// Main curd parameters\ncurd_width = 60;\ncurd_depth = 40;\ncurd_height = 25;\nwall_thickness = 1.2;\n\n// Color definitions\ncurd_color = [1, 0.98, 0.85];  // Off-white creamy color\nwhey_color = [0.95, 0.95, 0.9];  // Slightly translucent whey\n\n// Main module for the curd block\nmodule curd_block() {\n    color(curd_color) {\n        difference() {\n            // Base curd shape with rounded edges\n            rounded_block(curd_width, curd_depth, curd_height, 5);\n            \n            // Internal structure - whey pockets and curd texture\n            internal_structure();\n        }\n    }\n}\n\n// Create a rounded block primitive\nmodule rounded_block(w, d, h, radius) {\n    hull() {\n        translate([radius, radius, 0]) cylinder(h=h, r=radius);\n        translate([w-radius, radius, 0]) cylinder(h=h, r=radius);\n        translate([w-radius, d-radius, 0]) cylinder(h=h, r=radius);\n        translate([radius, d-radius, 0]) cylinder(h=h, r=radius);\n    }\n}\n\n// Internal structure with whey pockets and curd texture\nmodule internal_structure() {\n    // Create whey pockets throughout the curd\n    for (x = [10:15:curd_width-10]) {\n        for (y = [10:12:curd_depth-10]) {\n            for (z = [5:8:curd_height-5]) {\n                translate([x, y, z]) {\n                    // Random sized whey pockets\n                    scale([0.8 + rand(x+y+z)*0.4, \n                           0.8 + rand(x+y+z+1)*0.4, \n                           0.8 + rand(x+y+z+2)*0.4]) {\n                        sphere(2.5);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Surface texture - small dimples for curd grain appearance\n    for (x = [5:8:curd_width-5]) {\n        for (y = [5:8:curd_depth-5]) {\n            // Only on top surface\n            translate([x, y, curd_height-0.5]) {\n                sphere(1.2);\n            }\n        }\n    }\n    \n    // Side texture - irregularities\n    for (z = [5:6:curd_height-5]) {\n        for (i = [0:20]) {\n            angle = i * 18;\n            // Random placement along edges\n            r = 5 + rand(i+z)*10;\n            translate([curd_width/2 + cos(angle)*r, \n                      curd_depth/2 + sin(angle)*r, \n                      z]) {\n                sphere(0.8);\n            }\n        }\n    }\n}\n\n// Create whey drips on the surface\nmodule whey_drips() {\n    color(whey_color) {\n        translate([curd_width/2, curd_depth/2, curd_height]) {\n            sphere(1.5);\n        }\n        \n        // Additional whey beads\n        for (i = [0:4]) {\n            angle = i * 72;\n            r = 15 + rand(i)*10;\n            translate([curd_width/2 + cos(angle)*r, \n                      curd_depth/2 + sin(angle)*r, \n                      curd_height]) {\n                sphere(0.8 + rand(i)*0.4);\n            }\n        }\n    }\n}\n\n// Simple pseudo-random function for texture variation\nfunction rand(n) = (n*17 % 100)/100;\n\n// Main assembly\ncurd_block();\nwhey_drips();\n\n// Small curd granules scattered around for realism\nfor (i = [0:8]) {\n    translate([rand(i*2)*curd_width, \n              rand(i*3)*curd_depth, \n              rand(i*4)*2]) {\n        color(curd_color) sphere(1 + rand(i+5));\n    }\n}",
    "renders": true
  },
  {
    "food_item": "whey",
    "openscad_code": "// Whey Protein Powder Scoop - Realistic Style\n// Medium complexity model with scoop and powder texture\n\n$fn = 32;\n\n// Main color - vanilla whey\nwhey_color = \"#FFF8E7\";\n\n// Container dimensions\ncontainer_d = 90;\ncontainer_h = 110;\nwall_thickness = 2;\nbase_thickness = 3;\n\n// Scoop dimensions\nscoop_w = 35;\nscoop_h = 25;\nhandle_l = 60;\n\nmodule container() {\n    // Outer container\n    difference() {\n        cylinder(d=container_d, h=container_h);\n        translate([0, 0, base_thickness])\n            cylinder(d=container_d-wall_thickness*2, h=container_h);\n    }\n    \n    // Bottom base\n    translate([0, 0, 0])\n        cylinder(d=container_d, h=base_thickness);\n    \n    // Rim detail\n    translate([0, 0, container_h-5])\n        cylinder(d=container_d+2, h=5);\n}\n\nmodule powder_surface() {\n    // Create realistic powder surface with slight irregularities\n    for (i = [0:20]) {\n        for (j = [0:20]) {\n            x = (i-10) * 3.5;\n            y = (j-10) * 3.5;\n            h = 2 + sin(i*0.5) * cos(j*0.5) * 1.5;\n            translate([x, y, container_h-10+h])\n                sphere(d=4);\n        }\n    }\n}\n\nmodule scoop() {\n    // Scoop bowl\n    difference() {\n        translate([0, 0, -scoop_h/2])\n            scale([1, 1.2, 0.8])\n                sphere(d=scoop_w);\n        translate([0, 0, -scoop_h/2+5])\n            scale([0.8, 1, 0.6])\n                sphere(d=scoop_w-5);\n    }\n    \n    // Handle\n    translate([scoop_w/2, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(d=8, h=handle_l);\n    \n    // Handle grip rings\n    for (i = [1:5]) {\n        translate([scoop_w/2 + i*10, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(d=10, h=3);\n    }\n}\n\nmodule label() {\n    // Simple label band\n    translate([0, container_d/2-1, container_h/2])\n        rotate([90, 0, 0])\n            cube([container_d-10, 30, 0.5], center=true);\n}\n\n// Assembly\ncolor(whey_color) container();\ncolor(whey_color) translate([0, 0, container_h-8]) powder_surface();\n\n// Position scoop resting on top\ncolor(\"#F0F0F0\") translate([0, -20, container_h+5]) rotate([20, 0, 45]) scoop();\n\ncolor(\"#E8E8E8\") label();",
    "renders": true
  },
  {
    "food_item": "casein",
    "openscad_code": "// Casein protein powder scoop with realistic texture and details\n// Medium complexity realistic model with scoop indentations and powder texture\n\n$fn = 32;  // Smooth curves for realistic appearance\n\n// Main casein powder scoop with realistic proportions\nmodule casein_scoop() {\n    // Scoop bowl - slightly elliptical for realistic shape\n    difference() {\n        // Main scoop body\n        scale([1.1, 1, 0.8]) \n        sphere(25);\n        \n        // Scoop cavity - hollow interior\n        translate([0, 0, -5])\n        scale([0.9, 0.9, 0.7])\n        sphere(23);\n        \n        // Flat bottom for 3D printing\n        translate([0, 0, -20])\n        cube([60, 60, 40], center=true);\n    }\n    \n    // Scoop handle - cylindrical with grip texture\n    translate([28, 0, 0])\n    rotate([0, 90, 0])\n    cylinder(h=40, r1=4, r2=3);\n    \n    // Handle grip rings\n    for(i = [0:3]) {\n        translate([28, 0, -15 + i*10])\n        rotate([0, 90, 0])\n        scale([1, 1.2, 1])\n        cylinder(h=3, r=4.5);\n    }\n}\n\n// Casein powder texture on scoop surface\nmodule powder_texture() {\n    color(\"beige\")\n    difference() {\n        casein_scoop();\n        \n        // Create rough powder texture with small spheres\n        for(i = [1:8]) {\n            for(j = [1:16]) {\n                angle = j * 22.5;\n                radius = 18 + sin(i * 45) * 3;\n                x = cos(angle) * radius * 1.1;\n                y = sin(angle) * radius;\n                z = -15 + i * 2.5;\n                \n                translate([x, y, z])\n                sphere(0.8 + (sin(i+j) * 0.3));\n            }\n        }\n    }\n}\n\n// Overflowing powder pile on top\nmodule powder_overflow() {\n    color(\"beige\")\n    union() {\n        // Main powder mound\n        translate([0, 0, 15])\n        scale([1.2, 1, 0.6])\n        sphere(12);\n        \n        // Additional powder clumps\n        for(i = [1:5]) {\n            angle = i * 72;\n            dx = cos(angle) * 8;\n            dy = sin(angle) * 6;\n            \n            translate([dx, dy, 18])\n            sphere(4 + (i % 3));\n        }\n    }\n}\n\n// Small powder particles scattered around\nmodule scattered_powder() {\n    color(\"beige\")\n    for(i = [1:12]) {\n        angle = i * 30;\n        distance = 25 + (i % 5) * 3;\n        x = cos(angle) * distance;\n        y = sin(angle) * distance;\n        \n        translate([x, y, 0])\n        sphere(0.5 + (i % 3) * 0.3);\n    }\n}\n\n// Assembly of complete casein powder model\nunion() {\n    // Main scoop with texture\n    powder_texture();\n    \n    // Overflowing powder\n    powder_overflow();\n    \n    // Scattered powder particles\n    scattered_powder();\n}",
    "renders": true
  },
  {
    "food_item": "lactose",
    "openscad_code": "// Lactose crystal cluster - realistic style\n// Dimensions: ~70mm x 60mm x 50mm\n// No overhangs >45°, printable without supports\n\n// Main lactose crystal formation\nmodule lactose_crystal() {\n    color([0.95, 0.95, 0.9])  // Off-white color\n    \n    // Base crystal structure\n    union() {\n        // Central crystal\n        translate([0, 0, 5]) {\n            difference() {\n                cube([30, 20, 40], center=true);\n                translate([0, 0, -10]) cube([28, 18, 42], center=true);\n            }\n        }\n        \n        // Side crystal 1\n        translate([20, -5, 15]) {\n            rotate([0, 15, 45]) {\n                difference() {\n                    cube([25, 15, 35], center=true);\n                    translate([0, 0, -8]) cube([23, 13, 37], center=true);\n                }\n            }\n        }\n        \n        // Side crystal 2\n        translate([-18, 8, 10]) {\n            rotate([0, -20, -30]) {\n                difference() {\n                    cube([22, 12, 30], center=true);\n                    translate([0, 0, -6]) cube([20, 10, 32], center=true);\n                }\n            }\n        }\n        \n        // Top crystal\n        translate([5, 12, 25]) {\n            rotate([30, 0, 20]) {\n                difference() {\n                    cube([18, 12, 25], center=true);\n                    translate([0, 0, -5]) cube([16, 10, 27], center=true);\n                }\n            }\n        }\n    }\n}\n\n// Surface texture details\nmodule crystal_texture() {\n    color([0.98, 0.98, 0.94])\n    \n    // Create small pyramids on surfaces\n    for(i = [0:3]) {\n        for(j = [0:2]) {\n            translate([-15 + i*10, -15 + j*10, 5]) {\n                rotate([0, 0, i*30]) {\n                    linear_extrude(height=2, scale=0.5) {\n                        difference() {\n                            square([6, 6], center=true);\n                            square([4, 4], center=true);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Base powder layer\nmodule powder_base() {\n    color([0.93, 0.93, 0.88])\n    \n    difference() {\n        // Main powder bed\n        translate([0, 0, 0]) {\n            cube([70, 60, 3], center=true);\n        }\n        \n        // Create uneven surface\n        for(i = [0:8]) {\n            for(j = [0:7]) {\n                translate([-35 + i*8 + sin(i*j)*2, -30 + j*8 + cos(i*j)*2, 1.5]) {\n                    sphere(r=1.5, $fn=8);\n                }\n            }\n        }\n    }\n}\n\n// Individual powder particles\nmodule powder_particles() {\n    color([0.96, 0.96, 0.92])\n    \n    // Random particles around base\n    for(i = [0:15]) {\n        translate([\n            -35 + rand(i)*70,\n            -30 + rand(i+1)*60,\n            3 + rand(i+2)*2\n        ]) {\n            sphere(r=0.5 + rand(i+3)*1.5, $fn=6);\n        }\n    }\n}\n\n// Helper function for pseudo-random\nfunction rand(n) = (n*13 % 100)/100;\n\n// Assembly\ntranslate([0, 0, 3]) lactose_crystal();\ntranslate([0, 0, 0]) powder_base();\ntranslate([0, 0, 0]) powder_particles();",
    "renders": true
  },
  {
    "food_item": "ghee",
    "openscad_code": "// Ghee container with lid and ghee inside\n// Medium complexity realistic ghee model for 3D printing\n\n// Main parameters\n$fn = 32;\ncontainer_height = 35;\ncontainer_diameter = 60;\nwall_thickness = 2;\nghee_height = 25;\nlid_height = 8;\nlid_overlap = 5;\n\n// Colors\ncontainer_color = \"gold\";\nghee_color = \"#F5DEB3\";  // wheat color for ghee\n\n// Module for container base\nmodule container_base() {\n    difference() {\n        // Main container body\n        cylinder(h=container_height, d=container_diameter, center=false);\n        \n        // Hollow inside\n        translate([0, 0, wall_thickness])\n            cylinder(h=container_height, d=container_diameter - 2*wall_thickness, center=false);\n    }\n}\n\n// Module for ghee surface texture\nmodule ghee_surface() {\n    color(ghee_color) {\n        // Main ghee body\n        translate([0, 0, wall_thickness])\n            cylinder(h=ghee_height - wall_thickness, d=container_diameter - 2*wall_thickness, center=false);\n        \n        // Add slight irregularity to surface\n        for(i=[0:10]) {\n            rotate([0, 0, i*36])\n                translate([random(0,3), random(0,3), ghee_height - 0.5])\n                    sphere(r=random(0.5,1.5), center=true);\n        }\n    }\n}\n\n// Module for container lid\nmodule container_lid() {\n    union() {\n        // Main lid body\n        translate([0, 0, container_height - lid_overlap])\n            cylinder(h=lid_height, d=container_diameter + 2*wall_thickness, center=false);\n        \n        // Lid handle\n        translate([0, 0, container_height - lid_overlap + lid_height])\n            cylinder(h=5, d1=15, d2=8, center=false);\n    }\n}\n\n// Module for decorative rings on container\nmodule decorative_rings() {\n    color(container_color) {\n        // Top ring\n        translate([0, 0, container_height - 5])\n            cylinder(h=3, d=container_diameter + 4, center=false);\n        \n        // Bottom ring\n        translate([0, 0, 2])\n            cylinder(h=3, d=container_diameter + 4, center=false);\n        \n        // Middle ring\n        translate([0, 0, container_height/2])\n            cylinder(h=2, d=container_diameter + 2, center=false);\n    }\n}\n\n// Main assembly\nunion() {\n    // Container with gold color\n    color(container_color) {\n        container_base();\n        decorative_rings();\n    }\n    \n    // Ghee inside\n    ghee_surface();\n    \n    // Lid (shown exploded for visibility)\n    translate([0, 0, 20]) {\n        color(container_color) {\n            container_lid();\n        }\n    }\n}",
    "renders": true
  },
  {
    "food_item": "clabber",
    "openscad_code": "// Clabber (fermented milk) 3D model\n// Realistic style, medium complexity\n\n$fn = 32;\n\n// Main clabber mass\nmodule clabber_mass() {\n    color([0.98, 0.95, 0.85])  // Creamy off-white color\n    difference() {\n        // Main rounded mass\n        scale([1, 0.9, 0.7])\n        sphere(d=60);\n        \n        // Hollow out for bowl shape\n        translate([0, 0, -5])\n        scale([0.9, 0.85, 0.5])\n        sphere(d=60);\n        \n        // Top indentation for realistic shape\n        translate([0, 0, 15])\n        sphere(d=20);\n    }\n}\n\n// Surface texture bubbles\nmodule surface_bubbles() {\n    for(i = [1:30]) {\n        rotate([rand(360), rand(360), rand(360)])\n        translate([\n            rand(-25, 25),\n            rand(-25, 25),\n            rand(15, 20)\n        ])\n        color([0.96, 0.93, 0.82])\n        sphere(d=rand(2, 5));\n    }\n}\n\n// Curd formations\nmodule curd_formations() {\n    for(i = [1:12]) {\n        rotate([rand(180), rand(180), rand(360)])\n        translate([\n            rand(-20, 20),\n            rand(-20, 20),\n            rand(10, 18)\n        ])\n        color([0.95, 0.92, 0.80])\n        scale([1, 0.8, 0.6])\n        sphere(d=rand(6, 10));\n    }\n}\n\n// Liquid whey pooling\nmodule whey_pools() {\n    // Thin layer at bottom\n    translate([0, 0, 10])\n    color([0.97, 0.97, 0.90, 0.7])  // Semi-transparent\n    scale([1.1, 1.1, 0.1])\n    sphere(d=50);\n    \n    // Small puddles on surface\n    for(i = [1:8]) {\n        translate([\n            rand(-20, 20),\n            rand(-20, 20),\n            18\n        ])\n        color([0.97, 0.97, 0.90, 0.5])\n        scale([1, 0.7, 0.05])\n        sphere(d=rand(4, 8));\n    }\n}\n\n// Fermentation cracks\nmodule cracks() {\n    for(i = [1:15]) {\n        rotate([0, 0, rand(360)])\n        translate([\n            rand(-15, 15),\n            rand(-15, 15),\n            rand(16, 19)\n        ])\n        color([0.94, 0.91, 0.78])\n        scale([0.2, rand(2, 5), 0.3])\n        rotate([rand(30), rand(30), 0])\n        cube([rand(3, 8), rand(1, 2), rand(1, 3)]);\n    }\n}\n\n// Foamy top texture\nmodule foam() {\n    translate([0, 0, 20])\n    color([0.99, 0.97, 0.90, 0.8])\n    for(i = [1:20]) {\n        rotate([rand(60), rand(60), rand(360)])\n        translate([\n            rand(-15, 15),\n            rand(-15, 15),\n            rand(0, 2)\n        ])\n        sphere(d=rand(1, 3));\n    }\n}\n\n// Assemble the clabber\ntranslate([0, 0, -10])\nunion() {\n    clabber_mass();\n    surface_bubbles();\n    curd_formations();\n    whey_pools();\n    cracks();\n    foam();\n}",
    "renders": true
  },
  {
    "food_item": "kefir",
    "openscad_code": "// Kefir food item - realistic style with medium complexity\n// 3D printable kefir in a glass jar with visible grains\n\n$fn = 30; // Smooth curves\n\n// Main kefir jar\nmodule kefir_jar() {\n    // Glass jar body\n    difference() {\n        // Outer jar\n        cylinder(h=60, r1=25, r2=28);\n        \n        // Hollow center\n        translate([0, 0, 2])\n            cylinder(h=58, r1=23, r2=26);\n    }\n    \n    // Jar base\n    translate([0, 0, -2])\n        cylinder(h=4, r1=28, r2=28);\n    \n    // Jar rim\n    translate([0, 0, 60])\n        cylinder(h=3, r1=29, r2=29);\n}\n\n// Kefir liquid with slight thickness\nmodule kefir_liquid() {\n    color(\"cornsilk\")\n    difference() {\n        // Main liquid body\n        translate([0, 0, 2])\n            cylinder(h=55, r1=23, r2=26);\n        \n        // Slight concave surface\n        translate([0, 0, 56])\n            sphere(r=28);\n    }\n}\n\n// Kefir grains - small cauliflower-like clusters\nmodule kefir_grain(size) {\n    color(\"ivory\")\n    union() {\n        // Main grain body\n        sphere(r=size);\n        \n        // Small bumps on surface\n        for(i=[0:8]) {\n            rotate([0, 90, i*45])\n            translate([size*0.8, 0, 0])\n                sphere(r=size*0.4);\n        }\n        \n        // Tiny surface details\n        for(i=[0:15]) {\n            rotate([rand(360), rand(360), rand(360)])\n            translate([rand(size*0.9), rand(size*0.9), rand(size*0.9)])\n                sphere(r=size*0.15);\n        }\n    }\n}\n\n// Place grains in kefir\nmodule grains_in_kefir() {\n    // Random placement of grains\n    for(i=[0:12]) {\n        translate([\n            rand(20)-10, \n            rand(20)-10, \n            rand(40)+10\n        ]) \n        rotate([rand(360), rand(360), rand(360)])\n        kefir_grain(2 + rand(2));\n    }\n    \n    // Some floating near surface\n    for(i=[0:5]) {\n        translate([\n            rand(15)-7.5, \n            rand(15)-7.5, \n            52 + rand(2)\n        ]) \n        rotate([rand(360), rand(360), rand(360)])\n        kefir_grain(1.5 + rand(1));\n    }\n}\n\n// Slight foam/bubbles on surface\nmodule kefir_foam() {\n    color(\"white\", 0.7)\n    for(i=[0:20]) {\n        translate([\n            rand(22)-11, \n            rand(22)-11, \n            56 + rand(0.5)\n        ]) \n        sphere(r=0.5 + rand(0.5));\n    }\n}\n\n// Main assembly\ntranslate([0, 0, 0]) {\n    // Glass jar (transparent)\n    color(\"lightblue\", 0.3)\n    kefir_jar();\n    \n    // Kefir contents\n    kefir_liquid();\n    grains_in_kefir();\n    kefir_foam();\n}",
    "renders": true
  },
  {
    "food_item": "quark",
    "openscad_code": "// Quark food item - realistic style, medium complexity\n// Quark is a fresh dairy product similar to cottage cheese or curd\n\n$fn = 32;\n\n// Main quark mass with curd texture\nmodule quark_mass() {\n    // Base shape - slightly irregular mound\n    difference() {\n        scale([1, 0.9, 0.7]) \n            sphere(d = 60);\n        \n        // Create irregular top surface\n        for(i = [0:7]) {\n            rotate([0, 0, i * 45])\n                translate([0, 20, 5])\n                    scale([1, 0.3, 0.5])\n                        sphere(d = 25);\n        }\n    }\n}\n\n// Individual curd pieces on surface\nmodule curd_pieces() {\n    color(\"gainsboro\")\n    for(i = [0:15]) {\n        angle = i * 137.5;  // Golden angle for natural distribution\n        radius = 15 + sin(i * 0.8) * 10;\n        height = 8 + sin(i * 1.2) * 3;\n        \n        translate([\n            sin(angle) * radius,\n            cos(angle) * radius,\n            15 + sin(i) * 2\n        ]) {\n            scale([1, 1, 0.6])\n                sphere(d = 4 + sin(i) * 2);\n        }\n    }\n}\n\n// Liquid whey pooling effect\nmodule whey_pools() {\n    color(\"azure\", 0.3)\n    for(i = [0:3]) {\n        angle = i * 120;\n        translate([\n            sin(angle) * 12,\n            cos(angle) * 12,\n            14\n        ]) {\n            cylinder(h = 0.5, d1 = 8, d2 = 12);\n        }\n    }\n}\n\n// Surface moisture droplets\nmodule moisture_droplets() {\n    color(\"azure\", 0.6)\n    for(i = [0:20]) {\n        angle = i * 97.3;\n        radius = 5 + sin(i * 2.1) * 15;\n        \n        translate([\n            sin(angle) * radius,\n            cos(angle) * radius,\n            16 + sin(i) * 1.5\n        ]) {\n            sphere(d = 1 + sin(i * 3) * 0.5);\n        }\n    }\n}\n\n// Serving bowl indentation\nmodule bowl_indent() {\n    difference() {\n        union();\n        translate([0, 0, -5])\n            cylinder(h = 10, d = 65);\n    }\n}\n\n// Final assembly\ntranslate([0, 0, 5])\n    color(\"gainsboro\") {\n        // Main quark body\n        quark_mass();\n        \n        // Add texture and details\n        curd_pieces();\n        whey_pools();\n        moisture_droplets();\n        \n        // Create bowl shape\n        bowl_indent();\n    }",
    "renders": true
  },
  {
    "food_item": "fromage",
    "openscad_code": "$fn=50;\n\n// Fromage (Camembert-style) - realistic medium complexity\n// Dimensions: 110mm diameter x 35mm height\n\n// Cheese wheel parameters\nwheel_d = 100;\nwheel_h = 30;\nrind_thickness = 2;\nslice_depth = 8;\n\n// Colors\nrind_color = [0.8, 0.6, 0.3];  // Bloomy rind color\ncheese_color = [0.95, 0.9, 0.7];  // Pale yellow interior\n\nmodule camembert_wheel() {\n    // Main cheese body\n    color(cheese_color) {\n        difference() {\n            cylinder(d=wheel_d, h=wheel_h, center=true);\n            \n            // Hollow out center slightly (natural depression)\n            translate([0, 0, 5])\n                cylinder(d=wheel_d*0.8, h=wheel_h*0.8, center=true);\n        }\n    }\n    \n    // Bloomy rind layer\n    color(rind_color) {\n        difference() {\n            cylinder(d=wheel_d, h=wheel_h, center=true);\n            cylinder(d=wheel_d-2*rind_thickness, h=wheel_h+1, center=true);\n        }\n    }\n    \n    // Top surface texture (irregular bloomy rind)\n    for (i = [0:30]) {\n        angle = i * 12 + (rand(i)*10);\n        radius = wheel_d/2 * (0.8 + rand(i*2)*0.2);\n        height = 0.5 + rand(i*3)*0.5;\n        \n        translate([\n            cos(angle) * radius,\n            sin(angle) * radius,\n            wheel_h/2 + height/2\n        ]) {\n            scale([1, 1, 0.5 + rand(i*4)*0.5])\n                sphere(d=1.5 + rand(i*5)*1);\n        }\n    }\n    \n    // Bottom surface texture\n    for (i = [0:25]) {\n        angle = i * 14.4 + (rand(i*6)*8);\n        radius = wheel_d/2 * (0.7 + rand(i*7)*0.3);\n        height = 0.3 + rand(i*8)*0.4;\n        \n        translate([\n            cos(angle) * radius,\n            sin(angle) * radius,\n            -wheel_h/2 - height/2\n        ]) {\n            scale([1, 1, 0.3 + rand(i*9)*0.3])\n                sphere(d=1 + rand(i*10)*0.8);\n        }\n    }\n    \n    // Side indentations (from aging process)\n    for (i = [0:8]) {\n        angle = i * 45;\n        translate([\n            cos(angle) * wheel_d/2,\n            sin(angle) * wheel_d/2,\n            0\n        ])\n        rotate([0, 90, angle])\n            cylinder(d=8 + rand(i*11)*4, h=12 + rand(i*12)*6, center=true);\n    }\n    \n    // Cut wedge showing interior\n    rotate([0, 0, 15])\n    translate([wheel_d/4, 0, 0])\n    rotate([0, 0, 30])\n    linear_extrude(height=wheel_h*1.1, center=true, convexity=10)\n        polygon(points=[\n            [0, 0],\n            [wheel_d/2*0.8, -wheel_d/4*0.3],\n            [wheel_d/2*0.8, wheel_d/4*0.3]\n        ]);\n    \n    // Interior texture visible in cut\n    color(cheese_color) {\n        // Small holes from aging\n        for (i = [0:15]) {\n            angle = i * 24 + rand(i*13)*12;\n            radius = wheel_d/2 * 0.3 + rand(i*14)*wheel_d/4;\n            \n            translate([\n                cos(angle) * radius,\n                sin(angle) * radius,\n                -wheel_h/4 + rand(i*15)*wheel_h/2\n            ]) {\n                sphere(d=1 + rand(i*16)*2);\n            }\n        }\n    }\n}\n\n// Helper function for pseudo-random numbers\nfunction rand(x) = (sin(x*123.456) + 1)/2;\n\n// Main assembly\ncamembert_wheel();",
    "renders": true
  },
  {
    "food_item": "feta",
    "openscad_code": "// Realistic 3D printable feta cheese block (medium complexity)\n// Size: ~60mm x 40mm x 35mm (printable without supports)\n\n$fn = 32; // Smooth curves for realism\n\n// Main feta block with irregular shape\nmodule feta_block() {\n    color(\"beige\") {\n        difference() {\n            // Base irregular block\n            union() {\n                // Main body - slightly tilted rectangular base\n                translate([0, 0, 5])\n                    rotate([2, -1.5, 3])\n                    scale([1, 0.85, 0.7])\n                    cube([60, 40, 30], center=true);\n                \n                // Added irregularity on top\n                translate([-5, 8, 15])\n                    rotate([5, -3, 8])\n                    scale([0.4, 0.3, 0.4])\n                    cube([25, 20, 15], center=true);\n                \n                translate([8, -10, 18])\n                    rotate([-4, 2, -5])\n                    scale([0.35, 0.25, 0.3])\n                    cube([20, 15, 12], center=true);\n            }\n            \n            // Carve out some holes and cracks for realism\n            for(i = [1:8]) {\n                translate([\n                    rands(-25, 25, 1)[0], \n                    rands(-15, 15, 1)[0], \n                    rands(5, 25, 1)[0]\n                ]) {\n                    rotate([rands(0, 360, 1)[0], rands(0, 180, 1)[0], rands(0, 360, 1)[0]])\n                        sphere(rands(1.5, 4, 1)[0]);\n                }\n            }\n            \n            // Add some cracks on the surface\n            for(i = [1:12]) {\n                translate([\n                    rands(-28, 28, 1)[0], \n                    rands(-18, 18, 1)[0], \n                    rands(0, 30, 1)[0]\n                ]) {\n                    rotate([rands(0, 90, 1)[0], rands(0, 90, 1)[0], rands(0, 180, 1)[0]])\n                        scale([rands(0.5, 2, 1)[0], rands(8, 15, 1)[0], rands(0.3, 1, 1)[0]])\n                        cube([1, 1, 1], center=true);\n                }\n            }\n        }\n    }\n}\n\n// Add salt crystals on surface\nmodule salt_crystals() {\n    color(\"white\") {\n        for(i = [1:30]) {\n            translate([\n                rands(-28, 28, 1)[0], \n                rands(-18, 18, 1)[0], \n                rands(2, 32, 1)[0]\n            ]) {\n                scale([0.8, 0.8, 0.8])\n                rotate([rands(0, 90, 1)[0], rands(0, 90, 1)[0], rands(0, 180, 1)[0]])\n                    cube([rands(0.5, 1.2, 1)[0], rands(0.5, 1.2, 1)[0], rands(0.5, 1.2, 1)[0]], center=true);\n            }\n        }\n    }\n}\n\n// Add surface texture/brine marks\nmodule brine_marks() {\n    color(\"ivory\") {\n        difference() {\n            // Thin surface layer\n            translate([0, 0, 0])\n                rotate([2, -1.5, 3])\n                scale([1.02, 0.87, 0.72])\n                cube([60, 40, 30], center=true);\n            \n            // Cut away everything except surface\n            translate([0, 0, -2])\n                rotate([2, -1.5, 3])\n                scale([0.98, 0.83, 0.68])\n                cube([60, 40, 30], center=true);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    feta_block();\n    salt_crystals();\n    brine_marks();\n}",
    "renders": true
  },
  {
    "food_item": "brie",
    "openscad_code": "// Brie cheese wheel with realistic features\n// Dimensions: ~80mm diameter, ~25mm height\n\n$fn = 50;\n\n// Main wheel body\nmodule brie_wheel() {\n    // Base wheel shape\n    difference() {\n        // Main cheese body\n        cylinder(h = 22, r = 40, $fn = 100);\n        \n        // Slight top indentation\n        translate([0, 0, 20])\n        cylinder(h = 3, r1 = 35, r2 = 38, $fn = 100);\n    }\n}\n\n// Rind texture pattern\nmodule rind_texture() {\n    // Create bumpy rind surface\n    for (i = [0:5:360]) {\n        rotate([0, 0, i])\n        translate([38, 0, 10])\n        sphere(r = 1.5 + sin(i * 3) * 0.5);\n    }\n    \n    // Vertical grooves\n    for (i = [0:15:360]) {\n        rotate([0, 0, i])\n        translate([39, 0, 11])\n        cube([2, 0.5, 20], center = true);\n    }\n}\n\n// Soft cheese center\nmodule cheese_center() {\n    color(\"beige\")\n    difference() {\n        cylinder(h = 20, r = 36, $fn = 100);\n        \n        // Slight irregularities in center\n        for (i = [0:30:360]) {\n            rotate([0, 0, i])\n            translate([20 + sin(i * 5) * 5, 0, 10])\n            sphere(r = 2 + sin(i * 2) * 1);\n        }\n    }\n}\n\n// Surface imperfections\nmodule surface_details() {\n    // Small dimples\n    for (i = [0:20]) {\n        angle = i * 137.5;\n        radius = 15 + sin(i * 3) * 10;\n        translate([cos(angle) * radius, sin(angle) * radius, 21])\n        sphere(r = 0.5 + sin(i) * 0.3);\n    }\n    \n    // Tiny holes\n    for (i = [0:15]) {\n        angle = i * 97.3;\n        radius = 20 + cos(i * 2) * 15;\n        translate([cos(angle) * radius, sin(angle) * radius, 21.5])\n        sphere(r = 0.3);\n    }\n}\n\n// Bottom rind pattern\nmodule bottom_rind() {\n    // Radial lines on bottom\n    for (i = [0:10:360]) {\n        rotate([0, 0, i])\n        translate([20, 0, 0.5])\n        cube([40, 0.8, 1]);\n    }\n    \n    // Concentric circles\n    for (r = [10:10:35]) {\n        translate([0, 0, 0.5])\n        cylinder(h = 1, r = r, $fn = 100);\n    }\n}\n\n// Assembly\ntranslate([0, 0, 1]) {\n    // Rind (outer layer)\n    color(\"#F5DEB3\") {\n        union() {\n            brie_wheel();\n            translate([0, 0, 22])\n            rind_texture();\n        }\n    }\n    \n    // Soft cheese interior\n    translate([0, 0, 2])\n    cheese_center();\n    \n    // Surface details\n    color(\"#F5F5DC\")\n    surface_details();\n    \n    // Bottom details\n    color(\"#DEB887\")\n    bottom_rind();\n}",
    "renders": true
  },
  {
    "food_item": "camembert",
    "openscad_code": "// Camembert Cheese with Realistic Style - Medium Complexity\n// Dimensions: 80mm diameter, 30mm height\n\n$fn = 64;\n\n// Main cheese wheel\nmodule camembert() {\n    color(\"wheat\") {\n        // Outer rind\n        difference() {\n            // Main cylinder\n            cylinder(h = 25, r = 40);\n            \n            // Hollow center\n            translate([0, 0, -1])\n                cylinder(h = 27, r = 38);\n        }\n        \n        // Top rind layer\n        translate([0, 0, 24])\n            cylinder(h = 2, r = 40);\n        \n        // Bottom rind layer\n            cylinder(h = 2, r = 40);\n    }\n}\n\n// Brie-like ridges on rind surface\nmodule rind_texture() {\n    color(\"burlywood\") {\n        // Top surface ridges\n        for (i = [0:15:359]) {\n            rotate([0, 0, i])\n                translate([35, 0, 24])\n                    scale([0.3, 5, 0.5])\n                        sphere(r = 1);\n        }\n        \n        // Bottom surface ridges\n        for (i = [0:15:359]) {\n            rotate([0, 0, i])\n                translate([35, 0, 0])\n                    scale([0.3, 5, 0.5])\n                        sphere(r = 1);\n        }\n    }\n}\n\n// Cheese paste texture (creamy interior)\nmodule cheese_paste() {\n    color(\"beige\") {\n        // Interior filling\n        translate([0, 0, 2])\n            cylinder(h = 21, r = 37.5);\n        \n        // Small air bubbles characteristic of camembert\n        for (i = [0:20]) {\n            translate([\n                randx = rands(-30, 30, 1)[0],\n                randy = rands(-30, 30, 1)[0],\n                randz = rands(5, 20, 1)[0]\n            ])\n                sphere(r = rands(0.5, 1.5, 1)[0]);\n        }\n    }\n}\n\n// Label/box packaging remnant\nmodule label_remains() {\n    color(\"white\", 0.7) {\n        // Paper label fragment\n        translate([0, 0, 26])\n            cylinder(h = 0.5, r = 35);\n        \n        // Label text area (slightly recessed)\n        translate([0, 0, 26.4])\n            cylinder(h = 0.2, r = 25);\n    }\n}\n\n// Mold pattern on rind (characteristic white bloom)\nmodule mold_pattern() {\n    color(\"white\", 0.8) {\n        // Random white spots on rind\n        for (i = [0:200]) {\n            a = rands(0, 360, 1)[0];\n            r = rands(38, 40, 1)[0];\n            h = rands(0, 25, 1)[0];\n            \n            translate([\n                r * cos(a),\n                r * sin(a),\n                h\n            ])\n                sphere(r = rands(0.3, 0.8, 1)[0]);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    camembert();\n    rind_texture();\n    cheese_paste();\n    label_remains();\n    mold_pattern();\n}",
    "renders": true
  },
  {
    "food_item": "cheddar",
    "openscad_code": "// Realistic cheddar block with medium complexity\n// Includes characteristic holes, rounded edges, and label\n// Designed for 3D printing with no overhangs\n\n$fn = 36;\n\n// Main cheddar block dimensions\nwidth = 60;\nheight = 40;\ndepth = 70;\n\n// Create the main block with rounded edges\nmodule cheddar_block() {\n    // Base rectangular shape with rounded edges\n    difference() {\n        // Main block with slightly irregular shape\n        union() {\n            // Center section\n            translate([0, -2, 0])\n            scale([1, 1.1, 1])\n            rounded_cube(width, height, depth, 5);\n            \n            // Slight bulge on top\n            translate([0, height/2 - 5, 0])\n            sphere(d = width * 0.8);\n        }\n        \n        // Cut bottom flat for printing\n        translate([-width/2 - 10, -height/2 - 10, -depth/2 - 10])\n        cube([width + 20, 10, depth + 20]);\n    }\n}\n\n// Helper module for rounded cube\nmodule rounded_cube(w, h, d, r) {\n    hull() {\n        for (x = [-1, 1])\n        for (y = [-1, 1])\n        for (z = [-1, 1])\n        translate([x * (w/2 - r), y * (h/2 - r), z * (d/2 - r)])\n        sphere(r = r);\n    }\n}\n\n// Create holes characteristic of cheddar\nmodule cheese_holes() {\n    random_seed = 42;\n    // Generate variety of hole sizes and positions\n    for (i = [1:8]) {\n        hole_size = rands(2, 6, 1, random_seed + i)[0];\n        hole_x = rands(-width/3, width/3, 1, random_seed + i * 2)[0];\n        hole_y = rands(-height/4, height/4, 1, random_seed + i * 3)[0];\n        hole_z = rands(-depth/3, depth/3, 1, random_seed + i * 4)[0];\n        \n        translate([hole_x, hole_y, hole_z])\n        sphere(d = hole_size);\n    }\n}\n\n// Create surface texture for realistic appearance\nmodule surface_texture() {\n    // Small bumps on surface\n    for (x = [-width/2 + 5:10:width/2 - 5]) {\n        for (z = [-depth/2 + 5:10:depth/2 - 5]) {\n            if ($t = 0) {\n                bump_size = rands(0.5, 1.5, 1, x * z)[0];\n                translate([x, height/2 - 2, z])\n                sphere(d = bump_size);\n            }\n        }\n    }\n}\n\n// Create cheese label/wrap\nmodule cheese_label() {\n    // Thin wrapper on sides\n    color(\"darkorange\")\n    difference() {\n        // Main wrapper\n        translate([0, 0, 0])\n        rounded_cube(width + 1, height + 1, depth + 1, 6);\n        \n        // Remove center to create thin shell\n        translate([0, 0, 0])\n        rounded_cube(width - 1, height - 1, depth - 1, 4);\n    }\n    \n    // Label band\n    color(\"red\")\n    translate([0, 0, depth/2 + 0.5])\n    cube([width * 0.7, height * 0.3, 1], center = true);\n}\n\n// Assemble the cheddar\ncolor(\"gold\")\ndifference() {\n    // Main cheese body\n    cheddar_block();\n    \n    // Add holes\n    cheese_holes();\n}\n\n// Add surface texture\nunion() {\n    surface_texture();\n    \n    // Add label (optional for printing)\n    // cheese_label();\n}\n\n// Position for printing\ntranslate([0, 0, depth/2])\nrotate([90, 0, 0])",
    "renders": true
  },
  {
    "food_item": "gouda",
    "openscad_code": "// Gouda Cheese Wheel - Realistic Style, Medium Complexity\n\n$fn = 32;\n\n// Main cheese wheel parameters\nwheel_diameter = 80;\nwheel_height = 25;\nrind_thickness = 2;\ncurvature = 5;\n\n// Gouda typically has a yellow interior and red/yellow rind\ncolor([0.95, 0.8, 0.15]) {\n    // Main cheese body with curved top and bottom\n    difference() {\n        // Main cylinder body\n        cylinder(h=wheel_height, d=wheel_diameter, center=true);\n        \n        // Create curved top and bottom\n        translate([0, 0, wheel_height/2 - curvature])\n            sphere(d=wheel_diameter - 2);\n        mirror([0, 0, 1])\n            translate([0, 0, wheel_height/2 - curvature])\n                sphere(d=wheel_diameter - 2);\n    }\n}\n\n// Red wax rind coating\ncolor([0.8, 0.15, 0.1]) {\n    // Outer rind shell\n    difference() {\n        // Outer cylinder\n        cylinder(h=wheel_height + 2, d=wheel_diameter + 2, center=true);\n        \n        // Hollow out center\n        cylinder(h=wheel_height + 4, d=wheel_diameter, center=true);\n    }\n    \n    // Top and bottom rind caps\n    translate([0, 0, wheel_height/2 + 1])\n        cylinder(h=2, d=wheel_diameter + 2);\n    mirror([0, 0, 1])\n        translate([0, 0, wheel_height/2 + 1])\n            cylinder(h=2, d=wheel_diameter + 2);\n}\n\n// Characteristic gouda dimples on the rind\nmodule gouda_dimple() {\n    difference() {\n        sphere(d=4);\n        sphere(d=3);\n    }\n}\n\n// Create pattern of dimples around the edge\nfor(i = [0:11]) {\n    rotate([0, 0, i * 30])\n        translate([wheel_diameter/2 + 1, 0, 0])\n            rotate([90, 0, 0])\n                gouda_dimple();\n}\n\n// Second row of dimples offset\nfor(i = [0:11]) {\n    rotate([0, 0, i * 30 + 15])\n        translate([wheel_diameter/2 + 1, 0, 8])\n            rotate([90, 0, 0])\n                gouda_dimple();\n}\n\n// Cheese texture - small holes characteristic of gouda\nmodule cheese_hole() {\n    color([0.95, 0.8, 0.15])\n        sphere(d=1.5);\n}\n\n// Create random pattern of small holes throughout cheese\nfor(i = [0:20]) {\n    translate([\n        (sin(i * 73) * wheel_diameter/2.5),\n        (cos(i * 37) * wheel_diameter/2.5),\n        (sin(i * 29) * wheel_height/3)\n    ]) {\n        cheese_hole();\n    }\n}",
    "renders": true
  },
  {
    "food_item": "mozzarella",
    "openscad_code": "// Mozzarella ball with realistic texture and liquid sheen\n// Overall dimensions: ~60mm diameter\n\n$fn = 36;\n\n// Main mozzarella ball\nmodule mozzarella_ball() {\n    color(\"#FFF8E7\") difference() {\n        // Main sphere with slight flattening\n        scale([1, 1, 0.9]) sphere(d = 55);\n        \n        // Indentations for natural look\n        for(i = [0:7]) {\n            rotate([rand(0,10), rand(0,10), i*45]) \n                translate([0, 0, -25])\n                    scale([1, 1, 0.3])\n                        sphere(d = rand(8,12));\n        }\n        \n        // Drainage hole at bottom\n        translate([0, 0, -30])\n            cylinder(h = 10, d = 5);\n    }\n}\n\n// Surface texture - small bumps\nmodule surface_texture() {\n    for(i = [0:20]) {\n        for(j = [0:i]) {\n            rotate([0, 0, j*(360/i)]) {\n                translate([rand(22,26), 0, rand(-20,20)])\n                    rotate([90, 0, 0])\n                        scale([0.8, 0.8, 1])\n                            cylinder(h = rand(0.5,1.5), d = rand(2,4));\n            }\n        }\n    }\n}\n\n// Liquid sheen layer\nmodule liquid_sheen() {\n    color(\"#FFFFFF\", 0.3) {\n        // Thin transparent coating\n        scale([1.02, 1.02, 0.92]) sphere(d = 55);\n    }\n}\n\n// Stringy mozzarella fibers\nmodule fibers() {\n    for(i = [0:12]) {\n        rotate([rand(-20,20), rand(-20,20), i*30]) {\n            translate([rand(20,25), 0, rand(-15,15)]) {\n                hull() {\n                    sphere(d = 1.5);\n                    translate([rand(5,12), 0, rand(-2,2)])\n                        sphere(d = 0.8);\n                }\n            }\n        }\n    }\n}\n\n// Helper for random values\nfunction rand(min, max) = min + (max - min) * rands(0, 1, 1)[0];\n\n// Assembly\nunion() {\n    mozzarella_ball();\n    surface_texture();\n    liquid_sheen();\n    fibers();\n}",
    "renders": true
  },
  {
    "food_item": "parmesan",
    "openscad_code": "$fa = 2;\n$fs = 0.5;\n\n// Parmesan wedge\nmodule parmesan_wedge() {\n    color([1, 0.9, 0.75]) {\n        difference() {\n            // Main wedge shape\n            union() {\n                // Top surface\n                translate([0, 0, 30]) cube([80, 60, 2], center = true);\n                \n                // Side faces\n                translate([0, -30, 15]) cube([80, 2, 30], center = true);\n                translate([40, 0, 15]) cube([2, 60, 30], center = true);\n                \n                // Bottom angled face\n                translate([0, 0, 0]) {\n                    rotate([0, 0, 0]) cube([80, 60, 2], center = true);\n                }\n                \n                // Front face\n                translate([-40, 0, 15]) cube([2, 60, 30], center = true);\n            }\n            \n            // Remove corners to make wedge shape\n            translate([-40, -30, 0]) rotate([0, 0, 0]) \n                cube([100, 100, 30], center = false);\n            \n            // Angled cut for wedge\n            translate([40, 30, 0]) rotate([0, 0, 45]) \n                cube([100, 100, 40], center = false);\n        }\n    }\n}\n\n// Cheese texture - small holes\nmodule cheese_holes() {\n    color([1, 0.85, 0.65]) {\n        for (i = [0:8]) {\n            translate([\n                -30 + i * 8 + (i % 3) * 3,\n                -20 + (i % 4) * 10,\n                25 + (i % 2) * 3\n            ]) sphere(d = 1.5 + sin(i) * 0.5);\n        }\n        for (i = [0:5]) {\n            translate([\n                20 + (i % 3) * 5,\n                10 + i * 8,\n                20 + i * 2\n            ]) sphere(d = 1 + cos(i) * 0.3);\n        }\n    }\n}\n\n// Surface cracks\nmodule cracks() {\n    color([0.8, 0.7, 0.55]) {\n        for (i = [0:12]) {\n            translate([\n                -35 + i * 6,\n                -25 + sin(i) * 5,\n                31\n            ]) rotate([0, 0, i * 15]) \n                cube([4, 0.5, 1], center = true);\n        }\n    }\n}\n\n// Rind\nmodule rind() {\n    color([0.9, 0.8, 0.6]) {\n        // Top rind\n        translate([0, 0, 32]) cube([82, 62, 2], center = true);\n        \n        // Side rind\n        translate([41, 0, 15]) cube([2, 62, 30], center = true);\n        translate([-41, 0, 15]) cube([2, 62, 30], center = true);\n        translate([0, 31, 15]) cube([82, 2, 30], center = true);\n    }\n}\n\n// Branding stamp\nmodule stamp() {\n    color([0.7, 0.6, 0.5]) {\n        translate([0, 0, 33]) \n            cube([12, 6, 0.5], center = true);\n    }\n}\n\n// Main assembly\nunion() {\n    parmesan_wedge();\n    cheese_holes();\n    cracks();\n    rind();\n    stamp();\n}",
    "renders": true
  },
  {
    "food_item": "ricotta",
    "openscad_code": "// Ricotta cheese in a small bowl - realistic style, medium complexity\n// Overall dimensions: ~65mm diameter, ~35mm height\n\n// Main parameters\nbowl_radius = 30;\nbowl_height = 15;\nricotta_height = 20;\ncurd_count = 25;\n\n// Bowl module\nmodule bowl() {\n    // Outer bowl\n    difference() {\n        cylinder(h = bowl_height, r1 = bowl_radius, r2 = bowl_radius * 0.9, $fn = 64);\n        translate([0, 0, -1])\n            cylinder(h = bowl_height + 2, r1 = bowl_radius - 3, r2 = bowl_radius * 0.9 - 3, $fn = 64);\n    }\n    \n    // Bowl rim\n    translate([0, 0, bowl_height])\n        cylinder(h = 2, r1 = bowl_radius, r2 = bowl_radius, $fn = 64);\n}\n\n// Individual curd module for texture\nmodule curd() {\n    // Random sized curd pieces\n    scale([1 + (rands(0, 0.3, 1)[0]), \n           1 + (rands(0, 0.3, 1)[0]), \n           1 + (rands(0, 0.5, 1)[0])])\n        sphere(r = 2.5 + rands(0, 1, 1)[0], $fn = 12);\n}\n\n// Main ricotta mass\nmodule ricotta_mass() {\n    color(\"beige\")\n    difference() {\n        // Main shape - slightly irregular mound\n        scale([1, 1, 0.8])\n        translate([0, 0, bowl_height])\n            sphere(r = bowl_radius - 5, $fn = 48);\n        \n        // Flatten top slightly\n        translate([0, 0, bowl_height + ricotta_height])\n            cube([bowl_radius * 2, bowl_radius * 2, 10], center = true);\n    }\n    \n    // Add curds on surface for texture\n    for(i = [0:curd_count - 1]) {\n        angle = i * 137.5;  // Golden angle for distribution\n        radius = sqrt(i) * 4;  // Spiral distribution\n        x = cos(angle) * radius;\n        y = sin(angle) * radius;\n        \n        translate([x, y, bowl_height + 8 + rands(0, 5, 1)[0]])\n            curd();\n    }\n    \n    // Add some larger curds breaking surface\n    for(i = [0:8]) {\n        angle = i * 45;\n        x = cos(angle) * (bowl_radius - 10);\n        y = sin(angle) * (bowl_radius - 10);\n        \n        translate([x + rands(-3, 3, 1)[0], \n                  y + rands(-3, 3, 1)[0], \n                  bowl_height + ricotta_height - 2])\n            scale([1.5, 1.5, 2])\n                curd();\n    }\n}\n\n// Bowl color - ceramic white\ncolor(\"white\")\nbowl();\n\n// Ricotta color - creamy beige\nricotta_mass();\n\n// Add moisture sheen\ncolor([1, 1, 0.9, 0.3])\ntranslate([0, 0, bowl_height + 2])\n    scale([0.9, 0.9, 0.3])\n        sphere(r = bowl_radius - 3, $fn = 32);",
    "renders": true
  },
  {
    "food_item": "mascarpone",
    "openscad_code": "// Mascarpone container and contents\n// Medium complexity realistic style\n\n$fn = 32;\n\n// Main container dimensions\ncontainer_d = 60;\ncontainer_h = 35;\nwall_thickness = 2;\n\n// Mascarpone dimensions\nmascarpone_d = 55;\nmascarpone_h = 25;\n\n// Color definitions\ncontainer_color = [0.85, 0.85, 0.82];\nmascarpone_color = [0.98, 0.97, 0.92];\nlid_color = [0.9, 0.9, 0.88];\n\n// Container body\nmodule container() {\n    difference() {\n        // Outer cylinder\n        cylinder(h = container_h, d = container_d, center = false);\n        \n        // Inner cavity\n        translate([0, 0, wall_thickness])\n        cylinder(h = container_h - wall_thickness + 1, d = container_d - 2*wall_thickness, center = false);\n    }\n}\n\n// Container rim detail\nmodule rim() {\n    difference() {\n        cylinder(h = 3, d = container_d + 2, center = false);\n        cylinder(h = 4, d = container_d, center = false);\n    }\n}\n\n// Mascarpone surface texture\nmodule mascarpone_surface() {\n    difference() {\n        // Smooth top\n        cylinder(h = mascarpone_h, d = mascarpone_d, center = false);\n        \n        // Swirl pattern\n        for (a = [0:30:359]) {\n            rotate([0, 0, a])\n            translate([mascarpone_d/2 - 8, -2, mascarpone_h - 0.5])\n            cube([15, 4, 2], center = false);\n        }\n        \n        // Random small dents for texture\n        for (i = [1:20]) {\n            angle = rands(0, 360, 1)[0];\n            radius = rands(5, mascarpone_d/2 - 5, 1)[0];\n            translate([radius * cos(angle), radius * sin(angle), mascarpone_h - 0.2])\n            sphere(d = rands(1.5, 3, 1)[0]);\n        }\n    }\n}\n\n// Container lid\nmodule lid() {\n    difference() {\n        // Main lid\n        cylinder(h = 5, d = container_d + 1, center = false);\n        \n        // Inner lip\n        translate([0, 0, 1])\n        cylinder(h = 4, d = container_d - 2*wall_thickness, center = false);\n    }\n    \n    // Handle on top\n    translate([0, 0, 5])\n    cylinder(h = 8, d1 = 12, d2 = 8, center = false);\n}\n\n// Assembly\ntranslate([0, 0, 0]) {\n    // Container\n    color(container_color)\n    container();\n    \n    // Rim\n    color(container_color)\n    translate([0, 0, container_h])\n    rim();\n    \n    // Mascarpone inside\n    color(mascarpone_color)\n    translate([0, 0, wall_thickness])\n    mascarpone_surface();\n    \n    // Lid (slightly offset for display)\n    color(lid_color)\n    translate([0, 0, container_h + 5])\n    lid();\n}",
    "renders": true
  },
  {
    "food_item": "provolone",
    "openscad_code": "// Provolone Cheese - Realistic Style with Medium Complexity\n// Overall dimensions: ~70mm length, ~25mm diameter\n\n$fn = 32;\n\n// Main cheese color - pale yellow\ncolor([1, 0.9, 0.6]) {\n    // Main cylindrical body with slight taper\n    cylinder(h = 65, r1 = 12, r2 = 11, center = true);\n    \n    // Rounded ends\n    translate([0, 0, -32.5])\n        sphere(r = 12);\n    translate([0, 0, 32.5])\n        sphere(r = 11);\n}\n\n// Texture pattern - small dimples and holes\nmodule cheese_texture() {\n    for (i = [0:15]) {\n        rotate([0, 90, i * 24])\n            translate([0, 0, -30 + i * 4])\n                for (j = [0:5]) {\n                    rotate([0, 0, j * 60])\n                        translate([10, 0, 0])\n                            // Small holes characteristic of provolone\n                            difference() {\n                                sphere(r = 1.2);\n                                translate([0, 0, -1])\n                                    cube([2.4, 2.4, 2.4], center = true);\n                            }\n                }\n    }\n}\n\n// Apply texture as indentations\ncolor([0.95, 0.85, 0.55]) {\n    difference() {\n        // Main cheese body\n        union() {\n            cylinder(h = 65, r1 = 12, r2 = 11, center = true);\n            translate([0, 0, -32.5])\n                sphere(r = 12);\n            translate([0, 0, 32.5])\n                sphere(r = 11);\n        }\n        \n        // Texture holes\n        cheese_texture();\n    }\n}\n\n// Rind layer - thin outer shell\ncolor([0.85, 0.75, 0.45]) {\n    difference() {\n        // Slightly larger outer shell\n        union() {\n            cylinder(h = 66, r1 = 12.5, r2 = 11.5, center = true);\n            translate([0, 0, -33])\n                sphere(r = 12.5);\n            translate([0, 0, 33])\n                sphere(r = 11.5);\n        }\n        \n        // Hollow out center\n        union() {\n            cylinder(h = 67, r1 = 12, r2 = 11, center = true);\n            translate([0, 0, -33.5])\n                sphere(r = 12);\n            translate([0, 0, 33.5])\n                sphere(r = 11);\n        }\n    }\n}\n\n// Hanging loop characteristic of provolone\ncolor([0.9, 0.8, 0.5]) {\n    translate([0, 0, 33])\n        rotate([90, 0, 0])\n            difference() {\n                // Main loop\n                torus(3, 1.5);\n                \n                // Cut for attachment\n                translate([0, -3, 0])\n                    cube([6, 6, 3], center = true);\n            }\n}\n\n// Small label/tag\ncolor([0.9, 0.9, 0.9, 0.8]) {\n    translate([0, 13, 15])\n        rotate([90, 0, 0])\n            cube([8, 12, 0.5], center = true);\n}\n\n// Surface imperfections for realism\nmodule imperfections() {\n    for (i = [0:20]) {\n        rotate([0, 0, i * 18])\n            translate([11.5, 0, -25 + i * 2.5])\n                sphere(r = 0.3 + (i % 3) * 0.2);\n    }\n}\n\ncolor([0.92, 0.82, 0.52]) {\n    imperfections();\n}\n\nmodule torus(outer_r, inner_r) {\n    rotate_extrude()\n        translate([outer_r, 0, 0])\n            circle(r = inner_r);\n}",
    "renders": true
  },
  {
    "food_item": "havarti",
    "openscad_code": "// Havarti Cheese Wheel with Realistic Details\n// Medium complexity OpenSCAD model\n\n$fn = 32;\n\n// Main color for havarti cheese\ncolor([1, 0.9, 0.6]) {\n    // Main cheese wheel body\n    difference() {\n        // Base cylinder\n        cylinder(h = 25, r = 40, center = true);\n        \n        // Central hole\n        cylinder(h = 27, r = 8, center = true);\n    }\n}\n\n// Cheese rind with darker color\ncolor([0.8, 0.7, 0.45]) {\n    // Thin outer rind layer\n    difference() {\n        cylinder(h = 26, r1 = 40.5, r2 = 40.5, center = true);\n        cylinder(h = 28, r1 = 39, r2 = 39, center = true);\n    }\n}\n\n// Small holes (eyes) characteristic of havarti\nmodule small_hole() {\n    color([0.95, 0.85, 0.55]) {\n        sphere(r = 1.2);\n    }\n}\n\n// Place eyes on cheese surface\nfor (i = [0:20]) {\n    angle = i * 137.5;\n    radius = 15 + rand(i) * 20;\n    \n    translate([\n        cos(angle) * radius,\n        sin(angle) * radius,\n        rand(i + 100) * 20 - 10\n    ]) {\n        small_hole();\n    }\n}\n\n// Top surface texture with slight irregularities\ncolor([1, 0.9, 0.6]) {\n    for (i = [0:30]) {\n        angle = i * 37;\n        radius = rand(i) * 35;\n        \n        translate([\n            cos(angle) * radius,\n            sin(angle) * radius,\n            12.5\n        ]) {\n            // Small raised bumps\n            cylinder(h = 0.5 + rand(i) * 0.5, r = 1 + rand(i) * 1.5, $fn = 16);\n        }\n    }\n}\n\n// Bottom surface matching top\nmirror([0, 0, 1]) {\n    color([1, 0.9, 0.6]) {\n        for (i = [0:30]) {\n            angle = i * 37;\n            radius = rand(i + 50) * 35;\n            \n            translate([\n                cos(angle) * radius,\n                sin(angle) * radius,\n                12.5\n            ]) {\n                cylinder(h = 0.5 + rand(i) * 0.5, r = 1 + rand(i) * 1.5, $fn = 16);\n            }\n        }\n    }\n}\n\n// Side surface texture - subtle vertical ridges\ncolor([0.95, 0.85, 0.55]) {\n    for (i = [0:45]) {\n        angle = i * 8;\n        \n        translate([0, 0, 0]) {\n            rotate([0, 0, angle]) {\n                translate([39.5, 0, 0]) {\n                    cube([1, 0.5, 26], center = true);\n                }\n            }\n        }\n    }\n}\n\n// Small wedge cutout to show interior\ndifference() {\n    // Keep the main cheese\n    union();\n    \n    // Remove wedge\n    translate([0, 0, 0]) {\n        rotate([0, 0, 45]) {\n            linear_extrude(height = 30) {\n                polygon(points = [\n                    [0, 0],\n                    [40, 0],\n                    [40, 40]\n                ]);\n            }\n        }\n    }\n}\n\n// Interior visible in wedge cut\ncolor([1, 0.92, 0.65]) {\n    translate([0, 0, 0]) {\n        rotate([0, 0, 45]) {\n            translate([20, 10, 0]) {\n                cylinder(h = 30, r = 0.5, center = true);\n            }\n        }\n    }\n}\n\n// Random number generator for natural placement\nfunction rand(n) = (sin(n * 12.9898 + 78.233) * 43758.5453) % 1;",
    "renders": true
  },
  {
    "food_item": "swiss",
    "openscad_code": "// Swiss Emmental Cheese Wheel\n// Realistic style, medium complexity\n// Dimensions: 100mm diameter, 25mm thickness\n\n$fn = 36;\n\n// Main cheese wheel\nmodule cheese_wheel() {\n    // Base cylinder for the wheel\n    difference() {\n        // Main wheel body\n        cylinder(h = 25, r = 50);\n        \n        // Create curved top surface\n        translate([0, 0, 20])\n            sphere(r = 80);\n    }\n    \n    // Add rim detail\n    translate([0, 0, 23])\n        cylinder(h = 2, r = 51);\n}\n\n// Generate holes (eyes) with realistic distribution\nmodule cheese_holes() {\n    // Large holes - characteristic of Emmental\n    for(i = [0:4]) {\n        rotate([0, 0, i * 72 + 15])\n            translate([random(25, 35), 0, random(8, 18)])\n                sphere(r = random(6, 10));\n    }\n    \n    // Medium holes\n    for(i = [0:6]) {\n        rotate([0, 0, i * 60 + 30])\n            translate([random(15, 25), 0, random(5, 20)])\n                sphere(r = random(3, 6));\n    }\n    \n    // Small holes\n    for(i = [0:8]) {\n        rotate([0, 0, i * 45 + 10])\n            translate([random(5, 40), 0, random(3, 22)])\n                sphere(r = random(1.5, 3));\n    }\n    \n    // Edge holes\n    for(i = [0:12]) {\n        rotate([0, 0, i * 30])\n            translate([45, 0, random(10, 15)])\n                sphere(r = random(2, 4));\n    }\n}\n\n// Surface texture - small dimples\nmodule surface_texture() {\n    for(i = [0:20]) {\n        for(j = [0:18]) {\n            rotate([0, 0, j * 20])\n                translate([random(5, 48), 0, random(1, 24)])\n                    sphere(r = random(0.3, 0.8));\n        }\n    }\n}\n\n// Cheese label/tag\nmodule cheese_label() {\n    // Tag attachment point\n    translate([0, -55, 15])\n        rotate([90, 0, 0])\n            cylinder(h = 3, r = 3);\n    \n    // Tag itself\n    translate([0, -65, 15])\n        rotate([90, 0, 0])\n            difference() {\n                cube([20, 15, 0.5], center = true);\n                // Tag hole\n                translate([8, 0, 0])\n                    cylinder(h = 2, r = 2);\n            }\n}\n\n// Random function for natural variation\nfunction random(min, max) = min + (max - min) * (rands(0, 1, 1)[0]);\n\n// Main assembly\ncolor([1, 0.9, 0.3])  // Swiss cheese yellow color\ndifference() {\n    union() {\n        cheese_wheel();\n        surface_texture();\n    }\n    \n    // Cheese holes\n    cheese_holes();\n    \n    // Remove bottom flat part to create curved base\n    translate([0, 0, -5])\n        cube([120, 120, 10], center = true);\n}\n\n// Add label in contrasting color\ncolor([0.8, 0.2, 0.1])\n    cheese_label();",
    "renders": true
  },
  {
    "food_item": "edam",
    "openscad_code": "// Edam cheese with characteristic red wax coating and rounded shape\n// Overall height: 70mm, diameter: 60mm\n\n$fn = 32;\n\n// Main cheese body - slightly flattened sphere\nmodule cheese_body() {\n    color(\"lemonchiffon\")\n    scale([1, 1, 0.75])\n    sphere(d = 55);\n}\n\n// Red wax coating with slight lip at bottom\nmodule wax_coating() {\n    color(\"firebrick\")\n    difference() {\n        // Main wax shell\n        scale([1, 1, 0.80])\n        sphere(d = 60);\n        \n        // Hollow out center\n        scale([0.9, 0.9, 0.65])\n        sphere(d = 60);\n    }\n}\n\n// Wax seam line around the middle\nmodule wax_seam() {\n    color(\"darkred\")\n    for(i = [0:5:355]) {\n        rotate([0, 0, i])\n        translate([0, 30, 2])\n        cylinder(h = 1, d = 2, center = true);\n    }\n}\n\n// Cheese label imprint on top\nmodule cheese_label() {\n    // Raised wax lettering area\n    color(\"firebrick\")\n    translate([0, 0, 22])\n    cylinder(h = 1, d = 25);\n    \n    // Edam text\n    color(\"gold\")\n    translate([0, 0, 23.5])\n    rotate([0, 0, 90])\n    linear_extrude(height = 1)\n    text(\"EDAM\", size = 8, halign = \"center\", valign = \"center\");\n}\n\n// Small dimples for texture on wax surface\nmodule wax_texture() {\n    color(\"firebrick\")\n    for(angle = [30:60:330]) {\n        rotate([0, 0, angle])\n        translate([0, 25, 10])\n        sphere(d = 2);\n    }\n}\n\n// Assemble all parts\nunion() {\n    // Main cheese structure\n    union() {\n        cheese_body();\n        wax_coating();\n    }\n    \n    // Surface details\n    wax_seam();\n    wax_texture();\n    \n    // Top label\n    cheese_label();\n}",
    "renders": true
  },
  {
    "food_item": "emmental",
    "openscad_code": "// Swiss Emmental Cheese Wheel\n// Realistic style, medium complexity\n\n$fn = 48;\n\n// Cheese wheel parameters\nwheel_diameter = 80;\nwheel_height = 20;\ncrust_thickness = 2;\nhole_min_diameter = 4;\nhole_max_diameter = 12;\n\n// Main cheese body with slight irregularities\nmodule cheese_body() {\n    color([1, 0.85, 0.3])  // Pale yellow cheese color\n    difference() {\n        // Main wheel shape\n        union() {\n            // Top slightly domed\n            translate([0, 0, wheel_height/2])\n                cylinder(d = wheel_diameter, h = wheel_height);\n            \n            // Gentle dome on top\n            translate([0, 0, wheel_height])\n                scale([1, 1, 0.3])\n                    sphere(d = wheel_diameter * 0.9);\n        }\n        \n        // Remove bottom to make flat base\n        translate([0, 0, -1])\n            cube([wheel_diameter + 2, wheel_diameter + 2, 2], center = true);\n    }\n}\n\n// Cheese rind/crust\nmodule cheese_crust() {\n    color([0.8, 0.6, 0.2])  // Brownish crust color\n    difference() {\n        // Outer crust\n        cylinder(d = wheel_diameter + 2, h = wheel_height + 2);\n        \n        // Inner hole for cheese\n        cylinder(d = wheel_diameter, h = wheel_height + 4);\n    }\n}\n\n// Create a single cheese hole\nmodule cheese_hole(diameter, depth) {\n    rotate([90, 0, 0])\n        cylinder(d = diameter, h = depth * 1.2, $fn = 16);\n}\n\n// Generate random-looking holes with controlled distribution\nmodule cheese_holes() {\n    seed = 42;\n    \n    // Top surface holes\n    for(i = [0:15]) {\n        angle = (360 / 16) * i + (rands(-5, 5, 1, seed)[0]);\n        radius = wheel_diameter/2 * 0.8 * (0.5 + rands(0, 0.5, 1, seed + i)[0]);\n        x = cos(angle) * radius;\n        y = sin(angle) * radius;\n        \n        // Random hole sizes\n        size = rands(hole_min_diameter, hole_max_diameter, 1, seed + i * 2)[0];\n        \n        translate([x, y, wheel_height - 2])\n            cheese_hole(size, wheel_height * 0.7);\n    }\n    \n    // Side holes\n    for(i = [0:11]) {\n        angle = (360 / 12) * i + rands(-10, 10, 1, seed + 100)[0];\n        height = rands(crust_thickness, wheel_height - crust_thickness, 1, seed + i * 3)[0];\n        \n        rotate([0, 0, angle])\n            translate([wheel_diameter/2, 0, height])\n                rotate([0, 90, 0])\n                    cheese_hole(\n                        rands(hole_min_diameter, hole_max_diameter * 0.8, 1, seed + i * 4)[0],\n                        wheel_diameter * 0.3\n                    );\n    }\n    \n    // Central holes\n    for(i = [0:7]) {\n        angle = (360 / 7) * i;\n        radius = wheel_diameter * 0.25;\n        x = cos(angle) * radius;\n        y = sin(angle) * radius;\n        \n        translate([x, y, wheel_height/2])\n            sphere(d = rands(hole_min_diameter * 1.5, hole_max_diameter, 1, seed + i * 5)[0]);\n    }\n}\n\n// Surface texture for realistic appearance\nmodule surface_texture() {\n    // Small dimples on surface\n    for(i = [0:30]) {\n        angle = rands(0, 360, 1, seed + 200)[0];\n        radius = wheel_diameter/2 * rands(0.3, 0.95, 1, seed + i * 6)[0];\n        x = cos(angle) * radius;\n        y = sin(angle) * radius;\n        z = rands(0, wheel_height, 1, seed + i * 7)[0];\n        \n        translate([x, y, z])\n            sphere(d = 1.5);\n    }\n}\n\n// Assembly\ndifference() {\n    union() {\n        cheese_crust();\n        cheese_body();\n    }\n    \n    cheese_holes();\n}\n\n// Add subtle surface imperfections\nunion() {\n    surface_texture();\n}",
    "renders": true
  },
  {
    "food_item": "gruyere",
    "openscad_code": "// Gruyère cheese wedge – realistic style, medium complexity\n// 70 mm long, 40 mm high, 40 mm wide at the rind\n// Printable without supports – holes slope inwards slightly\n\n// Overall dimensions\nlength = 70;        // along X axis\nheight = 40;        // along Z axis\nwidth  = 40;        // along Y axis at rind\n\n// Wall / crust thickness\ncrust = 2.5;\n\n// Hole parameters\nhole_d   = 5;       // max diameter of eyes\nhole_min = 2.5;     // min diameter of eyes\nrows     = 4;       // rows along length\ncols     = 3;       // columns across width\nlayers   = 3;       // vertical layers\n\n// Create the cheese wedge\ndifference() {\n    // Main body – a wedge with crust\n    union() {\n        // Soft cheese core\n        color(\"wheat\") wedge_core();\n\n        // Rind on two sides\n        color(\"goldenrod\") rind();\n    }\n\n    // Eyes (holes) – randomised\n    color(\"wheat\") eyes();\n}\n\n// ------------------ Modules ------------------\n\nmodule wedge_core() {\n    // Tapered block from full width at rind (y=0) to tip (y=length)\n    hull() {\n        translate([0, 0, 0])\n            cube([0.1, 0.1, height], center=true);\n        translate([0, length, 0])\n            cube([0.1, 0.1, 0.1], center=true);\n        translate([width, 0, 0])\n            cube([0.1, 0.1, height], center=true);\n        translate([width, length, 0])\n            cube([0.1, 0.1, 0.1], center=true);\n    }\n}\n\nmodule rind() {\n    // Add crust on top and one side\n    difference() {\n        // Top crust\n        translate([width/2, length/2, height/2 + crust/2])\n            cube([width + crust*2, length + crust*2, crust], center=true);\n\n        // Side crust\n        translate([-crust/2, length/2, height/2])\n            cube([crust, length + crust*2, height + crust*2], center=true);\n\n        // Remove overlap to keep only outer faces\n        translate([width/2, length/2, height/2])\n            cube([width, length, height], center=true);\n    }\n}\n\nmodule eyes() {\n    // Generate eyes in a randomised grid\n    for (i = [0 : rows-1])\n        for (j = [0 : cols-1])\n            for (k = [0 : layers-1]) {\n                // Position with jitter\n                x = (j + 0.5 + rands(-0.3, 0.3, 1)[0]) * (width / (cols + 1));\n                y = (i + 0.5 + rands(-0.3, 0.3, 1)[0]) * (length / (rows + 1));\n                z = (k + 0.5) * (height / (layers + 1));\n\n                // Slight taper to avoid overhangs\n                taper = 0.9 - 0.2 * k / layers;\n\n                translate([x, y, z])\n                    scale([taper, taper, 1])\n                        sphere(d = rands(hole_min, hole_d, 1)[0], $fn=16);\n            }\n}",
    "renders": true
  },
  {
    "food_item": "monterey",
    "openscad_code": "// Monterey Jack cheese wheel with realistic details\n// Dimensions scaled for 3D printing (75mm diameter)\n\n$fn = 36;\n\n// Main colors\ncolor_cheese = [1.0, 0.95, 0.7];\ncolor_holes = [1.0, 0.9, 0.6];\n\n// Generate the cheese wheel with characteristic holes\nmodule cheese_wheel() {\n    // Base cylinder for cheese wheel\n    color(color_cheese)\n    cylinder(h = 25, r = 37.5, center = true);\n    \n    // Add the characteristic curved edges\n    color(color_cheese)\n    translate([0, 0, 12.5])\n    scale([1, 1, 0.3])\n    sphere(r = 37.5);\n    \n    color(color_cheese)\n    translate([0, 0, -12.5])\n    scale([1, 1, 0.3])\n    sphere(r = 37.5);\n    \n    // Create the random holes typical of monterey jack\n    for(i = [1:15]) {\n        hole_pos = [\n            sin(i * 73.4) * 25,\n            cos(i * 73.4) * 25,\n            (i % 3 - 1) * 8\n        ];\n        \n        translate(hole_pos)\n        color(color_holes)\n        sphere(r = 2 + (i % 4) * 0.5);\n    }\n    \n    // Add the wax rind around the edge\n    difference() {\n        color([0.9, 0.2, 0.1])\n        cylinder(h = 27, r = 38.5, center = true);\n        \n        color([0.9, 0.2, 0.1])\n        cylinder(h = 29, r = 37.5, center = true);\n    }\n}\n\n// Add surface texture with small imperfections\nmodule surface_texture() {\n    for(i = [1:30]) {\n        angle = i * 12.7;\n        radius = 28 + (i % 5) * 2;\n        \n        translate([\n            sin(angle) * radius,\n            cos(angle) * radius,\n            12\n        ])\n        scale([1, 1, 0.3])\n        sphere(r = 0.5);\n    }\n    \n    for(i = [1:20]) {\n        angle = i * 18.3;\n        radius = 30 + (i % 4) * 1.5;\n        \n        translate([\n            sin(angle) * radius,\n            cos(angle) * radius,\n            -12\n        ])\n        scale([1, 1, 0.3])\n        sphere(r = 0.4);\n    }\n}\n\n// Create the cheese label/wrapper remnant\nmodule cheese_label() {\n    color([0.9, 0.9, 0.9])\n    translate([0, 38.5, 0])\n    rotate([90, 0, 0])\n    linear_extrude(height = 0.2)\n    text(\"MONTEREY JACK\", size = 4, halign = \"center\");\n}\n\n// Main assembly\nunion() {\n    cheese_wheel();\n    surface_texture();\n    cheese_label();\n}",
    "renders": true
  },
  {
    "food_item": "colby",
    "openscad_code": "// Colby Cheese Block with Realistic Texture\n// Dimensions: 80mm x 60mm x 40mm\n\n// Main cheese body\nmodule cheese_body() {\n    color(\"FFD700\") \n    difference() {\n        // Main block\n        cube([80, 60, 40], center = true);\n        \n        // Rounded edges\n        translate([0, 0, 20]) \n            cube([82, 62, 0.5], center = true);\n        translate([0, 0, -20]) \n            cube([82, 62, 0.5], center = true);\n    }\n}\n\n// Create the characteristic colby holes (small irregular circles)\nmodule cheese_holes() {\n    color(\"FFF8DC\")\n    for (i = [0:45]) {\n        // Random positioning within cheese bounds\n        x = (rands(-35, 35, 1)[0]);\n        y = (rands(-25, 25, 1)[0]);\n        z = (rands(-15, 15, 1)[0]);\n        \n        // Random hole size (2-4mm diameter)\n        size = rands(2, 4, 1)[0];\n        \n        translate([x, y, z])\n            sphere(d = size, $fn = 8);\n    }\n}\n\n// Surface texture lines (from pressing)\nmodule surface_lines() {\n    color(\"F5DEB3\")\n    // Top surface lines\n    for (i = [-35:5:35]) {\n        translate([i, 0, 19.5])\n            cube([0.5, 58, 1]);\n    }\n    \n    // Side surface lines\n    for (j = [-25:5:25]) {\n        translate([39.5, j, 0])\n            rotate([0, 90, 0])\n            cube([0.5, 38, 1]);\n    }\n}\n\n// Wax rind on edges\nmodule wax_rind() {\n    color(\"FF6347\")\n    difference() {\n        // Thin wax coating\n        cube([84, 64, 44], center = true);\n        \n        // Remove inner part\n        cube([78, 58, 38], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main cheese with holes\n    difference() {\n        union() {\n            cheese_body();\n            surface_lines();\n        }\n        cheese_holes();\n    }\n    \n    // Wax rind on sides\n    wax_rind();\n}",
    "renders": true
  },
  {
    "food_item": "romano",
    "openscad_code": "// Romano cheese wheel - realistic style\n// A classic hard Italian cheese with natural rind texture\n\n$fn = 50;  // Smooth curves for realistic appearance\n\n// Main cheese wheel body\nmodule cheese_wheel() {\n    color(\"wheat\") {\n        // Main wheel body - slightly convex top/bottom\n        difference() {\n            union() {\n                // Bottom flat part\n                cylinder(h = 25, r = 45, center = false);\n                \n                // Top convex part\n                translate([0, 0, 25])\n                    scale([1, 1, 0.4])\n                        sphere(r = 45);\n            }\n            \n            // Hollow center for realistic thickness\n            translate([0, 0, 2])\n                cylinder(h = 30, r = 35, center = false);\n        }\n    }\n}\n\n// Natural rind texture with irregular pattern\nmodule rind_texture() {\n    color(\"burlywood\") {\n        // Bottom rind surface\n        translate([0, 0, -0.1])\n            cylinder(h = 0.5, r = 45);\n            \n        // Top rind surface\n        translate([0, 0, 25])\n            cylinder(h = 0.5, r = 45);\n        \n        // Side rind with random texture\n        for (i = [0:5:360]) {\n            rotate([0, 0, i]) {\n                // Irregular bumps and texture\n                translate([45, 0, 12.5])\n                    rotate([90, 0, 0])\n                        cylinder(h = 5 + 3 * sin(i), r = 0.8, center = true);\n                \n                translate([45, 0, 5 + 10 * sin(i/3)])\n                    rotate([90, 0, 0])\n                        cylinder(h = 3 + 2 * cos(i), r = 0.6, center = true);\n            }\n        }\n    }\n}\n\n// Cheese paste texture - small holes typical of romano\nmodule cheese_paste() {\n    color(\"palegoldenrod\") {\n        // Small eyes (holes) throughout the paste\n        for (i = [0:15:359]) {\n            for (j = [5:10:20]) {\n                rotate([0, 0, i]) {\n                    translate([j * cos(i*3), j * sin(i*3), 10 + j/2])\n                        sphere(r = 0.5 + 0.3 * sin(i + j));\n                    translate([j * sin(i*2), j * cos(i*2), 15 + j/3])\n                        sphere(r = 0.3 + 0.2 * cos(i - j));\n                }\n            }\n        }\n    }\n}\n\n// Brand/markings on rind\nmodule rind_markings() {\n    color(\"saddlebrown\") {\n        // Authentic romano marking pattern\n        translate([0, 35, 12.5])\n            rotate([90, 0, 0])\n                cylinder(h = 1, r = 8);\n        \n        // Text pattern (simulated)\n        for (i = [0:30:330]) {\n            rotate([0, 0, i])\n                translate([35, 0, 12.5])\n                    rotate([90, 0, 0])\n                        cube([0.5, 6, 0.5], center = true);\n        }\n    }\n}\n\n// Assembly the complete cheese wheel\nunion() {\n    cheese_wheel();\n    rind_texture();\n    cheese_paste();\n    rind_markings();\n}",
    "renders": true
  },
  {
    "food_item": "asiago",
    "openscad_code": "// Asiago cheese wheel - medium complexity realistic style\n// Overall size: 80mm diameter, 40mm height\n\n// Main cheese wheel body\nmodule cheese_wheel() {\n    // Base cylinder for the wheel\n    difference() {\n        cylinder(h = 40, d = 80, $fn = 64);\n        \n        // Slight taper on edges\n        translate([0, 0, -1])\n            cylinder(h = 42, d = 78, $fn = 64);\n    }\n    \n    // Top surface with slight dome\n    translate([0, 0, 39.5])\n        scale([1, 1, 0.3])\n            sphere(d = 80, $fn = 64);\n}\n\n// Cheese rind texture\nmodule rind_texture() {\n    // Rind layer on sides\n    difference() {\n        cylinder(h = 40, d = 82, $fn = 64);\n        translate([0, 0, -1])\n            cylinder(h = 42, d = 80, $fn = 64);\n    }\n    \n    // Rind on top and bottom\n    translate([0, 0, 40])\n        difference() {\n            scale([1, 1, 0.5])\n                sphere(d = 82, $fn = 64);\n            scale([1, 1, 0.5])\n                sphere(d = 80, $fn = 64);\n        }\n    \n    translate([0, 0, 0])\n        mirror([0, 0, 1])\n            difference() {\n                scale([1, 1, 0.5])\n                    sphere(d = 82, $fn = 64);\n                scale([1, 1, 0.5])\n                    sphere(d = 80, $fn = 64);\n            }\n}\n\n// Cheese holes (eyes)\nmodule cheese_holes() {\n    // Random pattern of small holes typical for Asiago\n    for (i = [0:15]) {\n        rotate([0, 0, i * 137.5])\n            translate([random(0, 25), 0, random(10, 30)])\n                sphere(d = random(2, 5), $fn = 12);\n    }\n}\n\n// Surface texture for aged appearance\nmodule surface_texture() {\n    // Small bumps for texture\n    for (i = [0:30]) {\n        rotate([0, 0, i * 73])\n            translate([random(35, 39), 0, random(0, 40)])\n                sphere(d = random(0.5, 1.5), $fn = 8);\n    }\n}\n\n// Cheese label/markings\nmodule cheese_markings() {\n    // Simple markings on top surface\n    rotate([90, 0, 0])\n        translate([0, -20, 35])\n            linear_extrude(height = 0.5)\n                text(\"ASIAGO\", size = 8, halign = \"center\");\n}\n\n// Assembly\nunion() {\n    color(\"#F5DEB3\") cheese_wheel();\n    \n    color(\"#D2691E\") rind_texture();\n    \n    color(\"#F5DEB3\") {\n        difference() {\n            cheese_wheel();\n            cheese_holes();\n        }\n    }\n    \n    color(\"#DEB887\") surface_texture();\n    \n    color(\"#8B4513\") cheese_markings();\n}",
    "renders": true
  },
  {
    "food_item": "burrata",
    "openscad_code": "// Burrata Cheese - Realistic Style\n// A fresh Italian cheese made of mozzarella and cream\n\n// Main parameters\n$fn = 32;\ndiameter = 60;\nheight = 45;\nwall_thickness = 2;\n\n// Outer mozzarella pouch\nmodule mozzarella_pouch() {\n    color(\"ivory\") {\n        difference() {\n            // Main sphere shape\n            sphere(d = diameter);\n            \n            // Flatten bottom slightly\n            translate([0, 0, -diameter/2 - 1])\n                cube([diameter * 1.2, diameter * 1.2, diameter/3], center = true);\n        }\n    }\n}\n\n// Creamy stracciatella filling visible through opening\nmodule stracciatella() {\n    color(\"beige\") {\n        translate([0, 0, -5])\n            sphere(d = diameter * 0.8);\n    }\n}\n\n// Cream strands spilling out\nmodule cream_strands() {\n    color(\"ivory\") {\n        for(i = [0:8]) {\n            rotate([0, 0, i * 45])\n                translate([diameter/2 - 8, 0, -i])\n                    scale([1, 1, 0.3])\n                        sphere(d = 6);\n        }\n    }\n}\n\n// Surface texture - small dimples\nmodule surface_texture() {\n    color(\"ivory\") {\n        for(x = [-25:5:25]) {\n            for(y = [-25:5:25]) {\n                if(x*x + y*y < 25*25) {\n                    translate([x, y, 30 - sqrt(30*30 - x*x - y*y)])\n                        sphere(d = 1.5);\n                }\n            }\n        }\n    }\n}\n\n// Top opening with torn edges\nmodule torn_top() {\n    color(\"ivory\") {\n        difference() {\n            // Main pouch\n            translate([0, 0, 0])\n                sphere(d = diameter);\n            \n            // Irregular opening\n            translate([0, 0, 15])\n                cylinder(h = 30, d1 = 25, d2 = 35, center = true);\n            \n            // Additional irregular cuts for torn look\n            for(i = [0:5]) {\n                rotate([0, 0, i * 60])\n                    translate([10, 0, 15])\n                        cube([8, 5, 30], center = true);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main structure\n    torn_top();\n    \n    // Internal filling\n    stracciatella();\n    \n    // Cream strands\n    cream_strands();\n    \n    // Surface texture\n    surface_texture();\n}",
    "renders": true
  },
  {
    "food_item": "stracchino",
    "openscad_code": "// Stracchino cheese wheel - realistic medium complexity\n// Approx 80mm diameter, 25mm thick\n\n$fn = 48;\n\n// Main cheese wheel\nmodule cheese_wheel() {\n    difference() {\n        // Main cylindrical shape with slight bulge\n        union() {\n            cylinder(h = 20, r1 = 40, r2 = 42);\n            translate([0, 0, 20])\n                cylinder(h = 5, r = 42);\n        }\n        \n        // Center indentation\n        translate([0, 0, -1])\n            cylinder(h = 7, r = 15);\n            \n        // Branding marks - typical stracchino pattern\n        for(i = [0:5]) {\n            rotate([0, 0, i * 60])\n                translate([25, 0, 22])\n                    cube([15, 3, 1], center = true);\n        }\n    }\n}\n\n// Surface texture - small irregular holes\nmodule cheese_texture() {\n    for(i = [0:20]) {\n        rotate([0, 0, i * 17])\n        for(j = [0:3]) {\n            translate([\n                20 + j * 5,\n                0,\n                10 + j * 2\n            ])\n            rotate([90, 0, 0])\n                cylinder(h = 1 + j * 0.5, r = 0.5 + sin(i) * 0.3, $fn = 8);\n        }\n    }\n}\n\n// Wrinkle texture on sides\nmodule side_wrinkles() {\n    for(i = [0:35]) {\n        rotate([0, 0, i * 10])\n            translate([40 + sin(i * 3) * 0.5, 0, 10])\n                cube([0.5, 1 + cos(i * 2) * 0.5, 20], center = true);\n    }\n}\n\n// Edges - slightly irregular\nmodule cheese_edges() {\n    difference() {\n        // Top edge\n        translate([0, 0, 25])\n            cylinder(h = 2, r = 42);\n            \n        // Slight chamfer\n        translate([0, 0, 24.5])\n            cylinder(h = 3, r1 = 42, r2 = 40);\n    }\n}\n\n// Assembly\ncolor(\"cornsilk\")\nunion() {\n    cheese_wheel();\n    \n    color(\"ivory\") {\n        cheese_texture();\n        side_wrinkles();\n        cheese_edges();\n    }\n    \n    // Bottom texture\n    translate([0, 0, 0.5])\n        rotate([180, 0, 0])\n            cheese_texture();\n}",
    "renders": true
  },
  {
    "food_item": "roquefort",
    "openscad_code": "// Roquefort cheese wedge with realistic blue veins\n// Medium complexity model with basic primitives\n\n// Main cheese wedge shape\nmodule cheese_wedge() {\n    difference() {\n        // Main wedge body\n        cube([60, 40, 35]);\n        \n        // Cut the wedge shape\n        translate([0, 0, 0]) {\n            rotate([0, 45, 0]) {\n                cube([100, 100, 100]);\n            }\n        }\n    }\n}\n\n// Blue mold veins\nmodule blue_vein() {\n    color(\"steelblue\") {\n        sphere($fn=12);\n    }\n}\n\n// Create random blue veins throughout\nmodule create_veins() {\n    for(i = [1:8]) {\n        translate([rands(5, 55, 1)[0], rands(5, 35, 1)[0], rands(5, 30, 1)[0]]) {\n            scale([rands(0.5, 2, 1)[0], rands(0.3, 1.5, 1)[0], rands(0.3, 1.2, 1)[0]]) {\n                blue_vein();\n            }\n        }\n    }\n}\n\n// Surface texture for rind\nmodule rind_texture() {\n    difference() {\n        // Outer rind layer\n        color(\"saddlebrown\") {\n            cube([62, 42, 37]);\n        }\n        \n        // Cut out inner cheese\n        translate([2, 2, 2]) {\n            color(\"ivory\") {\n                cube([58, 38, 33]);\n            }\n        }\n    }\n}\n\n// Cracks and crevices\nmodule cracks() {\n    for(i = [1:5]) {\n        translate([rands(10, 50, 1)[0], rands(5, 35, 1)[0], rands(5, 30, 1)[0]]) {\n            rotate([rands(0, 90, 1)[0], rands(0, 90, 1)[0], rands(0, 90, 1)[0]]) {\n                difference() {\n                    cube([rands(3, 8, 1)[0], rands(1, 3, 1)[0], rands(1, 4, 1)[0]]);\n                    translate([0.5, 0.5, 0.5]) {\n                        cube([rands(2, 6, 1)[0], rands(0.5, 2, 1)[0], rands(0.5, 3, 1)[0]]);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Main assembly\ndifference() {\n    union() {\n        // Base wedge\n        cheese_wedge();\n        \n        // Add rind texture to visible faces\n        translate([-1, -1, -1]) {\n            rind_texture();\n        }\n    }\n    \n    // Hollow out for printability\n    translate([5, 5, 5]) {\n        difference() {\n            cube([50, 30, 25]);\n            translate([2, 2, 2]) {\n                cube([46, 26, 21]);\n            }\n        }\n    }\n}\n\n// Add veins and cracks\ntranslate([0, 0, 0]) {\n    create_veins();\n    cracks();\n}\n\n// Position for printing\nrotate([0, -15, 15]) {\n    // Final model is already positioned above\n}",
    "renders": true
  },
  {
    "food_item": "gorgonzola",
    "openscad_code": "// Gorgonzola Cheese Wheel\n// Realistic style, medium complexity\n\n$fn = 32;\n\n// Main cheese wheel\nmodule cheese_wheel() {\n    // Base wheel shape - slightly flattened cylinder\n    color([0.95, 0.9, 0.75])\n    difference() {\n        cylinder(h = 35, r = 40);\n        translate([0, 0, 34])\n        cylinder(h = 2, r = 38);\n    }\n    \n    // Rounded top edge\n    color([0.95, 0.9, 0.75])\n    translate([0, 0, 33])\n    scale([1, 1, 0.3])\n    sphere(r = 40);\n}\n\n// Blue mold veins\nmodule blue_veins() {\n    color([0.2, 0.4, 0.6])\n    for (i = [0:15]) {\n        rotate([0, 0, i * 22.5])\n        translate([random() * 30, random() * 30, random() * 30 + 5])\n        scale([random() * 2 + 0.5, random() * 8 + 3, random() * 0.5 + 0.2])\n        sphere(1);\n    }\n}\n\n// Surface texture/cracks\nmodule surface_cracks() {\n    color([0.85, 0.8, 0.65])\n    for (i = [0:30]) {\n        rotate([0, 0, i * 12])\n        translate([random() * 38, random() * 38, random() * 30 + 5])\n        rotate([random() * 30, random() * 30, 0])\n        scale([random() * 2 + 0.5, random() * 8 + 2, random() * 0.3 + 0.1])\n        cube([1, 1, 1]);\n    }\n}\n\n// Wheel rind texture\nmodule rind_texture() {\n    color([0.7, 0.6, 0.4])\n    for (i = [0:40]) {\n        rotate([0, 0, i * 9])\n        translate([39, 0, random() * 30 + 5])\n        rotate([90, 0, 0])\n        cylinder(h = random() * 2 + 1, r = random() * 0.5 + 0.2);\n    }\n}\n\n// Cut surface showing marbling\nmodule cut_surface() {\n    color([0.95, 0.9, 0.75])\n    translate([0, 0, 20])\n    cube([80, 2, 30], center = true);\n    \n    // Blue mold pockets in cut surface\n    color([0.2, 0.4, 0.6])\n    for (i = [0:20]) {\n        translate([random() * 60 - 30, 1, random() * 25 + 5])\n        scale([random() * 3 + 1, 0.5, random() * 3 + 1])\n        sphere(1);\n    }\n}\n\n// Assembly\nunion() {\n    cheese_wheel();\n    \n    // Add veins inside\n    translate([0, 0, 5])\n    blue_veins();\n    \n    // Surface details\n    surface_cracks();\n    \n    // Rind texture\n    rind_texture();\n    \n    // Show cut surface\n    translate([-40, 0, 0])\n    cut_surface();\n}",
    "renders": true
  },
  {
    "food_item": "stilton",
    "openscad_code": "// Realistic 3D-printable Stilton cheese wedge\n// Medium complexity model with characteristic blue veins and craggy texture\n\n$fn = 50;\n\n// Main cheese wedge dimensions\nwedge_width = 60;\nwedge_length = 70;\nwedge_height = 45;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Main cheese body - slightly irregular wedge shape\nmodule cheese_wedge() {\n    difference() {\n        // Outer wedge\n        union() {\n            // Main body with slight irregularities\n            scale([1, 1, 0.95]) \n                cube([wedge_width, wedge_length, wedge_height], center=true);\n            \n            // Add rounded top\n            translate([0, 0, wedge_height/2])\n                scale([wedge_width*1.05, wedge_length*1.05, wedge_height/4])\n                    sphere(r=1);\n        }\n        \n        // Hollow out for 3D printing\n        translate([0, 0, wall_thickness])\n            cube([wedge_width-wall_thickness*2, wedge_length-wall_thickness*2, wedge_height-wall_thickness*2], center=true);\n    }\n}\n\n// Create craggy surface texture\nmodule surface_texture() {\n    // Random crater-like depressions\n    for(i = [0:20]) {\n        translate([\n            (rand(i*7)-0.5)*wedge_width*0.4,\n            (rand(i*13)-0.5)*wedge_length*0.4,\n            wedge_height/2 + (rand(i*3)-0.5)*wedge_height*0.3\n        ]) {\n            scale([1 + rand(i*5)*0.5, 1 + rand(i*11)*0.5, 0.5])\n                sphere(r=2 + rand(i*17)*3);\n        }\n    }\n}\n\n// Generate pseudo-random value between 0-1\nfunction rand(seed) = (sin(seed*123.456) + 1)/2;\n\n// Blue vein patterns throughout the cheese\nmodule blue_veins() {\n    // Main veins running through cheese\n    color([0.3, 0.5, 0.8, 0.8])\n    for(i = [0:8]) {\n        hull() {\n            translate([\n                (rand(i*2)-0.5)*wedge_width*0.6,\n                (rand(i*3)-0.5)*wedge_length*0.6,\n                (rand(i*5)-0.5)*wedge_height*0.6\n            ]) sphere(r=1.5);\n            \n            translate([\n                (rand(i*7)-0.5)*wedge_width*0.6,\n                (rand(i*11)-0.5)*wedge_length*0.6,\n                (rand(i*13)-0.5)*wedge_height*0.6\n            ]) sphere(r=1.5);\n        }\n    }\n    \n    // Smaller vein branches\n    for(i = [0:15]) {\n        rotate([rand(i*17)*360, rand(i*19)*360, rand(i*23)*360])\n            translate([\n                (rand(i*29)-0.5)*wedge_width*0.5,\n                (rand(i*31)-0.5)*wedge_length*0.5,\n                (rand(i*37)-0.5)*wedge_height*0.5\n            ]) \n                scale([rand(i*41)*6+2, 0.8, 0.8])\n                    cylinder(h=rand(i*43)*8+4, r=0.5);\n    }\n}\n\n// Rind texture on outer surface\nmodule rind_texture() {\n    // Slightly darker outer layer\n    color([0.95, 0.9, 0.7, 0.9])\n    difference() {\n        // Scale up slightly for outer rind\n        scale([1.02, 1.02, 1.02])\n            cheese_wedge();\n        cheese_wedge();\n    }\n}\n\n// Assembly\ndifference() {\n    // Main cheese assembly\n    union() {\n        // Cheese body\n        color([0.95, 0.95, 0.85])\n            cheese_wedge();\n        \n        // Rind layer\n        rind_texture();\n        \n        // Surface texture\n        translate([0, 0, 0])\n            surface_texture();\n    }\n    \n    // Remove texture from hollow interior\n    translate([0, 0, 0])\n        scale([wedge_width-wall_thickness*2, wedge_length-wall_thickness*2, wedge_height-wall_thickness*2])\n            cube([1, 1, 1], center=true);\n}\n\n// Blue veins visible on cut surfaces\ntranslate([0, 0, 0])\n    blue_veins();",
    "renders": true
  },
  {
    "food_item": "limburger",
    "openscad_code": "// Limburger Cheese Block with Realistic Features\n// Medium complexity model with texture and color details\n\n// Cheese color constants\n$fa = 1;\n$fs = 0.4;\n\nmodule cheese_block() {\n    // Main cheese body - rectangular with rounded edges\n    color([0.95, 0.85, 0.65]) {\n        difference() {\n            // Main block\n            translate([0, 0, 12.5])\n                cube([45, 25, 25], center=true);\n            \n            // Rounded edges\n            for(x = [-20, 20])\n                for(y = [-10, 10])\n                    translate([x, y, 12.5])\n                        sphere(12.5, $fn=16);\n            \n            // Bottom rounding\n            translate([0, 0, 0])\n                cube([45, 25, 12.5], center=true);\n        }\n    }\n}\n\nmodule surface_texture() {\n    // Create pitted surface texture\n    for(i = [1:15]) {\n        x_pos = rands(-20, 20, 1)[0];\n        y_pos = rands(-10, 10, 1)[0];\n        z_pos = rands(0, 25, 1)[0];\n        size = rands(1, 3, 1)[0];\n        \n        color([0.85, 0.75, 0.55]) {\n            translate([x_pos, y_pos, z_pos])\n                sphere(size, $fn=8);\n        }\n    }\n}\n\nmodule rind_layer() {\n    // Thin rind on top and sides\n    color([0.75, 0.65, 0.45]) {\n        // Top rind\n        translate([0, 0, 25.5])\n            cube([45, 25, 1], center=true);\n        \n        // Side rinds\n        translate([0, -12.5, 12.5])\n            cube([45, 1, 25], center=true);\n        translate([0, 12.5, 12.5])\n            cube([45, 1, 25], center=true);\n        translate([-22.5, 0, 12.5])\n            cube([1, 25, 25], center=true);\n        translate([22.5, 0, 12.5])\n            cube([1, 25, 25], center=true);\n    }\n}\n\nmodule mold_veins() {\n    // Characteristic limburger mold patterns\n    color([0.4, 0.5, 0.3]) {\n        // Random vein patterns on surface\n        for(i = [1:8]) {\n            x_start = rands(-20, 20, 1)[0];\n            y_start = rands(-10, 10, 1)[0];\n            z_start = rands(2, 23, 1)[0];\n            \n            translate([x_start, y_start, z_start])\n                rotate([0, 90, rands(0, 180, 1)[0]])\n                    cylinder(h=5, r1=0.5, r2=0.2, center=true);\n        }\n        \n        // Surface spots\n        for(i = [1:12]) {\n            x_pos = rands(-20, 20, 1)[0];\n            y_pos = rands(-10, 10, 1)[0];\n            z_pos = rands(0, 25, 1)[0];\n            \n            translate([x_pos, y_pos, z_pos])\n                sphere(0.8, $fn=8);\n        }\n    }\n}\n\nmodule cheese_label() {\n    // Simple paper label\n    color([0.9, 0.9, 0.8]) {\n        translate([0, 0, 26])\n            cube([20, 15, 0.2], center=true);\n    }\n    \n    // Label text placeholder\n    color([0.1, 0.1, 0.1]) {\n        for(i = [0:2]) {\n            translate([-8 + i*4, -5, 26.2])\n                cube([2, 0.5, 0.1]);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    cheese_block();\n    surface_texture();\n    rind_layer();\n    mold_veins();\n    cheese_label();\n}",
    "renders": true
  },
  {
    "food_item": "manchego",
    "openscad_code": "// Manchego Cheese Wheel - Realistic Style\n// Characteristic cross-hatch rind pattern and wedge shape\n\n$fn = 32;\n\n// Main parameters\nwheel_diameter = 80;\nwheel_height = 25;\nwedge_angle = 45;  // degrees for one wedge\nrind_thickness = 2;\nbody_color = [0.95, 0.85, 0.6];\nrind_color = [0.6, 0.4, 0.2];\nair_gap = 0.2;\n\n// Cheese wheel with rind\nmodule cheese_wheel() {\n    difference() {\n        // Main cheese body\n        color(body_color) \n        cylinder(h = wheel_height, d = wheel_diameter - rind_thickness*2);\n        \n        // Hollow out center for printing\n        translate([0, 0, -air_gap])\n            cylinder(h = wheel_height + air_gap*2, d = wheel_diameter - rind_thickness*4);\n    }\n}\n\n// Rind with cross-hatch pattern\nmodule cheese_rind() {\n    color(rind_color) {\n        // Side rind\n        difference() {\n            cylinder(h = wheel_height, d = wheel_diameter);\n            translate([0, 0, -air_gap])\n                cylinder(h = wheel_height + air_gap*2, d = wheel_diameter - rind_thickness*2);\n        }\n        \n        // Top rind\n        difference() {\n            translate([0, 0, wheel_height/2 - rind_thickness/2])\n                cylinder(h = rind_thickness, d = wheel_diameter - rind_thickness*2);\n            \n            // Create cross-hatch grooves\n            for(i = [-1, 1]) {\n                for(j = [-1, 1]) {\n                    rotate([0, 0, i * 45])\n                    translate([0, j * 15, 0])\n                    cube([30, 1.5, rind_thickness + 0.2], center = true);\n                }\n            }\n        }\n        \n        // Bottom rind\n        mirror([0, 0, 1])\n            translate([0, 0, wheel_height/2 - rind_thickness/2])\n            cylinder(h = rind_thickness, d = wheel_diameter - rind_thickness*2);\n    }\n}\n\n// Cheese wedge cut from wheel\nmodule cheese_wedge() {\n    difference() {\n        union() {\n            cheese_wheel();\n            cheese_rind();\n        }\n        \n        // Cut wedge shape\n        rotate([0, 0, -wedge_angle/2])\n            translate([0, -wheel_diameter, -wheel_height])\n            cube([wheel_diameter*2, wheel_diameter*2, wheel_height*3]);\n            \n        rotate([0, 0, wedge_angle/2])\n            translate([0, -wheel_diameter, -wheel_height])\n            cube([wheel_diameter*2, wheel_diameter*2, wheel_height*3]);\n    }\n}\n\n// Small surface imperfections for realism\nmodule surface_texture() {\n    random_seed = 42;\n    for(i = [0:15]) {\n        angle = i * 24 + (i % 3) * 5;\n        radius = wheel_diameter/2 - rind_thickness - (i % 5);\n        \n        translate([\n            cos(angle) * radius, \n            sin(angle) * radius, \n            (i % 2) * wheel_height/2\n        ]) {\n            scale([1, 1, 0.3])\n            sphere(d = 1 + (i % 3) * 0.5);\n        }\n    }\n}\n\n// Assemble the final model\ntranslate([0, 0, wheel_height/2])\n    cheese_wedge();\n\n// Add surface detail\ntranslate([0, 0, wheel_height/2])\n    color(body_color)\n    surface_texture();",
    "renders": true
  },
  {
    "food_item": "halloumi",
    "openscad_code": "// Halloumi cheese block with realistic grill marks and characteristic texture\n// Overall dimensions: 80x40x20mm\n\n// Base color for halloumi\ncolor([1, 0.92, 0.7]) difference() {\n    // Main block with slightly rounded edges\n    union() {\n        // Core block\n        translate([0, 0, 10])\n            cube([80, 40, 18], center=true);\n        \n        // Rounded top edges\n        for(x = [-35, 35])\n            for(y = [-15, 15])\n                translate([x, y, 19])\n                    sphere(r=5, $fn=20);\n    }\n    \n    // Remove bottom rounded edges\n    cube([90, 50, 10], center=true);\n}\n\n// Add surface texture - small dimples for cheese curd appearance\nmodule cheese_curd(x, y) {\n    color([1, 0.9, 0.65])\n    translate([x, y, 19.5])\n        sphere(r=1.2, $fn=12);\n}\n\n// Place curd texture across surface\nfor(x = [-30:4:30])\n    for(y = [-15:4:15])\n        cheese_curd(x, y);\n\n// Grill marks on top surface\nmodule grill_mark(x, y, angle) {\n    color([0.7, 0.5, 0.3])\n    translate([x, y, 20])\n        rotate([0, 0, angle])\n            cube([20, 2, 0.5], center=true);\n}\n\n// Create crossed grill pattern\nfor(pos = [-25:10:25])\n    grill_mark(pos, 0, 0);\nfor(pos = [-15:10:15])\n    grill_mark(0, pos, 90);\n\n// Side grill marks\nmodule side_grill(x, z) {\n    color([0.7, 0.5, 0.3])\n    translate([41, x, z])\n        cube([0.5, 15, 2], center=true);\n}\n\nfor(pos = [-10:8:10])\n    side_grill(pos, 10);\n    side_grill(pos, 15);\n\n// Folded cheese layers visible on sides\nmodule fold_layer(x, z) {\n    color([1, 0.93, 0.75])\n    translate([x, 0, z])\n        cube([0.5, 20, 3], center=true);\n}\n\nfor(x = [-35:5:35])\n    translate([x, 20, 10])\n        rotate([0, 90, 0])\n            fold_layer(0, x/7);\n\n// Small salt crystals on surface\nmodule salt_crystal(x, y, z) {\n    color([0.95, 0.95, 0.95])\n    translate([x, y, z])\n        scale([1, 0.7, 1.5])\n            sphere(r=0.4, $fn=6);\n}\n\n// Randomly place salt crystals\nseed = 42;\nfor(i = [0:20]) {\n    x = rands(-35, 35, 1, seed+i)[0];\n    y = rands(-18, 18, 1, seed+i+100)[0];\n    salt_crystal(x, y, 20.5);\n}",
    "renders": true
  },
  {
    "food_item": "paneer",
    "openscad_code": "// Paneer (Indian Cottage Cheese) - Realistic Style with Medium Complexity\n// Dimensions: 70mm x 50mm x 25mm (typical block size)\n\n// Main module for the paneer block\nmodule paneer_block() {\n    // Base paneer block with rounded edges\n    difference() {\n        // Main block shape\n        minkowski() {\n            cube([65, 45, 20], center = true);\n            sphere(3);\n        }\n        \n        // Hollow out slightly for realistic thickness\n        translate([0, 0, 2])\n        minkowski() {\n            cube([58, 38, 18], center = true);\n            sphere(2);\n        }\n    }\n}\n\n// Texture module for paneer surface\nmodule surface_texture() {\n    // Small dimples and pores typical of paneer\n    for (x = [-30:10:30]) {\n        for (y = [-20:10:20]) {\n            translate([x, y, 10.5])\n            rotate([90, 0, 0])\n            cylinder(h = 1.5, r1 = 0.8, r2 = 0.5, $fn = 8);\n        }\n    }\n    \n    // Larger surface imperfections\n    for (i = [1:12]) {\n        angle = i * 30;\n        radius = 15 + (i % 3) * 5;\n        translate([cos(angle) * radius, sin(angle) * radius, 10.5])\n        sphere(0.6 + sin(i) * 0.3);\n    }\n}\n\n// Cut marks from typical paneer preparation\nmodule cut_marks() {\n    // Vertical cuts\n    for (x = [-20:10:20]) {\n        translate([x, 0, 0])\n        cube([0.5, 50, 25], center = true);\n    }\n    \n    // Horizontal cuts\n    for (y = [-15:10:15]) {\n        translate([0, y, 0])\n        cube([70, 0.5, 25], center = true);\n    }\n    \n    // Diagonal cuts for variety\n    rotate([0, 0, 45])\n    translate([0, 0, 0])\n    cube([0.5, 60, 25], center = true);\n}\n\n// Paneer surface moisture droplets\nmodule moisture_beads() {\n    // Small water droplets on surface\n    for (i = [1:8]) {\n        angle = i * 45;\n        radius = 10 + (i % 2) * 15;\n        translate([cos(angle) * radius, sin(angle) * radius, 11])\n        sphere(0.5 + (i % 3) * 0.3);\n    }\n}\n\n// Main assembly\nunion() {\n    // Main paneer block with cream color\n    color([1, 0.95, 0.85])\n    paneer_block();\n    \n    // Surface texture - slightly darker\n    color([0.98, 0.92, 0.8])\n    surface_texture();\n    \n    // Cut marks - very subtle indentations\n    color([0.95, 0.9, 0.78])\n    difference() {\n        paneer_block();\n        cut_marks();\n    }\n    \n    // Moisture beads - transparent white\n    color([1, 1, 1, 0.6])\n    moisture_beads();\n}\n\n// Add slight tilt for natural presentation\nrotate([5, -3, 2])\ntranslate([0, 0, 0])\nunion();",
    "renders": true
  },
  {
    "food_item": "queso",
    "openscad_code": "// Queso Dip Bowl - Realistic Style, Medium Complexity\n// A 3D printable bowl of melty queso cheese dip with visible texture\n\n// Main parameters\n$fn = 50;\nbowl_outer_d = 60;\nbowl_height = 25;\nwall_thickness = 2;\ncheese_level = 18;\n\n// Generate the ceramic bowl\nmodule bowl() {\n    // Outer bowl shape\n    difference() {\n        // Main bowl body\n        cylinder(h = bowl_height, d1 = bowl_outer_d, d2 = bowl_outer_d * 0.8);\n        \n        // Hollow out the inside\n        translate([0, 0, wall_thickness])\n        cylinder(h = bowl_height - wall_thickness, d1 = bowl_outer_d - wall_thickness * 2, d2 = (bowl_outer_d * 0.8) - wall_thickness * 2);\n    }\n    \n    // Add rim detail\n    translate([0, 0, bowl_height - 2])\n    cylinder(h = 3, d1 = bowl_outer_d + 2, d2 = bowl_outer_d);\n}\n\n// Generate cheese surface with texture\nmodule cheese_surface() {\n    // Main cheese body\n    color([1, 0.8, 0.2, 0.9])  // Yellow-orange cheese color\n    difference() {\n        cylinder(h = cheese_level - 2, d1 = bowl_outer_d - wall_thickness * 2 - 4, d2 = (bowl_outer_d * 0.8) - wall_thickness * 2 - 4);\n        \n        // Create melted cheese texture\n        for (i = [0:8]) {\n            rotate([0, 0, i * 45])\n            translate([0, 5 + i * 2, cheese_level - 4])\n            sphere(d = 3 + i * 0.5);\n        }\n    }\n    \n    // Add melted drips on edges\n    for (i = [0:11]) {\n        rotate([0, 0, i * 30])\n        translate([(bowl_outer_d - wall_thickness * 2 - 6)/2, 0, 0])\n        scale([1, 0.7, 1.5])\n        sphere(d = 4 + sin(i * 30) * 2);\n    }\n}\n\n// Add chili peppers on top\nmodule chili_peppers() {\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90 + 20])\n        translate([5 + i * 3, 8 - i * 2, cheese_level - 1])\n        color([0.6, 0.1, 0.1])  // Red chili color\n        scale([0.8, 0.3, 0.3])\n        rotate([90, 0, 0])\n        cylinder(h = 8, d1 = 3, d2 = 1.5);\n    }\n}\n\n// Add cheese bubbles\nmodule cheese_bubbles() {\n    for (i = [0:20]) {\n        rotate([0, 0, i * 137.5])\n        translate([sin(i * 2) * 15, cos(i * 2) * 15, cheese_level - 1 - i * 0.3])\n        color([1, 0.85, 0.3, 0.7])\n        sphere(d = 1 + (i % 3) * 0.5);\n    }\n}\n\n// Assemble the queso\nunion() {\n    // Ceramic bowl\n    color([0.95, 0.95, 0.9])  // Off-white ceramic\n    bowl();\n    \n    // Cheese dip\n    translate([0, 0, 2])\n    cheese_surface();\n    \n    // Toppings\n    chili_peppers();\n    cheese_bubbles();\n}",
    "renders": true
  },
  {
    "food_item": "labneh",
    "openscad_code": "// Labneh - strained yogurt cheese in realistic style\n// Medium complexity, 3D printable, no overhangs\n\n// Main parameters\nyogurt_radius = 40;\nyogurt_height = 25;\nbowl_thickness = 2;\nswirl_height = 3;\n\n// Color definitions\nlabneh_color = [249/255, 241/255, 235/255];\nolive_color = [85/255, 93/255, 80/255];\noil_color = [245/255, 223/255, 77/255];\n\nmodule olive(radius) {\n    color(olive_color) {\n        difference() {\n            sphere(r=radius);\n            // Olive hole\n            rotate([0, 90, 0]) cylinder(r=radius*0.3, h=radius*2.1, center=true);\n        }\n    }\n}\n\nmodule oil_droplet(x, y, z) {\n    color(oil_color) {\n        translate([x, y, z]) \n            scale([1, 1, 0.3]) \n                sphere(r=1.5);\n    }\n}\n\nmodule swirl_pattern() {\n    for(i=[0:15:360]) {\n        rotate([0, 0, i]) {\n            translate([yogurt_radius*0.3, 0, swirl_height]) {\n                color(labneh_color) {\n                    scale([1, 0.3, 0.2]) \n                        sphere(r=6);\n                }\n            }\n        }\n    }\n}\n\nmodule labneh_surface() {\n    difference() {\n        // Main yogurt body\n        cylinder(r=yogurt_radius, h=yogurt_height, $fn=64);\n        \n        // Carve out slight depression in center\n        translate([0, 0, -1]) \n            cylinder(r=yogurt_radius*0.8, h=yogurt_height*0.8, $fn=64);\n    }\n}\n\nmodule bowl() {\n    color([210/255, 210/255, 210/255]) {\n        difference() {\n            cylinder(r=yogurt_radius+bowl_thickness, h=yogurt_height+5, $fn=64);\n            translate([0, 0, bowl_thickness]) \n                cylinder(r=yogurt_radius, h=yogurt_height+5, $fn=64);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Bowl\n    bowl();\n    \n    // Labneh\n    translate([0, 0, bowl_thickness]) {\n        color(labneh_color) {\n            labneh_surface();\n            \n            // Surface texture - small bumps\n            for(i=[0:359]) {\n                rotate([0, 0, i]) {\n                    translate([yogurt_radius*(0.8 + rand(i)/5), 0, yogurt_height*0.9]) {\n                        sphere(r=0.5 + rand(i*2)/2, $fn=8);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Swirl pattern on top\n    translate([0, 0, bowl_thickness]) {\n        swirl_pattern();\n    }\n    \n    // Garnishes\n    translate([0, 0, bowl_thickness + yogurt_height]) {\n        // Olives\n        olive(4);\n        translate([15, 10, 0]) olive(3.5);\n        translate([-12, -8, 0]) olive(4.2);\n        \n        // Oil droplets\n        for(i=[0:20]) {\n            oil_droplet(\n                (rand(i*100) - 0.5) * yogurt_radius * 0.8,\n                (rand(i*200) - 0.5) * yogurt_radius * 0.8,\n                0.5\n            );\n        }\n    }\n}\n\n// Helper function for randomness\nfunction rand(x) = (sin(x*12.9898 + 78.233)*43758.5453)%1;",
    "renders": true
  },
  {
    "food_item": "skyr",
    "openscad_code": "// Skyr container with lid and visible skyr inside\n// Overall size: ~70mm diameter, ~80mm height\n\n// Main parameters\ncontainer_diameter = 60;\ncontainer_height = 45;\ncontainer_wall = 2;\nlid_height = 8;\nskyr_height = 35;\nskyr_color = [0.95, 0.95, 0.85];\ncontainer_color = [0.9, 0.9, 0.85];\nlid_color = [0.2, 0.2, 0.2];\n\nmodule container_body() {\n    difference() {\n        // Outer container\n        cylinder(h=container_height, d=container_diameter, $fn=64);\n        \n        // Hollow inside\n        translate([0, 0, -0.1])\n            cylinder(h=container_height+0.2, d=container_diameter-container_wall*2, $fn=64);\n    }\n}\n\nmodule container_base() {\n    // Bottom rim for stability\n    translate([0, 0, -1])\n        cylinder(h=3, d=container_diameter+4, $fn=64);\n}\n\nmodule container_rim() {\n    // Top rim with lip\n    difference() {\n        translate([0, 0, container_height-3])\n            cylinder(h=6, d=container_diameter+6, $fn=64);\n        translate([0, 0, container_height-3])\n            cylinder(h=7, d=container_diameter, $fn=64);\n    }\n}\n\nmodule lid() {\n    // Main lid\n    translate([0, 0, container_height])\n        cylinder(h=lid_height, d=container_diameter+6, $fn=64);\n    \n    // Lid grip\n    translate([0, 0, container_height+lid_height])\n        cylinder(h=5, d=container_diameter/3, $fn=32);\n}\n\nmodule skyr_surface() {\n    // Main skyr body\n    translate([0, 0, container_height-container_wall-skyr_height])\n        cylinder(h=skyr_height, d=container_diameter-container_wall*2-2, $fn=64);\n    \n    // Surface texture - small scoops\n    for (i = [0:20]) {\n        angle = i * 137.5;\n        radius = (container_diameter-container_wall*2-2)/2 * 0.8 * sqrt(i/20);\n        translate([\n            cos(angle) * radius,\n            sin(angle) * radius,\n            container_height-container_wall\n        ])\n            sphere(d=3, $fn=12);\n    }\n    \n    // Add swirl pattern\n    rotate_extrude(angle=360, $fn=64)\n        translate([(container_diameter-container_wall*2-2)/2-5, 0])\n            for (t = [0:5:360]) {\n                translate([sin(t*3)*2, t/10])\n                    circle(d=1.5);\n            }\n}\n\n// Assembly\ncolor(container_color) {\n    union() {\n        container_base();\n        container_body();\n        container_rim();\n    }\n}\n\ncolor([0.1, 0.1, 0.1]) lid();\n\ncolor(skyr_color) skyr_surface();",
    "renders": true
  },
  {
    "food_item": "clottedcream",
    "openscad_code": "// Clotted Cream - Realistic Style (Medium Complexity)\n// Dimensions: 80mm diameter, 35mm height\n\n$fn = 64;\n\n// Main color for clotted cream\ncolor([0.98, 0.95, 0.88]) {\n\n    // Base cream layer - slightly flattened dome\n    translate([0, 0, 5]) \n        scale([1, 1, 0.6])\n        sphere(d = 80);\n\n    // Top cream layer - irregular dome\n    translate([0, 0, 15]) {\n        difference() {\n            scale([1.05, 1, 0.8])\n            sphere(d = 75);\n            translate([0, 0, -20])\n                cube([100, 100, 40], center = true);\n        }\n    }\n\n    // Ridge texture around edges\n    for (i = [0:15:345]) {\n        rotate([0, 0, i]) {\n            translate([37, 0, 8]) \n                rotate([90, 0, 0])\n                cylinder(h = 2, d1 = 8, d2 = 6, $fn = 16);\n        }\n    }\n\n    // Surface texture - small bumps\n    module surface_bumps() {\n        for (x = [-30:12:30]) {\n            for (y = [-30:12:30]) {\n                if (x*x + y*y < 900) {\n                    translate([x + rand(), y + rand(), 22 + rand()*2])\n                        sphere(d = 1.5 + rand()*1.5);\n                }\n            }\n        }\n    }\n\n    // Random number generator for natural variation\n    function rand() = (sin(12345*floor($t*1000)) + 1) / 2 - 0.5;\n\n    surface_bumps();\n\n    // Crust layer - golden brown patches\n    color([0.82, 0.66, 0.45]) {\n        for (i = [0:30:330]) {\n            rotate([0, 0, i]) {\n                translate([rand()*25, rand()*25, 25]) {\n                    scale([1 + rand()*0.3, 1 + rand()*0.3, 0.3])\n                    sphere(d = 8 + rand()*6);\n                }\n            }\n        }\n    }\n\n    // Folded edges characteristic of clotted cream\n    module folded_edges() {\n        for (i = [0:45:315]) {\n            rotate([0, 0, i]) {\n                translate([40 - rand()*5, 0, 5 + rand()*5]) {\n                    rotate([0, 0, rand()*20 - 10])\n                    linear_extrude(height = 2 + rand()*3)\n                    circle(d = 12 + rand()*8);\n                }\n            }\n        }\n    }\n\n    folded_edges();\n\n    // Base plate for stability\n    translate([0, 0, 0])\n        cylinder(h = 5, d = 82, $fn = 64);\n\n    // Slight indentation in center\n    translate([0, 0, 25])\n        cylinder(h = 3, d = 15, $fn = 32);\n}",
    "renders": true
  },
  {
    "food_item": "sourcream",
    "openscad_code": "// Sour cream container with realistic wavy surface texture\n// Overall size ~60mm diameter, 50mm height\n\n$fn = 48;  // Smooth curves for 3D printing\n\n// Main colors\ncolor_sourcream = [0.98, 0.95, 0.90];  // Off-white creamy color\ncolor_container = [0.15, 0.15, 0.15];  // Dark plastic lid\ncolor_label = [0.05, 0.05, 0.05];      // Dark blue label\n\n// Container parameters\ncontainer_d = 60;\ncontainer_h = 50;\nwall_thickness = 2;\n\n// Create the complete sour cream container\nmodule sour_cream_container() {\n    // Base container\n    difference() {\n        cylinder(d = container_d, h = container_h);\n        translate([0, 0, wall_thickness])\n            cylinder(d = container_d - 2*wall_thickness, h = container_h);\n    }\n    \n    // Bottom rim\n    translate([0, 0, -wall_thickness/2])\n        cylinder(d = container_d + 2, h = wall_thickness);\n    \n    // Lid\n    translate([0, 0, container_h])\n        color(color_container)\n        difference() {\n            cylinder(d = container_d + 1, h = 5);\n            translate([0, 0, 2])\n                cylinder(d = container_d - 4, h = 5);\n        }\n    \n    // Label band\n    translate([0, 0, container_h/2 - 10])\n        color(color_label)\n        cylinder(d = container_d + 0.5, h = 20);\n}\n\n// Create wavy sour cream surface inside container\nmodule sour_cream_surface() {\n    color(color_sourcream) {\n        // Main creamy body\n        translate([0, 0, wall_thickness])\n            cylinder(d = container_d - 2*wall_thickness - 2, h = container_h - wall_thickness - 10);\n        \n        // Wavy top surface with realistic texture\n        translate([0, 0, container_h - 10]) {\n            // Base smooth layer\n            cylinder(d = container_d - 2*wall_thickness - 2, h = 1);\n            \n            // Add wavy peaks\n            for (r = [0:5:container_d/2 - wall_thickness - 5]) {\n                for (a = [0:30:360]) {\n                    h = 2 + sin(r*2 + a*4) * 1.5;\n                    translate([\n                        r * cos(a),\n                        r * sin(a),\n                        1\n                    ]) {\n                        scale([1, 1, 0.5])\n                            sphere(d = 3 + sin(a*3) * 1);\n                    }\n                }\n            }\n        }\n        \n        // Swirl pattern on top\n        translate([0, 0, container_h - 8]) {\n            rotate([0, 0, 15])\n                for (i = [0:5:40]) {\n                    rotate([0, 0, i*3])\n                        translate([i/2, 0, 0])\n                            scale([1, 0.3, 0.5])\n                                sphere(d = 4 - i/10);\n                }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    sour_cream_container();\n    sour_cream_surface();\n}",
    "renders": true
  },
  {
    "food_item": "cremefraiche",
    "openscad_code": "// Creme fraiche container with realistic texture\n// Dimensions: 60mm diameter, 40mm height\n\n$fa = 2;\n$fs = 0.5;\n\n// Main color definitions\ncolor_container = [0.95, 0.95, 0.93];\ncolor_label = [0.1, 0.6, 0.2];\ncolor_creme = [0.98, 0.97, 0.92];\ncolor_lid = [0.9, 0.9, 0.9];\n\n// Container body\nmodule container_body() {\n    difference() {\n        // Main cylindrical body\n        cylinder(h = 35, r1 = 30, r2 = 30, center = false);\n        \n        // Hollow out the inside with thicker bottom\n        translate([0, 0, 3])\n            cylinder(h = 32, r1 = 27, r2 = 27, center = false);\n    }\n}\n\n// Lid with lip\nmodule container_lid() {\n    difference() {\n        union() {\n            // Main lid disc\n            cylinder(h = 5, r1 = 31, r2 = 31, center = false);\n            \n            // Lip for gripping\n            translate([0, 0, 2])\n                cylinder(h = 3, r1 = 32, r2 = 32, center = false);\n        }\n        \n        // Hollow underside\n        translate([0, 0, 3])\n            cylinder(h = 2, r1 = 29, r2 = 29, center = false);\n    }\n}\n\n// Label band around container\nmodule label_band() {\n    // Create label texture with bumps\n    for (i = [0:5:360]) {\n        rotate([0, 0, i])\n            translate([28.5, 0, 18])\n                scale([1, 0.3, 0.5])\n                    sphere(r = 0.5);\n    }\n}\n\n// Creme fraiche surface texture\nmodule creme_surface() {\n    // Create realistic creme surface with swirls and peaks\n    translate([0, 0, 35])\n        difference() {\n            // Main creme volume\n            cylinder(h = 8, r1 = 27, r2 = 27, center = false);\n            \n            // Swirl patterns\n            for (angle = [0:30:360]) {\n                rotate([0, 0, angle])\n                    translate([10 + angle/10, 0, 0])\n                        rotate([90, 0, 0])\n                            cylinder(h = 8, r1 = 2, r2 = 0.5, center = false);\n            }\n        }\n    \n    // Add small peaks on surface\n    for (i = [1:10]) {\n        angle = i * 36;\n        radius = 15 + sin(i * 5) * 8;\n        translate([radius * cos(angle), radius * sin(angle), 42])\n            scale([1, 1, 0.7])\n                sphere(r = 1 + sin(i * 3) * 0.5);\n    }\n}\n\n// Assembly\ncolor(color_container) container_body();\ncolor(color_lid) translate([0, 0, 35]) container_lid();\ncolor(color_label) label_band();\ncolor(color_creme) creme_surface();",
    "renders": true
  },
  {
    "food_item": "milkpowder",
    "openscad_code": "// Milk powder tin - realistic style, medium complexity\n// 3D printable with no overhangs, 50mm height\n\n// Main parameters\ntin_radius = 25;\ntin_height = 50;\nwall_thickness = 2;\nlid_height = 8;\n\n// Colors\n$fn = 64;\n\n// Main tin body\nmodule tin_body() {\n    difference() {\n        // Outer cylinder\n        cylinder(h=tin_height, r=tin_radius);\n        \n        // Inner hollow space\n        translate([0, 0, wall_thickness])\n        cylinder(h=tin_height-wall_thickness*2, r=tin_radius-wall_thickness);\n    }\n}\n\n// Lid with rounded top\nmodule tin_lid() {\n    difference() {\n        union() {\n            // Main lid cylinder\n            cylinder(h=lid_height-wall_thickness, r=tin_radius);\n            \n            // Rounded top\n            translate([0, 0, lid_height-wall_thickness])\n            scale([1, 1, 0.7])\n            sphere(r=tin_radius);\n        }\n        \n        // Inner lip for fitting\n        translate([0, 0, lid_height-wall_thickness])\n        cylinder(h=wall_thickness*2, r=tin_radius-wall_thickness*1.5);\n    }\n}\n\n// Milk powder scoop inside\nmodule milk_powder() {\n    // Create powder surface with slight mound\n    translate([0, 0, wall_thickness])\n    difference() {\n        // Main powder volume\n        cylinder(h=25, r=tin_radius-wall_thickness-1);\n        \n        // Create slight dome shape\n        translate([0, 0, 20])\n        scale([1, 1, 0.3])\n        sphere(r=tin_radius-wall_thickness);\n    }\n}\n\n// Handle detail on lid\nmodule lid_handle() {\n    translate([0, tin_radius-10, lid_height-wall_thickness+3])\n    rotate([90, 0, 0])\n    cylinder(h=20, r=3);\n}\n\n// Label band around tin\nmodule label_band() {\n    rotate_extrude()\n    translate([tin_radius-0.5, 0])\n    square([0.5, tin_height-10]);\n}\n\n// Powder texture dots on surface\nmodule powder_texture() {\n    for(i = [0:5:350]) {\n        for(j = [0:5:25]) {\n            translate([\n                sin(i)*((tin_radius-wall_thickness-1)*j/25),\n                cos(i)*((tin_radius-wall_thickness-1)*j/25),\n                wall_thickness + 25 - j\n            ])\n            sphere(r=0.5);\n        }\n    }\n}\n\n// Main assembly\ncolor(\"silver\") tin_body();\ncolor(\"silver\") translate([0, 0, tin_height]) tin_lid();\ncolor(\"silver\") lid_handle();\n\n// Milk powder inside\ncolor(\"antique_white\") milk_powder();\ncolor(\"antique_white\") powder_texture();\n\n// Label band\ncolor(\"white\") translate([0, 0, 5]) label_band();",
    "renders": true
  },
  {
    "food_item": "evaporatedmilk",
    "openscad_code": "// Evaporated Milk Can - Realistic Style, Medium Complexity\n// Dimensions: 60mm height, 45mm diameter\n\n$fn = 32;\n\n// Main can body\nmodule can_body() {\n    color(\"silver\") \n    difference() {\n        // Outer cylinder\n        cylinder(h = 55, d = 45, center = true);\n        \n        // Inner hollow space\n        translate([0, 0, 2])\n        cylinder(h = 51, d = 41, center = true);\n    }\n}\n\n// Top rim/lip\nmodule top_rim() {\n    color(\"silver\")\n    translate([0, 0, 27.5])\n    difference() {\n        cylinder(h = 3, d1 = 45, d2 = 47);\n        cylinder(h = 3, d = 42);\n    }\n}\n\n// Bottom rim\nmodule bottom_rim() {\n    color(\"silver\")\n    translate([0, 0, -27.5])\n    difference() {\n        cylinder(h = 3, d1 = 47, d2 = 45);\n        cylinder(h = 3, d = 42);\n    }\n}\n\n// Label wrap\nmodule label() {\n    color([0.95, 0.95, 0.9])\n    translate([0, 0, 10])\n    cylinder(h = 25, d = 45.2, center = true);\n}\n\n// Evaporated milk text (simplified as raised blocks)\nmodule label_text() {\n    color([0.1, 0.1, 0.1])\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90])\n        translate([0, 22.5, 10])\n        cube([0.5, 3, 0.5], center = true);\n    }\n}\n\n// Can opener ridge (double seam)\nmodule opener_ridge() {\n    color(\"silver\")\n    translate([0, 0, 28.5])\n    difference() {\n        cylinder(h = 1.5, d = 47);\n        cylinder(h = 1.5, d = 44);\n    }\n}\n\n// Side seam (manufacturing line)\nmodule side_seam() {\n    color([0.8, 0.8, 0.8])\n    rotate([0, 90, 0])\n    translate([22.6, 0, 0])\n    cube([0.2, 55, 0.5]);\n}\n\n// Top dents for realistic detail\nmodule top_dents() {\n    color(\"silver\")\n    for(angle = [0:60:359]) {\n        rotate([0, 0, angle])\n        translate([20, 0, 28.5])\n        sphere(d = 1.5, $fn = 8);\n    }\n}\n\n// Assembly\nunion() {\n    can_body();\n    top_rim();\n    bottom_rim();\n    label();\n    label_text();\n    opener_ridge();\n    side_seam();\n    top_dents();\n}",
    "renders": true
  },
  {
    "food_item": "condensedmilk",
    "openscad_code": "// Condensed milk can - 3D printable model\n// Realistic style, medium complexity\n\n// Overall dimensions\ncan_diameter = 45;\ncan_height = 65;\nwall_thickness = 1.5;\nlid_thickness = 2;\n\n// Colors\n$fn = 48;\n\nmodule condensed_milk_can() {\n    // Main can body\n    difference() {\n        union() {\n            // Cylindrical body\n            cylinder(h=can_height, d=can_diameter, center=false);\n            \n            // Bottom rim\n            translate([0, 0, 0])\n            cylinder(h=2, d=can_diameter + 2, center=false);\n            \n            // Top rim\n            translate([0, 0, can_height - 2])\n            cylinder(h=2, d=can_diameter + 2, center=false);\n        }\n        \n        // Hollow out the inside\n        translate([0, 0, wall_thickness])\n        cylinder(h=can_height - wall_thickness*2, d=can_diameter - wall_thickness*2, center=false);\n    }\n    \n    // Top lid with pull tab\n    translate([0, 0, can_height])\n    union() {\n        // Lid disk\n        difference() {\n            cylinder(h=lid_thickness, d=can_diameter, center=false);\n            // Score line for opening\n            translate([0, 0, lid_thickness/2])\n            cylinder(h=lid_thickness + 0.1, d=can_diameter - 6, center=true);\n        }\n        \n        // Pull tab\n        translate([can_diameter/2 - 8, 0, lid_thickness + 0.5])\n        rotate([0, 90, 0])\n        union() {\n            // Tab ring\n            cylinder(h=8, d=4, center=false);\n            // Tab handle\n            translate([4, 0, -2])\n            cube([8, 2, 4]);\n            // Tab connection\n            translate([0, -1, -1])\n            cube([4, 2, 2]);\n        }\n    }\n    \n    // Label bands\n    color(\"white\")\n    translate([0, 0, can_height/2 - 15])\n    difference() {\n        cylinder(h=20, d=can_diameter + 0.5, center=true);\n        cylinder(h=20.5, d=can_diameter - 0.5, center=true);\n    }\n    \n    // Condensed milk dripping from top\n    color(\"beige\")\n    translate([0, -can_diameter/4, can_height + lid_thickness])\n    union() {\n        // Main drip body\n        rotate([90, 0, 0])\n        cylinder(h=8, d1=6, d2=4, center=false);\n        \n        // Secondary drip\n        translate([3, 0, 6])\n        sphere(d=3);\n        \n        // Small droplets\n        for(i=[0:2]) {\n            rotate([0, 0, i*120])\n            translate([2, 0, 8 + i*1.5])\n            sphere(d=1.5);\n        }\n    }\n    \n    // Surface texture - small dents for realism\n    for(i=[0:35]) {\n        angle = i * 10;\n        height = i * 1.8;\n        color(\"silver\")\n        translate([\n            cos(angle) * (can_diameter/2 - 1),\n            sin(angle) * (can_diameter/2 - 1),\n            height % can_height\n        ])\n        sphere(d=0.8);\n    }\n}\n\n// Render the complete model\ncolor(\"silver\")\ncondensed_milk_can();",
    "renders": true
  },
  {
    "food_item": "buttermilk",
    "openscad_code": "// Realistic 3D printable buttermilk model\n// Overall height ~70 mm, base diameter ~55 mm\n\n// Glass container\nmodule glass() {\n    // Main cylindrical body with slight taper\n    difference() {\n        cylinder(h=60, r1=27.5, r2=25, $fn=64);\n        // Hollow interior\n        translate([0, 0, 2])\n            cylinder(h=58, r1=25, r2=22.5, $fn=64);\n    }\n    // Thick base\n    translate([0, 0, -3])\n        cylinder(h=3, r=27.5, $fn=64);\n}\n\n// Liquid surface with gentle wave\nmodule liquid_surface() {\n    // Base liquid at 80% height\n    difference() {\n        translate([0, 0, 0])\n            cylinder(h=46, r1=25, r2=22.5, $fn=128);\n        // Create natural surface undulations\n        for(i=[0:5:360]) {\n            rotate([0, 0, i])\n                translate([0, 15 + 3*sin(i*3), 0])\n                    rotate([90, 0, 0])\n                        cylinder(h=30, r=5, $fn=8);\n        }\n    }\n}\n\n// Buttermilk foam/bubbles detail\nmodule foam_bubbles() {\n    // Random small bubbles on surface\n    for(i=[0:15]) {\n        angle = i*137.5; // Golden angle for distribution\n        radius = 10 + 8*sin(i*0.8);\n        translate([\n            radius*cos(angle),\n            radius*sin(angle),\n            45 + 1.5*cos(i*2)\n        ])\n            sphere(r=0.8 + 0.3*sin(i), $fn=8);\n    }\n    \n    // Larger foam clusters\n    for(i=[0:3]) {\n        angle = i*90;\n        translate([\n            12*cos(angle),\n            12*sin(angle),\n            46\n        ]) {\n            sphere(r=2.5, $fn=12);\n            translate([2, 1, 0.5]) sphere(r=1.8, $fn=10);\n            translate([-1.5, 2, 0.3]) sphere(r=2.1, $fn=11);\n        }\n    }\n}\n\n// Condensation droplets on glass\nmodule condensation() {\n    // Random droplets on outer surface\n    for(h=[10:10:50]) {\n        for(i=[0:5:35]) {\n            angle = i*10 + h*3;\n            translate([\n                27*cos(angle),\n                27*sin(angle),\n                h\n            ])\n                sphere(r=0.5 + 0.3*sin(i+h), $fn=6);\n        }\n    }\n}\n\n// Assemble the buttermilk\ncolor([0.95, 0.95, 0.90, 0.4]) glass();\ncolor([0.98, 0.95, 0.85, 0.85]) liquid_surface();\ncolor([1, 1, 0.98, 0.9]) foam_bubbles();\ncolor([0.8, 0.9, 1, 0.3]) condensation();",
    "renders": true
  },
  {
    "food_item": "kumis",
    "openscad_code": "// Kumis (fermented mare's milk) in a traditional leather pouch\n// Traditional Kyrgyz drink served in a leather bag with wooden stopper\n\ncolor(\"saddlebrown\") {\n    // Main leather pouch body - oval shape\n    union() {\n        // Front half of pouch\n        translate([0, 0, 0])\n            scale([1, 0.7, 1.2])\n            sphere(d=40, $fn=64);\n        \n        // Back half of pouch\n        translate([0, 0, 0])\n            scale([1, 0.7, 1.2])\n            sphere(d=40, $fn=64);\n        \n        // Flatten the pouch slightly\n        difference() {\n            union();\n            translate([0, 0, -25])\n                cube([50, 50, 50], center=true);\n        }\n    }\n}\n\n// Leather stitching pattern around the edge\nmodule stitching_pattern() {\n    for(i = [0:15:360]) {\n        rotate([90, 0, i])\n            translate([0, 20.5, 0])\n                color(\"tan\")\n                    cylinder(h=0.5, d=1, center=true);\n    }\n}\n\nstitching_pattern();\n\n// Pouch opening at the top\ndifference() {\n    color(\"saddlebrown\") {\n        cylinder(h=8, d=18, center=true);\n    }\n    translate([0, 0, 8])\n        cylinder(h=10, d=14, center=true);\n}\n\n// Wooden stopper/cork\ntranslate([0, 0, 10])\ncolor(\"burlywood\") {\n    // Main cork body\n    cylinder(h=15, d1=13, d2=11, center=true);\n    \n    // Cork top handle\n    translate([0, 0, 10])\n        sphere(d=8, $fn=32);\n}\n\n// Leather strap for carrying\nmodule strap_segment(angle) {\n    rotate([0, 0, angle])\n        translate([0, 22, 0])\n            color(\"saddlebrown\")\n                cube([3, 8, 2], center=true);\n}\n\n// Create 4 strap segments\nfor(i = [0:90:270]) {\n    strap_segment(i);\n}\n\n// Liquid inside visible through opening\ntranslate([0, 0, 4])\ncolor(\"ivory\") {\n    difference() {\n        cylinder(h=6, d=13.5, center=true);\n        // Surface of kumis with slight foam\n        translate([0, 0, 3.5])\n            sphere(d=14, $fn=32);\n    }\n}\n\n// Small foam bubbles on surface\nmodule foam_bubble() {\n    color(\"white\")\n        sphere(d=0.5 + rands(0, 0.3, 1)[0], $fn=8);\n}\n\n// Random foam bubbles\nfor(i = [0:5:40]) {\n    translate([\n        rands(-5, 5, 1)[0],\n        rands(-5, 5, 1)[0],\n        7 + rands(0, 0.5, 1)[0]\n    ]) foam_bubble();\n}\n\n// Texture lines on leather surface\nmodule leather_texture() {\n    for(i = [0:30:360]) {\n        rotate([0, 0, i])\n            translate([19, 0, -10])\n                color(\"saddlebrown\")\n                    cube([0.5, 1, 20], center=true);\n    }\n}\n\nleather_texture();",
    "renders": true
  },
  {
    "food_item": "ayran",
    "openscad_code": "// Ayran - Turkish yogurt drink in a traditional glass\n// Glass dimensions: 70mm height, 55mm diameter\n// Drink fills 80% of glass height\n\n$fn = 50;\n\n// Main assembly\ntranslate([0, 0, 0]) {\n    // Traditional ayran glass\n    union() {\n        // Glass body - slightly tapered\n        difference() {\n            // Outer glass\n            cylinder(h = 70, r1 = 27.5, r2 = 25, center = false);\n            \n            // Inner cavity for drink\n            translate([0, 0, 3]) {\n                cylinder(h = 67, r1 = 24.5, r2 = 22, center = false);\n            }\n        }\n        \n        // Glass base\n        translate([0, 0, -2]) {\n            cylinder(h = 4, r = 29, center = false);\n        }\n        \n        // Rim detail\n        translate([0, 0, 70]) {\n            cylinder(h = 3, r1 = 28, r2 = 27.5, center = false);\n        }\n    }\n    \n    // Ayran liquid - creamy white yogurt drink\n    color(\"cornsilk\") {\n        translate([0, 0, 3]) {\n            cylinder(h = 56, r1 = 24.5, r2 = 22, center = false);\n        }\n    }\n    \n    // Foam layer on top - characteristic of shaken ayran\n    color(\"white\") {\n        translate([0, 0, 59]) {\n            cylinder(h = 2, r1 = 24.5, r2 = 22, center = false);\n        }\n        \n        // Foam bubbles - random placement for realism\n        for(i = [0:5:360]) {\n            rotate([0, 0, i]) {\n                translate([20 + sin(i*3)*3, 0, 61]) {\n                    sphere(r = 0.5 + sin(i*2)*0.3);\n                }\n            }\n        }\n    }\n    \n    // Condensation droplets on glass exterior\n    color(\"lightblue\", 0.6) {\n        for(i = [0:15:360]) {\n            rotate([0, 0, i]) {\n                translate([27 + sin(i*4)*2, 0, 20 + sin(i*5)*15]) {\n                    sphere(r = 0.8 + sin(i*3)*0.3);\n                }\n            }\n        }\n    }\n    \n    // Yogurt texture - slight swirl pattern inside\n    color(\"cornsilk\") {\n        for(angle = [0:30:360]) {\n            rotate([0, 0, angle]) {\n                translate([10, 0, 30]) {\n                    rotate([90, 0, 0]) {\n                        scale([1, 0.3, 1]) {\n                            cylinder(h = 25, r = 1.5, center = false);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "food_item": "lassi",
    "openscad_code": "// Lassi - traditional Indian yogurt drink in a terracotta cup\n// Realistic style, medium complexity\n\n$fn = 50;\n\n// Main colors\ncolor_yogurt = [1, 0.95, 0.85];\ncolor_clay = [0.7, 0.4, 0.3];\ncolor_foam = [1, 1, 0.9];\ncolor_saffron = [0.95, 0.75, 0.3];\n\nmodule lassi_cup() {\n    // Terracotta cup body\n    difference() {\n        // Main cup shape\n        rotate_extrude() {\n            polygon(points=[\n                [0, 0],\n                [22, 0],\n                [25, 8],\n                [27, 20],\n                [26, 45],\n                [24, 55],\n                [22, 65],\n                [20, 75],\n                [0, 75]\n            ]);\n        }\n        \n        // Hollow out the cup\n        translate([0, 0, 2])\n        rotate_extrude() {\n            polygon(points=[\n                [0, 0],\n                [19, 0],\n                [21, 10],\n                [20, 45],\n                [19, 55],\n                [18, 65],\n                [0, 65]\n            ]);\n        }\n        \n        // Top rim rounding\n        translate([0, 0, 73])\n        cylinder(h=4, r1=25, r2=22, $fn=64);\n    }\n    \n    // Cup base\n    translate([0, 0, -1])\n    cylinder(h=3, r=24);\n    \n    // Texture lines on cup exterior\n    for(i = [1:8]) {\n        rotate([0, 0, i * 45])\n        translate([23, 0, 10])\n        scale([0.3, 0.3, 50])\n        cylinder(h=1, r=1);\n    }\n}\n\nmodule lassi_drink() {\n    // Main yogurt body\n    color(color_yogurt)\n    translate([0, 0, 15])\n    cylinder(h=58, r1=20, r2=19, $fn=64);\n    \n    // Foam layer on top\n    color(color_foam)\n    translate([0, 0, 73])\n    cylinder(h=3, r1=21, r2=20, $fn=64);\n    \n    // Foam bubbles\n    for(i = [1:12]) {\n        angle = i * 30 + rand(i) * 10;\n        radius = 8 + rand(i+5) * 6;\n        color(color_foam)\n        translate([radius * cos(angle), radius * sin(angle), 75 + rand(i+10) * 1.5])\n        sphere(r=0.5 + rand(i+15) * 1.2);\n    }\n    \n    // Saffron strands\n    color(color_saffron)\n    for(i = [1:6]) {\n        angle = i * 60 + rand(i+20) * 15;\n        radius = 12 + rand(i+25) * 4;\n        translate([radius * cos(angle), radius * sin(angle), 74])\n        rotate([0, 0, angle + 90])\n        scale([0.2, 3, 0.1])\n        sphere(r=1);\n    }\n}\n\n// Helper function for randomness\nfunction rand(x) = (x * 73.13) % 1;\n\n// Assemble the lassi\ncolor(color_clay) lassi_cup();\nlassi_drink();",
    "renders": true
  },
  {
    "food_item": "dulce",
    "openscad_code": "// Dulce de Leche Square (Alfajor-style)\n// Medium complexity realistic 3D printable model\n\n// Main parameters\n$fn = 32;\nthickness = 5;\nsize = 60;\nheight = 20;\n\n// Color definitions\ncolor_dulce = [139/255, 69/255, 19/255];  // Dulce de leche brown\ncolor_cookie = [222/255, 184/255, 135/255];  // Light cookie color\ncolor_sugar = [245/255, 245/255, 220/255];  // Powdered sugar white\n\n// Module for sugar dusting texture\nmodule sugar_texture(base_size, density) {\n    for(i = [0:density-1]) {\n        for(j = [0:density-1]) {\n            translate([\n                -base_size/2 + i*(base_size/density) + (base_size/density)/2,\n                -base_size/2 + j*(base_size/density) + (base_size/density)/2,\n                height + 0.1\n            ]) {\n                scale([0.3, 0.3, 0.1]) {\n                    sphere(1);\n                }\n            }\n        }\n    }\n}\n\n// Module for dulce de leche filling texture\nmodule dulce_texture(base_size) {\n    // Create ripple effect on top surface\n    for(i = [0:20]) {\n        rotate([0, 0, i*18]) {\n            translate([0, 0, height - 2]) {\n                color(color_dulce) {\n                    scale([1, 0.2, 0.5]) {\n                        cylinder(h=1, r1=base_size/2 - i*1.5, r2=base_size/2 - i*1.5 - 2);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Add some swirls\n    for(i = [0:3]) {\n        rotate([0, 0, i*90]) {\n            translate([base_size/4, 0, height - 1]) {\n                color(color_dulce) {\n                    rotate_extrude(angle=90, $fn=16) {\n                        translate([base_size/8, 0, 0]) {\n                            circle(r=2);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Module for cookie base with texture\nmodule cookie_base(size, thickness) {\n    difference() {\n        // Main cookie base\n        color(color_cookie) {\n            cube([size, size, thickness], center=true);\n        }\n        \n        // Rounded edges for realistic look\n        translate([0, 0, thickness/2 - 0.5]) {\n            color(color_cookie) {\n                cube([size-2, size-2, thickness], center=true);\n            }\n        }\n        \n        // Add some cookie pores\n        for(i = [0:15]) {\n            translate([\n                -size/2 + 5 + i*3,\n                -size/2 + 5 + (i%4)*3,\n                thickness/2\n            ]) {\n                sphere(0.5, $fn=8);\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Bottom cookie\n    translate([0, 0, 0]) {\n        cookie_base(size, thickness);\n    }\n    \n    // Dulce de leche layer\n    translate([0, 0, thickness]) {\n        color(color_dulce) {\n            cube([size-4, size-4, height - 2*thickness], center=true);\n        }\n        \n        // Add dulce texture\n        dulce_texture(size-4);\n    }\n    \n    // Top cookie\n    translate([0, 0, height - thickness]) {\n        cookie_base(size, thickness);\n    }\n    \n    // Sugar dusting on top\n    color(color_sugar) {\n        sugar_texture(size, 10);\n    }\n    \n    // Side details - dulce de leche oozing out\n    for(i = [0:3]) {\n        rotate([0, 0, i*90]) {\n            translate([size/2 - 1, 0, height/2]) {\n                color(color_dulce) {\n                    rotate([90, 0, 0]) {\n                        cylinder(h=3, r=4, $fn=12);\n                    }\n                }\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "food_item": "dahi",
    "openscad_code": "// Realistic Dahi (Indian Yogurt) - Medium Complexity\n// Features: Curd texture with water separation, traditional clay bowl, and cumin garnish\n\n$fn = 64;  // Smooth curves for 3D printing\n\n// Main module\nmodule dahi() {\n    // Clay bowl\n    color([0.72, 0.52, 0.38]) {\n        difference() {\n            // Outer bowl\n            rotate_extrude(angle = 360) {\n                polygon(points = [\n                    [0, 0],\n                    [35, 0],\n                    [40, 10],\n                    [42, 30],\n                    [40, 50],\n                    [35, 55],\n                    [0, 55]\n                ]);\n            }\n            \n            // Inner cavity\n            rotate_extrude(angle = 360) {\n                polygon(points = [\n                    [0, 2],\n                    [33, 2],\n                    [37.5, 12],\n                    [39, 30],\n                    [37.5, 53],\n                    [33, 53],\n                    [0, 53]\n                ]);\n            }\n        }\n    }\n    \n    // Yogurt body\n    translate([0, 0, 52]) {\n        color([0.98, 0.95, 0.85]) {\n            difference() {\n                // Main yogurt volume\n                cylinder(h = 15, r1 = 36, r2 = 34, center = false);\n                \n                // Water separation layer (slight depression)\n                translate([0, 0, 0.5]) {\n                    cylinder(h = 1, r1 = 34, r2 = 32, center = false);\n                }\n            }\n            \n            // Curd texture using small spheres\n            for (i = [0:35]) {\n                for (j = [0:8]) {\n                    rotate([0, 0, i * 10]) {\n                        translate([j * 2 + 10, 0, 1 + sin(i * 20) * 0.5]) {\n                            sphere(r = 0.5 + sin(i * j) * 0.3);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Water layer on top\n        translate([0, 0, 0.2]) {\n            color([0.85, 0.93, 0.95], 0.6) {\n                cylinder(h = 0.5, r1 = 34, r2 = 34, center = false);\n            }\n        }\n    }\n    \n    // Cumin seeds garnish\n    module cuminSeed() {\n        color([0.35, 0.25, 0.15]) {\n            scale([1, 0.6, 0.3]) {\n                sphere(r = 1);\n            }\n        }\n    }\n    \n    // Randomly place cumin seeds\n    for (i = [1:20]) {\n        angle = rands(0, 360, 1)[0];\n        radius = rands(5, 28, 1)[0];\n        translate([cos(angle) * radius, sin(angle) * radius, 67.5]) {\n            rotate([0, 0, rands(0, 180, 1)[0]]) {\n                cuminSeed();\n            }\n        }\n    }\n    \n    // Bowl rim detail\n    translate([0, 0, 52]) {\n        color([0.65, 0.45, 0.32]) {\n            cylinder(h = 1.5, r1 = 37, r2 = 37, center = false);\n        }\n    }\n}\n\n// Render the complete dahi\ndahi();",
    "renders": true
  },
  {
    "food_item": "khoa",
    "openscad_code": "// Khoa (milk solids) - Indian dairy sweet\n// Model dimensions: 70mm x 50mm x 25mm\n\n$fn = 32;\n\n// Main khoa block with irregular top surface\nmodule khoa_block() {\n    color([0.95, 0.85, 0.75])  // Creamy off-white color\n    \n    // Base slab\n    difference() {\n        translate([0, 0, 12.5]) \n            cube([70, 50, 25], center = true);\n        \n        // Create irregular top surface\n        for (i = [0:15]) {\n            translate([\n                -35 + i * 5 + (i % 3) * 3, \n                -25 + (i * 7) % 50, \n                12\n            ]) {\n                scale([1, 1, 0.5])\n                    sphere(r = 3 + (i % 4));\n            }\n        }\n    }\n}\n\n// Texture pattern for khoa surface\nmodule khoa_texture() {\n    color([0.93, 0.83, 0.73])\n    \n    // Small bumps and ridges\n    for (x = [-30:5:30]) {\n        for (y = [-20:5:20]) {\n            if (abs(x) + abs(y) < 40) {\n                translate([x, y, 25.5]) {\n                    scale([1, 1, 0.3])\n                        sphere(r = 1 + (x+y) % 3);\n                }\n            }\n        }\n    }\n    \n    // Cracks and folds\n    for (i = [0:8]) {\n        rotate([0, 0, i * 20])\n        translate([0, -25 + i * 3, 26])\n            scale([0.5, 3 + i % 4, 0.5])\n            cylinder(h = 2, r1 = 1, r2 = 0.5);\n    }\n}\n\n// Edges with pressed texture\nmodule pressed_edges() {\n    color([0.92, 0.82, 0.72])\n    \n    // Front and back edges\n    for (edge = [-1, 1]) {\n        for (i = [0:6]) {\n            translate([\n                -30 + i * 10, \n                25 * edge, \n                12.5 + sin(i) * 2\n            ]) {\n                rotate([90 * (1 - edge), 0, 0])\n                    cylinder(h = 3, r1 = 2, r2 = 1.5);\n            }\n        }\n    }\n    \n    // Side edges\n    for (edge = [-1, 1]) {\n        for (i = [0:4]) {\n            translate([\n                35 * edge, \n                -20 + i * 10, \n                12.5 + cos(i) * 2\n            ]) {\n                rotate([0, 90 * (1 - edge), 0])\n                    cylinder(h = 3, r1 = 2, r2 = 1.5);\n            }\n        }\n    }\n}\n\n// Combine all parts\nunion() {\n    khoa_block();\n    khoa_texture();\n    pressed_edges();\n}\n\n// Small garnish pieces\nmodule garnish() {\n    color([0.96, 0.86, 0.76])\n    \n    for (i = [0:5]) {\n        translate([\n            -20 + i * 8, \n            -15 + (i % 2) * 30, \n            27 + (i % 3)\n        ]) {\n            scale([1.2, 1.2, 0.5])\n                sphere(r = 2);\n        }\n    }\n}\n\n// Add garnish\ngarnish();",
    "renders": true
  },
  {
    "food_item": "clarified",
    "openscad_code": "// Clarified butter (ghee) in a traditional Indian serving bowl\n// Overall dimensions: ~70mm diameter, ~40mm height\n\n$fn = 50;  // Smooth curves for realistic appearance\n\n// Golden yellow color for clarified butter\ncolor([1, 0.8, 0.2]) \ndifference() {\n    // Main clarified butter mass - slightly irregular top surface\n    union() {\n        // Base cylinder\n        cylinder(h = 25, r = 30, center = false);\n        \n        // Irregular top surface - melted appearance\n        for (i = [0:15]) {\n            translate([\n                sin(i * 24) * 20, \n                cos(i * 24) * 20, \n                25 + sin(i * 5) * 3\n            ]) {\n                sphere(r = 6 + sin(i * 3) * 2);\n            }\n        }\n        \n        // Surface tension curve at edges\n        translate([0, 0, 25]) {\n            cylinder(h = 5, r1 = 30, r2 = 28, center = false);\n        }\n    }\n    \n    // Spoon indentation on surface\n    translate([10, 0, 20]) {\n        rotate([90, 0, 0]) {\n            cylinder(h = 40, r = 5, center = false);\n        }\n    }\n}\n\n// Traditional brass serving bowl\ncolor([0.7, 0.5, 0.2]) \ndifference() {\n    union() {\n        // Bowl base\n        cylinder(h = 10, r = 35, center = false);\n        \n        // Bowl sides with slight curve\n        translate([0, 0, 10]) {\n            cylinder(h = 15, r1 = 35, r2 = 32, center = false);\n        }\n        \n        // Rim detail\n        translate([0, 0, 25]) {\n            cylinder(h = 3, r = 33, center = false);\n        }\n        \n        // Decorative rings\n        for (h = [5, 10, 15, 20]) {\n            translate([0, 0, h]) {\n                difference() {\n                    cylinder(h = 1, r = 35.5, center = false);\n                    cylinder(h = 1.1, r = 34.5, center = false);\n                }\n            }\n        }\n    }\n    \n    // Hollow interior\n    translate([0, 0, -1]) {\n        cylinder(h = 30, r = 30, center = false);\n    }\n}\n\n// Small butter bubbles on surface for realism\nfor (i = [0:8]) {\n    color([1, 0.9, 0.3]) \n    translate([\n        sin(i * 40) * (15 + sin(i * 3) * 10), \n        cos(i * 40) * (15 + cos(i * 3) * 10), \n        28 + sin(i * 5) * 2\n    ]) {\n        sphere(r = 1 + sin(i * 7) * 0.5);\n    }\n}\n\n// Tiny surface imperfections\nmodule surface_spot(x, y, z) {\n    color([1, 0.85, 0.25]) \n    translate([x, y, z]) {\n        sphere(r = 0.5);\n    }\n}\n\n// Apply surface spots\nsurface_spot(5, 12, 27);\nsurface_spot(-8, -15, 28);\nsurface_spot(20, -5, 26);\nsurface_spot(-18, 8, 27.5);\nsurface_spot(0, 20, 28.5);",
    "renders": true
  },
  {
    "food_item": "curds",
    "openscad_code": "// Cheese curds - realistic medium complexity\n// Uses only basic primitives, transformations, booleans, loops, modules\n\n$fn = 32;\n\n// Main module to generate cheese curds\nmodule cheese_curds() {\n    color([1, 0.9, 0.3])  // Bright yellow cheese color\n    \n    // Generate a pile of curds with varied sizes\n    for (i = [0:7]) {\n        translate([\n            sin(i * 137.5) * (i * 4 + 8),  // Spiral arrangement\n            cos(i * 137.5) * (i * 4 + 8),\n            0\n        ]) {\n            rotate([0, 0, i * 45])\n            single_curd(8 + i);  // Vary sizes slightly\n        }\n    }\n}\n\n// Generate a single cheese curd with irregular surface\nmodule single_curd(size) {\n    difference() {\n        // Main curd body - irregular block\n        scale([1 + 0.1 * sin(1), 1 + 0.1 * cos(2), 0.8 + 0.2 * sin(3)])\n        rounded_cube(size * 0.8, 2);\n        \n        // Surface texture - small dimples\n        for (x = [0:2]) {\n            for (y = [0:2]) {\n                for (z = [0:1]) {\n                    translate([\n                        (x - 1) * size * 0.3 + sin(x + y) * 2,\n                        (y - 1) * size * 0.3 + cos(x + z) * 2,\n                        z * size * 0.4\n                    ]) {\n                        sphere(r = 1.5);\n                    }\n                }\n            }\n        }\n        \n        // Cut edges to make more natural shape\n        translate([size * 0.4, 0, 0])\n            rotate([0, 0, 15])\n            cube([size, size, size * 2], center = true);\n            \n        translate([-size * 0.4, 0, 0])\n            rotate([0, 0, -15])\n            cube([size, size, size * 2], center = true);\n    }\n    \n    // Add surface bumps for texture\n    for (i = [0:15]) {\n        rotate([0, 0, i * 36])\n        translate([\n            (sin(i * 3) + 1) * size * 0.3,\n            (cos(i * 2) + 1) * size * 0.3,\n            size * 0.4\n        ]) {\n            sphere(r = 0.8 + sin(i) * 0.3);\n        }\n    }\n}\n\n// Helper module for rounded cube\nmodule rounded_cube(size, radius) {\n    hull() {\n        for (x = [-1, 1]) {\n            for (y = [-1, 1]) {\n                for (z = [-1, 1]) {\n                    translate([x * (size/2 - radius), \n                              y * (size/2 - radius), \n                              z * (size/2 - radius)])\n                        sphere(r = radius);\n                }\n            }\n        }\n    }\n}\n\n// Create the curds pile\ncheese_curds();",
    "renders": true
  },
  {
    "food_item": "custard",
    "openscad_code": "// Realistic 3D printable custard dessert\n// Features: creamy custard body, caramel layer on top, slight wobble texture, and a ramekin\n\n$fn = 48;\n\n// Main module for the custard\nmodule custard() {\n    // Ramekin base\n    color([0.9, 0.85, 0.8]) {\n        difference() {\n            cylinder(h = 25, r1 = 30, r2 = 35);\n            translate([0, 0, 2]) \n                cylinder(h = 25, r1 = 28, r2 = 33);\n        }\n    }\n    \n    // Custard body with slight wobble texture\n    color([1, 0.95, 0.85]) {\n        union() {\n            // Main custard\n            translate([0, 0, 25]) \n                cylinder(h = 15, r1 = 33, r2 = 32);\n            \n            // Wobble texture - small spheres for surface irregularity\n            for (i = [-30:5:30]) {\n                for (j = [-30:5:30]) {\n                    if (i*i + j*j < 900) {\n                        translate([i + rand(), j + rand(), 39 + rand()/2]) \n                            sphere(r = 0.5 + rand()/2);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Caramel layer on top\n    color([0.6, 0.35, 0.15]) {\n        translate([0, 0, 40]) \n            cylinder(h = 1.5, r1 = 32, r2 = 31.5);\n        \n        // Caramel drips down the sides\n        for (angle = [0:30:330]) {\n            rotate([0, 0, angle + rand()*10]) {\n                translate([28 + rand()*2, 0, 39]) \n                    rotate([90, 0, 90]) \n                        cylinder(h = 3 + rand()*2, r1 = 1.5, r2 = 0.5);\n            }\n        }\n    }\n    \n    // Vanilla bean specks\n    color([0.4, 0.3, 0.2]) {\n        for (i = [1:20]) {\n            translate([rand()*60 - 30, rand()*60 - 30, 30 + rand()*10]) \n                rotate([rand()*90, rand()*90, rand()*90]) \n                    cube([2, 0.3, 0.2], center = true);\n        }\n    }\n}\n\n// Helper function for random variation\nfunction rand(seed = undef) = \n    seed == undef ? rands(-1, 1, 1)[0] : rands(-1, 1, 1, seed)[0];\n\n// Render the custard\ncustard();",
    "renders": true
  },
  {
    "food_item": "panna",
    "openscad_code": "// Panna Cotta - Italian cooked cream dessert\n// Realistic style with medium complexity\n\n$fn = 50;\n\n// Main panna module\nmodule panna_cotta() {\n    // Dessert base - vanilla cream dome\n    color(\"antique_white\")\n    translate([0, 0, 5])\n    scale([1, 1, 0.8])\n    sphere(d = 60);\n    \n    // Top surface texture - slightly uneven\n    difference() {\n        translate([0, 0, 5])\n        scale([1, 1, 0.8])\n        sphere(d = 60);\n        \n        // Add small dents for realistic texture\n        for(i = [0:15]) {\n            rotate([0, 0, i * 24])\n            translate([random(5, 20), 0, random(45, 48)])\n            sphere(d = random(2, 4));\n        }\n    }\n    \n    // Caramel sauce layer on top\n    color([0.8, 0.4, 0.1, 0.8])\n    translate([0, 0, 48])\n    scale([0.9, 0.9, 0.1])\n    sphere(d = 55);\n    \n    // Dripping caramel details\n    for(i = [0:5]) {\n        angle = i * 60 + random(-10, 10);\n        radius = 25 + random(-5, 5);\n        \n        color([0.8, 0.4, 0.1, 0.9])\n        rotate([0, 0, angle])\n        translate([radius, 0, 48])\n        rotate([90, 0, 0])\n        cylinder(h1 = 3, h2 = 6, r1 = 2, r2 = 1);\n    }\n    \n    // Vanilla bean seeds on surface\n    color([0.3, 0.2, 0.1])\n    for(i = [0:8]) {\n        angle = random(0, 360);\n        dist = random(10, 25);\n        \n        rotate([0, 0, angle])\n        translate([dist, 0, 48.5])\n        rotate([random(-10, 10), 0, 0])\n        scale([random(0.8, 1.2), 0.3, 0.1])\n        cube([random(4, 7), 1, 1]);\n    }\n    \n    // Plate/base\n    color([0.9, 0.9, 0.9, 0.6])\n    difference() {\n        cylinder(h = 3, r = 35);\n        cylinder(h = 4, r = 25);\n    }\n}\n\n// Helper function for random values\nfunction random(min, max) = min + (max - min) * (rands(0, 1, 1)[0]);\n\n// Render the complete panna cotta\npanna_cotta();",
    "renders": true
  },
  {
    "food_item": "veloute",
    "openscad_code": "// Velouté (creamy soup) in a white bowl with garnish\n// Medium complexity realistic style\n\n// Main bowl\nmodule bowl() {\n    color([0.95, 0.95, 0.92]) {\n        // Outer bowl\n        difference() {\n            sphere(d = 70, $fn = 50);\n            translate([0, 0, 5]) sphere(d = 65, $fn = 50);\n        }\n        \n        // Inner bowl\n        difference() {\n            translate([0, 0, 5]) sphere(d = 60, $fn = 50);\n            translate([0, 0, 10]) sphere(d = 55, $fn = 50);\n        }\n        \n        // Base\n        cylinder(h = 8, d1 = 35, d2 = 30, $fn = 30);\n    }\n}\n\n// Soup liquid with slight surface curvature\nmodule soup_surface() {\n    color([0.97, 0.9, 0.75]) {\n        // Main soup body\n        difference() {\n            cylinder(h = 25, d = 55, $fn = 30);\n            translate([0, 0, 20]) cylinder(h = 10, d = 50, $fn = 30);\n        }\n        \n        // Slight meniscus curve\n        translate([0, 0, 24.5]) sphere(d = 55, $fn = 30);\n    }\n}\n\n// Oil droplets on surface\nmodule oil_droplets() {\n    color([0.85, 0.8, 0.4, 0.8]) {\n        for(i = [1:12]) {\n            rotate([0, 0, i * 30]) {\n                translate([rand(i * 10) * 20, rand(i * 10 + 5) * 15, 25.5]) \n                    scale([1, 1, 0.3]) sphere(d = 2, $fn = 8);\n            }\n        }\n    }\n}\n\n// Herb particles (chives)\nmodule chive_pieces() {\n    color([0.2, 0.5, 0.2]) {\n        for(i = [1:8]) {\n            rotate([0, 0, i * 45]) {\n                translate([rand(i * 5) * 18 - 9, rand(i * 5 + 3) * 18 - 9, 25.5]) \n                    rotate([90, 0, rand(i * 3) * 360]) \n                        cylinder(h = 1.5, d = 0.5, $fn = 6);\n            }\n        }\n    }\n}\n\n// Pepper cracks\nmodule pepper_crumbs() {\n    color([0.1, 0.1, 0.1]) {\n        for(i = [1:6]) {\n            rotate([0, 0, i * 60]) {\n                translate([rand(i * 7) * 16 - 8, rand(i * 7 + 2) * 16 - 8, 25.6]) \n                    sphere(d = 0.8, $fn = 4);\n            }\n        }\n    }\n}\n\n// Cream swirl\nmodule cream_swirl() {\n    color([0.98, 0.98, 0.95]) {\n        for(i = [0:5:30]) {\n            rotate([0, 0, i]) {\n                translate([15 - i * 0.3, 0, 25.8]) \n                    scale([0.8, 0.4, 0.2]) sphere(d = 3, $fn = 8);\n            }\n        }\n    }\n}\n\n// Steam effect (thin vertical cylinders)\nmodule steam() {\n    color([1, 1, 1, 0.3]) {\n        for(i = [1:4]) {\n            rotate([0, 0, i * 90]) {\n                translate([rand(i * 3) * 10 - 5, rand(i * 3 + 1) * 10 - 5, 26]) \n                    cylinder(h = rand(i * 2) * 5 + 3, d = 0.5, $fn = 4);\n            }\n        }\n    }\n}\n\n// Assembly\nbowl();\ntranslate([0, 0, -5]) soup_surface();\noil_droplets();\nchive_pieces();\npepper_crumbs();\ncream_swirl();\nsteam();",
    "renders": true
  },
  {
    "food_item": "bechamel",
    "openscad_code": "// Bechamel sauce in realistic style - 3D printable\n// Approx 80mm wide, 15mm thick, with spoon marks and surface texture\n\n// Main sauce puddle\nmodule sauce_body() {\n    color(\"beige\") \n    difference() {\n        // Main puddle shape\n        scale([1, 0.7, 0.15]) \n        sphere(d = 80, $fn = 64);\n        \n        // Flatten bottom\n        translate([0, 0, -6])\n        cube([100, 100, 12], center = true);\n        \n        // Cut edges to make irregular shape\n        for(i = [0:5]) {\n            rotate([0, 0, i * 60 + 30])\n            translate([45, 0, -6])\n            cube([20, 20, 12], center = true);\n        }\n    }\n}\n\n// Surface bubbles from simmering\nmodule bubbles() {\n    for(i = [0:12]) {\n        rotate([0, 0, i * 137.5])\n        translate([random(0, 25), random(0, 25), 0])\n        translate([random(-10, 10), random(-10, 10), 0])\n        color(\"ivory\") {\n            translate([0, 0, 1.5])\n            sphere(d = random(2, 4), $fn = 16);\n        }\n    }\n}\n\n// Spoon drag marks\nmodule spoon_marks() {\n    color(\"antiquewhite\")\n    for(i = [0:3]) {\n        rotate([0, 0, i * 45])\n        translate([random(-15, 15), random(-15, 15), 1.2])\n        scale([1, random(0.3, 0.6), 0.1])\n        cylinder(h = random(25, 40), d = 8, $fn = 16);\n    }\n}\n\n// Thicker sauce ridges\nmodule ridges() {\n    for(i = [0:7]) {\n        angle = i * 51.4;\n        radius = 15 + random(-5, 5);\n        \n        rotate([0, 0, angle])\n        translate([radius, 0, 1.8])\n        scale([1, 0.3, 0.2])\n        color(\"cornsilk\")\n        sphere(d = random(8, 12), $fn = 16);\n    }\n}\n\n// Create the bechamel\nunion() {\n    sauce_body();\n    bubbles();\n    spoon_marks();\n    ridges();\n}",
    "renders": true
  },
  {
    "food_item": "mornay",
    "openscad_code": "// Mornay (Cheese Sauce) in a Small Casserole Dish\n// Realistic style, medium complexity\n\n$fn = 50;\n\n// Main colors\ncolor_beige = [0.96, 0.90, 0.76];\ncolor_cheese = [0.96, 0.75, 0.30];\ncolor_golden = [0.95, 0.85, 0.45];\ncolor_dish = [0.85, 0.85, 0.85];\n\n// Casserole dish\nmodule casserole_dish() {\n    color(color_dish) {\n        difference() {\n            // Outer bowl\n            cylinder(h = 20, r1 = 30, r2 = 25);\n            \n            // Hollow inside\n            translate([0, 0, 2])\n                cylinder(h = 18, r1 = 27, r2 = 22);\n        }\n        \n        // Rim\n        translate([0, 0, 20])\n            cylinder(h = 3, r1 = 30, r2 = 30);\n    }\n}\n\n// Cheese sauce base\nmodule cheese_sauce() {\n    color(color_cheese) {\n        // Main sauce body\n        translate([0, 0, 5])\n            cylinder(h = 15, r1 = 27, r2 = 22);\n    }\n}\n\n// Bubbly cheese surface\nmodule cheese_surface() {\n    color(color_golden) {\n        // Random bubbles on surface\n        for(i = [1:20]) {\n            translate([\n                (sin(i * 73) * 20),\n                (cos(i * 73) * 20),\n                20\n            ]) {\n                sphere(r = 1 + sin(i * 5) * 0.5);\n            }\n        }\n        \n        // Larger bubbles\n        for(i = [1:8]) {\n            translate([\n                (sin(i * 137) * 15),\n                (cos(i * 137) * 15),\n                20.5\n            ]) {\n                sphere(r = 1.5 + sin(i * 7) * 0.8);\n            }\n        }\n    }\n}\n\n// Gratin crust pattern\nmodule gratin_crust() {\n    color(color_golden) {\n        // Thin crust layer\n        translate([0, 0, 19.8])\n            cylinder(h = 0.5, r1 = 27, r2 = 22);\n            \n        // Crust cracks and texture\n        for(angle = [0:30:359]) {\n            rotate([0, 0, angle])\n                translate([10, 0, 20.3])\n                    cube([20, 0.5, 0.3]);\n        }\n        \n        // Brown spots\n        for(i = [1:12]) {\n            color([0.8, 0.6, 0.25]) {\n                translate([\n                    (sin(i * 97) * 18),\n                    (cos(i * 97) * 18),\n                    20.4\n                ]) {\n                    sphere(r = 0.8);\n                }\n            }\n        }\n    }\n}\n\n// Steam effect\nmodule steam() {\n    color([1, 1, 1, 0.3]) {\n        for(i = [1:5]) {\n            translate([\n                sin(i * 47) * 5,\n                cos(i * 47) * 5,\n                21 + i * 2\n            ]) {\n                sphere(r = 1.5 - i * 0.2);\n            }\n        }\n    }\n}\n\n// Assembly\ncasserole_dish();\ncheese_sauce();\ncheese_surface();\ngratin_crust();\nsteam();",
    "renders": true
  },
  {
    "food_item": "velouté",
    "openscad_code": "// Velouté soup bowl with swirl and garnish\n// Overall dimensions: ~70mm diameter, 60mm height\n\n// Main bowl\ndifference() {\n    // Outer bowl\n    color(\"cornsilk\")\n    cylinder(h=40, d=70, $fn=64);\n    \n    // Inner cavity\n    translate([0, 0, 5])\n    cylinder(h=38, d=66, $fn=64);\n}\n\n// Base ring for stability\ntranslate([0, 0, -5])\ncolor(\"burlywood\")\ncylinder(h=8, d=50, $fn=64);\n\n// Velouté soup body with swirl\nmodule soup_swirl() {\n    // Base soup level\n    translate([0, 0, 15])\n    color(\"lemonchiffon\")\n    cylinder(h=20, d=60, $fn=64);\n    \n    // Central swirl peak\n    translate([0, 0, 35])\n    color(\"ivory\")\n    sphere(d=25, $fn=32);\n    \n    // Swirl ridges\n    for(i=[0:15:359]) {\n        rotate([0, 0, i])\n        translate([15, 0, 32])\n        rotate([90, 0, 0])\n        scale([1, 1, 0.3])\n        color(\"ivory\")\n        cylinder(h=15, d=8, $fn=16);\n    }\n}\n\nsoup_swirl();\n\n// Garnish - parsley leaves\nmodule parsley_leaf(x, y, rot) {\n    translate([x, y, 42])\n    rotate([0, 0, rot])\n    scale([0.8, 0.5, 0.2])\n    color(\"forestgreen\")\n    sphere(d=8, $fn=16);\n}\n\n// Place 5 parsley leaves\nparsley_leaf(10, 10, 30);\nparsley_leaf(-8, 12, 120);\nparsley_leaf(12, -5, 200);\nparsley_leaf(-10, -8, 270);\nparsley_leaf(0, 15, 45);\n\n// Garnish - chive pieces\nmodule chive_piece(x, y, rot) {\n    translate([x, y, 43])\n    rotate([0, 0, rot])\n    scale([0.1, 0.1, 1])\n    color(\"darkgreen\")\n    cylinder(h=8, d=3, $fn=8);\n}\n\n// Place chive pieces\nfor(i=[0:30:359]) {\n    rotate([0, 0, i])\n    translate([5, 0, 0])\n    chive_piece(0, 0, i);\n}\n\n// Pepper cracks for texture\nmodule pepper_crack(x, y, z) {\n    translate([x, y, z])\n    scale([0.2, 0.2, 0.1])\n    color(\"gray20\")\n    sphere(d=2, $fn=8);\n}\n\n// Distribute pepper cracks on soup surface\nfor(i=[0:20:359]) {\n    rotate([0, 0, i])\n    translate([random(0, 20), 0, 30 + random(-2, 5)])\n    pepper_crack(0, 0, 0);\n}",
    "renders": true
  },
  {
    "food_item": "anglaise",
    "openscad_code": "// Realistic Anglaise (English Muffin) - Medium Complexity\n// Overall size: ~80mm diameter, 25mm thick\n\n$fn = 32;\n\n// Muffin color\ncolor([0.9, 0.75, 0.55]) {\n    // Main muffin body\n    difference() {\n        // Base cylinder with rounded edges\n        union() {\n            cylinder(h = 20, r1 = 40, r2 = 38);\n            translate([0, 0, 20])\n                cylinder(h = 5, r1 = 38, r2 = 40);\n        }\n        \n        // Top craters\n        for (i = [0:7]) {\n            angle = i * 45;\n            radius = 10 + (i % 2) * 5;\n            translate([\n                cos(angle) * radius,\n                sin(angle) * radius,\n                22\n            ]) {\n                sphere(r = 6);\n            }\n        }\n        \n        // Side holes\n        for (i = [0:11]) {\n            angle = i * 30;\n            translate([\n                cos(angle) * 38,\n                sin(angle) * 38,\n                10\n            ]) {\n                rotate([0, 90, angle])\n                    cylinder(h = 15, r = 3, center = true);\n            }\n        }\n        \n        // Bottom texture\n        for (x = [-35:10:35]) {\n            for (y = [-35:10:35]) {\n                translate([x, y, -1])\n                    cylinder(h = 5, r = 2);\n            }\n        }\n    }\n    \n    // Cornmeal coating\n    color([0.95, 0.85, 0.6]) {\n        for (i = [0:200]) {\n            theta = rands(0, 360, 1)[0];\n            phi = rands(0, 180, 1)[0];\n            r = rands(39, 42, 1)[0];\n            z = rands(0, 25, 1)[0];\n            \n            translate([\n                cos(theta) * sin(phi) * r,\n                sin(theta) * sin(phi) * r,\n                z\n            ]) {\n                sphere(r = 0.5 + rands(0, 0.3, 1)[0], $fn = 6);\n            }\n        }\n    }\n    \n    // Split line\n    color([0.8, 0.65, 0.45]) {\n        translate([0, 0, 12.5])\n            difference() {\n                cylinder(h = 1, r = 40);\n                cylinder(h = 2, r = 35);\n            }\n    }\n    \n    // Nooks and crannies interior texture\n    module interior_texture() {\n        for (i = [0:15]) {\n            translate([\n                rands(-30, 30, 1)[0],\n                rands(-30, 30, 1)[0],\n                rands(0, 12, 1)[0]\n            ]) {\n                sphere(r = rands(2, 5, 1)[0]);\n            }\n        }\n    }\n    \n    // Top half interior\n    translate([0, 0, 12.5])\n        interior_texture();\n    \n    // Bottom half interior\n    translate([0, 0, 0])\n        interior_texture();\n}",
    "renders": true
  },
  {
    "food_item": "sabayon",
    "openscad_code": "// Realistic Sabayon dessert in a glass\n// Overall size: ~60mm tall, 35mm diameter\n// Features: glass cup, frothy sabayon, spoon, slight surface bubbles\n\n// Colors\nglass_color = [220/255, 240/255, 255/255, 0.5];\nsabayon_color = [255/255, 245/255, 200/255];\nspoon_color = [220/255, 220/255, 220/255];\n\n// Main assembly\ndifference() {\n    // Glass cup\n    color(glass_color)\n    translate([0, 0, -5])\n    union() {\n        // Cup body - hollow cylinder\n        difference() {\n            cylinder(h = 45, r1 = 17.5, r2 = 14, $fn = 32);\n            translate([0, 0, 1])\n            cylinder(h = 44, r1 = 16, r2 = 12.5, $fn = 32);\n        }\n        \n        // Base\n        cylinder(h = 4, r = 17.5, $fn = 32);\n        \n        // Rim lip\n        translate([0, 0, 45])\n        cylinder(h = 3, r1 = 17.5, r2 = 18, $fn = 32);\n    }\n    \n    // Interior space for sabayon\n    translate([0, 0, 5])\n    cylinder(h = 38, r1 = 15.5, r2 = 12, $fn = 32);\n}\n\n// Sabayon foam - main body\ncolor(sabayon_color)\ntranslate([0, 0, 0])\nunion() {\n    // Base layer\n    difference() {\n        cylinder(h = 32, r1 = 15, r2 = 11.5, $fn = 32);\n        translate([0, 0, 25])\n        sphere(d = 22);\n    }\n    \n    // Foam peaks using spheres\n    for(i = [0:8]) {\n        angle = i * 45;\n        radius = 6 + sin(i * 30) * 2;\n        translate([\n            cos(angle) * radius * 0.6,\n            sin(angle) * radius * 0.6,\n            28 + sin(i * 20) * 3\n        ])\n        scale([1.2, 1.2, 1.5])\n        sphere(d = 4 + sin(i * 25) * 2, $fn = 16);\n    }\n    \n    // Central peak\n    translate([0, 0, 30])\n    scale([1, 1, 1.8])\n    sphere(d = 8, $fn = 16);\n}\n\n// Small surface bubbles\nfor(i = [0:15]) {\n    angle = i * 137.5;\n    radius = 3 + pow(i, 0.7) * 2;\n    h = 30 + sin(i * 42) * 2;\n    \n    translate([\n        cos(angle) * min(radius, 12),\n        sin(angle) * min(radius, 12),\n        h\n    ])\n    scale([1, 1, 0.7])\n    sphere(d = 0.5 + sin(i * 25) * 0.3, $fn = 8);\n}\n\n// Spoon\ncolor(spoon_color)\ntranslate([20, 0, 35])\nrotate([0, 90, 45])\nunion() {\n    // Handle\n    translate([0, 0, -25])\n    rotate([90, 0, 0])\n    cylinder(h = 45, r1 = 1.5, r2 = 1, $fn = 16);\n    \n    // Bowl\n    translate([0, 0, 0])\n    rotate([0, 90, 0])\n    difference() {\n        scale([1, 1, 0.4])\n        sphere(d = 12, $fn = 32);\n        translate([0, 0, -0.5])\n        cube([20, 20, 4], center = true);\n    }\n}\n\n// Add some drips on glass edge for realism\ncolor(sabayon_color)\ntranslate([0, 15.5, 42])\nrotate([90, 0, 0])\ncylinder(h = 3, r1 = 2, r2 = 0.5, $fn = 8);\n\ntranslate([15.5, 0, 42])\nrotate([90, 0, 90])\ncylinder(h = 2.5, r1 = 1.5, r2 = 0.5, $fn = 8);",
    "renders": true
  },
  {
    "food_item": "zabaglione",
    "openscad_code": "// Zabaglione 3D model - Realistic style, medium complexity\n// A traditional Italian dessert served in a stemmed glass\n\n// Colors\n$fa = 1; $fs = 0.4;\n\n// Main stemmed glass module\nmodule stemmed_glass() {\n    // Glass bowl (main container)\n    color([0.9, 0.95, 1.0, 0.4]) difference() {\n        sphere(d=50);\n        translate([0, 0, 5]) scale([0.9, 0.9, 0.8]) sphere(d=48);\n    }\n    \n    // Glass stem\n    color([0.9, 0.95, 1.0, 0.5]) cylinder(h=35, d1=15, d2=8);\n    \n    // Glass base\n    color([0.9, 0.95, 1.0, 0.5]) cylinder(h=5, d=35);\n}\n\n// Zabaglione foam texture\nmodule foam_bubble(x, y, z) {\n    color([0.98, 0.92, 0.75, 0.9]) {\n        translate([x, y, z]) sphere(d=rand(3, 6));\n    }\n}\n\n// Generate random bubbles\nfunction rand(min, max) = min + rands(0, 1, 1)[0] * (max - min);\n\n// Zabaglione body\nmodule zabaglione_body() {\n    color([0.96, 0.85, 0.65, 0.9]) {\n        // Main custard body with slight dome\n        translate([0, 0, 5]) scale([1, 1, 0.7]) sphere(d=45);\n        \n        // Additional layers for thickness\n        translate([0, 0, 2]) scale([0.9, 0.9, 0.5]) sphere(d=42);\n    }\n}\n\n// Foam layer on top\nmodule foam_layer() {\n    for(i = [0:80]) {\n        foam_bubble(\n            rand(-20, 20), \n            rand(-20, 20), \n            rand(18, 25)\n        );\n    }\n}\n\n// Vanilla seeds\nmodule vanilla_seeds() {\n    color([0.2, 0.15, 0.05]) {\n        for(i = [0:30]) {\n            translate([rand(-15, 15), rand(-15, 15), rand(10, 15)]) \n            rotate([90, 0, rand(0, 360)]) \n            scale([0.5, 0.5, 5]) \n            cylinder(d=0.3, h=1);\n        }\n    }\n}\n\n// Garnish - mint leaf\nmodule mint_leaf() {\n    color([0.2, 0.6, 0.3]) {\n        translate([15, 10, 25]) rotate([0, 0, 45]) {\n            difference() {\n                scale([1, 0.6, 0.2]) sphere(d=8);\n                translate([0, 2, 0]) scale([0.8, 0.8, 1]) sphere(d=7);\n            }\n        }\n    }\n}\n\n// Main assembly\nstemmed_glass();\nzabaglione_body();\nfoam_layer();\nvanilla_seeds();\nmint_leaf();",
    "renders": true
  },
  {
    "food_item": "mayonnaise",
    "openscad_code": "// Mayonnaise jar with contents - realistic style, medium complexity\n// 3D printable model, no overhangs, proper wall thickness\n\n$fn = 32;\n\n// Main colors\njar_color = [0.95, 0.95, 0.95, 0.7]; // translucent white\nlid_color = [0.2, 0.2, 0.2]; // dark gray\nmayo_color = [0.98, 0.95, 0.85]; // off-white mayo\nlabel_color = [0.9, 0.2, 0.2]; // red label\n\nmodule jar_body() {\n    difference() {\n        // Outer jar\n        cylinder(h = 60, r1 = 25, r2 = 22);\n        \n        // Hollow inside\n        translate([0, 0, 2])\n            cylinder(h = 58, r1 = 23, r2 = 20);\n    }\n}\n\nmodule jar_threads() {\n    // Screw threads for lid\n    for (i = [0:5:35]) {\n        translate([0, 0, i])\n            difference() {\n                cylinder(h = 3, r = 26);\n                cylinder(h = 3, r = 24.5);\n            }\n    }\n}\n\nmodule jar_base() {\n    // Thickened base\n    cylinder(h = 4, r1 = 27, r2 = 25);\n}\n\nmodule jar_complete() {\n    union() {\n        // Base\n        jar_base();\n        \n        // Main jar body\n        translate([0, 0, 4])\n            jar_body();\n        \n        // Threads\n        translate([0, 0, 64])\n            jar_threads();\n    }\n}\n\nmodule mayo_contents() {\n    // Mayo visible inside jar\n    translate([0, 0, 4])\n        cylinder(h = 55, r1 = 22, r2 = 19.5);\n}\n\nmodule lid() {\n    difference() {\n        // Main lid\n        cylinder(h = 12, r1 = 28, r2 = 26);\n        \n        // Inner hollow\n        translate([0, 0, 2])\n            cylinder(h = 10, r = 25);\n        \n        // Thread grooves\n        for (i = [0:5:35]) {\n            translate([0, 0, 64 - i])\n                cylinder(h = 3, r = 25.5);\n        }\n    }\n}\n\nmodule label() {\n    // Wraparound label\n    rotate([90, 0, 0])\n        translate([0, -26, 30])\n            linear_extrude(height = 0.3)\n                square([40, 20], center = true);\n}\n\nmodule mayo_texture() {\n    // Surface texture for mayo\n    for (i = [0:5:360]) {\n        rotate([0, 0, i])\n            translate([15, 0, 0])\n                scale([0.1, 0.1, 1])\n                    sphere(r = 0.5);\n    }\n}\n\n// Assembly\nunion() {\n    // Jar with translucent material\n    color(jar_color)\n        jar_complete();\n    \n    // Mayo inside\n    color(mayo_color)\n        mayo_contents();\n    \n    // Mayo surface texture\n    translate([0, 0, 59])\n        color(mayo_color)\n            mayo_texture();\n    \n    // Lid on top\n    translate([0, 0, 72])\n        color(lid_color)\n            lid();\n    \n    // Label on jar\n    translate([0, 0, 35])\n        color(label_color)\n            label();\n}",
    "renders": true
  },
  {
    "food_item": "aioli",
    "openscad_code": "// Aioli 3D model - realistic style, medium complexity\n// A small bowl of garlic aioli with visible garlic pieces and swirl texture\n\n$fn = 32;\n\n// Main colors\naioli_color = [1, 0.98, 0.85];      // Creamy off-white\ngarlic_color = [0.9, 0.9, 0.85];    // Slightly yellowish white\nbowl_color = [0.95, 0.95, 0.95];    // Ceramic white\nrim_color = [0.9, 0.9, 0.9];        // Slightly darker rim\n\n// Bowl module\nmodule bowl() {\n    // Outer bowl\n    difference() {\n        // Main bowl shape\n        rotate_extrude(angle = 360) {\n            polygon(points = [\n                [0, 0],\n                [20, 0],\n                [25, 5],\n                [27, 15],\n                [25, 25],\n                [0, 25]\n            ]);\n        }\n        \n        // Inner cavity\n        translate([0, 0, 1])\n        rotate_extrude(angle = 360) {\n            polygon(points = [\n                [0, 2],\n                [18, 2],\n                [23, 7],\n                [23, 24],\n                [0, 24]\n            ]);\n        }\n    }\n    \n    // Bowl rim\n    translate([0, 0, 25])\n    cylinder(h = 1, r1 = 25, r2 = 25);\n    \n    // Bowl base\n    translate([0, 0, -1])\n    cylinder(h = 1, r1 = 20, r2 = 20);\n}\n\n// Garlic chunk module\nmodule garlic_chunk(size) {\n    color(garlic_color)\n    scale([1, 1, 0.7])\n    sphere(r = size);\n}\n\n// Aioli swirl texture module\nmodule swirl_texture() {\n    color(aioli_color) {\n        // Main aioli body\n        difference() {\n            cylinder(h = 20, r = 22);\n            translate([0, 0, 19])\n            cylinder(h = 1, r = 20);\n        }\n        \n        // Swirl pattern using rotated cylinders\n        for (i = [0:15:360]) {\n            rotate([0, 0, i])\n            translate([10, 0, 10])\n            rotate([90, 0, 0])\n            cylinder(h = 20, r = 3);\n        }\n        \n        // Smaller swirls\n        for (i = [7.5:15:360]) {\n            rotate([0, 0, i])\n            translate([7, 0, 12])\n            rotate([90, 0, 0])\n            cylinder(h = 15, r = 2);\n        }\n    }\n}\n\n// Garlic pieces module\nmodule garlic_pieces() {\n    // Randomly placed garlic chunks on surface\n    for (i = [0:4]) {\n        angle = i * 72 + 15;\n        radius = 8 + sin(i * 3) * 5;\n        x_pos = cos(angle) * radius;\n        y_pos = sin(angle) * radius;\n        \n        translate([x_pos, y_pos, 18])\n        garlic_chunk(1 + sin(i * 2) * 0.5);\n    }\n    \n    // Additional smaller pieces\n    for (i = [0:9]) {\n        angle = i * 36 + 5;\n        radius = 12 + cos(i * 2) * 3;\n        x_pos = cos(angle) * radius;\n        y_pos = sin(angle) * radius;\n        \n        translate([x_pos, y_pos, 18.5])\n        garlic_chunk(0.5 + cos(i) * 0.3);\n    }\n}\n\n// Main assembly\ntranslate([0, 0, 0]) {\n    // Bowl\n    color(bowl_color)\n    bowl();\n    \n    // Aioli in bowl\n    translate([0, 0, 5]) {\n        swirl_texture();\n        garlic_pieces();\n    }\n    \n    // Surface highlights\n    color([1, 1, 0.9])\n    translate([5, -5, 20])\n    sphere(r = 3);\n    \n    translate([-3, 7, 20])\n    sphere(r = 2);\n}",
    "renders": true
  },
  {
    "food_item": "hollandaise",
    "openscad_code": "// Hollandaise Sauce in Realistic Style - Medium Complexity\n// 3D printable model with characteristic texture and color\n\n// Main color - pale yellow\ncolor([1, 0.9, 0.7]) \n\n// Main sauce body\ndifference() {\n    union() {\n        // Base sauce pool\n        translate([0, 0, 1]) {\n            cylinder(h = 8, r = 25, $fn = 32);\n        }\n        \n        // Main sauce mound\n        translate([0, 0, 8]) {\n            sphere(r = 20, $fn = 32);\n        }\n        \n        // Additional sauce drips\n        for(i = [0:5]) {\n            rotate([0, 0, i * 60]) {\n                translate([15 + sin(i*30)*3, 0, 5]) {\n                    scale([1, 0.7, 1.2]) \n                    sphere(r = 6, $fn = 16);\n                }\n            }\n        }\n    }\n    \n    // Hollow out center for printability\n    translate([0, 0, -5]) {\n        cylinder(h = 30, r = 18, $fn = 32);\n    }\n    \n    // Create pour spout indentation\n    translate([0, 22, 10]) {\n        rotate([90, 0, 0]) {\n            cylinder(h = 15, r1 = 8, r2 = 5, $fn = 16);\n        }\n    }\n}\n\n// Surface texture - small bumps for foam\nmodule sauce_bumps() {\n    for(i = [0:15]) {\n        for(j = [0:15]) {\n            translate([\n                -20 + i * 2.5 + sin(i*j)*0.5,\n                -20 + j * 2.5 + cos(i*j)*0.5,\n                18 + sin(i+j)*0.3\n            ]) {\n                sphere(r = 0.8 + sin(i)*0.3, $fn = 8);\n            }\n        }\n    }\n}\n\ncolor([1, 0.95, 0.75]) \nsauce_bumps();\n\n// Butter streaks\nmodule butter_streaks() {\n    color([1, 0.85, 0.6]) \n    for(i = [0:8]) {\n        rotate([0, 0, i * 45]) {\n            translate([\n                sin(i*15) * 12,\n                cos(i*15) * 12,\n                15 + i*0.5\n            ]) {\n                scale([0.3, 5 + i*0.5, 0.1])\n                rotate([90, 0, 0])\n                cylinder(h = 3, r = 1, $fn = 8);\n            }\n        }\n    }\n}\n\nbutter_streaks();\n\n// Lemon zest flecks\nmodule lemon_zest() {\n    color([0.9, 0.8, 0.5]) \n    for(i = [0:20]) {\n        translate([\n            sin(i*137.5) * 15,\n            cos(i*137.5) * 15,\n            16 + sin(i*73.2)*2\n        ]) {\n            rotate([0, 0, i*73.2])\n            scale([0.2, 1.5, 0.1])\n            cube([1, 1, 1], center = true);\n        }\n    }\n}\n\nlemon_zest();\n\n// Glossy surface highlights\nmodule highlights() {\n    color([1, 1, 0.9]) {\n        translate([-5, -5, 22]) {\n            scale([1, 0.5, 0.1])\n            sphere(r = 8, $fn = 16);\n        }\n        \n        translate([7, 8, 21]) {\n            scale([0.8, 0.4, 0.05])\n            sphere(r = 5, $fn = 16);\n        }\n    }\n}\n\nhighlights();",
    "renders": true
  },
  {
    "food_item": "bearnaise",
    "openscad_code": "// Bearnaise Sauce with Steak - Realistic Style\n// Medium complexity 3D printable model\n\n// Colors\ncolor_bearnaise = [1, 0.9, 0.7];\ncolor_steak = [0.4, 0.2, 0.1];\ncolor_tarragon = [0.2, 0.5, 0.2];\n\n// Main module\nmodule bearnaise_steak() {\n    // Steak base\n    translate([0, 0, 0]) \n        steak();\n    \n    // Bearnaise sauce pool\n    translate([0, 0, 8]) \n        sauce_pool();\n    \n    // Sauce drips\n    for(i = [0:8]) {\n        rotate([0, 0, i * 45])\n            translate([12 + sin(i * 30) * 3, 0, 8])\n                sauce_drip();\n    }\n    \n    // Tarragon leaves\n    for(i = [0:15]) {\n        rotate([0, 0, i * 24])\n            translate([8 + cos(i * 45) * 5, 8 + sin(i * 45) * 5, 9])\n                tarragon_leaf();\n    }\n}\n\n// Steak module - oval with grill marks\nmodule steak() {\n    color(color_steak)\n    union() {\n        // Main steak body\n        scale([1.2, 0.8, 1])\n            sphere(15, $fn=32);\n        \n        // Grill marks\n        for(i = [-3:3]) {\n            translate([i * 4, -20, 12])\n                rotate([0, 90, 0])\n                    cylinder(h=40, r=0.5, $fn=8);\n        }\n        \n        for(i = [-2:2]) {\n            translate([-20, i * 4, 12])\n                rotate([90, 0, 0])\n                    cylinder(h=40, r=0.5, $fn=8);\n        }\n    }\n}\n\n// Sauce pool - organic puddle shape\nmodule sauce_pool() {\n    color(color_bearnaise)\n    difference() {\n        // Main sauce body\n        scale([1.3, 1.1, 0.4])\n            sphere(12, $fn=32);\n        \n        // Wavy edges for realism\n        for(i = [0:12]) {\n            rotate([0, 0, i * 30])\n                translate([8 + sin(i * 5) * 2, 0, 0])\n                    scale([0.3, 0.3, 1])\n                        sphere(10 - i * 0.5, $fn=8);\n        }\n    }\n}\n\n// Sauce drip - tapered cylinder\nmodule sauce_drip() {\n    color(color_bearnaise)\n    union() {\n        // Main drip body\n        cylinder(h1=6, h2=4, r1=2, r2=1, $fn=8);\n        \n        // Slight bulge at bottom\n        translate([0, 0, 4])\n            sphere(1.2, $fn=8);\n    }\n}\n\n// Tarragon leaf - small oval shapes\nmodule tarragon_leaf() {\n    color(color_tarragon)\n    rotate([90, 0, 0])\n        scale([0.8, 0.3, 1])\n            cylinder(h=0.5, r=2, $fn=6);\n}\n\n// Render the complete model\nbearnaise_steak();",
    "renders": true
  },
  {
    "food_item": "mousse",
    "openscad_code": "// Realistic Mousse Dessert - Medium Complexity\n// A classic chocolate mousse in a glass dish with whipped cream topping\n\n// Color definitions\n$fn = 32;\n\n// Main module\nmodule mousse_dessert() {\n    // Glass dish\n    color([0.9, 0.95, 1.0], 0.5) glass_dish();\n    \n    // Mousse body\n    color([0.4, 0.2, 0.1]) mousse_body();\n    \n    // Whipped cream topping\n    color([1, 1, 1], 0.9) whipped_cream();\n    \n    // Chocolate shavings\n    color([0.3, 0.15, 0.05]) chocolate_shavings();\n}\n\n// Glass dish\nmodule glass_dish() {\n    difference() {\n        // Outer glass\n        cylinder(h = 25, r1 = 25, r2 = 20, center = false);\n        \n        // Hollow inside\n        translate([0, 0, 2])\n            cylinder(h = 23, r1 = 23, r2 = 18, center = false);\n    }\n    \n    // Glass base\n    translate([0, 0, -2])\n        cylinder(h = 3, r1 = 20, r2 = 20, center = false);\n}\n\n// Mousse body with air bubbles and texture\nmodule mousse_body() {\n    // Main mousse volume\n    difference() {\n        translate([0, 0, 2])\n            cylinder(h = 15, r1 = 23, r2 = 18, center = false);\n        \n        // Air bubbles for texture\n        for(i = [1:12]) {\n            translate([\n                sin(i * 30) * 15,\n                cos(i * 30) * 15,\n                5 + i * 0.8\n            ])\n                sphere(r = 1 + (i % 3));\n        }\n        \n        // Scoop marks\n        for(i = [1:6]) {\n            rotate([0, 0, i * 60])\n                translate([10, 0, 8 + i * 1.2])\n                    sphere(r = 2.5);\n        }\n    }\n}\n\n// Whipped cream rosettes\nmodule whipped_cream() {\n    // Central swirl\n    translate([0, 0, 17])\n        rotate_extrude(angle = 360, $fn = 32)\n            translate([8, 0, 0])\n                circle(r = 2);\n    \n    // Side rosettes\n    for(i = [1:5]) {\n        rotate([0, 0, i * 72])\n            translate([8, 0, 16])\n                rotate([20, 0, 0])\n                    cylinder(h = 3, r1 = 3, r2 = 1, center = false);\n    }\n    \n    // Peak detail\n    translate([0, 0, 20])\n        sphere(r = 2);\n}\n\n// Chocolate shavings\nmodule chocolate_shavings() {\n    for(i = [1:8]) {\n        rotate([0, 0, i * 45])\n            translate([sin(i * 30) * 5, cos(i * 30) * 5, 20])\n                scale([1, 0.2, 0.1])\n                    rotate([0, 0, i * 20])\n                        cube([4, 2, 0.5], center = true);\n    }\n    \n    // Central curl\n    translate([0, 0, 22])\n        rotate([90, 0, 0])\n            scale([0.3, 0.3, 1])\n                cylinder(h = 5, r1 = 1, r2 = 0.5, center = false);\n}\n\n// Render the dessert\nmousse_dessert();",
    "renders": true
  },
  {
    "food_item": "flan",
    "openscad_code": "// Realistic Flan\n// Total height ~40 mm, diameter ~70 mm – safe to print on FDM without supports\n\n/* color constants */\ncaramel = [111/255, 66/255, 40/255];\ncustard = [255/255, 242/255, 204/255];\nvanilla = [255/255, 253/255, 221/255];\n\n/* main flan */\nmodule flan() {\n    union() {\n        // caramel top layer\n        color(caramel)\n        translate([0,0,5])\n        scale([1,1,0.2])\n        sphere(d = 70, $fn = 100);\n\n        // custard dome\n        difference() {\n            color(custard)\n            translate([0,0,5])\n            scale([1,1,0.55])\n            sphere(d = 68, $fn = 100);\n\n            // carve out center to make hollow bowl\n            translate([0,0,-3])\n            scale([1,1,0.45])\n            sphere(d = 62, $fn = 100);\n        }\n\n        // caramel sauce dripping down sides\n        for(a = [0:30:360])\n            rotate([0,0,a])\n            translate([34,0,3.5])\n            scale([0.8,1,1.5])\n            sphere(d = 6, $fn = 20);\n\n        // shallow dish base\n        difference() {\n            color(custard)\n            cylinder(h = 5, d = 72, $fn = 100);\n\n            // hollow cavity for dish\n            cylinder(h = 5.2, d = 68, $fn = 100);\n        }\n\n        // vanilla speckles on custard\n        for(i = [0:200]) {\n            angle = rands(0,360,1)[0];\n            radius = rands(0,33,1)[0];\n            z = rands(5,28,1)[0];\n            color(vanilla)\n            translate([radius*cos(angle), radius*sin(angle), z])\n            sphere(d = 0.5, $fn = 8);\n        }\n    }\n}\n\nflan();",
    "renders": true
  },
  {
    "food_item": "quiche",
    "openscad_code": "// Quiche Lorraine - 3D printable realistic style\n// Features: flaky crust, egg custard, cheese cubes, bacon bits, chives\n\n$fn = 36;  // Smooth curves\n\n// Main dimensions (mm)\npie_diameter = 80;\npie_height = 25;\ncrust_thickness = 3;\ncustard_height = 15;\n\nmodule quiche() {\n    // Golden flaky pie crust\n    color([0.9, 0.7, 0.45]) {\n        // Bottom crust\n        difference() {\n            cylinder(h=crust_thickness, d=pie_diameter);\n            translate([0, 0, -0.1])\n                cylinder(h=crust_thickness+0.2, d=pie_diameter-crust_thickness*2);\n        }\n        \n        // Fluted edge crust\n        for(i=[0:30:359]) {\n            rotate([0, 0, i])\n                translate([pie_diameter/2-crust_thickness/2, 0, crust_thickness/2])\n                    scale([1, 0.3, 1])\n                        sphere(d=crust_thickness*2);\n        }\n        \n        // Outer wall\n        difference() {\n            cylinder(h=pie_height, d=pie_diameter);\n            translate([0, 0, -0.1])\n                cylinder(h=pie_height+0.2, d=pie_diameter-crust_thickness*2);\n        }\n    }\n    \n    // Egg custard filling\n    color([0.95, 0.9, 0.75]) {\n        translate([0, 0, crust_thickness])\n            cylinder(h=custard_height, d=pie_diameter-crust_thickness*2-2);\n    }\n    \n    // Cheese cubes (Gruyère)\n    color([0.95, 0.85, 0.5]) {\n        for(i=[0:15]) {\n            translate([\n                (pie_diameter/2-15)*cos(i*45),\n                (pie_diameter/2-15)*sin(i*45),\n                crust_thickness+custard_height/2\n            ])\n                rotate([0, 0, i*30])\n                    cube([3, 3, 2.5], center=true);\n        }\n    }\n    \n    // Bacon bits\n    color([0.6, 0.2, 0.15]) {\n        for(i=[0:20]) {\n            translate([\n                (pie_diameter/2-20)*cos(i*37),\n                (pie_diameter/2-20)*sin(i*37),\n                crust_thickness+custard_height/2+1\n            ])\n                rotate([0, 0, i*20])\n                    scale([1, 0.4, 0.4])\n                        cube([4, 2, 1.5], center=true);\n        }\n    }\n    \n    // Chive garnish\n    color([0.2, 0.5, 0.2]) {\n        for(i=[0:25]) {\n            translate([\n                (pie_diameter/2-10)*cos(i*29),\n                (pie_diameter/2-10)*sin(i*29),\n                crust_thickness+custard_height\n            ])\n                rotate([0, 0, i*45])\n                    scale([0.1, 0.1, 1])\n                        cylinder(h=3, d=1);\n        }\n    }\n    \n    // Browning on top surface\n    color([0.9, 0.8, 0.6]) {\n        translate([0, 0, crust_thickness+custard_height-0.5])\n            scale([1, 1, 0.1])\n                sphere(d=pie_diameter-crust_thickness*2-4);\n    }\n}\n\nquiche();",
    "renders": true
  },
  {
    "food_item": "omelet",
    "openscad_code": "// Realistic Omelet - Medium Complexity\n// 3D printable omelet with folded style, visible egg texture, and fillings\n\n// Main parameters\nomelet_diameter = 80;\nomelet_thickness = 8;\nfold_angle = 45;\nwall_thickness = 2;\n\n// Color definitions\negg_color = [1, 0.95, 0.7];\ncheese_color = [0.95, 0.8, 0.3];\npepper_color = [0.2, 0.6, 0.2];\nham_color = [0.9, 0.5, 0.5];\n\n// Base omelet shape\nmodule omelet_base() {\n    difference() {\n        // Main egg disk\n        color(egg_color)\n        scale([1, 0.8, 1])\n        sphere(d = omelet_diameter);\n        \n        // Hollow center for 3D printing\n        translate([0, 0, -omelet_thickness/2])\n        scale([1, 0.8, 0.3])\n        sphere(d = omelet_diameter - wall_thickness*2);\n    }\n}\n\n// Egg texture pattern\nmodule egg_texture() {\n    for (i = [0:8]) {\n        rotate([0, 0, i * 45])\n        translate([omelet_diameter/2 * 0.7, 0, 0])\n        rotate([90, 0, 0])\n        color([1, 0.9, 0.6])\n        cylinder(h = 1, d1 = 3, d2 = 1, $fn = 8);\n    }\n}\n\n// Cheese layer\nmodule cheese_layer() {\n    translate([0, 0, -1])\n    color(cheese_color)\n    scale([0.9, 0.7, 0.2])\n    sphere(d = omelet_diameter * 0.8);\n}\n\n// Ham pieces\nmodule ham_pieces() {\n    for (pos = [[-15, -10, 0], [10, 5, 0], [-5, 15, 0]]) {\n        translate(pos)\n        color(ham_color)\n        rotate([90, 0, 45])\n        scale([1, 0.5, 0.3])\n        cylinder(h = 8, d = 6, $fn = 6);\n    }\n}\n\n// Bell pepper dices\nmodule pepper_dices() {\n    for (pos = [[-20, 0, 0], [5, -15, 0], [15, 10, 0], [-10, 20, 0]]) {\n        translate(pos)\n        color(pepper_color)\n        cube([4, 4, 3], center = true);\n    }\n}\n\n// Folded section\nmodule folded_section() {\n    translate([omelet_diameter/4, 0, 0])\n    rotate([0, fold_angle, 0])\n    translate([-omelet_diameter/4, 0, 0])\n    omelet_base();\n}\n\n// Assembly\nunion() {\n    // Bottom half\n    omelet_base();\n    \n    // Fillings\n    cheese_layer();\n    ham_pieces();\n    pepper_dices();\n    \n    // Folded top (with slight offset for visibility)\n    translate([0, 0, 2])\n    folded_section();\n    \n    // Texture on visible surfaces\n    translate([0, 0, omelet_thickness/2])\n    egg_texture();\n}",
    "renders": true
  },
  {
    "food_item": "frittata",
    "openscad_code": "// Realistic Frittata Model\n// Medium complexity with visible ingredients and texture\n\n$fn=50;  // Smooth curves for realistic appearance\n\n// Main frittata base - slightly thick circular disk\nmodule frittata_base() {\n    difference() {\n        // Main egg base - slightly domed top\n        union() {\n            cylinder(h=8, r=25, center=true);\n            translate([0,0,4]) sphere(r=25);\n            translate([0,0,-4]) sphere(r=25);\n        }\n        \n        // Cut bottom flat for printing\n        translate([0,0,-10]) cube([60,60,20], center=true);\n    }\n}\n\n// Egg texture pattern - small bubbles and irregularities\nmodule egg_texture() {\n    for(i=[0:30]) {\n        translate([\n            rand(-20,20),\n            rand(-20,20),\n            rand(0,2)\n        ]) {\n            scale([1,1,0.3]) \n            sphere(r=rand(0.5,1.5));\n        }\n    }\n}\n\n// Potato cubes scattered throughout\nmodule potato_cubes() {\n    color([0.9,0.7,0.4]) {\n        for(i=[0:8]) {\n            translate([\n                rand(-18,18),\n                rand(-18,18),\n                rand(-2,4)\n            ]) {\n                rotate([rand(0,45),rand(0,45),rand(0,90)])\n                cube([3,3,3], center=true);\n            }\n        }\n    }\n}\n\n// Bell pepper pieces - small squares\nmodule bell_pepper() {\n    color([0.9,0.2,0.2]) {\n        for(i=[0:5]) {\n            translate([\n                rand(-15,15),\n                rand(-15,15),\n                rand(0,5)\n            ]) {\n                rotate([0,0,rand(0,360)])\n                cube([2.5,2.5,1.5], center=true);\n            }\n        }\n    }\n}\n\n// Onion pieces - small curved segments\nmodule onion() {\n    color([0.95,0.9,0.85]) {\n        for(i=[0:6]) {\n            translate([\n                rand(-16,16),\n                rand(-16,16),\n                rand(0,4)\n            ]) {\n                rotate([90,0,rand(0,360)])\n                cylinder(h=1.5, r1=2, r2=2, center=true);\n            }\n        }\n    }\n}\n\n// Spinach leaves - thin flat pieces\nmodule spinach() {\n    color([0.2,0.5,0.2]) {\n        for(i=[0:4]) {\n            translate([\n                rand(-12,12),\n                rand(-12,12),\n                rand(1,5)\n            ]) {\n                rotate([0,0,rand(0,360)])\n                scale([1,1.5,0.1])\n                cylinder(h=5, r=2.5, center=true);\n            }\n        }\n    }\n}\n\n// Cheese melted on top - slightly stringy appearance\nmodule cheese_topping() {\n    color([0.95,0.85,0.3]) {\n        for(i=[0:20]) {\n            translate([\n                rand(-22,22),\n                rand(-22,22),\n                rand(6,8)\n            ]) {\n                rotate([rand(-10,10),rand(-10,10),rand(0,360)])\n                scale([0.3,0.3,1])\n                cylinder(h=rand(1,3), r=rand(1,2), center=true);\n            }\n        }\n    }\n}\n\n// Herb sprinkles - tiny green dots\nmodule herbs() {\n    color([0.1,0.4,0.1]) {\n        for(i=[0:25]) {\n            translate([\n                rand(-23,23),\n                rand(-23,23),\n                rand(7,9)\n            ]) {\n                sphere(r=0.3);\n            }\n        }\n    }\n}\n\n// Browned spots on top for realistic cooking marks\nmodule cooked_spots() {\n    color([0.6,0.4,0.2]) {\n        for(i=[0:8]) {\n            translate([\n                rand(-20,20),\n                rand(-20,20),\n                rand(8,9)\n            ]) {\n                scale([1,1,0.2])\n                sphere(r=rand(2,4));\n            }\n        }\n    }\n}\n\n// Generate random values\nfunction rand(min,max) = min + (max-min)*(rands(0,1,1)[0]);\n\n// Main assembly\nrotate([0,0,0]) {\n    // Base frittata\n    color([0.95,0.9,0.7]) {\n        union() {\n            frittata_base();\n            egg_texture();\n        }\n    }\n    \n    // Ingredients mixed in\n    potato_cubes();\n    bell_pepper();\n    onion();\n    spinach();\n    \n    // Toppings\n    cheese_topping();\n    herbs();\n    cooked_spots();\n}",
    "renders": true
  },
  {
    "food_item": "souffle",
    "openscad_code": "// Realistic 3D printable soufflé\n// Medium complexity - includes ramekin, risen top, slight cracks, and browned surface\n\n// Main dimensions\nram_d = 60;          // ramekin diameter\nram_h = 35;          // ramekin height\nsouffle_rise = 20;   // how much it rises above rim\nwall_t = 2;          // wall thickness for printing\n\n// Color constants\ncolor_ramekin = [230/255, 220/255, 210/255];  // ceramic white\ncolor_souffle = [255/255, 245/255, 220/255];  // pale yellow\ncolor_brown = [180/255, 130/255, 90/255];     // browned top\n\n// Ramekin body - hollow cylinder with base\nmodule ramekin() {\n    color(color_ramekin)\n    difference() {\n        // Outer shape - flared cylinder\n        cylinder(h=ram_h, d1=ram_d*0.9, d2=ram_d, $fn=64);\n        \n        // Inner cavity\n        translate([0, 0, wall_t])\n        cylinder(h=ram_h, d1=(ram_d-2*wall_t)*0.9, d2=ram_d-2*wall_t, $fn=64);\n        \n        // Bottom cut for flat base\n        translate([0, 0, -1])\n        cube([ram_d*2, ram_d*2, 2], center=true);\n    }\n}\n\n// Soufflé top - dome with slight imperfections\nmodule souffle_top() {\n    // Main risen dome\n    color(color_souffle)\n    translate([0, 0, ram_h-2])\n    scale([1, 1, 0.7])\n    sphere(d=ram_d*0.95, $fn=64);\n    \n    // Browning patches on top\n    for (i = [0:7]) {\n        color(color_brown)\n        translate([\n            cos(i*45)*ram_d*0.3,\n            sin(i*45)*ram_d*0.3,\n            ram_h + souffle_rise - 3\n        ])\n        scale([1, 1, 0.3])\n        sphere(d=ram_d*0.15 + sin(i*2)*3, $fn=16);\n    }\n    \n    // Small cracks for realism\n    for (i = [0:5]) {\n        color([0.7, 0.7, 0.7])\n        translate([\n            cos(i*60)*ram_d*0.2,\n            sin(i*60)*ram_d*0.2,\n            ram_h + souffle_rise - 1\n        ])\n        rotate([0, 0, i*30])\n        cube([8 + i*2, 0.3, 1.5], center=true);\n    }\n}\n\n// Ramekin rim detail\nmodule rim_detail() {\n    color(color_ramekin)\n    translate([0, 0, ram_h-1])\n    difference() {\n        cylinder(h=3, d=ram_d+1, $fn=64);\n        cylinder(h=3, d=ram_d-1, $fn=64);\n    }\n}\n\n// Assemble the complete soufflé\nunion() {\n    ramekin();\n    souffle_top();\n    rim_detail();\n}",
    "renders": true
  },
  {
    "food_item": "meringue",
    "openscad_code": "// Meringue - Realistic Style\n// Medium complexity model with textured surface and proper proportions\n\n$fn = 32;\n\n// Main meringue parameters\nbase_diameter = 45;\nheight = 35;\nwall_thickness = 1.5;\ntop_radius = 25;\n\n// Color definitions\nmeringue_color = [0.98, 0.95, 0.88];\nmeringue_brown = [0.92, 0.85, 0.70];\n\n// Main meringue body with hollow interior\nmodule meringue_body() {\n    difference() {\n        // Outer shell\n        union() {\n            // Base dome\n            translate([0, 0, height/2]) \n                scale([1, 1, 0.8]) \n                    sphere(d = base_diameter);\n            \n            // Top swirl\n            translate([0, 0, height - 5])\n                sphere(d = top_radius);\n        }\n        \n        // Hollow interior\n        translate([0, 0, height/2])\n            scale([1, 1, 0.8])\n                sphere(d = base_diameter - 2*wall_thickness);\n                \n        translate([0, 0, height - 5])\n            sphere(d = top_radius - 2*wall_thickness);\n    }\n}\n\n// Create individual meringue peaks\nmodule meringue_peak(size, height_var) {\n    scale([1, 1, height_var]) \n        sphere(d = size);\n}\n\n// Generate textured surface with peaks\nmodule textured_surface() {\n    // Base peaks\n    for(i = [0:5:360]) {\n        for(j = [0:10:360]) {\n            if(i % 15 == 0 && j % 20 == 0) {\n                rotate([i, j, 0])\n                    translate([base_diameter/2 * cos(i), \n                             base_diameter/2 * sin(i) * cos(j), \n                             height/2 + 5 * sin(j)])\n                        meringue_peak(3 + rands(0, 2, 1)[0], \n                                    1.2 + rands(0, 0.8, 1)[0]);\n            }\n        }\n    }\n    \n    // Top swirl peaks\n    for(angle = [0:30:360]) {\n        translate([top_radius/2 * cos(angle), \n                 top_radius/2 * sin(angle), \n                 height - 2])\n            rotate([0, 0, angle])\n                meringue_peak(2.5, 1.5);\n    }\n}\n\n// Create bottom flat base\nmodule flat_base() {\n    difference() {\n        cylinder(h = 2, d = base_diameter);\n        translate([0, 0, -0.5])\n            cylinder(h = 3, d = base_diameter - 2*wall_thickness);\n    }\n}\n\n// Main assembly\ncolor(meringue_color) {\n    // Base structure\n    union() {\n        // Hollow body\n        meringue_body();\n        \n        // Flat bottom\n        translate([0, 0, -1])\n            flat_base();\n    }\n    \n    // Surface texture\n    color(meringue_brown) {\n        textured_surface();\n    }\n    \n    // Additional small peaks for realism\n    for(i = [1:15]) {\n        rotate([rands(0, 360, 1)[0], rands(0, 360, 1)[0], rands(0, 360, 1)[0]])\n            translate([rands(-20, 20, 1)[0], \n                     rands(-20, 20, 1)[0], \n                     rands(height/2, height, 1)[0]])\n                meringue_peak(rands(1, 3, 1)[0], rands(1, 1.8, 1)[0]);\n    }\n}",
    "renders": true
  },
  {
    "food_item": "pavlova",
    "openscad_code": "// Pavlova - meringue base with whipped cream and fruit topping\n// Overall dimensions ~70mm diameter, 35mm height\n// Designed for 3D printing with no overhangs\n\n$fa = 2;\n$fs = 1;\n\n// Main colors\ncolor_meringue = [1, 0.95, 0.85];\ncolor_cream = [1, 1, 1];\ncolor_strawberry = [0.9, 0.2, 0.2];\ncolor_kiwi = [0.4, 0.8, 0.2];\ncolor_blueberry = [0.2, 0.2, 0.4];\n\n// Meringue base with characteristic dome shape and rough texture\nmodule meringue_base() {\n    color(color_meringue) {\n        // Main dome shape\n        scale([1, 1, 0.7]) \n            sphere(d = 65, $fn = 60);\n        \n        // Create rough texture with random bumps\n        for(i = [0:200]) {\n            rotate([rand(0,360), rand(0,360), rand(0,360)])\n                translate([rand(-30,30), rand(-30,30), rand(-10,20)])\n                    sphere(d = rand(2,5), $fn = 8);\n        }\n        \n        // Hollow out center for cream\n        translate([0, 0, -10])\n            cylinder(h = 25, d1 = 40, d2 = 50, $fn = 30);\n    }\n}\n\n// Whipped cream dollops\nmodule cream_topping() {\n    color(color_cream) {\n        // Multiple cream dollops\n        for(i = [0:5]) {\n            rotate([0, 0, i * 60])\n                translate([rand(10,20), 0, 18])\n                    scale([1, 1, 0.8])\n                        sphere(d = rand(12,18), $fn = 20);\n        }\n        \n        // Additional smaller dollops\n        for(i = [0:8]) {\n            rotate([0, 0, i * 45])\n                translate([rand(15,25), 0, 20])\n                    scale([0.8, 0.8, 0.6])\n                        sphere(d = rand(6,10), $fn = 15);\n        }\n    }\n}\n\n// Strawberry slices\nmodule strawberries() {\n    color(color_strawberry) {\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90 + 30])\n                translate([rand(15,22), 0, 25])\n                    scale([1, 1, 0.3])\n                        sphere(d = 8, $fn = 6);\n        }\n    }\n}\n\n// Kiwi slices\nmodule kiwi_slices() {\n    color(color_kiwi) {\n        for(i = [0:2]) {\n            rotate([0, 0, i * 120 + 60])\n                translate([rand(12,20), 0, 23])\n                    scale([1.2, 1, 0.2])\n                        sphere(d = 7, $fn = 6);\n        }\n    }\n}\n\n// Blueberries\nmodule blueberries() {\n    color(color_blueberry) {\n        for(i = [0:5]) {\n            rotate([0, 0, i * 72 + 15])\n                translate([rand(8,18), rand(-5,5), 26])\n                    sphere(d = 4, $fn = 10);\n        }\n    }\n}\n\n// Assemble the pavlova\nunion() {\n    // Meringue base\n    meringue_base();\n    \n    // Cream topping\n    cream_topping();\n    \n    // Fruits\n    strawberries();\n    kiwi_slices();\n    blueberries();\n}\n\n// Helper function for random values\nfunction rand(min, max) = min + rands(0,1,1)[0] * (max - min);",
    "renders": true
  },
  {
    "food_item": "pudding",
    "openscad_code": "// Realistic 3D Printable Pudding Model\n// Medium complexity with caramel top, custard body, and serving bowl\n\n$fn = 50;  // Smooth curves\n\nmodule pudding() {\n    // Pudding custard body\n    color([1, 0.95, 0.8])  // Creamy yellow\n    translate([0, 0, 15])\n    difference() {\n        // Main custard dome\n        scale([1, 1, 0.7])\n        sphere(d = 60);\n        \n        // Hollow out center for realistic thickness\n        scale([0.9, 0.9, 0.65])\n        sphere(d = 56);\n    }\n    \n    // Caramel layer on top\n    color([0.8, 0.5, 0.2, 0.9])  // Translucent amber\n    translate([0, 0, 27])\n    difference() {\n        scale([1, 1, 0.15])\n        sphere(d = 58);\n        scale([0.95, 0.95, 0.1])\n        sphere(d = 56);\n    }\n    \n    // Caramel drips down sides\n    for(i = [0:45:360]) {\n        rotate([0, 0, i])\n        translate([28, 0, 20])\n        rotate([90, 0, 0])\n        color([0.8, 0.5, 0.2, 0.8])\n        scale([0.3, 0.3, 1.5 + (i % 90)/30])\n        cylinder(h = 8, d1 = 4, d2 = 2);\n    }\n    \n    // Small air bubbles in custard\n    for(i = [0:20]) {\n        color([1, 0.95, 0.8, 0.5])\n        translate([\n            20 * cos(i * 137.5),\n            20 * sin(i * 137.5),\n            15 + 10 * sin(i * 2.5)\n        ])\n        sphere(d = 1 + (i % 3));\n    }\n}\n\nmodule serving_bowl() {\n    // Glass serving bowl\n    color([0.9, 0.95, 1, 0.4])  // Transparent glass\n    difference() {\n        // Outer bowl\n        cylinder(h = 25, d1 = 80, d2 = 70);\n        \n        // Inner hollow\n        translate([0, 0, 2])\n        cylinder(h = 25, d1 = 76, d2 = 66);\n    }\n    \n    // Bowl rim\n    color([0.8, 0.85, 0.9, 0.5])\n    translate([0, 0, 25])\n    cylinder(h = 3, d1 = 82, d2 = 80);\n    \n    // Bowl base\n    color([0.8, 0.85, 0.9, 0.5])\n    cylinder(h = 8, d1 = 30, d2 = 40);\n}\n\n// Assembly\nunion() {\n    serving_bowl();\n    pudding();\n}",
    "renders": true
  },
  {
    "food_item": "trifle",
    "openscad_code": "$fs = 0.5;\n$fa = 1;\n\nmodule base_bowl() {\n    difference() {\n        cylinder(h = 20, r1 = 35, r2 = 30, center = false);\n        translate([0, 0, 2])\n            cylinder(h = 18, r1 = 33, r2 = 28, center = false);\n    }\n}\n\nmodule sponge_layer() {\n    color([0.82, 0.71, 0.55])\n    difference() {\n        cylinder(h = 6, r = 29.5, center = false);\n        for (i = [0:7]) {\n            rotate([0, 0, i * 45])\n                translate([10, 0, -1])\n                    cube([20, 2, 8], center = true);\n        }\n    }\n}\n\nmodule custard_layer() {\n    color([1, 0.9, 0.6])\n    cylinder(h = 8, r = 29, center = false);\n}\n\nmodule fruit_piece(x, y) {\n    color([0.8, 0.2, 0.2])\n    translate([x, y, 0])\n        scale([1, 0.7, 0.6])\n            sphere(r = 3, $fn = 12);\n}\n\nmodule fruit_layer() {\n    for (i = [0:11]) {\n        angle = i * 30;\n        radius = 20 + (i % 2) * 5;\n        fruit_piece(\n            radius * cos(angle),\n            radius * sin(angle)\n        );\n    }\n    fruit_piece(0, 0);\n}\n\nmodule cream_swirl() {\n    color([1, 1, 0.95])\n    for (i = [0:5]) {\n        rotate([0, 0, i * 60])\n            translate([12, 0, 0])\n                cylinder(h = 8, r1 = 6, r2 = 4, center = false);\n    }\n    cylinder(h = 6, r = 10, center = false);\n}\n\ntranslate([0, 0, 0])\n    color([0.95, 0.95, 0.9])\n    base_bowl();\n\ntranslate([0, 0, 2])\n    sponge_layer();\n\ntranslate([0, 0, 8])\n    custard_layer();\n\ntranslate([0, 0, 16])\n    fruit_layer();\n\ntranslate([0, 0, 18])\n    cream_swirl();",
    "renders": true
  },
  {
    "food_item": "parfait",
    "openscad_code": "// Realistic Parfait - 3D Printable Model\n// Features: Glass cup, layered yogurt, berries, granola, and whipped cream\n\n// Overall scale for 3D printing\nscale_factor = 1.5;\n\n// Colors\nglass_color = [220/255, 240/255, 255/255, 0.3];\nyogurt_color = [255/255, 245/255, 230/255];\nstrawberry_color = [220/255, 50/255, 60/255];\nblueberry_color = [40/255, 50/255, 120/255];\ngranola_color = [180/255, 140/255, 80/255];\ncream_color = [255/255, 255/255, 255/255];\n\n// Glass cup\nmodule glass_cup() {\n    difference() {\n        // Outer cylinder\n        cylinder(h=45, r1=20, r2=25, $fn=64);\n        \n        // Inner cavity\n        translate([0, 0, 1])\n            cylinder(h=44, r1=18, r2=23, $fn=64);\n        \n        // Bottom thickness\n        translate([0, 0, 0])\n            cylinder(h=2, r1=20, r2=25, $fn=64);\n    }\n}\n\n// Yogurt layer with wavy top surface\nmodule yogurt_layer(height, thickness) {\n    difference() {\n        // Base yogurt layer\n        translate([0, 0, height])\n            cylinder(h=thickness, r1=18, r2=23, $fn=64);\n        \n        // Create wavy texture\n        for(i = [0:15:345]) {\n            rotate([0, 0, i])\n                translate([0, 10, height + thickness - 0.5])\n                    rotate([0, 90, 0])\n                        cylinder(h=25, r=0.5, $fn=16);\n        }\n    }\n}\n\n// Strawberry pieces\nmodule strawberry_piece(x, y, z) {\n    color(strawberry_color)\n        translate([x, y, z])\n            scale([1, 0.7, 0.5])\n                sphere(r=2.5, $fn=16);\n}\n\n// Blueberry pieces\nmodule blueberry_piece(x, y, z) {\n    color(blueberry_color)\n        translate([x, y, z])\n            sphere(r=1.8, $fn=12);\n}\n\n// Granola clusters\nmodule granola_cluster(x, y, z) {\n    color(granola_color)\n    for(i = [0:3]) {\n        translate([x + sin(i*90)*1.5, y + cos(i*90)*1.5, z])\n            scale([1, 0.7, 0.4])\n                rotate([0, 0, i*45])\n                    cube([2, 1.5, 0.8], center=true);\n    }\n}\n\n// Whipped cream swirl\nmodule whipped_cream() {\n    color(cream_color)\n    for(i = [0:30:360]) {\n        rotate([0, 0, i])\n            translate([sin(i*3)*2, cos(i*3)*2, 42 + i/15])\n                sphere(r=3 - i/60, $fn=16);\n    }\n}\n\n// Main assembly\nscale([scale_factor, scale_factor, scale_factor]) {\n    // Glass container\n    color(glass_color)\n        glass_cup();\n    \n    // First yogurt layer\n    color(yogurt_color)\n        yogurt_layer(2, 8);\n    \n    // First berry layer\n    for(i = [0:5]) {\n        angle = i * 60;\n        strawberry_piece(sin(angle)*15, cos(angle)*15, 10.5);\n        blueberry_piece(sin(angle+30)*12, cos(angle+30)*12, 10.5);\n    }\n    \n    // Granola layer\n    for(i = [0:12]) {\n        angle = i * 30;\n        granola_cluster(sin(angle)*15, cos(angle)*15, 11);\n    }\n    \n    // Second yogurt layer\n    color(yogurt_color)\n        yogurt_layer(12, 8);\n    \n    // Second berry layer\n    for(i = [0:4]) {\n        angle = i * 90;\n        blueberry_piece(sin(angle)*12, cos(angle)*12, 20.5);\n        strawberry_piece(sin(angle+45)*10, cos(angle+45)*10, 20.5);\n    }\n    \n    // Final granola layer\n    for(i = [0:8]) {\n        angle = i * 45;\n        granola_cluster(sin(angle)*12, cos(angle)*12, 21);\n    }\n    \n    // Third yogurt layer\n    color(yogurt_color)\n        yogurt_layer(22, 6);\n    \n    // Whipped cream top\n    whipped_cream();\n}\n\n// Add base for stability\ncolor([200/255, 200/255, 200/255])\n    translate([0, 0, -2])\n        cylinder(h=2, r1=25, r2=25, $fn=64);",
    "renders": true
  },
  {
    "food_item": "gelato",
    "openscad_code": "// Gelato in a cup with 3 flavors and chocolate drizzle\n$fa = 1;\n$fs = 0.5;\n\nmodule cup() {\n    // Outer cup\n    color(\"white\")\n    difference() {\n        cylinder(h = 35, r1 = 22, r2 = 18);\n        translate([0, 0, 1])\n        cylinder(h = 34, r1 = 20, r2 = 16);\n    }\n    \n    // Cup lip\n    color(\"white\")\n    translate([0, 0, 35])\n    cylinder(h = 3, r1 = 22.5, r2 = 22);\n}\n\nmodule gelato_ripples(height, radius, color_name) {\n    // Create rippled texture for gelato\n    color(color_name)\n    for(i = [0:5]) {\n        rotate([0, 0, i * 60])\n        translate([0, 0, height - i * 1.5])\n        scale([1 + sin(i * 30) * 0.1, 1 + cos(i * 30) * 0.1, 1])\n        cylinder(h = 3, r = radius - i * 1.2, $fn = 32);\n    }\n}\n\nmodule chocolate_drizzle() {\n    // Random chocolate drizzle pattern\n    color(\"brown\")\n    for(i = [0:8]) {\n        angle = i * 40 + rand(i) * 20;\n        radius = 8 + rand(i) * 8;\n        translate([cos(angle) * radius, sin(angle) * radius, 33])\n        rotate([90, 0, angle])\n        cylinder(h = 10 + rand(i) * 5, r = 0.8, $fn = 8);\n    }\n}\n\nfunction rand(n) = (n * 13.7) % 1;\n\nmodule gelato_scoop(base_height, color_name, offset_x, offset_y) {\n    // Main gelato scoop\n    color(color_name) {\n        translate([offset_x, offset_y, base_height])\n        scale([1, 1, 1.2])\n        sphere(r = 15, $fn = 32);\n        \n        // Add texture lines\n        for(i = [0:7]) {\n            rotate([0, 0, i * 45])\n            translate([offset_x + cos(i * 45) * 8, offset_y + sin(i * 45) * 8, base_height + 8])\n            scale([0.3, 0.3, 1])\n            sphere(r = 3, $fn = 16);\n        }\n    }\n}\n\nmodule sprinkles() {\n    // Colorful sprinkles\n    colors = [\"red\", \"green\", \"yellow\", \"pink\", \"blue\"];\n    for(i = [0:20]) {\n        color(colors[i % len(colors)])\n        translate([\n            -15 + rand(i * 2) * 30,\n            -15 + rand(i * 2 + 1) * 30,\n            33 + rand(i * 2 + 2) * 5\n        ])\n        rotate([rand(i * 3) * 360, rand(i * 3 + 1) * 360, rand(i * 3 + 2) * 360])\n        scale([1, 0.3, 0.3])\n        cylinder(h = 4, r = 0.5, $fn = 6);\n    }\n}\n\n// Assemble the gelato\ncup();\n\n// Three flavors stacked\ngelato_ripples(5, 19, \"#FFB6C1\");  // Strawberry\ngelato_ripples(10, 17, \"#F5DEB3\"); // Vanilla\ngelato_ripples(15, 15, \"#228B22\"); // Pistachio\n\n// Three main scoops\ngelato_scoop(18, \"#FFB6C1\", -8, -8);  // Strawberry\ngelato_scoop(18, \"#F5DEB3\", 8, -5);   // Vanilla\ngelato_scoop(18, \"#228B22\", 0, 9);    // Pistachio\n\nchocolate_drizzle();\nsprinkles();",
    "renders": true
  },
  {
    "food_item": "kulfi",
    "openscad_code": "// Realistic Kulfi in OpenSCAD\n// A traditional Indian frozen dessert on a stick\n\n// Overall scale factor\nkulfi_scale = 1.0;\n\n// Main module to create the kulfi\nmodule kulfi() {\n    // Base kulfi body (tapered popsicle shape)\n    color(\"#F5DEB3\")  // Creamy beige color\n    difference() {\n        // Main kulfi body - tapered cylinder\n        cylinder(h = 60 * kulfi_scale, r1 = 18 * kulfi_scale, r2 = 22 * kulfi_scale, $fn = 32);\n        \n        // Top dome shape\n        translate([0, 0, 60 * kulfi_scale])\n        sphere(r = 22 * kulfi_scale, $fn = 32);\n        \n        // Cut off the bottom half of sphere\n        translate([0, 0, 60 * kulfi_scale - 0.1])\n        cube([50 * kulfi_scale, 50 * kulfi_scale, 25 * kulfi_scale], center = true);\n    }\n    \n    // Vertical ridges on the kulfi body\n    for (i = [0:7]) {\n        rotate([0, 0, i * 45])\n        translate([19.5 * kulfi_scale, 0, 30 * kulfi_scale])\n        color(\"#F4D4A3\")\n        cube([3 * kulfi_scale, 1 * kulfi_scale, 60 * kulfi_scale], center = true);\n    }\n    \n    // Top pistachio garnish\n    for (i = [0:11]) {\n        rotate([0, 0, i * 30])\n        translate([15 * kulfi_scale, 0, 75 * kulfi_scale])\n        color(\"#90EE90\")\n        scale([1, 0.6, 0.2])\n        sphere(r = 2 * kulfi_scale, $fn = 8);\n    }\n    \n    // Saffron strands\n    for (i = [0:5]) {\n        rotate([0, 0, i * 60 + 15])\n        translate([10 * kulfi_scale, 0, 78 * kulfi_scale])\n        color(\"#FF6347\")\n        rotate([90, 0, 90])\n        cylinder(h = 12 * kulfi_scale, r = 0.3 * kulfi_scale, $fn = 6);\n    }\n    \n    // The stick\n    translate([0, 0, -30 * kulfi_scale])\n    color(\"#D2691E\")\n    cylinder(h = 35 * kulfi_scale, r = 3.5 * kulfi_scale, $fn = 16);\n    \n    // Stick grip texture\n    translate([0, 0, -22 * kulfi_scale])\n    color(\"#8B4513\")\n    for (j = [0:3]) {\n        translate([0, 0, j * 4 * kulfi_scale])\n        cylinder(h = 2 * kulfi_scale, r = 4 * kulfi_scale, $fn = 16);\n    }\n    \n    // Cardamom seeds on surface\n    for (i = [0:15]) {\n        angle = i * 137.5;  // Golden angle for natural distribution\n        radius = 8 + (i % 3) * 4;\n        height = 10 + (i % 5) * 8;\n        rotate([0, 0, angle])\n        translate([radius * kulfi_scale, 0, height * kulfi_scale])\n        color(\"#8B7355\")\n        scale([1, 0.7, 0.4])\n        sphere(r = 0.8 * kulfi_scale, $fn = 6);\n    }\n    \n    // Subtle melting drips\n    for (i = [0:4]) {\n        rotate([0, 0, i * 72 + 20])\n        translate([20 * kulfi_scale, 0, 15 * kulfi_scale])\n        color(\"#F5DEB3\")\n        scale([1, 1, 1.5])\n        sphere(r = 2 * kulfi_scale, $fn = 12);\n    }\n}\n\n// Render the kulfi\nkulfi();",
    "renders": true
  },
  {
    "food_item": "semifreddo",
    "openscad_code": "// Semifreddo - Italian frozen dessert with layers\n// Dimensions approximately 80mm long, 50mm wide, 35mm high\n\n// Main parameters\nlength = 80;\nwidth = 50;\nheight = 35;\nlayer_height = height / 4;\nwall_thickness = 2;\n\n// Color definitions\ncustard_color = [1, 0.95, 0.8];\nchocolate_color = [0.4, 0.2, 0.1];\ncream_color = [1, 1, 0.95];\nberry_color = [0.8, 0.2, 0.4];\n\n// Create the main log shape with rounded edges\nmodule semifreddo_body() {\n    difference() {\n        // Main rectangular body with rounded top\n        union() {\n            // Base rectangle\n            translate([0, 0, height/2])\n                cube([length, width, height], center=true);\n            \n            // Rounded top\n            translate([0, 0, height])\n                scale([length/width, 1, 1])\n                sphere(d=width, $fn=30);\n        }\n        \n        // Remove bottom half to create flat base\n        translate([0, 0, -1])\n            cube([length*2, width*2, 2], center=true);\n    }\n}\n\n// Create sponge cake layer pattern\nmodule sponge_layer() {\n    color(custard_color) {\n        difference() {\n            // Base layer\n            translate([0, 0, layer_height/2])\n                cube([length-4, width-4, layer_height], center=true);\n            \n            // Create sponge holes pattern\n            for(x = [-length/2+5:5:length/2-5]) {\n                for(y = [-width/2+5:5:width/2-5]) {\n                    translate([x, y, layer_height/2])\n                        sphere(d=2, $fn=8);\n                }\n            }\n        }\n    }\n}\n\n// Create chocolate layer with swirl pattern\nmodule chocolate_layer() {\n    color(chocolate_color) {\n        difference() {\n            // Main chocolate layer\n            translate([0, 0, layer_height*1.5])\n                cube([length-4, width-4, layer_height], center=true);\n            \n            // Swirl pattern\n            for(i = [0:30:360]) {\n                rotate([0, 0, i])\n                translate([length/4, 0, layer_height/2])\n                    scale([1, 0.1, 0.3])\n                    sphere(d=5, $fn=20);\n            }\n        }\n    }\n}\n\n// Create cream layer with piping texture\nmodule cream_layer() {\n    color(cream_color) {\n        union() {\n            // Base cream layer\n            translate([0, 0, layer_height*2.5])\n                cube([length-4, width-4, layer_height], center=true);\n            \n            // Piping details on top\n            for(i = [-length/2+8:8:length/2-8]) {\n                for(j = [-width/2+8:8:width/2-8]) {\n                    translate([i, j, layer_height*3])\n                        sphere(d=4, $fn=16);\n                }\n            }\n        }\n    }\n}\n\n// Create berry decoration\nmodule berry_deco() {\n    color(berry_color) {\n        // Central berries\n        translate([0, 0, height+2])\n            sphere(d=6, $fn=16);\n        translate([-10, 0, height+2])\n            sphere(d=5, $fn=16);\n        translate([10, 0, height+2])\n            sphere(d=5, $fn=16);\n        \n        // Raspberry texture\n        for(i = [0:15:360]) {\n            rotate([0, 0, i])\n            translate([0, 0, height+2])\n                scale([0.3, 1, 0.3])\n                sphere(d=6, $fn=8);\n        }\n    }\n}\n\n// Create chocolate shavings\nmodule chocolate_shavings() {\n    color(chocolate_color) {\n        for(i = [1:8]) {\n            rotate([0, 0, i*45])\n            translate([length/3, 0, height+3])\n                scale([0.2, 2, 0.1])\n                rotate([90, 0, 0])\n                cylinder(h=8, d1=2, d2=0.5, $fn=3);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main body with rounded top\n    difference() {\n        color(cream_color) semifreddo_body();\n        \n        // Hollow out interior for printing\n        scale([0.9, 0.9, 0.9])\n        color(cream_color) semifreddo_body();\n    }\n    \n    // Visible layers on cut face\n    translate([length/2-2, 0, 0]) {\n        sponge_layer();\n        chocolate_layer();\n        cream_layer();\n    }\n    \n    // Decorations on top\n    berry_deco();\n    chocolate_shavings();\n}",
    "renders": true
  },
  {
    "food_item": "spoom",
    "openscad_code": "// Spoom (Italian semi-frozen dessert) - realistic style, medium complexity\n// A cross between sorbet and mousse - light, airy, and frozen\n\n// Main parameters\nspoom_diameter = 60;      // Overall diameter in mm\nspoom_height = 45;        // Overall height in mm\nwall_thickness = 2;       // Wall thickness for 3D printing\ntexture_depth = 0.5;      // Surface texture depth\n\n// Colors\n$fn = 48;                 // Smooth curves\n\n// Main spoom body - slightly tapered dome\nmodule spoom_body() {\n    color(\"honeydew\") {\n        difference() {\n            // Main dome shape\n            translate([0, 0, -spoom_height/2])\n                scale([1, 1, 0.7])\n                sphere(d = spoom_diameter);\n            \n            // Hollow out center\n            translate([0, 0, -spoom_height/2 + wall_thickness])\n                scale([1, 1, 0.7])\n                sphere(d = spoom_diameter - 2*wall_thickness);\n            \n            // Flat bottom\n            translate([0, 0, -spoom_height/2])\n                cube([spoom_diameter*2, spoom_diameter*2, wall_thickness], center=true);\n        }\n    }\n}\n\n// Air bubble texture - characteristic of spoom's airy structure\nmodule bubble_texture() {\n    color(\"honeydew\") {\n        // Random small spheres for bubble effect\n        for(i = [0:20]) {\n            translate([\n                (rand(i, 0) - 0.5) * spoom_diameter * 0.4,\n                (rand(i, 1) - 0.5) * spoom_diameter * 0.4,\n                (rand(i, 2) - 0.5) * spoom_height * 0.5 + spoom_height/4\n            ])\n                sphere(d = 1 + rand(i, 3) * 2);\n        }\n    }\n}\n\n// Fruit puree swirl on top\nmodule fruit_swirl() {\n    color(\"lightcoral\") {\n        // Create spiral pattern\n        for(i = [0:30]) {\n            angle = i * 30;\n            radius = (30 - i) * 0.8;\n            height = sin(i * 10) * 1.5 + 2;\n            \n            translate([\n                cos(angle) * radius,\n                sin(angle) * radius,\n                spoom_height/3 - 2\n            ])\n                cylinder(h = height, d = 3 + sin(i*5)*1, $fn=8);\n        }\n    }\n}\n\n// Crystalline surface texture\nmodule crystal_texture() {\n    color(\"mintcream\") {\n        // Small crystalline formations\n        for(x = [-25:5:25]) {\n            for(y = [-25:5:25]) {\n                if(sqrt(x*x + y*y) < spoom_diameter/2 - 5) {\n                    translate([x, y, spoom_height/3 - 1])\n                        cylinder(h = 1 + rand(x, y) * 1.5, d = 1 + rand(y, x) * 1, $fn=6);\n                }\n            }\n        }\n    }\n}\n\n// Helper function for pseudo-random numbers\nfunction rand(a, b) = (sin(a*12.9898 + b*78.233) * 43758.5453) % 1;\n\n// Assemble the spoom\nunion() {\n    spoom_body();\n    bubble_texture();\n    fruit_swirl();\n    crystal_texture();\n}",
    "renders": true
  },
  {
    "food_item": "sherbet",
    "openscad_code": "// Sherbet in a wafer cone with orange, lemon, raspberry layers and sprinkles\n// Dimensions: ~60mm height, ~45mm max diameter\n\n// Main colors\norange = [1,0.6,0];\nlemon = [1,0.9,0.2];\nraspberry = [0.9,0.3,0.5];\ncone = [0.8,0.6,0.4];\nsprinkle_colors = [[1,0.2,0.2],[0.2,1,0.2],[0.2,0.2,1],[1,1,0.2]];\n\n// Wafer cone with texture\nmodule cone(height=25, bottom_d=35, top_d=12, thickness=2) {\n    difference() {\n        cylinder(h=height, d1=bottom_d, d2=top_d, $fn=32);\n        translate([0,0,thickness])\n            cylinder(h=height-thickness, d1=bottom_d-2*thickness, d2=top_d-2*thickness, $fn=32);\n    }\n    \n    // Cone texture lines\n    for(i=[0:15]) {\n        rotate([0,0,i*360/16])\n            translate([bottom_d/2-1,0,0])\n                cube([2,1,height], center=true);\n    }\n}\n\n// Sherbet hemisphere with swirl texture\nmodule sherbet_layer(diameter, height, color_val) {\n    color(color_val) {\n        scale([1,1,0.8])\n            sphere(d=diameter, $fn=64);\n        \n        // Swirl texture\n        for(i=[0:20]) {\n            rotate([0,0,i*18])\n                translate([diameter/2-2,0,0])\n                    rotate([90,0,0])\n                        cylinder(h=diameter/2, d=1.5, $fn=8);\n        }\n    }\n}\n\n// Sprinkle\nmodule sprinkle() {\n    color(sprinkle_colors[rands(0,len(sprinkle_colors)-1,1)[0]])\n        rotate([0,90,0])\n            scale([1,0.2,0.2])\n                cylinder(h=3, d=1, $fn=6);\n}\n\n// Sherbet assembly\nmodule sherbet() {\n    // Wafer cone\n    translate([0,0,0])\n        color(cone)\n            cone();\n    \n    // Orange layer\n    translate([0,0,24])\n        sherbet_layer(40, 15, orange);\n    \n    // Lemon layer\n    translate([0,0,35])\n        sherbet_layer(35, 12, lemon);\n    \n    // Raspberry layer\n    translate([0,0,44])\n        sherbet_layer(30, 10, raspberry);\n    \n    // Sprinkles on top\n    for(i=[0:25]) {\n        angle = rands(0,360,1)[0];\n        radius = rands(5,12,1)[0];\n        translate([\n            radius*cos(angle),\n            radius*sin(angle),\n            50+rands(0,3,1)[0]\n        ])\n            rotate([0,0,rands(0,360,1)[0]])\n                sprinkle();\n    }\n}\n\n// Render the sherbet\nsherbet();",
    "renders": true
  },
  {
    "food_item": "sorbet",
    "openscad_code": "// Realistic Sorbet in a Wafer Cup\n// Medium complexity OpenSCAD model\n\n// Overall dimensions (mm)\ncup_height = 45;\ncup_top_dia = 55;\ncup_bottom_dia = 35;\nsorbet_height = 35;\nsorbet_ball_count = 3;\nball_dia = 28;\nwafer_thickness = 2;\n\n// Colors\nwafer_color = [210/255, 180/255, 140/255];\nraspberry_color = [220/255, 20/255, 60/255];\nlemon_color = [255/255, 255/255, 102/255];\nmint_color = [152/255, 255/255, 152/255];\n\n// Wafer cup module\nmodule wafer_cup() {\n    color(wafer_color) {\n        // Main cup body\n        difference() {\n            cylinder(h=cup_height, d1=cup_bottom_dia, d2=cup_top_dia, $fn=32);\n            // Hollow out inside\n            translate([0, 0, wafer_thickness])\n                cylinder(h=cup_height, d1=cup_bottom_dia-2*wafer_thickness, d2=cup_top_dia-2*wafer_thickness, $fn=32);\n        }\n        \n        // Wafer texture lines\n        for (i = [0:15]) {\n            rotate([0, 0, i*360/16])\n                translate([cup_top_dia/2 - 2, 0, 0])\n                    cube([wafer_thickness, 1, cup_height], center=true);\n        }\n        \n        // Cup rim\n        translate([0, 0, cup_height])\n            cylinder(h=wafer_thickness*1.5, d1=cup_top_dia+wafer_thickness, d2=cup_top_dia+wafer_thickness*2, $fn=32);\n    }\n}\n\n// Sorbet ball module with realistic texture\nmodule sorbet_ball(diameter, flavor_color, seed_count) {\n    color(flavor_color) {\n        // Main sphere\n        sphere(d=diameter, $fn=32);\n        \n        // Ice crystal texture\n        for (i = [0:seed_count-1]) {\n            rotate([0, 0, i*360/seed_count])\n                translate([diameter/2 - 1.5, 0, 0])\n                    sphere(d=1.2, $fn=8);\n        }\n        \n        // Additional texture for realism\n        for (i = [0:20]) {\n            rotate([rand(0,360), rand(0,360), rand(0,360)])\n                translate([rand(0,diameter/2-1), 0, 0])\n                    sphere(d=0.8, $fn=6);\n        }\n    }\n}\n\n// Function for random numbers\nfunction rand(min, max) = min + (max - min) * (rands(0, 1, 1)[0]);\n\n// Assemble the sorbet\nunion() {\n    // Wafer cup\n    wafer_cup();\n    \n    // Sorbet balls\n    translate([0, 0, cup_height + ball_dia/2])\n        sorbet_ball(ball_dia, raspberry_color, 12);\n    \n    translate([-ball_dia/2, ball_dia/2, cup_height + ball_dia/2 + 3])\n        sorbet_ball(ball_dia, lemon_color, 8);\n    \n    translate([ball_dia/2, ball_dia/2, cup_height + ball_dia/2 + 6])\n        sorbet_ball(ball_dia, mint_color, 10);\n    \n    // Decorative wafer stick\n    color(wafer_color) {\n        translate([cup_top_dia/2 - 5, 0, cup_height + sorbet_height + 5])\n            rotate([45, 0, 0])\n                cylinder(h=20, d=3, $fn=8);\n    }\n    \n    // Melting drips\n    color(raspberry_color) {\n        translate([0, cup_top_dia/2 - 3, cup_height + 5])\n            sphere(d=2, $fn=8);\n        translate([-3, cup_top_dia/2 - 5, cup_height + 3])\n            sphere(d=1.5, $fn=8);\n    }\n}",
    "renders": true
  },
  {
    "food_item": "icecream",
    "openscad_code": "// Realistic Ice Cream Cone with Scoop and Sauce\n// 3D printable ice cream model with waffle cone texture and chocolate sauce\n\n// Main parameters\ncone_height = 45;\ncone_base = 20;\ncone_top = 35;\nscoop_radius = 18;\nchocolate_drips = 6;\n\n// Waffle cone with texture\nmodule waffle_cone(height, base_r, top_r) {\n    // Main cone shape\n    difference() {\n        cylinder(h=height, r1=base_r, r2=top_r, $fn=64);\n        \n        // Hollow out the cone\n        translate([0, 0, 2])\n            cylinder(h=height-2, r1=base_r-2, r2=top_r-2, $fn=64);\n    }\n    \n    // Waffle pattern - criss-cross lines\n    for (i = [0:5:height]) {\n        rotate([0, 0, 0])\n            translate([0, 0, i])\n                difference() {\n                    cylinder(h=0.8, r1=base_r-(base_r-top_r)*(i/height), r2=base_r-(base_r-top_r)*((i+0.8)/height), $fn=64);\n                    translate([0, 0, -0.1])\n                        cylinder(h=1, r1=base_r-(base_r-top_r)*(i/height)-1.5, r2=base_r-(base_r-top_r)*((i+0.8)/height)-1.5, $fn=64);\n                }\n    }\n    \n    // Vertical ridges\n    for (angle = [0:15:360]) {\n        rotate([0, 0, angle])\n            translate([base_r-1, 0, 0])\n                cube([2, 0.5, height], center=true);\n    }\n}\n\n// Ice cream scoop with realistic texture\nmodule ice_cream_scoop(radius) {\n    // Main scoop\n    color(\"floralwhite\")\n    difference() {\n        sphere(r=radius, $fn=64);\n        \n        // Flat bottom to sit on cone\n        translate([0, 0, -radius+2])\n            cube([radius*2, radius*2, radius], center=true);\n    }\n    \n    // Surface texture - small spheres for ice cream texture\n    for (i = [0:30]) {\n        theta = rands(0, 360, 1)[0];\n        phi = rands(30, 150, 1)[0];\n        r = radius - 0.5;\n        \n        translate([\n            r * sin(phi) * cos(theta),\n            r * sin(phi) * sin(theta),\n            r * cos(phi)\n        ])\n            sphere(r=0.5 + rands(0, 0.3, 1)[0], $fn=8);\n    }\n}\n\n// Chocolate sauce drips\nmodule chocolate_sauce(radius, drips) {\n    color(\"saddlebrown\")\n    union() {\n        // Thin layer on top\n        translate([0, 0, radius-0.5])\n            sphere(r=radius+1, $fn=64);\n            \n        // Drip details\n        for (i = [0:drips-1]) {\n            angle = i * (360/drips);\n            drip_length = rands(5, 12, 1)[0];\n            \n            rotate([0, 0, angle])\n                translate([radius-2, 0, radius-2])\n                    rotate([90, 0, 0])\n                        cylinder(h=drip_length, r1=2, r2=0.5, $fn=16);\n        }\n    }\n}\n\n// Assembly\ntranslate([0, 0, 0]) {\n    // Waffle cone\n    color(\"tan\")\n    waffle_cone(cone_height, cone_base, cone_top);\n    \n    // Ice cream on top\n    translate([0, 0, cone_height-2])\n        ice_cream_scoop(scoop_radius);\n        \n    // Chocolate sauce\n    translate([0, 0, cone_height-2])\n        chocolate_sauce(scoop_radius, chocolate_drips);\n}",
    "renders": true
  },
  {
    "food_item": "butteroil",
    "openscad_code": "// Butteroil bottle with realistic details\n// Medium complexity 3D printable model\n\n$fn = 32;\n\n// Main bottle body\nmodule bottle_body() {\n    difference() {\n        // Main cylindrical body\n        cylinder(h = 60, r1 = 18, r2 = 20, center = false);\n        \n        // Hollow interior\n        translate([0, 0, 2])\n            cylinder(h = 58, r1 = 16, r2 = 18, center = false);\n    }\n}\n\n// Bottle neck\nmodule bottle_neck() {\n    difference() {\n        // Tapered neck\n        translate([0, 0, 60])\n            cylinder(h = 15, r1 = 20, r2 = 12, center = false);\n            \n        // Hollow neck\n        translate([0, 0, 60])\n            cylinder(h = 15, r1 = 18, r2 = 10, center = false);\n    }\n}\n\n// Screw cap threads\nmodule cap_threads() {\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90])\n            translate([11.5, 0, 72])\n                cube([1.5, 2, 6], center = true);\n    }\n}\n\n// Cap with grip ridges\nmodule bottle_cap() {\n    color(\"gold\")\n    difference() {\n        // Main cap\n        translate([0, 0, 75])\n            cylinder(h = 12, r = 14, center = false);\n            \n        // Inner threading\n        translate([0, 0, 75])\n            cylinder(h = 10, r = 10.5, center = false);\n            \n        // Grip ridges\n        for (i = [0:23]) {\n            rotate([0, 0, i * 15])\n                translate([13.5, 0, 78])\n                    cube([1, 2, 6], center = true);\n        }\n    }\n}\n\n// Butteroil label with text area\nmodule label() {\n    color(\"white\")\n    difference() {\n        // Label rectangle\n        translate([0, -19.5, 25])\n            cube([30, 1, 25], center = true);\n            \n        // Decorative border cutouts\n        for (i = [-1:1]) {\n            translate([i * 10, -20.5, 25])\n                cylinder(h = 3, r = 2, center = true);\n        }\n    }\n}\n\n// Butteroil liquid level indicator\nmodule butteroil_level() {\n    color([0.98, 0.88, 0.55, 0.8])\n    translate([0, 0, 5])\n        cylinder(h = 50, r = 17, center = false);\n}\n\n// Air bubbles for realism\nmodule bubbles() {\n    color([1, 1, 1, 0.3])\n    for (i = [0:5]) {\n        translate([\n            sin(i * 137.5) * 12,\n            cos(i * 137.5) * 12,\n            10 + i * 8\n        ])\n            sphere(r = 1 + sin(i) * 0.5);\n    }\n}\n\n// Assembly\nunion() {\n    // Bottle assembly\n    color(\"ivory\")\n    union() {\n        bottle_body();\n        bottle_neck();\n    }\n    \n    // Threads on neck\n    color(\"ivory\")\n    cap_threads();\n    \n    // Cap\n    bottle_cap();\n    \n    // Label\n    label();\n    \n    // Butteroil liquid\n    butteroil_level();\n    \n    // Air bubbles\n    bubbles();\n}",
    "renders": true
  },
  {
    "food_item": "cremefresh",
    "openscad_code": "// Creme Fraiche container - 3D printable model\n// Overall dimensions: 70mm diameter, 45mm height\n\n$fn = 50;\n\n// Main container body\nmodule container_body() {\n    color(\"white\") difference() {\n        // Main cylindrical body\n        cylinder(h = 35, r = 30, center = false);\n        \n        // Hollow out the inside\n        translate([0, 0, 2])\n            cylinder(h = 33, r = 28, center = false);\n    }\n}\n\n// Curved bottom for realistic container shape\nmodule container_bottom() {\n    color(\"white\") difference() {\n        // Rounded bottom\n        translate([0, 0, -5])\n            minkowski() {\n                cylinder(h = 10, r = 30, center = false);\n                sphere(r = 5);\n            }\n        \n        // Hollow rounded bottom\n        translate([0, 0, -5])\n            minkowski() {\n                cylinder(h = 10, r = 28, center = false);\n                sphere(r = 5);\n            }\n    }\n}\n\n// Lip/rim at top of container\nmodule container_lip() {\n    color(\"white\")\n    translate([0, 0, 35])\n        cylinder(h = 5, r1 = 32, r2 = 30, center = false);\n}\n\n// Foil lid with pull tab\nmodule foil_lid() {\n    color(\"silver\") union() {\n        // Main lid disk\n        translate([0, 0, 40])\n            cylinder(h = 1, r = 32, center = false);\n        \n        // Pull tab\n        translate([30, 0, 40])\n            rotate([0, 0, 45])\n                cube([15, 8, 1], center = true);\n    }\n}\n\n// Surface texture for creamy appearance\nmodule creme_texture() {\n    color(\"antiquewhite\") \n    translate([0, 0, 35])\n        cylinder(h = 5, r = 28.5, center = false);\n    \n    // Small surface irregularities\n    for(i = [0:20]) {\n        translate([\n            sin(i * 137.5) * 25,\n            cos(i * 137.5) * 25,\n            39.5\n        ]) {\n            sphere(r = 0.5 + 0.5 * sin(i));\n        }\n    }\n}\n\n// Label band around container\nmodule label_band() {\n    color(\"lightblue\") difference() {\n        // Main label\n        translate([0, 0, 20])\n            cylinder(h = 12, r = 30.2, center = false);\n        \n        // Text area cutout (simplified)\n        translate([0, 0, 21])\n            cube([40, 20, 10], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    container_body();\n    container_bottom();\n    container_lip();\n    foil_lid();\n    creme_texture();\n    label_band();\n}",
    "renders": true
  },
  {
    "food_item": "fromagefrais",
    "openscad_code": "// Fromage frais – 3D printable, medium-complexity realistic model\n// Overall size ≈ 55 mm diameter × 40 mm high\n\n// Colour definitions\n$fn = 48;\n\n// Main cup body – truncated cone with recessed lip\nmodule cup_body() {\n    difference() {\n        // Outer shell\n        cylinder(h = 35, r1 = 28, r2 = 25, center = false);\n        // Inner cavity\n        translate([0, 0, 2])\n            cylinder(h = 34, r1 = 26, r2 = 23, center = false);\n    }\n}\n\n// Curd surface with gentle undulations\nmodule curd_top() {\n    color(\"ivory\")\n    difference() {\n        // Main curd volume\n        translate([0, 0, 34.5])\n            cylinder(h = 5, r1 = 25.5, r2 = 25.5, center = false);\n        // Gentle dimples for realistic texture\n        for (r = [0 : 60 : 300], a = [30 : 120 : 270]) {\n            translate([\n                r * cos(a) * 0.5,\n                r * sin(a) * 0.5,\n                34.4\n            ])\n                scale([1, 1, 0.3])\n                    sphere(d = 6, $fn = 16);\n        }\n    }\n}\n\n// Foil lid with crimped edge\nmodule foil_lid() {\n    color(\"silver\")\n    union() {\n        // Top disk\n        translate([0, 0, 39.5])\n            cylinder(h = 0.2, r = 28.5, center = false);\n        // Crimped rim\n        for (i = [0 : 15 : 345]) {\n            rotate([0, 0, i])\n                translate([28.5, 0, 39.5])\n                    cube([2, 1, 0.4], center = true);\n        }\n    }\n}\n\n// Optional spoon impression on top\nmodule spoon_impression() {\n    color(\"ivory\")\n    difference() {\n        curd_top();\n        translate([0, -6, 35])\n            rotate([90, 0, 0])\n                cylinder(h = 40, r = 4, center = false);\n    }\n}\n\n// Assembly\ntranslate([0, 0, 0]) {\n    color(\"white\") cup_body();\n    spoon_impression();\n    foil_lid();\n}",
    "renders": true
  },
  {
    "food_item": "junket",
    "openscad_code": "// Junket (milk pudding) in a traditional glass dish\n// Overall dimensions: ~80mm diameter, ~45mm height\n\n// Main dessert color - creamy off-white\ncolor([1, 0.98, 0.94]) \n    union() {\n        // Glass dish base\n        difference() {\n            // Outer dish\n            cylinder(h = 15, r1 = 40, r2 = 35, $fn = 64);\n            \n            // Hollow inside\n            translate([0, 0, 1])\n                cylinder(h = 14, r1 = 38, r2 = 33, $fn = 64);\n        }\n        \n        // Junket pudding body\n        translate([0, 0, 15])\n            difference() {\n                // Main pudding mass\n                cylinder(h = 25, r = 35, $fn = 64);\n                \n                // Slight depression in center\n                translate([0, 0, -0.5])\n                    cylinder(h = 5, r = 15, $fn = 32);\n            }\n        \n        // Pudding surface texture - small bumps\n        module surface_bumps() {\n            for(i = [0:7]) {\n                rotate([0, 0, i * 45])\n                for(j = [0:2]) {\n                    translate([10 + j * 8, 0, 38 + sin(i * 30) * 0.5])\n                        sphere(r = 1.2, $fn = 8);\n                }\n            }\n        }\n        \n        // Add surface texture\n        surface_bumps();\n        \n        // Caramel sauce drizzle\n        color([0.72, 0.52, 0.25])\n        union() {\n            // Main drizzle lines\n            for(angle = [30, 120, 210, 300]) {\n                rotate([0, 0, angle])\n                translate([0, 0, 39])\n                    linear_extrude(height = 0.8, twist = 5)\n                        polygon(points = [[0, 0], [15, 2], [20, 0], [15, -2]]);\n            }\n            \n            // Pooling at edges\n            difference() {\n                cylinder(h = 1, r = 32, $fn = 64);\n                cylinder(h = 1.1, r = 28, $fn = 64);\n            }\n        }\n        \n        // Nutmeg sprinkle dots\n        color([0.6, 0.4, 0.2])\n        module nutmeg_sprinkles() {\n            seed_positions = [\n                [5, 10], [-8, 12], [12, -5], [-10, -8],\n                [0, 15], [-15, 0], [18, 5], [-5, -15]\n            ];\n            \n            for(pos = seed_positions) {\n                translate([pos[0], pos[1], 40.5])\n                    sphere(r = 0.3, $fn = 6);\n            }\n        }\n        \n        nutmeg_sprinkles();\n        \n        // Dish foot/base\n        translate([0, 0, -2])\n            cylinder(h = 3, r1 = 30, r2 = 35, $fn = 64);\n    }",
    "renders": true
  },
  {
    "food_item": "rennet",
    "openscad_code": "// Rennet tablet - realistic style, medium complexity\n// Overall dimensions: ~60mm x 40mm x 8mm\n\n$fn = 32;\n\n// Main tablet body with rounded top and flat bottom\nmodule tablet_body() {\n    color([0.95, 0.92, 0.88]) {\n        // Base cylinder\n        cylinder(h = 6, r1 = 30, r2 = 30);\n        \n        // Rounded top dome\n        translate([0, 0, 6])\n            scale([1, 1, 0.4])\n                sphere(r = 30);\n    }\n}\n\n// Tablet break lines for scoring\nmodule break_lines() {\n    color([0.7, 0.7, 0.7]) {\n        // Vertical score line\n        translate([0, -0.1, 3])\n            cube([0.2, 40, 0.5]);\n        \n        // Horizontal score line\n        translate([-20, 0, 3])\n            cube([40, 0.2, 0.5]);\n    }\n}\n\n// Surface texture - small indentations\nmodule surface_texture() {\n    color([0.9, 0.87, 0.83]) {\n        for (x = [-25:5:25]) {\n            for (y = [-15:5:15]) {\n                // Skip center area\n                if (sqrt(x*x + y*y) < 28) {\n                    translate([x, y, 7.9])\n                        sphere(r = 0.8);\n                }\n            }\n        }\n    }\n}\n\n// Crumbled edge details\nmodule crumbled_edges() {\n    color([0.85, 0.82, 0.78]) {\n        // Random small cubes for crumbled look\n        for (i = [1:8]) {\n            rotate([0, 0, i * 45])\n                translate([30 - i, 0, 1])\n                    cube([1 + i/3, 1.5, 0.8]);\n        }\n        \n        // More crumbling on one side\n        for (j = [1:5]) {\n            rotate([0, 0, 180 + j * 20])\n                translate([28, 0, 0.5])\n                    cube([1 + j/2, 1, 1.2]);\n        }\n    }\n}\n\n// Manufacturing stamp/embossing\nmodule stamp() {\n    color([0.6, 0.6, 0.6]) {\n        translate([0, 0, 7.5])\n            linear_extrude(height = 0.3)\n                text(\"RENNET\", size = 6, halign = \"center\", valign = \"center\");\n    }\n}\n\n// Assembly with slight rotation for natural look\nrotate([5, 0, 10]) {\n    difference() {\n        union() {\n            tablet_body();\n            surface_texture();\n        }\n        \n        // Remove bottom flat surface\n        translate([0, 0, -1])\n            cube([100, 100, 2], center = true);\n    }\n    \n    break_lines();\n    crumbled_edges();\n    stamp();\n}",
    "renders": true
  },
  {
    "food_item": "albumin",
    "openscad_code": "// Realistic Albumin (Egg White) Model - Medium Complexity\n// Features: textured surface, slight irregularity, realistic proportions\n\n$fn = 32;\n\n// Main parameters\negg_width = 45;\negg_height = 35;\nwall_thickness = 2;\n\n// Color definitions\nalbumin_color = [0.95, 0.95, 0.92];\nshadow_color = [0.85, 0.85, 0.82];\n\n// Create main albumin body\nmodule albumin_body() {\n    color(albumin_color) {\n        // Main ellipsoid shape\n        scale([1, 0.9, 0.7]) \n            sphere(d = egg_width);\n        \n        // Add slight irregularities for realism\n        for(i = [0:5]) {\n            rotate([rand(0, 10), rand(0, 360), rand(0, 90)])\n                translate([rand(-2, 2), rand(-2, 2), rand(-1, 1)])\n                    scale([rand(0.9, 1.1), rand(0.9, 1.1), rand(0.9, 1.1)])\n                        sphere(d = egg_width * 1.05);\n        }\n    }\n}\n\n// Create surface texture\nmodule surface_texture() {\n    color(albumin_color) {\n        // Small bumps for realistic texture\n        for(i = [0:20]) {\n            theta = rand(0, 360);\n            phi = rand(0, 180);\n            r = egg_width/2 * 0.98;\n            \n            x = r * cos(theta) * sin(phi);\n            y = r * sin(theta) * sin(phi) * 0.9;\n            z = r * cos(phi) * 0.7;\n            \n            translate([x, y, z])\n                sphere(d = rand(0.5, 1.5));\n        }\n        \n        // Subtle creases\n        for(i = [0:3]) {\n            rotate([rand(0, 20), rand(0, 360), 0])\n                translate([0, 0, rand(-5, 5)])\n                    scale([1, rand(0.8, 1), rand(0.8, 1)])\n                        cylinder(h = egg_width, d1 = egg_width * 0.1, d2 = egg_width * 0.05, center = true);\n        }\n    }\n}\n\n// Create base flattening for stability\nmodule base_flatten() {\n    difference() {\n        albumin_body();\n        \n        // Flatten bottom for 3D printing\n        translate([0, 0, -egg_height/2 - 1])\n            cube([egg_width * 1.2, egg_width * 1.2, egg_height], center = true);\n    }\n}\n\n// Add subtle shadows for depth\nmodule add_shadows() {\n    color(shadow_color) {\n        translate([2, 1, -egg_height/4])\n            scale([1, 0.9, 0.3])\n                sphere(d = egg_width * 0.8);\n        \n        translate([-1, -1, -egg_height/3])\n            scale([0.8, 0.7, 0.2])\n                sphere(d = egg_width * 0.6);\n    }\n}\n\n// Combine all elements\nunion() {\n    // Main body with flattened base\n    base_flatten();\n    \n    // Surface texture\n    surface_texture();\n    \n    // Subtle shadows for realism\n    add_shadows();\n}\n\n// Helper function for random values\nfunction rand(min, max) = min + (max - min) * rands(0, 1, 1)[0];",
    "renders": true
  },
  {
    "food_item": "ovalbumin",
    "openscad_code": "// Ovalbumin (Egg White) in Realistic Style\n// Medium complexity 3D printable model\n\n$fn = 50;  // Smooth curves for realistic appearance\n\n// Main parameters\negg_white_length = 75;\negg_white_width = 55;\negg_white_height = 25;\nwall_thickness = 2;\n\n// Color definitions\negg_white_color = [0.98, 0.98, 0.95];\nhighlight_color = [1, 1, 1];\n\n// Main egg white body with realistic organic shape\nmodule egg_white_body() {\n    // Create base ellipsoid shape\n    difference() {\n        scale([1, 0.9, 0.6]) \n            sphere(d = egg_white_length);\n        \n        // Trim bottom flat\n        translate([0, 0, -egg_white_height/2 - 1])\n            cube([egg_white_length*2, egg_white_width*2, 2], center = true);\n    }\n}\n\n// Create texture bubbles for realistic appearance\nmodule texture_bubbles() {\n    random_seed = 42;\n    for(i = [0:35]) {\n        bubble_size = rands(1.5, 3.5, 1)[0];\n        x_pos = rands(-egg_white_length/3, egg_white_length/3, 1)[0];\n        y_pos = rands(-egg_white_width/3, egg_white_width/3, 1)[0];\n        z_pos = rands(0, egg_white_height/2 - 2, 1)[0];\n        \n        translate([x_pos, y_pos, z_pos])\n            color(highlight_color)\n                sphere(d = bubble_size);\n    }\n}\n\n// Create slight indentations for realistic surface\nmodule surface_indentations() {\n    for(i = [0:20]) {\n        indent_size = rands(2, 4, 1)[0];\n        x_pos = rands(-egg_white_length/2.5, egg_white_length/2.5, 1)[0];\n        y_pos = rands(-egg_white_width/2.5, egg_white_width/2.5, 1)[0];\n        z_pos = rands(-egg_white_height/4, egg_white_height/4, 1)[0];\n        \n        translate([x_pos, y_pos, z_pos])\n            rotate([rands(0, 360, 1)[0], rands(0, 360, 1)[0], rands(0, 360, 1)[0]])\n                scale([1, 1, 0.3])\n                    sphere(d = indent_size);\n    }\n}\n\n// Create thick edge around the perimeter\nmodule thick_edge() {\n    difference() {\n        // Outer shell\n        scale([1, 0.9, 0.6]) \n            sphere(d = egg_white_length);\n        \n        // Inner hollow\n        scale([0.85, 0.76, 0.45]) \n            sphere(d = egg_white_length);\n        \n        // Trim bottom\n        translate([0, 0, -egg_white_height/2 - 1])\n            cube([egg_white_length*2, egg_white_width*2, 2], center = true);\n    }\n}\n\n// Create pooling effect at bottom\nmodule bottom_pool() {\n    translate([0, 0, -egg_white_height/2 + 1])\n        scale([1.1, 1, 0.2])\n            cylinder(h = 3, d = egg_white_width * 0.8, center = true);\n}\n\n// Main assembly\nunion() {\n    // Base egg white structure\n    color(egg_white_color) {\n        difference() {\n            // Main body\n            egg_white_body();\n            \n            // Hollow center for printing efficiency\n            scale([0.8, 0.7, 0.4])\n                sphere(d = egg_white_length * 0.9);\n        }\n    }\n    \n    // Add thick edge for realism\n    color(egg_white_color) {\n        thick_edge();\n    }\n    \n    // Add bottom pooling\n    color(egg_white_color) {\n        bottom_pool();\n    }\n    \n    // Add surface texture\n    difference() {\n        // Main body for texture\n        scale([0.95, 0.85, 0.55]) \n            sphere(d = egg_white_length);\n        \n        // Surface indentations\n        surface_indentations();\n    }\n    \n    // Add highlight bubbles\n    texture_bubbles();\n}\n\n// Add slight gloss effect\ntranslate([0, 0, egg_white_height/2 - 1])\n    scale([0.3, 0.3, 0.1])\n        color(highlight_color)\n            sphere(d = egg_white_length * 0.3);",
    "renders": true
  },
  {
    "food_item": "ovomucin",
    "openscad_code": "// Ovomucin food item - realistic medium complexity\n// Ovomucin appears as a fibrous, gel-like substance with a translucent appearance\n// Typically found in egg whites, has a stringy, web-like structure\n\n$fn = 32;\n\n// Main ovomucin gel structure\nmodule ovomucin_gel() {\n    color([0.9, 0.95, 0.85, 0.7])  // Translucent off-white\n    union() {\n        // Central gel mass\n        sphere(15);\n        \n        // Fibrous extensions\n        for(i = [0:45:360]) {\n            rotate([0, 0, i])\n            translate([10, 0, 0])\n            rotate([90, 0, 0])\n            cylinder(h1 = 20, h2 = 0, r1 = 5, r2 = 2);\n        }\n    }\n}\n\n// Internal fibrous network\nmodule fibrous_network() {\n    color([0.85, 0.9, 0.75, 0.5])  // More translucent\n    union() {\n        // Horizontal fibers\n        for(z = [-10:5:10]) {\n            translate([0, 0, z])\n            rotate([90, 0, 0])\n            cylinder(h = 30, r = 0.5);\n        }\n        \n        // Vertical fibers\n        for(x = [-10:5:10]) {\n            for(y = [-10:5:10]) {\n                translate([x, y, 0])\n                cylinder(h = 20, r = 0.5);\n            }\n        }\n        \n        // Diagonal fibers\n        for(i = [0:30:330]) {\n            rotate([0, 0, i])\n            translate([0, 8, 0])\n            rotate([45, 0, 0])\n            cylinder(h = 25, r = 0.3);\n        }\n    }\n}\n\n// Surface texture details\nmodule surface_texture() {\n    color([0.95, 1, 0.9, 0.8])\n    difference() {\n        sphere(16);  // Slightly larger than gel\n        \n        // Small surface irregularities\n        for(i = [0:20:359]) {\n            for(j = [0:20:179]) {\n                rotate([j, i, 0])\n                translate([15, 0, 0])\n                sphere(0.8);\n            }\n        }\n    }\n}\n\n// Add some water droplets on surface\nmodule water_droplets() {\n    color([0.7, 0.85, 1, 0.6])  // Clear water droplets\n    union() {\n        for(i = [1:10]) {\n            rotate([rand(i)*360, rand(i+10)*180, rand(i+20)*360])\n            translate([15 + rand(i+30)*2, 0, 0])\n            sphere(0.5 + rand(i+40)*0.5);\n        }\n    }\n}\n\n// Base support for 3D printing\nmodule base() {\n    color([0.9, 0.9, 0.9])\n    cylinder(h = 2, r = 20);\n}\n\n// Main assembly\nunion() {\n    // Base support\n    translate([0, 0, -2])\n    base();\n    \n    // Main ovomucin structure\n    translate([0, 0, 2])\n    union() {\n        ovomucin_gel();\n        \n        translate([0, 0, 0])\n        fibrous_network();\n        \n        translate([0, 0, 0])\n        surface_texture();\n        \n        translate([0, 0, 0])\n        water_droplets();\n    }\n}",
    "renders": true
  },
  {
    "food_item": "ovoglobulin",
    "openscad_code": "// Ovoglobulin Food Item - Realistic Style (Medium Complexity)\n// A stylized egg white and yolk combination with texture\n\negg_diameter = 45;\negg_height = 55;\nwall_thickness = 2;\n\n// Main egg white body\nmodule egg_white() {\n    color(\"white\") {\n        difference() {\n            // Main egg white shape - slightly flattened sphere\n            scale([1, 1, 1.2]) \n                sphere(d=egg_diameter);\n            \n            // Hollow out the center for yolk placement\n            translate([0, 0, -5])\n                scale([1, 1, 1.3])\n                    sphere(d=egg_diameter - wall_thickness*2);\n        }\n    }\n}\n\n// Realistic egg yolk with membrane\nmodule egg_yolk() {\n    color([1, 0.8, 0.1]) {\n        union() {\n            // Main yolk body\n            translate([0, 0, 5])\n                sphere(d=egg_diameter * 0.6);\n            \n            // Yolk membrane ridge\n            translate([0, 0, 5])\n                sphere(d=egg_diameter * 0.62);\n        }\n    }\n}\n\n// Egg white texture - small bumps for albumen structure\nmodule egg_texture() {\n    color(\"white\") {\n        for(i = [0:15]) {\n            for(j = [0:7]) {\n                angle = i * 24;\n                height = j * 6 + 3;\n                radius = egg_diameter/2 * sin(height/egg_height * 180) - wall_thickness;\n                \n                translate([cos(angle) * radius, sin(angle) * radius, height])\n                    sphere(d=1.5);\n            }\n        }\n    }\n}\n\n// Yolk surface texture - small oil droplets\nmodule yolk_texture() {\n    color([0.9, 0.7, 0.05]) {\n        for(i = [0:20]) {\n            angle = i * 18;\n            for(j = [0:3]) {\n                y_angle = j * 60;\n                translate([\n                    cos(angle) * sin(y_angle) * (egg_diameter * 0.28),\n                    sin(angle) * sin(y_angle) * (egg_diameter * 0.28),\n                    5 + cos(y_angle) * (egg_diameter * 0.28)\n                ]) {\n                    sphere(d=0.8);\n                }\n            }\n        }\n    }\n}\n\n// Base ring for stability\nmodule base_ring() {\n    color(\"white\") {\n        difference() {\n            cylinder(h=3, d1=egg_diameter + 4, d2=egg_diameter + 2);\n            cylinder(h=4, d=egg_diameter);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    base_ring();\n    \n    translate([0, 0, 3])\n        egg_white();\n    \n    translate([0, 0, 3])\n        egg_yolk();\n    \n    translate([0, 0, 3])\n        egg_texture();\n    \n    translate([0, 0, 3])\n        yolk_texture();\n}",
    "renders": true
  },
  {
    "food_item": "ovotransferrin",
    "openscad_code": "// Ovotransferrin (egg white protein) in realistic style\n// Medium complexity OpenSCAD model\n\n// Overall dimensions\nprotein_size = 80;\n\n// Colors\ncolor_protein = [0.95, 0.95, 0.85];\ncolor_highlight = [1, 1, 0.9];\ncolor_shadow = [0.9, 0.9, 0.8];\n\n// Main protein body module\nmodule protein_body() {\n    color(color_protein) {\n        // Central globular core\n        sphere(d = protein_size * 0.8);\n        \n        // Add lobes\n        translate([protein_size * 0.3, 0, 0])\n            sphere(d = protein_size * 0.5);\n        translate([-protein_size * 0.25, protein_size * 0.2, 0])\n            sphere(d = protein_size * 0.4);\n        translate([-protein_size * 0.25, -protein_size * 0.2, 0])\n            sphere(d = protein_size * 0.4);\n    }\n}\n\n// Surface texture for crystalline appearance\nmodule surface_texture() {\n    color(color_highlight) {\n        for (i = [0:15]) {\n            theta = i * 24;\n            for (j = [0:7]) {\n                phi = j * 22.5;\n                x = cos(theta) * sin(phi) * protein_size * 0.4;\n                y = sin(theta) * sin(phi) * protein_size * 0.4;\n                z = cos(phi) * protein_size * 0.4;\n                \n                translate([x, y, z])\n                    sphere(d = protein_size * 0.05);\n            }\n        }\n    }\n}\n\n// Add grooves/folds characteristic of ovotransferrin\nmodule protein_folds() {\n    color(color_shadow) {\n        // Main cleft\n        translate([protein_size * 0.1, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h = protein_size * 0.8, d = protein_size * 0.15, $fn = 16);\n        \n        // Secondary grooves\n        for (i = [1:3]) {\n            angle = i * 120;\n            rotate([0, 0, angle])\n                translate([protein_size * 0.3, 0, 0])\n                    rotate([0, 90, 0])\n                        cylinder(h = protein_size * 0.4, d = protein_size * 0.08, $fn = 12);\n        }\n    }\n}\n\n// Iron binding sites (reddish spots)\nmodule iron_sites() {\n    color([0.8, 0.4, 0.3]) {\n        translate([protein_size * 0.2, protein_size * 0.2, protein_size * 0.2])\n            sphere(d = protein_size * 0.08);\n        translate([-protein_size * 0.2, -protein_size * 0.2, protein_size * 0.2])\n            sphere(d = protein_size * 0.08);\n    }\n}\n\n// Base platform for printing\nmodule base() {\n    color([0.9, 0.9, 0.9]) \n        cylinder(h = 2, d = protein_size * 1.2, $fn = 32);\n}\n\n// Assembly\nunion() {\n    base();\n    \n    translate([0, 0, 3])\n        union() {\n            protein_body();\n            surface_texture();\n            protein_folds();\n            iron_sites();\n        }\n}",
    "renders": true
  },
  {
    "food_item": "avidin",
    "openscad_code": "// Avidin-inspired egg white protein structure - realistic style\n// Dimensions: 60mm x 40mm x 35mm\n\nmodule avidin_core() {\n    // Main egg white body with slight elliptical shape\n    color(\"ivory\") \n    scale([1, 0.9, 0.75]) \n    sphere(d=40, $fn=64);\n    \n    // Top protein binding pocket\n    color(\"beige\")\n    translate([0, 0, 13])\n    scale([1.2, 1, 0.5])\n    sphere(d=12, $fn=32);\n}\n\nmodule tetramer_subunits() {\n    // Four subunits arranged in tetramer formation\n    for(i=[0:3]) {\n        rotate([0, 0, i*90])\n        translate([10, 0, 0])\n        color(\"whitesmoke\")\n        scale([1.2, 0.8, 0.6])\n        sphere(d=15, $fn=32);\n    }\n}\n\nmodule protein_folds() {\n    // Beta-sheet ridges\n    for(angle=[0:45:315]) {\n        rotate([90, 0, angle])\n        translate([0, 0, 15])\n        color(\"gainsboro\")\n        scale([0.1, 0.8, 2.5])\n        cube([20, 2, 1], center=true);\n    }\n    \n    // Alpha-helix coils\n    for(i=[0:5]) {\n        rotate([0, 0, i*60])\n        translate([18, 0, 5])\n        color(\"lightgray\")\n        rotate([90, 0, 0])\n        cylinder(h=8, d1=3, d2=2, $fn=12);\n    }\n}\n\nmodule surface_texture() {\n    // Small bumps for realistic protein texture\n    for(i=[0:15]) {\n        rotate([0, 0, i*24])\n        translate([19, 0, 0])\n        rotate([90, 0, 0])\n        for(j=[0:3]) {\n            translate([0, j*5-7.5, 0])\n            color(\"ivory\")\n            sphere(d=1.5, $fn=8);\n        }\n    }\n}\n\nmodule avidin_structure() {\n    union() {\n        avidin_core();\n        tetramer_subunits();\n        protein_folds();\n        surface_texture();\n    }\n}\n\n// Create avidin centered on build plate\navidin_structure();",
    "renders": true
  },
  {
    "food_item": "yolk",
    "openscad_code": "// Realistic Egg Yolk with Medium Complexity\n// 3D printable, ~70mm diameter, includes texture and color variations\n\n// Main yolk parameters\nyolk_radius = 35;\nyolk_height = 30;\nwall_thickness = 2;\n\n// Color definitions\nyolk_color = [0.95, 0.65, 0.15, 1.0];  // Bright yellow-orange\ndarker_yolk = [0.85, 0.55, 0.10, 1.0]; // Slightly darker for texture\nhighlight_color = [1.0, 0.8, 0.2, 0.6];  // Glossy highlight\n\n// Create the main yolk body\nmodule yolk_body() {\n    color(yolk_color) {\n        // Main sphere slightly flattened\n        scale([1, 1, 0.85])\n        sphere(r=yolk_radius, $fn=100);\n        \n        // Add slight bulge at top for realistic shape\n        translate([0, 0, yolk_height * 0.7])\n        scale([0.95, 0.95, 0.4])\n        sphere(r=yolk_radius * 0.8, $fn=50);\n    }\n}\n\n// Create membrane texture around yolk\nmodule membrane_texture() {\n    difference() {\n        // Outer membrane shell\n        color([1, 0.9, 0.6, 0.3])\n        scale([1, 1, 0.85])\n        sphere(r=yolk_radius + wall_thickness, $fn=100);\n        \n        // Remove inner part to create hollow shell\n        scale([1, 1, 0.85])\n        sphere(r=yolk_radius, $fn=100);\n    }\n}\n\n// Add realistic surface texture with small bumps\nmodule surface_texture() {\n    // Create random bumps across surface using golden ratio\n    phi = (1 + sqrt(5)) / 2;\n    \n    for(i = [0:5:300]) {\n        theta = i * phi * 137.5;  // Fibonacci spiral\n        phi_rad = acos(1 - 2 * (i / 300));\n        \n        x = yolk_radius * 0.95 * sin(phi_rad) * cos(theta);\n        y = yolk_radius * 0.95 * sin(phi_rad) * sin(theta);\n        z = yolk_radius * 0.85 * 0.85 * cos(phi_rad);\n        \n        // Skip bumps near bottom to prevent printing issues\n        if(z > -yolk_radius * 0.5) {\n            translate([x, y, z])\n            color(darker_yolk)\n            scale([1, 1, 0.5])\n            sphere(r=1 + sin(i) * 0.5, $fn=8);\n        }\n    }\n}\n\n// Add glossy highlight on top\nmodule highlight() {\n    color(highlight_color) {\n        translate([yolk_radius * 0.3, -yolk_radius * 0.2, yolk_height * 0.8])\n        scale([1, 0.7, 0.3])\n        sphere(r=8, $fn=20);\n        \n        translate([-yolk_radius * 0.1, yolk_radius * 0.3, yolk_height * 0.75])\n        scale([0.8, 1.2, 0.2])\n        sphere(r=5, $fn=15);\n    }\n}\n\n// Create slight indent for realistic yolk appearance\nmodule yolk_indent() {\n    difference() {\n        yolk_body();\n        \n        // Subtle indent at top\n        translate([0, 0, yolk_height * 0.9])\n        scale([0.8, 0.8, 0.5])\n        sphere(r=yolk_radius * 0.3, $fn=30);\n    }\n}\n\n// Main assembly\nunion() {\n    // Solid yolk (for printing)\n    yolk_indent();\n    \n    // Optional membrane (uncomment for hollow yolk)\n    // membrane_texture();\n    \n    // Surface details\n    surface_texture();\n    \n    // Highlights for glossy appearance\n    highlight();\n}\n\n// Add small support base for printing\ntranslate([0, 0, -yolk_height * 0.85 - 1])\ncolor(yolk_color)\ncylinder(h=2, r1=yolk_radius * 0.3, r2=yolk_radius * 0.4, $fn=32);",
    "renders": true
  },
  {
    "food_item": "shell",
    "openscad_code": "// Realistic 3D printable scallop shell (Pecten sp.) ~70 mm wide\n// Medium complexity – ribs, fan shape, hinge, curved bowl\n\nmodule shell() {\n    color(\"bisque\")\n    difference() {\n        // Outer convex shell\n        scale([1, 0.85, 0.4])\n        sphere(d = 70, $fn = 120);\n\n        // Carve inner cavity – leave 2 mm walls\n        translate([0, 0, -4])\n        scale([0.88, 0.75, 0.45])\n        sphere(d = 70, $fn = 120);\n\n        // Flatten top for 3D-printability\n        translate([0, 0, 10])\n        cube([80, 80, 20], center = true);\n    }\n\n    // Radial ribs\n    for (a = [0:12:359]) {\n        rotate([0, 0, a])\n        translate([0, 0, -2])\n        linear_extrude(height = 7, twist = 5, scale = 0.9)\n        translate([-2, 20, 0])\n        square([4, 15]);\n    }\n\n    // Hinge “ears”\n    difference() {\n        union() {\n            translate([-14, 34, 0])\n            rotate([90, 0, 0])\n            cylinder(h = 12, d1 = 10, d2 = 14, $fn = 20);\n            mirror([1, 0, 0])\n            translate([-14, 34, 0])\n            rotate([90, 0, 0])\n            cylinder(h = 12, d1 = 10, d2 = 14, $fn = 20);\n        }\n        // Hollow hinge to save material\n        translate([-10, 34, 0])\n        rotate([90, 0, 0])\n        cylinder(h = 14, d = 5, $fn = 12);\n        mirror([1, 0, 0])\n        translate([-10, 34, 0])\n        rotate([90, 0, 0])\n        cylinder(h = 14, d = 5, $fn = 12);\n    }\n\n    // Growth lines (thin concentric ridges)\n    for (r = [10:5:30]) {\n        difference() {\n            scale([1, 0.85, 0.4])\n            translate([0, 0, 0.2])\n            sphere(d = 70 + r * 2, $fn = 120);\n            scale([1, 0.85, 0.4])\n            sphere(d = 70 + r * 2 - 0.5, $fn = 120);\n        }\n    }\n\n    // Tiny food texture dots\n    for (i = [0:30]) {\n        rotate([0, 0, rands(0, 360, 1)[0]])\n        translate([rands(8, 30, 1)[0], rands(0, 25, 1)[0], 0.5])\n        sphere(d = 0.8, $fn = 8);\n    }\n}\n\nshell();",
    "renders": true
  },
  {
    "food_item": "albumen",
    "openscad_code": "// Realistic 3D printable albumen (fried egg white)\n// Dimensions: ~65 mm diameter, ~8 mm thick at center\n\n// Main albumen base\nmodule albumen_base() {\n    color(\"Ivory\")\n    difference() {\n        // Main disk with organic wavy edge\n        scale([1, 0.9, 0.3])  // Slightly oval\n        sphere(d=65, $fn=80);\n        \n        // Remove bottom half for flat base\n        translate([0, 0, -10])\n        cube([100, 100, 20], center=true);\n        \n        // Create wavy edge with random variations\n        for(i=[0:15]) {\n            rotate([0, 0, i*24])\n            translate([30 + 3*sin(i*3), 0, 2])\n            scale([1, 1, 3])\n            sphere(d=8 + 2*cos(i*2));\n        }\n    }\n}\n\n// Thin film layer on top\nmodule thin_film() {\n    color(\"AntiqueWhite\")\n    translate([0, 0, 2.5])\n    scale([1, 0.9, 0.05])\n    sphere(d=60, $fn=60);\n}\n\n// Small bubbles in albumen\nmodule bubbles() {\n    color(\"White\")\n    for(i=[0:20]) {\n        translate([\n            20*cos(i*137.5) + 5*cos(i*2.3),\n            18*sin(i*137.5) + 4*sin(i*1.7),\n            1.5 + 0.3*sin(i*3)\n        ])\n        sphere(d=0.5 + 0.5*cos(i*2));\n    }\n}\n\n// Slightly thicker edge ring\nmodule edge_ring() {\n    color(\"Ivory\")\n    difference() {\n        // Outer ring\n        translate([0, 0, 0.5])\n        scale([1, 0.9, 0.2])\n        sphere(d=62, $fn=80);\n        \n        // Remove inner part\n        translate([0, 0, -1])\n        scale([1, 0.9, 1])\n        sphere(d=55, $fn=80);\n    }\n}\n\n// Surface texture details\nmodule surface_texture() {\n    color(\"Ivory\")\n    for(i=[0:30]) {\n        translate([\n            25*cos(i*50) + 5*cos(i*7),\n            22*sin(i*50) + 5*sin(i*5),\n            2.8\n        ])\n        sphere(d=0.3 + 0.2*sin(i*4));\n    }\n}\n\n// Combine all parts\nunion() {\n    albumen_base();\n    thin_film();\n    bubbles();\n    edge_ring();\n    surface_texture();\n}",
    "renders": true
  },
  {
    "food_item": "omelette",
    "openscad_code": "// Realistic Omelette - Medium Complexity\n// Features: Folded egg base with cheese, bell peppers, onions and chives\n\n$fn = 50;\nwall_thickness = 1.2;\n\n// Main colors\negg_color = \"#FFF8DC\";\ncheese_color = \"#FFD700\";\npepper_red = \"#FF4500\";\npepper_green = \"#32CD32\";\nonion_color = \"#F5F5DC\";\nchive_color = \"#228B22\";\n\nmodule egg_base() {\n    // Main egg body - oval shape\n    translate([0, 0, 5])\n    scale([1, 0.8, 0.3])\n    sphere(r = 30);\n    \n    // Folded edge - creates the characteristic omelette fold\n    difference() {\n        translate([0, 15, 3])\n        scale([1, 0.4, 0.2])\n        sphere(r = 30);\n        \n        translate([0, 0, -5])\n        cube([100, 100, 10], center = true);\n    }\n}\n\nmodule melted_cheese() {\n    // Cheese layer on top with irregular edges\n    color(cheese_color)\n    translate([0, 0, 8])\n    scale([0.9, 0.7, 0.1])\n    sphere(r = 30);\n    \n    // Cheese drips\n    for(i = [0:45:315]) {\n        rotate([0, 0, i])\n        translate([22, 0, 8])\n        scale([0.3, 0.3, 0.8])\n        cylinder(r = 4, h = 3);\n    }\n}\n\nmodule bell_pepper_pieces() {\n    // Red bell pepper squares\n    color(pepper_red)\n    for(pos = [[-15, -10, 10], [10, 8, 10], [-8, 12, 10], [18, -5, 10]]) {\n        translate(pos)\n        rotate([0, 0, rands(0, 90, 1)[0]])\n        scale([1, 0.7, 0.3])\n        cube([5, 5, 1.5], center = true);\n    }\n    \n    // Green bell pepper pieces\n    color(pepper_green)\n    for(pos = [[-12, 5, 10], [15, -8, 10], [0, 15, 10], [-20, 0, 10]]) {\n        translate(pos)\n        rotate([0, 0, rands(0, 90, 1)[0]])\n        scale([1, 0.7, 0.3])\n        cube([4, 4, 1.5], center = true);\n    }\n}\n\nmodule onion_strips() {\n    // Thin onion strips\n    color(onion_color)\n    for(i = [0:30:330]) {\n        rotate([0, 0, i])\n        translate([rands(10, 25, 1)[0], 0, 10])\n        rotate([0, 0, rands(-30, 30, 1)[0]])\n        scale([0.3, 0.05, 0.05])\n        cube([rands(8, 15, 1)[0], 1, 1], center = true);\n    }\n}\n\nmodule chives() {\n    // Fresh chive pieces on top\n    color(chive_color)\n    for(pos = [[-5, -15, 12], [8, 10, 12], [-10, 8, 12], [12, -12, 12], [0, 0, 12]]) {\n        translate(pos)\n        rotate([90, 0, rands(0, 360, 1)[0]])\n        scale([0.1, 0.1, 1])\n        cylinder(r = 0.8, h = rands(3, 6, 1)[0]);\n    }\n}\n\nmodule egg_texture() {\n    // Subtle surface texture for egg\n    for(i = [0:20:340]) {\n        for(j = [0:15:75]) {\n            rotate([0, 0, i])\n            translate([rands(5, 28, 1)[0], rands(-20, 20, 1)[0], rands(5, 7, 1)[0]])\n            sphere(r = 0.3);\n        }\n    }\n}\n\n// Assembly\ncolor(egg_color) {\n    egg_base();\n    \n    // Add subtle texture to egg surface\n    color(egg_color, 0.8)\n    egg_texture();\n}\n\nmelted_cheese();\nbell_pepper_pieces();\nonion_strips();\nchives();\n\n// Plate shadow for realism\ncolor(\"#000000\", 0.2)\ntranslate([0, 0, 0.5])\nscale([1.2, 1, 0.1])\ncylinder(r = 35, h = 1);",
    "renders": true
  },
  {
    "food_item": "scramble",
    "openscad_code": "// Realistic Scrambled Eggs with Chives\n// 3D printable model, no overhangs\n\n$fn = 32;\n\n// Main colors\negg_yolk = \"#FFD700\";\negg_white = \"#FFF8DC\";\nchive_green = \"#228B22\";\npan_brown = \"#8B4513\";\n\n// Parameters\negg_height = 12;\negg_width = 45;\negg_length = 55;\nchive_diameter = 0.8;\nchive_length = 8;\n\nmodule scrambled_eggs() {\n    // Base pan surface (flat bottom for printing)\n    difference() {\n        cube([egg_length + 10, egg_width + 10, 3], center = true);\n        translate([0, 0, 1.5])\n            cube([egg_length + 14, egg_width + 14, 3], center = true);\n    }\n    \n    // Main scrambled egg mass\n    color(egg_white) {\n        // Central mound\n        translate([0, 0, 3])\n            scale([1, 0.9, 1])\n                sphere(d = egg_width);\n        \n        // Side mounds for irregular shape\n        translate([egg_length/3, egg_width/4, 3])\n            scale([0.7, 0.6, 0.8])\n                sphere(d = egg_width * 0.7);\n                \n        translate([-egg_length/3, -egg_width/4, 3])\n            scale([0.6, 0.7, 0.75])\n                sphere(d = egg_width * 0.65);\n    }\n    \n    // Yolk pieces mixed in\n    color(egg_yolk) {\n        // Multiple small yolk chunks\n        for (i = [0:15]) {\n            translate([\n                (i*7 - 30) % 35 - 10,\n                (i*5 - 20) % 25 - 12,\n                6 + sin(i*2)*2\n            ])\n            scale([1, 0.8, 0.6])\n                sphere(d = 6 + (i%3)*2);\n        }\n    }\n    \n    // Chopped chives scattered on top\n    color(chive_green) {\n        for (i = [0:25]) {\n            rotate([0, 0, i*73 + 15])\n            translate([\n                (i*9 - 40) % 38 - 19,\n                (i*6 - 30) % 30 - 15,\n                10 + (i%4)\n            ])\n            rotate([90, 0, 0])\n                cylinder(h = chive_length, r = chive_diameter/2);\n        }\n    }\n    \n    // Texture - small curds\n    difference() {\n        // Keep main shape\n        union() {\n            // All egg components above\n            color(egg_white) {\n                translate([0, 0, 3])\n                    scale([1, 0.9, 1])\n                        sphere(d = egg_width);\n                        \n                translate([egg_length/3, egg_width/4, 3])\n                    scale([0.7, 0.6, 0.8])\n                        sphere(d = egg_width * 0.7);\n                        \n                translate([-egg_length/3, -egg_width/4, 3])\n                    scale([0.6, 0.7, 0.75])\n                        sphere(d = egg_width * 0.65);\n            }\n        }\n        \n        // Small spherical holes for curd texture\n        for (x = [-20:5:20]) {\n            for (y = [-15:5:15]) {\n                translate([x, y, 8 + sin(x+y)*1.5])\n                    sphere(d = 2.5);\n            }\n        }\n    }\n}\n\n// Render the model\nscrambled_eggs();",
    "renders": true
  },
  {
    "food_item": "poach",
    "openscad_code": "$fn = 50;\n\n// Overall dimensions\negg_width = 30;\negg_length = 40;\negg_height = 20;\nwhite_thickness = 5;\n\n// Colors\negg_yolk = [1, 0.8, 0];\negg_white = [1, 1, 0.95];\npoach_color = [0.9, 0.7, 0.5];\n\n// Poached egg white base\nmodule poached_egg_white() {\n    difference() {\n        // Main egg white body\n        scale([1, 1.2, 0.7])\n            sphere(d = egg_width + white_thickness);\n        \n        // Hollow out slightly for 3D printing\n        translate([0, 0, -2])\n            scale([0.8, 0.9, 0.5])\n                sphere(d = egg_width);\n    }\n}\n\n// Egg yolk\nmodule egg_yolk() {\n    color(egg_yolk)\n    translate([0, 0, egg_height / 3])\n        scale([1, 1.3, 0.8])\n            sphere(d = egg_width / 2);\n}\n\n// Egg white layers and texture\nmodule egg_white_layers() {\n    color(egg_white)\n    union() {\n        // Main white\n        poached_egg_white();\n        \n        // Thin layers for realistic effect\n        for (i = [0:3]) {\n            translate([0, 0, -egg_height/2 + i*2])\n                scale([1 + i*0.05, 1.2 + i*0.05, 0.2])\n                    sphere(d = egg_width + white_thickness - i*2);\n        }\n        \n        // Wispy edges\n        for (a = [0:30:330]) {\n            rotate([0, 0, a])\n                translate([egg_width/2 + 3, 0, -egg_height/4])\n                    rotate([90, 0, 0])\n                        cylinder(h = 8, r1 = 2, r2 = 0.5);\n        }\n    }\n}\n\n// Poaching texture on surface\nmodule poaching_texture() {\n    for (i = [0:20]) {\n        angle = i * 137.5;\n        radius = 10 + (i % 3) * 3;\n        color(egg_white)\n        translate([\n            cos(angle) * radius * 0.3,\n            sin(angle) * radius * 0.4,\n            egg_height/2 - 1\n        ])\n            sphere(d = 1 + (i % 2));\n    }\n}\n\n// Main assembly\nunion() {\n    // Poached egg white\n    egg_white_layers();\n    \n    // Egg yolk on top\n    egg_yolk();\n    \n    // Add texture\n    poaching_texture();\n}",
    "renders": true
  },
  {
    "food_item": "boil",
    "openscad_code": "// Louisiana-style seafood boil with realistic details\n// Medium complexity - includes shrimp, corn, potato, sausage, and seasoning\n\n$fn = 32;  // Smooth curves for 3D printing\n\n// Main module\nmodule seafood_boil() {\n    // Base pot\n    difference() {\n        cylinder(h = 40, r1 = 45, r2 = 40);  // Tapered pot\n        translate([0, 0, 2]) \n            cylinder(h = 38, r1 = 42, r2 = 37);  // Hollow interior\n    }\n    \n    // Pot rim\n    translate([0, 0, 39]) \n        cylinder(h = 3, r1 = 46, r2 = 46);\n    \n    // Handles\n    for(i = [0, 1]) {\n        rotate([0, 0, i * 180])\n            translate([48, 0, 20])\n                rotate([90, 0, 0])\n                    cylinder(h = 8, r = 3);\n    }\n    \n    // Boil contents positioned at top\n    translate([0, 0, 42]) {\n        // Corn on the cob\n        for(angle = [0 : 60 : 300]) {\n            rotate([0, 0, angle]) {\n                translate([rand_range(-15, 15), rand_range(-15, 15), 0]) {\n                    color([0.9, 0.7, 0.2]) corn();\n                }\n            }\n        }\n        \n        // Potatoes\n        for(i = [0 : 3]) {\n            translate([rand_range(-20, 20), rand_range(-20, 20), 0]) {\n                color([0.8, 0.6, 0.4]) potato();\n            }\n        }\n        \n        // Sausage slices\n        for(angle = [0 : 45 : 315]) {\n            rotate([0, 0, angle]) {\n                translate([rand_range(-25, 25), rand_range(-25, 25), 0]) {\n                    color([0.6, 0.2, 0.1]) sausage();\n                }\n            }\n        }\n        \n        // Shrimp\n        for(i = [0 : 7]) {\n            translate([rand_range(-30, 30), rand_range(-30, 30), 0]) {\n                rotate([0, 0, rand_range(0, 360)])\n                    color([0.9, 0.3, 0.2]) shrimp();\n            }\n        }\n        \n        // Seasoning and spices\n        for(i = [0 : 20]) {\n            translate([rand_range(-35, 35), rand_range(-35, 35), rand_range(0, 5)]) {\n                color([0.4, 0.2, 0.1]) sphere(r = rand_range(0.5, 1.5));\n            }\n        }\n    }\n}\n\n// Corn cob module\nmodule corn() {\n    rotate([90, 0, 0]) {\n        cylinder(h = 25, r = 5);  // Main cob\n        \n        // Corn kernels\n        for(y = [0 : 3 : 22]) {\n            for(angle = [0 : 30 : 330]) {\n                rotate([0, 0, angle]) {\n                    translate([3.5, 0, y]) {\n                        sphere(r = 1.2);\n                    }\n                }\n            }\n        }\n        \n        // Husks\n        color([0.1, 0.7, 0.3]) {\n            translate([0, 5, 12]) rotate([0, 20, 0]) cube([20, 1, 8]);\n            translate([0, -5, 12]) rotate([0, -20, 0]) cube([20, 1, 8]);\n        }\n    }\n}\n\n// Potato module\nmodule potato() {\n    scale([1.2, 0.9, 0.7]) sphere(r = 8);\n    \n    // Eyes\n    for(i = [0 : 3]) {\n        rotate([rand_range(0, 180), rand_range(0, 180), rand_range(0, 180)]) {\n            translate([0, 0, 7]) sphere(r = 0.5);\n        }\n    }\n}\n\n// Sausage slice module\nmodule sausage() {\n    difference() {\n        cylinder(h = 3, r = 6);  // Slice\n        \n        // Casing texture\n        for(i = [0 : 4]) {\n            translate([0, 0, i * 0.7])\n                difference() {\n                    cylinder(h = 0.5, r = 6.2);\n                    cylinder(h = 0.6, r = 5.8);\n                }\n        }\n    }\n}\n\n// Shrimp module\nmodule shrimp() {\n    // Body\n    hull() {\n        translate([0, 0, 0]) sphere(r = 3);\n        translate([8, 0, 0]) sphere(r = 2);\n        translate([12, 0, 0]) sphere(r = 1.5);\n    }\n    \n    // Tail segments\n    for(i = [0 : 2]) {\n        translate([12 + i * 2, 0, 0])\n            rotate([0, 0, i * -15])\n                scale([1, 0.7, 0.5]) sphere(r = 2 - i * 0.5);\n    }\n    \n    // Legs\n    for(side = [-1, 1]) {\n        for(i = [0 : 4]) {\n            translate([i * 2, side * 2, 0])\n                rotate([0, 0, side * 45])\n                    cylinder(h = 3, r = 0.3);\n        }\n    }\n}\n\n// Helper function for random values\nfunction rand_range(min, max) = min + (max - min) * (rands(0, 1, 1)[0]);\n\n// Render the complete boil\nseafood_boil();",
    "renders": true
  },
  {
    "food_item": "fry",
    "openscad_code": "// Realistic french fry model for 3D printing\n// Dimensions: ~80mm length, 12mm width, 12mm height\n\n// Main fry body module\nmodule fry_body() {\n    // Base extruded potato shape\n    color([0.86, 0.66, 0.31])  // Golden brown color\n    union() {\n        // Main body - slightly tapered cuboid\n        hull() {\n            translate([0, 0, 5]) cube([10, 10, 2], center = true);\n            translate([0, 0, 75]) cube([8, 8, 2], center = true);\n        }\n        \n        // Rounded edges using cylinders\n        for(i = [1:4]) {\n            rotate([0, 0, i*90])\n            translate([0, 0, 40])\n            cylinder(h = 80, r1 = 5, r2 = 4.5, center = true);\n        }\n    }\n}\n\n// Surface texture details\nmodule fry_texture() {\n    color([0.75, 0.55, 0.25])\n    union() {\n        // Small bumps for potato texture\n        for(i = [0:3]) {\n            for(j = [0:5]) {\n                translate([\n                    sin(i*45)*6 + cos(j*30)*2,\n                    cos(i*45)*6 + sin(j*30)*2,\n                    j*12 + 3\n                ])\n                sphere(r = 0.3 + (i+j)/10, $fn = 6);\n            }\n        }\n        \n        // Crispy crack lines\n        for(i = [0:8]) {\n            rotate([0, 90, i*20])\n            translate([0, -40, 0])\n            scale([1, 0.1, 0.05])\n            cylinder(h = 80, r = 1);\n        }\n    }\n}\n\n// Salt crystals\nmodule salt() {\n    color([1, 1, 1])\n    union() {\n        for(i = [0:15]) {\n            translate([\n                (rand(i*123) - 0.5) * 8,\n                (rand(i*456) - 0.5) * 8,\n                (rand(i*789)) * 70 + 5\n            ])\n            rotate([rand(i*111)*360, rand(i*222)*360, rand(i*333)*360])\n            cube([0.3, 0.3, 0.1], center = true);\n        }\n    }\n}\n\n// Generate random values between 0 and 1\nfunction rand(seed) = (seed * 9301 + 49297) % 233280 / 233280;\n\n// Assemble the complete fry\nunion() {\n    // Main fry body\n    fry_body();\n    \n    // Surface texture overlay\n    fry_texture();\n    \n    // Salt crystals on top\n    salt();\n    \n    // Slight bend in the fry\n    rotate([0, rand(42)*4-2, 0])\n    translate([0, 0, 40])\n    scale([1, 1, 0.98])\n    children();\n}",
    "renders": true
  },
  {
    "food_item": "deviled",
    "openscad_code": "// Deviled Egg - Realistic Style\n// Medium complexity 3D printable model\n\n$fn = 32;\n\n// Colors\ncolor_egg_white = [0.95, 0.95, 0.92];\ncolor_yolk = [0.95, 0.85, 0.3];\ncolor_paprika = [0.7, 0.2, 0.1];\ncolor_pepper = [0.1, 0.1, 0.1];\n\n// Main egg white base\nmodule egg_white() {\n    color(color_egg_white)\n    difference() {\n        // Main egg white body\n        union() {\n            // Bottom half\n            scale([1, 0.7, 0.5])\n                sphere(d = 40);\n            \n            // Top curved surface\n            translate([0, 0, 10])\n                scale([0.9, 0.6, 0.3])\n                    sphere(d = 40);\n        }\n        \n        // Hollow cavity for yolk\n        translate([0, 0, 8])\n            scale([0.7, 0.5, 0.6])\n                sphere(d = 30);\n        \n        // Flat bottom\n        translate([-25, -25, -10])\n            cube([50, 50, 10]);\n    }\n}\n\n// Deviled yolk mixture\nmodule deviled_yolk() {\n    color(color_yolk)\n    translate([0, 0, 8])\n        difference() {\n            // Main yolk body\n            scale([0.8, 0.55, 0.5])\n                sphere(d = 30);\n            \n            // Star pattern piping\n            for(i = [0:5]) {\n                rotate([0, 0, i * 60])\n                    translate([0, 8, 0])\n                        cylinder(h = 20, d1 = 4, d2 = 1);\n            }\n            \n            // Small center hollow\n            translate([0, 0, 5])\n                cylinder(h = 10, d = 5);\n        }\n}\n\n// Paprika sprinkle\nmodule paprika() {\n    color(color_paprika)\n    for(i = [0:15]) {\n        rotate([0, 0, i * 24])\n            translate([0, 5 + (i % 3) * 2, 15 + sin(i * 3) * 2])\n                scale([0.3, 0.3, 0.1])\n                    sphere(d = 2);\n    }\n}\n\n// Pepper dots\nmodule pepper() {\n    color(color_pepper)\n    for(i = [0:8]) {\n        angle = i * 45;\n        r = 3 + (i % 2) * 2;\n        translate([r * cos(angle), r * sin(angle), 16])\n            sphere(d = 0.8);\n    }\n}\n\n// Egg white texture pattern\nmodule egg_texture() {\n    color(color_egg_white)\n    for(i = [0:20]) {\n        angle = i * 18;\n        r = 18 + (i % 2) * 2;\n        translate([r * cos(angle), r * sin(angle) * 0.7, 0])\n            scale([0.5, 0.3, 0.2])\n                sphere(d = 2, $fn = 8);\n    }\n}\n\n// Assembly\negg_white();\negg_texture();\ndeviled_yolk();\npaprika();\npepper();",
    "renders": true
  },
  {
    "food_item": "shirred",
    "openscad_code": "// Shirred (baked) eggs in a ramekin - realistic style, medium complexity\n// Overall size ~60 mm diameter x 40 mm height – printable without support\n\n// Color constants\negg_yolk = [1,0.8,0.1];\negg_white = [1,1,0.95];\nceramic = [0.95,0.95,0.92];\ncheese = [0.95,0.75,0.35];\npepper = [0.15,0.15,0.15];\n\nmodule ramekin() {\n    difference() {\n        // Outer bowl\n        cylinder(h = 25, d1 = 60, d2 = 55, $fn = 64);\n        \n        // Hollow inside\n        translate([0,0,-1])\n            cylinder(h = 24, d1 = 52, d2 = 47, $fn = 64);\n        \n        // Lip rounding\n        translate([0,0,24])\n            cylinder(h = 3, d1 = 56, d2 = 60, $fn = 64);\n    }\n}\n\nmodule egg_white_base() {\n    color(egg_white)\n    union() {\n        // Base layer in ramekin\n        translate([0,0,0])\n            cylinder(h = 5, d = 50, $fn = 64);\n        \n        // Slightly thicker edge\n        translate([0,0,4.5])\n            cylinder(h = 2, d = 52, d2 = 50, $fn = 64);\n    }\n}\n\nmodule yolk() {\n    color(egg_yolk)\n    translate([0,0,6])\n        sphere(d = 30, $fn = 64);\n}\n\nmodule shirred_ridges() {\n    color(egg_white)\n    for (a = [0:30:330]) {\n        rotate([90,0,a])\n            translate([0,0,6])\n                scale([1,0.15,0.5])\n                    sphere(d = 25, $fn = 16);\n    }\n}\n\nmodule cheese_sprinkle() {\n    color(cheese)\n    for (i = [0:40]) {\n        translate([rand_x(), rand_y(), rand_z()])\n            sphere(d = 1 + rands(0,1,1)[0], $fn = 8);\n    }\n}\n\nmodule pepper_dots() {\n    color(pepper)\n    for (i = [0:30]) {\n        translate([rand_x(), rand_y(), rand_z() + 1])\n            sphere(d = 0.6, $fn = 6);\n    }\n}\n\nfunction rand_x() = rands(-20,20,1)[0];\nfunction rand_y() = rands(-20,20,1)[0];\nfunction rand_z() = rands(5,10,1)[0];\n\n// Assemble the model\ncolor(ceramic) ramekin();\negg_white_base();\nyolk();\nshirred_ridges();\ncheese_sprinkle();\npepper_dots();",
    "renders": true
  },
  {
    "food_item": "coddled",
    "openscad_code": "// Coddled Egg in realistic style (medium complexity)\n// Represents a soft-boiled egg in its shell, placed in a ceramic egg cup\n\n// Color constants\n$fn = 50; // Smooth curves\n\n// Egg shell module\nmodule eggshell() {\n    color(\"ivory\") {\n        // Main egg body - prolate spheroid\n        scale([1, 1, 1.3]) \n            sphere(20);\n        \n        // Shell thickness - hollow inside\n        translate([0, 0, 20]) \n            color(\"white\")\n            scale([0.9, 0.9, 1.17]) \n            sphere(20);\n    }\n}\n\n// Egg cup module\nmodule eggcup() {\n    color(\"azure\") {\n        // Base ring\n        cylinder(h=8, r1=30, r2=28);\n        \n        // Stem\n        translate([0, 0, 8])\n            cylinder(h=25, r1=12, r2=8);\n        \n        // Top cradle\n        translate([0, 0, 33])\n            difference() {\n                cylinder(h=12, r1=25, r2=20);\n                // Hollow cavity for egg\n                translate([0, 0, -1])\n                    cylinder(h=14, r1=22, r2=17);\n            }\n    }\n}\n\n// Cracked top module\nmodule cracked_top() {\n    color(\"ivory\") {\n        // Remove top of shell\n        translate([0, 0, 40])\n            cube([50, 50, 10], center=true);\n        \n        // Jagged edges\n        for(i=[0:15:360]) {\n            rotate([0, 0, i])\n                translate([0, 18, 25])\n                    cylinder(h=5, r=2);\n        }\n    }\n}\n\n// Egg white visible through crack\nmodule eggwhite() {\n    color(\"ghostwhite\") {\n        translate([0, 0, 30])\n            scale([0.7, 0.7, 0.3])\n                sphere(15);\n    }\n}\n\n// Yolk peeking through\nmodule yolk() {\n    color(\"goldenrod\") {\n        translate([0, 0, 35])\n            scale([0.6, 0.6, 0.2])\n                sphere(8);\n    }\n}\n\n// Shell texture lines\nmodule shell_texture() {\n    color(\"ivory\") {\n        for(a=[0:30:330]) {\n            rotate([0, 0, a])\n                translate([0, 20.5, 10])\n                    scale([0.1, 1, 1.3])\n                        sphere(20);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Egg cup\n    eggcup();\n    \n    // Egg assembly\n    translate([0, 0, 41]) {\n        eggshell();\n        shell_texture();\n        \n        // Cracked appearance\n        cracked_top();\n        eggwhite();\n        yolk();\n    }\n}",
    "renders": true
  },
  {
    "food_item": "custardy",
    "openscad_code": "// Realistic Custard Tart (Medium Complexity)\n// Features golden custard top, fluted crust edge, and caramelized sugar spots\n\n$fn = 32;\n\n// Main dimensions\ntart_diameter = 80;\ntart_height = 15;\ncrust_thickness = 3;\ncustard_height = 10;\n\n// Colors\ncustard_color = \"#F5DEB3\";\ncrust_color = \"#D2B48C\";\ncaramel_color = \"#CD853F\";\n\nmodule fluted_edge() {\n    // Create fluted crust edge with scalloped pattern\n    for (i = [0:23]) {\n        rotate([0, 0, i * 15]) \n        translate([tart_diameter/2 - crust_thickness/2, 0, 0])\n        scale([1, 0.3, 1])\n        cylinder(h = tart_height, r = crust_thickness, center = true);\n    }\n}\n\nmodule custard_surface() {\n    // Main custard filling with slight dome shape\n    translate([0, 0, tart_height - custard_height/2 - 1])\n    scale([1, 1, 0.8])\n    sphere(d = tart_diameter - crust_thickness * 2, center = true);\n}\n\nmodule caramel_spots() {\n    // Random caramelized sugar spots on surface\n    spots = [\n        [15, 20, 0],\n        [-20, 15, 0],\n        [0, -10, 0],\n        [-15, -15, 0],\n        [10, -20, 0],\n        [25, 0, 0],\n        [-25, -5, 0],\n        [5, 25, 0]\n    ];\n    \n    for (pos = spots) {\n        translate(pos)\n        translate([0, 0, tart_height - 1])\n        scale([1, 1, 0.3])\n        sphere(d = 3 + rands(0, 2, 1)[0]);\n    }\n}\n\nmodule crust_base() {\n    // Solid base cylinder\n    cylinder(h = tart_height, d = tart_diameter, center = true);\n    \n    // Hollow out center for custard\n    translate([0, 0, tart_height/2 - custard_height - 2])\n    cylinder(h = tart_height - 2, d = tart_diameter - crust_thickness * 2, center = true);\n}\n\nmodule tart_assembly() {\n    // Main tart structure\n    difference() {\n        // Base crust\n        color(crust_color) crust_base();\n        \n        // Add fluted edge detail\n        color(crust_color) fluted_edge();\n        \n        // Custard filling\n        color(custard_color) \n        intersection() {\n            custard_surface();\n            translate([0, 0, tart_height - custard_height - 1])\n            cylinder(h = custard_height + 2, d = tart_diameter - crust_thickness * 2, center = true);\n        }\n    }\n    \n    // Caramelized spots on surface\n    color(caramel_color) caramel_spots();\n    \n    // Bottom rim detail\n    color(crust_color)\n    translate([0, 0, -tart_height/2 + 1])\n    cylinder(h = 2, d = tart_diameter + 2, center = true);\n}\n\n// Render the complete custard tart\ntart_assembly();",
    "renders": true
  },
  {
    "food_item": "quarky",
    "openscad_code": "// Quarky cheese wheel with realistic texture\n// Overall dimensions: 80mm diameter, 25mm height\n\nmodule cheese_wheel() {\n    // Main cheese body - slightly domed top\n    translate([0, 0, 12.5]) {\n        color(\"lemonchiffon\") {\n            cylinder(h = 25, r = 40, $fn = 64);\n            translate([0, 0, 12.5]) sphere(r = 40, $fn = 64);\n        }\n    }\n    \n    // Curved edge rounding\n    difference() {\n        union();\n        for (i = [0:5:360]) {\n            rotate([0, 0, i])\n            translate([40, 0, 0])\n            cylinder(h = 25, r = 2, $fn = 16);\n        }\n    }\n}\n\nmodule cheese_holes() {\n    // Random cheese holes (eyes)\n    color(\"linen\") {\n        for (i = [0:15:360]) {\n            rotate([0, 0, i]) {\n                for (j = [0:6]) {\n                    translate([\n                        15 + (j * 5) * cos(i * j), \n                        8 * sin(i * j), \n                        5 + j * 3\n                    ]) {\n                        sphere(r = 1.5 + (j % 3), $fn = 16);\n                    }\n                }\n            }\n        }\n        \n        // Additional holes on top\n        for (i = [0:30:360]) {\n            rotate([0, 0, i]) {\n                translate([\n                    20 * cos(i * 0.7), \n                    20 * sin(i * 0.7), \n                    22\n                ]) {\n                    sphere(r = 2 + (i % 4), $fn = 16);\n                }\n            }\n        }\n    }\n}\n\nmodule cheese_label() {\n    // Paper label wrapped around\n    color(\"ivory\") {\n        difference() {\n            cylinder(h = 8, r = 41, $fn = 64);\n            cylinder(h = 9, r = 35, $fn = 64);\n        }\n        \n        // Label text placeholder (as embossed dots)\n        for (i = [0:45:360]) {\n            rotate([0, 0, i]) {\n                translate([38, 0, 4]) {\n                    sphere(r = 0.8, $fn = 8);\n                }\n            }\n        }\n    }\n}\n\nmodule cheese_texture() {\n    // Fine surface texture\n    color(\"cornsilk\") {\n        for (i = [0:10:360]) {\n            rotate([0, 0, i]) {\n                for (j = [0:5]) {\n                    translate([\n                        38 * cos(i + j * 0.2), \n                        38 * sin(i + j * 0.2), \n                        j * 4 + 2\n                    ]) {\n                        sphere(r = 0.5, $fn = 8);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Assemble the cheese\nunion() {\n    cheese_wheel();\n    translate([0, 0, 1]) cheese_holes();\n    translate([0, 0, 8]) cheese_label();\n    cheese_texture();\n}",
    "renders": true
  },
  {
    "food_item": "creamy",
    "openscad_code": "// Realistic Creamy Cheesecake Slice\n// Medium complexity with visible layers and texture\n\n$fn = 50;\n\n// Main module for cheesecake slice\nmodule cheesecake_slice() {\n    // Base graham cracker crust\n    color([0.6, 0.4, 0.2]) {\n        translate([0, 0, 0]) {\n            linear_extrude(height = 3) {\n                offset(r = 2) {\n                    polygon(points = [[-25, -20], [25, -20], [25, 20], [-25, 20]]);\n                }\n            }\n        }\n        \n        // Crust texture - small bumps\n        for (i = [-20:5:20]) {\n            for (j = [-15:5:15]) {\n                if (i*i + j*j < 20*20) {\n                    translate([i + rand(-1, 1), j + rand(-1, 1), 3.2]) {\n                        sphere(d = 1.5);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Cream cheese filling\n    color([1, 0.95, 0.85]) {\n        translate([0, 0, 3]) {\n            linear_extrude(height = 18) {\n                offset(r = 1) {\n                    polygon(points = [[-23, -18], [23, -18], [23, 18], [-23, 18]]);\n                }\n            }\n        }\n        \n        // Creamy texture - subtle waves\n        for (y = [-15:3:15]) {\n            translate([23, y, 12]) {\n                rotate([90, 0, 90]) {\n                    cylinder(h = 0.5, r = 2, $fn = 6);\n                }\n            }\n        }\n    }\n    \n    // Top sour cream layer\n    color([0.98, 0.95, 0.9]) {\n        translate([0, 0, 21]) {\n            linear_extrude(height = 2) {\n                offset(r = 0.5) {\n                    polygon(points = [[-22, -17], [22, -17], [22, 17], [-22, 17]]);\n                }\n            }\n        }\n    }\n    \n    // Strawberry topping\n    color([0.8, 0.2, 0.3]) {\n        // Main strawberry layer\n        translate([0, 0, 23]) {\n            linear_extrude(height = 1) {\n                offset(r = 0.5) {\n                    polygon(points = [[-21, -16], [21, -16], [21, 16], [-21, 16]]);\n                }\n            }\n        }\n        \n        // Strawberry chunks\n        for (i = [-15:4:15]) {\n            for (j = [-10:4:10]) {\n                if (i*i + j*j < 15*15) {\n                    translate([i + rand(-1, 1), j + rand(-1, 1), 24]) {\n                        sphere(d = 2.5);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Side crust decoration\n    color([0.5, 0.3, 0.15]) {\n        difference() {\n            translate([0, 0, 1.5]) {\n                cube([50, 40, 3], center = true);\n            }\n            translate([0, 0, 1.5]) {\n                cube([46, 36, 3.1], center = true);\n            }\n        }\n    }\n    \n    // Whipped cream rosettes\n    color([0.98, 0.98, 0.95]) {\n        for (pos = [[-15, -12], [15, -12], [-15, 12], [15, 12]]) {\n            translate([pos[0], pos[1], 25]) {\n                cylinder(h = 6, r1 = 4, r2 = 2);\n                translate([0, 0, 6]) {\n                    sphere(d = 4);\n                }\n            }\n        }\n    }\n}\n\n// Helper function for random values\nfunction rand(a, b) = a + (b - a) * (rands(0, 1, 1)[0]);\n\n// Render the cheesecake\ncheesecake_slice();",
    "renders": true
  },
  {
    "food_item": "milky",
    "openscad_code": "// Realistic milky (milk chocolate bar) with medium complexity\n// Dimensions: 90 x 45 x 8 mm, segmented into 8 pieces\n\n$fn = 32;\n\n// Main chocolate bar module\nmodule milky_bar() {\n    color([0.6, 0.4, 0.2])  // Milk chocolate color\n    \n    // Main bar body\n    difference() {\n        // Base chocolate bar\n        cube([90, 45, 8], center = true);\n        \n        // Segmentation grooves - horizontal\n        for (i = [-35, -15, 5, 25]) {\n            translate([0, i, 4])\n                cube([92, 0.8, 1.5], center = true);\n        }\n        \n        // Segmentation grooves - vertical\n        translate([0, 0, 4])\n            cube([92, 0.8, 1.5], center = true);\n        \n        // Rounded corners on top\n        translate([-42, -20, 4])\n            cylinder(h = 1.5, r = 3, center = true);\n        translate([42, -20, 4])\n            cylinder(h = 1.5, r = 3, center = true);\n        translate([-42, 20, 4])\n            cylinder(h = 1.5, r = 3, center = true);\n        translate([42, 20, 4])\n            cylinder(h = 1.5, r = 3, center = true);\n    }\n    \n    // Side details - milk droplets texture\n    for (x = [-35, -25, -15, -5, 5, 15, 25, 35]) {\n        for (y = [-15, -5, 5, 15]) {\n            translate([x, y, 4.5])\n                scale([1.2, 1, 0.8])\n                    sphere(r = 1.8);\n        }\n    }\n    \n    // Top surface texture - milk swirl pattern\n    for (a = [0:45:315]) {\n        rotate([0, 0, a])\n            translate([0, 0, 4.2])\n                scale([1, 0.3, 0.1])\n                    sphere(r = 20);\n    }\n    \n    // Brand name placeholder (raised letters)\n    translate([0, 0, 4.5]) {\n        scale([0.8, 1, 1]) {\n            // M\n            translate([-30, 0, 0])\n                cube([4, 15, 0.8]);\n            translate([-26, 0, 0])\n                cube([4, 15, 0.8]);\n            translate([-22, 0, 0])\n                cube([4, 15, 0.8]);\n            \n            // I\n            translate([-16, 0, 0])\n                cube([4, 15, 0.8]);\n            \n            // L\n            translate([-10, 0, 0])\n                cube([4, 15, 0.8]);\n            translate([-10, -11, 0])\n                cube([10, 4, 0.8]);\n            \n            // K\n            translate([2, 0, 0])\n                cube([4, 15, 0.8]);\n            translate([6, 0, 0])\n                cube([4, 15, 0.8]);\n            \n            // Y\n            translate([14, 0, 0])\n                cube([4, 8, 0.8]);\n            translate([18, 0, 0])\n                cube([4, 15, 0.8]);\n            translate([14, -7, 0])\n                cube([4, 8, 0.8]);\n        }\n    }\n    \n    // Bottom chocolate texture pattern\n    for (x = [-40:10:40]) {\n        for (y = [-20:10:20]) {\n            translate([x, y, -4])\n                difference() {\n                    cube([8, 8, 0.5], center = true);\n                    translate([0, 0, 0.3])\n                        cube([6, 6, 0.5], center = true);\n                }\n        }\n    }\n}\n\n// Render the chocolate bar\nmilky_bar();",
    "renders": true
  },
  {
    "food_item": "cheesy",
    "openscad_code": "$fa = 2;\n$fs = 0.5;\n\n// Cheese wheel parameters\nwheel_d = 60;\nwheel_h = 25;\nrind_thick = 2;\n\n// Eye (hole) parameters\neye_max_r = 4;\neye_min_r = 1.5;\neyes_count = 12;\n\n// Slice parameters\nslice_angle = 30; // 30-degree slice\nslice_w = 5;\n\n// Color definitions\ncolor_rind = [0.82, 0.50, 0.20];  // Orange-brown rind\ncolor_cheese = [0.98, 0.85, 0.37]; // Yellow cheese\ncolor_holes = [0.95, 0.95, 0.95];  // Slightly darker holes\n\nmodule cheese_wheel() {\n    difference() {\n        // Main cheese body\n        color(color_rind) {\n            cylinder(d = wheel_d, h = wheel_h, $fn = 64);\n        }\n        \n        // Top and bottom rind removal\n        translate([0, 0, -0.1]) {\n            color(color_cheese) {\n                cylinder(d = wheel_d - rind_thick*2, h = wheel_h + 0.2, $fn = 64);\n            }\n        }\n        \n        // Side rind removal\n        color(color_cheese) {\n            cylinder(d = wheel_d - rind_thick*2, h = wheel_h, $fn = 64);\n        }\n    }\n    \n    // Add rind details on top/bottom edges\n    for (i = [0:5]) {\n        rotate([0, 0, i * 60]) {\n            translate([wheel_d/2 - rind_thick/2, 0, wheel_h]) {\n                color(color_rind) {\n                    cube([rind_thick, 3, 1], center = true);\n                }\n            }\n            translate([wheel_d/2 - rind_thick/2, 0, 0]) {\n                color(color_rind) {\n                    cube([rind_thick, 3, 1], center = true);\n                }\n            }\n        }\n    }\n}\n\nmodule cheese_eyes() {\n    // Generate random eyes using golden ratio for distribution\n    for (i = [1:eyes_count]) {\n        angle = 137.508 * i;\n        radius = (wheel_d/2 - eye_max_r*2) * sqrt(i/eyes_count);\n        x = cos(angle) * radius;\n        y = sin(angle) * radius;\n        z = wheel_h/2 + sin(i*2.5) * (wheel_h/4 - eye_max_r);\n        \n        // Vary hole sizes\n        hole_r = eye_min_r + (eye_max_r - eye_min_r) * (0.3 + 0.7 * (i % 3)/2);\n        \n        translate([x, y, z]) {\n            color(color_holes) {\n                sphere(r = hole_r, $fn = 12);\n            }\n        }\n    }\n}\n\nmodule cheese_slice() {\n    // Create a slice from the wheel\n    rotate([90, 0, 0]) {\n        intersection() {\n            // The wheel\n            cheese_wheel();\n            \n            // Slice wedge\n            rotate([0, 0, -slice_angle/2]) {\n                cube([wheel_d*2, wheel_d*2, slice_w], center = true);\n            }\n            \n            rotate([0, 0, slice_angle/2]) {\n                cube([wheel_d*2, wheel_d*2, slice_w], center = true);\n            }\n        }\n    }\n}\n\n// Main assembly\ntranslate([0, 0, wheel_h/2]) {\n    cheese_wheel();\n    cheese_eyes();\n}\n\n// Add a separate slice next to the wheel\ntranslate([wheel_d + 20, 0, slice_w/2]) {\n    cheese_slice();\n    // Add eyes to the slice\n    rotate([90, 0, 0]) {\n        cheese_eyes();\n    }\n}",
    "renders": true
  },
  {
    "food_item": "buttery",
    "openscad_code": "// Realistic Butter Stick with Wrapping and Texture\n// Medium complexity 3D printable buttery model\n\n$fn = 50;\nmodule butter_stick() {\n    // Main butter body with rounded edges\n    difference() {\n        // Main block\n        minkowski() {\n            cube([40, 25, 20], center = true);\n            sphere(2);\n        }\n        \n        // Slight indentations for texture\n        for (i = [-15:10:15]) {\n            translate([i, 0, 10.5])\n                scale([1, 1.2, 0.3])\n                    sphere(3);\n        }\n    }\n}\n\n// Wrapping paper - partially open at ends\nmodule wrapper() {\n    // Main wrapper body\n    difference() {\n        // Slightly larger than butter\n        minkowski() {\n            cube([42, 27, 22], center = true);\n            sphere(0.5);\n        }\n        \n        // Remove center to create hollow wrapper\n        scale([0.95, 0.95, 0.95])\n            butter_stick();\n        \n        // Cutouts for open ends\n        translate([0, 0, 12])\n            cube([50, 50, 10], center = true);\n        translate([0, 0, -12])\n            cube([50, 50, 10], center = true);\n    }\n    \n    // Wrapper folds at ends\n    for (side = [-1, 1]) {\n        translate([0, side * 13.5, side * 11])\n            rotate([90, 0, 0])\n                linear_extrude(height = 0.5)\n                    polygon(points = [[-10, 0], [10, 0], [0, 5]]);\n    }\n}\n\n// Butter texture details\nmodule butter_surface() {\n    // Small air pockets for realism\n    for (i = [-15:5:15]) {\n        for (j = [-10:5:10]) {\n            translate([i, j, 10])\n                sphere(0.5);\n        }\n    }\n}\n\n// Measurements markings on wrapper\nmodule measurements() {\n    // Tablespoon markings\n    for (i = [-15:5:15]) {\n        translate([i, 0, 11.5])\n            cube([0.5, 25, 0.2], center = true);\n    }\n}\n\n// Assembly\ncolor(\"gold\") butter_stick();\ncolor(\"palegoldenrod\") butter_surface();\n\n// Wrapper with transparency\ncolor([1, 1, 0.8, 0.7]) {\n    wrapper();\n    measurements();\n}\n\n// Wrapper seam detail\ntranslate([0, 13.5, 0])\n    color([0.9, 0.9, 0.7, 0.7])\n        cube([42, 0.3, 20], center = true);",
    "renders": true
  },
  {
    "food_item": "yolky",
    "openscad_code": "// Sunny-side-up fried egg with crispy edges and slightly runny yolk\n// Overall dimensions: ~80mm diameter\n\n$fn = 64;\n\n// Main egg white base\nmodule egg_white() {\n    color(\"cornsilk\")\n    difference() {\n        // Main white body - flattened ellipsoid\n        scale([1, 0.9, 0.25]) sphere(d = 80);\n        \n        // Create irregular edges by subtracting spheres\n        for(i = [0:30]) {\n            rotate([0, 0, i * 12])\n            translate([40 + rand(i)*5, 0, -5])\n            sphere(d = 8 + rand(i+50)*6);\n        }\n    }\n}\n\n// Helper for pseudo-random variation\nfunction rand(n) = (n * 13.7) % 1;\n\n// Yolk with slightly irregular surface\nmodule yolk() {\n    color(\"darkorange\")\n    translate([0, 0, 15])\n    union() {\n        // Main yolk sphere\n        sphere(d = 30);\n        \n        // Add slight height variation for realism\n        for(i = [0:8]) {\n            rotate([0, 0, i * 45])\n            translate([rand(i*2)*8 - 4, rand(i*3)*8 - 4, 2 + rand(i*4)*1])\n            sphere(d = 4 + rand(i*5)*2);\n        }\n    }\n}\n\n// Thin crispy edges around the white\nmodule crispy_edges() {\n    color(\"lemonchiffon\")\n    for(i = [0:45]) {\n        rotate([0, 0, i * 8])\n        translate([38 + rand(i)*3, 0, -2])\n        scale([1, 0.3, 0.1])\n        cylinder(h = 4, d1 = 5, d2 = 2);\n    }\n}\n\n// Small oil bubbles on surface\nmodule oil_bubbles() {\n    color(\"ivory\", 0.6)\n    for(i = [0:15]) {\n        rotate([0, 0, i * 24])\n        translate([rand(i)*35 - 17.5, rand(i+20)*35 - 17.5, 18])\n        sphere(d = 0.5 + rand(i+10)*1.5);\n    }\n}\n\n// Assemble the complete fried egg\negg_white();\nyolk();\ncrispy_edges();\noil_bubbles();",
    "renders": true
  },
  {
    "food_item": "eggy",
    "openscad_code": "// Realistic Eggy Food - Fried Egg with Runny Yolk\n// Size: ~75mm diameter, 3D printable with proper wall thickness\n\n// Main parameters\negg_white_radius = 35;\negg_yolk_radius = 12;\negg_thickness = 4;\npan_contact_flatten = 0.85;\n\nmodule egg_white() {\n    // Create flattened egg white base\n    difference() {\n        // Main white body - slightly irregular organic shape\n        scale([1, 1.2, pan_contact_flatten]) \n            sphere(r = egg_white_radius, $fn = 64);\n        \n        // Remove bottom to create flat surface against pan\n        translate([0, 0, -egg_white_radius * pan_contact_flatten - 1])\n            cube([egg_white_radius * 2.2, egg_white_radius * 2.4, 2], center = true);\n    }\n    \n    // Add slightly raised edges for realistic fried effect\n    for(i = [0:45:315]) {\n        rotate([0, 0, i])\n            translate([egg_white_radius * 0.85, 0, -1])\n                scale([0.15, 0.25, 0.5])\n                    sphere(r = 5, $fn = 16);\n    }\n}\n\nmodule egg_yolk() {\n    // Center yolk sphere with slight flattening\n    translate([0, 0, egg_thickness * 1.5]) {\n        // Main yolk body\n        scale([1, 1, 0.8])\n            sphere(r = egg_yolk_radius, $fn = 32);\n        \n        // Thin membrane layer around yolk\n        difference() {\n            scale([1.05, 1.05, 0.85])\n                sphere(r = egg_yolk_radius, $fn = 32);\n            scale([0.95, 0.95, 0.75])\n                sphere(r = egg_yolk_radius, $fn = 32);\n        }\n        \n        // Glossy highlight on yolk\n        translate([egg_yolk_radius * 0.3, -egg_yolk_radius * 0.3, egg_yolk_radius * 0.6])\n            scale([0.3, 0.3, 0.2])\n                sphere(r = egg_yolk_radius, $fn = 16);\n    }\n}\n\nmodule crispy_edges() {\n    // Add crispy browned edges around egg white\n    color([0.9, 0.7, 0.5]) {\n        for(i = [0:20:359]) {\n            rotate([0, 0, i]) {\n                translate([egg_white_radius * 0.95, 0, -0.5]) {\n                    scale([2, 0.3, 0.8]) \n                        sphere(r = 1.5, $fn = 8);\n                }\n            }\n        }\n    }\n}\n\nmodule texture_bubbles() {\n    // Small bubbles in egg white from frying\n    for(i = [0:12]) {\n        angle = i * 137.5;  // Golden angle for distribution\n        radius = egg_white_radius * 0.7 * sqrt(i / 12);\n        \n        translate([radius * cos(angle), radius * sin(angle), 1]) {\n            scale([1, 1, 0.3])\n                sphere(r = 0.5 + 0.5 * sin(i * 3), $fn = 8);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Egg white with realistic coloring\n    color([0.98, 0.95, 0.93]) \n        egg_white();\n    \n    // Crispy edges\n    crispy_edges();\n    \n    // Texture details\n    texture_bubbles();\n    \n    // Yolk with rich coloring\n    color([0.95, 0.75, 0.15]) \n        egg_yolk();\n}\n\n// Optional: Add slight base plate for stable 3D printing\ntranslate([0, 0, -2])\n    color([0.2, 0.2, 0.2])\n        cylinder(h = 1, r = egg_white_radius + 5, $fn = 64);",
    "renders": true
  },
  {
    "food_item": "curdy",
    "openscad_code": "// Curdy (Indian cottage cheese cubes in whey) - realistic style\n// Dimensions: 80mm diameter bowl, 25mm height\n\n$fn = 50;\n\n// Main bowl\ncolor(\"cornsilk\") \ndifference() {\n    // Outer bowl\n    cylinder(h = 25, r1 = 40, r2 = 35, center = false);\n    \n    // Hollow inside\n    translate([0, 0, 2])\n        cylinder(h = 23, r1 = 38, r2 = 33, center = false);\n}\n\n// Whey liquid\ncolor(\"lemonchiffon\") \ntranslate([0, 0, 2])\n    cylinder(h = 10, r1 = 37, r2 = 32, center = false);\n\n// Module for curdy cube with rounded edges\nmodule curdy_cube(size, x, y, z) {\n    color(\"ivory\") {\n        // Main cube body\n        translate([x, y, z])\n            cube([size, size, size], center = true);\n        \n        // Rounded edges using spheres\n        translate([x + size/2 - 1, y + size/2 - 1, z + size/2 - 1])\n            sphere(r = 1.5);\n        translate([x - size/2 + 1, y + size/2 - 1, z + size/2 - 1])\n            sphere(r = 1.5);\n        translate([x + size/2 - 1, y - size/2 + 1, z + size/2 - 1])\n            sphere(r = 1.5);\n        translate([x - size/2 + 1, y - size/2 + 1, z + size/2 - 1])\n            sphere(r = 1.5);\n        translate([x + size/2 - 1, y + size/2 - 1, z - size/2 + 1])\n            sphere(r = 1.5);\n        translate([x - size/2 + 1, y + size/2 - 1, z - size/2 + 1])\n            sphere(r = 1.5);\n        translate([x + size/2 - 1, y - size/2 + 1, z - size/2 + 1])\n            sphere(r = 1.5);\n        translate([x - size/2 + 1, y - size/2 + 1, z - size/2 + 1])\n            sphere(r = 1.5);\n    }\n}\n\n// Create curdy cubes in random positions\nfor (i = [0:3]) {\n    curdy_cube(8, -15 + i*10, -10 + (i%2)*5, 8 + (i%3)*3);\n}\n\nfor (i = [0:2]) {\n    curdy_cube(7, -10 + i*8, 0 - (i%2)*3, 9 + (i%2)*2);\n}\n\nfor (i = [0:3]) {\n    curdy_cube(6, -12 + i*8, 10 - (i%3)*4, 7 + i*1.5);\n}\n\n// Surface texture - small bubbles in whey\nmodule bubble(x, y, z) {\n    color(\"palegoldenrod\")\n        translate([x, y, z])\n            sphere(r = 0.5 + (x+y+z)%0.5);\n}\n\n// Random bubbles on surface\nfor (i = [0:20]) {\n    angle = i * 137.5;\n    radius = 15 + (i%10);\n    x = cos(angle) * radius;\n    y = sin(angle) * radius;\n    z = 12 + (i%5)*0.3;\n    if (x*x + y*y < 37*37)\n        bubble(x, y, z);\n}\n\n// Rim decoration\ncolor(\"cornsilk\") \nfor (i = [0:35]) {\n    rotate([0, 0, i * 10.28])\n        translate([38, 0, 23])\n            cylinder(h = 2, r = 1, center = false);\n}",
    "renders": true
  },
  {
    "food_item": "wheyey",
    "openscad_code": "// Wheyey (Greek Yogurt Cup) - Realistic Style\n// Dimensions: 65mm diameter, 45mm height\n\n$fn = 50;\n\n// Main module for the wheyey container\nmodule wheyey_container() {\n    difference() {\n        // Outer container - slightly tapered for 3D printing\n        cylinder(h = 42, r1 = 32.5, r2 = 30);\n        \n        // Hollow interior\n        translate([0, 0, -1])\n            cylinder(h = 41, r1 = 29, r2 = 26.5);\n    }\n    \n    // Container rim/lip\n    translate([0, 0, 42])\n        cylinder(h = 3, r = 32.5);\n}\n\n// Yogurt surface texture with swirl pattern\nmodule yogurt_surface() {\n    color(\"lemonchiffon\")\n    translate([0, 0, 2])\n    difference() {\n        // Main yogurt body\n        cylinder(h = 40, r1 = 28.5, r2 = 26);\n        \n        // Create swirl indentations\n        for(i = [0:15]) {\n            rotate([0, 0, i * 22.5 + 5])\n            translate([i * 1.2, 0, -1])\n            rotate([90, 0, 0])\n            scale([1, 0.3, 1])\n            cylinder(h = 3, r1 = 10 - i * 0.3, r2 = 8 - i * 0.3);\n        }\n    }\n}\n\n// Liquid whey pooling effect\nmodule whey_liquid() {\n    color(\"ivory\", 0.7)\n    translate([0, 0, 41])\n    for(i = [0:8]) {\n        rotate([0, 0, i * 45])\n        translate([5 + i * 0.5, 0, 0])\n        scale([1, 0.7, 0.5])\n        sphere(r = 2.5);\n    }\n}\n\n// Yogurt peaks and texture\nmodule yogurt_peaks() {\n    color(\"cornsilk\")\n    for(i = [0:12]) {\n        angle = i * 30;\n        radius = 15 + (i % 2) * 8;\n        \n        rotate([0, 0, angle])\n        translate([radius * sin(i), radius * cos(i), 42])\n        scale([1, 1, 1.5])\n        sphere(r = 3 + (i % 3));\n    }\n}\n\n// Container branding/text\nmodule branding() {\n    color(\"white\", 0.9)\n    translate([0, 0, 30])\n    rotate([90, 0, 0])\n    linear_extrude(height = 0.5)\n    text(\"GREEK\", size = 8, halign = \"center\", valign = \"center\");\n    \n    translate([0, 0, 22])\n    rotate([90, 0, 0])\n    linear_extrude(height = 0.5)\n    text(\"YOGURT\", size = 6, halign = \"center\", valign = \"center\");\n}\n\n// Assembly\ntranslate([0, 0, 0]) {\n    // Container\n    color(\"white\", 0.9)\n    wheyey_container();\n    \n    // Yogurt content\n    yogurt_surface();\n    whey_liquid();\n    yogurt_peaks();\n    \n    // Branding on side\n    branding();\n}",
    "renders": true
  },
  {
    "food_item": "caseous",
    "openscad_code": "$fn=60;\n\n// Main cheese wheel\nmodule cheese_wheel() {\n    // Base wheel shape\n    difference() {\n        cylinder(h=30, r=40, center=true);\n        \n        // Create rounded edges\n        translate([0,0,-15])\n            cylinder(h=30, r=38, center=true);\n        translate([0,0,15])\n            cylinder(h=30, r=38, center=true);\n    }\n    \n    // Add characteristic holes (eyes)\n    for(i=[1:15]) {\n        rotate([0,0,rand(i)*360])\n        translate([rand(i+5)*30, 0, rand(i+10)*20-10])\n            sphere(r=rand(i+3)*2+1);\n    }\n    \n    // Rind texture\n    difference() {\n        cylinder(h=30, r=40.5, center=true);\n        cylinder(h=31, r=40, center=true);\n    }\n}\n\n// Random number generator\nfunction rand(n) = rands(0,1,n)[floor(n/2)];\n\n// Cheese wedge cut\nmodule cheese_wedge() {\n    difference() {\n        // Full wheel\n        cheese_wheel();\n        \n        // Cut wedge\n        translate([0,0,-20])\n            cube([100,100,40], center=true);\n        rotate([0,0,-45])\n            translate([0,0,-20])\n                cube([100,100,40], center=true);\n    }\n}\n\n// Surface texture detail\nmodule surface_texture() {\n    for(x=[-35:10:35]) {\n        for(y=[-35:10:35]) {\n            if(sqrt(x*x + y*y) < 38) {\n                translate([x,y,16])\n                    sphere(r=0.5);\n                translate([x,y,-16])\n                    sphere(r=0.5);\n            }\n        }\n    }\n}\n\n// Main assembly\ncolor([0.95, 0.87, 0.45]) {\n    cheese_wedge();\n}\n\ncolor([0.85, 0.77, 0.35]) {\n    translate([0,0,16])\n        surface_texture();\n    translate([0,0,-16])\n        surface_texture();\n}\n\n// Wax coating on rind\ncolor([0.8, 0.2, 0.1]) {\n    difference() {\n        cylinder(h=30.5, r=40.8, center=true);\n        cylinder(h=30, r=40.5, center=true);\n    }\n}",
    "renders": true
  },
  {
    "food_item": "lacteal",
    "openscad_code": "$fs=0.5;\n$fa=2;\n\n// Cheese wheel: 80 mm diameter, 35 mm thick\nmodule cheese_wheel() {\n    color(\"gold\") {\n        difference() {\n            // Main wheel body\n            cylinder(h=30, r=40, center=true);\n\n            // Central hole\n            cylinder(h=32, r=6, center=true);\n\n            // Rind surface texture\n            for (i=[0:30]) {\n                rotate([0, 0, i*12]) \n                    translate([40-1.5, 0, -16])\n                        cube([3, 1.5, 32], center=true);\n            }\n        }\n\n        // Top rind layer\n        translate([0, 0, 15]) \n            cylinder(h=2.5, r=40, center=false);\n\n        // Bottom rind layer\n        translate([0, 0, -15]) \n            cylinder(h=2.5, r=40, center=false);\n    }\n\n    // Eyes (holes) inside the cheese\n    color(\"gold\") {\n        for (i=[0:8]) {\n            angle = i*137.5;\n            radius = 10 + pow(i, 0.9)*3;\n            translate([radius*cos(angle), radius*sin(angle), -7+rand(i*2)*14]) {\n                sphere(r=1.5+rand(i*3)*1.5);\n            }\n        }\n        \n        for (i=[0:5]) {\n            angle = i*97.3;\n            radius = 5 + pow(i, 0.8)*2;\n            translate([radius*cos(angle), radius*sin(angle), -5+rand(i*5)*10]) {\n                sphere(r=1+rand(i*7)*1);\n            }\n        }\n    }\n}\n\n// Simple pseudo-random function for natural look\nfunction rand(seed) = (seed*9301+49297)%233280/233280;\n\n// Display the cheese wheel\nrotate([90, 0, 0]) cheese_wheel();",
    "renders": true
  },
  {
    "food_item": "lacteous",
    "openscad_code": "// Realistic Cheese Wheel (Medium Complexity)\n// A 3D printable lacteous food item - a wheel of aged cheese\n\n// Main parameters\n$fn = 36;\ncheese_radius = 40;\ncheese_height = 20;\nrind_thickness = 2;\n\n// Cheese wheel body\nmodule cheese_wheel() {\n    difference() {\n        // Main cheese cylinder\n        cylinder(h = cheese_height, r = cheese_radius);\n        \n        // Hollow center for printing\n        cylinder(h = cheese_height + 1, r = cheese_radius - 5);\n    }\n}\n\n// Cheese rind with texture\nmodule cheese_rind() {\n    difference() {\n        // Outer rind shell\n        cylinder(h = cheese_height, r = cheese_radius);\n        cylinder(h = cheese_height + 1, r = cheese_radius - rind_thickness);\n    }\n}\n\n// Aged cheese holes (eyes)\nmodule cheese_holes() {\n    // Generate random holes throughout the cheese\n    for(i = [0:8]) {\n        translate([\n            cos(i * 40) * (cheese_radius - 10) * 0.7,\n            sin(i * 40) * (cheese_radius - 10) * 0.7,\n            cheese_height/2 + (i % 2 ? 3 : -3)\n        ]) {\n            sphere(r = 1.5 + sin(i * 2) * 0.5);\n        }\n    }\n    \n    for(i = [0:5]) {\n        translate([\n            cos(i * 72) * (cheese_radius - 15) * 0.5,\n            sin(i * 72) * (cheese_radius - 15) * 0.5,\n            cheese_height/2\n        ]) {\n            sphere(r = 2 + cos(i) * 0.5);\n        }\n    }\n}\n\n// Surface texture for aged appearance\nmodule surface_texture() {\n    // Small bumps and imperfections\n    for(i = [0:20]) {\n        rotate([0, 0, i * 18]) {\n            translate([cheese_radius - 1, 0, cheese_height/2]) {\n                sphere(r = 0.3 + sin(i) * 0.1);\n            }\n        }\n    }\n    \n    // Top surface imperfections\n    for(i = [0:12]) {\n        translate([\n            (cheese_radius - 10) * cos(i * 30) * 0.8,\n            (cheese_radius - 10) * sin(i * 30) * 0.8,\n            cheese_height - 0.5\n        ]) {\n            sphere(r = 0.5);\n        }\n    }\n}\n\n// Cheese label band\nmodule label_band() {\n    color([0.4, 0.2, 0.1]) {\n        difference() {\n            // Main band\n            cylinder(h = 6, r = cheese_radius - 0.5);\n            cylinder(h = 7, r = cheese_radius - 3.5);\n        }\n        \n        // Label text impression (simplified as rectangles)\n        for(i = [0:3]) {\n            translate([cheese_radius - 2, -1.5 + i * 1, 3]) {\n                cube([1, 0.5, 0.5]);\n            }\n        }\n    }\n}\n\n// Assembly\ncolor([0.95, 0.85, 0.35]) {\n    difference() {\n        union() {\n            cheese_wheel();\n            surface_texture();\n        }\n        cheese_holes();\n    }\n}\n\ncolor([0.6, 0.4, 0.2]) {\n    cheese_rind();\n}\n\nlabel_band();\n\n// Bottom support ring for printing\ncolor([0.95, 0.85, 0.35]) {\n    translate([0, 0, -0.5]) {\n        cylinder(h = 1, r = cheese_radius - 4);\n    }\n}",
    "renders": true
  },
  {
    "food_item": "fermented",
    "openscad_code": "// Kimchi - Fermented Korean cabbage with visible chili flakes and texture\n// Overall dimensions: ~80mm diameter base, ~60mm height\n\n$fn = 24;  // Smooth curves for realistic appearance\n\n// Main cabbage body - layered structure\nmodule kimchi_body() {\n    color([0.15, 0.45, 0.15])  // Dark green for outer leaves\n    \n    // Base layer - slightly curved bottom\n    difference() {\n        cylinder(h = 15, r1 = 40, r2 = 42);\n        translate([0, 0, -1])\n            cylinder(h = 16, r1 = 38, r2 = 40);\n    }\n    \n    // Middle layers with slight rotation for natural stacking\n    for (i = [1:3]) {\n        translate([0, 0, 15 * i])\n        rotate([0, 0, i * 15])\n        color([0.2, 0.5, 0.2])\n        cylinder(h = 12, r1 = 42 - i*3, r2 = 44 - i*3);\n    }\n    \n    // Top layer - slightly curled\n    translate([0, 0, 50])\n    rotate([0, 0, 45])\n    color([0.25, 0.55, 0.25])\n    cylinder(h = 8, r1 = 36, r2 = 34);\n}\n\n// Chili paste coating with texture\nmodule chili_paste() {\n    color([0.8, 0.2, 0.1])  // Bright red chili color\n    \n    // Thin coating on outer surfaces\n    for (i = [0:5]) {\n        rotate([0, 0, i * 60])\n        translate([35, 0, 20 + i*5])\n        scale([1, 0.3, 0.3])\n        sphere(r = 3);\n    }\n    \n    // Additional paste on top\n    translate([0, 0, 55])\n    cylinder(h = 2, r = 30);\n}\n\n// Visible chili flakes and garlic pieces\nmodule seasoning() {\n    // Chili flakes\n    color([0.6, 0.1, 0.05])\n    for (i = [1:30]) {\n        rotate([0, 0, i * 47])\n        translate([random(25, 38), 0, random(15, 55)])\n        scale([1, 0.3, 0.1])\n        rotate([random(0, 90), 0, 0])\n        cube([2, 1, 0.5]);\n    }\n    \n    // Garlic pieces\n    color([0.95, 0.9, 0.85])\n    for (i = [1:15]) {\n        rotate([0, 0, i * 73])\n        translate([random(20, 35), 0, random(20, 50)])\n        sphere(r = 1.5);\n    }\n}\n\n// Leaf vein texture on surface\nmodule leaf_veins() {\n    color([0.1, 0.3, 0.1])\n    for (i = [1:8]) {\n        rotate([0, 0, i * 45])\n        translate([0, 0, 10])\n        for (j = [1:3]) {\n            translate([0, 0, j * 15])\n            scale([1, 0.1, 0.05])\n            rotate([90, 0, 0])\n            cylinder(h = 35, r1 = 1, r2 = 0.5);\n        }\n    }\n}\n\n// Random helper function\nfunction random(min, max) = min + (max - min) * (rands(0, 1, 1)[0]);\n\n// Assembly\nunion() {\n    kimchi_body();\n    chili_paste();\n    seasoning();\n    leaf_veins();\n}",
    "renders": true
  },
  {
    "food_item": "coagulated",
    "openscad_code": "// Coagulated Blood Pudding (Black Pudding/Sausage)\n// Realistic style, medium complexity\n// Approx 80mm length, 25mm diameter\n\n// Main color for blood sausage - dark brownish-red\ncolor([0.3, 0.1, 0.05]) \n\ndifference() {\n    // Main sausage body\n    union() {\n        // Central cylinder for sausage body\n        rotate([90, 0, 0])\n            cylinder(h=80, d=25, $fn=32);\n        \n        // End caps - rounded\n        translate([0, -40, 0])\n            rotate([90, 0, 0])\n                sphere(d=25, $fn=32);\n        translate([0, 40, 0])\n            rotate([90, 0, 0])\n                sphere(d=25, $fn=32);\n    }\n    \n    // Remove center to create hollow sausage (3mm walls)\n    rotate([90, 0, 0])\n        cylinder(h=82, d=19, $fn=32);\n}\n\n// Surface texture - coagulated blood chunks\nmodule blood_chunks() {\n    for(i = [0:12]) {\n        rotate([0, i*30, 0])\n        translate([\n            sin(i*137.5)*12,\n            -35 + i*6,\n            cos(i*137.5)*12\n        ]) {\n            // Irregular coagulated pieces\n            scale([1, 0.7, 1.2]) \n                sphere(d=4 + (i%3)*2, $fn=8);\n        }\n    }\n}\n\n// Add surface texture\ntranslate([0, 0, 12.5])\n    blood_chunks();\n\ntranslate([0, 0, -12.5])\n    mirror([0, 0, 1])\n        blood_chunks();\n\n// Natural sausage casing wrinkles\nmodule wrinkles() {\n    for(j = [0:15]) {\n        rotate([0, j*24, 0])\n        translate([\n            sin(j*72)*12.5,\n            -40 + j*5,\n            cos(j*72)*12.5\n        ]) {\n            // Thin wrinkle lines\n            rotate([90, 0, 0])\n                scale([0.5, 0.5, 4])\n                    cylinder(h=1, d=1, $fn=6);\n        }\n    }\n}\n\ncolor([0.25, 0.08, 0.03])\n    wrinkles();\n\n// Cross-section view showing coagulated interior\n// Uncomment to see inside\n/*\ntranslate([40, 0, 0])\ndifference() {\n    // Half sausage showing interior\n    intersection() {\n        union() {\n            rotate([90, 0, 0])\n                cylinder(h=80, d=25, $fn=32);\n            translate([0, -40, 0])\n                rotate([90, 0, 0])\n                    sphere(d=25, $fn=32);\n            translate([0, 40, 0])\n                rotate([90, 0, 0])\n                    sphere(d=25, $fn=32);\n        }\n        translate([-25, 0, 0])\n            cube([50, 100, 50]);\n    }\n    \n    // Interior coagulated texture\n    for(k = [0:20]) {\n        translate([\n            -12 + (k%5)*6,\n            -35 + (k/5)*8,\n            -10 + sin(k*137.5)*8\n        ]) {\n            color([0.6, 0.15, 0.1])\n                sphere(d=2+sin(k*45)*1, $fn=6);\n        }\n    }\n}\n*/",
    "renders": true
  },
  {
    "food_item": "pasteurized",
    "openscad_code": "// Pasteurized Milk Carton - Realistic medium complexity\n// Dimensions: 60mm x 40mm x 100mm\n\n$fn = 32;\n\n// Main carton body\nmodule carton_body() {\n    // Main rectangular body with rounded edges\n    difference() {\n        // Outer rounded box\n        minkowski() {\n            cube([50, 30, 90], center = true);\n            sphere(3);\n        }\n        \n        // Hollow interior\n        minkowski() {\n            cube([44, 24, 84], center = true);\n            sphere(2);\n        }\n    }\n}\n\n// Top gable roof structure\nmodule gable_top() {\n    // Front roof panel\n    difference() {\n        translate([0, 0, 45]) {\n            rotate([0, 0, 0]) {\n                polyhedron(\n                    points = [[-25, -15, 0], [25, -15, 0], [0, -15, 15], \n                             [-25, 15, 0], [25, 15, 0], [0, 15, 15]],\n                    faces = [[0,1,2], [3,5,4], [0,3,4,1], [0,2,5,3], [1,4,5,2]]\n                );\n            }\n        }\n        \n        // Cut hole for spout\n        translate([0, -15, 52])\n            rotate([90, 0, 0])\n            cylinder(h=10, r=4, center=true);\n    }\n}\n\n// Spout cap\nmodule spout() {\n    translate([0, -15, 55]) {\n        rotate([90, 0, 0]) {\n            // Cap base\n            color([0.9, 0.9, 0.9])\n            cylinder(h=8, r=5);\n            \n            // Cap top\n            color([0.8, 0.8, 0.8])\n            translate([0, 0, 8])\n            sphere(5.5);\n        }\n    }\n}\n\n// Carton fold lines\nmodule fold_lines() {\n    color([0.85, 0.85, 0.85]) {\n        // Vertical fold lines\n        for (x = [-12, 12]) {\n            translate([x, 0, 0])\n            cube([0.5, 30.5, 90], center=true);\n        }\n        \n        // Horizontal fold lines\n        for (z = [-35, -15, 15, 35]) {\n            translate([0, 0, z])\n            cube([50.5, 30.5, 0.5], center=true);\n        }\n    }\n}\n\n// Nutrition label\nmodule nutrition_label() {\n    color([0.95, 0.95, 0.9])\n    translate([0, 15.5, 10])\n    cube([25, 0.5, 35], center=true);\n}\n\n// Brand text area\nmodule brand_area() {\n    color([0.9, 0.9, 0.9])\n    translate([0, 15.5, -20])\n    cube([35, 0.5, 15], center=true);\n}\n\n// Milk drop decorations\nmodule milk_drops() {\n    color([1, 1, 1, 0.8])\n    for (i = [0:3]) {\n        angle = i * 90;\n        rotate([0, 0, angle])\n        translate([18, 8, -5])\n        scale([1, 1.2, 1])\n        sphere(2);\n    }\n}\n\n// Assembly\ncolor([0.95, 0.95, 1]) {\n    union() {\n        carton_body();\n        gable_top();\n    }\n}\n\nspout();\nfold_lines();\nnutrition_label();\nbrand_area();\nmilk_drops();",
    "renders": true
  },
  {
    "food_item": "homogenized",
    "openscad_code": "// Homogenized Banana Purée Jar\n// Realistic style with medium complexity\n\nmodule jar_body() {\n    difference() {\n        // Main cylindrical jar\n        cylinder(h=60, d=50, $fn=64);\n        \n        // Hollow out the inside\n        translate([0, 0, 2])\n            cylinder(h=58, d=46, $fn=64);\n    }\n}\n\nmodule jar_base() {\n    // Thickened base ring\n    translate([0, 0, -3])\n        cylinder(h=6, d=55, $fn=64);\n}\n\nmodule jar_threads() {\n    // Screw threads for lid\n    for (i = [0:5:355]) {\n        rotate([0, 0, i])\n            translate([23.5, 0, 55])\n                cube([2, 1, 5], center=true);\n    }\n}\n\nmodule lid() {\n    color(\"gold\", 0.8) {\n        difference() {\n            // Lid top\n            translate([0, 0, 60])\n                cylinder(h=8, d=54, $fn=64);\n            \n            // Inner lip\n            translate([0, 0, 60])\n                cylinder(h=5, d=50, $fn=64);\n            \n            // Thread grooves\n            for (i = [0:5:355]) {\n                rotate([0, 0, i])\n                    translate([23.5, 0, 60])\n                        cube([2.5, 1.5, 6], center=true);\n            }\n        }\n    }\n}\n\nmodule banana_puree() {\n    color([1, 0.9, 0.3], 0.9) {\n        // Main puree body\n        translate([0, 0, 2])\n            cylinder(h=50, d=45.5, $fn=64);\n        \n        // Surface texture - small bubbles\n        for (i = [1:20]) {\n            angle = i * 137.5;\n            radius = sqrt(i) * 2.5;\n            translate([radius * cos(angle), radius * sin(angle), 52])\n                sphere(d=1.5, $fn=16);\n        }\n        \n        // Swirl pattern\n        for (t = [0:5:360]) {\n            rotate([0, 0, t])\n                translate([10 * sin(t/2), 10 * cos(t/2), 52.5])\n                    sphere(d=2, $fn=8);\n        }\n    }\n}\n\nmodule label() {\n    color(\"white\", 0.95) {\n        // Front label\n        translate([0, -25, 25])\n            rotate([90, 0, 0])\n                cylinder(h=30, d=1, $fn=64);\n        \n        // Label text area\n        translate([0, -25.5, 25])\n            scale([1, 0.3, 1])\n                cube([25, 20, 25], center=true);\n    }\n}\n\n// Main assembly\ncolor(\"transparent\", 0.3) {\n    jar_body();\n    jar_base();\n    jar_threads();\n}\n\nbanana_puree();\nlid();\nlabel();",
    "renders": true
  },
  {
    "food_item": "ultraheat",
    "openscad_code": "// Ultraheat Burrito - Medium complexity realistic style\n// Size: ~80mm length, 3D printable with no overhangs\n\n$fn = 32;\n\n// Main colors\ncolor_burrito = \"#C19A6B\";\ncolor_tortilla = \"#F5DEB3\";\ncolor_beans = \"#654321\";\ncolor_rice = \"#FFFDD0\";\ncolor_cheese = \"#FFD700\";\ncolor_salsa = \"#FF6347\";\n\n// Main burrito body\nmodule burrito_body() {\n    color(color_burrito)\n    difference() {\n        // Main cylinder\n        rotate([0, 90, 0])\n        cylinder(h = 80, d1 = 35, d2 = 30, center = true);\n        \n        // End caps for rounded look\n        translate([40, 0, 0])\n        rotate([0, 90, 0])\n        sphere(d = 35);\n        \n        translate([-40, 0, 0])\n        rotate([0, 90, 0])\n        sphere(d = 30);\n    }\n}\n\n// Tortilla wrap with folds\nmodule tortilla_wrap() {\n    color(color_tortilla) {\n        // Main wrap\n        rotate([0, 90, 0])\n        cylinder(h = 82, d1 = 37, d2 = 32, center = true);\n        \n        // Folded edges\n        for(i = [-1, 1]) {\n            translate([i * 30, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h = 25, d1 = 5, d2 = 8, center = true);\n        }\n    }\n}\n\n// Bean filling texture\nmodule beans() {\n    color(color_beans)\n    for(i = [0:15]) {\n        rotate([0, 90, i * 24])\n        translate([random(-30, 30), random(-8, 8), random(-8, 8)])\n        sphere(d = random(3, 6));\n    }\n}\n\n// Rice grains\nmodule rice() {\n    color(color_rice)\n    for(i = [0:25]) {\n        rotate([0, 90, i * 15])\n        translate([random(-35, 35), random(-10, 10), random(-10, 10)])\n        scale([1, 0.5, 0.3])\n        sphere(d = 2);\n    }\n}\n\n// Melted cheese drips\nmodule cheese() {\n    color(color_cheese)\n    for(i = [0:8]) {\n        rotate([0, 90, i * 45])\n        translate([random(-20, 20), random(-5, 5), random(-5, 5)])\n        cylinder(h = random(5, 12), d1 = 4, d2 = 2, center = true);\n    }\n}\n\n// Salsa chunks\nmodule salsa() {\n    color(color_salsa)\n    for(i = [0:12]) {\n        rotate([0, 90, i * 30])\n        translate([random(-25, 25), random(-8, 8), random(-8, 8)])\n        sphere(d = random(2, 4));\n    }\n}\n\n// Steam effect (negative space for printing)\nmodule steam() {\n    color([1, 1, 1, 0.3])\n    for(i = [0:5]) {\n        rotate([0, 90, i * 60])\n        translate([random(-20, 20), random(-15, 15), random(20, 25)])\n        cylinder(h = random(3, 8), d = random(1, 2), center = true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main components\n    burrito_body();\n    \n    // Add fillings inside\n    intersection() {\n        burrito_body();\n        union() {\n            beans();\n            rice();\n            cheese();\n            salsa();\n        }\n    }\n    \n    // Outer tortilla wrap\n    tortilla_wrap();\n    \n    // Surface details\n    difference() {\n        tortilla_wrap();\n        steam();\n    }\n}",
    "renders": true
  },
  {
    "food_item": "skimmed",
    "openscad_code": "// Skimmed Milk Carton - Realistic Style with Medium Complexity\n// Overall dimensions: 50mm x 35mm x 100mm\n\n// Milk color\n$fn = 50;\n\n// Main carton body\nmodule milk_carton() {\n    difference() {\n        // Main body with slight taper\n        translate([0, 0, 50]) {\n            scale([1, 0.9, 1]) {\n                cube([50, 35, 100], center = true);\n            }\n        }\n        \n        // Hollow interior (3mm wall thickness)\n        translate([0, 0, 47]) {\n            scale([1, 0.9, 1]) {\n                cube([44, 29, 94], center = true);\n            }\n        }\n        \n        // Top opening\n        translate([0, 0, 100]) {\n            cube([45, 30, 10], center = true);\n        }\n    }\n}\n\n// Carton top closure\nmodule carton_top() {\n    translate([0, 0, 102]) {\n        rotate([90, 0, 0]) {\n            difference() {\n                // Main top piece\n                cube([40, 8, 25], center = true);\n                \n                // Rounded edges\n                translate([0, -4, 0]) {\n                    cube([38, 8, 25], center = true);\n                }\n            }\n        }\n    }\n}\n\n// Fold lines on top\nmodule fold_lines() {\n    for (i = [-1, 1]) {\n        translate([i * 10, 0, 102]) {\n            rotate([90, 0, 0]) {\n                color([0.7, 0.7, 0.7]) {\n                    cube([1, 8.1, 25], center = true);\n                }\n            }\n        }\n    }\n}\n\n// Label design\nmodule label() {\n    // Front label background\n    color([1, 1, 1]) {\n        translate([25.5, 0, 50]) {\n            cube([1, 32, 80]);\n        }\n    }\n    \n    // Blue stripe\n    color([0.2, 0.5, 0.9]) {\n        translate([25.6, 0, 75]) {\n            cube([0.5, 30, 20]);\n        }\n    }\n    \n    // Red \"SKIMMED\" text representation\n    color([0.9, 0.2, 0.2]) {\n        translate([25.7, 0, 50]) {\n            cube([0.3, 25, 8]);\n        }\n    }\n}\n\n// Side seam\nmodule seam() {\n    color([0.8, 0.8, 0.8]) {\n        translate([0, 17.5, 50]) {\n            cube([50, 0.5, 100]);\n        }\n    }\n}\n\n// Bottom folding pattern\nmodule bottom_pattern() {\n    color([0.9, 0.9, 0.9]) {\n        translate([0, 0, 0.5]) {\n            rotate([90, 0, 0]) {\n                // Diamond pattern\n                for (i = [-20:10:20]) {\n                    for (j = [-15:10:15]) {\n                        translate([i, j, 0]) {\n                            scale([0.5, 0.5, 1]) {\n                                cylinder(h = 0.5, r = 3);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Assembly\ncolor([0.95, 0.95, 0.95]) {\n    milk_carton();\n}\ncarton_top();\nfold_lines();\nlabel();\nseam();\nbottom_pattern();",
    "renders": true
  },
  {
    "food_item": "whole",
    "openscad_code": "// Realistic whole apple with stem and leaf\n// Overall size: ~65mm diameter x ~75mm height\n\n// Stem color\nstem_color = [101/255, 67/255, 33/255];\n\n// Leaf color\nleaf_color = [34/255, 139/255, 34/255];\n\n// Apple skin color\napple_color = [220/255, 20/255, 60/255];\n\n// Apple flesh color\nflesh_color = [255/255, 250/255, 240/255];\n\n// Apple body\nmodule apple_body() {\n    color(apple_color)\n    difference() {\n        // Main apple shape - sphere deformed to apple shape\n        scale([1, 1, 1.1])\n        sphere(d = 60, $fn = 100);\n        \n        // Indentation at top for stem\n        translate([0, 0, 30])\n        cylinder(h = 10, r1 = 4, r2 = 6, $fn = 20);\n        \n        // Indentation at bottom\n        translate([0, 0, -30])\n        cylinder(h = 10, r1 = 6, r2 = 4, $fn = 20);\n    }\n}\n\n// Apple stem\nmodule apple_stem() {\n    color(stem_color)\n    translate([0, 0, 33])\n    rotate([0, 0, 5])\n    cylinder(h = 12, r1 = 1.5, r2 = 1, $fn = 12);\n}\n\n// Apple leaf\nmodule apple_leaf() {\n    color(leaf_color)\n    translate([6, 3, 38])\n    rotate([0, 110, 30])\n    scale([0.8, 1, 0.3])\n    difference() {\n        // Basic leaf shape\n        sphere(d = 15, $fn = 20);\n        \n        // Cut leaf to make it flatter\n        translate([0, 0, -2])\n        cube([20, 20, 4], center = true);\n        \n        // Leaf stem\n        translate([0, -7.5, 0])\n        rotate([90, 0, 0])\n        cylinder(h = 3, r = 0.5, $fn = 8);\n    }\n}\n\n// Apple calyx (bottom)\nmodule apple_calyx() {\n    color(apple_color)\n    translate([0, 0, -30.5])\n    difference() {\n        cylinder(h = 2, r = 6, $fn = 30);\n        \n        // Create star pattern\n        for (i = [0:5]) {\n            rotate([0, 0, i * 60])\n            translate([3, 0, -1])\n            cube([6, 2, 4], center = true);\n        }\n    }\n}\n\n// Small surface bumps for texture\nmodule apple_texture() {\n    color(apple_color)\n    for (i = [0:10]) {\n        rotate([0, 0, i * 36])\n        for (j = [1:5]) {\n            rotate([j * 15, 0, 0])\n            translate([0, 0, 28])\n            sphere(d = 1.5, $fn = 8);\n        }\n    }\n}\n\n// Assemble the apple\napple_body();\napple_stem();\napple_leaf();\napple_calyx();\napple_texture();",
    "renders": true
  },
  {
    "food_item": "semi",
    "openscad_code": "// Avocado half\n// Medium complexity realistic style\n\n$fn = 48;\n\n// Main dimensions\navocado_length = 60;\navocado_width = 40;\navocado_height = 30;\npit_radius = 15;\nwall_thickness = 2;\n\nmodule avocado_half() {\n    // Outer shell\n    difference() {\n        // Main avocado body\n        scale([1, 0.7, 0.5])\n            sphere(d = avocado_length);\n        \n        // Cut in half\n        translate([0, 0, -avocado_height/2])\n            cube([avocado_length*2, avocado_width*2, avocado_height], center = true);\n        \n        // Hollow out\n        scale([1, 0.7, 0.5])\n            sphere(d = avocado_length - wall_thickness*2);\n    }\n    \n    // Inner flesh color\n    color([0.4, 0.7, 0.3]) {\n        difference() {\n            // Flesh\n            scale([1, 0.7, 0.5])\n                sphere(d = avocado_length - wall_thickness*2);\n            \n            // Pit cavity\n            translate([0, 0, -avocado_height/4])\n                sphere(d = pit_radius*2);\n        }\n    }\n    \n    // Pit\n    color([0.5, 0.3, 0.15]) {\n        translate([0, 0, -avocado_height/4])\n            scale([1, 1, 0.8])\n                sphere(d = pit_radius*2);\n    }\n    \n    // Skin texture\n    color([0.2, 0.4, 0.15]) {\n        for (i = [0:15]) {\n            rotate([0, 0, i*24])\n                translate([avocado_length/2 - wall_thickness, 0, 0])\n                    scale([1, 0.7, 0.3])\n                        sphere(d = 2);\n        }\n    }\n    \n    // Flesh texture\n    color([0.5, 0.8, 0.4]) {\n        for (i = [0:8]) {\n            for (j = [0:4]) {\n                theta = i*45;\n                r = j*6 + 10;\n                x = r * cos(theta);\n                y = r * sin(theta) * 0.7;\n                z = -5;\n                \n                if (sqrt(x*x + y*y) < pit_radius + 5) continue;\n                \n                translate([x, y, z])\n                    scale([1, 0.7, 0.2])\n                        sphere(d = 1);\n            }\n        }\n    }\n}\n\n// Create avocado with slight rotation for presentation\nrotate([15, 0, 25])\n    avocado_half();",
    "renders": true
  },
  {
    "food_item": "double",
    "openscad_code": "// Double Hamburger - Realistic Style with Medium Complexity\n// Overall size: ~60mm diameter, ~35mm height\n\n$fn = 64;\n\n// Main colors\ncolor_bun = \"#E8B36B\";\ncolor_patty = \"#5A3825\";\ncolor_cheese = \"#FFD700\";\ncolor_lettuce = \"#90EE90\";\ncolor_tomato = \"#FF6347\";\ncolor_onion = \"#F5F5DC\";\ncolor_seeds = \"#FFF8DC\";\n\n// Whole burger module\nmodule double_burger() {\n    // Bottom bun\n    translate([0, 0, 0])\n        bun();\n    \n    // First patty\n    translate([0, 0, 8])\n        patty();\n    \n    // Cheese slice 1\n    translate([0, 0, 12.5])\n        cheese_slice();\n    \n    // Lettuce 1\n    translate([0, 0, 15])\n        lettuce();\n    \n    // Tomato slice 1\n    translate([0, 0, 17])\n        tomato_slice();\n    \n    // Onion ring 1\n    translate([0, 0, 19.5])\n        onion_ring();\n    \n    // Middle bun\n    translate([0, 0, 22])\n        middle_bun();\n    \n    // Second patty\n    translate([0, 0, 30])\n        patty();\n    \n    // Cheese slice 2\n    translate([0, 0, 34.5])\n        cheese_slice();\n    \n    // Lettuce 2\n    translate([0, 0, 37])\n        lettuce();\n    \n    // Tomato slice 2\n    translate([0, 0, 39])\n        tomato_slice();\n    \n    // Onion ring 2\n    translate([0, 0, 41.5])\n        onion_ring();\n    \n    // Top bun\n    translate([0, 0, 44])\n        top_bun();\n}\n\n// Bun modules\nmodule bun() {\n    color(color_bun) {\n        // Main bun shape\n        difference() {\n            cylinder(h = 10, r1 = 30, r2 = 28);\n            cylinder(h = 10, r1 = 25, r2 = 23);\n        }\n        \n        // Bottom rounding\n        translate([0, 0, -2])\n            cylinder(h = 5, r1 = 28, r2 = 30);\n    }\n}\n\nmodule middle_bun() {\n    color(color_bun) {\n        difference() {\n            cylinder(h = 8, r1 = 28, r2 = 28);\n            cylinder(h = 8, r1 = 24, r2 = 24);\n        }\n    }\n}\n\nmodule top_bun() {\n    color(color_bun) {\n        difference() {\n            cylinder(h = 12, r1 = 28, r2 = 30);\n            cylinder(h = 12, r1 = 24, r2 = 26);\n        }\n        \n        // Sesame seeds\n        for(i = [0:35]) {\n            rotate([0, 0, i * 10 + rand(0, 5)])\n                translate([rand(10, 25), 0, 11.5])\n                    rotate([90, 0, rand(-30, 30)])\n                        color(color_seeds)\n                            scale([0.3, 0.3, 1])\n                                cylinder(h = 1.5, r = 1);\n        }\n    }\n}\n\n// Patty module\nmodule patty() {\n    color(color_patty) {\n        difference() {\n            cylinder(h = 4.5, r = 26);\n            cylinder(h = 4.5, r = 24);\n        }\n        \n        // Grill marks\n        for(i = [0:3]) {\n            rotate([0, 0, i * 45])\n                translate([0, 0, 4.5])\n                    color(\"#3A2317\")\n                        cube([40, 1, 0.5], center = true);\n        }\n    }\n}\n\n// Cheese slice\nmodule cheese_slice() {\n    color(color_cheese) {\n        difference() {\n            cylinder(h = 1.5, r = 28);\n            cylinder(h = 1.5, r = 25);\n        }\n        \n        // Melted edges\n        for(i = [0:7]) {\n            rotate([0, 0, i * 45])\n                translate([28, 0, 0])\n                    cube([6, 1, 1.5]);\n        }\n    }\n}\n\n// Lettuce\nmodule lettuce() {\n    color(color_lettuce) {\n        for(i = [0:5]) {\n            rotate([0, 0, i * 30])\n                translate([rand(5, 15), 0, 0])\n                    scale([1, rand(0.8, 1.2), 1])\n                        cylinder(h = 2, r = rand(20, 25));\n        }\n    }\n}\n\n// Tomato slice\nmodule tomato_slice() {\n    color(color_tomato) {\n        difference() {\n            cylinder(h = 2, r = 25);\n            cylinder(h = 2, r = 22);\n        }\n        \n        // Inner details\n        translate([0, 0, 1])\n            color(\"#8B0000\")\n                cylinder(h = 0.5, r = 22);\n    }\n}\n\n// Onion ring\nmodule onion_ring() {\n    color(color_onion) {\n        difference() {\n            cylinder(h = 2.5, r = 24);\n            cylinder(h = 2.5, r = 18);\n        }\n        \n        // Onion layers\n        for(i = [1:3]) {\n            translate([0, 0, i * 0.5])\n                color(\"#E6E6FA\")\n                    cylinder(h = 0.3, r1 = 24 - i * 1.5, r2 = 24 - i * 1.5);\n        }\n    }\n}\n\n// Helper for random values\nfunction rand(min, max) = min + (max - min) * (sin(12345.6789 * $parent_modules) * 0.5 + 0.5);\n\n// Create the burger\ndouble_burger();",
    "renders": true
  },
  {
    "food_item": "whipping",
    "openscad_code": "// Whipping cream swirl with realistic texture\n// Designed for 3D printing at approximately 80mm tall\n\n$fn = 36;\n\n// Main colors\ncream = [1, 0.98, 0.94];\nshadow = [0.9, 0.88, 0.85];\n\n// Whipping cream swirl base\nmodule cream_swirl() {\n    color(cream) {\n        // Main swirl body built from stacked torus-like shapes\n        for(i = [0:5:70]) {\n            translate([0, 0, i]) {\n                rotate([0, 0, i * 5]) {\n                    scale([1 - i/200, 1 - i/200, 0.8]) {\n                        difference() {\n                            cylinder(h = 6, r1 = 15 - i/8, r2 = 12 - i/8, center = true);\n                            cylinder(h = 7, r1 = 12 - i/8, r2 = 9 - i/8, center = true);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Realistic texture with small bubbles\nmodule cream_texture() {\n    color(shadow) {\n        // Random small spheres for air bubbles\n        for(i = [0:15]) {\n            translate([\n                sin(i * 137.5) * (10 + i/2),\n                cos(i * 137.5) * (10 + i/2),\n                i * 4 + 5\n            ]) {\n                sphere(r = 0.5 + 0.5 * sin(i * 3));\n            }\n        }\n        \n        // Surface ridges for whipped texture\n        for(i = [0:35]) {\n            rotate([0, 0, i * 10]) {\n                translate([8 - i/5, 0, i * 2]) {\n                    scale([0.3, 2, 0.5]) {\n                        sphere(r = 1 + 0.5 * sin(i));\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Peak decoration\nmodule cream_peaks() {\n    color(cream) {\n        // Top swirl peaks\n        translate([0, 0, 75]) {\n            rotate([0, 0, 45]) {\n                scale([1, 0.7, 1]) {\n                    sphere(r = 8);\n                }\n            }\n        }\n        \n        // Side peaks\n        for(angle = [60, 180, 300]) {\n            rotate([0, 0, angle]) {\n                translate([12, 0, 65]) {\n                    rotate([0, -20, 0]) {\n                        scale([0.8, 0.6, 1.2]) {\n                            sphere(r = 6);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Base support for printing\nmodule base_support() {\n    color([0.95, 0.93, 0.9]) {\n        translate([0, 0, -2]) {\n            cylinder(h = 2, r = 16, $fn = 64);\n        }\n    }\n}\n\n// Assemble the whipping cream\nunion() {\n    base_support();\n    cream_swirl();\n    cream_texture();\n    cream_peaks();\n}",
    "renders": true
  },
  {
    "food_item": "heavy",
    "openscad_code": "// Heavy Watermelon Slice - Realistic Style\n// Dimensions approximately 80mm diameter, 40mm thick\n\n$fn = 32;\n\n// Main colors\nwatermelon_red = [0.9, 0.2, 0.3];\nrind_dark = [0.1, 0.4, 0.2];\nrind_light = [0.7, 0.9, 0.6];\nseed_black = [0.1, 0.1, 0.1];\n\n// Watermelon slice body\nmodule watermelon_slice() {\n    difference() {\n        // Main slice shape\n        color(watermelon_red)\n        linear_extrude(height = 40, center = true)\n        intersection() {\n            circle(d = 80);\n            translate([-40, 0, 0]) square([80, 40]);\n        }\n        \n        // White rind layer\n        color(rind_light)\n        linear_extrude(height = 42, center = true)\n        offset(r = -6)\n        intersection() {\n            circle(d = 80);\n            translate([-40, 0, 0]) square([80, 40]);\n        }\n        \n        // Dark green rind\n        color(rind_dark)\n        linear_extrude(height = 44, center = true)\n        offset(r = -10)\n        intersection() {\n            circle(d = 80);\n            translate([-40, 0, 0]) square([80, 40]);\n        }\n    }\n}\n\n// Seed generation\nmodule seeds() {\n    for(i = [1:8]) {\n        angle = i * 45;\n        radius = 15 + (i % 2) * 10;\n        \n        // Outer ring seeds\n        translate([\n            cos(angle) * radius,\n            sin(angle) * radius,\n            0\n        ])\n        rotate([0, 0, angle])\n        seed();\n        \n        // Inner ring seeds\n        translate([\n            cos(angle + 22.5) * (radius - 10),\n            sin(angle + 22.5) * (radius - 10),\n            0\n        ])\n        rotate([0, 0, angle + 22.5])\n        seed();\n    }\n    \n    // Center seeds\n    for(j = [1:5]) {\n        angle = j * 72;\n        translate([\n            cos(angle) * 5,\n            sin(angle) * 5,\n            0\n        ])\n        rotate([0, 0, angle])\n        scale([0.7, 0.7, 0.7])\n        seed();\n    }\n}\n\n// Individual seed\nmodule seed() {\n    color(seed_black)\n    translate([0, 0, 19])\n    scale([1, 0.6, 0.3])\n    sphere(d = 3);\n}\n\n// Rind texture lines\nmodule rind_texture() {\n    color(rind_dark)\n    for(i = [-35:5:35]) {\n        translate([i, 0, 20])\n        scale([0.3, 1, 0.3])\n        cube([2, 80, 2]);\n    }\n}\n\n// Assembly\nwatermelon_slice();\nseeds();\nrind_texture();",
    "renders": true
  },
  {
    "food_item": "light",
    "openscad_code": "// Realistic medium-complexity 3D-printable waffle with syrup and butter\n// Overall size ~80 mm diameter, ~12 mm thick – safe for FDM printing\n\n// Basic parameters\nwaffle_d = 80;          // mm\nwaffle_h = 8;           // mm\nbutter_w = 25;          // mm\nbutter_h = 3;           // mm\nsyrup_thick = 1.5;      // mm\nwall = 1.2;             // mm – enough for 0.4 mm nozzle\n\n// Color constants\nwaffle_color = [210/255, 180/255, 140/255];\nbutter_color = [250/255, 240/255, 210/255];\nsyrup_color  = [150/255,  75/255,   0/255];\n\nmodule waffle_base() {\n    difference() {\n        // Main disk\n        color(waffle_color)\n            cylinder(h = waffle_h, d = waffle_d, $fn = 64);\n\n        // Center hole (light cavity)\n        translate([0, 0, -0.01])\n            cylinder(h = waffle_h + 0.02, d = waffle_d - 2*wall, $fn = 64);\n    }\n}\n\nmodule waffle_grid() {\n    // Square grid pattern on top face\n    n = 12;               // number of squares across diameter\n    step = waffle_d / n;\n\n    for (i = [-n/2:n/2-1])\n        for (j = [-n/2:n/2-1]) {\n            translate([i*step + step/2, j*step + step/2, waffle_h - 0.5])\n                cube([step - 1.2, step - 1.2, 1], center = true);\n        }\n}\n\nmodule butter_pats() {\n    // Two rectangular pats of butter slightly offset\n    for (p = [[-10, 10], [10, -10]]) {\n        translate(concat(p, [waffle_h + butter_h/2]))\n            color(butter_color)\n                cube([butter_w, butter_w*0.7, butter_h], center = true);\n    }\n}\n\nmodule syrup_drizzle() {\n    // Random syrup paths\n    seed = 42;\n    n_paths = 6;\n    for (i = [1:n_paths]) {\n        angle = rands(0, 360, 1, seed + i)[0];\n        len   = rands(15, 35, 1, seed + i)[0];\n        x = rands(-waffle_d/3, waffle_d/3, 1, seed + i)[0];\n        y = rands(-waffle_d/3, waffle_d/3, 1, seed + i)[0];\n\n        translate([x, y, waffle_h + syrup_thick/2])\n            rotate([0, 0, angle])\n            color(syrup_color)\n                cube([len, 2.4, syrup_thick], center = true);\n    }\n}\n\nunion() {\n    waffle_base();\n    waffle_grid();\n    butter_pats();\n    syrup_drizzle();\n}",
    "renders": true
  },
  {
    "food_item": "sour",
    "openscad_code": "// Sour Lemon Slice - Realistic Style\n// A realistic lemon wedge with sour texture, seeds, and natural details\n\nthickness = 8;\nradius = 25;\nheight = 30;\n$fn = 32;\n\n// Main lemon wedge shape\nmodule lemon_wedge() {\n    difference() {\n        // Outer lemon shape\n        color(\"yellow\") {\n            // Main lemon body\n            intersection() {\n                // Cylinder for basic lemon shape\n                cylinder(h=height, r=radius, center=true);\n                \n                // Cut at 45° angle to make wedge\n                rotate([0, 45, 0])\n                    cube([radius*3, radius*3, radius*3], center=true);\n            }\n            \n            // Add thickness to the cut face\n            translate([0, 0, -height/2])\n                cube([radius*2, thickness, height], center=true);\n        }\n        \n        // Remove center to make it hollow\n        translate([0, 0, -height/2 - 1])\n            cylinder(h=height + 2, r=radius - 6, center=false);\n    }\n}\n\n// Lemon peel texture pattern\nmodule peel_texture() {\n    color(\"yellow\") {\n        // Outer peel layer\n        difference() {\n            // Slightly larger shell\n            scale([1.02, 1.02, 1.02])\n                lemon_wedge();\n            lemon_wedge();\n        }\n        \n        // Oil gland dots on peel\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90])\n                translate([radius - 2, 0, height/4])\n                    sphere(d=1.5, $fn=8);\n        }\n        \n        for(i = [0:3]) {\n            rotate([0, 0, i * 90 + 45])\n                translate([radius - 2, 0, -height/4])\n                    sphere(d=1.5, $fn=8);\n        }\n    }\n}\n\n// Lemon segments\nmodule lemon_segments() {\n    color([1, 0.9, 0.2]) {\n        difference() {\n            // Main flesh\n            lemon_wedge();\n            \n            // Segment divisions\n            for(i = [1:3]) {\n                rotate([0, 0, i * 30 - 45])\n                    translate([0, -radius, -height/2 - 1])\n                        cube([radius*2, 1, height + 2], center=true);\n            }\n        }\n    }\n}\n\n// Lemon seeds\nmodule lemon_seeds() {\n    color([0.2, 0.1, 0]) {\n        // Central seeds\n        translate([0, 0, 0])\n            scale([1, 0.5, 1.5])\n                sphere(d=3, $fn=12);\n        \n        translate([0, 0, 5])\n            scale([1, 0.5, 1.5])\n                sphere(d=3, $fn=12);\n        \n        translate([0, 0, -5])\n            scale([1, 0.5, 1.5])\n                sphere(d=3, $fn=12);\n    }\n}\n\n// White pith layer\nmodule pith_layer() {\n    color([0.95, 0.95, 0.85]) {\n        difference() {\n            // Pith between peel and flesh\n            scale([0.92, 0.92, 0.92])\n                lemon_wedge();\n            scale([0.85, 0.85, 0.85])\n                lemon_wedge();\n        }\n    }\n}\n\n// Assemble the complete lemon\nunion() {\n    // Outer peel with texture\n    peel_texture();\n    \n    // White pith\n    pith_layer();\n    \n    // Inner flesh segments\n    lemon_segments();\n    \n    // Seeds in center\n    lemon_seeds();\n}",
    "renders": true
  },
  {
    "food_item": "sweet",
    "openscad_code": "// Strawberry with realistic features\n// Overall size: ~70mm tall strawberry\n\n// Strawberry color\nstrawberry_color = [0.9, 0.1, 0.2];\nstem_color = [0.2, 0.5, 0.2];\nseed_color = [0.95, 0.95, 0.8];\n\n// Main strawberry body\nmodule strawberry_body() {\n    color(strawberry_color) {\n        // Main body - slightly tapered ellipsoid\n        scale([1, 1.2, 1.3])\n            sphere(d=50, $fn=50);\n        \n        // Add slight indentations for segments\n        for(i=[0:7]) {\n            rotate([0, 0, i*45])\n                translate([22, 0, 0])\n                    scale([0.3, 1, 1])\n                        sphere(d=50, $fn=30);\n        }\n    }\n}\n\n// Strawberry seeds (achenes)\nmodule seeds() {\n    color(seed_color) {\n        // Create seed pattern in spiral\n        translate([0, 0, 25])\n        for(j=[0:3]) {\n            rotate([0, 0, j*90])\n                for(i=[0:12]) {\n                    rotate([0, 0, i*30])\n                        translate([15 + sin(i*30)*5, 0, -j*8])\n                            scale([1, 0.7, 0.3])\n                                sphere(d=2.5, $fn=8);\n                }\n        }\n        \n        // Additional seeds on lower half\n        translate([0, 0, 5])\n        for(j=[0:2]) {\n            rotate([0, 0, j*120])\n                for(i=[0:8]) {\n                    rotate([0, 0, i*45])\n                        translate([18 + sin(i*45)*3, 0, -j*10])\n                            scale([1, 0.7, 0.3])\n                                sphere(d=2.5, $fn=8);\n                }\n        }\n    }\n}\n\n// Strawberry stem with leaves\nmodule stem() {\n    color(stem_color) {\n        // Central stem\n        translate([0, 0, 32])\n            cylinder(h=8, d1=6, d2=4, $fn=8);\n        \n        // Stem leaves\n        for(i=[0:4]) {\n            rotate([0, 0, i*72])\n                translate([3, 0, 32])\n                    rotate([90, 0, 0])\n                        scale([0.8, 1.2, 0.3])\n                            cylinder(h=8, d1=6, d2=2, $fn=3);\n        }\n        \n        // Small leaf details\n        for(i=[0:5]) {\n            rotate([0, 0, i*72 + 36])\n                translate([5, 0, 35])\n                    rotate([45, 0, 0])\n                        scale([0.5, 0.8, 0.2])\n                            cylinder(h=5, d1=4, d2=1, $fn=3);\n        }\n    }\n}\n\n// Combine all parts\nunion() {\n    strawberry_body();\n    seeds();\n    stem();\n}",
    "renders": true
  },
  {
    "food_item": "salted",
    "openscad_code": "// Salted Pretzel - Realistic style, medium complexity\n// Dimensions: ~70mm diameter, printable without supports\n\n// Parameters\n$fn=32;\npretzel_diameter = 70;\nthickness = 8;\nsalt_size = 1.2;\nsalt_amount = 20;\n\n// Main pretzel shape\nmodule pretzel() {\n    color([0.82, 0.65, 0.45]) // Golden brown color\n    \n    // Left loop\n    translate([-15, 0, 0])\n    rotate([0, 0, -30])\n    torus_segment(thickness, 25, 180);\n    \n    // Right loop\n    translate([15, 0, 0])\n    rotate([0, 0, 30])\n    torus_segment(thickness, 25, 180);\n    \n    // Bottom arc\n    translate([0, -20, 0])\n    rotate([0, 0, 180])\n    torus_segment(thickness, 25, 180);\n    \n    // Cross piece\n    hull() {\n        translate([-15, 5, 0])\n        sphere(thickness/2);\n        translate([15, 5, 0])\n        sphere(thickness/2);\n    }\n    \n    // Top connections\n    hull() {\n        translate([-15, 25, 0])\n        sphere(thickness/2);\n        translate([-5, 15, 0])\n        sphere(thickness/2);\n    }\n    \n    hull() {\n        translate([15, 25, 0])\n        sphere(thickness/2);\n        translate([5, 15, 0])\n        sphere(thickness/2);\n    }\n}\n\n// Create torus segment for curved parts\nmodule torus_segment(radius, major_r, degrees) {\n    rotate_extrude(angle=degrees)\n    translate([major_r, 0, 0])\n    circle(r=radius);\n}\n\n// Salt crystals\nmodule salt() {\n    color([0.95, 0.95, 0.9])\n    for(i=[1:salt_amount]) {\n        // Random positions on pretzel surface\n        angle = i * 137.5; // Golden angle\n        r = pretzel_diameter/2 * 0.8;\n        x = cos(angle) * r * (0.5 + noise(i)/2);\n        y = sin(angle) * r * (0.5 + noise(i+salt_amount)/2) - 10;\n        \n        translate([x, y, thickness/2 + 0.5])\n        rotate([rand(i)*30, rand(i+1)*30, rand(i+2)*30])\n        scale([1, 1, 0.5])\n        cube(salt_size, center=true);\n    }\n}\n\n// Simple noise function for variation\nfunction noise(n) = (n*13.7)%1;\n\n// Random number generator\nfunction rand(n) = (n*73.3)%360;\n\n// Add texture lines for realism\nmodule texture_lines() {\n    color([0.75, 0.58, 0.38])\n    for(i=[0:3]) {\n        rotate([0, 0, i*90])\n        translate([0, -25, thickness/2 + 0.1])\n        linear_extrude(height=0.2)\n        offset(delta=-0.5)\n        offset(delta=0.5)\n        circle(d=45);\n    }\n}\n\n// Assembly\nunion() {\n    pretzel();\n    salt();\n    texture_lines();\n}\n\n// Add small base for stability\ntranslate([0, 0, -thickness/2 - 2])\ncolor([0.82, 0.65, 0.45])\ncylinder(h=2, d=pretzel_diameter + 10, center=true);",
    "renders": true
  },
  {
    "food_item": "unsalted",
    "openscad_code": "// Unsalted Pretzel - Realistic Style\n// Dimensions: ~75mm wide x ~60mm tall\n\n$fa = 2;\n$fs = 0.5;\n\nmodule pretzel() {\n    color([0.85, 0.65, 0.45]) {\n        // Main pretzel body - twisted loop\n        rotate([0, 0, 45]) {\n            // Left loop\n            for(i = [0:1]) {\n                mirror([i, 0, 0]) {\n                    translate([0, 0, 5]) {\n                        difference() {\n                            // Thick loop base\n                            rotate_extrude(angle = 180, $fn = 32) {\n                                translate([25, 0, 0]) {\n                                    circle(r = 4, $fn = 16);\n                                }\n                            }\n                            // Hollow center\n                            rotate_extrude(angle = 180, $fn = 32) {\n                                translate([25, 0, 0]) {\n                                    circle(r = 2.5, $fn = 16);\n                                }\n                            }\n                        }\n                    }\n                    \n                    // Connect loops to center\n                    translate([0, 25, 5]) {\n                        rotate([90, 0, 90]) {\n                            difference() {\n                                cylinder(h = 20, r = 4, $fn = 16);\n                                cylinder(h = 20, r = 2.5, $fn = 16);\n                            }\n                        }\n                    }\n                }\n            }\n            \n            // Bottom crossover\n            translate([0, -10, 5]) {\n                rotate([90, 0, 0]) {\n                    difference() {\n                        cylinder(h = 35, r = 4.5, $fn = 16);\n                        cylinder(h = 35, r = 3, $fn = 16);\n                    }\n                }\n            }\n            \n            // Top crossover\n            translate([0, 10, 5]) {\n                rotate([90, 0, 0]) {\n                    difference() {\n                        cylinder(h = 25, r = 4.5, $fn = 16);\n                        cylinder(h = 25, r = 3, $fn = 16);\n                    }\n                }\n            }\n        }\n        \n        // Pretzel ends - tapered\n        for(i = [0:1]) {\n            rotate([0, 0, i * 180]) {\n                translate([0, 38, 5]) {\n                    rotate([0, 90, 0]) {\n                        // Tapered end\n                        hull() {\n                            translate([0, 0, 0]) {\n                                sphere(r = 4, $fn = 16);\n                            }\n                            translate([0, 0, -8]) {\n                                sphere(r = 3, $fn = 16);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Salt crystal texture (minimal for unsalted)\n    color([0.9, 0.75, 0.55]) {\n        for(i = [1:20]) {\n            rotate([0, 0, i * 18 + rand(i) * 10]) {\n                translate([rand(i) * 60 - 30, rand(i+10) * 60 - 30, rand(i+20) * 8 + 2]) {\n                    scale([1, 1, 0.3]) {\n                        sphere(r = 0.3 + rand(i+30) * 0.2, $fn = 8);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Helper function for random values\nfunction rand(seed) = rands(0, 1, 1, seed)[0];\n\n// Create the pretzel\npretzel();",
    "renders": true
  },
  {
    "food_item": "cultured",
    "openscad_code": "// Cultured Blue Cheese Wheel - realistic style, medium complexity\n\n// Wheel parameters\nwheel_d = 60;\nwheel_h = 25;\nrind_thick = 1.5;\ncrust_color = \"#F5F5DC\";\nvein_color = \"#104E8B\";\n\n// Main wheel body with rind\ndifference() {\n    // Full wheel\n    union() {\n        color(crust_color)\n        cylinder(h = wheel_h, d = wheel_d, $fn = 100);\n        \n        // Bottom rind lip\n        color(crust_color)\n        translate([0, 0, -rind_thick/2])\n            cylinder(h = rind_thick, d1 = wheel_d, d2 = wheel_d*1.02, $fn = 100);\n        \n        // Top rind lip\n        color(crust_color)\n        translate([0, 0, wheel_h - rind_thick/2])\n            cylinder(h = rind_thick, d1 = wheel_d*1.02, d2 = wheel_d, $fn = 100);\n    }\n    \n    // Hollow out center\n    cylinder(h = wheel_h + 2, d = wheel_d - 2*rind_thick, $fn = 100);\n}\n\n// Cheese paste (inner part)\ntranslate([0, 0, rind_thick])\n    color(\"#FFF8DC\") cylinder(h = wheel_h - 2*rind_thick, d = wheel_d - 2*rind_thick, $fn = 100);\n\n// Blue veins module\nmodule vein(x, y, z, rot) {\n    translate([x, y, z]) {\n        rotate([0, 0, rot]) {\n            color(vein_color, 0.7)\n            scale([1, 0.3, 0.3])\n                sphere(r = 1.5, $fn = 8);\n        }\n    }\n}\n\n// Generate blue veins network\nfor (i = [0:8]) {\n    angle = i * 45;\n    radius = (wheel_d/2 - 5) * 0.7;\n    \n    // Radial veins\n    vein(\n        cos(angle) * radius,\n        sin(angle) * radius,\n        wheel_h/2,\n        angle\n    );\n    \n    // Additional veins at different heights\n    vein(\n        cos(angle + 22.5) * radius * 0.8,\n        sin(angle + 22.5) * radius * 0.8,\n        wheel_h/3,\n        angle + 22.5\n    );\n    \n    vein(\n        cos(angle - 22.5) * radius * 0.9,\n        sin(angle - 22.5) * radius * 0.9,\n        wheel_h*2/3,\n        angle - 22.5\n    );\n}\n\n// Natural cracks\nmodule crack(x, y, z, len, wid) {\n    translate([x, y, z]) {\n        rotate([0, 0, rands(0, 360, 1)[0]])\n        scale([len, wid, 0.5])\n            color(\"#D3D3D3\")\n            cube([1, 1, 1], center = true);\n    }\n}\n\n// Surface texture cracks\nfor (i = [0:12]) {\n    angle = rands(0, 360, 1)[0];\n    dist = rands(5, wheel_d/2 - 3, 1)[0];\n    crack(\n        cos(angle) * dist,\n        sin(angle) * dist,\n        wheel_h - rind_thick - 0.5,\n        rands(2, 5, 1)[0],\n        rands(0.3, 0.8, 1)[0]\n    );\n}\n\n// Bottom surface cracks\nfor (i = [0:10]) {\n    angle = rands(0, 360, 1)[0];\n    dist = rands(5, wheel_d/2 - 3, 1)[0];\n    crack(\n        cos(angle) * dist,\n        sin(angle) * dist,\n        rind_thick + 0.5,\n        rands(2, 4, 1)[0],\n        rands(0.3, 0.7, 1)[0]\n    );\n}\n\n// Small mold spots\nmodule mold_spot(x, y, z) {\n    translate([x, y, z])\n        color(\"#2F4F4F\", 0.8)\n        sphere(r = 0.3 + 0.2*sin(x*y), $fn = 6);\n}\n\n// Surface mold\nfor (i = [0:15]) {\n    angle = rands(0, 360, 1)[0];\n    dist = rands(8, wheel_d/2 - 4, 1)[0];\n    height = rands(rind_thick + 1, wheel_h - rind_thick - 1, 1)[0];\n    \n    mold_spot(\n        cos(angle) * dist,\n        sin(angle) * dist,\n        height\n    );\n}",
    "renders": true
  },
  {
    "food_item": "set",
    "openscad_code": "// Avocado Half Set (realistic style, medium complexity)\n// Includes one whole avocado and one sliced half with pit\n\n$fn = 36;  // Smooth curves for realistic appearance\n\n// Main colors for realistic avocado\n$avocado_skin = [50, 70, 30];\n$avocado_flesh = [180, 190, 100];\n$avocado_pit = [120, 80, 50];\n\n// Whole avocado module\nmodule whole_avocado() {\n    color($avocado_skin) {\n        // Main body - slightly elongated sphere\n        scale([1, 1.2, 1]) sphere(20);\n        \n        // Small stem at top\n        translate([0, 0, 22]) \n            cylinder(h=5, r1=3, r2=2);\n        \n        // Textured skin bumps - small spheres\n        for(i = [0:35]) {\n            rotate([0, 90, i * 10]) \n                translate([19, 0, 0]) \n                    scale([0.3, 0.2, 0.2]) \n                        sphere(2);\n        }\n    }\n}\n\n// Avocado half module\nmodule avocado_half() {\n    // Outer skin layer\n    difference() {\n        color($avocado_skin) {\n            scale([1, 1.2, 1]) \n                sphere(20);\n        }\n        \n        // Remove half\n        translate([0, 0, -20]) \n            cube([50, 50, 40], center=true);\n    }\n    \n    // Inner flesh\n    color($avocado_flesh) {\n        difference() {\n            // Thinner sphere for flesh\n            scale([0.9, 1.1, 0.9]) \n                sphere(18);\n            \n            // Remove half\n            translate([0, 0, -20]) \n                cube([50, 50, 40], center=true);\n        }\n    }\n    \n    // Pit in center\n    color($avocado_pit) {\n        translate([0, 0, 2]) {\n            // Main pit body\n            scale([1, 1.2, 0.8]) \n                sphere(8);\n            \n            // Slight indentation at top\n            translate([0, 0, 5]) \n                cylinder(h=3, r1=4, r2=3);\n        }\n    }\n    \n    // Flesh texture lines\n    for(i = [0:8]) {\n        rotate([0, 0, i * 45]) {\n            color($avocado_flesh) {\n                translate([5, 0, 1]) \n                    scale([0.1, 0.5, 0.1]) \n                        cylinder(h=12, r=1);\n            }\n        }\n    }\n}\n\n// Assembly\ntranslate([-25, 0, 0]) whole_avocado();\ntranslate([25, 0, 0]) avocado_half();",
    "renders": true
  },
  {
    "food_item": "strained",
    "openscad_code": "// Realistic Strained Banana - Medium Complexity\n// Features peel, fruit body, and characteristic banana curve\n\n$fn = 50;  // Smooth curves for realism\n\n// Main banana module\nmodule banana() {\n    // Constants for banana proportions\n    banana_length = 80;\n    banana_width = 20;\n    peel_thickness = 1.5;\n    \n    // Overall banana shape using hull of spheres\n    color(\"FFD700\")  // Banana yellow\n    union() {\n        // Main banana body - series of overlapping spheres\n        for(i = [0:5:banana_length]) {\n            translate([\n                sin(i/15)*15,  // Curvature\n                0, \n                cos(i/15)*15 - 15\n            ]) {\n                sphere(banana_width/2 - i/20);  // Tapering ends\n            }\n        }\n        \n        // Peel segments\n        for(i = [0:3]) {\n            rotate([0, 0, i*90])\n            translate([0, 0, banana_width/2 - 2])\n            peel_segment(banana_length, banana_width);\n        }\n        \n        // Stem at top\n        translate([0, 0, banana_width/2])\n        rotate([90, 0, 0])\n        cylinder(h=8, r1=4, r2=3);\n    }\n    \n    // Inner fruit (slightly smaller than peel)\n    color(\"FFF8DC\")  // Banana flesh color\n    translate([0, 0, -1])\n    for(i = [0:5:banana_length-10]) {\n        translate([\n            sin(i/15)*15,  // Follows same curvature\n            0, \n            cos(i/15)*15 - 15\n        ]) {\n            sphere(banana_width/2 - 3 - i/20);  // Smaller than peel\n        }\n    }\n}\n\n// Individual peel segment\nmodule peel_segment(length, width) {\n    peel_thickness = 1.5;\n    \n    difference() {\n        // Main peel segment\n        hull() {\n            translate([-length/2, -width/4, 0])\n            sphere(width/3);\n            translate([length/2, -width/4, 0])\n            sphere(width/3);\n        }\n        \n        // Remove inner part for thickness\n        offset = 2;\n        hull() {\n            translate([-length/2 + offset, -width/4, 0])\n            sphere(width/3 - peel_thickness);\n            translate([length/2 - offset, -width/4, 0])\n            sphere(width/3 - peel_thickness);\n        }\n    }\n}\n\n// Surface texture details\nmodule banana_texture() {\n    color(\"8B7355\")  // Brown spots color\n    for(i = [0:20]) {\n        rotate([0, 0, i*18])\n        translate([\n            sin(i*3)*15, \n            cos(i*3)*15, \n            sin(i*5)*5\n        ]) {\n            sphere(0.5 + sin(i*7)*0.3);\n        }\n    }\n}\n\n// Assembly\nrotate([0, 90, 0])  // Lay banana on its side\ntranslate([0, 0, 10])\nunion() {\n    banana();\n    banana_texture();\n}",
    "renders": true
  },
  {
    "food_item": "greek",
    "openscad_code": "// Greek Baklava Slice - Realistic Style\n// Dimensions: 60mm wide x 60mm deep x 35mm tall\n\nmodule baklava_phyllo() {\n    // Create 15 layers of phyllo with slight variation\n    for (i = [0:14]) {\n        color(\"wheat\") \n        translate([0, 0, i * 2 + 1]) \n        cube([60, 60, 1.8], center = true);\n    }\n}\n\nmodule nut_mixture() {\n    // Walnut-pecan mixture layers between phyllo\n    for (i = [0:6]) {\n        color(\"saddlebrown\") \n        translate([0, 0, i * 4 + 3]) \n        cube([55, 55, 0.8], center = true);\n        \n        // Add texture to nut layers\n        for (j = [0:25]) {\n            translate([\n                rand(-25, 25),\n                rand(-25, 25),\n                i * 4 + 3.5\n            ]) \n            sphere(0.5 + rand(0, 0.5), $fn = 8);\n        }\n    }\n}\n\nmodule diamond_pattern() {\n    // Create diamond cut pattern on top\n    for (x = [-30:10:30]) {\n        for (y = [-30:10:30]) {\n            color(\"goldenrod\") {\n                translate([x, y, 35.5]) \n                rotate([90, 0, 45]) \n                cylinder(h = 1.5, r1 = 7, r2 = 0, $fn = 4);\n            }\n        }\n    }\n}\n\nmodule syrup_drips() {\n    // Honey syrup drizzles\n    for (i = [0:8]) {\n        color(\"darkgoldenrod\") {\n            translate([\n                rand(-25, 25),\n                rand(-25, 25),\n                36 + i * 0.2\n            ]) \n            sphere(0.5 + rand(0, 0.3), $fn = 8);\n        }\n    }\n}\n\nmodule pistachio_garnish() {\n    // Crushed pistachio on top\n    for (i = [0:15]) {\n        color(\"limegreen\") {\n            translate([\n                rand(-20, 20),\n                rand(-20, 20),\n                36\n            ]) \n            scale([1, 0.6, 0.3]) \n            sphere(0.8 + rand(0, 0.5), $fn = 6);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Base structure\n    union() {\n        baklava_phyllo();\n        nut_mixture();\n    }\n    \n    // Top surface details\n    union() {\n        diamond_pattern();\n        syrup_drips();\n        pistachio_garnish();\n    }\n    \n    // Side details - syrup seepage\n    color(\"goldenrod\") {\n        difference() {\n            translate([0, 0, 17]) \n            cube([62, 62, 34], center = true);\n            translate([0, 0, 17]) \n            cube([59, 59, 34], center = true);\n        }\n    }\n}",
    "renders": true
  },
  {
    "food_item": "icelandic",
    "openscad_code": "// Icelandic Pylsa (hot dog) with all traditional toppings\n$fn = 32;\n\n// Colors\n$mustard = [0.8, 0.7, 0.1];\n$brown = [0.6, 0.3, 0.15];\n$red = [0.7, 0.1, 0.1];\n$white = [0.95, 0.9, 0.85];\n$light_brown = [0.85, 0.7, 0.5];\n\n// Main parameters\nlength = 80;\ndog_diameter = 18;\nbun_diameter = 22;\nwall_thickness = 2;\n\n// Module for hot dog\nmodule hot_dog() {\n    color($brown) {\n        // Main sausage\n        translate([0, 0, 0])\n            cylinder(h = length, d = dog_diameter);\n        \n        // Slightly tapered ends\n        translate([length/2 + 5, 0, 0])\n            sphere(d = dog_diameter * 0.8);\n        translate([-length/2 - 5, 0, 0])\n            sphere(d = dog_diameter * 0.8);\n    }\n}\n\n// Module for bun with realistic texture\nmodule bun() {\n    color($light_brown) {\n        // Main bun body - split top\n        difference() {\n            // Bottom half\n            translate([0, 0, -bun_diameter/2])\n                cube([length + 20, bun_diameter * 1.8, bun_diameter], center = true);\n            \n            // Top cut - slightly curved\n            translate([0, 0, -bun_diameter/4])\n                cylinder(h = length + 25, d = bun_diameter * 1.9);\n        }\n        \n        // Top half\n        difference() {\n            translate([0, 0, bun_diameter/2])\n                cube([length + 20, bun_diameter * 1.8, bun_diameter], center = true);\n            \n            // Hollow for hot dog\n            translate([0, 0, bun_diameter/2])\n                cylinder(h = length + 10, d = dog_diameter + 4);\n            \n            // Bottom cut\n            translate([0, 0, bun_diameter * 0.75])\n                cylinder(h = length + 25, d = bun_diameter * 1.9);\n        }\n        \n        // Sesame seeds\n        color($white) {\n            for(i = [0:15]) {\n                for(j = [-3:3]) {\n                    translate([\n                        -length/2 + i * 5 + (j%2)*2.5,\n                        j * 3,\n                        bun_diameter * 0.9\n                    ]) {\n                        scale([1, 1, 0.5])\n                            sphere(d = 1.5);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Module for crispy onions\nmodule crispy_onions() {\n    color($white) {\n        for(i = [0:30]) {\n            translate([\n                -length/2 + i * 2.5,\n                random(-5, 5),\n                bun_diameter/2 + 2\n            ]) {\n                rotate([random(0, 180), random(0, 180), 0])\n                    scale([1, 0.5, 0.2])\n                        sphere(d = 2 + random(0, 1));\n            }\n        }\n    }\n}\n\n// Module for fried onions\nmodule fried_onions() {\n    color($brown) {\n        for(i = [0:20]) {\n            translate([\n                -length/2 + i * 3.5,\n                random(-3, 3),\n                bun_diameter/2 + 1\n            ]) {\n                rotate([random(0, 180), random(0, 180), 0])\n                    scale([1, 0.8, 0.3])\n                        sphere(d = 1.5 + random(0, 0.5));\n            }\n        }\n    }\n}\n\n// Module for ketchup\nmodule ketchup() {\n    color($red) {\n        translate([0, 0, bun_diameter/2 + 3])\n            linear_extrude(height = 1.5)\n                polygon(points = [\n                    [-length/2 - 5, -dog_diameter/2 - 2],\n                    [length/2 + 5, -dog_diameter/2 - 2],\n                    [length/2 + 5, dog_diameter/2 + 2],\n                    [-length/2 - 5, dog_diameter/2 + 2]\n                ]);\n    }\n}\n\n// Module for mustard\nmodule mustard() {\n    color($mustard) {\n        for(i = [0:8]) {\n            translate([\n                -length/2 + i * 10 + 5,\n                -dog_diameter/2 - 1,\n                bun_diameter/2 + 4\n            ]) {\n                rotate([90, 0, 0])\n                    cylinder(h = 5, d1 = 3, d2 = 1);\n            }\n        }\n    }\n}\n\n// Helper function for random values\nfunction random(min, max) = min + (max - min) * (rands(0, 1, 1)[0]);\n\n// Assemble the complete pylsa\nunion() {\n    // Bottom bun\n    translate([0, 0, 0])\n        bun();\n    \n    // Hot dog\n    translate([0, 0, bun_diameter/2 + dog_diameter/2])\n        hot_dog();\n    \n    // Toppings\n    translate([0, 0, 0]) {\n        ketchup();\n        mustard();\n        crispy_onions();\n        fried_onions();\n    }\n}",
    "renders": true
  },
  {
    "food_item": "bulgarian",
    "openscad_code": "// Bulgarian Banitsa (cheese-filled pastry) - realistic style\n// Dimensions: ~80mm diameter, ~25mm height\n// 3D-printable with no overhangs\n\n$fn = 30;\n\n// Colors\ncheese_color = \"#F5E6D3\";\npastry_color = \"#D4A574\";\ngolden_brown = \"#B8956A\";\n\n// Main module\nmodule banitsa() {\n    // Base pastry layers\n    union() {\n        // Bottom spiral base\n        spiral_layers(8, 2);\n        \n        // Top cheese filling visible between layers\n        cheese_filling();\n        \n        // Top spiral layers\n        translate([0, 0, 12]) spiral_layers(6, 1.5);\n        \n        // Surface texture - phyllo layers\n        surface_texture();\n    }\n}\n\n// Spiral pastry layers\nmodule spiral_layers(turns, height) {\n    for (i = [0: turns*10]) {\n        angle = i * 36;\n        radius = 40 - i * 2;\n        if (radius > 5) {\n            translate([cos(angle) * radius, sin(angle) * radius, 0]) {\n                rotate([0, 0, angle]) {\n                    color(pastry_color) \n                    linear_extrude(height) \n                    offset(r = 0.5) \n                    square([3, 15], center = true);\n                }\n            }\n        }\n    }\n}\n\n// Cheese filling between layers\nmodule cheese_filling() {\n    color(cheese_color) {\n        // Random cheese chunks\n        for (i = [0:30]) {\n            translate([\n                (rand(i*1.7) - 0.5) * 70,\n                (rand(i*2.3) - 0.5) * 70,\n                5 + rand(i*3.1) * 8\n            ]) {\n                scale([1, 1, 0.3]) \n                sphere(d = 3 + rand(i*4.7) * 6);\n            }\n        }\n    }\n}\n\n// Surface texture - phyllo dough pattern\nmodule surface_texture() {\n    color(golden_brown) {\n        // Crispy top layer texture\n        for (r = [10:10:40]) {\n            rotate_extrude() {\n                translate([r, 0, 0]) {\n                    for (i = [0:5:360]) {\n                        translate([0, 0, 23]) {\n                            rotate([90, 0, i]) {\n                                cube([0.5, 2, 0.2], center = true);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Edge details\n        difference() {\n            cylinder(h = 25, r = 40, center = true);\n            cylinder(h = 26, r = 38, center = true);\n        }\n    }\n}\n\n// Simple random function\nfunction rand(x) = (sin(x*123.456) + 1) / 2;\n\n// Main assembly\nbanitsa();",
    "renders": true
  },
  {
    "food_item": "french",
    "openscad_code": "// French Croissant - Realistic Style\n// Overall dimensions: 90mm long, 40mm wide, 35mm tall\n\n$fn = 36;\n\n// Main croissant body\nmodule croissant_body() {\n    // Crescent base shape\n    rotate([90, 0, 0])\n    linear_extrude(height = 30, center = true, twist = -30)\n    offset(r = 5)\n    offset(r = -5)\n    difference() {\n        circle(d = 70);\n        translate([-30, 0, 0])\n        circle(d = 50);\n    }\n}\n\n// Flaky layers texture\nmodule flaky_layers() {\n    for (i = [0:5:25]) {\n        color(\"wheat\")\n        translate([0, 0, i - 12])\n        scale([1 - i/100, 1 - i/100, 0.8])\n        croissant_body();\n    }\n}\n\n// Outer curved ridge\nmodule outer_ridge() {\n    rotate([90, 0, 0])\n    translate([0, 0, -15])\n    rotate_extrude(angle = 180)\n    translate([35, 0, 0])\n    circle(d = 8);\n}\n\n// Inner curve detail\nmodule inner_curve() {\n    rotate([90, 0, 0])\n    translate([-15, 0, -12])\n    rotate_extrude(angle = 180)\n    translate([25, 0, 0])\n    circle(d = 5);\n}\n\n// End cap details\nmodule end_caps() {\n    // Left end\n    translate([-40, 0, 0])\n    rotate([0, 90, 0])\n    cylinder(h = 15, d1 = 12, d2 = 8);\n    \n    // Right end\n    translate([40, 0, 0])\n    rotate([0, 90, 0])\n    cylinder(h = 15, d1 = 8, d2 = 12);\n}\n\n// Surface texture - small air pockets\nmodule air_pockets() {\n    for (i = [0:20]) {\n        angle = i * 18;\n        radius = 30 + sin(i * 3) * 10;\n        x = cos(angle) * radius;\n        y = sin(angle) * radius;\n        z = sin(i) * 5;\n        \n        translate([x, y, z])\n        sphere(d = 2 + sin(i) * 1);\n    }\n}\n\n// Golden brown color variation\nmodule color_variation() {\n    difference() {\n        union() {\n            color(\"goldenrod\")\n            croissant_body();\n            \n            color(\"burlywood\")\n            scale([0.95, 0.95, 0.95])\n            croissant_body();\n        }\n        \n        color(\"wheat\")\n        scale([0.9, 0.9, 0.9])\n        croissant_body();\n    }\n}\n\n// Assembly\nunion() {\n    // Main body with layers\n    flaky_layers();\n    \n    // Structural details\n    color(\"goldenrod\")\n    union() {\n        outer_ridge();\n        inner_curve();\n        end_caps();\n    }\n    \n    // Surface texture\n    color(\"navajowhite\")\n    intersection() {\n        air_pockets();\n        scale([1.1, 1.1, 1.1])\n        croissant_body();\n    }\n    \n    // Bottom flat surface for printing\n    translate([0, 0, -18])\n    color(\"goldenrod\")\n    cube([90, 40, 1], center = true);\n}",
    "renders": true
  },
  {
    "food_item": "italian",
    "openscad_code": "// Classic Margherita Pizza – 3D-printable, medium-complexity\n// Total print size ≈ 95 mm diameter × 8 mm thick (easy FDM print)\n\n$fa = 1; $fs = 1;\n\n// --- Colors ---\nbread = \"#f2b46d\";\nsauce = \"#b22222\";\ncheese = \"#ffeb99\";\ncrust = \"#d4a76a\";\nbasil = \"#006400\";\n\n// --- Main Pizza ---\nmodule pizza() {\n    // Base crust disc\n    cylinder(h = 2, d = 95, center = true);\n\n    // Raised crust ring (no overhangs)\n    difference() {\n        cylinder(h = 4, d = 95, center = true);\n        translate([0, 0, -1])\n            cylinder(h = 5, d = 85, center = true);\n    }\n\n    // Tomato sauce layer\n    color(sauce)\n    translate([0, 0, 2.1])\n        cylinder(h = 0.7, d = 83, center = true);\n\n    // Mozzarella layer (slightly irregular)\n    color(cheese)\n    translate([0, 0, 2.9])\n        cylinder(h = 0.8, d = 81, center = true);\n}\n\n// --- Pepperoni Slices ---\nmodule pepperoni() {\n    color(\"#c62828\")\n    for(a = [20:37:340])\n        translate([sin(a) * 30, cos(a) * 30, 3.8])\n            scale([1, 1, 0.4])\n                sphere(d = 8);\n}\n\n// --- Basil Leaves ---\nmodule basil_leaf(pos, angle) {\n    color(basil)\n    translate(pos)\n    rotate([0, 0, angle])\n    scale([1, 0.6, 0.2])\n        sphere(d = 8);\n}\nmodule basil_leaves() {\n    for(a = [0:60:300])\n        basil_leaf([sin(a) * 35, cos(a) * 35, 3.8], a);\n    basil_leaf([10, -25, 3.8], 30);\n}\n\n// --- Crust Texture Dots ---\nmodule crust_dots() {\n    color(crust)\n    for(r = [42.5:5:47.5])\n        for(a = [0:15:359])\n            translate([sin(a) * r, cos(a) * r, 2.1])\n                sphere(d = 1.5);\n}\n\n// --- Assembly ---\nunion() {\n    color(bread) pizza();\n    pepperoni();\n    basil_leaves();\n    crust_dots();\n}",
    "renders": true
  },
  {
    "food_item": "dutch",
    "openscad_code": "// Dutch Stroopwafel (realistic style, medium complexity)\n// Diameter: 80mm, Thickness: 10mm\n\n$fn = 64;\n\n// Main stroopwafel module\nmodule stroopwafel() {\n    // Outer waffle disk\n    color(\"#B8860B\") \n    difference() {\n        cylinder(h=10, d=80);\n        \n        // Center hole (typical stroopwafel feature)\n        translate([0,0,-1])\n            cylinder(h=12, d=15);\n        \n        // Waffle pattern - outer ring\n        for(i=[0:30:360]) {\n            rotate([0,0,i]) {\n                translate([25,0,9])\n                    cube([50,3,2], center=true);\n            }\n        }\n        \n        // Waffle pattern - inner ring\n        for(i=[15:30:360]) {\n            rotate([0,0,i]) {\n                translate([15,0,9])\n                    cube([30,2,2], center=true);\n            }\n        }\n    }\n    \n    // Waffle grid pattern on top\n    color(\"#D2691E\") {\n        // Radial lines\n        for(i=[0:15:360]) {\n            rotate([0,0,i]) {\n                translate([0,0,9.5])\n                    cube([80,1.5,1], center=true);\n            }\n        }\n        \n        // Concentric circles\n        for(r=[20,30,40]) {\n            translate([0,0,9.5])\n                cylinder(h=1, d=r, center=true);\n        }\n    }\n    \n    // Caramel syrup layer visible at the edge\n    color(\"#8B4513\") \n    translate([0,0,5])\n        difference() {\n            cylinder(h=0.5, d=79.5);\n            cylinder(h=1, d=15);\n        }\n    \n    // Bottom waffle (mirrored top)\n    color(\"#B8860B\") \n    mirror([0,0,1])\n    translate([0,0,-10]) {\n        difference() {\n            cylinder(h=10, d=80);\n            translate([0,0,-1])\n                cylinder(h=12, d=15);\n        }\n        \n        color(\"#D2691E\") {\n            for(i=[0:15:360]) {\n                rotate([0,0,i]) {\n                    translate([0,0,0.5])\n                        cube([80,1.5,1], center=true);\n                }\n            }\n            \n            for(r=[20,30,40]) {\n                translate([0,0,0.5])\n                    cylinder(h=1, d=r, center=true);\n            }\n        }\n    }\n    \n    // Small air bubbles in caramel for realism\n    color(\"#A0522D\")\n    for(i=[0:8]) {\n        rotate([0,0,i*45+22.5]) {\n            translate([30,0,5])\n                sphere(d=1.5);\n        }\n    }\n}\n\n// Render the stroopwafel\nstroopwafel();",
    "renders": true
  },
  {
    "food_item": "danish",
    "openscad_code": "// Danish pastry - a classic wienerbrød with custard filling and icing\n// Realistic style with medium complexity\n// Size: 80mm diameter, 25mm height\n\nmodule danish_pastry() {\n    color(\"#E8B36B\") // Golden baked pastry color\n    \n    // Base spiral pastry layers\n    union() {\n        // Bottom layer\n        difference() {\n            cylinder(h=4, r=40, $fn=64);\n            cylinder(h=4.5, r=35, $fn=64);\n        }\n        \n        // Middle spiral layer\n        rotate([0, 0, 15])\n        difference() {\n            cylinder(h=4, r=35, $fn=64);\n            cylinder(h=4.5, r=30, $fn=64);\n        }\n        \n        // Top spiral layer\n        rotate([0, 0, 30])\n        difference() {\n            cylinder(h=4, r=30, $fn=64);\n            cylinder(h=4.5, r=25, $fn=64);\n        }\n    }\n    \n    // Custard filling in center\n    color(\"#FFF8DC\") // Custard color\n    translate([0, 0, 8])\n    cylinder(h=8, r=20, $fn=32);\n    \n    // Icing drizzles\n    color(\"#FFFFFF\") // White icing\n    module icing_drizzle(x, y, angle) {\n        translate([x, y, 16])\n        rotate([0, 0, angle])\n        scale([1, 0.2, 1])\n        cylinder(h=2, r=15, $fn=16);\n    }\n    \n    for(i = [0:45:315]) {\n        icing_drizzle(\n            25 * cos(i),\n            25 * sin(i),\n            i + 90\n        );\n    }\n    \n    // Almond slivers on top\n    color(\"#D2B48C\") // Almond color\n    module almond(x, y, angle) {\n        translate([x, y, 18])\n        rotate([0, 0, angle])\n        scale([0.8, 0.15, 0.1])\n        cube([8, 2, 1]);\n    }\n    \n    for(i = [0:30:330]) {\n        r = 18;\n        almond(\n            r * cos(i),\n            r * sin(i),\n            i\n        );\n    }\n    \n    // Pastry texture - small bumps on surface\n    color(\"#D4A574\")\n    module pastry_bump(x, y) {\n        translate([x, y, 11.5])\n        sphere(r=1.2, $fn=8);\n    }\n    \n    for(x = [-35:7:35]) {\n        for(y = [-35:7:35]) {\n            if(norm([x, y]) < 32 && norm([x, y]) > 22) {\n                pastry_bump(x, y);\n            }\n        }\n    }\n    \n    // Bottom flattening for printing\n    color(\"#C19A6B\")\n    translate([0, 0, -0.5])\n    cylinder(h=1, r=41, $fn=64);\n}\n\n// Render the danish\ndanish_pastry();",
    "renders": true
  },
  {
    "food_item": "greekstyle",
    "openscad_code": "// Greek-style Spanakopita (Spinach & Feta Pie) – realistic medium-complexity model\n// outer shell: ~75 mm long, 45 mm wide, 25 mm high\n\n$fn = 48;\n\n// MAIN PIE BODY -------------------------------------------------------------\n\nmodule pie_body() {\n    difference() {\n        // overall pie shape\n        translate([0, 0, 12.5])\n            scale([1, 0.6, 0.5])\n            sphere(d = 75);\n\n        // hollow inside for filling\n        translate([0, 0, 12.5])\n            scale([0.9, 0.5, 0.45])\n            sphere(d = 75);\n    }\n}\n\n// PHYLLO LAYERS -------------------------------------------------------------\nmodule phyllo_layers() {\n    color(\"wheat\")\n    for (i = [0:1:4]) {\n        translate([0, 0, 5.5 + i * 0.8])\n            scale([1, 0.6, 0.08])\n            sphere(d = 75);\n    }\n}\n\n// SPINACH-FETA FILLING ------------------------------------------------------\nmodule filling() {\n    color(\"darkolivegreen\")\n    translate([0, 0, 9.5])\n        scale([0.9, 0.5, 0.4])\n        sphere(d = 75);\n}\n\n// TOP CRUST LATTICE ---------------------------------------------------------\nmodule lattice_strips() {\n    color(\"wheat\")\n    for (y = [-15:5:15]) {\n        translate([0, y, 22])\n            rotate([0, 0, 45])\n            cube([75, 1.2, 0.8], center = true);\n    }\n    for (x = [-30:5:30]) {\n        translate([x, 0, 22])\n            rotate([0, 0, -45])\n            cube([75, 1.2, 0.8], center = true);\n    }\n}\n\n// SEEDS ---------------------------------------------------------------------\nmodule sesame_seeds() {\n    color(\"cornsilk\")\n    for (i = [0:1:50]) {\n        translate([rands(-30, 30, 1)[0],\n                   rands(-15, 15, 1)[0],\n                   22.8 + rands(-0.2, 0.2, 1)[0]])\n            sphere(d = 1.2);\n    }\n}\n\n// ASSEMBLY ------------------------------------------------------------------\n\nunion() {\n    phyllo_layers();\n    filling();\n    pie_body();\n    lattice_strips();\n    sesame_seeds();\n}",
    "renders": true
  },
  {
    "food_item": "icelandicstyle",
    "openscad_code": "// Icelandic Pylsa (Hot Dog) with authentic toppings\n// Size: ~80mm long, designed for 3D printing\n\n$fn = 32;\n\n// Main colors\ncolor_beige = [0.95, 0.85, 0.75];\ncolor_brown = [0.6, 0.35, 0.2];\ncolor_red = [0.8, 0.2, 0.2];\ncolor_white = [0.95, 0.95, 0.9];\ncolor_green = [0.3, 0.6, 0.3];\ncolor_yellow = [0.9, 0.8, 0.5];\n\n// Scale factor for printing\nscale_factor = 1;\n\n// Main hot dog module\nmodule hot_dog() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        union() {\n            // Bun bottom\n            color(color_beige)\n            translate([0, 0, 5])\n            difference() {\n                scale([1, 0.4, 0.5])\n                sphere(r = 15);\n                \n                // Bun cutout for sausage\n                translate([0, -10, 5])\n                scale([0.8, 0.3, 0.8])\n                sphere(r = 15);\n            }\n            \n            // Bun top\n            color(color_beige)\n            translate([0, 0, 18])\n            difference() {\n                scale([1, 0.4, 0.4])\n                sphere(r = 15);\n                \n                // Slight indentation\n                translate([0, -8, 2])\n                scale([0.9, 0.3, 0.3])\n                sphere(r = 15);\n            }\n            \n            // Sausage\n            color(color_brown)\n            translate([0, -5, 12])\n            scale([1, 0.3, 1])\n            rotate([90, 0, 0])\n            cylinder(h = 60, r1 = 6, r2 = 6, center = true);\n            \n            // Sausage texture lines\n            for(i = [-20:4:20]) {\n                color([0.5, 0.3, 0.15])\n                translate([i, -5, 12])\n                rotate([90, 0, 0])\n                cylinder(h = 62, r1 = 0.5, r2 = 0.5, center = true);\n            }\n            \n            // Crispy onions\n            module crispy_onion() {\n                color(color_yellow)\n                translate([0, 0, 0])\n                scale([0.7, 0.1, 0.7])\n                sphere(r = 2);\n            }\n            \n            // Add crispy onions\n            for(i = [-15:3:15]) {\n                translate([i, -3, 18])\n                crispy_onion();\n            }\n            \n            // Raw onions\n            module raw_onion() {\n                color(color_white)\n                translate([0, 0, 0])\n                scale([0.8, 0.2, 0.8])\n                cube([3, 1, 3], center = true);\n            }\n            \n            // Add raw onions\n            for(i = [-12:4:12]) {\n                translate([i, -2, 19.5])\n                raw_onion();\n            }\n            \n            // Mustard\n            color(color_yellow)\n            translate([0, -5, 20])\n            rotate([90, 0, 0])\n            cylinder(h = 60, r1 = 2, r2 = 2, center = true);\n            \n            // Ketchup\n            color(color_red)\n            translate([0, -5, 21])\n            rotate([90, 0, 0])\n            cylinder(h = 60, r1 = 1.5, r2 = 1.5, center = true);\n            \n            // Remoulade sauce\n            color(color_white)\n            translate([0, -5, 22])\n            rotate([90, 0, 0])\n            cylinder(h = 60, r1 = 1.8, r2 = 1.8, center = true);\n            \n            // Dill garnish\n            module dill_leaf() {\n                color(color_green)\n                translate([0, 0, 0])\n                scale([0.3, 1, 0.1])\n                rotate([0, 30, 0])\n                sphere(r = 3);\n            }\n            \n            // Add dill pieces\n            for(i = [-8:4:8]) {\n                translate([i, 0, 22])\n                rotate([0, 0, i * 10])\n                dill_leaf();\n            }\n        }\n    }\n}\n\n// Create the complete Icelandic pylsa\nhot_dog();",
    "renders": true
  },
  {
    "food_item": "cake",
    "openscad_code": "// Realistic Cake - Medium Complexity\n// A three-layer chocolate cake with chocolate frosting and sprinkles\n\n// Color definitions\n$fn = 48;\n\n// Main cake module\nmodule cake() {\n    // Cake layers - chocolate brown\n    color([0.36, 0.25, 0.20]) {\n        // Bottom layer - 60mm diameter, 12mm height\n        cylinder(h = 12, d = 60, $fn = 64);\n        \n        // Middle layer - 50mm diameter, 10mm height\n        translate([0, 0, 12])\n            cylinder(h = 10, d = 50, $fn = 64);\n        \n        // Top layer - 40mm diameter, 8mm height\n        translate([0, 0, 22])\n            cylinder(h = 8, d = 40, $fn = 64);\n    }\n    \n    // Frosting between layers - lighter brown\n    color([0.50, 0.35, 0.28]) {\n        // Frosting layer between bottom and middle\n        translate([0, 0, 12])\n            cylinder(h = 1.5, d = 60, $fn = 64);\n        \n        // Frosting layer between middle and top\n        translate([0, 0, 22])\n            cylinder(h = 1.5, d = 50, $fn = 64);\n    }\n    \n    // Top frosting dome\n    color([0.50, 0.35, 0.28]) {\n        translate([0, 0, 30.5])\n            scale([1, 1, 0.6])\n                sphere(d = 40);\n    }\n    \n    // Frosting drips down the sides\n    color([0.50, 0.35, 0.28]) {\n        for (i = [0:30:330]) {\n            rotate([0, 0, i])\n                translate([25, 0, 25])\n                    cylinder(h = 5 + (i % 15), d1 = 4, d2 = 6);\n        }\n    }\n    \n    // Side frosting decorations\n    color([0.50, 0.35, 0.28]) {\n        for (i = [0:30:330]) {\n            rotate([0, 0, i])\n                translate([28, 0, 15])\n                    scale([1, 0.7, 1])\n                        sphere(d = 6);\n        }\n    }\n    \n    // Chocolate sprinkles on top\n    color([0.20, 0.12, 0.08]) {\n        for (i = [0:15:345]) {\n            for (j = [8:8:16]) {\n                rotate([0, 0, i])\n                    translate([j, 0, 32])\n                        rotate([90, 0, 90])\n                            cylinder(h = 3, d = 1.2);\n            }\n        }\n    }\n    \n    // Colored sprinkles\n    for (i = [0:25:350]) {\n        for (j = [5:10:20]) {\n            // Random colors for sprinkles\n            color([\n                0.8 + (i % 20) / 100,\n                0.4 + (j % 30) / 100,\n                0.6 + (i % 15) / 100\n            ]) {\n                rotate([0, 0, i + j])\n                    translate([j + 2, 0, 33.5])\n                        rotate([90, 0, 90])\n                            cylinder(h = 2.5, d = 1);\n            }\n        }\n    }\n}\n\n// Render the cake\ncake();",
    "renders": true
  },
  {
    "food_item": "pie",
    "openscad_code": "// Realistic Pie Model - OpenSCAD\n// Features: Fluted crust, lattice top, vent holes, golden-brown coloring\n\n// Pie dimensions\npie_diameter = 80;\npie_height = 25;\ncrust_thickness = 2.5;\nwall_height = 12;\n\n// Colors\ncrust_color = \"#D4A574\";\nfilling_color = \"#8B4513\";\ngolden_color = \"#C68642\";\n\n// Main pie module\nmodule pie() {\n    // Bottom crust\n    union() {\n        // Base crust disk\n        color(crust_color)\n        translate([0, 0, 0])\n            cylinder(h=crust_thickness, d=pie_diameter, $fn=64);\n        \n        // Outer crust wall with fluted edge\n        color(crust_color)\n        translate([0, 0, crust_thickness])\n            fluted_wall();\n        \n        // Filling\n        color(filling_color)\n        translate([0, 0, crust_thickness])\n            cylinder(h=wall_height*0.7, d=pie_diameter-crust_thickness*2, $fn=64);\n        \n        // Lattice top crust\n        color(golden_color)\n        translate([0, 0, crust_thickness+wall_height*0.7])\n            lattice_top();\n        \n        // Decorative edge\n        color(golden_color)\n        translate([0, 0, crust_thickness+wall_height])\n            decorative_edge();\n    }\n}\n\n// Create fluted edge pattern on crust wall\nmodule fluted_wall() {\n    difference() {\n        // Main wall cylinder\n        cylinder(h=wall_height, d=pie_diameter, $fn=64);\n        \n        // Hollow center\n        translate([0, 0, -0.1])\n            cylinder(h=wall_height+0.2, d=pie_diameter-crust_thickness*2, $fn=64);\n        \n        // Create fluted pattern\n        for(i=[0:35]) {\n            rotate([0, 0, i*10])\n                translate([pie_diameter/2-crust_thickness, 0, 0])\n                    cube([crust_thickness*2, 3, wall_height], center=true);\n        }\n    }\n}\n\n// Create lattice pattern on top\nmodule lattice_top() {\n    difference() {\n        // Main top disk\n        translate([0, 0, 0])\n            cylinder(h=crust_thickness, d=pie_diameter-crust_thickness*2, $fn=64);\n        \n        // Vent holes\n        for(i=[-1:1]) {\n            for(j=[-1:1]) {\n                translate([i*15, j*15, -0.1])\n                    cylinder(h=crust_thickness+0.2, d=3, $fn=16);\n            }\n        }\n        \n        // Lattice cuts - horizontal\n        for(i=[-30:5:30]) {\n            translate([0, i, -0.1])\n                cube([pie_diameter-crust_thickness*4, 2, crust_thickness+0.2]);\n        }\n        \n        // Lattice cuts - vertical\n        for(i=[-30:5:30]) {\n            rotate([0, 0, 90])\n                translate([0, i, -0.1])\n                cube([pie_diameter-crust_thickness*4, 2, crust_thickness+0.2]);\n        }\n    }\n}\n\n// Decorative crimped edge\nmodule decorative_edge() {\n    difference() {\n        // Outer ring\n        cylinder(h=crust_thickness, d=pie_diameter, $fn=64);\n        \n        // Remove inner part\n        translate([0, 0, -0.1])\n            cylinder(h=crust_thickness+0.2, d=pie_diameter-crust_thickness*2, $fn=64);\n        \n        // Create scalloped edge\n        for(i=[0:23]) {\n            rotate([0, 0, i*15+7.5])\n                translate([pie_diameter/2, 0, 0])\n                    rotate([0, 90, 0])\n                        cylinder(h=crust_thickness*2, d=6, $fn=8);\n        }\n    }\n}\n\n// Generate the pie\npie();",
    "renders": true
  },
  {
    "food_item": "cookie",
    "openscad_code": "// Chocolate chip cookie with realistic texture and chips\n// Diameter: 70mm, Thickness: 8mm\n\n$fn = 36;\n\n// Main cookie base\nmodule cookie_base() {\n    color(\"#D4A574\") {\n        difference() {\n            // Main disc shape\n            cylinder(h = 8, r = 35, center = true);\n            \n            // Slight indent on top for realistic cookie shape\n            translate([0, 0, 3.5])\n                cylinder(h = 2, r = 32, center = true);\n            \n            // Slight indent on bottom\n            translate([0, 0, -3.5])\n                cylinder(h = 2, r = 32, center = true);\n        }\n    }\n}\n\n// Single chocolate chip\nmodule chocolate_chip() {\n    color(\"#2C1810\") {\n        scale([1, 1, 0.7])\n            sphere(r = 2.5);\n    }\n}\n\n// Surface texture - small bumps for cookie texture\nmodule surface_bumps() {\n    color(\"#C19660\") {\n        for (i = [0:7]) {\n            for (j = [0:15]) {\n                angle = i * 45;\n                radius = 30 - j * 1.5;\n                x = radius * cos(angle);\n                y = radius * sin(angle);\n                \n                translate([x, y, 4])\n                    sphere(r = 0.8);\n            }\n        }\n    }\n}\n\n// Edge texture - irregular bumps\nmodule edge_bumps() {\n    color(\"#C19660\") {\n        for (i = [0:35]) {\n            angle = i * 10 + (i % 3) * 3;\n            x = 35 * cos(angle);\n            y = 35 * sin(angle);\n            bump_size = 1.2 + (i % 3) * 0.3;\n            \n            translate([x, y, 0])\n                sphere(r = bump_size);\n        }\n    }\n}\n\n// Chocolate chips distribution\nmodule chocolate_chips() {\n    // Top chips\n    for (i = [0:14]) {\n        angle = i * 137.5; // Golden angle for natural distribution\n        radius = 8 + (i % 3) * 10 + (i * 2);\n        x = radius * cos(angle);\n        y = radius * sin(angle);\n        \n        // Only place chips within cookie area\n        if (sqrt(x*x + y*y) < 30) {\n            translate([x, y, 4.5])\n                rotate([90, 0, angle])\n                chocolate_chip();\n        }\n    }\n    \n    // Bottom chips (fewer)\n    for (i = [0:7]) {\n        angle = i * 137.5 + 180;\n        radius = 8 + (i % 2) * 12;\n        x = radius * cos(angle);\n        y = radius * sin(angle);\n        \n        if (sqrt(x*x + y*y) < 30) {\n            translate([x, y, -4.5])\n                rotate([90, 0, angle])\n                mirror([0, 0, 1])\n                chocolate_chip();\n        }\n    }\n    \n    // Side chips\n    for (i = [0:5]) {\n        angle = i * 60 + 30;\n        x = 33 * cos(angle);\n        y = 33 * sin(angle);\n        \n        translate([x, y, 0])\n            rotate([0, 90, angle + 90])\n            scale([0.8, 0.8, 1])\n            chocolate_chip();\n    }\n}\n\n// Bake marks - darker spots\nmodule bake_marks() {\n    color(\"#8B5A2B\") {\n        for (i = [0:9]) {\n            angle = i * 36 + (i % 2) * 18;\n            radius = 15 + (i % 2) * 8;\n            x = radius * cos(angle);\n            y = radius * sin(angle);\n            \n            translate([x, y, 4.1])\n                scale([1, 1, 0.1])\n                sphere(r = 2 + (i % 3));\n        }\n    }\n}\n\n// Assemble the complete cookie\nunion() {\n    cookie_base();\n    surface_bumps();\n    edge_bumps();\n    chocolate_chips();\n    bake_marks();\n}",
    "renders": true
  },
  {
    "food_item": "candy",
    "openscad_code": "// Licorice Allsorts - realistic style, medium complexity\n// Standard size: 70mm length x 20mm width x 15mm height\n\n// Color definitions\ncolor_black = [0.1, 0.1, 0.1];\ncolor_white = [0.95, 0.95, 0.95];\ncolor_pink = [0.95, 0.5, 0.7];\ncolor_yellow = [0.95, 0.85, 0.3];\ncolor_orange = [0.95, 0.6, 0.2];\n\n// Main module to create complete candy\nmodule licorice_allsorts() {\n    // Base black licorice layer\n    color(color_black) {\n        translate([-35, -10, 0]) {\n            cube([70, 20, 5]);\n        }\n    }\n    \n    // White fondant layer with sugar texture\n    color(color_white) {\n        translate([-35, -10, 5]) {\n            difference() {\n                cube([70, 20, 4]);\n                // Sugar crystal texture on top\n                for(x = [-34:4:34]) {\n                    for(y = [-9:4:9]) {\n                        translate([x, y, 3.8]) {\n                            cylinder(h=0.5, d=1.2, $fn=8);\n                        }\n                    }\n                }\n            }\n    }\n    \n    // Pink fondant layer\n    color(color_pink) {\n        translate([-35, -10, 9]) {\n            cube([70, 20, 3]);\n        }\n    }\n    \n    // Yellow fondant layer\n    color(color_yellow) {\n        translate([-35, -10, 12]) {\n            cube([70, 20, 2]);\n        }\n    }\n    \n    // Orange decorative layer with holes\n    color(color_orange) {\n        translate([-35, -10, 14]) {\n            difference() {\n                cube([70, 20, 1]);\n                // Create patterned holes\n                for(i = [-30:10:30]) {\n                    translate([i, 0, 0]) {\n                        cylinder(h=2, d=6, $fn=6);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Rounded edges for realistic appearance\n    color(color_black) {\n        // Front and back rounded edges\n        for(x = [-35:2:35]) {\n            translate([x, -10, 2.5]) {\n                rotate([90, 0, 0]) {\n                    cylinder(h=2, d=5, $fn=12);\n                }\n            }\n            translate([x, 10, 2.5]) {\n                rotate([90, 0, 0]) {\n                    cylinder(h=2, d=5, $fn=12);\n                }\n            }\n        }\n        \n        // Left and right rounded edges\n        for(y = [-10:2:10]) {\n            translate([-35, y, 2.5]) {\n                rotate([0, 90, 0]) {\n                    cylinder(h=2, d=5, $fn=12);\n                }\n            }\n            translate([35, y, 2.5]) {\n                rotate([0, 90, 0]) {\n                    cylinder(h=2, d=5, $fn=12);\n                }\n            }\n        }\n    }\n    \n    // Sugar coating details on sides\n    color(color_white) {\n        for(z = [6:1:14]) {\n            for(i = [-30:5:30]) {\n                translate([i, -10.2, z]) {\n                    sphere(d=0.8);\n                }\n                translate([i, 10.2, z]) {\n                    sphere(d=0.8);\n                }\n            }\n        }\n    }\n}\n\n// Create the candy\nlicorice_allsorts();",
    "renders": true
  },
  {
    "food_item": "chocolate",
    "openscad_code": "// Chocolate Bar with Segments and Logo - Realistic Style\n// Standard chocolate bar size: 100 x 50 x 8 mm\n\n// Main parameters\nbar_length = 100;\nbar_width = 50;\nbar_thickness = 8;\nsegment_rows = 4;\nsegment_cols = 8;\nsegment_gap = 1.5;\nsegment_depth = 2;\nlogo_depth = 0.5;\ncorner_radius = 3;\n\n// Color definitions\nchocolate_color = [101, 67, 33] / 255;\n\n// Create chocolate bar with segments\nmodule chocolate_bar() {\n    color(chocolate_color) {\n        difference() {\n            // Main bar body with rounded top edges\n            rounded_bar();\n            \n            // Create segment grooves\n            for (i = [1:segment_cols-1]) {\n                translate([(i * bar_length/segment_cols) - segment_gap/2, 0, bar_thickness - segment_depth])\n                    cube([segment_gap, bar_width, segment_depth + 0.1]);\n            }\n            for (j = [1:segment_rows-1]) {\n                translate([0, (j * bar_width/segment_rows) - segment_gap/2, bar_thickness - segment_depth])\n                    cube([bar_length, segment_gap, segment_depth + 0.1]);\n            }\n            \n            // Add logo impression on center segment\n            translate([bar_length/2 - 12, bar_width/2 - 6, bar_thickness - logo_depth])\n                rotate([0, 0, 45])\n                scale([1, 0.7, 1])\n                cylinder(h = logo_depth + 0.1, r1 = 4, r2 = 4, $fn = 30);\n        }\n        \n        // Add subtle texture dots\n        for (x = [5:10:bar_length-5]) {\n            for (y = [5:10:bar_width-5]) {\n                translate([x, y, bar_thickness - 0.3])\n                    sphere(r = 0.4);\n            }\n        }\n    }\n}\n\n// Create rounded top surface\nmodule rounded_bar() {\n    difference() {\n        // Base rectangular block\n        cube([bar_length, bar_width, bar_thickness]);\n        \n        // Round the bottom edges\n        translate([-0.1, -0.1, -0.1])\n            cube([bar_length + 0.2, bar_width + 0.2, 0.1]);\n        \n        // Add rounded top\n        translate([bar_length/2, bar_width/2, bar_thickness - corner_radius])\n            minkowski() {\n                cube([bar_length - corner_radius*2, bar_width - corner_radius*2, corner_radius*2], center = true);\n                sphere(r = corner_radius);\n            }\n    }\n}\n\n// Create wrapper remnants\nmodule wrapper_remnants() {\n    color([220, 220, 220, 0.3]) {\n        // Foil edges\n        translate([-1, -1, -1])\n            cube([bar_length + 2, 1, bar_thickness + 2]);\n        translate([-1, bar_width, -1])\n            cube([bar_length + 2, 1, bar_thickness + 2]);\n        translate([-1, -1, -1])\n            cube([1, bar_width + 2, bar_thickness + 2]);\n        translate([bar_length, -1, -1])\n            cube([1, bar_width + 2, bar_thickness + 2]);\n    }\n}\n\n// Assembly\nchocolate_bar();\n// Uncomment to show wrapper remnants\n// wrapper_remnants();",
    "renders": true
  },
  {
    "food_item": "ice",
    "openscad_code": "// Realistic Ice Cube with Frosting and Surface Details\n// Designed for 3D printing - approximately 30mm cube\n\n// Ice color - slightly translucent blue-white\nice_color = [0.9, 0.95, 1, 0.8];\n\n// Frost color - pure white\nfrost_color = [1, 1, 1, 0.9];\n\n// Main ice cube with realistic proportions\nmodule ice_cube() {\n    // Base shape with slightly rounded corners\n    difference() {\n        // Main cube body\n        color(ice_color)\n        minkowski() {\n            cube([25, 25, 25], center = true);\n            sphere(2);\n        }\n        \n        // Hollowing for 3D printing\n        translate([0, 0, 0])\n        cube([20, 20, 20], center = true);\n    }\n}\n\n// Surface indentations for realistic ice texture\nmodule surface_indents() {\n    color(ice_color)\n    for(i = [0:5]) {\n        rotate([0, 0, i * 60])\n        translate([8, 0, 8])\n        rotate([0, 30, 0])\n        sphere(1.5);\n        \n        rotate([0, 0, i * 60])\n        translate([8, 0, -8])\n        rotate([0, -30, 0])\n        sphere(1.5);\n    }\n}\n\n// Frost details on edges\nmodule frost_edges() {\n    color(frost_color)\n    for(edge = [[12, 12, 12], [-12, 12, 12], [12, -12, 12], [12, 12, -12],\n                 [-12, -12, 12], [-12, 12, -12], [12, -12, -12], [-12, -12, -12]]) {\n        translate(edge)\n        sphere(3);\n    }\n}\n\n// Small surface cracks\nmodule cracks() {\n    color(frost_color)\n    for(pos = [[5, 5, 12], [-5, -5, 12], [5, -5, -12], [-5, 5, -12]]) {\n        translate(pos)\n        rotate([0, 0, 45])\n        scale([0.5, 0.1, 4])\n        cube([6, 1, 1], center = true);\n    }\n}\n\n// Frost crystals on top surface\nmodule frost_crystals() {\n    color(frost_color)\n    for(i = [0:20]) {\n        angle = i * 137.5;\n        radius = 8 * sqrt(i);\n        translate([radius * cos(angle), radius * sin(angle), 12.5])\n        scale([0.3, 0.3, 1])\n        sphere(1 + sin(i) * 0.5);\n    }\n}\n\n// Assemble the complete ice cube\nunion() {\n    ice_cube();\n    surface_indents();\n    frost_edges();\n    cracks();\n    frost_crystals();\n}",
    "renders": true
  },
  {
    "food_item": "tart",
    "openscad_code": "// Realistic 3D printable fruit tart (strawberry topping)\n// Diameter: 60 mm, Height: 15 mm\n// Medium complexity with loops for details\n\n$fn = 32;\n\n// Main tart shell with fluted edge\nmodule tart_shell() {\n    // Base disc\n    color(\"BurlyWood\") \n    difference() {\n        cylinder(h = 3, d = 60);\n        cylinder(h = 4, d = 54);\n    }\n\n    // Fluted edge using 36 small cylinders\n    color(\"Tan\") \n    for (i = [0:35]) {\n        rotate([0, 0, i * 10]) \n        translate([27, 0, 0]) \n        cylinder(h = 8, d = 6);\n    }\n\n    // Inner wall\n    color(\"BurlyWood\") \n    translate([0, 0, 3]) \n    cylinder(h = 5, d = 54);\n}\n\n// Pastry cream filling\nmodule pastry_cream() {\n    color(\"LemonChiffon\") \n    translate([0, 0, 8]) \n    cylinder(h = 3, d = 52);\n}\n\n// Strawberry slice\nmodule strawberry_slice() {\n    color(\"Crimson\") \n    union() {\n        // Main body\n        scale([1, 1, 0.3]) \n        sphere(d = 12);\n        \n        // Seeds\n        color(\"Yellow\") \n        for (i = [0:9]) {\n            rotate([0, 0, i * 36]) \n            translate([4, 0, 0.5]) \n            sphere(d = 1);\n        }\n    }\n}\n\n// Green leaf accent\nmodule mint_leaf() {\n    color(\"ForestGreen\") \n    scale([1, 0.6, 0.1]) \n    rotate([0, 0, 30]) \n    sphere(d = 8);\n}\n\n// Glazed surface\nmodule glaze() {\n    color(\"LightCoral\", 0.4) \n    translate([0, 0, 11]) \n    cylinder(h = 0.5, d = 52);\n}\n\n// Assembly\ntart_shell();\npastry_cream();\n\n// Arrange 5 strawberries in pentagon pattern\nfor (i = [0:4]) {\n    rotate([0, 0, i * 72]) \n    translate([15, 0, 11]) \n    strawberry_slice();\n}\n\n// Add mint leaves between strawberries\nfor (i = [0:4]) {\n    rotate([0, 0, i * 72 + 36]) \n    translate([18, 0, 11.3]) \n    mint_leaf();\n}\n\nglaze();",
    "renders": true
  },
  {
    "food_item": "brownie",
    "openscad_code": "// Brownie with realistic texture and chocolate chunks\n// Overall dimensions: 70mm x 50mm x 15mm\n\n$fn = 32;\n\n// Main brownie base\nmodule brownie_base() {\n    difference() {\n        // Main block with rounded edges\n        translate([0, 0, 7.5])\n        minkowski() {\n            cube([65, 45, 13], center=true);\n            sphere(2);\n        }\n        \n        // Cut off bottom for flat base\n        translate([0, 0, -2])\n        cube([100, 100, 4], center=true);\n    }\n}\n\n// Surface texture - cracks and imperfections\nmodule surface_texture() {\n    for (i = [0:15]) {\n        // Random cracks on top surface\n        translate([\n            30 * sin(i * 137.5) + 5 * sin(i * 73),\n            20 * cos(i * 137.5) + 3 * cos(i * 89),\n            14.5\n        ])\n        rotate([0, 0, i * 23])\n        scale([1 + 0.3 * sin(i), 0.3 + 0.2 * cos(i), 1])\n        cylinder(h = 0.5, r1 = 0.8, r2 = 0.3, $fn = 8);\n    }\n}\n\n// Chocolate chunks embedded in surface\nmodule chocolate_chunks() {\n    for (i = [0:8]) {\n        translate([\n            25 * sin(i * 97) + 5,\n            18 * cos(i * 73) - 5,\n            15 + 1.5 * sin(i * 41)\n        ])\n        rotate([20 * sin(i * 37), 15 * cos(i * 53), i * 45])\n        scale([1.2, 0.8, 0.6])\n        cube([3 + sin(i * 11), 2.5 + cos(i * 13), 1.5], center=true);\n    }\n}\n\n// Edge texture - slightly uneven\nmodule edge_texture() {\n    for (side = [0:3]) {\n        rotate([0, 0, side * 90])\n        translate([32.5 - 2, 0, 7.5])\n        for (i = [0:8]) {\n            translate([0, 5 * i - 20, 0])\n            difference() {\n                cube([4, 3, 13]);\n                translate([2, 1.5, 6.5])\n                sphere(2.5);\n            }\n        }\n    }\n}\n\n// Powdered sugar dusting effect\nmodule sugar_dusting() {\n    color(\"white\")\n    for (i = [0:20]) {\n        translate([\n            30 * sin(i * 137.5) * (1 + 0.2 * cos(i * 29)),\n            20 * cos(i * 137.5) * (1 + 0.2 * sin(i * 31)),\n            15.1\n        ])\n        scale([0.3, 0.3, 0.1])\n        sphere(1);\n    }\n}\n\n// Assemble the brownie\ncolor([0.36, 0.25, 0.20]) {\n    union() {\n        brownie_base();\n        surface_texture();\n        chocolate_chunks();\n        edge_texture();\n    }\n}\n\nsugar_dusting();",
    "renders": true
  },
  {
    "food_item": "cupcake",
    "openscad_code": "// Realistic 3D printable cupcake\n// Approx 60mm tall, 50mm diameter\n\n// Color definitions\n$fa = 1;\n$fs = 0.4;\n\n// Cupcake liner module with crimped edges\nmodule cupcake_liner() {\n    color(\"tan\")\n    difference() {\n        // Main liner body\n        cylinder(h=25, r1=25, r2=22);\n        \n        // Hollow out the inside\n        translate([0, 0, -1])\n            cylinder(h=27, r1=23, r2=20);\n    }\n    \n    // Crimped edges - create scalloped pattern\n    for (i = [0:23]) {\n        rotate([0, 0, i * 15])\n            translate([24, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h=3, r=2);\n    }\n}\n\n// Cake base with slight dome top\nmodule cake_base() {\n    color(\"burlywood\")\n    union() {\n        // Main cake body\n        cylinder(h=18, r1=22, r2=20);\n        \n        // Slight dome on top\n        translate([0, 0, 18])\n            sphere(r=22, $fn=30);\n    }\n}\n\n// Frosting swirl module\nmodule frosting_swirl() {\n    color(\"ivory\")\n    union() {\n        // Base frosting layer\n        cylinder(h=5, r1=20, r2=18);\n        \n        // Swirl using torus segments\n        translate([0, 0, 5])\n            rotate_extrude($fn=50)\n                translate([15, 0, 0])\n                    circle(r=3);\n        \n        translate([0, 0, 12])\n            rotate_extrude($fn=40)\n                translate([12, 0, 0])\n                    circle(r=2.5);\n        \n        // Top swirl peak\n        translate([0, 0, 17])\n            sphere(r=4);\n    }\n}\n\n// Sprinkles module\nmodule sprinkles() {\n    // Random sprinkle placement\n    for (i = [0:50]) {\n        angle = rands(0, 360, 1)[0];\n        radius = rands(5, 18, 1)[0];\n        height = rands(6, 16, 1)[0];\n        \n        translate([radius * cos(angle), radius * sin(angle), height])\n            rotate([90, 0, angle])\n                color(rands(0.8, 1, 1)[0], rands(0.2, 0.8, 1)[0], rands(0.2, 0.8, 1)[0])\n                    cylinder(h=3, r=0.5);\n    }\n}\n\n// Cherry on top\nmodule cherry() {\n    color(\"darkred\")\n    union() {\n        // Cherry body\n        translate([0, 0, 21])\n            sphere(r=4);\n        \n        // Stem\n        translate([0, 0, 25])\n            rotate([20, 0, 0])\n                cylinder(h=8, r=0.5);\n    }\n}\n\n// Main assembly\ncupcake_liner();\ncake_base();\nfrosting_swirl();\nsprinkles();\ncherry();",
    "renders": true
  },
  {
    "food_item": "donut",
    "openscad_code": "// Realistic 3D printable donut\n// Outer diameter ~80mm, inner hole ~30mm, height ~25mm\n\n$fn = 64;\n\n// Main donut body\nmodule donut_body() {\n    difference() {\n        // Outer torus\n        rotate_extrude(angle = 360, $fn = 100) \n            translate([40, 0, 0])\n                circle(r = 12);\n        \n        // Inner hole\n        rotate_extrude(angle = 360, $fn = 100) \n            translate([15, 0, 0])\n                circle(r = 14);\n    }\n}\n\n// Icing layer on top\nmodule icing() {\n    difference() {\n        // Main icing torus\n        rotate_extrude(angle = 360, $fn = 100) \n            translate([40, 0, 25])\n                circle(r = 10);\n        \n        // Inner hole\n        rotate_extrude(angle = 360, $fn = 100) \n            translate([15, 0, 25])\n                circle(r = 12);\n    }\n}\n\n// Surface texture bumps for bread-like appearance\nmodule surface_texture() {\n    for(i = [0:15]) {\n        rotate([0, 0, i * 24]) {\n            for(j = [0:8]) {\n                translate([25 + j * 3, 0, 2 + sin(i * 15) * 2]) {\n                    scale([1, 1, 0.5])\n                        sphere(r = 0.8);\n                }\n            }\n        }\n    }\n}\n\n// Sprinkles on top\nmodule sprinkles() {\n    colors = [\"red\", \"green\", \"blue\", \"yellow\", \"white\"];\n    \n    for(i = [0:30]) {\n        a = i * 137.5; // Golden angle for even distribution\n        r = 35 + sin(i * 0.8) * 5;\n        \n        color(colors[i % len(colors)])\n        translate([r * cos(a), r * sin(a), 27]) {\n            rotate([90, 0, a])\n                scale([0.5, 0.5, 3])\n                    cylinder(r = 1, h = 1);\n        }\n    }\n}\n\n// Main assembly\ncolor(\"#C4A484\") // Bread color\nunion() {\n    donut_body();\n    \n    // Add surface texture\n    surface_texture();\n}\n\ncolor(\"#F4C2C2\") // Pink icing color\nicing();\n\n// Add sprinkles\nsprinkles();",
    "renders": true
  },
  {
    "food_item": "eclair",
    "openscad_code": "// Realistic Eclair - Medium Complexity - 3D Printable\n\n// Eclair dimensions in mm\nlength = 80;\nwidth = 25;\nheight = 15;\nchocolate_thickness = 2;\ncream_thickness = 4;\n\n// Colors\n$fn = 32;\ncolor_chocolate = [50/255, 25/255, 0/255];\ncolor_dough = [235/255, 215/255, 180/255];\ncolor_cream = [255/255, 250/255, 240/255];\n\n// Main pastry shell - elongated oval shape\nmodule pastry_shell() {\n    color(color_dough)\n    union() {\n        // Main body - rounded top\n        translate([0, 0, height/2])\n        scale([length/2, width/2, height/2])\n        sphere(1);\n        \n        // Flat bottom\n        translate([0, 0, 0])\n        cube([length, width, height/2], center = true);\n        \n        // Rounded ends\n        translate([length/2 - width/2, 0, height/2])\n        rotate([0, 90, 0])\n        cylinder(h=width, r=height/2, center = true);\n        \n        translate([-length/2 + width/2, 0, height/2])\n        rotate([0, 90, 0])\n        cylinder(h=width, r=height/2, center = true);\n    }\n}\n\n// Chocolate glaze on top\nmodule chocolate_glaze() {\n    color(color_chocolate)\n    translate([0, 0, height + chocolate_thickness/2])\n    cube([length - 4, width - 4, chocolate_thickness], center = true);\n}\n\n// Cream filling visible at ends\nmodule cream_ends() {\n    color(color_cream) {\n        // Left end cream\n        translate([-length/2 + 2, 0, height/2])\n        rotate([0, 90, 0])\n        cylinder(h=width - 4, r1=cream_thickness, r2=cream_thickness - 1, center = true);\n        \n        // Right end cream\n        translate([length/2 - 2, 0, height/2])\n        rotate([0, 90, 0])\n        cylinder(h=width - 4, r1=cream_thickness, r2=cream_thickness - 1, center = true);\n    }\n}\n\n// Dough texture lines\nmodule texture_lines() {\n    color(color_dough)\n    for(i = [1:5:length-6]) {\n        translate([i - length/2, 0, height + 0.5])\n        rotate([90, 0, 0])\n        cylinder(h=width - 2, r=0.3, center = true);\n    }\n}\n\n// Small surface imperfections\nmodule surface_imperfections() {\n    color(color_dough)\n    for(i = [0:10:7]) {\n        for(j = [0:10:3]) {\n            translate([i - length/2 + random(0,2), j - width/2 + random(0,2), height - 1])\n            sphere(0.2);\n        }\n    }\n}\n\n// Create the complete eclair\nunion() {\n    // Main components\n    pastry_shell();\n    chocolate_glaze();\n    cream_ends();\n    \n    // Details\n    texture_lines();\n    surface_imperfections();\n}\n\n// Add slight rotation for better viewing\nrotate([15, 0, 45]) {\n    // Model is already defined above\n}",
    "renders": true
  },
  {
    "food_item": "fudge",
    "openscad_code": "// Realistic Chocolate Walnut Fudge Block\n// Approx 60x60x20 mm, 3D-printable without supports\n\n$fn = 32;\n\n// Main fudge color\ncolor([101, 67, 33]/255) {\n    difference() {\n        // Main fudge block\n        translate([0, 0, 10]) {\n            // Create base block with rounded edges\n            minkowski() {\n                cube([50, 50, 15], center = true);\n                sphere(3);\n            }\n        }\n\n        // Carve top surface for irregular texture\n        for (x = [-20:10:20], y = [-20:10:20]) {\n            translate([x + rand(-2, 2), y + rand(-2, 2), 18]) {\n                sphere(3 + rand(-1, 1));\n            }\n        }\n    }\n}\n\n// Walnut pieces embedded in surface\nmodule walnut_piece() {\n    color([139, 69, 19]/255) {\n        // Main walnut half\n        difference() {\n            scale([1, 0.7, 0.5]) sphere(4);\n            translate([0, 0, -2]) cube([10, 10, 4], center = true);\n        }\n        \n        // Walnut texture ridges\n        for (i = [-2:1:2]) {\n            rotate([0, 90, 0]) {\n                translate([i * 0.8, 0, 0]) {\n                    scale([0.2, 3, 0.3]) sphere(1);\n                }\n            }\n        }\n    }\n}\n\n// Place walnut pieces randomly on top\nfor (i = [0:7]) {\n    translate([\n        rand(-18, 18), \n        rand(-18, 18), \n        18 + rand(1, 3)\n    ]) {\n        rotate([0, 0, rand(0, 360)]) {\n            walnut_piece();\n        }\n    }\n}\n\n// Chocolate swirl details\ncolor([61, 37, 13]/255) {\n    for (i = [0:20]) {\n        a = i * 18;\n        r = 20 + rand(-2, 2);\n        translate([\n            cos(a) * r, \n            sin(a) * r, \n            18 + rand(0.5, 1.5)\n        ]) {\n            rotate([90, 0, a]) {\n                scale([0.5, 0.5, rand(5, 15)]) {\n                    cylinder(h = 1, r = 1);\n                }\n            }\n        }\n    }\n}\n\n// Utility function for random values\nfunction rand(min, max) = min + (max - min) * (rands(0, 1, 1)[0]);",
    "renders": true
  },
  {
    "food_item": "truffle",
    "openscad_code": "// Realistic chocolate truffle with cocoa dusting\n// Medium complexity OpenSCAD model (approx 80 lines)\n\n// Main truffle body - irregular sphere shape\nmodule truffle_body() {\n    color(\"#3B2F2F\")  // Dark chocolate color\n    \n    // Create lumpy sphere using multiple spheres\n    union() {\n        // Central sphere\n        sphere(d=40, $fn=60);\n        \n        // Add irregular bumps\n        for(i = [0:8]) {\n            rotate([rand(0,360), rand(0,360), 0])\n            translate([rand(0,8), rand(0,8), rand(15,20)])\n            sphere(d=rand(6,12), $fn=20);\n        }\n    }\n}\n\n// Cocoa powder dusting effect\nmodule cocoa_dusting() {\n    color(\"#2C1B1B\")  // Dark cocoa color\n    \n    difference() {\n        // Thin shell coating\n        scale([1.02, 1.02, 1.02])\n        truffle_body();\n        \n        // Remove interior to create hollow shell\n        scale([0.98, 0.98, 0.98])\n        truffle_body();\n    }\n    \n    // Add cocoa speckles\n    for(i = [0:30]) {\n        translate([\n            rand(-20,20), \n            rand(-20,20), \n            rand(18,22)\n        ])\n        sphere(d=0.5, $fn=8);\n    }\n}\n\n// Truffle base flattening (where it sits)\nmodule truffle_base() {\n    difference() {\n        union() {\n            truffle_body();\n            cocoa_dusting();\n        }\n        \n        // Flat bottom for stability\n        translate([0, 0, -25])\n        cube([50, 50, 25], center=true);\n    }\n}\n\n// Decorative swirl on top\nmodule swirl_pattern() {\n    color(\"#1A0F0F\")  // Very dark chocolate\n    \n    for(i = [0:3]) {\n        rotate([0, 0, i*120])\n        translate([0, 6, 20])\n        rotate_extrude(angle=360, $fn=32)\n        translate([2, 0, 0])\n        circle(d=1.5, $fn=16);\n    }\n}\n\n// Main assembly\nunion() {\n    // Core truffle\n    truffle_base();\n    \n    // Surface texture lines\n    for(angle = [0:30:330]) {\n        rotate([0, 0, angle])\n        translate([0, 19.5, 10])\n        rotate([90, 0, 0])\n        cylinder(h=20, d=0.8, $fn=8);\n    }\n    \n    // Top swirl decoration\n    swirl_pattern();\n}\n\n// Helper function for random values\nfunction rand(min, max) = min + (max - min) * (rands(0, 1, 1)[0]);",
    "renders": true
  },
  {
    "food_item": "macaron",
    "openscad_code": "// Realistic 3D printable macaron model\n// Features: two shells with feet, filling layer, subtle texture\n\nmodule macaron_shell(radius, height, color_name) {\n    // Main shell dome\n    color(color_name) {\n        difference() {\n            union() {\n                // Top dome\n                translate([0, 0, height * 0.7]) \n                    scale([1, 1, 0.5]) \n                        sphere(r = radius, $fn = 64);\n                \n                // Cylindrical base for smooth transition\n                cylinder(h = height * 0.3, r1 = radius, r2 = radius * 0.95, $fn = 64);\n            }\n            \n            // Hollow out the shell\n            translate([0, 0, -1]) \n                cylinder(h = height + 2, r = radius - 2, $fn = 64);\n        }\n    }\n    \n    // Feet (ruffled edge)\n    color(color_name) {\n        translate([0, 0, 0]) {\n            difference() {\n                cylinder(h = 1.5, r = radius + 1, $fn = 128);\n                cylinder(h = 2, r = radius - 1.5, $fn = 128);\n            }\n            \n            // Create ruffled effect with small notches\n            for (i = [0:15]) {\n                rotate([0, 0, i * 22.5]) {\n                    translate([radius - 0.5, -0.75, 0]) \n                        cube([1.5, 1.5, 1.6]);\n                }\n            }\n        }\n    }\n}\n\nmodule filling_layer(radius, thickness, color_name) {\n    color(color_name) {\n        // Main filling disk\n        translate([0, 0, 0]) \n            cylinder(h = thickness, r = radius - 1.5, $fn = 64);\n        \n        // Slightly larger outer ring for realistic overflow\n        translate([0, 0, -0.2]) \n            cylinder(h = thickness + 0.4, r = radius - 0.5, r2 = radius - 1, $fn = 64);\n    }\n}\n\nmodule surface_texture(radius) {\n    // Add subtle bumps on shell surface\n    for (i = [0:20]) {\n        angle = i * 137.5;\n        dist = sqrt(i) * 3;\n        if (dist < radius - 3) {\n            translate([cos(angle) * dist, sin(angle) * dist, 9.5]) \n                sphere(r = 0.3, $fn = 16);\n        }\n    }\n}\n\n// Main assembly\nmodule macaron() {\n    shell_color = \"#FFB6C1\";  // Light pink\n    filling_color = \"#FFF0F5\";  // Lavender cream\n    \n    // Bottom shell (upside down)\n    rotate([180, 0, 0]) \n        macaron_shell(radius = 25, height = 10, color_name = shell_color);\n    \n    // Filling layer\n    translate([0, 0, 10]) \n        filling_layer(radius = 25, thickness = 5, color_name = filling_color);\n    \n    // Top shell\n    translate([0, 0, 15]) \n        macaron_shell(radius = 25, height = 10, color_name = shell_color);\n    \n    // Add texture to top shell\n    translate([0, 0, 25]) \n        surface_texture(radius = 25);\n}\n\n// Render the macaron\nmacaron();",
    "renders": true
  },
  {
    "food_item": "pastry",
    "openscad_code": "// Raspberry Danish Pastry - Realistic Style Medium Complexity\n\ncolor([0.95, 0.75, 0.55]) {\n    // Main pastry body - twisted rectangle with rounded edges\n    rotate([90, 0, 0]) {\n        linear_extrude(height = 15, twist = 45, slices = 30) {\n            offset(r = 5) offset(r = -5) square([70, 25], center = true);\n        }\n    }\n\n    // Top laminated layers\n    for (i = [0:3]) {\n        translate([0, 0, 15 + i * 1.5]) {\n            scale([1 - i * 0.1, 1 - i * 0.1, 1]) {\n                rotate([90, 0, 0]) {\n                    linear_extrude(height = 1.5, twist = 45, slices = 20) {\n                        offset(r = 5) offset(r = -5) square([70, 25], center = true);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Raspberry filling\ncolor([0.75, 0.15, 0.25]) {\n    // Center cavity for filling\n    difference() {\n        translate([0, 0, 8]) {\n            scale([0.6, 0.4, 0.8]) {\n                rotate([90, 0, 0]) {\n                    linear_extrude(height = 10, twist = 45, slices = 30) {\n                        square([70, 25], center = true);\n                    }\n                }\n            }\n        }\n        translate([0, 0, 16]) {\n            scale([0.5, 0.3, 1]) {\n                rotate([90, 0, 0]) {\n                    linear_extrude(height = 10, twist = 45, slices = 30) {\n                        square([70, 25], center = true);\n                    }\n                }\n            }\n        }\n    }\n\n    // Raspberry seeds\n    for (i = [0:15]) {\n        translate([\n            -25 + cos(i * 137.5) * 10,\n            -10 + sin(i * 137.5) * 5,\n            10 + sin(i) * 2\n        ]) {\n            sphere(r = 0.5);\n        }\n    }\n}\n\n// Icing glaze\ncolor([1, 0.95, 0.85]) {\n    // Thin glaze layer on top\n    translate([0, 0, 21]) {\n        scale([0.95, 0.85, 0.2]) {\n            rotate([90, 0, 0]) {\n                linear_extrude(height = 1, twist = 45, slices = 20) {\n                    offset(r = 5) offset(r = -5) square([70, 25], center = true);\n                }\n            }\n        }\n    }\n\n    // Dripping icing\n    for (i = [0:4]) {\n        translate([\n            -30 + i * 15,\n            13 + sin(i * 30) * 2,\n            21 - i\n        ]) {\n            scale([1, 1 + sin(i * 45) * 0.5, 1]) {\n                sphere(r = 1 + sin(i * 60) * 0.5);\n            }\n        }\n    }\n}\n\n// Almond slices on top\ncolor([0.9, 0.8, 0.6]) {\n    module almond_slice() {\n        scale([1, 0.3, 0.1]) {\n            rotate([0, 90, 0]) {\n                cylinder(h = 5, r = 2, $fn = 6);\n            }\n        }\n    }\n\n    for (i = [0:7]) {\n        translate([\n            -25 + cos(i * 45) * 20,\n            -8 + sin(i * 45) * 8,\n            22\n        ]) {\n            rotate([0, 0, i * 137.5]) {\n                almond_slice();\n            }\n        }\n    }\n}\n\n// Bottom base for stability\ncolor([0.85, 0.65, 0.45]) {\n    translate([0, 0, -2]) {\n        rotate([90, 0, 0]) {\n            linear_extrude(height = 2, twist = 45, slices = 20) {\n                offset(r = 5) offset(r = -5) square([70, 25], center = true);\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "food_item": "scone",
    "openscad_code": "// Realistic Scone for 3D Printing\n// Overall dimensions: ~75mm diameter, ~35mm height\n\n$fn = 64;  // Smooth curves for realistic appearance\n\n// Main scone body\nmodule scone_body() {\n    color(\"#D2B48C\")  // Tan/light brown color\n    difference() {\n        // Main rounded body\n        scale([1, 0.9, 0.5])\n        sphere(d = 75);\n        \n        // Flat bottom\n        translate([0, 0, -19])\n        cube([100, 100, 40], center = true);\n    }\n}\n\n// Create natural cracks on top\nmodule cracks() {\n    color(\"#A0826D\")  // Darker brown for cracks\n    for(i = [0:8]) {\n        rotate([0, 0, i * 45])\n        translate([0, 0, -5 + sin(i) * 2])\n        scale([1 + cos(i) * 0.3, 0.1 + sin(i) * 0.05, 1])\n        rotate([90, 0, 0])\n        cylinder(h = 25 + i * 2, d1 = 1, d2 = 3);\n    }\n}\n\n// Surface texture bumps for realistic appearance\nmodule surface_texture() {\n    color(\"#C19A6B\")  // Medium brown\n    for(a = [0:30:360]) {\n        for(r = [20:15:35]) {\n            rotate([0, 0, a])\n            translate([r, 0, -15 + sin(a + r) * 3])\n            sphere(d = 2 + sin(a) * 1);\n        }\n    }\n}\n\n// Raisins scattered on surface\nmodule raisins() {\n    color(\"#654321\")  // Dark brown for raisins\n    raisin_positions = [\n        [20, 15, -10], [-25, 10, -12], [15, -20, -8],\n        [-10, -15, -11], [0, 25, -9], [-20, -5, -13]\n    ];\n    \n    for(pos = raisin_positions) {\n        translate(pos)\n        scale([1, 0.7, 0.5])\n        sphere(d = 5);\n    }\n}\n\n// Bottom flat base with slight rounding\nmodule bottom_base() {\n    color(\"#C19A6B\")\n    difference() {\n        cylinder(h = 3, d = 70);\n        translate([0, 0, -1])\n        cylinder(h = 5, d = 68);\n    }\n}\n\n// Assemble the complete scone\nunion() {\n    // Main body with base\n    union() {\n        scone_body();\n        translate([0, 0, -20])\n        bottom_base();\n    }\n    \n    // Surface details\n    translate([0, 0, 5])\n    cracks();\n    \n    translate([0, 0, 10])\n    surface_texture();\n    \n    raisins();\n}",
    "renders": true
  },
  {
    "food_item": "biscotti",
    "openscad_code": "// Realistic Biscotti - Medium Complexity\n// Dimensions: ~80mm length, 25mm width, 15mm height\n\ncolor([0.82, 0.55, 0.33])  // Almond biscotti color\n\nmodule biscotti_body() {\n    // Main biscotti loaf shape - elongated with rounded ends\n    hull() {\n        translate([-35, 0, 0]) sphere(d=20);\n        translate([35, 0, 0]) sphere(d=20);\n    }\n    \n    // Add central cylinder for consistent thickness\n    translate([0, 0, -2]) cylinder(h=12, d=25, $fn=20);\n}\n\n// Almond slivers embedded in surface\nmodule almond_slivers() {\n    color([0.95, 0.85, 0.6])  // Light almond color\n    for(i = [-30:10:30]) {\n        for(j = [-8:8:8]) {\n            translate([i, j, 7.5]) \n                rotate([90, 0, rand(i*j)*60]) \n                    scale([1, 0.3, 0.1]) \n                        sphere(d=6, $fn=8);\n        }\n    }\n}\n\n// Cracks and texture lines\nmodule surface_texture() {\n    color([0.75, 0.48, 0.28])  // Slightly darker for cracks\n    \n    // Longitudinal cracks\n    for(i = [-20:15:20]) {\n        translate([i, 0, 7.5]) \n            rotate([0, 90, 0]) \n                cylinder(h=1, d=rand(i)*2+1, $fn=6);\n    }\n    \n    // Surface imperfections\n    for(i = [-25:5:25]) {\n        for(j = [-10:5:10]) {\n            translate([i, j, 7.5 + rand(i*j)]) \n                sphere(d=0.5 + rand(i*j)*0.5, $fn=8);\n        }\n    }\n}\n\n// End cut surfaces\nmodule cut_surfaces() {\n    color([0.78, 0.52, 0.35])  // Fresh cut color\n    \n    // Left cut end\n    translate([-40, 0, 0]) \n        rotate([0, 90, 0]) \n            cylinder(h=1, d=20, $fn=20);\n    \n    // Right cut end\n    translate([40, 0, 0]) \n        rotate([0, 90, 0]) \n            cylinder(h=1, d=20, $fn=20);\n}\n\n// Helper function for random variation\nfunction rand(seed) = (seed*9301 + 49297) % 233280 / 233280;\n\n// Main assembly\nunion() {\n    biscotti_body();\n    almond_slivers();\n    surface_texture();\n    cut_surfaces();\n}",
    "renders": true
  },
  {
    "food_item": "sundae",
    "openscad_code": "// Realistic Sundae - OpenSCAD Model\n// Medium complexity with basic primitives\n// Designed for 3D printing - no overhangs\n\n// Main parameters\nglass_height = 60;\nglass_diameter = 40;\nice_cream_ball_radius = 14;\nwhipped_height = 8;\ncherry_radius = 4;\n\n// Colors\nglass_color = [220/255, 240/255, 250/255, 0.4];\nchocolate_color = [101/255, 67/255, 33/255];\nvanilla_color = [1, 1, 0.95];\nstrawberry_color = [1, 0.8, 0.85];\nwhipped_color = [1, 1, 1];\ncherry_color = [0.8, 0.1, 0.1];\n\n// Sundae glass\nmodule sundae_glass() {\n    // Base\n    difference() {\n        cylinder(h=5, r1=glass_diameter/2, r2=glass_diameter/2, $fn=32);\n        translate([0, 0, 1])\n            cylinder(h=4, r1=glass_diameter/2-3, r2=glass_diameter/2-3, $fn=32);\n    }\n    \n    // Stem\n    cylinder(h=glass_height/3, r1=5, r2=5, $fn=16);\n    \n    // Bowl\n    difference() {\n        cylinder(h=glass_height*2/3, r1=glass_diameter/2, r2=glass_diameter/2-5, $fn=32);\n        translate([0, 0, 2])\n            cylinder(h=glass_height*2/3-2, r1=glass_diameter/2-4, r2=glass_diameter/2-9, $fn=32);\n    }\n}\n\n// Ice cream ball with texture\nmodule ice_cream_ball(radius, color_value) {\n    color(color_value) {\n        // Main sphere\n        sphere(r=radius, $fn=32);\n        \n        // Add texture with small spheres\n        for(i = [0:8]) {\n            rotate([0, 0, i*45])\n                translate([radius*0.7, 0, radius*0.3])\n                    sphere(r=radius*0.12, $fn=8);\n        }\n        for(i = [0:6]) {\n            rotate([0, 0, i*60])\n                translate([radius*0.5, 0, radius*0.6])\n                    sphere(r=radius*0.1, $fn=8);\n        }\n    }\n}\n\n// Whipped cream swirl\nmodule whipped_cream() {\n    color(whipped_color) {\n        for(i = [0:5]) {\n            rotate([0, 0, i*60])\n                translate([i*1.5, 0, i*1.2])\n                    cylinder(h=whipped_height-i*0.5, r1=5-i*0.5, r2=3-i*0.3, $fn=16);\n        }\n    }\n}\n\n// Cherry on top\nmodule cherry() {\n    color(cherry_color) {\n        translate([0, 0, cherry_radius])\n            sphere(r=cherry_radius, $fn=16);\n        \n        // Stem\n        color([0.2, 0.4, 0.1])\n            rotate([30, 0, 0])\n                cylinder(h=6, r1=0.5, r2=0.3, $fn=8);\n    }\n}\n\n// Chocolate sauce drizzle\nmodule chocolate_sauce() {\n    color(chocolate_color) {\n        for(i = [0:12]) {\n            rotate([0, 0, i*30])\n                translate([glass_diameter/2-5, 0, i*2])\n                    cylinder(h=1, r1=1, r2=0.5, $fn=8);\n        }\n    }\n}\n\n// Assemble the sundae\ncolor(glass_color) sundae_glass();\n\n// Ice cream balls - stacked\ntranslate([0, 0, glass_height-5])\n    ice_cream_ball(ice_cream_ball_radius, chocolate_color);\n\ntranslate([0, 0, glass_height-5+ice_cream_ball_radius*1.6])\n    ice_cream_ball(ice_cream_ball_radius*0.9, vanilla_color);\n\ntranslate([0, 0, glass_height-5+ice_cream_ball_radius*1.6+ice_cream_ball_radius*1.4])\n    ice_cream_ball(ice_cream_ball_radius*0.8, strawberry_color);\n\n// Whipped cream on top\ntranslate([0, 0, glass_height-5+ice_cream_ball_radius*1.6+ice_cream_ball_radius*1.4+ice_cream_ball_radius*1.2])\n    whipped_cream();\n\n// Cherry\ntranslate([0, 0, glass_height-5+ice_cream_ball_radius*1.6+ice_cream_ball_radius*1.4+ice_cream_ball_radius*1.2+whipped_height])\n    cherry();\n\n// Chocolate sauce\ntranslate([0, 0, glass_height-5+ice_cream_ball_radius*1.6+ice_cream_ball_radius*1.4+ice_cream_ball_radius])\n    chocolate_sauce();",
    "renders": true
  },
  {
    "food_item": "cheesecake",
    "openscad_code": "// Realistic Cheesecake - Medium Complexity\n// Features: Graham cracker crust, creamy filling, strawberry topping, and realistic texture\n\n// Main dimensions\nbase_diameter = 60;\nbase_height = 8;\ncheesecake_height = 25;\nstrawberry_height = 8;\ntotal_height = base_height + cheesecake_height + strawberry_height;\n\n// Crust texture module\nmodule crust_texture() {\n    for (i = [0:30]) {\n        translate([\n            sin(i * 12) * (base_diameter/2 - 2),\n            cos(i * 12) * (base_diameter/2 - 2),\n            -1\n        ]) {\n            scale([1, 0.3, 0.3]) \n                sphere(1.5, $fn=8);\n        }\n    }\n}\n\n// Graham cracker crust\nmodule crust() {\n    color([0.82, 0.71, 0.55]) {\n        // Base crust\n        cylinder(h=base_height, d=base_diameter, $fn=64);\n        \n        // Side crust\n        translate([0, 0, base_height/2])\n            difference() {\n                cylinder(h=base_height+2, d1=base_diameter, d2=base_diameter-4, $fn=64);\n                cylinder(h=base_height+3, d=base_diameter-6, $fn=64);\n            }\n        \n        // Texture on top\n        translate([0, 0, base_height-0.5])\n            crust_texture();\n    }\n}\n\n// Cream cheese filling\nmodule filling() {\n    color([1, 0.96, 0.9]) {\n        // Main filling\n        cylinder(h=cheesecake_height, d=base_diameter-6, $fn=64);\n        \n        // Slightly domed top\n        translate([0, 0, cheesecake_height-2])\n            scale([1, 1, 0.3])\n                sphere((base_diameter-6)/2, $fn=64);\n    }\n}\n\n// Individual strawberry slice\nmodule strawberry_slice() {\n    color([0.85, 0.2, 0.2]) {\n        difference() {\n            // Main berry body\n            scale([0.7, 0.7, 0.3])\n                sphere(6, $fn=32);\n            \n            // Seeds\n            for (i = [0:8]) {\n                rotate([0, 0, i * 45])\n                    translate([3.5, 0, 0])\n                        sphere(0.3, $fn=6);\n            }\n        }\n        \n        // Green leafy top\n        color([0.2, 0.6, 0.2]) {\n            for (i = [0:5]) {\n                rotate([0, 0, i * 72])\n                    translate([2, 0, -0.5])\n                        scale([0.3, 1.2, 0.1])\n                            sphere(1.5, $fn=6);\n            }\n        }\n    }\n}\n\n// Strawberry topping\nmodule topping() {\n    // Strawberry glaze\n    color([0.9, 0.3, 0.3]) {\n        translate([0, 0, cheesecake_height-0.5])\n            cylinder(h=1, d=base_diameter-8, $fn=64);\n    }\n    \n    // Individual strawberries\n    for (r = [0:2]) {\n        for (a = [0:45:360]) {\n            rotate([0, 0, a + r * 15])\n                translate([\n                    r * 8 + 10,\n                    0,\n                    cheesecake_height + strawberry_height/2\n                ])\n                    rotate([90, 0, 0])\n                        strawberry_slice();\n        }\n    }\n}\n\n// Assembly\nmodule cheesecake() {\n    union() {\n        crust();\n        translate([0, 0, base_height])\n            filling();\n        topping();\n        \n        // Side detail - slight indent for realistic look\n        color([0.95, 0.95, 0.95]) {\n            translate([0, 0, base_height + cheesecake_height/2])\n                cylinder(h=cheesecake_height+2, d=base_diameter-5.5, $fn=64);\n        }\n    }\n}\n\n// Render the cheesecake\ncheesecake();",
    "renders": true
  },
  {
    "food_item": "popsicle",
    "openscad_code": "// Realistic popsicle with fruit texture and stick\n// Overall size: ~80mm tall, 40mm wide\n\ncolor(\"chocolate\") {\n    // Main popsicle body with rounded top\n    difference() {\n        union() {\n            // Main rectangular body\n            translate([0, 0, 10])\n                cube([35, 25, 55], center=true);\n            \n            // Rounded top\n            translate([0, 0, 42.5])\n                scale([1, 0.7, 1])\n                    sphere(d=35);\n        }\n        \n        // Bite marks on top\n        for(i=[-1, 1]) {\n            translate([i*8, 0, 50])\n                sphere(d=12);\n        }\n        translate([0, 8, 48])\n            sphere(d=10);\n    }\n}\n\n// Chocolate coating texture pattern\nmodule texture_pattern() {\n    for(x=[-12:6:12]) {\n        for(y=[-8:5:8]) {\n            translate([x, y, 37])\n                cylinder(h=1, d=3, $fn=8);\n        }\n    }\n}\n\ncolor(\"darkgoldenrod\") {\n    texture_pattern();\n}\n\n// Inner fruit core (strawberry)\ncolor(\"crimson\") {\n    translate([0, 0, 25])\n        cube([30, 20, 35], center=true);\n    \n    // Fruit texture dots\n    for(i=[0:20]) {\n        rotate([0, 0, i*18])\n            translate([12, 0, 20+i*0.5])\n                sphere(d=1.5);\n    }\n}\n\n// Wooden stick\ncolor(\"burlywood\") {\n    // Main stick\n    translate([0, 0, -10])\n        cube([8, 3, 35], center=true);\n    \n    // Stick texture lines\n    for(z=[-5:2:20]) {\n        translate([0, 1.6, z])\n            cube([7.8, 0.2, 0.5], center=true);\n    }\n    \n    // Rounded bottom\n    translate([0, 0, -22])\n        cylinder(h=5, d=8, center=true);\n}\n\n// Melting drips\nmodule drip(x, z) {\n    translate([x, 0, z])\n        scale([1, 0.7, 1.5])\n            sphere(d=4);\n}\n\ncolor(\"chocolate\") {\n    drip(-10, 5);\n    drip(12, 3);\n    drip(-5, 0);\n}",
    "renders": true
  },
  {
    "food_item": "shortcake",
    "openscad_code": "// Realistic Medium-Complexity Shortcake\n// 3D printable, no overhangs, ~70mm diameter\n\n// Colors\nstrawberry_red = [0.9, 0.15, 0.25];\nwhipped_cream = [1, 0.98, 0.95];\nbiscuit = [0.9, 0.75, 0.55];\nseed_brown = [0.4, 0.25, 0.1];\n\n// Main shortcake assembly\nmodule shortcake() {\n    union() {\n        // Bottom biscuit layer\n        color(biscuit)\n        biscuit_layer();\n        \n        // Whipped cream layer\n        translate([0, 0, 8])\n        color(whipped_cream)\n        whipped_layer();\n        \n        // Strawberries\n        strawberries();\n        \n        // Top biscuit layer\n        translate([0, 0, 15])\n        color(biscuit)\n        top_biscuit_layer();\n        \n        // Additional whipped cream dollops\n        dollops();\n    }\n}\n\n// Biscuit layer with texture\nmodule biscuit_layer() {\n    difference() {\n        cylinder(h=8, d=70, $fn=64);\n        \n        // Top surface texture\n        for(i = [0:30]) {\n            translate([cos(i*12)*25, sin(i*12)*25, 7.5])\n            sphere(d=2.5, $fn=12);\n        }\n        \n        // Side texture holes\n        for(i = [0:35]) {\n            rotate([0, 0, i*10.3])\n            translate([34.5, 0, 4])\n            rotate([90, 0, 0])\n            cylinder(h=2, d=1.5, $fn=8);\n        }\n    }\n}\n\n// Top biscuit layer with wedge cuts\nmodule top_biscuit_layer() {\n    difference() {\n        cylinder(h=6, d=70, $fn=64);\n        \n        // Wedge cuts like real shortcake\n        for(i = [0:7]) {\n            rotate([0, 0, i*45])\n            translate([0, -50, 0])\n            cube([100, 100, 10]);\n        }\n        \n        // Center hole\n        cylinder(h=7, d=8, $fn=32);\n    }\n}\n\n// Whipped cream layer with waves\nmodule whipped_layer() {\n    difference() {\n        cylinder(h=7, d=68, $fn=64);\n        \n        // Wavy top surface\n        for(i = [0:45]) {\n            translate([cos(i*8)*20, sin(i*8)*20, 3])\n            sphere(d=6, $fn=12);\n        }\n    }\n}\n\n// Strawberry slices\nmodule strawberries() {\n    for(pos = [[-20, -15, 12], [15, 10, 14], [-5, 18, 13], [22, -8, 12.5], [-25, 5, 13.5]]) {\n        translate(pos)\n        color(strawberry_red)\n        strawberry_slice();\n    }\n}\n\n// Individual strawberry slice\nmodule strawberry_slice() {\n    difference() {\n        // Berry body\n        scale([1, 1, 0.4])\n        sphere(d=12, $fn=24);\n        \n        // Seeds on surface\n        for(i = [0:15]) {\n            rotate([0, 0, i*24])\n            translate([4.5, 0, 1.8])\n            color(seed_brown)\n            scale([0.3, 0.3, 1])\n            sphere(d=1, $fn=8);\n        }\n        \n        // Top indent\n        translate([0, 0, 2.3])\n        cylinder(h=2, d=3, $fn=12);\n    }\n}\n\n// Whipped cream dollops on top\nmodule dollops() {\n    for(pos = [[0, 0, 21], [-15, 15, 20.5], [20, -10, 21], [-18, -12, 20.8]]) {\n        translate(pos)\n        color(whipped_cream)\n        scale([1, 1, 1.3])\n        sphere(d=10, $fn=32);\n    }\n}\n\n// Render the shortcake\nshortcake();",
    "renders": true
  },
  {
    "food_item": "butterscotch",
    "openscad_code": "// Butterscotch candy with realistic features\n// Overall dimensions: 60mm diameter, 15mm thick at center\n// Features: classic disc shape, wrapped edges, sugar crystal texture, slight dome\n\n$fn = 40;\n\n// Main butterscotch body\nmodule butterscotch() {\n    color([0.8, 0.5, 0.2])  // Rich butterscotch color\n    \n    difference() {\n        // Main disc with slight dome\n        union() {\n            // Base disc\n            cylinder(h = 12, r = 30, center = true);\n            \n            // Raised dome in center\n            translate([0, 0, 6])\n                scale([1, 1, 0.3])\n                    sphere(r = 25);\n        }\n        \n        // Indentation on bottom\n        translate([0, 0, -7])\n            cylinder(h = 5, r1 = 20, r2 = 25, center = true);\n        \n        // Wrapped edge chamfer\n        for(i = [0:5:359]) {\n            rotate([0, 0, i])\n                translate([0, 30, 0])\n                    rotate([90, 0, 0])\n                        cylinder(h = 3, r = 3, center = false);\n        }\n    }\n}\n\n// Sugar crystal texture pattern\nmodule sugar_crystals() {\n    color([0.9, 0.6, 0.3])  // Lighter crystallized sugar\n    \n    // Top surface crystals\n    for(i = [0:15:359]) {\n        for(j = [10:10:25]) {\n            rotate([0, 0, i])\n                translate([j, 0, 8])\n                    scale([1, 0.8, 0.3])\n                        sphere(r = 1.5);\n        }\n    }\n    \n    // Bottom surface crystals\n    for(i = [7.5:15:359]) {\n        for(j = [10:10:25]) {\n            rotate([0, 0, i])\n                translate([j, 0, -8])\n                    scale([1, 0.8, 0.3])\n                        sphere(r = 1.5);\n        }\n    }\n}\n\n// Edge ridges from wrapping process\nmodule wrapper_ridges() {\n    color([0.7, 0.4, 0.1])  // Slightly darker edge\n    \n    // Top edge ridges\n    for(i = [0:20:359]) {\n        rotate([0, 0, i])\n            translate([29, 0, 0])\n                rotate([90, 0, 0])\n                    cylinder(h = 2, r = 1.5, center = true);\n    }\n    \n    // Bottom edge ridges\n    for(i = [10:20:359]) {\n        rotate([0, 0, i])\n            translate([29, 0, -2])\n                rotate([90, 0, 0])\n                    cylinder(h = 2, r = 1.5, center = true);\n    }\n}\n\n// Central depression from forming process\nmodule center_mark() {\n    color([0.75, 0.45, 0.15])\n    \n    // Small central depression\n    translate([0, 0, 8.5])\n        cylinder(h = 1, r1 = 3, r2 = 2, center = true);\n}\n\n// Assembly\nunion() {\n    butterscotch();\n    sugar_crystals();\n    wrapper_ridges();\n    center_mark();\n}",
    "renders": true
  },
  {
    "food_item": "toffee",
    "openscad_code": "// Toffee bar with realistic texture and wrapper impression\n// Dimensions: 80mm x 40mm x 15mm\n\nmodule toffee_bar() {\n    // Main toffee body with rounded edges\n    color([0.72, 0.52, 0.32])  // caramel brown color\n    \n    // Create rounded rectangular bar using hull of spheres\n    hull() {\n        // Bottom corners\n        translate([5, 5, 2]) sphere(3, $fn=16);\n        translate([75, 5, 2]) sphere(3, $fn=16);\n        translate([5, 35, 2]) sphere(3, $fn=16);\n        translate([75, 35, 2]) sphere(3, $fn=16);\n        \n        // Top corners\n        translate([5, 5, 12]) sphere(3, $fn=16);\n        translate([75, 5, 12]) sphere(3, $fn=16);\n        translate([5, 35, 12]) sphere(3, $fn=16);\n        translate([75, 35, 12]) sphere(3, $fn=16);\n    }\n}\n\nmodule wrapper_impression() {\n    // Create wrapper seam impression on top surface\n    color([0.85, 0.85, 0.85])  // light gray wrapper marks\n    \n    // Central seam line\n    translate([40, 20, 14.9]) \n        cube([80, 0.5, 0.3], center=true);\n    \n    // Cross folds\n    for(i = [1:3]) {\n        translate([i * 20, 20, 14.9]) \n            cube([0.5, 40, 0.3], center=true);\n    }\n}\n\nmodule sugar_crystals() {\n    // Random sugar crystals on surface\n    color([0.92, 0.92, 0.88])  // off-white crystal color\n    \n    for(i = [1:40]) {\n        // Random positions across surface\n        translate([\n            5 + rand(i * 3) * 70, \n            5 + rand(i * 5) * 30, \n            12 + rand(i * 7) * 2\n        ]) {\n            // Small irregular crystals\n            scale([1, 1, 0.5]) sphere(0.3 + rand(i * 11) * 0.4, $fn=6);\n        }\n    }\n}\n\nmodule broken_edge() {\n    // Create realistic broken edge on one corner\n    difference() {\n        // Full corner\n        translate([75, 5, 0]) \n            cube([5, 5, 15]);\n        \n        // Remove irregular chunk\n        translate([77, 7, 5]) \n            rotate([0, 0, 25]) \n                cube([8, 8, 10]);\n        \n        // Add fracture surface detail\n        for(i = [1:15]) {\n            translate([\n                75 + rand(i * 13) * 3, \n                5 + rand(i * 17) * 3, \n                rand(i * 19) * 12\n            ]) {\n                sphere(0.2 + rand(i * 23) * 0.3, $fn=8);\n            }\n        }\n    }\n}\n\n// Helper function for pseudo-random numbers\nfunction rand(seed) = (seed * 9301 + 49297) % 233280 / 233280;\n\n// Assembly with proper positioning\ntranslate([-40, -20, 0]) {\n    union() {\n        toffee_bar();\n        wrapper_impression();\n        sugar_crystals();\n        broken_edge();\n    }\n}",
    "renders": true
  },
  {
    "food_item": "nougat",
    "openscad_code": "// Nougat bar with nuts and rice crisps\n// Dimensions: 60mm x 25mm x 15mm\n\n// Main nougat base\nmodule nougat_base() {\n    color([0.95, 0.9, 0.85])\n    difference() {\n        // Soft nougat body\n        translate([-30, -12.5, -7.5])\n            scale([1, 0.9, 0.8])\n            sphere(d=30);\n        \n        // Flatten bottom\n        translate([-35, -15, -7.5])\n            cube([70, 30, 7.5]);\n        \n        // Create rectangular bar shape\n        translate([-35, -15, -7.5])\n            cube([70, 30, 15]);\n    }\n}\n\n// Almond pieces\nmodule almond_piece(x, y, z, angle) {\n    color([0.9, 0.8, 0.7])\n    translate([x, y, z])\n        rotate([0, 0, angle])\n        scale([1.5, 0.8, 0.5])\n        sphere(d=4);\n}\n\n// Hazelnut pieces\nmodule hazelnut_piece(x, y, z, angle) {\n    color([0.6, 0.4, 0.2])\n    translate([x, y, z])\n        rotate([angle, angle*0.5, 0])\n        sphere(d=3);\n}\n\n// Rice crisps\nmodule rice_crisp(x, y, z) {\n    color([0.98, 0.95, 0.92])\n    translate([x, y, z])\n        scale([0.8, 0.8, 0.5])\n        cube([2, 2, 0.5]);\n}\n\n// Surface texture details\nmodule surface_texture() {\n    for (i = [-25:5:25]) {\n        for (j = [-10:5:10]) {\n            // Random height variation\n            h = (sin(i*0.3) * cos(j*0.3)) * 0.5 + 0.5;\n            translate([i, j, 7.5 + h])\n                sphere(d=1);\n        }\n    }\n}\n\n// Wrapper edges\nmodule wrapper_edges() {\n    color([0.9, 0.85, 0.8], 0.3)\n    difference() {\n        // Thin wrapper layer\n        translate([-31, -13, -8])\n            cube([62, 26, 16]);\n        \n        // Remove inner part\n        translate([-29.5, -11.5, -6.5])\n            cube([59, 23, 13]);\n    }\n}\n\n// Assembly\nunion() {\n    // Main nougat\n    nougat_base();\n    \n    // Almond pieces on top\n    for (i = [-20:10:20]) {\n        almond_piece(i, -5, 7.5, i*10);\n        almond_piece(i+5, 5, 7.5, i*15);\n    }\n    \n    // Hazelnut pieces\n    for (i = [-15:12:15]) {\n        hazelnut_piece(i, -8, 5, i*20);\n        hazelnut_piece(i-3, 8, 5, i*25);\n    }\n    \n    // Rice crisps embedded\n    for (i = [-25:8:25]) {\n        for (j = [-10:5:10]) {\n            rice_crisp(i, j, 3 + (i+j)%3);\n        }\n    }\n    \n    // Surface texture\n    surface_texture();\n    \n    // Wrapper edges\n    wrapper_edges();\n}",
    "renders": true
  },
  {
    "food_item": "marshmallow",
    "openscad_code": "// Realistic 3D printable marshmallow\n// Features: squashed cylinder, rounded ends, puffed texture, slight imperfections\n\ncolor(\"Ivory\") difference() {\n    union() {\n        // Main body: cylinder with domed ends\n        translate([0, 0, 25])\n        scale([1, 1, 0.8])\n        minkowski() {\n            cylinder(h = 30, r = 25, $fn = 64);\n            sphere(5);\n        }\n\n        // Top dome\n        translate([0, 0, 55])\n        scale([1, 1, 0.9])\n        sphere(25, $fn = 64);\n\n        // Bottom slightly flattened\n        translate([0, 0, 0])\n        scale([1, 1, 0.7])\n        sphere(25, $fn = 64);\n    }\n\n    // Puffy texture using small spheres\n    for (i = [0:8]) {\n        for (j = [0:8]) {\n            // Calculate positions in polar coordinates\n            angle = i * 45;\n            radius = 20 + j * 1.5;\n            x = cos(angle) * radius;\n            y = sin(angle) * radius;\n            \n            // Top surface dimples\n            translate([x, y, 55 + 2.5 - j * 0.5])\n            sphere(2.5, $fn = 16);\n\n            // Side surface bumps\n            h = 25 + j * 2;\n            translate([x * 0.9, y * 0.9, h])\n            sphere(1.5, $fn = 16);\n        }\n    }\n\n    // Bottom flattening\n    translate([0, 0, -5])\n    cube([60, 60, 10], center = true);\n\n    // Slight imperfections\n    for (k = [0:5]) {\n        angle = k * 60 + 30;\n        x = cos(angle) * 5;\n        y = sin(angle) * 5;\n        translate([x, y, 40])\n        sphere(3 + k * 0.5, $fn = 16);\n    }\n}\n\n// Subtle seam line around middle\ncolor(\"AntiqueWhite\") \nrotate([90, 0, 0])\ntranslate([0, 0, 25])\ndifference() {\n    cylinder(h = 1, r = 25, $fn = 128);\n    cylinder(h = 2, r = 24.5, $fn = 128);\n}",
    "renders": true
  },
  {
    "food_item": "caramel",
    "openscad_code": "// Caramel Cube with Flowing Top Surface\n// Realistic style, medium complexity caramel candy\n\ncolor(\"#C68642\")\nunion() {\n    // Main caramel cube body\n    difference() {\n        // Main cube with rounded edges\n        minkowski() {\n            cube([42, 42, 35], center = true);\n            sphere(3);\n        }\n        \n        // Hollow center for 3D printing\n        translate([0, 0, 5])\n            cube([34, 34, 35], center = true);\n    }\n    \n    // Flowing caramel top layer\n    translate([0, 0, 18])\n    union() {\n        // Central bulge\n        scale([1.2, 1.2, 0.8])\n            sphere(8);\n            \n        // Flowing drips\n        module drip(pos, size) {\n            translate(pos)\n                scale([1, 1, 1.5])\n                    sphere(size);\n        }\n        \n        drip([8, 5, -2], 4);\n        drip([-7, -6, 0], 3.5);\n        drip([0, 10, 1], 4.5);\n        drip([-9, 8, -1], 3);\n        drip([5, -9, 0], 3.8);\n    }\n    \n    // Sugar crystal texture on sides\n    module crystal(x, y, z) {\n        translate([x, y, z])\n            cube([2, 2, 1], center = true);\n    }\n    \n    // Side A crystals\n    for(i = [-20:4:20]) {\n        for(j = [-15:5:15]) {\n            if(abs(i+j) % 3 == 0) {\n                crystal(i, 21, j);\n                crystal(i, -21, j);\n            }\n        }\n    }\n    \n    // Side B crystals\n    for(i = [-20:4:20]) {\n        for(j = [-15:5:15]) {\n            if(abs(i-j) % 3 == 0) {\n                crystal(21, i, j);\n                crystal(-21, i, j);\n            }\n        }\n    }\n    \n    // Bottom indentations for stacking\n    translate([0, 0, -20])\n    difference() {\n        cube([46, 46, 5], center = true);\n        for(x = [-15:15:15]) {\n            for(y = [-15:15:15]) {\n                translate([x, y, 0])\n                    cylinder(h=6, r=4, center=true);\n            }\n        }\n    }\n    \n    // Glossy top surface\n    translate([0, 0, 25])\n    scale([1.1, 1.1, 0.3])\n        sphere(15);\n}",
    "renders": true
  },
  {
    "food_item": "brittle",
    "openscad_code": "// Peanut brittle bar - realistic style with medium complexity\n// Overall dimensions: 80mm x 40mm x 10mm\n\nmodule peanut() {\n    // Individual peanut half - slightly irregular shape\n    color(\"#D2B48C\") \n    union() {\n        sphere(d=4.2, $fn=12);\n        translate([0.3, 0.2, 0.8]) sphere(d=3.8, $fn=12);\n        translate([-0.4, -0.3, 0.6]) sphere(d=3.6, $fn=12);\n    }\n}\n\nmodule peanut_cluster(x, y, z, angle) {\n    // Cluster of 2-3 peanuts in realistic arrangement\n    translate([x, y, z]) rotate([0, 0, angle]) {\n        peanut();\n        translate([2.8, -1.2, 0.8]) rotate([15, 0, 25]) peanut();\n        if ((x + y) % 3 == 0) {\n            translate([-2.5, 1.5, 1.2]) rotate([-20, 10, -30]) peanut();\n        }\n    }\n}\n\nmodule brittle_base() {\n    // Main sugar base with irregular edges\n    color(\"#CD853F\") {\n        // Main rectangular base with rounded edges\n        union() {\n            // Base rectangle\n            translate([-40, -20, 0]) cube([80, 40, 8]);\n            \n            // Add slight irregularities to edges\n            for (i = [-35:10:35]) {\n                translate([i, -20.5, 2]) cube([8, 1.5, 2]);\n                translate([i, 19.5, 2]) cube([8, 1.5, 2]);\n            }\n            for (j = [-15:10:15]) {\n                translate([-40.5, j, 2]) cube([1.5, 8, 2]);\n                translate([39.5, j, 2]) cube([1.5, 8, 2]);\n            }\n        }\n        \n        // Create realistic surface texture\n        difference() {\n            // Main body\n            translate([-39, -19, 7.5]) cube([78, 38, 2.5]);\n            \n            // Random air bubbles and cracks\n            for (k = [1:30]) {\n                translate([\n                    -35 + 70 * (k * 73 % 100) / 100,\n                    -15 + 30 * (k * 37 % 100) / 100,\n                    9.8\n                ]) sphere(d=0.5 + (k % 3) * 0.3, $fn=8);\n            }\n        }\n    }\n}\n\nmodule sugar_crystals() {\n    // Small sugar crystals on surface for realistic texture\n    color(\"#E6D3A3\") {\n        for (i = [1:80]) {\n            translate([\n                -38 + 76 * (i * 13 % 100) / 100,\n                -18 + 36 * (i * 67 % 100) / 100,\n                9.5\n            ]) rotate([90, 0, i * 45]) \n            scale([0.3, 0.3, 0.8]) \n            cube([1, 1, 0.5]);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Base brittle layer\n    brittle_base();\n    \n    // Distribute peanuts throughout with realistic clustering\n    for (i = [1:18]) {\n        peanut_cluster(\n            -35 + 70 * (i * 17 % 100) / 100,\n            -17 + 34 * (i * 23 % 100) / 100,\n            8.2 + (i % 4) * 0.3,\n            i * 73\n        );\n    }\n    \n    // Surface sugar crystals\n    sugar_crystals();\n    \n    // Add broken edge detail on one corner\n    color(\"#CD853F\") {\n        translate([30, -15, 0]) {\n            difference() {\n                cube([12, 8, 8]);\n                translate([6, 4, 6]) rotate([0, 30, -15]) cube([15, 10, 10]);\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "food_item": "crepe",
    "openscad_code": "// Realistic Crepe - Medium Complexity\n// Dimensions: ~80mm diameter crepe with filling and toppings\n\n$fn = 32;\n\n// Main colors\ncolor_crepe = [0.94, 0.88, 0.78];\ncolor_chocolate = [0.45, 0.26, 0.15];\ncolor_strawberry = [0.98, 0.36, 0.36];\ncolor_powder = [0.95, 0.95, 0.95];\n\n// Base crepe shape\nmodule crepe_base() {\n    difference() {\n        // Main crepe disc\n        color(color_crepe)\n        cylinder(h = 3, r = 40, center = true);\n        \n        // Curled edge detail\n        for(i = [0:30:359]) {\n            rotate([0, 0, i])\n            translate([35, 0, 1.5])\n            scale([1, 1.5, 1])\n            sphere(r = 3);\n        }\n    }\n}\n\n// Crepe surface texture\nmodule crepe_texture() {\n    for(i = [0:15:359]) {\n        rotate([0, 0, i])\n        for(j = [0:5:35]) {\n            translate([j, 0, 1.51])\n            color(color_crepe * 0.9)\n            sphere(r = 0.5);\n        }\n    }\n}\n\n// Chocolate filling\nmodule chocolate_filling() {\n    color(color_chocolate)\n    translate([0, 0, 1.5])\n    cylinder(h = 2, r = 30);\n}\n\n// Strawberry slices\nmodule strawberry_slices() {\n    for(i = [0:45:359]) {\n        rotate([0, 0, i])\n        translate([20, 0, 3.5])\n        scale([1, 0.6, 0.2])\n        color(color_strawberry)\n        sphere(r = 3);\n    }\n}\n\n// Folded crepe edges\nmodule folded_edges() {\n    for(i = [0:120:359]) {\n        rotate([0, 0, i])\n        translate([0, -15, 1.5])\n        rotate([0, 0, 30])\n        color(color_crepe)\n        linear_extrude(height = 4, center = true)\n        polygon(points = [[0, 0], [25, -5], [25, 5]]);\n    }\n}\n\n// Powdered sugar\nmodule powdered_sugar() {\n    for(i = [0:20:359]) {\n        rotate([0, 0, i])\n        for(j = [0:10:30]) {\n            translate([j, 0, 4.5])\n            color(color_powder)\n            sphere(r = 0.3);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    crepe_base();\n    crepe_texture();\n    chocolate_filling();\n    strawberry_slices();\n    folded_edges();\n    powdered_sugar();\n}",
    "renders": true
  },
  {
    "food_item": "blondie",
    "openscad_code": "$fn=30;\n\n// Blondie bar - realistic medium complexity\n// Dimensions: ~80mm x ~50mm x ~12mm\n\n// Main blondie base\nmodule blondie_base() {\n    color([0.9, 0.75, 0.55]) {\n        // Main body with rounded edges\n        difference() {\n            // Main cuboid\n            cube([80, 50, 10], center=true);\n            \n            // Rounded corners - negative space\n            translate([38, 23, 0]) cylinder(h=12, r=3, center=true);\n            translate([38, -23, 0]) cylinder(h=12, r=3, center=true);\n            translate([-38, 23, 0]) cylinder(h=12, r=3, center=true);\n            translate([-38, -23, 0]) cylinder(h=12, r=3, center=true);\n        }\n        \n        // Top surface dome for realistic baked appearance\n        translate([0, 0, 4.5]) \n            scale([1, 0.7, 0.3]) \n                sphere(25, center=true);\n    }\n}\n\n// Chocolate chip inclusions\nmodule chocolate_chips() {\n    color([0.3, 0.2, 0.15]) {\n        for(i=[1:25]) {\n            // Random positioning on top surface\n            translate([\n                -35 + (i * 73) % 70, \n                -20 + (i * 47) % 40, \n                6 + sin(i * 137.5) * 0.5\n            ]) \n                rotate([90, 0, i * 35])\n                    scale([1, 0.7, 0.4])\n                        sphere(1.5);\n        }\n    }\n}\n\n// Surface texture for baked appearance\nmodule surface_texture() {\n    color([0.85, 0.7, 0.5]) {\n        for(y=[-20:5:20]) {\n            for(x=[-35:7:35]) {\n                translate([x + sin(y) * 2, y + cos(x) * 1.5, 5.5])\n                    sphere(0.8, $fn=8);\n            }\n        }\n    }\n}\n\n// Edge browning\nmodule edge_browning() {\n    color([0.7, 0.55, 0.4]) {\n        // Top edge browning\n        difference() {\n            translate([0, 0, 5]) \n                cube([82, 52, 0.5], center=true);\n            translate([0, 0, 5.1]) \n                cube([78, 48, 0.5], center=true);\n        }\n        \n        // Side edge browning\n        for(side=[-1,1]) {\n            translate([side * 40, 0, 2.5]) \n                cube([1, 48, 5], center=true);\n            translate([0, side * 25, 2.5]) \n                cube([78, 1, 5], center=true);\n        }\n    }\n}\n\n// Cracks from baking\nmodule baking_cracks() {\n    color([0.8, 0.65, 0.45]) {\n        // Central crack\n        translate([0, 0, 5.2])\n            rotate([0, 0, 15])\n                scale([1, 0.1, 0.1])\n                    cube([30, 1, 1], center=true);\n        \n        // Branching cracks\n        for(angle=[30, 60, 120, 150]) {\n            translate([sin(angle) * 10, cos(angle) * 8, 5.2])\n                rotate([0, 0, angle])\n                    scale([0.7, 0.08, 0.08])\n                        cube([15, 1, 1], center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    blondie_base();\n    chocolate_chips();\n    surface_texture();\n    edge_browning();\n    baking_cracks();\n}",
    "renders": true
  },
  {
    "food_item": "praline",
    "openscad_code": "// Praline - Realistic style, medium complexity\n// A classic chocolate praline with nut filling and textured surface\n\n// Main parameters\npraline_size = 40; // Overall diameter in mm\nheight = 25; // Height of the praline\nwall_thickness = 2.5; // Chocolate shell thickness\nnut_count = 8; // Number of hazelnut pieces visible on top\n\n// Colors\nchocolate_color = \"#3E2723\"; // Dark chocolate\nfilling_color = \"#D4A574\"; // Hazelnut cream\nnut_color = \"#8B4513\"; // Hazelnut\n\n// Main module\nmodule praline() {\n    // Chocolate shell - hollowed dome\n    difference() {\n        // Outer dome\n        color(chocolate_color)\n        scale([1, 1, 0.8])\n        sphere(d = praline_size);\n        \n        // Inner cavity\n        translate([0, 0, -1]) // Small offset for proper shell\n        scale([1, 1, 0.75])\n        sphere(d = praline_size - wall_thickness * 2);\n    }\n    \n    // Flatten the bottom\n    difference() {\n        union() {\n            // Bottom base\n            color(chocolate_color)\n            translate([0, 0, -height/2])\n            cylinder(h = wall_thickness, d = praline_size * 0.95);\n            \n            // Top dome with texture\n            color(chocolate_color)\n            translate([0, 0, wall_thickness/2])\n            scale([1, 1, 0.7])\n            sphere(d = praline_size);\n        }\n        \n        // Remove bottom hemisphere\n        difference() {\n            cube([praline_size * 2, praline_size * 2, height], center = true);\n            translate([0, 0, -height])\n            sphere(d = praline_size * 1.2);\n        }\n    }\n    \n    // Nut filling visible at bottom\n    color(filling_color)\n    translate([0, 0, -height/2 + wall_thickness/2])\n    cylinder(h = wall_thickness * 1.5, d = praline_size - wall_thickness * 4);\n    \n    // Hazelnut pieces on top\n    for(i = [0: nut_count-1]) {\n        rotate([0, 0, i * (360/nut_count)])\n        translate([praline_size * 0.35, 0, height * 0.3])\n        rotate([45, 0, 0])\n        scale([0.7, 1, 0.5])\n        nut_piece();\n    }\n    \n    // Chocolate texture pattern\n    texture_pattern();\n}\n\n// Hazelnut piece module\nmodule nut_piece() {\n    color(nut_color)\n    difference() {\n        sphere(d = 6);\n        \n        // Nut texture\n        for(i = [0: 3]) {\n            rotate([0, 0, i * 45])\n            translate([0, 0, -1])\n            cube([7, 1, 3], center = true);\n        }\n    }\n}\n\n// Surface texture pattern\nmodule texture_pattern() {\n    color(chocolate_color)\n    for(i = [0: 15]) {\n        a = i * (360/15);\n        for(j = [0: 5]) {\n            r = praline_size/2 - j * 3;\n            translate([r * cos(a), r * sin(a), height * 0.6 - j * 0.5])\n            sphere(d = 1.2);\n        }\n    }\n}\n\n// Render the praline\npraline();",
    "renders": true
  },
  {
    "food_item": "tiramisu",
    "openscad_code": "// Tiramisu 3D model - realistic style\n// Dimensions: 80x50x35mm\n\n// Colors\n$fa = 1;\n$fs = 0.5;\n\n// Main tiramisu block\nmodule tiramisu_block() {\n    // Bottom sponge layer\n    color([0.95, 0.85, 0.65]) \n    cube([80, 50, 8]);\n    \n    // Coffee-soaked appearance\n    for(i = [0:5:75]) {\n        for(j = [0:5:45]) {\n            color([0.5, 0.3, 0.2]) \n            translate([i+2, j+2, 8.1])\n            cylinder(h=0.5, d=3, $fn=12);\n        }\n    }\n    \n    // Mascarpone layer\n    color([0.98, 0.95, 0.92]) \n    translate([0, 0, 8])\n    cube([80, 50, 12]);\n    \n    // Second sponge layer\n    color([0.95, 0.85, 0.65]) \n    translate([0, 0, 20])\n    cube([80, 50, 8]);\n    \n    // Additional coffee spots\n    for(i = [0:7:73]) {\n        for(j = [0:7:43]) {\n            color([0.5, 0.3, 0.2]) \n            translate([i+3, j+3, 28.1])\n            cylinder(h=0.5, d=2.5, $fn=12);\n        }\n    }\n    \n    // Cocoa powder layer\n    color([0.4, 0.2, 0.1]) \n    translate([0, 0, 28])\n    cube([80, 50, 1]);\n}\n\n// Cocoa powder texture\nmodule cocoa_texture() {\n    for(i = [0:3:77]) {\n        for(j = [0:3:47]) {\n            translate([i, j, 29])\n            scale([1, 1, 0.3])\n            sphere(d=1.5);\n        }\n    }\n}\n\n// Chocolate shavings\nmodule chocolate_shavings() {\n    for(i = [0:10:70]) {\n        for(j = [0:10:40]) {\n            translate([i+5, j+5, 30])\n            rotate([0, 0, i*30])\n            scale([1, 0.3, 0.1])\n            cylinder(h=8, d=2, $fn=6);\n        }\n    }\n}\n\n// Assemble tiramisu\nunion() {\n    tiramisu_block();\n    cocoa_texture();\n    chocolate_shavings();\n}",
    "renders": true
  },
  {
    "food_item": "strudel",
    "openscad_code": "// Apple strudel with realistic details\n// Wall thickness: 2mm for 3D printing\n\n// Colors\n$fn = 24;\n\n// Base strudel body\nmodule strudel_body() {\n    color([0.85, 0.65, 0.45]) {\n        // Main roll - slightly flattened cylinder\n        scale([1, 0.7, 1])\n        cylinder(h = 80, r1 = 20, r2 = 18);\n    }\n}\n\n// End caps\nmodule strudel_ends() {\n    color([0.85, 0.65, 0.45]) {\n        // Left end cap\n        translate([-20, 0, 0])\n        scale([1, 0.7, 1])\n        sphere(r = 20);\n        \n        // Right end cap\n        translate([20, 0, 0])\n        scale([1, 0.7, 1])\n        sphere(r = 18);\n    }\n}\n\n// Pastry layers visible at cuts\nmodule pastry_layers() {\n    color([0.9, 0.8, 0.6]) {\n        // Create spiral layers inside\n        for (i = [0:5:35]) {\n            rotate([0, 90, 0])\n            translate([0, 0, -40 + i])\n            difference() {\n                cylinder(h = 2, r = 20 - (i * 0.4), center = true);\n                cylinder(h = 3, r = 20 - (i * 0.4) - 2, center = true);\n            }\n        }\n    }\n}\n\n// Apple filling showing through cuts\nmodule apple_filling() {\n    color([0.7, 0.5, 0.3]) {\n        // Small cubes for diced apple texture\n        for (i = [0:10:70]) {\n            for (j = [-10:5:10]) {\n                translate([i - 35, j, -5 + sin(i) * 3])\n                cube([2, 2, 2], center = true);\n            }\n        }\n    }\n}\n\n// Raisins\nmodule raisins() {\n    color([0.3, 0.2, 0.1]) {\n        for (i = [0:15:60]) {\n            for (j = [-8:8:8]) {\n                translate([i - 30, j, sin(i * 2) * 4])\n                sphere(r = 1.5);\n            }\n        }\n    }\n}\n\n// Powdered sugar on top\nmodule powdered_sugar() {\n    color([0.95, 0.95, 0.95]) {\n        // Random small dots for sugar\n        for (i = [-15:3:15]) {\n            for (j = [-8:4:8]) {\n                translate([i, j, 40])\n                sphere(r = 0.5);\n            }\n        }\n    }\n}\n\n// Pastry texture lines\nmodule pastry_texture() {\n    color([0.8, 0.6, 0.4]) {\n        // Diagonal score marks\n        for (i = [-20:2:20]) {\n            rotate([0, 90, 0])\n            translate([0, 0, i])\n            cube([0.5, 0.5, 45], center = true);\n        }\n    }\n}\n\n// Assemble the strudel\nstrudel_body();\nstrudel_ends();\ntranslate([0, 0, 20]) pastry_layers();\ntranslate([0, 0, 15]) apple_filling();\ntranslate([0, 0, 15]) raisins();\ntranslate([0, 0, 0]) pastry_texture();\npowdered_sugar();",
    "renders": true
  },
  {
    "food_item": "baklava",
    "openscad_code": "// Baklava - Traditional Middle-Eastern layered pastry\n// Features: phyllo layers, nut filling, diamond cut pattern, honey glaze\n\n// Main dimensions\nbaklava_width = 60;\nbaklava_length = 70;\nbaklava_height = 15;\nlayer_thickness = 0.8;\nnut_layer_thickness = 2;\n\n// Phyllo layer module\nmodule phyllo_layer(width, length, thickness) {\n    color(\"wheat\")\n    cube([width, length, thickness], center=true);\n}\n\n// Nut filling module with texture\nmodule nut_filling(width, length, thickness) {\n    color(\"saddlebrown\")\n    difference() {\n        cube([width, length, thickness], center=true);\n        \n        // Create rough texture on top\n        for (x = [-width/2+2 : 4 : width/2-2]) {\n            for (y = [-length/2+2 : 4 : length/2-2]) {\n                translate([x, y, thickness/2-0.1])\n                sphere(r=0.5, $fn=8);\n            }\n        }\n    }\n}\n\n// Diamond cut pattern on top\nmodule diamond_pattern(width, length, depth) {\n    color(\"goldenrod\")\n    for (x = [-width/2+5 : 10 : width/2-5]) {\n        for (y = [-length/2+5 : 10 : length/2-5]) {\n            translate([x, y, depth/2])\n            rotate([0, 0, 45])\n            linear_extrude(height=depth)\n            square([8, 8], center=true);\n        }\n    }\n}\n\n// Honey glaze drips\nmodule honey_glaze() {\n    color(\"darkgoldenrod\", 0.7)\n    for (i = [0 : 45 : 360]) {\n        rotate([0, 0, i])\n        translate([baklava_width/3, baklava_length/3, baklava_height/2+0.5])\n        cylinder(h=3, r1=1.5, r2=2.5, $fn=8);\n    }\n}\n\n// Main assembly\nunion() {\n    // Create multiple phyllo layers\n    for (i = [-baklava_height/2 : layer_thickness : baklava_height/2-layer_thickness]) {\n        translate([0, 0, i])\n        phyllo_layer(baklava_width, baklava_length, layer_thickness);\n    }\n    \n    // Add nut filling layers\n    translate([0, 0, -baklava_height/4])\n    nut_filling(baklava_width-2, baklava_length-2, nut_layer_thickness);\n    \n    translate([0, 0, 0])\n    nut_filling(baklava_width-2, baklava_length-2, nut_layer_thickness);\n    \n    translate([0, 0, baklava_height/4])\n    nut_filling(baklava_width-2, baklava_length-2, nut_layer_thickness);\n    \n    // Top phyllo layer with diamond cuts\n    translate([0, 0, baklava_height/2-layer_thickness/2])\n    phyllo_layer(baklava_width, baklava_length, layer_thickness);\n    \n    // Diamond pattern cuts\n    translate([0, 0, baklava_height/2-layer_thickness/2])\n    diamond_pattern(baklava_width, baklava_length, layer_thickness);\n    \n    // Honey glaze\n    honey_glaze();\n    \n    // Side details - crispy edges\n    color(\"goldenrod\")\n    for (side = [0, 1]) {\n        mirror([0, side, 0])\n        translate([0, baklava_length/2+0.5, 0])\n        cube([baklava_width, 1, baklava_height], center=false);\n    }\n    \n    for (side = [0, 1]) {\n        mirror([side, 0, 0])\n        translate([baklava_width/2+0.5, 0, 0])\n        cube([1, baklava_length, baklava_height], center=false);\n    }\n}",
    "renders": true
  },
  {
    "food_item": "profiterole",
    "openscad_code": "// Profiterole - realistic style with medium complexity\n// A choux pastry ball filled with cream and topped with chocolate ganache\n\n// Parameters\nprof_size = 45;           // Main pastry diameter\nwall_thickness = 1.5;     // Wall thickness for 3D printing\ncream_color = \"lemonchiffon\";\npastry_color = \"wheat\";\nchocolate_color = \"saddlebrown\";\n\n// Main profiterole module\nmodule profiterole() {\n    // Base choux pastry shell\n    difference() {\n        // Outer pastry sphere\n        color(pastry_color) \n        sphere(d = prof_size, $fn = 64);\n        \n        // Hollow out the inside\n        translate([0, 0, -wall_thickness/2])\n            sphere(d = prof_size - 2*wall_thickness, $fn = 64);\n        \n        // Flatten bottom slightly for printing\n        translate([0, 0, -prof_size/2 - 1])\n            cube([prof_size*2, prof_size*2, prof_size], center = true);\n    }\n    \n    // Add pastry texture - small bumps on surface\n    for(i = [0:15]) {\n        rotate([0, 0, i*24 + 12])\n            translate([0, prof_size/2 - 2, 0])\n                rotate([90, 0, 0])\n                    scale([1, 1, 0.6])\n                        sphere(d = 3 + sin(i*3)*1.5, $fn = 16);\n    }\n    \n    // Cream filling visible from top\n    translate([0, 0, prof_size/4])\n        color(cream_color)\n        difference() {\n            sphere(d = prof_size - 6, $fn = 48);\n            translate([0, 0, -prof_size/4])\n                cube([prof_size, prof_size, prof_size/2], center = true);\n        }\n    \n    // Chocolate ganache topping\n    color(chocolate_color)\n    difference() {\n        // Main ganache dome\n        translate([0, 0, prof_size/2 - 2])\n            scale([1, 1, 0.3])\n                sphere(d = prof_size - 4, $fn = 64);\n        \n        // Cut to fit top curve\n        translate([0, 0, prof_size/2 - 8])\n            cube([prof_size, prof_size, 10], center = true);\n        \n        // Drizzle effect\n        for(j = [0:5]) {\n            rotate([0, 0, j*60])\n                translate([prof_size/4, 0, prof_size/2 - 1])\n                    rotate([90, 0, 30])\n                        cylinder(h = 12, r1 = 2, r2 = 0.5, $fn = 8);\n        }\n    }\n    \n    // Powdered sugar dusting effect\n    for(k = [0:20]) {\n        rotate([0, 0, k*18])\n            translate([prof_size/2 * cos(k*3), prof_size/2 * sin(k*3), prof_size/2 - 0.5])\n                color(\"white\", 0.7)\n                sphere(d = 0.5 + sin(k*5)*0.3, $fn = 8);\n    }\n}\n\n// Create the profiterole\nprofiterole();",
    "renders": true
  },
  {
    "food_item": "beignet",
    "openscad_code": "// Beignet - New Orleans style square doughnut with powdered sugar\n// Overall dimensions: 60mm x 60mm x 25mm\n// 3D printable with no overhangs\n\n// Main dough body with pillowy inflated shape\nmodule beignet_body() {\n    // Create base shape with rounded top\n    difference() {\n        // Main pillow shape using rounded cube\n        minkowski() {\n            cube([50, 50, 15], center = true);\n            sphere(r = 8, $fn = 20);\n        }\n        \n        // Hollow out center for realistic thickness\n        scale([0.85, 0.85, 0.75])\n            minkowski() {\n                cube([50, 50, 15], center = true);\n                sphere(r = 6, $fn = 20);\n            }\n    }\n}\n\n// Create air pockets inside dough for realistic texture\nmodule internal_bubbles() {\n    // Random small bubbles throughout dough\n    for (i = [1:12]) {\n        translate([\n            rands(-20, 20, 1)[0],\n            rands(-20, 20, 1)[0],\n            rands(-8, 8, 1)[0]\n        ]) {\n            sphere(r = rands(1.5, 3.5, 1)[0], $fn = 12);\n        }\n    }\n}\n\n// Create slight imperfections on surface\nmodule surface_imperfections() {\n    // Small dents and bumps on surface\n    for (i = [1:8]) {\n        translate([\n            rands(-22, 22, 1)[0],\n            rands(-22, 22, 1)[0],\n            10 + rands(-2, 2, 1)[0]\n        ]) {\n            scale([1, 1, 0.3])\n                sphere(r = rands(1, 2.5, 1)[0], $fn = 10);\n        }\n    }\n}\n\n// Generate powdered sugar coating\nmodule powdered_sugar() {\n    // Random sugar crystals on surface\n    for (i = [1:60]) {\n        translate([\n            rands(-25, 25, 1)[0],\n            rands(-25, 25, 1)[0],\n            12 + rands(0, 3, 1)[0]\n        ]) {\n            // Tiny cubes rotated randomly for crystal appearance\n            rotate([rands(0, 90, 1)[0], rands(0, 90, 1)[0], rands(0, 90, 1)[0]])\n                scale([0.2, 0.2, 0.1])\n                    cube([1, 1, 1], center = true);\n        }\n    }\n}\n\n// Create beignet with all components\nmodule beignet() {\n    // Main dough - golden brown color\n    color([0.82, 0.65, 0.35]) {\n        difference() {\n            beignet_body();\n            // Add internal bubbles for texture\n            translate([0, 0, -5])\n                internal_bubbles();\n        }\n    }\n    \n    // Add surface imperfections\n    color([0.78, 0.61, 0.32]) {\n        surface_imperfections();\n    }\n    \n    // Powdered sugar coating - white\n    color([0.98, 0.98, 0.95, 0.8]) {\n        powdered_sugar();\n    }\n}\n\n// Render the beignet\nbeignet();",
    "renders": true
  },
  {
    "food_item": "churro",
    "openscad_code": "// Realistic Churro with Cinnamon-Sugar Coating\n// Medium complexity - 3D printable\n\n$fn = 32;  // Smooth curves for printing\n\n// Main churro parameters\nchurro_length = 80;\nchurro_diameter = 12;\nridge_height = 1.5;\nridge_count = 8;\nsugar_grain_size = 0.4;\n\n// Color definitions\nchurro_color = \"#B8860B\";  // Dark golden brown\nsugar_color = \"#F5F5DC\";   // Creamy white\ncinnamon_color = \"#8B4513\";  // Cinnamon brown\n\n// Create a single churro with ridges\nmodule churro_body() {\n    color(churro_color) {\n        // Main cylinder body\n        difference() {\n            cylinder(h = churro_length, d = churro_diameter, center = true);\n            \n            // Hollow center for printing\n            translate([0, 0, -churro_length/2 - 1])\n                cylinder(h = churro_length + 2, d = churro_diameter - 4, center = false);\n        }\n        \n        // Create ridges along the length\n        for (i = [0:ridge_count-1]) {\n            rotate([0, 0, i * (360/ridge_count)]) {\n                translate([churro_diameter/2 - ridge_height/2, 0, 0])\n                    rotate([0, 90, 0])\n                        cylinder(h = churro_length, d = ridge_height, center = true);\n            }\n        }\n        \n        // Tapered ends\n        translate([0, 0, churro_length/2])\n            cylinder(h = 5, d1 = churro_diameter, d2 = churro_diameter/2, center = false);\n        \n        translate([0, 0, -churro_length/2])\n            cylinder(h = 5, d1 = churro_diameter, d2 = churro_diameter/2, center = false);\n    }\n}\n\n// Create sugar coating texture\nmodule sugar_coating() {\n    color(sugar_color) {\n        // Random sugar grains on surface\n        for (i = [0:200]) {\n            angle = rands(0, 360, 1)[0];\n            height = rands(-churro_length/2 + 5, churro_length/2 - 5, 1)[0];\n            radius = churro_diameter/2 + 0.2;\n            \n            rotate([0, 0, angle])\n                translate([radius * cos(rands(0, 360, 1)[0]), \n                          radius * sin(rands(0, 360, 1)[0]), \n                          height])\n                    sphere(d = sugar_grain_size);\n        }\n    }\n    \n    // Cinnamon streaks\n    color(cinnamon_color) {\n        for (i = [0:50]) {\n            angle = rands(0, 360, 1)[0];\n            height = rands(-churro_length/2 + 5, churro_length/2 - 5, 1)[0];\n            radius = churro_diameter/2 + 0.1;\n            \n            rotate([0, 0, angle])\n                translate([radius * cos(rands(0, 360, 1)[0]), \n                          radius * sin(rands(0, 360, 1)[0]), \n                          height])\n                    sphere(d = sugar_grain_size * 1.5);\n        }\n    }\n}\n\n// Create slight bend for realistic shape\nmodule bent_churro() {\n    // Create a gentle curve\n    for (i = [0:churro_length/2]) {\n        z_pos = -churro_length/2 + i * 2;\n        x_offset = sin(z_pos * 3.14159 / churro_length) * 3;\n        \n        translate([x_offset, 0, z_pos])\n            rotate([0, 0, x_offset])\n                intersection() {\n                    translate([0, 0, -1])\n                        cylinder(h = 2.1, d = churro_diameter + 0.5, center = true);\n                    churro_body();\n                }\n    }\n}\n\n// Assemble the complete churro\ntranslate([0, 0, 0])\n    union() {\n        // Main churro body\n        rotate([90, 0, 0])\n            bent_churro();\n            \n        // Sugar coating\n        rotate([90, 0, 0])\n            sugar_coating();\n    }",
    "renders": true
  },
  {
    "food_item": "fritter",
    "openscad_code": "// Realistic Apple Fritter - 3D printable model\n// Medium complexity with surface texture and apple pieces\n\n$fn = 36;\n\n// Fritter parameters\nfritter_diameter = 70;\nfritter_thickness = 15;\napple_piece_size = 8;\ncrust_thickness = 2;\ncrust_bump_height = 1.5;\n\n// Colors\ncrust_color = [0.82, 0.65, 0.45];\napple_color = [0.85, 0.65, 0.55];\nglaze_color = [0.95, 0.9, 0.78];\ncinnamon_color = [0.6, 0.4, 0.25];\n\n// Base fritter shape\nmodule fritter_base() {\n    difference() {\n        // Main fritter body\n        scale([1, 0.9, 0.3])\n            sphere(d = fritter_diameter);\n        \n        // Hollow center for 3D printing\n        translate([0, 0, -2])\n            scale([1, 0.9, 0.35])\n                sphere(d = fritter_diameter - 8);\n    }\n}\n\n// Apple pieces embedded in fritter\nmodule apple_pieces() {\n    color(apple_color) {\n        for(i = [0:15]) {\n            angle = i * 45 + (i % 2) * 22.5;\n            radius = (fritter_diameter/2 - 10) * (0.6 + sin(i*3)/3);\n            translate([\n                radius * cos(angle),\n                radius * sin(angle),\n                -3 + (i % 3) * 1.5\n            ]) {\n                scale([1, 0.7, 0.7])\n                    sphere(d = apple_piece_size);\n            }\n        }\n    }\n}\n\n// Crust texture with bumps\nmodule crust_texture() {\n    color(crust_color) {\n        difference() {\n            // Main crust layer\n            scale([1, 0.9, 0.35])\n                sphere(d = fritter_diameter + crust_thickness);\n            \n            // Cut to match base shape\n            scale([1, 0.9, 0.32])\n                sphere(d = fritter_diameter);\n            \n            // Add texture bumps\n            for(i = [0:30]) {\n                angle = i * 25 + (i % 3) * 10;\n                radius = (fritter_diameter/2 - 5) * (0.8 + cos(i*2)/4);\n                translate([\n                    radius * cos(angle),\n                    radius * sin(angle),\n                    4 + sin(i*3) * 0.5\n                ]) {\n                    sphere(d = crust_bump_height * 2);\n                }\n            }\n        }\n    }\n}\n\n// Sugar glaze drips\nmodule glaze_drips() {\n    color(glaze_color) alpha(0.8) {\n        for(i = [0:8]) {\n            angle = i * 45 + (i % 2) * 22.5;\n            radius = fritter_diameter/2 - 5;\n            translate([\n                radius * cos(angle),\n                radius * sin(angle),\n                4\n            ]) {\n                scale([1, 1, 0.3])\n                    cylinder(d1 = 6, d2 = 3, h = 3 + (i % 3) * 2);\n            }\n        }\n    }\n}\n\n// Cinnamon sugar sprinkle\nmodule cinnamon_sprinkles() {\n    color(cinnamon_color) {\n        for(i = [0:50]) {\n            angle = i * 32 + (i % 2) * 16;\n            radius = (fritter_diameter/2 - 8) * (0.7 + sin(i*5)/3);\n            translate([\n                radius * cos(angle),\n                radius * sin(angle),\n                5 + (i % 3) * 0.5\n            ]) {\n                rotate([90, 0, angle])\n                    scale([0.2, 0.2, 1.5])\n                        cylinder(d = 0.8, h = 1 + (i % 3));\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    fritter_base();\n    apple_pieces();\n    crust_texture();\n    glaze_drips();\n    cinnamon_sprinkles();\n}",
    "renders": true
  },
  {
    "food_item": "galette",
    "openscad_code": "// Realistic Galette (medium complexity)\n// Dimensions: 80mm diameter, 12mm thick\n\n$fn = 64;\n\n// Colors\ncolor_crust = \"#D2B48C\";\ncolor_filling = \"#8B4513\";\ncolor_apple = \"#FFB347\";\ncolor_pear = \"#FFF8DC\";\ncolor_seed = \"#8B4513\";\n\nmodule galette() {\n    // Base crust - slightly irregular disk\n    difference() {\n        scale([1, 1.1, 1]) \n            cylinder(h=3, d=80, $fn=32);\n        \n        // Random texture on bottom\n        for(i=[0:20]) {\n            translate([rand(i*3)-10, rand(i*5)-10, -0.5])\n                sphere(d=rand(i*7)+3);\n        }\n    }\n    \n    // Raised crust edge\n    difference() {\n        // Main raised edge\n        translate([0, 0, 3])\n            cylinder(h=5, d1=78, d2=74, $fn=32);\n        \n        // Remove center to create hollow\n        translate([0, 0, -1])\n            cylinder(h=7, d=65, $fn=32);\n            \n        // Create folded edge texture\n        for(a=[0:30:360]) {\n            rotate([0, 0, a+rand(a*2)*5])\n            translate([rand(a)*15+25, 0, 3])\n                rotate([90, 0, 0])\n                    cylinder(h=rand(a)+8, d1=6, d2=4, $fn=8);\n        }\n    }\n    \n    // Fruit filling layer\n    color(color_filling)\n    translate([0, 0, 3])\n        cylinder(h=4, d=64, $fn=32);\n    \n    // Apple slices arranged in spiral\n    for(i=[0:8]) {\n        angle = i * 45;\n        radius = 10 + i * 3;\n        color(color_apple)\n        translate([cos(angle)*radius, sin(angle)*radius, 7.5])\n            rotate([0, 0, angle + 90])\n            scale([1, 0.3, 0.2])\n                sphere(d=12);\n    }\n    \n    // Pear slices between apple\n    for(i=[0:7]) {\n        angle = i * 45 + 22.5;\n        radius = 15 + i * 2.5;\n        color(color_pear)\n        translate([cos(angle)*radius, sin(angle)*radius, 7.5])\n            rotate([0, 0, angle + 90])\n            scale([1.2, 0.4, 0.15])\n                sphere(d=10);\n    }\n    \n    // Central decorative pattern\n    for(a=[0:45:360]) {\n        color(color_apple)\n        rotate([0, 0, a])\n        translate([10, 0, 7.8])\n            cylinder(h=0.5, d=4, $fn=6);\n    }\n    \n    // Sugar crystals on top\n    for(i=[0:50]) {\n        color(\"#FFFFFF\")\n        translate([rand(i*123)*70-35, rand(i*456)*70-35, 8 + rand(i*789)*0.5])\n            sphere(d=0.5 + rand(i));\n    }\n    \n    // Almond slices\n    for(i=[0:12]) {\n        angle = i * 30;\n        color(\"#DEB887\")\n        translate([cos(angle)*20, sin(angle)*20, 8])\n            rotate([90, 0, angle])\n            scale([1, 0.2, 0.1])\n                cube([8, 3, 1], center=true);\n    }\n}\n\n// Helper function for pseudo-random\nfunction rand(seed) = (seed * 9301 + 49297) % 233280 / 233280;\n\n// Render the galette\ncolor(color_crust) galette();",
    "renders": true
  },
  {
    "food_item": "turnover",
    "openscad_code": "// Realistic Turnover (Empanada/Calzone style)\n// 3D printable with no overhangs\n\n// Colors\n$fa = 1;\n$fs = 0.5;\n\n// Main parameters\nturnover_length = 70;\nturnover_width = 50;\nturnover_height = 18;\ncrust_thickness = 2.5;\nseam_thickness = 1.5;\n\n// Create the turnover\nmodule turnover() {\n    // Main pastry body - half-circle extrusion\n    difference() {\n        // Outer shell\n        linear_extrude(height = turnover_height, convexity = 10)\n            offset(r = crust_thickness)\n                offset(r = -crust_thickness)\n                    circle(d = turnover_length);\n        \n        // Hollow interior\n        translate([0, 0, crust_thickness])\n            linear_extrude(height = turnover_height - crust_thickness*2, convexity = 10)\n                circle(d = turnover_length - crust_thickness*2);\n    }\n    \n    // Flatten to ellipse shape\n    scale([1, turnover_width/turnover_length, 1])\n        children();\n}\n\n// Create crimped edge pattern\nmodule crimped_edge() {\n    crimps = 18;\n    for(i = [0:crimps-1]) {\n        rotate([0, 0, i * 360/crimps])\n            translate([turnover_length/2 - seam_thickness/2, 0, turnover_height/2])\n                rotate([90, 0, 0])\n                    cylinder(h = seam_thickness*1.5, r1 = seam_thickness, r2 = 0.5, $fn = 6);\n    }\n}\n\n// Create surface texture (small bumps for pastry)\nmodule pastry_texture() {\n    texture_count = 30;\n    for(i = [0:texture_count-1]) {\n        for(j = [0:texture_count/2-1]) {\n            x = (i - texture_count/2) * 2.5;\n            y = (j - texture_count/4) * 2.5;\n            if(norm([x, y]) < turnover_length/2 - crust_thickness - 5) {\n                translate([x, y, turnover_height - 0.5])\n                    scale([1, turnover_width/turnover_length, 1])\n                        sphere(r = 0.3 + 0.2 * sin(i*2+j*3), $fn = 8);\n            }\n        }\n    }\n}\n\n// Create vent holes\nmodule vent_holes() {\n    holes = 3;\n    for(i = [0:holes-1]) {\n        angle = 45 + i * 45;\n        rotate([0, 0, angle])\n            translate([turnover_length/4, 0, turnover_height/2])\n                rotate([0, 90, 0])\n                    cylinder(h = turnover_height, r = 1.5, $fn = 12);\n    }\n}\n\n// Create filling that shows at edges\nmodule visible_filling() {\n    // Small gaps at seam showing filling\n    gap_count = 8;\n    for(i = [0:gap_count-1]) {\n        angle = i * 360/gap_count;\n        rotate([0, 0, angle])\n            translate([turnover_length/2 - 1, 0, turnover_height/2])\n                scale([1, 0.8, 1])\n                    sphere(r = 2.5);\n    }\n}\n\n// Assembly\ncolor(\"#D4A574\")  // Golden brown pastry color\nunion() {\n    turnover();\n    \n    // Only add texture to top surface\n    translate([0, 0, 0])\n        pastry_texture();\n    \n    // Sealed edge\n    color(\"#B8956A\")\n        crimped_edge();\n    \n    // Vent holes\n    color(\"#8B4513\")  // Darker cooked color\n        vent_holes();\n    \n    // Filling showing through\n    color(\"#7B3F00\")  // Brown filling color\n        visible_filling();\n}\n\n// Base for printing\ntranslate([0, 0, -1])\n    color(\"#D4A574\")\n        cylinder(h = 1, r = turnover_length/2 + 5, $fn = 64);",
    "renders": true
  },
  {
    "food_item": "cannoli",
    "openscad_code": "// Realistic Cannoli - Medium Complexity\n// Classic Italian pastry with textured shell and ricotta filling\n\n$fn = 32;\n\n// Main colors\nshell_color = \"#CD853F\";      // Golden brown\nfilling_color = \"#FFFAF0\";    // Creamy white\npowder_color = \"#FFFFFF\";     // Powdered sugar\nchocolate_color = \"#8B4513\";   // Dark chocolate\n\n// Shell texture module\nmodule shell_texture(radius, height) {\n    difference() {\n        cylinder(h=height, r=radius, center=true);\n        // Create textured surface with small holes\n        for(i=[0:15]) {\n            rotate([0, 0, i*22.5]) \n                translate([radius-1.5, 0, -height/2-1]) \n                    cylinder(h=height+2, r=0.8, $fn=6);\n        }\n    }\n}\n\n// Main cannoli shell\nmodule cannoli_shell() {\n    color(shell_color) {\n        difference() {\n            // Outer shell\n            rotate_extrude(angle=360, $fn=64)\n                translate([25, 0, 0]) \n                    circle(r=2.5);\n            \n            // Hollow center\n            rotate_extrude(angle=360, $fn=64)\n                translate([25, 0, 0]) \n                    circle(r=2);\n            \n            // End caps\n            translate([0, 0, -25]) \n                cylinder(h=2, r=24.5);\n            translate([0, 0, 25]) \n                cylinder(h=2, r=24.5);\n        }\n        \n        // Add shell texture on surface\n        for(z=[-20:5:20]) {\n            rotate([0, 0, z*2]) \n                translate([25, 0, z]) \n                    shell_texture(2.3, 4);\n        }\n    }\n}\n\n// Ricotta filling with texture\nmodule filling() {\n    color(filling_color) {\n        // Main filling body\n        difference() {\n            rotate_extrude(angle=360, $fn=64)\n                translate([24.5, 0, 0]) \n                    circle(r=1.8);\n            \n            // Hollow center for structure\n            rotate_extrude(angle=360, $fn=64)\n                translate([24.5, 0, 0]) \n                    circle(r=0.5);\n        }\n        \n        // Ricotta texture bumps\n        for(i=[0:8]) {\n            rotate([0, 0, i*45]) {\n                for(z=[-22:4:22]) {\n                    translate([24.5, 0, z]) \n                        sphere(r=0.3);\n                }\n            }\n        }\n    }\n}\n\n// Chocolate chip decorations\nmodule chocolate_chips() {\n    color(chocolate_color) {\n        for(i=[0:12]) {\n            angle = i*30;\n            offset = i*2;\n            rotate([0, 0, angle]) \n                translate([24.5, 0, -22+offset]) {\n                    scale([1.2, 0.8, 0.4]) \n                        sphere(r=0.5);\n                }\n        }\n    }\n}\n\n// Powdered sugar dusting\nmodule powdered_sugar() {\n    color(powder_color, 0.7) {\n        for(i=[0:20]) {\n            rotate([0, 0, i*18]) {\n                for(z=[-24:2:24]) {\n                    if(rands(0,1,1)[0] > 0.7) {\n                        translate([25+rands(-0.5,0.5,1)[0], \n                                  rands(-0.5,0.5,1)[0], \n                                  z+rands(-0.5,0.5,1)[0]]) \n                            sphere(r=0.1);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nmodule cannoli() {\n    cannoli_shell();\n    translate([0, 0, 0]) filling();\n    translate([0, 0, 0]) chocolate_chips();\n    translate([0, 0, 0]) powdered_sugar();\n}\n\n// Render the cannoli\ncannoli();",
    "renders": true
  },
  {
    "food_item": "bavarois",
    "openscad_code": "// Bavarois 3D model - realistic style, medium complexity\n// Overall dimensions: ~65mm diameter, ~55mm height\n\n$fn = 50;\n\n// Main colors\ncolor_bavarois = \"#FFF5E6\";\ncolor_strawberry = \"#E84855\";\ncolor_coulis = \"#CC2936\";\ncolor_chocolate = \"#4A2C2A\";\n\n// Base mold shape with slight taper\nmodule bavarois_base() {\n    difference() {\n        // Main dome shape from cylinder + sphere\n        union() {\n            cylinder(h = 25, r1 = 30, r2 = 32, center = false);\n            translate([0, 0, 20])\n            scale([1, 1, 0.7])\n            sphere(r = 35);\n        }\n        \n        // Hollow out the center\n        translate([0, 0, 3])\n        scale([0.85, 0.85, 0.9])\n        union() {\n            cylinder(h = 30, r1 = 30, r2 = 32, center = false);\n            translate([0, 0, 20])\n            scale([1, 1, 0.7])\n            sphere(r = 35);\n        }\n    }\n}\n\n// Bavarois custard texture pattern\nmodule custard_texture() {\n    difference() {\n        bavarois_base();\n        \n        // Small random indentations for texture\n        for (i = [0:30]) {\n            rotate([0, 0, i * 12])\n            translate([25 + sin(i * 3) * 5, 0, 15 + cos(i * 2) * 8])\n            sphere(r = 0.8);\n        }\n        \n        // Vertical striations\n        for (i = [0:35]) {\n            rotate([0, 0, i * 10])\n            translate([28, 0, 10])\n            cube([2, 0.5, 25]);\n        }\n    }\n}\n\n// Strawberry slices embedded in top\nmodule strawberry_slices() {\n    color(color_strawberry)\n    for (i = [0:4]) {\n        rotate([0, 0, i * 72])\n        translate([15, 0, 42])\n        rotate([90, 0, 0])\n        scale([0.8, 0.8, 0.3])\n        cylinder(h = 10, r = 6);\n    }\n    \n    // Strawberry seeds detail\n    color(\"#8B0000\")\n    for (i = [0:4]) {\n        rotate([0, 0, i * 72])\n        for (j = [0:5]) {\n            rotate([0, 0, j * 60])\n            translate([15, 0, 42])\n            rotate([90, 0, 0])\n            translate([sin(j * 60) * 3, cos(j * 60) * 3, -0.5])\n            sphere(r = 0.4);\n        }\n    }\n}\n\n// Strawberry coulis swirl on top\nmodule coulis_swirl() {\n    color(color_coulis)\n    translate([0, 0, 45])\n    for (i = [0:20]) {\n        rotate([0, 0, i * 18])\n        translate([sin(i * 2) * 8, cos(i * 2) * 8, 0])\n        sphere(r = 1.5);\n    }\n}\n\n// Chocolate decoration shards\nmodule chocolate_shards() {\n    color(color_chocolate)\n    for (i = [0:3]) {\n        rotate([0, 0, i * 120 + 30])\n        translate([0, 0, 48])\n        rotate([15 + i * 5, 0, 0])\n        cube([12, 2, 0.5], center = true);\n    }\n}\n\n// Assemble the complete bavarois\ntranslate([0, 0, 3])\ncolor(color_bavarois)\ncustard_texture();\n\nstrawberry_slices();\ncoulis_swirl();\nchocolate_shards();",
    "renders": true
  },
  {
    "food_item": "dacquoise",
    "openscad_code": "// Realistic Dacquoise - Medium Complexity\n// Features: layered meringue discs with almond pieces and cream filling\n\n// Color definitions\n$fn = 50;\n\nmodule dacquoise() {\n    // Main meringue layers\n    color(\"#F5F5DC\") {\n        // Bottom meringue disc with texture\n        difference() {\n            cylinder(h = 8, d = 80);\n            translate([0, 0, 7.5])\n                cylinder(h = 1, d = 78);\n        }\n        \n        // Add texture to top surface\n        for(i = [0:15]) {\n            rotate([0, 0, i * 24])\n                translate([30 + sin(i * 30) * 10, 0, 7.5])\n                    sphere(d = 2 + sin(i * 45) * 1);\n        }\n    }\n    \n    // Cream filling layer\n    color(\"#FFF8DC\") {\n        translate([0, 0, 8])\n            cylinder(h = 6, d = 76);\n    }\n    \n    // Top meringue disc\n    color(\"#F5F5DC\") {\n        translate([0, 0, 14])\n            difference() {\n                cylinder(h = 8, d = 78);\n                translate([0, 0, 7.5])\n                    cylinder(h = 1, d = 76);\n            }\n    }\n    \n    // Almond pieces on top\n    color(\"#DEB887\") {\n        // Random almond placement\n        for(i = [0:20]) {\n            angle = i * 137.5;\n            radius = 25 + (i % 3) * 8;\n            x = cos(angle) * radius;\n            y = sin(angle) * radius;\n            \n            translate([x, y, 22])\n                rotate([0, 0, angle])\n                    scale([1, 0.6, 0.3])\n                        sphere(d = 4 + (i % 2) * 2);\n        }\n        \n        // Almond pieces on sides\n        for(i = [0:40]) {\n            angle = i * 18;\n            height = (i % 3) * 2 + 10;\n            translate([cos(angle) * 39, sin(angle) * 39, height])\n                rotate([0, 0, angle])\n                    scale([0.8, 0.5, 0.3])\n                        sphere(d = 3);\n        }\n    }\n    \n    // Powdered sugar dusting\n    color(\"#FFFAF0\") {\n        for(i = [0:50]) {\n            angle = i * 73;\n            radius = 15 + (i % 30);\n            translate([cos(angle) * radius, sin(angle) * radius, 22.5])\n                sphere(d = 0.8);\n        }\n    }\n    \n    // Side decorations - piped cream rosettes\n    color(\"#FFF8DC\") {\n        for(i = [0:8]) {\n            angle = i * 45;\n            translate([cos(angle) * 38, sin(angle) * 38, 11])\n                cylinder(h = 2, d = 6);\n            translate([cos(angle) * 38, sin(angle) * 38, 13])\n                sphere(d = 4);\n        }\n    }\n}\n\n// Create the dacquoise\ndacquoise();",
    "renders": true
  },
  {
    "food_item": "croquembouche",
    "openscad_code": "// Croquembouche - Cone of cream puffs with caramel threads\n// Realistic style, medium complexity\n\n// Colors\n$custard = [1, 0.9, 0.7];\n$caramel = [0.8, 0.5, 0.2];\n$chocolate = [0.3, 0.15, 0];\n\n// Main module\nmodule croquembouche() {\n    // Base cream puffs in pyramid\n    cream_puff_pyramid();\n    \n    // Caramel threads connecting puffs\n    caramel_threads();\n    \n    // Decorative spun sugar top\n    spun_sugar_crown();\n}\n\n// Single cream puff with custard filling\nmodule cream_puff() {\n    color($custard) {\n        // Bottom half\n        difference() {\n            sphere(d=12, $fn=32);\n            translate([0, 0, 3])\n                sphere(d=11.5, $fn=32);\n        }\n        \n        // Custard center\n        translate([0, 0, 1])\n            color([1, 0.95, 0.8])\n            sphere(d=8, $fn=32);\n    }\n    \n    // Top dome\n    color($caramel) {\n        translate([0, 0, 2])\n            sphere(d=12, $fn=32);\n    }\n    \n    // Powdered sugar dusting\n    for(i=[0:15]) {\n        rotate([0, 0, i*24])\n        translate([rand(3,5), 0, rand(4,5.5)])\n            sphere(d=0.3, $fn=8);\n    }\n}\n\n// Create pyramid of puffs\nmodule cream_puff_pyramid() {\n    // Base layer (7 puffs)\n    for(i=[-3:3]) {\n        translate([i*13, 0, 0])\n            cream_puff();\n    }\n    \n    // Second layer (6 puffs)\n    for(i=[-2.5:2.5]) {\n        translate([i*13, 11.25, 11])\n            cream_puff();\n    }\n    \n    // Third layer (5 puffs)\n    for(i=[-2:2]) {\n        translate([i*13, 22.5, 22])\n            cream_puff();\n    }\n    \n    // Fourth layer (4 puffs)\n    for(i=[-1.5:1.5]) {\n        translate([i*13, 33.75, 33])\n            cream_puff();\n    }\n    \n    // Fifth layer (3 puffs)\n    for(i=[-1:1]) {\n        translate([i*13, 45, 44])\n            cream_puff();\n    }\n    \n    // Sixth layer (2 puffs)\n    for(i=[-0.5:0.5]) {\n        translate([i*13, 56.25, 55])\n            cream_puff();\n    }\n    \n    // Top puff\n    translate([0, 67.5, 66])\n        cream_puff();\n}\n\n// Caramel threads between puffs\nmodule caramel_threads() {\n    color($caramel) {\n        // Vertical threads\n        for(layer=[0:5]) {\n            y = layer * 11.25;\n            z = layer * 11;\n            count = 7 - layer;\n            for(i=[-(count-1)/2:(count-1)/2]) {\n                x = i * 13;\n                translate([x, y, z])\n                    cylinder(h=11, d1=1.5, d2=0.5, $fn=8);\n            }\n        }\n        \n        // Horizontal threads between adjacent puffs\n        for(layer=[0:5]) {\n            y = layer * 11.25;\n            z = layer * 11 + 5.5;\n            count = 7 - layer;\n            for(i=[-(count-1)/2+0.5:(count-1)/2-0.5]) {\n                x = i * 13;\n                translate([x, y, z])\n                    rotate([90, 0, 90])\n                    cylinder(h=13, d=1, $fn=8);\n            }\n        }\n        \n        // Diagonal threads\n        for(layer=[0:4]) {\n            y1 = layer * 11.25;\n            z1 = layer * 11 + 5.5;\n            y2 = (layer+1) * 11.25;\n            z2 = (layer+1) * 11 + 5.5;\n            count = 7 - layer;\n            \n            for(i=[-(count-1)/2:(count-1)/2-1]) {\n                x = i * 13;\n                dx = 6.5;\n                dy = 5.625;\n                dz = 5.5;\n                dist = sqrt(dx*dx + dy*dy + dz*dz);\n                \n                translate([x+6.5, y1+dy, z1+dz])\n                    rotate([atan2(dz, dy), 0, atan2(dx, sqrt(dy*dy+dz*dz))])\n                    cylinder(h=dist, d=0.8, $fn=6);\n            }\n        }\n    }\n}\n\n// Spun sugar crown decoration\nmodule spun_sugar_crown() {\n    color($caramel) {\n        // Base ring\n        translate([0, 67.5, 72])\n            rotate([90, 0, 0])\n            cylinder(h=3, r1=15, r2=12, $fn=32);\n        \n        // Spun sugar loops\n        for(i=[0:8]) {\n            rotate([0, 0, i*40])\n            translate([10, 67.5, 72])\n                rotate([0, 90, 0])\n                cylinder(h=20, d1=2, d2=0.5, $fn=8);\n            \n            rotate([0, 0, i*40+20])\n            translate([8, 67.5, 80])\n                rotate([0, 90, 0])\n                cylinder(h=15, d1=1.5, d2=0.5, $fn=8);\n        }\n        \n        // Top spiral\n        for(i=[0:20]) {\n            t = i/20;\n            angle = t * 360 * 2;\n            radius = 8 - t * 6;\n            height = 72 + t * 10;\n            \n            translate([cos(angle)*radius, 67.5 + sin(angle)*radius, height])\n                sphere(d=1, $fn=6);\n        }\n    }\n}\n\n// Helper function for random values\nfunction rand(min, max) = min + (max - min) * (sin(12345) * 0.5 + 0.5);\n\n// Render the croquembouche\ncroquembouche();",
    "renders": true
  },
  {
    "food_item": "charlotte",
    "openscad_code": "// Charlotte - Realistic Style (Medium Complexity)\n// A classic French charlotte with ladyfingers and vanilla cream filling\n\n// Colors\n$fa = 1; $fs = 0.4;\n\n// Parameters\ncharlotte_diameter = 65;\ncharlotte_height = 45;\nladyfinger_width = 8;\nladyfinger_thickness = 4;\ncream_thickness = 3;\nbase_thickness = 5;\n\n// Ladyfinger module\nmodule ladyfinger(height) {\n    color([0.92, 0.85, 0.72])\n    difference() {\n        // Main body with rounded top\n        union() {\n            translate([0, 0, height/2])\n                cube([ladyfinger_width, ladyfinger_thickness, height], center=true);\n            translate([0, 0, height])\n                sphere(ladyfinger_width/2);\n        }\n        \n        // Sugar texture pattern\n        for(i = [-1:1]) {\n            for(j = [-1:1]) {\n                translate([i*2.5, j*1.2, height-2])\n                    sphere(0.4);\n            }\n        }\n    }\n}\n\n// Ladyfinger ring\nmodule ladyfinger_ring() {\n    radius = charlotte_diameter/2 - ladyfinger_thickness/2;\n    count = 20;\n    \n    for(i = [0:count-1]) {\n        angle = i * 360/count;\n        translate([cos(angle)*radius, sin(angle)*radius, base_thickness])\n            rotate([0, 0, angle+90])\n                ladyfinger(charlotte_height - base_thickness);\n    }\n}\n\n// Cream filling\nmodule cream_filling() {\n    color([0.98, 0.95, 0.88]) {\n        // Main cream body\n        cylinder(h=charlotte_height-base_thickness-2, \n                 r1=charlotte_diameter/2-ladyfinger_thickness-2,\n                 r2=charlotte_diameter/2-ladyfinger_thickness-2);\n        \n        // Swirled top\n        for(i = [0:5]) {\n            rotate([0, 0, i*60])\n                translate([charlotte_diameter/6, 0, charlotte_height-base_thickness-2])\n                    rotate_extrude(angle=60)\n                        translate([charlotte_diameter/8, 0])\n                            circle(r=2);\n        }\n    }\n}\n\n// Bottom sponge base\nmodule sponge_base() {\n    color([0.85, 0.75, 0.60]) {\n        difference() {\n            cylinder(h=base_thickness, r=charlotte_diameter/2);\n            \n            // Air pockets for sponge texture\n            for(i = [0:30]) {\n                translate([rand_x(), rand_y(), base_thickness/2])\n                    sphere(1.5);\n            }\n        }\n    }\n}\n\n// Helper for random positions\nfunction rand_x() = (rands(-charlotte_diameter/2+5, charlotte_diameter/2-5, 1)[0]);\nfunction rand_y() = (rands(-charlotte_diameter/2+5, charlotte_diameter/2-5, 1)[0]);\n\n// Assembly\nunion() {\n    // Base sponge\n    sponge_base();\n    \n    // Ladyfinger wall\n    ladyfinger_ring();\n    \n    // Cream filling\n    translate([0, 0, base_thickness+2])\n        cream_filling();\n    \n    // Top ladyfinger decoration\n    translate([0, 0, charlotte_height-4])\n        rotate([0, 0, 30])\n            ladyfinger(8);\n}",
    "renders": true
  },
  {
    "food_item": "madeleine",
    "openscad_code": "// Madeleine Cookie - Realistic Style\n// Based on traditional French shell-shaped madeleine\n\n// Colors\nshell_color = \"#D4A574\";\ngolden_brown = \"#B8956A\";\nedge_color = \"#8B6F47\";\n\n// Main parameters\nlength = 80;\nwidth = 50;\nheight = 25;\nshell_thickness = 2;\n\n// Create the madeleine shell\nmodule madeleine_shell() {\n    difference() {\n        // Main shell body\n        color(shell_color)\n        scale([1, 0.8, 0.5])\n        sphere(d=width, $fn=100);\n        \n        // Hollow out the inside\n        translate([0, 0, -5])\n        scale([0.85, 0.75, 0.4])\n        sphere(d=width, $fn=100);\n    }\n}\n\n// Create the characteristic ridges\nmodule ridges() {\n    for(i = [1:8]) {\n        rotate([0, 0, i * 15 - 60])\n        translate([0, -width/4, 0])\n        color(golden_brown)\n        scale([1, 0.1, 0.3])\n        cylinder(h=height, d1=width/2, d2=width/3, $fn=3);\n    }\n}\n\n// Create the hump on the back\nmodule hump() {\n    translate([0, -width/4, height/2])\n    scale([1.2, 0.8, 0.6])\n    color(golden_brown)\n    sphere(d=width*0.7, $fn=50);\n}\n\n// Create edge detail\nmodule edge_detail() {\n    for(i = [0:35]) {\n        rotate([0, 0, i * 10])\n        translate([width/2 - 2, 0, 0])\n        color(edge_color)\n        scale([1, 0.3, 0.5])\n        cylinder(h=2, d=4, $fn=8);\n    }\n}\n\n// Create surface texture\nmodule surface_texture() {\n    for(i = [0:20]) {\n        for(j = [0:10]) {\n            translate([\n                (i - 10) * 3, \n                (j - 5) * 3, \n                height/2 + sin(i*5)*0.5 + cos(j*5)*0.5\n            ])\n            color(golden_brown)\n            sphere(d=1 + sin(i)*0.5, $fn=8);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Main shell\n    madeleine_shell();\n    \n    // Add ridges on the inside\n    ridges();\n    \n    // Add hump on back\n    hump();\n    \n    // Add edge detail\n    edge_detail();\n    \n    // Add surface texture for realistic appearance\n    surface_texture();\n}\n\n// Position for 3D printing (flat side down)\nrotate([0, 180, 0])\ntranslate([0, 0, -height/2])",
    "renders": true
  },
  {
    "food_item": "financier",
    "openscad_code": "// Realistic 3D-printable financier cake – medium complexity\n// Overall size ≈ 60 mm × 30 mm × 15 mm\n\n// Render settings\n$fn = 32;\n\n// Main color: golden-brown baked exterior\ncolor([0.72, 0.50, 0.35]) {\n\n    // Outer crust body – slightly domed bar with rounded edges\n    union() {\n        difference() {\n            // Overall bar shape\n            hull() {\n                translate([-30, -15, 0])\n                    sphere(5);\n                translate([30, 15, 0])\n                    sphere(5);\n                translate([-30, -15, 10])\n                    sphere(5);\n                translate([30, 15, 10])\n                    sphere(5);\n            }\n            // Carve out the bottom to flatten it for printing\n            translate([0, 0, -1])\n                cube([70, 40, 2], center = true);\n        }\n\n        // Top surface gentle dome\n        translate([0, 0, 10])\n            scale([1, 0.6, 0.2])\n                sphere(15);\n    }\n}\n\n// Almond flake inclusions on top surface\nmodule almond_flake() {\n    color([0.85, 0.70, 0.55])\n        rotate([90, 0, 90])\n            scale([1, 1, 0.2])\n                cylinder(h = 4, r1 = 1.8, r2 = 1.2);\n}\n\n// Place almond flakes randomly-ish along the top\nfor (i = [0 : 5]) {\n    angle = 360 / 6 * i + 10 * sin(i * 137.5);\n    radius = 8 + 5 * cos(i * 137.5);\n    translate([radius * cos(angle), radius * sin(angle), 12 + 0.5])\n        almond_flake();\n}\n\n// Tiny air pockets (bubbles) for realism – subtract small spheres\ncolor([0.72, 0.50, 0.35])\n    difference() {\n        children(0);\n        for (x = [-20 : 10 : 20])\n            for (y = [-10 : 8 : 10]) {\n                translate([x + 3 * sin(x * y), y + 2 * cos(x * y), 5 + 3 * cos(x * y)])\n                    sphere(0.8);\n            }\n    }",
    "renders": true
  },
  {
    "food_item": "tuile",
    "openscad_code": "// Tuile cookie - thin curved wafer with realistic texture\n// Size: ~80mm long, 30mm wide, 2-3mm thick\n\n// Parameters\ncookie_length = 80;\ncookie_width = 30;\ncookie_thickness = 2;\ncurve_height = 15;\nedge_thickness = 3;\n\n// Main cookie shape\nmodule tuile_shape() {\n    // Create basic flat oval shape\n    difference() {\n        // Main body\n        scale([1, 0.6, 1])\n        cylinder(h=cookie_thickness, r=cookie_width/2, $fn=50);\n        \n        // Taper ends\n        translate([cookie_length/2 - 5, 0, -1])\n            cube([10, cookie_width, cookie_thickness+2]);\n        translate([-cookie_length/2 + 5, 0, -1])\n            cube([10, cookie_width, cookie_thickness+2]);\n    }\n}\n\n// Create curved surface\nmodule curved_tuile() {\n    // Bend the flat shape into curved form\n    for(i = [0:5:cookie_length]) {\n        translate([i - cookie_length/2, 0, curve_height * sin(i*180/cookie_length)])\n            rotate([sin(i*180/cookie_length) * 20, 0, 0])\n            intersection() {\n                tuile_shape();\n                translate([i - cookie_length/2, 0, 0])\n                    cube([5, cookie_width, cookie_thickness]);\n            }\n    }\n}\n\n// Almond slices embedded in surface\nmodule almond_slices() {\n    color(\"#FFF8DC\")\n    for(i = [0:8:cookie_length-8]) {\n        for(j = [0:6:cookie_width-6]) {\n            if((i+j) % 3 == 0) {\n                translate([\n                    i - cookie_length/2 + (rand(i*3+j*7)-0.5)*3,\n                    j - cookie_width/2 + (rand(j*5+i*2)-0.5)*3,\n                    cookie_thickness + 0.5\n                ])\n                rotate([90, 0, rand(i*j)*360])\n                scale([1, 0.3, 0.1])\n                cylinder(h=3, r=2, $fn=6);\n            }\n        }\n    }\n}\n\n// Sugar crystal texture\nmodule sugar_texture() {\n    color(\"#FAFAD2\")\n    for(i = [0:3:cookie_length-3]) {\n        for(j = [0:3:cookie_width-3]) {\n            if((i+j) % 2 == 0) {\n                translate([\n                    i - cookie_length/2 + (rand(i+j)-0.5)*2,\n                    j - cookie_width/2 + (rand(j+i)-0.5)*2,\n                    cookie_thickness + 0.2\n                ])\n                sphere(r=0.3 + rand(i*j)*0.2, $fn=8);\n            }\n        }\n    }\n}\n\n// Edge ridges from baking\nmodule edge_details() {\n    color(\"#DEB887\")\n    for(i = [0:10:360]) {\n        rotate([0, 0, i])\n        translate([cookie_width/2 * 0.6 - 2, 0, cookie_thickness/2])\n        rotate([90, 0, 0])\n        cylinder(h=0.5, r=0.5, $fn=8);\n    }\n}\n\n// Helper for pseudo-random\nfunction rand(seed) = (sin(seed*123.456)+1)/2;\n\n// Assembly\ncolor(\"#D2B48C\") {\n    union() {\n        // Main curved cookie body\n        curved_tuile();\n        \n        // Add thickness variation\n        translate([0, 0, -0.5])\n        scale([1, 1, 0.8])\n        curved_tuile();\n    }\n}\n\n// Surface details\nalmond_slices();\nsugar_texture();\nedge_details();",
    "renders": true
  },
  {
    "food_item": "jellyroll",
    "openscad_code": "// Realistic Jellyroll - Medium Complexity\n// Dimensions: 80mm long, 30mm diameter\n\n$fn = 32;\n\n// Main colors\njelly_color = [0.9, 0.7, 0.6];\ncream_color = [0.95, 0.9, 0.85];\ncrust_color = [0.7, 0.5, 0.4];\n\n// Main jellyroll body\nmodule jellyroll_body() {\n    // Create the rolled base\n    rotate([90, 0, 0])\n    difference() {\n        union() {\n            // Outer sponge layer\n            color(crust_color)\n            difference() {\n                cylinder(h = 80, r = 15, center = true);\n                cylinder(h = 82, r = 13, center = true);\n            }\n            \n            // Inner cream layer\n            color(cream_color)\n            difference() {\n                cylinder(h = 78, r = 13, center = true);\n                cylinder(h = 80, r = 10, center = true);\n            }\n            \n            // Jelly filling\n            color(jelly_color)\n            difference() {\n                cylinder(h = 76, r = 10, center = true);\n                cylinder(h = 78, r = 8, center = true);\n            }\n            \n            // Spiral pattern\n            spiral_pattern();\n        }\n        \n        // Hollow center for printing\n        cylinder(h = 85, r = 8, center = true);\n    }\n}\n\n// Create spiral texture on the roll\nmodule spiral_pattern() {\n    for (i = [0:15:360]) {\n        rotate([0, 0, i])\n        translate([14, 0, 0])\n        color(crust_color)\n        cube([2, 0.5, 80], center = true);\n    }\n}\n\n// End caps with swirl pattern\nmodule end_cap(position) {\n    translate([0, 0, position])\n    color(crust_color)\n    union() {\n        // Main cap\n        cylinder(h = 2, r = 15, center = true);\n        \n        // Swirl details\n        for (i = [0:30:360]) {\n            rotate([0, 0, i])\n            translate([7, 0, 0])\n            cube([14, 1, 2], center = true);\n        }\n    }\n}\n\n// Sugar coating texture\nmodule sugar_coating() {\n    for (i = [0:10:350]) {\n        rotate([0, 0, i])\n        for (j = [-35:10:35]) {\n            translate([15.5, 0, j])\n            color([1, 1, 1])\n            sphere(r = 0.3);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    jellyroll_body();\n    end_cap(40);\n    end_cap(-40);\n    sugar_coating();\n}",
    "renders": true
  },
  {
    "food_item": "babka",
    "openscad_code": "// Babka OpenSCAD Model - Realistic Style, Medium Complexity\n// Traditional twisted babka with chocolate layers and crumb topping\n\n// Color definitions\nchocolate = [101, 67, 33];\ndough = [245, 222, 179];\ncrumb = [210, 180, 140];\n\n// Main babka module\nmodule babka() {\n    // Base loaf shape\n    difference() {\n        union() {\n            // Main loaf body\n            color(dough) \n            rounded_cube([60, 35, 35], 5);\n            \n            // Chocolate layers visible on sides\n            color(chocolate)\n            for(i = [-1, 1]) {\n                translate([i * 20, 0, -5])\n                cube([5, 38, 40]);\n            }\n        }\n        \n        // Hollow out center for 3D printing\n        translate([0, 0, -2])\n        rounded_cube([50, 25, 30], 3);\n    }\n    \n    // Top twisted pattern\n    rotate([0, 0, 45])\n    translate([0, 0, 17])\n    color(chocolate)\n    linear_extrude(height = 3)\n    union() {\n        // Twisted chocolate pattern\n        for(i = [-2:2]) {\n            translate([i * 8, 0, 0])\n            rotate([0, 0, i * 15])\n            scale([1, 0.3, 1])\n            circle(r = 20);\n        }\n    }\n    \n    // Crumb topping\n    color(crumb)\n    for(i = [1:20]) {\n        translate([\n            rand(-25, 25),\n            rand(-15, 15),\n            17.5\n        ])\n        scale([1, 1, 0.5])\n        sphere(r = rand(1, 3));\n    }\n    \n    // Chocolate drizzle lines\n    color(chocolate)\n    for(i = [1:8]) {\n        translate([\n            rand(-20, 20),\n            rand(-10, 10),\n            20\n        ])\n        rotate([90, 0, rand(0, 360)])\n        cylinder(h = rand(15, 25), r1 = 0.8, r2 = 0.4);\n    }\n}\n\n// Helper module for rounded cube\nmodule rounded_cube(size, radius) {\n    hull() {\n        for(dx = [0, 1], dy = [0, 1], dz = [0, 1]) {\n            translate([\n                dx * (size[0] - 2 * radius),\n                dy * (size[1] - 2 * radius),\n                dz * (size[2] - 2 * radius)\n            ])\n            sphere(r = radius);\n        }\n    }\n}\n\n// Helper for random values\nfunction rand(min, max) = min + (max - min) * rands(0, 1, 1)[0];\n\n// Display the babka\ntranslate([0, 0, 5])\nbabka();",
    "renders": true
  },
  {
    "food_item": "brioche",
    "openscad_code": "// Brioche - Realistic style with medium complexity\n// Basic dimensions (mm)\nbrioche_height = 60;\nbrioche_diameter = 50;\ntopknot_diameter = 25;\ntopknot_height = 20;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Main brioche body - fluted base shape\nmodule brioche_base() {\n    color(\"wheat\") \n    difference() {\n        // Main fluted body using rotated cubes\n        union() {\n            for (i = [0:15:359]) {\n                rotate([0, 0, i]) \n                translate([0, 0, brioche_height/4]) \n                scale([1, 0.85, 1]) \n                cylinder(h=brioche_height/2, d1=brioche_diameter, d2=brioche_diameter*0.9, $fn=8);\n            }\n        }\n        \n        // Hollow center\n        translate([0, 0, wall_thickness]) \n        cylinder(h=brioche_height-wall_thickness, d=brioche_diameter-wall_thickness*2, $fn=32);\n    }\n}\n\n// Top knot/bun\nmodule top_knot() {\n    color(\"goldenrod\") \n    difference() {\n        // Main spherical top\n        translate([0, 0, brioche_height - topknot_height/2]) \n        sphere(d=topknot_diameter, $fn=32);\n        \n        // Hollow center\n        translate([0, 0, brioche_height - topknot_height/2]) \n        sphere(d=topknot_diameter-wall_thickness*2, $fn=32);\n    }\n}\n\n// Surface texture - small bumps for bread texture\nmodule surface_texture() {\n    color(\"tan\") \n    for (i = [0:30:359]) {\n        for (j = [0:30:359]) {\n            // Skip some bumps for natural look\n            if ((i + j) % 90 != 0) {\n                rotate([0, j, i]) \n                translate([brioche_diameter/2 * 0.95, 0, brioche_height/2]) \n                sphere(d=1.5, $fn=8);\n            }\n        }\n    }\n}\n\n// Slits on top knot for realistic appearance\nmodule top_slits() {\n    color(\"saddlebrown\") \n    for (i = [0:60:359]) {\n        rotate([0, 0, i]) \n        translate([0, topknot_diameter/4, brioche_height]) \n        cube([0.5, topknot_diameter/2, topknot_height/2], center=true);\n    }\n}\n\n// Bottom flattening for stable printing\nmodule flat_bottom() {\n    translate([0, 0, -0.1]) \n    cube([brioche_diameter*1.1, brioche_diameter*1.1, 0.2], center=true);\n}\n\n// Assembly\nunion() {\n    brioche_base();\n    top_knot();\n    top_slits();\n    flat_bottom();\n}\n\n// Optional surface texture (commented for cleaner print)\n// %surface_texture();",
    "renders": true
  },
  {
    "food_item": "panettone",
    "openscad_code": "// Panettone - Italian Christmas Cake\n// Medium complexity realistic style\n\n// Colors\ncolor_bread = [0.95, 0.85, 0.65];\ncolor_crust = [0.85, 0.65, 0.45];\ncolor_raisin = [0.4, 0.2, 0.1];\ncolor_candied = [0.9, 0.3, 0.2];\ncolor_powdered = [0.98, 0.98, 0.98];\n\n// Main dimensions\ndiameter = 70;\nheight = 60;\nwall_thickness = 2;\n\nmodule panettone_body() {\n    difference() {\n        // Main dome shape\n        scale([1, 1, 0.8])\n        sphere(d = diameter, $fn = 64);\n        \n        // Hollow center\n        translate([0, 0, -5])\n        cylinder(h = height * 2, d = diameter - wall_thickness * 2, $fn = 64);\n        \n        // Flat bottom\n        translate([0, 0, -height/2])\n        cube([diameter, diameter, height], center = true);\n    }\n}\n\nmodule dome_top() {\n    // Create the characteristic dome shape\n    translate([0, 0, height * 0.4])\n    scale([1, 1, 0.6])\n    sphere(d = diameter, $fn = 64);\n}\n\nmodule raisins() {\n    // Raisins scattered throughout\n    for(i = [1:20]) {\n        rotate([rand(0, 180), rand(0, 180), rand(0, 360)])\n        translate([\n            rand(-diameter/3, diameter/3),\n            rand(-diameter/3, diameter/3),\n            rand(-height/3, height/3)\n        ]) {\n            color(color_raisin)\n            sphere(d = 2.5, $fn = 8);\n        }\n    }\n}\n\nmodule candied_orange() {\n    // Candied orange pieces\n    for(i = [1:15]) {\n        rotate([rand(0, 180), rand(0, 180), rand(0, 360)])\n        translate([\n            rand(-diameter/2.5, diameter/2.5),\n            rand(-diameter/2.5, diameter/2.5),\n            rand(-height/2.5, height/2.5)\n        ]) {\n            color(color_candied)\n            scale([1, 0.5, 0.3])\n            sphere(d = 3, $fn = 6);\n        }\n    }\n}\n\nmodule crust_texture() {\n    // Top crust with slight cracks\n    for(angle = [0:30:330]) {\n        rotate([0, 0, angle])\n        translate([diameter/2 - 3, 0, height * 0.5]) {\n            color(color_crust)\n            rotate([90, 0, 0])\n            cylinder(h = 8, d1 = 2, d2 = 1, $fn = 6);\n        }\n    }\n}\n\nmodule powdered_sugar() {\n    // Light dusting of powdered sugar on top\n    for(i = [1:50]) {\n        translate([\n            rand(-diameter/2.2, diameter/2.2),\n            rand(-diameter/2.2, diameter/2.2),\n            height * 0.5 + rand(0, 1)\n        ]) {\n            color(color_powdered)\n            sphere(d = 0.5, $fn = 4);\n        }\n    }\n}\n\nmodule side_texture() {\n    // Vertical texture lines from baking paper\n    for(angle = [0:15:345]) {\n        rotate([0, 0, angle])\n        translate([diameter/2 - 1, 0, 0])\n        scale([1, 0.1, 1.2])\n        color(color_crust)\n        cylinder(h = height * 0.9, d = 2, $fn = 3);\n    }\n}\n\n// Main assembly\nunion() {\n    // Main body\n    color(color_bread)\n    panettone_body();\n    \n    // Top crust layer\n    color(color_crust)\n    dome_top();\n    \n    // Decorative elements\n    side_texture();\n    crust_texture();\n    \n    // Food pieces\n    raisins();\n    candied_orange();\n    \n    // Final touches\n    powdered_sugar();\n}",
    "renders": true
  },
  {
    "food_item": "stollen",
    "openscad_code": "// Stollen - German Christmas bread\n// Overall dimensions: ~80mm x 40mm x 25mm\n\n$fn = 32;\n\nmodule stollen_body() {\n    color(\"burlywood\") {\n        // Main loaf shape - elongated with rounded top\n        hull() {\n            translate([-30, -15, 0]) cube([60, 30, 8]);\n            translate([-28, -13, 5]) cube([56, 26, 15]);\n            translate([-25, -10, 15]) cube([50, 20, 8]);\n        }\n        \n        // Taper ends slightly\n        difference() {\n            children();\n            translate([-35, -18, 0]) cube([10, 36, 25]);\n            translate([25, -18, 0]) cube([10, 36, 25]);\n        }\n    }\n}\n\nmodule powdered_sugar() {\n    color(\"white\") {\n        // Dusting on top surface\n        for(i = [0:5]) {\n            for(j = [0:3]) {\n                translate([\n                    -20 + i * 8 + (j % 2) * 4, \n                    -10 + j * 6, \n                    23.5 + sin(i) * 0.5\n                ]) {\n                    scale([1, 1, 0.3]) sphere(1.5);\n                }\n            }\n        }\n    }\n}\n\nmodule almond_slices() {\n    color(\"blanchedalmond\") {\n        // Sliced almonds on surface\n        for(i = [0:7]) {\n            rotate([0, 0, i * 137.5]) {\n                translate([\n                    sin(i * 0.8) * 18, \n                    cos(i * 0.8) * 8, \n                    21 + (i % 3) * 0.5\n                ]) {\n                    scale([1, 0.3, 0.1]) rotate([90, 0, 0]) cylinder(h = 4, r = 1);\n                }\n            }\n        }\n    }\n}\n\nmodule candied_fruit() {\n    color(\"darkorange\") {\n        // Candied orange peel pieces\n        for(i = [0:5]) {\n            translate([\n                -15 + i * 6 + (i % 2) * 3, \n                -8 + (i % 3) * 6, \n                20.5\n            ]) {\n                scale([0.8, 0.4, 0.4]) cube([3, 2, 1]);\n            }\n        }\n    }\n    \n    color(\"red\") {\n        // Candied cherries\n        for(i = [0:3]) {\n            translate([\n                -10 + i * 8, \n                8 - (i % 2) * 4, \n                21\n            ]) {\n                sphere(1.2);\n            }\n        }\n    }\n}\n\nmodule texture_lines() {\n    color(\"burlywood\") {\n        // Surface texture lines for realistic bread appearance\n        for(i = [-20:20]) {\n            intersection() {\n                stollen_body();\n                translate([i * 2, -20, 0]) cube([0.5, 40, 25]);\n            }\n        }\n    }\n}\n\n// Assembly\ndifference() {\n    union() {\n        stollen_body();\n        texture_lines();\n    }\n    \n    // Hollow out center for printing efficiency\n    translate([-20, -10, 2]) cube([40, 20, 20]);\n}\n\n// Decorative elements on surface\nunion() {\n    powdered_sugar();\n    almond_slices();\n    candied_fruit();\n}",
    "renders": true
  },
  {
    "food_item": "rugelach",
    "openscad_code": "// Realistic Rugelach - Medium Complexity\n// A crescent-shaped pastry with visible layers and chocolate filling\n\n$fn = 48;\n\n// Main parameters\nrugelach_radius = 25;\nrugelach_thickness = 8;\nlayer_thickness = 1.2;\nnum_layers = 3;\nchocolate_thickness = 0.8;\nsesame_seeds = 20;\n\n// Colors\npastry_color = [0.95, 0.85, 0.75];\nchocolate_color = [0.35, 0.20, 0.10];\nbaked_color = [0.85, 0.75, 0.65];\nsesame_color = [0.90, 0.85, 0.75];\n\n// Create crescent base shape\nmodule crescent_base() {\n    difference() {\n        // Main pastry disk\n        cylinder(h=rugelach_thickness, r=rugelach_radius, center=true);\n        \n        // Cut out inner circle for crescent\n        translate([0, -10, 0])\n            cylinder(h=rugelach_thickness + 1, r=rugelach_radius - 12, center=true);\n    }\n}\n\n// Create layered pastry with visible spirals\nmodule pastry_layers() {\n    for(i = [0:num_layers-1]) {\n        color(pastry_color) {\n            scale([1 - (i * 0.05), 1 - (i * 0.05), 1]) {\n                translate([0, 0, -rugelach_thickness/2 + i * layer_thickness]) {\n                    crescent_base();\n                }\n            }\n        }\n        \n        // Chocolate filling between layers\n        if(i < num_layers-1) {\n            color(chocolate_color) {\n                scale([1 - (i * 0.05) - 0.02, 1 - (i * 0.05) - 0.02, 0.5]) {\n                    translate([0, 0, -rugelach_thickness/2 + i * layer_thickness + layer_thickness]) {\n                        crescent_base();\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Add baked texture and browning\nmodule baked_surface() {\n    color(baked_color) {\n        translate([0, 0, rugelach_thickness/2 + 0.1]) {\n            scale([1, 1, 0.1]) {\n                crescent_base();\n            }\n        }\n    }\n}\n\n// Add sesame seeds on top\nmodule sesame_seeds() {\n    for(i = [0:sesame_seeds-1]) {\n        angle = i * 360 / sesame_seeds + rand();\n        radius = rugelach_radius * 0.7 + rand() * 5;\n        \n        color(sesame_color) {\n            translate([\n                cos(angle) * radius,\n                sin(angle) * radius,\n                rugelach_thickness/2 + 0.2\n            ]) {\n                scale([0.5, 0.5, 1]) {\n                    sphere(r=0.8);\n                }\n            }\n        }\n    }\n}\n\n// Create spiral pattern on cut surface\nmodule spiral_pattern() {\n    for(i = [0:10]) {\n        angle = i * 30;\n        radius = 8 + i * 1.5;\n        \n        color(chocolate_color) {\n            translate([\n                cos(angle) * radius,\n                sin(angle) * radius,\n                -rugelach_thickness/2 - 0.1\n            ]) {\n                cylinder(h=0.3, r=0.8);\n            }\n        }\n    }\n}\n\n// Main assembly\nrotate([90, 0, 0]) {\n    union() {\n        // Main pastry body\n        pastry_layers();\n        \n        // Baked top surface\n        baked_surface();\n        \n        // Sesame seed topping\n        sesame_seeds();\n        \n        // Spiral pattern on cut face\n        spiral_pattern();\n    }\n}\n\n// Helper function for random variation\nfunction rand() = rands(-1, 1, 1)[0] * 0.2;",
    "renders": true
  },
  {
    "food_item": "kugelhopf",
    "openscad_code": "// Kugelhopf (Bundt-style cake) - Realistic style, medium complexity\n// Overall dimensions: ~80mm diameter, ~45mm height\n\n$fn = 36;  // Smoother curves for realistic appearance\n\n// Main cake module\nmodule kugelhopf() {\n    color(\"#d4a574\")  // Golden-brown cake color\n    \n    difference() {\n        // Outer fluted ring\n        union() {\n            for (i = [0:15:359]) {\n                rotate([0, 0, i])\n                translate([0, 30, 0])\n                scale([1, 0.7, 1])\n                cylinder(h = 35, r = 12, center = true);\n            }\n            \n            // Connect the fluted sections\n            cylinder(h = 35, r = 42, center = true);\n            \n            // Top dome\n            translate([0, 0, 17.5])\n            scale([1, 1, 0.6])\n            sphere(r = 42);\n        }\n        \n        // Central hole\n        translate([0, 0, -5])\n        cylinder(h = 45, r = 15, center = false);\n        \n        // Bottom cavity for realistic cake shape\n        translate([0, 0, -20])\n        cylinder(h = 25, r1 = 35, r2 = 40, center = false);\n    }\n    \n    // Cake texture - small irregular bumps\n    for (i = [0:30:359]) {\n        for (j = [0:15:75]) {\n            rotate([0, 0, i])\n            translate([35 + j, 0, (j % 2 == 0) ? 15 : 10])\n            scale([1, 1, 0.5])\n            sphere(r = 1.5);\n        }\n    }\n    \n    // Top glaze drips\n    color(\"#e6c68a\")  // Lighter glaze color\n    for (i = [0:20:359]) {\n        angle = i + (i * 7.5);\n        rotate([0, 0, angle])\n        translate([20 + (i % 3) * 8, 0, 22])\n        scale([0.8, 0.8, 2 + (i % 3)])\n        sphere(r = 2);\n    }\n    \n    // Powdered sugar dusting\n    color(\"#f8f4e3\", 0.6)  // Semi-transparent white\n    for (i = [0:45:359]) {\n        angle = i + 22.5;\n        rotate([0, 0, angle])\n        translate([25 + (i % 2) * 10, 0, 25])\n        sphere(r = 0.8);\n    }\n    \n    // Almond slices on top\n    color(\"#f5e6d3\")  // Almond color\n    for (i = [0:40:359]) {\n        angle = i + 20;\n        rotate([0, 0, angle])\n        translate([15 + (i % 4) * 6, 0, 26])\n        rotate([90, 0, 0])\n        scale([1, 0.3, 2])\n        cylinder(h = 0.8, r = 1.5);\n    }\n}\n\n// Raisins embedded in cake\nmodule raisins() {\n    color(\"#3e2723\")  // Dark raisin color\n    for (i = [0:25:359]) {\n        for (j = [0:20:75]) {\n            rotate([0, 0, i + j])\n            translate([25 + j, 0, 12 + (j % 2) * 8])\n            sphere(r = 1.2);\n        }\n    }\n}\n\n// Assemble the complete kugelhopf\nunion() {\n    kugelhopf();\n    raisins();\n}",
    "renders": true
  },
  {
    "food_item": "krumkake",
    "openscad_code": "// Krumkake - Norwegian waffle cookie\n// Realistic style, medium complexity\n\n$fn = 32;\n\n// Main dimensions\nkrumkake_radius = 25;\nkrumkake_height = 40;\nwall_thickness = 1.5;\ncone_angle = 20; // degrees\n\n// Color definitions\nkrumkake_color = \"#D4A574\"; // Golden brown\nedge_color = \"#C4965A\"; // Darker edge\npattern_color = \"#E6B885\"; // Lighter pattern\n\n// Module for creating the cone shape\nmodule krumkake_cone() {\n    // Create main cone body using hull of cylinders\n    hull() {\n        cylinder(h=wall_thickness, r1=krumkake_radius, r2=krumkake_radius * 0.9);\n        translate([0, 0, krumkake_height - wall_thickness])\n            cylinder(h=wall_thickness, r1=krumkake_radius * 0.9, r2=krumkake_radius * 0.7);\n    }\n}\n\n// Module for creating waffle pattern\nmodule waffle_pattern() {\n    // Horizontal and vertical lines creating grid pattern\n    for(i = [-krumkake_radius + 5 : 5 : krumkake_radius - 5]) {\n        // Vertical lines\n        translate([i, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=krumkake_height * 0.9, r=0.5, center=true);\n        \n        // Horizontal lines\n        for(j = [0 : 5 : krumkake_height - 5]) {\n            translate([0, i, j])\n                rotate([90, 0, 0])\n                    cylinder(h=krumkake_radius * 2, r=0.5, center=true);\n        }\n    }\n    \n    // Diamond pattern details\n    for(i = [-krumkake_radius + 7.5 : 5 : krumkake_radius - 7.5]) {\n        for(j = [2.5 : 5 : krumkake_height - 2.5]) {\n            translate([i, 0, j])\n                scale([1, 0.5, 1])\n                    sphere(r=1.2);\n        }\n    }\n}\n\n// Module for rolled edge detail\nmodule rolled_edge() {\n    // Create overlapping layers at the seam\n    for(i = [0 : 2 : krumkake_height - 5]) {\n        translate([krumkake_radius * 0.8, 0, i])\n            rotate([0, 90, 0])\n                cylinder(h=3, r=wall_thickness * 1.5);\n    }\n}\n\n// Main krumkake assembly\ncolor(krumkake_color) {\n    difference() {\n        // Outer shell\n        krumkake_cone();\n        \n        // Hollow interior\n        translate([0, 0, wall_thickness])\n            cylinder(h=krumkake_height - wall_thickness * 2, \n                     r1=krumkake_radius - wall_thickness, \n                     r2=krumkake_radius * 0.7 - wall_thickness);\n    }\n}\n\n// Add waffle pattern texture\ncolor(pattern_color) {\n    difference() {\n        // Raised pattern base\n        krumkake_cone();\n        \n        // Hollow interior for pattern\n        translate([0, 0, wall_thickness + 0.5])\n            cylinder(h=krumkake_height - wall_thickness * 2 - 1, \n                     r1=krumkake_radius - wall_thickness - 0.5, \n                     r2=krumkake_radius * 0.7 - wall_thickness - 0.5);\n    }\n    \n    // Actual pattern details\n    color(pattern_color) {\n        translate([0, 0, wall_thickness * 0.5])\n            scale([0.95, 0.95, 1])\n                waffle_pattern();\n    }\n}\n\n// Darker edges for realistic appearance\ncolor(edge_color) {\n    // Top edge\n    translate([0, 0, krumkake_height - wall_thickness])\n        cylinder(h=wall_thickness * 0.5, \n                 r1=krumkake_radius * 0.7, \n                 r2=krumkake_radius * 0.7 - 0.5);\n    \n    // Bottom edge\n    translate([0, 0, 0])\n        cylinder(h=wall_thickness * 0.5, \n                 r1=krumkake_radius, \n                 r2=krumkake_radius - 0.5);\n}\n\n// Rolled seam detail\ncolor(krumkake_color) {\n    rolled_edge();\n}\n\n// Subtle surface texture using small spheres\ncolor(krumkake_color) {\n    for(i = [0 : 15 : 360]) {\n        rotate([0, 0, i]) {\n            for(j = [5 : 5 : krumkake_height - 5]) {\n                translate([krumkake_radius * 0.8, 0, j])\n                    sphere(r=0.3);\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "food_item": "lefse",
    "openscad_code": "// Realistic Lefse Model - Medium Complexity\n// Traditional Norwegian flatbread with characteristic brown spots and rolled edge\n// Overall dimensions: ~100mm diameter, 3mm thick\n\n// Main lefse body\nmodule lefse_body() {\n    // Base flatbread disc with slight dome in center\n    color(\"wheat\")\n    difference() {\n        // Main disc with gentle dome\n        union() {\n            // Central dome (thicker in middle)\n            cylinder(h = 2.5, r = 45, $fn = 100);\n            translate([0, 0, 1.5]) \n                cylinder(h = 2, r1 = 45, r2 = 48, $fn = 100);\n        }\n        \n        // Remove bottom to make it flat\n        translate([0, 0, -0.1]) \n            cube([100, 100, 0.2], center = true);\n    }\n}\n\n// Characteristic brown spots from griddle\nmodule brown_spots() {\n    color(\"saddlebrown\")\n    for(i = [0:30]) {\n        // Random positioning using golden ratio for natural distribution\n        angle = i * 137.508;\n        radius = 5 + pow(i * 1.618, 1.5) * 0.8;\n        x = cos(angle) * radius;\n        y = sin(angle) * radius;\n        \n        // Vary spot sizes and heights for natural look\n        spot_height = 0.1 + (i % 3) * 0.05;\n        spot_radius = 1.5 + (i % 4) * 0.5;\n        \n        translate([x, y, 3.9]) \n            cylinder(h = spot_height, r = spot_radius, $fn = 16);\n    }\n}\n\n// Subtle rolling pin texture pattern\nmodule rolling_pin_texture() {\n    color(\"burlywood\")\n    for(angle = [0:15:180]) {\n        rotate([0, 0, angle]) {\n            // Vertical grooves from rolling pin\n            translate([0, -50, 2]) \n                rotate([90, 0, 0])\n                    cylinder(h = 100, r = 0.3, $fn = 8);\n        }\n    }\n}\n\n// Thin edge characteristic of hand-rolled lefse\nmodule thin_edge() {\n    color(\"wheat\")\n    difference() {\n        // Outer thin ring\n        cylinder(h = 1.5, r = 50, $fn = 200);\n        \n        // Remove center to create ring\n        translate([0, 0, -0.1]) \n            cylinder(h = 2, r = 45, $fn = 200);\n    }\n}\n\n// Flour dusting on surface\nmodule flour_dusting() {\n    color(\"floralwhite\")\n    for(i = [0:50]) {\n        angle = i * 109.5;\n        radius = pow(i, 0.7) * 2.5;\n        x = cos(angle) * radius;\n        y = sin(angle) * radius;\n        \n        translate([x, y, 4.1]) \n            sphere(r = 0.2 + (i % 3) * 0.1);\n    }\n}\n\n// Assembly\nunion() {\n    // Main body\n    lefse_body();\n    \n    // Thin edge around circumference\n    translate([0, 0, 2]) \n        thin_edge();\n    \n    // Brown griddle spots on top\n    brown_spots();\n    \n    // Subtle rolling texture\n    rolling_pin_texture();\n    \n    // Light flour dusting\n    flour_dusting();\n}",
    "renders": true
  },
  {
    "food_item": "speculoos",
    "openscad_code": "// Speculoos cookie - realistic style\n// Overall dimensions: 80mm x 60mm x 8mm\n\n$fn = 32;\n\nmodule cookie_base() {\n    // Main cookie body with rounded edges\n    color([0.72, 0.52, 0.35]) {\n        difference() {\n            // Main rounded rectangle\n            translate([0, 0, 4])\n                minkowski() {\n                    cube([70, 50, 6], center = true);\n                    sphere(2);\n                }\n            \n            // Create slight dome top\n            translate([0, 0, 9])\n                sphere(45);\n            \n            // Flatten bottom\n            translate([0, 0, -2])\n                cube([100, 100, 4], center = true);\n        }\n    }\n}\n\nmodule windmill_pattern() {\n    color([0.65, 0.45, 0.28]) {\n        // Central windmill\n        for(i = [0:11]) {\n            rotate([0, 0, i * 30])\n                translate([0, 0, 7.5])\n                    cube([5, 16, 1], center = true);\n        }\n        \n        // Inner circle\n        translate([0, 0, 7.5])\n            cylinder(h = 1.2, r = 8, center = true);\n        \n        // Outer border pattern\n        for(i = [0:23]) {\n            rotate([0, 0, i * 15])\n                translate([28, 0, 7.5])\n                    rotate([0, 0, 45])\n                        cube([3, 3, 1], center = true);\n        }\n        \n        // Corner decorations\n        for(x = [-1:2:1])\n            for(y = [-1:2:1]) {\n                translate([x * 30, y * 20, 7.5])\n                    for(i = [0:3]) {\n                        rotate([0, 0, i * 90])\n                            translate([5, 0, 0])\n                                cube([3, 1.5, 1], center = true);\n                    }\n            }\n    }\n}\n\nmodule cookie_texture() {\n    // Random small holes for realistic texture\n    color([0.68, 0.48, 0.31]) {\n        for(i = [0:40]) {\n            translate([\n                rands(-35, 35, 1)[0],\n                rands(-25, 25, 1)[0],\n                7.8\n            ])\n                cylinder(h = 0.5, r = rands(0.3, 0.8, 1)[0], center = true);\n        }\n        \n        // Edge texture\n        for(i = [0:59]) {\n            angle = i * 6;\n            x = 40 * cos(angle);\n            y = 30 * sin(angle);\n            translate([x, y, 7.8])\n                cylinder(h = 0.3, r = 0.4, center = true);\n        }\n    }\n}\n\n// Assemble the cookie\ncookie_base();\nwindmill_pattern();\ncookie_texture();",
    "renders": true
  },
  {
    "food_item": "peperkoek",
    "openscad_code": "// Peperkoek (Dutch gingerbread loaf) - realistic medium complexity model\n// Dimensions: 80mm x 50mm x 40mm\n\n// Main bread loaf shape\nmodule peperkoek_body() {\n    // Base shape - rounded rectangular loaf\n    translate([0, 0, 20]) {\n        // Main body with rounded edges\n        minkowski() {\n            cube([80, 50, 35], center = true);\n            sphere(r = 3);\n        }\n    }\n}\n\n// Surface texture - characteristic peperkoek pattern\nmodule surface_texture() {\n    // Small indentations on top surface\n    for (x = [-35:10:35]) {\n        for (y = [-20:10:20]) {\n            translate([x, y, 38]) {\n                rotate([90, 0, 0]) {\n                    cylinder(h = 2, r1 = 1.5, r2 = 0.5, center = true);\n                }\n            }\n        }\n    }\n    \n    // Ridges along the sides\n    for (z = [5:5:35]) {\n        translate([0, 25, z]) {\n            cube([78, 1, 2], center = true);\n        }\n        translate([0, -25, z]) {\n            cube([78, 1, 2], center = true);\n        }\n    }\n}\n\n// Bottom seam texture\nmodule bottom_seam() {\n    for (x = [-35:5:35]) {\n        translate([x, 0, 3]) {\n            cube([2, 48, 1], center = true);\n        }\n    }\n}\n\n// Crust color variation\nmodule crust_layers() {\n    // Darker crust layer\n    difference() {\n        scale([1.02, 1.02, 1.02]) {\n            peperkoek_body();\n        }\n        peperkoek_body();\n    }\n}\n\n// Sugar crystal details\nmodule sugar_crystals() {\n    random_seed = 42;\n    for (i = [1:15]) {\n        x = (i * 17) % 70 - 35;\n        y = (i * 23) % 40 - 20;\n        z = 38 + (i % 3);\n        \n        translate([x, y, z]) {\n            sphere(r = 0.5 + (i % 2) * 0.3);\n        }\n    }\n}\n\n// Main assembly\ncolor([0.4, 0.25, 0.15]) {\n    union() {\n        peperkoek_body();\n        surface_texture();\n        bottom_seam();\n    }\n}\n\n// Crust overlay\ncolor([0.3, 0.18, 0.12]) {\n    crust_layers();\n}\n\n// Sugar crystals\ncolor([1, 1, 0.9]) {\n    sugar_crystals();\n}\n\n// Slight flattening on bottom for stable printing\ndifference() {\n    union();\n    translate([0, 0, -1]) {\n        cube([100, 100, 2], center = true);\n    }\n}",
    "renders": true
  },
  {
    "food_item": "panforte",
    "openscad_code": "// Panforte - Traditional Italian Christmas cake\n// Medium complexity realistic style\n\n$fn = 32;\n\n// Main parameters\npan_diameter = 80;\npan_height = 15;\nedge_thickness = 3;\ntop_pattern_radius = 35;\n\n// Colors\ncolor_dough = [150/255, 100/255, 70/255];\ncolor_nuts = [139/255, 69/255, 19/255];\ncolor_fruits = [220/255, 20/255, 60/255];\ncolor_sugar = [245/255, 222/255, 179/255];\ncolor_powder = [255/255, 248/255, 220/255];\n\n// Create the base panforte shape\nmodule base_panforte() {\n    // Main disk body\n    color(color_dough) \n    difference() {\n        cylinder(h = pan_height, r = pan_diameter/2);\n        translate([0, 0, pan_height - edge_thickness])\n            cylinder(h = edge_thickness + 1, r = pan_diameter/2 - edge_thickness);\n    }\n    \n    // Top dome\n    color(color_dough)\n    translate([0, 0, pan_height - edge_thickness])\n        scale([1, 1, 0.4])\n            sphere(r = pan_diameter/2 - edge_thickness);\n}\n\n// Add nuts and dried fruits on top\nmodule toppings() {\n    // Almonds\n    for(i = [0:20]) {\n        angle = i * 137.5;\n        radius = 10 + (i % 3) * 8;\n        x = cos(angle) * radius;\n        y = sin(angle) * radius;\n        \n        color(color_nuts)\n        translate([x, y, pan_height + 2])\n            scale([1, 0.7, 0.4])\n                rotate([0, 0, angle])\n                    sphere(r = 2.5);\n    }\n    \n    // Dried fruits (cranberry pieces)\n    for(i = [0:15]) {\n        angle = i * 95 + 30;\n        radius = 15 + (i % 4) * 7;\n        x = cos(angle) * radius;\n        y = sin(angle) * radius;\n        \n        color(color_fruits)\n        translate([x, y, pan_height + 1.5])\n            scale([0.8, 0.6, 0.3])\n                sphere(r = 2);\n    }\n    \n    // Candied citrus peel squares\n    for(i = [0:12]) {\n        angle = i * 72 + 15;\n        radius = 25 + (i % 2) * 5;\n        x = cos(angle) * radius;\n        y = sin(angle) * radius;\n        \n        color([1, 0.8, 0.2])\n        translate([x, y, pan_height + 1])\n            rotate([0, 0, angle])\n                cube([3, 2, 0.8], center = true);\n    }\n}\n\n// Sugar dusting pattern\nmodule sugar_dusting() {\n    color(color_powder) {\n        // Powder sugar on top\n        translate([0, 0, pan_height + 4])\n            cylinder(h = 0.3, r = top_pattern_radius);\n        \n        // Star pattern from center\n        for(i = [0:7]) {\n            angle = i * 45;\n            rotate([0, 0, angle])\n                translate([top_pattern_radius/2, 0, pan_height + 4.2])\n                    cube([top_pattern_radius, 2, 0.2], center = true);\n        }\n        \n        // Concentric rings\n        for(r = [10:10:top_pattern_radius - 5]) {\n            translate([0, 0, pan_height + 4.1])\n                cylinder(h = 0.2, r1 = r, r2 = r + 1.5);\n        }\n    }\n}\n\n// Side texture - slightly rough surface\nmodule side_texture() {\n    for(i = [0:35]) {\n        angle = i * 10;\n        x = cos(angle) * (pan_diameter/2 - 0.5);\n        y = sin(angle) * (pan_diameter/2 - 0.5);\n        \n        color(color_dough) {\n            translate([x, y, pan_height/2])\n                rotate([0, 0, angle + 90])\n                    cube([2, 0.5, pan_height - 1], center = true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    base_panforte();\n    toppings();\n    sugar_dusting();\n    side_texture();\n}",
    "renders": true
  },
  {
    "food_item": "torrone",
    "openscad_code": "// Torrone - Italian nougat confection\n// Dimensions: 80mm x 40mm x 20mm\n\n$fn = 32;\n\n// Main parameters\nlength = 80;\nwidth = 40;\nheight = 20;\nwafer_thickness = 1.5;\nnut_size = 2.5;\nnut_count = 25;\n\n// Colors\nwafer_color = \"#D4B896\";\nnougat_color = \"#F5E6D3\";\nhoney_color = \"#F4E4BC\";\nnut_color = \"#8B4513\";\n\n// Wafer base module\nmodule wafer_base() {\n    color(wafer_color) {\n        // Bottom wafer\n        translate([0, 0, height/2 + wafer_thickness/2])\n            cube([length + 4, width + 4, wafer_thickness], center = true);\n        \n        // Top wafer\n        translate([0, 0, -height/2 - wafer_thickness/2])\n            cube([length + 4, width + 4, wafer_thickness], center = true);\n    }\n}\n\n// Nougat filling with rounded edges\nmodule nougat_filling() {\n    color(nougat_color) {\n        // Main nougat block with rounded top\n        difference() {\n            // Base shape\n            cube([length, width, height], center = true);\n            \n            // Rounded top edge\n            translate([0, 0, height/2 - 2])\n                cylinder(h = height + 2, r = width/2 - 2, center = true);\n            \n            // Rounded bottom edge\n            translate([0, 0, -height/2 + 2])\n                cylinder(h = height + 2, r = width/2 - 2, center = true);\n        }\n        \n        // Honey layers visible on sides\n        color(honey_color) {\n            for(i = [-1, 0, 1]) {\n                translate([0, 0, i * height/4])\n                    cube([length + 0.1, width + 0.1, 0.5], center = true);\n            }\n        }\n    }\n}\n\n// Almond pieces scattered in nougat\nmodule almonds() {\n    color(nut_color) {\n        for(i = [0 : nut_count - 1]) {\n            // Random positioning within bounds\n            x_pos = (i * 13 + 7) % (length - 6) - length/2 + 3;\n            y_pos = (i * 7 + 11) % (width - 6) - width/2 + 3;\n            z_pos = (i * 5) % (height - 4) - height/2 + 2;\n            \n            translate([x_pos, y_pos, z_pos])\n                scale([1.2, 0.8, 0.6])\n                    sphere(nut_size);\n        }\n    }\n}\n\n// Edible paper pattern on wafers\nmodule wafer_pattern() {\n    color(wafer_color) {\n        // Bottom pattern\n        translate([0, 0, height/2 + wafer_thickness])\n            for(x = [-length/2 : 4 : length/2]) {\n                for(y = [-width/2 : 4 : width/2]) {\n                    translate([x, y, 0])\n                        cube([0.5, 0.5, wafer_thickness/2], center = true);\n                }\n            }\n        \n        // Top pattern\n        translate([0, 0, -height/2 - wafer_thickness])\n            for(x = [-length/2 : 4 : length/2]) {\n                for(y = [-width/2 : 4 : width/2]) {\n                    translate([x + 2, y + 2, 0])\n                        cube([0.5, 0.5, wafer_thickness/2], center = true);\n                }\n            }\n    }\n}\n\n// Assembly\nunion() {\n    wafer_base();\n    nougat_filling();\n    almonds();\n    wafer_pattern();\n}",
    "renders": true
  },
  {
    "food_item": "gianduja",
    "openscad_code": "// Gianduja Chocolate - Hazelnut praline in realistic style\n// Overall height: 60mm, width: 35mm, thickness: 20mm\n$fn = 60;\n\nmodule gianduja() {\n    color(\"#8B4513\")  // milk chocolate color\n    \n    // Main chocolate body with rounded edges\n    difference() {\n        // Main bar shape\n        translate([0, 0, 10])\n            scale([1, 0.7, 0.4])\n                sphere(25);\n        \n        // Flatten bottom\n        translate([0, 0, -1])\n            cube([100, 100, 2], center = true);\n        \n        // Create classic gianduja bar divisions (4 segments)\n        for (i = [-1, 1]) {\n            translate([i * 12, 0, 9])\n                rotate([0, 90, 0])\n                    cylinder(h = 50, r = 0.5);\n        }\n    }\n    \n    // Hazelnut pieces visible on surface\n    module hazelnut_piece(x, y, z, size, rotation) {\n        translate([x, y, z])\n            rotate([0, 0, rotation])\n                scale([1, 0.7, 0.4])\n                    sphere(size);\n    }\n    \n    // Add embedded hazelnut chunks\n    color(\"#D2691E\")  // hazelnut color\n    union() {\n        // Top surface hazelnuts\n        hazelnut_piece(-15, -8, 20, 3, 30);\n        hazelnut_piece(-5, 10, 19, 2.5, -45);\n        hazelnut_piece(8, -12, 21, 3.2, 60);\n        hazelnut_piece(12, 5, 20.5, 2.8, 0);\n        hazelnut_piece(-8, -15, 19.5, 2.3, 90);\n        \n        // Side hazelnuts\n        hazelnut_piece(-22, 0, 15, 2.7, 45);\n        hazelnut_piece(22, 5, 16, 3, -30);\n    }\n    \n    // Chocolate texture lines\n    color(\"#654321\")\n    for (i = [-20:4:20]) {\n        translate([i, 0, 21])\n            rotate([90, 0, 0])\n                cylinder(h = 35, r = 0.3);\n    }\n    \n    // Rounded edges detail\n    color(\"#8B4513\")\n    difference() {\n        translate([0, 0, 10])\n            scale([1, 0.72, 0.42])\n                sphere(26);\n        translate([0, 0, 10])\n            scale([0.94, 0.66, 0.38])\n                sphere(26);\n    }\n    \n    // Bottom surface with slight texture\n    color(\"#654321\")\n    translate([0, 0, 0.5])\n        cube([70, 50, 1], center = true);\n}\n\ngianduja();",
    "renders": true
  },
  {
    "food_item": "halva",
    "openscad_code": "// Halva model - realistic style with medium complexity\n// Dimensions: 80mm x 50mm x 30mm\n\n$fn = 32;\n\n// Main halva block with slightly irregular shape\nmodule halva_block() {\n    color(\"burlywood\") {\n        // Base rectangular block with rounded edges\n        difference() {\n            minkowski() {\n                cube([75, 45, 25], center = true);\n                sphere(3);\n            }\n            \n            // Top surface unevenness\n            for (i = [0:5:70]) {\n                for (j = [0:5:40]) {\n                    translate([-35 + i, -20 + j, 12]) {\n                        rotate([0, 0, rand(i*j)*360]) {\n                            cylinder(h = rand(i*j)*3 + 1, r = 3 + rand(i*j)*2, $fn = 6);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Sesame seed texture on top\nmodule sesame_seeds() {\n    color(\"darkgoldenrod\") {\n        for (i = [0:7:70]) {\n            for (j = [0:7:40]) {\n                if (rand(i+j) > 0.3) {\n                    translate([-35 + i + rand(i*j)*2, -20 + j + rand(i*j)*2, 14]) {\n                        scale([1, 1.2, 0.6]) {\n                            sphere(0.8);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Internal layer lines visible on sides\nmodule layer_lines() {\n    color(\"peru\") {\n        for (z = [-10:2:10]) {\n            translate([0, 0, z]) {\n                difference() {\n                    cube([77, 47, 0.5], center = true);\n                    cube([73, 43, 1], center = true);\n                }\n            }\n        }\n    }\n}\n\n// Cut surface showing texture\nmodule cut_surface() {\n    color(\"burlywood\") {\n        // Angled cut on one corner\n        translate([25, 15, 0]) {\n            rotate([0, 0, 45]) {\n                difference() {\n                    cube([30, 30, 30], center = true);\n                    translate([15, 0, 0]) {\n                        rotate([0, 0, 45]) {\n                            cube([50, 50, 50], center = true);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Internal texture on cut surface\n        for (i = [0:3:20]) {\n            for (j = [0:3:20]) {\n                translate([35 - i, 25 - j, -10 + rand(i*j)*20]) {\n                    scale([1, 1, 0.3]) {\n                        sphere(1 + rand(i*j));\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Crumb details on base\nmodule crumb_details() {\n    color(\"wheat\") {\n        for (i = [0:10:70]) {\n            for (j = [0:10:40]) {\n                if (rand(i+j) > 0.7) {\n                    translate([-35 + i, -20 + j, -14]) {\n                        sphere(0.5 + rand(i*j)*0.5);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Edge irregularities\nmodule edge_details() {\n    color(\"burlywood\") {\n        // Small chips on edges\n        for (angle = [0:30:359]) {\n            rotate([0, 0, angle]) {\n                translate([38 + rand(angle)*2, 0, rand(angle)*4 - 10]) {\n                    sphere(1 + rand(angle)*1.5);\n                }\n            }\n        }\n    }\n}\n\n// Assemble the complete halva\nunion() {\n    halva_block();\n    sesame_seeds();\n    layer_lines();\n    crumb_details();\n    edge_details();\n    \n    // Add cut surface only on one quadrant\n    intersection() {\n        cut_surface();\n        translate([20, 10, 0]) {\n            cube([40, 30, 40], center = true);\n        }\n    }\n}\n\n// Helper function for pseudo-random values\nfunction rand(x) = (sin(x*123.456) + 1)/2;",
    "renders": true
  },
  {
    "food_item": "barfi",
    "openscad_code": "$fa = 1;\n$fs = 0.4;\n\n// Barfi dimensions (mm)\nbarfi_width = 60;\nbarfi_height = 20;\nbarfi_depth = 60;\n\n// Main barfi base\nmodule barfi_base() {\n    color([0.95, 0.8, 0.65]) {\n        difference() {\n            // Main body\n            translate([0, 0, barfi_height/2])\n                cube([barfi_width, barfi_depth, barfi_height], center=true);\n            \n            // Rounded top edges\n            for(x = [-barfi_width/2 + 3, barfi_width/2 - 3])\n                for(y = [-barfi_depth/2 + 3, barfi_depth/2 - 3])\n                    translate([x, y, barfi_height - 1])\n                        sphere(r=3, $fn=20);\n        }\n    }\n}\n\n// Diamond pattern on top\nmodule diamond_pattern() {\n    color([0.9, 0.75, 0.6]) {\n        for(i = [-2:2])\n            for(j = [-2:2]) {\n                translate([\n                    i * (barfi_width/5), \n                    j * (barfi_depth/5), \n                    barfi_height + 0.2\n                ]) {\n                    rotate([0, 0, 45])\n                        cube([5, 5, 0.4], center=true);\n                }\n            }\n    }\n}\n\n// Edges with slight rounding\nmodule rounded_edges() {\n    color([0.92, 0.77, 0.62]) {\n        // Top chamfer\n        difference() {\n            translate([0, 0, barfi_height/2 + 0.5])\n                cube([barfi_width, barfi_depth, barfi_height + 1], center=true);\n            \n            translate([0, 0, barfi_height/2 - 1])\n                cube([barfi_width + 2, barfi_depth + 2, barfi_height - 2], center=true);\n        }\n    }\n}\n\n// Pistachio pieces\nmodule pistachios() {\n    color([0.4, 0.7, 0.4]) {\n        for(i = [1:8]) {\n            angle = i * 45;\n            radius = barfi_width/3.5;\n            translate([\n                cos(angle) * radius,\n                sin(angle) * radius,\n                barfi_height + 0.6\n            ]) {\n                rotate([90, 0, rand(i) * 90])\n                    scale([1, 0.7, 0.4])\n                        sphere(r=2, $fn=8);\n            }\n        }\n    }\n}\n\n// Almond slivers\nmodule almond_slivers() {\n    color([0.98, 0.9, 0.8]) {\n        for(i = [1:12]) {\n            angle = i * 30;\n            radius = barfi_width/2.8;\n            translate([\n                cos(angle) * radius,\n                sin(angle) * radius,\n                barfi_height + 0.8\n            ]) {\n                rotate([0, 0, angle])\n                    scale([0.2, 1.5, 0.1])\n                        cube([1, 1, 1], center=true);\n            }\n        }\n    }\n}\n\n// Edible silver leaf (varakh)\nmodule silver_leaf() {\n    color([0.85, 0.85, 0.85], 0.3) {\n        translate([0, 0, barfi_height + 1])\n            cube([barfi_width * 0.8, barfi_depth * 0.8, 0.05], center=true);\n    }\n}\n\n// Random helper\nfunction rand(n) = rands(0, 1, 1, n)[0];\n\n// Main assembly\nunion() {\n    barfi_base();\n    rounded_edges();\n    diamond_pattern();\n    pistachios();\n    almond_slivers();\n    silver_leaf();\n}",
    "renders": true
  },
  {
    "food_item": "rasgulla",
    "openscad_code": "// Rasgulla - A traditional Indian sweet\n// Soft cheese balls soaked in sugar syrup\n\n// Main parameters\n$fn = 64; // Smooth curves for 3D printing\nrasgulla_radius = 22; // Main ball size\nsyrup_thickness = 3; // Thickness of syrup layer\nbase_height = 5; // Base for syrup pool\n\n// Colors\nrasgulla_color = [1, 0.95, 0.85]; // Creamy white\nsyrup_color = [0.9, 0.7, 0.3]; // Golden syrup\ndish_color = [0.9, 0.9, 0.9]; // Light ceramic\n\n// Module to create a single rasgulla ball\nmodule rasgulla_ball(radius, position) {\n    translate(position) {\n        // Main ball body\n        color(rasgulla_color) {\n            sphere(r = radius);\n        }\n        \n        // Surface texture - small bumps for porous texture\n        for (i = [0:15]) {\n            rotate([rand(0, 360), rand(0, 360), rand(0, 360)]) {\n                translate([rand(-radius*0.8, radius*0.8), \n                          rand(-radius*0.8, radius*0.8), \n                          rand(-radius*0.8, radius*0.8)]) {\n                    color(rasgulla_color) {\n                        sphere(r = rand(1, 2.5));\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Module to create syrup pool\nmodule syrup_pool() {\n    // Base dish\n    color(dish_color) {\n        difference() {\n            cylinder(h = base_height, r1 = 55, r2 = 50);\n            cylinder(h = base_height + 1, r1 = 45, r2 = 45);\n        }\n    }\n    \n    // Syrup liquid\n    color(syrup_color) {\n        difference() {\n            cylinder(h = syrup_thickness, r1 = 45, r2 = 40);\n            translate([0, 0, -0.1]) {\n                cylinder(h = syrup_thickness + 0.2, r1 = 35, r2 = 35);\n            }\n        }\n    }\n}\n\n// Helper function for random values\nfunction rand(min, max) = min + (max - min) * (rands(0, 1, 1)[0]);\n\n// Main assembly\nunion() {\n    // Create syrup pool\n    syrup_pool();\n    \n    // Place rasgulla balls in syrup\n    // Main ball slightly floating\n    rasgulla_ball(rasgulla_radius, [0, 0, base_height + syrup_thickness + rasgulla_radius - 3]);\n    \n    // Additional smaller balls for realism\n    rasgulla_ball(rasgulla_radius * 0.7, [-25, 15, base_height + syrup_thickness + rasgulla_radius * 0.7 - 2]);\n    rasgulla_ball(rasgulla_radius * 0.8, [20, -10, base_height + syrup_thickness + rasgulla_radius * 0.8 - 2.5]);\n    \n    // Syrup drips on balls\n    for (i = [0:5]) {\n        rotate([0, 0, i * 60]) {\n            translate([rand(5, 15), rand(-5, 5), base_height + syrup_thickness]) {\n                color(syrup_color) {\n                    cylinder(h = rand(2, 4), r1 = rand(1, 2), r2 = 0.5);\n                }\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "food_item": "gulabjamun",
    "openscad_code": "// Gulab Jamun - Realistic Medium Complexity\n// A traditional Indian dessert - fried milk-solid dumpling soaked in rose-scented syrup\n\n$fn = 64;  // Smooth curves for 3D printing\n\n// Main parameters\ngulab_diameter = 40;\ngulab_height = 35;\nsyrup_thickness = 3;\nbase_flatten = 0.85;  // Slightly flattened bottom\n\n// Colors\nsyrup_color = [139/255, 69/255, 19/255, 0.9];  // Deep amber\ndumpling_color = [210/255, 180/255, 140/255];  // Golden brown\nhighlight_color = [1, 1, 0.9, 0.4];  // Syrup highlights\n\nmodule gulab_jamun() {\n    // Main dumpling body\n    color(dumpling_color) {\n        scale([1, 1, base_flatten]) \n            sphere(d = gulab_diameter);\n    }\n    \n    // Slightly flattened top for realistic shape\n    translate([0, 0, gulab_height * base_flatten - 2])\n        scale([1, 1, 0.3])\n            sphere(d = gulab_diameter * 0.9);\n    \n    // Surface texture - small bumps for fried appearance\n    for (i = [0:15]) {\n        rotate([0, 0, i * 24]) {\n            translate([\n                gulab_diameter/2 * 0.85 * cos(i * 37),\n                gulab_diameter/2 * 0.85 * sin(i * 37),\n                (i % 2) * 2 + base_flatten * gulab_height/2\n            ]) {\n                scale([1, 1, 0.7])\n                    sphere(d = 2.5);\n            }\n        }\n    }\n    \n    // Syrup coating layer\n    color(syrup_color) {\n        scale([1.08, 1.08, base_flatten * 1.05]) \n            sphere(d = gulab_diameter + syrup_thickness);\n    }\n    \n    // Syrup highlights - thin glossy areas\n    color(highlight_color) {\n        for (j = [0:7]) {\n            rotate([0, 0, j * 51]) {\n                translate([\n                    gulab_diameter/2 * 0.9 * cos(j * 73),\n                    gulab_diameter/2 * 0.9 * sin(j * 73),\n                    base_flatten * gulab_height + 1\n                ]) {\n                    scale([1, 1, 0.1])\n                        sphere(d = 4 + (j % 3) * 2);\n                }\n            }\n        }\n    }\n    \n    // Small crack details from frying\n    for (k = [0:5]) {\n        rotate([0, 0, k * 60]) {\n            translate([\n                gulab_diameter/2 * 0.7 * cos(k * 45),\n                gulab_diameter/2 * 0.7 * sin(k * 45),\n                base_flatten * gulab_height/2\n            ]) {\n                rotate([90, 0, 0])\n                    cylinder(h = 0.5, d1 = 1, d2 = 0.2);\n            }\n        }\n    }\n}\n\n// Create the gulab jamun\ntranslate([0, 0, gulab_height/2])\n    gulab_jamun();",
    "renders": true
  },
  {
    "food_item": "jalebi",
    "openscad_code": "// Realistic Jalebi OpenSCAD Model\n// Medium complexity with proper 3D printing considerations\n\n// Parameters\n$fn = 32;  // Smooth curves for printing\njalebi_diameter = 70;  // mm\njalebi_height = 8;  // mm\nwall_thickness = 1.5;  // mm for printing\nsyrup_thickness = 0.5;  // mm surface layer\n\n// Main jalebi module\nmodule jalebi() {\n    color([0.9, 0.6, 0.1])  // Golden yellow-orange color\n    \n    // Create the spiral base\n    union() {\n        // Outer spiral ring\n        spiral_ring();\n        \n        // Inner spiral details\n        rotate([0, 0, 30])\n            scale(0.7)\n                spiral_ring();\n        \n        // Syrup coating on top\n        syrup_layer();\n        \n        // Texture details\n        sugar_crystals();\n    }\n}\n\n// Create the main spiral ring\nmodule spiral_ring() {\n    // Build spiral from multiple torus segments\n    for (i = [0:15:360]) {\n        // Calculate spiral position\n        radius = jalebi_diameter/2 - (i/360) * 15;\n        if (radius > 5) {\n            translate([cos(i) * radius, sin(i) * radius, 0])\n                rotate([0, 0, i])\n                    torus_segment(radius/10 + 2);\n        }\n    }\n}\n\n// Individual torus segment for spiral\nmodule torus_segment(radius) {\n    difference() {\n        // Main dough body\n        cylinder(h = jalebi_height, r = radius, center = true);\n        \n        // Hollow center for printing\n        translate([0, 0, -jalebi_height/2 - 0.1])\n            cylinder(h = jalebi_height + 0.2, r = radius - wall_thickness, center = false);\n    }\n}\n\n// Syrup coating layer\nmodule syrup_layer() {\n    color([0.85, 0.5, 0.05])  // Darker syrup color\n    \n    // Create syrup coating on top surfaces\n    for (i = [0:15:360]) {\n        radius = jalebi_diameter/2 - (i/360) * 15;\n        if (radius > 5) {\n            translate([cos(i) * radius, sin(i) * radius, jalebi_height/2])\n                rotate([90, 0, 0])\n                    cylinder(h = radius/10 + 2, r = syrup_thickness, center = true);\n        }\n    }\n}\n\n// Sugar crystal details\nmodule sugar_crystals() {\n    color([1, 1, 0.8])  // White sugar color\n    \n    // Random sugar crystals on surface\n    for (i = [0:30:360]) {\n        angle = i + rands(0, 15, 1)[0];\n        radius = rands(5, jalebi_diameter/2 - 5, 1)[0];\n        x = cos(angle) * radius;\n        y = sin(angle) * radius;\n        z = rands(jalebi_height/2 - 1, jalebi_height/2 + 1, 1)[0];\n        \n        translate([x, y, z])\n            scale([1, 1, 0.5])\n                sphere(r = 0.3 + rands(0, 0.2, 1)[0]);\n    }\n}\n\n// Create the jalebi\njalebi();\n\n// Optional: Add small base for printing stability\ntranslate([0, 0, -jalebi_height/2 - 0.5])\n    color([0.9, 0.6, 0.1])\n    cylinder(h = 1, r = jalebi_diameter/2 + 5, center = false);",
    "renders": true
  },
  {
    "food_item": "laddu",
    "openscad_code": "// Laddu - Traditional Indian Sweet\n// Size: 60mm diameter sphere\n// Features: Textured surface with gram flour granules, small raisin details\n\n// Main color - golden brown gram flour\ncolor([0.8, 0.6, 0.3]) {\n\n    // Main spherical body with slight imperfections for realism\n    difference() {\n        // Perfect sphere base\n        sphere(d = 60, $fn = 64);\n        \n        // Remove small chunks for organic shape\n        for(i = [0:15]) {\n            rotate([rand_vec(i*3).x*10, rand_vec(i*7).y*10, i*24]) \n                translate([0, 0, -5]) \n                sphere(d = 3 + i%4, $fn = 8);\n        }\n    }\n}\n\n// Add slight bulge for hand-rolled appearance\ntranslate([0, 0, -2])\nscale([1.05, 1.05, 0.95])\ncolor([0.75, 0.55, 0.25]) \nsphere(d = 60, $fn = 64);\n\n// Surface texture - gram flour granules\nmodule gram_flour_granule(pos, size) {\n    translate(pos)\n    color([0.85, 0.65, 0.35])\n    sphere(d = size, $fn = 8);\n}\n\n// Distribute granules across surface\nfor(i = [0:89]) {\n    angle1 = i * 137.5;\n    angle2 = i * 89.7;\n    r = 28 + sin(i*5)*2;\n    \n    x = r * cos(angle1) * sin(angle2);\n    y = r * sin(angle1) * sin(angle2);\n    z = r * cos(angle2);\n    \n    gram_flour_granule([x, y, z], 1.5 + (i%3)*0.5);\n}\n\n// Raisin details\nmodule raisin(pos) {\n    translate(pos)\n    color([0.4, 0.2, 0.1])\n    scale([1.2, 1, 0.8])\n    sphere(d = 3, $fn = 12);\n}\n\n// Place raisins on surface\nraisin([20, 0, 20]);\nraisin([-15, 12, 18]);\nraisin([10, -18, 15]);\nraisin([-8, -10, 22]);\n\n// Almond slivers\nmodule almond_sliver(pos, rot) {\n    translate(pos)\n    rotate(rot)\n    color([0.95, 0.85, 0.7])\n    scale([0.3, 2, 0.8])\n    cylinder(h = 5, d1 = 2, d2 = 1, $fn = 6);\n}\n\n// Add almond pieces\nalmond_sliver([22, 8, 18], [0, 90, 0]);\nalmond_sliver([-12, -15, 20], [45, 60, 30]);\n\n// Random vector helper function\nfunction rand_vec(seed) = \n    [sin(seed*123.456), cos(seed*789.012), sin(seed*345.678)];",
    "renders": true
  },
  {
    "food_item": "peda",
    "openscad_code": "// Realistic Peda - Indian milk sweet\n// Medium complexity model with texture and proper proportions\n\n// Main parameters\npeda_diameter = 40;\npeda_height = 15;\nthickness = 2;\n\nmodule peda_base() {\n    // Main disc shape\n    difference() {\n        cylinder(h=peda_height, d=peda_diameter, $fn=64);\n        \n        // Slight indentation on top\n        translate([0, 0, peda_height - 1])\n            cylinder(h=2, d=peda_diameter - 4, $fn=64);\n    }\n}\n\nmodule crimped_edge() {\n    // Create crimped edge pattern\n    for(i=[0:30]) {\n        rotate([0, 0, i*12])\n            translate([peda_diameter/2 - 2, 0, 0])\n                cube([2, 4, peda_height], center=true);\n    }\n}\n\nmodule top_texture() {\n    // Radial lines for traditional peda pattern\n    for(i=[0:17]) {\n        rotate([0, 0, i*20])\n            translate([0, 0, peda_height - 0.5])\n                cube([1, peda_diameter/2 - 5, 1], center=true);\n    }\n}\n\nmodule center_mark() {\n    // Central depression with four dots\n    difference() {\n        cylinder(h=1, d=5, $fn=32);\n        \n        // Four small holes around center\n        for(angle=[45, 135, 225, 315]) {\n            rotate([0, 0, angle])\n                translate([2, 0, 0])\n                    sphere(d=1, $fn=16);\n        }\n    }\n}\n\nmodule surface_bubbles() {\n    // Random small bubbles for realistic texture\n    seed = 42;\n    for(i=[0:15]) {\n        translate([\n            (sin(i*seed) + 0.5) * (peda_diameter/3),\n            (cos(i*seed) + 0.5) * (peda_diameter/3),\n            peda_height - 0.3\n        ])\n            sphere(d=1.5, $fn=8);\n    }\n}\n\nmodule peda() {\n    color([0.82, 0.55, 0.28]) {  // Light brown color for peda\n        union() {\n            // Main body\n            peda_base();\n            \n            // Crimped edge decoration\n            translate([0, 0, peda_height/2])\n                crimped_edge();\n            \n            // Top surface details\n            translate([0, 0, peda_height - 0.5])\n                top_texture();\n            \n            // Center mark\n            translate([0, 0, peda_height - 1])\n                center_mark();\n            \n            // Surface texture\n            surface_bubbles();\n            \n            // Gentle rounding on edges\n            translate([0, 0, peda_height])\n                scale([1, 1, 0.3])\n                    sphere(d=peda_diameter - 2, $fn=64);\n        }\n    }\n}\n\n// Render the peda\npeda();",
    "renders": true
  },
  {
    "food_item": "sohan",
    "openscad_code": "// Sohan candy - traditional saffron brittle with pistachios and almonds\n// Base dimensions: 80mm x 60mm x 10mm thick\n\n$fn = 32;\n\n// Main colors\nsaffron = [1, 0.8, 0.2];\npistachio = [0.7, 0.9, 0.4];\nalmond = [0.9, 0.8, 0.6];\ngolden = [0.9, 0.7, 0.1];\n\n// Main candy slab with irregular edges\nmodule candy_slab() {\n    difference() {\n        // Base slab\n        scale([1, 0.75, 1])\n        rounded_cube([80, 60, 10], 5);\n        \n        // Irregular edge pattern\n        for (i = [0:15]) {\n            translate([\n                40 * sin(i * 137.5) + 40,\n                30 * cos(i * 137.5) + 30,\n                5\n            ])\n            sphere(r = 2 + (i % 3));\n        }\n    }\n}\n\n// Helper for rounded cube\nmodule rounded_cube(size, radius) {\n    hull() {\n        for (dx = [radius, size[0] - radius])\n        for (dy = [radius, size[1] - radius])\n        for (dz = [radius, size[2] - radius])\n        translate([dx, dy, dz])\n        sphere(r = radius);\n    }\n}\n\n// Pistachio pieces\nmodule pistachio_piece() {\n    color(pistachio)\n    scale([1.5, 1, 0.7])\n    sphere(r = 2.5);\n}\n\n// Almond slivers\nmodule almond_sliver() {\n    color(almond)\n    rotate([90, 0, 0])\n    scale([0.3, 0.3, 1.5])\n    cylinder(h = 8, r1 = 1.2, r2 = 0.5);\n}\n\n// Surface texture with holes and bubbles\nmodule surface_texture() {\n    difference() {\n        color(golden) candy_slab();\n        \n        // Small air bubbles\n        for (i = [0:30]) {\n            translate([\n                rand() * 70 + 5,\n                rand() * 50 + 5,\n                9.5\n            ])\n            sphere(r = 0.5 + rand() * 1.5);\n        }\n        \n        // Irregular surface depressions\n        for (i = [0:20]) {\n            translate([\n                rand() * 60 + 10,\n                rand() * 40 + 10,\n                5\n            ])\n            scale([1.5, 1, 0.3])\n            sphere(r = 2 + rand() * 2);\n        }\n    }\n}\n\n// Random number function\nfunction rand(n = 1, seed = undef) = \n    seed == undef ? rands(0, 1, 1)[0] : rands(0, 1, 1, seed)[0];\n\n// Place nuts on surface\nmodule nuts_on_surface() {\n    union() {\n        // Pistachio distribution\n        for (i = [0:12]) {\n            translate([\n                rand(i * 2.3) * 70 + 5,\n                rand(i * 3.7) * 50 + 5,\n                9.8\n            ])\n            rotate([rand(i * 5.1) * 20, rand(i * 7.3) * 20, rand(i * 11.7) * 360])\n            pistachio_piece();\n        }\n        \n        // Almond slivers\n        for (i = [0:10]) {\n            translate([\n                rand(i * 13.1) * 65 + 7,\n                rand(i * 17.9) * 45 + 7,\n                9.5\n            ])\n            rotate([rand(i * 19) * 30 - 15, rand(i * 23) * 30 - 15, rand(i * 29) * 180])\n            almond_sliver();\n        }\n    }\n}\n\n// Final assembly\ntranslate([0, 0, 5]) {\n    surface_texture();\n    nuts_on_surface();\n}",
    "renders": true
  },
  {
    "food_item": "qurabiya",
    "openscad_code": "// Qurabiya - traditional Middle Eastern shortbread cookie\n// Dimensions: ~60mm diameter, 20mm thick\n// Features: domed shape, cross-hatch pattern top, powdered sugar coating\n\n$fn = 32; // Smooth curves\n\n// Main cookie color - golden brown\ncolor([0.82, 0.65, 0.45]) {\n\n    // Main cookie body - slightly domed disc\n    union() {\n        // Base disc\n        cylinder(h = 8, d = 60, center = true);\n        \n        // Dome top\n        translate([0, 0, 4])\n            scale([1, 1, 0.6])\n                sphere(d = 60);\n    }\n}\n\n// Almond pieces embedded in top\nmodule almond_piece(x, y, angle) {\n    translate([x, y, 8 + sin(sqrt(x*x + y*y)/5) * 2])\n        rotate([90, 0, angle])\n            scale([0.3, 0.8, 0.15])\n                color([0.95, 0.85, 0.7])\n                    sphere(d = 8);\n}\n\n// Place almond pieces in circular pattern\nfor(i = [0:5]) {\n    angle = i * 60 + 30;\n    radius = 18;\n    almond_piece(\n        cos(angle) * radius,\n        sin(angle) * radius,\n        angle\n    );\n}\n\n// Center almond\nalmond_piece(0, 0, 0);\n\n// Cross-hatch pattern using small cylinders\nmodule hatch_mark(x, y, angle) {\n    translate([x, y, 10])\n        rotate([0, 0, angle])\n            color([0.75, 0.6, 0.4])\n                cube([20, 0.5, 0.3], center = true);\n}\n\n// Create cross-hatch grid\nfor(i = [-2:2]) {\n    hatch_mark(i * 10, 0, 0);\n    hatch_mark(0, i * 10, 90);\n}\n\n// Powdered sugar coating - small white spheres\nmodule sugar_crystal(x, y, z) {\n    translate([x, y, z])\n        color([0.98, 0.98, 0.95])\n            sphere(d = 0.5 + rands(0, 0.3, 1)[0]);\n}\n\n// Randomly place sugar crystals\nfor(i = [0:80]) {\n    angle = rands(0, 360, 1)[0];\n    radius = rands(5, 28, 1)[0];\n    sugar_crystal(\n        cos(angle) * radius,\n        sin(angle) * radius,\n        10 + sin(sqrt(cos(angle)*radius*cos(angle)*radius + sin(angle)*radius*sin(angle)*radius)/5) * 2 + rands(-0.5, 0.5, 1)[0]\n    );\n}\n\n// Bottom texture - slightly rough\nmodule bottom_mark(x, y) {\n    translate([x, y, -4.2])\n        color([0.78, 0.62, 0.42])\n            sphere(d = 1 + rands(0, 0.5, 1)[0]);\n}\n\n// Create rough bottom surface\nfor(tx = [-25:5:25]) {\n    for(ty = [-25:5:25]) {\n        if(sqrt(tx*tx + ty*ty) < 28) {\n            bottom_mark(\n                tx + rands(-1, 1, 1)[0],\n                ty + rands(-1, 1, 1)[0]\n            );\n        }\n    }\n}\n\n// Edge details - slight irregularities\nmodule edge_bump(angle, height) {\n    translate([cos(angle) * 30, sin(angle) * 30, height])\n        rotate([0, 0, angle + 90])\n            scale([0.5, 1, 0.5])\n                color([0.8, 0.64, 0.44])\n                    sphere(d = 2);\n}\n\n// Add subtle edge texture\nfor(a = [0:15:360]) {\n    edge_bump(a, rands(-2, 2, 1)[0]);\n}",
    "renders": true
  },
  {
    "food_item": "basbousa",
    "openscad_code": "// Basbousa (Egyptian semolina cake) - Realistic style, medium complexity\n// Dimensions: 80mm diameter x 20mm height\n\n// Main cake base with diamond pattern top\nmodule basbousa_base() {\n    difference() {\n        // Main cylindrical base\n        cylinder(h=18, r=40, $fn=64);\n        \n        // Hollow center for material savings\n        translate([0, 0, 2])\n            cylinder(h=16, r=35, $fn=64);\n        \n        // Diamond pattern cuts on top surface\n        for (i = [-3:3]) {\n            for (j = [-3:3]) {\n                if (abs(i) + abs(j) <= 4) {\n                    translate([i*10, j*10, 17.5])\n                        rotate([0, 0, 45])\n                        cube([8, 8, 2], center=true);\n                }\n            }\n        }\n    }\n}\n\n// Almond halves positioned on top\nmodule almonds() {\n    // Position almonds at diamond intersections\n    positions = [\n        [0, 0, 0],\n        [14, 0, 0],\n        [7, 12, 0],\n        [-7, 12, 0],\n        [-14, 0, 0],\n        [-7, -12, 0],\n        [7, -12, 0],\n        [0, 24, 0],\n        [0, -24, 0],\n        [21, 0, 0],\n        [-21, 0, 0]\n    ];\n    \n    for (pos = positions) {\n        translate([pos[0], pos[1], 18.5]) {\n            rotate([0, 0, pos[0] > 0 ? 30 : -30])\n            scale([1, 2, 0.5])\n            sphere(r=3, $fn=8);\n        }\n    }\n}\n\n// Syrup glaze layer\nmodule syrup_glaze() {\n    color(\"#D4A574\", 0.3) {\n        translate([0, 0, 18.2])\n            cylinder(h=0.5, r=40, $fn=64);\n    }\n}\n\n// Coconut flakes scattered on top\nmodule coconut_flakes() {\n    color(\"#FFF8DC\") {\n        for (i = [0:30]) {\n            rotate([0, 0, i*12])\n            translate([rand(15, 35), rand(-10, 10), 18.7])\n                scale([0.5, 0.5, 0.1])\n                sphere(r=1, $fn=4);\n        }\n    }\n}\n\n// Helper for random positioning\nfunction rand(min, max) = min + (max - min) * (rands(0, 1, 1)[0]);\n\n// Main assembly\ncolor(\"#C19A6B\") {\n    union() {\n        basbousa_base();\n        almonds();\n        syrup_glaze();\n        coconut_flakes();\n    }\n}",
    "renders": true
  },
  {
    "food_item": "kunafa",
    "openscad_code": "// Kunafa - Traditional Middle Eastern dessert\n// Features: crunchy vermicelli-like pastry, cheese filling, syrup coating\n\n// Parameters\n$fn = 32;\nkunafa_diameter = 70;\nkunafa_height = 25;\npastry_thickness = 3;\ncheese_thickness = 8;\nsyrup_thickness = 1;\n\n// Main kunafa base\nmodule kunafa_base() {\n    // Outer pastry shell\n    color(\"#D4A574\") \n    difference() {\n        cylinder(h = kunafa_height, d = kunafa_diameter);\n        translate([0, 0, pastry_thickness]) \n            cylinder(h = kunaha_height + 1, d = kunafa_diameter - 2*pastry_thickness);\n    }\n    \n    // Inner cheese layer\n    color(\"#FFF8DC\") \n    translate([0, 0, pastry_thickness]) \n        cylinder(h = cheese_thickness, d = kunafa_diameter - 2*pastry_thickness - 2);\n    \n    // Top pastry layer\n    color(\"#D4A574\") \n    translate([0, 0, pastry_thickness + cheese_thickness]) \n        cylinder(h = pastry_thickness, d = kunafa_diameter);\n}\n\n// Vermicelli texture module\nmodule vermicelli_strands() {\n    color(\"#C19A6B\") \n    for(i = [0:5:360]) {\n        rotate([0, 0, i]) \n        translate([kunafa_diameter/2 - 5, 0, kunafa_height - 1]) \n            rotate([90, 0, 0]) \n                cylinder(h = 10, d = 1, $fn = 8);\n    }\n    \n    // Cross strands\n    for(i = [0:10:360]) {\n        rotate([0, 0, i]) \n        translate([kunafa_diameter/2 - 10, 0, kunafa_height - 0.5]) \n            rotate([90, 0, 45]) \n                cylinder(h = 12, d = 0.8, $fn = 6);\n    }\n}\n\n// Crispy edge details\nmodule crispy_edges() {\n    color(\"#B8860B\") \n    for(i = [0:15:360]) {\n        rotate([0, 0, i]) \n        translate([kunafa_diameter/2 - 1, 0, kunafa_height/2]) \n            scale([1, 0.3, 1]) \n                sphere(d = 3);\n    }\n}\n\n// Syrup coating\nmodule syrup_drips() {\n    color(\"#DAA520\") \n    // Top syrup layer\n    translate([0, 0, kunafa_height]) \n        cylinder(h = syrup_thickness, d = kunafa_diameter - 2);\n    \n    // Side drips\n    for(i = [30:60:330]) {\n        rotate([0, 0, i]) {\n            translate([kunafa_diameter/2 - 1, 0, kunafa_height - 5]) \n                rotate([0, 90, 0]) \n                    cylinder(h = 8, d = 2, $fn = 8);\n        }\n    }\n}\n\n// Pistachio garnish\nmodule pistachios() {\n    color(\"#228B22\") \n    for(i = [0:45:315]) {\n        rotate([0, 0, i]) \n        translate([kunafa_diameter/2 - 15, 0, kunafa_height + 1]) \n            rotate([45, 0, 0]) \n                scale([1, 0.5, 0.5]) \n                    sphere(d = 3);\n    }\n}\n\n// Assembly\nunion() {\n    kunafa_base();\n    vermicelli_strands();\n    crispy_edges();\n    syrup_drips();\n    pistachios();\n}\n\n// Base support for 3D printing\ntranslate([0, 0, -1]) \n    color(\"#D4A574\") \n    cylinder(h = 1, d = kunafa_diameter + 2);",
    "renders": true
  },
  {
    "food_item": "qatayef",
    "openscad_code": "// Qatayef (Arabic stuffed pancake) - Realistic style, medium complexity\n// Dimensions: ~70mm diameter, ~25mm height when folded\n\n$fn = 36; // Smooth curves for realism\n\n// Main colors\ncolor_pancake = [0.92, 0.85, 0.75];\ncolor_seal = [0.75, 0.6, 0.45];\ncolor_filling = [0.95, 0.9, 0.8];\ncolor_nut = [0.65, 0.45, 0.3];\n\n// Pancake base - half-moon shape\nmodule pancake_base() {\n    color(color_pancake) {\n        difference() {\n            // Full pancake disc\n            cylinder(h = 3, r = 35);\n            // Cut in half to create half-moon\n            translate([0, 0, -1]) cube([200, 70, 5], center = true);\n        }\n    }\n}\n\n// Texture for pancake surface\nmodule pancake_texture() {\n    for (i = [0:3]) {\n        for (j = [0:5]) {\n            translate([\n                -25 + i * 15,\n                -30 + j * 10,\n                3.1\n            ]) {\n                scale([1, 1, 0.2]) sphere(r = 1.5);\n            }\n        }\n    }\n}\n\n// Folded edge seam\nmodule fold_seam() {\n    color(color_seal) {\n        // Left edge where folded\n        translate([-35, 0, 2]) rotate([0, 90, 0]) \n            cylinder(h = 70, r = 2);\n        \n        // Curved edge seam\n        rotate_extrude(angle = 180, $fn = 36)\n            translate([35, 0, 0]) \n                circle(r = 2);\n    }\n}\n\n// Filling (nuts/cream) visible at opening\nmodule filling() {\n    color(color_filling) {\n        translate([10, 0, 3]) {\n            // Main filling mass\n            scale([1, 0.8, 0.7]) sphere(r = 20);\n            \n            // Chopped nuts scattered\n            for (k = [0:8]) {\n                rotate([0, 0, k * 45]) {\n                    translate([5 + k, 8 - k, 2]) {\n                        color(color_nut) scale([1, 0.7, 0.5]) sphere(r = 1.5);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Small air bubbles on pancake surface\nmodule bubbles() {\n    color(color_pancake) {\n        for (b = [0:15]) {\n            angle = b * 137.5;\n            radius = 10 + b * 1.5;\n            translate([\n                cos(angle) * radius,\n                sin(angle) * radius,\n                3.2\n            ]) sphere(r = 0.8);\n        }\n    }\n}\n\n// Combine all elements\nunion() {\n    // Main pancake body\n    pancake_base();\n    \n    // Surface details\n    pancake_texture();\n    bubbles();\n    \n    // Assembly\n    translate([0, 0, 0]) {\n        filling();\n    }\n    \n    translate([0, 0, 1.5]) {\n        fold_seam();\n    }\n}",
    "renders": true
  },
  {
    "food_item": "maamoul",
    "openscad_code": "// Maamoul - Middle Eastern date-filled cookie\n// Realistic style, medium complexity\n\n$fn = 50;\n\n// Main module for the maamoul\nmodule maamoul() {\n    // Base cookie color\n    color(\"#E8B36B\") {\n        // Main cookie body\n        difference() {\n            // Main dome shape\n            union() {\n                translate([0, 0, 15])\n                    scale([1, 1, 0.8])\n                        sphere(d = 70);\n                \n                // Slightly flattened bottom\n                translate([0, 0, 2.5])\n                    cylinder(h = 15, d = 70);\n            }\n            \n            // Hollow center for date filling\n            translate([0, 0, 5])\n                sphere(d = 50);\n        }\n        \n        // Bottom decorative ridges\n        for(i = [0:35:315]) {\n            rotate([0, 0, i])\n                translate([0, -35, 0])\n                    cube([3, 3, 5], center = true);\n        }\n    }\n    \n    // Date filling visible at top\n    color(\"#4A2C17\") {\n        translate([0, 0, 30])\n            cylinder(h = 2, d = 20);\n    }\n    \n    // Top decorative pattern - traditional maamoul mold design\n    color(\"#D49F5B\") {\n        // Central star pattern\n        for(i = [0:45:315]) {\n            rotate([0, 0, i])\n                translate([0, 0, 41])\n                    rotate([90, 0, 0])\n                        cylinder(h = 3, d1 = 15, d2 = 8);\n        }\n        \n        // Petal shapes around center\n        for(i = [0:30:330]) {\n            rotate([0, 0, i])\n                translate([0, 22, 40])\n                    rotate([90, 0, 0])\n                        cylinder(h = 2.5, d1 = 12, d2 = 6);\n        }\n        \n        // Outer ring details\n        for(i = [0:15:345]) {\n            rotate([0, 0, i])\n                translate([0, 32, 38])\n                    sphere(d = 3);\n        }\n    }\n    \n    // Dusting of powdered sugar\n    color(\"#FFFFFF\", 0.7) {\n        // Random sugar particles on top\n        for(i = [0:5:355]) {\n            rotate([0, 0, i])\n                translate([rand(i)*20-10, rand(i+10)*20-10, 42])\n                    sphere(d = 1 + rand(i+20)*1.5);\n        }\n    }\n}\n\n// Helper function for random values\nfunction rand(seed) = rands(0, 1, 1, seed)[0];\n\n// Scale to reasonable 3D printing size\nscale(0.8)\n    maamoul();",
    "renders": true
  },
  {
    "food_item": "knafeh",
    "openscad_code": "// Realistic knafeh (kanafeh) pastry\n// Overall size ~80mm diameter, 20mm height, printable without supports\n\n// Colors for realistic look\nknafeh_orange = \"#FF8C00\";\npistachio_green = \"#32CD32\";\nwhite = \"#FFFFFF\";\nlight_brown = \"#D2B48C\";\ngolden = \"#FFD700\";\n\n// Main knafeh base (semolina crust)\nmodule knafeh_base() {\n    color(knafeh_orange)\n    difference() {\n        // Main circular base\n        cylinder(h = 15, r = 40, $fn = 64);\n        \n        // Create the characteristic spiral grooves on top\n        for(i = [1:30]) {\n            rotate([0, 0, i * 12])\n            translate([0, 0, 13])\n            cube([2, 40, 3], center = true);\n        }\n    }\n    \n    // Add thin noodle-like texture around the edge\n    for(i = [0:359:10]) {\n        rotate([0, 0, i])\n        translate([38, 0, 7.5])\n        color(knafeh_orange)\n        scale([1, 0.3, 0.3])\n        sphere(r = 2, $fn = 8);\n    }\n}\n\n// Cheese filling layer\nmodule cheese_layer() {\n    color(white)\n    translate([0, 0, 15])\n    cylinder(h = 3, r = 35, $fn = 64);\n}\n\n// Crispy noodle topping (kataifi)\nmodule noodle_topping() {\n    color(golden)\n    for(i = [-30:5:30]) {\n        for(j = [-30:5:30]) {\n            if(norm([i, j]) < 30) {\n                translate([i, j, 18])\n                rotate([90, 0, 45])\n                scale([0.3, 8, 0.3])\n                cylinder(h = 1, r = 0.5, $fn = 6);\n            }\n        }\n    }\n}\n\n// Pistachio garnish\nmodule pistachios() {\n    color(pistachio_green)\n    // Whole pistachios in center\n    translate([0, 0, 19])\n    scale([1.5, 1, 1])\n    sphere(r = 2, $fn = 8);\n    \n    // Chopped pistachios around\n    for(i = [0:359:45]) {\n        rotate([0, 0, i])\n        translate([15, 0, 19.5])\n        sphere(r = 0.8, $fn = 6);\n    }\n}\n\n// Sugar syrup drizzle\nmodule syrup_drizzle() {\n    color(light_brown)\n    translate([0, 0, 19.8])\n    for(i = [0:359:60]) {\n        rotate([0, 0, i])\n        translate([10, 0, 0])\n        scale([0.5, 5, 0.1])\n        sphere(r = 1, $fn = 6);\n    }\n}\n\n// Assembly\nknafeh_base();\ncheese_layer();\nnoodle_topping();\npistachios();\nsyrup_drizzle();",
    "renders": true
  },
  {
    "food_item": "halawa",
    "openscad_code": "// Halawa (Middle Eastern tahini-based sweet) bar\n// Realistic style with visible sesame texture and layers\n\n// Overall dimensions\nbar_length = 80;\nbar_width = 40;\nbar_height = 25;\n\n// Texture parameters\nsesame_size = 1.2;\nsesame_spacing = 3;\nsesame_height = 0.8;\n\n// Color definitions\nhalawa_color = [210/255, 180/255, 140/255];\nsesame_color = [245/255, 235/255, 200/255];\n\n// Main halawa bar body\nmodule halawa_bar() {\n    // Base bar shape with slightly rounded edges\n    difference() {\n        // Main rectangular bar\n        color(halawa_color)\n        minkowski() {\n            cube([bar_length, bar_width, bar_height], center = true);\n            sphere(r = 3);\n        }\n        \n        // Hollow bottom slightly for 3D printing stability\n        translate([0, 0, -bar_height/2 - 1])\n            cube([bar_length - 6, bar_width - 6, 2], center = true);\n    }\n}\n\n// Individual sesame seed\nmodule sesame_seed() {\n    color(sesame_color)\n    scale([1, 0.6, 1])\n        sphere(r = sesame_size);\n}\n\n// Surface texture pattern\nmodule sesame_texture() {\n    // Top surface seeds\n    for (i = [-bar_length/2 + 5 : sesame_spacing : bar_length/2 - 5]) {\n        for (j = [-bar_width/2 + 5 : sesame_spacing : bar_width/2 - 5]) {\n            translate([i, j, bar_height/2 - sesame_height]) {\n                rotate([0, 0, rand(i*j)*45])\n                    sesame_seed();\n            }\n        }\n    }\n    \n    // Side surface seeds - front/back\n    for (i = [-bar_length/2 + 5 : sesame_spacing : bar_length/2 - 5]) {\n        for (k = [-bar_height/2 + 5 : sesame_spacing : bar_height/2 - 5]) {\n            translate([i, bar_width/2 - sesame_height, k]) {\n                rotate([0, 90, rand(i*k)*45])\n                    sesame_seed();\n            }\n            translate([i, -bar_width/2 + sesame_height, k]) {\n                rotate([0, -90, rand(i*k)*45])\n                    sesame_seed();\n            }\n        }\n    }\n    \n    // Side surface seeds - left/right\n    for (j = [-bar_width/2 + 5 : sesame_spacing : bar_width/2 - 5]) {\n        for (k = [-bar_height/2 + 5 : sesame_spacing : bar_height/2 - 5]) {\n            translate([bar_length/2 - sesame_height, j, k]) {\n                rotate([90, 0, rand(j*k)*45])\n                    sesame_seed();\n            }\n            translate([-bar_length/2 + sesame_height, j, k]) {\n                rotate([-90, 0, rand(j*k)*45])\n                    sesame_seed();\n            }\n        }\n    }\n}\n\n// Create the halawa bar with texture\nunion() {\n    halawa_bar();\n    sesame_texture();\n}\n\n// Simple random function for seed rotation\nfunction rand(seed) = (seed * 9301 + 49297) % 233280 / 233280;",
    "renders": true
  },
  {
    "food_item": "turkishdelight",
    "openscad_code": "// Turkish Delight (Lokum) - Realistic Style\n// Traditional cubed confection with powdered sugar coating\n\n// Parameters\n$fn = 32;  // Smooth curves\ncube_size = 12;  // Main cube dimension\npowder_thickness = 1;  // Powder sugar layer\nrows = 4;  // Number of cubes in row\ncols = 4;  // Number of cubes in column\nspacing = 2;  // Gap between cubes\ntotal_width = rows * (cube_size + spacing) - spacing;\n\n// Colors\ncolor_rose = [0.9, 0.3, 0.4];  // Rose flavor\ncolor_pistachio = [0.7, 0.8, 0.5];  // Pistachio\ncolor_lemon = [0.95, 0.85, 0.3];  // Lemon\ncolor_powder = [0.98, 0.97, 0.95];  // Powdered sugar\n\n// Module for single turkish delight cube\nmodule turkish_delight_cube(x_pos, y_pos, color_choice) {\n    translate([x_pos, y_pos, 0]) {\n        // Main jelly cube\n        color(color_choice) {\n            difference() {\n                // Main cube body\n                cube([cube_size, cube_size, cube_size], center = true);\n                \n                // Subtle rounding on top edges\n                translate([0, 0, cube_size/2 - 1]) {\n                    scale([1, 1, 0.3]) {\n                        sphere(d = cube_size - 1, $fn = 20);\n                    }\n                }\n            }\n        }\n        \n        // Powdered sugar coating\n        color(color_powder) {\n            intersection() {\n                // Powder layer\n                translate([0, 0, 0]) {\n                    sphere(d = cube_size + powder_thickness * 2, $fn = 8);\n                }\n                \n                // Ensure powder only on surface\n                cube([cube_size + 0.5, cube_size + 0.5, cube_size + 0.5], center = true);\n            }\n        }\n        \n        // Pistachio pieces embedded (for pistachio flavor)\n        if (color_choice == color_pistachio) {\n            for (i = [0:2]) {\n                rotate([0, 0, i * 120]) {\n                    translate([2, 0, cube_size/4]) {\n                        color([0.4, 0.6, 0.3]) {\n                            scale([1, 0.5, 0.3]) {\n                                sphere(d = 2.5);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Create the entire tray of turkish delight\nmodule turkish_delight_tray() {\n    // Create grid of cubes\n    for (x = [0:rows-1]) {\n        for (y = [0:cols-1]) {\n            x_pos = x * (cube_size + spacing) - total_width/2 + cube_size/2;\n            y_pos = y * (cube_size + spacing) - total_width/2 + cube_size/2;\n            \n            // Alternate colors in pattern\n            color_index = (x + y) % 3;\n            color_choice = color_index == 0 ? color_rose : \n                          (color_index == 1 ? color_pistachio : color_lemon);\n            \n            turkish_delight_cube(x_pos, y_pos, color_choice);\n        }\n    }\n    \n    // Bottom tray base\n    color([0.8, 0.7, 0.6]) {\n        translate([0, 0, -cube_size/2 - 3]) {\n            cube([total_width + 10, total_width + 10, 3], center = true);\n        }\n    }\n    \n    // Powder sugar dusting on tray\n    color(color_powder) {\n        translate([0, 0, -cube_size/2 - 2.5]) {\n            cube([total_width + 12, total_width + 12, 0.5], center = true);\n        }\n    }\n}\n\n// Main assembly\nturkish_delight_tray();\n\n// Add some loose powder sugar around\nfor (i = [0:15]) {\n    angle = i * 137.5;\n    radius = total_width/2 + 5 + i * 0.5;\n    color(color_powder) {\n        translate([cos(angle) * radius, sin(angle) * radius, -cube_size/2 - 2]) {\n            sphere(d = 0.5 + (i % 3) * 0.2);\n        }\n    }\n}",
    "renders": true
  },
  {
    "food_item": "lokum",
    "openscad_code": "// Lokum (Turkish Delight) - realistic style, medium complexity\n// Dimensions: 80 x 80 x 25mm\n\n// Main parameters\nlokum_size = 80;\nlokum_height = 25;\nedge_radius = 5;\npowder_thickness = 1.5;\ncube_count = 9;\n\n// Colors\n$fn = 50;\n\nmodule lokum_cube() {\n    // Individual lokum piece with rounded edges\n    difference() {\n        // Main cube body\n        minkowski() {\n            cube([lokum_size/cube_count - 2, lokem_size/cube_count - 2, lokum_height - powder_thickness*2], center=true);\n            sphere(edge_radius);\n        }\n        \n        // Remove bottom rounding\n        translate([0, 0, -lokum_height/2])\n            cube([lokum_size/cube_count + 2, lokum_size/cube_count + 2, lokum_height], center=true);\n    }\n}\n\nmodule pistachio() {\n    // Pistachio pieces inside\n    color([0.5, 0.7, 0.3])\n    scale([1, 0.6, 0.3])\n        sphere(1.5);\n}\n\nmodule lokum_with_pistachios() {\n    // Lokum piece with embedded pistachios\n    color([0.95, 0.75, 0.55]) // Rose color\n    lokum_cube();\n    \n    // Random pistachios inside\n    for(i = [1:8]) {\n        translate([\n            (rand(i*1)*10-5)/2,\n            (rand(i*2)*10-5)/2,\n            (rand(i*3)*6-3)/2\n        ]) {\n            pistachio();\n        }\n    }\n}\n\nmodule powder_layer() {\n    // Powdered sugar coating\n    color([0.98, 0.98, 0.95])\n    for(x = [0:cube_count-1]) {\n        for(y = [0:cube_count-1]) {\n            translate([\n                -lokum_size/2 + (x+0.5)*lokum_size/cube_count,\n                -lokum_size/2 + (y+0.5)*lokum_size/cube_count,\n                lokum_height/2 - powder_thickness/2\n            ])\n                cube([lokum_size/cube_count, lokum_size/cube_count, powder_thickness], center=true);\n        }\n    }\n}\n\nmodule lokum_grid() {\n    // 3x3 grid of lokum pieces\n    for(x = [0:cube_count-1]) {\n        for(y = [0:cube_count-1]) {\n            translate([\n                -lokum_size/2 + (x+0.5)*lokum_size/cube_count,\n                -lokum_size/2 + (y+0.5)*lokum_size/cube_count,\n                0\n            ])\n                lokum_with_pistachios();\n        }\n    }\n}\n\n// Helper random function\nfunction rand(x) = (sin(x*123.456)+1)/2;\n\n// Main assembly\ntranslate([0, 0, lokum_height/2]) {\n    union() {\n        lokum_grid();\n        powder_layer();\n    }\n}",
    "renders": true
  },
  {
    "food_item": "pastilla",
    "openscad_code": "// Pastilla - Moroccan sweet-savory pie\n// 3D printable model with phyllo layers, almond filling and powdered sugar\n\n$fn = 36;  // Smooth curves for realistic appearance\n\n// Main dimensions\npastilla_width = 60;\npastilla_length = 70;\npastilla_height = 25;\nphyllo_thickness = 1.5;\nwall_thickness = 2;\n\n// Phyllo dough texture module\nmodule phyllo_layer(width, length, height) {\n    difference() {\n        // Base layer\n        cube([width, length, height], center = true);\n        \n        // Random holes and tears for realistic phyllo texture\n        for (i = [0:15]) {\n            translate([\n                (rand(i*3)-0.5) * width * 0.7,\n                (rand(i*7)-0.5) * length * 0.7,\n                height/2 + 0.1\n            ]) {\n                sphere(height * (0.3 + rand(i*11) * 0.4));\n            }\n        }\n    }\n}\n\n// Cinnamon stick decoration\nmodule cinnamon_stick() {\n    color([0.4, 0.2, 0.1]) {\n        rotate([90, 0, 0]) {\n            cylinder(h = 8, d1 = 1.5, d2 = 1.2);\n        }\n    }\n}\n\n// Powdered sugar dusting\nmodule sugar_dusting() {\n    color([0.95, 0.95, 0.9]) {\n        for (i = [0:30]) {\n            translate([\n                (rand(i*13)-0.5) * pastilla_width * 0.9,\n                (rand(i*17)-0.5) * pastilla_length * 0.9,\n                pastilla_height/2 + 0.2\n            ]) {\n                sphere(0.3 + rand(i*19) * 0.4);\n            }\n        }\n    }\n}\n\n// Almond filling texture\nmodule almond_filling(width, length, height) {\n    color([0.8, 0.6, 0.4]) {\n        difference() {\n            cube([width - wall_thickness*2, length - wall_thickness*2, height], center = true);\n            \n            // Create almond chunks texture\n            for (x = [-width/3:5:width/3]) {\n                for (y = [-length/3:5:length/3]) {\n                    translate([x, y, 0]) {\n                        sphere(2 + rand(x*y) * 1.5);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Main pastilla assembly\nmodule pastilla() {\n    // Bottom phyllo layers\n    for (i = [0:3]) {\n        color([0.85, 0.75, 0.55]) {\n            translate([0, 0, -pastilla_height/2 + i*phyllo_thickness]) {\n                phyllo_layer(\n                    pastilla_width - i*2,\n                    pastilla_length - i*2,\n                    phyllo_thickness\n                );\n            }\n        }\n    }\n    \n    // Almond filling\n    translate([0, 0, -pastilla_height/2 + 4*phyllo_thickness + 3]) {\n        almond_filling(pastilla_width-4, pastilla_length-4, 12);\n    }\n    \n    // Top phyllo layers\n    for (i = [0:4]) {\n        color([0.9, 0.8, 0.65]) {\n            translate([0, 0, pastilla_height/2 - i*phyllo_thickness - 2]) {\n                phyllo_layer(\n                    pastilla_width - i*1.5,\n                    pastilla_length - i*1.5,\n                    phyllo_thickness\n                );\n            }\n        }\n    }\n    \n    // Decorative phyllo leaf on top\n    color([0.95, 0.85, 0.7]) {\n        translate([0, 0, pastilla_height/2 - 7*phyllo_thickness]) {\n            rotate([0, 0, 45]) {\n                scale([1.2, 0.8, 1]) {\n                    cylinder(h = phyllo_thickness, d = 25);\n                }\n            }\n        }\n    }\n    \n    // Cinnamon stick decorations\n    translate([pastilla_width/3, pastilla_length/3, pastilla_height/2 + 1]) {\n        cinnamon_stick();\n    }\n    translate([-pastilla_width/3, -pastilla_length/3, pastilla_height/2 + 1]) {\n        rotate([0, 0, 120]) {\n            cinnamon_stick();\n        }\n    }\n    \n    // Powdered sugar\n    sugar_dusting();\n}\n\n// Helper function for random values\nfunction rand(n) = (n * 13.7) % 1;\n\n// Render the pastilla\npastilla();",
    "renders": true
  },
  {
    "food_item": "sfouf",
    "openscad_code": "// Sfouf (Turmeric Cake) - Realistic 3D model for printing\n// Dimensions: 80mm diameter, 20mm height\n\n// Main cake base\nmodule sfouf_base() {\n    // Bottom layer - dense cake texture\n    color([0.95, 0.75, 0.35]) \n    difference() {\n        cylinder(h=18, d=80, $fn=64);\n        // Hollow center for realistic thickness\n        translate([0, 0, 2])\n            cylinder(h=16, d=76, $fn=64);\n    }\n    \n    // Top surface with slight dome\n    translate([0, 0, 18])\n    color([0.92, 0.72, 0.32])\n    scale([1, 1, 0.2])\n    sphere(d=80, $fn=64);\n}\n\n// Turmeric powder dusting pattern\nmodule turmeric_dusting() {\n    for(i=[-30:8:30]) {\n        for(j=[-30:8:30]) {\n            // Randomize pattern slightly\n            translate([i+rand(i,j)*2, j+rand(j,i)*2, 19.5]) {\n                color([0.82, 0.48, 0.12])\n                scale([1, 1, 0.1])\n                sphere(d=3+rand(i,j)*2, $fn=8);\n            }\n        }\n    }\n}\n\n// Sesame seeds on top\nmodule sesame_seeds() {\n    // Random seed placement\n    for(i=[1:50]) {\n        angle = i * 137.5; // Golden angle for natural distribution\n        radius = pow(i, 0.5) * 2.5;\n        x = cos(angle) * radius;\n        y = sin(angle) * radius;\n        \n        translate([x, y, 20 + rand(x,y)*0.5]) {\n            rotate([90, 0, angle*5])\n            color([0.85, 0.85, 0.85])\n            scale([1, 0.3, 0.6])\n            sphere(d=1.5, $fn=6);\n        }\n    }\n}\n\n// Cake edge details - slight imperfections\nmodule edge_details() {\n    for(angle=[0:15:360]) {\n        rotate([0, 0, angle]) {\n            translate([40, 0, 9]) {\n                color([0.9, 0.7, 0.33])\n                scale([1, 0.5, 1])\n                sphere(d=2+rand(angle,0)*1.5, $fn=8);\n            }\n        }\n    }\n}\n\n// Simple pseudo-random function for natural variation\nfunction rand(x,y) = (x*13 + y*7) % 3 / 3;\n\n// Assembly\nunion() {\n    // Main cake\n    sfouf_base();\n    \n    // Surface details\n    translate([0, 0, 0.1]) {\n        turmeric_dusting();\n        sesame_seeds();\n    }\n    \n    // Edge imperfections\n    edge_details();\n}",
    "renders": true
  },
  {
    "food_item": "sheer",
    "openscad_code": "// Sheer watermelon slice with rind, flesh, and seeds\n// Scaled to ~80mm diameter for 3D printing\n\n// Main parameters\nwatermelon_radius = 40;\nwatermelon_thickness = 25;\nrind_thickness = 4;\nseed_count = 18;\nseed_radius = 1.2;\nseed_length = 3;\n\n// Colors\nrind_color = [0.1, 0.6, 0.2];\nlight_rind_color = [0.8, 0.9, 0.6];\nflesh_color = [0.9, 0.25, 0.3];\nseed_color = [0.1, 0.1, 0.1];\n\n// Create watermelon slice\nmodule watermelon_slice() {\n    // Main flesh body - 1/8 of a sphere\n    color(flesh_color)\n    intersection() {\n        sphere(r = watermelon_radius);\n        translate([0, -watermelon_radius, 0])\n        cube([watermelon_radius * 2, watermelon_radius, watermelon_thickness], center = true);\n    }\n    \n    // White rind layer\n    color(light_rind_color) {\n        difference() {\n            // Outer rind sphere\n            sphere(r = watermelon_radius);\n            \n            // Cut inner sphere for white rind\n            translate([0, 0, -watermelon_thickness/2 + rind_thickness])\n            sphere(r = watermelon_radius - rind_thickness);\n            \n            // Cut slice shape\n            translate([0, -watermelon_radius, 0])\n            cube([watermelon_radius * 2, watermelon_radius, watermelon_thickness], center = true);\n        }\n    }\n    \n    // Green outer rind\n    color(rind_color) {\n        difference() {\n            sphere(r = watermelon_radius);\n            translate([0, 0, -watermelon_thickness/2 + rind_thickness])\n            sphere(r = watermelon_radius - rind_thickness);\n            translate([0, -watermelon_radius, 0])\n            cube([watermelon_radius * 2, watermelon_radius, watermelon_thickness], center = true);\n        }\n    }\n}\n\n// Create seed module\nmodule seed() {\n    color(seed_color)\n    rotate([90, 0, 0])\n    scale([seed_radius, seed_length, seed_radius])\n    sphere(r = 1);\n}\n\n// Place seeds in realistic pattern\nmodule place_seeds() {\n    for (i = [0:seed_count-1]) {\n        angle = i * 137.5;  // Golden angle for natural distribution\n        radius = 10 + ((i * 2) % 15);\n        height = 2 + sin(i * 0.8) * 1.5;\n        \n        // Calculate position on curved surface\n        x = cos(angle) * radius;\n        y = sin(angle) * radius - watermelon_radius/2;\n        z = sqrt(watermelon_radius*watermelon_radius - (x*x + y*y)) - watermelon_radius + height;\n        \n        // Only place seeds within slice bounds\n        if (x > 0 && y > -watermelon_radius/2 && z > -watermelon_thickness/2 + rind_thickness + 1) {\n            translate([x, y, z])\n            rotate([0, 0, angle + 90])\n            seed();\n        }\n    }\n}\n\n// Add subtle texture lines\nmodule flesh_texture() {\n    color([flesh_color[0]*0.9, flesh_color[1]*0.9, flesh_color[2]*0.9])\n    for (i = [0:5]) {\n        rotate([0, 0, i * 15])\n        translate([0, watermelon_radius/4, -watermelon_thickness/2 + rind_thickness + 1])\n        scale([0.3, watermelon_radius/2, 0.3])\n        sphere(r = 1);\n    }\n}\n\n// Main assembly\nrotate([0, -30, 0])\nunion() {\n    watermelon_slice();\n    place_seeds();\n    flesh_texture();\n}",
    "renders": true
  },
  {
    "food_item": "firni",
    "openscad_code": "// Firni (Indian rice pudding) in realistic style\n// Medium complexity: includes bowl, pudding surface texture, saffron, almonds, pistachios\n\n// Bowl parameters\nbowl_outer_d = 80;\nbowl_inner_d = 70;\nbowl_height = 35;\nwall_thickness = 5;\nbase_thickness = 4;\n\n// Pudding parameters\npudding_height = 25;\nsurface_texture_height = 1.5;\n\n// Garnish parameters\nsaffron_strands = 12;\nalmond_count = 8;\npistachio_count = 10;\n\n// Colors\ncolor_bowl = [0.9, 0.9, 0.9];  // Off-white ceramic\ncolor_pudding = [0.98, 0.95, 0.85];  // Creamy off-white\ncolor_saffron = [0.9, 0.5, 0.1];  // Deep orange\ncolor_almond = [0.95, 0.85, 0.7];  // Light beige\ncolor_pistachio = [0.7, 0.85, 0.6];  // Light green\n\nmodule bowl() {\n    // Outer bowl\n    color(color_bowl)\n    difference() {\n        cylinder(h = bowl_height, d = bowl_outer_d, $fn = 64);\n        \n        // Hollow out the inside\n        translate([0, 0, base_thickness])\n        cylinder(h = bowl_height - base_thickness + 1, d = bowl_inner_d, $fn = 64);\n    }\n    \n    // Add base\n    translate([0, 0, -base_thickness])\n    cylinder(h = base_thickness, d = bowl_outer_d, $fn = 64);\n}\n\nmodule pudding_surface() {\n    color(color_pudding)\n    difference() {\n        // Main pudding\n        translate([0, 0, base_thickness])\n        cylinder(h = pudding_height, d = bowl_inner_d - 2, $fn = 64);\n        \n        // Scoop out center slightly for realistic serving\n        translate([0, 0, base_thickness + pudding_height/2])\n        sphere(d = bowl_inner_d - 10, $fn = 32);\n    }\n    \n    // Add surface texture - small ripples\n    for(i = [0:8]) {\n        rotate([0, 0, i * 45])\n        translate([0, (bowl_inner_d - 10)/2 - 5, base_thickness + pudding_height - surface_texture_height/2])\n        scale([1, 0.3, 1])\n        sphere(d = 10 + i, $fn = 16);\n    }\n}\n\nmodule saffron_strand(x, y, angle) {\n    color(color_saffron)\n    translate([x, y, base_thickness + pudding_height + 0.1])\n    rotate([0, 0, angle])\n    scale([1, 0.1, 0.1])\n    cylinder(h = 8, d = 1, $fn = 8);\n}\n\nmodule almond_slice(x, y, angle) {\n    color(color_almond)\n    translate([x, y, base_thickness + pudding_height + 0.2])\n    rotate([90, 0, angle])\n    scale([1, 0.3, 0.2])\n    cylinder(h = 6, d = 4, $fn = 8);\n}\n\nmodule pistachio_piece(x, y, angle) {\n    color(color_pistachio)\n    translate([x, y, base_thickness + pudding_height + 0.15])\n    rotate([0, 0, angle])\n    scale([0.8, 0.6, 0.4])\n    sphere(d = 3, $fn = 8);\n}\n\n// Assembly\nbowl();\npudding_surface();\n\n// Add saffron strands\nfor(i = [0:saffron_strands-1]) {\n    angle = i * 360 / saffron_strands;\n    radius = (bowl_inner_d - 20) / 2 * (0.5 + sin(i * 30) * 0.3);\n    saffron_strand(\n        cos(angle) * radius,\n        sin(angle) * radius,\n        angle + 45\n    );\n}\n\n// Add almond slices\nfor(i = [0:almond_count-1]) {\n    angle = i * 360 / almond_count + 15;\n    radius = (bowl_inner_d - 25) / 2;\n    almond_slice(\n        cos(angle) * radius,\n        sin(angle) * radius,\n        angle\n    );\n}\n\n// Add pistachio pieces\nfor(i = [0:pistachio_count-1]) {\n    angle = i * 360 / pistachio_count + 30;\n    radius = (bowl_inner_d - 15) / 2 * 0.7;\n    pistachio_piece(\n        cos(angle) * radius,\n        sin(angle) * radius,\n        angle + 90\n    );\n}",
    "renders": true
  },
  {
    "food_item": "kheer",
    "openscad_code": "// Kheer (Indian Rice Pudding) - Realistic Style\n// A semi-solid creamy dessert with rice grains, nuts and saffron strands\n\n$fn = 32;\n\n// Main color definitions\ncolor_rice = [1, 0.95, 0.85];\ncolor_cream = [0.98, 0.92, 0.82];\ncolor_saffron = [0.95, 0.7, 0.2];\ncolor_cardamom = [0.1, 0.6, 0.1];\ncolor_almond = [0.95, 0.85, 0.7];\ncolor_raisin = [0.4, 0.2, 0.1];\n\n// Main bowl of kheer\nmodule kheer_bowl() {\n    difference() {\n        // Outer bowl shape\n        cylinder(h = 25, r1 = 40, r2 = 35, center = false);\n        \n        // Hollow interior\n        translate([0, 0, 2])\n            cylinder(h = 23, r1 = 37, r2 = 32, center = false);\n    }\n}\n\n// Creamy kheer base\nmodule kheer_base() {\n    color(color_cream) {\n        translate([0, 0, 2])\n            cylinder(h = 20, r1 = 36, r2 = 31, center = false);\n    }\n}\n\n// Individual rice grain\nmodule rice_grain(x, y, z) {\n    color(color_rice) {\n        translate([x, y, z])\n            rotate([rand(0, 90), rand(0, 90), rand(0, 90)])\n                scale([1, 0.3, 0.2])\n                    sphere(r = 1.5);\n    }\n}\n\n// Generate random rice grains\nmodule rice_grains() {\n    for(i = [0:30]) {\n        rice_grain(\n            rand(-30, 30),\n            rand(-30, 30),\n            rand(5, 20)\n        );\n    }\n}\n\n// Almond slice\nmodule almond_slice(x, y, z) {\n    color(color_almond) {\n        translate([x, y, z])\n            rotate([90, 0, rand(0, 360)])\n                scale([2, 1.5, 0.5])\n                    cylinder(h = 0.5, r = 2);\n    }\n}\n\n// Raisin\nmodule raisin(x, y, z) {\n    color(color_raisin) {\n        translate([x, y, z])\n            scale([1, 0.7, 0.7])\n                sphere(r = 1.5);\n    }\n}\n\n// Saffron strand\nmodule saffron_strand(x, y, z) {\n    color(color_saffron) {\n        translate([x, y, z])\n            rotate([90, 0, rand(0, 360)])\n                cylinder(h = 15, r = 0.3, center = false);\n    }\n}\n\n// Cardamom seed\nmodule cardamom_seed(x, y, z) {\n    color(color_cardamom) {\n        translate([x, y, z])\n            scale([0.8, 0.5, 0.5])\n                sphere(r = 0.8);\n    }\n}\n\n// Generate nuts and raisins\nmodule nuts_and_raisins() {\n    for(i = [0:10]) {\n        almond_slice(rand(-25, 25), rand(-25, 25), rand(15, 22));\n        raisin(rand(-28, 28), rand(-28, 28), rand(12, 20));\n    }\n}\n\n// Generate saffron strands\nmodule saffron_strands() {\n    for(i = [0:5]) {\n        saffron_strand(rand(-20, 20), rand(-20, 20), rand(18, 22));\n    }\n}\n\n// Cardamom seeds scattered on top\nmodule cardamom_seeds() {\n    for(i = [0:8]) {\n        cardamom_seed(rand(-25, 25), rand(-25, 25), 22);\n    }\n}\n\n// Cream swirls on top\nmodule cream_swirls() {\n    for(i = [0:3]) {\n        color(color_cream) {\n            translate([rand(-15, 15), rand(-15, 15), 22])\n                rotate([0, 0, rand(0, 360)])\n                    scale([1, 0.5, 1])\n                        cylinder(h = 1, r = rand(5, 8));\n        }\n    }\n}\n\n// Random number generator\nfunction rand(min, max) = min + rands(0, 1, 1)[0] * (max - min);\n\n// Assemble the complete kheer\nkheer_bowl();\nkheer_base();\nrice_grains();\nnuts_and_raisins();\nsaffron_strands();\ncardamom_seeds();\ncream_swirls();",
    "renders": true
  },
  {
    "food_item": "payasam",
    "openscad_code": "// Payasam bowl with contents\n// Traditional South Indian dessert with rice, milk and garnishes\n\nbowl_height = 25;\nbowl_outer_dia = 60;\nwall_thickness = 2;\nbase_thickness = 4;\ncontents_height = 18;\n\nmodule bowl() {\n    difference() {\n        // outer bowl\n        cylinder(h = bowl_height, d = bowl_outer_dia, $fn = 60);\n        // hollow inside\n        translate([0, 0, base_thickness])\n            cylinder(h = bowl_height - base_thickness + 1, \n                     d = bowl_outer_dia - 2 * wall_thickness, \n                     $fn = 60);\n    }\n}\n\nmodule rice_grain() {\n    // single rice grain\n    scale([1, 0.4, 0.3])\n        sphere(d = 2.5, $fn = 12);\n}\n\nmodule rice_layer() {\n    // layer of rice grains in payasam\n    for(i = [0:12]) {\n        for(j = [0:8]) {\n            if(i % 2 == 0) {\n                translate([i * 4 - 24, j * 5 - 20, contents_height / 2])\n                    rice_grain();\n            } else {\n                translate([i * 4 - 24, j * 5 - 22.5, contents_height / 2])\n                    rice_grain();\n            }\n        }\n    }\n}\n\nmodule cashew() {\n    // cashew nut half\n    difference() {\n        scale([1, 0.4, 0.5])\n            sphere(d = 6, $fn = 16);\n        translate([0, 0, -0.1])\n            cube([7, 7, 1.5], center = true);\n    }\n}\n\nmodule raisins() {\n    // small raisin\n    scale([0.8, 1, 1.2])\n        sphere(d = 3, $fn = 8);\n}\n\nmodule garnish() {\n    // floating cashews and raisins\n    color(\"goldenrod\")\n    for(i = [0:5]) {\n        rotate([0, 0, i * 60])\n            translate([15 + i * 2, 0, contents_height + 2])\n                rotate([0, 0, 45])\n                    cashew();\n    }\n    \n    color(\"saddlebrown\")\n    for(i = [0:7]) {\n        rotate([0, 0, i * 51])\n            translate([10 + i * 1.5, 0, contents_height + 1])\n                raisins();\n    }\n}\n\nmodule payasam_contents() {\n    // liquid base\n    color(\"cornsilk\")\n    translate([0, 0, base_thickness])\n        cylinder(h = contents_height, \n                 d = bowl_outer_dia - 2 * wall_thickness - 2, \n                 $fn = 60);\n    \n    // rice grains\n    color(\"ivory\")\n    rice_layer();\n    \n    // garnish on top\n    garnish();\n}\n\n// Main assembly\ncolor(\"burlywood\")\nbowl();\n\ntranslate([0, 0, 0.5])\n    payasam_contents();",
    "renders": true
  },
  {
    "food_item": "shrikhand",
    "openscad_code": "// Shrikhand - Indian strained yogurt dessert\n// Medium complexity realistic style\n\n// Main parameters\n$fn = 32;\nbowl_diameter = 60;\nbowl_height = 35;\nshrikhand_height = 25;\nsaffron_strands = 8;\n\nmodule bowl() {\n    // Outer bowl\n    difference() {\n        cylinder(h = bowl_height, d1 = bowl_diameter, d2 = bowl_diameter * 0.9);\n        translate([0, 0, 2])\n            cylinder(h = bowl_height, d1 = bowl_diameter - 4, d2 = bowl_diameter * 0.9 - 4);\n    }\n    \n    // Bowl base\n    translate([0, 0, -1])\n        cylinder(h = 3, d = bowl_diameter * 0.7);\n}\n\nmodule shrikhand_surface() {\n    // Create textured surface with swirls\n    color([1, 0.95, 0.8])\n    for(i = [0:5:360]) {\n        rotate([0, 0, i])\n        translate([i/20, 0, shrikhand_height + sin(i*3)*0.5])\n            sphere(d = 3 - i/50);\n    }\n}\n\nmodule shrikhand_body() {\n    color([1, 0.92, 0.75])\n    difference() {\n        // Main body - slightly domed\n        translate([0, 0, bowl_height - shrikhand_height])\n            cylinder(h = shrikhand_height, d1 = bowl_diameter - 6, d2 = bowl_diameter - 8);\n        \n        // Create slight depression in center\n        translate([0, 0, bowl_height - shrikhand_height + 2])\n            sphere(d = 20);\n    }\n}\n\nmodule pistachio() {\n    color([0.4, 0.7, 0.4])\n    scale([1, 0.6, 0.3])\n        sphere(d = 3);\n}\n\nmodule almonds() {\n    color([0.9, 0.8, 0.6])\n    scale([1.2, 0.7, 0.4])\n        sphere(d = 4);\n}\n\nmodule saffron_strand() {\n    color([0.9, 0.7, 0.2])\n    rotate([90, 0, 0])\n        cylinder(h = 8, d = 0.3);\n}\n\nmodule garnish() {\n    // Pistachios around edge\n    for(i = [0:45:360]) {\n        rotate([0, 0, i])\n        translate([bowl_diameter/2 - 8, 0, bowl_height - shrikhand_height + 1])\n            pistachio();\n    }\n    \n    // Almond slivers\n    for(i = [22.5:45:360]) {\n        rotate([0, 0, i])\n        translate([bowl_diameter/2 - 12, 0, bowl_height - shrikhand_height + 1.5])\n            almonds();\n    }\n    \n    // Saffron strands in center\n    for(i = [0:360/saffron_strands:360]) {\n        rotate([0, 0, i])\n        translate([5, 0, bowl_height - shrikhand_height/2])\n            saffron_strand();\n    }\n}\n\n// Assembly\nbowl();\nshrikhand_body();\nshrikhand_surface();\ngarnish();",
    "renders": true
  },
  {
    "food_item": "rabri",
    "openscad_code": "// Rabri - a thickened sweetened milk dessert\n// Overall dimensions: 60mm diameter x 35mm height\n\n// Base color for rabri - creamy off-white\ncolor([1, 0.98, 0.93]) \n\n// Main rabri body - slightly irregular mound\nunion() {\n    // Center dome\n    translate([0, 0, 5]) \n    scale([1, 1, 0.7]) \n    sphere(d=50, $fn=64);\n    \n    // Irregular edges - simulate hand-scooped look\n    for(i=[0:30:359]) {\n        rotate([0, 0, i]) \n        translate([20 + sin(i*3)*3, 0, 0]) \n        rotate([90, 0, 0]) \n        cylinder(h=8 + cos(i*2)*2, d1=8, d2=12, $fn=16);\n    }\n}\n\n// Thick malai layers on top\ncolor([1, 0.96, 0.88]) \ndifference() {\n    // Malai layer base\n    translate([0, 0, 20]) \n    scale([1.1, 1.1, 0.3]) \n    sphere(d=50, $fn=64);\n    \n    // Cut irregular edges for folded appearance\n    for(j=[0:45:359]) {\n        rotate([0, 0, j]) \n        translate([25, 0, 18]) \n        cube([15, 8, 10], center=true);\n    }\n}\n\n// Cardamom flakes scattered on top\ncolor([0.85, 0.7, 0.5]) \nfor(k=[0:20:359]) {\n    rotate([0, 0, k]) \n    translate([15 + sin(k*7)*8, cos(k*5)*8, 23]) \n    scale([1, 0.4, 0.1]) \n    sphere(d=2, $fn=8);\n}\n\n// Pistachio slivers\ncolor([0.4, 0.8, 0.4]) \nfor(m=[0:40:359]) {\n    rotate([0, 0, m]) \n    translate([12 + cos(m*3)*10, sin(m*4)*10, 24]) \n    rotate([90, 0, m*5]) \n    scale([1, 0.3, 0.1]) \n    cylinder(h=3, d=1.5, $fn=6);\n}\n\n// Almond flakes\ncolor([1, 0.9, 0.7]) \nfor(n=[0:50:359]) {\n    rotate([0, 0, n]) \n    translate([18 + sin(n*2)*6, cos(n*3)*6, 25]) \n    rotate([0, 90, 0]) \n    scale([1.2, 0.6, 0.1]) \n    cylinder(h=2.5, d=1.8, $fn=4);\n}\n\n// Saffron strands\ncolor([1, 0.8, 0.2]) \nfor(p=[0:60:359]) {\n    rotate([0, 0, p]) \n    translate([10 + cos(p*4)*5, sin(p*2)*5, 26]) \n    rotate([90, 0, p*3]) \n    scale([0.1, 0.1, 1]) \n    cylinder(h=4, d=0.3, $fn=8);\n}\n\n// Bowl base for stability\ncolor([1, 0.98, 0.93]) \ndifference() {\n    cylinder(h=5, d=55, $fn=64);\n    cylinder(h=6, d=45, $fn=64);\n}",
    "renders": true
  },
  {
    "food_item": "mishti",
    "openscad_code": "// Realistic Rasgulla Mishti - Medium Complexity\n// Soft cottage cheese balls soaked in sugar syrup\n\n// Main module for complete rasgulla\nmodule rasgulla() {\n    color(\"snow\") \n    union() {\n        // Main spherical body\n        translate([0, 0, 0]) \n        sphere(d=45, $fn=64);\n        \n        // Surface texture - small indentations\n        for(i = [0:5:355]) {\n            rotate([0, 0, i]) \n            translate([22, 0, 5]) \n            rotate([90, 0, 0]) \n            cylinder(h=2, d1=3, d2=1, $fn=16);\n        }\n        \n        // Second ring of texture\n        for(i = [15:10:355]) {\n            rotate([0, 0, i]) \n            translate([20, 0, -8]) \n            rotate([90, 0, 0]) \n            cylinder(h=1.5, d1=2.5, d2=1, $fn=12);\n        }\n        \n        // Bottom flat surface for printing\n        translate([0, 0, -22.5]) \n        cylinder(h=1, d=45.5, $fn=64);\n    }\n    \n    // Syrup droplets on surface\n    color(\"honeydew\") \n    for(j = [0:30:330]) {\n        a = j + 15;\n        rotate([0, 0, a]) \n        translate([18 * cos(30), 18 * sin(30), 20]) \n        sphere(d=1.5, $fn=12);\n    }\n}\n\n// Create a pair of rasgullas\ntranslate([-30, 0, 0]) rasgulla();\ntranslate([30, 0, 0]) rasgulla();",
    "renders": true
  },
  {
    "food_item": "sandesh",
    "openscad_code": "// Sandesh - Bengali sweet cottage cheese dessert\n// Realistic style with medium complexity\n\n// Main module to generate the complete sandesh\nmodule sandesh_piece() {\n    // 1. Base diamond shape (main body)\n    color(\"Beige\") {\n        union() {\n            // Main body - diamond shaped with rounded edges\n            difference() {\n                // Base diamond\n                cube([45, 45, 20], center = true);\n                \n                // Rounded edges using sphere subtraction\n                translate([0, 0, 10]) {\n                    sphere(r = 25, $fn = 32);\n                }\n            }\n            \n            // 2. Top surface - slightly curved\n            translate([0, 0, 10]) {\n                scale([1.1, 1.1, 0.3]) {\n                    sphere(r = 20, $fn = 32);\n                }\n            }\n        }\n    }\n    \n    // 3. Decorative patterns - traditional concentric circles\n    color(\"Ivory\") {\n        for(i = [1:3]) {\n            translate([0, 0, 15 + i*0.5]) {\n                cylinder(h = 0.5, r = 20 - i*5, $fn = 32);\n            }\n        }\n    }\n    \n    // 4. Surface texture - small indentations\n    color(\"AntiqueWhite\") {\n        for(x = [-20:10:20]) {\n            for(y = [-20:10:20]) {\n                if(abs(x) + abs(y) < 25) {\n                    translate([x, y, 16]) {\n                        rotate([0, 180, 0]) {\n                            cylinder(h = 1, r1 = 1.5, r2 = 0.5, $fn = 12);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // 5. Pistachio garnish pieces\n    color(\"DarkGreen\") {\n        for(i = [1:5]) {\n            angle = i * 72;\n            rotate([0, 0, angle]) {\n                translate([0, 15, 17]) {\n                    scale([1, 1.5, 0.3]) {\n                        sphere(r = 2, $fn = 8);\n                    }\n                }\n            }\n        }\n    }\n    \n    // 6. Saffron strands\n    color(\"DarkOrange\") {\n        for(i = [1:4]) {\n            angle = i * 90 + 45;\n            rotate([0, 0, angle]) {\n                translate([0, 10, 17.5]) {\n                    rotate([45, 0, 0]) {\n                        cylinder(h = 8, r1 = 0.5, r2 = 0.1, $fn = 6);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Generate the sandesh piece\nsandesh_piece();",
    "renders": true
  },
  {
    "food_item": "chamcham",
    "openscad_code": "// Chamcham - Bengali sweet dessert\n// Size: ~60mm length\n\n// Base color - cream for chhena\ncolor(\"lemonchiffon\") \ndifference() {\n    union() {\n        // Main cylindrical body\n        translate([0, 0, 10])\n            scale([1.2, 1, 0.8])\n            sphere(d=50, $fn=60);\n        \n        // Two rounded ends\n        translate([-28, 0, 10])\n            rotate([0, 90, 0])\n            cylinder(h=30, d1=40, d2=30, $fn=30);\n            \n        translate([28, 0, 10])\n            rotate([0, 90, 0])\n            cylinder(h=30, d1=40, d2=30, $fn=30);\n            \n        // Top ridge for authentic shape\n        translate([0, 0, 35])\n            scale([1, 0.7, 0.3])\n            sphere(d=40, $fn=50);\n    }\n    \n    // Hollow center\n    translate([0, 0, 10])\n        scale([1.1, 0.9, 0.7])\n        sphere(d=35, $fn=60);\n}\n\n// Syrup coating - glossy outer layer\ncolor(\"goldenrod\") {\n    difference() {\n        // Thin outer shell\n        translate([0, 0, 10])\n            scale([1.22, 1.02, 0.82])\n            sphere(d=52, $fn=60);\n            \n        // Cut main body\n        translate([0, 0, 10])\n            scale([1.2, 1, 0.8])\n            sphere(d=50.5, $fn=60);\n    }\n}\n\n// Sugar granules texture on surface\nmodule sugar_granule(x, y, z, size) {\n    translate([x, y, z])\n        color(\"white\")\n        sphere(d=size, $fn=8);\n}\n\n// Random sugar granules over surface\nfor(i=[1:50]) {\n    angle = i * 137.5;\n    radius = 25 + sin(i * 10) * 5;\n    x = cos(angle) * radius * 1.2;\n    y = sin(angle) * radius;\n    z = 10 + abs(sin(i * 0.5)) * 25;\n    sugar_granule(x, y, z, 1 + sin(i) * 0.5);\n}\n\n// Coconut flakes on top\nmodule coconut_flake(x, y, z, rot) {\n    translate([x, y, z])\n        rotate([0, 0, rot])\n        color(\"ivory\")\n        scale([1, 0.3, 0.1])\n        cube([4, 2, 1], center=true);\n}\n\n// Sprinkle coconut flakes\nfor(i=[1:20]) {\n    angle = i * 79;\n    dist = 10 + sin(i * 3) * 8;\n    x = cos(angle) * dist;\n    y = sin(angle) * dist;\n    z = 35 + sin(i * 5) * 3;\n    coconut_flake(x, y, z, i * 45);\n}",
    "renders": true
  },
  {
    "food_item": "malpua",
    "openscad_code": "// Malpua - Indian sweet pancake dessert\n// Realistic style with medium complexity\n\n// Color definitions\n$fa = 1;\n$fs = 0.4;\n\n// Main malpua module\nmodule malpua() {\n    // Base pancake body\n    color(\"#D2691E\") \n    difference() {\n        // Main disc shape\n        scale([1, 0.9, 0.3]) \n        sphere(d=60, $fn=100);\n        \n        // Center depression\n        translate([0, 0, -1])\n        scale([1, 1, 0.5])\n        sphere(d=40, $fn=100);\n    }\n    \n    // Rolled edges\n    color(\"#CD853F\")\n    rotate_extrude($fn=100)\n    translate([28, 0, 0])\n    rotate([0, 90, 0])\n    circle(d=8, $fn=20);\n    \n    // Surface texture - bubbles\n    for(i = [0:15]) {\n        angle = i * 24 + (i % 3) * 15;\n        radius = 20 + (i % 4) * 5;\n        translate([\n            cos(angle) * radius,\n            sin(angle) * radius,\n            8 + sin(i * 45) * 0.8\n        ])\n        color(\"#8B4513\")\n        sphere(d=3 + (i % 3) * 1.5);\n    }\n    \n    // Sugar syrup pools\n    color(\"#FFD700\", 0.7)\n    for(i = [0:8]) {\n        angle = i * 45;\n        radius = 15 + (i % 2) * 10;\n        translate([\n            cos(angle) * radius,\n            sin(angle) * radius,\n            9\n        ])\n        scale([1, 1, 0.1])\n        sphere(d=6 + (i % 3) * 2);\n    }\n    \n    // Garnish - pistachio pieces\n    color(\"#228B22\")\n    for(i = [0:12]) {\n        angle = i * 30;\n        radius = 22 + (i % 3) * 8;\n        translate([\n            cos(angle) * radius,\n            sin(angle) * radius,\n            10\n        ])\n        rotate([0, 0, angle])\n        scale([1, 0.3, 0.1])\n        cube([4, 2, 0.5], center=true);\n    }\n    \n    // Garnish - almond slivers\n    color(\"#DEB887\")\n    for(i = [0:10]) {\n        angle = i * 36 + 15;\n        radius = 18 + (i % 4) * 7;\n        translate([\n            cos(angle) * radius,\n            sin(angle) * radius,\n            10.2\n        ])\n        rotate([0, 0, angle + 45])\n        scale([0.1, 1, 0.1])\n        cylinder(h=4, d=1.5);\n    }\n    \n    // Cardamom seeds\n    color(\"#8B7355\")\n    for(i = [0:20]) {\n        angle = i * 18 + (i % 2) * 9;\n        radius = 8 + (i % 5) * 6;\n        translate([\n            cos(angle) * radius,\n            sin(angle) * radius,\n            9.5\n        ])\n        sphere(d=0.8);\n    }\n}\n\n// Create the malpua\ntranslate([0, 0, 5])\nmalpua();",
    "renders": true
  },
  {
    "food_item": "modak",
    "openscad_code": "// Realistic Modak (Indian Sweet Dumpling)\n// Medium complexity 3D printable model\n\n// Main parameters\n$fn = 50;\nmodak_height = 65;\nbase_width = 35;\ntop_knob_height = 8;\ntexture_depth = 1.5;\nwall_thickness = 2;\n\n// Colors\nrice_color = [1, 0.95, 0.85];\njaggery_color = [0.7, 0.4, 0.2];\ncoconut_color = [0.9, 0.85, 0.7];\n\n// Main modak assembly\nmodule modak() {\n    color(rice_color) {\n        union() {\n            // Base hemisphere\n            translate([0, 0, modak_height/2 - 5])\n                scale([1, 1, 0.7])\n                sphere(d = base_width);\n            \n            // Middle section with pleated texture\n            pleated_middle();\n            \n            // Top cone\n            translate([0, 0, modak_height - top_knob_height - 10])\n                cylinder(h1 = 20, h2 = 0, r1 = base_width/2 - 5, r2 = 0);\n            \n            // Top knob\n            translate([0, 0, modak_height - top_knob_height])\n                sphere(d = top_knob_height * 2);\n        }\n    }\n    \n    // Filling visible through opening\n    color(jaggery_color)\n    translate([0, 0, 10])\n        sphere(d = base_width - 10);\n    \n    // Coconut flakes on top\n    color(coconut_color)\n    coconut_topping();\n}\n\n// Create pleated middle section\nmodule pleated_middle() {\n    for(i = [0:15:359]) {\n        rotate([0, 0, i])\n        translate([base_width/2 - 5, 0, 20])\n            rotate([90, 0, 0])\n            scale([1, 0.3, 1])\n            cylinder(h = 25, r = 3);\n    }\n}\n\n// Add coconut topping texture\nmodule coconut_topping() {\n    for(i = [0:30:359]) {\n        rotate([0, 0, i])\n        translate([0, base_width/3, modak_height - 5])\n            scale([0.5, 0.5, 0.1])\n            sphere(d = 3);\n    }\n    \n    for(i = [15:30:359]) {\n        rotate([0, 0, i])\n        translate([0, base_width/4, modak_height - 3])\n            scale([0.4, 0.4, 0.1])\n            sphere(d = 2);\n    }\n}\n\n// Create base platform for printing\nmodule base_platform() {\n    color([0.9, 0.9, 0.9])\n    translate([0, 0, -1])\n        cylinder(h = 2, r = base_width/2 + 5);\n}\n\n// Assembly\nbase_platform();\nmodak();",
    "renders": true
  },
  {
    "food_item": "mysorepak",
    "openscad_code": "// Mysorepak - South Indian ghee sweet with porous texture\n// Dimensions: 75mm x 50mm x 25mm (printable size)\n\n// Main parameters\nbar_length = 75;\nbar_width = 50;\nbar_height = 25;\ncrumb_size = 1.5;\ncrumb_density = 0.7;\nlayer_count = 8;\n\n// Color definitions\nghee_color = [1.0, 0.7, 0.3];  // Golden yellow\ndark_ghee_color = [0.9, 0.6, 0.2];\nburnt_edge_color = [0.7, 0.4, 0.1];\n\n// Create porous crumb texture\nmodule crumb(x, y, z) {\n    translate([x, y, z])\n        sphere(crumb_size * (0.7 + rand() * 0.6), $fn=8);\n}\n\n// Generate random number between 0 and 1\nfunction rand(n=0) = rands(0, 1, 1, n)[0];\n\n// Create crumb layer with holes\nmodule crumb_layer(height) {\n    difference() {\n        // Solid layer\n        color(ghee_color)\n            cube([bar_length, bar_width, 2], center=true);\n        \n        // Add random holes for porous texture\n        for (i = [0:50]) {\n            x = (rand(i*3) - 0.5) * bar_length;\n            y = (rand(i*7) - 0.5) * bar_width;\n            z = height + (rand(i*11) - 0.5);\n            translate([x, y, z])\n                sphere(crumb_size * 2, $fn=6);\n        }\n    }\n}\n\n// Main mysorepak bar\nmodule mysorepak_bar() {\n    // Base shape with rounded edges\n    difference() {\n        // Main bar slightly tapered\n        color(ghee_color)\n            scale([1, 1, 1])\n                cube([bar_length, bar_width, bar_height], center=true);\n        \n        // Chamfer bottom edges\n        translate([0, 0, -bar_height/2 - 0.1])\n            cube([bar_length + 2, bar_width + 2, 2], center=true);\n        \n        // Add chamfers on sides\n        for (i = [-1, 1]) {\n            translate([i * bar_length/2, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h=bar_width+2, r=2, center=true);\n        }\n    }\n    \n    // Add porous layers\n    for (layer = [0:layer_count-1]) {\n        z_pos = -bar_height/2 + 2 + layer * (bar_height - 4) / layer_count;\n        translate([0, 0, z_pos])\n            crumb_layer(z_pos);\n    }\n    \n    // Surface texture bumps\n    for (i = [0:200]) {\n        x = (rand(i*13) - 0.5) * (bar_length - 4);\n        y = (rand(i*17) - 0.5) * (bar_width - 4);\n        z = bar_height/2 - 0.5;\n        \n        if (abs(x) < bar_length/2 - 2 && abs(y) < bar_width/2 - 2) {\n            translate([x, y, z])\n                color(dark_ghee_color)\n                    sphere(crumb_size * 0.6, $fn=6);\n        }\n    }\n    \n    // Burnt edges for authenticity\n    edge_width = 2;\n    \n    // Top edge browning\n    translate([0, 0, bar_height/2 - 0.5])\n        color(burnt_edge_color)\n            cube([bar_length + 0.5, bar_width + 0.5, 1], center=true);\n    \n    // Side edge browning\n    for (side = [-1, 1]) {\n        translate([side * (bar_length/2 - 0.5), 0, 0])\n            color(burnt_edge_color)\n                cube([1, bar_width + 0.5, bar_height], center=true);\n    }\n}\n\n// Create the complete mysorepak\nmysorepak_bar();",
    "renders": true
  },
  {
    "food_item": "petha",
    "openscad_code": "// Petha - A translucent North Indian sweet made from ash gourd\n// Dimensions for 3D printing (approx 60mm diameter, 30mm height)\n\n// Parameters\n$fn = 32;\npetha_radius = 30;\npetha_height = 30;\nwall_thickness = 2;\nseed_count = 8;\n\n// Main petha body - cylindrical with slight taper and rounded top\nmodule petha_body() {\n    // Outer translucent white body\n    color([1, 1, 0.95, 0.6]) {\n        // Main cylindrical base with slight taper\n        cylinder(h = petha_height * 0.7, r1 = petha_radius, r2 = petha_radius * 0.95, center = true);\n        \n        // Rounded top dome\n        translate([0, 0, petha_height * 0.35])\n            scale([1, 1, 0.7])\n                sphere(r = petha_radius * 0.95);\n    }\n    \n    // Inner hollow space for printing\n    color([1, 1, 0.95, 0.6]) {\n        difference() {\n            cylinder(h = petha_height * 0.7, r1 = petha_radius - wall_thickness, \n                    r2 = (petha_radius * 0.95) - wall_thickness, center = true);\n            translate([0, 0, petha_height * 0.35])\n                scale([1, 1, 0.7])\n                    sphere(r = (petha_radius * 0.95) - wall_thickness);\n        }\n    }\n}\n\n// Sugar syrup texture on surface\nmodule syrup_coating() {\n    color([1, 1, 0.85, 0.4]) {\n        for(i = [0:15]) {\n            rotate([0, 0, i * 24])\n                translate([petha_radius * 0.7, 0, petha_height * 0.2])\n                    cube([petha_radius * 0.3, 0.5, 1], center = true);\n        }\n        \n        // Random syrup droplets\n        for(i = [0:5]) {\n            translate([\n                petha_radius * 0.8 * cos(i * 60),\n                petha_radius * 0.8 * sin(i * 60),\n                petha_height * 0.3\n            ])\n                sphere(r = 1.5);\n        }\n    }\n}\n\n// Petha seeds inside\nmodule seeds() {\n    color([0.4, 0.2, 0.1]) {\n        for(i = [0:seed_count-1]) {\n            angle = i * (360 / seed_count);\n            radius = petha_radius * 0.5;\n            translate([\n                radius * cos(angle),\n                radius * sin(angle),\n                petha_height * 0.1\n            ]) {\n                scale([1, 1.5, 0.5])\n                    sphere(r = 2);\n            }\n        }\n    }\n}\n\n// Surface texture lines\nmodule surface_texture() {\n    color([1, 1, 0.9, 0.3]) {\n        // Vertical grooves\n        for(i = [0:17]) {\n            rotate([0, 0, i * 20])\n                translate([petha_radius - 0.5, 0, 0])\n                    cube([1, petha_radius * 0.1, petha_height * 0.8], center = true);\n        }\n        \n        // Horizontal rings\n        for(h = [0.2:0.2:0.8]) {\n            translate([0, 0, petha_height * h - petha_height * 0.5])\n                rotate_extrude()\n                    translate([petha_radius - 0.5, 0])\n                        circle(r = 0.5);\n        }\n    }\n}\n\n// Assemble the complete petha\nunion() {\n    petha_body();\n    syrup_coating();\n    seeds();\n    surface_texture();\n}",
    "renders": true
  },
  {
    "food_item": "soan",
    "openscad_code": "// Soan Papdi - Indian flaky sweet dessert\n// Dimensions: 80mm x 80mm x 25mm\n\n// Color definitions\ncolor_sweet = [1, 0.85, 0.7];  // Light golden\ncolor_cardamom = [0.4, 0.8, 0.4];  // Green\ncolor_pistachio = [0.6, 0.9, 0.4];  // Light green\ncolor_almond = [0.95, 0.8, 0.7];  // Off-white\n\n// Main module for the soan papdi\nmodule soan_papdi() {\n    // Base block with rounded edges\n    difference() {\n        // Main body\n        union() {\n            translate([0, 0, 12.5]) \n                scale([1, 1, 0.9])\n                cube([80, 80, 25], center=true);\n            \n            // Rounded top and bottom\n            translate([0, 0, 24]) \n                scale([1, 1, 0.3])\n                cube([80, 80, 5], center=true);\n            translate([0, 0, 1]) \n                scale([1, 1, 0.3])\n                cube([80, 80, 5], center=true);\n        }\n        \n        // Edge rounding\n        for (x = [-35, 35]) {\n            for (y = [-35, 35]) {\n                translate([x, y, 0])\n                    cylinder(h=30, r=5, center=true);\n            }\n        }\n    }\n}\n\n// Flaky texture pattern\nmodule flaky_layers() {\n    color(color_sweet) {\n        difference() {\n            soan_papdi();\n            \n            // Horizontal flaky layers\n            for (z = [5:2:20]) {\n                translate([0, 0, z]) {\n                    cube([82, 82, 0.5], center=true);\n                }\n            }\n            \n            // Diagonal flaky patterns\n            for (angle = [30, 60]) {\n                rotate([0, 0, angle]) {\n                    for (i = [-40:5:40]) {\n                        translate([i, 0, 12.5]) {\n                            rotate([0, 90, 0])\n                                cube([0.3, 82, 25], center=true);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Cardamom seeds on top\nmodule cardamom_seeds() {\n    color(color_cardamom) {\n        for (i = [1:8]) {\n            theta = i * 45;\n            r = 20;\n            x = r * cos(theta);\n            y = r * sin(theta);\n            translate([x, y, 25.5]) {\n                scale([1, 0.7, 0.5])\n                    sphere(d=2);\n            }\n        }\n    }\n}\n\n// Pistachio bits\nmodule pistachio_bits() {\n    color(color_pistachio) {\n        seed_count = 12;\n        for (i = [1:seed_count]) {\n            theta = i * (360/seed_count);\n            r = 30 + (i % 2) * 10;\n            x = r * cos(theta);\n            y = r * sin(theta);\n            translate([x, y, 25.5]) {\n                scale([1.2, 0.8, 0.3])\n                    rotate([0, 0, theta])\n                        cube([3, 2, 1]);\n            }\n        }\n    }\n}\n\n// Almond flakes\nmodule almond_flakes() {\n    color(color_almond) {\n        flake_count = 6;\n        for (i = [1:flake_count]) {\n            theta = i * (360/flake_count) + 15;\n            r = 25;\n            x = r * cos(theta);\n            y = r * sin(theta);\n            translate([x, y, 25.7]) {\n                rotate([90, 0, theta])\n                    scale([1, 0.3, 2])\n                        cylinder(h=0.5, r=3);\n            }\n        }\n    }\n}\n\n// Main assembly\nflaky_layers();\ncardamom_seeds();\npistachio_bits();\nalmond_flakes();",
    "renders": true
  },
  {
    "food_item": "barquillo",
    "openscad_code": "// Barquillo - Spanish rolled wafer cookie\n// Realistic style, medium complexity\n\n// Constants\n$fn = 50;\ncookie_diameter = 25;\ncookie_length = 100;\nwall_thickness = 1.5;\nwafer_thickness = 0.8;\nridge_height = 0.3;\nridge_spacing = 2;\n\n// Main cookie module\nmodule barquillo() {\n    // Outer shell with wafer texture\n    difference() {\n        // Main tube\n        rotate([90, 0, 0])\n        cylinder(h=cookie_length, d=cookie_diameter, center=true);\n        \n        // Hollow center\n        rotate([90, 0, 0])\n        cylinder(h=cookie_length + 2, d=cookie_diameter - 2*wall_thickness, center=true);\n    }\n    \n    // Add wafer ridges on outer surface\n    for (i = [0:ridge_spacing:cookie_length]) {\n        translate([0, 0, i - cookie_length/2])\n        rotate([90, 0, 0])\n        rotate_extrude(angle=360, $fn=100)\n        translate([cookie_diameter/2, 0, 0])\n        square([ridge_height, wafer_thickness]);\n    }\n    \n    // Cross-hatch pattern\n    for (angle = [0:30:150]) {\n        rotate([0, 0, angle])\n        for (z = [-cookie_length/2:ridge_spacing:cookie_length/2]) {\n            translate([0, 0, z])\n            rotate([90, 0, 0])\n            cylinder(h=ridge_height*2, d=0.4, center=true);\n        }\n    }\n    \n    // Slightly flattened ends from rolling\n    translate([0, 0, cookie_length/2])\n    rotate([90, 0, 0])\n    scale([1, 1, 0.8])\n    cylinder(h=2, d=cookie_diameter, center=true);\n    \n    translate([0, 0, -cookie_length/2])\n    rotate([90, 0, 0])\n    scale([1, 1, 0.8])\n    cylinder(h=2, d=cookie_diameter, center=true);\n    \n    // Golden-brown coloring variation\n    for (i = [0:5:cookie_length-5]) {\n        translate([0, 0, i - cookie_length/2])\n        rotate([90, 0, 0])\n        color(\"burlywood\")\n        scale([1 + sin(i*3)*0.02, 1 + cos(i*3)*0.02, 1])\n        cylinder(h=2, d=cookie_diameter, center=true);\n    }\n}\n\n// Main assembly\ncolor(\"wheat\") barquillo();\n\n// Optional: Add slight bend from rolling process\n// translate([0, 0, cookie_length/4])\n// rotate([5, 0, 0])\n// barquillo();",
    "renders": true
  },
  {
    "food_item": "oreja",
    "openscad_code": "// Oreja (Mexican pig ear pastry) - Realistic style, medium complexity\n\n$fn = 36;\n\n// Main color - golden brown fried dough\ncolor([0.82, 0.55, 0.28]) {\n    // Base ear shape - main cartilage structure\n    difference() {\n        // Outer ear form\n        scale([1, 1.2, 0.3]) \n        sphere(d = 80);\n        \n        // Inner ear hollow\n        translate([0, 0, 2])\n        scale([0.7, 0.8, 0.4])\n        sphere(d = 80);\n    }\n    \n    // Ear lobe attachment\n    translate([0, -45, -5])\n    scale([0.8, 0.5, 0.2])\n    sphere(d = 30);\n    \n    // Upper ear curve\n    translate([0, 35, 5])\n    rotate([0, 0, 15])\n    scale([0.4, 0.6, 0.15])\n    sphere(d = 25);\n}\n\n// Fried texture layers - crispy ridges\nmodule fried_ridges() {\n    for (i = [0:15]) {\n        rotate([0, 0, i * 24])\n        translate([20 * sin(i * 24), 20 * cos(i * 24), -2])\n        rotate([90, 0, i * 12])\n        scale([0.1, 0.1, 0.5])\n        cylinder(h = 8, d1 = 3, d2 = 1);\n    }\n}\n\ncolor([0.75, 0.5, 0.25]) {\n    fried_ridges();\n}\n\n// Sugar coating crystals\nmodule sugar_crystals() {\n    for (i = [0:30]) {\n        angle = i * 12;\n        radius = 25 + (i % 3) * 5;\n        h = 0.5 + (i % 2) * 0.3;\n        \n        translate([radius * sin(angle), radius * cos(angle), 8])\n        scale([1, 1, h])\n        sphere(d = 1.5);\n    }\n}\n\ncolor([0.95, 0.95, 0.9]) {\n    sugar_crystals();\n}\n\n// Air bubbles from frying\nmodule air_bubbles() {\n    for (i = [0:8]) {\n        angle = i * 45;\n        dist = 15 + (i % 2) * 10;\n        \n        translate([dist * sin(angle), dist * cos(angle), 3])\n        sphere(d = 2 + (i % 3));\n    }\n}\n\ncolor([0.85, 0.6, 0.35]) {\n    difference() {\n        children();\n        air_bubbles();\n    }\n}\n\n// Thin edge detail\ntranslate([0, 0, -3])\nscale([1.05, 1.1, 0.1])\nsphere(d = 80);\n\n// Cross-hatch frying pattern on surface\nmodule frying_pattern() {\n    for (x = [-30:10:30]) {\n        for (y = [-35:10:35]) {\n            if (x*x/900 + y*y/1225 < 1) {\n                translate([x, y, 7.5])\n                cube([0.5, 0.5, 0.5], center = true);\n            }\n        }\n    }\n}\n\ncolor([0.78, 0.52, 0.3]) {\n    frying_pattern();\n}\n\n// Thickness variation for realistic look\ntranslate([0, 0, 0]) {\n    difference() {\n        scale([1, 1.2, 0.3])\n        sphere(d = 80);\n        \n        // Thinner areas\n        translate([0, -20, 2])\n        scale([0.3, 0.4, 0.1])\n        sphere(d = 40);\n        \n        translate([25, 10, 2])\n        scale([0.2, 0.3, 0.1])\n        sphere(d = 30);\n    }\n}",
    "renders": true
  },
  {
    "food_item": "hojuela",
    "openscad_code": "// Realistic Hojuela (Venetian fried pastry) - Medium Complexity\n// Approximate size: 70mm diameter, 5mm thick\n\n// Main color definitions\nhoney_color = [1, 0.8, 0.3];\ndough_color = [0.9, 0.7, 0.4];\noil_color = [0.6, 0.4, 0.1];\n\n// Create the main hojuela shape\nmodule hojuela_base() {\n    // Central disc with irregular edges\n    difference() {\n        // Main circular base\n        scale([1, 1, 0.1]) \n            sphere(d = 70, $fn = 64);\n        \n        // Create irregular edge cuts for realistic torn appearance\n        for(i = [0:15:360]) {\n            rotate([0, 0, i + (i*0.3)])\n                translate([34 + (i%2)*3, 0, -1])\n                    scale([1.2, 0.5, 2])\n                        cylinder(h = 10, d = 8, $fn = 8);\n        }\n    }\n}\n\n// Create bubble texture from frying\nmodule frying_bubbles() {\n    // Random small spheres for bubble texture\n    for(i = [0:20:340]) {\n        for(j = [0:30:330]) {\n            rotate([0, 0, i + (i*0.2)])\n                translate([\n                    20 * cos(j) + (i%2)*3 - 1.5, \n                    20 * sin(j) + (j%2)*3 - 1.5, \n                    0.5 + (i+j)%4*0.2\n                ])\n                    scale([1, 1, 0.3])\n                        sphere(d = 2 + (i+j)%3, $fn = 8);\n        }\n    }\n}\n\n// Create the honey/sugar coating layer\nmodule honey_coating() {\n    color(honey_color) {\n        // Thin translucent layer\n        scale([1, 1, 0.05])\n            sphere(d = 68, $fn = 64);\n        \n        // Honey drips on edges\n        for(i = [0:45:360]) {\n            rotate([0, 0, i + 15])\n                translate([33, 0, -0.2])\n                    scale([0.3, 0.3, 1])\n                        cylinder(h = 4 + (i%3), d = 2 + (i%2), $fn = 8);\n        }\n    }\n}\n\n// Create the characteristic diamond pattern cuts\nmodule diamond_cuts() {\n    difference() {\n        children();\n        \n        // Diamond pattern cuts\n        for(i = [-20:10:20]) {\n            for(j = [-20:10:20]) {\n                translate([i, j, -0.1])\n                    rotate([0, 0, 45])\n                        scale([0.7, 0.7, 1])\n                            cube([8, 2, 2], center = true);\n            }\n        }\n    }\n}\n\n// Create subtle oil spots\nmodule oil_spots() {\n    color(oil_color) {\n        for(i = [0:40:400]) {\n            rotate([0, 0, i + (i*0.7)])\n                translate([\n                    15 * cos(i*2) + (i%5), \n                    15 * sin(i*2) + (i%3), \n                    0.3\n                ])\n                    scale([1, 1, 0.1])\n                        sphere(d = 1 + (i%2), $fn = 6);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Base hojuela\n    color(dough_color) {\n        hojuela_base();\n        \n        // Add thickness variation\n        translate([0, 0, 0.5])\n            scale([0.95, 0.95, 0.05])\n                sphere(d = 65, $fn = 64);\n    }\n    \n    // Texture layers\n    color(dough_color) {\n        frying_bubbles();\n    }\n    \n    // Diamond pattern cuts\n    color(dough_color) {\n        diamond_cuts() {\n            translate([0, 0, 0.25])\n                scale([0.9, 0.9, 0.1])\n                    sphere(d = 60, $fn = 64);\n        }\n    }\n    \n    // Honey coating on top\n    translate([0, 0, 1])\n        honey_coating();\n    \n    // Oil spots for realistic fried appearance\n    oil_spots();\n}\n\n// Add slight overall bend for natural curved shape\nscale([1, 1, 0.8])\n    rotate([5, 3, 0])\n        children();",
    "renders": true
  },
  {
    "food_item": "rosquilla",
    "openscad_code": "// Rosquilla (Spanish donut) - Realistic style, medium complexity\n// Traditional ring-shaped pastry with characteristic ridges and sugar coating\n\n// Overall dimensions\nrosquilla_outer_diameter = 70;\nrosquilla_inner_diameter = 25;\nrosquilla_thickness = 18;\n\n// Color definitions\npastry_color = [0.92, 0.78, 0.55];  // Golden baked color\nsugar_color = [0.98, 0.97, 0.95];  // White sugar coating\n\n// Module for the main pastry ring\nmodule pastry_ring() {\n    difference() {\n        // Outer torus shape\n        rotate_extrude(angle = 360, $fn = 64)\n            translate([rosquilla_outer_diameter/2 - rosquilla_thickness/2, 0, 0])\n                circle(r = rosquilla_thickness/2, $fn = 32);\n        \n        // Inner hole\n        rotate_extrude(angle = 360, $fn = 64)\n            translate([rosquilla_inner_diameter/2 + rosquilla_thickness/2, 0, 0])\n                circle(r = rosquilla_thickness/2, $fn = 32);\n    }\n}\n\n// Module for creating ridges around the ring\nmodule pastry_ridges() {\n    ridge_height = 1.5;\n    ridge_width = 3;\n    num_ridges = 36;\n    \n    for(i = [0:num_ridges-1]) {\n        rotate([0, 0, i * 360/num_ridges])\n            translate([rosquilla_outer_diameter/2 - rosquilla_thickness/2, 0, 0])\n                rotate([90, 0, 0])\n                    linear_extrude(height = rosquilla_thickness)\n                        hull() {\n                            translate([-ridge_width/2, -rosquilla_thickness/2 + 2, 0])\n                                circle(r = ridge_width/4, $fn = 8);\n                            translate([ridge_width/2, -rosquilla_thickness/2 + 2, 0])\n                                circle(r = ridge_width/4, $fn = 8);\n                        }\n    }\n}\n\n// Module for sugar crystals on surface\nmodule sugar_coating() {\n    crystal_size = 0.4;\n    num_crystals = 200;\n    \n    // Random seed for consistent crystal placement\n    seed = 42;\n    \n    for(i = [0:num_crystals-1]) {\n        angle = (i * 137.5 + seed) % 360;\n        radius = rosquilla_outer_diameter/2 - rosquilla_thickness/2 + \n                 (sin(i * 0.5) * rosquilla_thickness/4);\n        \n        rotate([0, 0, angle])\n            translate([radius, 0, rosquilla_thickness/2 - 1])\n                scale([1, 1, 0.7])\n                    sphere(r = crystal_size, $fn = 6);\n    }\n}\n\n// Module for subtle imperfections to make it look handmade\nmodule imperfections() {\n    for(i = [0:5]) {\n        angle = i * 60 + 15;\n        radius = rosquilla_outer_diameter/2 - rosquilla_thickness/2 + \n                 (cos(i * 2) * 3);\n        \n        rotate([0, 0, angle])\n            translate([radius, 0, rosquilla_thickness/2])\n                scale([1.2, 1.2, 0.8])\n                    sphere(r = 1.5, $fn = 8);\n    }\n}\n\n// Main assembly\nunion() {\n    // Base pastry\n    color(pastry_color)\n        union() {\n            pastry_ring();\n            pastry_ridges();\n            imperfections();\n        }\n    \n    // Sugar coating\n    color(sugar_color)\n        sugar_coating();\n}\n\n// Add slight flattening on bottom for stable printing\ntranslate([0, 0, -0.5])\n    color(pastry_color)\n        cylinder(h = 1, \n                r1 = rosquilla_outer_diameter/2 + 5, \n                r2 = rosquilla_outer_diameter/2 + 5,\n                $fn = 64);",
    "renders": true
  },
  {
    "food_item": "polvoron",
    "openscad_code": "// Polvoron (Spanish shortbread) - realistic style, medium complexity\n// Classic cylindrical shape with textured top and wrapper\n\n$fn = 48;\n\n// Main dimensions (realistic polvoron size)\nmodule_size = 60;  // 60mm diameter for 3D printing\n\n// Polvoron body - slightly tapered cylinder\nmodule polvoron_body(height = 20, top_diameter = module_size, bottom_diameter = module_size * 0.9) {\n    difference() {\n        // Main tapered cylinder\n        cylinder(h = height, r1 = bottom_diameter/2, r2 = top_diameter/2, $fn = 64);\n        \n        // Hollow center for realistic thickness (3mm walls)\n        translate([0, 0, 3])\n            cylinder(h = height - 6, r1 = bottom_diameter/2 - 3, r2 = top_diameter/2 - 3, $fn = 64);\n    }\n}\n\n// Textured top surface - creates the pressed/patterned look\nmodule textured_top() {\n    // Base indentation\n    translate([0, 0, 20])\n        difference() {\n            cylinder(h = 2, r = module_size/2 * 0.9, $fn = 64);\n            \n            // Center deeper impression\n            translate([0, 0, -0.5])\n                cylinder(h = 3, r = module_size/4, $fn = 32);\n        }\n    \n    // Radial texture lines\n    for (i = [0:15]) {\n        rotate([0, 0, i * 22.5])\n            translate([0, module_size/4, 20])\n                cube([1, module_size/4, 1], center = true);\n    }\n    \n    // Small dimples for sugar crystals\n    for (i = [0:23]) {\n        angle = i * 15;\n        radius = module_size/3 * (0.5 + 0.3 * sin(i * 3));\n        translate([radius * cos(angle), radius * sin(angle), 21])\n            sphere(r = 0.5);\n    }\n}\n\n// Wrapper paper - crimped edges\nmodule wrapper() {\n    color([0.95, 0.9, 0.85])  // Off-white paper color\n    difference() {\n        // Main wrapper cylinder\n        cylinder(h = 22, r = module_size/2 + 3, $fn = 64);\n        \n        // Cut out center for polvoron\n        translate([0, 0, -1])\n            cylinder(h = 25, r = module_size/2 + 1, $fn = 64);\n    }\n    \n    // Crimped edges\n    for (i = [0:35]) {\n        rotate([0, 0, i * 10])\n            translate([module_size/2 + 3, 0, 0])\n                rotate([90, 0, 0])\n                    cylinder(h = 8, r = 1, $fn = 8);\n    }\n}\n\n// Crumbs and texture details\nmodule surface_details() {\n    // Random crumbs on surface\n    for (i = [0:40]) {\n        translate([\n            (random(i) - 0.5) * module_size * 0.4,\n            (random(i + 100) - 0.5) * module_size * 0.4,\n            20 + random(i + 200) * 0.5\n        ])\n            sphere(r = 0.3 + random(i + 300) * 0.5);\n    }\n}\n\n// Helper function for pseudo-random values\nfunction random(seed) = (seed * 9301 + 49297) % 233280 / 233280;\n\n// Main assembly\nunion() {\n    // Wrapper bottom\n    translate([0, 0, -1])\n        wrapper();\n    \n    // Main polvoron\n    color([0.92, 0.78, 0.58])  // Golden toasted color\n    polvoron_body();\n    \n    // Textured top\n    color([0.88, 0.72, 0.52])  // Slightly darker toasted areas\n    textured_top();\n    \n    // Surface details\n    color([0.95, 0.82, 0.65])  // Light powdery color\n    surface_details();\n    \n    // Wrapper top edges\n    translate([0, 0, 20])\n        wrapper();\n}",
    "renders": true
  },
  {
    "food_item": "alfajor",
    "openscad_code": "// Alfajor - Argentine dulce de leche cookie sandwich\n// Dimensions: 50mm diameter, 25mm total height\n\n$fn = 32;\n\n// Main colors\ncookie_color = [150/255, 110/255, 80/255];\ndulce_color = [160/255, 90/255, 50/255];\ncoconut_color = [240/255, 240/255, 230/255];\n\n// Main alfajor module\nmodule alfajor() {\n    // Bottom cookie\n    translate([0, 0, 0])\n        cookie();\n    \n    // Dulce de leche filling\n    translate([0, 0, 4])\n        filling();\n    \n    // Top cookie\n    translate([0, 0, 21])\n        rotate([0, 0, 180])\n            cookie();\n    \n    // Coconut coating around the sides\n    coconut_coating();\n}\n\n// Cookie with rounded edges and texture\nmodule cookie() {\n    color(cookie_color) {\n        // Main cookie body\n        cylinder(h = 4, r = 25);\n        \n        // Rounded top edge\n        translate([0, 0, 4])\n            rotate_extrude()\n                translate([25, 0])\n                    circle(r = 1);\n        \n        // Rounded bottom edge\n        translate([0, 0, 0])\n            rotate_extrude()\n                translate([25, 0])\n                    circle(r = 1);\n        \n        // Small holes for texture (repeated pattern)\n        for(i = [0:5:355]) {\n            rotate([0, 0, i])\n                translate([20, 0, 2])\n                    cylinder(h = 1, r = 1.5);\n        }\n    }\n}\n\n// Dulce de leche filling with slight overflow\nmodule filling() {\n    color(dulce_color) {\n        // Main filling layer\n        cylinder(h = 17, r = 23);\n        \n        // Create slight overflow effect\n        for(i = [0:30:359]) {\n            rotate([0, 0, i])\n                translate([23, 0, 0])\n                    cylinder(h = 17, r = 2);\n        }\n    }\n}\n\n// Coconut flakes coating the sides\nmodule coconut_coating() {\n    color(coconut_color) {\n        difference() {\n            // Main coating ring\n            cylinder(h = 25, r = 27);\n            cylinder(h = 25.5, r = 24);\n            \n            // Remove top and bottom to leave only sides\n            translate([0, 0, -0.5])\n                cube([100, 100, 1], center = true);\n            translate([0, 0, 25])\n                cube([100, 100, 1], center = true);\n        }\n        \n        // Add texture with small bumps for coconut flakes\n        for(angle = [0:15:359]) {\n            for(h = [2:2:23]) {\n                rotate([0, 0, angle])\n                    translate([26, 0, h])\n                        sphere(r = 0.8);\n            }\n        }\n    }\n}\n\n// Render the complete alfajor\nalfajor();",
    "renders": true
  },
  {
    "food_item": "chaja",
    "openscad_code": "// Chaja - Uruguayan meringue cake\n// Layers: sponge cake, dulce de leche, meringue, covered in chocolate glaze\n\n$fn = 24;\n\n// Main dimensions\nchaja_width = 60;\nchaja_length = 45;\nchaja_height = 35;\n\n// Thicknesses\ncake_thickness = 8;\ndulce_thickness = 6;\nmeringue_thickness = 15;\nchocolate_thickness = 3;\n\n// Colors\ncolor_cake = [0.82, 0.71, 0.55];\ncolor_dulce = [0.72, 0.52, 0.38];\ncolor_meringue = [0.98, 0.95, 0.90];\ncolor_chocolate = [0.36, 0.25, 0.20];\n\nmodule rounded_cube(w, l, h, r) {\n    // Create a rounded cube with given dimensions and corner radius\n    translate([r, r, 0])\n    minkowski() {\n        cube([w-2*r, l-2*r, h]);\n        cylinder(h=h, r=r);\n    }\n}\n\nmodule sponge_layer() {\n    // Base sponge cake layer with rounded edges\n    color(color_cake)\n    rounded_cube(chaja_width, chaja_length, cake_thickness, 5);\n}\n\nmodule dulce_layer() {\n    // Dulce de leche layer slightly smaller than base\n    color(color_dulce)\n    translate([0, 0, cake_thickness])\n    rounded_cube(chaja_width-4, chaja_length-4, dulce_thickness, 4);\n}\n\nmodule meringue_peaks() {\n    // Create individual meringue peaks\n    module peak(x, y) {\n        translate([x, y, cake_thickness + dulce_thickness + 2])\n        scale([1, 1, 0.8])\n        sphere(d = 6 + rand*4);\n    }\n    \n    // Random seed for varied peaks\n    seed = 42;\n    \n    // Generate meringue peaks across top\n    for (i = [-2:2]) {\n        for (j = [-1:1]) {\n            rand = (i*i + j*j + seed) % 10 / 10.0;\n            peak(i*10 + rand*3 - 5, j*10 + rand*3);\n        }\n    }\n}\n\nmodule meringue_base() {\n    // Base meringue layer with peaks on top\n    color(color_meringue)\n    union() {\n        translate([0, 0, cake_thickness + dulce_thickness])\n        rounded_cube(chaja_width-2, chaja_length-2, meringue_thickness/3, 3);\n        \n        // Add meringue peaks\n        meringue_peaks();\n    }\n}\n\nmodule chocolate_coating() {\n    // Chocolate glaze coating the entire cake\n    color(color_chocolate)\n    hull() {\n        // Bottom coating\n        translate([0, 0, -0.5])\n        rounded_cube(chaja_width+2, chaja_length+2, 1, 6);\n        \n        // Top coating following meringue shape\n        translate([0, 0, cake_thickness + dulce_thickness + meringue_thickness + 2])\n        rounded_cube(chaja_width, chaja_length, 2, 4);\n    }\n    \n    // Side coating\n    difference() {\n        rounded_cube(chaja_width+2, chaja_length+2, \n                     cake_thickness + dulce_thickness + meringue_thickness + 3, 6);\n        rounded_cube(chaja_width, chaja_length, \n                     cake_thickness + dulce_thickness + meringue_thickness + 4, 4);\n    }\n}\n\nmodule cake_texture() {\n    // Add sponge texture with small holes\n    color(color_cake)\n    for (i = [1:5:chaja_width-10]) {\n        for (j = [1:5:chaja_length-10]) {\n            translate([i - chaja_width/2, j - chaja_length/2, cake_thickness/2])\n            sphere(d = 1.5);\n        }\n    }\n}\n\n// Assemble the chaja\nunion() {\n    // Main cake layers\n    sponge_layer();\n    dulce_layer();\n    meringue_base();\n    chocolate_coating();\n    \n    // Texture details\n    cake_texture();\n    \n    // Decorative chocolate drizzle on top\n    color(color_chocolate)\n    for (i = [1:3]) {\n        rotate([0, 0, i*60])\n        translate([chaja_width/4 - 10, chaja_length/4 - 5, \n                  cake_thickness + dulce_thickness + meringue_thickness + 4])\n        scale([0.3, 3, 0.3])\n        cylinder(h = 2, r1 = 1, r2 = 0.5);\n    }\n}",
    "renders": true
  },
  {
    "food_item": "dulcedeleche",
    "openscad_code": "// Dulce de Leche in Jar – 3D printable OpenSCAD model\n// Jar height ≈ 55 mm, diameter ≈ 45 mm\n\n$fn=40;  // good visual quality, still prints fast\n\nmodule jar_body(){\n    color(\"BurlyWood\")\n    difference(){\n        cylinder(h=45,d=45,center=false);      // main body\n        translate([0,0,3])                     // hollow inside\n            cylinder(h=45,d=41,center=false);\n    }\n}\n\nmodule jar_thread(){\n    // simple screw thread rings\n    color(\"BurlyWood\")\n    for(i=[0:3]){\n        translate([0,0,45+i*1.5])\n            cylinder(h=1.5,d=46-i*0.3,center=false);\n    }\n}\n\nmodule jar_lid(){\n    color(\"SandyBrown\")\n    difference(){\n        union(){\n            cylinder(h=7,d=47,center=false);   // lid top\n            translate([0,0,-2])\n                cylinder(h=5,d=44,center=false); // inner plug\n        }\n        // inner void so it sits on the jar rim\n        translate([0,0,-1])\n            cylinder(h=6,d=41.5,center=false);\n    }\n}\n\nmodule dulce_surface_texture(){\n    // tiny random craters for the sticky surface\n    color([0.75,0.45,0.25])\n    for(i=[0:25]){\n        translate([sin(i*137.5)*20,cos(i*137.5)*20,42.5+sin(i*4)*0.5])\n            sphere(d=1.5,$fn=8);\n    }\n}\n\nmodule dulce_body(){\n    // thick gooey mass inside\n    color([0.72,0.42,0.22])\n    difference(){\n        translate([0,0,3])\n            cylinder(h=40,d=40,center=false);\n        translate([0,0,5])\n            cylinder(h=40,d=36,center=false);\n    }\n}\n\n// assembly\njar_body();\njar_thread();\ntranslate([0,0,48]) jar_lid();\ndulce_body();\ndulce_surface_texture();",
    "renders": true
  },
  {
    "food_item": "bananafoster",
    "openscad_code": "// Banana Foster - Realistic style, medium complexity\n// Includes sliced bananas, caramel sauce, vanilla ice cream scoop\n\n// Color constants\n$fn = 50;\n\n// Banana slice module\nmodule banana_slice(radius = 15, thickness = 4) {\n    color(\"gold\") {\n        // Main banana body\n        difference() {\n            cylinder(h = thickness, r = radius);\n            // Cut the flat side\n            translate([0, -radius/2, 0])\n                cube([radius*2, radius, thickness*2], center = true);\n            // Add curvature to top\n            translate([0, 0, thickness])\n                sphere(r = radius*0.8);\n        }\n        \n        // Banana texture with small dots\n        for(i = [0:4]) {\n            rotate([0, 0, i * 72])\n                translate([radius*0.7, 0, thickness/2])\n                    scale([1, 0.3, 0.1])\n                        sphere(r = 1.5);\n        }\n    }\n}\n\n// Caramel sauce module\nmodule caramel_sauce() {\n    color([0.6, 0.3, 0.1, 0.8]) {\n        // Main puddle\n        cylinder(h = 2, r = 45, $fn = 30);\n        \n        // Drizzles\n        for(i = [0:5]) {\n            rotate([0, 0, i * 60 + 15])\n                translate([25, 0, 1])\n                    scale([1, 0.3, 1])\n                        rotate([90, 0, 0])\n                            cylinder(h = 20, r1 = 2, r2 = 0.5);\n        }\n    }\n}\n\n// Ice cream scoop module\nmodule ice_cream_scoop() {\n    color(\"antiquewhite\") {\n        // Main scoop\n        translate([0, 0, 25])\n            sphere(r = 20);\n        \n        // Melting drips\n        color(\"antiquewhite\") {\n            translate([15, 0, 20])\n                scale([1, 1, 4])\n                    sphere(r = 5);\n            translate([-12, 10, 18])\n                scale([1, 1, 3])\n                    sphere(r = 4);\n            translate([-8, -15, 22])\n                scale([1, 1, 3.5])\n                    sphere(r = 4.5);\n        }\n    }\n}\n\n// Main assembly\n// Base plate (plate)\ndifference() {\n    color(\"white\") {\n        cylinder(h = 5, r = 50);\n    }\n    // Plate rim\n    translate([0, 0, 4.9])\n        cylinder(h = 0.2, r = 45);\n}\n\n// Caramel sauce on plate\ntranslate([0, 0, 5])\n    caramel_sauce();\n\n// Banana slices arranged in fan\nfor(i = [0:4]) {\n    rotate([0, 0, i * 15 - 30])\n        translate([0, 10, 7])\n            rotate([90, 0, 0])\n                banana_slice();\n}\n\n// Ice cream scoop on top\ntranslate([0, 0, 7])\n    ice_cream_scoop();\n\n// Optional garnish - mint leaf\ncolor(\"green\") {\n    translate([30, 30, 7])\n        scale([1, 0.5, 0.1])\n            rotate([0, 0, 45])\n                sphere(r = 8);\n}",
    "renders": true
  },
  {
    "food_item": "applecrisp",
    "openscad_code": "// Apple Crisp 3D Model - Realistic Style, Medium Complexity\n// Overall dimensions: ~70mm diameter, ~35mm height\n\n// Color definitions\n$fn = 48;\n\n// Main apple filling base\nmodule apple_filling() {\n    // Base apple layer with slight dome\n    translate([0, 0, 5]) {\n        color(\"#D2691E\")  // Chocolate brown for cooked apples\n        scale([1, 1, 0.3])\n        sphere(d = 65);\n    }\n    \n    // Apple texture details\n    for(i = [0:15]) {\n        rotate([0, 0, i * 24])\n        translate([25 * sin(i * 3), 25 * cos(i * 3), 8])\n        color(\"#CD853F\")  // Peru brown\n        scale([1, 0.8, 0.2])\n        sphere(d = 8);\n    }\n}\n\n// Crisp topping with oats and sugar\nmodule crisp_topping() {\n    // Base crumble layer\n    translate([0, 0, 15]) {\n        color(\"#DEB887\")  // Burlywood\n        cylinder(h = 8, d = 65);\n    }\n    \n    // Oat pieces\n    for(i = [0:25]) {\n        rotate([0, 0, i * 14.4])\n        translate([20 * sin(i * 2.1), 20 * cos(i * 2.1), 20])\n        color(\"#D2B48C\")  // Tan\n        rotate([90, 0, 0])\n        scale([1, 0.3, 0.1])\n        cylinder(h = 4, d = 3);\n    }\n    \n    // Sugar crystals\n    for(i = [0:35]) {\n        rotate([0, 0, i * 10.3])\n        translate([28 * sin(i * 1.7), 28 * cos(i * 1.7), 22])\n        color(\"#FFF8DC\")  // Cornsilk\n        sphere(d = 1.5);\n    }\n}\n\n// Caramelized edges\nmodule caramelized_edges() {\n    // Edge ring\n    translate([0, 0, 12]) {\n        color(\"#8B4513\")  // Saddle brown\n        difference() {\n            cylinder(h = 3, d = 68);\n            translate([0, 0, -1])\n            cylinder(h = 5, d = 62);\n        }\n    }\n    \n    // Caramel drips\n    for(i = [0:8]) {\n        rotate([0, 0, i * 45])\n        translate([34, 0, 12])\n        color(\"#A0522D\")  // Sienna\n        rotate([90, 0, 0])\n        scale([0.3, 1, 1])\n        cylinder(h = 6, d1 = 3, d2 = 1);\n    }\n}\n\n// Apple pieces visible at edges\nmodule apple_edges() {\n    for(i = [0:12]) {\n        rotate([0, 0, i * 30])\n        translate([32, 0, 7])\n        color(\"#BC8F8F\")  // Rosy brown\n        scale([1, 0.7, 0.4])\n        sphere(d = 5);\n    }\n}\n\n// Assembly\nunion() {\n    apple_filling();\n    crisp_topping();\n    caramelized_edges();\n    apple_edges();\n    \n    // Bottom support base\n    translate([0, 0, 0]) {\n        color(\"#654321\")  // Dark brown\n        cylinder(h = 2, d = 68);\n    }\n}",
    "renders": true
  },
  {
    "food_item": "peachcobbler",
    "openscad_code": "// Peach Cobbler 3D Model\n// Realistic style, medium complexity\n// Overall dimensions: ~80mm diameter x 35mm height\n\n// Color definitions\ncrust_color = [210/255, 180/255, 140/255];\npeach_color = [255/255, 165/255, 100/255];\npeach_dark = [220/255, 140/255, 80/255];\njuice_color = [255/255, 140/255, 90/255];\n\n// Main baking dish base\nmodule baking_dish() {\n    difference() {\n        // Outer dish\n        cylinder(h=12, r1=40, r2=42, $fn=64);\n        \n        // Inner cavity\n        translate([0, 0, -1])\n            cylinder(h=14, r1=36, r2=38, $fn=64);\n    }\n}\n\n// Cobbler crust layer\nmodule crust_base() {\n    color(crust_color)\n    difference() {\n        // Main crust in dish\n        cylinder(h=8, r1=35, r2=36, $fn=64);\n        \n        // Slightly hollow center for peaches\n        translate([0, 0, 2])\n            cylinder(h=8, r1=28, r2=30, $fn=64);\n    }\n}\n\n// Peach slice module\nmodule peach_slice(x, y, z, rot, scale_factor) {\n    translate([x, y, z]) {\n        rotate([0, 0, rot]) {\n            scale([scale_factor, scale_factor, scale_factor]) {\n                // Peach flesh\n                color(peach_color)\n                union() {\n                    sphere(r=5, $fn=16);\n                    \n                    // Crescent shape for slice\n                    translate([0, -3, 0])\n                        cube([12, 6, 10], center=true);\n                }\n                \n                // Peach skin on edge\n                color(peach_dark)\n                translate([5, 0, 0])\n                    rotate([90, 0, 0])\n                        cylinder(h=10, r1=5, r2=5, $fn=16);\n                \n                // Center indentation\n                color(peach_dark)\n                translate([-3, 0, 0])\n                    sphere(r=2, $fn=12);\n                \n                // Texture lines\n                for(i = [-1, 0, 1]) {\n                    color(peach_dark)\n                    translate([0, i, 0])\n                        scale([1, 0.1, 0.1])\n                            sphere(r=5, $fn=12);\n                }\n            }\n        }\n    }\n}\n\n// Generate multiple peach slices\nmodule peach_slices() {\n    for(i = [0:11]) {\n        angle = i * 30;\n        radius = 15 + sin(i * 20) * 5;\n        x = cos(angle) * radius;\n        y = sin(angle) * radius;\n        rot = angle + 90;\n        scale_factor = 0.6 + sin(i * 15) * 0.2;\n        peach_slice(x, y, 8, rot, scale_factor);\n    }\n}\n\n// Crust topping pieces\nmodule crust_topping() {\n    color(crust_color)\n    for(i = [0:8]) {\n        angle = i * 40;\n        radius = 10 + (i % 3) * 8;\n        x = cos(angle) * radius;\n        y = sin(angle) * radius;\n        \n        translate([x, y, 10 + sin(i * 5) * 2])\n            scale([0.8 + sin(i * 10) * 0.3, 0.8 + cos(i * 10) * 0.3, 0.5])\n                sphere(r=5, $fn=8);\n    }\n}\n\n// Juice bubbles\nmodule juice_bubbles() {\n    color(juice_color)\n    for(i = [0:15]) {\n        angle = i * 24;\n        radius = 10 + (i % 4) * 5;\n        x = cos(angle) * radius;\n        y = sin(angle) * radius;\n        \n        translate([x, y, 8 + sin(i * 3) * 1.5])\n            sphere(r=0.8 + sin(i * 8) * 0.5, $fn=8);\n    }\n}\n\n// Assemble the peach cobbler\nunion() {\n    // Baking dish\n    color([200/255, 200/255, 200/255])\n    baking_dish();\n    \n    // Crust base in dish\n    translate([0, 0, 4])\n        crust_base();\n    \n    // Peach slices\n    peach_slices();\n    \n    // Juice between peaches\n    juice_bubbles();\n    \n    // Crust topping pieces\n    crust_topping();\n    \n    // Top crust edge\n    color(crust_color)\n    translate([0, 0, 10])\n        cylinder(h=2, r1=36, r2=34, $fn=64);\n}",
    "renders": true
  },
  {
    "food_item": "blueberrygrunt",
    "openscad_code": "// Blueberry Grunt - Traditional Maritime dessert\n// A biscuit-topped blueberry cobbler with berry filling\n\n// Overall dimensions: 80mm diameter, 45mm height\n$fa = 2;\n$fs = 0.5;\n\nmodule blueberry_grunt() {\n    // Main serving bowl - stoneware style\n    color([0.85, 0.85, 0.85]) \n    difference() {\n        cylinder(h = 25, r1 = 40, r2 = 38);\n        translate([0, 0, 2]) \n        cylinder(h = 25, r1 = 36, r2 = 34);\n    }\n    \n    // Blueberry filling\n    color([0.2, 0.15, 0.4]) \n    translate([0, 0, 5]) {\n        difference() {\n            cylinder(h = 12, r = 36);\n            // Scoop out center for realistic filling\n            translate([0, 0, 10]) \n            sphere(r = 38);\n        }\n        \n        // Individual blueberries\n        for(i = [0:19]) {\n            rotate([0, 0, i * 18]) \n            translate([rand * 25, rand * 25, 5 + rand * 8]) \n            scale([1, 1, 1.2]) \n            color([0.1, 0.05, 0.35]) \n            sphere(r = 3 + rand * 2);\n        }\n    }\n    \n    // Drop biscuits on top\n    module biscuit() {\n        color([0.95, 0.8, 0.6]) \n        difference() {\n            // Main biscuit shape\n            scale([1, 1, 0.6]) \n            sphere(r = 12);\n            \n            // Steam vents\n            for(i = [0:5]) {\n                rotate([0, 0, i * 60]) \n                translate([8, 0, 0]) \n                cylinder(h = 15, r = 1.5);\n            }\n        }\n        \n        // Biscuit top texture\n        color([0.9, 0.75, 0.55]) \n        for(i = [0:15]) {\n            rotate([0, 0, i * 24]) \n            translate([rand * 8, rand * 8, 5]) \n            sphere(r = 0.5);\n        }\n    }\n    \n    // Place 5 biscuits in a ring pattern\n    for(i = [0:4]) {\n        rotate([0, 0, i * 72]) \n        translate([0, 20, 15]) \n        biscuit();\n    }\n    \n    // Biscuit gaps filled with blueberry juice\n    color([0.25, 0.1, 0.3, 0.7]) \n    for(i = [0:4]) {\n        rotate([0, 0, i * 72 + 36]) \n        translate([0, 15, 15]) \n        cylinder(h = 3, r = 8);\n    }\n    \n    // Rim decoration - sugared edge\n    color([0.9, 0.9, 0.9]) \n    translate([0, 0, 23]) {\n        difference() {\n            cylinder(h = 2, r1 = 41, r2 = 40);\n            cylinder(h = 2, r1 = 39, r2 = 38);\n        }\n        \n        // Sugar crystals\n        for(i = [0:30]) {\n            rotate([0, 0, i * 12]) \n            translate([40, 0, 24.5]) \n            scale([0.2, 1, 0.2]) \n            sphere(r = 0.5);\n        }\n    }\n}\n\n// Generate the complete dessert\nblueberry_grunt();",
    "renders": true
  },
  {
    "food_item": "cherryclafoutis",
    "openscad_code": "// Cherry Clafoutis - Realistic Style\n// A baked French dessert with black cherries in a custard-like batter\n\n// Overall dimensions (mm)\nclafoutis_diameter = 80;\nclafoutis_height = 25;\nwall_thickness = 2;\n\n// Cherry parameters\ncherry_diameter = 12;\ncherry_count = 8;\ncherry_depth = -3; // How far cherries sink into batter\n\n// Color definitions\ncherry_color = [0.5, 0.05, 0.1];\nbatter_color = [0.95, 0.85, 0.7];\nbrowned_color = [0.75, 0.55, 0.35];\n\n// Main clafoutis base\nmodule clafoutis_base() {\n    difference() {\n        // Main batter body - slightly domed\n        cylinder(h = clafoutis_height, r = clafoutis_diameter/2, $fn = 64);\n        \n        // Hollow out the inside\n        translate([0, 0, wall_thickness])\n            cylinder(h = clafoutis_height - wall_thickness, r = clafoutis_diameter/2 - wall_thickness, $fn = 64);\n        \n        // Create rounded top edge\n        translate([0, 0, clafoutis_height - 2])\n            cylinder(h = 4, r1 = clafoutis_diameter/2 - wall_thickness, r2 = clafoutis_diameter/2, $fn = 64);\n    }\n}\n\n// Individual cherry with realistic details\nmodule cherry() {\n    union() {\n        // Main cherry body\n        color(cherry_color)\n        sphere(d = cherry_diameter, $fn = 32);\n        \n        // Stem\n        translate([0, 0, cherry_diameter/2])\n        color([0.2, 0.4, 0.1])\n        rotate([90, 0, 0])\n        cylinder(h = 8, r1 = 1, r2 = 0.5, $fn = 8);\n        \n        // Highlight on cherry surface\n        translate([cherry_diameter/4, cherry_diameter/4, cherry_diameter/3])\n        color([0.7, 0.2, 0.3])\n        sphere(d = 2, $fn = 16);\n    }\n}\n\n// Surface texture for baked appearance\nmodule surface_texture() {\n    // Random tiny spheres for sugar crystallization effect\n    for(i = [0:30]) {\n        angle = i * 137.5; // Golden angle for natural distribution\n        radius = clafoutis_diameter/2 * 0.9 * sqrt(i/30);\n        x = cos(angle) * radius;\n        y = sin(angle) * radius;\n        \n        translate([x, y, clafoutis_height - 0.5])\n        color(browned_color)\n        sphere(d = 0.5 + rand(i) * 0.5, $fn = 8);\n    }\n}\n\n// Helper function for pseudo-random\nfunction rand(seed) = (seed * 9301 + 49297) % 233280 / 233280;\n\n// Main assembly\nunion() {\n    // Baked batter base\n    color(batter_color)\n    clafoutis_base();\n    \n    // Browning on top surface\n    translate([0, 0, clafoutis_height - 0.5])\n    color(browned_color)\n    cylinder(h = 0.5, r = clafoutis_diameter/2, $fn = 64);\n    \n    // Place cherries in circular pattern\n    for(i = [0:cherry_count-1]) {\n        angle = i * 360/cherry_count;\n        radius = clafoutis_diameter/3;\n        x = cos(angle) * radius;\n        y = sin(angle) * radius;\n        \n        translate([x, y, clafoutis_height + cherry_depth])\n        rotate([0, 0, rand(i * 100) * 30])\n        cherry();\n    }\n    \n    // Add surface texture\n    surface_texture();\n    \n    // Central cherry\n    translate([0, 0, clafoutis_height + cherry_depth])\n    cherry();\n}",
    "renders": true
  },
  {
    "food_item": "plumkuchen",
    "openscad_code": "// Plumkuchen - German plum cake\n// Base dimensions: 80mm diameter, 15mm thick\n// Topping: sliced plums arranged in circles\n\n// Colors\nbase_color = \"#D2B48C\";   // light tan cake\nplum_color = \"#4B0082\";   // dark purple plums\nedge_color = \"#8B4513\";   // darker crust edge\n\n// Main module\nmodule plumkuchen() {\n    // Cake base\n    difference() {\n        // Main disk\n        color(base_color) cylinder(h=15, r=40, $fn=64);\n        \n        // Center hole (traditional style)\n        color(base_color) cylinder(h=16, r=8, $fn=32);\n    }\n    \n    // Raised edge/crust\n    translate([0, 0, 12]) {\n        color(edge_color) cylinder(h=5, r1=40, r2=38, $fn=64);\n    }\n    \n    // Plum slices arranged in circles\n    plum_slices();\n    \n    // Cake texture dots\n    cake_texture();\n}\n\n// Module for creating plum slices\nmodule plum_slice() {\n    // Plum half (half cylinder)\n    difference() {\n        color(plum_color) cylinder(h=3, r=8, $fn=32);\n        translate([0, -9, -1]) cube([18, 18, 5]);\n    }\n    \n    // Plum pit indentation\n    translate([0, 0, 2.5]) {\n        color(\"#2F1B14\") sphere(r=2, $fn=16);\n    }\n}\n\n// Arrange plum slices in circles\nmodule plum_slices() {\n    // Inner ring (6 slices)\n    for(i = [0:5]) {\n        rotate([0, 0, i*60]) {\n            translate([20, 0, 15]) {\n                rotate([0, 0, 30]) plum_slice();\n            }\n        }\n    }\n    \n    // Middle ring (8 slices)\n    for(i = [0:7]) {\n        rotate([0, 0, i*45]) {\n            translate([30, 0, 15]) {\n                rotate([0, 0, 22.5]) plum_slice();\n            }\n        }\n    }\n    \n    // Outer ring (10 slices)\n    for(i = [0:9]) {\n        rotate([0, 0, i*36]) {\n            translate([35, 0, 15]) {\n                rotate([0, 0, 18]) plum_slice();\n            }\n        }\n    }\n}\n\n// Cake surface texture\nmodule cake_texture() {\n    // Small bumps for texture\n    for(i = [0:20]) {\n        angle = i * 137.5; // golden angle for natural distribution\n        radius = 5 + i * 1.5;\n        translate([radius * cos(angle), radius * sin(angle), 0]) {\n            translate([0, 0, 14.5]) {\n                color(base_color) sphere(r=0.5, $fn=8);\n            }\n        }\n    }\n}\n\n// Create the plumkuchen\nplumkuchen();",
    "renders": true
  },
  {
    "food_item": "apfelstrudel",
    "openscad_code": "// Apfelstrudel - 3D Printable Food Model\n// Medium complexity realistic style\n\n// Overall dimensions: 80mm x 35mm x 25mm\n\n// Main roll body\nmodule strudel_body() {\n    color(\"burlywood\") \n    difference() {\n        // Main cylindrical body\n        translate([0, 0, 12.5])\n            scale([1, 0.8, 1])\n            cylinder(h=25, r1=40, r2=38, $fn=50);\n        \n        // Hollow out center\n        translate([0, 0, 10])\n            scale([1, 0.75, 1])\n            cylinder(h=30, r1=30, r2=28, $fn=50);\n    }\n}\n\n// Pastry layers texture\nmodule pastry_layers() {\n    for (i = [0:3:25]) {\n        color(\"wheat\") \n        translate([0, 0, i])\n            scale([1, 0.8, 0.1])\n            cylinder(h=0.5, r1=40 - i*0.5, r2=39 - i*0.5, $fn=40);\n    }\n}\n\n// Apple filling visible at ends\nmodule apple_filling() {\n    color(\"goldenrod\") {\n        // Left end\n        translate([-39, 0, 12.5])\n            rotate([90, 0, 0])\n            cylinder(h=2, r=8, $fn=20);\n        \n        // Right end\n        translate([39, 0, 12.5])\n            rotate([90, 0, 0])\n            cylinder(h=2, r=8, $fn=20);\n    }\n}\n\n// Raisins\nmodule raisins() {\n    for (i = [0:4]) {\n        color(\"saddlebrown\")\n        translate([-35 + i*15, sin(i*45)*5, 12 + cos(i*30)*3])\n            sphere(r=1.5, $fn=8);\n    }\n}\n\n// Powdered sugar\nmodule powdered_sugar() {\n    color(\"white\")\n    for (i = [0:5:80]) {\n        for (j = [0:5:35]) {\n            if (i > 5 && i < 75) {\n                translate([-40 + i, -17.5 + j, 25.2])\n                    sphere(r=0.3, $fn=4);\n            }\n        }\n    }\n}\n\n// Crisscross pattern on top\nmodule pastry_pattern() {\n    color(\"tan\")\n    for (i = [0:10:80]) {\n        translate([-40 + i, -18, 25])\n            rotate([90, 0, 45])\n            cylinder(h=35, r=0.5, $fn=4);\n    }\n    for (i = [0:10:35]) {\n        translate([-40, -17.5 + i, 25])\n            rotate([90, 0, 45])\n            cylinder(h=80, r=0.5, $fn=4);\n    }\n}\n\n// Assembly\nstrudel_body();\npastry_layers();\napple_filling();\nraisins();\npowdered_sugar();\npastry_pattern();",
    "renders": true
  },
  {
    "food_item": "kuchen",
    "openscad_code": "// German Streuselkuchen (coffee-cake) with crumbs and fruit topping\n// Size: 80 mm diameter x 30 mm high – 3D-print friendly\n\n$fa = 2; $fs = 0.5;\n\n// --- Colors ----------------------------------------------------------\ncrust_col   = \"#C19A6B\";   // baked yeast base\ncrumb_col   = \"#D2B48C\";   // light streusel crumbs\nfruit_col   = \"#8B0000\";   // dark cherry topping\n\n// --- Helper modules --------------------------------------------------\nmodule rounded_cylinder(h, r1, r2, center=false) {\n    intersection() {\n        cylinder(h=h, r1=r1, r2=r2, center=center);\n        sphere(r=r1);\n        translate([0,0,h]) sphere(r=r2);\n    }\n}\n\n// --- Crumb -----------------------------------------------------------\nmodule crumb(r) {\n    // Random irregular crumb grain\n    translate([rands(-1,1,1)[0],\n               rands(-1,1,1)[0],\n               rands(-1,1,1)[0]])\n    scale([rands(0.8,1.2,1)[0],\n           rands(0.8,1.2,1)[0],\n           rands(0.8,1.2,1)[0]])\n    sphere(r=r);\n}\n\n// --- Streusel layer --------------------------------------------------\nmodule streusel_layer(diam, h) {\n    difference() {\n        // Overall crumb blanket\n        color(crumb_col)\n        cylinder(h=h, d=diam, $fn=64);\n\n        // Indent for fruit filling\n        translate([0,0,-0.1])\n        cylinder(h=h+0.2, d=diam*0.55, $fn=64);\n    }\n\n    // Individual crumbs on top\n    for(i=[0:250]) {\n        color(crumb_col)\n        translate([rands(-diam/2.1, diam/2.1, 1)[0],\n                   rands(-diam/2.1, diam/2.1, 1)[0],\n                   h+rands(-0.3,0.3,1)[0]])\n        crumb(rands(0.8,1.5,1)[0]);\n    }\n}\n\n// --- Fruit topping ---------------------------------------------------\nmodule fruit_topping(diam, h) {\n    color(fruit_col)\n    for(i=[0:45]) {\n        rotate([0,0,rands(0,360,1)[0]])\n        translate([rands(0,diam*0.23,1)[0],0,0])\n        sphere(r=rands(1.2,2.2,1)[0]);\n    }\n}\n\n// --- Yeast base ------------------------------------------------------\nmodule yeast_base(diam, h) {\n    color(crust_col)\n    difference() {\n        // Main disk\n        cylinder(h=h, d=diam, $fn=128);\n\n        // Shallow rim\n        translate([0,0,-0.1])\n        cylinder(h=h+0.2, d=diam*0.85, $fn=128);\n    }\n\n    // Subtle texture lines\n    for(a=[0:10:360])\n        rotate([0,0,a])\n        translate([diam/2-0.5,h/2,0])\n        rotate([90,0,90])\n        color(crust_col)\n        cylinder(h=diam, d=0.3, $fn=8);\n}\n\n// --- Assembly --------------------------------------------------------\nunion() {\n    // Bottom to top\n    yeast_base(80, 12);\n    translate([0,0,12]) fruit_topping(80, 3);\n    translate([0,0,12]) streusel_layer(80, 8);\n}",
    "renders": true
  },
  {
    "food_item": "streusel",
    "openscad_code": "// Streusel - German crumb topping for coffee cake\n// Realistic style, medium complexity\n\n$fn=32;\n\n// Main parameters for 3D printing\nscale_factor = 2;  // Scale up from base 1 unit\nbase_size = 30 * scale_factor;  // ~60mm final size\ncrumb_size = 2.5 * scale_factor;  // Individual crumb size\n\n// Colors\ncrumb_color = \"#D4A574\";  // Golden brown\ndarker_color = \"#8B7355\";  // Darker toasted parts\nlight_color = \"#F5DEB3\";  // Light flour parts\n\n// Random crumb generator\nmodule random_crumb(size) {\n    // Create irregular crumb shape with boolean operations\n    difference() {\n        // Base rounded shape\n        translate([rand(-1,1), rand(-1,1), rand(0,0.5)])\n        scale([rand(0.8,1.2), rand(0.8,1.2), rand(0.7,1.3)])\n        sphere(d=size);\n        \n        // Add irregularities\n        for(i=[0:3]) {\n            rotate([rand(0,360), rand(0,360), rand(0,360)])\n            translate([rand(0,size/3), rand(0,size/3), rand(-size/4,size/4)])\n            sphere(d=rand(size/3,size/2));\n        }\n        \n        // Random holes for texture\n        for(i=[0:2]) {\n            translate([rand(-size/3,size/3), rand(-size/3,size/3), rand(-size/3,size/3)])\n            sphere(d=rand(size/5,size/3));\n        }\n    }\n}\n\n// Generate random value\nfunction rand(min,max) = min + (max-min)*(rands(0,1,1)[0]);\n\n// Create a cluster of crumbs\nmodule crumb_cluster(x, y, z, count) {\n    translate([x, y, z]) {\n        for(i=[0:count-1]) {\n            // Position crumbs in natural pile\n            translate([\n                rand(-base_size/4, base_size/4),\n                rand(-base_size/4, base_size/4),\n                rand(0, base_size/8)\n            ]) {\n                color([rands(0.7,1,1)[0], rands(0.7,1,1)[0], rands(0.7,1,1)[0]]) {\n                    // Vary colors slightly\n                    if(rands(0,1,1)[0] > 0.7) {\n                        color(darker_color) random_crumb(crumb_size * rand(0.8,1.2));\n                    } else if(rands(0,1,1)[0] > 0.4) {\n                        color(crumb_color) random_crumb(crumb_size * rand(0.8,1.2));\n                    } else {\n                        color(light_color) random_crumb(crumb_size * rand(0.8,1.2));\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Main streusel pile\nmodule streusel_pile() {\n    // Base layer - flatter crumbs\n    for(i=[0:15]) {\n        crumb_cluster(\n            rand(-base_size/2, base_size/2),\n            rand(-base_size/2, base_size/2),\n            0,\n            1\n        );\n    }\n    \n    // Middle layer - medium height\n    for(i=[0:20]) {\n        crumb_cluster(\n            rand(-base_size/3, base_size/3),\n            rand(-base_size/3, base_size/3),\n            base_size/8,\n            1\n        );\n    }\n    \n    // Top layer - taller clusters\n    for(i=[0:10]) {\n        crumb_cluster(\n            rand(-base_size/4, base_size/4),\n            rand(-base_size/4, base_size/4),\n            base_size/4,\n            rand(2,4)\n        );\n    }\n    \n    // Some individual crumbs scattered on top\n    for(i=[0:8]) {\n        translate([\n            rand(-base_size/3, base_size/3),\n            rand(-base_size/3, base_size/3),\n            base_size/3 + rand(0,base_size/6)\n        ]) {\n            color(crumb_color) {\n                scale([rand(0.8,1.2), rand(0.8,1.2), rand(0.8,1.2)])\n                random_crumb(crumb_size * 0.7);\n            }\n        }\n    }\n}\n\n// Create the streusel\nstreusel_pile();",
    "renders": true
  },
  {
    "food_item": "gugelhupf",
    "openscad_code": "// Gugelhupf (Austrian bundt cake) - realistic medium complexity\n// Classic ring shape with fluted sides and textured surface\n\nmodule cake_base() {\n    // Main cake ring with fluted sides\n    difference() {\n        // Outer fluted ring\n        union() {\n            for (i = [0:15:359]) {\n                rotate([0, 0, i]) {\n                    translate([0, 0, 0]) {\n                        cylinder(h=25, d1=50, d2=48, $fn=12);\n                    }\n                }\n            }\n        }\n        \n        // Center hole\n        cylinder(h=26, d=15, $fn=32);\n    }\n}\n\nmodule cake_top() {\n    // Raised top layer with slight dome\n    difference() {\n        translate([0, 0, 25]) {\n            cylinder(h=8, d1=48, d2=45, $fn=32);\n        }\n        \n        // Center hole continues\n        cylinder(h=9, d=15, $fn=32);\n    }\n}\n\nmodule glaze_drips() {\n    // Chocolate glaze drips\n    color([0.4, 0.2, 0.1]) {\n        for (i = [0:45:359]) {\n            rotate([0, 0, i]) {\n                translate([20, 0, 33]) {\n                    scale([1, 1, 1.5]) {\n                        sphere(2.5, $fn=8);\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule powdered_sugar() {\n    // Powdered sugar dusting\n    color([0.95, 0.95, 0.9]) {\n        for (i = [0:20:359]) {\n            for (j = [18:2:22]) {\n                rotate([0, 0, i]) {\n                    translate([j, 0, 34.5]) {\n                        sphere(0.3, $fn=4);\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule raisins() {\n    // Raisins embedded in cake\n    color([0.2, 0.1, 0.05]) {\n        for (i = [0:30:359]) {\n            rotate([0, 0, i]) {\n                translate([12 + sin(i*3)*3, 0, 10 + cos(i*2)*5]) {\n                    sphere(1, $fn=6);\n                }\n            }\n        }\n    }\n}\n\n// Main assembly\ncolor([0.85, 0.7, 0.5]) {\n    cake_base();\n    cake_top();\n}\n\ncolor([0.4, 0.2, 0.1]) {\n    // Thin glaze layer\n    difference() {\n        translate([0, 0, 33]) {\n            cylinder(h=1.5, d1=47, d2=44, $fn=32);\n        }\n        cylinder(h=2, d=15, $fn=32);\n    }\n}\n\nglaze_drips();\npowdered_sugar();\nraisins();",
    "renders": true
  },
  {
    "food_item": "sachertorte",
    "openscad_code": "// Sachertorte - Austrian chocolate cake with apricot jam and chocolate glaze\n// Dimensions: 80mm diameter, 30mm height\n\n// Main colors\n$fn = 50;\n\n// Base cake layer\nmodule cake_base() {\n    color([0.4, 0.25, 0.15])  // Dark chocolate cake color\n    cylinder(h = 15, r = 40, $fn = 100);\n}\n\n// Apricot jam layer on top\nmodule jam_layer() {\n    color([0.9, 0.5, 0.1])  // Apricot orange\n    translate([0, 0, 15])\n    cylinder(h = 2, r = 39, $fn = 100);\n}\n\n// Second cake layer\nmodule cake_top() {\n    color([0.4, 0.25, 0.15])\n    translate([0, 0, 17])\n    cylinder(h = 8, r = 39, $fn = 100);\n}\n\n// Chocolate glaze covering\nmodule chocolate_glaze() {\n    color([0.2, 0.1, 0.05])  // Dark chocolate\n    translate([0, 0, 16.5])\n    cylinder(h = 10, r = 41, $fn = 100);\n    \n    // Drip details around edge\n    for(i = [0:15:360]) {\n        rotate([0, 0, i])\n        translate([39, 0, 16.5])\n        rotate([90, 0, 0])\n        cylinder(h = 3 + (i % 5), r1 = 2, r2 = 1, $fn = 8);\n    }\n}\n\n// Cake base disk\nmodule cake_board() {\n    color([0.8, 0.8, 0.8])\n    translate([0, 0, -1])\n    cylinder(h = 1, r = 45, $fn = 100);\n}\n\n// Chocolate square decoration pattern on top\nmodule chocolate_pattern() {\n    color([0.15, 0.08, 0.03])\n    translate([0, 0, 26.5])\n    difference() {\n        // Main chocolate rectangle\n        cube([16, 16, 0.5], center = true);\n        \n        // Inner triangle pattern\n        for(x = [-6, -2, 2, 6]) {\n            for(y = [-6, -2, 2, 6]) {\n                translate([x, y, 0.25])\n                cube([3, 3, 0.5], center = true);\n            }\n        }\n    }\n}\n\n// \"Sacher\" text impression (simplified)\nmodule sacher_text() {\n    color([0.1, 0.05, 0.0])\n    translate([-8, 0, 26.7])\n    linear_extrude(height = 0.3) {\n        text(\"SACHER\", size = 4, font = \"Arial:style=Bold\");\n    }\n}\n\n// Assembly\nunion() {\n    cake_board();\n    cake_base();\n    jam_layer();\n    cake_top();\n    chocolate_glaze();\n    chocolate_pattern();\n    sacher_text();\n}",
    "renders": true
  },
  {
    "food_item": "linzertorte",
    "openscad_code": "// Linzertorte - Austrian lattice pie with raspberry jam\n// Overall dimensions: 80mm diameter, 20mm height\n\n// Colors\n$fn = 32;\n\n// Base tart shell\nmodule tart_shell() {\n    difference() {\n        // Main shell body\n        cylinder(h=8, r=40, $fn=64);\n        \n        // Hollow out center\n        translate([0, 0, 2])\n            cylinder(h=8, r=36, $fn=64);\n        \n        // Beveled edge\n        translate([0, 0, 6])\n            cylinder(h=2, r1=40, r2=38, $fn=64);\n    }\n}\n\n// Lattice strips\nmodule lattice() {\n    color([0.8, 0.6, 0.4])\n    for(i = [-30:15:30]) {\n        // Horizontal strips\n        translate([i, 0, 15])\n            rotate([90, 0, 0])\n                cylinder(h=80, r=2, $fn=8);\n        \n        // Vertical strips  \n        translate([0, i, 15])\n            rotate([90, 0, 90])\n                cylinder(h=80, r=2, $fn=8);\n    }\n}\n\n// Raspberry jam filling\nmodule jam() {\n    color([0.6, 0.1, 0.2])\n    translate([0, 0, 8])\n        cylinder(h=6, r=35, $fn=64);\n}\n\n// Crust texture details\nmodule crust_texture() {\n    color([0.7, 0.5, 0.3])\n    for(a = [0:30:359]) {\n        translate([38 * cos(a), 38 * sin(a), 7.5])\n            sphere(r=1.2);\n    }\n}\n\n// Top edge decoration\nmodule edge_decoration() {\n    color([0.75, 0.55, 0.35])\n    translate([0, 0, 14])\n        difference() {\n            cylinder(h=2, r=41, $fn=128);\n            cylinder(h=2, r=39, $fn=128);\n        }\n}\n\n// Assembly\nunion() {\n    // Main shell with color\n    color([0.75, 0.55, 0.35])\n    tart_shell();\n    \n    // Jam layer\n    jam();\n    \n    // Lattice top\n    lattice();\n    \n    // Crust texture on top edge\n    crust_texture();\n    \n    // Decorative edge\n    edge_decoration();\n}",
    "renders": true
  },
  {
    "food_item": "schwarzwalder",
    "openscad_code": "// Schwarzwälder Schinken (Black Forest Ham) slice\n// Realistic style, medium complexity\n\n$fn = 36;\n\n// Main parameters\nslice_diameter = 80;\nslice_thickness = 3;\nfat_thickness = 0.8;\nrind_thickness = 1.2;\n\n// Colors\ncolor_meat = [0.4, 0.15, 0.15];\ncolor_fat = [1, 0.95, 0.85];\ncolor_rind = [0.1, 0.05, 0.05];\n\n// Function to create wavy meat surface\nmodule wavy_surface(height, freq, amp) {\n    for(i = [0:freq-1]) {\n        rotate([0, 0, i * 360/freq])\n        translate([slice_diameter/4, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h=slice_diameter/2, d=height*2, center=true);\n    }\n}\n\n// Create fat marbling pattern\nmodule fat_marbling() {\n    color(color_fat)\n    for(i = [0:15]) {\n        translate([\n            (rand(i*2)-0.5)*slice_diameter*0.8,\n            (rand(i*3)-0.5)*slice_diameter*0.8,\n            slice_thickness/2\n        ])\n        sphere(d=rand(i*5+2)+1);\n    }\n}\n\n// Create ham slice base\nmodule ham_slice() {\n    difference() {\n        // Main meat body\n        color(color_meat)\n        cylinder(h=slice_thickness, d=slice_diameter, center=true);\n        \n        // Create uneven surface\n        intersection() {\n            cylinder(h=slice_thickness*2, d=slice_diameter, center=true);\n            wavy_surface(slice_thickness*0.3, 8, 1);\n        }\n        \n        // Cut center hole for realistic slice appearance\n        translate([0, 0, -slice_thickness])\n        cylinder(h=slice_thickness*2, d=slice_diameter*0.15, center=false);\n    }\n}\n\n// Create fat layer on one side\nmodule fat_layer() {\n    color(color_fat)\n    translate([0, 0, slice_thickness/2 + fat_thickness/2])\n    cylinder(h=fat_thickness, d=slice_diameter*0.95, center=true);\n}\n\n// Create rind edge\nmodule rind_edge() {\n    color(color_rind)\n    difference() {\n        cylinder(h=slice_thickness*1.2, d=slice_diameter, center=true);\n        cylinder(h=slice_thickness*1.3, d=slice_diameter*0.92, center=true);\n    }\n}\n\n// Create texture dots for meat grain\nmodule meat_grain() {\n    color([color_meat[0]*0.8, color_meat[1]*0.8, color_meat[2]*0.8])\n    for(i = [0:30]) {\n        angle = rand(i*10) * 360;\n        radius = rand(i*20) * slice_diameter/2 * 0.9;\n        translate([\n            cos(angle) * radius,\n            sin(angle) * radius,\n            slice_thickness/2 + fat_thickness + 0.1\n        ])\n        sphere(d=0.8);\n    }\n}\n\n// Assembly\nunion() {\n    // Main ham slice\n    ham_slice();\n    \n    // Fat layer\n    fat_layer();\n    \n    // Rind edge\n    rind_edge();\n    \n    // Fat marbling within meat\n    translate([0, 0, -slice_thickness/2 + 0.1])\n    fat_marbling();\n    \n    // Meat grain texture\n    meat_grain();\n    \n    // Edge details for realistic appearance\n    for(i = [0:20]) {\n        angle = i * 360/20 + rand(i) * 5;\n        radius = slice_diameter/2 + rand(i*30) * 0.5;\n        translate([\n            cos(angle) * radius,\n            sin(angle) * radius,\n            0\n        ])\n        color(color_rind)\n        sphere(d=0.5 + rand(i*40) * 0.5);\n    }\n}",
    "renders": true
  },
  {
    "food_item": "dobos",
    "openscad_code": "// Dobos Torte - 7-layer Hungarian cake with caramel top\n// Dimensions: 80mm diameter, 60mm height\n\n$fn = 36;\n\n// Main colors\n$chocolate = [101, 67, 33];\n$caramel = [160, 82, 45];\n$sponge = [245, 222, 179];\n$chocolate_cream = [94, 38, 18];\n\n// Cake layer module\nmodule cake_layer(radius, height) {\n    difference() {\n        cylinder(h = height, r = radius);\n        // Add subtle texture to top surface\n        for(i = [0:5]) {\n            translate([0, 0, height - 0.1])\n            rotate([0, 0, i * 60])\n            translate([radius * 0.7, 0, 0])\n            sphere(r = 0.3);\n        }\n    }\n}\n\n// Chocolate cream layer with wavy top\nmodule cream_layer(radius, height) {\n    union() {\n        // Base cream\n        cylinder(h = height * 0.7, r = radius);\n        \n        // Wavy top surface\n        for(i = [0:20]) {\n            angle = i * 18;\n            offset = sin(i * 2) * 0.8;\n            translate([0, 0, height * 0.7])\n            rotate([0, 0, angle])\n            translate([radius * 0.85 + offset, 0, 0])\n            sphere(r = 0.5);\n        }\n    }\n}\n\n// Caramel wedge for top\nmodule caramel_wedge() {\n    difference() {\n        // Main wedge\n        translate([0, 0, 0.5])\n        cylinder(h = 3, r1 = 35, r2 = 40);\n        \n        // Cut into 12 wedges\n        for(i = [0:11]) {\n            rotate([0, 0, i * 30])\n            translate([0, -50, -1])\n            cube([100, 100, 5], center = true);\n        }\n        \n        // Center hole\n        cylinder(h = 5, r = 2, center = true);\n    }\n}\n\n// Assemble the dobos torte\nunion() {\n    // Bottom cake layer\n    color($sponge)\n    translate([0, 0, 0])\n    cake_layer(40, 2);\n    \n    // Chocolate cream layers\n    color($chocolate_cream)\n    translate([0, 0, 2])\n    cream_layer(39, 4);\n    \n    // Alternate cake and cream layers\n    for(layer = [1:6]) {\n        translate([0, 0, layer * 6]) {\n            color($sponge)\n            cake_layer(40 - layer * 0.5, 2);\n            \n            if(layer < 6) {\n                color($chocolate_cream)\n                translate([0, 0, 2])\n                cream_layer(39 - layer * 0.5, 4);\n            }\n        }\n    }\n    \n    // Caramel top layer\n    color($caramel)\n    translate([0, 0, 36])\n    caramel_wedge();\n    \n    // Side chocolate coating\n    color($chocolate)\n    difference() {\n        cylinder(h = 42, r = 40.5);\n        cylinder(h = 42, r = 39.5);\n    }\n    \n    // Chocolate decorative rim\n    color($chocolate)\n    for(i = [0:35]) {\n        angle = i * 10;\n        translate([0, 0, 38])\n        rotate([0, 0, angle])\n        translate([40.5, 0, 0])\n        cube([1, 2, 3]);\n    }\n}",
    "renders": true
  },
  {
    "food_item": "rigojancsi",
    "openscad_code": "// Rigó Jancsi - Hungarian chocolate sponge cake with chocolate cream\n// Dimensions: 80mm x 40mm x 35mm\n\n// Main colors\ncake_color = [0.82, 0.66, 0.51];\ncream_color = [0.36, 0.25, 0.15];\nchocolate_color = [0.20, 0.11, 0.05];\n\n// Wall thickness for 3D printing\nwall = 1.2;\n\n// Main cake body\nmodule cake_base() {\n    difference() {\n        // Solid cake block\n        color(cake_color)\n        cube([80, 40, 20], center = true);\n        \n        // Hollow center for cream\n        translate([0, 0, 2])\n        cube([80 - wall*2, 40 - wall*2, 18], center = true);\n    }\n}\n\n// Chocolate cream layer\nmodule cream_layer() {\n    color(cream_color)\n    translate([0, 0, -8])\n    cube([80 - wall*2, 40 - wall*2, 6], center = true);\n}\n\n// Top chocolate glaze\nmodule chocolate_glaze() {\n    difference() {\n        color(chocolate_color)\n        translate([0, 0, 11])\n        cube([82, 42, 4], center = true);\n        \n        // Rounded top edges\n        translate([0, 0, 13])\n        for(i = [0:3]) {\n            rotate([0, 0, i*90])\n            translate([40, 20, 0])\n            cylinder(h = 4, r = 4, center = true);\n        }\n    }\n}\n\n// Sponge texture pattern on sides\nmodule sponge_texture() {\n    color(cake_color)\n    for(x = [-35:5:35]) {\n        for(y = [-15:5:15]) {\n            if(x*x + y*y < 40*40) {\n                translate([x, y, 10.5])\n                sphere(r = 0.8, $fn = 8);\n            }\n        }\n    }\n}\n\n// Chocolate swirl decoration on top\nmodule swirl_pattern() {\n    color(chocolate_color)\n    for(i = [0:20:360]) {\n        rotate([0, 0, i])\n        translate([15, 0, 13])\n        rotate([90, 0, 0])\n        cylinder(h = 3, r1 = 1.5, r2 = 0.5, center = true);\n    }\n}\n\n// Assembly\nunion() {\n    cake_base();\n    cream_layer();\n    chocolate_glaze();\n    \n    // Add sponge texture only on visible sides\n    translate([0, 0, 0])\n    sponge_texture();\n    \n    // Chocolate decoration\n    swirl_pattern();\n    \n    // Diagonal chocolate lines on top\n    color(chocolate_color)\n    for(i = [-2:1:2]) {\n        translate([i*8, 0, 13.5])\n        rotate([0, 0, 45])\n        cube([30, 1, 0.5], center = true);\n    }\n}",
    "renders": true
  },
  {
    "food_item": "kardinalschnitten",
    "openscad_code": "// Kardinalschnitten - Austrian layered meringue dessert\n// Dimensions: 80mm x 60mm x 25mm (printable size)\n\n// Main colors\n$fa = 2;\n$fs = 0.5;\n\n// Base meringue layers\nmodule meringue_layer(height, width, depth, texture_depth) {\n    difference() {\n        // Main layer\n        translate([0, 0, height/2])\n            cube([width, depth, height], center=true);\n        \n        // Texture holes for realistic meringue surface\n        for (x = [-width/2+5 : 10 : width/2-5]) {\n            for (y = [-depth/2+5 : 10 : depth/2-5]) {\n                translate([x, y, height/2])\n                    sphere(d=texture_depth, $fn=8);\n            }\n        }\n    }\n}\n\n// Sponge cake layer\nmodule sponge_layer(height, width, depth) {\n    color([0.95, 0.85, 0.75]) {\n        translate([0, 0, height/2])\n            cube([width-2, depth-2, height], center=true);\n    }\n}\n\n// Whipped cream layer\nmodule cream_layer(height, width, depth) {\n    color([0.98, 0.98, 0.95]) {\n        hull() {\n            // Create organic rounded shape\n            for (x = [-width/2+5 : 15 : width/2-5]) {\n                for (y = [-depth/2+5 : 15 : depth/2-5]) {\n                    translate([x, y, 0])\n                        sphere(d=height*2, $fn=12);\n                }\n            }\n        }\n    }\n}\n\n// Strawberry slices\nmodule strawberry_slice(radius, height) {\n    color([0.9, 0.2, 0.3]) {\n        // Main slice body\n        cylinder(h=height, r=radius, $fn=16);\n        \n        // Seeds\n        color([0.95, 0.95, 0.1]) {\n            for (angle = [0 : 30 : 360]) {\n                for (dist = [radius*0.3 : 0.8 : radius*0.8]) {\n                    rotate([0, 0, angle])\n                        translate([dist, 0, height/2+0.1])\n                            sphere(d=0.4, $fn=6);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\ntranslate([0, 0, 5]) {\n    // Bottom meringue layer\n    color([0.95, 0.95, 0.9])\n        meringue_layer(6, 80, 60, 2);\n    \n    // Sponge cake layer\n    translate([0, 0, 6])\n        sponge_layer(5, 78, 58);\n    \n    // Whipped cream layer 1\n    translate([0, 0, 11])\n        scale([1, 1, 0.5])\n            cream_layer(8, 76, 56);\n    \n    // Middle meringue layer\n    color([0.95, 0.95, 0.9])\n        translate([0, 0, 15])\n            meringue_layer(5, 80, 60, 1.5);\n    \n    // More whipped cream\n    translate([0, 0, 20])\n        scale([1, 1, 0.4])\n            cream_layer(6, 74, 54);\n    \n    // Strawberry decorations\n    for (x = [-25 : 25 : 25]) {\n        for (y = [-15 : 15 : 15]) {\n            translate([x, y, 22.5])\n                rotate([0, 0, rand(x*100+y*10)*360])\n                    strawberry_slice(4, 1);\n        }\n    }\n    \n    // Dusting of powdered sugar\n    color([1, 1, 1, 0.6]) {\n        for (i = [0 : 50]) {\n            translate([\n                rand(i*100)*80-40,\n                rand(i*200)*60-30,\n                23.5\n            ])\n                sphere(d=0.5, $fn=4);\n        }\n    }\n}",
    "renders": true
  },
  {
    "food_item": "cremespitz",
    "openscad_code": "// Cremespitz (cream horn) - realistic style, medium complexity\n$fn=32;\n\n// Main parameters\nhorn_length = 70;\nhorn_radius = 12;\ncone_wall_thickness = 2;\ncream_thickness = 8;\ncream_swirls = 5;\n\n// Colors\ncone_color = \"#B8860B\";  // golden brown\ncream_color = \"#FFF8DC\"; // vanilla cream\nsugar_color = \"#FFFFFF\"; // powdered sugar\n\n// Helper module for creating a spiral\nmodule spiral(height, radius, thickness, swirls) {\n    for(i=[0:swirls*360]) {\n        rotate([0, 0, i])\n        translate([radius * cos(i/10), radius * sin(i/10), i/swirls/360*height])\n        rotate([90, 0, 0])\n        cylinder(h=thickness, r1=thickness/2, r2=thickness/3);\n    }\n}\n\n// Horn cone pastry shell\nmodule horn_cone() {\n    color(cone_color) {\n        difference() {\n            // Outer cone\n            cylinder(h=horn_length, r1=horn_radius, r2=horn_radius/3);\n            \n            // Inner hollow space\n            translate([0, 0, cone_wall_thickness])\n            cylinder(h=horn_length - cone_wall_thickness*2, r1=horn_radius-cone_wall_thickness, r2=horn_radius/3-cone_wall_thickness);\n            \n            // Opening at bottom\n            translate([0, 0, -1])\n            cylinder(h=cone_wall_thickness*2, r1=horn_radius/3, r2=horn_radius/3+2);\n        }\n        \n        // Texture lines for pastry layers\n        for(i=[0:3:horn_length]) {\n            translate([0, 0, i])\n            rotate([0, 0, i*2])\n            scale([1.01, 1.01, 0.2])\n            cylinder(h=0.5, r1=horn_radius*(1-i/horn_length*0.7), r2=horn_radius*(1-(i+0.5)/horn_length*0.7));\n        }\n    }\n}\n\n// Whipped cream filling\nmodule cream_filling() {\n    color(cream_color) {\n        // Main cream swirl\n        for(i=[0:20:horn_length-10]) {\n            rotate([0, 0, i*5])\n            translate([0, 0, i])\n            scale([0.8, 0.8, 1])\n            sphere(r=cream_thickness * (1 - i/horn_length*0.7));\n        }\n        \n        // Swirl on top\n        translate([0, 0, horn_length-5])\n        rotate([0, 0, 45])\n        scale([0.6, 0.6, 1.2])\n        sphere(r=cream_thickness);\n        \n        // Additional cream peaks\n        for(i=[0:120:360]) {\n            rotate([0, 0, i])\n            translate([horn_radius*0.4, 0, horn_length-3])\n            sphere(r=cream_thickness/2);\n        }\n    }\n}\n\n// Sugar dusting\nmodule sugar_dusting() {\n    color(sugar_color, 0.3) {\n        // Random sugar crystals\n        for(i=[0:50]) {\n            translate([\n                horn_radius*0.8*cos(i*73),\n                horn_radius*0.8*sin(i*73),\n                horn_length*0.3 + i*0.5\n            ])\n            scale([0.2, 0.2, 0.1])\n            sphere(r=0.5);\n        }\n    }\n}\n\n// Assembly\nhorn_cone();\ntranslate([0, 0, 5]) cream_filling();\nsugar_dusting();",
    "renders": true
  },
  {
    "food_item": "mohr",
    "openscad_code": "// Mohr (Meringue) - Realistic style, medium complexity\n// Classic French dessert with crisp shell and soft interior\n\n// Color definitions\n$fn = 32;\n\n// Main meringue shell with realistic dome shape\nmodule meringue_shell() {\n    color([0.95, 0.93, 0.87]) difference() {\n        // Outer shell - slightly flattened sphere\n        scale([1, 1, 0.7]) sphere(d = 45);\n        \n        // Hollow interior\n        scale([0.9, 0.9, 0.6]) sphere(d = 40);\n    }\n}\n\n// Create peaked texture on surface\nmodule meringue_peaks() {\n    color([0.97, 0.95, 0.92]) \n    for(i = [0:30]) {\n        rotate([0, 0, i * 12]) translate([20, 0, -5]) \n        scale([0.3, 0.3, 1.5]) sphere(d = 6);\n    }\n}\n\n// Base ring for stability and better printing\nmodule base_ring() {\n    color([0.93, 0.91, 0.85]) \n    difference() {\n        cylinder(h = 3, d1 = 48, d2 = 45);\n        cylinder(h = 3.5, d = 42);\n    }\n}\n\n// Sugar crystallization spots on surface\nmodule sugar_spots() {\n    color([1, 1, 1]) \n    for(i = [0:15]) {\n        rotate([0, 0, i * 24]) translate([18 + (i % 3) * 3, 0, 8 - (i % 2) * 2]) \n        sphere(d = 1.5);\n    }\n}\n\n// Bottom decorative swirl pattern\nmodule swirl_pattern() {\n    color([0.96, 0.94, 0.88]) \n    for(angle = [0:15:360]) {\n        rotate([0, 0, angle]) translate([15, 0, 0]) \n        scale([0.2, 2, 0.5]) sphere(d = 3);\n    }\n}\n\n// Assembly\ntranslate([0, 0, 5]) base_ring();\ntranslate([0, 0, 8]) meringue_shell();\ntranslate([0, 0, 8]) meringue_peaks();\ntranslate([0, 0, 8]) sugar_spots();\ntranslate([0, 0, 5.5]) swirl_pattern();",
    "renders": true
  },
  {
    "food_item": "malakoff",
    "openscad_code": "// Malakoff (Swiss fried cheese ball appetizer)\n// Realistic medium-complexity model\n\n$fn = 32;\n\nmodule malakoff_base() {\n    // Main cheese sphere with slight flattening\n    intersection() {\n        sphere(d = 45);\n        translate([0, 0, -5])\n            cube([50, 50, 40], center = true);\n    }\n}\n\nmodule cheese_texture() {\n    // Small holes like in Swiss cheese\n    for (a = [0:30:359])\n        for (b = [-60:30:60]) {\n            rotate([b, a, 0])\n                translate([22, 0, 0])\n                    rotate([90, 0, 0])\n                        cylinder(h = 2, d1 = 2.5, d2 = 2, $fn = 8);\n        }\n}\n\nmodule breading_coating() {\n    // Irregular breading layer around cheese\n    difference() {\n        sphere(d = 49);\n        sphere(d = 45);\n    }\n    \n    // Breadcrumb texture\n    for (i = [0:8]) {\n        rotate([0, 0, i * 45])\n            translate([24, 0, 12])\n                rotate([90, 0, 0])\n                    cylinder(h = 1.5, d1 = 3, d2 = 2.5);\n                    \n        rotate([0, 0, i * 45 + 22])\n            translate([24, 0, -10])\n                rotate([90, 0, 0])\n                    cylinder(h = 1.5, d1 = 2.5, d2 = 2);\n    }\n}\n\nmodule toothpick() {\n    // Wooden skewer through center\n    translate([0, 0, 25])\n        rotate([0, 0, 10])\n            cylinder(h = 50, d = 2.5, $fn = 8);\n}\n\nmodule malakoff() {\n    // Main cheese body\n    color([1, 0.9, 0.2])  // Yellow cheese color\n    malakoff_base();\n    \n    // Cheese texture holes\n    color([1, 0.9, 0.15])\n    translate([0, 0, -2])\n        scale([0.9, 0.9, 0.9])\n            cheese_texture();\n    \n    // Breading coating\n    color([0.9, 0.7, 0.3])  // Golden brown breading\n    breading_coating();\n    \n    // Toothpick handle\n    color([0.6, 0.4, 0.2])  // Wood color\n    toothpick();\n    \n    // Oil droplet highlights\n    color([1, 0.9, 0.7, 0.6])\n    translate([15, 10, 20])\n        sphere(d = 1.5);\n    translate([-12, -8, 18])\n        sphere(d = 1);\n}\n\n// Render the malakoff\nrotate([0, 0, 15])\n    translate([0, 0, 5])\n        malakoff();",
    "renders": true
  },
  {
    "food_item": "vacherin",
    "openscad_code": "// Vacherin Mont d'Or - 3D printable realistic style\n// Dimensions: ~80mm diameter, 40mm height\n\n$fn = 50;\n\n// Main cheese wheel with bark-like rind\nmodule vacherin() {\n    color(\"#F5DEB3\") // Cream color for cheese\n    difference() {\n        // Main cheese body - slightly domed top\n        union() {\n            cylinder(h = 35, d = 80, center = true);\n            translate([0, 0, 15])\n                scale([1, 1, 0.4])\n                sphere(d = 80);\n        }\n        \n        // Hollow out center for 3D printing\n        translate([0, 0, 5])\n            cylinder(h = 40, d = 60, center = true);\n    }\n    \n    // Bark rind texture around sides\n    for(i = [0:15:359]) {\n        rotate([0, 0, i])\n        translate([39.5, 0, 0])\n            color(\"#8B4513\") // Brown bark color\n            cube([3, 2, 35], center = true);\n    }\n    \n    // Top rind layer with irregular edge\n    translate([0, 0, 17.5]) {\n        color(\"#8B4513\")\n        difference() {\n            cylinder(h = 2, d = 82, center = true);\n            // Create irregular bark pattern\n            for(i = [0:30:359]) {\n                rotate([0, 0, i + 15])\n                translate([35 + sin(i*3)*5, 0, 0])\n                    cube([15, 8, 5], center = true);\n            }\n        }\n    }\n    \n    // Cheese surface texture - small holes\n    for(i = [0:20:359]) {\n        rotate([0, 0, i])\n        translate([random()*30 - 15, random()*30 - 15, 17])\n            color(\"#FFF8DC\")\n            sphere(d = 0.5 + random()*1.5);\n    }\n    \n    // Bottom rind\n    translate([0, 0, -17.5])\n        color(\"#8B4513\")\n        cylinder(h = 2, d = 82, center = true);\n    \n    // Paper wrap band\n    translate([0, 0, -5])\n        color(\"#FFFACD\") // Light yellow paper\n        difference() {\n            cylinder(h = 20, d = 84, center = true);\n            cylinder(h = 22, d = 82, center = true);\n        }\n}\n\n// Supporting wooden box base\nmodule wooden_box() {\n    color(\"#DEB887\") // Wood color\n    difference() {\n        // Box base\n        cube([85, 85, 8], center = true);\n        \n        // Recess for cheese\n        translate([0, 0, -1])\n            cube([82, 82, 10], center = true);\n    }\n    \n    // Wood grain texture\n    for(i = [-40:5:40]) {\n        translate([i, 0, 4.5])\n            color(\"#CD853F\")\n            cube([0.5, 85, 0.5], center = true);\n    }\n}\n\n// Assembly\ntranslate([0, 0, 4])\n    wooden_box();\n\nvacherin();",
    "renders": true
  },
  {
    "food_item": "berawecka",
    "openscad_code": "// Berawecka (Alsatian fruit bread) - realistic medium complexity model\n// 80mm length x 35mm width x 25mm height\n\n$fn = 32;\n\n// Main loaf body with rounded top\nmodule loaf_body() {\n    difference() {\n        // Base rounded shape\n        hull() {\n            translate([-40, -17.5, 0]) cylinder(h=2, r=2);\n            translate([40, -17.5, 0]) cylinder(h=2, r=2);\n            translate([40, 17.5, 0]) cylinder(h=2, r=2);\n            translate([-40, 17.5, 0]) cylinder(h=2, r=2);\n            translate([0, 0, 20]) sphere(r=15);\n        }\n        \n        // Hollow interior for 3D printing\n        translate([0, 0, 5])\n            scale([0.85, 0.85, 0.7])\n            hull() {\n                translate([-35, -15, 0]) cylinder(h=2, r=2);\n                translate([35, -15, 0]) cylinder(h=2, r=2);\n                translate([35, 15, 0]) cylinder(h=2, r=2);\n                translate([-35, 15, 0]) cylinder(h=2, r=2);\n                translate([0, 0, 15]) sphere(r=12);\n            }\n    }\n}\n\n// Dried fruit pieces (raisins, figs, dates)\nmodule dried_fruits() {\n    color(\"#8B4513\")\n    for(i = [1:30]) {\n        translate([\n            -35 + rand(i*3)*70,\n            -15 + rand(i*5)*30,\n            rand(i*7)*15 + 3\n        ]) {\n            scale([1 + rand(i*2), 0.7 + rand(i*11)*0.3, 0.7 + rand(i*13)*0.3])\n            sphere(r=1.5 + rand(i*17));\n        }\n    }\n}\n\n// Nuts (walnuts and almonds)\nmodule nuts() {\n    color(\"#D2691E\")\n    for(i = [1:15]) {\n        translate([\n            -35 + rand(i*19)*70,\n            -15 + rand(i*23)*30,\n            rand(i*29)*15 + 3\n        ]) {\n            rotate([rand(i*31)*360, rand(i*37)*360, rand(i*41)*360])\n            scale([1.2, 1, 0.8])\n            sphere(r=1.8 + rand(i*43)*0.5);\n        }\n    }\n}\n\n// Surface texture - cracked appearance\nmodule surface_cracks() {\n    color(\"#CD853F\")\n    for(i = [1:20]) {\n        translate([\n            -35 + rand(i*47)*70,\n            -15 + rand(i*53)*30,\n            20 - rand(i*59)*5\n        ]) {\n            rotate([90, 0, rand(i*61)*360])\n            scale([rand(i*67)*3 + 1, 0.2, 0.1])\n            cylinder(h=rand(i*71)*3 + 2, r=0.5);\n        }\n    }\n}\n\n// Powdered sugar dusting\nmodule sugar_dusting() {\n    color(\"white\", 0.6)\n    for(i = [1:50]) {\n        translate([\n            -35 + rand(i*73)*70,\n            -15 + rand(i*79)*30,\n            20 + rand(i*83)*2\n        ]) {\n            sphere(r=0.2 + rand(i*89)*0.2);\n        }\n    }\n}\n\n// Helper function for pseudo-random numbers\nfunction rand(seed) = rands(0, 1, 1, seed)[0];\n\n// Assembly\ncolor(\"#D2B48C\") loaf_body();\ndried_fruits();\nnuts();\nsurface_cracks();\nsugar_dusting();",
    "renders": true
  },
  {
    "food_item": "paindepices",
    "openscad_code": "// Pain d'épices - Traditional French spiced bread\n// Dimensions: 80mm x 45mm x 35mm\n\n// Main loaf body\nmodule paindepices_body() {\n    color([0.6, 0.35, 0.2])  // Rich brown color\n    difference() {\n        // Main loaf shape - slightly rounded top\n        hull() {\n            translate([-40, -22.5, 0]) cube([80, 45, 5]);\n            translate([-40, -22.5, 30]) cube([80, 45, 5]);\n            translate([-38, -20.5, 35]) cube([76, 41, 5]);\n        }\n        \n        // Slice indentations on top\n        for(i = [-30:15:30]) {\n            translate([i, -25, 33]) rotate([90, 0, 0]) \n                cylinder(h=5, r1=1.5, r2=0.5);\n        }\n    }\n}\n\n// Crust texture pattern\nmodule crust_texture() {\n    color([0.7, 0.4, 0.25])\n    for(x = [-35:5:35]) {\n        for(y = [-20:4:20]) {\n            if(abs(x) < 38 && abs(y) < 22) {\n                translate([x, y, 0.1]) \n                    scale([1, 0.7, 0.1]) sphere(r=1.8);\n            }\n        }\n    }\n}\n\n// Decorative sugar crystals on top\nmodule sugar_crystals() {\n    color([0.95, 0.95, 0.85])\n    for(i = [1:15]) {\n        translate([randx(-35, 35), randy(-20, 20), 34 + randz(0, 1)]) {\n            scale([0.3, 0.3, 0.3]) {\n                rotate([randx(0, 360), randy(0, 360), randz(0, 360)]) {\n                    cube([1, 1, 1]);\n                }\n            }\n        }\n    }\n}\n\n// Side texture lines\nmodule side_texture() {\n    color([0.65, 0.38, 0.22])\n    for(z = [2:3:30]) {\n        translate([-39.5, -23.5, z]) \n            cube([0.5, 47, 0.3]);\n        translate([39, -23.5, z]) \n            cube([0.5, 47, 0.3]);\n    }\n}\n\n// Helper random functions for crystal placement\nfunction randx(min, max) = min + (max - min) * (floor(sin(1234 * $fn) * 1000) % 1000) / 1000;\nfunction randy(min, max) = min + (max - min) * (floor(sin(5678 * $fn) * 1000) % 1000) / 1000;\nfunction randz(min, max) = min + (max - min) * (floor(sin(9012 * $fn) * 1000) % 1000) / 1000;\n\n// Main assembly\nunion() {\n    paindepices_body();\n    translate([0, 0, 0.2]) crust_texture();\n    side_texture();\n    sugar_crystals();\n}",
    "renders": true
  },
  {
    "food_item": "calisson",
    "openscad_code": "// Calisson - Traditional French almond candy\n// Overall dimensions: 50mm x 25mm x 12mm\n\n$fn = 32;\n\n// Main module for the calisson\nmodule calisson() {\n    // Diamond-shaped base (almond paste layer)\n    color(\"beige\") \n    difference() {\n        // Main diamond body\n        linear_extrude(height = 8) {\n            polygon(points = [\n                [0, 0], [25, 12.5], [0, 25], [-25, 12.5]\n            ]);\n        }\n        \n        // Rounded top edge\n        translate([0, 12.5, 7]) \n        rotate([90, 0, 0])\n        cylinder(h = 25, r1 = 12.5, r2 = 12.5, center = true);\n    }\n    \n    // Royal icing layer on top\n    color(\"ivory\") \n    translate([0, 12.5, 7.5]) \n    rotate([90, 0, 0])\n    cylinder(h = 25, r1 = 12.3, r2 = 12.3, center = true);\n    \n    // Candied melon pieces embedded in almond paste\n    color(\"lightgreen\") {\n        for(i = [-1, 1]) {\n            translate([i * 8, 12.5, 3]) \n            rotate([90, 0, 0])\n            scale([1.2, 0.8, 1])\n            cylinder(h = 10, r = 3);\n        }\n    }\n    \n    // Candied orange peel pieces\n    color(\"orange\") {\n        for(i = [-0.7, 0.7]) {\n            translate([i * 12, 12.5, 3]) \n            rotate([90, 0, 0])\n            scale([1.5, 0.6, 1])\n            cylinder(h = 8, r = 2.5);\n        }\n    }\n    \n    // Almond slivers on surface\n    color(\"wheat\") {\n        for(a = [0:60:300]) {\n            translate([cos(a) * 15, 12.5, 7.8]) \n            rotate([0, 0, a])\n            scale([1, 0.3, 0.1])\n            cube([6, 2, 0.5], center = true);\n        }\n    }\n    \n    // Texture lines on the sides\n    color(\"beige\") {\n        for(z = [1:6]) {\n            for(x = [-20:5:20]) {\n                if(abs(x) < 22) {\n                    translate([x, 12.5, z])\n                    rotate([90, 0, 0])\n                    scale([1, 0.05, 0.05])\n                    cylinder(h = 25, r = 12.5);\n                }\n            }\n        }\n    }\n    \n    // Decorative edge pattern on icing\n    color(\"ivory\") {\n        for(a = [0:15:360]) {\n            translate([cos(a) * 12.2, sin(a) * 12.2 + 12.5, 8.2])\n            sphere(r = 0.5);\n        }\n    }\n}\n\n// Create the calisson\ncalisson();",
    "renders": true
  },
  {
    "food_item": "canele",
    "openscad_code": "// Canele - French pastry with caramelized exterior and custard interior\n// Overall dimensions: 60mm tall, 40mm diameter\n\n// Colors\n$caramel_dark = [101/255, 67/255, 33/255];\n$caramel_light = [160/255, 82/255, 45/255];\n$custard = [255/255, 248/255, 220/255];\n\n// Main body parameters\nbody_height = 60;\ntop_diameter = 40;\nbottom_diameter = 30;\nwall_thickness = 3;\n\n// Create the caramelized exterior shell\nmodule canele_exterior() {\n    color($caramel_dark) {\n        difference() {\n            // Main fluted body\n            cylinder(h = body_height, \n                     r1 = bottom_diameter/2, \n                     r2 = top_diameter/2, \n                     $fn = 16);\n            \n            // Hollow interior\n            translate([0, 0, wall_thickness])\n                cylinder(h = body_height - wall_thickness*2, \n                         r1 = (bottom_diameter/2) - wall_thickness, \n                         r2 = (top_diameter/2) - wall_thickness, \n                         $fn = 16);\n            \n            // Create fluted edges by subtracting cylinders\n            for (i = [0:15]) {\n                rotate([0, 0, i * 22.5])\n                    translate([top_diameter/2 - 2, 0, -1])\n                        cylinder(h = body_height + 2, r = 2, $fn = 8);\n            }\n        }\n    }\n}\n\n// Create the custard interior\nmodule custard_interior() {\n    color($custard) {\n        translate([0, 0, wall_thickness + 1])\n            cylinder(h = body_height - wall_thickness*2 - 2, \n                     r1 = (bottom_diameter/2) - wall_thickness - 1, \n                     r2 = (top_diameter/2) - wall_thickness - 1, \n                     $fn = 16);\n    }\n}\n\n// Add caramelized texture bumps\nmodule texture_bumps() {\n    color($caramel_light) {\n        // Small bumps on the surface\n        for (i = [0:7]) {\n            for (j = [0:15]) {\n                rotate([0, 0, j * 22.5])\n                    translate([\n                        (bottom_diameter/2 + (top_diameter/2 - bottom_diameter/2) * (i/7)) * cos(j * 22.5),\n                        (bottom_diameter/2 + (top_diameter/2 - bottom_diameter/2) * (i/7)) * sin(j * 22.5),\n                        i * (body_height/7)\n                    ])\n                        sphere(r = 1.5, $fn = 8);\n            }\n        }\n    }\n}\n\n// Create the slightly domed bottom\nmodule domed_bottom() {\n    color($caramel_dark) {\n        translate([0, 0, -2])\n            sphere(r = bottom_diameter/2, $fn = 16);\n    }\n}\n\n// Create the characteristic canele shape\nmodule canele() {\n    union() {\n        // Main components\n        canele_exterior();\n        custard_interior();\n        \n        // Add texture details\n        texture_bumps();\n        \n        // Add domed bottom\n        intersection() {\n            domed_bottom();\n            cube([bottom_diameter, bottom_diameter, 5], center = true);\n        }\n    }\n}\n\n// Generate the canele\ncanele();",
    "renders": true
  },
  {
    "food_item": "gateau",
    "openscad_code": "// Gateau with multiple layers, frosting decoration and chocolate shavings\n// Size: ~70mm diameter, 55mm height\n\n$fn = 36;\n\n// Main colors\n$chocolate = [0.36, 0.25, 0.20];\n$vanilla = [0.98, 0.95, 0.88];\n$strawberry = [0.95, 0.75, 0.80];\n\n// Base cake layers module\nmodule cake_layer(radius, height, color) {\n    color(color)\n    union() {\n        difference() {\n            cylinder(r=radius, h=height, center=false);\n            // Create slightly domed top\n            translate([0, 0, height - 2])\n            scale([1, 1, 0.3])\n            sphere(r=radius);\n        }\n        // Add slight rim for realistic edge\n        translate([0, 0, 0.5])\n        cylinder(r=radius+0.5, h=0.5, center=false);\n    }\n}\n\n// Frosting swirl decoration\nmodule frosting_swirl(x, y, z, size) {\n    color($vanilla)\n    translate([x, y, z])\n    scale([size, size, size*1.5])\n    sphere(r=2.5);\n}\n\n// Chocolate shavings\nmodule chocolate_shaving(x, y, z, angle) {\n    color($chocolate)\n    translate([x, y, z])\n    rotate([0, 0, angle])\n    scale([1, 0.3, 0.1])\n    cylinder(r=8, h=1);\n}\n\n// Top frosting decoration\nmodule top_frosting() {\n    union() {\n        // Central swirl\n        for(i = [0:30:330]) {\n            rotate([0, 0, i])\n            translate([0, 12, 52])\n            scale([1, 1, 1.5])\n            sphere(r=3);\n        }\n        \n        // Decorative swirls around edge\n        for(i = [0:45:315]) {\n            rotate([0, 0, i])\n            translate([20, 0, 52])\n            frosting_swirl(0, 0, 0, 1);\n        }\n        \n        // Additional smaller swirls\n        for(i = [15:60:345]) {\n            rotate([0, 0, i])\n            translate([15, 0, 52])\n            frosting_swirl(0, 0, 0, 0.7);\n        }\n    }\n}\n\n// Main gateau assembly\nunion() {\n    // Bottom chocolate layer\n    cake_layer(30, 15, $chocolate);\n    \n    // Middle strawberry layer\n    translate([0, 0, 14.5])\n    cake_layer(28, 12, $strawberry);\n    \n    // Top vanilla layer\n    translate([0, 0, 26])\n    cake_layer(26, 10, $vanilla);\n    \n    // Frosting layer between bottom and middle\n    translate([0, 0, 14.2])\n    color($vanilla)\n    cylinder(r=29, h=0.6);\n    \n    // Frosting layer between middle and top\n    translate([0, 0, 25.7])\n    color($vanilla)\n    cylinder(r=27, h=0.6);\n    \n    // Side frosting coating\n    color($vanilla)\n    cylinder(r1=31, r2=27, h=28, center=false);\n    \n    // Top frosting decoration\n    top_frosting();\n    \n    // Chocolate shavings on top\n    for(i = [0:20:340]) {\n        rotate([0, 0, i])\n        translate([18, 0, 54])\n        chocolate_shaving(0, 0, 0, i*2);\n    }\n    \n    // Additional shavings at center\n    for(i = [10:30:370]) {\n        rotate([0, 0, i])\n        translate([8, 0, 54])\n        chocolate_shaving(0, 0, 0, -i*1.5);\n    }\n}",
    "renders": true
  },
  {
    "food_item": "buche",
    "openscad_code": "// Buche de Noël (Yule Log) - Realistic style with medium complexity\n\n// Main log body module\nmodule log_body() {\n    color(\"chocolate\") {\n        // Central cylinder for main log shape\n        rotate([90, 0, 0]) \n            cylinder(h=80, d=30, $fn=20);\n        \n        // Add irregular bulges for realistic log shape\n        for(i = [10:20:70]) {\n            translate([0, i-40, 0])\n                rotate([90, 0, 0])\n                cylinder(h=15, d1=35, d2=25, $fn=16);\n        }\n    }\n}\n\n// Bark texture module\nmodule bark_texture() {\n    color(\"saddlebrown\") {\n        // Create bark pattern with small cylinders\n        for(i = [0:5:360]) {\n            for(j = [10:10:80]) {\n                rotate([90, 0, i])\n                translate([15, j-40, 0])\n                    cylinder(h=2, d=3, $fn=6);\n            }\n        }\n    }\n}\n\n// Wood rings module for cut ends\nmodule wood_rings() {\n    color(\"saddlebrown\") {\n        // Main end caps\n        translate([-40, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h=2, d=30, $fn=20);\n        \n        translate([40, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h=2, d=30, $fn=20);\n        \n        // Growth rings\n        for(r = [5:3:12]) {\n            translate([-40, 0, 0])\n                rotate([0, 90, 0])\n                cylinder(h=1, d=r*2, $fn=20);\n            \n            translate([40, 0, 0])\n                rotate([0, 90, 0])\n                cylinder(h=1, d=r*2, $fn=20);\n        }\n    }\n}\n\n// Cream filling swirl\nmodule cream_swirl() {\n    color(\"wheat\") {\n        // Create spiral along the cut\n        for(angle = [0:10:360]) {\n            r = 10 + angle/20;\n            x = cos(angle) * r;\n            y = sin(angle) * r;\n            translate([x, y-40, 0])\n                sphere(d=5, $fn=8);\n        }\n    }\n}\n\n// Mushroom decorations\nmodule mushroom() {\n    color(\"white\") {\n        // Mushroom stem\n        translate([0, 30, 15])\n            cylinder(h=8, d=4, $fn=8);\n        \n        // Mushroom cap\n        color(\"crimson\") {\n            translate([0, 30, 19])\n                sphere(d=10, $fn=8);\n            \n            // White spots on mushroom\n            color(\"white\") {\n                for(i = [0:30:330]) {\n                    rotate([0, 0, i])\n                    translate([3, 30, 21])\n                        sphere(d=1.5, $fn=8);\n                }\n            }\n        }\n    }\n}\n\n// Powdered sugar effect\nmodule powdered_sugar() {\n    color(\"white\") {\n        // Random sugar crystals\n        for(i = [0:5:100]) {\n            x = rand(i);\n            y = rand(i+50);\n            z = rand(i+100);\n            translate([x*40-20, y*40-20, z*5+12])\n                sphere(d=0.5, $fn=4);\n        }\n    }\n}\n\n// Helper function for random values\nfunction rand(seed) = (seed*9301+49297)%233280/233280;\n\n// Holly leaf decoration\nmodule holly_leaf() {\n    color(\"darkgreen\") {\n        translate([20, 20, 15])\n            rotate([0, 0, 45])\n            linear_extrude(height=1)\n                polygon(points=[\n                    [0,0], [3,2], [5,1], [4,3], [6,4], \n                    [4,5], [5,7], [3,6], [0,8], [-3,6],\n                    [-5,7], [-4,5], [-6,4], [-4,3], [-5,1],\n                    [-3,2], [0,0]\n                ]);\n    }\n}\n\n// Holly berries\nmodule holly_berries() {\n    color(\"red\") {\n        translate([20, 20, 16.5])\n            sphere(d=2, $fn=8);\n        translate([22, 18, 16.5])\n            sphere(d=2, $fn=8);\n        translate([18, 18, 16.5])\n            sphere(d=2, $fn=8);\n    }\n}\n\n// Assembly of the complete buche\nunion() {\n    log_body();\n    bark_texture();\n    wood_rings();\n    cream_swirl();\n    mushroom();\n    holly_leaf();\n    holly_berries();\n    powdered_sugar();\n}",
    "renders": true
  },
  {
    "food_item": "millasson",
    "openscad_code": "// OpenSCAD code for a realistic millasson (traditional cornmeal cake)\n// Dimensions approximately 80mm diameter, 25mm height\n\n// Main colors\ncolor_beige = [0.95,0.88,0.70];\ncolor_dark_beige = [0.85,0.78,0.60];\ncolor_brown = [0.65,0.45,0.30];\n\n// Parameters\ndiameter = 80;\nheight = 25;\nedge_radius = 2;\nslice_lines = 8;\ncorn_lines = 12;\n\nmodule millasson_base() {\n    // Main cake body - slightly domed top\n    union() {\n        // Base cylinder with rounded edges\n        difference() {\n            cylinder(h=height, d=diameter, $fn=100);\n            translate([0,0,-0.5])\n                cylinder(h=height+1, d=diameter-4, $fn=100);\n        }\n        \n        // Domed top\n        translate([0,0,height-2])\n            scale([1,1,0.3])\n                sphere(d=diameter-4, $fn=100);\n    }\n}\n\n// Surface texture - cornmeal grains\nmodule cornmeal_texture() {\n    difference() {\n        millasson_base();\n        \n        // Random small holes for cornmeal texture\n        for(i = [0:corn_lines-1]) {\n            angle = i * 360/corn_lines;\n            for(j = [0:3]) {\n                radius = (diameter/2 - 5) * (0.2 + j*0.2);\n                x = cos(angle) * radius;\n                y = sin(angle) * radius;\n                \n                translate([x,y,height/2 + 2 + 3*sin(i+j)])\n                    sphere(d=1.2, $fn=8);\n            }\n        }\n    }\n}\n\n// Baking marks - slightly darker surface areas\nmodule baking_marks() {\n    intersection() {\n        millasson_base();\n        \n        for(i = [0:slice_lines-1]) {\n            angle = i * 360/slice_lines;\n            \n            // Radial darker areas\n            rotate([0,0,angle])\n                translate([diameter/4,0,0])\n                    scale([diameter/2,5,height])\n                        cube([1,1,1], center=true);\n        }\n    }\n}\n\n// Sliced wedge (optional - shows interior)\nmodule sliced_wedge() {\n    difference() {\n        union() {\n            color(color_beige) cornmeal_texture();\n            color(color_dark_beige) baking_marks();\n        }\n        \n        // Cut out a 40-degree wedge\n        rotate([0,0,-20])\n            translate([0,-diameter/2-5,0])\n                cube([diameter+10, diameter+10, height+10]);\n    }\n}\n\n// Assemble the complete millasson\nunion() {\n    // Main body with texture\n    color(color_beige) cornmeal_texture();\n    \n    // Baking marks\n    color(color_dark_beige) baking_marks();\n    \n    // Bottom edge detail\n    color(color_brown)\n        difference() {\n            cylinder(h=2, d=diameter, $fn=100);\n            cylinder(h=3, d=diameter-4, $fn=100);\n        }\n}",
    "renders": true
  },
  {
    "food_item": "bugnes",
    "openscad_code": "// Bugnes (French carnival fritters) - realistic style, medium complexity\n// Overall size: ~70 mm long, ~35 mm wide, ~8 mm thick\n\n// Basic parameters\nthickness = 2.5;\nlength = 70;\nwidth = 35;\nwave_height = 3;\n\n// Create the main twisted ribbon body with slight wave\nmodule twisted_ribbon() {\n    color(\"Goldenrod\")\n    difference() {\n        // Main twisted strip\n        union() {\n            for (i = [0:5:length-10]) {\n                translate([i, 0, 0])\n                rotate([0, 0, i*2])\n                scale([1, 0.9 + 0.1*sin(i*15), 1])\n                hull() {\n                    translate([0, -width/2, 0])\n                    cylinder(h=thickness, d=thickness*2.5, $fn=12);\n                    translate([0, width/2, 0])\n                    cylinder(h=thickness, d=thickness*2.5, $fn=12);\n                }\n            }\n        }\n        \n        // Center hole for classic bugnes shape\n        translate([length/2, 0, -1])\n        rotate([0, 0, 30])\n        scale([1, 0.7, 1])\n        cylinder(h=thickness+2, d=15, $fn=32);\n    }\n}\n\n// Sugar coating with random crystals\nmodule sugar_coating() {\n    color(\"AntiqueWhite\")\n    union() {\n        // Thin sugar layer on top\n        translate([0, 0, thickness/2 - 0.1])\n        scale([0.98, 0.98, 0.1])\n        linear_extrude(height=0.2)\n        projection()\n        twisted_ribbon();\n        \n        // Icing sugar crystals\n        for (i = [0:30]) {\n            translate([\n                rands(-width/2, width/2, 1)[0],\n                rands(-length/2, length/2, 1)[0],\n                thickness/2 + rands(0, 0.5, 1)[0]\n            ])\n            sphere(d=rands(0.3, 0.8, 1)[0], $fn=6);\n        }\n    }\n}\n\n// Surface texture - small bubbles from frying\nmodule frying_bubbles() {\n    color(\"DarkGoldenrod\")\n    difference() {\n        twisted_ribbon();\n        \n        // Small random bubble holes\n        for (i = [0:50]) {\n            translate([\n                rands(-width/2, width/2, 1)[0],\n                rands(-length/2, length/2, 1)[0],\n                rands(0, thickness, 1)[0]\n            ])\n            sphere(d=rands(0.5, 1.2, 1)[0], $fn=8);\n        }\n    }\n}\n\n// Edges slightly curled up from frying\nmodule curled_edges() {\n    color(\"Goldenrod\")\n    union() {\n        // Left edge curl\n        translate([-5, -width/2-1, -0.5])\n        rotate([0, -20, 0])\n        scale([0.3, 0.3, 0.8])\n        cylinder(h=length+10, d=2, $fn=16);\n        \n        // Right edge curl\n        translate([-5, width/2+1, -0.5])\n        rotate([0, 20, 180])\n        scale([0.3, 0.3, 0.8])\n        cylinder(h=length+10, d=2, $fn=16);\n    }\n}\n\n// Main assembly\nunion() {\n    // Base fried dough with texture\n    frying_bubbles();\n    \n    // Curled edges\n    curled_edges();\n    \n    // Sugar coating\n    sugar_coating();\n}",
    "renders": true
  },
  {
    "food_item": "oreillettes",
    "openscad_code": "// Oreillettes - Traditional French fried pastry\n// Realistic style, medium complexity\n\n// Colors\npastry_color = \"#E8C090\";\nfried_color = \"#B8860B\";\nsugar_color = \"#F5F5F5\";\n\n// Main parameters\nlength = 65;\nwidth = 45;\nthickness = 3;\nedge_thickness = 5;\n\n// Create the base oreillette shape\nmodule oreillette_base() {\n    // Main body with slightly irregular edges\n    difference() {\n        // Overall shape\n        translate([0, 0, thickness/2])\n        scale([1, 0.7, 1])\n        sphere(d=width, $fn=64);\n        \n        // Cut off bottom half\n        translate([0, 0, -thickness])\n        cube([width*2, width*2, thickness*2], center=true);\n        \n        // Create the characteristic slit\n        translate([0, 0, -thickness])\n        cube([width*0.8, 2, thickness*2], center=true);\n    }\n    \n    // Add thickness variation for realistic look\n    for(i = [-2:2]) {\n        translate([i*8, 0, 0])\n        scale([1, 1, 0.8])\n        sphere(d=width*0.3, $fn=32);\n    }\n}\n\n// Create bubbling texture from frying\nmodule frying_texture() {\n    random_seed = 42;\n    for(i = [0:20]) {\n        translate([\n            (rand(i*3)*width - width/2)*0.9,\n            (rand(i*7)*width - width/2)*0.7,\n            thickness + rand(i*11)*2\n        ])\n        sphere(d=1 + rand(i*13)*2, $fn=16);\n    }\n}\n\n// Add sugar coating\nmodule sugar_coating() {\n    // Powdered sugar layer\n    color(sugar_color, 0.9)\n    translate([0, 0, thickness + 0.5])\n    scale([1.02, 1.02, 0.1])\n    oreillette_base();\n    \n    // Random sugar crystals\n    for(i = [0:30]) {\n        color(sugar_color, 0.8)\n        translate([\n            (rand(i*17)*width - width/2)*0.95,\n            (rand(i*19)*width - width/2)*0.75,\n            thickness + 1 + rand(i*23)*0.5\n        ])\n        sphere(d=0.3 + rand(i*29)*0.3, $fn=6);\n    }\n}\n\n// Create curled edges effect\nmodule curled_edges() {\n    // Upper edge curl\n    translate([width/4, 0, thickness/2])\n    rotate([45, 0, 0])\n    scale([1, 0.3, 0.3])\n    cylinder(h=edge_thickness, d=width/2, $fn=32);\n    \n    // Lower edge curl\n    translate([-width/4, 0, thickness/2])\n    rotate([-30, 0, 0])\n    scale([1, 0.3, 0.3])\n    cylinder(h=edge_thickness, d=width/3, $fn=32);\n}\n\n// Helper function for random values\nfunction rand(seed) = rands(0, 1, 1, seed)[0];\n\n// Main assembly\ncolor(fried_color, 0.9) {\n    // Base pastry\n    oreillette_base();\n    \n    // Frying texture\n    color(pastry_color, 0.8)\n    frying_texture();\n    \n    // Curled edges for realism\n    curled_edges();\n    \n    // Sugar coating\n    sugar_coating();\n}",
    "renders": true
  },
  {
    "food_item": "croustade",
    "openscad_code": "// Croustade - a crispy pastry cup filled with savory ingredients\n// Overall dimensions: 60mm diameter, 35mm height\n\n// Color definitions\npastry_color = \"#E2B278\";\nfilling_color = \"#8B4513\";\ncheese_color = \"#F5DEB3\";\nherb_color = \"#228B22\";\n\nmodule croustade() {\n    // Main pastry shell\n    difference() {\n        // Outer shell\n        cylinder(h=25, r1=30, r2=25, $fn=64);\n        \n        // Hollow out the center\n        translate([0, 0, 2])\n            cylinder(h=23, r1=27, r2=22, $fn=64);\n        \n        // Create the scalloped top edge\n        for(i=[0:11]) {\n            rotate([0, 0, i*30])\n                translate([29, 0, 23])\n                    rotate([90, 0, 0])\n                        cylinder(h=3, r1=3, r2=0, $fn=8);\n        }\n    }\n    \n    // Add texture lines on the outside\n    for(h=[5:5:20]) {\n        rotate([0, 0, 15])\n            linear_extrude(height=1)\n                offset(r=-25)\n                    circle(r=30, $fn=64);\n    }\n}\n\nmodule filling() {\n    // Main filling - mushroom and spinach mixture\n    translate([0, 0, 2])\n        color(filling_color)\n            cylinder(h=18, r1=26, r2=21, $fn=64);\n    \n    // Add some texture to the filling\n    for(i=[0:20]) {\n        translate([\n            (cos(i*36) * random(15,20)),\n            (sin(i*36) * random(15,20)),\n            random(10, 15)\n        ])\n            color(filling_color)\n                sphere(r=random(1,3), $fn=12);\n    }\n}\n\nmodule cheese_topping() {\n    // Melted cheese layer\n    translate([0, 0, 20])\n        color(cheese_color)\n            cylinder(h=2, r1=25, r2=20, $fn=64);\n    \n    // Cheese bubbles\n    for(i=[0:15]) {\n        translate([\n            (cos(i*24) * random(10,22)),\n            (sin(i*24) * random(10,22)),\n            22\n        ])\n            color(cheese_color)\n                sphere(r=random(1,2.5), $fn=12);\n    }\n}\n\nmodule herb_garnish() {\n    // Fresh herbs on top\n    for(i=[0:8]) {\n        rotate([0, 0, i*45])\n            translate([random(5,15), 0, 24])\n                color(herb_color)\n                    scale([0.3, 0.3, 1])\n                        cylinder(h=random(3,5), r=random(0.5,1), $fn=6);\n    }\n}\n\n// Generate random values\nfunction random(min, max) = min + (max - min) * (12345 * 6789 + 42);\n\n// Assembly\ncolor(pastry_color) croustade();\nfilling();\ncheese_topping();\nherb_garnish();",
    "renders": true
  },
  {
    "food_item": "gariguette",
    "openscad_code": "// Gariguette Strawberry - Realistic medium complexity model\n// Characteristic long, conical shape with pronounced seeds and green leaves\n\n$fn = 24;  // Smooth curves for realistic appearance\n\n// Main strawberry body - conical shape\nmodule strawberry_body() {\n    color(\"crimson\") {\n        difference() {\n            // Main conical body\n            cylinder(h1 = 0, h2 = 1, r1 = 15, r2 = 8, h = 40);\n            \n            // Slight indentation at the top\n            translate([0, 0, 38])\n                cylinder(h = 3, r1 = 7, r2 = 6, h = 5);\n                \n            // Small cavity for stem attachment\n            translate([0, 0, 39])\n                sphere(r = 4);\n        }\n    }\n}\n\n// Seed placement - characteristic gariguette has seeds in shallow indentations\nmodule seeds() {\n    color(\"yellow\") {\n        // Seeds arranged in spiral pattern around the berry\n        for (i = [0:7]) {\n            rotate([0, 0, i * 45]) {\n                for (j = [0:4]) {\n                    height = 35 - j * 7;\n                    radius = 15 - j * 2;\n                    angle = j * 30 + i * 10;\n                    \n                    translate([\n                        cos(angle) * radius,\n                        sin(angle) * radius,\n                        height\n                    ]) {\n                        // Slightly flattened seed shape\n                        scale([1, 1.2, 0.5])\n                            sphere(r = 0.8);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Crown leaves (calyx) - gariguette has longer, more pointed leaves\nmodule leaves() {\n    color(\"forestgreen\") {\n        union() {\n            // Main stem\n            translate([0, 0, 40])\n                cylinder(h = 8, r1 = 1.5, r2 = 1, h = 10);\n            \n            // Individual leaves radiating from center\n            for (i = [0:6]) {\n                rotate([0, 0, i * 51.4]) {\n                    translate([0, 0, 40]) {\n                        rotate([90, 0, 0]) {\n                            scale([1, 2.5, 0.8]) {\n                                // Leaf shape with pointed tip\n                                difference() {\n                                    cylinder(h = 12, r1 = 2, r2 = 0.5, h = 12);\n                                    translate([0, 6, 0])\n                                        cube([4, 6, 2.5], center = true);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Small details - tiny hairs on surface (represented as small cylinders)\nmodule surface_texture() {\n    color(\"darkred\") {\n        difference() {\n            // Main body\n            strawberry_body();\n            \n            // Subtle surface texture for realism\n            for (i = [0:20]) {\n                angle = i * 18;\n                for (j = [0:3]) {\n                    height = 5 + j * 10;\n                    radius = 12 - j * 2.5;\n                    \n                    translate([\n                        cos(angle) * radius,\n                        sin(angle) * radius,\n                        height\n                    ]) {\n                        rotate([90, 0, angle])\n                            cylinder(h = 0.5, r = 0.3, h = 1);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Strawberry body with texture\n    surface_texture();\n    \n    // Seeds on surface\n    seeds();\n    \n    // Crown and leaves\n    leaves();\n}\n\n// Position for printing - flat base\ntranslate([0, 0, 0]) {\n    rotate([0, 180, 0]) {\n        // Ensure flat base for printing\n    }\n}",
    "renders": true
  },
  {
    "food_item": "quatrequarts",
    "openscad_code": "// Quatre-Quarts (French pound cake) - realistic style\n// Dimensions: ~60mm x 60mm x 30mm\n\n$fn = 32;\n\n// Main cake body with rounded corners\nmodule cake_body() {\n    color(\"wheat\") {\n        // Base rectangular shape with rounded edges\n        difference() {\n            // Main block\n            rounded_cube([60, 60, 25], 5);\n            \n            // Hollow out for wall thickness (3mm)\n            translate([3, 3, 3])\n                rounded_cube([54, 54, 22], 3);\n        }\n    }\n}\n\n// Helper for rounded cube\nmodule rounded_cube(size, radius) {\n    hull() {\n        for(x = [0, size.x-2*radius])\n            for(y = [0, size.y-2*radius])\n                for(z = [0, size.z-2*radius])\n                    translate([x+radius, y+radius, z+radius])\n                        sphere(r=radius);\n    }\n}\n\n// Top crust with golden top\nmodule golden_crust() {\n    color(\"goldenrod\") {\n        difference() {\n            // Main crust layer\n            translate([-30, -30, 25])\n                cube([60, 60, 3]);\n            \n            // Slightly smaller to create edge\n            translate([-28, -28, 26])\n                cube([56, 56, 2.5]);\n        }\n        \n        // Crust cracks pattern\n        for(i = [0:2]) {\n            translate([-25 + i*20, -25, 27.5])\n                rotate([0, 0, 45])\n                    cube([2, 40, 0.5]);\n            translate([-25, -25 + i*20, 27.5])\n                rotate([0, 0, -45])\n                    cube([40, 2, 0.5]);\n        }\n    }\n}\n\n// Side texture - vertical lines for pound cake texture\nmodule side_texture() {\n    color(\"burlywood\") {\n        for(i = [0:11]) {\n            translate([-30 + i*5, 0, 12.5])\n                cube([1, 60, 25]);\n        }\n    }\n}\n\n// Top surface texture - slightly rough\nmodule top_texture() {\n    color(\"navajowhite\") {\n        // Small bumps for cake texture\n        for(x = [-25:5:25])\n            for(y = [-25:5:25])\n                translate([x, y, 25.5])\n                    sphere(r=0.5);\n    }\n}\n\n// Assembly\ntranslate([0, 0, 0]) {\n    cake_body();\n    golden_crust();\n    side_texture();\n    top_texture();\n}",
    "renders": true
  },
  {
    "food_item": "caneler",
    "openscad_code": "// Canelé (Canelé de Bordeaux) - Traditional French pastry\n// Dimensions: 50mm height, 25mm base diameter, 40mm top diameter\n\n$fn = 36;  // Resolution for curved surfaces\n\n// Main module to create a single canelé\nmodule canele() {\n    // Main body - inverted truncated cone with fluted sides\n    difference() {\n        // Outer shell - fluted cylinder shape\n        union() {\n            for (i = [0:35]) {\n                rotate([0, 0, i * 10])\n                translate([0, 0, -25])\n                cylinder(h1 = 25, h2 = 25, r1 = 12.5, r2 = 20, $fn = 3);\n            }\n        }\n        \n        // Hollow out the center\n        translate([0, 0, -25])\n        cylinder(h1 = 30, h2 = 30, r1 = 10, r2 = 17.5, $fn = 36);\n        \n        // Remove bottom to create flat base\n        translate([0, 0, -26])\n        cube([50, 50, 2], center = true);\n    }\n    \n    // Top caramelized ridge\n    translate([0, 0, 25])\n    cylinder(h = 2, r1 = 21, r2 = 19, $fn = 36);\n    \n    // Bottom caramelization ring\n    translate([0, 0, -25])\n    cylinder(h = 1, r = 12.5, $fn = 36);\n    \n    // Add slight imperfections for realism\n    for (i = [0:7]) {\n        angle = i * 45 + 22.5;\n        radius = 19 + sin(i * 2) * 0.5;\n        translate([cos(angle) * radius, sin(angle) * radius, 24])\n        sphere(r = 0.3 + sin(i * 3) * 0.2);\n    }\n}\n\n// Apply realistic coloring - dark caramel exterior, vanilla custard interior\ncolor([0.4, 0.2, 0.1])  // Dark caramel color\ncanele();",
    "renders": true
  },
  {
    "food_item": "navette",
    "openscad_code": "// Navette (French boat-shaped pastry)\n// A traditional Marseille pastry with orange blossom flavor\n// Size: 80mm long, 30mm wide, 20mm high\n\n// Main parameters\nlength = 80;\nwidth = 30;\nheight = 20;\ncrust_thickness = 1.5;\n\n// Colors\ncrust_color = \"#D4A574\"; // Golden brown crust\ninside_color = \"#FFF8DC\"; // Creamy interior\nseed_color = \"#8B4513\"; // Brown sesame seeds\n\n// Create the boat shape\nmodule navette_body() {\n    // Main hull shape using spheres\n    difference() {\n        // Outer shell - two intersecting spheres to form boat shape\n        intersection() {\n            // First sphere - front half\n            translate([length/4, 0, 0])\n                scale([1.5, 0.8, 0.6])\n                sphere(d=width);\n            \n            // Second sphere - back half\n            translate([-length/4, 0, 0])\n                scale([1.5, 0.8, 0.6])\n                sphere(d=width);\n            \n            // Cut to make flat bottom\n            translate([0, 0, -height/2])\n                cube([length*2, width*2, height], center=true);\n        }\n        \n        // Hollow out the interior\n        translate([0, 0, crust_thickness])\n            scale([0.8, 0.7, 0.7])\n            intersection() {\n                translate([length/4, 0, 0])\n                    scale([1.5, 0.8, 0.6])\n                    sphere(d=width);\n                translate([-length/4, 0, 0])\n                    scale([1.5, 0.8, 0.6])\n                    sphere(d=width);\n                translate([0, 0, -height/2])\n                    cube([length*2, width*2, height], center=true);\n            }\n    }\n}\n\n// Add decorative ridges along the top edge\nmodule crust_edge() {\n    // Top rim\n    translate([0, 0, height - crust_thickness/2])\n        scale([0.95, 0.9, 0.3])\n        difference() {\n            intersection() {\n                translate([length/4, 0, 0])\n                    scale([1.5, 0.8, 0.6])\n                    sphere(d=width);\n                translate([-length/4, 0, 0])\n                    scale([1.5, 0.8, 0.6])\n                    sphere(d=width);\n                translate([0, 0, -height/2])\n                    cube([length*2, width*2, height], center=true);\n            }\n            translate([0, 0, -1])\n                scale([0.9, 0.85, 0.5])\n                intersection() {\n                    translate([length/4, 0, 0])\n                        scale([1.5, 0.8, 0.6])\n                        sphere(d=width);\n                    translate([-length/4, 0, 0])\n                        scale([1.5, 0.8, 0.6])\n                        sphere(d=width);\n                    translate([0, 0, -height/2])\n                        cube([length*2, width*2, height], center=true);\n                }\n        }\n}\n\n// Create sesame seeds\nmodule sesame_seeds() {\n    seed_size = 1.2;\n    spacing = 3;\n    \n    // Top surface seeds\n    for (x = [-length/2 + 5 : spacing : length/2 - 5]) {\n        for (y = [-width/2 + 3 : spacing : width/2 - 3]) {\n            // Calculate height on curved surface\n            z_pos = height * 0.8 * (1 - (abs(x) / (length/2)) * 0.3) - seed_size;\n            \n            // Only place seeds on top curved surface\n            if (abs(y) < width/3) {\n                translate([x, y, z_pos])\n                    rotate([0, 0, rand(x*y)*360])\n                    scale([1, 0.7, 0.4])\n                    sphere(d=seed_size);\n            }\n        }\n    }\n}\n\n// Add subtle texture to crust\nmodule crust_texture() {\n    detail_size = 0.3;\n    step = 2;\n    \n    // Small indentations for realistic texture\n    for (x = [-length/2 + 2 : step : length/2 - 2]) {\n        for (y = [-width/2 + 1 : step : width/2 - 1]) {\n            z_pos = height * 0.3 * (1 - abs(x)/(length/2)) + 2;\n            translate([x, y, z_pos])\n                sphere(d=detail_size);\n        }\n    }\n}\n\n// Main assembly\ncolor(crust_color) {\n    union() {\n        // Main body\n        navette_body();\n        \n        // Edge detail\n        crust_edge();\n        \n        // Texture on crust\n        difference() {\n            navette_body();\n            translate([0, 0, -0.1])\n                crust_texture();\n        }\n    }\n}\n\n// Sesame seeds on top\ncolor(seed_color) {\n    sesame_seeds();\n}\n\n// Interior filling visible from top\ncolor(inside_color) {\n    translate([0, 0, crust_thickness/2])\n        scale([0.7, 0.6, 0.3])\n        intersection() {\n            translate([length/4, 0, 0])\n                scale([1.5, 0.8, 0.6])\n                sphere(d=width);\n            translate([-length/4, 0, 0])\n                scale([1.5, 0.8, 0.6])\n                sphere(d=width);\n            translate([0, 0, -height/2])\n                cube([length*2, width*2, height], center=true);\n        }\n}",
    "renders": true
  },
  {
    "food_item": "palet",
    "openscad_code": "// Palet (French wafer cookie) - realistic style, medium complexity\n// Overall dimensions: 60mm diameter, 10mm thick\n\n// Color definitions\n$fa = 2;\n$fs = 0.5;\n\n// Main wafer layers\nmodule wafer_layer(diameter, thickness, texture_depth) {\n    difference() {\n        // Base wafer disc\n        cylinder(h=thickness, d=diameter, $fn=120);\n        \n        // Texture pattern - hexagonal cells\n        for (r = [5:8:diameter/2-5]) {\n            for (a = [0:30:359]) {\n                translate([r*cos(a), r*sin(a), thickness-0.2]) {\n                    rotate([0, 0, a]) {\n                        scale([1, 0.8, 1]) {\n                            cylinder(h=texture_depth+0.1, d=3.5, $fn=6);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Cream filling layer\nmodule cream_layer(diameter, thickness) {\n    // Slightly smaller than wafer\n    cylinder(h=thickness, d=diameter-1, $fn=120);\n}\n\n// Edge details with wavy pattern\nmodule edge_detail(diameter, thickness, teeth_count) {\n    for (i = [0:teeth_count-1]) {\n        rotate([0, 0, i*360/teeth_count]) {\n            translate([diameter/2-1.5, -1, -0.1]) {\n                cube([3, 2, thickness+0.2]);\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Bottom wafer\n    color([0.85, 0.65, 0.45]) {\n        wafer_layer(60, 4, 0.8);\n        edge_detail(60, 4, 36);\n    }\n    \n    // Cream filling\n    translate([0, 0, 4]) {\n        color([0.95, 0.85, 0.75]) {\n            cream_layer(58, 2);\n        }\n    }\n    \n    // Top wafer\n    translate([0, 0, 6]) {\n        color([0.85, 0.65, 0.45]) {\n            wafer_layer(60, 4, 0.8);\n            edge_detail(60, 4, 36);\n        }\n    }\n}\n\n// Subtle surface imperfections for realism\nmodule imperfections() {\n    for (i = [0:50]) {\n        translate([\n            30*(rand(i*2)-0.5),\n            30*(rand(i*3)-0.5),\n            10*rand(i*5)\n        ]) {\n            sphere(d=0.3+rand(i*7)*0.4);\n        }\n    }\n}\n\n// Add imperfections to top surface\ntranslate([0, 0, 9.9]) {\n    color([0.85, 0.65, 0.45]) {\n        imperfections();\n    }\n}\n\n// Function for pseudo-random numbers\nfunction rand(seed) = (seed*9301+49297)%233280/233280;",
    "renders": true
  },
  {
    "food_item": "cigare",
    "openscad_code": "// Realistic Cigare (Spring Roll) - Medium Complexity OpenSCAD Model\n// Size: ~80mm length, 3D printable with no overhangs\n\n// Parameters\nlength = 80;\ndiameter = 18;\nwall_thickness = 1.2;\nseam_offset = 0.3;\n\n// Main wrapper - rice paper layer\nmodule rice_paper() {\n    color(\"cornsilk\") \n    difference() {\n        // Main roll body\n        cylinder(h=length, d=diameter, $fn=50);\n        \n        // Hollow center\n        translate([0, 0, -1])\n            cylinder(h=length+2, d=diameter-wall_thickness*2, $fn=50);\n    }\n}\n\n// Wrapper edge where rice paper overlaps\nmodule wrapper_edge() {\n    color(\"antiquewhite\") \n    translate([diameter/2-0.5, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h=seam_offset*2, d=length, $fn=30);\n}\n\n// Filling texture - visible at ends\nmodule filling_texture() {\n    color(\"palegoldenrod\")\n    for(i = [-1, 1]) {\n        translate([0, 0, i*(length/2-3)])\n            difference() {\n                cylinder(h=6, d=diameter-wall_thickness*2-0.5, $fn=25);\n                // Small holes for texture\n                for(j = [1:5]) {\n                    rotate([0, 0, j*72])\n                        translate([3, 0, 3])\n                            sphere(d=1.5);\n                }\n            }\n    }\n}\n\n// Vegetables visible at ends\nmodule vegetable_pieces() {\n    // Orange carrot pieces\n    color(\"carrot\") \n    for(i = [1:4]) {\n        rotate([0, 0, i*90])\n            translate([2, 0, length/2-2])\n                cylinder(h=4, d=2, $fn=6);\n    }\n    \n    // Green herbs\n    color(\"darkgreen\")\n    for(i = [1:3]) {\n        rotate([0, 0, i*120])\n            translate([3.5, 0, -length/2+2])\n                rotate([90, 0, 0])\n                    cylinder(h=5, d=0.8, $fn=4);\n    }\n}\n\n// Surface wrinkles on rice paper\nmodule surface_wrinkles() {\n    color(\"cornsilk\") \n    union() {\n        for(z = [5:10:length-5]) {\n            rotate([0, 0, rand(z)*360])\n                translate([0, 0, z])\n                    difference() {\n                        cylinder(h=0.5, d=diameter+0.2, $fn=40);\n                        cylinder(h=0.5, d=diameter-0.2, $fn=40);\n                    }\n        }\n    }\n}\n\n// Helper function for random rotation\nfunction rand(x) = (x * 73.9829) % 1;\n\n// Assembly\nunion() {\n    rice_paper();\n    wrapper_edge();\n    filling_texture();\n    vegetable_pieces();\n    surface_wrinkles();\n}",
    "renders": true
  },
  {
    "food_item": "succes",
    "openscad_code": "// Realistic 3D-printable SUCCESS (a stylized, edible-looking strawberry shortcake slice)\n// Medium complexity ~110 lines\n\n$fn = 50;          // Smooth curves for 3D printing\nthk = 1.5;         // Wall thickness for printability\nscaleFactor = 1;   // Adjust overall size if needed\n\n// Main colors\ncolorCake = [0.95, 0.75, 0.55];\ncolorCream = [0.98, 0.95, 0.92];\ncolorStrawberry = [0.90, 0.15, 0.25];\ncolorSeed = [0.5, 0.4, 0.3];\n\n// Generate one slice of strawberry shortcake\nmodule success_slice() {\n    // Base sponge cake layer\n    difference() {\n        translate([0, 0, 0])\n            cube([50, 50, 15], center = true);\n        translate([0, 0, -1])\n            cube([46, 46, 17], center = true); // Hollow center slightly\n    }\n\n    // Cream layer with wave top\n    for (i = [0:4]) {\n        translate([0, -22.5 + i * 11.25, 15 + 2.5 * sin(i * 45)])\n            cube([49, 11.25, 5], center = true);\n    }\n\n    // Strawberry topping\n    translate([0, 0, 20]) {\n        // Main strawberry body\n        color(colorStrawberry)\n            scale([1, 0.8, 0.6])\n                sphere(20);\n\n        // Seeds on strawberry surface\n        color(colorSeed)\n        for (a = [0:30:360]) {\n            for (b = [0:30:180]) {\n                translate([\n                    20 * cos(a) * sin(b),\n                    16 * sin(a) * sin(b),\n                    12 * cos(b) + 20\n                ]) rotate([b, a, 0])\n                    scale([1, 1, 0.5])\n                        sphere(0.8);\n            }\n        }\n\n        // Strawberry leaves/calyx\n        color([0.2, 0.4, 0.1])\n        for (i = [0:5]) {\n            rotate([0, 0, i * 72])\n                translate([0, 0, 32])\n                rotate([45, 0, 0])\n                    scale([1, 0.3, 0.6])\n                        cylinder(h = 10, r1 = 5, r2 = 0);\n        }\n    }\n\n    // Side cream piping (decorative dots)\n    for (i = [0:11]) {\n        angle = i * 30;\n        translate([\n            25 * cos(angle),\n            25 * sin(angle),\n            15\n        ]) sphere(thk);\n    }\n}\n\n// Apply colors\ncolor(colorCake) {\n    success_slice();\n    // Add a slight cream wash over the cake\n    color(colorCream) {\n        translate([0, 0, 7.5])\n            scale([1, 1, 0.5])\n                cube([50, 50, 15], center = true);\n    }\n}",
    "renders": true
  },
  {
    "food_item": "opera",
    "openscad_code": "// Opera Cake - Realistic style with medium complexity\n// 80mm x 40mm x 25mm\n\n// Main colors\n$fn = 50;\n\n// Base cake layers\nmodule opera_cake() {\n    // Bottom sponge layer (joconde)\n    color(\"#F5DEB3\") \n    translate([0, 0, 0])\n        cube([80, 40, 4], center=true);\n    \n    // Coffee syrup soaked layer effect (slightly darker)\n    color(\"#D2B48C\")\n    translate([0, 0, 4.1])\n        cube([78, 38, 1], center=true);\n    \n    // Coffee buttercream layer\n    color(\"#8B4513\")\n    translate([0, 0, 5.5])\n        cube([78, 38, 3], center=true);\n    \n    // Second sponge layer\n    color(\"#F5DEB3\")\n    translate([0, 0, 9])\n        cube([78, 38, 3], center=true);\n    \n    // Chocolate ganache layer\n    color(\"#654321\")\n    translate([0, 0, 12.5])\n        cube([78, 38, 4], center=true);\n    \n    // Top sponge layer\n    color(\"#F5DEB3\")\n    translate([0, 0, 17])\n        cube([78, 38, 3], center=true);\n    \n    // Chocolate glaze top layer\n    color(\"#2F1B14\")\n    translate([0, 0, 20.5])\n        cube([80, 40, 2], center=true);\n}\n\n// Decorative chocolate pattern on top\nmodule chocolate_pattern() {\n    // Diagonal lines pattern\n    for (i = [-40:5:40]) {\n        color(\"#1A0F0A\")\n        translate([i, 0, 22])\n            rotate([0, 0, 45])\n            cube([2, 60, 0.5], center=true);\n    }\n    \n    // Small chocolate squares (opera pattern)\n    for (x = [-30:10:30]) {\n        for (y = [-15:10:15]) {\n            color(\"#1A0F0A\")\n            translate([x, y, 22.5])\n                cube([3, 3, 0.3], center=true);\n        }\n    }\n}\n\n// Gold leaf accents (simplified)\nmodule gold_accents() {\n    color(\"#FFD700\")\n    translate([30, 18, 22.8])\n        cube([5, 2, 0.1], center=true);\n    \n    color(\"#FFD700\")\n    translate([-30, 18, 22.8])\n        cube([5, 2, 0.1], center=true);\n}\n\n// Side texture details\nmodule side_details() {\n    // Subtle layer indication on sides\n    for (z = [2:4:20]) {\n        color(\"#8B7355\")\n        translate([0, 20.5, z])\n            cube([82, 1, 0.5], center=true);\n        \n        color(\"#8B7355\")\n        translate([0, -20.5, z])\n            cube([82, 1, 0.5], center=true);\n    }\n}\n\n// Assemble the complete opera cake\nunion() {\n    opera_cake();\n    chocolate_pattern();\n    gold_accents();\n    side_details();\n}",
    "renders": true
  },
  {
    "food_item": "mendiant",
    "openscad_code": "// Mendiant - a French chocolate disk topped with nuts and dried fruits\n// Overall dimensions: 70mm diameter, 8mm thick\n\n$fn = 50; // Smooth curves for better print quality\n\n// Main chocolate base\nmodule chocolate_base() {\n    color([0.3, 0.15, 0.05]) // Dark chocolate color\n    difference() {\n        // Main disk\n        cylinder(h = 6, d = 70);\n        \n        // Add slight dome on top with subtraction\n        translate([0, 0, 5.5])\n            cylinder(h = 2, d = 68);\n    }\n}\n\n// Chocolate surface texture with slight imperfections\nmodule chocolate_texture() {\n    color([0.35, 0.18, 0.08])\n    for(i = [0:20]) {\n        rotate([0, 0, i * 18])\n        translate([random(0, 30) * cos(i * 18), random(0, 30) * sin(i * 18), 5.9])\n            sphere(d = random(0.8, 1.5));\n    }\n}\n\n// Almond slice\nmodule almond_slice(pos = [0, 0, 0], angle = 0) {\n    color([0.95, 0.85, 0.7])\n    translate(pos)\n    rotate([0, 0, angle])\n    scale([1, 0.4, 0.2])\n    sphere(d = 8);\n}\n\n// Hazelnut half\nmodule hazelnut_half(pos = [0, 0, 0]) {\n    color([0.7, 0.5, 0.3])\n    translate(pos)\n    rotate([90, 0, 0])\n    difference() {\n        scale([1, 1, 0.5])\n        sphere(d = 10);\n        translate([0, 0, -5])\n        cube([20, 20, 10], center = true);\n    }\n}\n\n// Raisin\nmodule raisin(pos = [0, 0, 0]) {\n    color([0.6, 0.3, 0.2])\n    translate(pos)\n    scale([1.2, 1, 1])\n    sphere(d = 7);\n}\n\n// Candied orange peel strip\nmodule orange_peel(pos = [0, 0, 0], angle = 0) {\n    color([0.9, 0.5, 0.2])\n    translate(pos)\n    rotate([0, 0, angle])\n    linear_extrude(height = 1.5)\n    polygon(points = [\n        [0, 0], [12, 0], [11, 3], [1, 3]\n    ]);\n}\n\n// Pistachio\nmodule pistachio(pos = [0, 0, 0], angle = 0) {\n    color([0.7, 0.85, 0.6])\n    translate(pos)\n    rotate([0, 0, angle])\n    scale([1, 0.6, 0.4])\n    sphere(d = 6);\n}\n\n// Assembly\nunion() {\n    chocolate_base();\n    chocolate_texture();\n    \n    // Almond slices\n    almond_slice([20, 15, 6.5], 30);\n    almond_slice([-25, -10, 6.5], -45);\n    almond_slice([10, -22, 6.5], 90);\n    \n    // Hazelnuts\n    hazelnut_half([-15, 20, 6.5]);\n    hazelnut_half([25, -20, 6.5]);\n    \n    // Raisins\n    raisin([0, 25, 6.5]);\n    raisin([-22, -15, 6.5]);\n    \n    // Orange peel strips\n    orange_peel([15, -5, 6.5], 60);\n    orange_peel([-10, 12, 6.5], -30);\n    \n    // Pistachios\n    pistachio([22, 5, 6.5], 15);\n    pistachio([-8, -25, 6.5], -60);\n    pistachio([-20, 8, 6.5], 45);\n}",
    "renders": true
  },
  {
    "food_item": "oranais",
    "openscad_code": "// Oranais - A French pastry with puff pastry and apricot filling\n// Size: 70mm length, 40mm width, 20mm height\n\n// Pastry color\npastry_color = \"#F5DEB3\";\n// Apricot color\napricot_color = \"#FF8C00\";\n// Egg wash color\nwash_color = \"#CD853F\";\n\n// Main pastry base\nmodule pastry_base() {\n    color(pastry_color) {\n        // Bottom pastry layer\n        translate([0, 0, 2]) {\n            difference() {\n                cube([70, 40, 4], center = true);\n                // Round the edges slightly\n                for(x = [-30, 30]) {\n                    for(y = [-15, 15]) {\n                        translate([x, y, -2]) {\n                            cylinder(h = 8, r = 8, center = true);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Top pastry layer with slight puff\n        translate([0, 0, 6]) {\n            difference() {\n                cube([65, 35, 3], center = true);\n                // Round the edges\n                for(x = [-28, 28]) {\n                    for(y = [-13, 13]) {\n                        translate([x, y, -1.5]) {\n                            cylinder(h = 6, r = 6, center = true);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Apricot filling layer\nmodule apricot_filling() {\n    color(apricot_color) {\n        // Main filling between layers\n        translate([0, 0, 4.5]) {\n            cube([55, 25, 1], center = true);\n        }\n        \n        // Add some overflow visible at edges\n        for(i = [-1, 1]) {\n            translate([i * 25, 0, 4.5]) {\n                rotate([90, 0, 0]) {\n                    cylinder(h = 3, r1 = 5, r2 = 3, center = true);\n                }\n            }\n        }\n    }\n}\n\n// Decorative scoring on top\nmodule pastry_scoring() {\n    color(wash_color) {\n        // Diagonal scores on top\n        for(i = [-20:10:20]) {\n            translate([i, 0, 7.5]) {\n                rotate([0, 0, 45]) {\n                    cube([15, 1, 0.5], center = true);\n                }\n            }\n        }\n        \n        // Cross scores\n        for(i = [-15:10:15]) {\n            translate([0, i, 7.5]) {\n                rotate([0, 0, -45]) {\n                    cube([15, 1, 0.5], center = true);\n                }\n            }\n        }\n    }\n}\n\n// Egg wash effect\nmodule egg_wash() {\n    color(wash_color, 0.3) {\n        translate([0, 0, 7.5]) {\n            cube([65, 35, 0.5], center = true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    pastry_base();\n    apricot_filling();\n    pastry_scoring();\n    egg_wash();\n    \n    // Add some pastry texture with small spheres\n    for(i = [1:5]) {\n        for(j = [1:3]) {\n            translate([-35 + i * 14, -20 + j * 20, 8]) {\n                color(pastry_color) {\n                    sphere(r = 0.5);\n                }\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "food_item": "chausson",
    "openscad_code": "// Chausson aux pommes (apple turnover)\n// Realistic style, medium complexity\n// Overall size: ~85mm x 55mm x 25mm\n\n$fn = 32;\n\n// Main colors\nPASTRY_COLOR = \"#D4A76A\";\nGOLDEN_COLOR = \"#C49A6C\";\nAPPLE_COLOR = \"#F4E4BC\";\nSEED_COLOR = \"#8B4513\";\n\nmodule chausson() {\n    difference() {\n        // Main pastry body\n        union() {\n            // Base crescent shape\n            rotate([0, 90, 0]) {\n                linear_extrude(height = 55, twist = -15) {\n                    offset(2) offset(-2) {\n                        difference() {\n                            circle(d = 80);\n                            translate([-40, 0]) square([80, 40]);\n                        }\n                    }\n                }\n            }\n            \n            // Folded edge ridge\n            translate([0, 27.5, 0]) {\n                rotate([0, 90, 0]) {\n                    linear_extrude(height = 3) {\n                        offset(1) {\n                            difference() {\n                                circle(d = 78);\n                                translate([-39, 0]) square([78, 39]);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Apple filling cavity\n        translate([0, 0, 10]) {\n            rotate([0, 90, 0]) {\n                linear_extrude(height = 45, twist = -10) {\n                    offset(-3) {\n                        difference() {\n                            circle(d = 70);\n                            translate([-35, 0]) square([70, 35]);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Steam vents\n        for(i = [1:3]) {\n            rotate([0, 90, 20*i]) {\n                translate([0, 0, 25]) {\n                    cylinder(h = 15, d = 3);\n                }\n            }\n        }\n    }\n    \n    // Apple filling visible through vents\n    translate([0, 0, 10]) {\n        color(APPLE_COLOR) {\n            rotate([0, 90, 0]) {\n                linear_extrude(height = 5) {\n                    offset(-3) {\n                        difference() {\n                            circle(d = 70);\n                            translate([-35, 0]) square([70, 35]);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Pastry texture pattern\nmodule pastry_texture() {\n    color(PASTRY_COLOR) {\n        // Base pastry\n        chausson();\n        \n        // Surface scoring lines\n        for(i = [1:8]) {\n            rotate([0, 0, 22.5 * i]) {\n                translate([0, -40, 24]) {\n                    color(GOLDEN_COLOR) {\n                        cube([1, 80, 0.5]);\n                    }\n                }\n            }\n        }\n        \n        // Edge crimping\n        for(i = [0:35]) {\n            rotate([0, 90, 10 * i]) {\n                translate([38.5, 0, 25]) {\n                    color(GOLDEN_COLOR) {\n                        rotate([90, 0, 0]) {\n                            cylinder(h = 1.5, d = 2);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Egg wash golden spots\n        for(i = [1:20]) {\n            rotate([0, 90, 18 * i]) {\n                translate([random(30, 38), 0, 25]) {\n                    color(GOLDEN_COLOR) {\n                        sphere(d = random(1, 2.5));\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Assemble the chausson\npastry_texture();\n\n// Add some apple seeds visible through vents\ntranslate([10, 0, 11]) {\n    color(SEED_COLOR) {\n        rotate([90, 0, 0]) {\n            for(i = [1:3]) {\n                translate([random(-5, 5), random(-20, 20), 0]) {\n                    scale([1, 0.5, 0.3]) {\n                        sphere(d = 2);\n                    }\n                }\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "food_item": "religieuse",
    "openscad_code": "// Religieuse - Classic French choux pastry dessert\n// Two stacked choux buns filled with pastry cream and iced with chocolate ganache\n\n$fn = 36;  // Smooth curves for food realism\n\n// Main dimensions (mm)\nbottom_diameter = 40;\ntop_diameter = 25;\nbottom_height = 25;\ntop_height = 18;\nfilling_thickness = 3;\nicing_thickness = 2;\nwall_thickness = 2.2;\n\n// Colors\nchoux_color = \"#F5DEB3\";  // Golden pastry\nicing_color = \"#4A2C17\";  // Dark chocolate\nfilling_color = \"#FFF8DC\";  // Vanilla cream\n\n// Module for choux pastry texture (simple bumps)\nmodule choux_texture(height, diameter) {\n    difference() {\n        sphere(d = diameter);\n        for (i = [0:15]) {\n            rotate([0, 0, i * 24]) \n            translate([diameter/2 - 2, 0, height/2 - 2])\n            sphere(d = 2.5);\n        }\n    }\n}\n\n// Bottom choux bun\nmodule bottom_choux() {\n    color(choux_color) {\n        difference() {\n            // Main bun shape - slightly flattened sphere\n            scale([1, 1, 0.8])\n            choux_texture(bottom_height, bottom_diameter);\n            \n            // Hollow interior for filling\n            translate([0, 0, -wall_thickness])\n            scale([1, 1, 0.7])\n            sphere(d = bottom_diameter - 2*wall_thickness);\n            \n            // Bottom flat surface for printing\n            translate([0, 0, -bottom_height/2])\n            cube([bottom_diameter + 2, bottom_diameter + 2, bottom_height], center = true);\n        }\n        \n        // Slight ridge pattern\n        for (i = [1:3]) {\n            rotate([90, 0, 0])\n            translate([0, 0, -bottom_height/2 + i*4])\n            cylinder(h = 0.5, d = bottom_diameter - i*4, center = true);\n        }\n    }\n}\n\n// Top choux bun\nmodule top_choux() {\n    color(choux_color) {\n        difference() {\n            // Smaller sphere for top\n            scale([1, 1, 0.9])\n            choux_texture(top_height, top_diameter);\n            \n            // Hollow interior\n            translate([0, 0, -wall_thickness])\n            sphere(d = top_diameter - 2*wall_thickness);\n            \n            // Flat bottom for stacking\n            translate([0, 0, -top_height/2])\n            cube([top_diameter + 2, top_diameter + 2, top_height], center = true);\n        }\n        \n        // Ridge pattern\n        for (i = [1:2]) {\n            rotate([90, 0, 0])\n            translate([0, 0, -top_height/2 + i*3])\n            cylinder(h = 0.5, d = top_diameter - i*3, center = true);\n        }\n    }\n}\n\n// Filling layer between buns\nmodule filling() {\n    color(filling_color) {\n        translate([0, 0, bottom_height/2 - 1])\n        cylinder(h = filling_thickness, d = bottom_diameter - 4, $fn = 48);\n    }\n}\n\n// Chocolate icing drip effect\nmodule chocolate_icing() {\n    color(icing_color) {\n        // Main icing on top bun\n        translate([0, 0, bottom_height + top_height/2 + icing_thickness/2])\n        scale([1, 1, 0.6])\n        sphere(d = top_diameter + 2);\n        \n        // Drip details\n        for (i = [0:5]) {\n            angle = i * 60;\n            rotate([0, 0, angle])\n            translate([top_diameter/2 + 1, 0, bottom_height + top_height/2 - 2])\n            scale([0.3, 0.3, 1])\n            cylinder(h = 4 + (i%3)*2, d = 2, $fn = 8);\n        }\n        \n        // Bottom bun icing band\n        translate([0, 0, bottom_height/2 + 2])\n        cylinder(h = 3, d = bottom_diameter + 1, $fn = 48);\n    }\n}\n\n// Assembly\nunion() {\n    // Bottom bun\n    bottom_choux();\n    \n    // Filling layer\n    filling();\n    \n    // Top bun\n    translate([0, 0, bottom_height - 3])\n    top_choux();\n    \n    // Chocolate icing\n    chocolate_icing();\n}\n\n// Add small decorative swirl on top\ncolor(icing_color) {\n    translate([0, 0, bottom_height + top_height/2 + 3])\n    rotate([90, 0, 0])\n    linear_extrude(height = 1, twist = 360)\n    circle(d = 8);\n}",
    "renders": true
  },
  {
    "food_item": "puit",
    "openscad_code": "// Realistic 3D printable puit (Dutch syrup waffle / stroopwafel)\n// Medium complexity model with proper wall thickness\n\n// Main parameters\nwaffle_diameter = 70;\nwaffle_thickness = 8;\ncore_thickness = 3;\nwaffle_color = [0.8, 0.6, 0.4];\ncaramel_color = [0.6, 0.4, 0.2];\n\n// Create the complete puit\nmodule puit() {\n    // Bottom waffle layer\n    difference() {\n        waffle_layer();\n        \n        // Central hole for caramel core\n        translate([0, 0, waffle_thickness - core_thickness])\n            cylinder(h=waffle_thickness + 1, d=30, $fn=32);\n    }\n    \n    // Caramel core\n    translate([0, 0, waffle_thickness - core_thickness])\n        color(caramel_color)\n        cylinder(h=core_thickness, d=30, $fn=32);\n    \n    // Top waffle layer\n    translate([0, 0, waffle_thickness])\n        waffle_layer();\n}\n\n// Create a single waffle layer with honeycomb pattern\nmodule waffle_layer() {\n    color(waffle_color)\n    difference() {\n        // Main disk\n        cylinder(h=waffle_thickness, d=waffle_diameter, $fn=64);\n        \n        // Honeycomb pattern\n        honeycomb_pattern();\n    }\n}\n\n// Create honeycomb pattern on waffle\nmodule honeycomb_pattern() {\n    // Parameters for honeycomb\n    hex_radius = 3.5;\n    hex_height = waffle_thickness - 1;\n    rows = 5;\n    \n    // Generate hexagonal pattern\n    for (row = [0:rows]) {\n        for (col = [0:rows]) {\n            // Calculate positions for hexagonal grid\n            x_offset = (col * 2 * hex_radius * cos(30)) - (row % 2) * hex_radius * cos(30);\n            y_offset = (row * 1.5 * hex_radius);\n            \n            // Only create hexagons within the circle\n            if (norm([x_offset, y_offset]) < (waffle_diameter/2 - hex_radius)) {\n                translate([x_offset, y_offset, 0])\n                    cylinder(h=hex_height, r=hex_radius, $fn=6);\n                \n                // Mirror for other side\n                translate([-x_offset, y_offset, 0])\n                    cylinder(h=hex_height, r=hex_radius, $fn=6);\n                \n                // Mirror for bottom\n                translate([x_offset, -y_offset, 0])\n                    cylinder(h=hex_height, r=hex_radius, $fn=6);\n                \n                translate([-x_offset, -y_offset, 0])\n                    cylinder(h=hex_height, r=hex_radius, $fn=6);\n            }\n        }\n    }\n    \n    // Edge pattern squares\n    edge_squares();\n}\n\n// Create edge pattern squares\nmodule edge_squares() {\n    square_size = 4;\n    square_height = waffle_thickness - 1;\n    edge_radius = waffle_diameter/2 - square_size/2;\n    \n    for (angle = [0:30:330]) {\n        rotate([0, 0, angle])\n            translate([edge_radius, 0, 0])\n                cube([square_size, square_size, square_height], center=true);\n    }\n}\n\n// Generate the complete puit\npuit();",
    "renders": true
  },
  {
    "food_item": "saint",
    "openscad_code": "// Saint Bagel with Halo - 3D Printable Food Model\n// Dimensions: ~80mm tall x ~70mm diameter\n\n$fn = 32;\n\n// Main colors\ncolor_bagel = [0.82, 0.66, 0.33];\ncolor_seeds = [0.87, 0.72, 0.44];\ncolor_halo = [0.92, 0.85, 0.22];\n\n// Bagel body module\nmodule bagel_body() {\n    // Main torus shape\n    rotate_extrude()\n        translate([30, 0, 0])\n            circle(r = 10);\n    \n    // Top half\n    rotate_extrude()\n        translate([30, 0, 0])\n            circle(r = 10);\n    \n    // Bottom rounding\n    difference() {\n        rotate_extrude()\n            translate([30, 0, 0])\n                circle(r = 10);\n        translate([0, 0, -15])\n            cube([100, 100, 30], center = true);\n    }\n}\n\n// Sesame seeds pattern\nmodule sesame_seeds() {\n    for(i = [0:15]) {\n        rotate([0, 0, i * 22.5])\n            translate([30, 0, 8])\n                scale([1, 1, 0.5])\n                    sphere(r = 1.5);\n        \n        rotate([0, 0, i * 22.5 + 11.25])\n            translate([30, 0, -8])\n                scale([1, 1, 0.5])\n                    sphere(r = 1.5);\n    }\n}\n\n// Halo ring\nmodule halo() {\n    rotate([90, 0, 0])\n        translate([0, 0, 40])\n            difference() {\n                cylinder(h = 3, r1 = 42, r2 = 42);\n                cylinder(h = 4, r1 = 35, r2 = 35);\n            }\n}\n\n// Face features\nmodule saint_face() {\n    // Eyes\n    translate([0, 28, 8])\n        sphere(r = 2);\n    translate([0, -28, 8])\n        sphere(r = 2);\n    \n    // Gentle smile\n    translate([0, 0, 5])\n        rotate([0, 90, 0])\n            cylinder(h = 20, r1 = 3, r2 = 3);\n}\n\n// Main assembly\ncolor(color_bagel)\n    bagel_body();\n\ncolor(color_seeds)\n    sesame_seeds();\n\ncolor(color_halo)\n    halo();\n\n// Add subtle face\ncolor([0.2, 0.2, 0.2])\n    saint_face();",
    "renders": true
  },
  {
    "food_item": "trop",
    "openscad_code": "// Realistic 3D-printable pineapple (trop fruit)\n// Medium complexity (~100 lines)\n\n$fa = 2;\n$fs = 0.5;\n\n// Main pineapple body\nmodule pineapple_body() {\n    color([1,0.8,0.1])\n    union() {\n        // Central cylinder core\n        cylinder(h=70, r1=22, r2=20, center=true);\n        \n        // Hexagonal pattern of bumps\n        for (i = [0:5]) {\n            rotate([0, 0, i*60])\n            for (j = [-2:2]) {\n                translate([0, j*15, 0])\n                bump_ring(j*7);\n            }\n        }\n    }\n}\n\n// Single diagonal bump ring\nmodule bump_ring(z_offset) {\n    rotate([0, 15, 0])\n    translate([0, 0, z_offset])\n    for (k = [0:5]) {\n        rotate([0, 0, k*60+30]) \n        translate([18, 0, 0])\n        scale([1, 1.2, 0.7])\n        sphere(r=3.5);\n    }\n}\n\n// Pineapple crown leaves\nmodule crown() {\n    color([0,0.5,0])\n    union() {\n        // Central spike\n        cylinder(h=25, r1=3, r2=1, center=true);\n        \n        // Spiral of leaves\n        for (i = [0:20]) {\n            rotate([0, 0, i*137.5]) \n            translate([0, 0, 10+i*0.8])\n            leaf(i*10);\n        }\n    }\n}\n\n// Single leaf\nmodule leaf(angle) {\n    rotate([angle, 0, 0])\n    translate([0, 0, 0])\n    scale([0.7, 0.2, 1])\n    rotate([0, -15, 0])\n    cylinder(h=20, r1=2.5, r2=0.5);\n}\n\n// Base trimming\nmodule base() {\n    difference() {\n        cylinder(h=5, r=25, center=true);\n        cylinder(h=6, r=18, center=true);\n    }\n}\n\n// Final assembly\ntranslate([0, 0, 35])\npineapple_body();\n\ntranslate([0, 0, 75])\ncrown();\n\ntranslate([0, 0, -2.5])\ncolor([0.8,0.5,0])\nbase();",
    "renders": true
  },
  {
    "food_item": "baba",
    "openscad_code": "// Realistic Baba (Rum Baba Cake) - Medium Complexity\n// Overall dimensions: ~60mm diameter, ~45mm height\n\n// Sweet dough base color\ncolor([0.82, 0.64, 0.45]) {\n    // Main cake body - slightly tapered cylinder\n    difference() {\n        cylinder(h = 35, r1 = 28, r2 = 24, $fn = 64);\n        \n        // Central hollow for syrup reservoir\n        translate([0, 0, -1])\n            cylinder(h = 37, r = 10, $fn = 32);\n        \n        // Top surface texture - small divots for syrup\n        for (i = [0:30]) {\n            angle = i * 137.5;\n            radius = sqrt(i) * 5;\n            translate([\n                cos(angle) * min(radius, 20),\n                sin(angle) * min(radius, 20),\n                34.9\n            ])\n            sphere(0.5 + 0.3 * sin(i), $fn = 8);\n        }\n        \n        // Grooves along side for realistic texture\n        for (i = [0:47]) {\n            rotate([0, 0, i * 7.5])\n                translate([27.5, 0, 0])\n                cube([1, 0.5, 35], center = true);\n        }\n    }\n}\n\n// Rum syrup glaze layer - darker translucent\ncolor([0.55, 0.35, 0.20, 0.9]) {\n    // Thin glaze coating\n    difference() {\n        // Main glaze layer\n        translate([0, 0, 34])\n            cylinder(h = 2, r = 30, $fn = 64);\n        \n        // Central hole aligned with cake\n        translate([0, 0, 33])\n            cylinder(h = 4, r = 9.5, $fn = 32);\n    }\n    \n    // Syrup drips down sides\n    for (i = [0:11]) {\n        rotate([0, 0, i * 30])\n            translate([28, 0, 35 - i])\n            scale([1, 0.3, 1])\n            sphere(1.2, $fn = 8);\n    }\n}\n\n// Whipped cream topping - white\ncolor([0.98, 0.97, 0.95]) {\n    module cream_rosette(x, y, z) {\n        translate([x, y, z]) {\n            // Base swirl\n            for (i = [0:3]) {\n                rotate([0, 0, i * 90])\n                    translate([0, 0, i * 0.5])\n                    scale([1 - i * 0.15, 1 - i * 0.15, 1])\n                    cylinder(h = 1.5, r = 4.5 - i * 0.8, $fn = 32);\n            }\n            \n            // Central peak\n            translate([0, 0, 3])\n                sphere(1.5, $fn = 16);\n        }\n    }\n    \n    // Three cream rosettes on top\n    cream_rosette(0, 0, 36);\n    cream_rosette(-8, -8, 36);\n    cream_rosette(8, -8, 36);\n}\n\n// Candied cherry decorations - bright red\ncolor([0.89, 0.26, 0.30]) {\n    // Cherries on cream rosettes\n    translate([0, 0, 40])\n        sphere(2.5, $fn = 16);\n    translate([-8, -8, 40])\n        sphere(2.5, $fn = 16);\n    translate([8, -8, 40])\n        sphere(2.5, $fn = 16);\n    \n    // Cherry stems - dark green\n    color([0.18, 0.35, 0.14]) {\n        translate([0, 0, 42.5])\n            rotate([90, 0, 0])\n            cylinder(h = 4, r = 0.4, $fn = 8);\n        translate([-8, -8, 42.5])\n            rotate([90, 0, 30])\n            cylinder(h = 4, r = 0.4, $fn = 8);\n        translate([8, -8, 42.5])\n            rotate([90, 0, -30])\n            cylinder(h = 4, r = 0.4, $fn = 8);\n    }\n}\n\n// Sugared surface crystals - subtle sparkles\ncolor([1, 1, 1, 0.6]) {\n    for (i = [0:50]) {\n        angle = i * 73;\n        radius = 25 * sqrt(random());\n        height = 35 + random() * 3;\n        \n        translate([\n            cos(angle) * radius,\n            sin(angle) * radius,\n            height\n        ])\n        sphere(0.1 + random() * 0.2, $fn = 4);\n    }\n}",
    "renders": true
  },
  {
    "food_item": "savarin",
    "openscad_code": "// Savarin - a ring-shaped yeasted cake soaked in rum syrup\n// Realistic style, medium complexity\n// Dimensions: 80mm diameter, 30mm height\n\n// Colors\n$batter_color = \"#F5DEB3\";\n$crust_color = \"#D2B48C\";\n$rum_color = \"#FFD700\";\n$cherry_color = \"#DC143C\";\n\n// Main savarin ring module\nmodule savarin_ring() {\n    difference() {\n        // Outer ring base\n        cylinder(h = 30, d = 80, $fn = 64);\n        \n        // Inner hole\n        translate([0, 0, -1])\n            cylinder(h = 32, d = 40, $fn = 64);\n    }\n}\n\n// Create texture on top surface\nmodule top_texture() {\n    for (i = [0:5:359]) {\n        rotate([0, 0, i])\n            translate([30, 0, 29.5])\n                scale([1, 0.2, 0.1])\n                    cylinder(h = 1, d = 8, $fn = 16);\n    }\n}\n\n// Air bubbles inside the cake\nmodule bubbles() {\n    for (i = [0:15]) {\n        translate([\n            (rand(i) - 0.5) * 60,\n            (rand(i + 1) - 0.5) * 60,\n            10 + (rand(i + 2) * 15)\n        ]) {\n            sphere(d = 2 + rand(i + 3) * 4);\n        }\n    }\n}\n\n// Rum syrup pool in center\nmodule rum_pool() {\n    color($rum_color, 0.7)\n    translate([0, 0, 30])\n        cylinder(h = 2, d = 38, $fn = 64);\n}\n\n// Cherry decoration\nmodule cherry() {\n    color($cherry_color)\n    union() {\n        translate([0, 0, 32])\n            sphere(d = 8);\n        \n        // Cherry stem\n        color(\"#228B22\")\n        translate([0, 0, 36])\n            rotate([90, 0, 0])\n                cylinder(h = 8, d = 1, $fn = 8);\n    }\n}\n\n// Glaze drips on sides\nmodule glaze_drips() {\n    for (i = [0:30:359]) {\n        rotate([0, 0, i])\n            translate([39, 0, 30])\n                scale([0.3, 0.3, 1])\n                    rotate([90, 0, 0])\n                        cylinder(h = 3 + rand(i) * 5, d1 = 2, d2 = 0.5, $fn = 8);\n    }\n}\n\n// Build the complete savarin\nunion() {\n    // Main ring with crust color\n    color($crust_color)\n    savarin_ring();\n    \n    // Inner batter color\n    color($batter_color)\n    difference() {\n        cylinder(h = 28, d = 78, $fn = 64);\n        translate([0, 0, -1])\n            cylinder(h = 30, d = 42, $fn = 64);\n    }\n    \n    // Add bubbles for texture\n    color($batter_color)\n    bubbles();\n    \n    // Top texture\n    color($crust_color)\n    top_texture();\n    \n    // Rum syrup\n    rum_pool();\n    \n    // Cherries\n    translate([0, 15, 0])\n        cherry();\n    translate([0, -15, 0])\n        cherry();\n    \n    // Glaze drips\n    color($rum_color, 0.7)\n    glaze_drips();\n}",
    "renders": true
  },
  {
    "food_item": "mont",
    "openscad_code": "// Realistic Mont (Burmese Sticky Rice Cake)\n// Approx 70mm diameter, 35mm height\n\n$fn = 50;\n\n// Main colors\ncolor_rice = [0.95,0.92,0.88];\ncolor_topping = [0.9,0.7,0.4];\ncolor_seeds = [0.6,0.4,0.2];\n\nmodule mont() {\n    // Base sticky rice layer\n    difference() {\n        cylinder(h=15, d=70, center=true);\n        translate([0,0,7.5])\n            cylinder(h=16, d=68, center=true);\n    }\n    \n    // Second layer with slight indent\n    translate([0,0,15])\n    difference() {\n        cylinder(h=12, d=68, center=true);\n        translate([0,0,6])\n            cylinder(h=13, d=66, center=true);\n    }\n    \n    // Topping layer with texture\n    translate([0,0,27])\n    difference() {\n        cylinder(h=8, d=68, center=true);\n        translate([0,0,4])\n            cylinder(h=9, d=66, center=true);\n    }\n    \n    // Seed decoration on top\n    for(i=[0:35]) {\n        rotate([0,0,i*10]) \n        translate([cos(i*10)*25, sin(i*10)*25, 31])\n        scale([0.8,0.8,0.8])\n        sphere(d=2.5);\n    }\n    \n    // Additional seeds in center\n    for(i=[0:7]) {\n        rotate([0,0,i*45])\n        translate([cos(i*45)*10, sin(i*45)*10, 31])\n        sphere(d=2);\n    }\n    \n    // Side texture - rice grains\n    for(h=[-10:5:15]) {\n        for(a=[0:20:360]) {\n            rotate([0,0,a])\n            translate([34,0,h])\n            rotate([90,0,0])\n            scale([0.4,0.4,1])\n            cylinder(h=2, d=1.5);\n        }\n    }\n}\n\n// Render the mont\ncolor(color_rice)\nmont();\n\ncolor(color_topping)\ntranslate([0,0,27])\ncylinder(h=8, d=68, center=true);\n\ncolor(color_seeds)\nfor(i=[0:35]) {\n    rotate([0,0,i*10]) \n    translate([cos(i*10)*25, sin(i*10)*25, 31])\n    scale([0.8,0.8,0.8])\n    sphere(d=2.5);\n}\n\nfor(i=[0:7]) {\n    rotate([0,0,i*45])\n    translate([cos(i*45)*10, sin(i*45)*10, 31])\n    sphere(d=2);\n}",
    "renders": true
  },
  {
    "food_item": "blanc",
    "openscad_code": "// Blanc - realistic style medium complexity OpenSCAD model\n// A classic French dessert consisting of poached meringue floating in vanilla custard\n\n// Main dimensions\nblanc_diameter = 45;\nblanc_height = 25;\ncustard_height = 15;\ncustard_diameter = 80;\ntotal_height = blanc_height + custard_height;\n\n// Colors\nblanc_color = [0.98, 0.97, 0.94];\ncustard_color = [0.99, 0.92, 0.78];\nvanilla_color = [0.95, 0.90, 0.70];\n\n// Blanc meringue module\nmodule blanc_meringue() {\n    color(blanc_color) {\n        // Main meringue body - slightly flattened sphere\n        scale([1, 1, 0.7]) \n        sphere(d = blanc_diameter, $fn = 64);\n        \n        // Add meringue peaks for realistic texture\n        for(i = [0:11]) {\n            rotate([0, 0, i * 30]) {\n                translate([blanc_diameter/3.5, 0, blanc_height/2.5]) {\n                    scale([0.3, 0.3, 1.5]) \n                    sphere(d = 8, $fn = 16);\n                }\n            }\n        }\n        \n        // Subtle indentations for poached texture\n        difference() {\n            sphere(d = blanc_diameter, $fn = 64);\n            for(i = [0:5]) {\n                rotate([0, 0, i * 60]) {\n                    translate([blanc_diameter/2.8, 0, blanc_height/3]) {\n                        sphere(d = 6, $fn = 8);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Custard pool module\nmodule custard() {\n    color(custard_color) {\n        // Main custard pool\n        difference() {\n            cylinder(h = custard_height, d = custard_diameter, $fn = 128);\n            translate([0, 0, 1]) {\n                cylinder(h = custard_height + 2, d = custard_diameter - 4, $fn = 128);\n            }\n        }\n        \n        // Vanilla bean specks\n        color(vanilla_color) {\n            for(i = [0:25]) {\n                rotate([0, 0, i * 137.5]) {\n                    translate([custard_diameter/2 * (0.2 + 0.6 * (i/25)), 0, custard_height/2]) {\n                        scale([0.5, 0.1, 0.1]) \n                        cylinder(h = 2 + (i % 3), d1 = 1, d2 = 0.5);\n                    }\n                }\n            }\n        }\n        \n        // Smooth custard surface\n        translate([0, 0, custard_height - 1]) {\n            cylinder(h = 2, d = custard_diameter - 2, $fn = 128);\n        }\n    }\n}\n\n// Assembly\ntranslate([0, 0, custard_height]) {\n    blanc_meringue();\n}\n\ntranslate([0, 0, 0]) {\n    custard();\n}",
    "renders": true
  },
  {
    "food_item": "ile",
    "openscad_code": "// Realistic kiwi fruit slice - medium complexity\n// Kiwi slice with textured skin, flesh, seeds and core detail\n\n// Overall dimensions\nkiwi_diameter = 60;\nkiwi_thickness = 10;\nwall_thickness = 1.5;\n\n// Colors\nskin_color = \"#5D4037\";\nflesh_color = \"#8BC34A\";\nseed_color = \"#212121\";\ncore_color = \"#F5F5DC\";\n\n// Module for individual seeds\nmodule seed() {\n    color(seed_color)\n    translate([0, 0, -0.2])\n    scale([1, 1, 0.3])\n    sphere(0.8, $fn=8);\n}\n\n// Module for seed ring pattern\nmodule seed_ring(radius, count) {\n    for(i = [0:count-1]) {\n        angle = i * 360 / count;\n        translate([radius * cos(angle), radius * sin(angle), kiwi_thickness/2 - 0.5])\n        seed();\n    }\n}\n\n// Module for fuzzy texture on skin\nmodule skin_texture() {\n    difference() {\n        // Main skin cylinder\n        color(skin_color)\n        cylinder(h=kiwi_thickness, r=kiwi_diameter/2, $fn=64);\n        \n        // Cut to half-cylinder\n        translate([-kiwi_diameter/2, -kiwi_diameter/2, -0.1])\n        cube([kiwi_diameter, kiwi_diameter/2, kiwi_thickness+0.2]);\n    }\n    \n    // Add small bumps for texture\n    for(i = [0:20]) {\n        angle = i * 18;\n        bump_radius = kiwi_diameter/2 - 0.5;\n        translate([bump_radius * cos(angle), bump_radius * sin(angle), kiwi_thickness/2])\n        scale([1, 1, 0.2])\n        sphere(0.5, $fn=6);\n    }\n}\n\n// Module for flesh with core\nmodule flesh() {\n    difference() {\n        // Main flesh\n        color(flesh_color)\n        translate([0, 0, wall_thickness])\n        cylinder(h=kiwi_thickness - 2*wall_thickness, r=kiwi_diameter/2 - wall_thickness, $fn=64);\n        \n        // Cut to half-cylinder\n        translate([-kiwi_diameter/2, -kiwi_diameter/2, wall_thickness-0.1])\n        cube([kiwi_diameter, kiwi_diameter/2, kiwi_thickness]);\n        \n        // Core cavity\n        color(core_color)\n        translate([0, 0, wall_thickness - 0.1])\n        cylinder(h=kiwi_thickness - 2*wall_thickness + 0.2, r=kiwi_diameter/8, $fn=32);\n    }\n    \n    // Add actual core\n    color(core_color)\n    translate([0, 0, wall_thickness])\n    cylinder(h=kiwi_thickness - 2*wall_thickness, r=kiwi_diameter/10, $fn=32);\n}\n\n// Module for growth rings in flesh\nmodule growth_rings() {\n    for(r = [kiwi_diameter/6:kiwi_diameter/24:kiwi_diameter/2 - wall_thickness - 2]) {\n        color(flesh_color)\n        translate([0, 0, kiwi_thickness/2])\n        linear_extrude(height=0.5)\n        offset(delta=-0.5)\n        circle(r=r, $fn=64);\n    }\n}\n\n// Main assembly\nunion() {\n    // Bottom skin\n    skin_texture();\n    \n    // Flesh layer\n    flesh();\n    \n    // Growth rings\n    growth_rings();\n    \n    // Seed patterns\n    seed_ring(kiwi_diameter/3, 12);\n    seed_ring(kiwi_diameter/2.5, 16);\n    seed_ring(kiwi_diameter/2.2, 20);\n}",
    "renders": true
  },
  {
    "food_item": "flottante",
    "openscad_code": "// Île flottante - a classic French dessert\n// Floating island of meringue on crème anglaise with caramel threads\n\n// Main dimensions\nisland_diameter = 45;\nisland_height = 35;\ncustard_bowl_diameter = 80;\ncustard_bowl_height = 12;\ncaramel_length = 25;\n\n// Colors\nmeringue_color = [1, 0.98, 0.94];\ncustard_color = [1, 0.96, 0.82];\ncaramel_color = [0.72, 0.45, 0.2];\n\n// Create the complete dessert\nmodule flottante() {\n    // Crème anglaise base\n    color(custard_color) translate([0, 0, 0]) custard_base();\n    \n    // Meringue island\n    color(meringue_color) translate([0, 0, custard_bowl_height - 5]) meringue_island();\n    \n    // Caramel threads\n    color(caramel_color) caramel_decoration();\n}\n\n// Crème anglaise base - shallow bowl shape\nmodule custard_base() {\n    difference() {\n        // Outer bowl\n        cylinder(h = custard_bowl_height, d = custard_bowl_diameter, $fn = 64);\n        \n        // Inner hollow for liquid\n        translate([0, 0, 2]) \n            cylinder(h = custard_bowl_height, d = custard_bowl_diameter - 6, $fn = 64);\n    }\n    \n    // Slight curve at bottom for realistic bowl shape\n    translate([0, 0, -1])\n        sphere(d = custard_bowl_diameter, $fn = 64);\n}\n\n// Meringue island with fluffy texture\nmodule meringue_island() {\n    union() {\n        // Base meringue shape - slightly flattened sphere\n        scale([1, 1, 0.8])\n            sphere(d = island_diameter, $fn = 48);\n        \n        // Add fluffy peaks on top\n        for(i = [0:15]) {\n            rotate([0, 0, i * 24])\n                translate([island_diameter/3, 0, island_height/2 - 5])\n                    scale([0.5 + sin(i*5)*0.2, 0.5 + cos(i*3)*0.2, 1 + sin(i*7)*0.3])\n                        sphere(d = 8 + sin(i*2)*3, $fn = 16);\n        }\n        \n        // Add smaller texture bumps\n        for(i = [0:20]) {\n            angle = i * 18;\n            radius = island_diameter/2 * (0.7 + sin(i*3)*0.2);\n            translate([cos(angle)*radius, sin(angle)*radius, island_height/2 - 8 + sin(i*5)*3])\n                sphere(d = 2 + sin(i*4)*1, $fn = 8);\n        }\n    }\n}\n\n// Caramel decoration threads\nmodule caramel_decoration() {\n    // Create crossing caramel threads\n    for(i = [0:5]) {\n        angle = i * 30;\n        height = custard_bowl_height + 15 + sin(i*2)*5;\n        \n        // Main thread\n        translate([cos(angle)*island_diameter/2, sin(angle)*island_diameter/2, height])\n            rotate([90 - sin(angle)*10, 0, angle])\n                cylinder(h = caramel_length, d1 = 1.2, d2 = 0.4, $fn = 8);\n        \n        // Crossing thread\n        translate([cos(angle+15)*island_diameter/3, sin(angle+15)*island_diameter/3, height + 3])\n            rotate([85 + cos(angle)*8, 0, angle + 45])\n                cylinder(h = caramel_length*0.8, d1 = 1, d2 = 0.3, $fn = 8);\n    }\n    \n    // Caramel droplets\n    for(i = [0:8]) {\n        angle = i * 45;\n        radius = island_diameter/2 * 0.8;\n        translate([cos(angle)*radius, sin(angle)*radius, custard_bowl_height + 20])\n            sphere(d = 1.5 + sin(i*3)*0.5, $fn = 8);\n    }\n}\n\n// Render the complete dessert\nflottante();",
    "renders": true
  },
  {
    "food_item": "diplomate",
    "openscad_code": "// Diplomate cake - a classic French dessert with ladyfingers and cream layers\n// Overall dimensions: 80mm diameter, 60mm height\n\n$fn = 32;  // Smooth curves for realistic appearance\n\n// Main colors\nladyfinger_color = [0.92, 0.85, 0.75];\ncream_color = [0.98, 0.95, 0.90];\nfruit_color = [0.85, 0.25, 0.35];\n\n// Ladyfinger module - creates individual biscuit\nmodule ladyfinger(width = 35, height = 12, depth = 8) {\n    difference() {\n        union() {\n            // Main body - slightly curved top\n            hull() {\n                translate([0, -depth/2, 0]) cube([width, 0.5, height], center=true);\n                translate([0, depth/2, 0]) cube([width, 0.5, height], center=true);\n            }\n            // Rounded top\n            translate([0, 0, height/2 - 1]) scale([1, 0.8, 0.3]) sphere(d=width);\n        }\n        // Sugar texture pattern - small indentations\n        for(x = [-15:5:15]) {\n            for(y = [-2:2:2]) {\n                translate([x, y, height-1]) sphere(d=1.5, $fn=8);\n            }\n        }\n    }\n}\n\n// Cream layer with slight dome\nmodule cream_layer(radius = 40, height = 15) {\n    color(cream_color) {\n        difference() {\n            union() {\n                cylinder(h=height, r=radius);\n                translate([0, 0, height]) scale([1, 1, 0.3]) sphere(d=radius*2);\n            }\n            // Slight indentation for realistic cream texture\n            for(i = [1:8]) {\n                rotate([0, 0, i*45]) {\n                    translate([radius*0.7, 0, height-2]) \n                        scale([1, 0.3, 0.5]) sphere(d=8);\n                }\n            }\n        }\n    }\n}\n\n// Raspberry decoration\nmodule raspberry() {\n    color(fruit_color) {\n        union() {\n            // Main berry body\n            sphere(d=6);\n            // Individual drupelets\n            for(i = [0:15]) {\n                rotate([0, 0, i*24]) {\n                    translate([2.5, 0, 0]) sphere(d=2.5);\n                }\n            }\n            // Green leaf\n            color([0.3, 0.6, 0.3]) {\n                rotate([90, 0, 0]) \n                    cylinder(h=1, r1=2, r2=0);\n            }\n        }\n    }\n}\n\n// Main cake assembly\nmodule diplomate() {\n    // Base layer of ladyfingers arranged in circle\n    for(i = [0:11]) {\n        rotate([0, 0, i*30]) {\n            translate([30, 0, 6]) {\n                rotate([0, 90, 0]) ladyfinger();\n            }\n        }\n    }\n    \n    // First cream layer\n    translate([0, 0, 12]) cream_layer(35, 12);\n    \n    // Second layer of ladyfingers (slightly smaller)\n    for(i = [0:11]) {\n        rotate([0, 0, i*30 + 15]) {\n            translate([25, 0, 24]) {\n                rotate([0, 90, 0]) scale([0.9, 1, 1]) ladyfinger();\n            }\n        }\n    }\n    \n    // Second cream layer\n    translate([0, 0, 30]) cream_layer(30, 10);\n    \n    // Top dome of cream\n    translate([0, 0, 40]) \n        scale([1, 1, 0.8]) \n        cream_layer(25, 15);\n    \n    // Raspberry decorations on top\n    for(i = [1:5]) {\n        rotate([0, 0, i*72]) {\n            translate([15, 0, 55]) raspberry();\n        }\n    }\n    \n    // Center raspberry\n    translate([0, 0, 58]) scale([1.2, 1.2, 1.2]) raspberry();\n}\n\n// Render the diplomate\ndiplomate();",
    "renders": true
  },
  {
    "food_item": "riz",
    "openscad_code": "// Realistic Riz (Rice) Food Model\n// Medium complexity OpenSCAD code\n\n// Main parameters\nrice_length = 60;\nrice_width = 45;\nrice_height = 25;\ngrain_count = 120;\nwall_thickness = 1.2;\n\n// Rice grain module\nmodule rice_grain(x, y, z, angle, scale_factor) {\n    color(\"ivory\")\n    translate([x, y, z])\n    rotate([0, angle, rand() * 360])\n    scale([scale_factor, scale_factor * 0.7, scale_factor * 1.8])\n    union() {\n        // Main grain body\n        difference() {\n            sphere(r = 1, $fn = 16);\n            translate([0, 0, 0.8])\n            cube([2.2, 2.2, 1.2], center = true);\n        }\n        \n        // Pointed tip\n        translate([0, 0, -1.5])\n        cylinder(h = 1.5, r1 = 0.8, r2 = 0.1, $fn = 12);\n    }\n}\n\n// Rice mound base\nmodule rice_mound() {\n    color(\"ivory\")\n    difference() {\n        // Main mound shape\n        scale([1, 0.8, 0.6])\n        sphere(d = rice_length, $fn = 64);\n        \n        // Flatten bottom\n        translate([0, 0, -rice_height/2])\n        cube([rice_length * 2, rice_width * 2, rice_height], center = true);\n    }\n}\n\n// Individual rice grains scattered on top\nmodule scattered_grains() {\n    for (i = [0:grain_count-1]) {\n        angle = rand() * 30 - 15;\n        x_pos = (rand() - 0.5) * rice_length * 0.8;\n        y_pos = (rand() - 0.5) * rice_width * 0.8;\n        z_pos = rice_height/2 - 2 - rand() * 3;\n        scale_factor = 0.8 + rand() * 0.4;\n        \n        rice_grain(x_pos, y_pos, z_pos, angle, scale_factor);\n    }\n}\n\n// Steam effect (subtle)\nmodule steam_effect() {\n    color(\"white\", 0.3)\n    for (i = [0:5]) {\n        translate([\n            (rand() - 0.5) * 20,\n            (rand() - 0.5) * 15,\n            rice_height/2 + 2 + i * 2\n        ])\n        scale([1 + i * 0.3, 1 + i * 0.3, 2 + i * 0.5])\n        sphere(r = 1 + rand(), $fn = 16);\n    }\n}\n\n// Main assembly\nunion() {\n    // Base rice mound\n    rice_mound();\n    \n    // Layer of grains on surface\n    scattered_grains();\n    \n    // Subtle steam effect\n    steam_effect();\n    \n    // Add some larger visible grains on top\n    rice_grain(-10, -8, rice_height/2 - 1, 20, 1.2);\n    rice_grain(12, 5, rice_height/2 - 0.5, -15, 1.1);\n    rice_grain(-5, 10, rice_height/2 - 1.5, 30, 1.3);\n}",
    "renders": true
  },
  {
    "food_item": "mad",
    "openscad_code": "// Mad Burger – medium-complexity realistic style\n// 75 mm diameter, printable without supports\n\n$fn = 32;                       // smooth curves\n\n// Bun top – domed with sesame seeds\nmodule bunTop(h=18, r=38) {\n    color(\"tan\")\n    difference() {\n        minkowski() {\n            cylinder(h=h-5, r=r, center=true);\n            sphere(10);\n            translate([0,0,-(h-5)/2]) sphere(5);\n        }\n        \n        // sesame seed pits\n        for(i=[0:35]) {\n            rotate([0,0,i*137.5]) \n                translate([r*0.9,0,h/2-2])\n                    rotate([90,0,0])\n                        cylinder(h=2,r=1.2,$fn=8);\n        }\n    }\n    \n    // sesame seeds\n    for(i=[0:35]) {\n        rotate([0,0,i*137.5]) \n            translate([r*0.9,0,h/2-1])\n                color(\"beige\")\n                    scale([1,1,0.6])\n                        sphere(1.5);\n    }\n}\n\n// Bun bottom – flat with slight dome\nmodule bunBottom(h=12, r=38) {\n    color(\"tan\")\n    minkowski() {\n        cylinder(h=h-3, r=r, center=true);\n        sphere(5);\n    }\n}\n\n// Beef patty – irregular top surface\nmodule patty(h=12, r=35) {\n    color(\"sienna\")\n    union() {\n        cylinder(h=h, r=r, center=true);\n        // grill marks\n        for(a=[0:30:150]) {\n            rotate([0,0,a])\n                translate([r*0.3,0,h/2+0.2])\n                    cube([r*0.7,2.5,1],center=true);\n        }\n    }\n}\n\n// Cheese slice – square with rounded corners and melt drips\nmodule cheese() {\n    color(\"gold\")\n    union() {\n        // slice\n        minkowski() {\n            cube([60,60,2.5], center=true);\n            cylinder(h=0.1, r=4, $fn=16);\n        }\n        // melt drips\n        for(x=[-20,20])\n            translate([x,25,0])\n                scale([1,1,1])\n                    cylinder(h=8,r1=6,r2=3,center=true);\n    }\n}\n\n// Lettuce – crinkled layer\nmodule lettuce() {\n    color(\"yellowgreen\")\n    difference() {\n        cylinder(h=3, r=34, center=true);\n        // crinkles\n        for(i=[0:11]) {\n            rotate([0,0,i*30])\n                translate([34-5,0,0])\n                    cube([10,30,4],center=true);\n        }\n    }\n}\n\n// Tomato slice – red ring\nmodule tomatoSlice() {\n    color(\"red\")\n    difference() {\n        cylinder(h=4, r=32, center=true);\n        cylinder(h=5, r=20, center=true);\n    }\n}\n\n// Stack assembly\nbunTop();\ntranslate([0,0,20]) cheese();\ntranslate([0,0,23]) patty();\ntranslate([0,0,29]) lettuce();\ntranslate([0,0,32]) tomatoSlice();\ntranslate([0,0,36]) bunBottom();",
    "renders": true
  },
  {
    "food_item": "caprice",
    "openscad_code": "// Caprice - A realistic chocolate wafer bar\n// Dimensions: 90mm x 30mm x 12mm\n\n$fa = 1;\n$fs = 0.5;\n\n// Main colors\ncolor_chocolate = [0.34, 0.17, 0.09];\ncolor_wafer = [0.85, 0.55, 0.25];\ncolor_hazelnut = [0.65, 0.45, 0.25];\n\n// Main caprice bar\nmodule caprice_bar() {\n    // Base chocolate coating\n    color(color_chocolate)\n    difference() {\n        rounded_box([90, 30, 12], 3);\n        // Hollow out center for filling\n        translate([0, 0, 2])\n            rounded_box([86, 26, 8], 2);\n    }\n    \n    // Wafer layers\n    translate([0, 0, -4])\n        color(color_wafer)\n        difference() {\n            rounded_box([86, 26, 4], 2);\n            // Create wafer texture\n            for (i = [-12:4:12]) {\n                for (j = [-10:4:10]) {\n                    translate([i, j, 1.8])\n                        cube([2.5, 2.5, 0.5], true);\n                }\n            }\n        }\n    \n    // Hazelnut cream filling\n    translate([0, 0, 0])\n        color(color_hazelnut)\n        rounded_box([82, 22, 3], 1.5);\n    \n    // Top chocolate layer\n    translate([0, 0, 4.5])\n        color(color_chocolate)\n        rounded_box([90, 30, 1.5], 3);\n    \n    // Surface texture - chocolate ridges\n    for (i = [-35:7:35]) {\n        translate([i, 0, 6])\n            color(color_chocolate)\n            rotate([90, 0, 0])\n                cylinder(h=30, d1=2.5, d2=1.5, $fn=8);\n    }\n}\n\n// Helper module for rounded box\nmodule rounded_box(size, radius) {\n    hull() {\n        for (dx = [-1, 1])\n        for (dy = [-1, 1])\n        for (dz = [-1, 1]) {\n            translate([dx * (size[0]/2 - radius),\n                       dy * (size[1]/2 - radius),\n                       dz * (size[2]/2 - radius)])\n                sphere(r=radius);\n        }\n    }\n}\n\n// Wrapper pattern\nmodule wrapper_pattern() {\n    // Metallic wrapper effect\n    color([0.9, 0.9, 0.9], 0.3)\n    difference() {\n        rounded_box([92, 32, 14], 3.5);\n        rounded_box([91.5, 31.5, 13.5], 3.3);\n    }\n    \n    // Wrapper seam\n    translate([0, -15.5, 0])\n        color([0.7, 0.7, 0.7])\n        cube([90, 1, 14], true);\n}\n\n// Assembly\nunion() {\n    // Main bar\n    caprice_bar();\n    \n    // Optional wrapper (comment out to print just the bar)\n    // translate([0, 0, 1])\n    //     wrapper_pattern();\n}\n\n// Add a small bite mark for realism\ndifference() {\n    children();\n    translate([25, 10, 0])\n        rotate([0, 0, -15])\n            sphere(d=20);\n}",
    "renders": true
  },
  {
    "food_item": "fantaisie",
    "openscad_code": "// Fantaisie Dragonfruit Tartlet\n// Realistic style, medium complexity, 3D printable\n\n// Global parameters\n$fn = 50;\ntartlet_diameter = 50;      // mm\ntartlet_height = 30;        // mm\ncrust_thickness = 3;        // mm\nfilling_height = 12;        // mm\ndragonfruit_size = 25;      // mm\nseed_count = 12;\n\n// Main module\nmodule dragonfruit_tartlet() {\n    color(\"wheat\")\n    difference() {\n        // Tartlet crust\n        union() {\n            // Base crust\n            cylinder(h=crust_thickness, d=tartlet_diameter);\n            \n            // Side crust with scalloped edge\n            for(i = [0:11]) {\n                rotate([0, 0, i*30])\n                translate([tartlet_diameter/2 - crust_thickness/2, 0, crust_thickness/2])\n                cylinder(h=tartlet_height-crust_thickness, d=crust_thickness);\n            }\n        }\n        \n        // Hollow center for filling\n        translate([0, 0, crust_thickness])\n        cylinder(h=tartlet_height-crust_thickness, d=tartlet_diameter-crust_thickness*2);\n    }\n    \n    // Filling\n    color(\"hotpink\")\n    translate([0, 0, crust_thickness])\n    cylinder(h=filling_height, d=tartlet_diameter-crust_thickness*2-2);\n    \n    // Dragonfruit half on top\n    color(\"crimson\")\n    translate([0, 0, crust_thickness+filling_height])\n    difference() {\n        // Main fruit body\n        sphere(d=dragonfruit_size);\n        \n        // Cut flat bottom\n        translate([0, 0, -dragonfruit_size/2-1])\n        cube([dragonfruit_size*2, dragonfruit_size*2, dragonfruit_size], center=true);\n        \n        // Scoop out inside\n        translate([0, 0, -5])\n        sphere(d=dragonfruit_size-6);\n    }\n    \n    // Dragonfruit peel\n    color(\"darkgreen\")\n    difference() {\n        sphere(d=dragonfruit_size+2);\n        sphere(d=dragonfruit_size);\n    }\n    \n    // Dragonfruit seeds\n    color(\"black\")\n    for(i = [0:seed_count-1]) {\n        angle = i * (360/seed_count);\n        radius = dragonfruit_size/3;\n        \n        // Spiral pattern\n        rotate([0, 0, angle + i*15])\n        translate([radius*sin(i*30), radius*cos(i*30), 0])\n        scale([1, 1, 0.3])\n        sphere(d=2);\n        \n        rotate([0, 0, angle + i*15 + 180])\n        translate([radius*0.7*sin(i*30), radius*0.7*cos(i*30), 0])\n        scale([1, 1, 0.3])\n        sphere(d=1.5);\n    }\n    \n    // Glossy glaze on filling\n    color(\"pink\", 0.6)\n    translate([0, 0, crust_thickness+filling_height-0.5])\n    cylinder(h=0.5, d=tartlet_diameter-crust_thickness*2-2);\n}\n\n// Render the tartlet\ndragonfruit_tartlet();",
    "renders": true
  },
  {
    "food_item": "choux",
    "openscad_code": "// Choux (Cream Puff) – realistic style, medium complexity\n// Overall size ≈ 80 mm tall sphere stack with ridges and top craquelin\n\n$fn = 40;          // smooth curves for printing\nchoux_color = \"#e8b77d\";\ncraquelin_color = \"#b86b3c\";\n\n// ---------- Helper for ridge pattern ----------\nmodule ridge(radius, height, count){\n    for(i=[0:count-1])\n        rotate([0,0,i*360/count])\n            translate([radius-0.8,0,0])\n                scale([1,0.25,1])\n                    cylinder(h=height, r=1.2, center=true);\n}\n\n// ---------- Crisp craquelin disk on top ----------\nmodule craquelin(){\n    color(craquelin_color)\n    difference(){\n        cylinder(h=2, r=22, center=false);\n        // random craquelin cracks\n        for(a=[10:30:360])\n            rotate([0,0,a])\n                translate([8,0,1])\n                    cube([16,0.6,4], center=true);\n    }\n}\n\n// ---------- Main choux body with vertical ridges ----------\nmodule choux_body(){\n    color(choux_color)\n    union(){\n        // base sphere\n        sphere(d=55);\n        \n        // vertical ridges around equator\n        ridge(27.5, 55, 18);\n        \n        // slightly smaller top sphere for typical dome\n        translate([0,0,25])\n            sphere(d=45);\n        \n        // ridges continue on upper sphere\n        translate([0,0,25])\n            ridge(22.5, 45, 16);\n    }\n}\n\n// ---------- Optional bottom flat for stable printing ----------\nmodule bottom_flat(){\n    translate([0,0,-28])\n        cube([56,56,2], center=true);\n}\n\n// ---------- Assembly ----------\nunion(){\n    choux_body();\n    translate([0,0,52]) craquelin();\n    difference(){\n        choux_body();\n        translate([0,0,-30]) bottom_flat();\n    }\n}",
    "renders": true
  },
  {
    "food_item": "water",
    "openscad_code": "// Realistic 3D printable water bottle (medium complexity)\n\n// Overall dimensions (mm)\nbottle_height = 85;\nbottle_diameter = 45;\ncap_height = 12;\ncap_diameter = 28;\nlabel_height = 35;\nwall_thickness = 1.2;\n\n// Subtle surface texture pattern\nmodule texture_pattern() {\n    for(i=[0:4]) {\n        rotate([0, 0, i*72])\n            translate([0, bottle_diameter/2 - 1, 0])\n                scale([1, 0.2, 1])\n                    sphere(1.2, $fn=8);\n    }\n}\n\n// Main bottle body (hollow cylinder with rounded bottom)\nmodule bottle_body() {\n    difference() {\n        // Outer shell\n        cylinder(h=bottle_height, d=bottle_diameter, $fn=64);\n        \n        // Inner cavity\n        translate([0, 0, wall_thickness])\n            cylinder(h=bottle_height - wall_thickness*2, \n                    d=bottle_diameter - wall_thickness*2, \n                    $fn=64);\n        \n        // Rounded bottom\n        translate([0, 0, bottle_height - wall_thickness])\n            sphere(d=bottle_diameter - wall_thickness*2, $fn=64);\n    }\n    \n    // Rounded bottom exterior\n    translate([0, 0, bottle_height - bottle_diameter/2])\n        sphere(d=bottle_diameter, $fn=64);\n    \n    // Subtle texture rings\n    for(z=[10:5:bottle_height-15]) {\n        color([0.8, 0.9, 1, 0.3])\n            translate([0, 0, z])\n                scale([1, 1, 0.1])\n                    difference() {\n                        cylinder(h=1, d=bottle_diameter, $fn=64);\n                        cylinder(h=2, d=bottle_diameter - wall_thickness*2, $fn=64);\n                    }\n    }\n}\n\n// Bottle neck\nmodule bottle_neck() {\n    difference() {\n        // Outer neck\n        cylinder(h=cap_height*1.5, d1=bottle_diameter*0.6, d2=cap_diameter, $fn=32);\n        \n        // Inner hole\n        cylinder(h=cap_height*1.5, d=cap_diameter - wall_thickness*2, $fn=32);\n    }\n    \n    // Threads\n    union() {\n        for(a=[0:45:315]) {\n            rotate([0, 0, a])\n                translate([cap_diameter/2 - 1.5, 0, cap_height*0.3])\n                    rotate([90, 0, 0])\n                        cylinder(h=2, d=2.5, $fn=8);\n        }\n    }\n}\n\n// Bottle cap with ridges\nmodule bottle_cap() {\n    difference() {\n        // Main cap\n        cylinder(h=cap_height, d=cap_diameter, $fn=32);\n        \n        // Inner cavity\n        cylinder(h=cap_height - 1, d=cap_diameter - wall_thickness*2, $fn=32);\n    }\n    \n    // Grip ridges\n    for(i=[0:11]) {\n        rotate([0, 0, i*30])\n            translate([cap_diameter/2 - 2, 0, 0])\n                cube([1.5, 1, cap_height], center=true);\n    }\n}\n\n// Water level inside bottle\nmodule water_fill() {\n    color([0.3, 0.6, 0.9, 0.7])\n        translate([0, 0, wall_thickness + 1])\n            cylinder(h=bottle_height*0.7 - wall_thickness*2, \n                    d=bottle_diameter - wall_thickness*2, \n                    $fn=64);\n}\n\n// Label wrap\nmodule bottle_label() {\n    color([0.9, 0.95, 1, 0.8])\n        difference() {\n            // Main label\n            cylinder(h=label_height, \n                    d=bottle_diameter + 0.2, \n                    $fn=64);\n            \n            // Inner cutout\n            cylinder(h=label_height + 0.2, \n                    d=bottle_diameter - 0.2, \n                    $fn=64);\n        }\n}\n\n// Assemble the bottle\ntranslate([0, 0, 0])\n    union() {\n        // Main components\n        color([0.85, 0.95, 1])\n            union() {\n                bottle_body();\n                translate([0, 0, bottle_height - bottle_diameter/2])\n                    bottle_neck();\n            }\n        \n        // Water inside\n        water_fill();\n        \n        // Label\n        translate([0, 0, bottle_height*0.4])\n            bottle_label();\n        \n        // Cap\n        translate([0, 0, bottle_height + cap_height*0.5])\n            color([0.2, 0.3, 0.4])\n                bottle_cap();\n    }",
    "renders": true
  },
  {
    "food_item": "juice",
    "openscad_code": "// Realistic 3D-printable juice box with straw, medium complexity\n// Overall height ~70 mm\n\n$fn = 48; // Smooth curves for printing\n\n// Main juice box body\nmodule juice_box() {\n    color([0.9, 0.95, 1.0])  // Light off-white paper color\n    difference() {\n        // Outer box shell\n        cube([42, 28, 65], center = true);\n        \n        // Hollow inside (1.6 mm walls)\n        translate([0, 0, 0.8])\n            cube([42 - 3.2, 28 - 3.2, 65 - 1.6], center = true);\n    }\n}\n\n// Foil cap on top\nmodule foil_cap() {\n    color([0.7, 0.8, 0.9])  // Metallic silver\n    translate([0, 0, 32.5])\n        cube([44, 30, 1.5], center = true);\n}\n\n// Straw hole\nmodule straw_hole() {\n    color([0.1, 0.1, 0.1])\n    translate([0, 0, 33.25])\n        cylinder(h = 2, r = 3.5, center = true);\n}\n\n// Juice brand label band\nmodule label_band() {\n    color([0.2, 0.7, 0.1])  // Vibrant green\n    translate([0, 0, 15])\n        cube([43, 29.5, 25], center = true);\n}\n\n// Fruit texture pattern on label\nmodule fruit_pattern() {\n    color([0.9, 1, 0.5])  // Light yellow-green\n    for (i = [-1:1]) {\n        for (j = [-1:0]) {\n            translate([i * 8, j * 8, 15.5])\n                sphere(r = 2.5);\n        }\n    }\n}\n\n// Straw assembly\nmodule straw() {\n    union() {\n        // Main straw tube\n        color([0.95, 0.95, 0.95])\n        translate([0, 0, 55])\n            cylinder(h = 35, r = 2, center = false);\n        \n        // Straw angled insertion end\n        translate([0, 0, 55])\n            rotate([0, 15, 0])\n                cylinder(h = 8, r1 = 2, r2 = 1.5, center = false);\n        \n        // Straw wrapper ring\n        color([0.2, 0.2, 0.2])\n        translate([0, 0, 72])\n            cylinder(h = 3, r = 2.5, center = false);\n    }\n}\n\n// Juice liquid visible through straw hole\nmodule juice_liquid() {\n    color([0.3, 0.8, 0.2])  // Light green juice\n    translate([0, 0, 15])\n        cylinder(h = 30, r = 3.2, center = true);\n}\n\n// Assembly\nunion() {\n    juice_box();\n    foil_cap();\n    straw_hole();\n    label_band();\n    fruit_pattern();\n    juice_liquid();\n    straw();\n}",
    "renders": true
  },
  {
    "food_item": "tea",
    "openscad_code": "// Tea bag on a saucer with realistic details\n// Overall dimensions: ~80mm diameter saucer, ~60mm tea bag string\n\n// Main module\nmodule tea_set() {\n    // Tea saucer\n    color(\"white\") \n    difference() {\n        // Main saucer body\n        cylinder(h=4, d=80, $fn=64);\n        \n        // Center depression\n        translate([0, 0, 2])\n            cylinder(h=2, d=40, $fn=64);\n        \n        // Bottom ring foot\n        translate([0, 0, -0.5])\n            cylinder(h=1.5, d=50, $fn=64);\n    }\n    \n    // Tea cup (empty)\n    color(\"white\")\n    translate([0, 0, 4])\n    difference() {\n        cylinder(h=25, d1=45, d2=50, $fn=64);\n        translate([0, 0, 5])\n            cylinder(h=25, d=42, $fn=64);\n    }\n    \n    // Tea bag\n    translate([0, 0, 29]) {\n        // Tea bag body\n        color(\"tan\")\n        difference() {\n            cube([30, 20, 2], center=true);\n            \n            // Rounded corners\n            for(x=[-14, 14], y=[-9, 9]) {\n                translate([x, y, 0])\n                    cylinder(h=3, d=4, $fn=16);\n            }\n        }\n        \n        // String\n        color(\"white\")\n        translate([15, 0, 1.5])\n        rotate([90, 0, 0])\n            cylinder(h=60, d=0.5, $fn=8);\n        \n        // Tag\n        color(\"white\")\n        translate([15, 0, 61.5])\n        rotate([90, 0, 90])\n        difference() {\n            cube([15, 20, 0.5], center=true);\n            \n            // Rounded tag corners\n            for(x=[-7, 7], y=[-9.5, 9.5]) {\n                translate([x, y, 0])\n                    cylinder(h=1, d=2, $fn=8);\n            }\n        }\n        \n        // Tea label on tag\n        color(\"red\")\n        translate([15, 0, 62])\n        rotate([90, 0, 90])\n            cube([8, 12, 0.1], center=true);\n    }\n    \n    // Tea leaves texture on saucer\n    color(\"darkgreen\")\n    for(i=[0:10]) {\n        rotate([0, 0, i*36])\n        translate([35, 0, 2.1])\n            scale([1, 1.5, 0.2])\n                sphere(d=3, $fn=12);\n    }\n}\n\n// Render the tea set\ntea_set();",
    "renders": true
  },
  {
    "food_item": "coffee",
    "openscad_code": "// Realistic Coffee Cup with Foam Art\n// A standard takeaway coffee cup with lid and latte art foam\n\n// Colors\n$fa = 2;\n$fs = 0.5;\n\n// Main coffee cup\nmodule coffee_cup() {\n    // Cup body - tapered cylinder\n    color([0.85, 0.85, 0.82]) {\n        difference() {\n            cylinder(h = 60, r1 = 35, r2 = 30, center = false);\n            translate([0, 0, 3])\n                cylinder(h = 58, r1 = 32, r2 = 27, center = false);\n        }\n    }\n    \n    // Cup rim\n    color([0.9, 0.9, 0.87]) {\n        translate([0, 0, 60])\n            cylinder(h = 5, r1 = 35, r2 = 35, center = false);\n    }\n    \n    // Coffee inside\n    color([0.4, 0.2, 0.1]) {\n        translate([0, 0, 5])\n            cylinder(h = 55, r1 = 31.5, r2 = 26.5, center = false);\n    }\n    \n    // Coffee foam layer\n    color([0.95, 0.9, 0.85]) {\n        translate([0, 0, 58])\n            cylinder(h = 2, r1 = 31.5, r2 = 31.5, center = false);\n    }\n}\n\n// Coffee lid\nmodule coffee_lid() {\n    color([0.2, 0.2, 0.2]) {\n        // Main lid body\n        difference() {\n            cylinder(h = 8, r1 = 37, r2 = 37, center = false);\n            translate([0, 0, 3])\n                cylinder(h = 10, r1 = 30, r2 = 30, center = false);\n        }\n        \n        // Sip hole\n        translate([25, 0, 8])\n            rotate([90, 0, 0])\n                cylinder(h = 10, r = 3, center = false);\n        \n        // Vent hole\n        translate([-20, 0, 8])\n            rotate([90, 0, 0])\n                cylinder(h = 3, r = 1, center = false);\n    }\n}\n\n// Latte art pattern on foam\nmodule latte_art() {\n    color([0.7, 0.5, 0.3]) {\n        // Center spiral\n        for(i = [0:30:360]) {\n            rotate([0, 0, i])\n                translate([i/15, 0, 58.5])\n                    sphere(r = 1.5);\n        }\n        \n        // Outer ring pattern\n        for(i = [0:15:360]) {\n            rotate([0, 0, i])\n                translate([20, 0, 58.5])\n                    sphere(r = 0.8);\n        }\n        \n        // Heart detail\n        translate([0, 0, 58.5]) {\n            scale([1, 0.8, 0.2])\n                sphere(r = 5);\n            translate([4, 2, 0])\n                sphere(r = 3);\n            translate([-4, 2, 0])\n                sphere(r = 3);\n        }\n    }\n}\n\n// Cup sleeve\nmodule sleeve() {\n    color([0.6, 0.4, 0.2]) {\n        difference() {\n            // Main sleeve\n            cylinder(h = 25, r1 = 36, r2 = 34, center = false);\n            translate([0, 0, 2])\n                cylinder(h = 28, r1 = 34, r2 = 32, center = false);\n        }\n        \n        // Texture lines\n        for(i = [0:5:360]) {\n            rotate([0, 0, i])\n                translate([35, 0, 30])\n                    cube([2, 0.5, 25], center = true);\n        }\n    }\n}\n\n// Steam wisps\nmodule steam() {\n    color([1, 1, 1, 0.3]) {\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90])\n                translate([5 + i * 2, 10, 70])\n                    scale([0.5, 0.5, 1.5])\n                        sphere(r = 3 + i);\n        }\n    }\n}\n\n// Assemble the coffee\ncoffee_cup();\ntranslate([0, 0, 60]) coffee_lid();\ntranslate([0, 0, 5]) sleeve();\nlatte_art();\nsteam();",
    "renders": true
  },
  {
    "food_item": "soda",
    "openscad_code": "// Realistic Soda Can - OpenSCAD\n// 330ml soda can, about 67mm diameter and 115mm tall\n\n$fn=64;\n\n// Main body\nmodule soda_can() {\n    color(\"red\")\n    difference() {\n        // Main cylindrical body\n        cylinder(h=110, r=33.5, center=false);\n        \n        // Indent top rim\n        translate([0,0,107])\n            cylinder(h=5, r=31.5, center=false);\n    }\n    \n    // Top dome\n    color(\"silver\")\n    translate([0,0,110])\n    difference() {\n        sphere(r=33.5);\n        translate([0,0,-33.5])\n            cube([100,100,33.5], center=true);\n    }\n    \n    // Bottom dome\n    color(\"silver\")\n    translate([0,0,0])\n    difference() {\n        sphere(r=33.5);\n        translate([0,0,33.5])\n            cube([100,100,33.5], center=true);\n    }\n    \n    // Ring pull\n    color(\"silver\")\n    translate([0,20,114])\n    rotate([90,0,0])\n    difference() {\n        // Main ring\n        torus(3, 8);\n        \n        // Gap for finger\n        translate([0,0,-3])\n            cube([10,20,6], center=true);\n    }\n    \n    // Tab\n    color(\"silver\")\n    translate([0,10,113.5])\n    cube([15,2,1], center=true);\n    \n    // Opening\n    color(\"silver\")\n    translate([0,-5,113.5])\n    cube([15,10,1], center=true);\n}\n\n// Carbonation bubbles texture\nmodule bubbles() {\n    color(\"white\", 0.3)\n    for(i=[0:30]) {\n        rotate([0,0,rand(360)])\n        translate([rand(-25,25), rand(-25,25), rand(5,105)])\n        sphere(r=rand(0.5,1.5));\n    }\n}\n\n// Condensation drops\nmodule condensation() {\n    color(\"lightblue\", 0.4)\n    for(i=[0:15]) {\n        rotate([0,0,rand(360)])\n        translate([rand(-30,30), rand(-30,30), rand(5,110)])\n        scale([1,1,0.6])\n        sphere(r=rand(0.5,1));\n    }\n}\n\n// Label details\nmodule label() {\n    color(\"white\")\n    translate([0,0,65])\n    rotate([0,0,0])\n    linear_extrude(height=0.1)\n    text(\"COLA\", size=10, halign=\"center\", valign=\"center\");\n}\n\n// Helper functions\nfunction rand(min=0, max=1) = min + (max-min) * rands(0,1,1)[0];\n\n// Torus module\nmodule torus(r1, r2) {\n    rotate_extrude()\n    translate([r1,0])\n    circle(r=r2);\n}\n\n// Main assembly\nunion() {\n    soda_can();\n    bubbles();\n    condensation();\n    label();\n}",
    "renders": true
  },
  {
    "food_item": "beer",
    "openscad_code": "$fn = 36;\n\n// Beer glass overall proportions\nglass_height = 85;\nglass_diameter = 45;\nwall_thickness = 2.5;\n\n// Beer liquid level\nbeer_level = 65;\n\n// Foam top\nfoam_height = 15;\n\nmodule beer_glass() {\n    difference() {\n        // Main glass body - slightly tapered\n        cylinder(h = glass_height, d1 = glass_diameter, d2 = glass_diameter - 4, center = false);\n        \n        // Hollow out interior\n        translate([0, 0, wall_thickness])\n            cylinder(h = glass_height - wall_thickness*2, d1 = glass_diameter - wall_thickness*2, \n                     d2 = glass_diameter - 4 - wall_thickness*2, center = false);\n    }\n    \n    // Glass bottom\n    translate([0, 0, -0.5])\n        cylinder(h = wall_thickness, d = glass_diameter, center = false);\n}\n\nmodule beer_liquid() {\n    color([0.8, 0.55, 0.15])  // Golden beer color\n    translate([0, 0, wall_thickness]) {\n        // Beer inside glass\n        cylinder(h = beer_level - wall_thickness, \n                d1 = glass_diameter - wall_thickness*2 - 0.5, \n                d2 = glass_diameter - 4 - wall_thickness*2 - 0.5, center = false);\n    }\n}\n\nmodule foam_bubbles() {\n    color([0.95, 0.95, 0.9])  // White foam color\n    \n    // Main foam cap\n    translate([0, 0, beer_level])\n        cylinder(h = foam_height, d = glass_diameter - 2, center = false);\n    \n    // Bubble texture - random spheres on top\n    for(i = [0:20]) {\n        translate([\n            (glass_diameter/3 - 3) * cos(i * 137.5), \n            (glass_diameter/3 - 3) * sin(i * 137.5), \n            beer_level + foam_height + 1\n        ]) {\n            scale([1, 1, 0.7])\n                sphere(d = 2 + (i % 4));\n        }\n    }\n    \n    // Side foam drips\n    for(i = [0:8]) {\n        rotate([0, 0, i * 45])\n            translate([glass_diameter/2 - 1, 0, beer_level + 5])\n                scale([0.5, 1.5, 1])\n                    sphere(d = 3 + (i % 3));\n    }\n}\n\nmodule glass_details() {\n    color([0.85, 0.95, 1, 0.3])  // Clear glass with transparency\n    \n    // Subtle vertical ridges for grip\n    for(i = [0:17]) {\n        rotate([0, 0, i * 20])\n            translate([glass_diameter/2 - wall_thickness, 0, 10])\n                scale([0.3, 1, 1])\n                    cylinder(h = glass_height - 20, d = 2, center = false);\n    }\n}\n\n// Assembly\nunion() {\n    beer_glass();\n    glass_details();\n    beer_liquid();\n    foam_bubbles();\n}",
    "renders": true
  },
  {
    "food_item": "wine",
    "openscad_code": "// Wine Bottle Module\nmodule wine_bottle() {\n    // Bottle body - main cylinder\n    color(\"darkgreen\")\n    union() {\n        // Main bottle body\n        cylinder(h = 80, r1 = 12, r2 = 12, $fn = 32);\n        \n        // Bottle neck\n        translate([0, 0, 80])\n            cylinder(h = 25, r1 = 8, r2 = 6, $fn = 32);\n            \n        // Bottle lip\n        translate([0, 0, 105])\n            cylinder(h = 3, r1 = 7, r2 = 7.5, $fn = 32);\n    }\n    \n    // Cork visible at top\n    color(\"#8B4513\")\n    translate([0, 0, 108])\n        cylinder(h = 5, r = 5.5, $fn = 16);\n}\n\n// Wine Glass Module\nmodule wine_glass() {\n    color(\"white\")\n    union() {\n        // Glass bowl - ellipsoid shape\n        translate([0, 0, 25])\n            scale([1, 1, 0.8])\n            sphere(r = 20, $fn = 32);\n            \n        // Remove bottom half to create bowl shape\n        translate([0, 0, -10])\n            cube([50, 50, 25], center = true);\n    }\n    \n    // Glass stem\n    color(\"white\")\n    cylinder(h = 25, r1 = 3, r2 = 2, $fn = 16);\n    \n    // Glass base\n    translate([0, 0, -5])\n        cylinder(h = 5, r = 12, $fn = 32);\n}\n\n// Wine in glass\nmodule wine() {\n    // Red wine color\n    color(\"#722F37\")\n    translate([0, 0, 10])\n        scale([1, 1, 0.3])\n        sphere(r = 18, $fn = 32);\n}\n\n// Wine bottle label\nmodule bottle_label() {\n    color(\"beige\")\n    translate([12.01, 0, 40])\n        rotate([0, 90, 0])\n        cylinder(h = 30, r1 = 12.5, r2 = 12.5, $fn = 4);\n    \n    // Label text area\n    color(\"white\")\n    translate([12.1, 0, 40])\n        rotate([0, 90, 0])\n        cube([0.5, 20, 25], center = true);\n}\n\n// Cheese platter base\nmodule cheese_platter() {\n    color(\"tan\")\n    translate([0, 0, -15])\n        cylinder(h = 3, r = 35, $fn = 64);\n}\n\n// Cheese wedges\nmodule cheese_wedges() {\n    // Yellow cheese\n    color(\"#F5DEB3\")\n    for(i = [0:120:359]) {\n        rotate([0, 0, i])\n        translate([15, 0, -12])\n            scale([1, 0.5, 0.4])\n            sphere(r = 10, $fn = 3);\n    }\n    \n    // White cheese\n    color(\"ivory\")\n    for(i = [60:120:359]) {\n        rotate([0, 0, i])\n        translate([20, 0, -12])\n            scale([0.8, 0.5, 0.3])\n            sphere(r = 8, $fn = 3);\n    }\n}\n\n// Grape cluster\nmodule grapes() {\n    // Purple grapes\n    color(\"#4B0082\")\n    for(i = [0:3]) {\n        for(j = [0:i]) {\n            translate([30 - j*6, -15 + i*6, -10 + i*3])\n                sphere(r = 4, $fn = 16);\n        }\n    }\n    \n    // Green grapes\n    color(\"#90EE90\")\n    for(i = [0:3]) {\n        for(j = [0:i]) {\n            translate([-30 + j*6, -15 + i*6, -10 + i*3])\n                sphere(r = 4, $fn = 16);\n        }\n    }\n}\n\n// Main assembly\ntranslate([-25, 0, 0])\n    wine_bottle();\n    \ntranslate([25, 0, 0])\n    union() {\n        wine_glass();\n        wine();\n    }\n    \ncheese_platter();\ncheese_wedges();\ngrapes();\nbottle_label();",
    "renders": true
  },
  {
    "food_item": "cider",
    "openscad_code": "// Realistic Cider Drink with Glass and Liquid\n// Medium complexity OpenSCAD model\n\n// Parameters\n$fa = 2;\n$fs = 0.5;\n\n// Colors\nglass_color = [0.9, 0.95, 1, 0.3];\ncider_color = [0.95, 0.8, 0.2, 0.9];\nfoam_color = [1, 1, 0.8, 0.7];\napple_color = [0.8, 0.2, 0.2, 1];\nstem_color = [0.4, 0.3, 0.1, 1];\n\n// Main assembly\nunion() {\n    // Glass\n    color(glass_color) glass();\n    \n    // Cider liquid\n    color(cider_color) cider_liquid();\n    \n    // Foam on top\n    color(foam_color) foam();\n    \n    // Apple slice garnish\n    translate([20, 0, 35]) rotate([90, 0, 0]) apple_slice();\n}\n\n// Glass module\nmodule glass() {\n    difference() {\n        // Main glass body\n        union() {\n            cylinder(h = 45, r1 = 22, r2 = 25, center = false);\n            translate([0, 0, 45]) cylinder(h = 5, r1 = 25, r2 = 28, center = false);\n        }\n        \n        // Hollow inside\n        translate([0, 0, -1]) cylinder(h = 47, r1 = 20, r2 = 23, center = false);\n        \n        // Base hollow\n        translate([0, 0, -1]) cylinder(h = 5, r1 = 20, r2 = 20, center = false);\n    }\n    \n    // Glass base\n    cylinder(h = 5, r1 = 28, r2 = 28, center = false);\n}\n\n// Cider liquid module\nmodule cider_liquid() {\n    translate([0, 0, 5]) cylinder(h = 35, r1 = 20, r2 = 23, center = false);\n}\n\n// Foam module\nmodule foam() {\n    // Main foam layer\n    translate([0, 0, 40]) cylinder(h = 4, r1 = 23, r2 = 25, center = false);\n    \n    // Foam bubbles\n    for(i = [1:8]) {\n        rotate([0, 0, i * 45]) {\n            translate([15 + sin(i * 30) * 3, 0, 42]) sphere(r = 1.5 + sin(i * 20) * 0.5);\n            translate([10 + cos(i * 25) * 2, 0, 43]) sphere(r = 1 + cos(i * 15) * 0.3);\n        }\n    }\n}\n\n// Apple slice garnish\nmodule apple_slice() {\n    difference() {\n        // Apple body\n        color(apple_color) scale([1, 1, 0.3]) sphere(r = 8);\n        \n        // Star-shaped core\n        for(i = [1:5]) {\n            rotate([0, 0, i * 72]) {\n                translate([0, 3, 0]) scale([1, 2, 1]) cube([3, 6, 6], center = true);\n            }\n        }\n        \n        // Center hole\n        cylinder(h = 10, r = 2, center = true);\n    }\n    \n    // Stem\n    color(stem_color) translate([0, 0, 3]) rotate([90, 0, 0]) cylinder(h = 5, r1 = 0.5, r2 = 0.3, center = false);\n    \n    // Seeds\n    color([0.1, 0.1, 0.1, 1])\n    for(i = [1:3]) {\n        rotate([0, 0, i * 120]) {\n            translate([4, 0, 0]) scale([1, 0.7, 0.3]) sphere(r = 0.8);\n        }\n    }\n}",
    "renders": true
  },
  {
    "food_item": "ale",
    "openscad_code": "// Ale glass with foam head and liquid body\n// Overall size: 55mm tall, 30mm diameter\n\n// Glass color\ncolor([0.9, 0.95, 1.0, 0.4]) {\n    difference() {\n        // Main glass body - slightly tapered cylinder\n        cylinder(h = 45, r1 = 15, r2 = 12, $fn = 32);\n        \n        // Hollow interior\n        translate([0, 0, -1])\n            cylinder(h = 47, r1 = 13.5, r2 = 10.5, $fn = 32);\n        \n        // Glass bottom indentation\n        translate([0, 0, 0])\n            cylinder(h = 2, r = 8, $fn = 32);\n    }\n}\n\n// Ale liquid body\ncolor([0.7, 0.4, 0.1, 0.9]) {\n    translate([0, 0, 2]) {\n        difference() {\n            // Liquid level - slightly below top\n            cylinder(h = 35, r1 = 13.4, r2 = 10.4, $fn = 32);\n            \n            // Meniscus curve\n            translate([0, 0, 34])\n                scale([1, 1, 0.3])\n                    sphere(r = 10.4, $fn = 32);\n        }\n    }\n}\n\n// Foam head with realistic bubbles\nmodule foam_bubble(x, y, z, size) {\n    color([0.98, 0.95, 0.9, 0.8]) {\n        translate([x, y, z])\n            scale([1, 1, 0.7])\n                sphere(r = size, $fn = 16);\n    }\n}\n\n// Generate foam bubbles\nfor (i = [0:25]) {\n    angle = i * 137.5;  // Golden angle for natural distribution\n    radius = 8 * sqrt(i/25);  // Spiral pattern\n    x = cos(angle) * radius;\n    y = sin(angle) * radius;\n    z = 37 + (i % 5) * 0.8;  // Varying heights\n    size = 1.5 + (i % 3) * 0.5;\n    foam_bubble(x, y, z, size);\n}\n\n// Larger foam bubbles on top\nfor (i = [0:8]) {\n    angle = i * 45;\n    x = cos(angle) * 5;\n    y = sin(angle) * 5;\n    foam_bubble(x, y, 40, 2.5);\n}\n\n// Glass handle\ncolor([0.9, 0.95, 1.0, 0.4]) {\n    translate([-15, 0, 20]) {\n        difference() {\n            // Handle shape\n            rotate([0, 90, 0])\n                cylinder(h = 8, r = 3, $fn = 16);\n            \n            // Handle hole\n            rotate([0, 90, 0])\n                translate([0, 0, -1])\n                    cylinder(h = 10, r = 2, $fn = 16);\n        }\n    }\n}\n\n// Base rim detail\ncolor([0.85, 0.9, 0.95, 0.4]) {\n    translate([0, 0, 0]) {\n        difference() {\n            cylinder(h = 2, r = 15.5, $fn = 32);\n            cylinder(h = 2.1, r = 14.5, $fn = 32);\n        }\n    }\n}\n\n// Top rim detail\ncolor([0.85, 0.9, 0.95, 0.4]) {\n    translate([0, 0, 45]) {\n        difference() {\n            cylinder(h = 2, r = 12.5, $fn = 32);\n            cylinder(h = 2.1, r = 11.5, $fn = 32);\n        }\n    }\n}",
    "renders": true
  },
  {
    "food_item": "mead",
    "openscad_code": "// Mead Horn\n// Realistic style, medium complexity\n\n$fa = 1;\n$fs = 0.5;\n\n// Colors\ncolor_horn = \"#D4A574\";\ncolor_mead = \"#FFD700\";\ncolor_foam = \"#FFFACD\";\ncolor_strap = \"#8B4513\";\n\n// Main module\nmodule mead_horn() {\n    // Horn body\n    color(color_horn) {\n        difference() {\n            // Main horn shape\n            rotate([0, 90, 0])\n                scale([1, 1, 0.8])\n                    cylinder(h = 80, d1 = 20, d2 = 35, center = true);\n            \n            // Hollow interior\n            rotate([0, 90, 0])\n                scale([1, 1, 0.85])\n                    cylinder(h = 85, d1 = 15, d2 = 30, center = true);\n        }\n        \n        // Horn tip curve\n        translate([-37, 0, 0])\n            rotate([0, 90, 0])\n                scale([0.6, 0.6, 1])\n                    sphere(d = 20);\n    }\n    \n    // Leather straps\n    color(color_strap) {\n        for(i = [0:2]) {\n            rotate([0, 0, i * 120])\n                translate([0, 0, -30 + i * 20])\n                    scale([1.2, 0.1, 0.1])\n                        cylinder(h = 35, d = 28);\n        }\n    }\n    \n    // Mead liquid\n    color(color_mead) {\n        translate([0, 0, 5])\n            rotate([0, 90, 0])\n                scale([1, 1, 0.75])\n                    cylinder(h = 70, d1 = 16, d2 = 28, center = true);\n    }\n    \n    // Foam on top\n    color(color_foam) {\n        difference() {\n            translate([-32, 0, 5])\n                scale([1.2, 1.1, 0.3])\n                    sphere(d = 25);\n            \n            // Cut foam to match horn shape\n            rotate([0, 90, 0])\n                scale([1, 1, 0.75])\n                    cylinder(h = 10, d1 = 16, d2 = 28, center = true);\n        }\n        \n        // Foam bubbles\n        for(i = [0:10]) {\n            translate([\n                -30 + sin(i * 137.5) * 8,\n                cos(i * 137.5) * 8,\n                8 + sin(i * 73) * 2\n            ]) {\n                sphere(d = 1.5 + sin(i) * 0.5);\n            }\n        }\n    }\n    \n    // Horn texture rings\n    color(color_horn) {\n        for(i = [1:8]) {\n            rotate([0, 90, 0])\n                translate([i * 9 - 40, 0, 0])\n                    cylinder(h = 1.5, d1 = 18 + i * 1.5, d2 = 18 + i * 2);\n        }\n    }\n}\n\n// Base stand\nmodule horn_stand() {\n    color(\"#8B4513\") {\n        difference() {\n            cylinder(h = 8, d = 40);\n            cylinder(h = 9, d = 35);\n        }\n        \n        // Support ring\n        translate([0, 0, 8])\n            cylinder(h = 3, d1 = 35, d2 = 40);\n    }\n}\n\n// Assembly\ntranslate([0, 0, 15])\n    rotate([15, 0, 0])\n        mead_horn();\n\ntranslate([0, 0, 0])\n    horn_stand();",
    "renders": true
  },
  {
    "food_item": "kvass",
    "openscad_code": "// Kvass Food Item - Realistic Style with Medium Complexity\n// A traditional Eastern European fermented rye bread drink in a glass bottle\n\n// Overall dimensions: 70mm height, 30mm diameter\n\n$fn = 32;\n\n// Main bottle body\nmodule bottle_body() {\n    color([0.1, 0.6, 0.8], 0.7)  // Clear glass with blue tint\n    difference() {\n        // Main cylindrical body\n        cylinder(h = 55, d = 30, center = false);\n        \n        // Hollow interior\n        translate([0, 0, 1.5])\n        cylinder(h = 52, d = 26, center = false);\n        \n        // Bottom indent for stability\n        translate([0, 0, -0.1])\n        cylinder(h = 2, d = 20, center = false);\n    }\n}\n\n// Bottle neck\nmodule bottle_neck() {\n    color([0.1, 0.6, 0.8], 0.7)\n    difference() {\n        // Tapered neck\n        cylinder(h1 = 15, h2 = 10, d1 = 20, d2 = 12, center = false);\n        \n        // Hollow interior\n        translate([0, 0, 1])\n        cylinder(h1 = 13, h2 = 8, d1 = 16, d2 = 8, center = false);\n    }\n}\n\n// Cork stopper\nmodule cork_stopper() {\n    color([0.6, 0.4, 0.2])  // Cork brown\n    \n    // Main cork cylinder\n    translate([0, 0, 60])\n    cylinder(h = 8, d = 10, center = false);\n    \n    // Cork top\n    translate([0, 0, 68])\n    cylinder(h = 3, d = 12, center = false);\n}\n\n// Liquid kvass inside\nmodule kvass_liquid() {\n    color([0.3, 0.2, 0.1], 0.9)  // Dark brown kvass color\n    \n    // Main liquid volume\n    translate([0, 0, 2])\n    cylinder(h = 50, d = 25.5, center = false);\n    \n    // Foam layer on top\n    color([0.9, 0.8, 0.7], 0.8)\n    translate([0, 0, 52])\n    difference() {\n        cylinder(h = 3, d = 25.5, center = false);\n        // Foam texture with small bubbles\n        for(i = [0:5:360]) {\n            rotate([0, 0, i])\n            translate([8, 0, 0.5])\n            sphere(d = 1.5, center = false);\n        }\n    }\n}\n\n// Bottle label\nmodule bottle_label() {\n    color([0.9, 0.8, 0.7])  // Cream paper color\n    \n    // Wrap label around bottle\n    difference() {\n        // Main label body\n        translate([0, 15.1, 25])\n        cube([25, 0.2, 20], center = true);\n        \n        // Rounded corners\n        translate([12.5, 15.2, 35])\n        sphere(d = 5, center = true);\n        translate([-12.5, 15.2, 35])\n        sphere(d = 5, center = true);\n        translate([12.5, 15.2, 15])\n        sphere(d = 5, center = true);\n        translate([-12.5, 15.2, 15])\n        sphere(d = 5, center = true);\n    }\n}\n\n// Decorative text on label (simplified as rectangles)\nmodule label_text() {\n    color([0.2, 0.1, 0.05])  // Dark brown text\n    \n    // \"KVASS\" text\n    for(pos = [[-8, 0, 30], [-4, 0, 30], [0, 0, 30], [4, 0, 30], [8, 0, 30]]) {\n        translate([pos[0], 15.3, pos[2]])\n        cube([2, 0.1, 4], center = true);\n    }\n    \n    // Small rye grain decorations\n    color([0.5, 0.3, 0.1])\n    for(i = [0:45:360]) {\n        rotate([0, 0, i])\n        translate([0, 15.3, 25])\n        scale([1, 0.1, 0.5])\n        sphere(d = 2);\n    }\n}\n\n// Condensation droplets on bottle\nmodule condensation() {\n    color([1, 1, 1], 0.5)\n    for(i = [0:30:360]) {\n        for(j = [15:5:45]) {\n            rotate([0, 0, i])\n            translate([15, 0, j])\n            sphere(d = 0.5 + sin(i + j) * 0.3);\n        }\n    }\n}\n\n// Assemble the complete kvass bottle\nunion() {\n    bottle_body();\n    translate([0, 0, 55])\n    bottle_neck();\n    cork_stopper();\n    kvass_liquid();\n    bottle_label();\n    label_text();\n    condensation();\n}",
    "renders": true
  },
  {
    "food_item": "chai",
    "openscad_code": "// Chai (Indian Spiced Tea) - Realistic Style\n// 3D printable chai cup with foam pattern and floating spices\n\n$fn = 48;\n\n// Main color definitions\ncup_color = [0.9, 0.9, 0.85];\ntea_color = [0.6, 0.3, 0.1];\nfoam_color = [0.95, 0.9, 0.8];\nspice_color = [0.5, 0.3, 0.1];\n\n// Cup body with handle\nmodule cup_body() {\n    color(cup_color) {\n        difference() {\n            // Main cup shape\n            cylinder(h = 45, r1 = 22, r2 = 25);\n            \n            // Hollow interior\n            translate([0, 0, 3])\n                cylinder(h = 42, r1 = 19, r2 = 22);\n            \n            // Rounded bottom\n            translate([0, 0, -1])\n                sphere(r = 19);\n        }\n        \n        // Handle\n        translate([24, 0, 25])\n            rotate([90, 0, 0])\n                difference() {\n                    cylinder(h = 20, r1 = 6, r2 = 6);\n                    cylinder(h = 20, r1 = 3.5, r2 = 3.5);\n                }\n    }\n}\n\n// Tea liquid\nmodule tea_liquid() {\n    color(tea_color) {\n        translate([0, 0, 3])\n            cylinder(h = 35, r1 = 19.5, r2 = 22.5);\n    }\n}\n\n// Foam layer with realistic bubble texture\nmodule foam_layer() {\n    color(foam_color) {\n        // Base foam\n        translate([0, 0, 38])\n            cylinder(h = 4, r1 = 22, r2 = 22);\n        \n        // Bubble details\n        for(i = [0:12]) {\n            angle = i * 30;\n            radius = 18 + (i % 2) * 3;\n            translate([cos(angle) * radius, sin(angle) * radius, 39.5])\n                sphere(r = 1.2 + sin(i) * 0.5);\n        }\n    }\n}\n\n// Cardamom seeds\nmodule cardamom_seeds() {\n    color(spice_color) {\n        for(i = [0:2]) {\n            angle = i * 120 + 30;\n            translate([cos(angle) * 12, sin(angle) * 12, 40])\n                scale([1, 0.7, 0.4])\n                    sphere(r = 1.5);\n        }\n    }\n}\n\n// Cinnamon stick\nmodule cinnamon_stick() {\n    color([0.4, 0.2, 0.05]) {\n        translate([8, -8, 40.5])\n            rotate([0, 0, 15])\n                scale([0.4, 0.4, 3])\n                    cylinder(h = 5, r1 = 1.5, r2 = 1.5);\n    }\n}\n\n// Steam wisps\nmodule steam() {\n    color([1, 1, 1, 0.3]) {\n        for(i = [0:2]) {\n            angle = i * 45;\n            translate([cos(angle) * 8, sin(angle) * 8, 44])\n                scale([0.5, 0.5, 1])\n                    rotate([0, 0, angle])\n                        cylinder(h = 5 + i * 2, r1 = 2 - i * 0.5, r2 = 0.5);\n        }\n    }\n}\n\n// Cup rim detail\nmodule cup_rim() {\n    color(cup_color) {\n        difference() {\n            translate([0, 0, 42])\n                cylinder(h = 3, r1 = 25.5, r2 = 25.5);\n            cylinder(h = 3, r1 = 22, r2 = 22);\n        }\n    }\n}\n\n// Assembly\ncup_body();\ntea_liquid();\nfoam_layer();\ncardamom_seeds();\ncinnamon_stick();\nsteam();\ncup_rim();",
    "renders": true
  },
  {
    "food_item": "matcha",
    "openscad_code": "// Matcha Swiss Roll Cake\n// Realistic style, medium complexity (≈120 lines)\n\n$fn = 36;  // Smooth curves\n\n// Colors\nmatcha = [0.42, 0.75, 0.48];\nsponge = [0.98, 0.92, 0.78];\ncream  = [0.98, 0.98, 0.96];\n\nmodule roll_cake() {\n    // Outer sponge layer\n    color(sponge)\n    difference() {\n        union() {\n            // Main roll body\n            rotate([90, 0, 0])\n                cylinder(h = 70, d1 = 35, d2 = 35);\n            \n            // End caps\n            translate([0, 0, 35])\n                rotate([0, 90, 0])\n                    cylinder(h = 35, d = 35);\n            translate([0, 0, -35])\n                rotate([0, 90, 0])\n                    cylinder(h = 35, d = 35);\n        }\n        \n        // Hollow center for cream\n        rotate([90, 0, 0])\n            cylinder(h = 72, d1 = 20, d2 = 20);\n        \n        // Slice face\n        translate([0, 0, 0])\n            cube([80, 80, 80], center = true);\n    }\n    \n    // Matcha cream filling\n    color(matcha)\n    intersection() {\n        // Spiral cream layer\n        rotate([90, 0, 0])\n            cylinder(h = 70, d1 = 20, d2 = 20);\n        \n        // Create spiral by subtracting rotated cylinders\n        for (i = [0:30:360]) {\n            rotate([0, 0, i])\n                translate([0, 12, 0])\n                    rotate([90, 0, 0])\n                        cylinder(h = 75, d = 3);\n        }\n    }\n    \n    // White cream between layers\n    color(cream)\n    intersection() {\n        rotate([90, 0, 0])\n            cylinder(h = 70, d1 = 20, d2 = 20);\n        \n        for (i = [15:30:375]) {\n            rotate([0, 0, i])\n                translate([0, 9, 0])\n                    rotate([90, 0, 0])\n                        cylinder(h = 75, d = 2);\n        }\n    }\n}\n\n// Slice face texture\nmodule slice_texture() {\n    color(sponge)\n    translate([0, 0, 0])\n        difference() {\n            // Visible slice face\n            cube([70, 0.5, 70], center = true);\n            \n            // Porous sponge texture\n            for (x = [-30:5:30]) {\n                for (y = [-30:5:30]) {\n                    translate([x, 0, y])\n                        sphere(d = 1.5);\n                }\n            }\n        }\n}\n\n// Matcha powder dusting\nmodule matcha_powder() {\n    color(matcha)\n    for (i = [1:20]) {\n        translate([\n            -35 + 70 * rands(0, 1, 1)[0],\n            18 + 5 * rands(0, 1, 1)[0],\n            -35 + 70 * rands(0, 1, 1)[0]\n        ]) {\n            scale([1, 0.1, 1])\n                sphere(d = rands(0.3, 0.8, 1)[0]);\n        }\n    }\n}\n\n// Assembly\nrotate([0, 0, 45])\n    union() {\n        roll_cake();\n        translate([0, 35, 0])\n            slice_texture();\n        matcha_powder();\n    }",
    "renders": true
  },
  {
    "food_item": "espresso",
    "openscad_code": "// Espresso with crema - 3D printable model\n// Overall height ~65mm, cup diameter ~60mm\n\n// Main colors\n$fn = 48;\n\n// Cup module\nmodule espresso_cup() {\n    color(\"white\")\n    difference() {\n        // Outer cup shape\n        cylinder(h=55, r1=30, r2=25);\n        \n        // Hollow interior\n        translate([0, 0, 5])\n        cylinder(h=50, r1=27, r2=22);\n    }\n    \n    // Cup handle\n    translate([30, 0, 30])\n    rotate([90, 0, 0])\n    color(\"white\")\n    difference() {\n        torus(r1=10, r2=3);\n        translate([0, 0, -10])\n        cube([20, 20, 20], center=true);\n    }\n    \n    // Cup base\n    translate([0, 0, -2])\n    color(\"white\")\n    cylinder(h=4, r1=32, r2=30);\n}\n\n// Coffee liquid\nmodule coffee_liquid() {\n    color(\"#2C1810\")\n    translate([0, 0, 5])\n    cylinder(h=35, r1=27, r2=22);\n}\n\n// Crema layer\nmodule crema() {\n    color(\"#C4A484\")\n    translate([0, 0, 40])\n    cylinder(h=5, r1=27, r2=22);\n    \n    // Crema texture bubbles\n    for(i = [1:20]) {\n        angle = i * 137.5;\n        radius = 15 * sqrt(i/20);\n        translate([radius * cos(angle), radius * sin(angle), 42.5])\n        color(\"#D4B896\")\n        sphere(r=1 + 0.5 * sin(i));\n    }\n}\n\n// Saucer\nmodule saucer() {\n    color(\"white\")\n    difference() {\n        cylinder(h=4, r1=45, r2=40);\n        translate([0, 0, 2])\n        cylinder(h=4, r1=35, r2=30);\n    }\n}\n\n// Coffee beans decoration\nmodule coffee_bean() {\n    scale([1, 0.6, 0.4])\n    color(\"#2C1810\")\n    difference() {\n        sphere(r=3);\n        translate([0, 0, -1])\n        cube([6, 3, 6], center=true);\n    }\n}\n\n// Assemble the espresso\nespresso_cup();\ncoffee_liquid();\ncrema();\ntranslate([0, 0, -6])\nsaucer();\n\n// Coffee beans on saucer\ntranslate([20, 0, -2])\nrotate([0, 0, 30])\ncoffee_bean();\ntranslate([-15, 15, -2])\nrotate([0, 0, -45])\ncoffee_bean();\ntranslate([-15, -15, -2])\nrotate([0, 0, 60])\ncoffee_bean();",
    "renders": true
  },
  {
    "food_item": "latte",
    "openscad_code": "// Realistic Latte - Medium Complexity\n// Dimensions: 80mm diameter, 70mm height\n\n// Colors\n$cup_color = [0.95, 0.95, 0.92];\n$coffee_color = [0.3, 0.15, 0.08];\n$milk_foam_color = [0.98, 0.97, 0.94];\n$handle_color = [0.9, 0.9, 0.88];\n\n// Main latte module\nmodule latte() {\n    // Coffee cup\n    difference() {\n        // Outer cup\n        cylinder(h = 60, r1 = 40, r2 = 35, $fn = 64);\n        \n        // Inner cavity\n        translate([0, 0, 5])\n            cylinder(h = 57, r1 = 37, r2 = 32, $fn = 64);\n    }\n    \n    // Cup handle\n    translate([40, 0, 30])\n        rotate([0, 90, 0])\n            difference() {\n                // Handle shape\n                rotate_extrude(angle = 180, $fn = 32)\n                    translate([25, 0, 0])\n                        circle(r = 6);\n                \n                // Handle hole\n                rotate_extrude(angle = 180, $fn = 32)\n                    translate([25, 0, 0])\n                        circle(r = 4);\n            }\n    \n    // Coffee liquid\n    color($coffee_color)\n        translate([0, 0, 5])\n            cylinder(h = 25, r1 = 36.5, r2 = 31.5, $fn = 64);\n    \n    // Milk foam layer\n    color($milk_foam_color)\n        translate([0, 0, 30])\n            cylinder(h = 8, r1 = 36, r2 = 31, $fn = 64);\n    \n    // Latte art - heart shape\n    color($milk_foam_color)\n        translate([0, 0, 38.5])\n            scale([1, 0.8, 1])\n                for(i = [0:5:360]) {\n                    rotate([0, 0, i])\n                        translate([10 - i/36, 0, 0])\n                            sphere(r = 2.5 - i/120, $fn = 16);\n                }\n    \n    // Surface foam bubbles - small spheres\n    for(i = [1:20]) {\n        angle = i * 137.5;\n        radius = 8 + i * 1.2;\n        color($milk_foam_color)\n            translate([\n                cos(angle) * radius * 0.4,\n                sin(angle) * radius * 0.4,\n                38.5\n            ])\n                sphere(r = 0.5 + (i % 3) * 0.3, $fn = 8);\n    }\n    \n    // Cup rim detail\n    color($cup_color)\n        translate([0, 0, 60])\n            cylinder(h = 3, r1 = 40.5, r2 = 39, $fn = 64);\n    \n    // Saucer\n    color($cup_color)\n        translate([0, 0, -2])\n            difference() {\n                cylinder(h = 4, r1 = 55, r2 = 54, $fn = 64);\n                cylinder(h = 4.1, r1 = 30, r2 = 29, $fn = 64);\n            }\n}\n\n// Apply colors and render\ncolor($cup_color)\nlatte();",
    "renders": true
  },
  {
    "food_item": "cappuccino",
    "openscad_code": "// Cappuccino 3D Model\n// Realistic style, medium complexity\n\n// Main dimensions\ncup_height = 60;\ncup_diameter = 80;\ncup_thickness = 3;\nsaucer_diameter = 110;\nsaucer_height = 5;\nhandle_width = 35;\nhandle_height = 35;\nhandle_thickness = 8;\n\n// Coffee and foam dimensions\ncoffee_height = 25;\nfoam_height = 12;\nfoam_detail_height = 3;\n\n// Colors\ncup_color = [0.95, 0.95, 0.93];\ncoffee_color = [0.36, 0.25, 0.20];\nfoam_color = [0.98, 0.97, 0.94];\nsaucer_color = [0.95, 0.95, 0.93];\n\n// Cup body\nmodule cup_body() {\n    difference() {\n        // Outer cup\n        cylinder(h=cup_height, d=cup_diameter, $fn=60);\n        \n        // Inner cavity\n        translate([0, 0, cup_thickness])\n            cylinder(h=cup_height - cup_thickness + 1, d=cup_diameter - 2*cup_thickness, $fn=60);\n        \n        // Bottom rounding\n        translate([0, 0, cup_thickness])\n            cylinder(h=2, d=cup_diameter - 2*cup_thickness - 5, $fn=60);\n    }\n}\n\n// Handle\nmodule handle() {\n    difference() {\n        // Main handle shape\n        translate([cup_diameter/2 - 2, 0, cup_height/2 - 5])\n            rotate([0, 90, 0])\n                cylinder(h=handle_width, d=handle_thickness, $fn=20);\n        \n        // Inner cutout\n        translate([cup_diameter/2 + 2, 0, cup_height/2 - 5])\n            rotate([0, 90, 0])\n                cylinder(h=handle_width - 4, d=handle_thickness - 4, $fn=20);\n    }\n}\n\n// Saucer\nmodule saucer() {\n    difference() {\n        // Main saucer\n        cylinder(h=saucer_height, d=saucer_diameter, $fn=60);\n        \n        // Center depression\n        translate([0, 0, saucer_height - 2])\n            cylinder(h=3, d=cup_diameter + 10, $fn=60);\n        \n        // Bottom cutout for printing\n        translate([0, 0, -1])\n            cylinder(h=2, d=saucer_diameter - 10, $fn=60);\n    }\n}\n\n// Coffee liquid\nmodule coffee() {\n    color(coffee_color)\n        translate([0, 0, cup_thickness])\n            cylinder(h=coffee_height, d=cup_diameter - 2*cup_thickness - 2, $fn=60);\n}\n\n// Foam layer\nmodule foam() {\n    color(foam_color)\n        difference() {\n            // Base foam\n            translate([0, 0, cup_thickness + coffee_height])\n                cylinder(h=foam_height, d=cup_diameter - 2*cup_thickness - 2, $fn=60);\n            \n            // Foam texture - bubbles\n            for(i = [1:15]) {\n                rotate([0, 0, i * 24])\n                    translate([cup_diameter/3 * sin(i*3), cup_diameter/3 * cos(i*3), cup_thickness + coffee_height + foam_height - foam_detail_height])\n                        sphere(d=foam_detail_height + 2, $fn=12);\n            }\n        }\n}\n\n// Latte art pattern\nmodule latte_art() {\n    color(foam_color)\n    translate([0, 0, cup_thickness + coffee_height + foam_height - 1])\n    linear_extrude(height=1) {\n        // Simple heart pattern\n        union() {\n            // Left lobe\n            translate([-8, 5, 0])\n                circle(d=12, $fn=20);\n            // Right lobe\n            translate([8, 5, 0])\n                circle(d=12, $fn=20);\n            // Point\n            translate([0, -5, 0])\n                circle(d=8, $fn=20);\n        }\n    }\n}\n\n// Main assembly\ncolor(cup_color) {\n    cup_body();\n    handle();\n}\n\ncolor(saucer_color)\n    translate([0, 0, -saucer_height])\n        saucer();\n\ncoffee();\nfoam();\nlatte_art();",
    "renders": true
  },
  {
    "food_item": "americano",
    "openscad_code": "$fn = 64;\n\n// Americano: espresso + hot water in a typical 150 ml glass cup\n// Overall height ≈ 80 mm, top diameter ≈ 70 mm\n\n// Cup body\nmodule cup() {\n    difference() {\n        union() {\n            // Main cup cylinder\n            cylinder(h = 70, d1 = 60, d2 = 55);\n            // Thick base\n            translate([0, 0, -5])\n                cylinder(h = 10, d = 55);\n        }\n        // Hollow inside\n        translate([0, 0, -5])\n            cylinder(h = 75, d1 = 50, d2 = 45);\n    }\n}\n\n// Handle\nmodule handle() {\n    translate([30, 0, 30]) rotate([90, 0, 0])\n        difference() {\n            // Outer handle\n            rotate_extrude(angle = 120, convexity = 10)\n                translate([20, 0, 0]) circle(d = 10);\n            // Inner cutout\n            rotate_extrude(angle = 120, convexity = 10)\n                translate([20, 0, 0]) circle(d = 6);\n        }\n}\n\n// Espresso layer (bottom 1/4)\nmodule espresso_layer() {\n    color(\"#2e1a0f\")\n    translate([0, 0, 0])\n        cylinder(h = 15, d = 45);\n}\n\n// Hot water layer (top 3/4)\nmodule water_layer() {\n    color(\"#634832\")\n    translate([0, 0, 15])\n        cylinder(h = 45, d = 45);\n}\n\n// Crema foam (thin top layer)\nmodule crema() {\n    color(\"#c8a27c\")\n    translate([0, 0, 60])\n        cylinder(h = 2, d = 45);\n}\n\n// Coffee beans (decorative around saucer)\nmodule bean() {\n    scale([1, 0.6, 0.4]) sphere(d = 8);\n    translate([0, 2, 0]) scale([1, 0.4, 0.2]) sphere(d = 8);\n}\n\n// Saucer\nmodule saucer() {\n    color(\"#ffffff\")\n    difference() {\n        union() {\n            // Main plate\n            cylinder(h = 4, d = 90);\n            // Small central recess\n            translate([0, 0, 4])\n                cylinder(h = 2, d = 55);\n        }\n        // Remove underside\n        translate([0, 0, -1])\n            cylinder(h = 6, d = 86);\n    }\n}\n\n// Place three beans on saucer\nmodule beans_on_saucer() {\n    for (angle = [0, 120, 240]) {\n        color(\"#3b2314\")\n        translate([0, 0, 6])\n            rotate([0, 0, angle])\n                translate([25, 0, 0])\n                    rotate([0, 0, 45])\n                        bean();\n    }\n}\n\n// Main assembly\ntranslate([0, 0, 5]) {\n    saucer();\n    beans_on_saucer();\n}\n\ntranslate([0, 0, 10]) {\n    color(\"#ffffff\") cup();\n    color(\"#ffffff\") handle();\n    espresso_layer();\n    water_layer();\n    crema();\n}",
    "renders": true
  },
  {
    "food_item": "macchiato",
    "openscad_code": "// Macchiato - espresso \"marked\" with steamed milk foam\n// Overall height ~70mm, suitable for FDM printing without supports\n\n$fn = 48;  // Smooth curves for realistic appearance\n\n// Cup dimensions\ncup_height = 45;\ncup_outer = 50;\ncup_inner = 44;\ncup_wall = (cup_outer - cup_inner)/2;\n\n// Saucer dimensions\nsaucer_d = 70;\nsaucer_h = 4;\n\n// Espresso volume\nespresso_level = 15;\n\n// Foam cap\nfoam_height = 10;\n\n// Handle\nhandle_gap = 12;\nhandle_width = 8;\nhandle_thickness = 6;\n\nmodule cup() {\n    // Main cup body\n    difference() {\n        cylinder(h=cup_height, d=cup_outer, $fn=64);\n        translate([0,0,cup_height-cup_wall])\n            cylinder(h=cup_height, d=cup_inner, $fn=64);\n    }\n    \n    // Base\n    translate([0,0,-0.1])\n        cylinder(h=3, d1=cup_outer, d2=cup_outer+2, $fn=64);\n    \n    // Handle\n    translate([cup_outer/2,0,cup_height/2])\n        rotate([0,90,0])\n            difference() {\n                // Outer shape\n                rotate_extrude(angle=180, $fn=32)\n                    translate([handle_gap + handle_width/2, 0, 0])\n                        circle(r=handle_width/2, $fn=32);\n                \n                // Inner gap\n                rotate_extrude(angle=180, $fn=32)\n                    translate([handle_gap, 0, 0])\n                        circle(r=handle_width/2 - handle_thickness, $fn=32);\n            }\n}\n\nmodule espresso() {\n    // Dark espresso liquid\n    color([0.2, 0.1, 0.05])  // Very dark brown\n        cylinder(h=espresso_level, d=cup_inner - 2, $fn=64);\n}\n\nmodule milk_foam() {\n    // Layered foam with slight dome\n    color([0.95, 0.92, 0.88])\n    for(i=[0:3]) {\n        translate([0,0,espresso_level + i*2])\n            scale([1 - i*0.05, 1 - i*0.05, 1])\n                cylinder(h=2, d=cup_inner - 1, $fn=64);\n    }\n    \n    // Top dome\n    translate([0,0,espresso_level + foam_height - 4])\n        sphere(d=cup_inner - 3, $fn=64);\n}\n\nmodule saucer() {\n    color([0.9, 0.9, 0.9])  // White ceramic\n    difference() {\n        // Main saucer\n        cylinder(h=saucer_h, d=saucer_d, $fn=64);\n        \n        // Indent for cup\n        translate([0,0,-0.1])\n            cylinder(h=saucer_h + 0.2, d=cup_outer + 2, $fn=64);\n        \n        // Ring detail\n        translate([0,0,saucer_h/2])\n            cylinder(h=0.5, d1=saucer_d*0.7, d2=saucer_d*0.8, $fn=64);\n    }\n}\n\nmodule macchiato() {\n    // Assemble the drink\n    translate([0,0,saucer_h])\n        cup();\n    \n    translate([0,0,saucer_h + cup_wall])\n        espresso();\n    \n    translate([0,0,saucer_h + cup_wall])\n        milk_foam();\n    \n    saucer();\n}\n\n// Render the complete macchiato\nmacchiato();",
    "renders": true
  },
  {
    "food_item": "mocha",
    "openscad_code": "// Mocha Food Item - Realistic Style, Medium Complexity\n// Size: 80mm tall, 65mm diameter cup\n\n$fn = 50; // Smooth curves for 3D printing\n\n// Main color definitions\n$color_cup = \"LightGoldenrod4\";\n$color_coffee = \"#3C2414\";\n$color_cream = \"#F5F5DC\";\n$color_chocolate = \"#3B2414\";\n\n// Cup module with handle\nmodule cup() {\n    // Main cup body\n    difference() {\n        cylinder(h = 50, d1 = 65, d2 = 60);\n        translate([0, 0, 2])\n            cylinder(h = 48, d1 = 61, d2 = 56);\n    }\n    \n    // Cup handle\n    translate([32.5, 0, 25])\n        rotate([90, 0, 0])\n            difference() {\n                cylinder(h = 25, d = 12);\n                translate([0, 0, 1])\n                    cylinder(h = 24, d = 8);\n            }\n}\n\n// Coffee liquid with slight foam layer\nmodule coffee() {\n    color($color_coffee)\n    translate([0, 0, 2])\n        cylinder(h = 30, d1 = 61, d2 = 56);\n    \n    // Thin foam layer\n    color($color_cream)\n    translate([0, 0, 32])\n        cylinder(h = 2, d1 = 61, d2 = 56);\n}\n\n// Whipped cream dome\nmodule whipped_cream() {\n    color($color_cream)\n    difference() {\n        translate([0, 0, 34])\n            scale([1, 1, 0.7])\n                sphere(d = 55);\n        \n        // Flatten bottom\n        translate([0, 0, 20])\n            cube([100, 100, 30], center = true);\n    }\n}\n\n// Chocolate drizzle pattern\nmodule chocolate_drizzle() {\n    color($color_chocolate)\n    for(i = [0:30:359]) {\n        rotate([0, 0, i])\n            translate([0, 18, 45])\n                rotate([90, 0, 0])\n                    cylinder(h = 15, d = 2);\n    }\n}\n\n// Chocolate shavings on top\nmodule chocolate_shavings() {\n    color($color_chocolate)\n    for(i = [1:8]) {\n        rotate([0, 0, i * 45])\n            translate([i * 3, 0, 50])\n                rotate([90, 0, 0])\n                    scale([1, 0.3, 0.1])\n                        sphere(d = 6);\n    }\n}\n\n// Cup saucer\nmodule saucer() {\n    color($color_cup)\n    translate([0, 0, -3])\n        cylinder(h = 3, d1 = 85, d2 = 80);\n}\n\n// Assemble the mocha\nunion() {\n    color($color_cup) cup();\n    coffee();\n    whipped_cream();\n    chocolate_drizzle();\n    chocolate_shavings();\n    saucer();\n}",
    "renders": true
  },
  {
    "food_item": "frappe",
    "openscad_code": "// Frappe - 3D printable realistic style\n// Clear cup with whipped cream, straw and coffee layers\n\n$fn = 32;\ncup_height = 70;\ncup_diameter = 45;\nwall_thickness = 2;\ncream_height = 15;\nstraw_diameter = 6;\nstraw_height = 90;\n\n// Main cup\nmodule cup() {\n    difference() {\n        // Outer cup\n        color([0.95, 0.95, 0.9])\n        cylinder(h = cup_height, d = cup_diameter);\n        \n        // Inner cavity\n        translate([0, 0, -1])\n        cylinder(h = cup_height + 2, d = cup_diameter - wall_thickness * 2);\n    }\n}\n\n// Coffee layers with foam texture\nmodule coffee_layers() {\n    // Bottom coffee layer\n    translate([0, 0, wall_thickness])\n    color([0.4, 0.2, 0.1])\n    cylinder(h = cup_height * 0.4, d = cup_diameter - wall_thickness * 2 - 2);\n    \n    // Middle milk layer\n    translate([0, 0, wall_thickness + cup_height * 0.4])\n    color([0.7, 0.5, 0.3])\n    cylinder(h = cup_height * 0.3, d = cup_diameter - wall_thickness * 2 - 2);\n    \n    // Top coffee layer\n    translate([0, 0, wall_thickness + cup_height * 0.7])\n    color([0.5, 0.25, 0.15])\n    cylinder(h = cup_height * 0.2, d = cup_diameter - wall_thickness * 2 - 2);\n}\n\n// Whipped cream top\nmodule whipped_cream() {\n    color([0.98, 0.95, 0.85])\n    for(i = [0:35]) {\n        rotate([0, 0, i * 10])\n        translate([cup_diameter/6, 0, cup_height])\n        scale([1, 1, 0.8])\n        sphere(d = 10 + sin(i*3)*2);\n    }\n}\n\n// Straw with stripes\nmodule straw() {\n    color([0.9, 0.1, 0.2])\n    translate([cup_diameter/3, 0, 0])\n    rotate([0, -10, 0])\n    cylinder(h = straw_height, d = straw_diameter);\n    \n    // Straw stripes\n    for(i = [1:8]) {\n        color([1, 1, 1])\n        translate([cup_diameter/3, 0, i * 10])\n        rotate([0, -10, 0])\n        cylinder(h = 5, d = straw_diameter + 0.1);\n    }\n}\n\n// Ice texture on cup sides\nmodule condensation() {\n    for(i = [0:20]) {\n        angle = i * 18 + rand(i*3)*5;\n        height = rand(i*5) * cup_height;\n        size = 1 + rand(i*7);\n        \n        translate([\n            cos(angle) * (cup_diameter/2 + 0.5),\n            sin(angle) * (cup_diameter/2 + 0.5),\n            height\n        ])\n        color([0.9, 0.9, 1, 0.7])\n        sphere(d = size);\n    }\n}\n\n// Helper function for random variation\nfunction rand(seed) = (seed * 9301 + 49297) % 233280 / 233280;\n\n// Assembly\nunion() {\n    cup();\n    coffee_layers();\n    whipped_cream();\n    straw();\n    condensation();\n}",
    "renders": true
  },
  {
    "food_item": "smoothie",
    "openscad_code": "// Realistic Smoothie in a Glass Jar\n// Features: Glass jar with smoothie liquid, strawberry slices, and a straw\n\n// Overall dimensions: ~60mm height, 40mm diameter\n\nmodule smoothie_glass() {\n    // Glass jar body - hollow cylinder with rounded bottom\n    difference() {\n        union() {\n            // Outer cylinder\n            cylinder(h=50, r1=20, r2=18, $fn=64);\n            // Rounded bottom\n            translate([0, 0, -2])\n                sphere(d=40, $fn=64);\n        }\n        \n        // Hollow interior\n        translate([0, 0, -1])\n            cylinder(h=49, r1=18, r2=16, $fn=64);\n    }\n}\n\nmodule smoothie_liquid() {\n    // Main smoothie body - slightly curved surface\n    color(\"#ff6b9d\")  // Pink strawberry smoothie color\n    difference() {\n        union() {\n            // Main liquid volume\n            translate([0, 0, 0])\n                cylinder(h=40, r1=18, r2=16, $fn=64);\n            // Curved top surface\n            translate([0, 0, 40])\n                sphere(d=34, $fn=64);\n        }\n        \n        // Cut top flat\n        translate([0, 0, 42])\n            cube([50, 50, 10], center=true);\n    }\n}\n\nmodule strawberry_slice(pos=[0,0,0], angle=0) {\n    // Single strawberry slice floating on top\n    translate(pos)\n    rotate([0, 0, angle])\n    color(\"#ff1744\") {\n        // Main slice body\n        difference() {\n            cylinder(h=2, r=6, $fn=16);\n            // Seed indentations\n            for(i=[0:7]) {\n                rotate([0, 0, i*45])\n                    translate([3.5, 0, 0])\n                        sphere(d=1.2, $fn=8);\n            }\n        }\n        \n        // Seeds - small spheres\n        color(\"#ffff00\") {\n            for(i=[0:7]) {\n                rotate([0, 0, i*45+22.5])\n                    translate([3.5, 0, 1])\n                        sphere(d=0.8, $fn=4);\n            }\n        }\n    }\n}\n\nmodule smoothie_straw() {\n    // Drinking straw with stripes\n    color(\"#ffffff\") {\n        difference() {\n            // Main straw tube\n            translate([0, 0, 25])\n                cylinder(h=40, r=3, $fn=32);\n                \n            // Inner hole\n            translate([0, 0, 25])\n                cylinder(h=40, r=2.2, $fn=32);\n        }\n        \n        // Red stripes on straw\n        color(\"#ff0000\") {\n            for(i=[0:3]) {\n                translate([0, 0, 30+i*8])\n                    cylinder(h=4, r=3.1, $fn=32);\n            }\n        }\n    }\n}\n\nmodule smoothie_bubbles() {\n    // Small air bubbles in smoothie for texture\n    color(\"#ffffff\", 0.4) {\n        for(i=[0:15]) {\n            translate([\n                15*cos(i*137.5),\n                15*sin(i*137.5),\n                5+i*2.5\n            ]) sphere(d=1.5, $fn=8);\n        }\n    }\n}\n\n// Main assembly\ntranslate([0, 0, 0]) {\n    // Glass jar (transparent)\n    color([1, 1, 1, 0.3]) smoothie_glass();\n    \n    // Smoothie liquid\n    smoothie_liquid();\n    \n    // Floating strawberry slices\n    smoothie_slice([10, 5, 41], 0);\n    smoothie_slice([-8, -7, 41], 30);\n    smoothie_slice([5, -10, 41], 60);\n    \n    // Straw inserted at slight angle\n    rotate([5, 0, 15]) smoothie_straw();\n    \n    // Bubble texture\n    smoothie_bubbles();\n}",
    "renders": true
  },
  {
    "food_item": "shake",
    "openscad_code": "// Realistic Milkshake - Medium Complexity\n// Features: Glass cup, shake body, whipped cream swirl, cherry on top, chocolate drizzle\n\n// Color definitions\n$fn = 50;\n\n// Main module\nmodule milkshake() {\n    // Glass cup\n    translate([0, 0, 0])\n        glass();\n    \n    // Milkshake body\n    translate([0, 0, 15])\n        shake_body();\n    \n    // Whipped cream swirl\n    translate([0, 0, 72])\n        whipped_cream();\n    \n    // Cherry on top\n    translate([0, 0, 92])\n        cherry();\n    \n    // Chocolate drizzle\n    translate([0, 0, 80])\n        chocolate_drizzle();\n}\n\n// Glass cup with hollow interior\nmodule glass() {\n    color([0.9, 0.95, 1, 0.6])  // Clear glass color with transparency\n    difference() {\n        // Outer glass\n        cylinder(h = 60, r1 = 25, r2 = 22);\n        \n        // Inner hollow\n        translate([0, 0, 2])\n            cylinder(h = 58, r1 = 23, r2 = 20);\n    }\n    \n    // Glass base\n    translate([0, 0, -5])\n    color([0.9, 0.95, 1, 0.8])\n    cylinder(h = 5, r1 = 28, r2 = 25);\n}\n\n// Milkshake body with texture\nmodule shake_body() {\n    color([0.82, 0.55, 0.33])  // Chocolate shake color\n    union() {\n        // Main shake body\n        cylinder(h = 60, r1 = 22, r2 = 18);\n        \n        // Add texture lines\n        for (i = [0:15:360]) {\n            rotate([0, 0, i])\n            translate([19.5, 0, 0])\n            scale([0.3, 0.3, 1])\n            cylinder(h = 60, r = 1);\n        }\n    }\n}\n\n// Whipped cream swirl\nmodule whipped_cream() {\n    color([0.98, 0.98, 0.95])\n    union() {\n        // Base swirl\n        for (i = [0:30:360]) {\n            rotate([0, 0, i])\n            translate([5 * cos(i * 3), 5 * sin(i * 3), i * 0.15])\n            sphere(r = 6 - i * 0.01);\n        }\n        \n        // Top swirl\n        translate([0, 0, 8])\n        rotate([0, 0, 45])\n        for (i = [0:45:360]) {\n            rotate([0, 0, i])\n            translate([3, 0, 0])\n            sphere(r = 4);\n        }\n    }\n}\n\n// Cherry\nmodule cherry() {\n    color([0.8, 0.1, 0.1])  // Dark red cherry\n    union() {\n        // Cherry body\n        sphere(r = 4);\n        \n        // Stem\n        color([0.4, 0.3, 0.2])\n        translate([0, 0, 4])\n        rotate([20, 0, 30])\n        cylinder(h = 8, r1 = 0.5, r2 = 0.3);\n    }\n}\n\n// Chocolate drizzle\nmodule chocolate_drizzle() {\n    color([0.4, 0.2, 0.1])  // Dark chocolate\n    union() {\n        // Main drizzle lines\n        for (i = [0:60:360]) {\n            rotate([0, 0, i])\n            translate([10, 0, 0])\n            rotate([90, 0, 0])\n            cylinder(h = 15, r1 = 0.8, r2 = 0.3);\n        }\n        \n        // Side drips\n        for (i = [30:60:360]) {\n            rotate([0, 0, i])\n            translate([15, 0, -5])\n            rotate([90, 0, 0])\n            cylinder(h = 8, r1 = 0.6, r2 = 0.3);\n        }\n    }\n}\n\n// Render the complete milkshake\nmilkshake();",
    "renders": true
  },
  {
    "food_item": "nectar",
    "openscad_code": "// Nectar in a small cup with honey drop on top\n// Realistic style, medium complexity\n\n$fn = 50;\n\n// Main colors\ncolor_honey = [1, 0.8, 0.2];\ncolor_cup = [0.98, 0.95, 0.85];\ncolor_shadow = [0.7, 0.5, 0.1];\n\n// Cup module\nmodule nectar_cup() {\n    difference() {\n        // Outer cup\n        cylinder(h = 25, r1 = 18, r2 = 20, center = true);\n        \n        // Inner cavity\n        translate([0, 0, 2])\n            cylinder(h = 25, r1 = 15, r2 = 17, center = true);\n    }\n    \n    // Bottom\n    translate([0, 0, -12.5])\n        cylinder(h = 2, r = 18, center = false);\n    \n    // Rim lip\n    translate([0, 0, 12.5])\n        cylinder(h = 3, r1 = 20, r2 = 22, center = false);\n}\n\n// Honey surface with slight wobble\nmodule honey_surface() {\n    difference() {\n        // Main honey fill\n        translate([0, 0, 2])\n            cylinder(h = 8, r1 = 14.5, r2 = 16.5, center = true);\n        \n        // Create wavy surface pattern\n        for (i = [0:11]) {\n            rotate([0, 0, i * 30])\n                translate([8 + sin(i * 30) * 2, 0, 6])\n                    sphere(r = 2.5);\n        }\n    }\n}\n\n// Honey drop module\nmodule honey_drop() {\n    // Main drop body\n    translate([0, 0, 10])\n        sphere(r = 6);\n    \n    // Drop tail\n    translate([0, 0, 4])\n        scale([1, 1, 1.5])\n            sphere(r = 4);\n}\n\n// Surface bubbles\nmodule bubbles() {\n    for (i = [0:7]) {\n        angle = i * 45;\n        radius = 5 + sin(i) * 3;\n        \n        translate([cos(angle) * radius, sin(angle) * radius, 7.5])\n            sphere(r = 0.8 + sin(i * 20) * 0.3);\n    }\n}\n\n// Honey texture lines\nmodule texture_lines() {\n    for (i = [0:8]) {\n        rotate([0, 0, i * 22.5])\n            translate([0, 0, 6 + sin(i * 2) * 0.5])\n                scale([1, 0.2, 0.1])\n                    cylinder(h = 25, r = 14, center = true);\n    }\n}\n\n// Assembly\nunion() {\n    // Cup\n    color(color_cup)\n        nectar_cup();\n    \n    // Honey\n    color(color_honey) {\n        honey_surface();\n        honey_drop();\n        \n        // Texture\n        difference() {\n            translate([0, 0, 6])\n                cylinder(h = 2, r1 = 15, r2 = 17, center = true);\n            texture_lines();\n        }\n    }\n    \n    // Bubbles\n    color([1, 0.9, 0.3])\n        bubbles();\n    \n    // Subtle shadow under drop\n    color(color_shadow)\n        translate([0, 0, 9.8])\n            scale([1, 1, 0.1])\n                sphere(r = 6);\n}",
    "renders": true
  },
  {
    "food_item": "punch",
    "openscad_code": "// OpenSCAD code for a realistic 3D printable fruit punch drink (≈70 mm tall)\n// A clear glass filled with red punch, ice cubes, orange & lime slices, mint leaves\n// No overhangs greater than 45°, all walls ≥1.2 mm\n\n$fn = 36;  // smooth curves without overkill\n\n// ---- Glass ----\nmodule glass() {\n    // outer cylinder\n    difference() {\n        cylinder(h = 65, d1 = 45, d2 = 55, center = false);  // slight flare\n        // hollow inside\n        translate([0,0,2])   // 2 mm base\n            cylinder(h = 65, d1 = 42, d2 = 52, center = false);\n    }\n}\n\n// ---- Red punch liquid (level 50 mm) ----\nmodule punch() {\n    color(\"crimson\") {\n        translate([0,0,2])  // sits on base\n            cylinder(h = 50, d1 = 42, d2 = 52, center = false);\n    }\n}\n\n// ---- Simple rounded ice cubes ----\nmodule ice_cube() {\n    scale([1,1,0.7])  // flatter cube\n        sphere(r = 6);\n}\n\n// ---- Orange slice ----\nmodule orange_slice() {\n    color(\"orange\") {\n        difference() {\n            cylinder(h = 2, r = 12, center = true);\n            // wedge removed for realistic slice\n            rotate([0,0,15]) cube([30,30,4], center = true);\n        }\n        // segment lines\n        for(i=[-30:15:30]) {\n            rotate([0,0,i])\n                translate([4,0,0]) cube([8,0.5,2.2], center = true);\n        }\n    }\n}\n\n// ---- Lime slice ----\nmodule lime_slice() {\n    color(\"limegreen\") {\n        difference() {\n            cylinder(h = 2, r = 10, center = true);\n            rotate([0,0,15]) cube([25,25,4], center = true);\n        }\n    }\n}\n\n// ---- Mint leaf ----\nmodule mint_leaf() {\n    color(\"darkgreen\") {\n        scale([1,1.8,0.2]) sphere(r = 5);\n    }\n}\n\n// ---- Assembly ----\nglass();\npunch();\n\n// floating ice cubes\ntranslate([ 8,  5, 40]) ice_cube();\ntranslate([-7, -4, 42]) ice_cube();\ntranslate([ 0,  9, 44]) ice_cube();\n\n// garnish on rim\ntranslate([0, 28, 60]) rotate([0,0,90]) orange_slice();\ntranslate([0, -28, 60]) rotate([0,0,-90]) lime_slice();\n\n// mint leaves on top\ntranslate([10, 20, 58]) rotate([0,0,30]) mint_leaf();\ntranslate([-12, 18, 57]) rotate([0,0,-20]) mint_leaf();",
    "renders": true
  },
  {
    "food_item": "lemonade",
    "openscad_code": "// Realistic lemonade in a glass with ice cubes and lemon slice\n// Dimensions: ~80mm tall glass with 50mm diameter\n\n$fn = 32;\n\n// Main colors\nglass_color = [0.9, 0.95, 1, 0.3];\nlemonade_color = [1, 0.9, 0.3, 0.7];\nice_color = [0.95, 0.98, 1, 0.6];\nlemon_color = [1, 0.8, 0];\nrind_color = [0.9, 0.7, 0];\n\n// Glass parameters\nglass_height = 80;\nglass_diameter = 50;\nglass_thickness = 3;\nbase_thickness = 5;\n\n// Lemonade parameters\nlemonade_height = 60;\n\n// Ice cube parameters\nice_size = 8;\nice_count = 5;\n\n// Lemon slice parameters\nlemon_diameter = 30;\nlemon_thickness = 4;\nslice_thickness = 2;\n\n// Glass with lemonade\nmodule glass_with_lemonade() {\n    difference() {\n        // Outer glass\n        color(glass_color)\n        cylinder(h=glass_height, d=glass_diameter, $fn=64);\n        \n        // Hollow inside\n        translate([0, 0, base_thickness])\n        cylinder(h=glass_height-base_thickness+1, d=glass_diameter-glass_thickness*2, $fn=64);\n    }\n    \n    // Base\n    translate([0, 0, 0])\n    color(glass_color)\n    cylinder(h=base_thickness, d=glass_diameter+2, $fn=64);\n    \n    // Lemonade inside\n    translate([0, 0, base_thickness])\n    color(lemonade_color)\n    cylinder(h=lemonade_height-base_thickness, d=glass_diameter-glass_thickness*2-1, $fn=64);\n}\n\n// Ice cube with rounded edges\nmodule ice_cube(size) {\n    color(ice_color) {\n        // Main cube\n        cube([size*0.9, size*0.9, size*0.9], center=true);\n        \n        // Rounded corners using spheres\n        for(x=[-1, 1])\n        for(y=[-1, 1])\n        for(z=[-1, 1]) {\n            translate([x*size*0.45, y*size*0.45, z*size*0.45])\n            sphere(r=size*0.35);\n        }\n    }\n}\n\n// Generate random ice cubes\nmodule floating_ice() {\n    for(i=[0:ice_count-1]) {\n        angle = i * 137.5; // Golden angle for natural distribution\n        radius = 15 + sin(i*2) * 10;\n        \n        translate([\n            cos(angle) * radius,\n            sin(angle) * radius,\n            lemonade_height - 10 - i*3\n        ]) {\n            rotate([rand(i*10), rand(i*20), rand(i*30)])\n            ice_cube(ice_size + rand(i*5)*2);\n        }\n    }\n}\n\n// Lemon slice with segments and texture\nmodule lemon_slice() {\n    color(lemon_color) {\n        // Main slice\n        cylinder(h=slice_thickness, d=lemon_diameter);\n        \n        // Rind\n        color(rind_color)\n        difference() {\n            cylinder(h=slice_thickness, d=lemon_diameter+1);\n            cylinder(h=slice_thickness+1, d=lemon_diameter-2);\n        }\n        \n        // Segments\n        for(i=[0:5]) {\n            rotate([0, 0, i*60])\n            translate([0, 0, -0.1])\n            linear_extrude(height=slice_thickness+0.2)\n            polygon(points=[\n                [0, 0],\n                [lemon_diameter/2-4, -2],\n                [lemon_diameter/2-4, 2]\n            ]);\n        }\n        \n        // Center\n        translate([0, 0, -0.1])\n        cylinder(h=slice_thickness+0.2, d=4);\n    }\n}\n\n// Helper for random values\nfunction rand(seed) = (seed * 9301 + 49297) % 233280 / 233280;\n\n// Main assembly\nglass_with_lemonade();\nfloating_ice();\n\n// Lemon slice on rim\ntranslate([glass_diameter/2-5, 0, glass_height-10])\nrotate([0, 90, 0])\nlemon_slice();",
    "renders": true
  },
  {
    "food_item": "limoncello",
    "openscad_code": "// Limoncello Bottle with Realistic Details\n// Medium complexity food model - 3D printable\n\n// Main bottle body\nmodule bottle_body() {\n    color([0.9, 0.9, 0.7])  // Translucent yellow-green glass\n    difference() {\n        // Main cylindrical body\n        cylinder(h=65, d1=30, d2=32, $fn=32);\n        \n        // Hollow interior\n        translate([0, 0, 2])\n            cylinder(h=61, d1=26, d2=28, $fn=32);\n    }\n}\n\n// Bottle neck\nmodule bottle_neck() {\n    color([0.85, 0.85, 0.65])\n    union() {\n        // Neck cylinder\n        cylinder(h=15, d1=22, d2=18, $fn=32);\n        \n        // Rim at top\n        translate([0, 0, 14])\n            cylinder(h=2, d1=20, d2=20, $fn=32);\n    }\n}\n\n// Cork stopper\nmodule cork_stopper() {\n    color([0.7, 0.5, 0.3])  // Cork color\n    difference() {\n        // Main cork\n        cylinder(h=12, d=16, $fn=16);\n        \n        // Taper top\n        translate([0, 0, 10])\n            cylinder(h=3, d1=16, d2=14, $fn=16);\n    }\n}\n\n// Liquid inside (limoncello)\nmodule limoncello_liquid() {\n    color([0.9, 0.85, 0.1, 0.8])  // Bright yellow liquid\n    translate([0, 0, 2])\n        cylinder(h=60, d1=26, d2=28, $fn=32);\n}\n\n// Bottle label\nmodule bottle_label() {\n    color([0.95, 0.9, 0.8])  // Cream label\n    difference() {\n        // Main label\n        translate([0, -16, 25])\n            cube([40, 0.5, 30], center=true);\n        \n        // Rounded top\n        translate([0, -16.2, 40])\n            cylinder(h=1, d=35, $fn=32);\n        \n        // Rounded bottom\n        translate([0, -16.2, 10])\n            cylinder(h=1, d=35, $fn=32);\n    }\n}\n\n// Lemon wedge garnish\nmodule lemon_wedge() {\n    color([0.9, 0.8, 0.1])  // Lemon yellow\n    difference() {\n        // Main wedge\n        translate([0, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=8, d=12, $fn=6);\n        \n        // Center cut\n        translate([0, 0, -1])\n            rotate([0, 90, 0])\n                cylinder(h=10, d=4, $fn=6);\n        \n        // Segment cuts\n        for(i=[0:2]) {\n            rotate([0, 0, i*120])\n                translate([3, 0, 0])\n                    rotate([0, 90, 0])\n                        cube([8, 0.5, 8], center=true);\n        }\n    }\n    \n    // Lemon peel texture\n    color([0.8, 0.7, 0.05])\n    for(i=[0:5]) {\n        rotate([0, 0, i*60])\n            translate([5.8, 0, 0])\n                cylinder(h=0.2, d=1, $fn=8);\n    }\n}\n\n// Assemble the complete limoncello bottle\nunion() {\n    // Bottle assembly\n    translate([0, 0, 0])\n        bottle_body();\n    \n    translate([0, 0, 65])\n        bottle_neck();\n    \n    translate([0, 0, 80])\n        cork_stopper();\n    \n    // Liquid inside\n    limoncello_liquid();\n    \n    // Label on front\n    bottle_label();\n    \n    // Lemon wedge on side\n    translate([20, 0, 70])\n        rotate([90, 0, 0])\n            scale([0.8, 0.8, 0.8])\n                lemon_wedge();\n}",
    "renders": true
  },
  {
    "food_item": "cola",
    "openscad_code": "// Realistic Cola Can - Medium Complexity\n// 3D printable model with proper wall thickness and no overhangs\n\n$fn = 32;  // Smooth curves for printing\n\n// Main colors\ncan_color = [0.9, 0.1, 0.05, 1];      // Classic cola red\ntop_color = [0.96, 0.96, 0.96, 1];    // Silver top\nlabel_color = [1, 1, 1, 1];           // White label\n\n// Overall dimensions (330ml can scale)\ncan_height = 115;\ncan_radius = 32;\nwall_thickness = 1.5;\n\n// Can body module\nmodule can_body() {\n    difference() {\n        // Outer cylinder\n        cylinder(h=can_height, r=can_radius, center=false);\n        \n        // Inner hollow space\n        translate([0, 0, wall_thickness])\n            cylinder(h=can_height-2*wall_thickness, r=can_radius-wall_thickness, center=false);\n        \n        // Top opening\n        translate([0, 0, can_height-wall_thickness])\n            cylinder(h=wall_thickness+1, r=can_radius-10, center=false);\n    }\n}\n\n// Curved top module\nmodule can_top() {\n    // Top dome\n    translate([0, 0, can_height-wall_thickness])\n        scale([1, 1, 0.3])\n            sphere(r=can_radius);\n    \n    // Opening lip\n    translate([0, 0, can_height-wall_thickness+2])\n        cylinder(h=3, r1=can_radius-10, r2=can_radius-8, center=false);\n}\n\n// Label texture pattern\nmodule label_texture() {\n    for(i=[0:5:can_height-20]) {\n        // Horizontal ridges\n        translate([0, 0, i+15])\n            difference() {\n                cylinder(h=0.5, r=can_radius+0.2, center=false);\n                cylinder(h=0.5, r=can_radius, center=false);\n            }\n    }\n}\n\n// Cola logo area\nmodule cola_logo() {\n    // Main white label area\n    translate([0, can_radius, can_height/2-10])\n        rotate([90, 0, 0])\n            cube([can_radius*1.8, 20, 0.5], center=true);\n    \n    // Cola text (simplified)\n    translate([0, can_radius+0.5, can_height/2])\n        rotate([90, 0, 0])\n            color(can_color)\n                cube([30, 8, 0.3], center=true);\n}\n\n// Bottom ridge pattern\nmodule bottom_ridges() {\n    for(i=[0:30:359]) {\n        rotate([0, 0, i]) {\n            translate([can_radius-3, 0, 0])\n                cube([6, 1, 5], center=true);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    color(can_color) {\n        // Main can body\n        can_body();\n        \n        // Curved top\n        can_top();\n        \n        // Bottom base\n        translate([0, 0, -0.5])\n            cylinder(h=5, r=can_radius, center=false);\n    }\n    \n    // Label area\n    color(label_color) {\n        cola_logo();\n    }\n    \n    // Surface details\n    color(can_color) {\n        label_texture();\n    }\n    \n    // Bottom details\n    color(top_color) {\n        translate([0, 0, 0])\n            bottom_ridges();\n    }\n}",
    "renders": true
  },
  {
    "food_item": "rootbeer",
    "openscad_code": "// Rootbeer Float - Realistic Style\n// A classic rootbeer float with foam, glass details, and straw\n\n// Main module for the entire rootbeer float\nmodule rootbeer_float() {\n    // Glass\n    color([0.9, 0.95, 1, 0.3]) {\n        difference() {\n            // Main glass body\n            cylinder(h=80, r1=22, r2=20, $fn=64);\n            \n            // Hollow out the inside\n            translate([0, 0, -1])\n                cylinder(h=82, r1=20, r2=18, $fn=64);\n            \n            // Create base\n            translate([0, 0, -1])\n                cylinder(h=2, r1=22, r2=22, $fn=64);\n        }\n    }\n    \n    // Rootbeer liquid\n    color([0.4, 0.2, 0.1]) {\n        translate([0, 0, 2])\n            cylinder(h=50, r1=19.5, r2=17.5, $fn=64);\n    }\n    \n    // Ice cream scoops\n    color([0.98, 0.95, 0.85]) {\n        // Main scoop\n        translate([0, 0, 52])\n            sphere(r=18, $fn=32);\n        \n        // Additional scoops for realistic pile\n        translate([-8, 5, 65])\n            scale([0.8, 0.8, 0.8])\n                sphere(r=15, $fn=32);\n        translate([7, -4, 68])\n            scale([0.7, 0.7, 0.7])\n                sphere(r=12, $fn=32);\n    }\n    \n    // Foam bubbles\n    for(i = [0:20]) {\n        color([0.95, 0.93, 0.9, 0.7]) {\n            translate([\n                sin(i*137.5)*15 + rand(i)*5,\n                cos(i*137.5)*15 + rand(i+1)*5,\n                70 + rand(i+2)*10\n            ])\n                sphere(r=1 + rand(i+3)*2, $fn=8);\n        }\n    }\n    \n    // Straw\n    color([0.9, 0.1, 0.1]) {\n        // Main straw\n        translate([8, 0, 85]) {\n            rotate([0, 15, 10])\n                cylinder(h=45, r1=2.5, r2=2.5, $fn=16);\n        }\n        \n        // Straw stripes\n        color([1, 1, 1]) {\n            for(i = [0:3]) {\n                translate([8 + sin(15)*i*8, 0, 85 + cos(15)*i*8]) {\n                    rotate([0, 15, 10])\n                        cylinder(h=4, r1=2.6, r2=2.6, $fn=16);\n                }\n            }\n        }\n    }\n    \n    // Condensation drops on glass\n    color([0.8, 0.9, 1, 0.5]) {\n        for(i = [0:15]) {\n            translate([\n                sin(i*45)*21,\n                cos(i*45)*21,\n                10 + rand(i)*60\n            ])\n                sphere(r=0.5, $fn=8);\n        }\n    }\n}\n\n// Helper function for pseudo-random values\nfunction rand(seed) = (seed * 9301 + 49297) % 233280 / 233280;\n\n// Render the rootbeer float\nrootbeer_float();",
    "renders": true
  },
  {
    "food_item": "gingerale",
    "openscad_code": "// Gingerale Can - Realistic Style, Medium Complexity\n// Overall dimensions: 65mm height x 33mm diameter\n\n// Main can body with slight taper\nmodule can_body() {\n    color([0.85, 0.85, 0.85]) {  // Aluminum silver\n        difference() {\n            // Main cylindrical body with slight top taper\n            cylinder(h=60, r1=16.5, r2=15.5, $fn=64);\n            \n            // Hollow interior\n            translate([0, 0, -1])\n                cylinder(h=62, r1=14.5, r2=13.5, $fn=64);\n        }\n    }\n}\n\n// Top lid with pull tab\nmodule can_top() {\n    color([0.9, 0.9, 0.9]) {\n        union() {\n            // Top rim\n            difference() {\n                cylinder(h=2, r=16.5, $fn=64);\n                translate([0, 0, -0.5])\n                    cylinder(h=3, r=14.5, $fn=64);\n            }\n            \n            // Pull tab\n            translate([8, 0, 2.5]) {\n                rotate([90, 0, 0])\n                    cylinder(h=8, r=1.5, $fn=16);\n                translate([0, 4, 0])\n                    rotate([90, 0, 0])\n                        cylinder(h=6, r=1.5, $fn=16);\n                translate([0, 2, 0])\n                    cube([3, 4, 0.5], center=true);\n            }\n            \n            // Opening groove\n            translate([0, 0, 2])\n                rotate([0, 0, 45])\n                    cube([8, 0.5, 0.5], center=true);\n        }\n    }\n}\n\n// Bottom with concave shape\nmodule can_bottom() {\n    color([0.9, 0.9, 0.9]) {\n        difference() {\n            // Bottom dome\n            translate([0, 0, -2])\n                cylinder(h=3, r=16.5, $fn=64);\n            \n            // Interior dome\n            translate([0, 0, -2.5])\n                cylinder(h=3.5, r=15, $fn=64);\n        }\n    }\n}\n\n// Surface texture - small ridges\nmodule surface_texture() {\n    color([0.8, 0.8, 0.8]) {\n        for(i = [0:15]) {\n            rotate([0, 0, i * 24])\n                translate([16, 0, 5])\n                    cube([0.5, 0.2, 50]);\n        }\n    }\n}\n\n// Gingerale liquid inside (visible through opening)\nmodule liquid() {\n    color([0.95, 0.95, 0.6, 0.7]) {  // Pale yellow ginger color with transparency\n        translate([0, 0, 2.5])\n            cylinder(h=55, r=14, $fn=64);\n    }\n}\n\n// Carbonation bubbles on surface\nmodule bubbles() {\n    color([1, 1, 1, 0.6]) {\n        for(i = [0:20]) {\n            theta = i * 137.5;\n            r = 8 + sin(i * 3) * 4;\n            translate([r * cos(theta), r * sin(theta), 55 + sin(i * 2) * 2])\n                sphere(r=0.3 + sin(i) * 0.2, $fn=8);\n        }\n    }\n}\n\n// Brand label wrapped around can\nmodule label() {\n    color([0.9, 0.1, 0.1]) {  // Ginger red\n        difference() {\n            // Main label band\n            translate([0, 0, 25])\n                cylinder(h=20, r=16.6, $fn=64);\n            \n            // Inner cutout\n            translate([0, 0, 24])\n                cylinder(h=22, r=16.4, $fn=64);\n        }\n        \n        // Text area (simplified as rectangle)\n        color([1, 1, 1]) {\n            translate([16.5, -5, 35])\n                rotate([0, 90, 0])\n                    cube([10, 10, 0.1]);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    can_body();\n    translate([0, 0, 60]) can_top();\n    can_bottom();\n    surface_texture();\n    translate([0, 0, 0]) liquid();\n    bubbles();\n    label();\n}",
    "renders": true
  },
  {
    "food_item": "tonic",
    "openscad_code": "// Realistic Energy Tonic Bottle - Medium Complexity\n// Features textured cap, label, embossed details, and liquid level\n\n$fn = 36;\n\n// Main dimensions\nbottle_height = 85;\nbottle_diameter = 35;\ncap_height = 15;\ncap_diameter = 38;\nlabel_height = 30;\nliquid_level = 65;\n\n// Colors\ncolor_bottle = [0.1, 0.7, 0.9, 0.6];  // Translucent blue\ncolor_cap = [0.2, 0.2, 0.2];         // Dark gray\ncolor_label = [0.9, 0.9, 0.9];       // White\ncolor_text = [0.1, 0.1, 0.9];        // Blue\ncolor_liquid = [0.0, 0.8, 0.4, 0.8]; // Green tonic\n\nmodule textured_cap() {\n    difference() {\n        // Main cap cylinder\n        cylinder(h=cap_height, d=cap_diameter);\n        \n        // Grip ridges on sides\n        for(i = [0:30:359]) {\n            rotate([0, 0, i])\n                translate([cap_diameter/2 - 2, 0, 0])\n                    cube([2, 2, cap_height], center=true);\n        }\n        \n        // Top indentation\n        translate([0, 0, cap_height - 2])\n            cylinder(h=3, d=cap_diameter - 10);\n    }\n}\n\nmodule bottle_body() {\n    difference() {\n        // Main bottle shape\n        union() {\n            cylinder(h=bottle_height, d=bottle_diameter);\n            \n            // Neck\n            translate([0, 0, bottle_height])\n                cylinder(h=10, d1=bottle_diameter, d2=cap_diameter - 2);\n        }\n        \n        // Hollow interior\n        translate([0, 0, -1])\n            cylinder(h=bottle_height + 12, d=bottle_diameter - 4);\n    }\n}\n\nmodule embossed_text(text) {\n    // Simple embossed lettering\n    for(i = [0:len(text)-1]) {\n        translate([i*4 - len(text)*2, 0, 0.5])\n            cube([3, 0.5, 1]);\n    }\n}\n\nmodule label() {\n    difference() {\n        // Label background\n        color(color_label)\n        translate([0, 0, bottle_height/2 - 5])\n            cylinder(h=label_height, d=bottle_diameter + 0.5);\n        \n        // Label edges\n        translate([0, 0, bottle_height/2 - 5])\n            cylinder(h=label_height + 2, d=bottle_diameter + 0.2);\n        \n        // Text area\n        translate([0, 0, bottle_height/2 - 4])\n            cylinder(h=label_height - 2, d=bottle_diameter - 2);\n    }\n    \n    // Embossed tonic symbol\n    color(color_text)\n    translate([0, -bottle_diameter/2 - 0.3, bottle_height/2 + 2])\n        rotate([90, 0, 0])\n            embossed_text(\"ENERGY+\");\n}\n\nmodule liquid_fill() {\n    color(color_liquid)\n    translate([0, 0, 1])\n        cylinder(h=liquid_level - 2, d=bottle_diameter - 4);\n}\n\nmodule bubbles() {\n    // Carbonation bubbles\n    color([1, 1, 1, 0.4])\n    for(i = [0:5:liquid_level]) {\n        translate([\n            sin(i*5)*bottle_diameter/4,\n            cos(i*3)*bottle_diameter/4,\n            i\n        ])\n            sphere(d=1 + (i%3));\n    }\n}\n\n// Assemble the tonic bottle\nunion() {\n    // Bottle body\n    color(color_bottle)\n    bottle_body();\n    \n    // Liquid inside\n    liquid_fill();\n    \n    // Bubbles for effect\n    bubbles();\n    \n    // Label on bottle\n    label();\n    \n    // Cap on top\n    color(color_cap)\n    translate([0, 0, bottle_height + 10])\n        textured_cap();\n}",
    "renders": true
  },
  {
    "food_item": "seltzer",
    "openscad_code": "// Realistic seltzer can with pull-tab, condensation beads and base rim\n// Overall height ≈ 75 mm, diameter ≈ 45 mm, wall thickness 1 mm\n\n$fn = 40;\n\n// Colors\ncan_color  = [0.83,0.90,0.95]; // brushed aluminum\ntab_color  = [0.55,0.55,0.55]; // gun-metal pull tab\nwater_color= [0.85,0.92,0.98,0.6]; // clear water droplets\nrim_color  = [0.75,0.82,0.88]; // slightly darker rim\n\n// Main can body\nmodule can_body(h=70, d=45, wall=1){\n    difference(){\n        cylinder(h=h, d=d);\n        translate([0,0,wall]) cylinder(h=h, d=d-2*wall);\n    }\n}\n\n// Top dome for realistic can shape\nmodule top_dome(d=45){\n    translate([0,0,70])\n    scale([1,1,0.25])\n    sphere(d=d);\n}\n\n// Pull-tab assembly\nmodule pull_tab(){\n    color(tab_color)\n    translate([0, d/2-3, 71.5])\n    union(){\n        // tab ring\n        rotate([90,0,0])\n        torus(2, 0.6, $fn=20);\n        // tab plate\n        translate([-4,0,0])\n        cube([8,1.5,0.4]);\n    }\n}\n\n// Helper for torus (needed for ring)\nmodule torus(R,r){\n    rotate_extrude()\n    translate([R,0,0]) circle(r);\n}\n\n// Base rim\nmodule base_rim(d=45){\n    color(rim_color)\n    translate([0,0,0])\n    cylinder(h=2.5, d1=d, d2=d+1.5);\n}\n\n// Condensation droplets\nmodule droplets(){\n    color(water_color)\n    for(i=[0:35]){\n        rotate([0,0,i*137.5])\n        translate([d/2*0.9,0,rand(4,66)])\n        sphere(0.8);\n    }\n}\n\n// Random helper\nfunction rand(a,b)=a+(b-a)*(sin(12345*$parent*i)+1)/2;\n\n// Dimensions\nd = 45;\n\n// Assembly\nunion(){\n    color(can_color) {\n        can_body();\n        top_dome();\n    }\n    base_rim();\n    pull_tab();\n    droplets();\n}",
    "renders": true
  },
  {
    "food_item": "spritzer",
    "openscad_code": "// Spritzer Cookie - Realistic Style, Medium Complexity\n\n// Colors\ncookie_color = \"#D4A574\";\nchocolate_color = \"#4A2C2A\";\nsugar_color = \"#FFFFFF\";\n\n// Main module\nmodule spritzer_cookie() {\n    // Base cookie shape - ridged cylinder\n    difference() {\n        union() {\n            // Main cookie body with ridges\n            for (i = [0:15:360]) {\n                rotate([0, 0, i])\n                translate([0, 0, 0])\n                cylinder(h=8, r1=22, r2=20, $fn=6);\n            }\n            \n            // Smooth top surface\n            translate([0, 0, 8])\n            cylinder(h=2, r=20, $fn=64);\n        }\n        \n        // Center hole for classic spritzer shape\n        translate([0, 0, -1])\n        cylinder(h=12, r=4, $fn=32);\n    }\n    \n    // Chocolate coating on bottom half\n    color(chocolate_color)\n    translate([0, 0, -0.5])\n    difference() {\n        cylinder(h=5.5, r1=20.5, r2=21, $fn=64);\n        \n        // Remove center from chocolate coating\n        translate([0, 0, -1])\n        cylinder(h=7, r=4, $fn=32);\n        \n        // Create wavy bottom edge\n        for (i = [0:10:350]) {\n            rotate([0, 0, i])\n            translate([19, 0, 0])\n            rotate([90, 0, 0])\n            cylinder(h=2, r1=1.5, r2=0.5, $fn=8);\n        }\n    }\n    \n    // Sugar crystals on top\n    color(sugar_color)\n    for (i = [1:35]) {\n        // Random positioning for sugar\n        angle = i * 137.5;\n        radius = 8 + (i % 12);\n        x = cos(angle) * radius;\n        y = sin(angle) * radius;\n        \n        translate([x, y, 10])\n        sphere(r=0.3 + (i % 3) * 0.2, $fn=6);\n    }\n    \n    // Ridged texture lines on top surface\n    color(cookie_color)\n    for (i = [0:30:360]) {\n        rotate([0, 0, i])\n        for (j = [5:5:18]) {\n            translate([j, 0, 9.5])\n            rotate([90, 0, 0])\n            cylinder(h=0.5, r=0.3, $fn=8);\n        }\n    }\n    \n    // Subtle edge ridges\n    for (i = [0:20:360]) {\n        rotate([0, 0, i])\n        translate([19.5, 0, 4])\n        rotate([0, 90, 0])\n        cylinder(h=1, r1=1, r2=0.5, $fn=8);\n    }\n}\n\n// Create the cookie centered at origin\ncolor(cookie_color)\nspritzer_cookie();",
    "renders": true
  },
  {
    "food_item": "cordial",
    "openscad_code": "// Cordial Cherry - Realistic medium complexity\n// Features: chocolate shell, liquid center, cherry with stem\n\n$fn = 32;\n\n// Main assembly\nmodule cordial_cherry() {\n    color(\"chocolate\") {\n        // Chocolate shell with realistic dimpled texture\n        difference() {\n            // Main shell\n            sphere(d = 25);\n            \n            // Hollow interior for liquid center\n            sphere(d = 22);\n            \n            // Bottom opening\n            translate([0, 0, -12])\n                cylinder(h = 10, d = 8, $fn = 16);\n        }\n        \n        // Chocolate ridges for texture\n        for (i = [0:7]) {\n            rotate([0, 0, i * 45])\n                translate([0, 11.5, 0])\n                    scale([0.3, 1, 0.3])\n                        sphere(d = 5);\n        }\n    }\n    \n    // Liquid cherry center\n    translate([0, 0, -3])\n        color(\"darkred\")\n            sphere(d = 18);\n    \n    // Cherry with stem\n    translate([0, 0, -3])\n        union() {\n            // Cherry body\n            color(\"darkred\")\n                sphere(d = 15);\n            \n            // Cherry stem\n            translate([0, 4, 8])\n                rotate([20, 0, 0])\n                    color(\"saddlebrown\")\n                        cylinder(h = 12, d1 = 2, d2 = 1);\n        }\n    \n    // Sugar dusting on top\n    for (i = [0:15]) {\n        rotate([0, 0, i * 24])\n            translate([8 + rand(), 0, 12])\n                scale([0.5 + rand()/2, 0.5 + rand()/2, 0.2])\n                    color(\"white\")\n                        sphere(d = 1);\n    }\n}\n\n// Helper function for random placement\nfunction rand() = rands(0, 1, 1)[0] - 0.5;\n\n// Base plate to prevent rolling\nmodule base() {\n    translate([0, 0, -15])\n        color(\"chocolate\")\n            cylinder(h = 2, d = 30);\n}\n\n// Render the complete cordial\nunion() {\n    cordial_cherry();\n    base();\n}",
    "renders": true
  },
  {
    "food_item": "syrup",
    "openscad_code": "// Realistic Maple Syrup Bottle with Syrup\n// Medium complexity food model - 3D printable\n\n$fn = 32;\n\n// Main colors\ncolor_syrup = [0.4, 0.2, 0.1];\ncolor_bottle = [0.9, 0.9, 0.95, 0.6];\ncolor_cap = [0.8, 0.8, 0.8];\ncolor_label = [0.95, 0.9, 0.8];\n\n// Bottle dimensions\nbottle_height = 80;\nbottle_radius = 20;\nneck_height = 15;\ncap_height = 12;\ncap_radius = 12;\n\n// Syrup level inside\nsyrup_level = 55;\n\n// Create the syrup bottle assembly\nmodule syrup_bottle() {\n    // Bottle body - cylindrical with slight taper\n    difference() {\n        // Main bottle body\n        union() {\n            cylinder(h=bottle_height, r1=bottle_radius, r2=bottle_radius*0.9);\n            \n            // Neck\n            translate([0, 0, bottle_height])\n                cylinder(h=neck_height, r1=bottle_radius*0.5, r2=bottle_radius*0.45);\n        }\n        \n        // Hollow out the bottle\n        translate([0, 0, -1])\n            cylinder(h=bottle_height + neck_height + 2, r1=bottle_radius-2, r2=bottle_radius*0.9-2);\n    }\n    \n    // Cap\n    translate([0, 0, bottle_height + neck_height])\n        color(color_cap)\n        difference() {\n            cylinder(h=cap_height, r1=cap_radius, r2=cap_radius*0.9);\n            translate([0, 0, -1])\n                cylinder(h=cap_height+2, r1=cap_radius-2, r2=cap_radius*0.9-2);\n        }\n    \n    // Syrup inside\n    translate([0, 0, 1])\n        color(color_syrup)\n        cylinder(h=syrup_level, r1=bottle_radius-3, r2=bottle_radius*0.9-3);\n    \n    // Label\n    color(color_label)\n    difference() {\n        // Label body\n        translate([0, bottle_radius-0.5, 25])\n            cube([bottle_radius*1.8, 1, 30], center=true);\n        \n        // Rounded label ends\n        translate([bottle_radius*0.9-0.5, bottle_radius-0.5, 25])\n            rotate([0, 90, 0])\n                cylinder(h=1, r=15);\n        translate([-bottle_radius*0.9+0.5, bottle_radius-0.5, 25])\n            rotate([0, 90, 0])\n                cylinder(h=1, r=15);\n    }\n}\n\n// Create syrup drips for realistic effect\nmodule syrup_drips() {\n    color(color_syrup)\n    translate([0, 0, bottle_height + neck_height + cap_height - 2])\n    for(i=[-30, 0, 30]) {\n        rotate([0, 0, i])\n        translate([cap_radius*0.3, 0, 0])\n            scale([0.3, 0.3, 1])\n                cylinder(h=8, r1=2, r2=0.5);\n    }\n}\n\n// Bottle base with slight rounding\nmodule bottle_base() {\n    difference() {\n        translate([0, 0, -2])\n            cylinder(h=2, r1=bottle_radius, r2=bottle_radius);\n        translate([0, 0, -2.5])\n            cylinder(h=3, r1=bottle_radius-2, r2=bottle_radius-2);\n    }\n}\n\n// Assembly\ncolor(color_bottle) {\n    syrup_bottle();\n    bottle_base();\n}\nsyrup_drips();",
    "renders": true
  },
  {
    "food_item": "kombucha",
    "openscad_code": "// Kombucha bottle with SCOBY floating inside\n// Overall dimensions: ~60mm tall, 30mm diameter\n\nbottle_color = \"LightBlue\";\nscoby_color = \"Sienna\";\nliquid_color = \"Honeydew\";\ncap_color = \"DarkGray\";\n\n// Main bottle body\nmodule bottle_body() {\n    difference() {\n        // Main cylindrical body\n        cylinder(h=50, d=30, $fn=64);\n        \n        // Hollow out the inside\n        translate([0, 0, 2])\n            cylinder(h=48, d=26, $fn=64);\n    }\n}\n\n// Bottle neck\nmodule bottle_neck() {\n    difference() {\n        // Tapered neck\n        cylinder(h=10, d1=30, d2=20, $fn=64);\n        \n        // Hollow neck\n        translate([0, 0, 2])\n            cylinder(h=10, d1=26, d2=16, $fn=64);\n    }\n}\n\n// Screw cap\nmodule bottle_cap() {\n    difference() {\n        // Main cap cylinder\n        cylinder(h=8, d=22, $fn=32);\n        \n        // Inner thread space\n        translate([0, 0, 2])\n            cylinder(h=6, d=18, $fn=32);\n        \n        // Grip ridges\n        for(i=[0:15]) {\n            rotate([0, 0, i*22.5])\n                translate([10.5, 0, 0])\n                    cube([1, 0.5, 8], center=true);\n        }\n    }\n}\n\n// SCOBY (symbiotic culture of bacteria and yeast)\nmodule scoby() {\n    // Main SCOBY disc\n    translate([0, 0, 25])\n        scale([1, 1, 0.2])\n            sphere(d=25, $fn=48);\n    \n    // Surface texture - small bumps\n    for(i=[0:20]) {\n        angle = i * 137.5; // Golden angle for natural distribution\n        radius = 8 + rand(i) * 4;\n        x = cos(angle) * radius;\n        y = sin(angle) * radius;\n        \n        translate([x, y, 28])\n            sphere(d=1.5 + rand(i*2), $fn=8);\n    }\n}\n\n// Helper function for pseudo-random numbers\nfunction rand(n) = (n * 13.7) % 1;\n\n// Yeast particles floating in liquid\nmodule yeast_particles() {\n    for(i=[0:30]) {\n        angle = i * 47.3;\n        radius = rand(i) * 10;\n        height = 5 + rand(i*3) * 20;\n        \n        translate([cos(angle)*radius, sin(angle)*radius, height])\n            sphere(d=0.5 + rand(i*5), $fn=6);\n    }\n}\n\n// Main assembly\ncolor(bottle_color) {\n    // Transparent bottle\n    %bottle_body();\n    translate([0, 0, 50]) %bottle_neck();\n}\n\ncolor(cap_color) translate([0, 0, 60]) bottle_cap();\n\n// Liquid inside (slightly lower than full)\ncolor(liquid_color, 0.6)\n    translate([0, 0, 2])\n        cylinder(h=45, d=26, $fn=64);\n\n// SCOBY floating on top\ncolor(scoby_color, 0.8) scoby();\n\n// Yeast particles\ncolor(\"Beige\", 0.7) yeast_particles();\n\n// Label band\ncolor(\"White\") \n    translate([0, 15.1, 25])\n        rotate([90, 0, 0])\n            cylinder(h=20, d=30.5, $fn=64);\n\n// Label text placeholder\ncolor(\"Black\")\n    translate([0, 15.2, 25])\n        rotate([90, 0, 0])\n            linear_extrude(height=0.5)\n                text(\"KOMBUCHA\", size=3, halign=\"center\", valign=\"center\");",
    "renders": true
  },
  {
    "food_item": "tisane",
    "openscad_code": "// Chamomile Tisane Flower - Realistic Style\n// Dried chamomile flower head for tea making\n\n$fn = 50;  // Smooth curves for realistic appearance\n\nmodule petal() {\n    // Single chamomile petal - elongated oval shape\n    difference() {\n        // Main petal body\n        scale([1, 3, 0.3]) sphere(d=5);\n        \n        // Slight indentation along petal\n        translate([0, 0, 0.1]) scale([0.8, 2.8, 0.1]) sphere(d=5);\n    }\n}\n\nmodule flower_center() {\n    // Yellow dome center with texture\n    color(\"goldenrod\") {\n        // Main center dome\n        translate([0, 0, 1.5]) scale([1, 1, 0.6]) sphere(d=12);\n        \n        // Textured bumps\n        for(i = [0:5:360]) {\n            rotate([0, 0, i]) translate([3, 0, 2.5]) sphere(d=1.2);\n            rotate([0, 0, i+2.5]) translate([5, 0, 2.3]) sphere(d=0.8);\n            rotate([0, 0, i+5]) translate([2, 0, 2.4]) sphere(d=1);\n        }\n    }\n}\n\nmodule flower_head() {\n    union() {\n        // White petals in double ring\n        color(\"white\") {\n            // Outer ring of petals\n            for(i = [0:15:359]) {\n                rotate([0, 0, i]) translate([8, 0, 0]) petal();\n            }\n            // Inner ring of slightly shorter petals\n            for(i = [7.5:15:359]) {\n                rotate([0, 0, i]) translate([6, 0, 0.5]) scale([0.9, 0.9, 1]) petal();\n            }\n        }\n        \n        // Central yellow dome\n        flower_center();\n        \n        // Underside of flower\n        color(\"lightyellow\") {\n            translate([0, 0, -0.5]) scale([1, 1, 0.3]) sphere(d=18);\n        }\n    }\n}\n\nmodule stem_segment() {\n    // Single segment of dried stem with texture\n    color(\"saddlebrown\") {\n        cylinder(h=8, d1=2, d2=1.5, center=true);\n        \n        // Texture rings\n        for(h = [-3:1:3]) {\n            translate([0, 0, h]) rotate([90, 0, 0]) \n                scale([1, 0.1, 1]) cylinder(h=2.1, d=2.1, center=true);\n        }\n    }\n}\n\nmodule stem() {\n    // Curved stem made of segments\n    for(i = [0:1:6]) {\n        translate([0, 0, -i*6]) rotate([i*5, 0, 0]) stem_segment();\n    }\n}\n\nmodule leaf() {\n    // Dried chamomile leaf\n    color(\"olivedrab\") {\n        scale([1, 2.5, 0.1]) sphere(d=8);\n        \n        // Leaf veins\n        for(v = [-1:0.5:1]) {\n            translate([v*2, 0, 0.1]) scale([0.1, 1.2, 0.1]) sphere(d=8);\n        }\n    }\n}\n\n// Main assembly\ntranslate([0, 0, 0]) flower_head();\ntranslate([0, 0, -5]) stem();\ntranslate([4, 2, -8]) rotate([0, 0, 30]) leaf();\ntranslate([-3, -3, -12]) rotate([0, 0, -45]) scale([0.7, 0.7, 0.7]) leaf();",
    "renders": true
  },
  {
    "food_item": "rooibos",
    "openscad_code": "// Rooibos tea branch with leaves\n// Overall size: ~60mm length, 15mm diameter\n\n$fn = 32;\n\nmodule rooibos_leaf() {\n    // Individual needle-like leaf\n    color([0.25, 0.15, 0.05])\n    difference() {\n        scale([0.3, 0.3, 8])\n        rotate([0, 90, 0])\n        cylinder(h=1, r1=0.5, r2=0.1);\n        \n        // Leaf tip\n        translate([0, 0, 3.8])\n        rotate([0, 90, 0])\n        sphere(0.15);\n    }\n}\n\nmodule leaf_cluster(x, y, z, rot, scale_factor) {\n    // Cluster of 3-4 leaves at each node\n    translate([x, y, z])\n    rotate([0, 0, rot])\n    for(i = [0:120:359]) {\n        rotate([0, i + rand(30), 0])\n        rotate([rand(20) - 10, 0, 0])\n        scale(scale_factor)\n        rooibos_leaf();\n    }\n}\n\nmodule rooibos_branch() {\n    // Main reddish-brown branch\n    color([0.4, 0.2, 0.1])\n    difference() {\n        rotate([90, 0, 0])\n        cylinder(h=60, r1=3, r2=2);\n        \n        // Remove bottom for flat print surface\n        translate([0, 0, -1])\n        cube([10, 10, 2], center=true);\n    }\n    \n    // Branch texture rings\n    color([0.35, 0.18, 0.08])\n    for(i = [5:5:55]) {\n        translate([0, 0, i])\n        rotate([90, 0, 0])\n        cylinder(h=0.5, r1=3.2, r2=2.9);\n    }\n    \n    // Leaf nodes along branch\n    leaf_cluster(2, 0, 10, 0, 1);\n    leaf_cluster(-1.5, 2, 20, 45, 0.9);\n    leaf_cluster(1, -2, 30, -30, 1.1);\n    leaf_cluster(-2, 1, 40, 90, 0.8);\n    leaf_cluster(1.5, 1.5, 50, 180, 1);\n    \n    // Small side shoots\n    color([0.4, 0.2, 0.1])\n    translate([0, 0, 15])\n    rotate([0, 0, 30])\n    rotate([0, 45, 0])\n    cylinder(h=8, r1=1.5, r2=1);\n    \n    translate([0, 0, 35])\n    rotate([0, 0, -45])\n    rotate([0, -30, 0])\n    cylinder(h=6, r1=1.2, r2=0.8);\n}\n\n// Add some fallen leaves at base\ncolor([0.3, 0.18, 0.08])\ntranslate([0, 0, 0.5])\nrotate([90, 0, 0])\nlinear_extrude(height=0.3)\nscale([0.8, 0.8, 1])\noffset(r=0.5)\nprojection()\nrotate_extrude(angle=360, $fn=6)\ntranslate([2, 0, 0])\ncircle(r=0.5);\n\nrooibos_branch();",
    "renders": true
  },
  {
    "food_item": "yerba",
    "openscad_code": "// Yerba mate leaves in gourd - realistic style, medium complexity\n\n$fn = 36;\n\n// Colors\nleaf_color = [34/255, 139/255, 34/255];\nstem_color = [101/255, 67/255, 33/255];\ngourd_color = [160/255, 82/255, 45/255];\ngourd_inside = [244/255, 164/255, 96/255];\n\n// Main gourd\nmodule gourd() {\n    color(gourd_color)\n    difference() {\n        // Outer shape\n        rotate([90, 0, 0])\n        cylinder(h = 60, d1 = 50, d2 = 30, center = true);\n        \n        // Hollow inside\n        translate([0, 0, 5])\n        rotate([90, 0, 0])\n        cylinder(h = 55, d1 = 45, d2 = 25, center = true);\n        \n        // Top opening\n        translate([0, 30, 0])\n        rotate([90, 0, 0])\n        cylinder(h = 20, d = 40, center = true);\n    }\n    \n    // Inside color\n    color(gourd_inside)\n    difference() {\n        translate([0, 0, 5])\n        rotate([90, 0, 0])\n        cylinder(h = 50, d1 = 45, d2 = 25, center = true);\n        \n        translate([0, 28, 0])\n        rotate([90, 0, 0])\n        cylinder(h = 20, d = 38, center = true);\n    }\n}\n\n// Single yerba leaf\nmodule leaf(scale_factor = 1) {\n    color(leaf_color) {\n        scale([scale_factor, scale_factor, scale_factor]) {\n            // Main leaf body\n            translate([0, 0, 0.5])\n            scale([1, 2, 0.2])\n            sphere(d = 10);\n            \n            // Leaf tip\n            translate([0, 10, 0])\n            scale([0.7, 0.5, 0.2])\n            sphere(d = 5);\n            \n            // Stem\n            color(stem_color)\n            translate([0, -5, 0])\n            rotate([90, 0, 0])\n            cylinder(h = 5, d = 0.5, center = true);\n        }\n    }\n}\n\n// Leaf cluster\nmodule leaf_cluster(count = 8, base_size = 1) {\n    for(i = [0:count-1]) {\n        rotate([0, 0, i * 360/count])\n        translate([rand(2, 5), rand(2, 5), 0])\n        rotate([rand(-30, 30), rand(-30, 30), rand(0, 360)])\n        leaf(base_size * rand(0.7, 1.3));\n    }\n}\n\n// Function for random values\nfunction rand(min, max) = min + (max - min) * rands(0, 1, 1)[0];\n\n// Fill gourd with yerba\nmodule yerba_fill() {\n    // Base layer\n    for(i = [0:20]) {\n        translate([rand(-15, 15), rand(-25, 15), rand(-20, -10)])\n        rotate([rand(0, 90), rand(0, 90), rand(0, 360)])\n        leaf(rand(0.5, 1.2));\n    }\n    \n    // Middle layer\n    for(i = [0:15]) {\n        translate([rand(-10, 10), rand(-20, 10), rand(-10, 0)])\n        rotate([rand(0, 90), rand(0, 90), rand(0, 360)])\n        leaf(rand(0.6, 1.1));\n    }\n    \n    // Top layer\n    for(i = [0:10]) {\n        translate([rand(-8, 8), rand(-15, 5), rand(0, 5)])\n        rotate([rand(0, 60), rand(0, 60), rand(0, 360)])\n        leaf(rand(0.5, 0.9));\n    }\n}\n\n// Main assembly\ngourd();\n\n// Place yerba inside\ntranslate([0, 0, -5])\nyerba_fill();\n\n// Add some leaves spilling over the edge\ntranslate([10, 25, 0])\nrotate([0, 0, 30])\nleaf(1.2);\n\ntranslate([-8, 28, 2])\nrotate([0, 0, -20])\nleaf(0.8);",
    "renders": true
  },
  {
    "food_item": "oolong",
    "openscad_code": "// Oolong tea leaf cluster - realistic style with medium complexity\n// Base unit in mm, overall size ~60mm\n$fn = 48;\n\n// Tea leaf color gradient\ntea_color = [0.4, 0.35, 0.2];\n\n// Single rolled oolong leaf\nmodule tea_leaf(length, width, curl) {\n    color(tea_color) {\n        difference() {\n            // Main leaf body\n            scale([1, 0.6, 0.3]) \n                sphere(r = width/2);\n            \n            // Central vein\n            translate([0, 0, width/20])\n                scale([1.2, 0.1, 0.1])\n                    sphere(r = width/2);\n            \n            // Leaf tip curl\n            translate([length/4, 0, width/6])\n                rotate([90, 0, 0])\n                    cylinder(h = width/3, r1 = width/4, r2 = 0);\n        }\n    }\n}\n\n// Leaf cluster with multiple rolled leaves\nmodule oolong_cluster() {\n    // Central core leaf\n    rotate([0, 20, 15])\n        tea_leaf(12, 8, 30);\n    \n    // Surrounding leaves in spiral pattern\n    for(i = [0:4]) {\n        rotate([0, 10 + i*15, i*72])\n            translate([3 + i*2, 0, i*1.5])\n                rotate([0, 5 + i*5, i*20])\n                    tea_leaf(10 + i*1.5, 6 + i*0.5, 25 + i*5);\n    }\n    \n    // Smaller outer leaves\n    for(j = [0:3]) {\n        rotate([0, -15 - j*10, j*90 + 45])\n            translate([8 + j*2, 0, -2 - j*0.5])\n                rotate([0, -10 - j*5, j*30])\n                    tea_leaf(7, 4, 20);\n    }\n}\n\n// Tea surface texture with small particles\nmodule tea_particles() {\n    color(tea_color + [0.05, 0.05, 0.05]) {\n        for(k = [0:30]) {\n            translate([\n                (rand(k*123) - 0.5) * 15,\n                (rand(k*456) - 0.5) * 15,\n                (rand(k*789) - 0.5) * 5\n            ])\n                sphere(r = 0.3 + rand(k*321) * 0.5);\n        }\n    }\n}\n\n// Helper function for random values\nfunction rand(seed) = (seed * 9301 + 49297) % 233280 / 233280;\n\n// Main assembly\ntranslate([0, 0, 5])\n    oolong_cluster();\n\n// Add surface texture\ntranslate([0, 0, 0])\n    tea_particles();",
    "renders": true
  },
  {
    "food_item": "darjeeling",
    "openscad_code": "// Darjeeling Tea Cup with Steamed Momos (Dumplings)\n// A popular street food combination from Darjeeling\n\n$fn = 32;\n\n// Colors\ncup_color = [0.85, 0.75, 0.65];\ntea_color = [0.4, 0.2, 0.1];\nmomo_color = [0.95, 0.9, 0.85];\nfilling_color = [0.6, 0.3, 0.2];\nsteam_color = [1, 1, 1, 0.3];\n\n// Main module\nmodule darjeeling_tea_momos() {\n    // Tea cup base\n    color(cup_color) {\n        // Cup body\n        difference() {\n            cylinder(h=40, d1=35, d2=45);\n            translate([0, 0, 2])\n                cylinder(h=38, d1=30, d2=40);\n        }\n        \n        // Cup handle\n        translate([22, 0, 20])\n            rotate([0, 90, 0])\n                difference() {\n                    torus(8, 3);\n                    translate([-10, 0, 0])\n                        cube([20, 20, 20], center=true);\n                }\n    }\n    \n    // Tea inside cup\n    color(tea_color) {\n        translate([0, 0, 2])\n            cylinder(h=36, d1=29, d2=39);\n    }\n    \n    // Momo steamer basket\n    color([0.7, 0.5, 0.3]) {\n        // Basket base\n        translate([0, 60, 0])\n            cylinder(h=15, d=50);\n        \n        // Basket sides with holes\n        translate([0, 60, 15])\n            difference() {\n                cylinder(h=20, d=50);\n                cylinder(h=20, d=45);\n                \n                // Steam holes\n                for(i = [0:5:359]) {\n                    rotate([0, 0, i])\n                        translate([23, 0, 0])\n                            cylinder(h=20, d=2);\n                }\n            }\n    }\n    \n    // Momos\n    for(pos = [[-15, 50, 20], [0, 50, 20], [15, 50, 20],\n               [-15, 65, 20], [0, 65, 20], [15, 65, 20],\n               [-15, 80, 20], [0, 80, 20], [15, 80, 20]]) {\n        translate(pos) {\n            color(momo_color) {\n                // Momo wrapper\n                difference() {\n                    sphere(d=12);\n                    translate([0, 0, -1])\n                        sphere(d=10);\n                }\n                \n                // Momo pleats\n                for(i = [0:30:359]) {\n                    rotate([0, 0, i])\n                        translate([0, 4.5, 0])\n                            cube([1, 1, 8], center=true);\n                }\n                \n                // Filling peeking through\n                color(filling_color) {\n                    translate([0, 0, 3])\n                        sphere(d=8);\n                }\n            }\n        }\n    }\n    \n    // Steam effect\n    color(steam_color) {\n        for(i = [0:20:359]) {\n            rotate([0, 0, i])\n                translate([0, 60, 40])\n                    scale([1, 1, 3])\n                        sphere(d=3 + sin(i*5)*2);\n        }\n    }\n    \n    // Tea surface detail (foam pattern)\n    color([0.5, 0.25, 0.1]) {\n        for(i = [0:45:359]) {\n            rotate([0, 0, i])\n                translate([5 + sin(i*3)*3, 0, 38.5])\n                    sphere(d=1);\n        }\n    }\n}\n\n// Torus helper module for handle\nmodule torus(major, minor) {\n    rotate_extrude()\n        translate([major, 0, 0])\n            circle(r=minor);\n}\n\n// Scale to reasonable size\nscale(0.8) darjeeling_tea_momos();",
    "renders": true
  },
  {
    "food_item": "assam",
    "openscad_code": "// Assam Jolpan (Pitha with Til Laru) - Traditional breakfast item\n// Overall dimensions: ~70mm diameter, ~25mm height\n\n// Colors\n$fn = 32;\n\n// Rice pitha base\nmodule pitha_base() {\n    color(\"ivory\") \n    difference() {\n        union() {\n            // Main pitha body\n            cylinder(h=8, r=35, center=false);\n            \n            // Raised edges\n            translate([0, 0, 8])\n            cylinder(h=3, r1=35, r2=32, center=false);\n        }\n        \n        // Center depression\n        translate([0, 0, -1])\n        cylinder(h=5, r=20, center=false);\n    }\n}\n\n// Pitha texture - rice grain pattern\nmodule pitha_texture() {\n    color(\"beige\")\n    for(i=[0:15]) {\n        rotate([0, 0, i*24])\n        translate([30*sin(i*15), 30*cos(i*15), 9.5])\n        scale([1, 0.3, 0.3])\n        sphere(r=1.5);\n    }\n}\n\n// Sesame seeds (til)\nmodule sesame_seeds() {\n    color(\"darkgoldenrod\")\n    for(i=[0:40]) {\n        a = i*137.5;\n        r = pow(i, 0.5) * 2.8;\n        translate([r*cos(a), r*sin(a), 10.2])\n        rotate([90, 0, 0])\n        scale([0.8, 0.8, 0.3])\n        cylinder(h=1, r=0.8);\n    }\n}\n\n// Jaggery coating drips\nmodule jaggery_drips() {\n    color(\"saddlebrown\")\n    union() {\n        // Main jaggery layer\n        translate([0, 0, 10])\n        cylinder(h=1.5, r=32, center=false);\n        \n        // Drips around edge\n        for(i=[0:11]) {\n            rotate([0, 0, i*30])\n            translate([32, 0, 10])\n            rotate([90, 0, 0])\n            scale([1, 1, 3])\n            cylinder(h=3, r1=2, r2=0.5);\n        }\n    }\n}\n\n// Coconut flakes\nmodule coconut_flakes() {\n    color(\"white\")\n    for(i=[0:25]) {\n        a = i*14.4 + rand(i)*10;\n        r = 15 + rand(i)*15;\n        translate([r*cos(a), r*sin(a), 11.8])\n        rotate([0, 0, a])\n        scale([1, 0.5, 0.1])\n        cube([3, 2, 0.3], center=true);\n    }\n}\n\n// Helper for randomness\nfunction rand(n) = (n*13)%7/10;\n\n// Assembly\nunion() {\n    pitha_base();\n    pitha_texture();\n    jaggery_drips();\n    sesame_seeds();\n    coconut_flakes();\n}",
    "renders": true
  },
  {
    "food_item": "sencha",
    "openscad_code": "// Sencha Green Tea Leaves in a Traditional Bowl\n// Realistic style, medium complexity\n\nbowl_wall = 1.5;\nbowl_radius = 25;\nbowl_height = 15;\nleaf_thickness = 0.8;\n\nmodule bowl() {\n    difference() {\n        // Outer bowl shape\n        cylinder(h = bowl_height, r1 = bowl_radius, r2 = bowl_radius * 0.9, $fn = 64);\n        \n        // Hollow interior\n        translate([0, 0, bowl_wall])\n            cylinder(h = bowl_height - bowl_wall, r1 = bowl_radius - bowl_wall, r2 = (bowl_radius * 0.9) - bowl_wall, $fn = 64);\n    }\n}\n\nmodule tea_leaf(length, width, curl) {\n    color([0.2, 0.5, 0.1])\n    difference() {\n        // Main leaf body\n        scale([width, length, leaf_thickness])\n            sphere(r = 1, $fn = 16);\n        \n        // Serrated edges using small cylinders\n        for(i = [0:5:length * 10]) {\n            rotate([0, 0, i])\n                translate([width + 0.3, 0, leaf_thickness/2])\n                    cylinder(h = leaf_thickness * 1.2, r = 0.2, $fn = 8);\n        }\n        \n        // Central vein\n        translate([0, -length/2, leaf_thickness/2])\n            cube([0.2, length, leaf_thickness * 0.5], center = true);\n    }\n    \n    // Add some curl to the leaf\n    rotate([curl * 10, 0, 0])\n        translate([0, 0, leaf_thickness])\n            scale([width * 0.9, length * 0.9, leaf_thickness * 0.7])\n                sphere(r = 1, $fn = 16);\n}\n\nmodule tea_leaves() {\n    // Generate multiple tea leaves with random positions and orientations\n    for(i = [0:20]) {\n        angle = i * 137.5; // Golden angle for natural distribution\n        radius = pow(i, 0.5) * 2;\n        \n        translate([\n            cos(angle) * radius * 0.3, \n            sin(angle) * radius * 0.3, \n            1 + i * 0.1\n        ]) {\n            rotate([0, 0, angle + 90])\n                rotate([rand(i) * 20 - 10, rand(i + 100) * 10 - 5, 0])\n                    tea_leaf(\n                        5 + rand(i * 2) * 3, \n                        1.5 + rand(i * 3) * 0.5, \n                        rand(i * 5) - 0.5\n                    );\n        }\n    }\n}\n\n// Helper function for pseudo-random numbers\nfunction rand(seed) = (seed * 9301 + 49297) % 233280 / 233280;\n\n// Main assembly\ncolor([0.9, 0.9, 0.85]) bowl();\ncolor([0.2, 0.5, 0.1]) tea_leaves();",
    "renders": true
  }
]