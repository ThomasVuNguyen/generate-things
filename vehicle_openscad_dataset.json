[
  {
    "vehicle": "sedan",
    "openscad_code": "// Medium-complexity 3D-printable sedan\n// Overall scale: 90 mm long, 40 mm wide, 30 mm tall\nscale_factor = 1;\n\n// Body shell\nmodule body_shell() {\n    difference() {\n        // Main body block\n        hull() {\n            translate([-42, -18, 0]) cube([84, 36, 20]);\n            translate([-40, -16, 15]) cube([80, 32, 10]);\n            translate([35, -12, 22]) cube([10, 24, 8]);\n            translate([-45, -12, 22]) cube([10, 24, 8]);\n        }\n        // Cabin cutout\n        translate([-35, -14, 18]) cube([70, 28, 15]);\n        // Wheel arches\n        for (x = [-28, 28]) {\n            translate([x, -20, 0]) rotate([0, 0, 0]) cylinder(h = 20, r = 8, $fn = 16);\n            translate([x,  20, 0]) rotate([0, 0, 0]) cylinder(h = 20, r = 8, $fn = 16);\n        }\n    }\n}\n\n// Hood and trunk\nmodule hood_trunk() {\n    // Hood\n    translate([-41, -17, 10]) cube([30, 34, 8]);\n    // Trunk\n    translate([11, -17, 10]) cube([30, 34, 8]);\n}\n\n// Roof\nmodule roof() {\n    translate([-30, -14, 25]) cube([60, 28, 6]);\n}\n\n// Windows\nmodule windows() {\n    color(\"lightblue\") {\n        // Windshield\n        translate([-34, -13, 19]) cube([0.5, 26, 12]);\n        // Rear window\n        translate([33.5, -13, 19]) cube([0.5, 26, 12]);\n        // Side windows (front)\n        for (x = [-20, 20]) {\n            translate([x, -14.5, 19]) cube([14, 0.5, 10]);\n            translate([x,  14, 19]) cube([14, 0.5, 10]);\n        }\n    }\n}\n\n// Wheels\nmodule wheels() {\n    for (x = [-28, 28]) {\n        for (y = [-18, 18]) {\n            translate([x, y, -2]) {\n                difference() {\n                    cylinder(h = 6, r = 8, $fn = 32);\n                    cylinder(h = 7, r = 4, $fn = 32);\n                }\n            }\n        }\n    }\n}\n\n// Headlights\nmodule headlights() {\n    for (x = [-38, -30]) {\n        translate([x, -15, 12]) cube([4, 2, 2]);\n        translate([x, 13, 12]) cube([4, 2, 2]);\n    }\n}\n\n// Taillights\nmodule taillights() {\n    for (x = [30, 38]) {\n        translate([x, -15, 12]) cube([4, 2, 2]);\n        translate([x, 13, 12]) cube([4, 2, 2]);\n    }\n}\n\n// Side mirrors\nmodule mirrors() {\n    for (y = [-15, 15]) {\n        translate([-10, y, 22]) {\n            cube([3, 2, 1.5]);\n            translate([1.5, 0, 0]) rotate([0, y > 0 ? 30 : -30, 0]) cube([2, 1.5, 3]);\n        }\n    }\n}\n\n// License plates\nmodule plates() {\n    translate([-43, -6, 8]) cube([2, 12, 1]);\n    translate([41, -6, 8]) cube([2, 12, 1]);\n}\n\n// Exhaust pipe\nmodule exhaust() {\n    translate([42, 8, 4]) rotate([0, 90, 0]) cylinder(h = 10, r = 2, $fn = 16);\n}\n\n// Assemble the sedan\nscale([scale_factor, scale_factor, scale_factor]) {\n    union() {\n        body_shell();\n        hood_trunk();\n        roof();\n        windows();\n        headlights();\n        taillights();\n        mirrors();\n        plates();\n        exhaust();\n    }\n    wheels();\n}",
    "renders": true
  },
  {
    "vehicle": "coupe",
    "openscad_code": "// Realistic Medium-complexity 3D-printable coupe (≈85 mm long)\n\n$fn = 36;               // Smooth curves for printing\n\nwheel_d = 18;\nwheel_w = 8;\nbody_l = 85;\nbody_w = 40;\nbody_h = 22;\n\n// Printable base plate\nmodule base_plate() {\n    difference() {\n        translate([0,0,-1])\n            cube([body_l+4,body_w+4,2], center=true);\n        translate([0,0,0.5])\n            cube([body_l,body_w,2], center=true);\n    }\n}\n\n// Wheel module (no overhangs)\nmodule wheel() {\n    rotate([0,90,0])\n    difference() {\n        cylinder(d=wheel_d, h=wheel_w, center=true);\n        translate([0,0,-wheel_w/2-0.5])\n            cylinder(d=wheel_d-6, h=wheel_w+1, center=true);\n    }\n}\n\n// Side mirrors (printable)\nmodule mirror() {\n    translate([0,-6,0])\n    rotate([0,20,0])\n    union() {\n        cube([3,2,3]);\n        translate([1.5,0,-1])\n            sphere(d=4);\n    }\n}\n\n// Main body\nmodule body() {\n    difference() {\n        // Basic hull\n        hull() {\n            translate([-body_l/2+8, 0, body_h/2])\n                cube([body_l-16, body_w-8, body_h], center=true);\n            translate([-body_l/2+15, 0, body_h/2+8])\n                cube([body_l-30, body_w-12, 8], center=true);\n        }\n        \n        // Cabin cavity\n        translate([-body_l/2+25, 0, body_h/2+10])\n            cube([body_l-50, body_w-20, 12], center=true);\n            \n        // Windows\n        translate([-body_l/2+30, 0, body_h/2+11])\n            cube([body_l-60, body_w-16, 8], center=true);\n    }\n}\n\n// Hood slope\nmodule hood() {\n    translate([-body_l/2+5, 0, body_h/2+2])\n        rotate([0,0,0])\n        linear_extrude(height=10, scale=0.5)\n        square([25, body_w-10], center=true);\n}\n\n// Lights\nmodule lights() {\n    for(x=[-1,1])\n        translate([x*body_l/2-4, 0, body_h/2])\n            sphere(d=6);\n}\n\n// Exhausts\nmodule exhaust() {\n    for(side=[-1,1])\n        translate([-body_l/2+3, side*(body_w/2-2), -2])\n            rotate([90,0,0])\n            cylinder(d1=4, d2=3, h=8);\n}\n\n// Roof\nmodule roof() {\n    translate([-5,0,body_h/2+16])\n        rotate([0,0,0])\n        hull() {\n            cube([30, body_w-16, 2], center=true);\n            translate([5,0,8])\n                cube([20, body_w-20, 2], center=true);\n        }\n}\n\n// Assemble the coupe\nunion() {\n    base_plate();\n    \n    // Wheels\n    for(x=[-1,1])\n        for(y=[-1,1])\n            translate([x*28, y*22, 0])\n                wheel();\n    \n    body();\n    roof();\n    hood();\n    lights();\n    exhaust();\n    \n    // Side mirrors\n    translate([body_l/2-20, body_w/2+1, body_h/2+8])\n        mirror();\n    translate([body_l/2-20, -body_w/2-1, body_h/2+8])\n        mirror();\n}",
    "renders": true
  },
  {
    "vehicle": "hatchback",
    "openscad_code": "// Realistic Medium-Complexity 3D-Printable Hatchback\n// Approx 70 mm long, 30 mm wide, 25 mm tall\n// Wall thickness 1.2 mm for reliable printing\n\n$fa = 2; $fs = 0.5;\n\nmodule body_shell() {\n    // Main body with slight wedge shape\n    hull() {\n        translate([0, 0, 5]) cube([40, 28, 10], center = true);\n        translate([8, 0, 8]) cube([42, 26, 12], center = true);\n    }\n}\n\nmodule roof() {\n    // Sloping roof\n    translate([3, 0, 14.5])\n    rotate([0, -4, 0])\n    cube([38, 26, 2.4], center = true);\n}\n\nmodule hood() {\n    // Curved hood by stacking cylinders\n    for (i = [-10:2:10])\n        translate([i, 0, 12 + 0.015 * i * i])\n        rotate([90, 0, 0])\n        cylinder(h = 1.2, r = 13 - 0.3 * abs(i), center = true);\n}\n\nmodule hatch() {\n    // Rear hatch with slight rake\n    translate([-17, 0, 10.5])\n    rotate([60, 0, 0])\n    cube([17, 25, 1.2], center = true);\n}\n\nmodule side_windows() {\n    // Front and rear side windows\n    translate([5, 14.1, 12])\n    cube([12, 0.1, 7], center = true);\n    translate([-9, 14.1, 11])\n    cube([14, 0.1, 6], center = true);\n}\n\nmodule windshield() {\n    // Front windshield\n    translate([13, 0, 13])\n    rotate([70, 0, 0])\n    cube([20, 27, 0.1], center = true);\n}\n\nmodule rear_windshield() {\n    // Rear windshield\n    translate([-14, 0, 12])\n    rotate([110, 0, 0])\n    cube([18, 25, 0.1], center = true);\n}\n\nmodule wheel(pos, angle = 0) {\n    // Wheel with tire and rim\n    translate(pos)\n    rotate([0, 0, angle])\n    difference() {\n        // Tire\n        cylinder(h = 4.8, r = 6, center = true);\n        // Rim cavity\n        translate([0, 0, -0.1])\n        cylinder(h = 5, r = 4, center = true);\n    }\n}\n\nmodule axles() {\n    // Simple axles connecting wheels\n    translate([10, 0, 3])\n    rotate([0, 90, 0])\n    cylinder(h = 34, r = 1.2, center = true);\n    translate([-10, 0, 3])\n    rotate([0, 90, 0])\n    cylinder(h = 34, r = 1.2, center = true);\n}\n\nmodule bumper(loc) {\n    // Front or rear bumper\n    translate(loc)\n    cube([1.2, 28, 4], center = true);\n}\n\nmodule headlights() {\n    // Headlight clusters\n    translate([20.5, 8, 8])\n    cube([1.2, 6, 4], center = true);\n    translate([20.5, -8, 8])\n    cube([1.2, 6, 4], center = true);\n}\n\nmodule taillights() {\n    // Taillight clusters\n    translate([-20.5, 8, 8])\n    cube([1.2, 5, 3], center = true);\n    translate([-20.5, -8, 8])\n    cube([1.2, 5, 3], center = true);\n}\n\nmodule exhaust_pipe() {\n    // Single exhaust tip\n    translate([-21, 10, 2])\n    rotate([90, 0, 0])\n    cylinder(h = 6, r = 1.2, center = true);\n}\n\n// Assembly\nunion() {\n    difference() {\n        // Main body union\n        union() {\n            body_shell();\n            roof();\n            hood();\n            hatch();\n            windshield();\n            rear_windshield();\n            side_windows();\n            bumper([21, 0, 2]);\n            bumper([-21, 0, 2]);\n        }\n        // Hollow interior\n        translate([0, 0, 5])\n        scale([0.8, 0.8, 0.8])\n        cube([45, 30, 18], center = true);\n    }\n\n    // External parts\n    wheel([10, 15, 3]);\n    wheel([10, -15, 3]);\n    wheel([-10, 15, 3]);\n    wheel([-10, -15, 3]);\n    axles();\n    headlights();\n    taillights();\n    exhaust_pipe();\n}",
    "renders": true
  },
  {
    "vehicle": "suv",
    "openscad_code": "// Realistic SUV - Medium Complexity\n// Designed for 3D printing (no overhangs, 2mm wall thickness)\n\nmodule suv_body() {\n    // Main body\n    difference() {\n        // Main hull\n        hull() {\n            translate([-15, -20, 0]) cube([30, 40, 30]);\n            translate([-10, -18, 30]) cube([20, 36, 25]);\n        }\n        \n        // Wheel wells\n        for(side = [-1, 1]) {\n            translate([side * 18, -15, 5]) rotate([0, 90, 0]) \n                cylinder(h=15, r=9, $fn=32);\n            translate([side * 18, 15, 5]) rotate([0, 90, 0]) \n                cylinder(h=15, r=9, $fn=32);\n        }\n    }\n}\n\nmodule suv_windows() {\n    // Windshield\n    translate([0, -16, 33]) rotate([30, 0, 0])\n        cube([14, 1, 15], center=true);\n    \n    // Rear window\n    translate([0, 16, 33]) rotate([-30, 0, 0])\n        cube([14, 1, 15], center=true);\n    \n    // Side windows\n    for(side = [-1, 1]) {\n        translate([side * 12, 0, 35]) rotate([0, 0, 30 * side])\n            cube([20, 1, 12], center=true);\n    }\n}\n\nmodule suv_wheels() {\n    module wheel() {\n        difference() {\n            // Tire\n            cylinder(h=8, r=9, $fn=32);\n            // Rim\n            translate([0, 0, -1]) cylinder(h=10, r=7, $fn=32);\n            // Spokes\n            for(i = [0:3]) {\n                rotate([0, 0, i * 90])\n                    translate([0, 5, 4]) cube([1, 2, 8], center=true);\n            }\n        }\n    }\n    \n    // Front wheels\n    translate([-18, -15, 0]) wheel();\n    translate([18, -15, 0]) mirror([1, 0, 0]) wheel();\n    \n    // Rear wheels\n    translate([-18, 15, 0]) wheel();\n    translate([18, 15, 0]) mirror([1, 0, 0]) wheel();\n}\n\nmodule suv_details() {\n    // Front grille\n    translate([0, -19.5, 20]) cube([12, 1, 8], center=true);\n    \n    // Headlights\n    for(side = [-1, 1]) {\n        translate([side * 10, -19.5, 22]) \n            cube([3, 1, 3], center=true);\n    }\n    \n    // Taillights\n    for(side = [-1, 1]) {\n        translate([side * 10, 19.5, 22]) \n            cube([3, 1, 3], center=true);\n    }\n    \n    // Roof rails\n    for(side = [-1, 1]) {\n        hull() {\n            translate([side * 12, -15, 55]) \n                cylinder(h=2, r=1, $fn=16);\n            translate([side * 12, 15, 55]) \n                cylinder(h=2, r=1, $fn=16);\n        }\n    }\n    \n    // Bumpers\n    translate([0, -20, 10]) cube([20, 2, 8], center=true);\n    translate([0, 20, 10]) cube([20, 2, 8], center=true);\n}\n\n// Assemble the SUV\nmodule suv() {\n    union() {\n        suv_body();\n        suv_windows();\n        suv_wheels();\n        suv_details();\n    }\n}\n\n// Scale to 80mm length\nscale(0.8) suv();",
    "renders": true
  },
  {
    "vehicle": "truck",
    "openscad_code": "// Realistic medium-complexity 3D-printable truck (approx. 85 mm long)\n\n$fn = 36; // Smoother curves for realism\nwall = 2;  // 3D-printable wall thickness\n\nmodule wheel(r=9, w=6) {\n    difference() {\n        cylinder(h=w, r=r, center=true);\n        cylinder(h=w+1, r=r-wall, center=true); // Hollow tire\n    }\n}\n\nmodule axle() {\n    cylinder(h=30, r=2, center=true);\n}\n\nmodule chassis() {\n    // Main frame\n    translate([0, 0, 8])\n    difference() {\n        cube([80, 30, 16], center=true);\n        translate([0, 0, -1])\n        cube([76, 26, 14], center=true); // Hollow out\n    }\n\n    // Front bumper\n    translate([39, 0, 8])\n    cube([4, 28, 12], center=true);\n\n    // Rear bumper\n    translate([-39, 0, 8])\n    cube([4, 28, 12], center=true);\n}\n\nmodule cab() {\n    translate([20, 0, 22])\n    difference() {\n        cube([30, 28, 28], center=true);\n        translate([0, 0, -1])\n        cube([26, 24, 26], center=true); // Hollow cab\n    }\n\n    // Windshield slope\n    translate([30, 0, 36])\n    rotate([0, 30, 0])\n    cube([20, 26, 2], center=true);\n\n    // Roof\n    translate([20, 0, 40])\n    cube([28, 24, 4], center=true);\n\n    // Side mirrors\n    for(side=[-1,1]) {\n        translate([32, side*15, 28])\n        cube([4, 2, 6], center=true);\n        translate([34, side*18, 28])\n        sphere(r=2);\n    }\n}\n\nmodule bed() {\n    translate([-25, 0, 20])\n    difference() {\n        cube([50, 32, 12], center=true);\n        translate([0, 0, -1])\n        cube([46, 28, 10], center=true); // Hollow bed\n    }\n\n    // Bed sides\n    translate([-25, 16, 28])\n    cube([50, 2, 8], center=true);\n    translate([-25, -16, 28])\n    cube([50, 2, 8], center=true);\n\n    // Tailgate (vertical)\n    translate([-49, 0, 26])\n    cube([2, 28, 20], center=true);\n}\n\nmodule headlights() {\n    for(side=[-1,1]) {\n        translate([40, side*10, 16])\n        sphere(r=3);\n        translate([40, side*10, 16])\n        sphere(r=2.5); // Inner lens\n    }\n}\n\nmodule exhaust() {\n    translate([-10, 18, 24])\n    cylinder(h=30, r=2);\n    translate([-10, 18, 54])\n    sphere(r=3);\n}\n\n// Assemble truck\nunion() {\n    chassis();\n    cab();\n    bed();\n    headlights();\n    exhaust();\n\n    // Wheels and axles\n    for(side=[-1,1]) {\n        // Front axle\n        translate([20, side*18, 8])\n        wheel();\n        translate([20, side*18, 8])\n        rotate([90,0,0])\n        axle();\n\n        // Rear axle\n        translate([-20, side*18, 8])\n        wheel();\n        translate([-20, side*18, 8])\n        rotate([90,0,0])\n        axle();\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "van",
    "openscad_code": "// Medium-complexity realistic van\n// Overall size ~80 mm (L) × 30 mm (W) × 30 mm (H)\n\n$fn = 36;\n\nmodule wheel(r=5, w=3) {\n    // Tire + rim\n    difference() {\n        cylinder(h=w, r=r);          // tire\n        cylinder(h=w+0.1, r=r-1.5);  // rim cavity\n    }\n}\n\nmodule wheels() {\n    // Front left\n    translate([-25, 15, -5]) wheel();\n    // Front right\n    translate([-25, -15, -5]) wheel();\n    // Rear left\n    translate([25, 15, -5]) wheel();\n    // Rear right\n    translate([25, -15, -5]) wheel();\n}\n\nmodule body() {\n    // Main lower box\n    hull() {\n        translate([-30, 0, 0])\n            cube([60, 30, 15], center=true);\n        translate([-30, 0, 10])\n            cube([60, 30, 10], center=true);\n    }\n\n    // Cabin roof\n    hull() {\n        translate([-20, 0, 12])\n            cube([25, 28, 8], center=true);\n        translate([-5, 0, 15])\n            cube([20, 26, 6], center=true);\n    }\n}\n\nmodule windows() {\n    color(\"lightblue\") {\n        // Windshield\n        translate([-28, 0, 13])\n            cube([0.1, 22, 10], center=true);\n        // Side windows\n        for(y=[8,-8])\n            translate([-15, y, 13])\n                cube([20, 0.1, 8], center=true);\n    }\n}\n\nmodule doors() {\n    // Driver door seam\n    translate([-15, 15, 7.5])\n        cube([30, 0.2, 15], center=true);\n    // Sliding door seam\n    translate([5, 15, 7.5])\n        cube([20, 0.2, 15], center=true);\n}\n\nmodule headlights() {\n    // Headlights\n    translate([-30, 8, 5])\n        cube([1, 4, 3], center=true);\n    translate([-30, -8, 5])\n        cube([1, 4, 3], center=true);\n    // Taillights\n    translate([30, 8, 5])\n        cube([1, 4, 3], center=true);\n    translate([30, -8, 5])\n        cube([1, 4, 3], center=true);\n}\n\nmodule grille() {\n    // Front grille\n    translate([-30, 0, 3])\n        cube([0.5, 20, 6], center=true);\n    // Horizontal bars\n    for(z=[1:2:5])\n        translate([-30.2, 0, z])\n            cube([0.1, 18, 0.5], center=true);\n}\n\nmodule mirrors() {\n    // Side mirrors\n    translate([-25, 16, 10])\n        cube([2, 4, 2], center=true);\n    translate([-25, -16, 10])\n        cube([2, 4, 2], center=true);\n}\n\n// Assembly\nunion() {\n    body();\n    windows();\n    doors();\n    headlights();\n    grille();\n    mirrors();\n    wheels();\n}",
    "renders": true
  },
  {
    "vehicle": "convertible",
    "openscad_code": "// Convertible Car - Medium Complexity\n// Scaled for 3D printing (approx 80mm length)\n\n// Global parameters\n$fn = 32;\nscale_factor = 0.4;  // Overall scaling for printing\n\nmodule car_body() {\n    // Main chassis\n    difference() {\n        union() {\n            // Lower body\n            translate([-15, -20, 0])\n                cube([80, 40, 15], center=false);\n                \n            // Upper body slopes\n            translate([-15, -20, 15])\n                cube([80, 40, 10], center=false);\n                \n            // Hood\n            translate([50, -15, 15])\n                cube([30, 30, 8], center=false);\n                \n            // Trunk area\n            translate([-35, -15, 15])\n                cube([20, 30, 8], center=false);\n        }\n        \n        // Wheel wells\n        translate([30, -20, 0])\n            cylinder(h=30, r=10);\n        translate([30, 20, 0])\n            cylinder(h=30, r=10);\n        translate([-20, -20, 0])\n            cylinder(h=30, r=10);\n        translate([-20, 20, 0])\n            cylinder(h=30, r=10);\n            \n        // Windshield area\n        translate([20, -18, 23])\n            cube([30, 36, 15]);\n            \n        // Interior space\n        translate([-10, -17, 15])\n            cube([60, 34, 20]);\n}\n\nmodule wheels() {\n    // Front left\n    translate([30, -20, 0])\n        rotate([90, 0, 0])\n            cylinder(h=8, r=10);\n            \n    // Front right\n    translate([30, 20, 0])\n        rotate([90, 0, 0])\n            cylinder(h=8, r=10);\n            \n    // Rear left\n    translate([-20, -20, 0])\n        rotate([90, 0, 0])\n            cylinder(h=8, r=10);\n            \n    // Rear right\n    translate([-20, 20, 0])\n        rotate([90, 0, 0])\n            cylinder(h=8, r=10);\n}\n\nmodule windshield() {\n    // Windshield frame\n    difference() {\n        translate([35, -18, 23])\n            cube([25, 36, 2]);\n        translate([35, -16, 24])\n            cube([25, 32, 2]);\n    }\n}\n\nmodule seats() {\n    // Driver seat\n    translate([10, -12, 15])\n        cube([15, 12, 10]);\n        \n    // Passenger seat\n    translate([10, 0, 15])\n        cube([15, 12, 10]);\n}\n\nmodule steering_wheel() {\n    translate([25, -6, 25])\n        rotate([90, 0, 0])\n            cylinder(h=8, r=4);\n}\n\nmodule headlights() {\n    // Left headlight\n    translate([65, -12, 18])\n        sphere(r=4);\n        \n    // Right headlight\n    translate([65, 12, 18])\n        sphere(r=4);\n}\n\nmodule taillights() {\n    // Left taillight\n    translate([-25, -12, 18])\n        sphere(r=3);\n        \n    // Right taillight\n    translate([-25, 12, 18])\n        sphere(r=3);\n}\n\n// Assemble the car\nscale([scale_factor, scale_factor, scale_factor]) {\n    union() {\n        car_body();\n        wheels();\n        windshield();\n        seats();\n        steering_wheel();\n        headlights();\n        taillights();\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "wagon",
    "openscad_code": "// Wagon.scad\n// Realistic-style medium-complexity wagon for 3D printing\n// Overall footprint ~70 x 40 x 35 mm\n\n// Parameters\nwheel_d = 18;\nwheel_w = 4;\naxle_d = 4;\nbody_l = 55;\nbody_w = 35;\nbody_h = 20;\nwall_t = 2;\nfloor_t = 2;\n\nmodule wheel() {\n    // Tire\n    difference() {\n        cylinder(d=wheel_d, h=wheel_w, $fn=48);\n        translate([0,0,-0.1])\n            cylinder(d=wheel_d-wheel_w, h=wheel_w+0.2, $fn=48);\n    }\n    // Spokes\n    for(a=[0:60:359])\n        rotate([0,0,a])\n            translate([0, wheel_w/2, 0])\n                rotate([90,0,0])\n                    cube([wheel_w*0.8, 1.5, wheel_d*0.35], center=true);\n}\n\nmodule axle() {\n    // Axle rod\n    rotate([90,0,0])\n        cylinder(d=axle_d, h=body_w+wheel_w*2+4, $fn=16);\n}\n\nmodule body() {\n    difference() {\n        // Outer shell\n        translate([0,0,body_h/2])\n            cube([body_l, body_w, body_h], center=true);\n        // Hollow inside\n        translate([0,0,(body_h-floor_t)/2+floor_t])\n            cube([body_l-wall_t*2, body_w-wall_t*2, body_h-floor_t], center=true);\n    }\n    // Floor\n    translate([0,0,floor_t/2])\n        cube([body_l-wall_t*2, body_w-wall_t*2, floor_t], center=true);\n    // Front wall lower cutout\n    translate([body_l/2-wall_t/2, 0, body_h/4])\n        cube([wall_t, body_w-wall_t*2, body_h/2], center=true);\n}\n\nmodule handle() {\n    // Handle bar\n    translate([-body_l/2-20, 0, body_h/4])\n        rotate([0,0,30])\n            cylinder(d=3, h=20, $fn=12);\n    // Handle grip\n    translate([-body_l/2-25, 0, body_h/4+8])\n        rotate([90,0,0])\n            cylinder(d=5, h=12, center=true, $fn=20);\n    // Upright post\n    translate([-body_l/2, 0, body_h/2])\n        cube([5, 3, 15], center=true);\n}\n\n// Assembly\nunion() {\n    // Wheels and axles\n    translate([body_l/3, 0, 0])\n        axle();\n    translate([body_l/3, -body_w/2-wheel_w/2-2, wheel_d/2])\n        wheel();\n    translate([body_l/3,  body_w/2+wheel_w/2+2, wheel_d/2])\n        wheel();\n    \n    translate([-body_l/3, 0, 0])\n        axle();\n    translate([-body_l/3, -body_w/2-wheel_w/2-2, wheel_d/2])\n        wheel();\n    translate([-body_l/3,  body_w/2+wheel_w/2+2, wheel_d/2])\n        wheel();\n    \n    // Body\n    body();\n    \n    // Handle\n    handle();\n}",
    "renders": true
  },
  {
    "vehicle": "pickup",
    "openscad_code": "// Realistic Pickup Truck - Medium Complexity\n// Dimensions in mm, scaled for 3D printing\nscale_factor = 0.7;\n\nmodule wheel() {\n    // Tire\n    difference() {\n        cylinder(h=8, r=12, $fn=32);\n        translate([0, 0, -0.1])\n            cylinder(h=8.2, r=10, $fn=32);\n    }\n    \n    // Rim\n    color(\"silver\")\n    translate([0, 0, 4])\n        cylinder(h=4, r=9, $fn=6);\n}\n\nmodule wheel_well() {\n    // Wheel arch cutout\n    translate([0, 0, 12])\n        rotate([90, 0, 0])\n            cylinder(h=20, r=14, $fn=32);\n}\n\nmodule cab() {\n    // Main cab body\n    difference() {\n        translate([-30, -25, 12])\n            cube([60, 50, 35]);\n        \n        // Windshield angle\n        translate([-30, -25, 35])\n            rotate([0, -30, 0])\n                cube([40, 50, 20]);\n        \n        // Side windows\n        for(side = [-1, 1]) {\n            translate([-20, side*20, 25])\n                cube([30, 10, 15]);\n        }\n        \n        // Wheel wells\n        for(side = [-1, 1]) {\n            translate([-20, side*22, 0])\n                wheel_well();\n        }\n    }\n    \n    // Roof\n    translate([-30, -20, 42])\n        cube([60, 40, 5]);\n    \n    // Hood\n    translate([30, -20, 22])\n        cube([30, 40, 15]);\n}\n\nmodule bed() {\n    // Bed floor\n    translate([-60, -30, 15])\n        cube([40, 60, 5]);\n    \n    // Bed sides\n    for(side = [-1, 1]) {\n        translate([-60, side*30, 15])\n            cube([40, 5, 20]);\n    }\n    \n    // Bed back\n    translate([-60, -30, 15])\n        cube([5, 60, 20]);\n    \n    // Tailgate\n    rotate([0, 0, 0]) {\n        translate([-65, -30, 15])\n            cube([5, 60, 20]);\n    }\n}\n\nmodule chassis() {\n    // Main frame\n    translate([-35, -30, 0])\n        cube([70, 60, 10]);\n    \n    // Front bumper\n    translate([60, -20, 10])\n        cube([10, 40, 15]);\n    \n    // Rear bumper\n    translate([-70, -20, 10])\n        cube([10, 40, 15]);\n}\n\nmodule lights() {\n    // Headlights\n    for(side = [-1, 1]) {\n        translate([60, side*15, 25])\n            sphere(r=3);\n    }\n    \n    // Taillights\n    for(side = [-1, 1]) {\n        translate([-70, side*15, 25])\n            sphere(r=3);\n    }\n}\n\nmodule mirrors() {\n    for(side = [-1, 1]) {\n        translate([30, side*25, 35])\n            cube([5, 3, 8]);\n    }\n}\n\n// Main assembly\nscale([scale_factor, scale_factor, scale_factor]) {\n    // Base chassis\n    chassis();\n    \n    // Cab\n    cab();\n    \n    // Bed\n    bed();\n    \n    // Wheels\n    for(pos = [[-45, -25], [-45, 25], [45, -25], [45, 25]]) {\n        translate([pos[0], pos[1], 10])\n            wheel();\n    }\n    \n    // Lights\n    lights();\n    \n    // Mirrors\n    mirrors();\n    \n    // Exhaust pipe\n    translate([-50, -35, 20])\n        rotate([90, 0, 0])\n            cylinder(h=30, r=2, $fn=16);\n}",
    "renders": true
  },
  {
    "vehicle": "crossover",
    "openscad_code": "// Crossover SUV - Medium Complexity Realistic Style\n// 3D printable, no overhangs, 90mm length\n\n// Main parameters\nlength = 90;\nwidth = 40;\nheight = 35;\nwheel_d = 20;\nwheel_w = 10;\n\nmodule wheel() {\n    difference() {\n        // Tire\n        cylinder(h=wheel_w, d=wheel_d, $fn=30);\n        \n        // Rim cavity\n        translate([0, 0, -1])\n            cylinder(h=wheel_w+2, d=wheel_d*0.7, $fn=30);\n        \n        // Lug nut holes\n        for(i=[0:4]) {\n            rotate([0, 0, i*72])\n                translate([wheel_d*0.3, 0, wheel_w/2])\n                    cylinder(h=wheel_w+2, d=2, $fn=8);\n        }\n    }\n}\n\nmodule body() {\n    difference() {\n        // Main body with tapered roof\n        union() {\n            // Lower body\n            translate([0, 0, 10])\n                cube([length, width, 15], center=true);\n            \n            // Upper body\n            translate([0, 0, 20])\n                cube([length*0.7, width*0.9, 10], center=true);\n        }\n        \n        // Wheel wells\n        translate([length*0.3, width/2+1, 10])\n            rotate([90, 0, 0])\n                cylinder(h=15, d=wheel_d+4, $fn=30);\n        translate([length*0.3, -width/2-1, 10])\n            rotate([90, 0, 0])\n                cylinder(h=15, d=wheel_d+4, $fn=30);\n        translate([-length*0.3, width/2+1, 10])\n            rotate([90, 0, 0])\n                cylinder(h=15, d=wheel_d+4, $fn=30);\n        translate([-length*0.3, -width/2-1, 10])\n            rotate([90, 0, 0])\n                cylinder(h=15, d=wheel_d+4, $fn=30);\n    }\n}\n\nmodule windows() {\n    // Windshield\n    translate([length*0.35, 0, 25])\n        rotate([0, -15, 0])\n            cube([20, width*0.8, 0.5], center=true);\n    \n    // Rear window\n    translate([-length*0.35, 0, 25])\n        rotate([0, 15, 0])\n            cube([20, width*0.8, 0.5], center=true);\n    \n    // Side windows\n    translate([0, width/2+0.25, 22])\n        cube([length*0.5, 0.5, 8], center=true);\n    translate([0, -width/2-0.25, 22])\n        cube([length*0.5, 0.5, 8], center=true);\n}\n\nmodule details() {\n    // Grille\n    translate([length/2-2, 0, 15])\n        cube([1, width*0.6, 4], center=true);\n    \n    // Headlights\n    translate([length/2-1, width/3, 18])\n        sphere(d=4, $fn=20);\n    translate([length/2-1, -width/3, 18])\n        sphere(d=4, $fn=20);\n    \n    // Taillights\n    translate([-length/2+1, width/3, 18])\n        cube([2, 4, 3], center=true);\n    translate([-length/2+1, -width/3, 18])\n        cube([2, 4, 3], center=true);\n    \n    // Roof rails\n    translate([length*0.2, width/2-3, 30])\n        cube([length*0.3, 2, 2], center=true);\n    translate([length*0.2, -width/2+3, 30])\n        cube([length*0.3, 2, 2], center=true);\n}\n\n// Assembly\nunion() {\n    body();\n    windows();\n    details();\n    \n    // Wheels\n    translate([length*0.3, width/2+wheel_w/2, wheel_d/2])\n        rotate([0, 0, 90])\n            wheel();\n    translate([length*0.3, -width/2-wheel_w/2, wheel_d/2])\n        rotate([0, 0, 90])\n            wheel();\n    translate([-length*0.3, width/2+wheel_w/2, wheel_d/2])\n        rotate([0, 0, 90])\n            wheel();\n    translate([-length*0.3, -width/2-wheel_w/2, wheel_d/2])\n        rotate([0, 0, 90])\n            wheel();\n}",
    "renders": true
  },
  {
    "vehicle": "roadster",
    "openscad_code": "// OpenSCAD Roadster (medium complexity, realistic style)\n\n// Overall scale\nscale_factor = 0.4;\n\n// Main body module\nmodule body() {\n    // Central chassis\n    difference() {\n        union() {\n            // Main body block\n            cube([60, 25, 15], center = true);\n            \n            // Hood section\n            translate([25, 0, 5])\n                cube([35, 22, 10], center = true);\n            \n            // Rear deck\n            translate([-25, 0, 3])\n                cube([25, 22, 8], center = true);\n        }\n        \n        // Cockpit cutout\n        translate([0, 0, 7.5])\n            cube([40, 20, 15], center = true);\n    }\n}\n\n// Wheel module with tire and rim\nmodule wheel() {\n    difference() {\n        // Tire\n        color(\"black\")\n        cylinder(h = 6, r = 10, center = true);\n        \n        // Rim\n        color(\"silver\")\n        translate([0, 0, 1])\n            cylinder(h = 4, r = 7, center = true);\n    }\n}\n\n// Windshield module\nmodule windshield() {\n    difference() {\n        // Main windshield\n        translate([5, 0, 10])\n            rotate([30, 0, 0])\n                cube([20, 22, 2], center = true);\n        \n        // Cutout for seating area\n        translate([5, 0, 8])\n            rotate([30, 0, 0])\n                cube([18, 20, 2.2], center = true);\n    }\n}\n\n// Headlight module\nmodule headlight() {\n    sphere(r = 3);\n}\n\n// Exhaust pipe module\nmodule exhaust() {\n    cylinder(h = 15, r = 2, center = true);\n}\n\n// Side mirror module\nmodule mirror() {\n    translate([0, 5, 0])\n        sphere(r = 2);\n    \n    translate([0, 2.5, 0])\n        cube([2, 5, 1], center = true);\n}\n\n// Main assembly\nscale(scale_factor)\nunion() {\n    // Body\n    color(\"red\")\n    body();\n    \n    // Windshield\n    color(\"lightblue\")\n    windshield();\n    \n    // Wheels\n    translate([20, 13, -8])\n        wheel();\n    translate([20, -13, -8])\n        wheel();\n    translate([-20, 13, -8])\n        wheel();\n    translate([-20, -13, -8])\n        wheel();\n    \n    // Headlights (front)\n    translate([35, 8, -2])\n        color(\"yellow\")\n        headlight();\n    translate([35, -8, -2])\n        color(\"yellow\")\n        headlight();\n    \n    // Taillights (rear)\n    translate([-35, 8, 0])\n        color(\"red\")\n        cube([2, 4, 3], center = true);\n    translate([-35, -8, 0])\n        color(\"red\")\n        cube([2, 4, 3], center = true);\n    \n    // Exhaust pipes\n    translate([-35, 5, -4])\n        rotate([0, 90, 0])\n            color(\"gray\")\n            exhaust();\n    translate([-35, -5, -4])\n        rotate([0, 90, 0])\n            color(\"gray\")\n            exhaust();\n    \n    // Side mirrors\n    translate([10, 12.5, 5])\n        color(\"black\")\n        mirror();\n    translate([10, -12.5, 5])\n        color(\"black\")\n        mirror();\n    \n    // Front grille\n    translate([32, 0, -2])\n        color(\"gray\")\n        cube([2, 16, 4], center = true);\n    \n    // Bumper\n    translate([38, 0, -6])\n        color(\"silver\")\n        cube([4, 24, 3], center = true);\n}",
    "renders": true
  },
  {
    "vehicle": "limousine",
    "openscad_code": "// Realistic Medium-Complexity 3D-Printable Limousine\n// Scale: ~1:160 (N scale), overall length 85 mm, width 32 mm, height 25 mm\n\n$fn = 64;\n\nmodule body_shell() {\n    difference() {\n        // Main body block\n        hull() {\n            translate([-41, -15, 0]) cube([82, 30, 20]);\n            translate([-41, -11, 20]) cube([82, 22, 5]);\n        }\n        // Wheel arches\n        for (x = [-30, 0, 30])\n            translate([x, 16, 8]) rotate([0, 0, 0])\n                cylinder(h = 20, d = 16);\n    }\n}\n\nmodule hood() {\n    // Tapered hood\n    hull() {\n        translate([-41, -15, 0]) cube([20, 30, 20]);\n        translate([-41, -11, 20]) cube([20, 22, 5]);\n        translate([-21, -13, 0]) cube([15, 26, 18]);\n    }\n}\n\nmodule trunk() {\n    // Tapered rear\n    hull() {\n        translate([41, -15, 0]) cube([20, 30, 20]);\n        translate([41, -11, 20]) cube([20, 22, 5]);\n        translate([26, -13, 0]) cube([15, 26, 18]);\n    }\n}\n\nmodule windows() {\n    color(\"lightblue\", 0.5)\n    translate([-40, -10, 20]) cube([80, 20, 3]);\n    // Side windows subdivisions\n    for (x = [-30, -10, 10, 30])\n        translate([x, -10, 20]) cube([1, 20, 3]);\n}\n\nmodule roof() {\n    hull() {\n        translate([-40, -10, 23]) cube([80, 20, 1]);\n    }\n}\n\nmodule wheels() {\n    for (x = [-30, 0, 30]) {\n        // Front wheels\n        translate([x, 18, 8]) rotate([0, 0, 0])\n            cylinder(h = 8, d = 12, center = true);\n        translate([x, 18, 8]) rotate([0, 0, 0])\n            cylinder(h = 6, d = 6, center = true);\n        // Rear wheels\n        translate([x, -18, 8]) rotate([0, 0, 0])\n            cylinder(h = 8, d = 12, center = true);\n        translate([x, -18, 8]) rotate([0, 0, 0])\n            cylinder(h = 6, d = 6, center = true);\n    }\n}\n\nmodule underside_clearance() {\n    // Cutouts for underside wheels and clearance\n    difference() {\n        cube([85, 32, 25]);\n        translate([0, 0, 12]) cube([85, 32, 15]);\n    }\n}\n\nmodule bumpers() {\n    // Front bumper\n    translate([-41, 0, 5]) cube([3, 30, 5]);\n    // Rear bumper\n    translate([38, 0, 5]) cube([3, 30, 5]);\n}\n\nmodule lights() {\n    // Headlights\n    translate([-41, -8, 15]) cube([2, 6, 3]);\n    translate([-41, 8, 15]) cube([2, 6, 3]);\n    // Taillights\n    translate([38, -8, 15]) cube([2, 6, 3]);\n    translate([38, 8, 15]) cube([2, 6, 3]);\n}\n\nunion() {\n    body_shell();\n    hood();\n    trunk();\n    windows();\n    roof();\n    wheels();\n    bumpers();\n    lights();\n}",
    "renders": true
  },
  {
    "vehicle": "minivan",
    "openscad_code": "// Realistic minivan model for 3D printing\n// Medium complexity using only basic OpenSCAD primitives\n// Overall dimensions: 95mm x 45mm x 38mm\n\nmodule wheel(radius, width) {\n    union() {\n        // Tire\n        difference() {\n            cylinder(h=width, r=radius, $fn=30);\n            cylinder(h=width+0.2, r=radius*0.7, $fn=30);\n        }\n        // Rim\n        cylinder(h=width+0.1, r=radius*0.65, $fn=20);\n    }\n}\n\nmodule side_mirror() {\n    union() {\n        // Mirror housing\n        translate([-1, 0, 2]) cube([2, 4, 3]);\n        // Mirror\n        translate([-1.2, 0.5, 2.5]) cube([1.6, 3, 2.4]);\n    }\n}\n\nmodule window_frame(width, height) {\n    difference() {\n        cube([width+2, 1, height+2]);\n        translate([1, -0.5, 1]) cube([width, 2, height]);\n    }\n}\n\n// Main body shell\nunion() {\n    // Lower body\n    translate([5, 5, 5]) cube([85, 35, 15]);\n    \n    // Upper body (tapered)\n    translate([10, 5, 20]) cube([75, 35, 15]);\n    \n    // Hood slope\n    translate([5, 5, 20]) {\n        rotate([0, -10, 0]) {\n            cube([15, 35, 5]);\n        }\n    }\n    \n    // Roof\n    translate([15, 5, 35]) cube([65, 35, 2]);\n    \n    // Rear hatch\n    translate([85, 5, 20]) {\n        rotate([10, 0, 0]) {\n            cube([5, 35, 15]);\n        }\n    }\n}\n\n// Wheels\ntranslate([15, 5, 5]) rotate([90, 0, 0]) wheel(6, 4);\ntranslate([15, 40, 5]) rotate([90, 0, 0]) wheel(6, 4);\ntranslate([75, 5, 5]) rotate([90, 0, 0]) wheel(6, 4);\ntranslate([75, 40, 5]) rotate([90, 0, 0]) wheel(6, 4);\n\n// Windows\n// Windshield\ntranslate([12, 5.5, 22]) rotate([0, -30, 0]) window_frame(20, 12);\n// Side windows\ntranslate([35, 5.5, 22]) window_frame(20, 12);\ntranslate([60, 5.5, 22]) window_frame(20, 12);\n// Rear side windows\ntranslate([35, 39.5, 22]) window_frame(20, 12);\ntranslate([60, 39.5, 22]) window_frame(20, 12);\n// Rear window\ntranslate([87, 15, 22]) rotate([0, 30, 0]) window_frame(25, 12);\n\n// Headlights\ntranslate([5, 10, 15]) cube([2, 6, 3]);\ntranslate([5, 29, 15]) cube([2, 6, 3]);\n\n// Taillights\ntranslate([90, 10, 15]) cube([2, 6, 3]);\ntranslate([90, 29, 15]) cube([2, 6, 3]);\n\n// Side mirrors\ntranslate([10, 5, 25]) side_mirror();\nmirror([0, 1, 0]) translate([10, -45, 25]) side_mirror();\n\n// Door handles\ntranslate([25, 5, 12]) cube([4, 1, 2]);\ntranslate([45, 5, 12]) cube([4, 1, 2]);\ntranslate([65, 5, 12]) cube([4, 1, 2]);\ntranslate([25, 39, 12]) cube([4, 1, 2]);\ntranslate([45, 39, 12]) cube([4, 1, 2]);\ntranslate([65, 39, 12]) cube([4, 1, 2]);\n\n// Front grille\ntranslate([5, 15, 15]) cube([1, 15, 3]);\n\n// License plates\ntranslate([5, 20, 8]) cube([8, 10, 0.5]);\ntranslate([82, 20, 8]) cube([8, 10, 0.5]);",
    "renders": true
  },
  {
    "vehicle": "microcar",
    "openscad_code": "// Microcar - Realistic Medium Complexity\n// Designed for 3D printing with no supports\n\n$fn = 32;\nmodule microcar() {\n    // Main body shell\n    translate([0, 0, 5]) \n        hull() {\n            translate([-15, -20, 0]) cube([30, 40, 20]);\n            translate([-15, -20, 20]) cube([30, 40, 10]);\n        }\n    \n    // Hood\n    translate([-15, -20, 25]) \n        rotate([0, -10, 0])\n        cube([35, 40, 8]);\n    \n    // Roof\n    translate([0, 0, 35]) \n        hull() {\n            translate([-15, -15, 0]) sphere(8);\n            translate([15, -15, 0]) sphere(8);\n            translate([0, 15, 0]) sphere(8);\n        }\n    \n    // Windshield\n    difference() {\n        translate([15, -20, 25]) \n            rotate([0, 60, 0])\n            cube([0.5, 40, 15]);\n        translate([16, -20, 25]) \n            rotate([0, 60, 0])\n            cube([0.5, 40, 15]);\n    }\n    \n    // Rear window\n    difference() {\n        translate([-15, -20, 25]) \n            rotate([0, -60, 0])\n            cube([0.5, 40, 15]);\n        translate([-16, -20, 25]) \n            rotate([0, -60, 0])\n            cube([0.5, 40, 15]);\n    }\n    \n    // Side windows\n    for(side = [-1, 1]) {\n        mirror([0, side, 0]) {\n            difference() {\n                translate([0, 20, 30]) \n                    cube([30, 1, 10]);\n                translate([0, 21, 30]) \n                    cube([30, 1, 10]);\n            }\n        }\n    }\n    \n    // Headlights\n    for(side = [-1, 1]) {\n        translate([18, side * 12, 15]) \n            rotate([0, 90, 0])\n            cylinder(h=2, r1=4, r2=5);\n    }\n    \n    // Taillights\n    for(side = [-1, 1]) {\n        translate([-18, side * 12, 15]) \n            rotate([0, -90, 0])\n            cylinder(h=2, r1=4, r2=5);\n    }\n    \n    // Wheels\n    module wheel() {\n        difference() {\n            cylinder(h=5, r=8);\n            translate([0, 0, -1]) \n                cylinder(h=7, r=3);\n            for(i = [0:5:355]) {\n                rotate([0, 0, i])\n                translate([5, 0, 2.5]) \n                    cube([1, 2, 5]);\n            }\n        }\n    }\n    \n    // Front wheels\n    translate([12, -20, 5]) \n        rotate([90, 0, 0])\n        wheel();\n    translate([12, 20, 5]) \n        rotate([90, 0, 0])\n        wheel();\n    \n    // Rear wheels\n    translate([-12, -20, 5]) \n        rotate([90, 0, 0])\n        wheel();\n    translate([-12, 20, 5]) \n        rotate([90, 0, 0])\n        wheel();\n    \n    // Bumpers\n    translate([20, 0, 8]) \n        cube([2, 40, 4]);\n    translate([-20, 0, 8]) \n        cube([2, 40, 4]);\n    \n    // Door handles\n    for(side = [-1, 1]) {\n        mirror([0, side, 0]) {\n            translate([0, 20, 15]) \n                cube([8, 1, 2]);\n        }\n    }\n    \n    // Exhaust pipe\n    translate([-18, 0, 3]) \n        rotate([0, 90, 0])\n        cylinder(h=10, r=2);\n}\n\nmicrocar();",
    "renders": true
  },
  {
    "vehicle": "roadcar",
    "openscad_code": "// Roadcar - Realistic style, medium complexity\n// Designed for 3D printing (no overhangs, 2mm walls)\n\n// Car dimensions (mm)\ncar_length = 80;\ncar_width = 35;\ncar_height = 25;\nwheel_diameter = 14;\nwheel_width = 7;\n\n// Main body module\nmodule car_body() {\n    // Lower chassis\n    translate([0, 0, wheel_diameter/2]) {\n        difference() {\n            // Main body block\n            cube([car_length, car_width, car_height/2], center=true);\n            \n            // Wheel arches\n            for (x = [-car_length/3, car_length/3]) {\n                translate([x, car_width/2 - 2, -1]) {\n                    rotate([90, 0, 0]) {\n                        cylinder(h=car_width/2 + 2, d=wheel_diameter + 4, center=true);\n                    }\n                }\n                translate([x, -car_width/2 + 2, -1]) {\n                    rotate([90, 0, 0]) {\n                        cylinder(h=car_width/2 + 2, d=wheel_diameter + 4, center=true);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Upper cabin\n    translate([0, 0, car_height/2 + wheel_diameter/2 + 3]) {\n        difference() {\n            hull() {\n                translate([-car_length/4, 0, 0]) \n                    cube([car_length/2, car_width - 4, car_height/2], center=true);\n                translate([car_length/6, 0, 2]) \n                    scale([1.2, 0.9, 0.8]) \n                    cube([car_length/3, car_width - 6, car_height/2], center=true);\n            }\n            \n            // Windows\n            translate([0, 0, 2]) {\n                // Front windshield\n                translate([car_length/6 - 5, 0, car_height/4]) \n                    cube([car_length/8, car_width - 10, car_height/4], center=true);\n                // Rear window\n                translate([-car_length/4 + 5, 0, car_height/4]) \n                    cube([car_length/8, car_width - 10, car_height/4], center=true);\n            }\n        }\n    }\n}\n\n// Wheel module\nmodule wheel() {\n    difference() {\n        // Tire\n        cylinder(h=wheel_width, d=wheel_diameter, center=true, $fn=32);\n        \n        // Rim cavity\n        translate([0, 0, -wheel_width/2 - 0.5]) {\n            cylinder(h=wheel_width + 1, d=wheel_diameter - 4, center=true, $fn=32);\n        }\n        \n        // Spokes pattern\n        for (i = [0:5]) {\n            rotate([0, 0, i * 60]) {\n                translate([0, wheel_diameter/4, 0]) {\n                    cube([2, wheel_diameter/2, wheel_width + 1], center=true);\n                }\n            }\n        }\n    }\n}\n\n// Axle module\nmodule axle() {\n    cylinder(h=car_width + wheel_width + 4, d=4, center=true);\n}\n\n// Headlights\nmodule headlights() {\n    // Front headlights\n    translate([car_length/2 - 2, car_width/4, car_height/4 + wheel_diameter/2]) {\n        sphere(d=3);\n    }\n    translate([car_length/2 - 2, -car_width/4, car_height/4 + wheel_diameter/2]) {\n        sphere(d=3);\n    }\n    \n    // Rear lights\n    translate([-car_length/2 + 2, car_width/4, car_height/4 + wheel_diameter/2]) {\n        cube([2, 4, 2], center=true);\n    }\n    translate([-car_length/2 + 2, -car_width/4, car_height/4 + wheel_diameter/2]) {\n        cube([2, 4, 2], center=true);\n    }\n}\n\n// Assemble the car\nunion() {\n    // Main body\n    car_body();\n    \n    // Wheels and axles\n    for (x = [-car_length/3, car_length/3]) {\n        translate([x, 0, wheel_diameter/2]) {\n            axle();\n            translate([0, car_width/2 + wheel_width/2 + 1, 0]) {\n                wheel();\n            }\n            translate([0, -car_width/2 - wheel_width/2 - 1, 0]) {\n                wheel();\n            }\n        }\n    }\n    \n    // Headlights and details\n    headlights();\n    \n    // Side mirrors\n    translate([car_length/4, car_width/2 + 2, car_height/2 + wheel_diameter/2 + 5]) {\n        cube([3, 4, 2], center=true);\n    }\n    translate([car_length/4, -car_width/2 - 2, car_height/2 + wheel_diameter/2 + 5]) {\n        cube([3, 4, 2], center=true);\n    }\n    \n    // Grille\n    translate([car_length/2 - 1, 0, car_height/4 + wheel_diameter/2 - 2]) {\n        difference() {\n            cube([2, car_width/2, 4], center=true);\n            for (i = [-2:2]) {\n                translate([0, i * 4, 0]) {\n                    cube([2.1, 1, 4.1], center=true);\n                }\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "tourer",
    "openscad_code": "// Realistic Tourer Car - Medium Complexity\n// Overall size ~80mm length, 35mm width, 30mm height\n// Wall thickness 1.5mm throughout for 3D printing\n\n$fn = 32;\n\n// Main body\nmodule body() {\n    difference() {\n        // Main chassis\n        hull() {\n            translate([-35, -15, 0]) cube([70, 30, 12]);\n            translate([-30, -12, 10]) cube([60, 24, 8]);\n        }\n        \n        // Cabin cutout\n        translate([-28, -11, 12]) cube([56, 22, 8]);\n        \n        // Wheel arches - front\n        translate([-20, -16, 0]) cylinder(h=15, r=8);\n        translate([-20, 16, 0]) cylinder(h=15, r=8);\n        \n        // Wheel arches - rear\n        translate([20, -16, 0]) cylinder(h=15, r=8);\n        translate([20, 16, 0]) cylinder(h=15, r=8);\n    }\n}\n\n// Cabin roof\nmodule roof() {\n    translate([-25, -11, 20]) {\n        difference() {\n            hull() {\n                cube([50, 22, 8]);\n                translate([5, 0, 5]) cube([40, 20, 6]);\n            }\n            translate([1, 1, 6]) cube([48, 20, 4]);\n        }\n    }\n}\n\n// Windshield\nmodule windshield() {\n    translate([-24, -11, 20]) {\n        rotate([15, 0, 0]) {\n            difference() {\n                cube([0.5, 22, 10]);\n                translate([0, 1, 1]) cube([1, 20, 8]);\n            }\n        }\n    }\n}\n\n// Rear window\nmodule rear_window() {\n    translate([24, -11, 20]) {\n        rotate([-15, 0, 0]) {\n            difference() {\n                cube([0.5, 22, 10]);\n                translate([0, 1, 1]) cube([1, 20, 8]);\n            }\n        }\n    }\n}\n\n// Side windows (left and right)\nmodule side_windows() {\n    for(side = [-1, 1]) {\n        translate([0, side * 11, 20]) {\n            difference() {\n                translate([-20, 0, 0]) cube([40, 0.5, 8]);\n                translate([-19, 0, 1]) cube([38, 1, 6]);\n            }\n        }\n    }\n}\n\n// Hood with slight curve\nmodule hood() {\n    translate([-35, -15, 12]) {\n        hull() {\n            cube([20, 30, 3]);\n            translate([5, 2.5, 3]) cube([15, 25, 2]);\n            translate([10, 5, 5]) cube([10, 20, 1]);\n        }\n    }\n}\n\n// Trunk\nmodule trunk() {\n    translate([15, -12, 12]) {\n        hull() {\n            cube([20, 24, 3]);\n            translate([2, 2, 3]) cube([16, 20, 2]);\n        }\n    }\n}\n\n// Wheels\nmodule wheel() {\n    difference() {\n        cylinder(h=6, r=8);\n        translate([0, 0, -1]) cylinder(h=8, r=3);\n    }\n}\n\n// Wheel assembly with tire tread pattern\nmodule wheel_with_tread() {\n    difference() {\n        wheel();\n        for(i = [0:15]) {\n            rotate([0, 0, i * 22.5]) {\n                translate([6, -0.5, 2]) cube([2, 1, 2]);\n            }\n        }\n    }\n}\n\n// Headlights\nmodule headlights() {\n    for(side = [-1, 1]) {\n        translate([-33, side * 10, 15]) {\n            sphere(r=3);\n            translate([0, 0, -1]) sphere(r=2.2);\n        }\n    }\n}\n\n// Taillights\nmodule taillights() {\n    for(side = [-1, 1]) {\n        translate([33, side * 10, 15]) {\n            cube([3, 4, 2]);\n            translate([0.5, 0.5, -0.5]) cube([2, 3, 3]);\n        }\n    }\n}\n\n// Side mirrors\nmodule mirrors() {\n    for(side = [-1, 1]) {\n        translate([-10, side * 12, 22]) {\n            rotate([0, side * 20, 0]) {\n                cube([4, 2, 3]);\n                translate([1, 0.5, 2]) sphere(r=2);\n            }\n        }\n    }\n}\n\n// Front grille\nmodule grille() {\n    translate([-35, -8, 12]) {\n        difference() {\n            cube([2, 16, 5]);\n            for(i = [0:3]) {\n                translate([0, -6 + i * 4, 1]) cube([3, 2, 3]);\n            }\n        }\n    }\n}\n\n// Exhaust pipe\nmodule exhaust() {\n    translate([35, 8, 8]) {\n        rotate([0, -10, 0]) {\n            cylinder(h=12, r=2);\n            translate([10, 0, 0]) sphere(r=2.5);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    roof();\n    hood();\n    trunk();\n    windshield();\n    rear_window();\n    side_windows();\n    headlights();\n    taillights();\n    mirrors();\n    grille();\n    exhaust();\n    \n    // Wheels positioned at corners\n    translate([-20, -16, 0]) wheel_with_tread();\n    translate([-20, 16, 0]) wheel_with_tread();\n    translate([20, -16, 0]) wheel_with_tread();\n    translate([20, 16, 0]) wheel_with_tread();\n}",
    "renders": true
  },
  {
    "vehicle": "spyder",
    "openscad_code": "// Spider - Realistic style, medium complexity (~110 lines)\n// 3D printable, no overhangs, 60 mm span\n\nmodule spider() {\n    // Main body\n    difference() {\n        union() {\n            // Cephalothorax (front part)\n            translate([0, 0, 3])\n                scale([1, 0.8, 0.6])\n                    sphere(d = 12, $fn = 32);\n            \n            // Abdomen (back part)\n            translate([-10, 0, 2])\n                scale([1.5, 1.2, 1])\n                    sphere(d = 14, $fn = 32);\n        }\n        \n        // Eye indentations (8 eyes)\n        for (angle = [0, 45, 90, 135]) {\n            rotate([0, 0, angle])\n                translate([5, 3.5, 6])\n                    sphere(d = 1.5, $fn = 16);\n            \n            rotate([0, 0, angle])\n                translate([5, -3.5, 6])\n                    sphere(d = 1.5, $fn = 16);\n        }\n    }\n    \n    // Chelicerae (fangs)\n    module fang() {\n        translate([6, 2, 2])\n            rotate([0, 30, 0])\n                cylinder(h = 8, d1 = 1.5, d2 = 0.5, $fn = 8);\n    }\n    \n    fang();\n    mirror([0, 1, 0]) fang();\n    \n    // Legs (4 pairs)\n    module leg(side, rotation, segments = 4) {\n        // Leg segments get progressively smaller\n        lengths = [12, 10, 8, 6];\n        diameters = [2, 1.5, 1.2, 1];\n        \n        union() {\n            // First segment (coxa)\n            rotate([0, 0, rotation]) {\n                translate([0, side * 2, 0]) {\n                    rotate([0, 0, -30 * side])\n                        rotate([60, 0, 0])\n                            cylinder(h = lengths[0], d = diameters[0], $fn = 8);\n                    \n                    // Remaining segments\n                    translate([0, side * 2, 0])\n                        rotate([0, 0, -15 * side])\n                            for (i = [1:segments-1]) {\n                                rotate([0, 60 - i * 15, 0])\n                                    translate([0, 0, lengths[i-1]])\n                                        cylinder(h = lengths[i], d = diameters[i], $fn = 8);\n                            }\n                }\n            }\n        }\n    }\n    \n    // Generate all 8 legs\n    for (i = [0:3]) {\n        angle = 45 + i * 90;\n        leg(1, angle);  // Left legs\n        leg(-1, angle); // Right legs\n    }\n    \n    // Pedipalps (smaller legs near mouth)\n    module pedipalp(side) {\n        translate([4, side * 2, 2])\n            rotate([0, 0, 45 * side])\n                rotate([45, 0, 0])\n                    cylinder(h = 6, d = 1, $fn = 8);\n    }\n    \n    pedipalp(1);\n    pedipalp(-1);\n}\n\n// Create spider centered at origin\nspider();",
    "renders": true
  },
  {
    "vehicle": "phaeton",
    "openscad_code": "// Phaeton - Victorian open carriage\n// Designed for 3D printing without supports\n\n// Global parameters\n$fn = 30;\nbody_length = 40;\nbody_width = 25;\nbody_height = 8;\nwheel_diameter = 20;\nwheel_width = 4;\naxle_length = 35;\ndriver_seat_height = 15;\npassenger_seat_height = 12;\nroof_height = 20;\n\n// Main assembly\nmodule phaeton() {\n    // Wheels and axles\n    translate([-body_length/2 - 5, 0, wheel_diameter/2])\n        wheel_assembly();\n    \n    translate([body_length/2 + 5, 0, wheel_diameter/2])\n        rotate([0, 180, 0])\n        wheel_assembly();\n    \n    // Axles\n    translate([0, 0, wheel_diameter/2])\n        rotate([90, 0, 0])\n        cylinder(h = axle_length, d = 3);\n    \n    // Body frame\n    translate([0, 0, wheel_diameter/2])\n        body_frame();\n    \n    // Driver seat\n    translate([-body_length/2 + 8, 0, wheel_diameter/2 + driver_seat_height])\n        driver_seat();\n    \n    // Passenger seat\n    translate([body_length/2 - 8, 0, wheel_diameter/2 + passenger_seat_height])\n        passenger_seat();\n    \n    // Folding top\n    translate([body_length/2 - 5, 0, wheel_diameter/2 + body_height + 15])\n        folding_top();\n    \n    // Footboard\n    translate([-body_length/2 + 3, 0, wheel_diameter/2 + 2])\n        footboard();\n    \n    // Shafts\n    translate([-body_length/2 - 20, 0, wheel_diameter/2 - 2])\n        shafts();\n}\n\n// Wheel with spokes\nmodule wheel_assembly() {\n    difference() {\n        // Wheel rim\n        cylinder(h = wheel_width, d = wheel_diameter);\n        \n        // Hub hole\n        translate([0, 0, -1])\n            cylinder(h = wheel_width + 2, d = 5);\n    }\n    \n    // Hub\n    translate([0, 0, wheel_width/2])\n        cylinder(h = wheel_width + 2, d = 6);\n    \n    // Spokes\n    for(i = [0:7]) {\n        rotate([0, 0, i * 45])\n            translate([0, (wheel_diameter - 8)/4, wheel_width/2])\n                cube([2, (wheel_diameter - 8)/2, wheel_width], center = true);\n    }\n}\n\n// Main body frame\nmodule body_frame() {\n    // Floor\n    translate([0, 0, 0])\n        cube([body_length, body_width, body_height], center = true);\n    \n    // Side rails\n    for(side = [-1, 1]) {\n        translate([0, side * (body_width/2 - 1), body_height/2])\n            cube([body_length, 2, body_height], center = true);\n    }\n    \n    // Front and back rails\n    for(end = [-1, 1]) {\n        translate([end * body_length/2, 0, body_height/2])\n            cube([2, body_width, body_height], center = true);\n    }\n}\n\n// Driver seat\nmodule driver_seat() {\n    // Seat base\n    translate([0, 0, 0])\n        cube([12, 20, 3], center = true);\n    \n    // Seat back\n    translate([-5, 0, 2])\n        cube([2, 20, 6], center = true);\n    \n    // Arm rests\n    for(side = [-1, 1]) {\n        translate([0, side * 9, 2])\n            cube([10, 2, 4], center = true);\n    }\n}\n\n// Passenger seat\nmodule passenger_seat() {\n    // Bench\n    translate([0, 0, 0])\n        cube([20, body_width - 4, 3], center = true);\n    \n    // Seat back\n    translate([8, 0, 3])\n        cube([4, body_width - 4, 8], center = true);\n}\n\n// Folding top/canopy\nmodule folding_top() {\n    // Top supports\n    for(side = [-1, 1]) {\n        translate([0, side * (body_width/2 - 2), 0])\n            cylinder(h = roof_height, d = 2);\n    }\n    \n    // Canopy frame\n    translate([0, 0, roof_height])\n        rotate([90, 0, 0])\n        cylinder(h = body_width - 4, d = 2);\n    \n    // Canopy cover\n    translate([0, 0, roof_height])\n        rotate([90, 0, 0])\n        scale([1, 1, 0.3])\n        cylinder(h = body_width - 2, d = body_length - 10);\n}\n\n// Footboard for driver\nmodule footboard() {\n    translate([0, 0, 0])\n        cube([8, body_width - 4, 2], center = true);\n}\n\n// Shafts for horses\nmodule shafts() {\n    // Left shaft\n    translate([0, body_width/2 + 2, 0])\n        cube([30, 2, 2], center = false);\n    \n    // Right shaft\n    translate([0, -body_width/2 - 4, 0])\n        cube([30, 2, 2], center = false);\n    \n    // Cross bar\n    translate([-30, -body_width/2 - 2, 0])\n        cube([2, body_width + 4, 2], center = false);\n}\n\n// Render the complete phaeton\nphaeton();",
    "renders": true
  },
  {
    "vehicle": "cruiser",
    "openscad_code": "// Realistic Cruiser – medium complexity\n// Approx. 85 mm long, 27 mm wide, 35 mm high (waterline to mast top)\n\n$fn = 32;           // smooth curves\n\n// Overall scale factor; 1 = 1 mm\nscale = 1;\n\n// ---- Parameters ----\nhull_l = 85;        // waterline length\nhull_w = 27;        // max beam\nhull_h = 15;        // hull depth from waterline\ndeck_h = 3;         // deck thickness\nbridge_h = 12;      // bridge height above deck\nmast_d = 2.5;       // mast diameter\nmast_h = 20;        // mast total height\nchimney_d = 4;      // funnel diameter\nchimney_h = 8;\ngun_l = 12;         // main gun barrel length\ngun_r = 2;          // gun barrel radius\nlifeboat_l = 12;\nlifeboat_w = 4;\nlifeboat_h = 2;\n\n// ---- Modules ----\n\n// Rounded hull with slight tumblehome\nmodule hull() {\n    difference() {\n        union() {\n            // main hull body\n            hull_profile();\n            // bilge keels (thin fins for roll reduction)\n            for (side = [-1, 1]) {\n                translate([hull_l*0.35, side*hull_w/2 + side*1.5, -hull_h*0.6])\n                    rotate([0, 0, side*5])\n                        cube([hull_l*0.25, 1.5, 3], center = true);\n            }\n        }\n        // cut waterline flat\n        translate([0, 0, -hull_h - 1])\n            cube([hull_l + 2, hull_w + 2, hull_h + 2], center = true);\n    }\n}\n\n// Swept hull shape\nmodule hull_profile() {\n    linear_extrude(height = hull_h, center = false, scale = [0.75, 0.85])\n        translate([0, 0, -hull_h/2])\n            hull_shape_2d();\n}\n\n// 2D outline of hull\nmodule hull_shape_2d() {\n    offset(r = 2)\n        polygon(points = [\n            [-hull_l/2, 0],\n            [ hull_l/2 - 10, 0],\n            [ hull_l/2, hull_w/2 - 8],\n            [ hull_l/2 - 30, hull_w/2],\n            [-hull_l/2 + 10, hull_w/2 - 4]\n        ]);\n}\n\n// Main deck\nmodule deck() {\n    translate([0, 0, hull_h])\n        cube([hull_l - 8, hull_w - 4, deck_h], center = true);\n}\n\n// Bridge superstructure\nmodule bridge() {\n    difference() {\n        // main block\n        translate([0, 0, hull_h + deck_h])\n            cube([hull_l*0.25, hull_w*0.55, bridge_h], center = true);\n        // windows recess\n        translate([0, 0, hull_h + deck_h + bridge_h/2 - 1])\n            cube([hull_l*0.26, hull_w*0.6, 2], center = true);\n    }\n}\n\n// Funnel (chimney)\nmodule funnel() {\n    translate([hull_l*0.1, 0, hull_h + deck_h + bridge_h - 2])\n        cylinder(d1 = chimney_d + 1, d2 = chimney_d, h = chimney_h);\n}\n\n// Mast with crow’s nest\nmodule mast() {\n    translate([hull_l*0.25, 0, hull_h + deck_h])\n        cylinder(d = mast_d, h = mast_h);\n    // crow’s nest\n    translate([hull_l*0.25, 0, hull_h + deck_h + mast_h*0.7])\n        cylinder(d = 5, h = 2);\n}\n\n// Main turret\nmodule turret(pos_x) {\n    translate([pos_x, 0, hull_h + deck_h])\n        rotate([0, 0, 0])\n            union() {\n                // turret body\n                cylinder(d = 10, h = 4);\n                // gun barrel\n                translate([gun_l/2, 0, 2])\n                    rotate([0, 90, 0])\n                        cylinder(r = gun_r, h = gun_l);\n            }\n}\n\n// Lifeboats\nmodule lifeboats() {\n    for (side = [-1, 1]) {\n        for (i = [0:1]) {\n            translate([hull_l*0.2 + i*12, side*(hull_w/2 - 3), hull_h + deck_h + 1])\n                rotate([0, side*15, 0])\n                    lifeboat();\n        }\n    }\n}\n\nmodule lifeboat() {\n    hull()\n        scale([lifeboat_l/10, lifeboat_w/5, lifeboat_h/5])\n            cube([10, 5, 5], center = true);\n}\n\n// ---- Assembly ----\nunion() {\n    hull();\n    deck();\n    bridge();\n    funnel();\n    mast();\n    turret(-hull_l*0.15);\n    turret(hull_l*0.15);\n    lifeboats();\n}",
    "renders": true
  },
  {
    "vehicle": "sportscar",
    "openscad_code": "// Sportscar - Realistic Medium Complexity\n// Dimensions: 90mm x 40mm x 25mm\n\n$fn = 32;\nmodule wheel() {\n    difference() {\n        cylinder(h=4, d=12);\n        translate([0,0,-1]) cylinder(h=6, d=8);\n    }\n}\n\nmodule wheel_arch() {\n    difference() {\n        translate([0,0,2]) scale([1.2,1,1]) sphere(d=14);\n        translate([0,0,-5]) cube(30, center=true);\n    }\n}\n\nmodule side_mirror() {\n    translate([0,5,0]) {\n        cylinder(h=8, d=3);\n        translate([0,4,4]) rotate([90,0,0]) scale([1,0.6,1]) sphere(d=6);\n    }\n}\n\nmodule headlight() {\n    difference() {\n        translate([0,0,2]) scale([1,0.5,1]) sphere(d=8);\n        translate([0,0,2.1]) scale([0.8,0.4,0.8]) sphere(d=7);\n    }\n}\n\nmodule taillight() {\n    difference() {\n        cube([10,4,6], center=true);\n        translate([0,2.1,0]) cube([9,3,5], center=true);\n    }\n}\n\n// Main body\ndifference() {\n    // Base chassis\n    union() {\n        // Lower body\n        translate([0,0,3]) cube([80,35,8], center=true);\n        \n        // Cabin\n        translate([5,0,11]) scale([0.7,0.9,0.6]) cube([60,32,12], center=true);\n        \n        // Hood slope\n        translate([-20,0,11]) rotate([30,0,0]) cube([40,33,8], center=true);\n        \n        // Rear deck\n        translate([25,0,11]) rotate([-15,0,0]) cube([30,33,6], center=true);\n        \n        // Front bumper\n        translate([-38,0,3]) cube([6,30,6], center=true);\n        \n        // Rear bumper\n        translate([38,0,3]) cube([6,30,6], center=true);\n    }\n    \n    // Wheel cutouts\n    translate([-25,-18,3]) wheel_arch();\n    translate([-25,18,3]) wheel_arch();\n    translate([25,-18,3]) wheel_arch();\n    translate([25,18,3]) wheel_arch();\n    \n    // Windows\n    translate([5,0,15]) scale([0.65,0.85,0.5]) cube([55,28,10], center=true);\n}\n\n// Wheels\ntranslate([-25,-18,3]) rotate([90,0,0]) wheel();\ntranslate([-25,18,3]) rotate([90,0,0]) wheel();\ntranslate([25,-18,3]) rotate([90,0,0]) wheel();\ntranslate([25,18,3]) rotate([90,0,0]) wheel();\n\n// Side mirrors\ntranslate([5,17.5,14]) side_mirror();\ntranslate([5,-17.5,14]) mirror([0,1,0]) side_mirror();\n\n// Headlights\ntranslate([-36,10,5]) headlight();\ntranslate([-36,-10,5]) headlight();\n\n// Taillights\ntranslate([36,10,5]) taillight();\ntranslate([36,-10,5]) taillight();\n\n// Exhaust pipes\ntranslate([38,8,3]) rotate([90,0,0]) cylinder(h=8, d=4);\ntranslate([38,-8,3]) rotate([90,0,0]) cylinder(h=8, d=4);\n\n// Spoiler\ntranslate([30,0,18]) difference() {\n    cube([20,34,2], center=true);\n    translate([0,0,-1]) cube([18,32,4], center=true);\n}\ntranslate([30,0,18]) cube([2,36,4], center=true);",
    "renders": true
  },
  {
    "vehicle": "roadcruiser",
    "openscad_code": "// 1:18-scale road-cruiser sedan (≈90 mm long)\n// Wheels, body, windows, lights – all printable, minimal overhangs\n// Wall thickness 1.2 mm everywhere\n\n// ---------- Global parameters ----------\nwheel_r   = 9;\nwheel_w   = 4;\nbody_len  = 90;\nbody_wid  = 38;\nbody_hgt  = 25;\nhood_len  = 25;\n\n// ---------- Wheel module ----------\nmodule wheel() {\n    difference() {\n        cylinder(r=wheel_r, h=wheel_w, $fn=32);      // tyre\n        translate([0,0,-1])\n            cylinder(r=wheel_r-2.4, h=wheel_w+2);    // rim recess\n    }\n}\n\n// ---------- Axle with two wheels ----------\nmodule axle() {\n    translate([-body_wid/2 - wheel_w - 1, 0, 0]) wheel();\n    translate([ body_wid/2 + wheel_w + 1, 0, 0]) mirror([1,0,0]) wheel();\n}\n\n// ---------- Front axle ----------\ntranslate([body_len*0.75, 0, wheel_r]) axle();\n\n// ---------- Rear axle ----------\ntranslate([body_len*0.20, 0, wheel_r]) axle();\n\n// ---------- Main body shell ----------\nunion() {\n    // Cabin block\n    translate([body_len*0.55, 0, wheel_r])\n        cube([hood_len*1.1, body_wid, body_hgt], center=true);\n\n    // Hood\n    translate([body_len*0.85, 0, wheel_r - 2])\n        cube([hood_len, body_wid*0.9, body_hgt - 4], center=true);\n\n    // Trunk\n    translate([body_len*0.18, 0, wheel_r - 2])\n        cube([hood_len*0.8, body_wid*0.9, body_hgt - 4], center=true);\n}\n\n// ---------- Roof ----------\ntranslate([body_len*0.55, 0, wheel_r + body_hgt/2 + 6])\n    cube([hood_len*1.1, body_wid*0.7, 8], center=true);\n\n// ---------- Windows ----------\ndifference() {\n    // Windshield\n    translate([body_len*0.70, 0, wheel_r + body_hgt/2 + 4])\n        rotate([0,15,0])\n            cube([12, body_wid*0.65, 7], center=true);\n    // Rear window\n    translate([body_len*0.40, 0, wheel_r + body_hgt/2 + 4])\n        rotate([0,-15,0])\n            cube([12, body_wid*0.65, 7], center=true);\n}\n\n// ---------- Headlights ----------\nfor (x=[body_len-4, body_len-7])\n    translate([x, body_wid/2 - 4, wheel_r - 1])\n        sphere(r=2, $fn=12);\nfor (x=[body_len-4, body_len-7])\n    translate([x, -body_wid/2 + 4, wheel_r - 1])\n        sphere(r=2, $fn=12);\n\n// ---------- Taillights ----------\nfor (x=[4, 7])\n    translate([x, body_wid/2 - 4, wheel_r - 1])\n        sphere(r=2, $fn=12);\nfor (x=[4, 7])\n    translate([x, -body_wid/2 + 4, wheel_r - 1])\n        sphere(r=2, $fn=12);\n\n// ---------- Side mirrors ----------\ntranslate([body_len*0.65, body_wid/2 + 3, wheel_r + body_hgt/2 + 6])\n    cube([3, 2, 2], center=true);\ntranslate([body_len*0.65, -body_wid/2 - 3, wheel_r + body_hgt/2 + 6])\n    cube([3, 2, 2], center=true);\n\n// ---------- Underside clearance ----------\ntranslate([body_len/2, 0, wheel_r - 6])\n    cube([body_len + 2, body_wid, 1], center=true);",
    "renders": true
  },
  {
    "vehicle": "saloon",
    "openscad_code": "// Saloon building with printable walls and recognizable features\n// Overall footprint: ~70 x 50 x 55 mm\n\n$fa = 2;\n$fs = 0.5;\n\n// Main body\nmodule main_building() {\n    difference() {\n        // Lower floor\n        cube([60, 40, 30], center = true);\n        \n        // Door opening on front face\n        translate([0, -20.1, -10])\n            cube([12, 2, 20], center = true);\n        \n        // Window left of door\n        translate([-15, -20.1, 0])\n            cube([10, 2, 12], center = true);\n        \n        // Window right of door\n        translate([15, -20.1, 0])\n            cube([10, 2, 12], center = true);\n    }\n}\n\n// Upper floor / overhang\nmodule upper_floor() {\n    translate([0, 0, 30])\n    difference() {\n        // Balcony\n        cube([70, 50, 4], center = true);\n        \n        // Balcony cutout\n        translate([0, 0, -2])\n            cube([60, 40, 8], center = true);\n    }\n}\n\n// Roof\nmodule roof() {\n    translate([0, 0, 36])\n    rotate([0, 0, 45])\n    scale([1, 0.7, 1])\n    cube([70, 70, 20], center = true);\n}\n\n// Columns supporting balcony\nmodule columns() {\n    for (x = [-25, 25]) {\n        translate([x, -20, 15])\n        cylinder(h = 16, r = 3, center = true);\n    }\n}\n\n// Doors\nmodule doors() {\n    // Saloon doors (swing half-doors)\n    translate([-5, -20.9, -5])\n    cube([5, 1, 15], center = true);\n    \n    translate([5, -20.9, -5])\n    cube([5, 1, 15], center = true);\n}\n\n// Windows\nmodule windows() {\n    // Left window\n    translate([-15, -20.9, 0])\n    cube([8, 0.5, 10], center = true);\n    \n    // Right window\n    translate([15, -20.9, 0])\n    cube([8, 0.5, 10], center = true);\n}\n\n// Sign\nmodule sign() {\n    translate([0, 0, 40])\n    rotate([0, 0, 0])\n    cube([25, 3, 8], center = true);\n}\n\n// Steps\nmodule steps() {\n    translate([0, -30, -17])\n    for (i = [0:2]) {\n        translate([0, 0, i * 2])\n        cube([20 + i * 4, 3, 2], center = true);\n    }\n}\n\n// Assemble the saloon\nunion() {\n    main_building();\n    upper_floor();\n    columns();\n    roof();\n    doors();\n    windows();\n    sign();\n    steps();\n}",
    "renders": true
  },
  {
    "vehicle": "berline",
    "openscad_code": "// Realistic Berlin 3D Printable Car (Medium Complexity)\n// Scale: ~80mm length\n\n// Main parameters\ncar_length = 80;\ncar_width = 35;\ncar_height = 25;\nwheel_diameter = 12;\nwall_thickness = 1.5;\n\n// Color definitions\ncolor_body = [0.2, 0.4, 0.8];\ncolor_tires = [0.1, 0.1, 0.1];\ncolor_windows = [0.7, 0.8, 0.9];\ncolor_lights = [1, 1, 0.8];\ncolor_grille = [0.3, 0.3, 0.3];\n\n// Main body module\nmodule car_body() {\n    color(color_body)\n    union() {\n        // Lower body (chassis)\n        translate([0, 0, wheel_diameter/2])\n        cube([car_length, car_width, car_height/2], center=true);\n        \n        // Upper body (cabin)\n        translate([-5, 0, car_height/2 + wheel_diameter/2])\n        cube([car_length*0.7, car_width*0.9, car_height/2], center=true);\n        \n        // Hood slope\n        translate([car_length*0.25, 0, car_height*0.6 + wheel_diameter/2])\n        rotate([0, 10, 0])\n        cube([car_length*0.3, car_width*0.85, car_height*0.3], center=true);\n        \n        // Trunk slope\n        translate([-car_length*0.3, 0, car_height*0.6 + wheel_diameter/2])\n        rotate([0, -10, 0])\n        cube([car_length*0.25, car_width*0.85, car_height*0.25], center=true);\n    }\n}\n\n// Window module\nmodule windows() {\n    color(color_windows)\n    union() {\n        // Windshield\n        translate([15, 0, car_height*0.75 + wheel_diameter/2])\n        rotate([0, -30, 0])\n        cube([20, car_width*0.75, 0.5], center=true);\n        \n        // Rear window\n        translate([-20, 0, car_height*0.75 + wheel_diameter/2])\n        rotate([0, 30, 0])\n        cube([18, car_width*0.75, 0.5], center=true);\n        \n        // Side windows (left)\n        translate([0, car_width/2 + 0.1, car_height*0.75 + wheel_diameter/2])\n        cube([car_length*0.5, 0.5, car_height*0.3], center=true);\n        \n        // Side windows (right)\n        translate([0, -car_width/2 - 0.1, car_height*0.75 + wheel_diameter/2])\n        cube([car_length*0.5, 0.5, car_height*0.3], center=true);\n    }\n}\n\n// Wheel module\nmodule wheel(pos_x, pos_y) {\n    translate([pos_x, pos_y, 0])\n    union() {\n        // Tire\n        color(color_tires)\n        cylinder(h=wall_thickness*2, d=wheel_diameter, center=true);\n        \n        // Rim\n        color([0.5, 0.5, 0.5])\n        translate([0, 0, wall_thickness/2])\n        cylinder(h=wall_thickness, d=wheel_diameter*0.7, center=true);\n        \n        // Rim details\n        for(i=[0:5]) {\n            rotate([0, 0, i*60])\n            translate([wheel_diameter*0.3, 0, 0])\n            cube([wheel_diameter*0.1, wall_thickness*0.8, wall_thickness], center=true);\n        }\n    }\n}\n\n// Headlights module\nmodule headlights() {\n    color(color_lights)\n    union() {\n        // Left headlight\n        translate([car_length/2 - 2, car_width/2 - 3, car_height/3 + wheel_diameter/2])\n        sphere(d=3);\n        \n        // Right headlight\n        translate([car_length/2 - 2, -car_width/2 + 3, car_height/3 + wheel_diameter/2])\n        sphere(d=3);\n        \n        // Taillights\n        translate([-car_length/2 + 2, car_width/2 - 3, car_height/3 + wheel_diameter/2])\n        sphere(d=2.5);\n        \n        translate([-car_length/2 + 2, -car_width/2 + 3, car_height/3 + wheel_diameter/2])\n        sphere(d=2.5);\n    }\n}\n\n// Grille module\nmodule grille() {\n    color(color_grille)\n    translate([car_length/2 - 1, 0, car_height/3 + wheel_diameter/2])\n    cube([2, car_width*0.6, car_height/4], center=true);\n    \n    // Grille details\n    color([0.1, 0.1, 0.1])\n    for(i=[-2:2]) {\n        translate([car_length/2 - 0.5, i*4, car_height/3 + wheel_diameter/2])\n        cube([1, 1, car_height/6], center=true);\n    }\n}\n\n// Side mirrors\nmodule mirrors() {\n    color(color_body)\n    union() {\n        // Left mirror\n        translate([car_length*0.1, car_width/2 + 1, car_height*0.7 + wheel_diameter/2])\n        union() {\n            cube([2, 1, 1], center=true);\n            translate([1, 1.5, 0])\n            sphere(d=2);\n        }\n        \n        // Right mirror\n        translate([car_length*0.1, -car_width/2 - 1, car_height*0.7 + wheel_diameter/2])\n        mirror([0, 1, 0])\n        union() {\n            cube([2, 1, 1], center=true);\n            translate([1, 1.5, 0])\n            sphere(d=2);\n        }\n    }\n}\n\n// License plates\nmodule license_plates() {\n    color([0.9, 0.9, 0.9])\n    union() {\n        // Front plate\n        translate([car_length/2 + 0.1, 0, wheel_diameter/2])\n        cube([0.5, 8, 4], center=true);\n        \n        // Rear plate\n        translate([-car_length/2 - 0.1, 0, wheel_diameter/2])\n        cube([0.5, 8, 4], center=true);\n    }\n}\n\n// Assemble the car\nunion() {\n    car_body();\n    windows();\n    \n    // Wheels positioned for stability\n    wheel(car_length*0.3, car_width/2 + 1);\n    wheel(car_length*0.3, -car_width/2 - 1);\n    wheel(-car_length*0.3, car_width/2 + 1);\n    wheel(-car_length*0.3, -car_width/2 - 1);\n    \n    headlights();\n    grille();\n    mirrors();\n    license_plates();\n}",
    "renders": true
  },
  {
    "vehicle": "cabriolet",
    "openscad_code": "// Medium complexity 3D printable cabriolet\n// Overall length ≈ 90 mm\n\n$fs = 0.5;\n$fa = 2;\n\nmodule wheel() {\n    // Tire + rim\n    rotate([90,0,0])\n    difference() {\n        cylinder(h=6, d=15, center=true);\n        cylinder(h=7, d=8, center=true);\n    }\n}\n\nmodule axle() {\n    // Axle bar\n    translate([0,0,0])\n    rotate([0,90,0])\n    cylinder(h=38, d=4, center=true);\n}\n\nmodule wheels() {\n    // Front wheels\n    translate([-30, 20, -7]) wheel();\n    translate([-30,-20, -7]) wheel();\n    // Rear wheels\n    translate([ 30, 20, -7]) wheel();\n    translate([ 30,-20, -7]) wheel();\n    // Axles\n    translate([-30, 0, -7]) axle();\n    translate([ 30, 0, -7]) axle();\n}\n\nmodule body() {\n    // Lower body\n    hull() {\n        translate([-32, -20, 0]) cube([64,40,12], center=true);\n        translate([ 32, -20, 0]) cube([64,40,12], center=true);\n    }\n    \n    // Hood\n    translate([-32, 0, 12])\n    rotate([0,0,0])\n    cube([30,38,6], center=true);\n    \n    // Cabin floor\n    translate([ 0, 0, 12])\n    cube([40,38,4], center=true);\n    \n    // Rear trunk\n    translate([30, 0, 12])\n    cube([20,38,6], center=true);\n}\n\nmodule windshield() {\n    // Windshield frame\n    translate([-15, 0, 20])\n    rotate([30,0,0])\n    cube([2,36,20], center=true);\n}\n\nmodule seats() {\n    // Driver seat\n    translate([-5, -10, 14])\n    cube([10,8,10], center=true);\n    // Passenger seat\n    translate([-5, 10, 14])\n    cube([10,8,10], center=true);\n}\n\nmodule steering_wheel() {\n    // Steering wheel\n    translate([-18, -10, 22])\n    rotate([0,90,0])\n    cylinder(h=10, d=8, center=true);\n}\n\nmodule headlights() {\n    // Headlights\n    translate([-35, 15, 8])\n    sphere(d=6);\n    translate([-35,-15, 8])\n    sphere(d=6);\n}\n\nmodule taillights() {\n    // Taillights\n    translate([ 40, 15, 8])\n    sphere(d=5);\n    translate([ 40,-15, 8])\n    sphere(d=5);\n}\n\nunion() {\n    body();\n    wheels();\n    windshield();\n    seats();\n    steering_wheel();\n    headlights();\n    taillights();\n}",
    "renders": true
  },
  {
    "vehicle": "estate",
    "openscad_code": "// OpenSCAD Estate Model – medium complexity, realistic, 3D-printable\n// Overall footprint ~70 mm x 50 mm x 35 mm\n\n$fn = 32; // smooth curves\n\nmodule base() {\n    // 2 mm thick ground plate\n    cube([72, 52, 2], center = true);\n}\n\nmodule walls() {\n    // main house shell – 2 mm walls\n    difference() {\n        translate([0, 0, 10.5])\n            cube([40, 30, 21], center = true);\n        translate([0, 0, 11])\n            cube([36, 26, 20], center = true);\n    }\n}\n\nmodule roof() {\n    // pitched roof – no overhangs\n    rotate([0, 90, 0])\n        linear_extrude(height = 40, center = true, convexity = 10)\n            polygon(points = [[-15, 0], [15, 0], [0, 12]]);\n}\n\nmodule chimney() {\n    // simple rectangular chimney on roof ridge\n    translate([10, 0, 23])\n        cube([4, 4, 8], center = true);\n}\n\nmodule door() {\n    // recessed front door\n    translate([0, -15.1, 3])\n        cube([6, 1, 8], center = true);\n}\n\nmodule windows() {\n    // four recessed windows\n    for (x = [-10, 10])\n        for (y = [0, 7]) {\n            translate([x, y > 3 ? -14.9 : 14.9, 10])\n                cube([4, 1, 5], center = true);\n        }\n}\n\nmodule garage() {\n    // attached garage, slightly lower\n    difference() {\n        translate([-30, 0, 7])\n            cube([20, 26, 14], center = true);\n        translate([-30, 0, 7.5])\n            cube([18, 24, 13], center = true);\n    }\n}\n\nmodule garage_door() {\n    // roll-up garage door recess\n    translate([-39.9, 0, 4])\n        cube([1, 16, 8], center = true);\n}\n\nmodule trees() {\n    // simple cylindrical trees along sides\n    for (side = [-1, 1])\n        translate([side * 35, side * 20, 0])\n            union() {\n                cylinder(h = 15, d = 4, center = false);\n                translate([0, 0, 15])\n                    sphere(d = 8);\n            }\n}\n\nunion() {\n    base();\n    walls();\n    roof();\n    chimney();\n    door();\n    windows();\n    garage();\n    garage_door();\n    trees();\n}",
    "renders": true
  },
  {
    "vehicle": "shootingbrake",
    "openscad_code": "// Shooting Brake - Realistic Style, Medium Complexity\n// Dimensions in mm, ready for 3D printing\n\n$fn = 32;\n\n// Overall scale\nscale_factor = 1;\n\n// Main dimensions\nbody_length = 80;\nbody_width = 36;\nbody_height = 30;\n\n// Wheel parameters\nwheel_radius = 8;\nwheel_width = 4;\nwheelbase = 50;\n\n// Ground clearance\nclearance = 6;\n\nmodule wheel() {\n    difference() {\n        cylinder(h = wheel_width, r = wheel_radius, center = true);\n        cylinder(h = wheel_width + 1, r = wheel_radius - 3, center = true);\n    }\n}\n\nmodule wheel_arch() {\n    difference() {\n        translate([0, 0, wheel_radius/2])\n            cube([wheel_radius * 2.5, wheel_width + 2, wheel_radius], center = true);\n        translate([0, 0, -wheel_radius/2])\n            cylinder(h = wheel_width + 4, r = wheel_radius + 1, center = true);\n    }\n}\n\nmodule body() {\n    // Main lower body\n    hull() {\n        translate([-body_length/2 + 10, 0, clearance + body_height/2 - 5])\n            cube([body_length - 20, body_width, body_height - 5], center = true);\n        translate([body_length/2 - 15, 0, clearance + body_height/2])\n            cube([body_length/2 - 10, body_width - 8, body_height], center = true);\n    }\n    \n    // Roof line\n    translate([-body_length/2 + 5, 0, clearance + body_height + 5])\n        cube([body_length - 10, body_width - 6, 5], center = true);\n    \n    // Hood slope\n    hull() {\n        translate([-body_length/2 + 15, 0, clearance + body_height/2])\n            cube([20, body_width - 4, body_height - 2], center = true);\n        translate([-body_length/2, 0, clearance + body_height/2 + 5])\n            cube([20, body_width - 4, body_height - 10], center = true);\n    }\n    \n    // Rear hatch\n    translate([body_length/2 - 12, 0, clearance + body_height/2 + 2])\n        cube([24, body_width - 8, body_height], center = true);\n}\n\nmodule windows() {\n    color(\"lightblue\", 0.6) {\n        // Windshield\n        translate([-body_length/2 + 5, 0, clearance + body_height/2 + 8])\n            rotate([0, -15, 0])\n            cube([18, body_width - 6, 14], center = true);\n        \n        // Side windows\n        for(y = [-body_width/2 + 2, body_width/2 - 2]) {\n            translate([0, y, clearance + body_height + 2])\n                cube([body_length - 20, 2, 8], center = true);\n        }\n        \n        // Rear window\n        translate([body_length/2 - 12, 0, clearance + body_height/2 + 8])\n            rotate([0, 75, 0])\n            cube([20, body_width - 10, 12], center = true);\n    }\n}\n\nmodule details() {\n    // Front grille\n    translate([-body_length/2 + 1, 0, clearance + body_height/2])\n        cube([2, body_width - 10, 8], center = true);\n    \n    // Headlights\n    for(x = [-body_length/2 + 2, -body_length/2 + 2])\n    for(y = [-body_width/2 + 4, body_width/2 - 4])\n        translate([x, y, clearance + body_height/2 + 2])\n            sphere(r = 2);\n    \n    // Taillights\n    for(y = [-body_width/2 + 4, body_width/2 - 4])\n        translate([body_length/2 - 2, y, clearance + body_height/2 + 2])\n            cube([2, 4, 3], center = true);\n    \n    // Side mirrors\n    for(y = [-body_width/2 - 2, body_width/2 + 2]) {\n        translate([-body_length/2 + 20, y, clearance + body_height + 8])\n            cube([4, 2, 3], center = true);\n    }\n    \n    // Roof rails\n    for(y = [-body_width/2 + 3, body_width/2 - 3]) {\n        translate([0, y, clearance + body_height + 8])\n            cube([body_length - 10, 2, 2], center = true);\n    }\n}\n\n// Assembly\nscale([scale_factor, scale_factor, scale_factor]) {\n    union() {\n        body();\n        \n        // Wheels and arches\n        for(x = [-wheelbase/2, wheelbase/2])\n        for(y = [-body_width/2 - wheel_width/2 - 1, body_width/2 + wheel_width/2 + 1]) {\n            translate([x, y, clearance])\n                wheel_arch();\n            translate([x, y, wheel_radius])\n                wheel();\n        }\n        \n        windows();\n        details();\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "fastback",
    "openscad_code": "// Fastback model - realistic style, medium complexity\n// Designed for 3D printing - no overhangs, 2mm wall thickness\n\n// Overall dimensions: 90mm long, 40mm wide, 30mm high\n$fn = 32;\n\n// Main body module\nmodule fastback_body() {\n    // Lower chassis\n    translate([0, 0, 5]) {\n        difference() {\n            cube([85, 35, 10], center = true);\n            cube([81, 31, 11], center = true);\n        }\n    }\n    \n    // Passenger compartment with fastback roof\n    hull() {\n        // Front windscreen area\n        translate([-25, 0, 15]) {\n            rotate([15, 0, 0]) {\n                cube([20, 30, 25], center = true);\n            }\n        }\n        \n        // Roof peak\n        translate([5, 0, 25]) {\n            cube([20, 28, 15], center = true);\n        }\n        \n        // Rear fastback slope\n        translate([30, 0, 20]) {\n            rotate([-25, 0, 0]) {\n                cube([25, 28, 18], center = true);\n            }\n        }\n    }\n}\n\n// Wheels module\nmodule wheels() {\n    for(side = [-1, 1]) {\n        // Front wheels\n        translate([-30, side * 20, 5]) {\n            difference() {\n                cylinder(h = 8, r = 8, center = true);\n                cylinder(h = 9, r = 4, center = true);\n            }\n        }\n        \n        // Rear wheels\n        translate([30, side * 20, 5]) {\n            difference() {\n                cylinder(h = 8, r = 8, center = true);\n                cylinder(h = 9, r = 4, center = true);\n            }\n        }\n    }\n}\n\n// Windows\nmodule windows() {\n    // Windshield\n    translate([-25, 0, 20]) {\n        rotate([75, 0, 0]) {\n            difference() {\n                cube([18, 28, 2], center = true);\n                translate([0, 0, -1]) cube([16, 26, 3], center = true);\n            }\n        }\n    }\n    \n    // Side windows\n    for(side = [-1, 1]) {\n        translate([0, side * 15.5, 22]) {\n            rotate([0, side * 10, 0]) {\n                cube([40, 1, 12], center = true);\n            }\n        }\n    }\n    \n    // Rear window\n    translate([30, 0, 22]) {\n        rotate([105, 0, 0]) {\n            difference() {\n                cube([20, 28, 2], center = true);\n                translate([0, 0, -1]) cube([18, 26, 3], center = true);\n            }\n        }\n    }\n}\n\n// Details module\nmodule details() {\n    // Front grille\n    translate([-42, 0, 8]) {\n        difference() {\n            cube([4, 30, 8], center = true);\n            for(i = [-3:3]) {\n                translate([0, i * 3, 0]) {\n                    cube([5, 2, 6], center = true);\n                }\n            }\n        }\n    }\n    \n    // Headlights\n    for(side = [-1, 1]) {\n        translate([-40, side * 12, 10]) {\n            sphere(r = 3);\n        }\n    }\n    \n    // Taillights\n    for(side = [-1, 1]) {\n        translate([40, side * 12, 12]) {\n            cube([3, 6, 4], center = true);\n        }\n    }\n    \n    // Exhaust pipes\n    translate([42, 0, 5]) {\n        cylinder(h = 10, r = 2);\n    }\n    translate([42, -7, 5]) {\n        cylinder(h = 10, r = 2);\n    }\n}\n\n// Main assembly\nunion() {\n    fastback_body();\n    wheels();\n    windows();\n    details();\n}",
    "renders": true
  },
  {
    "vehicle": "liftback",
    "openscad_code": "// Liftback car - medium complexity realistic style\n// Designed for 3D printing (no overhangs > 45 degrees)\n\n// Car dimensions (in mm)\ncar_length = 85;\ncar_width = 40;\ncar_height = 25;\nwheel_radius = 8;\nwheel_width = 4;\n\n// Main body module\nmodule body() {\n    difference() {\n        // Main body shell\n        hull() {\n            // Front hood\n            translate([-5, 0, wheel_radius + 2])\n                cube([40, car_width, 8], center=true);\n            \n            // Passenger cabin\n            translate([25, 0, wheel_radius + 6])\n                cube([30, car_width - 6, 12], center=true);\n            \n            // Liftback rear\n            translate([45, 0, wheel_radius + 4])\n                cube([25, car_width - 4, 10], center=true);\n        }\n        \n        // Windows\n        translate([25, 0, wheel_radius + 14])\n            cube([28, car_width - 10, 6], center=true);\n            \n        // Windshield\n        translate([10, 0, wheel_radius + 10])\n            rotate([0, -15, 0])\n            cube([20, car_width - 8, 0.5], center=true);\n            \n        // Rear window\n            translate([40, 0, wheel_radius + 10])\n            rotate([0, 15, 0])\n            cube([18, car_width - 8, 0.5], center=true);\n    }\n    \n    // Roof details\n    translate([25, 0, wheel_radius + 18])\n        cube([30, car_width - 6, 1], center=true);\n}\n\n// Wheel module\nmodule wheel() {\n    difference() {\n        // Tire\n        cylinder(h=wheel_width, r=wheel_radius, center=true, $fn=32);\n        \n        // Rim\n        cylinder(h=wheel_width + 0.5, r=wheel_radius - 2, center=true, $fn=32);\n        \n        // Lug nuts\n        for(i=[0:5]) {\n            rotate([0, 0, i * 60])\n                translate([wheel_radius - 1, 0, 0])\n                cylinder(h=wheel_width + 1, r=1, center=true, $fn=12);\n        }\n    }\n}\n\n// Side mirrors\nmodule side_mirror() {\n    translate([15, car_width/2 + 2, wheel_radius + 10])\n        rotate([0, 30, 0])\n        cube([3, 1, 2]);\n}\n\n// Headlights\nmodule headlights() {\n    // Left headlight\n    translate([0, car_width/2 - 5, wheel_radius + 4])\n        sphere(r=2);\n    \n    // Right headlight\n    translate([0, -(car_width/2 - 5), wheel_radius + 4])\n        sphere(r=2);\n}\n\n// Taillights\nmodule taillights() {\n    // Left taillight\n    translate([car_length - 5, car_width/2 - 5, wheel_radius + 4])\n        cube([2, 3, 1]);\n    \n    // Right taillight\n    translate([car_length - 5, -(car_width/2 - 5), wheel_radius + 4])\n        cube([2, 3, 1]);\n}\n\n// Exhaust pipe\nmodule exhaust() {\n    translate([car_length - 2, car_width/2 - 8, wheel_radius])\n        cylinder(h=5, r=1, center=false);\n}\n\n// Assemble the car\nunion() {\n    // Main body\n    body();\n    \n    // Wheels\n    // Front left\n    translate([15, car_width/2 + wheel_width/2, wheel_radius])\n        rotate([90, 0, 0])\n        wheel();\n    \n    // Front right\n    translate([15, -(car_width/2 + wheel_width/2), wheel_radius])\n        rotate([90, 0, 0])\n        wheel();\n    \n    // Rear left\n    translate([car_length - 20, car_width/2 + wheel_width/2, wheel_radius])\n        rotate([90, 0, 0])\n        wheel();\n    \n    // Rear right\n    translate([car_length - 20, -(car_width/2 + wheel_width/2), wheel_radius])\n        rotate([90, 0, 0])\n        wheel();\n    \n    // Side mirrors\n    side_mirror();\n    mirror([0, 1, 0])\n        side_mirror();\n    \n    // Lights\n    headlights();\n    taillights();\n    \n    // Exhaust\n    exhaust();\n}\n\n// License plate\ntranslate([car_length - 8, 0, wheel_radius + 1])\n    cube([8, 12, 0.5]);",
    "renders": true
  },
  {
    "vehicle": "notchback",
    "openscad_code": "// Realistic Notchback 3D Printable Model\n// Medium complexity, roughly 70 mm long\n\n$fn = 32;  // Smooth curves for 3D printing\n\n// Overall dimensions\nbody_len = 70;\nbody_width = 30;\nbody_height = 20;\n\n// Main body shell\nmodule body_shell() {\n    difference() {\n        // Main body\n        cube([body_len, body_width, body_height], center=true);\n        \n        // Taper top rear for notchback roofline\n        translate([body_len/2-15, 0, body_height/2])\n            rotate([-30, 0, 0])\n                cube([30, body_width+2, 10], center=true);\n    }\n}\n\n// Hood/bonnet slope\nmodule hood() {\n    translate([body_len/2-25, 0, body_height/2-1])\n        rotate([-20, 0, 0])\n            cube([25, body_width-2, 8], center=true);\n}\n\n// Roof with notchback profile\nmodule roof() {\n    difference() {\n        translate([0, 0, body_height/2+5])\n            cube([body_len-20, body_width-6, 10], center=true);\n        \n        // Rear notch cut\n        translate([body_len/2-5, 0, body_height/2+5])\n            rotate([-45, 0, 0])\n                cube([12, body_width-4, 15], center=true);\n    }\n}\n\n// Side windows\nmodule side_windows() {\n    for(side = [-1, 1]) {\n        translate([body_len/2-35, side*body_width/2+0.5, body_height/2+3])\n            cube([20, 0.5, 6], center=true);\n    }\n}\n\n// Wheels\nmodule wheels() {\n    for(side = [-1, 1]) {\n        for(pos = [-20, 20]) {\n            translate([pos, side*body_width/2+2, -body_height/2+3])\n                rotate([90, 0, 0])\n                    cylinder(h=2, r=5, center=true);\n            translate([pos, side*body_width/2+2, -body_height/2+3])\n                rotate([90, 0, 0])\n                    cylinder(h=2.5, r=2, center=true);\n        }\n    }\n}\n\n// Headlights\nmodule headlights() {\n    for(side = [-1, 1]) {\n        translate([body_len/2-1, side*body_width/3, body_height/2-5])\n            sphere(2);\n    }\n}\n\n// Taillights\nmodule taillights() {\n    for(side = [-1, 1]) {\n        translate([-body_len/2+3, side*body_width/3, body_height/2-5])\n            cube([2, 4, 3], center=true);\n    }\n}\n\n// Exhaust pipe\nmodule exhaust() {\n    translate([-body_len/2, body_width/2-3, -body_height/2+2])\n        rotate([0, -5, 0])\n            cylinder(h=8, r=1.5);\n}\n\n// Door handles\nmodule door_handles() {\n    for(side = [-1, 1]) {\n        translate([body_len/2-35, side*body_width/2+0.5, body_height/2-2])\n            cube([8, 0.5, 1], center=true);\n    }\n}\n\n// Windshield\nmodule windshield() {\n    translate([body_len/2-30, 0, body_height/2+5])\n        rotate([20, 0, 0])\n            cube([15, body_width-8, 0.5], center=true);\n}\n\n// Rear window\nmodule rear_window() {\n    translate([-body_len/2+25, 0, body_height/2+3])\n        rotate([45, 0, 0])\n            cube([10, body_width-8, 0.5], center=true);\n}\n\n// Main assembly\nunion() {\n    body_shell();\n    hood();\n    roof();\n    side_windows();\n    wheels();\n    headlights();\n    taillights();\n    exhaust();\n    door_handles();\n    windshield();\n    rear_window();\n}",
    "renders": true
  },
  {
    "vehicle": "hardtop",
    "openscad_code": "// HardTop OpenSCAD Model – realistic style, medium complexity\n// Overall size: ~70 mm long, making it printable on most FDM machines\n\nmodule hardtop() {\n    difference() {\n        // Main shell\n        hull() {\n            translate([0, 0, 12]) cube([66, 26, 8], center = true);\n            translate([0, 0, 0])  cube([58, 20, 12], center = true);\n        }\n\n        // Windshield cut-out\n        translate([-28, 0, 0])\n            rotate([0, 20, 0])\n                cube([20, 30, 20], center = true);\n\n        // Rear-window cut-out\n        translate([28, 0, 0])\n            rotate([0, -15, 0])\n                cube([18, 28, 18], center = true);\n\n        // Side windows (left)\n        for (y = [-8, 8])\n            translate([5, y, 7])\n                rotate([0, 15, 0])\n                    cube([28, 12, 10], center = true);\n\n        // Side windows (right, mirrored)\n        mirror([0, 1, 0])\n            for (y = [-8, 8])\n                translate([5, y, 7])\n                    rotate([0, 15, 0])\n                        cube([28, 12, 10], center = true);\n    }\n\n    // Roof reinforcement ribbing\n    for (x = [-20:10:20])\n        translate([x, 0, 16])\n            cube([6, 26, 1.5], center = true);\n\n    // Rain gutters\n    gutter();\n    mirror([0, 1, 0]) gutter();\n}\n\nmodule gutter() {\n    for (x = [-30:2:30])\n        translate([x, 13, 10])\n            rotate([0, 90, 0])\n                cylinder(h = 1.5, r = 1, $fn = 8);\n}\n\nhardtop();",
    "renders": true
  },
  {
    "vehicle": "landaulet",
    "openscad_code": "// OpenSCAD Landulet – medium complexity, printable, 100 mm long\n// No overhangs >45°, 2 mm walls everywhere\n\n$fn = 32;\n\nmodule landaulet() {\n    // Chassis + floor\n    difference() {\n        cube([80, 35, 5], center = true); // main floor\n        translate([0, 0, 2.5]) cube([82, 37, 6], center = true); // ensure bottom is flat\n    }\n\n    // Front hood\n    hull() {\n        translate([-30, 0, 2.5]) cylinder(h = 5, r = 10);\n        translate([-10, 0, 2.5]) cylinder(h = 5, r = 8);\n    }\n\n    // Rear passenger tub (open)\n    difference() {\n        hull() {\n            translate([20, 0, 2.5]) cylinder(h = 15, r = 10);\n            translate([35, 0, 2.5]) cylinder(h = 15, r = 10);\n        }\n        translate([27.5, 0, 10]) cube([20, 36, 30], center = true); // remove center\n    }\n\n    // Wheels\n    module wheel() {\n        difference() {\n            cylinder(h = 8, r = 8, center = true);\n            cylinder(h = 9, r = 3, center = true);\n        }\n    }\n    for (x = [-25, 25]) {\n        translate([x, 20, 0]) rotate([90, 0, 0]) wheel();\n        translate([x, -20, 0]) rotate([90, 0, 0]) wheel();\n    }\n\n    // Front windshield frame\n    translate([-22, 0, 7.5]) cube([2, 30, 15], center = true);\n    translate([-22, 0, 15]) cube([2, 30, 1], center = true);\n\n    // Rear folding roof bar\n    translate([30, 0, 17]) rotate([0, 90, 0]) cylinder(h = 30, r = 1.5);\n\n    // Headlights\n    translate([-35, 12, 5]) sphere(r = 3);\n    translate([-35, -12, 5]) sphere(r = 3);\n\n    // Door handles\n    translate([0, 18, 8]) cube([6, 1, 1], center = true);\n    translate([0, -18, 8]) cube([6, 1, 1], center = true);\n}\n\nscale(0.8) landaulet();",
    "renders": true
  },
  {
    "vehicle": "targa",
    "openscad_code": "// Targa Top - Medium Complexity, Realistic Style\n// Scale: 1:18 model (approx 90mm long)\n\n// Overall dimensions\nlength = 90;\nwidth = 40;\nheight = 12;\n\n// Wall thickness for 3D printing\nwall = 1.5;\n\n// Main roof panel\nmodule roof_panel() {\n    difference() {\n        // Main roof with slight curve\n        hull() {\n            translate([0, 0, -1])\n                cube([length, width, 2], center=true);\n            translate([0, 0, 1])\n                cube([length-4, width-4, 2], center=true);\n        }\n        \n        // Hollow out interior\n        translate([0, 0, -3])\n            cube([length-wall*2, width-wall*2, height], center=true);\n        \n        // Front edge cut for windshield\n        translate([-length/2+5, 0, -height/2])\n            cube([10, width+2, height], center=false);\n    }\n}\n\n// Reinforcement ribs underneath\nmodule ribs() {\n    for (x = [-30, -10, 10, 30]) {\n        translate([x, 0, -height/2+wall+0.5])\n            cube([2, width-4, height-1], center=true);\n    }\n}\n\n// Mounting points\nmodule mounts() {\n    // Front mounts\n    for (x = [-length/2+8, length/2-8]) {\n        translate([x, width/2-3, -height/2])\n            cylinder(h=5, r=3, $fn=16);\n        translate([x, -width/2+3, -height/2])\n            cylinder(h=5, r=3, $fn=16);\n    }\n    \n    // Rear mounts\n    for (x = [-length/2+15, length/2-15]) {\n        translate([x, width/2-5, -height/2])\n            cylinder(h=4, r=2.5, $fn=12);\n        translate([x, -width/2+5, -height/2])\n            cylinder(h=4, r=2.5, $fn=12);\n    }\n}\n\n// Weather sealing lip\nmodule seal_lip() {\n    translate([0, 0, -height/2])\n        difference() {\n            cube([length+2, width+2, 1.5], center=true);\n            cube([length, width, 2], center=true);\n        }\n}\n\n// Surface detail - subtle panel lines\nmodule panel_lines() {\n    for (x = [-20, 0, 20]) {\n        translate([x, 0, 0.1])\n            cube([0.5, width-4, 0.2], center=true);\n    }\n    for (y = [-15, 0, 15]) {\n        translate([0, y, 0.1])\n            cube([length-4, 0.5, 0.2], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    roof_panel();\n    ribs();\n    mounts();\n    seal_lip();\n    panel_lines();\n}",
    "renders": true
  },
  {
    "vehicle": "grandtourer",
    "openscad_code": "// Grand Tourer - Realistic Style, Medium Complexity\n// Scale: 1:64 (approximately 75mm long)\n\n// Car dimensions\ncar_length = 75;\ncar_width = 30;\ncar_height = 20;\nwheelbase = 45;\ntrack_width = 26;\n\n// Wheel parameters\nwheel_diameter = 12;\nwheel_width = 5;\ntire_thickness = 2;\n\nmodule wheel() {\n    // Tire\n    difference() {\n        cylinder(h=wheel_width, d=wheel_diameter, $fn=32);\n        translate([0, 0, -0.1])\n            cylinder(h=wheel_width+0.2, d=wheel_diameter-tire_thickness*2, $fn=32);\n    }\n    \n    // Rim\n    color(\"silver\")\n    translate([0, 0, wheel_width/2])\n        cylinder(h=1, d=wheel_diameter-tire_thickness*2-1, $fn=24);\n}\n\nmodule body() {\n    // Main body shell\n    color(\"red\")\n    union() {\n        // Hood\n        translate([-car_length/2 + 15, 0, 2])\n            scale([30, car_width-2, 8])\n                cube([1, 1, 1], center=true);\n        \n        // Cabin\n        translate([-5, 0, 8])\n            scale([25, car_width-4, 10])\n                cube([1, 1, 1], center=true);\n        \n        // Trunk\n        translate([15, 0, 4])\n            scale([20, car_width-2, 6])\n                cube([1, 1, 1], center=true);\n    }\n    \n    // Roof\n    color(\"red\")\n    translate([-5, 0, 13])\n        scale([25, car_width-8, 1])\n            cube([1, 1, 1], center=true);\n    \n    // Side mirrors\n    color(\"red\")\n    translate([-8, car_width/2-1, 10])\n        cube([2, 1, 1]);\n    translate([-8, -car_width/2, 10])\n        cube([2, 1, 1]);\n}\n\nmodule windows() {\n    // Windshield\n    color(\"lightblue\", 0.6)\n    translate([-12, 0, 11])\n        rotate([30, 0, 0])\n            scale([15, car_width-6, 0.5])\n                cube([1, 1, 1], center=true);\n    \n    // Rear window\n    color(\"lightblue\", 0.6)\n    translate([2, 0, 11])\n        rotate([-20, 0, 0])\n            scale([15, car_width-6, 0.5])\n                cube([1, 1, 1], center=true);\n    \n    // Side windows\n    color(\"lightblue\", 0.6)\n    for(y = [car_width/2-0.5, -car_width/2+0.5]) {\n        translate([-10, y, 9])\n            scale([20, 0.5, 8])\n                cube([1, 1, 1], center=true);\n    }\n}\n\nmodule lights() {\n    // Headlights\n    color(\"yellow\")\n    translate([-car_length/2+1, car_width/2-4, 4])\n        sphere(d=2);\n    translate([-car_length/2+1, -car_width/2+4, 4])\n        sphere(d=2);\n    \n    // Taillights\n    color(\"red\")\n    translate([car_length/2-2, car_width/2-3, 5])\n        cube([1, 5, 2]);\n    translate([car_length/2-2, -car_width/2+3, 5])\n        cube([1, 5, 2]);\n}\n\nmodule chassis() {\n    color(\"black\")\n    // Floor pan\n    translate([0, 0, 1])\n        scale([car_length, car_width, 1])\n            cube([1, 1, 1], center=true);\n    \n    // Front bumper\n    translate([-car_length/2+1, 0, 2])\n        scale([2, car_width, 4])\n            cube([1, 1, 1], center=true);\n    \n    // Rear bumper\n    translate([car_length/2-1, 0, 3])\n        scale([2, car_width, 5])\n            cube([1, 1, 1], center=true);\n}\n\nmodule exhaust() {\n    color(\"silver\")\n    translate([car_length/2-5, car_width/2-2, 1])\n        cylinder(h=5, d=1.5);\n    translate([car_length/2-5, -car_width/2+2, 1])\n        cylinder(h=5, d=1.5);\n}\n\n// Assembly\nchassis();\nbody();\nwindows();\nlights();\nexhaust();\n\n// Wheels\n// Front left\ntranslate([-wheelbase/2, car_width/2, wheel_diameter/2])\n    rotate([90, 0, 0])\n        wheel();\n\n// Front right\ntranslate([-wheelbase/2, -car_width/2, wheel_diameter/2])\n    rotate([90, 0, 0])\n        wheel();\n\n// Rear left\ntranslate([wheelbase/2, car_width/2, wheel_diameter/2])\n    rotate([90, 0, 0])\n        wheel();\n\n// Rear right\ntranslate([wheelbase/2, -car_width/2, wheel_diameter/2])\n    rotate([90, 0, 0])\n        wheel();",
    "renders": true
  },
  {
    "vehicle": "supercar",
    "openscad_code": "// Supercar - Realistic Medium Complexity\n// Designed for 3D printing at ~80mm length\n\n$fn = 32;\n\n// Main module\nmodule supercar() {\n    // Body shell\n    body();\n    \n    // Wheels\n    translate([-30, -20, -5]) wheel();\n    translate([-30, 20, -5]) wheel();\n    translate([30, -20, -5]) wheel();\n    translate([30, 20, -5]) wheel();\n    \n    // Windows\n    windows();\n    \n    // Exhaust\n    exhaust();\n    \n    // Spoiler\n    spoiler();\n}\n\n// Main body shell\nmodule body() {\n    // Lower chassis\n    difference() {\n        // Main block\n        translate([0, 0, 5]) cube([80, 40, 10], center=true);\n        \n        // Wheel wells\n        for (x = [-35, 35])\n            for (y = [-22, 22])\n                translate([x, y, 5]) cylinder(h=15, r=12, center=true);\n    }\n    \n    // Cabin\n    difference() {\n        hull() {\n            translate([0, 0, 15]) cube([60, 35, 15], center=true);\n            translate([25, 0, 20]) cube([40, 30, 10], center=true);\n        }\n        \n        // Windshield\n        translate([15, 0, 22]) rotate([0, -30, 0]) \n            cube([40, 32, 2], center=true);\n            \n        // Side windows\n        translate([0, 18, 20]) rotate([0, -20, 0])\n            cube([70, 2, 12], center=true);\n        translate([0, -18, 20]) rotate([0, -20, 0])\n            cube([70, 2, 12], center=true);\n    }\n    \n    // Hood slope\n    translate([-20, 0, 15]) rotate([0, -15, 0])\n        cube([30, 38, 8], center=true);\n        \n    // Front bumper\n    translate([-40, 0, 5]) cube([10, 35, 8], center=true);\n    \n    // Rear bumper\n    translate([40, 0, 5]) cube([10, 35, 8], center=true);\n    \n    // Side skirts\n    translate([0, 20, 2]) cube([80, 2, 4], center=true);\n    translate([0, -20, 2]) cube([80, 2, 4], center=true);\n}\n\n// Wheel assembly\nmodule wheel() {\n    // Tire\n    color(\"black\") cylinder(h=8, r=12);\n    \n    // Rim\n    color(\"silver\") translate([0, 0, 4]) \n        difference() {\n            cylinder(h=2, r=11);\n            cylinder(h=3, r=8);\n            for (i = [0:5:360]) \n                rotate([0, 0, i]) \n                    translate([9.5, 0, 0]) \n                        cube([1, 2, 3], center=true);\n        }\n}\n\n// Windows\nmodule windows() {\n    color(\"blue\", 0.6) {\n        // Rear window\n        translate([25, 0, 25]) rotate([0, -30, 0])\n            cube([25, 30, 1.5], center=true);\n            \n        // Quarter windows\n        translate([10, 17, 20]) rotate([0, -20, 0])\n            cube([20, 1.5, 10], center=true);\n        translate([10, -17, 20]) rotate([0, -20, 0])\n            cube([20, 1.5, 10], center=true);\n    }\n}\n\n// Exhaust pipes\nmodule exhaust() {\n    color(\"silver\") {\n        translate([42, 8, 8]) cylinder(h=12, r=3);\n        translate([42, -8, 8]) cylinder(h=12, r=3);\n        \n        // Exhaust tips\n        translate([48, 8, 8]) cylinder(h=2, r=4);\n        translate([48, -8, 8]) cylinder(h=2, r=4);\n    }\n}\n\n// Rear spoiler\nmodule spoiler() {\n    // Posts\n    color(\"black\") {\n        translate([35, 15, 25]) cylinder(h=8, r=2);\n        translate([35, -15, 25]) cylinder(h=8, r=2);\n    }\n    \n    // Wing\n    color(\"black\") {\n        translate([35, 0, 34]) cube([30, 35, 2], center=true);\n    }\n}\n\n// Scale to printable size\nscale([0.8, 0.8, 0.8]) supercar();",
    "renders": true
  },
  {
    "vehicle": "hypercar",
    "openscad_code": "// Hypercar - Realistic Medium Complexity\n// Scale: 1:72 (approx 70mm long)\n\n// wheel module\nmodule wheel(r=4, w=2) {\n    color(\"black\") \n    difference() {\n        cylinder(h=w, r=r, center=true, $fn=36);\n        cylinder(h=w+0.2, r=r*0.4, center=true, $fn=36);\n    }\n}\n\n// rim module\nmodule rim(r=3.5, w=2.2) {\n    color(\"silver\") \n    difference() {\n        cylinder(h=w, r=r, center=true, $fn=6);\n        cylinder(h=w+0.2, r=r-1, center=true, $fn=32);\n    }\n    for (i=[0:5:360]) {\n        rotate([0,0,i])\n        translate([r-0.5,0,0])\n        cube([1,0.5,w*0.9], center=true);\n    }\n}\n\n// side mirror module\nmodule mirror() {\n    union() {\n        color(\"black\") \n        translate([0,0,2]) \n        cube([1.5,0.8,0.5], center=true);\n        color(\"silver\") \n        translate([-0.8,0,1]) \n        rotate([0,90,0]) \n        cylinder(h=2, r=0.3, center=true);\n    }\n}\n\n// main body\ncolor(\"red\") {\n    // chassis base\n    translate([0,0,2]) \n    cube([50,20,2], center=true);\n    \n    // mid cabin\n    translate([0,0,5]) \n    cube([25,18,4], center=true);\n    \n    // rear engine cover\n    translate([-10,0,6]) \n    cube([15,16,3], center=true);\n    \n    // front hood\n    translate([12,0,4]) \n    cube([20,14,2], center=true);\n    \n    // windshield\n    color(\"lightblue\") \n    translate([4,0,7.5]) \n    rotate([40,0,0]) \n    cube([18,16,0.5], center=true);\n    \n    // side windows\n    color(\"lightblue\") \n    translate([-4,10,6.5]) \n    rotate([40,0,0]) \n    cube([20,0.5,2.5], center=true);\n}\n\n// front splitter\ncolor(\"black\") \ntranslate([22,0,1]) \ncube([4,18,0.5], center=true);\n\n// rear diffuser\ncolor(\"black\") \ntranslate([-22,0,1]) \ncube([6,18,1], center=true);\n\n// rear wing\ncolor(\"black\") {\n    translate([-18,0,9]) \n    cube([12,14,0.5], center=true);\n    translate([-18,0,6.5]) \n    cube([0.5,14,2.5], center=true);\n    translate([-18,0,6.5]) \n    mirror([1,0,0]) \n    cube([0.5,14,2.5], center=true);\n}\n\n// headlights\ncolor(\"yellow\") \ntranslate([20,7,3]) \nsphere(r=1.2, $fn=16);\ncolor(\"yellow\") \ntranslate([20,-7,3]) \nsphere(r=1.2, $fn=16);\n\n// taillights\ncolor(\"red\") \ntranslate([-22,7,3]) \nsphere(r=1, $fn=16);\ncolor(\"red\") \ntranslate([-22,-7,3]) \nsphere(r=1, $fn=16);\n\n// exhaust pipes\ncolor(\"gray\") \ntranslate([-24.5,4,2]) \ncylinder(h=3, r=0.7, center=true);\ncolor(\"gray\") \ntranslate([-24.5,-4,2]) \ncylinder(h=3, r=0.7, center=true);\n\n// wheels and rims\ntranslate([15,10,1.5]) { wheel(); rim(); }\ntranslate([15,-10,1.5]) { wheel(); rim(); }\ntranslate([-15,10,1.5]) { wheel(); rim(); }\ntranslate([-15,-10,1.5]) { wheel(); rim(); }\n\n// side mirrors\ntranslate([8,10,5.5]) mirror();\ntranslate([8,-10,5.5]) mirror();",
    "renders": true
  },
  {
    "vehicle": "musclecar",
    "openscad_code": "// Muscle Car - Realistic Style, Medium Complexity\n// Designed for 3D printing - no overhangs, 60mm length\n\n$fn = 32;\n\n// Main body module\nmodule musclecar() {\n    // Wheelbase\n    wheelbase = 35;\n    width = 22;\n    \n    // Main chassis\n    difference() {\n        // Lower body\n        union() {\n            // Main hull\n            hull() {\n                translate([-30, -11, 0]) cube([60, 22, 8]);\n                translate([-25, -10, 8]) cube([50, 20, 5]);\n            }\n            \n            // Hood with slight slope\n            translate([15, -11, 8]) cube([15, 22, 3]);\n            \n            // Roof\n            translate([-5, -9, 13]) cube([20, 18, 6]);\n            \n            // Trunk\n            translate([-25, -10, 8]) cube([10, 20, 4]);\n        }\n        \n        // Cabin windows\n        translate([-10, -8, 14]) cube([15, 16, 4]);\n    }\n    \n    // Upper body details\n    translate([20, -8, 11]) cube([10, 16, 2]); // Hood scoop\n    \n    // Bumper\n    translate([27, -11, 0]) cube([3, 22, 5]);\n    translate([-27, -11, 0]) cube([3, 22, 5]);\n    \n    // Wheels\n    for(side = [-1, 1]) {\n        translate([15, side * 11, 4]) rotate([0, 0, 90]) wheel();\n        translate([-15, side * 11, 4]) rotate([0, 0, 90]) wheel();\n    }\n    \n    // Side mirrors\n    for(side = [-1, 1]) {\n        translate([5, side * 11, 12]) cube([2, 3 * side, 3]);\n    }\n    \n    // Exhaust pipes\n    translate([-27, -7, 2]) cylinder(h=8, r=1.5);\n    translate([-27, 7, 2]) cylinder(h=8, r=1.5);\n    \n    // Headlights\n    translate([27, -7, 5]) sphere(r=2);\n    translate([27, 7, 5]) sphere(r=2);\n    \n    // Taillights\n    translate([-27, -7, 5]) sphere(r=2);\n    translate([-27, 7, 5]) sphere(r=2);\n    \n    // Spoiler\n    translate([-25, -10, 12]) cube([1, 20, 2]);\n}\n\n// Wheel module\nmodule wheel() {\n    difference() {\n        // Tire\n        cylinder(h=6, r=5);\n        \n        // Rim\n        translate([0, 0, -0.1]) cylinder(h=6.2, r=3);\n        \n        // Spokes\n        for(i = [0:5]) {\n            rotate([0, 0, i * 60]) \n                translate([2, 0, 0]) cube([1.5, 0.5, 6.2]);\n        }\n    }\n}\n\n// Generate the car\nmusclecar();",
    "renders": true
  },
  {
    "vehicle": "ponycar",
    "openscad_code": "// Ponycar - Realistic Style, Medium Complexity\n// Designed for 3D printing without supports\n\n$fn = 32;\n\n// Main body\nmodule body() {\n    // Lower chassis\n    translate([0, 0, 2])\n    cube([40, 18, 5], center=true);\n    \n    // Main cabin area\n    translate([0, 0, 8])\n    cube([35, 16, 8], center=true);\n    \n    // Hood\n    difference() {\n        translate([-12, 0, 6])\n        cube([22, 14, 4], center=true);\n        \n        // Hood slope\n        translate([-20, 0, 9])\n        rotate([0, 20, 0])\n        cube([25, 16, 5], center=true);\n    }\n    \n    // Trunk\n    translate([12, 0, 6])\n    cube([18, 14, 4], center=true);\n}\n\n// Wheels\nmodule wheel() {\n    // Tire\n    difference() {\n        cylinder(h=4, r=6);\n        cylinder(h=4.5, r=4.5);\n    }\n    \n    // Rim\n    color(\"silver\")\n    cylinder(h=2, r=4.4);\n}\n\n// Wheel wells\nmodule wheel_well() {\n    translate([0, 0, -1])\n    cylinder(h=6, r=6.5, center=true);\n}\n\n// Windows\nmodule windows() {\n    // Windshield\n    translate([-8, 0, 11.5])\n    rotate([0, -30, 0])\n    cube([12, 14, 0.5], center=true);\n    \n    // Rear window\n    translate([8, 0, 11.5])\n    rotate([0, 30, 0])\n    cube([12, 14, 0.5], center=true);\n    \n    // Side windows\n    for(x=[-5, 5]) {\n        translate([x, 8.5, 10])\n        cube([10, 0.5, 6], center=true);\n    }\n}\n\n// Headlights\nmodule headlights() {\n    for(x=[-8, 8]) {\n        translate([-18, x, 5])\n        sphere(r=1.5);\n    }\n}\n\n// Taillights\nmodule taillights() {\n    for(x=[-5, 5]) {\n        translate([18, x, 5])\n        sphere(r=1.2);\n    }\n}\n\n// Exhaust\nmodule exhaust() {\n    translate([20, -7, 2])\n    rotate([0, 0, -5])\n    cylinder(h=8, r=1);\n}\n\n// Side mirrors\nmodule mirrors() {\n    for(side=[-1, 1]) {\n        translate([5, side*9, 9])\n        cube([3, 1, 2], center=true);\n    }\n}\n\n// Assemble the car\nunion() {\n    // Main body\n    body();\n    \n    // Cut wheel wells\n    for(pos=[[-12, 8], [-12, -8], [12, 8], [12, -8]]) {\n        translate([pos[0], pos[1], 2.5])\n        wheel_well();\n    }\n    \n    // Add windows\n    color(\"lightblue\")\n    windows();\n    \n    // Add lights\n    color(\"yellow\")\n    headlights();\n    \n    color(\"red\")\n    taillights();\n    \n    // Add mirrors\n    color(\"black\")\n    mirrors();\n    \n    // Add exhaust\n    color(\"gray\")\n    exhaust();\n}\n\n// Add wheels\nfor(pos=[[-12, 8, 2], [-12, -8, 2], [12, 8, 2], [12, -8, 2]]) {\n    translate(pos)\n    color(\"black\")\n    wheel();\n}",
    "renders": true
  },
  {
    "vehicle": "keicar",
    "openscad_code": "// Kei Car - Medium Complexity Realistic Style\n// Dimensions in mm, designed for 3D printing\n\nscale_factor = 0.7;  // Adjust overall size for 100mm max dimension\nscale([scale_factor, scale_factor, scale_factor]) {\n\n    // Main body shell\n    module body_shell() {\n        difference() {\n            // Main body block\n            translate([0, 0, 30])\n                cube([70, 35, 25], center=true);\n            \n            // Windshield cutout\n            translate([25, 0, 40])\n                cube([30, 32, 20], center=true);\n                \n            // Side windows\n            for(side = [-1, 1]) {\n                translate([10, side*15, 40])\n                    cube([40, 8, 15], center=true);\n            }\n        }\n        \n        // Hood\n        translate([-30, 0, 25])\n            cube([25, 34, 15], center=true);\n            \n        // Roof\n        translate([0, 0, 50])\n            cube([60, 34, 3], center=true);\n    }\n    \n    // Wheels\n    module wheel(pos_x, pos_y) {\n        translate([pos_x, pos_y, 10]) {\n            // Tire\n            cylinder(h=8, r=10, $fn=20);\n            // Rim\n            translate([0, 0, 1])\n                cylinder(h=6, r=7, $fn=6);\n            // Hubcap\n            translate([0, 0, 4])\n                cylinder(h=1, r=6, $fn=20);\n        }\n    }\n    \n    // Headlights\n    module headlights() {\n        for(side = [-1, 1]) {\n            translate([-42, side*12, 30])\n                sphere(r=4);\n        }\n    }\n    \n    // Taillights\n    module taillights() {\n        for(side = [-1, 1]) {\n            translate([42, side*12, 30])\n                cube([3, 6, 4], center=true);\n        }\n    }\n    \n    // Bumpers\n    module bumpers() {\n        // Front bumper\n        translate([-45, 0, 20])\n            cube([5, 36, 8], center=true);\n            \n        // Rear bumper\n        translate([45, 0, 20])\n            cube([5, 36, 8], center=true);\n    }\n    \n    // Side mirrors\n    module mirrors() {\n        for(side = [-1, 1]) {\n            translate([20, side*18, 45]) {\n                // Mirror stem\n                rotate([90, 0, 0])\n                    cylinder(h=8, r=1, $fn=8);\n                // Mirror head\n                translate([0, 0, 8])\n                    cube([6, 10, 4], center=true);\n            }\n        }\n    }\n    \n    // Door handles\n    module door_handles() {\n        for(side = [-1, 1]) {\n            translate([-10, side*17.5, 30])\n                cube([8, 1, 2], center=true);\n        }\n    }\n    \n    // License plates\n    module license_plates() {\n        // Front plate\n        translate([-42, 0, 25])\n            cube([8, 20, 1], center=true);\n            \n        // Rear plate\n        translate([42, 0, 25])\n            cube([8, 20, 1], center=true);\n    }\n    \n    // Exhaust pipe\n    module exhaust() {\n        translate([42, -12, 15])\n            rotate([90, 0, 0])\n                cylinder(h=12, r=2, $fn=12);\n    }\n    \n    // Assemble the car\n    union() {\n        body_shell();\n        \n        // Wheels - positioned for printing\n        wheel(-25, -15);\n        wheel(-25, 15);\n        wheel(25, -15);\n        wheel(25, 15);\n        \n        headlights();\n        taillights();\n        bumpers();\n        mirrors();\n        door_handles();\n        license_plates();\n        exhaust();\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "subcompact",
    "openscad_code": "// Subcompact car - realistic style, medium complexity\n// Designed for 3D printing, no overhangs greater than 45 degrees\n\n$fn = 32;\n\n// Main car body\nmodule car_body() {\n    // Lower chassis\n    translate([0, 0, 3]) {\n        cube([45, 20, 4], center=true);\n    }\n    \n    // Main passenger compartment\n    translate([0, 0, 8]) {\n        cube([40, 18, 8], center=true);\n    }\n    \n    // Roof\n    translate([0, 0, 14.5]) {\n        difference() {\n            cube([38, 16, 3], center=true);\n            cube([36, 14, 3.1], center=true);\n        }\n    }\n    \n    // Hood slope\n    translate([-12, 0, 8]) {\n        rotate([0, -15, 0]) {\n            cube([16, 16, 4], center=true);\n        }\n    }\n    \n    // Trunk\n    translate([12, 0, 8]) {\n        rotate([0, 10, 0]) {\n            cube([14, 14, 4], center=true);\n        }\n    }\n}\n\n// Wheels module\nmodule wheel() {\n    difference() {\n        cylinder(h=3, r=4.5, center=true);\n        cylinder(h=3.1, r=2, center=true);\n    }\n}\n\n// Wheel arches\nmodule wheel_arch() {\n    translate([0, 0, -1.5]) {\n        difference() {\n            cylinder(h=7, r=5.5, center=true);\n            cylinder(h=7.1, r=4.8, center=true);\n        }\n    }\n}\n\n// Windows\nmodule windows() {\n    // Windshield\n    translate([-10, 0, 11]) {\n        rotate([0, -30, 0]) {\n            cube([12, 14, 0.5], center=true);\n        }\n    }\n    \n    // Rear window\n    translate([10, 0, 11]) {\n        rotate([0, 30, 0]) {\n            cube([12, 14, 0.5], center=true);\n        }\n    }\n    \n    // Side windows\n    for(x = [-6, 6]) {\n        translate([0, x, 11]) {\n            cube([30, 0.5, 5], center=true);\n        }\n    }\n}\n\n// Headlights and taillights\nmodule lights() {\n    // Headlights\n    for(y = [-6, 6]) {\n        translate([-22, y, 6]) {\n            sphere(r=1.5);\n        }\n    }\n    \n    // Taillights\n    for(y = [-6, 6]) {\n        translate([22, y, 6]) {\n            sphere(r=1.5);\n        }\n    }\n}\n\n// Bumpers\nmodule bumpers() {\n    // Front bumper\n    translate([-24, 0, 4]) {\n        cube([4, 18, 3], center=true);\n    }\n    \n    // Rear bumper\n    translate([24, 0, 4]) {\n        cube([4, 18, 3], center=true);\n    }\n}\n\n// Side mirrors\nmodule mirrors() {\n    for(side = [-1, 1]) {\n        translate([-5, side * 9.5, 11]) {\n            cube([2, 1, 1.5], center=true);\n        }\n    }\n}\n\n// Door handles\nmodule door_handles() {\n    for(side = [-1, 1]) {\n        translate([2, side * 9.5, 7]) {\n            cube([4, 0.5, 0.5], center=true);\n        }\n    }\n}\n\n// License plates\nmodule license_plates() {\n    // Front plate\n    translate([-23, 0, 4]) {\n        cube([0.5, 8, 2], center=true);\n    }\n    \n    // Rear plate\n    translate([23, 0, 4]) {\n        cube([0.5, 8, 2], center=true);\n    }\n}\n\n// Main assembly\nunion() {\n    // Car body\n    car_body();\n    \n    // Wheels and wheel arches\n    for(x = [-15, 15]) {\n        for(y = [-8, 8]) {\n            translate([x, y, 0]) {\n                wheel_arch();\n            }\n            translate([x, y, 0]) {\n                rotate([90, 0, 0]) {\n                    wheel();\n                }\n            }\n        }\n    }\n    \n    // Windows (slightly inset)\n    color([0.8, 0.9, 1]) {\n        windows();\n    }\n    \n    // Lights\n    color([1, 1, 0.8]) {\n        lights();\n    }\n    \n    // Bumpers\n    color([0.2, 0.2, 0.2]) {\n        bumpers();\n    }\n    \n    // Mirrors\n    color([0.1, 0.1, 0.1]) {\n        mirrors();\n    }\n    \n    // Door handles\n    color([0.3, 0.3, 0.3]) {\n        door_handles();\n    }\n    \n    // License plates\n    color([0.9, 0.9, 0.9]) {\n        license_plates();\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "compact",
    "openscad_code": "// Compact makeup mirror with realistic styling\n// Overall dimensions ~70mm diameter, 15mm thick\n\n$fn = 64;  // Smooth curves\n\n// Main parameters\ndiameter = 70;\nheight = 8;\nwall_thick = 2;\nhinge_gap = 0.3;\n\n// Base module for both halves\nmodule compact_half(base_height, top_offset) {\n    difference() {\n        // Outer shell with rounded edges\n        minkowski() {\n            cylinder(h = base_height, d = diameter);\n            sphere(r = 3);\n        }\n        \n        // Hollow interior\n        translate([0, 0, wall_thick])\n            minkowski() {\n                cylinder(h = base_height - wall_thick*2, d = diameter - wall_thick*2);\n                sphere(r = 2);\n            }\n        \n        // Flatten bottom\n        translate([0, 0, -1])\n            cube([diameter+2, diameter+2, 3], center = true);\n    }\n    \n    // Inner lip for mirror seating\n    translate([0, 0, top_offset - 1])\n        cylinder(h = 1.5, d = diameter - wall_thick*4);\n}\n\n// Hinge mechanism\nmodule hinge(pin_radius, length) {\n    // Pin\n    rotate([90, 0, 0])\n        cylinder(h = length, r = pin_radius);\n    \n    // Supports\n    for(side = [-1, 1]) {\n        translate([side * (diameter/2 - 8), 0, 0])\n            rotate([90, 0, 0])\n                cylinder(h = 6, r = pin_radius + 1);\n    }\n}\n\n// Snap closure\nmodule snap() {\n    // Male part\n    translate([0, -diameter/2 + 3, height/2])\n        cube([8, 3, 4], center = true);\n    \n    // Female part with clearance\n    translate([0, diameter/2 - 3, height/2 - 0.2])\n        cube([8.5, 3.5, 4.5], center = true);\n}\n\n// Decorative texture pattern\nmodule texture() {\n    for(i = [0:35]) {\n        rotate([0, 0, i * 10])\n            translate([diameter/2 - 2, 0, 2])\n                cube([0.5, 0.3, 1], center = true);\n    }\n}\n\n// Bottom half\ntranslate([0, 0, 0])\n    compact_half(height, height - 1);\n\ntranslate([0, 0, height - 1])\n    mirror([0, 0, 1])\n        compact_half(height, height - 1);\n\n// Mirror surface (slightly recessed)\ntranslate([0, 0, height - 3.5])\n    cylinder(h = 0.5, d = diameter - wall_thick*6);\n\n// Hinge assembly (centered)\ntranslate([0, 0, height - 1])\n    hinge(pin_radius = 2.5, length = diameter - 16);\n\n// Closure mechanism\nsnap();\n\n// Add texture to both halves\ntranslate([0, 0, height - 1])\n    texture();\ntranslate([0, 0, 0])\n    texture();",
    "renders": true
  },
  {
    "vehicle": "midsize",
    "openscad_code": "// Midsize SUV - Realistic Medium Complexity\n// Approx 90mm long, 35mm wide, 35mm high\n\n$fn = 32;\n\n// Main body dimensions\nbody_length = 80;\nbody_width = 30;\nbody_height = 20;\n\n// Wheel dimensions\nwheel_diameter = 12;\nwheel_width = 6;\n\n// Create the entire model\nmodule suv() {\n    // Main body - slightly tapered\n    hull() {\n        translate([-body_length/2, -body_width/2, 0])\n            cube([body_length, body_width, body_height]);\n        translate([-body_length/2 + 5, -body_width/2 + 2, body_height])\n            cube([body_length - 10, body_width - 4, 8]);\n    }\n    \n    // Hood and windshield area\n    difference() {\n        translate([-body_length/2 + 25, -body_width/2, body_height])\n            cube([body_length/2 - 10, body_width, 15]);\n        \n        // Windshield angle\n        translate([-body_length/2 + 20, -body_width/2 - 1, body_height + 8])\n            rotate([0, -30, 0])\n                cube([20, body_width + 2, 10]);\n    }\n    \n    // Roof\n    translate([-15, -body_width/2 + 3, body_height + 15])\n        cube([30, body_width - 6, 5]);\n    \n    // Rear section\n    translate([body_length/2 - 25, -body_width/2, body_height])\n        cube([25, body_width, 12]);\n    \n    // Front bumper\n    translate([-body_length/2, -body_width/2 + 2, 0])\n        cube([8, body_width - 4, 8]);\n    \n    // Rear bumper\n    translate([body_length/2 - 8, -body_width/2 + 2, 0])\n        cube([8, body_width - 4, 8]);\n    \n    // Side mirrors\n    translate([-body_length/2 + 22, body_width/2, body_height + 8])\n        cube([3, 4, 2]);\n    translate([-body_length/2 + 22, -body_width/2 - 4, body_height + 8])\n        cube([3, 4, 2]);\n    \n    // Wheels\n    for(side = [-1, 1]) {\n        translate([-20, side * (body_width/2 + wheel_width/2), wheel_diameter/2])\n            rotate([90, 0, 0])\n                cylinder(h=wheel_width, d=wheel_diameter);\n        translate([20, side * (body_width/2 + wheel_width/2), wheel_diameter/2])\n            rotate([90, 0, 0])\n                cylinder(h=wheel_width, d=wheel_diameter);\n    }\n    \n    // Headlights\n    translate([-body_length/2 + 2, -body_width/2 + 4, 8])\n        cube([3, 4, 3]);\n    translate([-body_length/2 + 2, body_width/2 - 8, 8])\n        cube([3, 4, 3]);\n    \n    // Taillights\n    translate([body_length/2 - 5, -body_width/2 + 4, 10])\n        cube([3, 4, 3]);\n    translate([body_length/2 - 5, body_width/2 - 8, 10])\n        cube([3, 4, 3]);\n    \n    // Windows\n    color(\"lightblue\") {\n        // Front windshield\n        translate([-body_length/2 + 15, -body_width/2 + 2, body_height + 8])\n            rotate([0, -30, 0])\n                cube([18, body_width - 4, 0.5]);\n        \n        // Side windows\n        for(i = [0:1]) {\n            translate([-5 + i * 15, -body_width/2 + 0.5, body_height + 12])\n                cube([10, body_width - 1, 3]);\n        }\n        \n        // Rear windshield\n        translate([body_length/2 - 15, -body_width/2 + 2, body_height + 8])\n            rotate([0, 30, 0])\n                cube([18, body_width - 4, 0.5]);\n    }\n    \n    // Door handles\n    translate([-10, body_width/2 + 0.5, 12])\n        cube([8, 1, 2]);\n    translate([5, body_width/2 + 0.5, 12])\n        cube([8, 1, 2]);\n}\n\n// Generate the model\nsuv();",
    "renders": true
  },
  {
    "vehicle": "fullsize",
    "openscad_code": "// Full-size (50 mm) realistic revolver model – medium complexity\n// No support needed when printed upright.  All parts have ≥1 mm walls.\n\n// Overall scale factor – everything is generated at 2× and then scaled\n// so the longest dimension becomes ~50 mm\nscale_factor = 0.5;\n\nmodule revolver() {\n    // Main frame\n    difference() {\n        union() {\n            // Grip\n            translate([-4, -22, 0]) grip();\n\n            // Cylinder / drum\n            translate([0, 0, 0]) rotate([0, 90, 0]) drum();\n\n            // Barrel\n            translate([18, 0, 0]) rotate([0, 90, 0]) barrel();\n\n            // Top strap / rail\n            translate([0, 0, 8])\n                cube([30, 12, 3], center = true);\n        }\n\n        // Trigger guard hole\n        translate([3, -10, -1])\n            rotate([90, 0, 0])\n                cylinder(h = 10, d = 8, $fn = 32);\n\n        // Cylinder gap cut\n        translate([6, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h = 30, d = 13, $fn = 32);\n    }\n\n    // Trigger\n    translate([5, -11, 0]) trigger();\n}\n\nmodule grip() {\n    difference() {\n        hull() {\n            translate([0, 0, -3]) cube([12, 22, 6], center = true);\n            translate([0, -10, 0]) cube([8, 10, 4], center = true);\n        }\n        // Screw recesses\n        for (y = [-7, -15])\n            translate([0, y, 3])\n                rotate([90, 0, 0])\n                    cylinder(h = 3, d = 3, $fn = 16);\n    }\n}\n\nmodule drum() {\n    difference() {\n        union() {\n            cylinder(h = 12, d = 20, $fn = 64);\n            // Front collar\n            translate([0, 0, 6])\n                cylinder(h = 2, d = 18, $fn = 32);\n            // Rear collar\n            translate([0, 0, -6])\n                cylinder(h = 2, d = 18, $fn = 32);\n        }\n\n        // 6 chambers\n        for (i = [0:5])\n            rotate([0, 0, i * 60])\n                translate([7, 0, 0])\n                    rotate([0, 90, 0])\n                        cylinder(h = 14, d = 4.5, $fn = 16);\n    }\n}\n\nmodule barrel() {\n    difference() {\n        // Outer barrel\n        cylinder(h = 35, d = 10, $fn = 32);\n        // Bore\n        translate([0, 0, -1])\n            cylinder(h = 37, d = 4, $fn = 32);\n    }\n}\n\nmodule trigger() {\n    difference() {\n        union() {\n            // Trigger blade\n            translate([0, 0, 2])\n                cube([3, 8, 1], center = true);\n            // Trigger spur\n            translate([0, 4, 0])\n                cube([3, 2, 5], center = true);\n        }\n        // Lightening hole\n        translate([0, 2, 2])\n            cylinder(h = 5, d = 1.5, $fn = 16);\n    }\n}\n\n// Render at desired size\nscale([scale_factor, scale_factor, scale_factor])\n    revolver();",
    "renders": true
  },
  {
    "vehicle": "executive",
    "openscad_code": "// Executive Figure - Realistic Style, Medium Complexity\n// Height: ~80mm when printed at 1:1 scale\n\n$fn = 36;  // Smooth curves for printing\n\n// Main assembly\nmodule executive_figure() {\n    union() {\n        // Head\n        translate([0, 0, 72]) head();\n        \n        // Torso with suit\n        torso();\n        \n        // Legs\n        translate([0, 0, 0]) legs();\n        \n        // Arms\n        translate([-12, 0, 55]) left_arm();\n        translate([12, 0, 55]) mirror([1, 0, 0]) left_arm();\n        \n        // Briefcase in right hand\n        translate([22, -8, 35]) briefcase();\n    }\n}\n\nmodule head() {\n    // Skull\n    sphere(r = 8);\n    \n    // Neck\n    translate([0, 0, -8]) cylinder(r = 4, h = 8);\n    \n    // Hair - short business cut\n    translate([0, 0, 2]) scale([1, 1.2, 0.8]) sphere(r = 8.5);\n    \n    // Eyes\n    translate([-3, 7.5, 2]) sphere(r = 1);\n    translate([3, 7.5, 2]) sphere(r = 1);\n    \n    // Nose\n    translate([0, 7, 0]) cylinder(r1 = 1, r2 = 0.5, h = 3);\n    \n    // Ears\n    translate([-8, 0, 0]) rotate([0, 90, 0]) cylinder(r = 2.5, h = 2);\n    translate([8, 0, 0]) rotate([0, 90, 0]) cylinder(r = 2.5, h = 2);\n}\n\nmodule torso() {\n    // Shirt\n    translate([0, 0, 35]) scale([15, 10, 30]) cube(center = true);\n    \n    // Suit jacket\n    difference() {\n        translate([0, 0, 38]) scale([17, 12, 32]) cube(center = true);\n        \n        // V-neck opening\n        translate([0, 6, 52]) rotate([0, 30, 0]) cube([20, 2, 15], center = true);\n        translate([0, 6, 52]) rotate([0, -30, 0]) cube([20, 2, 15], center = true);\n        \n        // Bottom taper\n        translate([0, 0, 22]) cube([34, 24, 4], center = true);\n    }\n    \n    // Tie\n    color(\"red\") {\n        translate([0, 5, 48]) cube([3, 0.5, 12], center = true);\n        translate([0, 5, 42]) cube([6, 0.5, 6], center = true);\n    }\n    \n    // Belt\n    color(\"black\") translate([0, 0, 24]) cube([16, 11, 3], center = true);\n}\n\nmodule legs() {\n    // Left leg\n    translate([-5, 0, 12]) leg();\n    \n    // Right leg\n    translate([5, 0, 12]) leg();\n}\n\nmodule leg() {\n    // Upper leg\n    cylinder(r = 4, h = 12);\n    \n    // Lower leg\n    translate([0, 0, -12]) cylinder(r = 3.5, h = 12);\n    \n    // Shoe\n    color(\"black\") {\n        translate([0, -2, -18]) scale([5, 12, 4]) cube(center = true);\n    }\n}\n\nmodule left_arm() {\n    // Upper arm\n    rotate([0, 0, 20]) cylinder(r = 3, h = 12);\n    \n    // Lower arm\n    translate([0, 10, 0]) rotate([0, 0, -30]) cylinder(r = 2.5, h = 10);\n    \n    // Hand\n    translate([0, 19, -2]) sphere(r = 2.5);\n}\n\nmodule briefcase() {\n    color(\"brown\") {\n        difference() {\n            // Main case body\n            cube([12, 8, 10], center = true);\n            \n            // Handle cutout\n            translate([0, 0, 6]) cube([8, 2, 4], center = true);\n        }\n        \n        // Handle\n        translate([0, 0, 8]) rotate([90, 0, 0]) cylinder(r = 1, h = 8);\n        \n        // Latches\n        translate([-4, 4.5, 0]) cube([2, 1, 1], center = true);\n        translate([4, 4.5, 0]) cube([2, 1, 1], center = true);\n    }\n}\n\n// Generate the figure\nexecutive_figure();",
    "renders": true
  },
  {
    "vehicle": "luxury",
    "openscad_code": "// Luxury mechanical watch case (≈ 42 mm Ø) – realistic style, medium complexity\n// All parts printable without supports; wall thickness ≥ 1 mm\n\n$fn=60;\n\nmodule case_body(){\n    // Main case – cylinder with rounded top\n    difference(){\n        union(){\n            cylinder(h=10,d=42,center=true);              // central body\n            translate([0,0,5])\n                scale([1,1,0.4])\n                    sphere(d=42);                         // domed crystal area\n        }\n        // Hollow cavity for movement\n        translate([0,0,-1])\n            cylinder(h=12,d=38,center=true);\n        // Crown tunnel\n        rotate([0,90,0])\n            translate([21,0,0])\n                cylinder(h=7,d=6,center=true);\n    }\n}\n\nmodule lugs(){\n    // Standard 20 mm strap lugs\n    for(side=[-1,1])\n        translate([side*23,0,0])\n            rotate([0,side*90,0])\n                difference(){\n                    cube([8,8,5],center=true);            // lug block\n                    translate([0,0,-3])\n                        cylinder(h=8,d=3,center=true);    // spring-bar hole\n                }\n}\n\nmodule crown(){\n    // Winding crown with grip lines\n    difference(){\n        rotate([0,90,0])\n            translate([25,0,0])\n                cylinder(h=5,d=7,center=true);            // crown body\n        // Grip knurling\n        for(i=[-40:20:40])\n            rotate([0,i,0])\n                translate([25,0,0])\n                    cube([0.5,7.1,0.5],center=true);\n    }\n}\n\nmodule bezel(){\n    // Rotating bezel with minute marks\n    difference(){\n        cylinder(h=3,d=44,center=true);                   // bezel ring\n        cylinder(h=4,d=40,center=true);                   // recess\n    }\n    // Minute markers\n    for(a=[0:6:354])\n        rotate([0,0,a])\n            translate([21,0,1.5])\n                cube([0.5,1.5,1],center=true);\n}\n\nmodule case_back(){\n    // Screw-down case back\n    difference(){\n        cylinder(h=2,d=40,center=true);\n        translate([0,0,-1])\n            cylinder(h=4,d=33,center=true);               // cavity\n    }\n}\n\n// Assembly\nunion(){\n    case_body();\n    lugs();\n    crown();\n    translate([0,0,6.5]) bezel();\n    translate([0,0,-7]) case_back();\n}",
    "renders": true
  },
  {
    "vehicle": "flagship",
    "openscad_code": "// Flagship – medium-complexity, realistic style, 3D-printable\n// Overall length ≈ 90 mm.  No unsupported overhangs >45°.  Wall thickness 1.2 mm.\n\n$fn = 32;\n\n// Main dimensions\nhull_l  = 85;          // waterline length\nhull_w  = 18;          // max beam\nhull_h  = 12;          // draught + freeboard\ndeck_h  = 2.4;         // deck plate thickness\n\n// Hull shape\nmodule hull() {\n    difference() {\n        // Solid hull – rounded edge box\n        minkowski() {\n            cube([hull_l, hull_w, hull_h], center=true);\n            sphere(2);\n        }\n        // Hollow interior\n        translate([0,0,-1])\n            cube([hull_l-2.4, hull_w-2.4, hull_h+2], center=true);\n        // Flat bottom for printing\n        translate([0,0,-hull_h/2-1])\n            cube([hull_l+10, hull_w+10, 2], center=true);\n    }\n}\n\n// Main deck – simple slab on hull\nmodule deck() {\n    translate([0,0,hull_h/2-deck_h/2])\n        cube([hull_l, hull_w, deck_h], center=true);\n}\n\n// Superstructure block\nsuper_l = 30;\nsuper_w = 14;\nsuper_h = 8;\n\nmodule superstructure() {\n    difference() {\n        translate([hull_l/4, 0, hull_h/2+deck_h/2+super_h/2])\n            cube([super_l, super_w, super_h], center=true);\n        // Hollow inside\n        translate([hull_l/4, 0, hull_h/2+deck_h/2+super_h/2])\n            cube([super_l-2.4, super_w-2.4, super_h+1], center=true);\n    }\n}\n\n// Bridge / navigation\nmodule bridge() {\n    difference() {\n        // Forward half-cylinder\n        translate([hull_l/4+super_l/4, 0,\n                   hull_h/2+deck_h/2+super_h+3])\n            rotate([0,90,0])\n                cylinder(h=super_w-2, r=4, center=true);\n        // Window cutout\n        translate([hull_l/4+super_l/4+3, 0,\n                   hull_h/2+deck_h/2+super_h+3])\n            rotate([0,90,0])\n                cylinder(h=super_w, r=2.5, center=true);\n    }\n}\n\n// Smoke stack\nmodule funnel() {\n    translate([hull_l/6, 0, hull_h/2+deck_h/2+super_h+6])\n        cylinder(h=10, r1=3, r2=2, center=false);\n}\n\n// Gun turret with barrel\nmodule turret(pos_x) {\n    translate([pos_x, 0, hull_h/2+deck_h/2+2])\n        difference() {\n            cylinder(h=4, r=5, center=false);\n            // Hollow gun well\n            translate([0,0,-1])\n                cylinder(h=6, r=3, center=false);\n        }\n    // Barrel\n    translate([pos_x+5, 0, hull_h/2+deck_h/2+4])\n        rotate([0,-10,0])\n            cylinder(h=12, r=1.2, center=false);\n}\n\n// Mast with radar\nmodule mast(pos_x) {\n    translate([pos_x, 0, hull_h/2+deck_h/2])\n        cylinder(h=20, r=0.8, center=false);\n    // Simple radar disk\n    translate([pos_x, 0, hull_h/2+deck_h/2+18])\n        rotate([90,0,0])\n            cylinder(h=0.8, r=4, center=true);\n}\n\n// Lifeboat davits along sides\nmodule lifeboats() {\n    for (x=[-hull_l/3, -hull_l/6, hull_l/6, hull_l/3]) {\n        // Davits\n        translate([x, hull_w/2-1, hull_h/2+deck_h/2+3])\n            rotate([0,-45,0])\n                cylinder(h=5, r=0.5, center=false);\n        // Boat hull\n        translate([x, hull_w/2-2, hull_h/2+deck_h/2+1.5])\n            rotate([90,0,0])\n                cylinder(h=6, r1=1, r2=1, center=true);\n    }\n    mirror([0,1,0]) lifeboats();\n}\n\n// Anchor hawse pipes\nmodule anchors() {\n    for (y=[-4,4]) {\n        translate([-hull_l/2+3, y, hull_h/2-2])\n            rotate([90,0,0])\n                cylinder(h=4, r=1.5, center=false);\n    }\n}\n\n// Assembly\nhull();\ndeck();\nsuperstructure();\nbridge();\nfunnel();\nturret(-hull_l/4);\nturret(hull_l/12);\nmast(-hull_l/2+10);\nlifeboats();\nanchors();",
    "renders": true
  },
  {
    "vehicle": "prestige",
    "openscad_code": "// Prestige lighter - realistic style, medium complexity\n// 3D printable model with proper wall thickness and no overhangs\n\n// Main dimensions\n$fn = 50;\nbody_width = 40;\nbody_length = 60;\nbody_height = 14;\nwall_thickness = 2;\nhinge_radius = 3;\nhinge_length = 8;\n\n// Top lid dimensions\nlid_length = 30;\nlid_height = 10;\nlid_clearance = 0.2;\n\n// Flint wheel dimensions\nwheel_radius = 4;\nwheel_width = 3;\nwheel_pos_x = 15;\nwheel_pos_y = body_length * 0.7;\n\n// Chimney dimensions\nchimney_width = 12;\nchimney_length = 18;\nchimney_height = 8;\n\n// Wind guard dimensions\nguard_height = 8;\nguard_thickness = 1;\n\n// Main body shell\nmodule lighter_body() {\n    difference() {\n        // Outer body\n        translate([0, 0, body_height/2])\n            cube([body_width, body_length, body_height], center=true);\n        \n        // Inner cavity\n        translate([0, 0, body_height/2 + wall_thickness])\n            cube([body_width - 2*wall_thickness, \n                  body_length - 2*wall_thickness, \n                  body_height], center=true);\n        \n        // Lid cutout\n        translate([0, body_length/2 - lid_length/2, body_height - lid_height/2])\n            cube([body_width - 2*wall_thickness, \n                  lid_length + wall_thickness, \n                  lid_height], center=true);\n    }\n}\n\n// Top lid with hinge\nmodule lighter_lid() {\n    union() {\n        // Main lid\n        translate([0, body_length/2 - lid_length/2, body_height + lid_height/2])\n            cube([body_width - 2*wall_thickness, lid_length, lid_height], center=true);\n        \n        // Hinge pin\n        translate([0, body_length/2, body_height + hinge_radius])\n            rotate([90, 0, 0])\n                cylinder(r=hinge_radius, h=hinge_length, center=true);\n    }\n}\n\n// Flint wheel assembly\nmodule flint_wheel() {\n    // Wheel\n    translate([wheel_pos_x, wheel_pos_y, body_height + wheel_radius])\n        rotate([90, 0, 0])\n            cylinder(r=wheel_radius, h=wheel_width, center=true);\n    \n    // Spur gear pattern on wheel\n    for(i = [0:15:345]) {\n        rotate([0, 0, i])\n            translate([wheel_pos_x, wheel_pos_y + wheel_radius + 0.5, body_height])\n                cube([0.5, 1, wheel_width], center=true);\n    }\n}\n\n// Chimney and wind guard\nmodule chimney() {\n    difference() {\n        // Main chimney\n        translate([0, body_length/4, body_height + chimney_height/2])\n            cube([chimney_width, chimney_length, chimney_height], center=true);\n        \n        // Inner chimney space\n        translate([0, body_length/4, body_height + chimney_height/2 + 1])\n            cube([chimney_width - 2*wall_thickness, \n                  chimney_length - 2*wall_thickness, \n                  chimney_height], center=true);\n    }\n    \n    // Wind guard\n    translate([0, body_length/4 - chimney_length/2 - guard_thickness/2, \n               body_height + guard_height/2])\n        cube([chimney_width + 4, guard_thickness, guard_height], center=true);\n}\n\n// Sparking flint mechanism\nmodule flint_mechanism() {\n    // Spring tube\n    translate([-wheel_pos_x + 2, wheel_pos_y, body_height/2])\n        cylinder(r=2, h=body_height, center=true);\n    \n    // Screw head\n    translate([-wheel_pos_x + 2, wheel_pos_y, wall_thickness])\n        cylinder(r=3, h=2, center=true);\n}\n\n// Fuel opening\nmodule fuel_opening() {\n    translate([0, -body_length/4, body_height - 2])\n        cylinder(r=4, h=4, center=true);\n}\n\n// Side texturing\nmodule side_texture() {\n    for(i = [0:10:50]) {\n        translate([body_width/2 + 0.1, i - body_length/2, body_height/2])\n            cube([0.2, 8, body_height], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    lighter_body();\n    translate([0, 0, 0])\n        lighter_lid();\n    flint_wheel();\n    chimney();\n    flint_mechanism();\n    fuel_opening();\n    side_texture();\n    mirror([1, 0, 0])\n        side_texture();\n}",
    "renders": true
  },
  {
    "vehicle": "grand",
    "openscad_code": "// Grand Piano – realistic style, medium complexity\n// Overall footprint ~70 mm (length) × 35 mm (width) × 25 mm (height)\n\n$fa = 2; $fs = 0.5;\n\nmodule grand_piano() {\n    difference() {\n        // main body – the curved wing shape\n        hull() {\n            translate([0,0,10])  cube([70,35,1], center=true);\n            translate([-30,0,10]) cube([10,30,1], center=true);\n            translate([ 30,0,10]) cube([10,30,1], center=true);\n        }\n\n        // hollow cavity for sound\n        translate([0,0,8])\n            cube([60,25,8], center=true);\n    }\n\n    // lid – hinged at back\n    translate([0, 20, 18])\n        rotate([70,0,0])\n            cube([65,30,1.5], center=true);\n\n    // lid prop stick\n    translate([0, 10, 18])\n        cylinder(h=15, d=2);\n\n    // keyboard cover panel\n    translate([-28, 0, 11])\n        cube([15,32,2]);\n\n    // white keys\n    for(x=[-34 : 2.2 : -22])\n        translate([x, 0, 11.5])\n            cube([1.8, 30, 1.2]);\n\n    // black keys\n    for(x=[-33.5 : 4.4 : -23])\n        translate([x, 0, 12.8])\n            cube([1.2, 18, 2]);\n\n    // three legs\n    module leg() {\n        cylinder(h=15, d=3);\n        sphere(d=3.5);\n    }\n    translate([-25,-12,2]) leg();\n    translate([ 25,-12,2]) leg();\n    translate([  0, 12,2]) leg();\n\n    // pedal lyre\n    translate([0,-16,2])\n        difference() {\n            cylinder(h=6, d=8);\n            translate([0,0,-1])\n                cylinder(h=8, d=4);\n        }\n\n    // three pedals\n    for(x=[-3 : 3 : 3])\n        translate([x,-17,8])\n            rotate([90,0,0])\n                cylinder(h=5, d=1.5);\n\n    // music stand\n    translate([-15, 0, 18])\n        rotate([80,0,0])\n            cube([25,20,1], center=true);\n}\n\ngrand_piano();",
    "renders": true
  },
  {
    "vehicle": "premium",
    "openscad_code": "// Premium fountain pen model - realistic style\n// Total length: 82 mm, diameter: 12 mm\n\n$fn = 50;\n\nmodule pen_body() {\n    // Main barrel\n    difference() {\n        cylinder(h = 60, d = 11);\n        translate([0, 0, -1]) cylinder(h = 62, d = 9);\n    }\n    \n    // Grip section\n    translate([0, 0, -15]) {\n        difference() {\n            cylinder(h = 20, d1 = 11, d2 = 9);\n            translate([0, 0, -1]) cylinder(h = 22, d = 7.5);\n        }\n    }\n    \n    // Cap threads\n    translate([0, 0, 45]) {\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90]) {\n                translate([4.5, 0, 0]) cube([1, 0.5, 3], center = true);\n            }\n        }\n    }\n}\n\nmodule pen_cap() {\n    // Main cap body\n    difference() {\n        cylinder(h = 40, d = 12.5);\n        translate([0, 0, -1]) cylinder(h = 42, d = 11.5);\n    }\n    \n    // Clip\n    translate([5.5, 0, 20]) {\n        rotate([90, 0, 0]) {\n            difference() {\n                cube([1.2, 25, 2.5]);\n                translate([-0.5, 2, 0]) cube([2.2, 5, 3]);\n            }\n        }\n    }\n    \n    // Cap band detail\n    translate([0, 0, 2]) {\n        difference() {\n            cylinder(h = 5, d = 13);\n            cylinder(h = 5, d = 12);\n        }\n    }\n    \n    // Inner cap for sealing\n    translate([0, 0, 15]) {\n        difference() {\n            cylinder(h = 23, d = 9.5);\n            translate([0, 0, 18]) cylinder(h = 8, d = 7);\n        }\n    }\n}\n\nmodule nib() {\n    // Nib body\n    translate([0, 0, -30]) {\n        rotate([0, 180, 0]) {\n            difference() {\n                cylinder(h = 15, d1 = 9, d2 = 6);\n                translate([0, 0, -1]) cylinder(h = 17, d = 7);\n            }\n            \n            // Nib slit\n            translate([0, 0, 7.5]) cube([0.3, 9, 15], center = true);\n            \n            // Breather hole\n            translate([0, 0, 3]) rotate([90, 0, 0]) cylinder(h = 1, d = 2);\n            \n            // Nib tip\n            translate([0, 0, 14.5]) sphere(d = 2);\n        }\n    }\n}\n\nmodule feed() {\n    // Feed body\n    translate([0, 0, -25]) {\n        rotate([0, 180, 0]) {\n            difference() {\n                cylinder(h = 15, d = 7.5);\n                translate([0, 0, -1]) cylinder(h = 17, d = 6.5);\n            }\n            \n            // Feed fins\n            for(i = [1:8]) {\n                translate([0, 0, i * 1.5]) {\n                    difference() {\n                        cylinder(h = 0.5, d = 8);\n                        cylinder(h = 0.5, d = 6.5);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Assemble the pen\nunion() {\n    // Main body assembly\n    pen_body();\n    nib();\n    feed();\n    \n    // Cap positioned next to pen\n    translate([20, 0, 0]) rotate([90, 0, 0]) {\n        pen_cap();\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "elite",
    "openscad_code": "// Elite Soldier Figure - Realistic Style, Medium Complexity\n// Approx 75mm tall, 3D printable with minimal supports\n\n// Overall dimensions\nfigure_height = 75;\nhead_d = 12;\nbody_w = 20;\nbody_d = 12;\nbody_h = 30;\nleg_h = 25;\narm_l = 20;\n\n// Wall thickness for 3D printing\nwall = 1.5;\n\nmodule head() {\n    // Main head sphere\n    translate([0, 0, figure_height - head_d/2])\n        sphere(d = head_d, $fn = 32);\n    \n    // Helmet ridge\n    translate([0, 0, figure_height - head_d/2 + 2])\n        cylinder(h = 3, d1 = head_d + 2, d2 = head_d + 4, $fn = 32);\n    \n    // Visor slot\n    difference() {\n        translate([0, -head_d/2 - 0.1, figure_height - head_d/2])\n            cube([head_d * 0.8, 0.2, 4], center = true);\n        translate([0, -head_d/2 - 0.2, figure_height - head_d/2 + 1])\n            cube([head_d * 0.6, 0.4, 2], center = true);\n    }\n}\n\nmodule torso() {\n    // Main body\n    translate([0, 0, leg_h + body_h/2])\n        cube([body_w, body_d, body_h], center = true);\n    \n    // Chest armor plate\n    translate([0, body_d/2 + 0.1, leg_h + body_h - 8])\n        cube([body_w - 4, 1, 12], center = true);\n    \n    // Backpack\n    translate([0, -body_d/2 - 3, leg_h + body_h/2])\n        cube([body_w - 6, 6, body_h - 8], center = true);\n}\n\nmodule arm(side = 1) {\n    // Upper arm\n    translate([side * (body_w/2 + 3), 0, leg_h + body_h - 10])\n        rotate([0, 0, side * -15])\n        cylinder(h = arm_l/2, d = 5, $fn = 16);\n    \n    // Lower arm\n    translate([side * (body_w/2 + 3 + arm_l/2 * cos(15)), \n               side * (arm_l/2 * sin(15)), \n               leg_h + body_h - 10 - arm_l/2 * sin(15)])\n        rotate([0, 0, side * -45])\n        cylinder(h = arm_l/2, d = 4, $fn = 16);\n    \n    // Hand\n    translate([side * (body_w/2 + 3 + arm_l * cos(30)), \n               side * (arm_l * sin(30)), \n               leg_h + body_h - 10 - arm_l * sin(30)])\n        sphere(d = 4, $fn = 16);\n    \n    // Weapon (rifle on right side)\n    if (side == 1) {\n        translate([body_w/2 + 3 + arm_l * cos(30) + 8, \n                   arm_l * sin(30), \n                   leg_h + body_h - 10 - arm_l * sin(30)])\n            rotate([0, 90, 0])\n            cylinder(h = 20, d = 2, $fn = 8);\n    }\n}\n\nmodule leg(side = 1) {\n    // Upper leg\n    translate([side * 5, 0, leg_h/2 + 3])\n        cylinder(h = leg_h/2, d1 = 6, d2 = 5, $fn = 16);\n    \n    // Lower leg\n    translate([side * 5, 0, 3])\n        cylinder(h = leg_h/2, d1 = 5, d2 = 4, $fn = 16);\n    \n    // Boot\n    translate([side * 5, 0, 0])\n        cube([6, 10, 3], center = true);\n    \n    // Knee pad\n    translate([side * 5, 0, leg_h/2 + 3])\n        sphere(d = 5, $fn = 16);\n}\n\nmodule base() {\n    // Simple oval base for stability\n    scale([1.5, 1, 0.3])\n        cylinder(h = 2, d = 30, $fn = 32);\n}\n\n// Assemble figure\nunion() {\n    base();\n    head();\n    torso();\n    \n    // Arms\n    arm(1);   // Right arm\n    arm(-1);  // Left arm\n    \n    // Legs\n    leg(1);   // Right leg\n    leg(-1);  // Left leg\n}\n\n// Add small details\ntranslate([0, body_d/2 + 1, leg_h + body_h - 15])\n    cube([2, 1, 2], center = true);\n\ntranslate([0, body_d/2 + 1, leg_h + body_h - 20])\n    cube([2, 1, 2], center = true);\n\ntranslate([0, body_d/2 + 1, leg_h + body_h - 25])\n    cube([2, 1, 2], center = true);",
    "renders": true
  },
  {
    "vehicle": "select",
    "openscad_code": "// Realistic style 3D printable SELECT switch model\n// Medium complexity – recognizable Cherry MX style switch\n\n$fn = 36;  // Smooth curves\nwall = 1.2;  // Common FDM wall thickness\nswitch_height = 14;\nswitch_width = 15.6;\nswitch_depth = 15.6;\nstem_d = 4.5;\nstem_h = 4.0;\npin_d = 1.15;\npin_l = 3.0;\nplate_th = 1.5;\n\nmodule switch_body() {\n    difference() {\n        // Main rectangular body\n        translate([0, 0, switch_height/2])\n            cube([switch_width, switch_depth, switch_height], center=true);\n        \n        // Top chamfered edge\n        translate([0, 0, switch_height - 2.5])\n            cylinder(h=2.5, r1=switch_width/2 - 0.5, r2=switch_width/2 + 0.5, center=true);\n        \n        // Bottom chamfered edge\n        translate([0, 0, 2.5])\n            cylinder(h=2.5, r1=switch_width/2 + 0.5, r2=switch_width/2 - 0.5, center=true);\n    }\n}\n\nmodule stem() {\n    // Central cross stem\n    for (rot = [0, 90]) {\n        rotate([0, 0, rot])\n            translate([0, 0, stem_h/2 + switch_height])\n                cube([stem_d * 0.3, stem_d * 0.9, stem_h], center=true);\n    }\n}\n\nmodule pins() {\n    // Two metal pins on bottom\n    translate([switch_width/2 - 2.5, 0, 0])\n        cylinder(h=pin_l, r=pin_d/2, center=true);\n    translate([-switch_width/2 + 2.5, 0, 0])\n        cylinder(h=pin_l, r=pin_d/2, center=true);\n    \n    // Center plastic post\n    translate([0, 0, -0.5])\n        cylinder(h=2, r=3/2, center=true);\n}\n\nmodule keycap_mount() {\n    // Four corner clips for keycap retention\n    for (x = [-1, 1])\n        for (y = [-1, 1])\n            translate([x * 5.5, y * 5.5, switch_height + 1])\n                cube([2, 2, 2], center=true);\n}\n\nmodule switch_assembly() {\n    union() {\n        switch_body();\n        stem();\n        pins();\n        keycap_mount();\n        \n        // PCB mounting clips\n        translate([switch_width/2, 0, switch_height/2])\n            cube([2, 3, 8], center=true);\n        translate([-switch_width/2, 0, switch_height/2])\n            cube([2, 3, 8], center=true);\n        \n        // LED slot\n        translate([0, switch_depth/2 - 1, switch_height - 3])\n            cube([3, 1, 3], center=true);\n    }\n}\n\n// Render the complete switch\nswitch_assembly();",
    "renders": true
  },
  {
    "vehicle": "signature",
    "openscad_code": "// Signature stamp – stylized initials \"JS\" in medium-complexity, 3-D printable form\n// Overall footprint ≈ 70 mm × 35 mm × 6 mm\n\n// ---------- parameters ----------\nplate_w   = 70;\nplate_h   = 35;\nplate_t   = 2;          // base-plate thickness\ntext_h    = 4;          // relief height of letters\nwall      = 2;          // minimum wall thickness for printing\n\n// ---------- module: rounded rectangle base ----------\nmodule rounded_base(w, h, t, r){\n    linear_extrude(height = t, center = false)\n        offset(r = r)\n            square([w, h], center = true);\n}\n\n// ---------- module: stylized letter J ----------\nmodule letter_J(){\n    // vertical stem\n    translate([0, 0, 0])\n        cube([wall, 20, text_h], center = true);\n\n    // bottom hook – built from rods to avoid overhangs\n    translate([0, -10 + wall/2, text_h/2])\n        rotate([90, 0, 0])\n            cylinder(h = 8, r = wall/2, center = true);\n\n    translate([0, -14, text_h/2])\n        rotate([0, 90, 0])\n            cylinder(h = wall, r = 4, center = true);\n\n    // close hook end\n    translate([4, -14, text_h/2])\n        cube([wall, wall, text_h], center = true);\n}\n\n// ---------- module: stylized letter S ----------\nmodule letter_S(){\n    // top semicircle\n    difference(){\n        translate([0, 7, text_h/2])\n            rotate([90, 0, 0])\n                cylinder(h = wall, r = 7, center = true);\n        translate([0, 7 + 7.1, text_h/2])\n            rotate([90, 0, 0])\n                cylinder(h = wall + 0.1, r = 7 - wall, center = true);\n    }\n\n    // bottom semicircle (mirrored)\n    difference(){\n        translate([0, -7, text_h/2])\n            rotate([-90, 0, 0])\n                cylinder(h = wall, r = 7, center = true);\n        translate([0, -7 - 7.1, text_h/2])\n            rotate([-90, 0, 0])\n                cylinder(h = wall + 0.1, r = 7 - wall, center = true);\n    }\n\n    // center bar\n    translate([0, 0, text_h/2])\n        cube([wall, 14, text_h], center = true);\n}\n\n// ---------- assembly ----------\ndifference(){\n    // base plate with rounded edges\n    rounded_base(plate_w, plate_h, plate_t + text_h, 4);\n\n    // optional recessed bottom – saves material, keeps surface flat\n    translate([0, 0, -0.01])\n        rounded_base(plate_w - 4, plate_h - 4, plate_t + text_h + 0.02, 3);\n}\n\n// position letters on base\nunion(){\n    translate([-15, 0, plate_t])\n        letter_J();\n    translate([15, 0, plate_t])\n        letter_S();\n}",
    "renders": true
  },
  {
    "vehicle": "limited",
    "openscad_code": "// Realistic medium-complexity limited model: Vintage 35 mm film canister\n// External dimensions: ~60 mm diameter × 50 mm height\n// Wall thickness: 1.5 mm (safe for FDM printing)\n\n// Overall scale factor – tweak if printer is calibrated differently\nscale_factor = 1;\n\n// --- Parameters ----------------------------------------------------------\nwall = 1.5;                 // wall thickness, mm\nd_can = 50 * scale_factor;  // outer diameter of canister\nh_can = 40 * scale_factor;  // outer height of canister\nd_cap = d_can + 2;          // cap lip overlap\nh_cap = 8 * scale_factor;   // cap height\nh_lip = 3 * scale_factor;   // cap lip depth\nknurl_h = 0.6 * scale_factor;\nknurl_ridge = 0.4 * scale_factor;\ncore_d = 12 * scale_factor; // inner spool core\ncore_h = h_can - 2 * wall;\nlabel_w = 30 * scale_factor;\nlabel_h = 15 * scale_factor;\n\n// --- Modules ------------------------------------------------------------\nmodule canister_body() {\n    difference() {\n        // Outer shell\n        cylinder(h = h_can, d = d_can, $fn = 120);\n        translate([0, 0, wall])\n            cylinder(h = h_can + 1, d = d_can - 2 * wall, $fn = 120);\n    }\n}\n\nmodule cap() {\n    difference() {\n        union() {\n            // Main cap disc\n            cylinder(h = h_cap, d = d_cap, $fn = 120);\n            // Lip that snaps over canister rim\n            translate([0, 0, h_cap - h_lip])\n                cylinder(h = h_lip, d = d_can + 2 * wall, $fn = 120);\n        }\n        // Hollow inside\n        translate([0, 0, wall])\n            cylinder(h = h_cap + 1, d = d_cap - 2 * wall, $fn = 120);\n    }\n    // Knurled grip ring\n    for (i = [0 : 30]) {\n        rotate([0, 0, i * 12])\n            translate([d_cap / 2 - wall, 0, h_cap / 2])\n                cube([knurl_ridge, knurl_h, h_cap - 2 * wall], center = true);\n    }\n}\n\nmodule spool_core() {\n    difference() {\n        cylinder(h = core_h, d = core_d, $fn = 60);\n        translate([0, 0, wall])\n            cylinder(h = core_h + 1, d = core_d - 2 * wall, $fn = 60);\n    }\n}\n\nmodule label_recess() {\n    // Flat recessed area for a sticker or embossing\n    translate([0, d_can / 2 - wall - label_h / 2, h_can / 2])\n        rotate([90, 0, 0])\n            cube([label_w, label_h, 0.5], center = true);\n}\n\n// --- Assembly ------------------------------------------------------------\n$fs = 0.5;\n$fa = 2;\n\n// Main canister\ncanister_body();\n\n// Spool inside\ntranslate([0, 0, wall])\n    spool_core();\n\n// Label recess\ndifference() {\n    canister_body();\n    label_recess();\n}\n\n// Cap – raise/lower for print-in-place test or separate part\ntranslate([0, 0, h_can + 5])\n    cap();",
    "renders": true
  },
  {
    "vehicle": "special",
    "openscad_code": "// Realistic 3D-Printable \"Special\" — a vintage pocket watch\n// Overall size ≈ 60 mm diameter × 15 mm thick (closed)\n\n$fn = 60;          // Smooth curves for realism\n\nmodule body() {\n    // Outer case: two shells with wall thickness 2 mm\n    difference() {\n        cylinder(h = 15, d = 60);               // Full case\n        translate([0, 0, 2])\n            cylinder(h = 15, d = 56);           // Hollow inside\n    }\n}\n\nmodule lid() {\n    // Hinged lid, 2 mm wall, slight dome\n    difference() {\n        translate([0, 0, 15])\n            scale([1, 1, 0.3])\n                sphere(d = 60);                  // Dome\n        translate([0, 0, 14])\n            cylinder(h = 5, d = 56);             // Hollow dome\n    }\n}\n\nmodule hinge() {\n    // Simple barrel hinge on the left side\n    for (y = [-15, 0, 15])\n        translate([-32, y, 7.5])\n            rotate([90, 0, 0])\n                cylinder(h = 6, d = 4);          // Three knuckles\n}\n\nmodule crown() {\n    // Winding crown at 3 o’clock\n    translate([30, 0, 7.5])\n        rotate([90, 0, 0])\n            cylinder(h = 8, d1 = 6, d2 = 4);     // Tapered crown\n}\n\nmodule dial() {\n    // Flat dial face\n    color(\"ivory\")\n    translate([0, 0, 2])\n        cylinder(h = 0.5, d = 54);\n}\n\nmodule hands() {\n    // Hour and minute hands\n    color(\"black\")\n    translate([0, 0, 2.6])\n        rotate([0, 0, 45])\n            cube([12, 1, 0.5], center = true);   // Hour hand\n    translate([0, 0, 2.8])\n        rotate([0, 0, 180])\n            cube([16, 0.8, 0.5], center = true); // Minute hand\n}\n\nmodule numerals() {\n    // Raised Roman numerals\n    for (a = [0:30:330]) {\n        rotate([0, 0, a])\n            translate([0, 23, 2.5])\n                cube([3, 1, 0.5], center = true);\n    }\n}\n\nmodule loop() {\n    // Top loop for chain\n    translate([0, 30, 15])\n        rotate([90, 0, 0])\n            toroid(4, 2);                        // Printable torus\n}\n\nmodule toroid(R, r) {\n    rotate_extrude()\n        translate([R, 0])\n            circle(r);\n}\n\n// Assembly\nunion() {\n    body();\n    lid();\n    hinge();\n    crown();\n    dial();\n    hands();\n    numerals();\n    loop();\n}",
    "renders": true
  },
  {
    "vehicle": "edition",
    "openscad_code": "// OpenSCAD code for a realistic medium-complexity fountain pen\n// Dimensions in mm\n\n// Overall scale factor for easy resizing\nscale_factor = 1;\n\n// Main body parameters\nbody_length = 70 * scale_factor;\nbody_diameter = 12 * scale_factor;\ncap_length = 65 * scale_factor;\ncap_diameter = 14 * scale_factor;\n\n// Wall thickness for 3D printing\nwall_thickness = 1.2 * scale_factor;\n\n// Grip section\ngrip_length = 15 * scale_factor;\ngrip_diameter = 10 * scale_factor;\n\n// Nib parameters\nnib_length = 12 * scale_factor;\nnib_width = 6 * scale_factor;\nnib_thickness = 0.6 * scale_factor;\n\n// Clip parameters\nclip_height = 40 * scale_factor;\nclip_width = 2 * scale_factor;\nclip_thickness = 1 * scale_factor;\n\nmodule pen_body() {\n    difference() {\n        // Main cylindrical body\n        cylinder(h=body_length, d=body_diameter, $fn=64);\n        \n        // Hollow center\n        translate([0, 0, -1])\n            cylinder(h=body_length+2, d=body_diameter-2*wall_thickness, $fn=64);\n        \n        // Threads for cap (simplified)\n        for(i=[0:5:body_length-15]) {\n            translate([0, 0, i])\n                cylinder(h=2, d=body_diameter+0.5, $fn=64);\n        }\n    }\n}\n\nmodule grip_section() {\n    difference() {\n        // Tapered grip\n        cylinder(h1=grip_diameter, h2=grip_diameter-2, h=grip_length, $fn=32);\n        \n        // Center hole for ink\n        translate([0, 0, -1])\n            cylinder(h=grip_length+2, d=grip_diameter-2*wall_thickness, $fn=32);\n        \n        // Grip rings\n        for(i=[0:2:grip_length-2]) {\n            translate([0, 0, i])\n                difference() {\n                    cylinder(h=1, d=grip_diameter+0.5, $fn=64);\n                    cylinder(h=1.2, d=grip_diameter-0.5, $fn=64);\n                }\n        }\n    }\n}\n\nmodule nib() {\n    // Split nib shape\n    union() {\n        // Main nib body\n        translate([0, 0, -nib_length/2])\n            scale([1, nib_width/nib_length, 1])\n                sphere(d=nib_length, $fn=32);\n        \n        // Tipping material\n        translate([0, 0, nib_length/2-1])\n            sphere(d=2, $fn=16);\n    }\n}\n\nmodule cap() {\n    difference() {\n        // Outer shell\n        cylinder(h=cap_length, d=cap_diameter, $fn=64);\n        \n        // Inner cavity\n        translate([0, 0, -1])\n            cylinder(h=cap_length-5, d=body_diameter+0.5, $fn=64);\n        \n        // Tapered end\n        translate([0, 0, cap_length-5])\n            cylinder(h1=cap_diameter, h2=cap_diameter-4, h=5, $fn=64);\n    }\n    \n    // Clip\n    translate([cap_diameter/2, 0, cap_length-clip_height/2])\n        rotate([0, 90, 0])\n            linear_extrude(height=clip_thickness)\n                polygon(points=[\n                    [0, 0],\n                    [0, clip_height],\n                    [clip_width, clip_height-5],\n                    [clip_width, 0]\n                ]);\n}\n\n// Assembly\n// Main body\npen_body();\ntranslate([0, 0, body_length])\n    grip_section();\ntranslate([0, 0, body_length+grip_length])\n    rotate([90, 0, 0])\n        nib();\n\n// Cap (shown separate for visualization)\ntranslate([30, 0, 0])\n    cap();",
    "renders": true
  },
  {
    "vehicle": "heritage",
    "openscad_code": "// Traditional Japanese Hōryū-ji Pagoda (Heritage Temple)\n// Scaled for 3D printing ~80mm height\n\n// Base parameters\nbase_width = 40;\nbase_height = 4;\nwall_thickness = 2;\n\n// Main pagoda structure\nmodule pagoda() {\n    // Stone base platform\n    translate([0, 0, 0])\n        cube([base_width, base_width, base_height], center = true);\n    \n    // Lower platform details\n    for (i = [-1, 1]) {\n        translate([i * (base_width/2 - 2), 0, base_height/2])\n            cube([4, base_width - 8, base_height/2], center = true);\n        translate([0, i * (base_width/2 - 2), base_height/2])\n            cube([base_width - 8, 4, base_height/2], center = true);\n    }\n    \n    // First level - main hall\n    translate([0, 0, base_height + 15])\n        rotate([0, 0, 45]) {\n            difference() {\n                cube([30, 30, 30], center = true);\n                // Hollow interior\n                translate([0, 0, -wall_thickness/2])\n                    cube([30 - wall_thickness*2, 30 - wall_thickness*2, 30 + wall_thickness], center = true);\n                // Door opening\n                translate([0, -15, -5])\n                    cube([8, wall_thickness + 1, 12], center = true);\n            }\n        }\n    \n    // Second level - smaller roof\n    translate([0, 0, base_height + 30 + 8])\n        rotate([0, 0, 45]) {\n            difference() {\n                cube([22, 22, 16], center = true);\n                translate([0, 0, -wall_thickness/2])\n                    cube([22 - wall_thickness*2, 22 - wall_thickness*2, 16 + wall_thickness], center = true);\n            }\n        }\n    \n    // Roof tiers\n    for (level = [0, 1]) {\n        roof_size = 34 - (level * 10);\n        roof_height = 6;\n        roof_z = base_height + 30 + (level * 16) + (level > 0 ? 8 : 0);\n        \n        // Main roof structure\n        translate([0, 0, roof_z])\n            difference() {\n                cube([roof_size, roof_size, roof_height], center = true);\n                // Beveled edges\n                translate([0, 0, -roof_height/2 + 1])\n                    cube([roof_size - 4, roof_size - 4, roof_height + 2], center = true);\n            }\n        \n        // Roof corners with curved brackets\n        for (corner = [[-1, -1], [1, -1], [-1, 1], [1, 1]]) {\n            translate([corner[0] * (roof_size/2 - 2), corner[1] * (roof_size/2 - 2), roof_z + roof_height/2])\n                cylinder(h = 4, r = 2, $fn = 8);\n        }\n    }\n    \n    // Final spire\n    translate([0, 0, base_height + 30 + 16 + 6 + 4])\n        cylinder(h = 12, r1 = 4, r2 = 2, $fn = 16);\n    \n    // Spire details\n    translate([0, 0, base_height + 30 + 16 + 6 + 4 + 12])\n        sphere(r = 3, $fn = 16);\n}\n\n// Generate the complete pagoda\npagoda();",
    "renders": true
  },
  {
    "vehicle": "legacy",
    "openscad_code": "// Vintage Pocket-Watch Legacy\n// Overall size ≈ 60 mm diameter × 15 mm thick\n\n$fn = 60;  // smooth curves\n\n// Main case\nmodule case() {\n    difference() {\n        union() {\n            // outer shell\n            cylinder(h = 10, d = 60, center = true);\n            // raised bezel ring\n            translate([0,0,5.5])\n                cylinder(h = 2, d1 = 62, d2 = 64, center = true);\n        }\n        // cavity for movement\n        translate([0,0,-1])\n            cylinder(h = 12, d = 54, center = true);\n        // crown tunnel\n        rotate([0,90,0])\n            translate([0,0,30.5])\n                cylinder(h = 10, d = 6, center = true);\n    }\n}\n\n// Crown\nmodule crown() {\n    translate([30,0,0])\n    rotate([0,90,0])\n    union() {\n        cylinder(h = 8, d = 8, center = true);\n        translate([4,0,0])\n            cylinder(h = 4, d = 5);\n    }\n}\n\n// Watch face\nmodule face() {\n    translate([0,0,1])\n    union() {\n        // dial plate\n        cylinder(h = 1, d = 52, center = true);\n        // hour markers raised\n        for (a = [0:30:330]) {\n            rotate([0,0,a])\n            translate([21,0,0.5])\n                cube([3,1,0.8], center = true);\n        }\n        // center boss\n        cylinder(h = 1.5, d = 6, center = true);\n    }\n}\n\n// Hour hand\nmodule hour_hand() {\n    translate([0,0,2.5])\n    rotate([0,0,90])\n    linear_extrude(height = 1.2)\n    polygon(points=[[0,0],[15,1.5],[15,-1.5]]);\n}\n\n// Minute hand\nmodule minute_hand() {\n    translate([0,0,3.8])\n    rotate([0,0,180])\n    linear_extrude(height = 1)\n    polygon(points=[[0,0],[20,1],[20,-1]]);\n}\n\n// Crystal\nmodule crystal() {\n    translate([0,0,6])\n    difference() {\n        cylinder(h = 2, d = 58, center = true);\n        translate([0,0,-1.1])\n            cylinder(h = 2.2, d = 56, center = true);\n    }\n}\n\n// Assembly\nunion() {\n    case();\n    crown();\n    face();\n    hour_hand();\n    minute_hand();\n    crystal();\n}",
    "renders": true
  },
  {
    "vehicle": "classic",
    "openscad_code": "// Classic LEGO 2x4 Brick - Realistic Medium Complexity\n// Dimensions in mm based on real LEGO measurements\n\n// Basic LEGO unit measurements\nunit = 8;  // 1 LEGO unit = 8mm\nplate_height = 3.2;\nbrick_height = 9.6;\n\n// Real LEGO dimensions\nknob_diameter = 4.8;\nknob_height = 1.8;\nwall_thickness = 1.5;\ntube_outer = 6.51;\ntube_inner = 4.8;\ntube_height = 5.6;\n\n// Create a 2x4 brick\nmodule lego_brick_2x4() {\n    difference() {\n        // Main brick body\n        cube([4*unit, 2*unit, brick_height], center=false);\n        \n        // Hollow interior\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            cube([4*unit - 2*wall_thickness, 2*unit - 2*wall_thickness, brick_height - wall_thickness], center=false);\n        \n        // Base tubes for clutch power\n        for (x = [0:3]) {\n            for (y = [0:1]) {\n                translate([x*unit + unit/2, y*unit + unit/2, 0]) {\n                    difference() {\n                        cylinder(h=tube_height, d=tube_outer, $fn=32);\n                        cylinder(h=tube_height + 0.1, d=tube_inner, $fn=32);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Top knobs\n    for (x = [0:3]) {\n        for (y = [0:1]) {\n            translate([x*unit + unit/2, y*unit + unit/2, brick_height])\n                cylinder(h=knob_height, d=knob_diameter, $fn=32);\n        }\n    }\n    \n    // Rounded top edges for realism\n    translate([0, 0, brick_height - 1])\n        cube([4*unit, 2*unit, 2], center=false);\n    \n    // Remove sharp edges with rounded corners\n    for (x = [0:4]) {\n        for (y = [0:2]) {\n            translate([x*unit, y*unit, -0.1])\n                cylinder(h=brick_height + 0.2, d=wall_thickness*2, $fn=32);\n        }\n    }\n    \n    // Corner rounding cuts\n    difference() {\n        children();\n        for (x = [0, 4*unit]) {\n            for (y = [0, 2*unit]) {\n                translate([x, y, 0])\n                    cylinder(h=brick_height + 0.2, d=wall_thickness*2, $fn=32);\n            }\n        }\n    }\n}\n\n// Chamfers on top edges\nmodule top_chamfers() {\n    rotate([0, 180, 0])\n    translate([0, 0, -brick_height])\n    difference() {\n        cube([4*unit, 2*unit, brick_height], center=false);\n        translate([0.5, 0.5, -0.1])\n            cube([4*unit - 1, 2*unit - 1, brick_height + 0.2], center=false);\n    }\n}\n\n// Final assembly with proper positioning\ntranslate([0, 0, 0])\nlego_brick_2x4();\n\n// Add subtle indentations between knobs for realism\nfor (x = [0:3]) {\n    for (y = [0:1]) {\n        translate([x*unit + unit/2, y*unit + unit/2, brick_height + knob_height/2])\n            rotate([0, 0, 45])\n            cube([3.2, 3.2, knob_height + 0.1], center=true);\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "vintage",
    "openscad_code": "// Vintage Film Camera - Realistic Style\n// Overall dimensions: ~65mm x 40mm x 35mm\n\n$fn = 50;\n\n// Main body module\nmodule camera_body() {\n    difference() {\n        // Main body block\n        cube([60, 35, 30], center=true);\n        \n        // Film counter window\n        translate([25, 18, 16])\n            cube([8, 2, 2], center=true);\n        \n        // Viewfinder window\n        translate([20, 0, 16])\n            cube([15, 10, 2], center=true);\n    }\n}\n\n// Lens assembly\nmodule lens() {\n    // Lens mount\n    translate([-32, 0, 0])\n    rotate([0, 90, 0])\n    difference() {\n        cylinder(h=8, d1=18, d2=15, center=true);\n        cylinder(h=10, d=12, center=true);\n    }\n    \n    // Front lens element\n    translate([-38, 0, 0])\n    rotate([0, 90, 0])\n    cylinder(h=3, d=14, center=true);\n    \n    // Aperture ring\n    translate([-35, 0, 0])\n    rotate([0, 90, 0])\n    difference() {\n        cylinder(h=5, d=16, center=true);\n        // Grip knurls\n        for(i=[0:30:330]) {\n            rotate([0, 0, i])\n            translate([7.5, 0, 0])\n            cube([1, 2, 5.5], center=true);\n        }\n    }\n}\n\n// Top controls\nmodule top_controls() {\n    // Shutter release button\n    translate([20, 15, 16])\n    cylinder(h=3, d=5, center=true);\n    \n    // Film advance lever\n    translate([25, 10, 16])\n    rotate([0, 0, -30])\n    difference() {\n        cube([15, 3, 2], center=true);\n        translate([7, 0, 0])\n        cylinder(h=3.1, d=4, center=true);\n    }\n    \n    // ISO dial\n    translate([10, 15, 16])\n    difference() {\n        cylinder(h=2, d=10, center=true);\n        for(i=[0:45:315]) {\n            rotate([0, 0, i])\n            translate([4.5, 0, 0])\n            cube([1, 0.5, 2.1], center=true);\n        }\n    }\n}\n\n// Viewfinder prism\nmodule viewfinder() {\n    translate([20, 0, 16])\n    difference() {\n        cube([15, 10, 8], center=true);\n        translate([0, 0, 4])\n        cube([13, 8, 4], center=true);\n    }\n}\n\n// Flash hot shoe\nmodule hot_shoe() {\n    translate([0, 15, 16])\n    difference() {\n        cube([20, 5, 4], center=true);\n        translate([0, 0, 2])\n        cube([18, 3, 4], center=true);\n    }\n}\n\n// Film door hinge detail\nmodule back_details() {\n    // Hinge\n    translate([-30, 0, -16])\n    for(i=[-15:10:15]) {\n        translate([0, i, 0])\n        cylinder(h=3, d=2, center=true);\n    }\n    \n    // Film rewind knob\n    translate([-25, -10, 16])\n    difference() {\n        cylinder(h=5, d=8, center=true);\n        cylinder(h=5.1, d=4, center=true);\n    }\n}\n\n// Assemble the camera\nunion() {\n    camera_body();\n    lens();\n    top_controls();\n    viewfinder();\n    hot_shoe();\n    back_details();\n}",
    "renders": true
  },
  {
    "vehicle": "antique",
    "openscad_code": "// Antique Brass Pocket Sundial (Compass Style) – 3D-printable\n// Outer diameter ≈ 60 mm, height closed ≈ 15 mm\n// No overhangs > 45°, 1 mm wall thickness everywhere\n\n// ---------- PARAMETERS ----------\nlid_clear = 0.3;          // clearance between lid and base\nwall = 1.0;               // wall thickness\ndia = 60;                 // outer diameter\nh = 15;                   // closed height\ngnomon_h = 6;             // gnomon height\ngnomon_t = 2;             // gnomon thickness\nhour_len = 20;            // hour-line length\ncompass_r = 12;           // compass rose radius\nhinge_r = 4;              // hinge pin radius\nhinge_w = 8;              // hinge width\nmagnet_d = 3;             // magnet cavity diameter\nmagnet_h = 2;             // magnet cavity depth\n\n// ---------- MODULES ----------\nmodule half_cylinder(r, h) {\n    difference() {\n        cylinder(r = r, h = h, $fn = 40);\n        translate([-r*2, 0, 0])\n            cube([r*4, r*4, h*2]);\n    }\n}\n\nmodule hinge_pin() {\n    rotate([90, 0, 0])\n        cylinder(r = hinge_r, h = hinge_w + 2*wall, $fn = 12);\n}\n\nmodule hinge_block() {\n    difference() {\n        union() {\n            translate([0, 0, wall])\n                cube([wall, hinge_w, dia/2 - wall]);\n            cylinder(r = hinge_r + wall, h = hinge_w, $fn = 12);\n        }\n        translate([0, 0, -1])\n            rotate([90, 0, 0])\n                cylinder(r = hinge_r, h = hinge_w + 2, $fn = 12);\n    }\n}\n\nmodule compass_rose() {\n    cylinder(r = compass_r, h = wall, $fn = 48);\n    for (a = [0:30:330]) {\n        rotate([0, 0, a])\n            translate([compass_r - 1, 0, 0])\n                cube([2, 0.6, wall + 0.01]);\n    }\n    // Cardinal letters (approximate N)\n    translate([0, compass_r - 2.5, wall + 0.01])\n        cube([1.5, 1.5, 0.6]);\n}\n\nmodule hour_lines() {\n    for (h = [6:1:18]) {\n        a = (h - 12) * 15;  // 15° per hour\n        rotate([0, 0, a])\n            translate([0, 0, 0.01])\n                cube([0.6, hour_len, wall + 0.02]);\n    }\n}\n\n// ---------- MAIN BODY ----------\n// Base dish (solid bottom, cavity top)\ndifference() {\n    cylinder(r = dia/2, h = h/2, $fn = 80);\n    translate([0, 0, wall])\n        cylinder(r = dia/2 - wall, h = h/2, $fn = 80);\n}\n\n// Lid dish (solid top, cavity bottom)\ntranslate([0, 0, h/2 + lid_clear])\ndifference() {\n    cylinder(r = dia/2, h = h/2, $fn = 80);\n    translate([0, 0, 0])\n        cylinder(r = dia/2 - wall, h = h/2 - wall, $fn = 80);\n}\n\n// Hinge left half on base\ntranslate([0, -dia/2 + hinge_r, h/2 - wall])\nrotate([0, 0, 90])\nhinge_block();\n\n// Hinge right half on lid\ntranslate([0, -dia/2 + hinge_r, h/2 + lid_clear])\nrotate([0, 0, 90])\nmirror([0, 1, 0])\nhinge_block();\n\n// Actual hinge pin\ntranslate([0, -dia/2 + hinge_r, h/2 - wall + hinge_r])\nhinge_pin();\n\n// Compass rose inset in base\ntranslate([0, 0, wall])\ncompass_rose();\n\n// Hour lines dial plate\ntranslate([0, 0, wall * 2])\nhour_lines();\n\n// Gnomon (triangular style)\nmodule gnomon() {\n    difference() {\n        polyhedron(\n            points = [[0, 0, 0], [0, gnomon_t, 0], [gnomon_h, 0, 0], [gnomon_h, gnomon_t, 0],\n                      [0, 0, gnomon_h], [0, gnomon_t, gnomon_h]],\n            faces = [[0, 2, 1], [3, 1, 2],\n                     [0, 1, 4], [1, 5, 4],\n                     [1, 3, 5], [3, 2, 5],\n                     [2, 0, 4], [2, 4, 5],\n                     [4, 5, 3], [4, 3, 2]]\n        );\n    }\n}\n\ntranslate([0, -gnomon_t/2, wall * 2 + 0.05])\nrotate([0, -45, 0])\ngnomon();\n\n// Small magnet cavities for snap closure\ntranslate([dia/2 - wall - magnet_d/2, 0, h/2 - magnet_h - 0.5])\ncylinder(r = magnet_d/2, h = magnet_h, $fn = 12);\ntranslate([dia/2 - wall - magnet_d/2, 0, h/2 + lid_clear + 0.5])\nrotate([180, 0, 0])\ncylinder(r = magnet_d/2, h = magnet_h, $fn = 12);\n\n// Decorative rope edge on lid rim\nfor (i = [0:15:359]) {\n    rotate([0, 0, i])\n        translate([dia/2, 0, h - 1])\n            sphere(r = 0.8, $fn = 8);\n}",
    "renders": true
  },
  {
    "vehicle": "retro",
    "openscad_code": "// Retro Cassette Tape (realistic, medium complexity)\n// Overall size: ~90 mm × 60 mm × 10 mm\n\n// Main dimensions\ntape_w = 90;\ntape_h = 60;\ntape_t = 10;\nwall_t = 1.6;           // 3D-print friendly wall thickness\nlip_h = 1.2;            // top recess lip\nscrew_d = 3;            // realistic screw holes\n\n// Window dimensions\nwindow_w = 40;\nwindow_h = 25;\nwindow_gap = 2;\n\n// Reels\nhub_r = 8;\nreel_r = 18;\nreel_t = 3;\n\n// Label area\nlabel_w = 50;\nlabel_h = 25;\n\n// Cassette body with top recess\nmodule cassette_body() {\n    difference() {\n        // Outer shell\n        cube([tape_w, tape_h, tape_t], center = true);\n        \n        // Hollow inside\n        translate([0, 0, -lip_h/2])\n            cube([tape_w - 2*wall_t, tape_h - 2*wall_t, tape_t - lip_h], center = true);\n        \n        // Top recess\n        translate([0, 0, tape_t/2 - 0.1])\n            cube([tape_w - 2*wall_t, tape_h - 2*wall_t, lip_h + 0.2], center = true);\n    }\n}\n\n// Window cutouts\nmodule windows() {\n    // Left window\n    translate([-(window_w + window_gap)/2, 0, 0])\n        cube([window_w, window_h, tape_t + 0.2], center = true);\n    \n    // Right window\n    translate([(window_w + window_gap)/2, 0, 0])\n        cube([window_w, window_h, tape_t + 0.2], center = true);\n}\n\n// Reel hubs with spokes\nmodule reel_hub(pos_x) {\n    translate([pos_x, 0, 0]) {\n        // Central hub cylinder\n        cylinder(h = reel_t + 0.2, r = hub_r, center = true);\n        \n        // Spokes\n        for (a = [0:60:359])\n            rotate([0, 0, a])\n                translate([hub_r/2, 0, 0])\n                    cube([hub_r, 1.2, reel_t + 0.2], center = true);\n        \n        // Outer ring\n        cylinder(h = reel_t, r = reel_r, center = true);\n    }\n}\n\n// Label recess\nmodule label_recess() {\n    translate([0, tape_h/2 - label_h/2 - 8, tape_t/2 - 0.2])\n        cube([label_w, label_h, 0.4], center = true);\n}\n\n// Screw holes\nmodule screw_holes() {\n    // Top-left\n    translate([-(tape_w/2 - 6), -(tape_h/2 - 6), 0])\n        rotate([90, 0, 0])\n            cylinder(h = tape_t, r = screw_d/2, center = true);\n    \n    // Top-right\n    translate([(tape_w/2 - 6), -(tape_h/2 - 6), 0])\n        rotate([90, 0, 0])\n            cylinder(h = tape_t, r = screw_d/2, center = true);\n    \n    // Bottom-left\n    translate([-(tape_w/2 - 6), (tape_h/2 - 6), 0])\n        rotate([90, 0, 0])\n            cylinder(h = tape_t, r = screw_d/2, center = true);\n    \n    // Bottom-right\n    translate([(tape_w/2 - 6), (tape_h/2 - 6), 0])\n        rotate([90, 0, 0])\n            cylinder(h = tape_t, r = screw_d/2, center = true);\n}\n\n// Pinch-roller hole\nmodule pinch_roller() {\n    translate([tape_w/2 - 12, 0, 0])\n        rotate([90, 0, 0])\n            cylinder(h = tape_t + 0.2, r = 3.5, center = true);\n}\n\n// Tape guide ridges\nmodule guides() {\n    // Top ridge\n    translate([0, tape_h/2 - 5, 0])\n        cube([tape_w - 20, 1.5, tape_t - 1], center = true);\n    \n    // Bottom ridge\n    translate([0, -(tape_h/2 - 5), 0])\n        cube([tape_w - 20, 1.5, tape_t - 1], center = true);\n}\n\n// Complete cassette\ndifference() {\n    union() {\n        cassette_body();\n        \n        // Reels inside windows\n        reel_hub(-(window_w + window_gap)/2);\n        reel_hub( (window_w + window_gap)/2);\n        \n        // Guides\n        guides();\n    }\n    \n    // Cutouts\n    windows();\n    label_recess();\n    screw_holes();\n    pinch_roller();\n}",
    "renders": true
  },
  {
    "vehicle": "modern",
    "openscad_code": "// Modern Wireless Earbuds Charging Case\n// Realistic style, medium complexity\n// Dimensions: 55mm x 45mm x 25mm\n\n// Main parameters\ncase_length = 55;\ncase_width = 45;\ncase_height = 25;\nwall_thickness = 2;\ncorner_radius = 5;\nlid_gap = 0.3;\n\n// Earbud parameters\nearbud_diameter = 16;\nearbud_height = 22;\nearbud_angle = 30;\n\n// Charging pins\npin_diameter = 2;\npin_height = 1;\n\n// LED indicators\nled_diameter = 3;\nled_depth = 1;\n\nmodule rounded_cube(size, radius, center = false) {\n    hull() {\n        translate([radius, radius, radius])\n            cube([size.x - 2*radius, size.y - 2*radius, size.z - 2*radius], center);\n        translate([radius, radius, size.z - radius])\n            sphere(r = radius);\n        translate([radius, size.y - radius, radius])\n            sphere(r = radius);\n        translate([size.x - radius, radius, radius])\n            sphere(r = radius);\n        translate([size.x - radius, size.y - radius, radius])\n            sphere(r = radius);\n        translate([radius, size.y - radius, size.z - radius])\n            sphere(r = radius);\n        translate([size.x - radius, radius, size.z - radius])\n            sphere(r = radius);\n        translate([size.x - radius, size.y - radius, size.z - radius])\n            sphere(r = radius);\n    }\n}\n\n// Main case body\ndifference() {\n    // Outer shell\n    rounded_cube([case_length, case_width, case_height], corner_radius);\n    \n    // Inner cavity\n    translate([wall_thickness, wall_thickness, wall_thickness - 0.1])\n        rounded_cube([case_length - 2*wall_thickness, case_width - 2*wall_thickness, case_height - wall_thickness + 0.1], corner_radius - wall_thickness);\n    \n    // Lid separation\n    translate([-1, 0, case_height/2 - lid_gap])\n        cube([case_length + 2, case_width + 2, 2*lid_gap]);\n}\n\n// Hinge pin\ntranslate([case_length/2, -1, case_height/2 - lid_gap])\n    rotate([90, 0, 0])\n        cylinder(h = case_width + 2, r = 1.5, $fn = 20);\n\n// Earbud cavities (left and right)\nfor (x = [-1, 1]) {\n    translate([case_length/2 + x * 15, case_width/2, wall_thickness + 2]) {\n        rotate([earbud_angle, 0, 0]) {\n            difference() {\n                cylinder(h = earbud_height, r = earbud_diameter/2 + 1, $fn = 32);\n                translate([0, 0, -1])\n                    cylinder(h = earbud_height + 2, r = earbud_diameter/2, $fn = 32);\n            }\n        }\n        \n        // Charging pins\n        translate([0, 0, 1])\n            cylinder(h = pin_height, r = pin_diameter/2, $fn = 16);\n    }\n}\n\n// LED indicators\ntranslate([case_length - 8, 4, wall_thickness/2])\n    cylinder(h = led_depth, r = led_diameter/2, $fn = 16);\ntranslate([case_length - 12, 4, wall_thickness/2])\n    cylinder(h = led_depth, r = led_diameter/2, $fn = 16);\ntranslate([case_length - 16, 4, wall_thickness/2])\n    cylinder(h = led_depth, r = led_diameter/2, $fn = 16);\n\n// Button\ntranslate([4, case_width/2, wall_thickness/2])\n    cylinder(h = wall_thickness + 1, r = 3, $fn = 20);\n\n// Lid (separate part)\ntranslate([0, 0, case_height + 5]) {\n    difference() {\n        rounded_cube([case_length, case_width, case_height/2], corner_radius);\n        \n        translate([wall_thickness, wall_thickness, -0.1])\n            rounded_cube([case_length - 2*wall_thickness, case_width - 2*wall_thickness, case_height/2 - wall_thickness + 0.1], corner_radius - wall_thickness);\n        \n        // Lid separation\n        translate([-1, 0, case_height/4 - lid_gap])\n            cube([case_length + 2, case_width + 2, 2*lid_gap]);\n        \n        // Hinge cavity\n        translate([case_length/2, -1, case_height/4 - lid_gap])\n            rotate([90, 0, 0])\n                cylinder(h = case_width + 2, r = 2, $fn = 20);\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "future",
    "openscad_code": "// Futuristic Pneumatic Multi-Tool\n// A compact, printable multi-purpose tool for future astronauts\n\n$fn = 36; // smooth circles\n\n// Overall dimensions\nbody_d = 28;\nbody_h = 90;\nhandle_d = 24;\nhandle_h = 45;\n\nmodule grip_rings() {\n    for (z = [5:8:40]) {\n        translate([0, 0, z])\n            difference() {\n                cylinder(d = handle_d + 2, h = 2, center = true);\n                cylinder(d = handle_d - 1, h = 3, center = true);\n            }\n    }\n}\n\nmodule handle() {\n    difference() {\n        union() {\n            cylinder(d = handle_d, h = handle_h, $fn = 6);\n            grip_rings();\n        }\n        // hex socket for tool shaft\n        translate([0, 0, -1])\n            cylinder(d = 10, h = handle_h + 2, $fn = 6);\n    }\n}\n\nmodule body() {\n    difference() {\n        union() {\n            // main cylindrical body\n            cylinder(d = body_d, h = body_h);\n            // top cap with pressure indicator\n            translate([0, 0, body_h])\n                cylinder(d1 = body_d + 2, d2 = body_d - 4, h = 6);\n        }\n        // central air channel\n        translate([0, 0, -1])\n            cylinder(d = 10, h = body_h + 8);\n        // side exhaust vents\n        for (angle = [45:90:315]) {\n            rotate([0, 0, angle])\n                translate([body_d/2 - 2, 0, body_h/2])\n                    rotate([0, 90, 0])\n                        cylinder(d = 4, h = 8);\n        }\n    }\n}\n\nmodule bit_holder() {\n    difference() {\n        // hexagonal collar\n        cylinder(d1 = 12, d2 = 8, h = 8, $fn = 6);\n        // bit socket\n        translate([0, 0, -1])\n            cylinder(d = 4, h = 10);\n    }\n}\n\nmodule nozzle() {\n    union() {\n        // nozzle cone\n        cylinder(d1 = 10, d2 = 5, h = 15);\n        // fine tip\n        cylinder(d = 3, h = 5);\n    }\n}\n\nmodule led_ring() {\n    difference() {\n        cylinder(d = body_d + 2, h = 3, center = true);\n        cylinder(d = body_d - 2, h = 4, center = true);\n    }\n}\n\n// Assembly\ntranslate([0, 0, 0])\n    handle();\ntranslate([0, 0, handle_h])\n    body();\ntranslate([0, 0, handle_h + body_h])\n    bit_holder();\ntranslate([0, 0, handle_h + body_h + 8])\n    rotate([180, 0, 0])\n        nozzle();\ntranslate([0, 0, handle_h - 4])\n    led_ring();",
    "renders": true
  },
  {
    "vehicle": "urban",
    "openscad_code": "$fa = 1; $fs = 0.5;\n\nmodule apartment_block(w=20,d=15,h=40){\n    // main block\n    difference(){\n        cube([w,d,h], center=true);\n        translate([0,0,0]) cube([w-2,d-2,h], center=true);  // hollow walls 1 mm\n    }\n\n    // windows\n    for(i=[-1,1])\n        for(j=[-1,0,1]){\n            translate([i*(w/2-1.5), j*4, 5])\n                cube([1,2,3]);\n            translate([i*(w/2-1.5), j*4, 15])\n                cube([1,2,3]);\n            translate([i*(w/2-1.5), j*4, 25])\n                cube([1,2,3]);\n        }\n}\n\nmodule water_tower(r=6,h=15){\n    // tower legs\n    for(a=[0,120,240]){\n        rotate([0,0,a])\n            translate([r-1,0,-h/2])\n                cylinder(h=h+2, r=1, center=true);\n    }\n\n    // tank\n    translate([0,0,h/2-2])\n        cylinder(h=4, r=r+1, center=true);\n\n    // conical roof\n    translate([0,0,h/2+2])\n        cylinder(h1=3, h2=0, r1=r+1.5, r2=0, center=false);\n}\n\nmodule street_light(){\n    // pole\n    cylinder(h=20, r=0.5, center=false);\n\n    // arm\n    translate([0,0,18])\n        rotate([0,90,0])\n            cylinder(h=5, r=0.5, center=false);\n\n    // lamp head\n    translate([5,0,18])\n        sphere(r=1);\n}\n\nmodule small_car(l=12,w=6,h=4){\n    // body\n    translate([0,0,h/2])\n        cube([l,w,h-1], center=true);\n\n    // cabin\n    translate([l/4,0,h-1])\n        cube([l/2,w-1,h/2+1], center=true);\n\n    // wheels\n    for(x=[-l/3,l/3])\n        for(y=[-w/2-1,w/2+1])\n            translate([x,y,0])\n                cylinder(h=1.5, r=1, center=true);\n}\n\nunion(){\n    // ground plate\n    translate([0,0,-1])\n        cube([60,60,2]);\n\n    // four apartment blocks\n    apartment_block(18,12,35);\n    translate([25,0,0]) apartment_block(20,14,40);\n    translate([0,25,0]) apartment_block(16,12,30);\n    translate([25,25,0]) apartment_block(22,16,45);\n\n    // water tower on a block\n    translate([-20,-20,18]) water_tower(5,12);\n\n    // street lights along the edges\n    for(i=[-25,-5,15,25])\n        translate([i,-28,1]) street_light();\n    for(i=[-25,-5,15,25])\n        translate([28,i,1]) rotate([0,0,90]) street_light();\n\n    // parked cars\n    translate([10,-15,1]) rotate([0,0,90]) small_car();\n    translate([-10,15,1]) small_car();\n    translate([15,15,1]) rotate([0,0,-30]) small_car();\n}",
    "renders": true
  },
  {
    "vehicle": "city",
    "openscad_code": "// City model - realistic style, medium complexity\n// Designed for 3D printing, no overhangs, proper wall thickness\n\n// Base plate for the city\nmodule base_plate() {\n    difference() {\n        cube([80, 80, 4], center=true);\n        translate([0, 0, -2])\n            cube([76, 76, 4], center=true);\n    }\n}\n\n// Simple rectangular building with windows\nmodule building(x, y, w, d, h) {\n    translate([x, y, 2]) {\n        // Main building body\n        difference() {\n            cube([w, d, h]);\n            // Windows on front\n            for(i = [1:2:w-5]) {\n                for(j = [1:2:h-4]) {\n                    translate([i, d-1, j])\n                        cube([1.5, 1, 1.5]);\n                }\n            }\n            // Windows on sides\n            for(i = [1:2:d-5]) {\n                for(j = [1:2:h-4]) {\n                    translate([w-1, i, j])\n                        cube([1, 1.5, 1.5]);\n                }\n            }\n        }\n    }\n}\n\n// Cylindrical water tower\nmodule water_tower(x, y) {\n    translate([x, y, 2]) {\n        // Tower base\n        cylinder(h=8, r1=6, r2=6, $fn=20);\n        // Support legs\n        for(angle = [0:90:270]) {\n            rotate([0, 0, angle])\n                translate([5, 0, 0])\n                    cylinder(h=8, r1=0.5, r2=0.5, $fn=8);\n        }\n        // Water tank\n        translate([0, 0, 8])\n            cylinder(h=10, r1=8, r2=8, $fn=30);\n        // Tank top\n        translate([0, 0, 18])\n            sphere(r=8, $fn=30);\n    }\n}\n\n// Simple house with pitched roof\nmodule house(x, y, w, d) {\n    translate([x, y, 2]) {\n        // House body\n        cube([w, d, 8]);\n        // Roof\n        translate([-1, -1, 8])\n            rotate([0, 90, 0])\n                cylinder(h=w+2, r1=d/2, r2=d/2, $fn=3);\n    }\n}\n\n// Street layout\nmodule streets() {\n    color(\"gray\")\n    translate([0, 0, 1.9]) {\n        // Main avenue\n        cube([80, 8, 0.2]);\n        // Cross street\n        cube([8, 80, 0.2]);\n        // Diagonal street\n        rotate([0, 0, 45])\n            cube([60, 6, 0.2]);\n    }\n}\n\n// Park with trees\nmodule park(x, y) {\n    // Grass base\n    color(\"green\")\n    translate([x, y, 2])\n        cube([20, 20, 0.5]);\n    \n    // Trees\n    for(tx = [x+5:5:x+15]) {\n        for(ty = [y+5:5:y+15]) {\n            translate([tx, ty, 2.5]) {\n                // Tree trunk\n                cylinder(h=6, r1=0.5, r2=0.5, $fn=8);\n                // Tree top\n                translate([0, 0, 6])\n                    sphere(r=2.5, $fn=15);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    base_plate();\n    \n    // Streets\n    streets();\n    \n    // Buildings\n    building(-30, -30, 12, 12, 25);\n    building(-30, 10, 10, 8, 18);\n    building(10, -30, 15, 10, 30);\n    building(10, 10, 8, 12, 22);\n    building(20, 0, 6, 6, 15);\n    \n    // Houses\n    house(-20, 20, 8, 8);\n    house(-10, 20, 8, 8);\n    house(0, 20, 8, 8);\n    \n    // Water tower\n    water_tower(25, 25);\n    \n    // Park\n    park(-20, -20);\n}",
    "renders": true
  },
  {
    "vehicle": "metro",
    "openscad_code": "// Realistic medium-complexity metro train\n// Length ≈ 90 mm, width ≈ 18 mm, height ≈ 25 mm\n// Printable without supports – all angles ≤ 45°\n\n$fa = 2; $fs = 0.5;\n\nmodule body() {\n    // Main car shell\n    difference() {\n        hull() {\n            translate([-40, -8, 0]) cube([80, 16, 20]);\n            translate([-38, -7, 20]) cube([76, 14, 3]);\n        }\n        // Windows left\n        for(y = [-25, -15, -5, 5, 15, 25])\n            translate([y, -8.5, 10]) cube([8, 2, 6]);\n        // Windows right\n        for(y = [-25, -15, -5, 5, 15, 25])\n            translate([y, 8.5 - 2, 10]) cube([8, 2, 6]);\n        // Doors left\n        translate([-5, -8.5, 0]) cube([10, 2, 18]);\n        translate([ 5, -8.5, 0]) cube([10, 2, 18]);\n        // Doors right\n        translate([-5, 8.5 - 2, 0]) cube([10, 2, 18]);\n        translate([ 5, 8.5 - 2, 0]) cube([10, 2, 18]);\n    }\n}\n\nmodule roof() {\n    translate([0, 0, 23]) {\n        difference() {\n            // Pantograph base\n            translate([0, 0, 0]) cube([70, 14, 2], center = true);\n            // Ventilation grills\n            for(x = [-30, -20, -10, 0, 10, 20, 30])\n                translate([x, 0, 1]) cube([6, 12, 1], center = true);\n        }\n    }\n}\n\nmodule undercarriage() {\n    // Bogies\n    module bogie(offset) {\n        translate([offset, 0, -4]) {\n            difference() {\n                cube([14, 16, 4]);\n                // Wheel cutouts\n                for(y = [-6, 6])\n                    translate([0, y, -1]) rotate([0, 90, 0])\n                        cylinder(h = 20, d = 8, $fn = 16);\n            }\n        }\n    }\n    bogie(-25);\n    bogie(25);\n    // Couplers\n    translate([-40.5, 0, 2]) cube([1.5, 5, 3]);\n    translate([40.5 - 1.5, 0, 2]) cube([1.5, 5, 3]);\n}\n\nmodule nose() {\n    // Streamlined ends\n    difference() {\n        hull() {\n            translate([-40, -8, 0]) cube([0, 16, 20]);\n            translate([-45, -7, 5]) cube([0, 14, 15]);\n            translate([-47, -5, 10]) cube([0, 10, 5]);\n        }\n        // Headlight\n        translate([-46, 0, 13]) sphere(d = 3);\n    }\n    mirror([1, 0, 0]) {\n        difference() {\n            hull() {\n                translate([-40, -8, 0]) cube([0, 16, 20]);\n                translate([-45, -7, 5]) cube([0, 14, 15]);\n                translate([-47, -5, 10]) cube([0, 10, 5]);\n            }\n            translate([-46, 0, 13]) sphere(d = 3);\n        }\n    }\n}\n\nmodule wheels() {\n    // Simplified wheels touching build plate\n    module wheelset(offset) {\n        for(y = [-7, 7])\n            translate([offset, y, 0])\n                rotate([0, 0, 90])\n                    cylinder(h = 4, d = 8, $fn = 16);\n    }\n    wheelset(-25);\n    wheelset(25);\n}\n\n// Assembly\nunion() {\n    body();\n    roof();\n    undercarriage();\n    nose();\n    wheels();\n}",
    "renders": true
  },
  {
    "vehicle": "commuter",
    "openscad_code": "// Realistic Commuter Figure – OpenSCAD\n// Overall height ≈ 80 mm, printable without overhangs\n\n// Parameters\nbodyH = 35;           // torso height\nbodyW = 20;           // torso width\nbodyT = 12;           // torso thickness\nheadD = 14;           // head diameter\nneckH = 4;            // neck height\narmL = 25;            // upper arm length\nforearmL = 20;        // forearm length\nlegL = 35;            // upper leg length\nshinL = 30;           // lower leg length\nshoeL = 28;           // foot length\nshoeW = 10;           // foot width\nshoeH = 8;            // foot height\nbackpackW = 14;       // backpack width\nbackpackD = 6;        // backpack depth\nbackpackH = 28;       // backpack height\ncoffeeH = 20;         // coffee cup height\ncoffeeR = 5;          // coffee cup radius\nlidH = 2;             // lid height\nhandleR = 3;          // handle radius\nhandleTh = 2;         // handle thickness\nearbudR = 3;          // earbud radius\n\n// Colors (for preview only)\n$fn = 32;\n\n// Utility module for rounded box\nmodule roundedBox(size, r, center = false) {\n    translate(center ? [-size.x/2, -size.y/2, -size.z/2] : [0,0,0])\n    hull() {\n        translate([r,r,r]) sphere(r);\n        translate([size.x-r,r,r]) sphere(r);\n        translate([r,size.y-r,r]) sphere(r);\n        translate([size.x-r,size.y-r,r]) sphere(r);\n        translate([r,r,size.z-r]) sphere(r);\n        translate([size.x-r,r,size.z-r]) sphere(r);\n        translate([r,size.y-r,size.z-r]) sphere(r);\n        translate([size.x-r,size.y-r,size.z-r]) sphere(r);\n    }\n}\n\n// Head with neck\nmodule head() {\n    translate([0,0,bodyH + neckH + headD/2])\n    union() {\n        // neck\n        color(\"tan\")\n        cylinder(h = neckH, r = headD/2.5, center = false);\n        // head\n        color(\"tan\")\n        sphere(d = headD);\n        // hair\n        color(\"black\")\n        translate([0,0,headD/2-0.5])\n        scale([1,1,0.7])\n        sphere(d = headD+2);\n        // ears\n        color(\"tan\")\n        translate([headD/2,0,0])\n        sphere(d = headD/3);\n        translate([-headD/2,0,0])\n        sphere(d = headD/3);\n        // earbuds\n        color(\"white\")\n        translate([headD/2,headD/3,0])\n        sphere(r = earbudR);\n        translate([-headD/2,headD/3,0])\n        sphere(r = earbudR);\n    }\n}\n\n// Torso with shirt and jacket\nmodule torso() {\n    translate([0,0,bodyH/2])\n    union() {\n        // shirt\n        color(\"lightblue\")\n        roundedBox([bodyW, bodyT, bodyH], 3);\n        // jacket\n        color(\"navy\")\n        translate([0,0,bodyH/2-5])\n        roundedBox([bodyW+4, bodyT+3, 10], 3, center=true);\n    }\n}\n\n// Arm module (right or left)\nmodule arm(side = 1) { // 1 for right, -1 for left\n    translate([side * (bodyW/2 + armL/2), 0, bodyH - 5])\n    rotate([0,0,side * -20])\n    union() {\n        // upper arm\n        color(\"navy\")\n        rotate([90,0,0])\n        cylinder(h = armL, r = 4, center = true);\n        // forearm\n        translate([0,0,-armL/2-forearmL/2])\n        rotate([90,0,0])\n        cylinder(h = forearmL, r = 3.5, center = true);\n        // hand\n        translate([0,0,-armL/2-forearmL-3])\n        color(\"tan\")\n        sphere(d = 7);\n    }\n}\n\n// Leg module (right or left)\nmodule leg(side = 1) { // 1 for right, -1 for left\n    translate([side * bodyW/4, 0, -legL/2])\n    union() {\n        // upper leg\n        color(\"navy\")\n        cylinder(h = legL, r = 4.5, center = true);\n        // shin\n        translate([0,0,-legL/2-shinL/2])\n        cylinder(h = shinL, r = 4, center = true);\n        // shoe\n        translate([0,0,-legL/2-shinL-shoeH/2])\n        color(\"black\")\n        roundedBox([shoeL, shoeW, shoeH], 2, center = true);\n    }\n}\n\n// Backpack\nmodule backpack() {\n    color(\"darkgray\")\n    translate([0, bodyT/2 + backpackD/2, bodyH/2])\n    roundedBox([backpackW, backpackD, backpackH], 2, center = true);\n}\n\n// Coffee cup in right hand\nmodule coffee() {\n    translate([bodyW/2 + armL + forearmL + 3, 0, bodyH - 5 + 5])\n    rotate([0,90,0])\n    union() {\n        // cup\n        color(\"white\")\n        cylinder(h = coffeeH, r = coffeeR, center = false);\n        // lid\n        color(\"white\")\n        translate([0,0,coffeeH])\n        cylinder(h = lidH, r = coffeeR + 0.5, center = false);\n        // handle\n        color(\"white\")\n        translate([coffeeR + handleTh/2, coffeeH/2, 0])\n        rotate([90,0,0])\n        difference() {\n            cylinder(h = handleR*2, r = handleTh, center = true);\n            translate([0,0,handleR])\n            cube([handleR*2,handleTh*2,handleR*2], center = true);\n        }\n    }\n}\n\n// Main assembly\nhead();\ntorso();\narm(1);   // right\narm(-1);  // left\nleg(1);   // right\nleg(-1);  // left\nbackpack();\ncoffee();",
    "renders": true
  },
  {
    "vehicle": "family",
    "openscad_code": "// Family scene: Parent, child, and dog\n// Overall size ~80 mm wide\n\n// Wall thickness for 3D printing\n$fn = 24;\n\n// Base platform to keep figures standing and avoid overhangs\nmodule base() {\n    difference() {\n        translate([0, 0, -1])\n            cube([80, 40, 2], center = true);\n        // Lighten base with shallow recesses\n        for (x = [-30, -10, 10, 30])\n            translate([x, 0, 0])\n                cube([15, 35, 2.2], center = true);\n    }\n}\n\n// Simple humanoid figure\nmodule person(height, body_width, head_diam) {\n    // Body\n    cube([body_width, body_width * 0.7, height * 0.55], center = true);\n\n    // Head\n    translate([0, 0, height * 0.55 / 2 + head_diam / 2])\n        sphere(d = head_diam);\n\n    // Arms\n    for (side = [-1, 1])\n        translate([side * body_width / 2, 0, height * 0.2])\n            rotate([0, 90, 0])\n                cylinder(h = body_width * 0.5, d = body_width * 0.3, center = true);\n\n    // Legs\n    for (side = [-1, 1])\n        translate([side * body_width * 0.25, 0, -height * 0.55 / 2 - height * 0.45 / 2])\n            cube([body_width * 0.4, body_width * 0.5, height * 0.45], center = true);\n}\n\n// Dog figure\nmodule dog() {\n    // Body\n    cube([18, 10, 8], center = true);\n\n    // Head\n    translate([12, 0, 2])\n        sphere(d = 8);\n\n    // Snout\n    translate([17, 0, 0])\n        cube([6, 4, 4], center = true);\n\n    // Legs\n    for (x = [-6, 6])\n        for (y = [-4, 4])\n            translate([x, y, -6])\n                cube([3, 3, 6]);\n\n    // Tail\n    translate([-10, 0, 2])\n        rotate([0, 45, 0])\n            cylinder(h = 8, d = 3);\n}\n\n// Assemble the family\nbase();\n\n// Parent (left)\ntranslate([-25, 0, 1])\n    person(30, 10, 8);\n\n// Child (right)\ntranslate([10, 0, 1])\n    scale([0.7, 0.7, 0.7])\n        person(30, 10, 8);\n\n// Dog (front)\ntranslate([0, -15, 1])\n    dog();",
    "renders": true
  },
  {
    "vehicle": "utility",
    "openscad_code": "// Metric tape measure (realistic style, medium complexity)\n// Total length 60 mm, width 25 mm, thickness 12 mm\n// 3 mm wall thickness, no overhangs >45°, print-in-place\n\n$fn = 36;\n\nmodule tape_measure() {\n    // Main housing\n    difference() {\n        // Outer shell\n        hull() {\n            translate([0, 10, 0])\n                cube([55, 20, 12], center=true);\n            translate([0, -10, 0])\n                cube([55, 10, 12], center=true);\n        }\n        \n        // Hollow interior\n        hull() {\n            translate([0, 10, 0])\n                cube([49, 14, 10], center=true);\n            translate([0, -10, 0])\n                cube([49, 4, 10], center=true);\n        }\n    }\n    \n    // Tape slot opening\n    translate([27.5, 0, 0])\n        cube([6, 3, 6], center=true);\n    \n    // Belt clip\n    translate([-27.5, 0, -6])\n        rotate([0, 0, 0])\n            difference() {\n                // Clip body\n                translate([0, 0, 2])\n                    cube([8, 20, 4], center=true);\n                // Spring gap\n                translate([0, 0, 0])\n                    cube([6, 18, 2], center=true);\n                // Rounded end\n                translate([0, 11, 2])\n                    rotate([90, 0, 0])\n                        cylinder(h=8, r=2, center=true);\n            }\n    \n    // Thumb lock slider\n    translate([15, 0, 6])\n        difference() {\n            // Slider base\n            cube([10, 8, 3], center=true);\n            // Grip ridges\n            for(i = [-3:3]) {\n                translate([i*1.2, 0, 1.5])\n                    cube([0.5, 7.5, 0.5], center=true);\n            }\n        }\n    \n    // Front bumper\n    translate([30, 0, 0])\n        difference() {\n            // Bumper body\n            cube([5, 25, 12], center=true);\n            // Tape exit\n            translate([0, 0, 0])\n                cube([3, 3, 6], center=true);\n        }\n    \n    // Measure tape segments\n    color(\"silver\")\n    for(i = [0:9]) {\n        translate([27 - i*5, 0, 0])\n            difference() {\n                // Segment body\n                cube([4.8, 2.8, 0.2], center=true);\n                // Markings\n                if(i % 2 == 0) {\n                    translate([0, 1.2, 0.11])\n                        cube([4.8, 0.2, 0.05], center=true);\n                }\n                if(i % 5 == 0) {\n                    translate([0, 0.8, 0.11])\n                        cube([4.8, 0.6, 0.05], center=true);\n                }\n            }\n    }\n    \n    // Screw posts (for assembly)\n    translate([-20, 8, 0])\n        cylinder(h=12, r=2, center=true);\n    translate([-20, -8, 0])\n        cylinder(h=12, r=2, center=true);\n    translate([20, 8, 0])\n        cylinder(h=12, r=2, center=true);\n    translate([20, -8, 0])\n        cylinder(h=12, r=2, center=true);\n}\n\ntape_measure();",
    "renders": true
  },
  {
    "vehicle": "work",
    "openscad_code": "// Realistic workbench with functional features\n// Overall dimensions: 80mm x 45mm x 50mm\n\n// Base thickness and wall settings\nbase_thickness = 3;\nwall_thickness = 2.5;\n\n// Overall dimensions\nlength = 80;\nwidth = 45;\nheight = 50;\n\n// Leg dimensions\nleg_width = 3;\nleg_height = height - base_thickness;\n\n// Work surface dimensions\nsurface_thickness = 2;\nsurface_length = length - 2;\nsurface_width = width - 2;\n\n// Back panel height\nback_height = 30;\n\n// Shelf dimensions\nshelf_height = 20;\nshelf_thickness = 1.5;\n\n// Pegboard hole pattern\npeg_spacing = 5;\npeg_diameter = 2;\npeg_rows = floor(back_height / peg_spacing) - 1;\npeg_cols = floor(length / peg_spacing) - 1;\n\nmodule workbench() {\n    // Main work surface\n    translate([0, 0, leg_height])\n        cube([surface_length, surface_width, surface_thickness], center=true);\n    \n    // Four legs\n    for(x = [-1, 1])\n    for(y = [-1, 1])\n        translate([x * (length/2 - leg_width/2), y * (width/2 - leg_width/2), leg_height/2])\n            cube([leg_width, leg_width, leg_height], center=true);\n    \n    // Bottom shelf\n    translate([0, 0, shelf_height/2])\n        cube([length - 4, width - 4, shelf_thickness], center=true);\n    \n    // Back panel with pegboard\n    translate([0, width/2 - wall_thickness/2, back_height/2 + leg_height])\n        cube([length, wall_thickness, back_height], center=true);\n    \n    // Pegboard holes\n    for(i = [0:peg_rows-1])\n    for(j = [0:peg_cols-1])\n        translate([\n            (j - peg_cols/2 + 0.5) * peg_spacing,\n            width/2 - wall_thickness/2,\n            leg_height + (i + 1) * peg_spacing\n        ])\n            rotate([90, 0, 0])\n                cylinder(h=wall_thickness + 0.1, d=peg_diameter, center=true, $fn=12);\n    \n    // Side supports for back panel\n    translate([length/2 - wall_thickness/2, 0, back_height/2 + leg_height])\n        cube([wall_thickness, width, back_height], center=true);\n    translate([-length/2 + wall_thickness/2, 0, back_height/2 + leg_height])\n        cube([wall_thickness, width, back_height], center=true);\n    \n    // Tool rail on back panel\n    translate([0, width/2 - wall_thickness - 1, leg_height + back_height - 5])\n        cube([length - 10, 2, 2], center=true);\n    \n    // Front support beam\n    translate([0, -width/2 + 2, leg_height - 5])\n        cube([length - 6, 3, 3], center=true);\n}\n\n// Render the workbench\nworkbench();",
    "renders": true
  },
  {
    "vehicle": "commercial",
    "openscad_code": "// Commercial Delivery Van\n// 3D printable model ~70mm long\n// Medium complexity realistic style\n\n// Parameters\nvan_length = 70;\nvan_width = 30;\nvan_height = 35;\nwall_thickness = 1.5;\n\n// Main body module\nmodule van_body() {\n    // Lower chassis\n    difference() {\n        cube([van_length, van_width, van_height * 0.4], center = true);\n        translate([0, 0, van_height * 0.2 - wall_thickness])\n            cube([van_length - wall_thickness*2, van_width - wall_thickness*2, van_height * 0.4], center = true);\n    }\n    \n    // Upper cargo area\n    translate([van_length * 0.1, 0, van_height * 0.3])\n    difference() {\n        cube([van_length * 0.7, van_width * 0.9, van_height * 0.6], center = true);\n        translate([0, 0, wall_thickness])\n            cube([van_length * 0.7 - wall_thickness*2, van_width * 0.9 - wall_thickness*2, van_height * 0.6], center = true);\n    }\n    \n    // Driver cab\n    translate([-van_length * 0.25, 0, van_height * 0.3])\n    difference() {\n        cube([van_length * 0.3, van_width * 0.85, van_height * 0.5], center = true);\n        translate([0, 0, wall_thickness])\n            cube([van_length * 0.3 - wall_thickness*2, van_width * 0.85 - wall_thickness*2, van_height * 0.5], center = true);\n    }\n}\n\n// Wheels module\nmodule wheels() {\n    for(side = [-1, 1]) {\n        // Front wheels\n        translate([van_length * 0.3, side * van_width * 0.45, -van_height * 0.3])\n            rotate([0, 0, 90])\n            cylinder(h=4, r=8, $fn=20);\n        \n        // Rear wheels\n        translate([-van_length * 0.2, side * van_width * 0.45, -van_height * 0.3])\n            rotate([0, 0, 90])\n            cylinder(h=4, r=8, $fn=20);\n    }\n}\n\n// Windshield\nmodule windshield() {\n    translate([-van_length * 0.35, 0, van_height * 0.45])\n    rotate([0, -20, 0])\n    difference() {\n        cube([0.5, van_width * 0.65, van_height * 0.3], center = true);\n        translate([1, 0, 0])\n            cube([2, van_width * 0.6, van_height * 0.25], center = true);\n    }\n}\n\n// Side windows\nmodule side_windows() {\n    for(side = [-1, 1]) {\n        translate([van_length * 0.05, side * (van_width * 0.45), van_height * 0.45])\n            rotate([0, 90, 0])\n            difference() {\n                cube([0.5, van_length * 0.25, van_height * 0.2], center = true);\n                translate([1, 0, 0])\n                    cube([2, van_length * 0.23, van_height * 0.18], center = true);\n            }\n    }\n}\n\n// Headlights\nmodule headlights() {\n    for(side = [-1, 1]) {\n        translate([van_length * 0.45, side * van_width * 0.25, -van_height * 0.05])\n            sphere(r=3, $fn=20);\n    }\n}\n\n// Rear lights\nmodule rear_lights() {\n    for(side = [-1, 1]) {\n        translate([-van_length * 0.45, side * van_width * 0.2, -van_height * 0.05])\n            cube([2, 4, 3], center = true);\n    }\n}\n\n// Door handles\nmodule door_handles() {\n    translate([-van_length * 0.15, van_width * 0.45 + 1, van_height * 0.15])\n        rotate([90, 0, 0])\n        cylinder(h=8, r=1, $fn=8);\n}\n\n// Company logo area\nmodule logo_area() {\n    translate([0, van_width * 0.45 + 0.5, van_height * 0.3])\n    difference() {\n        cube([van_length * 0.3, 1, van_height * 0.2], center = true);\n        translate([0, 0, 1])\n            cube([van_length * 0.25, 1.5, van_height * 0.15], center = true);\n    }\n}\n\n// Roof details\nmodule roof_details() {\n    // Roof ridge\n    translate([0, 0, van_height * 0.6 + 1])\n        cube([van_length * 0.6, van_width * 0.8, 2], center = true);\n    \n    // Vent\n    translate([van_length * 0.2, 0, van_height * 0.6 + 3])\n        cylinder(h=3, r=2, $fn=12);\n}\n\n// Assembly\nunion() {\n    van_body();\n    translate([0, 0, 0]) wheels();\n    windshield();\n    side_windows();\n    headlights();\n    rear_lights();\n    door_handles();\n    logo_area();\n    roof_details();\n}",
    "renders": true
  },
  {
    "vehicle": "fleet",
    "openscad_code": "$fn = 32; // Smooth curves\n\n// Fleet scale factor\nfleet_scale = 0.6;\n\n// Main carrier body\nmodule carrier_body() {\n    difference() {\n        // Hull base\n        hull_base();\n        \n        // Flight deck cutout\n        translate([0, 0, 15]) \n            cube([120, 35, 25], center = true);\n        \n        // Bridge cutout\n        translate([0, -18, 5])\n            cube([15, 10, 15], center = true);\n    }\n}\n\nmodule hull_base() {\n    union() {\n        // Main hull\n        translate([0, 0, 5])\n            cube([130, 40, 10], center = true);\n        \n        // Bow\n        translate([65, 0, 5])\n            rotate([0, 90, 0])\n                cylinder(h = 20, r1 = 5, r2 = 0);\n        \n        // Stern\n        translate([-65, 0, 5])\n            rotate([0, 90, 0])\n                cylinder(h = 20, r1 = 5, r2 = 0);\n    }\n}\n\n// Island superstructure\nmodule carrier_island() {\n    translate([0, -20, 15]) {\n        // Bridge tower\n        cube([20, 15, 20], center = true);\n        \n        // Radar mast\n        translate([5, 0, 12])\n            cylinder(h = 15, r = 2);\n        \n        // Radar dish\n        translate([5, 0, 27])\n            sphere(d = 6);\n    }\n}\n\n// Flight deck details\nmodule flight_deck() {\n    translate([0, 0, 16]) {\n        // Deck surface\n        cube([125, 45, 1], center = true);\n        \n        // Catapults (simplified)\n        for(x = [-40, 20]) {\n            translate([x, 0, 0.5])\n                cube([30, 2, 0.5], center = true);\n        }\n        \n        // Arrestor wires\n        for(x = [-50, -30]) {\n            translate([x, 0, 0.5])\n                cube([2, 30, 0.5], center = true);\n        }\n    }\n}\n\n// Destroyer escort\nmodule destroyer() {\n    scale([0.5, 0.4, 0.5]) {\n        union() {\n            // Hull\n            hull_base();\n            \n            // Superstructure\n            translate([0, 0, 8])\n                cube([60, 15, 12], center = true);\n            \n            // Gun turret\n            translate([30, 0, 15])\n                cylinder(h = 5, r = 4);\n            \n            // Smokestack\n            translate([-10, 0, 15])\n                cylinder(h = 8, r = 3);\n        }\n    }\n}\n\n// Frigate escort\nmodule frigate() {\n    scale([0.4, 0.3, 0.4]) {\n        union() {\n            // Hull\n            hull_base();\n            \n            // Bridge\n            translate([0, 0, 8])\n                cube([50, 12, 10], center = true);\n            \n            // Helicopter deck\n            translate([-20, 0, 18])\n                cube([20, 15, 1], center = true);\n        }\n    }\n}\n\n// Submarine\nmodule submarine() {\n    scale([0.3, 0.2, 0.2]) {\n        rotate([90, 0, 0]) {\n            // Main hull\n            cylinder(h = 80, r = 8, center = true);\n            \n            // Conning tower\n            translate([0, 0, 15])\n                cube([15, 8, 8], center = true);\n            \n            // Propeller\n            translate([0, 0, -42])\n                rotate([0, 0, 45])\n                    cube([12, 2, 1], center = true);\n        }\n    }\n}\n\n// Landing craft\nmodule landing_craft() {\n    scale([0.2, 0.15, 0.15]) {\n        union() {\n            // Hull\n            translate([0, 0, 3])\n                cube([40, 15, 6], center = true);\n            \n            // Ramp\n            translate([20, 0, 0])\n                rotate([0, -30, 0])\n                    cube([12, 14, 1], center = true);\n        }\n    }\n}\n\n// Assemble the fleet\nunion() {\n    // Main carrier\n    translate([0, 0, 0])\n        scale(fleet_scale)\n        union() {\n            carrier_body();\n            carrier_island();\n            flight_deck();\n        }\n    \n    // Destroyer escort 1\n    translate([70, 30, 0])\n        destroyer();\n    \n    // Destroyer escort 2 (mirrored)\n    translate([-70, 30, 0])\n        mirror([1, 0, 0])\n            destroyer();\n    \n    // Frigate\n    translate([50, -40, 0])\n        rotate([0, 0, 45])\n            frigate();\n    \n    // Submarine\n    translate([0, -50, -5])\n        submarine();\n    \n    // Landing craft\n    translate([30, -10, 0])\n        landing_craft();\n}",
    "renders": true
  },
  {
    "vehicle": "cargo",
    "openscad_code": "// Realistic cargo container (medium complexity)\n// Overall size: 70 x 30 x 30 mm\n\n$fn = 32;\n\n// Main container body\nmodule container_body() {\n    difference() {\n        // Outer shell\n        cube([70, 30, 30], center=false);\n        \n        // Hollow interior\n        translate([2, 2, 2])\n            cube([66, 26, 28], center=false);\n    }\n}\n\n// Container floor with wood texture\nmodule container_floor() {\n    for (x = [5:10:65]) {\n        translate([x, 2, 1.5])\n            cube([8, 26, 0.5], center=false);\n    }\n}\n\n// Corner posts\nmodule corner_post(x, y) {\n    translate([x, y, 0])\n        cube([3, 3, 30], center=false);\n}\n\n// Door frame\nmodule door_frame() {\n    // Left door\n    translate([1, 1, 1]) {\n        difference() {\n            // Door panel\n            translate([0, 0, 0])\n                cube([34, 2, 28], center=false);\n            \n            // Door handle hole\n            translate([30, -1, 12])\n                cylinder(h=4, r=1.5, center=false);\n                \n            // Door detail lines\n            translate([8, -0.5, 2])\n                cube([0.5, 1, 24], center=false);\n            translate([20, -0.5, 2])\n                cube([0.5, 1, 24], center=false);\n            translate([28, -0.5, 14])\n                cube([0.5, 1, 10], center=false);\n        }\n        \n        // Door handle\n        translate([30, 2, 12])\n            rotate([0, 90, 0])\n                cylinder(h=6, r=1, center=false);\n    }\n    \n    // Right door\n    translate([35, 1, 1]) {\n        difference() {\n            translate([0, 0, 0])\n                cube([34, 2, 28], center=false);\n            \n            translate([4, -1, 12])\n                cylinder(h=4, r=1.5, center=false);\n                \n            translate([6, -0.5, 14])\n                cube([0.5, 1, 10], center=false);\n            translate([14, -0.5, 2])\n                cube([0.5, 1, 24], center=false);\n            translate([26, -0.5, 2])\n                cube([0.5, 1, 24], center=false);\n        }\n        \n        translate([4, 2, 12])\n            rotate([0, 90, 0])\n                cylinder(h=6, r=1, center=false);\n    }\n}\n\n// Locking rods\nmodule locking_rods() {\n    // Left side\n    translate([33, 0, 2])\n        cylinder(h=30, r=0.5, center=false);\n    translate([33, 30, 2])\n        cylinder(h=30, r=0.5, center=false);\n    \n    // Right side\n    translate([37, 0, 2])\n        cylinder(h=30, r=0.5, center=false);\n    translate([37, 30, 2])\n        cylinder(h=30, r=0.5, center=false);\n}\n\n// Top reinforcement beams\nmodule top_beams() {\n    for (x = [5:15:60]) {\n        translate([x, 0, 29])\n            cube([10, 30, 1], center=false);\n    }\n}\n\n// Side wall corrugations\nmodule side_corrugations() {\n    for (y = [5:5:25]) {\n        translate([0, y, 15])\n            cube([70, 1, 15], center=false);\n    }\n}\n\n// Assembly\nunion() {\n    container_body();\n    \n    // Add corner posts\n    corner_post(0, 0);\n    corner_post(67, 0);\n    corner_post(0, 27);\n    corner_post(67, 27);\n    \n    // Add floor\n    container_floor();\n    \n    // Add doors at back\n    translate([0, 27, 0])\n        door_frame();\n    \n    // Add locking mechanism\n    locking_rods();\n    \n    // Add top structural elements\n    top_beams();\n    \n    // Add side corrugations\n    side_corrugations();\n    rotate([0, 180, 0])\n        translate([0, -30, 0])\n            side_corrugations();\n}",
    "renders": true
  },
  {
    "vehicle": "delivery",
    "openscad_code": "// Delivery Drone – medium-complexity, printable, 75 mm tip-to-tip\n// Wings fold up for printing, 1.2 mm wall thickness, no steep overhangs\n\n$fa = 2; $fs = 0.5;\n\nmodule body() {\n    // central tube\n    cylinder(h = 50, d1 = 28, d2 = 26, center = true);\n    // front nose dome\n    translate([0,0,25])\n        sphere(d = 28);\n    // rear motor ring\n    translate([0,0,-25])\n        cylinder(h = 10, d = 30, center = true);\n}\n\nmodule prop() {\n    // hub\n    cylinder(h = 4, d = 8);\n    // three blades, 0.6 mm thick\n    for(a = [0:120:240])\n        rotate([0,0,a])\n            translate([4,0,2])\n                cube([20, 0.6, 4], center = true);\n}\n\nmodule arm() {\n    // printable folded arm\n    rotate([0,0,-90])\n        linear_extrude(height = 2, center = true, convexity = 10)\n            polygon(points = [[0,0],[30,5],[30,-5]]);\n}\n\nmodule motor_pod() {\n    // cylindrical motor housing\n    cylinder(h = 8, d = 12, center = true);\n    // propeller\n    translate([0,0,4]) prop();\n}\n\nmodule landing_leg() {\n    // V-shaped printed flat\n    linear_extrude(height = 2, center = true)\n        polygon(points = [[0,0],[15,-5],[15,5]]);\n}\n\nmodule package() {\n    // simple taped box\n    cube([20,15,10], center = true);\n    // tape line\n    translate([0,0,5.1]) color(\"gray\") cube([22,2,0.5], center = true);\n}\n\n// Main assembly\nbody();\n\n// four arms fold forward\nfor(a = [0:90:270])\n    rotate([0,0,a])\n        translate([15,0,0]) arm();\n\n// motor pods at arm tips\nfor(a = [0:90:270])\n    rotate([0,0,a])\n        translate([45,0,0]) motor_pod();\n\n// landing legs\nfor(a = [45:90:315])\n    rotate([0,0,a])\n        translate([18,0,-30]) landing_leg();\n\n// payload bay under body\ntranslate([0,0,-20]) package();",
    "renders": true
  },
  {
    "vehicle": "panel",
    "openscad_code": "// Realistic Control Panel – 3D-printable, medium complexity\n// Dimensions: 80 x 60 x 12 mm, wall thickness 2 mm, no overhangs\n\n$fn = 36;\n\n// Main body\nmodule panel_base() {\n    difference() {\n        // Outer shell\n        cube([80, 60, 12], center = true);\n        // Hollow cavity\n        translate([0, 0, 1])\n            cube([76, 56, 10], center = true);\n    }\n}\n\n// Recessed display bezel\nmodule display_bezel() {\n    difference() {\n        translate([0, 15, 0])\n            cube([36, 20, 2], center = true);\n        translate([0, 15, 1])\n            cube([30, 14, 2], center = true);\n    }\n}\n\n// Four push buttons\nmodule push_button(pos_x, pos_y, label = \"\") {\n    translate([pos_x, pos_y, 6])\n    union() {\n        // Button cap\n        cylinder(h = 3, r = 4);\n        // Stem\n        cylinder(h = 6, r = 2.5);\n    }\n}\n\n// Rotary encoder with knurled knob\nmodule rotary_encoder(pos_x, pos_y) {\n    translate([pos_x, pos_y, 6])\n    union() {\n        // Shaft\n        cylinder(h = 6, r = 3);\n        // Knob\n        translate([0, 0, 6])\n            cylinder(h = 5, r = 6);\n        // Knurling (simple ridges)\n        for (i = [0:17]) {\n            rotate([0, 0, i * 20])\n                translate([5.5, 0, 2.5])\n                    cube([1, 0.5, 5], center = true);\n        }\n    }\n}\n\n// LED indicators\nmodule led_indicator(pos_x, pos_y) {\n    translate([pos_x, pos_y, 6])\n    union() {\n        // LED housing\n        cylinder(h = 2, r = 4);\n        // Lens\n        translate([0, 0, 2])\n            sphere(r = 3);\n    }\n}\n\n// Ventilation slots pattern\nmodule vent_slots() {\n    for (i = [-2:2]) {\n        translate([i * 12 - 24, -26, 0])\n            cube([8, 4, 2], center = true);\n    }\n}\n\n// Mounting holes\nmodule holes() {\n    for (hx = [-35, 35])\n    for (hy = [-25, 25]) {\n        translate([hx, hy, 0])\n            cylinder(h = 12, r = 2.5, center = true);\n    }\n}\n\n// Assemble everything\nunion() {\n    difference() {\n        panel_base();\n        display_bezel();\n        vent_slots();\n        holes();\n    }\n\n    // Buttons (no overhangs)\n    push_button(-25, -10);\n    push_button(-10, -10);\n    push_button(  5, -10);\n    push_button( 20, -10);\n\n    // Rotary encoder\n    rotary_encoder(-20, 0);\n\n    // LEDs\n    led_indicator(10, 0);\n    led_indicator(25, 0);\n}",
    "renders": true
  },
  {
    "vehicle": "boxtruck",
    "openscad_code": "// Realistic Box Truck - Medium Complexity\n// Overall dimensions: 95mm x 40mm x 45mm\n\n$fn = 32;\n\n// Main truck body\nmodule truck_body() {\n    difference() {\n        // Main box shape\n        translate([0, 0, 20]) cube([70, 38, 25], center=true);\n        \n        // Wheel wells\n        translate([-20, 20, 20]) rotate([0,90,0]) cylinder(h=12, r=10);\n        translate([-20, -20, 20]) rotate([0,90,0]) cylinder(h=12, r=10);\n        translate([20, 20, 20]) rotate([0,90,0]) cylinder(h=12, r=10);\n        translate([20, -20, 20]) rotate([0,90,0]) cylinder(h=12, r=10);\n    }\n}\n\n// Cab section\nmodule cab() {\n    union() {\n        // Main cab\n        translate([-35, 0, 15]) cube([25, 36, 20], center=true);\n        \n        // Cab roof with slight curve\n        translate([-35, 0, 26]) scale([1, 1, 0.3]) sphere(r=12);\n        \n        // Windshield\n        translate([-22, 0, 20]) cube([0.5, 30, 15], center=true);\n    }\n}\n\n// Wheels\nmodule wheel() {\n    difference() {\n        cylinder(h=8, r=10);\n        translate([0, 0, -1]) cylinder(h=10, r=6);\n    }\n}\n\n// Door handles\nmodule door_handle() {\n    translate([0, 0, 0]) rotate([90, 0, 0]) cylinder(h=4, r=1.5);\n}\n\n// Headlights\nmodule headlight() {\n    sphere(r=3);\n}\n\n// Side mirrors\nmodule mirror() {\n    union() {\n        translate([0, 0, 0]) cube([8, 2, 2], center=true);\n        translate([4, 0, 0]) sphere(r=2);\n    }\n}\n\n// Rear doors\nmodule rear_doors() {\n    for(i = [0, 1]) {\n        translate([35, (i == 0 ? 9 : -9), 20]) \n        rotate([0, 0, 0]) \n        cube([1, 17, 23], center=true);\n    }\n}\n\n// Exhaust pipe\nmodule exhaust() {\n    translate([-30, 20, 30]) rotate([0, 90, 0]) cylinder(h=15, r=2);\n}\n\n// Bumper\nmodule bumper() {\n    translate([-47, 0, 7]) cube([4, 38, 4], center=true);\n}\n\n// Assembly\nunion() {\n    // Main truck components\n    truck_body();\n    cab();\n    \n    // Wheels\n    translate([-20, 20, 10]) wheel();\n    translate([-20, -20, 10]) wheel();\n    translate([20, 20, 10]) wheel();\n    translate([20, -20, 10]) wheel();\n    \n    // Front bumper\n    bumper();\n    \n    // Headlights\n    translate([-47, 12, 15]) headlight();\n    translate([-47, -12, 15]) headlight();\n    \n    // Side mirrors\n    translate([-30, 19, 23]) rotate([0, 90, 0]) mirror();\n    translate([-30, -19, 23]) rotate([0, 90, 180]) mirror();\n    \n    // Door handles\n    translate([-30, 18, 15]) door_handle();\n    translate([-30, -18, 15]) door_handle();\n    \n    // Rear doors\n    rear_doors();\n    \n    // Exhaust pipe\n    exhaust();\n    \n    // Small details - fuel cap\n    translate([0, 19, 15]) rotate([90, 0, 0]) cylinder(h=1, r=3);\n    \n    // Roof details\n    translate([-35, 0, 33]) cube([20, 5, 1], center=true);\n}",
    "renders": true
  },
  {
    "vehicle": "flatbed",
    "openscad_code": "// Realistic flatbed truck bed with medium complexity\n// Overall dimensions: 80mm L x 45mm W x 12mm H\n\n$fn = 32;\nwall = 2;\nbed_l = 80;\nbed_w = 45;\nbed_h = 4;\nrail_h = 6;\npost_h = 8;\npost_w = 3;\n\n// Main bed platform\nmodule bed_platform() {\n    difference() {\n        // Main deck\n        translate([0, 0, bed_h/2])\n            cube([bed_l, bed_w, bed_h], center=true);\n        \n        // Lightening holes\n        for(x = [-30, -10, 10, 30])\n            for(y = [-15, 0, 15])\n                translate([x, y, bed_h-0.1])\n                    cylinder(h=bed_h+0.2, r=3);\n    }\n}\n\n// Side rails\nmodule side_rail(x_pos) {\n    translate([x_pos, 0, (bed_h+rail_h)/2])\n        cube([wall, bed_w, rail_h], center=true);\n}\n\n// Stake pockets\nmodule stake_pocket(x_pos, y_pos) {\n    translate([x_pos, y_pos, bed_h+rail_h/2])\n        cube([wall+1, post_w+1, rail_h], center=true);\n}\n\n// Headboard\nmodule headboard() {\n    difference() {\n        // Main headboard\n        translate([-bed_l/2-wall/2, 0, (bed_h+post_h)/2])\n            cube([wall, bed_w, post_h], center=true);\n        \n        // Cutouts for weight reduction\n        for(y = [-15, 0, 15])\n            translate([-bed_l/2, y, bed_h+post_h/2])\n                cube([wall+0.2, 8, post_h+0.2], center=true);\n    }\n}\n\n// Floor planks texture\nmodule floor_planks() {\n    for(x = [-35, -25, -15, -5, 5, 15, 25, 35])\n        translate([x, 0, bed_h/2+0.1])\n            cube([8, bed_w-4, 0.5], center=true);\n}\n\n// Tie down hooks\nmodule tie_hook(x_pos, y_pos) {\n    translate([x_pos, y_pos, bed_h+1])\n        cylinder(h=2, r=1.5);\n    translate([x_pos, y_pos, bed_h+2])\n        sphere(r=2);\n}\n\n// Wheel wells\nmodule wheel_well() {\n    translate([bed_l/4, bed_w/2+wall/2, bed_h/2])\n        rotate([0, 90, 0])\n            cylinder(h=wall+0.2, r=6);\n    translate([bed_l/4, -bed_w/2-wall/2, bed_h/2])\n        rotate([0, 90, 0])\n            cylinder(h=wall+0.2, r=6);\n}\n\n// Assembly\nunion() {\n    // Main components\n    bed_platform();\n    side_rail(bed_l/2+wall/2);\n    side_rail(-bed_l/2-wall/2);\n    headboard();\n    \n    // Stake pockets along sides\n    for(x = [-30, -10, 10, 30])\n        for(y = [bed_w/2-wall/2, -bed_w/2+wall/2])\n            stake_pocket(x, y);\n    \n    // Floor planks\n    floor_planks();\n    \n    // Tie down hooks\n    for(x = [-25, 0, 25])\n        for(y = [bed_w/2-3, -bed_w/2+3])\n            tie_hook(x, y);\n    \n    // Wheel well cutouts\n    difference() {\n        union(); // Placeholder for wheel well subtraction\n        wheel_well();\n        translate([-bed_l/4, bed_w/2+wall/2, bed_h/2])\n            rotate([0, 90, 0])\n                cylinder(h=wall+0.2, r=6);\n        translate([-bed_l/4, -bed_w/2-wall/2, bed_h/2])\n            rotate([0, 90, 0])\n                cylinder(h=wall+0.2, r=6);\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "dumptruck",
    "openscad_code": "// Realistic Medium-Complexity 3D-Printable Dump Truck\n// Overall footprint ~80 mm long, 50 mm wide, 30 mm high\n// All walls >= 1.2 mm for FDM printing\n\n$fa = 2;\n$fs = 0.5;\n\n// Main assembly\nmodule dump_truck() {\n    color(\"darkgreen\") chassis();\n    color(\"darkgreen\") cab();\n    color(\"darkgreen\") axles();\n    color(\"black\") wheels();\n    color(\"yellow\") dump_box();\n}\n\n// Chassis frame\nmodule chassis() {\n    difference() {\n        // main frame rails\n        union() {\n            cube([70, 45, 4], center = true);\n            // rear bumper\n            translate([35, 0, -2.5])\n                cube([3, 48, 6], center = true);\n        }\n        // hollow out for weight saving\n        translate([0, 0, 0])\n            cube([66, 41, 5], center = true);\n    }\n}\n\n// Cab\nmodule cab() {\n    translate([-20, 0, 4])\n    union() {\n        difference() {\n            // cab body\n            cube([18, 22, 18], center = true);\n            translate([1, 0, 3])\n                cube([14, 18, 12], center = true);\n        }\n        // roof visor\n        translate([2, 0, 11])\n            cube([18, 22, 2], center = true);\n        // headlights\n        translate([-9.5, 8, 0])\n            sphere(d = 3);\n        translate([-9.5, -8, 0])\n            sphere(d = 3);\n        // grille\n        translate([-9.5, 0, 0])\n            cube([1, 12, 8], center = true);\n    }\n}\n\n// Front & rear axles\nmodule axles() {\n    axle(-15);\n    axle(20);\n}\n\nmodule axle(x) {\n    translate([x, 0, -6])\n    rotate([0, 90, 0])\n    cylinder(h = 45, d = 3, center = true);\n}\n\n// Wheels – 4 pieces, 5 mm offset from axle\nmodule wheels() {\n    for (side = [-1, 1])\n    for (x = [-15, 20])\n        translate([x, side * 25, -6])\n        wheel();\n}\n\nmodule wheel() {\n    difference() {\n        cylinder(h = 8, d = 14, center = true);\n        translate([0, 0, 0])\n            cylinder(h = 10, d = 4, center = true);\n    }\n}\n\n// Dump box hinged at rear\nmodule dump_box() {\n    translate([15, 0, 5])\n    rotate([0, 0, -10])  // slightly tilted for appearance\n    union() {\n        // box walls\n        difference() {\n            cube([40, 44, 18], center = true);\n            // inner cavity\n            translate([0, 0, 1])\n                cube([36, 40, 18], center = true);\n        }\n        // floor reinforcement ribs\n        for (i = [-10:10:10])\n            translate([i, 0, -8])\n                cube([8, 42, 2], center = true);\n        // hinge pins\n        translate([-20, 0, -9])\n            cylinder(h = 46, d = 2, center = true);\n    }\n}\n\ndump_truck();",
    "renders": true
  },
  {
    "vehicle": "tanker",
    "openscad_code": "// Medium-complexity realistic tanker (crude-oil class)\n// Approx. 1:1800 scale, 95 mm overall length\n\n// Overall dimensions (mm)\nLOA = 95;\nBEAM = 14;\nDRAFT = 4;\n\n// Wall thickness for 3D printing\nWALL = 1.5;\n\n// Hull module\nmodule hull() {\n    difference() {\n        // Main hull shape – ellipsoid cut\n        scale([1, 0.35, 0.25])\n            sphere(d = BEAM * 2.8, $fn = 60);\n        // Flat bottom\n        translate([0, 0, -BEAM * 0.25])\n            cube([BEAM * 3, BEAM * 3, BEAM], center = true);\n    }\n}\n\n// Superstructure block (accommodation & bridge)\nmodule superstructure() {\n    translate([-LOA * 0.35, 0, DRAFT + 5.5]) {\n        // Accommodation block\n        cube([14, BEAM - 2, 7], center = true);\n        // Bridge house on top\n        translate([0, 0, 4.5])\n            cube([8, BEAM - 4, 3], center = true);\n    }\n}\n\n// Single central funnel\nmodule funnel() {\n    translate([-LOA * 0.35 + 2, 0, DRAFT + 12]) {\n        cylinder(h = 6, d1 = 2, d2 = 1.5, $fn = 20);\n    }\n}\n\n// Cargo tank module – single cylindrical section\nmodule tank_section(l = 12, d = 11) {\n    color(\"Gray\")\n    difference() {\n        // Outer tank shell\n        rotate([90, 0, 0])\n            cylinder(h = l, d = d, $fn = 60);\n        // Inner void for printability\n        rotate([90, 0, 0])\n            cylinder(h = l + 0.2, d = d - 2 * WALL, $fn = 60);\n    }\n}\n\n// Deck with safety railing\nmodule deck() {\n    difference() {\n        cube([LOA, BEAM + 0.2, WALL], center = true);\n        translate([0, 0, -0.1])\n            cube([LOA - 2 * WALL, BEAM + 0.2 - 2 * WALL, WALL + 0.2], center = true);\n    }\n}\n\n// Rail posts along deck edge\nmodule rail_posts() {\n    for (x = [-LOA * 0.4 : 4 : LOA * 0.4])\n        translate([x, BEAM / 2 - 0.2, DRAFT + 1.8])\n            cylinder(h = 2.5, d = 0.8, $fn = 8);\n}\n\n// Anchor pockets at bow\nmodule anchors() {\n    for (y = [-BEAM * 0.3, BEAM * 0.3])\n        translate([LOA * 0.47, y, DRAFT + 0.5])\n            rotate([0, 90, 0])\n                cylinder(h = 3, d = 2, $fn = 20);\n}\n\n// Bow bulb\nmodule bulb() {\n    translate([LOA * 0.48, 0, -DRAFT * 0.5])\n        scale([1.5, 1, 0.7])\n            sphere(d = 4, $fn = 30);\n}\n\n// Midship tank farm (9 identical tanks)\nmodule tanks() {\n    for (i = [0 : 9])\n        translate([-LOA * 0.2 + i * 8.5, 0, DRAFT + 1])\n            tank_section();\n}\n\n// Propeller cone\nmodule propeller() {\n    translate([-LOA * 0.48, 0, -DRAFT * 0.6])\n        rotate([0, 0, 180])\n            cylinder(h = 3, d1 = 0, d2 = 2.5, $fn = 20);\n}\n\n// Main assembly\nunion() {\n    hull();\n    translate([0, 0, DRAFT])\n        deck();\n    superstructure();\n    funnel();\n    tanks();\n    rail_posts();\n    anchors();\n    bulb();\n    propeller();\n}",
    "renders": true
  },
  {
    "vehicle": "towtruck",
    "openscad_code": "// Towtruck - Medium complexity, realistic style\n// Dimensions: ~90mm length, 35mm width, 35mm height\n\n$fn = 32;\n\n// Main truck body\nmodule truck_body() {\n    // Cab section\n    translate([0, 0, 8]) {\n        difference() {\n            cube([30, 30, 22], center=true);\n            translate([15, 0, 5]) cube([10, 26, 12], center=true);\n        }\n    }\n    \n    // Engine hood\n    translate([-20, 0, 8]) {\n        cube([10, 28, 18], center=true);\n    }\n    \n    // Bed section\n    translate([25, 0, 3]) {\n        cube([40, 32, 6], center=true);\n    }\n    \n    // Toolboxes\n    translate([35, -18, 7]) {\n        cube([15, 8, 12], center=true);\n    }\n    translate([35, 18, 7]) {\n        cube([15, 8, 12], center=true);\n    }\n}\n\n// Wheels\nmodule wheel() {\n    difference() {\n        cylinder(h=8, r=10, center=true);\n        cylinder(h=9, r=4, center=true);\n    }\n}\n\n// Wheel assembly\nmodule wheel_assembly(pos, angle=0) {\n    translate(pos) rotate([0, 90, angle]) {\n        // Tire\n        color(\"black\") wheel();\n        \n        // Rim\n        translate([0, 0, 0]) {\n            color(\"gray\") cylinder(h=7, r=6, center=true);\n            cylinder(h=8, r=3, center=true);\n        }\n    }\n}\n\n// Boom assembly\nmodule boom() {\n    // Base\n    translate([45, 0, 12]) {\n        rotate([0, 0, 90]) cylinder(h=8, r=6, center=true);\n    }\n    \n    // Boom arm\n    translate([45, 0, 20]) {\n        rotate([0, 45, 0]) cube([50, 4, 4], center=true);\n    }\n    \n    // Support arm\n    translate([45, 0, 12]) {\n        rotate([0, 0, 90]) rotate([45, 0, 0]) \n            cube([35, 3, 3], center=true);\n    }\n}\n\n// Light bar\nmodule light_bar() {\n    translate([-25, 0, 25]) {\n        cube([5, 30, 3], center=true);\n        \n        // Lights\n        for(i = [-10:10:10]) {\n            translate([0, i, 2]) {\n                cylinder(h=3, r=2);\n            }\n        }\n    }\n}\n\n// Windows\nmodule windows() {\n    color(\"lightblue\") {\n        // Front windshield\n        translate([-15, 0, 18]) {\n            cube([0.1, 22, 12], center=true);\n        }\n        \n        // Side windows\n        translate([0, 15, 18]) {\n            rotate([0, 90, 0]) cube([0.1, 22, 12], center=true);\n        }\n        translate([0, -15, 18]) {\n            rotate([0, 90, 0]) cube([0.1, 22, 12], center=true);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Truck body\n    color(\"red\") truck_body();\n    \n    // Windows\n    windows();\n    \n    // Wheels\n    color(\"black\") {\n        wheel_assembly([-15, 17, -3]);\n        wheel_assembly([-15, -17, -3]);\n        wheel_assembly([15, 17, -3]);\n        wheel_assembly([15, -17, -3]);\n        wheel_assembly([45, 17, -3]);\n        wheel_assembly([45, -17, -3]);\n    }\n    \n    // Boom\n    color(\"gray\") boom();\n    \n    // Light bar\n    color(\"blue\") light_bar();\n    \n    // Headlights\n    translate([-25, 12, 12]) {\n        color(\"white\") sphere(r=3);\n    }\n    translate([-25, -12, 12]) {\n        color(\"white\") sphere(r=3);\n    }\n    \n    // Taillights\n    translate([50, 12, 12]) {\n        color(\"red\") sphere(r=2);\n    }\n    translate([50, -12, 12]) {\n        color(\"red\") sphere(r=2);\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "wrecker",
    "openscad_code": "// Wrecker (Tow Truck) - Realistic Style, Medium Complexity\n// Dimensions in mm, printable scale ~80mm length\n\n// Color constants\n$fn = 32;\n\n// Main truck chassis\nmodule chassis() {\n    // Main frame\n    difference() {\n        cube([60, 25, 8], center=true);\n        translate([0, 0, 4])\n            cube([58, 23, 8], center=true);\n    }\n    \n    // Front bumper\n    translate([-30, 0, -3])\n        cube([2, 22, 6], center=true);\n    \n    // Rear bumper\n    translate([30, 0, -3])\n        cube([2, 22, 6], center=true);\n}\n\n// Cab module\nmodule cab() {\n    // Main cab body\n    translate([-15, 0, 6])\n        cube([20, 22, 15], center=true);\n    \n    // Cab roof\n    translate([-15, 0, 15])\n        cube([18, 20, 3], center=true);\n    \n    // Windshield\n    difference() {\n        translate([-5, 0, 9])\n            cube([1, 16, 10], center=true);\n        translate([-4.5, 0, 11])\n            cube([2, 14, 8], center=true);\n    }\n    \n    // Side windows (left)\n    translate([-15, 11.1, 10])\n        cube([16, 0.5, 6], center=true);\n    \n    // Side windows (right)\n    translate([-15, -11.1, 10])\n        cube([16, 0.5, 6], center=true);\n}\n\n// Wheels module\nmodule wheel() {\n    difference() {\n        cylinder(h=4, r=6, center=true);\n        translate([0, 0, 2.1])\n            cylinder(h=0.5, r=3, center=true);\n    }\n}\n\n// Wheel assembly\nmodule wheels() {\n    // Front wheels\n    translate([-20, -12, -5])\n        rotate([90, 0, 0])\n            wheel();\n    translate([-20, 12, -5])\n        rotate([90, 0, 0])\n            wheel();\n    \n    // Rear wheels\n    translate([20, -12, -5])\n        rotate([90, 0, 0])\n            wheel();\n    translate([20, 12, -5])\n        rotate([90, 0, 0])\n            wheel();\n}\n\n// Boom assembly\nmodule boom() {\n    // Base\n    translate([15, 0, 8])\n        cylinder(h=3, r=4, center=true);\n    \n    // Main boom\n    translate([15, 0, 15])\n        rotate([0, 30, 0])\n            cube([40, 3, 3], center=true);\n    \n    // Support struts\n    translate([15, 3, 12])\n        rotate([0, 30, 0])\n            cube([25, 2, 2], center=true);\n    translate([15, -3, 12])\n        rotate([0, 30, 0])\n            cube([25, 2, 2], center=true);\n    \n    // Hook assembly\n    translate([45, 0, 22])\n        rotate([0, 30, 0])\n            cylinder(h=5, r=1, center=true);\n    \n    // Hook\n    translate([45, 0, 25])\n        rotate([0, 30, 0])\n            difference() {\n                cylinder(h=3, r=2, center=true);\n                translate([0, 2, 0])\n                    cube([4, 4, 3], center=true);\n            }\n}\n\n// Tool box\nmodule toolbox() {\n    translate([5, 8, 5])\n        cube([10, 8, 6], center=true);\n}\n\n// Headlights\nmodule headlights() {\n    // Left headlight\n    translate([-29, 7, 2])\n        sphere(r=2);\n    \n    // Right headlight\n    translate([-29, -7, 2])\n        sphere(r=2);\n}\n\n// Exhaust pipe\nmodule exhaust() {\n    translate([10, 13, 10])\n        cylinder(h=15, r=1.5, center=true);\n}\n\n// Main assembly\nunion() {\n    chassis();\n    cab();\n    wheels();\n    boom();\n    toolbox();\n    headlights();\n    exhaust();\n}",
    "renders": true
  },
  {
    "vehicle": "tractor",
    "openscad_code": "// Realistic Medium-Complexity Tractor – OpenSCAD\n// Approx. 85 mm long, 50 mm wide, 50 mm tall\n// Designed for FDM printing (no steep overhangs, 2 mm walls)\n\n$fn=32;\n\n// Main assembly\nmodule tractor() {\n    color(\"JohnDeereGreen\")\n    union() {\n        chassis();\n        cabin();\n        hood();\n        exhaust();\n        drawbar();\n        front_wheels();\n        rear_wheels();\n    }\n}\n\n// Central chassis block\nmodule chassis() {\n    translate([-10,0,20])           // center slightly back\n    cube([80,40,20], center=true);  // 2 mm thick floor\n}\n\n// Cabin with windows and roof\nmodule cabin() {\n    translate([25,0,30])\n    union() {\n        // cabin walls\n        difference() {\n            cube([30,36,28], center=true);\n            translate([0,0,10])\n            cube([26,32,20], center=true); // hollow interior\n        }\n        // roof\n        translate([0,0,14])\n        cube([34,40,2], center=true);\n\n        // cabin windows\n        color(\"LightBlue\")\n        translate([15.5,10,10])\n        cube([1,8,10], center=true);\n        translate([15.5,-10,10])\n        cube([1,8,10], center=true);\n    }\n}\n\n// Engine hood sloped front\nmodule hood() {\n    translate([-30,0,25])\n    union() {\n        // main hood\n        difference() {\n            scale([1,1,0.7])\n            rotate([0,-10,0])\n            cube([30,36,40], center=true);\n            translate([0,0,5])\n            scale([0.9,0.9,0.9])\n            rotate([0,-10,0])\n            cube([30,36,40], center=true);\n        }\n        // grille\n        color(\"Gray\")\n        translate([-15.5,0,10])\n        cube([1,22,14], center=true);\n    }\n}\n\n// Vertical exhaust pipe\nmodule exhaust() {\n    color(\"Gray\")\n    translate([10,18,48])\n    cylinder(h=15, d=4, center=false);\n}\n\n// Simple rear drawbar\nmodule drawbar() {\n    color(\"Black\")\n    translate([-45,0,20])\n    cube([20,8,4], center=true);\n}\n\n// Two front wheels\nmodule front_wheels() {\n    for(side=[-1,1])\n    translate([-20,side*25,10])\n    rotate([0,0,90])\n    wheel(8, 12, 6);\n}\n\n// Two large rear wheels\nmodule rear_wheels() {\n    for(side=[-1,1])\n    translate([30,side*25,10])\n    rotate([0,0,90])\n    wheel(14, 18, 8);\n}\n\n// Generic wheel module\nmodule wheel(diam, width, hub) {\n    color(\"Black\")\n    difference() {\n        cylinder(h=width, d=diam, center=true);\n        // hub hole\n        cylinder(h=width+1, d=hub, center=true);\n    }\n}\n\ntractor();",
    "renders": true
  },
  {
    "vehicle": "semi",
    "openscad_code": "// Semi Truck - Medium Complexity Realistic Style\n// Dimensions in mm, designed for 3D printing\n\n// Overall dimensions\ntruck_length = 90;\ntruck_width = 30;\ntruck_height = 45;\n\n// Main body module\nmodule semi_truck() {\n    color(\"red\")\n    union() {\n        // Cab\n        translate([0, 0, 0])\n            cab();\n        \n        // Sleeper\n        translate([-25, 0, 0])\n            sleeper();\n        \n        // Hood\n        translate([25, 0, -5])\n            hood();\n        \n        // Chassis frame\n        translate([0, 0, -15])\n            chassis();\n        \n        // Wheels\n        wheels();\n        \n        // Fifth wheel plate\n        translate([-35, 0, -5])\n            fifth_wheel();\n        \n        // Exhaust stacks\n        translate([15, 10, 15])\n            exhaust_stack();\n        translate([15, -10, 15])\n            exhaust_stack();\n        \n        // Fuel tanks\n        translate([5, 12, -10])\n            fuel_tank();\n        translate([5, -12, -10])\n            fuel_tank();\n    }\n}\n\n// Cab module\nmodule cab() {\n    difference() {\n        // Main cab body\n        translate([10, 0, 15])\n            cube([25, 22, 20], center=true);\n        \n        // Windshield\n        translate([22, 0, 20])\n            cube([8, 18, 12], center=true);\n        \n        // Side windows\n        translate([15, 11, 20])\n            cube([15, 2, 10], center=true);\n        translate([15, -11, 20])\n            cube([15, 2, 10], center=true);\n    }\n    \n    // Roof air dam\n    translate([10, 0, 30])\n        cube([25, 24, 3], center=true);\n}\n\n// Sleeper module\nmodule sleeper() {\n    difference() {\n        translate([-10, 0, 15])\n            cube([20, 20, 18], center=true);\n        \n        // Windows\n        translate([-10, 10, 15])\n            cube([18, 2, 8], center=true);\n        translate([-10, -10, 15])\n            cube([18, 2, 8], center=true);\n    }\n}\n\n// Hood module\nmodule hood() {\n    difference() {\n        // Main hood\n        translate([40, 0, 0])\n            cube([20, 20, 15], center=true);\n        \n        // Grille\n        translate([50, 0, 0])\n            cube([2, 14, 8], center=true);\n        \n        // Headlights\n        translate([50, 7, 5])\n            cylinder(h=3, r=2, $fn=16);\n        translate([50, -7, 5])\n            cylinder(h=3, r=2, $fn=16);\n    }\n    \n    // Hood ornament\n    translate([50, 0, 12])\n        cylinder(h=5, r=1.5, $fn=16);\n}\n\n// Chassis frame\nmodule chassis() {\n    // Side rails\n    translate([0, 12, 0])\n        cube([truck_length, 2, 8], center=true);\n    translate([0, -12, 0])\n        cube([truck_length, 2, 8], center=true);\n    \n    // Cross members\n    for(i = [-30:15:30]) {\n        translate([i, 0, 0])\n            cube([2, 24, 8], center=true);\n    }\n}\n\n// Wheels module\nmodule wheels() {\n    // Front wheels\n    translate([35, 10, -10])\n        wheel();\n    translate([35, -10, -10])\n        wheel();\n    \n    // Rear wheels (tandem axle)\n    for(x = [-20:10:-10]) {\n        translate([x, 10, -10])\n            wheel();\n        translate([x, -10, -10])\n            wheel();\n    }\n}\n\n// Single wheel\nmodule wheel() {\n    difference() {\n        // Tire\n        color(\"black\")\n        cylinder(h=8, r=6, center=true, $fn=32);\n        \n        // Rim\n        color(\"silver\")\n        translate([0, 0, 1])\n            cylinder(h=6, r=4, center=true, $fn=32);\n    }\n}\n\n// Fifth wheel plate\nmodule fifth_wheel() {\n    difference() {\n        // Plate\n        translate([0, 0, 0])\n            cube([15, 10, 2], center=true);\n        \n        // Coupling slot\n        translate([0, 0, 1])\n            cube([8, 6, 3], center=true);\n    }\n}\n\n// Exhaust stack\nmodule exhaust_stack() {\n    // Stack\n    color(\"silver\")\n    translate([0, 0, 0])\n        cylinder(h=25, r=2, $fn=16);\n    \n    // Heat shield\n    color(\"silver\")\n    translate([0, 0, 10])\n        cylinder(h=8, r=3, $fn=16);\n}\n\n// Fuel tank\nmodule fuel_tank() {\n    color(\"silver\")\n    difference() {\n        // Tank body\n        rotate([90, 0, 0])\n            cylinder(h=25, r=5, $fn=32);\n        \n        // Cap\n        translate([0, 12.5, 4])\n            cylinder(h=2, r=3, $fn=16);\n    }\n}\n\n// Render the truck\nsemi_truck();",
    "renders": true
  },
  {
    "vehicle": "rig",
    "openscad_code": "// Realistic Medium-Complexity Oil-Rig Platform\n// Overall footprint ≈ 80 mm × 80 mm × 100 mm\n// Designed for 3D printing – 1.2 mm wall thickness, no steep overhangs\n\n$fn = 50;  // smooth curves\n\nmodule leg(x,y) {\n    // Single hollow support leg with slight draft\n    translate([x, y, 0]) {\n        difference() {\n            cylinder(h = 90, d1 = 10, d2 = 8, center = false);\n            translate([0,0,1]) cylinder(h = 88, d1 = 7.6, d2 = 5.6, center = false);\n        }\n    }\n}\n\nmodule bracing() {\n    // Diagonal cross-braces between legs\n    for (rot = [0,90]) {\n        rotate([0,0,rot]) translate([-35,-35,30]) {\n            cube([70,2,2], center = true);\n            translate([0,0,30]) cube([70,2,2], center = true);\n        }\n        rotate([0,0,rot]) translate([-35,-35,60]) {\n            cube([2,70,2], center = true);\n            translate([0,0,30]) cube([2,70,2], center = true);\n        }\n    }\n}\n\nmodule deck() {\n    // Main working deck with grating holes\n    difference() {\n        translate([-40,-40,90]) cube([80,80,3], center = false);\n        for (x = [-35:10:35])\n            for (y = [-35:10:35])\n                translate([x,y,91]) cube([6,6,5], center = false);\n    }\n}\n\nmodule derrick() {\n    // Drilling derrick – open lattice tower\n    translate([0,0,93]) {\n        difference() {\n            // outer frame\n            cube([12,8,50], center = true);\n            // hollow inside\n            cube([9.6,5.6,52], center = true);\n        }\n        // cross-members\n        for (h = [5:10:45])\n            translate([0,0,h]) cube([14,10,1], center = true);\n    }\n}\n\nmodule helipad() {\n    // Helicopter landing platform offset to one corner\n    translate([-40,40,93]) {\n        difference() {\n            cylinder(h = 2, d = 20);\n            for (a = [0:45:315])\n                rotate([0,0,a]) translate([6,0,0]) cube([12,1,3], center = true);\n        }\n    }\n}\n\nmodule flare_stack() {\n    // Flare boom extending off the side\n    translate([40,0,93]) {\n        rotate([0,0,45]) {\n            cylinder(h = 30, d = 4, center = false);\n            translate([0,0,30]) cylinder(h = 10, d1 = 4, d2 = 6, center = false);\n        }\n    }\n}\n\nmodule lifeboat() {\n    // Simple enclosed lifeboat on davits\n    translate([30,30,93]) {\n        rotate([0,30,0]) {\n            difference() {\n                hull() {\n                    sphere(d = 8);\n                    translate([6,0,0]) sphere(d = 8);\n                }\n                cube([15,10,10], center = true);\n            }\n        }\n    }\n}\n\n// Assemble the entire platform\nunion() {\n    // four support legs\n    leg(-30,-30);\n    leg(30,-30);\n    leg(-30,30);\n    leg(30,30);\n\n    // structural braces\n    bracing();\n\n    // main deck\n    deck();\n\n    // superstructures\n    derrick();\n    helipad();\n    flare_stack();\n    lifeboat();\n}",
    "renders": true
  },
  {
    "vehicle": "hauler",
    "openscad_code": "// Realistic Medium-Complexity OpenSCAD Hauler\n// Approx 80 mm long, 30 mm wide, 40 mm high\n// All parts printable without support\n\n$fn = 32;\n\n// Main hull\nmodule hull() {\n    difference() {\n        // Main body block\n        cube([60, 25, 20], center = true);\n        \n        // Cockpit cutout\n        translate([5, 0, 10])\n            cube([20, 22, 15], center = true);\n        \n        // Rear engine cutout\n        translate([-25, 0, 2])\n            cube([10, 18, 16], center = true);\n    }\n}\n\n// Cockpit canopy\nmodule cockpit() {\n    hull_thickness = 1.5;\n    translate([5, 0, 20 - hull_thickness])\n    difference() {\n        // Canopy dome\n        scale([1.2, 1, 0.6])\n            sphere(10);\n        // Hollow interior\n        scale([1.1, 0.9, 0.5])\n            sphere(9);\n    }\n}\n\n// Side thrusters\nmodule side_thruster() {\n    // Main thruster body\n    cylinder(h = 10, r1 = 4, r2 = 2);\n    \n    // Exhaust bell\n    translate([0, 0, -1])\n        cylinder(h = 3, r1 = 5, r2 = 4);\n}\n\n// Left and right thrusters\nmodule thrusters() {\n    translate([0, 12.5 + 4, -5])\n        rotate([0, 90, 0])\n            side_thruster();\n    \n    translate([0, -12.5 - 4, -5])\n        rotate([0, 90, 180])\n            side_thruster();\n}\n\n// Cargo pods\nmodule cargo_pod() {\n    difference() {\n        // Pod body\n        cube([12, 8, 8], center = true);\n        \n        // Pod cavity\n        translate([0, 0, 0])\n            cube([10, 6, 6], center = true);\n    }\n}\n\n// Cargo rack\nmodule cargo_rack() {\n    // Rack frame\n    translate([0, 0, -15])\n        cube([45, 30, 3], center = true);\n    \n    // Mounting struts\n    for (x = [-20, -10, 0, 10, 20]) {\n        translate([x, 0, -15])\n            cube([2, 30, 15], center = true);\n    }\n    \n    // Pods\n    for (x = [-15, -5, 5, 15]) {\n        translate([x, 10, -15 - 4])\n            cargo_pod();\n        translate([x, -10, -15 - 4])\n            cargo_pod();\n    }\n}\n\n// Landing struts\nmodule landing_strut() {\n    // Main leg\n    translate([0, 0, -10])\n        cylinder(h = 10, r = 1.5);\n    \n    // Foot pad\n    translate([0, 0, -10])\n        cylinder(h = 2, r = 3);\n}\n\n// Landing gear array\nmodule landing_gear() {\n    positions = [\n        [-20, 10], [-20, -10],\n        [20, 10], [20, -10]\n    ];\n    \n    for (pos = positions) {\n        translate([pos[0], pos[1], 0])\n            landing_strut();\n    }\n}\n\n// Main assembly\nunion() {\n    // Hull and cockpit\n    hull();\n    cockpit();\n    \n    // Thrusters\n    thrusters();\n    \n    // Cargo system\n    cargo_rack();\n    \n    // Landing gear\n    landing_gear();\n}",
    "renders": true
  },
  {
    "vehicle": "carrier",
    "openscad_code": "// Realistic medium-complexity carrier (lunch-box style) – approx. 100 mm long\n// Wall thickness 2 mm, no severe overhangs – ready for FDM printing\n\n$fn = 36;\n\n// Overall carrier dimensions\ncarrier_w = 60;   // internal width\ncarrier_d = 90;   // internal depth\ncarrier_h = 40;   // internal height\nwall_t   = 2;     // wall thickness\nedge_r   = 3;     // corner radius\n\nmodule rounded_box(x,y,z,r) {\n    // Box with rounded vertical edges\n    hull() {\n        for(i=[-1,1], j=[-1,1])\n            translate([i*(x/2-r), j*(y/2-r), 0])\n                cylinder(r=r, h=z, center=true);\n    }\n}\n\nmodule body() {\n    // Main container\n    difference() {\n        rounded_box(carrier_w+2*wall_t, carrier_d+2*wall_t, carrier_h+wall_t, edge_r+wall_t);\n        translate([0,0,-wall_t/2])\n            rounded_box(carrier_w, carrier_d, carrier_h+1, edge_r);\n    }\n}\n\nmodule lid() {\n    // Hinged lid with grip ridge\n    difference() {\n        // Outer lid shell\n        rounded_box(carrier_w+2*wall_t, carrier_d+2*wall_t, wall_t*2, edge_r+wall_t);\n        // Inner recess\n        translate([0,0,-1])\n            rounded_box(carrier_w+0.5, carrier_d+0.5, wall_t+2, edge_r);\n        \n        // Grip ridge on top\n        ridge_h = 1.5;\n        ridge_w = 30;\n        ridge_d = 50;\n        translate([0, carrier_d/4, wall_t+ridge_h])\n            cube([ridge_w, ridge_d, ridge_h*2], center=true);\n    }\n}\n\nmodule hinge_pin() {\n    // Simple cylindrical hinge pins\n    cylinder(r=2.2, h=carrier_w+4*wall_t, center=true);\n}\n\nmodule hinges() {\n    // Two hinge knuckles on body\n    for(side=[-1,1]) {\n        translate([0, side*(carrier_d/2+wall_t/2), carrier_h/2])\n            rotate([90,0,0])\n                difference() {\n                    cylinder(r=edge_r+wall_t, h=wall_t*2, center=true);\n                    cylinder(r=edge_r-wall_t, h=wall_t*2+1, center=true);\n                }\n    }\n    // Matching knuckles on lid\n    for(side=[-1,1]) {\n        translate([0, side*(carrier_d/2+wall_t/2), carrier_h+wall_t/2])\n            rotate([90,0,0])\n                difference() {\n                    cylinder(r=edge_r+wall_t, h=wall_t*2, center=true);\n                    cylinder(r=2.5, h=wall_t*2+1, center=true);  // pin hole\n                }\n    }\n}\n\nmodule latch() {\n    // Front latch tab\n    latch_w = 20;\n    latch_h = 6;\n    translate([0, -(carrier_d/2+wall_t), carrier_h/2])\n        difference() {\n            // Hook body\n            cube([latch_w, wall_t*2, latch_h], center=true);\n            // Recess for finger\n            translate([0, -wall_t/2-0.5, latch_h/2-1])\n                cube([latch_w-4, wall_t+1, 3], center=true);\n        }\n}\n\n// Assembly\ntranslate([0,0,carrier_h/2])\n    body();\n\ntranslate([0,0,carrier_h+wall_t])\n    lid();\n\nhinges();\ntranslate([0,0,carrier_h/2])\n    rotate([0,90,0])\n        hinge_pin();\n\ntranslate([0,0,carrier_h/2])\n    latch();",
    "renders": true
  },
  {
    "vehicle": "transporter",
    "openscad_code": "// Realistic transporter truck - medium complexity\n// Main body ~80mm length, designed for 3D printing\n\n$fn = 32;\n\n// Overall dimensions\ntruck_length = 80;\ntruck_width = 30;\ntruck_height = 35;\n\n// Cabin dimensions\ncabin_length = 20;\ncabin_width = 30;\ncabin_height = 25;\n\n// Container dimensions\ncontainer_length = 50;\ncontainer_width = 28;\ncontainer_height = 22;\n\n// Wheel dimensions\nwheel_radius = 6;\nwheel_width = 4;\n\nmodule wheel() {\n    difference() {\n        cylinder(h=wheel_width, r=wheel_radius, center=true);\n        cylinder(h=wheel_width+1, r=wheel_radius-2, center=true);\n    }\n}\n\nmodule axle() {\n    rotate([90,0,0]) {\n        cylinder(h=truck_width+10, r=1.5, center=true);\n    }\n}\n\nmodule wheel_assembly() {\n    union() {\n        translate([-truck_width/2-2, 0, 0]) wheel();\n        translate([truck_width/2+2, 0, 0]) wheel();\n        axle();\n    }\n}\n\nmodule cabin() {\n    union() {\n        // Main cabin body\n        translate([0, 0, cabin_height/2]) \n            cube([cabin_length, cabin_width, cabin_height], center=true);\n        \n        // Cabin roof\n        translate([0, 0, cabin_height+2]) \n            cube([cabin_length-2, cabin_width-4, 4], center=true);\n        \n        // Windshield\n        translate([cabin_length/2-0.5, 0, cabin_height/2+2]) \n            cube([1, cabin_width-6, 12], center=true);\n        \n        // Door handles\n        translate([-cabin_length/2+2, cabin_width/2+0.5, cabin_height/2-2]) \n            cube([2, 1, 1], center=true);\n        translate([-cabin_length/2+2, -cabin_width/2-0.5, cabin_height/2-2]) \n            cube([2, 1, 1], center=true);\n    }\n}\n\nmodule container() {\n    difference() {\n        // Main container\n        translate([0, 0, container_height/2+2]) \n            cube([container_length, container_width, container_height], center=true);\n        \n        // Container details - side panels\n        for(i = [-20:10:20]) {\n            translate([i, container_width/2+0.5, container_height/2+2]) \n                cube([8, 1, 18], center=true);\n            translate([i, -container_width/2-0.5, container_height/2+2]) \n                cube([8, 1, 18], center=true);\n        }\n        \n        // Door outlines\n        translate([container_length/2-2, 0, container_height/2+2]) \n            cube([1, container_width-4, 18], center=true);\n    }\n}\n\nmodule chassis() {\n    union() {\n        // Main frame\n        translate([0, 0, 2]) \n            cube([truck_length, 20, 4], center=true);\n        \n        // Front bumper\n        translate([-truck_length/2+2, 0, 2]) \n            cube([4, truck_width, 6], center=true);\n        \n        // Fuel tank\n        translate([5, truck_width/2-4, 4]) \n            cylinder(h=12, r=3, center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Chassis\n    chassis();\n    \n    // Cabin positioned at front\n    translate([-truck_length/2+cabin_length/2, 0, 4]) cabin();\n    \n    // Container positioned behind cabin\n    translate([cabin_length/2+container_length/2-5, 0, 2]) container();\n    \n    // Wheels - front axle\n    translate([-truck_length/2+10, 0, wheel_radius]) wheel_assembly();\n    \n    // Wheels - middle axle\n    translate([0, 0, wheel_radius]) wheel_assembly();\n    \n    // Wheels - rear axle\n    translate([truck_length/2-10, 0, wheel_radius]) wheel_assembly();\n    \n    // Headlights\n    translate([-truck_length/2+2, truck_width/2-5, 6]) sphere(r=1.5);\n    translate([-truck_length/2+2, -truck_width/2+5, 6]) sphere(r=1.5);\n}",
    "renders": true
  },
  {
    "vehicle": "camper",
    "openscad_code": "// Realistic 3D printable camper – medium complexity\n// Overall footprint ~70 mm, wall thickness 1.2 mm for FDM\n\n$fn = 36;\n\n// Main hull\nmodule camper_body() {\n    difference() {\n        // Lower box\n        hull() {\n            translate([-15, -20, 0])  cube([80, 40, 30]);\n            translate([-15, -20, 30]) cube([80, 40, 5]);\n        }\n        // Wheel wells\n        translate([5, -23, 5])  rotate([0,90,0]) cylinder(h=8, d=20);\n        translate([5,  23, 5])  rotate([0,90,0]) cylinder(h=8, d=20);\n        translate([55,-23, 5])  rotate([0,90,0]) cylinder(h=8, d=20);\n        translate([55, 23, 5])  rotate([0,90,0]) cylinder(h=8, d=20);\n    }\n}\n\n// Upper shell / living compartment\nmodule roof_shell() {\n    difference() {\n        hull() {\n            translate([-10, -18, 30]) cube([70, 36, 8]);\n            translate([-10, -18, 38]) cube([70, 36, 2]);\n        }\n        // Roof vent\n        translate([25, 0, 38]) cube([20, 16, 5]);\n    }\n}\n\n// Wheels\nmodule wheels() {\n    for (x=[10,50]) for (y=[-23,23])\n        translate([x,y,0])\n            cylinder(h=8, d=18);\n}\n\n// Door\nmodule door() {\n    difference() {\n        translate([0, -21, 5]) cube([15, 2, 25]);\n        translate([2, -21.5, 18]) cube([4, 3, 4]); // window\n    }\n}\n\n// Windows\nmodule windows() {\n    for (pos=[[15,20],[45,20],[45,-20]])\n        translate(pos+[0,0,15])\n            cube([12, 1.5, 10]);\n}\n\n// Front cab\nmodule cab() {\n    difference() {\n        hull() {\n            translate([-20, -20, 5])  cube([10, 40, 25]);\n            translate([-20, -20, 30]) cube([10, 40, 2]);\n        }\n        // Windshield\n        translate([-19, -15, 20]) cube([2, 30, 12]);\n    }\n}\n\n// Hitch\nmodule hitch() {\n    translate([-25, 0, 8])\n        rotate([90,0,0])\n            cylinder(h=12, d=6);\n}\n\n// Combine parts\nunion() {\n    camper_body();\n    roof_shell();\n    cab();\n    wheels();\n    door();\n    windows();\n    hitch();\n}",
    "renders": true
  },
  {
    "vehicle": "rv",
    "openscad_code": "// RV with moderate detail – 3D-printable, no major overhangs\n// Overall length ≈ 85 mm, width ≈ 35 mm, height ≈ 40 mm\n\n// Wall thickness constant for 3D printing\nwall = 2;\n\n// Main body of the RV\nmodule rv_body() {\n    difference() {\n        // Outer shell\n        hull() {\n            translate([0,0,10]) cube([60,30,20], center=true);  // main box\n            translate([25,0,20]) cube([25,28,15], center=true); // cab extension\n        }\n        // Hollow it out\n        translate([0,0,10]) cube([60-wall*2,30-wall*2,20-wall], center=true);\n        translate([25,0,20]) cube([25-wall*2,28-wall*2,14-wall], center=true);\n    }\n}\n\n// Curved front cab roof\nmodule cab_roof() {\n    translate([25,0,28])\n    scale([1,0.9,0.6])\n    sphere(d=28, $fn=40);\n}\n\n// Side windows (left side; mirrored for right)\nmodule side_windows() {\n    for (x = [-15, -5, 5, 15])\n        translate([x, 15.1, 15])\n        cube([8, wall, 6], center=true);\n}\n\n// Windshield\nmodule windshield() {\n    translate([38,0,20])\n    rotate([0,10,0])\n    cube([0.1, 20, 10], center=true);\n}\n\n// Door\nmodule door() {\n    translate([-20,15.1,12])\n    cube([10, wall, 18], center=false);\n    translate([-20,15.1,22])\n    cylinder(h=wall+0.1, r=1, center=true);\n}\n\n// Wheels (simple cylinders)\nmodule wheel() {\n    rotate([90,0,0])\n    cylinder(h=4, d=10, center=true, $fn=32);\n}\n\n// Wheel wells and mounting\nmodule wheels() {\n    positions = [[-20,-15,5], [-20,15,5], [15,-15,5], [15,15,5]];\n    for (p = positions)\n        translate(p) wheel();\n}\n\n// Roof accessories: AC unit and vent\nmodule roof_ac() {\n    translate([5,0,30])\n    cube([15,15,5], center=true);\n    translate([5,0,32.5])\n    cube([16,1,1], center=true);\n}\n\nmodule roof_vent() {\n    translate([-15,0,30])\n    cylinder(h=3, d=10, center=true, $fn=32);\n}\n\n// Under-floor storage boxes\nmodule storage_boxes() {\n    translate([-10,0,2])\n    cube([40, 32, 4], center=true);\n}\n\n// Combine all parts\nunion() {\n    rv_body();\n    cab_roof();\n    side_windows();\n    mirror([0,1,0]) side_windows();\n    windshield();\n    mirror([0,1,0]) windshield();\n    door();\n    wheels();\n    roof_ac();\n    roof_vent();\n    storage_boxes();\n}",
    "renders": true
  },
  {
    "vehicle": "motorhome",
    "openscad_code": "// Motorhome - realistic style, medium complexity\n// 3D printable, ~75mm long\n\n// Wall thickness for 3D printing\nwall = 1.2;\n\n// Main body\nmodule body() {\n    // Lower chassis box\n    difference() {\n        cube([72, 34, 28], center=true);\n        translate([0, 0, 1.5])\n            cube([69.6, 31.6, 27], center=true);\n    }\n    \n    // Upper living area\n    translate([0, 0, 15.5])\n    difference() {\n        cube([70, 32, 20], center=true);\n        translate([0, 0, 1.5])\n            cube([67.6, 29.6, 19], center=true);\n    }\n    \n    // Cab overhang\n    translate([25, 0, 26.5])\n    difference() {\n        cube([22, 30, 8], center=true);\n        translate([0, 0, 1.5])\n            cube([19.6, 27.6, 7], center=true);\n    }\n}\n\n// Windshield\nmodule windshield() {\n    translate([36, 0, 22])\n    rotate([15, 0, 0])\n    difference() {\n        cube([0.8, 28, 12], center=true);\n        translate([0, 0, -1])\n            cube([1, 26, 10], center=true);\n    }\n}\n\n// Side windows\nmodule side_windows() {\n    for(pos = [[-15, 17, 20], [-30, 17, 20]]) {\n        translate(pos)\n        difference() {\n            cube([12, 0.8, 8], center=true);\n            translate([0, 0, -1])\n                cube([10.4, 1, 6.4], center=true);\n        }\n    }\n}\n\n// Wheels\nmodule wheels() {\n    for(side = [-1, 1]) {\n        for(x = [-20, -3, 16]) {\n            translate([x, side * 20, -10])\n            rotate([90, 0, 0])\n            difference() {\n                cylinder(h=6, r=6, center=true);\n                cylinder(h=7, r=2.5, center=true);\n            }\n        }\n    }\n}\n\n// Door\nmodule door() {\n    translate([-35, 17, 15])\n    difference() {\n        cube([12, 0.8, 18], center=true);\n        translate([0, 0, -1])\n            cube([10.4, 1, 16.4], center=true);\n        // Door handle\n        translate([3, 0.5, -5])\n            cube([2, 1, 1]);\n    }\n}\n\n// Roof details\nmodule roof_details() {\n    // AC unit\n    translate([0, 0, 27])\n    cube([8, 8, 3], center=true);\n    \n    // Roof vent\n    translate([-20, 0, 27])\n    cube([6, 6, 1.5], center=true);\n}\n\n// Headlights\nmodule headlights() {\n    for(side = [-1, 1]) {\n        translate([37, side * 10, 18])\n        sphere(r=2);\n    }\n}\n\n// Combine all parts\nunion() {\n    body();\n    windshield();\n    side_windows();\n    wheels();\n    door();\n    roof_details();\n    headlights();\n}",
    "renders": true
  },
  {
    "vehicle": "caravan",
    "openscad_code": "// Caravan - Realistic medium-complexity model\n// Scaled for 3D printing, max dimension ~70 mm\n\n$fn = 32;\n\nmodule wheel(r=6, w=4) {\n    difference() {\n        cylinder(h=w, r=r, center=true);\n        cylinder(h=w+0.2, r=r*0.4, center=true);\n    }\n}\n\nmodule wheelset() {\n    translate([0, 0, 5])\n    for (x=[-22, 22])\n        translate([x, 0, 0])\n        rotate([90, 0, 0])\n        wheel();\n}\n\nmodule body() {\n    hull() {\n        translate([0, 0, 15])\n            cube([45, 25, 30], center=true);\n        translate([0, 0, 40])\n            cube([45, 25, 20], center=true);\n    }\n}\n\nmodule roof() {\n    translate([0, 0, 50])\n    difference() {\n        hull() {\n            translate([0, 0, 5])\n                cube([48, 28, 4], center=true);\n            translate([0, 0, 15])\n                cube([48, 28, 4], center=true);\n        }\n        translate([0, 0, 5])\n            cube([50, 30, 20], center=true);\n    }\n}\n\nmodule door() {\n    translate([22, 0, 15])\n    difference() {\n        cube([2, 10, 20], center=true);\n        translate([0, 0, 8])\n            cylinder(h=2.2, r=1.5, center=true);\n    }\n}\n\nmodule windows() {\n    // front window\n    translate([0, 13, 30])\n    difference() {\n        cube([20, 2, 12], center=true);\n        cube([18, 2.2, 10], center=true);\n    }\n    \n    // side windows\n    for (x=[-15, 15])\n        translate([x, 13, 30])\n        difference() {\n            cube([8, 2, 8], center=true);\n            cube([7, 2.2, 7], center=true);\n        }\n}\n\nmodule chassis() {\n    translate([0, 0, 5])\n    difference() {\n        cube([50, 28, 6], center=true);\n        translate([0, 0, 3])\n            cube([46, 24, 6], center=true);\n    }\n}\n\nmodule towbar() {\n    translate([26, 0, 10])\n    union() {\n        cube([12, 4, 4], center=true);\n        translate([7, 0, 0])\n            cube([2, 2, 2], center=true);\n    }\n}\n\nmodule vents() {\n    // roof vent\n    translate([0, 0, 55])\n    difference() {\n        cube([8, 4, 3], center=true);\n        translate([0, 0, -1])\n            cube([7, 3, 5], center=true);\n    }\n    \n    // side vents\n    for (x=[-20, 20])\n        translate([x, 0, 25])\n        difference() {\n            cube([4, 26, 2], center=true);\n            translate([0, 0, -1])\n                cube([3, 24, 4], center=true);\n        }\n}\n\nmodule caravan() {\n    union() {\n        chassis();\n        body();\n        roof();\n        door();\n        windows();\n        towbar();\n        vents();\n        wheelset();\n    }\n}\n\nscale([1, 1, 1])\ncaravan();",
    "renders": true
  },
  {
    "vehicle": "trailercar",
    "openscad_code": "$fn = 32;\n\n// Overall scale factor\nscale_factor = 1;\n\n// Dimensions (in mm)\ntruck_length = 70 * scale_factor;\ntruck_width = 30 * scale_factor;\ntruck_height = 30 * scale_factor;\ntrailer_length = 80 * scale_factor;\ntrailer_width = 28 * scale_factor;\ntrailer_height = 35 * scale_factor;\nwheel_diameter = 12 * scale_factor;\nwheel_width = 6 * scale_factor;\naxle_diameter = 3 * scale_factor;\n\n// Main trailer car assembly\nmodule trailer_car() {\n    // Truck (front part)\n    translate([0, 0, wheel_diameter/2]) {\n        // Truck cab\n        color(\"red\") {\n            cube([truck_length/2, truck_width, truck_height], center=true);\n        }\n        \n        // Cab roof\n        translate([truck_length/4, 0, truck_height/2 + 2.5]) {\n            color(\"red\") {\n                cube([truck_length/3, truck_width - 4, 5], center=true);\n            }\n        }\n        \n        // Windshield\n        translate([truck_length/4, 0, 2]) {\n            color(\"lightblue\") {\n                cube([truck_length/4 - 2, truck_width - 6, 8], center=true);\n            }\n        }\n        \n        // Headlights\n        for(side = [-1, 1]) {\n            translate([truck_length/2 - 2, side * (truck_width/2 - 3), 0]) {\n                color(\"yellow\") {\n                    sphere(2);\n                }\n            }\n        }\n    }\n    \n    // Trailer\n    translate([truck_length/2 + trailer_length/2, 0, wheel_diameter/2 + 2]) {\n        color(\"silver\") {\n            cube([trailer_length, trailer_width, trailer_height], center=true);\n        }\n        \n        // Trailer sides\n        for(side = [-1, 1]) {\n            translate([0, side * (trailer_width/2 - 1), 0]) {\n                color(\"gray\") {\n                    cube([trailer_length, 2, trailer_height], center=true);\n                }\n            }\n        }\n        \n        // Top rail\n        translate([0, 0, trailer_height/2 + 1]) {\n            color(\"gray\") {\n                cube([trailer_length - 4, trailer_width - 2, 2], center=true);\n            }\n        }\n    }\n    \n    // Wheels\n    wheel_positions = [\n        [-truck_length/2 + 10, -truck_width/2 - wheel_width/2, 0],\n        [-truck_length/2 + 10, truck_width/2 + wheel_width/2, 0],\n        [-truck_length/2 + 5, -truck_width/2 - wheel_width/2, 0],\n        [-truck_length/2 + 5, truck_width/2 + wheel_width/2, 0],\n        [truck_length/2 + trailer_length/2 - 20, -trailer_width/2 - wheel_width/2, 2],\n        [truck_length/2 + trailer_length/2 - 20, trailer_width/2 + wheel_width/2, 2],\n        [truck_length/2 + trailer_length/2 + 10, -trailer_width/2 - wheel_width/2, 2],\n        [truck_length/2 + trailer_length/2 + 10, trailer_width/2 + wheel_width/2, 2]\n    ];\n    \n    for(pos = wheel_positions) {\n        translate(pos) {\n            rotate([0, 90, 0]) {\n                color(\"black\") {\n                    cylinder(h=wheel_width, d=wheel_diameter, center=true);\n                }\n            }\n        }\n    }\n    \n    // Axles\n    axle_positions = [\n        [-truck_length/2 + 10, 0, 0],\n        [-truck_length/2 + 5, 0, 0],\n        [truck_length/2 + trailer_length/2 - 20, 0, 2],\n        [truck_length/2 + trailer_length/2 + 10, 0, 2]\n    ];\n    \n    for(pos = axle_positions) {\n        translate(pos) {\n            rotate([0, 90, 0]) {\n                color(\"gray\") {\n                    cylinder(h=truck_width + wheel_width * 2 + 4, d=axle_diameter, center=true);\n                }\n            }\n        }\n    }\n    \n    // Trailer hitch\n    translate([truck_length/2 - 2, 0, wheel_diameter/2 + 2]) {\n        color(\"gray\") {\n            cube([4, 8, 4], center=true);\n        }\n    }\n    \n    // Exhaust pipe\n    translate([-truck_length/2 + 5, -truck_width/2 - 2, truck_height/2]) {\n        color(\"gray\") {\n            cylinder(h=truck_height/2 + 5, d=2);\n        }\n    }\n    \n    // Fuel tanks\n    translate([-truck_length/2 + 15, -truck_width/2 - 2, wheel_diameter/2]) {\n        rotate([90, 0, 0]) {\n            color(\"silver\") {\n                cylinder(h=15, d=6);\n            }\n        }\n    }\n}\n\n// Generate the trailer car\ntrailer_car();",
    "renders": true
  },
  {
    "vehicle": "offroader",
    "openscad_code": "// Offroader - Realistic style, medium complexity\n// Overall dimensions: ~80mm long, ~40mm wide, ~40mm high\n\n$fn = 32;  // Smooth curves\n\n// Main body\nmodule body() {\n    // Chassis base\n    translate([0, 0, 5]) \n        cube([60, 35, 4], center=true);\n    \n    // Main cabin\n    translate([0, 0, 13])\n        cube([45, 32, 18], center=true);\n    \n    // Hood\n    translate([25, 0, 11])\n        cube([25, 28, 10], center=true);\n    \n    // Roof\n    translate([0, 0, 25])\n        cube([40, 30, 2], center=true);\n    \n    // Front bumper\n    translate([35, 0, 7])\n        cube([10, 28, 6], center=true);\n    \n    // Rear bumper\n    translate([-35, 0, 7])\n        cube([10, 28, 6], center=true);\n}\n\n// Wheels\nmodule wheel() {\n    difference() {\n        // Tire\n        cylinder(h=8, r=10);\n        \n        // Rim\n        cylinder(h=9, r=6);\n        \n        // Rim detail\n        for(i=[0:5]) {\n            rotate([0, 0, i*60])\n                translate([4, 0, 4])\n                    cube([2, 1, 8], center=true);\n        }\n    }\n}\n\n// Wheel assembly with suspension\nmodule wheel_assembly(x, y, z) {\n    translate([x, y, z]) {\n        // Suspension arm\n        rotate([90, 0, 0])\n            cylinder(h=6, r=2);\n        \n        // Wheel\n        rotate([0, 90, 0])\n            wheel();\n    }\n}\n\n// Windows\nmodule windows() {\n    color(\"lightblue\", 0.6) {\n        // Windshield\n        translate([15, 0, 18])\n            rotate([100, 0, 0])\n                cube([20, 28, 0.5], center=true);\n        \n        // Side windows\n        translate([0, 15, 18])\n            cube([40, 0.5, 12], center=true);\n        translate([0, -15, 18])\n            cube([40, 0.5, 12], center=true);\n        \n        // Rear window\n        translate([-15, 0, 18])\n            rotate([80, 0, 0])\n                cube([20, 28, 0.5], center=true);\n    }\n}\n\n// Lights\nmodule lights() {\n    // Headlights\n    translate([38, 10, 11])\n        sphere(r=3);\n    translate([38, -10, 11])\n        sphere(r=3);\n    \n    // Taillights\n    translate([-38, 10, 11])\n        sphere(r=2.5);\n    translate([-38, -10, 11])\n        sphere(r=2.5);\n}\n\n// Spare tire\nmodule spare_tire() {\n    translate([-38, 0, 22])\n        rotate([90, 0, 0])\n            difference() {\n                cylinder(h=6, r=10);\n                cylinder(h=7, r=6);\n            }\n}\n\n// Roll bar\nmodule roll_bar() {\n    translate([0, 0, 28]) {\n        // Main bar\n        rotate([0, 0, 0])\n            cylinder(h=30, r=1.5);\n        \n        // Cross bars\n        translate([10, 0, 0])\n            rotate([90, 0, 0])\n                cylinder(h=30, r=1.5);\n        translate([-10, 0, 0])\n            rotate([90, 0, 0])\n                cylinder(h=30, r=1.5);\n    }\n}\n\n// Exhaust pipe\nmodule exhaust() {\n    translate([-30, 15, 8])\n        rotate([0, 90, 0])\n            cylinder(h=15, r=2);\n}\n\n// Main assembly\nunion() {\n    body();\n    \n    // Wheels (4WD)\n    wheel_assembly(30, 15, 0);\n    wheel_assembly(30, -15, 0);\n    wheel_assembly(-30, 15, 0);\n    wheel_assembly(-30, -15, 0);\n    \n    windows();\n    lights();\n    spare_tire();\n    roll_bar();\n    exhaust();\n}",
    "renders": true
  },
  {
    "vehicle": "4x4",
    "openscad_code": "// Realistic 4x4 Truck - Medium Complexity\n// Designed for 3D printing (no overhangs, 2mm walls)\n\n// Overall dimensions\ntruck_length = 80;\ntruck_width = 40;\ntruck_height = 35;\nwheel_diameter = 16;\nwheel_width = 8;\n\n// Body module\nmodule body() {\n    // Main chassis\n    difference() {\n        cube([truck_length, truck_width, 15], center=true);\n        translate([0, 0, 7]) cube([truck_length-4, truck_width-4, 9], center=true);\n    }\n    \n    // Cab section\n    translate([-25, 0, 7.5]) difference() {\n        cube([30, 35, 20], center=true);\n        translate([0, 0, 10]) cube([26, 31, 16], center=true);\n    }\n    \n    // Hood\n    translate([-38, 0, 7.5]) difference() {\n        cube([16, 28, 12], center=true);\n        translate([0, 0, 6]) cube([12, 24, 8], center=true);\n    }\n    \n    // Bed\n    translate([25, 0, 7.5]) difference() {\n        cube([25, 34, 12], center=true);\n        translate([0, 0, 6]) cube([21, 30, 8], center=true);\n    }\n    \n    // Roof\n    translate([-25, 0, 20]) cube([30, 28, 2], center=true);\n}\n\n// Wheel module\nmodule wheel() {\n    difference() {\n        cylinder(h=wheel_width, d=wheel_diameter, $fn=20);\n        cylinder(h=wheel_width+1, d=wheel_diameter-6, $fn=20);\n    }\n    \n    // Tire tread pattern\n    for (i=[0:3:360]) {\n        rotate([0, 0, i]) translate([wheel_diameter/2-2, -wheel_width/2-0.5, 0]) \n            cube([1, wheel_width+1, 2]);\n    }\n}\n\n// Suspension module\nmodule suspension() {\n    // Front axle\n    translate([-20, 0, -8]) cube([truck_width, 4, 3], center=true);\n    \n    // Rear axle\n    translate([20, 0, -8]) cube([truck_width, 4, 3], center=true);\n    \n    // Shock absorbers\n    translate([-20, 16, -5]) cylinder(h=4, d=2, $fn=8);\n    translate([-20, -16, -5]) cylinder(h=4, d=2, $fn=8);\n    translate([20, 16, -5]) cylinder(h=4, d=2, $fn=8);\n    translate([20, -16, -5]) cylinder(h=4, d=2, $fn=8);\n}\n\n// Front bumper\nmodule front_bumper() {\n    translate([-45, 0, 0]) cube([6, 36, 6], center=true);\n}\n\n// Rear bumper\nmodule rear_bumper() {\n    translate([45, 0, 0]) cube([6, 36, 6], center=true);\n}\n\n// Headlights\nmodule headlights() {\n    translate([-45, 12, 6]) sphere(d=4, $fn=12);\n    translate([-45, -12, 6]) sphere(d=4, $fn=12);\n}\n\n// Taillights\nmodule taillights() {\n    translate([45, 12, 6]) cube([2, 6, 4], center=true);\n    translate([45, -12, 6]) cube([2, 6, 4], center=true);\n}\n\n// Roll bar\nmodule roll_bar() {\n    translate([25, 0, 15]) {\n        // Vertical posts\n        translate([0, 12, 0]) cylinder(h=10, d=2, $fn=8);\n        translate([0, -12, 0]) cylinder(h=10, d=2, $fn=8);\n        \n        // Horizontal bar\n        translate([0, 0, 10]) cube([2, 24, 2], center=true);\n    }\n}\n\n// Main assembly\nunion() {\n    body();\n    \n    // Wheels\n    translate([-20, 20, -8]) rotate([0, 0, 0]) wheel();\n    translate([-20, -20, -8]) rotate([0, 0, 0]) wheel();\n    translate([20, 20, -8]) rotate([0, 0, 0]) wheel();\n    translate([20, -20, -8]) rotate([0, 0, 0]) wheel();\n    \n    suspension();\n    front_bumper();\n    rear_bumper();\n    headlights();\n    taillights();\n    roll_bar();\n}",
    "renders": true
  },
  {
    "vehicle": "awd",
    "openscad_code": "// Realistic style AWD (All-Wheel-Drive) transmission block\n// Medium complexity, 3D-printable, no support needed\n\n// Main parameters\n$fn = 36;\nbody_w = 60;\nbody_h = 35;\nbody_d = 40;\n\n// Front differential housing\nmodule front_diff() {\n    translate([body_w/2 + 8, 0, body_h/2])\n    difference() {\n        // Main housing\n        rotate([0, 90, 0])\n        cylinder(h = 18, d1 = 22, d2 = 22);\n        \n        // Bearing bore\n        rotate([0, 90, 0])\n        translate([0, 0, -1])\n        cylinder(h = 20, d = 12);\n    }\n}\n\n// Rear differential housing\nmodule rear_diff() {\n    translate([-body_w/2 - 8, 0, body_h/2])\n    rotate([0, 90, 0])\n    difference() {\n        cylinder(h = 18, d1 = 22, d2 = 22);\n        translate([0, 0, -1])\n        cylinder(h = 20, d = 12);\n    }\n}\n\n// Central transfer case\nmodule transfer_case() {\n    difference() {\n        union() {\n            // Main block\n            translate([0, 0, body_h/2])\n            cube([body_w, body_d, body_h], center = true);\n            \n            // Sloped top\n            translate([0, 0, body_h])\n            cube([body_w - 10, body_d - 10, 8], center = true);\n        }\n        \n        // Front output shaft hole\n        translate([body_w/2, 0, body_h/2])\n        rotate([0, 90, 0])\n        cylinder(h = 40, d = 10);\n        \n        // Rear output shaft hole\n        translate([-body_w/2, 0, body_h/2])\n        rotate([0, 90, 0])\n        cylinder(h = 40, d = 10);\n        \n        // Bottom mounting holes\n        for(x = [-20, 0, 20])\n            translate([x, 0, 0])\n            cylinder(h = 10, d = 4);\n    }\n}\n\n// Mounting brackets\nmodule mount_bracket(x_pos, y_pos) {\n    translate([x_pos, y_pos, 5])\n    difference() {\n        cube([8, 6, 10], center = true);\n        translate([0, 0, -5.1])\n        cylinder(h = 10.2, d = 3);\n    }\n}\n\n// Cooling fins on transfer case\nmodule cooling_fins() {\n    for(i = [-body_w/2 + 5 : 3 : body_w/2 - 5]) {\n        translate([i, -body_d/2 - 1, body_h - 5])\n        cube([2, 2, 8]);\n    }\n}\n\n// Input flange\nmodule input_flange() {\n    translate([0, body_d/2 + 8, body_h/2])\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h = 6, d = 16);\n        translate([0, 0, -1])\n        cylinder(h = 8, d = 8);\n        \n        // Bolt holes\n        for(a = [0 : 60 : 300]) {\n            rotate([0, 0, a])\n            translate([6, 0, -1])\n            cylinder(h = 8, d = 2);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    transfer_case();\n    front_diff();\n    rear_diff();\n    input_flange();\n    \n    // Mounting brackets\n    for(x = [-20, 20])\n        mount_bracket(x, body_d/2 + 2);\n    \n    cooling_fins();\n}",
    "renders": true
  },
  {
    "vehicle": "fwd",
    "openscad_code": "$fn=64;\n\n// Overall dimensions\nwheelbase = 45;\ntrack = 20;\nbody_width = 20;\nbody_height = 15;\nbody_length = 50;\n\n// Wheel parameters\nwheel_d = 12;\nwheel_w = 6;\ntire_thick = 1.5;\n\n// Clearance\nground_clearance = 8;\n\n// Body shell\nmodule body() {\n    difference() {\n        // Main body\n        translate([0,0,ground_clearance+body_height/2])\n            cube([body_length, body_width, body_height], center=true);\n        \n        // Cabin\n        translate([5,0,ground_clearance+body_height-5])\n            cube([body_length/1.8, body_width-4, 10], center=true);\n        \n        // Windshield slope\n        translate([15,0,ground_clearance+body_height])\n            rotate([0,20,0])\n                cube([body_length/2, body_width-2, 12], center=true);\n    }\n}\n\n// Hood detail\nmodule hood() {\n    translate([body_length/2-10,0,ground_clearance+body_height/2+2])\n        cube([16, body_width-2, 2], center=true);\n}\n\n// Roof\nmodule roof() {\n    translate([5,0,ground_clearance+body_height+5])\n        cube([body_length/2.2, body_width-6, 2], center=true);\n}\n\n// Wheels\nmodule wheel() {\n    difference() {\n        // Tire\n        color(\"black\")\n        cylinder(h=wheel_w, d=wheel_d, center=true);\n        \n        // Rim\n        color(\"silver\")\n        translate([0,0,-wheel_w/2-0.1])\n            cylinder(h=wheel_w+0.2, d=wheel_d-2*tire_thick, center=true);\n    }\n}\n\n// Wheel well\nmodule wheel_well() {\n    translate([0,0,-ground_clearance/2])\n        cube([wheel_d+4, wheel_d+4, ground_clearance+2], center=true);\n}\n\n// Front bumper\nmodule front_bumper() {\n    translate([body_length/2+2, 0, ground_clearance+3])\n        cube([4, body_width, 6], center=true);\n}\n\n// Rear bumper\nmodule rear_bumper() {\n    translate([-body_length/2-2, 0, ground_clearance+3])\n        cube([4, body_width, 6], center=true);\n}\n\n// Side mirrors\nmodule mirrors() {\n    translate([10, body_width/2+1, ground_clearance+body_height-3])\n        cube([2, 1, 1], center=true);\n    translate([10, -body_width/2-1, ground_clearance+body_height-3])\n        cube([2, 1, 1], center=true);\n}\n\n// Headlight\nmodule headlight() {\n    translate([body_length/2+1, body_width/3, ground_clearance+body_height/2])\n        sphere(d=2);\n    translate([body_length/2+1, -body_width/3, ground_clearance+body_height/2])\n        sphere(d=2);\n}\n\n// Taillight\nmodule taillight() {\n    translate([-body_length/2-1, body_width/3, ground_clearance+body_height/2])\n        sphere(d=2);\n    translate([-body_length/2-1, -body_width/3, ground_clearance+body_height/2])\n        sphere(d=2);\n}\n\n// Assemble vehicle\nunion() {\n    body();\n    hood();\n    roof();\n    front_bumper();\n    rear_bumper();\n    mirrors();\n    headlight();\n    taillight();\n    \n    // Wheels\n    translate([wheelbase/2, track/2, wheel_d/2])\n        rotate([90,0,0])\n            wheel();\n    translate([wheelbase/2, -track/2, wheel_d/2])\n        rotate([90,0,0])\n            wheel();\n    translate([-wheelbase/2, track/2, wheel_d/2])\n        rotate([90,0,0])\n            wheel();\n    translate([-wheelbase/2, -track/2, wheel_d/2])\n        rotate([90,0,0])\n            wheel();\n    \n    // Wheel wells\n    translate([wheelbase/2, track/2, 0])\n        wheel_well();\n    translate([wheelbase/2, -track/2, 0])\n        wheel_well();\n    translate([-wheelbase/2, track/2, 0])\n        wheel_well();\n    translate([-wheelbase/2, -track/2, 0])\n        wheel_well();\n}",
    "renders": true
  },
  {
    "vehicle": "rwd",
    "openscad_code": "// Realistic RWD (Rear-Wheel-Drive) differential assembly\n// Medium complexity, 3D-printable design\n\nmodule main_housing() {\n    difference() {\n        // Main cast-aluminum housing\n        rotate([90,0,0])\n            cylinder(h=40, d=60, $fn=60);\n        \n        // Center hollow for ring gear\n        rotate([90,0,0])\n            cylinder(h=45, d=40, $fn=60);\n            \n        // Mounting holes\n        for(i=[0:3]) {\n            rotate([0,0,i*90])\n                translate([25,0,0])\n                    rotate([90,0,0])\n                        cylinder(h=10, d=4, $fn=16);\n        }\n    }\n}\n\nmodule axle_tube(side=1) {\n    translate([side*25,0,0])\n        rotate([0,90,0])\n            difference() {\n                // Tube body\n                cylinder(h=50, d=16, $fn=30);\n                // Hollow center\n                cylinder(h=52, d=8, $fn=30);\n                \n                // Reinforcement ribs\n                for(i=[-1:1]) {\n                    translate([i*15,0,0])\n                        rotate([90,0,0])\n                            cube([2, 20, 12], center=true);\n                }\n            }\n}\n\nmodule pinion_gear() {\n    rotate([90,0,0])\n        union() {\n            // Pinion shaft\n            cylinder(h=35, d=12, $fn=30);\n            \n            // Pinion gear teeth (simplified)\n            for(i=[0:23]) {\n                rotate([0,0,i*15])\n                    translate([0,7,0])\n                        cube([2, 4, 8], center=true);\n            }\n            \n            // Bearing seat\n            translate([0,0,-5])\n                cylinder(h=8, d=15, $fn=30);\n                \n            // Yoke mount\n            translate([0,0,30])\n                cylinder(h=15, d=18, $fn=6);\n        }\n}\n\nmodule cover_plate() {\n    difference() {\n        // Main cover\n        rotate([90,0,0])\n            cylinder(h=4, d=62, $fn=60);\n            \n        // Bolt holes\n        for(i=[0:7]) {\n            rotate([0,0,i*45])\n                translate([27,0,0])\n                    cylinder(h=5, d=5, $fn=16);\n        }\n    }\n}\n\nmodule drain_plug() {\n    translate([30,0,-25])\n        rotate([90,0,0])\n            difference() {\n                cylinder(h=8, d=8, $fn=12);\n                cylinder(h=10, d=5, $fn=12);\n            }\n}\n\nmodule fill_plug() {\n    translate([-30,0,25])\n        rotate([90,0,0])\n            difference() {\n                cylinder(h=8, d=8, $fn=12);\n                cylinder(h=10, d=5, $fn=12);\n            }\n}\n\n// Assembly\nunion() {\n    // Main components\n    main_housing();\n    \n    // Axle tubes\n    axle_tube(1);\n    axle_tube(-1);\n    \n    // Pinion assembly\n    translate([0,0,-30])\n        rotate([0,90,0])\n            pinion_gear();\n    \n    // Cover plate\n    translate([0,0,20])\n        cover_plate();\n        \n    // Drain and fill plugs\n    drain_plug();\n    fill_plug();\n    \n    // Mounting flange\n    translate([0,0,-20])\n        rotate([90,0,0])\n            difference() {\n                cylinder(h=8, d=70, $fn=60);\n                cylinder(h=10, d=50, $fn=60);\n            }\n}",
    "renders": true
  },
  {
    "vehicle": "bev",
    "openscad_code": "// Realistic Beverage Can - OpenSCAD\n// 3D printable with no overhangs, 66mm tall x 33mm diameter\n\n// Main parameters\n$fn=64;\ncan_height = 66;\ncan_diameter = 33;\nwall_thickness = 1.5;\ntop_rim_height = 3;\nbottom_rim_height = 4;\n\nmodule can_body() {\n    difference() {\n        // Outer can\n        cylinder(h=can_height, d=can_diameter);\n        \n        // Hollow inside\n        translate([0, 0, wall_thickness])\n            cylinder(h=can_height-wall_thickness*2, d=can_diameter-wall_thickness*2);\n    }\n}\n\nmodule top_seam() {\n    // Top rim ring\n    translate([0, 0, can_height-top_rim_height])\n        cylinder(h=top_rim_height, d1=can_diameter, d2=can_diameter*0.98);\n}\n\nmodule bottom_seam() {\n    // Bottom rim ring\n    translate([0, 0, 0])\n        cylinder(h=bottom_rim_height, d1=can_diameter*0.98, d2=can_diameter);\n}\n\nmodule pull_tab() {\n    // Pull tab base\n    translate([0, can_diameter/2-2, can_height+0.5])\n        rotate([90, 0, 0])\n            cylinder(h=8, d1=6, d2=3);\n    \n    // Pull tab hole\n    translate([0, can_diameter/2+2, can_height+0.5])\n        rotate([90, 0, 0])\n            cylinder(h=3, d=3);\n    \n    // Tab ring\n    difference() {\n        translate([0, can_diameter/2+2, can_height+0.5])\n            rotate([90, 0, 0])\n                cylinder(h=3, d=5);\n        translate([0, can_diameter/2+2, can_height+0.5])\n            rotate([90, 0, 0])\n                cylinder(h=4, d=2.5);\n    }\n}\n\nmodule top_lid() {\n    // Top lid surface\n    translate([0, 0, can_height-top_rim_height])\n        cylinder(h=0.5, d=can_diameter-wall_thickness);\n    \n    // Score line for opening\n    translate([0, 0, can_height-top_rim_height+0.25])\n        difference() {\n            cylinder(h=0.2, d=can_diameter-wall_thickness-2);\n            translate([can_diameter/4, 0, 0])\n                cube([can_diameter/2, can_diameter, 1], center=true);\n        }\n}\n\n// Build the can\nunion() {\n    can_body();\n    top_seam();\n    bottom_seam();\n    top_lid();\n    pull_tab();\n}",
    "renders": true
  },
  {
    "vehicle": "phev",
    "openscad_code": "$fa = 1;\n$fs = 0.5;\n\nmodule body() {\n    // Main body shell\n    difference() {\n        union() {\n            hull() {\n                translate([-20, -10, 10]) cube([40, 20, 8]);\n                translate([-20, -10, 0]) cube([40, 20, 5]);\n            }\n            translate([-20, -10, 13]) cube([40, 20, 2]);\n        }\n        \n        // Cabin cutout\n        translate([-12, -8, 8]) cube([24, 16, 8]);\n        \n        // Wheel arches\n        for(x = [-15, 15])\n            translate([x, -11, 0]) {\n                rotate([0, 0, 90]) cylinder(h=20, d=10, $fn=32);\n            }\n    }\n}\n\nmodule hood() {\n    // Engine hood slope\n    translate([-20, -10, 10]) rotate([0, 30, 0]) cube([25, 20, 3]);\n}\n\nmodule roof() {\n    // Cabin roof\n    translate([5, -8, 16]) cube([20, 16, 2]);\n}\n\nmodule windows() {\n    // Side windows\n    for(side = [-1, 1]) {\n        translate([5, side*8, 14]) cube([18, 1, 4]);\n    }\n    \n    // Windshield\n    translate([5, -8, 12]) rotate([0, 30, 0]) cube([15, 16, 1.5]);\n    \n    // Rear window\n    translate([22, -8, 12]) rotate([0, -30, 0]) cube([10, 16, 1.5]);\n}\n\nmodule wheels() {\n    // Wheels with tires\n    for(x = [-15, 15])\n        for(y = [-8, 8]) {\n            // Tire\n            color(\"black\") translate([x, y, 0]) cylinder(h=4, d=8, $fn=32);\n            \n            // Rim\n            color(\"silver\") translate([x, y, 1]) cylinder(h=2, d=6, $fn=16);\n        }\n}\n\nmodule grille() {\n    // Front grille with bars\n    translate([-19.5, -7, 5]) cube([1, 14, 5]);\n    \n    for(i = [-6:2:6])\n        translate([-19.2, i, 7]) cube([0.5, 1, 1]);\n}\n\nmodule headlights() {\n    // LED headlights\n    translate([-19.5, -5, 10]) cube([1, 2, 2]);\n    translate([-19.5, 3, 10]) cube([1, 2, 2]);\n}\n\nmodule taillights() {\n    // LED taillights\n    translate([25.5, -5, 10]) cube([1, 2, 2]);\n    translate([25.5, 3, 10]) cube([1, 2, 2]);\n}\n\nmodule charging_port() {\n    // Charging port on front fender\n    translate([-15, 10.5, 8]) cube([3, 1, 3]);\n    translate([-15, 10.6, 9]) cube([2.5, 0.5, 2]);\n}\n\nmodule side_mirrors() {\n    // Side mirrors\n    for(side = [-1, 1]) {\n        translate([0, side*9.5, 15]) cube([2, 1, 1.5]);\n    }\n}\n\nmodule exhaust_pipe() {\n    // Exhaust pipe (realistic for hybrid)\n    translate([23, 7, 2]) cylinder(h=4, d=1, $fn=16);\n    translate([23, 7, 2]) rotate([90, 0, 0]) cylinder(h=2, d=1, $fn=16);\n}\n\nmodule phev() {\n    union() {\n        body();\n        hood();\n        roof();\n        windows();\n        wheels();\n        grille();\n        headlights();\n        taillights();\n        charging_port();\n        side_mirrors();\n        exhaust_pipe();\n    }\n}\n\n// Scale to 80mm length\nscale(80/50) phev();",
    "renders": true
  },
  {
    "vehicle": "hev",
    "openscad_code": "// High-Explosive Anti-Tank (HEAT) warhead – recognizable M72-style HEV\n// Overall size ≈ 70 mm long, 30 mm Ø at body\n\n// Basic parameters\nbody_r = 15; // main tube radius\nbody_l = 50; // main tube length\nnose_l  = 20; // ogive nose length\nfin_span = 25; // fin tip-to-tip\nwall = 1.6; // printable wall thickness\n\nmodule main_body() {\n    difference() {\n        // outer tube\n        cylinder(h = body_l, r = body_r, $fn = 48);\n        // inner bore (hollow for weight & printability)\n        translate([0, 0, -0.1])\n            cylinder(h = body_l + 0.2, r = body_r - wall, $fn = 48);\n    }\n}\n\nmodule ogive_nose() {\n    // approximate tangent-ogive using scaled sphere\n    translate([0, 0, body_l]) {\n        difference() {\n            scale([1, 1, nose_l / body_r])\n                sphere(r = body_r, $fn = 48);\n            // hollow continuation\n            translate([0, 0, -nose_l])\n                cylinder(h = nose_l * 2, r = body_r - wall, $fn = 48);\n        }\n    }\n}\n\nmodule fins() {\n    fin_h = 12;\n    fin_t = 2;\n    // four equally spaced fins\n    for (a = [0:90:270]) {\n        rotate([0, 0, a])\n            translate([body_r - fin_t / 2, 0, body_l - fin_h])\n                cube([fin_t, fin_span / 2 - body_r / 2, fin_h], center = true);\n    }\n}\n\nmodule tail_adapter() {\n    // small bevel at base for printability\n    difference() {\n        cylinder(h = 5, r1 = body_r, r2 = body_r * 0.9, $fn = 48);\n        translate([0, 0, -0.1])\n            cylinder(h = 5.2, r1 = body_r - wall, r2 = body_r * 0.9 - wall, $fn = 48);\n    }\n}\n\nmodule detonator_tip() {\n    // simple point detonator\n    color(\"silver\")\n    translate([0, 0, body_l + nose_l])\n        cylinder(h = 3, r1 = 1, r2 = 0, $fn = 16);\n}\n\n// Assembly\nunion() {\n    main_body();\n    ogive_nose();\n    tail_adapter();\n    fins();\n    detonator_tip();\n}",
    "renders": true
  },
  {
    "vehicle": "ev",
    "openscad_code": "// EV Car - Medium Complexity Realistic Style\n// 3D printable, 1:72 scale, ~70mm long\n\n$fn = 32;\n\n// Main dimensions\nwheelbase = 40;\ntrack = 20;\nlength = 70;\nwidth = 32;\nheight = 20;\n\n// Tire profile\nmodule tire(rim_d = 7, tire_d = 9, width = 4) {\n    difference() {\n        cylinder(d = tire_d, h = width, center = true);\n        cylinder(d = rim_d, h = width + 0.2, center = true);\n    }\n}\n\n// Wheel assembly\nmodule wheel() {\n    union() {\n        // Rim\n        color(\"silver\")\n        cylinder(d = 7, h = 4, center = true);\n        // Tire\n        color(\"black\")\n        translate([0, 0, 0.5])\n        tire();\n    }\n}\n\n// Side mirror\nmodule mirror() {\n    union() {\n        color(\"silver\")\n        cube([3, 1, 2]);\n        translate([1.5, 0.5, 1])\n        sphere(d = 2);\n    }\n}\n\n// Headlight\nmodule headlight() {\n    color(\"white\")\n    cube([4, 1.5, 3]);\n}\n\n// Taillight\nmodule taillight() {\n    color(\"red\")\n    cube([4, 1.5, 3]);\n}\n\n// Charging port\nmodule charge_port() {\n    difference() {\n        translate([-2, -0.5, 0])\n        cube([4, 1, 3]);\n        translate([0, 0, 1.5])\n        cylinder(d = 2, h = 1.2);\n    }\n}\n\n// Car body\nmodule car_body() {\n    union() {\n        // Main chassis\n        color(\"darkblue\")\n        translate([0, 0, height/2])\n        cube([length, width, height], center = true);\n        \n        // Hood slope\n        color(\"darkblue\")\n        translate([length/4, 0, height*0.7])\n        rotate([0, 10, 0])\n        cube([length/2, width*0.9, height*0.6], center = true);\n        \n        // Roof\n        color(\"darkblue\")\n        translate([0, 0, height*1.2])\n        cube([length*0.6, width*0.8, height*0.4], center = true);\n        \n        // Windshield\n        color(\"lightblue\")\n        translate([length*0.15, 0, height*0.9])\n        rotate([0, -30, 0])\n        cube([length*0.3, width*0.7, 0.5], center = true);\n        \n        // Rear window\n        color(\"lightblue\")\n        translate([-length*0.15, 0, height*0.9])\n        rotate([0, 30, 0])\n        cube([length*0.3, width*0.7, 0.5], center = true);\n        \n        // Side windows (left)\n        color(\"lightblue\")\n        for(i = [-1, 1]) {\n            translate([i*length*0.2, width/2, height*0.9])\n            cube([length*0.35, 0.5, height*0.4], center = true);\n        }\n        \n        // Side mirrors\n        translate([length*0.3, width/2 + 1, height*0.8])\n        mirror();\n        translate([length*0.3, -width/2 - 1, height*0.8])\n        mirror();\n        \n        // Headlights\n        translate([length/2 + 1, width/3, height/2])\n        headlight();\n        translate([length/2 + 1, -width/3, height/2])\n        headlight();\n        \n        // Taillights\n        translate([-length/2 - 1, width/3, height/2])\n        taillight();\n        translate([-length/2 - 1, -width/3, height/2])\n        taillight();\n        \n        // Charging port (left rear)\n        translate([-length*0.3, -width/2, height/2])\n        charge_port();\n        \n        // Front grille (EV style)\n        color(\"black\")\n        translate([length/2, 0, height/2])\n        cube([0.5, width*0.6, height*0.3], center = true);\n    }\n}\n\n// Wheels\nmodule wheels() {\n    // Front wheels\n    translate([wheelbase/2, track/2, 3])\n    wheel();\n    translate([wheelbase/2, -track/2, 3])\n    wheel();\n    \n    // Rear wheels\n    translate([-wheelbase/2, track/2, 3])\n    wheel();\n    translate([-wheelbase/2, -track/2, 3])\n    wheel();\n}\n\n// Main assembly\nunion() {\n    car_body();\n    wheels();\n}",
    "renders": true
  },
  {
    "vehicle": "plugin",
    "openscad_code": "// Realistic European Schuko plug (Type E/F) – medium complexity, printable\n// Overall size ≈ 55 × 45 × 38 mm\n\n// Wall thickness for 3D printing\nwall = 1.6;\n\n// Main body\nmodule plug_body() {\n    difference() {\n        union() {\n            // Outer shell\n            cube([55, 45, 35], center=false);\n\n            // Grip ridge on top\n            translate([5, 15, 35])\n                cube([45, 15, 3], center=false);\n        }\n\n        // Hollow it out\n        translate([wall, wall, wall])\n            cube([55 - 2*wall, 45 - 2*wall, 35 - wall], center=false);\n    }\n}\n\n// Earthing clips on sides (Type F)\nmodule earth_clips() {\n    for (y = [wall, 45 - 2*wall]) {\n        translate([0, y, 5])\n            cube([wall*2, 5, 20], center=false);\n    }\n}\n\n// Pin module (common for live/neutral)\nmodule pin() {\n    // 4.8 mm Ø pin, 19 mm exposed length\n    cylinder(d = 4.8, h = 19 + 10, $fn = 20);\n    // Chamfer\n    translate([0, 0, 19 + 10])\n        cylinder(d1 = 4.8, d2 = 3.6, h = 1, $fn = 20);\n}\n\n// Live & Neutral pins (19 mm apart)\nmodule pins_L_N() {\n    translate([27.5 - 19/2, 22.5, 0])\n        pin();\n    translate([27.5 + 19/2, 22.5, 0])\n        pin();\n}\n\n// Cable sleeve\nmodule cable_sleeve() {\n    difference() {\n        // Outer cone\n        translate([55, 22.5, 20])\n            rotate([0, 90, 0])\n                cylinder(h = 30, r1 = 11, r2 = 7, $fn = 20);\n        // Hollow\n        translate([55 + wall, 22.5, 20])\n            rotate([0, 90, 0])\n                cylinder(h = 30, r1 = 8, r2 = 4, $fn = 20);\n    }\n}\n\n// Assembly\nplug_body();\nearth_clips();\npins_L_N();\ncable_sleeve();",
    "renders": true
  },
  {
    "vehicle": "hybrid",
    "openscad_code": "// Hybrid Electric Sedan - Realistic Style, Medium Complexity\n// Approx 80mm long, 32mm wide, 28mm tall\n\n$fn = 32;  // Smooth curves\n\nmodule body_shell() {\n    difference() {\n        // Main body\n        union() {\n            // Hood and cabin\n            hull() {\n                translate([-30, -12, 4]) cube([35, 24, 6]);\n                translate([10, -14, 9]) cube([20, 28, 10]);\n                translate([30, -12, 6]) cube([20, 24, 6]);\n            }\n            \n            // Trunk\n            translate([45, -12, 6]) cube([25, 24, 5]);\n            \n            // Roof\n            translate([10, -13, 18]) cube([40, 26, 4]);\n        }\n        \n        // Cabin windows\n        translate([12, -13.5, 14]) cube([36, 27, 8]);\n        translate([14, -13.4, 15]) cube([32, 26.8, 6]);\n        \n        // Wheel wells\n        translate([-15, -16, 0]) cylinder(h=10, r=8);\n        translate([-15, 16, 0]) cylinder(h=10, r=8);\n        translate([25, -16, 0]) cylinder(h=10, r=8);\n        translate([25, 16, 0]) cylinder(h=10, r=8);\n    }\n}\n\nmodule wheels() {\n    module wheel(pos_x, pos_y) {\n        translate([pos_x, pos_y, 0]) {\n            // Tire\n            color(\"black\") cylinder(h=6, r=8);\n            // Rim\n            color(\"silver\") translate([0, 0, 1]) cylinder(h=4, r=6);\n            // Hub\n            color(\"gray\") translate([0, 0, 2]) cylinder(h=2, r=3);\n        }\n    }\n    \n    // Front wheels\n    wheel(-15, -16);\n    wheel(-15, 16);\n    \n    // Rear wheels\n    wheel(25, -16);\n    wheel(25, 16);\n}\n\nmodule headlights() {\n    // LED headlights\n    translate([-29, -8, 8]) color(\"lightblue\") cube([2, 4, 2]);\n    translate([-29, 4, 8]) color(\"lightblue\") cube([2, 4, 2]);\n    \n    // Fog lights\n    translate([-29, -11, 5]) color(\"orange\") cube([1, 2, 1]);\n    translate([-29, 9, 5]) color(\"orange\") cube([1, 2, 1]);\n}\n\nmodule taillights() {\n    // LED taillights\n    translate([69, -8, 9]) color(\"red\") cube([2, 4, 2]);\n    translate([69, 4, 9]) color(\"red\") cube([2, 4, 2]);\n    \n    // Reverse lights\n    translate([69, -2, 9]) color(\"white\") cube([2, 2, 1]);\n}\n\nmodule grille() {\n    // Upper grille\n    translate([-29, -6, 10]) cube([1, 12, 4]);\n    \n    // Lower grille\n    translate([-29, -8, 6]) cube([1, 16, 2]);\n    \n    // Grille slats\n    for (y = [-5:2:5]) {\n        translate([-29.5, y, 9]) cube([0.5, 1, 2]);\n    }\n}\n\nmodule mirrors() {\n    // Side mirrors\n    translate([5, -15, 15]) cube([3, 2, 3]);\n    translate([5, 13, 15]) cube([3, 2, 3]);\n}\n\nmodule charging_port() {\n    // Charging port door\n    translate([55, -14, 10]) cube([4, 1, 3]);\n}\n\nmodule spoiler() {\n    // Rear spoiler\n    translate([60, -12, 18]) cube([8, 24, 1]);\n    translate([60, -12, 18]) cube([1, 24, 2]);\n}\n\n// Assembly\nunion() {\n    body_shell();\n    wheels();\n    headlights();\n    taillights();\n    grille();\n    mirrors();\n    charging_port();\n    spoiler();\n}",
    "renders": true
  },
  {
    "vehicle": "electric",
    "openscad_code": "// Electric plug (Type-A, USA) – 3D-printable, realistic style, medium complexity\n// Overall height ≈ 60 mm\n\n// Wall thickness everywhere ≥ 1.2 mm to survive printing\n$fn = 60;          // Smooth curves\n\nmodule prong(radius, height) {\n    // Simple cylindrical prong with rounded tip\n    union() {\n        cylinder(r = radius, h = height - radius, center = false);\n        translate([0, 0, height - radius])\n            sphere(r = radius);\n    }\n}\n\nmodule body() {\n    // Main insulating body – rounded cuboid\n    hull() {\n        translate([0, 0, 0]) sphere(r = 6);\n        translate([0, 0, 25]) sphere(r = 6);\n    }\n    // Flattened sides for finger grip\n    difference() {\n        translate([0, 0, 12.5])\n            scale([1, 0.65, 1])\n                cube([32, 32, 25], center = true);\n        translate([0, 0, 12.5])\n            scale([0.92, 0.6, 1.1])\n                cube([32, 32, 25], center = true);\n    }\n}\n\nmodule strain_relief() {\n    // Tapered sleeve that merges into cable\n    for (a = [0:120:359])\n        rotate([0, 0, a])\n            translate([0, 0, 25])\n                rotate([90, 0, 0])\n                    linear_extrude(height = 0.1, scale = 1.0)\n                        offset(delta = -0.5)\n                            circle(r = 6.5, $fn = 6);\n    // Actual sleeve\n    translate([0, 0, 25])\n        cylinder(r1 = 6.5, r2 = 4.5, h = 15);\n}\n\nmodule cable() {\n    // 8 mm flexible cable stub\n    color(\"gray\")\n    translate([0, 0, 40])\n        cylinder(r = 4, h = 20);\n}\n\n// Assembly\nunion() {\n    body();\n    translate([6.35, 0, 0]) prong(radius = 3.2, height = 15.9);\n    translate([-6.35, 0, 0]) prong(radius = 3.2, height = 15.9);\n    strain_relief();\n    cable();\n}",
    "renders": true
  },
  {
    "vehicle": "diesel",
    "openscad_code": "// Realistic medium-complexity diesel engine block with accessories\n// Overall size ~80 mm long, for FDM printing, no supports needed\n\n$fn = 32;  // global resolution\n\nmodule main_block() {\n    difference() {\n        // central cast block\n        cube([60, 30, 35], center = true);\n        // hollow core\n        translate([0, 0, 10])\n            cube([50, 20, 18], center = true);\n    }\n}\n\nmodule cylinder_bank() {\n    // 4 cylinders in a row\n    for (x = [-22, -7, 7, 22])\n        translate([x, 0, 25])\n            cylinder(h = 20, d = 10);\n}\n\nmodule crankcase() {\n    // oil pan under block\n    translate([0, 0, -22])\n        cube([62, 32, 14], center = true);\n}\n\nmodule valve_cover() {\n    // top cover with slight slope\n    translate([0, 0, 42])\n        cube([55, 28, 6], center = true);\n}\n\nmodule exhaust_manifold() {\n    // exhaust pipes on right side\n    for (x = [-22, -7, 7, 22])\n        translate([x, 17, 25])\n            rotate([0, 90, 0])\n                cylinder(h = 10, d = 4);\n    // collector tube\n    translate([0, 22, 25])\n        rotate([0, 90, 0])\n            cylinder(h = 55, d = 6);\n}\n\nmodule intake_manifold() {\n    // intake on left side\n    translate([-30, -16, 30])\n        cube([60, 6, 10], center = false);\n}\n\nmodule turbocharger() {\n    // turbo housing\n    translate([25, 30, 25])\n        difference() {\n            cylinder(h = 18, d = 14);\n            translate([0, 0, 1])\n                cylinder(h = 16, d = 8);\n        }\n    // compressor outlet\n    rotate([90, 0, 0])\n        translate([25, 0, 30])\n            cylinder(h = 10, d = 6);\n}\n\nmodule coolant_inlet() {\n    // water inlet front\n    translate([-35, 0, 15])\n        cube([10, 10, 8], center = false);\n}\n\nmodule mounting_flange() {\n    // rear mounting face\n    translate([35, 0, 0])\n        cube([3, 28, 28], center = false);\n}\n\nmodule oil_filter() {\n    // spin-on filter\n    translate([0, 0, -30])\n        cylinder(h = 12, d = 8);\n}\n\nmodule accessories() {\n    // alternator\n    translate([0, -22, 15])\n        rotate([90, 0, 0])\n            cylinder(h = 10, d = 10);\n}\n\nunion() {\n    main_block();\n    cylinder_bank();\n    crankcase();\n    valve_cover();\n    exhaust_manifold();\n    intake_manifold();\n    turbocharger();\n    coolant_inlet();\n    mounting_flange();\n    oil_filter();\n    accessories();\n}",
    "renders": true
  },
  {
    "vehicle": "gasoline",
    "openscad_code": "// Realistic gasoline canister – medium complexity\n// No overhangs > 45°, 2 mm wall-thickness, ready for FDM printing\n\n$fs = 1;\n$fa = 2;\n\nwall = 2;               // uniform wall thickness (mm)\nd = 45;                 // body width & depth\nh = 100;                // body height\nneck_h = 15;            // screw neck height\nneck_d = 28;            // neck outer diameter\nthread_d = 24;          // thread root diameter\nhandle_clear = 18;      // finger clearance\nhandle_r = 5;           // handle bar radius\n\nmodule canister_body() {\n    difference() {\n        // outer shell\n        rounded_box(d, d, h, 4);\n        // inner void\n        translate([0, 0, wall])\n            rounded_box(d - 2*wall, d - 2*wall, h - wall, 4 - wall);\n    }\n}\n\nmodule rounded_box(w, l, h2, r) {\n    hull() {\n        for(x=[-w/2+r, w/2-r], y=[-l/2+r, l/2-r])\n            translate([x, y, 0])\n                cylinder(r=r, h=h2, $fn=20);\n    }\n}\n\nmodule neck() {\n    difference() {\n        union() {\n            // collar\n            cylinder(h=neck_h, d1=neck_d, d2=neck_d, $fn=32);\n            // screw thread rings\n            for(i=[0:1:3])\n                translate([0, 0, i*2.5])\n                    cylinder(h=1.5, d1=thread_d+2, d2=thread_d+2, $fn=32);\n        }\n        // bore\n        cylinder(h=neck_h+1, d=thread_d-wall, $fn=32);\n    }\n}\n\nmodule handle() {\n    // two side supports\n    for(side=[-1, 1]) {\n        translate([side*(d/2 - wall - 1), 0, h - 15])\n            rotate([0, 90, 0])\n                cylinder(h=10, r=handle_r, $fn=16);\n    }\n    // grip bar\n    translate([0, 0, h - 15])\n        rotate([0, 90, 0])\n            cylinder(h=d - 2*(wall + handle_r + 1), r=handle_r, $fn=16);\n    // clearance cutout under handle\n    translate([0, 0, h - 15 - handle_clear/2])\n        cube([d, handle_clear, handle_clear], center=true);\n}\n\nmodule spout_holder() {\n    // small clip on side for spout storage\n    translate([d/2 + 1, 0, h/2])\n        rotate([0, 90, 0])\n            difference() {\n                cylinder(h=20, r1=5, r2=5, $fn=20);\n                cylinder(h=21, r1=4, r2=4, $fn=20);\n            }\n}\n\n// assembly\nunion() {\n    canister_body();\n    translate([0, 0, h])\n        neck();\n    handle();\n    spout_holder();\n}",
    "renders": true
  },
  {
    "vehicle": "petrol",
    "openscad_code": "// Petrol jerry-can – medium-complexity realistic style\n// All dimensions in mm, ready for FDM printing (no overhangs >45°)\n\n$fn = 36;\n\n// Wall thickness for 3D printing\nwall = 1.6;\n\n// Overall outside dimensions\ncan_w = 34;        // width at widest point\ncan_d = 17;        // depth front-to-back\ncan_h = 48;        // overall height\n\n// Main body\nmodule body() {\n    difference() {\n        // Solid block with rounded sides\n        rounded_box(can_w, can_d, can_h, 4);\n\n        // Hollow interior\n        translate([0, 0, -wall])   // shift down so bottom stays thick\n        rounded_box(can_w - 2*wall, can_d - 2*wall, can_h - wall, 4 - wall);\n    }\n}\n\n// Generic rounded box helper\nmodule rounded_box(w, d, h, r) {\n    hull() {\n        for(x = [-w/2 + r,  w/2 - r])\n        for(y = [-d/2 + r,  d/2 - r])\n            translate([x, y, 0])\n                cylinder(r = r, h = h, center = true);\n    }\n}\n\n// Reinforcing ribs on sides\nmodule ribs() {\n    for(side = [-1, 1]) {\n        translate([side * (can_w/2 + 0.1), 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h = 0.8, r = 2.5);\n        translate([side * (can_w/2 + 0.1), 0, -10])\n            rotate([0, 90, 0])\n                cylinder(h = 0.8, r = 2.5);\n    }\n}\n\n// Top spout\nmodule spout() {\n    union() {\n        // Neck base\n        cylinder(h = 7, r1 = 5.5, r2 = 4.5);\n\n        // Threaded section\n        translate([0, 0, 7])\n            cylinder(h = 8, r = 4.5);\n\n        // Cap\n        translate([0, 0, 16])\n            difference() {\n                cylinder(h = 4, r = 6);\n                translate([0, 0, -1])\n                    cylinder(h = 6, r = 4.6);\n            }\n    }\n}\n\n// Handle\nmodule handle() {\n    difference() {\n        // Outer handle\n        translate([0, 0, 20])\n            rotate([90, 0, 0])\n                cylinder(h = can_w - 6, r = 2.5);\n\n        // Inner clearance\n        translate([0, 0, 20])\n            rotate([90, 0, 0])\n                cylinder(h = can_w - 6, r = 1);\n    }\n}\n\n// Front and back X-shaped indentations\nmodule indent_x() {\n    for(dir = [-1, 1]) {\n        translate([0, dir * (can_d/2 + 0.1), can_h/2 - 10])\n            rotate([90, 0, 0])\n                cube([22, 0.8, 8], center = true);\n        translate([0, dir * (can_d/2 + 0.1), can_h/2 - 10])\n            rotate([0, 0, 45])\n                rotate([90, 0, 0])\n                    cube([22, 0.8, 8], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    translate([0, 0, can_h/2])\n        spout();\n    translate([0, -can_d/2 - 2.5, 20])\n        handle();\n    ribs();\n    indent_x();\n}\n\n// Optional text emboss\ntranslate([0, can_d/2 + wall, can_h/2 - 5])\n    rotate([0, 90, 0])\n        linear_extrude(height = 0.6)\n            text(\"PETROL\", size = 4, halign = \"center\", valign = \"center\");",
    "renders": true
  },
  {
    "vehicle": "ethanol",
    "openscad_code": "// Ethanol molecule (C2H5OH) – realistic ball-and-stick style\n// Overall size ≈ 70 mm, printable in one piece, no overhangs >45°\n// Wall thickness ≥ 1 mm on all parts\n\n// --- parameters --------------------------------------------------------------\natom_r = 6;             // atomic-sphere radius\nbond_r = 2.5;           // bond-cylinder radius\nbond_l = 8;             // stick length between atom centres\nwall = 2;               // extra wall thickness for printability\n\n// --- atomic colour helpers ---------------------------------------------------\nmodule C() color(\"darkslategray\") sphere(atom_r);\nmodule H() color(\"white\") sphere(atom_r-1);                // hydrogen slightly smaller\nmodule O() color(\"firebrick\") sphere(atom_r);\n\n// --- bond unit ---------------------------------------------------------------\nmodule bond(len) {\n    hull() {                     // keeps everything printable without internal voids\n        cylinder(h = len, r = bond_r, center = true);\n        sphere(bond_r);          // spheres at ends to smooth joints\n        translate([0,0,len]) sphere(bond_r);\n    }\n}\n\n// --- CH3 group (methyl) ------------------------------------------------------\nmodule CH3() {\n    union() {\n        C();                     // central carbon\n        // three hydrogens distributed in tetrahedral fashion\n        for(a=[0:120:359])\n            rotate([acos(1/3), a, 0])\n                translate([0,0,bond_l]) {\n                    H();\n                    bond(bond_l);\n                }\n    }\n}\n\n// --- CH2 group ---------------------------------------------------------------\nmodule CH2() {\n    union() {\n        C();\n        // two hydrogens in V-shape\n        rotate([ 30, 0, 0]) translate([0,0,bond_l]) { H(); bond(bond_l); }\n        rotate([-30, 0, 0]) translate([0,0,bond_l]) { H(); bond(bond_l); }\n    }\n}\n\n// --- OH group ---------------------------------------------------------------\nmodule OH() {\n    union() {\n        O();\n        translate([0,0,bond_l]) { H(); bond(bond_l); }\n    }\n}\n\n// --- assemble ethanol --------------------------------------------------------\n// Overall chain: CH3-CH2-O-H\ntranslate([0,0,wall]) {    // lift slightly to avoid bed adhesion issues\n    union() {\n        // CH3\n        CH3();\n        translate([0,0,bond_l]) rotate([0,180,0]) { bond(bond_l); CH2(); }\n        translate([0,0,2*bond_l]) { bond(bond_l); OH(); }\n    }\n}\n\n// Optional flat base for stability\ntranslate([0,0,-wall]) cube([50,50,wall*2], center=true);",
    "renders": true
  },
  {
    "vehicle": "hydrogen",
    "openscad_code": "// OpenSCAD Hydrogen Atom Model (Realistic Style, Medium Complexity)\n// Scale set so diameter ~60 mm\n\natom_radius = 30;            // overall bounding radius in mm\nnucleus_r   = 8;             // proton radius\nelectron_r  = 3.5;           // electron cloud radius\norbits      = 3;             // number of visible orbital rings\nring_thick  = 1.2;           // ring thickness for 3D print\nwall        = 1.8;           // minimum wall thickness\n\nmodule nucleus() {\n    // proton sphere with subtle surface bumps\n    difference() {\n        sphere(nucleus_r);\n        for(i=[0:30])\n            translate([rand_vec(nucleus_r*0.7)])\n                sphere(nucleus_r/8);\n    }\n}\n\nmodule electron_orbitals() {\n    // three tilted rings representing 1s, 2p orbitals\n    for(i=[1:orbits]) {\n        angle = i*120 + 15;\n        rotate([0, angle, 0])\n            rotate([90, 0, 0])\n                torus(electron_r + i*5, ring_thick);\n    }\n}\n\nmodule torus(R, r) {\n    // simple torus primitive\n    rotate_extrude($fn=40)\n        translate([R, 0, 0])\n            circle(r=r, $fn=20);\n}\n\nfunction rand_vec(max) = [rands(-max,max,1)[0],\n                          rands(-max,max,1)[0],\n                          rands(-max,max,1)[0]];\n\n// main assembly\nunion() {\n    // translucent electron cloud shell\n    difference() {\n        sphere(atom_radius);\n        sphere(atom_radius - wall);\n    }\n    \n    // nucleus at center\n    color(\"crimson\")\n        nucleus();\n    \n    // orbital rings\n    color(\"lightblue\", 0.6)\n        electron_orbitals();\n    \n    // tiny electrons on rings\n    for(i=[1:orbits])\n        for(j=[0:3]) {\n            angle = i*120;\n            rot = j*90;\n            rotate([0, angle, rot])\n                translate([electron_r + i*5, 0, 0])\n                    sphere(electron_r/2);\n        }\n}\n\n$fn = 64;",
    "renders": true
  },
  {
    "vehicle": "autonomous",
    "openscad_code": "// Autonomous Delivery Robot - Medium Complexity Realistic Style\n// Size: 80mm long x 50mm wide x 40mm tall\n\n$fn = 32;\n\nmodule wheel(diam=15, width=5) {\n    difference() {\n        cylinder(h=width, d=diam, center=true);\n        cylinder(h=width+1, d=diam-4, center=true);\n    }\n}\n\nmodule sensor() {\n    translate([0, 0, 3])\n        cylinder(h=5, d=8, center=false);\n    translate([0, 0, 7])\n        sphere(d=6);\n}\n\nmodule lidar() {\n    difference() {\n        cylinder(h=5, d=20);\n        translate([0, 0, -1])\n            cylinder(h=7, d=16);\n    }\n    for(i=[0:30:359]) {\n        rotate([0, 0, i])\n            translate([9, 0, 2.5])\n                cube([2, 0.5, 2], center=true);\n    }\n}\n\nmodule cargo_bay() {\n    difference() {\n        translate([0, 0, 5])\n            cube([40, 45, 25], center=true);\n        translate([0, 0, 7])\n            cube([36, 41, 25], center=true);\n    }\n}\n\nmodule body() {\n    // Base chassis\n    translate([0, 0, 5])\n        cube([50, 45, 10], center=true);\n    \n    // Front bumper\n    translate([25, 0, 3])\n        cube([5, 35, 6], center=true);\n    \n    // Rear bumper\n    translate([-25, 0, 3])\n        cube([5, 35, 6], center=true);\n    \n    // Side panels\n    for(side=[-1, 1]) {\n        translate([0, side*22.5, 10])\n            cube([50, 3, 15], center=true);\n    }\n    \n    // Top cover\n    translate([0, 0, 17])\n        cube([42, 40, 2], center=true);\n}\n\n// Main assembly\nunion() {\n    // Main body\n    body();\n    \n    // Cargo bay\n    cargo_bay();\n    \n    // Wheels\n    translate([15, 25, 5])\n        rotate([90, 0, 0])\n            wheel();\n    translate([15, -25, 5])\n        rotate([90, 0, 0])\n            wheel();\n    translate([-15, 25, 5])\n        rotate([90, 0, 0])\n            wheel();\n    translate([-15, -25, 5])\n        rotate([90, 0, 0])\n            wheel();\n    \n    // Lidar tower\n    translate([0, 0, 20])\n        lidar();\n    \n    // Front sensors\n    translate([25, 10, 8])\n        sensor();\n    translate([25, -10, 8])\n        sensor();\n    \n    // Camera housing\n    translate([25, 0, 12])\n        rotate([0, -30, 0])\n            cube([8, 12, 6], center=true);\n    \n    // Antenna\n    translate([-10, 0, 18])\n        cylinder(h=15, d=2);\n    translate([-10, 0, 26])\n        sphere(d=3);\n    \n    // LED strips\n    for(pos=[-20, -10, 0, 10, 20]) {\n        translate([pos, 23, 12])\n            cube([8, 2, 1], center=true);\n        translate([pos, -23, 12])\n            cube([8, 2, 1], center=true);\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "selfdriving",
    "openscad_code": "// Self-Driving Car – Realistic, Medium Complexity\n// Overall size ≈ 85 mm long\n\n$fn = 36;          // Smoother curves\nbody_l = 65;       // Main body length\nbody_w = 30;       // Main body width  \nbody_h = 20;       // Main body height\nroof_h = 12;       // Roof height\nwheel_r = 9;       // Wheel radius\nwheel_w = 5;       // Wheel width\nsensor_d = 3;      // LIDAR puck diameter\nsensor_h = 5;      // LIDAR height\nwall_t = 2;        // Printable wall thickness\n\nmodule car_body() {\n    // Lower chassis with slight taper\n    hull() {\n        translate([0,0,body_h/2])\n            cube([body_l, body_w, body_h], center=true);\n        translate([body_l/2-5, 0, body_h/2+2])\n            cube([10, body_w*0.8, body_h-4], center=true);\n    }\n\n    // Cabin / greenhouse\n    translate([0, 0, body_h + roof_h/2 - 2])\n        cube([body_l*0.8, body_w*0.85, roof_h], center=true);\n}\n\nmodule windows() {\n    color(\"lightblue\")\n    difference() {\n        // Windshield\n        translate([body_l/2-10, 0, body_h + roof_h/2 - 1])\n            cube([20, body_w*0.75, roof_h - 1], center=true);\n        // Cut actual hole\n        translate([body_l/2-10, 0, body_h + roof_h/2 - 1])\n            cube([20 - wall_t, body_w*0.75 - wall_t, roof_h + 1], center=true);\n    }\n}\n\nmodule wheel(steer=0) {\n    rotate([0, 0, steer])\n    rotate([90, 0, 0])\n        difference() {\n            cylinder(h=wheel_w, r=wheel_r, center=true);   // Tire\n            // Rim hole\n            cylinder(h=wheel_w+1, r=wheel_r-3, center=true);\n        }\n}\n\nmodule wheels() {\n    // Front wheels\n    translate([ body_l/2-10,  body_w/2+wheel_w/2, wheel_r])\n        wheel();\n    translate([ body_l/2-10, -body_w/2-wheel_w/2, wheel_r])\n        wheel();\n    // Rear wheels\n    translate([-body_l/2+10,  body_w/2+wheel_w/2, wheel_r])\n        wheel();\n    translate([-body_l/2+10, -body_w/2-wheel_w/2, wheel_r])\n        wheel();\n}\n\nmodule lidar() {\n    translate([0, 0, body_h+roof_h+sensor_h/2])\n    union() {\n        cylinder(h=sensor_h, d=sensor_d, center=true);     // Main puck\n        // Rotating head\n        translate([0, 0, sensor_h/2])\n            cylinder(h=1.5, d=sensor_d+1, center=true);\n    }\n}\n\nmodule bumper() {\n    // Front bumper\n    translate([body_l/2+2, 0, 4])\n        cube([4, body_w, 8], center=true);\n    // Rear bumper\n    translate([-body_l/2-2, 0, 4])\n        cube([4, body_w, 8], center=true);\n}\n\nmodule headlights() {\n    // Left headlight\n    translate([body_l/2,  body_w/2-5, 6])\n        sphere(d=4);\n    // Right headlight\n    translate([body_l/2, -body_w/2+5, 6])\n        sphere(d=4);\n}\n\n// Assembly\nunion() {\n    car_body();\n    windows();\n    wheels();\n    lidar();\n    bumper();\n    headlights();\n}",
    "renders": true
  },
  {
    "vehicle": "connected",
    "openscad_code": "// Realistic medium-complexity LEGO-compatible 2x4 brick\n// Overall footprint 32 mm × 24 mm, height 11.2 mm (3.2 mm plate + 8 mm studs)\n\n$fn = 32; // smooth curves for 3D printing\n\n// ---------- Parameters ----------\nplate_h = 3.2;    // standard plate height\nstud_h  = 1.6;    // exposed stud height above plate\nstud_d  = 4.8;    // stud outer diameter\nstud_wall = 1.0;  // wall thickness around stud\ntube_d  = 6.5;    // inner tube diameter\ntube_wall =1.2;   // tube wall thickness  \nbrick_w  = 8;     // width in studs\nbrick_l  = 4;     // length in studs\nstud_pitch = 8;   // 8 mm between stud centers\n\n// ---------- Helper module for studs ----------\nmodule stud() {\n    difference() {\n        // outer cylinder\n        cylinder(h = stud_h + plate_h, d = stud_d);\n        // hollow top\n        translate([0, 0, plate_h + 0.01])\n            cylinder(h = stud_h - 0.02, d = stud_d - 2*stud_wall);\n    }\n}\n\n// ---------- Helper module for inner tube ----------\nmodule inner_tube() {\n    cylinder(h = plate_h - 0.1, d = tube_d, center = false);\n}\n\n// ---------- Main brick body ----------\nmodule brick_2x4() {\n    union() {\n        // outer box\n        cube([brick_w*stud_pitch, brick_l*stud_pitch, plate_h]);\n\n        // studs on top\n        for (x = [1 : brick_w-1])\n            for (y = [1 : brick_l-1])\n                translate([x*stud_pitch, y*stud_pitch, plate_h])\n                    stud();\n\n        // inner tubes / anti-studs\n        for (x = [1 : brick_w-1])\n            for (y = [1 : brick_l-1])\n                translate([x*stud_pitch, y*stud_pitch, -0.01])\n                    inner_tube();\n\n        // side reinforcement ridges\n        difference() {\n            // outer shell\n            cube([brick_w*stud_pitch, brick_l*stud_pitch, plate_h]);\n            // hollow inside\n            translate([tube_wall, tube_wall, tube_wall])\n                cube([(brick_w-2)*stud_pitch - 2*tube_wall,\n                      (brick_l-2)*stud_pitch - 2*tube_wall,\n                      plate_h - 2*tube_wall]);\n        }\n    }\n}\n\n// ---------- Render ----------\nbrick_2x4();",
    "renders": true
  },
  {
    "vehicle": "smart",
    "openscad_code": "$fn=30;\n\n// Smart car dimensions in mm\nlength = 90;\nwidth = 45;\nheight = 45;\nwheel_r = 11;\nwheel_w = 6;\n\n// Main body module\nmodule body() {\n    // Lower chassis\n    difference() {\n        translate([0, 0, wheel_r+3])\n            cube([length-5, width-10, 15], center=true);\n        // Wheel wells\n        for(x=[-1, 1])\n            for(y=[-1, 1])\n                translate([x*length/3, y*width/2.5, wheel_r+3])\n                    rotate([0, 0, 45])\n                        cube([wheel_w+3, wheel_r+5, 20], center=true);\n    }\n    \n    // Upper passenger compartment\n    difference() {\n        hull() {\n            translate([length/6, 0, wheel_r+18])\n                cube([length/1.8, width-8, height-15], center=true);\n            translate([-length/4, 0, wheel_r+18])\n                cube([length/3, width-12, height-15], center=true);\n        }\n        // Windows\n        translate([0, 0, wheel_r+25])\n            cube([length/2+5, width-6, height-10], center=true);\n    }\n    \n    // Front bumper\n    translate([length/2-2, 0, wheel_r+3])\n        cube([8, width-8, 12], center=true);\n    \n    // Rear bumper\n    translate([-length/2+2, 0, wheel_r+3])\n        cube([8, width-8, 12], center=true);\n    \n    // Side mirrors\n    for(side=[-1, 1])\n        translate([length/4, side*width/2, wheel_r+20])\n            rotate([0, 30, 0])\n                cube([5, 3, 5]);\n}\n\n// Wheel module\nmodule wheel() {\n    difference() {\n        cylinder(h=wheel_w, r=wheel_r, center=true);\n        translate([0, 0, -wheel_w/2-1])\n            cylinder(h=wheel_w+2, r=wheel_r-3, center=true);\n    }\n    // Tire tread pattern\n    for(i=[0:5:359]) {\n        rotate([0, 0, i])\n            translate([wheel_r-1, 0, -wheel_w/2-0.1])\n                cube([2, 1, wheel_w+0.2]);\n    }\n}\n\n// Headlight module\nmodule headlight(x_pos, y_pos) {\n    translate([x_pos, y_pos, wheel_r+10])\n        rotate([0, 90, 0])\n            cylinder(h=3, r1=4, r2=3);\n}\n\n// Assembly\nmodule smart_car() {\n    // Main body\n    body();\n    \n    // Wheels\n    for(x=[-1, 1])\n        for(y=[-1, 1])\n            translate([x*length/3, y*width/2.5, wheel_r])\n                rotate([90, 0, 0])\n                    wheel();\n    \n    // Headlights\n    headlight(length/2-1, width/4);\n    headlight(length/2-1, -width/4);\n    \n    // Taillights\n    translate([-length/2+1, width/4, wheel_r+10])\n        cube([3, 5, 4]);\n    translate([-length/2+1, -width/4, wheel_r+10])\n        cube([3, 5, 4]);\n    \n    // Door handles\n    translate([0, width/2-2, wheel_r+15])\n        cube([8, 2, 1]);\n    translate([0, -width/2+2, wheel_r+15])\n        cube([8, 2, 1]);\n    \n    // Roof antenna\n    translate([-length/4, 0, wheel_r+height])\n        cylinder(h=8, r=0.8);\n}\n\n// Render the car\nsmart_car();",
    "renders": true
  },
  {
    "vehicle": "digital",
    "openscad_code": "// Digital clock with realistic styling\n// 7-segment display with separate segments and housing\n\n// Overall scale factor\nscale_factor = 0.8;\nbase_width = 80 * scale_factor;\nbase_depth = 30 * scale_factor;\nbase_height = 15 * scale_factor;\n\n// Display parameters\ndisplay_width = 65 * scale_factor;\ndisplay_depth = 25 * scale_factor;\ndisplay_height = 8 * scale_factor;\nsegment_width = 6 * scale_factor;\nsegment_length = 12 * scale_factor;\nsegment_thickness = 2 * scale_factor;\nsegment_spacing = 2 * scale_factor;\n\n// Button parameters\nbutton_radius = 3 * scale_factor;\nbutton_height = 4 * scale_factor;\n\n// Wall thickness for 3D printing\nwall_thickness = 1.5 * scale_factor;\n\n// Base housing with hollow cavity\nmodule base() {\n    difference() {\n        // Outer shell\n        cube([base_width, base_depth, base_height], center=true);\n        \n        // Hollow interior\n        translate([0, 0, -wall_thickness/2])\n            cube([base_width - 2*wall_thickness, \n                  base_depth - 2*wall_thickness, \n                  base_height + 1], center=true);\n        \n        // Cable slot at back\n        translate([0, base_depth/2 - wall_thickness, -base_height/4])\n            cube([15 * scale_factor, wall_thickness + 1, 8 * scale_factor], center=true);\n    }\n}\n\n// Display window\nmodule display_frame() {\n    difference() {\n        // Frame\n        translate([0, 0, base_height/2 + display_height/2])\n            cube([display_width + 4*wall_thickness, \n                  display_depth + 4*wall_thickness, \n                  display_height], center=true);\n        \n        // Window opening\n        translate([0, 0, -1])\n            cube([display_width, display_depth, display_height + 2], center=true);\n    }\n}\n\n// Individual 7-segment digit\nmodule digit(x_pos) {\n    translate([x_pos, 0, base_height/2 + display_height/2]) {\n        // Top segment (a)\n        translate([0, display_depth/2 - segment_spacing - segment_width/2, 0])\n            cube([segment_length, segment_width, segment_thickness], center=true);\n        \n        // Upper right segment (b)\n        translate([segment_length/2 + segment_spacing, \n                  display_depth/2 - segment_spacing - segment_length/2 - segment_width, 0])\n            rotate([0, 0, 90])\n            cube([segment_length, segment_width, segment_thickness], center=true);\n        \n        // Lower right segment (c)\n        translate([segment_length/2 + segment_spacing, \n                  -display_depth/2 + segment_spacing + segment_length/2 + segment_width, 0])\n            rotate([0, 0, 90])\n            cube([segment_length, segment_width, segment_thickness], center=true);\n        \n        // Bottom segment (d)\n        translate([0, -display_depth/2 + segment_spacing + segment_width/2, 0])\n            cube([segment_length, segment_width, segment_thickness], center=true);\n        \n        // Lower left segment (e)\n        translate([-segment_length/2 - segment_spacing, \n                  -display_depth/2 + segment_spacing + segment_length/2 + segment_width, 0])\n            rotate([0, 0, 90])\n            cube([segment_length, segment_width, segment_thickness], center=true);\n        \n        // Upper left segment (f)\n        translate([-segment_length/2 - segment_spacing, \n                  display_depth/2 - segment_spacing - segment_length/2 - segment_width, 0])\n            rotate([0, 0, 90])\n            cube([segment_length, segment_width, segment_thickness], center=true);\n        \n        // Middle segment (g)\n        translate([0, 0, 0])\n            cube([segment_length, segment_width, segment_thickness], center=true);\n    }\n}\n\n// Control buttons\nmodule buttons() {\n    // Hour button\n    translate([base_width/3, base_depth/2 + button_height/2, base_height/4])\n        cylinder(h=button_height, r=button_radius, center=true);\n    \n    // Minute button\n    translate([base_width/6, base_depth/2 + button_height/2, base_height/4])\n        cylinder(h=button_height, r=button_radius, center=true);\n    \n    // Set button\n    translate([-base_width/4, base_depth/2 + button_height/2, base_height/4])\n        cylinder(h=button_height, r=button_radius, center=true);\n}\n\n// Anti-slip feet\nmodule feet() {\n    foot_radius = 4 * scale_factor;\n    foot_height = 2 * scale_factor;\n    \n    for(x = [-base_width/3, base_width/3])\n        for(y = [-base_depth/3, base_depth/3])\n            translate([x, y, -base_height/2 - foot_height/2])\n                cylinder(h=foot_height, r=foot_radius, center=true);\n}\n\n// Assembly\nunion() {\n    color(\"gray20\") base();\n    color(\"gray40\") display_frame();\n    \n    // Display digits showing 12:34\n    color(\"red\") {\n        digit(-display_width/4);\n        digit(-display_width/12);\n        digit(display_width/12);\n        digit(display_width/4);\n    }\n    \n    color(\"gray60\") buttons();\n    color(\"black\") feet();\n}",
    "renders": true
  },
  {
    "vehicle": "telematic",
    "openscad_code": "// Telematic unit (GPS tracker) in realistic style\n// Overall dimensions: 80 x 50 x 20 mm\n\n// Wall thickness for 3D printing\nwall = 1.5;\n\n// Main enclosure body\nmodule enclosure() {\n    difference() {\n        // Outer shell\n        union() {\n            // Main body with rounded edges\n            minkowski() {\n                cube([80, 50, 20], center=true);\n                sphere(3);\n            }\n            \n            // Mounting flanges on sides\n            translate([-40, -25, -10]) cube([5, 8, 4]);\n            translate([35, -25, -10]) cube([5, 8, 4]);\n            translate([-40, 17, -10]) cube([5, 8, 4]);\n            translate([35, 17, -10]) cube([5, 8, 4]);\n        }\n        \n        // Hollow interior\n        minkowski() {\n            cube([80-2*wall, 50-2*wall, 20-2*wall], center=true);\n            sphere(2);\n        }\n        \n        // Cable entry holes\n        translate([-42, -10, 0]) rotate([0, 90, 0]) cylinder(h=5, r=4);\n        translate([-42, 10, 0]) rotate([0, 90, 0]) cylinder(h=5, r=4);\n        \n        // Mounting holes in flanges\n        translate([-42.5, -21, -8]) cylinder(h=5, r=2);\n        translate([-42.5, 21, -8]) cylinder(h=5, r=2);\n        translate([42.5, -21, -8]) cylinder(h=5, r=2);\n        translate([42.5, 21, -8]) cylinder(h=5, r=2);\n    }\n}\n\n// LED indicators\nmodule leds() {\n    // Power LED (green)\n    translate([-20, -20, 11]) {\n        cylinder(h=2, r=3);\n        translate([0, 0, 2]) cylinder(h=1, r=3.5);\n    }\n    \n    // GPS LED (blue)\n    translate([0, -20, 11]) {\n        cylinder(h=2, r=3);\n        translate([0, 0, 2]) cylinder(h=1, r=3.5);\n    }\n    \n    // Status LED (red)\n    translate([20, -20, 11]) {\n        cylinder(h=2, r=3);\n        translate([0, 0, 2]) cylinder(h=1, r=3.5);\n    }\n}\n\n// Antenna connector\nmodule antenna() {\n    translate([35, 0, 11]) {\n        // SMA connector base\n        cylinder(h=5, r=6);\n        // Center pin\n        cylinder(h=5.5, r=1);\n        // Threaded part\n        translate([0, 0, 5]) cylinder(h=6, r=4);\n    }\n}\n\n// PCB standoffs inside\nmodule standoffs() {\n    standoff_positions = [[-30, -20], [30, -20], [-30, 20], [30, 20]];\n    \n    for(pos = standoff_positions) {\n        translate([pos[0], pos[1], -10 + wall]) {\n            cylinder(h=8, r=3);\n            translate([0, 0, 8]) cylinder(h=1, r=5);\n            // Screw hole\n            translate([0, 0, -1]) cylinder(h=10, r=1.5);\n        }\n    }\n}\n\n// SIM card slot\nmodule sim_slot() {\n    translate([25, 15, -11]) {\n        // Slot opening\n        cube([15, 2, 1.5]);\n        // Ejector hole\n        translate([2, -1, 0]) cylinder(h=2, r=0.8);\n    }\n}\n\n// Ventilation slots\nmodule vents() {\n    for(i = [-2:2]) {\n        translate([i * 15, 25, 0]) {\n            rotate([90, 0, 0]) {\n                cube([8, 1.5, 2], center=true);\n            }\n        }\n    }\n}\n\n// Assemble the complete telematic unit\nunion() {\n    enclosure();\n    leds();\n    antenna();\n    standoffs();\n    sim_slot();\n    vents();\n}",
    "renders": true
  },
  {
    "vehicle": "aerodynamic",
    "openscad_code": "// Aerodynamic NACA 2412 Airfoil Wing Section\n// Medium complexity, realistic style\n// 3D printable with 2mm walls and no overhangs\n\n$fn = 50;\n\n// Wing parameters\nspan = 80;           // Total wingspan in mm\nroot_chord = 40;     // Root chord length in mm\ntip_chord = 25;      // Tip chord length in mm\nmax_thickness = 4;   // Max thickness at 30% chord\nwall_thickness = 2;  // 3D printable wall thickness\ndihedral = 5;        // Dihedral angle in degrees\nsweep = 10;          // Sweep angle in degrees\n\n// NACA 2412 airfoil coordinates (scaled)\nfunction naca2412(x) = \n    0.12 * (0.2969 * sqrt(x) - 0.1260 * x - 0.3516 * pow(x,2) + 0.2843 * pow(x,3) - 0.1015 * pow(x,4));\n\n// Generate wing section profile\nmodule wing_profile(chord, thickness, solid=false) {\n    offset = solid ? 0 : wall_thickness;\n    \n    // Upper surface\n    difference() {\n        union() {\n            for (i = [0:1:20]) {\n                x = i / 20;\n                y = naca2412(x) * thickness;\n                translate([x * chord, 0, y])\n                    cube([chord/20, chord/2, 0.1], center=true);\n            }\n        }\n        \n        // Hollow out if not solid\n        if (!solid) {\n            scale([(chord-2*offset)/chord, (chord/2-2*offset)/(chord/2), (thickness-2*offset)/thickness])\n                wing_profile(chord, thickness, true);\n        }\n    }\n    \n    // Lower surface\n    mirror([0, 0, 1]) {\n        difference() {\n            union() {\n                for (i = [0:1:20]) {\n                    x = i / 20;\n                    y = naca2412(x) * thickness;\n                    translate([x * chord, 0, y])\n                        cube([chord/20, chord/2, 0.1], center=true);\n                }\n            }\n            \n            if (!solid) {\n                scale([(chord-2*offset)/chord, (chord/2-2*offset)/(chord/2), (thickness-2*offset)/thickness])\n                    wing_profile(chord, thickness, true);\n            }\n        }\n    }\n    \n    // Leading edge cap\n    if (!solid) {\n        translate([0, 0, 0])\n            cylinder(h=chord/2, r=wall_thickness, center=true);\n    }\n}\n\n// Generate full wing with taper and dihedral\nmodule full_wing() {\n    slices = 10;\n    \n    for (i = [0:1:slices]) {\n        y = i * span / 2 / slices;\n        chord = root_chord - (root_chord - tip_chord) * (y / (span/2));\n        thickness = max_thickness * (1 - 0.5 * (y / (span/2)));\n        \n        // Calculate dihedral and sweep\n        z_dihedral = y * sin(dihedral);\n        x_sweep = y * sin(sweep);\n        \n        // Left wing\n        translate([x_sweep, -y, z_dihedral])\n            rotate([0, -90, 0])\n                wing_profile(chord, thickness);\n        \n        // Right wing\n        translate([x_sweep, y, z_dihedral])\n            rotate([0, -90, 0])\n                wing_profile(chord, thickness);\n    }\n}\n\n// Wing tips\nmodule wing_tips() {\n    // Left tip\n    translate([-sin(sweep) * span/2 - tip_chord, -span/2, sin(dihedral) * span/2])\n        rotate([0, 90, 0])\n            cylinder(h=tip_chord, r=max_thickness, center=true);\n    \n    // Right tip\n    translate([-sin(sweep) * span/2 - tip_chord, span/2, sin(dihedral) * span/2])\n        rotate([0, 90, 0])\n            cylinder(h=tip_chord, r=max_thickness, center=true);\n}\n\n// Main assembly\nunion() {\n    // Central hub\n    difference() {\n        cylinder(h=wall_thickness*2, r=root_chord/4, center=true);\n        cylinder(h=wall_thickness*2+1, r=root_chord/4-wall_thickness, center=true);\n    }\n    \n    // Wings\n    full_wing();\n    \n    // Wing tips for smooth finish\n    wing_tips();\n}",
    "renders": true
  },
  {
    "vehicle": "streamlined",
    "openscad_code": "// Streamlined Jet Engine Nacelle\n// Medium-complexity, 3D-printable model ~75 mm long\n// No overhangs >45°, 1.2 mm wall thickness\n\n$fn = 50;  // Smooth curves\n\nmodule blade_profile(r = 1, h = 1) {\n    // Simple low-twist blade cross-section\n    rotate([0, 0, 5])\n    difference() {\n        scale([1, 0.18, 1]) circle(r);\n        translate([0, 0.1, 0]) scale([0.4, 0.05, 1]) circle(r);\n    }\n}\n\nmodule fan_blade(h = 12, root_r = 9) {\n    // Single fan blade, tapered & twisted\n    for(i = [0: h/2]) {\n        translate([0, 0, i])\n        linear_extrude(height = 0.5, twist = -i*2)\n        scale([1 - i*0.04, 1 - i*0.04, 1])\n        blade_profile(root_r);\n    }\n}\n\nmodule spinner() {\n    // Nose cone with slight ogive\n    difference() {\n        rotate_extrude()\n        translate([5, 0, 0])\n        circle(r = 12);\n        // Hollow cavity\n        translate([0, 0, -1])\n        rotate_extrude()\n        translate([5.5, 0, 0])\n        circle(r = 10.5);\n    }\n}\n\nmodule intake_lip() {\n    // Thick rounded intake lip\n    difference() {\n        rotate_extrude()\n        translate([10, 0, 0])\n        circle(r = 15);\n        rotate_extrude()\n        translate([11.5, 0, 0])\n        circle(r = 13.5);\n    }\n}\n\nmodule cowl(t = 75) {\n    // Main nacelle body\n    difference() {\n        hull() {\n            translate([0, 0, 0]) cylinder(r1 = 15, r2 = 15, h = 25);\n            translate([0, 0, t - 15]) cylinder(r1 = 12, r2 = 11, h = 15);\n        }\n        // Internal cavity\n        hull() {\n            translate([0, 0, -1]) cylinder(r1 = 13.8, r2 = 13.8, h = 27);\n            translate([0, 0, t - 14]) cylinder(r1 = 10.8, r2 = 9.8, h = 15);\n        }\n    }\n}\n\nmodule exhaust() {\n    // Simple conical exhaust\n    difference() {\n        cylinder(r1 = 11, r2 = 9, h = 10);\n        translate([0, 0, -1]) cylinder(r1 = 9.8, r2 = 7.8, h = 12);\n    }\n}\n\nmodule pylon() {\n    // Mounting pylon with taper\n    hull() {\n        translate([0, 15, 30]) cube([20, 3, 5], center = true);\n        translate([0, 15, 60]) cube([15, 2, 4], center = true);\n    }\n}\n\nmodule fan_assembly() {\n    // 11 blades attached to spinner\n    union() {\n        spinner();\n        for(i = [0:10]) {\n            rotate([0, 0, i*360/11])\n            translate([0, 0, 3])\n            fan_blade();\n        }\n    }\n}\n\n// Main assembly\ntranslate([0, 0, 0]) {\n    // Core nacelle\n    union() {\n        intake_lip();\n        cowl();\n        translate([0, 0, 75]) exhaust();\n        translate([0, -15, 0]) pylon();\n    }\n    \n    // Internal fan placed slightly inside intake\n    translate([0, 0, 5]) fan_assembly();\n}",
    "renders": true
  },
  {
    "vehicle": "lightweight",
    "openscad_code": "// Lightweight Racing Rowing Shell\n// Approx 1:50 scale, 130 mm long\n// All dimensions in mm\n\n$fn = 36;\n\nmodule shell_hull() {\n    // Main hull – single sweep\n    hull() {\n        // Bow\n        translate([-65, 0, 0]) sphere([10, 6, 5]);\n        // Mid\n        translate([-25, 0, -3]) sphere([12, 7, 6]);\n        translate([ 25, 0, -3]) sphere([12, 7, 6]);\n        // Stern\n        translate([ 65, 0, 0]) sphere([9, 5, 4]);\n    }\n}\n\nmodule deck() {\n    difference() {\n        hull() {\n            translate([-65, 0, 5]) sphere([10, 6, 2]);\n            translate([ 65, 0, 5]) sphere([9, 5, 2]);\n            translate([-25, 0, 5]) sphere([12, 7, 2]);\n            translate([ 25, 0, 5]) sphere([12, 7, 2]);\n        }\n        // Cockpit opening\n        translate([0, 0, 4.5]) cube([90, 12, 3], center=true);\n    }\n}\n\nmodule seat_track() {\n    // Rails under seat\n    for (y = [-2, 2])\n        translate([-20, y, 2]) cube([40, 1, 1]);\n}\n\nmodule seat() {\n    difference() {\n        // Seat top\n        translate([0, 0, 3]) cube([12, 8, 1], center=true);\n        // Lightening holes\n        for (x = [-4, 4])\n            translate([x, 0, 3.5]) cylinder(h=2, r=1.5, $fn=16);\n    }\n    // Seat sides\n    translate([0, 4, 2.5]) cube([12, 1, 1], center=true);\n    translate([0, -4, 2.5]) cube([12, 1, 1], center=true);\n}\n\nmodule oarlock_pin() {\n    // Pin tower\n    difference() {\n        cylinder(h=8, r=3);\n        translate([0, 0, -1]) cylinder(h=10, r=1.5);\n    }\n    // Top washer\n    translate([0, 0, 8]) cylinder(h=1, r=4);\n}\n\nmodule riggers() {\n    // Starboard rigger\n    translate([-15, 10, 6]) rotate([0, 90, 0]) {\n        difference() {\n            cylinder(h=20, r=2);\n            translate([0, 0, 9]) cube([20, 4, 4], center=true);\n        }\n        oarlock_pin();\n    }\n    // Port rigger\n    translate([-15, -10, 6]) mirror([0, 1, 0]) rotate([0, 90, 0]) {\n        difference() {\n            cylinder(h=20, r=2);\n            translate([0, 0, 9]) cube([20, 4, 4], center=true);\n        }\n        oarlock_pin();\n    }\n}\n\nmodule skeg() {\n    // Small fin under stern\n    translate([55, 0, -5]) cube([12, 1.5, 5]);\n}\n\n// Assembly\nunion() {\n    shell_hull();\n    deck();\n    seat_track();\n    seat();\n    riggers();\n    skeg();\n}",
    "renders": true
  },
  {
    "vehicle": "compactvan",
    "openscad_code": "// Compact Van - Realistic Style, Medium Complexity\n// Designed for 3D printing with no overhangs and 1mm wall thickness\n\n// Dimensions (mm)\nvan_length = 90;\nvan_width = 40;\nvan_height = 35;\nwheel_diameter = 15;\nwheel_width = 6;\n\n// Main body module\nmodule van_body() {\n    // Lower chassis with rounded edges\n    hull() {\n        translate([0, 0, wheel_diameter/2]) \n            cube([van_length, van_width, van_height/2], center=true);\n        translate([0, 0, wheel_diameter/2 + 2]) \n            cube([van_length-4, van_width-4, van_height/2 - 4], center=true);\n    }\n    \n    // Upper cabin\n    translate([van_length/6, 0, van_height/2 + wheel_diameter/2 + 2])\n        cube([van_length/1.5, van_width-6, van_height/2], center=true);\n}\n\n// Wheel arch cutouts\nmodule wheel_arch(pos_x, pos_y) {\n    translate([pos_x, pos_y, wheel_diameter/2 + 1])\n        rotate([0, 90, 0])\n            cylinder(h=wheel_width+2, r=wheel_diameter/2 + 2, center=true);\n}\n\n// Wheels with tires and rims\nmodule wheel() {\n    difference() {\n        // Tire\n        color(\"black\")\n            cylinder(h=wheel_width, r=wheel_diameter/2, center=true);\n        \n        // Rim\n        translate([0, 0, -0.1])\n            color(\"silver\")\n                cylinder(h=wheel_width+0.2, r=wheel_diameter/2 - 2.5, center=true);\n        \n        // Axle hole\n        rotate([0, 90, 0])\n            cylinder(h=wheel_width+2, r=1.5, center=true);\n    }\n}\n\n// Windows\nmodule windows() {\n    // Windshield\n    translate([van_length/3, 0, van_height/2 + wheel_diameter/2 + van_height/4])\n        rotate([0, -15, 0])\n            cube([van_length/4, van_width-10, van_height/6], center=true);\n    \n    // Side windows\n    for(side = [-1, 1]) {\n        translate([0, side * (van_width/2 - 1), van_height/2 + wheel_diameter/2 + van_height/4])\n            cube([van_length/1.8, 1, van_height/6], center=true);\n    }\n    \n    // Rear window\n    translate([-van_length/2 + 2, 0, van_height/2 + wheel_diameter/2 + van_height/4])\n        rotate([0, 15, 0])\n            cube([van_length/5, van_width-10, van_height/6], center=true);\n}\n\n// Doors\nmodule doors() {\n    // Side doors\n    for(side = [-1, 1]) {\n        translate([0, side * (van_width/2 + 0.5), van_height/2 + wheel_diameter/2])\n            cube([van_length/1.2, 1, van_height/2 - 2], center=true);\n    }\n    \n    // Rear doors\n    translate([-van_length/2 + 1, 0, van_height/2 + wheel_diameter/2])\n        cube([1, van_width-4, van_height/2 - 2], center=true);\n}\n\n// Headlights and taillights\nmodule lights() {\n    // Headlights\n    for(side = [-1, 1]) {\n        translate([van_length/2 - 2, side * (van_width/3), van_height/4 + wheel_diameter/2])\n            color(\"yellow\")\n                sphere(r=2);\n    }\n    \n    // Taillights\n    for(side = [-1, 1]) {\n        translate([-van_length/2 + 2, side * (van_width/3), van_height/4 + wheel_diameter/2])\n            color(\"red\")\n                sphere(r=1.5);\n    }\n}\n\n// Side mirrors\nmodule mirrors() {\n    for(side = [-1, 1]) {\n        translate([van_length/3, side * (van_width/2 + 2), van_height/2 + wheel_diameter/2 + van_height/3])\n            rotate([0, 0, side * 30])\n                color(\"black\")\n                    cube([3, 1, 2], center=true);\n    }\n}\n\n// Main assembly\ndifference() {\n    union() {\n        // Main body\n        van_body();\n        \n        // Wheels\n        for(x = [van_length/3, -van_length/3]) {\n            for(y = [van_width/2 - 5, -van_width/2 + 5]) {\n                translate([x, y, wheel_diameter/2])\n                    rotate([90, 0, 0])\n                        wheel();\n            }\n        }\n        \n        // External features\n        lights();\n        mirrors();\n    }\n    \n    // Cut windows\n    windows();\n    \n    // Cut wheel arches\n    for(x = [van_length/3, -van_length/3]) {\n        for(y = [van_width/2 - 5, -van_width/2 + 5]) {\n            wheel_arch(x, y);\n        }\n    }\n    \n    // Cut door seams\n    doors();\n}",
    "renders": true
  },
  {
    "vehicle": "minitruck",
    "openscad_code": "// Minitruck OpenSCAD model - realistic style, medium complexity\n// Overall dimensions approximately 90 x 40 x 45 mm\n\n$fn = 32;\n\n// Main truck assembly\nmodule minitruck() {\n    // Chassis frame\n    union() {\n        // Main chassis base\n        translate([0, 0, 5]) \n            cube([90, 40, 3], center = true);\n        \n        // Front axle support\n        translate([30, 0, 5]) \n            cube([6, 38, 6], center = true);\n        \n        // Rear axle support\n        translate([-30, 0, 5]) \n            cube([6, 38, 6], center = true);\n    }\n    \n    // Cab assembly\n    translate([20, 0, 11]) \n        rotate([0, 0, 0]) \n            cab();\n    \n    // Truck bed\n    translate([-15, 0, 11]) \n        truck_bed();\n    \n    // Wheels\n    for (x = [30, -30]) {\n        for (y = [-18, 18]) {\n            translate([x, y, 5]) \n                wheel();\n        }\n    }\n    \n    // Headlights\n    translate([40, 12, 15]) \n        headlight();\n    translate([40, -12, 15]) \n        headlight();\n    \n    // Taillights\n    translate([-43, 12, 15]) \n        taillight();\n    translate([-43, -12, 15]) \n        taillight();\n}\n\n// Cab module\nmodule cab() {\n    union() {\n        // Cab base\n        difference() {\n            translate([0, 0, 10]) \n                cube([34, 36, 20], center = true);\n            \n            // Windshield cutout\n            translate([15, 0, 20]) \n                cube([20, 30, 16], center = true);\n        }\n        \n        // Hood\n        translate([20, 0, 8]) \n            cube([26, 34, 6], center = true);\n        \n        // Roof\n        translate([5, 0, 25]) \n            cube([24, 34, 3], center = true);\n        \n        // Side mirrors\n        translate([15, 20, 18]) \n            mirror();\n        translate([15, -20, 18]) \n            mirror();\n    }\n}\n\n// Truck bed module\nmodule truck_bed() {\n    difference() {\n        // Bed floor\n        translate([0, 0, 8]) \n            cube([50, 36, 3], center = true);\n        \n        // Bed walls\n        translate([0, 18, 13]) \n            cube([50, 2, 8], center = true);\n        translate([0, -18, 13]) \n            cube([50, 2, 8], center = true);\n        translate([-22, 0, 13]) \n            cube([6, 36, 8], center = true);\n    }\n    \n    // Tailgate\n    translate([-22, 0, 7]) \n        cube([2, 36, 12], center = true);\n}\n\n// Wheel module\nmodule wheel() {\n    difference() {\n        // Tire\n        color(\"black\") \n            cylinder(h = 8, r = 12, center = true);\n        \n        // Rim\n        color(\"silver\") \n            translate([0, 0, -1]) \n                cylinder(h = 6, r = 8, center = true);\n        \n        // Hub\n        color(\"gray\") \n            translate([0, 0, 0]) \n                cylinder(h = 2, r = 4, center = true);\n    }\n}\n\n// Headlight module\nmodule headlight() {\n    difference() {\n        color(\"yellow\") \n            sphere(r = 3);\n        color(\"black\") \n            translate([1, 0, 0]) \n                sphere(r = 2.5);\n    }\n}\n\n// Taillight module\nmodule taillight() {\n    difference() {\n        color(\"red\") \n            cube([4, 6, 4], center = true);\n        color(\"black\") \n            translate([1, 0, 0]) \n                cube([3, 4, 3], center = true);\n    }\n}\n\n// Side mirror module\nmodule mirror() {\n    union() {\n        // Mirror arm\n        color(\"black\") \n            cube([2, 2, 8], center = true);\n        \n        // Mirror head\n        translate([0, 0, 6]) \n            color(\"silver\") \n                sphere(r = 3);\n    }\n}\n\n// Render the truck\nminitruck();",
    "renders": true
  },
  {
    "vehicle": "microvan",
    "openscad_code": "// Microvan - realistic style, medium complexity\n// Designed for 3D printing (no overhangs, 2mm wall thickness)\n\n$fn = 32;\n\n// Main dimensions\nvan_length = 90;\nvan_width = 40;\nvan_height = 45;\nwheel_radius = 8;\nwheel_width = 4;\n\nmodule main_body() {\n    // Main van body\n    difference() {\n        hull() {\n            // Front rounded section\n            translate([van_length*0.15, 0, van_height*0.4])\n                cube([van_length*0.3, van_width*0.9, van_height*0.5], center=true);\n            // Main rectangular section\n            translate([-van_length*0.15, 0, van_height*0.4])\n                cube([van_length*0.6, van_width*0.95, van_height*0.5], center=true);\n        }\n        \n        // Windshield\n        translate([van_length*0.35, 0, van_height*0.65])\n            cube([van_length*0.2, van_width*0.7, van_height*0.3], center=true);\n            \n        // Side windows\n        for(side = [-1, 1]) {\n            translate([-van_length*0.1, side*van_width*0.48, van_height*0.6])\n                cube([van_length*0.3, 1, van_height*0.25], center=true);\n            translate([-van_length*0.4, side*van_width*0.48, van_height*0.6])\n                cube([van_length*0.2, 1, van_height*0.25], center=true);\n        }\n    }\n}\n\nmodule roof() {\n    // Roof with slight curve\n    hull() {\n        translate([van_length*0.35, 0, van_height*0.85])\n            cube([van_length*0.2, van_width*0.85, van_height*0.1], center=true);\n        translate([-van_length*0.35, 0, van_height*0.85])\n            cube([van_length*0.2, van_width*0.85, van_height*0.1], center=true);\n    }\n}\n\nmodule front_details() {\n    // Front bumper\n    translate([van_length*0.48, 0, wheel_radius+2])\n        cube([van_length*0.04, van_width*0.9, 4], center=true);\n    \n    // Headlights\n    for(side = [-1, 1]) {\n        translate([van_length*0.45, side*van_width*0.35, van_height*0.55])\n            sphere(2.5);\n    }\n    \n    // Grille\n    translate([van_length*0.45, 0, van_height*0.4])\n        cube([1, van_width*0.4, van_height*0.15], center=true);\n}\n\nmodule wheels() {\n    // Create wheels with proper spacing\n    for(x = [van_length*0.3, -van_length*0.3])\n        for(y = [-1, 1]) {\n            translate([x, y*van_width*0.55, wheel_radius])\n                rotate([0, 90, 0])\n                    cylinder(h=wheel_width, r=wheel_radius, center=true);\n            \n            // Wheel wells\n            translate([x, y*van_width*0.55, wheel_radius+2])\n                difference() {\n                    cube([wheel_radius*2+4, wheel_width+2, wheel_radius+2], center=true);\n                    translate([0, 0, -1])\n                        cube([wheel_radius*2+10, wheel_width+8, wheel_radius+2], center=true);\n                }\n        }\n}\n\nmodule doors() {\n    // Side door lines\n    for(side = [-1, 1]) {\n        // Front door line\n        translate([van_length*0.2, side*van_width*0.48, van_height*0.4])\n            cube([1, 1, van_height*0.4], center=true);\n        \n        // Sliding door line\n        translate([-van_length*0.1, side*van_width*0.48, van_height*0.4])\n            cube([1, 1, van_height*0.4], center=true);\n        \n        // Rear door line\n        translate([-van_length*0.4, side*van_width*0.48, van_height*0.4])\n            cube([1, 1, van_height*0.4], center=true);\n    }\n}\n\nmodule mirrors() {\n    // Side mirrors\n    for(side = [-1, 1]) {\n        translate([van_length*0.35, side*van_width*0.5, van_height*0.55])\n            rotate([0, -20, 0])\n                cube([3, 1, 2], center=true);\n    }\n}\n\nmodule rear_details() {\n    // Rear bumper\n    translate([-van_length*0.48, 0, wheel_radius+2])\n        cube([van_length*0.04, van_width*0.9, 4], center=true);\n    \n    // Taillights\n    for(side = [-1, 1]) {\n        translate([-van_length*0.48, side*van_width*0.25, van_height*0.5])\n            cube([2, 3, van_height*0.15], center=true);\n    }\n    \n    // License plate area\n    translate([-van_length*0.48, 0, wheel_radius+4])\n        cube([1, van_width*0.3, van_height*0.1], center=true);\n}\n\n// Assembly\nunion() {\n    main_body();\n    roof();\n    front_details();\n    rear_details();\n    doors();\n    mirrors();\n    wheels();\n}",
    "renders": true
  },
  {
    "vehicle": "cuv",
    "openscad_code": "// OpenSCAD code for a realistic 1:100 scale CUV (Compact Utility Vehicle)\n// Overall footprint ~90 mm long, ~40 mm wide, ~35 mm high\n\n$fn = 32; // Smooth curves for 3D printing\n\nmodule cuv_body() {\n    // Main unibody shell\n    difference() {\n        hull() {\n            translate([-12,0,0]) cube([84,38,18], center=true);\n            translate([35,0,5]) cube([20,34,12], center=true);\n        }\n        \n        // Cabin cavity\n        translate([0,0,10]) cube([75,36,16], center=true);\n    }\n}\n\nmodule hood() {\n    // Hood sloping toward front\n    translate([-22,0,9])\n    rotate([10,0,0])\n    cube([25,34,4], center=true);\n}\n\nmodule roof() {\n    // Roof with slight arc\n    translate([5,0,19])\n    scale([1,1,0.8])\n    sphere(10);\n    // Roof rails\n    for(side = [-1,1])\n        translate([5,side*18.5,19])\n        cube([28,2,2], center=true);\n}\n\nmodule windshield() {\n    // Angled windshield\n    translate([-12,0,15])\n    rotate([65,0,0])\n    cube([25,36,0.5], center=true);\n}\n\nmodule rear_window() {\n    // Rear window\n    translate([22,0,15])\n    rotate([65,0,0])\n    cube([20,36,0.5], center=true);\n}\n\nmodule side_windows() {\n    // Side windows\n    translate([5,0,15])\n    cube([30,38,0.5], center=true);\n}\n\nmodule wheels() {\n    // Wheels with realistic proportions\n    module wheel() {\n        difference() {\n            cylinder(h=8, r=9);\n            translate([0,0,-1]) cylinder(h=10, r=6);\n        }\n    }\n    \n    // Front wheels\n    translate([-18, -20, -8]) wheel();\n    translate([-18, 20, -8]) wheel();\n    \n    // Rear wheels\n    translate([18, -20, -8]) wheel();\n    translate([18, 20, -8]) wheel();\n}\n\nmodule bumpers() {\n    // Front bumper\n    translate([-38,0,0])\n    cube([6,36,6], center=true);\n    \n    // Rear bumper\n    translate([38,0,0])\n    cube([6,36,6], center=true);\n}\n\nmodule headlights() {\n    // Headlight assemblies\n    translate([-36, -12, 4])\n    cube([3,6,4], center=true);\n    translate([-36, 12, 4])\n    cube([3,6,4], center=true);\n    \n    // Taillights\n    translate([36, -12, 8])\n    cube([3,6,4], center=true);\n    translate([36, 12, 8])\n    cube([3,6,4], center=true);\n}\n\nmodule grille() {\n    // Front grille\n    translate([-36,0,7])\n    cube([2,24,4], center=true);\n    \n    // Grille bars\n    for(y = [-10:5:10])\n        translate([-37,y,7])\n        cube([1,2,4], center=true);\n}\n\nmodule mirrors() {\n    // Side mirrors\n    translate([0, -19, 12])\n    cube([4,2,3], center=true);\n    translate([0, 19, 12])\n    cube([4,2,3], center=true);\n}\n\nmodule doors() {\n    // Door lines\n    translate([0,0,9])\n    cube([60,0.5,12], center=true);\n}\n\n// Assembly\nunion() {\n    cuv_body();\n    hood();\n    roof();\n    windshield();\n    rear_window();\n    side_windows();\n    bumpers();\n    headlights();\n    grille();\n    mirrors();\n    doors();\n    wheels();\n}",
    "renders": true
  },
  {
    "vehicle": "suvlet",
    "openscad_code": "// Realistic Medium-Complexity SUVlet (Sub-compact SUV) – approx. 80 mm long\n// All parts printable without supports; 1.2 mm wall thickness assumed.\n\n// Overall scale factor to keep max dimension ~80 mm\nscale_factor = 0.65;\n\n$fn = 32;          // smooth curves\nwheel_d = 18;      // tyre OD\nrim_d = 13;        // rim OD\ntread_w = 7;       // tyre width\nwall = 1.2;        // printable wall thickness\n\nmodule main() {\n    scale(scale_factor)\n    union() {\n        body_shell();\n        windows();\n        lights();\n        mirrors();\n        roof_rack();\n        // Wheels\n        for (side = [0,1]) {\n            for (axle = [-1,1]) {\n                translate([axle*28, side? -22 : 22, -9])\n                    rotate([0,0,0])\n                        wheel();\n            }\n        }\n    }\n}\n\n// ---------- BODY ----------\nmodule body_shell() {\n    difference() {\n        // Main monocoque\n        hull() {\n            translate([-35,0,0])\n                cube([70, 45, 25], center=true);\n            translate([15,0,10])\n                resize([40,42,20])\n                    sphere(12);\n        }\n        \n        // Wheel arches\n        for (side = [0,1])\n            for (axle = [-1,1])\n                translate([axle*28, side? -22 : 22, -9])\n                    rotate([90,0,0])\n                        cylinder(h=25, d=wheel_d+6, center=true);\n        \n        // Underside clearance\n        translate([0,0,-15])\n            cube([100,50,10], center=true);\n    }\n    \n    // Hood slope\n    translate([25,0,3])\n        rotate([0,-10,0])\n            cube([30,42,6], center=true);\n}\n\n// ---------- WINDOWS ----------\nmodule windows() {\n    color(\"lightblue\", 0.6)\n    difference() {\n        // Windshield\n        translate([12,0,13])\n            rotate([0,-30,0])\n                cube([22,38,0.8], center=true);\n        // Side windows\n        for (y = [-20,20]) {\n            translate([-5,y,12])\n                cube([40,14,18], center=true);\n        }\n        // Rear window\n        translate([-28,0,13])\n            rotate([0,30,0])\n                cube([18,38,0.8], center=true);\n    }\n}\n\n// ---------- LIGHTS ----------\nmodule lights() {\n    // Headlights\n    translate([33,12,5])\n        cube([3,8,5], center=true);\n    translate([33,-12,5])\n        cube([3,8,5], center=true);\n    \n    // Taillights\n    translate([-33,12,5])\n        cube([3,8,4], center=true);\n    translate([-33,-12,5])\n        cube([3,8,4], center=true);\n}\n\n// ---------- MIRRORS ----------\nmodule mirrors() {\n    for (side = [-1,1]) {\n        translate([15,side*22,8])\n            rotate([0,side*20,0])\n                cube([6,4,5], center=true);\n    }\n}\n\n// ---------- ROOF RACK ----------\nmodule roof_rack() {\n    // Rails\n    for (x = [-15,15]) {\n        translate([x,0,25])\n            cube([2,46,2], center=true);\n    }\n    // Cross bars\n    for (x = [-10,0,10]) {\n        translate([x,0,26])\n            cube([30,2,2], center=true);\n    }\n}\n\n// ---------- WHEEL ----------\nmodule wheel() {\n    difference() {\n        // Tyre\n        color(\"black\")\n            cylinder(h=tread_w, d=wheel_d, center=true);\n        \n        // Rim cavity\n        cylinder(h=tread_w+1, d=rim_d, center=true);\n    }\n    \n    // Rim spokes\n    for (i = [0:5]) {\n        rotate([0,0,i*60])\n            translate([rim_d/2-1.5,0,0])\n                cube([3,tread_w-1,1.5], center=true);\n    }\n}\n\nmain();",
    "renders": true
  },
  {
    "vehicle": "sportute",
    "openscad_code": "// Sportute - Realistic style, medium complexity\n// A sporty hatchback automobile (sportute = sport utility coupe)\n\n// Overall dimensions (in mm)\nlength = 80;\nwidth = 35;\nheight = 25;\nwheelbase = 48;\n\n// Basic body shell\nmodule body() {\n    // Main chassis\n    difference() {\n        union() {\n            // Lower body (floorpan and sides)\n            translate([-length/2, -width/2, 0])\n                cube([length, width, height/3]);\n            \n            // Passenger compartment\n            translate([-length/2 + 10, -width/2 + 3, height/3])\n                cube([length - 15, width - 6, height/2]);\n            \n            // Hood\n            translate([-length/2 + 5, -width/2 + 2, height/3])\n                cube([length/2 - 5, width - 4, height/4]);\n            \n            // Roof\n            translate([-length/2 + 20, -width/2 + 5, height/3 + height/2])\n                cube([length - 35, width - 10, height/6]);\n            \n            // Rear hatch\n            translate([length/2 - 15, -width/2 + 2, height/3])\n                cube([15, width - 4, height/2]);\n        }\n        \n        // Windows\n        translate([-length/2 + 22, -width/2 + 6, height/3 + height/2 + 0.1])\n            cube([length - 39, width - 12, height/6 - 0.2]);\n        \n        translate([-length/2 + 12, -width/2 + 6, height/3 + 0.1])\n            cube([length - 24, width - 12, height/2 - 0.2]);\n    }\n}\n\n// Wheel module\nmodule wheel() {\n    difference() {\n        // Tire\n        cylinder(h=4, r=6, $fn=20);\n        \n        // Rim\n        translate([0, 0, -0.1])\n            cylinder(h=4.2, r=4, $fn=6);\n    }\n}\n\n// Wheels placement\nmodule wheels() {\n    // Front left\n    translate([-wheelbase/2, -width/2 - 2, 0])\n        rotate([90, 0, 0])\n            wheel();\n    \n    // Front right\n    translate([-wheelbase/2, width/2 + 2, 0])\n        rotate([90, 0, 0])\n            wheel();\n    \n    // Rear left\n    translate([wheelbase/2, -width/2 - 2, 0])\n        rotate([90, 0, 0])\n            wheel();\n    \n    // Rear right\n    translate([wheelbase/2, width/2 + 2, 0])\n        rotate([90, 0, 0])\n            wheel();\n}\n\n// Headlights\nmodule headlights() {\n    // Left headlight\n    translate([-length/2 + 2, -width/2 + 8, height/3 + 2])\n        cube([3, 6, 2]);\n    \n    // Right headlight\n    translate([-length/2 + 2, width/2 - 14, height/3 + 2])\n        cube([3, 6, 2]);\n}\n\n// Taillights\nmodule taillights() {\n    // Left taillight\n    translate([length/2 - 2, -width/2 + 8, height/3 + 3])\n        cube([2, 6, 2]);\n    \n    // Right taillight\n    translate([length/2 - 2, width/2 - 14, height/3 + 3])\n        cube([2, 6, 2]);\n}\n\n// Side mirrors\nmodule mirrors() {\n    // Left mirror\n    translate([-length/2 + 15, -width/2 - 1, height/3 + height/2])\n        cube([3, 2, 1.5]);\n    \n    // Right mirror\n    translate([-length/2 + 15, width/2 - 1, height/3 + height/2])\n        cube([3, 2, 1.5]);\n}\n\n// Grille\nmodule grille() {\n    translate([-length/2 + 0.5, -width/2 + 5, height/3 + 1])\n        cube([1, width - 10, 2]);\n}\n\n// Exhaust pipes\nmodule exhaust() {\n    translate([length/2 - 3, -width/2 + 5, 2])\n        cylinder(h=5, r=1, $fn=8);\n    \n    translate([length/2 - 3, width/2 - 5, 2])\n        cylinder(h=5, r=1, $fn=8);\n}\n\n// Assemble the sportute\nunion() {\n    body();\n    wheels();\n    headlights();\n    taillights();\n    mirrors();\n    grille();\n    exhaust();\n}",
    "renders": true
  },
  {
    "vehicle": "cargovan",
    "openscad_code": "// Realistic medium-complexity 3D-printable cargo van\n// Overall length 90 mm, width 45 mm, height 45 mm\n// All walls 2 mm thick for printability\n\nwall_thk = 2;\nscale = 1;       // print at 100 %\n\n// Main body shell\nmodule body_shell() {\n    difference() {\n        // Outer shell\n        hull() {\n            translate([0,0,20]) cube([60,45,25], center=true);\n            translate([-20,0,10]) cube([20,40,20], center=true);\n            translate([20,0,10]) cube([20,40,20], center=true);\n        }\n        // Hollow interior\n        translate([0,0,19.9])\n            scale([0.93,0.91,0.92])\n            hull() {\n                translate([0,0,20]) cube([60,45,25], center=true);\n                translate([-20,0,10]) cube([20,40,20], center=true);\n                translate([20,0,10]) cube([20,40,20], center=true);\n            }\n    }\n}\n\n// Front cab & windshield slope\nmodule cab() {\n    difference() {\n        hull() {\n            translate([-25,0,35]) cube([20,42,15], center=true);\n            translate([-25,0,20]) cube([20,40,20], center=true);\n        }\n        translate([-25,0,34.9])\n            scale([0.85,0.9,0.85])\n            hull() {\n                translate([-25,0,35]) cube([20,42,15], center=true);\n                translate([-25,0,20]) cube([20,40,20], center=true);\n            }\n    }\n}\n\n// Roof ridges for realism\nmodule roof_ridges() {\n    for (i = [-15:15:15]) {\n        translate([i,0,45])\n            cube([10,45,1], center=true);\n    }\n}\n\n// Side windows (cutouts)\nmodule side_windows() {\n    translate([-25,22.5,30])\n        rotate([0,10,0])\n        cube([10,0.1,12]);\n    mirror([0,1,0])\n        translate([-25,22.5,30])\n            rotate([0,10,0])\n            cube([10,0.1,12]);\n}\n\n// Front windshield\nmodule windshield() {\n    translate([-35,0,30])\n        rotate([0,30,0])\n        cube([0.1,35,18]);\n}\n\n// Front grille\nmodule grille() {\n    translate([-39,0,20])\n        cube([2,35,10], center=true);\n    // grille bars\n    for (y = [-15:5:15]) {\n        translate([-39.5,y,20])\n            cube([1,2,10], center=true);\n    }\n}\n\n// Headlights\nmodule headlights() {\n    translate([-39,-15,25])\n        sphere(d=5);\n    translate([-39,15,25])\n        sphere(d=5);\n}\n\n// Bumper\nmodule bumper() {\n    translate([-40,0,10])\n        cube([3,45,8], center=true);\n}\n\n// Wheels\nmodule wheel(pos=[0,0,0]) {\n    translate(pos)\n    difference() {\n        cylinder(h=4, d=14, center=true);\n        translate([0,0,2.1])\n            cylinder(h=4.2, d=8, center=true);\n    }\n}\n\n// Side mirrors\nmodule mirrors() {\n    translate([-25,25,30])\n        rotate([0,0,-20])\n        cube([3,5,2], center=true);\n    mirror([0,1,0])\n        translate([-25,25,30])\n            rotate([0,0,-20])\n            cube([3,5,2], center=true);\n}\n\n// Rear doors\nmodule rear_doors() {\n    translate([30,-22.5,25])\n        cube([0.1,45,30], center=true);\n    // door split line\n    translate([30.1,0,25])\n        cube([0.1,1,30], center=true);\n}\n\n// Under-chassis clearance block\nmodule chassis_base() {\n    translate([0,0,5])\n        cube([80,45,10], center=true);\n}\n\n// Assemble the van\nscale(scale)\nunion() {\n    chassis_base();\n    body_shell();\n    cab();\n    roof_ridges();\n    side_windows();\n    windshield();\n    grille();\n    headlights();\n    bumper();\n    mirrors();\n    rear_doors();\n    // Wheels\n    wheel([-15,-20,5]);\n    wheel([-15,20,5]);\n    wheel([15,-20,5]);\n    wheel([15,20,5]);\n}",
    "renders": true
  },
  {
    "vehicle": "passengervan",
    "openscad_code": "// Realistic Passenger Van - Medium Complexity (3D printable)\n// Dimensions: ~80mm long, ~34mm wide, ~30mm high\n\n$fn=32;\n\nmodule wheel(rim_d=4, tire_w=3, tire_d=8) {\n    // Tire\n    difference() {\n        cylinder(h=tire_w, d=tire_d+2, center=true);\n        cylinder(h=tire_w+0.2, d=rim_d-0.5, center=true);\n    }\n    // Rim\n    color(\"silver\")\n    cylinder(h=tire_w+0.1, d=rim_d, center=true);\n}\n\nmodule side_mirror() {\n    mirror([0,1,0])\n    rotate([0,30,0])\n    union() {\n        // Stem\n        cylinder(h=6, d=1, center=true);\n        translate([0,0,3])\n        // Mirror\n        sphere(d=2.5);\n    }\n}\n\nmodule window() {\n    color(\"lightblue\", 0.5)\n    cube([1, 0.1, 2.5], center=true);\n}\n\nmodule body() {\n    // Lower body\n    cube([70, 30, 12], center=true);\n    \n    // Upper body (cab)\n    translate([0,0,12])\n    cube([70, 28, 8], center=true);\n    \n    // Roof\n    translate([0,0,20])\n    cube([65, 26, 2], center=true);\n    \n    // Front slope\n    translate([30,0,12])\n    rotate([0,-15,0])\n    cube([10, 26, 8], center=true);\n    \n    // Windshield\n    color(\"lightblue\", 0.5)\n    translate([29,0,16])\n    rotate([0,-15,0])\n    cube([10, 24, 0.5], center=true);\n    \n    // Rear window\n    color(\"lightblue\", 0.5)\n    translate([-29,0,16])\n    rotate([0,15,0])\n    cube([10, 24, 0.5], center=true);\n}\n\nmodule doors() {\n    // Side windows (5 panels)\n    for(i=[-20:-10:-60]) {\n        translate([i, 15, 18])\n        window();\n        translate([i, -15, 18])\n        window();\n    }\n    \n    // Door lines\n    translate([0, 15.5, 12])\n    cube([70, 0.5, 8], center=true);\n    translate([0, -15.5, 12])\n    cube([70, 0.5, 8], center=true);\n    \n    // Front door\n    translate([15, 15.5, 12])\n    cube([20, 0.5, 8], center=true);\n}\n\nmodule bumpers() {\n    // Front bumper\n    translate([35,0,3])\n    cube([2, 26, 3], center=true);\n    \n    // Rear bumper\n    translate([-35,0,3])\n    cube([2, 26, 3], center=true);\n}\n\nmodule lights() {\n    // Headlights\n    translate([35, 8, 7])\n    color(\"yellow\")\n    sphere(d=3);\n    translate([35, -8, 7])\n    color(\"yellow\")\n    sphere(d=3);\n    \n    // Taillights\n    translate([-35, 8, 7])\n    color(\"red\")\n    sphere(d=3);\n    translate([-35, -8, 7])\n    color(\"red\")\n    sphere(d=3);\n}\n\nmodule undercarriage() {\n    // Floor\n    translate([0,0,-2])\n    cube([68, 28, 2], center=true);\n    \n    // Axles\n    translate([15,0,-1.5])\n    cube([30, 2, 1], center=true);\n    translate([-15,0,-1.5])\n    cube([30, 2, 1], center=true);\n}\n\n// Main assembly\nunion() {\n    // Wheels (4)\n    for(x=[15,-15]) {\n        for(y=[10,-10]) {\n            translate([x, y, -2])\n            rotate([90,0,0])\n            wheel();\n        }\n    }\n    \n    // Body\n    body();\n    \n    // Doors and windows\n    doors();\n    \n    // Bumpers\n    bumpers();\n    \n    // Lights\n    lights();\n    \n    // Side mirrors\n    translate([25, 15.5, 14])\n    side_mirror();\n    translate([25, -15.5, 14])\n    mirror([0,1,0])\n    side_mirror();\n    \n    // Undercarriage\n    undercarriage();\n}",
    "renders": true
  },
  {
    "vehicle": "shuttle",
    "openscad_code": "// Space Shuttle with external tank and solid rocket boosters\n// Designed for 3D printing, no supports needed\n\n$fn = 32; // Resolution for curved surfaces\n\n// Main assembly\nmodule shuttle_assembly() {\n    union() {\n        // Orbiter\n        orbiter();\n        \n        // External Tank\n        translate([0, 0, -15]) external_tank();\n        \n        // Solid Rocket Boosters\n        translate([-12, 0, -10]) srb();\n        translate([12, 0, -10]) srb();\n    }\n}\n\n// Orbiter module\nmodule orbiter() {\n    union() {\n        // Main fuselage\n        translate([0, 0, 5])\n            rotate([0, 0, 0])\n                hull() {\n                    // Nose cone\n                    translate([0, 0, 25])\n                        scale([1, 1, 1.5])\n                            sphere(5);\n                    \n                    // Main body\n                    translate([0, 0, 10])\n                        scale([1, 0.8, 1])\n                            cylinder(h=15, r1=6, r2=5);\n                    \n                    // Rear section\n                    translate([0, 0, -5])\n                        scale([1, 0.9, 1])\n                            cylinder(h=15, r1=5, r2=4);\n                }\n        \n        // Wings\n        difference() {\n            // Main wing\n            translate([0, 0, 8])\n                rotate([0, 0, 0])\n                    scale([1, 0.2, 1])\n                        cube([30, 2, 8], center=true);\n            \n            // Cutout for body\n            translate([0, 0, 8])\n                rotate([0, 0, 0])\n                    cylinder(h=3, r=6);\n        }\n        \n        // Vertical stabilizer\n        translate([0, -5, 12])\n            rotate([0, 0, 0])\n                scale([0.2, 1, 1])\n                    cube([2, 10, 8], center=true);\n        \n        // OMS pods (Orbital Maneuvering System)\n        translate([-8, 0, 10])\n            rotate([0, 30, 0])\n                cylinder(h=5, r=1.5);\n        translate([8, 0, 10])\n            rotate([0, -30, 0])\n                cylinder(h=5, r=1.5);\n    }\n}\n\n// External tank module\nmodule external_tank() {\n    difference() {\n        // Main tank body\n        hull() {\n            cylinder(h=30, r=5);\n            translate([0, 0, -2])\n                sphere(5);\n            translate([0, 0, 32])\n                sphere(5);\n        }\n        \n        // Liquid oxygen tank (top)\n        translate([0, 0, 20])\n            cylinder(h=12, r=4.5);\n        \n        // Liquid hydrogen tank (bottom)\n        translate([0, 0, 5])\n            cylinder(h=15, r=4.5);\n    }\n}\n\n// Solid Rocket Booster module\nmodule srb() {\n    union() {\n        // Main booster body\n        cylinder(h=28, r=3);\n        \n        // Nose cone\n        translate([0, 0, 29])\n            cone();\n        \n        // Nozzle\n        translate([0, 0, -3])\n            cylinder(h=4, r1=3, r2=2);\n        \n        // Attach struts\n        for(i = [1:3:25]) {\n            translate([0, 0, i])\n                rotate([0, 90, 0])\n                    cylinder(h=12, r=0.5);\n        }\n    }\n}\n\n// Helper module for nose cone\nmodule cone() {\n    cylinder(h=4, r1=3, r2=0);\n}\n\n// Render the complete shuttle\nshuttle_assembly();",
    "renders": true
  },
  {
    "vehicle": "chariot",
    "openscad_code": "// Chariot - Realistic Style, Medium Complexity\n// Designed for 3D printing with no overhangs\n\n// Parameters\nwheel_diameter = 20;\nwheel_width = 4;\naxle_length = 45;\nbody_length = 35;\nbody_width = 25;\nbody_height = 8;\nyoke_length = 30;\n\n// Wheel module with spokes\nmodule wheel() {\n    difference() {\n        // Outer tire\n        cylinder(h=wheel_width, d=wheel_diameter, $fn=32);\n        \n        // Inner hub hole\n        cylinder(h=wheel_width+1, d=4, $fn=16);\n        \n        // Spokes - cutouts\n        for(i=[0:3]) {\n            rotate([0,0,i*90])\n                translate([wheel_diameter/4, -wheel_width/2, 0])\n                    cube([wheel_diameter/2, wheel_width+1, wheel_width+1]);\n        }\n    }\n    \n    // Hub\n    translate([0, -wheel_width/2-1, 0])\n        cylinder(h=wheel_width+2, d=8, $fn=16);\n}\n\n// Axle assembly\nmodule axle() {\n    // Main axle rod\n    rotate([90,0,0])\n        cylinder(h=axle_length, d=4, $fn=16);\n    \n    // Wheel supports\n    translate([-axle_length/2+wheel_width/2, 0, 0])\n        wheel();\n    translate([axle_length/2-wheel_width/2, 0, 0])\n        wheel();\n}\n\n// Chariot body floor\nmodule body() {\n    // Main floor\n    translate([0, 0, wheel_diameter/2+2])\n        cube([body_length, body_width, body_height], center=true);\n    \n    // Side walls\n    translate([0, body_width/2-1, wheel_diameter/2+2+body_height/2])\n        cube([body_length, 2, body_height], center=true);\n    translate([0, -body_width/2+1, wheel_diameter/2+2+body_height/2])\n        cube([body_length, 2, body_height], center=true);\n    \n    // Front wall\n    translate([body_length/2-1, 0, wheel_diameter/2+2+body_height/2])\n        cube([2, body_width-4, body_height], center=true);\n    \n    // Back wall\n    translate([-body_length/2+1, 0, wheel_diameter/2+2+body_height/2])\n        cube([2, body_width-4, body_height], center=true);\n}\n\n// Yoke assembly\nmodule yoke() {\n    // Main yoke pole\n    translate([body_length/2+yoke_length/2, 0, wheel_diameter/2+2])\n        rotate([0,90,0])\n            cylinder(h=yoke_length, d=6, $fn=8);\n    \n    // Yoke crossbar\n    translate([body_length/2+yoke_length-5, 0, wheel_diameter/2+8])\n        rotate([90,0,0])\n            cylinder(h=15, d=3, $fn=8);\n}\n\n// Main assembly\nunion() {\n    // Wheels and axle at bottom\n    axle();\n    \n    // Chariot body above wheels\n    body();\n    \n    // Yoke extending forward\n    yoke();\n}",
    "renders": true
  },
  {
    "vehicle": "sprint",
    "openscad_code": "// Sprint (Track & Field) – OpenSCAD model\n// Overall length ≈ 90 mm, 3D-printable without supports\n\n// Track lane width (scaled for realism)\nlane_w       = 9.5;\nlane_mark_w  = 1;\nlane_len     = 90;\nnum_lanes    = 4;\n\n// Sprinter body proportions\nbody_h       = 18;\nbody_w       = 5;\nhead_r       = 2.5;\narm_len      = 8;\nleg_len      = 11;\nfoot_len     = 4;\nfoot_w       = 2;\n\n// Helper: one lane strip\nmodule lane_strip() {\n    translate([0, -lane_len/2, 0])\n        cube([lane_w, lane_len, 0.5], center=false);\n}\n\n// Helper: lane marking line\nmodule lane_mark() {\n    translate([0, -lane_len/2, 0.5])\n        cube([lane_mark_w, lane_len, 0.2], center=false);\n}\n\n// Build the whole track surface\nmodule track() {\n    difference() {\n        union() {\n            for (i=[0:num_lanes-1])\n                translate([i*(lane_w+lane_mark_w), 0, 0])\n                    lane_strip();\n        }\n        // white lane dividers\n        for (i=[0:num_lanes])\n            translate([i*(lane_w+lane_mark_w) - lane_mark_w/2, 0, 0])\n                lane_mark();\n    }\n}\n\n// Sprinter torso\nmodule torso() {\n    cube([body_w, body_w, body_h], center=true);\n}\n\n// Sprinter head\nmodule head() {\n    translate([0, 0, body_h/2 + head_r])\n        sphere(r=head_r);\n}\n\n// Sprinter arm\nmodule arm(side=1) {   // side 1 for right arm, -1 for left\n    translate([side*body_w/2, 0, body_h/2 - 3])\n        rotate([0, -45, 0])\n            translate([arm_len/2, 0, 0])\n                cube([arm_len, 1.5, 1.5], center=true);\n}\n\n// Sprinter leg\nmodule leg(side=1) {\n    translate([side*body_w/4, 0, -body_h/2 - leg_len/2 + 1])\n        rotate([0, 30, 0])\n            cube([1.8, 1.8, leg_len], center=true);\n}\n\n// Sprinter foot\nmodule foot(side=1) {\n    translate([side*body_w/4 + foot_len/2, 0, -body_h/2 - leg_len - foot_len/2 + 1])\n        rotate([0, 30, 0])\n            cube([foot_len, foot_w, 1], center=true);\n}\n\n// Complete sprinter in running pose\nmodule sprinter() {\n    union() {\n        torso();\n        head();\n        arm(1);   // right arm forward\n        arm(-1);  // left arm back\n        leg(1);   // right leg back\n        leg(-1);  // left leg forward\n        foot(1);\n        foot(-1);\n    }\n}\n\n// Final assembly\ntrack();\n\n// Place sprinter on lane 2\ntranslate([lane_w + lane_mark_w + lane_w/2, lane_len/2 - 20, 0.5 + body_h/2])\n    rotate([0, 0, -5])\n        sprinter();",
    "renders": true
  },
  {
    "vehicle": "dash",
    "openscad_code": "// Realistic 3D printable dash (en-dash) character\n// Wall thickness 1.2 mm, height 5 mm, length 60 mm, width 25 mm\n\nmodule dash_body() {\n    // Main dash bar with rounded ends\n    difference() {\n        // Outer rounded bar\n        hull() {\n            translate([-29, 0, 0]) cylinder(h = 5, d = 25, $fn = 32);\n            translate([29, 0, 0]) cylinder(h = 5, d = 25, $fn = 32);\n        }\n        \n        // Hollow interior for material savings\n        translate([0, 0, -0.1]) {\n            hull() {\n                translate([-27.4, 0, 0]) cylinder(h = 5.2, d = 22.6, $fn = 32);\n                translate([27.4, 0, 0]) cylinder(h = 5.2, d = 22.6, $fn = 32);\n            }\n        }\n    }\n}\n\nmodule end_caps() {\n    // Rounded end caps for smooth finish\n    for (x = [-29, 29]) {\n        translate([x, 0, 2.5]) sphere(d = 25, $fn = 32);\n    }\n}\n\nmodule surface_detail() {\n    // Subtle surface ridges for grip and realism\n    difference() {\n        union() {\n            // Main body union\n            dash_body();\n            end_caps();\n        }\n        \n        // Small decorative grooves\n        for (i = [-2:1:2]) {\n            translate([i * 10, 0, 2.5]) {\n                rotate([90, 0, 0]) cylinder(h = 26, d = 1.5, $fn = 32);\n            }\n        }\n    }\n    \n    // Tiny alignment dots\n    for (i = [-1:0.5:1]) {\n        translate([i * 15, 0, 5]) sphere(d = 2, $fn = 16);\n    }\n}\n\n// Main assembly\nsurface_detail();",
    "renders": true
  },
  {
    "vehicle": "bolt",
    "openscad_code": "// Realistic bolt – medium complexity\n// Approx. 80 mm long, M12 ISO-4014 style\n\n$fn = 72;               // Smooth curves for 3-D printing\nthread_pitch = 1.75;    // M12 standard\nbolt_d  = 12;           // Nominal diameter\nhead_d  = bolt_d * 2;   // Hex head across flats\nhead_h  = 8;\nshaft_l = 60;\nthread_l = 25;\nbolt_l  = shaft_l + thread_l;\n\nmodule hex_head(h) {\n    // Regular hexagon via cylinder with 6 sides\n    cylinder(h = h, d = head_d, $fn = 6);\n}\n\nmodule smooth_shaft() {\n    // Main cylindrical shaft without threads\n    cylinder(h = shaft_l, d = bolt_d);\n}\n\nmodule thread_turn(z_start, turns) {\n    // One single helical ridge wrapped around cylinder\n    // Extruded triangular profile\n    for (i = [0:1:turns * 360]) {\n        translate([0, 0, z_start + i * thread_pitch / 360])\n            rotate([0, 0, i])\n                translate([bolt_d / 2, 0, 0])\n                    rotate([90, 0, 0])\n                        // Triangular profile (60° metric)\n                        cylinder(h = thread_pitch * 1.25,\n                                 r1 = thread_pitch * 0.65,\n                                 r2 = 0,\n                                 $fn = 4);\n    }\n}\n\nmodule threads() {\n    // Create enough turns to cover thread_l\n    turns_needed = thread_l / thread_pitch;\n    thread_turn(shaft_l, turns_needed);\n}\n\nmodule bolt() {\n    union() {\n        // Head\n        translate([0, 0, bolt_l])\n            hex_head(head_h);\n\n        // Shaft\n        translate([0, 0, thread_l])\n            smooth_shaft();\n\n        // Threaded section\n        threads();\n    }\n}\n\n// Ensure bolt lies along Z for easy printing\nbolt();",
    "renders": true
  },
  {
    "vehicle": "flash",
    "openscad_code": "// Realistic Flash Drive – OpenSCAD\n// External size: 60 mm × 22 mm × 10 mm\n// No steep overhangs; 1 mm wall thickness for 3D-printing\n\n$fn = 36;          // Smooth curves\n\n// Overall dimensions\nlength = 60;\nwidth  = 22;\nthickness = 10;\nwall = 1;\n\n// USB-A metal shell dimensions (realistic proportions)\nshell_l = 12;\nshell_w = 12.5;\nshell_t = 4.5;\nshell_wall = 0.7;\n\n// Key-ring hole\nhole_r = 2.5;\nhole_gap = 8;\n\n// Body shell (hollow box)\nmodule body() {\n    difference() {\n        rounded_box(length, width, thickness, 2);\n        translate([wall, wall, wall])\n            rounded_box(length - 2*wall, width - 2*wall, thickness - wall, 1);\n    }\n}\n\n// Rounded box helper (all edges rounded by r)\nmodule rounded_box(l, w, t, r) {\n    hull() {\n        for(x = [r, l - r], y = [r, w - r], z = [r, t - r])\n            translate([x, y, z]) sphere(r = r);\n    }\n}\n\n// USB-A metal tongue inside shell\nmodule usb_tongue() {\n    color(\"silver\")\n    translate([length - shell_l + 0.2, 0, -shell_t/2])\n    cube([6.8, 0.7, 1.8], center = true);\n}\n\n// USB-A metal shell\nmodule usb_shell() {\n    color(\"silver\")\n    difference() {\n        // outer shell\n        translate([length - shell_l, 0, 0])\n            cube([shell_l, shell_w, shell_t], center = true);\n\n        // inner cavity\n        translate([length - shell_l + shell_wall, 0, 0])\n            cube([shell_l - shell_wall, shell_w - 2*shell_wall, shell_t - 2*shell_wall], center = true);\n\n        // taper front edge\n        for(i = [0:1])\n            mirror([i,0,0])\n                translate([length - shell_l - 0.01, 0, 0])\n                    rotate([0,90,0])\n                        cylinder(h = shell_w + 1, r = shell_t/2, center = true);\n    }\n}\n\n// Key-ring loop\nmodule key_loop() {\n    translate([0, 0, 0])\n    rotate([90,0,0])\n    difference() {\n        cylinder(h = width, r = hole_r + wall, center = true);\n        cylinder(h = width + 1, r = hole_r, center = true);\n    }\n}\n\n// Grip texture – recessed grooves\nmodule grip() {\n    n = 12;\n    w_g = 0.5;\n    d_g = 0.4;\n    for(i = [0:n-1]) {\n        translate([length - shell_l - 5 - i*3.5, -width/2, -thickness/2 + d_g/2])\n            cube([w_g, width, d_g]);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    usb_shell();\n    usb_tongue();\n    translate([-length/2 + hole_gap, 0, 0]) key_loop();\n    grip();\n}",
    "renders": true
  },
  {
    "vehicle": "swift",
    "openscad_code": "// Swift (bird) - Realistic Medium Complexity\n// Wings folded as if perched, printable without support\n\n$fa = 2;\n$fs = 0.5;\n\nmodule swift() {\n    // Main body\n    difference() {\n        union() {\n            // Torso - elongated sphere\n            scale([1.2, 0.8, 1])\n                sphere(12);\n            \n            // Tail\n            translate([0, -20, 0])\n                scale([1, 3, 0.2])\n                    sphere(8);\n        }\n        \n        // Neck cavity\n        translate([0, 8, 8])\n            rotate([90, 0, 0])\n                cylinder(h=10, r1=5, r2=4);\n    }\n    \n    // Head\n    translate([0, 12, 12])\n        rotate([30, 0, 0])\n            scale([0.8, 0.8, 1.1])\n                sphere(8);\n    \n    // Beak\n    translate([0, 18, 15])\n        rotate([30, 0, 0])\n            cylinder(h=8, r1=3, r2=1);\n    \n    // Eyes\n    for(x = [-3, 3]) {\n        translate([x, 13, 15])\n            sphere(1.5);\n    }\n    \n    // Wings - folded against body\n    module wing() {\n        difference() {\n            // Main wing shape\n            translate([0, -5, 0])\n                scale([1, 2.5, 0.2])\n                    sphere(10);\n            \n            // Wing tip\n            translate([0, -18, 0])\n                rotate([0, 0, 20])\n                    scale([0.3, 1, 1])\n                        sphere(8);\n        }\n        \n        // Primary feathers\n        for(i = [0:3]) {\n            translate([-2 + i*1.5, -15 - i*2, 0])\n                rotate([0, 0, i*5])\n                    scale([0.2, 0.8, 0.05])\n                        sphere(4);\n        }\n    }\n    \n    // Left wing\n    translate([-10, 0, 5])\n        rotate([0, 0, -10])\n            wing();\n    \n    // Right wing\n    translate([10, 0, 5])\n        rotate([0, 0, 10])\n            mirror([1, 0, 0])\n                wing();\n    \n    // Tail feathers\n    for(i = [-2:2]) {\n        translate([i*4, -25, 0])\n            rotate([0, 0, i*5])\n                scale([0.3, 1.5, 0.05])\n                    sphere(6);\n    }\n    \n    // Feet\n    module foot() {\n        // Leg\n        cylinder(h=5, r=1.5);\n        \n        // Toes\n        for(angle = [-30, 0, 30]) {\n            translate([0, 0, 5])\n                rotate([0, angle, 0])\n                    cylinder(h=3, r1=1, r2=0.5);\n        }\n    }\n    \n    translate([-4, 0, -12])\n        foot();\n    \n    translate([4, 0, -12])\n        foot();\n}\n\n// Main assembly\nswift();",
    "renders": true
  },
  {
    "vehicle": "raptor",
    "openscad_code": "// Velociraptor - Medium complexity 3D printable model\n// Designed for 3D printing with minimal overhangs and support\n\n// Scale factor for easy sizing\nscale_factor = 1;\n\n// Main body\nmodule body() {\n    // Torso - main body section\n    translate([0, 0, 15])\n    scale([1.2, 0.6, 0.8])\n    sphere(10);\n    \n    // Belly\n    translate([0, -5, 8])\n    scale([1, 0.8, 0.4])\n    sphere(8);\n}\n\n// Head with snout\nmodule head() {\n    union() {\n        // Main head\n        translate([-15, 0, 22])\n        scale([1.2, 0.8, 0.9])\n        sphere(8);\n        \n        // Snout\n        translate([-25, 0, 22])\n        scale([1.5, 0.4, 0.5])\n        sphere(5);\n        \n        // Eye sockets\n        difference() {\n            translate([-18, 0, 25])\n            sphere(2);\n            translate([-19, 1.5, 26])\n            sphere(1);\n        }\n        mirror([0,1,0]) {\n            difference() {\n                translate([-18, 0, 25])\n                sphere(2);\n                translate([-19, 1.5, 26])\n                sphere(1);\n            }\n        }\n    }\n}\n\n// Tail with segments\nmodule tail() {\n    for(i = [0:9]) {\n        hull() {\n            translate([10 + i*3, 0, 15 - i*0.5])\n            scale([0.9 - i*0.07, 0.9 - i*0.07, 0.9 - i*0.07])\n            sphere(5);\n            \n            translate([12 + i*3, 0, 15 - i*0.5])\n            scale([0.85 - i*0.07, 0.85 - i*0.07, 0.85 - i*0.07])\n            sphere(5);\n        }\n    }\n}\n\n// Leg module\nmodule leg(side) {\n    // Thigh\n    translate([0, side*5, 15])\n    rotate([0, 0, side*10])\n    cylinder(h=12, r1=3, r2=2.5, center=true);\n    \n    // Shin\n    translate([0, side*6, 7])\n    rotate([0, 0, side*15])\n    cylinder(h=10, r1=2.5, r2=2, center=true);\n    \n    // Foot\n    translate([2, side*7, 0])\n    union() {\n        // Main foot\n        cube([8, 3, 2], center=true);\n        \n        // Claws\n        for(j = [-1, 0, 1]) {\n            translate([6, j*0.8, -1])\n            rotate([0, -30, 0])\n            cylinder(h=3, r1=0.5, r2=0, center=true);\n        }\n    }\n}\n\n// Arm module\nmodule arm(side) {\n    // Upper arm\n    translate([-10, side*8, 20])\n    rotate([0, 0, -side*30])\n    cylinder(h=8, r1=2, r2=1.5, center=true);\n    \n    // Lower arm\n    translate([-15, side*10, 20])\n    rotate([0, 0, -side*30])\n    cylinder(h=6, r1=1.5, r2=1, center=true);\n    \n    // Hand with claws\n    translate([-19, side*12, 20])\n    union() {\n        cube([3, 1.5, 1], center=true);\n        \n        // Claws\n        for(k = [-1, 0, 1]) {\n            translate([-21, k*0.5, 20])\n            rotate([0, -45, 0])\n            cylinder(h=2.5, r1=0.4, r2=0, center=true);\n        }\n    }\n}\n\n// Neck connector\nmodule neck() {\n    hull() {\n        translate([-8, 0, 22])\n        sphere(4);\n        \n        translate([-12, 0, 22])\n        sphere(3);\n    }\n}\n\n// Spine ridge\nmodule spine_ridge() {\n    for(i = [-5:2:15]) {\n        translate([i, 0, 25])\n        rotate([0, 90, 0])\n        cylinder(h=0.5, r=1.5, center=true);\n    }\n}\n\n// Main assembly\nscale([scale_factor, scale_factor, scale_factor]) {\n    union() {\n        // Core body parts\n        body();\n        neck();\n        head();\n        tail();\n        \n        // Legs\n        leg(1);  // Right leg\n        leg(-1); // Left leg\n        \n        // Arms\n        arm(1);  // Right arm\n        arm(-1); // Left arm\n        \n        // Details\n        spine_ridge();\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "viper",
    "openscad_code": "// Viper model - medium complexity realistic style\n// Total length ~80mm, 3D-printable with no overhangs\n\n$fn = 32;\n\nmodule viper_head() {\n    // Main head block\n    difference() {\n        hull() {\n            // Snout\n            translate([-8, 0, 0])\n                scale([1.2, 0.8, 0.8])\n                sphere(d=15);\n            // Back of head\n            translate([5, 0, 0])\n                scale([1, 1.2, 1.2])\n                sphere(d=18);\n        }\n        \n        // Eye sockets\n        for(side = [-1, 1]) {\n            translate([2, side*6, 3])\n                rotate([0, 10, 0])\n                sphere(d=6);\n        }\n        \n        // Nostrils\n        for(side = [-1, 1]) {\n            translate([-7, side*3, 0])\n                rotate([0, 45, 0])\n                cylinder(h=3, d1=2, d2=0);\n        }\n    }\n    \n    // Eyes\n    for(side = [-1, 1]) {\n        translate([2, side*6, 3])\n            color(\"yellow\")\n            sphere(d=4);\n        translate([3, side*6, 4])\n            color(\"black\")\n            sphere(d=2);\n    }\n    \n    // Fangs\n    for(side = [-1, 1]) {\n        translate([-6, side*3, -6])\n            rotate([0, 0, side*15])\n            cylinder(h=8, d1=2, d2=0);\n    }\n}\n\nmodule viper_body_segment(size, angle, height_offset) {\n    // Scaled cylinder for body segment\n    translate([0, 0, height_offset])\n        rotate([0, 0, angle])\n        scale([1, 0.6, 0.6])\n        cylinder(h=size[0], d1=size[1], d2=size[2], center=true);\n}\n\nmodule viper_body() {\n    // Create 15 segments with decreasing size\n    segments = 15;\n    for(i = [0:segments-1]) {\n        t = i / (segments - 1);\n        segment_length = 5 + (1-t)*3;\n        diameter = 12 - t*8;\n        angle = sin(i*15)*10;\n        height = -i*4;\n        \n        viper_body_segment(\n            [segment_length, diameter, diameter*0.9],\n            angle,\n            height\n        );\n    }\n    \n    // Tail tip\n    translate([0, 0, -segments*4])\n        cylinder(h=8, d1=4, d2=0);\n}\n\nmodule viper_pattern() {\n    // Diamond pattern along back\n    segments = 20;\n    for(i = [0:segments-1]) {\n        t = i / segments;\n        angle = sin(i*20)*15;\n        pos = -i*3 - 5;\n        \n        translate([0, 0, pos])\n            rotate([0, 0, angle])\n            scale([1, 0.3, 0.2])\n            cube([8, 12, 3], center=true);\n    }\n}\n\nmodule viper() {\n    union() {\n        // Head\n        translate([0, 0, 10])\n            viper_head();\n        \n        // Body\n        viper_body();\n        \n        // Pattern\n        color(\"darkgreen\")\n        viper_pattern();\n    }\n}\n\n// Main assembly\nrotate([0, 180, 0])\n    viper();",
    "renders": true
  },
  {
    "vehicle": "cobra",
    "openscad_code": "// Cobra Snake - Medium Complexity 3D Printable Model\n// Dimensions: ~80mm length, ~20mm height\n\n$fn = 24;  // Smooth curves for realistic appearance\n\n// Main body parameters\nbody_length = 80;\nbody_radius = 4;\nsegments = 20;\n\n// Head parameters\nhead_length = 15;\nhead_width = 8;\nhead_height = 6;\nhood_width = 25;\nhood_height = 2;\n\n// Tail parameters\ntail_length = 25;\ntail_radius = 2;\n\n// Eyes\neye_radius = 1.5;\neye_offset = 5;\n\n// Tongue\ntongue_length = 8;\ntongue_width = 0.5;\ntongue_thickness = 0.2;\n\nmodule cobra_body() {\n    // Create main body with tapering tail\n    for (i = [0:segments-1]) {\n        t = i / (segments - 1);\n        segment_length = body_length / segments;\n        \n        // Tapering radius from body to tail\n        current_radius = lerp(body_radius, tail_radius, t * t);\n        \n        // Slight upward curve for cobra pose\n        y_offset = sin(t * 180) * 5;\n        \n        translate([i * segment_length, y_offset, 0])\n            rotate([0, 0, sin(t * 180) * 10])\n            cylinder(h = segment_length + 0.5, r = current_radius, center = true);\n    }\n}\n\nmodule cobra_head() {\n    // Main head shape\n    translate([body_length, 0, 0])\n    union() {\n        // Head body\n        scale([1, 0.8, 0.6])\n        sphere(r = head_length / 2);\n        \n        // Snout extension\n        translate([head_length/2, 0, -head_height/4])\n        scale([1.2, 0.8, 0.5])\n        sphere(r = head_length / 3);\n        \n        // Hood\n        translate([-head_length/2, 0, 0])\n        scale([1.5, 1.8, 0.3])\n        sphere(r = hood_width / 2);\n        \n        // Eyes\n        for (side = [-1, 1]) {\n            translate([eye_offset, side * head_width/3, head_height/2])\n            rotate([0, 90, 0])\n            cylinder(h = eye_radius * 2, r = eye_radius, center = true);\n        }\n        \n        // Tongue (split)\n        translate([head_length + 2, 0, -head_height/3])\n        union() {\n            for (side = [-1, 1]) {\n                translate([0, side * tongue_width, 0])\n                scale([1, 0.5, 1])\n                cube([tongue_length, tongue_width, tongue_thickness]);\n            }\n        }\n    }\n}\n\nmodule cobra_pattern() {\n    // Scale pattern on back\n    pattern_scale = 2.5;\n    pattern_height = 0.5;\n    \n    for (i = [0:segments-1]) {\n        if (i % 2 == 0) {\n            t = i / (segments - 1);\n            segment_length = body_length / segments;\n            y_offset = sin(t * 180) * 5;\n            \n            translate([i * segment_length + segment_length/2, y_offset, body_radius - pattern_height/2])\n            scale([1, 0.7, 1])\n            rotate([90, 0, 0])\n            cylinder(h = pattern_height, r1 = pattern_scale, r2 = 0, center = true);\n        }\n    }\n}\n\n// Helper function for linear interpolation\nfunction lerp(a, b, t) = a + (b - a) * t;\n\n// Main assembly\nunion() {\n    // Base body\n    cobra_body();\n    \n    // Head and features\n    cobra_head();\n    \n    // Scale pattern\n    cobra_pattern();\n    \n    // Underside support for printing\n    translate([body_length/2, 0, -body_radius - 1])\n    cube([body_length + 20, body_radius * 3, 2]);\n}",
    "renders": true
  },
  {
    "vehicle": "titan",
    "openscad_code": "// Titan model - realistic medium complexity\n// Total height ~75mm, printable without supports\n\n$fn = 32;\nwall = 1.2;\n\nmodule leg(height = 30, width = 8) {\n    // Upper leg\n    translate([0, 0, height/2])\n        cylinder(h = height/2, r1 = width/2, r2 = width/1.8);\n    \n    // Knee joint\n    translate([0, 0, height - 2])\n        sphere(r = width/1.8);\n    \n    // Lower leg\n    translate([0, 0, height + height/4 - 2])\n        cylinder(h = height/2, r1 = width/2.2, r2 = width/3);\n    \n    // Foot\n    translate([0, width/2, height + height/2 - 1])\n        cube([width*1.5, width*2, 4], center = true);\n}\n\nmodule arm(length = 25, width = 6) {\n    // Shoulder joint\n    translate([0, 0, 2])\n        sphere(r = width/1.5);\n    \n    // Upper arm\n    translate([0, 0, length/2 - 2])\n        cylinder(h = length/2 - 2, r1 = width/2, r2 = width/2.2);\n    \n    // Elbow joint\n    translate([0, 0, length - 8])\n        sphere(r = width/2.2);\n    \n    // Lower arm\n    translate([0, 0, length - 4])\n        cylinder(h = length/2, r1 = width/2.2, r2 = width/2.5);\n    \n    // Hand\n    translate([0, 0, length + 2])\n        cube([width*1.8, width*2.5, 3], center = true);\n}\n\nmodule torso() {\n    // Chest cavity\n    difference() {\n        translate([0, 0, 20])\n            cube([20, 15, 30], center = true);\n        translate([0, 0, 20])\n            cube([18 - wall*2, 13 - wall*2, 28 - wall*2], center = true);\n    }\n    \n    // Abdominal plates\n    for(i = [0:3]) {\n        translate([0, 0, 10 - i*4])\n            cube([22 - i*2, 17 - i*1.5, 2], center = true);\n    }\n    \n    // Back thrusters\n    difference() {\n        translate([0, -8, 25])\n            cube([12, 4, 8], center = true);\n        translate([0, -6, 25])\n            cube([10 - wall*2, 2, 6 - wall*2], center = true);\n    }\n    \n    // Head mount\n    translate([0, 0, 35])\n        cylinder(h = 5, r = 6);\n}\n\nmodule head() {\n    // Helmet base\n    difference() {\n        sphere(r = 8);\n        translate([0, 0, -4])\n            cube([16, 16, 8], center = true);\n    }\n    \n    // Face plate\n    difference() {\n        translate([0, 6, 0])\n            cube([10, 2, 12], center = true);\n        translate([0, 7, 0])\n            cube([8, 2, 10], center = true);\n    }\n    \n    // Optics\n    for(x = [-3, 3]) {\n        translate([x, 6.5, 2])\n            cylinder(h = 2, r = 1.5);\n    }\n    \n    // Vents\n    for(y = [-4, 0, 4]) {\n        translate([0, 2, y])\n            cylinder(h = 1.5, r = 0.8);\n    }\n}\n\nmodule shoulder_pauldron(side) {\n    mirror([side, 0, 0])\n    translate([12, 0, 30])\n    rotate([0, 20, 0])\n    difference() {\n        cube([8, 12, 6], center = true);\n        cube([6, 10, 4], center = true);\n    }\n}\n\n// Main assembly\nunion() {\n    // Torso\n    torso();\n    \n    // Head\n    translate([0, 0, 43])\n        head();\n    \n    // Arms\n    translate([-12, 0, 30])\n        rotate([0, 15, 0])\n            arm();\n    translate([12, 0, 30])\n        rotate([0, -15, 0])\n        mirror([1, 0, 0])\n            arm();\n    \n    // Legs\n    translate([-6, 0, 0])\n        leg();\n    translate([6, 0, 0])\n        mirror([1, 0, 0])\n            leg();\n    \n    // Shoulder armor\n    shoulder_pauldron(1);\n    shoulder_pauldron(-1);\n}",
    "renders": true
  },
  {
    "vehicle": "juggernaut",
    "openscad_code": "// Realistic Juggernaut - Medium Complexity\n// Dimensions: ~80mm long x 45mm wide x 30mm high\n\n// Main body\nmodule body() {\n  difference() {\n    // Main hull\n    hull() {\n      translate([-30, -20, 0]) cube([60, 40, 15], center=true);\n      translate([-25, -15, 12]) cube([50, 30, 6], center=true);\n    }\n    \n    // Driver viewport\n    translate([25, 0, 8]) rotate([45, 0, 0]) cube([10, 5, 0.1], center=true);\n    \n    // Turret ring hole\n    translate([0, 0, 15]) cylinder(h=6, r=8, $fn=32);\n  }\n}\n\n// Turret\nmodule turret() {\n  difference() {\n    // Main turret\n    cylinder(h=8, r1=10, r2=12, $fn=32);\n    \n    // Commander hatch\n    translate([0, 0, 7]) cylinder(h=2, r=4, $fn=16);\n  }\n  \n  // Main gun\n  translate([0, 0, 8]) rotate([-5, 0, 0]) cylinder(h=20, r1=4, r2=3, $fn=16);\n  \n  // Machine gun\n  translate([5, 0, 9]) rotate([0, 0, 90]) cylinder(h=8, r=1, $fn=8);\n}\n\n// Suspension arms\nmodule suspension(side) {\n  translate([side * 25, 0, 5]) {\n    for(i = [-15:10:15]) {\n      translate([0, i, -1]) cube([6, 2, 2], center=true);\n    }\n  }\n}\n\n// Wheels\nmodule wheel(side) {\n  for(i = [-20:10:20]) {\n    translate([side * 30, i, 0]) {\n      difference() {\n        cylinder(h=8, r=5, center=true, $fn=16);\n        cylinder(h=10, r=3, center=true, $fn=16);\n      }\n    }\n  }\n}\n\n// Track links\nmodule track(side) {\n  for(i = [-20:2:20]) {\n    translate([side * 33, i, 0]) {\n      cube([6, 1.5, 8], center=true);\n    }\n  }\n}\n\n// Exhaust\nmodule exhaust() {\n  translate([-35, 15, 12]) {\n    rotate([90, 0, 0]) cylinder(h=10, r=2, $fn=12);\n  }\n}\n\n// Smoke launchers\nmodule smoke_launchers() {\n  for(i = [-1:1]) {\n    translate([12, i * 8, 15]) {\n      cylinder(h=3, r=1, $fn=8);\n    }\n  }\n}\n\n// Storage boxes\nmodule storage_boxes() {\n  // Rear stowage\n  translate([-30, 0, 8]) cube([10, 15, 5], center=true);\n  // Side stowage\n  translate([0, 20, 8]) cube([15, 8, 4], center=true);\n}\n\n// Assembly\nunion() {\n  body();\n  \n  translate([0, 0, 15]) turret();\n  \n  suspension(1);\n  suspension(-1);\n  \n  wheel(1);\n  wheel(-1);\n  \n  track(1);\n  track(-1);\n  \n  exhaust();\n  \n  smoke_launchers();\n  \n  storage_boxes();\n}",
    "renders": true
  },
  {
    "vehicle": "behemoth",
    "openscad_code": "// Behemoth – medium-complexity, realistic style, 3D-printable\n// Approx 80 mm long, 40 mm wide, 35 mm high\n// No unsupported overhangs >45°, 2 mm wall min\n\n// Main body\nmodule body() {\n    difference() {\n        // Central torso\n        hull() {\n            cube([40, 28, 20], center = true);\n            translate([0, 0, 8]) cube([38, 26, 16], center = true);\n        }\n        // Neck cavity\n        translate([0, 12, 8]) rotate([0, -25, 0])\n            cube([14, 14, 14], center = true);\n    }\n}\n\n// Head\nmodule head() {\n    translate([0, 30, 12]) rotate([0, -15, 0]) {\n        difference() {\n            hull() {\n                sphere(d = 20);\n                translate([0, 10, -2]) sphere(d = 16);\n            }\n            // Mouth recess\n            translate([0, 12, -6]) cube([12, 8, 6], center = true);\n            // Eye holes\n            for (x = [-6, 6]) translate([x, 6, 2]) sphere(d = 4);\n        }\n    }\n}\n\n// Leg\nmodule leg(side = 1) { // side = 1 for right, -1 for left\n    translate([side * 14, 0, -16]) {\n        rotate([0, side * 8, 0]) {\n            // Upper leg\n            cylinder(h = 18, d1 = 10, d2 = 8);\n            translate([0, 0, -18]) {\n                // Lower leg\n                cylinder(h = 18, d1 = 8, d2 = 6);\n                // Foot\n                translate([0, 0, -20])\n                    cube([12 * side, 18, 6], center = false);\n            }\n        }\n    }\n}\n\n// Tail\nmodule tail() {\n    translate([-22, 0, -2]) rotate([0, 0, 25])\n        for (i = [0:1:4])\n            translate([-i * 6 - 3, 0, 0])\n                scale(1 - i * 0.15)\n                    rotate([0, 0, -i * 3])\n                        sphere(d = 10 - i * 1.5);\n}\n\n// Dorsal plates\nmodule plates() {\n    for (i = [0:1:5])\n        translate([-15 + i * 7, 0, 12]) rotate([0, 0, i % 2 ? 5 : -5])\n            cube([8, 2, 4 + i * 1.5], center = true);\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    plates();\n    tail();\n    leg(1);\n    leg(-1);\n    mirror([1, 0, 0]) {\n        leg(1);\n        leg(-1);\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "colossus",
    "openscad_code": "// Colossus of Rhodes inspired statue - Medium complexity realistic style\n// Height: 80mm, printable with minimal supports\n\n// Overall scale factor\nscale_factor = 0.8;\n\n// Base pedestal\nmodule pedestal() {\n    difference() {\n        cube([30, 30, 8], center=true);\n        translate([0, 0, -1]) cube([26, 26, 10], center=true);\n    }\n}\n\n// Feet with sandals\nmodule foot(left_right = 1) {\n    translate([left_right * 6, 0, 4]) {\n        union() {\n            // Sandal sole\n            translate([0, 0, 0]) cube([10, 4, 2]);\n            // Foot\n            translate([0, 0, 2]) cube([8, 3.5, 4]);\n            // Toes\n            for(i = [-1.5:1:1.5]) {\n                translate([i * 2, 2, 2]) cube([1.5, 1, 1]);\n            }\n            // Ankle\n            translate([0, 0, 6]) cylinder(h=3, r=2, $fn=8);\n        }\n    }\n}\n\n// Leg structure\nmodule leg(left_right = 1) {\n    translate([left_right * 6, 0, 11]) {\n        union() {\n            // Lower leg\n            cylinder(h=15, r1=4, r2=3.5, $fn=12);\n            // Knee cap\n            translate([0, 0, 15]) sphere(r=3.5);\n            // Upper leg\n            translate([0, 0, 15]) cylinder(h=15, r1=3.5, r2=5, $fn=12);\n            // Connection to hip\n            translate([0, 0, 30]) sphere(r=5);\n        }\n    }\n}\n\n// Torso with musculature\nmodule torso() {\n    translate([0, 0, 35]) {\n        difference() {\n            // Main torso\n            scale([1, 0.7, 1.2]) sphere(r=12, $fn=24);\n            // Waist indentation\n            translate([0, -15, -5]) scale([1.2, 0.5, 0.8]) sphere(r=10, $fn=16);\n        }\n        // Chest details\n        translate([-3, 0, 8]) cube([6, 1, 3]);\n        translate([-5, 0, 5]) cube([10, 1, 2]);\n    }\n}\n\n// Arm with hand\nmodule arm(left_right = 1) {\n    translate([left_right * 12, 0, 45]) {\n        rotate([0, left_right * 15, 0]) {\n            union() {\n                // Upper arm\n                translate([0, 0, 0]) cylinder(h=15, r1=3.5, r2=3, $fn=10);\n                // Elbow\n                translate([0, 0, 15]) sphere(r=3);\n                // Forearm\n                translate([0, 0, 15]) cylinder(h=12, r1=3, r2=2.5, $fn=10);\n                // Hand\n                translate([0, 0, 27]) {\n                    // Palm\n                    cube([4, 1, 6], center=true);\n                    // Fingers\n                    for(i = [-1.5, 0, 1.5]) {\n                        translate([i, 1, 0]) cube([1, 1, 4], center=true);\n                    }\n                    // Thumb\n                    translate([2, 0, 1]) rotate([0, 0, 45]) cube([1, 1, 3]);\n                }\n            }\n        }\n    }\n}\n\n// Head with features\nmodule head() {\n    translate([0, 0, 55]) {\n        union() {\n            // Base head\n            scale([0.8, 0.8, 1]) sphere(r=8, $fn=24);\n            // Nose\n            translate([0, 7.5, 0]) scale([0.3, 0.5, 0.3]) sphere(r=3);\n            // Eyes\n            for(i = [-1, 1]) {\n                translate([i * 2.5, 6.5, 1]) sphere(r=1);\n            }\n            // Crown/headdress\n            translate([0, 0, 8]) cylinder(h=4, r1=8, r2=6, $fn=16);\n            // Hair details\n            for(i = [0:30:330]) {\n                rotate([0, 0, i]) translate([7, 0, 5]) cylinder(h=6, r1=0.5, r2=0.3);\n            }\n        }\n    }\n}\n\n// Assembly\nscale(scale_factor) {\n    pedestal();\n    foot(1);\n    foot(-1);\n    leg(1);\n    leg(-1);\n    torso();\n    arm(1);\n    arm(-1);\n    head();\n}",
    "renders": true
  },
  {
    "vehicle": "goliath",
    "openscad_code": "// Goliath figure - medium complexity realistic style\n// Total height ~70mm, designed for FDM printing\n\n// Main parameters\n$fn=32;\nscale_factor = 0.7;\n\n// Colors for preview\ncolor_body = [0.8,0.7,0.6];\ncolor_cloth = [0.5,0.3,0.2];\ncolor_metal = [0.6,0.6,0.6];\ncolor_skin = [0.9,0.8,0.7];\n\nmodule goliath() {\n    // Body\n    union() {\n        // Torso\n        color(color_body)\n        translate([0,0,35])\n        scale([1.2,0.8,1.5])\n        sphere(10);\n        \n        // Chest plate\n        color(color_metal)\n        translate([0,0,40])\n        difference() {\n            scale([1.4,1,1.6])\n            sphere(9);\n            translate([0,10,0])\n            scale([1.3,0.9,1.5])\n            sphere(9);\n        }\n        \n        // Head\n        color(color_skin)\n        translate([0,0,55])\n        scale([0.9,0.9,1.1])\n        sphere(8);\n        \n        // Jaw\n        translate([0,-6,50])\n        scale([0.7,0.4,0.5])\n        sphere(7);\n        \n        // Nose\n        translate([0,-7,55])\n        scale([0.2,0.2,0.3])\n        sphere(3);\n        \n        // Eyes\n        for(x=[-2.5,2.5]) {\n            translate([x,-7,57])\n            scale([0.3,0.2,0.2])\n            sphere(2);\n        }\n        \n        // Arms\n        for(side=[-1,1]) {\n            // Upper arm\n            color(color_skin)\n            translate([side*15,0,45])\n            rotate([0,0,side*20])\n            rotate([90,0,0])\n            cylinder(h=15,r=4);\n            \n            // Forearm\n            translate([side*18,0,32])\n            rotate([0,0,side*30])\n            rotate([90,0,0])\n            cylinder(h=12,r=3.5);\n            \n            // Fist\n            translate([side*22,0,24])\n            sphere(4);\n        }\n        \n        // Legs\n        for(side=[-1,1]) {\n            // Thigh\n            color(color_cloth)\n            translate([side*8,0,25])\n            rotate([0,0,side*10])\n            cylinder(h=20,r=5);\n            \n            // Shin\n            translate([side*9,0,10])\n            rotate([0,0,side*10])\n            cylinder(h=15,r=4.5);\n            \n            // Foot\n            translate([side*9,0,0])\n            scale([1.5,3,0.8])\n            sphere(3);\n        }\n        \n        // Belt\n        color(color_cloth)\n        translate([0,0,30])\n        scale([1.3,0.8,0.3])\n        sphere(10);\n        \n        // Belt buckle\n        color(color_metal)\n        translate([0,8,30])\n        cube([3,0.5,2], center=true);\n        \n        // Pauldrons\n        for(side=[-1,1]) {\n            color(color_metal)\n            translate([side*12,0,48])\n            rotate([0,0,side*30])\n            scale([1.2,0.8,0.3])\n            sphere(5);\n        }\n        \n        // Loincloth\n        color(color_cloth)\n        translate([0,7,20])\n        scale([0.8,0.1,1.2])\n        sphere(8);\n        \n        // Musculature details\n        color(color_skin)\n        for(i=[1:3]) {\n            translate([0,0,38-i*2])\n            scale([1.1-i*0.1,0.7,0.2])\n            sphere(10);\n        }\n    }\n}\n\n// Render the goliath\nscale([scale_factor,scale_factor,scale_factor])\ngoliath();",
    "renders": true
  },
  {
    "vehicle": "motorcycle",
    "openscad_code": "$fa=2;\n$fs=0.5;\n\nmodule wheel(rim_r=10, tire_w=3, tire_r=11, spokes=6){\n    // Tire\n    rotate_extrude()\n        translate([tire_r-tire_w/2, 0])\n            circle(d=tire_w);\n\n    // Rim\n    color(\"silver\")\n    rotate_extrude()\n        translate([rim_r-1, 0])\n            circle(d=2);\n\n    // Spokes\n    for(i=[0:spokes-1])\n        rotate([0,0,i*360/spokes])\n            color(\"gray\")\n            cube([rim_r-2, 0.8, 0.8], center=true);\n}\n\nmodule fork(height=15, width=2, offset=8){\n    // Upper fork tubes\n    color(\"silver\")\n    translate([offset,0,height/2])\n        rotate([90,0,0])\n            cylinder(h=height, d=width, center=true);\n    translate([-offset,0,height/2])\n        rotate([90,0,0])\n            cylinder(h=height, d=width, center=true);\n}\n\nmodule engine(){\n    color(\"darkgray\")\n    union(){\n        // Main block\n        translate([0,-5,8])\n            cube([12,10,8], center=true);\n\n        // Cylinders\n        translate([0,-5,12])\n            cube([6,4,4], center=true);\n        translate([0,-5,14])\n            cylinder(h=3, d=4.5);\n    }\n}\n\nmodule frame(){\n    color(\"black\")\n    union(){\n        // Main tube\n        translate([0,0,10])\n            rotate([0,90,0])\n                cylinder(h=35, d=3);\n\n        // Seat rail\n        rotate([0,-20,0])\n            translate([15,0,12])\n                rotate([0,90,0])\n                    cylinder(h=25, d=2);\n\n        // Rear arm\n        translate([-15,0,5])\n            rotate([0,-30,0])\n                cylinder(h=20, d=2);\n    }\n}\n\nmodule seat(){\n    color(\"brown\")\n    translate([15,0,15])\n        scale([1,0.7,0.3])\n            sphere(d=15);\n}\n\nmodule tank(){\n    color(\"red\")\n    translate([5,0,20])\n        scale([1,0.6,0.5])\n            sphere(d=14);\n}\n\nmodule exhaust(){\n    color(\"gray\")\n    translate([-10,-8,5])\n        rotate([0,20,0])\n            cylinder(h=20, d=2);\n}\n\n// Assembly\nmodule motorcycle(){\n    // Frame\n    frame();\n\n    // Front wheel and fork\n    translate([18,0,5])\n        wheel();\n    fork(height=15, width=2, offset=8);\n\n    // Rear wheel\n    translate([-18,0,5])\n        wheel();\n\n    // Engine\n    translate([0,0,4])\n        engine();\n\n    // Tank\n    tank();\n\n    // Seat\n    seat();\n\n    // Exhaust\n    exhaust();\n\n    // Handlebars\n    color(\"black\")\n    translate([15,0,20])\n        rotate([0,0,45])\n            cylinder(h=15, d=1);\n    translate([15,0,20])\n        rotate([0,0,-45])\n            cylinder(h=15, d=1);\n}\n\n// Scale to fit 3D printer bed\nscale(0.4)\n    motorcycle();",
    "renders": true
  },
  {
    "vehicle": "moped",
    "openscad_code": "// Realistic medium-complexity moped for 3D printing\n// Overall size ~80 mm long\n\n$fn = 32;\nwheel_r = 12;\nwheel_w = 4;\nbody_h = 20;\nbody_l = 35;\nbody_w = 15;\nmirror_th = 0.8;\n\nmodule wheel(tyre_th = 1.5) {\n    difference() {\n        cylinder(r = wheel_r, h = wheel_w, center = true);\n        cylinder(r = wheel_r - tyre_th, h = wheel_w + 0.1, center = true);\n    }\n    cylinder(r1 = wheel_r - tyre_th, r2 = 3, h = 2, center = true);\n}\n\nmodule fork() {\n    for (side = [-1, 1])\n        translate([side * 2, 0, 0])\n            cylinder(r = 1, h = 18);\n}\n\nmodule handlebar() {\n    translate([0, 0, 18])\n        rotate([0, 90, 0])\n            cylinder(r = 1.2, h = 22);\n    translate([0, 11, 18])\n        rotate([0, 90, 0])\n            cylinder(r1 = 1.2, r2 = 1.2, h = 6);\n    translate([0, -11, 18])\n        rotate([0, 90, 0])\n            cylinder(r1 = 1.2, r2 = 1.2, h = 6);\n}\n\nmodule mirror() {\n    translate([0, 7, 0])\n        rotate([0, 30, 0])\n            cube([mirror_th, 8, 3], center = true);\n    translate([0, 11, 0])\n        sphere(r = 2);\n}\n\nmodule front_assembly() {\n    wheel();\n    translate([0, 0, wheel_r])\n        fork();\n    handlebar();\n    translate([5, 11, 25])\n        mirror();\n    translate([-5, 11, 25])\n        mirror();\n}\n\nmodule rear_assembly() {\n    translate([0, body_l - 10, 0])\n        wheel();\n}\n\nmodule body() {\n    hull() {\n        translate([0, -5, wheel_r])\n            cube([body_w, body_l, body_h], center = true);\n        translate([0, body_l - 10, wheel_r])\n            cube([body_w * 0.8, 10, body_h * 0.8], center = true);\n    }\n    // seat\n    translate([0, 10, wheel_r + body_h / 2 + 2])\n        cube([body_w * 0.7, 15, 4], center = true);\n    // headlight\n    translate([0, -body_l / 2 - 1, wheel_r + body_h / 2])\n        sphere(r = 3);\n    // engine cover\n    translate([0, 0, wheel_r])\n        cube([body_w * 0.6, 10, 6], center = true);\n}\n\nmodule exhaust() {\n    translate([body_w / 2 + 2, body_l / 2, wheel_r - 3])\n        rotate([0, 90, 0])\n            cylinder(r = 1, h = 20);\n}\n\n// main assembly\ntranslate([0, 0, wheel_r])\n    union() {\n        body();\n        translate([0, -body_l / 2 + 5, 0])\n            front_assembly();\n        rear_assembly();\n        exhaust();\n    }",
    "renders": true
  },
  {
    "vehicle": "scooter",
    "openscad_code": "// Realistic 3D-printable scooter – medium complexity\n// Overall length ≈ 85 mm, height ≈ 45 mm, width ≈ 30 mm\n\n$fn=32;\n\n// ---------- parameters ----------\nwheel_d        = 20;\nwheel_w        = 4;\ndeck_l         = 55;   // along X\ndeck_w         = 25;   // along Y\ndeck_t         = 3;\nsteering_h     = 45;\nbar_w          = 22;\n\n// ---------- modules ----------\nmodule wheel() {\n    difference() {\n        cylinder(h=wheel_w, d=wheel_d, center=true);\n        translate([0, 0, -wheel_w/2-1])\n            cylinder(h=wheel_w+2, d=4, center=false); // axle hole\n    }\n}\n\nmodule fork() {\n    // two side plates\n    plate_h = 20;\n    plate_t = 3;\n    for(side=[-1,1])\n        translate([side*(deck_w/2 - plate_t/2), 0, plate_h/2])\n            cube([plate_t, 4, plate_h], center=true);\n    \n    // front arch\n    hull() {\n        translate([0, 2, plate_h])\n            sphere(d=6);\n        translate([0, -2, plate_h])\n            sphere(d=6);\n    }\n}\n\nmodule deck() {\n    difference() {\n        // main board\n        cube([deck_l, deck_w, deck_t], center=false);\n        // rear wheel cutouts\n        for(side=[-1,1])\n            translate([deck_l-12, side*(deck_w/2 - wheel_w/2 - 1), deck_t])\n                cube([wheel_d+2, wheel_w+2, deck_t+1]);\n    }\n    \n    // underside ribs for strength\n    rib_w = 3;\n    rib_h = 2;\n    for(x=[10:15:deck_l-20])\n        translate([x+rib_w/2, deck_w/2-rib_w/2, -rib_h])\n            cube([rib_w, rib_w, rib_h]);\n}\n\nmodule steering() {\n    // vertical post\n    translate([deck_l-15, 0, deck_t])\n        cylinder(h=steering_h, d=6, center=false);\n    \n    // T-handlebar\n    translate([deck_l-15, 0, deck_t+steering_h])\n        rotate([90,0,0])\n            cylinder(h=bar_w, d=5, center=true);\n}\n\n// ---------- assembly ----------\nunion() {\n    // rear wheels\n    for(side=[-1,1])\n        translate([deck_l-12, side*(deck_w/2 - wheel_w/2 - 1), deck_t/2])\n            rotate([90,0,0])\n                wheel();\n    \n    // front wheel\n    translate([deck_l-15, 0, deck_t/2])\n        rotate([90,0,0])\n            wheel();\n    \n    deck();\n    fork();\n    steering();\n}",
    "renders": true
  },
  {
    "vehicle": "bicycle",
    "openscad_code": "// Realistic 3D printable bicycle – medium complexity\n// Approx. 85 mm long, 45 mm tall, 20 mm wide\n\n// Frame wall thickness\nwall = 2;\n\n// Frame tubes module\nmodule tube(r,length) {\n    rotate([0,90,0])\n    cylinder(h=length, r=r, $fn=20);\n}\n\n// Wheel module\nmodule wheel(od, width) {\n    difference() {\n        // tire\n        cylinder(h=width, r=od/2, $fn=50);\n        // rim cavity\n        translate([0,0,wall])\n        cylinder(h=width-wall*2, r=od/2-2, $fn=40);\n        // hub hole\n        translate([0,0,-1])\n        cylinder(h=width+2, r=2.5, $fn=16);\n    }\n    // spokes (simple X)\n    for(a=[0,90])\n    rotate([0,0,a])\n    cube([od-4, 1, width], center=true);\n}\n\n// Crankset module\nmodule crank() {\n    difference() {\n        union() {\n            // chainring\n            cylinder(h=wall, r=10, $fn=36);\n            // arms\n            for(a=[0,120,240])\n            rotate([0,0,a])\n            translate([7,0,0])\n            cube([14, 3, wall], center=true);\n        }\n        // cutouts\n        cylinder(h=wall+1, r=8.5, $fn=36);\n        for(a=[0,120,240])\n        rotate([0,0,a])\n        translate([7,0,-1])\n        cube([12, 2.5, wall+2], center=true);\n    }\n}\n\n// Frame\nmodule frame() {\n    union() {\n        // top tube\n        tube(2.5, 35);\n        // down tube\n        rotate([0,0,30])\n        translate([10,-6,0])\n        tube(2.5, 40);\n        // seat tube\n        rotate([0,0,-15])\n        translate([-12,0,0])\n        tube(2.5, 28);\n        // seat stays\n        translate([0,-20,0])\n        rotate([0,0,18])\n        tube(2, 30);\n        mirror([1,0,0])\n        translate([0,-20,0])\n        rotate([0,0,18])\n        tube(2, 30);\n        // chain stays\n        translate([0,-20,0])\n        rotate([0,0,-10])\n        tube(2, 25);\n        mirror([1,0,0])\n        translate([0,-20,0])\n        rotate([0,0,-10])\n        tube(2, 25);\n        // head tube\n        translate([17,0,0])\n        rotate([0,90,0])\n        cylinder(h=8, r=3.5, $fn=20);\n        // bottom bracket shell\n        translate([0,-20,0])\n        rotate([0,90,0])\n        cylinder(h=8, r=4, $fn=20);\n    }\n}\n\n// Assemble bicycle\ncolor(\"silver\") frame();\ncolor(\"silver\") translate([0,-20,0]) rotate([0,90,0]) crank();\n\n// Wheels\ncolor(\"black\") translate([0,0,0]) rotate([0,90,0]) wheel(16, 4);\ncolor(\"black\") translate([0,-38,0]) rotate([0,90,0]) wheel(16, 4);\n\n// Seat\ncolor(\"black\") translate([-12,0,8]) rotate([0,90,0]) cylinder(h=12, r=1.5, $fn=12);\ncolor(\"black\") translate([-12,0,14]) rotate([0,0,0]) cube([12, 6, 2], center=true);\n\n// Handlebar\ncolor(\"black\") translate([17,0,12]) rotate([0,90,0]) cylinder(h=20, r=1.5, $fn=12);\ncolor(\"black\") translate([17,10,12]) rotate([0,0,90]) cylinder(h=16, r=1.5, $fn=12);\ncolor(\"black\") translate([17,-10,12]) rotate([0,0,90]) cylinder(h=16, r=1.5, $fn=12);\n\n// Pedals (simple blocks)\ncolor(\"gray\") translate([11,-20,0]) cube([6, 2, 3], center=true);\ncolor(\"gray\") translate([-11,-20,0]) cube([6, 2, 3], center=true);",
    "renders": true
  },
  {
    "vehicle": "bike",
    "openscad_code": "// Realistic style bike with medium complexity\n// Designed for 3D printing with reasonable wall thickness\n\n// Frame dimensions\nframe_length = 80;\nframe_height = 45;\nseat_tube_angle = 15;\nhead_tube_angle = -15;\n\n// Wheel dimensions\nwheel_radius = 18;\nwheel_width = 4;\ntire_thickness = 2;\nspoke_count = 12;\n\n// Component dimensions\nhandlebar_width = 35;\nhandlebar_diameter = 2;\nseat_width = 15;\nseat_length = 25;\ncrank_length = 12;\npedal_size = 8;\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main bike module\nmodule bike() {\n    union() {\n        frame();\n        rear_wheel();\n        front_wheel();\n        handlebars();\n        seat();\n        crankset();\n    }\n}\n\n// Bike frame with triangular structure\nmodule frame() {\n    // Seat tube\n    translate([0, 0, 0])\n        rotate([0, seat_tube_angle, 0])\n        cylinder(h=frame_height, r1=wall*1.5, r2=wall*1.5, $fn=8);\n    \n    // Down tube\n    translate([0, 0, 0])\n        rotate([0, 0, 0])\n        cylinder(h=frame_length*0.9, r1=wall*1.5, r2=wall*1.5, $fn=8);\n    \n    // Top tube\n    translate([0, 0, frame_height*0.7])\n        rotate([0, 0, 0])\n        cube([frame_length*0.55, wall*3, wall*3], center=true);\n    \n    // Head tube\n    translate([frame_length*0.6, 0, frame_height*0.7])\n        rotate([0, head_tube_angle, 0])\n        cylinder(h=wall*8, r1=wall*2, r2=wall*2, $fn=8);\n    \n    // Seat stays\n    translate([frame_length*0.15, 0, frame_height*0.2])\n        rotate([0, 0, 30])\n        cylinder(h=frame_length*0.4, r1=wall, r2=wall, $fn=6);\n    \n    // Chain stays\n    translate([0, 0, frame_height*0.1])\n        rotate([0, 0, -15])\n        cylinder(h=frame_length*0.35, r1=wall, r2=wall, $fn=6);\n}\n\n// Wheel with spokes\nmodule wheel() {\n    difference() {\n        // Tire\n        color(\"black\")\n        difference() {\n            cylinder(h=wheel_width, r=wheel_radius, $fn=32);\n            cylinder(h=wheel_width+1, r=wheel_radius-tire_thickness, $fn=32);\n        }\n        \n        // Hub\n        translate([0, 0, -1])\n            cylinder(h=wheel_width+2, r=wall*2, $fn=16);\n    }\n    \n    // Spokes\n    for(i = [0:spoke_count-1]) {\n        rotate([0, 0, i*360/spoke_count])\n        translate([0, 0, wheel_width/2])\n        cube([wall, wheel_radius-wall*3, wall], center=true);\n    }\n}\n\n// Rear wheel\nmodule rear_wheel() {\n    translate([frame_length*0.1, 0, 0])\n    rotate([90, 0, 0])\n    wheel();\n}\n\n// Front wheel\nmodule front_wheel() {\n    translate([frame_length*0.75, 0, 0])\n    rotate([90, 0, 0])\n    wheel();\n}\n\n// Handlebars with stem\nmodule handlebars() {\n    // Stem\n    translate([frame_length*0.6, 0, frame_height*0.7])\n    rotate([90+head_tube_angle, 0, 0])\n    cylinder(h=wall*10, r=wall, $fn=8);\n    \n    // Handlebar\n    translate([frame_length*0.6, 0, frame_height*0.7+wall*10])\n    rotate([0, 0, 0])\n    cube([handlebar_width, handlebar_diameter, handlebar_diameter], center=true);\n}\n\n// Bike seat\nmodule seat() {\n    translate([frame_length*0.2, 0, frame_height*0.7])\n    rotate([0, seat_tube_angle, 0])\n    cube([seat_length, wall*3, seat_width], center=true);\n}\n\n// Crankset with pedals\nmodule crankset() {\n    // Chainring\n    translate([0, 0, wheel_width])\n    difference() {\n        cylinder(h=wall*2, r=wall*5, $fn=32);\n        cylinder(h=wall*3, r=wall*3, $fn=32);\n        for(i = [0:4]) {\n            rotate([0, 0, i*72])\n            cube([wall*3, wall*5, wall*3], center=true);\n        }\n    }\n    \n    // Crank arm\n    translate([0, 0, wheel_width+wall])\n    rotate([0, 0, 0])\n    cube([wall*2, crank_length, wall*2], center=true);\n    \n    // Pedal\n    translate([0, crank_length, wheel_width+wall])\n    rotate([0, 0, 0])\n    cube([pedal_size, wall*2, pedal_size/2], center=true);\n    \n    // Second crank arm and pedal\n    translate([0, 0, -wheel_width-wall])\n    rotate([0, 0, 180])\n    cube([wall*2, crank_length, wall*2], center=true);\n    \n    translate([0, -crank_length, -wheel_width-wall])\n    rotate([0, 0, 180])\n    cube([pedal_size, wall*2, pedal_size/2], center=true);\n}\n\n// Render the bike\nbike();",
    "renders": true
  },
  {
    "vehicle": "sportbike",
    "openscad_code": "// Sportbike - Medium Complexity Realistic Style\n// Designed for 3D printing at ~80mm length\n\n// Overall scale factor\nscale_factor = 0.8;\n\nmodule sportbike() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        union() {\n            // Main frame\n            frame();\n            \n            // Front fork and wheel\n            translate([0, 25, 10]) rotate([0, 0, 0]) front_assembly();\n            \n            // Rear swingarm and wheel\n            translate([-35, -25, 8]) rotate([0, 0, 0]) rear_assembly();\n            \n            // Engine block\n            engine();\n            \n            // Exhaust pipes\n            exhaust();\n            \n            // Seat\n            seat();\n            \n            // Fuel tank\n            tank();\n            \n            // Windscreen\n            windscreen();\n            \n            // Mirrors\n            mirrors();\n        }\n    }\n}\n\nmodule frame() {\n    // Main frame spars\n    color(\"gray\") {\n        // Top frame tube\n        translate([-20, 0, 20]) rotate([0, -15, 0]) \n            cylinder(h=50, r1=2, r2=2, $fn=16);\n        \n        // Bottom frame rails\n        translate([-25, 0, 8]) rotate([0, -10, 0]) \n            cylinder(h=45, r1=2, r2=2, $fn=16);\n        \n        // Vertical support\n        translate([-5, 0, 14]) rotate([0, 0, 0]) \n            cylinder(h=12, r1=2, r2=2, $fn=16);\n    }\n}\n\nmodule front_assembly() {\n    // Fork tubes\n    color(\"silver\") {\n        for(i=[-1, 1]) {\n            translate([i*3, 0, 0]) \n                cylinder(h=25, r1=1.5, r2=1.5, $fn=12);\n        }\n        \n        // Front wheel\n        translate([0, 0, -12]) rotate([90, 0, 0]) \n            wheel(8);\n    }\n}\n\nmodule rear_assembly() {\n    // Swingarm\n    color(\"gray\") {\n        for(i=[-1, 1]) {\n            translate([i*4, 0, 0]) rotate([0, 10, 0]) \n                cylinder(h=25, r1=1.5, r2=1.5, $fn=12);\n        }\n        \n        // Rear wheel\n        translate([0, 0, -10]) rotate([90, 0, 0]) \n            wheel(10);\n    }\n}\n\nmodule wheel(diameter) {\n    // Tire\n    color(\"black\") {\n        difference() {\n            cylinder(h=4, r=diameter/2, $fn=32);\n            cylinder(h=5, r=diameter/2 - 1.5, $fn=32);\n        }\n    }\n    \n    // Rim\n    color(\"silver\") {\n        difference() {\n            cylinder(h=3, r=diameter/2 - 1.5, $fn=32);\n            cylinder(h=4, r=diameter/2 - 2.5, $fn=32);\n        }\n    }\n    \n    // Spokes\n    color(\"silver\") {\n        for(i=[0:30:360]) {\n            rotate([0, 0, i]) \n                cube([diameter/2 - 3, 0.5, 3], center=true);\n        }\n    }\n}\n\nmodule engine() {\n    color(\"darkgray\") {\n        // Engine block\n        translate([-15, 0, 8]) \n            cube([20, 12, 8], center=true);\n        \n        // Cylinder head\n        translate([-5, 0, 14]) \n            cube([8, 10, 6], center=true);\n    }\n}\n\nmodule exhaust() {\n    color(\"silver\") {\n        // Headers\n        for(i=[-2, 0, 2]) {\n            translate([-20, i*2, 6]) rotate([0, -20, 0]) \n                cylinder(h=15, r=1, $fn=12);\n        }\n        \n        // Muffler\n        translate([-35, 0, 4]) rotate([0, -10, 0]) \n            cylinder(h=20, r1=2, r2=1.5, $fn=16);\n    }\n}\n\nmodule seat() {\n    color(\"black\") {\n        // Seat base\n        translate([-15, 0, 16]) \n            cube([25, 12, 3], center=true);\n        \n        // Seat hump\n        translate([-25, 0, 18]) \n            cube([10, 10, 4], center=true);\n    }\n}\n\nmodule tank() {\n    color(\"red\") {\n        // Main tank\n        translate([-5, 0, 22]) rotate([0, -10, 0]) \n            scale([1, 0.8, 0.6]) \n                sphere(r=8, $fn=32);\n        \n        // Tank cap\n        translate([0, 0, 28]) \n            cylinder(h=2, r=2, $fn=16);\n    }\n}\n\nmodule windscreen() {\n    color(\"lightblue\") {\n        // Screen\n        translate([8, 0, 25]) rotate([0, -30, 0]) \n            cube([12, 15, 1.5], center=true);\n    }\n}\n\nmodule mirrors() {\n    color(\"black\") {\n        // Mirror stalks\n        for(i=[-1, 1]) {\n            translate([5, i*12, 22]) rotate([0, 0, i*15]) \n                cylinder(h=8, r=0.5, $fn=8);\n            \n            // Mirror heads\n            translate([5, i*20, 22]) rotate([0, 0, 0]) \n                cube([4, 3, 2], center=true);\n        }\n    }\n}\n\n// Generate the bike\nsportbike();",
    "renders": true
  },
  {
    "vehicle": "dirtbike",
    "openscad_code": "// Dirtbike - Realistic Medium Complexity\n// Designed for 3D printing, no overhangs, 1.2mm wall thickness\n\n$fn = 32;\n\nmodule wheel(diameter, width) {\n    difference() {\n        cylinder(d=width, h=diameter*0.8, center=true);\n        cylinder(d=width-2.4, h=diameter*0.8+0.1, center=true);\n    }\n    translate([0, 0, diameter*0.4]) {\n        cylinder(d=diameter, h=width, center=true);\n        cylinder(d=diameter-2.4, h=width+0.1, center=true);\n    }\n}\n\nmodule tire_tread(diameter, width) {\n    for(i=[0:15:359]) {\n        rotate([0, 0, i]) {\n            translate([diameter/2-1, 0, 0]) {\n                cube([2, 1.5, width], center=true);\n            }\n        }\n    }\n}\n\nmodule fork() {\n    union() {\n        // Upper fork tubes\n        translate([0, 0, 20]) cylinder(d=6, h=15);\n        translate([8, 0, 20]) cylinder(d=6, h=15);\n        \n        // Lower fork legs\n        translate([0, 0, 5]) cylinder(d=8, h=15);\n        translate([8, 0, 5]) cylinder(d=8, h=15);\n        \n        // Fork brace\n        translate([4, 0, 8]) cube([16, 3, 4], center=true);\n    }\n}\n\nmodule swingarm() {\n    difference() {\n        union() {\n            // Main arms\n            translate([0, 0, 0]) cube([35, 4, 8], center=true);\n            translate([0, 0, 0]) cube([4, 15, 8], center=true);\n            \n            // Axle mount\n            translate([15, 0, 0]) cylinder(d=12, h=8, center=true);\n        }\n        \n        // Hollow out\n        translate([0, 0, 0]) cube([30, 2.5, 5.5], center=true);\n    }\n}\n\nmodule frame() {\n    // Main frame tubes\n    hull() {\n        translate([-5, 0, 10]) cylinder(d=4, h=1);\n        translate([15, 0, 25]) cylinder(d=4, h=1);\n        translate([20, 0, 15]) cylinder(d=4, h=1);\n        translate([5, 0, 0]) cylinder(d=4, h=1);\n    }\n    \n    hull() {\n        translate([-5, 0, 10]) cylinder(d=4, h=1);\n        translate([15, 0, 25]) cylinder(d=4, h=1);\n        translate([15, 0, 35]) cylinder(d=4, h=1);\n    }\n    \n    // Engine case\n    difference() {\n        translate([5, 0, 7]) cube([20, 12, 14], center=true);\n        translate([5, 0, 5]) cube([18, 10, 10], center=true);\n    }\n}\n\nmodule seat() {\n    difference() {\n        hull() {\n            translate([5, 0, 25]) cylinder(d=8, h=1);\n            translate([15, 0, 25]) cylinder(d=8, h=1);\n            translate([15, 0, 35]) cylinder(d=8, h=1);\n        }\n        translate([10, 0, 25]) cube([12, 10, 12], center=true);\n    }\n}\n\nmodule handlebars() {\n    rotate([0, 90, 0]) {\n        cylinder(d=5, h=25, center=true);\n    }\n    translate([0, -12.5, 25]) rotate([0, 0, -20]) cube([3, 25, 3], center=true);\n    translate([0, 12.5, 25]) rotate([0, 0, 20]) cube([3, 25, 3], center=true);\n}\n\nmodule exhaust() {\n    hull() {\n        translate([5, 6, 5]) cylinder(d=3, h=1);\n        translate([15, 10, 10]) cylinder(d=3, h=1);\n        translate([25, 12, 15]) cylinder(d=3, h=1);\n    }\n    translate([25, 12, 15]) rotate([0, 90, 0]) cylinder(d=5, h=8);\n}\n\nmodule fender(x, z) {\n    rotate([90, 0, 0]) {\n        translate([x, 0, z]) {\n            difference() {\n                scale([1, 0.3, 1]) cylinder(d=25, h=3);\n                translate([0, -2, 0]) cube([30, 4, 6], center=true);\n            }\n        }\n    }\n}\n\n// Main assembly\nscale(0.8) {\n    // Front wheel assembly\n    translate([-15, 0, 0]) {\n        wheel(24, 4);\n        tire_tread(24, 5);\n    }\n    \n    // Rear wheel assembly\n    translate([15, 0, 0]) {\n        wheel(24, 4);\n        tire_tread(24, 5);\n    }\n    \n    // Frame and components\n    frame();\n    \n    // Suspension\n    translate([-15, 0, 0]) fork();\n    translate([15, 0, 0]) swingarm();\n    \n    // Body parts\n    seat();\n    handlebars();\n    exhaust();\n    \n    // Fenders\n    fender(-12, 12);\n    fender(12, 8);\n}",
    "renders": true
  },
  {
    "vehicle": "chopper",
    "openscad_code": "// Chopper Motorcycle - Medium complexity 3D printable model\n// Dimensions: approx 95mm long x 35mm wide x 45mm high\n\n$fn = 32;\n\nmodule frame() {\n    // Main backbone tube\n    rotate([0, -8, 0])\n    translate([0, 0, 10])\n    cylinder(h=40, d=6);\n    \n    // Down tube\n    translate([-15, 0, 5])\n    rotate([60, 0, 0])\n    cylinder(h=25, d=5);\n    \n    // Seat support\n    translate([15, 0, 15])\n    rotate([-20, 0, 0])\n    cylinder(h=20, d=4);\n    \n    // Engine mount cross tube\n    translate([0, 0, 5])\n    rotate([90, 0, 0])\n    cylinder(h=20, d=4);\n}\n\nmodule front_fork() {\n    // Triple tree top\n    translate([-20, 0, 25])\n    cube([8, 4, 6], center=true);\n    \n    // Triple tree bottom\n    translate([-20, 0, 18])\n    cube([8, 4, 6], center=true);\n    \n    // Fork tubes\n    for(y = [-2.5, 2.5]) {\n        translate([-20, y, 21.5])\n        cylinder(h=35, d=3);\n    }\n}\n\nmodule rear_swingarm() {\n    // Left swingarm\n    translate([20, -6, 5])\n    rotate([0, 10, 0])\n    cube([30, 3, 4]);\n    \n    // Right swingarm\n    translate([20, 6, 5])\n    rotate([0, 10, 0])\n    cube([30, 3, 4]);\n}\n\nmodule engine() {\n    // Engine block\n    translate([-5, 0, 2])\n    cube([15, 12, 10], center=true);\n    \n    // Cylinders\n    for(i = [0, 1]) {\n        translate([2, -3 + i*6, 10])\n        cylinder(h=8, d=6);\n    }\n    \n    // Oil tank\n    translate([10, 8, 8])\n    cylinder(h=12, d=5);\n}\n\nmodule wheels() {\n    // Front wheel\n    translate([-20, 0, 3])\n    rotate([90, 0, 0])\n    cylinder(h=6, d=18);\n    \n    // Front tire\n    translate([-20, 0, 3])\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h=7, d=22);\n        cylinder(h=8, d=18);\n    }\n    \n    // Rear wheel\n    translate([35, 0, 3])\n    rotate([90, 0, 0])\n    cylinder(h=8, d=20);\n    \n    // Rear tire\n    translate([35, 0, 3])\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h=9, d=24);\n        cylinder(h=10, d=20);\n    }\n}\n\nmodule tank() {\n    // Main tank\n    translate([5, 0, 18])\n    rotate([0, -5, 0])\n    scale([1.5, 1, 0.8])\n    sphere(d=15);\n    \n    // Tank cap\n    translate([10, 0, 24])\n    cylinder(h=2, d=3);\n}\n\nmodule seat() {\n    // Seat base\n    translate([15, 0, 15])\n    cube([20, 10, 3], center=true);\n    \n    // Seat cushion\n    translate([15, 0, 18])\n    scale([1, 1, 0.5])\n    sphere(d=12);\n}\n\nmodule handlebars() {\n    // Handlebar clamp\n    translate([-20, 0, 28])\n    cube([6, 4, 4], center=true);\n    \n    // Bars\n    rotate([0, 0, -15])\n    translate([-20, 0, 30])\n    cube([30, 3, 3], center=true);\n}\n\nmodule exhaust() {\n    // Headers\n    for(y = [-3, 3]) {\n        translate([0, y, 3])\n        rotate([0, 10, 0])\n        cylinder(h=25, d=2);\n    }\n    \n    // Muffler\n    translate([20, 0, 3])\n    rotate([0, 10, 0])\n    cylinder(h=20, d=4);\n}\n\nmodule fenders() {\n    // Front fender\n    translate([-20, 0, 8])\n    rotate([0, 90, 0])\n    difference() {\n        cylinder(h=15, d=25);\n        translate([0, 0, -1])\n        cylinder(h=17, d=20);\n    }\n    \n    // Rear fender\n    translate([30, 0, 8])\n    rotate([0, 90, 0])\n    difference() {\n        cylinder(h=20, d=28);\n        translate([0, 0, -1])\n        cylinder(h=22, d=22);\n    }\n}\n\n// Assemble the chopper\nunion() {\n    frame();\n    front_fork();\n    rear_swingarm();\n    engine();\n    wheels();\n    tank();\n    seat();\n    handlebars();\n    exhaust();\n    fenders();\n}",
    "renders": true
  },
  {
    "vehicle": "touring",
    "openscad_code": "// Realistic Touring Kayak (Medium Complexity)\n// Overall length ~95mm\n\n// Hull parameters\nhull_length = 85;\nhull_width = 25;\nhull_height = 12;\ndeck_height = 8;\n\n// Cockpit parameters\ncockpit_length = 25;\ncockpit_width = 15;\ncockpit_offset = -10;\n\n// Bow and stern heights\nbow_height = 15;\nstern_height = 13;\n\n// Hull shape module\nmodule hull_shape() {\n    // Main hull body\n    difference() {\n        hull_union();\n        \n        // Cockpit cutout\n        translate([cockpit_offset, 0, deck_height])\n            scale([1, 0.8, 1])\n            cylinder(h=hull_height + 2, d=cockpit_width, $fn=32);\n    }\n}\n\nmodule hull_union() {\n    union() {\n        // Central hull section\n        translate([0, 0, hull_height/2])\n            scale([1, 0.6, 1])\n            cube([hull_length, hull_width, hull_height], center=true);\n        \n        // Bow tapered section\n        translate([hull_length/2 - 10, 0, hull_height/2])\n            scale([0.4, 0.5, 1.2])\n            cube([20, hull_width, hull_height], center=true);\n        \n        // Stern tapered section\n            translate([-hull_length/2 + 10, 0, hull_height/2])\n            scale([0.4, 0.5, 1.2])\n            cube([20, hull_width, hull_height], center=true);\n        \n        // Deck dome\n        translate([0, 0, deck_height + hull_height/2])\n            scale([1, 0.7, 0.5])\n            sphere(d=hull_width + 10, $fn=64);\n        \n        // Bow rise\n        translate([hull_length/2 - 5, 0, bow_height/2])\n            scale([0.3, 0.6, 1.5])\n            cube([10, hull_width - 5, bow_height], center=true);\n        \n        // Stern rise\n        translate([-hull_length/2 + 5, 0, stern_height/2])\n            scale([0.3, 0.6, 1.3])\n            cube([10, hull_width - 5, stern_height], center=true);\n    }\n}\n\n// Deck rigging loops\nmodule deck_rigging() {\n    for(i = [-1:1]) {\n        // Forward deck lines\n        translate([20 + i*10, hull_width/2 - 2, deck_height + 2])\n            rotate([90, 0, 0])\n            cylinder(h=3, d=2, $fn=16);\n        \n        translate([20 + i*10, -hull_width/2 + 2, deck_height + 2])\n            rotate([90, 0, 0])\n            cylinder(h=3, d=2, $fn=16);\n        \n        // Rear deck lines\n        translate([-20 + i*10, hull_width/2 - 2, deck_height + 2])\n            rotate([90, 0, 0])\n            cylinder(h=3, d=2, $fn=16);\n        \n        translate([-20 + i*10, -hull_width/2 + 2, deck_height + 2])\n            rotate([90, 0, 0])\n            cylinder(h=3, d=2, $fn=16);\n    }\n}\n\n// Seat inside cockpit\nmodule seat() {\n    translate([cockpit_offset - 5, 0, 2])\n        cube([15, cockpit_width - 4, 1]);\n}\n\n// Foot brace rails\nmodule foot_braces() {\n    // Left rail\n    translate([hull_length/2 - 15, hull_width/2 - 2, 2])\n        cube([20, 1, 2]);\n    \n    // Right rail\n    translate([hull_length/2 - 15, -hull_width/2 + 1, 2])\n        cube([20, 1, 2]);\n}\n\n// Skeg box (simplified)\nmodule skeg_box() {\n    translate([-hull_length/2 + 5, 0, 1])\n        cube([8, 3, 2]);\n}\n\n// Main assembly\nhull_shape();\ndeck_rigging();\nseat();\nfoot_braces();\nskeg_box();",
    "renders": true
  },
  {
    "vehicle": "naked",
    "openscad_code": "// Naked human figure - realistic style, medium complexity\n// Approximate height: 80mm\n// Designed for 3D printing with minimal overhangs\n\n// Overall scale factor\nscale_factor = 1;\n\n// Body proportions\nhead_height = 12 * scale_factor;\ntorso_height = 25 * scale_factor;\nlegs_height = 35 * scale_factor;\narms_length = 30 * scale_factor;\n\n// Basic dimensions\nhead_diameter = 10 * scale_factor;\nneck_diameter = 4 * scale_factor;\nshoulder_width = 14 * scale_factor;\nchest_width = 12 * scale_factor;\nwaist_width = 10 * scale_factor;\nhip_width = 14 * scale_factor;\n\n// Create the complete figure\nmodule naked_human() {\n    union() {\n        // Head\n        translate([0, 0, legs_height + torso_height + neck_diameter/2 + head_height/2]) {\n            sphere(d = head_diameter, $fn = 32);\n            \n            // Eyes\n            translate([-head_diameter/4, head_diameter/2 - 1, head_height/6])\n                sphere(d = 1.5 * scale_factor, $fn = 16);\n            translate([head_diameter/4, head_diameter/2 - 1, head_height/6])\n                sphere(d = 1.5 * scale_factor, $fn = 16);\n                \n            // Nose\n            translate([0, head_diameter/2 - 0.5, 0])\n                cylinder(h = 2 * scale_factor, d1 = 2 * scale_factor, d2 = 1 * scale_factor, $fn = 8);\n                \n            // Mouth\n            translate([0, head_diameter/2 - 0.5, -head_height/4])\n                cube([3 * scale_factor, 0.5 * scale_factor, 1 * scale_factor]);\n        }\n        \n        // Neck\n        translate([0, 0, legs_height + torso_height + neck_diameter/2])\n            cylinder(h = neck_diameter, d = neck_diameter, $fn = 16);\n        \n        // Torso\n        difference() {\n            union() {\n                // Chest\n                translate([0, 0, legs_height + torso_height/2])\n                    scale([chest_width/2, chest_width/3, torso_height/2])\n                        sphere(d = chest_width, $fn = 32);\n                        \n                // Abdomen\n                translate([0, 0, legs_height + torso_height/4])\n                    scale([waist_width/2, waist_width/3, torso_height/4])\n                        sphere(d = waist_width, $fn = 32);\n            }\n            \n            // Remove bottom half to make it flat\n            translate([0, 0, legs_height - 1])\n                cube([chest_width*2, chest_width*2, 2], center = true);\n        }\n        \n        // Hips\n        translate([0, 0, legs_height])\n            scale([hip_width/2, hip_width/3, 8 * scale_factor])\n                sphere(d = hip_width, $fn = 32);\n        \n        // Legs\n        module leg(x_offset) {\n            translate([x_offset, 0, legs_height/2]) {\n                // Thigh\n                cylinder(h = legs_height/2, d1 = 6 * scale_factor, d2 = 4 * scale_factor, $fn = 16);\n                \n                // Calf\n                translate([0, 0, -legs_height/2])\n                    cylinder(h = legs_height/2, d1 = 4 * scale_factor, d2 = 3 * scale_factor, $fn = 16);\n                    \n                // Foot\n                translate([0, 2 * scale_factor, -legs_height])\n                    scale([3 * scale_factor, 7 * scale_factor, 2 * scale_factor])\n                        cube(center = true);\n            }\n        }\n        \n        // Create both legs\n        leg(hip_width/3);\n        leg(-hip_width/3);\n        \n        // Arms\n        module arm(x_pos, angle) {\n            translate([x_pos, 0, legs_height + torso_height - 5 * scale_factor]) {\n                rotate([0, angle, 0]) {\n                    // Upper arm\n                    cylinder(h = arms_length/2, d = 3 * scale_factor, $fn = 16);\n                    \n                    // Forearm\n                    translate([0, 0, -arms_length/2])\n                        cylinder(h = arms_length/2, d = 2.5 * scale_factor, $fn = 16);\n                        \n                    // Hand\n                    translate([0, 0, -arms_length])\n                        scale([2.5 * scale_factor, 4 * scale_factor, 1 * scale_factor])\n                            cube(center = true);\n                }\n            }\n        }\n        \n        // Create both arms\n        arm(shoulder_width/2, 15);\n        arm(-shoulder_width/2, -15);\n    }\n}\n\n// Generate the figure\nnaked_human();",
    "renders": true
  },
  {
    "vehicle": "standard",
    "openscad_code": "// Standard/Flagpole assembly\n// Overall height ≈ 95 mm, base diameter ≈ 35 mm\n// Optimized for FDM printing: no steep overhangs, 1.2 mm walls\n\n$fn = 36;\n\nmodule flag_base(){\n    // Bottom plate, 2 mm thick\n    cylinder(h = 2, d = 35, center = false);\n\n    // Decorative ring 1 mm above plate\n    translate([0,0,2])\n        cylinder(h = 3, d1 = 33, d2 = 30, center = false);\n\n    // Central socket 4 mm deep, 5 mm diameter\n    translate([0,0,0])\n        difference(){\n            cylinder(h = 6, d = 9, center = false);\n            cylinder(h = 4.5, d = 5.2, center = false); // 0.2 mm clearance\n        }\n}\n\nmodule pole(){\n    // Main pole 3 mm diameter, 75 mm tall\n    cylinder(h = 75, d = 3, center = false);\n    \n    // Ball finial on top\n    translate([0,0,75])\n        sphere(d = 4);\n}\n\nmodule flag(){\n    // Flag cloth 15 mm x 10 mm x 0.8 mm\n    // Chamfered bottom rear to avoid overhang\n    translate([1.5, -7.5, 65]){\n        difference(){\n            cube([15, 10, 0.8]);\n            translate([0, 0, -0.1])\n                cube([15, 2, 1]); // rear chamfer\n        }\n    }\n\n    // Two grommet rings\n    for(z = [67, 73]){\n        translate([0, -7.5, z])\n            rotate([90,0,0])\n                cylinder(h = 1.2, d = 2, center = true);\n    }\n}\n\nmodule standard_assembly(){\n    union(){\n        // Base\n        flag_base();\n\n        // Pole inserted into socket\n        translate([0,0,4])\n            pole();\n\n        // Flag attached to pole\n        flag();\n    }\n}\n\n// Render the complete standard\nstandard_assembly();",
    "renders": true
  },
  {
    "vehicle": "dualsport",
    "openscad_code": "// Dual-sport motorcycle - realistic style, medium complexity\n// Overall length ~80 mm, printable with minimal supports\n\n$fn = 32;           // Smooth curves\nwall = 2;           // General wall thickness\n\nmodule main() {\n    // Frame\n    color(\"DarkGray\")\n    frame();\n\n    // Engine & skid plate\n    color(\"SlateGray\")\n    engine();\n\n    // Front fork\n    color(\"Silver\")\n    front_fork();\n\n    // Rear shock & swingarm\n    color(\"Silver\")\n    rear_suspension();\n\n    // Wheels\n    color(\"Black\")\n    wheels();\n\n    // Tank & seat\n    color(\"Red\")\n    tank_seat();\n\n    // Headlight & dash\n    color(\"Black\")\n    front_assembly();\n\n    // Exhaust\n    color(\"SlateGray\")\n    exhaust();\n}\n\n// Main frame tubes\nmodule frame() {\n    // Down tube\n    translate([-5,0,15])\n        rotate([0,30,0])\n        cylinder(h=30, d1=3, d2=3);\n\n    // Seat rail\n    translate([15,0,20])\n        rotate([0,-10,0])\n        cylinder(h=35, d1=3, d2=2);\n\n    // Rear subframe brace\n    translate([35,0,22])\n        rotate([0,-20,0])\n        cylinder(h=15, d1=2, d2=2);\n\n    // Cross braces\n    for(i=[0,20]) {\n        translate([i,0,15])\n            rotate([90,0,0])\n            cylinder(h=8, d=2);\n    }\n}\n\n// Engine block and skid plate\nmodule engine() {\n    // Engine block\n    difference() {\n        translate([5,-4,8])\n            cube([12,8,10], center=true);\n        // Starter cavity\n        translate([8,-4,10])\n            cube([4,4,3], center=true);\n    }\n\n    // Skid plate\n    hull() {\n        translate([0,-4,4])\n            cube([25,8,wall]);\n        translate([25,-4,4])\n            cube([25,8,wall]);\n    }\n}\n\n// Front suspension fork\nmodule front_fork() {\n    // Triple clamp\n    translate([-18,0,25])\n        cube([6,12,6], center=true);\n\n    // Fork tubes\n    for(y=[-3,3]) {\n        translate([-22,y,12])\n            cylinder(h=15, d=2);\n    }\n\n    // Front fender\n    translate([-22,0,8])\n        rotate([90,0,0])\n        cylinder(h=12, d1=12, d2=8);\n}\n\n// Rear suspension swingarm & shock\nmodule rear_suspension() {\n    // Swingarm\n    hull() {\n        translate([20,0,8])\n            cube([4,6,2], center=true);\n        translate([35,0,8])\n            cube([4,6,2], center=true);\n    }\n\n    // Shock absorber\n    translate([25,-5,12])\n        rotate([20,0,0])\n        cylinder(h=15, d1=2, d2=2);\n}\n\n// Wheels with knobby tires\nmodule wheels() {\n    for(pos=[-22, 30]) {\n        // Rim\n        translate([pos,0,5])\n            difference() {\n                cylinder(h=6, d=12);\n                cylinder(h=7, d=8);\n            }\n        // Tire\n        translate([pos,0,5])\n            cylinder(h=7, d=14);\n        // Spokes\n        for(a=[0:45:315]) {\n            rotate([0,0,a])\n                translate([pos,5,5])\n                    cube([1,2,6], center=true);\n        }\n    }\n}\n\n// Fuel tank and seat\nmodule tank_seat() {\n    // Tank\n    translate([2,-5,18])\n        rotate([0,-10,0])\n        cube([10,10,8]);\n\n    // Seat\n    translate([15,-5,22])\n        rotate([0,-5,0])\n        cube([20,10,5]);\n}\n\n// Headlight and handlebars\nmodule front_assembly() {\n    // Headlight\n    translate([-25,0,20])\n        sphere(d=6);\n\n    // Handlebars\n    translate([-20,0,24])\n        rotate([0,0,30])\n        cylinder(h=20, d=2);\n}\n\n// Exhaust pipe\nmodule exhaust() {\n    hull() {\n        translate([5,5,8])\n            sphere(d=3);\n        translate([15,8,5])\n            sphere(d=3);\n    }\n}\n\nmain();",
    "renders": true
  },
  {
    "vehicle": "adventure",
    "openscad_code": "// Adventure: Explorer's Compass with Map Scroll and Magnifying Glass\n// Realistic style, medium complexity, 3D-printable\n\n// Overall size target: ~80 mm\n\n$fa = 2;\n$fs = 0.5;\n\n// Wall thickness\nth = 1.5;\n\nmodule compass_body() {\n    // Outer ring\n    difference() {\n        cylinder(h = 8, d = 35, center = true);\n        cylinder(h = 9, d = 30, center = true);\n    }\n    \n    // Compass face\n    translate([0, 0, 4.2])\n        color(\"white\")\n        cylinder(h = 0.5, d = 29.5, center = true);\n    \n    // Needle\n    translate([0, 0, 4.5])\n        rotate([0, 0, 45])\n        union() {\n            color(\"red\") cube([20, 2, 1], center = true);\n            color(\"gray\") cube([20, 2, 1], center = true);\n            color(\"gray\") translate([-10, 0, 0]) cube([8, 2, 1], center = true);\n        }\n    \n    // Glass cover\n    translate([0, 0, 5.5])\n        cylinder(h = 1.5, d = 29, center = true);\n    \n    // Pivot pin\n    translate([0, 0, 4.5])\n        cylinder(h = 2, d = 2, center = true);\n}\n\nmodule map_scroll() {\n    // Scroll body\n    rotate([90, 0, 90])\n    difference() {\n        cylinder(h = 50, d = 12, center = true);\n        cylinder(h = 52, d = 9, center = true);\n    }\n    \n    // Map texture rings\n    for (i = [-20:5:20]) {\n        translate([i, 0, 0])\n        rotate([90, 0, 90])\n        intersection() {\n            cylinder(h = 50, d = 12.2, center = true);\n            translate([0, 0, 6])\n            cube([1, 12, 1], center = true);\n        }\n    }\n    \n    // End caps\n    translate([-25, 0, 0])\n    rotate([90, 0, 90])\n    cylinder(h = 1.5, d = 14, center = true);\n    \n    translate([25, 0, 0])\n    rotate([90, 0, 90])\n    cylinder(h = 1.5, d = 14, center = true);\n}\n\nmodule magnifying_glass() {\n    // Handle\n    translate([0, 0, -22])\n    rotate([0, 90, 0])\n    cylinder(h = 40, d = 6, center = true);\n    \n    // Handle grip rings\n    for (i = [-15:5:15]) {\n        translate([i, 0, -22])\n        rotate([0, 90, 0])\n        cylinder(h = 7, d = 7, center = true);\n    }\n    \n    // Frame\n    translate([0, 0, 0])\n    rotate([0, 0, 0])\n    difference() {\n        cylinder(h = 3, d = 28, center = true);\n        cylinder(h = 4, d = 24, center = true);\n    }\n    \n    // Lens\n    translate([0, 0, 1.7])\n    cylinder(h = 1, d = 23.5, center = true);\n}\n\n// Assembly\ntranslate([0, -20, 0])\ncompass_body();\n\ntranslate([0, 25, 0])\nrotate([0, 0, 30])\nmap_scroll();\n\ntranslate([0, 0, 15])\nmagnifying_glass();",
    "renders": true
  },
  {
    "vehicle": "enduro",
    "openscad_code": "// Enduro motorcycle - realistic style, medium complexity\n// Size: 1:24 scale (~90mm length)\n\n$fn = 64;\n\n// Main assembly\nmodule enduro() {\n    // Main frame\n    union() {\n        // Rear frame triangle\n        difference() {\n            hull() {\n                translate([-15, -15, 10]) cube([5, 30, 40]);\n                translate([15, -15, 10]) cube([5, 30, 40]);\n                translate([0, -5, 30]) cube([5, 10, 10]);\n            }\n            \n            // Battery compartment\n            translate([0, -10, 15]) cube([20, 20, 15]);\n        }\n        \n        // Front frame\n        cylinder(h = 30, r1 = 5, r2 = 5);\n        translate([0, 0, 30]) rotate([0, 90, 0]) cylinder(h = 20, r = 5);\n    }\n    \n    // Engine block\n    translate([-5, 0, 10]) {\n        difference() {\n            cube([20, 15, 15]);\n            // Cooling fins\n            for(i = [0:3]) {\n                translate([2, 2 + i*3, 5]) cube([16, 2, 10]);\n            }\n        }\n    }\n    \n    // Gas tank\n    translate([0, 15, 35]) {\n        hull() {\n            cube([15, 20, 10]);\n            translate([2.5, 5, 5]) cube([10, 10, 5]);\n        }\n    }\n    \n    // Seat\n    translate([0, 15, 25]) {\n        difference() {\n            hull() {\n                cube([20, 25, 8]);\n                translate([0, 10, 5]) cube([20, 5, 5]);\n            }\n            // Seat texture grooves\n            for(i = [0:4]) {\n                translate([2 + i*4, 2, 0]) cube([2, 21, 8]);\n            }\n        }\n    }\n    \n    // Rear wheel assembly\n    translate([-25, 0, 12]) {\n        // Swingarm\n        hull() {\n            translate([0, -5, 0]) cube([5, 10, 5]);\n            translate([0, -5, 5]) cube([5, 10, 5]);\n        }\n        \n        // Wheel\n        rotate([90, 0, 0]) {\n            difference() {\n                cylinder(h = 8, r = 15);\n                cylinder(h = 9, r = 8);\n                \n                // Spokes\n                for(i = [0:7]) {\n                    rotate([0, 0, i*45]) {\n                        translate([0, 11.5, 4]) cube([2, 3, 2]);\n                    }\n                }\n            }\n        }\n        \n        // Tire\n        rotate([90, 0, 0]) {\n            difference() {\n                cylinder(h = 10, r = 17);\n                cylinder(h = 11, r = 15);\n            }\n        }\n    }\n    \n    // Front wheel assembly\n    translate([25, 0, 25]) {\n        // Fork tubes\n        for(side = [-1, 1]) {\n            translate([0, side*3, 0]) {\n                cylinder(h = 20, r = 2);\n            }\n        }\n        \n        // Wheel (same as rear)\n        rotate([90, 0, 0]) {\n            difference() {\n                cylinder(h = 8, r = 15);\n                cylinder(h = 9, r = 8);\n                \n                for(i = [0:7]) {\n                    rotate([0, 0, i*45]) {\n                        translate([0, 11.5, 4]) cube([2, 3, 2]);\n                    }\n                }\n            }\n        }\n        \n        // Tire\n        rotate([90, 0, 0]) {\n            difference() {\n                cylinder(h = 10, r = 17);\n                cylinder(h = 11, r = 15);\n            }\n        }\n    }\n    \n    // Handlebars\n    translate([25, 0, 45]) {\n        rotate([0, -30, 0]) {\n            cylinder(h = 20, r = 2);\n        }\n        translate([10, 0, 0]) {\n            rotate([0, 90, 0]) cylinder(h = 15, r = 1);\n            mirror([0, 1, 0]) rotate([0, 90, 0]) cylinder(h = 15, r = 1);\n        }\n    }\n    \n    // Headlight\n    translate([30, 0, 35]) {\n        difference() {\n            sphere(d = 10);\n            sphere(d = 8);\n        }\n    }\n    \n    // Exhaust pipe\n    translate([0, -8, 10]) {\n        rotate([0, 90, 0]) {\n            cylinder(h = 20, r = 3);\n            translate([20, 0, 0]) cylinder(h = 10, r1 = 3, r2 = 2);\n        }\n    }\n    \n    // Chain guard\n    translate([-15, 0, 8]) {\n        difference() {\n            hull() {\n                cube([20, 8, 3]);\n                translate([0, 2, 0]) cube([20, 4, 3]);\n            }\n            translate([2, 2, -0.5]) cube([16, 4, 4]);\n        }\n    }\n    \n    // Fenders\n    // Front fender\n    translate([25, 0, 18]) {\n        difference() {\n            hull() {\n                cube([15, 10, 3]);\n                translate([0, 0, 5]) cube([15, 8, 1]);\n            }\n            translate([0, 0, -1]) {\n                cylinder(h = 7, r = 17, center = true);\n            }\n        }\n    }\n    \n    // Rear fender\n    translate([-25, 0, 25]) {\n        difference() {\n            hull() {\n                cube([15, 12, 3]);\n                translate([0, 0, 5]) cube([15, 10, 1]);\n            }\n            translate([-7.5, 0, -1]) {\n                cylinder(h = 7, r = 17, center = true);\n            }\n        }\n    }\n}\n\n// Generate model\nenduro();",
    "renders": true
  },
  {
    "vehicle": "motocross",
    "openscad_code": "// Motocross bike - realistic medium complexity\n// Dimensions in mm, printable size ~80mm length\n\n$fn = 32;\n\nmodule wheel(rim_r=10, tire_r=13, width=5) {\n    // Tire\n    difference() {\n        cylinder(h=width, r=tire_r, center=true);\n        cylinder(h=width+1, r=rim_r, center=true);\n    }\n    \n    // Rim\n    color(\"silver\")\n    for(i=[0:45:315]) {\n        rotate([0, 0, i])\n        translate([rim_r-1, 0, 0])\n        cube([2, 1, width-0.5], center=true);\n    }\n}\n\nmodule fork(r=2, h=20, offset=0) {\n    translate([0, 0, h/2+offset])\n    cylinder(h=h, r=r);\n}\n\nmodule suspension() {\n    // Rear shock\n    translate([-15, 0, 15])\n    rotate([90, 0, 0])\n    cylinder(h=15, r=2);\n    \n    // Front forks\n    translate([20, -6, 25])\n    fork();\n    translate([20, 6, 25])\n    fork();\n}\n\nmodule frame() {\n    // Main tube\n    color(\"darkgray\")\n    hull() {\n        translate([-20, 0, 15])\n        sphere(r=3);\n        translate([20, 0, 25])\n        sphere(r=3);\n    }\n    \n    // Engine block\n    color(\"gray\")\n    translate([-5, 0, 10])\n    cube([12, 15, 10], center=true);\n    \n    // Seat\n    color(\"black\")\n    translate([0, 0, 22])\n    scale([1.5, 0.8, 0.3])\n    sphere(r=10);\n    \n    // Handlebars\n    translate([20, 0, 32])\n    rotate([0, 15, 0])\n    cylinder(h=20, r=1);\n    translate([20, -10, 32])\n    rotate([90, 0, 0])\n    cylinder(h=20, r=1);\n}\n\nmodule exhaust() {\n    color(\"gray\")\n    translate([-15, -8, 10])\n    rotate([0, 0, -30])\n    cylinder(h=15, r=2);\n    \n    translate([-25, -12, 8])\n    rotate([0, 15, -45])\n    cylinder(h=10, r=2);\n}\n\nmodule fender(w=20, h=5, l=30) {\n    color(\"red\")\n    translate([0, 0, h/2])\n    scale([l, w, h])\n    sphere(r=1);\n}\n\n// Main assembly\nmodule motocross() {\n    // Rear wheel\n    translate([-25, 0, 8])\n    rotate([0, 90, 0])\n    wheel();\n    \n    // Front wheel\n    translate([25, 0, 8])\n    rotate([0, 90, 0])\n    wheel();\n    \n    // Frame and components\n    frame();\n    suspension();\n    exhaust();\n    \n    // Fenders\n    translate([-15, 0, 20])\n    fender(15, 3, 20);\n    \n    translate([15, 0, 28])\n    fender(12, 2, 15);\n}\n\n// Scale to printable size\nscale(0.6)\nmotocross();",
    "renders": true
  },
  {
    "vehicle": "supermoto",
    "openscad_code": "// Supermoto motorcycle - realistic style, medium complexity\n// ~75mm long, 3D printable\n\n$fn = 32;\n\n// Main module\nmodule supermoto() {\n    // Wheelbase and basic dimensions\n    wheelbase = 52;\n    seat_height = 25;\n    ground_clearance = 8;\n    \n    color(\"red\")\n    translate([0, 0, ground_clearance])\n    union() {\n        // Frame\n        frame();\n        \n        // Engine\n        engine();\n        \n        // Wheels\n        translate([-wheelbase/2, 0, 0]) \n            rotate([0, 0, 180])\n            wheel(10, 4);\n        translate([wheelbase/2, 0, 0]) \n            wheel(10, 4);\n        \n        // Front forks\n        translate([-wheelbase/2, 0, 10])\n            forks();\n        \n        // Rear swingarm\n        translate([wheelbase/2 - 8, 0, 2])\n            swingarm();\n        \n        // Seat\n        translate([0, 0, seat_height - ground_clearance])\n            seat();\n        \n        // Fuel tank\n        translate([-wheelbase/4, 0, seat_height - ground_clearance + 3])\n            tank();\n        \n        // Exhaust\n        translate([wheelbase/4, -8, 2])\n            exhaust();\n        \n        // Handlebars\n        translate([-wheelbase/2 + 2, 0, seat_height - ground_clearance + 12])\n            handlebars();\n    }\n}\n\n// Wheel module\nmodule wheel(radius, width) {\n    // Tire\n    difference() {\n        cylinder(h = width, r = radius, center = true);\n        // Tread pattern\n        for(i = [0:9]) {\n            rotate([0, 0, i * 36])\n                translate([radius - 1, 0, 0])\n                    cube([2, 1.5, width + 0.1], center = true);\n        }\n    }\n    \n    // Rim\n    color(\"silver\")\n    difference() {\n        cylinder(h = width + 1, r = radius - 2.5, center = true);\n        cylinder(h = width + 2, r = radius - 4, center = true);\n    }\n    \n    // Spokes\n    color(\"gray\")\n    for(i = [0:5]) {\n        rotate([0, 0, i * 60])\n            translate([0, 0, 0])\n                cube([radius - 4, 0.5, width + 0.5], center = true);\n    }\n}\n\n// Frame module\nmodule frame() {\n    color(\"darkgray\") {\n        // Main frame tubes\n        hull() {\n            translate([-20, 0, 15])\n                sphere(2);\n            translate([5, 0, 18])\n                sphere(2);\n            translate([15, 0, 10])\n                sphere(2);\n        }\n        \n        // Subframe\n        hull() {\n            translate([5, 0, 18])\n                sphere(1.5);\n            translate([25, 0, 20])\n                sphere(1.5);\n        }\n    }\n}\n\n// Engine module\nmodule engine() {\n    color(\"black\") {\n        // Engine block\n        translate([-5, 0, 8])\n            cube([12, 10, 8], center = true);\n        \n        // Cylinder head\n        translate([-5, 0, 15])\n            cube([10, 8, 6], center = true);\n    }\n}\n\n// Forks module\nmodule forks() {\n    color(\"silver\") {\n        // Left fork\n        translate([0, -3, 0])\n            cylinder(h = 18, r = 1.5);\n        \n        // Right fork\n        translate([0, 3, 0])\n            cylinder(h = 18, r = 1.5);\n        \n        // Triple clamp\n        translate([0, 0, 16])\n            cube([6, 8, 2], center = true);\n    }\n}\n\n// Swingarm module\nmodule swingarm() {\n    color(\"silver\") {\n        // Left arm\n        translate([0, -4, 0])\n            cube([16, 2, 3], center = true);\n        \n        // Right arm\n        translate([0, 4, 0])\n            cube([16, 2, 3], center = true);\n        \n        // Cross brace\n        translate([0, 0, 3])\n            cube([12, 8, 1], center = true);\n    }\n}\n\n// Seat module\nmodule seat() {\n    color(\"black\") {\n        // Base\n        translate([5, 0, 0])\n            cube([25, 12, 2], center = true);\n        \n        // Cushion\n        translate([5, 0, 1.5])\n            scale([1, 1, 0.5])\n                sphere(7);\n    }\n}\n\n// Fuel tank module\nmodule tank() {\n    color(\"red\") {\n        hull() {\n            translate([-5, 0, 0])\n                sphere(5);\n            translate([5, 0, 0])\n                sphere(5);\n            translate([0, 0, 3])\n                sphere(4);\n        }\n        \n        // Cap\n        translate([0, 0, 5])\n            cylinder(h = 1, r = 2);\n    }\n}\n\n// Exhaust module\nmodule exhaust() {\n    color(\"silver\") {\n        // Header pipe\n        rotate([0, 90, 0])\n            cylinder(h = 15, r = 1.5);\n        \n        // Muffler\n        translate([15, -8, 0])\n            cylinder(h = 8, r = 2);\n    }\n}\n\n// Handlebars module\nmodule handlebars() {\n    color(\"black\") {\n        // Clamp\n        translate([0, 0, 0])\n            cube([4, 10, 2], center = true);\n        \n        // Bars\n        translate([0, -5, 2])\n            rotate([0, 0, -10])\n                cube([1, 10, 1], center = true);\n        translate([0, 5, 2])\n            rotate([0, 0, 10])\n                cube([1, 10, 1], center = true);\n    }\n}\n\n// Render the complete model\nsupermoto();",
    "renders": true
  },
  {
    "vehicle": "trackbike",
    "openscad_code": "// Track Bike - Realistic Style, Medium Complexity\n// Designed for 3D printing at ~80mm length\n\n// Frame and body\nmodule frame() {\n    // Main triangle\n    union() {\n        // Top tube\n        translate([0, 0, 25]) rotate([0, 0, 0]) \n            cube([60, 4, 4], center=true);\n        \n        // Down tube\n        translate([0, 0, 15]) rotate([30, 0, 0]) \n            cube([35, 4, 4], center=true);\n        \n        // Seat tube\n        translate([-20, 0, 10]) rotate([0, 0, 0]) \n            cube([4, 4, 40], center=true);\n            \n        // Chain stays\n        translate([-20, 0, 5]) rotate([0, 0, -20]) \n            cube([30, 4, 4], center=true);\n        \n        // Seat stays\n        translate([-20, 0, 25]) rotate([0, 0, 20]) \n            cube([30, 4, 4], center=true);\n    }\n}\n\n// Handlebars\nmodule handlebars() {\n    translate([25, 0, 35]) rotate([0, 0, 0]) \n        difference() {\n            union() {\n                // Handlebar stem\n                cylinder(h=15, r=2, center=true);\n                // Bar\n                translate([0, 0, 8]) rotate([90, 0, 0])\n                    cylinder(h=40, r=2, center=true);\n            }\n            // Remove center hole\n            cylinder(h=20, r=1.5, center=true);\n        }\n}\n\n// Seat\nmodule saddle() {\n    translate([-20, 0, 42]) rotate([0, 0, 0])\n        difference() {\n            // Seat base\n            cube([15, 12, 3], center=true);\n            // Rounded top\n            translate([0, 0, 1.5]) sphere(d=12);\n            // Hollow bottom\n            cube([13, 10, 2], center=true);\n        }\n}\n\n// Wheel\nmodule wheel(pos, diameter) {\n    translate(pos) {\n        difference() {\n            // Tire\n            cylinder(h=4, r=diameter/2, center=true);\n            // Rim cavity\n            cylinder(h=5, r=diameter/2 - 2, center=true);\n        }\n        \n        // Spokes\n        for(i=[0:30:360]) {\n            rotate([0, 0, i]) translate([diameter/2 - 2, 0, 0]) \n                cube([diameter - 4, 1, 2], center=true);\n        }\n        \n        // Hub\n        cylinder(h=6, r=3, center=true);\n    }\n}\n\n// Crankset\nmodule crankset() {\n    translate([0, 0, 5]) {\n        // Chainring\n        difference() {\n            cylinder(h=2, r=8, center=true);\n            cylinder(h=3, r=7, center=true);\n            // Teeth\n            for(i=[0:15:360]) {\n                rotate([0, 0, i]) translate([8, 0, 0]) \n                    cube([1, 2, 2.5], center=true);\n            }\n        }\n        \n        // Crank arm\n        rotate([0, 0, 90]) translate([0, 6, 0]) \n            cube([20, 3, 3], center=true);\n        \n        // Pedal\n        translate([0, 16, 0]) cube([8, 3, 2], center=true);\n    }\n}\n\n// Fork\nmodule fork() {\n    translate([20, 0, 30]) rotate([30, 0, 0]) {\n        union() {\n            // Fork blades\n            translate([0, -3, 0]) cylinder(h=25, r=2, center=true);\n            translate([0, 3, 0]) cylinder(h=25, r=2, center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    frame();\n    handlebars();\n    saddle();\n    fork();\n    wheel([20, 0, 5], 20);  // Front wheel\n    wheel([-20, 0, 5], 20); // Rear wheel\n    crankset();\n}",
    "renders": true
  },
  {
    "vehicle": "caféracer",
    "openscad_code": "// Café-Racer 1:18 scale model – 3D-printable, medium complexity\n// Overall length ≈ 95 mm, width ≈ 35 mm, height ≈ 50 mm\n// Wall thickness 1.2 mm, no steep overhangs, all parts manifold\n\n$fn = 32;\n\n// ---------- Main assembly ----------\nmodule caféracer() {\n    union() {\n        frame();\n        engine();\n        tank();\n        seat();\n        front_forks();\n        rear_suspension();\n        wheels();\n        exhaust();\n        headlight();\n    }\n}\n\n// ---------- Frame ----------\nmodule frame() {\n    color(\"silver\")\n    union() {\n        // Main spine\n        translate([0, 0, 10]) cube([65, 3, 2], center = true);\n        // Down-tube\n        rotate([0, 30, 0])\n            translate([25, 0, 5]) cube([35, 3, 2], center = true);\n        // Seat rails\n        for (i = [-1, 1])\n            translate([-5, i * 8, 18])\n                rotate([0, 20, 0])\n                    cube([25, 1.5, 1.5], center = true);\n    }\n}\n\n// ---------- Engine block ----------\nmodule engine() {\n    color(\"gray\")\n    union() {\n        // Case\n        translate([20, 0, 7]) cube([18, 14, 12], center = true);\n        // Cylinders\n        for (i = [-1, 1])\n            translate([28, i * 4.5, 12])\n                cylinder(h = 10, r = 3);\n        // Oil-pan\n        translate([20, 0, 2]) cube([18, 14, 2], center = true);\n    }\n}\n\n// ---------- Fuel tank ----------\nmodule tank() {\n    color(\"darkgreen\")\n    difference() {\n        union() {\n            translate([0, 0, 15])\n                scale([1, 0.5, 0.4])\n                    sphere(d = 30);\n            translate([0, 0, 15]) cube([30, 15, 12], center = true);\n        }\n        // Hollow cavity\n        translate([0, 0, 15]) cube([28, 13, 10], center = true);\n    }\n}\n\n// ---------- Seat ----------\nmodule seat() {\n    color(\"black\")\n    difference() {\n        translate([-15, 0, 19])\n            scale([1, 0.6, 0.3])\n                sphere(d = 30);\n        translate([-15, 0, 19]) cube([28, 12, 8], center = true);\n    }\n}\n\n// ---------- Front forks ----------\nmodule front_forks() {\n    color(\"silver\")\n    union() {\n        // Triple clamp\n        translate([30, 0, 35]) cube([8, 18, 4], center = true);\n        // Fork tubes\n        for (y = [-6, 6])\n            translate([30, y, 20])\n                cylinder(h = 30, r = 1.5);\n    }\n}\n\n// ---------- Rear suspension ----------\nmodule rear_suspension() {\n    color(\"silver\")\n    for (y = [-7, 7])\n        translate([-25, y, 12])\n            rotate([15, 0, 0])\n                cylinder(h = 15, r = 1.2);\n}\n\n// ---------- Wheels ----------\nmodule wheels() {\n    // Front\n    rotate([0, 0, 90])\n        translate([30, 0, 8])\n            wheel();\n    // Rear\n    rotate([0, 0, 90])\n        translate([-30, 0, 8])\n            wheel();\n}\n\nmodule wheel() {\n    color(\"black\")\n    difference() {\n        cylinder(h = 6, r = 12);              // Tire\n        cylinder(h = 7, r = 9);               // Rim cut-out\n    }\n    color(\"silver\")\n    cylinder(h = 2, r = 9);                  // Rim surface\n    // Spokes\n    for (a = [0:45:315])\n        rotate([0, 0, a])\n            translate([0, 5.5, 3])\n                cube([1, 11, 1], center = true);\n}\n\n// ---------- Exhaust ----------\nmodule exhaust() {\n    color(\"gray\")\n    union() {\n        // Header pipes\n        for (i = [-1, 1])\n            translate([28, i * 4.5, 7])\n                rotate([0, 90, 0])\n                    cylinder(h = 25, r = 1.5);\n        // Muffler\n        translate([10, 7, 7])\n            rotate([0, 0, -10])\n                cylinder(h = 25, r = 3);\n    }\n}\n\n// ---------- Headlight ----------\nmodule headlight() {\n    color(\"black\")\n    translate([40, 0, 25])\n        rotate([0, 90, 0])\n            cylinder(h = 8, r1 = 6, r2 = 4);\n    color(\"yellow\")\n    translate([44.5, 0, 25])\n        sphere(r = 3.8);\n}\n\n// ---------- Render ----------\ncaféracer();",
    "renders": true
  },
  {
    "vehicle": "bobber",
    "openscad_code": "// Realistic 3D-printable fishing bobber\n// Approx. 80 mm tall, 25 mm max diameter\n\n// Main parameters\nbody_d = 25;            // max body diameter\nbody_h = 45;            // body height\nneck_d = 5;             // neck diameter\nneck_h = 8;\neye_d = 4;              // eyelet diameter\neye_r = 2;              // eyelet wire radius\nwall = 1.5;             // wall thickness for printing\nsegments = 36;          // cylinder resolution\n\n// Render the complete bobber\nunion() {\n    // Main buoyant body (hollow, printable)\n    difference() {\n        // Outer shape – oval body\n        scale([1,1,1.6])\n            sphere(d = body_d, $fn = segments);\n        \n        // Hollow interior\n        translate([0,0,-wall])\n            scale([1,1,1.6])\n                sphere(d = body_d - 2*wall, $fn = segments);\n    }\n\n    // Neck above body\n    translate([0,0,body_h/2 - 1])\n        cylinder(h = neck_h, d1 = neck_d, d2 = neck_d*0.9, $fn = segments);\n\n    // Eyelets – two rings for line attachment\n    module eyelet(z_pos, angle = 0) {\n        rotate([0,90,angle])\n            translate([z_pos, 0, 0])\n                difference() {\n                    torus(eye_r, eye_d/2, segments);\n                    // Gap for threading line\n                    cube([eye_d*2, eye_d, eye_d], center = true);\n                }\n    }\n    \n    // Top eyelet\n    eyelet(body_h/2 + neck_h + eye_r + 1);\n    // Bottom eyelet\n    eyelet(-body_h/2 - eye_r - 1, 90);\n    \n    // Antenna / visibility rod\n    translate([0,0,body_h/2 + neck_h + 2*eye_r + 2])\n        cylinder(h = 20, d = 3, $fn = segments);\n\n    // Paint rings for visibility\n    color(\"red\") {\n        for (i = [1:3]) {\n            translate([0,0,-body_h/2 + i*body_h/4])\n                difference() {\n                    cylinder(h = 2, d = body_d + 0.2, $fn = segments);\n                    cylinder(h = 2.2, d = body_d - 2*wall - 0.2, $fn = segments);\n                }\n        }\n    }\n}\n\n// Helper module to create torus (donut) shape\nmodule torus(radius, tube_radius, fn = 24) {\n    rotate_extrude($fn = fn)\n        translate([radius, 0, 0])\n            circle(r = tube_radius, $fn = fn);\n}",
    "renders": true
  },
  {
    "vehicle": "brat",
    "openscad_code": "// Realistic 3D printable bratwurst (brat) model\n// Medium complexity - recognizable with moderate detail\n\n// Overall dimensions: ~80mm length, ~25mm diameter\n\nmodule brat_body() {\n    // Main sausage body with slight curve\n    union() {\n        // Center straight segment\n        cylinder(h=55, d1=24, d2=24, $fn=50);\n        \n        // Front taper\n        translate([27.5, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=15, d1=24, d2=15, $fn=30);\n        \n        // Rear taper\n        translate([-27.5, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=15, d1=24, d2=18, $fn=30);\n    }\n}\n\nmodule grill_marks() {\n    // Crosshatch grill marks\n    difference() {\n        children();\n        \n        // Horizontal marks\n        for(i=[-30:10:30]) {\n            rotate([0, 0, i])\n                translate([0, 0, -1])\n                    cube([80, 1.5, 2], center=true);\n        }\n        \n        // Vertical marks (perpendicular)\n        rotate([90, 0, 0])\n            for(i=[-30:10:30]) {\n                rotate([0, 0, i])\n                    translate([0, 0, -1])\n                        cube([80, 1.5, 1.2], center=true);\n            }\n    }\n}\n\nmodule sausage_texture() {\n    // Twisted surface texture\n    difference() {\n        children();\n        \n        // Spiral grooves\n        for(angle=[0:30:360]) {\n            rotate([0, 0, angle])\n                translate([0, 0, -2])\n                    rotate_extrude(angle=30, $fn=30)\n                        translate([12, 0, 0])\n                            square([0.5, 4]);\n        }\n    }\n}\n\nmodule split_end() {\n    // Realistic split in one end\n    translate([40, 0, 0])\n        union() {\n            // First split half\n            rotate([0, 0, 15])\n                translate([0, 0, 0])\n                    cube([8, 12, 3], center=true);\n            \n            // Second split half\n            rotate([0, 0, -15])\n                translate([0, 0, 0])\n                    cube([8, 12, 3], center=true);\n        }\n}\n\nmodule brat() {\n    // Main assembly\n    difference() {\n        // Base sausage shape with curve\n        rotate([0, 5, 0])\n            union() {\n                brat_body();\n                \n                // Add slight bulge in middle\n                translate([0, 0, 0])\n                    scale([1, 1.1, 1.1])\n                        sphere(d=26, $fn=50);\n            }\n        \n        // Hollow center for 3D printing\n        translate([0, 0, 0])\n            cylinder(h=85, d=18, $fn=40);\n    }\n    \n    // Apply textures\n    grill_marks() {\n        sausage_texture() {\n            children();\n        }\n    }\n    \n    // Add split end\n    split_end();\n}\n\n// Render the complete brat\nbrat();",
    "renders": true
  },
  {
    "vehicle": "tracker",
    "openscad_code": "// Realistic-style GPS Tracker (medium complexity)\n// Dimensions: 65 x 38 x 15 mm\n\n// Overall dimensions\ntracker_l = 65;\ntracker_w = 38;\ntracker_h = 15;\nwall_t = 1.6;\n\n// Battery compartment\nbattery_l = 35;\nbattery_w = 20;\nbattery_h = 8;\n\n// USB-C port\nusb_w = 8.4;\nusb_h = 2.6;\nusb_depth = 5;\n\n// Antenna\nantenna_d = 6;\nantenna_h = 4;\n\n// Buttons\nbutton_d = 4;\nbutton_h = 1;\n\n// LED indicators\nled_d = 2;\nled_h = 1;\n\n// Screw holes\nscrew_d = 2.5;\nscrew_h = 3;\n\n// Main body shell\nmodule main_shell() {\n    difference() {\n        // Outer shell\n        rounded_box(tracker_l, tracker_w, tracker_h, 3);\n        \n        // Hollow inside\n        translate([0, 0, wall_t])\n            rounded_box(tracker_l-wall_t*2, tracker_w-wall_t*2, tracker_h-wall_t, 2);\n        \n        // Battery compartment\n        translate([0, 0, wall_t])\n            cube([battery_l, battery_w, battery_h], center=true);\n            \n        // USB-C port\n        translate([tracker_l/2, 0, -tracker_h/2])\n            cube([usb_depth, usb_w, usb_h], center=true);\n    }\n}\n\n// Rounded box helper\nmodule rounded_box(l, w, h, r) {\n    hull() {\n        for(x=[-1,1], y=[-1,1], z=[-1,1])\n            translate([x*(l/2-r), y*(w/2-r), z*(h/2-r)])\n                sphere(r=r);\n    }\n}\n\n// Top cover with features\nmodule top_cover() {\n    difference() {\n        // Main cover\n        translate([0, 0, tracker_h/2])\n            cube([tracker_l, tracker_w, wall_t], center=true);\n            \n        // Power button\n        translate([tracker_l/4, tracker_w/4, -button_h/2])\n            cylinder(d=button_d, h=button_h+0.2, center=true);\n            \n        // Function button\n        translate([0, tracker_w/4, -button_h/2])\n            cylinder(d=button_d, h=button_h+0.2, center=true);\n            \n        // Status LED\n        translate([-tracker_l/4, tracker_w/4, -led_h/2])\n            cylinder(d=led_d, h=led_h+0.2, center=true);\n            \n        // GPS LED\n        translate([-tracker_l/2+5, 0, -led_h/2])\n            cylinder(d=led_d, h=led_h+0.2, center=true);\n    }\n}\n\n// Antenna housing\nmodule antenna_housing() {\n    translate([-tracker_l/2+antenna_d/2+2, 0, tracker_h/2])\n    difference() {\n        cylinder(d=antenna_d, h=antenna_h);\n        translate([0, 0, wall_t])\n            cylinder(d=antenna_d-wall_t*2, h=antenna_h);\n    }\n}\n\n// Battery contacts\nmodule battery_contacts() {\n    // Positive contact\n    translate([battery_l/4, 0, battery_h/2+wall_t/2])\n        cube([3, 4, wall_t], center=true);\n        \n    // Negative contact\n    translate([-battery_l/4, 0, battery_h/2+wall_t/2])\n        cube([3, 4, wall_t], center=true);\n}\n\n// PCB standoffs\nmodule standoffs() {\n    for(x=[-1,1], y=[-1,1]) {\n        translate([x*(tracker_l/2-7), y*(tracker_w/2-7), tracker_h/2-wall_t/2-2])\n            difference() {\n                cylinder(d=4, h=4);\n                cylinder(d=2.5, h=4);\n            }\n    }\n}\n\n// Assembly\nmain_shell();\ntranslate([0, 0, tracker_h])\n    top_cover();\nantenna_housing();\nbattery_contacts();\nstandoffs();\n\n// Screw holes for assembly\nfor(x=[-1,1], y=[-1,1]) {\n    translate([x*(tracker_l/2-5), y*(tracker_w/2-5), -tracker_h/2])\n        cylinder(d=screw_d, h=tracker_h, center=true);\n}",
    "renders": true
  },
  {
    "vehicle": "scrambler",
    "openscad_code": "// Realistic medium-complexity scrambler (motocross bike)\n// Overall dimensions: ~95 mm long, 60 mm tall, 30 mm wide\n\n// Wheelbase and ground clearance\nwheelbase = 60;\nclearance = 8;\n\n// Tire and rim parameters\ntire_d = 24;\nrim_d = 18;\ntire_w = 7;\n\n// Engine block size\nengine_w = 18;\nengine_h = 16;\nengine_l = 22;\n\n// Main frame tube diameter\ntube_d = 5;\n\n// 3D-print friendly tolerance\neps = 0.2;\n\nmodule tire(d, w) {\n    difference() {\n        // Tire body\n        cylinder(d = d + 2, h = w + 1, $fn = 60);\n        // Tread grooves (simple circumferential)\n        for (i = [0:2]) {\n            translate([0, 0, i * (w/3) + 1])\n                cylinder(d = d + 2.5, h = 0.5, $fn = 60);\n        }\n    }\n}\n\nmodule wheel(d, w) {\n    union() {\n        // Rim\n        color(\"silver\")\n            difference() {\n                cylinder(d = rim_d, h = w, $fn = 36);\n                cylinder(d = rim_d - 4, h = w + 2, center = true, $fn = 36);\n            }\n        // Spokes (simplified)\n        for (a = [0:30:330]) {\n            rotate([0, 0, a])\n                translate([rim_d/2 - 2, 0, 0])\n                    cube([4, 1, w], center = true);\n        }\n    }\n}\n\nmodule front_fork() {\n    // Fork tubes\n    translate([wheelbase/2, 0, clearance + tire_d/2])\n    for (x = [-2, 2])\n        translate([x, 0, 0])\n            cylinder(d = tube_d, h = 25, $fn = 16);\n    // Fork brace\n    translate([wheelbase/2, 0, clearance + tire_d/2 + 12])\n        cube([8, 3, 5], center = true);\n}\n\nmodule swingarm() {\n    // Twin tubes\n    translate([-wheelbase/2, 0, clearance + tire_d/2])\n    for (y = [-4, 4])\n        translate([0, y, 0])\n            rotate([0, 90, 0])\n                cylinder(d = tube_d, h = 22, $fn = 16);\n    // Brace plate\n    translate([-wheelbase/2 + 10, 0, clearance + tire_d/2 - 5])\n        cube([2, 10, 10], center = true);\n}\n\nmodule frame() {\n    color(\"silver\")\n    union() {\n        // Main tube (curved)\n        translate([wheelbase/2 - 15, 0, clearance + tire_d/2 + 15])\n            rotate([0, 90, 0])\n                cylinder(d = tube_d, h = 50, $fn = 16);\n        // Down tube\n        translate([wheelbase/2 - 25, 0, clearance + tire_d/2 + 15])\n            rotate([20, 0, 90])\n                cylinder(d = tube_d, h = 40, $fn = 16);\n        // Seat rail\n        translate([-wheelbase/2 + 10, 0, clearance + tire_d/2 + 25])\n            rotate([0, 90, 0])\n                cylinder(d = tube_d - 1, h = 40, $fn = 16);\n    }\n}\n\nmodule engine() {\n    color(\"darkgray\")\n    translate([0, 0, clearance])\n        cube([engine_l, engine_w, engine_h], center = true);\n    // Cylinder head\n    color(\"silver\")\n    translate([engine_l/2 - 3, 0, clearance + engine_h/2 + 5])\n        cube([6, 10, 10], center = true);\n}\n\nmodule seat() {\n    color(\"black\")\n    translate([-wheelbase/2 + 5, 0, clearance + tire_d/2 + 25])\n        cube([25, 12, 4], center = true);\n}\n\nmodule exhaust() {\n    color(\"silver\")\n    // Header pipe\n    translate([engine_l/2, 0, clearance + engine_h/2 - 2])\n        rotate([0, -15, 0])\n            cylinder(d = 3, h = 25, $fn = 16);\n    // Muffler\n    translate([engine_l/2 + 20, -8, clearance + engine_h/2 - 8])\n        rotate([0, 90, 0])\n            cylinder(d = 6, h = 12, $fn = 16);\n}\n\nmodule handlebar() {\n    color(\"black\")\n    translate([wheelbase/2 - 5, 0, clearance + tire_d/2 + 25])\n        rotate([0, 90, 0])\n            cylinder(d = 3, h = 35, $fn = 16);\n    // Crossbar\n    translate([wheelbase/2 - 5, 0, clearance + tire_d/2 + 25])\n        rotate([0, 0, 90])\n            cylinder(d = 2, h = 20, center = true, $fn = 16);\n}\n\n// Assembly\nunion() {\n    // Rear wheel\n    translate([-wheelbase/2, 0, clearance + tire_d/2])\n        union() {\n            color(\"black\") tire(tire_d, tire_w);\n            wheel(tire_d, tire_w);\n        }\n    \n    // Front wheel\n    translate([wheelbase/2, 0, clearance + tire_d/2])\n        union() {\n            color(\"black\") tire(tire_d, tire_w);\n            wheel(tire_d, tire_w);\n        }\n    \n    frame();\n    front_fork();\n    swingarm();\n    engine();\n    seat();\n    exhaust();\n    handlebar();\n    \n    // Skid plate\n    color(\"gray\")\n    translate([0, 0, clearance - 2])\n        cube([30, 16, 2], center = true);\n}",
    "renders": true
  },
  {
    "vehicle": "baggers",
    "openscad_code": "// Realistic medium-complexity baggers (baggers motorcycle)\n// All dimensions in mm, designed for 3D printing (no crazy overhangs)\n// Total length ~80 mm\n\n$fn = 36;  // roundness\n\n// Parameters\nwheel_r = 12;\nwheel_w = 6;\nfork_r = 4;\nframe_t = 4;  // tube thickness\nfender_t = 1.5;\nseat_h = 8;\nseat_w = 20;\ntank_l = 25;\ntank_w = 14;\ntank_h = 15;\nhandle_w = 28;\nhandle_r = 2;\nengine_l = 18;\nengine_w = 12;\nengine_h = 10;\nsaddlebag_l = 22;\nsaddlebag_h = 12;\nsaddlebag_w = 10;\n\n// Main assembly\nunion() {\n    // Rear wheel\n    translate([0, 0, wheel_r])\n        wheel();\n\n    // Front wheel\n    translate([-55, 0, wheel_r])\n        wheel();\n\n    // Front fork\n    translate([-55, 0, wheel_r])\n        cylinder(h = 30, r = fork_r);\n\n    // Rear fender\n    translate([0, 0, wheel_r * 2 - 1])\n        difference() {\n            cube([wheel_w + 4, saddlebag_w + 10, fender_t], center = true);\n            translate([0, 0, -fender_t])\n                cube([wheel_w + 10, saddlebag_w + 20, fender_t * 2], center = true);\n        }\n\n    // Main frame (simplified tubes)\n    color(\"gray\")\n    union() {\n        // Down tube\n        translate([-40, 0, wheel_r * 2])\n            rotate([90, 0, 0])\n                cylinder(h = 30, r = frame_t);\n\n        // Top tube\n        translate([-40, 0, wheel_r * 2 + 25])\n            rotate([0, 0, 0])\n                cube([35, frame_t * 2, frame_t * 2]);\n\n        // Seat stays\n        translate([-5, 0, wheel_r * 2 + 15])\n            rotate([0, 0, 35])\n                cube([30, frame_t * 2, frame_t * 2]);\n    }\n\n    // Fuel tank\n    color(\"darkgreen\")\n    translate([-25, 0, wheel_r * 2 + tank_h / 2])\n        difference() {\n            scale([1, 0.8, 0.7])\n                sphere(d = tank_l);\n            translate([0, 0, -tank_h / 2 - 1])\n                cube([tank_l + 2, tank_w + 2, tank_h], center = true);\n        }\n\n    // Seat\n    color(\"black\")\n    translate([-8, 0, wheel_r * 2 + seat_h / 2])\n        cube([seat_w, seat_w * 0.6, seat_h], center = true);\n\n    // Handlebars\n    color(\"gray\")\n    translate([-50, 0, wheel_r * 2 + 25])\n        rotate([0, 0, 90])\n            cylinder(h = handle_w, r = handle_r);\n\n    // Engine block\n    color(\"darkgray\")\n    translate([-30, 0, wheel_r + engine_h / 2])\n        cube([engine_l, engine_w, engine_h], center = true);\n\n    // Exhaust pipes (simple)\n    color(\"silver\")\n    for (y = [-engine_w / 2 + 2, engine_w / 2 - 2]) {\n        translate([-30, y, wheel_r])\n            rotate([0, 90, 0])\n                cylinder(h = 20, r = 2);\n    }\n\n    // Saddlebags\n    color(\"brown\")\n    for (y = [-saddlebag_w / 2 - 5, saddlebag_w / 2 + 5]) {\n        translate([10, y, wheel_r])\n            cube([saddlebag_l, saddlebag_w, saddlebag_h], center = true);\n    }\n\n    // Headlight\n    color(\"yellow\")\n    translate([-55, 0, wheel_r * 2 + 15])\n        sphere(d = 8);\n}\n\n// Wheel module\nmodule wheel() {\n    difference() {\n        union() {\n            // Tire\n            color(\"black\")\n            cylinder(h = wheel_w, r = wheel_r, center = true);\n            // Rim\n            color(\"silver\")\n            cylinder(h = wheel_w + 0.5, r = wheel_r - 3, center = true);\n        }\n        // Axle hole\n        cylinder(h = wheel_w + 2, r = 2, center = true);\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "trike",
    "openscad_code": "// Realistic-style 3D-printable trike, medium complexity\n// Overall length ≈ 90 mm, width ≈ 60 mm, height ≈ 45 mm\n// Wall thickness ≥ 1 mm everywhere, no steep overhangs\n\n// Main module\nmodule trike() {\n    // Frame and seat\n    color(\"silver\") frame();\n    color(\"black\") seat();\n    \n    // Front end\n    color(\"silver\") front_fork();\n    color(\"black\") front_wheel();\n    \n    // Rear axle\n    color(\"silver\") rear_axle();\n    color(\"black\") for (i = [-1, 1]) mirror([i, 0, 0]) rear_wheel();\n    \n    // Handlebar\n    color(\"black\") handlebar();\n    \n    // Drivetrain\n    color(\"silver\") pedals();\n}\n\n// Central frame tube\nmodule frame() {\n    // Main tube\n    rotate([0, -12, 0]) \n        cylinder(h = 70, d = 8, $fn = 16);\n    \n    // Seat post\n    translate([0, 0, 40])\n        cylinder(h = 15, d = 6, $fn = 16);\n    \n    // Rear fork tubes\n    for (side = [-1, 1]) {\n        translate([0, 0, 25])\n            rotate([30, 0, side * 15])\n                cylinder(h = 30, d = 5, $fn = 16);\n    }\n}\n\n// Simple seat\nmodule seat() {\n    translate([-5, 0, 55])\n        rotate([0, 10, 0])\n            scale([1, 1.5, 0.4])\n                sphere(d = 18, $fn = 20);\n}\n\n// Front fork\nmodule front_fork() {\n    translate([65, 0, 25])\n        rotate([0, 90, 0])\n            cylinder(h = 20, d = 6, $fn = 16);\n    \n    translate([65, 0, 25])\n        rotate([0, 90, 0])\n            rotate([0, 0, 25])\n                cylinder(h = 25, d = 4, $fn = 16);\n    \n    translate([65, 0, 25])\n        rotate([0, 90, 0])\n            rotate([0, 0, -25])\n                cylinder(h = 25, d = 4, $fn = 16);\n}\n\n// Front wheel\nmodule front_wheel() {\n    translate([80, 0, 25])\n        rotate([90, 0, 0])\n            rotate_extrude($fn = 60)\n                translate([15, 0, 0])\n                    circle(r = 2);\n    \n    translate([80, 0, 25])\n        rotate([90, 0, 0])\n            for (i = [0:30:360])\n                rotate([0, 0, i])\n                    cylinder(h = 4, d = 1, $fn = 8);\n}\n\n// Rear axle\nmodule rear_axle() {\n    translate([-30, 0, 15])\n        rotate([0, 90, 0])\n            cylinder(h = 60, d = 6, $fn = 16);\n}\n\n// Rear wheel\nmodule rear_wheel() {\n    rotate([90, 0, 0])\n        rotate_extrude($fn = 60)\n            translate([15, 0, 0])\n                circle(r = 2);\n    \n    rotate([90, 0, 0])\n        for (i = [0:30:360])\n            rotate([0, 0, i])\n                cylinder(h = 4, d = 1, $fn = 8);\n}\n\n// Handlebar assembly\nmodule handlebar() {\n    translate([65, 0, 45])\n        rotate([0, 0, 90])\n            cylinder(h = 30, d = 4, $fn = 16);\n    \n    translate([65, 0, 45])\n        rotate([0, 0, 10])\n            cylinder(h = 15, d = 3, $fn = 16);\n    \n    translate([65, 0, 45])\n        rotate([0, 0, -10])\n            cylinder(h = 15, d = 3, $fn = 16);\n    \n    translate([65, 15, 45])\n        sphere(d = 5, $fn = 16);\n    \n    translate([65, -15, 45])\n        sphere(d = 5, $fn = 16);\n}\n\n// Pedals and crank\nmodule pedals() {\n    translate([20, 0, 15])\n        rotate([0, 90, 0])\n            cylinder(h = 20, d = 4, $fn = 16);\n    \n    for (side = [-1, 1]) {\n        translate([20, side * 12, 15])\n            rotate([0, 0, side * 90])\n                cube([12, 6, 2], center = true);\n        \n        translate([20, side * 18, 15])\n            sphere(d = 6, $fn = 16);\n    }\n}\n\n// Render\ntrike();",
    "renders": true
  },
  {
    "vehicle": "quad",
    "openscad_code": "// Realistic Quad (medium complexity)\n// 4-rotor drone body with arms, motors, props, landing gear\n\n// Overall scale\noverall_scale = 0.8;\n\n// Body dimensions\nbody_w = 40;\nbody_l = 40;\nbody_h = 15;\n\n// Arm dimensions\narm_len = 60;\narm_r = 4;\n\n// Motor dimensions\nmotor_r = 12;\nmotor_h = 10;\n\n// Prop dimensions\nprop_r = 28;\nprop_t = 1.5;\n\n// Landing gear\nleg_h = 15;\nleg_r = 2;\n\nmodule body() {\n    // Main central shell\n    difference() {\n        translate([0,0,body_h/2])\n            cube([body_w,body_l,body_h], center=true);\n        \n        // Hollow cavity for electronics\n        translate([0,0,body_h/2-2])\n            cube([body_w-4,body_l-4,body_h-2], center=true);\n        \n        // Top vent holes for cooling\n        for(x=[-12,0,12])\n            for(y=[-12,0,12])\n                translate([x,y,body_h-1])\n                    cylinder(h=3,r=2,$fn=12);\n    }\n    \n    // Battery hatch detail\n    translate([0,body_l/2+2,body_h/2])\n        cube([body_w-10,2,3], center=true);\n}\n\nmodule arm(x,y,angle) {\n    translate([x,y,body_h/2])\n        rotate([0,0,angle])\n            union() {\n                // Arm tube\n                cylinder(h=arm_len, r=arm_r, $fn=16);\n                \n                // Motor mount plate\n                translate([0,arm_len,0])\n                    difference() {\n                        cylinder(h=motor_h, r=motor_r+2, $fn=32);\n                        cylinder(h=motor_h+1, r=motor_r, $fn=32);\n                    }\n            }\n}\n\nmodule propeller(x,y,z) {\n    translate([x,y,z])\n        rotate([0,0,45])\n            for(i=[0:45:315]) {\n                rotate([0,0,i])\n                    translate([prop_r/2,0,0])\n                        cube([prop_r,4,prop_t], center=true);\n            }\n}\n\nmodule landing_leg(x,y) {\n    translate([x,y,0])\n        rotate([10,0,0])\n            union() {\n                // Main leg\n                cylinder(h=leg_h, r=leg_r, $fn=12);\n                \n                // Foot pad\n                translate([0,0,leg_h])\n                    cylinder(h=1, r=leg_r+3, $fn=16);\n            }\n}\n\n// Build the quad\nscale(overall_scale) {\n    union() {\n        // Central body\n        body();\n        \n        // Four arms at 45 degree angles\n        arm(body_w/2,body_l/2,45);\n        arm(-body_w/2,body_l/2,135);\n        arm(-body_w/2,-body_l/2,225);\n        arm(body_w/2,-body_l/2,315);\n        \n        // Motors on each arm end\n        // Front right\n        translate([body_w/2+arm_len/sqrt(2),body_l/2+arm_len/sqrt(2),body_h/2+motor_h])\n            cylinder(h=motor_h, r=motor_r, $fn=24);\n        \n        // Front left  \n        translate([-body_w/2-arm_len/sqrt(2),body_l/2+arm_len/sqrt(2),body_h/2+motor_h])\n            cylinder(h=motor_h, r=motor_r, $fn=24);\n            \n        // Rear left\n        translate([-body_w/2-arm_len/sqrt(2),-body_l/2-arm_len/sqrt(2),body_h/2+motor_h])\n            cylinder(h=motor_h, r=motor_r, $fn=24);\n            \n        // Rear right\n        translate([body_w/2+arm_len/sqrt(2),-body_l/2-arm_len/sqrt(2),body_h/2+motor_h])\n            cylinder(h=motor_h, r=motor_r, $fn=24);\n        \n        // Propellers\n        // Alternate rotation directions\n        propeller(body_w/2+arm_len/sqrt(2),body_l/2+arm_len/sqrt(2),body_h/2+motor_h*2);\n        propeller(-body_w/2-arm_len/sqrt(2),body_l/2+arm_len/sqrt(2),body_h/2+motor_h*2);\n        propeller(-body_w/2-arm_len/sqrt(2),-body_l/2-arm_len/sqrt(2),body_h/2+motor_h*2);\n        rotate([0,0,45])\n            propeller(body_w/2+arm_len/sqrt(2),-body_l/2-arm_len/sqrt(2),body_h/2+motor_h*2);\n        \n        // Landing gear\n        landing_leg(body_w/2-5,body_l/2-5);\n        landing_leg(-body_w/2+5,body_l/2-5);\n        landing_leg(-body_w/2+5,-body_l/2+5);\n        landing_leg(body_w/2-5,-body_l/2+5);\n        \n        // Camera gimbal mount\n        translate([0,0,-leg_h])\n            cylinder(h=8, r=6, $fn=16);\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "unicycle",
    "openscad_code": "// Realistic Unicycle - Medium Complexity\n// Wheel diameter: 60mm, Overall height: 85mm\n\nmodule wheel() {\n    // Tire\n    difference() {\n        cylinder(h=8, d=62, $fn=64);\n        translate([0, 0, 1])\n            cylinder(h=8, d=52, $fn=64);\n    }\n    \n    // Rim\n    difference() {\n        translate([0, 0, 1])\n            cylinder(h=6, d=50, $fn=64);\n        translate([0, 0, 2])\n            cylinder(h=6, d=44, $fn=64);\n    }\n    \n    // Spokes (8 spokes in star pattern)\n    for(i=[0:7]) {\n        rotate([0, 0, i*45])\n            translate([23, 0, 4])\n                cube([12, 2, 2], center=true);\n    }\n    \n    // Hub\n    difference() {\n        translate([0, 0, 3])\n            cylinder(h=4, d=12, $fn=32);\n        translate([0, 0, 3.5])\n            cylinder(h=3, d=6, $fn=32);\n    }\n}\n\nmodule fork() {\n    // Fork legs\n    translate([-4, 0, 0])\n        cylinder(h=35, d=8, $fn=16);\n    translate([4, 0, 0])\n        cylinder(h=35, d=8, $fn=16);\n    \n    // Fork crown\n    translate([0, 0, 35])\n        cube([18, 4, 8], center=true);\n    \n    // Fork bridge\n    translate([0, 0, 20])\n        cube([18, 4, 3], center=true);\n}\n\nmodule seat() {\n    // Saddle base\n    translate([0, 0, 43])\n        cube([40, 30, 8], center=true);\n    \n    // Saddle top (curved)\n    translate([0, 0, 51])\n        scale([1, 1, 0.3])\n            sphere(d=42, $fn=32);\n    \n    // Seatpost clamp\n    translate([0, 0, 43])\n        cylinder(h=10, d=16, $fn=32);\n    \n    // Seatpost\n    translate([0, 0, 38])\n        cylinder(h=5, d=12, $fn=32);\n}\n\nmodule pedals() {\n    // Crank arms\n    translate([0, 0, 0])\n        rotate([90, 0, 0])\n            cylinder(h=20, d=6, $fn=16);\n    \n    translate([0, 0, 8])\n        rotate([90, 0, 180])\n            cylinder(h=20, d=6, $fn=16);\n    \n    // Pedals\n    translate([0, 20, 0])\n        rotate([0, 90, 0])\n            cube([15, 8, 6], center=true);\n    \n    translate([0, -20, 8])\n        rotate([0, 90, 0])\n            cube([15, 8, 6], center=true);\n}\n\n// Assembly\nunion() {\n    // Wheel assembly\n    rotate([90, 0, 0])\n        translate([0, 0, 0])\n            wheel();\n    \n    // Fork\n    translate([0, 0, 31])\n        fork();\n    \n    // Seat\n    seat();\n    \n    // Pedals and cranks\n    pedals();\n}",
    "renders": true
  },
  {
    "vehicle": "tandem",
    "openscad_code": "// TANDEM BICYCLE – Realistic style, medium complexity\n// 3D-printable, 80 mm long, no large overhangs\n\n$fn = 32;                // smooth curves\n\n// ---------- PARAMETERS ----------\nwheel_r      = 10;\nwheel_w      = 3;\ntire_thick   = 1.5;\nframe_t      = 2;        // tube thickness\ncrank_len    = 5;\npedal_w      = 4;\nsaddle_h     = 4;\nsaddle_w     = 6;\nsaddle_d     = 10;\nhandle_w     = 8;\nhandle_diam  = 1.5;\n\n// ---------- WHEEL MODULE ----------\nmodule wheel() {\n    rotate([90,0,0])\n    difference() {\n        cylinder(r=wheel_r, h=wheel_w, center=true);              // tire\n        cylinder(r=wheel_r-tire_thick, h=wheel_w+0.1, center=true); // rim\n    }\n}\n\n// ---------- CRANK / PEDAL MODULE ----------\nmodule crank() {\n    rotate([90,0,0]) {\n        // crank arm\n        color(\"silver\")\n        translate([0,0,-crank_len/2])\n            cube([frame_t, frame_t, crank_len], center=true);\n        // pedal\n        color(\"black\")\n        translate([0,0,-crank_len])\n            rotate([0,90,0])\n            cube([pedal_w, 2, 5], center=true);\n    }\n}\n\n// ---------- SADDLE ----------\nmodule saddle() {\n    color(\"black\")\n    difference() {\n        cube([saddle_w, saddle_d, saddle_h], center=true);\n        translate([0,2,2])\n            cube([saddle_w+1, saddle_d, saddle_h], center=true);\n    }\n}\n\n// ---------- HANDLEBAR ----------\nmodule handlebar() {\n    color(\"black\")\n    union() {\n        // stem\n        cylinder(h=10, r=handle_diam, center=false);\n        // bar\n        translate([0,0,10])\n            rotate([0,90,0])\n            cylinder(h=handle_w, r=handle_diam, center=true);\n    }\n}\n\n// ---------- FRAME ----------\nmodule frame() {\n    color(\"silver\")\n    union() {\n        // rear bottom bracket shell\n        translate([0,0,0])\n            cylinder(h=frame_t*2, r=frame_t, center=true);\n        \n        // main down-tube front -> bottom bracket\n        hull() {\n            translate([0,0,0]) sphere(r=frame_t);\n            translate([55,0,10]) sphere(r=frame_t);\n        }\n        \n        // seat-tube rear -> saddle\n        hull() {\n            translate([0,0,0]) sphere(r=frame_t);\n            translate([-5,0,25]) sphere(r=frame_t);\n        }\n        \n        // top tube rear -> front\n        hull() {\n            translate([-5,0,25]) sphere(r=frame_t);\n            translate([55,0,25]) sphere(r=frame_t);\n        }\n        \n        // front head tube\n        translate([55,0,25])\n            cylinder(h=frame_t*2, r=frame_t, center=true);\n        \n        // fork blades\n        hull() {\n            translate([55,0,25]) sphere(r=frame_t);\n            translate([55,0,10]) sphere(r=frame_t);\n        }\n        hull() {\n            translate([55,0,25]) sphere(r=frame_t);\n            translate([55,0,10]) sphere(r=frame_t);\n        }\n        \n        // rear seat-stays\n        hull() {\n            translate([-5,0,25]) sphere(r=frame_t);\n            translate([-15,0,10]) sphere(r=frame_t);\n        }\n        hull() {\n            translate([-5,0,25]) sphere(r=frame_t);\n            translate([15,0,10]) sphere(r=frame_t);\n        }\n        \n        // chain-stays\n        hull() {\n            translate([0,0,0]) sphere(r=frame_t);\n            translate([-15,0,10]) sphere(r=frame_t);\n        }\n        hull() {\n            translate([0,0,0]) sphere(r=frame_t);\n            translate([15,0,10]) sphere(r=frame_t);\n        }\n    }\n}\n\n// ---------- ASSEMBLY ----------\n// Frame\nframe();\n\n// Wheels\ntranslate([-15,0,10]) wheel();\ntranslate([15,0,10]) wheel();\ntranslate([55,0,10]) wheel();\n\n// Crank sets\ntranslate([0,-wheel_w,0]) crank();\ntranslate([0, wheel_w,0]) crank();\nmirror([1,0,0]) translate([0,-wheel_w,0]) crank();\nmirror([1,0,0]) translate([0, wheel_w,0]) crank();\n\n// Saddles\ntranslate([-5,0,25+saddle_h/2]) saddle();\ntranslate([25,0,25+saddle_h/2]) saddle();\n\n// Handlebars\ntranslate([55,0,25+10]) handlebar();\ntranslate([25,0,25+10]) handlebar();",
    "renders": true
  },
  {
    "vehicle": "recumbent",
    "openscad_code": "// Recumbent bicycle - medium complexity realistic style\n// Designed for 3D printing, ~70mm length\n\n$fn = 24;\n\n// Main assembly\nmodule recumbent_bike() {\n    color(\"silver\")\n    union() {\n        // Main frame triangle\n        frame();\n        \n        // Seat\n        seat();\n        \n        // Front boom and handlebars\n        front_assembly();\n        \n        // Rear wheel assembly\n        rear_wheel_assembly();\n        \n        // Front wheel assembly\n        front_wheel_assembly();\n        \n        // Chain and cranks\n        chain_assembly();\n    }\n}\n\n// Main frame structure\nmodule frame() {\n    // Bottom bracket shell\n    translate([15, -8, 5])\n        cylinder(h=8, r=4, center=true);\n    \n    // Main tube\n    translate([-10, -8, 5])\n        rotate([0, 90, 0])\n        cylinder(h=50, r=2.5, center=true);\n    \n    // Seat tube\n    translate([-10, 10, 5])\n        rotate([0, 90, 0])\n        cylinder(h=20, r=2, center=true);\n    \n    // Chain stays\n    translate([0, 0, 5])\n        rotate([0, 0, 10])\n        cylinder(h=25, r=1.5, center=true);\n    \n    // Seat stays\n    translate([-10, 10, 5])\n        rotate([0, 0, -30])\n        cylinder(h=20, r=1.5, center=true);\n}\n\n// Mesh seat\nmodule seat() {\n    translate([-15, 12, 8])\n    rotate([90, 0, 0])\n    union() {\n        // Seat frame\n        difference() {\n            cube([30, 15, 2], center=true);\n            cube([28, 13, 3], center=true);\n        }\n        \n        // Mesh pattern\n        for(x = [-12:4:12]) {\n            for(y = [-6:3:6]) {\n                translate([x, y, 0])\n                cylinder(h=2.5, r=0.5);\n            }\n        }\n    }\n}\n\n// Front boom and handlebars\nmodule front_assembly() {\n    // Boom tube\n    translate([35, -8, 5])\n    rotate([0, 0, -15])\n    cylinder(h=30, r=2, center=true);\n    \n    // Headset\n    translate([50, -8, 5])\n    cylinder(h=8, r=3, center=true);\n    \n    // Handlebars\n    translate([50, -8, 10])\n    rotate([0, 90, 0])\n    cylinder(h=20, r=1.5, center=true);\n    \n    // Handlebar grips\n    translate([50, -8, 20])\n    rotate([0, 90, 0])\n    cylinder(h=8, r=2, center=true);\n    \n    translate([50, -8, 0])\n    rotate([0, 90, 0])\n    cylinder(h=8, r=2, center=true);\n}\n\n// Rear wheel\nmodule rear_wheel_assembly() {\n    translate([-20, 0, 5])\n    rotate([0, 0, 0])\n    union() {\n        // Rim\n        difference() {\n            cylinder(h=4, r=12, center=true);\n            cylinder(h=5, r=10, center=true);\n        }\n        \n        // Spokes\n        for(i = [0:30:360]) {\n            rotate([0, 0, i])\n            translate([11, 0, 0])\n            rotate([90, 0, 0])\n            cylinder(h=4, r=0.5, center=true);\n        }\n        \n        // Hub\n        cylinder(h=6, r=3, center=true);\n    }\n}\n\n// Front wheel\nmodule front_wheel_assembly() {\n    translate([50, -8, 5])\n    rotate([0, 0, 0])\n    union() {\n        // Fork\n        translate([0, -6, 0])\n        rotate([0, 0, -10])\n        cylinder(h=12, r=1.5, center=true);\n        \n        translate([0, 6, 0])\n        rotate([0, 0, 10])\n        cylinder(h=12, r=1.5, center=true);\n        \n        // Front rim\n        difference() {\n            cylinder(h=4, r=10, center=true);\n            cylinder(h=5, r=8, center=true);\n        }\n        \n        // Front spokes\n        for(i = [0:30:360]) {\n            rotate([0, 0, i])\n            translate([9, 0, 0])\n            rotate([90, 0, 0])\n            cylinder(h=4, r=0.5, center=true);\n        }\n        \n        // Front hub\n        cylinder(h=6, r=2.5, center=true);\n    }\n}\n\n// Chain and cranks\nmodule chain_assembly() {\n    color(\"darkgray\")\n    union() {\n        // Chain\n        translate([15, -8, 3])\n        rotate([0, 0, 0])\n        linear_extrude(height=1)\n        polygon(points=[[0,0], [30,2], [25,5], [-5,3]]);\n        \n        // Crank arms\n        translate([15, -8, 3])\n        rotate([0, 0, 0])\n        cylinder(h=8, r=1.5, center=true);\n        \n        translate([15, -8, 3])\n        rotate([0, 0, 90])\n        cylinder(h=12, r=1, center=true);\n        \n        // Pedal\n        translate([15, -8, 3])\n        rotate([0, 0, 90])\n        translate([6, 0, 0])\n        cube([8, 4, 1], center=true);\n    }\n}\n\n// Render the complete bike\nrecumbent_bike();",
    "renders": true
  },
  {
    "vehicle": "pennyfarthing",
    "openscad_code": "// Pennyfarthing High-Wheel Bicycle – Realistic, Medium Complexity\n// Approx. 60 mm total length – printable without support\n\n$fa = 2; $fs = 0.4;\n\n// Overall scale factor\nscale_factor = 0.6;          // 1:1 would be ~100 mm long\n\n// Main module\nmodule pennyfarthing() {\n    scale(scale_factor) {\n\n        // --- Large front wheel -------------------------------------------------\n        // Solid tyre + spoke ring\n        color(\"gray\") translate([0,0,8]) rotate([90,0,0])\n            cylinder(h=16, r1=50, r2=50, center=true);      // tyre\n        color(\"silver\") translate([0,0,8]) rotate([90,0,0])\n            cylinder(h=14, r1=46, r2=46, center=true);      // rim\n\n        // 12 simple round spokes\n        for (i = [0:11]) {\n            rotate([0,0,i*30])\n                translate([0,0,8])\n                rotate([90,0,0])\n                    cylinder(h=14, r1=1.5, r2=1.5, center=true);\n        }\n\n        // --- Small rear wheel --------------------------------------------------\n        color(\"gray\") translate([-70,0,8]) rotate([90,0,0])\n            cylinder(h=12, r1=14, r2=14, center=true);      // tyre\n        color(\"silver\") translate([-70,0,8]) rotate([90,0,0])\n            cylinder(h=10, r1=12, r2=12, center=true);      // rim\n        // 4 spokes\n        for (i = [0:3]) {\n            rotate([0,0,i*90])\n                translate([-70,0,8])\n                rotate([90,0,0])\n                    cylinder(h=10, r1=1, r2=1, center=true);\n        }\n\n        // --- Frame tubes (all 5 mm thick) --------------------------------------\n        color(\"darkslategray\") {\n            // Main curved fork\n            hull() {\n                translate([0,0,50]) cylinder(h=5, r=2.5, center=true);\n                translate([-50,0,8]) cylinder(h=5, r=2.5, center=true);\n            }\n\n            // Rear fork\n            hull() {\n                translate([-40,0,30]) cylinder(h=5, r=2.5, center=true);\n                translate([-70,0,8]) cylinder(h=5, r=2.5, center=true);\n            }\n\n            // Backbone\n            hull() {\n                translate([-40,0,30]) cylinder(h=5, r=2.5, center=true);\n                translate([0,0,50]) cylinder(h=5, r=2.5, center=true);\n            }\n\n            // Seat post\n            cylinder(h=30, r=2.5, center=true);  \n            translate([-20,0,65]) cylinder(h=5, r=2.5, center=true); // cross bar\n        }\n\n        // --- Seat --------------------------------------------------------------\n        color(\"brown\") {\n            translate([-20,0,65])\n                rotate([0,90,0])\n                scale([1,0.7,0.15])\n                    sphere(10);\n        }\n\n        // --- Handlebars --------------------------------------------------------\n        color(\"darkslategray\") {\n            translate([0,0,50])\n                rotate([90,0,0])\n                    cylinder(h=25, r=2.5, center=true); // stem\n            translate([0,12.5,50])\n                rotate([0,90,0])\n                    cylinder(h=30, r=2.5, center=true); // bar\n        }\n\n        // --- Crank & pedals ----------------------------------------------------\n        color(\"silver\") {\n            // Pedal arm\n            translate([0,0,8])\n                rotate([90,0,0])\n                    cylinder(h=20, r=2, center=true);\n            // Pedal\n            translate([0,20,8])\n                rotate([0,90,0])\n                    cube([12,5,2], center=true);\n        }\n\n        // --- Optional fender curve (thin printable) ----------------------------\n        color(\"gray\", 0.6) {\n            for (a = [0:5:150])\n                translate([50*cos(a), 0, 8 + 50*sin(a)])\n                    sphere(1.5);\n        }\n    }\n}\n\npennyfarthing();",
    "renders": true
  },
  {
    "vehicle": "fixie",
    "openscad_code": "// Fixie bike model - realistic style, medium complexity\n// 3D printable single-speed fixed-gear bicycle\n\n$fn = 32; // Smooth curves\n\n// Overall dimensions (mm)\nbike_length = 85;\nwheel_diameter = 30;\nwheel_width = 5;\nframe_tube_diameter = 3;\nseat_tube_angle = 75; // degrees from horizontal\n\nmodule wheel() {\n    // Tire\n    color(\"black\")\n    difference() {\n        cylinder(h=wheel_width, d=wheel_diameter, center=true);\n        cylinder(h=wheel_width+0.1, d=wheel_diameter-4, center=true);\n    }\n    \n    // Rim\n    color(\"silver\")\n    difference() {\n        cylinder(h=wheel_width-0.5, d=wheel_diameter-4, center=true);\n        cylinder(h=wheel_width+0.1, d=wheel_diameter-8, center=true);\n    }\n    \n    // Spokes\n    color(\"gray\")\n    for(i=[0:7]) {\n        rotate([0, 0, i*45])\n        cube([wheel_diameter/2-3, 0.5, 0.5], center=true);\n    }\n    \n    // Hub\n    color(\"gray\")\n    cylinder(h=wheel_width+1, d=5, center=true);\n}\n\nmodule frame_tube(length, diameter=frame_tube_diameter) {\n    cylinder(h=length, d=diameter, center=true);\n}\n\nmodule bike_frame() {\n    color(\"silver\")\n    union() {\n        // Main triangle\n        // Top tube\n        translate([0, 0, 0])\n        rotate([0, -90, 0])\n        frame_tube(45);\n        \n        // Seat tube\n        translate([-15, 0, 0])\n        rotate([0, -(90-seat_tube_angle), 0])\n        frame_tube(30);\n        \n        // Down tube\n        translate([-15, 0, 0])\n        rotate([0, -45, 0])\n        frame_tube(50);\n        \n        // Seat stays\n        translate([-40, 0, 0])\n        rotate([0, -65, 0])\n        frame_tube(35);\n        \n        // Chain stays\n        translate([-40, 0, 0])\n        rotate([0, -180, 0])\n        frame_tube(35);\n        \n        // Fork\n        translate([35, 0, 0])\n        rotate([0, -70, 0])\n        frame_tube(30);\n    }\n}\n\nmodule crankset() {\n    color(\"gray\")\n    union() {\n        // Chainring\n        difference() {\n            cylinder(h=2, d=18, center=true);\n            for(i=[0:4]) {\n                rotate([0, 0, i*72])\n                translate([0, 6, 0])\n                cube([2, 5, 3], center=true);\n            }\n            cylinder(h=3, d=6, center=true);\n        }\n        \n        // Crank arm\n        rotate([0, 90, 0])\n        translate([0, 9, 0])\n        cube([2, 15, 2], center=true);\n        \n        // Pedal\n        translate([0, 15, 0])\n        cube([4, 2, 1], center=true);\n    }\n}\n\nmodule handlebars() {\n    color(\"black\")\n    union() {\n        // Stem\n        translate([30, 0, 12])\n        rotate([0, 90, 0])\n        frame_tube(15);\n        \n        // Handlebar\n        translate([37, 0, 12])\n        rotate([0, 0, 0])\n        frame_tube(20);\n        \n        // Grips\n        translate([37, 9, 12])\n        cylinder(h=4, d=3, center=true);\n        \n        translate([37, -9, 12])\n        cylinder(h=4, d=3, center=true);\n    }\n}\n\nmodule seat() {\n    color(\"black\")\n    difference() {\n        // Saddle\n        translate([-15, 0, 25])\n        scale([1.5, 0.5, 0.3])\n        sphere(d=15);\n        \n        // Cutout\n        translate([-15, 0, 25.5])\n        scale([1.3, 0.3, 0.2])\n        sphere(d=15);\n    }\n    \n    // Seatpost\n    color(\"silver\")\n    translate([-15, 0, 20])\n    cylinder(h=10, d=2, center=true);\n}\n\n// Assemble the bike\nunion() {\n    bike_frame();\n    \n    // Rear wheel\n    translate([-40, 0, 0])\n    wheel();\n    \n    // Front wheel\n    translate([40, 0, 0])\n    wheel();\n    \n    // Crankset\n    translate([0, 0, -wheel_width/2-1])\n    crankset();\n    \n    // Handlebars\n    handlebars();\n    \n    // Seat\n    seat();\n}",
    "renders": true
  },
  {
    "vehicle": "singlespeed",
    "openscad_code": "// Singlespeed Bike - Medium Complexity Realistic Style\n// Total length ~75mm, printable in one piece\n\n$fn=32;\n\n// Main module\nmodule singlespeed() {\n    // Frame color\n    color(\"darkslategray\") {\n        // Main triangle\n        union() {\n            // Top tube\n            translate([0, 0, 35]) rotate([0, -12, 0])\n                cylinder(h=50, d=5, center=true);\n            \n            // Seat tube\n            translate([0, 0, 5]) rotate([0, 75, 0])\n                cylinder(h=45, d=6, center=true);\n                \n            // Down tube\n            translate([0, 0, 5]) rotate([0, -45, 0])\n                cylinder(h=55, d=6, center=true);\n                \n            // Seat stays\n            translate([-22, 0, 15]) rotate([0, 45, 0])\n                cylinder(h=35, d=4, center=true);\n                \n            // Chain stays\n            translate([22, 0, 15]) rotate([0, -8, 0])\n                cylinder(h=40, d=4, center=true);\n                \n            // Head tube\n            translate([25, 0, 28]) rotate([0, -12, 0])\n                cylinder(h=12, d=8);\n                \n            // Seat tube top\n            translate([-23, 0, 38]) rotate([0, 75, 0])\n                cylinder(h=10, d=6);\n        }\n    }\n    \n    // Fork\n    color(\"darkslategray\") {\n        translate([25, 0, 15]) rotate([0, 25, 0])\n            cylinder(h=35, d=5);\n        translate([25, 0, 15]) rotate([0, 25, 0])\n            cylinder(h=35, d=5);\n    }\n    \n    // Wheels\n    module wheel(pos, rot) {\n        translate(pos) rotate([0, 0, rot]) {\n            // Tire\n            color(\"black\") difference() {\n                cylinder(h=7, d=30);\n                translate([0, 0, 1]) cylinder(h=7, d=26);\n            }\n            \n            // Rim\n            color(\"silver\") difference() {\n                cylinder(h=5, d=26);\n                translate([0, 0, 1]) cylinder(h=5, d=22);\n            }\n            \n            // Spokes\n            for(i=[0:8]) {\n                rotate([0, 0, i*45]) color(\"silver\")\n                    cube([12, 1, 1], center=true);\n            }\n            \n            // Hub\n            color(\"gray\") {\n                cylinder(h=9, d=6);\n                translate([-1, 0, 0]) rotate([90, 0, 0])\n                    cylinder(h=8, d=3, center=true);\n            }\n        }\n    }\n    \n    wheel([-24, 0, 5], 0);\n    wheel([24, 0, 5], 0);\n    \n    // Crankset\n    color(\"silver\") {\n        // Bottom bracket\n        translate([-2, 0, 8]) rotate([90, 0, 0])\n            cylinder(h=10, d=8);\n            \n        // Chainring\n        translate([-2, 0, 8]) rotate([90, 0, 0]) difference() {\n            cylinder(h=3, d=24);\n            for(i=[0:4]) {\n                rotate([0, 0, i*72]) translate([8, 0, 0])\n                    cube([6, 2, 3], center=true);\n            }\n        }\n        \n        // Crank arm\n        translate([-2, 0, 8]) rotate([90, 0, 0]) rotate([0, 0, -30])\n            cube([3, 25, 3], center=true);\n            \n        // Pedal\n        translate([-2, 15, 8]) rotate([90, 0, 0]) rotate([0, 0, -30])\n            cube([8, 3, 2], center=true);\n    }\n    \n    // Handlebars\n    color(\"black\") {\n        // Stem\n        translate([25, 0, 35]) rotate([0, -12, 0]) rotate([0, 90, 0])\n            cylinder(h=12, d=5);\n            \n        // Bars\n        translate([25, 0, 42]) rotate([0, -12, 0])\n            rotate([15, 0, 0]) cube([20, 3, 3], center=true);\n            \n        // Grips\n        color(\"rubber\") {\n            translate([25, 0, 42]) rotate([0, -12, 0])\n                rotate([15, 0, 0]) translate([10, 0, 0])\n                cube([5, 4, 4], center=true);\n                \n            translate([25, 0, 42]) rotate([0, -12, 0])\n                rotate([15, 0, 0]) translate([-10, 0, 0])\n                cube([5, 4, 4], center=true);\n        }\n    }\n    \n    // Saddle\n    color(\"black\") difference() {\n        translate([-28, 0, 38]) scale([1.2, 0.8, 0.3])\n            sphere(d=12);\n        translate([-28, 0, 38]) scale([0.8, 0.6, 0.4])\n            sphere(d=12);\n    }\n    \n    // Seatpost clamp\n    color(\"silver\") cylinder(h=4, d=7);\n}\n\n// Render the bike\nsinglespeed();",
    "renders": true
  },
  {
    "vehicle": "roadbike",
    "openscad_code": "// Road Bike - Realistic Style, Medium Complexity\n// Designed for 3D printing without supports\n\n// Main parameters\n$fn = 32;\nwheel_d = 35;\nwheel_w = 4;\ntire_th = 1.5;\nframe_t = 3;\nseat_w = 8;\nseat_l = 20;\nhandlebar_w = 20;\ncrank_l = 8;\npedal_s = 4;\n\n// Wheel module with tire and spokes\nmodule wheel() {\n    difference() {\n        // Tire\n        color(\"black\")\n        cylinder(d=wheel_d, h=wheel_w, center=true);\n        \n        // Rim cavity\n        color(\"gray\")\n        cylinder(d=wheel_d - tire_th*2, h=wheel_w+0.1, center=true);\n    }\n    \n    // Spokes\n    for(i = [0:3]) {\n        rotate([0, 0, i*45])\n        color(\"silver\")\n        cube([wheel_d/2 - 3, 0.5, wheel_w], center=true);\n    }\n    \n    // Hub\n    color(\"gray\")\n    cylinder(d=4, h=wheel_w+1, center=true);\n}\n\n// Frame tubes\nmodule tube(start, end, diameter=frame_t) {\n    hull() {\n        translate(start) sphere(d=diameter);\n        translate(end) sphere(d=diameter);\n    }\n}\n\n// Bike frame assembly\nmodule frame() {\n    color(\"silver\")\n    union() {\n        // Main triangle\n        tube([0, 0, 0], [0, 50, 15]); // Seat tube\n        tube([0, 0, 0], [35, 0, 0]); // Bottom tube\n        tube([0, 50, 15], [35, 0, 0]); // Top tube\n        \n        // Rear triangle\n        tube([0, 50, 15], [-15, 65, 0]); // Seat stay\n        tube([0, 0, 0], [-15, 65, 0]); // Chain stay\n        \n        // Front fork\n        tube([35, 0, 0], [35, 0, 35]); // Head tube\n        tube([35, 0, 35], [35, 20, 60]); // Fork blade\n        tube([35, 0, 35], [35, -20, 60]); // Fork blade\n    }\n}\n\n// Seat assembly\nmodule seat() {\n    translate([0, 55, 18])\n    rotate([15, 0, 0])\n    color(\"black\")\n    difference() {\n        cube([seat_l, seat_w, 2], center=true);\n        translate([0, 0, 1])\n        cube([seat_l-4, seat_w-4, 2], center=true);\n    }\n}\n\n// Handlebars\nmodule handlebars() {\n    translate([35, 0, 35])\n    rotate([0, 0, 15])\n    color(\"black\")\n    union() {\n        cylinder(d=3, h=10);\n        translate([0, 0, 10])\n        rotate([90, 0, 0])\n        cylinder(d=3, h=handlebar_w);\n    }\n}\n\n// Pedal and crank\nmodule pedal(side=1) {\n    translate([0, 0, 0])\n    rotate([0, 0, side*90])\n    union() {\n        // Crank arm\n        color(\"silver\")\n        cube([crank_l, 2, 2]);\n        \n        // Pedal\n        translate([crank_l+pedal_s/2, 0, -pedal_s/2])\n        color(\"black\")\n        cube([pedal_s, pedal_s/2, pedal_s], center=true);\n    }\n}\n\n// Crankset\nmodule crankset() {\n    translate([0, 0, 0])\n    color(\"silver\")\n    cylinder(d=10, h=5);\n    \n    // Two cranks 180 degrees apart\n    pedal(1);\n    rotate([0, 0, 180]) pedal(-1);\n}\n\n// Full bike assembly\nscale(0.8)\nunion() {\n    // Frame\n    frame();\n    \n    // Wheels\n    translate([-15, 65, 0]) wheel();\n    translate([35, 0, 60]) wheel();\n    \n    // Components\n    seat();\n    handlebars();\n    crankset();\n}",
    "renders": true
  },
  {
    "vehicle": "gravel",
    "openscad_code": "// Realistic 3D printable gravel stone\n// Medium complexity – ~80 lines\n// Overall size ~70 mm long, printable without supports\n\n$fn = 32;          // Global facet resolution for smooth curves\n\nmodule gravel_stone() {\n    // Main irregular core: stretched sphere + noise\n    difference() {\n        scale([1.3, 0.9, 0.7])\n        sphere(d = 50, center = true);\n\n        // Carve shallow dents for realism\n        for (i = [1:3]) {\n            rotate([rand(i*3), rand(i*7), rand(i*11)])\n            translate([rand(i*5), rand(i*13), rand(i*17)])\n            scale([1.2, 1.2, 0.5])\n            sphere(d = 15);\n        }\n    }\n\n    // Attach smaller lumps on surface\n    for (j = [0:5]) {\n        angle = j * 60 + rand(j*19) * 15;\n        rot = [rand(j*23)*30, rand(j*29)*30, angle];\n        translate(spherical(28, angle, 70 + rand(j*31)*10))\n        rotate(rot)\n        scale([0.4 + rand(j*37)*0.2, 0.4 + rand(j*41)*0.2, 0.5])\n        sphere(d = 15);\n    }\n\n    // Add flat underside so it sits nicely\n    translate([0, 0, -5])\n    difference() {\n        cube([70, 50, 10], center = true);\n        translate([0, 0, 2])\n        cube([72, 52, 10], center = true);\n    }\n}\n\n// Helper to give deterministic pseudo-random values\nfunction rand(s) = (s * 9301 + 49297) % 233280 / 233280;\n\n// Convert spherical coordinates to cartesian\nfunction spherical(r, theta, phi) = [\n    r * cos(theta) * cos(phi),\n    r * sin(theta) * cos(phi),\n    r * sin(phi)\n];\n\ngravel_stone();",
    "renders": true
  },
  {
    "vehicle": "cyclocross",
    "openscad_code": "// Cyclocross bike - realistic style, medium complexity\n// Overall length ~85mm, height ~50mm, width ~20mm\n// Designed for 3D printing with 2mm wall thickness and no steep overhangs\n\n$fn = 32;\n\n// Frame parameters\nframe_tube_dia = 3;\nwheel_dia = 30;\nwheel_width = 3;\ncrank_length = 8;\ncrank_width = 2;\nsaddle_width = 8;\nsaddle_length = 12;\nhandlebar_width = 18;\nhandlebar_dia = 2;\n\n// Main assembly\nmodule cyclocross() {\n    // Rear wheel\n    translate([30, 0, 0]) rotate([0, 0, 0]) wheel();\n    \n    // Front wheel\n    translate([-30, 0, 0]) rotate([0, 0, 0]) wheel();\n    \n    // Frame\n    frame();\n    \n    // Fork\n    fork();\n    \n    // Crankset\n    translate([10, 0, -8]) crankset();\n    \n    // Saddle\n    translate([15, 0, 12]) saddle();\n    \n    // Handlebar and stem\n    translate([-28, 0, 12]) handlebar_assembly();\n    \n    // Pedals\n    translate([0, 10, -8]) pedal();\n    translate([0, -10, -8]) pedal();\n}\n\n// Wheel module\nmodule wheel() {\n    // Tire\n    color(\"black\") \n    difference() {\n        cylinder(h=wheel_width, d=wheel_dia+4, center=true);\n        cylinder(h=wheel_width+1, d=wheel_dia, center=true);\n    }\n    \n    // Rim\n    color(\"silver\") \n    cylinder(h=wheel_width-1, d=wheel_dia-2, center=true);\n    \n    // Spokes\n    color(\"gray\") \n    for(i=[0:7]) {\n        rotate([0, 0, i*45]) \n        cube([wheel_dia/2-2, 0.5, 0.5], center=true);\n    }\n    \n    // Hub\n    color(\"gray\") \n    cylinder(h=wheel_width+1, d=4, center=true);\n}\n\n// Frame module\nmodule frame() {\n    color(\"red\") {\n        // Top tube\n        translate([0, 0, 8]) rotate([0, -10, 0]) \n        cylinder(h=55, d=frame_tube_dia, center=true);\n        \n        // Down tube\n        translate([5, 0, 0]) rotate([20, -10, 0]) \n        cylinder(h=50, d=frame_tube_dia, center=true);\n        \n        // Seat tube\n        translate([15, 0, 0]) rotate([75, 0, 0]) \n        cylinder(h=25, d=frame_tube_dia, center=true);\n        \n        // Seat stays\n        translate([25, 0, 6]) rotate([30, 0, 0]) \n        cylinder(h=20, d=frame_tube_dia-1, center=true);\n        \n        // Chain stays\n        translate([20, 0, 0]) rotate([0, 0, 0]) \n        cylinder(h=20, d=frame_tube_dia-1, center=true);\n        \n        // Bottom bracket shell\n        translate([10, 0, -5]) \n        cylinder(h=5, d=5, center=true);\n    }\n}\n\n// Fork module\nmodule fork() {\n    color(\"red\") {\n        // Fork blades\n        translate([-30, 0, 0]) rotate([15, 0, 0]) \n        cylinder(h=25, d=frame_tube_dia-0.5, center=true);\n        \n        translate([-30, 0, 0]) rotate([15, 0, 0]) \n        mirror([0, 1, 0]) \n        cylinder(h=25, d=frame_tube_dia-0.5, center=true);\n        \n        // Fork crown\n        translate([-30, 0, 8]) \n        cube([5, 8, 3], center=true);\n    }\n}\n\n// Crankset module\nmodule crankset() {\n    color(\"gray\") {\n        // Chainring\n        difference() {\n            cylinder(h=2, d=12, center=true);\n            cylinder(h=3, d=8, center=true);\n        }\n        \n        // Crank arms\n        rotate([0, 90, 0]) {\n            for(i=[0:1]) {\n                rotate([0, 0, i*180]) \n                cube([crank_length, crank_width, crank_width], center=true);\n            }\n        }\n    }\n}\n\n// Saddle module\nmodule saddle() {\n    color(\"black\") \n    union() {\n        // Saddle shell\n        scale([1, 0.8, 0.3]) \n        cylinder(h=saddle_length, d=saddle_width, center=true);\n        \n        // Saddle rails\n        translate([0, 0, -2]) \n        cylinder(h=8, d=1, center=true);\n    }\n}\n\n// Handlebar assembly module\nmodule handlebar_assembly() {\n    color(\"black\") {\n        // Stem\n        translate([0, 0, 0]) rotate([0, -30, 0]) \n        cylinder(h=15, d=frame_tube_dia, center=true);\n        \n        // Handlebar\n        translate([0, 0, 5]) rotate([0, -30, 0]) \n        rotate([0, 90, 0]) \n        cylinder(h=handlebar_width, d=handlebar_dia, center=true);\n        \n        // Bar tops\n        translate([0, 8, 5]) rotate([0, -30, 0]) \n        cylinder(h=8, d=handlebar_dia, center=true);\n    }\n}\n\n// Pedal module\nmodule pedal() {\n    color(\"gray\") {\n        // Pedal body\n        cube([8, 3, 1], center=true);\n        \n        // Axle\n        rotate([90, 0, 0]) \n        cylinder(h=5, d=1, center=true);\n    }\n}\n\n// Generate the model\ncyclocross();",
    "renders": true
  },
  {
    "vehicle": "touringbike",
    "openscad_code": "// Touring Bike - Realistic Medium Complexity\n// All dimensions in mm, max ~80mm length for 3D printing\n\n// Global parameters\nwheel_d = 30;\ntire_thick = 2;\nrim_width = 3;\nframe_tube_d = 3;\ncrank_length = 12;\npedal_w = 8;\npedal_d = 4;\npedal_h = 3;\n\n// Main assembly\nmodule bike() {\n    color(\"silver\") {\n        union() {\n            // Rear wheel\n            translate([-30, 0, 0]) rotate([0, 0, 0]) wheel();\n            \n            // Front wheel\n            translate([30, 0, 0]) rotate([0, 0, 0]) wheel();\n            \n            // Frame\n            frame();\n            \n            // Handlebars\n            handlebars();\n            \n            // Saddle\n            saddle();\n            \n            // Drivetrain\n            drivetrain();\n            \n            // Luggage rack\n            rack();\n        }\n    }\n}\n\n// Wheel with tire and rim\nmodule wheel() {\n    rotate([90, 0, 0]) {\n        // Tire\n        difference() {\n            cylinder(d=wheel_d + tire_thick*2, h=tire_thick, center=true);\n            cylinder(d=wheel_d, h=tire_thick + 0.2, center=true);\n        }\n        \n        // Rim\n        difference() {\n            cylinder(d=wheel_d, h=rim_width, center=true);\n            cylinder(d=wheel_d - 4, h=rim_width + 0.2, center=true);\n        }\n        \n        // Spokes (simplified)\n        for(i=[0:7]) {\n            rotate([0, 0, i*45]) \n                cube([0.8, wheel_d/2 - 2, rim_width], center=true);\n        }\n    }\n}\n\n// Frame construction\nmodule frame() {\n    // Bottom bracket shell\n    translate([0, 0, -2]) \n        cylinder(d=frame_tube_d + 2, h=5, center=true);\n    \n    // Seat tube\n    translate([0, 0, 15]) \n        cylinder(d=frame_tube_d, h=30, center=true);\n    \n    // Down tube\n    translate([0, 0, 0]) rotate([0, -45, 0]) \n        cylinder(d=frame_tube_d, h=35, center=true);\n    \n    // Top tube\n    translate([-15, 0, 20]) rotate([0, 0, 0]) \n        cube([30, frame_tube_d, frame_tube_d], center=true);\n    \n    // Head tube\n    translate([25, 0, 20]) \n        cylinder(d=frame_tube_d + 1, h=10, center=true);\n    \n    // Fork\n    translate([30, 0, 15]) rotate([0, 20, 0]) \n        cylinder(d=frame_tube_d, h=25, center=true);\n    \n    // Seat stays\n    translate([-15, 0, 15]) rotate([0, -30, 0]) \n        cylinder(d=frame_tube_d - 1, h=20, center=true);\n    \n    // Chain stays\n    translate([-15, 0, 0]) rotate([0, 0, 0]) \n        cube([30, frame_tube_d - 1, frame_tube_d - 1], center=true);\n}\n\n// Handlebars with stem\nmodule handlebars() {\n    // Stem\n    translate([25, 0, 25]) rotate([0, -15, 0]) \n        cylinder(d=frame_tube_d, h=15, center=true);\n    \n    // Handlebar\n    translate([25, 0, 30]) rotate([90, 0, 0]) \n        cylinder(d=frame_tube_d, h=20, center=true);\n    \n    // Bar ends\n    translate([25, 10, 30]) rotate([0, 90, 0]) \n        cylinder(d=frame_tube_d - 0.5, h=5, center=true);\n    translate([25, -10, 30]) rotate([0, 90, 0]) \n        cylinder(d=frame_tube_d - 0.5, h=5, center=true);\n}\n\n// Saddle\nmodule saddle() {\n    translate([0, 0, 30]) rotate([10, 0, 0]) {\n        // Saddle shell\n        difference() {\n            scale([1.5, 1, 0.5]) sphere(d=15);\n            translate([0, 0, -3]) cube([20, 20, 10], center=true);\n        }\n        \n        // Saddle rails\n        translate([0, 0, -3]) rotate([0, 90, 0]) \n            cylinder(d=2, h=15, center=true);\n    }\n}\n\n// Crankset and pedals\nmodule drivetrain() {\n    // Chainring\n    translate([0, 0, 0]) rotate([90, 0, 0]) {\n        difference() {\n            cylinder(d=12, h=3, center=true);\n            for(i=[0:4]) {\n                rotate([0, 0, i*72]) \n                    translate([5, 0, 0]) cylinder(d=3, h=3.2, center=true);\n            }\n        }\n    }\n    \n    // Crank arm\n    translate([0, -crank_length/2, 0]) rotate([90, 0, 0]) \n        cube([frame_tube_d, crank_length, 3], center=true);\n    \n    // Pedal\n    translate([0, -crank_length, 0]) pedal();\n}\n\n// Pedal module\nmodule pedal() {\n    // Pedal body\n    translate([0, 0, 0]) rotate([0, 90, 0]) \n        cube([pedal_w, pedal_d, pedal_h], center=true);\n    \n    // Grip surface\n    for(i=[-1:1]) {\n        translate([i*3, 0, pedal_h/2 + 0.1]) \n            cube([0.5, pedal_d*0.8, 0.5], center=true);\n    }\n}\n\n// Rear luggage rack\nmodule rack() {\n    // Platform\n    translate([-30, 0, 18]) rotate([5, 0, 0]) \n        cube([15, 12, 1], center=true);\n    \n    // Support struts\n    for(side=[-1, 1]) {\n        translate([-30, side*5, 18]) \n            cylinder(d=1.5, h=8, center=true);\n    }\n    \n    // Side rails\n    translate([-30, 6, 18]) rotate([0, 0, 0]) \n        cube([15, 1, 2], center=true);\n    translate([-30, -6, 18]) rotate([0, 0, 0]) \n        cube([15, 1, 2], center=true);\n}\n\n// Render the bike\nbike();",
    "renders": true
  },
  {
    "vehicle": "randonneur",
    "openscad_code": "// Randonneur bicycle - medium complexity realistic style\n// Scale: 1:20 (frame 60mm long)\n\n$fn = 24;  // Smooth curves\nmodule frame_triangle() {\n    // Top tube\n    translate([25,0,12]) cube([30,3,3], center=true);\n    \n    // Down tube\n    translate([18,0,8]) rotate([0,0,-25]) cube([35,3,3], center=true);\n    \n    // Seat tube\n    translate([52,0,0]) rotate([0,0,75]) cube([30,3,3], center=true);\n    \n    // Seat stays\n    translate([48,-1.5,12]) rotate([0,0,-30]) cube([25,2,2], center=true);\n    translate([48,1.5,12]) rotate([0,0,-30]) cube([25,2,2], center=true);\n    \n    // Chain stays\n    translate([0,-1.5,6]) rotate([0,0,0]) cube([50,2,2], center=true);\n    translate([0,1.5,6]) rotate([0,0,0]) cube([50,2,2], center=true);\n    \n    // Head tube\n    translate([10,0,11]) rotate([0,0,0]) cylinder(h=8, r=2.5);\n}\n\nmodule fork() {\n    // Fork blades\n    translate([10,-1.5,4]) rotate([0,-45,0]) cylinder(h=35, r=1.5);\n    translate([10,1.5,4]) rotate([0,-45,0]) cylinder(h=35, r=1.5);\n    \n    // Fork crown\n    translate([10,0,5]) cube([3,5,3], center=true);\n}\n\nmodule wheels() {\n    // Front wheel\n    translate([10,0,0]) rotate([90,0,0]) cylinder(h=4, r=15);\n    // Spokes\n    for(i=[0:30:360]) rotate([0,0,i]) translate([10,0,0]) rotate([90,0,0]) \n        cylinder(h=4.2, r=0.3);\n    \n    // Rear wheel\n    translate([50,0,0]) rotate([90,0,0]) cylinder(h=4, r=15);\n    for(i=[0:30:360]) rotate([0,0,i]) translate([50,0,0]) rotate([90,0,0]) \n        cylinder(h=4.2, r=0.3);\n    \n    // Tires\n    translate([10,0,0]) rotate([90,0,0]) cylinder(h=5, r=16);\n    translate([50,0,0]) rotate([90,0,0]) cylinder(h=5, r=16);\n}\n\nmodule handlebars() {\n    // Stem\n    translate([10,0,11]) rotate([0,-30,0]) cylinder(h=15, r=1.5);\n    \n    // Bars\n    translate([10,-12,15]) cube([2,24,2], center=true);\n    translate([10,-14,15]) rotate([0,0,15]) cube([2,8,2], center=true);\n    translate([10,14,15]) rotate([0,0,-15]) cube([2,8,2], center=true);\n}\n\nmodule drivetrain() {\n    // Crankset\n    translate([22,0,6]) rotate([90,0,0]) cylinder(h=3, r=5);\n    translate([22,-8,6]) rotate([0,0,90]) cube([15,2,2], center=true);\n    translate([22,-15,6]) rotate([0,0,90]) cylinder(h=2, r=2);\n    \n    // Rear cassette\n    translate([50,0,3]) rotate([90,0,0]) for(i=[1:3]) cylinder(h=i, r=6-i*0.5);\n}\n\nmodule saddle_and_bags() {\n    // Saddle\n    translate([52,0,20]) rotate([0,-10,0]) scale([1,0.7,0.3]) sphere(r=5);\n    \n    // Handlebar bag\n    translate([10,-12,13]) cube([6,4,4], center=true);\n    \n    // Rear rack\n    translate([45,0,8]) cube([10,2,0.5], center=true);\n    translate([45,0,6]) cube([10,2,0.5], center=true);\n    \n    // Panniers\n    translate([45,-6,7]) cube([4,3,6], center=true);\n    translate([45,6,7]) cube([4,3,6], center=true);\n}\n\n// Main assembly\nunion() {\n    frame_triangle();\n    fork();\n    wheels();\n    handlebars();\n    drivetrain();\n    saddle_and_bags();\n}",
    "renders": true
  },
  {
    "vehicle": "audax",
    "openscad_code": "$fa = 1;\n$fs = 0.5;\n\n// Overall dimensions\nlength = 80;\nwidth = 28;\nheight = 12;\nwall = 1.6;\n\n// Shell with rounded ends\nmodule shell() {\n    hull() {\n        translate([0, 0, height/2])\n            cylinder(h=height-wall*2, r1=width/2-wall, r2=width/2-wall, $fn=60);\n        translate([length-wall*2, 0, height/2])\n            cylinder(h=height-wall*2, r1=width/2-wall, r2=width/2-wall, $fn=60);\n    }\n}\n\n// Outer hull shape\nmodule outer_hull() {\n    hull() {\n        translate([0, 0, height/2])\n            cylinder(h=height, r1=width/2, r2=width/2, $fn=60);\n        translate([length, 0, height/2])\n            cylinder(h=height, r1=width/2, r2=width/2, $fn=60);\n    }\n}\n\n// Vent holes on top\nmodule vents() {\n    for(x=[10:10:length-10])\n        translate([x, 0, height-0.5])\n            rotate([90,0,0])\n                cylinder(h=wall+1, r=1.5, $fn=20);\n}\n\n// Positive terminal post\nmodule positive_post() {\n    translate([length-8, -width/3, height/2+2])\n        cylinder(h=6, r=3, $fn=20);\n}\n\n// Negative terminal post\nmodule negative_post() {\n    translate([length-8, width/3, height/2+2])\n        cylinder(h=6, r=3, $fn=20);\n}\n\n// Label area indent\nmodule label_area() {\n    translate([length/2, 0, height-0.5])\n        cube([length/3, width-6, 0.5], center=true);\n}\n\n// Assembly\ndifference() {\n    // Main body\n    outer_hull();\n    \n    // Hollow interior\n    translate([wall,0,wall])\n        shell();\n    \n    // Vent holes\n    vents();\n    \n    // Label indent\n    label_area();\n}\n\n// Terminal posts added back\npositive_post();\nnegative_post();\n\n// Small rim details\ntranslate([0,0,0])\n    cube([length, wall, height]);\ntranslate([0,width-wall,0])\n    cube([length, wall, height]);",
    "renders": true
  },
  {
    "vehicle": "sporttourer",
    "openscad_code": "// Sport-Tourer Motorcycle\n// Realistic style, medium complexity\n// 1:18 scale – approx. 100 mm long\n\n$fn = 36;          // smooth curves\nwall = 1.2;        // 3D-printable wall / layer thickness\n\n// Main module\nmodule sportTourer() {\n    \n    // Rear wheel\n    translate([ -40, 0, 0 ]) rotate([ 0, 0, 0 ]) wheel();\n    \n    // Front wheel\n    translate([  30, 0, 0 ]) rotate([ 0, 0, 0 ]) wheel();\n    \n    // Swing-arm\n    translate([ -38, 0, 7 ]) rotate([ 0, 0, 0 ]) swingArm();\n    \n    // Frame\n    translate([ 0, 0, 0 ]) frame();\n    \n    // Fairing + windscreen\n    translate([ 20, 0, 15 ]) fairing();\n    \n    // Seat\n    translate([ -10, 0, 15 ]) seat();\n    \n    // Engine block\n    translate([ 0, 0, 5 ]) engine();\n    \n    // Exhaust\n    translate([ -5, -7, 2 ]) exhaust();\n    \n    // Handlebar\n    translate([ 28, 0, 20 ]) handlebar();\n    \n    // Headlight\n    translate([ 35, 0, 12 ]) headlight();\n    \n    // Tail-light / plate\n    translate([ -46, 0, 12 ]) taillight();\n}\n\n// Wheel module\nmodule wheel() {\n    color(\"darkgray\")\n    difference() {\n        cylinder(h = wall * 2, r = 12, center = true);\n        cylinder(h = wall * 2 + 0.1, r = 7, center = true);\n    }\n    \n    // Tire tread (simple ribs)\n    for (i = [0:30:330])\n        rotate([ 0, 0, i ])\n        translate([ 9.5, 0, 0 ])\n        cube([ 1, 2, wall * 2.1 ], center = true);\n}\n\n// Swing-arm\nmodule swingArm() {\n    color(\"gray\")\n    difference() {\n        cube([ 20, 4, 3 ], center = true);\n        translate([ 0, 0, -1.5 ])\n        cylinder(h = 5, r = 2);\n    }\n}\n\n// Frame\nmodule frame() {\n    color(\"silver\")\n    \n    // Main spars\n    hull() {\n        translate([ -30, 0, 7 ]) sphere(d = 2);\n        translate([  25, 0, 15 ]) sphere(d = 2);\n    }\n    \n    // Down tube\n    hull() {\n        translate([ 25, 0, 15 ]) sphere(d = 2);\n        translate([ 5, 0, 5 ]) sphere(d = 2);\n    }\n    \n    // Seat rails\n    hull() {\n        translate([ -30, 0, 7 ]) sphere(d = 2);\n        translate([ -40, 0, 12 ]) sphere(d = 2);\n    }\n}\n\n// Fairing with windscreen\nmodule fairing() {\n    color(\"red\")\n    difference() {\n        hull() {\n            translate([ 0, 0, 0 ]) sphere(d = 15);\n            translate([ 10, 0, 5 ]) sphere(d = 8);\n        }\n        \n        // Cut-away for front wheel\n        translate([ 0, 0, -10 ])\n        cylinder(h = 30, r = 13);\n    }\n    \n    // Windscreen\n    color(\"cyan\", 0.6)\n    translate([ 5, 0, 5 ])\n    rotate([ -20, 0, 0 ])\n    cube([ 8, 20, 2 ], center = true);\n}\n\n// Seat\nmodule seat() {\n    color(\"black\")\n    translate([ -25, 0, 12 ])\n    scale([ 1, 0.6, 0.3 ])\n    cube([ 30, 15, 10 ], center = true);\n}\n\n// Engine\nmodule engine() {\n    color(\"gray\")\n    cube([ 12, 10, 10 ], center = true);\n    \n    // Cylinders\n    for (i = [ -3, 3 ])\n        translate([ i, 0, 5 ])\n        cylinder(h = 10, r = 2);\n}\n\n// Exhaust\nmodule exhaust() {\n    color(\"silver\")\n    rotate([ 0, 5, 0 ])\n    cylinder(h = 30, r = 1.5);\n}\n\n// Handlebar\nmodule handlebar() {\n    color(\"black\")\n    rotate([ 0, 0, 90 ])\n    cylinder(h = 20, r = 1);\n    \n    // Bar ends\n    translate([ 0, 10, 0 ]) sphere(d = 2);\n    translate([ 0, -10, 0 ]) sphere(d = 2);\n}\n\n// Headlight\nmodule headlight() {\n    color(\"yellow\")\n    sphere(d = 6);\n    \n    // Lens\n    color(\"white\")\n    translate([ 3, 0, 0 ])\n    sphere(d = 5);\n}\n\n// Taillight\nmodule taillight() {\n    color(\"red\")\n    cube([ 2, 8, 4 ], center = true);\n    \n    // License-plate holder\n    color(\"gray\")\n    translate([ -2, 0, -3 ])\n    cube([ 0.8, 10, 2 ], center = true);\n}\n\n// Render\nsportTourer();",
    "renders": true
  },
  {
    "vehicle": "hyperbike",
    "openscad_code": "// Hyperbike - Realistic style, medium complexity\n// Designed for 3D printing, no overhangs, 1mm wall thickness\n\n$fn = 32;\n\nmodule frame_tube(length, diameter) {\n    cylinder(h = length, d = diameter, center = true);\n}\n\nmodule wheel(diameter, width) {\n    rotate([90, 0, 0]) {\n        difference() {\n            cylinder(h = width, d = diameter, center = true);\n            cylinder(h = width + 0.2, d = diameter - 2, center = true);\n        }\n        for(i = [0:7]) {\n            rotate([0, 0, i * 45]) {\n                cube([diameter/2 - 1, 1, width + 0.2], center = true);\n            }\n        }\n    }\n}\n\nmodule fork() {\n    translate([-2, 0, 0]) {\n        union() {\n            rotate([0, 90, 0]) frame_tube(20, 3);\n            rotate([0, 90, 0]) translate([0, 0, 15]) frame_tube(20, 3);\n        }\n    }\n}\n\nmodule handlebars() {\n    rotate([0, 0, 20]) {\n        union() {\n            translate([0, 0, 10]) rotate([90, 0, 0]) frame_tube(20, 2);\n            translate([-10, 0, 10]) cube([20, 2, 2], center = true);\n        }\n    }\n}\n\nmodule seat() {\n    translate([-10, 0, 20]) {\n        union() {\n            rotate([0, 90, 0]) frame_tube(10, 2);\n            translate([5, 0, 0]) {\n                cube([10, 15, 3], center = true);\n                translate([0, 0, 2]) cube([12, 17, 2], center = true);\n            }\n        }\n    }\n}\n\nmodule engine() {\n    translate([5, 0, 10]) {\n        difference() {\n            cube([15, 10, 10], center = true);\n            translate([5, 0, 0]) cylinder(h = 12, d = 6, center = true);\n            translate([-5, 0, 0]) cylinder(h = 12, d = 4, center = true);\n        }\n    }\n}\n\nmodule exhaust() {\n    translate([12, 0, 7]) {\n        rotate([0, 45, 0]) {\n            cylinder(h = 12, d_start = 3, d_end = 2, center = false);\n        }\n    }\n}\n\n// Main assembly\ntranslate([0, 0, 10]) {\n    // Rear wheel\n    translate([-20, 0, 0]) wheel(20, 3);\n    \n    // Front wheel\n    translate([20, 0, 0]) wheel(20, 3);\n    \n    // Main frame\n    union() {\n        // Backbone\n        translate([0, 0, 15]) rotate([0, 0, -10]) frame_tube(40, 3);\n        \n        // Seat stays\n        translate([-10, 0, 15]) rotate([30, 0, 0]) frame_tube(15, 2);\n        translate([-10, 0, 15]) rotate([150, 0, 0]) frame_tube(15, 2);\n        \n        // Chain stays\n        translate([-20, 0, 5]) rotate([0, 0, 0]) frame_tube(15, 2);\n        translate([-20, 0, 5]) rotate([0, 0, 5]) frame_tube(15, 2);\n        \n        // Front fork\n        translate([20, 0, 15]) fork();\n        \n        // Handlebars\n        translate([20, 0, 25]) handlebars();\n        \n        // Seat\n        seat();\n        \n        // Engine block\n        engine();\n        \n        // Exhaust\n        exhaust();\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "supersport",
    "openscad_code": "// Supersport Motorcycle - Realistic Style, Medium Complexity\n// Scale: 1:18 (approx 100mm long)\n\n$fn = 32;  // Smooth curves for printing\n\nmodule body_shell() {\n    // Main fairing\n    difference() {\n        hull() {\n            translate([-20, 0, 8]) cube([40, 25, 15], center=true);\n            translate([-35, 0, 12]) cube([30, 20, 20], center=true);\n            translate([15, 0, 10]) cube([30, 22, 18], center=true);\n        }\n        // Windscreen cutout\n        translate([-30, 0, 22]) rotate([0, -10, 0]) \n            cube([25, 18, 15], center=true);\n    }\n    \n    // Windscreen\n    translate([-30, 0, 22]) rotate([0, -10, 0]) \n        color(\"LightBlue\", 0.5) cube([24, 16, 0.5], center=true);\n}\n\nmodule wheels() {\n    module wheel(pos) {\n        translate(pos) {\n            // Tire\n            color(\"Black\") cylinder(h=8, r=11, center=true);\n            // Rim\n            color(\"Silver\") \n                difference() {\n                    cylinder(h=9, r=9.5, center=true);\n                    cylinder(h=10, r=6, center=true);\n                }\n            // Spokes\n            for(i=[0:6]) {\n                rotate([0, 0, i*60]) \n                    cube([1.5, 9, 8], center=true);\n            }\n        }\n    }\n    wheel([-28, 0, 0]);\n    wheel([28, 0, 0]);\n}\n\nmodule chassis() {\n    // Frame rails\n    color(\"Gray\") {\n        hull() {\n            translate([-35, 0, 2]) cube([70, 3, 4], center=true);\n            translate([-20, 0, 5]) cube([40, 3, 4], center=true);\n        }\n        \n        // Engine block\n        translate([-5, 0, 4]) cube([20, 12, 8], center=true);\n        \n        // Exhaust\n        color(\"DarkGray\") {\n            translate([15, 6, 4]) rotate([0, -10, 0]) \n                cylinder(h=25, r=2);\n            translate([15, -6, 4]) rotate([0, -10, 0]) \n                cylinder(h=25, r=2);\n        }\n    }\n}\n\nmodule seat_tank() {\n    // Fuel tank\n    color(\"Red\") {\n        hull() {\n            translate([-5, 0, 12]) cube([30, 15, 12], center=true);\n            translate([-10, 0, 15]) cube([20, 14, 10], center=true);\n        }\n    }\n    \n    // Seat\n    color(\"Black\") {\n        translate([15, 0, 10]) cube([20, 12, 4], center=true);\n    }\n}\n\nmodule handlebars() {\n    translate([-28, 0, 16]) {\n        // Bar clamps\n        color(\"Silver\") \n            for(y=[-5, 5]) translate([0, y, 0]) cube([4, 2, 4], center=true);\n        \n        // Bars\n        color(\"Black\") {\n            rotate([0, -20, 0]) {\n                translate([0, -6, 0]) cube([3, 12, 1], center=true);\n                translate([0, 6, 0]) cube([3, 12, 1], center=true);\n            }\n        }\n    }\n}\n\nmodule swingarm() {\n    color(\"Gray\") {\n        translate([20, 0, 2]) {\n            hull() {\n                cube([20, 4, 4], center=true);\n                translate([15, 0, 0]) cube([10, 8, 4], center=true);\n            }\n        }\n    }\n}\n\nmodule mirrors() {\n    color(\"Silver\") {\n        translate([-20, 8, 15]) {\n            rotate([0, 0, 30]) cube([2, 10, 2]);\n            translate([0, 5, 0]) sphere(r=2);\n        }\n        translate([-20, -8, 15]) {\n            rotate([0, 0, -30]) cube([2, 10, 2]);\n            translate([0, -5, 0]) sphere(r=2);\n        }\n    }\n}\n\n// Assembly\ndifference() {\n    union() {\n        body_shell();\n        chassis();\n        wheels();\n        seat_tank();\n        handlebars();\n        swingarm();\n        mirrors();\n    }\n    \n    // Clearance for wheels\n    translate([-28, 0, 0]) rotate([90, 0, 0]) cylinder(h=30, r=6);\n    translate([28, 0, 0]) rotate([90, 0, 0]) cylinder(h=30, r=6);\n}",
    "renders": true
  },
  {
    "vehicle": "hypernaked",
    "openscad_code": "// Hypernaked motorcycle - realistic style, medium complexity\n// Overall dimensions: ~85mm long x 35mm wide x 45mm high\n\n// Main frame backbone\nmodule frame() {\n    difference() {\n        union() {\n            // Main tube\n            rotate([0, 10, 0]) \n                cylinder(h=50, d1=6, d2=5, $fn=16);\n            \n            // Engine mount cross tube\n            translate([0, 0, -15]) \n                rotate([90, 0, 0])\n                    cylinder(h=30, d=5, $fn=16);\n            \n            // Rear subframe\n            translate([25, 0, -5])\n                rotate([0, -5, 0])\n                    cylinder(h=35, d=4, $fn=16);\n        }\n        \n        // Lightening holes\n        for(i = [0:2]) {\n            translate([i*15-15, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h=7, d=3, $fn=12);\n        }\n    }\n}\n\n// Engine block\nmodule engine() {\n    difference() {\n        // Main block\n        translate([0, 0, -25])\n            cube([20, 20, 25], center=true);\n        \n        // Cylinder head\n        translate([0, 0, -12.5])\n            cube([10, 18, 20], center=true);\n        \n        // Oil pan\n        translate([0, 0, -37.5])\n            cube([22, 22, 5], center=true);\n    }\n    \n    // Exhaust pipes\n    for(side = [-1, 1]) {\n        translate([side*10, 0, -30])\n            rotate([0, 90, 0])\n                cylinder(h=30, d=3, $fn=12);\n    }\n}\n\n// Fuel tank\nmodule tank() {\n    difference() {\n        hull() {\n            translate([-10, 0, 5])\n                sphere(d=12, $fn=24);\n            translate([10, 0, 5])\n                sphere(d=12, $fn=24);\n            translate([0, 0, 10])\n                sphere(d=15, $fn=24);\n        }\n        \n        // Cap recess\n        translate([5, 0, 12])\n            cylinder(h=5, d=4, $fn=12);\n    }\n}\n\n// Front fork assembly\nmodule front_fork() {\n    // Triple clamp\n    translate([-25, 0, 0])\n        cube([8, 20, 5], center=true);\n    \n    // Fork tubes\n    for(side = [-1, 1]) {\n        translate([-25, side*6, -15])\n            cylinder(h=30, d=4, $fn=12);\n    }\n    \n    // Front wheel\n    translate([-25, 0, -30])\n        rotate([90, 0, 0])\n            cylinder(h=8, d=25, $fn=32);\n    \n    // Brake disc\n    translate([-25, 10, -30])\n        rotate([90, 0, 0])\n            cylinder(h=2, d=20, $fn=32);\n}\n\n// Rear swingarm\nmodule swingarm() {\n    difference() {\n        hull() {\n            translate([25, 0, -25])\n                sphere(d=6, $fn=12);\n            translate([45, 0, -25])\n                sphere(d=6, $fn=12);\n        }\n        \n        // Hollow center\n        translate([35, 0, -25])\n            cube([25, 8, 8], center=true);\n    }\n    \n    // Rear wheel\n    translate([45, 0, -25])\n        rotate([90, 0, 0])\n            cylinder(h=8, d=28, $fn=32);\n    \n    // Chain sprocket\n    translate([35, -12, -25])\n        cylinder(h=3, d=12, $fn=16);\n}\n\n// Seat\nmodule seat() {\n    hull() {\n        translate([15, 0, 0])\n            cube([20, 15, 3], center=true);\n        translate([30, 0, 2])\n            cube([15, 12, 5], center=true);\n    }\n}\n\n// Handlebars\nmodule handlebars() {\n    translate([-25, 0, 8])\n        rotate([0, 90, 0])\n            cylinder(h=30, d=3, $fn=12);\n    \n    // Grips\n    for(side = [-1, 1]) {\n        translate([-25, side*15, 8])\n            cylinder(h=5, d=4, $fn=12);\n    }\n}\n\n// Headlight\nmodule headlight() {\n    translate([-30, 0, 10])\n        difference() {\n            sphere(d=10, $fn=24);\n            translate([0, 0, 3])\n                sphere(d=8, $fn=24);\n        }\n}\n\n// Tail light\nmodule tail_light() {\n    translate([40, 0, 0])\n        cube([4, 8, 4], center=true);\n}\n\n// Assemble the motorcycle\nunion() {\n    frame();\n    engine();\n    tank();\n    front_fork();\n    swingarm();\n    seat();\n    handlebars();\n    headlight();\n    tail_light();\n}",
    "renders": true
  },
  {
    "vehicle": "musclebike",
    "openscad_code": "// Musclebike - Realistic style, medium complexity (~100 lines)\n$fn = 36; // Smooth curves\n\n// Main scale and orientation\nscale([0.3,0.3,0.3]) rotate([0,0,0]) union() {\n\n/* --- Chassis & Frame --- */\nmodule frame() {\n    // Main backbone tube\n    translate([-20,0,0]) rotate([0,0,0]) cylinder(h=100,r=5,center=false);\n    \n    // Seat post tube\n    translate([10,0,0]) rotate([-20,0,0]) cylinder(h=70,r=5,center=false);\n    \n    // Down tube\n    translate([0,0,0]) rotate([0,0,10]) cylinder(h=60,r=4,center=false);\n    \n    // Rear chain stays\n    translate([0,0,0]) rotate([0,0,-10]) cylinder(h=70,r=3,center=false);\n    mirror([0,1,0]) translate([0,0,0]) rotate([0,0,-10]) cylinder(h=70,r=3,center=false);\n}\n\n/* --- Engine & Transmission --- */\nmodule engine() {\n    // V-twin engine block\n    translate([-35,0,0]) difference() {\n        union() {\n            cylinder(h=30,r=15,center=true);\n            translate([0,0,-15]) cylinder(h=30,r=15,center=true);\n            translate([0,0,-30]) cylinder(h=30,r=15,center=true);\n        }\n        // Cylinder bores\n        translate([0,0,-15]) cylinder(h=30,r=5,center=true);\n        translate([0,0,15]) cylinder(h=30,r=5,center=true);\n    }\n    \n    // Exhaust pipes\n    translate([-35,12,0]) rotate([0,-90,0]) cylinder(h=40,r=3,center=false);\n    translate([-35,-12,0]) rotate([0,-90,0]) cylinder(h=40,r=3,center=false);\n}\n\n/* --- Wheels & Tires --- */\nmodule wheel(posX, posY, posZ, size) {\n    translate([posX,posY,posZ]) {\n        // Tire\n        difference() {\n            cylinder(h=20,r=size,$fn=36);\n            cylinder(h=22,r=size-4,$fn=36);\n        }\n        // Rim\n        translate([0,0,-1]) cylinder(h=22,r=size-4,$fn=36);\n        // Spokes (simplified)\n        for(i=[0:6]) rotate([0,0,i*60]) cube([2,size-5,20],center=true);\n    }\n}\n\n/* --- Seat --- */\nmodule seat() {\n    translate([40,0,20]) rotate([0,0,0]) scale([1,0.5,0.3]) cube([30,20,10],center=true);\n}\n\n/* --- Handlebars --- */\nmodule handlebars() {\n    translate([-40,0,35]) rotate([0,0,0]) {\n        // Handlebar stem\n        cylinder(h=20,r=3,center=false);\n        // Handlebar\n        translate([0,0,20]) rotate([90,0,0]) cylinder(h=40,r=2,center=true);\n    }\n}\n\n/* --- Rear Fender --- */\nmodule fender() {\n    translate([0,0,10]) rotate([0,90,0]) \n        scale([0.5,1,0.2]) difference() {\n            cylinder(h=50,r=25,$fn=100);\n            translate([0,0,-2]) cylinder(h=55,r=20,$fn=100);\n        }\n}\n\n/* --- Assembly --- */\nframe();\nengine();\nwheel(0,0,0,20);        // Rear wheel\nwheel(-60,0,0,15);      // Front wheel\nseat();\nhandlebars();\nfender();\n\n}",
    "renders": true
  },
  {
    "vehicle": "powercruiser",
    "openscad_code": "// Powercruiser Motorcycle – Realistic & Medium Complexity\n// Approx. 1:60 scale (≈75 mm long)\n\n$fn = 32;          // Smooth curves\nscale = 1;         // Global scale\n\n// MAIN MODULE ----------------------------------------------------\nmodule powercruiser() {\n    union() {\n        frame();\n        engine();\n        tank();\n        seat();\n        fork();\n        wheels();\n        exhaust();\n        lights();\n        details();\n    }\n}\n\n// FRAME ----------------------------------------------------------\nmodule frame() {\n    color(\"silver\")\n    difference() {\n        // Main double-cradle tubes\n        union() {\n            for (a = [0, 1])\n                rotate([0, 0, a * 180]) translate([0, 0, -4])\n                    cylinder(h = 68, d = 4);\n\n            // Cross bar\n            translate([30, 0, 8])\n                rotate([90, 0, 0])\n                    cylinder(h = 32, d = 4);\n        }\n\n        // Holes for screws\n        for (p = [[10, 0, 0], [55, 0, 0]])\n            translate(p) rotate([0, 90, 0])\n                cylinder(h = 8, d = 2);\n    }\n}\n\n// ENGINE ---------------------------------------------------------\nmodule engine() {\n    color(\"darkgrey\")\n    translate([20, 0, 8]) union() {\n        // Engine block\n        cube([18, 12, 14], center = true);\n\n        // Cylinders\n        for (s = [-4, 4])\n            translate([s, 0, 5])\n                cylinder(h = 10, d = 7);\n\n        // Oil cooler\n        translate([0, 8, 0]) rotate([90, 0, 0])\n            cylinder(h = 6, d = 5);\n    }\n}\n\n// FUEL TANK ------------------------------------------------------\nmodule tank() {\n    color(\"red\")\n    translate([36, 0, 16]) union() {\n        // Main tank\n        scale([1, 0.6, 0.4])\n            sphere(d = 24);\n\n        // Filler cap\n        translate([6, 0, 5])\n            cylinder(h = 2, d = 4);\n    }\n}\n\n// SEAT -----------------------------------------------------------\nmodule seat() {\n    color(\"black\")\n    translate([58, 0, 14]) {\n        difference() {\n            // Seat base\n            cube([22, 12, 4], center = true);\n            // Top rounding\n            translate([0, 0, 2])\n                cube([22, 12, 4], center = true);\n        }\n    }\n}\n\n// FRONT FORK -----------------------------------------------------\nmodule fork() {\n    color(\"silver\")\n    translate([0, 0, 10]) {\n        // Triple tree\n        cube([8, 4, 2], center = true);\n\n        // Fork tubes\n        for (y = [-3, 3])\n            translate([0, y, -10])\n                cylinder(h = 20, d = 2.5);\n    }\n}\n\n// WHEELS ---------------------------------------------------------\nmodule wheels() {\n    color(\"black\")\n    for (pos = [[0, 0, 0], [68, 0, 0]]) {\n        translate(pos) {\n            // Tire\n            cylinder(h = 5, d = 22, center = true);\n\n            // Rim\n            color(\"silver\")\n                difference() {\n                    cylinder(h = 5, d = 16, center = true);\n                    cylinder(h = 6, d = 10, center = true);\n                }\n\n            // Spokes\n            for (i = [0:30:330])\n                rotate([0, 0, i])\n                    cube([8, 0.8, 1], center = true);\n        }\n    }\n}\n\n// EXHAUST --------------------------------------------------------\nmodule exhaust() {\n    color(\"silver\")\n    union() {\n        // Header pipes\n        for (y = [-4, 4])\n            translate([20, y, 8]) rotate([0, -90, 0])\n                cylinder(h = 15, d = 3);\n\n        // Muffler\n        translate([5, 0, 5]) rotate([0, -90, 0])\n            cylinder(h = 20, d = 5);\n    }\n}\n\n// LIGHTS ---------------------------------------------------------\nmodule lights() {\n    color(\"black\")\n    translate([0, 0, 14]) {\n        // Headlight\n        sphere(d = 8);\n        color(\"yellow\")\n            translate([0, 0, -3])\n                sphere(d = 5);\n    }\n\n    // Taillight\n    color(\"darkred\")\n    translate([72, 0, 16])\n        sphere(d = 4);\n}\n\n// SMALL DETAILS --------------------------------------------------\nmodule details() {\n    // Mirrors\n    color(\"silver\")\n    for (y = [-6, 6])\n        translate([-6, y, 20])\n            rotate([0, 20, 0])\n                cylinder(h = 7, d = 1.5);\n\n    // Handlebars\n    translate([0, 0, 18])\n        rotate([0, 90, 0])\n            cylinder(h = 20, d = 2);\n\n    // Foot pegs\n    color(\"black\")\n    for (side = [-1, 1])\n        translate([40, side * 7, 6])\n            rotate([0, 90, 0])\n                cylinder(h = 4, d = 1.5);\n}\n\n// RENDER ---------------------------------------------------------\npowercruiser();",
    "renders": true
  },
  {
    "vehicle": "bagger",
    "openscad_code": "// Realistic medium-complexity bagger (excavator) model\n// Overall length ~80 mm, width ~30 mm, height ~35 mm\n\n$fa = 2; $fs = 0.5;\n\n// Main body\nmodule body() {\n    difference() {\n        // Main chassis block\n        translate([-10, -15, 0])\n            cube([50, 30, 15], center=false);\n        \n        // Cab windows\n        translate([15, -12, 10])\n            cube([12, 24, 8]);\n        translate([15, -14, 13])\n            cube([14, 28, 6]);\n    }\n    \n    // Cab roof\n    translate([21, 0, 23])\n        cube([20, 26, 3], center=true);\n    \n    // Engine compartment\n    translate([-8, 0, 15])\n        cube([20, 26, 12], center=true);\n}\n\n// Tracks\nmodule track() {\n    // Track frame\n    difference() {\n        translate([0, -18, 3])\n            cube([45, 8, 10]);\n        translate([0, -18, 5])\n            cube([43, 6, 8]);\n    }\n    \n    // Track pads\n    for(i = [0:4]) {\n        translate([i*10 - 20, -18, 1])\n            cube([8, 10, 2]);\n    }\n    \n    // Front idler\n    translate([20, -18, 8])\n        rotate([90,0,0])\n            cylinder(h=8, r=4);\n    \n    // Rear sprocket\n    translate([-20, -18, 8])\n        rotate([90,0,0])\n            cylinder(h=8, r=5);\n}\n\n// Boom assembly\nmodule boom() {\n    // Base pivot\n    translate([25, 0, 15])\n        rotate([0,90,0])\n            cylinder(h=10, r=6);\n    \n    // Main boom arm\n    translate([35, 0, 20])\n        rotate([30,0,0])\n            cube([30, 8, 8], center=true);\n    \n    // Stick arm\n    translate([55, 0, 30])\n        rotate([60,0,0])\n            cube([25, 6, 6], center=true);\n}\n\n// Bucket\nmodule bucket() {\n    // Bucket base\n    translate([70, 0, 25])\n        rotate([0,0,30])\n            difference() {\n                translate([0, 0, -3])\n                    cube([15, 12, 6], center=true);\n                translate([-5, 0, -3])\n                    cube([20, 14, 8], center=true);\n            }\n    \n    // Bucket teeth\n    for(i = [-1:1]) {\n        translate([78, i*4, 25])\n            rotate([0,0,30])\n                cube([3, 2, 4], center=false);\n    }\n}\n\n// Hydraulic cylinders\nmodule cylinder_assembly(pos, angle, length) {\n    translate(pos)\n        rotate([0,0,angle])\n            union() {\n                // Cylinder body\n                translate([length/2, 0, 0])\n                    rotate([0,90,0])\n                        cylinder(h=length, r=2);\n                \n                // Piston rod\n                translate([length + 2, 0, 0])\n                    rotate([0,90,0])\n                        cylinder(h=length/2, r=1);\n            }\n}\n\n// Assembly\nbody();\nmirror([0,1,0]) track();\nboom();\nbucket();\ncylinder_assembly([30, 0, 18], -30, 15);\ncylinder_assembly([50, 0, 28], -60, 12);",
    "renders": true
  },
  {
    "vehicle": "sportsbike",
    "openscad_code": "// Sportsbike model - realistic style, medium complexity\n// Designed for 3D printing (no steep overhangs, 2mm wall thickness)\n\n$fn = 32;\n\n// Main module\nmodule sportsbike() {\n    // Overall scale for 3D printing (80mm length)\n    scale(0.8) {\n        // Frame assembly\n        union() {\n            // Rear section\n            frame_rear();\n            \n            // Front forks and wheel\n            translate([35, 0, 5]) rotate([0, 0, 0]) front_assembly();\n            \n            // Rear wheel\n            translate([-30, 0, 0]) rear_wheel();\n            \n            // Engine block\n            engine();\n            \n            // Fuel tank\n            fuel_tank();\n            \n            // Seat\n            seat();\n            \n            // Exhaust pipes\n            exhaust();\n            \n            // Windscreen\n            windscreen();\n        }\n    }\n}\n\nmodule frame_rear() {\n    // Main frame tube\n    color(\"gray\") {\n        // Top tube\n        translate([0, 0, 15]) rotate([0, -10, 0]) \n            cylinder(h = 60, r1 = 3, r2 = 3);\n        \n        // Down tubes\n        translate([15, 0, 10]) rotate([0, 45, 0])\n            cylinder(h = 40, r1 = 3, r2 = 3);\n        translate([15, 0, -10]) rotate([0, -45, 0])\n            cylinder(h = 40, r1 = 3, r2 = 3);\n            \n        // Swingarm\n        translate([-25, 0, 0]) rotate([0, 0, 0])\n            difference() {\n                cube([30, 4, 8], center = true);\n                translate([0, 0, 0]) cube([28, 6, 6], center = true);\n            }\n    }\n}\n\nmodule engine() {\n    color(\"darkgray\") {\n        // Engine block\n        translate([5, 0, -5]) \n            cube([20, 12, 10], center = true);\n        \n        // Cylinder heads\n        for(i = [0:1]) {\n            translate([5 + i*8, 0, 2])\n                cylinder(h = 8, r = 4);\n        }\n        \n        // Oil pan\n        translate([5, 0, -11])\n            cube([18, 10, 4], center = true);\n    }\n}\n\nmodule fuel_tank() {\n    color(\"red\") {\n        hull() {\n            translate([15, 0, 15])\n                sphere(r = 8);\n            translate([25, 0, 15])\n                scale([1, 0.8, 0.6]) sphere(r = 8);\n        }\n    }\n}\n\nmodule seat() {\n    color(\"black\") {\n        translate([-5, 0, 15])\n            cube([25, 8, 3], center = true);\n    }\n}\n\nmodule front_assembly() {\n    // Fork tubes\n    color(\"silver\") {\n        for(side = [-1:1:1]) {\n            translate([0, side*3, 5])\n                cylinder(h = 25, r = 2);\n        }\n        \n        // Triple clamp\n        translate([0, 0, 20])\n            cube([8, 10, 3], center = true);\n        \n        // Handlebars\n        translate([0, 0, 22])\n            rotate([0, 90, 0])\n                cylinder(h = 20, r = 1.5);\n    }\n    \n    // Front wheel\n    translate([0, 0, -8]) wheel(12);\n}\n\nmodule rear_wheel() {\n    wheel(14);\n}\n\nmodule wheel(radius) {\n    color(\"black\") {\n        // Tire\n        difference() {\n            rotate_extrude()\n                translate([radius, 0, 0])\n                    circle(r = 3);\n            rotate_extrude()\n                translate([radius - 2, 0, 0])\n                    circle(r = 1);\n        }\n        \n        // Rim\n        color(\"silver\") {\n            for(i = [0:6]) {\n                rotate([0, 0, i*60])\n                    translate([radius - 3, 0, 0])\n                        cube([6, 1, 2], center = true);\n            }\n            \n            // Hub\n            cylinder(h = 2, r = 4);\n        }\n        \n        // Brake disc\n        color(\"lightgray\") {\n            translate([0, 0, -1])\n                cylinder(h = 1, r = radius - 1);\n        }\n    }\n}\n\nmodule exhaust() {\n    color(\"silver\") {\n        // Headers\n        for(i = [0:1]) {\n            translate([5 + i*8, -6 - i*2, -8])\n                rotate([0, 90, 45])\n                    cylinder(h = 15, r = 1.5);\n        }\n        \n        // Muffler\n        translate([-15, -8, -5])\n            rotate([0, 0, 15])\n                cylinder(h = 20, r = 3);\n    }\n}\n\nmodule windscreen() {\n    color(\"lightblue\", 0.5) {\n        translate([30, 0, 25])\n            rotate([0, -30, 0])\n                cube([12, 15, 1], center = true);\n    }\n}\n\n// Generate the model\nsportsbike();",
    "renders": true
  },
  {
    "vehicle": "minibike",
    "openscad_code": "$fs = 0.5;\n$fa = 1;\n\n// Overall scale factor\nscale_factor = 0.35;\n\n// Main body frame\nmodule frame() {\n    union() {\n        // Main tube\n        rotate([0, 90, 0])\n            cylinder(h=80*scale_factor, r=4*scale_factor, $fn=20);\n        \n        // Seat post\n        translate([0, 0, 20*scale_factor])\n            rotate([0, 90, 0])\n            cylinder(h=30*scale_factor, r=3*scale_factor, $fn=20);\n        \n        // Engine mount\n        translate([-25*scale_factor, 0, -5*scale_factor])\n            cube([20*scale_factor, 8*scale_factor, 15*scale_factor]);\n        \n        // Rear support\n        translate([-35*scale_factor, 0, 5*scale_factor])\n            rotate([0, 30, 0])\n            cylinder(h=25*scale_factor, r=2.5*scale_factor, $fn=20);\n    }\n}\n\n// Wheel with tire\nmodule wheel(diameter=25*scale_factor, width=8*scale_factor) {\n    difference() {\n        // Tire\n        color(\"black\")\n        cylinder(h=width, r=diameter/2, $fn=30);\n        \n        // Hub cutout\n        translate([0, 0, -1])\n            cylinder(h=width+2, r=diameter/4, $fn=20);\n    }\n    \n    // Hub\n    translate([0, 0, width/2])\n        cylinder(h=width, r=diameter/5, $fn=20);\n}\n\n// Engine block\nmodule engine() {\n    union() {\n        // Main block\n        color(\"gray\")\n        translate([-20*scale_factor, -6*scale_factor, 0])\n            cube([15*scale_factor, 12*scale_factor, 10*scale_factor]);\n        \n        // Cylinder head\n        color(\"silver\")\n        translate([-25*scale_factor, -4*scale_factor, 5*scale_factor])\n            cube([8*scale_factor, 8*scale_factor, 5*scale_factor]);\n        \n        // Pull start\n        color(\"black\")\n        translate([-10*scale_factor, -5*scale_factor, 2*scale_factor])\n            cylinder(h=4*scale_factor, r=5*scale_factor, $fn=20);\n    }\n}\n\n// Seat\nmodule seat() {\n    color(\"darkblue\")\n    translate([-5*scale_factor, -8*scale_factor, 25*scale_factor])\n    scale([1, 0.7, 0.3])\n    sphere(r=12*scale_factor, $fn=30);\n}\n\n// Handlebars\nmodule handlebars() {\n    union() {\n        // Stem\n        color(\"gray\")\n        translate([28*scale_factor, 0, 15*scale_factor])\n            rotate([0, 15, 0])\n            cylinder(h=15*scale_factor, r=2*scale_factor, $fn=20);\n        \n        // Bar\n        color(\"black\")\n        translate([35*scale_factor, 0, 28*scale_factor])\n            rotate([0, 105, 0])\n            cylinder(h=20*scale_factor, r=2*scale_factor, $fn=20);\n        \n        // Grips\n        for(side = [-1, 1]) {\n            translate([35*scale_factor, side*8*scale_factor, 28*scale_factor])\n                rotate([0, 105, 0])\n                cylinder(h=4*scale_factor, r=2.5*scale_factor, $fn=20);\n        }\n    }\n}\n\n// Fork\nmodule fork() {\n    color(\"gray\")\n    union() {\n        // Main tube\n        translate([25*scale_factor, 0, 15*scale_factor])\n            cylinder(h=15*scale_factor, r=3*scale_factor, $fn=20);\n        \n        // Fork legs\n        for(side = [-1, 1]) {\n            translate([25*scale_factor, side*4*scale_factor, 0])\n                cylinder(h=15*scale_factor, r=2*scale_factor, $fn=20);\n        }\n    }\n}\n\n// Exhaust pipe\nmodule exhaust() {\n    color(\"darkgray\")\n    translate([-25*scale_factor, 6*scale_factor, 0])\n    rotate([0, 0, 90])\n    rotate([0, 90, 0])\n    cylinder(h=20*scale_factor, r=2*scale_factor, $fn=20);\n}\n\n// Assemble the minibike\nunion() {\n    frame();\n    translate([30*scale_factor, 0, 0]) wheel();\n    translate([-35*scale_factor, 0, 0]) wheel();\n    engine();\n    seat();\n    handlebars();\n    fork();\n    exhaust();\n}",
    "renders": true
  },
  {
    "vehicle": "pitbike",
    "openscad_code": "// Pitbike model - medium complexity, realistic style\n// Overall dimensions: 85x40x45mm (LxWxH)\n\n$fn=32;\n\n// Main body assembly\nmodule pitbike() {\n    // Frame\n    color(\"silver\")\n    frame();\n    \n    // Engine\n    color(\"darkslategray\")\n    translate([10,0,-5])\n    engine();\n    \n    // Wheels\n    color(\"black\")\n    translate([-25,0,0])\n    wheel(15,4);\n    \n    color(\"black\")\n    translate([30,0,0])\n    wheel(15,4);\n    \n    // Front fork\n    color(\"silver\")\n    translate([-25,0,15])\n    front_fork();\n    \n    // Rear suspension\n    color(\"silver\")\n    translate([20,0,5])\n    rear_suspension();\n    \n    // Seat\n    color(\"darkred\")\n    translate([0,0,15])\n    seat();\n    \n    // Handlebars\n    color(\"silver\")\n    translate([-25,0,25])\n    handlebars();\n    \n    // Exhaust\n    color(\"silver\")\n    translate([15,-8,0])\n    rotate([0,15,0])\n    exhaust();\n    \n    // Fuel tank\n    color(\"red\")\n    translate([-5,0,15])\n    fuel_tank();\n}\n\n// Main frame structure\nmodule frame() {\n    // Main tube\n    rotate([0,15,0])\n    cylinder(h=50, d=6);\n    \n    // Rear frame rails\n    translate([-10,0,0])\n    rotate([0,-10,0])\n    cylinder(h=40, d=5);\n    \n    // Support struts\n    for(i=[-2,2]) {\n        translate([i*5,0,5])\n        cylinder(h=25, d=3);\n    }\n}\n\n// Engine block\nmodule engine() {\n    difference() {\n        // Main engine block\n        cube([20,12,15], center=true);\n        \n        // Cylinder head\n        translate([8,0,7])\n        cube([8,8,8], center=true);\n        \n        // Cooling fins\n        for(i=[-3,0,3]) {\n            translate([8,i,9])\n            cube([7,1,2], center=true);\n        }\n    }\n}\n\n// Wheel module\nmodule wheel(radius, width) {\n    difference() {\n        // Tire\n        cylinder(h=width, r=radius, center=true);\n        \n        // Rim\n        translate([0,0,-1])\n        cylinder(h=width+2, r=radius-3, center=true);\n        \n        // Hub\n        cylinder(h=width+3, r=3, center=true);\n    }\n    \n    // Spokes\n    for(i=[0:45:135]) {\n        rotate([0,90,i])\n        translate([0,0,0])\n        cube([radius-4,2,width-1], center=true);\n    }\n}\n\n// Front fork assembly\nmodule front_fork() {\n    // Fork tubes\n    for(side=[-6,6]) {\n        translate([0,side,0])\n        cylinder(h=25, d=4);\n    }\n    \n    // Fork bridge\n    translate([0,0,20])\n    cube([15,15,3], center=true);\n}\n\n// Rear suspension\nmodule rear_suspension() {\n    // Shock absorber\n    cylinder(h=20, d=4);\n    \n    // Spring\n    translate([0,0,10])\n    cylinder(h=10, d=6);\n}\n\n// Seat\nmodule seat() {\n    // Base\n    translate([15,0,0])\n    cube([25,15,3], center=true);\n    \n    // Cushion top\n    translate([15,0,2])\n    scale([1,1,0.5])\n    sphere(d=15);\n}\n\n// Handlebars\nmodule handlebars() {\n    // Stem\n    cylinder(h=15, d=4);\n    \n    // Bars\n    translate([0,0,15])\n    rotate([90,0,0])\n    cylinder(h=25, d=3);\n    \n    // Grips\n    for(side=[-10,10]) {\n        translate([0,side,15])\n        rotate([90,0,0])\n        cylinder(h=5, d=4);\n    }\n}\n\n// Exhaust pipe\nmodule exhaust() {\n    // Header pipe\n    cylinder(h=20, d=4);\n    \n    // Muffler\n    translate([15,0,0])\n    rotate([0,90,0])\n    cylinder(h=15, d=6);\n}\n\n// Fuel tank\nmodule fuel_tank() {\n    // Main tank\n    cube([15,12,8], center=true);\n    \n    // Cap\n    translate([0,0,5])\n    cylinder(h=2, d=4);\n}\n\n// Render the complete pitbike\npitbike();",
    "renders": true
  },
  {
    "vehicle": "pocketbike",
    "openscad_code": "// Pocketbike - Realistic Style, Medium Complexity\n// Approx 75mm long, 3D printable, no supports needed\n\n$fn = 32;\n\n// Main module\nmodule pocketbike() {\n    color(\"lightgray\")\n    union() {\n        frame();\n        engine();\n        wheels();\n        seat();\n        handlebars();\n        exhaust();\n    }\n}\n\n// Frame backbone\nmodule frame() {\n    translate([0, 0, 10])\n    difference() {\n        // Main tube\n        rotate([0, 90, 0])\n        cylinder(h = 60, d1 = 8, d2 = 8);\n        \n        // Cutouts for weight reduction\n        for(i = [0:2]) {\n            translate([0, 0, -25 + i*20])\n            rotate([0, 90, 0])\n            cylinder(h = 12, d = 5);\n        }\n    }\n    \n    // Lower frame rails\n    translate([-20, 0, 5])\n    rotate([0, 0, 15])\n    cube([40, 5, 5]);\n    \n    translate([-20, 0, 5])\n    rotate([0, 0, -15])\n    cube([40, 5, 5]);\n}\n\n// Engine block\nmodule engine() {\n    translate([-15, -10, 8])\n    difference() {\n        // Main block\n        cube([20, 15, 12]);\n        \n        // Cooling fins\n        for(i = [0:3]) {\n            translate([2 + i*4, 0, 13])\n            cube([3, 15, 2]);\n            translate([2 + i*4, 0, -3])\n            cube([3, 15, 2]);\n        }\n    }\n    \n    // Cylinder head\n    translate([-10, -10, 22])\n    cube([10, 15, 8]);\n}\n\n// Wheels\nmodule wheels() {\n    // Rear wheel\n    translate([20, 0, 10])\n    rotate([90, 0, 0])\n    union() {\n        difference() {\n            cylinder(h = 8, d = 25);\n            cylinder(h = 9, d = 10);\n        }\n        // Tire tread pattern\n        for(a = [0:30:330]) {\n            rotate([0, 0, a])\n            translate([12.5, 0, 0])\n            cube([3, 2, 8]);\n        }\n    }\n    \n    // Front wheel\n    translate([-20, 0, 10])\n    rotate([90, 0, 0])\n    union() {\n        difference() {\n            cylinder(h = 8, d = 25);\n            cylinder(h = 9, d = 10);\n        }\n        for(a = [0:30:330]) {\n            rotate([0, 0, a])\n            translate([12.5, 0, 0])\n            cube([3, 2, 8]);\n        }\n    }\n}\n\n// Seat\nmodule seat() {\n    translate([-5, 0, 18])\n    hull() {\n        translate([0, 0, 0])\n        sphere(d = 12);\n        translate([15, 0, 0])\n        sphere(d = 12);\n        translate([7.5, 0, 5])\n        sphere(d = 10);\n    }\n}\n\n// Handlebars\nmodule handlebars() {\n    translate([-25, 0, 22])\n    union() {\n        // Stem\n        cylinder(h = 15, d = 5);\n        \n        // Crossbar\n        translate([0, 0, 15])\n        rotate([90, 0, 0])\n        cylinder(h = 20, d = 3);\n        \n        // Grips\n        translate([0, 10, 15])\n        rotate([90, 0, 0])\n        cylinder(h = 5, d = 4);\n        translate([0, -10, 15])\n        rotate([90, 0, 0])\n        cylinder(h = 5, d = 4);\n    }\n}\n\n// Exhaust pipe\nmodule exhaust() {\n    translate([25, 0, 8])\n    rotate([0, 0, 15])\n    union() {\n        cylinder(h = 20, d = 4);\n        translate([20, 0, 0])\n        sphere(d = 5);\n    }\n}\n\n// Render the pocketbike\npocketbike();",
    "renders": true
  },
  {
    "vehicle": "grom",
    "openscad_code": "// Realistic 3D printable grom (rubber cable grommet)\n// Approx 55 mm diameter, 15 mm thick\n// No overhangs >45°, 1.2 mm walls\n\n$fn = 36;\n\n// Main body\nmodule grommet() {\n    difference() {\n        // Outer shape – toroidal ring\n        rotate_extrude(angle = 360, convexity = 4)\n            translate([25, 0, 0])\n                circle(r = 3.5);\n\n        // Central hole 8 mm\n        translate([0, 0, -1])\n            cylinder(h = 17, d = 8, center = true);\n\n        // Top chamfer\n        translate([0, 0, 7])\n            cylinder(h = 2, d1 = 8, d2 = 12, center = true);\n\n        // Bottom chamfer\n        translate([0, 0, -7])\n            cylinder(h = 2, d1 = 12, d2 = 8, center = true);\n\n        // Cable slit (vertical gap for insertion)\n        translate([-30, 0, 0])\n            cube([60, 2.5, 17], center = true);\n    }\n\n    // Reinforcement ribs\n    for (a = [0:60:359]) {\n        rotate([0, 0, a])\n            translate([25, 0, 0])\n                rotate([90, 0, 0])\n                    cylinder(h = 5, d = 2.4, center = true);\n    }\n\n    // Grip ridges on outer surface\n    for (a = [0:15:359]) {\n        rotate([0, 0, a])\n            translate([28.5, 0, 0])\n                rotate([90, 0, 0])\n                    cube([2, 0.6, 7], center = true);\n    }\n\n    // Inner collar for better cable retention\n    difference() {\n        translate([0, 0, 0])\n            cylinder(h = 4, d = 10, center = true);\n\n        translate([0, 0, 0])\n            cylinder(h = 4.2, d = 7.5, center = true);\n    }\n}\n\ngrommet();",
    "renders": true
  },
  {
    "vehicle": "monkey",
    "openscad_code": "// Realistic monkey - medium complexity\n// Designed for 3D printing with no overhangs\n\n$fn = 32;\n\nmodule head() {\n    // Main head sphere\n    translate([0, 0, 45]) \n    sphere(15);\n    \n    // Muzzle\n    translate([0, -8, 42])\n    scale([1.2, 0.8, 0.8])\n    sphere(8);\n    \n    // Nose\n    difference() {\n        translate([0, -14, 42])\n        sphere(3);\n        translate([0, -16, 42])\n        sphere(2);\n    }\n    \n    // Eyes\n    for(x = [-7, 7]) {\n        translate([x, -3, 48])\n        sphere(2.5);\n    }\n    \n    // Ears\n    for(x = [-12, 12]) {\n        translate([x, 0, 48])\n        rotate([0, 0, 90])\n        scale([1, 1.5, 0.5])\n        cylinder(5, 5, 3);\n    }\n}\n\nmodule torso() {\n    // Chest\n    translate([0, 0, 25])\n    scale([1.2, 0.8, 1.5])\n    sphere(12);\n    \n    // Belly\n    translate([0, 0, 15])\n    scale([1, 0.7, 1])\n    sphere(10);\n}\n\nmodule arm(side) {\n    // Upper arm\n    translate([side * 12, 0, 30])\n    rotate([0, 0, side * 15])\n    cylinder(15, 4, 3);\n    \n    // Lower arm\n    translate([side * 20, 0, 15])\n    rotate([0, 0, side * 45])\n    cylinder(12, 3, 2.5);\n    \n    // Hand\n    translate([side * 28, 0, 5])\n    sphere(3.5);\n}\n\nmodule leg(side) {\n    // Upper leg\n    translate([side * 6, 0, 10])\n    rotate([0, 0, side * -10])\n    cylinder(15, 5, 4);\n    \n    // Lower leg\n    translate([side * 8, 0, -5])\n    rotate([0, 0, side * -5])\n    cylinder(12, 4, 3);\n    \n    // Foot\n    translate([side * 9, 3, -15])\n    scale([1.5, 3, 0.8])\n    sphere(4);\n}\n\nmodule tail() {\n    // Tail base\n    translate([0, 8, 12])\n    rotate([0, 90, 0])\n    cylinder(20, 5, 3);\n    \n    // Tail curve\n    translate([-8, 20, 12])\n    rotate([0, 90, -30])\n    cylinder(15, 3, 2);\n    \n    // Tail tip\n    translate([-18, 25, 12])\n    sphere(2);\n}\n\n// Assembly\nunion() {\n    head();\n    torso();\n    \n    // Arms\n    arm(1);\n    arm(-1);\n    \n    // Legs\n    leg(1);\n    leg(-1);\n    \n    // Tail\n    tail();\n}\n\n// Base platform for stability\ntranslate([0, 0, -17])\ncylinder(3, 25, 25);",
    "renders": true
  },
  {
    "vehicle": "zuma",
    "openscad_code": "// Realistic Zuma (medium complexity, 3D-printable)\n// Approx. 65 mm tall, 50 mm wide\n\n// Wall thickness\nwall = 2;\n\n// Main body module\nmodule zuma_body() {\n    // Central sphere (head)\n    sphere(d = 46, $fn = 64);\n    \n    // Snout protrusion\n    translate([0, 18, 0])\n        rotate([0, 0, 0])\n        scale([1.2, 1.8, 0.9])\n        sphere(d = 22, $fn = 32);\n}\n\n// Eye socket\nmodule eye_socket() {\n    difference() {\n        sphere(d = 12, $fn = 24);\n        translate([0, 0, 6])\n            sphere(d = 12.2, $fn = 24);\n    }\n}\n\n// Eye\nmodule eye() {\n    difference() {\n        sphere(d = 8, $fn = 16);\n        translate([0, 0, 4])\n            sphere(d = 8.2, $fn = 16);\n    }\n}\n\n// Nostrils\nmodule nostril() {\n    cylinder(h = 6, r = 2.5, $fn = 12);\n}\n\n// Ear (left)\nmodule ear() {\n    difference() {\n        // Outer ear\n        translate([0, 0, -10])\n            rotate([0, -30, 0])\n            scale([1, 1.2, 0.6])\n            cylinder(h = 15, r1 = 8, r2 = 4, $fn = 24);\n        \n        // Inner ear hole\n        translate([0, 0, -9])\n            rotate([0, -30, 0])\n            scale([1, 1.2, 0.6])\n            cylinder(h = 16, r1 = 6, r2 = 2, $fn = 24);\n    }\n}\n\n// Tail segment\nmodule tail_segment(r) {\n    rotate([0, 90, 0])\n        cylinder(h = 10, r = r, $fn = 24);\n}\n\n// Assemble Zuma\ndifference() {\n    // Main solid body\n    union() {\n        zuma_body();\n        \n        // Left ear\n        translate([-20, 0, 10])\n            rotate([0, 0, -20])\n            ear();\n        \n        // Right ear\n        translate([20, 0, 10])\n            rotate([0, 0, 20])\n            mirror([1, 0, 0])\n            ear();\n        \n        // Tail segments\n        for (i = [0:4]) {\n            translate([0, -23 - i * 8, 0])\n                tail_segment(6 - i * 1);\n        }\n    }\n    \n    // Eye sockets\n    translate([-12, 8, 8])\n        eye_socket();\n    translate([12, 8, 8])\n        eye_socket();\n    \n    // Nostrils\n    translate([-6, 24, -2])\n        nostril();\n    translate([6, 24, -2])\n        nostril();\n    \n    // Mouth line\n    translate([0, 22, -8])\n        rotate([90, 0, 0])\n        cylinder(h = 20, r = 1, $fn = 8);\n}\n\n// Add eyes inside sockets\ntranslate([-12, 8, 8])\n    eye();\ntranslate([12, 8, 8])\n    eye();",
    "renders": true
  },
  {
    "vehicle": "metropolitan",
    "openscad_code": "// Metropolitan City Block - Realistic Medium Complexity\n// Designed for 3D printing - no overhangs, 0.8mm walls\n\n$fn = 32;\n\n// Overall dimensions\nblock_width = 80;\nblock_depth = 60;\nblock_height = 40;\n\n// Base street level\nmodule base_streets() {\n    // Street surface\n    translate([0, 0, -1])\n        cube([block_width + 20, block_depth + 20, 2], center = true);\n    \n    // Sidewalks around central block\n    color(\"gray\")\n    for (x = [-1, 1]) {\n        translate([x * (block_width/2 + 5), 0, 0])\n            cube([10, block_depth + 10, 1]);\n    }\n    for (y = [-1, 1]) {\n        translate([0, y * (block_depth/2 + 5), 0])\n            cube([block_width + 10, 10, 1]);\n    }\n}\n\n// Office tower with windows\nmodule office_tower(w, d, h) {\n    // Main structure\n    difference() {\n        cube([w, d, h], center = true);\n        // Hollow interior\n        translate([0, 0, 2])\n            cube([w - 4, d - 4, h - 2], center = true);\n    }\n    \n    // Windows - grid pattern\n    window_width = 3;\n    window_height = 4;\n    window_gap = 6;\n    \n    for (x = [-w/2 + 4 : window_gap : w/2 - 4]) {\n        for (y = [-d/2 + 4 : window_gap : d/2 - 4]) {\n            for (z = [5 : window_height : h - 5]) {\n                translate([x, y, z])\n                    cube([window_width, window_width, window_height + 1]);\n            }\n        }\n    }\n    \n    // Roof details\n    translate([0, 0, h/2 + 1])\n        cube([w + 2, d + 2, 2], center = true);\n    \n    // Antenna\n    translate([0, 0, h/2 + 3])\n        cylinder(h = 8, d = 2);\n}\n\n// Residential building with pitched roof\nmodule apartment_building(w, d, h) {\n    // Main structure\n    difference() {\n        cube([w, d, h], center = true);\n        // Door\n        translate([0, -d/2 - 0.1, -h/2 + 2])\n            cube([6, 1, 10]);\n    }\n    \n    // Pitched roof\n    translate([0, 0, h/2 + 5])\n        rotate([90, 0, 0])\n            cylinder(h = w + 2, d1 = d + 2, d2 = 0);\n    \n    // Windows\n    for (x = [-w/2 + 5 : 8 : w/2 - 5]) {\n        for (z = [-h/2 + 5 : 6 : h/2 - 5]) {\n            translate([x, d/2 + 0.1, z])\n                cube([4, 1, 4]);\n        }\n    }\n}\n\n// Park with trees\nmodule central_park() {\n    // Grass area\n    color(\"green\")\n    translate([0, 0, 0.5])\n        cube([30, 20, 1], center = true);\n    \n    // Trees\n    for (i = [-10 : 10 : 10]) {\n        for (j = [-5 : 10 : 5]) {\n            translate([i, j, 1.5]) {\n                // Trunk\n                color(\"brown\")\n                cylinder(h = 6, d = 2);\n                // Foliage\n                color(\"darkgreen\")\n                translate([0, 0, 5])\n                    sphere(4);\n            }\n        }\n    }\n}\n\n// Street lights\nmodule street_lights() {\n    for (pos = [[-35, 0], [35, 0], [0, -25], [0, 25]]) {\n        translate([pos[0], pos[1], 0]) {\n            // Pole\n            cylinder(h = 12, d = 1.5);\n            // Light fixture\n            translate([0, 0, 12])\n                rotate([90, 0, 0])\n                    cylinder(h = 4, d1 = 3, d2 = 2);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    base_streets();\n    \n    // Central park\n    central_park();\n    \n    // Office towers\n    translate([-20, 15, 5])\n        office_tower(15, 15, 35);\n    translate([20, 15, 5])\n        office_tower(15, 15, 30);\n    \n    // Apartment buildings\n    translate([-20, -15, 5])\n        apartment_building(15, 20, 20);\n    translate([20, -15, 5])\n        apartment_building(15, 20, 25);\n    \n    // Street lights\n    street_lights();\n}",
    "renders": true
  },
  {
    "vehicle": "ruckus",
    "openscad_code": "// Ruckus (wireless access point) - realistic medium complexity\n// Dimensions: ~85mm x ~55mm x ~35mm (fits most FDM printers)\n\n$fn = 36; // Smooth curves\n\n// Main body shell\nmodule body() {\n    difference() {\n        // Outer rounded shell\n        minkowski() {\n            cube([80, 50, 25], center=true);\n            sphere(4);\n        }\n        \n        // Hollow interior\n        minkowski() {\n            cube([76, 46, 22], center=true);\n            sphere(3);\n        }\n        \n        // Bottom opening for cables\n        translate([0, 0, -12.5])\n            cube([20, 20, 5], center=true);\n    }\n}\n\n// Front LED indicators\nmodule leds() {\n    translate([-35, 20, 12]) {\n        for(i = [0:2]) {\n            translate([i*10, 0, 0])\n                color(\"blue\")\n                cylinder(h=1, d=3, center=false);\n        }\n    }\n}\n\n// Top ventilation slots\nmodule vents() {\n    translate([0, 0, 12.5]) {\n        for(i = [-3:3]) {\n            translate([i*10, 0, 0])\n                cube([7, 45, 1], center=true);\n        }\n    }\n}\n\n// Rear LAN ports\nmodule ports() {\n    translate([40, 0, 0]) {\n        // Main port block\n        cube([6, 30, 15], center=true);\n        \n        // Individual ports\n        for(i = [-1:1]) {\n            translate([3.5, i*9, 0])\n                cylinder(h=7, d=8, center=true);\n        }\n        \n        // Power port\n        translate([3.5, -20, 0])\n            cylinder(h=7, d=12, center=true);\n    }\n}\n\n// Side antennae\nmodule antennas() {\n    // Left antenna\n    translate([-40, -25, 0]) {\n        rotate([0, 0, 45])\n            cube([3, 3, 40], center=true);\n    }\n    \n    // Right antenna\n    translate([-40, 25, 0]) {\n        rotate([0, 0, -45])\n            cube([3, 3, 40], center=true);\n    }\n}\n\n// Mounting bracket\nmodule bracket() {\n    translate([0, 0, -15]) {\n        // Base plate\n        cube([60, 8, 2], center=true);\n        \n        // Screw holes\n        for(x = [-20:20:40]) {\n            translate([x, 0, -1])\n                cylinder(h=4, d=4, center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    leds();\n    difference() {\n        body();\n        vents();\n    }\n    ports();\n    antennas();\n    bracket();\n}",
    "renders": true
  },
  {
    "vehicle": "pcx",
    "openscad_code": "// PCX (Paintbrush Image) file model - Realistic style, medium complexity\n// Dimensions: 60 x 50 x 8 mm\n\n// Main module\nmodule pcx_file() {\n    // Base card body\n    difference() {\n        // Main card shape\n        cube([60, 50, 2], center=true);\n        \n        // Rounded corners - subtract cylinders from corners\n        for (x = [-28, 28])\n            for (y = [-23, 23])\n                translate([x, y, 0])\n                    cylinder(h=3, r=3, center=true);\n    }\n    \n    // Top label area\n    difference() {\n        translate([0, 15, 1.5])\n            cube([56, 18, 1], center=true);\n            \n        // Rounded top corners of label\n        for (x = [-26, 26])\n            translate([x, 24, 1.5])\n                cylinder(h=2, r=2, center=true);\n    }\n    \n    // Bottom read area\n    difference() {\n        translate([0, -15, 1.5])\n            cube([56, 18, 1], center=true);\n            \n        // Rounded bottom corners\n        for (x = [-26, 26])\n            translate([x, -24, 1.5])\n                cylinder(h=2, r=2, center=true);\n    }\n    \n    // Magnetic stripe\n    translate([0, -20, 1.5])\n        cube([56, 8, 0.5], center=true);\n    \n    // Write protect notch\n    difference() {\n        translate([25, 20, 0])\n            cube([6, 4, 2]);\n    }\n    \n    // Index hole\n    translate([-25, 20, 0])\n        cylinder(h=2, r=2, $fn=16);\n    \n    // Label text grooves (simulated)\n    for (i = [0:3]) {\n        translate([-20 + i*12, 15, 2])\n            cube([8, 0.5, 0.2], center=true);\n    }\n    \n    // PCX logo area\n    difference() {\n        translate([0, 0, 1.5])\n            cube([20, 10, 0.5], center=true);\n            \n        // Cutout for \"PCX\" text\n        translate([-7, 0, 2])\n            cube([4, 6, 1], center=true);\n        translate([0, 0, 2])\n            cube([4, 6, 1], center=true);\n        translate([7, 0, 2])\n            cube([4, 6, 1], center=true);\n    }\n    \n    // Reinforcement rings\n    for (x = [-20, 0, 20])\n        for (y = [-10, 10])\n            translate([x, y, 1])\n                cylinder(h=0.5, r=1.5, $fn=16);\n}\n\n// Render the model\npcx_file();",
    "renders": true
  },
  {
    "vehicle": "sh150i",
    "openscad_code": "// Honda SH150i - Medium complexity model\n// Scale 1:40 (approx 85mm long)\n\n$fn = 32;\n\n// Main assembly\nmodule sh150i() {\n    // Rear wheel\n    rear_wheel();\n    \n    // Front wheel\n    translate([65, 0, 0])\n        front_wheel();\n    \n    // Main body\n    body();\n    \n    // Handlebars\n    translate([60, 0, 30])\n        handlebars();\n    \n    // Seat\n    translate([25, 0, 18])\n        seat();\n    \n    // Mirrors\n    mirrors();\n    \n    // Exhaust\n    exhaust();\n    \n    // Headlight\n    translate([68, 0, 12])\n        headlight();\n}\n\n// Wheels\nmodule rear_wheel() {\n    // Tire\n    color(\"black\")\n    rotate([90, 0, 0])\n        cylinder(h=8, r=18, center=true);\n    \n    // Rim\n    color(\"silver\")\n    rotate([90, 0, 0])\n        cylinder(h=9, r=15, center=true);\n    \n    // Spokes\n    color(\"gray\")\n    for(i=[0:45:315]) {\n        rotate([90, 0, i])\n            cylinder(h=9, r1=8, r2=10, center=true);\n    }\n}\n\nmodule front_wheel() {\n    rear_wheel();\n}\n\n// Main body shell\nmodule body() {\n    // Lower section\n    color(\"darkblue\")\n    union() {\n        // Engine cover\n        translate([40, 0, 0])\n            cube([20, 20, 25], center=true);\n        \n        // Floor\n        translate([50, 0, -5])\n            cube([40, 30, 5], center=true);\n        \n        // Side panels\n        translate([25, 12, 10])\n            cube([50, 5, 20], center=true);\n        mirror([0, 1, 0])\n            translate([25, 12, 10])\n                cube([50, 5, 20], center=true);\n    }\n    \n    // Upper fairing\n    color(\"darkblue\")\n    translate([55, 0, 15])\n        cube([30, 25, 25], center=true);\n    \n    // Front fender\n    color(\"black\")\n    translate([65, 0, 5])\n        rotate([0, 30, 0])\n            cube([10, 30, 5], center=true);\n}\n\n// Seat\nmodule seat() {\n    color(\"black\")\n    difference() {\n        // Main seat\n        translate([0, 0, 5])\n            cube([40, 22, 10], center=true);\n        \n        // Rounded top\n        translate([0, 0, 12])\n            scale([1, 0.8, 0.3])\n                sphere(r=15);\n    }\n}\n\n// Handlebars\nmodule handlebars() {\n    // Stem\n    color(\"silver\")\n    translate([0, 0, -5])\n        cylinder(h=10, r=3);\n    \n    // Bars\n    translate([0, 0, 5])\n        rotate([0, 90, 0])\n            cylinder(h=20, r=2);\n}\n\n// Mirrors\nmodule mirrors() {\n    // Left mirror\n    translate([60, -12, 35])\n        mirror_assembly();\n    \n    // Right mirror\n    translate([60, 12, 35])\n        mirror_assembly();\n}\n\nmodule mirror_assembly() {\n    // Stem\n    color(\"black\")\n    rotate([45, 0, 0])\n        cylinder(h=8, r=1);\n    \n    // Mirror\n    color(\"silver\")\n    translate([0, 4, 4])\n        cube([6, 8, 2], center=true);\n}\n\n// Exhaust\nmodule exhaust() {\n    color(\"gray\")\n    union() {\n        // Pipe\n        translate([30, -10, 5])\n            rotate([0, 0, 20])\n                cylinder(h=20, r=2);\n        \n        // Muffler\n        translate([20, -12, 5])\n            cylinder(h=15, r=4);\n    }\n}\n\n// Headlight\nmodule headlight() {\n    // Housing\n    color(\"black\")\n    cube([6, 15, 15], center=true);\n    \n    // Lens\n    color(\"white\")\n    translate([3, 0, 0])\n        cube([1, 12, 12], center=true);\n}\n\n// Render the scooter\nsh150i();",
    "renders": true
  },
  {
    "vehicle": "helix",
    "openscad_code": "// Realistic Helix Model - Medium Complexity\n// 3D printable double helix with realistic proportions\n\n// Parameters\nhelix_radius = 12;          // Radius from center to helix tube center\ntube_radius = 4;            // Radius of the helix tube\nturns = 3;                  // Number of complete turns\nheight_per_turn = 25;       // Vertical distance per turn\nsegments_per_turn = 32;     // Segments for smooth curves\nwall_thickness = 1.5;       // Wall thickness for 3D printing\n\n// Calculate derived values\ntotal_height = turns * height_per_turn;\nsegments = turns * segments_per_turn;\nangle_step = 360 / segments_per_turn;\nheight_step = height_per_turn / segments_per_turn;\n\n// Module to create a single helix strand\nmodule helix_strand(phase) {\n    union() {\n        // Generate the main tube body\n        for (i = [0 : segments-1]) {\n            angle = i * angle_step + phase;\n            height = i * height_step;\n            \n            // Position each segment\n            translate([\n                helix_radius * cos(angle),\n                helix_radius * sin(angle),\n                height\n            ]) {\n                // Create hollow tube segment\n                difference() {\n                    // Outer cylinder\n                    cylinder(\n                        h = height_step + 0.1,  // Slight overlap\n                        r = tube_radius,\n                        $fn = 16\n                    );\n                    \n                    // Inner hollow space\n                    translate([0, 0, -0.05])\n                    cylinder(\n                        h = height_step + 0.2,\n                        r = tube_radius - wall_thickness,\n                        $fn = 16\n                    );\n                }\n            }\n        }\n        \n        // Add end caps\n        // Bottom cap\n        translate([\n            helix_radius * cos(phase),\n            helix_radius * sin(phase),\n            -wall_thickness/2\n        ]) {\n            difference() {\n                cylinder(h = wall_thickness, r = tube_radius, $fn = 16);\n                cylinder(h = wall_thickness + 0.1, r = tube_radius - wall_thickness, $fn = 16);\n            }\n        }\n        \n        // Top cap\n        translate([\n            helix_radius * cos(segments * angle_step + phase),\n            helix_radius * sin(segments * angle_step + phase),\n            total_height - wall_thickness/2\n        ]) {\n            difference() {\n                cylinder(h = wall_thickness, r = tube_radius, $fn = 16);\n                cylinder(h = wall_thickness + 0.1, r = tube_radius - wall_thickness, $fn = 16);\n            }\n        }\n    }\n}\n\n// Module for support structure\nmodule support_structure() {\n    // Central support rod\n    difference() {\n        cylinder(h = total_height + wall_thickness, r = helix_radius - tube_radius - 2, $fn = 32);\n        cylinder(h = total_height + wall_thickness + 0.2, r = helix_radius - tube_radius - 2 - wall_thickness, $fn = 32);\n    }\n    \n    // Base plate for stability\n    difference() {\n        translate([0, 0, -wall_thickness])\n        cylinder(h = wall_thickness * 2, r = helix_radius + tube_radius + 5, $fn = 64);\n        \n        translate([0, 0, -wall_thickness - 0.1])\n        cylinder(h = wall_thickness * 2.2, r = helix_radius - tube_radius - 2 - wall_thickness, $fn = 64);\n    }\n}\n\n// Main assembly\nunion() {\n    // First helix strand (0 degrees phase)\n    helix_strand(0);\n    \n    // Second helix strand (180 degrees out of phase)\n    helix_strand(180);\n    \n    // Support structure\n    support_structure();\n}\n\n// Add small connecting bridges every half turn for printability\nfor (turn = [0.5 : 1 : turns]) {\n    height = turn * height_per_turn;\n    bridge_width = tube_radius * 0.8;\n    \n    translate([0, 0, height - height_step/2]) {\n        difference() {\n            // Bridge between strands\n            cube([\n                helix_radius * 2 + tube_radius * 2,\n                bridge_width,\n                wall_thickness\n            ], center = true);\n            \n            // Hollow out bridge\n            cube([\n                helix_radius * 2 + tube_radius * 2 - wall_thickness * 2,\n                bridge_width - wall_thickness * 2,\n                wall_thickness + 0.1\n            ], center = true);\n        }\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "reflex",
    "openscad_code": "// Realistic Reflex Sight (Medium Complexity)\n// 3D printable reflex sight with lens, LED, and housing\n\n$fn = 64;  // Smooth curves for printing\n\n// Main dimensions\nbase_width = 45;\nbase_length = 60;\nbase_height = 8;\ntube_diameter = 30;\ntube_length = 55;\nlens_diameter = 28;\nlens_thickness = 3;\nled_size = 5;\nmount_width = 20;\nmount_length = 25;\nmount_height = 12;\n\nmodule base_plate() {\n    difference() {\n        // Main base\n        cube([base_length, base_width, base_height], center=true);\n        \n        // Picatinny rail slots (20mm standard)\n        for(i = [-1:1]) {\n            translate([i * 10, 0, base_height/2 - 1])\n                cube([8, 22, 2], center=true);\n        }\n    }\n}\n\nmodule reflex_tube() {\n    difference() {\n        // Main tube housing\n        rotate([0, 90, 0])\n            cylinder(h=tube_length, d=tube_diameter, center=true);\n        \n        // Front lens opening\n        rotate([0, 90, 0])\n            translate([tube_length/2 - lens_thickness, 0, 0])\n                cylinder(h=lens_thickness+1, d=lens_diameter, center=true);\n        \n        // Rear lens opening\n        rotate([0, 90, 0])\n            translate([-tube_length/2 + lens_thickness, 0, 0])\n                cylinder(h=lens_thickness+1, d=lens_diameter, center=true);\n        \n        // LED cavity\n        translate([0, tube_diameter/2 - 3, -tube_length/4])\n            rotate([45, 0, 0])\n                cube([led_size+2, led_size+2, led_size+2], center=true);\n    }\n}\n\nmodule lenses() {\n    // Front lens (angled)\n    translate([tube_length/2 - lens_thickness/2, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h=lens_thickness, d=lens_diameter, center=true);\n    \n    // Rear lens (angled)\n    translate([-tube_length/2 + lens_thickness/2, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h=lens_thickness, d=lens_diameter, center=true);\n}\n\nmodule led_assembly() {\n    // LED holder\n    translate([0, tube_diameter/2 - 3, -tube_length/4])\n        rotate([45, 0, 0])\n            cube([led_size, led_size, led_size], center=true);\n    \n    // LED\n    color(\"red\")\n    translate([0, tube_diameter/2 - 3, -tube_length/4])\n        rotate([45, 0, 0])\n            sphere(d=led_size/2, center=true);\n}\n\nmodule windage_elevation_knobs() {\n    // Windage knob (right side)\n    translate([tube_length/2, tube_diameter/2 + 5, 0])\n        rotate([90, 0, 0])\n            cylinder(h=8, d=12, center=true);\n    \n    // Elevation knob (top)\n    translate([0, 0, tube_diameter/2 + 5])\n        rotate([0, 0, 0])\n            cylinder(h=8, d=12, center=true);\n    \n    // Knurling for grip\n    for(i = [0:11]) {\n        rotate([0, 0, i * 30])\n            translate([tube_length/2 + 4, tube_diameter/2 + 5, 0])\n                cube([0.5, 8, 1], center=true);\n    }\n}\n\nmodule battery_compartment() {\n    // Battery cover\n    translate([-tube_length/2 - 8, 0, -tube_diameter/4])\n        rotate([0, 90, 0])\n            cylinder(h=15, d=10, center=true);\n}\n\n// Main assembly\ntranslate([0, 0, base_height/2])\nunion() {\n    base_plate();\n    \n    translate([0, 0, base_height/2 + tube_diameter/2])\n    union() {\n        reflex_tube();\n        lenses();\n        led_assembly();\n        windage_elevation_knobs();\n        battery_compartment();\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "silverwing",
    "openscad_code": "// Silverwing in realistic style with medium complexity\n// 3D printable model of a silverwing aircraft\n\n$fn = 50;  // Smooth curves for printing\n\nmodule fuselage() {\n    // Main body cylinder\n    difference() {\n        union() {\n            // Main fuselage body\n            hull() {\n                translate([0, 0, 5]) sphere(8);\n                translate([0, 0, -5]) sphere(6);\n            }\n            \n            // Nose cone\n            translate([0, -12, 0]) rotate([90, 0, 0]) \n                cylinder(h=15, r1=6, r2=0);\n            \n            // Tail section\n            translate([0, 12, 0]) rotate([90, 0, 0]) \n                cylinder(h=10, r1=6, r2=3);\n        }\n        \n        // Cockpit cutout\n        translate([0, -5, 5]) rotate([0, 20, 0])\n            cube([12, 15, 8], center=true);\n    }\n}\n\nmodule wing() {\n    // Main wing with airfoil shape\n    difference() {\n        hull() {\n            // Leading edge\n            translate([-20, 0, 0]) sphere(2);\n            translate([20, 0, 0]) sphere(2);\n            // Trailing edge\n            translate([-20, 0, -1]) sphere(1);\n            translate([20, 0, -1]) sphere(1);\n        }\n        \n        // Wing tip cutouts for rounded edges\n        translate([-20, 0, 0]) sphere(1.5);\n        translate([20, 0, 0]) sphere(1.5);\n    }\n}\n\nmodule horizontal_stabilizer() {\n    // Tail wing\n    hull() {\n        translate([-8, 0, 0]) sphere(1.5);\n        translate([8, 0, 0]) sphere(1.5);\n        translate([-8, 0, -1]) sphere(1);\n        translate([8, 0, -1]) sphere(1);\n    }\n}\n\nmodule vertical_stabilizer() {\n    // Vertical tail\n    hull() {\n        translate([0, 0, 0]) sphere(1.5);\n        translate([0, 0, 8]) sphere(1);\n        translate([0, 0.5, 0]) sphere(1);\n        translate([0, 0.5, 8]) sphere(0.5);\n    }\n}\n\nmodule propeller() {\n    // Three-blade propeller\n    rotate([0, 90, 0]) {\n        for(i = [0:120:359]) {\n            rotate([0, 0, i]) {\n                hull() {\n                    translate([0, 0, 0]) sphere(0.5);\n                    translate([10, 0, 0]) sphere(1);\n                }\n            }\n        }\n    }\n}\n\nmodule landing_gear() {\n    // Main gear struts\n    for(side = [-1, 1]) {\n        translate([side * 15, 5, -6]) {\n            cylinder(h=8, r=1);\n            sphere(1.5);\n        }\n    }\n    \n    // Nose gear\n    translate([0, -8, -6]) {\n        cylinder(h=8, r=1);\n        sphere(1.5);\n    }\n}\n\nmodule engine() {\n    // Engine cowling\n    difference() {\n        translate([0, -18, 0]) \n            cylinder(h=8, r=7);\n        translate([0, -18, 0]) \n            cylinder(h=9, r=5);\n    }\n}\n\n// Assembly\nmodule silverwing() {\n    // Main body\n    fuselage();\n    \n    // Wings\n    translate([0, 0, 0]) {\n        wing();\n        mirror([0, 0, 1]) wing();\n    }\n    \n    // Tail surfaces\n    translate([0, 15, 0]) rotate([20, 0, 0]) horizontal_stabilizer();\n    translate([0, 15, 1]) rotate([0, 90, 0]) vertical_stabilizer();\n    \n    // Engine and propeller\n    engine();\n    translate([0, -22, 0]) propeller();\n    \n    // Landing gear\n    landing_gear();\n    \n    // Wing struts\n    for(side = [-1, 1]) {\n        hull() {\n            translate([side * 15, 0, 0]) sphere(1);\n            translate([side * 15, -10, -3]) sphere(1);\n        }\n    }\n}\n\n// Scale and position for printing\ntranslate([0, 0, 10]) scale(2.5) silverwing();",
    "renders": true
  },
  {
    "vehicle": "burgman",
    "openscad_code": "// Burgman Scooter - Realistic Style, Medium Complexity\n// Designed for 3D printing with proper wall thickness and minimal overhangs\n\n// Overall scale factor\nscale_factor = 1/4;\n\n// Main module\nmodule burgman_scooter() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        // Position all parts relative to ground\n        translate([0, 0, 50]) {\n            union() {\n                // Rear wheel assembly\n                rear_wheel_assembly();\n                \n                // Front wheel assembly\n                translate([320, 0, 0]) {\n                    front_wheel_assembly();\n                }\n                \n                // Main body\n                main_body();\n                \n                // Seat\n                seat();\n                \n                // Handlebars\n                handlebars();\n                \n                // Headlight\n                headlight();\n                \n                // Exhaust\n                exhaust();\n                \n                // Footrest area\n                footrest();\n            }\n        }\n    }\n}\n\n// Rear wheel with tire and rim\nmodule rear_wheel_assembly() {\n    translate([-180, 0, -50]) {\n        // Tire\n        color(\"black\") {\n            difference() {\n                cylinder(h=40, r=140, center=true);\n                cylinder(h=45, r=110, center=true);\n            }\n        }\n        \n        // Rim\n        color(\"silver\") {\n            for(i=[0:45:315]) {\n                rotate([90, 0, i]) {\n                    translate([0, 0, 0]) {\n                        cylinder(h=35, r=100, center=true);\n                    }\n                }\n            }\n        }\n        \n        // Hub\n        color(\"gray\") {\n            cylinder(h=45, r=30, center=true);\n        }\n    }\n}\n\n// Front wheel assembly\nmodule front_wheel_assembly() {\n    // Fork\n    color(\"silver\") {\n        // Left fork\n        translate([-20, -50, 0]) {\n            cylinder(h=200, r=15);\n        }\n        // Right fork\n        translate([20, -50, 0]) {\n            cylinder(h=200, r=15);\n        }\n    }\n    \n    // Wheel\n    translate([0, 0, -50]) {\n        // Tire\n        color(\"black\") {\n            difference() {\n                cylinder(h=35, r=120, center=true);\n                cylinder(h=40, r=90, center=true);\n            }\n        }\n        \n        // Rim\n        color(\"silver\") {\n            cylinder(h=30, r=80, center=true);\n        }\n        \n        // Hub\n        color(\"gray\") {\n            cylinder(h=40, r=25, center=true);\n        }\n    }\n}\n\n// Main body/fairing\nmodule main_body() {\n    color(\"navy\") {\n        // Lower main body\n        difference() {\n            hull() {\n                translate([-180, 0, -50]) {\n                    cube([200, 200, 120], center=true);\n                }\n                translate([120, 0, -50]) {\n                    cube([200, 180, 100], center=true);\n                }\n            }\n            \n            // Wheel cutouts\n            translate([-180, 0, -50]) {\n                rotate([90, 0, 0]) {\n                    cylinder(h=200, r=145, center=true);\n                }\n            }\n            translate([320, 0, -50]) {\n                rotate([90, 0, 0]) {\n                    cylinder(h=200, r=125, center=true);\n                }\n            }\n        }\n        \n        // Upper body\n        hull() {\n            translate([0, 0, 20]) {\n                cube([400, 160, 80], center=true);\n            }\n            translate([100, 0, 50]) {\n                cube([200, 140, 60], center=true);\n            }\n        }\n    }\n}\n\n// Seat\nmodule seat() {\n    color(\"darkgray\") {\n        translate([0, 0, 70]) {\n            hull() {\n                translate([-50, 0, 0]) {\n                    cube([300, 150, 30], center=true);\n                }\n                translate([100, 0, 20]) {\n                    cube([200, 140, 30], center=true);\n                }\n            }\n        }\n        \n        // Backrest\n        translate([150, 0, 90]) {\n            cube([80, 120, 40], center=true);\n        }\n    }\n}\n\n// Handlebars\nmodule handlebars() {\n    color(\"black\") {\n        // Stem\n        translate([320, 0, 50]) {\n            cylinder(h=100, r=15);\n        }\n        \n        // Handlebar\n        translate([320, 0, 150]) {\n            rotate([0, 90, 0]) {\n                cylinder(h=200, r=12);\n            }\n        }\n        \n        // Grips\n        translate([320, 90, 150]) {\n            cylinder(h=30, r=15);\n        }\n        translate([320, -90, 150]) {\n            cylinder(h=30, r=15);\n        }\n    }\n}\n\n// Headlight\nmodule headlight() {\n    color(\"white\") {\n        translate([320, 0, 0]) {\n            sphere(r=40);\n        }\n    }\n    \n    // Headlight housing\n    color(\"silver\") {\n        translate([340, 0, 0]) {\n            cylinder(h=30, r=50);\n        }\n    }\n}\n\n// Exhaust pipe\nmodule exhaust() {\n    color(\"silver\") {\n        // Pipe\n        translate([-100, 100, -70]) {\n            rotate([0, 90, 0]) {\n                cylinder(h=200, r=20);\n            }\n        }\n        \n        // Muffler\n        translate([0, 100, -70]) {\n            cylinder(h=100, r=30);\n        }\n    }\n}\n\n// Footrest area\nmodule footrest() {\n    color(\"darkgray\") {\n        translate([50, 0, -30]) {\n            cube([200, 180, 10], center=true);\n        }\n    }\n}\n\n// Generate the model\nburgman_scooter();",
    "renders": true
  },
  {
    "vehicle": "tmax",
    "openscad_code": "// TMAX DX medium-complexity realistic model\n// Approx. scale 1:18 (about 80 mm long)\n\n$fn = 30;\n\nmodule main_frame() {\n    // Central beam\n    difference() {\n        union() {\n            translate([-5, -10, 0])\n                cube([10, 20, 8]);\n            translate([-20, -8, 8])\n                cube([35, 16, 6]);\n            translate([10, -8, 8])\n                cube([20, 16, 6]);\n        }\n        // Lightening holes\n        for (x = [-10:10:10])\n            translate([x, 0, 4])\n                rotate([0, 90, 0])\n                    cylinder(h = 20, d = 5);\n    }\n}\n\nmodule front_fork() {\n    // Triple clamp\n    translate([25, 0, 25])\n        rotate([0, -90, 0])\n            cylinder(h = 20, d1 = 12, d2 = 8);\n    // Fork tubes\n    for (y = [-8, 8])\n        translate([25, y, 0])\n            cylinder(h = 30, d = 5);\n    // Front fender\n    translate([25, 0, 15])\n        rotate([90, 0, 0])\n            cylinder(h = 25, d1 = 18, d2 = 22);\n}\n\nmodule rear_swingarm() {\n    // Arm body\n    difference() {\n        translate([-25, -12, 5])\n            cube([30, 24, 5]);\n        // Shock mount hole\n        translate([-15, 0, 7.5])\n            rotate([90, 0, 0])\n                cylinder(h = 25, d = 4);\n    }\n    // Pivot axle\n    translate([-25, 0, 7.5])\n        rotate([0, 90, 0])\n            cylinder(h = 24, d = 6);\n}\n\nmodule engine_block() {\n    // Main block\n    translate([0, -20, 8])\n        cube([20, 40, 12]);\n    // Cylinder head\n    translate([5, -22, 20])\n        cube([10, 44, 8]);\n    // Exhaust stub\n    translate([0, -25, 14])\n        rotate([90, 0, 0])\n            cylinder(h = 15, d = 5);\n}\n\nmodule wheels() {\n    // Front wheel\n    translate([25, 0, 0])\n        rotate([0, 0, 90])\n            cylinder(h = 8, d = 22);\n    // Rear wheel\n    translate([-15, 0, 0])\n        rotate([0, 0, 90])\n            cylinder(h = 12, d = 26);\n    // Brake discs\n    for (x = [25, -15])\n        translate([x, 0, 3])\n            rotate([0, 0, 90])\n                cylinder(h = 1, d = 20);\n}\n\nmodule body_panels() {\n    // Front cowl\n    difference() {\n        translate([20, 0, 20])\n            rotate([0, 0, 20])\n                cube([15, 30, 20]);\n        // Headlight hole\n        translate([28, 0, 20])\n            sphere(d = 8);\n    }\n    // Seat\n    translate([5, 0, 20])\n        scale([1.2, 1, 0.5])\n            sphere(d = 25);\n    // Side panels\n    for (y = [-25, 25])\n        translate([-5, y/3, 15])\n            rotate([0, 0, y/10])\n                cube([25, 10, 10]);\n}\n\nmodule handlebars() {\n    translate([20, 0, 35])\n        rotate([0, 30, 0])\n            cylinder(h = 20, d = 3);\n}\n\nunion() {\n    main_frame();\n    front_fork();\n    rear_swingarm();\n    engine_block();\n    wheels();\n    body_panels();\n    handlebars();\n}",
    "renders": true
  },
  {
    "vehicle": "xmax",
    "openscad_code": "// XMas tree ornament – realistic style, medium complexity\n// Overall height ≈ 75 mm.  Wall thickness = 1.2 mm (3×0.4 mm nozzle passes)\n// 3D-printable without supports – every slope ≤45°\n\n$fa = 2;\n$fs = 0.5;\n\nmodule tree() {\n    // Central trunk\n    cylinder(h=20, d=5, center=true);\n\n    // Layered conical sections\n    layer(0, 20, 20, 10);   // bottom\n    layer(15, 18, 16, 9);\n    layer(28, 16, 12, 8);\n    layer(38, 14,  8, 7);\n    layer(46, 12,  4, 6);\n}\n\nmodule layer(z, h, r_base, r_top) {\n    difference() {\n        // Solid cone frustum\n        translate([0,0,z])\n            cylinder(h=h, r1=r_base, r2=r_top, center=false);\n\n        // Hollow it out\n        translate([0,0,z+1.2])\n            cylinder(h=h-2.4, r1=r_base-1.2, r2=r_top-1.2, center=false);\n    }\n}\n\nmodule trunk() {\n    // Simple hollow cylinder for trunk\n    difference() {\n        cylinder(h=8, d=6, center=true);\n        cylinder(h=8.2, d=3.6, center=true);\n    }\n}\n\nmodule star() {\n    // 5-point star on top\n    linear_extrude(height=2, center=true, convexity=10)\n        scale([1,1,1])\n            polygon(\n                points = [\n                    for(i=[0:10])\n                        let(a = i*36)\n                        [cos(a)*(i%2?2.5:5),\n                         sin(a)*(i%2?2.5:5)]\n                ]\n            );\n}\n\nmodule ornament_ball(z) {\n    // Small sphere bauble\n    translate([0,0,z]) sphere(d=3);\n}\n\nmodule garlands() {\n    // Spiral garland around tree\n    for(z=[10:5:50])\n        rotate([0,0,z*15])\n            translate([10-0.2*z,0,z])\n                sphere(d=1.5);\n}\n\n// Assembly\ntranslate([0,0,-30])\nunion() {\n    tree();\n    translate([0,0,-10]) trunk();\n    translate([0,0,50]) star();\n    garlands();\n    // Additional baubles on tips\n    ornament_ball(20);\n    ornament_ball(34);\n    ornament_ball(45);\n    // Hanging loop\n    translate([0,0,55]) rotate([180,0,0])\n        difference() {\n            cylinder(h=5, d=4, center=true);\n            cylinder(h=5.2, d=2, center=true);\n        }\n}",
    "renders": true
  },
  {
    "vehicle": "forza",
    "openscad_code": "// OpenSCAD Forza Logo – medium-realistic version\n// 3D-print-ready, ~70 mm across, 5 mm thick\n// All parts are unioned onto a flat base; no steep overhangs\n\nmodule forza_logo() {\n    // Base disc (build plate)\n    difference() {\n        cylinder(h = 2, d = 70, $fn = 90);\n        translate([0,0,-0.1])      // printing-friendly relief\n            cylinder(h = 2.2, d = 66, $fn = 90);\n    }\n\n    // Main letter “F” body\n    // Vertical stem\n    translate([-15,0,2])\n        cube([10, 30, 5], center = true);\n\n    // Top horizontal bar\n    translate([-10, 10,2])\n        cube([20, 10, 5], center = true);\n\n    // Middle horizontal bar\n    translate([-7.5, 0,2])\n        cube([15, 8, 5], center = true);\n\n    // Angled slash “/”\n    rotate([0,0,25])\n        translate([0,-5,2])\n            cube([5, 35, 5], center = true);\n\n    // Stylized right swoosh\n    hull() {\n        translate([10, -10,2])\n            sphere(d = 5, $fn = 20);\n        translate([25, 10,2])\n            sphere(d = 7, $fn = 20);\n        translate([10, 10,2])\n            sphere(d = 5, $fn = 20);\n    }\n\n    // Reinforcing rib for swoosh\n    rotate([0,0,35])\n        translate([16, -2,4.5])\n            cube([25, 3, 1], center = true);\n\n    // Small vents along top bar\n    for(x = [-15 : 5 : -5]) {\n        translate([x, 10, 4.5])\n            cube([2, 8, 2], center = true);\n    }\n}\n\n// Render\nforza_logo();",
    "renders": true
  },
  {
    "vehicle": "sh300i",
    "openscad_code": "// SH300i Scooter Model (Realistic Style, Medium Complexity)\n\nscale_factor = 0.3;  // Scale down for 3D printing\nwall_thickness = 2;\n\nmodule wheel() {\n    // Tire\n    color(\"black\")\n    difference() {\n        cylinder(h=4*scale_factor, r=8*scale_factor, $fn=32);\n        translate([0,0,-0.1])\n            cylinder(h=4.2*scale_factor, r=6*scale_factor, $fn=32);\n    }\n    \n    // Rim\n    color(\"silver\")\n    translate([0,0,2.1*scale_factor])\n        cylinder(h=1*scale_factor, r=7*scale_factor, $fn=32);\n}\n\nmodule fork() {\n    // Front suspension fork\n    color(\"silver\")\n    union() {\n        translate([-5*scale_factor,0,0])\n            cube([10*scale_factor, 2*scale_factor, 15*scale_factor]);\n        translate([-4*scale_factor,-1*scale_factor,10*scale_factor])\n            cube([8*scale_factor, 4*scale_factor, 5*scale_factor]);\n    }\n}\n\nmodule handlebar() {\n    // Handlebar assembly\n    color(\"silver\")\n    union() {\n        // Handlebar stem\n        translate([0,0,20*scale_factor])\n            cylinder(h=8*scale_factor, r=1.5*scale_factor, $fn=16);\n        \n        // Handlebar grips\n        rotate([0,90,0]) {\n            translate([0,0,-12*scale_factor])\n                cylinder(h=10*scale_factor, r=1*scale_factor, $fn=16);\n            translate([0,0,2*scale_factor])\n                cylinder(h=10*scale_factor, r=1*scale_factor, $fn=16);\n        }\n    }\n}\n\nmodule seat() {\n    // Rider seat\n    color(\"black\")\n    translate([-5*scale_factor,0,23*scale_factor])\n        scale([1, 0.7, 0.3])\n            sphere(r=8*scale_factor, $fn=32);\n}\n\nmodule body() {\n    // Main body\n    color(\"red\")\n    union() {\n        // Front fairing\n        translate([0,0,12*scale_factor])\n            scale([1.2, 0.8, 0.6])\n                sphere(r=10*scale_factor, $fn=32);\n        \n        // Floorboard\n        translate([-15*scale_factor,0,8*scale_factor])\n            cube([30*scale_factor, 12*scale_factor, 2*scale_factor]);\n        \n        // Rear section\n        translate([-25*scale_factor,0,15*scale_factor])\n            scale([1, 0.8, 0.4])\n                sphere(r=12*scale_factor, $fn=32);\n    }\n}\n\nmodule engine() {\n    // Engine block\n    color(\"gray\")\n    translate([-20*scale_factor,-4*scale_factor,8*scale_factor])\n        cube([10*scale_factor, 8*scale_factor, 6*scale_factor]);\n}\n\nmodule exhaust() {\n    // Exhaust pipe\n    color(\"silver\")\n    rotate([0,-10,0])\n        translate([-25*scale_factor,-6*scale_factor,6*scale_factor])\n            cylinder(h=15*scale_factor, r=1.5*scale_factor, $fn=16);\n}\n\nmodule mirrors() {\n    // Rear view mirrors\n    color(\"silver\")\n    for(side = [-1, 1]) {\n        translate([side*5*scale_factor, 8*scale_factor, 25*scale_factor])\n            rotate([45,0,side*10])\n                union() {\n                    cylinder(h=8*scale_factor, r=1*scale_factor, $fn=16);\n                    translate([0,0,8*scale_factor])\n                        sphere(r=2*scale_factor, $fn=16);\n                }\n    }\n}\n\nmodule headlight() {\n    // Headlight assembly\n    color(\"silver\")\n    difference() {\n        translate([10*scale_factor,0,15*scale_factor])\n            sphere(r=4*scale_factor, $fn=32);\n        translate([11*scale_factor,0,15*scale_factor])\n            sphere(r=3*scale_factor, $fn=32);\n    }\n}\n\n// Assemble the complete scooter\nunion() {\n    // Front wheel and fork\n    translate([10*scale_factor,0,0])\n        wheel();\n    translate([10*scale_factor,0,0])\n        fork();\n    \n    // Rear wheel\n    translate([-30*scale_factor,0,0])\n        wheel();\n    \n    // Main components\n    body();\n    seat();\n    handlebar();\n    engine();\n    exhaust();\n    mirrors();\n    headlight();\n}",
    "renders": true
  },
  {
    "vehicle": "vespa",
    "openscad_code": "// Realistic Vespa Scooter - Medium Complexity\n// 3D printable model, 80mm length\n\n$fn = 32;  // Smooth curves\n\nmodule wheel() {\n    // Tire\n    difference() {\n        cylinder(h=8, r=12);\n        cylinder(h=9, r=9);\n    }\n    \n    // Rim\n    translate([0, 0, 8.5]) {\n        cylinder(h=1.5, r=11);\n    }\n    \n    // Spokes\n    for(i=[0:5]) {\n        rotate([0, 0, i*60]) {\n            translate([5, 0, 4]) {\n                cube([10, 2, 8], center=true);\n            }\n        }\n    }\n}\n\nmodule front_fender() {\n    // Main fender body\n    translate([0, 0, 15]) {\n        rotate_extrude(angle=180) {\n            translate([12, 0]) {\n                circle(r=2);\n            }\n        }\n    }\n    \n    // Fender sides\n    translate([0, -12, 15]) {\n        cube([24, 2, 6]);\n    }\n    translate([0, 12, 15]) {\n        cube([24, 2, 6]);\n    }\n}\n\nmodule handlebar() {\n    // Stem\n    translate([0, 0, 25]) {\n        cylinder(h=20, r=2);\n    }\n    \n    // Bar\n    translate([0, 0, 45]) {\n        rotate([90, 0, 0]) {\n            cylinder(h=30, r=1.5);\n        }\n    }\n    \n    // Grips\n    translate([0, 15, 45]) {\n        sphere(r=2);\n    }\n    translate([0, -15, 45]) {\n        sphere(r=2);\n    }\n}\n\nmodule seat() {\n    // Base\n    translate([0, 0, 25]) {\n        cube([25, 12, 3], center=true);\n    }\n    \n    // Cushion\n    translate([0, 0, 27.5]) {\n        scale([1, 1, 0.5]) {\n            sphere(r=[12.5, 6, 3]);\n        }\n    }\n}\n\nmodule body_panel() {\n    // Main side panel\n    translate([0, 0, 15]) {\n        cube([30, 35, 25]);\n    }\n    \n    // Front curve\n    translate([15, 0, 15]) {\n        rotate([0, 90, 0]) {\n            cylinder(h=30, r=15);\n        }\n    }\n    \n    // Cutout for wheel\n    translate([-15, 0, 8]) {\n        rotate([0, 90, 0]) {\n            cylinder(h=35, r=13);\n        }\n    }\n}\n\nmodule headlight() {\n    // Housing\n    translate([17, 0, 22]) {\n        sphere(r=5);\n    }\n    \n    // Lens\n    translate([20, 0, 22]) {\n        sphere(r=4);\n    }\n}\n\nmodule engine() {\n    // Engine block\n    translate([-15, 0, 8]) {\n        cube([10, 12, 8]);\n    }\n    \n    // Exhaust\n    translate([-20, 0, 5]) {\n        rotate([0, 30, 0]) {\n            cylinder(h=15, r=1.5);\n        }\n    }\n}\n\nmodule mirror() {\n    // Mirror stem\n    rotate([0, -30, 0]) {\n        cylinder(h=8, r=0.5);\n    }\n    \n    // Mirror\n    translate([6, 0, 0]) {\n        rotate([0, -30, 0]) {\n            scale([1, 1.5, 0.5]) {\n                sphere(r=3);\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Front wheel\n    translate([15, 0, 0]) {\n        wheel();\n    }\n    \n    // Rear wheel\n    translate([-25, 0, 0]) {\n        wheel();\n    }\n    \n    // Floorboard\n    translate([-5, 0, 8]) {\n        cube([40, 25, 1.5]);\n    }\n    \n    // Body\n    translate([-5, 0, 9]) {\n        body_panel();\n    }\n    \n    // Front assembly\n    translate([15, 0, 0]) {\n        union() {\n            front_fender();\n            handlebar();\n        }\n    }\n    \n    // Headlight\n    headlight();\n    \n    // Seat\n    translate([-10, 0, 9]) {\n        seat();\n    }\n    \n    // Engine\n    engine();\n    \n    // Mirrors\n    translate([0, 15, 45]) {\n        mirror();\n    }\n    translate([0, -15, 45]) {\n        mirror();\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "lambretta",
    "openscad_code": "$fa=2;\n$fs=0.5;\n\n// Overall scale\nscale = 0.35;\n\n// Main body\nmodule body() {\n    difference() {\n        // Main shell\n        hull() {\n            translate([-20,0,10]) cube([40,25,30], center=true);\n            translate([25,0,15]) cube([30,22,25], center=true);\n        }\n        \n        // Wheel cutouts\n        translate([-25,-10,0]) cylinder(r=15, h=30, center=true);\n        translate([25,-10,0]) cylinder(r=15, h=30, center=true);\n        \n        // Legshield cutout\n        translate([0,12,0]) cube([45,5,25], center=true);\n    }\n}\n\n// Front fork\nmodule front_fork() {\n    union() {\n        // Fork tubes\n        translate([-8,20,12]) cylinder(r=2.5, h=20);\n        translate([8,20,12]) cylinder(r=2.5, h=20);\n        \n        // Handlebars\n        translate([0,20,32]) cube([30,3,3], center=true);\n    }\n}\n\n// Seat\nmodule seat() {\n    hull() {\n        translate([0,-12,30]) cube([20,15,5], center=true);\n        translate([0,-8,32]) cube([20,10,2], center=true);\n    }\n}\n\n// Floorboard\nmodule floorboard() {\n    translate([0,5,5]) cube([45,25,3], center=true);\n}\n\n// Headlight\nmodule headlight() {\n    difference() {\n        translate([0,20,15]) sphere(r=6);\n        translate([0,22,15]) sphere(r=4);\n    }\n}\n\n// Engine cover\nmodule engine_cover() {\n    difference() {\n        translate([0,-15,8]) cube([30,20,15], center=true);\n        translate([0,-15,5]) cube([28,18,15], center=true);\n    }\n}\n\n// Wheels\nmodule wheel(pos=[0,0,0]) {\n    translate(pos)\n    union() {\n        difference() {\n            cylinder(r=12, h=6, center=true);\n            cylinder(r=8, h=7, center=true);\n        }\n        for(i=[0:45:315]) {\n            rotate([0,0,i])\n            translate([10,0,0])\n            cube([2,1,6.5], center=true);\n        }\n    }\n}\n\n// Fenders\nmodule fender(pos=[0,0,0]) {\n    translate(pos)\n    difference() {\n        hull() {\n            translate([0,0,0]) cube([30,12,8], center=true);\n            translate([0,-10,0]) cube([26,8,6], center=true);\n        }\n        translate([0,0,-5]) cube([32,14,20], center=true);\n    }\n}\n\n// Rear light\nmodule rear_light() {\n    translate([0,-22,20]) cube([8,3,5], center=true);\n}\n\n// Side panels\nmodule side_panels() {\n    for(side=[-1,1]) {\n        mirror([side,0,0])\n        translate([21,0,15])\n        cube([2,40,20], center=true);\n    }\n}\n\n// Main assembly\nscale(scale)\nunion() {\n    // Body parts\n    body();\n    front_fork();\n    seat();\n    floorboard();\n    headlight();\n    engine_cover();\n    side_panels();\n    rear_light();\n    \n    // Wheels\n    wheel([-25,-10,0]);\n    wheel([25,-10,0]);\n    \n    // Fenders\n    fender([-25,-10,12]);\n    fender([25,-10,12]);\n}",
    "renders": true
  },
  {
    "vehicle": "gts",
    "openscad_code": "// GTS (Gran Turismo Sport) logo in realistic style\n// Overall dimensions: ~80mm diameter, 5mm thick\n\n$fn = 64;\n\n// Main parameters\ndiameter = 80;\nthickness = 5;\nborder_width = 4;\ninner_diameter = diameter - (2 * border_width);\nletter_height = 4;\nletter_depth = 1.5;\n\n// Color definitions (for preview only)\ncolor_main = \"darkblue\";\ncolor_border = \"white\";\ncolor_letters = \"red\";\n\n// Main base disc\nmodule base_disc() {\n    difference() {\n        // Outer disc\n        cylinder(h=thickness, d=diameter);\n        \n        // Inner recess\n        translate([0, 0, -0.01])\n            cylinder(h=thickness + 0.02, d=inner_diameter);\n    }\n}\n\n// Border ring\nmodule border_ring() {\n    difference() {\n        // Outer ring\n        cylinder(h=thickness, d=diameter);\n        \n        // Inner cut\n        translate([0, 0, -0.01])\n            cylinder(h=thickness + 0.02, d=inner_diameter);\n    }\n}\n\n// Letter G\nmodule letter_g() {\n    // Main body\n    translate([0, 0, thickness - letter_depth])\n    linear_extrude(height=letter_depth + 0.01)\n    offset(r=1.5)\n    polygon(points=[\n        [-15, 0],\n        [15, 0],\n        [15, -12],\n        [8, -12],\n        [8, -6],\n        [-15, -6]\n    ]);\n    \n    // Inner cutout\n    translate([0, 0, thickness - letter_depth])\n    linear_extrude(height=letter_depth + 0.02)\n    offset(r=0.5)\n    polygon(points=[\n        [-12, -3],\n        [12, -3],\n        [12, -9],\n        [5, -9],\n        [5, -3]\n    ]);\n}\n\n// Letter T\nmodule letter_t() {\n    translate([0, 15, thickness - letter_depth])\n    linear_extrude(height=letter_depth + 0.01)\n    union() {\n        // Horizontal bar\n        cube([30, 4, 0.01], center=true);\n        \n        // Vertical stem\n        translate([0, -5, 0])\n        cube([4, 14, 0.01], center=true);\n    }\n}\n\n// Letter S\nmodule letter_s() {\n    translate([0, -15, thickness - letter_depth])\n    linear_extrude(height=letter_depth + 0.01)\n    offset(r=1)\n    polygon(points=[\n        [12, 3],\n        [-12, 3],\n        [-12, 0],\n        [12, 0],\n        [12, -3],\n        [-12, -3],\n        [-12, -6],\n        [12, -6],\n        [12, -9],\n        [-12, -9]\n    ]);\n}\n\n// Main assembly\nunion() {\n    // Base disc\n    color(color_main)\n    base_disc();\n    \n    // Border ring\n    color(color_border)\n    translate([0, 0, 0])\n    border_ring();\n    \n    // Letters\n    color(color_letters) {\n        letter_g();\n        letter_t();\n        letter_s();\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "gtr",
    "openscad_code": "// GTR (Guitar) Model - Medium Complexity, Realistic Style\n// Designed for 3D printing - no overhangs, 2mm wall thickness\n\n$fn = 24;  // Smooth curves for printing\n\nmodule body() {\n    difference() {\n        // Main body shape\n        hull() {\n            translate([-30, -20, 0]) cube([60, 40, 5]);\n            translate([-25, -15, 5]) cube([50, 30, 15]);\n            translate([-25, -15, 20]) cube([50, 30, 5]);\n        }\n        \n        // Cutout for electronics\n        translate([-15, -8, 2]) cube([30, 16, 20]);\n        \n        // Neck pocket\n        translate([25, -5, 2]) cube([10, 10, 18]);\n    }\n}\n\nmodule neck() {\n    union() {\n        // Neck shaft\n        translate([34, -4, 2]) cube([40, 8, 5]);\n        \n        // Headstock\n        translate([74, -6, 2]) cube([20, 12, 3]);\n    }\n}\n\nmodule frets() {\n    for(i = [0:4:20]) {\n        translate([34 + i, -4.5, 7.5]) cube([0.5, 9, 0.5]);\n    }\n}\n\nmodule tuners() {\n    // 6 tuners on headstock\n    for(i = [0:5]) {\n        translate([76, -4 + i*1.6, 5]) rotate([90, 0, 0]) cylinder(h=4, d=3);\n    }\n}\n\nmodule strings() {\n    // 6 strings\n    for(i = [0:5]) {\n        translate([34 + i*0.2, -3 + i*1.2, 7.5]) cube([40, 0.2, 0.2]);\n    }\n}\n\nmodule pickups() {\n    // Bridge pickup\n    translate([-15, -6, 6]) cube([8, 12, 3]);\n    \n    // Neck pickup\n    translate([5, -6, 6]) cube([8, 12, 3]);\n}\n\nmodule bridge() {\n    // Bridge assembly\n    translate([-20, -8, 6]) cube([10, 16, 4]);\n    \n    // Individual saddles\n    for(i = [0:5]) {\n        translate([-19 + i*1.5, -7 + i*0.5, 10]) cube([1, 14 - i, 2]);\n    }\n}\n\nmodule volume_knob() {\n    cylinder(h=3, d=6);\n    translate([0, 0, 3]) cylinder(h=1, d=4);\n}\n\nmodule output_jack() {\n    rotate([90, 0, 0]) cylinder(h=8, d=8);\n    translate([0, 0, 8]) cylinder(h=4, d=6);\n}\n\n// Assembly\nunion() {\n    body();\n    neck();\n    frets();\n    tuners();\n    strings();\n    pickups();\n    bridge();\n    \n    // Volume knob\n    translate([0, 0, 6]) volume_knob();\n    \n    // Output jack\n    translate([-25, -15, 2.5]) output_jack();\n}\n\n// Scale to 100mm length\nscale(100/94) children();",
    "renders": true
  },
  {
    "vehicle": "gtl",
    "openscad_code": "// GTL (Gas Transmission Line) Valve Assembly – Realistic / Medium Complexity\n// All dimensions in mm.  Designed for 3D printing (no overhangs >45°, wall thickness ≥1.2 mm)\n\n$fa = 2;\n$fs = 0.5;\n\n// ---------- PARAMETERS ----------\nbody_dia          = 40;     // Main valve body diameter\nbody_len          = 60;     // Main valve body length\nflange_dia        = 54;     // Flange diameter\nflange_thick      = 6;\nbolt_circle_dia   = 44;\nbolt_dia          = 5;\nbolt_head_h       = 3;\nnum_bolts         = 4;\nstem_dia          = 12;\nstem_len          = 25;\nhandwheel_dia     = 36;\nhandwheel_thick   = 8;\nhandwheel_clear   = 2;      // Gap under handwheel\npipe_dia          = 26;     // Pipe OD\npipe_len          = 30;\nwall              = 1.8;    // Shell thickness\n\n// ---------- MODULES ----------\nmodule hex_head(d=bolt_dia, h=bolt_head_h) {\n    // Simple hex cap head\n    cylinder(h=h, d=d*1.8, $fn=6);\n}\n\nmodule bolt_assembly() {\n    // One bolt + head on flange\n    cylinder(h=flange_thick+wall+2, d=bolt_dia, $fn=8);\n    translate([0,0,flange_thick+wall+1]) hex_head();\n}\n\nmodule flange(with_bolts=true) {\n    difference() {\n        cylinder(h=flange_thick, d=flange_dia, $fn=60);\n        // Center bore\n        cylinder(h=flange_thick+1, d=pipe_dia, $fn=60);\n        // Bolt holes\n        if (with_bolts)\n            for (a=[0:360/num_bolts:359])\n                rotate([0,0,a])\n                    translate([bolt_circle_dia/2, 0, -1])\n                        cylinder(h=flange_thick+2, d=bolt_dia+0.3, $fn=8);\n    }\n    // Add bolt assemblies\n    if (with_bolts)\n        for (a=[0:360/num_bolts:359])\n            rotate([0,0,a])\n                translate([bolt_circle_dia/2, 0, 0])\n                    bolt_assembly();\n}\n\nmodule valve_body() {\n    difference() {\n        union() {\n            // Main cylindrical body\n            cylinder(h=body_len, d=body_dia, center=true, $fn=60);\n            // Top bonnet collar\n            translate([0,0,body_len/2])\n                cylinder(h=6, d=body_dia*1.05, $fn=60);\n        }\n        // Internal flow bore (straight through)\n        rotate([0,90,0])\n            cylinder(h=body_dia+2, d=pipe_dia, center=true, $fn=60);\n        // Top stem bore\n        cylinder(h=body_len/2+10, d=stem_dia, center=false, $fn=30);\n    }\n}\n\nmodule pipe_stub() {\n    difference() {\n        cylinder(h=pipe_len, d=pipe_dia+2*wall, $fn=40);\n        cylinder(h=pipe_len+1, d=pipe_dia, $fn=40);\n    }\n}\n\nmodule handwheel() {\n    difference() {\n        union() {\n            // Outer rim\n            cylinder(h=handwheel_thick, d=handwheel_dia, $fn=60);\n            // Inner hub\n            cylinder(h=handwheel_thick+2, d=stem_dia+4, $fn=30);\n            // Spokes (simple rectangles)\n            for (a=[0:60:359])\n                rotate([0,0,a])\n                    translate([handwheel_dia/4, -handwheel_thick/2, 0])\n                        cube([handwheel_dia/2, handwheel_thick, handwheel_thick]);\n        }\n        // Center hole\n        cylinder(h=handwheel_thick+3, d=stem_dia, $fn=30);\n    }\n}\n\nmodule stem() {\n    cylinder(h=stem_len, d=stem_dia, $fn=20);\n}\n\n// ---------- MAIN ASSEMBLY ----------\nunion() {\n    // Valve body centered at origin\n    valve_body();\n\n    // Left pipe stub\n    translate([-body_len/2-pipe_len/2,0,0])\n        rotate([0,90,0])\n            pipe_stub();\n\n    // Right pipe stub\n    translate([body_len/2+pipe_len/2,0,0])\n        rotate([0,90,0])\n            pipe_stub();\n\n    // Left flange\n    translate([-body_len/2-flange_thick/2,0,0])\n        rotate([0,90,0])\n            flange(true);\n\n    // Right flange\n    translate([body_len/2+flange_thick/2,0,0])\n        rotate([0,90,0])\n            flange(true);\n\n    // Stem\n    translate([0,0,body_len/2+3])\n        stem();\n\n    // Handwheel on top of stem\n    translate([0,0,body_len/2+3+stem_len+handwheel_clear])\n        handwheel();\n}",
    "renders": true
  },
  {
    "vehicle": "primavera",
    "openscad_code": "// Primavera (spring onion) in realistic style – medium complexity\n// Overall length ≈ 75 mm, max diameter ≈ 15 mm\n// All parts are printable without support\n\n// Wall thickness for 3D printing\nwall = 1;\n\n// Main module\nmodule primavera() {\n    // White root bulb\n    translate([0, 0, 0])\n        bulb();\n\n    // Green hollow stem\n    translate([0, 0, 20])\n        stem();\n\n    // Leaves – flared, slightly curved\n    translate([0, 0, 70])\n        leaves();\n}\n\n// Root bulb (subdivided for smoothness)\nmodule bulb() {\n    union() {\n        // Main bulb sphere, cut flat on bottom\n        difference() {\n            sphere(d = 12, $fn = 32);\n            translate([0, 0, -6.1])\n                cube([20, 20, 6], center = true);\n        }\n\n        // Root hairs – thin cylinders\n        for (a = [0 : 30 : 330])\n            rotate([0, 90, a])\n                translate([0, 0, -6])\n                    cylinder(h = 5, d1 = 1.5, d2 = 0.5, $fn = 8);\n\n        // Small collar ring\n        translate([0, 0, 5])\n            cylinder(h = 1.5, d1 = 9, d2 = 11, $fn = 32);\n    }\n}\n\n// Hollow stem with slight taper\nmodule stem() {\n    difference() {\n        union() {\n            // Main tube\n            cylinder(h = 50, d1 = 9.5, d2 = 7.5, $fn = 32);\n\n            // Reinforcing ring at base\n            translate([0, 0, -2])\n                cylinder(h = 2.5, d = 11, $fn = 32);\n        }\n\n        // Hollow interior\n        translate([0, 0, -1])\n            cylinder(h = 52, d1 = 9.5 - 2 * wall, d2 = 7.5 - 2 * wall, $fn = 32);\n    }\n}\n\n// Flared green leaves in 4 directions\nmodule leaves() {\n    for (a = [0 : 90 : 270])\n        rotate([0, 0, a])\n            translate([0, 0, 0])\n                single_leaf();\n}\n\n// One leaf with slight curvature\nmodule single_leaf() {\n    color(\"darkgreen\")\n    difference() {\n        // Outer leaf shape – thin ellipsoid\n        scale([1, 0.35, 1])\n            rotate_extrude(angle = 5, $fn = 32)\n                translate([7, 0, 0])\n                    circle(d = 3, $fn = 16);\n\n        // Inner cavity\n        scale([1, 0.35, 1])\n            rotate_extrude(angle = 5, $fn = 32)\n                translate([7, 0, 0])\n                    circle(d = 3 - 2 * wall, $fn = 16);\n    }\n\n    // Tip detail – sharper end\n    translate([0, 0, 7])\n        scale([0.7, 0.7, 0.7])\n            difference() {\n                sphere(d = 3, $fn = 16);\n                translate([0, 0, -1.5])\n                    cube([3, 3, 1.5], center = true);\n            }\n}\n\n// Render the model\nprimavera();",
    "renders": true
  },
  {
    "vehicle": "px",
    "openscad_code": "// Realistic medium-complexity PX camera body\n// Overall size ≈ 90 mm × 60 mm × 35 mm\n\n$fn = 64;\n\n/* ---- main body shell ---- */\nmodule body_shell() {\n    difference() {\n        // outer rounded block\n        minkowski() {\n            cube([85, 55, 30], center = true);\n            sphere(3);\n        }\n        // hollow cavity\n        minkowski() {\n            cube([78, 48, 24], center = true);\n            sphere(1.5);\n        }\n    }\n}\n\n/* ---- lens mount ---- */\nmodule lens_mount() {\n    difference() {\n        // mount ring\n        cylinder(h = 10, d = 28);\n        cylinder(h = 12, d = 22);\n    }\n    // bayonet lugs\n    for (a = [0:120:240]) {\n        rotate([0, 0, a])\n            translate([11, 0, -1])\n                cube([3, 3, 12], center = true);\n    }\n}\n\n/* ---- top plate ---- */\nmodule top_plate() {\n    difference() {\n        // main plate\n        translate([0, 0, 15])\n            cube([85, 55, 3], center = true);\n        // hot-shoe slot\n        translate([0, -20, 16.5])\n            cube([12, 20, 2], center = true);\n    }\n    // shutter button\n    translate([25, 20, 18])\n        cylinder(h = 2, d = 6);\n}\n\n/* ---- dials ---- */\nmodule control_dial(pos, h) {\n    translate(pos)\n        difference() {\n            cylinder(h = h, d = 12);\n            cylinder(h = h + 0.1, d = 10);\n            // knurl notches\n            for (i = [0:15:345])\n                rotate([0, 0, i])\n                    translate([6, 0, -0.5])\n                        cube([0.75, 2, h + 1], center = true);\n        }\n}\n\n/* ---- back door with screen ---- */\nmodule back_door() {\n    difference() {\n        // door plate\n        translate([0, 0, -15.5])\n            cube([83, 53, 2], center = true);\n        // LCD recess\n        translate([0, 5, -16.5])\n            cube([50, 35, 1.5], center = true);\n    }\n}\n\n/* ---- viewfinder bump ---- */\nmodule viewfinder() {\n    translate([-30, 0, 15])\n        difference() {\n            // housing\n            cube([20, 18, 12], center = true);\n            // eyepiece hole\n            rotate([0, 90, 0])\n                cylinder(h = 20, d = 8);\n        }\n}\n\n/* ---- strap lugs ---- */\nmodule strap_lugs() {\n    for (side = [-1, 1]) {\n        translate([0, side * 30, 0])\n            difference() {\n                cylinder(h = 8, d = 6);\n                rotate([0, 90, 0])\n                    cylinder(h = 7, d = 2.5);\n            }\n    }\n}\n\n/* ---- assembly ---- */\nbody_shell();\n\ntranslate([0, 0, -15])\n    color(\"gray\")\n    back_door();\n\ntranslate([0, 0, 15])\n    color(\"silver\")\n    top_plate();\n\ntranslate([0, 0, 10])\n    color(\"black\")\n    lens_mount();\n\ntranslate([-30, 0, 21])\n    color(\"black\")\n    viewfinder();\n\ntranslate([25, 0, 17])\n    color(\"black\")\n    control_dial([25, 0, 17], 4);\n\ntranslate([-25, 0, 17])\n    color(\"black\")\n    control_dial([-25, 0, 17], 4);\n\ntranslate([0, 0, 0])\n    color(\"gray\")\n    strap_lugs();",
    "renders": true
  },
  {
    "vehicle": "rally",
    "openscad_code": "// Rally car model - realistic style, medium complexity\n// Dimensions: ~90mm length, 45mm width, 30mm height\n\n$fn = 32;\n\n// Main body\nmodule body() {\n    // Lower chassis\n    difference() {\n        hull() {\n            cube([85, 35, 8], center=true);\n            translate([0, 0, 5]) cube([80, 30, 8], center=true);\n        }\n        // Wheel arches\n        for(side = [-1, 1]) {\n            translate([30, side*15, 0]) rotate([0, 90, 0]) cylinder(h=20, r=12);\n            translate([-30, side*15, 0]) rotate([0, 90, 0]) cylinder(h=20, r=12);\n        }\n    }\n    \n    // Upper cabin\n    difference() {\n        hull() {\n            translate([0, 0, 10]) cube([70, 30, 15], center=true);\n            translate([0, 0, 18]) cube([50, 25, 12], center=true);\n        }\n        // Windshield\n        translate([0, 0, 20]) cube([35, 28, 10], center=true);\n    }\n}\n\n// Wheels\nmodule wheel() {\n    difference() {\n        cylinder(h=8, r=12);\n        cylinder(h=9, r=5);\n    }\n    // Tire tread pattern\n    for(i = [0:7]) {\n        rotate([0, 0, i*45]) \n            translate([11, 0, 0]) \n            cube([2, 2, 8], center=true);\n    }\n}\n\n// Suspension arm\nmodule suspension_arm() {\n    translate([-5, 0, 0]) cube([10, 3, 2]);\n    translate([0, 0, -2]) cylinder(h=4, r=1.5);\n}\n\n// Exhaust pipe\nmodule exhaust() {\n    difference() {\n        cylinder(h=20, r=3);\n        translate([0, 0, -1]) cylinder(h=22, r=2.5);\n    }\n}\n\n// Spoiler\nmodule spoiler() {\n    // Main wing\n    translate([-40, 0, 25]) cube([20, 35, 3], center=true);\n    \n    // Supports\n    for(side = [-1, 1]) {\n        translate([-35, side*15, 12]) \n            rotate([0, 20, 0]) \n            cube([2, 2, 15]);\n    }\n}\n\n// Roof scoop\nmodule roof_scoop() {\n    difference() {\n        translate([0, 0, 25]) cube([20, 15, 8], center=true);\n        translate([0, 0, 27]) cube([18, 13, 10], center=true);\n    }\n}\n\n// Lights\nmodule headlight() {\n    cylinder(h=2, r=4);\n    translate([0, 0, -0.5]) cylinder(h=3, r=3.5);\n}\n\n// Assemble rally car\nunion() {\n    // Main body\n    body();\n    \n    // Wheels\n    for(side = [-1, 1]) {\n        translate([30, side*22, 0]) rotate([90, 0, 0]) wheel();\n        translate([-30, side*22, 0]) rotate([90, 0, 0]) wheel();\n    }\n    \n    // Suspension components\n    for(side = [-1, 1]) {\n        translate([35, side*20, -5]) suspension_arm();\n        translate([-35, side*20, -5]) suspension_arm();\n    }\n    \n    // Exhaust\n    translate([40, 0, -2]) rotate([0, 90, 0]) exhaust();\n    \n    // Spoiler\n    spoiler();\n    \n    // Roof scoop\n    roof_scoop();\n    \n    // Headlights\n    translate([42, -10, 5]) headlight();\n    translate([42, 10, 5]) headlight();\n    translate([-42, -8, 5]) headlight();\n    translate([-42, 8, 5]) headlight();\n}",
    "renders": true
  },
  {
    "vehicle": "et",
    "openscad_code": "// Realistic Medium-Complexity Jet Model (≈90 mm wingspan)\n// ------------------------------------------------------\n// Main fuselage, swept wings, twin engines, tail, cockpit\n// 3D-printable without supports (no >45° overhangs)\n\n$fn = 40;\n\nmodule fuselage() {\n    // Forward cylindrical section\n    cylinder(h = 55, d1 = 12, d2 = 14);\n    translate([0, 0, 55])\n        // Mid-section taper\n        cylinder(h = 25, d1 = 14, d2 = 16);\n    translate([0, 0, 80])\n        // Tail cone\n        cylinder(h = 20, d1 = 16, d2 = 6);\n}\n\nmodule cockpit() {\n    // Bubble canopy\n    translate([-6, 0, 15])\n        rotate([0, 90, 0])\n            scale([1, 1.2, 1])\n                sphere(d = 10);\n    // Nose radome\n    translate([0, 0, -5])\n        sphere(d = 12);\n}\n\nmodule wings() {\n    // Root\n    difference() {\n        translate([-40, 0, 35])\n            rotate([0, 0, -25])\n                cube([80, 8, 4], center = true);\n        // Wing root fillet\n        translate([0, 4, 35])\n            sphere(d = 6);\n    }\n    // Tip\n    translate([-45, 0, 35])\n        rotate([0, 0, -25])\n            cube([10, 6, 3], center = true);\n}\n\nmodule tail_fin() {\n    rotate([0, -10, 0])\n        translate([0, 0, 85])\n            cube([0.1, 30, 20], center = true);\n}\n\nmodule horizontal_stab() {\n    for (y = [-8, 8]) {\n        translate([0, y, 85])\n            rotate([0, 15, 0])\n                cube([35, 0.1, 8], center = true);\n    }\n}\n\nmodule engine(nacelle = false) {\n    // Engine nacelle cylinder\n    translate([0, 0, -60])\n        cylinder(h = 60, d = 14);\n    translate([0, 0, -60])\n        difference() {\n            cylinder(h = 20, d = 15);\n            cylinder(h = 21, d = 12);\n        }\n    // Intake lip\n    translate([0, 0, -60])\n        cylinder(h = 3, d = 16);\n    // Exhaust\n    translate([0, 0, 0])\n        cylinder(h = 5, d = 11);\n}\n\nmodule engine_pylon(offset) {\n    translate([offset, 0, 30])\n        cube([5, 15, 4], center = true);\n}\n\nmodule landing_gear() {\n    // Nose gear door\n    translate([0, 0, 8])\n        cube([10, 2, 4], center = true);\n    // Main gear doors (simplified)\n    for (side = [-1, 1]) {\n        translate([side * 20, 0, 8])\n            cube([12, 2, 4], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    fuselage();\n    cockpit();\n    wings();\n    mirror([1, 0, 0])\n        wings();\n    tail_fin();\n    horizontal_stab();\n\n    // Port engine\n    translate([-28, -25, 35])\n        rotate([0, 0, -25])\n            engine();\n    translate([-28, -25, 35])\n        engine_pylon(-28);\n\n    // Starboard engine\n    translate([28, -25, 35])\n        rotate([0, 0, -25])\n            mirror([1, 0, 0])\n                engine();\n    translate([28, -25, 35])\n        engine_pylon(28);\n\n    // Landing gear doors\n    landing_gear();\n}",
    "renders": true
  },
  {
    "vehicle": "gt",
    "openscad_code": "// Ford GT-style supercar, medium-complexity, 3D-printable\n// Overall length ≈ 90 mm, realistic proportions, no steep overhangs\n\n$fa = 2;  // smoother curves\n$fs = 0.5;\n\n// Main assembly -----------------------------------------------------------\nmodule gt_car() {\n    color(\"darkblue\") {\n        union() {\n            body_shell();\n            floor_pan();\n            front_wing_assembly();\n            rear_wing_assembly();\n            wheels();\n            exhaust_pipes();\n        }\n    }\n}\n\n// Body shell --------------------------------------------------------------\nmodule body_shell() {\n    difference() {\n        // Main monocoque\n        hull() {\n            // Nose\n            translate([-42,0,1]) cube([25,20,10], center=true);\n            // Cabin\n            translate([-20,0,13]) cube([35,28,18], center=true);\n            // Engine deck\n            translate([18,0,10]) cube([35,22,12], center=true);\n            // Tail\n            translate([42,0,6]) cube([15,18,8], center=true);\n        }\n\n        // Cockpit opening\n        translate([-20,0,20])\n            cube([38,24,10], center=true);\n\n        // Side windows\n        mirror([0,1,0]) translate([-10,15,18])\n            rotate([0,20,0]) cube([25,0.5,8]);\n    }\n}\n\n// Front splitter ----------------------------------------------------------\nmodule front_wing_assembly() {\n    translate([-41,0,0]) {\n        difference() {\n            // Wing profile\n            translate([0,0,-1])\n                cube([6,36,2], center=true);\n            // Underside chamfer\n            translate([0,0,-1.9])\n                cube([6.2,36.2,1], center=true);\n        }\n        // End plates\n        translate([0,±18,0])\n            cube([2,2,6], center=true);\n    }\n}\n\n// Rear wing ---------------------------------------------------------------\nmodule rear_wing_assembly() {\n    translate([38,0,16]) {\n        rotate([0,10,0]) {\n            // Main wing\n            difference() {\n                cube([16,42,1.5], center=true);\n                // Cutout for engine\n                translate([0,0,0])\n                    cube([16,20,2], center=true);\n            }\n            // Wing pillars\n            translate([0,±17,0])\n                cube([2,2,8], center=true);\n        }\n    }\n}\n\n// Floor pan for printability ---------------------------------------------\nmodule floor_pan() {\n    translate([0,0,-2])\n        cube([90,38,1.5], center=true);\n}\n\n// Wheels ------------------------------------------------------------------\nmodule wheels() {\n    for(side=[-1,1])\n    translate([0,side*20,0])\n        wheel_set();\n}\n\nmodule wheel_set() {\n    // Front wheel\n    translate([-28,0,6]) wheel();\n    // Rear wheel\n    translate([28,0,6]) wheel();\n}\n\nmodule wheel() {\n    difference() {\n        union() {\n            // Tire\n            color(\"black\")\n                cylinder(h=10, r=9, center=true);\n            // Rim\n            color(\"silver\")\n                cylinder(h=8, r=7, center=true);\n        }\n        // Axle hole\n        cylinder(h=12, r=2, center=true);\n    }\n}\n\n// Exhaust tips ------------------------------------------------------------\nmodule exhaust_pipes() {\n    translate([42,0,5]) {\n        for(side=[-1,1])\n            translate([0,side*6,0])\n                rotate([90,0,0])\n                    cylinder(h=10, r=2);\n    }\n}\n\n// Render\ngt_car();",
    "renders": true
  },
  {
    "vehicle": "gl",
    "openscad_code": "// Realistic GL-Style Tactical Flashlight – medium complexity\n// Total length ≈ 85 mm, body Ø ≈ 25 mm\n// All walls ≥ 1 mm, no steep overhangs, printable without supports\n\n$fn = 64;\n\n// Main assembly\nmodule flashlight() {\n    difference() {\n        union() {\n            head();\n            body();\n            tail();\n            pocket_clip();\n        }\n        // Central tunnel for AAA batteries (2×AAA)\n        translate([0,0,-1]) cylinder(h = 87, d = 10.4);\n        // Lens opening\n        translate([0,0,32]) cylinder(h = 5, d = 18);\n    }\n}\n\n// Lens / bezel module\nmodule head() {\n    // Main bezel ring\n    translate([0,0,30]) cylinder(h = 5, d = 28);\n    // Cooling fins (six small rings stacked)\n    for (z = [24.5 : 1 : 29.5]) {\n        translate([0,0,z]) cylinder(h = 0.5, d1 = 26, d2 = 24);\n    }\n    // Strike bezel teeth (8 radial teeth)\n    for (a = [0 : 45 : 315]) {\n        rotate([0,0,a]) translate([8.5,0,32.5]) cube([6,3,3], center = true);\n    }\n}\n\n// Body tube with knurling\nmodule body() {\n    // Core tube\n    cylinder(h = 50, d = 25);\n\n    // Diamond knurl pattern (rows of tiny pyramids)\n    for (z = [5 : 5 : 45]) {\n        for (a = [0 : 15 : 345]) {\n            rotate([0,0,a]) translate([12.5,0,z]) rotate([90,0,0])\n                cylinder(h = 1.5, r1 = 1.5, r2 = 0, h = 1.5, center = true);\n        }\n    }\n}\n\n// Tail cap\nmodule tail() {\n    translate([0,0,-25]) cylinder(h = 8, d = 25);\n    // Lanyard hole\n    translate([0,0,-21]) rotate([0,90,0]) cylinder(h = 25, d = 3);\n    // Rubber switch boot dome\n    translate([0,0,-21]) sphere(d = 10);\n}\n\n// Removable pocket clip\nmodule pocket_clip() {\n    translate([12.5,0,5]) rotate([90,0,0]) {\n        difference() {\n            // Clip body\n            linear_extrude(height = 1.5, center = true) {\n                polygon(points = [[0,0],[0,35],[2,35],[2,25],[1.5,25],[1.5,0]]);\n            }\n            // Spring slot\n            translate([0,15,-1]) cube([2,10,3], center = true);\n        }\n    }\n}\n\nflashlight();",
    "renders": true
  },
  {
    "vehicle": "ss",
    "openscad_code": "// Realistic stylized \"SS\" letter sculpture for 3D printing\n// Dimensions: ~60 mm tall, 15 mm thick\n\n// Overall parameters\nletter_height = 60;\nletter_width  = 25;\nletter_thick  = 15;\nwall_thick    = 2;\nfillet_r      = 5;\n\n// Helper module: rounded rectangle\nmodule rounded_rectangle(w, h, d, r) {\n    hull() {\n        translate([ r,  r, 0]) cylinder(h=d, r=r, $fn=16);\n        translate([w-r,  r, 0]) cylinder(h=d, r=r, $fn=16);\n        translate([ r, h-r, 0]) cylinder(h=d, r=r, $fn=16);\n        translate([w-r, h-r, 0]) cylinder(h=d, r=r, $fn=16);\n    }\n}\n\n// Helper module: hollow box\nmodule hollow_box(ow, oh, od, t) {\n    difference() {\n        rounded_rectangle(ow, oh, od, fillet_r);\n        translate([t, t, -0.1]) rounded_rectangle(ow-2*t, oh-2*t, od+0.2, fillet_r-t);\n    }\n}\n\n// Module for top/bottom curves\nmodule curve_part() {\n    difference() {\n        // Outer semi-cylinder\n        translate([letter_width/2, 0, 0])\n            rotate([90,0,0])\n            cylinder(h=letter_width, r=letter_height/4, $fn=60);\n        // Inner hollow\n        translate([letter_width/2, 0, 0])\n            rotate([90,0,0])\n            cylinder(h=letter_width, r=letter_height/4-wall_thick, $fn=60);\n        // Trim ends\n        translate([-1, letter_height/4-wall_thick, -1]) cube([letter_width+2, wall_thick+2, letter_thick+2]);\n    }\n}\n\n// Module for straight segment\nmodule straight_segment() {\n    hollow_box(letter_width, letter_height/2, letter_thick, wall_thick);\n}\n\n// Build the S shape\nunion() {\n    // Top curve\n    translate([0, letter_height*0.75, 0]) \n        rotate([0,0,180]) curve_part();\n\n    // Middle connecting bar\n    translate([0, letter_height*0.5, 0]) straight_segment();\n\n    // Bottom curve\n    translate([0, letter_height*0.25, 0]) curve_part();\n    \n    // Inner support web for 3D printing stability\n    translate([letter_width/2-wall_thick/2, letter_height/2, 0])\n        cube([wall_thick, letter_height/2, letter_thick]);\n}",
    "renders": true
  },
  {
    "vehicle": "ts",
    "openscad_code": "// Realistic Medium-Complexity Train Set (TS) - OpenSCAD 3D-printable model\n// Overall size ~80 mm long, 30 mm wide, 25 mm high\n\n$fa = 3; $fs = 0.5;\n\n// Track module\nmodule track_segment(length = 40, width = 20, rail_w = 3, rail_h = 2, sleeper_w = 2, sleeper_h = 1.5) {\n    // Sleepers (ties)\n    for (x = [0:8:length-8]) {\n        translate([x, 0, 0])\n            cube([sleeper_w, width, sleeper_h], center = true);\n    }\n    // Rails\n    translate([0, -width/2 + rail_w/2, sleeper_h/2 + rail_h/2])\n        cube([length, rail_w, rail_h], center = true);\n    translate([0,  width/2 - rail_w/2, sleeper_h/2 + rail_h/2])\n        cube([length, rail_w, rail_h], center = true);\n}\n\n// Locomotive body\nmodule locomotive_body() {\n    // Main body shell\n    hull() {\n        translate([-5, 0, 0]) cube([30, 18, 12], center = true);\n        translate([ 5, 0, 2]) cube([25, 15,  8], center = true);\n    }\n    // Cab top\n    translate([5, 0, 8]) cube([12, 14, 6], center = true);\n    // Chimney\n    translate([-8, 0, 10]) cylinder(h = 8, d = 5, center = false);\n    // Boiler front\n    translate([-14, 0, 2]) sphere(d = 10);\n}\n\n// Locomotive chassis\nmodule locomotive_chassis() {\n    // Frame\n    cube([30, 18, 2], center = true);\n    // Couplers\n    translate([-15, 0, -1]) rotate([0, 90, 0]) cylinder(h = 4, d = 3);\n    translate([ 15, 0, -1]) rotate([0, 90, 0]) cylinder(h = 4, d = 3);\n}\n\n// Bogie / truck\nmodule bogie() {\n    difference() {\n        // Bogie frame\n        cube([16, 12, 3], center = true);\n        // Wheel cutouts\n        for (y = [-4, 4]) {\n            translate([-4, y, -2]) cylinder(h = 5, d = 6, center = true);\n            translate([ 4, y, -2]) cylinder(h = 5, d = 6, center = true);\n        }\n    }\n}\n\n// Passenger car body\nmodule passenger_car_body() {\n    // Main body\n    cube([32, 15, 10], center = true);\n    // Roof\n    translate([0, 0, 9]) cube([34, 17, 2], center = true);\n    // Windows\n    for (x = [-10, -5, 0, 5, 10]) {\n        translate([x, 0, 2]) cube([4, 17, 6], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    // Track\n    translate([0, 0, 0]) track_segment(80);\n\n    // Locomotive\n    translate([-25, 0, 4]) {\n        locomotive_body();\n        translate([0, 0, -6]) locomotive_chassis();\n    }\n\n    // Front bogie\n    translate([-20, 0, 2]) rotate([90, 0, 0]) bogie();\n    // Rear bogie\n    translate([-10, 0, 2]) rotate([90, 0, 0]) bogie();\n\n    // Passenger car 1\n    translate([15, 0, 4]) {\n        passenger_car_body();\n        translate([0, 0, -6]) cube([32, 15, 2], center = true);\n        translate([10, 0, 2]) rotate([90, 0, 0]) bogie();\n        translate([-10, 0, 2]) rotate([90, 0, 0]) bogie();\n    }\n\n    // Passenger car 2\n    translate([50, 0, 4]) {\n        passenger_car_body();\n        translate([0, 0, -6]) cube([32, 15, 2], center = true);\n        translate([10, 0, 2]) rotate([90, 0, 0]) bogie();\n        translate([-10, 0, 2]) rotate([90, 0, 0]) bogie();\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "r",
    "openscad_code": "// Realistic-style 3D printable 'r' (50 mm tall, 2.5 mm wall thickness)\n// Built from primitive solids, no overhangs > 45°, all edges chamfered\n\n$fn = 32;\n\nmodule r_letter() {\n    // Basic dimensions (mm)\n    h = 50;            // total height\n    t = 2.5;           // wall / thickness\n    stem_w = 10;       // stem width\n    bowl_r = 14;       // bowl radius\n    bowl_h = 24;       // bowl height (top aligned with stem top)\n    stem_h = 38;       // stem height (bottom sits on build plate)\n    leg_l = 22;        // diagonal leg length\n    leg_a = 30;        // leg angle (deg)\n\n    // Helper for chamfering edges\n    module chamfer_box(s, t=1) {\n        difference() {\n            cube(s);\n            translate([t, t, -1])\n                cube([s.x - 2*t, s.y - 2*t, s.z + 2]);\n            translate([-1, t, t])\n                cube([s.x + 2, s.y - 2*t, s.z - 2*t]);\n        }\n    }\n\n    // Stem\n    translate([0, 0, 0])\n        chamfer_box([stem_w, t, stem_h], 2);\n\n    // Bowl (partial cylinder forming rounded top)\n    translate([stem_w, 0, bowl_h])\n        rotate([0, -90, 0])\n        difference() {\n            cylinder(h = bowl_r*2, r = bowl_r, center = true);\n            translate([0, 0, -bowl_r - t])\n                cube([bowl_r*2, bowl_r*2, t*2], center = true);\n            translate([-bowl_r - t, 0, 0])\n                cube([t*2, bowl_r*2, bowl_r*2], center = true);\n        }\n\n    // Diagonal leg\n    translate([stem_w, 0, 0])\n        rotate([0, 0, leg_a])\n        chamfer_box([leg_l, t, t], 1);\n\n    // Foot (horizontal base of leg)\n    translate([stem_w + leg_l*cos(leg_a) - t, 0, 0])\n        chamfer_box([t, t, leg_l*sin(leg_a)], 1);\n}\n\n// Center model on origin base\ntranslate([-10, -t/2, 0])\n    r_letter();",
    "renders": true
  },
  {
    "vehicle": "s",
    "openscad_code": "// Realistic \"S\" letter in 3D — printable, medium complexity\n// Dimensions: ~80 mm tall, 12 mm thick, wall 2 mm\n\n$fn = 36;  // smooth curves\n\nmodule s_curve_profile(r_outer=6, wall=2) {\n    // cross-section of the “tube”: hollow circle\n    difference() {\n        circle(r = r_outer);\n        circle(r = r_outer - wall);\n    }\n}\n\nmodule s_serif(z_base=0, len=12, thick=2, height=8) {\n    // small rectangular foot at curve ends for print stability\n    translate([0, 0, z_base])\n        cube([len, thick, height], center = true);\n}\n\nmodule s_top_arc() {\n    // top inverted C\n    translate([0, 0, 8])\n        rotate_extrude(angle = 180)\n            translate([20, 0, 0])\n                s_curve_profile();\n}\n\nmodule s_mid_sweep() {\n    // 90° clockwise sweep to form middle bridge\n    rotate([0, 0, -90])\n        linear_extrude(height = 40, twist = -90, scale = [1, 0.6], center = true)\n            s_curve_profile();\n}\n\nmodule s_bottom_arc() {\n    // bottom C\n    translate([0, 0, -24])\n        rotate_extrude(angle = 180)\n            translate([20, 0, 0])\n                s_curve_profile();\n}\n\nmodule s_serifs() {\n    // feet to avoid overhangs\n    s_serif(z_base = -32, len = 12, thick = 4);\n    s_serif(z_base = 32,  len = 12, thick = 4);\n}\n\nmodule letter_s() {\n    union() {\n        // main continuous tube\n        s_top_arc();\n        s_mid_sweep();\n        s_bottom_arc();\n        \n        // stabilizing feet\n        s_serifs();\n    }\n}\n\n// render the letter lying flat for printing\nrotate([90, 0, 0])\n    letter_s();",
    "renders": true
  },
  {
    "vehicle": "rs",
    "openscad_code": "// Realistic RS (Racing Seat) - Medium complexity\n// Wall thickness = 2mm for 3D printing\n\n$fn = 32;\n\nmodule seat_shell() {\n    difference() {\n        // Main shell body\n        union() {\n            // Seat back\n            translate([0, 0, 30])\n                scale([1, 1.2, 1])\n                cylinder(h=60, r1=30, r2=25);\n            \n            // Seat base\n            translate([0, -15, 10])\n                cube([60, 50, 20], center=true);\n            \n            // Side bolsters left\n            translate([-35, 0, 25])\n                rotate([0, 10, 0])\n                cylinder(h=50, r1=15, r2=10);\n            \n            // Side bolsters right\n            translate([35, 0, 25])\n                rotate([0, -10, 0])\n                cylinder(h=50, r1=15, r2=10);\n        }\n        \n        // Remove inner cavity\n        translate([0, -5, 15])\n            cube([54, 44, 55], center=true);\n        \n        // Headrest hole\n        translate([0, 5, 75])\n            cylinder(h=20, r=15);\n        \n        // Lumbar support space\n        translate([0, -20, 30])\n            cube([40, 10, 30], center=true);\n    }\n}\n\nmodule seat_cushion() {\n    // Bottom cushion\n    translate([0, -15, 10])\n        difference() {\n            scale([1.1, 1, 0.3])\n                sphere(r=30);\n            translate([0, 0, -10])\n                cube([80, 80, 20], center=true);\n        }\n    \n    // Back cushion\n    translate([0, 5, 45])\n        rotate([90, 0, 0])\n        difference() {\n            scale([1.1, 1.2, 0.4])\n                sphere(r=25);\n            translate([0, 0, -15])\n                cube([60, 60, 30], center=true);\n        }\n}\n\nmodule mounting_holes() {\n    // 4 mounting holes at corners\n    translate([-25, -30, 0])\n        cylinder(h=10, r=3);\n    translate([25, -30, 0])\n        cylinder(h=10, r=3);\n    translate([-25, 10, 0])\n        cylinder(h=10, r=3);\n    translate([25, 10, 0])\n        cylinder(h=10, r=3);\n}\n\nmodule harness_slots() {\n    // 5-point harness slots\n    for(x = [-15, 15]) {\n        translate([x, 0, 65])\n            rotate([0, 90, 0])\n            cylinder(h=5, r=5);\n    }\n    \n    // Center slot\n    translate([0, -10, 65])\n        rotate([0, 90, 0])\n        cylinder(h=5, r=5);\n}\n\nmodule seat_base() {\n    difference() {\n        // Base plate\n        translate([0, -10, 0])\n            cube([70, 60, 5], center=true);\n        \n        // Mounting holes\n        mounting_holes();\n    }\n}\n\n// Assembly\nunion() {\n    // Main seat structure\n    color(\"silver\") {\n        seat_shell();\n    }\n    \n    // Cushions\n    color(\"darkgray\") {\n        seat_cushion();\n    }\n    \n    // Base\n    color(\"black\") {\n        seat_base();\n    }\n    \n    // Harness slots\n    color(\"silver\") {\n        harness_slots();\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "rt",
    "openscad_code": "// OpenSCAD code for a realistic \"rt\" (remote terminal) model\n// Medium complexity, 3D-printable, ~75 mm long\n\n// Overall dimensions\nlength = 75;\nwidth = 30;\nheight = 15;\n\n// Wall thickness for 3D printing\nwall = 1.5;\n\n// Main body shell\nmodule body() {\n    difference() {\n        // Outer rounded block\n        minkowski() {\n            cube([length, width, height], center = true);\n            sphere(r = 2);\n        }\n        \n        // Hollow interior\n        translate([0, 0, 1])\n        minkowski() {\n            cube([length - 2*wall, width - 2*wall, height - 2*wall], center = true);\n            sphere(r = 1.5);\n        }\n    }\n}\n\n// Top panel with grille holes for airflow\nmodule top_grille() {\n    difference() {\n        translate([0, 0, height/2 - 0.5])\n            cube([length - 6, width - 6, 1], center = true);\n        \n        // Ventilation slots\n        for (x = [-25:5:25])\n            translate([x, 0, height/2 + 0.01])\n                cube([2, width - 8, 2], center = true);\n    }\n}\n\n// LED indicator strip\nmodule led_strip() {\n    translate([length/2 - 5, 0, height/2 - 1])\n        color(\"red\")\n        cube([8, 2, 1], center = true);\n}\n\n// Side screw posts (4x)\nmodule screw_posts() {\n    for (side = [-1, 1]) {\n        for (pos = [-length/3, length/3]) {\n            translate([pos, side * (width/2 - 1.5), 0])\n                cylinder(h = height, r = 1.5, center = true, $fn = 12);\n        }\n    }\n}\n\n// Keypad area with raised border\nmodule keypad() {\n    difference() {\n        // Raised border\n        translate([-length/4, 0, height/2 - 1.6])\n            cube([length/2, width - 10, 1.5], center = true);\n        \n        // Recessed key area\n        translate([-length/4, 0, height/2 - 1])\n            cube([length/2 - 4, width - 14, 2], center = true);\n    }\n    \n    // Simple key layout\n    for (row = [-1:1])\n        for (col = [-2:2]) {\n            translate([-length/4 + col*6, row*6, height/2 - 0.5])\n                cylinder(h = 1, r = 1.8, $fn = 16);\n        }\n}\n\n// Antenna stub\nmodule antenna() {\n    translate([length/2 + 2, 0, height/2 - 3]) {\n        rotate([90, 0, 0])\n            cylinder(h = 8, r1 = 1.5, r2 = 0.8, $fn = 12);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    top_grille();\n    led_strip();\n    screw_posts();\n    keypad();\n    antenna();\n}",
    "renders": true
  },
  {
    "vehicle": "gs",
    "openscad_code": "// Realistic style Gameboy (GS) - medium complexity\n// Overall dimensions: ~85mm x 48mm x 24mm\n\n// Main body shell\nmodule body() {\n    difference() {\n        // Main rounded rectangle body\n        minkowski() {\n            cube([82, 45, 20], center=true);\n            sphere(2);\n        }\n        // Hollow inside\n        translate([0, 0, 2])\n            cube([76, 39, 18], center=true);\n    }\n}\n\n// Screen bezel\nmodule screen_bezel() {\n    difference() {\n        // Outer bezel\n        translate([0, 15, 10.5])\n            cube([52, 34, 2], center=true);\n        // Inner cutout\n        translate([0, 15, 11.5])\n            cube([46, 28, 2], center=true);\n    }\n}\n\n// LCD screen\nmodule lcd() {\n    translate([0, 15, 12])\n        cube([44, 26, 0.5], center=true);\n}\n\n// D-pad\nmodule dpad() {\n    // Cross shape\n    union() {\n        // Horizontal bar\n        translate([-12, -10, 10.5])\n            cube([18, 6, 2], center=true);\n        // Vertical bar\n        translate([-12, -10, 10.5])\n            cube([6, 18, 2], center=true);\n    }\n}\n\n// A/B buttons\nmodule action_buttons() {\n    for (i = [0, 1]) {\n        translate([8 + 12*i, -10, 10.5])\n            cylinder(h=2, d=8, center=true);\n    }\n}\n\n// Start/select buttons\nmodule menu_buttons() {\n    for (i = [0, 1]) {\n        translate([-4 + 6*i, 0, 10.5])\n            cube([5, 2, 1.5], center=true);\n    }\n}\n\n// Speaker grill\nmodule speaker() {\n    difference() {\n        translate([0, -22, 10.5])\n            cube([30, 10, 2], center=true);\n        // Holes pattern\n        for (x = [-13:4:13])\n            for (y = [-4, 0, 4])\n                translate([x, -22 + y, 11.5])\n                    cylinder(h=2, d=1.5, center=true);\n    }\n}\n\n// Top edge details\nmodule top_details() {\n    // IR sensor port\n    translate([30, 22.5, 10])\n        rotate([0, 90, 0])\n            cylinder(h=6, d=3, center=true);\n    // Link cable port\n    translate([-30, 22.5, 7])\n        rotate([0, 90, 0])\n            cylinder(h=10, d=8, center=true);\n}\n\n// Side buttons\nmodule side_buttons() {\n    // Volume wheel\n    translate([-41, 5, 5])\n        rotate([90, 0, 0])\n            cylinder(h=8, d=6, center=true);\n    // Power switch\n    translate([41, 10, 5])\n        rotate([90, 0, 0])\n            cube([8, 3, 4], center=true);\n}\n\n// Assembly\nunion() {\n    body();\n    screen_bezel();\n    lcd();\n    dpad();\n    action_buttons();\n    menu_buttons();\n    speaker();\n    top_details();\n    side_buttons();\n}",
    "renders": true
  },
  {
    "vehicle": "st",
    "openscad_code": "// Realistic style \"ST\" signet ring – medium complexity\n// Overall height ~7 mm, outer diameter ~22 mm → size 10–11 US ring\n// 3D-printable with no overhangs >45°; 1.2 mm wall thickness everywhere\n\n// ---------- PARAMETERS ----------\nring_d = 22;            // outer diameter\nring_h = 7;             // total height\nband_t = 1.2;           // band thickness\ntop_t  = 1.5;           // top plate thickness\nplate_r = 9.5;          // radius of top plate\nchamfer = 1.0;          // 45° chamfer on lower edge\n\n// ---------- MODULES ----------\nmodule ring_band() {\n    difference() {\n        cylinder(h = ring_h, d = ring_d, $fn=64);\n        translate([0,0,-0.01])\n            cylinder(h = ring_h + 0.02, d = ring_d - 2*band_t, $fn=64);\n    }\n}\n\nmodule chamfer_edge() {\n    // cut 45° chamfer from lower outer edge\n    translate([0,0,-0.01])\n    rotate_extrude($fn=64)\n        polygon([[ring_d/2-0.01, 0],\n                 [ring_d/2+0.01, 0],\n                 [ring_d/2+0.01, chamfer+0.01],\n                 [ring_d/2-chamfer-0.01, 0.01]]);\n}\n\nmodule top_plate() {\n    cylinder(h = top_t, d = plate_r*2, $fn=64);\n}\n\n// Stylized but realistic \"S\" and \"T\" relief\nmodule relief_ST() {\n    // S\n    translate([-3.5, 0, top_t - 0.3]) {\n        linear_extrude(height = 0.3) {\n            polygon(points=[\n                [-2, 2], [-1, 3], [1, 3], [2, 2],\n                [2, 0], [1, -1], [-1, -1], [-2, 0],\n                [-2, 2]\n            ]);\n        }\n    }\n    // T\n    translate([3.5, 0, top_t - 0.3]) {\n        linear_extrude(height = 0.3) {\n            polygon(points=[\n                [-1.5, 3], [1.5, 3], [1.5, 2], [0.5, 2],\n                [0.5, -3], [-0.5, -3], [-0.5, 2], [-1.5, 2]\n            ]);\n        }\n    }\n}\n\n// ---------- MAIN ----------\ndifference() {\n    union() {\n        // band\n        ring_band();\n        \n        // add top plate flush on band\n        translate([0,0, ring_h - top_t])\n            top_plate();\n    }\n    \n    // chamfer lower outer edge\n    chamfer_edge();\n    \n    // engrave ST on top\n    relief_ST();\n}",
    "renders": true
  },
  {
    "vehicle": "k",
    "openscad_code": "// Realistic 3D-printable letter 'k' – medium complexity\n// Overall height ≈ 70 mm, thickness 6 mm, printable without support\n\nmodule vertical_stem() {\n    // Main straight leg of the k\n    translate([-3, 0, 0])\n        cube([6, 6, 70], center = true);\n}\n\nmodule upper_arm() {\n    // Upper diagonal arm, 45° upward, rounded front\n    translate([0, 0, 20])\n        rotate([0, 0, -45])\n            cube([4, 6, 50], center = true);\n    // Rounded tip\n    translate([17, 0, 42])\n        rotate([0, 90, 0])\n            cylinder(h = 4, r = 3, $fn = 12, center = true);\n}\n\nmodule lower_arm() {\n    // Lower diagonal arm, 45° downward, rounded front\n    translate([0, 0, -20])\n        rotate([0, 0, -45])\n            cube([4, 6, 50], center = true);\n    // Rounded tip\n    translate([17, 0, -42])\n        rotate([0, 90, 0])\n            cylinder(h = 4, r = 3, $fn = 12, center = true);\n}\n\nmodule bridging_joint() {\n    // Small cube bridging the two arms at their intersection\n    translate([0, 0, 0])\n        cube([6, 6, 6], center = true);\n}\n\nmodule base_plate() {\n    // Optional base for stability, 2 mm high\n    translate([0, 0, -36])\n        cube([26, 10, 2], center = true);\n}\n\n// Assemble the letter\nunion() {\n    vertical_stem();\n    upper_arm();\n    lower_arm();\n    bridging_joint();\n    base_plate();\n}\n\n// Center the whole model on the build plate\ntranslate([0, 0, 35])\n    children();",
    "renders": true
  },
  {
    "vehicle": "lt",
    "openscad_code": "// Realistic-style LED light (LT) bulb with medium complexity\n// Overall height ≈ 85 mm, max diameter ≈ 60 mm – fits most FDM printers\n\n$fn = 50;                // Smooth curves for printing\nwall = 1.2;              // 3-perimeter wall at 0.4 mm nozzle\nscrew_d = 27;            // E27 standard metal thread diameter\nglass_d = 60;            // Maximum glass bulb diameter\nglass_h = 55;            // Height of the glass envelope\npin_d = 2;               // Electrical pins for LED substrate\npin_cnt = 2;             // Two power pins\npin_h = 8;               // Pin protrusion length\n\nmodule e27_thread() {\n    // Simplified but printable screw thread – use 45° overhang safe ribs\n    difference() {\n        cylinder(d = screw_d + wall*2, h = 15, center = false);\n        for(i = [0:30:359])\n            rotate([0, 0, i])\n                translate([screw_d/2 + 0.2, 0, 0])\n                    cube([wall*2, 2, 15], center = true);\n    }\n    // Smooth contact ring on bottom\n    translate([0, 0, -1])\n        cylinder(d = 10, h = 2, center = false);\n}\n\nmodule glass_bulb() {\n    // Hollow glass envelope – printed as two shells for transparency effect\n    difference() {\n        // Outer shell\n        sphere(d = glass_d);\n        // Inner cavity (leave 1.2 mm walls everywhere)\n        translate([0, 0, 5])\n            sphere(d = glass_d - wall*2);\n        // Cut bottom flat\n        translate([0, 0, -glass_d/2])\n            cube([glass_d*2, glass_d*2, glass_d], center = true);\n    }\n}\n\nmodule led_substrate() {\n    // Flat disc carrying LEDs – sits 5 mm above screw base\n    color(\"white\")\n    difference() {\n        cylinder(d = glass_d - 10, h = 1.5, center = false);\n        // Ventilation & wiring holes\n        for(a = [0:120:359])\n            rotate([0, 0, a])\n                translate([glass_d/2 - 12, 0, -1])\n                    cylinder(d = 4, h = 3.5, center = false);\n    }\n    // Dummy LED chips\n    for(a = [0:30:359])\n        rotate([0, 0, a])\n            translate([glass_d/2 - 15, 0, 1.5])\n                color(\"yellow\")\n                    cube([3, 2, 0.8], center = true);\n}\n\nmodule power_pins() {\n    // Two brass pins at bottom center of screw\n    for(i = [-1, 1])\n        translate([i * 4, 0, -pin_h])\n            cylinder(d = pin_d, h = pin_h + 1, center = false);\n}\n\n// Main assembly\nunion() {\n    // Screw base\n    color(\"darkgray\")\n    e27_thread();\n\n    // Glass bulb on top\n    translate([0, 0, 15])\n        glass_bulb();\n\n    // LED substrate inside glass\n    translate([0, 0, 15 + 5])\n        led_substrate();\n\n    // Power pins protruding from bottom\n    power_pins();\n}",
    "renders": true
  },
  {
    "vehicle": "boat",
    "openscad_code": "// Realistic 3D-printable boat (medium complexity) – ~90 mm long\n// Hull, deck, superstructure, railings, basic propeller\n\n$fn = 36;                       // Smooth curves\n\n// Overall dimensions\nboat_length = 90;\nboat_width  = 35;\nboat_height = 25;\nwall_t      = 2;               // Wall thickness for printability\n\n// Main hull with simple displacement\nmodule hull() {\n    difference() {\n        // Outer hull\n        hull_outer();\n        // Inner cavity\n        translate([0, 0, wall_t]) scale([0.8, 0.8, 0.7]) hull_outer();\n    }\n}\n\n// Single reusable hull outer shape\nmodule hull_outer() {\n    scale([1, 0.6, 0.4]) hull_profile();\n}\n\n// Profile as 2D shape extruded\nmodule hull_profile() {\n    linear_extrude(height = boat_width, center = true) {\n        polygon(points=[\n            [0, 0],\n            [boat_length*0.1, -boat_height*0.3],\n            [boat_length*0.9, -boat_height*0.3],\n            [boat_length, 0],\n            [boat_length*0.9, boat_height*0.4],\n            [boat_length*0.1, boat_height*0.4],\n            [0, 0]\n        ]);\n    }\n}\n\n// Deck plate on top of hull\nmodule deck() {\n    translate([0, 0, boat_height*0.4 + 0.1])  // Slight offset for union\n        cube([boat_length, boat_width, wall_t], center = true);\n}\n\n// Cabin (bridge) toward rear\nmodule cabin() {\n    cabin_l = boat_length*0.30;\n    cabin_w = boat_width*0.55;\n    cabin_h = boat_height*0.35;\n\n    translate([boat_length*0.25, 0, boat_height*0.4 + wall_t])\n        cube([cabin_l, cabin_w, cabin_h], center = true);\n}\n\n// Windows on cabin sides\nmodule windows() {\n    win_w = 6;\n    win_h = 4;\n    win_d = wall_t + 0.5;\n    for (y = [-boat_width*0.25, boat_width*0.25]) {\n        translate([boat_length*0.25, y, boat_height*0.5 + 2])\n            rotate([0, 90, 0])\n                cube([win_w, win_h, win_d], center = true);\n    }\n}\n\n// Simple railings around deck perimeter\nmodule railings() {\n    post_h = 6;\n    post_r = 1.2;\n    spacing = 8;\n    num_posts = floor(boat_length / spacing);\n\n    for (i = [0 : num_posts-1]) {\n        x = i*spacing - boat_length/2 + spacing/2;\n        // Port side\n        translate([x, boat_width/2 - wall_t, boat_height*0.4 + wall_t])\n            cylinder(h = post_h, r = post_r, $fn = 12);\n        // Starboard side\n        translate([x, -boat_width/2 + wall_t, boat_height*0.4 + wall_t])\n            cylinder(h = post_h, r = post_r, $fn = 12);\n    }\n\n    // Top rail tubes\n    rail_y = boat_width/2 - wall_t;\n    translate([0,  rail_y, boat_height*0.4 + wall_t + post_h])\n        rotate([0, 90, 0])\n            cylinder(h = boat_length, r = post_r, $fn = 12);\n    translate([0, -rail_y, boat_height*0.4 + wall_t + post_h])\n        rotate([0, 90, 0])\n            cylinder(h = boat_length, r = post_r, $fn = 12);\n}\n\n// Basic propeller at stern\nmodule propeller() {\n    prop_d = 12;\n    prop_t = 2;\n    hub_r = 3;\n\n    translate([-boat_length/2 - prop_t/2, 0, -boat_height*0.2])\n        difference() {\n            // Hub\n            rotate([0, 90, 0])\n                cylinder(h = prop_t*2, r = hub_r, center = true);\n\n            // Three blades\n            for (a = [0 : 120 : 240]) {\n                rotate([0, 90, a])\n                    translate([hub_r, 0, 0])\n                        cube([prop_d/2, prop_t*0.8, 1], center = true);\n            }\n        }\n}\n\n// Combine all parts\nunion() {\n    hull();\n    deck();\n    cabin();\n    windows();\n    railings();\n    propeller();\n}",
    "renders": true
  },
  {
    "vehicle": "yacht",
    "openscad_code": "// Yacht model - medium complexity, realistic style\n// Overall length ~80mm, printable without supports\n\n$fn = 32;\n\n// Main parameters\nhull_length = 80;\nhull_width = 20;\nhull_height = 12;\ndeck_height = 8;\nmast_height = 60;\nboom_length = 35;\n\n// Hull shape module\nmodule hull() {\n    difference() {\n        // Main hull body\n        hull_shape();\n        \n        // Hollow out interior\n        translate([5, 0, -2])\n            scale([0.85, 0.85, 0.9])\n            hull_shape();\n    }\n}\n\n// Basic hull form\nmodule hull_shape() {\n    intersection() {\n        // Tapered hull\n        hull_taper();\n        \n        // Rounded bottom\n        translate([0, 0, -hull_height/2])\n            scale([1, 0.8, 0.5])\n            sphere(d=hull_width);\n    }\n}\n\n// Tapered hull body\nmodule hull_taper() {\n    hull_points = [\n        [-hull_length/2, -hull_width/2, 0],\n        [hull_length/2, -hull_width/4, 0],\n        [hull_length/2, hull_width/4, 0],\n        [-hull_length/2, hull_width/2, 0],\n        [-hull_length/2, -hull_width/2, hull_height],\n        [hull_length/2, -hull_width/3, hull_height],\n        [hull_length/2, hull_width/3, hull_height],\n        [-hull_length/2, hull_width/2, hull_height]\n    ];\n    \n    polyhedron(\n        points = hull_points,\n        faces = [\n            [0,1,2,3], [4,5,6,7],\n            [0,4,5,1], [1,5,6,2], [2,6,7,3], [3,7,4,0]\n        ]\n    );\n}\n\n// Deck structure\nmodule deck() {\n    translate([0, 0, deck_height])\n        difference() {\n            // Main deck\n            translate([-hull_length/2+5, 0, 0])\n                cube([hull_length-10, hull_width-2, 1]);\n            \n            // Cockpit opening\n            translate([-10, -6, -1])\n                cube([20, 12, 3]);\n        }\n}\n\n// Cabin structure\nmodule cabin() {\n    translate([-5, 0, deck_height+1])\n        difference() {\n            // Main cabin\n            translate([0, 0, 0])\n                cube([15, hull_width-4, 8]);\n            \n            // Cabin roof curve\n            translate([0, 0, 7])\n                scale([1, 0.9, 0.3])\n                sphere(d=15);\n            \n            // Windows\n            for(i = [-1, 1]) {\n                translate([5, i*4, 4])\n                    rotate([0, 90, 0])\n                    cylinder(h=1, d=3);\n                translate([10, i*4, 4])\n                    rotate([0, 90, 0])\n                    cylinder(h=1, d=3);\n            }\n        }\n}\n\n// Mast and rigging\nmodule mast() {\n    // Main mast\n    translate([10, 0, deck_height])\n        cylinder(h=mast_height, d=2);\n    \n    // Boom\n    translate([10, 0, deck_height+15])\n        rotate([90, 0, 0])\n        cylinder(h=boom_length, d=1.5);\n    \n    // Spreaders\n    for(i = [1, -1]) {\n        translate([10, i*2, deck_height+25])\n            rotate([0, 90, i*10])\n            cylinder(h=10, d=1);\n    }\n}\n\n// Sail\nmodule sail() {\n    color(\"white\") {\n        // Main sail\n        translate([10, 0, deck_height+15])\n            rotate([0, 90, 0])\n            linear_extrude(height=0.5)\n                polygon(points=[\n                    [0, 0],\n                    [boom_length-5, 0],\n                    [boom_length-5, -mast_height+20],\n                    [boom_length-15, -mast_height+25],\n                    [0, -mast_height+30]\n                ]);\n        \n        // Jib sail\n        translate([hull_length/2-10, 0, deck_height+5])\n            rotate([0, 90, 0])\n            linear_extrude(height=0.5)\n                polygon(points=[\n                    [0, 0],\n                    [15, 5],\n                    [15, -15],\n                    [0, -10]\n                ]);\n    }\n}\n\n// Keel and rudder\nmodule keel() {\n    // Keel fin\n    translate([0, 0, -hull_height/2])\n        linear_extrude(height=hull_height+5)\n            polygon(points=[\n                [-2, -1],\n                [2, -1],\n                [1, -8],\n                [-1, -8]\n            ]);\n    \n    // Rudder\n    translate([-hull_length/2+3, 0, -hull_height/2+2])\n        rotate([0, 0, 15])\n        linear_extrude(height=5)\n            polygon(points=[\n                [-1, -1],\n                [1, -1],\n                [1, -6],\n                [-1, -6]\n            ]);\n}\n\n// Railings\nmodule railings() {\n    for(side = [-1, 1]) {\n        translate([-hull_length/2+10, side*hull_width/2-1, deck_height+1])\n            for(pos = [0:10:hull_length-20]) {\n                translate([pos, 0, 0])\n                    cylinder(h=3, d=1);\n            }\n        \n        translate([-hull_length/2+10, side*hull_width/2-1, deck_height+2.5])\n            cube([hull_length-20, 1, 0.5]);\n    }\n}\n\n// Assemble the yacht\nunion() {\n    hull();\n    deck();\n    cabin();\n    keel();\n    mast();\n    sail();\n    railings();\n}",
    "renders": true
  },
  {
    "vehicle": "sailboat",
    "openscad_code": "// Realistic 3D-printable sailboat – medium complexity\n// Overall length ~90 mm, width ~30 mm, height ~75 mm\n// Designed for FDM printing: no steep overhangs, 1 mm+ wall thickness\n\n// Hull module with bow flare and transom taper\nmodule hull() {\n    difference() {\n        // Main hull body\n        hull_body();\n\n        // Drain slot (water evacuation when removed from bath)\n        translate([0, 0, -1])\n            cube([20, 6, 4], center = true);\n\n        // Keel slot (for separate keel)\n        translate([0, 0, -5])\n            cube([40, 3, 10], center = true);\n    }\n}\n\nmodule hull_body() {\n    // Loft profile using rounded cubes\n    union() {\n        // Stern block\n        translate([-30, 0, 0])\n            rotate([0, 10, 0])\n                scale([1, 1.2, 1])\n                    rounded_cube([20, 25, 12], 4);\n\n        // Mid section\n        translate([0, 0, 0])\n            rounded_cube([40, 22, 10], 4);\n\n        // Bow\n        translate([30, 0, 0])\n            rotate([0, -15, 0])\n                scale([0.8, 0.6, 0.6])\n                    rounded_cube([20, 20, 8], 4);\n    }\n}\n\n// Helper for rounded cube\nmodule rounded_cube(size, r) {\n    minkowski() {\n        cube(size - [2*r, 2*r, 2*r], center = true);\n        sphere(r);\n    }\n}\n\n// Keel fin for stability and printability (print flat)\nmodule keel() {\n    translate([0, 0, -7])\n        linear_extrude(height = 14, center = true, scale = 0.5)\n            offset(r = 2)\n                square([35, 2], center = true);\n}\n\n// Deck with non-slip texture using small cylinders\nmodule deck() {\n    difference() {\n        translate([0, 0, 5])\n            rounded_cube([60, 25, 2], 3);\n\n        // Cockpit recess\n        translate([0, 0, 6])\n            rounded_cube([35, 18, 3], 2);\n\n        // Mast hole\n        translate([10, 0, 5.5])\n            cylinder(h = 5, d = 5.5, $fn = 16);\n    }\n\n    // Non-slip pattern\n    for (x = [-25:5:25])\n        for (y = [-10:4:10])\n            if (abs(x) < 22 && abs(y) < 8)\n                translate([x, y, 6.5])\n                    cylinder(h = 0.4, d = 1.4, $fn = 8);\n}\n\n// Mast and boom (print separately for strength)\nmodule mast_assembly() {\n    // Mast\n    translate([10, 0, 5])\n        cylinder(h = 65, d = 5, $fn = 16);\n\n    // Boom pivot\n    rotate([0, 90, 0])\n        translate([0, 0, 10])\n            cylinder(h = 18, d = 3, $fn = 12);\n}\n\n// Sail with realistic curvature (loft between profiles)\nmodule sail() {\n    translate([10, 0, 38])\n        rotate([0, -10, 0])\n            linear_extrude(height = 0.8, center = true, scale = 1.0)\n                offset(r = 1)\n                    sail_profile();\n}\n\nmodule sail_profile() {\n    polygon(points = [\n        [0, 0],\n        [0, 40],\n        [25, 38],\n        [28, 25],\n        [26, 10],\n        [20, 2]\n    ]);\n}\n\n// Rudder and tiller\nmodule rudder() {\n    translate([-32, 0, -3])\n        union() {\n            // Blade\n            rotate([0, 20, 0])\n                cube([8, 12, 3], center = true);\n\n            // Tiller arm\n            translate([2, 0, 5])\n                rotate([0, 0, 20])\n                    cube([20, 3, 3], center = true);\n        }\n}\n\n// Assembly\nhull();\nkeel();\ndeck();\nmast_assembly();\nsail();\nrudder();",
    "renders": true
  },
  {
    "vehicle": "speedboat",
    "openscad_code": "// Realistic 3D-printable speedboat, medium complexity\n// Approx. 80 mm long, 35 mm beam, 25 mm tall\n\n$fn = 48;        // smooth curves\nwall = 1.2;      // wall thickness for printing\n\nmodule hull() {\n    difference() {\n        // main hull shell\n        scale([1, 0.6, 0.35])\n            cube([80, 35, 25], center=true);\n\n        // remove top to create cavity\n        translate([0,0,12])\n            scale([0.9, 0.55, 0.4])\n                cube([82, 37, 30], center=true);\n\n        // taper bow\n        translate([40,0,0])\n            rotate([0,0,30])\n                cube([30, 50, 50], center=true);\n        translate([40,0,0])\n            rotate([0,0,-30])\n                cube([30, 50, 50], center=true);\n    }\n}\n\nmodule deck() {\n    translate([0,0,12.5]) {\n        // flat deck plate\n        linear_extrude(height=wall)\n            scale([1, 0.6, 1])\n                projection()\n                    cube([80, 35, 25], center=true);\n\n        // windshield frame\n        translate([-10,0,wall])\n            rotate([30,0,0])\n                difference() {\n                    cube([20, 30, 8], center=true);\n                    translate([0,0,-1])\n                        cube([18, 28, 10], center=true);\n                }\n    }\n}\n\nmodule engine() {\n    translate([-35,0,13]) {\n        // outboard motor housing\n        cylinder(h=12, d1=8, d2=6, center=false);\n        // propeller hub\n        translate([0,0,-4])\n            cylinder(h=4, d=6);\n        // prop blades\n        for(a=[0:120:359])\n            rotate([0,0,a])\n                translate([-3,0,2])\n                    rotate([90,0,0])\n                        scale([1,0.15,0.4])\n                            cylinder(h=6, d=5);\n    }\n}\n\nmodule seating() {\n    // driver seat\n    translate([10,0,13+wall]) {\n        cube([12, 10, 4], center=true);\n        translate([0,0,2])\n            cube([12, 10, 1], center=true);\n    }\n    // passenger seat\n    translate([0,0,13+wall]) {\n        cube([12, 10, 4], center=true);\n        translate([0,0,2])\n            cube([12, 10, 1], center=true);\n    }\n}\n\nmodule rails() {\n    // port rail\n    translate([0, 10.5, 16])\n    for(x=[-30:15:30])\n        translate([x,0,0])\n            rotate([90,0,0])\n                cylinder(h=4, d=2);\n    // starboard rail\n    mirror([0,1,0])\n        translate([0, 10.5, 16])\n        for(x=[-30:15:30])\n            translate([x,0,0])\n                rotate([90,0,0])\n                    cylinder(h=4, d=2);\n}\n\n// assemble the speedboat\nunion() {\n    hull();\n    deck();\n    engine();\n    seating();\n    rails();\n}",
    "renders": true
  },
  {
    "vehicle": "canoe",
    "openscad_code": "// Realistic Canoe - Medium Complexity\n// 3D printable with no overhangs, wall thickness 1.5mm\n\nwall = 1.5;\nlength = 90;\nwidth = 20;\nheight = 10;\n\nmodule canoe_hull() {\n    // Main hull shape - ellipsoid\n    scale([1, 0.4, 0.2]) sphere(d = length);\n    \n    // Cut top off\n    difference() {\n        scale([1, 0.4, 0.2]) sphere(d = length);\n        translate([0, 0, height/2]) cube([length*2, width*2, height*2], center = true);\n    }\n    \n    // Hollow interior\n    difference() {\n        scale([1, 0.4, 0.2]) sphere(d = length - wall*2);\n        translate([0, 0, height/2 - wall]) cube([length*2, width*2, height*2], center = true);\n    }\n}\n\nmodule canoe_ends() {\n    // Bow and stern caps\n    for(x = [-length/2 + 2, length/2 - 2]) {\n        translate([x, 0, 0]) {\n            rotate([0, 90, 0]) cylinder(h = wall*2, d1 = 4, d2 = 0);\n        }\n    }\n}\n\nmodule seats() {\n    // Two seats with support bars\n    for(x = [-length/4, length/4]) {\n        translate([x, 0, height/2 - wall*2]) {\n            // Seat base\n            cube([8, width - 4, wall], center = true);\n            \n            // Seat supports\n            for(y = [-width/4, width/4]) {\n                translate([0, y, -wall]) cylinder(h = wall*2, d = 2);\n            }\n        }\n    }\n}\n\nmodule gunnels() {\n    // Top edge reinforcement\n    difference() {\n        hull_profile();\n        inner_profile();\n    }\n}\n\nmodule hull_profile() {\n    hull_curve();\n}\n\nmodule inner_profile() {\n    translate([0, 0, wall]) hull_curve();\n}\n\nmodule hull_curve() {\n    linear_extrude(height = wall)\n    for(i = [0:5:360]) {\n        hull_point(i);\n    }\n}\n\nmodule hull_point(angle) {\n    r = length/2 * sin(angle);\n    x = r * cos(angle) * 0.8;\n    y = width/2 * sin(angle) * 0.9;\n    translate([x, y, 0]) circle(d = 1);\n}\n\nmodule keel() {\n    // Center ridge\n    translate([0, 0, -height/2 + wall/2]) {\n        cube([length - 10, 2, wall], center = true);\n    }\n}\n\nmodule thwarts() {\n    // Cross braces\n    for(x = [-length/3, 0, length/3]) {\n        translate([x, 0, height/2 - wall]) {\n            rotate([90, 0, 0]) cylinder(h = width - 4, d = 2);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    canoe_hull();\n    color(\"brown\") {\n        canoe_ends();\n        gunnels();\n        keel();\n    }\n    color(\"tan\") {\n        seats();\n        thwarts();\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "kayak",
    "openscad_code": "// Realistic 3D-printable Kayak – medium complexity\n// Overall length ≈ 95 mm\n\n$fn = 36;                 // smooth curves\n\n// ------------------ HULL ------------------\nmodule hull() {\n    difference() {\n        // outer hull shell\n        hull_shell();\n        \n        // hollow interior\n        translate([0,0,-1])           // extra 1 mm down for clean bottom\n        scale([0.82,0.82,0.9])\n        hull_shell();\n    }\n}\n\nmodule hull_shell() {\n    // main body\n    linear_extrude(height = 30, twist = -10, scale = [0.4,0.7])\n        hull_shape_2D();\n    \n    // tapered stern\n    translate([-45,0,15])\n    rotate([0,90,0])\n    cylinder(h = 25, r1 = 12, r2 = 2);\n    \n    // tapered bow\n    translate([45,0,15])\n    rotate([0,90,0])\n    cylinder(h = 25, r1 = 12, r2 = 2);\n}\n\nmodule hull_shape_2D() {\n    offset(r = 3)\n    offset(r = -3)\n    polygon([\n        [-45,0], [-35,10], [-20,12], [0,13], [20,12], [35,10], [45,0]\n    ]);\n}\n\n// ------------------ COCKPIT RIM ------------------\nmodule cockpit() {\n    difference() {\n        // outer rim (3 mm thick)\n        translate([0,0,17])\n        cylinder(h = 3, r1 = 18, r2 = 20);\n        \n        // inner hole\n        translate([0,0,16.9])\n        cylinder(h = 3.2, r = 15);\n    }\n}\n\n// ------------------ SEAT ------------------\nmodule seat() {\n    translate([0,0,10.5]) {\n        // seat pan\n        translate([0,0,0])\n        scale([1,0.6,0.1])\n        sphere(d = 26);\n        \n        // backrest\n        translate([0,-7.5,2])\n        rotate([-15,0,0])\n        scale([1,0.3,1])\n        cube([20,5,8], center = true);\n    }\n}\n\n// ------------------ DECK LINES ------------------\nmodule deck_lines() {\n    for (y = [-7, 7]) {\n        translate([0,y,20])\n        rotate([90,0,0])\n        cylinder(h = 90, r = 0.6, $fn = 8);\n    }\n}\n\n// ------------------ FOOT BRACE CROSS-BARS ------------------\nmodule foot_braces() {\n    for (x = [35, 40]) {\n        translate([x,0,7])\n        rotate([0,90,0])\n        cylinder(h = 20, r = 1);\n    }\n}\n\n// ------------------ ASSEMBLY ------------------\nunion() {\n    hull();\n    cockpit();\n    seat();\n    deck_lines();\n    foot_braces();\n}",
    "renders": true
  },
  {
    "vehicle": "raft",
    "openscad_code": "// Raft - Realistic style, medium complexity\n// Overall dimensions: 90mm long x 50mm wide x 7mm thick\n\n// Raft parameters\nraft_length = 90;\nraft_width = 50;\nlog_radius = 3;\nlog_spacing = log_radius * 2 + 1;\nlog_count = floor(raft_width / log_spacing);\ndeck_thickness = 2;\npontoon_height = 5;\n\n// Main raft module\nmodule raft() {\n    // Bottom pontoons (logs)\n    difference() {\n        // Main log pontoons\n        for (i = [0:log_count-1]) {\n            translate([0, -raft_width/2 + log_spacing/2 + i*log_spacing, pontoon_height/2]) {\n                cylinder(h=raft_length, r=log_radius, center=true, $fn=20);\n            }\n        }\n        \n        // Carve out bottom for flat printing surface\n        translate([0, 0, -0.5]) {\n            cube([raft_length + 2, raft_width + 2, 1], center=true);\n        }\n    }\n    \n    // Deck planks\n    plank_width = 3;\n    plank_gap = 1;\n    plank_count = floor(raft_width / (plank_width + plank_gap));\n    \n    for (i = [0:plank_count-1]) {\n        y_pos = -raft_width/2 + plank_width/2 + i*(plank_width + plank_gap);\n        translate([0, y_pos, pontoon_height + deck_thickness/2]) {\n            cube([raft_length - 4, plank_width, deck_thickness], center=true);\n        }\n    }\n    \n    // Cross supports between logs\n    support_width = 2;\n    support_spacing = 15;\n    support_count = floor(raft_length / support_spacing) - 1;\n    \n    for (i = [1:support_count]) {\n        x_pos = -raft_length/2 + i*support_spacing;\n        translate([x_pos, 0, pontoon_height/2]) {\n            cube([support_width, raft_width, pontoon_height], center=true);\n        }\n    }\n    \n    // Front and back bumpers\n    bumper_height = 3;\n    bumper_width = 4;\n    \n    // Front bumper\n    translate([raft_length/2 - bumper_width/2, 0, pontoon_height/2]) {\n        cube([bumper_width, raft_width, pontoon_height], center=true);\n    }\n    \n    // Back bumper\n    translate([-raft_length/2 + bumper_width/2, 0, pontoon_height/2]) {\n        cube([bumper_width, raft_width, pontoon_height], center=true);\n    }\n    \n    // Mooring rings\n    ring_radius = 2;\n    ring_thickness = 1.5;\n    \n    // Front left ring\n    translate([raft_length/2 - 5, raft_width/2 - 3, pontoon_height + deck_thickness]) {\n        rotate([90, 0, 0]) {\n            difference() {\n                cylinder(h=ring_thickness, r=ring_radius, center=true, $fn=16);\n                cylinder(h=ring_thickness + 0.1, r=ring_radius - 1, center=true, $fn=16);\n            }\n        }\n    }\n    \n    // Front right ring\n    translate([raft_length/2 - 5, -raft_width/2 + 3, pontoon_height + deck_thickness]) {\n        rotate([90, 0, 0]) {\n            difference() {\n                cylinder(h=ring_thickness, r=ring_radius, center=true, $fn=16);\n                cylinder(h=ring_thickness + 0.1, r=ring_radius - 1, center=true, $fn=16);\n            }\n        }\n    }\n    \n    // Tie-down cleats\n    cleat_width = 3;\n    cleat_length = 6;\n    \n    // Left cleat\n    translate([0, raft_width/2 - cleat_width/2 - 2, pontoon_height + deck_thickness + 1]) {\n        cube([cleat_length, cleat_width, 2], center=true);\n    }\n    \n    // Right cleat\n    translate([0, -raft_width/2 + cleat_width/2 + 2, pontoon_height + deck_thickness + 1]) {\n        cube([cleat_length, cleat_width, 2], center=true);\n    }\n}\n\n// Generate the raft centered at origin\nraft();",
    "renders": true
  },
  {
    "vehicle": "dinghy",
    "openscad_code": "// Realistic medium-complexity dinghy for 3D printing\n// Overall length ~80 mm, safe for FDM printing\n\n// Hull shell thickness\nwall = 1.5;\n\nmodule rounded_box(l, w, h, r) {\n    // Helper: box with rounded edges\n    hull() {\n        for (dx = [-l/2+r, l/2-r], dy = [-w/2+r, w/2-r])\n            translate([dx, dy, 0])\n                cylinder(r = r, h = h, $fn = 16);\n    }\n}\n\nmodule hull() {\n    // Main hull body\n    difference() {\n        // Outer hull\n        hull() {\n            for (x = [-35, 35], y = [-20, 20])\n                translate([x, y, 0])\n                    sphere(d = 30, $fn = 32);\n            for (x = [-40, 40], y = [-20, 20])\n                translate([x, y, -15])\n                    sphere(d = 25, $fn = 32);\n        }\n        \n        // Inner cavity for buoyancy\n        translate([0, 0, -17])\n            scale([0.85, 0.85, 1])\n            hull() {\n                for (x = [-35, 35], y = [-20, 20])\n                    translate([x, y, 0])\n                        sphere(d = 30, $fn = 32);\n                for (x = [-40, 40], y = [-20, 20])\n                    translate([x, y, -15])\n                        sphere(d = 25, $fn = 32);\n            }\n    }\n    \n    // Flat deck rim\n    difference() {\n        translate([0, 0, 0])\n            cube([80, 40, wall], center = true);\n        translate([0, 0, -1])\n            cube([75, 35, wall+2], center = true);\n    }\n}\n\nmodule bench() {\n    // Seat / thwart\n    translate([0, 0, 2])\n        rounded_box(35, 8, 3, 2);\n}\n\nmodule oarlock() {\n    // Simple oarlock post\n    union() {\n        cylinder(h = 8, r1 = 2.5, r2 = 2.5, $fn = 16);\n        translate([0, 0, 8])\n            sphere(d = 5, $fn = 16);\n    }\n}\n\nmodule oarlocks() {\n    // Pair of oarlocks\n    for (y = [-15, 15])\n        translate([20, y, 5])\n            oarlock();\n}\n\nmodule keel_stripe() {\n    // Thin keel reinforcement\n    translate([0, 0, -15])\n        cube([85, 3, 1.5], center = true);\n}\n\nmodule bow_eye() {\n    // Towing eye at bow\n    translate([-40, 0, 0])\n    rotate([90, 0, 0])\n        difference() {\n            cylinder(h = 8, r1 = 3, r2 = 3, $fn = 16);\n            translate([0, 0, -1])\n                cylinder(h = 10, r1 = 1.5, r2 = 1.5, $fn = 16);\n        }\n}\n\n// Assembly\nunion() {\n    hull();\n    bench();\n    oarlocks();\n    keel_stripe();\n    bow_eye();\n}",
    "renders": true
  },
  {
    "vehicle": "ferry",
    "openscad_code": "// Realistic style ferry, medium complexity\n// Designed for 3D printing (no overhangs, 2mm walls)\n\n// Overall dimensions control\nferry_length = 90;\nferry_width = 25;\nferry_height = 12;\n\n// Hull thickness for printing\nwall_thickness = 2;\n\nmodule ferry() {\n    // Main hull\n    union() {\n        // Lower hull - pointed bow\n        hull() {\n            // Stern\n            translate([0, 0, 0])\n                cube([ferry_length*0.3, ferry_width, ferry_height*0.6], center=true);\n            \n            // Bow\n            translate([ferry_length*0.4, 0, 0])\n                rotate([0, 0, 90])\n                    cylinder(h=ferry_width, r1=ferry_height*0.3, r2=0.1, center=true);\n        }\n        \n        // Upper deck\n        translate([0, 0, ferry_height*0.4])\n            cube([ferry_length*0.85, ferry_width*0.9, ferry_height*0.4], center=true);\n        \n        // Bridge structure\n        translate([-ferry_length*0.2, 0, ferry_height*0.7])\n            cube([ferry_length*0.3, ferry_width*0.7, ferry_height*0.3], center=true);\n        \n        // Smoke stack\n        translate([-ferry_length*0.15, 0, ferry_height])\n            cylinder(h=ferry_height*0.4, r1=ferry_width*0.08, r2=ferry_width*0.1, center=true);\n    }\n    \n    // Cut out interior for hollow printing\n    difference() {\n        // Main hull body\n        union() {\n            hull() {\n                translate([0, 0, 0])\n                    cube([ferry_length*0.3, ferry_width-wall_thickness, ferry_height*0.6-wall_thickness], center=true);\n                translate([ferry_length*0.4, 0, 0])\n                    rotate([0, 0, 90])\n                        cylinder(h=ferry_width-wall_thickness, r1=ferry_height*0.3-wall_thickness, r2=0.1, center=true);\n            }\n            translate([0, 0, ferry_height*0.4])\n                cube([ferry_length*0.85-wall_thickness, ferry_width*0.9-wall_thickness, ferry_height*0.4], center=true);\n        }\n        \n        // Remove interior\n        translate([0, 0, -wall_thickness])\n            cube([ferry_length*1.1, ferry_width*1.1, ferry_height*2], center=true);\n    }\n    \n    // Lifeboats on sides\n    module lifeboat() {\n        rotate([90, 0, 0])\n            cylinder(h=ferry_length*0.15, r1=ferry_width*0.1, r2=ferry_width*0.1);\n    }\n    \n    for (i = [-1, 1]) {\n        translate([ferry_length*0.1, i*ferry_width*0.45, ferry_height*0.5])\n            lifeboat();\n        translate([-ferry_length*0.1, i*ferry_width*0.45, ferry_height*0.5])\n            lifeboat();\n    }\n    \n    // Windows on bridge\n    for (x = [-ferry_length*0.3, -ferry_length*0.2, -ferry_length*0.1]) {\n        translate([x, ferry_width*0.3, ferry_height*0.8])\n            cube([ferry_length*0.08, wall_thickness, ferry_height*0.1], center=true);\n        translate([x, -ferry_width*0.3, ferry_height*0.8])\n            cube([ferry_length*0.08, wall_thickness, ferry_height*0.1], center=true);\n    }\n    \n    // Railings\n    module railing_post() {\n        cylinder(h=ferry_height*0.1, r=wall_thickness/2, center=true);\n    }\n    \n    for (x = [-ferry_length*0.4:ferry_length*0.1:ferry_length*0.4]) {\n        translate([x, ferry_width*0.45, ferry_height*0.55])\n            railing_post();\n        translate([x, -ferry_width*0.45, ferry_height*0.55])\n            railing_post();\n    }\n    \n    // Vehicle deck markings\n    for (x = [-ferry_length*0.3:ferry_length*0.15:ferry_length*0.2]) {\n        translate([x, 0, ferry_height*0.41])\n            cube([ferry_length*0.1, ferry_width*0.6, 0.5], center=true);\n    }\n}\n\n// Render the ferry\nferry();",
    "renders": true
  },
  {
    "vehicle": "submarine",
    "openscad_code": "// Realistic Medium-Complexity Submarine\n// Overall length ≈ 80 mm\n\n// Parameters\nhull_d = 22;\nhull_L = 70;\nsail_L = 18;\nsail_W = 6;\nsail_H = 8;\nprop_d = 12;\nprop_h = 8;\nrudder_T = 2;\nrudder_H = 10;\nhull_th = 1.5;\nwindow_d = 4;\n\n// Main Hull\nmodule hull() {\n    difference() {\n        // Outer ellipsoid\n        scale([1, 1, 0.55])\n            sphere(d = hull_d, $fn = 60);\n        // Hollow interior\n        scale([1, 1, 0.55])\n            sphere(d = hull_d - 2*hull_th, $fn = 60);\n        // Flat nose cap\n        translate([0, 0, hull_d/2*0.55])\n            cube([hull_d, hull_d, hull_d], center = true);\n    }\n}\n\n// Sail/Conning tower\nmodule sail() {\n    union() {\n        difference() {\n            // Main block\n            translate([0, 0, sail_H/2])\n                cube([sail_L, sail_W, sail_H], center = true);\n            // Rounded top\n            translate([0, 0, sail_H])\n                scale([1, 0.8, 1])\n                    sphere(d = sail_W, $fn = 30);\n            // Hollow interior\n            translate([0, 0, sail_H/2])\n                cube([sail_L - 2*hull_th, sail_W - 2*hull_th, sail_H], center = true);\n        }\n        // Periscope\n        translate([sail_L/2 - 2, 0, sail_H + 2])\n            cylinder(h = 6, d = 2, $fn = 12);\n    }\n}\n\n// Propeller shroud\nmodule prop_shroud() {\n    difference() {\n        cylinder(h = prop_h, d = prop_d, $fn = 60);\n        cylinder(h = prop_h + 0.5, d = prop_d - 2*hull_th, $fn = 60);\n    }\n}\n\n// Propeller blades\nmodule propeller() {\n    for (i = [0:60:359])\n        rotate([0, 0, i])\n            translate([0, prop_d/2 - 1.5, prop_h/2])\n                rotate([90, 0, 0])\n                    scale([1.5, 0.8, 1])\n                        cylinder(h = 8, d1 = 4, d2 = 1, $fn = 2);\n}\n\n// Bow planes\nmodule bow_planes() {\n    for (s = [-1, 1]) {\n        mirror([0, s, 0])\n            translate([hull_L/2 - 20, 0, 0])\n                rotate([0, 0, 10])\n                    cube([12, 1, 8]);\n    }\n}\n\n// Stern planes\nmodule stern_planes() {\n    for (s = [-1, 1]) {\n        mirror([0, s, 0])\n            translate([-hull_L/2 + 8, 0, 0])\n                rotate([0, 0, 15])\n                    cube([15, 1, 6]);\n    }\n}\n\n// Rudder\nmodule rudder() {\n    translate([-hull_L/2 + 5, 0, 0])\n        rotate([0, 90, 0])\n            linear_extrude(height = rudder_T, convexity = 10)\n                polygon([[0, 0], [-rudder_H, 0], [-rudder_H, rudder_H/2]]);\n}\n\n// Window row\nmodule windows() {\n    for (x = [30:-10:-30])\n        translate([x, 0, hull_d/2*0.55 - 2])\n            sphere(d = window_d, $fn = 16);\n}\n\n// Assembly\nhull();\ntranslate([0, 0, hull_d/2*0.55 - 0.5])\n    sail();\ntranslate([-hull_L/2 + 2, 0, 0])\n    union() {\n        prop_shroud();\n        propeller();\n    }\nbow_planes();\nstern_planes();\nrudder();\nwindows();",
    "renders": true
  },
  {
    "vehicle": "catamaran",
    "openscad_code": "// Realistic 3D-printable catamaran – medium complexity\n// Overall length ≈ 80 mm, beam ≈ 40 mm, printable without supports\n\n// Wall thickness everywhere = 1.2 mm (3 perimeters on 0.4 mm nozzle)\nwall = 1.2;\n\nmodule hull_half(steps = 12) {\n    // One demi-hull drawn with stacked, scaled cubes\n    // Keeps all slopes ≤ 45° for support-free printing\n    for (i = [0:steps-1]) {\n        h = 6;                    // constant vertical slice height\n        y = i * 2.5;              // forward distance along hull\n        w_max = 18 - 1.5 * y;     // taper toward bow\n        w = max(w_max, 4);        // minimum width at bow\n        scale_x = 1 - 0.7 * y / (steps * 2.5); // taper in plan view\n        translate([0, y, i * h])\n            scale([scale_x, 1, 1])\n                cube([w, 2.5, h], center = true);\n    }\n}\n\nmodule full_hull(offset_x) {\n    // Assemble both halves with proper spacing\n    translate([offset_x, 0, 0]) {\n        hull_half();\n        mirror([1, 0, 0]) hull_half();\n    }\n}\n\nmodule trampoline() {\n    // Thin deck mesh between hulls\n    color(\"DarkSlateGray\")\n    translate([0, 15, 12])\n        cube([32, 35, wall], center = true);\n}\n\nmodule mast() {\n    // Simple 2-part mast stepped on trampoline\n    translate([0, 0, 12]) {\n        // Mast tube\n        cylinder(h = 35, d = 3, $fn = 16);\n        // Mast base reinforcement disk\n        cylinder(h = wall, d = 6, $fn = 16);\n    }\n}\n\nmodule crossbeam(pos_y) {\n    // Structural beam between hulls, printable as-is\n    translate([0, pos_y, 8])\n        cube([34, 4, 4], center = true);\n}\n\nmodule rudder() {\n    // Pivoting rudder assembly at transom\n    translate([0, 30, 2]) {\n        difference() {\n            cube([6, 1, 10]);                // stock\n            translate([3, -0.5, 5])\n                rotate([0, 90, 0])\n                    cylinder(h = 2, d = 1.5, $fn = 12); // pivot hole\n        }\n        translate([3, 0, 5])\n            cube([2, 0.8, 7]);               // blade\n    }\n}\n\n// Build the complete catamaran\nunion() {\n    full_hull(17);  // starboard hull\n    full_hull(-17); // port hull\n    \n    trampoline();\n    \n    crossbeam(5);\n    crossbeam(25);\n    \n    mast();\n    \n    // Twin rudders\n    translate([8, 0, 0]) rudder();\n    translate([-8, 0, 0]) mirror([1, 0, 0]) rudder();\n}",
    "renders": true
  },
  {
    "vehicle": "trimaran",
    "openscad_code": "// Trimaran – 3D-printable, realistic style, medium complexity\n// Overall size ≈ 90 mm long × 60 mm wide × 25 mm high\n\n$fn = 36;              // Smooth curves for printing\nwall = 1.2;            // Wall thickness for FDM/SLA printing\n\nmodule hull(length, width, height) {\n    // Basic V-shaped hull with flat bottom\n    difference() {\n        hull() {\n            translate([length/2, 0, height/2]) cube([length, width, height], center=true);\n            translate([length*0.9, 0, -height/2-0.1]) cube([length*0.2, width*0.8, height+0.2], center=true);\n        }\n        // Hollow it out\n        translate([length/2+wall, 0, height/2-wall]) cube([length-wall*2, width-wall*2, height-wall*2], center=true);\n    }\n}\n\nmodule crossbeam(len, dia) {\n    // Cylindrical crossbeam\n    rotate([0, 90, 0]) cylinder(h = len, d = dia, center=true);\n}\n\nmodule mast(base, top, height) {\n    // Tapered mast\n    cylinder(h = height, d1 = base, d2 = top);\n}\n\nmodule sail(w, h, curve) {\n    // Simple curved sail (no overhangs)\n    linear_extrude(height = wall, convexity = 10) {\n        polygon(points=[\n            [0, 0],\n            [w, 0],\n            [w*0.9, h],\n            [0, h-curve]\n        ]);\n    }\n}\n\nmodule ama() {\n    // Smaller outrigger hull (ama)\n    scale([0.7, 0.5, 0.8]) hull(30, 12, 10);\n}\n\nmodule trimaran() {\n    // Main central hull\n    translate([0, 0, 5]) hull(90, 18, 14);\n\n    // Two cross-beams\n    translate([0, 0, 10]) crossbeam(60, 6);\n    translate([-20, 0, 10]) crossbeam(60, 6);\n\n    // Two amas (outriggers)\n    for(side = [-1, 1]) {\n        translate([0, side*30, 5]) ama();\n    }\n\n    // Mast stepped on main hull\n    translate([20, 0, 14]) mast(base=4, top=2, height=35);\n\n    // Main sail\n    translate([20, 0, 14+35]) rotate([90, 0, 0]) sail(25, 40, 10);\n\n    // Jib sail\n    translate([20, 0, 14+30]) rotate([90, 0, -30]) sail(18, 30, 8);\n}\n\ntrimaran();",
    "renders": true
  },
  {
    "vehicle": "ketch",
    "openscad_code": "// Ketch sailboat model - medium complexity 3D printable version\n// Overall length ~80mm, width ~25mm, height ~60mm\n\n// Hull parameters\nhull_length = 80;\nhull_width = 20;\nhull_height = 12;\nbow_height = 18;\n\n// Mast parameters\nmain_mast_height = 50;\nmizzen_mast_height = 35;\nmast_diameter = 2;\n\n// Sail parameters\nmain_sail_width = 30;\nmain_sail_height = 40;\nmizzen_sail_width = 20;\nmizzen_sail_height = 25;\nboom_diameter = 1.5;\n\n// Deck details\ncabin_width = 15;\ncabin_length = 20;\ncabin_height = 8;\nhatch_width = 8;\nhatch_length = 12;\n\n// Rudder and keel\nkeel_height = 8;\nkeel_length = 30;\nrudder_height = 10;\nrudder_width = 3;\n\nmodule hull() {\n    // Main hull - elongated rounded shape\n    hull_shape();\n    \n    // Bow - tapered front\n    translate([hull_length/2 - 5, 0, 0])\n        rotate([0, -30, 0])\n        cube([15, hull_width, bow_height], center=true);\n    \n    // Stern - flat back\n    translate([-hull_length/2 + 2, 0, 0])\n        cube([4, hull_width * 0.9, hull_height], center=true);\n}\n\nmodule hull_shape() {\n    // Create hull with rounded bottom using multiple cylinders\n    union() {\n        // Main body\n        hull_section(0, hull_length - 10);\n        \n        // Bow transition\n        translate([hull_length/2 - 5, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h=10, r1=hull_width/2, r2=hull_width/3, center=true);\n        \n        // Stern transition\n        translate([-hull_length/2 + 5, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h=10, r1=hull_width/2, r2=hull_width/2.2, center=true);\n    }\n}\n\nmodule hull_section(offset, length) {\n    translate([offset, 0, 0])\n        scale([1, 1, 0.6])\n        cylinder(h=length, r1=hull_width/2, r2=hull_width/2, center=true);\n}\n\nmodule deck() {\n    // Main deck surface\n    translate([0, 0, hull_height/2 + 1])\n        cube([hull_length - 6, hull_width - 4, 2], center=true);\n    \n    // Cabin\n    translate([-5, 0, hull_height/2 + 2])\n        cube([cabin_length, cabin_width, cabin_height], center=true);\n    \n    // Cabin roof\n    translate([-5, 0, hull_height/2 + 2 + cabin_height/2])\n        cube([cabin_length + 2, cabin_width + 2, 2], center=true);\n    \n    // Hatch\n    translate([10, 0, hull_height/2 + 2.5])\n        cube([hatch_length, hatch_width, 1], center=true);\n}\n\nmodule keel() {\n    // Main keel\n    translate([0, 0, -keel_height/2 - hull_height/2])\n        cube([keel_length, 3, keel_height], center=true);\n    \n    // Rudder\n    translate([-hull_length/2 + 5, 0, -rudder_height/2 - hull_height/2])\n        cube([rudder_width, 2, rudder_height], center=true);\n}\n\nmodule mast(x_pos, height, sail_width, sail_height) {\n    // Mast\n    translate([x_pos, 0, height/2 + hull_height/2])\n        cylinder(h=height, r=mast_diameter/2, center=true);\n    \n    // Boom\n    translate([x_pos + sail_width/2, 0, hull_height/2 + 2])\n        rotate([0, 90, 0])\n        cylinder(h=sail_width, r=boom_diameter/2, center=true);\n    \n    // Sail\n    translate([x_pos + sail_width/2, 0, hull_height/2 + 2 + sail_height/2])\n        cube([sail_width, 1, sail_height], center=true);\n}\n\n// Assembly\nunion() {\n    // Hull and deck\n    hull();\n    deck();\n    \n    // Keel and rudder\n    keel();\n    \n    // Masts and sails\n    mast(10, main_mast_height, main_sail_width, main_sail_height);\n    mast(-15, mizzen_mast_height, mizzen_sail_width, mizzen_sail_height);\n}",
    "renders": true
  },
  {
    "vehicle": "sloop",
    "openscad_code": "// Sloop OpenSCAD model\n// Basic realistic sloop for 3D printing\n\nhull_length = 80;\nhull_width = 25;\nhull_height = 15;\ndeck_thickness = 2;\nmast_height = 60;\nboom_length = 35;\n\nmodule hull() {\n    // Main hull with curved bottom\n    difference() {\n        hull_base();\n        // Hollow out interior\n        translate([0, 0, deck_thickness]) \n            scale([0.8, 0.8, 0.8]) \n            hull_base();\n    }\n    \n    // Deck surface\n    translate([0, 0, hull_height]) \n        cube([hull_length, hull_width, deck_thickness], center=true);\n}\n\nmodule hull_base() {\n    // Create curved hull shape\n    union() {\n        // Main curved body\n        hull_shape();\n        // Pointed bow\n        translate([hull_length/2 - 5, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=10, r1=5, r2=0, center=true);\n    }\n}\n\nmodule hull_shape() {\n    // Generate curved hull using hull() of cylinders\n    hull() {\n        for(i = [-hull_length/2:hull_length/10:hull_length/2]) {\n            translate([i, 0, 0])\n                cylinder(h=hull_height, r=hull_width/2 * (1 - abs(i)/(hull_length/2)*0.3), center=true);\n        }\n    }\n}\n\nmodule mast() {\n    // Main mast\n    translate([0, 0, hull_height + deck_thickness]) \n        cylinder(h=mast_height, r=1.5, center=false);\n    \n    // Boom\n    translate([0, 0, hull_height + deck_thickness + mast_height*0.7])\n        rotate([0, 90, 0])\n            cylinder(h=boom_length, r=1, center=true);\n}\n\nmodule rudder() {\n    // Stern rudder\n    translate([-hull_length/2 - 2, 0, hull_height/2])\n        cube([4, 2, hull_height/2]);\n}\n\nmodule keel() {\n    // Center keel for stability\n    translate([0, 0, -hull_height/2 - 2])\n        cube([hull_length*0.7, 3, 4]);\n}\n\nmodule cabin() {\n    // Small cabin on deck\n    translate([hull_length/4, 0, hull_height + deck_thickness])\n        cube([15, hull_width*0.7, 8], center=true);\n}\n\nmodule rail() {\n    // Deck rail posts\n    for(i = [-hull_length/2+5:hull_length/10:hull_length/2-5]) {\n        translate([i, hull_width/2 - 1, hull_height + deck_thickness + 2])\n            cylinder(h=4, r=0.8, center=true);\n        translate([i, -hull_width/2 + 1, hull_height + deck_thickness + 2])\n            cylinder(h=4, r=0.8, center=true);\n    }\n}\n\n// Assemble the sloop\nunion() {\n    hull();\n    mast();\n    rudder();\n    keel();\n    cabin();\n    rail();\n}",
    "renders": true
  },
  {
    "vehicle": "schooner",
    "openscad_code": "// Schooner OpenSCAD Model - Medium Complexity\n// Realistic style, 3D printable\n\nhull_length = 80;\nhull_width = 20;\nhull_height = 15;\ndeck_thickness = 2;\n\nmodule hull() {\n    // Main hull with curved bottom\n    difference() {\n        union() {\n            // Hull base\n            hull() {\n                translate([0, 0, -hull_height/2]) \n                    cube([hull_length, hull_width, hull_height], center=true);\n                translate([0, 0, -hull_height/2 + 2]) \n                    scale([1, 0.8, 0.8]) \n                    sphere(d=hull_width);\n                translate([hull_length/2 - 10, 0, -hull_height/2 + 2]) \n                    scale([1, 0.8, 0.8]) \n                    sphere(d=hull_width);\n            }\n        }\n        \n        // Hollow interior\n        translate([0, 0, -hull_height/2 + deck_thickness]) \n            cube([hull_length - 4, hull_width - 4, hull_height], center=true);\n    }\n}\n\nmodule deck() {\n    // Main deck\n    translate([0, 0, hull_height/2]) \n        cube([hull_length, hull_width, deck_thickness], center=true);\n    \n    // Cabin\n    translate([-hull_length/4, 0, hull_height/2 + deck_thickness]) \n        cube([20, hull_width - 4, 10], center=true);\n}\n\nmodule mast(position, height, diameter) {\n    translate([position, 0, hull_height/2 + deck_thickness]) \n        cylinder(h=height, d=diameter);\n    \n    // Boom\n    translate([position, 0, hull_height/2 + deck_thickness + height/2]) \n        rotate([90, 0, 0]) \n        cylinder(h=hull_length/3, d=diameter/2);\n    \n    // Gaff\n    translate([position, 0, hull_height/2 + deck_thickness + height - 5]) \n        rotate([135, 0, 0]) \n        cylinder(h=hull_length/4, d=diameter/2);\n}\n\nmodule sails() {\n    // Main sail\n    translate([hull_length/4, 0, hull_height/2 + deck_thickness + 30]) \n        rotate([0, 90, 0]) \n        scale([1, 0.05, 1]) \n        cube([25, 1, 30], center=true);\n    \n    // Fore sail\n    translate([-hull_length/4, 0, hull_height/2 + deck_thickness + 25]) \n        rotate([0, 90, 0]) \n        scale([1, 0.05, 1]) \n        cube([20, 1, 25], center=true);\n}\n\nmodule bowsprit() {\n    // Bowsprit extending from bow\n    translate([hull_length/2, 0, hull_height/2]) \n        rotate([0, 15, 0]) \n        cylinder(h=15, d=2);\n}\n\nmodule rudder() {\n    // Rudder at stern\n    translate([-hull_length/2 - 2, 0, 0]) \n        cube([4, hull_width/4, hull_height/2], center=true);\n}\n\nmodule railings() {\n    // Railings along deck edges\n    for(x = [-hull_length/2 + 5:hull_length/5:hull_length/2 - 5]) {\n        translate([x, hull_width/2 - 1, hull_height/2 + deck_thickness + 3]) \n            cylinder(h=3, d=1);\n        translate([x, -hull_width/2 + 1, hull_height/2 + deck_thickness + 3]) \n            cylinder(h=3, d=1);\n    }\n}\n\n// Assemble the schooner\nunion() {\n    hull();\n    deck();\n    mast(hull_length/4, 40, 2);      // Main mast\n    mast(-hull_length/4, 35, 2);     // Fore mast\n    sails();\n    bowsprit();\n    rudder();\n    railings();\n}",
    "renders": true
  },
  {
    "vehicle": "gondola",
    "openscad_code": "// Venice Gondola – medium-complexity, 3D-printable\n// Overall length ~90 mm, no severe overhangs, 1 mm wall / 2 mm floor thickness\n\n$fn = 32;\n\n// Main dimensions\nL = 90;          // total length\nW = 18;          // max beam\nH = 12;          // max height above waterline\nT = 2;           // wall / floor thickness\nR = 1;           // small fillet radius\n\nmodule gondola_hull() {\n    // Symmetric half-hull to keep bottom printable\n    difference() {\n        // Outer shell\n        hull() {\n            translate([-L/2, 0, 0]) sphere(d = W);\n            translate([L/2, 0, 0])  sphere(d = W);\n        }\n        // Hollow out\n        translate([0, 0, -H]) cube([L + 2, W + 2, H], center = true);\n    }\n    // Floor plate\n    translate([0, 0, 0]) cube([L, W - 2*T, T], center = true);\n}\n\nmodule ferro() {\n    // Decorative iron prow, 3 printable fins\n    for (a = [-30, 0, 30]) {\n        rotate([90, 0, a])\n            translate([L/2 + 3, 0, 0])\n                cylinder(h = 8, d1 = 2, d2 = 0.5);\n    }\n}\n\nmodule stern_riser() {\n    // Raised stern platform\n    translate([-L/2 - 2, 0, H/2])\n        rotate([0, 10, 0])\n            cube([6, W/1.5, H], center = true);\n}\n\nmodule seats() {\n    // Three cross-wise seats\n    for (x = [-L/3, 0, L/3]) {\n        translate([x, 0, H/2])\n            cube([4, W - 4, T*2], center = true);\n    }\n}\n\nmodule oarlock() {\n    // Simple oarlock peg on starboard\n    translate([L/4, W/2 + 1, H])\n        cylinder(h = 5, d = 3);\n}\n\nmodule gondola() {\n    union() {\n        gondola_hull();\n        ferro();\n        stern_riser();\n        seats();\n        oarlock();\n    }\n}\n\ngondola();",
    "renders": true
  },
  {
    "vehicle": "skiff",
    "openscad_code": "// OpenSCAD Skiff – 3D-printable, medium-complexity, realistic style\n// Overall length ≈ 82 mm, width ≈ 22 mm, height ≈ 9 mm\n\n// Wall thickness for printability\nwall = 1.2;\n\n// Main hull module with slight sheer line and rounded bow/stern\nmodule hull() {\n    difference() {\n        // Outer hull shell\n        hull_shell();\n        // Inner cavity\n        translate([0, 0, -wall])\n            scale([0.82, 0.82, 0.9])\n            hull_shell();\n    }\n}\n\nmodule hull_shell() {\n    linear_extrude(height = 8, twist = 2, scale = [1, 0.6])\n        hull() {\n            // Bow\n            translate([40, 0]) circle(d = 22);\n            // Stern\n            translate([-40, 0]) circle(d = 18);\n            // Mid stations\n            translate([0, 0]) circle(d = 20);\n        }\n}\n\n// Transom plate\nmodule transom() {\n    translate([-41, 0, 4])\n        rotate([0, 90, 0])\n            difference() {\n                cube([8, 20, 1.5], center = true);\n                translate([0, 0, -1])\n                    cube([10, 18, 3], center = true);\n            }\n}\n\n// Seats\nmodule seats() {\n    for (x = [-25, -5, 15]) {\n        translate([x, 0, 5.5])\n            difference() {\n                cube([14, 18, 1.2], center = true);\n                translate([0, 0, -0.5])\n                    cube([12.6, 16.6, 2], center = true);\n            }\n    }\n}\n\n// Ribs inside hull\nmodule ribs() {\n    for (x = [-35:10:35]) {\n        translate([x, 0, 2.5])\n            difference() {\n                cube([1, 18, 5], center = true);\n                translate([0, 0, -1])\n                    scale([0.8, 0.8, 1])\n                        cube([1.2, 17, 6], center = true);\n            }\n    }\n}\n\n// Gunwale rail\nmodule gunwale() {\n    difference() {\n        hull() {\n            for (x = [-40:2:40]) {\n                translate([x, 10.8, 7.2])\n                    sphere(d = 2.4);\n            }\n        }\n        translate([0, 0, -1])\n            cube([200, 200, 12], center = true);\n    }\n}\n\n// Keel\nmodule keel() {\n    translate([0, 0, -1.2])\n        cube([82, 2.4, wall], center = true);\n}\n\n// Mast step (short socket for small mast)\nmodule mast_step() {\n    translate([0, 0, 5.5])\n        difference() {\n            cylinder(h = 3, d = 5, center = false);\n            translate([0, 0, -0.1])\n                cylinder(h = 3.2, d = 3.8, center = false);\n        }\n}\n\n// Final assembly\nunion() {\n    hull();\n    transom();\n    seats();\n    ribs();\n    gunwale();\n    keel();\n    mast_step();\n}",
    "renders": true
  },
  {
    "vehicle": "tugboat",
    "openscad_code": "// Tugboat - Realistic Medium Complexity\n// Dimensions: ~80mm length, ~25mm width, ~35mm height\n\nhull_color = \"red\";\nsuperstructure_color = \"white\";\ndeck_color = \"lightgray\";\n\n// Parameters\nhull_length = 80;\nhull_width = 25;\nhull_height = 15;\nsuperstructure_height = 12;\nchimney_height = 10;\nchimney_width = 6;\n\n// Hull - rounded bow, flat stern\nmodule hull() {\n    color(hull_color)\n    union() {\n        // Main hull body\n        difference() {\n            hull_shape();\n            // Remove bottom to make it hollow\n            translate([0, 0, -hull_height])\n                cube([hull_length + 2, hull_width + 2, hull_height], center=true);\n        }\n        \n        // Add deck\n        color(deck_color)\n        translate([0, 0, hull_height])\n            cube([hull_length, hull_width, 1.5], center=true);\n    }\n}\n\nmodule hull_shape() {\n    hull_points = [\n        [-hull_length/2, -hull_width/2, 0],\n        [hull_length/2, -hull_width/2, 0],\n        [hull_length/2, hull_width/2, 0],\n        [-hull_length/2, hull_width/2, 0],\n        [-hull_length/2 + 5, -hull_width/2, hull_height],\n        [hull_length/2 - 5, -hull_width/2, hull_height],\n        [hull_length/2 - 5, hull_width/2, hull_height],\n        [-hull_length/2 + 5, hull_width/2, hull_height],\n        [-hull_length/2 + 15, 0, hull_height + 5]\n    ];\n    \n    hull_faces = [\n        [0,1,2,3], [4,5,6,7], [0,1,5,4], [2,3,7,6],\n        [1,2,6,5], [3,0,4,7], [4,7,8], [5,6,8], [6,7,8], [4,5,8]\n    ];\n    \n    polyhedron(points=hull_points, faces=hull_faces, convexity=10);\n}\n\n// Superstructure (bridge)\nmodule superstructure() {\n    color(superstructure_color)\n    translate([0, 0, hull_height + 1.5])\n    difference() {\n        // Main bridge\n        translate([-hull_length/4, 0, superstructure_height/2])\n            cube([hull_length/2, hull_width - 8, superstructure_height], center=true);\n        \n        // Windows\n        for(x = [-hull_length/4 + 5 : 8 : hull_length/4 - 5]) {\n            translate([x, (hull_width - 8)/2 - 0.5, superstructure_height/2])\n                cube([4, 1, 3], center=true);\n            translate([x, -(hull_width - 8)/2 + 0.5, superstructure_height/2])\n                cube([4, 1, 3], center=true);\n        }\n    }\n}\n\n// Chimney\nmodule chimney() {\n    color(\"darkgray\")\n    translate([hull_length/4, 0, hull_height + superstructure_height + 1.5])\n    union() {\n        // Main chimney\n        cylinder(h=chimney_height, d=chimney_width, $fn=16);\n        \n        // Top cap\n        translate([0, 0, chimney_height])\n            cylinder(h=2, d=chimney_width + 2, $fn=16);\n    }\n}\n\n// Towing bitt\nmodule towing_bitt() {\n    color(\"darkgray\")\n    translate([-hull_length/2 + 5, 0, hull_height + 1.5])\n    union() {\n        // Base\n        cube([6, 4, 3], center=true);\n        \n        // Posts\n        for(y = [-hull_width/4, hull_width/4]) {\n            translate([0, y, 3])\n                cylinder(h=4, d=2, $fn=8);\n        }\n    }\n}\n\n// Railings\nmodule railings() {\n    color(\"white\")\n    translate([0, 0, hull_height + 1.5])\n    for(x = [-hull_length/2 + 5 : 10 : hull_length/2 - 5]) {\n        translate([x, hull_width/2 - 1, 2])\n            cube([0.5, 0.5, 3]);\n        translate([x, -hull_width/2 + 1, 2])\n            cube([0.5, 0.5, 3]);\n    }\n}\n\n// Lifebuoys\nmodule lifebuoys() {\n    color(\"orange\")\n    for(x = [-hull_length/3, hull_length/3]) {\n        translate([x, hull_width/2 + 2, hull_height + 1.5])\n            rotate([90, 0, 0])\n            difference() {\n                cylinder(h=2, d=6, $fn=16);\n                cylinder(h=3, d=3, $fn=16);\n            }\n    }\n}\n\n// Mast\nmodule mast() {\n    color(\"darkgray\")\n    translate([-hull_length/3, 0, hull_height + superstructure_height + chimney_height])\n    union() {\n        // Main mast\n        cylinder(h=15, d=2, $fn=8);\n        \n        // Cross bar\n        translate([0, 0, 8])\n            rotate([90, 0, 0])\n            cylinder(h=10, d=1, $fn=8);\n    }\n}\n\n// Assembly\nunion() {\n    hull();\n    superstructure();\n    chimney();\n    towing_bitt();\n    railings();\n    lifebuoys();\n    mast();\n}",
    "renders": true
  },
  {
    "vehicle": "barge",
    "openscad_code": "// Realistic Medium-Complexity Barge for 3D Printing\n// Hull length ≈ 80 mm, width ≈ 25 mm, height ≈ 18 mm\n// All walls ≥ 1 mm for FDM printing\n\n// Main parameters\nhull_l   = 80;\nhull_w   = 25;\nhull_h   = 10;\nbow_slope = 0.6;       // bow taper ratio (0–1)\nwall_t   = 1.2;        // uniform wall thickness\n\n// Colors for preview (ignored by slicer)\ncolor_hull   = [0.55, 0.40, 0.25];\ncolor_deck   = [0.75, 0.60, 0.45];\ncolor_cargo  = [0.35, 0.35, 0.35];\n\n// Hull module with hollow interior\nmodule hull() {\n    difference() {\n        // Outer hull shell\n        hull_shape();\n\n        // Inner cavity – slightly smaller and higher to leave bottom solid\n        translate([0, 0, wall_t])\n            scale([1 - 2*wall_t/hull_w,\n                   1 - 2*wall_t/hull_l,\n                   0.9])\n            hull_shape();\n    }\n}\n\n// Single solid hull shape\nmodule hull_shape() {\n    linear_extrude(height = hull_h, convexity = 4)\n        polygon(points=[\n            [-hull_l/2, -hull_w/2],\n            [ hull_l/2 - hull_l*bow_slope, -hull_w/2],\n            [ hull_l/2, 0],\n            [ hull_l/2 - hull_l*bow_slope,  hull_w/2],\n            [-hull_l/2,  hull_w/2]\n        ]);\n}\n\n// Deck surface with slight camber\nmodule deck() {\n    translate([0, 0, hull_h])\n        color(color_deck)\n        linear_extrude(height = 1.5, convexity = 4)\n            offset(r = 1, $fn = 32)\n            polygon(points=[\n                [-hull_l/2 + 2, -hull_w/2 + 2],\n                [ hull_l/2 - hull_l*bow_slope - 2, -hull_w/2 + 2],\n                [ hull_l/2 - 4, 0],\n                [ hull_l/2 - hull_l*bow_slope - 2,  hull_w/2 - 2],\n                [-hull_l/2 + 2,  hull_w/2 - 2]\n            ]);\n}\n\n// Cargo hatches (three rectangular covers)\nmodule cargo_hatches() {\n    for (x = [-25, 0, 25]) {\n        translate([x, 0, hull_h + 1.5])\n            color(color_cargo)\n            cube([16, 18, 1.5], center = true);\n    }\n}\n\n// Superstructure: small wheelhouse at stern\nmodule wheelhouse() {\n    translate([-hull_l/2 + 15, 0, hull_h + 1.5]) {\n        difference() {\n            // Main block\n            color(color_deck)\n            cube([12, 14, 8], center = true);\n\n            // Doorway (no overhang)\n            translate([5.9, 0, -3])\n                cube([2.2, 5, 6], center = true);\n        }\n        // Roof\n        translate([0, 0, 4.5])\n            color(color_cargo)\n            cube([14, 16, 1], center = true);\n    }\n}\n\n// Bollards along edge for mooring lines\nmodule bollards() {\n    for (x = [-30, -15, 0, 15, 30]) {\n        translate([x, hull_w/2 - 1, hull_h + 1.5])\n            cylinder(h = 3.5, r = 1.5, $fn = 12);\n        translate([x, -hull_w/2 + 1, hull_h + 1.5])\n            cylinder(h = 3.5, r = 1.5, $fn = 12);\n    }\n}\n\n// Assembly\ncolor(color_hull) hull();\ndeck();\ncargo_hatches();\nwheelhouse();\nbollards();",
    "renders": true
  },
  {
    "vehicle": "trawler",
    "openscad_code": "// Realistic Medium-Complexity Trawler\n// Length ≈ 80 mm, beam ≈ 25 mm\n\n// Overall body\nmodule hull() {\n    difference() {\n        // Main hull block\n        hull() {\n            translate([-5, 0, 0]) cube([90, 26, 12], center = true);\n            translate([45, 0, 5]) cube([10, 24, 15], center = true);\n            translate([-50, 0, -6]) cube([10, 20, 2], center = true);\n        }\n        // Bow taper\n        translate([42, 0, -2]) rotate([0, 0, 35]) cube([30, 30, 20], center = true);\n        // Keel slot\n        translate([0, 0, -7]) cube([110, 6, 2], center = true);\n    }\n}\n\n// Superstructure block\nmodule bridge() {\n    difference() {\n        translate([0, 0, 8]) cube([30, 20, 15], center = true);\n        // Wheelhouse front window\n        translate([15, 0, 12]) cube([2, 12, 8], center = true);\n    }\n}\n\n// Smokestack\nmodule funnel() {\n    cylinder(h = 12, d1 = 6, d2 = 4, $fn = 16);\n}\n\n// Rail posts\nmodule rail_post() {\n    cylinder(h = 5, d = 2, $fn = 8);\n}\n\n// Rail along the side\nmodule rail(length) {\n    for (x = [0:5:length-5]) {\n        translate([x, 12.5, 4.5]) rail_post();\n        translate([x, -12.5, 4.5]) rail_post();\n    }\n    // Top rail pipe\n    color(\"gray\") translate([length/2-2.5, 12.5, 7]) cube([length, 1, 1], center = true);\n    color(\"gray\") translate([length/2-2.5, -12.5, 7]) cube([length, 1, 1], center = true);\n}\n\n// Winch drum\nmodule winch() {\n    difference() {\n        cylinder(h = 8, d = 10, $fn = 20);\n        translate([0, 0, -1]) cylinder(h = 10, d = 3, $fn = 20);\n    }\n}\n\n// Net boom\nmodule boom() {\n    color(\"darkblue\") translate([25, 0, 12]) rotate([0, -20, 0])\n    cylinder(h = 35, d = 2, $fn = 8);\n}\n\n// Antenna mast\nmodule mast() {\n    translate([5, 0, 15]) cylinder(h = 15, d1 = 1.5, d2 = 0.8, $fn = 8);\n    translate([5, 0, 22]) sphere(d = 2, $fn = 8);\n}\n\n// Lifebuoy\nmodule lifebuoy() {\n    difference() {\n        cylinder(h = 2, d = 6, $fn = 20);\n        translate([0, 0, -0.5]) cylinder(h = 3, d = 3, $fn = 20);\n    }\n}\n\n// Propeller\nmodule propeller() {\n    for (a = [0:120:240]) {\n        rotate([0, 0, a])\n        translate([0, 2.5, 0]) cube([5, 1, 0.8], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    color(\"lightgray\") hull();\n    \n    color(\"white\") translate([-15, 0, 6]) bridge();\n    \n    color(\"darkgray\") translate([0, 0, 16]) funnel();\n    \n    color(\"white\") rail(80);\n    \n    color(\"darkgray\") translate([30, 0, 6]) winch();\n    \n    boom();\n    \n    color(\"darkgray\") mast();\n    \n    color(\"red\") translate([-35, 8, 5]) rotate([90, 0, 0]) lifebuoy();\n    \n    color(\"gray\") translate([-48, 0, -5]) rotate([90, 0, 0]) propeller();\n}",
    "renders": true
  },
  {
    "vehicle": "pontoon",
    "openscad_code": "// Realistic medium-complexity 3D-printable pontoon\n// Units are millimeters, model is ~80 mm long\n\n// Overall dimensions\npontoon_length = 80;\npontoon_width = 28;\npontoon_height = 18;\nwall_thickness = 1.8;\n\n// Create a single pontoon cylinder with rounded ends\nmodule pontoon_body() {\n    difference() {\n        union() {\n            // Main cylindrical hull\n            translate([0, 0, pontoon_height/2])\n                cylinder(h = pontoon_length - pontoon_height, r = pontoon_height/2, $fn = 64);\n            // Front rounded cap\n            translate([-(pontoon_length - pontoon_height)/2, 0, pontoon_height/2])\n                rotate([0, 90, 0])\n                    cylinder(h = pontoon_height, r = pontoon_height/2, $fn = 64);\n            // Rear rounded cap\n            translate([(pontoon_length - pontoon_height)/2, 0, pontoon_height/2])\n                rotate([0, 90, 0])\n                    cylinder(h = pontoon_height, r = pontoon_height/2, $fn = 64);\n        }\n        \n        // Hollow out interior\n        translate([0, 0, pontoon_height/2])\n            cylinder(h = pontoon_length + 2, r = pontoon_height/2 - wall_thickness, $fn = 64);\n    }\n}\n\n// Deck surface with mounting holes\nmodule pontoon_deck() {\n    deck_width = pontoon_width - 4;\n    deck_length = pontoon_length - 10;\n    \n    difference() {\n        // Main deck plate\n        translate([0, 0, pontoon_height - wall_thickness])\n            cube([deck_length, deck_width, wall_thickness], center = true);\n        \n        // Mounting holes pattern\n        for (x = [-deck_length/2 + 10 : 15 : deck_length/2 - 10]) {\n            for (y = [-deck_width/2 + 5 : 10 : deck_width/2 - 5]) {\n                translate([x, y, pontoon_height - wall_thickness])\n                    cylinder(h = wall_thickness + 1, r = 2, $fn = 16);\n            }\n        }\n    }\n}\n\n// Side reinforcement ribs\nmodule side_ribs() {\n    rib_thickness = 1.5;\n    rib_height = pontoon_height * 0.6;\n    \n    for (x = [-pontoon_length/2 + 15 : 20 : pontoon_length/2 - 15]) {\n        translate([x, 0, rib_height/2])\n            difference() {\n                // Outer rib shape\n                cylinder(h = pontoon_width + 2, r = rib_height/2, $fn = 3);\n                // Hollow center\n                cylinder(h = pontoon_width + 4, r = rib_height/2 - rib_thickness, $fn = 3);\n                // Remove excess beyond pontoon\n                translate([0, -(pontoon_width/2 + 1), 0])\n                    cube([rib_height + 2, pontoon_width + 2, rib_height], center = true);\n            }\n    }\n}\n\n// Drain plug detail at rear\nmodule drain_plug() {\n    plug_radius = 3;\n    plug_length = 5;\n    \n    translate([pontoon_length/2 - 10, 0, pontoon_height/4])\n        union() {\n            // Plug boss\n            cylinder(h = plug_length, r = plug_radius + 2, $fn = 16);\n            // Threaded hole\n            cylinder(h = plug_length + 1, r = plug_radius, $fn = 16);\n        }\n}\n\n// Lifting eye at front\nmodule lifting_eye() {\n    eye_outer = 5;\n    eye_inner = 2.5;\n    eye_thickness = 3;\n    \n    translate([-pontoon_length/2 + 5, 0, pontoon_height * 0.75])\n        rotate([0, 90, 0])\n            difference() {\n                // Outer ring\n                cylinder(h = eye_thickness, r = eye_outer, $fn = 32);\n                // Inner hole\n                cylinder(h = eye_thickness + 1, r = eye_inner, $fn = 32);\n            }\n}\n\n// Assemble the complete pontoon\nunion() {\n    pontoon_body();\n    pontoon_deck();\n    side_ribs();\n    drain_plug();\n    lifting_eye();\n}",
    "renders": true
  },
  {
    "vehicle": "hydrofoil",
    "openscad_code": "// Realistic-style 3D-printable hydrofoil\n// All dimensions in mm – fits within 100 mm bounding box\n\n// Overall scale factor\nscale_factor = 0.8;\n\n// Board/fuselage parameters\nboard_length = 70 * scale_factor;\nboard_width  = 20 * scale_factor;\nboard_thick  = 5  * scale_factor;\n\n// Mast parameters\nmast_height = 50 * scale_factor;\nmast_chord  = 12 * scale_factor;\nmast_thick  = 3  * scale_factor;\n\n// Wing parameters\nwing_span  = 60 * scale_factor;\nwing_chord = 25 * scale_factor;\nwing_thick = 2.5 * scale_factor;\n\n// Tail stabilizer\nstab_span  = 30 * scale_factor;\nstab_chord = 18 * scale_factor;\nstab_thick = 2  * scale_factor;\n\n// Fuselage taper helper\nmodule tapered_box(l, w1, w2, h) {\n    hull() {\n        translate([0, 0, 0]) cube([l, w1, h], center = true);\n        translate([l, 0, 0]) cube([l, w2, h], center = true);\n    }\n}\n\n// Simple NACA-like foil profile (flat bottom, curved top)\nmodule foil_profile(chord, thick, span) {\n    difference() {\n        // Full wing block\n        cube([chord, span, thick * 2], center = true);\n        \n        // Remove top curvature\n        for (x = [-chord/2 : chord/10 : chord/2]) {\n            translate([x, 0, thick])\n                rotate([90, 0, 0])\n                    cylinder(h = span + 2, r = thick * 1.2, $fn = 20);\n        }\n    }\n}\n\n// Main hydrofoil module\nmodule hydrofoil() {\n    union() {\n        // Board (fuselage)\n        color(\"silver\")\n        tapered_box(\n            board_length,\n            board_width,\n            board_width * 0.6,\n            board_thick\n        );\n        \n        // Mast\n        color(\"gray\")\n        translate([board_length * 0.4, 0, -(mast_height + board_thick)/2])\n            cube([mast_chord, mast_thick, mast_height], center = true);\n        \n        // Main wing\n        color(\"silver\")\n        translate([board_length * 0.4 + mast_chord/2 + wing_chord/2, 0, -mast_height])\n            rotate([0, 0, 0])\n                foil_profile(wing_chord, wing_thick, wing_span);\n        \n        // Tail stabilizer\n        color(\"silver\")\n        translate([board_length * 0.4 + mast_chord/2 + stab_chord/2, 0, -mast_height * 0.8])\n            rotate([0, 0, 0])\n                foil_profile(stab_chord, stab_thick, stab_span);\n        \n        // Wing fences (small endplates for printability)\n        for (y = [-wing_span/2, wing_span/2]) {\n            translate([board_length * 0.4 + mast_chord/2 + wing_chord/2, y, -mast_height])\n                cube([wing_chord, 1, wing_thick * 2], center = true);\n        }\n        \n        // Stabilizer fences\n        for (y = [-stab_span/2, stab_span/2]) {\n            translate([board_length * 0.4 + mast_chord/2 + stab_chord/2, y, -mast_height * 0.8])\n                cube([stab_chord, 1, stab_thick * 2], center = true);\n        }\n        \n        // Mounting holes for screws (print-in-place)\n        for (x = [-board_length/2 + 10, board_length/2 - 10]) {\n            translate([x, 0, board_thick/2])\n                cylinder(h = 5, r = 2, $fn = 16);\n        }\n    }\n}\n\n// Render the model\nhydrofoil();",
    "renders": true
  },
  {
    "vehicle": "hovercraft",
    "openscad_code": "// Realistic hovercraft – medium complexity\n// All dimensions in mm, ready for 3D printing\n\n$fn = 36;               // Smooth circles\nwall = 1.5;             // Uniform printable wall thickness\n\nmodule skirt() {\n    // Inflatable skirt – hollow torus section\n    difference() {\n        cylinder(h = 8, d1 = 90, d2 = 90);\n        translate([0,0,-1])\n            cylinder(h = 10, d1 = 70, d2 = 70);\n    }\n}\n\nmodule hull() {\n    // Main fiberglass body – rounded deck\n    hullHeight = 15;\n    translate([0,0,hullHeight/2])\n        scale([1, 0.7, 0.4])\n            sphere(d = 70);\n}\n\nmodule intake() {\n    // Air-intake duct on the rear\n    translate([30,0,20])\n        rotate([90,0,0])\n            cylinder(h = 25, d1 = 22, d2 = 18);\n}\n\nmodule fanBlades(n = 5) {\n    // Propeller inside duct\n    for(i=[0:n-1])\n        rotate([0,0,i*360/n])\n            translate([0,0,12])\n                cube([20,3,2], center=true);\n}\n\nmodule rudder() {\n    // Vertical control rudder behind duct\n    translate([40,0,15])\n        rotate([0,20,0])\n            cube([8,10,20]);\n}\n\nmodule engineBox() {\n    // Motor housing on top rear\n    translate([0,-15,25])\n        cube([30,20,15], center=true);\n}\n\nmodule cockpit() {\n    // Pilot cabin – simplified canopy\n    translate([0,0,25])\n        rotate_extrude()\n            translate([0,15,0])\n                circle(d = 20);\n}\n\n// Assembly\nunion() {\n    skirt();\n    hull();\n    intake();\n    fanBlades();\n    rudder();\n    engineBox();\n    cockpit();\n}\n\n// Add a flat bottom plate for printing stability\ntranslate([0,0,-wall])\n    cube([100,60,wall], center=true);",
    "renders": true
  },
  {
    "vehicle": "airboat",
    "openscad_code": "// Airboat - Realistic Medium Complexity\n// Dimensions roughly 80mm long x 35mm wide x 25mm tall\n\n$fn = 36;\n\n// Main hull\nmodule hull() {\n    difference() {\n        // Main hull body\n        hull_shape();\n        \n        // Cockpit cavity\n        translate([10, 0, 8])\n            cube([30, 20, 12], center=true);\n        \n        // Hull drain holes\n        for(x = [-20, -10, 0, 10, 20]) {\n            translate([x, 0, 1])\n                cylinder(h=3, d=2, center=true);\n        }\n    }\n}\n\n// Hull shape with rounded bottom\nmodule hull_shape() {\n    union() {\n        // Main hull\n        translate([0, 0, 5])\n            scale([1, 0.6, 0.3])\n                sphere(d=60);\n        \n        // Flat deck\n        translate([0, 0, 10])\n            cube([60, 35, 3], center=true);\n        \n        // Front taper\n        translate([30, 0, 5])\n            rotate([0, 90, 0])\n                cylinder(h=20, d1=25, d2=15);\n    }\n}\n\n// Seating area\nmodule cockpit() {\n    // Driver seat\n    translate([5, 0, 11])\n        cube([12, 10, 6], center=true);\n    \n    // Passenger seat\n    translate([-10, 0, 11])\n        cube([12, 10, 6], center=true);\n    \n    // Seat backs\n    for(x = [5, -10]) {\n        translate([x, 0, 15])\n            cube([12, 10, 4], center=true);\n    }\n    \n    // Windshield\n    translate([25, 0, 16])\n        rotate([60, 0, 0])\n            cube([20, 30, 2], center=true);\n}\n\n// Engine cage\nmodule engine_cage() {\n    // Main cage frame\n    difference() {\n        // Cage body\n        translate([-35, 0, 25])\n            cube([30, 40, 30], center=true);\n        \n        // Hollow center\n        translate([-35, 0, 25])\n            cube([26, 36, 26], center=true);\n    }\n    \n    // Cage supports\n    for(angle = [0, 90, 180, 270]) {\n        rotate([0, 0, angle])\n            translate([-35, 18, 25])\n                cylinder(h=3, d=3);\n    }\n}\n\n// Propeller assembly\nmodule propeller() {\n    // Engine block\n    translate([-50, 0, 25])\n        cube([15, 15, 20], center=true);\n    \n    // Propeller hub\n    translate([-65, 0, 25])\n        cylinder(h=15, d=8);\n    \n    // Propeller blades (5 blades)\n    for(i = [0:4]) {\n        rotate([0, 0, i * 72])\n            translate([-65, 0, 25])\n                rotate([90, 0, 0])\n                    scale([1, 0.2, 2])\n                        cylinder(h=15, d1=3, d2=1);\n    }\n    \n    // Safety cage\n    difference() {\n        translate([-65, 0, 25])\n            sphere(d=35);\n        translate([-65, 0, 25])\n            sphere(d=30);\n    }\n}\n\n// Rudder assembly\nmodule rudder() {\n    // Vertical fin\n    translate([-30, 0, 15])\n        rotate([0, 20, 0])\n            cube([15, 2, 20], center=true);\n    \n    // Rudder control\n    translate([-20, 0, 25])\n        rotate([0, 20, 0])\n            cube([20, 2, 8], center=true);\n}\n\n// Float pods (stability)\nmodule float_pods() {\n    for(side = [-1, 1]) {\n        translate([0, side * 20, 5])\n            scale([0.5, 0.3, 0.3])\n                sphere(d=40);\n    }\n}\n\n// Main assembly\nhull();\ncockpit();\nengine_cage();\npropeller();\nrudder();\nfloat_pods();",
    "renders": true
  },
  {
    "vehicle": "houseboat",
    "openscad_code": "// Houseboat - Realistic Style, Medium Complexity\n// Dimensions: ~70mm long x 30mm wide x 20mm tall\n\n// Parameters for 3D printing\nwall_thickness = 1.2;\nscale_factor = 0.3;\n\n// Main boat hull\nmodule hull() {\n    difference() {\n        // Main hull shape - tapered pontoon\n        hull_shape();\n        \n        // Hollow out interior\n        translate([1, 1, 1])\n        scale([0.9, 0.85, 0.8])\n        hull_shape();\n    }\n}\n\nmodule hull_shape() {\n    hull_points = [\n        [0, -15, 0], [70, -15, 0], [70, 15, 0], [0, 15, 0],\n        [5, -12, 10], [65, -12, 10], [65, 12, 10], [5, 12, 10]\n    ];\n    \n    // Create tapered hull with rounded edges\n    minkowski() {\n        hull() {\n            for (p = hull_points) translate(p) sphere(0.1);\n        }\n        sphere(2);\n    }\n}\n\n// Cabin structure on top\nmodule cabin() {\n    translate([15, 0, 10]) {\n        difference() {\n            // Main cabin body\n            cube([35, 28, 12]);\n            \n            // Door\n            translate([1, 10, 0])\n            cube([wall_thickness, 8, 10]);\n            \n            // Windows\n            for (x = [10, 25]) {\n                translate([x, 1, 6])\n                cube([6, wall_thickness, 4]);\n            }\n            for (y = [5, 22]) {\n                translate([48, y, 6])\n                cube([wall_thickness, 6, 4]);\n            }\n        }\n        \n        // Cabin roof with slight overhang\n        translate([-2, -2, 12])\n        cube([39, 32, 2]);\n    }\n}\n\n// Railings around deck\nmodule railings() {\n    // Front railing posts\n    for (x = [5:10:55]) {\n        translate([x, -16, 10])\n        cylinder(h=4, d=2);\n    }\n    \n    // Back railing posts\n    for (x = [5:10:55]) {\n        translate([x, 16, 10])\n        cylinder(h=4, d=2);\n    }\n    \n    // Side railing posts\n    for (y = [-15:5:15]) {\n        translate([0, y, 10])\n        cylinder(h=4, d=2);\n    }\n    \n    // Horizontal rails\n    color(\"silver\")\n    for (x = [5:10:55]) {\n        translate([x, 0, 12])\n        rotate([0, 90, 0])\n        cylinder(h=32, d=1);\n    }\n}\n\n// Roof details - solar panels and antenna\nmodule roof_details() {\n    // Solar panels on cabin roof\n    translate([20, -8, 14]) {\n        cube([15, 16, 0.5]);\n        // Panel grid lines\n        for (i = [0:3:15]) {\n            translate([i, 0, 0.5])\n            cube([0.5, 16, 0.5]);\n        }\n    }\n    \n    // Antenna mast\n    translate([60, 0, 12]) {\n        cylinder(h=8, d=1);\n        // Antenna crossbars\n        translate([0, -3, 4])\n        cube([1, 6, 0.5]);\n        translate([0, -3, 6])\n        cube([1, 6, 0.5]);\n    }\n}\n\n// Propeller and rudder\nmodule propulsion() {\n    // Propeller\n    translate([70, 0, 3]) {\n        rotate([0, 90, 0]) {\n            cylinder(h=4, d=2);\n            // Propeller blades\n            for (angle = [0:120:360]) {\n                rotate([0, 0, angle])\n                translate([2, 0, 0])\n                cube([4, 0.5, 1]);\n            }\n        }\n    }\n    \n    // Rudder\n    translate([72, 0, 2])\n    cube([3, 6, 4]);\n}\n\n// Anchor\nmodule anchor() {\n    translate([5, 10, 10]) {\n        // Anchor chain\n        for (i = [0:2:10]) {\n            translate([0, 0, -i])\n            rotate([0, 90, 0])\n            torus(1, 0.5);\n        }\n        \n        // Anchor body\n        translate([0, 0, -12])\n        rotate([0, 90, 0])\n        difference() {\n            cylinder(h=4, d=2);\n            // Anchor flukes\n            translate([0, -2, 0])\n            cube([4, 2, 1]);\n            translate([0, 2, 0])\n            cube([4, 2, 1]);\n        }\n    }\n}\n\n// Torus for anchor chain\nmodule torus(r1, r2) {\n    rotate_extrude()\n    translate([r1, 0, 0])\n    circle(r=r2);\n}\n\n// Assemble the houseboat\nscale([scale_factor, scale_factor, scale_factor]) {\n    union() {\n        // Main components\n        hull();\n        cabin();\n        railings();\n        roof_details();\n        propulsion();\n        anchor();\n        \n        // Deck surface\n        translate([0, 0, 10])\n        cube([70, 30, 0.5]);\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "steamboat",
    "openscad_code": "// Steamboat - OpenSCAD\n// Medium complexity realistic style\n\n// Parameters for scaling\nhull_length = 70;\nhull_width = 28;\nhull_height = 10;\ndeck_thickness = 2;\npaddle_diameter = 22;\npaddle_width = 5;\nchimney_diameter = 6;\nchimney_height = 18;\n\n// Hull with gentle slope\nmodule hull() {\n    difference() {\n        union() {\n            // Main hull body\n            hull_shape();\n            // Deck\n            translate([0, 0, hull_height]) \n                cube([hull_length, hull_width, deck_thickness], center=true);\n        }\n        // Hollow inside for 3D printing\n        translate([0, 0, 2]) \n            cube([hull_length-4, hull_width-4, hull_height], center=true);\n    }\n}\n\nmodule hull_shape() {\n    union() {\n        // Main hull body\n        scale([1, 0.8, 1])\n            cylinder(h=hull_height, d1=hull_width, d2=hull_width*0.8, center=true, $fn=40);\n        \n        // Bow\n        translate([hull_length/2 - 5, 0, 0])\n            sphere(d=hull_width*0.9, $fn=32);\n        \n        // Stern\n        translate([-hull_length/2 + 5, 0, 0])\n            sphere(d=hull_width*0.85, $fn=32);\n    }\n}\n\n// Paddlewheel assembly\nmodule paddlewheel() {\n    translate([-hull_length/4, 0, hull_height + deck_thickness + paddle_diameter/2]) {\n        rotate([0, 90, 0]) {\n            difference() {\n                // Paddle wheel cylinder\n                cylinder(h=paddle_width, d=paddle_diameter, center=true, $fn=60);\n                \n                // Spokes\n                for(i=[0:8]) {\n                    rotate([0, 0, i*45]) {\n                        translate([0, 0, -paddle_width/2 - 0.5]) \n                            cube([paddle_diameter*0.9, paddle_width*0.3, paddle_width + 1], center=true);\n                    }\n                }\n            }\n            \n            // Central hub\n            cylinder(h=paddle_width + 2, d=8, center=true, $fn=32);\n        }\n    }\n}\n\n// Chimney\nmodule chimney() {\n    translate([hull_length/3, 0, hull_height + deck_thickness]) {\n        // Base\n        cylinder(h=3, d=chimney_diameter + 4, center=false, $fn=32);\n        \n        // Chimney pipe\n        translate([0, 0, 3]) {\n            difference() {\n                cylinder(h=chimney_height, d=chimney_diameter, center=false, $fn=32);\n                // Hollow inside\n                translate([0, 0, 1]) \n                    cylinder(h=chimney_height - 1, d=chimney_diameter - 2, center=false, $fn=32);\n            }\n            \n            // Top rim\n            translate([0, 0, chimney_height]) \n                cylinder(h=2, d=chimney_diameter + 2, center=false, $fn=32);\n        }\n    }\n}\n\n// Cabin\nmodule cabin() {\n    translate([0, 0, hull_height + deck_thickness]) {\n        // Main cabin\n        cube([hull_length*0.6, hull_width*0.7, 15], center=true);\n        \n        // Roof\n        translate([0, 0, 15]) {\n            scale([1, 1.1, 0.3]) \n                sphere(d=hull_width*0.7, $fn=32);\n            translate([0, 0, -1]) \n                cube([hull_length*0.65, hull_width*0.75, 2], center=true);\n        }\n        \n        // Windows\n        for(i=[-1, 1]) {\n            translate([hull_length*0.2*i, hull_width*0.35, 8]) \n                cube([3, 0.5, 4], center=true);\n            translate([hull_length*0.2*i, -hull_width*0.35, 8]) \n                cube([3, 0.5, 4], center=true);\n        }\n    }\n}\n\n// Railings\nmodule railings() {\n    translate([0, 0, hull_height + deck_thickness + 1]) {\n        // Front railing\n        translate([hull_length*0.4, 0, 0]) {\n            for(i=[-hull_width/2+3:hull_width/2-3:5]) {\n                cylinder(h=8, d=1, center=false, $fn=8);\n                translate([0, i, 8]) \n                    cube([hull_length*0.3, 1, 1], center=true);\n            }\n        }\n        \n        // Side railings\n        for(side=[-1, 1]) {\n            translate([0, side*hull_width/2, 0]) {\n                for(j=[-hull_length/2+5:hull_length/2-5:8]) {\n                    translate([j, 0, 0]) \n                        cylinder(h=8, d=1, center=false, $fn=8);\n                }\n                translate([0, 0, 8]) \n                    cube([hull_length*0.8, 1, 1], center=true);\n            }\n        }\n    }\n}\n\n// Smokestack details\nmodule smokestack_details() {\n    translate([hull_length/3, 0, hull_height + deck_thickness + chimney_height + 3]) {\n        sphere(d=4, $fn=16);\n        translate([0, 0, 2]) \n            sphere(d=3, $fn=16);\n    }\n}\n\n// Main assembly\nunion() {\n    hull();\n    paddlewheel();\n    chimney();\n    cabin();\n    railings();\n    smokestack_details();\n}",
    "renders": true
  },
  {
    "vehicle": "paddlewheeler",
    "openscad_code": "// Paddlewheeler - Realistic Medium Complexity\n// Approx 75mm long, 3D printable\n\nhull_length = 60;\nhull_width = 25;\nhull_height = 12;\ndeck_height = 8;\npaddle_pos = -15;\npaddle_radius = 12;\npaddle_thickness = 4;\nchimney_height = 15;\nchimney_radius = 4;\n\n// Main hull with rounded bow\nmodule hull() {\n    union() {\n        // Main hull body\n        difference() {\n            hull_block();\n            // Taper bow\n            translate([hull_length/2-15, 0, 0])\n                rotate([0, 0, -10])\n                cube([hull_length, hull_width*2, hull_height*2], center=true);\n        }\n        \n        // Bow curve\n        translate([hull_length/2-5, 0, hull_height/2])\n            scale([1, 0.8, 0.8])\n            sphere(d=20, $fn=20);\n        \n        // Deck railings\n        for(x=[-20:10:20]) {\n            translate([x, hull_width/2+1, deck_height+1])\n                cylinder(h=2, d=1, $fn=8);\n            translate([x, -hull_width/2-1, deck_height+1])\n                cylinder(h=2, d=1, $fn=8);\n        }\n    }\n}\n\nmodule hull_block() {\n    difference() {\n        hull_shape();\n        // Interior cavity for weight reduction\n        translate([0, 0, -2])\n            scale([0.8, 0.8, 0.8])\n            hull_shape();\n    }\n}\n\nmodule hull_shape() {\n    minkowski() {\n        cube([hull_length, hull_width, hull_height], center=true);\n        sphere(d=6, $fn=12);\n    }\n}\n\n// Paddlewheel assembly\nmodule paddlewheel() {\n    rotate([90, 0, 0])\n    translate([paddle_pos, 0, deck_height-2]) {\n        // Wheel hub\n        cylinder(h=paddle_thickness, d=10, center=true, $fn=16);\n        \n        // Paddles\n        for(i=[0:15:345]) {\n            rotate([0, 0, i])\n            translate([paddle_radius-2, 0, 0]) {\n                // Paddle blade\n                cube([8, 2, paddle_thickness-1], center=true);\n                \n                // Support brace\n                translate([-4, 0, 0])\n                    cylinder(h=paddle_thickness-1, d=2, center=true, $fn=8);\n            }\n        }\n        \n        // Outer rim\n        cylinder(h=paddle_thickness+0.5, d=paddle_radius*2+2, center=true, $fn=32);\n    }\n}\n\n// Cabin structure\nmodule cabin() {\n    translate([-5, 0, deck_height]) {\n        difference() {\n            // Main cabin\n            cube([25, hull_width-6, 12], center=true);\n            \n            // Door\n            translate([10, 0, -5])\n                cube([4, 3, 6], center=true);\n            \n            // Windows\n            for(x=[-5:8:5]) {\n                translate([x, (hull_width-6)/2-1, 2])\n                    cube([4, 1, 3], center=true);\n                translate([x, -(hull_width-6)/2+1, 2])\n                    cube([4, 1, 3], center=true);\n            }\n        }\n        \n        // Roof\n        translate([0, 0, 7])\n            scale([1.1, 1.1, 0.5])\n            cube([25, hull_width-6, 2], center=true);\n    }\n}\n\n// Smokestacks\nmodule smokestacks() {\n    translate([-15, 0, deck_height]) {\n        difference() {\n            cylinder(h=chimney_height, r=chimney_radius, $fn=16);\n            // Hollow top\n            translate([0, 0, chimney_height-1])\n                cylinder(h=2, r=chimney_radius-1.5, $fn=16);\n        }\n        \n        // Second smaller stack\n        translate([5, 5, 0])\n            scale([0.7, 0.7, 0.8])\n            difference() {\n                cylinder(h=chimney_height-2, r=chimney_radius-1, $fn=16);\n                translate([0, 0, chimney_height-3])\n                    cylinder(h=2, r=chimney_radius-2.5, $fn=16);\n            }\n    }\n}\n\n// Main assembly\nunion() {\n    hull();\n    paddlewheel();\n    cabin();\n    smokestacks();\n    \n    // Deck details\n    translate([0, 0, deck_height]) {\n        // Life rings\n        color(\"red\")\n        translate([hull_length/2-10, hull_width/2+3, 2])\n            rotate([90, 0, 0])\n            cylinder(h=2, r1=3, r2=3, $fn=32);\n        \n        // Anchor\n        translate([-hull_length/2+5, 0, -1])\n            cube([2, 4, 2], center=true);\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "longboat",
    "openscad_code": "// Realistic Longboat – Medium Complexity\n// Approx. 80 mm long, 3 mm wall thickness for 3 D printing\n// No overhangs >45°, all surfaces printable\n\n$fn = 48;           // Good balance of smoothness vs file size\nwall = 3;           // Uniform wall thickness\n\nmodule hull() {\n    // Full length of the boat\n    length = 80;\n    beam   = 16;     // Max width at midship\n    depth  =  8;     // Max depth amidships\n\n    // Keel line – lower half of elongated ellipse\n    difference() {\n        scale([1, 0.5, 1])\n            cylinder(h = length, d = beam, center = true);\n        translate([0, 0, -length/2 - 1])\n            cube([beam*2, beam*2, length+2], center = true);\n    }\n\n    // Upper sheer line – same ellipse shifted up\n    translate([0, 0, depth])\n        scale([1, 0.5, 1])\n            cylinder(h = length, d = beam, center = true);\n}\n\nmodule hollow_hull() {\n    difference() {\n        hull();\n        translate([0, 0, -wall])  // Uniform wall thickness inside\n            scale([1 - 2*wall/beam, 0.5 - wall/beam, 1])\n                cylinder(h = 80 + 2*wall, d = beam, center = true);\n    }\n}\n\nmodule deck_planks() {\n    plank_w = 3;\n    plank_gap = 1;\n    n_planks = floor(16 / (plank_w + plank_gap));\n\n    for (i = [0 : n_planks-1]) {\n        translate([0, -8 + i*(plank_w + plank_gap) + plank_w/2, 8-0.5])\n            cube([76, plank_w, 1], center = true);\n    }\n}\n\nmodule mast() {\n    mast_h = 35;\n    mast_d = 2.5;\n\n    translate([20, 0, 8])\n        cylinder(h = mast_h, d = mast_d);\n    // Mast step reinforcement\n    translate([20, 0, 8])\n        cylinder(h = wall, d = mast_d + wall);\n}\n\nmodule benches() {\n    for (x = [-20 : 20 : 20]) {\n        translate([x, 0, 7])\n            cube([12, 10, 1], center = true);\n    }\n}\n\nmodule oars() {\n    oar_l = 25;\n    blade_w = 4;\n\n    for (side = [-1, 1]) {\n        translate([10*side, side*9, 10])\n            rotate([0, 90, 0])\n                union() {\n                    cylinder(h = oar_l, d = 1.2);\n                    translate([oar_l-3, 0, 0])\n                        rotate([0, 90, 0])\n                            scale([1, 0.3, 1])\n                                cylinder(h = blade_w, d = 8);\n                }\n    }\n}\n\nmodule stern_rudder() {\n    translate([-42, 0, 2])\n        rotate([0, 0, 0])\n            union() {\n                cube([wall, 3, 8], center = true);\n                translate([0, 0, -5])\n                    cube([wall, 6, 2], center = true);\n            }\n}\n\ndifference() {\n    union() {\n        hollow_hull();\n        deck_planks();\n        mast();\n        benches();\n        stern_rudder();\n    }\n    // Drain hole at bow for resin printing\n    translate([42, 0, 4])\n        rotate([0, 90, 0])\n            cylinder(h = wall+2, d = 3);\n}\n\n// Optional oars lying inside for transport\n// oars();",
    "renders": true
  },
  {
    "vehicle": "coracle",
    "openscad_code": "// Coracle - traditional round fishing boat\n// Medium complexity realistic style\n\n$fn = 36;  // Smooth curves for 3D printing\n\n// Overall dimensions\ncoracle_diameter = 80;\ncoracle_height = 25;\nwall_thickness = 2;\nfloor_thickness = 2;\n\nmodule coracle_body() {\n    // Main hull - inverted bowl shape with flat bottom\n    difference() {\n        // Outer shell\n        scale([1, 1, 0.7])\n        sphere(d = coracle_diameter);\n        \n        // Hollow interior\n        translate([0, 0, -wall_thickness])\n        scale([1, 1, 0.68])\n        sphere(d = coracle_diameter - 2*wall_thickness);\n        \n        // Flat bottom cut\n        translate([0, 0, -coracle_height/2])\n        cube([coracle_diameter, coracle_diameter, coracle_height], center=true);\n    }\n    \n    // Add floor\n    translate([0, 0, -coracle_height/2 + floor_thickness/2])\n    cylinder(h = floor_thickness, d = coracle_diameter - 2*wall_thickness, center=true);\n}\n\nmodule seat_supports() {\n    // Three radial seat supports\n    for(i = [0:120:359]) {\n        rotate([0, 0, i])\n        translate([0, (coracle_diameter - wall_thickness)/4, 0])\n        cube([wall_thickness*2, (coracle_diameter - wall_thickness)/2, wall_thickness*2], center=true);\n    }\n}\n\nmodule seat() {\n    // Circular seat\n    translate([0, 0, wall_thickness*2])\n    cylinder(h = wall_thickness, d = (coracle_diameter - wall_thickness)/2, center=true);\n}\n\nmodule lacing_holes() {\n    // Holes around rim for leather lacing\n    hole_diameter = 2;\n    rim_radius = coracle_diameter/2 - wall_thickness/2;\n    \n    for(i = [0:20:359]) {\n        rotate([0, 0, i])\n        translate([rim_radius, 0, coracle_height/2 - wall_thickness])\n        rotate([90, 0, 0])\n        cylinder(h = wall_thickness*2, d = hole_diameter, center=true);\n    }\n}\n\nmodule frame_reinforcement() {\n    // Internal wooden frame ribs\n    rib_height = coracle_height - wall_thickness*2;\n    \n    for(i = [0:45:359]) {\n        rotate([0, 0, i])\n        translate([0, 0, -rib_height/2])\n        cube([wall_thickness, coracle_diameter/2 - wall_thickness, rib_height], center=true);\n    }\n}\n\nmodule handles() {\n    // Two carrying handles\n    handle_width = 8;\n    handle_thickness = 2;\n    \n    // Handle 1\n    translate([coracle_diameter/2 - wall_thickness, 0, coracle_height/2 - wall_thickness])\n    rotate([0, 90, 0])\n    difference() {\n        cylinder(h = handle_width, d = handle_thickness*2);\n        cylinder(h = handle_width + 0.1, d = handle_thickness);\n    }\n    \n    // Handle 2\n    translate([-coracle_diameter/2 + wall_thickness, 0, coracle_height/2 - wall_thickness])\n    rotate([0, 90, 0])\n    difference() {\n        cylinder(h = handle_width, d = handle_thickness*2);\n        cylinder(h = handle_width + 0.1, d = handle_thickness);\n    }\n}\n\n// Assemble the coracle\nunion() {\n    coracle_body();\n    frame_reinforcement();\n    seat_supports();\n    seat();\n    lacing_holes();\n    handles();\n}",
    "renders": true
  },
  {
    "vehicle": "pram",
    "openscad_code": "// Realistic medium-complexity 3D-printable pram\n// Overall length ~80 mm, width ~40 mm, height ~65 mm\n\n$fn = 32;  // Smooth curves for 3D printing\n\n// Main assembly\npram();\n\nmodule pram() {\n    // Base frame\n    color(\"lightgray\") {\n        translate([0, 0, 10]) frame();\n    }\n\n    // Cabin / bassinet\n    color(\"beige\") {\n        translate([-5, 0, 25]) cabin();\n    }\n\n    // Wheels\n    color(\"black\") {\n        wheels();\n    }\n\n    // Handle\n    color(\"silver\")\n        translate([35, 0, 35]) handle();\n}\n\nmodule frame() {\n    // Bottom chassis rails\n    for (y = [-15, 15])\n        translate([0, y, 0])\n            cube([50, 4, 3], center = true);\n\n    // Front arch\n    translate([-20, 0, 2])\n        rotate([0, 90, 0])\n            cylinder(h = 30, r = 2);\n\n    // Rear arch\n    translate([20, 0, 2])\n        rotate([0, 90, 0])\n            cylinder(h = 30, r = 2);\n\n    // Upright posts at corners\n    for (x = [-20, 20])\n        for (y = [-15, 15])\n            translate([x, y, 8])\n                cylinder(h = 16, r = 1.5);\n}\n\nmodule cabin() {\n    difference() {\n        // Main hull\n        hull() {\n            translate([-10, -15, 0])\n                sphere(r = 7);\n            translate([-10, 15, 0])\n                sphere(r = 7);\n            translate([10, -15, 0])\n                sphere(r = 7);\n            translate([10, 15, 0])\n                sphere(r = 7);\n        }\n\n        // Interior cavity\n        translate([0, 0, -4])\n            scale([0.8, 0.8, 0.7])\n                hull() {\n                    translate([-10, -15, 0])\n                        sphere(r = 7);\n                    translate([-10, 15, 0])\n                        sphere(r = 7);\n                    translate([10, -15, 0])\n                        sphere(r = 7);\n                    translate([10, 15, 0])\n                        sphere(r = 7);\n                }\n\n        // Hood opening cut\n        translate([-14, 0, 8])\n            rotate([0, 30, 0])\n                cube([20, 35, 20], center = true);\n    }\n\n    // Hood\n    translate([-15, 0, 10])\n        rotate([0, 30, 0])\n            difference() {\n                scale([1, 1.2, 0.8])\n                    sphere(r = 12);\n                translate([0, 0, -8])\n                    cube([30, 40, 15], center = true);\n            }\n}\n\nmodule wheels() {\n    // Front axle\n    translate([-20, 0, 2])\n        rotate([90, 0, 0])\n            cylinder(h = 35, r = 1.5);\n\n    // Rear axle\n    translate([20, 0, 2])\n        rotate([90, 0, 0])\n            cylinder(h = 35, r = 1.5);\n\n    // Wheels on axles\n    for (x = [-20, 20])\n        for (y = [-17, 17]) {\n            translate([x, y, 0])\n                rotate([0, 0, 0])\n                    wheel();\n        }\n}\n\nmodule wheel() {\n    difference() {\n        // Tire\n        cylinder(h = 5, r = 8);\n\n        // Hub hole (for easy printing/assembly)\n        translate([0, 0, -1])\n            cylinder(h = 7, r = 2);\n    }\n\n    // Rim detail\n    translate([0, 0, 2.5])\n        cylinder(h = 0.5, r = 6);\n\n    // Spokes for strength\n    for (a = [0:60:300])\n        rotate([0, 0, a])\n            translate([3, 0, 2.5])\n                cube([6, 1, 0.5], center = true);\n}\n\nmodule handle() {\n    // Vertical posts\n    for (y = [-10, 10])\n        translate([0, y, 0])\n            cylinder(h = 25, r = 1.5);\n\n    // Horizontal bar\n    translate([0, 0, 25])\n        rotate([90, 0, 0])\n            cylinder(h = 22, r = 1.5);\n\n    // Grips\n    for (y = [-10, 10])\n        translate([0, y, 25])\n            sphere(r = 2);\n}",
    "renders": true
  },
  {
    "vehicle": "runabout",
    "openscad_code": "// OpenSCAD Runabout - Realistic Medium Detail\n// Overall size ~75 mm length\n\n$fn = 32;\n\n// Main dimensions\nhull_length = 75;\nhull_width = 30;\nhull_height = 12;\nnose_taper = 25;\n\nmodule hull() {\n    // Main hull body\n    difference() {\n        union() {\n            // Central body\n            cube([hull_length, hull_width, hull_height], center = true);\n            \n            // Tapered nose\n            translate([(hull_length - nose_taper)/2, 0, 0])\n                scale([1, 1, hull_height/hull_width])\n                sphere(d = hull_width);\n            \n            // Raised cockpit area\n            translate([0, 0, hull_height/2 + 2])\n                cube([hull_length*0.6, hull_width*0.8, 6], center = true);\n        }\n        \n        // Cockpit cutout\n        translate([0, 0, hull_height/2 + 4])\n            cube([hull_length*0.5, hull_width*0.6, 8], center = true);\n    }\n}\n\nmodule nacelles() {\n    // Port nacelle\n    translate([-hull_length*0.3, hull_width/2 + 10, 0])\n        rotate([0, 90, 0])\n        cylinder(h = 20, d1 = 10, d2 = 8);\n    \n    // Starboard nacelle\n    translate([-hull_length*0.3, -hull_width/2 - 10, 0])\n        rotate([0, 90, 0])\n        cylinder(h = 20, d1 = 10, d2 = 8);\n    \n    // Pylons\n    for (y = [hull_width/2 + 5, -hull_width/2 - 5]) {\n        translate([-hull_length*0.2, y, -2])\n            cube([5, 2, 4]);\n    }\n}\n\nmodule impulse_engine() {\n    // Rear impulse engine housing\n    translate([-hull_length/2 - 2, 0, 0])\n        cube([4, hull_width*0.7, 6], center = true);\n    \n    // Glow detail\n    translate([-hull_length/2 - 1, 0, 0])\n        color(\"red\")\n        cube([2, hull_width*0.5, 4], center = true);\n}\n\nmodule windows() {\n    // Cockpit windows\n    for (i = [-1, 0, 1]) {\n        translate([i * 10, hull_width/2 - 1, hull_height/2 + 5])\n            cube([6, 1, 3]);\n    }\n    \n    // Side windows\n    for (pos = [-20, -10, 0, 10, 20]) {\n        translate([pos, hull_width/2 - 1, 2])\n            cube([4, 1, 2]);\n    }\n}\n\nmodule landing_struts() {\n    // Front struts\n    for (x = [15, -15]) {\n        translate([x, hull_width/2 - 5, -hull_height/2 - 5])\n            cylinder(h = 5, d = 2);\n    }\n    \n    // Rear struts\n    for (x = [-25, -35]) {\n        translate([x, hull_width/2 - 5, -hull_height/2 - 5])\n            cylinder(h = 5, d = 2);\n    }\n    \n    // Mirror for other side\n    mirror([0, 1, 0]) {\n        // Front struts\n        for (x = [15, -15]) {\n            translate([x, hull_width/2 - 5, -hull_height/2 - 5])\n                cylinder(h = 5, d = 2);\n        }\n        \n        // Rear struts\n        for (x = [-25, -35]) {\n            translate([x, hull_width/2 - 5, -hull_height/2 - 5])\n                cylinder(h = 5, d = 2);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    hull();\n    nacelles();\n    impulse_engine();\n    windows();\n    landing_struts();\n}",
    "renders": true
  },
  {
    "vehicle": "jetboat",
    "openscad_code": "// Jetboat OpenSCAD Model\n// Realistic style, medium complexity\n\n// Overall dimensions (mm)\nhull_length = 80;\nhull_width = 30;\nhull_height = 12;\n\n// Wall thickness for 3D printing\nwall = 1.5;\n\nmodule hull() {\n    difference() {\n        // Main hull - tapered front with flat bottom\n        hull_shape();\n        \n        // Hollow out the hull\n        translate([wall, wall, wall])\n        scale([0.9, 0.8, 0.7])\n        hull_shape();\n    }\n}\n\nmodule hull_shape() {\n    // Create tapered hull using hull() of scaled cubes\n    hull() {\n        // Front point\n        translate([hull_length - 2, hull_width/2, hull_height/2])\n        scale([0.1, 0.1, 0.5])\n        sphere(d=10);\n        \n        // Rear\n        translate([0, hull_width/2, hull_height/2])\n        cube([5, hull_width, hull_height], center=false);\n    }\n    \n    // Add chine edges for planing surface\n    for(side = [-1, 1]) {\n        translate([10, side * hull_width/2, 0])\n        rotate([0, 0, side * -10])\n        cube([60, wall, hull_height]);\n    }\n}\n\nmodule deck() {\n    translate([0, 0, hull_height])\n    difference() {\n        // Main deck surface\n        cube([hull_length, hull_width, wall]);\n        \n        // Cockpit opening\n        translate([30, hull_width/2, -1])\n        cube([25, hull_width - 10, wall + 2]);\n    }\n}\n\nmodule windshield() {\n    // Wrap-around windshield\n    translate([40, hull_width/2, hull_height + wall])\n    rotate([15, 0, 0])\n    difference() {\n        // Main frame\n        cube([20, hull_width - 6, 8]);\n        \n        // Window openings\n        translate([2, 3, 2])\n        cube([16, hull_width - 12, 6]);\n    }\n}\n\nmodule jet_intake() {\n    // Intake grate at bottom rear\n    translate([5, hull_width/2, 0])\n    cube([10, hull_width - 4, wall]);\n    \n    // Intake tunnel\n    translate([8, hull_width/2, -wall])\n    cylinder(h=wall*2, d=hull_width/3);\n}\n\nmodule jet_nozzle() {\n    // Steering nozzle\n    translate([-5, hull_width/2, hull_height/2])\n    rotate([0, 90, 0])\n    cylinder(h=8, d1=6, d2=4);\n    \n    // Nozzle pivot\n    translate([-5, hull_width/2, hull_height/2])\n    sphere(d=4);\n}\n\nmodule seats() {\n    // Driver seat\n    translate([35, hull_width/2 - 8, hull_height + wall])\n    cube([8, 6, 4]);\n    \n    // Passenger seat\n    translate([35, hull_width/2 + 8, hull_height + wall])\n    cube([8, 6, 4]);\n}\n\nmodule engine_hatch() {\n    // Removable engine access\n    translate([15, hull_width/2 - 10, hull_height + wall])\n    cube([20, 20, wall]);\n}\n\nmodule grab_rails() {\n    // Side rails\n    for(side = [-1, 1]) {\n        translate([hull_length/2, side * hull_width/2, hull_height + wall])\n        rotate([90, 0, 0])\n        cylinder(h=20, d=1.5);\n    }\n}\n\n// Assembly\nhull();\ndeck();\nwindshield();\njet_intake();\njet_nozzle();\nseats();\nengine_hatch();\ngrab_rails();",
    "renders": true
  },
  {
    "vehicle": "rib",
    "openscad_code": "// Realistic 3D printable human rib (medium complexity)\n// Approximate length: 80 mm\n\nrib_height = 80;      // Total rib length\nrib_thickness = 3;    // Wall thickness for printing\nhead_diameter = 12;   // Rib head at vertebral end\nneck_length = 8;      // Neck between head and tubercle\ntubercle_size = 6;    // Tubercle at vertebral end\nshaft_width = 8;      // Shaft width at narrowest\nshaft_thick = 4;      // Shaft thickness\n\n// Main rib module\nmodule rib() {\n    // Vertebral end - head\n    translate([0, 0, 0])\n        sphere(d = head_diameter, $fn = 20);\n    \n    // Neck\n    translate([0, 0, -neck_length/2 - head_diameter/2])\n        cylinder(h = neck_length, d1 = head_diameter * 0.7, d2 = head_diameter * 0.5, $fn = 16);\n    \n    // Tubercle\n    translate([tubercle_size/2 + 2, 0, -neck_length - head_diameter/2])\n        sphere(d = tubercle_size, $fn = 16);\n    \n    // Main shaft - curved\n    difference() {\n        // Outer shaft\n        union() {\n            for(i = [0:5:75]) {\n                angle = i * 1.2;\n                radius = 35 - i * 0.3;\n                x = cos(angle) * radius;\n                y = sin(angle) * radius;\n                z = -i - head_diameter/2 - neck_length;\n                \n                translate([x, y, z])\n                    rotate([0, 0, angle * 57.3])\n                    scale([1 - i/150, 1, 1])\n                    cube([shaft_width, shaft_thick, 5], center = true);\n            }\n        }\n        \n        // Inner hollow\n        union() {\n            for(i = [0:5:75]) {\n                angle = i * 1.2;\n                radius = 35 - i * 0.3;\n                x = cos(angle) * radius;\n                y = sin(angle) * radius;\n                z = -i - head_diameter/2 - neck_length;\n                \n                translate([x, y, z])\n                    rotate([0, 0, angle * 57.3])\n                    scale([1 - i/150 - 0.2, 1 - 0.2, 1])\n                    cube([shaft_width - rib_thickness*2, shaft_thick - rib_thickness*2, 6], center = true);\n            }\n        }\n    }\n    \n    // Costal groove (bottom of shaft)\n    for(i = [20:5:70]) {\n        angle = i * 1.2;\n        radius = 35 - i * 0.3;\n        x = cos(angle) * radius;\n        y = sin(angle) * radius - shaft_thick/2 - 0.5;\n        z = -i - head_diameter/2 - neck_length;\n        \n        translate([x, y, z])\n            rotate([0, 0, angle * 57.3])\n            cube([shaft_width * 0.6, 1, 6], center = true);\n    }\n    \n    // Sternum end - flattened\n    translate([cos(90) * 15, sin(90) * 15, -75 - head_diameter/2 - neck_length])\n        rotate([0, 0, 90 * 57.3])\n        scale([1.5, 0.7, 1])\n        cube([shaft_width * 1.2, shaft_thick, 5], center = true);\n}\n\n// Generate the rib\nrib();",
    "renders": true
  },
  {
    "vehicle": "rigidinflatable",
    "openscad_code": "// Rigid-Inflatable Boat (RIB) – 1:30 scale, 3D-printable, medium detail\n// Overall length ≈ 85 mm, beam ≈ 30 mm, printable without supports\n\n$fn = 32;                // Smooth curves\nhull_thk = 1.2;          // Wall thickness for FDM printing\nscale_factor = 1;\n\nmodule tube_profile(r, l) {\n    // Inflatable tube cross-section (hollow torus segment)\n    difference() {\n        translate([0, 0, -r]) cylinder(h = l, r = r, center = true);\n        translate([0, 0, -r + hull_thk]) cylinder(h = l + 0.1, r = r - hull_thk, center = true);\n    }\n}\n\nmodule tube_half(length, r, sweep) {\n    // One continuous tube following a gentle arc\n    for (i = [0 : sweep])\n        translate([i * length / sweep, 0, -r * sin(i * 180 / sweep)])\n            rotate([0, 90, 0])\n                tube_profile(r, length / sweep + 0.2);\n}\n\nmodule hull_bottom() {\n    // V-shaped rigid hull bottom\n    difference() {\n        hull() {\n            translate([-42, 0, -3]) cube([84, 30, 6], center = true);\n            translate([-42, 0, -8]) cube([84, 26, 6], center = true);\n        }\n        translate([0, 0, 1]) cube([100, 40, 10], center = true);\n    }\n}\n\nmodule deck() {\n    // Flat deck with non-slip texture (simple ribs)\n    difference() {\n        translate([0, 0, 0]) cube([70, 28, hull_thk], center = true);\n        for (x = [-30 : 10 : 30])\n            translate([x, 0, -0.1]) cube([2, 28, hull_thk + 0.2], center = true);\n    }\n}\n\nmodule bench() {\n    // Simple driver bench\n    translate([-10, 0, hull_thk])\n        cube([20, 20, 3], center = true);\n}\n\nmodule engine_block() {\n    // Outboard motor silhouette\n    translate([38, 0, 2]) {\n        union() {\n            cube([10, 8, 6], center = true);\n            translate([5, 0, 3]) cube([4, 4, 4], center = true);\n        }\n    }\n}\n\nmodule lifeline() {\n    // Safety rope along tubes\n    color(\"white\")\n    for (t = [0, 1]) {\n        mirror([0, t ? 1 : 0, 0])\n            translate([0, 13.5, 2])\n                rotate([90, 0, 0])\n                    cylinder(h = 80, r = 0.6, center = false);\n    }\n}\n\nmodule rib_assembly() {\n    union() {\n        hull_bottom();\n        tube_half(80, 7.5, 20);\n        mirror([0, 1, 0]) tube_half(80, 7.5, 20);\n        deck();\n        bench();\n        engine_block();\n        lifeline();\n    }\n}\n\nscale([scale_factor, scale_factor, scale_factor])\n    rib_assembly();",
    "renders": true
  },
  {
    "vehicle": "outrigger",
    "openscad_code": "// Realistic Medium-Complexity Outrigger for 3D printing\n// Overall length ~80 mm, width ~60 mm\n\nmodule outrigger_assembly() {\n    // Main hull body\n    difference() {\n        hull_body();\n        // Drain hole\n        translate([0, 0, -1])\n            cylinder(h=12, d=4, $fn=20);\n    }\n\n    // Cross arms\n    cross_arms();\n\n    // Floats\n    float(-45, 0, 0);\n    float(45, 0, 0);\n}\n\nmodule hull_body() {\n    // Base hull shape\n    difference() {\n        union() {\n            // Central hull\n            translate([0, 0, 5])\n                scale([1, 0.6, 0.4])\n                    sphere(d=20, $fn=40);\n            // Hull extension\n            translate([0, 0, 0])\n                cube([35, 12, 10], center=true);\n        }\n        // Cockpit cavity\n        translate([0, 0, 7])\n            cube([25, 8, 4], center=true);\n    }\n\n    // Deck details\n    for (i = [-12:6:12]) {\n        translate([i, 0, 10])\n            cube([3, 8, 1], center=true);\n    }\n}\n\nmodule cross_arms() {\n    // Main cross beam\n    translate([0, 0, 8])\n        rotate([0, 90, 0])\n            cylinder(h=100, d=6, $fn=20);\n\n    // Support braces\n    for (side = [-1, 1]) {\n        translate([side * 35, 0, 5])\n            rotate([0, 45 * side, 0])\n                cylinder(h=20, d1=6, d2=4, $fn=20);\n    }\n}\n\nmodule float(x, y, z) {\n    translate([x, y, z]) {\n        // Main float body\n        difference() {\n            scale([0.3, 0.15, 0.15])\n                sphere(d=35, $fn=30);\n            // Water channel\n            translate([0, 0, -3])\n                cube([20, 2, 6], center=true);\n        }\n\n        // End caps\n        translate([0, 0, 0]) {\n            // Front cap\n            translate([10, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h=3, d1=5, d2=0, $fn=20);\n            // Rear cap\n            translate([-10, 0, 0])\n                rotate([0, -90, 0])\n                    cylinder(h=3, d1=5, d2=0, $fn=20);\n        }\n\n        // Connection point\n        translate([0, 0, 5])\n            cylinder(h=8, d=4, $fn=16);\n    }\n}\n\n// Render the model\noutrigger_assembly();",
    "renders": true
  },
  {
    "vehicle": "proa",
    "openscad_code": "// Proa model for 3D printing\n// Medium complexity realistic style\n\n// Overall dimensions\nhull_length = 80;\nhull_width = 15;\nhull_height = 8;\nama_length = 60;\nama_width = 10;\nama_height = 6;\naka_length = 40;\naka_width = 4;\naka_height = 4;\nmast_height = 35;\nmast_diameter = 3;\n\n// Hull module - main vaka\nmodule main_hull() {\n    difference() {\n        // Main hull body\n        hull_shape();\n        \n        // Cockpit cutout\n        translate([0, 0, -1])\n            cube([30, 10, hull_height + 2], center = true);\n    }\n}\n\n// Create the curved hull shape\nmodule hull_shape() {\n    hull() {\n        // Bow\n        translate([hull_length/2 - 5, 0, 0])\n            sphere(d = hull_width);\n        \n        // Stern\n        translate([-hull_length/2 + 5, 0, 0])\n            sphere(d = hull_width * 0.8);\n            \n        // Mid sections\n        for (i = [-hull_length/2 + 10:10:hull_length/2 - 10]) {\n            translate([i, 0, 0])\n                sphere(d = hull_width * 0.9);\n        }\n    }\n    \n    // Flat deck\n    translate([0, 0, hull_height/2])\n        cube([hull_length, hull_width * 0.9, hull_height/2], center = true);\n}\n\n// Ama (outrigger)\nmodule outrigger() {\n    translate([0, -25, 0])\n        rotate([0, 0, 0])\n            difference() {\n                hull() {\n                    // Ama shape\n                    for (i = [-ama_length/2 + 5:10:ama_length/2 - 5]) {\n                        translate([i, 0, 0])\n                            sphere(d = ama_width);\n                    }\n                }\n                // Flat top\n                translate([0, 0, ama_height/2])\n                    cube([ama_length + 10, ama_width * 0.8, ama_height], center = true);\n            }\n}\n\n// Aka (crossbeam)\nmodule crossbeam() {\n    translate([0, -12.5, 0])\n        cube([aka_length, aka_width, aka_height], center = true);\n}\n\n// Mast\nmodule mast() {\n    translate([-5, 0, 0])\n        cylinder(h = mast_height, d = mast_diameter, $fn = 16);\n}\n\n// Boom\nmodule boom() {\n    rotate([90, 0, 0])\n        translate([0, 0, mast_height/2])\n            cylinder(h = 25, d = 2, center = true, $fn = 8);\n}\n\n// Rigging lines\nmodule rigging() {\n    // Fore stay\n    color(\"gray\")\n        translate([-5, 0, mast_height])\n            cylinder(h = 35, d = 0.5, center = false, $fn = 4);\n    \n    // Shroud lines\n    for (angle = [45, 135]) {\n        rotate([0, 0, angle])\n            translate([-5, 0, mast_height * 0.8])\n                cylinder(h = 20, d = 0.5, center = false, $fn = 4);\n    }\n}\n\n// Assembly\nunion() {\n    // Main hull\n    main_hull();\n    \n    // Outrigger assembly\n    union() {\n        outrigger();\n        crossbeam();\n    }\n    \n    // Mast and rigging\n    union() {\n        mast();\n        boom();\n        rigging();\n    }\n    \n    // Deck details\n    translate([0, 0, hull_height/2 + 0.5])\n        cube([hull_length - 10, hull_width - 4, 1], center = true);\n    \n    // Bow eye\n    translate([hull_length/2, 0, 0])\n        rotate([90, 0, 0])\n            cylinder(h = 2, d = 3, $fn = 16);\n}",
    "renders": true
  },
  {
    "vehicle": "waka",
    "openscad_code": "// Waka (Māori canoe) - Realistic style, medium complexity\n// Dimensions: ~90mm long, 25mm wide, 20mm tall\n\nmodule waka_hull() {\n    // Main hull as elongated ellipsoid\n    difference() {\n        scale([1, 0.6, 0.4]) \n            sphere(d=25, $fn=64);\n        \n        // Cut bottom flat\n        translate([0, 0, -6])\n            cube([30, 30, 12], center=true);\n        \n        // Hollow interior\n        scale([0.85, 0.5, 0.3]) \n            sphere(d=24.5, $fn=64);\n    }\n}\n\nmodule prow() {\n    // Curved prow piece\n    translate([11, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h=8, r1=5, r2=3, $fn=32);\n    \n    // Prow extension\n    translate([13, 0, 2])\n        scale([1.5, 0.5, 0.3])\n            sphere(d=6, $fn=32);\n}\n\nmodule stern() {\n    // Stern post\n    translate([-11, 0, 0])\n        rotate([0, -90, 0])\n            cylinder(h=6, r1=4, r2=2, $fn=32);\n}\n\nmodule gunwales() {\n    // Left gunwale\n    translate([0, 7.5, 0])\n        cube([20, 1, 3], center=true);\n    \n    // Right gunwale\n    translate([0, -7.5, 0])\n        cube([20, 1, 3], center=true);\n}\n\nmodule thwarts() {\n    // Cross beams/seats\n    for(i = [-7:5:7]) {\n        translate([i, 0, 1])\n            cube([2, 14, 0.5], center=true);\n    }\n}\n\nmodule tauihu() {\n    // Ornate prow figurehead\n    translate([14, 0, 5])\n        rotate([0, -15, 0])\n            scale([0.5, 0.3, 1])\n                sphere(d=4, $fn=16);\n    \n    // Carved spiral details\n    rotate([90, 0, 0])\n    for(a = [0:30:330]) {\n        rotate([0, 0, a])\n            translate([14, 0, 5.5])\n                cylinder(h=0.5, r=0.5, $fn=8);\n    }\n}\n\nmodule taurapa() {\n    // Stern post with carving\n    translate([-13, 0, 4])\n        rotate([0, 15, 0])\n            scale([0.4, 0.3, 2])\n                sphere(d=3, $fn=16);\n}\n\nmodule outrigger_supports() {\n    // Left support beams\n    translate([5, 10, 0])\n        cube([2, 8, 0.5], center=true);\n    \n    translate([-5, 10, 0])\n        cube([2, 8, 0.5], center=true);\n    \n    // Right support beams\n    mirror([0, 1, 0]) {\n        translate([5, 10, 0])\n            cube([2, 8, 0.5], center=true);\n        \n        translate([-5, 10, 0])\n            cube([2, 8, 0.5], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main hull structure\n    waka_hull();\n    \n    // Structural elements\n    gunwales();\n    thwarts();\n    \n    // Prow and stern\n    prow();\n    stern();\n    \n    // Decorative elements\n    tauihu();\n    taurapa();\n    \n    // Outrigger supports (optional for stability)\n    outrigger_supports();\n}\n\n// Scale to printable size\nscale([3.6, 3.6, 3.6]) children();",
    "renders": true
  },
  {
    "vehicle": "galley",
    "openscad_code": "// Realistic Galley - Medium Complexity\n// Hull, deck, mast, oars, and basic superstructure\n\n// Parameters\nhull_len = 80;\nhull_wid = 20;\nhull_hgt = 8;\ndeck_thk = 1.5;\nmast_len = 40;\n\n// Hull module with curved bottom and sides\nmodule hull() {\n    difference() {\n        // Main hull block\n        hull_block();\n        \n        // Carve out interior\n        translate([5, 0, -hull_hgt/2 + 1])\n            scale([0.9, 0.85, 0.9])\n                hull_block();\n    }\n}\n\n// Helper for hull shape\nmodule hull_block() {\n    hull_half();\n    mirror([0,1,0]) hull_half();\n}\n\nmodule hull_half() {\n    for (i = [0:5:80]) {\n        // Tapered hull shape\n        w = hull_wid/2 * (1 - i/hull_len * 0.7);\n        h = hull_hgt * (1 - pow(i/hull_len - 0.5, 2) * 4);\n        translate([i - hull_len/2, 0, -h/2])\n            scale([5, w, h])\n                sphere(1, $fn=8);\n    }\n}\n\n// Deck with rowing benches\nmodule deck() {\n    translate([0, 0, hull_hgt/2 - deck_thk/2])\n        cube([hull_len, hull_wid, deck_thk], center=true);\n    \n    // Rowing benches\n    for (x = [-25:10:25]) {\n        translate([x, 0, hull_hgt/2 + deck_thk/2 + 1])\n            cube([8, hull_wid - 4, 2], center=true);\n    }\n}\n\n// Single oar\nmodule oar(len = 25) {\n    union() {\n        // Handle\n        cylinder(h=len, r=0.5, center=true);\n        \n        // Blade\n        translate([0, 0, len/2 + 3])\n            scale([0.2, 3, 1])\n                sphere(3, $fn=16);\n    }\n}\n\n// Mast with cross spar\nmodule mast() {\n    translate([0, 0, hull_hgt/2 + deck_thk/2 + mast_len/2])\n        cylinder(h=mast_len, r=1.5, center=true);\n    \n    // Cross spar\n    translate([0, 0, hull_hgt/2 + deck_thk/2 + mast_len - 10])\n        rotate([90, 0, 0])\n            cylinder(h=30, r=0.8, center=true);\n}\n\n// Cabin at rear\nmodule cabin() {\n    translate([-hull_len/2 + 10, 0, hull_hgt/2 + deck_thk/2 + 4])\n        cube([15, hull_wid - 4, 8], center=true);\n    \n    // Roof\n    translate([-hull_len/2 + 10, 0, hull_hgt/2 + deck_thk/2 + 8 + 1.5])\n        cube([15, hull_wid - 4, 3], center=true);\n}\n\n// Bow decoration\nmodule bow() {\n    translate([hull_len/2 - 3, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h=6, r1=3, r2=0, center=true);\n}\n\n// Assembly\nunion() {\n    hull();\n    deck();\n    mast();\n    cabin();\n    bow();\n    \n    // Oars positioned along sides\n    for (x = [-30:10:30]) {\n        translate([x, hull_wid/2 + 2, hull_hgt/2 + deck_thk/2 + 3])\n            rotate([90, 0, 0])\n                oar();\n        translate([x, -hull_wid/2 - 2, hull_hgt/2 + deck_thk/2 + 3])\n            rotate([90, 0, 180])\n                oar();\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "cutter",
    "openscad_code": "// OpenSCAD Cookie Cutter – realistic, medium complexity\n// Approx. 70 mm tall, 60 mm wide – printable without supports\n// Wall thickness 1.2 mm, all outer edges chamfered\n\n// Parameters\ncutter_height = 20;      // vertical cutting wall\nhandle_height = 50;\nhandle_d = 20;\nwall = 1.2;              // shell thickness\nchamfer = 1.5;           // top edge bevel\nbody_d = 60;             // outer cutter diameter\ngrip_ridges = 8;         // grip rings on handle\nridge_depth = 0.5;\n\n// Main cutter body\ndifference() {\n    // Outer cylindrical wall\n    cylinder(h = cutter_height, d = body_d, $fn = 64);\n    // Hollow inside\n    translate([0, 0, -0.1])\n        cylinder(h = cutter_height + 0.2, d = body_d - 2*wall, $fn = 64);\n    // Top chamfer\n    translate([0, 0, cutter_height - chamfer])\n        cylinder(h = chamfer + 0.1, d1 = body_d - 2*wall, d2 = body_d, $fn = 64);\n}\n\n// Handle\nunion() {\n    // Handle shaft\n    translate([0, 0, cutter_height])\n        cylinder(h = handle_height, d = handle_d, $fn = 48);\n\n    // Grip ridges\n    for (i = [0 : grip_ridges - 1]) {\n        z = cutter_height + (i + 1)*(handle_height / (grip_ridges + 1));\n        translate([0, 0, z])\n            difference() {\n                cylinder(h = 2, d = handle_d + 2*ridge_depth, $fn = 48);\n                cylinder(h = 2.2, d = handle_d, $fn = 48);\n            }\n    }\n\n    // Top cap with rounded edge\n    translate([0, 0, cutter_height + handle_height])\n        union() {\n            cylinder(h = 4, d = handle_d + 2, $fn = 48);\n            translate([0, 0, 2])\n                sphere(d = handle_d + 2, $fn = 48);\n            translate([0, 0, 2])\n                cylinder(h = 2, d = handle_d, $fn = 48);\n        }\n}",
    "renders": true
  },
  {
    "vehicle": "brig",
    "openscad_code": "// Realistic Brig (Medium complexity, 3D-printable)\n// A brig is a two-masted, square-rigged sailing ship (prison hulk variant)\n\n// Overall scale\nscale = 1;\n\n// Hull dimensions\nhull_length = 80 * scale;\nhull_width = 25 * scale;\nhull_height = 12 * scale;\n\n// Bow & stern\nbow_height_add = 8 * scale;\nstern_height_add = 6 * scale;\n\n// Mast & spars\nmast_diam = 2.4 * scale;\nmast_height = 50 * scale;\nboom_length = 35 * scale;\ngaff_length = 25 * scale;\n\n// Wall thickness for printability\nwall = 1.2 * scale;\n\n// Simple rounded bilge hull module\nmodule hull_block() {\n    difference() {\n        union() {\n            // Main hull body\n            hull_profile();\n            // Bow with added height\n            translate([hull_length/2 - hull_width/2, 0, 0])\n                scale([1, 1, 1 + bow_height_add/hull_height])\n                    hull_profile();\n            // Stern with added height\n            translate([-hull_length/2 + hull_width/2, 0, 0])\n                scale([1, 1, 1 + stern_height_add/hull_height])\n                    hull_profile();\n        }\n        // Carve out interior for printability\n        offset_hull = 3 * wall;\n        translate([0, 0, hull_height/2 + offset_hull/2])\n            cube([hull_length - offset_hull, hull_width - offset_hull, hull_height + offset_hull], center = true);\n    }\n}\n\n// Single \"slice\" of hull used for shaping\nmodule hull_profile() {\n    translate([0, 0, hull_height/2])\n        scale([1, 0.8, 1])\n            cube([hull_length, hull_width, hull_height], center = true);\n}\n\n// Deck surface with gunports\nmodule deck() {\n    difference() {\n        // Main deck plate\n        translate([0, 0, hull_height])\n            cube([hull_length - wall*2, hull_width - wall*2, wall], center = true);\n        // Hatch openings\n        for (x = [-hull_length/4, hull_length/4])\n            translate([x, 0, hull_height + wall/2])\n                cube([6 * scale, 10 * scale, wall + 0.1], center = true);\n    }\n}\n\n// Mast with square topsail yard\nmodule mast_and_spars(x_pos) {\n    // Mast\n    translate([x_pos, 0, 0])\n        cylinder(h = mast_height, d = mast_diam, $fn = 12);\n    // Lower yard\n    translate([x_pos, 0, mast_height * 0.55])\n        rotate([90, 0, 0])\n            cylinder(h = boom_length, d = mast_diam * 0.8, center = true, $fn = 8);\n    // Topsail yard\n    translate([x_pos, 0, mast_height * 0.75])\n        rotate([90, 0, 0])\n            cylinder(h = boom_length * 0.7, d = mast_diam * 0.7, center = true, $fn = 8);\n    // Gaff\n    translate([x_pos, 0, mast_height * 0.85])\n        rotate([90, 0, 45])\n            cylinder(h = gaff_length, d = mast_diam * 0.6, center = true, $fn = 8);\n}\n\n// Simple cabin aft\nmodule cabin() {\n    translate([-hull_length/2 + 5 * scale, 0, hull_height + wall])\n        cube([10 * scale, hull_width * 0.7, 8 * scale], center = true);\n}\n\n// Rail & stanchions\nmodule rail() {\n    stanchion_d = 1 * scale;\n    stanchion_h = 3 * scale;\n    count = 8;\n    step = (hull_length - 20 * scale) / (count - 1);\n    for (i = [0 : count - 1]) {\n        x = -hull_length/2 + 10 * scale + i * step;\n        translate([x, hull_width/2 - wall, hull_height + wall/2])\n            cylinder(h = stanchion_h, d = stanchion_d, $fn = 8);\n        translate([x, -hull_width/2 + wall, hull_height + wall/2])\n            cylinder(h = stanchion_h, d = stanchion_d, $fn = 8);\n    }\n    // Top rail\n    translate([0, hull_width/2 - wall, hull_height + wall/2 + stanchion_h - wall/2])\n        cube([hull_length - 10 * scale, wall, wall], center = true);\n    translate([0, -hull_width/2 + wall, hull_height + wall/2 + stanchion_h - wall/2])\n        cube([hull_length - 10 * scale, wall, wall], center = true);\n}\n\n// Anchor on bow\nmodule anchor() {\n    translate([hull_length/2 - 3 * scale, 0, hull_height/2])\n        union() {\n            // Shank\n            rotate([90, 0, 0])\n                cylinder(h = 5 * scale, d = 1 * scale, $fn = 8);\n            // Arms\n            for (a = [-30, 30])\n                rotate([0, 0, a])\n                    translate([1.5 * scale, 0, 2 * scale])\n                        rotate([90, 0, 0])\n                            cylinder(h = 4 * scale, d = 0.8 * scale, $fn = 6);\n        }\n}\n\nmodule brig() {\n    hull_block();\n    deck();\n    cabin();\n    rail();\n    // Two masts\n    mast_and_spars(hull_length * 0.25);\n    mast_and_spars(-hull_length * 0.25);\n    anchor();\n}\n\n// Render the brig\nbrig();",
    "renders": true
  },
  {
    "vehicle": "brigantine",
    "openscad_code": "// Brigantine - Medium Complexity, Realistic Style\n// Approx. 80 mm long, 30 mm wide, 60 mm tall\n\nhull_length = 80;\nhull_width = 25;\nhull_height = 15;\n\nmodule hull()\n{\n    difference()\n    {\n        // Main hull shape\n        hull_points = [\n            [-hull_length/2, 0, 0],\n            [ hull_length/2, 0, 0],\n            [-hull_length/2+10, hull_width/2, 0],\n            [-hull_length/2+10, -hull_width/2, 0],\n            [ hull_length/2-15, hull_width/2-5, 0],\n            [ hull_length/2-15, -hull_width/2+5, 0],\n            [-hull_length/2+5, 0, hull_height],\n            [ hull_length/2-20, 0, hull_height-5],\n            [-hull_length/2+10, hull_width/2-2, hull_height-2],\n            [-hull_length/2+10, -hull_width/2+2, hull_height-2],\n            [ hull_length/2-25, hull_width/2-7, hull_height-7],\n            [ hull_length/2-25, -hull_width/2+7, hull_height-7]\n        ];\n        \n        hull_faces = [\n            [0,2,4,1],\n            [0,1,5,3],\n            [2,8,10,4],\n            [3,5,11,9],\n            [0,3,9,2,8,6],\n            [1,4,10,5,11,7],\n            [6,8,10,7],\n            [6,7,11,9]\n        ];\n        \n        polyhedron(hull_points, hull_faces, convexity=10);\n        \n        // Hollow out interior\n        translate([0,0,2])\n        scale([0.8,0.8,0.8])\n        polyhedron(hull_points, hull_faces, convexity=10);\n    }\n}\n\nmodule deck()\n{\n    // Main deck\n    translate([0,0,hull_height-1])\n    cube([hull_length-30, hull_width-4, 2], center=true);\n    \n    // Forecastle\n    translate([-hull_length/2+15, 0, hull_height])\n    cube([20, hull_width-6, 4], center=true);\n    \n    // Quarterdeck\n    translate([hull_length/2-15, 0, hull_height])\n    cube([20, hull_width-6, 6], center=true);\n}\n\nmodule masts()\n{\n    // Main mast (lower)\n    translate([-5, 0, hull_height])\n    cylinder(h=45, d1=3, d2=2, $fn=8);\n    \n    // Fore mast\n    translate([-25, 0, hull_height])\n    cylinder(h=35, d1=2.5, d2=1.5, $fn=8);\n    \n    // Bowsprit\n    translate([-hull_length/2+5, 0, hull_height-5])\n    rotate([0,30,0])\n    cylinder(h=20, d=2, $fn=8);\n}\n\nmodule yards()\n{\n    // Main yard\n    translate([-5, 0, hull_height+25])\n    rotate([0,90,0])\n    cube([30, 1.5, 1.5], center=true);\n    \n    // Fore yard\n    translate([-25, 0, hull_height+20])\n    rotate([0,90,0])\n    cube([25, 1.5, 1.5], center=true);\n    \n    // Topsail yard on main\n    translate([-5, 0, hull_height+35])\n    rotate([0,90,0])\n    cube([20, 1.2, 1.2], center=true);\n}\n\nmodule sails()\n{\n    // Main course sail\n    translate([-5, 0, hull_height+15])\n    cube([28, 0.5, 20], center=true);\n    \n    // Fore course sail\n    translate([-25, 0, hull_height+12])\n    cube([22, 0.5, 16], center=true);\n    \n    // Main topsail\n    translate([-5, 0, hull_height+30])\n    cube([18, 0.5, 12], center=true);\n}\n\nmodule rigging()\n{\n    // Shrouds - simplified as thin cylinders\n    for(side = [-1, 1])\n    {\n        // Main mast shrouds\n        for(i = [-1:1])\n        {\n            translate([-5, side*(hull_width/2-2), hull_height+5+i*10])\n            cylinder(h=20, d=0.5, $fn=4);\n        }\n        \n        // Fore mast shrouds\n        for(i = [-1:1])\n        {\n            translate([-25, side*(hull_width/2-2), hull_height+5+i*8])\n            cylinder(h=15, d=0.5, $fn=4);\n        }\n    }\n}\n\nmodule cannons()\n{\n    // Port side cannons\n    for(pos = [-30:15:20])\n    {\n        translate([pos, hull_width/2-1, hull_height/2])\n        rotate([0,90,0])\n        cylinder(h=4, d=1.5, $fn=8);\n    }\n    \n    // Starboard cannons\n    for(pos = [-30:15:20])\n    {\n        translate([pos, -hull_width/2+1, hull_height/2])\n        rotate([0,90,0])\n        cylinder(h=4, d=1.5, $fn=8);\n    }\n}\n\nmodule details()\n{\n    // Wheel\n    translate([hull_length/2-10, 0, hull_height+6])\n    cylinder(h=2, d=4, $fn=16);\n    \n    // Anchor\n    translate([-hull_length/2+5, 0, hull_height-3])\n    cube([3, 2, 6]);\n    \n    // Railings\n    for(side = [-1, 1])\n    {\n        translate([0, side*(hull_width/2-1), hull_height+1])\n        cube([hull_length-30, 0.5, 3], center=true);\n    }\n}\n\nunion()\n{\n    hull();\n    deck();\n    masts();\n    yards();\n    sails();\n    rigging();\n    cannons();\n    details();\n}",
    "renders": true
  },
  {
    "vehicle": "barque",
    "openscad_code": "// Barque - Medium complexity realistic style\n// Approx 80mm long, 3D printable with no overhangs\n\nhull_length = 80;\nhull_width = 20;\nhull_height = 10;\ndeck_thickness = 2;\n\nmodule hull() {\n    difference() {\n        // Main hull shape\n        hull_shape();\n        \n        // Hollow out interior\n        translate([0, 0, -1])\n            scale([0.8, 0.8, 0.7])\n                hull_shape();\n    }\n}\n\nmodule hull_shape() {\n    // Create curved hull using cylinders\n    for(i = [0:4]) {\n        translate([i * hull_length/5 - hull_length/2, 0, 0])\n            rotate([90, 0, 0])\n                cylinder(h = hull_width/2 - i*1.5, d = hull_height*2 - i*2, $fn = 20);\n    }\n    \n    // Add pointed bow\n    translate([hull_length/2, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h = hull_height, d1 = hull_width, d2 = 0, $fn = 20);\n}\n\nmodule deck() {\n    translate([0, 0, hull_height])\n        cube([hull_length, hull_width, deck_thickness], center = true);\n}\n\nmodule forecastle() {\n    translate([-hull_length/3, 0, hull_height + deck_thickness])\n        cube([15, hull_width - 4, 8], center = true);\n}\n\nmodule quarterdeck() {\n    translate([hull_length/3, 0, hull_height + deck_thickness])\n        cube([20, hull_width - 2, 6], center = true);\n}\n\nmodule mast(base_x, base_y, height, diameter) {\n    // Mast\n    translate([base_x, base_y, hull_height + deck_thickness])\n        cylinder(h = height, d = diameter, $fn = 12);\n    \n    // Base reinforcement\n    translate([base_x, base_y, hull_height + deck_thickness])\n        cylinder(h = 3, d = diameter + 2, $fn = 12);\n}\n\nmodule yard(mast_x, mast_y, mast_height, yard_length, angle) {\n    translate([mast_x, mast_y, hull_height + deck_thickness + mast_height - 5])\n        rotate([0, angle, 0])\n            cube([yard_length, 1, 1], center = true);\n}\n\nmodule rudder() {\n    translate([hull_length/2 + 3, 0, hull_height - 3])\n        rotate([0, 10, 0])\n            cube([6, 3, hull_height], center = true);\n}\n\n// Main assembly\nunion() {\n    // Hull and superstructure\n    hull();\n    deck();\n    forecastle();\n    quarterdeck();\n    \n    // Three masts\n    mast(-hull_length/4, 0, 40, 3);    // Fore mast\n    mast(0, 0, 45, 3.5);               // Main mast\n    mast(hull_length/4, 0, 35, 2.5);   // Mizzen mast\n    \n    // Yards (horizontal spars)\n    yard(-hull_length/4, 0, 40, 30, 0);    // Fore yard\n    yard(0, 0, 45, 35, 0);                 // Main yard\n    yard(hull_length/4, 0, 35, 25, 0);     // Mizzen yard\n    \n    // Additional yards at different heights\n    yard(-hull_length/4, 0, 30, 20, 0);    // Fore topsail yard\n    yard(0, 0, 35, 25, 0);                 // Main topsail yard\n    \n    // Rudder\n    rudder();\n    \n    // Railings\n    for(x = [-hull_length/2 + 5:hull_length/2 - 5]) {\n        translate([x, hull_width/2 - 1, hull_height + deck_thickness])\n            cube([2, 1, 3]);\n        translate([x, -hull_width/2 + 1, hull_height + deck_thickness])\n            cube([2, 1, 3]);\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "clipper",
    "openscad_code": "// OpenSCAD Clipper – medium-complexity realistic finger-nail clipper\n// Designed for 3-D printing: 0.4 mm walls, no severe overhangs\n// Overall length ≈ 65 mm, width ≈ 15 mm, height ≈ 18 mm\n\n// General parameters\n$fn = 36;            // smooth curves\nwall = 1.2;          // wall thickness for 0.4 mm nozzle\nblade_gap = 0.4;     // clearance for blade shear\nlever_clear = 0.6;   // clearance for lever motion\n\n// ---------- Helper modules ----------\nmodule rounded_box(x, y, z, r) {\n    hull() {\n        translate([ r,  r, 0]) cylinder(h=z, r=r);\n        translate([x-r,  r, 0]) cylinder(h=z, r=r);\n        translate([x-r, y-r, 0]) cylinder(h=z, r=r);\n        translate([ r, y-r, 0]) cylinder(h=z, r=r);\n    }\n}\n\n// ---------- Upper blade ----------\nmodule upper_blade() {\n    difference() {\n        union() {\n            // main body\n            rounded_box(60, 12, 4, 2);\n            // curved cutting edge\n            translate([58, 6, 4])\n                rotate([90, 0, 0])\n                    cylinder(h=12, r1=10, r2=8);\n        }\n        // cutting groove\n        translate([52, 6, -0.5])\n            cube([10, blade_gap, 5]);\n        // pin hole\n        translate([8, 6, 2])\n            rotate([0, 90, 0])\n                cylinder(h=20, r=1.5, center=true);\n    }\n}\n\n// ---------- Lower blade ----------\nmodule lower_blade() {\n    difference() {\n        union() {\n            // mirror of upper blade but without lever hole\n            mirror([0, 0, 1])\n                rounded_box(60, 12, 4, 2);\n            mirror([0, 0, 1])\n                translate([58, 6, 0])\n                    rotate([90, 0, 0])\n                        cylinder(h=12, r1=8, r2=10);\n        }\n        // cutting groove\n        translate([52, 6, -0.5])\n            cube([10, blade_gap, 5]);\n        // pin hole\n        translate([8, 6, -2])\n            rotate([0, 90, 0])\n                cylinder(h=20, r=1.5, center=true);\n    }\n}\n\n// ---------- Pin ----------\nmodule pin() {\n    cylinder(h=14.8, r=1.5);\n    // chamfer\n    translate([0, 0, -0.2])\n        cylinder(h=2, r1=2, r2=1.5);\n    translate([0, 0, 13])\n        cylinder(h=2, r1=1.5, r2=2);\n}\n\n// ---------- Lever ----------\nmodule lever() {\n    difference() {\n        union() {\n            // lever arm\n            translate([0, 0, 0])\n                rounded_box(45, 12, 4, 2);\n            // cam lobe\n            translate([6, 6, 4])\n                rotate([90, 0, 0])\n                    cylinder(h=12, r=4);\n            // finger pad\n            translate([38, 6, 2])\n                rotate([90, 0, 0])\n                    cylinder(h=12, r=6, h=2);\n        }\n        // holes\n        translate([6, 6, 2])\n            rotate([0, 90, 0])\n                cylinder(h=15, r=1.6);\n        translate([38, 6, 2])\n            rotate([0, 90, 0])\n                cylinder(h=15, r=1.6);\n    }\n}\n\n// ---------- Assembly ----------\nupper_blade();\ntranslate([0, 0, -4.2])\n    lower_blade();\ntranslate([8, 6, 0])\n    pin();\ntranslate([0, 0, 8.5])\n    rotate([0, 0, -25])\n        lever();",
    "renders": true
  },
  {
    "vehicle": "whaler",
    "openscad_code": "// Whaler (19th century whaleboat) – medium realism, 3D-printable\n// Scale ≈ 1:100, length ≈ 70 mm\n\nhull_th = 1.6;       // wall thickness for printing\nplank_w = 2.2;       // width of hull planks\nrib_step = 6;        // spacing between internal ribs\nbench_h = 3;\n\nmodule hull_plank(l, w, t, flare=6) {\n    // single curved plank that makes up the hull skin\n    linear_extrude(height = t, convexity = 4)\n        difference() {\n            offset(delta = w/2)\n                square([l, w], center = true);\n            offset(delta = -w/2)\n                square([l, w], center = true);\n        }\n}\n\nmodule hull_shell() {\n    // outer shell with tumble-home\n    for (y = [-30:plank_w:30]) {\n        h = 20 * (1 - abs(y)/35);                // sheer height\n        flare = 6 * sin(90 * abs(y)/35);         // flare angle\n        translate([0, y, h/2])\n            rotate([0, flare, 0])\n                hull_plank(70, plank_w, hull_th, flare);\n    }\n}\n\nmodule ribs() {\n    // internal frames (no overhang)\n    for (x = [-30:rib_step:30])\n        translate([x, 0, 0])\n            rotate([90, 0, 0])\n                difference() {\n                    cylinder(h = 40, r1 = 12, r2 = 5, $fn = 16);\n                    translate([0, 0, -1])\n                        cylinder(h = 42, r1 = 12 - hull_th, r2 = 5 - hull_th, $fn = 16);\n                }\n}\n\nmodule bench() {\n    // center thwarts (seats)\n    for (x = [-20, 0, 20])\n        translate([x, 0, bench_h])\n            cube([8, 12, hull_th], center = true);\n}\n\nmodule mast_step() {\n    // hole for removable mast peg\n    translate([20, 0, bench_h + hull_th])\n        cylinder(h = 5, r = 2, $fn = 12);\n}\n\nmodule oar_notches() {\n    // simple gunwale notches for oars\n    for (side = [-1, 1])\n        for (x = [-25:10:25])\n            translate([x, side * 15.5, 18])\n                cube([4, hull_th, 2], center = true);\n}\n\nmodule harpoon_crutch() {\n    // forked timber at bow for harpoon shaft\n    translate([-34, 0, 15])\n        rotate([0, 0, 0])\n            union() {\n                cube([6, 2, 10], center = true);\n                translate([0, 0, 5])\n                    cube([2, 6, 2], center = true);\n            }\n}\n\n// Assembly\nunion() {\n    hull_shell();\n    ribs();\n    bench();\n    mast_step();\n    oar_notches();\n    harpoon_crutch();\n}",
    "renders": true
  },
  {
    "vehicle": "dhow",
    "openscad_code": "// Dhow model - medium complexity, realistic style\n// Overall length ~80mm, width ~20mm, height ~15mm\n\n// Hull parameters\nhull_length = 80;\nhull_width = 18;\nhull_height = 12;\nwall_thickness = 1.5;\n\n// Mast parameters\nmast_height = 35;\nmast_diameter = 2;\n\n// Sail parameters\nsail_width = 25;\nsail_height = 30;\n\n// Deck parameters\ndeck_thickness = 1.5;\n\nmodule hull() {\n    difference() {\n        // Main hull body\n        union() {\n            // Bow - pointed front\n            translate([hull_length/2 - 5, 0, 0])\n                scale([1, 0.7, 0.8])\n                sphere(d=10, $fn=20);\n            \n            // Main hull section\n            hull() {\n                translate([-hull_length/2, 0, 0])\n                    scale([1, 0.5, 0.4])\n                    sphere(d=hull_width, $fn=20);\n                translate([hull_length/2 - 10, 0, 0])\n                    scale([1, 0.9, 0.9])\n                    sphere(d=hull_width, $fn=20);\n            }\n            \n            // Stern - raised back\n            translate([-hull_length/2 + 5, 0, 0])\n                cube([10, hull_width, hull_height], center=true);\n        }\n        \n        // Hollow out the hull\n        translate([0, 0, -1])\n            scale([0.85, 0.75, 0.7])\n            hull() {\n                translate([-hull_length/2 + 5, 0, 0])\n                    scale([1, 0.5, 0.4])\n                    sphere(d=hull_width, $fn=20);\n                translate([hull_length/2 - 15, 0, 0])\n                    scale([1, 0.9, 0.9])\n                    sphere(d=hull_width, $fn=20);\n            }\n    }\n}\n\nmodule deck() {\n    // Main deck\n    translate([0, 0, hull_height/2])\n        cube([hull_length - 10, hull_width - 2, deck_thickness], center=true);\n    \n    // Deck rail posts\n    for(i = [-1, 1]) {\n        translate([hull_length/2 - 15, i * (hull_width/2 - 2), hull_height + 1])\n            cylinder(h=3, d=2, $fn=8);\n    }\n}\n\nmodule mast() {\n    // Main mast\n    translate([0, 0, hull_height/2 + deck_thickness/2])\n        cylinder(h=mast_height, d=mast_diameter, $fn=12);\n    \n    // Mast base reinforcement\n    translate([0, 0, hull_height/2 + deck_thickness/2])\n        cylinder(h=3, d=5, $fn=12);\n}\n\nmodule lateen_sail() {\n    // Sail spar (boom)\n    rotate([0, 90, 30])\n        translate([0, 0, mast_height/2])\n            cylinder(h=sail_width, d=1.5, $fn=8);\n    \n    // Main sail\n    color(\"white\") {\n        translate([5, 0, hull_height/2 + deck_thickness + mast_height - 5])\n            rotate([0, 90, 30])\n                linear_extrude(height=0.5)\n                    polygon(points=[\n                        [0, 0],\n                        [sail_width, 0],\n                        [sail_width/2, sail_height]\n                    ]);\n    }\n}\n\nmodule rudder() {\n    // Stern rudder\n    translate([-hull_length/2 + 3, 0, hull_height/2 - 3])\n        rotate([0, 90, 0])\n            cube([8, 3, 6]);\n}\n\nmodule cabin() {\n    // Small cabin structure\n    translate([-hull_length/4, 0, hull_height/2 + deck_thickness])\n        cube([10, hull_width - 6, 5], center=true);\n}\n\n// Assembly\nunion() {\n    hull();\n    deck();\n    mast();\n    lateen_sail();\n    rudder();\n    cabin();\n}",
    "renders": true
  },
  {
    "vehicle": "junk",
    "openscad_code": "// Junk - Chinese sailing vessel\n// Medium complexity, realistic style\n\nhull_length = 80;\nhull_width = 25;\nhull_height = 12;\ndeck_height = 8;\n\nmodule hull() {\n    difference() {\n        // Main hull shape\n        hull_shape();\n        \n        // Hollow out the interior\n        translate([0, 0, -1])\n            scale([0.8, 0.8, 0.9])\n                hull_shape();\n    }\n}\n\nmodule hull_shape() {\n    // Create curved hull with rounded bottom\n    hull() {\n        // Front section - pointed bow\n        translate([-hull_length/2, 0, 0])\n            scale([0.3, 1, 1])\n                cylinder(h=hull_height*2, r1=hull_width/2, r2=0, center=true);\n        \n        // Main hull body\n        translate([0, 0, -hull_height/2])\n            cube([hull_length*0.7, hull_width, hull_height], center=true);\n        \n        // Rear section - rounded stern\n        translate([hull_length/2, 0, 0])\n            scale([0.2, 1, 1])\n                cylinder(h=hull_height*2, r1=hull_width/2, r2=hull_width/3, center=true);\n    }\n}\n\nmodule deck() {\n    // Main deck\n    translate([0, 0, deck_height])\n        cube([hull_length*0.9, hull_width*0.9, 2], center=true);\n    \n    // Cabin structure\n    translate([hull_length*0.2, 0, deck_height+3])\n        cube([hull_length*0.3, hull_width*0.5, 8], center=true);\n}\n\nmodule mast(base_x, height, diameter) {\n    // Mast pole\n    translate([base_x, 0, deck_height])\n        cylinder(h=height, r=diameter/2, center=false);\n    \n    // Mast base reinforcement\n    translate([base_x, 0, deck_height-1])\n        cylinder(h=2, r=diameter, center=false);\n}\n\nmodule sail(mast_x, mast_height, sail_width, sail_height) {\n    // Main sail panel\n    translate([mast_x + sail_width/3, 0, deck_height + mast_height - sail_height])\n        cube([sail_width, 2, sail_height], center=true);\n    \n    // Horizontal battens\n    for(i = [1:3]) {\n        translate([mast_x + sail_width/3, 0, deck_height + mast_height - sail_height*i/3])\n            cube([sail_width*0.9, 1.5, 1], center=true);\n    }\n}\n\nmodule rudder() {\n    // Rudder post\n    translate([hull_length/2+2, 0, deck_height-2])\n        rotate([0, 90, 0])\n            cylinder(h=8, r=2, center=true);\n    \n    // Rudder blade\n    translate([hull_length/2+4, 0, deck_height-6])\n        cube([8, 2, 12], center=true);\n}\n\nmodule railings() {\n    // Side railings\n    for(side = [-1, 1]) {\n        translate([0, side*hull_width/2, deck_height+1])\n            for(x = [-hull_length/2+5:10:hull_length/2-5]) {\n                translate([x, 0, 0])\n                    cube([1, 2, 3], center=true);\n            }\n    }\n}\n\nmodule anchor() {\n    // Anchor at bow\n    translate([-hull_length/2-3, 0, deck_height-2])\n    union() {\n        // Anchor shank\n        rotate([90, 0, 0])\n            cylinder(h=6, r=1, center=true);\n        \n        // Anchor flukes\n        translate([0, 0, -3])\n            rotate([0, 90, 0])\n                cylinder(h=4, r1=3, r2=0, center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Hull and deck\n    hull();\n    deck();\n    \n    // Three masts\n    mast(-hull_length/4, 40, 3);\n    sail(-hull_length/4, 40, 25, 30);\n    \n    mast(0, 35, 2.5);\n    sail(0, 35, 20, 25);\n    \n    mast(hull_length/4, 30, 2);\n    sail(hull_length/4, 30, 15, 20);\n    \n    // Rudder\n    rudder();\n    \n    // Railings\n    railings();\n    \n    // Anchor\n    anchor();\n}",
    "renders": true
  },
  {
    "vehicle": "felucca",
    "openscad_code": "// Felucca model - realistic style, medium complexity\n// Designed for 3D printing with 1mm wall thickness\n\n$fn = 24;\n\n// Overall dimensions (mm)\nlength = 80;\nbeam = 20;\nheight = 15;\n\n// Hull module with curved bottom\nmodule hull() {\n    // Main hull body\n    difference() {\n        // Outer hull - curved bottom\n        hull() {\n            translate([-length/2, -beam/2, 0])\n                cube([length, beam, height]);\n            translate([-length/2, -beam/2, -1])\n                cube([length, beam, 1]);\n            translate([-length/2, -beam/2+2, -2])\n                cube([length, beam-4, 1]);\n        }\n        \n        // Hollow interior\n        translate([-length/2+2, -beam/2+2, 1])\n            cube([length-4, beam-4, height-1]);\n    }\n    \n    // Deck surface\n    translate([-length/2+2, -beam/2+2, height-1])\n        cube([length-4, beam-4, 1]);\n}\n\n// Mast module\nmodule mast() {\n    // Main mast\n    translate([0, 0, height]) {\n        cylinder(h=40, d1=2, d2=1.5);\n    }\n    \n    // Mast base reinforcement\n    translate([0, 0, height-2]) {\n        cylinder(h=2, d=4);\n    }\n}\n\n// Lateen sail with yard\nmodule sail() {\n    // Main boom (bottom spar)\n    rotate([0, 30, 0]) {\n        translate([0, 0, 20])\n            rotate([90, 0, 0])\n                cylinder(h=30, d=1.5);\n    }\n    \n    // Upper yard (top spar)\n    rotate([0, 60, 0]) {\n        translate([0, 0, 35])\n            rotate([90, 0, 0])\n                cylinder(h=25, d=1);\n    }\n    \n    // Sail surface - simplified as thin volume\n    rotate([0, 45, 0]) {\n        translate([-15, -0.5, 20]) {\n            scale([1, 0.1, 1]) {\n                polyhedron(\n                    points = [\n                        [0, 0, 0], [30, 0, 0], [15, 0, 15], [2, 0, 12],\n                        [0, 2, 0], [30, 2, 0], [15, 2, 15], [2, 2, 12]\n                    ],\n                    faces = [\n                        [0,1,2,3], [4,7,6,5], [0,4,5,1], [1,5,6,2],\n                        [2,6,7,3], [3,7,4,0]\n                    ]\n                );\n            }\n        }\n    }\n}\n\n// Rudder module\nmodule rudder() {\n    // Rudder post\n    translate([length/2-5, 0, height/2]) {\n        cylinder(h=height+2, d=2);\n    }\n    \n    // Rudder blade\n    translate([length/2-3, -1, height/2-4]) {\n        cube([6, 2, 8]);\n    }\n}\n\n// Seating area\nmodule seating() {\n    // Bench supports\n    for(pos = [-20, 0, 20]) {\n        translate([pos, -beam/2+3, height]) {\n            cube([4, 2, 3]);\n        }\n    }\n    \n    // Bench top\n    translate([-25, -beam/2+2.5, height+3]) {\n        cube([50, 3, 1]);\n    }\n}\n\n// Side rail\nmodule rail() {\n    // Port rail posts\n    for(pos = [-30, -15, 0, 15, 30]) {\n        translate([pos, -beam/2+1, height]) {\n            cylinder(h=4, d=1.5);\n        }\n    }\n    \n    // Starboard rail posts\n    for(pos = [-30, -15, 0, 15, 30]) {\n        translate([pos, beam/2-1, height]) {\n            cylinder(h=4, d=1.5);\n        }\n    }\n    \n    // Port rail top\n    translate([-35, -beam/2+1, height+3.5]) {\n        cube([70, 1, 1]);\n    }\n    \n    // Starboard rail top\n    translate([-35, beam/2-2, height+3.5]) {\n        cube([70, 1, 1]);\n    }\n}\n\n// Assembly\nunion() {\n    hull();\n    mast();\n    sail();\n    rudder();\n    seating();\n    rail();\n}",
    "renders": true
  },
  {
    "vehicle": "caique",
    "openscad_code": "$fn = 32;\n\nmodule caique() {\n    // Body\n    union() {\n        // Main body\n        translate([0, 0, 10])\n            scale([1.2, 1, 1])\n            sphere(15);\n        \n        // Belly\n        translate([0, -5, 5])\n            sphere(12);\n        \n        // Head\n        translate([0, 18, 25])\n            sphere(10);\n        \n        // Beak upper\n        translate([0, 28, 25])\n            rotate([30, 0, 0])\n            scale([0.5, 1, 1])\n            cylinder(8, 5, 2);\n        \n        // Beak lower\n        translate([0, 28, 22])\n            rotate([20, 0, 0])\n            scale([0.4, 0.8, 1])\n            cylinder(6, 4, 2);\n        \n        // Eye left\n        translate([-4, 20, 28])\n            sphere(2);\n        \n        // Eye right\n        translate([4, 20, 28])\n            sphere(2);\n        \n        // Tail\n        translate([-20, 0, 12])\n            rotate([0, 0, 30])\n            scale([0.3, 1, 0.5])\n            cylinder(12, 8, 2);\n        \n        // Wings\n        // Left wing\n        translate([-12, 0, 15])\n            rotate([0, 0, -20])\n            scale([0.3, 1.5, 0.8])\n            difference() {\n                cylinder(10, 8, 2);\n                translate([0, 0, -2])\n                    cylinder(12, 9, 3);\n            }\n        \n        // Right wing\n        translate([12, 0, 15])\n            rotate([0, 0, 20])\n            scale([0.3, 1.5, 0.8])\n            difference() {\n                cylinder(10, 8, 2);\n                translate([0, 0, -2])\n                    cylinder(12, 9, 3);\n            }\n        \n        // Legs\n        // Left leg\n        translate([-5, -5, 0])\n            cylinder(8, 2, 2);\n        translate([-5, -5, 0])\n            rotate([0, 90, 0])\n            cylinder(4, 1.5, 1.5);\n        \n        // Right leg\n        translate([5, -5, 0])\n            cylinder(8, 2, 2);\n        translate([5, -5, 0])\n            rotate([0, 90, 0])\n            cylinder(4, 1.5, 1.5);\n        \n        // Feet\n        // Left foot\n        for(i = [-2, 0, 2]) {\n            translate([-5 + i/2, -9, 0])\n                rotate([0, 90, 0])\n                cylinder(2, 1, 1);\n        }\n        \n        // Right foot\n        for(i = [-2, 0, 2]) {\n            translate([5 + i/2, -9, 0])\n                rotate([0, 90, 0])\n                cylinder(2, 1, 1);\n        }\n    }\n}\n\n// Color indicators (will be printed as separate parts)\n// Orange cheeks\ntranslate([-8, 18, 25])\n    sphere(4);\n\ntranslate([8, 18, 25])\n    sphere(4);\n\n// Green body indication\n// Body will be printed in green\n\n// Yellow legs and beak indication\n// Legs and beak will be printed in yellow\n\ncaique();",
    "renders": true
  },
  {
    "vehicle": "skipjack",
    "openscad_code": "// Skipjack Tuna - Realistic Medium Complexity\n// Approx 85mm long, 20mm tall, 25mm wide\n// Designed for 3D printing with 1.2mm walls\n\nmodule tuna_body() {\n    // Main body - tapered ellipsoid\n    difference() {\n        scale([1, 0.7, 0.4]) sphere(d=50, $fn=32);\n        // Tail cut\n        translate([25, 0, 0]) cube([30, 30, 30], center=true);\n    }\n    \n    // Belly flattening\n    translate([0, 0, -6]) \n        scale([1, 0.8, 0.3]) \n            sphere(d=45, $fn=32);\n}\n\nmodule tuna_tail() {\n    // Forked tail\n    for(side = [-1, 1]) {\n        translate([23, side*8, 0]) rotate([0, 0, side*15])\n            scale([0.8, 0.1, 0.4]) sphere(d=25, $fn=16);\n    }\n    \n    // Tail stem\n    translate([23, 0, 0])\n        scale([0.5, 0.3, 0.2]) sphere(d=20, $fn=16);\n}\n\nmodule tuna_fins() {\n    // Dorsal fin\n    translate([-5, 0, 8])\n        rotate([0, 90, 0])\n            cylinder(h=15, r1=5, r2=2, $fn=3);\n    \n    // Pectoral fins\n    for(side = [-1, 1]) {\n        translate([-8, side*10, -2])\n            rotate([0, side*15, 0])\n                scale([1, 0.5, 0.1]) sphere(d=15, $fn=8);\n    }\n    \n    // Ventral fins\n    for(side = [-1, 1]) {\n        translate([0, side*8, -6])\n            rotate([0, -30, side*30])\n                cylinder(h=8, r1=3, r2=1, $fn=3);\n    }\n}\n\nmodule tuna_head() {\n    // Head extension\n    translate([-22, 0, 0])\n        scale([0.8, 0.7, 0.6]) sphere(d=30, $fn=32);\n    \n    // Snout\n    translate([-32, 0, 0])\n        scale([0.6, 0.4, 0.3]) sphere(d=20, $fn=16);\n    \n    // Mouth line\n    translate([-30, 0, -3])\n        rotate([90, 0, 0])\n            cylinder(h=0.5, r=8, $fn=16);\n}\n\nmodule tuna_markings() {\n    // Stripes\n    for(i = [-15:5:15]) {\n        translate([i, 0, 0])\n            scale([0.5, 1, 0.9]) sphere(d=40, $fn=32);\n    }\n    \n    // Eye\n    translate([-25, 8, 2])\n        sphere(d=2, $fn=16);\n}\n\n// Assembly\nunion() {\n    tuna_body();\n    tuna_tail();\n    tuna_fins();\n    tuna_head();\n    tuna_markings();\n}",
    "renders": true
  },
  {
    "vehicle": "bugeye",
    "openscad_code": "// Realistic medium-complexity bugeye model\n// Approx 60 mm tall, 3 mm wall thickness, printable without supports\n\n$fn = 36;\n\n// Overall dimensions\neye_d = 30;          // Cornea diameter\niris_d = 16;         // Iris diameter\npupil_d = 8;         // Pupil diameter\nsclera_h = 14;       // White part height\nbase_h = 8;          // Base cylinder height\nwall_t = 3;          // Shell thickness\n\nmodule eyeball() {\n    // Outer white shell (sclera)\n    difference() {\n        sphere(d = eye_d);\n        sphere(d = eye_d - wall_t * 2);\n    }\n}\n\nmodule cornea() {\n    // Clear dome on front\n    translate([0, 0, sclera_h / 2])\n    scale([1, 1, 0.5])\n    sphere(d = eye_d);\n}\n\nmodule iris() {\n    // Colored iris disc\n    translate([0, 0, sclera_h / 2 - wall_t / 2])\n    cylinder(h = wall_t, d = iris_d);\n}\n\nmodule pupil() {\n    // Central black pupil\n    translate([0, 0, sclera_h / 2])\n    cylinder(h = wall_t + 0.5, d = pupil_d);\n}\n\nmodule blood_vessels() {\n    // Random red vessels on sclera surface\n    for (a = [0 : 45 : 360])\n    rotate([0, 0, a])\n    translate([eye_d / 2 - wall_t / 2, 0, 0])\n    rotate([0, 90, 0])\n    rotate([0, 0, rands(-20, 20, 1)[0]])\n    scale([rands(0.2, 0.4, 1)[0], 1, 1])\n    cylinder(h = rands(3, 8, 1)[0], d = 0.5);\n}\n\nmodule base() {\n    // Flat bottom cylinder to sit flat on build plate\n    cylinder(h = base_h, d1 = eye_d, d2 = eye_d - 2);\n}\n\nmodule support_holes() {\n    // Drainage holes for resin printing\n    for (a = [0 : 120 : 240])\n    rotate([0, 0, a])\n    translate([(eye_d - wall_t) / 2, 0, -base_h / 2])\n    rotate([0, 90, 0])\n    cylinder(h = eye_d, d = 3);\n}\n\n// Assembly\nunion() {\n    eyeball();\n    cornea();\n    iris();\n    pupil();\n    color(\"red\") blood_vessels();\n    color(\"white\") base();\n    support_holes();\n}",
    "renders": true
  },
  {
    "vehicle": "barkentine",
    "openscad_code": "// Barkentine 3D printable model - realistic style, medium complexity\n// Hull length ~80mm, height ~25mm\n\n$fn = 32;               // Smooth curves for 3D printing\nwall = 1.2;             // Standard nozzle wall thickness\n\n// Main assembly\nmodule barkentine() {\n    union() {\n        hull();\n        deck_structures();\n        masts();\n        rigging();\n    }\n}\n\n// Main hull with tapered shape\nmodule hull() {\n    difference() {\n        // Solid hull base\n        hull_shape();\n        \n        // Hollow interior for printing\n        translate([0, 0, 1]) \n            scale([0.85, 0.85, 0.9])\n            hull_shape();\n    }\n}\n\n// Basic hull shape\nmodule hull_shape() {\n    union() {\n        // Main hull body - tapered towards bow\n        for(i = [0:10]) {\n            h = 8 * (1 - i/15);\n            w = 12 - i * 0.4;\n            translate([i*7 - 35, 0, h/2])\n                scale([1, w/12, 1])\n                cube([7, 12, h], center=true);\n        }\n        \n        // Stern transom\n        translate([36, 0, 4])\n            cube([2, 14, 8], center=true);\n    }\n}\n\n// Deck structures and details\nmodule deck_structures() {\n    // Main deck\n    translate([0, 0, 8.5])\n        cube([72, 14, 0.8], center=true);\n    \n    // Forecastle\n    translate([-25, 0, 9.5])\n        cube([15, 12, 4], center=true);\n    \n    // Quarter deck\n    translate([25, 0, 9.5])\n        cube([20, 12, 3], center=true);\n    \n    // Ship's wheel\n    translate([30, 5, 13])\n        cylinder(h=0.8, r=2);\n    \n    // Cargo hatches\n    for(pos = [[-15, 0], [0, 0], [15, 0]]) {\n        translate(pos + [0, 0, 9.5])\n            cube([8, 6, 0.5], center=true);\n    }\n}\n\n// Three masts: foremast, mainmast, mizzen\nmodule masts() {\n    // Foremast - square rigged\n    mast([-20, 0, 9], 25, true);\n    \n    // Mainmast - fore-and-aft rigged\n    mast([0, 0, 9], 30, false);\n    \n    // Mizzenmast - fore-and-aft rigged\n    mast([20, 0, 9], 22, false);\n}\n\n// Individual mast with appropriate rigging\nmodule mast(pos, height, square_rigged) {\n    translate(pos) {\n        // Mast pole\n        cylinder(h=height, r=1, center=false);\n        \n        // Topmast\n        translate([0, 0, height])\n            cylinder(h=height*0.6, r=0.7, center=false);\n        \n        // Yardarms for square-rigged foremast\n        if(square_rigged) {\n            for(y = [0.4, 0.6, 0.8]) {\n                translate([0, 0, height * y])\n                    rotate([0, 90, 0])\n                    cylinder(h=20, r=0.5, center=true);\n            }\n        }\n        \n        // Gaff for fore-and-aft rigged masts\n        if(!square_rigged) {\n            translate([0, 0, height * 0.9])\n                rotate([0, 0, 30])\n                rotate([0, 90, 0])\n                cylinder(h=15, r=0.5, center=true);\n        }\n    }\n}\n\n// Simplified rigging as printable structures\nmodule rigging() {\n    // Shrouds - diagonal supports\n    for(mast_pos = [-20, 0, 20]) {\n        for(side = [-1, 1]) {\n            translate([mast_pos, 0, 9])\n                rotate([0, side * 15, 0])\n                cylinder(h=25, r=0.3, center=false);\n        }\n    }\n    \n    // Bowspirit\n    translate([-40, 0, 7])\n        rotate([0, -30, 0])\n        cylinder(h=15, r=1, center=false);\n}\n\n// Generate the model\nbarkentine();",
    "renders": true
  },
  {
    "vehicle": "schooneryacht",
    "openscad_code": "// Schooner Yacht - Realistic Medium Detail\n// 3D printable with no overhangs, 80mm length\n\nhull_length = 80;\nhull_width = 20;\nhull_height = 12;\n\n// Main hull with smooth bottom\nmodule hull() {\n    difference() {\n        hull_shape();\n        // Hollow out interior\n        translate([5, 0, 2])\n            scale([0.8, 0.8, 0.8])\n            hull_shape();\n    }\n}\n\nmodule hull_shape() {\n    union() {\n        // Main hull body\n        hull_profile();\n        \n        // Bow extension\n        translate([hull_length/2 - 5, 0, 0])\n            scale([0.3, 0.7, 0.7])\n            sphere(d=10, $fn=20);\n    }\n}\n\nmodule hull_profile() {\n    hull() {\n        // Bow\n        translate([hull_length/2, 0, 0])\n            sphere(d=hull_width, $fn=20);\n        // Mid\n        translate([0, 0, 0])\n            sphere(d=hull_width*0.9, $fn=20);\n        // Stern\n        translate([-hull_length/2, 0, 0])\n            sphere(d=hull_width*0.8, $fn=20);\n    }\n}\n\n// Deck with cabin\nmodule deck() {\n    translate([0, 0, hull_height/2 + 2])\n        cube([hull_length - 10, hull_width - 4, 1], center=true);\n}\n\n// Cabin house\nmodule cabin() {\n    translate([-10, 0, hull_height/2 + 3])\n        cube([20, 15, 8], center=true);\n}\n\n// Masts (two for schooner)\nmodule masts() {\n    // Main mast (aft)\n    translate([-15, 0, hull_height/2 + 3])\n        cylinder(h=40, d=2, $fn=8);\n    \n    // Fore mast\n    translate([15, 0, hull_height/2 + 3])\n        cylinder(h=35, d=2, $fn=8);\n}\n\n// Booms and gaffs\nmodule spars() {\n    // Main boom\n    translate([-15, 0, hull_height/2 + 25])\n        rotate([90, 0, 0])\n        cylinder(h=25, d=1, $fn=8);\n    \n    // Fore boom\n    translate([15, 0, hull_height/2 + 20])\n        rotate([90, 0, 0])\n        cylinder(h=20, d=1, $fn=8);\n}\n\n// Rigging lines as thin cylinders\nmodule rigging() {\n    // Main mast stays\n    for(angle=[-45, 45]) {\n        translate([-15, 0, hull_height/2 + 3])\n            rotate([0, 0, angle])\n            cylinder(h=30, d=0.5, $fn=4);\n    }\n    \n    // Fore mast stays\n    for(angle=[-45, 45]) {\n        translate([15, 0, hull_height/2 + 3])\n            rotate([0, 0, angle])\n            cylinder(h=25, d=0.5, $fn=4);\n    }\n}\n\n// Keel for stability\nmodule keel() {\n    translate([0, 0, -hull_height/2 - 1])\n        cube([hull_length - 20, 3, 2], center=true);\n}\n\n// Rudder\nmodule rudder() {\n    translate([-hull_length/2 + 2, 0, -hull_height/2])\n        cube([3, 8, 10], center=true);\n}\n\n// Assembly\nhull();\ndeck();\ncabin();\nmasts();\nspars();\nrigging();\nkeel();\nrudder();",
    "renders": true
  },
  {
    "vehicle": "motorsailer",
    "openscad_code": "// Motorsailer - realistic style, medium complexity\n// Approximate overall length 90 mm, width 25 mm, height 30 mm\n\nhull_length = 90;\nhull_width = 25;\nhull_height = 12;\n\n// Main hull\nmodule hull() {\n    difference() {\n        // Main hull body\n        hull_shape();\n        \n        // Remove bottom to hollow it\n        translate([0, 0, -hull_height/2 - 0.1])\n            cube([hull_length + 2, hull_width + 2, hull_height], center = true);\n        \n        // Drain hole in stern\n        translate([-hull_length/2 + 2, 0, -hull_height/2 + 1])\n            rotate([0, 90, 0])\n                cylinder(h = 2, d = 3, $fn = 8);\n    }\n}\n\n// Hull shape with rounded bow and tapered stern\nmodule hull_shape() {\n    hull() {\n        // Bow sphere\n        translate([hull_length/2 - 8, 0, 0])\n            sphere(d = hull_width, $fn = 20);\n        \n        // Mid section\n        translate([0, 0, 0])\n            cube([hull_length, hull_width, hull_height], center = true);\n        \n        // Stern sphere\n        translate([-hull_length/2 + 8, 0, 0])\n            sphere(d = hull_width * 0.8, $fn = 20);\n    }\n}\n\n// Cabin superstructure\nmodule cabin() {\n    difference() {\n        // Main cabin\n        translate([0, 0, hull_height/2 + 6])\n            cube([50, 22, 12], center = true);\n        \n        // Cabin roof slant\n        translate([0, 0, hull_height/2 + 12])\n            cube([50, 22, 0.1], center = true);\n    }\n    \n    // Cabin roof\n    translate([0, 0, hull_height/2 + 12])\n        cube([48, 20, 1], center = true);\n    \n    // Windows\n    for (i = [-15, -5, 5, 15]) {\n        translate([i, 11.5, hull_height/2 + 6])\n            cube([6, 0.5, 4], center = true);\n        translate([i, -11.5, hull_height/2 + 6])\n            cube([6, 0.5, 4], center = true);\n    }\n}\n\n// Mast\nmodule mast() {\n    // Main mast\n    translate([15, 0, hull_height/2 + 12])\n        cylinder(h = 40, d1 = 3, d2 = 2, $fn = 8);\n    \n    // Mast base\n    translate([15, 0, hull_height/2])\n        cylinder(h = 2, d = 6, $fn = 16);\n}\n\n// Boom\nmodule boom() {\n    translate([15, 0, hull_height/2 + 20])\n        rotate([0, 90, 0])\n            cylinder(h = 30, d = 2, $fn = 8);\n}\n\n// Sails\nmodule sails() {\n    // Main sail\n    translate([15, 0, hull_height/2 + 30])\n        rotate([90, 0, 0])\n            linear_extrude(height = 0.5)\n                polygon(points = [[0, 0], [0, -25], [15, -25], [15, 0]]);\n    \n    // Jib sail\n    translate([15, 0, hull_height/2 + 35])\n        rotate([90, 0, 45])\n            linear_extrude(height = 0.5)\n                polygon(points = [[0, 0], [0, -20], [12, -20], [12, 0]]);\n}\n\n// Railings\nmodule railings() {\n    // Starboard railing\n    for (x = [-30:5:30]) {\n        translate([x, hull_width/2 - 1, hull_height/2 + 2])\n            cylinder(h = 4, d = 1, $fn = 8);\n    }\n    \n    // Port railing\n    for (x = [-30:5:30]) {\n        translate([x, -hull_width/2 + 1, hull_height/2 + 2])\n            cylinder(h = 4, d = 1, $fn = 8);\n    }\n    \n    // Railing top\n    translate([0, hull_width/2 - 1, hull_height/2 + 4])\n        cube([hull_length - 10, 1, 1], center = true);\n    translate([0, -hull_width/2 + 1, hull_height/2 + 4])\n        cube([hull_length - 10, 1, 1], center = true);\n}\n\n// Engine box\nmodule engine_box() {\n    translate([-hull_length/2 + 15, 0, hull_height/2])\n        cube([20, 15, 8], center = true);\n    \n    // Exhaust pipe\n    translate([-hull_length/2 + 15, 0, hull_height/2 + 8])\n        cylinder(h = 6, d = 2, $fn = 8);\n}\n\n// Anchor\nmodule anchor() {\n    translate([hull_length/2 - 5, 0, -hull_height/2 + 1])\n        union() {\n            cylinder(h = 2, d = 1, $fn = 8);\n            rotate([0, 90, 0])\n                cylinder(h = 3, d = 1, $fn = 8);\n        }\n}\n\n// Assemble the motorsailer\nhull();\ncabin();\nmast();\nboom();\nsails();\nrailings();\nengine_box();\nanchor();",
    "renders": true
  },
  {
    "vehicle": "superyacht",
    "openscad_code": "// Realistic Superyacht - Medium Complexity\n// Designed for 3D printing - 80mm length\n\nhull_length = 80;\nhull_width = 20;\nhull_height = 10;\n\n// Main hull with realistic shape\nmodule hull() {\n    difference() {\n        // Main hull body\n        hull_shape();\n        \n        // Hull bottom cut for planing shape\n        translate([-hull_length/2-1, 0, -hull_height/2-1])\n            cube([hull_length+2, hull_width+2, hull_height/2]);\n        \n        // Propeller tunnel\n        translate([-hull_length/2+5, 0, -hull_height/2+2])\n            rotate([90, 0, 0])\n                cylinder(h=8, r=3, $fn=20);\n    }\n}\n\n// Curved hull shape using multiple cylinders\nmodule hull_shape() {\n    union() {\n        // Main hull section\n        translate([0, 0, 0])\n            scale([1, hull_width/hull_length, hull_height/hull_length])\n                sphere(hull_length/2, $fn=50);\n        \n        // Bow extension\n        translate([hull_length/2-5, 0, 0])\n            scale([0.3, 0.8, 0.6])\n                sphere(10, $fn=30);\n        \n        // Stern platform\n        translate([-hull_length/2+3, 0, -hull_height/2+1])\n            cube([6, hull_width-4, 2]);\n    }\n}\n\n// Main deck with superstructure\nmodule main_deck() {\n    translate([0, 0, hull_height/2-1])\n        cube([hull_length-10, hull_width-4, 1.5], center=true);\n}\n\n// Superstructure (bridge/deckhouse)\nmodule superstructure() {\n    hull_deck();\n    bridge_deck();\n    radar_mast();\n}\n\n// Main deckhouse\nmodule hull_deck() {\n    translate([hull_length/4, 0, hull_height/2+0.5])\n        cube([hull_length/2, hull_width-8, 5], center=true);\n}\n\n// Bridge deck\nmodule bridge_deck() {\n    translate([hull_length/3, 0, hull_height/2+6])\n        cube([hull_length/3, hull_width-10, 3], center=true);\n}\n\n// Radar mast with radar\nmodule radar_mast() {\n    translate([hull_length/3, 0, hull_height/2+9]) {\n        // Mast\n        cylinder(h=8, r=0.5, $fn=8);\n        \n        // Radar dome\n        translate([0, 0, 8])\n            sphere(2, $fn=20);\n    }\n}\n\n// Lifeboats and tender\nmodule lifeboats() {\n    // Port lifeboat\n    translate([hull_length/4-5, hull_width/2-2, hull_height/2+1.5])\n        lifeboat();\n    \n    // Starboard lifeboat\n    translate([hull_length/4-5, -hull_width/2+2, hull_height/2+1.5])\n        lifeboat();\n}\n\n// Individual lifeboat\nmodule lifeboat() {\n    rotate([0, 90, 0])\n        scale([1, 0.5, 0.5])\n            cylinder(h=4, r=1.5, $fn=20);\n}\n\n// Railings around decks\nmodule railings() {\n    railing_line(hull_length/2-5, hull_width/2-1, 0);\n    railing_line(hull_length/2-5, -hull_width/2+1, 0);\n    railing_line(-hull_length/2+5, hull_width/2-1, 0);\n    railing_line(-hull_length/2+5, -hull_width/2+1, 0);\n}\n\n// Individual railing posts\nmodule railing_line(x, y, z) {\n    for(i = [-1:1]) {\n        translate([x+i*5, y, hull_height/2+z+1]) {\n            cylinder(h=2, r=0.3, $fn=8);\n            translate([0, 0, 2])\n                rotate([90, 0, 0])\n                    cylinder(h=abs(y)*2-2, r=0.3, $fn=8);\n        }\n    }\n}\n\n// Windows along the hull\nmodule windows() {\n    for(i = [1:3]) {\n        // Port windows\n        translate([hull_length/2-i*8, hull_width/2-0.5, 0])\n            cube([2, 0.5, 1.5]);\n        \n        // Starboard windows\n        translate([hull_length/2-i*8, -hull_width/2+0.5, 0])\n            cube([2, 0.5, 1.5]);\n    }\n}\n\n// Assemble the yacht\nunion() {\n    hull();\n    main_deck();\n    superstructure();\n    lifeboats();\n    railings();\n    windows();\n}",
    "renders": true
  },
  {
    "vehicle": "megayacht",
    "openscad_code": "// Megayacht - Realistic Medium Complexity\n// 3D printable, ~80 mm long\n\nhull_length = 80;\nhull_width = 18;\nhull_height = 10;\n\n// Main hull shape\nmodule hull() {\n    difference() {\n        union() {\n            // Lower hull\n            hull_for(scale([1,0.9,1], $fn=50));\n            // Upper deck extension\n            translate([0,0,hull_height-2])\n                scale([0.9,0.85,0.4], $fn=50)\n                    cylinder(h=3, r1=hull_width/2, r2=hull_width/2.2);\n        }\n        // Cut out interior\n        translate([0,0,-1])\n            scale([0.8,0.7,1.2], $fn=50)\n                cylinder(h=hull_height+2, r1=hull_width/2-2, r2=hull_width/2-2.5);\n    }\n}\n\n// Helper for rounded hull shape\nmodule hull_for() {\n    rotate([90,0,0])\n        cylinder(h=hull_length, r1=hull_width/2, r2=hull_width/3.5);\n}\n\n// Main superstructure block\nmodule superstructure() {\n    translate([-10,0,hull_height+1]) {\n        difference() {\n            // Main block\n            cube([25, hull_width-4, 8], center=true);\n            // Bridge windows\n            translate([5,0,2])\n                cube([12, hull_width-6, 4], center=true);\n        }\n    }\n}\n\n// Radar mast\nmodule radar_mast() {\n    translate([8,0,hull_height+9]) {\n        cylinder(h=10, r=0.8, $fn=8);\n        // Radar dome\n        translate([0,0,10])\n            rotate([90,0,0])\n                scale([1,0.4,1])\n                    sphere(r=2.5, $fn=20);\n    }\n}\n\n// Lifeboats\nmodule lifeboats() {\n    for(side=[-1,1]) {\n        translate([15, side*(hull_width/2-3), hull_height+2]) {\n            rotate([0,0,side*10])\n                cube([8, 3, 2], center=true);\n        }\n    }\n}\n\n// Deck railings\nmodule railings() {\n    for(side=[-1,1]) {\n        for(pos=[-30:5:30]) {\n            translate([pos, side*(hull_width/2-1), hull_height+0.5]) {\n                cylinder(h=2, r=0.3, $fn=6);\n            }\n        }\n    }\n}\n\n// Stack/exhausts\nmodule stacks() {\n    for(side=[-1,1]) {\n        translate([-15, side*4, hull_height+8]) {\n            cylinder(h=3, r=1, $fn=8);\n        }\n    }\n}\n\n// Helicopter pad\nmodule heli_pad() {\n    translate([-25,0,hull_height+8]) {\n        difference() {\n            cylinder(h=0.5, r=8, $fn=32);\n            // H marking\n            translate([0,0,-0.1])\n                cube([10, 2, 0.7], center=true);\n            translate([0,0,-0.1])\n                cube([2, 10, 0.7], center=true);\n        }\n    }\n}\n\n// Combine all parts\nunion() {\n    hull();\n    superstructure();\n    radar_mast();\n    lifeboats();\n    railings();\n    stacks();\n    heli_pad();\n}",
    "renders": true
  },
  {
    "vehicle": "expresscruiser",
    "openscad_code": "// Express Cruiser - Realistic Style, Medium Complexity\n// Designed for 3D printing - 80mm length\n\n// Hull main body\nmodule hull() {\n    difference() {\n        // Main hull shape\n        hull() {\n            cube([75, 25, 12], center=true);\n            translate([0, 0, -6]) cube([70, 22, 8], center=true);\n        }\n        \n        // Cut bow shape\n        translate([35, 0, 0]) rotate([0, 0, -25]) cube([30, 30, 20], center=true);\n        \n        // Hull chine\n        translate([0, 0, -5]) cube([75, 28, 2], center=true);\n    }\n}\n\n// Cabin superstructure\nmodule cabin() {\n    // Main cabin\n    translate([-15, 0, 7]) cube([30, 22, 10], center=true);\n    \n    // Cabin roof\n    translate([-15, 0, 13]) cube([28, 20, 2], center=true);\n    \n    // Windshield\n    translate([0, 0, 9]) cube([2, 20, 6], center=true);\n}\n\n// Deck details\nmodule deck_features() {\n    // Anchor locker\n    translate([30, 0, 6.5]) cube([8, 6, 2], center=true);\n    \n    // Rail posts\n    for(pos = [[25, 12], [25, -12], [10, 12], [10, -12], [-25, 12], [-25, -12]]) {\n        translate([pos[0], pos[1], 7.5]) cylinder(h=3, r=1, $fn=8);\n    }\n    \n    // Rail connections\n    hull() {\n        translate([25, 12, 9]) sphere(r=1);\n        translate([25, -12, 9]) sphere(r=1);\n        translate([10, 12, 9]) sphere(r=1);\n        translate([10, -12, 9]) sphere(r=1);\n    }\n    hull() {\n        translate([-25, 12, 9]) sphere(r=1);\n        translate([-25, -12, 9]) sphere(r=1);\n    }\n}\n\n// Cockpit area\nmodule cockpit() {\n    // Seating area\n    translate([-30, 0, 6.5]) cube([20, 18, 2], center=true);\n    \n    // Console\n    translate([-20, 0, 7.5]) cube([4, 12, 6], center=true);\n    \n    // Steering wheel\n    translate([-18, 0, 12]) rotate([90, 0, 0]) cylinder(h=2, r=2, $fn=16);\n}\n\n// Engines/outdrives\nmodule engines() {\n    // Port engine\n    translate([-35, 8, 2]) {\n        cube([8, 6, 4], center=true);\n        translate([5, 0, -2]) rotate([0, 90, 0]) cylinder(h=8, r=2, $fn=12);\n    }\n    \n    // Starboard engine\n    translate([-35, -8, 2]) {\n        cube([8, 6, 4], center=true);\n        translate([5, 0, -2]) rotate([0, 90, 0]) cylinder(h=8, r=2, $fn=12);\n    }\n}\n\n// Windows\nmodule windows() {\n    // Cabin windows\n    translate([-20, 0, 9]) cube([12, 18, 4], center=true);\n    translate([-10, 0, 9]) cube([8, 16, 4], center=true);\n    \n    // Windshield panes\n    for(y = [-8, -4, 0, 4, 8]) {\n        translate([1, y, 11]) cube([1, 2, 3], center=true);\n    }\n}\n\n// Assemble the boat\nunion() {\n    hull();\n    cabin();\n    deck_features();\n    cockpit();\n    engines();\n    \n    // Cut windows from cabin\n    difference() {\n        windows();\n        translate([-20, 0, 9]) cube([12.5, 18.5, 4.5], center=true);\n        translate([-10, 0, 9]) cube([8.5, 16.5, 4.5], center=true);\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "cuddy",
    "openscad_code": "// Cuddy Cabin Model\n// A small boat cuddy with basic interior details\n// Sized at 80mm length for 3D printing\n\ncuddy();\n\nmodule cuddy() {\n    // Main hull base\n    difference() {\n        hull_base();\n        \n        // Interior hollow space\n        translate([5, 5, 10])\n            cube([70, 30, 25]);\n    }\n    \n    // Cabin superstructure\n    cabin();\n    \n    // Cockpit details\n    cockpit();\n    \n    // Railings\n    railings();\n    \n    // Anchor locker\n    anchor_locker();\n}\n\nmodule hull_base() {\n    // Main hull shape with tapered bow\n    hull() {\n        // Stern section\n        translate([5, 10, 0])\n            cube([25, 60, 35]);\n        \n        // Mid section\n        translate([30, 10, 0])\n            cube([25, 60, 30]);\n        \n        // Bow section - tapered\n        translate([50, 25, 0])\n            scale([1, 0.5, 1])\n                cube([25, 40, 25]);\n    }\n}\n\nmodule cabin() {\n    // Cabin walls\n    difference() {\n        // Main cabin block\n        translate([35, 15, 30])\n            cube([35, 50, 25]);\n        \n        // Door opening\n        translate([36, 20, 15])\n            cube([8, 15, 20]);\n        \n        // Windows\n        for(i = [0:1]) {\n            translate([40 + i*20, 14, 35])\n                cube([10, 2, 8]);\n        }\n    }\n    \n    // Cabin roof\n    translate([35, 15, 55])\n        cube([35, 50, 2]);\n    \n    // Roof peak\n    translate([52.5, 40, 57])\n        rotate([90, 0, 0])\n            cylinder(h=25, r1=17.5, r2=17.5);\n}\n\nmodule cockpit() {\n    // Cockpit floor\n    translate([5, 15, 30])\n        cube([25, 50, 2]);\n    \n    // Seating\n    for(i = [0:1]) {\n        translate([10 + i*15, 20, 32])\n            cube([8, 40, 5]);\n    }\n    \n    // Steering console\n    translate([8, 45, 32])\n        cube([15, 8, 12]);\n}\n\nmodule railings() {\n    // Bow rail\n    for(i = [0:4]) {\n        translate([65 - i*5, 25, 25])\n            cylinder(h=10, r=1);\n    }\n    \n    // Side rails\n    for(side = [0:1]) {\n        for(i = [0:7]) {\n            translate([5 + i*8, side ? 5 : 75, 25])\n                cylinder(h=8, r=1);\n        }\n    }\n}\n\nmodule anchor_locker() {\n    // Anchor well in bow\n    translate([60, 35, 25])\n        difference() {\n            cube([15, 15, 8]);\n            translate([2, 2, 2])\n                cube([11, 11, 6]);\n        }\n}",
    "renders": true
  },
  {
    "vehicle": "walkaround",
    "openscad_code": "// Walkaround (inspection bridge) – medium-complexity realistic style\n// Overall footprint ~55 mm × 25 mm × 40 mm (L×W×H)\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main deck platform\nmodule deck() {\n    difference() {\n        // Solid deck slab\n        translate([0, 0, 20]) cube([55, 25, wall], center = true);\n        // Lightening slots\n        for (x = [-20:10:20])\n            translate([x, 0, 20 - wall - 0.1])\n                cube([6, 20, wall + 0.2], center = true);\n    }\n}\n\n// Hand-rail stanchion\nmodule stanchion(h) {\n    cylinder(h = h - wall, r = 1.5, $fn = 12);\n}\n\n// Continuous hand-rail tube\nmodule handrail(h) {\n    translate([0, 0, h]) rotate([90, 0, 0])\n        cylinder(h = 55, r = 1.5, center = true, $fn = 12);\n}\n\n// Left + right railing assembly\nmodule railings() {\n    for (side = [-1, 1]) {\n        translate([0, side * 11.5, 0]) {\n            // Stanchions\n            for (x = [-22:11:22])\n                translate([x, 0, 20 + wall])\n                    stanchion(15);\n            // Top rail\n            translate([0, 0, 20 + wall])\n                handrail(15);\n        }\n    }\n}\n\n// Stair tread\nmodule tread() {\n    cube([10, 24, wall], center = true);\n}\n\n// Stairs module\nmodule stairs() {\n    for (i = [1:6]) {\n        translate([-27.5 - i * 8, 0, 20 - i * 3.2])\n            tread();\n    }\n}\n\n// Support legs under deck\nmodule legs() {\n    for (x = [-20:20:20])\n        translate([x, 0, 10])\n            cube([wall, 25, 20], center = true);\n}\n\n// Ladder vertical bars\nmodule ladder() {\n    for (x = [-2, 2])\n        translate([27.5 + 3, x, 10])\n            cube([wall, wall, 20], center = true);\n    // Rungs\n    for (z = [3:3:18])\n        translate([27.5 + 1.5, 0, z])\n            cube([wall, 4, wall], center = true);\n}\n\n// Combine everything\nunion() {\n    legs();\n    deck();\n    railings();\n    stairs();\n    ladder();\n}",
    "renders": true
  },
  {
    "vehicle": "centerconsole",
    "openscad_code": "// Center Console - Realistic Style, Medium Complexity\n// Dimensions: ~80mm x ~60mm x ~35mm\n\n$fn = 32;\nwall_thickness = 2;\ncorner_radius = 3;\n\nmodule rounded_cube(size, radius) {\n    hull() {\n        translate([radius, radius, radius]) \n            sphere(r=radius);\n        translate([size.x-radius, radius, radius]) \n            sphere(r=radius);\n        translate([radius, size.y-radius, radius]) \n            sphere(r=radius);\n        translate([size.x-radius, size.y-radius, radius]) \n            sphere(r=radius);\n        translate([radius, radius, size.z-radius]) \n            sphere(r=radius);\n        translate([size.x-radius, radius, size.z-radius]) \n            sphere(r=radius);\n        translate([radius, size.y-radius, size.z-radius]) \n            sphere(r=radius);\n        translate([size.x-radius, size.y-radius, size.z-radius]) \n            sphere(r=radius);\n    }\n}\n\nmodule main_body() {\n    difference() {\n        rounded_cube([80, 60, 30], corner_radius);\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            rounded_cube([80-2*wall_thickness, 60-2*wall_thickness, 30], corner_radius-1);\n    }\n}\n\nmodule cup_holder(x, y) {\n    translate([x, y, 0]) {\n        difference() {\n            cylinder(h=25, d=40);\n            translate([0, 0, wall_thickness])\n                cylinder(h=25, d=36);\n        }\n        // Drain holes\n        for(i = [0:3]) {\n            rotate([0, 0, i*90+45])\n                translate([15, 0, 1])\n                    cube([4, 2, 23], center=true);\n        }\n    }\n}\n\nmodule gear_shifter() {\n    translate([40, 20, 30]) {\n        // Base\n        cylinder(h=15, d=20);\n        // Lever\n        translate([0, 0, 15])\n            cylinder(h=25, d1=12, d2=8);\n    }\n}\n\nmodule storage_bin(x, y, w, h, d) {\n    translate([x, y, 0]) {\n        difference() {\n            rounded_cube([w, h, d], corner_radius);\n            translate([wall_thickness, wall_thickness, wall_thickness])\n                rounded_cube([w-2*wall_thickness, h-2*wall_thickness, d], corner_radius-1);\n        }\n    }\n}\n\nmodule buttons(x, y) {\n    translate([x, y, 30]) {\n        // Hazard button\n        cylinder(h=5, d=8);\n        // HVAC buttons\n        for(i = [0:2]) {\n            translate([i*15-15, 15, 0])\n                cylinder(h=5, d=6);\n        }\n    }\n}\n\nmodule vents(x, y) {\n    translate([x, y, 30]) {\n        // Vent housing\n        cube([30, 15, 10], center=true);\n        // Vent slats\n        for(i = [0:4]) {\n            translate([0, -7+i*3.5, 0])\n                rotate([0, 20, 0])\n                    cube([30, 1, 8], center=true);\n        }\n    }\n}\n\n// Assembly\nmain_body();\n\n// Left cup holder\ncup_holder(20, 45);\n\n// Right storage compartment\nstorage_bin(50, 40, 25, 15, 25);\n\n// Gear shifter\ngear_shifter();\n\n// Button panel\nbuttons(20, 15);\n\n// Center vents\nvents(55, 15);\n\n// USB ports\ntranslate([65, 10, 30]) {\n    for(i = [0:1]) {\n        translate([i*8, 0, 0])\n            cube([6, 4, 3], center=true);\n    }\n}\n\n// Armrest\ntranslate([40, 5, 30]) {\n    difference() {\n        rounded_cube([50, 10, 5], 2);\n        translate([5, 5, 2.5])\n            cube([40, 5, 2.5], center=true);\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "bowrider",
    "openscad_code": "// Bowrider boat model - realistic style, medium complexity\n// 3D printable, ~80mm length\n\n// Hull bottom - V-shaped for planing\nmodule hull_bottom() {\n    difference() {\n        hull() {\n            translate([0, -15, 0]) cube([80, 30, 8], center=true);\n            translate([0, -15, -8]) cube([75, 28, 8], center=true);\n            translate([0, -15, -12]) cube([65, 25, 8], center=true);\n        }\n        \n        // Taper the bow\n        translate([40, 0, 0]) rotate([0, 0, -25]) \n            cube([50, 50, 50], center=true);\n    }\n}\n\n// Hull sides with flare\nmodule hull_sides() {\n    difference() {\n        union() {\n            // Starboard side\n            translate([0, 15, 5]) cube([80, 3, 15], center=true);\n            // Port side\n            translate([0, -15, 5]) cube([80, 3, 15], center=true);\n            \n            // Bow flare\n            translate([38, 0, 5]) \n                rotate([0, 90, 0]) cylinder(h=30, r1=8, r2=12, center=true);\n        }\n        \n        // Cut out interior\n        translate([0, 0, 5]) cube([78, 28, 15], center=true);\n    }\n}\n\n// Deck with non-slip texture pattern\nmodule deck() {\n    difference() {\n        // Main deck\n        translate([0, 0, 12]) cube([80, 30, 2], center=true);\n        \n        // Cockpit cutout\n        translate([0, 0, 11]) cube([60, 20, 4], center=true);\n        \n        // Bow seating area\n        translate([30, 0, 11]) cube([20, 26, 4], center=true);\n    }\n    \n    // Non-slip pattern\n    for(x = [-35:5:35]) {\n        for(y = [-12:4:12]) {\n            translate([x, y, 13.1]) cube([1, 1, 0.5], center=true);\n        }\n    }\n}\n\n// Windshield frame\nmodule windshield() {\n    // Frame posts\n    for(side = [-1, 1]) {\n        translate([15, side*8, 10]) cylinder(h=12, r=1.5);\n        translate([5, side*8, 10]) cylinder(h=12, r=1.5);\n    }\n    \n    // Windshield panels\n    translate([10, 0, 16]) rotate([45, 0, 0]) \n        cube([12, 16, 1.5], center=true);\n}\n\n// Seating modules\nmodule seats() {\n    // Driver seat\n    translate([-10, -5, 6]) cube([8, 6, 5], center=true);\n    translate([-10, 5, 6]) cube([8, 6, 5], center=true);\n    \n    // Passenger seat\n    translate([-10, -5, 6]) mirror([0, 1, 0]) \n        cube([8, 6, 5], center=true);\n    \n    // Bow seating\n    for(x = [15:10:35]) {\n        translate([x, 0, 6]) cube([8, 22, 3], center=true);\n    }\n}\n\n// Console with steering wheel\nmodule console() {\n    // Main console\n    translate([-15, 0, 6]) cube([10, 8, 10], center=true);\n    \n    // Steering wheel\n    translate([-15, 0, 12]) rotate([90, 0, 0]) \n        difference() {\n            cylinder(h=1, r=4, center=true);\n            cylinder(h=2, r=2.5, center=true);\n        }\n}\n\n// Outboard motor mount\nmodule transom() {\n    // Transom plate\n    translate([-39, 0, 5]) cube([2, 28, 12], center=true);\n    \n    // Motor well\n    translate([-39, 0, -3]) cube([4, 10, 6], center=true);\n}\n\n// Assembly\nunion() {\n    hull_bottom();\n    hull_sides();\n    deck();\n    windshield();\n    seats();\n    console();\n    transom();\n}",
    "renders": true
  },
  {
    "vehicle": "deckboat",
    "openscad_code": "// Deckboat OpenSCAD model – realistic, medium complexity\n// Overall length ≈ 80 mm, width ≈ 30 mm, height ≈ 18 mm\n// Wall thickness 1 mm for 3D printing\n\nhull_length = 80;\nhull_width  = 30;\nhull_height = 12;\n\nwall = 1.0;\n\nmodule roundedBox(l, w, h, r) {\n    // Simple rounded-corner box using cylinders and cubes\n    translate([0, 0, h/2])\n    hull() {\n        for(dx = [-l/2+r, l/2-r], dy = [-w/2+r, w/2-r])\n            translate([dx, dy, 0])\n                cylinder(r=r, h=h, $fn=16);\n    }\n}\n\nmodule hull() {\n    difference() {\n        // Outer hull shell\n        scale([1, 1, 0.6])\n            roundedBox(hull_length, hull_width, hull_height, 3);\n\n        // Hollow interior\n        translate([0, 0, wall])\n            scale([1, 1, 0.6])\n            roundedBox(hull_length - 2*wall, hull_width - 2*wall, hull_height, 3);\n    }\n}\n\nmodule deckFloor() {\n    translate([0, 0, hull_height*0.6 - 0.1])\n        cube([hull_length - 4, hull_width - 2, wall], center=true);\n}\n\nmodule windscreen() {\n    // Center console windscreen\n    w = 12;\n    h = 7;\n    t = wall;\n    translate([0, 0, hull_height*0.6 + h/2])\n        cube([w, t, h], center=true);\n}\n\nmodule seat(x, y, rot=0) {\n    // Simple bench seat\n    w = 10; d = 5; h = 3;\n    translate([x, y, hull_height*0.6 + h/2])\n    rotate([0, 0, rot])\n        roundedBox(w, d, h, 1);\n}\n\nmodule railingBar(x1, y1, x2, y2, h) {\n    // Vertical rail post\n    dia = 1.5;\n    translate([(x1+x2)/2, (y1+y2)/2, h/2])\n    rotate([0, 90, atan2(y2-y1, x2-x1)])\n        cylinder(h=sqrt(pow(x2-x1,2)+pow(y2-y1,2)), d=dia, $fn=8);\n}\n\nmodule railing() {\n    // Bow rail posts\n    for(side = [-1, 1])\n    for(a = [0:30:150])\n        railingBar(hull_length/2*cos(a)*0.9,\n                   side*hull_width/2*sin(a)*0.9,\n                   hull_length/2*cos(a+30)*0.9,\n                   side*hull_width/2*sin(a+30)*0.9,\n                   6);\n}\n\nmodule motorBracket() {\n    // Outboard bracket at stern\n    translate([-hull_length/2 + 3, 0, hull_height*0.3])\n        cube([6, 10, hull_height*0.6], center=true);\n}\n\nmodule engine() {\n    // Simplified outboard engine\n    translate([-hull_length/2 - 3, 0, hull_height*0.3])\n        cylinder(h=10, d=6, center=true, $fn=12);\n}\n\n// Assembly\nunion() {\n    hull();\n    deckFloor();\n    windscreen();\n    seat(10, 0);\n    seat(-10, 0);\n    seat(0, -8, 90);\n    railing();\n    motorBracket();\n    engine();\n}",
    "renders": true
  },
  {
    "vehicle": "pontoonboat",
    "openscad_code": "// Pontoon Boat - Realistic Medium Complexity\n// Overall dimensions: 90mm L x 40mm W x 25mm H\n\n$fn = 32;  // Smooth curves\n\n// Main hull module\nmodule pontoon_hull(length, width, height) {\n    // Left pontoon\n    translate([-width/2 - 1, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h=length, d=height*0.8);\n    \n    // Right pontoon\n    translate([width/2 + 1, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h=length, d=height*0.8);\n    \n    // Deck platform\n    translate([0, 0, height*0.6])\n        cube([length, width, height*0.3], center=true);\n    \n    // Front nose cone left\n    translate([-width/2 - 1, length/2, 0])\n        rotate([0, 90, 0])\n        cylinder(h=height*0.6, d=height*0.8, d2=height*0.4);\n    \n    // Front nose cone right\n    translate([width/2 + 1, length/2, 0])\n        rotate([0, 90, 0])\n        cylinder(h=height*0.6, d=height*0.8, d2=height*0.4);\n    \n    // Rear cone left\n    translate([-width/2 - 1, -length/2, 0])\n        rotate([0, -90, 0])\n        cylinder(h=height*0.4, d=height*0.8, d2=height*0.6);\n    \n    // Rear cone right\n    translate([width/2 + 1, -length/2, 0])\n        rotate([0, -90, 0])\n        cylinder(h=height*0.4, d=height*0.8, d2=height*0.6);\n}\n\n// Safety rail posts\nmodule rail_post(height) {\n    translate([0, 0, height/2])\n        cylinder(h=height, d=2);\n}\n\n// Safety railing\nmodule safety_railing(length, width, height) {\n    // Front rail\n    translate([0, length/2 - 2, height])\n        cube([width + 4, 1, 2]);\n    \n    // Back rail\n    translate([0, -length/2 + 2, height])\n        cube([width + 4, 1, 2]);\n    \n    // Left rail\n    translate([-width/2 - 2, 0, height])\n        cube([1, length - 4, 2]);\n    \n    // Right rail\n    translate([width/2 + 2, 0, height])\n        cube([1, length - 4, 2]);\n    \n    // Corner posts\n    for(x = [-width/2 - 2, width/2 + 2])\n        for(y = [length/2 - 2, -length/2 + 2])\n            translate([x, y, height])\n                rail_post(6);\n    \n    // Mid posts\n    for(i = [-length/4, 0, length/4])\n        translate([-width/2 - 2, i, height])\n            rail_post(6);\n    \n    for(i = [-length/4, 0, length/4])\n        translate([width/2 + 2, i, height])\n            rail_post(6);\n}\n\n// Seating module\nmodule bench_seat(length, width, height) {\n    // Seat base\n    translate([0, 0, height])\n        cube([length*0.3, width*0.6, 3]);\n    \n    // Seat back\n    translate([0, length*0.12, height + 3])\n        cube([length*0.3, 3, 6]);\n}\n\n// Captain's chair\nmodule helm_seat(height) {\n    // Chair base\n    translate([0, -10, height])\n        cube([8, 8, 5]);\n    \n    // Chair back\n    translate([0, -6, height + 5])\n        cube([8, 3, 8]);\n}\n\n// Console/helm\nmodule helm_console(height) {\n    // Console base\n    translate([0, -15, height])\n        cube([12, 8, 10]);\n    \n    // Steering wheel post\n    translate([0, -15, height + 10])\n        cylinder(h=5, d=2);\n    \n    // Steering wheel\n    translate([0, -15, height + 15])\n        rotate([90, 0, 0])\n        cylinder(h=1, d=8);\n}\n\n// Main assembly\ndifference() {\n    union() {\n        // Main hull\n        pontoon_hull(90, 40, 25);\n        \n        // Safety railing\n        safety_railing(90, 40, 25);\n        \n        // Seating\n        bench_seat(90, 40, 25);\n        \n        // Second bench\n        translate([0, 20, 0])\n            bench_seat(90, 40, 25);\n        \n        // Helm area\n        translate([0, -25, 0])\n            helm_seat(25);\n        \n        // Console\n        translate([0, -25, 0])\n            helm_console(25);\n    }\n    \n    // Cutouts for weight reduction\n    for(i = [-30, -15, 0, 15, 30])\n        translate([i, 0, 25])\n            cube([8, 30, 5], center=true);\n}",
    "renders": true
  },
  {
    "vehicle": "jet",
    "openscad_code": "// Jet Fighter - Realistic Medium Complexity\n// 3D printable model with proper wall thickness and no overhangs\n\n// Configuration\n$fn = 32;\nwall = 1.2;\n\n// Main fuselage module\nmodule fuselage() {\n    // Main body - streamlined cylinder\n    hull() {\n        cylinder(h=40, d1=12, d2=8, center=true);\n        translate([0, 0, 15]) cylinder(h=20, d1=8, d2=6, center=true);\n    }\n    \n    // Cockpit\n    translate([0, 0, 25]) \n        scale([1, 0.8, 0.6]) \n        sphere(d=10);\n    \n    // Nose cone\n    translate([0, 0, -22]) \n        cylinder(h=8, d1=2, d2=12, center=true);\n}\n\n// Wing module\nmodule wing() {\n    // Main wing\n    difference() {\n        // Wing body\n        translate([0, 0, -5]) \n            cube([45, 25, 2], center=true);\n        \n        // Wing tip taper\n        translate([22, 0, -5]) \n            cube([3, 25, 5], center=true);\n    }\n    \n    // Wing root fairing\n    hull() {\n        translate([0, 12.5, -5]) cylinder(h=2, d=3);\n        translate([0, 12.5, -3]) cylinder(h=2, d=1.5);\n    }\n}\n\n// Tail module\nmodule tail() {\n    // Vertical stabilizer\n    translate([0, 0, 15]) {\n        rotate([0, 90, 0]) \n            cylinder(h=15, d1=1, d2=8, center=true);\n    }\n    \n    // Horizontal stabilizers\n    for(side = [-1, 1]) {\n        translate([0, side * 15, 15]) \n            rotate([0, 0, side * 5]) \n            cube([20, 1, 6], center=true);\n    }\n}\n\n// Engine modules\nmodule engine() {\n    // Engine nacelle\n    difference() {\n        cylinder(h=15, d=8, center=true);\n        cylinder(h=15, d=6, center=true);\n    }\n    \n    // Intake\n    translate([0, 0, -7.5]) \n        cylinder(h=3, d1=6, d2=8, center=true);\n}\n\n// Landing gear module\nmodule landing_gear() {\n    // Main gear struts\n    for(side = [-1, 1]) {\n        translate([side * 15, 0, -20]) \n            cylinder(h=8, d=1.5, center=true);\n    }\n    \n    // Nose gear\n    translate([0, 0, -22]) \n        cylinder(h=6, d=1.2, center=true);\n}\n\n// Weapon pylons\nmodule pylons() {\n    for(side = [-1, 1]) {\n        translate([10, side * 12.5, -5]) \n            cube([8, 2, 1], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main body\n    fuselage();\n    \n    // Wings (mirrored)\n    for(side = [-1, 1]) {\n        translate([0, side * 12.5, 0]) \n            mirror([0, side, 0]) \n            wing();\n    }\n    \n    // Tail assembly\n    tail();\n    \n    // Engines (under wings)\n    for(side = [-1, 1]) {\n        translate([side * 15, 0, -15]) \n            rotate([90, 0, 0]) \n            engine();\n    }\n    \n    // Landing gear\n    landing_gear();\n    \n    // Pylons\n    pylons();\n}",
    "renders": true
  },
  {
    "vehicle": "ski",
    "openscad_code": "// Realistic 3D-printable ski – medium complexity\n// Overall length ≈ 85 mm, width ≈ 12 mm, thickness ≈ 3 mm\n\n// Adjustable parameters\nski_length = 85;\nski_width = 12;\nski_thickness = 3;\nwall = 1;               // 3D-print-friendly wall thickness\ntip_upsweep = 8;        // vertical rise of ski tip\n\n// Main ski body profile (tapered toward tip & tail)\nmodule ski_body() {\n    // Taper along length\n    for(i=[0:ski_length]) {\n        taper = 1 - pow(abs(i - ski_length/2) / (ski_length/2), 2);\n        hull() {\n            translate([i, -ski_width*taper/2, 0])\n                cylinder(h=ski_thickness, d=ski_thickness, $fn=8);\n            translate([i,  ski_width*taper/2, 0])\n                cylinder(h=ski_thickness, d=ski_thickness, $fn=8);\n        }\n    }\n}\n\n// Raised tip curve\nmodule tip_curve() {\n    difference() {\n        hull() {\n            translate([0, 0, 0])\n                sphere(d=ski_thickness, $fn=12);\n            translate([ski_length*0.2, 0, tip_upsweep])\n                sphere(d=ski_thickness, $fn=12);\n        }\n        // Remove bottom excess\n        translate([ski_length*0.1, 0, -ski_thickness])\n            cube([ski_length*0.2, ski_width*2, ski_thickness*2], center=true);\n    }\n}\n\n// Tail block (slightly thicker for binding mount)\nmodule tail_block() {\n    translate([ski_length*0.8, 0, 0])\n        scale([1, 1.1, 1.3])\n            cube([ski_length*0.2, ski_width*0.9, ski_thickness], center=true);\n}\n\n// Binding mount holes (two rows)\nmodule binding_holes() {\n    for(x=[ski_length*0.85, ski_length*0.9])\n        for(y=[-ski_width*0.3, ski_width*0.3])\n            translate([x, y, 0])\n                cylinder(h=ski_thickness+0.1, d=wall*1.5, $fn=12);\n}\n\n// Metal edges along sides\nmodule edges() {\n    for(side=[-1,1])\n        translate([0, side*ski_width/2, 0])\n            rotate([90,0,0])\n                cylinder(h=ski_length, d=wall, $fn=8);\n}\n\n// Base surface (flat with slight camber)\nmodule base_surface() {\n    hull() {\n        translate([0, 0, 0])\n            cube([ski_length, ski_width, wall], center=true);\n        translate([ski_length*0.5, 0, 0.5])\n            cube([ski_length*0.9, ski_width*0.9, wall], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main body\n    ski_body();\n    \n    // Tip and tail additions\n    translate([0, 0, ski_thickness/2])\n        tip_curve();\n    translate([0, 0, ski_thickness/2])\n        tail_block();\n    \n    // Edges\n    edges();\n    \n    // Base\n    translate([0, 0, -ski_thickness/2 + wall/2])\n        base_surface();\n    \n    // Remove binding holes\n    difference() {\n        children();\n        binding_holes();\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "personalwatercraft",
    "openscad_code": "// Personal Watercraft - Realistic Medium Complexity\n// Designed for 3D printing (no overhangs >45°)\n\n$fn = 32;\nscale_factor = 0.4;  // Scale to ~80mm length\n\nmodule hull() {\n    // Main hull body - tapered with smooth bottom\n    difference() {\n        hull_shape();\n        // Remove interior for hollow print\n        translate([0, 0, -1])\n            scale([0.9, 0.85, 0.9])\n            hull_shape();\n    }\n}\n\nmodule hull_shape() {\n    union() {\n        // Front nose section\n        translate([-25, 0, 0])\n            scale([1.2, 1, 1])\n            sphere(d=30);\n        \n        // Main hull body\n        translate([0, 0, -5])\n            cube([50, 35, 20], center=true);\n        \n        // Rear tapered section\n        translate([30, 0, 0])\n            rotate([0, 10, 0])\n            cube([25, 30, 15], center=true);\n    }\n}\n\nmodule seat() {\n    // Rider seat with cushion detail\n    translate([5, 0, 12])\n    difference() {\n        // Main seat cushion\n        scale([1, 1, 0.4])\n            sphere(d=25);\n        \n        // Remove bottom part\n        translate([0, 0, -8])\n            cube([30, 25, 20], center=true);\n    }\n}\n\nmodule handlebars() {\n    // Handlebar assembly\n    translate([-5, 0, 15])\n    union() {\n        // Steering column\n        cylinder(h=12, d=8, center=true);\n        \n        // Handlebar crossbar\n        translate([0, 0, 6])\n            rotate([90, 0, 0])\n            cylinder(h=25, d=6, center=true);\n        \n        // Hand grips\n        for(y = [-10, 10]) {\n            translate([0, y, 6])\n                rotate([90, 0, 0])\n                cylinder(h=8, d=8);\n        }\n    }\n}\n\nmodule intake_grate() {\n    // Water intake grate at rear bottom\n    translate([30, 0, -8])\n    difference() {\n        // Base plate\n        cube([15, 25, 2], center=true);\n        \n        // Grate slots\n        for(x = [-6, -3, 0, 3, 6]) {\n            translate([x, 0, 1])\n                cube([2, 20, 2], center=true);\n        }\n    }\n}\n\nmodule jet_nozzle() {\n    // Rear jet nozzle\n    translate([40, 0, 0])\n    rotate([0, -15, 0])\n    cylinder(h=15, d1=12, d2=8);\n}\n\nmodule foot_wells() {\n    // Foot placement areas\n    difference() {\n        hull();\n        \n        // Left foot well\n        translate([10, 12, 0])\n            scale([0.8, 0.6, 0.8])\n            rotate([0, 20, -10])\n            cube([20, 15, 20], center=true);\n        \n        // Right foot well\n        translate([10, -12, 0])\n            scale([0.8, 0.6, 0.8])\n            rotate([0, 20, 10])\n            cube([20, 15, 20], center=true);\n    }\n}\n\nmodule side_mirrors() {\n    // Rear view mirrors on sides\n    for(side = [-1, 1]) {\n        translate([0, side*15, 18])\n        union() {\n            // Mirror stalk\n            rotate([0, 0, side*20])\n                cylinder(h=12, d=3);\n            \n            // Mirror head\n            translate([5, side*5, 0])\n                rotate([0, 10, 0])\n                scale([1, 1.5, 0.3])\n                sphere(d=8);\n        }\n    }\n}\n\n// Main assembly\nscale([scale_factor, scale_factor, scale_factor]) {\n    union() {\n        foot_wells();\n        seat();\n        handlebars();\n        intake_grate();\n        jet_nozzle();\n        side_mirrors();\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "wave",
    "openscad_code": "/* Realistic 3D-printable wave\n   ~80 mm long x 40 mm wide x 25 mm high\n   No overhangs ≥45°, 2 mm walls, flat base */\n\n$fn = 30;          // smooth curves\n\n// overall dimensions\nwave_length = 80;\nwave_width  = 40;\nwave_height = 20;\n\n// wall / thickness parameters\nwall        = 2;\nbase_thick  = 3;\n\n// wave profile parameters\namplitude   = wave_height - base_thick;\nperiods     = 2;                 // two full sine cycles along length\nsegments    = 60;                // segments along length\nseg_len     = wave_length / segments;\n\n/* build the wave */\nunion() {\n    // 1) solid base plate\n    translate([0, 0, -base_thick/2])\n        cube([wave_length, wave_width, base_thick], center = true);\n\n    // 2) outer shell of the wave surface\n    outer_shell();\n\n    // 3) inner shell to hollow out the wave\n    translate([0, 0, -wall]) inner_shell();\n}\n\n/* outer wave surface */\nmodule outer_shell() {\n    for (i = [0 : segments-1]) {\n        x0 = -wave_length/2 + i*seg_len;\n        x1 = x0 + seg_len;\n\n        y0 = -wave_width/2;\n        y1 =  wave_width/2;\n\n        z0 = base_thick + amplitude * sin(periods*2*PI*(i)/segments);\n        z1 = base_thick + amplitude * sin(periods*2*PI*(i+1)/segments);\n\n        // create one segment as a thin box\n        hull() {\n            translate([x0, y0, z0]) sphere(r = wall/2);\n            translate([x1, y0, z1]) sphere(r = wall/2);\n            translate([x0, y1, z0]) sphere(r = wall/2);\n            translate([x1, y1, z1]) sphere(r = wall/2);\n        }\n    }\n}\n\n/* inner wave surface (offset inwards) */\nmodule inner_shell() {\n    for (i = [0 : segments-1]) {\n        x0 = -wave_length/2 + i*seg_len;\n        x1 = x0 + seg_len;\n\n        y0 = -wave_width/2 + wall;\n        y1 =  wave_width/2 - wall;\n\n        z0 = base_thick + (amplitude-wall) * sin(periods*2*PI*(i)/segments);\n        z1 = base_thick + (amplitude-wall) * sin(periods*2*PI*(i+1)/segments);\n\n        hull() {\n            translate([x0, y0, z0]) sphere(r = wall/4);\n            translate([x1, y0, z1]) sphere(r = wall/4);\n            translate([x0, y1, z0]) sphere(r = wall/4);\n            translate([x1, y1, z1]) sphere(r = wall/4);\n        }\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "seadoo",
    "openscad_code": "// Seadoo Watercraft - Medium complexity 3D printable model\n// Approximate size: 90mm length, 35mm width, 30mm height\n\n$fn = 32;  // Smooth curves for printing\n\nmodule main_hull() {\n    difference() {\n        // Main hull body\n        hull() {\n            // Front tapered section\n            translate([0, 0, 8]) scale([1, 0.6, 0.4]) sphere(d=30);\n            // Rear wider section\n            translate([-35, 0, 5]) scale([1.2, 1, 0.5]) sphere(d=35);\n        }\n        \n        // Remove bottom to flatten\n        translate([-50, -25, -5]) cube([100, 50, 10]);\n        \n        // Jet intake hole\n        translate([-42, 0, 2]) rotate([0, 90, 0]) cylinder(h=20, d=8);\n    }\n}\n\nmodule seat() {\n    // Main seat cushion\n    translate([-15, 0, 15]) scale([1, 0.8, 0.3]) sphere(d=25);\n    \n    // Seat back\n    translate([-25, 0, 20]) scale([0.8, 0.9, 0.4]) sphere(d=20);\n}\n\nmodule handlebars() {\n    // Steering column\n    translate([-10, 0, 18]) cylinder(h=15, d=4);\n    \n    // Handlebar cross\n    translate([-10, 0, 32]) rotate([90, 0, 0]) cylinder(h=20, d=3);\n    \n    // Grips\n    for(side = [-1, 1]) {\n        translate([-10, side*8, 32]) rotate([90, 0, 0]) cylinder(h=5, d=4);\n    }\n}\n\nmodule front_bumper() {\n    // Front protective bumper\n    translate([15, 0, 5]) rotate([90, 0, 0]) cylinder(h=30, d=5);\n    translate([15, -12, 5]) rotate([90, 0, 0]) cylinder(h=5, d=5);\n    translate([15, 12, 5]) rotate([90, 0, 0]) cylinder(h=5, d=5);\n}\n\nmodule engine_cover() {\n    // Rear engine cover\n    difference() {\n        translate([-30, 0, 12]) scale([1.2, 1.1, 0.4]) sphere(d=25);\n        // Ventilation grilles\n        for(i = [-2:2]) {\n            translate([-35, i*6, 12]) cube([10, 2, 2]);\n        }\n    }\n}\n\nmodule footwells() {\n    // Left footwell\n    difference() {\n        translate([-20, -12, 5]) cube([40, 12, 8]);\n        translate([-15, -10, 7]) cube([30, 8, 6]);\n    }\n    \n    // Right footwell\n    difference() {\n        translate([-20, 0, 5]) cube([40, 12, 8]);\n        translate([-15, 2, 7]) cube([30, 8, 6]);\n    }\n}\n\nmodule mirrors() {\n    // Left mirror\n    translate([-10, -12, 30]) rotate([0, -20, 0]) cylinder(h=8, d=2);\n    translate([-10, -18, 32]) sphere(d=4);\n    \n    // Right mirror\n    translate([-10, 12, 30]) rotate([0, 20, 0]) cylinder(h=8, d=2);\n    translate([-10, 18, 32]) sphere(d=4);\n}\n\n// Scale entire model to fit print bed\nscale(0.3) {\n    union() {\n        main_hull();\n        seat();\n        handlebars();\n        front_bumper();\n        engine_cover();\n        footwells();\n        mirrors();\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "paddleboard",
    "openscad_code": "// Paddleboard model - realistic style, medium complexity\n// Dimensions: 90mm long x 30mm wide x 8mm thick\n// Wall thickness: 2mm for 3D printing\n\n$fn = 32;\n\n// Main parameters\nboard_length = 90;\nboard_width = 30;\nboard_thickness = 8;\nwall_thickness = 2;\n\n// Create the main board shape\nmodule board_shape() {\n    // Tapered hull shape using scaled cubes\n    union() {\n        // Front section - tapered nose\n        for (i = [0:9]) {\n            translate([i*2, 0, 0])\n                scale([1, 1 - (i*0.05), 1 - (i*0.05)])\n                cube([2, board_width, board_thickness], center = true);\n        }\n        \n        // Main body - constant width\n        translate([10, 0, 0])\n            cube([70, board_width, board_thickness], center = true);\n        \n        // Rear section - tapered tail\n        for (i = [0:4]) {\n            translate([80 + i*2, 0, 0])\n                scale([1, 1 - (i*0.1), 1 - (i*0.1)])\n                cube([2, board_width, board_thickness], center = true);\n        }\n    }\n}\n\n// Create deck pad texture\nmodule deck_pad() {\n    // EVA foam pad pattern\n    for (x = [-30:10:30]) {\n        for (y = [-10:5:10]) {\n            translate([x, y, board_thickness/2 + 0.5])\n                cube([8, 3, 1], center = true);\n        }\n    }\n}\n\n// Create fin box\nmodule fin_box() {\n    // Center fin box\n    translate([board_length/2 - 35, 0, -board_thickness/2 - 1])\n        cube([20, 8, 4], center = true);\n    \n    // Fin\n    translate([board_length/2 - 35, 0, -board_thickness/2 - 3])\n        union() {\n            cube([15, 1, 6]);\n            translate([0, -3, 0])\n                cube([15, 6, 1]);\n        }\n}\n\n// Create leash plug\nmodule leash_plug() {\n    translate([board_length/2 - 42, 0, board_thickness/2])\n        cylinder(h = 3, r = 2);\n}\n\n// Create handle\nmodule handle() {\n    // Recessed handle in center\n    translate([0, 0, 0])\n        difference() {\n            cube([15, board_width - 10, board_thickness], center = true);\n            translate([0, 0, -wall_thickness])\n                cube([13, board_width - 12, board_thickness + 2], center = true);\n        }\n}\n\n// Create rails (edges)\nmodule rails() {\n    hull() {\n        // Top rail\n        translate([board_length/2 - 45, -board_width/2, board_thickness/2])\n            sphere(r = wall_thickness);\n        translate([board_length/2 + 45, -board_width/2, board_thickness/2])\n            sphere(r = wall_thickness);\n        translate([board_length/2 - 45, board_width/2, board_thickness/2])\n            sphere(r = wall_thickness);\n        translate([board_length/2 + 45, board_width/2, board_thickness/2])\n            sphere(r = wall_thickness);\n            \n        // Bottom rail\n        translate([board_length/2 - 45, -board_width/2, -board_thickness/2])\n            sphere(r = wall_thickness);\n        translate([board_length/2 + 45, board_width/2, -board_thickness/2])\n            sphere(r = wall_thickness);\n    }\n}\n\n// Main assembly\nunion() {\n    // Hollowed board\n    difference() {\n        // Outer shape\n        board_shape();\n        \n        // Inner hollow\n        scale([0.9, 0.9, 0.75])\n            board_shape();\n    }\n    \n    // Add rails for smooth edges\n    rails();\n    \n    // Add deck pad on top\n    translate([board_length/2 - 25, 0, 0])\n        deck_pad();\n    \n    // Add fin box and fin\n    fin_box();\n    \n    // Add leash plug\n    leash_plug();\n    \n    // Add handle\n    handle();\n}",
    "renders": true
  },
  {
    "vehicle": "surfboard",
    "openscad_code": "// Realistic 3D printable surfboard ~70 mm long\n// Medium complexity with fins, leash plug, and slight rocker\n\n// Wall thickness for printing\nwall = 1.5;\n\n// Overall board dimensions\nboard_len = 70;\nboard_w   = 20;\nboard_t   = 3;\n\n// Nose and tail curvature\nnose_radius = board_w * 0.7;\ntail_radius = board_w * 0.4;\n\n// Rocker\nnose_lift = 3;\ntail_lift = 1.5;\n\nmodule surfboard() {\n    // Main deck shell\n    difference() {\n        // Outer shape\n        hull() {\n            // Nose sphere\n            translate([board_len/2 - nose_radius, 0, nose_lift])\n                scale([1, 0.7, 0.5])\n                sphere(nose_radius, $fn=40);\n\n            // Tail sphere\n            translate([-board_len/2 + tail_radius, 0, tail_lift])\n                scale([1, 0.7, 0.5])\n                sphere(tail_radius, $fn=40);\n\n            // Mid section\n            for (i = [-1, 1]) mirror([0, i, 0]) {\n                hull() {\n                    translate([board_len/2 - nose_radius, 0, nose_lift])\n                        sphere(0.1);\n                    translate([-board_len/2 + tail_radius, 0, tail_lift])\n                        sphere(0.1);\n                    translate([0, board_w/2, 0])\n                        sphere(0.1);\n                }\n            }\n        }\n\n        // Hollow interior\n        translate([0, 0, -wall])\n            scale([0.8, 0.8, 0.5])\n            hull() {\n                // Nose\n                translate([board_len/2 - nose_radius, 0, nose_lift])\n                    scale([1, 0.7, 0.5])\n                    sphere(nose_radius - wall*2);\n                // Tail\n                translate([-board_len/2 + tail_radius, 0, tail_lift])\n                    scale([1, 0.7, 0.5])\n                    sphere(tail_radius - wall*2);\n                // Mid\n                for (i = [-1, 1]) mirror([0, i, 0]) {\n                    hull() {\n                        translate([board_len/2 - nose_radius, 0, nose_lift])\n                            sphere(0.1);\n                        translate([-board_len/2 + tail_radius, 0, tail_lift])\n                            sphere(0.1);\n                        translate([0, board_w/2 - wall, 0])\n                            sphere(0.1);\n                    }\n                }\n            }\n    }\n\n    // Fins (thruster setup)\n    module fin(h, l, w) {\n        difference() {\n            hull() {\n                translate([0, 0, 0]) cube([l, w, 0.1], center=true);\n                translate([0, 0, h]) cube([l/3, w/2, 0.1], center=true);\n            }\n            translate([0, 0, -1]) cube([l+2, w+2, h+2], center=true);\n        }\n    }\n\n    // Side fins\n    for (i = [-1, 1]) {\n        translate([-board_len/3, i*(board_w/2 - 1), tail_lift - wall]) {\n            rotate([0, 0, i*8])\n                rotate([90, 0, 0])\n                    fin(4, 6, wall);\n        }\n    }\n\n    // Center fin\n    translate([-board_len/3.5, 0, tail_lift - wall]) {\n        rotate([90, 0, 0])\n            fin(4.5, 7, wall);\n    }\n\n    // Leash plug\n    translate([-board_len/2 + 2, 0, tail_lift - wall/2]) {\n        difference() {\n            cylinder(h=wall*2, r=2, $fn=20);\n            cylinder(h=wall*2 + 1, r=1.5, $fn=20);\n        }\n    }\n\n    // Stringer ridge\n    linear_extrude(height=board_t/2, center=true)\n        polygon(points=[\n            [-board_len/2, -0.5],\n            [board_len/2, -0.5],\n            [board_len/2, 0.5],\n            [-board_len/2, 0.5]\n        ]);\n}\n\n// Render the board\nsurfboard();",
    "renders": true
  },
  {
    "vehicle": "windsurfer",
    "openscad_code": "// Windsurfer model - medium complexity realistic style\n// Overall length ~80mm, printable in one piece\n\n// Parameters\nboard_length = 80;\nboard_width = 22;\nboard_thickness = 6;\nmast_length = 60;\nboom_length = 30;\nfin_height = 12;\nfin_base = 8;\nsail_width = 25;\nsail_height = 45;\n\n// Main board hull shape\nmodule board() {\n    difference() {\n        // Main hull - tapered with rounded edges\n        hull() {\n            // Front section\n            translate([-board_length/2+5, 0, 0])\n                scale([1, 0.8, 1])\n                    sphere(d=board_width, $fn=20);\n            // Rear section\n            translate([board_length/2-15, 0, 0])\n                sphere(d=board_width*0.9, $fn=20);\n            // Middle section\n            translate([0, 0, -board_thickness/2])\n                cube([board_length*0.9, board_width*0.7, board_thickness], center=true);\n        }\n        \n        // Deck recess\n        translate([0, 0, board_thickness/2-1])\n            cube([board_length*0.8, board_width*0.6, 2], center=true);\n            \n        // Foot strap holes (4 positions)\n        for(pos = [[-20, 8], [-20, -8], [15, 6], [15, -6]]) {\n            translate([pos[0], pos[1], board_thickness/2-1])\n                cylinder(h=3, d=3, $fn=8);\n        }\n    }\n}\n\n// Fin box and fin\nmodule fin() {\n    // Fin box\n    translate([-board_length/2+30, 0, -board_thickness/2-3])\n        cube([12, 4, 6], center=true);\n    \n    // Fin\n    translate([-board_length/2+30, 0, -board_thickness/2-3-fin_height/2])\n        difference() {\n            // Main fin shape\n            linear_extrude(height=fin_height, convexity=10)\n                polygon(points=[\n                    [-fin_base/2, 0],\n                    [fin_base/2, 0],\n                    [0, fin_height*0.9],\n                    [-fin_base/4, fin_height*0.95],\n                    [fin_base/4, fin_height*0.95]\n                ]);\n                \n            // Fin thickness reduction\n            translate([0, 0, fin_height/2-1])\n                cube([fin_base*0.8, 0.5, fin_height-2], center=true);\n        }\n}\n\n// Mast base\nmodule mast_base() {\n    translate([5, 0, board_thickness/2-1])\n        difference() {\n            cylinder(h=5, d=6, $fn=16);\n            cylinder(h=6, d=3, $fn=16);\n        }\n}\n\n// Mast\nmodule mast() {\n    translate([5, 0, board_thickness/2+2])\n        cylinder(h=mast_length, d=3, $fn=8);\n}\n\n// Boom\nmodule boom() {\n    translate([5, 0, board_thickness/2+15])\n        rotate([90, 0, 0])\n        union() {\n            // Boom arm\n            cylinder(h=boom_length, d=2, $fn=8);\n            \n            // Boom grip sections\n            for(i = [5:5:boom_length-5]) {\n                translate([0, 0, i])\n                    cylinder(h=3, d=2.5, $fn=8);\n            }\n        }\n}\n\n// Sail\nmodule sail() {\n    // Mast sleeve\n    translate([5, 0, board_thickness/2+5])\n        rotate([90, 0, 0])\n        cylinder(h=sail_height, d=3.5, $fn=8);\n    \n    // Main sail body\n    translate([5, sail_width/2, board_thickness/2+5+sail_height/2])\n        rotate([0, 90, 0])\n        difference() {\n            // Sail shape\n            scale([1, sail_height/2, sail_width/2])\n                sphere(d=1, $fn=4);\n                \n            // Cut to flat sail\n            translate([0, 0, -sail_width/2-1])\n                cube([sail_height*2, sail_height*2, sail_width+2], center=true);\n                \n            // Batten indents\n            for(i = [8:8:sail_height-8]) {\n                translate([i-sail_height/2, 0, 0])\n                    cube([1, sail_height*2, sail_width*0.8], center=true);\n            }\n        }\n}\n\n// Assembly\nunion() {\n    board();\n    fin();\n    mast_base();\n    mast();\n    boom();\n    sail();\n}",
    "renders": true
  },
  {
    "vehicle": "kitesurf",
    "openscad_code": "// Kitesurf Board - Realistic Style, Medium Complexity\n// Overall dimensions: ~100mm long, 35mm wide, 10mm thick\n\n// Parameters\nboard_length = 100;\nboard_width = 35;\nboard_thickness = 4;\nfin_height = 10;\nfin_thickness = 3;\nfootpad_length = 25;\nfootpad_width = 12;\nfootpad_thickness = 2;\nstrap_width = 4;\nstrap_thickness = 1.5;\nhandle_length = 20;\nhandle_width = 15;\nhandle_thickness = 2;\n\n// Main board with rounded edges\nmodule board() {\n    // Base board shape\n    difference() {\n        // Main board body with rounded ends\n        hull() {\n            translate([-board_length/2, 0, 0])\n                scale([1, 0.3, 1])\n                sphere(d=board_width, $fn=30);\n            translate([board_length/2, 0, 0])\n                scale([1, 0.3, 1])\n                sphere(d=board_width, $fn=30);\n            cube([board_length, board_width, board_thickness], center=true);\n        }\n        \n        // Taper edges slightly for realistic shape\n        for(i = [-1, 1]) {\n            translate([i * board_length/3, 0, board_thickness/2 - 1])\n                rotate([0, 90, 0])\n                cylinder(h=board_width*1.2, r=board_thickness, center=true, $fn=20);\n        }\n    }\n}\n\n// Fins on bottom\nmodule fins() {\n    for(pos = [-25, 0, 25]) {\n        translate([pos, 0, -board_thickness/2 - fin_height/2])\n            difference() {\n                cube([fin_thickness*2, 20, fin_height], center=true);\n                translate([0, 0, fin_height/2 - 1])\n                    cube([fin_thickness*2 + 0.5, 21, 2], center=true);\n            }\n    }\n}\n\n// Foot pads\nmodule footpads() {\n    for(side = [-1, 1]) {\n        translate([0, side * (board_width/4), board_thickness/2 + footpad_thickness/2])\n            difference() {\n                // Main pad\n                cube([footpad_length, footpad_width, footpad_thickness], center=true);\n                \n                // Grooves for grip\n                for(g = [-8, -4, 0, 4, 8]) {\n                    translate([g, 0, footpad_thickness/2 - 0.1])\n                        cube([0.5, footpad_width - 2, 0.2], center=true);\n                }\n            }\n    }\n}\n\n// Foot straps\nmodule straps() {\n    for(side = [-1, 1]) {\n        translate([0, side * (board_width/4), board_thickness/2 + footpad_thickness + strap_thickness/2])\n            difference() {\n                // Main strap\n                cube([footpad_length - 5, strap_width, strap_thickness], center=true);\n                \n                // Rounded edges\n                translate([footpad_length/2 - 2.5, 0, 0])\n                    rotate([0, 90, 0])\n                    cylinder(h=strap_width, r=strap_thickness/2, center=true, $fn=10);\n                translate([-footpad_length/2 + 2.5, 0, 0])\n                    rotate([0, 90, 0])\n                    cylinder(h=strap_width, r=strap_thickness/2, center=true, $fn=10);\n            }\n    }\n}\n\n// Center handle\nmodule handle() {\n    translate([0, 0, board_thickness/2 + handle_thickness/2 + 3])\n        difference() {\n            // Handle base\n            cube([handle_length, handle_width, handle_thickness], center=true);\n            \n            // Cutout for fingers\n            translate([0, 0, handle_thickness/2 - 0.1])\n                cube([handle_length - 8, handle_width - 8, handle_thickness + 0.2], center=true);\n                \n            // Rounded corners\n            for(corner = [[1,1], [1,-1], [-1,1], [-1,-1]]) {\n                translate([corner[0] * (handle_length/2 - 1), corner[1] * (handle_width/2 - 1), 0])\n                    cylinder(h=handle_thickness + 0.2, r=1, center=true, $fn=8);\n            }\n        }\n}\n\n// Assembly\nunion() {\n    board();\n    fins();\n    footpads();\n    straps();\n    handle();\n}",
    "renders": true
  },
  {
    "vehicle": "foilsurf",
    "openscad_code": "// Foilsurf (Hydrofoil Surfboard) - Realistic Style, Medium Complexity\n// Overall length ~85 mm, printable without support\n\n$fn = 36;        // Smooth curves\nwall = 1.2;      // Printable wall thickness\n\nmodule board() {\n    // Main surfboard body - 65 mm long\n    hull() {\n        // Top deck\n        translate([0, 0, 5])\n            scale([1, 0.35, 0.15])\n                sphere(d = 60);\n        // Bottom hull\n        translate([0, 0, 1])\n            scale([1, 0.33, 0.08])\n                sphere(d = 60);\n    }\n    // Tapered tail\n    difference() {\n        translate([-30, 0, 3])\n            rotate([0, 10, 0])\n                scale([0.7, 0.3, 0.2])\n                    cube([25, 20, 10], center = true);\n        translate([-35, 0, 3])\n            rotate([0, 10, 0])\n                scale([0.8, 0.4, 0.25])\n                    cube([30, 22, 12], center = true);\n    }\n}\n\nmodule mast() {\n    // Mast 35 mm long\n    difference() {\n        union() {\n            // Main mast tube\n            translate([0, 0, -15])\n                rotate([90, 0, 0])\n                    cylinder(h = 32, d = 6, center = true);\n            // Top mounting plate\n            translate([0, 0, 1])\n                cube([12, 7, 1.5], center = true);\n        }\n        // Hollow tube for weight/material saving\n        translate([0, 0, -15])\n            rotate([90, 0, 0])\n                cylinder(h = 35, d = 3.5, center = true);\n    }\n}\n\nmodule fuselage() {\n    // Fuselage body 20 mm long\n    hull() {\n        // Front bulb\n        translate([0, 0, -32])\n            sphere(d = 6);\n        // Rear tail\n        translate([-15, 0, -32])\n            sphere(d = 4);\n    }\n    // Stabilizer mount\n    translate([-20, 0, -32])\n        rotate([90, 0, 0])\n            cylinder(h = 5, d1 = 4, d2 = 3);\n}\n\nmodule front_wing() {\n    // Main front wing 35 mm span\n    difference() {\n        // Wing body\n        translate([0, 0, -32])\n            rotate([0, 90, 0])\n                scale([1, 0.15, 0.3])\n                    cylinder(h = 35, d = 12, center = true);\n        // Leading edge taper\n        translate([3, 0, -32])\n            rotate([0, 90, 0])\n                scale([1, 0.15, 0.25])\n                    cylinder(h = 40, d = 10, center = true);\n    }\n    // Wing tips\n    for (y = [-17.5, 17.5])\n        translate([0, y, -32])\n            rotate([0, 90, 0])\n                scale([0.3, 0.15, 1])\n                    cylinder(h = 5, d = 8);\n}\n\nmodule rear_wing() {\n    // Rear stabilizer 20 mm span\n    difference() {\n        translate([-20, 0, -32])\n            rotate([0, 90, 0])\n                scale([1, 0.12, 0.25])\n                    cylinder(h = 20, d = 8, center = true);\n        translate([-17, 0, -32])\n            rotate([0, 90, 0])\n                scale([1, 0.12, 0.2])\n                    cylinder(h = 25, d = 6, center = true);\n    }\n}\n\n// Assemble all parts\nunion() {\n    board();\n    mast();\n    fuselage();\n    front_wing();\n    rear_wing();\n}",
    "renders": true
  },
  {
    "vehicle": "surfski",
    "openscad_code": "// Surfski - Realistic Medium Complexity\n// Scaled for 3D printing (approx 80mm long)\n\n// Hull parameters\nhull_length = 80;\nhull_width = 12;\nhull_height = 8;\nnose_taper = 0.6;\ntail_taper = 0.4;\n\n// Cockpit parameters\ncockpit_length = 25;\ncockpit_width = 8;\ncockpit_depth = 3;\ncockpit_offset = -10;\n\n// Footwell parameters\nfootwell_length = 20;\nfootwell_width = 6;\nfootwell_depth = 2;\nfootwell_offset = 20;\n\n// Rudder parameters\nrudder_height = 4;\nrudder_width = 3;\nrudder_thickness = 1;\n\n// Deck fittings\ndeck_line_diameter = 0.8;\ndeck_line_segments = 6;\n\n// Wall thickness for 3D printing\nwall_thickness = 1.5;\n\nmodule hull_shape() {\n    // Main hull body\n    hull_profile = hull_length / 2;\n    difference() {\n        union() {\n            // Main hull\n            translate([0, 0, hull_height/2]) {\n                scale([1, 1, 0.5]) {\n                    sphere(d = hull_width);\n                }\n            }\n            \n            // Nose\n            translate([hull_length/2 - hull_width/2, 0, hull_height/2]) {\n                scale([nose_taper, 1, 0.5]) {\n                    sphere(d = hull_width);\n                }\n            }\n            \n            // Tail\n            translate([-hull_length/2 + hull_width/2, 0, hull_height/2]) {\n                scale([tail_taper, 1, 0.5]) {\n                    sphere(d = hull_width);\n                }\n            }\n            \n            // Connect nose and tail\n            hull() {\n                translate([hull_length/2 - hull_width/2, 0, hull_height/2]) {\n                    sphere(d = hull_width * nose_taper);\n                }\n                translate([-hull_length/2 + hull_width/2, 0, hull_height/2]) {\n                    sphere(d = hull_width * tail_taper);\n                }\n            }\n        }\n        \n        // Hollow out interior\n        translate([0, 0, hull_height/2 + wall_thickness/2]) {\n            scale([1, 0.8, 0.4]) {\n                sphere(d = hull_width - wall_thickness * 2);\n            }\n        }\n    }\n}\n\nmodule cockpit() {\n    // Main cockpit opening\n    difference() {\n        translate([cockpit_offset, 0, hull_height]) {\n            scale([1, 0.8, 0.5]) {\n                cube([cockpit_length, cockpit_width, cockpit_depth], center = true);\n            }\n        }\n        \n        // Smooth edges\n        translate([cockpit_offset, 0, hull_height + 0.5]) {\n            scale([1, 0.8, 0.5]) {\n                cube([cockpit_length - 2, cockpit_width - 2, cockpit_depth + 1], center = true);\n            }\n        }\n    }\n    \n    // Footwell\n    difference() {\n        translate([footwell_offset, 0, hull_height]) {\n            scale([1, 0.6, 0.5]) {\n                cube([footwell_length, footwell_width, footwell_depth], center = true);\n            }\n        }\n        \n        // Smooth edges\n        translate([footwell_offset, 0, hull_height + 0.5]) {\n            scale([1, 0.6, 0.5]) {\n                cube([footwell_length - 2, footwell_width - 2, footwell_depth + 1], center = true);\n            }\n        }\n    }\n}\n\nmodule rudder_system() {\n    // Rudder mount\n    translate([-hull_length/2 + 2, 0, hull_height/2]) {\n        rotate([90, 0, 0]) {\n            cylinder(h = 2, d = 3, center = true);\n        }\n    }\n    \n    // Rudder blade\n    translate([-hull_length/2, 0, hull_height/2 - rudder_height/2]) {\n        cube([rudder_thickness, rudder_width, rudder_height], center = true);\n    }\n    \n    // Rudder post\n    translate([-hull_length/2, 0, hull_height/2]) {\n        rotate([90, 0, 0]) {\n            cylinder(h = rudder_height, d = 1.5, center = true);\n        }\n    }\n}\n\nmodule deck_fittings() {\n    // Deck lines\n    for(i = [-1:1]) {\n        y_pos = i * 3;\n        translate([cockpit_offset + 10, y_pos, hull_height + 0.5]) {\n            rotate([90, 0, 0]) {\n                cylinder(h = hull_length/4, d = deck_line_diameter);\n            }\n        }\n        \n        translate([cockpit_offset - 10, y_pos, hull_height + 0.5]) {\n            rotate([90, 0, 0]) {\n                cylinder(h = hull_length/4, d = deck_line_diameter);\n            }\n        }\n    }\n    \n    // Handles\n    translate([hull_length/2 - 2, 0, hull_height/2]) {\n        rotate([0, 90, 0]) {\n            difference() {\n                cylinder(h = 4, d = 2);\n                cylinder(h = 4.1, d = 1);\n            }\n        }\n    }\n    \n    translate([-hull_length/2 + 2, 0, hull_height/2]) {\n        rotate([0, 90, 0]) {\n            difference() {\n                cylinder(h = 4, d = 2);\n                cylinder(h = 4.1, d = 1);\n            }\n        }\n    }\n}\n\nmodule surfski() {\n    // Combine all components\n    union() {\n        hull_shape();\n        cockpit();\n        rudder_system();\n        deck_fittings();\n    }\n}\n\n// Render the surfski\nsurfski();",
    "renders": true
  },
  {
    "vehicle": "outriggercanoe",
    "openscad_code": "// Outrigger canoe – medium complexity, realistic style\n// Overall length ≈ 90 mm, printable without support\n\n$fn = 36;\n\n// Main assembly\nmodule outrigger_canoe() {\n    union() {\n        // Central hull\n        hull();\n\n        // Outrigger float (ama)\n        translate([32, -18, -5]) rotate([0, 5, 0]) ama();\n\n        // Two iako cross‐arms\n        iako(15);\n        translate([0, 0, 6]) rotate([0, 0, 180]) iako(15);\n\n        // Simple bench seats\n        translate([-20, 0, 5]) seat();\n        translate([10, 0, 5]) seat();\n    }\n}\n\n// Long, slender main hull\nmodule hull() {\n    difference() {\n        union() {\n            // Symmetric hull halves\n            mirror([0, 1, 0]) hull_half();\n            hull_half();\n        }\n        // Hollow interior\n        scale([0.9, 0.9, 0.9]) {\n            mirror([0, 1, 0]) hull_half();\n            hull_half();\n        }\n    }\n}\n\nmodule hull_half() {\n    // Create smooth curved hull via hull() of circles\n    hull() {\n        translate([-42, 0, 0]) scale([1, 0.5, 0.5]) sphere(d = 12);\n        translate([-20, 0, 0]) scale([1, 0.7, 0.7]) sphere(d = 14);\n        translate([0, 0, 0]) scale([1, 0.8, 0.8]) sphere(d = 15);\n        translate([20, 0, 0]) scale([1, 0.7, 0.7]) sphere(d = 12);\n        translate([40, 0, 0]) scale([1, 0.4, 0.4]) sphere(d = 8);\n    }\n}\n\n// Outrigger float (ama) – similar build\nmodule ama() {\n    difference() {\n        hull() {\n            translate([-15, 0, 0]) scale([1, 0.4, 0.4]) sphere(d = 8);\n            translate([0, 0, 0]) scale([1, 0.5, 0.5]) sphere(d = 10);\n            translate([15, 0, 0]) scale([1, 0.4, 0.4]) sphere(d = 8);\n        }\n        // Hollow\n        scale([0.8, 0.7, 0.7]) {\n            hull() {\n                translate([-15, 0, 0]) scale([1, 0.4, 0.4]) sphere(d = 8);\n                translate([0, 0, 0]) scale([1, 0.5, 0.5]) sphere(d = 10);\n                translate([15, 0, 0]) scale([1, 0.4, 0.4]) sphere(d = 8);\n            }\n        }\n    }\n}\n\n// Iako cross‐arm (boom)\nmodule iako(len = 15) {\n    rotate([0, -90, 0])\n    difference() {\n        // Slight taper toward ends\n        hull() {\n            translate([-len, 0, 0]) cylinder(h = len * 2, d1 = 3, d2 = 2);\n            translate([len, 0, 0]) cylinder(h = len * 2, d1 = 3, d2 = 2);\n        }\n        // Internal hole for weight\n        cylinder(h = len * 2 + 1, d = 1.5, $fn = 12);\n    }\n}\n\n// Simple bench seat\nmodule seat() {\n    difference() {\n        // Top plank\n        cube([20, 8, 2], center = true);\n        // Lightening holes\n        for (x = [-7, 0, 7])\n            translate([x, 0, 0]) cylinder(h = 3, d = 2, center = true);\n    }\n}\n\n// Render the model\noutrigger_canoe();",
    "renders": true
  },
  {
    "vehicle": "dragonboat",
    "openscad_code": "// Dragonboat - medium complexity realistic style\n// Scaled for 3D printing, ~80mm long\n\n// Hull parameters\nhull_length = 80;\nhull_width = 12;\nhull_height = 6;\nbow_height = 10;\nstern_height = 8;\n\n// Dragon head parameters\nhead_length = 15;\nhead_height = 10;\nhead_width = 10;\n\n// Paddle parameters\npaddle_length = 20;\npaddle_width = 2;\npaddle_thickness = 1;\npaddle_count = 10;\n\n// Support ribs\nrib_count = 5;\nrib_thickness = 1.5;\n\n// Hull module with tapered ends\nmodule hull() {\n    // Main hull body\n    hull_profile = [\n        [0, 0],\n        [hull_length*0.1, hull_height],\n        [hull_length*0.9, hull_height],\n        [hull_length, 0]\n    ];\n    \n    // Create hull shape\n    linear_extrude(height = hull_width, convexity = 10) {\n        polygon(points = hull_profile);\n    }\n}\n\n// Dragon head module\nmodule dragon_head() {\n    // Head base\n    translate([-head_length-2, -head_width/2, 0])\n    scale([1, 0.8, 1])\n    cylinder(h = head_height, r1 = head_width/2, r2 = head_width/3);\n    \n    // Snout\n    translate([-head_length-2, -head_width/4, head_height-2])\n    rotate([0, -30, 0])\n    cylinder(h = 8, r1 = head_width/3, r2 = 2);\n    \n    // Eyes\n    for(side = [-1, 1]) {\n        translate([-head_length-5, side*head_width/3, head_height-3])\n        sphere(r = 2);\n    }\n    \n    // Horns\n    for(side = [-1, 1]) {\n        translate([-head_length-2, side*head_width/2, head_height+1])\n        rotate([0, 0, side*30])\n        cylinder(h = 5, r1 = 1.5, r2 = 0.5);\n    }\n}\n\n// Dragon tail module\nmodule dragon_tail() {\n    // Tail base\n    translate([hull_length+2, -hull_width/2, 0])\n    scale([1, 0.6, 0.8])\n    cylinder(h = stern_height, r1 = hull_width/2, r2 = hull_width/4);\n    \n    // Tail fin\n    translate([hull_length+5, -1, stern_height-2])\n    rotate([0, 0, 0])\n    cube([8, 2, 6]);\n}\n\n// Paddle module\nmodule paddle() {\n    // Shaft\n    cylinder(h = paddle_length, r = 0.5);\n    \n    // Blade\n    translate([0, 0, paddle_length])\n    scale([1, 0.3, 1])\n    cube([paddle_width, paddle_thickness, 8], center = true);\n}\n\n// Support ribs\nmodule support_ribs() {\n    for(i = [1:rib_count-1]) {\n        translate([i*hull_length/rib_count, 0, 0])\n        rotate([0, 90, 0])\n        difference() {\n            cylinder(h = hull_width+2, r = hull_height+1);\n            cylinder(h = hull_width+3, r = hull_height-1);\n        }\n    }\n}\n\n// Seats/benches\nmodule seats() {\n    for(i = [1:paddle_count-1]) {\n        translate([i*hull_length/(paddle_count+1), -hull_width/2-1, hull_height])\n        cube([hull_width/2, 2, 1.5]);\n    }\n}\n\n// Main assembly\nunion() {\n    // Hull - rotate to correct orientation\n    rotate([90, 0, 0])\n    hull();\n    \n    // Dragon head\n    translate([-head_length/2, 0, hull_height])\n    dragon_head();\n    \n    // Dragon tail\n    translate([hull_length, 0, 0])\n    dragon_tail();\n    \n    // Support ribs\n    translate([0, 0, hull_height/2])\n    support_ribs();\n    \n    // Seats\n    seats();\n    \n    // Paddles along sides\n    for(i = [1:paddle_count-1]) {\n        // Left side paddles\n        translate([i*hull_length/(paddle_count+1), -hull_width/2-2, hull_height+2])\n        rotate([90, 0, 45])\n        paddle();\n        \n        // Right side paddles\n        translate([i*hull_length/(paddle_count+1), hull_width/2+2, hull_height+2])\n        rotate([90, 0, -45])\n        paddle();\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "warcanoe",
    "openscad_code": "// War Canoe - Realistic Style, Medium Complexity\n// Dimensions: ~90mm long, ~20mm wide, ~12mm high\n\n// Overall scale factor\nscale_factor = 1;\n\n// Hull parameters\nhull_length = 90 * scale_factor;\nhull_width = 18 * scale_factor;\nhull_height = 8 * scale_factor;\nhull_thickness = 1.5 * scale_factor;\n\n// Bow/stern rise\nbow_rise = 6 * scale_factor;\nstern_rise = 4 * scale_factor;\n\n// Seats\nseat_count = 3;\nseat_width = 14 * scale_factor;\nseat_thickness = 1 * scale_factor;\nseat_spacing = 20 * scale_factor;\n\n// Paddles\npaddle_count = 6;\npaddle_length = 25 * scale_factor;\npaddle_blade_width = 4 * scale_factor;\npaddle_handle_diameter = 1 * scale_factor;\n\n// Shield decorations\nshield_count = 4;\nshield_diameter = 5 * scale_factor;\n\nmodule hull_shape() {\n    // Main hull body\n    difference() {\n        // Outer hull - elongated ellipsoid shape\n        hull() {\n            for (i = [0:10]) {\n                translate([i * hull_length/10 - hull_length/2, 0, 0])\n                    scale([1, 1 - abs(i - 5)/7, 1])\n                        cylinder(h = hull_height + sin(i * 18) * (i < 5 ? bow_rise : stern_rise), \n                                r1 = hull_width/2 * (1 - abs(i - 5)/8), \n                                r2 = hull_width/2 * (1 - abs(i - 5)/8), \n                                $fn = 20);\n            }\n        }\n        \n        // Inner cavity - hollow out the hull\n        translate([0, 0, -hull_thickness/2])\n            scale([0.85, 0.85, 0.8])\n                hull_shape_inner();\n    }\n}\n\nmodule hull_shape_inner() {\n    hull() {\n        for (i = [0:10]) {\n            translate([i * hull_length/10 - hull_length/2, 0, 0])\n                scale([1, 1 - abs(i - 5)/7, 1])\n                    cylinder(h = hull_height + sin(i * 18) * (i < 5 ? bow_rise : stern_rise) - hull_thickness*2, \n                            r1 = hull_width/2 * (1 - abs(i - 5)/8) - hull_thickness, \n                            r2 = hull_width/2 * (1 - abs(i - 5)/8) - hull_thickness, \n                            $fn = 20);\n        }\n    }\n}\n\nmodule seats() {\n    for (i = [0:seat_count-1]) {\n        translate([\n            -hull_length/2 + 20 + i * seat_spacing, \n            0, \n            hull_height - 2\n        ]) {\n            // Seat platform\n            cube([seat_width, seat_thickness, 2], center = true);\n            \n            // Seat supports\n            translate([-seat_width/2 + 2, 0, -1.5])\n                cube([1.5, seat_thickness, 3]);\n            translate([seat_width/2 - 2, 0, -1.5])\n                cube([1.5, seat_thickness, 3]);\n        }\n    }\n}\n\nmodule gunwale() {\n    // Upper rim reinforcement\n    difference() {\n        hull() {\n            for (i = [0:20]) {\n                translate([i * hull_length/20 - hull_length/2, 0, hull_height])\n                    scale([1, 1 - abs(i - 10)/12, 1])\n                        cylinder(h = 2, \n                                r1 = hull_width/2 * (1 - abs(i - 10)/10) + 1, \n                                r2 = hull_width/2 * (1 - abs(i - 10)/10) + 1, \n                                $fn = 16);\n            }\n        }\n        \n        // Remove inner part\n        translate([0, 0, -1])\n            scale([0.9, 0.9, 2])\n                hull() {\n                    for (i = [0:20]) {\n                        translate([i * hull_length/20 - hull_length/2, 0, hull_height + 2])\n                            scale([1, 1 - abs(i - 10)/12, 1])\n                                cylinder(h = 4, \n                                        r1 = hull_width/2 * (1 - abs(i - 10)/10), \n                                        r2 = hull_width/2 * (1 - abs(i - 10)/10), \n                                        $fn = 16);\n                    }\n                }\n    }\n}\n\nmodule shields() {\n    for (i = [0:shield_count-1]) {\n        angle = i * 360/shield_count;\n        radius = hull_width/2 + 2;\n        \n        translate([\n            cos(angle) * radius * 0.3, \n            sin(angle) * radius, \n            hull_height/2 + 3\n        ]) {\n            rotate([90, 0, angle])\n                difference() {\n                    // Shield body\n                    cylinder(h = 0.8, r = shield_diameter/2, $fn = 32);\n                    \n                    // Shield boss\n                    translate([0, 0, -0.1])\n                        cylinder(h = 1, r = shield_diameter/4, $fn = 16);\n                    \n                    // Shield decoration lines\n                    for (j = [0:3]) {\n                        rotate([0, 0, j * 45])\n                            translate([0, shield_diameter/4, 0])\n                                cube([shield_diameter/8, shield_diameter/2, 1.2], center = true);\n                    }\n                }\n        }\n    }\n}\n\nmodule paddle() {\n    // Paddle blade\n    translate([0, 0, paddle_length/2])\n        difference() {\n            // Blade\n            scale([1, 2.5, 0.1])\n                sphere(r = paddle_blade_width, $fn = 16);\n            \n            // Taper blade\n            translate([0, 0, -0.5])\n                scale([0.7, 0.7, 2])\n                    sphere(r = paddle_blade_width, $fn = 16);\n        }\n    \n    // Handle\n    translate([0, 0, 0])\n        rotate([90, 0, 0])\n            cylinder(h = paddle_length - paddle_blade_width, \n                    r = paddle_handle_diameter/2, \n                    $fn = 8);\n    \n    // Handle grip\n    translate([0, 0, -paddle_length/2 + 3])\n        cylinder(h = 4, r = paddle_handle_diameter/2 + 0.3, $fn = 8);\n}\n\nmodule paddles_stored() {\n    for (i = [0:paddle_count-1]) {\n        side = i % 2 == 0 ? 1 : -1;\n        position = -hull_length/2 + 15 + (i/2) * (hull_length - 30)/(paddle_count/2 - 1);\n        \n        translate([\n            side * (hull_width/2 + 1), \n            position, \n            hull_height - 1\n        ]) {\n            rotate([0, 90, side * 20])\n                paddle();\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Hull\n    hull_shape();\n    \n    // Gunwale reinforcement\n    gunwale();\n    \n    // Seats\n    seats();\n    \n    // Decorative shields\n    shields();\n    \n    // Paddles stored along sides\n    paddles_stored();\n}",
    "renders": true
  },
  {
    "vehicle": "umiak",
    "openscad_code": "// Umiak - realistic style, medium complexity\n// Traditional Inuit skin boat with wooden frame\n\n// Main parameters\numiak_length = 90;\numiak_width = 25;\numiak_height = 12;\nwall_thickness = 1.5;\nframe_thickness = 1;\n\n// Hull module\nmodule hull() {\n    difference() {\n        // Main hull shape\n        scale([1, 0.6, 0.4])\n            cylinder(h=umiak_height * 2, d=umiak_width, $fn=50);\n        \n        // Hollow interior\n        translate([0, 0, -wall_thickness])\n            scale([1, 0.6, 0.4])\n                cylinder(h=umiak_height * 2 + wall_thickness * 2, \n                        d=umiak_width - wall_thickness * 2, \n                        $fn=50);\n        \n        // Flatten bottom slightly\n        translate([0, 0, -umiak_height * 0.8])\n            cube([umiak_length * 2, umiak_width * 2, umiak_height], center=true);\n    }\n}\n\n// Gunwale (top edge reinforcement)\nmodule gunwale() {\n    translate([0, 0, umiak_height * 0.4])\n        difference() {\n            scale([1.05, 0.65, 0.1])\n                cylinder(h=umiak_height * 0.5, d=umiak_width, $fn=50);\n            scale([1, 0.6, 0.1])\n                cylinder(h=umiak_height * 0.5, d=umiak_width - wall_thickness * 2, $fn=50);\n        }\n}\n\n// Frame ribs\nmodule frame_ribs() {\n    for (i = [-35:15:35]) {\n        translate([i, 0, -umiak_height * 0.2])\n            rotate([90, 0, 0])\n                difference() {\n                    // Main rib\n                    scale([1, 1.2, 1])\n                        cylinder(h=umiak_width * 0.7, d=frame_thickness * 2, $fn=8);\n                    \n                    // Cut bottom flat\n                    translate([0, 0, -umiak_width * 0.5])\n                        cube([frame_thickness * 4, umiak_width, umiak_width], center=true);\n                }\n    }\n}\n\n// Cross braces\nmodule cross_braces() {\n    for (i = [-25:20:25]) {\n        translate([i, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=umiak_width * 0.9, d=frame_thickness, $fn=6);\n    }\n}\n\n// Bow and stern posts\nmodule end_posts() {\n    // Bow\n    translate([40, 0, 0])\n        rotate([0, 0, -15])\n            union() {\n                cylinder(h=15, d=frame_thickness * 2, $fn=6);\n                translate([7.5, 0, 0])\n                    sphere(d=frame_thickness * 2, $fn=8);\n            }\n    \n    // Stern\n    translate([-40, 0, 0])\n        rotate([0, 0, 15])\n            union() {\n                cylinder(h=15, d=frame_thickness * 2, $fn=6);\n                translate([-7.5, 0, 0])\n                    sphere(d=frame_thickness * 2, $fn=8);\n            }\n}\n\n// Skin lacing detail\nmodule lacing_detail() {\n    for (i = [-35:5:35]) {\n        translate([i, umiak_width * 0.3, umiak_height * 0.3])\n            rotate([90, 0, 0])\n                cylinder(h=1, d=0.5, $fn=4);\n        translate([i, -umiak_width * 0.3, umiak_height * 0.3])\n            rotate([90, 0, 0])\n                cylinder(h=1, d=0.5, $fn=4);\n    }\n}\n\n// Assemble the umiak\nunion() {\n    // Hull structure\n    hull();\n    gunwale();\n    \n    // Frame structure\n    frame_ribs();\n    cross_braces();\n    end_posts();\n    \n    // Detail elements\n    lacing_detail();\n}",
    "renders": true
  },
  {
    "vehicle": "kayacht",
    "openscad_code": "// Kayacht - Medium complexity realistic 3D printable model\n// Total length ~80mm for 3D printing\n\nhull_length = 80;\nhull_width = 25;\nhull_height = 12;\ndeck_thickness = 2;\nwall_thickness = 2;\n\nmodule hull() {\n    difference() {\n        // Main hull shape\n        hull_main();\n        \n        // Cockpit opening\n        translate([0, 0, hull_height/2 + deck_thickness/2])\n            cube([hull_length*0.6, hull_width*0.5, deck_thickness*2], center=true);\n    }\n}\n\nmodule hull_main() {\n    // Create hull with rounded bottom\n    hull_points = [\n        [hull_length/2, hull_width/2, 0],\n        [-hull_length/2, hull_width/2, 0],\n        [-hull_length/2, -hull_width/2, 0],\n        [hull_length/2, -hull_width/2, 0],\n        [hull_length/2, hull_width/2 - wall_thickness, hull_height],\n        [-hull_length/2 + 5, hull_width/2 - wall_thickness, hull_height],\n        [-hull_length/2 + 5, -hull_width/2 + wall_thickness, hull_height],\n        [hull_length/2, -hull_width/2 + wall_thickness, hull_height],\n        [hull_length/2 - 10, 0, -hull_height/3],\n        [-hull_length/2 + 10, 0, -hull_height/3]\n    ];\n    \n    // Hull base\n    difference() {\n        hull_hull = hull_points;\n        polyhedron(\n            points=hull_points,\n            faces=[\n                [0,1,2,3], // bottom\n                [4,5,6,7], // top\n                [0,3,7,4], // right\n                [1,2,6,5], // left\n                [0,1,5,4], // front\n                [2,3,7,6], // back\n                [8,9,7,4], // curved bottom front\n                [8,9,6,5]  // curved bottom back\n            ]\n        );\n        \n        // Hollow out interior\n        scale([0.85, 0.85, 0.8])\n            translate([0, 0, wall_thickness])\n            hull_main();\n    }\n}\n\nmodule deck() {\n    // Deck surface\n    translate([0, 0, hull_height])\n        cube([hull_length, hull_width, deck_thickness], center=true);\n}\n\nmodule cockpit() {\n    // Cockpit rim\n    translate([0, 0, hull_height + deck_thickness])\n        difference() {\n            cube([hull_length*0.65, hull_width*0.55, 3], center=true);\n            translate([0, 0, 1])\n                cube([hull_length*0.6, hull_width*0.5, 3], center=true);\n        }\n}\n\nmodule seat() {\n    // Simple seat inside cockpit\n    translate([0, 0, hull_height - 2])\n        cube([hull_length*0.4, hull_width*0.3, 2], center=true);\n}\n\nmodule bow() {\n    // Pointed bow\n    translate([hull_length/2, 0, hull_height/2])\n        rotate([0, 90, 0])\n            cylinder(h=hull_width/2, r1=hull_height/2, r2=0, center=true);\n}\n\nmodule stern() {\n    // Stern with slight point\n    translate([-hull_length/2, 0, hull_height/2])\n        rotate([0, 90, 0])\n            cylinder(h=hull_width/2, r1=hull_height/2, r2=hull_height/4, center=true);\n}\n\nmodule handles() {\n    // Grab handles on bow and stern\n    for(pos = [[hull_length/2 - 5, 0], [-hull_length/2 + 5, 0]]) {\n        translate([pos[0], pos[1], hull_height + 2])\n            rotate([90, 0, 0])\n                cylinder(h=10, r=1.5, center=true);\n    }\n}\n\n// Assemble the kayacht\nunion() {\n    hull();\n    deck();\n    cockpit();\n    seat();\n    bow();\n    stern();\n    handles();\n}",
    "renders": true
  },
  {
    "vehicle": "packraft",
    "openscad_code": "// Realistic 3D-printable packraft (medium complexity)\n// Roughly 70 mm long x 25 mm wide x 25 mm high\n\n$fn = 30;\n\n// Overall dimensions\nraft_len = 70;\nraft_w   = 25;\nraft_h   = 22;\n\n// Wall thickness for 3D printing\nwall = 1.2;\n\n// Bow & stern radius\nend_r = 10;\n\nmodule raft_hull()\n{\n    difference()\n    {\n        // Main outer hull\n        hull()\n        {\n            // Bow dome\n            translate([-raft_len/2, 0, 0])\n                scale([1.0, 0.9, 0.8])\n                    sphere(r = end_r);\n\n            // Stern dome\n            translate([raft_len/2, 0, 0])\n                scale([1.0, 0.9, 0.8])\n                    sphere(r = end_r);\n\n            // Mid-body box\n            translate([0, 0, -3])\n                cube([raft_len - 2*end_r + 2,\n                      raft_w,\n                      raft_h - end_r],\n                     center = true);\n        }\n\n        // Inner cavity to hollow the hull\n        hull()\n        {\n            // Bow inner dome\n            translate([-raft_len/2, 0, 0])\n                scale([1.0, 0.9, 0.8])\n                    sphere(r = end_r - wall);\n\n            // Stern inner dome\n            translate([raft_len/2, 0, 0])\n                scale([1.0, 0.9, 0.8])\n                    sphere(r = end_r - wall);\n\n            // Mid-body inner box\n            translate([0, 0, -3])\n                cube([raft_len - 2*end_r,\n                      raft_w - 2*wall,\n                      raft_h - end_r - wall],\n                     center = true);\n        }\n    }\n}\n\nmodule tube_valves()\n{\n    // Inflation valve on starboard\n    translate([0, raft_w/2 + 1.5, raft_h - end_r])\n        rotate([90, 0, 0])\n        cylinder(h = 3, r1 = 1.5, r2 = 1.5);\n\n    // Safety valve on port\n    translate([0, -raft_w/2 - 1.5, raft_h - end_r])\n        rotate([90, 0, 0])\n        cylinder(h = 3, r1 = 1.5, r2 = 1.5);\n}\n\nmodule spray_skirt_ring()\n{\n    // Coaming rim for attaching skirt\n    difference()\n    {\n        // Thick ring\n        translate([0, 0, raft_h - 2])\n            cylinder(h = 3, r1 = raft_w/2 - 3, r2 = raft_w/2 - 3);\n\n        // Hollow it\n        translate([0, 0, raft_h - 2])\n            cylinder(h = 3.2, r1 = raft_w/2 - 5, r2 = raft_w/2 - 5);\n    }\n}\n\nmodule seat_cushion()\n{\n    // Simple inflatable seat\n    translate([-8, 0, 6])\n        cube([14, raft_w - 6, 3], center = true);\n}\n\nmodule d_rings()\n{\n    // D-rings for gear attachment\n    for(i = [-1, 1])\n    {\n        translate([i * (raft_len/2 - 5), raft_w/2 + 0.3, 5])\n            rotate([90, 0, 0])\n                cylinder(h = 1.5, r1 = 1, r2 = 1);\n        \n        translate([i * (raft_len/2 - 5), -raft_w/2 - 0.3, 5])\n            rotate([90, 0, 0])\n                cylinder(h = 1.5, r1 = 1, r2 = 1);\n    }\n}\n\nmodule floor_pattern()\n{\n    // Small ridges for grip\n    for(x = [-raft_len/2 + 5 : 4 : raft_len/2 - 5])\n    {\n        translate([x, 0, 0.1])\n            cube([2, raft_w - 6, 0.5], center = true);\n    }\n}\n\n// Build the packraft\nunion()\n{\n    raft_hull();\n    tube_valves();\n    spray_skirt_ring();\n    seat_cushion();\n    d_rings();\n    floor_pattern();\n}",
    "renders": true
  },
  {
    "vehicle": "inflatablekayak",
    "openscad_code": "// Inflatable Kayak – medium-complexity realistic style\n// 3D-printable, ~80 mm long, no overhangs, 1 mm wall thickness\n\n// overall scale factor so the biggest dimension = 80 mm\nscale_factor = 80/100;\n\n// kayak hull module\nmodule hull() {\n    // main inflatable tube – continuous torus-like shape made from hull halves\n    difference() {\n        // outer skin\n        scale([1, 0.45, 0.25])\n            sphere(d = 100 * scale_factor, $fn = 64);\n        \n        // hollow it out – 1 mm wall\n        scale([0.96, 0.41, 0.21])\n            sphere(d = 100 * scale_factor, $fn = 64);\n    }\n}\n\n// pointed bow/stern cones – simple cones sliced at 45° for realism\nmodule nose() {\n    rotate([0, 90, 0])\n        cylinder(h = 25 * scale_factor, \n                 r1 = 11 * scale_factor, \n                 r2 = 0, \n                 $fn = 32);\n}\n\n// seat block – solid printed block, no overhang\nmodule seat() {\n    translate([0, 0, -2 * scale_factor])\n        cube([30 * scale_factor, \n              18 * scale_factor, \n              6 * scale_factor], center = true);\n}\n\n// floor panel – thin slab inside hull for rigidity\nmodule floor() {\n    translate([0, 0, -10 * scale_factor])\n        cube([70 * scale_factor, \n              30 * scale_factor, \n              1.5 * scale_factor], center = true);\n}\n\n// simple valve – cylinder + ring on starboard side\nmodule valve() {\n    translate([0, 24 * scale_factor, 0])\n        rotate([90, 0, 0])\n        union() {\n            cylinder(h = 4 * scale_factor, \n                     r = 3 * scale_factor, \n                     $fn = 16);\n            translate([0, 0, 2 * scale_factor])\n                cylinder(h = 1 * scale_factor, \n                         r = 4 * scale_factor, \n                         $fn = 16);\n        }\n}\n\n// grab handles – small loops printed flat\nmodule handle() {\n    difference() {\n        // outer ring\n        linear_extrude(height = 2 * scale_factor)\n            circle(r = 5 * scale_factor, $fn = 32);\n        // inner hole\n        linear_extrude(height = 2 * scale_factor)\n            circle(r = 3 * scale_factor, $fn = 32);\n    }\n}\n\n// assemble kayak\nunion() {\n    // main hull\n    hull();\n    \n    // bow\n    translate([38 * scale_factor, 0, 0])\n        nose();\n    \n    // stern (mirrored bow)\n    mirror([1, 0, 0])\n        translate([38 * scale_factor, 0, 0])\n            nose();\n    \n    // internal floor\n    floor();\n    \n    // seat\n    translate([-10 * scale_factor, 0, -8 * scale_factor])\n        seat();\n    \n    // valve\n    valve();\n    \n    // bow handle\n    translate([45 * scale_factor, 0, 0])\n        rotate([90, 0, 0])\n            handle();\n    \n    // stern handle\n    translate([-45 * scale_factor, 0, 0])\n        rotate([90, 0, 0])\n            handle();\n}",
    "renders": true
  },
  {
    "vehicle": "foldingkayak",
    "openscad_code": "// Folding Kayak - Medium Complexity Realistic Style\n// Overall dimensions: 90mm length, 25mm width, 12mm height\n\n$fn = 32;\n\n// Hull parameters\nhull_length = 90;\nhull_width = 25;\nhull_height = 8;\nwall_thickness = 1.2;\n\n// Frame rib parameters\nrib_count = 6;\nrib_width = 22;\nrib_height = 6;\nrib_thickness = 1;\n\n// Skin thickness\nskin_thickness = 0.6;\n\n// Main hull shell\nmodule hull_shell() {\n    difference() {\n        // Outer hull shape\n        hull_shape();\n        \n        // Hollow interior\n        translate([0, 0, -skin_thickness])\n            scale([0.85, 0.85, 0.9])\n            hull_shape();\n    }\n}\n\n// Basic hull shape\nmodule hull_shape() {\n    difference() {\n        // Main hull body\n        union() {\n            // Central hull\n            translate([0, 0, hull_height/2])\n                scale([1, 0.6, 0.4])\n                sphere(d=hull_width);\n            \n            // Bow\n            translate([hull_length/2 - hull_width/4, 0, hull_height/2])\n                scale([0.5, 0.6, 0.4])\n                sphere(d=hull_width);\n            \n            // Stern\n            translate([-hull_length/2 + hull_width/4, 0, hull_height/2])\n                scale([0.5, 0.6, 0.4])\n                sphere(d=hull_width);\n            \n            // Connect sections\n            translate([0, 0, hull_height/2])\n                cube([hull_length, hull_width * 0.6, hull_height], center=true);\n        }\n        \n        // Deck cutout\n        translate([0, 0, hull_height - 0.5])\n            cube([hull_length * 0.7, hull_width * 0.4, 2], center=true);\n    }\n}\n\n// Frame ribs\nmodule frame_rib(pos) {\n    translate([pos, 0, 0])\n        rotate([90, 0, 0])\n            difference() {\n                // Rib shape\n                cylinder(h=rib_width, d1=rib_height, d2=rib_height * 0.8);\n                \n                // Lightening holes\n                for(i = [-1, 1]) {\n                    translate([0, i * 4, 0])\n                        cylinder(h=rib_width + 1, d=2);\n                }\n                translate([0, 0, 0])\n                    cylinder(h=rib_width + 1, d=1.5);\n            }\n}\n\n// Cockpit rim\nmodule cockpit_rim() {\n    difference() {\n        // Outer rim\n        translate([0, 0, hull_height - 0.3])\n            cylinder(h=1.5, d1=hull_width * 0.45, d2=hull_width * 0.4);\n        \n        // Inner opening\n        translate([0, 0, hull_height - 0.5])\n            cylinder(h=2, d=hull_width * 0.3);\n    }\n}\n\n// Folding joints\nmodule folding_joint(pos) {\n    translate([pos, 0, hull_height/2])\n        union() {\n            // Hinge barrel\n            cylinder(h=3, d=2);\n            \n            // Mounting plate\n            rotate([90, 0, 0])\n                cube([4, 2, 0.5], center=true);\n        }\n}\n\n// Deck lines\nmodule deck_lines() {\n    color(\"black\")\n    for(i = [-1, 1]) {\n        translate([i * hull_length/3, 0, hull_height - 0.2])\n            rotate([90, 0, 0])\n                cylinder(h=hull_width * 0.4, d=0.5);\n    }\n}\n\n// Main assembly\nunion() {\n    // Hull skin\n    hull_shell();\n    \n    // Frame ribs\n    for(i = [0:rib_count-1]) {\n        pos = -hull_length/2 + hull_length/(rib_count-1) * i;\n        frame_rib(pos);\n    }\n    \n    // Cockpit rim\n    cockpit_rim();\n    \n    // Folding joints\n    folding_joint(hull_length/4);\n    folding_joint(-hull_length/4);\n    \n    // Deck details\n    deck_lines();\n}",
    "renders": true
  },
  {
    "vehicle": "sitontop",
    "openscad_code": "// Sit-on-top kayak in realistic style, medium complexity\n// Overall length ~90 mm, printable without supports\n\n$fn=32;\n\n// Main hull shell\nmodule hull_shell() {\n    difference() {\n        // Outer hull shape\n        hull() {\n            // Bow\n            translate([40,0,5]) scale([1,0.6,0.4]) sphere(10);\n            // Mid\n            translate([0,0,4]) scale([1,1,0.3]) sphere(15);\n            // Stern\n            translate([-40,0,5]) scale([1,0.6,0.4]) sphere(10);\n        }\n        // Inner cavity for hollow hull\n        hull() {\n            translate([39,0,5]) scale([0.9,0.5,0.35]) sphere(9.5);\n            translate([0,0,4]) scale([0.9,0.9,0.25]) sphere(14.5);\n            translate([-39,0,5]) scale([0.9,0.5,0.35]) sphere(9.5);\n        }\n    }\n}\n\n// Seat depression\nmodule seat() {\n    difference() {\n        translate([0,-3,3.5]) cube([25,18,3], center=true);\n        translate([0,-3,3.5]) cube([24,17,4], center=true);\n    }\n}\n\n// Backrest\nmodule backrest() {\n    translate([0,-10,9]) rotate([20,0,0]) \n        cube([20,2,8], center=true);\n}\n\n// Foot wells\nmodule foot_wells() {\n    for(x=[-25,-15,15,25]) {\n        translate([x,8,3.5]) \n            difference() {\n                cube([8,6,3], center=true);\n                translate([0,0,-1]) cube([7,5,4], center=true);\n            }\n    }\n}\n\n// Scupper holes (drainage)\nmodule scupper_holes() {\n    for(pos=[[-15,-5], [15,-5], [0,5]]) {\n        translate([pos[0],pos[1],3])\n            cylinder(h=6, d=2, center=true);\n    }\n}\n\n// Deck rigging loops\nmodule deck_loops() {\n    for(pos=[[-30,0], [30,0], [0,-12], [0,12]]) {\n        translate([pos[0],pos[1],6.5]) {\n            difference() {\n                cube([4,1,2], center=true);\n                translate([0,0,-0.5]) cube([3,0.8,3], center=true);\n            }\n        }\n    }\n}\n\n// Carry handles\nmodule handles() {\n    // Bow handle\n    translate([38,0,7]) rotate([0,90,0])\n        difference() {\n            cylinder(h=12, d=6);\n            cylinder(h=13, d=4);\n        }\n    \n    // Stern handle\n    translate([-38,0,7]) rotate([0,90,0])\n        difference() {\n            cylinder(h=12, d=6);\n            cylinder(h=13, d=4);\n        }\n}\n\n// Hull seam detail\nmodule seam() {\n    hull() {\n        translate([35,0,5.5]) scale([1,0.6,0.05]) sphere(10.2);\n        translate([0,0,4.5]) scale([1,1,0.05]) sphere(15.2);\n        translate([-35,0,5.5]) scale([1,0.6,0.05]) sphere(10.2);\n    }\n}\n\n// Assemble the kayak\nunion() {\n    hull_shell();\n    seat();\n    backrest();\n    foot_wells();\n    scupper_holes();\n    deck_loops();\n    handles();\n    seam();\n}",
    "renders": true
  },
  {
    "vehicle": "sitinside",
    "openscad_code": "// Sit-inside kayak - realistic medium complexity\n// Overall dimensions: 90mm x 35mm x 18mm\n\n// Hull thickness\nhull_thickness = 2;\n\n// Main hull module\nmodule hull() {\n    difference() {\n        // Outer hull\n        hull_shape();\n        \n        // Inner cavity\n        translate([0, 0, -hull_thickness])\n            scale([0.8, 0.7, 0.8])\n            hull_shape();\n    }\n}\n\n// Basic hull shape\nmodule hull_shape() {\n    // Main body\n    translate([0, 0, 10])\n    rotate([90, 0, 0])\n    linear_extrude(height=2)\n    hull_2d();\n}\n\n// 2D hull profile\nmodule hull_2d() {\n    hull() {\n        // Bow\n        translate([45, 0]) circle(d=20);\n        // Stern\n        translate([-45, 0]) circle(d=15);\n        // Mid sections\n        for (i = [-30:15:30]) {\n            translate([i, 0]) circle(d=25 - abs(i)/3);\n        }\n    }\n}\n\n// Cockpit rim\nmodule cockpit_rim() {\n    difference() {\n        // Outer rim\n        translate([0, 0, 12])\n        rotate([90, 0, 0])\n        linear_extrude(height=2)\n        offset(delta=2)\n        cockpit_2d();\n        \n        // Inner hole\n        translate([0, 0, 11.9])\n        rotate([90, 0, 0])\n        linear_extrude(height=2.2)\n        cockpit_2d();\n    }\n}\n\n// Cockpit opening 2D\nmodule cockpit_2d() {\n    hull() {\n        for (i = [-15:5:15]) {\n            translate([i, 0]) circle(d=12 - abs(i)/2);\n        }\n    }\n}\n\n// Seat inside cockpit\nmodule seat() {\n    // Seat back\n    translate([0, 0, 6])\n    rotate([10, 0, 0])\n    cube([20, 2, 8], center=true);\n    \n    // Seat bottom\n    translate([0, 0, 2])\n    cube([20, 15, 2], center=true);\n}\n\n// Deck rigging loops\nmodule rigging_loops() {\n    for (pos = [[30, 10], [-30, 10], [30, -10], [-30, -10]]) {\n        translate([pos[0], pos[1], 17])\n        rotate([90, 0, 0])\n        cylinder(h=3, d1=4, d2=3, center=true);\n    }\n}\n\n// Drain plug\nmodule drain_plug() {\n    translate([-40, 0, 5])\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h=3, d=6);\n        cylinder(h=4, d=3);\n    }\n}\n\n// Skeg (small fin at stern)\nmodule skeg() {\n    translate([-42, 0, 4])\n    rotate([0, 90, 0])\n    linear_extrude(height=2)\n    polygon(points=[[0,0], [0,8], [5,0]]);\n}\n\n// Main assembly\nhull();\ncockpit_rim();\nseat();\nrigging_loops();\ndrain_plug();\nskeg();",
    "renders": true
  },
  {
    "vehicle": "tandemkayak",
    "openscad_code": "// Tandem Kayak - Realistic Style, Medium Complexity\n// Designed for 3D printing (no overhangs, 2mm wall thickness)\n\n$fn = 32;\n\n// Overall dimensions\nkayak_length = 80;\nkayak_width = 18;\nkayak_height = 10;\n\n// Hull shape module\nmodule hull() {\n    difference() {\n        // Main hull body\n        hull_shape();\n        \n        // Cockpit openings\n        cockpit(25, 0);\n        cockpit(-25, 0);\n        \n        // Drain holes\n        for(i = [-1, 1]) {\n            translate([i * 35, 0, -1])\n                cylinder(h = 3, r = 2);\n        }\n    }\n}\n\n// Main hull shape\nmodule hull_shape() {\n    difference() {\n        // Smooth hull body\n        hull_body();\n        \n        // Hollow interior\n        translate([0, 0, -1])\n            scale([0.85, 0.85, 0.9])\n            hull_body();\n    }\n}\n\nmodule hull_body() {\n    // Create smooth hull with rounded edges\n    minkowski() {\n        // Basic hull shape\n        scale([1, 0.4, 0.3])\n            sphere(r = kayak_length/2);\n        \n        // Rounding\n        sphere(r = 2);\n    }\n}\n\n// Cockpit opening\nmodule cockpit(x_pos, y_pos) {\n    translate([x_pos, y_pos, kayak_height - 2])\n        scale([1.2, 0.8, 0.3])\n            cylinder(h = 5, r = 5);\n}\n\n// Seats\nmodule seats() {\n    for(pos = [25, -25]) {\n        translate([pos, 0, 2])\n            seat();\n    }\n}\n\nmodule seat() {\n    // Seat base\n    difference() {\n        translate([0, 0, 0])\n            cube([12, 14, 2], center = true);\n        \n        // Seat drainage\n        for(x = [-3, 3])\n            for(y = [-4, 4])\n                translate([x, y, -0.5])\n                    cylinder(h = 3, r = 1);\n    }\n    \n    // Seat back\n    translate([0, 6, 2])\n        cube([10, 2, 8], center = true);\n}\n\n// Deck rigging\nmodule rigging() {\n    // Perimeter lines\n    perimeter_line(6);\n    perimeter_line(-6);\n    \n    // Bungee cords\n    bungee_cord(30);\n    bungee_cord(-30);\n}\n\nmodule perimeter_line(y_offset) {\n    hull_points = [\n        [kayak_length/2 - 5, y_offset, kayak_height - 1],\n        [kayak_length/2 - 5, -y_offset, kayak_height - 1],\n        [-kayak_length/2 + 5, -y_offset, kayak_height - 1],\n        [-kayak_length/2 + 5, y_offset, kayak_height - 1]\n    ];\n    \n    for(i = [0:3]) {\n        p1 = hull_points[i];\n        p2 = hull_points[(i + 1) % 4];\n        translate(p1)\n            rotate([0, atan(p2.z - p1.z, sqrt((p2.x - p1.x)^2 + (p2.y - p1.y)^2)), atan(p2.y - p1.y, p2.x - p1.x)])\n                cylinder(h = sqrt((p2.x - p1.x)^2 + (p2.y - p1.y)^2 + (p2.z - p1.z)^2), r = 0.5);\n    }\n}\n\nmodule bungee_cord(x_pos) {\n    for(y = [-6:3:6]) {\n        translate([x_pos, y, kayak_height])\n            cylinder(h = 2, r = 0.5);\n    }\n    \n    // Connect bungee cords\n    translate([x_pos, 0, kayak_height + 1])\n        cube([1, 12, 0.5], center = true);\n}\n\n// Skeg (removable)\nmodule skeg() {\n    translate([0, 0, -kayak_height/2])\n        difference() {\n            // Skeg body\n            translate([-kayak_length/2 + 5, 0, 0])\n                cube([8, 1, 4]);\n            \n            // Mounting slot\n            translate([-kayak_length/2 + 5, 0, 2])\n                cube([4, 1.2, 2], center = true);\n        }\n}\n\n// Main assembly\nhull();\nseats();\nrigging();\nskeg();",
    "renders": true
  },
  {
    "vehicle": "solo",
    "openscad_code": "// Realistic Red-Solo-Style Cup\n// Basic dimensions (mm) – easily printable on a home FDM printer\n$fn = 36;                      // curve quality\n\n// overall size\ncup_h = 85;\ntop_d = 75;\nbottom_d = 55;\nwall_t = 2.2;                  // common nozzle width multiples\n\n// derived geometry\ntop_r = top_d / 2;\nbottom_r = bottom_d / 2;\ndraft = (top_r - bottom_r) / cup_h;\n\n// reusable module for the main cup body\nmodule cup_body() {\n    difference() {\n        // outer tapered wall\n        cylinder(h = cup_h, r1 = bottom_r, r2 = top_r, center = false);\n\n        // hollow it out, leaving wall thickness\n        translate([0, 0, -0.1])\n            cylinder(h = cup_h + 0.2,\n                     r1 = bottom_r - wall_t,\n                     r2 = top_r - wall_t,\n                     center = false);\n    }\n}\n\n// rolled lip ring\nmodule rolled_lip() {\n    difference() {\n        // torus-like ring\n        rotate_extrude()\n            translate([top_r - wall_t/2, 0, 0])\n                circle(r = wall_t/2);\n\n        // cut bottom flat\n        translate([0, 0, -wall_t/2])\n            cube([top_d, top_d, wall_t], center = true);\n    }\n}\n\n// subtle concentric rings for grip\nmodule grip_rings() {\n    for (i = [1 : 5]) {\n        z_pos = cup_h * 0.25 + (i-1) * 4;\n        color(\"red\")\n        difference() {\n            cylinder(h = 1, r1 = bottom_r + draft*z_pos, r2 = top_r - draft*(cup_h-z_pos));\n            cylinder(h = 1.2,\n                     r1 = bottom_r + draft*z_pos - 0.3,\n                     r2 = top_r - draft*(cup_h-z_pos) - 0.3);\n        }\n    }\n}\n\n// base disk for stability\nmodule base_disk() {\n    difference() {\n        cylinder(h = 2, r = bottom_r + 1);\n        cylinder(h = 2.2, r = bottom_r - 1);\n    }\n}\n\n// assemble the parts\nunion() {\n    color(\"red\") cup_body();\n    translate([0, 0, cup_h]) rolled_lip();\n    grip_rings();\n    translate([0, 0, -2]) base_disk();\n}",
    "renders": true
  },
  {
    "vehicle": "double",
    "openscad_code": "// Realistic Double (baseball) - Medium Complexity\n// Overall diameter ≈ 75 mm\n\n// Basic parameters\nball_d = 75;          // 2.95\"\nseam_width = 2;       // Width of seam channel\nseam_depth = 1.5;     // Depth of seam channel\nstitch_d = 0.8;       // Stitch thickness\nstitch_l = 8;         // Stitch length\nstitch_spacing = 8;   // Center-to-center stitch spacing\nwall = 2;             // Shell thickness for printing\n\n// Create a single stitch\nmodule stitch() {\n    translate([0, stitch_l/2, 0])\n        rotate([90, 0, 0])\n        difference() {\n            cylinder(h = stitch_d*2, d1 = stitch_d*1.6, d2 = stitch_d*0.8, $fn = 12);\n            translate([0, 0, -0.1])\n                cube([seam_width*2, stitch_d*3, stitch_d*2.2], center = true);\n        }\n}\n\n// Create one seam (108 stitches total, 2 curves, 54 per curve)\nmodule seam(start_angle, end_angle, radius) {\n    for(i = [0:53]) {\n        angle = start_angle + i * (end_angle - start_angle)/53.9;\n        x = radius * cos(angle);\n        y = radius * sin(angle);\n        z = sin(angle*2) * ball_d/30; // Slight wave for realism\n        \n        translate([x, y, z])\n            rotate([0, 0, angle + 90])\n                stitch();\n    }\n}\n\n// Main ball with seam grooves\nmodule baseball() {\n    difference() {\n        // Outer sphere shell\n        sphere(d = ball_d, $fn = 120);\n        \n        // Hollow center for printability\n        sphere(d = ball_d - wall*2, $fn = 120);\n        \n        // Two curved seam grooves\n        for(a = [0, 180]) {\n            rotate([0, 0, a])\n                translate([0, 0, -seam_depth/2])\n                    rotate_extrude(angle = 180, $fn = 120)\n                        translate([ball_d/2 - seam_width/2, 0, 0])\n                            square([seam_width, seam_depth]);\n        }\n    }\n}\n\n// Assembly\nrotate([0, -20, 0])  // Tilt for better viewing\n    baseball();\n\nseam(0, 180, ball_d/2 - seam_width/2);\nseam(180, 360, ball_d/2 - seam_width/2);",
    "renders": true
  },
  {
    "vehicle": "triple",
    "openscad_code": "// Triple-scoop ice-cream cone – “realistic” medium style\n// All dimensions in mm; largest dimension ≈ 85 mm height\n\n$fn = 32;          // smooth curves for printing\nwall = 2;          // uniform wall thickness for printability\n\n// ---------- edible spheres ----------\n// three flavours: vanilla, strawberry, chocolate\nmodule scoop(r=16, colour=\"white\"){\n    color(colour)\n    sphere(r);\n}\n\n// ---------- waffle texture ----------\nmodule waflerepeat(h, r){\n    // creates a single diamond pattern row\n    for(i=[0:h-1]){\n        rotate([0,0,i*45/h*360])\n        translate([r-wall*1.5, 0, 0])\n        cube([wall, wall*0.6, wall], center=true);\n    }\n}\n\n// ---------- cone body ----------\nmodule cone(h=60, rTop=22, rBot=12){\n    difference(){\n        // outer shell\n        cylinder(h1=rTop, h2=rBot, h=h);      // frustum\n        // inner hollow for weight/material saving\n        translate([0,0,-0.1])\n        cylinder(h1=rTop-wall, h2=rBot-wall, h=h+0.2);\n    }\n    \n    // waffle surface pattern\n    for(z=[0:5:h-5]){\n        translate([0,0,z])\n        rotate([0,0,z*10])                    // slight twist\n        waflerepeat(8, rTop-(rTop-rBot)*z/h);\n    }\n}\n\n// ---------- assembly ----------\nunion(){\n    // cone\n    cone();\n    \n    // scoops stacked\n    translate([0,0,60-0.5]) scoop(r=16, colour=\"beige\");      // vanilla\n    translate([0,0,60+30])   scoop(r=15, colour=\"lightpink\"); // strawberry\n    translate([0,0,60+56])   scoop(r=14, colour=\"saddlebrown\"); // chocolate\n    \n    // stylised drip ring for realism\n    color(\"saddlebrown\")\n    translate([0,0,60+56-2])\n    cylinder(h1=14+2, h2=14+4, h=4);\n}",
    "renders": true
  },
  {
    "vehicle": "oar",
    "openscad_code": "// Realistic 3D Printable Oar\n// Approx. 90 mm total length\n\n// Global parameters\nhandle_len = 20;\nshaft_len = 50;\nblade_len = 22;\nblade_width = 18;\nblade_thick = 2.5;\nwall = 1.5;          // wall thickness for 3D printing\n\nmodule handle_grip() {\n    // Cylindrical grip with shallow grooves\n    difference() {\n        cylinder(h = handle_len, d = 8, $fn = 48);\n        for (i = [0:3]) {\n            rotate([0, 0, i * 90])\n                translate([0, 4.5, -1])\n                    cube([1, 1, handle_len + 2], center = true);\n        }\n    }\n    // Top dome\n    translate([0, 0, handle_len])\n        sphere(d = 8, $fn = 48);\n}\n\nmodule shaft() {\n    // Tapered round shaft\n    hull() {\n        cylinder(h = shaft_len, d1 = 8, d2 = 6, $fn = 32);\n    }\n}\n\nmodule collar() {\n    // Decorative collar ring\n    difference() {\n        cylinder(h = 3, d = 10, $fn = 32);\n        cylinder(h = 3.5, d = 6.5, $fn = 32);\n    }\n}\n\nmodule blade() {\n    // Main blade shell\n    difference() {\n        hull() {\n            // Blade outline\n            translate([0, 0, blade_thick/2])\n                linear_extrude(height = blade_thick)\n                    polygon(points = [\n                        [0, 0],\n                        [blade_len*0.1, -blade_width*0.45],\n                        [blade_len, -blade_width/2],\n                        [blade_len, blade_width/2],\n                        [blade_len*0.1, blade_width*0.45]\n                    ]);\n        }\n        // Hollow cavity\n        offset(r = -wall)\n            hull() {\n                translate([0, 0, blade_thick/2])\n                    linear_extrude(height = blade_thick + 0.1)\n                        polygon(points = [\n                            [0, 0],\n                            [blade_len*0.1, -blade_width*0.45 + wall],\n                            [blade_len - wall, -blade_width/2 + wall],\n                            [blade_len - wall, blade_width/2 - wall],\n                            [blade_len*0.1, blade_width*0.45 - wall]\n                        ]);\n            }\n    }\n\n    // Reinforcement rib on back\n    translate([blade_len/2, 0, blade_thick])\n        cube([blade_len*0.9, 1.5, 1], center = true);\n\n    // Shaft socket\n    translate([-1, 0, blade_thick/2])\n        rotate([0, 90, 0])\n            cylinder(h = 5, d = 6, $fn = 32);\n}\n\n// Assemble oar\nunion() {\n    // Handle\n    translate([0, 0, 0])\n        handle_grip();\n\n    // Shaft\n    translate([0, 0, handle_len])\n        shaft();\n\n    // Collar\n    translate([0, 0, handle_len + shaft_len - 1.5])\n        collar();\n\n    // Blade\n    translate([0, 0, handle_len + shaft_len + 1.5])\n        rotate([90, 0, 0])\n            blade();\n}",
    "renders": true
  },
  {
    "vehicle": "sweep",
    "openscad_code": "// Realistic Medium-Complexity Broom (Sweep)\n\n// Overall dimensions: ~85 mm long\n\n// Handle\nmodule handle() {\n    // Main wooden stick\n    cylinder(h = 70, d = 8, $fn = 32);\n    \n    // Tapered bottom end\n    translate([0, 0, 70])\n        cylinder(h = 5, d1 = 8, d2 = 6, $fn = 32);\n    \n    // Metal ferrule at top\n    translate([0, 0, -3])\n        cylinder(h = 6, d = 10, $fn = 32);\n}\n\n// Broom head block\nmodule broom_head() {\n    difference() {\n        // Main block\n        cube([25, 15, 8], center = true);\n        \n        // Hole for handle\n        rotate([90, 0, 0])\n            cylinder(h = 30, d = 9, center = true, $fn = 32);\n            \n        // Chamfer bottom edge\n        translate([0, 0, -4.5])\n            cube([27, 17, 1], center = true);\n    }\n}\n\n// Individual bristle cluster\nmodule bristle_cluster() {\n    // 7 bristles in hex pattern\n    for (r = [0:2]) {\n        for (a = [0:60:359]) {\n            translate([r * 2 * cos(a), r * 2 * sin(a), 0])\n                cylinder(h = 20, d = 1.2, $fn = 8);\n        }\n    }\n}\n\n// Full bristle set\nmodule bristles() {\n    // Grid of clusters\n    for (x = [-10:5:10]) {\n        for (y = [-6:4:6]) {\n            translate([x, y, -10])\n                bristle_cluster();\n        }\n    }\n}\n\n// Assembly\ntranslate([0, 0, 35])\n    rotate([90, 0, 0])\n        handle();\n        \ntranslate([0, 0, -4])\n    broom_head();\n    \ntranslate([0, 0, -8])\n    bristles();",
    "renders": true
  },
  {
    "vehicle": "scull",
    "openscad_code": "// Skull - medium complexity, realistic style\n// Designed for 3D printing (no overhangs > 45°, wall thickness 1.5mm)\n\n$fn = 36;  // Smooth curves for printing\n\nmodule skull() {\n    union() {\n        // Main cranium\n        difference() {\n            scale([1, 0.9, 1.1]) sphere(d=42, center=true);\n            translate([0, 0, 5]) scale([0.85, 0.75, 0.9]) sphere(d=40, center=true);\n        }\n        \n        // Forehead\n        translate([0, 15, 8]) scale([0.9, 0.7, 0.6]) sphere(d=30);\n        \n        // Eye sockets\n        for(x = [-12, 12]) {\n            translate([x, 8, 4]) rotate([0, 0, x > 0 ? -10 : 10]) {\n                difference() {\n                    scale([1.2, 1, 1]) sphere(d=12);\n                    translate([0, 0, -3]) cube([14, 14, 6], center=true);\n                }\n            }\n        }\n        \n        // Nasal cavity\n        translate([0, -5, 2]) {\n            difference() {\n                rotate([10, 0, 0]) scale([1, 1.2, 0.8]) cylinder(h=12, d1=8, d2=12);\n                translate([0, 0, -1]) cube([12, 12, 14], center=true);\n            }\n        }\n        \n        // Cheek bones\n        for(x = [-18, 18]) {\n            translate([x, -2, -8]) rotate([0, 0, x > 0 ? 20 : -20]) {\n                scale([0.8, 1, 0.6]) sphere(d=15);\n            }\n        }\n        \n        // Upper jaw\n        translate([0, -15, -12]) {\n            difference() {\n                scale([0.9, 1, 0.6]) sphere(d=25);\n                // Teeth sockets\n                for(i = [-4:4]) {\n                    translate([i*2.5, -2, -4]) cylinder(h=4, d=3);\n                }\n            }\n        }\n        \n        // Lower jaw\n        translate([0, -20, -18]) rotate([10, 0, 0]) {\n            difference() {\n                scale([0.85, 0.7, 0.5]) sphere(d=28);\n                // Lower teeth\n                for(i = [-3.5:3.5]) {\n                    translate([i*2.5, 2, -3]) cylinder(h=3, d=2.5);\n                }\n            }\n        }\n        \n        // Temporal bones\n        for(x = [-20, 20]) {\n            translate([x, 0, -5]) rotate([0, 0, x > 0 ? 30 : -30]) {\n                scale([0.5, 1.2, 0.8]) cylinder(h=15, d=8);\n            }\n        }\n        \n        // Occipital bone\n        translate([0, -8, -15]) rotate([20, 0, 0]) {\n            scale([1.1, 1, 0.8]) sphere(d=20);\n        }\n    }\n}\n\n// Generate the skull scaled to 60mm height\nscale(60/45) skull();",
    "renders": true
  },
  {
    "vehicle": "shell",
    "openscad_code": "// Realistic seashell – medium complexity\n// Overall height ≈ 65 mm, base Ø ≈ 45 mm\n\n$fn = 36;\n\n// Main parameters\nbase_h = 10;           // thickness of the foot\nwhorls = 5;            // number of turns\nwhorl_h = 11;          // height added per whorl\nr_start = 22;          // starting radius\nr_growth = 1.18;       // multiplicative growth per turn\nth = 1.8;              // wall thickness (3D-print friendly)\n\n// Overall body\nmodule shell_body() {\n    difference() {\n        union() {\n            for (i = [0 : whorls-1]) {\n                translate([0, 0, base_h + i*whorl_h])\n                    rotate([0, 0, i*65])  // slight twist\n                    linear_extrude(height = whorl_h + 0.5, scale = pow(r_growth, i))\n                        offset(r = r_start)\n                            circle(r = r_start);\n            }\n        }\n        \n        // Hollow the inside\n        for (i = [0 : whorls-1]) {\n            translate([0, 0, base_h + i*whorl_h + th])\n                rotate([0, 0, i*65])\n                linear_extrude(height = whorl_h, scale = pow(r_growth, i))\n                    offset(r = r_start - th)\n                        circle(r = r_start - th);\n        }\n    }\n}\n\n// Spiral ridge along the outer surface\nmodule spiral_ridge() {\n    for (t = [0 : 5 : 360*whorls]) {\n        assign(\n            a = t,\n            r = r_start * pow(r_growth, a/360),\n            z = base_h + (a/360) * whorl_h + sin(a*4) * 1.5\n        )\n        translate([r*cos(a), r*sin(a), z])\n            rotate([90, 0, a])\n                cylinder(h = 2.5, r1 = 2, r2 = 0.8, $fn = 8);\n    }\n}\n\n// Opening (aperture)\nmodule aperture() {\n    difference() {\n        shell_body();\n        \n        // Cut the front\n        translate([r_start*1.2, 0, base_h/2])\n            rotate([0, -25, 0])\n                cube([r_start*2, r_start*2, base_h + whorl_h*whorls], center = true);\n        \n        // Oval opening\n        translate([0, 0, base_h - 1])\n            scale([1, 1.3, 1])\n                cylinder(h = base_h + whorl_h*whorls + 2, r = r_start*0.45, $fn = 50);\n    }\n}\n\n// Small curved spines on shoulder\nmodule spines(count = 12) {\n    for (i = [0 : count-1]) {\n        assign(\n            a = i * 360/count,\n            r = r_start * pow(r_growth, whorls-1),\n            z = base_h + whorls*whorl_h\n        )\n        translate([r*cos(a), r*sin(a), z])\n            rotate([90, 0, a + 90])\n                cylinder(h = 4, r1 = 1.2, r2 = 0.4, $fn = 6);\n    }\n}\n\n// Base foot\nmodule base_foot() {\n    cylinder(h = base_h, r = r_start*1.1, $fn = 60);\n}\n\n// Assembly\nunion() {\n    base_foot();\n    aperture();\n    spiral_ridge();\n    spines();\n}",
    "renders": true
  },
  {
    "vehicle": "skerry",
    "openscad_code": "// Skerry (rocky islet) - realistic medium complexity\n// Overall dimensions: ~60x45x35 mm\n\n$fn = 48;  // Smooth curves for printing\n\n// Main rock body\nmodule rock_body() {\n    difference() {\n        union() {\n            // Core mass\n            scale([1, 0.8, 0.6])\n                sphere(r = 25);\n            \n            // Northern ridge\n            translate([5, 15, 10])\n                scale([0.7, 0.5, 0.4])\n                    sphere(r = 18);\n            \n            // Western bulge\n            translate([-12, -5, 5])\n                scale([0.6, 0.7, 0.3])\n                    sphere(r = 15);\n        }\n        \n        // Erosion cavities\n        for(i = [1:3]) {\n            rotate([0, i*30, i*120])\n                translate([5 + i*3, 2 + i*2, 10 - i*2])\n                    sphere(r = 4 + i*1.5);\n        }\n        \n        // Sea-cut notch at base\n        translate([0, 0, -5])\n            cylinder(h = 10, r1 = 30, r2 = 25);\n    }\n}\n\n// Barnacle clusters\nmodule barnacles(x, y, z, count) {\n    for(i = [1:count]) {\n        translate([\n            x + (i*7 % 4 - 2) * 3,\n            y + (i*5 % 3 - 1) * 2,\n            z + sin(i*73) * 1.5\n        ]) {\n            scale([0.8, 0.8, 1.2])\n                sphere(r = 1 + (i % 3) * 0.3);\n        }\n    }\n}\n\n// Seaweed strands\nmodule seaweed(base_x, base_y, base_z) {\n    for(i = [0:2]) {\n        translate([base_x + i*2 - 2, base_y, base_z])\n            rotate([90 + i*15, 0, i*20])\n                cylinder(h = 8 + i*3, r1 = 1.2, r2 = 0.3);\n    }\n}\n\n// Rock pools\nmodule rock_pool(x, y, z) {\n    translate([x, y, z]) {\n        difference() {\n            cylinder(h = 2, r = 6);\n            translate([0, 0, 1.5])\n                cylinder(h = 2, r = 5);\n        }\n    }\n}\n\n// Assembly\ntranslate([0, 0, 20]) {\n    // Main structure\n    rock_body();\n    \n    // Surface details\n    barnacles(-8, 12, 15, 5);\n    barnacles(10, -10, 8, 4);\n    barnacles(0, -15, 5, 6);\n    \n    // Seaweed at waterline\n    seaweed(-15, -20, 0);\n    seaweed(12, 18, 0);\n    seaweed(5, -12, 0);\n    \n    // Intertidal pools\n    rock_pool(-5, 10, 18);\n    rock_pool(8, -5, 12);\n    rock_pool(-10, -8, 8);\n    \n    // Small satellite rocks\n    translate([20, -15, 2])\n        scale([0.4, 0.3, 0.5])\n            sphere(r = 8);\n    \n    translate([-18, 12, 1])\n        scale([0.3, 0.4, 0.4])\n            sphere(r = 7);\n}\n\n// Base platform for stable printing\ntranslate([0, 0, -1])\n    cube([60, 45, 2], center = true);",
    "renders": true
  },
  {
    "vehicle": "nordic",
    "openscad_code": "// Nordic Viking Longhouse – medium-complexity, realistic, 3D-printable\n// Overall footprint ~80 mm × 40 mm × 35 mm (L×W×H)\n\n$fa = 2;\n$fs = 0.5;\n\n// Main parameters\nlength = 80;\nwidth  = 40;\nwall_h = 18;        // wall height before roof starts\nroof_h = 15;\nwall_t = 2;         // wall thickness for printing\npost_d = 3;         // diameter of support posts\n\nmodule longhouse() {\n    // Base platform\n    translate([0, 0, wall_t/2])\n        cube([length + 8, width + 8, wall_t], center = true);\n\n    // Floor\n    translate([0, 0, wall_t])\n        cube([length, width, wall_t], center = true);\n\n    // Long walls (left & right)\n    for (side = [-1, 1])\n        translate([0, side * (width/2 - wall_t/2), wall_t + wall_h/2])\n            cube([length - wall_t*2, wall_t, wall_h], center = true);\n\n    // Gable walls (front & back)\n    for (end = [-1, 1])\n        translate([end * (length/2 - wall_t/2), 0, wall_t + wall_h/2])\n            cube([wall_t, width - wall_t*2, wall_h], center = true);\n\n    // Ridge beam\n    translate([0, 0, wall_t + wall_h + roof_h - wall_t/2])\n        cube([length, wall_t*1.5, wall_t], center = true);\n\n    // Roof panels\n    angle = atan(roof_h / (width/2));\n    roof_len = (width/2) / cos(angle);\n    for (side = [-1, 1])\n        translate([0, side * (width/4), wall_t + wall_h + roof_h/2])\n            rotate([side * (90 - angle), 0, 0])\n                cube([length + 2, roof_len + 2, wall_t], center = true);\n\n    // Doorway (center front)\n    difference() {\n        translate([length/2 - wall_t/2, 0, wall_t + wall_h/2])\n            cube([wall_t, width/3, wall_h], center = true);\n        translate([length/2 + wall_t/2, 0, wall_t])\n            cube([wall_t*2, width/3 - wall_t*2, wall_h - wall_t], center = false);\n    }\n\n    // Horizontal planks texture on walls\n    plank_h = 2;\n    plank_gap = 1;\n    for (z = [wall_t + plank_h/2 : plank_h + plank_gap : wall_t + wall_h - plank_h/2])\n        for (side = [-1, 1])\n            translate([0, side * (width/2 - wall_t/2), z])\n                cube([length - wall_t*2, wall_t + 0.1, plank_h], center = true);\n\n    // Support posts under eaves\n    for (x = [-length/2 + 5 : 10 : length/2 - 5])\n        for (y = [-1, 1])\n            translate([x, y * (width/2 - wall_t), wall_t + wall_h/2])\n                cylinder(h = wall_h, d = post_d, center = true);\n\n    // Chimney hole (simple square vent on roof)\n    difference() {\n        translate([0, -width/4, wall_t + wall_h + roof_h - wall_t*2])\n            cube([wall_t*6, wall_t*6, wall_t*3], center = true);\n        translate([0, -width/4, wall_t + wall_h + roof_h - wall_t])\n            cube([wall_t*4, wall_t*4, wall_t*3], center = true);\n    }\n}\n\nlonghouse();",
    "renders": true
  },
  {
    "vehicle": "lapstrake",
    "openscad_code": "// Lapstrake (clinker-built) rowboat model\n// Overall length: 80 mm, beam: 30 mm, hull depth: 15 mm\n// Wall thickness: 1.5 mm for 3D-printability\n\n$fn = 36;\n\nmodule lapstrake_hull() {\n    // Keel\n    translate([0, 0, -1.5])\n        cube([80, 1.5, 1.5], center = true);\n\n    // Build six overlapping strakes from bottom to top\n    for (i = [0:5]) {\n        strake(index = i);\n    }\n}\n\nmodule strake(index) {\n    // Each strake is slightly shorter and narrower as we go up\n    strakeWidth = 30 - index * 4;\n    strakeLength = 80 - index * 3;\n    overlap = 2;       // vertical overlap between strakes\n    thickness = 1.5;   // wall thickness for printing\n    \n    // Vertical position of this strake\n    zPos = index * (thickness + overlap) - 7.5 + thickness/2;\n    \n    // Create a plank shape with slight curvature\n    difference() {\n        hull() {\n            // Front edge\n            translate([strakeLength/2 - 5, 0, zPos])\n                sphere(d = strakeWidth);\n            // Rear edge\n            translate([-strakeLength/2 + 5, 0, zPos])\n                sphere(d = strakeWidth * 0.8);\n            // Middle width\n            translate([0, 0, zPos])\n                sphere(d = strakeWidth * 1.1);\n        }\n        \n        // Carve out the inside to make it hollow\n        translate([0, 0, zPos])\n            scale([0.85, 0.8, 0.7])\n                hull() {\n                    translate([strakeLength/2 - 5, 0, 0])\n                        sphere(d = strakeWidth);\n                    translate([-strakeLength/2 + 5, 0, 0])\n                        sphere(d = strakeWidth * 0.8);\n                    translate([0, 0, 0])\n                        sphere(d = strakeWidth * 1.1);\n                }\n    }\n}\n\nmodule seats() {\n    // Two seats/thwarts\n    for (pos = [-15, 15]) {\n        translate([pos, 0, 1])\n            cube([5, 28, 1.5], center = true);\n    }\n}\n\nmodule oarlocks() {\n    // Simple oarlock posts on gunwale\n    for (y = [-12, 12]) {\n        translate([20, y, 6])\n            cylinder(h = 3, d = 2);\n    }\n}\n\n// Assemble the boat\nunion() {\n    lapstrake_hull();\n    seats();\n    oarlocks();\n}",
    "renders": true
  },
  {
    "vehicle": "caravel",
    "openscad_code": "// Caravel – realistic style, medium complexity\n// All dimensions in mm; model ~80 mm long\n\n// Global parameters\nhull_l = 70;\nhull_w = 20;\nhull_h = 12;\ndeck_t = 2;\n\nmodule bow() {\n    difference() {\n        hull();\n        translate([hull_l/2-10,0,-1])\n            cube([15,hull_w+2,hull_h+2], center=true);\n    }\n}\n\nmodule stern() {\n    difference() {\n        hull();\n        translate([-hull_l/2+10,0,-1])\n            cube([15,hull_w+2,hull_h+2], center=true);\n    }\n}\n\nmodule hull() {\n    // Main hull body\n    hull_shape();\n    // Add raised stern castle\n    translate([-hull_l/2+5,0,hull_h/2+deck_t/2])\n        scale([0.6,0.8,1])\n            cube([15,hull_w-4,hull_h/2], center=true);\n}\n\nmodule hull_shape() {\n    // Lofted hull using difference and scaled cubes\n    difference() {\n        union() {\n            for (i = [-hull_l/2:hull_l/20:hull_l/2]) {\n                translate([i,0,0])\n                    scale([1,1-0.7*abs(i)/(hull_l/2),1])\n                        cube([hull_l/20,hull_w,hull_h], center=true);\n            }\n        }\n        // Hollow inside for printing\n        translate([0,0,-deck_t])\n            scale([0.9,0.9,0.8])\n                cube([hull_l,hull_w,hull_h], center=true);\n    }\n}\n\nmodule deck() {\n    translate([0,0,hull_h/2+deck_t/2])\n        cube([hull_l-10,hull_w-4,deck_t], center=true);\n}\n\nmodule mast(x_pos) {\n    mast_h = 50;\n    mast_r = 1.2;\n    translate([x_pos,0,hull_h/2+deck_t])\n        cylinder(h=mast_h, r=mast_r, $fn=12);\n    // Main yard\n    translate([x_pos,0,hull_h/2+deck_t+mast_h*0.6])\n        rotate([0,90,0])\n            cylinder(h=hull_w*1.5, r=0.8, $fn=8);\n}\n\nmodule sail(x_pos) {\n    h = 35;\n    w = 25;\n    thickness = 0.8;\n    translate([x_pos,0,hull_h/2+deck_t+5])\n        rotate([0,90,0])\n            cube([w,thickness,h], center=true);\n}\n\nmodule crow_nest(x_pos) {\n    translate([x_pos,0,hull_h/2+deck_t+40])\n        cylinder(h=4, r1=2.5, r2=2, $fn=12);\n}\n\nmodule rudder() {\n    translate([-hull_l/2,0,0])\n        rotate([0,10,0])\n            cube([8,1.5,hull_h*0.7], center=false);\n}\n\nmodule anchor() {\n    translate([hull_l/2-5,hull_w/2+4,-hull_h/2])\n    union() {\n        cylinder(h=10, r=0.8, $fn=8);\n        translate([0,0,-2])\n            sphere(r=2, $fn=12);\n    }\n}\n\nmodule railing() {\n    // Simple railing along deck edges\n    for (x = [-hull_l/2+5:hull_l/10:hull_l/2-5]) {\n        translate([x, hull_w/2-1, hull_h/2+deck_t+1.5])\n            cube([1,0.5,3], center=true);\n        translate([x, -hull_w/2+1, hull_h/2+deck_t+1.5])\n            cube([1,0.5,3], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    bow();\n    stern();\n    deck();\n    mast(10);\n    mast(-15);\n    sail(10);\n    sail(-15);\n    crow_nest(10);\n    rudder();\n    anchor();\n    railing();\n}",
    "renders": true
  },
  {
    "vehicle": "carrack",
    "openscad_code": "// Carrack - 3D printable medium-complexity model\n// Overall length ≈ 90 mm\n\n$fn = 36;\n\n// Hull parameters\nhull_length = 90;\nhull_width  = 25;\nhull_height = 18;\ndeck_height = 8;\n\n// Castle dimensions\nforecastle_l = 20;\nforecastle_w = 22;\nforecastle_h = 10;\n\naftcastle_l  = 25;\naftcastle_w  = 28;\naftcastle_h  = 14;\n\nmast_diam = 3.5;\nmast_height = 70;\n\n// Modules\nmodule rounded_box(l, w, h, r) {\n    translate([0, 0, h/2])\n    difference() {\n        cube([l, w, h], center = true);\n        // Round edges\n        for(dx = [-1, 1], dy = [-1, 1])\n            translate([dx*(l/2 - r), dy*(w/2 - r), 0])\n            cylinder(r = r, h = h + 0.1, center = true);\n    }\n}\n\nmodule hull_shape() {\n    // Main hull body\n    hull_body();\n    \n    // Taper bow gently\n    translate([hull_length/2 - 3, 0, 3])\n    scale([0.6, 0.9, 0.7])\n    hull_body();\n}\n\nmodule hull_body() {\n    difference() {\n        rounded_box(hull_length, hull_width, hull_height, 5);\n        // Hollow inside for printing\n        translate([0, 0, hull_height/2 + 1])\n        cube([hull_length - 4, hull_width - 4, hull_height], center = true);\n    }\n}\n\nmodule forecastle() {\n    color(\"BurlyWood\")\n    translate([hull_length/2 - forecastle_l/2, 0, deck_height])\n    rounded_box(forecastle_l, forecastle_w, forecastle_h, 3);\n}\n\nmodule aftcastle() {\n    color(\"BurlyWood\")\n    translate([-hull_length/2 + aftcastle_l/2, 0, deck_height])\n    rounded_box(aftcastle_l, aftcastle_w, aftcastle_h, 3);\n}\n\nmodule mast(x, y, h) {\n    color(\"SaddleBrown\")\n    translate([x, y, deck_height])\n    cylinder(d = mast_diam, h = h);\n    \n    // Yard\n    color(\"SaddleBrown\")\n    translate([x, y, deck_height + h * 0.8])\n    rotate([90, 0, 0])\n    cylinder(d = 1.2, h = hull_width * 0.9);\n    \n    // Crow’s nest\n    color(\"BurlyWood\")\n    translate([x, y, deck_height + h - 6])\n    cylinder(d = mast_diam + 2, h = 4);\n}\n\nmodule railing() {\n    color(\"SaddleBrown\")\n    for(side = [-1, 1])\n    translate([0, side * (hull_width/2 - 0.5), deck_height + hull_height/2])\n    cube([hull_length - 4, 1, 3]);\n}\n\nmodule cannons() {\n    color(\"DimGray\")\n    for(i = [-2:2])\n    translate([i * 15, 0, deck_height + 1])\n    rotate([0, 90, 0])\n    cylinder(d = 2.5, h = hull_width/2 - 1);\n}\n\nmodule rudder() {\n    color(\"SaddleBrown\")\n    translate([-hull_length/2 - 2, 0, deck_height])\n    rotate([0, 10, 0])\n    cube([5, 1.5, hull_height + 5]);\n}\n\n// Assembly\nhull_shape();\nforecastle();\naftcastle();\nrailing();\ncannons();\nrudder();\n\n// Three masts\nmast(0, 0, mast_height);\nmast(20, 0, mast_height * 0.9);\nmast(-20, 0, mast_height * 0.85);",
    "renders": true
  },
  {
    "vehicle": "galleon",
    "openscad_code": "// Medium-complexity 3D-printable galleon\n// Overall length ~80 mm, designed without steep overhangs\n\nhull_length = 80;\nhull_width  = 20;\nhull_height = 15;\nkeel_depth  = 5;\nwall = 1.5;\n\nmodule hull() {\n    // Main hull as a stretched half-capsule\n    difference() {\n        scale([1, 0.5, 0.5])\n            cylinder(h=hull_length, r=hull_width, $fn=40);\n        // Hollow interior\n        translate([wall, 0, -keel_depth+wall])\n            scale([1-2*wall/hull_length, 0.5-2*wall/hull_width, 0.5-2*wall/hull_width])\n                cylinder(h=hull_length-2*wall, r=hull_width-wall, $fn=40);\n    }\n}\n\nmodule deck() {\n    color(\"peru\")\n    translate([-hull_length/2+wall, -hull_width/2+wall, 0])\n        cube([hull_length-2*wall, hull_width-2*wall, wall]);\n}\n\nmodule forecastle() {\n    color(\"saddlebrown\")\n    translate([-hull_length/2+10, -hull_width/4, 0])\n        cube([15, hull_width/2, 10]);\n}\n\nmodule quarterdeck() {\n    color(\"saddlebrown\")\n    translate([hull_length/2-20, -hull_width/3, 0])\n        cube([15, 2*hull_width/3, 12]);\n}\n\nmodule mast(base_h, h, r) {\n    translate([0, 0, base_h])\n        cylinder(h=h, r=r, $fn=16);\n}\n\nmodule yardarm(len, diam) {\n    rotate([90, 0, 0])\n        cylinder(h=len, r=diam, $fn=12);\n}\n\nmodule sail(w, h, thickness) {\n    color(\"ivory\")\n    translate([-w/2, 0, 0])\n        cube([w, thickness, h]);\n}\n\nmodule cannons(count, spacing) {\n    for (i = [0:count-1]) {\n        translate([-hull_length/2+10+i*spacing, -hull_width/2-1, 5])\n            rotate([0, 90, 0])\n                cylinder(h=5, r=1.2, $fn=8);\n    }\n}\n\nmodule rudder() {\n    color(\"dimgray\")\n    translate([hull_length/2+1, 0, -keel_depth])\n        rotate([0, 0, 10])\n            cube([8, 2, 12]);\n}\n\nmodule bowsprit() {\n    color(\"saddlebrown\")\n    translate([-hull_length/2-8, 0, 5])\n        rotate([0, 0, -10])\n            cylinder(h=12, r=1.5, $fn=8);\n}\n\ndifference() {\n    union() {\n        hull();\n        deck();\n        forecastle();\n        quarterdeck();\n        \n        // Main mast\n        mast(0, 35, 1.5);\n        translate([0, -15, 30]) yardarm(30, 0.8);\n        translate([0, -15, 30]) sail(28, 25, 0.5);\n        \n        // Fore mast\n        translate([-20, 0, 0]) mast(0, 30, 1.2);\n        translate([-20, -12, 25]) yardarm(25, 0.7);\n        translate([-20, -12, 25]) sail(22, 20, 0.5);\n        \n        // Mizzen mast\n        translate([20, 0, 0]) mast(0, 25, 1);\n        translate([20, -10, 20]) yardarm(20, 0.6);\n        translate([20, -10, 20]) sail(18, 15, 0.5);\n        \n        cannons(4, 15);\n        mirror([0, 1, 0]) cannons(4, 15);\n        \n        rudder();\n        bowsprit();\n    }\n    \n    // Drainage slot for printing\n    translate([0, -hull_width/2-1, -keel_depth-1])\n        cube([hull_length, wall+2, keel_depth+2]);\n}",
    "renders": true
  },
  {
    "vehicle": "manowar",
    "openscad_code": "// Portuguese Man o' War (Physalia physalis)\n// Medium complexity, printable model\n\n$fn = 30;\n\n// Overall scaling\nscale_factor = 0.4;\n\n// Main float (pneumatophore)\nmodule float() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        // Main float body - elongated air sac\n        difference() {\n            // Main ellipsoid shape\n            scale([1.2, 0.8, 0.6])\n                sphere(r = 25);\n            \n            // Hollow out the float\n            scale([1.1, 0.7, 0.5])\n                sphere(r = 25);\n            \n            // Ventral opening\n            translate([0, 0, -15])\n                rotate([0, 0, 0])\n                cylinder(h = 30, r1 = 15, r2 = 18, center = false);\n        }\n        \n        // Ridge along top\n        translate([0, 0, 15])\n            scale([1.3, 0.7, 0.2])\n                sphere(r = 20);\n    }\n}\n\n// Tentacles - both fishing and defensive\nmodule tentacle(length, thickness, segments) {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        for(i = [0:segments-1]) {\n            translate([0, 0, -i * (length/segments)])\n                cylinder(h = length/segments, r = thickness * (1 - i * 0.05), center = false);\n        }\n    }\n}\n\n// Siphonophore colony structure\nmodule colony_structure() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        // Central stem\n        translate([0, 0, -15])\n            cylinder(h = 40, r = 3, center = false);\n        \n        // Gastrozooids (feeding polyps)\n        for(i = [0:5]) {\n            rotate([0, 0, i * 60])\n                translate([12, 0, -20 - i * 3])\n                    scale([0.8, 0.8, 1])\n                        sphere(r = 4);\n        }\n        \n        // Dactylozooids (tentacle polyps)\n        for(i = [0:7]) {\n            angle = i * 51.4;\n            rotate([0, 0, angle])\n                translate([8, 0, -25])\n                    tentacle(25, 1.5, 5);\n        }\n    }\n}\n\n// Main fishing tentacles\nmodule fishing_tentacles() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        // Left cluster\n        for(i = [0:3]) {\n            rotate([0, 0, -30 - i * 15])\n                translate([15, -5, -35])\n                    rotate([15 + i * 5, 0, 0])\n                        tentacle(40 + i * 5, 2, 8);\n        }\n        \n        // Right cluster\n        for(i = [0:3]) {\n            rotate([0, 0, 30 + i * 15])\n                translate([-15, -5, -35])\n                    rotate([15 + i * 5, 0, 0])\n                        tentacle(40 + i * 5, 2, 8);\n        }\n    }\n}\n\n// Base stand for printing stability\nmodule base() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        translate([0, 0, -60])\n            cylinder(h = 5, r = 35, center = false);\n    }\n}\n\n// Assembly\nunion() {\n    // Base\n    base();\n    \n    // Main float\n    translate([0, 0, -5])\n        float();\n    \n    // Colony structure\n    colony_structure();\n    \n    // Tentacles\n    fishing_tentacles();\n}",
    "renders": true
  },
  {
    "vehicle": "frigate",
    "openscad_code": "// Realistic Medium-Complexity Frigate – 3D-printable\n// Hull length ≈ 80 mm, max beam ≈ 15 mm, max height ≈ 25 mm\n// All slopes ≤ 45°, wall thickness ≥ 1 mm\n\n$fn = 32;  // smooth curves\n\nmodule frigate() {\n    // Main hull – elongated tapered block\n    difference() {\n        hull() {\n            translate([-40,0,0]) cube([80,16,5], center=true);\n            translate([ 35,0,0]) cube([10, 8,6], center=true);\n        }\n        // Recess for waterline look\n        translate([-40,0,-2.5]) cube([80,16.2,1.1], center=true);\n    }\n\n    // Superstructure – bridge block\n    translate([-15,0,3]) cube([10,12,4], center=true);\n\n    // Single funnel\n    cylinder(h=6, r1=3, r2=2);\n    translate([0,0,6]) cylinder(h=2, r1=2, r2=1.5);\n\n    // Vertical launch tubes in staggered rows\n    module vls(n) {\n        for(i=[0:n-1]) {\n            translate([8 + i*3, (i%2)*4-2, 4.5])\n                cylinder(h=2, d=2, center=true);\n        }\n    }\n    vls(6);\n\n    // Main gun turret\n    translate([-30,0,2.5]) rotate([0,0,0])\n    difference() {\n        cylinder(h=3, r=4);\n        translate([0,0,-0.1]) cylinder(h=3.2, r=2.5);\n    }\n\n    // CIWS turret\n    translate([20,0,4]) cylinder(h=2, r=2);\n\n    // Mast with radar dome\n    translate([10,0,7]) {\n        cylinder(h=8, r=0.8);\n        translate([0,0,8]) sphere(d=4);\n    }\n\n    // Flight deck & hangar\n    translate([25,0,4]) cube([20,14,1], center=true);\n    translate([35,0,5.5]) cube([10,10,3], center=true);\n\n    // Simple lifeboats under sponsons\n    module lifeboat(x,y) {\n        translate([x,y,2])\n        rotate([0,90,0])\n        scale([1,0.6,0.6])\n        cylinder(h=5, r=1.5);\n    }\n    lifeboat(0,8.5);\n    lifeboat(0,-8.5);\n\n    // Anchor recess\n    translate([-39.5,0,0])\n    rotate([90,0,0])\n    cylinder(h=2, r=1.5, $fn=6);\n}\n\nfrigate();",
    "renders": true
  },
  {
    "vehicle": "destroyer",
    "openscad_code": "// Destroyer - Realistic Style, Medium Complexity\n// 3D printable naval destroyer model (~80mm length)\n\nhull_length = 80;\nhull_width = 9;\nhull_height = 7;\ndeck_clearance = 1.5;\n\nmodule hull() {\n    difference() {\n        // Main hull - sloped bow and flat stern\n        union() {\n            // Bow section\n            translate([0, 0, hull_height/2]) {\n                cube([hull_length*0.3, hull_width, hull_height], center=true);\n            }\n            \n            // Mid section\n            translate([hull_length*0.15, 0, hull_height/2]) {\n                cube([hull_length*0.7, hull_width, hull_height], center=true);\n            }\n            \n            // Tapered stern\n            translate([hull_length*0.65, 0, hull_height*0.4]) {\n                cube([hull_length*0.35, hull_width*0.8, hull_height*0.8], center=true);\n            }\n        }\n        \n        // Hull taper - create pointed bow\n        translate([-hull_length*0.05, 0, -hull_height]) {\n            rotate([0, 0, 15]) {\n                cube([hull_length*0.4, hull_width*2, hull_height*2], center=true);\n            }\n        }\n    }\n}\n\nmodule superstructure() {\n    // Bridge tower\n    translate([hull_length*0.1, 0, hull_height + deck_clearance]) {\n        cube([hull_length*0.15, hull_width*0.6, hull_height*0.8], center=true);\n    }\n    \n    // Command center\n    translate([hull_length*0.05, 0, hull_height + deck_clearance + hull_height*0.4]) {\n        cube([hull_length*0.1, hull_width*0.5, hull_height*0.3], center=true);\n    }\n    \n    // Smoke stacks\n    for (i = [0:1]) {\n        translate([hull_length*(-0.1 + i*0.15), 0, hull_height + deck_clearance]) {\n            cylinder(h=hull_height*0.5, r=hull_width*0.15, center=false);\n        }\n    }\n}\n\nmodule weapons() {\n    // Main gun turret\n    translate([hull_length*0.35, 0, hull_height + deck_clearance]) {\n        difference() {\n            cylinder(h=hull_height*0.3, r=hull_width*0.25, center=false);\n            translate([0, 0, -0.1]) {\n                cylinder(h=hull_height*0.4, r=hull_width*0.2, center=false);\n            }\n        }\n        \n        // Gun barrel\n        translate([hull_width*0.3, 0, hull_height*0.15]) {\n            rotate([0, 90, 0]) {\n                cylinder(h=hull_width*0.8, r=hull_width*0.05, center=false);\n            }\n        }\n    }\n    \n    // Secondary guns\n    for (pos = [[-0.2, 0.3], [-0.2, -0.3], [0.3, 0.3], [0.3, -0.3]]) {\n        translate([hull_length*pos[0], hull_width*pos[1], hull_height + deck_clearance]) {\n            rotate([0, 0, 45]) {\n                cube([hull_length*0.08, hull_width*0.15, hull_height*0.15], center=true);\n            }\n            translate([hull_length*0.04, 0, 0]) {\n                rotate([0, 90, 0]) {\n                    cylinder(h=hull_width*0.3, r=hull_width*0.03, center=false);\n                }\n            }\n        }\n    }\n    \n    // Missile launchers\n    translate([hull_length*(-0.4), 0, hull_height + deck_clearance]) {\n        for (side = [-1, 1]) {\n            translate([0, hull_width*0.3*side, hull_height*0.1]) {\n                cube([hull_length*0.1, hull_width*0.1, hull_height*0.2], center=true);\n            }\n        }\n    }\n}\n\nmodule radar() {\n    // Main radar mast\n    translate([hull_length*(-0.05), 0, hull_height + deck_clearance + hull_height*0.8]) {\n        cylinder(h=hull_height*0.6, r=hull_width*0.05, center=false);\n        \n        // Radar array\n        translate([0, 0, hull_height*0.6]) {\n            rotate([0, 90, 0]) {\n                cylinder(h=hull_width*0.4, r=hull_width*0.2, center=true);\n            }\n        }\n    }\n    \n    // Secondary radar\n    translate([hull_length*0.2, 0, hull_height + deck_clearance + hull_height*0.7]) {\n        cylinder(h=hull_height*0.3, r=hull_width*0.08, center=false);\n    }\n}\n\nmodule deck_details() {\n    // Flight deck markings\n    translate([hull_length*(-0.45), 0, hull_height + deck_clearance - 0.1]) {\n        cube([hull_length*0.3, hull_width*0.8, 0.2], center=true);\n    }\n    \n    // Safety railings\n    for (side = [-1, 1]) {\n        translate([0, hull_width/2*side, hull_height + deck_clearance]) {\n            cube([hull_length*0.9, 0.5, 1], center=true);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    hull();\n    superstructure();\n    weapons();\n    radar();\n    deck_details();\n}",
    "renders": true
  },
  {
    "vehicle": "battleship",
    "openscad_code": "// Realistic Battleship - Medium Complexity\n// Scale: 1:2000 (approx 80mm long)\n\nhull_length = 80;\nhull_width = 12;\nhull_height = 8;\ndeck_height = 2;\n\n$fn = 32;\n\nmodule bow() {\n    difference() {\n        hull();\n        translate([hull_length/2, 0, -hull_height])\n            cube([hull_length/2, hull_width*2, hull_height*2], center=true);\n    }\n}\n\nmodule stern() {\n    difference() {\n        hull();\n        translate([-hull_length/2, 0, -hull_height])\n            cube([hull_length/2, hull_width*2, hull_height*2], center=true);\n    }\n}\n\nmodule hull() {\n    translate([0, 0, hull_height/2])\n    scale([1, 0.7, 1])\n    sphere(d=hull_width);\n    \n    translate([0, 0, hull_height/2])\n    cube([hull_length, hull_width, hull_height], center=true);\n}\n\nmodule deck() {\n    translate([0, 0, hull_height])\n    cube([hull_length-6, hull_width-2, deck_height], center=true);\n}\n\nmodule superstructure() {\n    // Bridge tower\n    translate([-10, 0, hull_height+deck_height])\n    cube([8, 6, 12], center=true);\n    \n    // Secondary tower\n    translate([5, 0, hull_height+deck_height])\n    cube([6, 5, 8], center=true);\n    \n    // Funnel\n    translate([0, 2, hull_height+deck_height+12])\n    cylinder(h=8, d1=3, d2=4, center=true);\n}\n\nmodule turret(size, height, offset) {\n    translate([offset, 0, hull_height+deck_height])\n    union() {\n        // Turret base\n        cube([size, size-2, height], center=true);\n        \n        // Gun barrels\n        translate([size/2+2, 0, height/2])\n        rotate([0, 90, 0])\n        cylinder(h=size*1.5, d=size/4, center=true);\n        \n        translate([size/2+2, -2, height/2])\n        rotate([0, 90, 0])\n        cylinder(h=size*1.5, d=size/4, center=true);\n        \n        translate([size/2+2, 2, height/2])\n        rotate([0, 90, 0])\n        cylinder(h=size*1.5, d=size/4, center=true);\n    }\n}\n\nmodule secondary_guns() {\n    for(i = [-30:15:30]) {\n        translate([i, hull_width/2-1, hull_height+deck_height])\n        rotate([0, 0, 90])\n        cube([4, 1, 2], center=true);\n        \n        translate([i, -hull_width/2+1, hull_height+deck_height])\n        rotate([0, 0, 90])\n        cube([4, 1, 2], center=true);\n    }\n}\n\nmodule radar() {\n    translate([-10, 0, hull_height+deck_height+12+8])\n    sphere(d=2);\n    \n    translate([-10, 0, hull_height+deck_height+12+10])\n    cylinder(h=2, d=0.5);\n    \n    translate([-10, 0, hull_height+deck_height+12+11])\n    sphere(d=1);\n}\n\n// Main assembly\nunion() {\n    // Hull sections\n    bow();\n    stern();\n    \n    // Deck and superstructure\n    deck();\n    superstructure();\n    \n    // Main turrets\n    turret(6, 4, -20);\n    turret(6, 4, -5);\n    turret(6, 4, 15);\n    \n    // Secondary armament\n    secondary_guns();\n    \n    // Radar and antennas\n    radar();\n}",
    "renders": true
  },
  {
    "vehicle": "aircraftcarrier",
    "openscad_code": "// Realistic Medium-Complexity Aircraft Carrier – 3D-printable\n// Approx. 80 mm long, 20 mm wide, 8 mm tall\n// All overhangs avoided (45° slopes or chamfers used)\n\n$fa = 2;\n$fs = 0.5;\n\n// Overall scale factor – change to resize whole model\nscale_factor = 1;\n\nmodule carrier() {\n    // Main hull – full length 80 mm\n    difference() {\n        hull_profile();\n        \n        // Hollow interior for weight & material saving\n        translate([5,0,-5])\n            cube([70,18,6], center=true);\n    }\n    \n    // Flight deck on top\n    translate([0,0,2.8])\n        flight_deck();\n    \n    // Island superstructure (starboard)\n    translate([5,11,3])\n        island();\n    \n    // 4 catapults (raised strips)\n    for (i=[-1,1]) {\n        translate([5,i*4,3.2])\n            catapult();\n    }\n    \n    // Arrestor wires\n    translate([-30,0,3.2])\n        arrestor_wires();\n    \n    // Bow sponsons for anchor & equipment\n    translate([38,14,0])\n        sponson();\n    translate([38,-14,0])\n        mirror([0,1,0])\n            sponson();\n    \n    // 3 elevators flush with deck\n    translate([10,10,3])\n        elevator();\n    translate([10,-10,3])\n        mirror([0,1,0])\n            elevator();\n    translate([-25,0,3])\n        elevator();\n    \n    // Simple 16 aircraft placeholders\n    for (x=[-25:25:25])\n        for (y=[-6:6:12])\n            translate([x,y,3.8])\n                scale([0.8,0.8,0.8])\n                    aircraft();\n}\n\nmodule hull_profile() {\n    // Tapered hull with slight flare\n    linear_extrude(height=4, convexity=10)\n    polygon(points=[\n        [40,0], [38,10], [30,12], [-38,12], [-40,10], [-40,-10], [-38,-12], [30,-12], [38,-10]\n    ]);\n}\n\nmodule flight_deck() {\n    color(\"slategray\")\n    translate([0,0,0.2])\n        cube([82,22,0.4], center=true);\n}\n\nmodule island() {\n    // Multi-level island\n    union() {\n        // Base\n        color(\"gray\")\n        translate([0,0,0])\n            cube([10,6,4]);\n        \n        // Second level\n        translate([0,-1,4])\n            cube([8,4,2]);\n        \n        // Mast\n        translate([0,0,6.5])\n            cylinder(h=3, d=1.5);\n    }\n}\n\nmodule catapult() {\n    color(\"darkgray\")\n    translate([-15,0,0])\n        cube([30,1.2,0.2]);\n}\n\nmodule arrestor_wires() {\n    for (dy=[-3,0,3]) {\n        color(\"black\")\n        translate([0,dy,0])\n            cube([30,0.5,0.2]);\n    }\n}\n\nmodule sponson() {\n    color(\"gray\")\n    hull_profile();\n}\n\nmodule elevator() {\n    color(\"silver\")\n    cube([8,8,0.2]);\n}\n\nmodule aircraft() {\n    // Simplified jet placeholder\n    color(\"darkgreen\")\n    union() {\n        cube([4,3,0.6], center=true);\n        translate([1.5,0,0])\n            cube([1,5,0.4], center=true);\n    }\n}\n\n// Render the carrier scaled\nscale([scale_factor,scale_factor,scale_factor])\n    carrier();",
    "renders": true
  },
  {
    "vehicle": "submersible",
    "openscad_code": "// Realistic medium-complexity 3D-printable submersible\n// Main body dimensions\nbody_len = 80;\nbody_dia = 35;\nwall = 2;\n\n// Propeller parameters\nprop_hub = 6;\nprop_blade = 12;\nprop_blade_thk = 2;\nblade_angle = 30;\n\nmodule main_hull() {\n    // Central pressure hull\n    cylinder(h = body_len, d = body_dia, $fn = 64);\n    \n    // Tapered nose cone\n    translate([0, 0, body_len/2])\n        cylinder(h = 25, d1 = body_dia, d2 = body_dia*0.6, $fn = 64);\n    \n    // Tapered tail cone\n    translate([0, 0, -body_len/2])\n        cylinder(h = 20, d1 = body_dia, d2 = body_dia*0.7, $fn = 64);\n}\n\nmodule viewport() {\n    // Front acrylic viewport\n    difference() {\n        translate([0, 0, body_len/2 + 12])\n            sphere(d = body_dia*0.6, $fn = 64);\n        translate([0, 0, body_len/2 + 12 - 2])\n            sphere(d = body_dia*0.5, $fn = 64);\n    }\n}\n\nmodule ballast_tanks() {\n    // Twin side ballast tanks with flat bottom for printing\n    for(side = [-1, 1]) {\n        translate([side*body_dia/2 + 4, 0, 0])\n            difference() {\n                cube([8, body_len*0.7, 12], center = true);\n                translate([0, 0, -wall])\n                    cube([8 - wall*2, body_len*0.7 - wall*2, 12], center = true);\n            }\n    }\n}\n\nmodule propeller() {\n    // Propeller hub\n    rotate([0, 0, 0]) {\n        translate([0, 0, -body_len/2 - 15])\n            cylinder(h = prop_hub, d = prop_hub, $fn = 32);\n        \n        // Four blades at 30° angle\n        for(i = [0:90:270]) {\n            rotate([blade_angle, 0, i])\n                translate([0, 0, -body_len/2 - 15 + prop_hub/2])\n                    cube([prop_blade_thk, prop_blade, prop_hub], center = true);\n        }\n    }\n}\n\nmodule dive_planes() {\n    // Fore dive planes\n    for(side = [-1, 1]) {\n        translate([side*(body_dia/2 + 3), 0, body_len/4])\n            rotate([0, 15, 0])\n                cube([12, 1, 8], center = true);\n    }\n    \n    // Rear dive planes\n    for(side = [-1, 1]) {\n        translate([side*(body_dia/2 + 3), 0, -body_len/4])\n            rotate([0, -15, 0])\n                cube([12, 1, 8], center = true);\n    }\n}\n\nmodule rudder_fin() {\n    // Vertical tail fin\n    translate([0, 0, -body_len/2 - 5])\n        rotate([0, 0, 0])\n            cube([1, 12, 15], center = true);\n    \n    // Horizontal stabilizers\n    for(side = [-1, 1]) {\n        translate([0, side*8, -body_len/2 - 5])\n            rotate([0, 0, 0])\n                cube([10, 1, 8], center = true);\n    }\n}\n\nmodule periscope() {\n    // Periscope mast\n    translate([0, body_dia/2, body_len/4])\n        cylinder(h = 25, d = 4, $fn = 16);\n}\n\n// Build the submersible\ndifference() {\n    union() {\n        main_hull();\n        viewport();\n        ballast_tanks();\n        propeller();\n        dive_planes();\n        rudder_fin();\n        periscope();\n    }\n    \n    // Remove interior for hollow shell printing\n    translate([0, 0, 0])\n        cylinder(h = body_len + 50, d = body_dia - wall*2, $fn = 64);\n}",
    "renders": true
  },
  {
    "vehicle": "minisub",
    "openscad_code": "// Mini-submarine, realistic style, medium complexity\n// All dimensions in mm.  Overall length ~85 mm\n\n$fn = 32;            // good curved surfaces for printing\n\n// Main hull -------------------------------------------------\nmodule hull() {\n    // central pressure hull (cylindrical with rounded ends)\n    difference() {\n        union() {\n            // cylindrical body\n            cylinder(h = 55, d = 30, center = true);\n\n            // hemispherical bow\n            translate([0, 0, 27.5])\n                sphere(d = 30);\n\n            // hemispherical stern\n            translate([0, 0, -27.5])\n                sphere(d = 30);\n        }\n\n        // hollow it out (2 mm wall)\n        translate([0, 0, 0])\n            cylinder(h = 60, d = 26, center = true);\n\n        translate([0, 0, 27.5])\n            sphere(d = 26);\n\n        translate([0, 0, -27.5])\n            sphere(d = 26);\n    }\n}\n\n// Conning tower / sail --------------------------------------\nmodule sail() {\n    translate([0, 0, 18]) {\n        difference() {\n            // sail body\n            cube([20, 6, 10], center = true);\n            // hollow\n            translate([0, 0, 0])\n                cube([16, 2.5, 8], center = true);\n        }\n\n        // periscope mast\n        translate([5, 0, 7]) {\n            cylinder(h = 15, d = 2, $fn = 12);\n        }\n    }\n}\n\n// Propeller -------------------------------------------------\nmodule prop() {\n    // shroud\n    difference() {\n        cylinder(h = 5, d1 = 18, d2 = 20);\n        translate([0, 0, -1])\n            cylinder(h = 7, d = 16);\n    }\n\n    // four blades\n    rotate([90, 0, 0]) {\n        for (i = [0:90:270]) {\n            rotate([0, 0, i]) translate([0, 0, 2.5])\n                cube([12, 2, 0.8], center = true);\n        }\n    }\n}\n\n// Bow planes -------------------------------------------------\nmodule bowplanes() {\n    for (side = [-1, 1]) {\n        translate([12, side * 7.5, 0])\n            rotate([0, 20 * side, 0])\n                cube([12, 1.5, 6], center = true);\n    }\n}\n\n// Stern planes ----------------------------------------------\nmodule sternplanes() {\n    for (side = [-1, 1]) {\n        translate([-12, side * 7.5, 0])\n            rotate([0, 20 * side, 0])\n                cube([12, 1.5, 6], center = true);\n    }\n}\n\n// Rudder ----------------------------------------------------\nmodule rudder() {\n    translate([-14, 0, 0])\n        rotate([0, 90, 0])\n            cube([8, 1.5, 12], center = true);\n}\n\n// Skid / keel strip -----------------------------------------\nmodule keel() {\n    translate([0, 0, -16])\n        cube([60, 4, 2], center = true);\n}\n\n// Main assembly ---------------------------------------------\nunion() {\n    hull();\n    sail();\n    bowplanes();\n    sternplanes();\n    rudder();\n    keel();\n    translate([0, 0, -35]) prop();\n}",
    "renders": true
  },
  {
    "vehicle": "researchsub",
    "openscad_code": "// Research Submersible - Realistic Medium Complexity\n// Approx 80mm overall length\n\n$fn = 24;  // Smooth curves for printing\nwall = 2;  // Wall thickness for 3D printing\n\n// Main hull cylinder with rounded ends\nmodule hull() {\n    difference() {\n        union() {\n            // Main cylindrical body\n            cylinder(h = 60, r = 15, center = true);\n            // Front dome\n            translate([0, 0, 30]) sphere(r = 15);\n            // Rear dome\n            translate([0, 0, -30]) sphere(r = 15);\n        }\n        // Hollow interior\n        cylinder(h = 62, r = 15 - wall, center = true);\n        translate([0, 0, 30]) sphere(r = 15 - wall);\n        translate([0, 0, -30]) sphere(r = 15 - wall);\n    }\n}\n\n// Viewport dome on top\nmodule viewport() {\n    translate([0, 0, 35]) {\n        difference() {\n            sphere(r = 8);\n            translate([0, 0, -5]) cube([20, 20, 20], center = true);\n            cylinder(h = 10, r = 3, center = true);\n        }\n    }\n}\n\n// Thruster module\nmodule thruster(pos) {\n    translate(pos) {\n        // Thruster shroud\n        cylinder(h = 8, r1 = 4, r2 = 5);\n        // Propeller hub\n        translate([0, 0, 4]) cylinder(h = 2, r = 2);\n        // Propeller blades (4 blades)\n        for (i = [0:3]) {\n            rotate([0, 0, i * 90]) {\n                translate([0, 3, 5]) cube([1, 6, 0.5], center = true);\n            }\n        }\n    }\n}\n\n// Ballast tanks (side pods)\nmodule ballast_tank(side) {\n    translate([side * 20, 0, 0]) {\n        scale([0.5, 1, 1]) cylinder(h = 30, r = 10);\n    }\n}\n\n// Manipulator arm\nmodule manipulator() {\n    translate([0, 15, 10]) {\n        rotate([90, 0, 0]) {\n            // Base joint\n            cylinder(h = 5, r = 3);\n            translate([0, 0, 5]) {\n                rotate([0, 0, 45]) {\n                    // Upper arm\n                    cube([3, 15, 3], center = true);\n                    translate([0, 7.5, 0]) {\n                        rotate([0, 0, -90]) {\n                            // Lower arm\n                            cube([2, 10, 2], center = true);\n                            translate([0, 5, 0]) {\n                                // Gripper\n                                cube([1, 3, 1], center = true);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    hull();\n    viewport();\n    \n    // Main thrusters (3 rear)\n    thruster([0, 0, -35]);\n    thruster([0, 8, -33]);\n    thruster([0, -8, -33]);\n    \n    // Vertical thrusters (2 top/bottom)\n    thruster([0, 15, 0]);\n    rotate([180, 0, 0]) thruster([0, 15, 0]);\n    \n    // Ballast tanks\n    ballast_tank(1);\n    ballast_tank(-1);\n    \n    // Manipulator arms (2 sides)\n    manipulator();\n    mirror([1, 0, 0]) manipulator();\n    \n    // Sensor mast\n    translate([0, 0, 40]) {\n        cylinder(h = 10, r = 2);\n        translate([0, 0, 5]) sphere(r = 3);\n    }\n    \n    // Skid rails\n    translate([0, 0, -45]) {\n        for (x = [-20, 20]) {\n            translate([x, 0, 0]) cube([3, 30, 2]);\n        }\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "tourboat",
    "openscad_code": "// Tour Boat - Realistic Style, Medium Complexity\n// Approx 1:200 scale (~80 mm long)\n\n$fn = 36;  // Smooth curves for 3D printing\n\n// Main hull module\nmodule hull() {\n    difference() {\n        // Main hull body\n        hull_union();\n        \n        // Remove interior for hollow hull\n        translate([0, 0, -1])\n            scale([0.8, 0.8, 0.9])\n            hull_union();\n    }\n}\n\n// Hull shape generator\nmodule hull_union() {\n    union() {\n        // Bow section\n        translate([35, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h=15, r1=12, r2=0);\n        \n        // Main hull body\n        translate([0, 0, 6])\n            cube([60, 24, 8], center=true);\n        \n        // Stern section\n        translate([-35, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h=15, r1=12, r2=8);\n        \n        // Hull bottom curve\n        translate([0, 0, -2])\n            cube([70, 24, 4], center=true);\n    }\n}\n\n// Cabin superstructure\nmodule cabin() {\n    difference() {\n        // Main cabin\n        translate([10, 0, 12])\n            cube([30, 20, 8], center=true);\n        \n        // Cabin windows\n        for(x = [20, 10, 0, -10]) {\n            translate([x, 11, 14])\n                cube([4, 1, 3], center=true);\n            translate([x, -11, 14])\n                cube([4, 1, 3], center=true);\n        }\n    }\n}\n\n// Bridge/Wheelhouse\nmodule bridge() {\n    difference() {\n        // Bridge structure\n        translate([20, 0, 22])\n            cube([12, 14, 6], center=true);\n        \n        // Bridge windows\n        translate([26, 0, 24])\n            cube([1, 8, 3], center=true);\n        translate([20, 8, 24])\n            cube([8, 1, 3], center=true);\n        translate([20, -8, 24])\n            cube([8, 1, 3], center=true);\n    }\n}\n\n// Life rings\nmodule life_rings() {\n    for(pos = [[-15, 13, 14], [-15, -13, 14]]) {\n        translate(pos)\n            rotate([90, 0, 0])\n            difference() {\n                cylinder(h=2, r=3);\n                cylinder(h=3, r=2);\n            }\n    }\n}\n\n// Railings\nmodule railings() {\n    // Front railing\n    for(x = [-25:5:25]) {\n        translate([x, 12, 11])\n            cylinder(h=4, r=0.5);\n    }\n    \n    // Rear railing\n    for(x = [-25:5:-10]) {\n        translate([x, 12, 11])\n            cylinder(h=4, r=0.5);\n    }\n    \n    // Top rail\n    translate([7.5, 12, 15])\n        cube([37.5, 1, 1], center=true);\n    translate([7.5, -12, 15])\n        cube([37.5, 1, 1], center=true);\n}\n\n// Deck details\nmodule deck_details() {\n    // Ventilation stacks\n    translate([-20, 0, 20])\n        cylinder(h=8, r=2);\n    \n    // Bench seats\n    for(x = [-10:10:10]) {\n        translate([x, 0, 12.5])\n            cube([8, 3, 1], center=true);\n    }\n}\n\n// Main assembly\nunion() {\n    // Hull and superstructure\n    hull();\n    cabin();\n    bridge();\n    \n    // Details\n    life_rings();\n    railings();\n    deck_details();\n}",
    "renders": true
  },
  {
    "vehicle": "excursionboat",
    "openscad_code": "$fn = 24;           // Smooth curves\nhull_thk = 1.5;     // Wall thickness for 3D printing\nscale = 0.6;        // Overall model scale\n\nmodule hull() {\n    difference() {\n        // Main hull body\n        hull() {\n            translate([0, 0, 0])     cube([55, 22, 8], center=true);\n            translate([0, 0, -3])    cube([50, 18, 5], center=true);\n            translate([0, 0, -6])    cube([45, 14, 3], center=true);\n        }\n        // Hollow out interior\n        translate([0, 0, 1.5]) cube([52-2*hull_thk, 20-2*hull_thk, 10], center=true);\n    }\n}\n\nmodule deck() {\n    difference() {\n        translate([0, 0, 4]) cube([53, 23, hull_thk], center=true);\n        translate([0, 0, 5]) cube([51-2*hull_thk, 21-2*hull_thk, hull_thk], center=true);\n    }\n}\n\nmodule railing(steps=8) {\n    for(i=[-1:1]) {\n        // Posts\n        translate([20*i, 11, 5.5]) cylinder(h=6, d=1.5);\n        translate([20*i, -11, 5.5]) cylinder(h=6, d=1.5);\n    }\n    // Top rail\n    translate([0, 11, 11.5]) cube([42, 1.5, 1.5], center=true);\n    translate([0, -11, 11.5]) cube([42, 1.5, 1.5], center=true);\n}\n\nmodule cabin() {\n    difference() {\n        // Cabin block\n        translate([0, 0, 6.5]) cube([25, 18, 12], center=true);\n        // Door\n        translate([-12, 0, 6.5]) cube([hull_thk*2, 4, 8], center=true);\n        // Windows\n        for(side=[-1,1])\n            for(x=[-7,0,7])\n                translate([x, side*8.5, 11]) cube([4, hull_thk*2, 3], center=true);\n    }\n    // Cabin roof\n    translate([0, 0, 13.5]) cube([26, 19, 2], center=true);\n}\n\nmodule bench() {\n    translate([10, 0, 5.5]) {\n        difference() {\n            cube([4, 10, 3], center=true);\n            translate([0, 0, 0.5]) cube([3, 9, 2], center=true);\n        }\n    }\n}\n\nmodule propeller() {\n    rotate([0, 90, 0]) translate([-25, 0, -3]) {\n        // Shaft\n        cylinder(h=6, d=2);\n        // Blades\n        for(a=[0:120:240])\n            rotate([0, 0, a]) translate([0, 2.5, 0]) cube([0.5, 5, 1.5]);\n    }\n}\n\nmodule life_ring() {\n    translate([20, 9, 10]) rotate([90, 0, 0])\n    difference() {\n        cylinder(h=2, d=6);\n        cylinder(h=2.5, d=3);\n    }\n}\n\nmodule radar() {\n    translate([0, 0, 15.5]) {\n        cylinder(h=4, d=1.5);\n        rotate([90, 0, 0]) translate([0, 0, 2]) cube([10, 1, 1.5], center=true);\n    }\n}\n\nscale(scale) {\n    hull();\n    deck();\n    railing();\n    cabin();\n    bench();\n    mirror([1,0,0]) bench(); // Second bench\n    propeller();\n    life_ring();\n    mirror([1,0,0]) life_ring(); // Ring on other side\n    radar();\n}",
    "renders": true
  },
  {
    "vehicle": "sightseeingboat",
    "openscad_code": "// Realistic sightseeing boat - medium complexity\n// 3D printable, ~80mm long\n\n$fn = 50; // Smooth curves\nhull_thickness = 2;\ndeck_height = 8;\n\n// Main dimensions\nboat_length = 80;\nboat_width = 28;\nboat_height = 16;\n\nmodule hull() {\n    // Main hull shape - rounded bottom\n    difference() {\n        hull() {\n            // Front rounded section\n            translate([boat_length/2-8, 0, 0])\n                scale([1, 0.6, 0.7])\n                    sphere(r=10);\n            \n            // Rear flat section\n            translate([-boat_length/2+5, 0, -3])\n                scale([1, 0.9, 0.5])\n                    cube([10, boat_width-4, 10], center=true);\n            \n            // Center section\n            translate([0, 0, -3])\n                scale([1.1, 1, 0.6])\n                    cylinder(h=15, r1=boat_width/2-2, r2=boat_width/2-2);\n        }\n        \n        // Hollow out interior\n        translate([0, 0, 2])\n            scale([0.9, 0.85, 0.9])\n                hull() {\n                    translate([boat_length/2-10, 0, 0])\n                        scale([1, 0.6, 0.7])\n                            sphere(r=9);\n                    translate([-boat_length/2+5, 0, -3])\n                        scale([1, 0.9, 0.5])\n                            cube([10, boat_width-6, 10], center=true);\n                    translate([0, 0, -3])\n                        scale([1.1, 1, 0.6])\n                            cylinder(h=15, r1=boat_width/2-4, r2=boat_width/2-4);\n                }\n    }\n}\n\nmodule deck() {\n    // Main deck surface\n    translate([0, 0, boat_height/2])\n        difference() {\n            // Deck platform\n            cube([boat_length-10, boat_width-4, deck_height], center=true);\n            \n            // Seating area cutout\n            translate([5, 0, -deck_height/2+1])\n                cube([boat_length-25, boat_width-10, deck_height+2], center=true);\n        }\n}\n\nmodule cabin() {\n    // Pilot cabin at front\n    translate([boat_length/2-15, 0, boat_height/2+deck_height/2])\n        union() {\n            // Main cabin structure\n            cube([15, boat_width-8, 10], center=true);\n            \n            // Cabin roof\n            translate([0, 0, 6])\n                cube([16, boat_width-6, 2], center=true);\n            \n            // Windows (cutouts)\n            for(x = [-5, 0, 5]) {\n                translate([x, (boat_width-8)/2-1, 2])\n                    cube([3, 0.5, 4], center=true);\n                translate([x, -(boat_width-8)/2+1, 2])\n                    cube([3, 0.5, 4], center=true);\n            }\n        }\n}\n\nmodule seats() {\n    // Seating rows\n    for(i = [-1:1]) {\n        translate([i*15-5, 0, boat_height/2+deck_height/2+1])\n            cube([10, boat_width-12, 3], center=true);\n    }\n}\n\nmodule railings() {\n    // Safety railings around deck\n    railing_height = 5;\n    \n    // Left side\n    translate([0, (boat_width-4)/2, boat_height/2+deck_height/2+railing_height/2])\n        cube([boat_length-12, 1, railing_height], center=true);\n    \n    // Right side\n    translate([0, -(boat_width-4)/2, boat_height/2+deck_height/2+railing_height/2])\n        cube([boat_length-12, 1, railing_height], center=true);\n    \n    // Front posts\n    for(x = [boat_length/2-15, -boat_length/2+15]) {\n        translate([x, (boat_width-4)/2-1, boat_height/2+deck_height/2+railing_height/2])\n            cylinder(h=railing_height, r=0.8);\n        translate([x, -(boat_width-4)/2+1, boat_height/2+deck_height/2+railing_height/2])\n            cylinder(h=railing_height, r=0.8);\n    }\n}\n\nmodule propeller() {\n    // Simple propeller at rear\n    translate([-boat_length/2+5, 0, -2]) {\n        rotate([90, 0, 0])\n            union() {\n                // Propeller hub\n                cylinder(h=3, r=2);\n                \n                // Blades\n                for(i = [0:120:359]) {\n                    rotate([0, 0, i])\n                        translate([0, 3, 0])\n                            cube([1, 4, 0.5], center=true);\n                }\n            }\n    }\n}\n\n// Assemble the boat\nunion() {\n    hull();\n    deck();\n    cabin();\n    seats();\n    railings();\n    propeller();\n}",
    "renders": true
  },
  {
    "vehicle": "dinnercruise",
    "openscad_code": "// Dinner Cruise Boat - Realistic Style, Medium Complexity\n// Approximate size: 80mm long, suitable for 3D printing\n\n$fn = 32;\n\n// Main dimensions\nhull_length = 80;\nhull_width = 20;\nhull_height = 10;\ndeck_clearance = 2;\n\n// Hull module\nmodule hull() {\n    difference() {\n        // Main hull shape - tapered\n        hull_shape();\n        \n        // Hollow out interior\n        translate([0, 0, -1])\n            scale([0.8, 0.8, 1.2])\n                hull_shape();\n    }\n}\n\nmodule hull_shape() {\n    // Create tapered hull with rounded bottom\n    hull_points = [\n        [-hull_length/2, -hull_width/2, 0],\n        [hull_length/2, -hull_width/2, 0],\n        [hull_length/2, hull_width/2, 0],\n        [-hull_length/2, hull_width/2, 0],\n        [-hull_length/2 + 5, -hull_width/2 + 2, hull_height],\n        [hull_length/2 - 5, -hull_width/2 + 2, hull_height],\n        [hull_length/2 - 5, hull_width/2 - 2, hull_height],\n        [-hull_length/2 + 5, hull_width/2 - 2, hull_height]\n    ];\n    \n    polyhedron(\n        points = hull_points,\n        faces = [\n            [0,1,2,3],  // bottom\n            [4,5,1,0],  // sides\n            [5,6,2,1],\n            [6,7,3,2],\n            [7,4,0,3],\n            [4,5,6,7]   // top\n        ]\n    );\n}\n\n// Deck module\nmodule deck() {\n    translate([0, 0, hull_height])\n        cube([hull_length - 10, hull_width - 4, 2], center=true);\n}\n\n// Cabin structure\nmodule cabin() {\n    translate([0, 0, hull_height + 2])\n        difference() {\n            // Main cabin block\n            cube([hull_length - 20, hull_width - 6, 15], center=true);\n            \n            // Cabin windows\n            for(i = [-1, 1]) {\n                translate([i * 15, 0, 5])\n                    cube([8, hull_width - 8, 6], center=true);\n            }\n            \n            translate([0, 0, 10])\n                cube([hull_length - 25, hull_width - 10, 5], center=true);\n        }\n}\n\n// Bridge/upper deck\nmodule bridge() {\n    translate([0, 0, hull_height + 17])\n        cube([hull_length - 30, hull_width - 10, 8], center=true);\n}\n\n// Lifeboats (2 on each side)\nmodule lifeboats() {\n    for(side = [-1, 1]) {\n        for(pos = [-20, 10]) {\n            translate([pos, side * (hull_width/2 + 3), hull_height + 5])\n                rotate([0, 0, side * 90])\n                    lifeboat();\n        }\n    }\n}\n\nmodule lifeboat() {\n    scale([8, 4, 3])\n        difference() {\n            sphere(1);\n            translate([0, 0, -0.5])\n                cube([2, 2, 1], center=true);\n        }\n}\n\n// Railing posts\nmodule railings() {\n    for(side = [-1, 1]) {\n        for(pos = [-35:10:35]) {\n            translate([pos, side * (hull_width/2 - 1), hull_height + 2])\n                cylinder(h=4, d=1.5);\n        }\n    }\n}\n\n// Smoke stack\nmodule smokestack() {\n    translate([20, 0, hull_height + 25])\n        cylinder(h=12, d1=4, d2=3);\n}\n\n// Main assembly\nunion() {\n    hull();\n    deck();\n    cabin();\n    bridge();\n    lifeboats();\n    railings();\n    smokestack();\n}",
    "renders": true
  },
  {
    "vehicle": "partyboat",
    "openscad_code": "// Party Boat - Realistic Style, Medium Complexity\n// Dimensions: ~80mm long, ~30mm wide, ~25mm tall\n\n// Hull parameters\nhull_length = 80;\nhull_width = 30;\nhull_height = 12;\nwall_thickness = 2;\n\n// Deck parameters\ndeck_thickness = 2;\nrailing_height = 5;\nrailing_post_spacing = 10;\n\n// Cabin parameters\ncabin_length = 30;\ncabin_width = 22;\ncabin_height = 15;\n\n// Details\nprop_diameter = 12;\nprop_height = 3;\nwindow_size = 4;\n\nmodule hull() {\n    difference() {\n        // Main hull shape\n        hull_shape();\n        \n        // Hollow out interior\n        translate([0, 0, -1])\n        scale([0.8, 0.8, 0.9])\n        hull_shape();\n    }\n}\n\nmodule hull_shape() {\n    hull_points = [\n        [-hull_length/2, 0, 0],\n        [hull_length/2, 0, 0],\n        [hull_length/2-10, hull_width/2-5, 0],\n        [-hull_length/2+15, hull_width/2-5, 0],\n        [-hull_length/2+10, 0, hull_height]\n    ];\n    \n    linear_extrude(height = hull_height, convexity = 10)\n    polygon(points = [\n        [-hull_length/2, -hull_width/2],\n        [hull_length/2-5, -hull_width/2],\n        [hull_length/2, 0],\n        [hull_length/2-5, hull_width/2],\n        [-hull_length/2, hull_width/2]\n    ]);\n}\n\nmodule deck() {\n    // Main deck\n    translate([0, 0, hull_height])\n    cube([hull_length-10, hull_width, deck_thickness], center = true);\n    \n    // Cabin base\n    translate([0, 0, hull_height + deck_thickness])\n    cube([cabin_length+5, cabin_width+5, deck_thickness], center = true);\n}\n\nmodule cabin() {\n    // Main cabin\n    translate([0, 0, hull_height + 2*deck_thickness + cabin_height/2])\n    cube([cabin_length, cabin_width, cabin_height], center = true);\n    \n    // Cabin roof\n    translate([0, 0, hull_height + 2*deck_thickness + cabin_height + 2])\n    cube([cabin_length+2, cabin_width+2, 3], center = true);\n    \n    // Windows\n    for(i = [-1, 1]) {\n        translate([i * (cabin_length/2 - 3), cabin_width/2 - 1, hull_height + 2*deck_thickness + cabin_height/2])\n        rotate([0, 90, 0])\n        cylinder(h = 0.1, r = window_size/2, $fn = 8);\n        \n        translate([i * (cabin_length/2 - 3), -(cabin_width/2 - 1), hull_height + 2*deck_thickness + cabin_height/2])\n        rotate([0, 90, 0])\n        cylinder(h = 0.1, r = window_size/2, $fn = 8);\n    }\n}\n\nmodule railings() {\n    // Railing posts along sides\n    for(x = [-hull_length/2+10 : railing_post_spacing : hull_length/2-15]) {\n        // Left side\n        translate([x, hull_width/2 - 1, hull_height + deck_thickness])\n        cylinder(h = railing_height, r = 1, $fn = 8);\n        \n        // Right side\n        translate([x, -hull_width/2 + 1, hull_height + deck_thickness])\n        cylinder(h = railing_height, r = 1, $fn = 8);\n    }\n    \n    // Top rails\n    translate([0, hull_width/2 - 1, hull_height + deck_thickness + railing_height - 1])\n    cube([hull_length-20, 1, 1], center = true);\n    \n    translate([0, -hull_width/2 + 1, hull_height + deck_thickness + railing_height - 1])\n    cube([hull_length-20, 1, 1], center = true);\n}\n\nmodule propeller() {\n    // Engine housing\n    translate([-hull_length/2 + 5, 0, hull_height/2])\n    rotate([90, 0, 0])\n    cylinder(h = 10, r1 = 6, r2 = 4, $fn = 16);\n    \n    // Propeller blades\n    for(angle = [0 : 120 : 240]) {\n        rotate([0, 0, angle])\n        translate([-hull_length/2 + 2, 0, hull_height/2])\n        rotate([0, 90, 0])\n        cylinder(h = prop_height, r1 = prop_diameter/2, r2 = 2, $fn = 3);\n    }\n}\n\nmodule party_details() {\n    // Speakers on deck\n    translate([hull_length/4, hull_width/4, hull_height + deck_thickness + 2])\n    cube([4, 4, 4], center = true);\n    \n    translate([hull_length/4, -hull_width/4, hull_height + deck_thickness + 2])\n    cube([4, 4, 4], center = true);\n    \n    // Flag pole\n    translate([hull_length/2 - 8, 0, hull_height + 2*deck_thickness + cabin_height + 5])\n    cylinder(h = 10, r = 0.5, $fn = 8);\n    \n    // Flag\n    translate([hull_length/2 - 7, 0, hull_height + 2*deck_thickness + cabin_height + 10])\n    cube([8, 4, 0.5], center = true);\n}\n\n// Main assembly\nunion() {\n    hull();\n    deck();\n    cabin();\n    railings();\n    propeller();\n    party_details();\n}",
    "renders": true
  },
  {
    "vehicle": "charterboat",
    "openscad_code": "// Charterboat - Medium complexity realistic style\n// Overall dimensions ~80mm long x 30mm wide x 25mm high\n\nhull_length = 75;\nhull_width = 28;\nhull_height = 12;\n\n$fn = 32;\n\nmodule hull() {\n    // Main hull with slight curvature\n    difference() {\n        hull_shape();\n        // Cut bottom flat for printing\n        translate([-5, -hull_width/2-5, -hull_height]) \n            cube([hull_length+10, hull_width+10, hull_height]);\n    }\n}\n\nmodule hull_shape() {\n    // Create curved hull using hull of spheres\n    hull() {\n        translate([hull_length*0.1, 0, 0]) \n            scale([1, 0.8, 1]) \n                sphere(d=hull_width*0.9);\n        translate([hull_length*0.9, 0, 0]) \n            scale([1, 0.6, 0.8]) \n                sphere(d=hull_width*0.7);\n        translate([hull_length*0.5, 0, -hull_height*0.3]) \n            sphere(d=hull_width*0.8);\n    }\n}\n\nmodule deck() {\n    // Flat deck on top of hull\n    translate([0, 0, hull_height*0.9]) \n        cube([hull_length*0.85, hull_width*0.75, 2], center=true);\n}\n\nmodule cabin() {\n    // Main cabin structure\n    translate([hull_length*0.4, 0, hull_height*0.9+2]) {\n        difference() {\n            // Cabin body\n            cube([20, hull_width*0.6, 10], center=true);\n            // Door\n            translate([-9.9, 0, -2]) \n                cube([2, 8, 6]);\n            // Windows\n            for(y = [-hull_width*0.2, hull_width*0.2]) {\n                translate([-5, y, 2]) \n                    cube([10, 3, 2]);\n            }\n        }\n    }\n}\n\nmodule wheelhouse() {\n    // Upper wheelhouse\n    translate([hull_length*0.2, 0, hull_height*0.9+12]) {\n        cube([15, hull_width*0.5, 8], center=true);\n        // Roof\n        translate([0, 0, 4]) \n            cube([16, hull_width*0.6, 1], center=true);\n    }\n}\n\nmodule railings() {\n    // Safety railings around deck\n    railing_section(hull_length*0.85);\n    mirror([1,0,0]) railing_section(hull_length*0.85);\n}\n\nmodule railing_section(offset) {\n    translate([offset/2, 0, hull_height*0.9+2]) {\n        for(i = [0:5]) {\n            translate([i*offset/5-offset/2, hull_width*0.75/2, 0]) \n                cylinder(h=5, d=1);\n            translate([i*offset/5-offset/2, -hull_width*0.75/2, 0]) \n                cylinder(h=5, d=1);\n        }\n        // Top rail\n        translate([0, hull_width*0.75/2, 5]) \n            cube([offset+2, 1, 1], center=true);\n        translate([0, -hull_width*0.75/2, 5]) \n            cube([offset+2, 1, 1], center=true);\n    }\n}\n\nmodule mast() {\n    // Main mast with radar\n    translate([hull_length*0.3, 0, hull_height*0.9+12]) {\n        cylinder(h=20, d=2);\n        translate([0, 0, 20]) \n            sphere(d=3);\n        // Radar dome\n        translate([3, 0, 18]) \n            scale([1, 0.5, 0.5]) sphere(d=4);\n    }\n}\n\nmodule life_rafts() {\n    // Life rafts on sides\n    translate([hull_length*0.7, hull_width*0.4, hull_height*0.9+3]) {\n        rotate([90, 0, 0]) \n            cylinder(h=5, d=4);\n    }\n    translate([hull_length*0.7, -hull_width*0.4, hull_height*0.9+3]) {\n        rotate([90, 0, 0]) \n            cylinder(h=5, d=4);\n    }\n}\n\nmodule propeller() {\n    // Simple propeller at stern\n    translate([-hull_length*0.45, 0, -hull_height*0.5]) {\n        rotate([0, 90, 0]) {\n            cylinder(h=2, d=6);\n            for(i = [0:120:359]) {\n                rotate([0, 0, i]) \n                    translate([3, 0, 0]) \n                        cube([3, 0.5, 1], center=true);\n            }\n        }\n    }\n}\n\nmodule exhaust() {\n    // Exhaust stack\n    translate([hull_length*0.6, 0, hull_height*0.9+10]) {\n        cylinder(h=8, d=3);\n        translate([0, 0, 8]) \n            cylinder(h=1, d=4);\n    }\n}\n\n// Assemble the boat\nunion() {\n    hull();\n    deck();\n    cabin();\n    wheelhouse();\n    railings();\n    mast();\n    life_rafts();\n    exhaust();\n    propeller();\n}",
    "renders": true
  },
  {
    "vehicle": "fishingboat",
    "openscad_code": "// Fishing Boat - Realistic Medium Complexity\n// Designed for 3D printing, approximately 80mm length\n\n// Hull parameters\nhull_length = 80;\nhull_width = 25;\nhull_height = 12;\nwall_thickness = 2;\n\n// Cabin parameters\ncabin_width = 18;\ncabin_length = 22;\ncabin_height = 15;\n\n// Wheelhouse\nwheelhouse_width = 14;\nwheelhouse_length = 18;\nwheelhouse_height = 12;\n\n// Mast and rigging\nmast_height = 35;\nmast_diameter = 2;\n\n// Hull construction\nmodule hull() {\n    difference() {\n        // Main hull shape - pointed bow\n        hull_shape();\n        \n        // Hollow out interior\n        translate([wall_thickness, wall_thickness, -hull_height + wall_thickness])\n            scale([1 - (2*wall_thickness)/hull_length, 1 - (2*wall_thickness)/hull_width, 1])\n            hull_shape();\n        \n        // Drain hole\n        translate([hull_length/2 - 5, 0, -hull_height])\n            rotate([90, 0, 0])\n            cylinder(h=wall_thickness*2, d=4, $fn=20);\n    }\n}\n\nmodule hull_shape() {\n    linear_extrude(height=hull_height, center=false, convexity=10) {\n        polygon(points=[\n            [0, 0],\n            [hull_length * 0.15, hull_width/2],\n            [hull_length * 0.85, hull_width/2],\n            [hull_length, hull_width * 0.3],\n            [hull_length, 0],\n            [hull_length, -hull_width * 0.3],\n            [hull_length * 0.85, -hull_width/2],\n            [hull_length * 0.15, -hull_width/2]\n        ]);\n    }\n}\n\n// Cabin structure\nmodule cabin() {\n    translate([hull_length * 0.6, 0, 0]) {\n        difference() {\n            // Main cabin\n            cube([cabin_length, cabin_width, cabin_height], center=true);\n            \n            // Door\n            translate([cabin_length/2 - 1, 0, -cabin_height/2 + 5])\n                cube([2, 6, 8]);\n            \n            // Windows\n            for(i = [-1, 1]) {\n                translate([cabin_length/2 - 3, i * cabin_width/4, cabin_height/4])\n                    cube([4, 4, 4]);\n                translate([0, i * cabin_width/4, cabin_height/4])\n                    cube([4, 4, 4]);\n            }\n        }\n        \n        // Cabin roof\n        translate([0, 0, cabin_height/2 + 1])\n            cube([cabin_length + 2, cabin_width + 2, 2], center=true);\n    }\n}\n\n// Wheelhouse\nmodule wheelhouse() {\n    translate([hull_length * 0.3, 0, cabin_height/2 + 2]) {\n        difference() {\n            cube([wheelhouse_length, wheelhouse_width, wheelhouse_height], center=true);\n            \n            // Windshield\n            translate([wheelhouse_length/2 - 1, 0, 0])\n                cube([2, wheelhouse_width - 4, wheelhouse_height - 4], center=true);\n            \n            // Side windows\n            for(i = [-1, 1]) {\n                translate([0, i * wheelhouse_width/2 + 1, 0])\n                    cube([wheelhouse_length - 4, 2, wheelhouse_height - 4], center=true);\n            }\n        }\n        \n        // Wheelhouse roof\n        translate([0, 0, wheelhouse_height/2 + 1])\n            cube([wheelhouse_length + 2, wheelhouse_width + 2, 2], center=true);\n    }\n}\n\n// Mast with rigging\nmodule mast() {\n    translate([hull_length * 0.85, 0, 0]) {\n        // Main mast\n        cylinder(h=mast_height, d=mast_diameter, center=false);\n        \n        // Cross beam\n        translate([0, 0, mast_height * 0.7])\n            rotate([90, 0, 0])\n            cylinder(h=20, d=1.5, center=true);\n        \n        // Radar dome\n        translate([0, 0, mast_height * 0.9])\n            sphere(d=4);\n        \n        // Flag\n        translate([0, 0, mast_height + 1])\n            rotate([90, 0, 0])\n            cube([8, 5, 1]);\n    }\n}\n\n// Fishing equipment\nmodule fishing_gear() {\n    // Net winch\n    translate([hull_length * 0.7, cabin_width/2 + 3, 0])\n        rotate([90, 0, 0])\n        cylinder(h=5, d=4);\n    \n    translate([hull_length * 0.7, cabin_width/2 + 3, 0])\n        rotate([90, 0, 90])\n        cylinder(h=5, d=4);\n    \n    // Rod holders\n    for(i = [0, 1]) {\n        translate([hull_length * 0.75, (-1)^i * (hull_width/2 - 2), 5])\n            rotate([45, 0, 0])\n            cylinder(h=4, d=2);\n    }\n}\n\n// Life ring\nmodule life_ring() {\n    translate([hull_length * 0.5, hull_width/2 + 1, cabin_height/2]) {\n        rotate([90, 0, 0])\n        difference() {\n            cylinder(h=2, d=6);\n            cylinder(h=3, d=3);\n        }\n    }\n}\n\n// Bow rail\nmodule bow_rail() {\n    for(i = [-1, 1]) {\n        translate([hull_length * 0.1, i * hull_width/2, 4])\n            cylinder(h=6, d=1);\n    }\n    \n    translate([hull_length * 0.1, 0, 7])\n        cylinder(h=hull_width, d=1, center=true);\n}\n\n// Main assembly\nunion() {\n    hull();\n    cabin();\n    wheelhouse();\n    mast();\n    fishing_gear();\n    life_ring();\n    bow_rail();\n}",
    "renders": true
  },
  {
    "vehicle": "sportfisher",
    "openscad_code": "// Sportfisher Boat - Realistic Style, Medium Complexity\n// Designed for 3D printing with no overhangs and proper wall thickness\n\nhull_length = 90;\nhull_width = 25;\nhull_height = 12;\ndeck_height = 8;\n\nmodule hull() {\n    difference() {\n        // Main hull shape\n        hull_shape();\n        \n        // Hull interior cavity\n        translate([5, 0, -1])\n        scale([0.85, 0.8, 0.9])\n        hull_shape();\n    }\n}\n\nmodule hull_shape() {\n    // Create hull with rounded bottom\n    hull() {\n        // Front\n        translate([hull_length/2, 0, 0])\n        scale([1, 0.8, 1])\n        sphere(d=hull_width);\n        \n        // Rear\n        translate([-hull_length/2, 0, 0])\n        cube([hull_width*0.8, hull_width, hull_height*2], center=true);\n        \n        // Top\n        translate([0, 0, hull_height])\n        cube([hull_length, hull_width, hull_height], center=true);\n        \n        // Bottom\n        translate([0, 0, -hull_height/2])\n        cube([hull_length, hull_width, hull_height/2], center=true);\n    }\n}\n\nmodule deck() {\n    // Main deck\n    translate([0, 0, deck_height])\n    cube([hull_length-10, hull_width-4, 2], center=true);\n    \n    // Cabin base\n    translate([hull_length/4, 0, deck_height+2])\n    cube([hull_length/3, hull_width-8, 8], center=true);\n}\n\nmodule cabin() {\n    cabin_width = hull_width-10;\n    \n    // Cabin walls\n    translate([hull_length/4, 0, deck_height+10])\n    cube([hull_length/3-2, cabin_width-2, 8], center=true);\n    \n    // Cabin roof\n    translate([hull_length/4, 0, deck_height+18])\n    cube([hull_length/3, cabin_width-4, 1.5], center=true);\n    \n    // Windshield\n    translate([hull_length/3+5, 0, deck_height+12])\n    rotate([60, 0, 0])\n    cube([hull_length/6, cabin_width-6, 1], center=true);\n}\n\nmodule tower() {\n    // Tower legs\n    for(x = [-5, 5])\n    for(y = [-8, 8]) {\n        translate([x, y, deck_height+18])\n        cylinder(h=15, d=2);\n    }\n    \n    // Tower platform\n    translate([0, 0, deck_height+33])\n    cube([hull_length/4, hull_width/2, 1.5], center=true);\n}\n\nmodule outboards() {\n    // Twin outboards\n    for(offset = [-6, 6]) {\n        translate([-hull_length/2+2, offset, 0])\n        rotate([90, 0, 0])\n        cylinder(h=10, d=4);\n        \n        // Engine cowling\n        translate([-hull_length/2+2, offset, 8])\n        sphere(d=5);\n    }\n}\n\nmodule railings() {\n    // Bow rail\n    for(x = [hull_length/2-20:5:hull_length/2-5])\n    translate([x, 0, deck_height+2])\n    cylinder(h=4, d=1.5);\n    \n    // Side rails\n    for(side = [-1, 1])\n    for(x = [-hull_length/2+20:10:hull_length/2-20])\n    translate([x, side*(hull_width/2-1), deck_height+2])\n    cylinder(h=4, d=1.5);\n}\n\nmodule fishing_rod_holders() {\n    // Rod holders along sides\n    for(side = [-1, 1])\n    for(x = [-hull_length/4, 0, hull_length/4])\n    translate([x, side*(hull_width/2-2), deck_height+2])\n    rotate([45*side, 0, 0])\n    cylinder(h=4, d=2);\n}\n\n// Main assembly\nunion() {\n    hull();\n    deck();\n    cabin();\n    tower();\n    outboards();\n    railings();\n    fishing_rod_holders();\n}",
    "renders": true
  }
]