[
  {
    "vehicle": "sedan",
    "openscad_code": "// Medium-complexity 3D-printable sedan\n// Overall scale: 90 mm long, 40 mm wide, 30 mm tall\nscale_factor = 1;\n\n// Body shell\nmodule body_shell() {\n    difference() {\n        // Main body block\n        hull() {\n            translate([-42, -18, 0]) cube([84, 36, 20]);\n            translate([-40, -16, 15]) cube([80, 32, 10]);\n            translate([35, -12, 22]) cube([10, 24, 8]);\n            translate([-45, -12, 22]) cube([10, 24, 8]);\n        }\n        // Cabin cutout\n        translate([-35, -14, 18]) cube([70, 28, 15]);\n        // Wheel arches\n        for (x = [-28, 28]) {\n            translate([x, -20, 0]) rotate([0, 0, 0]) cylinder(h = 20, r = 8, $fn = 16);\n            translate([x,  20, 0]) rotate([0, 0, 0]) cylinder(h = 20, r = 8, $fn = 16);\n        }\n    }\n}\n\n// Hood and trunk\nmodule hood_trunk() {\n    // Hood\n    translate([-41, -17, 10]) cube([30, 34, 8]);\n    // Trunk\n    translate([11, -17, 10]) cube([30, 34, 8]);\n}\n\n// Roof\nmodule roof() {\n    translate([-30, -14, 25]) cube([60, 28, 6]);\n}\n\n// Windows\nmodule windows() {\n    color(\"lightblue\") {\n        // Windshield\n        translate([-34, -13, 19]) cube([0.5, 26, 12]);\n        // Rear window\n        translate([33.5, -13, 19]) cube([0.5, 26, 12]);\n        // Side windows (front)\n        for (x = [-20, 20]) {\n            translate([x, -14.5, 19]) cube([14, 0.5, 10]);\n            translate([x,  14, 19]) cube([14, 0.5, 10]);\n        }\n    }\n}\n\n// Wheels\nmodule wheels() {\n    for (x = [-28, 28]) {\n        for (y = [-18, 18]) {\n            translate([x, y, -2]) {\n                difference() {\n                    cylinder(h = 6, r = 8, $fn = 32);\n                    cylinder(h = 7, r = 4, $fn = 32);\n                }\n            }\n        }\n    }\n}\n\n// Headlights\nmodule headlights() {\n    for (x = [-38, -30]) {\n        translate([x, -15, 12]) cube([4, 2, 2]);\n        translate([x, 13, 12]) cube([4, 2, 2]);\n    }\n}\n\n// Taillights\nmodule taillights() {\n    for (x = [30, 38]) {\n        translate([x, -15, 12]) cube([4, 2, 2]);\n        translate([x, 13, 12]) cube([4, 2, 2]);\n    }\n}\n\n// Side mirrors\nmodule mirrors() {\n    for (y = [-15, 15]) {\n        translate([-10, y, 22]) {\n            cube([3, 2, 1.5]);\n            translate([1.5, 0, 0]) rotate([0, y > 0 ? 30 : -30, 0]) cube([2, 1.5, 3]);\n        }\n    }\n}\n\n// License plates\nmodule plates() {\n    translate([-43, -6, 8]) cube([2, 12, 1]);\n    translate([41, -6, 8]) cube([2, 12, 1]);\n}\n\n// Exhaust pipe\nmodule exhaust() {\n    translate([42, 8, 4]) rotate([0, 90, 0]) cylinder(h = 10, r = 2, $fn = 16);\n}\n\n// Assemble the sedan\nscale([scale_factor, scale_factor, scale_factor]) {\n    union() {\n        body_shell();\n        hood_trunk();\n        roof();\n        windows();\n        headlights();\n        taillights();\n        mirrors();\n        plates();\n        exhaust();\n    }\n    wheels();\n}",
    "renders": true
  },
  {
    "vehicle": "coupe",
    "openscad_code": "// Realistic Medium-complexity 3D-printable coupe (≈85 mm long)\n\n$fn = 36;               // Smooth curves for printing\n\nwheel_d = 18;\nwheel_w = 8;\nbody_l = 85;\nbody_w = 40;\nbody_h = 22;\n\n// Printable base plate\nmodule base_plate() {\n    difference() {\n        translate([0,0,-1])\n            cube([body_l+4,body_w+4,2], center=true);\n        translate([0,0,0.5])\n            cube([body_l,body_w,2], center=true);\n    }\n}\n\n// Wheel module (no overhangs)\nmodule wheel() {\n    rotate([0,90,0])\n    difference() {\n        cylinder(d=wheel_d, h=wheel_w, center=true);\n        translate([0,0,-wheel_w/2-0.5])\n            cylinder(d=wheel_d-6, h=wheel_w+1, center=true);\n    }\n}\n\n// Side mirrors (printable)\nmodule mirror() {\n    translate([0,-6,0])\n    rotate([0,20,0])\n    union() {\n        cube([3,2,3]);\n        translate([1.5,0,-1])\n            sphere(d=4);\n    }\n}\n\n// Main body\nmodule body() {\n    difference() {\n        // Basic hull\n        hull() {\n            translate([-body_l/2+8, 0, body_h/2])\n                cube([body_l-16, body_w-8, body_h], center=true);\n            translate([-body_l/2+15, 0, body_h/2+8])\n                cube([body_l-30, body_w-12, 8], center=true);\n        }\n        \n        // Cabin cavity\n        translate([-body_l/2+25, 0, body_h/2+10])\n            cube([body_l-50, body_w-20, 12], center=true);\n            \n        // Windows\n        translate([-body_l/2+30, 0, body_h/2+11])\n            cube([body_l-60, body_w-16, 8], center=true);\n    }\n}\n\n// Hood slope\nmodule hood() {\n    translate([-body_l/2+5, 0, body_h/2+2])\n        rotate([0,0,0])\n        linear_extrude(height=10, scale=0.5)\n        square([25, body_w-10], center=true);\n}\n\n// Lights\nmodule lights() {\n    for(x=[-1,1])\n        translate([x*body_l/2-4, 0, body_h/2])\n            sphere(d=6);\n}\n\n// Exhausts\nmodule exhaust() {\n    for(side=[-1,1])\n        translate([-body_l/2+3, side*(body_w/2-2), -2])\n            rotate([90,0,0])\n            cylinder(d1=4, d2=3, h=8);\n}\n\n// Roof\nmodule roof() {\n    translate([-5,0,body_h/2+16])\n        rotate([0,0,0])\n        hull() {\n            cube([30, body_w-16, 2], center=true);\n            translate([5,0,8])\n                cube([20, body_w-20, 2], center=true);\n        }\n}\n\n// Assemble the coupe\nunion() {\n    base_plate();\n    \n    // Wheels\n    for(x=[-1,1])\n        for(y=[-1,1])\n            translate([x*28, y*22, 0])\n                wheel();\n    \n    body();\n    roof();\n    hood();\n    lights();\n    exhaust();\n    \n    // Side mirrors\n    translate([body_l/2-20, body_w/2+1, body_h/2+8])\n        mirror();\n    translate([body_l/2-20, -body_w/2-1, body_h/2+8])\n        mirror();\n}",
    "renders": true
  },
  {
    "vehicle": "hatchback",
    "openscad_code": "// Realistic Medium-Complexity 3D-Printable Hatchback\n// Approx 70 mm long, 30 mm wide, 25 mm tall\n// Wall thickness 1.2 mm for reliable printing\n\n$fa = 2; $fs = 0.5;\n\nmodule body_shell() {\n    // Main body with slight wedge shape\n    hull() {\n        translate([0, 0, 5]) cube([40, 28, 10], center = true);\n        translate([8, 0, 8]) cube([42, 26, 12], center = true);\n    }\n}\n\nmodule roof() {\n    // Sloping roof\n    translate([3, 0, 14.5])\n    rotate([0, -4, 0])\n    cube([38, 26, 2.4], center = true);\n}\n\nmodule hood() {\n    // Curved hood by stacking cylinders\n    for (i = [-10:2:10])\n        translate([i, 0, 12 + 0.015 * i * i])\n        rotate([90, 0, 0])\n        cylinder(h = 1.2, r = 13 - 0.3 * abs(i), center = true);\n}\n\nmodule hatch() {\n    // Rear hatch with slight rake\n    translate([-17, 0, 10.5])\n    rotate([60, 0, 0])\n    cube([17, 25, 1.2], center = true);\n}\n\nmodule side_windows() {\n    // Front and rear side windows\n    translate([5, 14.1, 12])\n    cube([12, 0.1, 7], center = true);\n    translate([-9, 14.1, 11])\n    cube([14, 0.1, 6], center = true);\n}\n\nmodule windshield() {\n    // Front windshield\n    translate([13, 0, 13])\n    rotate([70, 0, 0])\n    cube([20, 27, 0.1], center = true);\n}\n\nmodule rear_windshield() {\n    // Rear windshield\n    translate([-14, 0, 12])\n    rotate([110, 0, 0])\n    cube([18, 25, 0.1], center = true);\n}\n\nmodule wheel(pos, angle = 0) {\n    // Wheel with tire and rim\n    translate(pos)\n    rotate([0, 0, angle])\n    difference() {\n        // Tire\n        cylinder(h = 4.8, r = 6, center = true);\n        // Rim cavity\n        translate([0, 0, -0.1])\n        cylinder(h = 5, r = 4, center = true);\n    }\n}\n\nmodule axles() {\n    // Simple axles connecting wheels\n    translate([10, 0, 3])\n    rotate([0, 90, 0])\n    cylinder(h = 34, r = 1.2, center = true);\n    translate([-10, 0, 3])\n    rotate([0, 90, 0])\n    cylinder(h = 34, r = 1.2, center = true);\n}\n\nmodule bumper(loc) {\n    // Front or rear bumper\n    translate(loc)\n    cube([1.2, 28, 4], center = true);\n}\n\nmodule headlights() {\n    // Headlight clusters\n    translate([20.5, 8, 8])\n    cube([1.2, 6, 4], center = true);\n    translate([20.5, -8, 8])\n    cube([1.2, 6, 4], center = true);\n}\n\nmodule taillights() {\n    // Taillight clusters\n    translate([-20.5, 8, 8])\n    cube([1.2, 5, 3], center = true);\n    translate([-20.5, -8, 8])\n    cube([1.2, 5, 3], center = true);\n}\n\nmodule exhaust_pipe() {\n    // Single exhaust tip\n    translate([-21, 10, 2])\n    rotate([90, 0, 0])\n    cylinder(h = 6, r = 1.2, center = true);\n}\n\n// Assembly\nunion() {\n    difference() {\n        // Main body union\n        union() {\n            body_shell();\n            roof();\n            hood();\n            hatch();\n            windshield();\n            rear_windshield();\n            side_windows();\n            bumper([21, 0, 2]);\n            bumper([-21, 0, 2]);\n        }\n        // Hollow interior\n        translate([0, 0, 5])\n        scale([0.8, 0.8, 0.8])\n        cube([45, 30, 18], center = true);\n    }\n\n    // External parts\n    wheel([10, 15, 3]);\n    wheel([10, -15, 3]);\n    wheel([-10, 15, 3]);\n    wheel([-10, -15, 3]);\n    axles();\n    headlights();\n    taillights();\n    exhaust_pipe();\n}",
    "renders": true
  },
  {
    "vehicle": "suv",
    "openscad_code": "// Realistic SUV - Medium Complexity\n// Designed for 3D printing (no overhangs, 2mm wall thickness)\n\nmodule suv_body() {\n    // Main body\n    difference() {\n        // Main hull\n        hull() {\n            translate([-15, -20, 0]) cube([30, 40, 30]);\n            translate([-10, -18, 30]) cube([20, 36, 25]);\n        }\n        \n        // Wheel wells\n        for(side = [-1, 1]) {\n            translate([side * 18, -15, 5]) rotate([0, 90, 0]) \n                cylinder(h=15, r=9, $fn=32);\n            translate([side * 18, 15, 5]) rotate([0, 90, 0]) \n                cylinder(h=15, r=9, $fn=32);\n        }\n    }\n}\n\nmodule suv_windows() {\n    // Windshield\n    translate([0, -16, 33]) rotate([30, 0, 0])\n        cube([14, 1, 15], center=true);\n    \n    // Rear window\n    translate([0, 16, 33]) rotate([-30, 0, 0])\n        cube([14, 1, 15], center=true);\n    \n    // Side windows\n    for(side = [-1, 1]) {\n        translate([side * 12, 0, 35]) rotate([0, 0, 30 * side])\n            cube([20, 1, 12], center=true);\n    }\n}\n\nmodule suv_wheels() {\n    module wheel() {\n        difference() {\n            // Tire\n            cylinder(h=8, r=9, $fn=32);\n            // Rim\n            translate([0, 0, -1]) cylinder(h=10, r=7, $fn=32);\n            // Spokes\n            for(i = [0:3]) {\n                rotate([0, 0, i * 90])\n                    translate([0, 5, 4]) cube([1, 2, 8], center=true);\n            }\n        }\n    }\n    \n    // Front wheels\n    translate([-18, -15, 0]) wheel();\n    translate([18, -15, 0]) mirror([1, 0, 0]) wheel();\n    \n    // Rear wheels\n    translate([-18, 15, 0]) wheel();\n    translate([18, 15, 0]) mirror([1, 0, 0]) wheel();\n}\n\nmodule suv_details() {\n    // Front grille\n    translate([0, -19.5, 20]) cube([12, 1, 8], center=true);\n    \n    // Headlights\n    for(side = [-1, 1]) {\n        translate([side * 10, -19.5, 22]) \n            cube([3, 1, 3], center=true);\n    }\n    \n    // Taillights\n    for(side = [-1, 1]) {\n        translate([side * 10, 19.5, 22]) \n            cube([3, 1, 3], center=true);\n    }\n    \n    // Roof rails\n    for(side = [-1, 1]) {\n        hull() {\n            translate([side * 12, -15, 55]) \n                cylinder(h=2, r=1, $fn=16);\n            translate([side * 12, 15, 55]) \n                cylinder(h=2, r=1, $fn=16);\n        }\n    }\n    \n    // Bumpers\n    translate([0, -20, 10]) cube([20, 2, 8], center=true);\n    translate([0, 20, 10]) cube([20, 2, 8], center=true);\n}\n\n// Assemble the SUV\nmodule suv() {\n    union() {\n        suv_body();\n        suv_windows();\n        suv_wheels();\n        suv_details();\n    }\n}\n\n// Scale to 80mm length\nscale(0.8) suv();",
    "renders": true
  },
  {
    "vehicle": "truck",
    "openscad_code": "// Realistic medium-complexity 3D-printable truck (approx. 85 mm long)\n\n$fn = 36; // Smoother curves for realism\nwall = 2;  // 3D-printable wall thickness\n\nmodule wheel(r=9, w=6) {\n    difference() {\n        cylinder(h=w, r=r, center=true);\n        cylinder(h=w+1, r=r-wall, center=true); // Hollow tire\n    }\n}\n\nmodule axle() {\n    cylinder(h=30, r=2, center=true);\n}\n\nmodule chassis() {\n    // Main frame\n    translate([0, 0, 8])\n    difference() {\n        cube([80, 30, 16], center=true);\n        translate([0, 0, -1])\n        cube([76, 26, 14], center=true); // Hollow out\n    }\n\n    // Front bumper\n    translate([39, 0, 8])\n    cube([4, 28, 12], center=true);\n\n    // Rear bumper\n    translate([-39, 0, 8])\n    cube([4, 28, 12], center=true);\n}\n\nmodule cab() {\n    translate([20, 0, 22])\n    difference() {\n        cube([30, 28, 28], center=true);\n        translate([0, 0, -1])\n        cube([26, 24, 26], center=true); // Hollow cab\n    }\n\n    // Windshield slope\n    translate([30, 0, 36])\n    rotate([0, 30, 0])\n    cube([20, 26, 2], center=true);\n\n    // Roof\n    translate([20, 0, 40])\n    cube([28, 24, 4], center=true);\n\n    // Side mirrors\n    for(side=[-1,1]) {\n        translate([32, side*15, 28])\n        cube([4, 2, 6], center=true);\n        translate([34, side*18, 28])\n        sphere(r=2);\n    }\n}\n\nmodule bed() {\n    translate([-25, 0, 20])\n    difference() {\n        cube([50, 32, 12], center=true);\n        translate([0, 0, -1])\n        cube([46, 28, 10], center=true); // Hollow bed\n    }\n\n    // Bed sides\n    translate([-25, 16, 28])\n    cube([50, 2, 8], center=true);\n    translate([-25, -16, 28])\n    cube([50, 2, 8], center=true);\n\n    // Tailgate (vertical)\n    translate([-49, 0, 26])\n    cube([2, 28, 20], center=true);\n}\n\nmodule headlights() {\n    for(side=[-1,1]) {\n        translate([40, side*10, 16])\n        sphere(r=3);\n        translate([40, side*10, 16])\n        sphere(r=2.5); // Inner lens\n    }\n}\n\nmodule exhaust() {\n    translate([-10, 18, 24])\n    cylinder(h=30, r=2);\n    translate([-10, 18, 54])\n    sphere(r=3);\n}\n\n// Assemble truck\nunion() {\n    chassis();\n    cab();\n    bed();\n    headlights();\n    exhaust();\n\n    // Wheels and axles\n    for(side=[-1,1]) {\n        // Front axle\n        translate([20, side*18, 8])\n        wheel();\n        translate([20, side*18, 8])\n        rotate([90,0,0])\n        axle();\n\n        // Rear axle\n        translate([-20, side*18, 8])\n        wheel();\n        translate([-20, side*18, 8])\n        rotate([90,0,0])\n        axle();\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "van",
    "openscad_code": "// Medium-complexity realistic van\n// Overall size ~80 mm (L) × 30 mm (W) × 30 mm (H)\n\n$fn = 36;\n\nmodule wheel(r=5, w=3) {\n    // Tire + rim\n    difference() {\n        cylinder(h=w, r=r);          // tire\n        cylinder(h=w+0.1, r=r-1.5);  // rim cavity\n    }\n}\n\nmodule wheels() {\n    // Front left\n    translate([-25, 15, -5]) wheel();\n    // Front right\n    translate([-25, -15, -5]) wheel();\n    // Rear left\n    translate([25, 15, -5]) wheel();\n    // Rear right\n    translate([25, -15, -5]) wheel();\n}\n\nmodule body() {\n    // Main lower box\n    hull() {\n        translate([-30, 0, 0])\n            cube([60, 30, 15], center=true);\n        translate([-30, 0, 10])\n            cube([60, 30, 10], center=true);\n    }\n\n    // Cabin roof\n    hull() {\n        translate([-20, 0, 12])\n            cube([25, 28, 8], center=true);\n        translate([-5, 0, 15])\n            cube([20, 26, 6], center=true);\n    }\n}\n\nmodule windows() {\n    color(\"lightblue\") {\n        // Windshield\n        translate([-28, 0, 13])\n            cube([0.1, 22, 10], center=true);\n        // Side windows\n        for(y=[8,-8])\n            translate([-15, y, 13])\n                cube([20, 0.1, 8], center=true);\n    }\n}\n\nmodule doors() {\n    // Driver door seam\n    translate([-15, 15, 7.5])\n        cube([30, 0.2, 15], center=true);\n    // Sliding door seam\n    translate([5, 15, 7.5])\n        cube([20, 0.2, 15], center=true);\n}\n\nmodule headlights() {\n    // Headlights\n    translate([-30, 8, 5])\n        cube([1, 4, 3], center=true);\n    translate([-30, -8, 5])\n        cube([1, 4, 3], center=true);\n    // Taillights\n    translate([30, 8, 5])\n        cube([1, 4, 3], center=true);\n    translate([30, -8, 5])\n        cube([1, 4, 3], center=true);\n}\n\nmodule grille() {\n    // Front grille\n    translate([-30, 0, 3])\n        cube([0.5, 20, 6], center=true);\n    // Horizontal bars\n    for(z=[1:2:5])\n        translate([-30.2, 0, z])\n            cube([0.1, 18, 0.5], center=true);\n}\n\nmodule mirrors() {\n    // Side mirrors\n    translate([-25, 16, 10])\n        cube([2, 4, 2], center=true);\n    translate([-25, -16, 10])\n        cube([2, 4, 2], center=true);\n}\n\n// Assembly\nunion() {\n    body();\n    windows();\n    doors();\n    headlights();\n    grille();\n    mirrors();\n    wheels();\n}",
    "renders": true
  },
  {
    "vehicle": "convertible",
    "openscad_code": "// Convertible Car - Medium Complexity\n// Scaled for 3D printing (approx 80mm length)\n\n// Global parameters\n$fn = 32;\nscale_factor = 0.4;  // Overall scaling for printing\n\nmodule car_body() {\n    // Main chassis\n    difference() {\n        union() {\n            // Lower body\n            translate([-15, -20, 0])\n                cube([80, 40, 15], center=false);\n                \n            // Upper body slopes\n            translate([-15, -20, 15])\n                cube([80, 40, 10], center=false);\n                \n            // Hood\n            translate([50, -15, 15])\n                cube([30, 30, 8], center=false);\n                \n            // Trunk area\n            translate([-35, -15, 15])\n                cube([20, 30, 8], center=false);\n        }\n        \n        // Wheel wells\n        translate([30, -20, 0])\n            cylinder(h=30, r=10);\n        translate([30, 20, 0])\n            cylinder(h=30, r=10);\n        translate([-20, -20, 0])\n            cylinder(h=30, r=10);\n        translate([-20, 20, 0])\n            cylinder(h=30, r=10);\n            \n        // Windshield area\n        translate([20, -18, 23])\n            cube([30, 36, 15]);\n            \n        // Interior space\n        translate([-10, -17, 15])\n            cube([60, 34, 20]);\n}\n\nmodule wheels() {\n    // Front left\n    translate([30, -20, 0])\n        rotate([90, 0, 0])\n            cylinder(h=8, r=10);\n            \n    // Front right\n    translate([30, 20, 0])\n        rotate([90, 0, 0])\n            cylinder(h=8, r=10);\n            \n    // Rear left\n    translate([-20, -20, 0])\n        rotate([90, 0, 0])\n            cylinder(h=8, r=10);\n            \n    // Rear right\n    translate([-20, 20, 0])\n        rotate([90, 0, 0])\n            cylinder(h=8, r=10);\n}\n\nmodule windshield() {\n    // Windshield frame\n    difference() {\n        translate([35, -18, 23])\n            cube([25, 36, 2]);\n        translate([35, -16, 24])\n            cube([25, 32, 2]);\n    }\n}\n\nmodule seats() {\n    // Driver seat\n    translate([10, -12, 15])\n        cube([15, 12, 10]);\n        \n    // Passenger seat\n    translate([10, 0, 15])\n        cube([15, 12, 10]);\n}\n\nmodule steering_wheel() {\n    translate([25, -6, 25])\n        rotate([90, 0, 0])\n            cylinder(h=8, r=4);\n}\n\nmodule headlights() {\n    // Left headlight\n    translate([65, -12, 18])\n        sphere(r=4);\n        \n    // Right headlight\n    translate([65, 12, 18])\n        sphere(r=4);\n}\n\nmodule taillights() {\n    // Left taillight\n    translate([-25, -12, 18])\n        sphere(r=3);\n        \n    // Right taillight\n    translate([-25, 12, 18])\n        sphere(r=3);\n}\n\n// Assemble the car\nscale([scale_factor, scale_factor, scale_factor]) {\n    union() {\n        car_body();\n        wheels();\n        windshield();\n        seats();\n        steering_wheel();\n        headlights();\n        taillights();\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "wagon",
    "openscad_code": "// Wagon.scad\n// Realistic-style medium-complexity wagon for 3D printing\n// Overall footprint ~70 x 40 x 35 mm\n\n// Parameters\nwheel_d = 18;\nwheel_w = 4;\naxle_d = 4;\nbody_l = 55;\nbody_w = 35;\nbody_h = 20;\nwall_t = 2;\nfloor_t = 2;\n\nmodule wheel() {\n    // Tire\n    difference() {\n        cylinder(d=wheel_d, h=wheel_w, $fn=48);\n        translate([0,0,-0.1])\n            cylinder(d=wheel_d-wheel_w, h=wheel_w+0.2, $fn=48);\n    }\n    // Spokes\n    for(a=[0:60:359])\n        rotate([0,0,a])\n            translate([0, wheel_w/2, 0])\n                rotate([90,0,0])\n                    cube([wheel_w*0.8, 1.5, wheel_d*0.35], center=true);\n}\n\nmodule axle() {\n    // Axle rod\n    rotate([90,0,0])\n        cylinder(d=axle_d, h=body_w+wheel_w*2+4, $fn=16);\n}\n\nmodule body() {\n    difference() {\n        // Outer shell\n        translate([0,0,body_h/2])\n            cube([body_l, body_w, body_h], center=true);\n        // Hollow inside\n        translate([0,0,(body_h-floor_t)/2+floor_t])\n            cube([body_l-wall_t*2, body_w-wall_t*2, body_h-floor_t], center=true);\n    }\n    // Floor\n    translate([0,0,floor_t/2])\n        cube([body_l-wall_t*2, body_w-wall_t*2, floor_t], center=true);\n    // Front wall lower cutout\n    translate([body_l/2-wall_t/2, 0, body_h/4])\n        cube([wall_t, body_w-wall_t*2, body_h/2], center=true);\n}\n\nmodule handle() {\n    // Handle bar\n    translate([-body_l/2-20, 0, body_h/4])\n        rotate([0,0,30])\n            cylinder(d=3, h=20, $fn=12);\n    // Handle grip\n    translate([-body_l/2-25, 0, body_h/4+8])\n        rotate([90,0,0])\n            cylinder(d=5, h=12, center=true, $fn=20);\n    // Upright post\n    translate([-body_l/2, 0, body_h/2])\n        cube([5, 3, 15], center=true);\n}\n\n// Assembly\nunion() {\n    // Wheels and axles\n    translate([body_l/3, 0, 0])\n        axle();\n    translate([body_l/3, -body_w/2-wheel_w/2-2, wheel_d/2])\n        wheel();\n    translate([body_l/3,  body_w/2+wheel_w/2+2, wheel_d/2])\n        wheel();\n    \n    translate([-body_l/3, 0, 0])\n        axle();\n    translate([-body_l/3, -body_w/2-wheel_w/2-2, wheel_d/2])\n        wheel();\n    translate([-body_l/3,  body_w/2+wheel_w/2+2, wheel_d/2])\n        wheel();\n    \n    // Body\n    body();\n    \n    // Handle\n    handle();\n}",
    "renders": true
  },
  {
    "vehicle": "pickup",
    "openscad_code": "// Realistic Pickup Truck - Medium Complexity\n// Dimensions in mm, scaled for 3D printing\nscale_factor = 0.7;\n\nmodule wheel() {\n    // Tire\n    difference() {\n        cylinder(h=8, r=12, $fn=32);\n        translate([0, 0, -0.1])\n            cylinder(h=8.2, r=10, $fn=32);\n    }\n    \n    // Rim\n    color(\"silver\")\n    translate([0, 0, 4])\n        cylinder(h=4, r=9, $fn=6);\n}\n\nmodule wheel_well() {\n    // Wheel arch cutout\n    translate([0, 0, 12])\n        rotate([90, 0, 0])\n            cylinder(h=20, r=14, $fn=32);\n}\n\nmodule cab() {\n    // Main cab body\n    difference() {\n        translate([-30, -25, 12])\n            cube([60, 50, 35]);\n        \n        // Windshield angle\n        translate([-30, -25, 35])\n            rotate([0, -30, 0])\n                cube([40, 50, 20]);\n        \n        // Side windows\n        for(side = [-1, 1]) {\n            translate([-20, side*20, 25])\n                cube([30, 10, 15]);\n        }\n        \n        // Wheel wells\n        for(side = [-1, 1]) {\n            translate([-20, side*22, 0])\n                wheel_well();\n        }\n    }\n    \n    // Roof\n    translate([-30, -20, 42])\n        cube([60, 40, 5]);\n    \n    // Hood\n    translate([30, -20, 22])\n        cube([30, 40, 15]);\n}\n\nmodule bed() {\n    // Bed floor\n    translate([-60, -30, 15])\n        cube([40, 60, 5]);\n    \n    // Bed sides\n    for(side = [-1, 1]) {\n        translate([-60, side*30, 15])\n            cube([40, 5, 20]);\n    }\n    \n    // Bed back\n    translate([-60, -30, 15])\n        cube([5, 60, 20]);\n    \n    // Tailgate\n    rotate([0, 0, 0]) {\n        translate([-65, -30, 15])\n            cube([5, 60, 20]);\n    }\n}\n\nmodule chassis() {\n    // Main frame\n    translate([-35, -30, 0])\n        cube([70, 60, 10]);\n    \n    // Front bumper\n    translate([60, -20, 10])\n        cube([10, 40, 15]);\n    \n    // Rear bumper\n    translate([-70, -20, 10])\n        cube([10, 40, 15]);\n}\n\nmodule lights() {\n    // Headlights\n    for(side = [-1, 1]) {\n        translate([60, side*15, 25])\n            sphere(r=3);\n    }\n    \n    // Taillights\n    for(side = [-1, 1]) {\n        translate([-70, side*15, 25])\n            sphere(r=3);\n    }\n}\n\nmodule mirrors() {\n    for(side = [-1, 1]) {\n        translate([30, side*25, 35])\n            cube([5, 3, 8]);\n    }\n}\n\n// Main assembly\nscale([scale_factor, scale_factor, scale_factor]) {\n    // Base chassis\n    chassis();\n    \n    // Cab\n    cab();\n    \n    // Bed\n    bed();\n    \n    // Wheels\n    for(pos = [[-45, -25], [-45, 25], [45, -25], [45, 25]]) {\n        translate([pos[0], pos[1], 10])\n            wheel();\n    }\n    \n    // Lights\n    lights();\n    \n    // Mirrors\n    mirrors();\n    \n    // Exhaust pipe\n    translate([-50, -35, 20])\n        rotate([90, 0, 0])\n            cylinder(h=30, r=2, $fn=16);\n}",
    "renders": true
  },
  {
    "vehicle": "crossover",
    "openscad_code": "// Crossover SUV - Medium Complexity Realistic Style\n// 3D printable, no overhangs, 90mm length\n\n// Main parameters\nlength = 90;\nwidth = 40;\nheight = 35;\nwheel_d = 20;\nwheel_w = 10;\n\nmodule wheel() {\n    difference() {\n        // Tire\n        cylinder(h=wheel_w, d=wheel_d, $fn=30);\n        \n        // Rim cavity\n        translate([0, 0, -1])\n            cylinder(h=wheel_w+2, d=wheel_d*0.7, $fn=30);\n        \n        // Lug nut holes\n        for(i=[0:4]) {\n            rotate([0, 0, i*72])\n                translate([wheel_d*0.3, 0, wheel_w/2])\n                    cylinder(h=wheel_w+2, d=2, $fn=8);\n        }\n    }\n}\n\nmodule body() {\n    difference() {\n        // Main body with tapered roof\n        union() {\n            // Lower body\n            translate([0, 0, 10])\n                cube([length, width, 15], center=true);\n            \n            // Upper body\n            translate([0, 0, 20])\n                cube([length*0.7, width*0.9, 10], center=true);\n        }\n        \n        // Wheel wells\n        translate([length*0.3, width/2+1, 10])\n            rotate([90, 0, 0])\n                cylinder(h=15, d=wheel_d+4, $fn=30);\n        translate([length*0.3, -width/2-1, 10])\n            rotate([90, 0, 0])\n                cylinder(h=15, d=wheel_d+4, $fn=30);\n        translate([-length*0.3, width/2+1, 10])\n            rotate([90, 0, 0])\n                cylinder(h=15, d=wheel_d+4, $fn=30);\n        translate([-length*0.3, -width/2-1, 10])\n            rotate([90, 0, 0])\n                cylinder(h=15, d=wheel_d+4, $fn=30);\n    }\n}\n\nmodule windows() {\n    // Windshield\n    translate([length*0.35, 0, 25])\n        rotate([0, -15, 0])\n            cube([20, width*0.8, 0.5], center=true);\n    \n    // Rear window\n    translate([-length*0.35, 0, 25])\n        rotate([0, 15, 0])\n            cube([20, width*0.8, 0.5], center=true);\n    \n    // Side windows\n    translate([0, width/2+0.25, 22])\n        cube([length*0.5, 0.5, 8], center=true);\n    translate([0, -width/2-0.25, 22])\n        cube([length*0.5, 0.5, 8], center=true);\n}\n\nmodule details() {\n    // Grille\n    translate([length/2-2, 0, 15])\n        cube([1, width*0.6, 4], center=true);\n    \n    // Headlights\n    translate([length/2-1, width/3, 18])\n        sphere(d=4, $fn=20);\n    translate([length/2-1, -width/3, 18])\n        sphere(d=4, $fn=20);\n    \n    // Taillights\n    translate([-length/2+1, width/3, 18])\n        cube([2, 4, 3], center=true);\n    translate([-length/2+1, -width/3, 18])\n        cube([2, 4, 3], center=true);\n    \n    // Roof rails\n    translate([length*0.2, width/2-3, 30])\n        cube([length*0.3, 2, 2], center=true);\n    translate([length*0.2, -width/2+3, 30])\n        cube([length*0.3, 2, 2], center=true);\n}\n\n// Assembly\nunion() {\n    body();\n    windows();\n    details();\n    \n    // Wheels\n    translate([length*0.3, width/2+wheel_w/2, wheel_d/2])\n        rotate([0, 0, 90])\n            wheel();\n    translate([length*0.3, -width/2-wheel_w/2, wheel_d/2])\n        rotate([0, 0, 90])\n            wheel();\n    translate([-length*0.3, width/2+wheel_w/2, wheel_d/2])\n        rotate([0, 0, 90])\n            wheel();\n    translate([-length*0.3, -width/2-wheel_w/2, wheel_d/2])\n        rotate([0, 0, 90])\n            wheel();\n}",
    "renders": true
  },
  {
    "vehicle": "roadster",
    "openscad_code": "// OpenSCAD Roadster (medium complexity, realistic style)\n\n// Overall scale\nscale_factor = 0.4;\n\n// Main body module\nmodule body() {\n    // Central chassis\n    difference() {\n        union() {\n            // Main body block\n            cube([60, 25, 15], center = true);\n            \n            // Hood section\n            translate([25, 0, 5])\n                cube([35, 22, 10], center = true);\n            \n            // Rear deck\n            translate([-25, 0, 3])\n                cube([25, 22, 8], center = true);\n        }\n        \n        // Cockpit cutout\n        translate([0, 0, 7.5])\n            cube([40, 20, 15], center = true);\n    }\n}\n\n// Wheel module with tire and rim\nmodule wheel() {\n    difference() {\n        // Tire\n        color(\"black\")\n        cylinder(h = 6, r = 10, center = true);\n        \n        // Rim\n        color(\"silver\")\n        translate([0, 0, 1])\n            cylinder(h = 4, r = 7, center = true);\n    }\n}\n\n// Windshield module\nmodule windshield() {\n    difference() {\n        // Main windshield\n        translate([5, 0, 10])\n            rotate([30, 0, 0])\n                cube([20, 22, 2], center = true);\n        \n        // Cutout for seating area\n        translate([5, 0, 8])\n            rotate([30, 0, 0])\n                cube([18, 20, 2.2], center = true);\n    }\n}\n\n// Headlight module\nmodule headlight() {\n    sphere(r = 3);\n}\n\n// Exhaust pipe module\nmodule exhaust() {\n    cylinder(h = 15, r = 2, center = true);\n}\n\n// Side mirror module\nmodule mirror() {\n    translate([0, 5, 0])\n        sphere(r = 2);\n    \n    translate([0, 2.5, 0])\n        cube([2, 5, 1], center = true);\n}\n\n// Main assembly\nscale(scale_factor)\nunion() {\n    // Body\n    color(\"red\")\n    body();\n    \n    // Windshield\n    color(\"lightblue\")\n    windshield();\n    \n    // Wheels\n    translate([20, 13, -8])\n        wheel();\n    translate([20, -13, -8])\n        wheel();\n    translate([-20, 13, -8])\n        wheel();\n    translate([-20, -13, -8])\n        wheel();\n    \n    // Headlights (front)\n    translate([35, 8, -2])\n        color(\"yellow\")\n        headlight();\n    translate([35, -8, -2])\n        color(\"yellow\")\n        headlight();\n    \n    // Taillights (rear)\n    translate([-35, 8, 0])\n        color(\"red\")\n        cube([2, 4, 3], center = true);\n    translate([-35, -8, 0])\n        color(\"red\")\n        cube([2, 4, 3], center = true);\n    \n    // Exhaust pipes\n    translate([-35, 5, -4])\n        rotate([0, 90, 0])\n            color(\"gray\")\n            exhaust();\n    translate([-35, -5, -4])\n        rotate([0, 90, 0])\n            color(\"gray\")\n            exhaust();\n    \n    // Side mirrors\n    translate([10, 12.5, 5])\n        color(\"black\")\n        mirror();\n    translate([10, -12.5, 5])\n        color(\"black\")\n        mirror();\n    \n    // Front grille\n    translate([32, 0, -2])\n        color(\"gray\")\n        cube([2, 16, 4], center = true);\n    \n    // Bumper\n    translate([38, 0, -6])\n        color(\"silver\")\n        cube([4, 24, 3], center = true);\n}",
    "renders": true
  },
  {
    "vehicle": "limousine",
    "openscad_code": "// Realistic Medium-Complexity 3D-Printable Limousine\n// Scale: ~1:160 (N scale), overall length 85 mm, width 32 mm, height 25 mm\n\n$fn = 64;\n\nmodule body_shell() {\n    difference() {\n        // Main body block\n        hull() {\n            translate([-41, -15, 0]) cube([82, 30, 20]);\n            translate([-41, -11, 20]) cube([82, 22, 5]);\n        }\n        // Wheel arches\n        for (x = [-30, 0, 30])\n            translate([x, 16, 8]) rotate([0, 0, 0])\n                cylinder(h = 20, d = 16);\n    }\n}\n\nmodule hood() {\n    // Tapered hood\n    hull() {\n        translate([-41, -15, 0]) cube([20, 30, 20]);\n        translate([-41, -11, 20]) cube([20, 22, 5]);\n        translate([-21, -13, 0]) cube([15, 26, 18]);\n    }\n}\n\nmodule trunk() {\n    // Tapered rear\n    hull() {\n        translate([41, -15, 0]) cube([20, 30, 20]);\n        translate([41, -11, 20]) cube([20, 22, 5]);\n        translate([26, -13, 0]) cube([15, 26, 18]);\n    }\n}\n\nmodule windows() {\n    color(\"lightblue\", 0.5)\n    translate([-40, -10, 20]) cube([80, 20, 3]);\n    // Side windows subdivisions\n    for (x = [-30, -10, 10, 30])\n        translate([x, -10, 20]) cube([1, 20, 3]);\n}\n\nmodule roof() {\n    hull() {\n        translate([-40, -10, 23]) cube([80, 20, 1]);\n    }\n}\n\nmodule wheels() {\n    for (x = [-30, 0, 30]) {\n        // Front wheels\n        translate([x, 18, 8]) rotate([0, 0, 0])\n            cylinder(h = 8, d = 12, center = true);\n        translate([x, 18, 8]) rotate([0, 0, 0])\n            cylinder(h = 6, d = 6, center = true);\n        // Rear wheels\n        translate([x, -18, 8]) rotate([0, 0, 0])\n            cylinder(h = 8, d = 12, center = true);\n        translate([x, -18, 8]) rotate([0, 0, 0])\n            cylinder(h = 6, d = 6, center = true);\n    }\n}\n\nmodule underside_clearance() {\n    // Cutouts for underside wheels and clearance\n    difference() {\n        cube([85, 32, 25]);\n        translate([0, 0, 12]) cube([85, 32, 15]);\n    }\n}\n\nmodule bumpers() {\n    // Front bumper\n    translate([-41, 0, 5]) cube([3, 30, 5]);\n    // Rear bumper\n    translate([38, 0, 5]) cube([3, 30, 5]);\n}\n\nmodule lights() {\n    // Headlights\n    translate([-41, -8, 15]) cube([2, 6, 3]);\n    translate([-41, 8, 15]) cube([2, 6, 3]);\n    // Taillights\n    translate([38, -8, 15]) cube([2, 6, 3]);\n    translate([38, 8, 15]) cube([2, 6, 3]);\n}\n\nunion() {\n    body_shell();\n    hood();\n    trunk();\n    windows();\n    roof();\n    wheels();\n    bumpers();\n    lights();\n}",
    "renders": true
  },
  {
    "vehicle": "minivan",
    "openscad_code": "// Realistic minivan model for 3D printing\n// Medium complexity using only basic OpenSCAD primitives\n// Overall dimensions: 95mm x 45mm x 38mm\n\nmodule wheel(radius, width) {\n    union() {\n        // Tire\n        difference() {\n            cylinder(h=width, r=radius, $fn=30);\n            cylinder(h=width+0.2, r=radius*0.7, $fn=30);\n        }\n        // Rim\n        cylinder(h=width+0.1, r=radius*0.65, $fn=20);\n    }\n}\n\nmodule side_mirror() {\n    union() {\n        // Mirror housing\n        translate([-1, 0, 2]) cube([2, 4, 3]);\n        // Mirror\n        translate([-1.2, 0.5, 2.5]) cube([1.6, 3, 2.4]);\n    }\n}\n\nmodule window_frame(width, height) {\n    difference() {\n        cube([width+2, 1, height+2]);\n        translate([1, -0.5, 1]) cube([width, 2, height]);\n    }\n}\n\n// Main body shell\nunion() {\n    // Lower body\n    translate([5, 5, 5]) cube([85, 35, 15]);\n    \n    // Upper body (tapered)\n    translate([10, 5, 20]) cube([75, 35, 15]);\n    \n    // Hood slope\n    translate([5, 5, 20]) {\n        rotate([0, -10, 0]) {\n            cube([15, 35, 5]);\n        }\n    }\n    \n    // Roof\n    translate([15, 5, 35]) cube([65, 35, 2]);\n    \n    // Rear hatch\n    translate([85, 5, 20]) {\n        rotate([10, 0, 0]) {\n            cube([5, 35, 15]);\n        }\n    }\n}\n\n// Wheels\ntranslate([15, 5, 5]) rotate([90, 0, 0]) wheel(6, 4);\ntranslate([15, 40, 5]) rotate([90, 0, 0]) wheel(6, 4);\ntranslate([75, 5, 5]) rotate([90, 0, 0]) wheel(6, 4);\ntranslate([75, 40, 5]) rotate([90, 0, 0]) wheel(6, 4);\n\n// Windows\n// Windshield\ntranslate([12, 5.5, 22]) rotate([0, -30, 0]) window_frame(20, 12);\n// Side windows\ntranslate([35, 5.5, 22]) window_frame(20, 12);\ntranslate([60, 5.5, 22]) window_frame(20, 12);\n// Rear side windows\ntranslate([35, 39.5, 22]) window_frame(20, 12);\ntranslate([60, 39.5, 22]) window_frame(20, 12);\n// Rear window\ntranslate([87, 15, 22]) rotate([0, 30, 0]) window_frame(25, 12);\n\n// Headlights\ntranslate([5, 10, 15]) cube([2, 6, 3]);\ntranslate([5, 29, 15]) cube([2, 6, 3]);\n\n// Taillights\ntranslate([90, 10, 15]) cube([2, 6, 3]);\ntranslate([90, 29, 15]) cube([2, 6, 3]);\n\n// Side mirrors\ntranslate([10, 5, 25]) side_mirror();\nmirror([0, 1, 0]) translate([10, -45, 25]) side_mirror();\n\n// Door handles\ntranslate([25, 5, 12]) cube([4, 1, 2]);\ntranslate([45, 5, 12]) cube([4, 1, 2]);\ntranslate([65, 5, 12]) cube([4, 1, 2]);\ntranslate([25, 39, 12]) cube([4, 1, 2]);\ntranslate([45, 39, 12]) cube([4, 1, 2]);\ntranslate([65, 39, 12]) cube([4, 1, 2]);\n\n// Front grille\ntranslate([5, 15, 15]) cube([1, 15, 3]);\n\n// License plates\ntranslate([5, 20, 8]) cube([8, 10, 0.5]);\ntranslate([82, 20, 8]) cube([8, 10, 0.5]);",
    "renders": true
  },
  {
    "vehicle": "microcar",
    "openscad_code": "// Microcar - Realistic Medium Complexity\n// Designed for 3D printing with no supports\n\n$fn = 32;\nmodule microcar() {\n    // Main body shell\n    translate([0, 0, 5]) \n        hull() {\n            translate([-15, -20, 0]) cube([30, 40, 20]);\n            translate([-15, -20, 20]) cube([30, 40, 10]);\n        }\n    \n    // Hood\n    translate([-15, -20, 25]) \n        rotate([0, -10, 0])\n        cube([35, 40, 8]);\n    \n    // Roof\n    translate([0, 0, 35]) \n        hull() {\n            translate([-15, -15, 0]) sphere(8);\n            translate([15, -15, 0]) sphere(8);\n            translate([0, 15, 0]) sphere(8);\n        }\n    \n    // Windshield\n    difference() {\n        translate([15, -20, 25]) \n            rotate([0, 60, 0])\n            cube([0.5, 40, 15]);\n        translate([16, -20, 25]) \n            rotate([0, 60, 0])\n            cube([0.5, 40, 15]);\n    }\n    \n    // Rear window\n    difference() {\n        translate([-15, -20, 25]) \n            rotate([0, -60, 0])\n            cube([0.5, 40, 15]);\n        translate([-16, -20, 25]) \n            rotate([0, -60, 0])\n            cube([0.5, 40, 15]);\n    }\n    \n    // Side windows\n    for(side = [-1, 1]) {\n        mirror([0, side, 0]) {\n            difference() {\n                translate([0, 20, 30]) \n                    cube([30, 1, 10]);\n                translate([0, 21, 30]) \n                    cube([30, 1, 10]);\n            }\n        }\n    }\n    \n    // Headlights\n    for(side = [-1, 1]) {\n        translate([18, side * 12, 15]) \n            rotate([0, 90, 0])\n            cylinder(h=2, r1=4, r2=5);\n    }\n    \n    // Taillights\n    for(side = [-1, 1]) {\n        translate([-18, side * 12, 15]) \n            rotate([0, -90, 0])\n            cylinder(h=2, r1=4, r2=5);\n    }\n    \n    // Wheels\n    module wheel() {\n        difference() {\n            cylinder(h=5, r=8);\n            translate([0, 0, -1]) \n                cylinder(h=7, r=3);\n            for(i = [0:5:355]) {\n                rotate([0, 0, i])\n                translate([5, 0, 2.5]) \n                    cube([1, 2, 5]);\n            }\n        }\n    }\n    \n    // Front wheels\n    translate([12, -20, 5]) \n        rotate([90, 0, 0])\n        wheel();\n    translate([12, 20, 5]) \n        rotate([90, 0, 0])\n        wheel();\n    \n    // Rear wheels\n    translate([-12, -20, 5]) \n        rotate([90, 0, 0])\n        wheel();\n    translate([-12, 20, 5]) \n        rotate([90, 0, 0])\n        wheel();\n    \n    // Bumpers\n    translate([20, 0, 8]) \n        cube([2, 40, 4]);\n    translate([-20, 0, 8]) \n        cube([2, 40, 4]);\n    \n    // Door handles\n    for(side = [-1, 1]) {\n        mirror([0, side, 0]) {\n            translate([0, 20, 15]) \n                cube([8, 1, 2]);\n        }\n    }\n    \n    // Exhaust pipe\n    translate([-18, 0, 3]) \n        rotate([0, 90, 0])\n        cylinder(h=10, r=2);\n}\n\nmicrocar();",
    "renders": true
  },
  {
    "vehicle": "roadcar",
    "openscad_code": "// Roadcar - Realistic style, medium complexity\n// Designed for 3D printing (no overhangs, 2mm walls)\n\n// Car dimensions (mm)\ncar_length = 80;\ncar_width = 35;\ncar_height = 25;\nwheel_diameter = 14;\nwheel_width = 7;\n\n// Main body module\nmodule car_body() {\n    // Lower chassis\n    translate([0, 0, wheel_diameter/2]) {\n        difference() {\n            // Main body block\n            cube([car_length, car_width, car_height/2], center=true);\n            \n            // Wheel arches\n            for (x = [-car_length/3, car_length/3]) {\n                translate([x, car_width/2 - 2, -1]) {\n                    rotate([90, 0, 0]) {\n                        cylinder(h=car_width/2 + 2, d=wheel_diameter + 4, center=true);\n                    }\n                }\n                translate([x, -car_width/2 + 2, -1]) {\n                    rotate([90, 0, 0]) {\n                        cylinder(h=car_width/2 + 2, d=wheel_diameter + 4, center=true);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Upper cabin\n    translate([0, 0, car_height/2 + wheel_diameter/2 + 3]) {\n        difference() {\n            hull() {\n                translate([-car_length/4, 0, 0]) \n                    cube([car_length/2, car_width - 4, car_height/2], center=true);\n                translate([car_length/6, 0, 2]) \n                    scale([1.2, 0.9, 0.8]) \n                    cube([car_length/3, car_width - 6, car_height/2], center=true);\n            }\n            \n            // Windows\n            translate([0, 0, 2]) {\n                // Front windshield\n                translate([car_length/6 - 5, 0, car_height/4]) \n                    cube([car_length/8, car_width - 10, car_height/4], center=true);\n                // Rear window\n                translate([-car_length/4 + 5, 0, car_height/4]) \n                    cube([car_length/8, car_width - 10, car_height/4], center=true);\n            }\n        }\n    }\n}\n\n// Wheel module\nmodule wheel() {\n    difference() {\n        // Tire\n        cylinder(h=wheel_width, d=wheel_diameter, center=true, $fn=32);\n        \n        // Rim cavity\n        translate([0, 0, -wheel_width/2 - 0.5]) {\n            cylinder(h=wheel_width + 1, d=wheel_diameter - 4, center=true, $fn=32);\n        }\n        \n        // Spokes pattern\n        for (i = [0:5]) {\n            rotate([0, 0, i * 60]) {\n                translate([0, wheel_diameter/4, 0]) {\n                    cube([2, wheel_diameter/2, wheel_width + 1], center=true);\n                }\n            }\n        }\n    }\n}\n\n// Axle module\nmodule axle() {\n    cylinder(h=car_width + wheel_width + 4, d=4, center=true);\n}\n\n// Headlights\nmodule headlights() {\n    // Front headlights\n    translate([car_length/2 - 2, car_width/4, car_height/4 + wheel_diameter/2]) {\n        sphere(d=3);\n    }\n    translate([car_length/2 - 2, -car_width/4, car_height/4 + wheel_diameter/2]) {\n        sphere(d=3);\n    }\n    \n    // Rear lights\n    translate([-car_length/2 + 2, car_width/4, car_height/4 + wheel_diameter/2]) {\n        cube([2, 4, 2], center=true);\n    }\n    translate([-car_length/2 + 2, -car_width/4, car_height/4 + wheel_diameter/2]) {\n        cube([2, 4, 2], center=true);\n    }\n}\n\n// Assemble the car\nunion() {\n    // Main body\n    car_body();\n    \n    // Wheels and axles\n    for (x = [-car_length/3, car_length/3]) {\n        translate([x, 0, wheel_diameter/2]) {\n            axle();\n            translate([0, car_width/2 + wheel_width/2 + 1, 0]) {\n                wheel();\n            }\n            translate([0, -car_width/2 - wheel_width/2 - 1, 0]) {\n                wheel();\n            }\n        }\n    }\n    \n    // Headlights and details\n    headlights();\n    \n    // Side mirrors\n    translate([car_length/4, car_width/2 + 2, car_height/2 + wheel_diameter/2 + 5]) {\n        cube([3, 4, 2], center=true);\n    }\n    translate([car_length/4, -car_width/2 - 2, car_height/2 + wheel_diameter/2 + 5]) {\n        cube([3, 4, 2], center=true);\n    }\n    \n    // Grille\n    translate([car_length/2 - 1, 0, car_height/4 + wheel_diameter/2 - 2]) {\n        difference() {\n            cube([2, car_width/2, 4], center=true);\n            for (i = [-2:2]) {\n                translate([0, i * 4, 0]) {\n                    cube([2.1, 1, 4.1], center=true);\n                }\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "tourer",
    "openscad_code": "// Realistic Tourer Car - Medium Complexity\n// Overall size ~80mm length, 35mm width, 30mm height\n// Wall thickness 1.5mm throughout for 3D printing\n\n$fn = 32;\n\n// Main body\nmodule body() {\n    difference() {\n        // Main chassis\n        hull() {\n            translate([-35, -15, 0]) cube([70, 30, 12]);\n            translate([-30, -12, 10]) cube([60, 24, 8]);\n        }\n        \n        // Cabin cutout\n        translate([-28, -11, 12]) cube([56, 22, 8]);\n        \n        // Wheel arches - front\n        translate([-20, -16, 0]) cylinder(h=15, r=8);\n        translate([-20, 16, 0]) cylinder(h=15, r=8);\n        \n        // Wheel arches - rear\n        translate([20, -16, 0]) cylinder(h=15, r=8);\n        translate([20, 16, 0]) cylinder(h=15, r=8);\n    }\n}\n\n// Cabin roof\nmodule roof() {\n    translate([-25, -11, 20]) {\n        difference() {\n            hull() {\n                cube([50, 22, 8]);\n                translate([5, 0, 5]) cube([40, 20, 6]);\n            }\n            translate([1, 1, 6]) cube([48, 20, 4]);\n        }\n    }\n}\n\n// Windshield\nmodule windshield() {\n    translate([-24, -11, 20]) {\n        rotate([15, 0, 0]) {\n            difference() {\n                cube([0.5, 22, 10]);\n                translate([0, 1, 1]) cube([1, 20, 8]);\n            }\n        }\n    }\n}\n\n// Rear window\nmodule rear_window() {\n    translate([24, -11, 20]) {\n        rotate([-15, 0, 0]) {\n            difference() {\n                cube([0.5, 22, 10]);\n                translate([0, 1, 1]) cube([1, 20, 8]);\n            }\n        }\n    }\n}\n\n// Side windows (left and right)\nmodule side_windows() {\n    for(side = [-1, 1]) {\n        translate([0, side * 11, 20]) {\n            difference() {\n                translate([-20, 0, 0]) cube([40, 0.5, 8]);\n                translate([-19, 0, 1]) cube([38, 1, 6]);\n            }\n        }\n    }\n}\n\n// Hood with slight curve\nmodule hood() {\n    translate([-35, -15, 12]) {\n        hull() {\n            cube([20, 30, 3]);\n            translate([5, 2.5, 3]) cube([15, 25, 2]);\n            translate([10, 5, 5]) cube([10, 20, 1]);\n        }\n    }\n}\n\n// Trunk\nmodule trunk() {\n    translate([15, -12, 12]) {\n        hull() {\n            cube([20, 24, 3]);\n            translate([2, 2, 3]) cube([16, 20, 2]);\n        }\n    }\n}\n\n// Wheels\nmodule wheel() {\n    difference() {\n        cylinder(h=6, r=8);\n        translate([0, 0, -1]) cylinder(h=8, r=3);\n    }\n}\n\n// Wheel assembly with tire tread pattern\nmodule wheel_with_tread() {\n    difference() {\n        wheel();\n        for(i = [0:15]) {\n            rotate([0, 0, i * 22.5]) {\n                translate([6, -0.5, 2]) cube([2, 1, 2]);\n            }\n        }\n    }\n}\n\n// Headlights\nmodule headlights() {\n    for(side = [-1, 1]) {\n        translate([-33, side * 10, 15]) {\n            sphere(r=3);\n            translate([0, 0, -1]) sphere(r=2.2);\n        }\n    }\n}\n\n// Taillights\nmodule taillights() {\n    for(side = [-1, 1]) {\n        translate([33, side * 10, 15]) {\n            cube([3, 4, 2]);\n            translate([0.5, 0.5, -0.5]) cube([2, 3, 3]);\n        }\n    }\n}\n\n// Side mirrors\nmodule mirrors() {\n    for(side = [-1, 1]) {\n        translate([-10, side * 12, 22]) {\n            rotate([0, side * 20, 0]) {\n                cube([4, 2, 3]);\n                translate([1, 0.5, 2]) sphere(r=2);\n            }\n        }\n    }\n}\n\n// Front grille\nmodule grille() {\n    translate([-35, -8, 12]) {\n        difference() {\n            cube([2, 16, 5]);\n            for(i = [0:3]) {\n                translate([0, -6 + i * 4, 1]) cube([3, 2, 3]);\n            }\n        }\n    }\n}\n\n// Exhaust pipe\nmodule exhaust() {\n    translate([35, 8, 8]) {\n        rotate([0, -10, 0]) {\n            cylinder(h=12, r=2);\n            translate([10, 0, 0]) sphere(r=2.5);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    roof();\n    hood();\n    trunk();\n    windshield();\n    rear_window();\n    side_windows();\n    headlights();\n    taillights();\n    mirrors();\n    grille();\n    exhaust();\n    \n    // Wheels positioned at corners\n    translate([-20, -16, 0]) wheel_with_tread();\n    translate([-20, 16, 0]) wheel_with_tread();\n    translate([20, -16, 0]) wheel_with_tread();\n    translate([20, 16, 0]) wheel_with_tread();\n}",
    "renders": true
  },
  {
    "vehicle": "spyder",
    "openscad_code": "// Spider - Realistic style, medium complexity (~110 lines)\n// 3D printable, no overhangs, 60 mm span\n\nmodule spider() {\n    // Main body\n    difference() {\n        union() {\n            // Cephalothorax (front part)\n            translate([0, 0, 3])\n                scale([1, 0.8, 0.6])\n                    sphere(d = 12, $fn = 32);\n            \n            // Abdomen (back part)\n            translate([-10, 0, 2])\n                scale([1.5, 1.2, 1])\n                    sphere(d = 14, $fn = 32);\n        }\n        \n        // Eye indentations (8 eyes)\n        for (angle = [0, 45, 90, 135]) {\n            rotate([0, 0, angle])\n                translate([5, 3.5, 6])\n                    sphere(d = 1.5, $fn = 16);\n            \n            rotate([0, 0, angle])\n                translate([5, -3.5, 6])\n                    sphere(d = 1.5, $fn = 16);\n        }\n    }\n    \n    // Chelicerae (fangs)\n    module fang() {\n        translate([6, 2, 2])\n            rotate([0, 30, 0])\n                cylinder(h = 8, d1 = 1.5, d2 = 0.5, $fn = 8);\n    }\n    \n    fang();\n    mirror([0, 1, 0]) fang();\n    \n    // Legs (4 pairs)\n    module leg(side, rotation, segments = 4) {\n        // Leg segments get progressively smaller\n        lengths = [12, 10, 8, 6];\n        diameters = [2, 1.5, 1.2, 1];\n        \n        union() {\n            // First segment (coxa)\n            rotate([0, 0, rotation]) {\n                translate([0, side * 2, 0]) {\n                    rotate([0, 0, -30 * side])\n                        rotate([60, 0, 0])\n                            cylinder(h = lengths[0], d = diameters[0], $fn = 8);\n                    \n                    // Remaining segments\n                    translate([0, side * 2, 0])\n                        rotate([0, 0, -15 * side])\n                            for (i = [1:segments-1]) {\n                                rotate([0, 60 - i * 15, 0])\n                                    translate([0, 0, lengths[i-1]])\n                                        cylinder(h = lengths[i], d = diameters[i], $fn = 8);\n                            }\n                }\n            }\n        }\n    }\n    \n    // Generate all 8 legs\n    for (i = [0:3]) {\n        angle = 45 + i * 90;\n        leg(1, angle);  // Left legs\n        leg(-1, angle); // Right legs\n    }\n    \n    // Pedipalps (smaller legs near mouth)\n    module pedipalp(side) {\n        translate([4, side * 2, 2])\n            rotate([0, 0, 45 * side])\n                rotate([45, 0, 0])\n                    cylinder(h = 6, d = 1, $fn = 8);\n    }\n    \n    pedipalp(1);\n    pedipalp(-1);\n}\n\n// Create spider centered at origin\nspider();",
    "renders": true
  },
  {
    "vehicle": "phaeton",
    "openscad_code": "// Phaeton - Victorian open carriage\n// Designed for 3D printing without supports\n\n// Global parameters\n$fn = 30;\nbody_length = 40;\nbody_width = 25;\nbody_height = 8;\nwheel_diameter = 20;\nwheel_width = 4;\naxle_length = 35;\ndriver_seat_height = 15;\npassenger_seat_height = 12;\nroof_height = 20;\n\n// Main assembly\nmodule phaeton() {\n    // Wheels and axles\n    translate([-body_length/2 - 5, 0, wheel_diameter/2])\n        wheel_assembly();\n    \n    translate([body_length/2 + 5, 0, wheel_diameter/2])\n        rotate([0, 180, 0])\n        wheel_assembly();\n    \n    // Axles\n    translate([0, 0, wheel_diameter/2])\n        rotate([90, 0, 0])\n        cylinder(h = axle_length, d = 3);\n    \n    // Body frame\n    translate([0, 0, wheel_diameter/2])\n        body_frame();\n    \n    // Driver seat\n    translate([-body_length/2 + 8, 0, wheel_diameter/2 + driver_seat_height])\n        driver_seat();\n    \n    // Passenger seat\n    translate([body_length/2 - 8, 0, wheel_diameter/2 + passenger_seat_height])\n        passenger_seat();\n    \n    // Folding top\n    translate([body_length/2 - 5, 0, wheel_diameter/2 + body_height + 15])\n        folding_top();\n    \n    // Footboard\n    translate([-body_length/2 + 3, 0, wheel_diameter/2 + 2])\n        footboard();\n    \n    // Shafts\n    translate([-body_length/2 - 20, 0, wheel_diameter/2 - 2])\n        shafts();\n}\n\n// Wheel with spokes\nmodule wheel_assembly() {\n    difference() {\n        // Wheel rim\n        cylinder(h = wheel_width, d = wheel_diameter);\n        \n        // Hub hole\n        translate([0, 0, -1])\n            cylinder(h = wheel_width + 2, d = 5);\n    }\n    \n    // Hub\n    translate([0, 0, wheel_width/2])\n        cylinder(h = wheel_width + 2, d = 6);\n    \n    // Spokes\n    for(i = [0:7]) {\n        rotate([0, 0, i * 45])\n            translate([0, (wheel_diameter - 8)/4, wheel_width/2])\n                cube([2, (wheel_diameter - 8)/2, wheel_width], center = true);\n    }\n}\n\n// Main body frame\nmodule body_frame() {\n    // Floor\n    translate([0, 0, 0])\n        cube([body_length, body_width, body_height], center = true);\n    \n    // Side rails\n    for(side = [-1, 1]) {\n        translate([0, side * (body_width/2 - 1), body_height/2])\n            cube([body_length, 2, body_height], center = true);\n    }\n    \n    // Front and back rails\n    for(end = [-1, 1]) {\n        translate([end * body_length/2, 0, body_height/2])\n            cube([2, body_width, body_height], center = true);\n    }\n}\n\n// Driver seat\nmodule driver_seat() {\n    // Seat base\n    translate([0, 0, 0])\n        cube([12, 20, 3], center = true);\n    \n    // Seat back\n    translate([-5, 0, 2])\n        cube([2, 20, 6], center = true);\n    \n    // Arm rests\n    for(side = [-1, 1]) {\n        translate([0, side * 9, 2])\n            cube([10, 2, 4], center = true);\n    }\n}\n\n// Passenger seat\nmodule passenger_seat() {\n    // Bench\n    translate([0, 0, 0])\n        cube([20, body_width - 4, 3], center = true);\n    \n    // Seat back\n    translate([8, 0, 3])\n        cube([4, body_width - 4, 8], center = true);\n}\n\n// Folding top/canopy\nmodule folding_top() {\n    // Top supports\n    for(side = [-1, 1]) {\n        translate([0, side * (body_width/2 - 2), 0])\n            cylinder(h = roof_height, d = 2);\n    }\n    \n    // Canopy frame\n    translate([0, 0, roof_height])\n        rotate([90, 0, 0])\n        cylinder(h = body_width - 4, d = 2);\n    \n    // Canopy cover\n    translate([0, 0, roof_height])\n        rotate([90, 0, 0])\n        scale([1, 1, 0.3])\n        cylinder(h = body_width - 2, d = body_length - 10);\n}\n\n// Footboard for driver\nmodule footboard() {\n    translate([0, 0, 0])\n        cube([8, body_width - 4, 2], center = true);\n}\n\n// Shafts for horses\nmodule shafts() {\n    // Left shaft\n    translate([0, body_width/2 + 2, 0])\n        cube([30, 2, 2], center = false);\n    \n    // Right shaft\n    translate([0, -body_width/2 - 4, 0])\n        cube([30, 2, 2], center = false);\n    \n    // Cross bar\n    translate([-30, -body_width/2 - 2, 0])\n        cube([2, body_width + 4, 2], center = false);\n}\n\n// Render the complete phaeton\nphaeton();",
    "renders": true
  },
  {
    "vehicle": "cruiser",
    "openscad_code": "// Realistic Cruiser – medium complexity\n// Approx. 85 mm long, 27 mm wide, 35 mm high (waterline to mast top)\n\n$fn = 32;           // smooth curves\n\n// Overall scale factor; 1 = 1 mm\nscale = 1;\n\n// ---- Parameters ----\nhull_l = 85;        // waterline length\nhull_w = 27;        // max beam\nhull_h = 15;        // hull depth from waterline\ndeck_h = 3;         // deck thickness\nbridge_h = 12;      // bridge height above deck\nmast_d = 2.5;       // mast diameter\nmast_h = 20;        // mast total height\nchimney_d = 4;      // funnel diameter\nchimney_h = 8;\ngun_l = 12;         // main gun barrel length\ngun_r = 2;          // gun barrel radius\nlifeboat_l = 12;\nlifeboat_w = 4;\nlifeboat_h = 2;\n\n// ---- Modules ----\n\n// Rounded hull with slight tumblehome\nmodule hull() {\n    difference() {\n        union() {\n            // main hull body\n            hull_profile();\n            // bilge keels (thin fins for roll reduction)\n            for (side = [-1, 1]) {\n                translate([hull_l*0.35, side*hull_w/2 + side*1.5, -hull_h*0.6])\n                    rotate([0, 0, side*5])\n                        cube([hull_l*0.25, 1.5, 3], center = true);\n            }\n        }\n        // cut waterline flat\n        translate([0, 0, -hull_h - 1])\n            cube([hull_l + 2, hull_w + 2, hull_h + 2], center = true);\n    }\n}\n\n// Swept hull shape\nmodule hull_profile() {\n    linear_extrude(height = hull_h, center = false, scale = [0.75, 0.85])\n        translate([0, 0, -hull_h/2])\n            hull_shape_2d();\n}\n\n// 2D outline of hull\nmodule hull_shape_2d() {\n    offset(r = 2)\n        polygon(points = [\n            [-hull_l/2, 0],\n            [ hull_l/2 - 10, 0],\n            [ hull_l/2, hull_w/2 - 8],\n            [ hull_l/2 - 30, hull_w/2],\n            [-hull_l/2 + 10, hull_w/2 - 4]\n        ]);\n}\n\n// Main deck\nmodule deck() {\n    translate([0, 0, hull_h])\n        cube([hull_l - 8, hull_w - 4, deck_h], center = true);\n}\n\n// Bridge superstructure\nmodule bridge() {\n    difference() {\n        // main block\n        translate([0, 0, hull_h + deck_h])\n            cube([hull_l*0.25, hull_w*0.55, bridge_h], center = true);\n        // windows recess\n        translate([0, 0, hull_h + deck_h + bridge_h/2 - 1])\n            cube([hull_l*0.26, hull_w*0.6, 2], center = true);\n    }\n}\n\n// Funnel (chimney)\nmodule funnel() {\n    translate([hull_l*0.1, 0, hull_h + deck_h + bridge_h - 2])\n        cylinder(d1 = chimney_d + 1, d2 = chimney_d, h = chimney_h);\n}\n\n// Mast with crow’s nest\nmodule mast() {\n    translate([hull_l*0.25, 0, hull_h + deck_h])\n        cylinder(d = mast_d, h = mast_h);\n    // crow’s nest\n    translate([hull_l*0.25, 0, hull_h + deck_h + mast_h*0.7])\n        cylinder(d = 5, h = 2);\n}\n\n// Main turret\nmodule turret(pos_x) {\n    translate([pos_x, 0, hull_h + deck_h])\n        rotate([0, 0, 0])\n            union() {\n                // turret body\n                cylinder(d = 10, h = 4);\n                // gun barrel\n                translate([gun_l/2, 0, 2])\n                    rotate([0, 90, 0])\n                        cylinder(r = gun_r, h = gun_l);\n            }\n}\n\n// Lifeboats\nmodule lifeboats() {\n    for (side = [-1, 1]) {\n        for (i = [0:1]) {\n            translate([hull_l*0.2 + i*12, side*(hull_w/2 - 3), hull_h + deck_h + 1])\n                rotate([0, side*15, 0])\n                    lifeboat();\n        }\n    }\n}\n\nmodule lifeboat() {\n    hull()\n        scale([lifeboat_l/10, lifeboat_w/5, lifeboat_h/5])\n            cube([10, 5, 5], center = true);\n}\n\n// ---- Assembly ----\nunion() {\n    hull();\n    deck();\n    bridge();\n    funnel();\n    mast();\n    turret(-hull_l*0.15);\n    turret(hull_l*0.15);\n    lifeboats();\n}",
    "renders": true
  },
  {
    "vehicle": "sportscar",
    "openscad_code": "// Sportscar - Realistic Medium Complexity\n// Dimensions: 90mm x 40mm x 25mm\n\n$fn = 32;\nmodule wheel() {\n    difference() {\n        cylinder(h=4, d=12);\n        translate([0,0,-1]) cylinder(h=6, d=8);\n    }\n}\n\nmodule wheel_arch() {\n    difference() {\n        translate([0,0,2]) scale([1.2,1,1]) sphere(d=14);\n        translate([0,0,-5]) cube(30, center=true);\n    }\n}\n\nmodule side_mirror() {\n    translate([0,5,0]) {\n        cylinder(h=8, d=3);\n        translate([0,4,4]) rotate([90,0,0]) scale([1,0.6,1]) sphere(d=6);\n    }\n}\n\nmodule headlight() {\n    difference() {\n        translate([0,0,2]) scale([1,0.5,1]) sphere(d=8);\n        translate([0,0,2.1]) scale([0.8,0.4,0.8]) sphere(d=7);\n    }\n}\n\nmodule taillight() {\n    difference() {\n        cube([10,4,6], center=true);\n        translate([0,2.1,0]) cube([9,3,5], center=true);\n    }\n}\n\n// Main body\ndifference() {\n    // Base chassis\n    union() {\n        // Lower body\n        translate([0,0,3]) cube([80,35,8], center=true);\n        \n        // Cabin\n        translate([5,0,11]) scale([0.7,0.9,0.6]) cube([60,32,12], center=true);\n        \n        // Hood slope\n        translate([-20,0,11]) rotate([30,0,0]) cube([40,33,8], center=true);\n        \n        // Rear deck\n        translate([25,0,11]) rotate([-15,0,0]) cube([30,33,6], center=true);\n        \n        // Front bumper\n        translate([-38,0,3]) cube([6,30,6], center=true);\n        \n        // Rear bumper\n        translate([38,0,3]) cube([6,30,6], center=true);\n    }\n    \n    // Wheel cutouts\n    translate([-25,-18,3]) wheel_arch();\n    translate([-25,18,3]) wheel_arch();\n    translate([25,-18,3]) wheel_arch();\n    translate([25,18,3]) wheel_arch();\n    \n    // Windows\n    translate([5,0,15]) scale([0.65,0.85,0.5]) cube([55,28,10], center=true);\n}\n\n// Wheels\ntranslate([-25,-18,3]) rotate([90,0,0]) wheel();\ntranslate([-25,18,3]) rotate([90,0,0]) wheel();\ntranslate([25,-18,3]) rotate([90,0,0]) wheel();\ntranslate([25,18,3]) rotate([90,0,0]) wheel();\n\n// Side mirrors\ntranslate([5,17.5,14]) side_mirror();\ntranslate([5,-17.5,14]) mirror([0,1,0]) side_mirror();\n\n// Headlights\ntranslate([-36,10,5]) headlight();\ntranslate([-36,-10,5]) headlight();\n\n// Taillights\ntranslate([36,10,5]) taillight();\ntranslate([36,-10,5]) taillight();\n\n// Exhaust pipes\ntranslate([38,8,3]) rotate([90,0,0]) cylinder(h=8, d=4);\ntranslate([38,-8,3]) rotate([90,0,0]) cylinder(h=8, d=4);\n\n// Spoiler\ntranslate([30,0,18]) difference() {\n    cube([20,34,2], center=true);\n    translate([0,0,-1]) cube([18,32,4], center=true);\n}\ntranslate([30,0,18]) cube([2,36,4], center=true);",
    "renders": true
  },
  {
    "vehicle": "roadcruiser",
    "openscad_code": "// 1:18-scale road-cruiser sedan (≈90 mm long)\n// Wheels, body, windows, lights – all printable, minimal overhangs\n// Wall thickness 1.2 mm everywhere\n\n// ---------- Global parameters ----------\nwheel_r   = 9;\nwheel_w   = 4;\nbody_len  = 90;\nbody_wid  = 38;\nbody_hgt  = 25;\nhood_len  = 25;\n\n// ---------- Wheel module ----------\nmodule wheel() {\n    difference() {\n        cylinder(r=wheel_r, h=wheel_w, $fn=32);      // tyre\n        translate([0,0,-1])\n            cylinder(r=wheel_r-2.4, h=wheel_w+2);    // rim recess\n    }\n}\n\n// ---------- Axle with two wheels ----------\nmodule axle() {\n    translate([-body_wid/2 - wheel_w - 1, 0, 0]) wheel();\n    translate([ body_wid/2 + wheel_w + 1, 0, 0]) mirror([1,0,0]) wheel();\n}\n\n// ---------- Front axle ----------\ntranslate([body_len*0.75, 0, wheel_r]) axle();\n\n// ---------- Rear axle ----------\ntranslate([body_len*0.20, 0, wheel_r]) axle();\n\n// ---------- Main body shell ----------\nunion() {\n    // Cabin block\n    translate([body_len*0.55, 0, wheel_r])\n        cube([hood_len*1.1, body_wid, body_hgt], center=true);\n\n    // Hood\n    translate([body_len*0.85, 0, wheel_r - 2])\n        cube([hood_len, body_wid*0.9, body_hgt - 4], center=true);\n\n    // Trunk\n    translate([body_len*0.18, 0, wheel_r - 2])\n        cube([hood_len*0.8, body_wid*0.9, body_hgt - 4], center=true);\n}\n\n// ---------- Roof ----------\ntranslate([body_len*0.55, 0, wheel_r + body_hgt/2 + 6])\n    cube([hood_len*1.1, body_wid*0.7, 8], center=true);\n\n// ---------- Windows ----------\ndifference() {\n    // Windshield\n    translate([body_len*0.70, 0, wheel_r + body_hgt/2 + 4])\n        rotate([0,15,0])\n            cube([12, body_wid*0.65, 7], center=true);\n    // Rear window\n    translate([body_len*0.40, 0, wheel_r + body_hgt/2 + 4])\n        rotate([0,-15,0])\n            cube([12, body_wid*0.65, 7], center=true);\n}\n\n// ---------- Headlights ----------\nfor (x=[body_len-4, body_len-7])\n    translate([x, body_wid/2 - 4, wheel_r - 1])\n        sphere(r=2, $fn=12);\nfor (x=[body_len-4, body_len-7])\n    translate([x, -body_wid/2 + 4, wheel_r - 1])\n        sphere(r=2, $fn=12);\n\n// ---------- Taillights ----------\nfor (x=[4, 7])\n    translate([x, body_wid/2 - 4, wheel_r - 1])\n        sphere(r=2, $fn=12);\nfor (x=[4, 7])\n    translate([x, -body_wid/2 + 4, wheel_r - 1])\n        sphere(r=2, $fn=12);\n\n// ---------- Side mirrors ----------\ntranslate([body_len*0.65, body_wid/2 + 3, wheel_r + body_hgt/2 + 6])\n    cube([3, 2, 2], center=true);\ntranslate([body_len*0.65, -body_wid/2 - 3, wheel_r + body_hgt/2 + 6])\n    cube([3, 2, 2], center=true);\n\n// ---------- Underside clearance ----------\ntranslate([body_len/2, 0, wheel_r - 6])\n    cube([body_len + 2, body_wid, 1], center=true);",
    "renders": true
  },
  {
    "vehicle": "saloon",
    "openscad_code": "// Saloon building with printable walls and recognizable features\n// Overall footprint: ~70 x 50 x 55 mm\n\n$fa = 2;\n$fs = 0.5;\n\n// Main body\nmodule main_building() {\n    difference() {\n        // Lower floor\n        cube([60, 40, 30], center = true);\n        \n        // Door opening on front face\n        translate([0, -20.1, -10])\n            cube([12, 2, 20], center = true);\n        \n        // Window left of door\n        translate([-15, -20.1, 0])\n            cube([10, 2, 12], center = true);\n        \n        // Window right of door\n        translate([15, -20.1, 0])\n            cube([10, 2, 12], center = true);\n    }\n}\n\n// Upper floor / overhang\nmodule upper_floor() {\n    translate([0, 0, 30])\n    difference() {\n        // Balcony\n        cube([70, 50, 4], center = true);\n        \n        // Balcony cutout\n        translate([0, 0, -2])\n            cube([60, 40, 8], center = true);\n    }\n}\n\n// Roof\nmodule roof() {\n    translate([0, 0, 36])\n    rotate([0, 0, 45])\n    scale([1, 0.7, 1])\n    cube([70, 70, 20], center = true);\n}\n\n// Columns supporting balcony\nmodule columns() {\n    for (x = [-25, 25]) {\n        translate([x, -20, 15])\n        cylinder(h = 16, r = 3, center = true);\n    }\n}\n\n// Doors\nmodule doors() {\n    // Saloon doors (swing half-doors)\n    translate([-5, -20.9, -5])\n    cube([5, 1, 15], center = true);\n    \n    translate([5, -20.9, -5])\n    cube([5, 1, 15], center = true);\n}\n\n// Windows\nmodule windows() {\n    // Left window\n    translate([-15, -20.9, 0])\n    cube([8, 0.5, 10], center = true);\n    \n    // Right window\n    translate([15, -20.9, 0])\n    cube([8, 0.5, 10], center = true);\n}\n\n// Sign\nmodule sign() {\n    translate([0, 0, 40])\n    rotate([0, 0, 0])\n    cube([25, 3, 8], center = true);\n}\n\n// Steps\nmodule steps() {\n    translate([0, -30, -17])\n    for (i = [0:2]) {\n        translate([0, 0, i * 2])\n        cube([20 + i * 4, 3, 2], center = true);\n    }\n}\n\n// Assemble the saloon\nunion() {\n    main_building();\n    upper_floor();\n    columns();\n    roof();\n    doors();\n    windows();\n    sign();\n    steps();\n}",
    "renders": true
  },
  {
    "vehicle": "berline",
    "openscad_code": "// Realistic Berlin 3D Printable Car (Medium Complexity)\n// Scale: ~80mm length\n\n// Main parameters\ncar_length = 80;\ncar_width = 35;\ncar_height = 25;\nwheel_diameter = 12;\nwall_thickness = 1.5;\n\n// Color definitions\ncolor_body = [0.2, 0.4, 0.8];\ncolor_tires = [0.1, 0.1, 0.1];\ncolor_windows = [0.7, 0.8, 0.9];\ncolor_lights = [1, 1, 0.8];\ncolor_grille = [0.3, 0.3, 0.3];\n\n// Main body module\nmodule car_body() {\n    color(color_body)\n    union() {\n        // Lower body (chassis)\n        translate([0, 0, wheel_diameter/2])\n        cube([car_length, car_width, car_height/2], center=true);\n        \n        // Upper body (cabin)\n        translate([-5, 0, car_height/2 + wheel_diameter/2])\n        cube([car_length*0.7, car_width*0.9, car_height/2], center=true);\n        \n        // Hood slope\n        translate([car_length*0.25, 0, car_height*0.6 + wheel_diameter/2])\n        rotate([0, 10, 0])\n        cube([car_length*0.3, car_width*0.85, car_height*0.3], center=true);\n        \n        // Trunk slope\n        translate([-car_length*0.3, 0, car_height*0.6 + wheel_diameter/2])\n        rotate([0, -10, 0])\n        cube([car_length*0.25, car_width*0.85, car_height*0.25], center=true);\n    }\n}\n\n// Window module\nmodule windows() {\n    color(color_windows)\n    union() {\n        // Windshield\n        translate([15, 0, car_height*0.75 + wheel_diameter/2])\n        rotate([0, -30, 0])\n        cube([20, car_width*0.75, 0.5], center=true);\n        \n        // Rear window\n        translate([-20, 0, car_height*0.75 + wheel_diameter/2])\n        rotate([0, 30, 0])\n        cube([18, car_width*0.75, 0.5], center=true);\n        \n        // Side windows (left)\n        translate([0, car_width/2 + 0.1, car_height*0.75 + wheel_diameter/2])\n        cube([car_length*0.5, 0.5, car_height*0.3], center=true);\n        \n        // Side windows (right)\n        translate([0, -car_width/2 - 0.1, car_height*0.75 + wheel_diameter/2])\n        cube([car_length*0.5, 0.5, car_height*0.3], center=true);\n    }\n}\n\n// Wheel module\nmodule wheel(pos_x, pos_y) {\n    translate([pos_x, pos_y, 0])\n    union() {\n        // Tire\n        color(color_tires)\n        cylinder(h=wall_thickness*2, d=wheel_diameter, center=true);\n        \n        // Rim\n        color([0.5, 0.5, 0.5])\n        translate([0, 0, wall_thickness/2])\n        cylinder(h=wall_thickness, d=wheel_diameter*0.7, center=true);\n        \n        // Rim details\n        for(i=[0:5]) {\n            rotate([0, 0, i*60])\n            translate([wheel_diameter*0.3, 0, 0])\n            cube([wheel_diameter*0.1, wall_thickness*0.8, wall_thickness], center=true);\n        }\n    }\n}\n\n// Headlights module\nmodule headlights() {\n    color(color_lights)\n    union() {\n        // Left headlight\n        translate([car_length/2 - 2, car_width/2 - 3, car_height/3 + wheel_diameter/2])\n        sphere(d=3);\n        \n        // Right headlight\n        translate([car_length/2 - 2, -car_width/2 + 3, car_height/3 + wheel_diameter/2])\n        sphere(d=3);\n        \n        // Taillights\n        translate([-car_length/2 + 2, car_width/2 - 3, car_height/3 + wheel_diameter/2])\n        sphere(d=2.5);\n        \n        translate([-car_length/2 + 2, -car_width/2 + 3, car_height/3 + wheel_diameter/2])\n        sphere(d=2.5);\n    }\n}\n\n// Grille module\nmodule grille() {\n    color(color_grille)\n    translate([car_length/2 - 1, 0, car_height/3 + wheel_diameter/2])\n    cube([2, car_width*0.6, car_height/4], center=true);\n    \n    // Grille details\n    color([0.1, 0.1, 0.1])\n    for(i=[-2:2]) {\n        translate([car_length/2 - 0.5, i*4, car_height/3 + wheel_diameter/2])\n        cube([1, 1, car_height/6], center=true);\n    }\n}\n\n// Side mirrors\nmodule mirrors() {\n    color(color_body)\n    union() {\n        // Left mirror\n        translate([car_length*0.1, car_width/2 + 1, car_height*0.7 + wheel_diameter/2])\n        union() {\n            cube([2, 1, 1], center=true);\n            translate([1, 1.5, 0])\n            sphere(d=2);\n        }\n        \n        // Right mirror\n        translate([car_length*0.1, -car_width/2 - 1, car_height*0.7 + wheel_diameter/2])\n        mirror([0, 1, 0])\n        union() {\n            cube([2, 1, 1], center=true);\n            translate([1, 1.5, 0])\n            sphere(d=2);\n        }\n    }\n}\n\n// License plates\nmodule license_plates() {\n    color([0.9, 0.9, 0.9])\n    union() {\n        // Front plate\n        translate([car_length/2 + 0.1, 0, wheel_diameter/2])\n        cube([0.5, 8, 4], center=true);\n        \n        // Rear plate\n        translate([-car_length/2 - 0.1, 0, wheel_diameter/2])\n        cube([0.5, 8, 4], center=true);\n    }\n}\n\n// Assemble the car\nunion() {\n    car_body();\n    windows();\n    \n    // Wheels positioned for stability\n    wheel(car_length*0.3, car_width/2 + 1);\n    wheel(car_length*0.3, -car_width/2 - 1);\n    wheel(-car_length*0.3, car_width/2 + 1);\n    wheel(-car_length*0.3, -car_width/2 - 1);\n    \n    headlights();\n    grille();\n    mirrors();\n    license_plates();\n}",
    "renders": true
  },
  {
    "vehicle": "cabriolet",
    "openscad_code": "// Medium complexity 3D printable cabriolet\n// Overall length ≈ 90 mm\n\n$fs = 0.5;\n$fa = 2;\n\nmodule wheel() {\n    // Tire + rim\n    rotate([90,0,0])\n    difference() {\n        cylinder(h=6, d=15, center=true);\n        cylinder(h=7, d=8, center=true);\n    }\n}\n\nmodule axle() {\n    // Axle bar\n    translate([0,0,0])\n    rotate([0,90,0])\n    cylinder(h=38, d=4, center=true);\n}\n\nmodule wheels() {\n    // Front wheels\n    translate([-30, 20, -7]) wheel();\n    translate([-30,-20, -7]) wheel();\n    // Rear wheels\n    translate([ 30, 20, -7]) wheel();\n    translate([ 30,-20, -7]) wheel();\n    // Axles\n    translate([-30, 0, -7]) axle();\n    translate([ 30, 0, -7]) axle();\n}\n\nmodule body() {\n    // Lower body\n    hull() {\n        translate([-32, -20, 0]) cube([64,40,12], center=true);\n        translate([ 32, -20, 0]) cube([64,40,12], center=true);\n    }\n    \n    // Hood\n    translate([-32, 0, 12])\n    rotate([0,0,0])\n    cube([30,38,6], center=true);\n    \n    // Cabin floor\n    translate([ 0, 0, 12])\n    cube([40,38,4], center=true);\n    \n    // Rear trunk\n    translate([30, 0, 12])\n    cube([20,38,6], center=true);\n}\n\nmodule windshield() {\n    // Windshield frame\n    translate([-15, 0, 20])\n    rotate([30,0,0])\n    cube([2,36,20], center=true);\n}\n\nmodule seats() {\n    // Driver seat\n    translate([-5, -10, 14])\n    cube([10,8,10], center=true);\n    // Passenger seat\n    translate([-5, 10, 14])\n    cube([10,8,10], center=true);\n}\n\nmodule steering_wheel() {\n    // Steering wheel\n    translate([-18, -10, 22])\n    rotate([0,90,0])\n    cylinder(h=10, d=8, center=true);\n}\n\nmodule headlights() {\n    // Headlights\n    translate([-35, 15, 8])\n    sphere(d=6);\n    translate([-35,-15, 8])\n    sphere(d=6);\n}\n\nmodule taillights() {\n    // Taillights\n    translate([ 40, 15, 8])\n    sphere(d=5);\n    translate([ 40,-15, 8])\n    sphere(d=5);\n}\n\nunion() {\n    body();\n    wheels();\n    windshield();\n    seats();\n    steering_wheel();\n    headlights();\n    taillights();\n}",
    "renders": true
  },
  {
    "vehicle": "estate",
    "openscad_code": "// OpenSCAD Estate Model – medium complexity, realistic, 3D-printable\n// Overall footprint ~70 mm x 50 mm x 35 mm\n\n$fn = 32; // smooth curves\n\nmodule base() {\n    // 2 mm thick ground plate\n    cube([72, 52, 2], center = true);\n}\n\nmodule walls() {\n    // main house shell – 2 mm walls\n    difference() {\n        translate([0, 0, 10.5])\n            cube([40, 30, 21], center = true);\n        translate([0, 0, 11])\n            cube([36, 26, 20], center = true);\n    }\n}\n\nmodule roof() {\n    // pitched roof – no overhangs\n    rotate([0, 90, 0])\n        linear_extrude(height = 40, center = true, convexity = 10)\n            polygon(points = [[-15, 0], [15, 0], [0, 12]]);\n}\n\nmodule chimney() {\n    // simple rectangular chimney on roof ridge\n    translate([10, 0, 23])\n        cube([4, 4, 8], center = true);\n}\n\nmodule door() {\n    // recessed front door\n    translate([0, -15.1, 3])\n        cube([6, 1, 8], center = true);\n}\n\nmodule windows() {\n    // four recessed windows\n    for (x = [-10, 10])\n        for (y = [0, 7]) {\n            translate([x, y > 3 ? -14.9 : 14.9, 10])\n                cube([4, 1, 5], center = true);\n        }\n}\n\nmodule garage() {\n    // attached garage, slightly lower\n    difference() {\n        translate([-30, 0, 7])\n            cube([20, 26, 14], center = true);\n        translate([-30, 0, 7.5])\n            cube([18, 24, 13], center = true);\n    }\n}\n\nmodule garage_door() {\n    // roll-up garage door recess\n    translate([-39.9, 0, 4])\n        cube([1, 16, 8], center = true);\n}\n\nmodule trees() {\n    // simple cylindrical trees along sides\n    for (side = [-1, 1])\n        translate([side * 35, side * 20, 0])\n            union() {\n                cylinder(h = 15, d = 4, center = false);\n                translate([0, 0, 15])\n                    sphere(d = 8);\n            }\n}\n\nunion() {\n    base();\n    walls();\n    roof();\n    chimney();\n    door();\n    windows();\n    garage();\n    garage_door();\n    trees();\n}",
    "renders": true
  },
  {
    "vehicle": "shootingbrake",
    "openscad_code": "// Shooting Brake - Realistic Style, Medium Complexity\n// Dimensions in mm, ready for 3D printing\n\n$fn = 32;\n\n// Overall scale\nscale_factor = 1;\n\n// Main dimensions\nbody_length = 80;\nbody_width = 36;\nbody_height = 30;\n\n// Wheel parameters\nwheel_radius = 8;\nwheel_width = 4;\nwheelbase = 50;\n\n// Ground clearance\nclearance = 6;\n\nmodule wheel() {\n    difference() {\n        cylinder(h = wheel_width, r = wheel_radius, center = true);\n        cylinder(h = wheel_width + 1, r = wheel_radius - 3, center = true);\n    }\n}\n\nmodule wheel_arch() {\n    difference() {\n        translate([0, 0, wheel_radius/2])\n            cube([wheel_radius * 2.5, wheel_width + 2, wheel_radius], center = true);\n        translate([0, 0, -wheel_radius/2])\n            cylinder(h = wheel_width + 4, r = wheel_radius + 1, center = true);\n    }\n}\n\nmodule body() {\n    // Main lower body\n    hull() {\n        translate([-body_length/2 + 10, 0, clearance + body_height/2 - 5])\n            cube([body_length - 20, body_width, body_height - 5], center = true);\n        translate([body_length/2 - 15, 0, clearance + body_height/2])\n            cube([body_length/2 - 10, body_width - 8, body_height], center = true);\n    }\n    \n    // Roof line\n    translate([-body_length/2 + 5, 0, clearance + body_height + 5])\n        cube([body_length - 10, body_width - 6, 5], center = true);\n    \n    // Hood slope\n    hull() {\n        translate([-body_length/2 + 15, 0, clearance + body_height/2])\n            cube([20, body_width - 4, body_height - 2], center = true);\n        translate([-body_length/2, 0, clearance + body_height/2 + 5])\n            cube([20, body_width - 4, body_height - 10], center = true);\n    }\n    \n    // Rear hatch\n    translate([body_length/2 - 12, 0, clearance + body_height/2 + 2])\n        cube([24, body_width - 8, body_height], center = true);\n}\n\nmodule windows() {\n    color(\"lightblue\", 0.6) {\n        // Windshield\n        translate([-body_length/2 + 5, 0, clearance + body_height/2 + 8])\n            rotate([0, -15, 0])\n            cube([18, body_width - 6, 14], center = true);\n        \n        // Side windows\n        for(y = [-body_width/2 + 2, body_width/2 - 2]) {\n            translate([0, y, clearance + body_height + 2])\n                cube([body_length - 20, 2, 8], center = true);\n        }\n        \n        // Rear window\n        translate([body_length/2 - 12, 0, clearance + body_height/2 + 8])\n            rotate([0, 75, 0])\n            cube([20, body_width - 10, 12], center = true);\n    }\n}\n\nmodule details() {\n    // Front grille\n    translate([-body_length/2 + 1, 0, clearance + body_height/2])\n        cube([2, body_width - 10, 8], center = true);\n    \n    // Headlights\n    for(x = [-body_length/2 + 2, -body_length/2 + 2])\n    for(y = [-body_width/2 + 4, body_width/2 - 4])\n        translate([x, y, clearance + body_height/2 + 2])\n            sphere(r = 2);\n    \n    // Taillights\n    for(y = [-body_width/2 + 4, body_width/2 - 4])\n        translate([body_length/2 - 2, y, clearance + body_height/2 + 2])\n            cube([2, 4, 3], center = true);\n    \n    // Side mirrors\n    for(y = [-body_width/2 - 2, body_width/2 + 2]) {\n        translate([-body_length/2 + 20, y, clearance + body_height + 8])\n            cube([4, 2, 3], center = true);\n    }\n    \n    // Roof rails\n    for(y = [-body_width/2 + 3, body_width/2 - 3]) {\n        translate([0, y, clearance + body_height + 8])\n            cube([body_length - 10, 2, 2], center = true);\n    }\n}\n\n// Assembly\nscale([scale_factor, scale_factor, scale_factor]) {\n    union() {\n        body();\n        \n        // Wheels and arches\n        for(x = [-wheelbase/2, wheelbase/2])\n        for(y = [-body_width/2 - wheel_width/2 - 1, body_width/2 + wheel_width/2 + 1]) {\n            translate([x, y, clearance])\n                wheel_arch();\n            translate([x, y, wheel_radius])\n                wheel();\n        }\n        \n        windows();\n        details();\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "fastback",
    "openscad_code": "// Fastback model - realistic style, medium complexity\n// Designed for 3D printing - no overhangs, 2mm wall thickness\n\n// Overall dimensions: 90mm long, 40mm wide, 30mm high\n$fn = 32;\n\n// Main body module\nmodule fastback_body() {\n    // Lower chassis\n    translate([0, 0, 5]) {\n        difference() {\n            cube([85, 35, 10], center = true);\n            cube([81, 31, 11], center = true);\n        }\n    }\n    \n    // Passenger compartment with fastback roof\n    hull() {\n        // Front windscreen area\n        translate([-25, 0, 15]) {\n            rotate([15, 0, 0]) {\n                cube([20, 30, 25], center = true);\n            }\n        }\n        \n        // Roof peak\n        translate([5, 0, 25]) {\n            cube([20, 28, 15], center = true);\n        }\n        \n        // Rear fastback slope\n        translate([30, 0, 20]) {\n            rotate([-25, 0, 0]) {\n                cube([25, 28, 18], center = true);\n            }\n        }\n    }\n}\n\n// Wheels module\nmodule wheels() {\n    for(side = [-1, 1]) {\n        // Front wheels\n        translate([-30, side * 20, 5]) {\n            difference() {\n                cylinder(h = 8, r = 8, center = true);\n                cylinder(h = 9, r = 4, center = true);\n            }\n        }\n        \n        // Rear wheels\n        translate([30, side * 20, 5]) {\n            difference() {\n                cylinder(h = 8, r = 8, center = true);\n                cylinder(h = 9, r = 4, center = true);\n            }\n        }\n    }\n}\n\n// Windows\nmodule windows() {\n    // Windshield\n    translate([-25, 0, 20]) {\n        rotate([75, 0, 0]) {\n            difference() {\n                cube([18, 28, 2], center = true);\n                translate([0, 0, -1]) cube([16, 26, 3], center = true);\n            }\n        }\n    }\n    \n    // Side windows\n    for(side = [-1, 1]) {\n        translate([0, side * 15.5, 22]) {\n            rotate([0, side * 10, 0]) {\n                cube([40, 1, 12], center = true);\n            }\n        }\n    }\n    \n    // Rear window\n    translate([30, 0, 22]) {\n        rotate([105, 0, 0]) {\n            difference() {\n                cube([20, 28, 2], center = true);\n                translate([0, 0, -1]) cube([18, 26, 3], center = true);\n            }\n        }\n    }\n}\n\n// Details module\nmodule details() {\n    // Front grille\n    translate([-42, 0, 8]) {\n        difference() {\n            cube([4, 30, 8], center = true);\n            for(i = [-3:3]) {\n                translate([0, i * 3, 0]) {\n                    cube([5, 2, 6], center = true);\n                }\n            }\n        }\n    }\n    \n    // Headlights\n    for(side = [-1, 1]) {\n        translate([-40, side * 12, 10]) {\n            sphere(r = 3);\n        }\n    }\n    \n    // Taillights\n    for(side = [-1, 1]) {\n        translate([40, side * 12, 12]) {\n            cube([3, 6, 4], center = true);\n        }\n    }\n    \n    // Exhaust pipes\n    translate([42, 0, 5]) {\n        cylinder(h = 10, r = 2);\n    }\n    translate([42, -7, 5]) {\n        cylinder(h = 10, r = 2);\n    }\n}\n\n// Main assembly\nunion() {\n    fastback_body();\n    wheels();\n    windows();\n    details();\n}",
    "renders": true
  },
  {
    "vehicle": "liftback",
    "openscad_code": "// Liftback car - medium complexity realistic style\n// Designed for 3D printing (no overhangs > 45 degrees)\n\n// Car dimensions (in mm)\ncar_length = 85;\ncar_width = 40;\ncar_height = 25;\nwheel_radius = 8;\nwheel_width = 4;\n\n// Main body module\nmodule body() {\n    difference() {\n        // Main body shell\n        hull() {\n            // Front hood\n            translate([-5, 0, wheel_radius + 2])\n                cube([40, car_width, 8], center=true);\n            \n            // Passenger cabin\n            translate([25, 0, wheel_radius + 6])\n                cube([30, car_width - 6, 12], center=true);\n            \n            // Liftback rear\n            translate([45, 0, wheel_radius + 4])\n                cube([25, car_width - 4, 10], center=true);\n        }\n        \n        // Windows\n        translate([25, 0, wheel_radius + 14])\n            cube([28, car_width - 10, 6], center=true);\n            \n        // Windshield\n        translate([10, 0, wheel_radius + 10])\n            rotate([0, -15, 0])\n            cube([20, car_width - 8, 0.5], center=true);\n            \n        // Rear window\n            translate([40, 0, wheel_radius + 10])\n            rotate([0, 15, 0])\n            cube([18, car_width - 8, 0.5], center=true);\n    }\n    \n    // Roof details\n    translate([25, 0, wheel_radius + 18])\n        cube([30, car_width - 6, 1], center=true);\n}\n\n// Wheel module\nmodule wheel() {\n    difference() {\n        // Tire\n        cylinder(h=wheel_width, r=wheel_radius, center=true, $fn=32);\n        \n        // Rim\n        cylinder(h=wheel_width + 0.5, r=wheel_radius - 2, center=true, $fn=32);\n        \n        // Lug nuts\n        for(i=[0:5]) {\n            rotate([0, 0, i * 60])\n                translate([wheel_radius - 1, 0, 0])\n                cylinder(h=wheel_width + 1, r=1, center=true, $fn=12);\n        }\n    }\n}\n\n// Side mirrors\nmodule side_mirror() {\n    translate([15, car_width/2 + 2, wheel_radius + 10])\n        rotate([0, 30, 0])\n        cube([3, 1, 2]);\n}\n\n// Headlights\nmodule headlights() {\n    // Left headlight\n    translate([0, car_width/2 - 5, wheel_radius + 4])\n        sphere(r=2);\n    \n    // Right headlight\n    translate([0, -(car_width/2 - 5), wheel_radius + 4])\n        sphere(r=2);\n}\n\n// Taillights\nmodule taillights() {\n    // Left taillight\n    translate([car_length - 5, car_width/2 - 5, wheel_radius + 4])\n        cube([2, 3, 1]);\n    \n    // Right taillight\n    translate([car_length - 5, -(car_width/2 - 5), wheel_radius + 4])\n        cube([2, 3, 1]);\n}\n\n// Exhaust pipe\nmodule exhaust() {\n    translate([car_length - 2, car_width/2 - 8, wheel_radius])\n        cylinder(h=5, r=1, center=false);\n}\n\n// Assemble the car\nunion() {\n    // Main body\n    body();\n    \n    // Wheels\n    // Front left\n    translate([15, car_width/2 + wheel_width/2, wheel_radius])\n        rotate([90, 0, 0])\n        wheel();\n    \n    // Front right\n    translate([15, -(car_width/2 + wheel_width/2), wheel_radius])\n        rotate([90, 0, 0])\n        wheel();\n    \n    // Rear left\n    translate([car_length - 20, car_width/2 + wheel_width/2, wheel_radius])\n        rotate([90, 0, 0])\n        wheel();\n    \n    // Rear right\n    translate([car_length - 20, -(car_width/2 + wheel_width/2), wheel_radius])\n        rotate([90, 0, 0])\n        wheel();\n    \n    // Side mirrors\n    side_mirror();\n    mirror([0, 1, 0])\n        side_mirror();\n    \n    // Lights\n    headlights();\n    taillights();\n    \n    // Exhaust\n    exhaust();\n}\n\n// License plate\ntranslate([car_length - 8, 0, wheel_radius + 1])\n    cube([8, 12, 0.5]);",
    "renders": true
  },
  {
    "vehicle": "notchback",
    "openscad_code": "// Realistic Notchback 3D Printable Model\n// Medium complexity, roughly 70 mm long\n\n$fn = 32;  // Smooth curves for 3D printing\n\n// Overall dimensions\nbody_len = 70;\nbody_width = 30;\nbody_height = 20;\n\n// Main body shell\nmodule body_shell() {\n    difference() {\n        // Main body\n        cube([body_len, body_width, body_height], center=true);\n        \n        // Taper top rear for notchback roofline\n        translate([body_len/2-15, 0, body_height/2])\n            rotate([-30, 0, 0])\n                cube([30, body_width+2, 10], center=true);\n    }\n}\n\n// Hood/bonnet slope\nmodule hood() {\n    translate([body_len/2-25, 0, body_height/2-1])\n        rotate([-20, 0, 0])\n            cube([25, body_width-2, 8], center=true);\n}\n\n// Roof with notchback profile\nmodule roof() {\n    difference() {\n        translate([0, 0, body_height/2+5])\n            cube([body_len-20, body_width-6, 10], center=true);\n        \n        // Rear notch cut\n        translate([body_len/2-5, 0, body_height/2+5])\n            rotate([-45, 0, 0])\n                cube([12, body_width-4, 15], center=true);\n    }\n}\n\n// Side windows\nmodule side_windows() {\n    for(side = [-1, 1]) {\n        translate([body_len/2-35, side*body_width/2+0.5, body_height/2+3])\n            cube([20, 0.5, 6], center=true);\n    }\n}\n\n// Wheels\nmodule wheels() {\n    for(side = [-1, 1]) {\n        for(pos = [-20, 20]) {\n            translate([pos, side*body_width/2+2, -body_height/2+3])\n                rotate([90, 0, 0])\n                    cylinder(h=2, r=5, center=true);\n            translate([pos, side*body_width/2+2, -body_height/2+3])\n                rotate([90, 0, 0])\n                    cylinder(h=2.5, r=2, center=true);\n        }\n    }\n}\n\n// Headlights\nmodule headlights() {\n    for(side = [-1, 1]) {\n        translate([body_len/2-1, side*body_width/3, body_height/2-5])\n            sphere(2);\n    }\n}\n\n// Taillights\nmodule taillights() {\n    for(side = [-1, 1]) {\n        translate([-body_len/2+3, side*body_width/3, body_height/2-5])\n            cube([2, 4, 3], center=true);\n    }\n}\n\n// Exhaust pipe\nmodule exhaust() {\n    translate([-body_len/2, body_width/2-3, -body_height/2+2])\n        rotate([0, -5, 0])\n            cylinder(h=8, r=1.5);\n}\n\n// Door handles\nmodule door_handles() {\n    for(side = [-1, 1]) {\n        translate([body_len/2-35, side*body_width/2+0.5, body_height/2-2])\n            cube([8, 0.5, 1], center=true);\n    }\n}\n\n// Windshield\nmodule windshield() {\n    translate([body_len/2-30, 0, body_height/2+5])\n        rotate([20, 0, 0])\n            cube([15, body_width-8, 0.5], center=true);\n}\n\n// Rear window\nmodule rear_window() {\n    translate([-body_len/2+25, 0, body_height/2+3])\n        rotate([45, 0, 0])\n            cube([10, body_width-8, 0.5], center=true);\n}\n\n// Main assembly\nunion() {\n    body_shell();\n    hood();\n    roof();\n    side_windows();\n    wheels();\n    headlights();\n    taillights();\n    exhaust();\n    door_handles();\n    windshield();\n    rear_window();\n}",
    "renders": true
  },
  {
    "vehicle": "hardtop",
    "openscad_code": "// HardTop OpenSCAD Model – realistic style, medium complexity\n// Overall size: ~70 mm long, making it printable on most FDM machines\n\nmodule hardtop() {\n    difference() {\n        // Main shell\n        hull() {\n            translate([0, 0, 12]) cube([66, 26, 8], center = true);\n            translate([0, 0, 0])  cube([58, 20, 12], center = true);\n        }\n\n        // Windshield cut-out\n        translate([-28, 0, 0])\n            rotate([0, 20, 0])\n                cube([20, 30, 20], center = true);\n\n        // Rear-window cut-out\n        translate([28, 0, 0])\n            rotate([0, -15, 0])\n                cube([18, 28, 18], center = true);\n\n        // Side windows (left)\n        for (y = [-8, 8])\n            translate([5, y, 7])\n                rotate([0, 15, 0])\n                    cube([28, 12, 10], center = true);\n\n        // Side windows (right, mirrored)\n        mirror([0, 1, 0])\n            for (y = [-8, 8])\n                translate([5, y, 7])\n                    rotate([0, 15, 0])\n                        cube([28, 12, 10], center = true);\n    }\n\n    // Roof reinforcement ribbing\n    for (x = [-20:10:20])\n        translate([x, 0, 16])\n            cube([6, 26, 1.5], center = true);\n\n    // Rain gutters\n    gutter();\n    mirror([0, 1, 0]) gutter();\n}\n\nmodule gutter() {\n    for (x = [-30:2:30])\n        translate([x, 13, 10])\n            rotate([0, 90, 0])\n                cylinder(h = 1.5, r = 1, $fn = 8);\n}\n\nhardtop();",
    "renders": true
  },
  {
    "vehicle": "landaulet",
    "openscad_code": "// OpenSCAD Landulet – medium complexity, printable, 100 mm long\n// No overhangs >45°, 2 mm walls everywhere\n\n$fn = 32;\n\nmodule landaulet() {\n    // Chassis + floor\n    difference() {\n        cube([80, 35, 5], center = true); // main floor\n        translate([0, 0, 2.5]) cube([82, 37, 6], center = true); // ensure bottom is flat\n    }\n\n    // Front hood\n    hull() {\n        translate([-30, 0, 2.5]) cylinder(h = 5, r = 10);\n        translate([-10, 0, 2.5]) cylinder(h = 5, r = 8);\n    }\n\n    // Rear passenger tub (open)\n    difference() {\n        hull() {\n            translate([20, 0, 2.5]) cylinder(h = 15, r = 10);\n            translate([35, 0, 2.5]) cylinder(h = 15, r = 10);\n        }\n        translate([27.5, 0, 10]) cube([20, 36, 30], center = true); // remove center\n    }\n\n    // Wheels\n    module wheel() {\n        difference() {\n            cylinder(h = 8, r = 8, center = true);\n            cylinder(h = 9, r = 3, center = true);\n        }\n    }\n    for (x = [-25, 25]) {\n        translate([x, 20, 0]) rotate([90, 0, 0]) wheel();\n        translate([x, -20, 0]) rotate([90, 0, 0]) wheel();\n    }\n\n    // Front windshield frame\n    translate([-22, 0, 7.5]) cube([2, 30, 15], center = true);\n    translate([-22, 0, 15]) cube([2, 30, 1], center = true);\n\n    // Rear folding roof bar\n    translate([30, 0, 17]) rotate([0, 90, 0]) cylinder(h = 30, r = 1.5);\n\n    // Headlights\n    translate([-35, 12, 5]) sphere(r = 3);\n    translate([-35, -12, 5]) sphere(r = 3);\n\n    // Door handles\n    translate([0, 18, 8]) cube([6, 1, 1], center = true);\n    translate([0, -18, 8]) cube([6, 1, 1], center = true);\n}\n\nscale(0.8) landaulet();",
    "renders": true
  },
  {
    "vehicle": "targa",
    "openscad_code": "// Targa Top - Medium Complexity, Realistic Style\n// Scale: 1:18 model (approx 90mm long)\n\n// Overall dimensions\nlength = 90;\nwidth = 40;\nheight = 12;\n\n// Wall thickness for 3D printing\nwall = 1.5;\n\n// Main roof panel\nmodule roof_panel() {\n    difference() {\n        // Main roof with slight curve\n        hull() {\n            translate([0, 0, -1])\n                cube([length, width, 2], center=true);\n            translate([0, 0, 1])\n                cube([length-4, width-4, 2], center=true);\n        }\n        \n        // Hollow out interior\n        translate([0, 0, -3])\n            cube([length-wall*2, width-wall*2, height], center=true);\n        \n        // Front edge cut for windshield\n        translate([-length/2+5, 0, -height/2])\n            cube([10, width+2, height], center=false);\n    }\n}\n\n// Reinforcement ribs underneath\nmodule ribs() {\n    for (x = [-30, -10, 10, 30]) {\n        translate([x, 0, -height/2+wall+0.5])\n            cube([2, width-4, height-1], center=true);\n    }\n}\n\n// Mounting points\nmodule mounts() {\n    // Front mounts\n    for (x = [-length/2+8, length/2-8]) {\n        translate([x, width/2-3, -height/2])\n            cylinder(h=5, r=3, $fn=16);\n        translate([x, -width/2+3, -height/2])\n            cylinder(h=5, r=3, $fn=16);\n    }\n    \n    // Rear mounts\n    for (x = [-length/2+15, length/2-15]) {\n        translate([x, width/2-5, -height/2])\n            cylinder(h=4, r=2.5, $fn=12);\n        translate([x, -width/2+5, -height/2])\n            cylinder(h=4, r=2.5, $fn=12);\n    }\n}\n\n// Weather sealing lip\nmodule seal_lip() {\n    translate([0, 0, -height/2])\n        difference() {\n            cube([length+2, width+2, 1.5], center=true);\n            cube([length, width, 2], center=true);\n        }\n}\n\n// Surface detail - subtle panel lines\nmodule panel_lines() {\n    for (x = [-20, 0, 20]) {\n        translate([x, 0, 0.1])\n            cube([0.5, width-4, 0.2], center=true);\n    }\n    for (y = [-15, 0, 15]) {\n        translate([0, y, 0.1])\n            cube([length-4, 0.5, 0.2], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    roof_panel();\n    ribs();\n    mounts();\n    seal_lip();\n    panel_lines();\n}",
    "renders": true
  },
  {
    "vehicle": "grandtourer",
    "openscad_code": "// Grand Tourer - Realistic Style, Medium Complexity\n// Scale: 1:64 (approximately 75mm long)\n\n// Car dimensions\ncar_length = 75;\ncar_width = 30;\ncar_height = 20;\nwheelbase = 45;\ntrack_width = 26;\n\n// Wheel parameters\nwheel_diameter = 12;\nwheel_width = 5;\ntire_thickness = 2;\n\nmodule wheel() {\n    // Tire\n    difference() {\n        cylinder(h=wheel_width, d=wheel_diameter, $fn=32);\n        translate([0, 0, -0.1])\n            cylinder(h=wheel_width+0.2, d=wheel_diameter-tire_thickness*2, $fn=32);\n    }\n    \n    // Rim\n    color(\"silver\")\n    translate([0, 0, wheel_width/2])\n        cylinder(h=1, d=wheel_diameter-tire_thickness*2-1, $fn=24);\n}\n\nmodule body() {\n    // Main body shell\n    color(\"red\")\n    union() {\n        // Hood\n        translate([-car_length/2 + 15, 0, 2])\n            scale([30, car_width-2, 8])\n                cube([1, 1, 1], center=true);\n        \n        // Cabin\n        translate([-5, 0, 8])\n            scale([25, car_width-4, 10])\n                cube([1, 1, 1], center=true);\n        \n        // Trunk\n        translate([15, 0, 4])\n            scale([20, car_width-2, 6])\n                cube([1, 1, 1], center=true);\n    }\n    \n    // Roof\n    color(\"red\")\n    translate([-5, 0, 13])\n        scale([25, car_width-8, 1])\n            cube([1, 1, 1], center=true);\n    \n    // Side mirrors\n    color(\"red\")\n    translate([-8, car_width/2-1, 10])\n        cube([2, 1, 1]);\n    translate([-8, -car_width/2, 10])\n        cube([2, 1, 1]);\n}\n\nmodule windows() {\n    // Windshield\n    color(\"lightblue\", 0.6)\n    translate([-12, 0, 11])\n        rotate([30, 0, 0])\n            scale([15, car_width-6, 0.5])\n                cube([1, 1, 1], center=true);\n    \n    // Rear window\n    color(\"lightblue\", 0.6)\n    translate([2, 0, 11])\n        rotate([-20, 0, 0])\n            scale([15, car_width-6, 0.5])\n                cube([1, 1, 1], center=true);\n    \n    // Side windows\n    color(\"lightblue\", 0.6)\n    for(y = [car_width/2-0.5, -car_width/2+0.5]) {\n        translate([-10, y, 9])\n            scale([20, 0.5, 8])\n                cube([1, 1, 1], center=true);\n    }\n}\n\nmodule lights() {\n    // Headlights\n    color(\"yellow\")\n    translate([-car_length/2+1, car_width/2-4, 4])\n        sphere(d=2);\n    translate([-car_length/2+1, -car_width/2+4, 4])\n        sphere(d=2);\n    \n    // Taillights\n    color(\"red\")\n    translate([car_length/2-2, car_width/2-3, 5])\n        cube([1, 5, 2]);\n    translate([car_length/2-2, -car_width/2+3, 5])\n        cube([1, 5, 2]);\n}\n\nmodule chassis() {\n    color(\"black\")\n    // Floor pan\n    translate([0, 0, 1])\n        scale([car_length, car_width, 1])\n            cube([1, 1, 1], center=true);\n    \n    // Front bumper\n    translate([-car_length/2+1, 0, 2])\n        scale([2, car_width, 4])\n            cube([1, 1, 1], center=true);\n    \n    // Rear bumper\n    translate([car_length/2-1, 0, 3])\n        scale([2, car_width, 5])\n            cube([1, 1, 1], center=true);\n}\n\nmodule exhaust() {\n    color(\"silver\")\n    translate([car_length/2-5, car_width/2-2, 1])\n        cylinder(h=5, d=1.5);\n    translate([car_length/2-5, -car_width/2+2, 1])\n        cylinder(h=5, d=1.5);\n}\n\n// Assembly\nchassis();\nbody();\nwindows();\nlights();\nexhaust();\n\n// Wheels\n// Front left\ntranslate([-wheelbase/2, car_width/2, wheel_diameter/2])\n    rotate([90, 0, 0])\n        wheel();\n\n// Front right\ntranslate([-wheelbase/2, -car_width/2, wheel_diameter/2])\n    rotate([90, 0, 0])\n        wheel();\n\n// Rear left\ntranslate([wheelbase/2, car_width/2, wheel_diameter/2])\n    rotate([90, 0, 0])\n        wheel();\n\n// Rear right\ntranslate([wheelbase/2, -car_width/2, wheel_diameter/2])\n    rotate([90, 0, 0])\n        wheel();",
    "renders": true
  },
  {
    "vehicle": "supercar",
    "openscad_code": "// Supercar - Realistic Medium Complexity\n// Designed for 3D printing at ~80mm length\n\n$fn = 32;\n\n// Main module\nmodule supercar() {\n    // Body shell\n    body();\n    \n    // Wheels\n    translate([-30, -20, -5]) wheel();\n    translate([-30, 20, -5]) wheel();\n    translate([30, -20, -5]) wheel();\n    translate([30, 20, -5]) wheel();\n    \n    // Windows\n    windows();\n    \n    // Exhaust\n    exhaust();\n    \n    // Spoiler\n    spoiler();\n}\n\n// Main body shell\nmodule body() {\n    // Lower chassis\n    difference() {\n        // Main block\n        translate([0, 0, 5]) cube([80, 40, 10], center=true);\n        \n        // Wheel wells\n        for (x = [-35, 35])\n            for (y = [-22, 22])\n                translate([x, y, 5]) cylinder(h=15, r=12, center=true);\n    }\n    \n    // Cabin\n    difference() {\n        hull() {\n            translate([0, 0, 15]) cube([60, 35, 15], center=true);\n            translate([25, 0, 20]) cube([40, 30, 10], center=true);\n        }\n        \n        // Windshield\n        translate([15, 0, 22]) rotate([0, -30, 0]) \n            cube([40, 32, 2], center=true);\n            \n        // Side windows\n        translate([0, 18, 20]) rotate([0, -20, 0])\n            cube([70, 2, 12], center=true);\n        translate([0, -18, 20]) rotate([0, -20, 0])\n            cube([70, 2, 12], center=true);\n    }\n    \n    // Hood slope\n    translate([-20, 0, 15]) rotate([0, -15, 0])\n        cube([30, 38, 8], center=true);\n        \n    // Front bumper\n    translate([-40, 0, 5]) cube([10, 35, 8], center=true);\n    \n    // Rear bumper\n    translate([40, 0, 5]) cube([10, 35, 8], center=true);\n    \n    // Side skirts\n    translate([0, 20, 2]) cube([80, 2, 4], center=true);\n    translate([0, -20, 2]) cube([80, 2, 4], center=true);\n}\n\n// Wheel assembly\nmodule wheel() {\n    // Tire\n    color(\"black\") cylinder(h=8, r=12);\n    \n    // Rim\n    color(\"silver\") translate([0, 0, 4]) \n        difference() {\n            cylinder(h=2, r=11);\n            cylinder(h=3, r=8);\n            for (i = [0:5:360]) \n                rotate([0, 0, i]) \n                    translate([9.5, 0, 0]) \n                        cube([1, 2, 3], center=true);\n        }\n}\n\n// Windows\nmodule windows() {\n    color(\"blue\", 0.6) {\n        // Rear window\n        translate([25, 0, 25]) rotate([0, -30, 0])\n            cube([25, 30, 1.5], center=true);\n            \n        // Quarter windows\n        translate([10, 17, 20]) rotate([0, -20, 0])\n            cube([20, 1.5, 10], center=true);\n        translate([10, -17, 20]) rotate([0, -20, 0])\n            cube([20, 1.5, 10], center=true);\n    }\n}\n\n// Exhaust pipes\nmodule exhaust() {\n    color(\"silver\") {\n        translate([42, 8, 8]) cylinder(h=12, r=3);\n        translate([42, -8, 8]) cylinder(h=12, r=3);\n        \n        // Exhaust tips\n        translate([48, 8, 8]) cylinder(h=2, r=4);\n        translate([48, -8, 8]) cylinder(h=2, r=4);\n    }\n}\n\n// Rear spoiler\nmodule spoiler() {\n    // Posts\n    color(\"black\") {\n        translate([35, 15, 25]) cylinder(h=8, r=2);\n        translate([35, -15, 25]) cylinder(h=8, r=2);\n    }\n    \n    // Wing\n    color(\"black\") {\n        translate([35, 0, 34]) cube([30, 35, 2], center=true);\n    }\n}\n\n// Scale to printable size\nscale([0.8, 0.8, 0.8]) supercar();",
    "renders": true
  },
  {
    "vehicle": "hypercar",
    "openscad_code": "// Hypercar - Realistic Medium Complexity\n// Scale: 1:72 (approx 70mm long)\n\n// wheel module\nmodule wheel(r=4, w=2) {\n    color(\"black\") \n    difference() {\n        cylinder(h=w, r=r, center=true, $fn=36);\n        cylinder(h=w+0.2, r=r*0.4, center=true, $fn=36);\n    }\n}\n\n// rim module\nmodule rim(r=3.5, w=2.2) {\n    color(\"silver\") \n    difference() {\n        cylinder(h=w, r=r, center=true, $fn=6);\n        cylinder(h=w+0.2, r=r-1, center=true, $fn=32);\n    }\n    for (i=[0:5:360]) {\n        rotate([0,0,i])\n        translate([r-0.5,0,0])\n        cube([1,0.5,w*0.9], center=true);\n    }\n}\n\n// side mirror module\nmodule mirror() {\n    union() {\n        color(\"black\") \n        translate([0,0,2]) \n        cube([1.5,0.8,0.5], center=true);\n        color(\"silver\") \n        translate([-0.8,0,1]) \n        rotate([0,90,0]) \n        cylinder(h=2, r=0.3, center=true);\n    }\n}\n\n// main body\ncolor(\"red\") {\n    // chassis base\n    translate([0,0,2]) \n    cube([50,20,2], center=true);\n    \n    // mid cabin\n    translate([0,0,5]) \n    cube([25,18,4], center=true);\n    \n    // rear engine cover\n    translate([-10,0,6]) \n    cube([15,16,3], center=true);\n    \n    // front hood\n    translate([12,0,4]) \n    cube([20,14,2], center=true);\n    \n    // windshield\n    color(\"lightblue\") \n    translate([4,0,7.5]) \n    rotate([40,0,0]) \n    cube([18,16,0.5], center=true);\n    \n    // side windows\n    color(\"lightblue\") \n    translate([-4,10,6.5]) \n    rotate([40,0,0]) \n    cube([20,0.5,2.5], center=true);\n}\n\n// front splitter\ncolor(\"black\") \ntranslate([22,0,1]) \ncube([4,18,0.5], center=true);\n\n// rear diffuser\ncolor(\"black\") \ntranslate([-22,0,1]) \ncube([6,18,1], center=true);\n\n// rear wing\ncolor(\"black\") {\n    translate([-18,0,9]) \n    cube([12,14,0.5], center=true);\n    translate([-18,0,6.5]) \n    cube([0.5,14,2.5], center=true);\n    translate([-18,0,6.5]) \n    mirror([1,0,0]) \n    cube([0.5,14,2.5], center=true);\n}\n\n// headlights\ncolor(\"yellow\") \ntranslate([20,7,3]) \nsphere(r=1.2, $fn=16);\ncolor(\"yellow\") \ntranslate([20,-7,3]) \nsphere(r=1.2, $fn=16);\n\n// taillights\ncolor(\"red\") \ntranslate([-22,7,3]) \nsphere(r=1, $fn=16);\ncolor(\"red\") \ntranslate([-22,-7,3]) \nsphere(r=1, $fn=16);\n\n// exhaust pipes\ncolor(\"gray\") \ntranslate([-24.5,4,2]) \ncylinder(h=3, r=0.7, center=true);\ncolor(\"gray\") \ntranslate([-24.5,-4,2]) \ncylinder(h=3, r=0.7, center=true);\n\n// wheels and rims\ntranslate([15,10,1.5]) { wheel(); rim(); }\ntranslate([15,-10,1.5]) { wheel(); rim(); }\ntranslate([-15,10,1.5]) { wheel(); rim(); }\ntranslate([-15,-10,1.5]) { wheel(); rim(); }\n\n// side mirrors\ntranslate([8,10,5.5]) mirror();\ntranslate([8,-10,5.5]) mirror();",
    "renders": true
  },
  {
    "vehicle": "musclecar",
    "openscad_code": "// Muscle Car - Realistic Style, Medium Complexity\n// Designed for 3D printing - no overhangs, 60mm length\n\n$fn = 32;\n\n// Main body module\nmodule musclecar() {\n    // Wheelbase\n    wheelbase = 35;\n    width = 22;\n    \n    // Main chassis\n    difference() {\n        // Lower body\n        union() {\n            // Main hull\n            hull() {\n                translate([-30, -11, 0]) cube([60, 22, 8]);\n                translate([-25, -10, 8]) cube([50, 20, 5]);\n            }\n            \n            // Hood with slight slope\n            translate([15, -11, 8]) cube([15, 22, 3]);\n            \n            // Roof\n            translate([-5, -9, 13]) cube([20, 18, 6]);\n            \n            // Trunk\n            translate([-25, -10, 8]) cube([10, 20, 4]);\n        }\n        \n        // Cabin windows\n        translate([-10, -8, 14]) cube([15, 16, 4]);\n    }\n    \n    // Upper body details\n    translate([20, -8, 11]) cube([10, 16, 2]); // Hood scoop\n    \n    // Bumper\n    translate([27, -11, 0]) cube([3, 22, 5]);\n    translate([-27, -11, 0]) cube([3, 22, 5]);\n    \n    // Wheels\n    for(side = [-1, 1]) {\n        translate([15, side * 11, 4]) rotate([0, 0, 90]) wheel();\n        translate([-15, side * 11, 4]) rotate([0, 0, 90]) wheel();\n    }\n    \n    // Side mirrors\n    for(side = [-1, 1]) {\n        translate([5, side * 11, 12]) cube([2, 3 * side, 3]);\n    }\n    \n    // Exhaust pipes\n    translate([-27, -7, 2]) cylinder(h=8, r=1.5);\n    translate([-27, 7, 2]) cylinder(h=8, r=1.5);\n    \n    // Headlights\n    translate([27, -7, 5]) sphere(r=2);\n    translate([27, 7, 5]) sphere(r=2);\n    \n    // Taillights\n    translate([-27, -7, 5]) sphere(r=2);\n    translate([-27, 7, 5]) sphere(r=2);\n    \n    // Spoiler\n    translate([-25, -10, 12]) cube([1, 20, 2]);\n}\n\n// Wheel module\nmodule wheel() {\n    difference() {\n        // Tire\n        cylinder(h=6, r=5);\n        \n        // Rim\n        translate([0, 0, -0.1]) cylinder(h=6.2, r=3);\n        \n        // Spokes\n        for(i = [0:5]) {\n            rotate([0, 0, i * 60]) \n                translate([2, 0, 0]) cube([1.5, 0.5, 6.2]);\n        }\n    }\n}\n\n// Generate the car\nmusclecar();",
    "renders": true
  },
  {
    "vehicle": "ponycar",
    "openscad_code": "// Ponycar - Realistic Style, Medium Complexity\n// Designed for 3D printing without supports\n\n$fn = 32;\n\n// Main body\nmodule body() {\n    // Lower chassis\n    translate([0, 0, 2])\n    cube([40, 18, 5], center=true);\n    \n    // Main cabin area\n    translate([0, 0, 8])\n    cube([35, 16, 8], center=true);\n    \n    // Hood\n    difference() {\n        translate([-12, 0, 6])\n        cube([22, 14, 4], center=true);\n        \n        // Hood slope\n        translate([-20, 0, 9])\n        rotate([0, 20, 0])\n        cube([25, 16, 5], center=true);\n    }\n    \n    // Trunk\n    translate([12, 0, 6])\n    cube([18, 14, 4], center=true);\n}\n\n// Wheels\nmodule wheel() {\n    // Tire\n    difference() {\n        cylinder(h=4, r=6);\n        cylinder(h=4.5, r=4.5);\n    }\n    \n    // Rim\n    color(\"silver\")\n    cylinder(h=2, r=4.4);\n}\n\n// Wheel wells\nmodule wheel_well() {\n    translate([0, 0, -1])\n    cylinder(h=6, r=6.5, center=true);\n}\n\n// Windows\nmodule windows() {\n    // Windshield\n    translate([-8, 0, 11.5])\n    rotate([0, -30, 0])\n    cube([12, 14, 0.5], center=true);\n    \n    // Rear window\n    translate([8, 0, 11.5])\n    rotate([0, 30, 0])\n    cube([12, 14, 0.5], center=true);\n    \n    // Side windows\n    for(x=[-5, 5]) {\n        translate([x, 8.5, 10])\n        cube([10, 0.5, 6], center=true);\n    }\n}\n\n// Headlights\nmodule headlights() {\n    for(x=[-8, 8]) {\n        translate([-18, x, 5])\n        sphere(r=1.5);\n    }\n}\n\n// Taillights\nmodule taillights() {\n    for(x=[-5, 5]) {\n        translate([18, x, 5])\n        sphere(r=1.2);\n    }\n}\n\n// Exhaust\nmodule exhaust() {\n    translate([20, -7, 2])\n    rotate([0, 0, -5])\n    cylinder(h=8, r=1);\n}\n\n// Side mirrors\nmodule mirrors() {\n    for(side=[-1, 1]) {\n        translate([5, side*9, 9])\n        cube([3, 1, 2], center=true);\n    }\n}\n\n// Assemble the car\nunion() {\n    // Main body\n    body();\n    \n    // Cut wheel wells\n    for(pos=[[-12, 8], [-12, -8], [12, 8], [12, -8]]) {\n        translate([pos[0], pos[1], 2.5])\n        wheel_well();\n    }\n    \n    // Add windows\n    color(\"lightblue\")\n    windows();\n    \n    // Add lights\n    color(\"yellow\")\n    headlights();\n    \n    color(\"red\")\n    taillights();\n    \n    // Add mirrors\n    color(\"black\")\n    mirrors();\n    \n    // Add exhaust\n    color(\"gray\")\n    exhaust();\n}\n\n// Add wheels\nfor(pos=[[-12, 8, 2], [-12, -8, 2], [12, 8, 2], [12, -8, 2]]) {\n    translate(pos)\n    color(\"black\")\n    wheel();\n}",
    "renders": true
  },
  {
    "vehicle": "keicar",
    "openscad_code": "// Kei Car - Medium Complexity Realistic Style\n// Dimensions in mm, designed for 3D printing\n\nscale_factor = 0.7;  // Adjust overall size for 100mm max dimension\nscale([scale_factor, scale_factor, scale_factor]) {\n\n    // Main body shell\n    module body_shell() {\n        difference() {\n            // Main body block\n            translate([0, 0, 30])\n                cube([70, 35, 25], center=true);\n            \n            // Windshield cutout\n            translate([25, 0, 40])\n                cube([30, 32, 20], center=true);\n                \n            // Side windows\n            for(side = [-1, 1]) {\n                translate([10, side*15, 40])\n                    cube([40, 8, 15], center=true);\n            }\n        }\n        \n        // Hood\n        translate([-30, 0, 25])\n            cube([25, 34, 15], center=true);\n            \n        // Roof\n        translate([0, 0, 50])\n            cube([60, 34, 3], center=true);\n    }\n    \n    // Wheels\n    module wheel(pos_x, pos_y) {\n        translate([pos_x, pos_y, 10]) {\n            // Tire\n            cylinder(h=8, r=10, $fn=20);\n            // Rim\n            translate([0, 0, 1])\n                cylinder(h=6, r=7, $fn=6);\n            // Hubcap\n            translate([0, 0, 4])\n                cylinder(h=1, r=6, $fn=20);\n        }\n    }\n    \n    // Headlights\n    module headlights() {\n        for(side = [-1, 1]) {\n            translate([-42, side*12, 30])\n                sphere(r=4);\n        }\n    }\n    \n    // Taillights\n    module taillights() {\n        for(side = [-1, 1]) {\n            translate([42, side*12, 30])\n                cube([3, 6, 4], center=true);\n        }\n    }\n    \n    // Bumpers\n    module bumpers() {\n        // Front bumper\n        translate([-45, 0, 20])\n            cube([5, 36, 8], center=true);\n            \n        // Rear bumper\n        translate([45, 0, 20])\n            cube([5, 36, 8], center=true);\n    }\n    \n    // Side mirrors\n    module mirrors() {\n        for(side = [-1, 1]) {\n            translate([20, side*18, 45]) {\n                // Mirror stem\n                rotate([90, 0, 0])\n                    cylinder(h=8, r=1, $fn=8);\n                // Mirror head\n                translate([0, 0, 8])\n                    cube([6, 10, 4], center=true);\n            }\n        }\n    }\n    \n    // Door handles\n    module door_handles() {\n        for(side = [-1, 1]) {\n            translate([-10, side*17.5, 30])\n                cube([8, 1, 2], center=true);\n        }\n    }\n    \n    // License plates\n    module license_plates() {\n        // Front plate\n        translate([-42, 0, 25])\n            cube([8, 20, 1], center=true);\n            \n        // Rear plate\n        translate([42, 0, 25])\n            cube([8, 20, 1], center=true);\n    }\n    \n    // Exhaust pipe\n    module exhaust() {\n        translate([42, -12, 15])\n            rotate([90, 0, 0])\n                cylinder(h=12, r=2, $fn=12);\n    }\n    \n    // Assemble the car\n    union() {\n        body_shell();\n        \n        // Wheels - positioned for printing\n        wheel(-25, -15);\n        wheel(-25, 15);\n        wheel(25, -15);\n        wheel(25, 15);\n        \n        headlights();\n        taillights();\n        bumpers();\n        mirrors();\n        door_handles();\n        license_plates();\n        exhaust();\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "subcompact",
    "openscad_code": "// Subcompact car - realistic style, medium complexity\n// Designed for 3D printing, no overhangs greater than 45 degrees\n\n$fn = 32;\n\n// Main car body\nmodule car_body() {\n    // Lower chassis\n    translate([0, 0, 3]) {\n        cube([45, 20, 4], center=true);\n    }\n    \n    // Main passenger compartment\n    translate([0, 0, 8]) {\n        cube([40, 18, 8], center=true);\n    }\n    \n    // Roof\n    translate([0, 0, 14.5]) {\n        difference() {\n            cube([38, 16, 3], center=true);\n            cube([36, 14, 3.1], center=true);\n        }\n    }\n    \n    // Hood slope\n    translate([-12, 0, 8]) {\n        rotate([0, -15, 0]) {\n            cube([16, 16, 4], center=true);\n        }\n    }\n    \n    // Trunk\n    translate([12, 0, 8]) {\n        rotate([0, 10, 0]) {\n            cube([14, 14, 4], center=true);\n        }\n    }\n}\n\n// Wheels module\nmodule wheel() {\n    difference() {\n        cylinder(h=3, r=4.5, center=true);\n        cylinder(h=3.1, r=2, center=true);\n    }\n}\n\n// Wheel arches\nmodule wheel_arch() {\n    translate([0, 0, -1.5]) {\n        difference() {\n            cylinder(h=7, r=5.5, center=true);\n            cylinder(h=7.1, r=4.8, center=true);\n        }\n    }\n}\n\n// Windows\nmodule windows() {\n    // Windshield\n    translate([-10, 0, 11]) {\n        rotate([0, -30, 0]) {\n            cube([12, 14, 0.5], center=true);\n        }\n    }\n    \n    // Rear window\n    translate([10, 0, 11]) {\n        rotate([0, 30, 0]) {\n            cube([12, 14, 0.5], center=true);\n        }\n    }\n    \n    // Side windows\n    for(x = [-6, 6]) {\n        translate([0, x, 11]) {\n            cube([30, 0.5, 5], center=true);\n        }\n    }\n}\n\n// Headlights and taillights\nmodule lights() {\n    // Headlights\n    for(y = [-6, 6]) {\n        translate([-22, y, 6]) {\n            sphere(r=1.5);\n        }\n    }\n    \n    // Taillights\n    for(y = [-6, 6]) {\n        translate([22, y, 6]) {\n            sphere(r=1.5);\n        }\n    }\n}\n\n// Bumpers\nmodule bumpers() {\n    // Front bumper\n    translate([-24, 0, 4]) {\n        cube([4, 18, 3], center=true);\n    }\n    \n    // Rear bumper\n    translate([24, 0, 4]) {\n        cube([4, 18, 3], center=true);\n    }\n}\n\n// Side mirrors\nmodule mirrors() {\n    for(side = [-1, 1]) {\n        translate([-5, side * 9.5, 11]) {\n            cube([2, 1, 1.5], center=true);\n        }\n    }\n}\n\n// Door handles\nmodule door_handles() {\n    for(side = [-1, 1]) {\n        translate([2, side * 9.5, 7]) {\n            cube([4, 0.5, 0.5], center=true);\n        }\n    }\n}\n\n// License plates\nmodule license_plates() {\n    // Front plate\n    translate([-23, 0, 4]) {\n        cube([0.5, 8, 2], center=true);\n    }\n    \n    // Rear plate\n    translate([23, 0, 4]) {\n        cube([0.5, 8, 2], center=true);\n    }\n}\n\n// Main assembly\nunion() {\n    // Car body\n    car_body();\n    \n    // Wheels and wheel arches\n    for(x = [-15, 15]) {\n        for(y = [-8, 8]) {\n            translate([x, y, 0]) {\n                wheel_arch();\n            }\n            translate([x, y, 0]) {\n                rotate([90, 0, 0]) {\n                    wheel();\n                }\n            }\n        }\n    }\n    \n    // Windows (slightly inset)\n    color([0.8, 0.9, 1]) {\n        windows();\n    }\n    \n    // Lights\n    color([1, 1, 0.8]) {\n        lights();\n    }\n    \n    // Bumpers\n    color([0.2, 0.2, 0.2]) {\n        bumpers();\n    }\n    \n    // Mirrors\n    color([0.1, 0.1, 0.1]) {\n        mirrors();\n    }\n    \n    // Door handles\n    color([0.3, 0.3, 0.3]) {\n        door_handles();\n    }\n    \n    // License plates\n    color([0.9, 0.9, 0.9]) {\n        license_plates();\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "compact",
    "openscad_code": "// Compact makeup mirror with realistic styling\n// Overall dimensions ~70mm diameter, 15mm thick\n\n$fn = 64;  // Smooth curves\n\n// Main parameters\ndiameter = 70;\nheight = 8;\nwall_thick = 2;\nhinge_gap = 0.3;\n\n// Base module for both halves\nmodule compact_half(base_height, top_offset) {\n    difference() {\n        // Outer shell with rounded edges\n        minkowski() {\n            cylinder(h = base_height, d = diameter);\n            sphere(r = 3);\n        }\n        \n        // Hollow interior\n        translate([0, 0, wall_thick])\n            minkowski() {\n                cylinder(h = base_height - wall_thick*2, d = diameter - wall_thick*2);\n                sphere(r = 2);\n            }\n        \n        // Flatten bottom\n        translate([0, 0, -1])\n            cube([diameter+2, diameter+2, 3], center = true);\n    }\n    \n    // Inner lip for mirror seating\n    translate([0, 0, top_offset - 1])\n        cylinder(h = 1.5, d = diameter - wall_thick*4);\n}\n\n// Hinge mechanism\nmodule hinge(pin_radius, length) {\n    // Pin\n    rotate([90, 0, 0])\n        cylinder(h = length, r = pin_radius);\n    \n    // Supports\n    for(side = [-1, 1]) {\n        translate([side * (diameter/2 - 8), 0, 0])\n            rotate([90, 0, 0])\n                cylinder(h = 6, r = pin_radius + 1);\n    }\n}\n\n// Snap closure\nmodule snap() {\n    // Male part\n    translate([0, -diameter/2 + 3, height/2])\n        cube([8, 3, 4], center = true);\n    \n    // Female part with clearance\n    translate([0, diameter/2 - 3, height/2 - 0.2])\n        cube([8.5, 3.5, 4.5], center = true);\n}\n\n// Decorative texture pattern\nmodule texture() {\n    for(i = [0:35]) {\n        rotate([0, 0, i * 10])\n            translate([diameter/2 - 2, 0, 2])\n                cube([0.5, 0.3, 1], center = true);\n    }\n}\n\n// Bottom half\ntranslate([0, 0, 0])\n    compact_half(height, height - 1);\n\ntranslate([0, 0, height - 1])\n    mirror([0, 0, 1])\n        compact_half(height, height - 1);\n\n// Mirror surface (slightly recessed)\ntranslate([0, 0, height - 3.5])\n    cylinder(h = 0.5, d = diameter - wall_thick*6);\n\n// Hinge assembly (centered)\ntranslate([0, 0, height - 1])\n    hinge(pin_radius = 2.5, length = diameter - 16);\n\n// Closure mechanism\nsnap();\n\n// Add texture to both halves\ntranslate([0, 0, height - 1])\n    texture();\ntranslate([0, 0, 0])\n    texture();",
    "renders": true
  },
  {
    "vehicle": "midsize",
    "openscad_code": "// Midsize SUV - Realistic Medium Complexity\n// Approx 90mm long, 35mm wide, 35mm high\n\n$fn = 32;\n\n// Main body dimensions\nbody_length = 80;\nbody_width = 30;\nbody_height = 20;\n\n// Wheel dimensions\nwheel_diameter = 12;\nwheel_width = 6;\n\n// Create the entire model\nmodule suv() {\n    // Main body - slightly tapered\n    hull() {\n        translate([-body_length/2, -body_width/2, 0])\n            cube([body_length, body_width, body_height]);\n        translate([-body_length/2 + 5, -body_width/2 + 2, body_height])\n            cube([body_length - 10, body_width - 4, 8]);\n    }\n    \n    // Hood and windshield area\n    difference() {\n        translate([-body_length/2 + 25, -body_width/2, body_height])\n            cube([body_length/2 - 10, body_width, 15]);\n        \n        // Windshield angle\n        translate([-body_length/2 + 20, -body_width/2 - 1, body_height + 8])\n            rotate([0, -30, 0])\n                cube([20, body_width + 2, 10]);\n    }\n    \n    // Roof\n    translate([-15, -body_width/2 + 3, body_height + 15])\n        cube([30, body_width - 6, 5]);\n    \n    // Rear section\n    translate([body_length/2 - 25, -body_width/2, body_height])\n        cube([25, body_width, 12]);\n    \n    // Front bumper\n    translate([-body_length/2, -body_width/2 + 2, 0])\n        cube([8, body_width - 4, 8]);\n    \n    // Rear bumper\n    translate([body_length/2 - 8, -body_width/2 + 2, 0])\n        cube([8, body_width - 4, 8]);\n    \n    // Side mirrors\n    translate([-body_length/2 + 22, body_width/2, body_height + 8])\n        cube([3, 4, 2]);\n    translate([-body_length/2 + 22, -body_width/2 - 4, body_height + 8])\n        cube([3, 4, 2]);\n    \n    // Wheels\n    for(side = [-1, 1]) {\n        translate([-20, side * (body_width/2 + wheel_width/2), wheel_diameter/2])\n            rotate([90, 0, 0])\n                cylinder(h=wheel_width, d=wheel_diameter);\n        translate([20, side * (body_width/2 + wheel_width/2), wheel_diameter/2])\n            rotate([90, 0, 0])\n                cylinder(h=wheel_width, d=wheel_diameter);\n    }\n    \n    // Headlights\n    translate([-body_length/2 + 2, -body_width/2 + 4, 8])\n        cube([3, 4, 3]);\n    translate([-body_length/2 + 2, body_width/2 - 8, 8])\n        cube([3, 4, 3]);\n    \n    // Taillights\n    translate([body_length/2 - 5, -body_width/2 + 4, 10])\n        cube([3, 4, 3]);\n    translate([body_length/2 - 5, body_width/2 - 8, 10])\n        cube([3, 4, 3]);\n    \n    // Windows\n    color(\"lightblue\") {\n        // Front windshield\n        translate([-body_length/2 + 15, -body_width/2 + 2, body_height + 8])\n            rotate([0, -30, 0])\n                cube([18, body_width - 4, 0.5]);\n        \n        // Side windows\n        for(i = [0:1]) {\n            translate([-5 + i * 15, -body_width/2 + 0.5, body_height + 12])\n                cube([10, body_width - 1, 3]);\n        }\n        \n        // Rear windshield\n        translate([body_length/2 - 15, -body_width/2 + 2, body_height + 8])\n            rotate([0, 30, 0])\n                cube([18, body_width - 4, 0.5]);\n    }\n    \n    // Door handles\n    translate([-10, body_width/2 + 0.5, 12])\n        cube([8, 1, 2]);\n    translate([5, body_width/2 + 0.5, 12])\n        cube([8, 1, 2]);\n}\n\n// Generate the model\nsuv();",
    "renders": true
  },
  {
    "vehicle": "fullsize",
    "openscad_code": "// Full-size (50 mm) realistic revolver model – medium complexity\n// No support needed when printed upright.  All parts have ≥1 mm walls.\n\n// Overall scale factor – everything is generated at 2× and then scaled\n// so the longest dimension becomes ~50 mm\nscale_factor = 0.5;\n\nmodule revolver() {\n    // Main frame\n    difference() {\n        union() {\n            // Grip\n            translate([-4, -22, 0]) grip();\n\n            // Cylinder / drum\n            translate([0, 0, 0]) rotate([0, 90, 0]) drum();\n\n            // Barrel\n            translate([18, 0, 0]) rotate([0, 90, 0]) barrel();\n\n            // Top strap / rail\n            translate([0, 0, 8])\n                cube([30, 12, 3], center = true);\n        }\n\n        // Trigger guard hole\n        translate([3, -10, -1])\n            rotate([90, 0, 0])\n                cylinder(h = 10, d = 8, $fn = 32);\n\n        // Cylinder gap cut\n        translate([6, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h = 30, d = 13, $fn = 32);\n    }\n\n    // Trigger\n    translate([5, -11, 0]) trigger();\n}\n\nmodule grip() {\n    difference() {\n        hull() {\n            translate([0, 0, -3]) cube([12, 22, 6], center = true);\n            translate([0, -10, 0]) cube([8, 10, 4], center = true);\n        }\n        // Screw recesses\n        for (y = [-7, -15])\n            translate([0, y, 3])\n                rotate([90, 0, 0])\n                    cylinder(h = 3, d = 3, $fn = 16);\n    }\n}\n\nmodule drum() {\n    difference() {\n        union() {\n            cylinder(h = 12, d = 20, $fn = 64);\n            // Front collar\n            translate([0, 0, 6])\n                cylinder(h = 2, d = 18, $fn = 32);\n            // Rear collar\n            translate([0, 0, -6])\n                cylinder(h = 2, d = 18, $fn = 32);\n        }\n\n        // 6 chambers\n        for (i = [0:5])\n            rotate([0, 0, i * 60])\n                translate([7, 0, 0])\n                    rotate([0, 90, 0])\n                        cylinder(h = 14, d = 4.5, $fn = 16);\n    }\n}\n\nmodule barrel() {\n    difference() {\n        // Outer barrel\n        cylinder(h = 35, d = 10, $fn = 32);\n        // Bore\n        translate([0, 0, -1])\n            cylinder(h = 37, d = 4, $fn = 32);\n    }\n}\n\nmodule trigger() {\n    difference() {\n        union() {\n            // Trigger blade\n            translate([0, 0, 2])\n                cube([3, 8, 1], center = true);\n            // Trigger spur\n            translate([0, 4, 0])\n                cube([3, 2, 5], center = true);\n        }\n        // Lightening hole\n        translate([0, 2, 2])\n            cylinder(h = 5, d = 1.5, $fn = 16);\n    }\n}\n\n// Render at desired size\nscale([scale_factor, scale_factor, scale_factor])\n    revolver();",
    "renders": true
  },
  {
    "vehicle": "executive",
    "openscad_code": "// Executive Figure - Realistic Style, Medium Complexity\n// Height: ~80mm when printed at 1:1 scale\n\n$fn = 36;  // Smooth curves for printing\n\n// Main assembly\nmodule executive_figure() {\n    union() {\n        // Head\n        translate([0, 0, 72]) head();\n        \n        // Torso with suit\n        torso();\n        \n        // Legs\n        translate([0, 0, 0]) legs();\n        \n        // Arms\n        translate([-12, 0, 55]) left_arm();\n        translate([12, 0, 55]) mirror([1, 0, 0]) left_arm();\n        \n        // Briefcase in right hand\n        translate([22, -8, 35]) briefcase();\n    }\n}\n\nmodule head() {\n    // Skull\n    sphere(r = 8);\n    \n    // Neck\n    translate([0, 0, -8]) cylinder(r = 4, h = 8);\n    \n    // Hair - short business cut\n    translate([0, 0, 2]) scale([1, 1.2, 0.8]) sphere(r = 8.5);\n    \n    // Eyes\n    translate([-3, 7.5, 2]) sphere(r = 1);\n    translate([3, 7.5, 2]) sphere(r = 1);\n    \n    // Nose\n    translate([0, 7, 0]) cylinder(r1 = 1, r2 = 0.5, h = 3);\n    \n    // Ears\n    translate([-8, 0, 0]) rotate([0, 90, 0]) cylinder(r = 2.5, h = 2);\n    translate([8, 0, 0]) rotate([0, 90, 0]) cylinder(r = 2.5, h = 2);\n}\n\nmodule torso() {\n    // Shirt\n    translate([0, 0, 35]) scale([15, 10, 30]) cube(center = true);\n    \n    // Suit jacket\n    difference() {\n        translate([0, 0, 38]) scale([17, 12, 32]) cube(center = true);\n        \n        // V-neck opening\n        translate([0, 6, 52]) rotate([0, 30, 0]) cube([20, 2, 15], center = true);\n        translate([0, 6, 52]) rotate([0, -30, 0]) cube([20, 2, 15], center = true);\n        \n        // Bottom taper\n        translate([0, 0, 22]) cube([34, 24, 4], center = true);\n    }\n    \n    // Tie\n    color(\"red\") {\n        translate([0, 5, 48]) cube([3, 0.5, 12], center = true);\n        translate([0, 5, 42]) cube([6, 0.5, 6], center = true);\n    }\n    \n    // Belt\n    color(\"black\") translate([0, 0, 24]) cube([16, 11, 3], center = true);\n}\n\nmodule legs() {\n    // Left leg\n    translate([-5, 0, 12]) leg();\n    \n    // Right leg\n    translate([5, 0, 12]) leg();\n}\n\nmodule leg() {\n    // Upper leg\n    cylinder(r = 4, h = 12);\n    \n    // Lower leg\n    translate([0, 0, -12]) cylinder(r = 3.5, h = 12);\n    \n    // Shoe\n    color(\"black\") {\n        translate([0, -2, -18]) scale([5, 12, 4]) cube(center = true);\n    }\n}\n\nmodule left_arm() {\n    // Upper arm\n    rotate([0, 0, 20]) cylinder(r = 3, h = 12);\n    \n    // Lower arm\n    translate([0, 10, 0]) rotate([0, 0, -30]) cylinder(r = 2.5, h = 10);\n    \n    // Hand\n    translate([0, 19, -2]) sphere(r = 2.5);\n}\n\nmodule briefcase() {\n    color(\"brown\") {\n        difference() {\n            // Main case body\n            cube([12, 8, 10], center = true);\n            \n            // Handle cutout\n            translate([0, 0, 6]) cube([8, 2, 4], center = true);\n        }\n        \n        // Handle\n        translate([0, 0, 8]) rotate([90, 0, 0]) cylinder(r = 1, h = 8);\n        \n        // Latches\n        translate([-4, 4.5, 0]) cube([2, 1, 1], center = true);\n        translate([4, 4.5, 0]) cube([2, 1, 1], center = true);\n    }\n}\n\n// Generate the figure\nexecutive_figure();",
    "renders": true
  },
  {
    "vehicle": "luxury",
    "openscad_code": "// Luxury mechanical watch case (≈ 42 mm Ø) – realistic style, medium complexity\n// All parts printable without supports; wall thickness ≥ 1 mm\n\n$fn=60;\n\nmodule case_body(){\n    // Main case – cylinder with rounded top\n    difference(){\n        union(){\n            cylinder(h=10,d=42,center=true);              // central body\n            translate([0,0,5])\n                scale([1,1,0.4])\n                    sphere(d=42);                         // domed crystal area\n        }\n        // Hollow cavity for movement\n        translate([0,0,-1])\n            cylinder(h=12,d=38,center=true);\n        // Crown tunnel\n        rotate([0,90,0])\n            translate([21,0,0])\n                cylinder(h=7,d=6,center=true);\n    }\n}\n\nmodule lugs(){\n    // Standard 20 mm strap lugs\n    for(side=[-1,1])\n        translate([side*23,0,0])\n            rotate([0,side*90,0])\n                difference(){\n                    cube([8,8,5],center=true);            // lug block\n                    translate([0,0,-3])\n                        cylinder(h=8,d=3,center=true);    // spring-bar hole\n                }\n}\n\nmodule crown(){\n    // Winding crown with grip lines\n    difference(){\n        rotate([0,90,0])\n            translate([25,0,0])\n                cylinder(h=5,d=7,center=true);            // crown body\n        // Grip knurling\n        for(i=[-40:20:40])\n            rotate([0,i,0])\n                translate([25,0,0])\n                    cube([0.5,7.1,0.5],center=true);\n    }\n}\n\nmodule bezel(){\n    // Rotating bezel with minute marks\n    difference(){\n        cylinder(h=3,d=44,center=true);                   // bezel ring\n        cylinder(h=4,d=40,center=true);                   // recess\n    }\n    // Minute markers\n    for(a=[0:6:354])\n        rotate([0,0,a])\n            translate([21,0,1.5])\n                cube([0.5,1.5,1],center=true);\n}\n\nmodule case_back(){\n    // Screw-down case back\n    difference(){\n        cylinder(h=2,d=40,center=true);\n        translate([0,0,-1])\n            cylinder(h=4,d=33,center=true);               // cavity\n    }\n}\n\n// Assembly\nunion(){\n    case_body();\n    lugs();\n    crown();\n    translate([0,0,6.5]) bezel();\n    translate([0,0,-7]) case_back();\n}",
    "renders": true
  },
  {
    "vehicle": "flagship",
    "openscad_code": "// Flagship – medium-complexity, realistic style, 3D-printable\n// Overall length ≈ 90 mm.  No unsupported overhangs >45°.  Wall thickness 1.2 mm.\n\n$fn = 32;\n\n// Main dimensions\nhull_l  = 85;          // waterline length\nhull_w  = 18;          // max beam\nhull_h  = 12;          // draught + freeboard\ndeck_h  = 2.4;         // deck plate thickness\n\n// Hull shape\nmodule hull() {\n    difference() {\n        // Solid hull – rounded edge box\n        minkowski() {\n            cube([hull_l, hull_w, hull_h], center=true);\n            sphere(2);\n        }\n        // Hollow interior\n        translate([0,0,-1])\n            cube([hull_l-2.4, hull_w-2.4, hull_h+2], center=true);\n        // Flat bottom for printing\n        translate([0,0,-hull_h/2-1])\n            cube([hull_l+10, hull_w+10, 2], center=true);\n    }\n}\n\n// Main deck – simple slab on hull\nmodule deck() {\n    translate([0,0,hull_h/2-deck_h/2])\n        cube([hull_l, hull_w, deck_h], center=true);\n}\n\n// Superstructure block\nsuper_l = 30;\nsuper_w = 14;\nsuper_h = 8;\n\nmodule superstructure() {\n    difference() {\n        translate([hull_l/4, 0, hull_h/2+deck_h/2+super_h/2])\n            cube([super_l, super_w, super_h], center=true);\n        // Hollow inside\n        translate([hull_l/4, 0, hull_h/2+deck_h/2+super_h/2])\n            cube([super_l-2.4, super_w-2.4, super_h+1], center=true);\n    }\n}\n\n// Bridge / navigation\nmodule bridge() {\n    difference() {\n        // Forward half-cylinder\n        translate([hull_l/4+super_l/4, 0,\n                   hull_h/2+deck_h/2+super_h+3])\n            rotate([0,90,0])\n                cylinder(h=super_w-2, r=4, center=true);\n        // Window cutout\n        translate([hull_l/4+super_l/4+3, 0,\n                   hull_h/2+deck_h/2+super_h+3])\n            rotate([0,90,0])\n                cylinder(h=super_w, r=2.5, center=true);\n    }\n}\n\n// Smoke stack\nmodule funnel() {\n    translate([hull_l/6, 0, hull_h/2+deck_h/2+super_h+6])\n        cylinder(h=10, r1=3, r2=2, center=false);\n}\n\n// Gun turret with barrel\nmodule turret(pos_x) {\n    translate([pos_x, 0, hull_h/2+deck_h/2+2])\n        difference() {\n            cylinder(h=4, r=5, center=false);\n            // Hollow gun well\n            translate([0,0,-1])\n                cylinder(h=6, r=3, center=false);\n        }\n    // Barrel\n    translate([pos_x+5, 0, hull_h/2+deck_h/2+4])\n        rotate([0,-10,0])\n            cylinder(h=12, r=1.2, center=false);\n}\n\n// Mast with radar\nmodule mast(pos_x) {\n    translate([pos_x, 0, hull_h/2+deck_h/2])\n        cylinder(h=20, r=0.8, center=false);\n    // Simple radar disk\n    translate([pos_x, 0, hull_h/2+deck_h/2+18])\n        rotate([90,0,0])\n            cylinder(h=0.8, r=4, center=true);\n}\n\n// Lifeboat davits along sides\nmodule lifeboats() {\n    for (x=[-hull_l/3, -hull_l/6, hull_l/6, hull_l/3]) {\n        // Davits\n        translate([x, hull_w/2-1, hull_h/2+deck_h/2+3])\n            rotate([0,-45,0])\n                cylinder(h=5, r=0.5, center=false);\n        // Boat hull\n        translate([x, hull_w/2-2, hull_h/2+deck_h/2+1.5])\n            rotate([90,0,0])\n                cylinder(h=6, r1=1, r2=1, center=true);\n    }\n    mirror([0,1,0]) lifeboats();\n}\n\n// Anchor hawse pipes\nmodule anchors() {\n    for (y=[-4,4]) {\n        translate([-hull_l/2+3, y, hull_h/2-2])\n            rotate([90,0,0])\n                cylinder(h=4, r=1.5, center=false);\n    }\n}\n\n// Assembly\nhull();\ndeck();\nsuperstructure();\nbridge();\nfunnel();\nturret(-hull_l/4);\nturret(hull_l/12);\nmast(-hull_l/2+10);\nlifeboats();\nanchors();",
    "renders": true
  },
  {
    "vehicle": "prestige",
    "openscad_code": "// Prestige lighter - realistic style, medium complexity\n// 3D printable model with proper wall thickness and no overhangs\n\n// Main dimensions\n$fn = 50;\nbody_width = 40;\nbody_length = 60;\nbody_height = 14;\nwall_thickness = 2;\nhinge_radius = 3;\nhinge_length = 8;\n\n// Top lid dimensions\nlid_length = 30;\nlid_height = 10;\nlid_clearance = 0.2;\n\n// Flint wheel dimensions\nwheel_radius = 4;\nwheel_width = 3;\nwheel_pos_x = 15;\nwheel_pos_y = body_length * 0.7;\n\n// Chimney dimensions\nchimney_width = 12;\nchimney_length = 18;\nchimney_height = 8;\n\n// Wind guard dimensions\nguard_height = 8;\nguard_thickness = 1;\n\n// Main body shell\nmodule lighter_body() {\n    difference() {\n        // Outer body\n        translate([0, 0, body_height/2])\n            cube([body_width, body_length, body_height], center=true);\n        \n        // Inner cavity\n        translate([0, 0, body_height/2 + wall_thickness])\n            cube([body_width - 2*wall_thickness, \n                  body_length - 2*wall_thickness, \n                  body_height], center=true);\n        \n        // Lid cutout\n        translate([0, body_length/2 - lid_length/2, body_height - lid_height/2])\n            cube([body_width - 2*wall_thickness, \n                  lid_length + wall_thickness, \n                  lid_height], center=true);\n    }\n}\n\n// Top lid with hinge\nmodule lighter_lid() {\n    union() {\n        // Main lid\n        translate([0, body_length/2 - lid_length/2, body_height + lid_height/2])\n            cube([body_width - 2*wall_thickness, lid_length, lid_height], center=true);\n        \n        // Hinge pin\n        translate([0, body_length/2, body_height + hinge_radius])\n            rotate([90, 0, 0])\n                cylinder(r=hinge_radius, h=hinge_length, center=true);\n    }\n}\n\n// Flint wheel assembly\nmodule flint_wheel() {\n    // Wheel\n    translate([wheel_pos_x, wheel_pos_y, body_height + wheel_radius])\n        rotate([90, 0, 0])\n            cylinder(r=wheel_radius, h=wheel_width, center=true);\n    \n    // Spur gear pattern on wheel\n    for(i = [0:15:345]) {\n        rotate([0, 0, i])\n            translate([wheel_pos_x, wheel_pos_y + wheel_radius + 0.5, body_height])\n                cube([0.5, 1, wheel_width], center=true);\n    }\n}\n\n// Chimney and wind guard\nmodule chimney() {\n    difference() {\n        // Main chimney\n        translate([0, body_length/4, body_height + chimney_height/2])\n            cube([chimney_width, chimney_length, chimney_height], center=true);\n        \n        // Inner chimney space\n        translate([0, body_length/4, body_height + chimney_height/2 + 1])\n            cube([chimney_width - 2*wall_thickness, \n                  chimney_length - 2*wall_thickness, \n                  chimney_height], center=true);\n    }\n    \n    // Wind guard\n    translate([0, body_length/4 - chimney_length/2 - guard_thickness/2, \n               body_height + guard_height/2])\n        cube([chimney_width + 4, guard_thickness, guard_height], center=true);\n}\n\n// Sparking flint mechanism\nmodule flint_mechanism() {\n    // Spring tube\n    translate([-wheel_pos_x + 2, wheel_pos_y, body_height/2])\n        cylinder(r=2, h=body_height, center=true);\n    \n    // Screw head\n    translate([-wheel_pos_x + 2, wheel_pos_y, wall_thickness])\n        cylinder(r=3, h=2, center=true);\n}\n\n// Fuel opening\nmodule fuel_opening() {\n    translate([0, -body_length/4, body_height - 2])\n        cylinder(r=4, h=4, center=true);\n}\n\n// Side texturing\nmodule side_texture() {\n    for(i = [0:10:50]) {\n        translate([body_width/2 + 0.1, i - body_length/2, body_height/2])\n            cube([0.2, 8, body_height], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    lighter_body();\n    translate([0, 0, 0])\n        lighter_lid();\n    flint_wheel();\n    chimney();\n    flint_mechanism();\n    fuel_opening();\n    side_texture();\n    mirror([1, 0, 0])\n        side_texture();\n}",
    "renders": true
  },
  {
    "vehicle": "grand",
    "openscad_code": "// Grand Piano – realistic style, medium complexity\n// Overall footprint ~70 mm (length) × 35 mm (width) × 25 mm (height)\n\n$fa = 2; $fs = 0.5;\n\nmodule grand_piano() {\n    difference() {\n        // main body – the curved wing shape\n        hull() {\n            translate([0,0,10])  cube([70,35,1], center=true);\n            translate([-30,0,10]) cube([10,30,1], center=true);\n            translate([ 30,0,10]) cube([10,30,1], center=true);\n        }\n\n        // hollow cavity for sound\n        translate([0,0,8])\n            cube([60,25,8], center=true);\n    }\n\n    // lid – hinged at back\n    translate([0, 20, 18])\n        rotate([70,0,0])\n            cube([65,30,1.5], center=true);\n\n    // lid prop stick\n    translate([0, 10, 18])\n        cylinder(h=15, d=2);\n\n    // keyboard cover panel\n    translate([-28, 0, 11])\n        cube([15,32,2]);\n\n    // white keys\n    for(x=[-34 : 2.2 : -22])\n        translate([x, 0, 11.5])\n            cube([1.8, 30, 1.2]);\n\n    // black keys\n    for(x=[-33.5 : 4.4 : -23])\n        translate([x, 0, 12.8])\n            cube([1.2, 18, 2]);\n\n    // three legs\n    module leg() {\n        cylinder(h=15, d=3);\n        sphere(d=3.5);\n    }\n    translate([-25,-12,2]) leg();\n    translate([ 25,-12,2]) leg();\n    translate([  0, 12,2]) leg();\n\n    // pedal lyre\n    translate([0,-16,2])\n        difference() {\n            cylinder(h=6, d=8);\n            translate([0,0,-1])\n                cylinder(h=8, d=4);\n        }\n\n    // three pedals\n    for(x=[-3 : 3 : 3])\n        translate([x,-17,8])\n            rotate([90,0,0])\n                cylinder(h=5, d=1.5);\n\n    // music stand\n    translate([-15, 0, 18])\n        rotate([80,0,0])\n            cube([25,20,1], center=true);\n}\n\ngrand_piano();",
    "renders": true
  },
  {
    "vehicle": "premium",
    "openscad_code": "// Premium fountain pen model - realistic style\n// Total length: 82 mm, diameter: 12 mm\n\n$fn = 50;\n\nmodule pen_body() {\n    // Main barrel\n    difference() {\n        cylinder(h = 60, d = 11);\n        translate([0, 0, -1]) cylinder(h = 62, d = 9);\n    }\n    \n    // Grip section\n    translate([0, 0, -15]) {\n        difference() {\n            cylinder(h = 20, d1 = 11, d2 = 9);\n            translate([0, 0, -1]) cylinder(h = 22, d = 7.5);\n        }\n    }\n    \n    // Cap threads\n    translate([0, 0, 45]) {\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90]) {\n                translate([4.5, 0, 0]) cube([1, 0.5, 3], center = true);\n            }\n        }\n    }\n}\n\nmodule pen_cap() {\n    // Main cap body\n    difference() {\n        cylinder(h = 40, d = 12.5);\n        translate([0, 0, -1]) cylinder(h = 42, d = 11.5);\n    }\n    \n    // Clip\n    translate([5.5, 0, 20]) {\n        rotate([90, 0, 0]) {\n            difference() {\n                cube([1.2, 25, 2.5]);\n                translate([-0.5, 2, 0]) cube([2.2, 5, 3]);\n            }\n        }\n    }\n    \n    // Cap band detail\n    translate([0, 0, 2]) {\n        difference() {\n            cylinder(h = 5, d = 13);\n            cylinder(h = 5, d = 12);\n        }\n    }\n    \n    // Inner cap for sealing\n    translate([0, 0, 15]) {\n        difference() {\n            cylinder(h = 23, d = 9.5);\n            translate([0, 0, 18]) cylinder(h = 8, d = 7);\n        }\n    }\n}\n\nmodule nib() {\n    // Nib body\n    translate([0, 0, -30]) {\n        rotate([0, 180, 0]) {\n            difference() {\n                cylinder(h = 15, d1 = 9, d2 = 6);\n                translate([0, 0, -1]) cylinder(h = 17, d = 7);\n            }\n            \n            // Nib slit\n            translate([0, 0, 7.5]) cube([0.3, 9, 15], center = true);\n            \n            // Breather hole\n            translate([0, 0, 3]) rotate([90, 0, 0]) cylinder(h = 1, d = 2);\n            \n            // Nib tip\n            translate([0, 0, 14.5]) sphere(d = 2);\n        }\n    }\n}\n\nmodule feed() {\n    // Feed body\n    translate([0, 0, -25]) {\n        rotate([0, 180, 0]) {\n            difference() {\n                cylinder(h = 15, d = 7.5);\n                translate([0, 0, -1]) cylinder(h = 17, d = 6.5);\n            }\n            \n            // Feed fins\n            for(i = [1:8]) {\n                translate([0, 0, i * 1.5]) {\n                    difference() {\n                        cylinder(h = 0.5, d = 8);\n                        cylinder(h = 0.5, d = 6.5);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Assemble the pen\nunion() {\n    // Main body assembly\n    pen_body();\n    nib();\n    feed();\n    \n    // Cap positioned next to pen\n    translate([20, 0, 0]) rotate([90, 0, 0]) {\n        pen_cap();\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "elite",
    "openscad_code": "// Elite Soldier Figure - Realistic Style, Medium Complexity\n// Approx 75mm tall, 3D printable with minimal supports\n\n// Overall dimensions\nfigure_height = 75;\nhead_d = 12;\nbody_w = 20;\nbody_d = 12;\nbody_h = 30;\nleg_h = 25;\narm_l = 20;\n\n// Wall thickness for 3D printing\nwall = 1.5;\n\nmodule head() {\n    // Main head sphere\n    translate([0, 0, figure_height - head_d/2])\n        sphere(d = head_d, $fn = 32);\n    \n    // Helmet ridge\n    translate([0, 0, figure_height - head_d/2 + 2])\n        cylinder(h = 3, d1 = head_d + 2, d2 = head_d + 4, $fn = 32);\n    \n    // Visor slot\n    difference() {\n        translate([0, -head_d/2 - 0.1, figure_height - head_d/2])\n            cube([head_d * 0.8, 0.2, 4], center = true);\n        translate([0, -head_d/2 - 0.2, figure_height - head_d/2 + 1])\n            cube([head_d * 0.6, 0.4, 2], center = true);\n    }\n}\n\nmodule torso() {\n    // Main body\n    translate([0, 0, leg_h + body_h/2])\n        cube([body_w, body_d, body_h], center = true);\n    \n    // Chest armor plate\n    translate([0, body_d/2 + 0.1, leg_h + body_h - 8])\n        cube([body_w - 4, 1, 12], center = true);\n    \n    // Backpack\n    translate([0, -body_d/2 - 3, leg_h + body_h/2])\n        cube([body_w - 6, 6, body_h - 8], center = true);\n}\n\nmodule arm(side = 1) {\n    // Upper arm\n    translate([side * (body_w/2 + 3), 0, leg_h + body_h - 10])\n        rotate([0, 0, side * -15])\n        cylinder(h = arm_l/2, d = 5, $fn = 16);\n    \n    // Lower arm\n    translate([side * (body_w/2 + 3 + arm_l/2 * cos(15)), \n               side * (arm_l/2 * sin(15)), \n               leg_h + body_h - 10 - arm_l/2 * sin(15)])\n        rotate([0, 0, side * -45])\n        cylinder(h = arm_l/2, d = 4, $fn = 16);\n    \n    // Hand\n    translate([side * (body_w/2 + 3 + arm_l * cos(30)), \n               side * (arm_l * sin(30)), \n               leg_h + body_h - 10 - arm_l * sin(30)])\n        sphere(d = 4, $fn = 16);\n    \n    // Weapon (rifle on right side)\n    if (side == 1) {\n        translate([body_w/2 + 3 + arm_l * cos(30) + 8, \n                   arm_l * sin(30), \n                   leg_h + body_h - 10 - arm_l * sin(30)])\n            rotate([0, 90, 0])\n            cylinder(h = 20, d = 2, $fn = 8);\n    }\n}\n\nmodule leg(side = 1) {\n    // Upper leg\n    translate([side * 5, 0, leg_h/2 + 3])\n        cylinder(h = leg_h/2, d1 = 6, d2 = 5, $fn = 16);\n    \n    // Lower leg\n    translate([side * 5, 0, 3])\n        cylinder(h = leg_h/2, d1 = 5, d2 = 4, $fn = 16);\n    \n    // Boot\n    translate([side * 5, 0, 0])\n        cube([6, 10, 3], center = true);\n    \n    // Knee pad\n    translate([side * 5, 0, leg_h/2 + 3])\n        sphere(d = 5, $fn = 16);\n}\n\nmodule base() {\n    // Simple oval base for stability\n    scale([1.5, 1, 0.3])\n        cylinder(h = 2, d = 30, $fn = 32);\n}\n\n// Assemble figure\nunion() {\n    base();\n    head();\n    torso();\n    \n    // Arms\n    arm(1);   // Right arm\n    arm(-1);  // Left arm\n    \n    // Legs\n    leg(1);   // Right leg\n    leg(-1);  // Left leg\n}\n\n// Add small details\ntranslate([0, body_d/2 + 1, leg_h + body_h - 15])\n    cube([2, 1, 2], center = true);\n\ntranslate([0, body_d/2 + 1, leg_h + body_h - 20])\n    cube([2, 1, 2], center = true);\n\ntranslate([0, body_d/2 + 1, leg_h + body_h - 25])\n    cube([2, 1, 2], center = true);",
    "renders": true
  },
  {
    "vehicle": "select",
    "openscad_code": "// Realistic style 3D printable SELECT switch model\n// Medium complexity – recognizable Cherry MX style switch\n\n$fn = 36;  // Smooth curves\nwall = 1.2;  // Common FDM wall thickness\nswitch_height = 14;\nswitch_width = 15.6;\nswitch_depth = 15.6;\nstem_d = 4.5;\nstem_h = 4.0;\npin_d = 1.15;\npin_l = 3.0;\nplate_th = 1.5;\n\nmodule switch_body() {\n    difference() {\n        // Main rectangular body\n        translate([0, 0, switch_height/2])\n            cube([switch_width, switch_depth, switch_height], center=true);\n        \n        // Top chamfered edge\n        translate([0, 0, switch_height - 2.5])\n            cylinder(h=2.5, r1=switch_width/2 - 0.5, r2=switch_width/2 + 0.5, center=true);\n        \n        // Bottom chamfered edge\n        translate([0, 0, 2.5])\n            cylinder(h=2.5, r1=switch_width/2 + 0.5, r2=switch_width/2 - 0.5, center=true);\n    }\n}\n\nmodule stem() {\n    // Central cross stem\n    for (rot = [0, 90]) {\n        rotate([0, 0, rot])\n            translate([0, 0, stem_h/2 + switch_height])\n                cube([stem_d * 0.3, stem_d * 0.9, stem_h], center=true);\n    }\n}\n\nmodule pins() {\n    // Two metal pins on bottom\n    translate([switch_width/2 - 2.5, 0, 0])\n        cylinder(h=pin_l, r=pin_d/2, center=true);\n    translate([-switch_width/2 + 2.5, 0, 0])\n        cylinder(h=pin_l, r=pin_d/2, center=true);\n    \n    // Center plastic post\n    translate([0, 0, -0.5])\n        cylinder(h=2, r=3/2, center=true);\n}\n\nmodule keycap_mount() {\n    // Four corner clips for keycap retention\n    for (x = [-1, 1])\n        for (y = [-1, 1])\n            translate([x * 5.5, y * 5.5, switch_height + 1])\n                cube([2, 2, 2], center=true);\n}\n\nmodule switch_assembly() {\n    union() {\n        switch_body();\n        stem();\n        pins();\n        keycap_mount();\n        \n        // PCB mounting clips\n        translate([switch_width/2, 0, switch_height/2])\n            cube([2, 3, 8], center=true);\n        translate([-switch_width/2, 0, switch_height/2])\n            cube([2, 3, 8], center=true);\n        \n        // LED slot\n        translate([0, switch_depth/2 - 1, switch_height - 3])\n            cube([3, 1, 3], center=true);\n    }\n}\n\n// Render the complete switch\nswitch_assembly();",
    "renders": true
  },
  {
    "vehicle": "signature",
    "openscad_code": "// Signature stamp – stylized initials \"JS\" in medium-complexity, 3-D printable form\n// Overall footprint ≈ 70 mm × 35 mm × 6 mm\n\n// ---------- parameters ----------\nplate_w   = 70;\nplate_h   = 35;\nplate_t   = 2;          // base-plate thickness\ntext_h    = 4;          // relief height of letters\nwall      = 2;          // minimum wall thickness for printing\n\n// ---------- module: rounded rectangle base ----------\nmodule rounded_base(w, h, t, r){\n    linear_extrude(height = t, center = false)\n        offset(r = r)\n            square([w, h], center = true);\n}\n\n// ---------- module: stylized letter J ----------\nmodule letter_J(){\n    // vertical stem\n    translate([0, 0, 0])\n        cube([wall, 20, text_h], center = true);\n\n    // bottom hook – built from rods to avoid overhangs\n    translate([0, -10 + wall/2, text_h/2])\n        rotate([90, 0, 0])\n            cylinder(h = 8, r = wall/2, center = true);\n\n    translate([0, -14, text_h/2])\n        rotate([0, 90, 0])\n            cylinder(h = wall, r = 4, center = true);\n\n    // close hook end\n    translate([4, -14, text_h/2])\n        cube([wall, wall, text_h], center = true);\n}\n\n// ---------- module: stylized letter S ----------\nmodule letter_S(){\n    // top semicircle\n    difference(){\n        translate([0, 7, text_h/2])\n            rotate([90, 0, 0])\n                cylinder(h = wall, r = 7, center = true);\n        translate([0, 7 + 7.1, text_h/2])\n            rotate([90, 0, 0])\n                cylinder(h = wall + 0.1, r = 7 - wall, center = true);\n    }\n\n    // bottom semicircle (mirrored)\n    difference(){\n        translate([0, -7, text_h/2])\n            rotate([-90, 0, 0])\n                cylinder(h = wall, r = 7, center = true);\n        translate([0, -7 - 7.1, text_h/2])\n            rotate([-90, 0, 0])\n                cylinder(h = wall + 0.1, r = 7 - wall, center = true);\n    }\n\n    // center bar\n    translate([0, 0, text_h/2])\n        cube([wall, 14, text_h], center = true);\n}\n\n// ---------- assembly ----------\ndifference(){\n    // base plate with rounded edges\n    rounded_base(plate_w, plate_h, plate_t + text_h, 4);\n\n    // optional recessed bottom – saves material, keeps surface flat\n    translate([0, 0, -0.01])\n        rounded_base(plate_w - 4, plate_h - 4, plate_t + text_h + 0.02, 3);\n}\n\n// position letters on base\nunion(){\n    translate([-15, 0, plate_t])\n        letter_J();\n    translate([15, 0, plate_t])\n        letter_S();\n}",
    "renders": true
  },
  {
    "vehicle": "limited",
    "openscad_code": "// Realistic medium-complexity limited model: Vintage 35 mm film canister\n// External dimensions: ~60 mm diameter × 50 mm height\n// Wall thickness: 1.5 mm (safe for FDM printing)\n\n// Overall scale factor – tweak if printer is calibrated differently\nscale_factor = 1;\n\n// --- Parameters ----------------------------------------------------------\nwall = 1.5;                 // wall thickness, mm\nd_can = 50 * scale_factor;  // outer diameter of canister\nh_can = 40 * scale_factor;  // outer height of canister\nd_cap = d_can + 2;          // cap lip overlap\nh_cap = 8 * scale_factor;   // cap height\nh_lip = 3 * scale_factor;   // cap lip depth\nknurl_h = 0.6 * scale_factor;\nknurl_ridge = 0.4 * scale_factor;\ncore_d = 12 * scale_factor; // inner spool core\ncore_h = h_can - 2 * wall;\nlabel_w = 30 * scale_factor;\nlabel_h = 15 * scale_factor;\n\n// --- Modules ------------------------------------------------------------\nmodule canister_body() {\n    difference() {\n        // Outer shell\n        cylinder(h = h_can, d = d_can, $fn = 120);\n        translate([0, 0, wall])\n            cylinder(h = h_can + 1, d = d_can - 2 * wall, $fn = 120);\n    }\n}\n\nmodule cap() {\n    difference() {\n        union() {\n            // Main cap disc\n            cylinder(h = h_cap, d = d_cap, $fn = 120);\n            // Lip that snaps over canister rim\n            translate([0, 0, h_cap - h_lip])\n                cylinder(h = h_lip, d = d_can + 2 * wall, $fn = 120);\n        }\n        // Hollow inside\n        translate([0, 0, wall])\n            cylinder(h = h_cap + 1, d = d_cap - 2 * wall, $fn = 120);\n    }\n    // Knurled grip ring\n    for (i = [0 : 30]) {\n        rotate([0, 0, i * 12])\n            translate([d_cap / 2 - wall, 0, h_cap / 2])\n                cube([knurl_ridge, knurl_h, h_cap - 2 * wall], center = true);\n    }\n}\n\nmodule spool_core() {\n    difference() {\n        cylinder(h = core_h, d = core_d, $fn = 60);\n        translate([0, 0, wall])\n            cylinder(h = core_h + 1, d = core_d - 2 * wall, $fn = 60);\n    }\n}\n\nmodule label_recess() {\n    // Flat recessed area for a sticker or embossing\n    translate([0, d_can / 2 - wall - label_h / 2, h_can / 2])\n        rotate([90, 0, 0])\n            cube([label_w, label_h, 0.5], center = true);\n}\n\n// --- Assembly ------------------------------------------------------------\n$fs = 0.5;\n$fa = 2;\n\n// Main canister\ncanister_body();\n\n// Spool inside\ntranslate([0, 0, wall])\n    spool_core();\n\n// Label recess\ndifference() {\n    canister_body();\n    label_recess();\n}\n\n// Cap – raise/lower for print-in-place test or separate part\ntranslate([0, 0, h_can + 5])\n    cap();",
    "renders": true
  },
  {
    "vehicle": "special",
    "openscad_code": "// Realistic 3D-Printable \"Special\" — a vintage pocket watch\n// Overall size ≈ 60 mm diameter × 15 mm thick (closed)\n\n$fn = 60;          // Smooth curves for realism\n\nmodule body() {\n    // Outer case: two shells with wall thickness 2 mm\n    difference() {\n        cylinder(h = 15, d = 60);               // Full case\n        translate([0, 0, 2])\n            cylinder(h = 15, d = 56);           // Hollow inside\n    }\n}\n\nmodule lid() {\n    // Hinged lid, 2 mm wall, slight dome\n    difference() {\n        translate([0, 0, 15])\n            scale([1, 1, 0.3])\n                sphere(d = 60);                  // Dome\n        translate([0, 0, 14])\n            cylinder(h = 5, d = 56);             // Hollow dome\n    }\n}\n\nmodule hinge() {\n    // Simple barrel hinge on the left side\n    for (y = [-15, 0, 15])\n        translate([-32, y, 7.5])\n            rotate([90, 0, 0])\n                cylinder(h = 6, d = 4);          // Three knuckles\n}\n\nmodule crown() {\n    // Winding crown at 3 o’clock\n    translate([30, 0, 7.5])\n        rotate([90, 0, 0])\n            cylinder(h = 8, d1 = 6, d2 = 4);     // Tapered crown\n}\n\nmodule dial() {\n    // Flat dial face\n    color(\"ivory\")\n    translate([0, 0, 2])\n        cylinder(h = 0.5, d = 54);\n}\n\nmodule hands() {\n    // Hour and minute hands\n    color(\"black\")\n    translate([0, 0, 2.6])\n        rotate([0, 0, 45])\n            cube([12, 1, 0.5], center = true);   // Hour hand\n    translate([0, 0, 2.8])\n        rotate([0, 0, 180])\n            cube([16, 0.8, 0.5], center = true); // Minute hand\n}\n\nmodule numerals() {\n    // Raised Roman numerals\n    for (a = [0:30:330]) {\n        rotate([0, 0, a])\n            translate([0, 23, 2.5])\n                cube([3, 1, 0.5], center = true);\n    }\n}\n\nmodule loop() {\n    // Top loop for chain\n    translate([0, 30, 15])\n        rotate([90, 0, 0])\n            toroid(4, 2);                        // Printable torus\n}\n\nmodule toroid(R, r) {\n    rotate_extrude()\n        translate([R, 0])\n            circle(r);\n}\n\n// Assembly\nunion() {\n    body();\n    lid();\n    hinge();\n    crown();\n    dial();\n    hands();\n    numerals();\n    loop();\n}",
    "renders": true
  },
  {
    "vehicle": "edition",
    "openscad_code": "// OpenSCAD code for a realistic medium-complexity fountain pen\n// Dimensions in mm\n\n// Overall scale factor for easy resizing\nscale_factor = 1;\n\n// Main body parameters\nbody_length = 70 * scale_factor;\nbody_diameter = 12 * scale_factor;\ncap_length = 65 * scale_factor;\ncap_diameter = 14 * scale_factor;\n\n// Wall thickness for 3D printing\nwall_thickness = 1.2 * scale_factor;\n\n// Grip section\ngrip_length = 15 * scale_factor;\ngrip_diameter = 10 * scale_factor;\n\n// Nib parameters\nnib_length = 12 * scale_factor;\nnib_width = 6 * scale_factor;\nnib_thickness = 0.6 * scale_factor;\n\n// Clip parameters\nclip_height = 40 * scale_factor;\nclip_width = 2 * scale_factor;\nclip_thickness = 1 * scale_factor;\n\nmodule pen_body() {\n    difference() {\n        // Main cylindrical body\n        cylinder(h=body_length, d=body_diameter, $fn=64);\n        \n        // Hollow center\n        translate([0, 0, -1])\n            cylinder(h=body_length+2, d=body_diameter-2*wall_thickness, $fn=64);\n        \n        // Threads for cap (simplified)\n        for(i=[0:5:body_length-15]) {\n            translate([0, 0, i])\n                cylinder(h=2, d=body_diameter+0.5, $fn=64);\n        }\n    }\n}\n\nmodule grip_section() {\n    difference() {\n        // Tapered grip\n        cylinder(h1=grip_diameter, h2=grip_diameter-2, h=grip_length, $fn=32);\n        \n        // Center hole for ink\n        translate([0, 0, -1])\n            cylinder(h=grip_length+2, d=grip_diameter-2*wall_thickness, $fn=32);\n        \n        // Grip rings\n        for(i=[0:2:grip_length-2]) {\n            translate([0, 0, i])\n                difference() {\n                    cylinder(h=1, d=grip_diameter+0.5, $fn=64);\n                    cylinder(h=1.2, d=grip_diameter-0.5, $fn=64);\n                }\n        }\n    }\n}\n\nmodule nib() {\n    // Split nib shape\n    union() {\n        // Main nib body\n        translate([0, 0, -nib_length/2])\n            scale([1, nib_width/nib_length, 1])\n                sphere(d=nib_length, $fn=32);\n        \n        // Tipping material\n        translate([0, 0, nib_length/2-1])\n            sphere(d=2, $fn=16);\n    }\n}\n\nmodule cap() {\n    difference() {\n        // Outer shell\n        cylinder(h=cap_length, d=cap_diameter, $fn=64);\n        \n        // Inner cavity\n        translate([0, 0, -1])\n            cylinder(h=cap_length-5, d=body_diameter+0.5, $fn=64);\n        \n        // Tapered end\n        translate([0, 0, cap_length-5])\n            cylinder(h1=cap_diameter, h2=cap_diameter-4, h=5, $fn=64);\n    }\n    \n    // Clip\n    translate([cap_diameter/2, 0, cap_length-clip_height/2])\n        rotate([0, 90, 0])\n            linear_extrude(height=clip_thickness)\n                polygon(points=[\n                    [0, 0],\n                    [0, clip_height],\n                    [clip_width, clip_height-5],\n                    [clip_width, 0]\n                ]);\n}\n\n// Assembly\n// Main body\npen_body();\ntranslate([0, 0, body_length])\n    grip_section();\ntranslate([0, 0, body_length+grip_length])\n    rotate([90, 0, 0])\n        nib();\n\n// Cap (shown separate for visualization)\ntranslate([30, 0, 0])\n    cap();",
    "renders": true
  },
  {
    "vehicle": "heritage",
    "openscad_code": "// Traditional Japanese Hōryū-ji Pagoda (Heritage Temple)\n// Scaled for 3D printing ~80mm height\n\n// Base parameters\nbase_width = 40;\nbase_height = 4;\nwall_thickness = 2;\n\n// Main pagoda structure\nmodule pagoda() {\n    // Stone base platform\n    translate([0, 0, 0])\n        cube([base_width, base_width, base_height], center = true);\n    \n    // Lower platform details\n    for (i = [-1, 1]) {\n        translate([i * (base_width/2 - 2), 0, base_height/2])\n            cube([4, base_width - 8, base_height/2], center = true);\n        translate([0, i * (base_width/2 - 2), base_height/2])\n            cube([base_width - 8, 4, base_height/2], center = true);\n    }\n    \n    // First level - main hall\n    translate([0, 0, base_height + 15])\n        rotate([0, 0, 45]) {\n            difference() {\n                cube([30, 30, 30], center = true);\n                // Hollow interior\n                translate([0, 0, -wall_thickness/2])\n                    cube([30 - wall_thickness*2, 30 - wall_thickness*2, 30 + wall_thickness], center = true);\n                // Door opening\n                translate([0, -15, -5])\n                    cube([8, wall_thickness + 1, 12], center = true);\n            }\n        }\n    \n    // Second level - smaller roof\n    translate([0, 0, base_height + 30 + 8])\n        rotate([0, 0, 45]) {\n            difference() {\n                cube([22, 22, 16], center = true);\n                translate([0, 0, -wall_thickness/2])\n                    cube([22 - wall_thickness*2, 22 - wall_thickness*2, 16 + wall_thickness], center = true);\n            }\n        }\n    \n    // Roof tiers\n    for (level = [0, 1]) {\n        roof_size = 34 - (level * 10);\n        roof_height = 6;\n        roof_z = base_height + 30 + (level * 16) + (level > 0 ? 8 : 0);\n        \n        // Main roof structure\n        translate([0, 0, roof_z])\n            difference() {\n                cube([roof_size, roof_size, roof_height], center = true);\n                // Beveled edges\n                translate([0, 0, -roof_height/2 + 1])\n                    cube([roof_size - 4, roof_size - 4, roof_height + 2], center = true);\n            }\n        \n        // Roof corners with curved brackets\n        for (corner = [[-1, -1], [1, -1], [-1, 1], [1, 1]]) {\n            translate([corner[0] * (roof_size/2 - 2), corner[1] * (roof_size/2 - 2), roof_z + roof_height/2])\n                cylinder(h = 4, r = 2, $fn = 8);\n        }\n    }\n    \n    // Final spire\n    translate([0, 0, base_height + 30 + 16 + 6 + 4])\n        cylinder(h = 12, r1 = 4, r2 = 2, $fn = 16);\n    \n    // Spire details\n    translate([0, 0, base_height + 30 + 16 + 6 + 4 + 12])\n        sphere(r = 3, $fn = 16);\n}\n\n// Generate the complete pagoda\npagoda();",
    "renders": true
  },
  {
    "vehicle": "legacy",
    "openscad_code": "// Vintage Pocket-Watch Legacy\n// Overall size ≈ 60 mm diameter × 15 mm thick\n\n$fn = 60;  // smooth curves\n\n// Main case\nmodule case() {\n    difference() {\n        union() {\n            // outer shell\n            cylinder(h = 10, d = 60, center = true);\n            // raised bezel ring\n            translate([0,0,5.5])\n                cylinder(h = 2, d1 = 62, d2 = 64, center = true);\n        }\n        // cavity for movement\n        translate([0,0,-1])\n            cylinder(h = 12, d = 54, center = true);\n        // crown tunnel\n        rotate([0,90,0])\n            translate([0,0,30.5])\n                cylinder(h = 10, d = 6, center = true);\n    }\n}\n\n// Crown\nmodule crown() {\n    translate([30,0,0])\n    rotate([0,90,0])\n    union() {\n        cylinder(h = 8, d = 8, center = true);\n        translate([4,0,0])\n            cylinder(h = 4, d = 5);\n    }\n}\n\n// Watch face\nmodule face() {\n    translate([0,0,1])\n    union() {\n        // dial plate\n        cylinder(h = 1, d = 52, center = true);\n        // hour markers raised\n        for (a = [0:30:330]) {\n            rotate([0,0,a])\n            translate([21,0,0.5])\n                cube([3,1,0.8], center = true);\n        }\n        // center boss\n        cylinder(h = 1.5, d = 6, center = true);\n    }\n}\n\n// Hour hand\nmodule hour_hand() {\n    translate([0,0,2.5])\n    rotate([0,0,90])\n    linear_extrude(height = 1.2)\n    polygon(points=[[0,0],[15,1.5],[15,-1.5]]);\n}\n\n// Minute hand\nmodule minute_hand() {\n    translate([0,0,3.8])\n    rotate([0,0,180])\n    linear_extrude(height = 1)\n    polygon(points=[[0,0],[20,1],[20,-1]]);\n}\n\n// Crystal\nmodule crystal() {\n    translate([0,0,6])\n    difference() {\n        cylinder(h = 2, d = 58, center = true);\n        translate([0,0,-1.1])\n            cylinder(h = 2.2, d = 56, center = true);\n    }\n}\n\n// Assembly\nunion() {\n    case();\n    crown();\n    face();\n    hour_hand();\n    minute_hand();\n    crystal();\n}",
    "renders": true
  },
  {
    "vehicle": "classic",
    "openscad_code": "// Classic LEGO 2x4 Brick - Realistic Medium Complexity\n// Dimensions in mm based on real LEGO measurements\n\n// Basic LEGO unit measurements\nunit = 8;  // 1 LEGO unit = 8mm\nplate_height = 3.2;\nbrick_height = 9.6;\n\n// Real LEGO dimensions\nknob_diameter = 4.8;\nknob_height = 1.8;\nwall_thickness = 1.5;\ntube_outer = 6.51;\ntube_inner = 4.8;\ntube_height = 5.6;\n\n// Create a 2x4 brick\nmodule lego_brick_2x4() {\n    difference() {\n        // Main brick body\n        cube([4*unit, 2*unit, brick_height], center=false);\n        \n        // Hollow interior\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            cube([4*unit - 2*wall_thickness, 2*unit - 2*wall_thickness, brick_height - wall_thickness], center=false);\n        \n        // Base tubes for clutch power\n        for (x = [0:3]) {\n            for (y = [0:1]) {\n                translate([x*unit + unit/2, y*unit + unit/2, 0]) {\n                    difference() {\n                        cylinder(h=tube_height, d=tube_outer, $fn=32);\n                        cylinder(h=tube_height + 0.1, d=tube_inner, $fn=32);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Top knobs\n    for (x = [0:3]) {\n        for (y = [0:1]) {\n            translate([x*unit + unit/2, y*unit + unit/2, brick_height])\n                cylinder(h=knob_height, d=knob_diameter, $fn=32);\n        }\n    }\n    \n    // Rounded top edges for realism\n    translate([0, 0, brick_height - 1])\n        cube([4*unit, 2*unit, 2], center=false);\n    \n    // Remove sharp edges with rounded corners\n    for (x = [0:4]) {\n        for (y = [0:2]) {\n            translate([x*unit, y*unit, -0.1])\n                cylinder(h=brick_height + 0.2, d=wall_thickness*2, $fn=32);\n        }\n    }\n    \n    // Corner rounding cuts\n    difference() {\n        children();\n        for (x = [0, 4*unit]) {\n            for (y = [0, 2*unit]) {\n                translate([x, y, 0])\n                    cylinder(h=brick_height + 0.2, d=wall_thickness*2, $fn=32);\n            }\n        }\n    }\n}\n\n// Chamfers on top edges\nmodule top_chamfers() {\n    rotate([0, 180, 0])\n    translate([0, 0, -brick_height])\n    difference() {\n        cube([4*unit, 2*unit, brick_height], center=false);\n        translate([0.5, 0.5, -0.1])\n            cube([4*unit - 1, 2*unit - 1, brick_height + 0.2], center=false);\n    }\n}\n\n// Final assembly with proper positioning\ntranslate([0, 0, 0])\nlego_brick_2x4();\n\n// Add subtle indentations between knobs for realism\nfor (x = [0:3]) {\n    for (y = [0:1]) {\n        translate([x*unit + unit/2, y*unit + unit/2, brick_height + knob_height/2])\n            rotate([0, 0, 45])\n            cube([3.2, 3.2, knob_height + 0.1], center=true);\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "vintage",
    "openscad_code": "// Vintage Film Camera - Realistic Style\n// Overall dimensions: ~65mm x 40mm x 35mm\n\n$fn = 50;\n\n// Main body module\nmodule camera_body() {\n    difference() {\n        // Main body block\n        cube([60, 35, 30], center=true);\n        \n        // Film counter window\n        translate([25, 18, 16])\n            cube([8, 2, 2], center=true);\n        \n        // Viewfinder window\n        translate([20, 0, 16])\n            cube([15, 10, 2], center=true);\n    }\n}\n\n// Lens assembly\nmodule lens() {\n    // Lens mount\n    translate([-32, 0, 0])\n    rotate([0, 90, 0])\n    difference() {\n        cylinder(h=8, d1=18, d2=15, center=true);\n        cylinder(h=10, d=12, center=true);\n    }\n    \n    // Front lens element\n    translate([-38, 0, 0])\n    rotate([0, 90, 0])\n    cylinder(h=3, d=14, center=true);\n    \n    // Aperture ring\n    translate([-35, 0, 0])\n    rotate([0, 90, 0])\n    difference() {\n        cylinder(h=5, d=16, center=true);\n        // Grip knurls\n        for(i=[0:30:330]) {\n            rotate([0, 0, i])\n            translate([7.5, 0, 0])\n            cube([1, 2, 5.5], center=true);\n        }\n    }\n}\n\n// Top controls\nmodule top_controls() {\n    // Shutter release button\n    translate([20, 15, 16])\n    cylinder(h=3, d=5, center=true);\n    \n    // Film advance lever\n    translate([25, 10, 16])\n    rotate([0, 0, -30])\n    difference() {\n        cube([15, 3, 2], center=true);\n        translate([7, 0, 0])\n        cylinder(h=3.1, d=4, center=true);\n    }\n    \n    // ISO dial\n    translate([10, 15, 16])\n    difference() {\n        cylinder(h=2, d=10, center=true);\n        for(i=[0:45:315]) {\n            rotate([0, 0, i])\n            translate([4.5, 0, 0])\n            cube([1, 0.5, 2.1], center=true);\n        }\n    }\n}\n\n// Viewfinder prism\nmodule viewfinder() {\n    translate([20, 0, 16])\n    difference() {\n        cube([15, 10, 8], center=true);\n        translate([0, 0, 4])\n        cube([13, 8, 4], center=true);\n    }\n}\n\n// Flash hot shoe\nmodule hot_shoe() {\n    translate([0, 15, 16])\n    difference() {\n        cube([20, 5, 4], center=true);\n        translate([0, 0, 2])\n        cube([18, 3, 4], center=true);\n    }\n}\n\n// Film door hinge detail\nmodule back_details() {\n    // Hinge\n    translate([-30, 0, -16])\n    for(i=[-15:10:15]) {\n        translate([0, i, 0])\n        cylinder(h=3, d=2, center=true);\n    }\n    \n    // Film rewind knob\n    translate([-25, -10, 16])\n    difference() {\n        cylinder(h=5, d=8, center=true);\n        cylinder(h=5.1, d=4, center=true);\n    }\n}\n\n// Assemble the camera\nunion() {\n    camera_body();\n    lens();\n    top_controls();\n    viewfinder();\n    hot_shoe();\n    back_details();\n}",
    "renders": true
  },
  {
    "vehicle": "antique",
    "openscad_code": "// Antique Brass Pocket Sundial (Compass Style) – 3D-printable\n// Outer diameter ≈ 60 mm, height closed ≈ 15 mm\n// No overhangs > 45°, 1 mm wall thickness everywhere\n\n// ---------- PARAMETERS ----------\nlid_clear = 0.3;          // clearance between lid and base\nwall = 1.0;               // wall thickness\ndia = 60;                 // outer diameter\nh = 15;                   // closed height\ngnomon_h = 6;             // gnomon height\ngnomon_t = 2;             // gnomon thickness\nhour_len = 20;            // hour-line length\ncompass_r = 12;           // compass rose radius\nhinge_r = 4;              // hinge pin radius\nhinge_w = 8;              // hinge width\nmagnet_d = 3;             // magnet cavity diameter\nmagnet_h = 2;             // magnet cavity depth\n\n// ---------- MODULES ----------\nmodule half_cylinder(r, h) {\n    difference() {\n        cylinder(r = r, h = h, $fn = 40);\n        translate([-r*2, 0, 0])\n            cube([r*4, r*4, h*2]);\n    }\n}\n\nmodule hinge_pin() {\n    rotate([90, 0, 0])\n        cylinder(r = hinge_r, h = hinge_w + 2*wall, $fn = 12);\n}\n\nmodule hinge_block() {\n    difference() {\n        union() {\n            translate([0, 0, wall])\n                cube([wall, hinge_w, dia/2 - wall]);\n            cylinder(r = hinge_r + wall, h = hinge_w, $fn = 12);\n        }\n        translate([0, 0, -1])\n            rotate([90, 0, 0])\n                cylinder(r = hinge_r, h = hinge_w + 2, $fn = 12);\n    }\n}\n\nmodule compass_rose() {\n    cylinder(r = compass_r, h = wall, $fn = 48);\n    for (a = [0:30:330]) {\n        rotate([0, 0, a])\n            translate([compass_r - 1, 0, 0])\n                cube([2, 0.6, wall + 0.01]);\n    }\n    // Cardinal letters (approximate N)\n    translate([0, compass_r - 2.5, wall + 0.01])\n        cube([1.5, 1.5, 0.6]);\n}\n\nmodule hour_lines() {\n    for (h = [6:1:18]) {\n        a = (h - 12) * 15;  // 15° per hour\n        rotate([0, 0, a])\n            translate([0, 0, 0.01])\n                cube([0.6, hour_len, wall + 0.02]);\n    }\n}\n\n// ---------- MAIN BODY ----------\n// Base dish (solid bottom, cavity top)\ndifference() {\n    cylinder(r = dia/2, h = h/2, $fn = 80);\n    translate([0, 0, wall])\n        cylinder(r = dia/2 - wall, h = h/2, $fn = 80);\n}\n\n// Lid dish (solid top, cavity bottom)\ntranslate([0, 0, h/2 + lid_clear])\ndifference() {\n    cylinder(r = dia/2, h = h/2, $fn = 80);\n    translate([0, 0, 0])\n        cylinder(r = dia/2 - wall, h = h/2 - wall, $fn = 80);\n}\n\n// Hinge left half on base\ntranslate([0, -dia/2 + hinge_r, h/2 - wall])\nrotate([0, 0, 90])\nhinge_block();\n\n// Hinge right half on lid\ntranslate([0, -dia/2 + hinge_r, h/2 + lid_clear])\nrotate([0, 0, 90])\nmirror([0, 1, 0])\nhinge_block();\n\n// Actual hinge pin\ntranslate([0, -dia/2 + hinge_r, h/2 - wall + hinge_r])\nhinge_pin();\n\n// Compass rose inset in base\ntranslate([0, 0, wall])\ncompass_rose();\n\n// Hour lines dial plate\ntranslate([0, 0, wall * 2])\nhour_lines();\n\n// Gnomon (triangular style)\nmodule gnomon() {\n    difference() {\n        polyhedron(\n            points = [[0, 0, 0], [0, gnomon_t, 0], [gnomon_h, 0, 0], [gnomon_h, gnomon_t, 0],\n                      [0, 0, gnomon_h], [0, gnomon_t, gnomon_h]],\n            faces = [[0, 2, 1], [3, 1, 2],\n                     [0, 1, 4], [1, 5, 4],\n                     [1, 3, 5], [3, 2, 5],\n                     [2, 0, 4], [2, 4, 5],\n                     [4, 5, 3], [4, 3, 2]]\n        );\n    }\n}\n\ntranslate([0, -gnomon_t/2, wall * 2 + 0.05])\nrotate([0, -45, 0])\ngnomon();\n\n// Small magnet cavities for snap closure\ntranslate([dia/2 - wall - magnet_d/2, 0, h/2 - magnet_h - 0.5])\ncylinder(r = magnet_d/2, h = magnet_h, $fn = 12);\ntranslate([dia/2 - wall - magnet_d/2, 0, h/2 + lid_clear + 0.5])\nrotate([180, 0, 0])\ncylinder(r = magnet_d/2, h = magnet_h, $fn = 12);\n\n// Decorative rope edge on lid rim\nfor (i = [0:15:359]) {\n    rotate([0, 0, i])\n        translate([dia/2, 0, h - 1])\n            sphere(r = 0.8, $fn = 8);\n}",
    "renders": true
  },
  {
    "vehicle": "retro",
    "openscad_code": "// Retro Cassette Tape (realistic, medium complexity)\n// Overall size: ~90 mm × 60 mm × 10 mm\n\n// Main dimensions\ntape_w = 90;\ntape_h = 60;\ntape_t = 10;\nwall_t = 1.6;           // 3D-print friendly wall thickness\nlip_h = 1.2;            // top recess lip\nscrew_d = 3;            // realistic screw holes\n\n// Window dimensions\nwindow_w = 40;\nwindow_h = 25;\nwindow_gap = 2;\n\n// Reels\nhub_r = 8;\nreel_r = 18;\nreel_t = 3;\n\n// Label area\nlabel_w = 50;\nlabel_h = 25;\n\n// Cassette body with top recess\nmodule cassette_body() {\n    difference() {\n        // Outer shell\n        cube([tape_w, tape_h, tape_t], center = true);\n        \n        // Hollow inside\n        translate([0, 0, -lip_h/2])\n            cube([tape_w - 2*wall_t, tape_h - 2*wall_t, tape_t - lip_h], center = true);\n        \n        // Top recess\n        translate([0, 0, tape_t/2 - 0.1])\n            cube([tape_w - 2*wall_t, tape_h - 2*wall_t, lip_h + 0.2], center = true);\n    }\n}\n\n// Window cutouts\nmodule windows() {\n    // Left window\n    translate([-(window_w + window_gap)/2, 0, 0])\n        cube([window_w, window_h, tape_t + 0.2], center = true);\n    \n    // Right window\n    translate([(window_w + window_gap)/2, 0, 0])\n        cube([window_w, window_h, tape_t + 0.2], center = true);\n}\n\n// Reel hubs with spokes\nmodule reel_hub(pos_x) {\n    translate([pos_x, 0, 0]) {\n        // Central hub cylinder\n        cylinder(h = reel_t + 0.2, r = hub_r, center = true);\n        \n        // Spokes\n        for (a = [0:60:359])\n            rotate([0, 0, a])\n                translate([hub_r/2, 0, 0])\n                    cube([hub_r, 1.2, reel_t + 0.2], center = true);\n        \n        // Outer ring\n        cylinder(h = reel_t, r = reel_r, center = true);\n    }\n}\n\n// Label recess\nmodule label_recess() {\n    translate([0, tape_h/2 - label_h/2 - 8, tape_t/2 - 0.2])\n        cube([label_w, label_h, 0.4], center = true);\n}\n\n// Screw holes\nmodule screw_holes() {\n    // Top-left\n    translate([-(tape_w/2 - 6), -(tape_h/2 - 6), 0])\n        rotate([90, 0, 0])\n            cylinder(h = tape_t, r = screw_d/2, center = true);\n    \n    // Top-right\n    translate([(tape_w/2 - 6), -(tape_h/2 - 6), 0])\n        rotate([90, 0, 0])\n            cylinder(h = tape_t, r = screw_d/2, center = true);\n    \n    // Bottom-left\n    translate([-(tape_w/2 - 6), (tape_h/2 - 6), 0])\n        rotate([90, 0, 0])\n            cylinder(h = tape_t, r = screw_d/2, center = true);\n    \n    // Bottom-right\n    translate([(tape_w/2 - 6), (tape_h/2 - 6), 0])\n        rotate([90, 0, 0])\n            cylinder(h = tape_t, r = screw_d/2, center = true);\n}\n\n// Pinch-roller hole\nmodule pinch_roller() {\n    translate([tape_w/2 - 12, 0, 0])\n        rotate([90, 0, 0])\n            cylinder(h = tape_t + 0.2, r = 3.5, center = true);\n}\n\n// Tape guide ridges\nmodule guides() {\n    // Top ridge\n    translate([0, tape_h/2 - 5, 0])\n        cube([tape_w - 20, 1.5, tape_t - 1], center = true);\n    \n    // Bottom ridge\n    translate([0, -(tape_h/2 - 5), 0])\n        cube([tape_w - 20, 1.5, tape_t - 1], center = true);\n}\n\n// Complete cassette\ndifference() {\n    union() {\n        cassette_body();\n        \n        // Reels inside windows\n        reel_hub(-(window_w + window_gap)/2);\n        reel_hub( (window_w + window_gap)/2);\n        \n        // Guides\n        guides();\n    }\n    \n    // Cutouts\n    windows();\n    label_recess();\n    screw_holes();\n    pinch_roller();\n}",
    "renders": true
  },
  {
    "vehicle": "modern",
    "openscad_code": "// Modern Wireless Earbuds Charging Case\n// Realistic style, medium complexity\n// Dimensions: 55mm x 45mm x 25mm\n\n// Main parameters\ncase_length = 55;\ncase_width = 45;\ncase_height = 25;\nwall_thickness = 2;\ncorner_radius = 5;\nlid_gap = 0.3;\n\n// Earbud parameters\nearbud_diameter = 16;\nearbud_height = 22;\nearbud_angle = 30;\n\n// Charging pins\npin_diameter = 2;\npin_height = 1;\n\n// LED indicators\nled_diameter = 3;\nled_depth = 1;\n\nmodule rounded_cube(size, radius, center = false) {\n    hull() {\n        translate([radius, radius, radius])\n            cube([size.x - 2*radius, size.y - 2*radius, size.z - 2*radius], center);\n        translate([radius, radius, size.z - radius])\n            sphere(r = radius);\n        translate([radius, size.y - radius, radius])\n            sphere(r = radius);\n        translate([size.x - radius, radius, radius])\n            sphere(r = radius);\n        translate([size.x - radius, size.y - radius, radius])\n            sphere(r = radius);\n        translate([radius, size.y - radius, size.z - radius])\n            sphere(r = radius);\n        translate([size.x - radius, radius, size.z - radius])\n            sphere(r = radius);\n        translate([size.x - radius, size.y - radius, size.z - radius])\n            sphere(r = radius);\n    }\n}\n\n// Main case body\ndifference() {\n    // Outer shell\n    rounded_cube([case_length, case_width, case_height], corner_radius);\n    \n    // Inner cavity\n    translate([wall_thickness, wall_thickness, wall_thickness - 0.1])\n        rounded_cube([case_length - 2*wall_thickness, case_width - 2*wall_thickness, case_height - wall_thickness + 0.1], corner_radius - wall_thickness);\n    \n    // Lid separation\n    translate([-1, 0, case_height/2 - lid_gap])\n        cube([case_length + 2, case_width + 2, 2*lid_gap]);\n}\n\n// Hinge pin\ntranslate([case_length/2, -1, case_height/2 - lid_gap])\n    rotate([90, 0, 0])\n        cylinder(h = case_width + 2, r = 1.5, $fn = 20);\n\n// Earbud cavities (left and right)\nfor (x = [-1, 1]) {\n    translate([case_length/2 + x * 15, case_width/2, wall_thickness + 2]) {\n        rotate([earbud_angle, 0, 0]) {\n            difference() {\n                cylinder(h = earbud_height, r = earbud_diameter/2 + 1, $fn = 32);\n                translate([0, 0, -1])\n                    cylinder(h = earbud_height + 2, r = earbud_diameter/2, $fn = 32);\n            }\n        }\n        \n        // Charging pins\n        translate([0, 0, 1])\n            cylinder(h = pin_height, r = pin_diameter/2, $fn = 16);\n    }\n}\n\n// LED indicators\ntranslate([case_length - 8, 4, wall_thickness/2])\n    cylinder(h = led_depth, r = led_diameter/2, $fn = 16);\ntranslate([case_length - 12, 4, wall_thickness/2])\n    cylinder(h = led_depth, r = led_diameter/2, $fn = 16);\ntranslate([case_length - 16, 4, wall_thickness/2])\n    cylinder(h = led_depth, r = led_diameter/2, $fn = 16);\n\n// Button\ntranslate([4, case_width/2, wall_thickness/2])\n    cylinder(h = wall_thickness + 1, r = 3, $fn = 20);\n\n// Lid (separate part)\ntranslate([0, 0, case_height + 5]) {\n    difference() {\n        rounded_cube([case_length, case_width, case_height/2], corner_radius);\n        \n        translate([wall_thickness, wall_thickness, -0.1])\n            rounded_cube([case_length - 2*wall_thickness, case_width - 2*wall_thickness, case_height/2 - wall_thickness + 0.1], corner_radius - wall_thickness);\n        \n        // Lid separation\n        translate([-1, 0, case_height/4 - lid_gap])\n            cube([case_length + 2, case_width + 2, 2*lid_gap]);\n        \n        // Hinge cavity\n        translate([case_length/2, -1, case_height/4 - lid_gap])\n            rotate([90, 0, 0])\n                cylinder(h = case_width + 2, r = 2, $fn = 20);\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "future",
    "openscad_code": "// Futuristic Pneumatic Multi-Tool\n// A compact, printable multi-purpose tool for future astronauts\n\n$fn = 36; // smooth circles\n\n// Overall dimensions\nbody_d = 28;\nbody_h = 90;\nhandle_d = 24;\nhandle_h = 45;\n\nmodule grip_rings() {\n    for (z = [5:8:40]) {\n        translate([0, 0, z])\n            difference() {\n                cylinder(d = handle_d + 2, h = 2, center = true);\n                cylinder(d = handle_d - 1, h = 3, center = true);\n            }\n    }\n}\n\nmodule handle() {\n    difference() {\n        union() {\n            cylinder(d = handle_d, h = handle_h, $fn = 6);\n            grip_rings();\n        }\n        // hex socket for tool shaft\n        translate([0, 0, -1])\n            cylinder(d = 10, h = handle_h + 2, $fn = 6);\n    }\n}\n\nmodule body() {\n    difference() {\n        union() {\n            // main cylindrical body\n            cylinder(d = body_d, h = body_h);\n            // top cap with pressure indicator\n            translate([0, 0, body_h])\n                cylinder(d1 = body_d + 2, d2 = body_d - 4, h = 6);\n        }\n        // central air channel\n        translate([0, 0, -1])\n            cylinder(d = 10, h = body_h + 8);\n        // side exhaust vents\n        for (angle = [45:90:315]) {\n            rotate([0, 0, angle])\n                translate([body_d/2 - 2, 0, body_h/2])\n                    rotate([0, 90, 0])\n                        cylinder(d = 4, h = 8);\n        }\n    }\n}\n\nmodule bit_holder() {\n    difference() {\n        // hexagonal collar\n        cylinder(d1 = 12, d2 = 8, h = 8, $fn = 6);\n        // bit socket\n        translate([0, 0, -1])\n            cylinder(d = 4, h = 10);\n    }\n}\n\nmodule nozzle() {\n    union() {\n        // nozzle cone\n        cylinder(d1 = 10, d2 = 5, h = 15);\n        // fine tip\n        cylinder(d = 3, h = 5);\n    }\n}\n\nmodule led_ring() {\n    difference() {\n        cylinder(d = body_d + 2, h = 3, center = true);\n        cylinder(d = body_d - 2, h = 4, center = true);\n    }\n}\n\n// Assembly\ntranslate([0, 0, 0])\n    handle();\ntranslate([0, 0, handle_h])\n    body();\ntranslate([0, 0, handle_h + body_h])\n    bit_holder();\ntranslate([0, 0, handle_h + body_h + 8])\n    rotate([180, 0, 0])\n        nozzle();\ntranslate([0, 0, handle_h - 4])\n    led_ring();",
    "renders": true
  },
  {
    "vehicle": "urban",
    "openscad_code": "$fa = 1; $fs = 0.5;\n\nmodule apartment_block(w=20,d=15,h=40){\n    // main block\n    difference(){\n        cube([w,d,h], center=true);\n        translate([0,0,0]) cube([w-2,d-2,h], center=true);  // hollow walls 1 mm\n    }\n\n    // windows\n    for(i=[-1,1])\n        for(j=[-1,0,1]){\n            translate([i*(w/2-1.5), j*4, 5])\n                cube([1,2,3]);\n            translate([i*(w/2-1.5), j*4, 15])\n                cube([1,2,3]);\n            translate([i*(w/2-1.5), j*4, 25])\n                cube([1,2,3]);\n        }\n}\n\nmodule water_tower(r=6,h=15){\n    // tower legs\n    for(a=[0,120,240]){\n        rotate([0,0,a])\n            translate([r-1,0,-h/2])\n                cylinder(h=h+2, r=1, center=true);\n    }\n\n    // tank\n    translate([0,0,h/2-2])\n        cylinder(h=4, r=r+1, center=true);\n\n    // conical roof\n    translate([0,0,h/2+2])\n        cylinder(h1=3, h2=0, r1=r+1.5, r2=0, center=false);\n}\n\nmodule street_light(){\n    // pole\n    cylinder(h=20, r=0.5, center=false);\n\n    // arm\n    translate([0,0,18])\n        rotate([0,90,0])\n            cylinder(h=5, r=0.5, center=false);\n\n    // lamp head\n    translate([5,0,18])\n        sphere(r=1);\n}\n\nmodule small_car(l=12,w=6,h=4){\n    // body\n    translate([0,0,h/2])\n        cube([l,w,h-1], center=true);\n\n    // cabin\n    translate([l/4,0,h-1])\n        cube([l/2,w-1,h/2+1], center=true);\n\n    // wheels\n    for(x=[-l/3,l/3])\n        for(y=[-w/2-1,w/2+1])\n            translate([x,y,0])\n                cylinder(h=1.5, r=1, center=true);\n}\n\nunion(){\n    // ground plate\n    translate([0,0,-1])\n        cube([60,60,2]);\n\n    // four apartment blocks\n    apartment_block(18,12,35);\n    translate([25,0,0]) apartment_block(20,14,40);\n    translate([0,25,0]) apartment_block(16,12,30);\n    translate([25,25,0]) apartment_block(22,16,45);\n\n    // water tower on a block\n    translate([-20,-20,18]) water_tower(5,12);\n\n    // street lights along the edges\n    for(i=[-25,-5,15,25])\n        translate([i,-28,1]) street_light();\n    for(i=[-25,-5,15,25])\n        translate([28,i,1]) rotate([0,0,90]) street_light();\n\n    // parked cars\n    translate([10,-15,1]) rotate([0,0,90]) small_car();\n    translate([-10,15,1]) small_car();\n    translate([15,15,1]) rotate([0,0,-30]) small_car();\n}",
    "renders": true
  },
  {
    "vehicle": "city",
    "openscad_code": "// City model - realistic style, medium complexity\n// Designed for 3D printing, no overhangs, proper wall thickness\n\n// Base plate for the city\nmodule base_plate() {\n    difference() {\n        cube([80, 80, 4], center=true);\n        translate([0, 0, -2])\n            cube([76, 76, 4], center=true);\n    }\n}\n\n// Simple rectangular building with windows\nmodule building(x, y, w, d, h) {\n    translate([x, y, 2]) {\n        // Main building body\n        difference() {\n            cube([w, d, h]);\n            // Windows on front\n            for(i = [1:2:w-5]) {\n                for(j = [1:2:h-4]) {\n                    translate([i, d-1, j])\n                        cube([1.5, 1, 1.5]);\n                }\n            }\n            // Windows on sides\n            for(i = [1:2:d-5]) {\n                for(j = [1:2:h-4]) {\n                    translate([w-1, i, j])\n                        cube([1, 1.5, 1.5]);\n                }\n            }\n        }\n    }\n}\n\n// Cylindrical water tower\nmodule water_tower(x, y) {\n    translate([x, y, 2]) {\n        // Tower base\n        cylinder(h=8, r1=6, r2=6, $fn=20);\n        // Support legs\n        for(angle = [0:90:270]) {\n            rotate([0, 0, angle])\n                translate([5, 0, 0])\n                    cylinder(h=8, r1=0.5, r2=0.5, $fn=8);\n        }\n        // Water tank\n        translate([0, 0, 8])\n            cylinder(h=10, r1=8, r2=8, $fn=30);\n        // Tank top\n        translate([0, 0, 18])\n            sphere(r=8, $fn=30);\n    }\n}\n\n// Simple house with pitched roof\nmodule house(x, y, w, d) {\n    translate([x, y, 2]) {\n        // House body\n        cube([w, d, 8]);\n        // Roof\n        translate([-1, -1, 8])\n            rotate([0, 90, 0])\n                cylinder(h=w+2, r1=d/2, r2=d/2, $fn=3);\n    }\n}\n\n// Street layout\nmodule streets() {\n    color(\"gray\")\n    translate([0, 0, 1.9]) {\n        // Main avenue\n        cube([80, 8, 0.2]);\n        // Cross street\n        cube([8, 80, 0.2]);\n        // Diagonal street\n        rotate([0, 0, 45])\n            cube([60, 6, 0.2]);\n    }\n}\n\n// Park with trees\nmodule park(x, y) {\n    // Grass base\n    color(\"green\")\n    translate([x, y, 2])\n        cube([20, 20, 0.5]);\n    \n    // Trees\n    for(tx = [x+5:5:x+15]) {\n        for(ty = [y+5:5:y+15]) {\n            translate([tx, ty, 2.5]) {\n                // Tree trunk\n                cylinder(h=6, r1=0.5, r2=0.5, $fn=8);\n                // Tree top\n                translate([0, 0, 6])\n                    sphere(r=2.5, $fn=15);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    base_plate();\n    \n    // Streets\n    streets();\n    \n    // Buildings\n    building(-30, -30, 12, 12, 25);\n    building(-30, 10, 10, 8, 18);\n    building(10, -30, 15, 10, 30);\n    building(10, 10, 8, 12, 22);\n    building(20, 0, 6, 6, 15);\n    \n    // Houses\n    house(-20, 20, 8, 8);\n    house(-10, 20, 8, 8);\n    house(0, 20, 8, 8);\n    \n    // Water tower\n    water_tower(25, 25);\n    \n    // Park\n    park(-20, -20);\n}",
    "renders": true
  },
  {
    "vehicle": "metro",
    "openscad_code": "// Realistic medium-complexity metro train\n// Length ≈ 90 mm, width ≈ 18 mm, height ≈ 25 mm\n// Printable without supports – all angles ≤ 45°\n\n$fa = 2; $fs = 0.5;\n\nmodule body() {\n    // Main car shell\n    difference() {\n        hull() {\n            translate([-40, -8, 0]) cube([80, 16, 20]);\n            translate([-38, -7, 20]) cube([76, 14, 3]);\n        }\n        // Windows left\n        for(y = [-25, -15, -5, 5, 15, 25])\n            translate([y, -8.5, 10]) cube([8, 2, 6]);\n        // Windows right\n        for(y = [-25, -15, -5, 5, 15, 25])\n            translate([y, 8.5 - 2, 10]) cube([8, 2, 6]);\n        // Doors left\n        translate([-5, -8.5, 0]) cube([10, 2, 18]);\n        translate([ 5, -8.5, 0]) cube([10, 2, 18]);\n        // Doors right\n        translate([-5, 8.5 - 2, 0]) cube([10, 2, 18]);\n        translate([ 5, 8.5 - 2, 0]) cube([10, 2, 18]);\n    }\n}\n\nmodule roof() {\n    translate([0, 0, 23]) {\n        difference() {\n            // Pantograph base\n            translate([0, 0, 0]) cube([70, 14, 2], center = true);\n            // Ventilation grills\n            for(x = [-30, -20, -10, 0, 10, 20, 30])\n                translate([x, 0, 1]) cube([6, 12, 1], center = true);\n        }\n    }\n}\n\nmodule undercarriage() {\n    // Bogies\n    module bogie(offset) {\n        translate([offset, 0, -4]) {\n            difference() {\n                cube([14, 16, 4]);\n                // Wheel cutouts\n                for(y = [-6, 6])\n                    translate([0, y, -1]) rotate([0, 90, 0])\n                        cylinder(h = 20, d = 8, $fn = 16);\n            }\n        }\n    }\n    bogie(-25);\n    bogie(25);\n    // Couplers\n    translate([-40.5, 0, 2]) cube([1.5, 5, 3]);\n    translate([40.5 - 1.5, 0, 2]) cube([1.5, 5, 3]);\n}\n\nmodule nose() {\n    // Streamlined ends\n    difference() {\n        hull() {\n            translate([-40, -8, 0]) cube([0, 16, 20]);\n            translate([-45, -7, 5]) cube([0, 14, 15]);\n            translate([-47, -5, 10]) cube([0, 10, 5]);\n        }\n        // Headlight\n        translate([-46, 0, 13]) sphere(d = 3);\n    }\n    mirror([1, 0, 0]) {\n        difference() {\n            hull() {\n                translate([-40, -8, 0]) cube([0, 16, 20]);\n                translate([-45, -7, 5]) cube([0, 14, 15]);\n                translate([-47, -5, 10]) cube([0, 10, 5]);\n            }\n            translate([-46, 0, 13]) sphere(d = 3);\n        }\n    }\n}\n\nmodule wheels() {\n    // Simplified wheels touching build plate\n    module wheelset(offset) {\n        for(y = [-7, 7])\n            translate([offset, y, 0])\n                rotate([0, 0, 90])\n                    cylinder(h = 4, d = 8, $fn = 16);\n    }\n    wheelset(-25);\n    wheelset(25);\n}\n\n// Assembly\nunion() {\n    body();\n    roof();\n    undercarriage();\n    nose();\n    wheels();\n}",
    "renders": true
  },
  {
    "vehicle": "commuter",
    "openscad_code": "// Realistic Commuter Figure – OpenSCAD\n// Overall height ≈ 80 mm, printable without overhangs\n\n// Parameters\nbodyH = 35;           // torso height\nbodyW = 20;           // torso width\nbodyT = 12;           // torso thickness\nheadD = 14;           // head diameter\nneckH = 4;            // neck height\narmL = 25;            // upper arm length\nforearmL = 20;        // forearm length\nlegL = 35;            // upper leg length\nshinL = 30;           // lower leg length\nshoeL = 28;           // foot length\nshoeW = 10;           // foot width\nshoeH = 8;            // foot height\nbackpackW = 14;       // backpack width\nbackpackD = 6;        // backpack depth\nbackpackH = 28;       // backpack height\ncoffeeH = 20;         // coffee cup height\ncoffeeR = 5;          // coffee cup radius\nlidH = 2;             // lid height\nhandleR = 3;          // handle radius\nhandleTh = 2;         // handle thickness\nearbudR = 3;          // earbud radius\n\n// Colors (for preview only)\n$fn = 32;\n\n// Utility module for rounded box\nmodule roundedBox(size, r, center = false) {\n    translate(center ? [-size.x/2, -size.y/2, -size.z/2] : [0,0,0])\n    hull() {\n        translate([r,r,r]) sphere(r);\n        translate([size.x-r,r,r]) sphere(r);\n        translate([r,size.y-r,r]) sphere(r);\n        translate([size.x-r,size.y-r,r]) sphere(r);\n        translate([r,r,size.z-r]) sphere(r);\n        translate([size.x-r,r,size.z-r]) sphere(r);\n        translate([r,size.y-r,size.z-r]) sphere(r);\n        translate([size.x-r,size.y-r,size.z-r]) sphere(r);\n    }\n}\n\n// Head with neck\nmodule head() {\n    translate([0,0,bodyH + neckH + headD/2])\n    union() {\n        // neck\n        color(\"tan\")\n        cylinder(h = neckH, r = headD/2.5, center = false);\n        // head\n        color(\"tan\")\n        sphere(d = headD);\n        // hair\n        color(\"black\")\n        translate([0,0,headD/2-0.5])\n        scale([1,1,0.7])\n        sphere(d = headD+2);\n        // ears\n        color(\"tan\")\n        translate([headD/2,0,0])\n        sphere(d = headD/3);\n        translate([-headD/2,0,0])\n        sphere(d = headD/3);\n        // earbuds\n        color(\"white\")\n        translate([headD/2,headD/3,0])\n        sphere(r = earbudR);\n        translate([-headD/2,headD/3,0])\n        sphere(r = earbudR);\n    }\n}\n\n// Torso with shirt and jacket\nmodule torso() {\n    translate([0,0,bodyH/2])\n    union() {\n        // shirt\n        color(\"lightblue\")\n        roundedBox([bodyW, bodyT, bodyH], 3);\n        // jacket\n        color(\"navy\")\n        translate([0,0,bodyH/2-5])\n        roundedBox([bodyW+4, bodyT+3, 10], 3, center=true);\n    }\n}\n\n// Arm module (right or left)\nmodule arm(side = 1) { // 1 for right, -1 for left\n    translate([side * (bodyW/2 + armL/2), 0, bodyH - 5])\n    rotate([0,0,side * -20])\n    union() {\n        // upper arm\n        color(\"navy\")\n        rotate([90,0,0])\n        cylinder(h = armL, r = 4, center = true);\n        // forearm\n        translate([0,0,-armL/2-forearmL/2])\n        rotate([90,0,0])\n        cylinder(h = forearmL, r = 3.5, center = true);\n        // hand\n        translate([0,0,-armL/2-forearmL-3])\n        color(\"tan\")\n        sphere(d = 7);\n    }\n}\n\n// Leg module (right or left)\nmodule leg(side = 1) { // 1 for right, -1 for left\n    translate([side * bodyW/4, 0, -legL/2])\n    union() {\n        // upper leg\n        color(\"navy\")\n        cylinder(h = legL, r = 4.5, center = true);\n        // shin\n        translate([0,0,-legL/2-shinL/2])\n        cylinder(h = shinL, r = 4, center = true);\n        // shoe\n        translate([0,0,-legL/2-shinL-shoeH/2])\n        color(\"black\")\n        roundedBox([shoeL, shoeW, shoeH], 2, center = true);\n    }\n}\n\n// Backpack\nmodule backpack() {\n    color(\"darkgray\")\n    translate([0, bodyT/2 + backpackD/2, bodyH/2])\n    roundedBox([backpackW, backpackD, backpackH], 2, center = true);\n}\n\n// Coffee cup in right hand\nmodule coffee() {\n    translate([bodyW/2 + armL + forearmL + 3, 0, bodyH - 5 + 5])\n    rotate([0,90,0])\n    union() {\n        // cup\n        color(\"white\")\n        cylinder(h = coffeeH, r = coffeeR, center = false);\n        // lid\n        color(\"white\")\n        translate([0,0,coffeeH])\n        cylinder(h = lidH, r = coffeeR + 0.5, center = false);\n        // handle\n        color(\"white\")\n        translate([coffeeR + handleTh/2, coffeeH/2, 0])\n        rotate([90,0,0])\n        difference() {\n            cylinder(h = handleR*2, r = handleTh, center = true);\n            translate([0,0,handleR])\n            cube([handleR*2,handleTh*2,handleR*2], center = true);\n        }\n    }\n}\n\n// Main assembly\nhead();\ntorso();\narm(1);   // right\narm(-1);  // left\nleg(1);   // right\nleg(-1);  // left\nbackpack();\ncoffee();",
    "renders": true
  },
  {
    "vehicle": "family",
    "openscad_code": "// Family scene: Parent, child, and dog\n// Overall size ~80 mm wide\n\n// Wall thickness for 3D printing\n$fn = 24;\n\n// Base platform to keep figures standing and avoid overhangs\nmodule base() {\n    difference() {\n        translate([0, 0, -1])\n            cube([80, 40, 2], center = true);\n        // Lighten base with shallow recesses\n        for (x = [-30, -10, 10, 30])\n            translate([x, 0, 0])\n                cube([15, 35, 2.2], center = true);\n    }\n}\n\n// Simple humanoid figure\nmodule person(height, body_width, head_diam) {\n    // Body\n    cube([body_width, body_width * 0.7, height * 0.55], center = true);\n\n    // Head\n    translate([0, 0, height * 0.55 / 2 + head_diam / 2])\n        sphere(d = head_diam);\n\n    // Arms\n    for (side = [-1, 1])\n        translate([side * body_width / 2, 0, height * 0.2])\n            rotate([0, 90, 0])\n                cylinder(h = body_width * 0.5, d = body_width * 0.3, center = true);\n\n    // Legs\n    for (side = [-1, 1])\n        translate([side * body_width * 0.25, 0, -height * 0.55 / 2 - height * 0.45 / 2])\n            cube([body_width * 0.4, body_width * 0.5, height * 0.45], center = true);\n}\n\n// Dog figure\nmodule dog() {\n    // Body\n    cube([18, 10, 8], center = true);\n\n    // Head\n    translate([12, 0, 2])\n        sphere(d = 8);\n\n    // Snout\n    translate([17, 0, 0])\n        cube([6, 4, 4], center = true);\n\n    // Legs\n    for (x = [-6, 6])\n        for (y = [-4, 4])\n            translate([x, y, -6])\n                cube([3, 3, 6]);\n\n    // Tail\n    translate([-10, 0, 2])\n        rotate([0, 45, 0])\n            cylinder(h = 8, d = 3);\n}\n\n// Assemble the family\nbase();\n\n// Parent (left)\ntranslate([-25, 0, 1])\n    person(30, 10, 8);\n\n// Child (right)\ntranslate([10, 0, 1])\n    scale([0.7, 0.7, 0.7])\n        person(30, 10, 8);\n\n// Dog (front)\ntranslate([0, -15, 1])\n    dog();",
    "renders": true
  },
  {
    "vehicle": "utility",
    "openscad_code": "// Metric tape measure (realistic style, medium complexity)\n// Total length 60 mm, width 25 mm, thickness 12 mm\n// 3 mm wall thickness, no overhangs >45°, print-in-place\n\n$fn = 36;\n\nmodule tape_measure() {\n    // Main housing\n    difference() {\n        // Outer shell\n        hull() {\n            translate([0, 10, 0])\n                cube([55, 20, 12], center=true);\n            translate([0, -10, 0])\n                cube([55, 10, 12], center=true);\n        }\n        \n        // Hollow interior\n        hull() {\n            translate([0, 10, 0])\n                cube([49, 14, 10], center=true);\n            translate([0, -10, 0])\n                cube([49, 4, 10], center=true);\n        }\n    }\n    \n    // Tape slot opening\n    translate([27.5, 0, 0])\n        cube([6, 3, 6], center=true);\n    \n    // Belt clip\n    translate([-27.5, 0, -6])\n        rotate([0, 0, 0])\n            difference() {\n                // Clip body\n                translate([0, 0, 2])\n                    cube([8, 20, 4], center=true);\n                // Spring gap\n                translate([0, 0, 0])\n                    cube([6, 18, 2], center=true);\n                // Rounded end\n                translate([0, 11, 2])\n                    rotate([90, 0, 0])\n                        cylinder(h=8, r=2, center=true);\n            }\n    \n    // Thumb lock slider\n    translate([15, 0, 6])\n        difference() {\n            // Slider base\n            cube([10, 8, 3], center=true);\n            // Grip ridges\n            for(i = [-3:3]) {\n                translate([i*1.2, 0, 1.5])\n                    cube([0.5, 7.5, 0.5], center=true);\n            }\n        }\n    \n    // Front bumper\n    translate([30, 0, 0])\n        difference() {\n            // Bumper body\n            cube([5, 25, 12], center=true);\n            // Tape exit\n            translate([0, 0, 0])\n                cube([3, 3, 6], center=true);\n        }\n    \n    // Measure tape segments\n    color(\"silver\")\n    for(i = [0:9]) {\n        translate([27 - i*5, 0, 0])\n            difference() {\n                // Segment body\n                cube([4.8, 2.8, 0.2], center=true);\n                // Markings\n                if(i % 2 == 0) {\n                    translate([0, 1.2, 0.11])\n                        cube([4.8, 0.2, 0.05], center=true);\n                }\n                if(i % 5 == 0) {\n                    translate([0, 0.8, 0.11])\n                        cube([4.8, 0.6, 0.05], center=true);\n                }\n            }\n    }\n    \n    // Screw posts (for assembly)\n    translate([-20, 8, 0])\n        cylinder(h=12, r=2, center=true);\n    translate([-20, -8, 0])\n        cylinder(h=12, r=2, center=true);\n    translate([20, 8, 0])\n        cylinder(h=12, r=2, center=true);\n    translate([20, -8, 0])\n        cylinder(h=12, r=2, center=true);\n}\n\ntape_measure();",
    "renders": true
  },
  {
    "vehicle": "work",
    "openscad_code": "// Realistic workbench with functional features\n// Overall dimensions: 80mm x 45mm x 50mm\n\n// Base thickness and wall settings\nbase_thickness = 3;\nwall_thickness = 2.5;\n\n// Overall dimensions\nlength = 80;\nwidth = 45;\nheight = 50;\n\n// Leg dimensions\nleg_width = 3;\nleg_height = height - base_thickness;\n\n// Work surface dimensions\nsurface_thickness = 2;\nsurface_length = length - 2;\nsurface_width = width - 2;\n\n// Back panel height\nback_height = 30;\n\n// Shelf dimensions\nshelf_height = 20;\nshelf_thickness = 1.5;\n\n// Pegboard hole pattern\npeg_spacing = 5;\npeg_diameter = 2;\npeg_rows = floor(back_height / peg_spacing) - 1;\npeg_cols = floor(length / peg_spacing) - 1;\n\nmodule workbench() {\n    // Main work surface\n    translate([0, 0, leg_height])\n        cube([surface_length, surface_width, surface_thickness], center=true);\n    \n    // Four legs\n    for(x = [-1, 1])\n    for(y = [-1, 1])\n        translate([x * (length/2 - leg_width/2), y * (width/2 - leg_width/2), leg_height/2])\n            cube([leg_width, leg_width, leg_height], center=true);\n    \n    // Bottom shelf\n    translate([0, 0, shelf_height/2])\n        cube([length - 4, width - 4, shelf_thickness], center=true);\n    \n    // Back panel with pegboard\n    translate([0, width/2 - wall_thickness/2, back_height/2 + leg_height])\n        cube([length, wall_thickness, back_height], center=true);\n    \n    // Pegboard holes\n    for(i = [0:peg_rows-1])\n    for(j = [0:peg_cols-1])\n        translate([\n            (j - peg_cols/2 + 0.5) * peg_spacing,\n            width/2 - wall_thickness/2,\n            leg_height + (i + 1) * peg_spacing\n        ])\n            rotate([90, 0, 0])\n                cylinder(h=wall_thickness + 0.1, d=peg_diameter, center=true, $fn=12);\n    \n    // Side supports for back panel\n    translate([length/2 - wall_thickness/2, 0, back_height/2 + leg_height])\n        cube([wall_thickness, width, back_height], center=true);\n    translate([-length/2 + wall_thickness/2, 0, back_height/2 + leg_height])\n        cube([wall_thickness, width, back_height], center=true);\n    \n    // Tool rail on back panel\n    translate([0, width/2 - wall_thickness - 1, leg_height + back_height - 5])\n        cube([length - 10, 2, 2], center=true);\n    \n    // Front support beam\n    translate([0, -width/2 + 2, leg_height - 5])\n        cube([length - 6, 3, 3], center=true);\n}\n\n// Render the workbench\nworkbench();",
    "renders": true
  },
  {
    "vehicle": "commercial",
    "openscad_code": "// Commercial Delivery Van\n// 3D printable model ~70mm long\n// Medium complexity realistic style\n\n// Parameters\nvan_length = 70;\nvan_width = 30;\nvan_height = 35;\nwall_thickness = 1.5;\n\n// Main body module\nmodule van_body() {\n    // Lower chassis\n    difference() {\n        cube([van_length, van_width, van_height * 0.4], center = true);\n        translate([0, 0, van_height * 0.2 - wall_thickness])\n            cube([van_length - wall_thickness*2, van_width - wall_thickness*2, van_height * 0.4], center = true);\n    }\n    \n    // Upper cargo area\n    translate([van_length * 0.1, 0, van_height * 0.3])\n    difference() {\n        cube([van_length * 0.7, van_width * 0.9, van_height * 0.6], center = true);\n        translate([0, 0, wall_thickness])\n            cube([van_length * 0.7 - wall_thickness*2, van_width * 0.9 - wall_thickness*2, van_height * 0.6], center = true);\n    }\n    \n    // Driver cab\n    translate([-van_length * 0.25, 0, van_height * 0.3])\n    difference() {\n        cube([van_length * 0.3, van_width * 0.85, van_height * 0.5], center = true);\n        translate([0, 0, wall_thickness])\n            cube([van_length * 0.3 - wall_thickness*2, van_width * 0.85 - wall_thickness*2, van_height * 0.5], center = true);\n    }\n}\n\n// Wheels module\nmodule wheels() {\n    for(side = [-1, 1]) {\n        // Front wheels\n        translate([van_length * 0.3, side * van_width * 0.45, -van_height * 0.3])\n            rotate([0, 0, 90])\n            cylinder(h=4, r=8, $fn=20);\n        \n        // Rear wheels\n        translate([-van_length * 0.2, side * van_width * 0.45, -van_height * 0.3])\n            rotate([0, 0, 90])\n            cylinder(h=4, r=8, $fn=20);\n    }\n}\n\n// Windshield\nmodule windshield() {\n    translate([-van_length * 0.35, 0, van_height * 0.45])\n    rotate([0, -20, 0])\n    difference() {\n        cube([0.5, van_width * 0.65, van_height * 0.3], center = true);\n        translate([1, 0, 0])\n            cube([2, van_width * 0.6, van_height * 0.25], center = true);\n    }\n}\n\n// Side windows\nmodule side_windows() {\n    for(side = [-1, 1]) {\n        translate([van_length * 0.05, side * (van_width * 0.45), van_height * 0.45])\n            rotate([0, 90, 0])\n            difference() {\n                cube([0.5, van_length * 0.25, van_height * 0.2], center = true);\n                translate([1, 0, 0])\n                    cube([2, van_length * 0.23, van_height * 0.18], center = true);\n            }\n    }\n}\n\n// Headlights\nmodule headlights() {\n    for(side = [-1, 1]) {\n        translate([van_length * 0.45, side * van_width * 0.25, -van_height * 0.05])\n            sphere(r=3, $fn=20);\n    }\n}\n\n// Rear lights\nmodule rear_lights() {\n    for(side = [-1, 1]) {\n        translate([-van_length * 0.45, side * van_width * 0.2, -van_height * 0.05])\n            cube([2, 4, 3], center = true);\n    }\n}\n\n// Door handles\nmodule door_handles() {\n    translate([-van_length * 0.15, van_width * 0.45 + 1, van_height * 0.15])\n        rotate([90, 0, 0])\n        cylinder(h=8, r=1, $fn=8);\n}\n\n// Company logo area\nmodule logo_area() {\n    translate([0, van_width * 0.45 + 0.5, van_height * 0.3])\n    difference() {\n        cube([van_length * 0.3, 1, van_height * 0.2], center = true);\n        translate([0, 0, 1])\n            cube([van_length * 0.25, 1.5, van_height * 0.15], center = true);\n    }\n}\n\n// Roof details\nmodule roof_details() {\n    // Roof ridge\n    translate([0, 0, van_height * 0.6 + 1])\n        cube([van_length * 0.6, van_width * 0.8, 2], center = true);\n    \n    // Vent\n    translate([van_length * 0.2, 0, van_height * 0.6 + 3])\n        cylinder(h=3, r=2, $fn=12);\n}\n\n// Assembly\nunion() {\n    van_body();\n    translate([0, 0, 0]) wheels();\n    windshield();\n    side_windows();\n    headlights();\n    rear_lights();\n    door_handles();\n    logo_area();\n    roof_details();\n}",
    "renders": true
  },
  {
    "vehicle": "fleet",
    "openscad_code": "$fn = 32; // Smooth curves\n\n// Fleet scale factor\nfleet_scale = 0.6;\n\n// Main carrier body\nmodule carrier_body() {\n    difference() {\n        // Hull base\n        hull_base();\n        \n        // Flight deck cutout\n        translate([0, 0, 15]) \n            cube([120, 35, 25], center = true);\n        \n        // Bridge cutout\n        translate([0, -18, 5])\n            cube([15, 10, 15], center = true);\n    }\n}\n\nmodule hull_base() {\n    union() {\n        // Main hull\n        translate([0, 0, 5])\n            cube([130, 40, 10], center = true);\n        \n        // Bow\n        translate([65, 0, 5])\n            rotate([0, 90, 0])\n                cylinder(h = 20, r1 = 5, r2 = 0);\n        \n        // Stern\n        translate([-65, 0, 5])\n            rotate([0, 90, 0])\n                cylinder(h = 20, r1 = 5, r2 = 0);\n    }\n}\n\n// Island superstructure\nmodule carrier_island() {\n    translate([0, -20, 15]) {\n        // Bridge tower\n        cube([20, 15, 20], center = true);\n        \n        // Radar mast\n        translate([5, 0, 12])\n            cylinder(h = 15, r = 2);\n        \n        // Radar dish\n        translate([5, 0, 27])\n            sphere(d = 6);\n    }\n}\n\n// Flight deck details\nmodule flight_deck() {\n    translate([0, 0, 16]) {\n        // Deck surface\n        cube([125, 45, 1], center = true);\n        \n        // Catapults (simplified)\n        for(x = [-40, 20]) {\n            translate([x, 0, 0.5])\n                cube([30, 2, 0.5], center = true);\n        }\n        \n        // Arrestor wires\n        for(x = [-50, -30]) {\n            translate([x, 0, 0.5])\n                cube([2, 30, 0.5], center = true);\n        }\n    }\n}\n\n// Destroyer escort\nmodule destroyer() {\n    scale([0.5, 0.4, 0.5]) {\n        union() {\n            // Hull\n            hull_base();\n            \n            // Superstructure\n            translate([0, 0, 8])\n                cube([60, 15, 12], center = true);\n            \n            // Gun turret\n            translate([30, 0, 15])\n                cylinder(h = 5, r = 4);\n            \n            // Smokestack\n            translate([-10, 0, 15])\n                cylinder(h = 8, r = 3);\n        }\n    }\n}\n\n// Frigate escort\nmodule frigate() {\n    scale([0.4, 0.3, 0.4]) {\n        union() {\n            // Hull\n            hull_base();\n            \n            // Bridge\n            translate([0, 0, 8])\n                cube([50, 12, 10], center = true);\n            \n            // Helicopter deck\n            translate([-20, 0, 18])\n                cube([20, 15, 1], center = true);\n        }\n    }\n}\n\n// Submarine\nmodule submarine() {\n    scale([0.3, 0.2, 0.2]) {\n        rotate([90, 0, 0]) {\n            // Main hull\n            cylinder(h = 80, r = 8, center = true);\n            \n            // Conning tower\n            translate([0, 0, 15])\n                cube([15, 8, 8], center = true);\n            \n            // Propeller\n            translate([0, 0, -42])\n                rotate([0, 0, 45])\n                    cube([12, 2, 1], center = true);\n        }\n    }\n}\n\n// Landing craft\nmodule landing_craft() {\n    scale([0.2, 0.15, 0.15]) {\n        union() {\n            // Hull\n            translate([0, 0, 3])\n                cube([40, 15, 6], center = true);\n            \n            // Ramp\n            translate([20, 0, 0])\n                rotate([0, -30, 0])\n                    cube([12, 14, 1], center = true);\n        }\n    }\n}\n\n// Assemble the fleet\nunion() {\n    // Main carrier\n    translate([0, 0, 0])\n        scale(fleet_scale)\n        union() {\n            carrier_body();\n            carrier_island();\n            flight_deck();\n        }\n    \n    // Destroyer escort 1\n    translate([70, 30, 0])\n        destroyer();\n    \n    // Destroyer escort 2 (mirrored)\n    translate([-70, 30, 0])\n        mirror([1, 0, 0])\n            destroyer();\n    \n    // Frigate\n    translate([50, -40, 0])\n        rotate([0, 0, 45])\n            frigate();\n    \n    // Submarine\n    translate([0, -50, -5])\n        submarine();\n    \n    // Landing craft\n    translate([30, -10, 0])\n        landing_craft();\n}",
    "renders": true
  },
  {
    "vehicle": "cargo",
    "openscad_code": "// Realistic cargo container (medium complexity)\n// Overall size: 70 x 30 x 30 mm\n\n$fn = 32;\n\n// Main container body\nmodule container_body() {\n    difference() {\n        // Outer shell\n        cube([70, 30, 30], center=false);\n        \n        // Hollow interior\n        translate([2, 2, 2])\n            cube([66, 26, 28], center=false);\n    }\n}\n\n// Container floor with wood texture\nmodule container_floor() {\n    for (x = [5:10:65]) {\n        translate([x, 2, 1.5])\n            cube([8, 26, 0.5], center=false);\n    }\n}\n\n// Corner posts\nmodule corner_post(x, y) {\n    translate([x, y, 0])\n        cube([3, 3, 30], center=false);\n}\n\n// Door frame\nmodule door_frame() {\n    // Left door\n    translate([1, 1, 1]) {\n        difference() {\n            // Door panel\n            translate([0, 0, 0])\n                cube([34, 2, 28], center=false);\n            \n            // Door handle hole\n            translate([30, -1, 12])\n                cylinder(h=4, r=1.5, center=false);\n                \n            // Door detail lines\n            translate([8, -0.5, 2])\n                cube([0.5, 1, 24], center=false);\n            translate([20, -0.5, 2])\n                cube([0.5, 1, 24], center=false);\n            translate([28, -0.5, 14])\n                cube([0.5, 1, 10], center=false);\n        }\n        \n        // Door handle\n        translate([30, 2, 12])\n            rotate([0, 90, 0])\n                cylinder(h=6, r=1, center=false);\n    }\n    \n    // Right door\n    translate([35, 1, 1]) {\n        difference() {\n            translate([0, 0, 0])\n                cube([34, 2, 28], center=false);\n            \n            translate([4, -1, 12])\n                cylinder(h=4, r=1.5, center=false);\n                \n            translate([6, -0.5, 14])\n                cube([0.5, 1, 10], center=false);\n            translate([14, -0.5, 2])\n                cube([0.5, 1, 24], center=false);\n            translate([26, -0.5, 2])\n                cube([0.5, 1, 24], center=false);\n        }\n        \n        translate([4, 2, 12])\n            rotate([0, 90, 0])\n                cylinder(h=6, r=1, center=false);\n    }\n}\n\n// Locking rods\nmodule locking_rods() {\n    // Left side\n    translate([33, 0, 2])\n        cylinder(h=30, r=0.5, center=false);\n    translate([33, 30, 2])\n        cylinder(h=30, r=0.5, center=false);\n    \n    // Right side\n    translate([37, 0, 2])\n        cylinder(h=30, r=0.5, center=false);\n    translate([37, 30, 2])\n        cylinder(h=30, r=0.5, center=false);\n}\n\n// Top reinforcement beams\nmodule top_beams() {\n    for (x = [5:15:60]) {\n        translate([x, 0, 29])\n            cube([10, 30, 1], center=false);\n    }\n}\n\n// Side wall corrugations\nmodule side_corrugations() {\n    for (y = [5:5:25]) {\n        translate([0, y, 15])\n            cube([70, 1, 15], center=false);\n    }\n}\n\n// Assembly\nunion() {\n    container_body();\n    \n    // Add corner posts\n    corner_post(0, 0);\n    corner_post(67, 0);\n    corner_post(0, 27);\n    corner_post(67, 27);\n    \n    // Add floor\n    container_floor();\n    \n    // Add doors at back\n    translate([0, 27, 0])\n        door_frame();\n    \n    // Add locking mechanism\n    locking_rods();\n    \n    // Add top structural elements\n    top_beams();\n    \n    // Add side corrugations\n    side_corrugations();\n    rotate([0, 180, 0])\n        translate([0, -30, 0])\n            side_corrugations();\n}",
    "renders": true
  },
  {
    "vehicle": "delivery",
    "openscad_code": "// Delivery Drone – medium-complexity, printable, 75 mm tip-to-tip\n// Wings fold up for printing, 1.2 mm wall thickness, no steep overhangs\n\n$fa = 2; $fs = 0.5;\n\nmodule body() {\n    // central tube\n    cylinder(h = 50, d1 = 28, d2 = 26, center = true);\n    // front nose dome\n    translate([0,0,25])\n        sphere(d = 28);\n    // rear motor ring\n    translate([0,0,-25])\n        cylinder(h = 10, d = 30, center = true);\n}\n\nmodule prop() {\n    // hub\n    cylinder(h = 4, d = 8);\n    // three blades, 0.6 mm thick\n    for(a = [0:120:240])\n        rotate([0,0,a])\n            translate([4,0,2])\n                cube([20, 0.6, 4], center = true);\n}\n\nmodule arm() {\n    // printable folded arm\n    rotate([0,0,-90])\n        linear_extrude(height = 2, center = true, convexity = 10)\n            polygon(points = [[0,0],[30,5],[30,-5]]);\n}\n\nmodule motor_pod() {\n    // cylindrical motor housing\n    cylinder(h = 8, d = 12, center = true);\n    // propeller\n    translate([0,0,4]) prop();\n}\n\nmodule landing_leg() {\n    // V-shaped printed flat\n    linear_extrude(height = 2, center = true)\n        polygon(points = [[0,0],[15,-5],[15,5]]);\n}\n\nmodule package() {\n    // simple taped box\n    cube([20,15,10], center = true);\n    // tape line\n    translate([0,0,5.1]) color(\"gray\") cube([22,2,0.5], center = true);\n}\n\n// Main assembly\nbody();\n\n// four arms fold forward\nfor(a = [0:90:270])\n    rotate([0,0,a])\n        translate([15,0,0]) arm();\n\n// motor pods at arm tips\nfor(a = [0:90:270])\n    rotate([0,0,a])\n        translate([45,0,0]) motor_pod();\n\n// landing legs\nfor(a = [45:90:315])\n    rotate([0,0,a])\n        translate([18,0,-30]) landing_leg();\n\n// payload bay under body\ntranslate([0,0,-20]) package();",
    "renders": true
  },
  {
    "vehicle": "panel",
    "openscad_code": "// Realistic Control Panel – 3D-printable, medium complexity\n// Dimensions: 80 x 60 x 12 mm, wall thickness 2 mm, no overhangs\n\n$fn = 36;\n\n// Main body\nmodule panel_base() {\n    difference() {\n        // Outer shell\n        cube([80, 60, 12], center = true);\n        // Hollow cavity\n        translate([0, 0, 1])\n            cube([76, 56, 10], center = true);\n    }\n}\n\n// Recessed display bezel\nmodule display_bezel() {\n    difference() {\n        translate([0, 15, 0])\n            cube([36, 20, 2], center = true);\n        translate([0, 15, 1])\n            cube([30, 14, 2], center = true);\n    }\n}\n\n// Four push buttons\nmodule push_button(pos_x, pos_y, label = \"\") {\n    translate([pos_x, pos_y, 6])\n    union() {\n        // Button cap\n        cylinder(h = 3, r = 4);\n        // Stem\n        cylinder(h = 6, r = 2.5);\n    }\n}\n\n// Rotary encoder with knurled knob\nmodule rotary_encoder(pos_x, pos_y) {\n    translate([pos_x, pos_y, 6])\n    union() {\n        // Shaft\n        cylinder(h = 6, r = 3);\n        // Knob\n        translate([0, 0, 6])\n            cylinder(h = 5, r = 6);\n        // Knurling (simple ridges)\n        for (i = [0:17]) {\n            rotate([0, 0, i * 20])\n                translate([5.5, 0, 2.5])\n                    cube([1, 0.5, 5], center = true);\n        }\n    }\n}\n\n// LED indicators\nmodule led_indicator(pos_x, pos_y) {\n    translate([pos_x, pos_y, 6])\n    union() {\n        // LED housing\n        cylinder(h = 2, r = 4);\n        // Lens\n        translate([0, 0, 2])\n            sphere(r = 3);\n    }\n}\n\n// Ventilation slots pattern\nmodule vent_slots() {\n    for (i = [-2:2]) {\n        translate([i * 12 - 24, -26, 0])\n            cube([8, 4, 2], center = true);\n    }\n}\n\n// Mounting holes\nmodule holes() {\n    for (hx = [-35, 35])\n    for (hy = [-25, 25]) {\n        translate([hx, hy, 0])\n            cylinder(h = 12, r = 2.5, center = true);\n    }\n}\n\n// Assemble everything\nunion() {\n    difference() {\n        panel_base();\n        display_bezel();\n        vent_slots();\n        holes();\n    }\n\n    // Buttons (no overhangs)\n    push_button(-25, -10);\n    push_button(-10, -10);\n    push_button(  5, -10);\n    push_button( 20, -10);\n\n    // Rotary encoder\n    rotary_encoder(-20, 0);\n\n    // LEDs\n    led_indicator(10, 0);\n    led_indicator(25, 0);\n}",
    "renders": true
  },
  {
    "vehicle": "boxtruck",
    "openscad_code": "// Realistic Box Truck - Medium Complexity\n// Overall dimensions: 95mm x 40mm x 45mm\n\n$fn = 32;\n\n// Main truck body\nmodule truck_body() {\n    difference() {\n        // Main box shape\n        translate([0, 0, 20]) cube([70, 38, 25], center=true);\n        \n        // Wheel wells\n        translate([-20, 20, 20]) rotate([0,90,0]) cylinder(h=12, r=10);\n        translate([-20, -20, 20]) rotate([0,90,0]) cylinder(h=12, r=10);\n        translate([20, 20, 20]) rotate([0,90,0]) cylinder(h=12, r=10);\n        translate([20, -20, 20]) rotate([0,90,0]) cylinder(h=12, r=10);\n    }\n}\n\n// Cab section\nmodule cab() {\n    union() {\n        // Main cab\n        translate([-35, 0, 15]) cube([25, 36, 20], center=true);\n        \n        // Cab roof with slight curve\n        translate([-35, 0, 26]) scale([1, 1, 0.3]) sphere(r=12);\n        \n        // Windshield\n        translate([-22, 0, 20]) cube([0.5, 30, 15], center=true);\n    }\n}\n\n// Wheels\nmodule wheel() {\n    difference() {\n        cylinder(h=8, r=10);\n        translate([0, 0, -1]) cylinder(h=10, r=6);\n    }\n}\n\n// Door handles\nmodule door_handle() {\n    translate([0, 0, 0]) rotate([90, 0, 0]) cylinder(h=4, r=1.5);\n}\n\n// Headlights\nmodule headlight() {\n    sphere(r=3);\n}\n\n// Side mirrors\nmodule mirror() {\n    union() {\n        translate([0, 0, 0]) cube([8, 2, 2], center=true);\n        translate([4, 0, 0]) sphere(r=2);\n    }\n}\n\n// Rear doors\nmodule rear_doors() {\n    for(i = [0, 1]) {\n        translate([35, (i == 0 ? 9 : -9), 20]) \n        rotate([0, 0, 0]) \n        cube([1, 17, 23], center=true);\n    }\n}\n\n// Exhaust pipe\nmodule exhaust() {\n    translate([-30, 20, 30]) rotate([0, 90, 0]) cylinder(h=15, r=2);\n}\n\n// Bumper\nmodule bumper() {\n    translate([-47, 0, 7]) cube([4, 38, 4], center=true);\n}\n\n// Assembly\nunion() {\n    // Main truck components\n    truck_body();\n    cab();\n    \n    // Wheels\n    translate([-20, 20, 10]) wheel();\n    translate([-20, -20, 10]) wheel();\n    translate([20, 20, 10]) wheel();\n    translate([20, -20, 10]) wheel();\n    \n    // Front bumper\n    bumper();\n    \n    // Headlights\n    translate([-47, 12, 15]) headlight();\n    translate([-47, -12, 15]) headlight();\n    \n    // Side mirrors\n    translate([-30, 19, 23]) rotate([0, 90, 0]) mirror();\n    translate([-30, -19, 23]) rotate([0, 90, 180]) mirror();\n    \n    // Door handles\n    translate([-30, 18, 15]) door_handle();\n    translate([-30, -18, 15]) door_handle();\n    \n    // Rear doors\n    rear_doors();\n    \n    // Exhaust pipe\n    exhaust();\n    \n    // Small details - fuel cap\n    translate([0, 19, 15]) rotate([90, 0, 0]) cylinder(h=1, r=3);\n    \n    // Roof details\n    translate([-35, 0, 33]) cube([20, 5, 1], center=true);\n}",
    "renders": true
  },
  {
    "vehicle": "flatbed",
    "openscad_code": "// Realistic flatbed truck bed with medium complexity\n// Overall dimensions: 80mm L x 45mm W x 12mm H\n\n$fn = 32;\nwall = 2;\nbed_l = 80;\nbed_w = 45;\nbed_h = 4;\nrail_h = 6;\npost_h = 8;\npost_w = 3;\n\n// Main bed platform\nmodule bed_platform() {\n    difference() {\n        // Main deck\n        translate([0, 0, bed_h/2])\n            cube([bed_l, bed_w, bed_h], center=true);\n        \n        // Lightening holes\n        for(x = [-30, -10, 10, 30])\n            for(y = [-15, 0, 15])\n                translate([x, y, bed_h-0.1])\n                    cylinder(h=bed_h+0.2, r=3);\n    }\n}\n\n// Side rails\nmodule side_rail(x_pos) {\n    translate([x_pos, 0, (bed_h+rail_h)/2])\n        cube([wall, bed_w, rail_h], center=true);\n}\n\n// Stake pockets\nmodule stake_pocket(x_pos, y_pos) {\n    translate([x_pos, y_pos, bed_h+rail_h/2])\n        cube([wall+1, post_w+1, rail_h], center=true);\n}\n\n// Headboard\nmodule headboard() {\n    difference() {\n        // Main headboard\n        translate([-bed_l/2-wall/2, 0, (bed_h+post_h)/2])\n            cube([wall, bed_w, post_h], center=true);\n        \n        // Cutouts for weight reduction\n        for(y = [-15, 0, 15])\n            translate([-bed_l/2, y, bed_h+post_h/2])\n                cube([wall+0.2, 8, post_h+0.2], center=true);\n    }\n}\n\n// Floor planks texture\nmodule floor_planks() {\n    for(x = [-35, -25, -15, -5, 5, 15, 25, 35])\n        translate([x, 0, bed_h/2+0.1])\n            cube([8, bed_w-4, 0.5], center=true);\n}\n\n// Tie down hooks\nmodule tie_hook(x_pos, y_pos) {\n    translate([x_pos, y_pos, bed_h+1])\n        cylinder(h=2, r=1.5);\n    translate([x_pos, y_pos, bed_h+2])\n        sphere(r=2);\n}\n\n// Wheel wells\nmodule wheel_well() {\n    translate([bed_l/4, bed_w/2+wall/2, bed_h/2])\n        rotate([0, 90, 0])\n            cylinder(h=wall+0.2, r=6);\n    translate([bed_l/4, -bed_w/2-wall/2, bed_h/2])\n        rotate([0, 90, 0])\n            cylinder(h=wall+0.2, r=6);\n}\n\n// Assembly\nunion() {\n    // Main components\n    bed_platform();\n    side_rail(bed_l/2+wall/2);\n    side_rail(-bed_l/2-wall/2);\n    headboard();\n    \n    // Stake pockets along sides\n    for(x = [-30, -10, 10, 30])\n        for(y = [bed_w/2-wall/2, -bed_w/2+wall/2])\n            stake_pocket(x, y);\n    \n    // Floor planks\n    floor_planks();\n    \n    // Tie down hooks\n    for(x = [-25, 0, 25])\n        for(y = [bed_w/2-3, -bed_w/2+3])\n            tie_hook(x, y);\n    \n    // Wheel well cutouts\n    difference() {\n        union(); // Placeholder for wheel well subtraction\n        wheel_well();\n        translate([-bed_l/4, bed_w/2+wall/2, bed_h/2])\n            rotate([0, 90, 0])\n                cylinder(h=wall+0.2, r=6);\n        translate([-bed_l/4, -bed_w/2-wall/2, bed_h/2])\n            rotate([0, 90, 0])\n                cylinder(h=wall+0.2, r=6);\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "dumptruck",
    "openscad_code": "// Realistic Medium-Complexity 3D-Printable Dump Truck\n// Overall footprint ~80 mm long, 50 mm wide, 30 mm high\n// All walls >= 1.2 mm for FDM printing\n\n$fa = 2;\n$fs = 0.5;\n\n// Main assembly\nmodule dump_truck() {\n    color(\"darkgreen\") chassis();\n    color(\"darkgreen\") cab();\n    color(\"darkgreen\") axles();\n    color(\"black\") wheels();\n    color(\"yellow\") dump_box();\n}\n\n// Chassis frame\nmodule chassis() {\n    difference() {\n        // main frame rails\n        union() {\n            cube([70, 45, 4], center = true);\n            // rear bumper\n            translate([35, 0, -2.5])\n                cube([3, 48, 6], center = true);\n        }\n        // hollow out for weight saving\n        translate([0, 0, 0])\n            cube([66, 41, 5], center = true);\n    }\n}\n\n// Cab\nmodule cab() {\n    translate([-20, 0, 4])\n    union() {\n        difference() {\n            // cab body\n            cube([18, 22, 18], center = true);\n            translate([1, 0, 3])\n                cube([14, 18, 12], center = true);\n        }\n        // roof visor\n        translate([2, 0, 11])\n            cube([18, 22, 2], center = true);\n        // headlights\n        translate([-9.5, 8, 0])\n            sphere(d = 3);\n        translate([-9.5, -8, 0])\n            sphere(d = 3);\n        // grille\n        translate([-9.5, 0, 0])\n            cube([1, 12, 8], center = true);\n    }\n}\n\n// Front & rear axles\nmodule axles() {\n    axle(-15);\n    axle(20);\n}\n\nmodule axle(x) {\n    translate([x, 0, -6])\n    rotate([0, 90, 0])\n    cylinder(h = 45, d = 3, center = true);\n}\n\n// Wheels – 4 pieces, 5 mm offset from axle\nmodule wheels() {\n    for (side = [-1, 1])\n    for (x = [-15, 20])\n        translate([x, side * 25, -6])\n        wheel();\n}\n\nmodule wheel() {\n    difference() {\n        cylinder(h = 8, d = 14, center = true);\n        translate([0, 0, 0])\n            cylinder(h = 10, d = 4, center = true);\n    }\n}\n\n// Dump box hinged at rear\nmodule dump_box() {\n    translate([15, 0, 5])\n    rotate([0, 0, -10])  // slightly tilted for appearance\n    union() {\n        // box walls\n        difference() {\n            cube([40, 44, 18], center = true);\n            // inner cavity\n            translate([0, 0, 1])\n                cube([36, 40, 18], center = true);\n        }\n        // floor reinforcement ribs\n        for (i = [-10:10:10])\n            translate([i, 0, -8])\n                cube([8, 42, 2], center = true);\n        // hinge pins\n        translate([-20, 0, -9])\n            cylinder(h = 46, d = 2, center = true);\n    }\n}\n\ndump_truck();",
    "renders": true
  },
  {
    "vehicle": "tanker",
    "openscad_code": "// Medium-complexity realistic tanker (crude-oil class)\n// Approx. 1:1800 scale, 95 mm overall length\n\n// Overall dimensions (mm)\nLOA = 95;\nBEAM = 14;\nDRAFT = 4;\n\n// Wall thickness for 3D printing\nWALL = 1.5;\n\n// Hull module\nmodule hull() {\n    difference() {\n        // Main hull shape – ellipsoid cut\n        scale([1, 0.35, 0.25])\n            sphere(d = BEAM * 2.8, $fn = 60);\n        // Flat bottom\n        translate([0, 0, -BEAM * 0.25])\n            cube([BEAM * 3, BEAM * 3, BEAM], center = true);\n    }\n}\n\n// Superstructure block (accommodation & bridge)\nmodule superstructure() {\n    translate([-LOA * 0.35, 0, DRAFT + 5.5]) {\n        // Accommodation block\n        cube([14, BEAM - 2, 7], center = true);\n        // Bridge house on top\n        translate([0, 0, 4.5])\n            cube([8, BEAM - 4, 3], center = true);\n    }\n}\n\n// Single central funnel\nmodule funnel() {\n    translate([-LOA * 0.35 + 2, 0, DRAFT + 12]) {\n        cylinder(h = 6, d1 = 2, d2 = 1.5, $fn = 20);\n    }\n}\n\n// Cargo tank module – single cylindrical section\nmodule tank_section(l = 12, d = 11) {\n    color(\"Gray\")\n    difference() {\n        // Outer tank shell\n        rotate([90, 0, 0])\n            cylinder(h = l, d = d, $fn = 60);\n        // Inner void for printability\n        rotate([90, 0, 0])\n            cylinder(h = l + 0.2, d = d - 2 * WALL, $fn = 60);\n    }\n}\n\n// Deck with safety railing\nmodule deck() {\n    difference() {\n        cube([LOA, BEAM + 0.2, WALL], center = true);\n        translate([0, 0, -0.1])\n            cube([LOA - 2 * WALL, BEAM + 0.2 - 2 * WALL, WALL + 0.2], center = true);\n    }\n}\n\n// Rail posts along deck edge\nmodule rail_posts() {\n    for (x = [-LOA * 0.4 : 4 : LOA * 0.4])\n        translate([x, BEAM / 2 - 0.2, DRAFT + 1.8])\n            cylinder(h = 2.5, d = 0.8, $fn = 8);\n}\n\n// Anchor pockets at bow\nmodule anchors() {\n    for (y = [-BEAM * 0.3, BEAM * 0.3])\n        translate([LOA * 0.47, y, DRAFT + 0.5])\n            rotate([0, 90, 0])\n                cylinder(h = 3, d = 2, $fn = 20);\n}\n\n// Bow bulb\nmodule bulb() {\n    translate([LOA * 0.48, 0, -DRAFT * 0.5])\n        scale([1.5, 1, 0.7])\n            sphere(d = 4, $fn = 30);\n}\n\n// Midship tank farm (9 identical tanks)\nmodule tanks() {\n    for (i = [0 : 9])\n        translate([-LOA * 0.2 + i * 8.5, 0, DRAFT + 1])\n            tank_section();\n}\n\n// Propeller cone\nmodule propeller() {\n    translate([-LOA * 0.48, 0, -DRAFT * 0.6])\n        rotate([0, 0, 180])\n            cylinder(h = 3, d1 = 0, d2 = 2.5, $fn = 20);\n}\n\n// Main assembly\nunion() {\n    hull();\n    translate([0, 0, DRAFT])\n        deck();\n    superstructure();\n    funnel();\n    tanks();\n    rail_posts();\n    anchors();\n    bulb();\n    propeller();\n}",
    "renders": true
  },
  {
    "vehicle": "towtruck",
    "openscad_code": "// Towtruck - Medium complexity, realistic style\n// Dimensions: ~90mm length, 35mm width, 35mm height\n\n$fn = 32;\n\n// Main truck body\nmodule truck_body() {\n    // Cab section\n    translate([0, 0, 8]) {\n        difference() {\n            cube([30, 30, 22], center=true);\n            translate([15, 0, 5]) cube([10, 26, 12], center=true);\n        }\n    }\n    \n    // Engine hood\n    translate([-20, 0, 8]) {\n        cube([10, 28, 18], center=true);\n    }\n    \n    // Bed section\n    translate([25, 0, 3]) {\n        cube([40, 32, 6], center=true);\n    }\n    \n    // Toolboxes\n    translate([35, -18, 7]) {\n        cube([15, 8, 12], center=true);\n    }\n    translate([35, 18, 7]) {\n        cube([15, 8, 12], center=true);\n    }\n}\n\n// Wheels\nmodule wheel() {\n    difference() {\n        cylinder(h=8, r=10, center=true);\n        cylinder(h=9, r=4, center=true);\n    }\n}\n\n// Wheel assembly\nmodule wheel_assembly(pos, angle=0) {\n    translate(pos) rotate([0, 90, angle]) {\n        // Tire\n        color(\"black\") wheel();\n        \n        // Rim\n        translate([0, 0, 0]) {\n            color(\"gray\") cylinder(h=7, r=6, center=true);\n            cylinder(h=8, r=3, center=true);\n        }\n    }\n}\n\n// Boom assembly\nmodule boom() {\n    // Base\n    translate([45, 0, 12]) {\n        rotate([0, 0, 90]) cylinder(h=8, r=6, center=true);\n    }\n    \n    // Boom arm\n    translate([45, 0, 20]) {\n        rotate([0, 45, 0]) cube([50, 4, 4], center=true);\n    }\n    \n    // Support arm\n    translate([45, 0, 12]) {\n        rotate([0, 0, 90]) rotate([45, 0, 0]) \n            cube([35, 3, 3], center=true);\n    }\n}\n\n// Light bar\nmodule light_bar() {\n    translate([-25, 0, 25]) {\n        cube([5, 30, 3], center=true);\n        \n        // Lights\n        for(i = [-10:10:10]) {\n            translate([0, i, 2]) {\n                cylinder(h=3, r=2);\n            }\n        }\n    }\n}\n\n// Windows\nmodule windows() {\n    color(\"lightblue\") {\n        // Front windshield\n        translate([-15, 0, 18]) {\n            cube([0.1, 22, 12], center=true);\n        }\n        \n        // Side windows\n        translate([0, 15, 18]) {\n            rotate([0, 90, 0]) cube([0.1, 22, 12], center=true);\n        }\n        translate([0, -15, 18]) {\n            rotate([0, 90, 0]) cube([0.1, 22, 12], center=true);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Truck body\n    color(\"red\") truck_body();\n    \n    // Windows\n    windows();\n    \n    // Wheels\n    color(\"black\") {\n        wheel_assembly([-15, 17, -3]);\n        wheel_assembly([-15, -17, -3]);\n        wheel_assembly([15, 17, -3]);\n        wheel_assembly([15, -17, -3]);\n        wheel_assembly([45, 17, -3]);\n        wheel_assembly([45, -17, -3]);\n    }\n    \n    // Boom\n    color(\"gray\") boom();\n    \n    // Light bar\n    color(\"blue\") light_bar();\n    \n    // Headlights\n    translate([-25, 12, 12]) {\n        color(\"white\") sphere(r=3);\n    }\n    translate([-25, -12, 12]) {\n        color(\"white\") sphere(r=3);\n    }\n    \n    // Taillights\n    translate([50, 12, 12]) {\n        color(\"red\") sphere(r=2);\n    }\n    translate([50, -12, 12]) {\n        color(\"red\") sphere(r=2);\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "wrecker",
    "openscad_code": "// Wrecker (Tow Truck) - Realistic Style, Medium Complexity\n// Dimensions in mm, printable scale ~80mm length\n\n// Color constants\n$fn = 32;\n\n// Main truck chassis\nmodule chassis() {\n    // Main frame\n    difference() {\n        cube([60, 25, 8], center=true);\n        translate([0, 0, 4])\n            cube([58, 23, 8], center=true);\n    }\n    \n    // Front bumper\n    translate([-30, 0, -3])\n        cube([2, 22, 6], center=true);\n    \n    // Rear bumper\n    translate([30, 0, -3])\n        cube([2, 22, 6], center=true);\n}\n\n// Cab module\nmodule cab() {\n    // Main cab body\n    translate([-15, 0, 6])\n        cube([20, 22, 15], center=true);\n    \n    // Cab roof\n    translate([-15, 0, 15])\n        cube([18, 20, 3], center=true);\n    \n    // Windshield\n    difference() {\n        translate([-5, 0, 9])\n            cube([1, 16, 10], center=true);\n        translate([-4.5, 0, 11])\n            cube([2, 14, 8], center=true);\n    }\n    \n    // Side windows (left)\n    translate([-15, 11.1, 10])\n        cube([16, 0.5, 6], center=true);\n    \n    // Side windows (right)\n    translate([-15, -11.1, 10])\n        cube([16, 0.5, 6], center=true);\n}\n\n// Wheels module\nmodule wheel() {\n    difference() {\n        cylinder(h=4, r=6, center=true);\n        translate([0, 0, 2.1])\n            cylinder(h=0.5, r=3, center=true);\n    }\n}\n\n// Wheel assembly\nmodule wheels() {\n    // Front wheels\n    translate([-20, -12, -5])\n        rotate([90, 0, 0])\n            wheel();\n    translate([-20, 12, -5])\n        rotate([90, 0, 0])\n            wheel();\n    \n    // Rear wheels\n    translate([20, -12, -5])\n        rotate([90, 0, 0])\n            wheel();\n    translate([20, 12, -5])\n        rotate([90, 0, 0])\n            wheel();\n}\n\n// Boom assembly\nmodule boom() {\n    // Base\n    translate([15, 0, 8])\n        cylinder(h=3, r=4, center=true);\n    \n    // Main boom\n    translate([15, 0, 15])\n        rotate([0, 30, 0])\n            cube([40, 3, 3], center=true);\n    \n    // Support struts\n    translate([15, 3, 12])\n        rotate([0, 30, 0])\n            cube([25, 2, 2], center=true);\n    translate([15, -3, 12])\n        rotate([0, 30, 0])\n            cube([25, 2, 2], center=true);\n    \n    // Hook assembly\n    translate([45, 0, 22])\n        rotate([0, 30, 0])\n            cylinder(h=5, r=1, center=true);\n    \n    // Hook\n    translate([45, 0, 25])\n        rotate([0, 30, 0])\n            difference() {\n                cylinder(h=3, r=2, center=true);\n                translate([0, 2, 0])\n                    cube([4, 4, 3], center=true);\n            }\n}\n\n// Tool box\nmodule toolbox() {\n    translate([5, 8, 5])\n        cube([10, 8, 6], center=true);\n}\n\n// Headlights\nmodule headlights() {\n    // Left headlight\n    translate([-29, 7, 2])\n        sphere(r=2);\n    \n    // Right headlight\n    translate([-29, -7, 2])\n        sphere(r=2);\n}\n\n// Exhaust pipe\nmodule exhaust() {\n    translate([10, 13, 10])\n        cylinder(h=15, r=1.5, center=true);\n}\n\n// Main assembly\nunion() {\n    chassis();\n    cab();\n    wheels();\n    boom();\n    toolbox();\n    headlights();\n    exhaust();\n}",
    "renders": true
  },
  {
    "vehicle": "tractor",
    "openscad_code": "// Realistic Medium-Complexity Tractor – OpenSCAD\n// Approx. 85 mm long, 50 mm wide, 50 mm tall\n// Designed for FDM printing (no steep overhangs, 2 mm walls)\n\n$fn=32;\n\n// Main assembly\nmodule tractor() {\n    color(\"JohnDeereGreen\")\n    union() {\n        chassis();\n        cabin();\n        hood();\n        exhaust();\n        drawbar();\n        front_wheels();\n        rear_wheels();\n    }\n}\n\n// Central chassis block\nmodule chassis() {\n    translate([-10,0,20])           // center slightly back\n    cube([80,40,20], center=true);  // 2 mm thick floor\n}\n\n// Cabin with windows and roof\nmodule cabin() {\n    translate([25,0,30])\n    union() {\n        // cabin walls\n        difference() {\n            cube([30,36,28], center=true);\n            translate([0,0,10])\n            cube([26,32,20], center=true); // hollow interior\n        }\n        // roof\n        translate([0,0,14])\n        cube([34,40,2], center=true);\n\n        // cabin windows\n        color(\"LightBlue\")\n        translate([15.5,10,10])\n        cube([1,8,10], center=true);\n        translate([15.5,-10,10])\n        cube([1,8,10], center=true);\n    }\n}\n\n// Engine hood sloped front\nmodule hood() {\n    translate([-30,0,25])\n    union() {\n        // main hood\n        difference() {\n            scale([1,1,0.7])\n            rotate([0,-10,0])\n            cube([30,36,40], center=true);\n            translate([0,0,5])\n            scale([0.9,0.9,0.9])\n            rotate([0,-10,0])\n            cube([30,36,40], center=true);\n        }\n        // grille\n        color(\"Gray\")\n        translate([-15.5,0,10])\n        cube([1,22,14], center=true);\n    }\n}\n\n// Vertical exhaust pipe\nmodule exhaust() {\n    color(\"Gray\")\n    translate([10,18,48])\n    cylinder(h=15, d=4, center=false);\n}\n\n// Simple rear drawbar\nmodule drawbar() {\n    color(\"Black\")\n    translate([-45,0,20])\n    cube([20,8,4], center=true);\n}\n\n// Two front wheels\nmodule front_wheels() {\n    for(side=[-1,1])\n    translate([-20,side*25,10])\n    rotate([0,0,90])\n    wheel(8, 12, 6);\n}\n\n// Two large rear wheels\nmodule rear_wheels() {\n    for(side=[-1,1])\n    translate([30,side*25,10])\n    rotate([0,0,90])\n    wheel(14, 18, 8);\n}\n\n// Generic wheel module\nmodule wheel(diam, width, hub) {\n    color(\"Black\")\n    difference() {\n        cylinder(h=width, d=diam, center=true);\n        // hub hole\n        cylinder(h=width+1, d=hub, center=true);\n    }\n}\n\ntractor();",
    "renders": true
  },
  {
    "vehicle": "semi",
    "openscad_code": "// Semi Truck - Medium Complexity Realistic Style\n// Dimensions in mm, designed for 3D printing\n\n// Overall dimensions\ntruck_length = 90;\ntruck_width = 30;\ntruck_height = 45;\n\n// Main body module\nmodule semi_truck() {\n    color(\"red\")\n    union() {\n        // Cab\n        translate([0, 0, 0])\n            cab();\n        \n        // Sleeper\n        translate([-25, 0, 0])\n            sleeper();\n        \n        // Hood\n        translate([25, 0, -5])\n            hood();\n        \n        // Chassis frame\n        translate([0, 0, -15])\n            chassis();\n        \n        // Wheels\n        wheels();\n        \n        // Fifth wheel plate\n        translate([-35, 0, -5])\n            fifth_wheel();\n        \n        // Exhaust stacks\n        translate([15, 10, 15])\n            exhaust_stack();\n        translate([15, -10, 15])\n            exhaust_stack();\n        \n        // Fuel tanks\n        translate([5, 12, -10])\n            fuel_tank();\n        translate([5, -12, -10])\n            fuel_tank();\n    }\n}\n\n// Cab module\nmodule cab() {\n    difference() {\n        // Main cab body\n        translate([10, 0, 15])\n            cube([25, 22, 20], center=true);\n        \n        // Windshield\n        translate([22, 0, 20])\n            cube([8, 18, 12], center=true);\n        \n        // Side windows\n        translate([15, 11, 20])\n            cube([15, 2, 10], center=true);\n        translate([15, -11, 20])\n            cube([15, 2, 10], center=true);\n    }\n    \n    // Roof air dam\n    translate([10, 0, 30])\n        cube([25, 24, 3], center=true);\n}\n\n// Sleeper module\nmodule sleeper() {\n    difference() {\n        translate([-10, 0, 15])\n            cube([20, 20, 18], center=true);\n        \n        // Windows\n        translate([-10, 10, 15])\n            cube([18, 2, 8], center=true);\n        translate([-10, -10, 15])\n            cube([18, 2, 8], center=true);\n    }\n}\n\n// Hood module\nmodule hood() {\n    difference() {\n        // Main hood\n        translate([40, 0, 0])\n            cube([20, 20, 15], center=true);\n        \n        // Grille\n        translate([50, 0, 0])\n            cube([2, 14, 8], center=true);\n        \n        // Headlights\n        translate([50, 7, 5])\n            cylinder(h=3, r=2, $fn=16);\n        translate([50, -7, 5])\n            cylinder(h=3, r=2, $fn=16);\n    }\n    \n    // Hood ornament\n    translate([50, 0, 12])\n        cylinder(h=5, r=1.5, $fn=16);\n}\n\n// Chassis frame\nmodule chassis() {\n    // Side rails\n    translate([0, 12, 0])\n        cube([truck_length, 2, 8], center=true);\n    translate([0, -12, 0])\n        cube([truck_length, 2, 8], center=true);\n    \n    // Cross members\n    for(i = [-30:15:30]) {\n        translate([i, 0, 0])\n            cube([2, 24, 8], center=true);\n    }\n}\n\n// Wheels module\nmodule wheels() {\n    // Front wheels\n    translate([35, 10, -10])\n        wheel();\n    translate([35, -10, -10])\n        wheel();\n    \n    // Rear wheels (tandem axle)\n    for(x = [-20:10:-10]) {\n        translate([x, 10, -10])\n            wheel();\n        translate([x, -10, -10])\n            wheel();\n    }\n}\n\n// Single wheel\nmodule wheel() {\n    difference() {\n        // Tire\n        color(\"black\")\n        cylinder(h=8, r=6, center=true, $fn=32);\n        \n        // Rim\n        color(\"silver\")\n        translate([0, 0, 1])\n            cylinder(h=6, r=4, center=true, $fn=32);\n    }\n}\n\n// Fifth wheel plate\nmodule fifth_wheel() {\n    difference() {\n        // Plate\n        translate([0, 0, 0])\n            cube([15, 10, 2], center=true);\n        \n        // Coupling slot\n        translate([0, 0, 1])\n            cube([8, 6, 3], center=true);\n    }\n}\n\n// Exhaust stack\nmodule exhaust_stack() {\n    // Stack\n    color(\"silver\")\n    translate([0, 0, 0])\n        cylinder(h=25, r=2, $fn=16);\n    \n    // Heat shield\n    color(\"silver\")\n    translate([0, 0, 10])\n        cylinder(h=8, r=3, $fn=16);\n}\n\n// Fuel tank\nmodule fuel_tank() {\n    color(\"silver\")\n    difference() {\n        // Tank body\n        rotate([90, 0, 0])\n            cylinder(h=25, r=5, $fn=32);\n        \n        // Cap\n        translate([0, 12.5, 4])\n            cylinder(h=2, r=3, $fn=16);\n    }\n}\n\n// Render the truck\nsemi_truck();",
    "renders": true
  },
  {
    "vehicle": "rig",
    "openscad_code": "// Realistic Medium-Complexity Oil-Rig Platform\n// Overall footprint ≈ 80 mm × 80 mm × 100 mm\n// Designed for 3D printing – 1.2 mm wall thickness, no steep overhangs\n\n$fn = 50;  // smooth curves\n\nmodule leg(x,y) {\n    // Single hollow support leg with slight draft\n    translate([x, y, 0]) {\n        difference() {\n            cylinder(h = 90, d1 = 10, d2 = 8, center = false);\n            translate([0,0,1]) cylinder(h = 88, d1 = 7.6, d2 = 5.6, center = false);\n        }\n    }\n}\n\nmodule bracing() {\n    // Diagonal cross-braces between legs\n    for (rot = [0,90]) {\n        rotate([0,0,rot]) translate([-35,-35,30]) {\n            cube([70,2,2], center = true);\n            translate([0,0,30]) cube([70,2,2], center = true);\n        }\n        rotate([0,0,rot]) translate([-35,-35,60]) {\n            cube([2,70,2], center = true);\n            translate([0,0,30]) cube([2,70,2], center = true);\n        }\n    }\n}\n\nmodule deck() {\n    // Main working deck with grating holes\n    difference() {\n        translate([-40,-40,90]) cube([80,80,3], center = false);\n        for (x = [-35:10:35])\n            for (y = [-35:10:35])\n                translate([x,y,91]) cube([6,6,5], center = false);\n    }\n}\n\nmodule derrick() {\n    // Drilling derrick – open lattice tower\n    translate([0,0,93]) {\n        difference() {\n            // outer frame\n            cube([12,8,50], center = true);\n            // hollow inside\n            cube([9.6,5.6,52], center = true);\n        }\n        // cross-members\n        for (h = [5:10:45])\n            translate([0,0,h]) cube([14,10,1], center = true);\n    }\n}\n\nmodule helipad() {\n    // Helicopter landing platform offset to one corner\n    translate([-40,40,93]) {\n        difference() {\n            cylinder(h = 2, d = 20);\n            for (a = [0:45:315])\n                rotate([0,0,a]) translate([6,0,0]) cube([12,1,3], center = true);\n        }\n    }\n}\n\nmodule flare_stack() {\n    // Flare boom extending off the side\n    translate([40,0,93]) {\n        rotate([0,0,45]) {\n            cylinder(h = 30, d = 4, center = false);\n            translate([0,0,30]) cylinder(h = 10, d1 = 4, d2 = 6, center = false);\n        }\n    }\n}\n\nmodule lifeboat() {\n    // Simple enclosed lifeboat on davits\n    translate([30,30,93]) {\n        rotate([0,30,0]) {\n            difference() {\n                hull() {\n                    sphere(d = 8);\n                    translate([6,0,0]) sphere(d = 8);\n                }\n                cube([15,10,10], center = true);\n            }\n        }\n    }\n}\n\n// Assemble the entire platform\nunion() {\n    // four support legs\n    leg(-30,-30);\n    leg(30,-30);\n    leg(-30,30);\n    leg(30,30);\n\n    // structural braces\n    bracing();\n\n    // main deck\n    deck();\n\n    // superstructures\n    derrick();\n    helipad();\n    flare_stack();\n    lifeboat();\n}",
    "renders": true
  },
  {
    "vehicle": "hauler",
    "openscad_code": "// Realistic Medium-Complexity OpenSCAD Hauler\n// Approx 80 mm long, 30 mm wide, 40 mm high\n// All parts printable without support\n\n$fn = 32;\n\n// Main hull\nmodule hull() {\n    difference() {\n        // Main body block\n        cube([60, 25, 20], center = true);\n        \n        // Cockpit cutout\n        translate([5, 0, 10])\n            cube([20, 22, 15], center = true);\n        \n        // Rear engine cutout\n        translate([-25, 0, 2])\n            cube([10, 18, 16], center = true);\n    }\n}\n\n// Cockpit canopy\nmodule cockpit() {\n    hull_thickness = 1.5;\n    translate([5, 0, 20 - hull_thickness])\n    difference() {\n        // Canopy dome\n        scale([1.2, 1, 0.6])\n            sphere(10);\n        // Hollow interior\n        scale([1.1, 0.9, 0.5])\n            sphere(9);\n    }\n}\n\n// Side thrusters\nmodule side_thruster() {\n    // Main thruster body\n    cylinder(h = 10, r1 = 4, r2 = 2);\n    \n    // Exhaust bell\n    translate([0, 0, -1])\n        cylinder(h = 3, r1 = 5, r2 = 4);\n}\n\n// Left and right thrusters\nmodule thrusters() {\n    translate([0, 12.5 + 4, -5])\n        rotate([0, 90, 0])\n            side_thruster();\n    \n    translate([0, -12.5 - 4, -5])\n        rotate([0, 90, 180])\n            side_thruster();\n}\n\n// Cargo pods\nmodule cargo_pod() {\n    difference() {\n        // Pod body\n        cube([12, 8, 8], center = true);\n        \n        // Pod cavity\n        translate([0, 0, 0])\n            cube([10, 6, 6], center = true);\n    }\n}\n\n// Cargo rack\nmodule cargo_rack() {\n    // Rack frame\n    translate([0, 0, -15])\n        cube([45, 30, 3], center = true);\n    \n    // Mounting struts\n    for (x = [-20, -10, 0, 10, 20]) {\n        translate([x, 0, -15])\n            cube([2, 30, 15], center = true);\n    }\n    \n    // Pods\n    for (x = [-15, -5, 5, 15]) {\n        translate([x, 10, -15 - 4])\n            cargo_pod();\n        translate([x, -10, -15 - 4])\n            cargo_pod();\n    }\n}\n\n// Landing struts\nmodule landing_strut() {\n    // Main leg\n    translate([0, 0, -10])\n        cylinder(h = 10, r = 1.5);\n    \n    // Foot pad\n    translate([0, 0, -10])\n        cylinder(h = 2, r = 3);\n}\n\n// Landing gear array\nmodule landing_gear() {\n    positions = [\n        [-20, 10], [-20, -10],\n        [20, 10], [20, -10]\n    ];\n    \n    for (pos = positions) {\n        translate([pos[0], pos[1], 0])\n            landing_strut();\n    }\n}\n\n// Main assembly\nunion() {\n    // Hull and cockpit\n    hull();\n    cockpit();\n    \n    // Thrusters\n    thrusters();\n    \n    // Cargo system\n    cargo_rack();\n    \n    // Landing gear\n    landing_gear();\n}",
    "renders": true
  },
  {
    "vehicle": "carrier",
    "openscad_code": "// Realistic medium-complexity carrier (lunch-box style) – approx. 100 mm long\n// Wall thickness 2 mm, no severe overhangs – ready for FDM printing\n\n$fn = 36;\n\n// Overall carrier dimensions\ncarrier_w = 60;   // internal width\ncarrier_d = 90;   // internal depth\ncarrier_h = 40;   // internal height\nwall_t   = 2;     // wall thickness\nedge_r   = 3;     // corner radius\n\nmodule rounded_box(x,y,z,r) {\n    // Box with rounded vertical edges\n    hull() {\n        for(i=[-1,1], j=[-1,1])\n            translate([i*(x/2-r), j*(y/2-r), 0])\n                cylinder(r=r, h=z, center=true);\n    }\n}\n\nmodule body() {\n    // Main container\n    difference() {\n        rounded_box(carrier_w+2*wall_t, carrier_d+2*wall_t, carrier_h+wall_t, edge_r+wall_t);\n        translate([0,0,-wall_t/2])\n            rounded_box(carrier_w, carrier_d, carrier_h+1, edge_r);\n    }\n}\n\nmodule lid() {\n    // Hinged lid with grip ridge\n    difference() {\n        // Outer lid shell\n        rounded_box(carrier_w+2*wall_t, carrier_d+2*wall_t, wall_t*2, edge_r+wall_t);\n        // Inner recess\n        translate([0,0,-1])\n            rounded_box(carrier_w+0.5, carrier_d+0.5, wall_t+2, edge_r);\n        \n        // Grip ridge on top\n        ridge_h = 1.5;\n        ridge_w = 30;\n        ridge_d = 50;\n        translate([0, carrier_d/4, wall_t+ridge_h])\n            cube([ridge_w, ridge_d, ridge_h*2], center=true);\n    }\n}\n\nmodule hinge_pin() {\n    // Simple cylindrical hinge pins\n    cylinder(r=2.2, h=carrier_w+4*wall_t, center=true);\n}\n\nmodule hinges() {\n    // Two hinge knuckles on body\n    for(side=[-1,1]) {\n        translate([0, side*(carrier_d/2+wall_t/2), carrier_h/2])\n            rotate([90,0,0])\n                difference() {\n                    cylinder(r=edge_r+wall_t, h=wall_t*2, center=true);\n                    cylinder(r=edge_r-wall_t, h=wall_t*2+1, center=true);\n                }\n    }\n    // Matching knuckles on lid\n    for(side=[-1,1]) {\n        translate([0, side*(carrier_d/2+wall_t/2), carrier_h+wall_t/2])\n            rotate([90,0,0])\n                difference() {\n                    cylinder(r=edge_r+wall_t, h=wall_t*2, center=true);\n                    cylinder(r=2.5, h=wall_t*2+1, center=true);  // pin hole\n                }\n    }\n}\n\nmodule latch() {\n    // Front latch tab\n    latch_w = 20;\n    latch_h = 6;\n    translate([0, -(carrier_d/2+wall_t), carrier_h/2])\n        difference() {\n            // Hook body\n            cube([latch_w, wall_t*2, latch_h], center=true);\n            // Recess for finger\n            translate([0, -wall_t/2-0.5, latch_h/2-1])\n                cube([latch_w-4, wall_t+1, 3], center=true);\n        }\n}\n\n// Assembly\ntranslate([0,0,carrier_h/2])\n    body();\n\ntranslate([0,0,carrier_h+wall_t])\n    lid();\n\nhinges();\ntranslate([0,0,carrier_h/2])\n    rotate([0,90,0])\n        hinge_pin();\n\ntranslate([0,0,carrier_h/2])\n    latch();",
    "renders": true
  },
  {
    "vehicle": "transporter",
    "openscad_code": "// Realistic transporter truck - medium complexity\n// Main body ~80mm length, designed for 3D printing\n\n$fn = 32;\n\n// Overall dimensions\ntruck_length = 80;\ntruck_width = 30;\ntruck_height = 35;\n\n// Cabin dimensions\ncabin_length = 20;\ncabin_width = 30;\ncabin_height = 25;\n\n// Container dimensions\ncontainer_length = 50;\ncontainer_width = 28;\ncontainer_height = 22;\n\n// Wheel dimensions\nwheel_radius = 6;\nwheel_width = 4;\n\nmodule wheel() {\n    difference() {\n        cylinder(h=wheel_width, r=wheel_radius, center=true);\n        cylinder(h=wheel_width+1, r=wheel_radius-2, center=true);\n    }\n}\n\nmodule axle() {\n    rotate([90,0,0]) {\n        cylinder(h=truck_width+10, r=1.5, center=true);\n    }\n}\n\nmodule wheel_assembly() {\n    union() {\n        translate([-truck_width/2-2, 0, 0]) wheel();\n        translate([truck_width/2+2, 0, 0]) wheel();\n        axle();\n    }\n}\n\nmodule cabin() {\n    union() {\n        // Main cabin body\n        translate([0, 0, cabin_height/2]) \n            cube([cabin_length, cabin_width, cabin_height], center=true);\n        \n        // Cabin roof\n        translate([0, 0, cabin_height+2]) \n            cube([cabin_length-2, cabin_width-4, 4], center=true);\n        \n        // Windshield\n        translate([cabin_length/2-0.5, 0, cabin_height/2+2]) \n            cube([1, cabin_width-6, 12], center=true);\n        \n        // Door handles\n        translate([-cabin_length/2+2, cabin_width/2+0.5, cabin_height/2-2]) \n            cube([2, 1, 1], center=true);\n        translate([-cabin_length/2+2, -cabin_width/2-0.5, cabin_height/2-2]) \n            cube([2, 1, 1], center=true);\n    }\n}\n\nmodule container() {\n    difference() {\n        // Main container\n        translate([0, 0, container_height/2+2]) \n            cube([container_length, container_width, container_height], center=true);\n        \n        // Container details - side panels\n        for(i = [-20:10:20]) {\n            translate([i, container_width/2+0.5, container_height/2+2]) \n                cube([8, 1, 18], center=true);\n            translate([i, -container_width/2-0.5, container_height/2+2]) \n                cube([8, 1, 18], center=true);\n        }\n        \n        // Door outlines\n        translate([container_length/2-2, 0, container_height/2+2]) \n            cube([1, container_width-4, 18], center=true);\n    }\n}\n\nmodule chassis() {\n    union() {\n        // Main frame\n        translate([0, 0, 2]) \n            cube([truck_length, 20, 4], center=true);\n        \n        // Front bumper\n        translate([-truck_length/2+2, 0, 2]) \n            cube([4, truck_width, 6], center=true);\n        \n        // Fuel tank\n        translate([5, truck_width/2-4, 4]) \n            cylinder(h=12, r=3, center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Chassis\n    chassis();\n    \n    // Cabin positioned at front\n    translate([-truck_length/2+cabin_length/2, 0, 4]) cabin();\n    \n    // Container positioned behind cabin\n    translate([cabin_length/2+container_length/2-5, 0, 2]) container();\n    \n    // Wheels - front axle\n    translate([-truck_length/2+10, 0, wheel_radius]) wheel_assembly();\n    \n    // Wheels - middle axle\n    translate([0, 0, wheel_radius]) wheel_assembly();\n    \n    // Wheels - rear axle\n    translate([truck_length/2-10, 0, wheel_radius]) wheel_assembly();\n    \n    // Headlights\n    translate([-truck_length/2+2, truck_width/2-5, 6]) sphere(r=1.5);\n    translate([-truck_length/2+2, -truck_width/2+5, 6]) sphere(r=1.5);\n}",
    "renders": true
  },
  {
    "vehicle": "camper",
    "openscad_code": "// Realistic 3D printable camper – medium complexity\n// Overall footprint ~70 mm, wall thickness 1.2 mm for FDM\n\n$fn = 36;\n\n// Main hull\nmodule camper_body() {\n    difference() {\n        // Lower box\n        hull() {\n            translate([-15, -20, 0])  cube([80, 40, 30]);\n            translate([-15, -20, 30]) cube([80, 40, 5]);\n        }\n        // Wheel wells\n        translate([5, -23, 5])  rotate([0,90,0]) cylinder(h=8, d=20);\n        translate([5,  23, 5])  rotate([0,90,0]) cylinder(h=8, d=20);\n        translate([55,-23, 5])  rotate([0,90,0]) cylinder(h=8, d=20);\n        translate([55, 23, 5])  rotate([0,90,0]) cylinder(h=8, d=20);\n    }\n}\n\n// Upper shell / living compartment\nmodule roof_shell() {\n    difference() {\n        hull() {\n            translate([-10, -18, 30]) cube([70, 36, 8]);\n            translate([-10, -18, 38]) cube([70, 36, 2]);\n        }\n        // Roof vent\n        translate([25, 0, 38]) cube([20, 16, 5]);\n    }\n}\n\n// Wheels\nmodule wheels() {\n    for (x=[10,50]) for (y=[-23,23])\n        translate([x,y,0])\n            cylinder(h=8, d=18);\n}\n\n// Door\nmodule door() {\n    difference() {\n        translate([0, -21, 5]) cube([15, 2, 25]);\n        translate([2, -21.5, 18]) cube([4, 3, 4]); // window\n    }\n}\n\n// Windows\nmodule windows() {\n    for (pos=[[15,20],[45,20],[45,-20]])\n        translate(pos+[0,0,15])\n            cube([12, 1.5, 10]);\n}\n\n// Front cab\nmodule cab() {\n    difference() {\n        hull() {\n            translate([-20, -20, 5])  cube([10, 40, 25]);\n            translate([-20, -20, 30]) cube([10, 40, 2]);\n        }\n        // Windshield\n        translate([-19, -15, 20]) cube([2, 30, 12]);\n    }\n}\n\n// Hitch\nmodule hitch() {\n    translate([-25, 0, 8])\n        rotate([90,0,0])\n            cylinder(h=12, d=6);\n}\n\n// Combine parts\nunion() {\n    camper_body();\n    roof_shell();\n    cab();\n    wheels();\n    door();\n    windows();\n    hitch();\n}",
    "renders": true
  },
  {
    "vehicle": "rv",
    "openscad_code": "// RV with moderate detail – 3D-printable, no major overhangs\n// Overall length ≈ 85 mm, width ≈ 35 mm, height ≈ 40 mm\n\n// Wall thickness constant for 3D printing\nwall = 2;\n\n// Main body of the RV\nmodule rv_body() {\n    difference() {\n        // Outer shell\n        hull() {\n            translate([0,0,10]) cube([60,30,20], center=true);  // main box\n            translate([25,0,20]) cube([25,28,15], center=true); // cab extension\n        }\n        // Hollow it out\n        translate([0,0,10]) cube([60-wall*2,30-wall*2,20-wall], center=true);\n        translate([25,0,20]) cube([25-wall*2,28-wall*2,14-wall], center=true);\n    }\n}\n\n// Curved front cab roof\nmodule cab_roof() {\n    translate([25,0,28])\n    scale([1,0.9,0.6])\n    sphere(d=28, $fn=40);\n}\n\n// Side windows (left side; mirrored for right)\nmodule side_windows() {\n    for (x = [-15, -5, 5, 15])\n        translate([x, 15.1, 15])\n        cube([8, wall, 6], center=true);\n}\n\n// Windshield\nmodule windshield() {\n    translate([38,0,20])\n    rotate([0,10,0])\n    cube([0.1, 20, 10], center=true);\n}\n\n// Door\nmodule door() {\n    translate([-20,15.1,12])\n    cube([10, wall, 18], center=false);\n    translate([-20,15.1,22])\n    cylinder(h=wall+0.1, r=1, center=true);\n}\n\n// Wheels (simple cylinders)\nmodule wheel() {\n    rotate([90,0,0])\n    cylinder(h=4, d=10, center=true, $fn=32);\n}\n\n// Wheel wells and mounting\nmodule wheels() {\n    positions = [[-20,-15,5], [-20,15,5], [15,-15,5], [15,15,5]];\n    for (p = positions)\n        translate(p) wheel();\n}\n\n// Roof accessories: AC unit and vent\nmodule roof_ac() {\n    translate([5,0,30])\n    cube([15,15,5], center=true);\n    translate([5,0,32.5])\n    cube([16,1,1], center=true);\n}\n\nmodule roof_vent() {\n    translate([-15,0,30])\n    cylinder(h=3, d=10, center=true, $fn=32);\n}\n\n// Under-floor storage boxes\nmodule storage_boxes() {\n    translate([-10,0,2])\n    cube([40, 32, 4], center=true);\n}\n\n// Combine all parts\nunion() {\n    rv_body();\n    cab_roof();\n    side_windows();\n    mirror([0,1,0]) side_windows();\n    windshield();\n    mirror([0,1,0]) windshield();\n    door();\n    wheels();\n    roof_ac();\n    roof_vent();\n    storage_boxes();\n}",
    "renders": true
  },
  {
    "vehicle": "motorhome",
    "openscad_code": "// Motorhome - realistic style, medium complexity\n// 3D printable, ~75mm long\n\n// Wall thickness for 3D printing\nwall = 1.2;\n\n// Main body\nmodule body() {\n    // Lower chassis box\n    difference() {\n        cube([72, 34, 28], center=true);\n        translate([0, 0, 1.5])\n            cube([69.6, 31.6, 27], center=true);\n    }\n    \n    // Upper living area\n    translate([0, 0, 15.5])\n    difference() {\n        cube([70, 32, 20], center=true);\n        translate([0, 0, 1.5])\n            cube([67.6, 29.6, 19], center=true);\n    }\n    \n    // Cab overhang\n    translate([25, 0, 26.5])\n    difference() {\n        cube([22, 30, 8], center=true);\n        translate([0, 0, 1.5])\n            cube([19.6, 27.6, 7], center=true);\n    }\n}\n\n// Windshield\nmodule windshield() {\n    translate([36, 0, 22])\n    rotate([15, 0, 0])\n    difference() {\n        cube([0.8, 28, 12], center=true);\n        translate([0, 0, -1])\n            cube([1, 26, 10], center=true);\n    }\n}\n\n// Side windows\nmodule side_windows() {\n    for(pos = [[-15, 17, 20], [-30, 17, 20]]) {\n        translate(pos)\n        difference() {\n            cube([12, 0.8, 8], center=true);\n            translate([0, 0, -1])\n                cube([10.4, 1, 6.4], center=true);\n        }\n    }\n}\n\n// Wheels\nmodule wheels() {\n    for(side = [-1, 1]) {\n        for(x = [-20, -3, 16]) {\n            translate([x, side * 20, -10])\n            rotate([90, 0, 0])\n            difference() {\n                cylinder(h=6, r=6, center=true);\n                cylinder(h=7, r=2.5, center=true);\n            }\n        }\n    }\n}\n\n// Door\nmodule door() {\n    translate([-35, 17, 15])\n    difference() {\n        cube([12, 0.8, 18], center=true);\n        translate([0, 0, -1])\n            cube([10.4, 1, 16.4], center=true);\n        // Door handle\n        translate([3, 0.5, -5])\n            cube([2, 1, 1]);\n    }\n}\n\n// Roof details\nmodule roof_details() {\n    // AC unit\n    translate([0, 0, 27])\n    cube([8, 8, 3], center=true);\n    \n    // Roof vent\n    translate([-20, 0, 27])\n    cube([6, 6, 1.5], center=true);\n}\n\n// Headlights\nmodule headlights() {\n    for(side = [-1, 1]) {\n        translate([37, side * 10, 18])\n        sphere(r=2);\n    }\n}\n\n// Combine all parts\nunion() {\n    body();\n    windshield();\n    side_windows();\n    wheels();\n    door();\n    roof_details();\n    headlights();\n}",
    "renders": true
  },
  {
    "vehicle": "caravan",
    "openscad_code": "// Caravan - Realistic medium-complexity model\n// Scaled for 3D printing, max dimension ~70 mm\n\n$fn = 32;\n\nmodule wheel(r=6, w=4) {\n    difference() {\n        cylinder(h=w, r=r, center=true);\n        cylinder(h=w+0.2, r=r*0.4, center=true);\n    }\n}\n\nmodule wheelset() {\n    translate([0, 0, 5])\n    for (x=[-22, 22])\n        translate([x, 0, 0])\n        rotate([90, 0, 0])\n        wheel();\n}\n\nmodule body() {\n    hull() {\n        translate([0, 0, 15])\n            cube([45, 25, 30], center=true);\n        translate([0, 0, 40])\n            cube([45, 25, 20], center=true);\n    }\n}\n\nmodule roof() {\n    translate([0, 0, 50])\n    difference() {\n        hull() {\n            translate([0, 0, 5])\n                cube([48, 28, 4], center=true);\n            translate([0, 0, 15])\n                cube([48, 28, 4], center=true);\n        }\n        translate([0, 0, 5])\n            cube([50, 30, 20], center=true);\n    }\n}\n\nmodule door() {\n    translate([22, 0, 15])\n    difference() {\n        cube([2, 10, 20], center=true);\n        translate([0, 0, 8])\n            cylinder(h=2.2, r=1.5, center=true);\n    }\n}\n\nmodule windows() {\n    // front window\n    translate([0, 13, 30])\n    difference() {\n        cube([20, 2, 12], center=true);\n        cube([18, 2.2, 10], center=true);\n    }\n    \n    // side windows\n    for (x=[-15, 15])\n        translate([x, 13, 30])\n        difference() {\n            cube([8, 2, 8], center=true);\n            cube([7, 2.2, 7], center=true);\n        }\n}\n\nmodule chassis() {\n    translate([0, 0, 5])\n    difference() {\n        cube([50, 28, 6], center=true);\n        translate([0, 0, 3])\n            cube([46, 24, 6], center=true);\n    }\n}\n\nmodule towbar() {\n    translate([26, 0, 10])\n    union() {\n        cube([12, 4, 4], center=true);\n        translate([7, 0, 0])\n            cube([2, 2, 2], center=true);\n    }\n}\n\nmodule vents() {\n    // roof vent\n    translate([0, 0, 55])\n    difference() {\n        cube([8, 4, 3], center=true);\n        translate([0, 0, -1])\n            cube([7, 3, 5], center=true);\n    }\n    \n    // side vents\n    for (x=[-20, 20])\n        translate([x, 0, 25])\n        difference() {\n            cube([4, 26, 2], center=true);\n            translate([0, 0, -1])\n                cube([3, 24, 4], center=true);\n        }\n}\n\nmodule caravan() {\n    union() {\n        chassis();\n        body();\n        roof();\n        door();\n        windows();\n        towbar();\n        vents();\n        wheelset();\n    }\n}\n\nscale([1, 1, 1])\ncaravan();",
    "renders": true
  },
  {
    "vehicle": "trailercar",
    "openscad_code": "$fn = 32;\n\n// Overall scale factor\nscale_factor = 1;\n\n// Dimensions (in mm)\ntruck_length = 70 * scale_factor;\ntruck_width = 30 * scale_factor;\ntruck_height = 30 * scale_factor;\ntrailer_length = 80 * scale_factor;\ntrailer_width = 28 * scale_factor;\ntrailer_height = 35 * scale_factor;\nwheel_diameter = 12 * scale_factor;\nwheel_width = 6 * scale_factor;\naxle_diameter = 3 * scale_factor;\n\n// Main trailer car assembly\nmodule trailer_car() {\n    // Truck (front part)\n    translate([0, 0, wheel_diameter/2]) {\n        // Truck cab\n        color(\"red\") {\n            cube([truck_length/2, truck_width, truck_height], center=true);\n        }\n        \n        // Cab roof\n        translate([truck_length/4, 0, truck_height/2 + 2.5]) {\n            color(\"red\") {\n                cube([truck_length/3, truck_width - 4, 5], center=true);\n            }\n        }\n        \n        // Windshield\n        translate([truck_length/4, 0, 2]) {\n            color(\"lightblue\") {\n                cube([truck_length/4 - 2, truck_width - 6, 8], center=true);\n            }\n        }\n        \n        // Headlights\n        for(side = [-1, 1]) {\n            translate([truck_length/2 - 2, side * (truck_width/2 - 3), 0]) {\n                color(\"yellow\") {\n                    sphere(2);\n                }\n            }\n        }\n    }\n    \n    // Trailer\n    translate([truck_length/2 + trailer_length/2, 0, wheel_diameter/2 + 2]) {\n        color(\"silver\") {\n            cube([trailer_length, trailer_width, trailer_height], center=true);\n        }\n        \n        // Trailer sides\n        for(side = [-1, 1]) {\n            translate([0, side * (trailer_width/2 - 1), 0]) {\n                color(\"gray\") {\n                    cube([trailer_length, 2, trailer_height], center=true);\n                }\n            }\n        }\n        \n        // Top rail\n        translate([0, 0, trailer_height/2 + 1]) {\n            color(\"gray\") {\n                cube([trailer_length - 4, trailer_width - 2, 2], center=true);\n            }\n        }\n    }\n    \n    // Wheels\n    wheel_positions = [\n        [-truck_length/2 + 10, -truck_width/2 - wheel_width/2, 0],\n        [-truck_length/2 + 10, truck_width/2 + wheel_width/2, 0],\n        [-truck_length/2 + 5, -truck_width/2 - wheel_width/2, 0],\n        [-truck_length/2 + 5, truck_width/2 + wheel_width/2, 0],\n        [truck_length/2 + trailer_length/2 - 20, -trailer_width/2 - wheel_width/2, 2],\n        [truck_length/2 + trailer_length/2 - 20, trailer_width/2 + wheel_width/2, 2],\n        [truck_length/2 + trailer_length/2 + 10, -trailer_width/2 - wheel_width/2, 2],\n        [truck_length/2 + trailer_length/2 + 10, trailer_width/2 + wheel_width/2, 2]\n    ];\n    \n    for(pos = wheel_positions) {\n        translate(pos) {\n            rotate([0, 90, 0]) {\n                color(\"black\") {\n                    cylinder(h=wheel_width, d=wheel_diameter, center=true);\n                }\n            }\n        }\n    }\n    \n    // Axles\n    axle_positions = [\n        [-truck_length/2 + 10, 0, 0],\n        [-truck_length/2 + 5, 0, 0],\n        [truck_length/2 + trailer_length/2 - 20, 0, 2],\n        [truck_length/2 + trailer_length/2 + 10, 0, 2]\n    ];\n    \n    for(pos = axle_positions) {\n        translate(pos) {\n            rotate([0, 90, 0]) {\n                color(\"gray\") {\n                    cylinder(h=truck_width + wheel_width * 2 + 4, d=axle_diameter, center=true);\n                }\n            }\n        }\n    }\n    \n    // Trailer hitch\n    translate([truck_length/2 - 2, 0, wheel_diameter/2 + 2]) {\n        color(\"gray\") {\n            cube([4, 8, 4], center=true);\n        }\n    }\n    \n    // Exhaust pipe\n    translate([-truck_length/2 + 5, -truck_width/2 - 2, truck_height/2]) {\n        color(\"gray\") {\n            cylinder(h=truck_height/2 + 5, d=2);\n        }\n    }\n    \n    // Fuel tanks\n    translate([-truck_length/2 + 15, -truck_width/2 - 2, wheel_diameter/2]) {\n        rotate([90, 0, 0]) {\n            color(\"silver\") {\n                cylinder(h=15, d=6);\n            }\n        }\n    }\n}\n\n// Generate the trailer car\ntrailer_car();",
    "renders": true
  },
  {
    "vehicle": "offroader",
    "openscad_code": "// Offroader - Realistic style, medium complexity\n// Overall dimensions: ~80mm long, ~40mm wide, ~40mm high\n\n$fn = 32;  // Smooth curves\n\n// Main body\nmodule body() {\n    // Chassis base\n    translate([0, 0, 5]) \n        cube([60, 35, 4], center=true);\n    \n    // Main cabin\n    translate([0, 0, 13])\n        cube([45, 32, 18], center=true);\n    \n    // Hood\n    translate([25, 0, 11])\n        cube([25, 28, 10], center=true);\n    \n    // Roof\n    translate([0, 0, 25])\n        cube([40, 30, 2], center=true);\n    \n    // Front bumper\n    translate([35, 0, 7])\n        cube([10, 28, 6], center=true);\n    \n    // Rear bumper\n    translate([-35, 0, 7])\n        cube([10, 28, 6], center=true);\n}\n\n// Wheels\nmodule wheel() {\n    difference() {\n        // Tire\n        cylinder(h=8, r=10);\n        \n        // Rim\n        cylinder(h=9, r=6);\n        \n        // Rim detail\n        for(i=[0:5]) {\n            rotate([0, 0, i*60])\n                translate([4, 0, 4])\n                    cube([2, 1, 8], center=true);\n        }\n    }\n}\n\n// Wheel assembly with suspension\nmodule wheel_assembly(x, y, z) {\n    translate([x, y, z]) {\n        // Suspension arm\n        rotate([90, 0, 0])\n            cylinder(h=6, r=2);\n        \n        // Wheel\n        rotate([0, 90, 0])\n            wheel();\n    }\n}\n\n// Windows\nmodule windows() {\n    color(\"lightblue\", 0.6) {\n        // Windshield\n        translate([15, 0, 18])\n            rotate([100, 0, 0])\n                cube([20, 28, 0.5], center=true);\n        \n        // Side windows\n        translate([0, 15, 18])\n            cube([40, 0.5, 12], center=true);\n        translate([0, -15, 18])\n            cube([40, 0.5, 12], center=true);\n        \n        // Rear window\n        translate([-15, 0, 18])\n            rotate([80, 0, 0])\n                cube([20, 28, 0.5], center=true);\n    }\n}\n\n// Lights\nmodule lights() {\n    // Headlights\n    translate([38, 10, 11])\n        sphere(r=3);\n    translate([38, -10, 11])\n        sphere(r=3);\n    \n    // Taillights\n    translate([-38, 10, 11])\n        sphere(r=2.5);\n    translate([-38, -10, 11])\n        sphere(r=2.5);\n}\n\n// Spare tire\nmodule spare_tire() {\n    translate([-38, 0, 22])\n        rotate([90, 0, 0])\n            difference() {\n                cylinder(h=6, r=10);\n                cylinder(h=7, r=6);\n            }\n}\n\n// Roll bar\nmodule roll_bar() {\n    translate([0, 0, 28]) {\n        // Main bar\n        rotate([0, 0, 0])\n            cylinder(h=30, r=1.5);\n        \n        // Cross bars\n        translate([10, 0, 0])\n            rotate([90, 0, 0])\n                cylinder(h=30, r=1.5);\n        translate([-10, 0, 0])\n            rotate([90, 0, 0])\n                cylinder(h=30, r=1.5);\n    }\n}\n\n// Exhaust pipe\nmodule exhaust() {\n    translate([-30, 15, 8])\n        rotate([0, 90, 0])\n            cylinder(h=15, r=2);\n}\n\n// Main assembly\nunion() {\n    body();\n    \n    // Wheels (4WD)\n    wheel_assembly(30, 15, 0);\n    wheel_assembly(30, -15, 0);\n    wheel_assembly(-30, 15, 0);\n    wheel_assembly(-30, -15, 0);\n    \n    windows();\n    lights();\n    spare_tire();\n    roll_bar();\n    exhaust();\n}",
    "renders": true
  },
  {
    "vehicle": "4x4",
    "openscad_code": "// Realistic 4x4 Truck - Medium Complexity\n// Designed for 3D printing (no overhangs, 2mm walls)\n\n// Overall dimensions\ntruck_length = 80;\ntruck_width = 40;\ntruck_height = 35;\nwheel_diameter = 16;\nwheel_width = 8;\n\n// Body module\nmodule body() {\n    // Main chassis\n    difference() {\n        cube([truck_length, truck_width, 15], center=true);\n        translate([0, 0, 7]) cube([truck_length-4, truck_width-4, 9], center=true);\n    }\n    \n    // Cab section\n    translate([-25, 0, 7.5]) difference() {\n        cube([30, 35, 20], center=true);\n        translate([0, 0, 10]) cube([26, 31, 16], center=true);\n    }\n    \n    // Hood\n    translate([-38, 0, 7.5]) difference() {\n        cube([16, 28, 12], center=true);\n        translate([0, 0, 6]) cube([12, 24, 8], center=true);\n    }\n    \n    // Bed\n    translate([25, 0, 7.5]) difference() {\n        cube([25, 34, 12], center=true);\n        translate([0, 0, 6]) cube([21, 30, 8], center=true);\n    }\n    \n    // Roof\n    translate([-25, 0, 20]) cube([30, 28, 2], center=true);\n}\n\n// Wheel module\nmodule wheel() {\n    difference() {\n        cylinder(h=wheel_width, d=wheel_diameter, $fn=20);\n        cylinder(h=wheel_width+1, d=wheel_diameter-6, $fn=20);\n    }\n    \n    // Tire tread pattern\n    for (i=[0:3:360]) {\n        rotate([0, 0, i]) translate([wheel_diameter/2-2, -wheel_width/2-0.5, 0]) \n            cube([1, wheel_width+1, 2]);\n    }\n}\n\n// Suspension module\nmodule suspension() {\n    // Front axle\n    translate([-20, 0, -8]) cube([truck_width, 4, 3], center=true);\n    \n    // Rear axle\n    translate([20, 0, -8]) cube([truck_width, 4, 3], center=true);\n    \n    // Shock absorbers\n    translate([-20, 16, -5]) cylinder(h=4, d=2, $fn=8);\n    translate([-20, -16, -5]) cylinder(h=4, d=2, $fn=8);\n    translate([20, 16, -5]) cylinder(h=4, d=2, $fn=8);\n    translate([20, -16, -5]) cylinder(h=4, d=2, $fn=8);\n}\n\n// Front bumper\nmodule front_bumper() {\n    translate([-45, 0, 0]) cube([6, 36, 6], center=true);\n}\n\n// Rear bumper\nmodule rear_bumper() {\n    translate([45, 0, 0]) cube([6, 36, 6], center=true);\n}\n\n// Headlights\nmodule headlights() {\n    translate([-45, 12, 6]) sphere(d=4, $fn=12);\n    translate([-45, -12, 6]) sphere(d=4, $fn=12);\n}\n\n// Taillights\nmodule taillights() {\n    translate([45, 12, 6]) cube([2, 6, 4], center=true);\n    translate([45, -12, 6]) cube([2, 6, 4], center=true);\n}\n\n// Roll bar\nmodule roll_bar() {\n    translate([25, 0, 15]) {\n        // Vertical posts\n        translate([0, 12, 0]) cylinder(h=10, d=2, $fn=8);\n        translate([0, -12, 0]) cylinder(h=10, d=2, $fn=8);\n        \n        // Horizontal bar\n        translate([0, 0, 10]) cube([2, 24, 2], center=true);\n    }\n}\n\n// Main assembly\nunion() {\n    body();\n    \n    // Wheels\n    translate([-20, 20, -8]) rotate([0, 0, 0]) wheel();\n    translate([-20, -20, -8]) rotate([0, 0, 0]) wheel();\n    translate([20, 20, -8]) rotate([0, 0, 0]) wheel();\n    translate([20, -20, -8]) rotate([0, 0, 0]) wheel();\n    \n    suspension();\n    front_bumper();\n    rear_bumper();\n    headlights();\n    taillights();\n    roll_bar();\n}",
    "renders": true
  },
  {
    "vehicle": "awd",
    "openscad_code": "// Realistic style AWD (All-Wheel-Drive) transmission block\n// Medium complexity, 3D-printable, no support needed\n\n// Main parameters\n$fn = 36;\nbody_w = 60;\nbody_h = 35;\nbody_d = 40;\n\n// Front differential housing\nmodule front_diff() {\n    translate([body_w/2 + 8, 0, body_h/2])\n    difference() {\n        // Main housing\n        rotate([0, 90, 0])\n        cylinder(h = 18, d1 = 22, d2 = 22);\n        \n        // Bearing bore\n        rotate([0, 90, 0])\n        translate([0, 0, -1])\n        cylinder(h = 20, d = 12);\n    }\n}\n\n// Rear differential housing\nmodule rear_diff() {\n    translate([-body_w/2 - 8, 0, body_h/2])\n    rotate([0, 90, 0])\n    difference() {\n        cylinder(h = 18, d1 = 22, d2 = 22);\n        translate([0, 0, -1])\n        cylinder(h = 20, d = 12);\n    }\n}\n\n// Central transfer case\nmodule transfer_case() {\n    difference() {\n        union() {\n            // Main block\n            translate([0, 0, body_h/2])\n            cube([body_w, body_d, body_h], center = true);\n            \n            // Sloped top\n            translate([0, 0, body_h])\n            cube([body_w - 10, body_d - 10, 8], center = true);\n        }\n        \n        // Front output shaft hole\n        translate([body_w/2, 0, body_h/2])\n        rotate([0, 90, 0])\n        cylinder(h = 40, d = 10);\n        \n        // Rear output shaft hole\n        translate([-body_w/2, 0, body_h/2])\n        rotate([0, 90, 0])\n        cylinder(h = 40, d = 10);\n        \n        // Bottom mounting holes\n        for(x = [-20, 0, 20])\n            translate([x, 0, 0])\n            cylinder(h = 10, d = 4);\n    }\n}\n\n// Mounting brackets\nmodule mount_bracket(x_pos, y_pos) {\n    translate([x_pos, y_pos, 5])\n    difference() {\n        cube([8, 6, 10], center = true);\n        translate([0, 0, -5.1])\n        cylinder(h = 10.2, d = 3);\n    }\n}\n\n// Cooling fins on transfer case\nmodule cooling_fins() {\n    for(i = [-body_w/2 + 5 : 3 : body_w/2 - 5]) {\n        translate([i, -body_d/2 - 1, body_h - 5])\n        cube([2, 2, 8]);\n    }\n}\n\n// Input flange\nmodule input_flange() {\n    translate([0, body_d/2 + 8, body_h/2])\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h = 6, d = 16);\n        translate([0, 0, -1])\n        cylinder(h = 8, d = 8);\n        \n        // Bolt holes\n        for(a = [0 : 60 : 300]) {\n            rotate([0, 0, a])\n            translate([6, 0, -1])\n            cylinder(h = 8, d = 2);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    transfer_case();\n    front_diff();\n    rear_diff();\n    input_flange();\n    \n    // Mounting brackets\n    for(x = [-20, 20])\n        mount_bracket(x, body_d/2 + 2);\n    \n    cooling_fins();\n}",
    "renders": true
  },
  {
    "vehicle": "fwd",
    "openscad_code": "$fn=64;\n\n// Overall dimensions\nwheelbase = 45;\ntrack = 20;\nbody_width = 20;\nbody_height = 15;\nbody_length = 50;\n\n// Wheel parameters\nwheel_d = 12;\nwheel_w = 6;\ntire_thick = 1.5;\n\n// Clearance\nground_clearance = 8;\n\n// Body shell\nmodule body() {\n    difference() {\n        // Main body\n        translate([0,0,ground_clearance+body_height/2])\n            cube([body_length, body_width, body_height], center=true);\n        \n        // Cabin\n        translate([5,0,ground_clearance+body_height-5])\n            cube([body_length/1.8, body_width-4, 10], center=true);\n        \n        // Windshield slope\n        translate([15,0,ground_clearance+body_height])\n            rotate([0,20,0])\n                cube([body_length/2, body_width-2, 12], center=true);\n    }\n}\n\n// Hood detail\nmodule hood() {\n    translate([body_length/2-10,0,ground_clearance+body_height/2+2])\n        cube([16, body_width-2, 2], center=true);\n}\n\n// Roof\nmodule roof() {\n    translate([5,0,ground_clearance+body_height+5])\n        cube([body_length/2.2, body_width-6, 2], center=true);\n}\n\n// Wheels\nmodule wheel() {\n    difference() {\n        // Tire\n        color(\"black\")\n        cylinder(h=wheel_w, d=wheel_d, center=true);\n        \n        // Rim\n        color(\"silver\")\n        translate([0,0,-wheel_w/2-0.1])\n            cylinder(h=wheel_w+0.2, d=wheel_d-2*tire_thick, center=true);\n    }\n}\n\n// Wheel well\nmodule wheel_well() {\n    translate([0,0,-ground_clearance/2])\n        cube([wheel_d+4, wheel_d+4, ground_clearance+2], center=true);\n}\n\n// Front bumper\nmodule front_bumper() {\n    translate([body_length/2+2, 0, ground_clearance+3])\n        cube([4, body_width, 6], center=true);\n}\n\n// Rear bumper\nmodule rear_bumper() {\n    translate([-body_length/2-2, 0, ground_clearance+3])\n        cube([4, body_width, 6], center=true);\n}\n\n// Side mirrors\nmodule mirrors() {\n    translate([10, body_width/2+1, ground_clearance+body_height-3])\n        cube([2, 1, 1], center=true);\n    translate([10, -body_width/2-1, ground_clearance+body_height-3])\n        cube([2, 1, 1], center=true);\n}\n\n// Headlight\nmodule headlight() {\n    translate([body_length/2+1, body_width/3, ground_clearance+body_height/2])\n        sphere(d=2);\n    translate([body_length/2+1, -body_width/3, ground_clearance+body_height/2])\n        sphere(d=2);\n}\n\n// Taillight\nmodule taillight() {\n    translate([-body_length/2-1, body_width/3, ground_clearance+body_height/2])\n        sphere(d=2);\n    translate([-body_length/2-1, -body_width/3, ground_clearance+body_height/2])\n        sphere(d=2);\n}\n\n// Assemble vehicle\nunion() {\n    body();\n    hood();\n    roof();\n    front_bumper();\n    rear_bumper();\n    mirrors();\n    headlight();\n    taillight();\n    \n    // Wheels\n    translate([wheelbase/2, track/2, wheel_d/2])\n        rotate([90,0,0])\n            wheel();\n    translate([wheelbase/2, -track/2, wheel_d/2])\n        rotate([90,0,0])\n            wheel();\n    translate([-wheelbase/2, track/2, wheel_d/2])\n        rotate([90,0,0])\n            wheel();\n    translate([-wheelbase/2, -track/2, wheel_d/2])\n        rotate([90,0,0])\n            wheel();\n    \n    // Wheel wells\n    translate([wheelbase/2, track/2, 0])\n        wheel_well();\n    translate([wheelbase/2, -track/2, 0])\n        wheel_well();\n    translate([-wheelbase/2, track/2, 0])\n        wheel_well();\n    translate([-wheelbase/2, -track/2, 0])\n        wheel_well();\n}",
    "renders": true
  },
  {
    "vehicle": "rwd",
    "openscad_code": "// Realistic RWD (Rear-Wheel-Drive) differential assembly\n// Medium complexity, 3D-printable design\n\nmodule main_housing() {\n    difference() {\n        // Main cast-aluminum housing\n        rotate([90,0,0])\n            cylinder(h=40, d=60, $fn=60);\n        \n        // Center hollow for ring gear\n        rotate([90,0,0])\n            cylinder(h=45, d=40, $fn=60);\n            \n        // Mounting holes\n        for(i=[0:3]) {\n            rotate([0,0,i*90])\n                translate([25,0,0])\n                    rotate([90,0,0])\n                        cylinder(h=10, d=4, $fn=16);\n        }\n    }\n}\n\nmodule axle_tube(side=1) {\n    translate([side*25,0,0])\n        rotate([0,90,0])\n            difference() {\n                // Tube body\n                cylinder(h=50, d=16, $fn=30);\n                // Hollow center\n                cylinder(h=52, d=8, $fn=30);\n                \n                // Reinforcement ribs\n                for(i=[-1:1]) {\n                    translate([i*15,0,0])\n                        rotate([90,0,0])\n                            cube([2, 20, 12], center=true);\n                }\n            }\n}\n\nmodule pinion_gear() {\n    rotate([90,0,0])\n        union() {\n            // Pinion shaft\n            cylinder(h=35, d=12, $fn=30);\n            \n            // Pinion gear teeth (simplified)\n            for(i=[0:23]) {\n                rotate([0,0,i*15])\n                    translate([0,7,0])\n                        cube([2, 4, 8], center=true);\n            }\n            \n            // Bearing seat\n            translate([0,0,-5])\n                cylinder(h=8, d=15, $fn=30);\n                \n            // Yoke mount\n            translate([0,0,30])\n                cylinder(h=15, d=18, $fn=6);\n        }\n}\n\nmodule cover_plate() {\n    difference() {\n        // Main cover\n        rotate([90,0,0])\n            cylinder(h=4, d=62, $fn=60);\n            \n        // Bolt holes\n        for(i=[0:7]) {\n            rotate([0,0,i*45])\n                translate([27,0,0])\n                    cylinder(h=5, d=5, $fn=16);\n        }\n    }\n}\n\nmodule drain_plug() {\n    translate([30,0,-25])\n        rotate([90,0,0])\n            difference() {\n                cylinder(h=8, d=8, $fn=12);\n                cylinder(h=10, d=5, $fn=12);\n            }\n}\n\nmodule fill_plug() {\n    translate([-30,0,25])\n        rotate([90,0,0])\n            difference() {\n                cylinder(h=8, d=8, $fn=12);\n                cylinder(h=10, d=5, $fn=12);\n            }\n}\n\n// Assembly\nunion() {\n    // Main components\n    main_housing();\n    \n    // Axle tubes\n    axle_tube(1);\n    axle_tube(-1);\n    \n    // Pinion assembly\n    translate([0,0,-30])\n        rotate([0,90,0])\n            pinion_gear();\n    \n    // Cover plate\n    translate([0,0,20])\n        cover_plate();\n        \n    // Drain and fill plugs\n    drain_plug();\n    fill_plug();\n    \n    // Mounting flange\n    translate([0,0,-20])\n        rotate([90,0,0])\n            difference() {\n                cylinder(h=8, d=70, $fn=60);\n                cylinder(h=10, d=50, $fn=60);\n            }\n}",
    "renders": true
  },
  {
    "vehicle": "bev",
    "openscad_code": "// Realistic Beverage Can - OpenSCAD\n// 3D printable with no overhangs, 66mm tall x 33mm diameter\n\n// Main parameters\n$fn=64;\ncan_height = 66;\ncan_diameter = 33;\nwall_thickness = 1.5;\ntop_rim_height = 3;\nbottom_rim_height = 4;\n\nmodule can_body() {\n    difference() {\n        // Outer can\n        cylinder(h=can_height, d=can_diameter);\n        \n        // Hollow inside\n        translate([0, 0, wall_thickness])\n            cylinder(h=can_height-wall_thickness*2, d=can_diameter-wall_thickness*2);\n    }\n}\n\nmodule top_seam() {\n    // Top rim ring\n    translate([0, 0, can_height-top_rim_height])\n        cylinder(h=top_rim_height, d1=can_diameter, d2=can_diameter*0.98);\n}\n\nmodule bottom_seam() {\n    // Bottom rim ring\n    translate([0, 0, 0])\n        cylinder(h=bottom_rim_height, d1=can_diameter*0.98, d2=can_diameter);\n}\n\nmodule pull_tab() {\n    // Pull tab base\n    translate([0, can_diameter/2-2, can_height+0.5])\n        rotate([90, 0, 0])\n            cylinder(h=8, d1=6, d2=3);\n    \n    // Pull tab hole\n    translate([0, can_diameter/2+2, can_height+0.5])\n        rotate([90, 0, 0])\n            cylinder(h=3, d=3);\n    \n    // Tab ring\n    difference() {\n        translate([0, can_diameter/2+2, can_height+0.5])\n            rotate([90, 0, 0])\n                cylinder(h=3, d=5);\n        translate([0, can_diameter/2+2, can_height+0.5])\n            rotate([90, 0, 0])\n                cylinder(h=4, d=2.5);\n    }\n}\n\nmodule top_lid() {\n    // Top lid surface\n    translate([0, 0, can_height-top_rim_height])\n        cylinder(h=0.5, d=can_diameter-wall_thickness);\n    \n    // Score line for opening\n    translate([0, 0, can_height-top_rim_height+0.25])\n        difference() {\n            cylinder(h=0.2, d=can_diameter-wall_thickness-2);\n            translate([can_diameter/4, 0, 0])\n                cube([can_diameter/2, can_diameter, 1], center=true);\n        }\n}\n\n// Build the can\nunion() {\n    can_body();\n    top_seam();\n    bottom_seam();\n    top_lid();\n    pull_tab();\n}",
    "renders": true
  },
  {
    "vehicle": "phev",
    "openscad_code": "$fa = 1;\n$fs = 0.5;\n\nmodule body() {\n    // Main body shell\n    difference() {\n        union() {\n            hull() {\n                translate([-20, -10, 10]) cube([40, 20, 8]);\n                translate([-20, -10, 0]) cube([40, 20, 5]);\n            }\n            translate([-20, -10, 13]) cube([40, 20, 2]);\n        }\n        \n        // Cabin cutout\n        translate([-12, -8, 8]) cube([24, 16, 8]);\n        \n        // Wheel arches\n        for(x = [-15, 15])\n            translate([x, -11, 0]) {\n                rotate([0, 0, 90]) cylinder(h=20, d=10, $fn=32);\n            }\n    }\n}\n\nmodule hood() {\n    // Engine hood slope\n    translate([-20, -10, 10]) rotate([0, 30, 0]) cube([25, 20, 3]);\n}\n\nmodule roof() {\n    // Cabin roof\n    translate([5, -8, 16]) cube([20, 16, 2]);\n}\n\nmodule windows() {\n    // Side windows\n    for(side = [-1, 1]) {\n        translate([5, side*8, 14]) cube([18, 1, 4]);\n    }\n    \n    // Windshield\n    translate([5, -8, 12]) rotate([0, 30, 0]) cube([15, 16, 1.5]);\n    \n    // Rear window\n    translate([22, -8, 12]) rotate([0, -30, 0]) cube([10, 16, 1.5]);\n}\n\nmodule wheels() {\n    // Wheels with tires\n    for(x = [-15, 15])\n        for(y = [-8, 8]) {\n            // Tire\n            color(\"black\") translate([x, y, 0]) cylinder(h=4, d=8, $fn=32);\n            \n            // Rim\n            color(\"silver\") translate([x, y, 1]) cylinder(h=2, d=6, $fn=16);\n        }\n}\n\nmodule grille() {\n    // Front grille with bars\n    translate([-19.5, -7, 5]) cube([1, 14, 5]);\n    \n    for(i = [-6:2:6])\n        translate([-19.2, i, 7]) cube([0.5, 1, 1]);\n}\n\nmodule headlights() {\n    // LED headlights\n    translate([-19.5, -5, 10]) cube([1, 2, 2]);\n    translate([-19.5, 3, 10]) cube([1, 2, 2]);\n}\n\nmodule taillights() {\n    // LED taillights\n    translate([25.5, -5, 10]) cube([1, 2, 2]);\n    translate([25.5, 3, 10]) cube([1, 2, 2]);\n}\n\nmodule charging_port() {\n    // Charging port on front fender\n    translate([-15, 10.5, 8]) cube([3, 1, 3]);\n    translate([-15, 10.6, 9]) cube([2.5, 0.5, 2]);\n}\n\nmodule side_mirrors() {\n    // Side mirrors\n    for(side = [-1, 1]) {\n        translate([0, side*9.5, 15]) cube([2, 1, 1.5]);\n    }\n}\n\nmodule exhaust_pipe() {\n    // Exhaust pipe (realistic for hybrid)\n    translate([23, 7, 2]) cylinder(h=4, d=1, $fn=16);\n    translate([23, 7, 2]) rotate([90, 0, 0]) cylinder(h=2, d=1, $fn=16);\n}\n\nmodule phev() {\n    union() {\n        body();\n        hood();\n        roof();\n        windows();\n        wheels();\n        grille();\n        headlights();\n        taillights();\n        charging_port();\n        side_mirrors();\n        exhaust_pipe();\n    }\n}\n\n// Scale to 80mm length\nscale(80/50) phev();",
    "renders": true
  },
  {
    "vehicle": "hev",
    "openscad_code": "// High-Explosive Anti-Tank (HEAT) warhead – recognizable M72-style HEV\n// Overall size ≈ 70 mm long, 30 mm Ø at body\n\n// Basic parameters\nbody_r = 15; // main tube radius\nbody_l = 50; // main tube length\nnose_l  = 20; // ogive nose length\nfin_span = 25; // fin tip-to-tip\nwall = 1.6; // printable wall thickness\n\nmodule main_body() {\n    difference() {\n        // outer tube\n        cylinder(h = body_l, r = body_r, $fn = 48);\n        // inner bore (hollow for weight & printability)\n        translate([0, 0, -0.1])\n            cylinder(h = body_l + 0.2, r = body_r - wall, $fn = 48);\n    }\n}\n\nmodule ogive_nose() {\n    // approximate tangent-ogive using scaled sphere\n    translate([0, 0, body_l]) {\n        difference() {\n            scale([1, 1, nose_l / body_r])\n                sphere(r = body_r, $fn = 48);\n            // hollow continuation\n            translate([0, 0, -nose_l])\n                cylinder(h = nose_l * 2, r = body_r - wall, $fn = 48);\n        }\n    }\n}\n\nmodule fins() {\n    fin_h = 12;\n    fin_t = 2;\n    // four equally spaced fins\n    for (a = [0:90:270]) {\n        rotate([0, 0, a])\n            translate([body_r - fin_t / 2, 0, body_l - fin_h])\n                cube([fin_t, fin_span / 2 - body_r / 2, fin_h], center = true);\n    }\n}\n\nmodule tail_adapter() {\n    // small bevel at base for printability\n    difference() {\n        cylinder(h = 5, r1 = body_r, r2 = body_r * 0.9, $fn = 48);\n        translate([0, 0, -0.1])\n            cylinder(h = 5.2, r1 = body_r - wall, r2 = body_r * 0.9 - wall, $fn = 48);\n    }\n}\n\nmodule detonator_tip() {\n    // simple point detonator\n    color(\"silver\")\n    translate([0, 0, body_l + nose_l])\n        cylinder(h = 3, r1 = 1, r2 = 0, $fn = 16);\n}\n\n// Assembly\nunion() {\n    main_body();\n    ogive_nose();\n    tail_adapter();\n    fins();\n    detonator_tip();\n}",
    "renders": true
  },
  {
    "vehicle": "ev",
    "openscad_code": "// EV Car - Medium Complexity Realistic Style\n// 3D printable, 1:72 scale, ~70mm long\n\n$fn = 32;\n\n// Main dimensions\nwheelbase = 40;\ntrack = 20;\nlength = 70;\nwidth = 32;\nheight = 20;\n\n// Tire profile\nmodule tire(rim_d = 7, tire_d = 9, width = 4) {\n    difference() {\n        cylinder(d = tire_d, h = width, center = true);\n        cylinder(d = rim_d, h = width + 0.2, center = true);\n    }\n}\n\n// Wheel assembly\nmodule wheel() {\n    union() {\n        // Rim\n        color(\"silver\")\n        cylinder(d = 7, h = 4, center = true);\n        // Tire\n        color(\"black\")\n        translate([0, 0, 0.5])\n        tire();\n    }\n}\n\n// Side mirror\nmodule mirror() {\n    union() {\n        color(\"silver\")\n        cube([3, 1, 2]);\n        translate([1.5, 0.5, 1])\n        sphere(d = 2);\n    }\n}\n\n// Headlight\nmodule headlight() {\n    color(\"white\")\n    cube([4, 1.5, 3]);\n}\n\n// Taillight\nmodule taillight() {\n    color(\"red\")\n    cube([4, 1.5, 3]);\n}\n\n// Charging port\nmodule charge_port() {\n    difference() {\n        translate([-2, -0.5, 0])\n        cube([4, 1, 3]);\n        translate([0, 0, 1.5])\n        cylinder(d = 2, h = 1.2);\n    }\n}\n\n// Car body\nmodule car_body() {\n    union() {\n        // Main chassis\n        color(\"darkblue\")\n        translate([0, 0, height/2])\n        cube([length, width, height], center = true);\n        \n        // Hood slope\n        color(\"darkblue\")\n        translate([length/4, 0, height*0.7])\n        rotate([0, 10, 0])\n        cube([length/2, width*0.9, height*0.6], center = true);\n        \n        // Roof\n        color(\"darkblue\")\n        translate([0, 0, height*1.2])\n        cube([length*0.6, width*0.8, height*0.4], center = true);\n        \n        // Windshield\n        color(\"lightblue\")\n        translate([length*0.15, 0, height*0.9])\n        rotate([0, -30, 0])\n        cube([length*0.3, width*0.7, 0.5], center = true);\n        \n        // Rear window\n        color(\"lightblue\")\n        translate([-length*0.15, 0, height*0.9])\n        rotate([0, 30, 0])\n        cube([length*0.3, width*0.7, 0.5], center = true);\n        \n        // Side windows (left)\n        color(\"lightblue\")\n        for(i = [-1, 1]) {\n            translate([i*length*0.2, width/2, height*0.9])\n            cube([length*0.35, 0.5, height*0.4], center = true);\n        }\n        \n        // Side mirrors\n        translate([length*0.3, width/2 + 1, height*0.8])\n        mirror();\n        translate([length*0.3, -width/2 - 1, height*0.8])\n        mirror();\n        \n        // Headlights\n        translate([length/2 + 1, width/3, height/2])\n        headlight();\n        translate([length/2 + 1, -width/3, height/2])\n        headlight();\n        \n        // Taillights\n        translate([-length/2 - 1, width/3, height/2])\n        taillight();\n        translate([-length/2 - 1, -width/3, height/2])\n        taillight();\n        \n        // Charging port (left rear)\n        translate([-length*0.3, -width/2, height/2])\n        charge_port();\n        \n        // Front grille (EV style)\n        color(\"black\")\n        translate([length/2, 0, height/2])\n        cube([0.5, width*0.6, height*0.3], center = true);\n    }\n}\n\n// Wheels\nmodule wheels() {\n    // Front wheels\n    translate([wheelbase/2, track/2, 3])\n    wheel();\n    translate([wheelbase/2, -track/2, 3])\n    wheel();\n    \n    // Rear wheels\n    translate([-wheelbase/2, track/2, 3])\n    wheel();\n    translate([-wheelbase/2, -track/2, 3])\n    wheel();\n}\n\n// Main assembly\nunion() {\n    car_body();\n    wheels();\n}",
    "renders": true
  },
  {
    "vehicle": "plugin",
    "openscad_code": "// Realistic European Schuko plug (Type E/F) – medium complexity, printable\n// Overall size ≈ 55 × 45 × 38 mm\n\n// Wall thickness for 3D printing\nwall = 1.6;\n\n// Main body\nmodule plug_body() {\n    difference() {\n        union() {\n            // Outer shell\n            cube([55, 45, 35], center=false);\n\n            // Grip ridge on top\n            translate([5, 15, 35])\n                cube([45, 15, 3], center=false);\n        }\n\n        // Hollow it out\n        translate([wall, wall, wall])\n            cube([55 - 2*wall, 45 - 2*wall, 35 - wall], center=false);\n    }\n}\n\n// Earthing clips on sides (Type F)\nmodule earth_clips() {\n    for (y = [wall, 45 - 2*wall]) {\n        translate([0, y, 5])\n            cube([wall*2, 5, 20], center=false);\n    }\n}\n\n// Pin module (common for live/neutral)\nmodule pin() {\n    // 4.8 mm Ø pin, 19 mm exposed length\n    cylinder(d = 4.8, h = 19 + 10, $fn = 20);\n    // Chamfer\n    translate([0, 0, 19 + 10])\n        cylinder(d1 = 4.8, d2 = 3.6, h = 1, $fn = 20);\n}\n\n// Live & Neutral pins (19 mm apart)\nmodule pins_L_N() {\n    translate([27.5 - 19/2, 22.5, 0])\n        pin();\n    translate([27.5 + 19/2, 22.5, 0])\n        pin();\n}\n\n// Cable sleeve\nmodule cable_sleeve() {\n    difference() {\n        // Outer cone\n        translate([55, 22.5, 20])\n            rotate([0, 90, 0])\n                cylinder(h = 30, r1 = 11, r2 = 7, $fn = 20);\n        // Hollow\n        translate([55 + wall, 22.5, 20])\n            rotate([0, 90, 0])\n                cylinder(h = 30, r1 = 8, r2 = 4, $fn = 20);\n    }\n}\n\n// Assembly\nplug_body();\nearth_clips();\npins_L_N();\ncable_sleeve();",
    "renders": true
  },
  {
    "vehicle": "hybrid",
    "openscad_code": "// Hybrid Electric Sedan - Realistic Style, Medium Complexity\n// Approx 80mm long, 32mm wide, 28mm tall\n\n$fn = 32;  // Smooth curves\n\nmodule body_shell() {\n    difference() {\n        // Main body\n        union() {\n            // Hood and cabin\n            hull() {\n                translate([-30, -12, 4]) cube([35, 24, 6]);\n                translate([10, -14, 9]) cube([20, 28, 10]);\n                translate([30, -12, 6]) cube([20, 24, 6]);\n            }\n            \n            // Trunk\n            translate([45, -12, 6]) cube([25, 24, 5]);\n            \n            // Roof\n            translate([10, -13, 18]) cube([40, 26, 4]);\n        }\n        \n        // Cabin windows\n        translate([12, -13.5, 14]) cube([36, 27, 8]);\n        translate([14, -13.4, 15]) cube([32, 26.8, 6]);\n        \n        // Wheel wells\n        translate([-15, -16, 0]) cylinder(h=10, r=8);\n        translate([-15, 16, 0]) cylinder(h=10, r=8);\n        translate([25, -16, 0]) cylinder(h=10, r=8);\n        translate([25, 16, 0]) cylinder(h=10, r=8);\n    }\n}\n\nmodule wheels() {\n    module wheel(pos_x, pos_y) {\n        translate([pos_x, pos_y, 0]) {\n            // Tire\n            color(\"black\") cylinder(h=6, r=8);\n            // Rim\n            color(\"silver\") translate([0, 0, 1]) cylinder(h=4, r=6);\n            // Hub\n            color(\"gray\") translate([0, 0, 2]) cylinder(h=2, r=3);\n        }\n    }\n    \n    // Front wheels\n    wheel(-15, -16);\n    wheel(-15, 16);\n    \n    // Rear wheels\n    wheel(25, -16);\n    wheel(25, 16);\n}\n\nmodule headlights() {\n    // LED headlights\n    translate([-29, -8, 8]) color(\"lightblue\") cube([2, 4, 2]);\n    translate([-29, 4, 8]) color(\"lightblue\") cube([2, 4, 2]);\n    \n    // Fog lights\n    translate([-29, -11, 5]) color(\"orange\") cube([1, 2, 1]);\n    translate([-29, 9, 5]) color(\"orange\") cube([1, 2, 1]);\n}\n\nmodule taillights() {\n    // LED taillights\n    translate([69, -8, 9]) color(\"red\") cube([2, 4, 2]);\n    translate([69, 4, 9]) color(\"red\") cube([2, 4, 2]);\n    \n    // Reverse lights\n    translate([69, -2, 9]) color(\"white\") cube([2, 2, 1]);\n}\n\nmodule grille() {\n    // Upper grille\n    translate([-29, -6, 10]) cube([1, 12, 4]);\n    \n    // Lower grille\n    translate([-29, -8, 6]) cube([1, 16, 2]);\n    \n    // Grille slats\n    for (y = [-5:2:5]) {\n        translate([-29.5, y, 9]) cube([0.5, 1, 2]);\n    }\n}\n\nmodule mirrors() {\n    // Side mirrors\n    translate([5, -15, 15]) cube([3, 2, 3]);\n    translate([5, 13, 15]) cube([3, 2, 3]);\n}\n\nmodule charging_port() {\n    // Charging port door\n    translate([55, -14, 10]) cube([4, 1, 3]);\n}\n\nmodule spoiler() {\n    // Rear spoiler\n    translate([60, -12, 18]) cube([8, 24, 1]);\n    translate([60, -12, 18]) cube([1, 24, 2]);\n}\n\n// Assembly\nunion() {\n    body_shell();\n    wheels();\n    headlights();\n    taillights();\n    grille();\n    mirrors();\n    charging_port();\n    spoiler();\n}",
    "renders": true
  },
  {
    "vehicle": "electric",
    "openscad_code": "// Electric plug (Type-A, USA) – 3D-printable, realistic style, medium complexity\n// Overall height ≈ 60 mm\n\n// Wall thickness everywhere ≥ 1.2 mm to survive printing\n$fn = 60;          // Smooth curves\n\nmodule prong(radius, height) {\n    // Simple cylindrical prong with rounded tip\n    union() {\n        cylinder(r = radius, h = height - radius, center = false);\n        translate([0, 0, height - radius])\n            sphere(r = radius);\n    }\n}\n\nmodule body() {\n    // Main insulating body – rounded cuboid\n    hull() {\n        translate([0, 0, 0]) sphere(r = 6);\n        translate([0, 0, 25]) sphere(r = 6);\n    }\n    // Flattened sides for finger grip\n    difference() {\n        translate([0, 0, 12.5])\n            scale([1, 0.65, 1])\n                cube([32, 32, 25], center = true);\n        translate([0, 0, 12.5])\n            scale([0.92, 0.6, 1.1])\n                cube([32, 32, 25], center = true);\n    }\n}\n\nmodule strain_relief() {\n    // Tapered sleeve that merges into cable\n    for (a = [0:120:359])\n        rotate([0, 0, a])\n            translate([0, 0, 25])\n                rotate([90, 0, 0])\n                    linear_extrude(height = 0.1, scale = 1.0)\n                        offset(delta = -0.5)\n                            circle(r = 6.5, $fn = 6);\n    // Actual sleeve\n    translate([0, 0, 25])\n        cylinder(r1 = 6.5, r2 = 4.5, h = 15);\n}\n\nmodule cable() {\n    // 8 mm flexible cable stub\n    color(\"gray\")\n    translate([0, 0, 40])\n        cylinder(r = 4, h = 20);\n}\n\n// Assembly\nunion() {\n    body();\n    translate([6.35, 0, 0]) prong(radius = 3.2, height = 15.9);\n    translate([-6.35, 0, 0]) prong(radius = 3.2, height = 15.9);\n    strain_relief();\n    cable();\n}",
    "renders": true
  },
  {
    "vehicle": "diesel",
    "openscad_code": "// Realistic medium-complexity diesel engine block with accessories\n// Overall size ~80 mm long, for FDM printing, no supports needed\n\n$fn = 32;  // global resolution\n\nmodule main_block() {\n    difference() {\n        // central cast block\n        cube([60, 30, 35], center = true);\n        // hollow core\n        translate([0, 0, 10])\n            cube([50, 20, 18], center = true);\n    }\n}\n\nmodule cylinder_bank() {\n    // 4 cylinders in a row\n    for (x = [-22, -7, 7, 22])\n        translate([x, 0, 25])\n            cylinder(h = 20, d = 10);\n}\n\nmodule crankcase() {\n    // oil pan under block\n    translate([0, 0, -22])\n        cube([62, 32, 14], center = true);\n}\n\nmodule valve_cover() {\n    // top cover with slight slope\n    translate([0, 0, 42])\n        cube([55, 28, 6], center = true);\n}\n\nmodule exhaust_manifold() {\n    // exhaust pipes on right side\n    for (x = [-22, -7, 7, 22])\n        translate([x, 17, 25])\n            rotate([0, 90, 0])\n                cylinder(h = 10, d = 4);\n    // collector tube\n    translate([0, 22, 25])\n        rotate([0, 90, 0])\n            cylinder(h = 55, d = 6);\n}\n\nmodule intake_manifold() {\n    // intake on left side\n    translate([-30, -16, 30])\n        cube([60, 6, 10], center = false);\n}\n\nmodule turbocharger() {\n    // turbo housing\n    translate([25, 30, 25])\n        difference() {\n            cylinder(h = 18, d = 14);\n            translate([0, 0, 1])\n                cylinder(h = 16, d = 8);\n        }\n    // compressor outlet\n    rotate([90, 0, 0])\n        translate([25, 0, 30])\n            cylinder(h = 10, d = 6);\n}\n\nmodule coolant_inlet() {\n    // water inlet front\n    translate([-35, 0, 15])\n        cube([10, 10, 8], center = false);\n}\n\nmodule mounting_flange() {\n    // rear mounting face\n    translate([35, 0, 0])\n        cube([3, 28, 28], center = false);\n}\n\nmodule oil_filter() {\n    // spin-on filter\n    translate([0, 0, -30])\n        cylinder(h = 12, d = 8);\n}\n\nmodule accessories() {\n    // alternator\n    translate([0, -22, 15])\n        rotate([90, 0, 0])\n            cylinder(h = 10, d = 10);\n}\n\nunion() {\n    main_block();\n    cylinder_bank();\n    crankcase();\n    valve_cover();\n    exhaust_manifold();\n    intake_manifold();\n    turbocharger();\n    coolant_inlet();\n    mounting_flange();\n    oil_filter();\n    accessories();\n}",
    "renders": true
  },
  {
    "vehicle": "gasoline",
    "openscad_code": "// Realistic gasoline canister – medium complexity\n// No overhangs > 45°, 2 mm wall-thickness, ready for FDM printing\n\n$fs = 1;\n$fa = 2;\n\nwall = 2;               // uniform wall thickness (mm)\nd = 45;                 // body width & depth\nh = 100;                // body height\nneck_h = 15;            // screw neck height\nneck_d = 28;            // neck outer diameter\nthread_d = 24;          // thread root diameter\nhandle_clear = 18;      // finger clearance\nhandle_r = 5;           // handle bar radius\n\nmodule canister_body() {\n    difference() {\n        // outer shell\n        rounded_box(d, d, h, 4);\n        // inner void\n        translate([0, 0, wall])\n            rounded_box(d - 2*wall, d - 2*wall, h - wall, 4 - wall);\n    }\n}\n\nmodule rounded_box(w, l, h2, r) {\n    hull() {\n        for(x=[-w/2+r, w/2-r], y=[-l/2+r, l/2-r])\n            translate([x, y, 0])\n                cylinder(r=r, h=h2, $fn=20);\n    }\n}\n\nmodule neck() {\n    difference() {\n        union() {\n            // collar\n            cylinder(h=neck_h, d1=neck_d, d2=neck_d, $fn=32);\n            // screw thread rings\n            for(i=[0:1:3])\n                translate([0, 0, i*2.5])\n                    cylinder(h=1.5, d1=thread_d+2, d2=thread_d+2, $fn=32);\n        }\n        // bore\n        cylinder(h=neck_h+1, d=thread_d-wall, $fn=32);\n    }\n}\n\nmodule handle() {\n    // two side supports\n    for(side=[-1, 1]) {\n        translate([side*(d/2 - wall - 1), 0, h - 15])\n            rotate([0, 90, 0])\n                cylinder(h=10, r=handle_r, $fn=16);\n    }\n    // grip bar\n    translate([0, 0, h - 15])\n        rotate([0, 90, 0])\n            cylinder(h=d - 2*(wall + handle_r + 1), r=handle_r, $fn=16);\n    // clearance cutout under handle\n    translate([0, 0, h - 15 - handle_clear/2])\n        cube([d, handle_clear, handle_clear], center=true);\n}\n\nmodule spout_holder() {\n    // small clip on side for spout storage\n    translate([d/2 + 1, 0, h/2])\n        rotate([0, 90, 0])\n            difference() {\n                cylinder(h=20, r1=5, r2=5, $fn=20);\n                cylinder(h=21, r1=4, r2=4, $fn=20);\n            }\n}\n\n// assembly\nunion() {\n    canister_body();\n    translate([0, 0, h])\n        neck();\n    handle();\n    spout_holder();\n}",
    "renders": true
  },
  {
    "vehicle": "petrol",
    "openscad_code": "// Petrol jerry-can – medium-complexity realistic style\n// All dimensions in mm, ready for FDM printing (no overhangs >45°)\n\n$fn = 36;\n\n// Wall thickness for 3D printing\nwall = 1.6;\n\n// Overall outside dimensions\ncan_w = 34;        // width at widest point\ncan_d = 17;        // depth front-to-back\ncan_h = 48;        // overall height\n\n// Main body\nmodule body() {\n    difference() {\n        // Solid block with rounded sides\n        rounded_box(can_w, can_d, can_h, 4);\n\n        // Hollow interior\n        translate([0, 0, -wall])   // shift down so bottom stays thick\n        rounded_box(can_w - 2*wall, can_d - 2*wall, can_h - wall, 4 - wall);\n    }\n}\n\n// Generic rounded box helper\nmodule rounded_box(w, d, h, r) {\n    hull() {\n        for(x = [-w/2 + r,  w/2 - r])\n        for(y = [-d/2 + r,  d/2 - r])\n            translate([x, y, 0])\n                cylinder(r = r, h = h, center = true);\n    }\n}\n\n// Reinforcing ribs on sides\nmodule ribs() {\n    for(side = [-1, 1]) {\n        translate([side * (can_w/2 + 0.1), 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h = 0.8, r = 2.5);\n        translate([side * (can_w/2 + 0.1), 0, -10])\n            rotate([0, 90, 0])\n                cylinder(h = 0.8, r = 2.5);\n    }\n}\n\n// Top spout\nmodule spout() {\n    union() {\n        // Neck base\n        cylinder(h = 7, r1 = 5.5, r2 = 4.5);\n\n        // Threaded section\n        translate([0, 0, 7])\n            cylinder(h = 8, r = 4.5);\n\n        // Cap\n        translate([0, 0, 16])\n            difference() {\n                cylinder(h = 4, r = 6);\n                translate([0, 0, -1])\n                    cylinder(h = 6, r = 4.6);\n            }\n    }\n}\n\n// Handle\nmodule handle() {\n    difference() {\n        // Outer handle\n        translate([0, 0, 20])\n            rotate([90, 0, 0])\n                cylinder(h = can_w - 6, r = 2.5);\n\n        // Inner clearance\n        translate([0, 0, 20])\n            rotate([90, 0, 0])\n                cylinder(h = can_w - 6, r = 1);\n    }\n}\n\n// Front and back X-shaped indentations\nmodule indent_x() {\n    for(dir = [-1, 1]) {\n        translate([0, dir * (can_d/2 + 0.1), can_h/2 - 10])\n            rotate([90, 0, 0])\n                cube([22, 0.8, 8], center = true);\n        translate([0, dir * (can_d/2 + 0.1), can_h/2 - 10])\n            rotate([0, 0, 45])\n                rotate([90, 0, 0])\n                    cube([22, 0.8, 8], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    translate([0, 0, can_h/2])\n        spout();\n    translate([0, -can_d/2 - 2.5, 20])\n        handle();\n    ribs();\n    indent_x();\n}\n\n// Optional text emboss\ntranslate([0, can_d/2 + wall, can_h/2 - 5])\n    rotate([0, 90, 0])\n        linear_extrude(height = 0.6)\n            text(\"PETROL\", size = 4, halign = \"center\", valign = \"center\");",
    "renders": true
  },
  {
    "vehicle": "ethanol",
    "openscad_code": "// Ethanol molecule (C2H5OH) – realistic ball-and-stick style\n// Overall size ≈ 70 mm, printable in one piece, no overhangs >45°\n// Wall thickness ≥ 1 mm on all parts\n\n// --- parameters --------------------------------------------------------------\natom_r = 6;             // atomic-sphere radius\nbond_r = 2.5;           // bond-cylinder radius\nbond_l = 8;             // stick length between atom centres\nwall = 2;               // extra wall thickness for printability\n\n// --- atomic colour helpers ---------------------------------------------------\nmodule C() color(\"darkslategray\") sphere(atom_r);\nmodule H() color(\"white\") sphere(atom_r-1);                // hydrogen slightly smaller\nmodule O() color(\"firebrick\") sphere(atom_r);\n\n// --- bond unit ---------------------------------------------------------------\nmodule bond(len) {\n    hull() {                     // keeps everything printable without internal voids\n        cylinder(h = len, r = bond_r, center = true);\n        sphere(bond_r);          // spheres at ends to smooth joints\n        translate([0,0,len]) sphere(bond_r);\n    }\n}\n\n// --- CH3 group (methyl) ------------------------------------------------------\nmodule CH3() {\n    union() {\n        C();                     // central carbon\n        // three hydrogens distributed in tetrahedral fashion\n        for(a=[0:120:359])\n            rotate([acos(1/3), a, 0])\n                translate([0,0,bond_l]) {\n                    H();\n                    bond(bond_l);\n                }\n    }\n}\n\n// --- CH2 group ---------------------------------------------------------------\nmodule CH2() {\n    union() {\n        C();\n        // two hydrogens in V-shape\n        rotate([ 30, 0, 0]) translate([0,0,bond_l]) { H(); bond(bond_l); }\n        rotate([-30, 0, 0]) translate([0,0,bond_l]) { H(); bond(bond_l); }\n    }\n}\n\n// --- OH group ---------------------------------------------------------------\nmodule OH() {\n    union() {\n        O();\n        translate([0,0,bond_l]) { H(); bond(bond_l); }\n    }\n}\n\n// --- assemble ethanol --------------------------------------------------------\n// Overall chain: CH3-CH2-O-H\ntranslate([0,0,wall]) {    // lift slightly to avoid bed adhesion issues\n    union() {\n        // CH3\n        CH3();\n        translate([0,0,bond_l]) rotate([0,180,0]) { bond(bond_l); CH2(); }\n        translate([0,0,2*bond_l]) { bond(bond_l); OH(); }\n    }\n}\n\n// Optional flat base for stability\ntranslate([0,0,-wall]) cube([50,50,wall*2], center=true);",
    "renders": true
  },
  {
    "vehicle": "hydrogen",
    "openscad_code": "// OpenSCAD Hydrogen Atom Model (Realistic Style, Medium Complexity)\n// Scale set so diameter ~60 mm\n\natom_radius = 30;            // overall bounding radius in mm\nnucleus_r   = 8;             // proton radius\nelectron_r  = 3.5;           // electron cloud radius\norbits      = 3;             // number of visible orbital rings\nring_thick  = 1.2;           // ring thickness for 3D print\nwall        = 1.8;           // minimum wall thickness\n\nmodule nucleus() {\n    // proton sphere with subtle surface bumps\n    difference() {\n        sphere(nucleus_r);\n        for(i=[0:30])\n            translate([rand_vec(nucleus_r*0.7)])\n                sphere(nucleus_r/8);\n    }\n}\n\nmodule electron_orbitals() {\n    // three tilted rings representing 1s, 2p orbitals\n    for(i=[1:orbits]) {\n        angle = i*120 + 15;\n        rotate([0, angle, 0])\n            rotate([90, 0, 0])\n                torus(electron_r + i*5, ring_thick);\n    }\n}\n\nmodule torus(R, r) {\n    // simple torus primitive\n    rotate_extrude($fn=40)\n        translate([R, 0, 0])\n            circle(r=r, $fn=20);\n}\n\nfunction rand_vec(max) = [rands(-max,max,1)[0],\n                          rands(-max,max,1)[0],\n                          rands(-max,max,1)[0]];\n\n// main assembly\nunion() {\n    // translucent electron cloud shell\n    difference() {\n        sphere(atom_radius);\n        sphere(atom_radius - wall);\n    }\n    \n    // nucleus at center\n    color(\"crimson\")\n        nucleus();\n    \n    // orbital rings\n    color(\"lightblue\", 0.6)\n        electron_orbitals();\n    \n    // tiny electrons on rings\n    for(i=[1:orbits])\n        for(j=[0:3]) {\n            angle = i*120;\n            rot = j*90;\n            rotate([0, angle, rot])\n                translate([electron_r + i*5, 0, 0])\n                    sphere(electron_r/2);\n        }\n}\n\n$fn = 64;",
    "renders": true
  },
  {
    "vehicle": "autonomous",
    "openscad_code": "// Autonomous Delivery Robot - Medium Complexity Realistic Style\n// Size: 80mm long x 50mm wide x 40mm tall\n\n$fn = 32;\n\nmodule wheel(diam=15, width=5) {\n    difference() {\n        cylinder(h=width, d=diam, center=true);\n        cylinder(h=width+1, d=diam-4, center=true);\n    }\n}\n\nmodule sensor() {\n    translate([0, 0, 3])\n        cylinder(h=5, d=8, center=false);\n    translate([0, 0, 7])\n        sphere(d=6);\n}\n\nmodule lidar() {\n    difference() {\n        cylinder(h=5, d=20);\n        translate([0, 0, -1])\n            cylinder(h=7, d=16);\n    }\n    for(i=[0:30:359]) {\n        rotate([0, 0, i])\n            translate([9, 0, 2.5])\n                cube([2, 0.5, 2], center=true);\n    }\n}\n\nmodule cargo_bay() {\n    difference() {\n        translate([0, 0, 5])\n            cube([40, 45, 25], center=true);\n        translate([0, 0, 7])\n            cube([36, 41, 25], center=true);\n    }\n}\n\nmodule body() {\n    // Base chassis\n    translate([0, 0, 5])\n        cube([50, 45, 10], center=true);\n    \n    // Front bumper\n    translate([25, 0, 3])\n        cube([5, 35, 6], center=true);\n    \n    // Rear bumper\n    translate([-25, 0, 3])\n        cube([5, 35, 6], center=true);\n    \n    // Side panels\n    for(side=[-1, 1]) {\n        translate([0, side*22.5, 10])\n            cube([50, 3, 15], center=true);\n    }\n    \n    // Top cover\n    translate([0, 0, 17])\n        cube([42, 40, 2], center=true);\n}\n\n// Main assembly\nunion() {\n    // Main body\n    body();\n    \n    // Cargo bay\n    cargo_bay();\n    \n    // Wheels\n    translate([15, 25, 5])\n        rotate([90, 0, 0])\n            wheel();\n    translate([15, -25, 5])\n        rotate([90, 0, 0])\n            wheel();\n    translate([-15, 25, 5])\n        rotate([90, 0, 0])\n            wheel();\n    translate([-15, -25, 5])\n        rotate([90, 0, 0])\n            wheel();\n    \n    // Lidar tower\n    translate([0, 0, 20])\n        lidar();\n    \n    // Front sensors\n    translate([25, 10, 8])\n        sensor();\n    translate([25, -10, 8])\n        sensor();\n    \n    // Camera housing\n    translate([25, 0, 12])\n        rotate([0, -30, 0])\n            cube([8, 12, 6], center=true);\n    \n    // Antenna\n    translate([-10, 0, 18])\n        cylinder(h=15, d=2);\n    translate([-10, 0, 26])\n        sphere(d=3);\n    \n    // LED strips\n    for(pos=[-20, -10, 0, 10, 20]) {\n        translate([pos, 23, 12])\n            cube([8, 2, 1], center=true);\n        translate([pos, -23, 12])\n            cube([8, 2, 1], center=true);\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "selfdriving",
    "openscad_code": "// Self-Driving Car – Realistic, Medium Complexity\n// Overall size ≈ 85 mm long\n\n$fn = 36;          // Smoother curves\nbody_l = 65;       // Main body length\nbody_w = 30;       // Main body width  \nbody_h = 20;       // Main body height\nroof_h = 12;       // Roof height\nwheel_r = 9;       // Wheel radius\nwheel_w = 5;       // Wheel width\nsensor_d = 3;      // LIDAR puck diameter\nsensor_h = 5;      // LIDAR height\nwall_t = 2;        // Printable wall thickness\n\nmodule car_body() {\n    // Lower chassis with slight taper\n    hull() {\n        translate([0,0,body_h/2])\n            cube([body_l, body_w, body_h], center=true);\n        translate([body_l/2-5, 0, body_h/2+2])\n            cube([10, body_w*0.8, body_h-4], center=true);\n    }\n\n    // Cabin / greenhouse\n    translate([0, 0, body_h + roof_h/2 - 2])\n        cube([body_l*0.8, body_w*0.85, roof_h], center=true);\n}\n\nmodule windows() {\n    color(\"lightblue\")\n    difference() {\n        // Windshield\n        translate([body_l/2-10, 0, body_h + roof_h/2 - 1])\n            cube([20, body_w*0.75, roof_h - 1], center=true);\n        // Cut actual hole\n        translate([body_l/2-10, 0, body_h + roof_h/2 - 1])\n            cube([20 - wall_t, body_w*0.75 - wall_t, roof_h + 1], center=true);\n    }\n}\n\nmodule wheel(steer=0) {\n    rotate([0, 0, steer])\n    rotate([90, 0, 0])\n        difference() {\n            cylinder(h=wheel_w, r=wheel_r, center=true);   // Tire\n            // Rim hole\n            cylinder(h=wheel_w+1, r=wheel_r-3, center=true);\n        }\n}\n\nmodule wheels() {\n    // Front wheels\n    translate([ body_l/2-10,  body_w/2+wheel_w/2, wheel_r])\n        wheel();\n    translate([ body_l/2-10, -body_w/2-wheel_w/2, wheel_r])\n        wheel();\n    // Rear wheels\n    translate([-body_l/2+10,  body_w/2+wheel_w/2, wheel_r])\n        wheel();\n    translate([-body_l/2+10, -body_w/2-wheel_w/2, wheel_r])\n        wheel();\n}\n\nmodule lidar() {\n    translate([0, 0, body_h+roof_h+sensor_h/2])\n    union() {\n        cylinder(h=sensor_h, d=sensor_d, center=true);     // Main puck\n        // Rotating head\n        translate([0, 0, sensor_h/2])\n            cylinder(h=1.5, d=sensor_d+1, center=true);\n    }\n}\n\nmodule bumper() {\n    // Front bumper\n    translate([body_l/2+2, 0, 4])\n        cube([4, body_w, 8], center=true);\n    // Rear bumper\n    translate([-body_l/2-2, 0, 4])\n        cube([4, body_w, 8], center=true);\n}\n\nmodule headlights() {\n    // Left headlight\n    translate([body_l/2,  body_w/2-5, 6])\n        sphere(d=4);\n    // Right headlight\n    translate([body_l/2, -body_w/2+5, 6])\n        sphere(d=4);\n}\n\n// Assembly\nunion() {\n    car_body();\n    windows();\n    wheels();\n    lidar();\n    bumper();\n    headlights();\n}",
    "renders": true
  },
  {
    "vehicle": "connected",
    "openscad_code": "// Realistic medium-complexity LEGO-compatible 2x4 brick\n// Overall footprint 32 mm × 24 mm, height 11.2 mm (3.2 mm plate + 8 mm studs)\n\n$fn = 32; // smooth curves for 3D printing\n\n// ---------- Parameters ----------\nplate_h = 3.2;    // standard plate height\nstud_h  = 1.6;    // exposed stud height above plate\nstud_d  = 4.8;    // stud outer diameter\nstud_wall = 1.0;  // wall thickness around stud\ntube_d  = 6.5;    // inner tube diameter\ntube_wall =1.2;   // tube wall thickness  \nbrick_w  = 8;     // width in studs\nbrick_l  = 4;     // length in studs\nstud_pitch = 8;   // 8 mm between stud centers\n\n// ---------- Helper module for studs ----------\nmodule stud() {\n    difference() {\n        // outer cylinder\n        cylinder(h = stud_h + plate_h, d = stud_d);\n        // hollow top\n        translate([0, 0, plate_h + 0.01])\n            cylinder(h = stud_h - 0.02, d = stud_d - 2*stud_wall);\n    }\n}\n\n// ---------- Helper module for inner tube ----------\nmodule inner_tube() {\n    cylinder(h = plate_h - 0.1, d = tube_d, center = false);\n}\n\n// ---------- Main brick body ----------\nmodule brick_2x4() {\n    union() {\n        // outer box\n        cube([brick_w*stud_pitch, brick_l*stud_pitch, plate_h]);\n\n        // studs on top\n        for (x = [1 : brick_w-1])\n            for (y = [1 : brick_l-1])\n                translate([x*stud_pitch, y*stud_pitch, plate_h])\n                    stud();\n\n        // inner tubes / anti-studs\n        for (x = [1 : brick_w-1])\n            for (y = [1 : brick_l-1])\n                translate([x*stud_pitch, y*stud_pitch, -0.01])\n                    inner_tube();\n\n        // side reinforcement ridges\n        difference() {\n            // outer shell\n            cube([brick_w*stud_pitch, brick_l*stud_pitch, plate_h]);\n            // hollow inside\n            translate([tube_wall, tube_wall, tube_wall])\n                cube([(brick_w-2)*stud_pitch - 2*tube_wall,\n                      (brick_l-2)*stud_pitch - 2*tube_wall,\n                      plate_h - 2*tube_wall]);\n        }\n    }\n}\n\n// ---------- Render ----------\nbrick_2x4();",
    "renders": true
  },
  {
    "vehicle": "smart",
    "openscad_code": "$fn=30;\n\n// Smart car dimensions in mm\nlength = 90;\nwidth = 45;\nheight = 45;\nwheel_r = 11;\nwheel_w = 6;\n\n// Main body module\nmodule body() {\n    // Lower chassis\n    difference() {\n        translate([0, 0, wheel_r+3])\n            cube([length-5, width-10, 15], center=true);\n        // Wheel wells\n        for(x=[-1, 1])\n            for(y=[-1, 1])\n                translate([x*length/3, y*width/2.5, wheel_r+3])\n                    rotate([0, 0, 45])\n                        cube([wheel_w+3, wheel_r+5, 20], center=true);\n    }\n    \n    // Upper passenger compartment\n    difference() {\n        hull() {\n            translate([length/6, 0, wheel_r+18])\n                cube([length/1.8, width-8, height-15], center=true);\n            translate([-length/4, 0, wheel_r+18])\n                cube([length/3, width-12, height-15], center=true);\n        }\n        // Windows\n        translate([0, 0, wheel_r+25])\n            cube([length/2+5, width-6, height-10], center=true);\n    }\n    \n    // Front bumper\n    translate([length/2-2, 0, wheel_r+3])\n        cube([8, width-8, 12], center=true);\n    \n    // Rear bumper\n    translate([-length/2+2, 0, wheel_r+3])\n        cube([8, width-8, 12], center=true);\n    \n    // Side mirrors\n    for(side=[-1, 1])\n        translate([length/4, side*width/2, wheel_r+20])\n            rotate([0, 30, 0])\n                cube([5, 3, 5]);\n}\n\n// Wheel module\nmodule wheel() {\n    difference() {\n        cylinder(h=wheel_w, r=wheel_r, center=true);\n        translate([0, 0, -wheel_w/2-1])\n            cylinder(h=wheel_w+2, r=wheel_r-3, center=true);\n    }\n    // Tire tread pattern\n    for(i=[0:5:359]) {\n        rotate([0, 0, i])\n            translate([wheel_r-1, 0, -wheel_w/2-0.1])\n                cube([2, 1, wheel_w+0.2]);\n    }\n}\n\n// Headlight module\nmodule headlight(x_pos, y_pos) {\n    translate([x_pos, y_pos, wheel_r+10])\n        rotate([0, 90, 0])\n            cylinder(h=3, r1=4, r2=3);\n}\n\n// Assembly\nmodule smart_car() {\n    // Main body\n    body();\n    \n    // Wheels\n    for(x=[-1, 1])\n        for(y=[-1, 1])\n            translate([x*length/3, y*width/2.5, wheel_r])\n                rotate([90, 0, 0])\n                    wheel();\n    \n    // Headlights\n    headlight(length/2-1, width/4);\n    headlight(length/2-1, -width/4);\n    \n    // Taillights\n    translate([-length/2+1, width/4, wheel_r+10])\n        cube([3, 5, 4]);\n    translate([-length/2+1, -width/4, wheel_r+10])\n        cube([3, 5, 4]);\n    \n    // Door handles\n    translate([0, width/2-2, wheel_r+15])\n        cube([8, 2, 1]);\n    translate([0, -width/2+2, wheel_r+15])\n        cube([8, 2, 1]);\n    \n    // Roof antenna\n    translate([-length/4, 0, wheel_r+height])\n        cylinder(h=8, r=0.8);\n}\n\n// Render the car\nsmart_car();",
    "renders": true
  },
  {
    "vehicle": "digital",
    "openscad_code": "// Digital clock with realistic styling\n// 7-segment display with separate segments and housing\n\n// Overall scale factor\nscale_factor = 0.8;\nbase_width = 80 * scale_factor;\nbase_depth = 30 * scale_factor;\nbase_height = 15 * scale_factor;\n\n// Display parameters\ndisplay_width = 65 * scale_factor;\ndisplay_depth = 25 * scale_factor;\ndisplay_height = 8 * scale_factor;\nsegment_width = 6 * scale_factor;\nsegment_length = 12 * scale_factor;\nsegment_thickness = 2 * scale_factor;\nsegment_spacing = 2 * scale_factor;\n\n// Button parameters\nbutton_radius = 3 * scale_factor;\nbutton_height = 4 * scale_factor;\n\n// Wall thickness for 3D printing\nwall_thickness = 1.5 * scale_factor;\n\n// Base housing with hollow cavity\nmodule base() {\n    difference() {\n        // Outer shell\n        cube([base_width, base_depth, base_height], center=true);\n        \n        // Hollow interior\n        translate([0, 0, -wall_thickness/2])\n            cube([base_width - 2*wall_thickness, \n                  base_depth - 2*wall_thickness, \n                  base_height + 1], center=true);\n        \n        // Cable slot at back\n        translate([0, base_depth/2 - wall_thickness, -base_height/4])\n            cube([15 * scale_factor, wall_thickness + 1, 8 * scale_factor], center=true);\n    }\n}\n\n// Display window\nmodule display_frame() {\n    difference() {\n        // Frame\n        translate([0, 0, base_height/2 + display_height/2])\n            cube([display_width + 4*wall_thickness, \n                  display_depth + 4*wall_thickness, \n                  display_height], center=true);\n        \n        // Window opening\n        translate([0, 0, -1])\n            cube([display_width, display_depth, display_height + 2], center=true);\n    }\n}\n\n// Individual 7-segment digit\nmodule digit(x_pos) {\n    translate([x_pos, 0, base_height/2 + display_height/2]) {\n        // Top segment (a)\n        translate([0, display_depth/2 - segment_spacing - segment_width/2, 0])\n            cube([segment_length, segment_width, segment_thickness], center=true);\n        \n        // Upper right segment (b)\n        translate([segment_length/2 + segment_spacing, \n                  display_depth/2 - segment_spacing - segment_length/2 - segment_width, 0])\n            rotate([0, 0, 90])\n            cube([segment_length, segment_width, segment_thickness], center=true);\n        \n        // Lower right segment (c)\n        translate([segment_length/2 + segment_spacing, \n                  -display_depth/2 + segment_spacing + segment_length/2 + segment_width, 0])\n            rotate([0, 0, 90])\n            cube([segment_length, segment_width, segment_thickness], center=true);\n        \n        // Bottom segment (d)\n        translate([0, -display_depth/2 + segment_spacing + segment_width/2, 0])\n            cube([segment_length, segment_width, segment_thickness], center=true);\n        \n        // Lower left segment (e)\n        translate([-segment_length/2 - segment_spacing, \n                  -display_depth/2 + segment_spacing + segment_length/2 + segment_width, 0])\n            rotate([0, 0, 90])\n            cube([segment_length, segment_width, segment_thickness], center=true);\n        \n        // Upper left segment (f)\n        translate([-segment_length/2 - segment_spacing, \n                  display_depth/2 - segment_spacing - segment_length/2 - segment_width, 0])\n            rotate([0, 0, 90])\n            cube([segment_length, segment_width, segment_thickness], center=true);\n        \n        // Middle segment (g)\n        translate([0, 0, 0])\n            cube([segment_length, segment_width, segment_thickness], center=true);\n    }\n}\n\n// Control buttons\nmodule buttons() {\n    // Hour button\n    translate([base_width/3, base_depth/2 + button_height/2, base_height/4])\n        cylinder(h=button_height, r=button_radius, center=true);\n    \n    // Minute button\n    translate([base_width/6, base_depth/2 + button_height/2, base_height/4])\n        cylinder(h=button_height, r=button_radius, center=true);\n    \n    // Set button\n    translate([-base_width/4, base_depth/2 + button_height/2, base_height/4])\n        cylinder(h=button_height, r=button_radius, center=true);\n}\n\n// Anti-slip feet\nmodule feet() {\n    foot_radius = 4 * scale_factor;\n    foot_height = 2 * scale_factor;\n    \n    for(x = [-base_width/3, base_width/3])\n        for(y = [-base_depth/3, base_depth/3])\n            translate([x, y, -base_height/2 - foot_height/2])\n                cylinder(h=foot_height, r=foot_radius, center=true);\n}\n\n// Assembly\nunion() {\n    color(\"gray20\") base();\n    color(\"gray40\") display_frame();\n    \n    // Display digits showing 12:34\n    color(\"red\") {\n        digit(-display_width/4);\n        digit(-display_width/12);\n        digit(display_width/12);\n        digit(display_width/4);\n    }\n    \n    color(\"gray60\") buttons();\n    color(\"black\") feet();\n}",
    "renders": true
  },
  {
    "vehicle": "telematic",
    "openscad_code": "// Telematic unit (GPS tracker) in realistic style\n// Overall dimensions: 80 x 50 x 20 mm\n\n// Wall thickness for 3D printing\nwall = 1.5;\n\n// Main enclosure body\nmodule enclosure() {\n    difference() {\n        // Outer shell\n        union() {\n            // Main body with rounded edges\n            minkowski() {\n                cube([80, 50, 20], center=true);\n                sphere(3);\n            }\n            \n            // Mounting flanges on sides\n            translate([-40, -25, -10]) cube([5, 8, 4]);\n            translate([35, -25, -10]) cube([5, 8, 4]);\n            translate([-40, 17, -10]) cube([5, 8, 4]);\n            translate([35, 17, -10]) cube([5, 8, 4]);\n        }\n        \n        // Hollow interior\n        minkowski() {\n            cube([80-2*wall, 50-2*wall, 20-2*wall], center=true);\n            sphere(2);\n        }\n        \n        // Cable entry holes\n        translate([-42, -10, 0]) rotate([0, 90, 0]) cylinder(h=5, r=4);\n        translate([-42, 10, 0]) rotate([0, 90, 0]) cylinder(h=5, r=4);\n        \n        // Mounting holes in flanges\n        translate([-42.5, -21, -8]) cylinder(h=5, r=2);\n        translate([-42.5, 21, -8]) cylinder(h=5, r=2);\n        translate([42.5, -21, -8]) cylinder(h=5, r=2);\n        translate([42.5, 21, -8]) cylinder(h=5, r=2);\n    }\n}\n\n// LED indicators\nmodule leds() {\n    // Power LED (green)\n    translate([-20, -20, 11]) {\n        cylinder(h=2, r=3);\n        translate([0, 0, 2]) cylinder(h=1, r=3.5);\n    }\n    \n    // GPS LED (blue)\n    translate([0, -20, 11]) {\n        cylinder(h=2, r=3);\n        translate([0, 0, 2]) cylinder(h=1, r=3.5);\n    }\n    \n    // Status LED (red)\n    translate([20, -20, 11]) {\n        cylinder(h=2, r=3);\n        translate([0, 0, 2]) cylinder(h=1, r=3.5);\n    }\n}\n\n// Antenna connector\nmodule antenna() {\n    translate([35, 0, 11]) {\n        // SMA connector base\n        cylinder(h=5, r=6);\n        // Center pin\n        cylinder(h=5.5, r=1);\n        // Threaded part\n        translate([0, 0, 5]) cylinder(h=6, r=4);\n    }\n}\n\n// PCB standoffs inside\nmodule standoffs() {\n    standoff_positions = [[-30, -20], [30, -20], [-30, 20], [30, 20]];\n    \n    for(pos = standoff_positions) {\n        translate([pos[0], pos[1], -10 + wall]) {\n            cylinder(h=8, r=3);\n            translate([0, 0, 8]) cylinder(h=1, r=5);\n            // Screw hole\n            translate([0, 0, -1]) cylinder(h=10, r=1.5);\n        }\n    }\n}\n\n// SIM card slot\nmodule sim_slot() {\n    translate([25, 15, -11]) {\n        // Slot opening\n        cube([15, 2, 1.5]);\n        // Ejector hole\n        translate([2, -1, 0]) cylinder(h=2, r=0.8);\n    }\n}\n\n// Ventilation slots\nmodule vents() {\n    for(i = [-2:2]) {\n        translate([i * 15, 25, 0]) {\n            rotate([90, 0, 0]) {\n                cube([8, 1.5, 2], center=true);\n            }\n        }\n    }\n}\n\n// Assemble the complete telematic unit\nunion() {\n    enclosure();\n    leds();\n    antenna();\n    standoffs();\n    sim_slot();\n    vents();\n}",
    "renders": true
  },
  {
    "vehicle": "aerodynamic",
    "openscad_code": "// Aerodynamic NACA 2412 Airfoil Wing Section\n// Medium complexity, realistic style\n// 3D printable with 2mm walls and no overhangs\n\n$fn = 50;\n\n// Wing parameters\nspan = 80;           // Total wingspan in mm\nroot_chord = 40;     // Root chord length in mm\ntip_chord = 25;      // Tip chord length in mm\nmax_thickness = 4;   // Max thickness at 30% chord\nwall_thickness = 2;  // 3D printable wall thickness\ndihedral = 5;        // Dihedral angle in degrees\nsweep = 10;          // Sweep angle in degrees\n\n// NACA 2412 airfoil coordinates (scaled)\nfunction naca2412(x) = \n    0.12 * (0.2969 * sqrt(x) - 0.1260 * x - 0.3516 * pow(x,2) + 0.2843 * pow(x,3) - 0.1015 * pow(x,4));\n\n// Generate wing section profile\nmodule wing_profile(chord, thickness, solid=false) {\n    offset = solid ? 0 : wall_thickness;\n    \n    // Upper surface\n    difference() {\n        union() {\n            for (i = [0:1:20]) {\n                x = i / 20;\n                y = naca2412(x) * thickness;\n                translate([x * chord, 0, y])\n                    cube([chord/20, chord/2, 0.1], center=true);\n            }\n        }\n        \n        // Hollow out if not solid\n        if (!solid) {\n            scale([(chord-2*offset)/chord, (chord/2-2*offset)/(chord/2), (thickness-2*offset)/thickness])\n                wing_profile(chord, thickness, true);\n        }\n    }\n    \n    // Lower surface\n    mirror([0, 0, 1]) {\n        difference() {\n            union() {\n                for (i = [0:1:20]) {\n                    x = i / 20;\n                    y = naca2412(x) * thickness;\n                    translate([x * chord, 0, y])\n                        cube([chord/20, chord/2, 0.1], center=true);\n                }\n            }\n            \n            if (!solid) {\n                scale([(chord-2*offset)/chord, (chord/2-2*offset)/(chord/2), (thickness-2*offset)/thickness])\n                    wing_profile(chord, thickness, true);\n            }\n        }\n    }\n    \n    // Leading edge cap\n    if (!solid) {\n        translate([0, 0, 0])\n            cylinder(h=chord/2, r=wall_thickness, center=true);\n    }\n}\n\n// Generate full wing with taper and dihedral\nmodule full_wing() {\n    slices = 10;\n    \n    for (i = [0:1:slices]) {\n        y = i * span / 2 / slices;\n        chord = root_chord - (root_chord - tip_chord) * (y / (span/2));\n        thickness = max_thickness * (1 - 0.5 * (y / (span/2)));\n        \n        // Calculate dihedral and sweep\n        z_dihedral = y * sin(dihedral);\n        x_sweep = y * sin(sweep);\n        \n        // Left wing\n        translate([x_sweep, -y, z_dihedral])\n            rotate([0, -90, 0])\n                wing_profile(chord, thickness);\n        \n        // Right wing\n        translate([x_sweep, y, z_dihedral])\n            rotate([0, -90, 0])\n                wing_profile(chord, thickness);\n    }\n}\n\n// Wing tips\nmodule wing_tips() {\n    // Left tip\n    translate([-sin(sweep) * span/2 - tip_chord, -span/2, sin(dihedral) * span/2])\n        rotate([0, 90, 0])\n            cylinder(h=tip_chord, r=max_thickness, center=true);\n    \n    // Right tip\n    translate([-sin(sweep) * span/2 - tip_chord, span/2, sin(dihedral) * span/2])\n        rotate([0, 90, 0])\n            cylinder(h=tip_chord, r=max_thickness, center=true);\n}\n\n// Main assembly\nunion() {\n    // Central hub\n    difference() {\n        cylinder(h=wall_thickness*2, r=root_chord/4, center=true);\n        cylinder(h=wall_thickness*2+1, r=root_chord/4-wall_thickness, center=true);\n    }\n    \n    // Wings\n    full_wing();\n    \n    // Wing tips for smooth finish\n    wing_tips();\n}",
    "renders": true
  },
  {
    "vehicle": "streamlined",
    "openscad_code": "// Streamlined Jet Engine Nacelle\n// Medium-complexity, 3D-printable model ~75 mm long\n// No overhangs >45°, 1.2 mm wall thickness\n\n$fn = 50;  // Smooth curves\n\nmodule blade_profile(r = 1, h = 1) {\n    // Simple low-twist blade cross-section\n    rotate([0, 0, 5])\n    difference() {\n        scale([1, 0.18, 1]) circle(r);\n        translate([0, 0.1, 0]) scale([0.4, 0.05, 1]) circle(r);\n    }\n}\n\nmodule fan_blade(h = 12, root_r = 9) {\n    // Single fan blade, tapered & twisted\n    for(i = [0: h/2]) {\n        translate([0, 0, i])\n        linear_extrude(height = 0.5, twist = -i*2)\n        scale([1 - i*0.04, 1 - i*0.04, 1])\n        blade_profile(root_r);\n    }\n}\n\nmodule spinner() {\n    // Nose cone with slight ogive\n    difference() {\n        rotate_extrude()\n        translate([5, 0, 0])\n        circle(r = 12);\n        // Hollow cavity\n        translate([0, 0, -1])\n        rotate_extrude()\n        translate([5.5, 0, 0])\n        circle(r = 10.5);\n    }\n}\n\nmodule intake_lip() {\n    // Thick rounded intake lip\n    difference() {\n        rotate_extrude()\n        translate([10, 0, 0])\n        circle(r = 15);\n        rotate_extrude()\n        translate([11.5, 0, 0])\n        circle(r = 13.5);\n    }\n}\n\nmodule cowl(t = 75) {\n    // Main nacelle body\n    difference() {\n        hull() {\n            translate([0, 0, 0]) cylinder(r1 = 15, r2 = 15, h = 25);\n            translate([0, 0, t - 15]) cylinder(r1 = 12, r2 = 11, h = 15);\n        }\n        // Internal cavity\n        hull() {\n            translate([0, 0, -1]) cylinder(r1 = 13.8, r2 = 13.8, h = 27);\n            translate([0, 0, t - 14]) cylinder(r1 = 10.8, r2 = 9.8, h = 15);\n        }\n    }\n}\n\nmodule exhaust() {\n    // Simple conical exhaust\n    difference() {\n        cylinder(r1 = 11, r2 = 9, h = 10);\n        translate([0, 0, -1]) cylinder(r1 = 9.8, r2 = 7.8, h = 12);\n    }\n}\n\nmodule pylon() {\n    // Mounting pylon with taper\n    hull() {\n        translate([0, 15, 30]) cube([20, 3, 5], center = true);\n        translate([0, 15, 60]) cube([15, 2, 4], center = true);\n    }\n}\n\nmodule fan_assembly() {\n    // 11 blades attached to spinner\n    union() {\n        spinner();\n        for(i = [0:10]) {\n            rotate([0, 0, i*360/11])\n            translate([0, 0, 3])\n            fan_blade();\n        }\n    }\n}\n\n// Main assembly\ntranslate([0, 0, 0]) {\n    // Core nacelle\n    union() {\n        intake_lip();\n        cowl();\n        translate([0, 0, 75]) exhaust();\n        translate([0, -15, 0]) pylon();\n    }\n    \n    // Internal fan placed slightly inside intake\n    translate([0, 0, 5]) fan_assembly();\n}",
    "renders": true
  },
  {
    "vehicle": "lightweight",
    "openscad_code": "// Lightweight Racing Rowing Shell\n// Approx 1:50 scale, 130 mm long\n// All dimensions in mm\n\n$fn = 36;\n\nmodule shell_hull() {\n    // Main hull – single sweep\n    hull() {\n        // Bow\n        translate([-65, 0, 0]) sphere([10, 6, 5]);\n        // Mid\n        translate([-25, 0, -3]) sphere([12, 7, 6]);\n        translate([ 25, 0, -3]) sphere([12, 7, 6]);\n        // Stern\n        translate([ 65, 0, 0]) sphere([9, 5, 4]);\n    }\n}\n\nmodule deck() {\n    difference() {\n        hull() {\n            translate([-65, 0, 5]) sphere([10, 6, 2]);\n            translate([ 65, 0, 5]) sphere([9, 5, 2]);\n            translate([-25, 0, 5]) sphere([12, 7, 2]);\n            translate([ 25, 0, 5]) sphere([12, 7, 2]);\n        }\n        // Cockpit opening\n        translate([0, 0, 4.5]) cube([90, 12, 3], center=true);\n    }\n}\n\nmodule seat_track() {\n    // Rails under seat\n    for (y = [-2, 2])\n        translate([-20, y, 2]) cube([40, 1, 1]);\n}\n\nmodule seat() {\n    difference() {\n        // Seat top\n        translate([0, 0, 3]) cube([12, 8, 1], center=true);\n        // Lightening holes\n        for (x = [-4, 4])\n            translate([x, 0, 3.5]) cylinder(h=2, r=1.5, $fn=16);\n    }\n    // Seat sides\n    translate([0, 4, 2.5]) cube([12, 1, 1], center=true);\n    translate([0, -4, 2.5]) cube([12, 1, 1], center=true);\n}\n\nmodule oarlock_pin() {\n    // Pin tower\n    difference() {\n        cylinder(h=8, r=3);\n        translate([0, 0, -1]) cylinder(h=10, r=1.5);\n    }\n    // Top washer\n    translate([0, 0, 8]) cylinder(h=1, r=4);\n}\n\nmodule riggers() {\n    // Starboard rigger\n    translate([-15, 10, 6]) rotate([0, 90, 0]) {\n        difference() {\n            cylinder(h=20, r=2);\n            translate([0, 0, 9]) cube([20, 4, 4], center=true);\n        }\n        oarlock_pin();\n    }\n    // Port rigger\n    translate([-15, -10, 6]) mirror([0, 1, 0]) rotate([0, 90, 0]) {\n        difference() {\n            cylinder(h=20, r=2);\n            translate([0, 0, 9]) cube([20, 4, 4], center=true);\n        }\n        oarlock_pin();\n    }\n}\n\nmodule skeg() {\n    // Small fin under stern\n    translate([55, 0, -5]) cube([12, 1.5, 5]);\n}\n\n// Assembly\nunion() {\n    shell_hull();\n    deck();\n    seat_track();\n    seat();\n    riggers();\n    skeg();\n}",
    "renders": true
  },
  {
    "vehicle": "compactvan",
    "openscad_code": "// Compact Van - Realistic Style, Medium Complexity\n// Designed for 3D printing with no overhangs and 1mm wall thickness\n\n// Dimensions (mm)\nvan_length = 90;\nvan_width = 40;\nvan_height = 35;\nwheel_diameter = 15;\nwheel_width = 6;\n\n// Main body module\nmodule van_body() {\n    // Lower chassis with rounded edges\n    hull() {\n        translate([0, 0, wheel_diameter/2]) \n            cube([van_length, van_width, van_height/2], center=true);\n        translate([0, 0, wheel_diameter/2 + 2]) \n            cube([van_length-4, van_width-4, van_height/2 - 4], center=true);\n    }\n    \n    // Upper cabin\n    translate([van_length/6, 0, van_height/2 + wheel_diameter/2 + 2])\n        cube([van_length/1.5, van_width-6, van_height/2], center=true);\n}\n\n// Wheel arch cutouts\nmodule wheel_arch(pos_x, pos_y) {\n    translate([pos_x, pos_y, wheel_diameter/2 + 1])\n        rotate([0, 90, 0])\n            cylinder(h=wheel_width+2, r=wheel_diameter/2 + 2, center=true);\n}\n\n// Wheels with tires and rims\nmodule wheel() {\n    difference() {\n        // Tire\n        color(\"black\")\n            cylinder(h=wheel_width, r=wheel_diameter/2, center=true);\n        \n        // Rim\n        translate([0, 0, -0.1])\n            color(\"silver\")\n                cylinder(h=wheel_width+0.2, r=wheel_diameter/2 - 2.5, center=true);\n        \n        // Axle hole\n        rotate([0, 90, 0])\n            cylinder(h=wheel_width+2, r=1.5, center=true);\n    }\n}\n\n// Windows\nmodule windows() {\n    // Windshield\n    translate([van_length/3, 0, van_height/2 + wheel_diameter/2 + van_height/4])\n        rotate([0, -15, 0])\n            cube([van_length/4, van_width-10, van_height/6], center=true);\n    \n    // Side windows\n    for(side = [-1, 1]) {\n        translate([0, side * (van_width/2 - 1), van_height/2 + wheel_diameter/2 + van_height/4])\n            cube([van_length/1.8, 1, van_height/6], center=true);\n    }\n    \n    // Rear window\n    translate([-van_length/2 + 2, 0, van_height/2 + wheel_diameter/2 + van_height/4])\n        rotate([0, 15, 0])\n            cube([van_length/5, van_width-10, van_height/6], center=true);\n}\n\n// Doors\nmodule doors() {\n    // Side doors\n    for(side = [-1, 1]) {\n        translate([0, side * (van_width/2 + 0.5), van_height/2 + wheel_diameter/2])\n            cube([van_length/1.2, 1, van_height/2 - 2], center=true);\n    }\n    \n    // Rear doors\n    translate([-van_length/2 + 1, 0, van_height/2 + wheel_diameter/2])\n        cube([1, van_width-4, van_height/2 - 2], center=true);\n}\n\n// Headlights and taillights\nmodule lights() {\n    // Headlights\n    for(side = [-1, 1]) {\n        translate([van_length/2 - 2, side * (van_width/3), van_height/4 + wheel_diameter/2])\n            color(\"yellow\")\n                sphere(r=2);\n    }\n    \n    // Taillights\n    for(side = [-1, 1]) {\n        translate([-van_length/2 + 2, side * (van_width/3), van_height/4 + wheel_diameter/2])\n            color(\"red\")\n                sphere(r=1.5);\n    }\n}\n\n// Side mirrors\nmodule mirrors() {\n    for(side = [-1, 1]) {\n        translate([van_length/3, side * (van_width/2 + 2), van_height/2 + wheel_diameter/2 + van_height/3])\n            rotate([0, 0, side * 30])\n                color(\"black\")\n                    cube([3, 1, 2], center=true);\n    }\n}\n\n// Main assembly\ndifference() {\n    union() {\n        // Main body\n        van_body();\n        \n        // Wheels\n        for(x = [van_length/3, -van_length/3]) {\n            for(y = [van_width/2 - 5, -van_width/2 + 5]) {\n                translate([x, y, wheel_diameter/2])\n                    rotate([90, 0, 0])\n                        wheel();\n            }\n        }\n        \n        // External features\n        lights();\n        mirrors();\n    }\n    \n    // Cut windows\n    windows();\n    \n    // Cut wheel arches\n    for(x = [van_length/3, -van_length/3]) {\n        for(y = [van_width/2 - 5, -van_width/2 + 5]) {\n            wheel_arch(x, y);\n        }\n    }\n    \n    // Cut door seams\n    doors();\n}",
    "renders": true
  },
  {
    "vehicle": "minitruck",
    "openscad_code": "// Minitruck OpenSCAD model - realistic style, medium complexity\n// Overall dimensions approximately 90 x 40 x 45 mm\n\n$fn = 32;\n\n// Main truck assembly\nmodule minitruck() {\n    // Chassis frame\n    union() {\n        // Main chassis base\n        translate([0, 0, 5]) \n            cube([90, 40, 3], center = true);\n        \n        // Front axle support\n        translate([30, 0, 5]) \n            cube([6, 38, 6], center = true);\n        \n        // Rear axle support\n        translate([-30, 0, 5]) \n            cube([6, 38, 6], center = true);\n    }\n    \n    // Cab assembly\n    translate([20, 0, 11]) \n        rotate([0, 0, 0]) \n            cab();\n    \n    // Truck bed\n    translate([-15, 0, 11]) \n        truck_bed();\n    \n    // Wheels\n    for (x = [30, -30]) {\n        for (y = [-18, 18]) {\n            translate([x, y, 5]) \n                wheel();\n        }\n    }\n    \n    // Headlights\n    translate([40, 12, 15]) \n        headlight();\n    translate([40, -12, 15]) \n        headlight();\n    \n    // Taillights\n    translate([-43, 12, 15]) \n        taillight();\n    translate([-43, -12, 15]) \n        taillight();\n}\n\n// Cab module\nmodule cab() {\n    union() {\n        // Cab base\n        difference() {\n            translate([0, 0, 10]) \n                cube([34, 36, 20], center = true);\n            \n            // Windshield cutout\n            translate([15, 0, 20]) \n                cube([20, 30, 16], center = true);\n        }\n        \n        // Hood\n        translate([20, 0, 8]) \n            cube([26, 34, 6], center = true);\n        \n        // Roof\n        translate([5, 0, 25]) \n            cube([24, 34, 3], center = true);\n        \n        // Side mirrors\n        translate([15, 20, 18]) \n            mirror();\n        translate([15, -20, 18]) \n            mirror();\n    }\n}\n\n// Truck bed module\nmodule truck_bed() {\n    difference() {\n        // Bed floor\n        translate([0, 0, 8]) \n            cube([50, 36, 3], center = true);\n        \n        // Bed walls\n        translate([0, 18, 13]) \n            cube([50, 2, 8], center = true);\n        translate([0, -18, 13]) \n            cube([50, 2, 8], center = true);\n        translate([-22, 0, 13]) \n            cube([6, 36, 8], center = true);\n    }\n    \n    // Tailgate\n    translate([-22, 0, 7]) \n        cube([2, 36, 12], center = true);\n}\n\n// Wheel module\nmodule wheel() {\n    difference() {\n        // Tire\n        color(\"black\") \n            cylinder(h = 8, r = 12, center = true);\n        \n        // Rim\n        color(\"silver\") \n            translate([0, 0, -1]) \n                cylinder(h = 6, r = 8, center = true);\n        \n        // Hub\n        color(\"gray\") \n            translate([0, 0, 0]) \n                cylinder(h = 2, r = 4, center = true);\n    }\n}\n\n// Headlight module\nmodule headlight() {\n    difference() {\n        color(\"yellow\") \n            sphere(r = 3);\n        color(\"black\") \n            translate([1, 0, 0]) \n                sphere(r = 2.5);\n    }\n}\n\n// Taillight module\nmodule taillight() {\n    difference() {\n        color(\"red\") \n            cube([4, 6, 4], center = true);\n        color(\"black\") \n            translate([1, 0, 0]) \n                cube([3, 4, 3], center = true);\n    }\n}\n\n// Side mirror module\nmodule mirror() {\n    union() {\n        // Mirror arm\n        color(\"black\") \n            cube([2, 2, 8], center = true);\n        \n        // Mirror head\n        translate([0, 0, 6]) \n            color(\"silver\") \n                sphere(r = 3);\n    }\n}\n\n// Render the truck\nminitruck();",
    "renders": true
  },
  {
    "vehicle": "microvan",
    "openscad_code": "// Microvan - realistic style, medium complexity\n// Designed for 3D printing (no overhangs, 2mm wall thickness)\n\n$fn = 32;\n\n// Main dimensions\nvan_length = 90;\nvan_width = 40;\nvan_height = 45;\nwheel_radius = 8;\nwheel_width = 4;\n\nmodule main_body() {\n    // Main van body\n    difference() {\n        hull() {\n            // Front rounded section\n            translate([van_length*0.15, 0, van_height*0.4])\n                cube([van_length*0.3, van_width*0.9, van_height*0.5], center=true);\n            // Main rectangular section\n            translate([-van_length*0.15, 0, van_height*0.4])\n                cube([van_length*0.6, van_width*0.95, van_height*0.5], center=true);\n        }\n        \n        // Windshield\n        translate([van_length*0.35, 0, van_height*0.65])\n            cube([van_length*0.2, van_width*0.7, van_height*0.3], center=true);\n            \n        // Side windows\n        for(side = [-1, 1]) {\n            translate([-van_length*0.1, side*van_width*0.48, van_height*0.6])\n                cube([van_length*0.3, 1, van_height*0.25], center=true);\n            translate([-van_length*0.4, side*van_width*0.48, van_height*0.6])\n                cube([van_length*0.2, 1, van_height*0.25], center=true);\n        }\n    }\n}\n\nmodule roof() {\n    // Roof with slight curve\n    hull() {\n        translate([van_length*0.35, 0, van_height*0.85])\n            cube([van_length*0.2, van_width*0.85, van_height*0.1], center=true);\n        translate([-van_length*0.35, 0, van_height*0.85])\n            cube([van_length*0.2, van_width*0.85, van_height*0.1], center=true);\n    }\n}\n\nmodule front_details() {\n    // Front bumper\n    translate([van_length*0.48, 0, wheel_radius+2])\n        cube([van_length*0.04, van_width*0.9, 4], center=true);\n    \n    // Headlights\n    for(side = [-1, 1]) {\n        translate([van_length*0.45, side*van_width*0.35, van_height*0.55])\n            sphere(2.5);\n    }\n    \n    // Grille\n    translate([van_length*0.45, 0, van_height*0.4])\n        cube([1, van_width*0.4, van_height*0.15], center=true);\n}\n\nmodule wheels() {\n    // Create wheels with proper spacing\n    for(x = [van_length*0.3, -van_length*0.3])\n        for(y = [-1, 1]) {\n            translate([x, y*van_width*0.55, wheel_radius])\n                rotate([0, 90, 0])\n                    cylinder(h=wheel_width, r=wheel_radius, center=true);\n            \n            // Wheel wells\n            translate([x, y*van_width*0.55, wheel_radius+2])\n                difference() {\n                    cube([wheel_radius*2+4, wheel_width+2, wheel_radius+2], center=true);\n                    translate([0, 0, -1])\n                        cube([wheel_radius*2+10, wheel_width+8, wheel_radius+2], center=true);\n                }\n        }\n}\n\nmodule doors() {\n    // Side door lines\n    for(side = [-1, 1]) {\n        // Front door line\n        translate([van_length*0.2, side*van_width*0.48, van_height*0.4])\n            cube([1, 1, van_height*0.4], center=true);\n        \n        // Sliding door line\n        translate([-van_length*0.1, side*van_width*0.48, van_height*0.4])\n            cube([1, 1, van_height*0.4], center=true);\n        \n        // Rear door line\n        translate([-van_length*0.4, side*van_width*0.48, van_height*0.4])\n            cube([1, 1, van_height*0.4], center=true);\n    }\n}\n\nmodule mirrors() {\n    // Side mirrors\n    for(side = [-1, 1]) {\n        translate([van_length*0.35, side*van_width*0.5, van_height*0.55])\n            rotate([0, -20, 0])\n                cube([3, 1, 2], center=true);\n    }\n}\n\nmodule rear_details() {\n    // Rear bumper\n    translate([-van_length*0.48, 0, wheel_radius+2])\n        cube([van_length*0.04, van_width*0.9, 4], center=true);\n    \n    // Taillights\n    for(side = [-1, 1]) {\n        translate([-van_length*0.48, side*van_width*0.25, van_height*0.5])\n            cube([2, 3, van_height*0.15], center=true);\n    }\n    \n    // License plate area\n    translate([-van_length*0.48, 0, wheel_radius+4])\n        cube([1, van_width*0.3, van_height*0.1], center=true);\n}\n\n// Assembly\nunion() {\n    main_body();\n    roof();\n    front_details();\n    rear_details();\n    doors();\n    mirrors();\n    wheels();\n}",
    "renders": true
  },
  {
    "vehicle": "cuv",
    "openscad_code": "// OpenSCAD code for a realistic 1:100 scale CUV (Compact Utility Vehicle)\n// Overall footprint ~90 mm long, ~40 mm wide, ~35 mm high\n\n$fn = 32; // Smooth curves for 3D printing\n\nmodule cuv_body() {\n    // Main unibody shell\n    difference() {\n        hull() {\n            translate([-12,0,0]) cube([84,38,18], center=true);\n            translate([35,0,5]) cube([20,34,12], center=true);\n        }\n        \n        // Cabin cavity\n        translate([0,0,10]) cube([75,36,16], center=true);\n    }\n}\n\nmodule hood() {\n    // Hood sloping toward front\n    translate([-22,0,9])\n    rotate([10,0,0])\n    cube([25,34,4], center=true);\n}\n\nmodule roof() {\n    // Roof with slight arc\n    translate([5,0,19])\n    scale([1,1,0.8])\n    sphere(10);\n    // Roof rails\n    for(side = [-1,1])\n        translate([5,side*18.5,19])\n        cube([28,2,2], center=true);\n}\n\nmodule windshield() {\n    // Angled windshield\n    translate([-12,0,15])\n    rotate([65,0,0])\n    cube([25,36,0.5], center=true);\n}\n\nmodule rear_window() {\n    // Rear window\n    translate([22,0,15])\n    rotate([65,0,0])\n    cube([20,36,0.5], center=true);\n}\n\nmodule side_windows() {\n    // Side windows\n    translate([5,0,15])\n    cube([30,38,0.5], center=true);\n}\n\nmodule wheels() {\n    // Wheels with realistic proportions\n    module wheel() {\n        difference() {\n            cylinder(h=8, r=9);\n            translate([0,0,-1]) cylinder(h=10, r=6);\n        }\n    }\n    \n    // Front wheels\n    translate([-18, -20, -8]) wheel();\n    translate([-18, 20, -8]) wheel();\n    \n    // Rear wheels\n    translate([18, -20, -8]) wheel();\n    translate([18, 20, -8]) wheel();\n}\n\nmodule bumpers() {\n    // Front bumper\n    translate([-38,0,0])\n    cube([6,36,6], center=true);\n    \n    // Rear bumper\n    translate([38,0,0])\n    cube([6,36,6], center=true);\n}\n\nmodule headlights() {\n    // Headlight assemblies\n    translate([-36, -12, 4])\n    cube([3,6,4], center=true);\n    translate([-36, 12, 4])\n    cube([3,6,4], center=true);\n    \n    // Taillights\n    translate([36, -12, 8])\n    cube([3,6,4], center=true);\n    translate([36, 12, 8])\n    cube([3,6,4], center=true);\n}\n\nmodule grille() {\n    // Front grille\n    translate([-36,0,7])\n    cube([2,24,4], center=true);\n    \n    // Grille bars\n    for(y = [-10:5:10])\n        translate([-37,y,7])\n        cube([1,2,4], center=true);\n}\n\nmodule mirrors() {\n    // Side mirrors\n    translate([0, -19, 12])\n    cube([4,2,3], center=true);\n    translate([0, 19, 12])\n    cube([4,2,3], center=true);\n}\n\nmodule doors() {\n    // Door lines\n    translate([0,0,9])\n    cube([60,0.5,12], center=true);\n}\n\n// Assembly\nunion() {\n    cuv_body();\n    hood();\n    roof();\n    windshield();\n    rear_window();\n    side_windows();\n    bumpers();\n    headlights();\n    grille();\n    mirrors();\n    doors();\n    wheels();\n}",
    "renders": true
  },
  {
    "vehicle": "suvlet",
    "openscad_code": "// Realistic Medium-Complexity SUVlet (Sub-compact SUV) – approx. 80 mm long\n// All parts printable without supports; 1.2 mm wall thickness assumed.\n\n// Overall scale factor to keep max dimension ~80 mm\nscale_factor = 0.65;\n\n$fn = 32;          // smooth curves\nwheel_d = 18;      // tyre OD\nrim_d = 13;        // rim OD\ntread_w = 7;       // tyre width\nwall = 1.2;        // printable wall thickness\n\nmodule main() {\n    scale(scale_factor)\n    union() {\n        body_shell();\n        windows();\n        lights();\n        mirrors();\n        roof_rack();\n        // Wheels\n        for (side = [0,1]) {\n            for (axle = [-1,1]) {\n                translate([axle*28, side? -22 : 22, -9])\n                    rotate([0,0,0])\n                        wheel();\n            }\n        }\n    }\n}\n\n// ---------- BODY ----------\nmodule body_shell() {\n    difference() {\n        // Main monocoque\n        hull() {\n            translate([-35,0,0])\n                cube([70, 45, 25], center=true);\n            translate([15,0,10])\n                resize([40,42,20])\n                    sphere(12);\n        }\n        \n        // Wheel arches\n        for (side = [0,1])\n            for (axle = [-1,1])\n                translate([axle*28, side? -22 : 22, -9])\n                    rotate([90,0,0])\n                        cylinder(h=25, d=wheel_d+6, center=true);\n        \n        // Underside clearance\n        translate([0,0,-15])\n            cube([100,50,10], center=true);\n    }\n    \n    // Hood slope\n    translate([25,0,3])\n        rotate([0,-10,0])\n            cube([30,42,6], center=true);\n}\n\n// ---------- WINDOWS ----------\nmodule windows() {\n    color(\"lightblue\", 0.6)\n    difference() {\n        // Windshield\n        translate([12,0,13])\n            rotate([0,-30,0])\n                cube([22,38,0.8], center=true);\n        // Side windows\n        for (y = [-20,20]) {\n            translate([-5,y,12])\n                cube([40,14,18], center=true);\n        }\n        // Rear window\n        translate([-28,0,13])\n            rotate([0,30,0])\n                cube([18,38,0.8], center=true);\n    }\n}\n\n// ---------- LIGHTS ----------\nmodule lights() {\n    // Headlights\n    translate([33,12,5])\n        cube([3,8,5], center=true);\n    translate([33,-12,5])\n        cube([3,8,5], center=true);\n    \n    // Taillights\n    translate([-33,12,5])\n        cube([3,8,4], center=true);\n    translate([-33,-12,5])\n        cube([3,8,4], center=true);\n}\n\n// ---------- MIRRORS ----------\nmodule mirrors() {\n    for (side = [-1,1]) {\n        translate([15,side*22,8])\n            rotate([0,side*20,0])\n                cube([6,4,5], center=true);\n    }\n}\n\n// ---------- ROOF RACK ----------\nmodule roof_rack() {\n    // Rails\n    for (x = [-15,15]) {\n        translate([x,0,25])\n            cube([2,46,2], center=true);\n    }\n    // Cross bars\n    for (x = [-10,0,10]) {\n        translate([x,0,26])\n            cube([30,2,2], center=true);\n    }\n}\n\n// ---------- WHEEL ----------\nmodule wheel() {\n    difference() {\n        // Tyre\n        color(\"black\")\n            cylinder(h=tread_w, d=wheel_d, center=true);\n        \n        // Rim cavity\n        cylinder(h=tread_w+1, d=rim_d, center=true);\n    }\n    \n    // Rim spokes\n    for (i = [0:5]) {\n        rotate([0,0,i*60])\n            translate([rim_d/2-1.5,0,0])\n                cube([3,tread_w-1,1.5], center=true);\n    }\n}\n\nmain();",
    "renders": true
  },
  {
    "vehicle": "sportute",
    "openscad_code": "// Sportute - Realistic style, medium complexity\n// A sporty hatchback automobile (sportute = sport utility coupe)\n\n// Overall dimensions (in mm)\nlength = 80;\nwidth = 35;\nheight = 25;\nwheelbase = 48;\n\n// Basic body shell\nmodule body() {\n    // Main chassis\n    difference() {\n        union() {\n            // Lower body (floorpan and sides)\n            translate([-length/2, -width/2, 0])\n                cube([length, width, height/3]);\n            \n            // Passenger compartment\n            translate([-length/2 + 10, -width/2 + 3, height/3])\n                cube([length - 15, width - 6, height/2]);\n            \n            // Hood\n            translate([-length/2 + 5, -width/2 + 2, height/3])\n                cube([length/2 - 5, width - 4, height/4]);\n            \n            // Roof\n            translate([-length/2 + 20, -width/2 + 5, height/3 + height/2])\n                cube([length - 35, width - 10, height/6]);\n            \n            // Rear hatch\n            translate([length/2 - 15, -width/2 + 2, height/3])\n                cube([15, width - 4, height/2]);\n        }\n        \n        // Windows\n        translate([-length/2 + 22, -width/2 + 6, height/3 + height/2 + 0.1])\n            cube([length - 39, width - 12, height/6 - 0.2]);\n        \n        translate([-length/2 + 12, -width/2 + 6, height/3 + 0.1])\n            cube([length - 24, width - 12, height/2 - 0.2]);\n    }\n}\n\n// Wheel module\nmodule wheel() {\n    difference() {\n        // Tire\n        cylinder(h=4, r=6, $fn=20);\n        \n        // Rim\n        translate([0, 0, -0.1])\n            cylinder(h=4.2, r=4, $fn=6);\n    }\n}\n\n// Wheels placement\nmodule wheels() {\n    // Front left\n    translate([-wheelbase/2, -width/2 - 2, 0])\n        rotate([90, 0, 0])\n            wheel();\n    \n    // Front right\n    translate([-wheelbase/2, width/2 + 2, 0])\n        rotate([90, 0, 0])\n            wheel();\n    \n    // Rear left\n    translate([wheelbase/2, -width/2 - 2, 0])\n        rotate([90, 0, 0])\n            wheel();\n    \n    // Rear right\n    translate([wheelbase/2, width/2 + 2, 0])\n        rotate([90, 0, 0])\n            wheel();\n}\n\n// Headlights\nmodule headlights() {\n    // Left headlight\n    translate([-length/2 + 2, -width/2 + 8, height/3 + 2])\n        cube([3, 6, 2]);\n    \n    // Right headlight\n    translate([-length/2 + 2, width/2 - 14, height/3 + 2])\n        cube([3, 6, 2]);\n}\n\n// Taillights\nmodule taillights() {\n    // Left taillight\n    translate([length/2 - 2, -width/2 + 8, height/3 + 3])\n        cube([2, 6, 2]);\n    \n    // Right taillight\n    translate([length/2 - 2, width/2 - 14, height/3 + 3])\n        cube([2, 6, 2]);\n}\n\n// Side mirrors\nmodule mirrors() {\n    // Left mirror\n    translate([-length/2 + 15, -width/2 - 1, height/3 + height/2])\n        cube([3, 2, 1.5]);\n    \n    // Right mirror\n    translate([-length/2 + 15, width/2 - 1, height/3 + height/2])\n        cube([3, 2, 1.5]);\n}\n\n// Grille\nmodule grille() {\n    translate([-length/2 + 0.5, -width/2 + 5, height/3 + 1])\n        cube([1, width - 10, 2]);\n}\n\n// Exhaust pipes\nmodule exhaust() {\n    translate([length/2 - 3, -width/2 + 5, 2])\n        cylinder(h=5, r=1, $fn=8);\n    \n    translate([length/2 - 3, width/2 - 5, 2])\n        cylinder(h=5, r=1, $fn=8);\n}\n\n// Assemble the sportute\nunion() {\n    body();\n    wheels();\n    headlights();\n    taillights();\n    mirrors();\n    grille();\n    exhaust();\n}",
    "renders": true
  },
  {
    "vehicle": "cargovan",
    "openscad_code": "// Realistic medium-complexity 3D-printable cargo van\n// Overall length 90 mm, width 45 mm, height 45 mm\n// All walls 2 mm thick for printability\n\nwall_thk = 2;\nscale = 1;       // print at 100 %\n\n// Main body shell\nmodule body_shell() {\n    difference() {\n        // Outer shell\n        hull() {\n            translate([0,0,20]) cube([60,45,25], center=true);\n            translate([-20,0,10]) cube([20,40,20], center=true);\n            translate([20,0,10]) cube([20,40,20], center=true);\n        }\n        // Hollow interior\n        translate([0,0,19.9])\n            scale([0.93,0.91,0.92])\n            hull() {\n                translate([0,0,20]) cube([60,45,25], center=true);\n                translate([-20,0,10]) cube([20,40,20], center=true);\n                translate([20,0,10]) cube([20,40,20], center=true);\n            }\n    }\n}\n\n// Front cab & windshield slope\nmodule cab() {\n    difference() {\n        hull() {\n            translate([-25,0,35]) cube([20,42,15], center=true);\n            translate([-25,0,20]) cube([20,40,20], center=true);\n        }\n        translate([-25,0,34.9])\n            scale([0.85,0.9,0.85])\n            hull() {\n                translate([-25,0,35]) cube([20,42,15], center=true);\n                translate([-25,0,20]) cube([20,40,20], center=true);\n            }\n    }\n}\n\n// Roof ridges for realism\nmodule roof_ridges() {\n    for (i = [-15:15:15]) {\n        translate([i,0,45])\n            cube([10,45,1], center=true);\n    }\n}\n\n// Side windows (cutouts)\nmodule side_windows() {\n    translate([-25,22.5,30])\n        rotate([0,10,0])\n        cube([10,0.1,12]);\n    mirror([0,1,0])\n        translate([-25,22.5,30])\n            rotate([0,10,0])\n            cube([10,0.1,12]);\n}\n\n// Front windshield\nmodule windshield() {\n    translate([-35,0,30])\n        rotate([0,30,0])\n        cube([0.1,35,18]);\n}\n\n// Front grille\nmodule grille() {\n    translate([-39,0,20])\n        cube([2,35,10], center=true);\n    // grille bars\n    for (y = [-15:5:15]) {\n        translate([-39.5,y,20])\n            cube([1,2,10], center=true);\n    }\n}\n\n// Headlights\nmodule headlights() {\n    translate([-39,-15,25])\n        sphere(d=5);\n    translate([-39,15,25])\n        sphere(d=5);\n}\n\n// Bumper\nmodule bumper() {\n    translate([-40,0,10])\n        cube([3,45,8], center=true);\n}\n\n// Wheels\nmodule wheel(pos=[0,0,0]) {\n    translate(pos)\n    difference() {\n        cylinder(h=4, d=14, center=true);\n        translate([0,0,2.1])\n            cylinder(h=4.2, d=8, center=true);\n    }\n}\n\n// Side mirrors\nmodule mirrors() {\n    translate([-25,25,30])\n        rotate([0,0,-20])\n        cube([3,5,2], center=true);\n    mirror([0,1,0])\n        translate([-25,25,30])\n            rotate([0,0,-20])\n            cube([3,5,2], center=true);\n}\n\n// Rear doors\nmodule rear_doors() {\n    translate([30,-22.5,25])\n        cube([0.1,45,30], center=true);\n    // door split line\n    translate([30.1,0,25])\n        cube([0.1,1,30], center=true);\n}\n\n// Under-chassis clearance block\nmodule chassis_base() {\n    translate([0,0,5])\n        cube([80,45,10], center=true);\n}\n\n// Assemble the van\nscale(scale)\nunion() {\n    chassis_base();\n    body_shell();\n    cab();\n    roof_ridges();\n    side_windows();\n    windshield();\n    grille();\n    headlights();\n    bumper();\n    mirrors();\n    rear_doors();\n    // Wheels\n    wheel([-15,-20,5]);\n    wheel([-15,20,5]);\n    wheel([15,-20,5]);\n    wheel([15,20,5]);\n}",
    "renders": true
  },
  {
    "vehicle": "passengervan",
    "openscad_code": "// Realistic Passenger Van - Medium Complexity (3D printable)\n// Dimensions: ~80mm long, ~34mm wide, ~30mm high\n\n$fn=32;\n\nmodule wheel(rim_d=4, tire_w=3, tire_d=8) {\n    // Tire\n    difference() {\n        cylinder(h=tire_w, d=tire_d+2, center=true);\n        cylinder(h=tire_w+0.2, d=rim_d-0.5, center=true);\n    }\n    // Rim\n    color(\"silver\")\n    cylinder(h=tire_w+0.1, d=rim_d, center=true);\n}\n\nmodule side_mirror() {\n    mirror([0,1,0])\n    rotate([0,30,0])\n    union() {\n        // Stem\n        cylinder(h=6, d=1, center=true);\n        translate([0,0,3])\n        // Mirror\n        sphere(d=2.5);\n    }\n}\n\nmodule window() {\n    color(\"lightblue\", 0.5)\n    cube([1, 0.1, 2.5], center=true);\n}\n\nmodule body() {\n    // Lower body\n    cube([70, 30, 12], center=true);\n    \n    // Upper body (cab)\n    translate([0,0,12])\n    cube([70, 28, 8], center=true);\n    \n    // Roof\n    translate([0,0,20])\n    cube([65, 26, 2], center=true);\n    \n    // Front slope\n    translate([30,0,12])\n    rotate([0,-15,0])\n    cube([10, 26, 8], center=true);\n    \n    // Windshield\n    color(\"lightblue\", 0.5)\n    translate([29,0,16])\n    rotate([0,-15,0])\n    cube([10, 24, 0.5], center=true);\n    \n    // Rear window\n    color(\"lightblue\", 0.5)\n    translate([-29,0,16])\n    rotate([0,15,0])\n    cube([10, 24, 0.5], center=true);\n}\n\nmodule doors() {\n    // Side windows (5 panels)\n    for(i=[-20:-10:-60]) {\n        translate([i, 15, 18])\n        window();\n        translate([i, -15, 18])\n        window();\n    }\n    \n    // Door lines\n    translate([0, 15.5, 12])\n    cube([70, 0.5, 8], center=true);\n    translate([0, -15.5, 12])\n    cube([70, 0.5, 8], center=true);\n    \n    // Front door\n    translate([15, 15.5, 12])\n    cube([20, 0.5, 8], center=true);\n}\n\nmodule bumpers() {\n    // Front bumper\n    translate([35,0,3])\n    cube([2, 26, 3], center=true);\n    \n    // Rear bumper\n    translate([-35,0,3])\n    cube([2, 26, 3], center=true);\n}\n\nmodule lights() {\n    // Headlights\n    translate([35, 8, 7])\n    color(\"yellow\")\n    sphere(d=3);\n    translate([35, -8, 7])\n    color(\"yellow\")\n    sphere(d=3);\n    \n    // Taillights\n    translate([-35, 8, 7])\n    color(\"red\")\n    sphere(d=3);\n    translate([-35, -8, 7])\n    color(\"red\")\n    sphere(d=3);\n}\n\nmodule undercarriage() {\n    // Floor\n    translate([0,0,-2])\n    cube([68, 28, 2], center=true);\n    \n    // Axles\n    translate([15,0,-1.5])\n    cube([30, 2, 1], center=true);\n    translate([-15,0,-1.5])\n    cube([30, 2, 1], center=true);\n}\n\n// Main assembly\nunion() {\n    // Wheels (4)\n    for(x=[15,-15]) {\n        for(y=[10,-10]) {\n            translate([x, y, -2])\n            rotate([90,0,0])\n            wheel();\n        }\n    }\n    \n    // Body\n    body();\n    \n    // Doors and windows\n    doors();\n    \n    // Bumpers\n    bumpers();\n    \n    // Lights\n    lights();\n    \n    // Side mirrors\n    translate([25, 15.5, 14])\n    side_mirror();\n    translate([25, -15.5, 14])\n    mirror([0,1,0])\n    side_mirror();\n    \n    // Undercarriage\n    undercarriage();\n}",
    "renders": true
  },
  {
    "vehicle": "shuttle",
    "openscad_code": "// Space Shuttle with external tank and solid rocket boosters\n// Designed for 3D printing, no supports needed\n\n$fn = 32; // Resolution for curved surfaces\n\n// Main assembly\nmodule shuttle_assembly() {\n    union() {\n        // Orbiter\n        orbiter();\n        \n        // External Tank\n        translate([0, 0, -15]) external_tank();\n        \n        // Solid Rocket Boosters\n        translate([-12, 0, -10]) srb();\n        translate([12, 0, -10]) srb();\n    }\n}\n\n// Orbiter module\nmodule orbiter() {\n    union() {\n        // Main fuselage\n        translate([0, 0, 5])\n            rotate([0, 0, 0])\n                hull() {\n                    // Nose cone\n                    translate([0, 0, 25])\n                        scale([1, 1, 1.5])\n                            sphere(5);\n                    \n                    // Main body\n                    translate([0, 0, 10])\n                        scale([1, 0.8, 1])\n                            cylinder(h=15, r1=6, r2=5);\n                    \n                    // Rear section\n                    translate([0, 0, -5])\n                        scale([1, 0.9, 1])\n                            cylinder(h=15, r1=5, r2=4);\n                }\n        \n        // Wings\n        difference() {\n            // Main wing\n            translate([0, 0, 8])\n                rotate([0, 0, 0])\n                    scale([1, 0.2, 1])\n                        cube([30, 2, 8], center=true);\n            \n            // Cutout for body\n            translate([0, 0, 8])\n                rotate([0, 0, 0])\n                    cylinder(h=3, r=6);\n        }\n        \n        // Vertical stabilizer\n        translate([0, -5, 12])\n            rotate([0, 0, 0])\n                scale([0.2, 1, 1])\n                    cube([2, 10, 8], center=true);\n        \n        // OMS pods (Orbital Maneuvering System)\n        translate([-8, 0, 10])\n            rotate([0, 30, 0])\n                cylinder(h=5, r=1.5);\n        translate([8, 0, 10])\n            rotate([0, -30, 0])\n                cylinder(h=5, r=1.5);\n    }\n}\n\n// External tank module\nmodule external_tank() {\n    difference() {\n        // Main tank body\n        hull() {\n            cylinder(h=30, r=5);\n            translate([0, 0, -2])\n                sphere(5);\n            translate([0, 0, 32])\n                sphere(5);\n        }\n        \n        // Liquid oxygen tank (top)\n        translate([0, 0, 20])\n            cylinder(h=12, r=4.5);\n        \n        // Liquid hydrogen tank (bottom)\n        translate([0, 0, 5])\n            cylinder(h=15, r=4.5);\n    }\n}\n\n// Solid Rocket Booster module\nmodule srb() {\n    union() {\n        // Main booster body\n        cylinder(h=28, r=3);\n        \n        // Nose cone\n        translate([0, 0, 29])\n            cone();\n        \n        // Nozzle\n        translate([0, 0, -3])\n            cylinder(h=4, r1=3, r2=2);\n        \n        // Attach struts\n        for(i = [1:3:25]) {\n            translate([0, 0, i])\n                rotate([0, 90, 0])\n                    cylinder(h=12, r=0.5);\n        }\n    }\n}\n\n// Helper module for nose cone\nmodule cone() {\n    cylinder(h=4, r1=3, r2=0);\n}\n\n// Render the complete shuttle\nshuttle_assembly();",
    "renders": true
  },
  {
    "vehicle": "chariot",
    "openscad_code": "// Chariot - Realistic Style, Medium Complexity\n// Designed for 3D printing with no overhangs\n\n// Parameters\nwheel_diameter = 20;\nwheel_width = 4;\naxle_length = 45;\nbody_length = 35;\nbody_width = 25;\nbody_height = 8;\nyoke_length = 30;\n\n// Wheel module with spokes\nmodule wheel() {\n    difference() {\n        // Outer tire\n        cylinder(h=wheel_width, d=wheel_diameter, $fn=32);\n        \n        // Inner hub hole\n        cylinder(h=wheel_width+1, d=4, $fn=16);\n        \n        // Spokes - cutouts\n        for(i=[0:3]) {\n            rotate([0,0,i*90])\n                translate([wheel_diameter/4, -wheel_width/2, 0])\n                    cube([wheel_diameter/2, wheel_width+1, wheel_width+1]);\n        }\n    }\n    \n    // Hub\n    translate([0, -wheel_width/2-1, 0])\n        cylinder(h=wheel_width+2, d=8, $fn=16);\n}\n\n// Axle assembly\nmodule axle() {\n    // Main axle rod\n    rotate([90,0,0])\n        cylinder(h=axle_length, d=4, $fn=16);\n    \n    // Wheel supports\n    translate([-axle_length/2+wheel_width/2, 0, 0])\n        wheel();\n    translate([axle_length/2-wheel_width/2, 0, 0])\n        wheel();\n}\n\n// Chariot body floor\nmodule body() {\n    // Main floor\n    translate([0, 0, wheel_diameter/2+2])\n        cube([body_length, body_width, body_height], center=true);\n    \n    // Side walls\n    translate([0, body_width/2-1, wheel_diameter/2+2+body_height/2])\n        cube([body_length, 2, body_height], center=true);\n    translate([0, -body_width/2+1, wheel_diameter/2+2+body_height/2])\n        cube([body_length, 2, body_height], center=true);\n    \n    // Front wall\n    translate([body_length/2-1, 0, wheel_diameter/2+2+body_height/2])\n        cube([2, body_width-4, body_height], center=true);\n    \n    // Back wall\n    translate([-body_length/2+1, 0, wheel_diameter/2+2+body_height/2])\n        cube([2, body_width-4, body_height], center=true);\n}\n\n// Yoke assembly\nmodule yoke() {\n    // Main yoke pole\n    translate([body_length/2+yoke_length/2, 0, wheel_diameter/2+2])\n        rotate([0,90,0])\n            cylinder(h=yoke_length, d=6, $fn=8);\n    \n    // Yoke crossbar\n    translate([body_length/2+yoke_length-5, 0, wheel_diameter/2+8])\n        rotate([90,0,0])\n            cylinder(h=15, d=3, $fn=8);\n}\n\n// Main assembly\nunion() {\n    // Wheels and axle at bottom\n    axle();\n    \n    // Chariot body above wheels\n    body();\n    \n    // Yoke extending forward\n    yoke();\n}",
    "renders": true
  },
  {
    "vehicle": "sprint",
    "openscad_code": "// Sprint (Track & Field) – OpenSCAD model\n// Overall length ≈ 90 mm, 3D-printable without supports\n\n// Track lane width (scaled for realism)\nlane_w       = 9.5;\nlane_mark_w  = 1;\nlane_len     = 90;\nnum_lanes    = 4;\n\n// Sprinter body proportions\nbody_h       = 18;\nbody_w       = 5;\nhead_r       = 2.5;\narm_len      = 8;\nleg_len      = 11;\nfoot_len     = 4;\nfoot_w       = 2;\n\n// Helper: one lane strip\nmodule lane_strip() {\n    translate([0, -lane_len/2, 0])\n        cube([lane_w, lane_len, 0.5], center=false);\n}\n\n// Helper: lane marking line\nmodule lane_mark() {\n    translate([0, -lane_len/2, 0.5])\n        cube([lane_mark_w, lane_len, 0.2], center=false);\n}\n\n// Build the whole track surface\nmodule track() {\n    difference() {\n        union() {\n            for (i=[0:num_lanes-1])\n                translate([i*(lane_w+lane_mark_w), 0, 0])\n                    lane_strip();\n        }\n        // white lane dividers\n        for (i=[0:num_lanes])\n            translate([i*(lane_w+lane_mark_w) - lane_mark_w/2, 0, 0])\n                lane_mark();\n    }\n}\n\n// Sprinter torso\nmodule torso() {\n    cube([body_w, body_w, body_h], center=true);\n}\n\n// Sprinter head\nmodule head() {\n    translate([0, 0, body_h/2 + head_r])\n        sphere(r=head_r);\n}\n\n// Sprinter arm\nmodule arm(side=1) {   // side 1 for right arm, -1 for left\n    translate([side*body_w/2, 0, body_h/2 - 3])\n        rotate([0, -45, 0])\n            translate([arm_len/2, 0, 0])\n                cube([arm_len, 1.5, 1.5], center=true);\n}\n\n// Sprinter leg\nmodule leg(side=1) {\n    translate([side*body_w/4, 0, -body_h/2 - leg_len/2 + 1])\n        rotate([0, 30, 0])\n            cube([1.8, 1.8, leg_len], center=true);\n}\n\n// Sprinter foot\nmodule foot(side=1) {\n    translate([side*body_w/4 + foot_len/2, 0, -body_h/2 - leg_len - foot_len/2 + 1])\n        rotate([0, 30, 0])\n            cube([foot_len, foot_w, 1], center=true);\n}\n\n// Complete sprinter in running pose\nmodule sprinter() {\n    union() {\n        torso();\n        head();\n        arm(1);   // right arm forward\n        arm(-1);  // left arm back\n        leg(1);   // right leg back\n        leg(-1);  // left leg forward\n        foot(1);\n        foot(-1);\n    }\n}\n\n// Final assembly\ntrack();\n\n// Place sprinter on lane 2\ntranslate([lane_w + lane_mark_w + lane_w/2, lane_len/2 - 20, 0.5 + body_h/2])\n    rotate([0, 0, -5])\n        sprinter();",
    "renders": true
  },
  {
    "vehicle": "dash",
    "openscad_code": "// Realistic 3D printable dash (en-dash) character\n// Wall thickness 1.2 mm, height 5 mm, length 60 mm, width 25 mm\n\nmodule dash_body() {\n    // Main dash bar with rounded ends\n    difference() {\n        // Outer rounded bar\n        hull() {\n            translate([-29, 0, 0]) cylinder(h = 5, d = 25, $fn = 32);\n            translate([29, 0, 0]) cylinder(h = 5, d = 25, $fn = 32);\n        }\n        \n        // Hollow interior for material savings\n        translate([0, 0, -0.1]) {\n            hull() {\n                translate([-27.4, 0, 0]) cylinder(h = 5.2, d = 22.6, $fn = 32);\n                translate([27.4, 0, 0]) cylinder(h = 5.2, d = 22.6, $fn = 32);\n            }\n        }\n    }\n}\n\nmodule end_caps() {\n    // Rounded end caps for smooth finish\n    for (x = [-29, 29]) {\n        translate([x, 0, 2.5]) sphere(d = 25, $fn = 32);\n    }\n}\n\nmodule surface_detail() {\n    // Subtle surface ridges for grip and realism\n    difference() {\n        union() {\n            // Main body union\n            dash_body();\n            end_caps();\n        }\n        \n        // Small decorative grooves\n        for (i = [-2:1:2]) {\n            translate([i * 10, 0, 2.5]) {\n                rotate([90, 0, 0]) cylinder(h = 26, d = 1.5, $fn = 32);\n            }\n        }\n    }\n    \n    // Tiny alignment dots\n    for (i = [-1:0.5:1]) {\n        translate([i * 15, 0, 5]) sphere(d = 2, $fn = 16);\n    }\n}\n\n// Main assembly\nsurface_detail();",
    "renders": true
  },
  {
    "vehicle": "bolt",
    "openscad_code": "// Realistic bolt – medium complexity\n// Approx. 80 mm long, M12 ISO-4014 style\n\n$fn = 72;               // Smooth curves for 3-D printing\nthread_pitch = 1.75;    // M12 standard\nbolt_d  = 12;           // Nominal diameter\nhead_d  = bolt_d * 2;   // Hex head across flats\nhead_h  = 8;\nshaft_l = 60;\nthread_l = 25;\nbolt_l  = shaft_l + thread_l;\n\nmodule hex_head(h) {\n    // Regular hexagon via cylinder with 6 sides\n    cylinder(h = h, d = head_d, $fn = 6);\n}\n\nmodule smooth_shaft() {\n    // Main cylindrical shaft without threads\n    cylinder(h = shaft_l, d = bolt_d);\n}\n\nmodule thread_turn(z_start, turns) {\n    // One single helical ridge wrapped around cylinder\n    // Extruded triangular profile\n    for (i = [0:1:turns * 360]) {\n        translate([0, 0, z_start + i * thread_pitch / 360])\n            rotate([0, 0, i])\n                translate([bolt_d / 2, 0, 0])\n                    rotate([90, 0, 0])\n                        // Triangular profile (60° metric)\n                        cylinder(h = thread_pitch * 1.25,\n                                 r1 = thread_pitch * 0.65,\n                                 r2 = 0,\n                                 $fn = 4);\n    }\n}\n\nmodule threads() {\n    // Create enough turns to cover thread_l\n    turns_needed = thread_l / thread_pitch;\n    thread_turn(shaft_l, turns_needed);\n}\n\nmodule bolt() {\n    union() {\n        // Head\n        translate([0, 0, bolt_l])\n            hex_head(head_h);\n\n        // Shaft\n        translate([0, 0, thread_l])\n            smooth_shaft();\n\n        // Threaded section\n        threads();\n    }\n}\n\n// Ensure bolt lies along Z for easy printing\nbolt();",
    "renders": true
  },
  {
    "vehicle": "flash",
    "openscad_code": "// Realistic Flash Drive – OpenSCAD\n// External size: 60 mm × 22 mm × 10 mm\n// No steep overhangs; 1 mm wall thickness for 3D-printing\n\n$fn = 36;          // Smooth curves\n\n// Overall dimensions\nlength = 60;\nwidth  = 22;\nthickness = 10;\nwall = 1;\n\n// USB-A metal shell dimensions (realistic proportions)\nshell_l = 12;\nshell_w = 12.5;\nshell_t = 4.5;\nshell_wall = 0.7;\n\n// Key-ring hole\nhole_r = 2.5;\nhole_gap = 8;\n\n// Body shell (hollow box)\nmodule body() {\n    difference() {\n        rounded_box(length, width, thickness, 2);\n        translate([wall, wall, wall])\n            rounded_box(length - 2*wall, width - 2*wall, thickness - wall, 1);\n    }\n}\n\n// Rounded box helper (all edges rounded by r)\nmodule rounded_box(l, w, t, r) {\n    hull() {\n        for(x = [r, l - r], y = [r, w - r], z = [r, t - r])\n            translate([x, y, z]) sphere(r = r);\n    }\n}\n\n// USB-A metal tongue inside shell\nmodule usb_tongue() {\n    color(\"silver\")\n    translate([length - shell_l + 0.2, 0, -shell_t/2])\n    cube([6.8, 0.7, 1.8], center = true);\n}\n\n// USB-A metal shell\nmodule usb_shell() {\n    color(\"silver\")\n    difference() {\n        // outer shell\n        translate([length - shell_l, 0, 0])\n            cube([shell_l, shell_w, shell_t], center = true);\n\n        // inner cavity\n        translate([length - shell_l + shell_wall, 0, 0])\n            cube([shell_l - shell_wall, shell_w - 2*shell_wall, shell_t - 2*shell_wall], center = true);\n\n        // taper front edge\n        for(i = [0:1])\n            mirror([i,0,0])\n                translate([length - shell_l - 0.01, 0, 0])\n                    rotate([0,90,0])\n                        cylinder(h = shell_w + 1, r = shell_t/2, center = true);\n    }\n}\n\n// Key-ring loop\nmodule key_loop() {\n    translate([0, 0, 0])\n    rotate([90,0,0])\n    difference() {\n        cylinder(h = width, r = hole_r + wall, center = true);\n        cylinder(h = width + 1, r = hole_r, center = true);\n    }\n}\n\n// Grip texture – recessed grooves\nmodule grip() {\n    n = 12;\n    w_g = 0.5;\n    d_g = 0.4;\n    for(i = [0:n-1]) {\n        translate([length - shell_l - 5 - i*3.5, -width/2, -thickness/2 + d_g/2])\n            cube([w_g, width, d_g]);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    usb_shell();\n    usb_tongue();\n    translate([-length/2 + hole_gap, 0, 0]) key_loop();\n    grip();\n}",
    "renders": true
  },
  {
    "vehicle": "swift",
    "openscad_code": "// Swift (bird) - Realistic Medium Complexity\n// Wings folded as if perched, printable without support\n\n$fa = 2;\n$fs = 0.5;\n\nmodule swift() {\n    // Main body\n    difference() {\n        union() {\n            // Torso - elongated sphere\n            scale([1.2, 0.8, 1])\n                sphere(12);\n            \n            // Tail\n            translate([0, -20, 0])\n                scale([1, 3, 0.2])\n                    sphere(8);\n        }\n        \n        // Neck cavity\n        translate([0, 8, 8])\n            rotate([90, 0, 0])\n                cylinder(h=10, r1=5, r2=4);\n    }\n    \n    // Head\n    translate([0, 12, 12])\n        rotate([30, 0, 0])\n            scale([0.8, 0.8, 1.1])\n                sphere(8);\n    \n    // Beak\n    translate([0, 18, 15])\n        rotate([30, 0, 0])\n            cylinder(h=8, r1=3, r2=1);\n    \n    // Eyes\n    for(x = [-3, 3]) {\n        translate([x, 13, 15])\n            sphere(1.5);\n    }\n    \n    // Wings - folded against body\n    module wing() {\n        difference() {\n            // Main wing shape\n            translate([0, -5, 0])\n                scale([1, 2.5, 0.2])\n                    sphere(10);\n            \n            // Wing tip\n            translate([0, -18, 0])\n                rotate([0, 0, 20])\n                    scale([0.3, 1, 1])\n                        sphere(8);\n        }\n        \n        // Primary feathers\n        for(i = [0:3]) {\n            translate([-2 + i*1.5, -15 - i*2, 0])\n                rotate([0, 0, i*5])\n                    scale([0.2, 0.8, 0.05])\n                        sphere(4);\n        }\n    }\n    \n    // Left wing\n    translate([-10, 0, 5])\n        rotate([0, 0, -10])\n            wing();\n    \n    // Right wing\n    translate([10, 0, 5])\n        rotate([0, 0, 10])\n            mirror([1, 0, 0])\n                wing();\n    \n    // Tail feathers\n    for(i = [-2:2]) {\n        translate([i*4, -25, 0])\n            rotate([0, 0, i*5])\n                scale([0.3, 1.5, 0.05])\n                    sphere(6);\n    }\n    \n    // Feet\n    module foot() {\n        // Leg\n        cylinder(h=5, r=1.5);\n        \n        // Toes\n        for(angle = [-30, 0, 30]) {\n            translate([0, 0, 5])\n                rotate([0, angle, 0])\n                    cylinder(h=3, r1=1, r2=0.5);\n        }\n    }\n    \n    translate([-4, 0, -12])\n        foot();\n    \n    translate([4, 0, -12])\n        foot();\n}\n\n// Main assembly\nswift();",
    "renders": true
  },
  {
    "vehicle": "raptor",
    "openscad_code": "// Velociraptor - Medium complexity 3D printable model\n// Designed for 3D printing with minimal overhangs and support\n\n// Scale factor for easy sizing\nscale_factor = 1;\n\n// Main body\nmodule body() {\n    // Torso - main body section\n    translate([0, 0, 15])\n    scale([1.2, 0.6, 0.8])\n    sphere(10);\n    \n    // Belly\n    translate([0, -5, 8])\n    scale([1, 0.8, 0.4])\n    sphere(8);\n}\n\n// Head with snout\nmodule head() {\n    union() {\n        // Main head\n        translate([-15, 0, 22])\n        scale([1.2, 0.8, 0.9])\n        sphere(8);\n        \n        // Snout\n        translate([-25, 0, 22])\n        scale([1.5, 0.4, 0.5])\n        sphere(5);\n        \n        // Eye sockets\n        difference() {\n            translate([-18, 0, 25])\n            sphere(2);\n            translate([-19, 1.5, 26])\n            sphere(1);\n        }\n        mirror([0,1,0]) {\n            difference() {\n                translate([-18, 0, 25])\n                sphere(2);\n                translate([-19, 1.5, 26])\n                sphere(1);\n            }\n        }\n    }\n}\n\n// Tail with segments\nmodule tail() {\n    for(i = [0:9]) {\n        hull() {\n            translate([10 + i*3, 0, 15 - i*0.5])\n            scale([0.9 - i*0.07, 0.9 - i*0.07, 0.9 - i*0.07])\n            sphere(5);\n            \n            translate([12 + i*3, 0, 15 - i*0.5])\n            scale([0.85 - i*0.07, 0.85 - i*0.07, 0.85 - i*0.07])\n            sphere(5);\n        }\n    }\n}\n\n// Leg module\nmodule leg(side) {\n    // Thigh\n    translate([0, side*5, 15])\n    rotate([0, 0, side*10])\n    cylinder(h=12, r1=3, r2=2.5, center=true);\n    \n    // Shin\n    translate([0, side*6, 7])\n    rotate([0, 0, side*15])\n    cylinder(h=10, r1=2.5, r2=2, center=true);\n    \n    // Foot\n    translate([2, side*7, 0])\n    union() {\n        // Main foot\n        cube([8, 3, 2], center=true);\n        \n        // Claws\n        for(j = [-1, 0, 1]) {\n            translate([6, j*0.8, -1])\n            rotate([0, -30, 0])\n            cylinder(h=3, r1=0.5, r2=0, center=true);\n        }\n    }\n}\n\n// Arm module\nmodule arm(side) {\n    // Upper arm\n    translate([-10, side*8, 20])\n    rotate([0, 0, -side*30])\n    cylinder(h=8, r1=2, r2=1.5, center=true);\n    \n    // Lower arm\n    translate([-15, side*10, 20])\n    rotate([0, 0, -side*30])\n    cylinder(h=6, r1=1.5, r2=1, center=true);\n    \n    // Hand with claws\n    translate([-19, side*12, 20])\n    union() {\n        cube([3, 1.5, 1], center=true);\n        \n        // Claws\n        for(k = [-1, 0, 1]) {\n            translate([-21, k*0.5, 20])\n            rotate([0, -45, 0])\n            cylinder(h=2.5, r1=0.4, r2=0, center=true);\n        }\n    }\n}\n\n// Neck connector\nmodule neck() {\n    hull() {\n        translate([-8, 0, 22])\n        sphere(4);\n        \n        translate([-12, 0, 22])\n        sphere(3);\n    }\n}\n\n// Spine ridge\nmodule spine_ridge() {\n    for(i = [-5:2:15]) {\n        translate([i, 0, 25])\n        rotate([0, 90, 0])\n        cylinder(h=0.5, r=1.5, center=true);\n    }\n}\n\n// Main assembly\nscale([scale_factor, scale_factor, scale_factor]) {\n    union() {\n        // Core body parts\n        body();\n        neck();\n        head();\n        tail();\n        \n        // Legs\n        leg(1);  // Right leg\n        leg(-1); // Left leg\n        \n        // Arms\n        arm(1);  // Right arm\n        arm(-1); // Left arm\n        \n        // Details\n        spine_ridge();\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "viper",
    "openscad_code": "// Viper model - medium complexity realistic style\n// Total length ~80mm, 3D-printable with no overhangs\n\n$fn = 32;\n\nmodule viper_head() {\n    // Main head block\n    difference() {\n        hull() {\n            // Snout\n            translate([-8, 0, 0])\n                scale([1.2, 0.8, 0.8])\n                sphere(d=15);\n            // Back of head\n            translate([5, 0, 0])\n                scale([1, 1.2, 1.2])\n                sphere(d=18);\n        }\n        \n        // Eye sockets\n        for(side = [-1, 1]) {\n            translate([2, side*6, 3])\n                rotate([0, 10, 0])\n                sphere(d=6);\n        }\n        \n        // Nostrils\n        for(side = [-1, 1]) {\n            translate([-7, side*3, 0])\n                rotate([0, 45, 0])\n                cylinder(h=3, d1=2, d2=0);\n        }\n    }\n    \n    // Eyes\n    for(side = [-1, 1]) {\n        translate([2, side*6, 3])\n            color(\"yellow\")\n            sphere(d=4);\n        translate([3, side*6, 4])\n            color(\"black\")\n            sphere(d=2);\n    }\n    \n    // Fangs\n    for(side = [-1, 1]) {\n        translate([-6, side*3, -6])\n            rotate([0, 0, side*15])\n            cylinder(h=8, d1=2, d2=0);\n    }\n}\n\nmodule viper_body_segment(size, angle, height_offset) {\n    // Scaled cylinder for body segment\n    translate([0, 0, height_offset])\n        rotate([0, 0, angle])\n        scale([1, 0.6, 0.6])\n        cylinder(h=size[0], d1=size[1], d2=size[2], center=true);\n}\n\nmodule viper_body() {\n    // Create 15 segments with decreasing size\n    segments = 15;\n    for(i = [0:segments-1]) {\n        t = i / (segments - 1);\n        segment_length = 5 + (1-t)*3;\n        diameter = 12 - t*8;\n        angle = sin(i*15)*10;\n        height = -i*4;\n        \n        viper_body_segment(\n            [segment_length, diameter, diameter*0.9],\n            angle,\n            height\n        );\n    }\n    \n    // Tail tip\n    translate([0, 0, -segments*4])\n        cylinder(h=8, d1=4, d2=0);\n}\n\nmodule viper_pattern() {\n    // Diamond pattern along back\n    segments = 20;\n    for(i = [0:segments-1]) {\n        t = i / segments;\n        angle = sin(i*20)*15;\n        pos = -i*3 - 5;\n        \n        translate([0, 0, pos])\n            rotate([0, 0, angle])\n            scale([1, 0.3, 0.2])\n            cube([8, 12, 3], center=true);\n    }\n}\n\nmodule viper() {\n    union() {\n        // Head\n        translate([0, 0, 10])\n            viper_head();\n        \n        // Body\n        viper_body();\n        \n        // Pattern\n        color(\"darkgreen\")\n        viper_pattern();\n    }\n}\n\n// Main assembly\nrotate([0, 180, 0])\n    viper();",
    "renders": true
  },
  {
    "vehicle": "cobra",
    "openscad_code": "// Cobra Snake - Medium Complexity 3D Printable Model\n// Dimensions: ~80mm length, ~20mm height\n\n$fn = 24;  // Smooth curves for realistic appearance\n\n// Main body parameters\nbody_length = 80;\nbody_radius = 4;\nsegments = 20;\n\n// Head parameters\nhead_length = 15;\nhead_width = 8;\nhead_height = 6;\nhood_width = 25;\nhood_height = 2;\n\n// Tail parameters\ntail_length = 25;\ntail_radius = 2;\n\n// Eyes\neye_radius = 1.5;\neye_offset = 5;\n\n// Tongue\ntongue_length = 8;\ntongue_width = 0.5;\ntongue_thickness = 0.2;\n\nmodule cobra_body() {\n    // Create main body with tapering tail\n    for (i = [0:segments-1]) {\n        t = i / (segments - 1);\n        segment_length = body_length / segments;\n        \n        // Tapering radius from body to tail\n        current_radius = lerp(body_radius, tail_radius, t * t);\n        \n        // Slight upward curve for cobra pose\n        y_offset = sin(t * 180) * 5;\n        \n        translate([i * segment_length, y_offset, 0])\n            rotate([0, 0, sin(t * 180) * 10])\n            cylinder(h = segment_length + 0.5, r = current_radius, center = true);\n    }\n}\n\nmodule cobra_head() {\n    // Main head shape\n    translate([body_length, 0, 0])\n    union() {\n        // Head body\n        scale([1, 0.8, 0.6])\n        sphere(r = head_length / 2);\n        \n        // Snout extension\n        translate([head_length/2, 0, -head_height/4])\n        scale([1.2, 0.8, 0.5])\n        sphere(r = head_length / 3);\n        \n        // Hood\n        translate([-head_length/2, 0, 0])\n        scale([1.5, 1.8, 0.3])\n        sphere(r = hood_width / 2);\n        \n        // Eyes\n        for (side = [-1, 1]) {\n            translate([eye_offset, side * head_width/3, head_height/2])\n            rotate([0, 90, 0])\n            cylinder(h = eye_radius * 2, r = eye_radius, center = true);\n        }\n        \n        // Tongue (split)\n        translate([head_length + 2, 0, -head_height/3])\n        union() {\n            for (side = [-1, 1]) {\n                translate([0, side * tongue_width, 0])\n                scale([1, 0.5, 1])\n                cube([tongue_length, tongue_width, tongue_thickness]);\n            }\n        }\n    }\n}\n\nmodule cobra_pattern() {\n    // Scale pattern on back\n    pattern_scale = 2.5;\n    pattern_height = 0.5;\n    \n    for (i = [0:segments-1]) {\n        if (i % 2 == 0) {\n            t = i / (segments - 1);\n            segment_length = body_length / segments;\n            y_offset = sin(t * 180) * 5;\n            \n            translate([i * segment_length + segment_length/2, y_offset, body_radius - pattern_height/2])\n            scale([1, 0.7, 1])\n            rotate([90, 0, 0])\n            cylinder(h = pattern_height, r1 = pattern_scale, r2 = 0, center = true);\n        }\n    }\n}\n\n// Helper function for linear interpolation\nfunction lerp(a, b, t) = a + (b - a) * t;\n\n// Main assembly\nunion() {\n    // Base body\n    cobra_body();\n    \n    // Head and features\n    cobra_head();\n    \n    // Scale pattern\n    cobra_pattern();\n    \n    // Underside support for printing\n    translate([body_length/2, 0, -body_radius - 1])\n    cube([body_length + 20, body_radius * 3, 2]);\n}",
    "renders": true
  },
  {
    "vehicle": "titan",
    "openscad_code": "// Titan model - realistic medium complexity\n// Total height ~75mm, printable without supports\n\n$fn = 32;\nwall = 1.2;\n\nmodule leg(height = 30, width = 8) {\n    // Upper leg\n    translate([0, 0, height/2])\n        cylinder(h = height/2, r1 = width/2, r2 = width/1.8);\n    \n    // Knee joint\n    translate([0, 0, height - 2])\n        sphere(r = width/1.8);\n    \n    // Lower leg\n    translate([0, 0, height + height/4 - 2])\n        cylinder(h = height/2, r1 = width/2.2, r2 = width/3);\n    \n    // Foot\n    translate([0, width/2, height + height/2 - 1])\n        cube([width*1.5, width*2, 4], center = true);\n}\n\nmodule arm(length = 25, width = 6) {\n    // Shoulder joint\n    translate([0, 0, 2])\n        sphere(r = width/1.5);\n    \n    // Upper arm\n    translate([0, 0, length/2 - 2])\n        cylinder(h = length/2 - 2, r1 = width/2, r2 = width/2.2);\n    \n    // Elbow joint\n    translate([0, 0, length - 8])\n        sphere(r = width/2.2);\n    \n    // Lower arm\n    translate([0, 0, length - 4])\n        cylinder(h = length/2, r1 = width/2.2, r2 = width/2.5);\n    \n    // Hand\n    translate([0, 0, length + 2])\n        cube([width*1.8, width*2.5, 3], center = true);\n}\n\nmodule torso() {\n    // Chest cavity\n    difference() {\n        translate([0, 0, 20])\n            cube([20, 15, 30], center = true);\n        translate([0, 0, 20])\n            cube([18 - wall*2, 13 - wall*2, 28 - wall*2], center = true);\n    }\n    \n    // Abdominal plates\n    for(i = [0:3]) {\n        translate([0, 0, 10 - i*4])\n            cube([22 - i*2, 17 - i*1.5, 2], center = true);\n    }\n    \n    // Back thrusters\n    difference() {\n        translate([0, -8, 25])\n            cube([12, 4, 8], center = true);\n        translate([0, -6, 25])\n            cube([10 - wall*2, 2, 6 - wall*2], center = true);\n    }\n    \n    // Head mount\n    translate([0, 0, 35])\n        cylinder(h = 5, r = 6);\n}\n\nmodule head() {\n    // Helmet base\n    difference() {\n        sphere(r = 8);\n        translate([0, 0, -4])\n            cube([16, 16, 8], center = true);\n    }\n    \n    // Face plate\n    difference() {\n        translate([0, 6, 0])\n            cube([10, 2, 12], center = true);\n        translate([0, 7, 0])\n            cube([8, 2, 10], center = true);\n    }\n    \n    // Optics\n    for(x = [-3, 3]) {\n        translate([x, 6.5, 2])\n            cylinder(h = 2, r = 1.5);\n    }\n    \n    // Vents\n    for(y = [-4, 0, 4]) {\n        translate([0, 2, y])\n            cylinder(h = 1.5, r = 0.8);\n    }\n}\n\nmodule shoulder_pauldron(side) {\n    mirror([side, 0, 0])\n    translate([12, 0, 30])\n    rotate([0, 20, 0])\n    difference() {\n        cube([8, 12, 6], center = true);\n        cube([6, 10, 4], center = true);\n    }\n}\n\n// Main assembly\nunion() {\n    // Torso\n    torso();\n    \n    // Head\n    translate([0, 0, 43])\n        head();\n    \n    // Arms\n    translate([-12, 0, 30])\n        rotate([0, 15, 0])\n            arm();\n    translate([12, 0, 30])\n        rotate([0, -15, 0])\n        mirror([1, 0, 0])\n            arm();\n    \n    // Legs\n    translate([-6, 0, 0])\n        leg();\n    translate([6, 0, 0])\n        mirror([1, 0, 0])\n            leg();\n    \n    // Shoulder armor\n    shoulder_pauldron(1);\n    shoulder_pauldron(-1);\n}",
    "renders": true
  },
  {
    "vehicle": "juggernaut",
    "openscad_code": "// Realistic Juggernaut - Medium Complexity\n// Dimensions: ~80mm long x 45mm wide x 30mm high\n\n// Main body\nmodule body() {\n  difference() {\n    // Main hull\n    hull() {\n      translate([-30, -20, 0]) cube([60, 40, 15], center=true);\n      translate([-25, -15, 12]) cube([50, 30, 6], center=true);\n    }\n    \n    // Driver viewport\n    translate([25, 0, 8]) rotate([45, 0, 0]) cube([10, 5, 0.1], center=true);\n    \n    // Turret ring hole\n    translate([0, 0, 15]) cylinder(h=6, r=8, $fn=32);\n  }\n}\n\n// Turret\nmodule turret() {\n  difference() {\n    // Main turret\n    cylinder(h=8, r1=10, r2=12, $fn=32);\n    \n    // Commander hatch\n    translate([0, 0, 7]) cylinder(h=2, r=4, $fn=16);\n  }\n  \n  // Main gun\n  translate([0, 0, 8]) rotate([-5, 0, 0]) cylinder(h=20, r1=4, r2=3, $fn=16);\n  \n  // Machine gun\n  translate([5, 0, 9]) rotate([0, 0, 90]) cylinder(h=8, r=1, $fn=8);\n}\n\n// Suspension arms\nmodule suspension(side) {\n  translate([side * 25, 0, 5]) {\n    for(i = [-15:10:15]) {\n      translate([0, i, -1]) cube([6, 2, 2], center=true);\n    }\n  }\n}\n\n// Wheels\nmodule wheel(side) {\n  for(i = [-20:10:20]) {\n    translate([side * 30, i, 0]) {\n      difference() {\n        cylinder(h=8, r=5, center=true, $fn=16);\n        cylinder(h=10, r=3, center=true, $fn=16);\n      }\n    }\n  }\n}\n\n// Track links\nmodule track(side) {\n  for(i = [-20:2:20]) {\n    translate([side * 33, i, 0]) {\n      cube([6, 1.5, 8], center=true);\n    }\n  }\n}\n\n// Exhaust\nmodule exhaust() {\n  translate([-35, 15, 12]) {\n    rotate([90, 0, 0]) cylinder(h=10, r=2, $fn=12);\n  }\n}\n\n// Smoke launchers\nmodule smoke_launchers() {\n  for(i = [-1:1]) {\n    translate([12, i * 8, 15]) {\n      cylinder(h=3, r=1, $fn=8);\n    }\n  }\n}\n\n// Storage boxes\nmodule storage_boxes() {\n  // Rear stowage\n  translate([-30, 0, 8]) cube([10, 15, 5], center=true);\n  // Side stowage\n  translate([0, 20, 8]) cube([15, 8, 4], center=true);\n}\n\n// Assembly\nunion() {\n  body();\n  \n  translate([0, 0, 15]) turret();\n  \n  suspension(1);\n  suspension(-1);\n  \n  wheel(1);\n  wheel(-1);\n  \n  track(1);\n  track(-1);\n  \n  exhaust();\n  \n  smoke_launchers();\n  \n  storage_boxes();\n}",
    "renders": true
  },
  {
    "vehicle": "behemoth",
    "openscad_code": "// Behemoth – medium-complexity, realistic style, 3D-printable\n// Approx 80 mm long, 40 mm wide, 35 mm high\n// No unsupported overhangs >45°, 2 mm wall min\n\n// Main body\nmodule body() {\n    difference() {\n        // Central torso\n        hull() {\n            cube([40, 28, 20], center = true);\n            translate([0, 0, 8]) cube([38, 26, 16], center = true);\n        }\n        // Neck cavity\n        translate([0, 12, 8]) rotate([0, -25, 0])\n            cube([14, 14, 14], center = true);\n    }\n}\n\n// Head\nmodule head() {\n    translate([0, 30, 12]) rotate([0, -15, 0]) {\n        difference() {\n            hull() {\n                sphere(d = 20);\n                translate([0, 10, -2]) sphere(d = 16);\n            }\n            // Mouth recess\n            translate([0, 12, -6]) cube([12, 8, 6], center = true);\n            // Eye holes\n            for (x = [-6, 6]) translate([x, 6, 2]) sphere(d = 4);\n        }\n    }\n}\n\n// Leg\nmodule leg(side = 1) { // side = 1 for right, -1 for left\n    translate([side * 14, 0, -16]) {\n        rotate([0, side * 8, 0]) {\n            // Upper leg\n            cylinder(h = 18, d1 = 10, d2 = 8);\n            translate([0, 0, -18]) {\n                // Lower leg\n                cylinder(h = 18, d1 = 8, d2 = 6);\n                // Foot\n                translate([0, 0, -20])\n                    cube([12 * side, 18, 6], center = false);\n            }\n        }\n    }\n}\n\n// Tail\nmodule tail() {\n    translate([-22, 0, -2]) rotate([0, 0, 25])\n        for (i = [0:1:4])\n            translate([-i * 6 - 3, 0, 0])\n                scale(1 - i * 0.15)\n                    rotate([0, 0, -i * 3])\n                        sphere(d = 10 - i * 1.5);\n}\n\n// Dorsal plates\nmodule plates() {\n    for (i = [0:1:5])\n        translate([-15 + i * 7, 0, 12]) rotate([0, 0, i % 2 ? 5 : -5])\n            cube([8, 2, 4 + i * 1.5], center = true);\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    plates();\n    tail();\n    leg(1);\n    leg(-1);\n    mirror([1, 0, 0]) {\n        leg(1);\n        leg(-1);\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "colossus",
    "openscad_code": "// Colossus of Rhodes inspired statue - Medium complexity realistic style\n// Height: 80mm, printable with minimal supports\n\n// Overall scale factor\nscale_factor = 0.8;\n\n// Base pedestal\nmodule pedestal() {\n    difference() {\n        cube([30, 30, 8], center=true);\n        translate([0, 0, -1]) cube([26, 26, 10], center=true);\n    }\n}\n\n// Feet with sandals\nmodule foot(left_right = 1) {\n    translate([left_right * 6, 0, 4]) {\n        union() {\n            // Sandal sole\n            translate([0, 0, 0]) cube([10, 4, 2]);\n            // Foot\n            translate([0, 0, 2]) cube([8, 3.5, 4]);\n            // Toes\n            for(i = [-1.5:1:1.5]) {\n                translate([i * 2, 2, 2]) cube([1.5, 1, 1]);\n            }\n            // Ankle\n            translate([0, 0, 6]) cylinder(h=3, r=2, $fn=8);\n        }\n    }\n}\n\n// Leg structure\nmodule leg(left_right = 1) {\n    translate([left_right * 6, 0, 11]) {\n        union() {\n            // Lower leg\n            cylinder(h=15, r1=4, r2=3.5, $fn=12);\n            // Knee cap\n            translate([0, 0, 15]) sphere(r=3.5);\n            // Upper leg\n            translate([0, 0, 15]) cylinder(h=15, r1=3.5, r2=5, $fn=12);\n            // Connection to hip\n            translate([0, 0, 30]) sphere(r=5);\n        }\n    }\n}\n\n// Torso with musculature\nmodule torso() {\n    translate([0, 0, 35]) {\n        difference() {\n            // Main torso\n            scale([1, 0.7, 1.2]) sphere(r=12, $fn=24);\n            // Waist indentation\n            translate([0, -15, -5]) scale([1.2, 0.5, 0.8]) sphere(r=10, $fn=16);\n        }\n        // Chest details\n        translate([-3, 0, 8]) cube([6, 1, 3]);\n        translate([-5, 0, 5]) cube([10, 1, 2]);\n    }\n}\n\n// Arm with hand\nmodule arm(left_right = 1) {\n    translate([left_right * 12, 0, 45]) {\n        rotate([0, left_right * 15, 0]) {\n            union() {\n                // Upper arm\n                translate([0, 0, 0]) cylinder(h=15, r1=3.5, r2=3, $fn=10);\n                // Elbow\n                translate([0, 0, 15]) sphere(r=3);\n                // Forearm\n                translate([0, 0, 15]) cylinder(h=12, r1=3, r2=2.5, $fn=10);\n                // Hand\n                translate([0, 0, 27]) {\n                    // Palm\n                    cube([4, 1, 6], center=true);\n                    // Fingers\n                    for(i = [-1.5, 0, 1.5]) {\n                        translate([i, 1, 0]) cube([1, 1, 4], center=true);\n                    }\n                    // Thumb\n                    translate([2, 0, 1]) rotate([0, 0, 45]) cube([1, 1, 3]);\n                }\n            }\n        }\n    }\n}\n\n// Head with features\nmodule head() {\n    translate([0, 0, 55]) {\n        union() {\n            // Base head\n            scale([0.8, 0.8, 1]) sphere(r=8, $fn=24);\n            // Nose\n            translate([0, 7.5, 0]) scale([0.3, 0.5, 0.3]) sphere(r=3);\n            // Eyes\n            for(i = [-1, 1]) {\n                translate([i * 2.5, 6.5, 1]) sphere(r=1);\n            }\n            // Crown/headdress\n            translate([0, 0, 8]) cylinder(h=4, r1=8, r2=6, $fn=16);\n            // Hair details\n            for(i = [0:30:330]) {\n                rotate([0, 0, i]) translate([7, 0, 5]) cylinder(h=6, r1=0.5, r2=0.3);\n            }\n        }\n    }\n}\n\n// Assembly\nscale(scale_factor) {\n    pedestal();\n    foot(1);\n    foot(-1);\n    leg(1);\n    leg(-1);\n    torso();\n    arm(1);\n    arm(-1);\n    head();\n}",
    "renders": true
  },
  {
    "vehicle": "goliath",
    "openscad_code": "// Goliath figure - medium complexity realistic style\n// Total height ~70mm, designed for FDM printing\n\n// Main parameters\n$fn=32;\nscale_factor = 0.7;\n\n// Colors for preview\ncolor_body = [0.8,0.7,0.6];\ncolor_cloth = [0.5,0.3,0.2];\ncolor_metal = [0.6,0.6,0.6];\ncolor_skin = [0.9,0.8,0.7];\n\nmodule goliath() {\n    // Body\n    union() {\n        // Torso\n        color(color_body)\n        translate([0,0,35])\n        scale([1.2,0.8,1.5])\n        sphere(10);\n        \n        // Chest plate\n        color(color_metal)\n        translate([0,0,40])\n        difference() {\n            scale([1.4,1,1.6])\n            sphere(9);\n            translate([0,10,0])\n            scale([1.3,0.9,1.5])\n            sphere(9);\n        }\n        \n        // Head\n        color(color_skin)\n        translate([0,0,55])\n        scale([0.9,0.9,1.1])\n        sphere(8);\n        \n        // Jaw\n        translate([0,-6,50])\n        scale([0.7,0.4,0.5])\n        sphere(7);\n        \n        // Nose\n        translate([0,-7,55])\n        scale([0.2,0.2,0.3])\n        sphere(3);\n        \n        // Eyes\n        for(x=[-2.5,2.5]) {\n            translate([x,-7,57])\n            scale([0.3,0.2,0.2])\n            sphere(2);\n        }\n        \n        // Arms\n        for(side=[-1,1]) {\n            // Upper arm\n            color(color_skin)\n            translate([side*15,0,45])\n            rotate([0,0,side*20])\n            rotate([90,0,0])\n            cylinder(h=15,r=4);\n            \n            // Forearm\n            translate([side*18,0,32])\n            rotate([0,0,side*30])\n            rotate([90,0,0])\n            cylinder(h=12,r=3.5);\n            \n            // Fist\n            translate([side*22,0,24])\n            sphere(4);\n        }\n        \n        // Legs\n        for(side=[-1,1]) {\n            // Thigh\n            color(color_cloth)\n            translate([side*8,0,25])\n            rotate([0,0,side*10])\n            cylinder(h=20,r=5);\n            \n            // Shin\n            translate([side*9,0,10])\n            rotate([0,0,side*10])\n            cylinder(h=15,r=4.5);\n            \n            // Foot\n            translate([side*9,0,0])\n            scale([1.5,3,0.8])\n            sphere(3);\n        }\n        \n        // Belt\n        color(color_cloth)\n        translate([0,0,30])\n        scale([1.3,0.8,0.3])\n        sphere(10);\n        \n        // Belt buckle\n        color(color_metal)\n        translate([0,8,30])\n        cube([3,0.5,2], center=true);\n        \n        // Pauldrons\n        for(side=[-1,1]) {\n            color(color_metal)\n            translate([side*12,0,48])\n            rotate([0,0,side*30])\n            scale([1.2,0.8,0.3])\n            sphere(5);\n        }\n        \n        // Loincloth\n        color(color_cloth)\n        translate([0,7,20])\n        scale([0.8,0.1,1.2])\n        sphere(8);\n        \n        // Musculature details\n        color(color_skin)\n        for(i=[1:3]) {\n            translate([0,0,38-i*2])\n            scale([1.1-i*0.1,0.7,0.2])\n            sphere(10);\n        }\n    }\n}\n\n// Render the goliath\nscale([scale_factor,scale_factor,scale_factor])\ngoliath();",
    "renders": true
  },
  {
    "vehicle": "motorcycle",
    "openscad_code": "$fa=2;\n$fs=0.5;\n\nmodule wheel(rim_r=10, tire_w=3, tire_r=11, spokes=6){\n    // Tire\n    rotate_extrude()\n        translate([tire_r-tire_w/2, 0])\n            circle(d=tire_w);\n\n    // Rim\n    color(\"silver\")\n    rotate_extrude()\n        translate([rim_r-1, 0])\n            circle(d=2);\n\n    // Spokes\n    for(i=[0:spokes-1])\n        rotate([0,0,i*360/spokes])\n            color(\"gray\")\n            cube([rim_r-2, 0.8, 0.8], center=true);\n}\n\nmodule fork(height=15, width=2, offset=8){\n    // Upper fork tubes\n    color(\"silver\")\n    translate([offset,0,height/2])\n        rotate([90,0,0])\n            cylinder(h=height, d=width, center=true);\n    translate([-offset,0,height/2])\n        rotate([90,0,0])\n            cylinder(h=height, d=width, center=true);\n}\n\nmodule engine(){\n    color(\"darkgray\")\n    union(){\n        // Main block\n        translate([0,-5,8])\n            cube([12,10,8], center=true);\n\n        // Cylinders\n        translate([0,-5,12])\n            cube([6,4,4], center=true);\n        translate([0,-5,14])\n            cylinder(h=3, d=4.5);\n    }\n}\n\nmodule frame(){\n    color(\"black\")\n    union(){\n        // Main tube\n        translate([0,0,10])\n            rotate([0,90,0])\n                cylinder(h=35, d=3);\n\n        // Seat rail\n        rotate([0,-20,0])\n            translate([15,0,12])\n                rotate([0,90,0])\n                    cylinder(h=25, d=2);\n\n        // Rear arm\n        translate([-15,0,5])\n            rotate([0,-30,0])\n                cylinder(h=20, d=2);\n    }\n}\n\nmodule seat(){\n    color(\"brown\")\n    translate([15,0,15])\n        scale([1,0.7,0.3])\n            sphere(d=15);\n}\n\nmodule tank(){\n    color(\"red\")\n    translate([5,0,20])\n        scale([1,0.6,0.5])\n            sphere(d=14);\n}\n\nmodule exhaust(){\n    color(\"gray\")\n    translate([-10,-8,5])\n        rotate([0,20,0])\n            cylinder(h=20, d=2);\n}\n\n// Assembly\nmodule motorcycle(){\n    // Frame\n    frame();\n\n    // Front wheel and fork\n    translate([18,0,5])\n        wheel();\n    fork(height=15, width=2, offset=8);\n\n    // Rear wheel\n    translate([-18,0,5])\n        wheel();\n\n    // Engine\n    translate([0,0,4])\n        engine();\n\n    // Tank\n    tank();\n\n    // Seat\n    seat();\n\n    // Exhaust\n    exhaust();\n\n    // Handlebars\n    color(\"black\")\n    translate([15,0,20])\n        rotate([0,0,45])\n            cylinder(h=15, d=1);\n    translate([15,0,20])\n        rotate([0,0,-45])\n            cylinder(h=15, d=1);\n}\n\n// Scale to fit 3D printer bed\nscale(0.4)\n    motorcycle();",
    "renders": true
  },
  {
    "vehicle": "moped",
    "openscad_code": "// Realistic medium-complexity moped for 3D printing\n// Overall size ~80 mm long\n\n$fn = 32;\nwheel_r = 12;\nwheel_w = 4;\nbody_h = 20;\nbody_l = 35;\nbody_w = 15;\nmirror_th = 0.8;\n\nmodule wheel(tyre_th = 1.5) {\n    difference() {\n        cylinder(r = wheel_r, h = wheel_w, center = true);\n        cylinder(r = wheel_r - tyre_th, h = wheel_w + 0.1, center = true);\n    }\n    cylinder(r1 = wheel_r - tyre_th, r2 = 3, h = 2, center = true);\n}\n\nmodule fork() {\n    for (side = [-1, 1])\n        translate([side * 2, 0, 0])\n            cylinder(r = 1, h = 18);\n}\n\nmodule handlebar() {\n    translate([0, 0, 18])\n        rotate([0, 90, 0])\n            cylinder(r = 1.2, h = 22);\n    translate([0, 11, 18])\n        rotate([0, 90, 0])\n            cylinder(r1 = 1.2, r2 = 1.2, h = 6);\n    translate([0, -11, 18])\n        rotate([0, 90, 0])\n            cylinder(r1 = 1.2, r2 = 1.2, h = 6);\n}\n\nmodule mirror() {\n    translate([0, 7, 0])\n        rotate([0, 30, 0])\n            cube([mirror_th, 8, 3], center = true);\n    translate([0, 11, 0])\n        sphere(r = 2);\n}\n\nmodule front_assembly() {\n    wheel();\n    translate([0, 0, wheel_r])\n        fork();\n    handlebar();\n    translate([5, 11, 25])\n        mirror();\n    translate([-5, 11, 25])\n        mirror();\n}\n\nmodule rear_assembly() {\n    translate([0, body_l - 10, 0])\n        wheel();\n}\n\nmodule body() {\n    hull() {\n        translate([0, -5, wheel_r])\n            cube([body_w, body_l, body_h], center = true);\n        translate([0, body_l - 10, wheel_r])\n            cube([body_w * 0.8, 10, body_h * 0.8], center = true);\n    }\n    // seat\n    translate([0, 10, wheel_r + body_h / 2 + 2])\n        cube([body_w * 0.7, 15, 4], center = true);\n    // headlight\n    translate([0, -body_l / 2 - 1, wheel_r + body_h / 2])\n        sphere(r = 3);\n    // engine cover\n    translate([0, 0, wheel_r])\n        cube([body_w * 0.6, 10, 6], center = true);\n}\n\nmodule exhaust() {\n    translate([body_w / 2 + 2, body_l / 2, wheel_r - 3])\n        rotate([0, 90, 0])\n            cylinder(r = 1, h = 20);\n}\n\n// main assembly\ntranslate([0, 0, wheel_r])\n    union() {\n        body();\n        translate([0, -body_l / 2 + 5, 0])\n            front_assembly();\n        rear_assembly();\n        exhaust();\n    }",
    "renders": true
  },
  {
    "vehicle": "scooter",
    "openscad_code": "// Realistic 3D-printable scooter – medium complexity\n// Overall length ≈ 85 mm, height ≈ 45 mm, width ≈ 30 mm\n\n$fn=32;\n\n// ---------- parameters ----------\nwheel_d        = 20;\nwheel_w        = 4;\ndeck_l         = 55;   // along X\ndeck_w         = 25;   // along Y\ndeck_t         = 3;\nsteering_h     = 45;\nbar_w          = 22;\n\n// ---------- modules ----------\nmodule wheel() {\n    difference() {\n        cylinder(h=wheel_w, d=wheel_d, center=true);\n        translate([0, 0, -wheel_w/2-1])\n            cylinder(h=wheel_w+2, d=4, center=false); // axle hole\n    }\n}\n\nmodule fork() {\n    // two side plates\n    plate_h = 20;\n    plate_t = 3;\n    for(side=[-1,1])\n        translate([side*(deck_w/2 - plate_t/2), 0, plate_h/2])\n            cube([plate_t, 4, plate_h], center=true);\n    \n    // front arch\n    hull() {\n        translate([0, 2, plate_h])\n            sphere(d=6);\n        translate([0, -2, plate_h])\n            sphere(d=6);\n    }\n}\n\nmodule deck() {\n    difference() {\n        // main board\n        cube([deck_l, deck_w, deck_t], center=false);\n        // rear wheel cutouts\n        for(side=[-1,1])\n            translate([deck_l-12, side*(deck_w/2 - wheel_w/2 - 1), deck_t])\n                cube([wheel_d+2, wheel_w+2, deck_t+1]);\n    }\n    \n    // underside ribs for strength\n    rib_w = 3;\n    rib_h = 2;\n    for(x=[10:15:deck_l-20])\n        translate([x+rib_w/2, deck_w/2-rib_w/2, -rib_h])\n            cube([rib_w, rib_w, rib_h]);\n}\n\nmodule steering() {\n    // vertical post\n    translate([deck_l-15, 0, deck_t])\n        cylinder(h=steering_h, d=6, center=false);\n    \n    // T-handlebar\n    translate([deck_l-15, 0, deck_t+steering_h])\n        rotate([90,0,0])\n            cylinder(h=bar_w, d=5, center=true);\n}\n\n// ---------- assembly ----------\nunion() {\n    // rear wheels\n    for(side=[-1,1])\n        translate([deck_l-12, side*(deck_w/2 - wheel_w/2 - 1), deck_t/2])\n            rotate([90,0,0])\n                wheel();\n    \n    // front wheel\n    translate([deck_l-15, 0, deck_t/2])\n        rotate([90,0,0])\n            wheel();\n    \n    deck();\n    fork();\n    steering();\n}",
    "renders": true
  },
  {
    "vehicle": "bicycle",
    "openscad_code": "// Realistic 3D printable bicycle – medium complexity\n// Approx. 85 mm long, 45 mm tall, 20 mm wide\n\n// Frame wall thickness\nwall = 2;\n\n// Frame tubes module\nmodule tube(r,length) {\n    rotate([0,90,0])\n    cylinder(h=length, r=r, $fn=20);\n}\n\n// Wheel module\nmodule wheel(od, width) {\n    difference() {\n        // tire\n        cylinder(h=width, r=od/2, $fn=50);\n        // rim cavity\n        translate([0,0,wall])\n        cylinder(h=width-wall*2, r=od/2-2, $fn=40);\n        // hub hole\n        translate([0,0,-1])\n        cylinder(h=width+2, r=2.5, $fn=16);\n    }\n    // spokes (simple X)\n    for(a=[0,90])\n    rotate([0,0,a])\n    cube([od-4, 1, width], center=true);\n}\n\n// Crankset module\nmodule crank() {\n    difference() {\n        union() {\n            // chainring\n            cylinder(h=wall, r=10, $fn=36);\n            // arms\n            for(a=[0,120,240])\n            rotate([0,0,a])\n            translate([7,0,0])\n            cube([14, 3, wall], center=true);\n        }\n        // cutouts\n        cylinder(h=wall+1, r=8.5, $fn=36);\n        for(a=[0,120,240])\n        rotate([0,0,a])\n        translate([7,0,-1])\n        cube([12, 2.5, wall+2], center=true);\n    }\n}\n\n// Frame\nmodule frame() {\n    union() {\n        // top tube\n        tube(2.5, 35);\n        // down tube\n        rotate([0,0,30])\n        translate([10,-6,0])\n        tube(2.5, 40);\n        // seat tube\n        rotate([0,0,-15])\n        translate([-12,0,0])\n        tube(2.5, 28);\n        // seat stays\n        translate([0,-20,0])\n        rotate([0,0,18])\n        tube(2, 30);\n        mirror([1,0,0])\n        translate([0,-20,0])\n        rotate([0,0,18])\n        tube(2, 30);\n        // chain stays\n        translate([0,-20,0])\n        rotate([0,0,-10])\n        tube(2, 25);\n        mirror([1,0,0])\n        translate([0,-20,0])\n        rotate([0,0,-10])\n        tube(2, 25);\n        // head tube\n        translate([17,0,0])\n        rotate([0,90,0])\n        cylinder(h=8, r=3.5, $fn=20);\n        // bottom bracket shell\n        translate([0,-20,0])\n        rotate([0,90,0])\n        cylinder(h=8, r=4, $fn=20);\n    }\n}\n\n// Assemble bicycle\ncolor(\"silver\") frame();\ncolor(\"silver\") translate([0,-20,0]) rotate([0,90,0]) crank();\n\n// Wheels\ncolor(\"black\") translate([0,0,0]) rotate([0,90,0]) wheel(16, 4);\ncolor(\"black\") translate([0,-38,0]) rotate([0,90,0]) wheel(16, 4);\n\n// Seat\ncolor(\"black\") translate([-12,0,8]) rotate([0,90,0]) cylinder(h=12, r=1.5, $fn=12);\ncolor(\"black\") translate([-12,0,14]) rotate([0,0,0]) cube([12, 6, 2], center=true);\n\n// Handlebar\ncolor(\"black\") translate([17,0,12]) rotate([0,90,0]) cylinder(h=20, r=1.5, $fn=12);\ncolor(\"black\") translate([17,10,12]) rotate([0,0,90]) cylinder(h=16, r=1.5, $fn=12);\ncolor(\"black\") translate([17,-10,12]) rotate([0,0,90]) cylinder(h=16, r=1.5, $fn=12);\n\n// Pedals (simple blocks)\ncolor(\"gray\") translate([11,-20,0]) cube([6, 2, 3], center=true);\ncolor(\"gray\") translate([-11,-20,0]) cube([6, 2, 3], center=true);",
    "renders": true
  },
  {
    "vehicle": "bike",
    "openscad_code": "// Realistic style bike with medium complexity\n// Designed for 3D printing with reasonable wall thickness\n\n// Frame dimensions\nframe_length = 80;\nframe_height = 45;\nseat_tube_angle = 15;\nhead_tube_angle = -15;\n\n// Wheel dimensions\nwheel_radius = 18;\nwheel_width = 4;\ntire_thickness = 2;\nspoke_count = 12;\n\n// Component dimensions\nhandlebar_width = 35;\nhandlebar_diameter = 2;\nseat_width = 15;\nseat_length = 25;\ncrank_length = 12;\npedal_size = 8;\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main bike module\nmodule bike() {\n    union() {\n        frame();\n        rear_wheel();\n        front_wheel();\n        handlebars();\n        seat();\n        crankset();\n    }\n}\n\n// Bike frame with triangular structure\nmodule frame() {\n    // Seat tube\n    translate([0, 0, 0])\n        rotate([0, seat_tube_angle, 0])\n        cylinder(h=frame_height, r1=wall*1.5, r2=wall*1.5, $fn=8);\n    \n    // Down tube\n    translate([0, 0, 0])\n        rotate([0, 0, 0])\n        cylinder(h=frame_length*0.9, r1=wall*1.5, r2=wall*1.5, $fn=8);\n    \n    // Top tube\n    translate([0, 0, frame_height*0.7])\n        rotate([0, 0, 0])\n        cube([frame_length*0.55, wall*3, wall*3], center=true);\n    \n    // Head tube\n    translate([frame_length*0.6, 0, frame_height*0.7])\n        rotate([0, head_tube_angle, 0])\n        cylinder(h=wall*8, r1=wall*2, r2=wall*2, $fn=8);\n    \n    // Seat stays\n    translate([frame_length*0.15, 0, frame_height*0.2])\n        rotate([0, 0, 30])\n        cylinder(h=frame_length*0.4, r1=wall, r2=wall, $fn=6);\n    \n    // Chain stays\n    translate([0, 0, frame_height*0.1])\n        rotate([0, 0, -15])\n        cylinder(h=frame_length*0.35, r1=wall, r2=wall, $fn=6);\n}\n\n// Wheel with spokes\nmodule wheel() {\n    difference() {\n        // Tire\n        color(\"black\")\n        difference() {\n            cylinder(h=wheel_width, r=wheel_radius, $fn=32);\n            cylinder(h=wheel_width+1, r=wheel_radius-tire_thickness, $fn=32);\n        }\n        \n        // Hub\n        translate([0, 0, -1])\n            cylinder(h=wheel_width+2, r=wall*2, $fn=16);\n    }\n    \n    // Spokes\n    for(i = [0:spoke_count-1]) {\n        rotate([0, 0, i*360/spoke_count])\n        translate([0, 0, wheel_width/2])\n        cube([wall, wheel_radius-wall*3, wall], center=true);\n    }\n}\n\n// Rear wheel\nmodule rear_wheel() {\n    translate([frame_length*0.1, 0, 0])\n    rotate([90, 0, 0])\n    wheel();\n}\n\n// Front wheel\nmodule front_wheel() {\n    translate([frame_length*0.75, 0, 0])\n    rotate([90, 0, 0])\n    wheel();\n}\n\n// Handlebars with stem\nmodule handlebars() {\n    // Stem\n    translate([frame_length*0.6, 0, frame_height*0.7])\n    rotate([90+head_tube_angle, 0, 0])\n    cylinder(h=wall*10, r=wall, $fn=8);\n    \n    // Handlebar\n    translate([frame_length*0.6, 0, frame_height*0.7+wall*10])\n    rotate([0, 0, 0])\n    cube([handlebar_width, handlebar_diameter, handlebar_diameter], center=true);\n}\n\n// Bike seat\nmodule seat() {\n    translate([frame_length*0.2, 0, frame_height*0.7])\n    rotate([0, seat_tube_angle, 0])\n    cube([seat_length, wall*3, seat_width], center=true);\n}\n\n// Crankset with pedals\nmodule crankset() {\n    // Chainring\n    translate([0, 0, wheel_width])\n    difference() {\n        cylinder(h=wall*2, r=wall*5, $fn=32);\n        cylinder(h=wall*3, r=wall*3, $fn=32);\n        for(i = [0:4]) {\n            rotate([0, 0, i*72])\n            cube([wall*3, wall*5, wall*3], center=true);\n        }\n    }\n    \n    // Crank arm\n    translate([0, 0, wheel_width+wall])\n    rotate([0, 0, 0])\n    cube([wall*2, crank_length, wall*2], center=true);\n    \n    // Pedal\n    translate([0, crank_length, wheel_width+wall])\n    rotate([0, 0, 0])\n    cube([pedal_size, wall*2, pedal_size/2], center=true);\n    \n    // Second crank arm and pedal\n    translate([0, 0, -wheel_width-wall])\n    rotate([0, 0, 180])\n    cube([wall*2, crank_length, wall*2], center=true);\n    \n    translate([0, -crank_length, -wheel_width-wall])\n    rotate([0, 0, 180])\n    cube([pedal_size, wall*2, pedal_size/2], center=true);\n}\n\n// Render the bike\nbike();",
    "renders": true
  },
  {
    "vehicle": "sportbike",
    "openscad_code": "// Sportbike - Medium Complexity Realistic Style\n// Designed for 3D printing at ~80mm length\n\n// Overall scale factor\nscale_factor = 0.8;\n\nmodule sportbike() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        union() {\n            // Main frame\n            frame();\n            \n            // Front fork and wheel\n            translate([0, 25, 10]) rotate([0, 0, 0]) front_assembly();\n            \n            // Rear swingarm and wheel\n            translate([-35, -25, 8]) rotate([0, 0, 0]) rear_assembly();\n            \n            // Engine block\n            engine();\n            \n            // Exhaust pipes\n            exhaust();\n            \n            // Seat\n            seat();\n            \n            // Fuel tank\n            tank();\n            \n            // Windscreen\n            windscreen();\n            \n            // Mirrors\n            mirrors();\n        }\n    }\n}\n\nmodule frame() {\n    // Main frame spars\n    color(\"gray\") {\n        // Top frame tube\n        translate([-20, 0, 20]) rotate([0, -15, 0]) \n            cylinder(h=50, r1=2, r2=2, $fn=16);\n        \n        // Bottom frame rails\n        translate([-25, 0, 8]) rotate([0, -10, 0]) \n            cylinder(h=45, r1=2, r2=2, $fn=16);\n        \n        // Vertical support\n        translate([-5, 0, 14]) rotate([0, 0, 0]) \n            cylinder(h=12, r1=2, r2=2, $fn=16);\n    }\n}\n\nmodule front_assembly() {\n    // Fork tubes\n    color(\"silver\") {\n        for(i=[-1, 1]) {\n            translate([i*3, 0, 0]) \n                cylinder(h=25, r1=1.5, r2=1.5, $fn=12);\n        }\n        \n        // Front wheel\n        translate([0, 0, -12]) rotate([90, 0, 0]) \n            wheel(8);\n    }\n}\n\nmodule rear_assembly() {\n    // Swingarm\n    color(\"gray\") {\n        for(i=[-1, 1]) {\n            translate([i*4, 0, 0]) rotate([0, 10, 0]) \n                cylinder(h=25, r1=1.5, r2=1.5, $fn=12);\n        }\n        \n        // Rear wheel\n        translate([0, 0, -10]) rotate([90, 0, 0]) \n            wheel(10);\n    }\n}\n\nmodule wheel(diameter) {\n    // Tire\n    color(\"black\") {\n        difference() {\n            cylinder(h=4, r=diameter/2, $fn=32);\n            cylinder(h=5, r=diameter/2 - 1.5, $fn=32);\n        }\n    }\n    \n    // Rim\n    color(\"silver\") {\n        difference() {\n            cylinder(h=3, r=diameter/2 - 1.5, $fn=32);\n            cylinder(h=4, r=diameter/2 - 2.5, $fn=32);\n        }\n    }\n    \n    // Spokes\n    color(\"silver\") {\n        for(i=[0:30:360]) {\n            rotate([0, 0, i]) \n                cube([diameter/2 - 3, 0.5, 3], center=true);\n        }\n    }\n}\n\nmodule engine() {\n    color(\"darkgray\") {\n        // Engine block\n        translate([-15, 0, 8]) \n            cube([20, 12, 8], center=true);\n        \n        // Cylinder head\n        translate([-5, 0, 14]) \n            cube([8, 10, 6], center=true);\n    }\n}\n\nmodule exhaust() {\n    color(\"silver\") {\n        // Headers\n        for(i=[-2, 0, 2]) {\n            translate([-20, i*2, 6]) rotate([0, -20, 0]) \n                cylinder(h=15, r=1, $fn=12);\n        }\n        \n        // Muffler\n        translate([-35, 0, 4]) rotate([0, -10, 0]) \n            cylinder(h=20, r1=2, r2=1.5, $fn=16);\n    }\n}\n\nmodule seat() {\n    color(\"black\") {\n        // Seat base\n        translate([-15, 0, 16]) \n            cube([25, 12, 3], center=true);\n        \n        // Seat hump\n        translate([-25, 0, 18]) \n            cube([10, 10, 4], center=true);\n    }\n}\n\nmodule tank() {\n    color(\"red\") {\n        // Main tank\n        translate([-5, 0, 22]) rotate([0, -10, 0]) \n            scale([1, 0.8, 0.6]) \n                sphere(r=8, $fn=32);\n        \n        // Tank cap\n        translate([0, 0, 28]) \n            cylinder(h=2, r=2, $fn=16);\n    }\n}\n\nmodule windscreen() {\n    color(\"lightblue\") {\n        // Screen\n        translate([8, 0, 25]) rotate([0, -30, 0]) \n            cube([12, 15, 1.5], center=true);\n    }\n}\n\nmodule mirrors() {\n    color(\"black\") {\n        // Mirror stalks\n        for(i=[-1, 1]) {\n            translate([5, i*12, 22]) rotate([0, 0, i*15]) \n                cylinder(h=8, r=0.5, $fn=8);\n            \n            // Mirror heads\n            translate([5, i*20, 22]) rotate([0, 0, 0]) \n                cube([4, 3, 2], center=true);\n        }\n    }\n}\n\n// Generate the bike\nsportbike();",
    "renders": true
  },
  {
    "vehicle": "dirtbike",
    "openscad_code": "// Dirtbike - Realistic Medium Complexity\n// Designed for 3D printing, no overhangs, 1.2mm wall thickness\n\n$fn = 32;\n\nmodule wheel(diameter, width) {\n    difference() {\n        cylinder(d=width, h=diameter*0.8, center=true);\n        cylinder(d=width-2.4, h=diameter*0.8+0.1, center=true);\n    }\n    translate([0, 0, diameter*0.4]) {\n        cylinder(d=diameter, h=width, center=true);\n        cylinder(d=diameter-2.4, h=width+0.1, center=true);\n    }\n}\n\nmodule tire_tread(diameter, width) {\n    for(i=[0:15:359]) {\n        rotate([0, 0, i]) {\n            translate([diameter/2-1, 0, 0]) {\n                cube([2, 1.5, width], center=true);\n            }\n        }\n    }\n}\n\nmodule fork() {\n    union() {\n        // Upper fork tubes\n        translate([0, 0, 20]) cylinder(d=6, h=15);\n        translate([8, 0, 20]) cylinder(d=6, h=15);\n        \n        // Lower fork legs\n        translate([0, 0, 5]) cylinder(d=8, h=15);\n        translate([8, 0, 5]) cylinder(d=8, h=15);\n        \n        // Fork brace\n        translate([4, 0, 8]) cube([16, 3, 4], center=true);\n    }\n}\n\nmodule swingarm() {\n    difference() {\n        union() {\n            // Main arms\n            translate([0, 0, 0]) cube([35, 4, 8], center=true);\n            translate([0, 0, 0]) cube([4, 15, 8], center=true);\n            \n            // Axle mount\n            translate([15, 0, 0]) cylinder(d=12, h=8, center=true);\n        }\n        \n        // Hollow out\n        translate([0, 0, 0]) cube([30, 2.5, 5.5], center=true);\n    }\n}\n\nmodule frame() {\n    // Main frame tubes\n    hull() {\n        translate([-5, 0, 10]) cylinder(d=4, h=1);\n        translate([15, 0, 25]) cylinder(d=4, h=1);\n        translate([20, 0, 15]) cylinder(d=4, h=1);\n        translate([5, 0, 0]) cylinder(d=4, h=1);\n    }\n    \n    hull() {\n        translate([-5, 0, 10]) cylinder(d=4, h=1);\n        translate([15, 0, 25]) cylinder(d=4, h=1);\n        translate([15, 0, 35]) cylinder(d=4, h=1);\n    }\n    \n    // Engine case\n    difference() {\n        translate([5, 0, 7]) cube([20, 12, 14], center=true);\n        translate([5, 0, 5]) cube([18, 10, 10], center=true);\n    }\n}\n\nmodule seat() {\n    difference() {\n        hull() {\n            translate([5, 0, 25]) cylinder(d=8, h=1);\n            translate([15, 0, 25]) cylinder(d=8, h=1);\n            translate([15, 0, 35]) cylinder(d=8, h=1);\n        }\n        translate([10, 0, 25]) cube([12, 10, 12], center=true);\n    }\n}\n\nmodule handlebars() {\n    rotate([0, 90, 0]) {\n        cylinder(d=5, h=25, center=true);\n    }\n    translate([0, -12.5, 25]) rotate([0, 0, -20]) cube([3, 25, 3], center=true);\n    translate([0, 12.5, 25]) rotate([0, 0, 20]) cube([3, 25, 3], center=true);\n}\n\nmodule exhaust() {\n    hull() {\n        translate([5, 6, 5]) cylinder(d=3, h=1);\n        translate([15, 10, 10]) cylinder(d=3, h=1);\n        translate([25, 12, 15]) cylinder(d=3, h=1);\n    }\n    translate([25, 12, 15]) rotate([0, 90, 0]) cylinder(d=5, h=8);\n}\n\nmodule fender(x, z) {\n    rotate([90, 0, 0]) {\n        translate([x, 0, z]) {\n            difference() {\n                scale([1, 0.3, 1]) cylinder(d=25, h=3);\n                translate([0, -2, 0]) cube([30, 4, 6], center=true);\n            }\n        }\n    }\n}\n\n// Main assembly\nscale(0.8) {\n    // Front wheel assembly\n    translate([-15, 0, 0]) {\n        wheel(24, 4);\n        tire_tread(24, 5);\n    }\n    \n    // Rear wheel assembly\n    translate([15, 0, 0]) {\n        wheel(24, 4);\n        tire_tread(24, 5);\n    }\n    \n    // Frame and components\n    frame();\n    \n    // Suspension\n    translate([-15, 0, 0]) fork();\n    translate([15, 0, 0]) swingarm();\n    \n    // Body parts\n    seat();\n    handlebars();\n    exhaust();\n    \n    // Fenders\n    fender(-12, 12);\n    fender(12, 8);\n}",
    "renders": true
  },
  {
    "vehicle": "chopper",
    "openscad_code": "// Chopper Motorcycle - Medium complexity 3D printable model\n// Dimensions: approx 95mm long x 35mm wide x 45mm high\n\n$fn = 32;\n\nmodule frame() {\n    // Main backbone tube\n    rotate([0, -8, 0])\n    translate([0, 0, 10])\n    cylinder(h=40, d=6);\n    \n    // Down tube\n    translate([-15, 0, 5])\n    rotate([60, 0, 0])\n    cylinder(h=25, d=5);\n    \n    // Seat support\n    translate([15, 0, 15])\n    rotate([-20, 0, 0])\n    cylinder(h=20, d=4);\n    \n    // Engine mount cross tube\n    translate([0, 0, 5])\n    rotate([90, 0, 0])\n    cylinder(h=20, d=4);\n}\n\nmodule front_fork() {\n    // Triple tree top\n    translate([-20, 0, 25])\n    cube([8, 4, 6], center=true);\n    \n    // Triple tree bottom\n    translate([-20, 0, 18])\n    cube([8, 4, 6], center=true);\n    \n    // Fork tubes\n    for(y = [-2.5, 2.5]) {\n        translate([-20, y, 21.5])\n        cylinder(h=35, d=3);\n    }\n}\n\nmodule rear_swingarm() {\n    // Left swingarm\n    translate([20, -6, 5])\n    rotate([0, 10, 0])\n    cube([30, 3, 4]);\n    \n    // Right swingarm\n    translate([20, 6, 5])\n    rotate([0, 10, 0])\n    cube([30, 3, 4]);\n}\n\nmodule engine() {\n    // Engine block\n    translate([-5, 0, 2])\n    cube([15, 12, 10], center=true);\n    \n    // Cylinders\n    for(i = [0, 1]) {\n        translate([2, -3 + i*6, 10])\n        cylinder(h=8, d=6);\n    }\n    \n    // Oil tank\n    translate([10, 8, 8])\n    cylinder(h=12, d=5);\n}\n\nmodule wheels() {\n    // Front wheel\n    translate([-20, 0, 3])\n    rotate([90, 0, 0])\n    cylinder(h=6, d=18);\n    \n    // Front tire\n    translate([-20, 0, 3])\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h=7, d=22);\n        cylinder(h=8, d=18);\n    }\n    \n    // Rear wheel\n    translate([35, 0, 3])\n    rotate([90, 0, 0])\n    cylinder(h=8, d=20);\n    \n    // Rear tire\n    translate([35, 0, 3])\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h=9, d=24);\n        cylinder(h=10, d=20);\n    }\n}\n\nmodule tank() {\n    // Main tank\n    translate([5, 0, 18])\n    rotate([0, -5, 0])\n    scale([1.5, 1, 0.8])\n    sphere(d=15);\n    \n    // Tank cap\n    translate([10, 0, 24])\n    cylinder(h=2, d=3);\n}\n\nmodule seat() {\n    // Seat base\n    translate([15, 0, 15])\n    cube([20, 10, 3], center=true);\n    \n    // Seat cushion\n    translate([15, 0, 18])\n    scale([1, 1, 0.5])\n    sphere(d=12);\n}\n\nmodule handlebars() {\n    // Handlebar clamp\n    translate([-20, 0, 28])\n    cube([6, 4, 4], center=true);\n    \n    // Bars\n    rotate([0, 0, -15])\n    translate([-20, 0, 30])\n    cube([30, 3, 3], center=true);\n}\n\nmodule exhaust() {\n    // Headers\n    for(y = [-3, 3]) {\n        translate([0, y, 3])\n        rotate([0, 10, 0])\n        cylinder(h=25, d=2);\n    }\n    \n    // Muffler\n    translate([20, 0, 3])\n    rotate([0, 10, 0])\n    cylinder(h=20, d=4);\n}\n\nmodule fenders() {\n    // Front fender\n    translate([-20, 0, 8])\n    rotate([0, 90, 0])\n    difference() {\n        cylinder(h=15, d=25);\n        translate([0, 0, -1])\n        cylinder(h=17, d=20);\n    }\n    \n    // Rear fender\n    translate([30, 0, 8])\n    rotate([0, 90, 0])\n    difference() {\n        cylinder(h=20, d=28);\n        translate([0, 0, -1])\n        cylinder(h=22, d=22);\n    }\n}\n\n// Assemble the chopper\nunion() {\n    frame();\n    front_fork();\n    rear_swingarm();\n    engine();\n    wheels();\n    tank();\n    seat();\n    handlebars();\n    exhaust();\n    fenders();\n}",
    "renders": true
  },
  {
    "vehicle": "touring",
    "openscad_code": "// Realistic Touring Kayak (Medium Complexity)\n// Overall length ~95mm\n\n// Hull parameters\nhull_length = 85;\nhull_width = 25;\nhull_height = 12;\ndeck_height = 8;\n\n// Cockpit parameters\ncockpit_length = 25;\ncockpit_width = 15;\ncockpit_offset = -10;\n\n// Bow and stern heights\nbow_height = 15;\nstern_height = 13;\n\n// Hull shape module\nmodule hull_shape() {\n    // Main hull body\n    difference() {\n        hull_union();\n        \n        // Cockpit cutout\n        translate([cockpit_offset, 0, deck_height])\n            scale([1, 0.8, 1])\n            cylinder(h=hull_height + 2, d=cockpit_width, $fn=32);\n    }\n}\n\nmodule hull_union() {\n    union() {\n        // Central hull section\n        translate([0, 0, hull_height/2])\n            scale([1, 0.6, 1])\n            cube([hull_length, hull_width, hull_height], center=true);\n        \n        // Bow tapered section\n        translate([hull_length/2 - 10, 0, hull_height/2])\n            scale([0.4, 0.5, 1.2])\n            cube([20, hull_width, hull_height], center=true);\n        \n        // Stern tapered section\n            translate([-hull_length/2 + 10, 0, hull_height/2])\n            scale([0.4, 0.5, 1.2])\n            cube([20, hull_width, hull_height], center=true);\n        \n        // Deck dome\n        translate([0, 0, deck_height + hull_height/2])\n            scale([1, 0.7, 0.5])\n            sphere(d=hull_width + 10, $fn=64);\n        \n        // Bow rise\n        translate([hull_length/2 - 5, 0, bow_height/2])\n            scale([0.3, 0.6, 1.5])\n            cube([10, hull_width - 5, bow_height], center=true);\n        \n        // Stern rise\n        translate([-hull_length/2 + 5, 0, stern_height/2])\n            scale([0.3, 0.6, 1.3])\n            cube([10, hull_width - 5, stern_height], center=true);\n    }\n}\n\n// Deck rigging loops\nmodule deck_rigging() {\n    for(i = [-1:1]) {\n        // Forward deck lines\n        translate([20 + i*10, hull_width/2 - 2, deck_height + 2])\n            rotate([90, 0, 0])\n            cylinder(h=3, d=2, $fn=16);\n        \n        translate([20 + i*10, -hull_width/2 + 2, deck_height + 2])\n            rotate([90, 0, 0])\n            cylinder(h=3, d=2, $fn=16);\n        \n        // Rear deck lines\n        translate([-20 + i*10, hull_width/2 - 2, deck_height + 2])\n            rotate([90, 0, 0])\n            cylinder(h=3, d=2, $fn=16);\n        \n        translate([-20 + i*10, -hull_width/2 + 2, deck_height + 2])\n            rotate([90, 0, 0])\n            cylinder(h=3, d=2, $fn=16);\n    }\n}\n\n// Seat inside cockpit\nmodule seat() {\n    translate([cockpit_offset - 5, 0, 2])\n        cube([15, cockpit_width - 4, 1]);\n}\n\n// Foot brace rails\nmodule foot_braces() {\n    // Left rail\n    translate([hull_length/2 - 15, hull_width/2 - 2, 2])\n        cube([20, 1, 2]);\n    \n    // Right rail\n    translate([hull_length/2 - 15, -hull_width/2 + 1, 2])\n        cube([20, 1, 2]);\n}\n\n// Skeg box (simplified)\nmodule skeg_box() {\n    translate([-hull_length/2 + 5, 0, 1])\n        cube([8, 3, 2]);\n}\n\n// Main assembly\nhull_shape();\ndeck_rigging();\nseat();\nfoot_braces();\nskeg_box();",
    "renders": true
  },
  {
    "vehicle": "naked",
    "openscad_code": "// Naked human figure - realistic style, medium complexity\n// Approximate height: 80mm\n// Designed for 3D printing with minimal overhangs\n\n// Overall scale factor\nscale_factor = 1;\n\n// Body proportions\nhead_height = 12 * scale_factor;\ntorso_height = 25 * scale_factor;\nlegs_height = 35 * scale_factor;\narms_length = 30 * scale_factor;\n\n// Basic dimensions\nhead_diameter = 10 * scale_factor;\nneck_diameter = 4 * scale_factor;\nshoulder_width = 14 * scale_factor;\nchest_width = 12 * scale_factor;\nwaist_width = 10 * scale_factor;\nhip_width = 14 * scale_factor;\n\n// Create the complete figure\nmodule naked_human() {\n    union() {\n        // Head\n        translate([0, 0, legs_height + torso_height + neck_diameter/2 + head_height/2]) {\n            sphere(d = head_diameter, $fn = 32);\n            \n            // Eyes\n            translate([-head_diameter/4, head_diameter/2 - 1, head_height/6])\n                sphere(d = 1.5 * scale_factor, $fn = 16);\n            translate([head_diameter/4, head_diameter/2 - 1, head_height/6])\n                sphere(d = 1.5 * scale_factor, $fn = 16);\n                \n            // Nose\n            translate([0, head_diameter/2 - 0.5, 0])\n                cylinder(h = 2 * scale_factor, d1 = 2 * scale_factor, d2 = 1 * scale_factor, $fn = 8);\n                \n            // Mouth\n            translate([0, head_diameter/2 - 0.5, -head_height/4])\n                cube([3 * scale_factor, 0.5 * scale_factor, 1 * scale_factor]);\n        }\n        \n        // Neck\n        translate([0, 0, legs_height + torso_height + neck_diameter/2])\n            cylinder(h = neck_diameter, d = neck_diameter, $fn = 16);\n        \n        // Torso\n        difference() {\n            union() {\n                // Chest\n                translate([0, 0, legs_height + torso_height/2])\n                    scale([chest_width/2, chest_width/3, torso_height/2])\n                        sphere(d = chest_width, $fn = 32);\n                        \n                // Abdomen\n                translate([0, 0, legs_height + torso_height/4])\n                    scale([waist_width/2, waist_width/3, torso_height/4])\n                        sphere(d = waist_width, $fn = 32);\n            }\n            \n            // Remove bottom half to make it flat\n            translate([0, 0, legs_height - 1])\n                cube([chest_width*2, chest_width*2, 2], center = true);\n        }\n        \n        // Hips\n        translate([0, 0, legs_height])\n            scale([hip_width/2, hip_width/3, 8 * scale_factor])\n                sphere(d = hip_width, $fn = 32);\n        \n        // Legs\n        module leg(x_offset) {\n            translate([x_offset, 0, legs_height/2]) {\n                // Thigh\n                cylinder(h = legs_height/2, d1 = 6 * scale_factor, d2 = 4 * scale_factor, $fn = 16);\n                \n                // Calf\n                translate([0, 0, -legs_height/2])\n                    cylinder(h = legs_height/2, d1 = 4 * scale_factor, d2 = 3 * scale_factor, $fn = 16);\n                    \n                // Foot\n                translate([0, 2 * scale_factor, -legs_height])\n                    scale([3 * scale_factor, 7 * scale_factor, 2 * scale_factor])\n                        cube(center = true);\n            }\n        }\n        \n        // Create both legs\n        leg(hip_width/3);\n        leg(-hip_width/3);\n        \n        // Arms\n        module arm(x_pos, angle) {\n            translate([x_pos, 0, legs_height + torso_height - 5 * scale_factor]) {\n                rotate([0, angle, 0]) {\n                    // Upper arm\n                    cylinder(h = arms_length/2, d = 3 * scale_factor, $fn = 16);\n                    \n                    // Forearm\n                    translate([0, 0, -arms_length/2])\n                        cylinder(h = arms_length/2, d = 2.5 * scale_factor, $fn = 16);\n                        \n                    // Hand\n                    translate([0, 0, -arms_length])\n                        scale([2.5 * scale_factor, 4 * scale_factor, 1 * scale_factor])\n                            cube(center = true);\n                }\n            }\n        }\n        \n        // Create both arms\n        arm(shoulder_width/2, 15);\n        arm(-shoulder_width/2, -15);\n    }\n}\n\n// Generate the figure\nnaked_human();",
    "renders": true
  },
  {
    "vehicle": "standard",
    "openscad_code": "// Standard/Flagpole assembly\n// Overall height ≈ 95 mm, base diameter ≈ 35 mm\n// Optimized for FDM printing: no steep overhangs, 1.2 mm walls\n\n$fn = 36;\n\nmodule flag_base(){\n    // Bottom plate, 2 mm thick\n    cylinder(h = 2, d = 35, center = false);\n\n    // Decorative ring 1 mm above plate\n    translate([0,0,2])\n        cylinder(h = 3, d1 = 33, d2 = 30, center = false);\n\n    // Central socket 4 mm deep, 5 mm diameter\n    translate([0,0,0])\n        difference(){\n            cylinder(h = 6, d = 9, center = false);\n            cylinder(h = 4.5, d = 5.2, center = false); // 0.2 mm clearance\n        }\n}\n\nmodule pole(){\n    // Main pole 3 mm diameter, 75 mm tall\n    cylinder(h = 75, d = 3, center = false);\n    \n    // Ball finial on top\n    translate([0,0,75])\n        sphere(d = 4);\n}\n\nmodule flag(){\n    // Flag cloth 15 mm x 10 mm x 0.8 mm\n    // Chamfered bottom rear to avoid overhang\n    translate([1.5, -7.5, 65]){\n        difference(){\n            cube([15, 10, 0.8]);\n            translate([0, 0, -0.1])\n                cube([15, 2, 1]); // rear chamfer\n        }\n    }\n\n    // Two grommet rings\n    for(z = [67, 73]){\n        translate([0, -7.5, z])\n            rotate([90,0,0])\n                cylinder(h = 1.2, d = 2, center = true);\n    }\n}\n\nmodule standard_assembly(){\n    union(){\n        // Base\n        flag_base();\n\n        // Pole inserted into socket\n        translate([0,0,4])\n            pole();\n\n        // Flag attached to pole\n        flag();\n    }\n}\n\n// Render the complete standard\nstandard_assembly();",
    "renders": true
  },
  {
    "vehicle": "dualsport",
    "openscad_code": "// Dual-sport motorcycle - realistic style, medium complexity\n// Overall length ~80 mm, printable with minimal supports\n\n$fn = 32;           // Smooth curves\nwall = 2;           // General wall thickness\n\nmodule main() {\n    // Frame\n    color(\"DarkGray\")\n    frame();\n\n    // Engine & skid plate\n    color(\"SlateGray\")\n    engine();\n\n    // Front fork\n    color(\"Silver\")\n    front_fork();\n\n    // Rear shock & swingarm\n    color(\"Silver\")\n    rear_suspension();\n\n    // Wheels\n    color(\"Black\")\n    wheels();\n\n    // Tank & seat\n    color(\"Red\")\n    tank_seat();\n\n    // Headlight & dash\n    color(\"Black\")\n    front_assembly();\n\n    // Exhaust\n    color(\"SlateGray\")\n    exhaust();\n}\n\n// Main frame tubes\nmodule frame() {\n    // Down tube\n    translate([-5,0,15])\n        rotate([0,30,0])\n        cylinder(h=30, d1=3, d2=3);\n\n    // Seat rail\n    translate([15,0,20])\n        rotate([0,-10,0])\n        cylinder(h=35, d1=3, d2=2);\n\n    // Rear subframe brace\n    translate([35,0,22])\n        rotate([0,-20,0])\n        cylinder(h=15, d1=2, d2=2);\n\n    // Cross braces\n    for(i=[0,20]) {\n        translate([i,0,15])\n            rotate([90,0,0])\n            cylinder(h=8, d=2);\n    }\n}\n\n// Engine block and skid plate\nmodule engine() {\n    // Engine block\n    difference() {\n        translate([5,-4,8])\n            cube([12,8,10], center=true);\n        // Starter cavity\n        translate([8,-4,10])\n            cube([4,4,3], center=true);\n    }\n\n    // Skid plate\n    hull() {\n        translate([0,-4,4])\n            cube([25,8,wall]);\n        translate([25,-4,4])\n            cube([25,8,wall]);\n    }\n}\n\n// Front suspension fork\nmodule front_fork() {\n    // Triple clamp\n    translate([-18,0,25])\n        cube([6,12,6], center=true);\n\n    // Fork tubes\n    for(y=[-3,3]) {\n        translate([-22,y,12])\n            cylinder(h=15, d=2);\n    }\n\n    // Front fender\n    translate([-22,0,8])\n        rotate([90,0,0])\n        cylinder(h=12, d1=12, d2=8);\n}\n\n// Rear suspension swingarm & shock\nmodule rear_suspension() {\n    // Swingarm\n    hull() {\n        translate([20,0,8])\n            cube([4,6,2], center=true);\n        translate([35,0,8])\n            cube([4,6,2], center=true);\n    }\n\n    // Shock absorber\n    translate([25,-5,12])\n        rotate([20,0,0])\n        cylinder(h=15, d1=2, d2=2);\n}\n\n// Wheels with knobby tires\nmodule wheels() {\n    for(pos=[-22, 30]) {\n        // Rim\n        translate([pos,0,5])\n            difference() {\n                cylinder(h=6, d=12);\n                cylinder(h=7, d=8);\n            }\n        // Tire\n        translate([pos,0,5])\n            cylinder(h=7, d=14);\n        // Spokes\n        for(a=[0:45:315]) {\n            rotate([0,0,a])\n                translate([pos,5,5])\n                    cube([1,2,6], center=true);\n        }\n    }\n}\n\n// Fuel tank and seat\nmodule tank_seat() {\n    // Tank\n    translate([2,-5,18])\n        rotate([0,-10,0])\n        cube([10,10,8]);\n\n    // Seat\n    translate([15,-5,22])\n        rotate([0,-5,0])\n        cube([20,10,5]);\n}\n\n// Headlight and handlebars\nmodule front_assembly() {\n    // Headlight\n    translate([-25,0,20])\n        sphere(d=6);\n\n    // Handlebars\n    translate([-20,0,24])\n        rotate([0,0,30])\n        cylinder(h=20, d=2);\n}\n\n// Exhaust pipe\nmodule exhaust() {\n    hull() {\n        translate([5,5,8])\n            sphere(d=3);\n        translate([15,8,5])\n            sphere(d=3);\n    }\n}\n\nmain();",
    "renders": true
  },
  {
    "vehicle": "adventure",
    "openscad_code": "// Adventure: Explorer's Compass with Map Scroll and Magnifying Glass\n// Realistic style, medium complexity, 3D-printable\n\n// Overall size target: ~80 mm\n\n$fa = 2;\n$fs = 0.5;\n\n// Wall thickness\nth = 1.5;\n\nmodule compass_body() {\n    // Outer ring\n    difference() {\n        cylinder(h = 8, d = 35, center = true);\n        cylinder(h = 9, d = 30, center = true);\n    }\n    \n    // Compass face\n    translate([0, 0, 4.2])\n        color(\"white\")\n        cylinder(h = 0.5, d = 29.5, center = true);\n    \n    // Needle\n    translate([0, 0, 4.5])\n        rotate([0, 0, 45])\n        union() {\n            color(\"red\") cube([20, 2, 1], center = true);\n            color(\"gray\") cube([20, 2, 1], center = true);\n            color(\"gray\") translate([-10, 0, 0]) cube([8, 2, 1], center = true);\n        }\n    \n    // Glass cover\n    translate([0, 0, 5.5])\n        cylinder(h = 1.5, d = 29, center = true);\n    \n    // Pivot pin\n    translate([0, 0, 4.5])\n        cylinder(h = 2, d = 2, center = true);\n}\n\nmodule map_scroll() {\n    // Scroll body\n    rotate([90, 0, 90])\n    difference() {\n        cylinder(h = 50, d = 12, center = true);\n        cylinder(h = 52, d = 9, center = true);\n    }\n    \n    // Map texture rings\n    for (i = [-20:5:20]) {\n        translate([i, 0, 0])\n        rotate([90, 0, 90])\n        intersection() {\n            cylinder(h = 50, d = 12.2, center = true);\n            translate([0, 0, 6])\n            cube([1, 12, 1], center = true);\n        }\n    }\n    \n    // End caps\n    translate([-25, 0, 0])\n    rotate([90, 0, 90])\n    cylinder(h = 1.5, d = 14, center = true);\n    \n    translate([25, 0, 0])\n    rotate([90, 0, 90])\n    cylinder(h = 1.5, d = 14, center = true);\n}\n\nmodule magnifying_glass() {\n    // Handle\n    translate([0, 0, -22])\n    rotate([0, 90, 0])\n    cylinder(h = 40, d = 6, center = true);\n    \n    // Handle grip rings\n    for (i = [-15:5:15]) {\n        translate([i, 0, -22])\n        rotate([0, 90, 0])\n        cylinder(h = 7, d = 7, center = true);\n    }\n    \n    // Frame\n    translate([0, 0, 0])\n    rotate([0, 0, 0])\n    difference() {\n        cylinder(h = 3, d = 28, center = true);\n        cylinder(h = 4, d = 24, center = true);\n    }\n    \n    // Lens\n    translate([0, 0, 1.7])\n    cylinder(h = 1, d = 23.5, center = true);\n}\n\n// Assembly\ntranslate([0, -20, 0])\ncompass_body();\n\ntranslate([0, 25, 0])\nrotate([0, 0, 30])\nmap_scroll();\n\ntranslate([0, 0, 15])\nmagnifying_glass();",
    "renders": true
  },
  {
    "vehicle": "enduro",
    "openscad_code": "// Enduro motorcycle - realistic style, medium complexity\n// Size: 1:24 scale (~90mm length)\n\n$fn = 64;\n\n// Main assembly\nmodule enduro() {\n    // Main frame\n    union() {\n        // Rear frame triangle\n        difference() {\n            hull() {\n                translate([-15, -15, 10]) cube([5, 30, 40]);\n                translate([15, -15, 10]) cube([5, 30, 40]);\n                translate([0, -5, 30]) cube([5, 10, 10]);\n            }\n            \n            // Battery compartment\n            translate([0, -10, 15]) cube([20, 20, 15]);\n        }\n        \n        // Front frame\n        cylinder(h = 30, r1 = 5, r2 = 5);\n        translate([0, 0, 30]) rotate([0, 90, 0]) cylinder(h = 20, r = 5);\n    }\n    \n    // Engine block\n    translate([-5, 0, 10]) {\n        difference() {\n            cube([20, 15, 15]);\n            // Cooling fins\n            for(i = [0:3]) {\n                translate([2, 2 + i*3, 5]) cube([16, 2, 10]);\n            }\n        }\n    }\n    \n    // Gas tank\n    translate([0, 15, 35]) {\n        hull() {\n            cube([15, 20, 10]);\n            translate([2.5, 5, 5]) cube([10, 10, 5]);\n        }\n    }\n    \n    // Seat\n    translate([0, 15, 25]) {\n        difference() {\n            hull() {\n                cube([20, 25, 8]);\n                translate([0, 10, 5]) cube([20, 5, 5]);\n            }\n            // Seat texture grooves\n            for(i = [0:4]) {\n                translate([2 + i*4, 2, 0]) cube([2, 21, 8]);\n            }\n        }\n    }\n    \n    // Rear wheel assembly\n    translate([-25, 0, 12]) {\n        // Swingarm\n        hull() {\n            translate([0, -5, 0]) cube([5, 10, 5]);\n            translate([0, -5, 5]) cube([5, 10, 5]);\n        }\n        \n        // Wheel\n        rotate([90, 0, 0]) {\n            difference() {\n                cylinder(h = 8, r = 15);\n                cylinder(h = 9, r = 8);\n                \n                // Spokes\n                for(i = [0:7]) {\n                    rotate([0, 0, i*45]) {\n                        translate([0, 11.5, 4]) cube([2, 3, 2]);\n                    }\n                }\n            }\n        }\n        \n        // Tire\n        rotate([90, 0, 0]) {\n            difference() {\n                cylinder(h = 10, r = 17);\n                cylinder(h = 11, r = 15);\n            }\n        }\n    }\n    \n    // Front wheel assembly\n    translate([25, 0, 25]) {\n        // Fork tubes\n        for(side = [-1, 1]) {\n            translate([0, side*3, 0]) {\n                cylinder(h = 20, r = 2);\n            }\n        }\n        \n        // Wheel (same as rear)\n        rotate([90, 0, 0]) {\n            difference() {\n                cylinder(h = 8, r = 15);\n                cylinder(h = 9, r = 8);\n                \n                for(i = [0:7]) {\n                    rotate([0, 0, i*45]) {\n                        translate([0, 11.5, 4]) cube([2, 3, 2]);\n                    }\n                }\n            }\n        }\n        \n        // Tire\n        rotate([90, 0, 0]) {\n            difference() {\n                cylinder(h = 10, r = 17);\n                cylinder(h = 11, r = 15);\n            }\n        }\n    }\n    \n    // Handlebars\n    translate([25, 0, 45]) {\n        rotate([0, -30, 0]) {\n            cylinder(h = 20, r = 2);\n        }\n        translate([10, 0, 0]) {\n            rotate([0, 90, 0]) cylinder(h = 15, r = 1);\n            mirror([0, 1, 0]) rotate([0, 90, 0]) cylinder(h = 15, r = 1);\n        }\n    }\n    \n    // Headlight\n    translate([30, 0, 35]) {\n        difference() {\n            sphere(d = 10);\n            sphere(d = 8);\n        }\n    }\n    \n    // Exhaust pipe\n    translate([0, -8, 10]) {\n        rotate([0, 90, 0]) {\n            cylinder(h = 20, r = 3);\n            translate([20, 0, 0]) cylinder(h = 10, r1 = 3, r2 = 2);\n        }\n    }\n    \n    // Chain guard\n    translate([-15, 0, 8]) {\n        difference() {\n            hull() {\n                cube([20, 8, 3]);\n                translate([0, 2, 0]) cube([20, 4, 3]);\n            }\n            translate([2, 2, -0.5]) cube([16, 4, 4]);\n        }\n    }\n    \n    // Fenders\n    // Front fender\n    translate([25, 0, 18]) {\n        difference() {\n            hull() {\n                cube([15, 10, 3]);\n                translate([0, 0, 5]) cube([15, 8, 1]);\n            }\n            translate([0, 0, -1]) {\n                cylinder(h = 7, r = 17, center = true);\n            }\n        }\n    }\n    \n    // Rear fender\n    translate([-25, 0, 25]) {\n        difference() {\n            hull() {\n                cube([15, 12, 3]);\n                translate([0, 0, 5]) cube([15, 10, 1]);\n            }\n            translate([-7.5, 0, -1]) {\n                cylinder(h = 7, r = 17, center = true);\n            }\n        }\n    }\n}\n\n// Generate model\nenduro();",
    "renders": true
  },
  {
    "vehicle": "motocross",
    "openscad_code": "// Motocross bike - realistic medium complexity\n// Dimensions in mm, printable size ~80mm length\n\n$fn = 32;\n\nmodule wheel(rim_r=10, tire_r=13, width=5) {\n    // Tire\n    difference() {\n        cylinder(h=width, r=tire_r, center=true);\n        cylinder(h=width+1, r=rim_r, center=true);\n    }\n    \n    // Rim\n    color(\"silver\")\n    for(i=[0:45:315]) {\n        rotate([0, 0, i])\n        translate([rim_r-1, 0, 0])\n        cube([2, 1, width-0.5], center=true);\n    }\n}\n\nmodule fork(r=2, h=20, offset=0) {\n    translate([0, 0, h/2+offset])\n    cylinder(h=h, r=r);\n}\n\nmodule suspension() {\n    // Rear shock\n    translate([-15, 0, 15])\n    rotate([90, 0, 0])\n    cylinder(h=15, r=2);\n    \n    // Front forks\n    translate([20, -6, 25])\n    fork();\n    translate([20, 6, 25])\n    fork();\n}\n\nmodule frame() {\n    // Main tube\n    color(\"darkgray\")\n    hull() {\n        translate([-20, 0, 15])\n        sphere(r=3);\n        translate([20, 0, 25])\n        sphere(r=3);\n    }\n    \n    // Engine block\n    color(\"gray\")\n    translate([-5, 0, 10])\n    cube([12, 15, 10], center=true);\n    \n    // Seat\n    color(\"black\")\n    translate([0, 0, 22])\n    scale([1.5, 0.8, 0.3])\n    sphere(r=10);\n    \n    // Handlebars\n    translate([20, 0, 32])\n    rotate([0, 15, 0])\n    cylinder(h=20, r=1);\n    translate([20, -10, 32])\n    rotate([90, 0, 0])\n    cylinder(h=20, r=1);\n}\n\nmodule exhaust() {\n    color(\"gray\")\n    translate([-15, -8, 10])\n    rotate([0, 0, -30])\n    cylinder(h=15, r=2);\n    \n    translate([-25, -12, 8])\n    rotate([0, 15, -45])\n    cylinder(h=10, r=2);\n}\n\nmodule fender(w=20, h=5, l=30) {\n    color(\"red\")\n    translate([0, 0, h/2])\n    scale([l, w, h])\n    sphere(r=1);\n}\n\n// Main assembly\nmodule motocross() {\n    // Rear wheel\n    translate([-25, 0, 8])\n    rotate([0, 90, 0])\n    wheel();\n    \n    // Front wheel\n    translate([25, 0, 8])\n    rotate([0, 90, 0])\n    wheel();\n    \n    // Frame and components\n    frame();\n    suspension();\n    exhaust();\n    \n    // Fenders\n    translate([-15, 0, 20])\n    fender(15, 3, 20);\n    \n    translate([15, 0, 28])\n    fender(12, 2, 15);\n}\n\n// Scale to printable size\nscale(0.6)\nmotocross();",
    "renders": true
  },
  {
    "vehicle": "supermoto",
    "openscad_code": "// Supermoto motorcycle - realistic style, medium complexity\n// ~75mm long, 3D printable\n\n$fn = 32;\n\n// Main module\nmodule supermoto() {\n    // Wheelbase and basic dimensions\n    wheelbase = 52;\n    seat_height = 25;\n    ground_clearance = 8;\n    \n    color(\"red\")\n    translate([0, 0, ground_clearance])\n    union() {\n        // Frame\n        frame();\n        \n        // Engine\n        engine();\n        \n        // Wheels\n        translate([-wheelbase/2, 0, 0]) \n            rotate([0, 0, 180])\n            wheel(10, 4);\n        translate([wheelbase/2, 0, 0]) \n            wheel(10, 4);\n        \n        // Front forks\n        translate([-wheelbase/2, 0, 10])\n            forks();\n        \n        // Rear swingarm\n        translate([wheelbase/2 - 8, 0, 2])\n            swingarm();\n        \n        // Seat\n        translate([0, 0, seat_height - ground_clearance])\n            seat();\n        \n        // Fuel tank\n        translate([-wheelbase/4, 0, seat_height - ground_clearance + 3])\n            tank();\n        \n        // Exhaust\n        translate([wheelbase/4, -8, 2])\n            exhaust();\n        \n        // Handlebars\n        translate([-wheelbase/2 + 2, 0, seat_height - ground_clearance + 12])\n            handlebars();\n    }\n}\n\n// Wheel module\nmodule wheel(radius, width) {\n    // Tire\n    difference() {\n        cylinder(h = width, r = radius, center = true);\n        // Tread pattern\n        for(i = [0:9]) {\n            rotate([0, 0, i * 36])\n                translate([radius - 1, 0, 0])\n                    cube([2, 1.5, width + 0.1], center = true);\n        }\n    }\n    \n    // Rim\n    color(\"silver\")\n    difference() {\n        cylinder(h = width + 1, r = radius - 2.5, center = true);\n        cylinder(h = width + 2, r = radius - 4, center = true);\n    }\n    \n    // Spokes\n    color(\"gray\")\n    for(i = [0:5]) {\n        rotate([0, 0, i * 60])\n            translate([0, 0, 0])\n                cube([radius - 4, 0.5, width + 0.5], center = true);\n    }\n}\n\n// Frame module\nmodule frame() {\n    color(\"darkgray\") {\n        // Main frame tubes\n        hull() {\n            translate([-20, 0, 15])\n                sphere(2);\n            translate([5, 0, 18])\n                sphere(2);\n            translate([15, 0, 10])\n                sphere(2);\n        }\n        \n        // Subframe\n        hull() {\n            translate([5, 0, 18])\n                sphere(1.5);\n            translate([25, 0, 20])\n                sphere(1.5);\n        }\n    }\n}\n\n// Engine module\nmodule engine() {\n    color(\"black\") {\n        // Engine block\n        translate([-5, 0, 8])\n            cube([12, 10, 8], center = true);\n        \n        // Cylinder head\n        translate([-5, 0, 15])\n            cube([10, 8, 6], center = true);\n    }\n}\n\n// Forks module\nmodule forks() {\n    color(\"silver\") {\n        // Left fork\n        translate([0, -3, 0])\n            cylinder(h = 18, r = 1.5);\n        \n        // Right fork\n        translate([0, 3, 0])\n            cylinder(h = 18, r = 1.5);\n        \n        // Triple clamp\n        translate([0, 0, 16])\n            cube([6, 8, 2], center = true);\n    }\n}\n\n// Swingarm module\nmodule swingarm() {\n    color(\"silver\") {\n        // Left arm\n        translate([0, -4, 0])\n            cube([16, 2, 3], center = true);\n        \n        // Right arm\n        translate([0, 4, 0])\n            cube([16, 2, 3], center = true);\n        \n        // Cross brace\n        translate([0, 0, 3])\n            cube([12, 8, 1], center = true);\n    }\n}\n\n// Seat module\nmodule seat() {\n    color(\"black\") {\n        // Base\n        translate([5, 0, 0])\n            cube([25, 12, 2], center = true);\n        \n        // Cushion\n        translate([5, 0, 1.5])\n            scale([1, 1, 0.5])\n                sphere(7);\n    }\n}\n\n// Fuel tank module\nmodule tank() {\n    color(\"red\") {\n        hull() {\n            translate([-5, 0, 0])\n                sphere(5);\n            translate([5, 0, 0])\n                sphere(5);\n            translate([0, 0, 3])\n                sphere(4);\n        }\n        \n        // Cap\n        translate([0, 0, 5])\n            cylinder(h = 1, r = 2);\n    }\n}\n\n// Exhaust module\nmodule exhaust() {\n    color(\"silver\") {\n        // Header pipe\n        rotate([0, 90, 0])\n            cylinder(h = 15, r = 1.5);\n        \n        // Muffler\n        translate([15, -8, 0])\n            cylinder(h = 8, r = 2);\n    }\n}\n\n// Handlebars module\nmodule handlebars() {\n    color(\"black\") {\n        // Clamp\n        translate([0, 0, 0])\n            cube([4, 10, 2], center = true);\n        \n        // Bars\n        translate([0, -5, 2])\n            rotate([0, 0, -10])\n                cube([1, 10, 1], center = true);\n        translate([0, 5, 2])\n            rotate([0, 0, 10])\n                cube([1, 10, 1], center = true);\n    }\n}\n\n// Render the complete model\nsupermoto();",
    "renders": true
  },
  {
    "vehicle": "trackbike",
    "openscad_code": "// Track Bike - Realistic Style, Medium Complexity\n// Designed for 3D printing at ~80mm length\n\n// Frame and body\nmodule frame() {\n    // Main triangle\n    union() {\n        // Top tube\n        translate([0, 0, 25]) rotate([0, 0, 0]) \n            cube([60, 4, 4], center=true);\n        \n        // Down tube\n        translate([0, 0, 15]) rotate([30, 0, 0]) \n            cube([35, 4, 4], center=true);\n        \n        // Seat tube\n        translate([-20, 0, 10]) rotate([0, 0, 0]) \n            cube([4, 4, 40], center=true);\n            \n        // Chain stays\n        translate([-20, 0, 5]) rotate([0, 0, -20]) \n            cube([30, 4, 4], center=true);\n        \n        // Seat stays\n        translate([-20, 0, 25]) rotate([0, 0, 20]) \n            cube([30, 4, 4], center=true);\n    }\n}\n\n// Handlebars\nmodule handlebars() {\n    translate([25, 0, 35]) rotate([0, 0, 0]) \n        difference() {\n            union() {\n                // Handlebar stem\n                cylinder(h=15, r=2, center=true);\n                // Bar\n                translate([0, 0, 8]) rotate([90, 0, 0])\n                    cylinder(h=40, r=2, center=true);\n            }\n            // Remove center hole\n            cylinder(h=20, r=1.5, center=true);\n        }\n}\n\n// Seat\nmodule saddle() {\n    translate([-20, 0, 42]) rotate([0, 0, 0])\n        difference() {\n            // Seat base\n            cube([15, 12, 3], center=true);\n            // Rounded top\n            translate([0, 0, 1.5]) sphere(d=12);\n            // Hollow bottom\n            cube([13, 10, 2], center=true);\n        }\n}\n\n// Wheel\nmodule wheel(pos, diameter) {\n    translate(pos) {\n        difference() {\n            // Tire\n            cylinder(h=4, r=diameter/2, center=true);\n            // Rim cavity\n            cylinder(h=5, r=diameter/2 - 2, center=true);\n        }\n        \n        // Spokes\n        for(i=[0:30:360]) {\n            rotate([0, 0, i]) translate([diameter/2 - 2, 0, 0]) \n                cube([diameter - 4, 1, 2], center=true);\n        }\n        \n        // Hub\n        cylinder(h=6, r=3, center=true);\n    }\n}\n\n// Crankset\nmodule crankset() {\n    translate([0, 0, 5]) {\n        // Chainring\n        difference() {\n            cylinder(h=2, r=8, center=true);\n            cylinder(h=3, r=7, center=true);\n            // Teeth\n            for(i=[0:15:360]) {\n                rotate([0, 0, i]) translate([8, 0, 0]) \n                    cube([1, 2, 2.5], center=true);\n            }\n        }\n        \n        // Crank arm\n        rotate([0, 0, 90]) translate([0, 6, 0]) \n            cube([20, 3, 3], center=true);\n        \n        // Pedal\n        translate([0, 16, 0]) cube([8, 3, 2], center=true);\n    }\n}\n\n// Fork\nmodule fork() {\n    translate([20, 0, 30]) rotate([30, 0, 0]) {\n        union() {\n            // Fork blades\n            translate([0, -3, 0]) cylinder(h=25, r=2, center=true);\n            translate([0, 3, 0]) cylinder(h=25, r=2, center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    frame();\n    handlebars();\n    saddle();\n    fork();\n    wheel([20, 0, 5], 20);  // Front wheel\n    wheel([-20, 0, 5], 20); // Rear wheel\n    crankset();\n}",
    "renders": true
  },
  {
    "vehicle": "caféracer",
    "openscad_code": "// Café-Racer 1:18 scale model – 3D-printable, medium complexity\n// Overall length ≈ 95 mm, width ≈ 35 mm, height ≈ 50 mm\n// Wall thickness 1.2 mm, no steep overhangs, all parts manifold\n\n$fn = 32;\n\n// ---------- Main assembly ----------\nmodule caféracer() {\n    union() {\n        frame();\n        engine();\n        tank();\n        seat();\n        front_forks();\n        rear_suspension();\n        wheels();\n        exhaust();\n        headlight();\n    }\n}\n\n// ---------- Frame ----------\nmodule frame() {\n    color(\"silver\")\n    union() {\n        // Main spine\n        translate([0, 0, 10]) cube([65, 3, 2], center = true);\n        // Down-tube\n        rotate([0, 30, 0])\n            translate([25, 0, 5]) cube([35, 3, 2], center = true);\n        // Seat rails\n        for (i = [-1, 1])\n            translate([-5, i * 8, 18])\n                rotate([0, 20, 0])\n                    cube([25, 1.5, 1.5], center = true);\n    }\n}\n\n// ---------- Engine block ----------\nmodule engine() {\n    color(\"gray\")\n    union() {\n        // Case\n        translate([20, 0, 7]) cube([18, 14, 12], center = true);\n        // Cylinders\n        for (i = [-1, 1])\n            translate([28, i * 4.5, 12])\n                cylinder(h = 10, r = 3);\n        // Oil-pan\n        translate([20, 0, 2]) cube([18, 14, 2], center = true);\n    }\n}\n\n// ---------- Fuel tank ----------\nmodule tank() {\n    color(\"darkgreen\")\n    difference() {\n        union() {\n            translate([0, 0, 15])\n                scale([1, 0.5, 0.4])\n                    sphere(d = 30);\n            translate([0, 0, 15]) cube([30, 15, 12], center = true);\n        }\n        // Hollow cavity\n        translate([0, 0, 15]) cube([28, 13, 10], center = true);\n    }\n}\n\n// ---------- Seat ----------\nmodule seat() {\n    color(\"black\")\n    difference() {\n        translate([-15, 0, 19])\n            scale([1, 0.6, 0.3])\n                sphere(d = 30);\n        translate([-15, 0, 19]) cube([28, 12, 8], center = true);\n    }\n}\n\n// ---------- Front forks ----------\nmodule front_forks() {\n    color(\"silver\")\n    union() {\n        // Triple clamp\n        translate([30, 0, 35]) cube([8, 18, 4], center = true);\n        // Fork tubes\n        for (y = [-6, 6])\n            translate([30, y, 20])\n                cylinder(h = 30, r = 1.5);\n    }\n}\n\n// ---------- Rear suspension ----------\nmodule rear_suspension() {\n    color(\"silver\")\n    for (y = [-7, 7])\n        translate([-25, y, 12])\n            rotate([15, 0, 0])\n                cylinder(h = 15, r = 1.2);\n}\n\n// ---------- Wheels ----------\nmodule wheels() {\n    // Front\n    rotate([0, 0, 90])\n        translate([30, 0, 8])\n            wheel();\n    // Rear\n    rotate([0, 0, 90])\n        translate([-30, 0, 8])\n            wheel();\n}\n\nmodule wheel() {\n    color(\"black\")\n    difference() {\n        cylinder(h = 6, r = 12);              // Tire\n        cylinder(h = 7, r = 9);               // Rim cut-out\n    }\n    color(\"silver\")\n    cylinder(h = 2, r = 9);                  // Rim surface\n    // Spokes\n    for (a = [0:45:315])\n        rotate([0, 0, a])\n            translate([0, 5.5, 3])\n                cube([1, 11, 1], center = true);\n}\n\n// ---------- Exhaust ----------\nmodule exhaust() {\n    color(\"gray\")\n    union() {\n        // Header pipes\n        for (i = [-1, 1])\n            translate([28, i * 4.5, 7])\n                rotate([0, 90, 0])\n                    cylinder(h = 25, r = 1.5);\n        // Muffler\n        translate([10, 7, 7])\n            rotate([0, 0, -10])\n                cylinder(h = 25, r = 3);\n    }\n}\n\n// ---------- Headlight ----------\nmodule headlight() {\n    color(\"black\")\n    translate([40, 0, 25])\n        rotate([0, 90, 0])\n            cylinder(h = 8, r1 = 6, r2 = 4);\n    color(\"yellow\")\n    translate([44.5, 0, 25])\n        sphere(r = 3.8);\n}\n\n// ---------- Render ----------\ncaféracer();",
    "renders": true
  },
  {
    "vehicle": "bobber",
    "openscad_code": "// Realistic 3D-printable fishing bobber\n// Approx. 80 mm tall, 25 mm max diameter\n\n// Main parameters\nbody_d = 25;            // max body diameter\nbody_h = 45;            // body height\nneck_d = 5;             // neck diameter\nneck_h = 8;\neye_d = 4;              // eyelet diameter\neye_r = 2;              // eyelet wire radius\nwall = 1.5;             // wall thickness for printing\nsegments = 36;          // cylinder resolution\n\n// Render the complete bobber\nunion() {\n    // Main buoyant body (hollow, printable)\n    difference() {\n        // Outer shape – oval body\n        scale([1,1,1.6])\n            sphere(d = body_d, $fn = segments);\n        \n        // Hollow interior\n        translate([0,0,-wall])\n            scale([1,1,1.6])\n                sphere(d = body_d - 2*wall, $fn = segments);\n    }\n\n    // Neck above body\n    translate([0,0,body_h/2 - 1])\n        cylinder(h = neck_h, d1 = neck_d, d2 = neck_d*0.9, $fn = segments);\n\n    // Eyelets – two rings for line attachment\n    module eyelet(z_pos, angle = 0) {\n        rotate([0,90,angle])\n            translate([z_pos, 0, 0])\n                difference() {\n                    torus(eye_r, eye_d/2, segments);\n                    // Gap for threading line\n                    cube([eye_d*2, eye_d, eye_d], center = true);\n                }\n    }\n    \n    // Top eyelet\n    eyelet(body_h/2 + neck_h + eye_r + 1);\n    // Bottom eyelet\n    eyelet(-body_h/2 - eye_r - 1, 90);\n    \n    // Antenna / visibility rod\n    translate([0,0,body_h/2 + neck_h + 2*eye_r + 2])\n        cylinder(h = 20, d = 3, $fn = segments);\n\n    // Paint rings for visibility\n    color(\"red\") {\n        for (i = [1:3]) {\n            translate([0,0,-body_h/2 + i*body_h/4])\n                difference() {\n                    cylinder(h = 2, d = body_d + 0.2, $fn = segments);\n                    cylinder(h = 2.2, d = body_d - 2*wall - 0.2, $fn = segments);\n                }\n        }\n    }\n}\n\n// Helper module to create torus (donut) shape\nmodule torus(radius, tube_radius, fn = 24) {\n    rotate_extrude($fn = fn)\n        translate([radius, 0, 0])\n            circle(r = tube_radius, $fn = fn);\n}",
    "renders": true
  },
  {
    "vehicle": "brat",
    "openscad_code": "// Realistic 3D printable bratwurst (brat) model\n// Medium complexity - recognizable with moderate detail\n\n// Overall dimensions: ~80mm length, ~25mm diameter\n\nmodule brat_body() {\n    // Main sausage body with slight curve\n    union() {\n        // Center straight segment\n        cylinder(h=55, d1=24, d2=24, $fn=50);\n        \n        // Front taper\n        translate([27.5, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=15, d1=24, d2=15, $fn=30);\n        \n        // Rear taper\n        translate([-27.5, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=15, d1=24, d2=18, $fn=30);\n    }\n}\n\nmodule grill_marks() {\n    // Crosshatch grill marks\n    difference() {\n        children();\n        \n        // Horizontal marks\n        for(i=[-30:10:30]) {\n            rotate([0, 0, i])\n                translate([0, 0, -1])\n                    cube([80, 1.5, 2], center=true);\n        }\n        \n        // Vertical marks (perpendicular)\n        rotate([90, 0, 0])\n            for(i=[-30:10:30]) {\n                rotate([0, 0, i])\n                    translate([0, 0, -1])\n                        cube([80, 1.5, 1.2], center=true);\n            }\n    }\n}\n\nmodule sausage_texture() {\n    // Twisted surface texture\n    difference() {\n        children();\n        \n        // Spiral grooves\n        for(angle=[0:30:360]) {\n            rotate([0, 0, angle])\n                translate([0, 0, -2])\n                    rotate_extrude(angle=30, $fn=30)\n                        translate([12, 0, 0])\n                            square([0.5, 4]);\n        }\n    }\n}\n\nmodule split_end() {\n    // Realistic split in one end\n    translate([40, 0, 0])\n        union() {\n            // First split half\n            rotate([0, 0, 15])\n                translate([0, 0, 0])\n                    cube([8, 12, 3], center=true);\n            \n            // Second split half\n            rotate([0, 0, -15])\n                translate([0, 0, 0])\n                    cube([8, 12, 3], center=true);\n        }\n}\n\nmodule brat() {\n    // Main assembly\n    difference() {\n        // Base sausage shape with curve\n        rotate([0, 5, 0])\n            union() {\n                brat_body();\n                \n                // Add slight bulge in middle\n                translate([0, 0, 0])\n                    scale([1, 1.1, 1.1])\n                        sphere(d=26, $fn=50);\n            }\n        \n        // Hollow center for 3D printing\n        translate([0, 0, 0])\n            cylinder(h=85, d=18, $fn=40);\n    }\n    \n    // Apply textures\n    grill_marks() {\n        sausage_texture() {\n            children();\n        }\n    }\n    \n    // Add split end\n    split_end();\n}\n\n// Render the complete brat\nbrat();",
    "renders": true
  },
  {
    "vehicle": "tracker",
    "openscad_code": "// Realistic-style GPS Tracker (medium complexity)\n// Dimensions: 65 x 38 x 15 mm\n\n// Overall dimensions\ntracker_l = 65;\ntracker_w = 38;\ntracker_h = 15;\nwall_t = 1.6;\n\n// Battery compartment\nbattery_l = 35;\nbattery_w = 20;\nbattery_h = 8;\n\n// USB-C port\nusb_w = 8.4;\nusb_h = 2.6;\nusb_depth = 5;\n\n// Antenna\nantenna_d = 6;\nantenna_h = 4;\n\n// Buttons\nbutton_d = 4;\nbutton_h = 1;\n\n// LED indicators\nled_d = 2;\nled_h = 1;\n\n// Screw holes\nscrew_d = 2.5;\nscrew_h = 3;\n\n// Main body shell\nmodule main_shell() {\n    difference() {\n        // Outer shell\n        rounded_box(tracker_l, tracker_w, tracker_h, 3);\n        \n        // Hollow inside\n        translate([0, 0, wall_t])\n            rounded_box(tracker_l-wall_t*2, tracker_w-wall_t*2, tracker_h-wall_t, 2);\n        \n        // Battery compartment\n        translate([0, 0, wall_t])\n            cube([battery_l, battery_w, battery_h], center=true);\n            \n        // USB-C port\n        translate([tracker_l/2, 0, -tracker_h/2])\n            cube([usb_depth, usb_w, usb_h], center=true);\n    }\n}\n\n// Rounded box helper\nmodule rounded_box(l, w, h, r) {\n    hull() {\n        for(x=[-1,1], y=[-1,1], z=[-1,1])\n            translate([x*(l/2-r), y*(w/2-r), z*(h/2-r)])\n                sphere(r=r);\n    }\n}\n\n// Top cover with features\nmodule top_cover() {\n    difference() {\n        // Main cover\n        translate([0, 0, tracker_h/2])\n            cube([tracker_l, tracker_w, wall_t], center=true);\n            \n        // Power button\n        translate([tracker_l/4, tracker_w/4, -button_h/2])\n            cylinder(d=button_d, h=button_h+0.2, center=true);\n            \n        // Function button\n        translate([0, tracker_w/4, -button_h/2])\n            cylinder(d=button_d, h=button_h+0.2, center=true);\n            \n        // Status LED\n        translate([-tracker_l/4, tracker_w/4, -led_h/2])\n            cylinder(d=led_d, h=led_h+0.2, center=true);\n            \n        // GPS LED\n        translate([-tracker_l/2+5, 0, -led_h/2])\n            cylinder(d=led_d, h=led_h+0.2, center=true);\n    }\n}\n\n// Antenna housing\nmodule antenna_housing() {\n    translate([-tracker_l/2+antenna_d/2+2, 0, tracker_h/2])\n    difference() {\n        cylinder(d=antenna_d, h=antenna_h);\n        translate([0, 0, wall_t])\n            cylinder(d=antenna_d-wall_t*2, h=antenna_h);\n    }\n}\n\n// Battery contacts\nmodule battery_contacts() {\n    // Positive contact\n    translate([battery_l/4, 0, battery_h/2+wall_t/2])\n        cube([3, 4, wall_t], center=true);\n        \n    // Negative contact\n    translate([-battery_l/4, 0, battery_h/2+wall_t/2])\n        cube([3, 4, wall_t], center=true);\n}\n\n// PCB standoffs\nmodule standoffs() {\n    for(x=[-1,1], y=[-1,1]) {\n        translate([x*(tracker_l/2-7), y*(tracker_w/2-7), tracker_h/2-wall_t/2-2])\n            difference() {\n                cylinder(d=4, h=4);\n                cylinder(d=2.5, h=4);\n            }\n    }\n}\n\n// Assembly\nmain_shell();\ntranslate([0, 0, tracker_h])\n    top_cover();\nantenna_housing();\nbattery_contacts();\nstandoffs();\n\n// Screw holes for assembly\nfor(x=[-1,1], y=[-1,1]) {\n    translate([x*(tracker_l/2-5), y*(tracker_w/2-5), -tracker_h/2])\n        cylinder(d=screw_d, h=tracker_h, center=true);\n}",
    "renders": true
  },
  {
    "vehicle": "scrambler",
    "openscad_code": "// Realistic medium-complexity scrambler (motocross bike)\n// Overall dimensions: ~95 mm long, 60 mm tall, 30 mm wide\n\n// Wheelbase and ground clearance\nwheelbase = 60;\nclearance = 8;\n\n// Tire and rim parameters\ntire_d = 24;\nrim_d = 18;\ntire_w = 7;\n\n// Engine block size\nengine_w = 18;\nengine_h = 16;\nengine_l = 22;\n\n// Main frame tube diameter\ntube_d = 5;\n\n// 3D-print friendly tolerance\neps = 0.2;\n\nmodule tire(d, w) {\n    difference() {\n        // Tire body\n        cylinder(d = d + 2, h = w + 1, $fn = 60);\n        // Tread grooves (simple circumferential)\n        for (i = [0:2]) {\n            translate([0, 0, i * (w/3) + 1])\n                cylinder(d = d + 2.5, h = 0.5, $fn = 60);\n        }\n    }\n}\n\nmodule wheel(d, w) {\n    union() {\n        // Rim\n        color(\"silver\")\n            difference() {\n                cylinder(d = rim_d, h = w, $fn = 36);\n                cylinder(d = rim_d - 4, h = w + 2, center = true, $fn = 36);\n            }\n        // Spokes (simplified)\n        for (a = [0:30:330]) {\n            rotate([0, 0, a])\n                translate([rim_d/2 - 2, 0, 0])\n                    cube([4, 1, w], center = true);\n        }\n    }\n}\n\nmodule front_fork() {\n    // Fork tubes\n    translate([wheelbase/2, 0, clearance + tire_d/2])\n    for (x = [-2, 2])\n        translate([x, 0, 0])\n            cylinder(d = tube_d, h = 25, $fn = 16);\n    // Fork brace\n    translate([wheelbase/2, 0, clearance + tire_d/2 + 12])\n        cube([8, 3, 5], center = true);\n}\n\nmodule swingarm() {\n    // Twin tubes\n    translate([-wheelbase/2, 0, clearance + tire_d/2])\n    for (y = [-4, 4])\n        translate([0, y, 0])\n            rotate([0, 90, 0])\n                cylinder(d = tube_d, h = 22, $fn = 16);\n    // Brace plate\n    translate([-wheelbase/2 + 10, 0, clearance + tire_d/2 - 5])\n        cube([2, 10, 10], center = true);\n}\n\nmodule frame() {\n    color(\"silver\")\n    union() {\n        // Main tube (curved)\n        translate([wheelbase/2 - 15, 0, clearance + tire_d/2 + 15])\n            rotate([0, 90, 0])\n                cylinder(d = tube_d, h = 50, $fn = 16);\n        // Down tube\n        translate([wheelbase/2 - 25, 0, clearance + tire_d/2 + 15])\n            rotate([20, 0, 90])\n                cylinder(d = tube_d, h = 40, $fn = 16);\n        // Seat rail\n        translate([-wheelbase/2 + 10, 0, clearance + tire_d/2 + 25])\n            rotate([0, 90, 0])\n                cylinder(d = tube_d - 1, h = 40, $fn = 16);\n    }\n}\n\nmodule engine() {\n    color(\"darkgray\")\n    translate([0, 0, clearance])\n        cube([engine_l, engine_w, engine_h], center = true);\n    // Cylinder head\n    color(\"silver\")\n    translate([engine_l/2 - 3, 0, clearance + engine_h/2 + 5])\n        cube([6, 10, 10], center = true);\n}\n\nmodule seat() {\n    color(\"black\")\n    translate([-wheelbase/2 + 5, 0, clearance + tire_d/2 + 25])\n        cube([25, 12, 4], center = true);\n}\n\nmodule exhaust() {\n    color(\"silver\")\n    // Header pipe\n    translate([engine_l/2, 0, clearance + engine_h/2 - 2])\n        rotate([0, -15, 0])\n            cylinder(d = 3, h = 25, $fn = 16);\n    // Muffler\n    translate([engine_l/2 + 20, -8, clearance + engine_h/2 - 8])\n        rotate([0, 90, 0])\n            cylinder(d = 6, h = 12, $fn = 16);\n}\n\nmodule handlebar() {\n    color(\"black\")\n    translate([wheelbase/2 - 5, 0, clearance + tire_d/2 + 25])\n        rotate([0, 90, 0])\n            cylinder(d = 3, h = 35, $fn = 16);\n    // Crossbar\n    translate([wheelbase/2 - 5, 0, clearance + tire_d/2 + 25])\n        rotate([0, 0, 90])\n            cylinder(d = 2, h = 20, center = true, $fn = 16);\n}\n\n// Assembly\nunion() {\n    // Rear wheel\n    translate([-wheelbase/2, 0, clearance + tire_d/2])\n        union() {\n            color(\"black\") tire(tire_d, tire_w);\n            wheel(tire_d, tire_w);\n        }\n    \n    // Front wheel\n    translate([wheelbase/2, 0, clearance + tire_d/2])\n        union() {\n            color(\"black\") tire(tire_d, tire_w);\n            wheel(tire_d, tire_w);\n        }\n    \n    frame();\n    front_fork();\n    swingarm();\n    engine();\n    seat();\n    exhaust();\n    handlebar();\n    \n    // Skid plate\n    color(\"gray\")\n    translate([0, 0, clearance - 2])\n        cube([30, 16, 2], center = true);\n}",
    "renders": true
  },
  {
    "vehicle": "baggers",
    "openscad_code": "// Realistic medium-complexity baggers (baggers motorcycle)\n// All dimensions in mm, designed for 3D printing (no crazy overhangs)\n// Total length ~80 mm\n\n$fn = 36;  // roundness\n\n// Parameters\nwheel_r = 12;\nwheel_w = 6;\nfork_r = 4;\nframe_t = 4;  // tube thickness\nfender_t = 1.5;\nseat_h = 8;\nseat_w = 20;\ntank_l = 25;\ntank_w = 14;\ntank_h = 15;\nhandle_w = 28;\nhandle_r = 2;\nengine_l = 18;\nengine_w = 12;\nengine_h = 10;\nsaddlebag_l = 22;\nsaddlebag_h = 12;\nsaddlebag_w = 10;\n\n// Main assembly\nunion() {\n    // Rear wheel\n    translate([0, 0, wheel_r])\n        wheel();\n\n    // Front wheel\n    translate([-55, 0, wheel_r])\n        wheel();\n\n    // Front fork\n    translate([-55, 0, wheel_r])\n        cylinder(h = 30, r = fork_r);\n\n    // Rear fender\n    translate([0, 0, wheel_r * 2 - 1])\n        difference() {\n            cube([wheel_w + 4, saddlebag_w + 10, fender_t], center = true);\n            translate([0, 0, -fender_t])\n                cube([wheel_w + 10, saddlebag_w + 20, fender_t * 2], center = true);\n        }\n\n    // Main frame (simplified tubes)\n    color(\"gray\")\n    union() {\n        // Down tube\n        translate([-40, 0, wheel_r * 2])\n            rotate([90, 0, 0])\n                cylinder(h = 30, r = frame_t);\n\n        // Top tube\n        translate([-40, 0, wheel_r * 2 + 25])\n            rotate([0, 0, 0])\n                cube([35, frame_t * 2, frame_t * 2]);\n\n        // Seat stays\n        translate([-5, 0, wheel_r * 2 + 15])\n            rotate([0, 0, 35])\n                cube([30, frame_t * 2, frame_t * 2]);\n    }\n\n    // Fuel tank\n    color(\"darkgreen\")\n    translate([-25, 0, wheel_r * 2 + tank_h / 2])\n        difference() {\n            scale([1, 0.8, 0.7])\n                sphere(d = tank_l);\n            translate([0, 0, -tank_h / 2 - 1])\n                cube([tank_l + 2, tank_w + 2, tank_h], center = true);\n        }\n\n    // Seat\n    color(\"black\")\n    translate([-8, 0, wheel_r * 2 + seat_h / 2])\n        cube([seat_w, seat_w * 0.6, seat_h], center = true);\n\n    // Handlebars\n    color(\"gray\")\n    translate([-50, 0, wheel_r * 2 + 25])\n        rotate([0, 0, 90])\n            cylinder(h = handle_w, r = handle_r);\n\n    // Engine block\n    color(\"darkgray\")\n    translate([-30, 0, wheel_r + engine_h / 2])\n        cube([engine_l, engine_w, engine_h], center = true);\n\n    // Exhaust pipes (simple)\n    color(\"silver\")\n    for (y = [-engine_w / 2 + 2, engine_w / 2 - 2]) {\n        translate([-30, y, wheel_r])\n            rotate([0, 90, 0])\n                cylinder(h = 20, r = 2);\n    }\n\n    // Saddlebags\n    color(\"brown\")\n    for (y = [-saddlebag_w / 2 - 5, saddlebag_w / 2 + 5]) {\n        translate([10, y, wheel_r])\n            cube([saddlebag_l, saddlebag_w, saddlebag_h], center = true);\n    }\n\n    // Headlight\n    color(\"yellow\")\n    translate([-55, 0, wheel_r * 2 + 15])\n        sphere(d = 8);\n}\n\n// Wheel module\nmodule wheel() {\n    difference() {\n        union() {\n            // Tire\n            color(\"black\")\n            cylinder(h = wheel_w, r = wheel_r, center = true);\n            // Rim\n            color(\"silver\")\n            cylinder(h = wheel_w + 0.5, r = wheel_r - 3, center = true);\n        }\n        // Axle hole\n        cylinder(h = wheel_w + 2, r = 2, center = true);\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "trike",
    "openscad_code": "// Realistic-style 3D-printable trike, medium complexity\n// Overall length ≈ 90 mm, width ≈ 60 mm, height ≈ 45 mm\n// Wall thickness ≥ 1 mm everywhere, no steep overhangs\n\n// Main module\nmodule trike() {\n    // Frame and seat\n    color(\"silver\") frame();\n    color(\"black\") seat();\n    \n    // Front end\n    color(\"silver\") front_fork();\n    color(\"black\") front_wheel();\n    \n    // Rear axle\n    color(\"silver\") rear_axle();\n    color(\"black\") for (i = [-1, 1]) mirror([i, 0, 0]) rear_wheel();\n    \n    // Handlebar\n    color(\"black\") handlebar();\n    \n    // Drivetrain\n    color(\"silver\") pedals();\n}\n\n// Central frame tube\nmodule frame() {\n    // Main tube\n    rotate([0, -12, 0]) \n        cylinder(h = 70, d = 8, $fn = 16);\n    \n    // Seat post\n    translate([0, 0, 40])\n        cylinder(h = 15, d = 6, $fn = 16);\n    \n    // Rear fork tubes\n    for (side = [-1, 1]) {\n        translate([0, 0, 25])\n            rotate([30, 0, side * 15])\n                cylinder(h = 30, d = 5, $fn = 16);\n    }\n}\n\n// Simple seat\nmodule seat() {\n    translate([-5, 0, 55])\n        rotate([0, 10, 0])\n            scale([1, 1.5, 0.4])\n                sphere(d = 18, $fn = 20);\n}\n\n// Front fork\nmodule front_fork() {\n    translate([65, 0, 25])\n        rotate([0, 90, 0])\n            cylinder(h = 20, d = 6, $fn = 16);\n    \n    translate([65, 0, 25])\n        rotate([0, 90, 0])\n            rotate([0, 0, 25])\n                cylinder(h = 25, d = 4, $fn = 16);\n    \n    translate([65, 0, 25])\n        rotate([0, 90, 0])\n            rotate([0, 0, -25])\n                cylinder(h = 25, d = 4, $fn = 16);\n}\n\n// Front wheel\nmodule front_wheel() {\n    translate([80, 0, 25])\n        rotate([90, 0, 0])\n            rotate_extrude($fn = 60)\n                translate([15, 0, 0])\n                    circle(r = 2);\n    \n    translate([80, 0, 25])\n        rotate([90, 0, 0])\n            for (i = [0:30:360])\n                rotate([0, 0, i])\n                    cylinder(h = 4, d = 1, $fn = 8);\n}\n\n// Rear axle\nmodule rear_axle() {\n    translate([-30, 0, 15])\n        rotate([0, 90, 0])\n            cylinder(h = 60, d = 6, $fn = 16);\n}\n\n// Rear wheel\nmodule rear_wheel() {\n    rotate([90, 0, 0])\n        rotate_extrude($fn = 60)\n            translate([15, 0, 0])\n                circle(r = 2);\n    \n    rotate([90, 0, 0])\n        for (i = [0:30:360])\n            rotate([0, 0, i])\n                cylinder(h = 4, d = 1, $fn = 8);\n}\n\n// Handlebar assembly\nmodule handlebar() {\n    translate([65, 0, 45])\n        rotate([0, 0, 90])\n            cylinder(h = 30, d = 4, $fn = 16);\n    \n    translate([65, 0, 45])\n        rotate([0, 0, 10])\n            cylinder(h = 15, d = 3, $fn = 16);\n    \n    translate([65, 0, 45])\n        rotate([0, 0, -10])\n            cylinder(h = 15, d = 3, $fn = 16);\n    \n    translate([65, 15, 45])\n        sphere(d = 5, $fn = 16);\n    \n    translate([65, -15, 45])\n        sphere(d = 5, $fn = 16);\n}\n\n// Pedals and crank\nmodule pedals() {\n    translate([20, 0, 15])\n        rotate([0, 90, 0])\n            cylinder(h = 20, d = 4, $fn = 16);\n    \n    for (side = [-1, 1]) {\n        translate([20, side * 12, 15])\n            rotate([0, 0, side * 90])\n                cube([12, 6, 2], center = true);\n        \n        translate([20, side * 18, 15])\n            sphere(d = 6, $fn = 16);\n    }\n}\n\n// Render\ntrike();",
    "renders": true
  },
  {
    "vehicle": "quad",
    "openscad_code": "// Realistic Quad (medium complexity)\n// 4-rotor drone body with arms, motors, props, landing gear\n\n// Overall scale\noverall_scale = 0.8;\n\n// Body dimensions\nbody_w = 40;\nbody_l = 40;\nbody_h = 15;\n\n// Arm dimensions\narm_len = 60;\narm_r = 4;\n\n// Motor dimensions\nmotor_r = 12;\nmotor_h = 10;\n\n// Prop dimensions\nprop_r = 28;\nprop_t = 1.5;\n\n// Landing gear\nleg_h = 15;\nleg_r = 2;\n\nmodule body() {\n    // Main central shell\n    difference() {\n        translate([0,0,body_h/2])\n            cube([body_w,body_l,body_h], center=true);\n        \n        // Hollow cavity for electronics\n        translate([0,0,body_h/2-2])\n            cube([body_w-4,body_l-4,body_h-2], center=true);\n        \n        // Top vent holes for cooling\n        for(x=[-12,0,12])\n            for(y=[-12,0,12])\n                translate([x,y,body_h-1])\n                    cylinder(h=3,r=2,$fn=12);\n    }\n    \n    // Battery hatch detail\n    translate([0,body_l/2+2,body_h/2])\n        cube([body_w-10,2,3], center=true);\n}\n\nmodule arm(x,y,angle) {\n    translate([x,y,body_h/2])\n        rotate([0,0,angle])\n            union() {\n                // Arm tube\n                cylinder(h=arm_len, r=arm_r, $fn=16);\n                \n                // Motor mount plate\n                translate([0,arm_len,0])\n                    difference() {\n                        cylinder(h=motor_h, r=motor_r+2, $fn=32);\n                        cylinder(h=motor_h+1, r=motor_r, $fn=32);\n                    }\n            }\n}\n\nmodule propeller(x,y,z) {\n    translate([x,y,z])\n        rotate([0,0,45])\n            for(i=[0:45:315]) {\n                rotate([0,0,i])\n                    translate([prop_r/2,0,0])\n                        cube([prop_r,4,prop_t], center=true);\n            }\n}\n\nmodule landing_leg(x,y) {\n    translate([x,y,0])\n        rotate([10,0,0])\n            union() {\n                // Main leg\n                cylinder(h=leg_h, r=leg_r, $fn=12);\n                \n                // Foot pad\n                translate([0,0,leg_h])\n                    cylinder(h=1, r=leg_r+3, $fn=16);\n            }\n}\n\n// Build the quad\nscale(overall_scale) {\n    union() {\n        // Central body\n        body();\n        \n        // Four arms at 45 degree angles\n        arm(body_w/2,body_l/2,45);\n        arm(-body_w/2,body_l/2,135);\n        arm(-body_w/2,-body_l/2,225);\n        arm(body_w/2,-body_l/2,315);\n        \n        // Motors on each arm end\n        // Front right\n        translate([body_w/2+arm_len/sqrt(2),body_l/2+arm_len/sqrt(2),body_h/2+motor_h])\n            cylinder(h=motor_h, r=motor_r, $fn=24);\n        \n        // Front left  \n        translate([-body_w/2-arm_len/sqrt(2),body_l/2+arm_len/sqrt(2),body_h/2+motor_h])\n            cylinder(h=motor_h, r=motor_r, $fn=24);\n            \n        // Rear left\n        translate([-body_w/2-arm_len/sqrt(2),-body_l/2-arm_len/sqrt(2),body_h/2+motor_h])\n            cylinder(h=motor_h, r=motor_r, $fn=24);\n            \n        // Rear right\n        translate([body_w/2+arm_len/sqrt(2),-body_l/2-arm_len/sqrt(2),body_h/2+motor_h])\n            cylinder(h=motor_h, r=motor_r, $fn=24);\n        \n        // Propellers\n        // Alternate rotation directions\n        propeller(body_w/2+arm_len/sqrt(2),body_l/2+arm_len/sqrt(2),body_h/2+motor_h*2);\n        propeller(-body_w/2-arm_len/sqrt(2),body_l/2+arm_len/sqrt(2),body_h/2+motor_h*2);\n        propeller(-body_w/2-arm_len/sqrt(2),-body_l/2-arm_len/sqrt(2),body_h/2+motor_h*2);\n        rotate([0,0,45])\n            propeller(body_w/2+arm_len/sqrt(2),-body_l/2-arm_len/sqrt(2),body_h/2+motor_h*2);\n        \n        // Landing gear\n        landing_leg(body_w/2-5,body_l/2-5);\n        landing_leg(-body_w/2+5,body_l/2-5);\n        landing_leg(-body_w/2+5,-body_l/2+5);\n        landing_leg(body_w/2-5,-body_l/2+5);\n        \n        // Camera gimbal mount\n        translate([0,0,-leg_h])\n            cylinder(h=8, r=6, $fn=16);\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "unicycle",
    "openscad_code": "// Realistic Unicycle - Medium Complexity\n// Wheel diameter: 60mm, Overall height: 85mm\n\nmodule wheel() {\n    // Tire\n    difference() {\n        cylinder(h=8, d=62, $fn=64);\n        translate([0, 0, 1])\n            cylinder(h=8, d=52, $fn=64);\n    }\n    \n    // Rim\n    difference() {\n        translate([0, 0, 1])\n            cylinder(h=6, d=50, $fn=64);\n        translate([0, 0, 2])\n            cylinder(h=6, d=44, $fn=64);\n    }\n    \n    // Spokes (8 spokes in star pattern)\n    for(i=[0:7]) {\n        rotate([0, 0, i*45])\n            translate([23, 0, 4])\n                cube([12, 2, 2], center=true);\n    }\n    \n    // Hub\n    difference() {\n        translate([0, 0, 3])\n            cylinder(h=4, d=12, $fn=32);\n        translate([0, 0, 3.5])\n            cylinder(h=3, d=6, $fn=32);\n    }\n}\n\nmodule fork() {\n    // Fork legs\n    translate([-4, 0, 0])\n        cylinder(h=35, d=8, $fn=16);\n    translate([4, 0, 0])\n        cylinder(h=35, d=8, $fn=16);\n    \n    // Fork crown\n    translate([0, 0, 35])\n        cube([18, 4, 8], center=true);\n    \n    // Fork bridge\n    translate([0, 0, 20])\n        cube([18, 4, 3], center=true);\n}\n\nmodule seat() {\n    // Saddle base\n    translate([0, 0, 43])\n        cube([40, 30, 8], center=true);\n    \n    // Saddle top (curved)\n    translate([0, 0, 51])\n        scale([1, 1, 0.3])\n            sphere(d=42, $fn=32);\n    \n    // Seatpost clamp\n    translate([0, 0, 43])\n        cylinder(h=10, d=16, $fn=32);\n    \n    // Seatpost\n    translate([0, 0, 38])\n        cylinder(h=5, d=12, $fn=32);\n}\n\nmodule pedals() {\n    // Crank arms\n    translate([0, 0, 0])\n        rotate([90, 0, 0])\n            cylinder(h=20, d=6, $fn=16);\n    \n    translate([0, 0, 8])\n        rotate([90, 0, 180])\n            cylinder(h=20, d=6, $fn=16);\n    \n    // Pedals\n    translate([0, 20, 0])\n        rotate([0, 90, 0])\n            cube([15, 8, 6], center=true);\n    \n    translate([0, -20, 8])\n        rotate([0, 90, 0])\n            cube([15, 8, 6], center=true);\n}\n\n// Assembly\nunion() {\n    // Wheel assembly\n    rotate([90, 0, 0])\n        translate([0, 0, 0])\n            wheel();\n    \n    // Fork\n    translate([0, 0, 31])\n        fork();\n    \n    // Seat\n    seat();\n    \n    // Pedals and cranks\n    pedals();\n}",
    "renders": true
  },
  {
    "vehicle": "tandem",
    "openscad_code": "// TANDEM BICYCLE – Realistic style, medium complexity\n// 3D-printable, 80 mm long, no large overhangs\n\n$fn = 32;                // smooth curves\n\n// ---------- PARAMETERS ----------\nwheel_r      = 10;\nwheel_w      = 3;\ntire_thick   = 1.5;\nframe_t      = 2;        // tube thickness\ncrank_len    = 5;\npedal_w      = 4;\nsaddle_h     = 4;\nsaddle_w     = 6;\nsaddle_d     = 10;\nhandle_w     = 8;\nhandle_diam  = 1.5;\n\n// ---------- WHEEL MODULE ----------\nmodule wheel() {\n    rotate([90,0,0])\n    difference() {\n        cylinder(r=wheel_r, h=wheel_w, center=true);              // tire\n        cylinder(r=wheel_r-tire_thick, h=wheel_w+0.1, center=true); // rim\n    }\n}\n\n// ---------- CRANK / PEDAL MODULE ----------\nmodule crank() {\n    rotate([90,0,0]) {\n        // crank arm\n        color(\"silver\")\n        translate([0,0,-crank_len/2])\n            cube([frame_t, frame_t, crank_len], center=true);\n        // pedal\n        color(\"black\")\n        translate([0,0,-crank_len])\n            rotate([0,90,0])\n            cube([pedal_w, 2, 5], center=true);\n    }\n}\n\n// ---------- SADDLE ----------\nmodule saddle() {\n    color(\"black\")\n    difference() {\n        cube([saddle_w, saddle_d, saddle_h], center=true);\n        translate([0,2,2])\n            cube([saddle_w+1, saddle_d, saddle_h], center=true);\n    }\n}\n\n// ---------- HANDLEBAR ----------\nmodule handlebar() {\n    color(\"black\")\n    union() {\n        // stem\n        cylinder(h=10, r=handle_diam, center=false);\n        // bar\n        translate([0,0,10])\n            rotate([0,90,0])\n            cylinder(h=handle_w, r=handle_diam, center=true);\n    }\n}\n\n// ---------- FRAME ----------\nmodule frame() {\n    color(\"silver\")\n    union() {\n        // rear bottom bracket shell\n        translate([0,0,0])\n            cylinder(h=frame_t*2, r=frame_t, center=true);\n        \n        // main down-tube front -> bottom bracket\n        hull() {\n            translate([0,0,0]) sphere(r=frame_t);\n            translate([55,0,10]) sphere(r=frame_t);\n        }\n        \n        // seat-tube rear -> saddle\n        hull() {\n            translate([0,0,0]) sphere(r=frame_t);\n            translate([-5,0,25]) sphere(r=frame_t);\n        }\n        \n        // top tube rear -> front\n        hull() {\n            translate([-5,0,25]) sphere(r=frame_t);\n            translate([55,0,25]) sphere(r=frame_t);\n        }\n        \n        // front head tube\n        translate([55,0,25])\n            cylinder(h=frame_t*2, r=frame_t, center=true);\n        \n        // fork blades\n        hull() {\n            translate([55,0,25]) sphere(r=frame_t);\n            translate([55,0,10]) sphere(r=frame_t);\n        }\n        hull() {\n            translate([55,0,25]) sphere(r=frame_t);\n            translate([55,0,10]) sphere(r=frame_t);\n        }\n        \n        // rear seat-stays\n        hull() {\n            translate([-5,0,25]) sphere(r=frame_t);\n            translate([-15,0,10]) sphere(r=frame_t);\n        }\n        hull() {\n            translate([-5,0,25]) sphere(r=frame_t);\n            translate([15,0,10]) sphere(r=frame_t);\n        }\n        \n        // chain-stays\n        hull() {\n            translate([0,0,0]) sphere(r=frame_t);\n            translate([-15,0,10]) sphere(r=frame_t);\n        }\n        hull() {\n            translate([0,0,0]) sphere(r=frame_t);\n            translate([15,0,10]) sphere(r=frame_t);\n        }\n    }\n}\n\n// ---------- ASSEMBLY ----------\n// Frame\nframe();\n\n// Wheels\ntranslate([-15,0,10]) wheel();\ntranslate([15,0,10]) wheel();\ntranslate([55,0,10]) wheel();\n\n// Crank sets\ntranslate([0,-wheel_w,0]) crank();\ntranslate([0, wheel_w,0]) crank();\nmirror([1,0,0]) translate([0,-wheel_w,0]) crank();\nmirror([1,0,0]) translate([0, wheel_w,0]) crank();\n\n// Saddles\ntranslate([-5,0,25+saddle_h/2]) saddle();\ntranslate([25,0,25+saddle_h/2]) saddle();\n\n// Handlebars\ntranslate([55,0,25+10]) handlebar();\ntranslate([25,0,25+10]) handlebar();",
    "renders": true
  },
  {
    "vehicle": "recumbent",
    "openscad_code": "// Recumbent bicycle - medium complexity realistic style\n// Designed for 3D printing, ~70mm length\n\n$fn = 24;\n\n// Main assembly\nmodule recumbent_bike() {\n    color(\"silver\")\n    union() {\n        // Main frame triangle\n        frame();\n        \n        // Seat\n        seat();\n        \n        // Front boom and handlebars\n        front_assembly();\n        \n        // Rear wheel assembly\n        rear_wheel_assembly();\n        \n        // Front wheel assembly\n        front_wheel_assembly();\n        \n        // Chain and cranks\n        chain_assembly();\n    }\n}\n\n// Main frame structure\nmodule frame() {\n    // Bottom bracket shell\n    translate([15, -8, 5])\n        cylinder(h=8, r=4, center=true);\n    \n    // Main tube\n    translate([-10, -8, 5])\n        rotate([0, 90, 0])\n        cylinder(h=50, r=2.5, center=true);\n    \n    // Seat tube\n    translate([-10, 10, 5])\n        rotate([0, 90, 0])\n        cylinder(h=20, r=2, center=true);\n    \n    // Chain stays\n    translate([0, 0, 5])\n        rotate([0, 0, 10])\n        cylinder(h=25, r=1.5, center=true);\n    \n    // Seat stays\n    translate([-10, 10, 5])\n        rotate([0, 0, -30])\n        cylinder(h=20, r=1.5, center=true);\n}\n\n// Mesh seat\nmodule seat() {\n    translate([-15, 12, 8])\n    rotate([90, 0, 0])\n    union() {\n        // Seat frame\n        difference() {\n            cube([30, 15, 2], center=true);\n            cube([28, 13, 3], center=true);\n        }\n        \n        // Mesh pattern\n        for(x = [-12:4:12]) {\n            for(y = [-6:3:6]) {\n                translate([x, y, 0])\n                cylinder(h=2.5, r=0.5);\n            }\n        }\n    }\n}\n\n// Front boom and handlebars\nmodule front_assembly() {\n    // Boom tube\n    translate([35, -8, 5])\n    rotate([0, 0, -15])\n    cylinder(h=30, r=2, center=true);\n    \n    // Headset\n    translate([50, -8, 5])\n    cylinder(h=8, r=3, center=true);\n    \n    // Handlebars\n    translate([50, -8, 10])\n    rotate([0, 90, 0])\n    cylinder(h=20, r=1.5, center=true);\n    \n    // Handlebar grips\n    translate([50, -8, 20])\n    rotate([0, 90, 0])\n    cylinder(h=8, r=2, center=true);\n    \n    translate([50, -8, 0])\n    rotate([0, 90, 0])\n    cylinder(h=8, r=2, center=true);\n}\n\n// Rear wheel\nmodule rear_wheel_assembly() {\n    translate([-20, 0, 5])\n    rotate([0, 0, 0])\n    union() {\n        // Rim\n        difference() {\n            cylinder(h=4, r=12, center=true);\n            cylinder(h=5, r=10, center=true);\n        }\n        \n        // Spokes\n        for(i = [0:30:360]) {\n            rotate([0, 0, i])\n            translate([11, 0, 0])\n            rotate([90, 0, 0])\n            cylinder(h=4, r=0.5, center=true);\n        }\n        \n        // Hub\n        cylinder(h=6, r=3, center=true);\n    }\n}\n\n// Front wheel\nmodule front_wheel_assembly() {\n    translate([50, -8, 5])\n    rotate([0, 0, 0])\n    union() {\n        // Fork\n        translate([0, -6, 0])\n        rotate([0, 0, -10])\n        cylinder(h=12, r=1.5, center=true);\n        \n        translate([0, 6, 0])\n        rotate([0, 0, 10])\n        cylinder(h=12, r=1.5, center=true);\n        \n        // Front rim\n        difference() {\n            cylinder(h=4, r=10, center=true);\n            cylinder(h=5, r=8, center=true);\n        }\n        \n        // Front spokes\n        for(i = [0:30:360]) {\n            rotate([0, 0, i])\n            translate([9, 0, 0])\n            rotate([90, 0, 0])\n            cylinder(h=4, r=0.5, center=true);\n        }\n        \n        // Front hub\n        cylinder(h=6, r=2.5, center=true);\n    }\n}\n\n// Chain and cranks\nmodule chain_assembly() {\n    color(\"darkgray\")\n    union() {\n        // Chain\n        translate([15, -8, 3])\n        rotate([0, 0, 0])\n        linear_extrude(height=1)\n        polygon(points=[[0,0], [30,2], [25,5], [-5,3]]);\n        \n        // Crank arms\n        translate([15, -8, 3])\n        rotate([0, 0, 0])\n        cylinder(h=8, r=1.5, center=true);\n        \n        translate([15, -8, 3])\n        rotate([0, 0, 90])\n        cylinder(h=12, r=1, center=true);\n        \n        // Pedal\n        translate([15, -8, 3])\n        rotate([0, 0, 90])\n        translate([6, 0, 0])\n        cube([8, 4, 1], center=true);\n    }\n}\n\n// Render the complete bike\nrecumbent_bike();",
    "renders": true
  },
  {
    "vehicle": "pennyfarthing",
    "openscad_code": "// Pennyfarthing High-Wheel Bicycle – Realistic, Medium Complexity\n// Approx. 60 mm total length – printable without support\n\n$fa = 2; $fs = 0.4;\n\n// Overall scale factor\nscale_factor = 0.6;          // 1:1 would be ~100 mm long\n\n// Main module\nmodule pennyfarthing() {\n    scale(scale_factor) {\n\n        // --- Large front wheel -------------------------------------------------\n        // Solid tyre + spoke ring\n        color(\"gray\") translate([0,0,8]) rotate([90,0,0])\n            cylinder(h=16, r1=50, r2=50, center=true);      // tyre\n        color(\"silver\") translate([0,0,8]) rotate([90,0,0])\n            cylinder(h=14, r1=46, r2=46, center=true);      // rim\n\n        // 12 simple round spokes\n        for (i = [0:11]) {\n            rotate([0,0,i*30])\n                translate([0,0,8])\n                rotate([90,0,0])\n                    cylinder(h=14, r1=1.5, r2=1.5, center=true);\n        }\n\n        // --- Small rear wheel --------------------------------------------------\n        color(\"gray\") translate([-70,0,8]) rotate([90,0,0])\n            cylinder(h=12, r1=14, r2=14, center=true);      // tyre\n        color(\"silver\") translate([-70,0,8]) rotate([90,0,0])\n            cylinder(h=10, r1=12, r2=12, center=true);      // rim\n        // 4 spokes\n        for (i = [0:3]) {\n            rotate([0,0,i*90])\n                translate([-70,0,8])\n                rotate([90,0,0])\n                    cylinder(h=10, r1=1, r2=1, center=true);\n        }\n\n        // --- Frame tubes (all 5 mm thick) --------------------------------------\n        color(\"darkslategray\") {\n            // Main curved fork\n            hull() {\n                translate([0,0,50]) cylinder(h=5, r=2.5, center=true);\n                translate([-50,0,8]) cylinder(h=5, r=2.5, center=true);\n            }\n\n            // Rear fork\n            hull() {\n                translate([-40,0,30]) cylinder(h=5, r=2.5, center=true);\n                translate([-70,0,8]) cylinder(h=5, r=2.5, center=true);\n            }\n\n            // Backbone\n            hull() {\n                translate([-40,0,30]) cylinder(h=5, r=2.5, center=true);\n                translate([0,0,50]) cylinder(h=5, r=2.5, center=true);\n            }\n\n            // Seat post\n            cylinder(h=30, r=2.5, center=true);  \n            translate([-20,0,65]) cylinder(h=5, r=2.5, center=true); // cross bar\n        }\n\n        // --- Seat --------------------------------------------------------------\n        color(\"brown\") {\n            translate([-20,0,65])\n                rotate([0,90,0])\n                scale([1,0.7,0.15])\n                    sphere(10);\n        }\n\n        // --- Handlebars --------------------------------------------------------\n        color(\"darkslategray\") {\n            translate([0,0,50])\n                rotate([90,0,0])\n                    cylinder(h=25, r=2.5, center=true); // stem\n            translate([0,12.5,50])\n                rotate([0,90,0])\n                    cylinder(h=30, r=2.5, center=true); // bar\n        }\n\n        // --- Crank & pedals ----------------------------------------------------\n        color(\"silver\") {\n            // Pedal arm\n            translate([0,0,8])\n                rotate([90,0,0])\n                    cylinder(h=20, r=2, center=true);\n            // Pedal\n            translate([0,20,8])\n                rotate([0,90,0])\n                    cube([12,5,2], center=true);\n        }\n\n        // --- Optional fender curve (thin printable) ----------------------------\n        color(\"gray\", 0.6) {\n            for (a = [0:5:150])\n                translate([50*cos(a), 0, 8 + 50*sin(a)])\n                    sphere(1.5);\n        }\n    }\n}\n\npennyfarthing();",
    "renders": true
  },
  {
    "vehicle": "fixie",
    "openscad_code": "// Fixie bike model - realistic style, medium complexity\n// 3D printable single-speed fixed-gear bicycle\n\n$fn = 32; // Smooth curves\n\n// Overall dimensions (mm)\nbike_length = 85;\nwheel_diameter = 30;\nwheel_width = 5;\nframe_tube_diameter = 3;\nseat_tube_angle = 75; // degrees from horizontal\n\nmodule wheel() {\n    // Tire\n    color(\"black\")\n    difference() {\n        cylinder(h=wheel_width, d=wheel_diameter, center=true);\n        cylinder(h=wheel_width+0.1, d=wheel_diameter-4, center=true);\n    }\n    \n    // Rim\n    color(\"silver\")\n    difference() {\n        cylinder(h=wheel_width-0.5, d=wheel_diameter-4, center=true);\n        cylinder(h=wheel_width+0.1, d=wheel_diameter-8, center=true);\n    }\n    \n    // Spokes\n    color(\"gray\")\n    for(i=[0:7]) {\n        rotate([0, 0, i*45])\n        cube([wheel_diameter/2-3, 0.5, 0.5], center=true);\n    }\n    \n    // Hub\n    color(\"gray\")\n    cylinder(h=wheel_width+1, d=5, center=true);\n}\n\nmodule frame_tube(length, diameter=frame_tube_diameter) {\n    cylinder(h=length, d=diameter, center=true);\n}\n\nmodule bike_frame() {\n    color(\"silver\")\n    union() {\n        // Main triangle\n        // Top tube\n        translate([0, 0, 0])\n        rotate([0, -90, 0])\n        frame_tube(45);\n        \n        // Seat tube\n        translate([-15, 0, 0])\n        rotate([0, -(90-seat_tube_angle), 0])\n        frame_tube(30);\n        \n        // Down tube\n        translate([-15, 0, 0])\n        rotate([0, -45, 0])\n        frame_tube(50);\n        \n        // Seat stays\n        translate([-40, 0, 0])\n        rotate([0, -65, 0])\n        frame_tube(35);\n        \n        // Chain stays\n        translate([-40, 0, 0])\n        rotate([0, -180, 0])\n        frame_tube(35);\n        \n        // Fork\n        translate([35, 0, 0])\n        rotate([0, -70, 0])\n        frame_tube(30);\n    }\n}\n\nmodule crankset() {\n    color(\"gray\")\n    union() {\n        // Chainring\n        difference() {\n            cylinder(h=2, d=18, center=true);\n            for(i=[0:4]) {\n                rotate([0, 0, i*72])\n                translate([0, 6, 0])\n                cube([2, 5, 3], center=true);\n            }\n            cylinder(h=3, d=6, center=true);\n        }\n        \n        // Crank arm\n        rotate([0, 90, 0])\n        translate([0, 9, 0])\n        cube([2, 15, 2], center=true);\n        \n        // Pedal\n        translate([0, 15, 0])\n        cube([4, 2, 1], center=true);\n    }\n}\n\nmodule handlebars() {\n    color(\"black\")\n    union() {\n        // Stem\n        translate([30, 0, 12])\n        rotate([0, 90, 0])\n        frame_tube(15);\n        \n        // Handlebar\n        translate([37, 0, 12])\n        rotate([0, 0, 0])\n        frame_tube(20);\n        \n        // Grips\n        translate([37, 9, 12])\n        cylinder(h=4, d=3, center=true);\n        \n        translate([37, -9, 12])\n        cylinder(h=4, d=3, center=true);\n    }\n}\n\nmodule seat() {\n    color(\"black\")\n    difference() {\n        // Saddle\n        translate([-15, 0, 25])\n        scale([1.5, 0.5, 0.3])\n        sphere(d=15);\n        \n        // Cutout\n        translate([-15, 0, 25.5])\n        scale([1.3, 0.3, 0.2])\n        sphere(d=15);\n    }\n    \n    // Seatpost\n    color(\"silver\")\n    translate([-15, 0, 20])\n    cylinder(h=10, d=2, center=true);\n}\n\n// Assemble the bike\nunion() {\n    bike_frame();\n    \n    // Rear wheel\n    translate([-40, 0, 0])\n    wheel();\n    \n    // Front wheel\n    translate([40, 0, 0])\n    wheel();\n    \n    // Crankset\n    translate([0, 0, -wheel_width/2-1])\n    crankset();\n    \n    // Handlebars\n    handlebars();\n    \n    // Seat\n    seat();\n}",
    "renders": true
  },
  {
    "vehicle": "singlespeed",
    "openscad_code": "// Singlespeed Bike - Medium Complexity Realistic Style\n// Total length ~75mm, printable in one piece\n\n$fn=32;\n\n// Main module\nmodule singlespeed() {\n    // Frame color\n    color(\"darkslategray\") {\n        // Main triangle\n        union() {\n            // Top tube\n            translate([0, 0, 35]) rotate([0, -12, 0])\n                cylinder(h=50, d=5, center=true);\n            \n            // Seat tube\n            translate([0, 0, 5]) rotate([0, 75, 0])\n                cylinder(h=45, d=6, center=true);\n                \n            // Down tube\n            translate([0, 0, 5]) rotate([0, -45, 0])\n                cylinder(h=55, d=6, center=true);\n                \n            // Seat stays\n            translate([-22, 0, 15]) rotate([0, 45, 0])\n                cylinder(h=35, d=4, center=true);\n                \n            // Chain stays\n            translate([22, 0, 15]) rotate([0, -8, 0])\n                cylinder(h=40, d=4, center=true);\n                \n            // Head tube\n            translate([25, 0, 28]) rotate([0, -12, 0])\n                cylinder(h=12, d=8);\n                \n            // Seat tube top\n            translate([-23, 0, 38]) rotate([0, 75, 0])\n                cylinder(h=10, d=6);\n        }\n    }\n    \n    // Fork\n    color(\"darkslategray\") {\n        translate([25, 0, 15]) rotate([0, 25, 0])\n            cylinder(h=35, d=5);\n        translate([25, 0, 15]) rotate([0, 25, 0])\n            cylinder(h=35, d=5);\n    }\n    \n    // Wheels\n    module wheel(pos, rot) {\n        translate(pos) rotate([0, 0, rot]) {\n            // Tire\n            color(\"black\") difference() {\n                cylinder(h=7, d=30);\n                translate([0, 0, 1]) cylinder(h=7, d=26);\n            }\n            \n            // Rim\n            color(\"silver\") difference() {\n                cylinder(h=5, d=26);\n                translate([0, 0, 1]) cylinder(h=5, d=22);\n            }\n            \n            // Spokes\n            for(i=[0:8]) {\n                rotate([0, 0, i*45]) color(\"silver\")\n                    cube([12, 1, 1], center=true);\n            }\n            \n            // Hub\n            color(\"gray\") {\n                cylinder(h=9, d=6);\n                translate([-1, 0, 0]) rotate([90, 0, 0])\n                    cylinder(h=8, d=3, center=true);\n            }\n        }\n    }\n    \n    wheel([-24, 0, 5], 0);\n    wheel([24, 0, 5], 0);\n    \n    // Crankset\n    color(\"silver\") {\n        // Bottom bracket\n        translate([-2, 0, 8]) rotate([90, 0, 0])\n            cylinder(h=10, d=8);\n            \n        // Chainring\n        translate([-2, 0, 8]) rotate([90, 0, 0]) difference() {\n            cylinder(h=3, d=24);\n            for(i=[0:4]) {\n                rotate([0, 0, i*72]) translate([8, 0, 0])\n                    cube([6, 2, 3], center=true);\n            }\n        }\n        \n        // Crank arm\n        translate([-2, 0, 8]) rotate([90, 0, 0]) rotate([0, 0, -30])\n            cube([3, 25, 3], center=true);\n            \n        // Pedal\n        translate([-2, 15, 8]) rotate([90, 0, 0]) rotate([0, 0, -30])\n            cube([8, 3, 2], center=true);\n    }\n    \n    // Handlebars\n    color(\"black\") {\n        // Stem\n        translate([25, 0, 35]) rotate([0, -12, 0]) rotate([0, 90, 0])\n            cylinder(h=12, d=5);\n            \n        // Bars\n        translate([25, 0, 42]) rotate([0, -12, 0])\n            rotate([15, 0, 0]) cube([20, 3, 3], center=true);\n            \n        // Grips\n        color(\"rubber\") {\n            translate([25, 0, 42]) rotate([0, -12, 0])\n                rotate([15, 0, 0]) translate([10, 0, 0])\n                cube([5, 4, 4], center=true);\n                \n            translate([25, 0, 42]) rotate([0, -12, 0])\n                rotate([15, 0, 0]) translate([-10, 0, 0])\n                cube([5, 4, 4], center=true);\n        }\n    }\n    \n    // Saddle\n    color(\"black\") difference() {\n        translate([-28, 0, 38]) scale([1.2, 0.8, 0.3])\n            sphere(d=12);\n        translate([-28, 0, 38]) scale([0.8, 0.6, 0.4])\n            sphere(d=12);\n    }\n    \n    // Seatpost clamp\n    color(\"silver\") cylinder(h=4, d=7);\n}\n\n// Render the bike\nsinglespeed();",
    "renders": true
  },
  {
    "vehicle": "roadbike",
    "openscad_code": "// Road Bike - Realistic Style, Medium Complexity\n// Designed for 3D printing without supports\n\n// Main parameters\n$fn = 32;\nwheel_d = 35;\nwheel_w = 4;\ntire_th = 1.5;\nframe_t = 3;\nseat_w = 8;\nseat_l = 20;\nhandlebar_w = 20;\ncrank_l = 8;\npedal_s = 4;\n\n// Wheel module with tire and spokes\nmodule wheel() {\n    difference() {\n        // Tire\n        color(\"black\")\n        cylinder(d=wheel_d, h=wheel_w, center=true);\n        \n        // Rim cavity\n        color(\"gray\")\n        cylinder(d=wheel_d - tire_th*2, h=wheel_w+0.1, center=true);\n    }\n    \n    // Spokes\n    for(i = [0:3]) {\n        rotate([0, 0, i*45])\n        color(\"silver\")\n        cube([wheel_d/2 - 3, 0.5, wheel_w], center=true);\n    }\n    \n    // Hub\n    color(\"gray\")\n    cylinder(d=4, h=wheel_w+1, center=true);\n}\n\n// Frame tubes\nmodule tube(start, end, diameter=frame_t) {\n    hull() {\n        translate(start) sphere(d=diameter);\n        translate(end) sphere(d=diameter);\n    }\n}\n\n// Bike frame assembly\nmodule frame() {\n    color(\"silver\")\n    union() {\n        // Main triangle\n        tube([0, 0, 0], [0, 50, 15]); // Seat tube\n        tube([0, 0, 0], [35, 0, 0]); // Bottom tube\n        tube([0, 50, 15], [35, 0, 0]); // Top tube\n        \n        // Rear triangle\n        tube([0, 50, 15], [-15, 65, 0]); // Seat stay\n        tube([0, 0, 0], [-15, 65, 0]); // Chain stay\n        \n        // Front fork\n        tube([35, 0, 0], [35, 0, 35]); // Head tube\n        tube([35, 0, 35], [35, 20, 60]); // Fork blade\n        tube([35, 0, 35], [35, -20, 60]); // Fork blade\n    }\n}\n\n// Seat assembly\nmodule seat() {\n    translate([0, 55, 18])\n    rotate([15, 0, 0])\n    color(\"black\")\n    difference() {\n        cube([seat_l, seat_w, 2], center=true);\n        translate([0, 0, 1])\n        cube([seat_l-4, seat_w-4, 2], center=true);\n    }\n}\n\n// Handlebars\nmodule handlebars() {\n    translate([35, 0, 35])\n    rotate([0, 0, 15])\n    color(\"black\")\n    union() {\n        cylinder(d=3, h=10);\n        translate([0, 0, 10])\n        rotate([90, 0, 0])\n        cylinder(d=3, h=handlebar_w);\n    }\n}\n\n// Pedal and crank\nmodule pedal(side=1) {\n    translate([0, 0, 0])\n    rotate([0, 0, side*90])\n    union() {\n        // Crank arm\n        color(\"silver\")\n        cube([crank_l, 2, 2]);\n        \n        // Pedal\n        translate([crank_l+pedal_s/2, 0, -pedal_s/2])\n        color(\"black\")\n        cube([pedal_s, pedal_s/2, pedal_s], center=true);\n    }\n}\n\n// Crankset\nmodule crankset() {\n    translate([0, 0, 0])\n    color(\"silver\")\n    cylinder(d=10, h=5);\n    \n    // Two cranks 180 degrees apart\n    pedal(1);\n    rotate([0, 0, 180]) pedal(-1);\n}\n\n// Full bike assembly\nscale(0.8)\nunion() {\n    // Frame\n    frame();\n    \n    // Wheels\n    translate([-15, 65, 0]) wheel();\n    translate([35, 0, 60]) wheel();\n    \n    // Components\n    seat();\n    handlebars();\n    crankset();\n}",
    "renders": true
  },
  {
    "vehicle": "gravel",
    "openscad_code": "// Realistic 3D printable gravel stone\n// Medium complexity – ~80 lines\n// Overall size ~70 mm long, printable without supports\n\n$fn = 32;          // Global facet resolution for smooth curves\n\nmodule gravel_stone() {\n    // Main irregular core: stretched sphere + noise\n    difference() {\n        scale([1.3, 0.9, 0.7])\n        sphere(d = 50, center = true);\n\n        // Carve shallow dents for realism\n        for (i = [1:3]) {\n            rotate([rand(i*3), rand(i*7), rand(i*11)])\n            translate([rand(i*5), rand(i*13), rand(i*17)])\n            scale([1.2, 1.2, 0.5])\n            sphere(d = 15);\n        }\n    }\n\n    // Attach smaller lumps on surface\n    for (j = [0:5]) {\n        angle = j * 60 + rand(j*19) * 15;\n        rot = [rand(j*23)*30, rand(j*29)*30, angle];\n        translate(spherical(28, angle, 70 + rand(j*31)*10))\n        rotate(rot)\n        scale([0.4 + rand(j*37)*0.2, 0.4 + rand(j*41)*0.2, 0.5])\n        sphere(d = 15);\n    }\n\n    // Add flat underside so it sits nicely\n    translate([0, 0, -5])\n    difference() {\n        cube([70, 50, 10], center = true);\n        translate([0, 0, 2])\n        cube([72, 52, 10], center = true);\n    }\n}\n\n// Helper to give deterministic pseudo-random values\nfunction rand(s) = (s * 9301 + 49297) % 233280 / 233280;\n\n// Convert spherical coordinates to cartesian\nfunction spherical(r, theta, phi) = [\n    r * cos(theta) * cos(phi),\n    r * sin(theta) * cos(phi),\n    r * sin(phi)\n];\n\ngravel_stone();",
    "renders": true
  },
  {
    "vehicle": "cyclocross",
    "openscad_code": "// Cyclocross bike - realistic style, medium complexity\n// Overall length ~85mm, height ~50mm, width ~20mm\n// Designed for 3D printing with 2mm wall thickness and no steep overhangs\n\n$fn = 32;\n\n// Frame parameters\nframe_tube_dia = 3;\nwheel_dia = 30;\nwheel_width = 3;\ncrank_length = 8;\ncrank_width = 2;\nsaddle_width = 8;\nsaddle_length = 12;\nhandlebar_width = 18;\nhandlebar_dia = 2;\n\n// Main assembly\nmodule cyclocross() {\n    // Rear wheel\n    translate([30, 0, 0]) rotate([0, 0, 0]) wheel();\n    \n    // Front wheel\n    translate([-30, 0, 0]) rotate([0, 0, 0]) wheel();\n    \n    // Frame\n    frame();\n    \n    // Fork\n    fork();\n    \n    // Crankset\n    translate([10, 0, -8]) crankset();\n    \n    // Saddle\n    translate([15, 0, 12]) saddle();\n    \n    // Handlebar and stem\n    translate([-28, 0, 12]) handlebar_assembly();\n    \n    // Pedals\n    translate([0, 10, -8]) pedal();\n    translate([0, -10, -8]) pedal();\n}\n\n// Wheel module\nmodule wheel() {\n    // Tire\n    color(\"black\") \n    difference() {\n        cylinder(h=wheel_width, d=wheel_dia+4, center=true);\n        cylinder(h=wheel_width+1, d=wheel_dia, center=true);\n    }\n    \n    // Rim\n    color(\"silver\") \n    cylinder(h=wheel_width-1, d=wheel_dia-2, center=true);\n    \n    // Spokes\n    color(\"gray\") \n    for(i=[0:7]) {\n        rotate([0, 0, i*45]) \n        cube([wheel_dia/2-2, 0.5, 0.5], center=true);\n    }\n    \n    // Hub\n    color(\"gray\") \n    cylinder(h=wheel_width+1, d=4, center=true);\n}\n\n// Frame module\nmodule frame() {\n    color(\"red\") {\n        // Top tube\n        translate([0, 0, 8]) rotate([0, -10, 0]) \n        cylinder(h=55, d=frame_tube_dia, center=true);\n        \n        // Down tube\n        translate([5, 0, 0]) rotate([20, -10, 0]) \n        cylinder(h=50, d=frame_tube_dia, center=true);\n        \n        // Seat tube\n        translate([15, 0, 0]) rotate([75, 0, 0]) \n        cylinder(h=25, d=frame_tube_dia, center=true);\n        \n        // Seat stays\n        translate([25, 0, 6]) rotate([30, 0, 0]) \n        cylinder(h=20, d=frame_tube_dia-1, center=true);\n        \n        // Chain stays\n        translate([20, 0, 0]) rotate([0, 0, 0]) \n        cylinder(h=20, d=frame_tube_dia-1, center=true);\n        \n        // Bottom bracket shell\n        translate([10, 0, -5]) \n        cylinder(h=5, d=5, center=true);\n    }\n}\n\n// Fork module\nmodule fork() {\n    color(\"red\") {\n        // Fork blades\n        translate([-30, 0, 0]) rotate([15, 0, 0]) \n        cylinder(h=25, d=frame_tube_dia-0.5, center=true);\n        \n        translate([-30, 0, 0]) rotate([15, 0, 0]) \n        mirror([0, 1, 0]) \n        cylinder(h=25, d=frame_tube_dia-0.5, center=true);\n        \n        // Fork crown\n        translate([-30, 0, 8]) \n        cube([5, 8, 3], center=true);\n    }\n}\n\n// Crankset module\nmodule crankset() {\n    color(\"gray\") {\n        // Chainring\n        difference() {\n            cylinder(h=2, d=12, center=true);\n            cylinder(h=3, d=8, center=true);\n        }\n        \n        // Crank arms\n        rotate([0, 90, 0]) {\n            for(i=[0:1]) {\n                rotate([0, 0, i*180]) \n                cube([crank_length, crank_width, crank_width], center=true);\n            }\n        }\n    }\n}\n\n// Saddle module\nmodule saddle() {\n    color(\"black\") \n    union() {\n        // Saddle shell\n        scale([1, 0.8, 0.3]) \n        cylinder(h=saddle_length, d=saddle_width, center=true);\n        \n        // Saddle rails\n        translate([0, 0, -2]) \n        cylinder(h=8, d=1, center=true);\n    }\n}\n\n// Handlebar assembly module\nmodule handlebar_assembly() {\n    color(\"black\") {\n        // Stem\n        translate([0, 0, 0]) rotate([0, -30, 0]) \n        cylinder(h=15, d=frame_tube_dia, center=true);\n        \n        // Handlebar\n        translate([0, 0, 5]) rotate([0, -30, 0]) \n        rotate([0, 90, 0]) \n        cylinder(h=handlebar_width, d=handlebar_dia, center=true);\n        \n        // Bar tops\n        translate([0, 8, 5]) rotate([0, -30, 0]) \n        cylinder(h=8, d=handlebar_dia, center=true);\n    }\n}\n\n// Pedal module\nmodule pedal() {\n    color(\"gray\") {\n        // Pedal body\n        cube([8, 3, 1], center=true);\n        \n        // Axle\n        rotate([90, 0, 0]) \n        cylinder(h=5, d=1, center=true);\n    }\n}\n\n// Generate the model\ncyclocross();",
    "renders": true
  },
  {
    "vehicle": "touringbike",
    "openscad_code": "// Touring Bike - Realistic Medium Complexity\n// All dimensions in mm, max ~80mm length for 3D printing\n\n// Global parameters\nwheel_d = 30;\ntire_thick = 2;\nrim_width = 3;\nframe_tube_d = 3;\ncrank_length = 12;\npedal_w = 8;\npedal_d = 4;\npedal_h = 3;\n\n// Main assembly\nmodule bike() {\n    color(\"silver\") {\n        union() {\n            // Rear wheel\n            translate([-30, 0, 0]) rotate([0, 0, 0]) wheel();\n            \n            // Front wheel\n            translate([30, 0, 0]) rotate([0, 0, 0]) wheel();\n            \n            // Frame\n            frame();\n            \n            // Handlebars\n            handlebars();\n            \n            // Saddle\n            saddle();\n            \n            // Drivetrain\n            drivetrain();\n            \n            // Luggage rack\n            rack();\n        }\n    }\n}\n\n// Wheel with tire and rim\nmodule wheel() {\n    rotate([90, 0, 0]) {\n        // Tire\n        difference() {\n            cylinder(d=wheel_d + tire_thick*2, h=tire_thick, center=true);\n            cylinder(d=wheel_d, h=tire_thick + 0.2, center=true);\n        }\n        \n        // Rim\n        difference() {\n            cylinder(d=wheel_d, h=rim_width, center=true);\n            cylinder(d=wheel_d - 4, h=rim_width + 0.2, center=true);\n        }\n        \n        // Spokes (simplified)\n        for(i=[0:7]) {\n            rotate([0, 0, i*45]) \n                cube([0.8, wheel_d/2 - 2, rim_width], center=true);\n        }\n    }\n}\n\n// Frame construction\nmodule frame() {\n    // Bottom bracket shell\n    translate([0, 0, -2]) \n        cylinder(d=frame_tube_d + 2, h=5, center=true);\n    \n    // Seat tube\n    translate([0, 0, 15]) \n        cylinder(d=frame_tube_d, h=30, center=true);\n    \n    // Down tube\n    translate([0, 0, 0]) rotate([0, -45, 0]) \n        cylinder(d=frame_tube_d, h=35, center=true);\n    \n    // Top tube\n    translate([-15, 0, 20]) rotate([0, 0, 0]) \n        cube([30, frame_tube_d, frame_tube_d], center=true);\n    \n    // Head tube\n    translate([25, 0, 20]) \n        cylinder(d=frame_tube_d + 1, h=10, center=true);\n    \n    // Fork\n    translate([30, 0, 15]) rotate([0, 20, 0]) \n        cylinder(d=frame_tube_d, h=25, center=true);\n    \n    // Seat stays\n    translate([-15, 0, 15]) rotate([0, -30, 0]) \n        cylinder(d=frame_tube_d - 1, h=20, center=true);\n    \n    // Chain stays\n    translate([-15, 0, 0]) rotate([0, 0, 0]) \n        cube([30, frame_tube_d - 1, frame_tube_d - 1], center=true);\n}\n\n// Handlebars with stem\nmodule handlebars() {\n    // Stem\n    translate([25, 0, 25]) rotate([0, -15, 0]) \n        cylinder(d=frame_tube_d, h=15, center=true);\n    \n    // Handlebar\n    translate([25, 0, 30]) rotate([90, 0, 0]) \n        cylinder(d=frame_tube_d, h=20, center=true);\n    \n    // Bar ends\n    translate([25, 10, 30]) rotate([0, 90, 0]) \n        cylinder(d=frame_tube_d - 0.5, h=5, center=true);\n    translate([25, -10, 30]) rotate([0, 90, 0]) \n        cylinder(d=frame_tube_d - 0.5, h=5, center=true);\n}\n\n// Saddle\nmodule saddle() {\n    translate([0, 0, 30]) rotate([10, 0, 0]) {\n        // Saddle shell\n        difference() {\n            scale([1.5, 1, 0.5]) sphere(d=15);\n            translate([0, 0, -3]) cube([20, 20, 10], center=true);\n        }\n        \n        // Saddle rails\n        translate([0, 0, -3]) rotate([0, 90, 0]) \n            cylinder(d=2, h=15, center=true);\n    }\n}\n\n// Crankset and pedals\nmodule drivetrain() {\n    // Chainring\n    translate([0, 0, 0]) rotate([90, 0, 0]) {\n        difference() {\n            cylinder(d=12, h=3, center=true);\n            for(i=[0:4]) {\n                rotate([0, 0, i*72]) \n                    translate([5, 0, 0]) cylinder(d=3, h=3.2, center=true);\n            }\n        }\n    }\n    \n    // Crank arm\n    translate([0, -crank_length/2, 0]) rotate([90, 0, 0]) \n        cube([frame_tube_d, crank_length, 3], center=true);\n    \n    // Pedal\n    translate([0, -crank_length, 0]) pedal();\n}\n\n// Pedal module\nmodule pedal() {\n    // Pedal body\n    translate([0, 0, 0]) rotate([0, 90, 0]) \n        cube([pedal_w, pedal_d, pedal_h], center=true);\n    \n    // Grip surface\n    for(i=[-1:1]) {\n        translate([i*3, 0, pedal_h/2 + 0.1]) \n            cube([0.5, pedal_d*0.8, 0.5], center=true);\n    }\n}\n\n// Rear luggage rack\nmodule rack() {\n    // Platform\n    translate([-30, 0, 18]) rotate([5, 0, 0]) \n        cube([15, 12, 1], center=true);\n    \n    // Support struts\n    for(side=[-1, 1]) {\n        translate([-30, side*5, 18]) \n            cylinder(d=1.5, h=8, center=true);\n    }\n    \n    // Side rails\n    translate([-30, 6, 18]) rotate([0, 0, 0]) \n        cube([15, 1, 2], center=true);\n    translate([-30, -6, 18]) rotate([0, 0, 0]) \n        cube([15, 1, 2], center=true);\n}\n\n// Render the bike\nbike();",
    "renders": true
  },
  {
    "vehicle": "randonneur",
    "openscad_code": "// Randonneur bicycle - medium complexity realistic style\n// Scale: 1:20 (frame 60mm long)\n\n$fn = 24;  // Smooth curves\nmodule frame_triangle() {\n    // Top tube\n    translate([25,0,12]) cube([30,3,3], center=true);\n    \n    // Down tube\n    translate([18,0,8]) rotate([0,0,-25]) cube([35,3,3], center=true);\n    \n    // Seat tube\n    translate([52,0,0]) rotate([0,0,75]) cube([30,3,3], center=true);\n    \n    // Seat stays\n    translate([48,-1.5,12]) rotate([0,0,-30]) cube([25,2,2], center=true);\n    translate([48,1.5,12]) rotate([0,0,-30]) cube([25,2,2], center=true);\n    \n    // Chain stays\n    translate([0,-1.5,6]) rotate([0,0,0]) cube([50,2,2], center=true);\n    translate([0,1.5,6]) rotate([0,0,0]) cube([50,2,2], center=true);\n    \n    // Head tube\n    translate([10,0,11]) rotate([0,0,0]) cylinder(h=8, r=2.5);\n}\n\nmodule fork() {\n    // Fork blades\n    translate([10,-1.5,4]) rotate([0,-45,0]) cylinder(h=35, r=1.5);\n    translate([10,1.5,4]) rotate([0,-45,0]) cylinder(h=35, r=1.5);\n    \n    // Fork crown\n    translate([10,0,5]) cube([3,5,3], center=true);\n}\n\nmodule wheels() {\n    // Front wheel\n    translate([10,0,0]) rotate([90,0,0]) cylinder(h=4, r=15);\n    // Spokes\n    for(i=[0:30:360]) rotate([0,0,i]) translate([10,0,0]) rotate([90,0,0]) \n        cylinder(h=4.2, r=0.3);\n    \n    // Rear wheel\n    translate([50,0,0]) rotate([90,0,0]) cylinder(h=4, r=15);\n    for(i=[0:30:360]) rotate([0,0,i]) translate([50,0,0]) rotate([90,0,0]) \n        cylinder(h=4.2, r=0.3);\n    \n    // Tires\n    translate([10,0,0]) rotate([90,0,0]) cylinder(h=5, r=16);\n    translate([50,0,0]) rotate([90,0,0]) cylinder(h=5, r=16);\n}\n\nmodule handlebars() {\n    // Stem\n    translate([10,0,11]) rotate([0,-30,0]) cylinder(h=15, r=1.5);\n    \n    // Bars\n    translate([10,-12,15]) cube([2,24,2], center=true);\n    translate([10,-14,15]) rotate([0,0,15]) cube([2,8,2], center=true);\n    translate([10,14,15]) rotate([0,0,-15]) cube([2,8,2], center=true);\n}\n\nmodule drivetrain() {\n    // Crankset\n    translate([22,0,6]) rotate([90,0,0]) cylinder(h=3, r=5);\n    translate([22,-8,6]) rotate([0,0,90]) cube([15,2,2], center=true);\n    translate([22,-15,6]) rotate([0,0,90]) cylinder(h=2, r=2);\n    \n    // Rear cassette\n    translate([50,0,3]) rotate([90,0,0]) for(i=[1:3]) cylinder(h=i, r=6-i*0.5);\n}\n\nmodule saddle_and_bags() {\n    // Saddle\n    translate([52,0,20]) rotate([0,-10,0]) scale([1,0.7,0.3]) sphere(r=5);\n    \n    // Handlebar bag\n    translate([10,-12,13]) cube([6,4,4], center=true);\n    \n    // Rear rack\n    translate([45,0,8]) cube([10,2,0.5], center=true);\n    translate([45,0,6]) cube([10,2,0.5], center=true);\n    \n    // Panniers\n    translate([45,-6,7]) cube([4,3,6], center=true);\n    translate([45,6,7]) cube([4,3,6], center=true);\n}\n\n// Main assembly\nunion() {\n    frame_triangle();\n    fork();\n    wheels();\n    handlebars();\n    drivetrain();\n    saddle_and_bags();\n}",
    "renders": true
  },
  {
    "vehicle": "audax",
    "openscad_code": "$fa = 1;\n$fs = 0.5;\n\n// Overall dimensions\nlength = 80;\nwidth = 28;\nheight = 12;\nwall = 1.6;\n\n// Shell with rounded ends\nmodule shell() {\n    hull() {\n        translate([0, 0, height/2])\n            cylinder(h=height-wall*2, r1=width/2-wall, r2=width/2-wall, $fn=60);\n        translate([length-wall*2, 0, height/2])\n            cylinder(h=height-wall*2, r1=width/2-wall, r2=width/2-wall, $fn=60);\n    }\n}\n\n// Outer hull shape\nmodule outer_hull() {\n    hull() {\n        translate([0, 0, height/2])\n            cylinder(h=height, r1=width/2, r2=width/2, $fn=60);\n        translate([length, 0, height/2])\n            cylinder(h=height, r1=width/2, r2=width/2, $fn=60);\n    }\n}\n\n// Vent holes on top\nmodule vents() {\n    for(x=[10:10:length-10])\n        translate([x, 0, height-0.5])\n            rotate([90,0,0])\n                cylinder(h=wall+1, r=1.5, $fn=20);\n}\n\n// Positive terminal post\nmodule positive_post() {\n    translate([length-8, -width/3, height/2+2])\n        cylinder(h=6, r=3, $fn=20);\n}\n\n// Negative terminal post\nmodule negative_post() {\n    translate([length-8, width/3, height/2+2])\n        cylinder(h=6, r=3, $fn=20);\n}\n\n// Label area indent\nmodule label_area() {\n    translate([length/2, 0, height-0.5])\n        cube([length/3, width-6, 0.5], center=true);\n}\n\n// Assembly\ndifference() {\n    // Main body\n    outer_hull();\n    \n    // Hollow interior\n    translate([wall,0,wall])\n        shell();\n    \n    // Vent holes\n    vents();\n    \n    // Label indent\n    label_area();\n}\n\n// Terminal posts added back\npositive_post();\nnegative_post();\n\n// Small rim details\ntranslate([0,0,0])\n    cube([length, wall, height]);\ntranslate([0,width-wall,0])\n    cube([length, wall, height]);",
    "renders": true
  },
  {
    "vehicle": "sporttourer",
    "openscad_code": "// Sport-Tourer Motorcycle\n// Realistic style, medium complexity\n// 1:18 scale – approx. 100 mm long\n\n$fn = 36;          // smooth curves\nwall = 1.2;        // 3D-printable wall / layer thickness\n\n// Main module\nmodule sportTourer() {\n    \n    // Rear wheel\n    translate([ -40, 0, 0 ]) rotate([ 0, 0, 0 ]) wheel();\n    \n    // Front wheel\n    translate([  30, 0, 0 ]) rotate([ 0, 0, 0 ]) wheel();\n    \n    // Swing-arm\n    translate([ -38, 0, 7 ]) rotate([ 0, 0, 0 ]) swingArm();\n    \n    // Frame\n    translate([ 0, 0, 0 ]) frame();\n    \n    // Fairing + windscreen\n    translate([ 20, 0, 15 ]) fairing();\n    \n    // Seat\n    translate([ -10, 0, 15 ]) seat();\n    \n    // Engine block\n    translate([ 0, 0, 5 ]) engine();\n    \n    // Exhaust\n    translate([ -5, -7, 2 ]) exhaust();\n    \n    // Handlebar\n    translate([ 28, 0, 20 ]) handlebar();\n    \n    // Headlight\n    translate([ 35, 0, 12 ]) headlight();\n    \n    // Tail-light / plate\n    translate([ -46, 0, 12 ]) taillight();\n}\n\n// Wheel module\nmodule wheel() {\n    color(\"darkgray\")\n    difference() {\n        cylinder(h = wall * 2, r = 12, center = true);\n        cylinder(h = wall * 2 + 0.1, r = 7, center = true);\n    }\n    \n    // Tire tread (simple ribs)\n    for (i = [0:30:330])\n        rotate([ 0, 0, i ])\n        translate([ 9.5, 0, 0 ])\n        cube([ 1, 2, wall * 2.1 ], center = true);\n}\n\n// Swing-arm\nmodule swingArm() {\n    color(\"gray\")\n    difference() {\n        cube([ 20, 4, 3 ], center = true);\n        translate([ 0, 0, -1.5 ])\n        cylinder(h = 5, r = 2);\n    }\n}\n\n// Frame\nmodule frame() {\n    color(\"silver\")\n    \n    // Main spars\n    hull() {\n        translate([ -30, 0, 7 ]) sphere(d = 2);\n        translate([  25, 0, 15 ]) sphere(d = 2);\n    }\n    \n    // Down tube\n    hull() {\n        translate([ 25, 0, 15 ]) sphere(d = 2);\n        translate([ 5, 0, 5 ]) sphere(d = 2);\n    }\n    \n    // Seat rails\n    hull() {\n        translate([ -30, 0, 7 ]) sphere(d = 2);\n        translate([ -40, 0, 12 ]) sphere(d = 2);\n    }\n}\n\n// Fairing with windscreen\nmodule fairing() {\n    color(\"red\")\n    difference() {\n        hull() {\n            translate([ 0, 0, 0 ]) sphere(d = 15);\n            translate([ 10, 0, 5 ]) sphere(d = 8);\n        }\n        \n        // Cut-away for front wheel\n        translate([ 0, 0, -10 ])\n        cylinder(h = 30, r = 13);\n    }\n    \n    // Windscreen\n    color(\"cyan\", 0.6)\n    translate([ 5, 0, 5 ])\n    rotate([ -20, 0, 0 ])\n    cube([ 8, 20, 2 ], center = true);\n}\n\n// Seat\nmodule seat() {\n    color(\"black\")\n    translate([ -25, 0, 12 ])\n    scale([ 1, 0.6, 0.3 ])\n    cube([ 30, 15, 10 ], center = true);\n}\n\n// Engine\nmodule engine() {\n    color(\"gray\")\n    cube([ 12, 10, 10 ], center = true);\n    \n    // Cylinders\n    for (i = [ -3, 3 ])\n        translate([ i, 0, 5 ])\n        cylinder(h = 10, r = 2);\n}\n\n// Exhaust\nmodule exhaust() {\n    color(\"silver\")\n    rotate([ 0, 5, 0 ])\n    cylinder(h = 30, r = 1.5);\n}\n\n// Handlebar\nmodule handlebar() {\n    color(\"black\")\n    rotate([ 0, 0, 90 ])\n    cylinder(h = 20, r = 1);\n    \n    // Bar ends\n    translate([ 0, 10, 0 ]) sphere(d = 2);\n    translate([ 0, -10, 0 ]) sphere(d = 2);\n}\n\n// Headlight\nmodule headlight() {\n    color(\"yellow\")\n    sphere(d = 6);\n    \n    // Lens\n    color(\"white\")\n    translate([ 3, 0, 0 ])\n    sphere(d = 5);\n}\n\n// Taillight\nmodule taillight() {\n    color(\"red\")\n    cube([ 2, 8, 4 ], center = true);\n    \n    // License-plate holder\n    color(\"gray\")\n    translate([ -2, 0, -3 ])\n    cube([ 0.8, 10, 2 ], center = true);\n}\n\n// Render\nsportTourer();",
    "renders": true
  },
  {
    "vehicle": "hyperbike",
    "openscad_code": "// Hyperbike - Realistic style, medium complexity\n// Designed for 3D printing, no overhangs, 1mm wall thickness\n\n$fn = 32;\n\nmodule frame_tube(length, diameter) {\n    cylinder(h = length, d = diameter, center = true);\n}\n\nmodule wheel(diameter, width) {\n    rotate([90, 0, 0]) {\n        difference() {\n            cylinder(h = width, d = diameter, center = true);\n            cylinder(h = width + 0.2, d = diameter - 2, center = true);\n        }\n        for(i = [0:7]) {\n            rotate([0, 0, i * 45]) {\n                cube([diameter/2 - 1, 1, width + 0.2], center = true);\n            }\n        }\n    }\n}\n\nmodule fork() {\n    translate([-2, 0, 0]) {\n        union() {\n            rotate([0, 90, 0]) frame_tube(20, 3);\n            rotate([0, 90, 0]) translate([0, 0, 15]) frame_tube(20, 3);\n        }\n    }\n}\n\nmodule handlebars() {\n    rotate([0, 0, 20]) {\n        union() {\n            translate([0, 0, 10]) rotate([90, 0, 0]) frame_tube(20, 2);\n            translate([-10, 0, 10]) cube([20, 2, 2], center = true);\n        }\n    }\n}\n\nmodule seat() {\n    translate([-10, 0, 20]) {\n        union() {\n            rotate([0, 90, 0]) frame_tube(10, 2);\n            translate([5, 0, 0]) {\n                cube([10, 15, 3], center = true);\n                translate([0, 0, 2]) cube([12, 17, 2], center = true);\n            }\n        }\n    }\n}\n\nmodule engine() {\n    translate([5, 0, 10]) {\n        difference() {\n            cube([15, 10, 10], center = true);\n            translate([5, 0, 0]) cylinder(h = 12, d = 6, center = true);\n            translate([-5, 0, 0]) cylinder(h = 12, d = 4, center = true);\n        }\n    }\n}\n\nmodule exhaust() {\n    translate([12, 0, 7]) {\n        rotate([0, 45, 0]) {\n            cylinder(h = 12, d_start = 3, d_end = 2, center = false);\n        }\n    }\n}\n\n// Main assembly\ntranslate([0, 0, 10]) {\n    // Rear wheel\n    translate([-20, 0, 0]) wheel(20, 3);\n    \n    // Front wheel\n    translate([20, 0, 0]) wheel(20, 3);\n    \n    // Main frame\n    union() {\n        // Backbone\n        translate([0, 0, 15]) rotate([0, 0, -10]) frame_tube(40, 3);\n        \n        // Seat stays\n        translate([-10, 0, 15]) rotate([30, 0, 0]) frame_tube(15, 2);\n        translate([-10, 0, 15]) rotate([150, 0, 0]) frame_tube(15, 2);\n        \n        // Chain stays\n        translate([-20, 0, 5]) rotate([0, 0, 0]) frame_tube(15, 2);\n        translate([-20, 0, 5]) rotate([0, 0, 5]) frame_tube(15, 2);\n        \n        // Front fork\n        translate([20, 0, 15]) fork();\n        \n        // Handlebars\n        translate([20, 0, 25]) handlebars();\n        \n        // Seat\n        seat();\n        \n        // Engine block\n        engine();\n        \n        // Exhaust\n        exhaust();\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "supersport",
    "openscad_code": "// Supersport Motorcycle - Realistic Style, Medium Complexity\n// Scale: 1:18 (approx 100mm long)\n\n$fn = 32;  // Smooth curves for printing\n\nmodule body_shell() {\n    // Main fairing\n    difference() {\n        hull() {\n            translate([-20, 0, 8]) cube([40, 25, 15], center=true);\n            translate([-35, 0, 12]) cube([30, 20, 20], center=true);\n            translate([15, 0, 10]) cube([30, 22, 18], center=true);\n        }\n        // Windscreen cutout\n        translate([-30, 0, 22]) rotate([0, -10, 0]) \n            cube([25, 18, 15], center=true);\n    }\n    \n    // Windscreen\n    translate([-30, 0, 22]) rotate([0, -10, 0]) \n        color(\"LightBlue\", 0.5) cube([24, 16, 0.5], center=true);\n}\n\nmodule wheels() {\n    module wheel(pos) {\n        translate(pos) {\n            // Tire\n            color(\"Black\") cylinder(h=8, r=11, center=true);\n            // Rim\n            color(\"Silver\") \n                difference() {\n                    cylinder(h=9, r=9.5, center=true);\n                    cylinder(h=10, r=6, center=true);\n                }\n            // Spokes\n            for(i=[0:6]) {\n                rotate([0, 0, i*60]) \n                    cube([1.5, 9, 8], center=true);\n            }\n        }\n    }\n    wheel([-28, 0, 0]);\n    wheel([28, 0, 0]);\n}\n\nmodule chassis() {\n    // Frame rails\n    color(\"Gray\") {\n        hull() {\n            translate([-35, 0, 2]) cube([70, 3, 4], center=true);\n            translate([-20, 0, 5]) cube([40, 3, 4], center=true);\n        }\n        \n        // Engine block\n        translate([-5, 0, 4]) cube([20, 12, 8], center=true);\n        \n        // Exhaust\n        color(\"DarkGray\") {\n            translate([15, 6, 4]) rotate([0, -10, 0]) \n                cylinder(h=25, r=2);\n            translate([15, -6, 4]) rotate([0, -10, 0]) \n                cylinder(h=25, r=2);\n        }\n    }\n}\n\nmodule seat_tank() {\n    // Fuel tank\n    color(\"Red\") {\n        hull() {\n            translate([-5, 0, 12]) cube([30, 15, 12], center=true);\n            translate([-10, 0, 15]) cube([20, 14, 10], center=true);\n        }\n    }\n    \n    // Seat\n    color(\"Black\") {\n        translate([15, 0, 10]) cube([20, 12, 4], center=true);\n    }\n}\n\nmodule handlebars() {\n    translate([-28, 0, 16]) {\n        // Bar clamps\n        color(\"Silver\") \n            for(y=[-5, 5]) translate([0, y, 0]) cube([4, 2, 4], center=true);\n        \n        // Bars\n        color(\"Black\") {\n            rotate([0, -20, 0]) {\n                translate([0, -6, 0]) cube([3, 12, 1], center=true);\n                translate([0, 6, 0]) cube([3, 12, 1], center=true);\n            }\n        }\n    }\n}\n\nmodule swingarm() {\n    color(\"Gray\") {\n        translate([20, 0, 2]) {\n            hull() {\n                cube([20, 4, 4], center=true);\n                translate([15, 0, 0]) cube([10, 8, 4], center=true);\n            }\n        }\n    }\n}\n\nmodule mirrors() {\n    color(\"Silver\") {\n        translate([-20, 8, 15]) {\n            rotate([0, 0, 30]) cube([2, 10, 2]);\n            translate([0, 5, 0]) sphere(r=2);\n        }\n        translate([-20, -8, 15]) {\n            rotate([0, 0, -30]) cube([2, 10, 2]);\n            translate([0, -5, 0]) sphere(r=2);\n        }\n    }\n}\n\n// Assembly\ndifference() {\n    union() {\n        body_shell();\n        chassis();\n        wheels();\n        seat_tank();\n        handlebars();\n        swingarm();\n        mirrors();\n    }\n    \n    // Clearance for wheels\n    translate([-28, 0, 0]) rotate([90, 0, 0]) cylinder(h=30, r=6);\n    translate([28, 0, 0]) rotate([90, 0, 0]) cylinder(h=30, r=6);\n}",
    "renders": true
  },
  {
    "vehicle": "hypernaked",
    "openscad_code": "// Hypernaked motorcycle - realistic style, medium complexity\n// Overall dimensions: ~85mm long x 35mm wide x 45mm high\n\n// Main frame backbone\nmodule frame() {\n    difference() {\n        union() {\n            // Main tube\n            rotate([0, 10, 0]) \n                cylinder(h=50, d1=6, d2=5, $fn=16);\n            \n            // Engine mount cross tube\n            translate([0, 0, -15]) \n                rotate([90, 0, 0])\n                    cylinder(h=30, d=5, $fn=16);\n            \n            // Rear subframe\n            translate([25, 0, -5])\n                rotate([0, -5, 0])\n                    cylinder(h=35, d=4, $fn=16);\n        }\n        \n        // Lightening holes\n        for(i = [0:2]) {\n            translate([i*15-15, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h=7, d=3, $fn=12);\n        }\n    }\n}\n\n// Engine block\nmodule engine() {\n    difference() {\n        // Main block\n        translate([0, 0, -25])\n            cube([20, 20, 25], center=true);\n        \n        // Cylinder head\n        translate([0, 0, -12.5])\n            cube([10, 18, 20], center=true);\n        \n        // Oil pan\n        translate([0, 0, -37.5])\n            cube([22, 22, 5], center=true);\n    }\n    \n    // Exhaust pipes\n    for(side = [-1, 1]) {\n        translate([side*10, 0, -30])\n            rotate([0, 90, 0])\n                cylinder(h=30, d=3, $fn=12);\n    }\n}\n\n// Fuel tank\nmodule tank() {\n    difference() {\n        hull() {\n            translate([-10, 0, 5])\n                sphere(d=12, $fn=24);\n            translate([10, 0, 5])\n                sphere(d=12, $fn=24);\n            translate([0, 0, 10])\n                sphere(d=15, $fn=24);\n        }\n        \n        // Cap recess\n        translate([5, 0, 12])\n            cylinder(h=5, d=4, $fn=12);\n    }\n}\n\n// Front fork assembly\nmodule front_fork() {\n    // Triple clamp\n    translate([-25, 0, 0])\n        cube([8, 20, 5], center=true);\n    \n    // Fork tubes\n    for(side = [-1, 1]) {\n        translate([-25, side*6, -15])\n            cylinder(h=30, d=4, $fn=12);\n    }\n    \n    // Front wheel\n    translate([-25, 0, -30])\n        rotate([90, 0, 0])\n            cylinder(h=8, d=25, $fn=32);\n    \n    // Brake disc\n    translate([-25, 10, -30])\n        rotate([90, 0, 0])\n            cylinder(h=2, d=20, $fn=32);\n}\n\n// Rear swingarm\nmodule swingarm() {\n    difference() {\n        hull() {\n            translate([25, 0, -25])\n                sphere(d=6, $fn=12);\n            translate([45, 0, -25])\n                sphere(d=6, $fn=12);\n        }\n        \n        // Hollow center\n        translate([35, 0, -25])\n            cube([25, 8, 8], center=true);\n    }\n    \n    // Rear wheel\n    translate([45, 0, -25])\n        rotate([90, 0, 0])\n            cylinder(h=8, d=28, $fn=32);\n    \n    // Chain sprocket\n    translate([35, -12, -25])\n        cylinder(h=3, d=12, $fn=16);\n}\n\n// Seat\nmodule seat() {\n    hull() {\n        translate([15, 0, 0])\n            cube([20, 15, 3], center=true);\n        translate([30, 0, 2])\n            cube([15, 12, 5], center=true);\n    }\n}\n\n// Handlebars\nmodule handlebars() {\n    translate([-25, 0, 8])\n        rotate([0, 90, 0])\n            cylinder(h=30, d=3, $fn=12);\n    \n    // Grips\n    for(side = [-1, 1]) {\n        translate([-25, side*15, 8])\n            cylinder(h=5, d=4, $fn=12);\n    }\n}\n\n// Headlight\nmodule headlight() {\n    translate([-30, 0, 10])\n        difference() {\n            sphere(d=10, $fn=24);\n            translate([0, 0, 3])\n                sphere(d=8, $fn=24);\n        }\n}\n\n// Tail light\nmodule tail_light() {\n    translate([40, 0, 0])\n        cube([4, 8, 4], center=true);\n}\n\n// Assemble the motorcycle\nunion() {\n    frame();\n    engine();\n    tank();\n    front_fork();\n    swingarm();\n    seat();\n    handlebars();\n    headlight();\n    tail_light();\n}",
    "renders": true
  },
  {
    "vehicle": "musclebike",
    "openscad_code": "// Musclebike - Realistic style, medium complexity (~100 lines)\n$fn = 36; // Smooth curves\n\n// Main scale and orientation\nscale([0.3,0.3,0.3]) rotate([0,0,0]) union() {\n\n/* --- Chassis & Frame --- */\nmodule frame() {\n    // Main backbone tube\n    translate([-20,0,0]) rotate([0,0,0]) cylinder(h=100,r=5,center=false);\n    \n    // Seat post tube\n    translate([10,0,0]) rotate([-20,0,0]) cylinder(h=70,r=5,center=false);\n    \n    // Down tube\n    translate([0,0,0]) rotate([0,0,10]) cylinder(h=60,r=4,center=false);\n    \n    // Rear chain stays\n    translate([0,0,0]) rotate([0,0,-10]) cylinder(h=70,r=3,center=false);\n    mirror([0,1,0]) translate([0,0,0]) rotate([0,0,-10]) cylinder(h=70,r=3,center=false);\n}\n\n/* --- Engine & Transmission --- */\nmodule engine() {\n    // V-twin engine block\n    translate([-35,0,0]) difference() {\n        union() {\n            cylinder(h=30,r=15,center=true);\n            translate([0,0,-15]) cylinder(h=30,r=15,center=true);\n            translate([0,0,-30]) cylinder(h=30,r=15,center=true);\n        }\n        // Cylinder bores\n        translate([0,0,-15]) cylinder(h=30,r=5,center=true);\n        translate([0,0,15]) cylinder(h=30,r=5,center=true);\n    }\n    \n    // Exhaust pipes\n    translate([-35,12,0]) rotate([0,-90,0]) cylinder(h=40,r=3,center=false);\n    translate([-35,-12,0]) rotate([0,-90,0]) cylinder(h=40,r=3,center=false);\n}\n\n/* --- Wheels & Tires --- */\nmodule wheel(posX, posY, posZ, size) {\n    translate([posX,posY,posZ]) {\n        // Tire\n        difference() {\n            cylinder(h=20,r=size,$fn=36);\n            cylinder(h=22,r=size-4,$fn=36);\n        }\n        // Rim\n        translate([0,0,-1]) cylinder(h=22,r=size-4,$fn=36);\n        // Spokes (simplified)\n        for(i=[0:6]) rotate([0,0,i*60]) cube([2,size-5,20],center=true);\n    }\n}\n\n/* --- Seat --- */\nmodule seat() {\n    translate([40,0,20]) rotate([0,0,0]) scale([1,0.5,0.3]) cube([30,20,10],center=true);\n}\n\n/* --- Handlebars --- */\nmodule handlebars() {\n    translate([-40,0,35]) rotate([0,0,0]) {\n        // Handlebar stem\n        cylinder(h=20,r=3,center=false);\n        // Handlebar\n        translate([0,0,20]) rotate([90,0,0]) cylinder(h=40,r=2,center=true);\n    }\n}\n\n/* --- Rear Fender --- */\nmodule fender() {\n    translate([0,0,10]) rotate([0,90,0]) \n        scale([0.5,1,0.2]) difference() {\n            cylinder(h=50,r=25,$fn=100);\n            translate([0,0,-2]) cylinder(h=55,r=20,$fn=100);\n        }\n}\n\n/* --- Assembly --- */\nframe();\nengine();\nwheel(0,0,0,20);        // Rear wheel\nwheel(-60,0,0,15);      // Front wheel\nseat();\nhandlebars();\nfender();\n\n}",
    "renders": true
  },
  {
    "vehicle": "powercruiser",
    "openscad_code": "// Powercruiser Motorcycle – Realistic & Medium Complexity\n// Approx. 1:60 scale (≈75 mm long)\n\n$fn = 32;          // Smooth curves\nscale = 1;         // Global scale\n\n// MAIN MODULE ----------------------------------------------------\nmodule powercruiser() {\n    union() {\n        frame();\n        engine();\n        tank();\n        seat();\n        fork();\n        wheels();\n        exhaust();\n        lights();\n        details();\n    }\n}\n\n// FRAME ----------------------------------------------------------\nmodule frame() {\n    color(\"silver\")\n    difference() {\n        // Main double-cradle tubes\n        union() {\n            for (a = [0, 1])\n                rotate([0, 0, a * 180]) translate([0, 0, -4])\n                    cylinder(h = 68, d = 4);\n\n            // Cross bar\n            translate([30, 0, 8])\n                rotate([90, 0, 0])\n                    cylinder(h = 32, d = 4);\n        }\n\n        // Holes for screws\n        for (p = [[10, 0, 0], [55, 0, 0]])\n            translate(p) rotate([0, 90, 0])\n                cylinder(h = 8, d = 2);\n    }\n}\n\n// ENGINE ---------------------------------------------------------\nmodule engine() {\n    color(\"darkgrey\")\n    translate([20, 0, 8]) union() {\n        // Engine block\n        cube([18, 12, 14], center = true);\n\n        // Cylinders\n        for (s = [-4, 4])\n            translate([s, 0, 5])\n                cylinder(h = 10, d = 7);\n\n        // Oil cooler\n        translate([0, 8, 0]) rotate([90, 0, 0])\n            cylinder(h = 6, d = 5);\n    }\n}\n\n// FUEL TANK ------------------------------------------------------\nmodule tank() {\n    color(\"red\")\n    translate([36, 0, 16]) union() {\n        // Main tank\n        scale([1, 0.6, 0.4])\n            sphere(d = 24);\n\n        // Filler cap\n        translate([6, 0, 5])\n            cylinder(h = 2, d = 4);\n    }\n}\n\n// SEAT -----------------------------------------------------------\nmodule seat() {\n    color(\"black\")\n    translate([58, 0, 14]) {\n        difference() {\n            // Seat base\n            cube([22, 12, 4], center = true);\n            // Top rounding\n            translate([0, 0, 2])\n                cube([22, 12, 4], center = true);\n        }\n    }\n}\n\n// FRONT FORK -----------------------------------------------------\nmodule fork() {\n    color(\"silver\")\n    translate([0, 0, 10]) {\n        // Triple tree\n        cube([8, 4, 2], center = true);\n\n        // Fork tubes\n        for (y = [-3, 3])\n            translate([0, y, -10])\n                cylinder(h = 20, d = 2.5);\n    }\n}\n\n// WHEELS ---------------------------------------------------------\nmodule wheels() {\n    color(\"black\")\n    for (pos = [[0, 0, 0], [68, 0, 0]]) {\n        translate(pos) {\n            // Tire\n            cylinder(h = 5, d = 22, center = true);\n\n            // Rim\n            color(\"silver\")\n                difference() {\n                    cylinder(h = 5, d = 16, center = true);\n                    cylinder(h = 6, d = 10, center = true);\n                }\n\n            // Spokes\n            for (i = [0:30:330])\n                rotate([0, 0, i])\n                    cube([8, 0.8, 1], center = true);\n        }\n    }\n}\n\n// EXHAUST --------------------------------------------------------\nmodule exhaust() {\n    color(\"silver\")\n    union() {\n        // Header pipes\n        for (y = [-4, 4])\n            translate([20, y, 8]) rotate([0, -90, 0])\n                cylinder(h = 15, d = 3);\n\n        // Muffler\n        translate([5, 0, 5]) rotate([0, -90, 0])\n            cylinder(h = 20, d = 5);\n    }\n}\n\n// LIGHTS ---------------------------------------------------------\nmodule lights() {\n    color(\"black\")\n    translate([0, 0, 14]) {\n        // Headlight\n        sphere(d = 8);\n        color(\"yellow\")\n            translate([0, 0, -3])\n                sphere(d = 5);\n    }\n\n    // Taillight\n    color(\"darkred\")\n    translate([72, 0, 16])\n        sphere(d = 4);\n}\n\n// SMALL DETAILS --------------------------------------------------\nmodule details() {\n    // Mirrors\n    color(\"silver\")\n    for (y = [-6, 6])\n        translate([-6, y, 20])\n            rotate([0, 20, 0])\n                cylinder(h = 7, d = 1.5);\n\n    // Handlebars\n    translate([0, 0, 18])\n        rotate([0, 90, 0])\n            cylinder(h = 20, d = 2);\n\n    // Foot pegs\n    color(\"black\")\n    for (side = [-1, 1])\n        translate([40, side * 7, 6])\n            rotate([0, 90, 0])\n                cylinder(h = 4, d = 1.5);\n}\n\n// RENDER ---------------------------------------------------------\npowercruiser();",
    "renders": true
  },
  {
    "vehicle": "bagger",
    "openscad_code": "// Realistic medium-complexity bagger (excavator) model\n// Overall length ~80 mm, width ~30 mm, height ~35 mm\n\n$fa = 2; $fs = 0.5;\n\n// Main body\nmodule body() {\n    difference() {\n        // Main chassis block\n        translate([-10, -15, 0])\n            cube([50, 30, 15], center=false);\n        \n        // Cab windows\n        translate([15, -12, 10])\n            cube([12, 24, 8]);\n        translate([15, -14, 13])\n            cube([14, 28, 6]);\n    }\n    \n    // Cab roof\n    translate([21, 0, 23])\n        cube([20, 26, 3], center=true);\n    \n    // Engine compartment\n    translate([-8, 0, 15])\n        cube([20, 26, 12], center=true);\n}\n\n// Tracks\nmodule track() {\n    // Track frame\n    difference() {\n        translate([0, -18, 3])\n            cube([45, 8, 10]);\n        translate([0, -18, 5])\n            cube([43, 6, 8]);\n    }\n    \n    // Track pads\n    for(i = [0:4]) {\n        translate([i*10 - 20, -18, 1])\n            cube([8, 10, 2]);\n    }\n    \n    // Front idler\n    translate([20, -18, 8])\n        rotate([90,0,0])\n            cylinder(h=8, r=4);\n    \n    // Rear sprocket\n    translate([-20, -18, 8])\n        rotate([90,0,0])\n            cylinder(h=8, r=5);\n}\n\n// Boom assembly\nmodule boom() {\n    // Base pivot\n    translate([25, 0, 15])\n        rotate([0,90,0])\n            cylinder(h=10, r=6);\n    \n    // Main boom arm\n    translate([35, 0, 20])\n        rotate([30,0,0])\n            cube([30, 8, 8], center=true);\n    \n    // Stick arm\n    translate([55, 0, 30])\n        rotate([60,0,0])\n            cube([25, 6, 6], center=true);\n}\n\n// Bucket\nmodule bucket() {\n    // Bucket base\n    translate([70, 0, 25])\n        rotate([0,0,30])\n            difference() {\n                translate([0, 0, -3])\n                    cube([15, 12, 6], center=true);\n                translate([-5, 0, -3])\n                    cube([20, 14, 8], center=true);\n            }\n    \n    // Bucket teeth\n    for(i = [-1:1]) {\n        translate([78, i*4, 25])\n            rotate([0,0,30])\n                cube([3, 2, 4], center=false);\n    }\n}\n\n// Hydraulic cylinders\nmodule cylinder_assembly(pos, angle, length) {\n    translate(pos)\n        rotate([0,0,angle])\n            union() {\n                // Cylinder body\n                translate([length/2, 0, 0])\n                    rotate([0,90,0])\n                        cylinder(h=length, r=2);\n                \n                // Piston rod\n                translate([length + 2, 0, 0])\n                    rotate([0,90,0])\n                        cylinder(h=length/2, r=1);\n            }\n}\n\n// Assembly\nbody();\nmirror([0,1,0]) track();\nboom();\nbucket();\ncylinder_assembly([30, 0, 18], -30, 15);\ncylinder_assembly([50, 0, 28], -60, 12);",
    "renders": true
  },
  {
    "vehicle": "sportsbike",
    "openscad_code": "// Sportsbike model - realistic style, medium complexity\n// Designed for 3D printing (no steep overhangs, 2mm wall thickness)\n\n$fn = 32;\n\n// Main module\nmodule sportsbike() {\n    // Overall scale for 3D printing (80mm length)\n    scale(0.8) {\n        // Frame assembly\n        union() {\n            // Rear section\n            frame_rear();\n            \n            // Front forks and wheel\n            translate([35, 0, 5]) rotate([0, 0, 0]) front_assembly();\n            \n            // Rear wheel\n            translate([-30, 0, 0]) rear_wheel();\n            \n            // Engine block\n            engine();\n            \n            // Fuel tank\n            fuel_tank();\n            \n            // Seat\n            seat();\n            \n            // Exhaust pipes\n            exhaust();\n            \n            // Windscreen\n            windscreen();\n        }\n    }\n}\n\nmodule frame_rear() {\n    // Main frame tube\n    color(\"gray\") {\n        // Top tube\n        translate([0, 0, 15]) rotate([0, -10, 0]) \n            cylinder(h = 60, r1 = 3, r2 = 3);\n        \n        // Down tubes\n        translate([15, 0, 10]) rotate([0, 45, 0])\n            cylinder(h = 40, r1 = 3, r2 = 3);\n        translate([15, 0, -10]) rotate([0, -45, 0])\n            cylinder(h = 40, r1 = 3, r2 = 3);\n            \n        // Swingarm\n        translate([-25, 0, 0]) rotate([0, 0, 0])\n            difference() {\n                cube([30, 4, 8], center = true);\n                translate([0, 0, 0]) cube([28, 6, 6], center = true);\n            }\n    }\n}\n\nmodule engine() {\n    color(\"darkgray\") {\n        // Engine block\n        translate([5, 0, -5]) \n            cube([20, 12, 10], center = true);\n        \n        // Cylinder heads\n        for(i = [0:1]) {\n            translate([5 + i*8, 0, 2])\n                cylinder(h = 8, r = 4);\n        }\n        \n        // Oil pan\n        translate([5, 0, -11])\n            cube([18, 10, 4], center = true);\n    }\n}\n\nmodule fuel_tank() {\n    color(\"red\") {\n        hull() {\n            translate([15, 0, 15])\n                sphere(r = 8);\n            translate([25, 0, 15])\n                scale([1, 0.8, 0.6]) sphere(r = 8);\n        }\n    }\n}\n\nmodule seat() {\n    color(\"black\") {\n        translate([-5, 0, 15])\n            cube([25, 8, 3], center = true);\n    }\n}\n\nmodule front_assembly() {\n    // Fork tubes\n    color(\"silver\") {\n        for(side = [-1:1:1]) {\n            translate([0, side*3, 5])\n                cylinder(h = 25, r = 2);\n        }\n        \n        // Triple clamp\n        translate([0, 0, 20])\n            cube([8, 10, 3], center = true);\n        \n        // Handlebars\n        translate([0, 0, 22])\n            rotate([0, 90, 0])\n                cylinder(h = 20, r = 1.5);\n    }\n    \n    // Front wheel\n    translate([0, 0, -8]) wheel(12);\n}\n\nmodule rear_wheel() {\n    wheel(14);\n}\n\nmodule wheel(radius) {\n    color(\"black\") {\n        // Tire\n        difference() {\n            rotate_extrude()\n                translate([radius, 0, 0])\n                    circle(r = 3);\n            rotate_extrude()\n                translate([radius - 2, 0, 0])\n                    circle(r = 1);\n        }\n        \n        // Rim\n        color(\"silver\") {\n            for(i = [0:6]) {\n                rotate([0, 0, i*60])\n                    translate([radius - 3, 0, 0])\n                        cube([6, 1, 2], center = true);\n            }\n            \n            // Hub\n            cylinder(h = 2, r = 4);\n        }\n        \n        // Brake disc\n        color(\"lightgray\") {\n            translate([0, 0, -1])\n                cylinder(h = 1, r = radius - 1);\n        }\n    }\n}\n\nmodule exhaust() {\n    color(\"silver\") {\n        // Headers\n        for(i = [0:1]) {\n            translate([5 + i*8, -6 - i*2, -8])\n                rotate([0, 90, 45])\n                    cylinder(h = 15, r = 1.5);\n        }\n        \n        // Muffler\n        translate([-15, -8, -5])\n            rotate([0, 0, 15])\n                cylinder(h = 20, r = 3);\n    }\n}\n\nmodule windscreen() {\n    color(\"lightblue\", 0.5) {\n        translate([30, 0, 25])\n            rotate([0, -30, 0])\n                cube([12, 15, 1], center = true);\n    }\n}\n\n// Generate the model\nsportsbike();",
    "renders": true
  },
  {
    "vehicle": "minibike",
    "openscad_code": "$fs = 0.5;\n$fa = 1;\n\n// Overall scale factor\nscale_factor = 0.35;\n\n// Main body frame\nmodule frame() {\n    union() {\n        // Main tube\n        rotate([0, 90, 0])\n            cylinder(h=80*scale_factor, r=4*scale_factor, $fn=20);\n        \n        // Seat post\n        translate([0, 0, 20*scale_factor])\n            rotate([0, 90, 0])\n            cylinder(h=30*scale_factor, r=3*scale_factor, $fn=20);\n        \n        // Engine mount\n        translate([-25*scale_factor, 0, -5*scale_factor])\n            cube([20*scale_factor, 8*scale_factor, 15*scale_factor]);\n        \n        // Rear support\n        translate([-35*scale_factor, 0, 5*scale_factor])\n            rotate([0, 30, 0])\n            cylinder(h=25*scale_factor, r=2.5*scale_factor, $fn=20);\n    }\n}\n\n// Wheel with tire\nmodule wheel(diameter=25*scale_factor, width=8*scale_factor) {\n    difference() {\n        // Tire\n        color(\"black\")\n        cylinder(h=width, r=diameter/2, $fn=30);\n        \n        // Hub cutout\n        translate([0, 0, -1])\n            cylinder(h=width+2, r=diameter/4, $fn=20);\n    }\n    \n    // Hub\n    translate([0, 0, width/2])\n        cylinder(h=width, r=diameter/5, $fn=20);\n}\n\n// Engine block\nmodule engine() {\n    union() {\n        // Main block\n        color(\"gray\")\n        translate([-20*scale_factor, -6*scale_factor, 0])\n            cube([15*scale_factor, 12*scale_factor, 10*scale_factor]);\n        \n        // Cylinder head\n        color(\"silver\")\n        translate([-25*scale_factor, -4*scale_factor, 5*scale_factor])\n            cube([8*scale_factor, 8*scale_factor, 5*scale_factor]);\n        \n        // Pull start\n        color(\"black\")\n        translate([-10*scale_factor, -5*scale_factor, 2*scale_factor])\n            cylinder(h=4*scale_factor, r=5*scale_factor, $fn=20);\n    }\n}\n\n// Seat\nmodule seat() {\n    color(\"darkblue\")\n    translate([-5*scale_factor, -8*scale_factor, 25*scale_factor])\n    scale([1, 0.7, 0.3])\n    sphere(r=12*scale_factor, $fn=30);\n}\n\n// Handlebars\nmodule handlebars() {\n    union() {\n        // Stem\n        color(\"gray\")\n        translate([28*scale_factor, 0, 15*scale_factor])\n            rotate([0, 15, 0])\n            cylinder(h=15*scale_factor, r=2*scale_factor, $fn=20);\n        \n        // Bar\n        color(\"black\")\n        translate([35*scale_factor, 0, 28*scale_factor])\n            rotate([0, 105, 0])\n            cylinder(h=20*scale_factor, r=2*scale_factor, $fn=20);\n        \n        // Grips\n        for(side = [-1, 1]) {\n            translate([35*scale_factor, side*8*scale_factor, 28*scale_factor])\n                rotate([0, 105, 0])\n                cylinder(h=4*scale_factor, r=2.5*scale_factor, $fn=20);\n        }\n    }\n}\n\n// Fork\nmodule fork() {\n    color(\"gray\")\n    union() {\n        // Main tube\n        translate([25*scale_factor, 0, 15*scale_factor])\n            cylinder(h=15*scale_factor, r=3*scale_factor, $fn=20);\n        \n        // Fork legs\n        for(side = [-1, 1]) {\n            translate([25*scale_factor, side*4*scale_factor, 0])\n                cylinder(h=15*scale_factor, r=2*scale_factor, $fn=20);\n        }\n    }\n}\n\n// Exhaust pipe\nmodule exhaust() {\n    color(\"darkgray\")\n    translate([-25*scale_factor, 6*scale_factor, 0])\n    rotate([0, 0, 90])\n    rotate([0, 90, 0])\n    cylinder(h=20*scale_factor, r=2*scale_factor, $fn=20);\n}\n\n// Assemble the minibike\nunion() {\n    frame();\n    translate([30*scale_factor, 0, 0]) wheel();\n    translate([-35*scale_factor, 0, 0]) wheel();\n    engine();\n    seat();\n    handlebars();\n    fork();\n    exhaust();\n}",
    "renders": true
  },
  {
    "vehicle": "pitbike",
    "openscad_code": "// Pitbike model - medium complexity, realistic style\n// Overall dimensions: 85x40x45mm (LxWxH)\n\n$fn=32;\n\n// Main body assembly\nmodule pitbike() {\n    // Frame\n    color(\"silver\")\n    frame();\n    \n    // Engine\n    color(\"darkslategray\")\n    translate([10,0,-5])\n    engine();\n    \n    // Wheels\n    color(\"black\")\n    translate([-25,0,0])\n    wheel(15,4);\n    \n    color(\"black\")\n    translate([30,0,0])\n    wheel(15,4);\n    \n    // Front fork\n    color(\"silver\")\n    translate([-25,0,15])\n    front_fork();\n    \n    // Rear suspension\n    color(\"silver\")\n    translate([20,0,5])\n    rear_suspension();\n    \n    // Seat\n    color(\"darkred\")\n    translate([0,0,15])\n    seat();\n    \n    // Handlebars\n    color(\"silver\")\n    translate([-25,0,25])\n    handlebars();\n    \n    // Exhaust\n    color(\"silver\")\n    translate([15,-8,0])\n    rotate([0,15,0])\n    exhaust();\n    \n    // Fuel tank\n    color(\"red\")\n    translate([-5,0,15])\n    fuel_tank();\n}\n\n// Main frame structure\nmodule frame() {\n    // Main tube\n    rotate([0,15,0])\n    cylinder(h=50, d=6);\n    \n    // Rear frame rails\n    translate([-10,0,0])\n    rotate([0,-10,0])\n    cylinder(h=40, d=5);\n    \n    // Support struts\n    for(i=[-2,2]) {\n        translate([i*5,0,5])\n        cylinder(h=25, d=3);\n    }\n}\n\n// Engine block\nmodule engine() {\n    difference() {\n        // Main engine block\n        cube([20,12,15], center=true);\n        \n        // Cylinder head\n        translate([8,0,7])\n        cube([8,8,8], center=true);\n        \n        // Cooling fins\n        for(i=[-3,0,3]) {\n            translate([8,i,9])\n            cube([7,1,2], center=true);\n        }\n    }\n}\n\n// Wheel module\nmodule wheel(radius, width) {\n    difference() {\n        // Tire\n        cylinder(h=width, r=radius, center=true);\n        \n        // Rim\n        translate([0,0,-1])\n        cylinder(h=width+2, r=radius-3, center=true);\n        \n        // Hub\n        cylinder(h=width+3, r=3, center=true);\n    }\n    \n    // Spokes\n    for(i=[0:45:135]) {\n        rotate([0,90,i])\n        translate([0,0,0])\n        cube([radius-4,2,width-1], center=true);\n    }\n}\n\n// Front fork assembly\nmodule front_fork() {\n    // Fork tubes\n    for(side=[-6,6]) {\n        translate([0,side,0])\n        cylinder(h=25, d=4);\n    }\n    \n    // Fork bridge\n    translate([0,0,20])\n    cube([15,15,3], center=true);\n}\n\n// Rear suspension\nmodule rear_suspension() {\n    // Shock absorber\n    cylinder(h=20, d=4);\n    \n    // Spring\n    translate([0,0,10])\n    cylinder(h=10, d=6);\n}\n\n// Seat\nmodule seat() {\n    // Base\n    translate([15,0,0])\n    cube([25,15,3], center=true);\n    \n    // Cushion top\n    translate([15,0,2])\n    scale([1,1,0.5])\n    sphere(d=15);\n}\n\n// Handlebars\nmodule handlebars() {\n    // Stem\n    cylinder(h=15, d=4);\n    \n    // Bars\n    translate([0,0,15])\n    rotate([90,0,0])\n    cylinder(h=25, d=3);\n    \n    // Grips\n    for(side=[-10,10]) {\n        translate([0,side,15])\n        rotate([90,0,0])\n        cylinder(h=5, d=4);\n    }\n}\n\n// Exhaust pipe\nmodule exhaust() {\n    // Header pipe\n    cylinder(h=20, d=4);\n    \n    // Muffler\n    translate([15,0,0])\n    rotate([0,90,0])\n    cylinder(h=15, d=6);\n}\n\n// Fuel tank\nmodule fuel_tank() {\n    // Main tank\n    cube([15,12,8], center=true);\n    \n    // Cap\n    translate([0,0,5])\n    cylinder(h=2, d=4);\n}\n\n// Render the complete pitbike\npitbike();",
    "renders": true
  },
  {
    "vehicle": "pocketbike",
    "openscad_code": "// Pocketbike - Realistic Style, Medium Complexity\n// Approx 75mm long, 3D printable, no supports needed\n\n$fn = 32;\n\n// Main module\nmodule pocketbike() {\n    color(\"lightgray\")\n    union() {\n        frame();\n        engine();\n        wheels();\n        seat();\n        handlebars();\n        exhaust();\n    }\n}\n\n// Frame backbone\nmodule frame() {\n    translate([0, 0, 10])\n    difference() {\n        // Main tube\n        rotate([0, 90, 0])\n        cylinder(h = 60, d1 = 8, d2 = 8);\n        \n        // Cutouts for weight reduction\n        for(i = [0:2]) {\n            translate([0, 0, -25 + i*20])\n            rotate([0, 90, 0])\n            cylinder(h = 12, d = 5);\n        }\n    }\n    \n    // Lower frame rails\n    translate([-20, 0, 5])\n    rotate([0, 0, 15])\n    cube([40, 5, 5]);\n    \n    translate([-20, 0, 5])\n    rotate([0, 0, -15])\n    cube([40, 5, 5]);\n}\n\n// Engine block\nmodule engine() {\n    translate([-15, -10, 8])\n    difference() {\n        // Main block\n        cube([20, 15, 12]);\n        \n        // Cooling fins\n        for(i = [0:3]) {\n            translate([2 + i*4, 0, 13])\n            cube([3, 15, 2]);\n            translate([2 + i*4, 0, -3])\n            cube([3, 15, 2]);\n        }\n    }\n    \n    // Cylinder head\n    translate([-10, -10, 22])\n    cube([10, 15, 8]);\n}\n\n// Wheels\nmodule wheels() {\n    // Rear wheel\n    translate([20, 0, 10])\n    rotate([90, 0, 0])\n    union() {\n        difference() {\n            cylinder(h = 8, d = 25);\n            cylinder(h = 9, d = 10);\n        }\n        // Tire tread pattern\n        for(a = [0:30:330]) {\n            rotate([0, 0, a])\n            translate([12.5, 0, 0])\n            cube([3, 2, 8]);\n        }\n    }\n    \n    // Front wheel\n    translate([-20, 0, 10])\n    rotate([90, 0, 0])\n    union() {\n        difference() {\n            cylinder(h = 8, d = 25);\n            cylinder(h = 9, d = 10);\n        }\n        for(a = [0:30:330]) {\n            rotate([0, 0, a])\n            translate([12.5, 0, 0])\n            cube([3, 2, 8]);\n        }\n    }\n}\n\n// Seat\nmodule seat() {\n    translate([-5, 0, 18])\n    hull() {\n        translate([0, 0, 0])\n        sphere(d = 12);\n        translate([15, 0, 0])\n        sphere(d = 12);\n        translate([7.5, 0, 5])\n        sphere(d = 10);\n    }\n}\n\n// Handlebars\nmodule handlebars() {\n    translate([-25, 0, 22])\n    union() {\n        // Stem\n        cylinder(h = 15, d = 5);\n        \n        // Crossbar\n        translate([0, 0, 15])\n        rotate([90, 0, 0])\n        cylinder(h = 20, d = 3);\n        \n        // Grips\n        translate([0, 10, 15])\n        rotate([90, 0, 0])\n        cylinder(h = 5, d = 4);\n        translate([0, -10, 15])\n        rotate([90, 0, 0])\n        cylinder(h = 5, d = 4);\n    }\n}\n\n// Exhaust pipe\nmodule exhaust() {\n    translate([25, 0, 8])\n    rotate([0, 0, 15])\n    union() {\n        cylinder(h = 20, d = 4);\n        translate([20, 0, 0])\n        sphere(d = 5);\n    }\n}\n\n// Render the pocketbike\npocketbike();",
    "renders": true
  },
  {
    "vehicle": "grom",
    "openscad_code": "// Realistic 3D printable grom (rubber cable grommet)\n// Approx 55 mm diameter, 15 mm thick\n// No overhangs >45°, 1.2 mm walls\n\n$fn = 36;\n\n// Main body\nmodule grommet() {\n    difference() {\n        // Outer shape – toroidal ring\n        rotate_extrude(angle = 360, convexity = 4)\n            translate([25, 0, 0])\n                circle(r = 3.5);\n\n        // Central hole 8 mm\n        translate([0, 0, -1])\n            cylinder(h = 17, d = 8, center = true);\n\n        // Top chamfer\n        translate([0, 0, 7])\n            cylinder(h = 2, d1 = 8, d2 = 12, center = true);\n\n        // Bottom chamfer\n        translate([0, 0, -7])\n            cylinder(h = 2, d1 = 12, d2 = 8, center = true);\n\n        // Cable slit (vertical gap for insertion)\n        translate([-30, 0, 0])\n            cube([60, 2.5, 17], center = true);\n    }\n\n    // Reinforcement ribs\n    for (a = [0:60:359]) {\n        rotate([0, 0, a])\n            translate([25, 0, 0])\n                rotate([90, 0, 0])\n                    cylinder(h = 5, d = 2.4, center = true);\n    }\n\n    // Grip ridges on outer surface\n    for (a = [0:15:359]) {\n        rotate([0, 0, a])\n            translate([28.5, 0, 0])\n                rotate([90, 0, 0])\n                    cube([2, 0.6, 7], center = true);\n    }\n\n    // Inner collar for better cable retention\n    difference() {\n        translate([0, 0, 0])\n            cylinder(h = 4, d = 10, center = true);\n\n        translate([0, 0, 0])\n            cylinder(h = 4.2, d = 7.5, center = true);\n    }\n}\n\ngrommet();",
    "renders": true
  },
  {
    "vehicle": "monkey",
    "openscad_code": "// Realistic monkey - medium complexity\n// Designed for 3D printing with no overhangs\n\n$fn = 32;\n\nmodule head() {\n    // Main head sphere\n    translate([0, 0, 45]) \n    sphere(15);\n    \n    // Muzzle\n    translate([0, -8, 42])\n    scale([1.2, 0.8, 0.8])\n    sphere(8);\n    \n    // Nose\n    difference() {\n        translate([0, -14, 42])\n        sphere(3);\n        translate([0, -16, 42])\n        sphere(2);\n    }\n    \n    // Eyes\n    for(x = [-7, 7]) {\n        translate([x, -3, 48])\n        sphere(2.5);\n    }\n    \n    // Ears\n    for(x = [-12, 12]) {\n        translate([x, 0, 48])\n        rotate([0, 0, 90])\n        scale([1, 1.5, 0.5])\n        cylinder(5, 5, 3);\n    }\n}\n\nmodule torso() {\n    // Chest\n    translate([0, 0, 25])\n    scale([1.2, 0.8, 1.5])\n    sphere(12);\n    \n    // Belly\n    translate([0, 0, 15])\n    scale([1, 0.7, 1])\n    sphere(10);\n}\n\nmodule arm(side) {\n    // Upper arm\n    translate([side * 12, 0, 30])\n    rotate([0, 0, side * 15])\n    cylinder(15, 4, 3);\n    \n    // Lower arm\n    translate([side * 20, 0, 15])\n    rotate([0, 0, side * 45])\n    cylinder(12, 3, 2.5);\n    \n    // Hand\n    translate([side * 28, 0, 5])\n    sphere(3.5);\n}\n\nmodule leg(side) {\n    // Upper leg\n    translate([side * 6, 0, 10])\n    rotate([0, 0, side * -10])\n    cylinder(15, 5, 4);\n    \n    // Lower leg\n    translate([side * 8, 0, -5])\n    rotate([0, 0, side * -5])\n    cylinder(12, 4, 3);\n    \n    // Foot\n    translate([side * 9, 3, -15])\n    scale([1.5, 3, 0.8])\n    sphere(4);\n}\n\nmodule tail() {\n    // Tail base\n    translate([0, 8, 12])\n    rotate([0, 90, 0])\n    cylinder(20, 5, 3);\n    \n    // Tail curve\n    translate([-8, 20, 12])\n    rotate([0, 90, -30])\n    cylinder(15, 3, 2);\n    \n    // Tail tip\n    translate([-18, 25, 12])\n    sphere(2);\n}\n\n// Assembly\nunion() {\n    head();\n    torso();\n    \n    // Arms\n    arm(1);\n    arm(-1);\n    \n    // Legs\n    leg(1);\n    leg(-1);\n    \n    // Tail\n    tail();\n}\n\n// Base platform for stability\ntranslate([0, 0, -17])\ncylinder(3, 25, 25);",
    "renders": true
  },
  {
    "vehicle": "zuma",
    "openscad_code": "// Realistic Zuma (medium complexity, 3D-printable)\n// Approx. 65 mm tall, 50 mm wide\n\n// Wall thickness\nwall = 2;\n\n// Main body module\nmodule zuma_body() {\n    // Central sphere (head)\n    sphere(d = 46, $fn = 64);\n    \n    // Snout protrusion\n    translate([0, 18, 0])\n        rotate([0, 0, 0])\n        scale([1.2, 1.8, 0.9])\n        sphere(d = 22, $fn = 32);\n}\n\n// Eye socket\nmodule eye_socket() {\n    difference() {\n        sphere(d = 12, $fn = 24);\n        translate([0, 0, 6])\n            sphere(d = 12.2, $fn = 24);\n    }\n}\n\n// Eye\nmodule eye() {\n    difference() {\n        sphere(d = 8, $fn = 16);\n        translate([0, 0, 4])\n            sphere(d = 8.2, $fn = 16);\n    }\n}\n\n// Nostrils\nmodule nostril() {\n    cylinder(h = 6, r = 2.5, $fn = 12);\n}\n\n// Ear (left)\nmodule ear() {\n    difference() {\n        // Outer ear\n        translate([0, 0, -10])\n            rotate([0, -30, 0])\n            scale([1, 1.2, 0.6])\n            cylinder(h = 15, r1 = 8, r2 = 4, $fn = 24);\n        \n        // Inner ear hole\n        translate([0, 0, -9])\n            rotate([0, -30, 0])\n            scale([1, 1.2, 0.6])\n            cylinder(h = 16, r1 = 6, r2 = 2, $fn = 24);\n    }\n}\n\n// Tail segment\nmodule tail_segment(r) {\n    rotate([0, 90, 0])\n        cylinder(h = 10, r = r, $fn = 24);\n}\n\n// Assemble Zuma\ndifference() {\n    // Main solid body\n    union() {\n        zuma_body();\n        \n        // Left ear\n        translate([-20, 0, 10])\n            rotate([0, 0, -20])\n            ear();\n        \n        // Right ear\n        translate([20, 0, 10])\n            rotate([0, 0, 20])\n            mirror([1, 0, 0])\n            ear();\n        \n        // Tail segments\n        for (i = [0:4]) {\n            translate([0, -23 - i * 8, 0])\n                tail_segment(6 - i * 1);\n        }\n    }\n    \n    // Eye sockets\n    translate([-12, 8, 8])\n        eye_socket();\n    translate([12, 8, 8])\n        eye_socket();\n    \n    // Nostrils\n    translate([-6, 24, -2])\n        nostril();\n    translate([6, 24, -2])\n        nostril();\n    \n    // Mouth line\n    translate([0, 22, -8])\n        rotate([90, 0, 0])\n        cylinder(h = 20, r = 1, $fn = 8);\n}\n\n// Add eyes inside sockets\ntranslate([-12, 8, 8])\n    eye();\ntranslate([12, 8, 8])\n    eye();",
    "renders": true
  },
  {
    "vehicle": "metropolitan",
    "openscad_code": "// Metropolitan City Block - Realistic Medium Complexity\n// Designed for 3D printing - no overhangs, 0.8mm walls\n\n$fn = 32;\n\n// Overall dimensions\nblock_width = 80;\nblock_depth = 60;\nblock_height = 40;\n\n// Base street level\nmodule base_streets() {\n    // Street surface\n    translate([0, 0, -1])\n        cube([block_width + 20, block_depth + 20, 2], center = true);\n    \n    // Sidewalks around central block\n    color(\"gray\")\n    for (x = [-1, 1]) {\n        translate([x * (block_width/2 + 5), 0, 0])\n            cube([10, block_depth + 10, 1]);\n    }\n    for (y = [-1, 1]) {\n        translate([0, y * (block_depth/2 + 5), 0])\n            cube([block_width + 10, 10, 1]);\n    }\n}\n\n// Office tower with windows\nmodule office_tower(w, d, h) {\n    // Main structure\n    difference() {\n        cube([w, d, h], center = true);\n        // Hollow interior\n        translate([0, 0, 2])\n            cube([w - 4, d - 4, h - 2], center = true);\n    }\n    \n    // Windows - grid pattern\n    window_width = 3;\n    window_height = 4;\n    window_gap = 6;\n    \n    for (x = [-w/2 + 4 : window_gap : w/2 - 4]) {\n        for (y = [-d/2 + 4 : window_gap : d/2 - 4]) {\n            for (z = [5 : window_height : h - 5]) {\n                translate([x, y, z])\n                    cube([window_width, window_width, window_height + 1]);\n            }\n        }\n    }\n    \n    // Roof details\n    translate([0, 0, h/2 + 1])\n        cube([w + 2, d + 2, 2], center = true);\n    \n    // Antenna\n    translate([0, 0, h/2 + 3])\n        cylinder(h = 8, d = 2);\n}\n\n// Residential building with pitched roof\nmodule apartment_building(w, d, h) {\n    // Main structure\n    difference() {\n        cube([w, d, h], center = true);\n        // Door\n        translate([0, -d/2 - 0.1, -h/2 + 2])\n            cube([6, 1, 10]);\n    }\n    \n    // Pitched roof\n    translate([0, 0, h/2 + 5])\n        rotate([90, 0, 0])\n            cylinder(h = w + 2, d1 = d + 2, d2 = 0);\n    \n    // Windows\n    for (x = [-w/2 + 5 : 8 : w/2 - 5]) {\n        for (z = [-h/2 + 5 : 6 : h/2 - 5]) {\n            translate([x, d/2 + 0.1, z])\n                cube([4, 1, 4]);\n        }\n    }\n}\n\n// Park with trees\nmodule central_park() {\n    // Grass area\n    color(\"green\")\n    translate([0, 0, 0.5])\n        cube([30, 20, 1], center = true);\n    \n    // Trees\n    for (i = [-10 : 10 : 10]) {\n        for (j = [-5 : 10 : 5]) {\n            translate([i, j, 1.5]) {\n                // Trunk\n                color(\"brown\")\n                cylinder(h = 6, d = 2);\n                // Foliage\n                color(\"darkgreen\")\n                translate([0, 0, 5])\n                    sphere(4);\n            }\n        }\n    }\n}\n\n// Street lights\nmodule street_lights() {\n    for (pos = [[-35, 0], [35, 0], [0, -25], [0, 25]]) {\n        translate([pos[0], pos[1], 0]) {\n            // Pole\n            cylinder(h = 12, d = 1.5);\n            // Light fixture\n            translate([0, 0, 12])\n                rotate([90, 0, 0])\n                    cylinder(h = 4, d1 = 3, d2 = 2);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    base_streets();\n    \n    // Central park\n    central_park();\n    \n    // Office towers\n    translate([-20, 15, 5])\n        office_tower(15, 15, 35);\n    translate([20, 15, 5])\n        office_tower(15, 15, 30);\n    \n    // Apartment buildings\n    translate([-20, -15, 5])\n        apartment_building(15, 20, 20);\n    translate([20, -15, 5])\n        apartment_building(15, 20, 25);\n    \n    // Street lights\n    street_lights();\n}",
    "renders": true
  },
  {
    "vehicle": "ruckus",
    "openscad_code": "// Ruckus (wireless access point) - realistic medium complexity\n// Dimensions: ~85mm x ~55mm x ~35mm (fits most FDM printers)\n\n$fn = 36; // Smooth curves\n\n// Main body shell\nmodule body() {\n    difference() {\n        // Outer rounded shell\n        minkowski() {\n            cube([80, 50, 25], center=true);\n            sphere(4);\n        }\n        \n        // Hollow interior\n        minkowski() {\n            cube([76, 46, 22], center=true);\n            sphere(3);\n        }\n        \n        // Bottom opening for cables\n        translate([0, 0, -12.5])\n            cube([20, 20, 5], center=true);\n    }\n}\n\n// Front LED indicators\nmodule leds() {\n    translate([-35, 20, 12]) {\n        for(i = [0:2]) {\n            translate([i*10, 0, 0])\n                color(\"blue\")\n                cylinder(h=1, d=3, center=false);\n        }\n    }\n}\n\n// Top ventilation slots\nmodule vents() {\n    translate([0, 0, 12.5]) {\n        for(i = [-3:3]) {\n            translate([i*10, 0, 0])\n                cube([7, 45, 1], center=true);\n        }\n    }\n}\n\n// Rear LAN ports\nmodule ports() {\n    translate([40, 0, 0]) {\n        // Main port block\n        cube([6, 30, 15], center=true);\n        \n        // Individual ports\n        for(i = [-1:1]) {\n            translate([3.5, i*9, 0])\n                cylinder(h=7, d=8, center=true);\n        }\n        \n        // Power port\n        translate([3.5, -20, 0])\n            cylinder(h=7, d=12, center=true);\n    }\n}\n\n// Side antennae\nmodule antennas() {\n    // Left antenna\n    translate([-40, -25, 0]) {\n        rotate([0, 0, 45])\n            cube([3, 3, 40], center=true);\n    }\n    \n    // Right antenna\n    translate([-40, 25, 0]) {\n        rotate([0, 0, -45])\n            cube([3, 3, 40], center=true);\n    }\n}\n\n// Mounting bracket\nmodule bracket() {\n    translate([0, 0, -15]) {\n        // Base plate\n        cube([60, 8, 2], center=true);\n        \n        // Screw holes\n        for(x = [-20:20:40]) {\n            translate([x, 0, -1])\n                cylinder(h=4, d=4, center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    leds();\n    difference() {\n        body();\n        vents();\n    }\n    ports();\n    antennas();\n    bracket();\n}",
    "renders": true
  },
  {
    "vehicle": "pcx",
    "openscad_code": "// PCX (Paintbrush Image) file model - Realistic style, medium complexity\n// Dimensions: 60 x 50 x 8 mm\n\n// Main module\nmodule pcx_file() {\n    // Base card body\n    difference() {\n        // Main card shape\n        cube([60, 50, 2], center=true);\n        \n        // Rounded corners - subtract cylinders from corners\n        for (x = [-28, 28])\n            for (y = [-23, 23])\n                translate([x, y, 0])\n                    cylinder(h=3, r=3, center=true);\n    }\n    \n    // Top label area\n    difference() {\n        translate([0, 15, 1.5])\n            cube([56, 18, 1], center=true);\n            \n        // Rounded top corners of label\n        for (x = [-26, 26])\n            translate([x, 24, 1.5])\n                cylinder(h=2, r=2, center=true);\n    }\n    \n    // Bottom read area\n    difference() {\n        translate([0, -15, 1.5])\n            cube([56, 18, 1], center=true);\n            \n        // Rounded bottom corners\n        for (x = [-26, 26])\n            translate([x, -24, 1.5])\n                cylinder(h=2, r=2, center=true);\n    }\n    \n    // Magnetic stripe\n    translate([0, -20, 1.5])\n        cube([56, 8, 0.5], center=true);\n    \n    // Write protect notch\n    difference() {\n        translate([25, 20, 0])\n            cube([6, 4, 2]);\n    }\n    \n    // Index hole\n    translate([-25, 20, 0])\n        cylinder(h=2, r=2, $fn=16);\n    \n    // Label text grooves (simulated)\n    for (i = [0:3]) {\n        translate([-20 + i*12, 15, 2])\n            cube([8, 0.5, 0.2], center=true);\n    }\n    \n    // PCX logo area\n    difference() {\n        translate([0, 0, 1.5])\n            cube([20, 10, 0.5], center=true);\n            \n        // Cutout for \"PCX\" text\n        translate([-7, 0, 2])\n            cube([4, 6, 1], center=true);\n        translate([0, 0, 2])\n            cube([4, 6, 1], center=true);\n        translate([7, 0, 2])\n            cube([4, 6, 1], center=true);\n    }\n    \n    // Reinforcement rings\n    for (x = [-20, 0, 20])\n        for (y = [-10, 10])\n            translate([x, y, 1])\n                cylinder(h=0.5, r=1.5, $fn=16);\n}\n\n// Render the model\npcx_file();",
    "renders": true
  },
  {
    "vehicle": "sh150i",
    "openscad_code": "// Honda SH150i - Medium complexity model\n// Scale 1:40 (approx 85mm long)\n\n$fn = 32;\n\n// Main assembly\nmodule sh150i() {\n    // Rear wheel\n    rear_wheel();\n    \n    // Front wheel\n    translate([65, 0, 0])\n        front_wheel();\n    \n    // Main body\n    body();\n    \n    // Handlebars\n    translate([60, 0, 30])\n        handlebars();\n    \n    // Seat\n    translate([25, 0, 18])\n        seat();\n    \n    // Mirrors\n    mirrors();\n    \n    // Exhaust\n    exhaust();\n    \n    // Headlight\n    translate([68, 0, 12])\n        headlight();\n}\n\n// Wheels\nmodule rear_wheel() {\n    // Tire\n    color(\"black\")\n    rotate([90, 0, 0])\n        cylinder(h=8, r=18, center=true);\n    \n    // Rim\n    color(\"silver\")\n    rotate([90, 0, 0])\n        cylinder(h=9, r=15, center=true);\n    \n    // Spokes\n    color(\"gray\")\n    for(i=[0:45:315]) {\n        rotate([90, 0, i])\n            cylinder(h=9, r1=8, r2=10, center=true);\n    }\n}\n\nmodule front_wheel() {\n    rear_wheel();\n}\n\n// Main body shell\nmodule body() {\n    // Lower section\n    color(\"darkblue\")\n    union() {\n        // Engine cover\n        translate([40, 0, 0])\n            cube([20, 20, 25], center=true);\n        \n        // Floor\n        translate([50, 0, -5])\n            cube([40, 30, 5], center=true);\n        \n        // Side panels\n        translate([25, 12, 10])\n            cube([50, 5, 20], center=true);\n        mirror([0, 1, 0])\n            translate([25, 12, 10])\n                cube([50, 5, 20], center=true);\n    }\n    \n    // Upper fairing\n    color(\"darkblue\")\n    translate([55, 0, 15])\n        cube([30, 25, 25], center=true);\n    \n    // Front fender\n    color(\"black\")\n    translate([65, 0, 5])\n        rotate([0, 30, 0])\n            cube([10, 30, 5], center=true);\n}\n\n// Seat\nmodule seat() {\n    color(\"black\")\n    difference() {\n        // Main seat\n        translate([0, 0, 5])\n            cube([40, 22, 10], center=true);\n        \n        // Rounded top\n        translate([0, 0, 12])\n            scale([1, 0.8, 0.3])\n                sphere(r=15);\n    }\n}\n\n// Handlebars\nmodule handlebars() {\n    // Stem\n    color(\"silver\")\n    translate([0, 0, -5])\n        cylinder(h=10, r=3);\n    \n    // Bars\n    translate([0, 0, 5])\n        rotate([0, 90, 0])\n            cylinder(h=20, r=2);\n}\n\n// Mirrors\nmodule mirrors() {\n    // Left mirror\n    translate([60, -12, 35])\n        mirror_assembly();\n    \n    // Right mirror\n    translate([60, 12, 35])\n        mirror_assembly();\n}\n\nmodule mirror_assembly() {\n    // Stem\n    color(\"black\")\n    rotate([45, 0, 0])\n        cylinder(h=8, r=1);\n    \n    // Mirror\n    color(\"silver\")\n    translate([0, 4, 4])\n        cube([6, 8, 2], center=true);\n}\n\n// Exhaust\nmodule exhaust() {\n    color(\"gray\")\n    union() {\n        // Pipe\n        translate([30, -10, 5])\n            rotate([0, 0, 20])\n                cylinder(h=20, r=2);\n        \n        // Muffler\n        translate([20, -12, 5])\n            cylinder(h=15, r=4);\n    }\n}\n\n// Headlight\nmodule headlight() {\n    // Housing\n    color(\"black\")\n    cube([6, 15, 15], center=true);\n    \n    // Lens\n    color(\"white\")\n    translate([3, 0, 0])\n        cube([1, 12, 12], center=true);\n}\n\n// Render the scooter\nsh150i();",
    "renders": true
  },
  {
    "vehicle": "helix",
    "openscad_code": "// Realistic Helix Model - Medium Complexity\n// 3D printable double helix with realistic proportions\n\n// Parameters\nhelix_radius = 12;          // Radius from center to helix tube center\ntube_radius = 4;            // Radius of the helix tube\nturns = 3;                  // Number of complete turns\nheight_per_turn = 25;       // Vertical distance per turn\nsegments_per_turn = 32;     // Segments for smooth curves\nwall_thickness = 1.5;       // Wall thickness for 3D printing\n\n// Calculate derived values\ntotal_height = turns * height_per_turn;\nsegments = turns * segments_per_turn;\nangle_step = 360 / segments_per_turn;\nheight_step = height_per_turn / segments_per_turn;\n\n// Module to create a single helix strand\nmodule helix_strand(phase) {\n    union() {\n        // Generate the main tube body\n        for (i = [0 : segments-1]) {\n            angle = i * angle_step + phase;\n            height = i * height_step;\n            \n            // Position each segment\n            translate([\n                helix_radius * cos(angle),\n                helix_radius * sin(angle),\n                height\n            ]) {\n                // Create hollow tube segment\n                difference() {\n                    // Outer cylinder\n                    cylinder(\n                        h = height_step + 0.1,  // Slight overlap\n                        r = tube_radius,\n                        $fn = 16\n                    );\n                    \n                    // Inner hollow space\n                    translate([0, 0, -0.05])\n                    cylinder(\n                        h = height_step + 0.2,\n                        r = tube_radius - wall_thickness,\n                        $fn = 16\n                    );\n                }\n            }\n        }\n        \n        // Add end caps\n        // Bottom cap\n        translate([\n            helix_radius * cos(phase),\n            helix_radius * sin(phase),\n            -wall_thickness/2\n        ]) {\n            difference() {\n                cylinder(h = wall_thickness, r = tube_radius, $fn = 16);\n                cylinder(h = wall_thickness + 0.1, r = tube_radius - wall_thickness, $fn = 16);\n            }\n        }\n        \n        // Top cap\n        translate([\n            helix_radius * cos(segments * angle_step + phase),\n            helix_radius * sin(segments * angle_step + phase),\n            total_height - wall_thickness/2\n        ]) {\n            difference() {\n                cylinder(h = wall_thickness, r = tube_radius, $fn = 16);\n                cylinder(h = wall_thickness + 0.1, r = tube_radius - wall_thickness, $fn = 16);\n            }\n        }\n    }\n}\n\n// Module for support structure\nmodule support_structure() {\n    // Central support rod\n    difference() {\n        cylinder(h = total_height + wall_thickness, r = helix_radius - tube_radius - 2, $fn = 32);\n        cylinder(h = total_height + wall_thickness + 0.2, r = helix_radius - tube_radius - 2 - wall_thickness, $fn = 32);\n    }\n    \n    // Base plate for stability\n    difference() {\n        translate([0, 0, -wall_thickness])\n        cylinder(h = wall_thickness * 2, r = helix_radius + tube_radius + 5, $fn = 64);\n        \n        translate([0, 0, -wall_thickness - 0.1])\n        cylinder(h = wall_thickness * 2.2, r = helix_radius - tube_radius - 2 - wall_thickness, $fn = 64);\n    }\n}\n\n// Main assembly\nunion() {\n    // First helix strand (0 degrees phase)\n    helix_strand(0);\n    \n    // Second helix strand (180 degrees out of phase)\n    helix_strand(180);\n    \n    // Support structure\n    support_structure();\n}\n\n// Add small connecting bridges every half turn for printability\nfor (turn = [0.5 : 1 : turns]) {\n    height = turn * height_per_turn;\n    bridge_width = tube_radius * 0.8;\n    \n    translate([0, 0, height - height_step/2]) {\n        difference() {\n            // Bridge between strands\n            cube([\n                helix_radius * 2 + tube_radius * 2,\n                bridge_width,\n                wall_thickness\n            ], center = true);\n            \n            // Hollow out bridge\n            cube([\n                helix_radius * 2 + tube_radius * 2 - wall_thickness * 2,\n                bridge_width - wall_thickness * 2,\n                wall_thickness + 0.1\n            ], center = true);\n        }\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "reflex",
    "openscad_code": "// Realistic Reflex Sight (Medium Complexity)\n// 3D printable reflex sight with lens, LED, and housing\n\n$fn = 64;  // Smooth curves for printing\n\n// Main dimensions\nbase_width = 45;\nbase_length = 60;\nbase_height = 8;\ntube_diameter = 30;\ntube_length = 55;\nlens_diameter = 28;\nlens_thickness = 3;\nled_size = 5;\nmount_width = 20;\nmount_length = 25;\nmount_height = 12;\n\nmodule base_plate() {\n    difference() {\n        // Main base\n        cube([base_length, base_width, base_height], center=true);\n        \n        // Picatinny rail slots (20mm standard)\n        for(i = [-1:1]) {\n            translate([i * 10, 0, base_height/2 - 1])\n                cube([8, 22, 2], center=true);\n        }\n    }\n}\n\nmodule reflex_tube() {\n    difference() {\n        // Main tube housing\n        rotate([0, 90, 0])\n            cylinder(h=tube_length, d=tube_diameter, center=true);\n        \n        // Front lens opening\n        rotate([0, 90, 0])\n            translate([tube_length/2 - lens_thickness, 0, 0])\n                cylinder(h=lens_thickness+1, d=lens_diameter, center=true);\n        \n        // Rear lens opening\n        rotate([0, 90, 0])\n            translate([-tube_length/2 + lens_thickness, 0, 0])\n                cylinder(h=lens_thickness+1, d=lens_diameter, center=true);\n        \n        // LED cavity\n        translate([0, tube_diameter/2 - 3, -tube_length/4])\n            rotate([45, 0, 0])\n                cube([led_size+2, led_size+2, led_size+2], center=true);\n    }\n}\n\nmodule lenses() {\n    // Front lens (angled)\n    translate([tube_length/2 - lens_thickness/2, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h=lens_thickness, d=lens_diameter, center=true);\n    \n    // Rear lens (angled)\n    translate([-tube_length/2 + lens_thickness/2, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h=lens_thickness, d=lens_diameter, center=true);\n}\n\nmodule led_assembly() {\n    // LED holder\n    translate([0, tube_diameter/2 - 3, -tube_length/4])\n        rotate([45, 0, 0])\n            cube([led_size, led_size, led_size], center=true);\n    \n    // LED\n    color(\"red\")\n    translate([0, tube_diameter/2 - 3, -tube_length/4])\n        rotate([45, 0, 0])\n            sphere(d=led_size/2, center=true);\n}\n\nmodule windage_elevation_knobs() {\n    // Windage knob (right side)\n    translate([tube_length/2, tube_diameter/2 + 5, 0])\n        rotate([90, 0, 0])\n            cylinder(h=8, d=12, center=true);\n    \n    // Elevation knob (top)\n    translate([0, 0, tube_diameter/2 + 5])\n        rotate([0, 0, 0])\n            cylinder(h=8, d=12, center=true);\n    \n    // Knurling for grip\n    for(i = [0:11]) {\n        rotate([0, 0, i * 30])\n            translate([tube_length/2 + 4, tube_diameter/2 + 5, 0])\n                cube([0.5, 8, 1], center=true);\n    }\n}\n\nmodule battery_compartment() {\n    // Battery cover\n    translate([-tube_length/2 - 8, 0, -tube_diameter/4])\n        rotate([0, 90, 0])\n            cylinder(h=15, d=10, center=true);\n}\n\n// Main assembly\ntranslate([0, 0, base_height/2])\nunion() {\n    base_plate();\n    \n    translate([0, 0, base_height/2 + tube_diameter/2])\n    union() {\n        reflex_tube();\n        lenses();\n        led_assembly();\n        windage_elevation_knobs();\n        battery_compartment();\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "silverwing",
    "openscad_code": "// Silverwing in realistic style with medium complexity\n// 3D printable model of a silverwing aircraft\n\n$fn = 50;  // Smooth curves for printing\n\nmodule fuselage() {\n    // Main body cylinder\n    difference() {\n        union() {\n            // Main fuselage body\n            hull() {\n                translate([0, 0, 5]) sphere(8);\n                translate([0, 0, -5]) sphere(6);\n            }\n            \n            // Nose cone\n            translate([0, -12, 0]) rotate([90, 0, 0]) \n                cylinder(h=15, r1=6, r2=0);\n            \n            // Tail section\n            translate([0, 12, 0]) rotate([90, 0, 0]) \n                cylinder(h=10, r1=6, r2=3);\n        }\n        \n        // Cockpit cutout\n        translate([0, -5, 5]) rotate([0, 20, 0])\n            cube([12, 15, 8], center=true);\n    }\n}\n\nmodule wing() {\n    // Main wing with airfoil shape\n    difference() {\n        hull() {\n            // Leading edge\n            translate([-20, 0, 0]) sphere(2);\n            translate([20, 0, 0]) sphere(2);\n            // Trailing edge\n            translate([-20, 0, -1]) sphere(1);\n            translate([20, 0, -1]) sphere(1);\n        }\n        \n        // Wing tip cutouts for rounded edges\n        translate([-20, 0, 0]) sphere(1.5);\n        translate([20, 0, 0]) sphere(1.5);\n    }\n}\n\nmodule horizontal_stabilizer() {\n    // Tail wing\n    hull() {\n        translate([-8, 0, 0]) sphere(1.5);\n        translate([8, 0, 0]) sphere(1.5);\n        translate([-8, 0, -1]) sphere(1);\n        translate([8, 0, -1]) sphere(1);\n    }\n}\n\nmodule vertical_stabilizer() {\n    // Vertical tail\n    hull() {\n        translate([0, 0, 0]) sphere(1.5);\n        translate([0, 0, 8]) sphere(1);\n        translate([0, 0.5, 0]) sphere(1);\n        translate([0, 0.5, 8]) sphere(0.5);\n    }\n}\n\nmodule propeller() {\n    // Three-blade propeller\n    rotate([0, 90, 0]) {\n        for(i = [0:120:359]) {\n            rotate([0, 0, i]) {\n                hull() {\n                    translate([0, 0, 0]) sphere(0.5);\n                    translate([10, 0, 0]) sphere(1);\n                }\n            }\n        }\n    }\n}\n\nmodule landing_gear() {\n    // Main gear struts\n    for(side = [-1, 1]) {\n        translate([side * 15, 5, -6]) {\n            cylinder(h=8, r=1);\n            sphere(1.5);\n        }\n    }\n    \n    // Nose gear\n    translate([0, -8, -6]) {\n        cylinder(h=8, r=1);\n        sphere(1.5);\n    }\n}\n\nmodule engine() {\n    // Engine cowling\n    difference() {\n        translate([0, -18, 0]) \n            cylinder(h=8, r=7);\n        translate([0, -18, 0]) \n            cylinder(h=9, r=5);\n    }\n}\n\n// Assembly\nmodule silverwing() {\n    // Main body\n    fuselage();\n    \n    // Wings\n    translate([0, 0, 0]) {\n        wing();\n        mirror([0, 0, 1]) wing();\n    }\n    \n    // Tail surfaces\n    translate([0, 15, 0]) rotate([20, 0, 0]) horizontal_stabilizer();\n    translate([0, 15, 1]) rotate([0, 90, 0]) vertical_stabilizer();\n    \n    // Engine and propeller\n    engine();\n    translate([0, -22, 0]) propeller();\n    \n    // Landing gear\n    landing_gear();\n    \n    // Wing struts\n    for(side = [-1, 1]) {\n        hull() {\n            translate([side * 15, 0, 0]) sphere(1);\n            translate([side * 15, -10, -3]) sphere(1);\n        }\n    }\n}\n\n// Scale and position for printing\ntranslate([0, 0, 10]) scale(2.5) silverwing();",
    "renders": true
  },
  {
    "vehicle": "burgman",
    "openscad_code": "// Burgman Scooter - Realistic Style, Medium Complexity\n// Designed for 3D printing with proper wall thickness and minimal overhangs\n\n// Overall scale factor\nscale_factor = 1/4;\n\n// Main module\nmodule burgman_scooter() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        // Position all parts relative to ground\n        translate([0, 0, 50]) {\n            union() {\n                // Rear wheel assembly\n                rear_wheel_assembly();\n                \n                // Front wheel assembly\n                translate([320, 0, 0]) {\n                    front_wheel_assembly();\n                }\n                \n                // Main body\n                main_body();\n                \n                // Seat\n                seat();\n                \n                // Handlebars\n                handlebars();\n                \n                // Headlight\n                headlight();\n                \n                // Exhaust\n                exhaust();\n                \n                // Footrest area\n                footrest();\n            }\n        }\n    }\n}\n\n// Rear wheel with tire and rim\nmodule rear_wheel_assembly() {\n    translate([-180, 0, -50]) {\n        // Tire\n        color(\"black\") {\n            difference() {\n                cylinder(h=40, r=140, center=true);\n                cylinder(h=45, r=110, center=true);\n            }\n        }\n        \n        // Rim\n        color(\"silver\") {\n            for(i=[0:45:315]) {\n                rotate([90, 0, i]) {\n                    translate([0, 0, 0]) {\n                        cylinder(h=35, r=100, center=true);\n                    }\n                }\n            }\n        }\n        \n        // Hub\n        color(\"gray\") {\n            cylinder(h=45, r=30, center=true);\n        }\n    }\n}\n\n// Front wheel assembly\nmodule front_wheel_assembly() {\n    // Fork\n    color(\"silver\") {\n        // Left fork\n        translate([-20, -50, 0]) {\n            cylinder(h=200, r=15);\n        }\n        // Right fork\n        translate([20, -50, 0]) {\n            cylinder(h=200, r=15);\n        }\n    }\n    \n    // Wheel\n    translate([0, 0, -50]) {\n        // Tire\n        color(\"black\") {\n            difference() {\n                cylinder(h=35, r=120, center=true);\n                cylinder(h=40, r=90, center=true);\n            }\n        }\n        \n        // Rim\n        color(\"silver\") {\n            cylinder(h=30, r=80, center=true);\n        }\n        \n        // Hub\n        color(\"gray\") {\n            cylinder(h=40, r=25, center=true);\n        }\n    }\n}\n\n// Main body/fairing\nmodule main_body() {\n    color(\"navy\") {\n        // Lower main body\n        difference() {\n            hull() {\n                translate([-180, 0, -50]) {\n                    cube([200, 200, 120], center=true);\n                }\n                translate([120, 0, -50]) {\n                    cube([200, 180, 100], center=true);\n                }\n            }\n            \n            // Wheel cutouts\n            translate([-180, 0, -50]) {\n                rotate([90, 0, 0]) {\n                    cylinder(h=200, r=145, center=true);\n                }\n            }\n            translate([320, 0, -50]) {\n                rotate([90, 0, 0]) {\n                    cylinder(h=200, r=125, center=true);\n                }\n            }\n        }\n        \n        // Upper body\n        hull() {\n            translate([0, 0, 20]) {\n                cube([400, 160, 80], center=true);\n            }\n            translate([100, 0, 50]) {\n                cube([200, 140, 60], center=true);\n            }\n        }\n    }\n}\n\n// Seat\nmodule seat() {\n    color(\"darkgray\") {\n        translate([0, 0, 70]) {\n            hull() {\n                translate([-50, 0, 0]) {\n                    cube([300, 150, 30], center=true);\n                }\n                translate([100, 0, 20]) {\n                    cube([200, 140, 30], center=true);\n                }\n            }\n        }\n        \n        // Backrest\n        translate([150, 0, 90]) {\n            cube([80, 120, 40], center=true);\n        }\n    }\n}\n\n// Handlebars\nmodule handlebars() {\n    color(\"black\") {\n        // Stem\n        translate([320, 0, 50]) {\n            cylinder(h=100, r=15);\n        }\n        \n        // Handlebar\n        translate([320, 0, 150]) {\n            rotate([0, 90, 0]) {\n                cylinder(h=200, r=12);\n            }\n        }\n        \n        // Grips\n        translate([320, 90, 150]) {\n            cylinder(h=30, r=15);\n        }\n        translate([320, -90, 150]) {\n            cylinder(h=30, r=15);\n        }\n    }\n}\n\n// Headlight\nmodule headlight() {\n    color(\"white\") {\n        translate([320, 0, 0]) {\n            sphere(r=40);\n        }\n    }\n    \n    // Headlight housing\n    color(\"silver\") {\n        translate([340, 0, 0]) {\n            cylinder(h=30, r=50);\n        }\n    }\n}\n\n// Exhaust pipe\nmodule exhaust() {\n    color(\"silver\") {\n        // Pipe\n        translate([-100, 100, -70]) {\n            rotate([0, 90, 0]) {\n                cylinder(h=200, r=20);\n            }\n        }\n        \n        // Muffler\n        translate([0, 100, -70]) {\n            cylinder(h=100, r=30);\n        }\n    }\n}\n\n// Footrest area\nmodule footrest() {\n    color(\"darkgray\") {\n        translate([50, 0, -30]) {\n            cube([200, 180, 10], center=true);\n        }\n    }\n}\n\n// Generate the model\nburgman_scooter();",
    "renders": true
  },
  {
    "vehicle": "tmax",
    "openscad_code": "// TMAX DX medium-complexity realistic model\n// Approx. scale 1:18 (about 80 mm long)\n\n$fn = 30;\n\nmodule main_frame() {\n    // Central beam\n    difference() {\n        union() {\n            translate([-5, -10, 0])\n                cube([10, 20, 8]);\n            translate([-20, -8, 8])\n                cube([35, 16, 6]);\n            translate([10, -8, 8])\n                cube([20, 16, 6]);\n        }\n        // Lightening holes\n        for (x = [-10:10:10])\n            translate([x, 0, 4])\n                rotate([0, 90, 0])\n                    cylinder(h = 20, d = 5);\n    }\n}\n\nmodule front_fork() {\n    // Triple clamp\n    translate([25, 0, 25])\n        rotate([0, -90, 0])\n            cylinder(h = 20, d1 = 12, d2 = 8);\n    // Fork tubes\n    for (y = [-8, 8])\n        translate([25, y, 0])\n            cylinder(h = 30, d = 5);\n    // Front fender\n    translate([25, 0, 15])\n        rotate([90, 0, 0])\n            cylinder(h = 25, d1 = 18, d2 = 22);\n}\n\nmodule rear_swingarm() {\n    // Arm body\n    difference() {\n        translate([-25, -12, 5])\n            cube([30, 24, 5]);\n        // Shock mount hole\n        translate([-15, 0, 7.5])\n            rotate([90, 0, 0])\n                cylinder(h = 25, d = 4);\n    }\n    // Pivot axle\n    translate([-25, 0, 7.5])\n        rotate([0, 90, 0])\n            cylinder(h = 24, d = 6);\n}\n\nmodule engine_block() {\n    // Main block\n    translate([0, -20, 8])\n        cube([20, 40, 12]);\n    // Cylinder head\n    translate([5, -22, 20])\n        cube([10, 44, 8]);\n    // Exhaust stub\n    translate([0, -25, 14])\n        rotate([90, 0, 0])\n            cylinder(h = 15, d = 5);\n}\n\nmodule wheels() {\n    // Front wheel\n    translate([25, 0, 0])\n        rotate([0, 0, 90])\n            cylinder(h = 8, d = 22);\n    // Rear wheel\n    translate([-15, 0, 0])\n        rotate([0, 0, 90])\n            cylinder(h = 12, d = 26);\n    // Brake discs\n    for (x = [25, -15])\n        translate([x, 0, 3])\n            rotate([0, 0, 90])\n                cylinder(h = 1, d = 20);\n}\n\nmodule body_panels() {\n    // Front cowl\n    difference() {\n        translate([20, 0, 20])\n            rotate([0, 0, 20])\n                cube([15, 30, 20]);\n        // Headlight hole\n        translate([28, 0, 20])\n            sphere(d = 8);\n    }\n    // Seat\n    translate([5, 0, 20])\n        scale([1.2, 1, 0.5])\n            sphere(d = 25);\n    // Side panels\n    for (y = [-25, 25])\n        translate([-5, y/3, 15])\n            rotate([0, 0, y/10])\n                cube([25, 10, 10]);\n}\n\nmodule handlebars() {\n    translate([20, 0, 35])\n        rotate([0, 30, 0])\n            cylinder(h = 20, d = 3);\n}\n\nunion() {\n    main_frame();\n    front_fork();\n    rear_swingarm();\n    engine_block();\n    wheels();\n    body_panels();\n    handlebars();\n}",
    "renders": true
  },
  {
    "vehicle": "xmax",
    "openscad_code": "// XMas tree ornament – realistic style, medium complexity\n// Overall height ≈ 75 mm.  Wall thickness = 1.2 mm (3×0.4 mm nozzle passes)\n// 3D-printable without supports – every slope ≤45°\n\n$fa = 2;\n$fs = 0.5;\n\nmodule tree() {\n    // Central trunk\n    cylinder(h=20, d=5, center=true);\n\n    // Layered conical sections\n    layer(0, 20, 20, 10);   // bottom\n    layer(15, 18, 16, 9);\n    layer(28, 16, 12, 8);\n    layer(38, 14,  8, 7);\n    layer(46, 12,  4, 6);\n}\n\nmodule layer(z, h, r_base, r_top) {\n    difference() {\n        // Solid cone frustum\n        translate([0,0,z])\n            cylinder(h=h, r1=r_base, r2=r_top, center=false);\n\n        // Hollow it out\n        translate([0,0,z+1.2])\n            cylinder(h=h-2.4, r1=r_base-1.2, r2=r_top-1.2, center=false);\n    }\n}\n\nmodule trunk() {\n    // Simple hollow cylinder for trunk\n    difference() {\n        cylinder(h=8, d=6, center=true);\n        cylinder(h=8.2, d=3.6, center=true);\n    }\n}\n\nmodule star() {\n    // 5-point star on top\n    linear_extrude(height=2, center=true, convexity=10)\n        scale([1,1,1])\n            polygon(\n                points = [\n                    for(i=[0:10])\n                        let(a = i*36)\n                        [cos(a)*(i%2?2.5:5),\n                         sin(a)*(i%2?2.5:5)]\n                ]\n            );\n}\n\nmodule ornament_ball(z) {\n    // Small sphere bauble\n    translate([0,0,z]) sphere(d=3);\n}\n\nmodule garlands() {\n    // Spiral garland around tree\n    for(z=[10:5:50])\n        rotate([0,0,z*15])\n            translate([10-0.2*z,0,z])\n                sphere(d=1.5);\n}\n\n// Assembly\ntranslate([0,0,-30])\nunion() {\n    tree();\n    translate([0,0,-10]) trunk();\n    translate([0,0,50]) star();\n    garlands();\n    // Additional baubles on tips\n    ornament_ball(20);\n    ornament_ball(34);\n    ornament_ball(45);\n    // Hanging loop\n    translate([0,0,55]) rotate([180,0,0])\n        difference() {\n            cylinder(h=5, d=4, center=true);\n            cylinder(h=5.2, d=2, center=true);\n        }\n}",
    "renders": true
  },
  {
    "vehicle": "forza",
    "openscad_code": "// OpenSCAD Forza Logo – medium-realistic version\n// 3D-print-ready, ~70 mm across, 5 mm thick\n// All parts are unioned onto a flat base; no steep overhangs\n\nmodule forza_logo() {\n    // Base disc (build plate)\n    difference() {\n        cylinder(h = 2, d = 70, $fn = 90);\n        translate([0,0,-0.1])      // printing-friendly relief\n            cylinder(h = 2.2, d = 66, $fn = 90);\n    }\n\n    // Main letter “F” body\n    // Vertical stem\n    translate([-15,0,2])\n        cube([10, 30, 5], center = true);\n\n    // Top horizontal bar\n    translate([-10, 10,2])\n        cube([20, 10, 5], center = true);\n\n    // Middle horizontal bar\n    translate([-7.5, 0,2])\n        cube([15, 8, 5], center = true);\n\n    // Angled slash “/”\n    rotate([0,0,25])\n        translate([0,-5,2])\n            cube([5, 35, 5], center = true);\n\n    // Stylized right swoosh\n    hull() {\n        translate([10, -10,2])\n            sphere(d = 5, $fn = 20);\n        translate([25, 10,2])\n            sphere(d = 7, $fn = 20);\n        translate([10, 10,2])\n            sphere(d = 5, $fn = 20);\n    }\n\n    // Reinforcing rib for swoosh\n    rotate([0,0,35])\n        translate([16, -2,4.5])\n            cube([25, 3, 1], center = true);\n\n    // Small vents along top bar\n    for(x = [-15 : 5 : -5]) {\n        translate([x, 10, 4.5])\n            cube([2, 8, 2], center = true);\n    }\n}\n\n// Render\nforza_logo();",
    "renders": true
  },
  {
    "vehicle": "sh300i",
    "openscad_code": "// SH300i Scooter Model (Realistic Style, Medium Complexity)\n\nscale_factor = 0.3;  // Scale down for 3D printing\nwall_thickness = 2;\n\nmodule wheel() {\n    // Tire\n    color(\"black\")\n    difference() {\n        cylinder(h=4*scale_factor, r=8*scale_factor, $fn=32);\n        translate([0,0,-0.1])\n            cylinder(h=4.2*scale_factor, r=6*scale_factor, $fn=32);\n    }\n    \n    // Rim\n    color(\"silver\")\n    translate([0,0,2.1*scale_factor])\n        cylinder(h=1*scale_factor, r=7*scale_factor, $fn=32);\n}\n\nmodule fork() {\n    // Front suspension fork\n    color(\"silver\")\n    union() {\n        translate([-5*scale_factor,0,0])\n            cube([10*scale_factor, 2*scale_factor, 15*scale_factor]);\n        translate([-4*scale_factor,-1*scale_factor,10*scale_factor])\n            cube([8*scale_factor, 4*scale_factor, 5*scale_factor]);\n    }\n}\n\nmodule handlebar() {\n    // Handlebar assembly\n    color(\"silver\")\n    union() {\n        // Handlebar stem\n        translate([0,0,20*scale_factor])\n            cylinder(h=8*scale_factor, r=1.5*scale_factor, $fn=16);\n        \n        // Handlebar grips\n        rotate([0,90,0]) {\n            translate([0,0,-12*scale_factor])\n                cylinder(h=10*scale_factor, r=1*scale_factor, $fn=16);\n            translate([0,0,2*scale_factor])\n                cylinder(h=10*scale_factor, r=1*scale_factor, $fn=16);\n        }\n    }\n}\n\nmodule seat() {\n    // Rider seat\n    color(\"black\")\n    translate([-5*scale_factor,0,23*scale_factor])\n        scale([1, 0.7, 0.3])\n            sphere(r=8*scale_factor, $fn=32);\n}\n\nmodule body() {\n    // Main body\n    color(\"red\")\n    union() {\n        // Front fairing\n        translate([0,0,12*scale_factor])\n            scale([1.2, 0.8, 0.6])\n                sphere(r=10*scale_factor, $fn=32);\n        \n        // Floorboard\n        translate([-15*scale_factor,0,8*scale_factor])\n            cube([30*scale_factor, 12*scale_factor, 2*scale_factor]);\n        \n        // Rear section\n        translate([-25*scale_factor,0,15*scale_factor])\n            scale([1, 0.8, 0.4])\n                sphere(r=12*scale_factor, $fn=32);\n    }\n}\n\nmodule engine() {\n    // Engine block\n    color(\"gray\")\n    translate([-20*scale_factor,-4*scale_factor,8*scale_factor])\n        cube([10*scale_factor, 8*scale_factor, 6*scale_factor]);\n}\n\nmodule exhaust() {\n    // Exhaust pipe\n    color(\"silver\")\n    rotate([0,-10,0])\n        translate([-25*scale_factor,-6*scale_factor,6*scale_factor])\n            cylinder(h=15*scale_factor, r=1.5*scale_factor, $fn=16);\n}\n\nmodule mirrors() {\n    // Rear view mirrors\n    color(\"silver\")\n    for(side = [-1, 1]) {\n        translate([side*5*scale_factor, 8*scale_factor, 25*scale_factor])\n            rotate([45,0,side*10])\n                union() {\n                    cylinder(h=8*scale_factor, r=1*scale_factor, $fn=16);\n                    translate([0,0,8*scale_factor])\n                        sphere(r=2*scale_factor, $fn=16);\n                }\n    }\n}\n\nmodule headlight() {\n    // Headlight assembly\n    color(\"silver\")\n    difference() {\n        translate([10*scale_factor,0,15*scale_factor])\n            sphere(r=4*scale_factor, $fn=32);\n        translate([11*scale_factor,0,15*scale_factor])\n            sphere(r=3*scale_factor, $fn=32);\n    }\n}\n\n// Assemble the complete scooter\nunion() {\n    // Front wheel and fork\n    translate([10*scale_factor,0,0])\n        wheel();\n    translate([10*scale_factor,0,0])\n        fork();\n    \n    // Rear wheel\n    translate([-30*scale_factor,0,0])\n        wheel();\n    \n    // Main components\n    body();\n    seat();\n    handlebar();\n    engine();\n    exhaust();\n    mirrors();\n    headlight();\n}",
    "renders": true
  },
  {
    "vehicle": "vespa",
    "openscad_code": "// Realistic Vespa Scooter - Medium Complexity\n// 3D printable model, 80mm length\n\n$fn = 32;  // Smooth curves\n\nmodule wheel() {\n    // Tire\n    difference() {\n        cylinder(h=8, r=12);\n        cylinder(h=9, r=9);\n    }\n    \n    // Rim\n    translate([0, 0, 8.5]) {\n        cylinder(h=1.5, r=11);\n    }\n    \n    // Spokes\n    for(i=[0:5]) {\n        rotate([0, 0, i*60]) {\n            translate([5, 0, 4]) {\n                cube([10, 2, 8], center=true);\n            }\n        }\n    }\n}\n\nmodule front_fender() {\n    // Main fender body\n    translate([0, 0, 15]) {\n        rotate_extrude(angle=180) {\n            translate([12, 0]) {\n                circle(r=2);\n            }\n        }\n    }\n    \n    // Fender sides\n    translate([0, -12, 15]) {\n        cube([24, 2, 6]);\n    }\n    translate([0, 12, 15]) {\n        cube([24, 2, 6]);\n    }\n}\n\nmodule handlebar() {\n    // Stem\n    translate([0, 0, 25]) {\n        cylinder(h=20, r=2);\n    }\n    \n    // Bar\n    translate([0, 0, 45]) {\n        rotate([90, 0, 0]) {\n            cylinder(h=30, r=1.5);\n        }\n    }\n    \n    // Grips\n    translate([0, 15, 45]) {\n        sphere(r=2);\n    }\n    translate([0, -15, 45]) {\n        sphere(r=2);\n    }\n}\n\nmodule seat() {\n    // Base\n    translate([0, 0, 25]) {\n        cube([25, 12, 3], center=true);\n    }\n    \n    // Cushion\n    translate([0, 0, 27.5]) {\n        scale([1, 1, 0.5]) {\n            sphere(r=[12.5, 6, 3]);\n        }\n    }\n}\n\nmodule body_panel() {\n    // Main side panel\n    translate([0, 0, 15]) {\n        cube([30, 35, 25]);\n    }\n    \n    // Front curve\n    translate([15, 0, 15]) {\n        rotate([0, 90, 0]) {\n            cylinder(h=30, r=15);\n        }\n    }\n    \n    // Cutout for wheel\n    translate([-15, 0, 8]) {\n        rotate([0, 90, 0]) {\n            cylinder(h=35, r=13);\n        }\n    }\n}\n\nmodule headlight() {\n    // Housing\n    translate([17, 0, 22]) {\n        sphere(r=5);\n    }\n    \n    // Lens\n    translate([20, 0, 22]) {\n        sphere(r=4);\n    }\n}\n\nmodule engine() {\n    // Engine block\n    translate([-15, 0, 8]) {\n        cube([10, 12, 8]);\n    }\n    \n    // Exhaust\n    translate([-20, 0, 5]) {\n        rotate([0, 30, 0]) {\n            cylinder(h=15, r=1.5);\n        }\n    }\n}\n\nmodule mirror() {\n    // Mirror stem\n    rotate([0, -30, 0]) {\n        cylinder(h=8, r=0.5);\n    }\n    \n    // Mirror\n    translate([6, 0, 0]) {\n        rotate([0, -30, 0]) {\n            scale([1, 1.5, 0.5]) {\n                sphere(r=3);\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Front wheel\n    translate([15, 0, 0]) {\n        wheel();\n    }\n    \n    // Rear wheel\n    translate([-25, 0, 0]) {\n        wheel();\n    }\n    \n    // Floorboard\n    translate([-5, 0, 8]) {\n        cube([40, 25, 1.5]);\n    }\n    \n    // Body\n    translate([-5, 0, 9]) {\n        body_panel();\n    }\n    \n    // Front assembly\n    translate([15, 0, 0]) {\n        union() {\n            front_fender();\n            handlebar();\n        }\n    }\n    \n    // Headlight\n    headlight();\n    \n    // Seat\n    translate([-10, 0, 9]) {\n        seat();\n    }\n    \n    // Engine\n    engine();\n    \n    // Mirrors\n    translate([0, 15, 45]) {\n        mirror();\n    }\n    translate([0, -15, 45]) {\n        mirror();\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "lambretta",
    "openscad_code": "$fa=2;\n$fs=0.5;\n\n// Overall scale\nscale = 0.35;\n\n// Main body\nmodule body() {\n    difference() {\n        // Main shell\n        hull() {\n            translate([-20,0,10]) cube([40,25,30], center=true);\n            translate([25,0,15]) cube([30,22,25], center=true);\n        }\n        \n        // Wheel cutouts\n        translate([-25,-10,0]) cylinder(r=15, h=30, center=true);\n        translate([25,-10,0]) cylinder(r=15, h=30, center=true);\n        \n        // Legshield cutout\n        translate([0,12,0]) cube([45,5,25], center=true);\n    }\n}\n\n// Front fork\nmodule front_fork() {\n    union() {\n        // Fork tubes\n        translate([-8,20,12]) cylinder(r=2.5, h=20);\n        translate([8,20,12]) cylinder(r=2.5, h=20);\n        \n        // Handlebars\n        translate([0,20,32]) cube([30,3,3], center=true);\n    }\n}\n\n// Seat\nmodule seat() {\n    hull() {\n        translate([0,-12,30]) cube([20,15,5], center=true);\n        translate([0,-8,32]) cube([20,10,2], center=true);\n    }\n}\n\n// Floorboard\nmodule floorboard() {\n    translate([0,5,5]) cube([45,25,3], center=true);\n}\n\n// Headlight\nmodule headlight() {\n    difference() {\n        translate([0,20,15]) sphere(r=6);\n        translate([0,22,15]) sphere(r=4);\n    }\n}\n\n// Engine cover\nmodule engine_cover() {\n    difference() {\n        translate([0,-15,8]) cube([30,20,15], center=true);\n        translate([0,-15,5]) cube([28,18,15], center=true);\n    }\n}\n\n// Wheels\nmodule wheel(pos=[0,0,0]) {\n    translate(pos)\n    union() {\n        difference() {\n            cylinder(r=12, h=6, center=true);\n            cylinder(r=8, h=7, center=true);\n        }\n        for(i=[0:45:315]) {\n            rotate([0,0,i])\n            translate([10,0,0])\n            cube([2,1,6.5], center=true);\n        }\n    }\n}\n\n// Fenders\nmodule fender(pos=[0,0,0]) {\n    translate(pos)\n    difference() {\n        hull() {\n            translate([0,0,0]) cube([30,12,8], center=true);\n            translate([0,-10,0]) cube([26,8,6], center=true);\n        }\n        translate([0,0,-5]) cube([32,14,20], center=true);\n    }\n}\n\n// Rear light\nmodule rear_light() {\n    translate([0,-22,20]) cube([8,3,5], center=true);\n}\n\n// Side panels\nmodule side_panels() {\n    for(side=[-1,1]) {\n        mirror([side,0,0])\n        translate([21,0,15])\n        cube([2,40,20], center=true);\n    }\n}\n\n// Main assembly\nscale(scale)\nunion() {\n    // Body parts\n    body();\n    front_fork();\n    seat();\n    floorboard();\n    headlight();\n    engine_cover();\n    side_panels();\n    rear_light();\n    \n    // Wheels\n    wheel([-25,-10,0]);\n    wheel([25,-10,0]);\n    \n    // Fenders\n    fender([-25,-10,12]);\n    fender([25,-10,12]);\n}",
    "renders": true
  },
  {
    "vehicle": "gts",
    "openscad_code": "// GTS (Gran Turismo Sport) logo in realistic style\n// Overall dimensions: ~80mm diameter, 5mm thick\n\n$fn = 64;\n\n// Main parameters\ndiameter = 80;\nthickness = 5;\nborder_width = 4;\ninner_diameter = diameter - (2 * border_width);\nletter_height = 4;\nletter_depth = 1.5;\n\n// Color definitions (for preview only)\ncolor_main = \"darkblue\";\ncolor_border = \"white\";\ncolor_letters = \"red\";\n\n// Main base disc\nmodule base_disc() {\n    difference() {\n        // Outer disc\n        cylinder(h=thickness, d=diameter);\n        \n        // Inner recess\n        translate([0, 0, -0.01])\n            cylinder(h=thickness + 0.02, d=inner_diameter);\n    }\n}\n\n// Border ring\nmodule border_ring() {\n    difference() {\n        // Outer ring\n        cylinder(h=thickness, d=diameter);\n        \n        // Inner cut\n        translate([0, 0, -0.01])\n            cylinder(h=thickness + 0.02, d=inner_diameter);\n    }\n}\n\n// Letter G\nmodule letter_g() {\n    // Main body\n    translate([0, 0, thickness - letter_depth])\n    linear_extrude(height=letter_depth + 0.01)\n    offset(r=1.5)\n    polygon(points=[\n        [-15, 0],\n        [15, 0],\n        [15, -12],\n        [8, -12],\n        [8, -6],\n        [-15, -6]\n    ]);\n    \n    // Inner cutout\n    translate([0, 0, thickness - letter_depth])\n    linear_extrude(height=letter_depth + 0.02)\n    offset(r=0.5)\n    polygon(points=[\n        [-12, -3],\n        [12, -3],\n        [12, -9],\n        [5, -9],\n        [5, -3]\n    ]);\n}\n\n// Letter T\nmodule letter_t() {\n    translate([0, 15, thickness - letter_depth])\n    linear_extrude(height=letter_depth + 0.01)\n    union() {\n        // Horizontal bar\n        cube([30, 4, 0.01], center=true);\n        \n        // Vertical stem\n        translate([0, -5, 0])\n        cube([4, 14, 0.01], center=true);\n    }\n}\n\n// Letter S\nmodule letter_s() {\n    translate([0, -15, thickness - letter_depth])\n    linear_extrude(height=letter_depth + 0.01)\n    offset(r=1)\n    polygon(points=[\n        [12, 3],\n        [-12, 3],\n        [-12, 0],\n        [12, 0],\n        [12, -3],\n        [-12, -3],\n        [-12, -6],\n        [12, -6],\n        [12, -9],\n        [-12, -9]\n    ]);\n}\n\n// Main assembly\nunion() {\n    // Base disc\n    color(color_main)\n    base_disc();\n    \n    // Border ring\n    color(color_border)\n    translate([0, 0, 0])\n    border_ring();\n    \n    // Letters\n    color(color_letters) {\n        letter_g();\n        letter_t();\n        letter_s();\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "gtr",
    "openscad_code": "// GTR (Guitar) Model - Medium Complexity, Realistic Style\n// Designed for 3D printing - no overhangs, 2mm wall thickness\n\n$fn = 24;  // Smooth curves for printing\n\nmodule body() {\n    difference() {\n        // Main body shape\n        hull() {\n            translate([-30, -20, 0]) cube([60, 40, 5]);\n            translate([-25, -15, 5]) cube([50, 30, 15]);\n            translate([-25, -15, 20]) cube([50, 30, 5]);\n        }\n        \n        // Cutout for electronics\n        translate([-15, -8, 2]) cube([30, 16, 20]);\n        \n        // Neck pocket\n        translate([25, -5, 2]) cube([10, 10, 18]);\n    }\n}\n\nmodule neck() {\n    union() {\n        // Neck shaft\n        translate([34, -4, 2]) cube([40, 8, 5]);\n        \n        // Headstock\n        translate([74, -6, 2]) cube([20, 12, 3]);\n    }\n}\n\nmodule frets() {\n    for(i = [0:4:20]) {\n        translate([34 + i, -4.5, 7.5]) cube([0.5, 9, 0.5]);\n    }\n}\n\nmodule tuners() {\n    // 6 tuners on headstock\n    for(i = [0:5]) {\n        translate([76, -4 + i*1.6, 5]) rotate([90, 0, 0]) cylinder(h=4, d=3);\n    }\n}\n\nmodule strings() {\n    // 6 strings\n    for(i = [0:5]) {\n        translate([34 + i*0.2, -3 + i*1.2, 7.5]) cube([40, 0.2, 0.2]);\n    }\n}\n\nmodule pickups() {\n    // Bridge pickup\n    translate([-15, -6, 6]) cube([8, 12, 3]);\n    \n    // Neck pickup\n    translate([5, -6, 6]) cube([8, 12, 3]);\n}\n\nmodule bridge() {\n    // Bridge assembly\n    translate([-20, -8, 6]) cube([10, 16, 4]);\n    \n    // Individual saddles\n    for(i = [0:5]) {\n        translate([-19 + i*1.5, -7 + i*0.5, 10]) cube([1, 14 - i, 2]);\n    }\n}\n\nmodule volume_knob() {\n    cylinder(h=3, d=6);\n    translate([0, 0, 3]) cylinder(h=1, d=4);\n}\n\nmodule output_jack() {\n    rotate([90, 0, 0]) cylinder(h=8, d=8);\n    translate([0, 0, 8]) cylinder(h=4, d=6);\n}\n\n// Assembly\nunion() {\n    body();\n    neck();\n    frets();\n    tuners();\n    strings();\n    pickups();\n    bridge();\n    \n    // Volume knob\n    translate([0, 0, 6]) volume_knob();\n    \n    // Output jack\n    translate([-25, -15, 2.5]) output_jack();\n}\n\n// Scale to 100mm length\nscale(100/94) children();",
    "renders": true
  },
  {
    "vehicle": "gtl",
    "openscad_code": "// GTL (Gas Transmission Line) Valve Assembly – Realistic / Medium Complexity\n// All dimensions in mm.  Designed for 3D printing (no overhangs >45°, wall thickness ≥1.2 mm)\n\n$fa = 2;\n$fs = 0.5;\n\n// ---------- PARAMETERS ----------\nbody_dia          = 40;     // Main valve body diameter\nbody_len          = 60;     // Main valve body length\nflange_dia        = 54;     // Flange diameter\nflange_thick      = 6;\nbolt_circle_dia   = 44;\nbolt_dia          = 5;\nbolt_head_h       = 3;\nnum_bolts         = 4;\nstem_dia          = 12;\nstem_len          = 25;\nhandwheel_dia     = 36;\nhandwheel_thick   = 8;\nhandwheel_clear   = 2;      // Gap under handwheel\npipe_dia          = 26;     // Pipe OD\npipe_len          = 30;\nwall              = 1.8;    // Shell thickness\n\n// ---------- MODULES ----------\nmodule hex_head(d=bolt_dia, h=bolt_head_h) {\n    // Simple hex cap head\n    cylinder(h=h, d=d*1.8, $fn=6);\n}\n\nmodule bolt_assembly() {\n    // One bolt + head on flange\n    cylinder(h=flange_thick+wall+2, d=bolt_dia, $fn=8);\n    translate([0,0,flange_thick+wall+1]) hex_head();\n}\n\nmodule flange(with_bolts=true) {\n    difference() {\n        cylinder(h=flange_thick, d=flange_dia, $fn=60);\n        // Center bore\n        cylinder(h=flange_thick+1, d=pipe_dia, $fn=60);\n        // Bolt holes\n        if (with_bolts)\n            for (a=[0:360/num_bolts:359])\n                rotate([0,0,a])\n                    translate([bolt_circle_dia/2, 0, -1])\n                        cylinder(h=flange_thick+2, d=bolt_dia+0.3, $fn=8);\n    }\n    // Add bolt assemblies\n    if (with_bolts)\n        for (a=[0:360/num_bolts:359])\n            rotate([0,0,a])\n                translate([bolt_circle_dia/2, 0, 0])\n                    bolt_assembly();\n}\n\nmodule valve_body() {\n    difference() {\n        union() {\n            // Main cylindrical body\n            cylinder(h=body_len, d=body_dia, center=true, $fn=60);\n            // Top bonnet collar\n            translate([0,0,body_len/2])\n                cylinder(h=6, d=body_dia*1.05, $fn=60);\n        }\n        // Internal flow bore (straight through)\n        rotate([0,90,0])\n            cylinder(h=body_dia+2, d=pipe_dia, center=true, $fn=60);\n        // Top stem bore\n        cylinder(h=body_len/2+10, d=stem_dia, center=false, $fn=30);\n    }\n}\n\nmodule pipe_stub() {\n    difference() {\n        cylinder(h=pipe_len, d=pipe_dia+2*wall, $fn=40);\n        cylinder(h=pipe_len+1, d=pipe_dia, $fn=40);\n    }\n}\n\nmodule handwheel() {\n    difference() {\n        union() {\n            // Outer rim\n            cylinder(h=handwheel_thick, d=handwheel_dia, $fn=60);\n            // Inner hub\n            cylinder(h=handwheel_thick+2, d=stem_dia+4, $fn=30);\n            // Spokes (simple rectangles)\n            for (a=[0:60:359])\n                rotate([0,0,a])\n                    translate([handwheel_dia/4, -handwheel_thick/2, 0])\n                        cube([handwheel_dia/2, handwheel_thick, handwheel_thick]);\n        }\n        // Center hole\n        cylinder(h=handwheel_thick+3, d=stem_dia, $fn=30);\n    }\n}\n\nmodule stem() {\n    cylinder(h=stem_len, d=stem_dia, $fn=20);\n}\n\n// ---------- MAIN ASSEMBLY ----------\nunion() {\n    // Valve body centered at origin\n    valve_body();\n\n    // Left pipe stub\n    translate([-body_len/2-pipe_len/2,0,0])\n        rotate([0,90,0])\n            pipe_stub();\n\n    // Right pipe stub\n    translate([body_len/2+pipe_len/2,0,0])\n        rotate([0,90,0])\n            pipe_stub();\n\n    // Left flange\n    translate([-body_len/2-flange_thick/2,0,0])\n        rotate([0,90,0])\n            flange(true);\n\n    // Right flange\n    translate([body_len/2+flange_thick/2,0,0])\n        rotate([0,90,0])\n            flange(true);\n\n    // Stem\n    translate([0,0,body_len/2+3])\n        stem();\n\n    // Handwheel on top of stem\n    translate([0,0,body_len/2+3+stem_len+handwheel_clear])\n        handwheel();\n}",
    "renders": true
  },
  {
    "vehicle": "primavera",
    "openscad_code": "// Primavera (spring onion) in realistic style – medium complexity\n// Overall length ≈ 75 mm, max diameter ≈ 15 mm\n// All parts are printable without support\n\n// Wall thickness for 3D printing\nwall = 1;\n\n// Main module\nmodule primavera() {\n    // White root bulb\n    translate([0, 0, 0])\n        bulb();\n\n    // Green hollow stem\n    translate([0, 0, 20])\n        stem();\n\n    // Leaves – flared, slightly curved\n    translate([0, 0, 70])\n        leaves();\n}\n\n// Root bulb (subdivided for smoothness)\nmodule bulb() {\n    union() {\n        // Main bulb sphere, cut flat on bottom\n        difference() {\n            sphere(d = 12, $fn = 32);\n            translate([0, 0, -6.1])\n                cube([20, 20, 6], center = true);\n        }\n\n        // Root hairs – thin cylinders\n        for (a = [0 : 30 : 330])\n            rotate([0, 90, a])\n                translate([0, 0, -6])\n                    cylinder(h = 5, d1 = 1.5, d2 = 0.5, $fn = 8);\n\n        // Small collar ring\n        translate([0, 0, 5])\n            cylinder(h = 1.5, d1 = 9, d2 = 11, $fn = 32);\n    }\n}\n\n// Hollow stem with slight taper\nmodule stem() {\n    difference() {\n        union() {\n            // Main tube\n            cylinder(h = 50, d1 = 9.5, d2 = 7.5, $fn = 32);\n\n            // Reinforcing ring at base\n            translate([0, 0, -2])\n                cylinder(h = 2.5, d = 11, $fn = 32);\n        }\n\n        // Hollow interior\n        translate([0, 0, -1])\n            cylinder(h = 52, d1 = 9.5 - 2 * wall, d2 = 7.5 - 2 * wall, $fn = 32);\n    }\n}\n\n// Flared green leaves in 4 directions\nmodule leaves() {\n    for (a = [0 : 90 : 270])\n        rotate([0, 0, a])\n            translate([0, 0, 0])\n                single_leaf();\n}\n\n// One leaf with slight curvature\nmodule single_leaf() {\n    color(\"darkgreen\")\n    difference() {\n        // Outer leaf shape – thin ellipsoid\n        scale([1, 0.35, 1])\n            rotate_extrude(angle = 5, $fn = 32)\n                translate([7, 0, 0])\n                    circle(d = 3, $fn = 16);\n\n        // Inner cavity\n        scale([1, 0.35, 1])\n            rotate_extrude(angle = 5, $fn = 32)\n                translate([7, 0, 0])\n                    circle(d = 3 - 2 * wall, $fn = 16);\n    }\n\n    // Tip detail – sharper end\n    translate([0, 0, 7])\n        scale([0.7, 0.7, 0.7])\n            difference() {\n                sphere(d = 3, $fn = 16);\n                translate([0, 0, -1.5])\n                    cube([3, 3, 1.5], center = true);\n            }\n}\n\n// Render the model\nprimavera();",
    "renders": true
  },
  {
    "vehicle": "px",
    "openscad_code": "// Realistic medium-complexity PX camera body\n// Overall size ≈ 90 mm × 60 mm × 35 mm\n\n$fn = 64;\n\n/* ---- main body shell ---- */\nmodule body_shell() {\n    difference() {\n        // outer rounded block\n        minkowski() {\n            cube([85, 55, 30], center = true);\n            sphere(3);\n        }\n        // hollow cavity\n        minkowski() {\n            cube([78, 48, 24], center = true);\n            sphere(1.5);\n        }\n    }\n}\n\n/* ---- lens mount ---- */\nmodule lens_mount() {\n    difference() {\n        // mount ring\n        cylinder(h = 10, d = 28);\n        cylinder(h = 12, d = 22);\n    }\n    // bayonet lugs\n    for (a = [0:120:240]) {\n        rotate([0, 0, a])\n            translate([11, 0, -1])\n                cube([3, 3, 12], center = true);\n    }\n}\n\n/* ---- top plate ---- */\nmodule top_plate() {\n    difference() {\n        // main plate\n        translate([0, 0, 15])\n            cube([85, 55, 3], center = true);\n        // hot-shoe slot\n        translate([0, -20, 16.5])\n            cube([12, 20, 2], center = true);\n    }\n    // shutter button\n    translate([25, 20, 18])\n        cylinder(h = 2, d = 6);\n}\n\n/* ---- dials ---- */\nmodule control_dial(pos, h) {\n    translate(pos)\n        difference() {\n            cylinder(h = h, d = 12);\n            cylinder(h = h + 0.1, d = 10);\n            // knurl notches\n            for (i = [0:15:345])\n                rotate([0, 0, i])\n                    translate([6, 0, -0.5])\n                        cube([0.75, 2, h + 1], center = true);\n        }\n}\n\n/* ---- back door with screen ---- */\nmodule back_door() {\n    difference() {\n        // door plate\n        translate([0, 0, -15.5])\n            cube([83, 53, 2], center = true);\n        // LCD recess\n        translate([0, 5, -16.5])\n            cube([50, 35, 1.5], center = true);\n    }\n}\n\n/* ---- viewfinder bump ---- */\nmodule viewfinder() {\n    translate([-30, 0, 15])\n        difference() {\n            // housing\n            cube([20, 18, 12], center = true);\n            // eyepiece hole\n            rotate([0, 90, 0])\n                cylinder(h = 20, d = 8);\n        }\n}\n\n/* ---- strap lugs ---- */\nmodule strap_lugs() {\n    for (side = [-1, 1]) {\n        translate([0, side * 30, 0])\n            difference() {\n                cylinder(h = 8, d = 6);\n                rotate([0, 90, 0])\n                    cylinder(h = 7, d = 2.5);\n            }\n    }\n}\n\n/* ---- assembly ---- */\nbody_shell();\n\ntranslate([0, 0, -15])\n    color(\"gray\")\n    back_door();\n\ntranslate([0, 0, 15])\n    color(\"silver\")\n    top_plate();\n\ntranslate([0, 0, 10])\n    color(\"black\")\n    lens_mount();\n\ntranslate([-30, 0, 21])\n    color(\"black\")\n    viewfinder();\n\ntranslate([25, 0, 17])\n    color(\"black\")\n    control_dial([25, 0, 17], 4);\n\ntranslate([-25, 0, 17])\n    color(\"black\")\n    control_dial([-25, 0, 17], 4);\n\ntranslate([0, 0, 0])\n    color(\"gray\")\n    strap_lugs();",
    "renders": true
  },
  {
    "vehicle": "rally",
    "openscad_code": "// Rally car model - realistic style, medium complexity\n// Dimensions: ~90mm length, 45mm width, 30mm height\n\n$fn = 32;\n\n// Main body\nmodule body() {\n    // Lower chassis\n    difference() {\n        hull() {\n            cube([85, 35, 8], center=true);\n            translate([0, 0, 5]) cube([80, 30, 8], center=true);\n        }\n        // Wheel arches\n        for(side = [-1, 1]) {\n            translate([30, side*15, 0]) rotate([0, 90, 0]) cylinder(h=20, r=12);\n            translate([-30, side*15, 0]) rotate([0, 90, 0]) cylinder(h=20, r=12);\n        }\n    }\n    \n    // Upper cabin\n    difference() {\n        hull() {\n            translate([0, 0, 10]) cube([70, 30, 15], center=true);\n            translate([0, 0, 18]) cube([50, 25, 12], center=true);\n        }\n        // Windshield\n        translate([0, 0, 20]) cube([35, 28, 10], center=true);\n    }\n}\n\n// Wheels\nmodule wheel() {\n    difference() {\n        cylinder(h=8, r=12);\n        cylinder(h=9, r=5);\n    }\n    // Tire tread pattern\n    for(i = [0:7]) {\n        rotate([0, 0, i*45]) \n            translate([11, 0, 0]) \n            cube([2, 2, 8], center=true);\n    }\n}\n\n// Suspension arm\nmodule suspension_arm() {\n    translate([-5, 0, 0]) cube([10, 3, 2]);\n    translate([0, 0, -2]) cylinder(h=4, r=1.5);\n}\n\n// Exhaust pipe\nmodule exhaust() {\n    difference() {\n        cylinder(h=20, r=3);\n        translate([0, 0, -1]) cylinder(h=22, r=2.5);\n    }\n}\n\n// Spoiler\nmodule spoiler() {\n    // Main wing\n    translate([-40, 0, 25]) cube([20, 35, 3], center=true);\n    \n    // Supports\n    for(side = [-1, 1]) {\n        translate([-35, side*15, 12]) \n            rotate([0, 20, 0]) \n            cube([2, 2, 15]);\n    }\n}\n\n// Roof scoop\nmodule roof_scoop() {\n    difference() {\n        translate([0, 0, 25]) cube([20, 15, 8], center=true);\n        translate([0, 0, 27]) cube([18, 13, 10], center=true);\n    }\n}\n\n// Lights\nmodule headlight() {\n    cylinder(h=2, r=4);\n    translate([0, 0, -0.5]) cylinder(h=3, r=3.5);\n}\n\n// Assemble rally car\nunion() {\n    // Main body\n    body();\n    \n    // Wheels\n    for(side = [-1, 1]) {\n        translate([30, side*22, 0]) rotate([90, 0, 0]) wheel();\n        translate([-30, side*22, 0]) rotate([90, 0, 0]) wheel();\n    }\n    \n    // Suspension components\n    for(side = [-1, 1]) {\n        translate([35, side*20, -5]) suspension_arm();\n        translate([-35, side*20, -5]) suspension_arm();\n    }\n    \n    // Exhaust\n    translate([40, 0, -2]) rotate([0, 90, 0]) exhaust();\n    \n    // Spoiler\n    spoiler();\n    \n    // Roof scoop\n    roof_scoop();\n    \n    // Headlights\n    translate([42, -10, 5]) headlight();\n    translate([42, 10, 5]) headlight();\n    translate([-42, -8, 5]) headlight();\n    translate([-42, 8, 5]) headlight();\n}",
    "renders": true
  },
  {
    "vehicle": "et",
    "openscad_code": "// Realistic Medium-Complexity Jet Model (≈90 mm wingspan)\n// ------------------------------------------------------\n// Main fuselage, swept wings, twin engines, tail, cockpit\n// 3D-printable without supports (no >45° overhangs)\n\n$fn = 40;\n\nmodule fuselage() {\n    // Forward cylindrical section\n    cylinder(h = 55, d1 = 12, d2 = 14);\n    translate([0, 0, 55])\n        // Mid-section taper\n        cylinder(h = 25, d1 = 14, d2 = 16);\n    translate([0, 0, 80])\n        // Tail cone\n        cylinder(h = 20, d1 = 16, d2 = 6);\n}\n\nmodule cockpit() {\n    // Bubble canopy\n    translate([-6, 0, 15])\n        rotate([0, 90, 0])\n            scale([1, 1.2, 1])\n                sphere(d = 10);\n    // Nose radome\n    translate([0, 0, -5])\n        sphere(d = 12);\n}\n\nmodule wings() {\n    // Root\n    difference() {\n        translate([-40, 0, 35])\n            rotate([0, 0, -25])\n                cube([80, 8, 4], center = true);\n        // Wing root fillet\n        translate([0, 4, 35])\n            sphere(d = 6);\n    }\n    // Tip\n    translate([-45, 0, 35])\n        rotate([0, 0, -25])\n            cube([10, 6, 3], center = true);\n}\n\nmodule tail_fin() {\n    rotate([0, -10, 0])\n        translate([0, 0, 85])\n            cube([0.1, 30, 20], center = true);\n}\n\nmodule horizontal_stab() {\n    for (y = [-8, 8]) {\n        translate([0, y, 85])\n            rotate([0, 15, 0])\n                cube([35, 0.1, 8], center = true);\n    }\n}\n\nmodule engine(nacelle = false) {\n    // Engine nacelle cylinder\n    translate([0, 0, -60])\n        cylinder(h = 60, d = 14);\n    translate([0, 0, -60])\n        difference() {\n            cylinder(h = 20, d = 15);\n            cylinder(h = 21, d = 12);\n        }\n    // Intake lip\n    translate([0, 0, -60])\n        cylinder(h = 3, d = 16);\n    // Exhaust\n    translate([0, 0, 0])\n        cylinder(h = 5, d = 11);\n}\n\nmodule engine_pylon(offset) {\n    translate([offset, 0, 30])\n        cube([5, 15, 4], center = true);\n}\n\nmodule landing_gear() {\n    // Nose gear door\n    translate([0, 0, 8])\n        cube([10, 2, 4], center = true);\n    // Main gear doors (simplified)\n    for (side = [-1, 1]) {\n        translate([side * 20, 0, 8])\n            cube([12, 2, 4], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    fuselage();\n    cockpit();\n    wings();\n    mirror([1, 0, 0])\n        wings();\n    tail_fin();\n    horizontal_stab();\n\n    // Port engine\n    translate([-28, -25, 35])\n        rotate([0, 0, -25])\n            engine();\n    translate([-28, -25, 35])\n        engine_pylon(-28);\n\n    // Starboard engine\n    translate([28, -25, 35])\n        rotate([0, 0, -25])\n            mirror([1, 0, 0])\n                engine();\n    translate([28, -25, 35])\n        engine_pylon(28);\n\n    // Landing gear doors\n    landing_gear();\n}",
    "renders": true
  },
  {
    "vehicle": "gt",
    "openscad_code": "// Ford GT-style supercar, medium-complexity, 3D-printable\n// Overall length ≈ 90 mm, realistic proportions, no steep overhangs\n\n$fa = 2;  // smoother curves\n$fs = 0.5;\n\n// Main assembly -----------------------------------------------------------\nmodule gt_car() {\n    color(\"darkblue\") {\n        union() {\n            body_shell();\n            floor_pan();\n            front_wing_assembly();\n            rear_wing_assembly();\n            wheels();\n            exhaust_pipes();\n        }\n    }\n}\n\n// Body shell --------------------------------------------------------------\nmodule body_shell() {\n    difference() {\n        // Main monocoque\n        hull() {\n            // Nose\n            translate([-42,0,1]) cube([25,20,10], center=true);\n            // Cabin\n            translate([-20,0,13]) cube([35,28,18], center=true);\n            // Engine deck\n            translate([18,0,10]) cube([35,22,12], center=true);\n            // Tail\n            translate([42,0,6]) cube([15,18,8], center=true);\n        }\n\n        // Cockpit opening\n        translate([-20,0,20])\n            cube([38,24,10], center=true);\n\n        // Side windows\n        mirror([0,1,0]) translate([-10,15,18])\n            rotate([0,20,0]) cube([25,0.5,8]);\n    }\n}\n\n// Front splitter ----------------------------------------------------------\nmodule front_wing_assembly() {\n    translate([-41,0,0]) {\n        difference() {\n            // Wing profile\n            translate([0,0,-1])\n                cube([6,36,2], center=true);\n            // Underside chamfer\n            translate([0,0,-1.9])\n                cube([6.2,36.2,1], center=true);\n        }\n        // End plates\n        translate([0,±18,0])\n            cube([2,2,6], center=true);\n    }\n}\n\n// Rear wing ---------------------------------------------------------------\nmodule rear_wing_assembly() {\n    translate([38,0,16]) {\n        rotate([0,10,0]) {\n            // Main wing\n            difference() {\n                cube([16,42,1.5], center=true);\n                // Cutout for engine\n                translate([0,0,0])\n                    cube([16,20,2], center=true);\n            }\n            // Wing pillars\n            translate([0,±17,0])\n                cube([2,2,8], center=true);\n        }\n    }\n}\n\n// Floor pan for printability ---------------------------------------------\nmodule floor_pan() {\n    translate([0,0,-2])\n        cube([90,38,1.5], center=true);\n}\n\n// Wheels ------------------------------------------------------------------\nmodule wheels() {\n    for(side=[-1,1])\n    translate([0,side*20,0])\n        wheel_set();\n}\n\nmodule wheel_set() {\n    // Front wheel\n    translate([-28,0,6]) wheel();\n    // Rear wheel\n    translate([28,0,6]) wheel();\n}\n\nmodule wheel() {\n    difference() {\n        union() {\n            // Tire\n            color(\"black\")\n                cylinder(h=10, r=9, center=true);\n            // Rim\n            color(\"silver\")\n                cylinder(h=8, r=7, center=true);\n        }\n        // Axle hole\n        cylinder(h=12, r=2, center=true);\n    }\n}\n\n// Exhaust tips ------------------------------------------------------------\nmodule exhaust_pipes() {\n    translate([42,0,5]) {\n        for(side=[-1,1])\n            translate([0,side*6,0])\n                rotate([90,0,0])\n                    cylinder(h=10, r=2);\n    }\n}\n\n// Render\ngt_car();",
    "renders": true
  },
  {
    "vehicle": "gl",
    "openscad_code": "// Realistic GL-Style Tactical Flashlight – medium complexity\n// Total length ≈ 85 mm, body Ø ≈ 25 mm\n// All walls ≥ 1 mm, no steep overhangs, printable without supports\n\n$fn = 64;\n\n// Main assembly\nmodule flashlight() {\n    difference() {\n        union() {\n            head();\n            body();\n            tail();\n            pocket_clip();\n        }\n        // Central tunnel for AAA batteries (2×AAA)\n        translate([0,0,-1]) cylinder(h = 87, d = 10.4);\n        // Lens opening\n        translate([0,0,32]) cylinder(h = 5, d = 18);\n    }\n}\n\n// Lens / bezel module\nmodule head() {\n    // Main bezel ring\n    translate([0,0,30]) cylinder(h = 5, d = 28);\n    // Cooling fins (six small rings stacked)\n    for (z = [24.5 : 1 : 29.5]) {\n        translate([0,0,z]) cylinder(h = 0.5, d1 = 26, d2 = 24);\n    }\n    // Strike bezel teeth (8 radial teeth)\n    for (a = [0 : 45 : 315]) {\n        rotate([0,0,a]) translate([8.5,0,32.5]) cube([6,3,3], center = true);\n    }\n}\n\n// Body tube with knurling\nmodule body() {\n    // Core tube\n    cylinder(h = 50, d = 25);\n\n    // Diamond knurl pattern (rows of tiny pyramids)\n    for (z = [5 : 5 : 45]) {\n        for (a = [0 : 15 : 345]) {\n            rotate([0,0,a]) translate([12.5,0,z]) rotate([90,0,0])\n                cylinder(h = 1.5, r1 = 1.5, r2 = 0, h = 1.5, center = true);\n        }\n    }\n}\n\n// Tail cap\nmodule tail() {\n    translate([0,0,-25]) cylinder(h = 8, d = 25);\n    // Lanyard hole\n    translate([0,0,-21]) rotate([0,90,0]) cylinder(h = 25, d = 3);\n    // Rubber switch boot dome\n    translate([0,0,-21]) sphere(d = 10);\n}\n\n// Removable pocket clip\nmodule pocket_clip() {\n    translate([12.5,0,5]) rotate([90,0,0]) {\n        difference() {\n            // Clip body\n            linear_extrude(height = 1.5, center = true) {\n                polygon(points = [[0,0],[0,35],[2,35],[2,25],[1.5,25],[1.5,0]]);\n            }\n            // Spring slot\n            translate([0,15,-1]) cube([2,10,3], center = true);\n        }\n    }\n}\n\nflashlight();",
    "renders": true
  },
  {
    "vehicle": "ss",
    "openscad_code": "// Realistic stylized \"SS\" letter sculpture for 3D printing\n// Dimensions: ~60 mm tall, 15 mm thick\n\n// Overall parameters\nletter_height = 60;\nletter_width  = 25;\nletter_thick  = 15;\nwall_thick    = 2;\nfillet_r      = 5;\n\n// Helper module: rounded rectangle\nmodule rounded_rectangle(w, h, d, r) {\n    hull() {\n        translate([ r,  r, 0]) cylinder(h=d, r=r, $fn=16);\n        translate([w-r,  r, 0]) cylinder(h=d, r=r, $fn=16);\n        translate([ r, h-r, 0]) cylinder(h=d, r=r, $fn=16);\n        translate([w-r, h-r, 0]) cylinder(h=d, r=r, $fn=16);\n    }\n}\n\n// Helper module: hollow box\nmodule hollow_box(ow, oh, od, t) {\n    difference() {\n        rounded_rectangle(ow, oh, od, fillet_r);\n        translate([t, t, -0.1]) rounded_rectangle(ow-2*t, oh-2*t, od+0.2, fillet_r-t);\n    }\n}\n\n// Module for top/bottom curves\nmodule curve_part() {\n    difference() {\n        // Outer semi-cylinder\n        translate([letter_width/2, 0, 0])\n            rotate([90,0,0])\n            cylinder(h=letter_width, r=letter_height/4, $fn=60);\n        // Inner hollow\n        translate([letter_width/2, 0, 0])\n            rotate([90,0,0])\n            cylinder(h=letter_width, r=letter_height/4-wall_thick, $fn=60);\n        // Trim ends\n        translate([-1, letter_height/4-wall_thick, -1]) cube([letter_width+2, wall_thick+2, letter_thick+2]);\n    }\n}\n\n// Module for straight segment\nmodule straight_segment() {\n    hollow_box(letter_width, letter_height/2, letter_thick, wall_thick);\n}\n\n// Build the S shape\nunion() {\n    // Top curve\n    translate([0, letter_height*0.75, 0]) \n        rotate([0,0,180]) curve_part();\n\n    // Middle connecting bar\n    translate([0, letter_height*0.5, 0]) straight_segment();\n\n    // Bottom curve\n    translate([0, letter_height*0.25, 0]) curve_part();\n    \n    // Inner support web for 3D printing stability\n    translate([letter_width/2-wall_thick/2, letter_height/2, 0])\n        cube([wall_thick, letter_height/2, letter_thick]);\n}",
    "renders": true
  },
  {
    "vehicle": "ts",
    "openscad_code": "// Realistic Medium-Complexity Train Set (TS) - OpenSCAD 3D-printable model\n// Overall size ~80 mm long, 30 mm wide, 25 mm high\n\n$fa = 3; $fs = 0.5;\n\n// Track module\nmodule track_segment(length = 40, width = 20, rail_w = 3, rail_h = 2, sleeper_w = 2, sleeper_h = 1.5) {\n    // Sleepers (ties)\n    for (x = [0:8:length-8]) {\n        translate([x, 0, 0])\n            cube([sleeper_w, width, sleeper_h], center = true);\n    }\n    // Rails\n    translate([0, -width/2 + rail_w/2, sleeper_h/2 + rail_h/2])\n        cube([length, rail_w, rail_h], center = true);\n    translate([0,  width/2 - rail_w/2, sleeper_h/2 + rail_h/2])\n        cube([length, rail_w, rail_h], center = true);\n}\n\n// Locomotive body\nmodule locomotive_body() {\n    // Main body shell\n    hull() {\n        translate([-5, 0, 0]) cube([30, 18, 12], center = true);\n        translate([ 5, 0, 2]) cube([25, 15,  8], center = true);\n    }\n    // Cab top\n    translate([5, 0, 8]) cube([12, 14, 6], center = true);\n    // Chimney\n    translate([-8, 0, 10]) cylinder(h = 8, d = 5, center = false);\n    // Boiler front\n    translate([-14, 0, 2]) sphere(d = 10);\n}\n\n// Locomotive chassis\nmodule locomotive_chassis() {\n    // Frame\n    cube([30, 18, 2], center = true);\n    // Couplers\n    translate([-15, 0, -1]) rotate([0, 90, 0]) cylinder(h = 4, d = 3);\n    translate([ 15, 0, -1]) rotate([0, 90, 0]) cylinder(h = 4, d = 3);\n}\n\n// Bogie / truck\nmodule bogie() {\n    difference() {\n        // Bogie frame\n        cube([16, 12, 3], center = true);\n        // Wheel cutouts\n        for (y = [-4, 4]) {\n            translate([-4, y, -2]) cylinder(h = 5, d = 6, center = true);\n            translate([ 4, y, -2]) cylinder(h = 5, d = 6, center = true);\n        }\n    }\n}\n\n// Passenger car body\nmodule passenger_car_body() {\n    // Main body\n    cube([32, 15, 10], center = true);\n    // Roof\n    translate([0, 0, 9]) cube([34, 17, 2], center = true);\n    // Windows\n    for (x = [-10, -5, 0, 5, 10]) {\n        translate([x, 0, 2]) cube([4, 17, 6], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    // Track\n    translate([0, 0, 0]) track_segment(80);\n\n    // Locomotive\n    translate([-25, 0, 4]) {\n        locomotive_body();\n        translate([0, 0, -6]) locomotive_chassis();\n    }\n\n    // Front bogie\n    translate([-20, 0, 2]) rotate([90, 0, 0]) bogie();\n    // Rear bogie\n    translate([-10, 0, 2]) rotate([90, 0, 0]) bogie();\n\n    // Passenger car 1\n    translate([15, 0, 4]) {\n        passenger_car_body();\n        translate([0, 0, -6]) cube([32, 15, 2], center = true);\n        translate([10, 0, 2]) rotate([90, 0, 0]) bogie();\n        translate([-10, 0, 2]) rotate([90, 0, 0]) bogie();\n    }\n\n    // Passenger car 2\n    translate([50, 0, 4]) {\n        passenger_car_body();\n        translate([0, 0, -6]) cube([32, 15, 2], center = true);\n        translate([10, 0, 2]) rotate([90, 0, 0]) bogie();\n        translate([-10, 0, 2]) rotate([90, 0, 0]) bogie();\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "r",
    "openscad_code": "// Realistic-style 3D printable 'r' (50 mm tall, 2.5 mm wall thickness)\n// Built from primitive solids, no overhangs > 45°, all edges chamfered\n\n$fn = 32;\n\nmodule r_letter() {\n    // Basic dimensions (mm)\n    h = 50;            // total height\n    t = 2.5;           // wall / thickness\n    stem_w = 10;       // stem width\n    bowl_r = 14;       // bowl radius\n    bowl_h = 24;       // bowl height (top aligned with stem top)\n    stem_h = 38;       // stem height (bottom sits on build plate)\n    leg_l = 22;        // diagonal leg length\n    leg_a = 30;        // leg angle (deg)\n\n    // Helper for chamfering edges\n    module chamfer_box(s, t=1) {\n        difference() {\n            cube(s);\n            translate([t, t, -1])\n                cube([s.x - 2*t, s.y - 2*t, s.z + 2]);\n            translate([-1, t, t])\n                cube([s.x + 2, s.y - 2*t, s.z - 2*t]);\n        }\n    }\n\n    // Stem\n    translate([0, 0, 0])\n        chamfer_box([stem_w, t, stem_h], 2);\n\n    // Bowl (partial cylinder forming rounded top)\n    translate([stem_w, 0, bowl_h])\n        rotate([0, -90, 0])\n        difference() {\n            cylinder(h = bowl_r*2, r = bowl_r, center = true);\n            translate([0, 0, -bowl_r - t])\n                cube([bowl_r*2, bowl_r*2, t*2], center = true);\n            translate([-bowl_r - t, 0, 0])\n                cube([t*2, bowl_r*2, bowl_r*2], center = true);\n        }\n\n    // Diagonal leg\n    translate([stem_w, 0, 0])\n        rotate([0, 0, leg_a])\n        chamfer_box([leg_l, t, t], 1);\n\n    // Foot (horizontal base of leg)\n    translate([stem_w + leg_l*cos(leg_a) - t, 0, 0])\n        chamfer_box([t, t, leg_l*sin(leg_a)], 1);\n}\n\n// Center model on origin base\ntranslate([-10, -t/2, 0])\n    r_letter();",
    "renders": true
  },
  {
    "vehicle": "s",
    "openscad_code": "// Realistic \"S\" letter in 3D — printable, medium complexity\n// Dimensions: ~80 mm tall, 12 mm thick, wall 2 mm\n\n$fn = 36;  // smooth curves\n\nmodule s_curve_profile(r_outer=6, wall=2) {\n    // cross-section of the “tube”: hollow circle\n    difference() {\n        circle(r = r_outer);\n        circle(r = r_outer - wall);\n    }\n}\n\nmodule s_serif(z_base=0, len=12, thick=2, height=8) {\n    // small rectangular foot at curve ends for print stability\n    translate([0, 0, z_base])\n        cube([len, thick, height], center = true);\n}\n\nmodule s_top_arc() {\n    // top inverted C\n    translate([0, 0, 8])\n        rotate_extrude(angle = 180)\n            translate([20, 0, 0])\n                s_curve_profile();\n}\n\nmodule s_mid_sweep() {\n    // 90° clockwise sweep to form middle bridge\n    rotate([0, 0, -90])\n        linear_extrude(height = 40, twist = -90, scale = [1, 0.6], center = true)\n            s_curve_profile();\n}\n\nmodule s_bottom_arc() {\n    // bottom C\n    translate([0, 0, -24])\n        rotate_extrude(angle = 180)\n            translate([20, 0, 0])\n                s_curve_profile();\n}\n\nmodule s_serifs() {\n    // feet to avoid overhangs\n    s_serif(z_base = -32, len = 12, thick = 4);\n    s_serif(z_base = 32,  len = 12, thick = 4);\n}\n\nmodule letter_s() {\n    union() {\n        // main continuous tube\n        s_top_arc();\n        s_mid_sweep();\n        s_bottom_arc();\n        \n        // stabilizing feet\n        s_serifs();\n    }\n}\n\n// render the letter lying flat for printing\nrotate([90, 0, 0])\n    letter_s();",
    "renders": true
  },
  {
    "vehicle": "rs",
    "openscad_code": "// Realistic RS (Racing Seat) - Medium complexity\n// Wall thickness = 2mm for 3D printing\n\n$fn = 32;\n\nmodule seat_shell() {\n    difference() {\n        // Main shell body\n        union() {\n            // Seat back\n            translate([0, 0, 30])\n                scale([1, 1.2, 1])\n                cylinder(h=60, r1=30, r2=25);\n            \n            // Seat base\n            translate([0, -15, 10])\n                cube([60, 50, 20], center=true);\n            \n            // Side bolsters left\n            translate([-35, 0, 25])\n                rotate([0, 10, 0])\n                cylinder(h=50, r1=15, r2=10);\n            \n            // Side bolsters right\n            translate([35, 0, 25])\n                rotate([0, -10, 0])\n                cylinder(h=50, r1=15, r2=10);\n        }\n        \n        // Remove inner cavity\n        translate([0, -5, 15])\n            cube([54, 44, 55], center=true);\n        \n        // Headrest hole\n        translate([0, 5, 75])\n            cylinder(h=20, r=15);\n        \n        // Lumbar support space\n        translate([0, -20, 30])\n            cube([40, 10, 30], center=true);\n    }\n}\n\nmodule seat_cushion() {\n    // Bottom cushion\n    translate([0, -15, 10])\n        difference() {\n            scale([1.1, 1, 0.3])\n                sphere(r=30);\n            translate([0, 0, -10])\n                cube([80, 80, 20], center=true);\n        }\n    \n    // Back cushion\n    translate([0, 5, 45])\n        rotate([90, 0, 0])\n        difference() {\n            scale([1.1, 1.2, 0.4])\n                sphere(r=25);\n            translate([0, 0, -15])\n                cube([60, 60, 30], center=true);\n        }\n}\n\nmodule mounting_holes() {\n    // 4 mounting holes at corners\n    translate([-25, -30, 0])\n        cylinder(h=10, r=3);\n    translate([25, -30, 0])\n        cylinder(h=10, r=3);\n    translate([-25, 10, 0])\n        cylinder(h=10, r=3);\n    translate([25, 10, 0])\n        cylinder(h=10, r=3);\n}\n\nmodule harness_slots() {\n    // 5-point harness slots\n    for(x = [-15, 15]) {\n        translate([x, 0, 65])\n            rotate([0, 90, 0])\n            cylinder(h=5, r=5);\n    }\n    \n    // Center slot\n    translate([0, -10, 65])\n        rotate([0, 90, 0])\n        cylinder(h=5, r=5);\n}\n\nmodule seat_base() {\n    difference() {\n        // Base plate\n        translate([0, -10, 0])\n            cube([70, 60, 5], center=true);\n        \n        // Mounting holes\n        mounting_holes();\n    }\n}\n\n// Assembly\nunion() {\n    // Main seat structure\n    color(\"silver\") {\n        seat_shell();\n    }\n    \n    // Cushions\n    color(\"darkgray\") {\n        seat_cushion();\n    }\n    \n    // Base\n    color(\"black\") {\n        seat_base();\n    }\n    \n    // Harness slots\n    color(\"silver\") {\n        harness_slots();\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "rt",
    "openscad_code": "// OpenSCAD code for a realistic \"rt\" (remote terminal) model\n// Medium complexity, 3D-printable, ~75 mm long\n\n// Overall dimensions\nlength = 75;\nwidth = 30;\nheight = 15;\n\n// Wall thickness for 3D printing\nwall = 1.5;\n\n// Main body shell\nmodule body() {\n    difference() {\n        // Outer rounded block\n        minkowski() {\n            cube([length, width, height], center = true);\n            sphere(r = 2);\n        }\n        \n        // Hollow interior\n        translate([0, 0, 1])\n        minkowski() {\n            cube([length - 2*wall, width - 2*wall, height - 2*wall], center = true);\n            sphere(r = 1.5);\n        }\n    }\n}\n\n// Top panel with grille holes for airflow\nmodule top_grille() {\n    difference() {\n        translate([0, 0, height/2 - 0.5])\n            cube([length - 6, width - 6, 1], center = true);\n        \n        // Ventilation slots\n        for (x = [-25:5:25])\n            translate([x, 0, height/2 + 0.01])\n                cube([2, width - 8, 2], center = true);\n    }\n}\n\n// LED indicator strip\nmodule led_strip() {\n    translate([length/2 - 5, 0, height/2 - 1])\n        color(\"red\")\n        cube([8, 2, 1], center = true);\n}\n\n// Side screw posts (4x)\nmodule screw_posts() {\n    for (side = [-1, 1]) {\n        for (pos = [-length/3, length/3]) {\n            translate([pos, side * (width/2 - 1.5), 0])\n                cylinder(h = height, r = 1.5, center = true, $fn = 12);\n        }\n    }\n}\n\n// Keypad area with raised border\nmodule keypad() {\n    difference() {\n        // Raised border\n        translate([-length/4, 0, height/2 - 1.6])\n            cube([length/2, width - 10, 1.5], center = true);\n        \n        // Recessed key area\n        translate([-length/4, 0, height/2 - 1])\n            cube([length/2 - 4, width - 14, 2], center = true);\n    }\n    \n    // Simple key layout\n    for (row = [-1:1])\n        for (col = [-2:2]) {\n            translate([-length/4 + col*6, row*6, height/2 - 0.5])\n                cylinder(h = 1, r = 1.8, $fn = 16);\n        }\n}\n\n// Antenna stub\nmodule antenna() {\n    translate([length/2 + 2, 0, height/2 - 3]) {\n        rotate([90, 0, 0])\n            cylinder(h = 8, r1 = 1.5, r2 = 0.8, $fn = 12);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    top_grille();\n    led_strip();\n    screw_posts();\n    keypad();\n    antenna();\n}",
    "renders": true
  },
  {
    "vehicle": "gs",
    "openscad_code": "// Realistic style Gameboy (GS) - medium complexity\n// Overall dimensions: ~85mm x 48mm x 24mm\n\n// Main body shell\nmodule body() {\n    difference() {\n        // Main rounded rectangle body\n        minkowski() {\n            cube([82, 45, 20], center=true);\n            sphere(2);\n        }\n        // Hollow inside\n        translate([0, 0, 2])\n            cube([76, 39, 18], center=true);\n    }\n}\n\n// Screen bezel\nmodule screen_bezel() {\n    difference() {\n        // Outer bezel\n        translate([0, 15, 10.5])\n            cube([52, 34, 2], center=true);\n        // Inner cutout\n        translate([0, 15, 11.5])\n            cube([46, 28, 2], center=true);\n    }\n}\n\n// LCD screen\nmodule lcd() {\n    translate([0, 15, 12])\n        cube([44, 26, 0.5], center=true);\n}\n\n// D-pad\nmodule dpad() {\n    // Cross shape\n    union() {\n        // Horizontal bar\n        translate([-12, -10, 10.5])\n            cube([18, 6, 2], center=true);\n        // Vertical bar\n        translate([-12, -10, 10.5])\n            cube([6, 18, 2], center=true);\n    }\n}\n\n// A/B buttons\nmodule action_buttons() {\n    for (i = [0, 1]) {\n        translate([8 + 12*i, -10, 10.5])\n            cylinder(h=2, d=8, center=true);\n    }\n}\n\n// Start/select buttons\nmodule menu_buttons() {\n    for (i = [0, 1]) {\n        translate([-4 + 6*i, 0, 10.5])\n            cube([5, 2, 1.5], center=true);\n    }\n}\n\n// Speaker grill\nmodule speaker() {\n    difference() {\n        translate([0, -22, 10.5])\n            cube([30, 10, 2], center=true);\n        // Holes pattern\n        for (x = [-13:4:13])\n            for (y = [-4, 0, 4])\n                translate([x, -22 + y, 11.5])\n                    cylinder(h=2, d=1.5, center=true);\n    }\n}\n\n// Top edge details\nmodule top_details() {\n    // IR sensor port\n    translate([30, 22.5, 10])\n        rotate([0, 90, 0])\n            cylinder(h=6, d=3, center=true);\n    // Link cable port\n    translate([-30, 22.5, 7])\n        rotate([0, 90, 0])\n            cylinder(h=10, d=8, center=true);\n}\n\n// Side buttons\nmodule side_buttons() {\n    // Volume wheel\n    translate([-41, 5, 5])\n        rotate([90, 0, 0])\n            cylinder(h=8, d=6, center=true);\n    // Power switch\n    translate([41, 10, 5])\n        rotate([90, 0, 0])\n            cube([8, 3, 4], center=true);\n}\n\n// Assembly\nunion() {\n    body();\n    screen_bezel();\n    lcd();\n    dpad();\n    action_buttons();\n    menu_buttons();\n    speaker();\n    top_details();\n    side_buttons();\n}",
    "renders": true
  },
  {
    "vehicle": "st",
    "openscad_code": "// Realistic style \"ST\" signet ring – medium complexity\n// Overall height ~7 mm, outer diameter ~22 mm → size 10–11 US ring\n// 3D-printable with no overhangs >45°; 1.2 mm wall thickness everywhere\n\n// ---------- PARAMETERS ----------\nring_d = 22;            // outer diameter\nring_h = 7;             // total height\nband_t = 1.2;           // band thickness\ntop_t  = 1.5;           // top plate thickness\nplate_r = 9.5;          // radius of top plate\nchamfer = 1.0;          // 45° chamfer on lower edge\n\n// ---------- MODULES ----------\nmodule ring_band() {\n    difference() {\n        cylinder(h = ring_h, d = ring_d, $fn=64);\n        translate([0,0,-0.01])\n            cylinder(h = ring_h + 0.02, d = ring_d - 2*band_t, $fn=64);\n    }\n}\n\nmodule chamfer_edge() {\n    // cut 45° chamfer from lower outer edge\n    translate([0,0,-0.01])\n    rotate_extrude($fn=64)\n        polygon([[ring_d/2-0.01, 0],\n                 [ring_d/2+0.01, 0],\n                 [ring_d/2+0.01, chamfer+0.01],\n                 [ring_d/2-chamfer-0.01, 0.01]]);\n}\n\nmodule top_plate() {\n    cylinder(h = top_t, d = plate_r*2, $fn=64);\n}\n\n// Stylized but realistic \"S\" and \"T\" relief\nmodule relief_ST() {\n    // S\n    translate([-3.5, 0, top_t - 0.3]) {\n        linear_extrude(height = 0.3) {\n            polygon(points=[\n                [-2, 2], [-1, 3], [1, 3], [2, 2],\n                [2, 0], [1, -1], [-1, -1], [-2, 0],\n                [-2, 2]\n            ]);\n        }\n    }\n    // T\n    translate([3.5, 0, top_t - 0.3]) {\n        linear_extrude(height = 0.3) {\n            polygon(points=[\n                [-1.5, 3], [1.5, 3], [1.5, 2], [0.5, 2],\n                [0.5, -3], [-0.5, -3], [-0.5, 2], [-1.5, 2]\n            ]);\n        }\n    }\n}\n\n// ---------- MAIN ----------\ndifference() {\n    union() {\n        // band\n        ring_band();\n        \n        // add top plate flush on band\n        translate([0,0, ring_h - top_t])\n            top_plate();\n    }\n    \n    // chamfer lower outer edge\n    chamfer_edge();\n    \n    // engrave ST on top\n    relief_ST();\n}",
    "renders": true
  },
  {
    "vehicle": "k",
    "openscad_code": "// Realistic 3D-printable letter 'k' – medium complexity\n// Overall height ≈ 70 mm, thickness 6 mm, printable without support\n\nmodule vertical_stem() {\n    // Main straight leg of the k\n    translate([-3, 0, 0])\n        cube([6, 6, 70], center = true);\n}\n\nmodule upper_arm() {\n    // Upper diagonal arm, 45° upward, rounded front\n    translate([0, 0, 20])\n        rotate([0, 0, -45])\n            cube([4, 6, 50], center = true);\n    // Rounded tip\n    translate([17, 0, 42])\n        rotate([0, 90, 0])\n            cylinder(h = 4, r = 3, $fn = 12, center = true);\n}\n\nmodule lower_arm() {\n    // Lower diagonal arm, 45° downward, rounded front\n    translate([0, 0, -20])\n        rotate([0, 0, -45])\n            cube([4, 6, 50], center = true);\n    // Rounded tip\n    translate([17, 0, -42])\n        rotate([0, 90, 0])\n            cylinder(h = 4, r = 3, $fn = 12, center = true);\n}\n\nmodule bridging_joint() {\n    // Small cube bridging the two arms at their intersection\n    translate([0, 0, 0])\n        cube([6, 6, 6], center = true);\n}\n\nmodule base_plate() {\n    // Optional base for stability, 2 mm high\n    translate([0, 0, -36])\n        cube([26, 10, 2], center = true);\n}\n\n// Assemble the letter\nunion() {\n    vertical_stem();\n    upper_arm();\n    lower_arm();\n    bridging_joint();\n    base_plate();\n}\n\n// Center the whole model on the build plate\ntranslate([0, 0, 35])\n    children();",
    "renders": true
  },
  {
    "vehicle": "lt",
    "openscad_code": "// Realistic-style LED light (LT) bulb with medium complexity\n// Overall height ≈ 85 mm, max diameter ≈ 60 mm – fits most FDM printers\n\n$fn = 50;                // Smooth curves for printing\nwall = 1.2;              // 3-perimeter wall at 0.4 mm nozzle\nscrew_d = 27;            // E27 standard metal thread diameter\nglass_d = 60;            // Maximum glass bulb diameter\nglass_h = 55;            // Height of the glass envelope\npin_d = 2;               // Electrical pins for LED substrate\npin_cnt = 2;             // Two power pins\npin_h = 8;               // Pin protrusion length\n\nmodule e27_thread() {\n    // Simplified but printable screw thread – use 45° overhang safe ribs\n    difference() {\n        cylinder(d = screw_d + wall*2, h = 15, center = false);\n        for(i = [0:30:359])\n            rotate([0, 0, i])\n                translate([screw_d/2 + 0.2, 0, 0])\n                    cube([wall*2, 2, 15], center = true);\n    }\n    // Smooth contact ring on bottom\n    translate([0, 0, -1])\n        cylinder(d = 10, h = 2, center = false);\n}\n\nmodule glass_bulb() {\n    // Hollow glass envelope – printed as two shells for transparency effect\n    difference() {\n        // Outer shell\n        sphere(d = glass_d);\n        // Inner cavity (leave 1.2 mm walls everywhere)\n        translate([0, 0, 5])\n            sphere(d = glass_d - wall*2);\n        // Cut bottom flat\n        translate([0, 0, -glass_d/2])\n            cube([glass_d*2, glass_d*2, glass_d], center = true);\n    }\n}\n\nmodule led_substrate() {\n    // Flat disc carrying LEDs – sits 5 mm above screw base\n    color(\"white\")\n    difference() {\n        cylinder(d = glass_d - 10, h = 1.5, center = false);\n        // Ventilation & wiring holes\n        for(a = [0:120:359])\n            rotate([0, 0, a])\n                translate([glass_d/2 - 12, 0, -1])\n                    cylinder(d = 4, h = 3.5, center = false);\n    }\n    // Dummy LED chips\n    for(a = [0:30:359])\n        rotate([0, 0, a])\n            translate([glass_d/2 - 15, 0, 1.5])\n                color(\"yellow\")\n                    cube([3, 2, 0.8], center = true);\n}\n\nmodule power_pins() {\n    // Two brass pins at bottom center of screw\n    for(i = [-1, 1])\n        translate([i * 4, 0, -pin_h])\n            cylinder(d = pin_d, h = pin_h + 1, center = false);\n}\n\n// Main assembly\nunion() {\n    // Screw base\n    color(\"darkgray\")\n    e27_thread();\n\n    // Glass bulb on top\n    translate([0, 0, 15])\n        glass_bulb();\n\n    // LED substrate inside glass\n    translate([0, 0, 15 + 5])\n        led_substrate();\n\n    // Power pins protruding from bottom\n    power_pins();\n}",
    "renders": true
  },
  {
    "vehicle": "boat",
    "openscad_code": "// Realistic 3D-printable boat (medium complexity) – ~90 mm long\n// Hull, deck, superstructure, railings, basic propeller\n\n$fn = 36;                       // Smooth curves\n\n// Overall dimensions\nboat_length = 90;\nboat_width  = 35;\nboat_height = 25;\nwall_t      = 2;               // Wall thickness for printability\n\n// Main hull with simple displacement\nmodule hull() {\n    difference() {\n        // Outer hull\n        hull_outer();\n        // Inner cavity\n        translate([0, 0, wall_t]) scale([0.8, 0.8, 0.7]) hull_outer();\n    }\n}\n\n// Single reusable hull outer shape\nmodule hull_outer() {\n    scale([1, 0.6, 0.4]) hull_profile();\n}\n\n// Profile as 2D shape extruded\nmodule hull_profile() {\n    linear_extrude(height = boat_width, center = true) {\n        polygon(points=[\n            [0, 0],\n            [boat_length*0.1, -boat_height*0.3],\n            [boat_length*0.9, -boat_height*0.3],\n            [boat_length, 0],\n            [boat_length*0.9, boat_height*0.4],\n            [boat_length*0.1, boat_height*0.4],\n            [0, 0]\n        ]);\n    }\n}\n\n// Deck plate on top of hull\nmodule deck() {\n    translate([0, 0, boat_height*0.4 + 0.1])  // Slight offset for union\n        cube([boat_length, boat_width, wall_t], center = true);\n}\n\n// Cabin (bridge) toward rear\nmodule cabin() {\n    cabin_l = boat_length*0.30;\n    cabin_w = boat_width*0.55;\n    cabin_h = boat_height*0.35;\n\n    translate([boat_length*0.25, 0, boat_height*0.4 + wall_t])\n        cube([cabin_l, cabin_w, cabin_h], center = true);\n}\n\n// Windows on cabin sides\nmodule windows() {\n    win_w = 6;\n    win_h = 4;\n    win_d = wall_t + 0.5;\n    for (y = [-boat_width*0.25, boat_width*0.25]) {\n        translate([boat_length*0.25, y, boat_height*0.5 + 2])\n            rotate([0, 90, 0])\n                cube([win_w, win_h, win_d], center = true);\n    }\n}\n\n// Simple railings around deck perimeter\nmodule railings() {\n    post_h = 6;\n    post_r = 1.2;\n    spacing = 8;\n    num_posts = floor(boat_length / spacing);\n\n    for (i = [0 : num_posts-1]) {\n        x = i*spacing - boat_length/2 + spacing/2;\n        // Port side\n        translate([x, boat_width/2 - wall_t, boat_height*0.4 + wall_t])\n            cylinder(h = post_h, r = post_r, $fn = 12);\n        // Starboard side\n        translate([x, -boat_width/2 + wall_t, boat_height*0.4 + wall_t])\n            cylinder(h = post_h, r = post_r, $fn = 12);\n    }\n\n    // Top rail tubes\n    rail_y = boat_width/2 - wall_t;\n    translate([0,  rail_y, boat_height*0.4 + wall_t + post_h])\n        rotate([0, 90, 0])\n            cylinder(h = boat_length, r = post_r, $fn = 12);\n    translate([0, -rail_y, boat_height*0.4 + wall_t + post_h])\n        rotate([0, 90, 0])\n            cylinder(h = boat_length, r = post_r, $fn = 12);\n}\n\n// Basic propeller at stern\nmodule propeller() {\n    prop_d = 12;\n    prop_t = 2;\n    hub_r = 3;\n\n    translate([-boat_length/2 - prop_t/2, 0, -boat_height*0.2])\n        difference() {\n            // Hub\n            rotate([0, 90, 0])\n                cylinder(h = prop_t*2, r = hub_r, center = true);\n\n            // Three blades\n            for (a = [0 : 120 : 240]) {\n                rotate([0, 90, a])\n                    translate([hub_r, 0, 0])\n                        cube([prop_d/2, prop_t*0.8, 1], center = true);\n            }\n        }\n}\n\n// Combine all parts\nunion() {\n    hull();\n    deck();\n    cabin();\n    windows();\n    railings();\n    propeller();\n}",
    "renders": true
  },
  {
    "vehicle": "yacht",
    "openscad_code": "// Yacht model - medium complexity, realistic style\n// Overall length ~80mm, printable without supports\n\n$fn = 32;\n\n// Main parameters\nhull_length = 80;\nhull_width = 20;\nhull_height = 12;\ndeck_height = 8;\nmast_height = 60;\nboom_length = 35;\n\n// Hull shape module\nmodule hull() {\n    difference() {\n        // Main hull body\n        hull_shape();\n        \n        // Hollow out interior\n        translate([5, 0, -2])\n            scale([0.85, 0.85, 0.9])\n            hull_shape();\n    }\n}\n\n// Basic hull form\nmodule hull_shape() {\n    intersection() {\n        // Tapered hull\n        hull_taper();\n        \n        // Rounded bottom\n        translate([0, 0, -hull_height/2])\n            scale([1, 0.8, 0.5])\n            sphere(d=hull_width);\n    }\n}\n\n// Tapered hull body\nmodule hull_taper() {\n    hull_points = [\n        [-hull_length/2, -hull_width/2, 0],\n        [hull_length/2, -hull_width/4, 0],\n        [hull_length/2, hull_width/4, 0],\n        [-hull_length/2, hull_width/2, 0],\n        [-hull_length/2, -hull_width/2, hull_height],\n        [hull_length/2, -hull_width/3, hull_height],\n        [hull_length/2, hull_width/3, hull_height],\n        [-hull_length/2, hull_width/2, hull_height]\n    ];\n    \n    polyhedron(\n        points = hull_points,\n        faces = [\n            [0,1,2,3], [4,5,6,7],\n            [0,4,5,1], [1,5,6,2], [2,6,7,3], [3,7,4,0]\n        ]\n    );\n}\n\n// Deck structure\nmodule deck() {\n    translate([0, 0, deck_height])\n        difference() {\n            // Main deck\n            translate([-hull_length/2+5, 0, 0])\n                cube([hull_length-10, hull_width-2, 1]);\n            \n            // Cockpit opening\n            translate([-10, -6, -1])\n                cube([20, 12, 3]);\n        }\n}\n\n// Cabin structure\nmodule cabin() {\n    translate([-5, 0, deck_height+1])\n        difference() {\n            // Main cabin\n            translate([0, 0, 0])\n                cube([15, hull_width-4, 8]);\n            \n            // Cabin roof curve\n            translate([0, 0, 7])\n                scale([1, 0.9, 0.3])\n                sphere(d=15);\n            \n            // Windows\n            for(i = [-1, 1]) {\n                translate([5, i*4, 4])\n                    rotate([0, 90, 0])\n                    cylinder(h=1, d=3);\n                translate([10, i*4, 4])\n                    rotate([0, 90, 0])\n                    cylinder(h=1, d=3);\n            }\n        }\n}\n\n// Mast and rigging\nmodule mast() {\n    // Main mast\n    translate([10, 0, deck_height])\n        cylinder(h=mast_height, d=2);\n    \n    // Boom\n    translate([10, 0, deck_height+15])\n        rotate([90, 0, 0])\n        cylinder(h=boom_length, d=1.5);\n    \n    // Spreaders\n    for(i = [1, -1]) {\n        translate([10, i*2, deck_height+25])\n            rotate([0, 90, i*10])\n            cylinder(h=10, d=1);\n    }\n}\n\n// Sail\nmodule sail() {\n    color(\"white\") {\n        // Main sail\n        translate([10, 0, deck_height+15])\n            rotate([0, 90, 0])\n            linear_extrude(height=0.5)\n                polygon(points=[\n                    [0, 0],\n                    [boom_length-5, 0],\n                    [boom_length-5, -mast_height+20],\n                    [boom_length-15, -mast_height+25],\n                    [0, -mast_height+30]\n                ]);\n        \n        // Jib sail\n        translate([hull_length/2-10, 0, deck_height+5])\n            rotate([0, 90, 0])\n            linear_extrude(height=0.5)\n                polygon(points=[\n                    [0, 0],\n                    [15, 5],\n                    [15, -15],\n                    [0, -10]\n                ]);\n    }\n}\n\n// Keel and rudder\nmodule keel() {\n    // Keel fin\n    translate([0, 0, -hull_height/2])\n        linear_extrude(height=hull_height+5)\n            polygon(points=[\n                [-2, -1],\n                [2, -1],\n                [1, -8],\n                [-1, -8]\n            ]);\n    \n    // Rudder\n    translate([-hull_length/2+3, 0, -hull_height/2+2])\n        rotate([0, 0, 15])\n        linear_extrude(height=5)\n            polygon(points=[\n                [-1, -1],\n                [1, -1],\n                [1, -6],\n                [-1, -6]\n            ]);\n}\n\n// Railings\nmodule railings() {\n    for(side = [-1, 1]) {\n        translate([-hull_length/2+10, side*hull_width/2-1, deck_height+1])\n            for(pos = [0:10:hull_length-20]) {\n                translate([pos, 0, 0])\n                    cylinder(h=3, d=1);\n            }\n        \n        translate([-hull_length/2+10, side*hull_width/2-1, deck_height+2.5])\n            cube([hull_length-20, 1, 0.5]);\n    }\n}\n\n// Assemble the yacht\nunion() {\n    hull();\n    deck();\n    cabin();\n    keel();\n    mast();\n    sail();\n    railings();\n}",
    "renders": true
  },
  {
    "vehicle": "sailboat",
    "openscad_code": "// Realistic 3D-printable sailboat – medium complexity\n// Overall length ~90 mm, width ~30 mm, height ~75 mm\n// Designed for FDM printing: no steep overhangs, 1 mm+ wall thickness\n\n// Hull module with bow flare and transom taper\nmodule hull() {\n    difference() {\n        // Main hull body\n        hull_body();\n\n        // Drain slot (water evacuation when removed from bath)\n        translate([0, 0, -1])\n            cube([20, 6, 4], center = true);\n\n        // Keel slot (for separate keel)\n        translate([0, 0, -5])\n            cube([40, 3, 10], center = true);\n    }\n}\n\nmodule hull_body() {\n    // Loft profile using rounded cubes\n    union() {\n        // Stern block\n        translate([-30, 0, 0])\n            rotate([0, 10, 0])\n                scale([1, 1.2, 1])\n                    rounded_cube([20, 25, 12], 4);\n\n        // Mid section\n        translate([0, 0, 0])\n            rounded_cube([40, 22, 10], 4);\n\n        // Bow\n        translate([30, 0, 0])\n            rotate([0, -15, 0])\n                scale([0.8, 0.6, 0.6])\n                    rounded_cube([20, 20, 8], 4);\n    }\n}\n\n// Helper for rounded cube\nmodule rounded_cube(size, r) {\n    minkowski() {\n        cube(size - [2*r, 2*r, 2*r], center = true);\n        sphere(r);\n    }\n}\n\n// Keel fin for stability and printability (print flat)\nmodule keel() {\n    translate([0, 0, -7])\n        linear_extrude(height = 14, center = true, scale = 0.5)\n            offset(r = 2)\n                square([35, 2], center = true);\n}\n\n// Deck with non-slip texture using small cylinders\nmodule deck() {\n    difference() {\n        translate([0, 0, 5])\n            rounded_cube([60, 25, 2], 3);\n\n        // Cockpit recess\n        translate([0, 0, 6])\n            rounded_cube([35, 18, 3], 2);\n\n        // Mast hole\n        translate([10, 0, 5.5])\n            cylinder(h = 5, d = 5.5, $fn = 16);\n    }\n\n    // Non-slip pattern\n    for (x = [-25:5:25])\n        for (y = [-10:4:10])\n            if (abs(x) < 22 && abs(y) < 8)\n                translate([x, y, 6.5])\n                    cylinder(h = 0.4, d = 1.4, $fn = 8);\n}\n\n// Mast and boom (print separately for strength)\nmodule mast_assembly() {\n    // Mast\n    translate([10, 0, 5])\n        cylinder(h = 65, d = 5, $fn = 16);\n\n    // Boom pivot\n    rotate([0, 90, 0])\n        translate([0, 0, 10])\n            cylinder(h = 18, d = 3, $fn = 12);\n}\n\n// Sail with realistic curvature (loft between profiles)\nmodule sail() {\n    translate([10, 0, 38])\n        rotate([0, -10, 0])\n            linear_extrude(height = 0.8, center = true, scale = 1.0)\n                offset(r = 1)\n                    sail_profile();\n}\n\nmodule sail_profile() {\n    polygon(points = [\n        [0, 0],\n        [0, 40],\n        [25, 38],\n        [28, 25],\n        [26, 10],\n        [20, 2]\n    ]);\n}\n\n// Rudder and tiller\nmodule rudder() {\n    translate([-32, 0, -3])\n        union() {\n            // Blade\n            rotate([0, 20, 0])\n                cube([8, 12, 3], center = true);\n\n            // Tiller arm\n            translate([2, 0, 5])\n                rotate([0, 0, 20])\n                    cube([20, 3, 3], center = true);\n        }\n}\n\n// Assembly\nhull();\nkeel();\ndeck();\nmast_assembly();\nsail();\nrudder();",
    "renders": true
  },
  {
    "vehicle": "speedboat",
    "openscad_code": "// Realistic 3D-printable speedboat, medium complexity\n// Approx. 80 mm long, 35 mm beam, 25 mm tall\n\n$fn = 48;        // smooth curves\nwall = 1.2;      // wall thickness for printing\n\nmodule hull() {\n    difference() {\n        // main hull shell\n        scale([1, 0.6, 0.35])\n            cube([80, 35, 25], center=true);\n\n        // remove top to create cavity\n        translate([0,0,12])\n            scale([0.9, 0.55, 0.4])\n                cube([82, 37, 30], center=true);\n\n        // taper bow\n        translate([40,0,0])\n            rotate([0,0,30])\n                cube([30, 50, 50], center=true);\n        translate([40,0,0])\n            rotate([0,0,-30])\n                cube([30, 50, 50], center=true);\n    }\n}\n\nmodule deck() {\n    translate([0,0,12.5]) {\n        // flat deck plate\n        linear_extrude(height=wall)\n            scale([1, 0.6, 1])\n                projection()\n                    cube([80, 35, 25], center=true);\n\n        // windshield frame\n        translate([-10,0,wall])\n            rotate([30,0,0])\n                difference() {\n                    cube([20, 30, 8], center=true);\n                    translate([0,0,-1])\n                        cube([18, 28, 10], center=true);\n                }\n    }\n}\n\nmodule engine() {\n    translate([-35,0,13]) {\n        // outboard motor housing\n        cylinder(h=12, d1=8, d2=6, center=false);\n        // propeller hub\n        translate([0,0,-4])\n            cylinder(h=4, d=6);\n        // prop blades\n        for(a=[0:120:359])\n            rotate([0,0,a])\n                translate([-3,0,2])\n                    rotate([90,0,0])\n                        scale([1,0.15,0.4])\n                            cylinder(h=6, d=5);\n    }\n}\n\nmodule seating() {\n    // driver seat\n    translate([10,0,13+wall]) {\n        cube([12, 10, 4], center=true);\n        translate([0,0,2])\n            cube([12, 10, 1], center=true);\n    }\n    // passenger seat\n    translate([0,0,13+wall]) {\n        cube([12, 10, 4], center=true);\n        translate([0,0,2])\n            cube([12, 10, 1], center=true);\n    }\n}\n\nmodule rails() {\n    // port rail\n    translate([0, 10.5, 16])\n    for(x=[-30:15:30])\n        translate([x,0,0])\n            rotate([90,0,0])\n                cylinder(h=4, d=2);\n    // starboard rail\n    mirror([0,1,0])\n        translate([0, 10.5, 16])\n        for(x=[-30:15:30])\n            translate([x,0,0])\n                rotate([90,0,0])\n                    cylinder(h=4, d=2);\n}\n\n// assemble the speedboat\nunion() {\n    hull();\n    deck();\n    engine();\n    seating();\n    rails();\n}",
    "renders": true
  },
  {
    "vehicle": "canoe",
    "openscad_code": "// Realistic Canoe - Medium Complexity\n// 3D printable with no overhangs, wall thickness 1.5mm\n\nwall = 1.5;\nlength = 90;\nwidth = 20;\nheight = 10;\n\nmodule canoe_hull() {\n    // Main hull shape - ellipsoid\n    scale([1, 0.4, 0.2]) sphere(d = length);\n    \n    // Cut top off\n    difference() {\n        scale([1, 0.4, 0.2]) sphere(d = length);\n        translate([0, 0, height/2]) cube([length*2, width*2, height*2], center = true);\n    }\n    \n    // Hollow interior\n    difference() {\n        scale([1, 0.4, 0.2]) sphere(d = length - wall*2);\n        translate([0, 0, height/2 - wall]) cube([length*2, width*2, height*2], center = true);\n    }\n}\n\nmodule canoe_ends() {\n    // Bow and stern caps\n    for(x = [-length/2 + 2, length/2 - 2]) {\n        translate([x, 0, 0]) {\n            rotate([0, 90, 0]) cylinder(h = wall*2, d1 = 4, d2 = 0);\n        }\n    }\n}\n\nmodule seats() {\n    // Two seats with support bars\n    for(x = [-length/4, length/4]) {\n        translate([x, 0, height/2 - wall*2]) {\n            // Seat base\n            cube([8, width - 4, wall], center = true);\n            \n            // Seat supports\n            for(y = [-width/4, width/4]) {\n                translate([0, y, -wall]) cylinder(h = wall*2, d = 2);\n            }\n        }\n    }\n}\n\nmodule gunnels() {\n    // Top edge reinforcement\n    difference() {\n        hull_profile();\n        inner_profile();\n    }\n}\n\nmodule hull_profile() {\n    hull_curve();\n}\n\nmodule inner_profile() {\n    translate([0, 0, wall]) hull_curve();\n}\n\nmodule hull_curve() {\n    linear_extrude(height = wall)\n    for(i = [0:5:360]) {\n        hull_point(i);\n    }\n}\n\nmodule hull_point(angle) {\n    r = length/2 * sin(angle);\n    x = r * cos(angle) * 0.8;\n    y = width/2 * sin(angle) * 0.9;\n    translate([x, y, 0]) circle(d = 1);\n}\n\nmodule keel() {\n    // Center ridge\n    translate([0, 0, -height/2 + wall/2]) {\n        cube([length - 10, 2, wall], center = true);\n    }\n}\n\nmodule thwarts() {\n    // Cross braces\n    for(x = [-length/3, 0, length/3]) {\n        translate([x, 0, height/2 - wall]) {\n            rotate([90, 0, 0]) cylinder(h = width - 4, d = 2);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    canoe_hull();\n    color(\"brown\") {\n        canoe_ends();\n        gunnels();\n        keel();\n    }\n    color(\"tan\") {\n        seats();\n        thwarts();\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "kayak",
    "openscad_code": "// Realistic 3D-printable Kayak – medium complexity\n// Overall length ≈ 95 mm\n\n$fn = 36;                 // smooth curves\n\n// ------------------ HULL ------------------\nmodule hull() {\n    difference() {\n        // outer hull shell\n        hull_shell();\n        \n        // hollow interior\n        translate([0,0,-1])           // extra 1 mm down for clean bottom\n        scale([0.82,0.82,0.9])\n        hull_shell();\n    }\n}\n\nmodule hull_shell() {\n    // main body\n    linear_extrude(height = 30, twist = -10, scale = [0.4,0.7])\n        hull_shape_2D();\n    \n    // tapered stern\n    translate([-45,0,15])\n    rotate([0,90,0])\n    cylinder(h = 25, r1 = 12, r2 = 2);\n    \n    // tapered bow\n    translate([45,0,15])\n    rotate([0,90,0])\n    cylinder(h = 25, r1 = 12, r2 = 2);\n}\n\nmodule hull_shape_2D() {\n    offset(r = 3)\n    offset(r = -3)\n    polygon([\n        [-45,0], [-35,10], [-20,12], [0,13], [20,12], [35,10], [45,0]\n    ]);\n}\n\n// ------------------ COCKPIT RIM ------------------\nmodule cockpit() {\n    difference() {\n        // outer rim (3 mm thick)\n        translate([0,0,17])\n        cylinder(h = 3, r1 = 18, r2 = 20);\n        \n        // inner hole\n        translate([0,0,16.9])\n        cylinder(h = 3.2, r = 15);\n    }\n}\n\n// ------------------ SEAT ------------------\nmodule seat() {\n    translate([0,0,10.5]) {\n        // seat pan\n        translate([0,0,0])\n        scale([1,0.6,0.1])\n        sphere(d = 26);\n        \n        // backrest\n        translate([0,-7.5,2])\n        rotate([-15,0,0])\n        scale([1,0.3,1])\n        cube([20,5,8], center = true);\n    }\n}\n\n// ------------------ DECK LINES ------------------\nmodule deck_lines() {\n    for (y = [-7, 7]) {\n        translate([0,y,20])\n        rotate([90,0,0])\n        cylinder(h = 90, r = 0.6, $fn = 8);\n    }\n}\n\n// ------------------ FOOT BRACE CROSS-BARS ------------------\nmodule foot_braces() {\n    for (x = [35, 40]) {\n        translate([x,0,7])\n        rotate([0,90,0])\n        cylinder(h = 20, r = 1);\n    }\n}\n\n// ------------------ ASSEMBLY ------------------\nunion() {\n    hull();\n    cockpit();\n    seat();\n    deck_lines();\n    foot_braces();\n}",
    "renders": true
  },
  {
    "vehicle": "raft",
    "openscad_code": "// Raft - Realistic style, medium complexity\n// Overall dimensions: 90mm long x 50mm wide x 7mm thick\n\n// Raft parameters\nraft_length = 90;\nraft_width = 50;\nlog_radius = 3;\nlog_spacing = log_radius * 2 + 1;\nlog_count = floor(raft_width / log_spacing);\ndeck_thickness = 2;\npontoon_height = 5;\n\n// Main raft module\nmodule raft() {\n    // Bottom pontoons (logs)\n    difference() {\n        // Main log pontoons\n        for (i = [0:log_count-1]) {\n            translate([0, -raft_width/2 + log_spacing/2 + i*log_spacing, pontoon_height/2]) {\n                cylinder(h=raft_length, r=log_radius, center=true, $fn=20);\n            }\n        }\n        \n        // Carve out bottom for flat printing surface\n        translate([0, 0, -0.5]) {\n            cube([raft_length + 2, raft_width + 2, 1], center=true);\n        }\n    }\n    \n    // Deck planks\n    plank_width = 3;\n    plank_gap = 1;\n    plank_count = floor(raft_width / (plank_width + plank_gap));\n    \n    for (i = [0:plank_count-1]) {\n        y_pos = -raft_width/2 + plank_width/2 + i*(plank_width + plank_gap);\n        translate([0, y_pos, pontoon_height + deck_thickness/2]) {\n            cube([raft_length - 4, plank_width, deck_thickness], center=true);\n        }\n    }\n    \n    // Cross supports between logs\n    support_width = 2;\n    support_spacing = 15;\n    support_count = floor(raft_length / support_spacing) - 1;\n    \n    for (i = [1:support_count]) {\n        x_pos = -raft_length/2 + i*support_spacing;\n        translate([x_pos, 0, pontoon_height/2]) {\n            cube([support_width, raft_width, pontoon_height], center=true);\n        }\n    }\n    \n    // Front and back bumpers\n    bumper_height = 3;\n    bumper_width = 4;\n    \n    // Front bumper\n    translate([raft_length/2 - bumper_width/2, 0, pontoon_height/2]) {\n        cube([bumper_width, raft_width, pontoon_height], center=true);\n    }\n    \n    // Back bumper\n    translate([-raft_length/2 + bumper_width/2, 0, pontoon_height/2]) {\n        cube([bumper_width, raft_width, pontoon_height], center=true);\n    }\n    \n    // Mooring rings\n    ring_radius = 2;\n    ring_thickness = 1.5;\n    \n    // Front left ring\n    translate([raft_length/2 - 5, raft_width/2 - 3, pontoon_height + deck_thickness]) {\n        rotate([90, 0, 0]) {\n            difference() {\n                cylinder(h=ring_thickness, r=ring_radius, center=true, $fn=16);\n                cylinder(h=ring_thickness + 0.1, r=ring_radius - 1, center=true, $fn=16);\n            }\n        }\n    }\n    \n    // Front right ring\n    translate([raft_length/2 - 5, -raft_width/2 + 3, pontoon_height + deck_thickness]) {\n        rotate([90, 0, 0]) {\n            difference() {\n                cylinder(h=ring_thickness, r=ring_radius, center=true, $fn=16);\n                cylinder(h=ring_thickness + 0.1, r=ring_radius - 1, center=true, $fn=16);\n            }\n        }\n    }\n    \n    // Tie-down cleats\n    cleat_width = 3;\n    cleat_length = 6;\n    \n    // Left cleat\n    translate([0, raft_width/2 - cleat_width/2 - 2, pontoon_height + deck_thickness + 1]) {\n        cube([cleat_length, cleat_width, 2], center=true);\n    }\n    \n    // Right cleat\n    translate([0, -raft_width/2 + cleat_width/2 + 2, pontoon_height + deck_thickness + 1]) {\n        cube([cleat_length, cleat_width, 2], center=true);\n    }\n}\n\n// Generate the raft centered at origin\nraft();",
    "renders": true
  },
  {
    "vehicle": "dinghy",
    "openscad_code": "// Realistic medium-complexity dinghy for 3D printing\n// Overall length ~80 mm, safe for FDM printing\n\n// Hull shell thickness\nwall = 1.5;\n\nmodule rounded_box(l, w, h, r) {\n    // Helper: box with rounded edges\n    hull() {\n        for (dx = [-l/2+r, l/2-r], dy = [-w/2+r, w/2-r])\n            translate([dx, dy, 0])\n                cylinder(r = r, h = h, $fn = 16);\n    }\n}\n\nmodule hull() {\n    // Main hull body\n    difference() {\n        // Outer hull\n        hull() {\n            for (x = [-35, 35], y = [-20, 20])\n                translate([x, y, 0])\n                    sphere(d = 30, $fn = 32);\n            for (x = [-40, 40], y = [-20, 20])\n                translate([x, y, -15])\n                    sphere(d = 25, $fn = 32);\n        }\n        \n        // Inner cavity for buoyancy\n        translate([0, 0, -17])\n            scale([0.85, 0.85, 1])\n            hull() {\n                for (x = [-35, 35], y = [-20, 20])\n                    translate([x, y, 0])\n                        sphere(d = 30, $fn = 32);\n                for (x = [-40, 40], y = [-20, 20])\n                    translate([x, y, -15])\n                        sphere(d = 25, $fn = 32);\n            }\n    }\n    \n    // Flat deck rim\n    difference() {\n        translate([0, 0, 0])\n            cube([80, 40, wall], center = true);\n        translate([0, 0, -1])\n            cube([75, 35, wall+2], center = true);\n    }\n}\n\nmodule bench() {\n    // Seat / thwart\n    translate([0, 0, 2])\n        rounded_box(35, 8, 3, 2);\n}\n\nmodule oarlock() {\n    // Simple oarlock post\n    union() {\n        cylinder(h = 8, r1 = 2.5, r2 = 2.5, $fn = 16);\n        translate([0, 0, 8])\n            sphere(d = 5, $fn = 16);\n    }\n}\n\nmodule oarlocks() {\n    // Pair of oarlocks\n    for (y = [-15, 15])\n        translate([20, y, 5])\n            oarlock();\n}\n\nmodule keel_stripe() {\n    // Thin keel reinforcement\n    translate([0, 0, -15])\n        cube([85, 3, 1.5], center = true);\n}\n\nmodule bow_eye() {\n    // Towing eye at bow\n    translate([-40, 0, 0])\n    rotate([90, 0, 0])\n        difference() {\n            cylinder(h = 8, r1 = 3, r2 = 3, $fn = 16);\n            translate([0, 0, -1])\n                cylinder(h = 10, r1 = 1.5, r2 = 1.5, $fn = 16);\n        }\n}\n\n// Assembly\nunion() {\n    hull();\n    bench();\n    oarlocks();\n    keel_stripe();\n    bow_eye();\n}",
    "renders": true
  },
  {
    "vehicle": "ferry",
    "openscad_code": "// Realistic style ferry, medium complexity\n// Designed for 3D printing (no overhangs, 2mm walls)\n\n// Overall dimensions control\nferry_length = 90;\nferry_width = 25;\nferry_height = 12;\n\n// Hull thickness for printing\nwall_thickness = 2;\n\nmodule ferry() {\n    // Main hull\n    union() {\n        // Lower hull - pointed bow\n        hull() {\n            // Stern\n            translate([0, 0, 0])\n                cube([ferry_length*0.3, ferry_width, ferry_height*0.6], center=true);\n            \n            // Bow\n            translate([ferry_length*0.4, 0, 0])\n                rotate([0, 0, 90])\n                    cylinder(h=ferry_width, r1=ferry_height*0.3, r2=0.1, center=true);\n        }\n        \n        // Upper deck\n        translate([0, 0, ferry_height*0.4])\n            cube([ferry_length*0.85, ferry_width*0.9, ferry_height*0.4], center=true);\n        \n        // Bridge structure\n        translate([-ferry_length*0.2, 0, ferry_height*0.7])\n            cube([ferry_length*0.3, ferry_width*0.7, ferry_height*0.3], center=true);\n        \n        // Smoke stack\n        translate([-ferry_length*0.15, 0, ferry_height])\n            cylinder(h=ferry_height*0.4, r1=ferry_width*0.08, r2=ferry_width*0.1, center=true);\n    }\n    \n    // Cut out interior for hollow printing\n    difference() {\n        // Main hull body\n        union() {\n            hull() {\n                translate([0, 0, 0])\n                    cube([ferry_length*0.3, ferry_width-wall_thickness, ferry_height*0.6-wall_thickness], center=true);\n                translate([ferry_length*0.4, 0, 0])\n                    rotate([0, 0, 90])\n                        cylinder(h=ferry_width-wall_thickness, r1=ferry_height*0.3-wall_thickness, r2=0.1, center=true);\n            }\n            translate([0, 0, ferry_height*0.4])\n                cube([ferry_length*0.85-wall_thickness, ferry_width*0.9-wall_thickness, ferry_height*0.4], center=true);\n        }\n        \n        // Remove interior\n        translate([0, 0, -wall_thickness])\n            cube([ferry_length*1.1, ferry_width*1.1, ferry_height*2], center=true);\n    }\n    \n    // Lifeboats on sides\n    module lifeboat() {\n        rotate([90, 0, 0])\n            cylinder(h=ferry_length*0.15, r1=ferry_width*0.1, r2=ferry_width*0.1);\n    }\n    \n    for (i = [-1, 1]) {\n        translate([ferry_length*0.1, i*ferry_width*0.45, ferry_height*0.5])\n            lifeboat();\n        translate([-ferry_length*0.1, i*ferry_width*0.45, ferry_height*0.5])\n            lifeboat();\n    }\n    \n    // Windows on bridge\n    for (x = [-ferry_length*0.3, -ferry_length*0.2, -ferry_length*0.1]) {\n        translate([x, ferry_width*0.3, ferry_height*0.8])\n            cube([ferry_length*0.08, wall_thickness, ferry_height*0.1], center=true);\n        translate([x, -ferry_width*0.3, ferry_height*0.8])\n            cube([ferry_length*0.08, wall_thickness, ferry_height*0.1], center=true);\n    }\n    \n    // Railings\n    module railing_post() {\n        cylinder(h=ferry_height*0.1, r=wall_thickness/2, center=true);\n    }\n    \n    for (x = [-ferry_length*0.4:ferry_length*0.1:ferry_length*0.4]) {\n        translate([x, ferry_width*0.45, ferry_height*0.55])\n            railing_post();\n        translate([x, -ferry_width*0.45, ferry_height*0.55])\n            railing_post();\n    }\n    \n    // Vehicle deck markings\n    for (x = [-ferry_length*0.3:ferry_length*0.15:ferry_length*0.2]) {\n        translate([x, 0, ferry_height*0.41])\n            cube([ferry_length*0.1, ferry_width*0.6, 0.5], center=true);\n    }\n}\n\n// Render the ferry\nferry();",
    "renders": true
  },
  {
    "vehicle": "submarine",
    "openscad_code": "// Realistic Medium-Complexity Submarine\n// Overall length ≈ 80 mm\n\n// Parameters\nhull_d = 22;\nhull_L = 70;\nsail_L = 18;\nsail_W = 6;\nsail_H = 8;\nprop_d = 12;\nprop_h = 8;\nrudder_T = 2;\nrudder_H = 10;\nhull_th = 1.5;\nwindow_d = 4;\n\n// Main Hull\nmodule hull() {\n    difference() {\n        // Outer ellipsoid\n        scale([1, 1, 0.55])\n            sphere(d = hull_d, $fn = 60);\n        // Hollow interior\n        scale([1, 1, 0.55])\n            sphere(d = hull_d - 2*hull_th, $fn = 60);\n        // Flat nose cap\n        translate([0, 0, hull_d/2*0.55])\n            cube([hull_d, hull_d, hull_d], center = true);\n    }\n}\n\n// Sail/Conning tower\nmodule sail() {\n    union() {\n        difference() {\n            // Main block\n            translate([0, 0, sail_H/2])\n                cube([sail_L, sail_W, sail_H], center = true);\n            // Rounded top\n            translate([0, 0, sail_H])\n                scale([1, 0.8, 1])\n                    sphere(d = sail_W, $fn = 30);\n            // Hollow interior\n            translate([0, 0, sail_H/2])\n                cube([sail_L - 2*hull_th, sail_W - 2*hull_th, sail_H], center = true);\n        }\n        // Periscope\n        translate([sail_L/2 - 2, 0, sail_H + 2])\n            cylinder(h = 6, d = 2, $fn = 12);\n    }\n}\n\n// Propeller shroud\nmodule prop_shroud() {\n    difference() {\n        cylinder(h = prop_h, d = prop_d, $fn = 60);\n        cylinder(h = prop_h + 0.5, d = prop_d - 2*hull_th, $fn = 60);\n    }\n}\n\n// Propeller blades\nmodule propeller() {\n    for (i = [0:60:359])\n        rotate([0, 0, i])\n            translate([0, prop_d/2 - 1.5, prop_h/2])\n                rotate([90, 0, 0])\n                    scale([1.5, 0.8, 1])\n                        cylinder(h = 8, d1 = 4, d2 = 1, $fn = 2);\n}\n\n// Bow planes\nmodule bow_planes() {\n    for (s = [-1, 1]) {\n        mirror([0, s, 0])\n            translate([hull_L/2 - 20, 0, 0])\n                rotate([0, 0, 10])\n                    cube([12, 1, 8]);\n    }\n}\n\n// Stern planes\nmodule stern_planes() {\n    for (s = [-1, 1]) {\n        mirror([0, s, 0])\n            translate([-hull_L/2 + 8, 0, 0])\n                rotate([0, 0, 15])\n                    cube([15, 1, 6]);\n    }\n}\n\n// Rudder\nmodule rudder() {\n    translate([-hull_L/2 + 5, 0, 0])\n        rotate([0, 90, 0])\n            linear_extrude(height = rudder_T, convexity = 10)\n                polygon([[0, 0], [-rudder_H, 0], [-rudder_H, rudder_H/2]]);\n}\n\n// Window row\nmodule windows() {\n    for (x = [30:-10:-30])\n        translate([x, 0, hull_d/2*0.55 - 2])\n            sphere(d = window_d, $fn = 16);\n}\n\n// Assembly\nhull();\ntranslate([0, 0, hull_d/2*0.55 - 0.5])\n    sail();\ntranslate([-hull_L/2 + 2, 0, 0])\n    union() {\n        prop_shroud();\n        propeller();\n    }\nbow_planes();\nstern_planes();\nrudder();\nwindows();",
    "renders": true
  },
  {
    "vehicle": "catamaran",
    "openscad_code": "// Realistic 3D-printable catamaran – medium complexity\n// Overall length ≈ 80 mm, beam ≈ 40 mm, printable without supports\n\n// Wall thickness everywhere = 1.2 mm (3 perimeters on 0.4 mm nozzle)\nwall = 1.2;\n\nmodule hull_half(steps = 12) {\n    // One demi-hull drawn with stacked, scaled cubes\n    // Keeps all slopes ≤ 45° for support-free printing\n    for (i = [0:steps-1]) {\n        h = 6;                    // constant vertical slice height\n        y = i * 2.5;              // forward distance along hull\n        w_max = 18 - 1.5 * y;     // taper toward bow\n        w = max(w_max, 4);        // minimum width at bow\n        scale_x = 1 - 0.7 * y / (steps * 2.5); // taper in plan view\n        translate([0, y, i * h])\n            scale([scale_x, 1, 1])\n                cube([w, 2.5, h], center = true);\n    }\n}\n\nmodule full_hull(offset_x) {\n    // Assemble both halves with proper spacing\n    translate([offset_x, 0, 0]) {\n        hull_half();\n        mirror([1, 0, 0]) hull_half();\n    }\n}\n\nmodule trampoline() {\n    // Thin deck mesh between hulls\n    color(\"DarkSlateGray\")\n    translate([0, 15, 12])\n        cube([32, 35, wall], center = true);\n}\n\nmodule mast() {\n    // Simple 2-part mast stepped on trampoline\n    translate([0, 0, 12]) {\n        // Mast tube\n        cylinder(h = 35, d = 3, $fn = 16);\n        // Mast base reinforcement disk\n        cylinder(h = wall, d = 6, $fn = 16);\n    }\n}\n\nmodule crossbeam(pos_y) {\n    // Structural beam between hulls, printable as-is\n    translate([0, pos_y, 8])\n        cube([34, 4, 4], center = true);\n}\n\nmodule rudder() {\n    // Pivoting rudder assembly at transom\n    translate([0, 30, 2]) {\n        difference() {\n            cube([6, 1, 10]);                // stock\n            translate([3, -0.5, 5])\n                rotate([0, 90, 0])\n                    cylinder(h = 2, d = 1.5, $fn = 12); // pivot hole\n        }\n        translate([3, 0, 5])\n            cube([2, 0.8, 7]);               // blade\n    }\n}\n\n// Build the complete catamaran\nunion() {\n    full_hull(17);  // starboard hull\n    full_hull(-17); // port hull\n    \n    trampoline();\n    \n    crossbeam(5);\n    crossbeam(25);\n    \n    mast();\n    \n    // Twin rudders\n    translate([8, 0, 0]) rudder();\n    translate([-8, 0, 0]) mirror([1, 0, 0]) rudder();\n}",
    "renders": true
  },
  {
    "vehicle": "trimaran",
    "openscad_code": "// Trimaran – 3D-printable, realistic style, medium complexity\n// Overall size ≈ 90 mm long × 60 mm wide × 25 mm high\n\n$fn = 36;              // Smooth curves for printing\nwall = 1.2;            // Wall thickness for FDM/SLA printing\n\nmodule hull(length, width, height) {\n    // Basic V-shaped hull with flat bottom\n    difference() {\n        hull() {\n            translate([length/2, 0, height/2]) cube([length, width, height], center=true);\n            translate([length*0.9, 0, -height/2-0.1]) cube([length*0.2, width*0.8, height+0.2], center=true);\n        }\n        // Hollow it out\n        translate([length/2+wall, 0, height/2-wall]) cube([length-wall*2, width-wall*2, height-wall*2], center=true);\n    }\n}\n\nmodule crossbeam(len, dia) {\n    // Cylindrical crossbeam\n    rotate([0, 90, 0]) cylinder(h = len, d = dia, center=true);\n}\n\nmodule mast(base, top, height) {\n    // Tapered mast\n    cylinder(h = height, d1 = base, d2 = top);\n}\n\nmodule sail(w, h, curve) {\n    // Simple curved sail (no overhangs)\n    linear_extrude(height = wall, convexity = 10) {\n        polygon(points=[\n            [0, 0],\n            [w, 0],\n            [w*0.9, h],\n            [0, h-curve]\n        ]);\n    }\n}\n\nmodule ama() {\n    // Smaller outrigger hull (ama)\n    scale([0.7, 0.5, 0.8]) hull(30, 12, 10);\n}\n\nmodule trimaran() {\n    // Main central hull\n    translate([0, 0, 5]) hull(90, 18, 14);\n\n    // Two cross-beams\n    translate([0, 0, 10]) crossbeam(60, 6);\n    translate([-20, 0, 10]) crossbeam(60, 6);\n\n    // Two amas (outriggers)\n    for(side = [-1, 1]) {\n        translate([0, side*30, 5]) ama();\n    }\n\n    // Mast stepped on main hull\n    translate([20, 0, 14]) mast(base=4, top=2, height=35);\n\n    // Main sail\n    translate([20, 0, 14+35]) rotate([90, 0, 0]) sail(25, 40, 10);\n\n    // Jib sail\n    translate([20, 0, 14+30]) rotate([90, 0, -30]) sail(18, 30, 8);\n}\n\ntrimaran();",
    "renders": true
  },
  {
    "vehicle": "ketch",
    "openscad_code": "// Ketch sailboat model - medium complexity 3D printable version\n// Overall length ~80mm, width ~25mm, height ~60mm\n\n// Hull parameters\nhull_length = 80;\nhull_width = 20;\nhull_height = 12;\nbow_height = 18;\n\n// Mast parameters\nmain_mast_height = 50;\nmizzen_mast_height = 35;\nmast_diameter = 2;\n\n// Sail parameters\nmain_sail_width = 30;\nmain_sail_height = 40;\nmizzen_sail_width = 20;\nmizzen_sail_height = 25;\nboom_diameter = 1.5;\n\n// Deck details\ncabin_width = 15;\ncabin_length = 20;\ncabin_height = 8;\nhatch_width = 8;\nhatch_length = 12;\n\n// Rudder and keel\nkeel_height = 8;\nkeel_length = 30;\nrudder_height = 10;\nrudder_width = 3;\n\nmodule hull() {\n    // Main hull - elongated rounded shape\n    hull_shape();\n    \n    // Bow - tapered front\n    translate([hull_length/2 - 5, 0, 0])\n        rotate([0, -30, 0])\n        cube([15, hull_width, bow_height], center=true);\n    \n    // Stern - flat back\n    translate([-hull_length/2 + 2, 0, 0])\n        cube([4, hull_width * 0.9, hull_height], center=true);\n}\n\nmodule hull_shape() {\n    // Create hull with rounded bottom using multiple cylinders\n    union() {\n        // Main body\n        hull_section(0, hull_length - 10);\n        \n        // Bow transition\n        translate([hull_length/2 - 5, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h=10, r1=hull_width/2, r2=hull_width/3, center=true);\n        \n        // Stern transition\n        translate([-hull_length/2 + 5, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h=10, r1=hull_width/2, r2=hull_width/2.2, center=true);\n    }\n}\n\nmodule hull_section(offset, length) {\n    translate([offset, 0, 0])\n        scale([1, 1, 0.6])\n        cylinder(h=length, r1=hull_width/2, r2=hull_width/2, center=true);\n}\n\nmodule deck() {\n    // Main deck surface\n    translate([0, 0, hull_height/2 + 1])\n        cube([hull_length - 6, hull_width - 4, 2], center=true);\n    \n    // Cabin\n    translate([-5, 0, hull_height/2 + 2])\n        cube([cabin_length, cabin_width, cabin_height], center=true);\n    \n    // Cabin roof\n    translate([-5, 0, hull_height/2 + 2 + cabin_height/2])\n        cube([cabin_length + 2, cabin_width + 2, 2], center=true);\n    \n    // Hatch\n    translate([10, 0, hull_height/2 + 2.5])\n        cube([hatch_length, hatch_width, 1], center=true);\n}\n\nmodule keel() {\n    // Main keel\n    translate([0, 0, -keel_height/2 - hull_height/2])\n        cube([keel_length, 3, keel_height], center=true);\n    \n    // Rudder\n    translate([-hull_length/2 + 5, 0, -rudder_height/2 - hull_height/2])\n        cube([rudder_width, 2, rudder_height], center=true);\n}\n\nmodule mast(x_pos, height, sail_width, sail_height) {\n    // Mast\n    translate([x_pos, 0, height/2 + hull_height/2])\n        cylinder(h=height, r=mast_diameter/2, center=true);\n    \n    // Boom\n    translate([x_pos + sail_width/2, 0, hull_height/2 + 2])\n        rotate([0, 90, 0])\n        cylinder(h=sail_width, r=boom_diameter/2, center=true);\n    \n    // Sail\n    translate([x_pos + sail_width/2, 0, hull_height/2 + 2 + sail_height/2])\n        cube([sail_width, 1, sail_height], center=true);\n}\n\n// Assembly\nunion() {\n    // Hull and deck\n    hull();\n    deck();\n    \n    // Keel and rudder\n    keel();\n    \n    // Masts and sails\n    mast(10, main_mast_height, main_sail_width, main_sail_height);\n    mast(-15, mizzen_mast_height, mizzen_sail_width, mizzen_sail_height);\n}",
    "renders": true
  },
  {
    "vehicle": "sloop",
    "openscad_code": "// Sloop OpenSCAD model\n// Basic realistic sloop for 3D printing\n\nhull_length = 80;\nhull_width = 25;\nhull_height = 15;\ndeck_thickness = 2;\nmast_height = 60;\nboom_length = 35;\n\nmodule hull() {\n    // Main hull with curved bottom\n    difference() {\n        hull_base();\n        // Hollow out interior\n        translate([0, 0, deck_thickness]) \n            scale([0.8, 0.8, 0.8]) \n            hull_base();\n    }\n    \n    // Deck surface\n    translate([0, 0, hull_height]) \n        cube([hull_length, hull_width, deck_thickness], center=true);\n}\n\nmodule hull_base() {\n    // Create curved hull shape\n    union() {\n        // Main curved body\n        hull_shape();\n        // Pointed bow\n        translate([hull_length/2 - 5, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=10, r1=5, r2=0, center=true);\n    }\n}\n\nmodule hull_shape() {\n    // Generate curved hull using hull() of cylinders\n    hull() {\n        for(i = [-hull_length/2:hull_length/10:hull_length/2]) {\n            translate([i, 0, 0])\n                cylinder(h=hull_height, r=hull_width/2 * (1 - abs(i)/(hull_length/2)*0.3), center=true);\n        }\n    }\n}\n\nmodule mast() {\n    // Main mast\n    translate([0, 0, hull_height + deck_thickness]) \n        cylinder(h=mast_height, r=1.5, center=false);\n    \n    // Boom\n    translate([0, 0, hull_height + deck_thickness + mast_height*0.7])\n        rotate([0, 90, 0])\n            cylinder(h=boom_length, r=1, center=true);\n}\n\nmodule rudder() {\n    // Stern rudder\n    translate([-hull_length/2 - 2, 0, hull_height/2])\n        cube([4, 2, hull_height/2]);\n}\n\nmodule keel() {\n    // Center keel for stability\n    translate([0, 0, -hull_height/2 - 2])\n        cube([hull_length*0.7, 3, 4]);\n}\n\nmodule cabin() {\n    // Small cabin on deck\n    translate([hull_length/4, 0, hull_height + deck_thickness])\n        cube([15, hull_width*0.7, 8], center=true);\n}\n\nmodule rail() {\n    // Deck rail posts\n    for(i = [-hull_length/2+5:hull_length/10:hull_length/2-5]) {\n        translate([i, hull_width/2 - 1, hull_height + deck_thickness + 2])\n            cylinder(h=4, r=0.8, center=true);\n        translate([i, -hull_width/2 + 1, hull_height + deck_thickness + 2])\n            cylinder(h=4, r=0.8, center=true);\n    }\n}\n\n// Assemble the sloop\nunion() {\n    hull();\n    mast();\n    rudder();\n    keel();\n    cabin();\n    rail();\n}",
    "renders": true
  },
  {
    "vehicle": "schooner",
    "openscad_code": "// Schooner OpenSCAD Model - Medium Complexity\n// Realistic style, 3D printable\n\nhull_length = 80;\nhull_width = 20;\nhull_height = 15;\ndeck_thickness = 2;\n\nmodule hull() {\n    // Main hull with curved bottom\n    difference() {\n        union() {\n            // Hull base\n            hull() {\n                translate([0, 0, -hull_height/2]) \n                    cube([hull_length, hull_width, hull_height], center=true);\n                translate([0, 0, -hull_height/2 + 2]) \n                    scale([1, 0.8, 0.8]) \n                    sphere(d=hull_width);\n                translate([hull_length/2 - 10, 0, -hull_height/2 + 2]) \n                    scale([1, 0.8, 0.8]) \n                    sphere(d=hull_width);\n            }\n        }\n        \n        // Hollow interior\n        translate([0, 0, -hull_height/2 + deck_thickness]) \n            cube([hull_length - 4, hull_width - 4, hull_height], center=true);\n    }\n}\n\nmodule deck() {\n    // Main deck\n    translate([0, 0, hull_height/2]) \n        cube([hull_length, hull_width, deck_thickness], center=true);\n    \n    // Cabin\n    translate([-hull_length/4, 0, hull_height/2 + deck_thickness]) \n        cube([20, hull_width - 4, 10], center=true);\n}\n\nmodule mast(position, height, diameter) {\n    translate([position, 0, hull_height/2 + deck_thickness]) \n        cylinder(h=height, d=diameter);\n    \n    // Boom\n    translate([position, 0, hull_height/2 + deck_thickness + height/2]) \n        rotate([90, 0, 0]) \n        cylinder(h=hull_length/3, d=diameter/2);\n    \n    // Gaff\n    translate([position, 0, hull_height/2 + deck_thickness + height - 5]) \n        rotate([135, 0, 0]) \n        cylinder(h=hull_length/4, d=diameter/2);\n}\n\nmodule sails() {\n    // Main sail\n    translate([hull_length/4, 0, hull_height/2 + deck_thickness + 30]) \n        rotate([0, 90, 0]) \n        scale([1, 0.05, 1]) \n        cube([25, 1, 30], center=true);\n    \n    // Fore sail\n    translate([-hull_length/4, 0, hull_height/2 + deck_thickness + 25]) \n        rotate([0, 90, 0]) \n        scale([1, 0.05, 1]) \n        cube([20, 1, 25], center=true);\n}\n\nmodule bowsprit() {\n    // Bowsprit extending from bow\n    translate([hull_length/2, 0, hull_height/2]) \n        rotate([0, 15, 0]) \n        cylinder(h=15, d=2);\n}\n\nmodule rudder() {\n    // Rudder at stern\n    translate([-hull_length/2 - 2, 0, 0]) \n        cube([4, hull_width/4, hull_height/2], center=true);\n}\n\nmodule railings() {\n    // Railings along deck edges\n    for(x = [-hull_length/2 + 5:hull_length/5:hull_length/2 - 5]) {\n        translate([x, hull_width/2 - 1, hull_height/2 + deck_thickness + 3]) \n            cylinder(h=3, d=1);\n        translate([x, -hull_width/2 + 1, hull_height/2 + deck_thickness + 3]) \n            cylinder(h=3, d=1);\n    }\n}\n\n// Assemble the schooner\nunion() {\n    hull();\n    deck();\n    mast(hull_length/4, 40, 2);      // Main mast\n    mast(-hull_length/4, 35, 2);     // Fore mast\n    sails();\n    bowsprit();\n    rudder();\n    railings();\n}",
    "renders": true
  },
  {
    "vehicle": "gondola",
    "openscad_code": "// Venice Gondola – medium-complexity, 3D-printable\n// Overall length ~90 mm, no severe overhangs, 1 mm wall / 2 mm floor thickness\n\n$fn = 32;\n\n// Main dimensions\nL = 90;          // total length\nW = 18;          // max beam\nH = 12;          // max height above waterline\nT = 2;           // wall / floor thickness\nR = 1;           // small fillet radius\n\nmodule gondola_hull() {\n    // Symmetric half-hull to keep bottom printable\n    difference() {\n        // Outer shell\n        hull() {\n            translate([-L/2, 0, 0]) sphere(d = W);\n            translate([L/2, 0, 0])  sphere(d = W);\n        }\n        // Hollow out\n        translate([0, 0, -H]) cube([L + 2, W + 2, H], center = true);\n    }\n    // Floor plate\n    translate([0, 0, 0]) cube([L, W - 2*T, T], center = true);\n}\n\nmodule ferro() {\n    // Decorative iron prow, 3 printable fins\n    for (a = [-30, 0, 30]) {\n        rotate([90, 0, a])\n            translate([L/2 + 3, 0, 0])\n                cylinder(h = 8, d1 = 2, d2 = 0.5);\n    }\n}\n\nmodule stern_riser() {\n    // Raised stern platform\n    translate([-L/2 - 2, 0, H/2])\n        rotate([0, 10, 0])\n            cube([6, W/1.5, H], center = true);\n}\n\nmodule seats() {\n    // Three cross-wise seats\n    for (x = [-L/3, 0, L/3]) {\n        translate([x, 0, H/2])\n            cube([4, W - 4, T*2], center = true);\n    }\n}\n\nmodule oarlock() {\n    // Simple oarlock peg on starboard\n    translate([L/4, W/2 + 1, H])\n        cylinder(h = 5, d = 3);\n}\n\nmodule gondola() {\n    union() {\n        gondola_hull();\n        ferro();\n        stern_riser();\n        seats();\n        oarlock();\n    }\n}\n\ngondola();",
    "renders": true
  },
  {
    "vehicle": "skiff",
    "openscad_code": "// OpenSCAD Skiff – 3D-printable, medium-complexity, realistic style\n// Overall length ≈ 82 mm, width ≈ 22 mm, height ≈ 9 mm\n\n// Wall thickness for printability\nwall = 1.2;\n\n// Main hull module with slight sheer line and rounded bow/stern\nmodule hull() {\n    difference() {\n        // Outer hull shell\n        hull_shell();\n        // Inner cavity\n        translate([0, 0, -wall])\n            scale([0.82, 0.82, 0.9])\n            hull_shell();\n    }\n}\n\nmodule hull_shell() {\n    linear_extrude(height = 8, twist = 2, scale = [1, 0.6])\n        hull() {\n            // Bow\n            translate([40, 0]) circle(d = 22);\n            // Stern\n            translate([-40, 0]) circle(d = 18);\n            // Mid stations\n            translate([0, 0]) circle(d = 20);\n        }\n}\n\n// Transom plate\nmodule transom() {\n    translate([-41, 0, 4])\n        rotate([0, 90, 0])\n            difference() {\n                cube([8, 20, 1.5], center = true);\n                translate([0, 0, -1])\n                    cube([10, 18, 3], center = true);\n            }\n}\n\n// Seats\nmodule seats() {\n    for (x = [-25, -5, 15]) {\n        translate([x, 0, 5.5])\n            difference() {\n                cube([14, 18, 1.2], center = true);\n                translate([0, 0, -0.5])\n                    cube([12.6, 16.6, 2], center = true);\n            }\n    }\n}\n\n// Ribs inside hull\nmodule ribs() {\n    for (x = [-35:10:35]) {\n        translate([x, 0, 2.5])\n            difference() {\n                cube([1, 18, 5], center = true);\n                translate([0, 0, -1])\n                    scale([0.8, 0.8, 1])\n                        cube([1.2, 17, 6], center = true);\n            }\n    }\n}\n\n// Gunwale rail\nmodule gunwale() {\n    difference() {\n        hull() {\n            for (x = [-40:2:40]) {\n                translate([x, 10.8, 7.2])\n                    sphere(d = 2.4);\n            }\n        }\n        translate([0, 0, -1])\n            cube([200, 200, 12], center = true);\n    }\n}\n\n// Keel\nmodule keel() {\n    translate([0, 0, -1.2])\n        cube([82, 2.4, wall], center = true);\n}\n\n// Mast step (short socket for small mast)\nmodule mast_step() {\n    translate([0, 0, 5.5])\n        difference() {\n            cylinder(h = 3, d = 5, center = false);\n            translate([0, 0, -0.1])\n                cylinder(h = 3.2, d = 3.8, center = false);\n        }\n}\n\n// Final assembly\nunion() {\n    hull();\n    transom();\n    seats();\n    ribs();\n    gunwale();\n    keel();\n    mast_step();\n}",
    "renders": true
  },
  {
    "vehicle": "tugboat",
    "openscad_code": "// Tugboat - Realistic Medium Complexity\n// Dimensions: ~80mm length, ~25mm width, ~35mm height\n\nhull_color = \"red\";\nsuperstructure_color = \"white\";\ndeck_color = \"lightgray\";\n\n// Parameters\nhull_length = 80;\nhull_width = 25;\nhull_height = 15;\nsuperstructure_height = 12;\nchimney_height = 10;\nchimney_width = 6;\n\n// Hull - rounded bow, flat stern\nmodule hull() {\n    color(hull_color)\n    union() {\n        // Main hull body\n        difference() {\n            hull_shape();\n            // Remove bottom to make it hollow\n            translate([0, 0, -hull_height])\n                cube([hull_length + 2, hull_width + 2, hull_height], center=true);\n        }\n        \n        // Add deck\n        color(deck_color)\n        translate([0, 0, hull_height])\n            cube([hull_length, hull_width, 1.5], center=true);\n    }\n}\n\nmodule hull_shape() {\n    hull_points = [\n        [-hull_length/2, -hull_width/2, 0],\n        [hull_length/2, -hull_width/2, 0],\n        [hull_length/2, hull_width/2, 0],\n        [-hull_length/2, hull_width/2, 0],\n        [-hull_length/2 + 5, -hull_width/2, hull_height],\n        [hull_length/2 - 5, -hull_width/2, hull_height],\n        [hull_length/2 - 5, hull_width/2, hull_height],\n        [-hull_length/2 + 5, hull_width/2, hull_height],\n        [-hull_length/2 + 15, 0, hull_height + 5]\n    ];\n    \n    hull_faces = [\n        [0,1,2,3], [4,5,6,7], [0,1,5,4], [2,3,7,6],\n        [1,2,6,5], [3,0,4,7], [4,7,8], [5,6,8], [6,7,8], [4,5,8]\n    ];\n    \n    polyhedron(points=hull_points, faces=hull_faces, convexity=10);\n}\n\n// Superstructure (bridge)\nmodule superstructure() {\n    color(superstructure_color)\n    translate([0, 0, hull_height + 1.5])\n    difference() {\n        // Main bridge\n        translate([-hull_length/4, 0, superstructure_height/2])\n            cube([hull_length/2, hull_width - 8, superstructure_height], center=true);\n        \n        // Windows\n        for(x = [-hull_length/4 + 5 : 8 : hull_length/4 - 5]) {\n            translate([x, (hull_width - 8)/2 - 0.5, superstructure_height/2])\n                cube([4, 1, 3], center=true);\n            translate([x, -(hull_width - 8)/2 + 0.5, superstructure_height/2])\n                cube([4, 1, 3], center=true);\n        }\n    }\n}\n\n// Chimney\nmodule chimney() {\n    color(\"darkgray\")\n    translate([hull_length/4, 0, hull_height + superstructure_height + 1.5])\n    union() {\n        // Main chimney\n        cylinder(h=chimney_height, d=chimney_width, $fn=16);\n        \n        // Top cap\n        translate([0, 0, chimney_height])\n            cylinder(h=2, d=chimney_width + 2, $fn=16);\n    }\n}\n\n// Towing bitt\nmodule towing_bitt() {\n    color(\"darkgray\")\n    translate([-hull_length/2 + 5, 0, hull_height + 1.5])\n    union() {\n        // Base\n        cube([6, 4, 3], center=true);\n        \n        // Posts\n        for(y = [-hull_width/4, hull_width/4]) {\n            translate([0, y, 3])\n                cylinder(h=4, d=2, $fn=8);\n        }\n    }\n}\n\n// Railings\nmodule railings() {\n    color(\"white\")\n    translate([0, 0, hull_height + 1.5])\n    for(x = [-hull_length/2 + 5 : 10 : hull_length/2 - 5]) {\n        translate([x, hull_width/2 - 1, 2])\n            cube([0.5, 0.5, 3]);\n        translate([x, -hull_width/2 + 1, 2])\n            cube([0.5, 0.5, 3]);\n    }\n}\n\n// Lifebuoys\nmodule lifebuoys() {\n    color(\"orange\")\n    for(x = [-hull_length/3, hull_length/3]) {\n        translate([x, hull_width/2 + 2, hull_height + 1.5])\n            rotate([90, 0, 0])\n            difference() {\n                cylinder(h=2, d=6, $fn=16);\n                cylinder(h=3, d=3, $fn=16);\n            }\n    }\n}\n\n// Mast\nmodule mast() {\n    color(\"darkgray\")\n    translate([-hull_length/3, 0, hull_height + superstructure_height + chimney_height])\n    union() {\n        // Main mast\n        cylinder(h=15, d=2, $fn=8);\n        \n        // Cross bar\n        translate([0, 0, 8])\n            rotate([90, 0, 0])\n            cylinder(h=10, d=1, $fn=8);\n    }\n}\n\n// Assembly\nunion() {\n    hull();\n    superstructure();\n    chimney();\n    towing_bitt();\n    railings();\n    lifebuoys();\n    mast();\n}",
    "renders": true
  },
  {
    "vehicle": "barge",
    "openscad_code": "// Realistic Medium-Complexity Barge for 3D Printing\n// Hull length ≈ 80 mm, width ≈ 25 mm, height ≈ 18 mm\n// All walls ≥ 1 mm for FDM printing\n\n// Main parameters\nhull_l   = 80;\nhull_w   = 25;\nhull_h   = 10;\nbow_slope = 0.6;       // bow taper ratio (0–1)\nwall_t   = 1.2;        // uniform wall thickness\n\n// Colors for preview (ignored by slicer)\ncolor_hull   = [0.55, 0.40, 0.25];\ncolor_deck   = [0.75, 0.60, 0.45];\ncolor_cargo  = [0.35, 0.35, 0.35];\n\n// Hull module with hollow interior\nmodule hull() {\n    difference() {\n        // Outer hull shell\n        hull_shape();\n\n        // Inner cavity – slightly smaller and higher to leave bottom solid\n        translate([0, 0, wall_t])\n            scale([1 - 2*wall_t/hull_w,\n                   1 - 2*wall_t/hull_l,\n                   0.9])\n            hull_shape();\n    }\n}\n\n// Single solid hull shape\nmodule hull_shape() {\n    linear_extrude(height = hull_h, convexity = 4)\n        polygon(points=[\n            [-hull_l/2, -hull_w/2],\n            [ hull_l/2 - hull_l*bow_slope, -hull_w/2],\n            [ hull_l/2, 0],\n            [ hull_l/2 - hull_l*bow_slope,  hull_w/2],\n            [-hull_l/2,  hull_w/2]\n        ]);\n}\n\n// Deck surface with slight camber\nmodule deck() {\n    translate([0, 0, hull_h])\n        color(color_deck)\n        linear_extrude(height = 1.5, convexity = 4)\n            offset(r = 1, $fn = 32)\n            polygon(points=[\n                [-hull_l/2 + 2, -hull_w/2 + 2],\n                [ hull_l/2 - hull_l*bow_slope - 2, -hull_w/2 + 2],\n                [ hull_l/2 - 4, 0],\n                [ hull_l/2 - hull_l*bow_slope - 2,  hull_w/2 - 2],\n                [-hull_l/2 + 2,  hull_w/2 - 2]\n            ]);\n}\n\n// Cargo hatches (three rectangular covers)\nmodule cargo_hatches() {\n    for (x = [-25, 0, 25]) {\n        translate([x, 0, hull_h + 1.5])\n            color(color_cargo)\n            cube([16, 18, 1.5], center = true);\n    }\n}\n\n// Superstructure: small wheelhouse at stern\nmodule wheelhouse() {\n    translate([-hull_l/2 + 15, 0, hull_h + 1.5]) {\n        difference() {\n            // Main block\n            color(color_deck)\n            cube([12, 14, 8], center = true);\n\n            // Doorway (no overhang)\n            translate([5.9, 0, -3])\n                cube([2.2, 5, 6], center = true);\n        }\n        // Roof\n        translate([0, 0, 4.5])\n            color(color_cargo)\n            cube([14, 16, 1], center = true);\n    }\n}\n\n// Bollards along edge for mooring lines\nmodule bollards() {\n    for (x = [-30, -15, 0, 15, 30]) {\n        translate([x, hull_w/2 - 1, hull_h + 1.5])\n            cylinder(h = 3.5, r = 1.5, $fn = 12);\n        translate([x, -hull_w/2 + 1, hull_h + 1.5])\n            cylinder(h = 3.5, r = 1.5, $fn = 12);\n    }\n}\n\n// Assembly\ncolor(color_hull) hull();\ndeck();\ncargo_hatches();\nwheelhouse();\nbollards();",
    "renders": true
  },
  {
    "vehicle": "trawler",
    "openscad_code": "// Realistic Medium-Complexity Trawler\n// Length ≈ 80 mm, beam ≈ 25 mm\n\n// Overall body\nmodule hull() {\n    difference() {\n        // Main hull block\n        hull() {\n            translate([-5, 0, 0]) cube([90, 26, 12], center = true);\n            translate([45, 0, 5]) cube([10, 24, 15], center = true);\n            translate([-50, 0, -6]) cube([10, 20, 2], center = true);\n        }\n        // Bow taper\n        translate([42, 0, -2]) rotate([0, 0, 35]) cube([30, 30, 20], center = true);\n        // Keel slot\n        translate([0, 0, -7]) cube([110, 6, 2], center = true);\n    }\n}\n\n// Superstructure block\nmodule bridge() {\n    difference() {\n        translate([0, 0, 8]) cube([30, 20, 15], center = true);\n        // Wheelhouse front window\n        translate([15, 0, 12]) cube([2, 12, 8], center = true);\n    }\n}\n\n// Smokestack\nmodule funnel() {\n    cylinder(h = 12, d1 = 6, d2 = 4, $fn = 16);\n}\n\n// Rail posts\nmodule rail_post() {\n    cylinder(h = 5, d = 2, $fn = 8);\n}\n\n// Rail along the side\nmodule rail(length) {\n    for (x = [0:5:length-5]) {\n        translate([x, 12.5, 4.5]) rail_post();\n        translate([x, -12.5, 4.5]) rail_post();\n    }\n    // Top rail pipe\n    color(\"gray\") translate([length/2-2.5, 12.5, 7]) cube([length, 1, 1], center = true);\n    color(\"gray\") translate([length/2-2.5, -12.5, 7]) cube([length, 1, 1], center = true);\n}\n\n// Winch drum\nmodule winch() {\n    difference() {\n        cylinder(h = 8, d = 10, $fn = 20);\n        translate([0, 0, -1]) cylinder(h = 10, d = 3, $fn = 20);\n    }\n}\n\n// Net boom\nmodule boom() {\n    color(\"darkblue\") translate([25, 0, 12]) rotate([0, -20, 0])\n    cylinder(h = 35, d = 2, $fn = 8);\n}\n\n// Antenna mast\nmodule mast() {\n    translate([5, 0, 15]) cylinder(h = 15, d1 = 1.5, d2 = 0.8, $fn = 8);\n    translate([5, 0, 22]) sphere(d = 2, $fn = 8);\n}\n\n// Lifebuoy\nmodule lifebuoy() {\n    difference() {\n        cylinder(h = 2, d = 6, $fn = 20);\n        translate([0, 0, -0.5]) cylinder(h = 3, d = 3, $fn = 20);\n    }\n}\n\n// Propeller\nmodule propeller() {\n    for (a = [0:120:240]) {\n        rotate([0, 0, a])\n        translate([0, 2.5, 0]) cube([5, 1, 0.8], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    color(\"lightgray\") hull();\n    \n    color(\"white\") translate([-15, 0, 6]) bridge();\n    \n    color(\"darkgray\") translate([0, 0, 16]) funnel();\n    \n    color(\"white\") rail(80);\n    \n    color(\"darkgray\") translate([30, 0, 6]) winch();\n    \n    boom();\n    \n    color(\"darkgray\") mast();\n    \n    color(\"red\") translate([-35, 8, 5]) rotate([90, 0, 0]) lifebuoy();\n    \n    color(\"gray\") translate([-48, 0, -5]) rotate([90, 0, 0]) propeller();\n}",
    "renders": true
  },
  {
    "vehicle": "pontoon",
    "openscad_code": "// Realistic medium-complexity 3D-printable pontoon\n// Units are millimeters, model is ~80 mm long\n\n// Overall dimensions\npontoon_length = 80;\npontoon_width = 28;\npontoon_height = 18;\nwall_thickness = 1.8;\n\n// Create a single pontoon cylinder with rounded ends\nmodule pontoon_body() {\n    difference() {\n        union() {\n            // Main cylindrical hull\n            translate([0, 0, pontoon_height/2])\n                cylinder(h = pontoon_length - pontoon_height, r = pontoon_height/2, $fn = 64);\n            // Front rounded cap\n            translate([-(pontoon_length - pontoon_height)/2, 0, pontoon_height/2])\n                rotate([0, 90, 0])\n                    cylinder(h = pontoon_height, r = pontoon_height/2, $fn = 64);\n            // Rear rounded cap\n            translate([(pontoon_length - pontoon_height)/2, 0, pontoon_height/2])\n                rotate([0, 90, 0])\n                    cylinder(h = pontoon_height, r = pontoon_height/2, $fn = 64);\n        }\n        \n        // Hollow out interior\n        translate([0, 0, pontoon_height/2])\n            cylinder(h = pontoon_length + 2, r = pontoon_height/2 - wall_thickness, $fn = 64);\n    }\n}\n\n// Deck surface with mounting holes\nmodule pontoon_deck() {\n    deck_width = pontoon_width - 4;\n    deck_length = pontoon_length - 10;\n    \n    difference() {\n        // Main deck plate\n        translate([0, 0, pontoon_height - wall_thickness])\n            cube([deck_length, deck_width, wall_thickness], center = true);\n        \n        // Mounting holes pattern\n        for (x = [-deck_length/2 + 10 : 15 : deck_length/2 - 10]) {\n            for (y = [-deck_width/2 + 5 : 10 : deck_width/2 - 5]) {\n                translate([x, y, pontoon_height - wall_thickness])\n                    cylinder(h = wall_thickness + 1, r = 2, $fn = 16);\n            }\n        }\n    }\n}\n\n// Side reinforcement ribs\nmodule side_ribs() {\n    rib_thickness = 1.5;\n    rib_height = pontoon_height * 0.6;\n    \n    for (x = [-pontoon_length/2 + 15 : 20 : pontoon_length/2 - 15]) {\n        translate([x, 0, rib_height/2])\n            difference() {\n                // Outer rib shape\n                cylinder(h = pontoon_width + 2, r = rib_height/2, $fn = 3);\n                // Hollow center\n                cylinder(h = pontoon_width + 4, r = rib_height/2 - rib_thickness, $fn = 3);\n                // Remove excess beyond pontoon\n                translate([0, -(pontoon_width/2 + 1), 0])\n                    cube([rib_height + 2, pontoon_width + 2, rib_height], center = true);\n            }\n    }\n}\n\n// Drain plug detail at rear\nmodule drain_plug() {\n    plug_radius = 3;\n    plug_length = 5;\n    \n    translate([pontoon_length/2 - 10, 0, pontoon_height/4])\n        union() {\n            // Plug boss\n            cylinder(h = plug_length, r = plug_radius + 2, $fn = 16);\n            // Threaded hole\n            cylinder(h = plug_length + 1, r = plug_radius, $fn = 16);\n        }\n}\n\n// Lifting eye at front\nmodule lifting_eye() {\n    eye_outer = 5;\n    eye_inner = 2.5;\n    eye_thickness = 3;\n    \n    translate([-pontoon_length/2 + 5, 0, pontoon_height * 0.75])\n        rotate([0, 90, 0])\n            difference() {\n                // Outer ring\n                cylinder(h = eye_thickness, r = eye_outer, $fn = 32);\n                // Inner hole\n                cylinder(h = eye_thickness + 1, r = eye_inner, $fn = 32);\n            }\n}\n\n// Assemble the complete pontoon\nunion() {\n    pontoon_body();\n    pontoon_deck();\n    side_ribs();\n    drain_plug();\n    lifting_eye();\n}",
    "renders": true
  },
  {
    "vehicle": "hydrofoil",
    "openscad_code": "// Realistic-style 3D-printable hydrofoil\n// All dimensions in mm – fits within 100 mm bounding box\n\n// Overall scale factor\nscale_factor = 0.8;\n\n// Board/fuselage parameters\nboard_length = 70 * scale_factor;\nboard_width  = 20 * scale_factor;\nboard_thick  = 5  * scale_factor;\n\n// Mast parameters\nmast_height = 50 * scale_factor;\nmast_chord  = 12 * scale_factor;\nmast_thick  = 3  * scale_factor;\n\n// Wing parameters\nwing_span  = 60 * scale_factor;\nwing_chord = 25 * scale_factor;\nwing_thick = 2.5 * scale_factor;\n\n// Tail stabilizer\nstab_span  = 30 * scale_factor;\nstab_chord = 18 * scale_factor;\nstab_thick = 2  * scale_factor;\n\n// Fuselage taper helper\nmodule tapered_box(l, w1, w2, h) {\n    hull() {\n        translate([0, 0, 0]) cube([l, w1, h], center = true);\n        translate([l, 0, 0]) cube([l, w2, h], center = true);\n    }\n}\n\n// Simple NACA-like foil profile (flat bottom, curved top)\nmodule foil_profile(chord, thick, span) {\n    difference() {\n        // Full wing block\n        cube([chord, span, thick * 2], center = true);\n        \n        // Remove top curvature\n        for (x = [-chord/2 : chord/10 : chord/2]) {\n            translate([x, 0, thick])\n                rotate([90, 0, 0])\n                    cylinder(h = span + 2, r = thick * 1.2, $fn = 20);\n        }\n    }\n}\n\n// Main hydrofoil module\nmodule hydrofoil() {\n    union() {\n        // Board (fuselage)\n        color(\"silver\")\n        tapered_box(\n            board_length,\n            board_width,\n            board_width * 0.6,\n            board_thick\n        );\n        \n        // Mast\n        color(\"gray\")\n        translate([board_length * 0.4, 0, -(mast_height + board_thick)/2])\n            cube([mast_chord, mast_thick, mast_height], center = true);\n        \n        // Main wing\n        color(\"silver\")\n        translate([board_length * 0.4 + mast_chord/2 + wing_chord/2, 0, -mast_height])\n            rotate([0, 0, 0])\n                foil_profile(wing_chord, wing_thick, wing_span);\n        \n        // Tail stabilizer\n        color(\"silver\")\n        translate([board_length * 0.4 + mast_chord/2 + stab_chord/2, 0, -mast_height * 0.8])\n            rotate([0, 0, 0])\n                foil_profile(stab_chord, stab_thick, stab_span);\n        \n        // Wing fences (small endplates for printability)\n        for (y = [-wing_span/2, wing_span/2]) {\n            translate([board_length * 0.4 + mast_chord/2 + wing_chord/2, y, -mast_height])\n                cube([wing_chord, 1, wing_thick * 2], center = true);\n        }\n        \n        // Stabilizer fences\n        for (y = [-stab_span/2, stab_span/2]) {\n            translate([board_length * 0.4 + mast_chord/2 + stab_chord/2, y, -mast_height * 0.8])\n                cube([stab_chord, 1, stab_thick * 2], center = true);\n        }\n        \n        // Mounting holes for screws (print-in-place)\n        for (x = [-board_length/2 + 10, board_length/2 - 10]) {\n            translate([x, 0, board_thick/2])\n                cylinder(h = 5, r = 2, $fn = 16);\n        }\n    }\n}\n\n// Render the model\nhydrofoil();",
    "renders": true
  },
  {
    "vehicle": "hovercraft",
    "openscad_code": "// Realistic hovercraft – medium complexity\n// All dimensions in mm, ready for 3D printing\n\n$fn = 36;               // Smooth circles\nwall = 1.5;             // Uniform printable wall thickness\n\nmodule skirt() {\n    // Inflatable skirt – hollow torus section\n    difference() {\n        cylinder(h = 8, d1 = 90, d2 = 90);\n        translate([0,0,-1])\n            cylinder(h = 10, d1 = 70, d2 = 70);\n    }\n}\n\nmodule hull() {\n    // Main fiberglass body – rounded deck\n    hullHeight = 15;\n    translate([0,0,hullHeight/2])\n        scale([1, 0.7, 0.4])\n            sphere(d = 70);\n}\n\nmodule intake() {\n    // Air-intake duct on the rear\n    translate([30,0,20])\n        rotate([90,0,0])\n            cylinder(h = 25, d1 = 22, d2 = 18);\n}\n\nmodule fanBlades(n = 5) {\n    // Propeller inside duct\n    for(i=[0:n-1])\n        rotate([0,0,i*360/n])\n            translate([0,0,12])\n                cube([20,3,2], center=true);\n}\n\nmodule rudder() {\n    // Vertical control rudder behind duct\n    translate([40,0,15])\n        rotate([0,20,0])\n            cube([8,10,20]);\n}\n\nmodule engineBox() {\n    // Motor housing on top rear\n    translate([0,-15,25])\n        cube([30,20,15], center=true);\n}\n\nmodule cockpit() {\n    // Pilot cabin – simplified canopy\n    translate([0,0,25])\n        rotate_extrude()\n            translate([0,15,0])\n                circle(d = 20);\n}\n\n// Assembly\nunion() {\n    skirt();\n    hull();\n    intake();\n    fanBlades();\n    rudder();\n    engineBox();\n    cockpit();\n}\n\n// Add a flat bottom plate for printing stability\ntranslate([0,0,-wall])\n    cube([100,60,wall], center=true);",
    "renders": true
  },
  {
    "vehicle": "airboat",
    "openscad_code": "// Airboat - Realistic Medium Complexity\n// Dimensions roughly 80mm long x 35mm wide x 25mm tall\n\n$fn = 36;\n\n// Main hull\nmodule hull() {\n    difference() {\n        // Main hull body\n        hull_shape();\n        \n        // Cockpit cavity\n        translate([10, 0, 8])\n            cube([30, 20, 12], center=true);\n        \n        // Hull drain holes\n        for(x = [-20, -10, 0, 10, 20]) {\n            translate([x, 0, 1])\n                cylinder(h=3, d=2, center=true);\n        }\n    }\n}\n\n// Hull shape with rounded bottom\nmodule hull_shape() {\n    union() {\n        // Main hull\n        translate([0, 0, 5])\n            scale([1, 0.6, 0.3])\n                sphere(d=60);\n        \n        // Flat deck\n        translate([0, 0, 10])\n            cube([60, 35, 3], center=true);\n        \n        // Front taper\n        translate([30, 0, 5])\n            rotate([0, 90, 0])\n                cylinder(h=20, d1=25, d2=15);\n    }\n}\n\n// Seating area\nmodule cockpit() {\n    // Driver seat\n    translate([5, 0, 11])\n        cube([12, 10, 6], center=true);\n    \n    // Passenger seat\n    translate([-10, 0, 11])\n        cube([12, 10, 6], center=true);\n    \n    // Seat backs\n    for(x = [5, -10]) {\n        translate([x, 0, 15])\n            cube([12, 10, 4], center=true);\n    }\n    \n    // Windshield\n    translate([25, 0, 16])\n        rotate([60, 0, 0])\n            cube([20, 30, 2], center=true);\n}\n\n// Engine cage\nmodule engine_cage() {\n    // Main cage frame\n    difference() {\n        // Cage body\n        translate([-35, 0, 25])\n            cube([30, 40, 30], center=true);\n        \n        // Hollow center\n        translate([-35, 0, 25])\n            cube([26, 36, 26], center=true);\n    }\n    \n    // Cage supports\n    for(angle = [0, 90, 180, 270]) {\n        rotate([0, 0, angle])\n            translate([-35, 18, 25])\n                cylinder(h=3, d=3);\n    }\n}\n\n// Propeller assembly\nmodule propeller() {\n    // Engine block\n    translate([-50, 0, 25])\n        cube([15, 15, 20], center=true);\n    \n    // Propeller hub\n    translate([-65, 0, 25])\n        cylinder(h=15, d=8);\n    \n    // Propeller blades (5 blades)\n    for(i = [0:4]) {\n        rotate([0, 0, i * 72])\n            translate([-65, 0, 25])\n                rotate([90, 0, 0])\n                    scale([1, 0.2, 2])\n                        cylinder(h=15, d1=3, d2=1);\n    }\n    \n    // Safety cage\n    difference() {\n        translate([-65, 0, 25])\n            sphere(d=35);\n        translate([-65, 0, 25])\n            sphere(d=30);\n    }\n}\n\n// Rudder assembly\nmodule rudder() {\n    // Vertical fin\n    translate([-30, 0, 15])\n        rotate([0, 20, 0])\n            cube([15, 2, 20], center=true);\n    \n    // Rudder control\n    translate([-20, 0, 25])\n        rotate([0, 20, 0])\n            cube([20, 2, 8], center=true);\n}\n\n// Float pods (stability)\nmodule float_pods() {\n    for(side = [-1, 1]) {\n        translate([0, side * 20, 5])\n            scale([0.5, 0.3, 0.3])\n                sphere(d=40);\n    }\n}\n\n// Main assembly\nhull();\ncockpit();\nengine_cage();\npropeller();\nrudder();\nfloat_pods();",
    "renders": true
  },
  {
    "vehicle": "houseboat",
    "openscad_code": "// Houseboat - Realistic Style, Medium Complexity\n// Dimensions: ~70mm long x 30mm wide x 20mm tall\n\n// Parameters for 3D printing\nwall_thickness = 1.2;\nscale_factor = 0.3;\n\n// Main boat hull\nmodule hull() {\n    difference() {\n        // Main hull shape - tapered pontoon\n        hull_shape();\n        \n        // Hollow out interior\n        translate([1, 1, 1])\n        scale([0.9, 0.85, 0.8])\n        hull_shape();\n    }\n}\n\nmodule hull_shape() {\n    hull_points = [\n        [0, -15, 0], [70, -15, 0], [70, 15, 0], [0, 15, 0],\n        [5, -12, 10], [65, -12, 10], [65, 12, 10], [5, 12, 10]\n    ];\n    \n    // Create tapered hull with rounded edges\n    minkowski() {\n        hull() {\n            for (p = hull_points) translate(p) sphere(0.1);\n        }\n        sphere(2);\n    }\n}\n\n// Cabin structure on top\nmodule cabin() {\n    translate([15, 0, 10]) {\n        difference() {\n            // Main cabin body\n            cube([35, 28, 12]);\n            \n            // Door\n            translate([1, 10, 0])\n            cube([wall_thickness, 8, 10]);\n            \n            // Windows\n            for (x = [10, 25]) {\n                translate([x, 1, 6])\n                cube([6, wall_thickness, 4]);\n            }\n            for (y = [5, 22]) {\n                translate([48, y, 6])\n                cube([wall_thickness, 6, 4]);\n            }\n        }\n        \n        // Cabin roof with slight overhang\n        translate([-2, -2, 12])\n        cube([39, 32, 2]);\n    }\n}\n\n// Railings around deck\nmodule railings() {\n    // Front railing posts\n    for (x = [5:10:55]) {\n        translate([x, -16, 10])\n        cylinder(h=4, d=2);\n    }\n    \n    // Back railing posts\n    for (x = [5:10:55]) {\n        translate([x, 16, 10])\n        cylinder(h=4, d=2);\n    }\n    \n    // Side railing posts\n    for (y = [-15:5:15]) {\n        translate([0, y, 10])\n        cylinder(h=4, d=2);\n    }\n    \n    // Horizontal rails\n    color(\"silver\")\n    for (x = [5:10:55]) {\n        translate([x, 0, 12])\n        rotate([0, 90, 0])\n        cylinder(h=32, d=1);\n    }\n}\n\n// Roof details - solar panels and antenna\nmodule roof_details() {\n    // Solar panels on cabin roof\n    translate([20, -8, 14]) {\n        cube([15, 16, 0.5]);\n        // Panel grid lines\n        for (i = [0:3:15]) {\n            translate([i, 0, 0.5])\n            cube([0.5, 16, 0.5]);\n        }\n    }\n    \n    // Antenna mast\n    translate([60, 0, 12]) {\n        cylinder(h=8, d=1);\n        // Antenna crossbars\n        translate([0, -3, 4])\n        cube([1, 6, 0.5]);\n        translate([0, -3, 6])\n        cube([1, 6, 0.5]);\n    }\n}\n\n// Propeller and rudder\nmodule propulsion() {\n    // Propeller\n    translate([70, 0, 3]) {\n        rotate([0, 90, 0]) {\n            cylinder(h=4, d=2);\n            // Propeller blades\n            for (angle = [0:120:360]) {\n                rotate([0, 0, angle])\n                translate([2, 0, 0])\n                cube([4, 0.5, 1]);\n            }\n        }\n    }\n    \n    // Rudder\n    translate([72, 0, 2])\n    cube([3, 6, 4]);\n}\n\n// Anchor\nmodule anchor() {\n    translate([5, 10, 10]) {\n        // Anchor chain\n        for (i = [0:2:10]) {\n            translate([0, 0, -i])\n            rotate([0, 90, 0])\n            torus(1, 0.5);\n        }\n        \n        // Anchor body\n        translate([0, 0, -12])\n        rotate([0, 90, 0])\n        difference() {\n            cylinder(h=4, d=2);\n            // Anchor flukes\n            translate([0, -2, 0])\n            cube([4, 2, 1]);\n            translate([0, 2, 0])\n            cube([4, 2, 1]);\n        }\n    }\n}\n\n// Torus for anchor chain\nmodule torus(r1, r2) {\n    rotate_extrude()\n    translate([r1, 0, 0])\n    circle(r=r2);\n}\n\n// Assemble the houseboat\nscale([scale_factor, scale_factor, scale_factor]) {\n    union() {\n        // Main components\n        hull();\n        cabin();\n        railings();\n        roof_details();\n        propulsion();\n        anchor();\n        \n        // Deck surface\n        translate([0, 0, 10])\n        cube([70, 30, 0.5]);\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "steamboat",
    "openscad_code": "// Steamboat - OpenSCAD\n// Medium complexity realistic style\n\n// Parameters for scaling\nhull_length = 70;\nhull_width = 28;\nhull_height = 10;\ndeck_thickness = 2;\npaddle_diameter = 22;\npaddle_width = 5;\nchimney_diameter = 6;\nchimney_height = 18;\n\n// Hull with gentle slope\nmodule hull() {\n    difference() {\n        union() {\n            // Main hull body\n            hull_shape();\n            // Deck\n            translate([0, 0, hull_height]) \n                cube([hull_length, hull_width, deck_thickness], center=true);\n        }\n        // Hollow inside for 3D printing\n        translate([0, 0, 2]) \n            cube([hull_length-4, hull_width-4, hull_height], center=true);\n    }\n}\n\nmodule hull_shape() {\n    union() {\n        // Main hull body\n        scale([1, 0.8, 1])\n            cylinder(h=hull_height, d1=hull_width, d2=hull_width*0.8, center=true, $fn=40);\n        \n        // Bow\n        translate([hull_length/2 - 5, 0, 0])\n            sphere(d=hull_width*0.9, $fn=32);\n        \n        // Stern\n        translate([-hull_length/2 + 5, 0, 0])\n            sphere(d=hull_width*0.85, $fn=32);\n    }\n}\n\n// Paddlewheel assembly\nmodule paddlewheel() {\n    translate([-hull_length/4, 0, hull_height + deck_thickness + paddle_diameter/2]) {\n        rotate([0, 90, 0]) {\n            difference() {\n                // Paddle wheel cylinder\n                cylinder(h=paddle_width, d=paddle_diameter, center=true, $fn=60);\n                \n                // Spokes\n                for(i=[0:8]) {\n                    rotate([0, 0, i*45]) {\n                        translate([0, 0, -paddle_width/2 - 0.5]) \n                            cube([paddle_diameter*0.9, paddle_width*0.3, paddle_width + 1], center=true);\n                    }\n                }\n            }\n            \n            // Central hub\n            cylinder(h=paddle_width + 2, d=8, center=true, $fn=32);\n        }\n    }\n}\n\n// Chimney\nmodule chimney() {\n    translate([hull_length/3, 0, hull_height + deck_thickness]) {\n        // Base\n        cylinder(h=3, d=chimney_diameter + 4, center=false, $fn=32);\n        \n        // Chimney pipe\n        translate([0, 0, 3]) {\n            difference() {\n                cylinder(h=chimney_height, d=chimney_diameter, center=false, $fn=32);\n                // Hollow inside\n                translate([0, 0, 1]) \n                    cylinder(h=chimney_height - 1, d=chimney_diameter - 2, center=false, $fn=32);\n            }\n            \n            // Top rim\n            translate([0, 0, chimney_height]) \n                cylinder(h=2, d=chimney_diameter + 2, center=false, $fn=32);\n        }\n    }\n}\n\n// Cabin\nmodule cabin() {\n    translate([0, 0, hull_height + deck_thickness]) {\n        // Main cabin\n        cube([hull_length*0.6, hull_width*0.7, 15], center=true);\n        \n        // Roof\n        translate([0, 0, 15]) {\n            scale([1, 1.1, 0.3]) \n                sphere(d=hull_width*0.7, $fn=32);\n            translate([0, 0, -1]) \n                cube([hull_length*0.65, hull_width*0.75, 2], center=true);\n        }\n        \n        // Windows\n        for(i=[-1, 1]) {\n            translate([hull_length*0.2*i, hull_width*0.35, 8]) \n                cube([3, 0.5, 4], center=true);\n            translate([hull_length*0.2*i, -hull_width*0.35, 8]) \n                cube([3, 0.5, 4], center=true);\n        }\n    }\n}\n\n// Railings\nmodule railings() {\n    translate([0, 0, hull_height + deck_thickness + 1]) {\n        // Front railing\n        translate([hull_length*0.4, 0, 0]) {\n            for(i=[-hull_width/2+3:hull_width/2-3:5]) {\n                cylinder(h=8, d=1, center=false, $fn=8);\n                translate([0, i, 8]) \n                    cube([hull_length*0.3, 1, 1], center=true);\n            }\n        }\n        \n        // Side railings\n        for(side=[-1, 1]) {\n            translate([0, side*hull_width/2, 0]) {\n                for(j=[-hull_length/2+5:hull_length/2-5:8]) {\n                    translate([j, 0, 0]) \n                        cylinder(h=8, d=1, center=false, $fn=8);\n                }\n                translate([0, 0, 8]) \n                    cube([hull_length*0.8, 1, 1], center=true);\n            }\n        }\n    }\n}\n\n// Smokestack details\nmodule smokestack_details() {\n    translate([hull_length/3, 0, hull_height + deck_thickness + chimney_height + 3]) {\n        sphere(d=4, $fn=16);\n        translate([0, 0, 2]) \n            sphere(d=3, $fn=16);\n    }\n}\n\n// Main assembly\nunion() {\n    hull();\n    paddlewheel();\n    chimney();\n    cabin();\n    railings();\n    smokestack_details();\n}",
    "renders": true
  },
  {
    "vehicle": "paddlewheeler",
    "openscad_code": "// Paddlewheeler - Realistic Medium Complexity\n// Approx 75mm long, 3D printable\n\nhull_length = 60;\nhull_width = 25;\nhull_height = 12;\ndeck_height = 8;\npaddle_pos = -15;\npaddle_radius = 12;\npaddle_thickness = 4;\nchimney_height = 15;\nchimney_radius = 4;\n\n// Main hull with rounded bow\nmodule hull() {\n    union() {\n        // Main hull body\n        difference() {\n            hull_block();\n            // Taper bow\n            translate([hull_length/2-15, 0, 0])\n                rotate([0, 0, -10])\n                cube([hull_length, hull_width*2, hull_height*2], center=true);\n        }\n        \n        // Bow curve\n        translate([hull_length/2-5, 0, hull_height/2])\n            scale([1, 0.8, 0.8])\n            sphere(d=20, $fn=20);\n        \n        // Deck railings\n        for(x=[-20:10:20]) {\n            translate([x, hull_width/2+1, deck_height+1])\n                cylinder(h=2, d=1, $fn=8);\n            translate([x, -hull_width/2-1, deck_height+1])\n                cylinder(h=2, d=1, $fn=8);\n        }\n    }\n}\n\nmodule hull_block() {\n    difference() {\n        hull_shape();\n        // Interior cavity for weight reduction\n        translate([0, 0, -2])\n            scale([0.8, 0.8, 0.8])\n            hull_shape();\n    }\n}\n\nmodule hull_shape() {\n    minkowski() {\n        cube([hull_length, hull_width, hull_height], center=true);\n        sphere(d=6, $fn=12);\n    }\n}\n\n// Paddlewheel assembly\nmodule paddlewheel() {\n    rotate([90, 0, 0])\n    translate([paddle_pos, 0, deck_height-2]) {\n        // Wheel hub\n        cylinder(h=paddle_thickness, d=10, center=true, $fn=16);\n        \n        // Paddles\n        for(i=[0:15:345]) {\n            rotate([0, 0, i])\n            translate([paddle_radius-2, 0, 0]) {\n                // Paddle blade\n                cube([8, 2, paddle_thickness-1], center=true);\n                \n                // Support brace\n                translate([-4, 0, 0])\n                    cylinder(h=paddle_thickness-1, d=2, center=true, $fn=8);\n            }\n        }\n        \n        // Outer rim\n        cylinder(h=paddle_thickness+0.5, d=paddle_radius*2+2, center=true, $fn=32);\n    }\n}\n\n// Cabin structure\nmodule cabin() {\n    translate([-5, 0, deck_height]) {\n        difference() {\n            // Main cabin\n            cube([25, hull_width-6, 12], center=true);\n            \n            // Door\n            translate([10, 0, -5])\n                cube([4, 3, 6], center=true);\n            \n            // Windows\n            for(x=[-5:8:5]) {\n                translate([x, (hull_width-6)/2-1, 2])\n                    cube([4, 1, 3], center=true);\n                translate([x, -(hull_width-6)/2+1, 2])\n                    cube([4, 1, 3], center=true);\n            }\n        }\n        \n        // Roof\n        translate([0, 0, 7])\n            scale([1.1, 1.1, 0.5])\n            cube([25, hull_width-6, 2], center=true);\n    }\n}\n\n// Smokestacks\nmodule smokestacks() {\n    translate([-15, 0, deck_height]) {\n        difference() {\n            cylinder(h=chimney_height, r=chimney_radius, $fn=16);\n            // Hollow top\n            translate([0, 0, chimney_height-1])\n                cylinder(h=2, r=chimney_radius-1.5, $fn=16);\n        }\n        \n        // Second smaller stack\n        translate([5, 5, 0])\n            scale([0.7, 0.7, 0.8])\n            difference() {\n                cylinder(h=chimney_height-2, r=chimney_radius-1, $fn=16);\n                translate([0, 0, chimney_height-3])\n                    cylinder(h=2, r=chimney_radius-2.5, $fn=16);\n            }\n    }\n}\n\n// Main assembly\nunion() {\n    hull();\n    paddlewheel();\n    cabin();\n    smokestacks();\n    \n    // Deck details\n    translate([0, 0, deck_height]) {\n        // Life rings\n        color(\"red\")\n        translate([hull_length/2-10, hull_width/2+3, 2])\n            rotate([90, 0, 0])\n            cylinder(h=2, r1=3, r2=3, $fn=32);\n        \n        // Anchor\n        translate([-hull_length/2+5, 0, -1])\n            cube([2, 4, 2], center=true);\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "longboat",
    "openscad_code": "// Realistic Longboat – Medium Complexity\n// Approx. 80 mm long, 3 mm wall thickness for 3 D printing\n// No overhangs >45°, all surfaces printable\n\n$fn = 48;           // Good balance of smoothness vs file size\nwall = 3;           // Uniform wall thickness\n\nmodule hull() {\n    // Full length of the boat\n    length = 80;\n    beam   = 16;     // Max width at midship\n    depth  =  8;     // Max depth amidships\n\n    // Keel line – lower half of elongated ellipse\n    difference() {\n        scale([1, 0.5, 1])\n            cylinder(h = length, d = beam, center = true);\n        translate([0, 0, -length/2 - 1])\n            cube([beam*2, beam*2, length+2], center = true);\n    }\n\n    // Upper sheer line – same ellipse shifted up\n    translate([0, 0, depth])\n        scale([1, 0.5, 1])\n            cylinder(h = length, d = beam, center = true);\n}\n\nmodule hollow_hull() {\n    difference() {\n        hull();\n        translate([0, 0, -wall])  // Uniform wall thickness inside\n            scale([1 - 2*wall/beam, 0.5 - wall/beam, 1])\n                cylinder(h = 80 + 2*wall, d = beam, center = true);\n    }\n}\n\nmodule deck_planks() {\n    plank_w = 3;\n    plank_gap = 1;\n    n_planks = floor(16 / (plank_w + plank_gap));\n\n    for (i = [0 : n_planks-1]) {\n        translate([0, -8 + i*(plank_w + plank_gap) + plank_w/2, 8-0.5])\n            cube([76, plank_w, 1], center = true);\n    }\n}\n\nmodule mast() {\n    mast_h = 35;\n    mast_d = 2.5;\n\n    translate([20, 0, 8])\n        cylinder(h = mast_h, d = mast_d);\n    // Mast step reinforcement\n    translate([20, 0, 8])\n        cylinder(h = wall, d = mast_d + wall);\n}\n\nmodule benches() {\n    for (x = [-20 : 20 : 20]) {\n        translate([x, 0, 7])\n            cube([12, 10, 1], center = true);\n    }\n}\n\nmodule oars() {\n    oar_l = 25;\n    blade_w = 4;\n\n    for (side = [-1, 1]) {\n        translate([10*side, side*9, 10])\n            rotate([0, 90, 0])\n                union() {\n                    cylinder(h = oar_l, d = 1.2);\n                    translate([oar_l-3, 0, 0])\n                        rotate([0, 90, 0])\n                            scale([1, 0.3, 1])\n                                cylinder(h = blade_w, d = 8);\n                }\n    }\n}\n\nmodule stern_rudder() {\n    translate([-42, 0, 2])\n        rotate([0, 0, 0])\n            union() {\n                cube([wall, 3, 8], center = true);\n                translate([0, 0, -5])\n                    cube([wall, 6, 2], center = true);\n            }\n}\n\ndifference() {\n    union() {\n        hollow_hull();\n        deck_planks();\n        mast();\n        benches();\n        stern_rudder();\n    }\n    // Drain hole at bow for resin printing\n    translate([42, 0, 4])\n        rotate([0, 90, 0])\n            cylinder(h = wall+2, d = 3);\n}\n\n// Optional oars lying inside for transport\n// oars();",
    "renders": true
  },
  {
    "vehicle": "coracle",
    "openscad_code": "// Coracle - traditional round fishing boat\n// Medium complexity realistic style\n\n$fn = 36;  // Smooth curves for 3D printing\n\n// Overall dimensions\ncoracle_diameter = 80;\ncoracle_height = 25;\nwall_thickness = 2;\nfloor_thickness = 2;\n\nmodule coracle_body() {\n    // Main hull - inverted bowl shape with flat bottom\n    difference() {\n        // Outer shell\n        scale([1, 1, 0.7])\n        sphere(d = coracle_diameter);\n        \n        // Hollow interior\n        translate([0, 0, -wall_thickness])\n        scale([1, 1, 0.68])\n        sphere(d = coracle_diameter - 2*wall_thickness);\n        \n        // Flat bottom cut\n        translate([0, 0, -coracle_height/2])\n        cube([coracle_diameter, coracle_diameter, coracle_height], center=true);\n    }\n    \n    // Add floor\n    translate([0, 0, -coracle_height/2 + floor_thickness/2])\n    cylinder(h = floor_thickness, d = coracle_diameter - 2*wall_thickness, center=true);\n}\n\nmodule seat_supports() {\n    // Three radial seat supports\n    for(i = [0:120:359]) {\n        rotate([0, 0, i])\n        translate([0, (coracle_diameter - wall_thickness)/4, 0])\n        cube([wall_thickness*2, (coracle_diameter - wall_thickness)/2, wall_thickness*2], center=true);\n    }\n}\n\nmodule seat() {\n    // Circular seat\n    translate([0, 0, wall_thickness*2])\n    cylinder(h = wall_thickness, d = (coracle_diameter - wall_thickness)/2, center=true);\n}\n\nmodule lacing_holes() {\n    // Holes around rim for leather lacing\n    hole_diameter = 2;\n    rim_radius = coracle_diameter/2 - wall_thickness/2;\n    \n    for(i = [0:20:359]) {\n        rotate([0, 0, i])\n        translate([rim_radius, 0, coracle_height/2 - wall_thickness])\n        rotate([90, 0, 0])\n        cylinder(h = wall_thickness*2, d = hole_diameter, center=true);\n    }\n}\n\nmodule frame_reinforcement() {\n    // Internal wooden frame ribs\n    rib_height = coracle_height - wall_thickness*2;\n    \n    for(i = [0:45:359]) {\n        rotate([0, 0, i])\n        translate([0, 0, -rib_height/2])\n        cube([wall_thickness, coracle_diameter/2 - wall_thickness, rib_height], center=true);\n    }\n}\n\nmodule handles() {\n    // Two carrying handles\n    handle_width = 8;\n    handle_thickness = 2;\n    \n    // Handle 1\n    translate([coracle_diameter/2 - wall_thickness, 0, coracle_height/2 - wall_thickness])\n    rotate([0, 90, 0])\n    difference() {\n        cylinder(h = handle_width, d = handle_thickness*2);\n        cylinder(h = handle_width + 0.1, d = handle_thickness);\n    }\n    \n    // Handle 2\n    translate([-coracle_diameter/2 + wall_thickness, 0, coracle_height/2 - wall_thickness])\n    rotate([0, 90, 0])\n    difference() {\n        cylinder(h = handle_width, d = handle_thickness*2);\n        cylinder(h = handle_width + 0.1, d = handle_thickness);\n    }\n}\n\n// Assemble the coracle\nunion() {\n    coracle_body();\n    frame_reinforcement();\n    seat_supports();\n    seat();\n    lacing_holes();\n    handles();\n}",
    "renders": true
  },
  {
    "vehicle": "pram",
    "openscad_code": "// Realistic medium-complexity 3D-printable pram\n// Overall length ~80 mm, width ~40 mm, height ~65 mm\n\n$fn = 32;  // Smooth curves for 3D printing\n\n// Main assembly\npram();\n\nmodule pram() {\n    // Base frame\n    color(\"lightgray\") {\n        translate([0, 0, 10]) frame();\n    }\n\n    // Cabin / bassinet\n    color(\"beige\") {\n        translate([-5, 0, 25]) cabin();\n    }\n\n    // Wheels\n    color(\"black\") {\n        wheels();\n    }\n\n    // Handle\n    color(\"silver\")\n        translate([35, 0, 35]) handle();\n}\n\nmodule frame() {\n    // Bottom chassis rails\n    for (y = [-15, 15])\n        translate([0, y, 0])\n            cube([50, 4, 3], center = true);\n\n    // Front arch\n    translate([-20, 0, 2])\n        rotate([0, 90, 0])\n            cylinder(h = 30, r = 2);\n\n    // Rear arch\n    translate([20, 0, 2])\n        rotate([0, 90, 0])\n            cylinder(h = 30, r = 2);\n\n    // Upright posts at corners\n    for (x = [-20, 20])\n        for (y = [-15, 15])\n            translate([x, y, 8])\n                cylinder(h = 16, r = 1.5);\n}\n\nmodule cabin() {\n    difference() {\n        // Main hull\n        hull() {\n            translate([-10, -15, 0])\n                sphere(r = 7);\n            translate([-10, 15, 0])\n                sphere(r = 7);\n            translate([10, -15, 0])\n                sphere(r = 7);\n            translate([10, 15, 0])\n                sphere(r = 7);\n        }\n\n        // Interior cavity\n        translate([0, 0, -4])\n            scale([0.8, 0.8, 0.7])\n                hull() {\n                    translate([-10, -15, 0])\n                        sphere(r = 7);\n                    translate([-10, 15, 0])\n                        sphere(r = 7);\n                    translate([10, -15, 0])\n                        sphere(r = 7);\n                    translate([10, 15, 0])\n                        sphere(r = 7);\n                }\n\n        // Hood opening cut\n        translate([-14, 0, 8])\n            rotate([0, 30, 0])\n                cube([20, 35, 20], center = true);\n    }\n\n    // Hood\n    translate([-15, 0, 10])\n        rotate([0, 30, 0])\n            difference() {\n                scale([1, 1.2, 0.8])\n                    sphere(r = 12);\n                translate([0, 0, -8])\n                    cube([30, 40, 15], center = true);\n            }\n}\n\nmodule wheels() {\n    // Front axle\n    translate([-20, 0, 2])\n        rotate([90, 0, 0])\n            cylinder(h = 35, r = 1.5);\n\n    // Rear axle\n    translate([20, 0, 2])\n        rotate([90, 0, 0])\n            cylinder(h = 35, r = 1.5);\n\n    // Wheels on axles\n    for (x = [-20, 20])\n        for (y = [-17, 17]) {\n            translate([x, y, 0])\n                rotate([0, 0, 0])\n                    wheel();\n        }\n}\n\nmodule wheel() {\n    difference() {\n        // Tire\n        cylinder(h = 5, r = 8);\n\n        // Hub hole (for easy printing/assembly)\n        translate([0, 0, -1])\n            cylinder(h = 7, r = 2);\n    }\n\n    // Rim detail\n    translate([0, 0, 2.5])\n        cylinder(h = 0.5, r = 6);\n\n    // Spokes for strength\n    for (a = [0:60:300])\n        rotate([0, 0, a])\n            translate([3, 0, 2.5])\n                cube([6, 1, 0.5], center = true);\n}\n\nmodule handle() {\n    // Vertical posts\n    for (y = [-10, 10])\n        translate([0, y, 0])\n            cylinder(h = 25, r = 1.5);\n\n    // Horizontal bar\n    translate([0, 0, 25])\n        rotate([90, 0, 0])\n            cylinder(h = 22, r = 1.5);\n\n    // Grips\n    for (y = [-10, 10])\n        translate([0, y, 25])\n            sphere(r = 2);\n}",
    "renders": true
  },
  {
    "vehicle": "runabout",
    "openscad_code": "// OpenSCAD Runabout - Realistic Medium Detail\n// Overall size ~75 mm length\n\n$fn = 32;\n\n// Main dimensions\nhull_length = 75;\nhull_width = 30;\nhull_height = 12;\nnose_taper = 25;\n\nmodule hull() {\n    // Main hull body\n    difference() {\n        union() {\n            // Central body\n            cube([hull_length, hull_width, hull_height], center = true);\n            \n            // Tapered nose\n            translate([(hull_length - nose_taper)/2, 0, 0])\n                scale([1, 1, hull_height/hull_width])\n                sphere(d = hull_width);\n            \n            // Raised cockpit area\n            translate([0, 0, hull_height/2 + 2])\n                cube([hull_length*0.6, hull_width*0.8, 6], center = true);\n        }\n        \n        // Cockpit cutout\n        translate([0, 0, hull_height/2 + 4])\n            cube([hull_length*0.5, hull_width*0.6, 8], center = true);\n    }\n}\n\nmodule nacelles() {\n    // Port nacelle\n    translate([-hull_length*0.3, hull_width/2 + 10, 0])\n        rotate([0, 90, 0])\n        cylinder(h = 20, d1 = 10, d2 = 8);\n    \n    // Starboard nacelle\n    translate([-hull_length*0.3, -hull_width/2 - 10, 0])\n        rotate([0, 90, 0])\n        cylinder(h = 20, d1 = 10, d2 = 8);\n    \n    // Pylons\n    for (y = [hull_width/2 + 5, -hull_width/2 - 5]) {\n        translate([-hull_length*0.2, y, -2])\n            cube([5, 2, 4]);\n    }\n}\n\nmodule impulse_engine() {\n    // Rear impulse engine housing\n    translate([-hull_length/2 - 2, 0, 0])\n        cube([4, hull_width*0.7, 6], center = true);\n    \n    // Glow detail\n    translate([-hull_length/2 - 1, 0, 0])\n        color(\"red\")\n        cube([2, hull_width*0.5, 4], center = true);\n}\n\nmodule windows() {\n    // Cockpit windows\n    for (i = [-1, 0, 1]) {\n        translate([i * 10, hull_width/2 - 1, hull_height/2 + 5])\n            cube([6, 1, 3]);\n    }\n    \n    // Side windows\n    for (pos = [-20, -10, 0, 10, 20]) {\n        translate([pos, hull_width/2 - 1, 2])\n            cube([4, 1, 2]);\n    }\n}\n\nmodule landing_struts() {\n    // Front struts\n    for (x = [15, -15]) {\n        translate([x, hull_width/2 - 5, -hull_height/2 - 5])\n            cylinder(h = 5, d = 2);\n    }\n    \n    // Rear struts\n    for (x = [-25, -35]) {\n        translate([x, hull_width/2 - 5, -hull_height/2 - 5])\n            cylinder(h = 5, d = 2);\n    }\n    \n    // Mirror for other side\n    mirror([0, 1, 0]) {\n        // Front struts\n        for (x = [15, -15]) {\n            translate([x, hull_width/2 - 5, -hull_height/2 - 5])\n                cylinder(h = 5, d = 2);\n        }\n        \n        // Rear struts\n        for (x = [-25, -35]) {\n            translate([x, hull_width/2 - 5, -hull_height/2 - 5])\n                cylinder(h = 5, d = 2);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    hull();\n    nacelles();\n    impulse_engine();\n    windows();\n    landing_struts();\n}",
    "renders": true
  },
  {
    "vehicle": "jetboat",
    "openscad_code": "// Jetboat OpenSCAD Model\n// Realistic style, medium complexity\n\n// Overall dimensions (mm)\nhull_length = 80;\nhull_width = 30;\nhull_height = 12;\n\n// Wall thickness for 3D printing\nwall = 1.5;\n\nmodule hull() {\n    difference() {\n        // Main hull - tapered front with flat bottom\n        hull_shape();\n        \n        // Hollow out the hull\n        translate([wall, wall, wall])\n        scale([0.9, 0.8, 0.7])\n        hull_shape();\n    }\n}\n\nmodule hull_shape() {\n    // Create tapered hull using hull() of scaled cubes\n    hull() {\n        // Front point\n        translate([hull_length - 2, hull_width/2, hull_height/2])\n        scale([0.1, 0.1, 0.5])\n        sphere(d=10);\n        \n        // Rear\n        translate([0, hull_width/2, hull_height/2])\n        cube([5, hull_width, hull_height], center=false);\n    }\n    \n    // Add chine edges for planing surface\n    for(side = [-1, 1]) {\n        translate([10, side * hull_width/2, 0])\n        rotate([0, 0, side * -10])\n        cube([60, wall, hull_height]);\n    }\n}\n\nmodule deck() {\n    translate([0, 0, hull_height])\n    difference() {\n        // Main deck surface\n        cube([hull_length, hull_width, wall]);\n        \n        // Cockpit opening\n        translate([30, hull_width/2, -1])\n        cube([25, hull_width - 10, wall + 2]);\n    }\n}\n\nmodule windshield() {\n    // Wrap-around windshield\n    translate([40, hull_width/2, hull_height + wall])\n    rotate([15, 0, 0])\n    difference() {\n        // Main frame\n        cube([20, hull_width - 6, 8]);\n        \n        // Window openings\n        translate([2, 3, 2])\n        cube([16, hull_width - 12, 6]);\n    }\n}\n\nmodule jet_intake() {\n    // Intake grate at bottom rear\n    translate([5, hull_width/2, 0])\n    cube([10, hull_width - 4, wall]);\n    \n    // Intake tunnel\n    translate([8, hull_width/2, -wall])\n    cylinder(h=wall*2, d=hull_width/3);\n}\n\nmodule jet_nozzle() {\n    // Steering nozzle\n    translate([-5, hull_width/2, hull_height/2])\n    rotate([0, 90, 0])\n    cylinder(h=8, d1=6, d2=4);\n    \n    // Nozzle pivot\n    translate([-5, hull_width/2, hull_height/2])\n    sphere(d=4);\n}\n\nmodule seats() {\n    // Driver seat\n    translate([35, hull_width/2 - 8, hull_height + wall])\n    cube([8, 6, 4]);\n    \n    // Passenger seat\n    translate([35, hull_width/2 + 8, hull_height + wall])\n    cube([8, 6, 4]);\n}\n\nmodule engine_hatch() {\n    // Removable engine access\n    translate([15, hull_width/2 - 10, hull_height + wall])\n    cube([20, 20, wall]);\n}\n\nmodule grab_rails() {\n    // Side rails\n    for(side = [-1, 1]) {\n        translate([hull_length/2, side * hull_width/2, hull_height + wall])\n        rotate([90, 0, 0])\n        cylinder(h=20, d=1.5);\n    }\n}\n\n// Assembly\nhull();\ndeck();\nwindshield();\njet_intake();\njet_nozzle();\nseats();\nengine_hatch();\ngrab_rails();",
    "renders": true
  },
  {
    "vehicle": "rib",
    "openscad_code": "// Realistic 3D printable human rib (medium complexity)\n// Approximate length: 80 mm\n\nrib_height = 80;      // Total rib length\nrib_thickness = 3;    // Wall thickness for printing\nhead_diameter = 12;   // Rib head at vertebral end\nneck_length = 8;      // Neck between head and tubercle\ntubercle_size = 6;    // Tubercle at vertebral end\nshaft_width = 8;      // Shaft width at narrowest\nshaft_thick = 4;      // Shaft thickness\n\n// Main rib module\nmodule rib() {\n    // Vertebral end - head\n    translate([0, 0, 0])\n        sphere(d = head_diameter, $fn = 20);\n    \n    // Neck\n    translate([0, 0, -neck_length/2 - head_diameter/2])\n        cylinder(h = neck_length, d1 = head_diameter * 0.7, d2 = head_diameter * 0.5, $fn = 16);\n    \n    // Tubercle\n    translate([tubercle_size/2 + 2, 0, -neck_length - head_diameter/2])\n        sphere(d = tubercle_size, $fn = 16);\n    \n    // Main shaft - curved\n    difference() {\n        // Outer shaft\n        union() {\n            for(i = [0:5:75]) {\n                angle = i * 1.2;\n                radius = 35 - i * 0.3;\n                x = cos(angle) * radius;\n                y = sin(angle) * radius;\n                z = -i - head_diameter/2 - neck_length;\n                \n                translate([x, y, z])\n                    rotate([0, 0, angle * 57.3])\n                    scale([1 - i/150, 1, 1])\n                    cube([shaft_width, shaft_thick, 5], center = true);\n            }\n        }\n        \n        // Inner hollow\n        union() {\n            for(i = [0:5:75]) {\n                angle = i * 1.2;\n                radius = 35 - i * 0.3;\n                x = cos(angle) * radius;\n                y = sin(angle) * radius;\n                z = -i - head_diameter/2 - neck_length;\n                \n                translate([x, y, z])\n                    rotate([0, 0, angle * 57.3])\n                    scale([1 - i/150 - 0.2, 1 - 0.2, 1])\n                    cube([shaft_width - rib_thickness*2, shaft_thick - rib_thickness*2, 6], center = true);\n            }\n        }\n    }\n    \n    // Costal groove (bottom of shaft)\n    for(i = [20:5:70]) {\n        angle = i * 1.2;\n        radius = 35 - i * 0.3;\n        x = cos(angle) * radius;\n        y = sin(angle) * radius - shaft_thick/2 - 0.5;\n        z = -i - head_diameter/2 - neck_length;\n        \n        translate([x, y, z])\n            rotate([0, 0, angle * 57.3])\n            cube([shaft_width * 0.6, 1, 6], center = true);\n    }\n    \n    // Sternum end - flattened\n    translate([cos(90) * 15, sin(90) * 15, -75 - head_diameter/2 - neck_length])\n        rotate([0, 0, 90 * 57.3])\n        scale([1.5, 0.7, 1])\n        cube([shaft_width * 1.2, shaft_thick, 5], center = true);\n}\n\n// Generate the rib\nrib();",
    "renders": true
  },
  {
    "vehicle": "rigidinflatable",
    "openscad_code": "// Rigid-Inflatable Boat (RIB) – 1:30 scale, 3D-printable, medium detail\n// Overall length ≈ 85 mm, beam ≈ 30 mm, printable without supports\n\n$fn = 32;                // Smooth curves\nhull_thk = 1.2;          // Wall thickness for FDM printing\nscale_factor = 1;\n\nmodule tube_profile(r, l) {\n    // Inflatable tube cross-section (hollow torus segment)\n    difference() {\n        translate([0, 0, -r]) cylinder(h = l, r = r, center = true);\n        translate([0, 0, -r + hull_thk]) cylinder(h = l + 0.1, r = r - hull_thk, center = true);\n    }\n}\n\nmodule tube_half(length, r, sweep) {\n    // One continuous tube following a gentle arc\n    for (i = [0 : sweep])\n        translate([i * length / sweep, 0, -r * sin(i * 180 / sweep)])\n            rotate([0, 90, 0])\n                tube_profile(r, length / sweep + 0.2);\n}\n\nmodule hull_bottom() {\n    // V-shaped rigid hull bottom\n    difference() {\n        hull() {\n            translate([-42, 0, -3]) cube([84, 30, 6], center = true);\n            translate([-42, 0, -8]) cube([84, 26, 6], center = true);\n        }\n        translate([0, 0, 1]) cube([100, 40, 10], center = true);\n    }\n}\n\nmodule deck() {\n    // Flat deck with non-slip texture (simple ribs)\n    difference() {\n        translate([0, 0, 0]) cube([70, 28, hull_thk], center = true);\n        for (x = [-30 : 10 : 30])\n            translate([x, 0, -0.1]) cube([2, 28, hull_thk + 0.2], center = true);\n    }\n}\n\nmodule bench() {\n    // Simple driver bench\n    translate([-10, 0, hull_thk])\n        cube([20, 20, 3], center = true);\n}\n\nmodule engine_block() {\n    // Outboard motor silhouette\n    translate([38, 0, 2]) {\n        union() {\n            cube([10, 8, 6], center = true);\n            translate([5, 0, 3]) cube([4, 4, 4], center = true);\n        }\n    }\n}\n\nmodule lifeline() {\n    // Safety rope along tubes\n    color(\"white\")\n    for (t = [0, 1]) {\n        mirror([0, t ? 1 : 0, 0])\n            translate([0, 13.5, 2])\n                rotate([90, 0, 0])\n                    cylinder(h = 80, r = 0.6, center = false);\n    }\n}\n\nmodule rib_assembly() {\n    union() {\n        hull_bottom();\n        tube_half(80, 7.5, 20);\n        mirror([0, 1, 0]) tube_half(80, 7.5, 20);\n        deck();\n        bench();\n        engine_block();\n        lifeline();\n    }\n}\n\nscale([scale_factor, scale_factor, scale_factor])\n    rib_assembly();",
    "renders": true
  },
  {
    "vehicle": "outrigger",
    "openscad_code": "// Realistic Medium-Complexity Outrigger for 3D printing\n// Overall length ~80 mm, width ~60 mm\n\nmodule outrigger_assembly() {\n    // Main hull body\n    difference() {\n        hull_body();\n        // Drain hole\n        translate([0, 0, -1])\n            cylinder(h=12, d=4, $fn=20);\n    }\n\n    // Cross arms\n    cross_arms();\n\n    // Floats\n    float(-45, 0, 0);\n    float(45, 0, 0);\n}\n\nmodule hull_body() {\n    // Base hull shape\n    difference() {\n        union() {\n            // Central hull\n            translate([0, 0, 5])\n                scale([1, 0.6, 0.4])\n                    sphere(d=20, $fn=40);\n            // Hull extension\n            translate([0, 0, 0])\n                cube([35, 12, 10], center=true);\n        }\n        // Cockpit cavity\n        translate([0, 0, 7])\n            cube([25, 8, 4], center=true);\n    }\n\n    // Deck details\n    for (i = [-12:6:12]) {\n        translate([i, 0, 10])\n            cube([3, 8, 1], center=true);\n    }\n}\n\nmodule cross_arms() {\n    // Main cross beam\n    translate([0, 0, 8])\n        rotate([0, 90, 0])\n            cylinder(h=100, d=6, $fn=20);\n\n    // Support braces\n    for (side = [-1, 1]) {\n        translate([side * 35, 0, 5])\n            rotate([0, 45 * side, 0])\n                cylinder(h=20, d1=6, d2=4, $fn=20);\n    }\n}\n\nmodule float(x, y, z) {\n    translate([x, y, z]) {\n        // Main float body\n        difference() {\n            scale([0.3, 0.15, 0.15])\n                sphere(d=35, $fn=30);\n            // Water channel\n            translate([0, 0, -3])\n                cube([20, 2, 6], center=true);\n        }\n\n        // End caps\n        translate([0, 0, 0]) {\n            // Front cap\n            translate([10, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h=3, d1=5, d2=0, $fn=20);\n            // Rear cap\n            translate([-10, 0, 0])\n                rotate([0, -90, 0])\n                    cylinder(h=3, d1=5, d2=0, $fn=20);\n        }\n\n        // Connection point\n        translate([0, 0, 5])\n            cylinder(h=8, d=4, $fn=16);\n    }\n}\n\n// Render the model\noutrigger_assembly();",
    "renders": true
  },
  {
    "vehicle": "proa",
    "openscad_code": "// Proa model for 3D printing\n// Medium complexity realistic style\n\n// Overall dimensions\nhull_length = 80;\nhull_width = 15;\nhull_height = 8;\nama_length = 60;\nama_width = 10;\nama_height = 6;\naka_length = 40;\naka_width = 4;\naka_height = 4;\nmast_height = 35;\nmast_diameter = 3;\n\n// Hull module - main vaka\nmodule main_hull() {\n    difference() {\n        // Main hull body\n        hull_shape();\n        \n        // Cockpit cutout\n        translate([0, 0, -1])\n            cube([30, 10, hull_height + 2], center = true);\n    }\n}\n\n// Create the curved hull shape\nmodule hull_shape() {\n    hull() {\n        // Bow\n        translate([hull_length/2 - 5, 0, 0])\n            sphere(d = hull_width);\n        \n        // Stern\n        translate([-hull_length/2 + 5, 0, 0])\n            sphere(d = hull_width * 0.8);\n            \n        // Mid sections\n        for (i = [-hull_length/2 + 10:10:hull_length/2 - 10]) {\n            translate([i, 0, 0])\n                sphere(d = hull_width * 0.9);\n        }\n    }\n    \n    // Flat deck\n    translate([0, 0, hull_height/2])\n        cube([hull_length, hull_width * 0.9, hull_height/2], center = true);\n}\n\n// Ama (outrigger)\nmodule outrigger() {\n    translate([0, -25, 0])\n        rotate([0, 0, 0])\n            difference() {\n                hull() {\n                    // Ama shape\n                    for (i = [-ama_length/2 + 5:10:ama_length/2 - 5]) {\n                        translate([i, 0, 0])\n                            sphere(d = ama_width);\n                    }\n                }\n                // Flat top\n                translate([0, 0, ama_height/2])\n                    cube([ama_length + 10, ama_width * 0.8, ama_height], center = true);\n            }\n}\n\n// Aka (crossbeam)\nmodule crossbeam() {\n    translate([0, -12.5, 0])\n        cube([aka_length, aka_width, aka_height], center = true);\n}\n\n// Mast\nmodule mast() {\n    translate([-5, 0, 0])\n        cylinder(h = mast_height, d = mast_diameter, $fn = 16);\n}\n\n// Boom\nmodule boom() {\n    rotate([90, 0, 0])\n        translate([0, 0, mast_height/2])\n            cylinder(h = 25, d = 2, center = true, $fn = 8);\n}\n\n// Rigging lines\nmodule rigging() {\n    // Fore stay\n    color(\"gray\")\n        translate([-5, 0, mast_height])\n            cylinder(h = 35, d = 0.5, center = false, $fn = 4);\n    \n    // Shroud lines\n    for (angle = [45, 135]) {\n        rotate([0, 0, angle])\n            translate([-5, 0, mast_height * 0.8])\n                cylinder(h = 20, d = 0.5, center = false, $fn = 4);\n    }\n}\n\n// Assembly\nunion() {\n    // Main hull\n    main_hull();\n    \n    // Outrigger assembly\n    union() {\n        outrigger();\n        crossbeam();\n    }\n    \n    // Mast and rigging\n    union() {\n        mast();\n        boom();\n        rigging();\n    }\n    \n    // Deck details\n    translate([0, 0, hull_height/2 + 0.5])\n        cube([hull_length - 10, hull_width - 4, 1], center = true);\n    \n    // Bow eye\n    translate([hull_length/2, 0, 0])\n        rotate([90, 0, 0])\n            cylinder(h = 2, d = 3, $fn = 16);\n}",
    "renders": true
  },
  {
    "vehicle": "waka",
    "openscad_code": "// Waka (Māori canoe) - Realistic style, medium complexity\n// Dimensions: ~90mm long, 25mm wide, 20mm tall\n\nmodule waka_hull() {\n    // Main hull as elongated ellipsoid\n    difference() {\n        scale([1, 0.6, 0.4]) \n            sphere(d=25, $fn=64);\n        \n        // Cut bottom flat\n        translate([0, 0, -6])\n            cube([30, 30, 12], center=true);\n        \n        // Hollow interior\n        scale([0.85, 0.5, 0.3]) \n            sphere(d=24.5, $fn=64);\n    }\n}\n\nmodule prow() {\n    // Curved prow piece\n    translate([11, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h=8, r1=5, r2=3, $fn=32);\n    \n    // Prow extension\n    translate([13, 0, 2])\n        scale([1.5, 0.5, 0.3])\n            sphere(d=6, $fn=32);\n}\n\nmodule stern() {\n    // Stern post\n    translate([-11, 0, 0])\n        rotate([0, -90, 0])\n            cylinder(h=6, r1=4, r2=2, $fn=32);\n}\n\nmodule gunwales() {\n    // Left gunwale\n    translate([0, 7.5, 0])\n        cube([20, 1, 3], center=true);\n    \n    // Right gunwale\n    translate([0, -7.5, 0])\n        cube([20, 1, 3], center=true);\n}\n\nmodule thwarts() {\n    // Cross beams/seats\n    for(i = [-7:5:7]) {\n        translate([i, 0, 1])\n            cube([2, 14, 0.5], center=true);\n    }\n}\n\nmodule tauihu() {\n    // Ornate prow figurehead\n    translate([14, 0, 5])\n        rotate([0, -15, 0])\n            scale([0.5, 0.3, 1])\n                sphere(d=4, $fn=16);\n    \n    // Carved spiral details\n    rotate([90, 0, 0])\n    for(a = [0:30:330]) {\n        rotate([0, 0, a])\n            translate([14, 0, 5.5])\n                cylinder(h=0.5, r=0.5, $fn=8);\n    }\n}\n\nmodule taurapa() {\n    // Stern post with carving\n    translate([-13, 0, 4])\n        rotate([0, 15, 0])\n            scale([0.4, 0.3, 2])\n                sphere(d=3, $fn=16);\n}\n\nmodule outrigger_supports() {\n    // Left support beams\n    translate([5, 10, 0])\n        cube([2, 8, 0.5], center=true);\n    \n    translate([-5, 10, 0])\n        cube([2, 8, 0.5], center=true);\n    \n    // Right support beams\n    mirror([0, 1, 0]) {\n        translate([5, 10, 0])\n            cube([2, 8, 0.5], center=true);\n        \n        translate([-5, 10, 0])\n            cube([2, 8, 0.5], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main hull structure\n    waka_hull();\n    \n    // Structural elements\n    gunwales();\n    thwarts();\n    \n    // Prow and stern\n    prow();\n    stern();\n    \n    // Decorative elements\n    tauihu();\n    taurapa();\n    \n    // Outrigger supports (optional for stability)\n    outrigger_supports();\n}\n\n// Scale to printable size\nscale([3.6, 3.6, 3.6]) children();",
    "renders": true
  },
  {
    "vehicle": "galley",
    "openscad_code": "// Realistic Galley - Medium Complexity\n// Hull, deck, mast, oars, and basic superstructure\n\n// Parameters\nhull_len = 80;\nhull_wid = 20;\nhull_hgt = 8;\ndeck_thk = 1.5;\nmast_len = 40;\n\n// Hull module with curved bottom and sides\nmodule hull() {\n    difference() {\n        // Main hull block\n        hull_block();\n        \n        // Carve out interior\n        translate([5, 0, -hull_hgt/2 + 1])\n            scale([0.9, 0.85, 0.9])\n                hull_block();\n    }\n}\n\n// Helper for hull shape\nmodule hull_block() {\n    hull_half();\n    mirror([0,1,0]) hull_half();\n}\n\nmodule hull_half() {\n    for (i = [0:5:80]) {\n        // Tapered hull shape\n        w = hull_wid/2 * (1 - i/hull_len * 0.7);\n        h = hull_hgt * (1 - pow(i/hull_len - 0.5, 2) * 4);\n        translate([i - hull_len/2, 0, -h/2])\n            scale([5, w, h])\n                sphere(1, $fn=8);\n    }\n}\n\n// Deck with rowing benches\nmodule deck() {\n    translate([0, 0, hull_hgt/2 - deck_thk/2])\n        cube([hull_len, hull_wid, deck_thk], center=true);\n    \n    // Rowing benches\n    for (x = [-25:10:25]) {\n        translate([x, 0, hull_hgt/2 + deck_thk/2 + 1])\n            cube([8, hull_wid - 4, 2], center=true);\n    }\n}\n\n// Single oar\nmodule oar(len = 25) {\n    union() {\n        // Handle\n        cylinder(h=len, r=0.5, center=true);\n        \n        // Blade\n        translate([0, 0, len/2 + 3])\n            scale([0.2, 3, 1])\n                sphere(3, $fn=16);\n    }\n}\n\n// Mast with cross spar\nmodule mast() {\n    translate([0, 0, hull_hgt/2 + deck_thk/2 + mast_len/2])\n        cylinder(h=mast_len, r=1.5, center=true);\n    \n    // Cross spar\n    translate([0, 0, hull_hgt/2 + deck_thk/2 + mast_len - 10])\n        rotate([90, 0, 0])\n            cylinder(h=30, r=0.8, center=true);\n}\n\n// Cabin at rear\nmodule cabin() {\n    translate([-hull_len/2 + 10, 0, hull_hgt/2 + deck_thk/2 + 4])\n        cube([15, hull_wid - 4, 8], center=true);\n    \n    // Roof\n    translate([-hull_len/2 + 10, 0, hull_hgt/2 + deck_thk/2 + 8 + 1.5])\n        cube([15, hull_wid - 4, 3], center=true);\n}\n\n// Bow decoration\nmodule bow() {\n    translate([hull_len/2 - 3, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h=6, r1=3, r2=0, center=true);\n}\n\n// Assembly\nunion() {\n    hull();\n    deck();\n    mast();\n    cabin();\n    bow();\n    \n    // Oars positioned along sides\n    for (x = [-30:10:30]) {\n        translate([x, hull_wid/2 + 2, hull_hgt/2 + deck_thk/2 + 3])\n            rotate([90, 0, 0])\n                oar();\n        translate([x, -hull_wid/2 - 2, hull_hgt/2 + deck_thk/2 + 3])\n            rotate([90, 0, 180])\n                oar();\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "cutter",
    "openscad_code": "// OpenSCAD Cookie Cutter – realistic, medium complexity\n// Approx. 70 mm tall, 60 mm wide – printable without supports\n// Wall thickness 1.2 mm, all outer edges chamfered\n\n// Parameters\ncutter_height = 20;      // vertical cutting wall\nhandle_height = 50;\nhandle_d = 20;\nwall = 1.2;              // shell thickness\nchamfer = 1.5;           // top edge bevel\nbody_d = 60;             // outer cutter diameter\ngrip_ridges = 8;         // grip rings on handle\nridge_depth = 0.5;\n\n// Main cutter body\ndifference() {\n    // Outer cylindrical wall\n    cylinder(h = cutter_height, d = body_d, $fn = 64);\n    // Hollow inside\n    translate([0, 0, -0.1])\n        cylinder(h = cutter_height + 0.2, d = body_d - 2*wall, $fn = 64);\n    // Top chamfer\n    translate([0, 0, cutter_height - chamfer])\n        cylinder(h = chamfer + 0.1, d1 = body_d - 2*wall, d2 = body_d, $fn = 64);\n}\n\n// Handle\nunion() {\n    // Handle shaft\n    translate([0, 0, cutter_height])\n        cylinder(h = handle_height, d = handle_d, $fn = 48);\n\n    // Grip ridges\n    for (i = [0 : grip_ridges - 1]) {\n        z = cutter_height + (i + 1)*(handle_height / (grip_ridges + 1));\n        translate([0, 0, z])\n            difference() {\n                cylinder(h = 2, d = handle_d + 2*ridge_depth, $fn = 48);\n                cylinder(h = 2.2, d = handle_d, $fn = 48);\n            }\n    }\n\n    // Top cap with rounded edge\n    translate([0, 0, cutter_height + handle_height])\n        union() {\n            cylinder(h = 4, d = handle_d + 2, $fn = 48);\n            translate([0, 0, 2])\n                sphere(d = handle_d + 2, $fn = 48);\n            translate([0, 0, 2])\n                cylinder(h = 2, d = handle_d, $fn = 48);\n        }\n}",
    "renders": true
  },
  {
    "vehicle": "brig",
    "openscad_code": "// Realistic Brig (Medium complexity, 3D-printable)\n// A brig is a two-masted, square-rigged sailing ship (prison hulk variant)\n\n// Overall scale\nscale = 1;\n\n// Hull dimensions\nhull_length = 80 * scale;\nhull_width = 25 * scale;\nhull_height = 12 * scale;\n\n// Bow & stern\nbow_height_add = 8 * scale;\nstern_height_add = 6 * scale;\n\n// Mast & spars\nmast_diam = 2.4 * scale;\nmast_height = 50 * scale;\nboom_length = 35 * scale;\ngaff_length = 25 * scale;\n\n// Wall thickness for printability\nwall = 1.2 * scale;\n\n// Simple rounded bilge hull module\nmodule hull_block() {\n    difference() {\n        union() {\n            // Main hull body\n            hull_profile();\n            // Bow with added height\n            translate([hull_length/2 - hull_width/2, 0, 0])\n                scale([1, 1, 1 + bow_height_add/hull_height])\n                    hull_profile();\n            // Stern with added height\n            translate([-hull_length/2 + hull_width/2, 0, 0])\n                scale([1, 1, 1 + stern_height_add/hull_height])\n                    hull_profile();\n        }\n        // Carve out interior for printability\n        offset_hull = 3 * wall;\n        translate([0, 0, hull_height/2 + offset_hull/2])\n            cube([hull_length - offset_hull, hull_width - offset_hull, hull_height + offset_hull], center = true);\n    }\n}\n\n// Single \"slice\" of hull used for shaping\nmodule hull_profile() {\n    translate([0, 0, hull_height/2])\n        scale([1, 0.8, 1])\n            cube([hull_length, hull_width, hull_height], center = true);\n}\n\n// Deck surface with gunports\nmodule deck() {\n    difference() {\n        // Main deck plate\n        translate([0, 0, hull_height])\n            cube([hull_length - wall*2, hull_width - wall*2, wall], center = true);\n        // Hatch openings\n        for (x = [-hull_length/4, hull_length/4])\n            translate([x, 0, hull_height + wall/2])\n                cube([6 * scale, 10 * scale, wall + 0.1], center = true);\n    }\n}\n\n// Mast with square topsail yard\nmodule mast_and_spars(x_pos) {\n    // Mast\n    translate([x_pos, 0, 0])\n        cylinder(h = mast_height, d = mast_diam, $fn = 12);\n    // Lower yard\n    translate([x_pos, 0, mast_height * 0.55])\n        rotate([90, 0, 0])\n            cylinder(h = boom_length, d = mast_diam * 0.8, center = true, $fn = 8);\n    // Topsail yard\n    translate([x_pos, 0, mast_height * 0.75])\n        rotate([90, 0, 0])\n            cylinder(h = boom_length * 0.7, d = mast_diam * 0.7, center = true, $fn = 8);\n    // Gaff\n    translate([x_pos, 0, mast_height * 0.85])\n        rotate([90, 0, 45])\n            cylinder(h = gaff_length, d = mast_diam * 0.6, center = true, $fn = 8);\n}\n\n// Simple cabin aft\nmodule cabin() {\n    translate([-hull_length/2 + 5 * scale, 0, hull_height + wall])\n        cube([10 * scale, hull_width * 0.7, 8 * scale], center = true);\n}\n\n// Rail & stanchions\nmodule rail() {\n    stanchion_d = 1 * scale;\n    stanchion_h = 3 * scale;\n    count = 8;\n    step = (hull_length - 20 * scale) / (count - 1);\n    for (i = [0 : count - 1]) {\n        x = -hull_length/2 + 10 * scale + i * step;\n        translate([x, hull_width/2 - wall, hull_height + wall/2])\n            cylinder(h = stanchion_h, d = stanchion_d, $fn = 8);\n        translate([x, -hull_width/2 + wall, hull_height + wall/2])\n            cylinder(h = stanchion_h, d = stanchion_d, $fn = 8);\n    }\n    // Top rail\n    translate([0, hull_width/2 - wall, hull_height + wall/2 + stanchion_h - wall/2])\n        cube([hull_length - 10 * scale, wall, wall], center = true);\n    translate([0, -hull_width/2 + wall, hull_height + wall/2 + stanchion_h - wall/2])\n        cube([hull_length - 10 * scale, wall, wall], center = true);\n}\n\n// Anchor on bow\nmodule anchor() {\n    translate([hull_length/2 - 3 * scale, 0, hull_height/2])\n        union() {\n            // Shank\n            rotate([90, 0, 0])\n                cylinder(h = 5 * scale, d = 1 * scale, $fn = 8);\n            // Arms\n            for (a = [-30, 30])\n                rotate([0, 0, a])\n                    translate([1.5 * scale, 0, 2 * scale])\n                        rotate([90, 0, 0])\n                            cylinder(h = 4 * scale, d = 0.8 * scale, $fn = 6);\n        }\n}\n\nmodule brig() {\n    hull_block();\n    deck();\n    cabin();\n    rail();\n    // Two masts\n    mast_and_spars(hull_length * 0.25);\n    mast_and_spars(-hull_length * 0.25);\n    anchor();\n}\n\n// Render the brig\nbrig();",
    "renders": true
  },
  {
    "vehicle": "brigantine",
    "openscad_code": "// Brigantine - Medium Complexity, Realistic Style\n// Approx. 80 mm long, 30 mm wide, 60 mm tall\n\nhull_length = 80;\nhull_width = 25;\nhull_height = 15;\n\nmodule hull()\n{\n    difference()\n    {\n        // Main hull shape\n        hull_points = [\n            [-hull_length/2, 0, 0],\n            [ hull_length/2, 0, 0],\n            [-hull_length/2+10, hull_width/2, 0],\n            [-hull_length/2+10, -hull_width/2, 0],\n            [ hull_length/2-15, hull_width/2-5, 0],\n            [ hull_length/2-15, -hull_width/2+5, 0],\n            [-hull_length/2+5, 0, hull_height],\n            [ hull_length/2-20, 0, hull_height-5],\n            [-hull_length/2+10, hull_width/2-2, hull_height-2],\n            [-hull_length/2+10, -hull_width/2+2, hull_height-2],\n            [ hull_length/2-25, hull_width/2-7, hull_height-7],\n            [ hull_length/2-25, -hull_width/2+7, hull_height-7]\n        ];\n        \n        hull_faces = [\n            [0,2,4,1],\n            [0,1,5,3],\n            [2,8,10,4],\n            [3,5,11,9],\n            [0,3,9,2,8,6],\n            [1,4,10,5,11,7],\n            [6,8,10,7],\n            [6,7,11,9]\n        ];\n        \n        polyhedron(hull_points, hull_faces, convexity=10);\n        \n        // Hollow out interior\n        translate([0,0,2])\n        scale([0.8,0.8,0.8])\n        polyhedron(hull_points, hull_faces, convexity=10);\n    }\n}\n\nmodule deck()\n{\n    // Main deck\n    translate([0,0,hull_height-1])\n    cube([hull_length-30, hull_width-4, 2], center=true);\n    \n    // Forecastle\n    translate([-hull_length/2+15, 0, hull_height])\n    cube([20, hull_width-6, 4], center=true);\n    \n    // Quarterdeck\n    translate([hull_length/2-15, 0, hull_height])\n    cube([20, hull_width-6, 6], center=true);\n}\n\nmodule masts()\n{\n    // Main mast (lower)\n    translate([-5, 0, hull_height])\n    cylinder(h=45, d1=3, d2=2, $fn=8);\n    \n    // Fore mast\n    translate([-25, 0, hull_height])\n    cylinder(h=35, d1=2.5, d2=1.5, $fn=8);\n    \n    // Bowsprit\n    translate([-hull_length/2+5, 0, hull_height-5])\n    rotate([0,30,0])\n    cylinder(h=20, d=2, $fn=8);\n}\n\nmodule yards()\n{\n    // Main yard\n    translate([-5, 0, hull_height+25])\n    rotate([0,90,0])\n    cube([30, 1.5, 1.5], center=true);\n    \n    // Fore yard\n    translate([-25, 0, hull_height+20])\n    rotate([0,90,0])\n    cube([25, 1.5, 1.5], center=true);\n    \n    // Topsail yard on main\n    translate([-5, 0, hull_height+35])\n    rotate([0,90,0])\n    cube([20, 1.2, 1.2], center=true);\n}\n\nmodule sails()\n{\n    // Main course sail\n    translate([-5, 0, hull_height+15])\n    cube([28, 0.5, 20], center=true);\n    \n    // Fore course sail\n    translate([-25, 0, hull_height+12])\n    cube([22, 0.5, 16], center=true);\n    \n    // Main topsail\n    translate([-5, 0, hull_height+30])\n    cube([18, 0.5, 12], center=true);\n}\n\nmodule rigging()\n{\n    // Shrouds - simplified as thin cylinders\n    for(side = [-1, 1])\n    {\n        // Main mast shrouds\n        for(i = [-1:1])\n        {\n            translate([-5, side*(hull_width/2-2), hull_height+5+i*10])\n            cylinder(h=20, d=0.5, $fn=4);\n        }\n        \n        // Fore mast shrouds\n        for(i = [-1:1])\n        {\n            translate([-25, side*(hull_width/2-2), hull_height+5+i*8])\n            cylinder(h=15, d=0.5, $fn=4);\n        }\n    }\n}\n\nmodule cannons()\n{\n    // Port side cannons\n    for(pos = [-30:15:20])\n    {\n        translate([pos, hull_width/2-1, hull_height/2])\n        rotate([0,90,0])\n        cylinder(h=4, d=1.5, $fn=8);\n    }\n    \n    // Starboard cannons\n    for(pos = [-30:15:20])\n    {\n        translate([pos, -hull_width/2+1, hull_height/2])\n        rotate([0,90,0])\n        cylinder(h=4, d=1.5, $fn=8);\n    }\n}\n\nmodule details()\n{\n    // Wheel\n    translate([hull_length/2-10, 0, hull_height+6])\n    cylinder(h=2, d=4, $fn=16);\n    \n    // Anchor\n    translate([-hull_length/2+5, 0, hull_height-3])\n    cube([3, 2, 6]);\n    \n    // Railings\n    for(side = [-1, 1])\n    {\n        translate([0, side*(hull_width/2-1), hull_height+1])\n        cube([hull_length-30, 0.5, 3], center=true);\n    }\n}\n\nunion()\n{\n    hull();\n    deck();\n    masts();\n    yards();\n    sails();\n    rigging();\n    cannons();\n    details();\n}",
    "renders": true
  },
  {
    "vehicle": "barque",
    "openscad_code": "// Barque - Medium complexity realistic style\n// Approx 80mm long, 3D printable with no overhangs\n\nhull_length = 80;\nhull_width = 20;\nhull_height = 10;\ndeck_thickness = 2;\n\nmodule hull() {\n    difference() {\n        // Main hull shape\n        hull_shape();\n        \n        // Hollow out interior\n        translate([0, 0, -1])\n            scale([0.8, 0.8, 0.7])\n                hull_shape();\n    }\n}\n\nmodule hull_shape() {\n    // Create curved hull using cylinders\n    for(i = [0:4]) {\n        translate([i * hull_length/5 - hull_length/2, 0, 0])\n            rotate([90, 0, 0])\n                cylinder(h = hull_width/2 - i*1.5, d = hull_height*2 - i*2, $fn = 20);\n    }\n    \n    // Add pointed bow\n    translate([hull_length/2, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h = hull_height, d1 = hull_width, d2 = 0, $fn = 20);\n}\n\nmodule deck() {\n    translate([0, 0, hull_height])\n        cube([hull_length, hull_width, deck_thickness], center = true);\n}\n\nmodule forecastle() {\n    translate([-hull_length/3, 0, hull_height + deck_thickness])\n        cube([15, hull_width - 4, 8], center = true);\n}\n\nmodule quarterdeck() {\n    translate([hull_length/3, 0, hull_height + deck_thickness])\n        cube([20, hull_width - 2, 6], center = true);\n}\n\nmodule mast(base_x, base_y, height, diameter) {\n    // Mast\n    translate([base_x, base_y, hull_height + deck_thickness])\n        cylinder(h = height, d = diameter, $fn = 12);\n    \n    // Base reinforcement\n    translate([base_x, base_y, hull_height + deck_thickness])\n        cylinder(h = 3, d = diameter + 2, $fn = 12);\n}\n\nmodule yard(mast_x, mast_y, mast_height, yard_length, angle) {\n    translate([mast_x, mast_y, hull_height + deck_thickness + mast_height - 5])\n        rotate([0, angle, 0])\n            cube([yard_length, 1, 1], center = true);\n}\n\nmodule rudder() {\n    translate([hull_length/2 + 3, 0, hull_height - 3])\n        rotate([0, 10, 0])\n            cube([6, 3, hull_height], center = true);\n}\n\n// Main assembly\nunion() {\n    // Hull and superstructure\n    hull();\n    deck();\n    forecastle();\n    quarterdeck();\n    \n    // Three masts\n    mast(-hull_length/4, 0, 40, 3);    // Fore mast\n    mast(0, 0, 45, 3.5);               // Main mast\n    mast(hull_length/4, 0, 35, 2.5);   // Mizzen mast\n    \n    // Yards (horizontal spars)\n    yard(-hull_length/4, 0, 40, 30, 0);    // Fore yard\n    yard(0, 0, 45, 35, 0);                 // Main yard\n    yard(hull_length/4, 0, 35, 25, 0);     // Mizzen yard\n    \n    // Additional yards at different heights\n    yard(-hull_length/4, 0, 30, 20, 0);    // Fore topsail yard\n    yard(0, 0, 35, 25, 0);                 // Main topsail yard\n    \n    // Rudder\n    rudder();\n    \n    // Railings\n    for(x = [-hull_length/2 + 5:hull_length/2 - 5]) {\n        translate([x, hull_width/2 - 1, hull_height + deck_thickness])\n            cube([2, 1, 3]);\n        translate([x, -hull_width/2 + 1, hull_height + deck_thickness])\n            cube([2, 1, 3]);\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "clipper",
    "openscad_code": "// OpenSCAD Clipper – medium-complexity realistic finger-nail clipper\n// Designed for 3-D printing: 0.4 mm walls, no severe overhangs\n// Overall length ≈ 65 mm, width ≈ 15 mm, height ≈ 18 mm\n\n// General parameters\n$fn = 36;            // smooth curves\nwall = 1.2;          // wall thickness for 0.4 mm nozzle\nblade_gap = 0.4;     // clearance for blade shear\nlever_clear = 0.6;   // clearance for lever motion\n\n// ---------- Helper modules ----------\nmodule rounded_box(x, y, z, r) {\n    hull() {\n        translate([ r,  r, 0]) cylinder(h=z, r=r);\n        translate([x-r,  r, 0]) cylinder(h=z, r=r);\n        translate([x-r, y-r, 0]) cylinder(h=z, r=r);\n        translate([ r, y-r, 0]) cylinder(h=z, r=r);\n    }\n}\n\n// ---------- Upper blade ----------\nmodule upper_blade() {\n    difference() {\n        union() {\n            // main body\n            rounded_box(60, 12, 4, 2);\n            // curved cutting edge\n            translate([58, 6, 4])\n                rotate([90, 0, 0])\n                    cylinder(h=12, r1=10, r2=8);\n        }\n        // cutting groove\n        translate([52, 6, -0.5])\n            cube([10, blade_gap, 5]);\n        // pin hole\n        translate([8, 6, 2])\n            rotate([0, 90, 0])\n                cylinder(h=20, r=1.5, center=true);\n    }\n}\n\n// ---------- Lower blade ----------\nmodule lower_blade() {\n    difference() {\n        union() {\n            // mirror of upper blade but without lever hole\n            mirror([0, 0, 1])\n                rounded_box(60, 12, 4, 2);\n            mirror([0, 0, 1])\n                translate([58, 6, 0])\n                    rotate([90, 0, 0])\n                        cylinder(h=12, r1=8, r2=10);\n        }\n        // cutting groove\n        translate([52, 6, -0.5])\n            cube([10, blade_gap, 5]);\n        // pin hole\n        translate([8, 6, -2])\n            rotate([0, 90, 0])\n                cylinder(h=20, r=1.5, center=true);\n    }\n}\n\n// ---------- Pin ----------\nmodule pin() {\n    cylinder(h=14.8, r=1.5);\n    // chamfer\n    translate([0, 0, -0.2])\n        cylinder(h=2, r1=2, r2=1.5);\n    translate([0, 0, 13])\n        cylinder(h=2, r1=1.5, r2=2);\n}\n\n// ---------- Lever ----------\nmodule lever() {\n    difference() {\n        union() {\n            // lever arm\n            translate([0, 0, 0])\n                rounded_box(45, 12, 4, 2);\n            // cam lobe\n            translate([6, 6, 4])\n                rotate([90, 0, 0])\n                    cylinder(h=12, r=4);\n            // finger pad\n            translate([38, 6, 2])\n                rotate([90, 0, 0])\n                    cylinder(h=12, r=6, h=2);\n        }\n        // holes\n        translate([6, 6, 2])\n            rotate([0, 90, 0])\n                cylinder(h=15, r=1.6);\n        translate([38, 6, 2])\n            rotate([0, 90, 0])\n                cylinder(h=15, r=1.6);\n    }\n}\n\n// ---------- Assembly ----------\nupper_blade();\ntranslate([0, 0, -4.2])\n    lower_blade();\ntranslate([8, 6, 0])\n    pin();\ntranslate([0, 0, 8.5])\n    rotate([0, 0, -25])\n        lever();",
    "renders": true
  },
  {
    "vehicle": "whaler",
    "openscad_code": "// Whaler (19th century whaleboat) – medium realism, 3D-printable\n// Scale ≈ 1:100, length ≈ 70 mm\n\nhull_th = 1.6;       // wall thickness for printing\nplank_w = 2.2;       // width of hull planks\nrib_step = 6;        // spacing between internal ribs\nbench_h = 3;\n\nmodule hull_plank(l, w, t, flare=6) {\n    // single curved plank that makes up the hull skin\n    linear_extrude(height = t, convexity = 4)\n        difference() {\n            offset(delta = w/2)\n                square([l, w], center = true);\n            offset(delta = -w/2)\n                square([l, w], center = true);\n        }\n}\n\nmodule hull_shell() {\n    // outer shell with tumble-home\n    for (y = [-30:plank_w:30]) {\n        h = 20 * (1 - abs(y)/35);                // sheer height\n        flare = 6 * sin(90 * abs(y)/35);         // flare angle\n        translate([0, y, h/2])\n            rotate([0, flare, 0])\n                hull_plank(70, plank_w, hull_th, flare);\n    }\n}\n\nmodule ribs() {\n    // internal frames (no overhang)\n    for (x = [-30:rib_step:30])\n        translate([x, 0, 0])\n            rotate([90, 0, 0])\n                difference() {\n                    cylinder(h = 40, r1 = 12, r2 = 5, $fn = 16);\n                    translate([0, 0, -1])\n                        cylinder(h = 42, r1 = 12 - hull_th, r2 = 5 - hull_th, $fn = 16);\n                }\n}\n\nmodule bench() {\n    // center thwarts (seats)\n    for (x = [-20, 0, 20])\n        translate([x, 0, bench_h])\n            cube([8, 12, hull_th], center = true);\n}\n\nmodule mast_step() {\n    // hole for removable mast peg\n    translate([20, 0, bench_h + hull_th])\n        cylinder(h = 5, r = 2, $fn = 12);\n}\n\nmodule oar_notches() {\n    // simple gunwale notches for oars\n    for (side = [-1, 1])\n        for (x = [-25:10:25])\n            translate([x, side * 15.5, 18])\n                cube([4, hull_th, 2], center = true);\n}\n\nmodule harpoon_crutch() {\n    // forked timber at bow for harpoon shaft\n    translate([-34, 0, 15])\n        rotate([0, 0, 0])\n            union() {\n                cube([6, 2, 10], center = true);\n                translate([0, 0, 5])\n                    cube([2, 6, 2], center = true);\n            }\n}\n\n// Assembly\nunion() {\n    hull_shell();\n    ribs();\n    bench();\n    mast_step();\n    oar_notches();\n    harpoon_crutch();\n}",
    "renders": true
  },
  {
    "vehicle": "dhow",
    "openscad_code": "// Dhow model - medium complexity, realistic style\n// Overall length ~80mm, width ~20mm, height ~15mm\n\n// Hull parameters\nhull_length = 80;\nhull_width = 18;\nhull_height = 12;\nwall_thickness = 1.5;\n\n// Mast parameters\nmast_height = 35;\nmast_diameter = 2;\n\n// Sail parameters\nsail_width = 25;\nsail_height = 30;\n\n// Deck parameters\ndeck_thickness = 1.5;\n\nmodule hull() {\n    difference() {\n        // Main hull body\n        union() {\n            // Bow - pointed front\n            translate([hull_length/2 - 5, 0, 0])\n                scale([1, 0.7, 0.8])\n                sphere(d=10, $fn=20);\n            \n            // Main hull section\n            hull() {\n                translate([-hull_length/2, 0, 0])\n                    scale([1, 0.5, 0.4])\n                    sphere(d=hull_width, $fn=20);\n                translate([hull_length/2 - 10, 0, 0])\n                    scale([1, 0.9, 0.9])\n                    sphere(d=hull_width, $fn=20);\n            }\n            \n            // Stern - raised back\n            translate([-hull_length/2 + 5, 0, 0])\n                cube([10, hull_width, hull_height], center=true);\n        }\n        \n        // Hollow out the hull\n        translate([0, 0, -1])\n            scale([0.85, 0.75, 0.7])\n            hull() {\n                translate([-hull_length/2 + 5, 0, 0])\n                    scale([1, 0.5, 0.4])\n                    sphere(d=hull_width, $fn=20);\n                translate([hull_length/2 - 15, 0, 0])\n                    scale([1, 0.9, 0.9])\n                    sphere(d=hull_width, $fn=20);\n            }\n    }\n}\n\nmodule deck() {\n    // Main deck\n    translate([0, 0, hull_height/2])\n        cube([hull_length - 10, hull_width - 2, deck_thickness], center=true);\n    \n    // Deck rail posts\n    for(i = [-1, 1]) {\n        translate([hull_length/2 - 15, i * (hull_width/2 - 2), hull_height + 1])\n            cylinder(h=3, d=2, $fn=8);\n    }\n}\n\nmodule mast() {\n    // Main mast\n    translate([0, 0, hull_height/2 + deck_thickness/2])\n        cylinder(h=mast_height, d=mast_diameter, $fn=12);\n    \n    // Mast base reinforcement\n    translate([0, 0, hull_height/2 + deck_thickness/2])\n        cylinder(h=3, d=5, $fn=12);\n}\n\nmodule lateen_sail() {\n    // Sail spar (boom)\n    rotate([0, 90, 30])\n        translate([0, 0, mast_height/2])\n            cylinder(h=sail_width, d=1.5, $fn=8);\n    \n    // Main sail\n    color(\"white\") {\n        translate([5, 0, hull_height/2 + deck_thickness + mast_height - 5])\n            rotate([0, 90, 30])\n                linear_extrude(height=0.5)\n                    polygon(points=[\n                        [0, 0],\n                        [sail_width, 0],\n                        [sail_width/2, sail_height]\n                    ]);\n    }\n}\n\nmodule rudder() {\n    // Stern rudder\n    translate([-hull_length/2 + 3, 0, hull_height/2 - 3])\n        rotate([0, 90, 0])\n            cube([8, 3, 6]);\n}\n\nmodule cabin() {\n    // Small cabin structure\n    translate([-hull_length/4, 0, hull_height/2 + deck_thickness])\n        cube([10, hull_width - 6, 5], center=true);\n}\n\n// Assembly\nunion() {\n    hull();\n    deck();\n    mast();\n    lateen_sail();\n    rudder();\n    cabin();\n}",
    "renders": true
  },
  {
    "vehicle": "junk",
    "openscad_code": "// Junk - Chinese sailing vessel\n// Medium complexity, realistic style\n\nhull_length = 80;\nhull_width = 25;\nhull_height = 12;\ndeck_height = 8;\n\nmodule hull() {\n    difference() {\n        // Main hull shape\n        hull_shape();\n        \n        // Hollow out the interior\n        translate([0, 0, -1])\n            scale([0.8, 0.8, 0.9])\n                hull_shape();\n    }\n}\n\nmodule hull_shape() {\n    // Create curved hull with rounded bottom\n    hull() {\n        // Front section - pointed bow\n        translate([-hull_length/2, 0, 0])\n            scale([0.3, 1, 1])\n                cylinder(h=hull_height*2, r1=hull_width/2, r2=0, center=true);\n        \n        // Main hull body\n        translate([0, 0, -hull_height/2])\n            cube([hull_length*0.7, hull_width, hull_height], center=true);\n        \n        // Rear section - rounded stern\n        translate([hull_length/2, 0, 0])\n            scale([0.2, 1, 1])\n                cylinder(h=hull_height*2, r1=hull_width/2, r2=hull_width/3, center=true);\n    }\n}\n\nmodule deck() {\n    // Main deck\n    translate([0, 0, deck_height])\n        cube([hull_length*0.9, hull_width*0.9, 2], center=true);\n    \n    // Cabin structure\n    translate([hull_length*0.2, 0, deck_height+3])\n        cube([hull_length*0.3, hull_width*0.5, 8], center=true);\n}\n\nmodule mast(base_x, height, diameter) {\n    // Mast pole\n    translate([base_x, 0, deck_height])\n        cylinder(h=height, r=diameter/2, center=false);\n    \n    // Mast base reinforcement\n    translate([base_x, 0, deck_height-1])\n        cylinder(h=2, r=diameter, center=false);\n}\n\nmodule sail(mast_x, mast_height, sail_width, sail_height) {\n    // Main sail panel\n    translate([mast_x + sail_width/3, 0, deck_height + mast_height - sail_height])\n        cube([sail_width, 2, sail_height], center=true);\n    \n    // Horizontal battens\n    for(i = [1:3]) {\n        translate([mast_x + sail_width/3, 0, deck_height + mast_height - sail_height*i/3])\n            cube([sail_width*0.9, 1.5, 1], center=true);\n    }\n}\n\nmodule rudder() {\n    // Rudder post\n    translate([hull_length/2+2, 0, deck_height-2])\n        rotate([0, 90, 0])\n            cylinder(h=8, r=2, center=true);\n    \n    // Rudder blade\n    translate([hull_length/2+4, 0, deck_height-6])\n        cube([8, 2, 12], center=true);\n}\n\nmodule railings() {\n    // Side railings\n    for(side = [-1, 1]) {\n        translate([0, side*hull_width/2, deck_height+1])\n            for(x = [-hull_length/2+5:10:hull_length/2-5]) {\n                translate([x, 0, 0])\n                    cube([1, 2, 3], center=true);\n            }\n    }\n}\n\nmodule anchor() {\n    // Anchor at bow\n    translate([-hull_length/2-3, 0, deck_height-2])\n    union() {\n        // Anchor shank\n        rotate([90, 0, 0])\n            cylinder(h=6, r=1, center=true);\n        \n        // Anchor flukes\n        translate([0, 0, -3])\n            rotate([0, 90, 0])\n                cylinder(h=4, r1=3, r2=0, center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Hull and deck\n    hull();\n    deck();\n    \n    // Three masts\n    mast(-hull_length/4, 40, 3);\n    sail(-hull_length/4, 40, 25, 30);\n    \n    mast(0, 35, 2.5);\n    sail(0, 35, 20, 25);\n    \n    mast(hull_length/4, 30, 2);\n    sail(hull_length/4, 30, 15, 20);\n    \n    // Rudder\n    rudder();\n    \n    // Railings\n    railings();\n    \n    // Anchor\n    anchor();\n}",
    "renders": true
  },
  {
    "vehicle": "felucca",
    "openscad_code": "// Felucca model - realistic style, medium complexity\n// Designed for 3D printing with 1mm wall thickness\n\n$fn = 24;\n\n// Overall dimensions (mm)\nlength = 80;\nbeam = 20;\nheight = 15;\n\n// Hull module with curved bottom\nmodule hull() {\n    // Main hull body\n    difference() {\n        // Outer hull - curved bottom\n        hull() {\n            translate([-length/2, -beam/2, 0])\n                cube([length, beam, height]);\n            translate([-length/2, -beam/2, -1])\n                cube([length, beam, 1]);\n            translate([-length/2, -beam/2+2, -2])\n                cube([length, beam-4, 1]);\n        }\n        \n        // Hollow interior\n        translate([-length/2+2, -beam/2+2, 1])\n            cube([length-4, beam-4, height-1]);\n    }\n    \n    // Deck surface\n    translate([-length/2+2, -beam/2+2, height-1])\n        cube([length-4, beam-4, 1]);\n}\n\n// Mast module\nmodule mast() {\n    // Main mast\n    translate([0, 0, height]) {\n        cylinder(h=40, d1=2, d2=1.5);\n    }\n    \n    // Mast base reinforcement\n    translate([0, 0, height-2]) {\n        cylinder(h=2, d=4);\n    }\n}\n\n// Lateen sail with yard\nmodule sail() {\n    // Main boom (bottom spar)\n    rotate([0, 30, 0]) {\n        translate([0, 0, 20])\n            rotate([90, 0, 0])\n                cylinder(h=30, d=1.5);\n    }\n    \n    // Upper yard (top spar)\n    rotate([0, 60, 0]) {\n        translate([0, 0, 35])\n            rotate([90, 0, 0])\n                cylinder(h=25, d=1);\n    }\n    \n    // Sail surface - simplified as thin volume\n    rotate([0, 45, 0]) {\n        translate([-15, -0.5, 20]) {\n            scale([1, 0.1, 1]) {\n                polyhedron(\n                    points = [\n                        [0, 0, 0], [30, 0, 0], [15, 0, 15], [2, 0, 12],\n                        [0, 2, 0], [30, 2, 0], [15, 2, 15], [2, 2, 12]\n                    ],\n                    faces = [\n                        [0,1,2,3], [4,7,6,5], [0,4,5,1], [1,5,6,2],\n                        [2,6,7,3], [3,7,4,0]\n                    ]\n                );\n            }\n        }\n    }\n}\n\n// Rudder module\nmodule rudder() {\n    // Rudder post\n    translate([length/2-5, 0, height/2]) {\n        cylinder(h=height+2, d=2);\n    }\n    \n    // Rudder blade\n    translate([length/2-3, -1, height/2-4]) {\n        cube([6, 2, 8]);\n    }\n}\n\n// Seating area\nmodule seating() {\n    // Bench supports\n    for(pos = [-20, 0, 20]) {\n        translate([pos, -beam/2+3, height]) {\n            cube([4, 2, 3]);\n        }\n    }\n    \n    // Bench top\n    translate([-25, -beam/2+2.5, height+3]) {\n        cube([50, 3, 1]);\n    }\n}\n\n// Side rail\nmodule rail() {\n    // Port rail posts\n    for(pos = [-30, -15, 0, 15, 30]) {\n        translate([pos, -beam/2+1, height]) {\n            cylinder(h=4, d=1.5);\n        }\n    }\n    \n    // Starboard rail posts\n    for(pos = [-30, -15, 0, 15, 30]) {\n        translate([pos, beam/2-1, height]) {\n            cylinder(h=4, d=1.5);\n        }\n    }\n    \n    // Port rail top\n    translate([-35, -beam/2+1, height+3.5]) {\n        cube([70, 1, 1]);\n    }\n    \n    // Starboard rail top\n    translate([-35, beam/2-2, height+3.5]) {\n        cube([70, 1, 1]);\n    }\n}\n\n// Assembly\nunion() {\n    hull();\n    mast();\n    sail();\n    rudder();\n    seating();\n    rail();\n}",
    "renders": true
  },
  {
    "vehicle": "caique",
    "openscad_code": "$fn = 32;\n\nmodule caique() {\n    // Body\n    union() {\n        // Main body\n        translate([0, 0, 10])\n            scale([1.2, 1, 1])\n            sphere(15);\n        \n        // Belly\n        translate([0, -5, 5])\n            sphere(12);\n        \n        // Head\n        translate([0, 18, 25])\n            sphere(10);\n        \n        // Beak upper\n        translate([0, 28, 25])\n            rotate([30, 0, 0])\n            scale([0.5, 1, 1])\n            cylinder(8, 5, 2);\n        \n        // Beak lower\n        translate([0, 28, 22])\n            rotate([20, 0, 0])\n            scale([0.4, 0.8, 1])\n            cylinder(6, 4, 2);\n        \n        // Eye left\n        translate([-4, 20, 28])\n            sphere(2);\n        \n        // Eye right\n        translate([4, 20, 28])\n            sphere(2);\n        \n        // Tail\n        translate([-20, 0, 12])\n            rotate([0, 0, 30])\n            scale([0.3, 1, 0.5])\n            cylinder(12, 8, 2);\n        \n        // Wings\n        // Left wing\n        translate([-12, 0, 15])\n            rotate([0, 0, -20])\n            scale([0.3, 1.5, 0.8])\n            difference() {\n                cylinder(10, 8, 2);\n                translate([0, 0, -2])\n                    cylinder(12, 9, 3);\n            }\n        \n        // Right wing\n        translate([12, 0, 15])\n            rotate([0, 0, 20])\n            scale([0.3, 1.5, 0.8])\n            difference() {\n                cylinder(10, 8, 2);\n                translate([0, 0, -2])\n                    cylinder(12, 9, 3);\n            }\n        \n        // Legs\n        // Left leg\n        translate([-5, -5, 0])\n            cylinder(8, 2, 2);\n        translate([-5, -5, 0])\n            rotate([0, 90, 0])\n            cylinder(4, 1.5, 1.5);\n        \n        // Right leg\n        translate([5, -5, 0])\n            cylinder(8, 2, 2);\n        translate([5, -5, 0])\n            rotate([0, 90, 0])\n            cylinder(4, 1.5, 1.5);\n        \n        // Feet\n        // Left foot\n        for(i = [-2, 0, 2]) {\n            translate([-5 + i/2, -9, 0])\n                rotate([0, 90, 0])\n                cylinder(2, 1, 1);\n        }\n        \n        // Right foot\n        for(i = [-2, 0, 2]) {\n            translate([5 + i/2, -9, 0])\n                rotate([0, 90, 0])\n                cylinder(2, 1, 1);\n        }\n    }\n}\n\n// Color indicators (will be printed as separate parts)\n// Orange cheeks\ntranslate([-8, 18, 25])\n    sphere(4);\n\ntranslate([8, 18, 25])\n    sphere(4);\n\n// Green body indication\n// Body will be printed in green\n\n// Yellow legs and beak indication\n// Legs and beak will be printed in yellow\n\ncaique();",
    "renders": true
  },
  {
    "vehicle": "skipjack",
    "openscad_code": "// Skipjack Tuna - Realistic Medium Complexity\n// Approx 85mm long, 20mm tall, 25mm wide\n// Designed for 3D printing with 1.2mm walls\n\nmodule tuna_body() {\n    // Main body - tapered ellipsoid\n    difference() {\n        scale([1, 0.7, 0.4]) sphere(d=50, $fn=32);\n        // Tail cut\n        translate([25, 0, 0]) cube([30, 30, 30], center=true);\n    }\n    \n    // Belly flattening\n    translate([0, 0, -6]) \n        scale([1, 0.8, 0.3]) \n            sphere(d=45, $fn=32);\n}\n\nmodule tuna_tail() {\n    // Forked tail\n    for(side = [-1, 1]) {\n        translate([23, side*8, 0]) rotate([0, 0, side*15])\n            scale([0.8, 0.1, 0.4]) sphere(d=25, $fn=16);\n    }\n    \n    // Tail stem\n    translate([23, 0, 0])\n        scale([0.5, 0.3, 0.2]) sphere(d=20, $fn=16);\n}\n\nmodule tuna_fins() {\n    // Dorsal fin\n    translate([-5, 0, 8])\n        rotate([0, 90, 0])\n            cylinder(h=15, r1=5, r2=2, $fn=3);\n    \n    // Pectoral fins\n    for(side = [-1, 1]) {\n        translate([-8, side*10, -2])\n            rotate([0, side*15, 0])\n                scale([1, 0.5, 0.1]) sphere(d=15, $fn=8);\n    }\n    \n    // Ventral fins\n    for(side = [-1, 1]) {\n        translate([0, side*8, -6])\n            rotate([0, -30, side*30])\n                cylinder(h=8, r1=3, r2=1, $fn=3);\n    }\n}\n\nmodule tuna_head() {\n    // Head extension\n    translate([-22, 0, 0])\n        scale([0.8, 0.7, 0.6]) sphere(d=30, $fn=32);\n    \n    // Snout\n    translate([-32, 0, 0])\n        scale([0.6, 0.4, 0.3]) sphere(d=20, $fn=16);\n    \n    // Mouth line\n    translate([-30, 0, -3])\n        rotate([90, 0, 0])\n            cylinder(h=0.5, r=8, $fn=16);\n}\n\nmodule tuna_markings() {\n    // Stripes\n    for(i = [-15:5:15]) {\n        translate([i, 0, 0])\n            scale([0.5, 1, 0.9]) sphere(d=40, $fn=32);\n    }\n    \n    // Eye\n    translate([-25, 8, 2])\n        sphere(d=2, $fn=16);\n}\n\n// Assembly\nunion() {\n    tuna_body();\n    tuna_tail();\n    tuna_fins();\n    tuna_head();\n    tuna_markings();\n}",
    "renders": true
  },
  {
    "vehicle": "bugeye",
    "openscad_code": "// Realistic medium-complexity bugeye model\n// Approx 60 mm tall, 3 mm wall thickness, printable without supports\n\n$fn = 36;\n\n// Overall dimensions\neye_d = 30;          // Cornea diameter\niris_d = 16;         // Iris diameter\npupil_d = 8;         // Pupil diameter\nsclera_h = 14;       // White part height\nbase_h = 8;          // Base cylinder height\nwall_t = 3;          // Shell thickness\n\nmodule eyeball() {\n    // Outer white shell (sclera)\n    difference() {\n        sphere(d = eye_d);\n        sphere(d = eye_d - wall_t * 2);\n    }\n}\n\nmodule cornea() {\n    // Clear dome on front\n    translate([0, 0, sclera_h / 2])\n    scale([1, 1, 0.5])\n    sphere(d = eye_d);\n}\n\nmodule iris() {\n    // Colored iris disc\n    translate([0, 0, sclera_h / 2 - wall_t / 2])\n    cylinder(h = wall_t, d = iris_d);\n}\n\nmodule pupil() {\n    // Central black pupil\n    translate([0, 0, sclera_h / 2])\n    cylinder(h = wall_t + 0.5, d = pupil_d);\n}\n\nmodule blood_vessels() {\n    // Random red vessels on sclera surface\n    for (a = [0 : 45 : 360])\n    rotate([0, 0, a])\n    translate([eye_d / 2 - wall_t / 2, 0, 0])\n    rotate([0, 90, 0])\n    rotate([0, 0, rands(-20, 20, 1)[0]])\n    scale([rands(0.2, 0.4, 1)[0], 1, 1])\n    cylinder(h = rands(3, 8, 1)[0], d = 0.5);\n}\n\nmodule base() {\n    // Flat bottom cylinder to sit flat on build plate\n    cylinder(h = base_h, d1 = eye_d, d2 = eye_d - 2);\n}\n\nmodule support_holes() {\n    // Drainage holes for resin printing\n    for (a = [0 : 120 : 240])\n    rotate([0, 0, a])\n    translate([(eye_d - wall_t) / 2, 0, -base_h / 2])\n    rotate([0, 90, 0])\n    cylinder(h = eye_d, d = 3);\n}\n\n// Assembly\nunion() {\n    eyeball();\n    cornea();\n    iris();\n    pupil();\n    color(\"red\") blood_vessels();\n    color(\"white\") base();\n    support_holes();\n}",
    "renders": true
  },
  {
    "vehicle": "barkentine",
    "openscad_code": "// Barkentine 3D printable model - realistic style, medium complexity\n// Hull length ~80mm, height ~25mm\n\n$fn = 32;               // Smooth curves for 3D printing\nwall = 1.2;             // Standard nozzle wall thickness\n\n// Main assembly\nmodule barkentine() {\n    union() {\n        hull();\n        deck_structures();\n        masts();\n        rigging();\n    }\n}\n\n// Main hull with tapered shape\nmodule hull() {\n    difference() {\n        // Solid hull base\n        hull_shape();\n        \n        // Hollow interior for printing\n        translate([0, 0, 1]) \n            scale([0.85, 0.85, 0.9])\n            hull_shape();\n    }\n}\n\n// Basic hull shape\nmodule hull_shape() {\n    union() {\n        // Main hull body - tapered towards bow\n        for(i = [0:10]) {\n            h = 8 * (1 - i/15);\n            w = 12 - i * 0.4;\n            translate([i*7 - 35, 0, h/2])\n                scale([1, w/12, 1])\n                cube([7, 12, h], center=true);\n        }\n        \n        // Stern transom\n        translate([36, 0, 4])\n            cube([2, 14, 8], center=true);\n    }\n}\n\n// Deck structures and details\nmodule deck_structures() {\n    // Main deck\n    translate([0, 0, 8.5])\n        cube([72, 14, 0.8], center=true);\n    \n    // Forecastle\n    translate([-25, 0, 9.5])\n        cube([15, 12, 4], center=true);\n    \n    // Quarter deck\n    translate([25, 0, 9.5])\n        cube([20, 12, 3], center=true);\n    \n    // Ship's wheel\n    translate([30, 5, 13])\n        cylinder(h=0.8, r=2);\n    \n    // Cargo hatches\n    for(pos = [[-15, 0], [0, 0], [15, 0]]) {\n        translate(pos + [0, 0, 9.5])\n            cube([8, 6, 0.5], center=true);\n    }\n}\n\n// Three masts: foremast, mainmast, mizzen\nmodule masts() {\n    // Foremast - square rigged\n    mast([-20, 0, 9], 25, true);\n    \n    // Mainmast - fore-and-aft rigged\n    mast([0, 0, 9], 30, false);\n    \n    // Mizzenmast - fore-and-aft rigged\n    mast([20, 0, 9], 22, false);\n}\n\n// Individual mast with appropriate rigging\nmodule mast(pos, height, square_rigged) {\n    translate(pos) {\n        // Mast pole\n        cylinder(h=height, r=1, center=false);\n        \n        // Topmast\n        translate([0, 0, height])\n            cylinder(h=height*0.6, r=0.7, center=false);\n        \n        // Yardarms for square-rigged foremast\n        if(square_rigged) {\n            for(y = [0.4, 0.6, 0.8]) {\n                translate([0, 0, height * y])\n                    rotate([0, 90, 0])\n                    cylinder(h=20, r=0.5, center=true);\n            }\n        }\n        \n        // Gaff for fore-and-aft rigged masts\n        if(!square_rigged) {\n            translate([0, 0, height * 0.9])\n                rotate([0, 0, 30])\n                rotate([0, 90, 0])\n                cylinder(h=15, r=0.5, center=true);\n        }\n    }\n}\n\n// Simplified rigging as printable structures\nmodule rigging() {\n    // Shrouds - diagonal supports\n    for(mast_pos = [-20, 0, 20]) {\n        for(side = [-1, 1]) {\n            translate([mast_pos, 0, 9])\n                rotate([0, side * 15, 0])\n                cylinder(h=25, r=0.3, center=false);\n        }\n    }\n    \n    // Bowspirit\n    translate([-40, 0, 7])\n        rotate([0, -30, 0])\n        cylinder(h=15, r=1, center=false);\n}\n\n// Generate the model\nbarkentine();",
    "renders": true
  },
  {
    "vehicle": "schooneryacht",
    "openscad_code": "// Schooner Yacht - Realistic Medium Detail\n// 3D printable with no overhangs, 80mm length\n\nhull_length = 80;\nhull_width = 20;\nhull_height = 12;\n\n// Main hull with smooth bottom\nmodule hull() {\n    difference() {\n        hull_shape();\n        // Hollow out interior\n        translate([5, 0, 2])\n            scale([0.8, 0.8, 0.8])\n            hull_shape();\n    }\n}\n\nmodule hull_shape() {\n    union() {\n        // Main hull body\n        hull_profile();\n        \n        // Bow extension\n        translate([hull_length/2 - 5, 0, 0])\n            scale([0.3, 0.7, 0.7])\n            sphere(d=10, $fn=20);\n    }\n}\n\nmodule hull_profile() {\n    hull() {\n        // Bow\n        translate([hull_length/2, 0, 0])\n            sphere(d=hull_width, $fn=20);\n        // Mid\n        translate([0, 0, 0])\n            sphere(d=hull_width*0.9, $fn=20);\n        // Stern\n        translate([-hull_length/2, 0, 0])\n            sphere(d=hull_width*0.8, $fn=20);\n    }\n}\n\n// Deck with cabin\nmodule deck() {\n    translate([0, 0, hull_height/2 + 2])\n        cube([hull_length - 10, hull_width - 4, 1], center=true);\n}\n\n// Cabin house\nmodule cabin() {\n    translate([-10, 0, hull_height/2 + 3])\n        cube([20, 15, 8], center=true);\n}\n\n// Masts (two for schooner)\nmodule masts() {\n    // Main mast (aft)\n    translate([-15, 0, hull_height/2 + 3])\n        cylinder(h=40, d=2, $fn=8);\n    \n    // Fore mast\n    translate([15, 0, hull_height/2 + 3])\n        cylinder(h=35, d=2, $fn=8);\n}\n\n// Booms and gaffs\nmodule spars() {\n    // Main boom\n    translate([-15, 0, hull_height/2 + 25])\n        rotate([90, 0, 0])\n        cylinder(h=25, d=1, $fn=8);\n    \n    // Fore boom\n    translate([15, 0, hull_height/2 + 20])\n        rotate([90, 0, 0])\n        cylinder(h=20, d=1, $fn=8);\n}\n\n// Rigging lines as thin cylinders\nmodule rigging() {\n    // Main mast stays\n    for(angle=[-45, 45]) {\n        translate([-15, 0, hull_height/2 + 3])\n            rotate([0, 0, angle])\n            cylinder(h=30, d=0.5, $fn=4);\n    }\n    \n    // Fore mast stays\n    for(angle=[-45, 45]) {\n        translate([15, 0, hull_height/2 + 3])\n            rotate([0, 0, angle])\n            cylinder(h=25, d=0.5, $fn=4);\n    }\n}\n\n// Keel for stability\nmodule keel() {\n    translate([0, 0, -hull_height/2 - 1])\n        cube([hull_length - 20, 3, 2], center=true);\n}\n\n// Rudder\nmodule rudder() {\n    translate([-hull_length/2 + 2, 0, -hull_height/2])\n        cube([3, 8, 10], center=true);\n}\n\n// Assembly\nhull();\ndeck();\ncabin();\nmasts();\nspars();\nrigging();\nkeel();\nrudder();",
    "renders": true
  },
  {
    "vehicle": "motorsailer",
    "openscad_code": "// Motorsailer - realistic style, medium complexity\n// Approximate overall length 90 mm, width 25 mm, height 30 mm\n\nhull_length = 90;\nhull_width = 25;\nhull_height = 12;\n\n// Main hull\nmodule hull() {\n    difference() {\n        // Main hull body\n        hull_shape();\n        \n        // Remove bottom to hollow it\n        translate([0, 0, -hull_height/2 - 0.1])\n            cube([hull_length + 2, hull_width + 2, hull_height], center = true);\n        \n        // Drain hole in stern\n        translate([-hull_length/2 + 2, 0, -hull_height/2 + 1])\n            rotate([0, 90, 0])\n                cylinder(h = 2, d = 3, $fn = 8);\n    }\n}\n\n// Hull shape with rounded bow and tapered stern\nmodule hull_shape() {\n    hull() {\n        // Bow sphere\n        translate([hull_length/2 - 8, 0, 0])\n            sphere(d = hull_width, $fn = 20);\n        \n        // Mid section\n        translate([0, 0, 0])\n            cube([hull_length, hull_width, hull_height], center = true);\n        \n        // Stern sphere\n        translate([-hull_length/2 + 8, 0, 0])\n            sphere(d = hull_width * 0.8, $fn = 20);\n    }\n}\n\n// Cabin superstructure\nmodule cabin() {\n    difference() {\n        // Main cabin\n        translate([0, 0, hull_height/2 + 6])\n            cube([50, 22, 12], center = true);\n        \n        // Cabin roof slant\n        translate([0, 0, hull_height/2 + 12])\n            cube([50, 22, 0.1], center = true);\n    }\n    \n    // Cabin roof\n    translate([0, 0, hull_height/2 + 12])\n        cube([48, 20, 1], center = true);\n    \n    // Windows\n    for (i = [-15, -5, 5, 15]) {\n        translate([i, 11.5, hull_height/2 + 6])\n            cube([6, 0.5, 4], center = true);\n        translate([i, -11.5, hull_height/2 + 6])\n            cube([6, 0.5, 4], center = true);\n    }\n}\n\n// Mast\nmodule mast() {\n    // Main mast\n    translate([15, 0, hull_height/2 + 12])\n        cylinder(h = 40, d1 = 3, d2 = 2, $fn = 8);\n    \n    // Mast base\n    translate([15, 0, hull_height/2])\n        cylinder(h = 2, d = 6, $fn = 16);\n}\n\n// Boom\nmodule boom() {\n    translate([15, 0, hull_height/2 + 20])\n        rotate([0, 90, 0])\n            cylinder(h = 30, d = 2, $fn = 8);\n}\n\n// Sails\nmodule sails() {\n    // Main sail\n    translate([15, 0, hull_height/2 + 30])\n        rotate([90, 0, 0])\n            linear_extrude(height = 0.5)\n                polygon(points = [[0, 0], [0, -25], [15, -25], [15, 0]]);\n    \n    // Jib sail\n    translate([15, 0, hull_height/2 + 35])\n        rotate([90, 0, 45])\n            linear_extrude(height = 0.5)\n                polygon(points = [[0, 0], [0, -20], [12, -20], [12, 0]]);\n}\n\n// Railings\nmodule railings() {\n    // Starboard railing\n    for (x = [-30:5:30]) {\n        translate([x, hull_width/2 - 1, hull_height/2 + 2])\n            cylinder(h = 4, d = 1, $fn = 8);\n    }\n    \n    // Port railing\n    for (x = [-30:5:30]) {\n        translate([x, -hull_width/2 + 1, hull_height/2 + 2])\n            cylinder(h = 4, d = 1, $fn = 8);\n    }\n    \n    // Railing top\n    translate([0, hull_width/2 - 1, hull_height/2 + 4])\n        cube([hull_length - 10, 1, 1], center = true);\n    translate([0, -hull_width/2 + 1, hull_height/2 + 4])\n        cube([hull_length - 10, 1, 1], center = true);\n}\n\n// Engine box\nmodule engine_box() {\n    translate([-hull_length/2 + 15, 0, hull_height/2])\n        cube([20, 15, 8], center = true);\n    \n    // Exhaust pipe\n    translate([-hull_length/2 + 15, 0, hull_height/2 + 8])\n        cylinder(h = 6, d = 2, $fn = 8);\n}\n\n// Anchor\nmodule anchor() {\n    translate([hull_length/2 - 5, 0, -hull_height/2 + 1])\n        union() {\n            cylinder(h = 2, d = 1, $fn = 8);\n            rotate([0, 90, 0])\n                cylinder(h = 3, d = 1, $fn = 8);\n        }\n}\n\n// Assemble the motorsailer\nhull();\ncabin();\nmast();\nboom();\nsails();\nrailings();\nengine_box();\nanchor();",
    "renders": true
  },
  {
    "vehicle": "superyacht",
    "openscad_code": "// Realistic Superyacht - Medium Complexity\n// Designed for 3D printing - 80mm length\n\nhull_length = 80;\nhull_width = 20;\nhull_height = 10;\n\n// Main hull with realistic shape\nmodule hull() {\n    difference() {\n        // Main hull body\n        hull_shape();\n        \n        // Hull bottom cut for planing shape\n        translate([-hull_length/2-1, 0, -hull_height/2-1])\n            cube([hull_length+2, hull_width+2, hull_height/2]);\n        \n        // Propeller tunnel\n        translate([-hull_length/2+5, 0, -hull_height/2+2])\n            rotate([90, 0, 0])\n                cylinder(h=8, r=3, $fn=20);\n    }\n}\n\n// Curved hull shape using multiple cylinders\nmodule hull_shape() {\n    union() {\n        // Main hull section\n        translate([0, 0, 0])\n            scale([1, hull_width/hull_length, hull_height/hull_length])\n                sphere(hull_length/2, $fn=50);\n        \n        // Bow extension\n        translate([hull_length/2-5, 0, 0])\n            scale([0.3, 0.8, 0.6])\n                sphere(10, $fn=30);\n        \n        // Stern platform\n        translate([-hull_length/2+3, 0, -hull_height/2+1])\n            cube([6, hull_width-4, 2]);\n    }\n}\n\n// Main deck with superstructure\nmodule main_deck() {\n    translate([0, 0, hull_height/2-1])\n        cube([hull_length-10, hull_width-4, 1.5], center=true);\n}\n\n// Superstructure (bridge/deckhouse)\nmodule superstructure() {\n    hull_deck();\n    bridge_deck();\n    radar_mast();\n}\n\n// Main deckhouse\nmodule hull_deck() {\n    translate([hull_length/4, 0, hull_height/2+0.5])\n        cube([hull_length/2, hull_width-8, 5], center=true);\n}\n\n// Bridge deck\nmodule bridge_deck() {\n    translate([hull_length/3, 0, hull_height/2+6])\n        cube([hull_length/3, hull_width-10, 3], center=true);\n}\n\n// Radar mast with radar\nmodule radar_mast() {\n    translate([hull_length/3, 0, hull_height/2+9]) {\n        // Mast\n        cylinder(h=8, r=0.5, $fn=8);\n        \n        // Radar dome\n        translate([0, 0, 8])\n            sphere(2, $fn=20);\n    }\n}\n\n// Lifeboats and tender\nmodule lifeboats() {\n    // Port lifeboat\n    translate([hull_length/4-5, hull_width/2-2, hull_height/2+1.5])\n        lifeboat();\n    \n    // Starboard lifeboat\n    translate([hull_length/4-5, -hull_width/2+2, hull_height/2+1.5])\n        lifeboat();\n}\n\n// Individual lifeboat\nmodule lifeboat() {\n    rotate([0, 90, 0])\n        scale([1, 0.5, 0.5])\n            cylinder(h=4, r=1.5, $fn=20);\n}\n\n// Railings around decks\nmodule railings() {\n    railing_line(hull_length/2-5, hull_width/2-1, 0);\n    railing_line(hull_length/2-5, -hull_width/2+1, 0);\n    railing_line(-hull_length/2+5, hull_width/2-1, 0);\n    railing_line(-hull_length/2+5, -hull_width/2+1, 0);\n}\n\n// Individual railing posts\nmodule railing_line(x, y, z) {\n    for(i = [-1:1]) {\n        translate([x+i*5, y, hull_height/2+z+1]) {\n            cylinder(h=2, r=0.3, $fn=8);\n            translate([0, 0, 2])\n                rotate([90, 0, 0])\n                    cylinder(h=abs(y)*2-2, r=0.3, $fn=8);\n        }\n    }\n}\n\n// Windows along the hull\nmodule windows() {\n    for(i = [1:3]) {\n        // Port windows\n        translate([hull_length/2-i*8, hull_width/2-0.5, 0])\n            cube([2, 0.5, 1.5]);\n        \n        // Starboard windows\n        translate([hull_length/2-i*8, -hull_width/2+0.5, 0])\n            cube([2, 0.5, 1.5]);\n    }\n}\n\n// Assemble the yacht\nunion() {\n    hull();\n    main_deck();\n    superstructure();\n    lifeboats();\n    railings();\n    windows();\n}",
    "renders": true
  },
  {
    "vehicle": "megayacht",
    "openscad_code": "// Megayacht - Realistic Medium Complexity\n// 3D printable, ~80 mm long\n\nhull_length = 80;\nhull_width = 18;\nhull_height = 10;\n\n// Main hull shape\nmodule hull() {\n    difference() {\n        union() {\n            // Lower hull\n            hull_for(scale([1,0.9,1], $fn=50));\n            // Upper deck extension\n            translate([0,0,hull_height-2])\n                scale([0.9,0.85,0.4], $fn=50)\n                    cylinder(h=3, r1=hull_width/2, r2=hull_width/2.2);\n        }\n        // Cut out interior\n        translate([0,0,-1])\n            scale([0.8,0.7,1.2], $fn=50)\n                cylinder(h=hull_height+2, r1=hull_width/2-2, r2=hull_width/2-2.5);\n    }\n}\n\n// Helper for rounded hull shape\nmodule hull_for() {\n    rotate([90,0,0])\n        cylinder(h=hull_length, r1=hull_width/2, r2=hull_width/3.5);\n}\n\n// Main superstructure block\nmodule superstructure() {\n    translate([-10,0,hull_height+1]) {\n        difference() {\n            // Main block\n            cube([25, hull_width-4, 8], center=true);\n            // Bridge windows\n            translate([5,0,2])\n                cube([12, hull_width-6, 4], center=true);\n        }\n    }\n}\n\n// Radar mast\nmodule radar_mast() {\n    translate([8,0,hull_height+9]) {\n        cylinder(h=10, r=0.8, $fn=8);\n        // Radar dome\n        translate([0,0,10])\n            rotate([90,0,0])\n                scale([1,0.4,1])\n                    sphere(r=2.5, $fn=20);\n    }\n}\n\n// Lifeboats\nmodule lifeboats() {\n    for(side=[-1,1]) {\n        translate([15, side*(hull_width/2-3), hull_height+2]) {\n            rotate([0,0,side*10])\n                cube([8, 3, 2], center=true);\n        }\n    }\n}\n\n// Deck railings\nmodule railings() {\n    for(side=[-1,1]) {\n        for(pos=[-30:5:30]) {\n            translate([pos, side*(hull_width/2-1), hull_height+0.5]) {\n                cylinder(h=2, r=0.3, $fn=6);\n            }\n        }\n    }\n}\n\n// Stack/exhausts\nmodule stacks() {\n    for(side=[-1,1]) {\n        translate([-15, side*4, hull_height+8]) {\n            cylinder(h=3, r=1, $fn=8);\n        }\n    }\n}\n\n// Helicopter pad\nmodule heli_pad() {\n    translate([-25,0,hull_height+8]) {\n        difference() {\n            cylinder(h=0.5, r=8, $fn=32);\n            // H marking\n            translate([0,0,-0.1])\n                cube([10, 2, 0.7], center=true);\n            translate([0,0,-0.1])\n                cube([2, 10, 0.7], center=true);\n        }\n    }\n}\n\n// Combine all parts\nunion() {\n    hull();\n    superstructure();\n    radar_mast();\n    lifeboats();\n    railings();\n    stacks();\n    heli_pad();\n}",
    "renders": true
  },
  {
    "vehicle": "expresscruiser",
    "openscad_code": "// Express Cruiser - Realistic Style, Medium Complexity\n// Designed for 3D printing - 80mm length\n\n// Hull main body\nmodule hull() {\n    difference() {\n        // Main hull shape\n        hull() {\n            cube([75, 25, 12], center=true);\n            translate([0, 0, -6]) cube([70, 22, 8], center=true);\n        }\n        \n        // Cut bow shape\n        translate([35, 0, 0]) rotate([0, 0, -25]) cube([30, 30, 20], center=true);\n        \n        // Hull chine\n        translate([0, 0, -5]) cube([75, 28, 2], center=true);\n    }\n}\n\n// Cabin superstructure\nmodule cabin() {\n    // Main cabin\n    translate([-15, 0, 7]) cube([30, 22, 10], center=true);\n    \n    // Cabin roof\n    translate([-15, 0, 13]) cube([28, 20, 2], center=true);\n    \n    // Windshield\n    translate([0, 0, 9]) cube([2, 20, 6], center=true);\n}\n\n// Deck details\nmodule deck_features() {\n    // Anchor locker\n    translate([30, 0, 6.5]) cube([8, 6, 2], center=true);\n    \n    // Rail posts\n    for(pos = [[25, 12], [25, -12], [10, 12], [10, -12], [-25, 12], [-25, -12]]) {\n        translate([pos[0], pos[1], 7.5]) cylinder(h=3, r=1, $fn=8);\n    }\n    \n    // Rail connections\n    hull() {\n        translate([25, 12, 9]) sphere(r=1);\n        translate([25, -12, 9]) sphere(r=1);\n        translate([10, 12, 9]) sphere(r=1);\n        translate([10, -12, 9]) sphere(r=1);\n    }\n    hull() {\n        translate([-25, 12, 9]) sphere(r=1);\n        translate([-25, -12, 9]) sphere(r=1);\n    }\n}\n\n// Cockpit area\nmodule cockpit() {\n    // Seating area\n    translate([-30, 0, 6.5]) cube([20, 18, 2], center=true);\n    \n    // Console\n    translate([-20, 0, 7.5]) cube([4, 12, 6], center=true);\n    \n    // Steering wheel\n    translate([-18, 0, 12]) rotate([90, 0, 0]) cylinder(h=2, r=2, $fn=16);\n}\n\n// Engines/outdrives\nmodule engines() {\n    // Port engine\n    translate([-35, 8, 2]) {\n        cube([8, 6, 4], center=true);\n        translate([5, 0, -2]) rotate([0, 90, 0]) cylinder(h=8, r=2, $fn=12);\n    }\n    \n    // Starboard engine\n    translate([-35, -8, 2]) {\n        cube([8, 6, 4], center=true);\n        translate([5, 0, -2]) rotate([0, 90, 0]) cylinder(h=8, r=2, $fn=12);\n    }\n}\n\n// Windows\nmodule windows() {\n    // Cabin windows\n    translate([-20, 0, 9]) cube([12, 18, 4], center=true);\n    translate([-10, 0, 9]) cube([8, 16, 4], center=true);\n    \n    // Windshield panes\n    for(y = [-8, -4, 0, 4, 8]) {\n        translate([1, y, 11]) cube([1, 2, 3], center=true);\n    }\n}\n\n// Assemble the boat\nunion() {\n    hull();\n    cabin();\n    deck_features();\n    cockpit();\n    engines();\n    \n    // Cut windows from cabin\n    difference() {\n        windows();\n        translate([-20, 0, 9]) cube([12.5, 18.5, 4.5], center=true);\n        translate([-10, 0, 9]) cube([8.5, 16.5, 4.5], center=true);\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "cuddy",
    "openscad_code": "// Cuddy Cabin Model\n// A small boat cuddy with basic interior details\n// Sized at 80mm length for 3D printing\n\ncuddy();\n\nmodule cuddy() {\n    // Main hull base\n    difference() {\n        hull_base();\n        \n        // Interior hollow space\n        translate([5, 5, 10])\n            cube([70, 30, 25]);\n    }\n    \n    // Cabin superstructure\n    cabin();\n    \n    // Cockpit details\n    cockpit();\n    \n    // Railings\n    railings();\n    \n    // Anchor locker\n    anchor_locker();\n}\n\nmodule hull_base() {\n    // Main hull shape with tapered bow\n    hull() {\n        // Stern section\n        translate([5, 10, 0])\n            cube([25, 60, 35]);\n        \n        // Mid section\n        translate([30, 10, 0])\n            cube([25, 60, 30]);\n        \n        // Bow section - tapered\n        translate([50, 25, 0])\n            scale([1, 0.5, 1])\n                cube([25, 40, 25]);\n    }\n}\n\nmodule cabin() {\n    // Cabin walls\n    difference() {\n        // Main cabin block\n        translate([35, 15, 30])\n            cube([35, 50, 25]);\n        \n        // Door opening\n        translate([36, 20, 15])\n            cube([8, 15, 20]);\n        \n        // Windows\n        for(i = [0:1]) {\n            translate([40 + i*20, 14, 35])\n                cube([10, 2, 8]);\n        }\n    }\n    \n    // Cabin roof\n    translate([35, 15, 55])\n        cube([35, 50, 2]);\n    \n    // Roof peak\n    translate([52.5, 40, 57])\n        rotate([90, 0, 0])\n            cylinder(h=25, r1=17.5, r2=17.5);\n}\n\nmodule cockpit() {\n    // Cockpit floor\n    translate([5, 15, 30])\n        cube([25, 50, 2]);\n    \n    // Seating\n    for(i = [0:1]) {\n        translate([10 + i*15, 20, 32])\n            cube([8, 40, 5]);\n    }\n    \n    // Steering console\n    translate([8, 45, 32])\n        cube([15, 8, 12]);\n}\n\nmodule railings() {\n    // Bow rail\n    for(i = [0:4]) {\n        translate([65 - i*5, 25, 25])\n            cylinder(h=10, r=1);\n    }\n    \n    // Side rails\n    for(side = [0:1]) {\n        for(i = [0:7]) {\n            translate([5 + i*8, side ? 5 : 75, 25])\n                cylinder(h=8, r=1);\n        }\n    }\n}\n\nmodule anchor_locker() {\n    // Anchor well in bow\n    translate([60, 35, 25])\n        difference() {\n            cube([15, 15, 8]);\n            translate([2, 2, 2])\n                cube([11, 11, 6]);\n        }\n}",
    "renders": true
  },
  {
    "vehicle": "walkaround",
    "openscad_code": "// Walkaround (inspection bridge) – medium-complexity realistic style\n// Overall footprint ~55 mm × 25 mm × 40 mm (L×W×H)\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main deck platform\nmodule deck() {\n    difference() {\n        // Solid deck slab\n        translate([0, 0, 20]) cube([55, 25, wall], center = true);\n        // Lightening slots\n        for (x = [-20:10:20])\n            translate([x, 0, 20 - wall - 0.1])\n                cube([6, 20, wall + 0.2], center = true);\n    }\n}\n\n// Hand-rail stanchion\nmodule stanchion(h) {\n    cylinder(h = h - wall, r = 1.5, $fn = 12);\n}\n\n// Continuous hand-rail tube\nmodule handrail(h) {\n    translate([0, 0, h]) rotate([90, 0, 0])\n        cylinder(h = 55, r = 1.5, center = true, $fn = 12);\n}\n\n// Left + right railing assembly\nmodule railings() {\n    for (side = [-1, 1]) {\n        translate([0, side * 11.5, 0]) {\n            // Stanchions\n            for (x = [-22:11:22])\n                translate([x, 0, 20 + wall])\n                    stanchion(15);\n            // Top rail\n            translate([0, 0, 20 + wall])\n                handrail(15);\n        }\n    }\n}\n\n// Stair tread\nmodule tread() {\n    cube([10, 24, wall], center = true);\n}\n\n// Stairs module\nmodule stairs() {\n    for (i = [1:6]) {\n        translate([-27.5 - i * 8, 0, 20 - i * 3.2])\n            tread();\n    }\n}\n\n// Support legs under deck\nmodule legs() {\n    for (x = [-20:20:20])\n        translate([x, 0, 10])\n            cube([wall, 25, 20], center = true);\n}\n\n// Ladder vertical bars\nmodule ladder() {\n    for (x = [-2, 2])\n        translate([27.5 + 3, x, 10])\n            cube([wall, wall, 20], center = true);\n    // Rungs\n    for (z = [3:3:18])\n        translate([27.5 + 1.5, 0, z])\n            cube([wall, 4, wall], center = true);\n}\n\n// Combine everything\nunion() {\n    legs();\n    deck();\n    railings();\n    stairs();\n    ladder();\n}",
    "renders": true
  },
  {
    "vehicle": "centerconsole",
    "openscad_code": "// Center Console - Realistic Style, Medium Complexity\n// Dimensions: ~80mm x ~60mm x ~35mm\n\n$fn = 32;\nwall_thickness = 2;\ncorner_radius = 3;\n\nmodule rounded_cube(size, radius) {\n    hull() {\n        translate([radius, radius, radius]) \n            sphere(r=radius);\n        translate([size.x-radius, radius, radius]) \n            sphere(r=radius);\n        translate([radius, size.y-radius, radius]) \n            sphere(r=radius);\n        translate([size.x-radius, size.y-radius, radius]) \n            sphere(r=radius);\n        translate([radius, radius, size.z-radius]) \n            sphere(r=radius);\n        translate([size.x-radius, radius, size.z-radius]) \n            sphere(r=radius);\n        translate([radius, size.y-radius, size.z-radius]) \n            sphere(r=radius);\n        translate([size.x-radius, size.y-radius, size.z-radius]) \n            sphere(r=radius);\n    }\n}\n\nmodule main_body() {\n    difference() {\n        rounded_cube([80, 60, 30], corner_radius);\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            rounded_cube([80-2*wall_thickness, 60-2*wall_thickness, 30], corner_radius-1);\n    }\n}\n\nmodule cup_holder(x, y) {\n    translate([x, y, 0]) {\n        difference() {\n            cylinder(h=25, d=40);\n            translate([0, 0, wall_thickness])\n                cylinder(h=25, d=36);\n        }\n        // Drain holes\n        for(i = [0:3]) {\n            rotate([0, 0, i*90+45])\n                translate([15, 0, 1])\n                    cube([4, 2, 23], center=true);\n        }\n    }\n}\n\nmodule gear_shifter() {\n    translate([40, 20, 30]) {\n        // Base\n        cylinder(h=15, d=20);\n        // Lever\n        translate([0, 0, 15])\n            cylinder(h=25, d1=12, d2=8);\n    }\n}\n\nmodule storage_bin(x, y, w, h, d) {\n    translate([x, y, 0]) {\n        difference() {\n            rounded_cube([w, h, d], corner_radius);\n            translate([wall_thickness, wall_thickness, wall_thickness])\n                rounded_cube([w-2*wall_thickness, h-2*wall_thickness, d], corner_radius-1);\n        }\n    }\n}\n\nmodule buttons(x, y) {\n    translate([x, y, 30]) {\n        // Hazard button\n        cylinder(h=5, d=8);\n        // HVAC buttons\n        for(i = [0:2]) {\n            translate([i*15-15, 15, 0])\n                cylinder(h=5, d=6);\n        }\n    }\n}\n\nmodule vents(x, y) {\n    translate([x, y, 30]) {\n        // Vent housing\n        cube([30, 15, 10], center=true);\n        // Vent slats\n        for(i = [0:4]) {\n            translate([0, -7+i*3.5, 0])\n                rotate([0, 20, 0])\n                    cube([30, 1, 8], center=true);\n        }\n    }\n}\n\n// Assembly\nmain_body();\n\n// Left cup holder\ncup_holder(20, 45);\n\n// Right storage compartment\nstorage_bin(50, 40, 25, 15, 25);\n\n// Gear shifter\ngear_shifter();\n\n// Button panel\nbuttons(20, 15);\n\n// Center vents\nvents(55, 15);\n\n// USB ports\ntranslate([65, 10, 30]) {\n    for(i = [0:1]) {\n        translate([i*8, 0, 0])\n            cube([6, 4, 3], center=true);\n    }\n}\n\n// Armrest\ntranslate([40, 5, 30]) {\n    difference() {\n        rounded_cube([50, 10, 5], 2);\n        translate([5, 5, 2.5])\n            cube([40, 5, 2.5], center=true);\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "bowrider",
    "openscad_code": "// Bowrider boat model - realistic style, medium complexity\n// 3D printable, ~80mm length\n\n// Hull bottom - V-shaped for planing\nmodule hull_bottom() {\n    difference() {\n        hull() {\n            translate([0, -15, 0]) cube([80, 30, 8], center=true);\n            translate([0, -15, -8]) cube([75, 28, 8], center=true);\n            translate([0, -15, -12]) cube([65, 25, 8], center=true);\n        }\n        \n        // Taper the bow\n        translate([40, 0, 0]) rotate([0, 0, -25]) \n            cube([50, 50, 50], center=true);\n    }\n}\n\n// Hull sides with flare\nmodule hull_sides() {\n    difference() {\n        union() {\n            // Starboard side\n            translate([0, 15, 5]) cube([80, 3, 15], center=true);\n            // Port side\n            translate([0, -15, 5]) cube([80, 3, 15], center=true);\n            \n            // Bow flare\n            translate([38, 0, 5]) \n                rotate([0, 90, 0]) cylinder(h=30, r1=8, r2=12, center=true);\n        }\n        \n        // Cut out interior\n        translate([0, 0, 5]) cube([78, 28, 15], center=true);\n    }\n}\n\n// Deck with non-slip texture pattern\nmodule deck() {\n    difference() {\n        // Main deck\n        translate([0, 0, 12]) cube([80, 30, 2], center=true);\n        \n        // Cockpit cutout\n        translate([0, 0, 11]) cube([60, 20, 4], center=true);\n        \n        // Bow seating area\n        translate([30, 0, 11]) cube([20, 26, 4], center=true);\n    }\n    \n    // Non-slip pattern\n    for(x = [-35:5:35]) {\n        for(y = [-12:4:12]) {\n            translate([x, y, 13.1]) cube([1, 1, 0.5], center=true);\n        }\n    }\n}\n\n// Windshield frame\nmodule windshield() {\n    // Frame posts\n    for(side = [-1, 1]) {\n        translate([15, side*8, 10]) cylinder(h=12, r=1.5);\n        translate([5, side*8, 10]) cylinder(h=12, r=1.5);\n    }\n    \n    // Windshield panels\n    translate([10, 0, 16]) rotate([45, 0, 0]) \n        cube([12, 16, 1.5], center=true);\n}\n\n// Seating modules\nmodule seats() {\n    // Driver seat\n    translate([-10, -5, 6]) cube([8, 6, 5], center=true);\n    translate([-10, 5, 6]) cube([8, 6, 5], center=true);\n    \n    // Passenger seat\n    translate([-10, -5, 6]) mirror([0, 1, 0]) \n        cube([8, 6, 5], center=true);\n    \n    // Bow seating\n    for(x = [15:10:35]) {\n        translate([x, 0, 6]) cube([8, 22, 3], center=true);\n    }\n}\n\n// Console with steering wheel\nmodule console() {\n    // Main console\n    translate([-15, 0, 6]) cube([10, 8, 10], center=true);\n    \n    // Steering wheel\n    translate([-15, 0, 12]) rotate([90, 0, 0]) \n        difference() {\n            cylinder(h=1, r=4, center=true);\n            cylinder(h=2, r=2.5, center=true);\n        }\n}\n\n// Outboard motor mount\nmodule transom() {\n    // Transom plate\n    translate([-39, 0, 5]) cube([2, 28, 12], center=true);\n    \n    // Motor well\n    translate([-39, 0, -3]) cube([4, 10, 6], center=true);\n}\n\n// Assembly\nunion() {\n    hull_bottom();\n    hull_sides();\n    deck();\n    windshield();\n    seats();\n    console();\n    transom();\n}",
    "renders": true
  },
  {
    "vehicle": "deckboat",
    "openscad_code": "// Deckboat OpenSCAD model – realistic, medium complexity\n// Overall length ≈ 80 mm, width ≈ 30 mm, height ≈ 18 mm\n// Wall thickness 1 mm for 3D printing\n\nhull_length = 80;\nhull_width  = 30;\nhull_height = 12;\n\nwall = 1.0;\n\nmodule roundedBox(l, w, h, r) {\n    // Simple rounded-corner box using cylinders and cubes\n    translate([0, 0, h/2])\n    hull() {\n        for(dx = [-l/2+r, l/2-r], dy = [-w/2+r, w/2-r])\n            translate([dx, dy, 0])\n                cylinder(r=r, h=h, $fn=16);\n    }\n}\n\nmodule hull() {\n    difference() {\n        // Outer hull shell\n        scale([1, 1, 0.6])\n            roundedBox(hull_length, hull_width, hull_height, 3);\n\n        // Hollow interior\n        translate([0, 0, wall])\n            scale([1, 1, 0.6])\n            roundedBox(hull_length - 2*wall, hull_width - 2*wall, hull_height, 3);\n    }\n}\n\nmodule deckFloor() {\n    translate([0, 0, hull_height*0.6 - 0.1])\n        cube([hull_length - 4, hull_width - 2, wall], center=true);\n}\n\nmodule windscreen() {\n    // Center console windscreen\n    w = 12;\n    h = 7;\n    t = wall;\n    translate([0, 0, hull_height*0.6 + h/2])\n        cube([w, t, h], center=true);\n}\n\nmodule seat(x, y, rot=0) {\n    // Simple bench seat\n    w = 10; d = 5; h = 3;\n    translate([x, y, hull_height*0.6 + h/2])\n    rotate([0, 0, rot])\n        roundedBox(w, d, h, 1);\n}\n\nmodule railingBar(x1, y1, x2, y2, h) {\n    // Vertical rail post\n    dia = 1.5;\n    translate([(x1+x2)/2, (y1+y2)/2, h/2])\n    rotate([0, 90, atan2(y2-y1, x2-x1)])\n        cylinder(h=sqrt(pow(x2-x1,2)+pow(y2-y1,2)), d=dia, $fn=8);\n}\n\nmodule railing() {\n    // Bow rail posts\n    for(side = [-1, 1])\n    for(a = [0:30:150])\n        railingBar(hull_length/2*cos(a)*0.9,\n                   side*hull_width/2*sin(a)*0.9,\n                   hull_length/2*cos(a+30)*0.9,\n                   side*hull_width/2*sin(a+30)*0.9,\n                   6);\n}\n\nmodule motorBracket() {\n    // Outboard bracket at stern\n    translate([-hull_length/2 + 3, 0, hull_height*0.3])\n        cube([6, 10, hull_height*0.6], center=true);\n}\n\nmodule engine() {\n    // Simplified outboard engine\n    translate([-hull_length/2 - 3, 0, hull_height*0.3])\n        cylinder(h=10, d=6, center=true, $fn=12);\n}\n\n// Assembly\nunion() {\n    hull();\n    deckFloor();\n    windscreen();\n    seat(10, 0);\n    seat(-10, 0);\n    seat(0, -8, 90);\n    railing();\n    motorBracket();\n    engine();\n}",
    "renders": true
  },
  {
    "vehicle": "pontoonboat",
    "openscad_code": "// Pontoon Boat - Realistic Medium Complexity\n// Overall dimensions: 90mm L x 40mm W x 25mm H\n\n$fn = 32;  // Smooth curves\n\n// Main hull module\nmodule pontoon_hull(length, width, height) {\n    // Left pontoon\n    translate([-width/2 - 1, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h=length, d=height*0.8);\n    \n    // Right pontoon\n    translate([width/2 + 1, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h=length, d=height*0.8);\n    \n    // Deck platform\n    translate([0, 0, height*0.6])\n        cube([length, width, height*0.3], center=true);\n    \n    // Front nose cone left\n    translate([-width/2 - 1, length/2, 0])\n        rotate([0, 90, 0])\n        cylinder(h=height*0.6, d=height*0.8, d2=height*0.4);\n    \n    // Front nose cone right\n    translate([width/2 + 1, length/2, 0])\n        rotate([0, 90, 0])\n        cylinder(h=height*0.6, d=height*0.8, d2=height*0.4);\n    \n    // Rear cone left\n    translate([-width/2 - 1, -length/2, 0])\n        rotate([0, -90, 0])\n        cylinder(h=height*0.4, d=height*0.8, d2=height*0.6);\n    \n    // Rear cone right\n    translate([width/2 + 1, -length/2, 0])\n        rotate([0, -90, 0])\n        cylinder(h=height*0.4, d=height*0.8, d2=height*0.6);\n}\n\n// Safety rail posts\nmodule rail_post(height) {\n    translate([0, 0, height/2])\n        cylinder(h=height, d=2);\n}\n\n// Safety railing\nmodule safety_railing(length, width, height) {\n    // Front rail\n    translate([0, length/2 - 2, height])\n        cube([width + 4, 1, 2]);\n    \n    // Back rail\n    translate([0, -length/2 + 2, height])\n        cube([width + 4, 1, 2]);\n    \n    // Left rail\n    translate([-width/2 - 2, 0, height])\n        cube([1, length - 4, 2]);\n    \n    // Right rail\n    translate([width/2 + 2, 0, height])\n        cube([1, length - 4, 2]);\n    \n    // Corner posts\n    for(x = [-width/2 - 2, width/2 + 2])\n        for(y = [length/2 - 2, -length/2 + 2])\n            translate([x, y, height])\n                rail_post(6);\n    \n    // Mid posts\n    for(i = [-length/4, 0, length/4])\n        translate([-width/2 - 2, i, height])\n            rail_post(6);\n    \n    for(i = [-length/4, 0, length/4])\n        translate([width/2 + 2, i, height])\n            rail_post(6);\n}\n\n// Seating module\nmodule bench_seat(length, width, height) {\n    // Seat base\n    translate([0, 0, height])\n        cube([length*0.3, width*0.6, 3]);\n    \n    // Seat back\n    translate([0, length*0.12, height + 3])\n        cube([length*0.3, 3, 6]);\n}\n\n// Captain's chair\nmodule helm_seat(height) {\n    // Chair base\n    translate([0, -10, height])\n        cube([8, 8, 5]);\n    \n    // Chair back\n    translate([0, -6, height + 5])\n        cube([8, 3, 8]);\n}\n\n// Console/helm\nmodule helm_console(height) {\n    // Console base\n    translate([0, -15, height])\n        cube([12, 8, 10]);\n    \n    // Steering wheel post\n    translate([0, -15, height + 10])\n        cylinder(h=5, d=2);\n    \n    // Steering wheel\n    translate([0, -15, height + 15])\n        rotate([90, 0, 0])\n        cylinder(h=1, d=8);\n}\n\n// Main assembly\ndifference() {\n    union() {\n        // Main hull\n        pontoon_hull(90, 40, 25);\n        \n        // Safety railing\n        safety_railing(90, 40, 25);\n        \n        // Seating\n        bench_seat(90, 40, 25);\n        \n        // Second bench\n        translate([0, 20, 0])\n            bench_seat(90, 40, 25);\n        \n        // Helm area\n        translate([0, -25, 0])\n            helm_seat(25);\n        \n        // Console\n        translate([0, -25, 0])\n            helm_console(25);\n    }\n    \n    // Cutouts for weight reduction\n    for(i = [-30, -15, 0, 15, 30])\n        translate([i, 0, 25])\n            cube([8, 30, 5], center=true);\n}",
    "renders": true
  },
  {
    "vehicle": "jet",
    "openscad_code": "// Jet Fighter - Realistic Medium Complexity\n// 3D printable model with proper wall thickness and no overhangs\n\n// Configuration\n$fn = 32;\nwall = 1.2;\n\n// Main fuselage module\nmodule fuselage() {\n    // Main body - streamlined cylinder\n    hull() {\n        cylinder(h=40, d1=12, d2=8, center=true);\n        translate([0, 0, 15]) cylinder(h=20, d1=8, d2=6, center=true);\n    }\n    \n    // Cockpit\n    translate([0, 0, 25]) \n        scale([1, 0.8, 0.6]) \n        sphere(d=10);\n    \n    // Nose cone\n    translate([0, 0, -22]) \n        cylinder(h=8, d1=2, d2=12, center=true);\n}\n\n// Wing module\nmodule wing() {\n    // Main wing\n    difference() {\n        // Wing body\n        translate([0, 0, -5]) \n            cube([45, 25, 2], center=true);\n        \n        // Wing tip taper\n        translate([22, 0, -5]) \n            cube([3, 25, 5], center=true);\n    }\n    \n    // Wing root fairing\n    hull() {\n        translate([0, 12.5, -5]) cylinder(h=2, d=3);\n        translate([0, 12.5, -3]) cylinder(h=2, d=1.5);\n    }\n}\n\n// Tail module\nmodule tail() {\n    // Vertical stabilizer\n    translate([0, 0, 15]) {\n        rotate([0, 90, 0]) \n            cylinder(h=15, d1=1, d2=8, center=true);\n    }\n    \n    // Horizontal stabilizers\n    for(side = [-1, 1]) {\n        translate([0, side * 15, 15]) \n            rotate([0, 0, side * 5]) \n            cube([20, 1, 6], center=true);\n    }\n}\n\n// Engine modules\nmodule engine() {\n    // Engine nacelle\n    difference() {\n        cylinder(h=15, d=8, center=true);\n        cylinder(h=15, d=6, center=true);\n    }\n    \n    // Intake\n    translate([0, 0, -7.5]) \n        cylinder(h=3, d1=6, d2=8, center=true);\n}\n\n// Landing gear module\nmodule landing_gear() {\n    // Main gear struts\n    for(side = [-1, 1]) {\n        translate([side * 15, 0, -20]) \n            cylinder(h=8, d=1.5, center=true);\n    }\n    \n    // Nose gear\n    translate([0, 0, -22]) \n        cylinder(h=6, d=1.2, center=true);\n}\n\n// Weapon pylons\nmodule pylons() {\n    for(side = [-1, 1]) {\n        translate([10, side * 12.5, -5]) \n            cube([8, 2, 1], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main body\n    fuselage();\n    \n    // Wings (mirrored)\n    for(side = [-1, 1]) {\n        translate([0, side * 12.5, 0]) \n            mirror([0, side, 0]) \n            wing();\n    }\n    \n    // Tail assembly\n    tail();\n    \n    // Engines (under wings)\n    for(side = [-1, 1]) {\n        translate([side * 15, 0, -15]) \n            rotate([90, 0, 0]) \n            engine();\n    }\n    \n    // Landing gear\n    landing_gear();\n    \n    // Pylons\n    pylons();\n}",
    "renders": true
  },
  {
    "vehicle": "ski",
    "openscad_code": "// Realistic 3D-printable ski – medium complexity\n// Overall length ≈ 85 mm, width ≈ 12 mm, thickness ≈ 3 mm\n\n// Adjustable parameters\nski_length = 85;\nski_width = 12;\nski_thickness = 3;\nwall = 1;               // 3D-print-friendly wall thickness\ntip_upsweep = 8;        // vertical rise of ski tip\n\n// Main ski body profile (tapered toward tip & tail)\nmodule ski_body() {\n    // Taper along length\n    for(i=[0:ski_length]) {\n        taper = 1 - pow(abs(i - ski_length/2) / (ski_length/2), 2);\n        hull() {\n            translate([i, -ski_width*taper/2, 0])\n                cylinder(h=ski_thickness, d=ski_thickness, $fn=8);\n            translate([i,  ski_width*taper/2, 0])\n                cylinder(h=ski_thickness, d=ski_thickness, $fn=8);\n        }\n    }\n}\n\n// Raised tip curve\nmodule tip_curve() {\n    difference() {\n        hull() {\n            translate([0, 0, 0])\n                sphere(d=ski_thickness, $fn=12);\n            translate([ski_length*0.2, 0, tip_upsweep])\n                sphere(d=ski_thickness, $fn=12);\n        }\n        // Remove bottom excess\n        translate([ski_length*0.1, 0, -ski_thickness])\n            cube([ski_length*0.2, ski_width*2, ski_thickness*2], center=true);\n    }\n}\n\n// Tail block (slightly thicker for binding mount)\nmodule tail_block() {\n    translate([ski_length*0.8, 0, 0])\n        scale([1, 1.1, 1.3])\n            cube([ski_length*0.2, ski_width*0.9, ski_thickness], center=true);\n}\n\n// Binding mount holes (two rows)\nmodule binding_holes() {\n    for(x=[ski_length*0.85, ski_length*0.9])\n        for(y=[-ski_width*0.3, ski_width*0.3])\n            translate([x, y, 0])\n                cylinder(h=ski_thickness+0.1, d=wall*1.5, $fn=12);\n}\n\n// Metal edges along sides\nmodule edges() {\n    for(side=[-1,1])\n        translate([0, side*ski_width/2, 0])\n            rotate([90,0,0])\n                cylinder(h=ski_length, d=wall, $fn=8);\n}\n\n// Base surface (flat with slight camber)\nmodule base_surface() {\n    hull() {\n        translate([0, 0, 0])\n            cube([ski_length, ski_width, wall], center=true);\n        translate([ski_length*0.5, 0, 0.5])\n            cube([ski_length*0.9, ski_width*0.9, wall], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main body\n    ski_body();\n    \n    // Tip and tail additions\n    translate([0, 0, ski_thickness/2])\n        tip_curve();\n    translate([0, 0, ski_thickness/2])\n        tail_block();\n    \n    // Edges\n    edges();\n    \n    // Base\n    translate([0, 0, -ski_thickness/2 + wall/2])\n        base_surface();\n    \n    // Remove binding holes\n    difference() {\n        children();\n        binding_holes();\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "personalwatercraft",
    "openscad_code": "// Personal Watercraft - Realistic Medium Complexity\n// Designed for 3D printing (no overhangs >45°)\n\n$fn = 32;\nscale_factor = 0.4;  // Scale to ~80mm length\n\nmodule hull() {\n    // Main hull body - tapered with smooth bottom\n    difference() {\n        hull_shape();\n        // Remove interior for hollow print\n        translate([0, 0, -1])\n            scale([0.9, 0.85, 0.9])\n            hull_shape();\n    }\n}\n\nmodule hull_shape() {\n    union() {\n        // Front nose section\n        translate([-25, 0, 0])\n            scale([1.2, 1, 1])\n            sphere(d=30);\n        \n        // Main hull body\n        translate([0, 0, -5])\n            cube([50, 35, 20], center=true);\n        \n        // Rear tapered section\n        translate([30, 0, 0])\n            rotate([0, 10, 0])\n            cube([25, 30, 15], center=true);\n    }\n}\n\nmodule seat() {\n    // Rider seat with cushion detail\n    translate([5, 0, 12])\n    difference() {\n        // Main seat cushion\n        scale([1, 1, 0.4])\n            sphere(d=25);\n        \n        // Remove bottom part\n        translate([0, 0, -8])\n            cube([30, 25, 20], center=true);\n    }\n}\n\nmodule handlebars() {\n    // Handlebar assembly\n    translate([-5, 0, 15])\n    union() {\n        // Steering column\n        cylinder(h=12, d=8, center=true);\n        \n        // Handlebar crossbar\n        translate([0, 0, 6])\n            rotate([90, 0, 0])\n            cylinder(h=25, d=6, center=true);\n        \n        // Hand grips\n        for(y = [-10, 10]) {\n            translate([0, y, 6])\n                rotate([90, 0, 0])\n                cylinder(h=8, d=8);\n        }\n    }\n}\n\nmodule intake_grate() {\n    // Water intake grate at rear bottom\n    translate([30, 0, -8])\n    difference() {\n        // Base plate\n        cube([15, 25, 2], center=true);\n        \n        // Grate slots\n        for(x = [-6, -3, 0, 3, 6]) {\n            translate([x, 0, 1])\n                cube([2, 20, 2], center=true);\n        }\n    }\n}\n\nmodule jet_nozzle() {\n    // Rear jet nozzle\n    translate([40, 0, 0])\n    rotate([0, -15, 0])\n    cylinder(h=15, d1=12, d2=8);\n}\n\nmodule foot_wells() {\n    // Foot placement areas\n    difference() {\n        hull();\n        \n        // Left foot well\n        translate([10, 12, 0])\n            scale([0.8, 0.6, 0.8])\n            rotate([0, 20, -10])\n            cube([20, 15, 20], center=true);\n        \n        // Right foot well\n        translate([10, -12, 0])\n            scale([0.8, 0.6, 0.8])\n            rotate([0, 20, 10])\n            cube([20, 15, 20], center=true);\n    }\n}\n\nmodule side_mirrors() {\n    // Rear view mirrors on sides\n    for(side = [-1, 1]) {\n        translate([0, side*15, 18])\n        union() {\n            // Mirror stalk\n            rotate([0, 0, side*20])\n                cylinder(h=12, d=3);\n            \n            // Mirror head\n            translate([5, side*5, 0])\n                rotate([0, 10, 0])\n                scale([1, 1.5, 0.3])\n                sphere(d=8);\n        }\n    }\n}\n\n// Main assembly\nscale([scale_factor, scale_factor, scale_factor]) {\n    union() {\n        foot_wells();\n        seat();\n        handlebars();\n        intake_grate();\n        jet_nozzle();\n        side_mirrors();\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "wave",
    "openscad_code": "/* Realistic 3D-printable wave\n   ~80 mm long x 40 mm wide x 25 mm high\n   No overhangs ≥45°, 2 mm walls, flat base */\n\n$fn = 30;          // smooth curves\n\n// overall dimensions\nwave_length = 80;\nwave_width  = 40;\nwave_height = 20;\n\n// wall / thickness parameters\nwall        = 2;\nbase_thick  = 3;\n\n// wave profile parameters\namplitude   = wave_height - base_thick;\nperiods     = 2;                 // two full sine cycles along length\nsegments    = 60;                // segments along length\nseg_len     = wave_length / segments;\n\n/* build the wave */\nunion() {\n    // 1) solid base plate\n    translate([0, 0, -base_thick/2])\n        cube([wave_length, wave_width, base_thick], center = true);\n\n    // 2) outer shell of the wave surface\n    outer_shell();\n\n    // 3) inner shell to hollow out the wave\n    translate([0, 0, -wall]) inner_shell();\n}\n\n/* outer wave surface */\nmodule outer_shell() {\n    for (i = [0 : segments-1]) {\n        x0 = -wave_length/2 + i*seg_len;\n        x1 = x0 + seg_len;\n\n        y0 = -wave_width/2;\n        y1 =  wave_width/2;\n\n        z0 = base_thick + amplitude * sin(periods*2*PI*(i)/segments);\n        z1 = base_thick + amplitude * sin(periods*2*PI*(i+1)/segments);\n\n        // create one segment as a thin box\n        hull() {\n            translate([x0, y0, z0]) sphere(r = wall/2);\n            translate([x1, y0, z1]) sphere(r = wall/2);\n            translate([x0, y1, z0]) sphere(r = wall/2);\n            translate([x1, y1, z1]) sphere(r = wall/2);\n        }\n    }\n}\n\n/* inner wave surface (offset inwards) */\nmodule inner_shell() {\n    for (i = [0 : segments-1]) {\n        x0 = -wave_length/2 + i*seg_len;\n        x1 = x0 + seg_len;\n\n        y0 = -wave_width/2 + wall;\n        y1 =  wave_width/2 - wall;\n\n        z0 = base_thick + (amplitude-wall) * sin(periods*2*PI*(i)/segments);\n        z1 = base_thick + (amplitude-wall) * sin(periods*2*PI*(i+1)/segments);\n\n        hull() {\n            translate([x0, y0, z0]) sphere(r = wall/4);\n            translate([x1, y0, z1]) sphere(r = wall/4);\n            translate([x0, y1, z0]) sphere(r = wall/4);\n            translate([x1, y1, z1]) sphere(r = wall/4);\n        }\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "seadoo",
    "openscad_code": "// Seadoo Watercraft - Medium complexity 3D printable model\n// Approximate size: 90mm length, 35mm width, 30mm height\n\n$fn = 32;  // Smooth curves for printing\n\nmodule main_hull() {\n    difference() {\n        // Main hull body\n        hull() {\n            // Front tapered section\n            translate([0, 0, 8]) scale([1, 0.6, 0.4]) sphere(d=30);\n            // Rear wider section\n            translate([-35, 0, 5]) scale([1.2, 1, 0.5]) sphere(d=35);\n        }\n        \n        // Remove bottom to flatten\n        translate([-50, -25, -5]) cube([100, 50, 10]);\n        \n        // Jet intake hole\n        translate([-42, 0, 2]) rotate([0, 90, 0]) cylinder(h=20, d=8);\n    }\n}\n\nmodule seat() {\n    // Main seat cushion\n    translate([-15, 0, 15]) scale([1, 0.8, 0.3]) sphere(d=25);\n    \n    // Seat back\n    translate([-25, 0, 20]) scale([0.8, 0.9, 0.4]) sphere(d=20);\n}\n\nmodule handlebars() {\n    // Steering column\n    translate([-10, 0, 18]) cylinder(h=15, d=4);\n    \n    // Handlebar cross\n    translate([-10, 0, 32]) rotate([90, 0, 0]) cylinder(h=20, d=3);\n    \n    // Grips\n    for(side = [-1, 1]) {\n        translate([-10, side*8, 32]) rotate([90, 0, 0]) cylinder(h=5, d=4);\n    }\n}\n\nmodule front_bumper() {\n    // Front protective bumper\n    translate([15, 0, 5]) rotate([90, 0, 0]) cylinder(h=30, d=5);\n    translate([15, -12, 5]) rotate([90, 0, 0]) cylinder(h=5, d=5);\n    translate([15, 12, 5]) rotate([90, 0, 0]) cylinder(h=5, d=5);\n}\n\nmodule engine_cover() {\n    // Rear engine cover\n    difference() {\n        translate([-30, 0, 12]) scale([1.2, 1.1, 0.4]) sphere(d=25);\n        // Ventilation grilles\n        for(i = [-2:2]) {\n            translate([-35, i*6, 12]) cube([10, 2, 2]);\n        }\n    }\n}\n\nmodule footwells() {\n    // Left footwell\n    difference() {\n        translate([-20, -12, 5]) cube([40, 12, 8]);\n        translate([-15, -10, 7]) cube([30, 8, 6]);\n    }\n    \n    // Right footwell\n    difference() {\n        translate([-20, 0, 5]) cube([40, 12, 8]);\n        translate([-15, 2, 7]) cube([30, 8, 6]);\n    }\n}\n\nmodule mirrors() {\n    // Left mirror\n    translate([-10, -12, 30]) rotate([0, -20, 0]) cylinder(h=8, d=2);\n    translate([-10, -18, 32]) sphere(d=4);\n    \n    // Right mirror\n    translate([-10, 12, 30]) rotate([0, 20, 0]) cylinder(h=8, d=2);\n    translate([-10, 18, 32]) sphere(d=4);\n}\n\n// Scale entire model to fit print bed\nscale(0.3) {\n    union() {\n        main_hull();\n        seat();\n        handlebars();\n        front_bumper();\n        engine_cover();\n        footwells();\n        mirrors();\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "paddleboard",
    "openscad_code": "// Paddleboard model - realistic style, medium complexity\n// Dimensions: 90mm long x 30mm wide x 8mm thick\n// Wall thickness: 2mm for 3D printing\n\n$fn = 32;\n\n// Main parameters\nboard_length = 90;\nboard_width = 30;\nboard_thickness = 8;\nwall_thickness = 2;\n\n// Create the main board shape\nmodule board_shape() {\n    // Tapered hull shape using scaled cubes\n    union() {\n        // Front section - tapered nose\n        for (i = [0:9]) {\n            translate([i*2, 0, 0])\n                scale([1, 1 - (i*0.05), 1 - (i*0.05)])\n                cube([2, board_width, board_thickness], center = true);\n        }\n        \n        // Main body - constant width\n        translate([10, 0, 0])\n            cube([70, board_width, board_thickness], center = true);\n        \n        // Rear section - tapered tail\n        for (i = [0:4]) {\n            translate([80 + i*2, 0, 0])\n                scale([1, 1 - (i*0.1), 1 - (i*0.1)])\n                cube([2, board_width, board_thickness], center = true);\n        }\n    }\n}\n\n// Create deck pad texture\nmodule deck_pad() {\n    // EVA foam pad pattern\n    for (x = [-30:10:30]) {\n        for (y = [-10:5:10]) {\n            translate([x, y, board_thickness/2 + 0.5])\n                cube([8, 3, 1], center = true);\n        }\n    }\n}\n\n// Create fin box\nmodule fin_box() {\n    // Center fin box\n    translate([board_length/2 - 35, 0, -board_thickness/2 - 1])\n        cube([20, 8, 4], center = true);\n    \n    // Fin\n    translate([board_length/2 - 35, 0, -board_thickness/2 - 3])\n        union() {\n            cube([15, 1, 6]);\n            translate([0, -3, 0])\n                cube([15, 6, 1]);\n        }\n}\n\n// Create leash plug\nmodule leash_plug() {\n    translate([board_length/2 - 42, 0, board_thickness/2])\n        cylinder(h = 3, r = 2);\n}\n\n// Create handle\nmodule handle() {\n    // Recessed handle in center\n    translate([0, 0, 0])\n        difference() {\n            cube([15, board_width - 10, board_thickness], center = true);\n            translate([0, 0, -wall_thickness])\n                cube([13, board_width - 12, board_thickness + 2], center = true);\n        }\n}\n\n// Create rails (edges)\nmodule rails() {\n    hull() {\n        // Top rail\n        translate([board_length/2 - 45, -board_width/2, board_thickness/2])\n            sphere(r = wall_thickness);\n        translate([board_length/2 + 45, -board_width/2, board_thickness/2])\n            sphere(r = wall_thickness);\n        translate([board_length/2 - 45, board_width/2, board_thickness/2])\n            sphere(r = wall_thickness);\n        translate([board_length/2 + 45, board_width/2, board_thickness/2])\n            sphere(r = wall_thickness);\n            \n        // Bottom rail\n        translate([board_length/2 - 45, -board_width/2, -board_thickness/2])\n            sphere(r = wall_thickness);\n        translate([board_length/2 + 45, board_width/2, -board_thickness/2])\n            sphere(r = wall_thickness);\n    }\n}\n\n// Main assembly\nunion() {\n    // Hollowed board\n    difference() {\n        // Outer shape\n        board_shape();\n        \n        // Inner hollow\n        scale([0.9, 0.9, 0.75])\n            board_shape();\n    }\n    \n    // Add rails for smooth edges\n    rails();\n    \n    // Add deck pad on top\n    translate([board_length/2 - 25, 0, 0])\n        deck_pad();\n    \n    // Add fin box and fin\n    fin_box();\n    \n    // Add leash plug\n    leash_plug();\n    \n    // Add handle\n    handle();\n}",
    "renders": true
  },
  {
    "vehicle": "surfboard",
    "openscad_code": "// Realistic 3D printable surfboard ~70 mm long\n// Medium complexity with fins, leash plug, and slight rocker\n\n// Wall thickness for printing\nwall = 1.5;\n\n// Overall board dimensions\nboard_len = 70;\nboard_w   = 20;\nboard_t   = 3;\n\n// Nose and tail curvature\nnose_radius = board_w * 0.7;\ntail_radius = board_w * 0.4;\n\n// Rocker\nnose_lift = 3;\ntail_lift = 1.5;\n\nmodule surfboard() {\n    // Main deck shell\n    difference() {\n        // Outer shape\n        hull() {\n            // Nose sphere\n            translate([board_len/2 - nose_radius, 0, nose_lift])\n                scale([1, 0.7, 0.5])\n                sphere(nose_radius, $fn=40);\n\n            // Tail sphere\n            translate([-board_len/2 + tail_radius, 0, tail_lift])\n                scale([1, 0.7, 0.5])\n                sphere(tail_radius, $fn=40);\n\n            // Mid section\n            for (i = [-1, 1]) mirror([0, i, 0]) {\n                hull() {\n                    translate([board_len/2 - nose_radius, 0, nose_lift])\n                        sphere(0.1);\n                    translate([-board_len/2 + tail_radius, 0, tail_lift])\n                        sphere(0.1);\n                    translate([0, board_w/2, 0])\n                        sphere(0.1);\n                }\n            }\n        }\n\n        // Hollow interior\n        translate([0, 0, -wall])\n            scale([0.8, 0.8, 0.5])\n            hull() {\n                // Nose\n                translate([board_len/2 - nose_radius, 0, nose_lift])\n                    scale([1, 0.7, 0.5])\n                    sphere(nose_radius - wall*2);\n                // Tail\n                translate([-board_len/2 + tail_radius, 0, tail_lift])\n                    scale([1, 0.7, 0.5])\n                    sphere(tail_radius - wall*2);\n                // Mid\n                for (i = [-1, 1]) mirror([0, i, 0]) {\n                    hull() {\n                        translate([board_len/2 - nose_radius, 0, nose_lift])\n                            sphere(0.1);\n                        translate([-board_len/2 + tail_radius, 0, tail_lift])\n                            sphere(0.1);\n                        translate([0, board_w/2 - wall, 0])\n                            sphere(0.1);\n                    }\n                }\n            }\n    }\n\n    // Fins (thruster setup)\n    module fin(h, l, w) {\n        difference() {\n            hull() {\n                translate([0, 0, 0]) cube([l, w, 0.1], center=true);\n                translate([0, 0, h]) cube([l/3, w/2, 0.1], center=true);\n            }\n            translate([0, 0, -1]) cube([l+2, w+2, h+2], center=true);\n        }\n    }\n\n    // Side fins\n    for (i = [-1, 1]) {\n        translate([-board_len/3, i*(board_w/2 - 1), tail_lift - wall]) {\n            rotate([0, 0, i*8])\n                rotate([90, 0, 0])\n                    fin(4, 6, wall);\n        }\n    }\n\n    // Center fin\n    translate([-board_len/3.5, 0, tail_lift - wall]) {\n        rotate([90, 0, 0])\n            fin(4.5, 7, wall);\n    }\n\n    // Leash plug\n    translate([-board_len/2 + 2, 0, tail_lift - wall/2]) {\n        difference() {\n            cylinder(h=wall*2, r=2, $fn=20);\n            cylinder(h=wall*2 + 1, r=1.5, $fn=20);\n        }\n    }\n\n    // Stringer ridge\n    linear_extrude(height=board_t/2, center=true)\n        polygon(points=[\n            [-board_len/2, -0.5],\n            [board_len/2, -0.5],\n            [board_len/2, 0.5],\n            [-board_len/2, 0.5]\n        ]);\n}\n\n// Render the board\nsurfboard();",
    "renders": true
  },
  {
    "vehicle": "windsurfer",
    "openscad_code": "// Windsurfer model - medium complexity realistic style\n// Overall length ~80mm, printable in one piece\n\n// Parameters\nboard_length = 80;\nboard_width = 22;\nboard_thickness = 6;\nmast_length = 60;\nboom_length = 30;\nfin_height = 12;\nfin_base = 8;\nsail_width = 25;\nsail_height = 45;\n\n// Main board hull shape\nmodule board() {\n    difference() {\n        // Main hull - tapered with rounded edges\n        hull() {\n            // Front section\n            translate([-board_length/2+5, 0, 0])\n                scale([1, 0.8, 1])\n                    sphere(d=board_width, $fn=20);\n            // Rear section\n            translate([board_length/2-15, 0, 0])\n                sphere(d=board_width*0.9, $fn=20);\n            // Middle section\n            translate([0, 0, -board_thickness/2])\n                cube([board_length*0.9, board_width*0.7, board_thickness], center=true);\n        }\n        \n        // Deck recess\n        translate([0, 0, board_thickness/2-1])\n            cube([board_length*0.8, board_width*0.6, 2], center=true);\n            \n        // Foot strap holes (4 positions)\n        for(pos = [[-20, 8], [-20, -8], [15, 6], [15, -6]]) {\n            translate([pos[0], pos[1], board_thickness/2-1])\n                cylinder(h=3, d=3, $fn=8);\n        }\n    }\n}\n\n// Fin box and fin\nmodule fin() {\n    // Fin box\n    translate([-board_length/2+30, 0, -board_thickness/2-3])\n        cube([12, 4, 6], center=true);\n    \n    // Fin\n    translate([-board_length/2+30, 0, -board_thickness/2-3-fin_height/2])\n        difference() {\n            // Main fin shape\n            linear_extrude(height=fin_height, convexity=10)\n                polygon(points=[\n                    [-fin_base/2, 0],\n                    [fin_base/2, 0],\n                    [0, fin_height*0.9],\n                    [-fin_base/4, fin_height*0.95],\n                    [fin_base/4, fin_height*0.95]\n                ]);\n                \n            // Fin thickness reduction\n            translate([0, 0, fin_height/2-1])\n                cube([fin_base*0.8, 0.5, fin_height-2], center=true);\n        }\n}\n\n// Mast base\nmodule mast_base() {\n    translate([5, 0, board_thickness/2-1])\n        difference() {\n            cylinder(h=5, d=6, $fn=16);\n            cylinder(h=6, d=3, $fn=16);\n        }\n}\n\n// Mast\nmodule mast() {\n    translate([5, 0, board_thickness/2+2])\n        cylinder(h=mast_length, d=3, $fn=8);\n}\n\n// Boom\nmodule boom() {\n    translate([5, 0, board_thickness/2+15])\n        rotate([90, 0, 0])\n        union() {\n            // Boom arm\n            cylinder(h=boom_length, d=2, $fn=8);\n            \n            // Boom grip sections\n            for(i = [5:5:boom_length-5]) {\n                translate([0, 0, i])\n                    cylinder(h=3, d=2.5, $fn=8);\n            }\n        }\n}\n\n// Sail\nmodule sail() {\n    // Mast sleeve\n    translate([5, 0, board_thickness/2+5])\n        rotate([90, 0, 0])\n        cylinder(h=sail_height, d=3.5, $fn=8);\n    \n    // Main sail body\n    translate([5, sail_width/2, board_thickness/2+5+sail_height/2])\n        rotate([0, 90, 0])\n        difference() {\n            // Sail shape\n            scale([1, sail_height/2, sail_width/2])\n                sphere(d=1, $fn=4);\n                \n            // Cut to flat sail\n            translate([0, 0, -sail_width/2-1])\n                cube([sail_height*2, sail_height*2, sail_width+2], center=true);\n                \n            // Batten indents\n            for(i = [8:8:sail_height-8]) {\n                translate([i-sail_height/2, 0, 0])\n                    cube([1, sail_height*2, sail_width*0.8], center=true);\n            }\n        }\n}\n\n// Assembly\nunion() {\n    board();\n    fin();\n    mast_base();\n    mast();\n    boom();\n    sail();\n}",
    "renders": true
  },
  {
    "vehicle": "kitesurf",
    "openscad_code": "// Kitesurf Board - Realistic Style, Medium Complexity\n// Overall dimensions: ~100mm long, 35mm wide, 10mm thick\n\n// Parameters\nboard_length = 100;\nboard_width = 35;\nboard_thickness = 4;\nfin_height = 10;\nfin_thickness = 3;\nfootpad_length = 25;\nfootpad_width = 12;\nfootpad_thickness = 2;\nstrap_width = 4;\nstrap_thickness = 1.5;\nhandle_length = 20;\nhandle_width = 15;\nhandle_thickness = 2;\n\n// Main board with rounded edges\nmodule board() {\n    // Base board shape\n    difference() {\n        // Main board body with rounded ends\n        hull() {\n            translate([-board_length/2, 0, 0])\n                scale([1, 0.3, 1])\n                sphere(d=board_width, $fn=30);\n            translate([board_length/2, 0, 0])\n                scale([1, 0.3, 1])\n                sphere(d=board_width, $fn=30);\n            cube([board_length, board_width, board_thickness], center=true);\n        }\n        \n        // Taper edges slightly for realistic shape\n        for(i = [-1, 1]) {\n            translate([i * board_length/3, 0, board_thickness/2 - 1])\n                rotate([0, 90, 0])\n                cylinder(h=board_width*1.2, r=board_thickness, center=true, $fn=20);\n        }\n    }\n}\n\n// Fins on bottom\nmodule fins() {\n    for(pos = [-25, 0, 25]) {\n        translate([pos, 0, -board_thickness/2 - fin_height/2])\n            difference() {\n                cube([fin_thickness*2, 20, fin_height], center=true);\n                translate([0, 0, fin_height/2 - 1])\n                    cube([fin_thickness*2 + 0.5, 21, 2], center=true);\n            }\n    }\n}\n\n// Foot pads\nmodule footpads() {\n    for(side = [-1, 1]) {\n        translate([0, side * (board_width/4), board_thickness/2 + footpad_thickness/2])\n            difference() {\n                // Main pad\n                cube([footpad_length, footpad_width, footpad_thickness], center=true);\n                \n                // Grooves for grip\n                for(g = [-8, -4, 0, 4, 8]) {\n                    translate([g, 0, footpad_thickness/2 - 0.1])\n                        cube([0.5, footpad_width - 2, 0.2], center=true);\n                }\n            }\n    }\n}\n\n// Foot straps\nmodule straps() {\n    for(side = [-1, 1]) {\n        translate([0, side * (board_width/4), board_thickness/2 + footpad_thickness + strap_thickness/2])\n            difference() {\n                // Main strap\n                cube([footpad_length - 5, strap_width, strap_thickness], center=true);\n                \n                // Rounded edges\n                translate([footpad_length/2 - 2.5, 0, 0])\n                    rotate([0, 90, 0])\n                    cylinder(h=strap_width, r=strap_thickness/2, center=true, $fn=10);\n                translate([-footpad_length/2 + 2.5, 0, 0])\n                    rotate([0, 90, 0])\n                    cylinder(h=strap_width, r=strap_thickness/2, center=true, $fn=10);\n            }\n    }\n}\n\n// Center handle\nmodule handle() {\n    translate([0, 0, board_thickness/2 + handle_thickness/2 + 3])\n        difference() {\n            // Handle base\n            cube([handle_length, handle_width, handle_thickness], center=true);\n            \n            // Cutout for fingers\n            translate([0, 0, handle_thickness/2 - 0.1])\n                cube([handle_length - 8, handle_width - 8, handle_thickness + 0.2], center=true);\n                \n            // Rounded corners\n            for(corner = [[1,1], [1,-1], [-1,1], [-1,-1]]) {\n                translate([corner[0] * (handle_length/2 - 1), corner[1] * (handle_width/2 - 1), 0])\n                    cylinder(h=handle_thickness + 0.2, r=1, center=true, $fn=8);\n            }\n        }\n}\n\n// Assembly\nunion() {\n    board();\n    fins();\n    footpads();\n    straps();\n    handle();\n}",
    "renders": true
  },
  {
    "vehicle": "foilsurf",
    "openscad_code": "// Foilsurf (Hydrofoil Surfboard) - Realistic Style, Medium Complexity\n// Overall length ~85 mm, printable without support\n\n$fn = 36;        // Smooth curves\nwall = 1.2;      // Printable wall thickness\n\nmodule board() {\n    // Main surfboard body - 65 mm long\n    hull() {\n        // Top deck\n        translate([0, 0, 5])\n            scale([1, 0.35, 0.15])\n                sphere(d = 60);\n        // Bottom hull\n        translate([0, 0, 1])\n            scale([1, 0.33, 0.08])\n                sphere(d = 60);\n    }\n    // Tapered tail\n    difference() {\n        translate([-30, 0, 3])\n            rotate([0, 10, 0])\n                scale([0.7, 0.3, 0.2])\n                    cube([25, 20, 10], center = true);\n        translate([-35, 0, 3])\n            rotate([0, 10, 0])\n                scale([0.8, 0.4, 0.25])\n                    cube([30, 22, 12], center = true);\n    }\n}\n\nmodule mast() {\n    // Mast 35 mm long\n    difference() {\n        union() {\n            // Main mast tube\n            translate([0, 0, -15])\n                rotate([90, 0, 0])\n                    cylinder(h = 32, d = 6, center = true);\n            // Top mounting plate\n            translate([0, 0, 1])\n                cube([12, 7, 1.5], center = true);\n        }\n        // Hollow tube for weight/material saving\n        translate([0, 0, -15])\n            rotate([90, 0, 0])\n                cylinder(h = 35, d = 3.5, center = true);\n    }\n}\n\nmodule fuselage() {\n    // Fuselage body 20 mm long\n    hull() {\n        // Front bulb\n        translate([0, 0, -32])\n            sphere(d = 6);\n        // Rear tail\n        translate([-15, 0, -32])\n            sphere(d = 4);\n    }\n    // Stabilizer mount\n    translate([-20, 0, -32])\n        rotate([90, 0, 0])\n            cylinder(h = 5, d1 = 4, d2 = 3);\n}\n\nmodule front_wing() {\n    // Main front wing 35 mm span\n    difference() {\n        // Wing body\n        translate([0, 0, -32])\n            rotate([0, 90, 0])\n                scale([1, 0.15, 0.3])\n                    cylinder(h = 35, d = 12, center = true);\n        // Leading edge taper\n        translate([3, 0, -32])\n            rotate([0, 90, 0])\n                scale([1, 0.15, 0.25])\n                    cylinder(h = 40, d = 10, center = true);\n    }\n    // Wing tips\n    for (y = [-17.5, 17.5])\n        translate([0, y, -32])\n            rotate([0, 90, 0])\n                scale([0.3, 0.15, 1])\n                    cylinder(h = 5, d = 8);\n}\n\nmodule rear_wing() {\n    // Rear stabilizer 20 mm span\n    difference() {\n        translate([-20, 0, -32])\n            rotate([0, 90, 0])\n                scale([1, 0.12, 0.25])\n                    cylinder(h = 20, d = 8, center = true);\n        translate([-17, 0, -32])\n            rotate([0, 90, 0])\n                scale([1, 0.12, 0.2])\n                    cylinder(h = 25, d = 6, center = true);\n    }\n}\n\n// Assemble all parts\nunion() {\n    board();\n    mast();\n    fuselage();\n    front_wing();\n    rear_wing();\n}",
    "renders": true
  },
  {
    "vehicle": "surfski",
    "openscad_code": "// Surfski - Realistic Medium Complexity\n// Scaled for 3D printing (approx 80mm long)\n\n// Hull parameters\nhull_length = 80;\nhull_width = 12;\nhull_height = 8;\nnose_taper = 0.6;\ntail_taper = 0.4;\n\n// Cockpit parameters\ncockpit_length = 25;\ncockpit_width = 8;\ncockpit_depth = 3;\ncockpit_offset = -10;\n\n// Footwell parameters\nfootwell_length = 20;\nfootwell_width = 6;\nfootwell_depth = 2;\nfootwell_offset = 20;\n\n// Rudder parameters\nrudder_height = 4;\nrudder_width = 3;\nrudder_thickness = 1;\n\n// Deck fittings\ndeck_line_diameter = 0.8;\ndeck_line_segments = 6;\n\n// Wall thickness for 3D printing\nwall_thickness = 1.5;\n\nmodule hull_shape() {\n    // Main hull body\n    hull_profile = hull_length / 2;\n    difference() {\n        union() {\n            // Main hull\n            translate([0, 0, hull_height/2]) {\n                scale([1, 1, 0.5]) {\n                    sphere(d = hull_width);\n                }\n            }\n            \n            // Nose\n            translate([hull_length/2 - hull_width/2, 0, hull_height/2]) {\n                scale([nose_taper, 1, 0.5]) {\n                    sphere(d = hull_width);\n                }\n            }\n            \n            // Tail\n            translate([-hull_length/2 + hull_width/2, 0, hull_height/2]) {\n                scale([tail_taper, 1, 0.5]) {\n                    sphere(d = hull_width);\n                }\n            }\n            \n            // Connect nose and tail\n            hull() {\n                translate([hull_length/2 - hull_width/2, 0, hull_height/2]) {\n                    sphere(d = hull_width * nose_taper);\n                }\n                translate([-hull_length/2 + hull_width/2, 0, hull_height/2]) {\n                    sphere(d = hull_width * tail_taper);\n                }\n            }\n        }\n        \n        // Hollow out interior\n        translate([0, 0, hull_height/2 + wall_thickness/2]) {\n            scale([1, 0.8, 0.4]) {\n                sphere(d = hull_width - wall_thickness * 2);\n            }\n        }\n    }\n}\n\nmodule cockpit() {\n    // Main cockpit opening\n    difference() {\n        translate([cockpit_offset, 0, hull_height]) {\n            scale([1, 0.8, 0.5]) {\n                cube([cockpit_length, cockpit_width, cockpit_depth], center = true);\n            }\n        }\n        \n        // Smooth edges\n        translate([cockpit_offset, 0, hull_height + 0.5]) {\n            scale([1, 0.8, 0.5]) {\n                cube([cockpit_length - 2, cockpit_width - 2, cockpit_depth + 1], center = true);\n            }\n        }\n    }\n    \n    // Footwell\n    difference() {\n        translate([footwell_offset, 0, hull_height]) {\n            scale([1, 0.6, 0.5]) {\n                cube([footwell_length, footwell_width, footwell_depth], center = true);\n            }\n        }\n        \n        // Smooth edges\n        translate([footwell_offset, 0, hull_height + 0.5]) {\n            scale([1, 0.6, 0.5]) {\n                cube([footwell_length - 2, footwell_width - 2, footwell_depth + 1], center = true);\n            }\n        }\n    }\n}\n\nmodule rudder_system() {\n    // Rudder mount\n    translate([-hull_length/2 + 2, 0, hull_height/2]) {\n        rotate([90, 0, 0]) {\n            cylinder(h = 2, d = 3, center = true);\n        }\n    }\n    \n    // Rudder blade\n    translate([-hull_length/2, 0, hull_height/2 - rudder_height/2]) {\n        cube([rudder_thickness, rudder_width, rudder_height], center = true);\n    }\n    \n    // Rudder post\n    translate([-hull_length/2, 0, hull_height/2]) {\n        rotate([90, 0, 0]) {\n            cylinder(h = rudder_height, d = 1.5, center = true);\n        }\n    }\n}\n\nmodule deck_fittings() {\n    // Deck lines\n    for(i = [-1:1]) {\n        y_pos = i * 3;\n        translate([cockpit_offset + 10, y_pos, hull_height + 0.5]) {\n            rotate([90, 0, 0]) {\n                cylinder(h = hull_length/4, d = deck_line_diameter);\n            }\n        }\n        \n        translate([cockpit_offset - 10, y_pos, hull_height + 0.5]) {\n            rotate([90, 0, 0]) {\n                cylinder(h = hull_length/4, d = deck_line_diameter);\n            }\n        }\n    }\n    \n    // Handles\n    translate([hull_length/2 - 2, 0, hull_height/2]) {\n        rotate([0, 90, 0]) {\n            difference() {\n                cylinder(h = 4, d = 2);\n                cylinder(h = 4.1, d = 1);\n            }\n        }\n    }\n    \n    translate([-hull_length/2 + 2, 0, hull_height/2]) {\n        rotate([0, 90, 0]) {\n            difference() {\n                cylinder(h = 4, d = 2);\n                cylinder(h = 4.1, d = 1);\n            }\n        }\n    }\n}\n\nmodule surfski() {\n    // Combine all components\n    union() {\n        hull_shape();\n        cockpit();\n        rudder_system();\n        deck_fittings();\n    }\n}\n\n// Render the surfski\nsurfski();",
    "renders": true
  },
  {
    "vehicle": "outriggercanoe",
    "openscad_code": "// Outrigger canoe – medium complexity, realistic style\n// Overall length ≈ 90 mm, printable without support\n\n$fn = 36;\n\n// Main assembly\nmodule outrigger_canoe() {\n    union() {\n        // Central hull\n        hull();\n\n        // Outrigger float (ama)\n        translate([32, -18, -5]) rotate([0, 5, 0]) ama();\n\n        // Two iako cross‐arms\n        iako(15);\n        translate([0, 0, 6]) rotate([0, 0, 180]) iako(15);\n\n        // Simple bench seats\n        translate([-20, 0, 5]) seat();\n        translate([10, 0, 5]) seat();\n    }\n}\n\n// Long, slender main hull\nmodule hull() {\n    difference() {\n        union() {\n            // Symmetric hull halves\n            mirror([0, 1, 0]) hull_half();\n            hull_half();\n        }\n        // Hollow interior\n        scale([0.9, 0.9, 0.9]) {\n            mirror([0, 1, 0]) hull_half();\n            hull_half();\n        }\n    }\n}\n\nmodule hull_half() {\n    // Create smooth curved hull via hull() of circles\n    hull() {\n        translate([-42, 0, 0]) scale([1, 0.5, 0.5]) sphere(d = 12);\n        translate([-20, 0, 0]) scale([1, 0.7, 0.7]) sphere(d = 14);\n        translate([0, 0, 0]) scale([1, 0.8, 0.8]) sphere(d = 15);\n        translate([20, 0, 0]) scale([1, 0.7, 0.7]) sphere(d = 12);\n        translate([40, 0, 0]) scale([1, 0.4, 0.4]) sphere(d = 8);\n    }\n}\n\n// Outrigger float (ama) – similar build\nmodule ama() {\n    difference() {\n        hull() {\n            translate([-15, 0, 0]) scale([1, 0.4, 0.4]) sphere(d = 8);\n            translate([0, 0, 0]) scale([1, 0.5, 0.5]) sphere(d = 10);\n            translate([15, 0, 0]) scale([1, 0.4, 0.4]) sphere(d = 8);\n        }\n        // Hollow\n        scale([0.8, 0.7, 0.7]) {\n            hull() {\n                translate([-15, 0, 0]) scale([1, 0.4, 0.4]) sphere(d = 8);\n                translate([0, 0, 0]) scale([1, 0.5, 0.5]) sphere(d = 10);\n                translate([15, 0, 0]) scale([1, 0.4, 0.4]) sphere(d = 8);\n            }\n        }\n    }\n}\n\n// Iako cross‐arm (boom)\nmodule iako(len = 15) {\n    rotate([0, -90, 0])\n    difference() {\n        // Slight taper toward ends\n        hull() {\n            translate([-len, 0, 0]) cylinder(h = len * 2, d1 = 3, d2 = 2);\n            translate([len, 0, 0]) cylinder(h = len * 2, d1 = 3, d2 = 2);\n        }\n        // Internal hole for weight\n        cylinder(h = len * 2 + 1, d = 1.5, $fn = 12);\n    }\n}\n\n// Simple bench seat\nmodule seat() {\n    difference() {\n        // Top plank\n        cube([20, 8, 2], center = true);\n        // Lightening holes\n        for (x = [-7, 0, 7])\n            translate([x, 0, 0]) cylinder(h = 3, d = 2, center = true);\n    }\n}\n\n// Render the model\noutrigger_canoe();",
    "renders": true
  },
  {
    "vehicle": "dragonboat",
    "openscad_code": "// Dragonboat - medium complexity realistic style\n// Scaled for 3D printing, ~80mm long\n\n// Hull parameters\nhull_length = 80;\nhull_width = 12;\nhull_height = 6;\nbow_height = 10;\nstern_height = 8;\n\n// Dragon head parameters\nhead_length = 15;\nhead_height = 10;\nhead_width = 10;\n\n// Paddle parameters\npaddle_length = 20;\npaddle_width = 2;\npaddle_thickness = 1;\npaddle_count = 10;\n\n// Support ribs\nrib_count = 5;\nrib_thickness = 1.5;\n\n// Hull module with tapered ends\nmodule hull() {\n    // Main hull body\n    hull_profile = [\n        [0, 0],\n        [hull_length*0.1, hull_height],\n        [hull_length*0.9, hull_height],\n        [hull_length, 0]\n    ];\n    \n    // Create hull shape\n    linear_extrude(height = hull_width, convexity = 10) {\n        polygon(points = hull_profile);\n    }\n}\n\n// Dragon head module\nmodule dragon_head() {\n    // Head base\n    translate([-head_length-2, -head_width/2, 0])\n    scale([1, 0.8, 1])\n    cylinder(h = head_height, r1 = head_width/2, r2 = head_width/3);\n    \n    // Snout\n    translate([-head_length-2, -head_width/4, head_height-2])\n    rotate([0, -30, 0])\n    cylinder(h = 8, r1 = head_width/3, r2 = 2);\n    \n    // Eyes\n    for(side = [-1, 1]) {\n        translate([-head_length-5, side*head_width/3, head_height-3])\n        sphere(r = 2);\n    }\n    \n    // Horns\n    for(side = [-1, 1]) {\n        translate([-head_length-2, side*head_width/2, head_height+1])\n        rotate([0, 0, side*30])\n        cylinder(h = 5, r1 = 1.5, r2 = 0.5);\n    }\n}\n\n// Dragon tail module\nmodule dragon_tail() {\n    // Tail base\n    translate([hull_length+2, -hull_width/2, 0])\n    scale([1, 0.6, 0.8])\n    cylinder(h = stern_height, r1 = hull_width/2, r2 = hull_width/4);\n    \n    // Tail fin\n    translate([hull_length+5, -1, stern_height-2])\n    rotate([0, 0, 0])\n    cube([8, 2, 6]);\n}\n\n// Paddle module\nmodule paddle() {\n    // Shaft\n    cylinder(h = paddle_length, r = 0.5);\n    \n    // Blade\n    translate([0, 0, paddle_length])\n    scale([1, 0.3, 1])\n    cube([paddle_width, paddle_thickness, 8], center = true);\n}\n\n// Support ribs\nmodule support_ribs() {\n    for(i = [1:rib_count-1]) {\n        translate([i*hull_length/rib_count, 0, 0])\n        rotate([0, 90, 0])\n        difference() {\n            cylinder(h = hull_width+2, r = hull_height+1);\n            cylinder(h = hull_width+3, r = hull_height-1);\n        }\n    }\n}\n\n// Seats/benches\nmodule seats() {\n    for(i = [1:paddle_count-1]) {\n        translate([i*hull_length/(paddle_count+1), -hull_width/2-1, hull_height])\n        cube([hull_width/2, 2, 1.5]);\n    }\n}\n\n// Main assembly\nunion() {\n    // Hull - rotate to correct orientation\n    rotate([90, 0, 0])\n    hull();\n    \n    // Dragon head\n    translate([-head_length/2, 0, hull_height])\n    dragon_head();\n    \n    // Dragon tail\n    translate([hull_length, 0, 0])\n    dragon_tail();\n    \n    // Support ribs\n    translate([0, 0, hull_height/2])\n    support_ribs();\n    \n    // Seats\n    seats();\n    \n    // Paddles along sides\n    for(i = [1:paddle_count-1]) {\n        // Left side paddles\n        translate([i*hull_length/(paddle_count+1), -hull_width/2-2, hull_height+2])\n        rotate([90, 0, 45])\n        paddle();\n        \n        // Right side paddles\n        translate([i*hull_length/(paddle_count+1), hull_width/2+2, hull_height+2])\n        rotate([90, 0, -45])\n        paddle();\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "warcanoe",
    "openscad_code": "// War Canoe - Realistic Style, Medium Complexity\n// Dimensions: ~90mm long, ~20mm wide, ~12mm high\n\n// Overall scale factor\nscale_factor = 1;\n\n// Hull parameters\nhull_length = 90 * scale_factor;\nhull_width = 18 * scale_factor;\nhull_height = 8 * scale_factor;\nhull_thickness = 1.5 * scale_factor;\n\n// Bow/stern rise\nbow_rise = 6 * scale_factor;\nstern_rise = 4 * scale_factor;\n\n// Seats\nseat_count = 3;\nseat_width = 14 * scale_factor;\nseat_thickness = 1 * scale_factor;\nseat_spacing = 20 * scale_factor;\n\n// Paddles\npaddle_count = 6;\npaddle_length = 25 * scale_factor;\npaddle_blade_width = 4 * scale_factor;\npaddle_handle_diameter = 1 * scale_factor;\n\n// Shield decorations\nshield_count = 4;\nshield_diameter = 5 * scale_factor;\n\nmodule hull_shape() {\n    // Main hull body\n    difference() {\n        // Outer hull - elongated ellipsoid shape\n        hull() {\n            for (i = [0:10]) {\n                translate([i * hull_length/10 - hull_length/2, 0, 0])\n                    scale([1, 1 - abs(i - 5)/7, 1])\n                        cylinder(h = hull_height + sin(i * 18) * (i < 5 ? bow_rise : stern_rise), \n                                r1 = hull_width/2 * (1 - abs(i - 5)/8), \n                                r2 = hull_width/2 * (1 - abs(i - 5)/8), \n                                $fn = 20);\n            }\n        }\n        \n        // Inner cavity - hollow out the hull\n        translate([0, 0, -hull_thickness/2])\n            scale([0.85, 0.85, 0.8])\n                hull_shape_inner();\n    }\n}\n\nmodule hull_shape_inner() {\n    hull() {\n        for (i = [0:10]) {\n            translate([i * hull_length/10 - hull_length/2, 0, 0])\n                scale([1, 1 - abs(i - 5)/7, 1])\n                    cylinder(h = hull_height + sin(i * 18) * (i < 5 ? bow_rise : stern_rise) - hull_thickness*2, \n                            r1 = hull_width/2 * (1 - abs(i - 5)/8) - hull_thickness, \n                            r2 = hull_width/2 * (1 - abs(i - 5)/8) - hull_thickness, \n                            $fn = 20);\n        }\n    }\n}\n\nmodule seats() {\n    for (i = [0:seat_count-1]) {\n        translate([\n            -hull_length/2 + 20 + i * seat_spacing, \n            0, \n            hull_height - 2\n        ]) {\n            // Seat platform\n            cube([seat_width, seat_thickness, 2], center = true);\n            \n            // Seat supports\n            translate([-seat_width/2 + 2, 0, -1.5])\n                cube([1.5, seat_thickness, 3]);\n            translate([seat_width/2 - 2, 0, -1.5])\n                cube([1.5, seat_thickness, 3]);\n        }\n    }\n}\n\nmodule gunwale() {\n    // Upper rim reinforcement\n    difference() {\n        hull() {\n            for (i = [0:20]) {\n                translate([i * hull_length/20 - hull_length/2, 0, hull_height])\n                    scale([1, 1 - abs(i - 10)/12, 1])\n                        cylinder(h = 2, \n                                r1 = hull_width/2 * (1 - abs(i - 10)/10) + 1, \n                                r2 = hull_width/2 * (1 - abs(i - 10)/10) + 1, \n                                $fn = 16);\n            }\n        }\n        \n        // Remove inner part\n        translate([0, 0, -1])\n            scale([0.9, 0.9, 2])\n                hull() {\n                    for (i = [0:20]) {\n                        translate([i * hull_length/20 - hull_length/2, 0, hull_height + 2])\n                            scale([1, 1 - abs(i - 10)/12, 1])\n                                cylinder(h = 4, \n                                        r1 = hull_width/2 * (1 - abs(i - 10)/10), \n                                        r2 = hull_width/2 * (1 - abs(i - 10)/10), \n                                        $fn = 16);\n                    }\n                }\n    }\n}\n\nmodule shields() {\n    for (i = [0:shield_count-1]) {\n        angle = i * 360/shield_count;\n        radius = hull_width/2 + 2;\n        \n        translate([\n            cos(angle) * radius * 0.3, \n            sin(angle) * radius, \n            hull_height/2 + 3\n        ]) {\n            rotate([90, 0, angle])\n                difference() {\n                    // Shield body\n                    cylinder(h = 0.8, r = shield_diameter/2, $fn = 32);\n                    \n                    // Shield boss\n                    translate([0, 0, -0.1])\n                        cylinder(h = 1, r = shield_diameter/4, $fn = 16);\n                    \n                    // Shield decoration lines\n                    for (j = [0:3]) {\n                        rotate([0, 0, j * 45])\n                            translate([0, shield_diameter/4, 0])\n                                cube([shield_diameter/8, shield_diameter/2, 1.2], center = true);\n                    }\n                }\n        }\n    }\n}\n\nmodule paddle() {\n    // Paddle blade\n    translate([0, 0, paddle_length/2])\n        difference() {\n            // Blade\n            scale([1, 2.5, 0.1])\n                sphere(r = paddle_blade_width, $fn = 16);\n            \n            // Taper blade\n            translate([0, 0, -0.5])\n                scale([0.7, 0.7, 2])\n                    sphere(r = paddle_blade_width, $fn = 16);\n        }\n    \n    // Handle\n    translate([0, 0, 0])\n        rotate([90, 0, 0])\n            cylinder(h = paddle_length - paddle_blade_width, \n                    r = paddle_handle_diameter/2, \n                    $fn = 8);\n    \n    // Handle grip\n    translate([0, 0, -paddle_length/2 + 3])\n        cylinder(h = 4, r = paddle_handle_diameter/2 + 0.3, $fn = 8);\n}\n\nmodule paddles_stored() {\n    for (i = [0:paddle_count-1]) {\n        side = i % 2 == 0 ? 1 : -1;\n        position = -hull_length/2 + 15 + (i/2) * (hull_length - 30)/(paddle_count/2 - 1);\n        \n        translate([\n            side * (hull_width/2 + 1), \n            position, \n            hull_height - 1\n        ]) {\n            rotate([0, 90, side * 20])\n                paddle();\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Hull\n    hull_shape();\n    \n    // Gunwale reinforcement\n    gunwale();\n    \n    // Seats\n    seats();\n    \n    // Decorative shields\n    shields();\n    \n    // Paddles stored along sides\n    paddles_stored();\n}",
    "renders": true
  },
  {
    "vehicle": "umiak",
    "openscad_code": "// Umiak - realistic style, medium complexity\n// Traditional Inuit skin boat with wooden frame\n\n// Main parameters\numiak_length = 90;\numiak_width = 25;\numiak_height = 12;\nwall_thickness = 1.5;\nframe_thickness = 1;\n\n// Hull module\nmodule hull() {\n    difference() {\n        // Main hull shape\n        scale([1, 0.6, 0.4])\n            cylinder(h=umiak_height * 2, d=umiak_width, $fn=50);\n        \n        // Hollow interior\n        translate([0, 0, -wall_thickness])\n            scale([1, 0.6, 0.4])\n                cylinder(h=umiak_height * 2 + wall_thickness * 2, \n                        d=umiak_width - wall_thickness * 2, \n                        $fn=50);\n        \n        // Flatten bottom slightly\n        translate([0, 0, -umiak_height * 0.8])\n            cube([umiak_length * 2, umiak_width * 2, umiak_height], center=true);\n    }\n}\n\n// Gunwale (top edge reinforcement)\nmodule gunwale() {\n    translate([0, 0, umiak_height * 0.4])\n        difference() {\n            scale([1.05, 0.65, 0.1])\n                cylinder(h=umiak_height * 0.5, d=umiak_width, $fn=50);\n            scale([1, 0.6, 0.1])\n                cylinder(h=umiak_height * 0.5, d=umiak_width - wall_thickness * 2, $fn=50);\n        }\n}\n\n// Frame ribs\nmodule frame_ribs() {\n    for (i = [-35:15:35]) {\n        translate([i, 0, -umiak_height * 0.2])\n            rotate([90, 0, 0])\n                difference() {\n                    // Main rib\n                    scale([1, 1.2, 1])\n                        cylinder(h=umiak_width * 0.7, d=frame_thickness * 2, $fn=8);\n                    \n                    // Cut bottom flat\n                    translate([0, 0, -umiak_width * 0.5])\n                        cube([frame_thickness * 4, umiak_width, umiak_width], center=true);\n                }\n    }\n}\n\n// Cross braces\nmodule cross_braces() {\n    for (i = [-25:20:25]) {\n        translate([i, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=umiak_width * 0.9, d=frame_thickness, $fn=6);\n    }\n}\n\n// Bow and stern posts\nmodule end_posts() {\n    // Bow\n    translate([40, 0, 0])\n        rotate([0, 0, -15])\n            union() {\n                cylinder(h=15, d=frame_thickness * 2, $fn=6);\n                translate([7.5, 0, 0])\n                    sphere(d=frame_thickness * 2, $fn=8);\n            }\n    \n    // Stern\n    translate([-40, 0, 0])\n        rotate([0, 0, 15])\n            union() {\n                cylinder(h=15, d=frame_thickness * 2, $fn=6);\n                translate([-7.5, 0, 0])\n                    sphere(d=frame_thickness * 2, $fn=8);\n            }\n}\n\n// Skin lacing detail\nmodule lacing_detail() {\n    for (i = [-35:5:35]) {\n        translate([i, umiak_width * 0.3, umiak_height * 0.3])\n            rotate([90, 0, 0])\n                cylinder(h=1, d=0.5, $fn=4);\n        translate([i, -umiak_width * 0.3, umiak_height * 0.3])\n            rotate([90, 0, 0])\n                cylinder(h=1, d=0.5, $fn=4);\n    }\n}\n\n// Assemble the umiak\nunion() {\n    // Hull structure\n    hull();\n    gunwale();\n    \n    // Frame structure\n    frame_ribs();\n    cross_braces();\n    end_posts();\n    \n    // Detail elements\n    lacing_detail();\n}",
    "renders": true
  },
  {
    "vehicle": "kayacht",
    "openscad_code": "// Kayacht - Medium complexity realistic 3D printable model\n// Total length ~80mm for 3D printing\n\nhull_length = 80;\nhull_width = 25;\nhull_height = 12;\ndeck_thickness = 2;\nwall_thickness = 2;\n\nmodule hull() {\n    difference() {\n        // Main hull shape\n        hull_main();\n        \n        // Cockpit opening\n        translate([0, 0, hull_height/2 + deck_thickness/2])\n            cube([hull_length*0.6, hull_width*0.5, deck_thickness*2], center=true);\n    }\n}\n\nmodule hull_main() {\n    // Create hull with rounded bottom\n    hull_points = [\n        [hull_length/2, hull_width/2, 0],\n        [-hull_length/2, hull_width/2, 0],\n        [-hull_length/2, -hull_width/2, 0],\n        [hull_length/2, -hull_width/2, 0],\n        [hull_length/2, hull_width/2 - wall_thickness, hull_height],\n        [-hull_length/2 + 5, hull_width/2 - wall_thickness, hull_height],\n        [-hull_length/2 + 5, -hull_width/2 + wall_thickness, hull_height],\n        [hull_length/2, -hull_width/2 + wall_thickness, hull_height],\n        [hull_length/2 - 10, 0, -hull_height/3],\n        [-hull_length/2 + 10, 0, -hull_height/3]\n    ];\n    \n    // Hull base\n    difference() {\n        hull_hull = hull_points;\n        polyhedron(\n            points=hull_points,\n            faces=[\n                [0,1,2,3], // bottom\n                [4,5,6,7], // top\n                [0,3,7,4], // right\n                [1,2,6,5], // left\n                [0,1,5,4], // front\n                [2,3,7,6], // back\n                [8,9,7,4], // curved bottom front\n                [8,9,6,5]  // curved bottom back\n            ]\n        );\n        \n        // Hollow out interior\n        scale([0.85, 0.85, 0.8])\n            translate([0, 0, wall_thickness])\n            hull_main();\n    }\n}\n\nmodule deck() {\n    // Deck surface\n    translate([0, 0, hull_height])\n        cube([hull_length, hull_width, deck_thickness], center=true);\n}\n\nmodule cockpit() {\n    // Cockpit rim\n    translate([0, 0, hull_height + deck_thickness])\n        difference() {\n            cube([hull_length*0.65, hull_width*0.55, 3], center=true);\n            translate([0, 0, 1])\n                cube([hull_length*0.6, hull_width*0.5, 3], center=true);\n        }\n}\n\nmodule seat() {\n    // Simple seat inside cockpit\n    translate([0, 0, hull_height - 2])\n        cube([hull_length*0.4, hull_width*0.3, 2], center=true);\n}\n\nmodule bow() {\n    // Pointed bow\n    translate([hull_length/2, 0, hull_height/2])\n        rotate([0, 90, 0])\n            cylinder(h=hull_width/2, r1=hull_height/2, r2=0, center=true);\n}\n\nmodule stern() {\n    // Stern with slight point\n    translate([-hull_length/2, 0, hull_height/2])\n        rotate([0, 90, 0])\n            cylinder(h=hull_width/2, r1=hull_height/2, r2=hull_height/4, center=true);\n}\n\nmodule handles() {\n    // Grab handles on bow and stern\n    for(pos = [[hull_length/2 - 5, 0], [-hull_length/2 + 5, 0]]) {\n        translate([pos[0], pos[1], hull_height + 2])\n            rotate([90, 0, 0])\n                cylinder(h=10, r=1.5, center=true);\n    }\n}\n\n// Assemble the kayacht\nunion() {\n    hull();\n    deck();\n    cockpit();\n    seat();\n    bow();\n    stern();\n    handles();\n}",
    "renders": true
  },
  {
    "vehicle": "packraft",
    "openscad_code": "// Realistic 3D-printable packraft (medium complexity)\n// Roughly 70 mm long x 25 mm wide x 25 mm high\n\n$fn = 30;\n\n// Overall dimensions\nraft_len = 70;\nraft_w   = 25;\nraft_h   = 22;\n\n// Wall thickness for 3D printing\nwall = 1.2;\n\n// Bow & stern radius\nend_r = 10;\n\nmodule raft_hull()\n{\n    difference()\n    {\n        // Main outer hull\n        hull()\n        {\n            // Bow dome\n            translate([-raft_len/2, 0, 0])\n                scale([1.0, 0.9, 0.8])\n                    sphere(r = end_r);\n\n            // Stern dome\n            translate([raft_len/2, 0, 0])\n                scale([1.0, 0.9, 0.8])\n                    sphere(r = end_r);\n\n            // Mid-body box\n            translate([0, 0, -3])\n                cube([raft_len - 2*end_r + 2,\n                      raft_w,\n                      raft_h - end_r],\n                     center = true);\n        }\n\n        // Inner cavity to hollow the hull\n        hull()\n        {\n            // Bow inner dome\n            translate([-raft_len/2, 0, 0])\n                scale([1.0, 0.9, 0.8])\n                    sphere(r = end_r - wall);\n\n            // Stern inner dome\n            translate([raft_len/2, 0, 0])\n                scale([1.0, 0.9, 0.8])\n                    sphere(r = end_r - wall);\n\n            // Mid-body inner box\n            translate([0, 0, -3])\n                cube([raft_len - 2*end_r,\n                      raft_w - 2*wall,\n                      raft_h - end_r - wall],\n                     center = true);\n        }\n    }\n}\n\nmodule tube_valves()\n{\n    // Inflation valve on starboard\n    translate([0, raft_w/2 + 1.5, raft_h - end_r])\n        rotate([90, 0, 0])\n        cylinder(h = 3, r1 = 1.5, r2 = 1.5);\n\n    // Safety valve on port\n    translate([0, -raft_w/2 - 1.5, raft_h - end_r])\n        rotate([90, 0, 0])\n        cylinder(h = 3, r1 = 1.5, r2 = 1.5);\n}\n\nmodule spray_skirt_ring()\n{\n    // Coaming rim for attaching skirt\n    difference()\n    {\n        // Thick ring\n        translate([0, 0, raft_h - 2])\n            cylinder(h = 3, r1 = raft_w/2 - 3, r2 = raft_w/2 - 3);\n\n        // Hollow it\n        translate([0, 0, raft_h - 2])\n            cylinder(h = 3.2, r1 = raft_w/2 - 5, r2 = raft_w/2 - 5);\n    }\n}\n\nmodule seat_cushion()\n{\n    // Simple inflatable seat\n    translate([-8, 0, 6])\n        cube([14, raft_w - 6, 3], center = true);\n}\n\nmodule d_rings()\n{\n    // D-rings for gear attachment\n    for(i = [-1, 1])\n    {\n        translate([i * (raft_len/2 - 5), raft_w/2 + 0.3, 5])\n            rotate([90, 0, 0])\n                cylinder(h = 1.5, r1 = 1, r2 = 1);\n        \n        translate([i * (raft_len/2 - 5), -raft_w/2 - 0.3, 5])\n            rotate([90, 0, 0])\n                cylinder(h = 1.5, r1 = 1, r2 = 1);\n    }\n}\n\nmodule floor_pattern()\n{\n    // Small ridges for grip\n    for(x = [-raft_len/2 + 5 : 4 : raft_len/2 - 5])\n    {\n        translate([x, 0, 0.1])\n            cube([2, raft_w - 6, 0.5], center = true);\n    }\n}\n\n// Build the packraft\nunion()\n{\n    raft_hull();\n    tube_valves();\n    spray_skirt_ring();\n    seat_cushion();\n    d_rings();\n    floor_pattern();\n}",
    "renders": true
  },
  {
    "vehicle": "inflatablekayak",
    "openscad_code": "// Inflatable Kayak – medium-complexity realistic style\n// 3D-printable, ~80 mm long, no overhangs, 1 mm wall thickness\n\n// overall scale factor so the biggest dimension = 80 mm\nscale_factor = 80/100;\n\n// kayak hull module\nmodule hull() {\n    // main inflatable tube – continuous torus-like shape made from hull halves\n    difference() {\n        // outer skin\n        scale([1, 0.45, 0.25])\n            sphere(d = 100 * scale_factor, $fn = 64);\n        \n        // hollow it out – 1 mm wall\n        scale([0.96, 0.41, 0.21])\n            sphere(d = 100 * scale_factor, $fn = 64);\n    }\n}\n\n// pointed bow/stern cones – simple cones sliced at 45° for realism\nmodule nose() {\n    rotate([0, 90, 0])\n        cylinder(h = 25 * scale_factor, \n                 r1 = 11 * scale_factor, \n                 r2 = 0, \n                 $fn = 32);\n}\n\n// seat block – solid printed block, no overhang\nmodule seat() {\n    translate([0, 0, -2 * scale_factor])\n        cube([30 * scale_factor, \n              18 * scale_factor, \n              6 * scale_factor], center = true);\n}\n\n// floor panel – thin slab inside hull for rigidity\nmodule floor() {\n    translate([0, 0, -10 * scale_factor])\n        cube([70 * scale_factor, \n              30 * scale_factor, \n              1.5 * scale_factor], center = true);\n}\n\n// simple valve – cylinder + ring on starboard side\nmodule valve() {\n    translate([0, 24 * scale_factor, 0])\n        rotate([90, 0, 0])\n        union() {\n            cylinder(h = 4 * scale_factor, \n                     r = 3 * scale_factor, \n                     $fn = 16);\n            translate([0, 0, 2 * scale_factor])\n                cylinder(h = 1 * scale_factor, \n                         r = 4 * scale_factor, \n                         $fn = 16);\n        }\n}\n\n// grab handles – small loops printed flat\nmodule handle() {\n    difference() {\n        // outer ring\n        linear_extrude(height = 2 * scale_factor)\n            circle(r = 5 * scale_factor, $fn = 32);\n        // inner hole\n        linear_extrude(height = 2 * scale_factor)\n            circle(r = 3 * scale_factor, $fn = 32);\n    }\n}\n\n// assemble kayak\nunion() {\n    // main hull\n    hull();\n    \n    // bow\n    translate([38 * scale_factor, 0, 0])\n        nose();\n    \n    // stern (mirrored bow)\n    mirror([1, 0, 0])\n        translate([38 * scale_factor, 0, 0])\n            nose();\n    \n    // internal floor\n    floor();\n    \n    // seat\n    translate([-10 * scale_factor, 0, -8 * scale_factor])\n        seat();\n    \n    // valve\n    valve();\n    \n    // bow handle\n    translate([45 * scale_factor, 0, 0])\n        rotate([90, 0, 0])\n            handle();\n    \n    // stern handle\n    translate([-45 * scale_factor, 0, 0])\n        rotate([90, 0, 0])\n            handle();\n}",
    "renders": true
  },
  {
    "vehicle": "foldingkayak",
    "openscad_code": "// Folding Kayak - Medium Complexity Realistic Style\n// Overall dimensions: 90mm length, 25mm width, 12mm height\n\n$fn = 32;\n\n// Hull parameters\nhull_length = 90;\nhull_width = 25;\nhull_height = 8;\nwall_thickness = 1.2;\n\n// Frame rib parameters\nrib_count = 6;\nrib_width = 22;\nrib_height = 6;\nrib_thickness = 1;\n\n// Skin thickness\nskin_thickness = 0.6;\n\n// Main hull shell\nmodule hull_shell() {\n    difference() {\n        // Outer hull shape\n        hull_shape();\n        \n        // Hollow interior\n        translate([0, 0, -skin_thickness])\n            scale([0.85, 0.85, 0.9])\n            hull_shape();\n    }\n}\n\n// Basic hull shape\nmodule hull_shape() {\n    difference() {\n        // Main hull body\n        union() {\n            // Central hull\n            translate([0, 0, hull_height/2])\n                scale([1, 0.6, 0.4])\n                sphere(d=hull_width);\n            \n            // Bow\n            translate([hull_length/2 - hull_width/4, 0, hull_height/2])\n                scale([0.5, 0.6, 0.4])\n                sphere(d=hull_width);\n            \n            // Stern\n            translate([-hull_length/2 + hull_width/4, 0, hull_height/2])\n                scale([0.5, 0.6, 0.4])\n                sphere(d=hull_width);\n            \n            // Connect sections\n            translate([0, 0, hull_height/2])\n                cube([hull_length, hull_width * 0.6, hull_height], center=true);\n        }\n        \n        // Deck cutout\n        translate([0, 0, hull_height - 0.5])\n            cube([hull_length * 0.7, hull_width * 0.4, 2], center=true);\n    }\n}\n\n// Frame ribs\nmodule frame_rib(pos) {\n    translate([pos, 0, 0])\n        rotate([90, 0, 0])\n            difference() {\n                // Rib shape\n                cylinder(h=rib_width, d1=rib_height, d2=rib_height * 0.8);\n                \n                // Lightening holes\n                for(i = [-1, 1]) {\n                    translate([0, i * 4, 0])\n                        cylinder(h=rib_width + 1, d=2);\n                }\n                translate([0, 0, 0])\n                    cylinder(h=rib_width + 1, d=1.5);\n            }\n}\n\n// Cockpit rim\nmodule cockpit_rim() {\n    difference() {\n        // Outer rim\n        translate([0, 0, hull_height - 0.3])\n            cylinder(h=1.5, d1=hull_width * 0.45, d2=hull_width * 0.4);\n        \n        // Inner opening\n        translate([0, 0, hull_height - 0.5])\n            cylinder(h=2, d=hull_width * 0.3);\n    }\n}\n\n// Folding joints\nmodule folding_joint(pos) {\n    translate([pos, 0, hull_height/2])\n        union() {\n            // Hinge barrel\n            cylinder(h=3, d=2);\n            \n            // Mounting plate\n            rotate([90, 0, 0])\n                cube([4, 2, 0.5], center=true);\n        }\n}\n\n// Deck lines\nmodule deck_lines() {\n    color(\"black\")\n    for(i = [-1, 1]) {\n        translate([i * hull_length/3, 0, hull_height - 0.2])\n            rotate([90, 0, 0])\n                cylinder(h=hull_width * 0.4, d=0.5);\n    }\n}\n\n// Main assembly\nunion() {\n    // Hull skin\n    hull_shell();\n    \n    // Frame ribs\n    for(i = [0:rib_count-1]) {\n        pos = -hull_length/2 + hull_length/(rib_count-1) * i;\n        frame_rib(pos);\n    }\n    \n    // Cockpit rim\n    cockpit_rim();\n    \n    // Folding joints\n    folding_joint(hull_length/4);\n    folding_joint(-hull_length/4);\n    \n    // Deck details\n    deck_lines();\n}",
    "renders": true
  },
  {
    "vehicle": "sitontop",
    "openscad_code": "// Sit-on-top kayak in realistic style, medium complexity\n// Overall length ~90 mm, printable without supports\n\n$fn=32;\n\n// Main hull shell\nmodule hull_shell() {\n    difference() {\n        // Outer hull shape\n        hull() {\n            // Bow\n            translate([40,0,5]) scale([1,0.6,0.4]) sphere(10);\n            // Mid\n            translate([0,0,4]) scale([1,1,0.3]) sphere(15);\n            // Stern\n            translate([-40,0,5]) scale([1,0.6,0.4]) sphere(10);\n        }\n        // Inner cavity for hollow hull\n        hull() {\n            translate([39,0,5]) scale([0.9,0.5,0.35]) sphere(9.5);\n            translate([0,0,4]) scale([0.9,0.9,0.25]) sphere(14.5);\n            translate([-39,0,5]) scale([0.9,0.5,0.35]) sphere(9.5);\n        }\n    }\n}\n\n// Seat depression\nmodule seat() {\n    difference() {\n        translate([0,-3,3.5]) cube([25,18,3], center=true);\n        translate([0,-3,3.5]) cube([24,17,4], center=true);\n    }\n}\n\n// Backrest\nmodule backrest() {\n    translate([0,-10,9]) rotate([20,0,0]) \n        cube([20,2,8], center=true);\n}\n\n// Foot wells\nmodule foot_wells() {\n    for(x=[-25,-15,15,25]) {\n        translate([x,8,3.5]) \n            difference() {\n                cube([8,6,3], center=true);\n                translate([0,0,-1]) cube([7,5,4], center=true);\n            }\n    }\n}\n\n// Scupper holes (drainage)\nmodule scupper_holes() {\n    for(pos=[[-15,-5], [15,-5], [0,5]]) {\n        translate([pos[0],pos[1],3])\n            cylinder(h=6, d=2, center=true);\n    }\n}\n\n// Deck rigging loops\nmodule deck_loops() {\n    for(pos=[[-30,0], [30,0], [0,-12], [0,12]]) {\n        translate([pos[0],pos[1],6.5]) {\n            difference() {\n                cube([4,1,2], center=true);\n                translate([0,0,-0.5]) cube([3,0.8,3], center=true);\n            }\n        }\n    }\n}\n\n// Carry handles\nmodule handles() {\n    // Bow handle\n    translate([38,0,7]) rotate([0,90,0])\n        difference() {\n            cylinder(h=12, d=6);\n            cylinder(h=13, d=4);\n        }\n    \n    // Stern handle\n    translate([-38,0,7]) rotate([0,90,0])\n        difference() {\n            cylinder(h=12, d=6);\n            cylinder(h=13, d=4);\n        }\n}\n\n// Hull seam detail\nmodule seam() {\n    hull() {\n        translate([35,0,5.5]) scale([1,0.6,0.05]) sphere(10.2);\n        translate([0,0,4.5]) scale([1,1,0.05]) sphere(15.2);\n        translate([-35,0,5.5]) scale([1,0.6,0.05]) sphere(10.2);\n    }\n}\n\n// Assemble the kayak\nunion() {\n    hull_shell();\n    seat();\n    backrest();\n    foot_wells();\n    scupper_holes();\n    deck_loops();\n    handles();\n    seam();\n}",
    "renders": true
  },
  {
    "vehicle": "sitinside",
    "openscad_code": "// Sit-inside kayak - realistic medium complexity\n// Overall dimensions: 90mm x 35mm x 18mm\n\n// Hull thickness\nhull_thickness = 2;\n\n// Main hull module\nmodule hull() {\n    difference() {\n        // Outer hull\n        hull_shape();\n        \n        // Inner cavity\n        translate([0, 0, -hull_thickness])\n            scale([0.8, 0.7, 0.8])\n            hull_shape();\n    }\n}\n\n// Basic hull shape\nmodule hull_shape() {\n    // Main body\n    translate([0, 0, 10])\n    rotate([90, 0, 0])\n    linear_extrude(height=2)\n    hull_2d();\n}\n\n// 2D hull profile\nmodule hull_2d() {\n    hull() {\n        // Bow\n        translate([45, 0]) circle(d=20);\n        // Stern\n        translate([-45, 0]) circle(d=15);\n        // Mid sections\n        for (i = [-30:15:30]) {\n            translate([i, 0]) circle(d=25 - abs(i)/3);\n        }\n    }\n}\n\n// Cockpit rim\nmodule cockpit_rim() {\n    difference() {\n        // Outer rim\n        translate([0, 0, 12])\n        rotate([90, 0, 0])\n        linear_extrude(height=2)\n        offset(delta=2)\n        cockpit_2d();\n        \n        // Inner hole\n        translate([0, 0, 11.9])\n        rotate([90, 0, 0])\n        linear_extrude(height=2.2)\n        cockpit_2d();\n    }\n}\n\n// Cockpit opening 2D\nmodule cockpit_2d() {\n    hull() {\n        for (i = [-15:5:15]) {\n            translate([i, 0]) circle(d=12 - abs(i)/2);\n        }\n    }\n}\n\n// Seat inside cockpit\nmodule seat() {\n    // Seat back\n    translate([0, 0, 6])\n    rotate([10, 0, 0])\n    cube([20, 2, 8], center=true);\n    \n    // Seat bottom\n    translate([0, 0, 2])\n    cube([20, 15, 2], center=true);\n}\n\n// Deck rigging loops\nmodule rigging_loops() {\n    for (pos = [[30, 10], [-30, 10], [30, -10], [-30, -10]]) {\n        translate([pos[0], pos[1], 17])\n        rotate([90, 0, 0])\n        cylinder(h=3, d1=4, d2=3, center=true);\n    }\n}\n\n// Drain plug\nmodule drain_plug() {\n    translate([-40, 0, 5])\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h=3, d=6);\n        cylinder(h=4, d=3);\n    }\n}\n\n// Skeg (small fin at stern)\nmodule skeg() {\n    translate([-42, 0, 4])\n    rotate([0, 90, 0])\n    linear_extrude(height=2)\n    polygon(points=[[0,0], [0,8], [5,0]]);\n}\n\n// Main assembly\nhull();\ncockpit_rim();\nseat();\nrigging_loops();\ndrain_plug();\nskeg();",
    "renders": true
  },
  {
    "vehicle": "tandemkayak",
    "openscad_code": "// Tandem Kayak - Realistic Style, Medium Complexity\n// Designed for 3D printing (no overhangs, 2mm wall thickness)\n\n$fn = 32;\n\n// Overall dimensions\nkayak_length = 80;\nkayak_width = 18;\nkayak_height = 10;\n\n// Hull shape module\nmodule hull() {\n    difference() {\n        // Main hull body\n        hull_shape();\n        \n        // Cockpit openings\n        cockpit(25, 0);\n        cockpit(-25, 0);\n        \n        // Drain holes\n        for(i = [-1, 1]) {\n            translate([i * 35, 0, -1])\n                cylinder(h = 3, r = 2);\n        }\n    }\n}\n\n// Main hull shape\nmodule hull_shape() {\n    difference() {\n        // Smooth hull body\n        hull_body();\n        \n        // Hollow interior\n        translate([0, 0, -1])\n            scale([0.85, 0.85, 0.9])\n            hull_body();\n    }\n}\n\nmodule hull_body() {\n    // Create smooth hull with rounded edges\n    minkowski() {\n        // Basic hull shape\n        scale([1, 0.4, 0.3])\n            sphere(r = kayak_length/2);\n        \n        // Rounding\n        sphere(r = 2);\n    }\n}\n\n// Cockpit opening\nmodule cockpit(x_pos, y_pos) {\n    translate([x_pos, y_pos, kayak_height - 2])\n        scale([1.2, 0.8, 0.3])\n            cylinder(h = 5, r = 5);\n}\n\n// Seats\nmodule seats() {\n    for(pos = [25, -25]) {\n        translate([pos, 0, 2])\n            seat();\n    }\n}\n\nmodule seat() {\n    // Seat base\n    difference() {\n        translate([0, 0, 0])\n            cube([12, 14, 2], center = true);\n        \n        // Seat drainage\n        for(x = [-3, 3])\n            for(y = [-4, 4])\n                translate([x, y, -0.5])\n                    cylinder(h = 3, r = 1);\n    }\n    \n    // Seat back\n    translate([0, 6, 2])\n        cube([10, 2, 8], center = true);\n}\n\n// Deck rigging\nmodule rigging() {\n    // Perimeter lines\n    perimeter_line(6);\n    perimeter_line(-6);\n    \n    // Bungee cords\n    bungee_cord(30);\n    bungee_cord(-30);\n}\n\nmodule perimeter_line(y_offset) {\n    hull_points = [\n        [kayak_length/2 - 5, y_offset, kayak_height - 1],\n        [kayak_length/2 - 5, -y_offset, kayak_height - 1],\n        [-kayak_length/2 + 5, -y_offset, kayak_height - 1],\n        [-kayak_length/2 + 5, y_offset, kayak_height - 1]\n    ];\n    \n    for(i = [0:3]) {\n        p1 = hull_points[i];\n        p2 = hull_points[(i + 1) % 4];\n        translate(p1)\n            rotate([0, atan(p2.z - p1.z, sqrt((p2.x - p1.x)^2 + (p2.y - p1.y)^2)), atan(p2.y - p1.y, p2.x - p1.x)])\n                cylinder(h = sqrt((p2.x - p1.x)^2 + (p2.y - p1.y)^2 + (p2.z - p1.z)^2), r = 0.5);\n    }\n}\n\nmodule bungee_cord(x_pos) {\n    for(y = [-6:3:6]) {\n        translate([x_pos, y, kayak_height])\n            cylinder(h = 2, r = 0.5);\n    }\n    \n    // Connect bungee cords\n    translate([x_pos, 0, kayak_height + 1])\n        cube([1, 12, 0.5], center = true);\n}\n\n// Skeg (removable)\nmodule skeg() {\n    translate([0, 0, -kayak_height/2])\n        difference() {\n            // Skeg body\n            translate([-kayak_length/2 + 5, 0, 0])\n                cube([8, 1, 4]);\n            \n            // Mounting slot\n            translate([-kayak_length/2 + 5, 0, 2])\n                cube([4, 1.2, 2], center = true);\n        }\n}\n\n// Main assembly\nhull();\nseats();\nrigging();\nskeg();",
    "renders": true
  },
  {
    "vehicle": "solo",
    "openscad_code": "// Realistic Red-Solo-Style Cup\n// Basic dimensions (mm) – easily printable on a home FDM printer\n$fn = 36;                      // curve quality\n\n// overall size\ncup_h = 85;\ntop_d = 75;\nbottom_d = 55;\nwall_t = 2.2;                  // common nozzle width multiples\n\n// derived geometry\ntop_r = top_d / 2;\nbottom_r = bottom_d / 2;\ndraft = (top_r - bottom_r) / cup_h;\n\n// reusable module for the main cup body\nmodule cup_body() {\n    difference() {\n        // outer tapered wall\n        cylinder(h = cup_h, r1 = bottom_r, r2 = top_r, center = false);\n\n        // hollow it out, leaving wall thickness\n        translate([0, 0, -0.1])\n            cylinder(h = cup_h + 0.2,\n                     r1 = bottom_r - wall_t,\n                     r2 = top_r - wall_t,\n                     center = false);\n    }\n}\n\n// rolled lip ring\nmodule rolled_lip() {\n    difference() {\n        // torus-like ring\n        rotate_extrude()\n            translate([top_r - wall_t/2, 0, 0])\n                circle(r = wall_t/2);\n\n        // cut bottom flat\n        translate([0, 0, -wall_t/2])\n            cube([top_d, top_d, wall_t], center = true);\n    }\n}\n\n// subtle concentric rings for grip\nmodule grip_rings() {\n    for (i = [1 : 5]) {\n        z_pos = cup_h * 0.25 + (i-1) * 4;\n        color(\"red\")\n        difference() {\n            cylinder(h = 1, r1 = bottom_r + draft*z_pos, r2 = top_r - draft*(cup_h-z_pos));\n            cylinder(h = 1.2,\n                     r1 = bottom_r + draft*z_pos - 0.3,\n                     r2 = top_r - draft*(cup_h-z_pos) - 0.3);\n        }\n    }\n}\n\n// base disk for stability\nmodule base_disk() {\n    difference() {\n        cylinder(h = 2, r = bottom_r + 1);\n        cylinder(h = 2.2, r = bottom_r - 1);\n    }\n}\n\n// assemble the parts\nunion() {\n    color(\"red\") cup_body();\n    translate([0, 0, cup_h]) rolled_lip();\n    grip_rings();\n    translate([0, 0, -2]) base_disk();\n}",
    "renders": true
  },
  {
    "vehicle": "double",
    "openscad_code": "// Realistic Double (baseball) - Medium Complexity\n// Overall diameter ≈ 75 mm\n\n// Basic parameters\nball_d = 75;          // 2.95\"\nseam_width = 2;       // Width of seam channel\nseam_depth = 1.5;     // Depth of seam channel\nstitch_d = 0.8;       // Stitch thickness\nstitch_l = 8;         // Stitch length\nstitch_spacing = 8;   // Center-to-center stitch spacing\nwall = 2;             // Shell thickness for printing\n\n// Create a single stitch\nmodule stitch() {\n    translate([0, stitch_l/2, 0])\n        rotate([90, 0, 0])\n        difference() {\n            cylinder(h = stitch_d*2, d1 = stitch_d*1.6, d2 = stitch_d*0.8, $fn = 12);\n            translate([0, 0, -0.1])\n                cube([seam_width*2, stitch_d*3, stitch_d*2.2], center = true);\n        }\n}\n\n// Create one seam (108 stitches total, 2 curves, 54 per curve)\nmodule seam(start_angle, end_angle, radius) {\n    for(i = [0:53]) {\n        angle = start_angle + i * (end_angle - start_angle)/53.9;\n        x = radius * cos(angle);\n        y = radius * sin(angle);\n        z = sin(angle*2) * ball_d/30; // Slight wave for realism\n        \n        translate([x, y, z])\n            rotate([0, 0, angle + 90])\n                stitch();\n    }\n}\n\n// Main ball with seam grooves\nmodule baseball() {\n    difference() {\n        // Outer sphere shell\n        sphere(d = ball_d, $fn = 120);\n        \n        // Hollow center for printability\n        sphere(d = ball_d - wall*2, $fn = 120);\n        \n        // Two curved seam grooves\n        for(a = [0, 180]) {\n            rotate([0, 0, a])\n                translate([0, 0, -seam_depth/2])\n                    rotate_extrude(angle = 180, $fn = 120)\n                        translate([ball_d/2 - seam_width/2, 0, 0])\n                            square([seam_width, seam_depth]);\n        }\n    }\n}\n\n// Assembly\nrotate([0, -20, 0])  // Tilt for better viewing\n    baseball();\n\nseam(0, 180, ball_d/2 - seam_width/2);\nseam(180, 360, ball_d/2 - seam_width/2);",
    "renders": true
  },
  {
    "vehicle": "triple",
    "openscad_code": "// Triple-scoop ice-cream cone – “realistic” medium style\n// All dimensions in mm; largest dimension ≈ 85 mm height\n\n$fn = 32;          // smooth curves for printing\nwall = 2;          // uniform wall thickness for printability\n\n// ---------- edible spheres ----------\n// three flavours: vanilla, strawberry, chocolate\nmodule scoop(r=16, colour=\"white\"){\n    color(colour)\n    sphere(r);\n}\n\n// ---------- waffle texture ----------\nmodule waflerepeat(h, r){\n    // creates a single diamond pattern row\n    for(i=[0:h-1]){\n        rotate([0,0,i*45/h*360])\n        translate([r-wall*1.5, 0, 0])\n        cube([wall, wall*0.6, wall], center=true);\n    }\n}\n\n// ---------- cone body ----------\nmodule cone(h=60, rTop=22, rBot=12){\n    difference(){\n        // outer shell\n        cylinder(h1=rTop, h2=rBot, h=h);      // frustum\n        // inner hollow for weight/material saving\n        translate([0,0,-0.1])\n        cylinder(h1=rTop-wall, h2=rBot-wall, h=h+0.2);\n    }\n    \n    // waffle surface pattern\n    for(z=[0:5:h-5]){\n        translate([0,0,z])\n        rotate([0,0,z*10])                    // slight twist\n        waflerepeat(8, rTop-(rTop-rBot)*z/h);\n    }\n}\n\n// ---------- assembly ----------\nunion(){\n    // cone\n    cone();\n    \n    // scoops stacked\n    translate([0,0,60-0.5]) scoop(r=16, colour=\"beige\");      // vanilla\n    translate([0,0,60+30])   scoop(r=15, colour=\"lightpink\"); // strawberry\n    translate([0,0,60+56])   scoop(r=14, colour=\"saddlebrown\"); // chocolate\n    \n    // stylised drip ring for realism\n    color(\"saddlebrown\")\n    translate([0,0,60+56-2])\n    cylinder(h1=14+2, h2=14+4, h=4);\n}",
    "renders": true
  },
  {
    "vehicle": "oar",
    "openscad_code": "// Realistic 3D Printable Oar\n// Approx. 90 mm total length\n\n// Global parameters\nhandle_len = 20;\nshaft_len = 50;\nblade_len = 22;\nblade_width = 18;\nblade_thick = 2.5;\nwall = 1.5;          // wall thickness for 3D printing\n\nmodule handle_grip() {\n    // Cylindrical grip with shallow grooves\n    difference() {\n        cylinder(h = handle_len, d = 8, $fn = 48);\n        for (i = [0:3]) {\n            rotate([0, 0, i * 90])\n                translate([0, 4.5, -1])\n                    cube([1, 1, handle_len + 2], center = true);\n        }\n    }\n    // Top dome\n    translate([0, 0, handle_len])\n        sphere(d = 8, $fn = 48);\n}\n\nmodule shaft() {\n    // Tapered round shaft\n    hull() {\n        cylinder(h = shaft_len, d1 = 8, d2 = 6, $fn = 32);\n    }\n}\n\nmodule collar() {\n    // Decorative collar ring\n    difference() {\n        cylinder(h = 3, d = 10, $fn = 32);\n        cylinder(h = 3.5, d = 6.5, $fn = 32);\n    }\n}\n\nmodule blade() {\n    // Main blade shell\n    difference() {\n        hull() {\n            // Blade outline\n            translate([0, 0, blade_thick/2])\n                linear_extrude(height = blade_thick)\n                    polygon(points = [\n                        [0, 0],\n                        [blade_len*0.1, -blade_width*0.45],\n                        [blade_len, -blade_width/2],\n                        [blade_len, blade_width/2],\n                        [blade_len*0.1, blade_width*0.45]\n                    ]);\n        }\n        // Hollow cavity\n        offset(r = -wall)\n            hull() {\n                translate([0, 0, blade_thick/2])\n                    linear_extrude(height = blade_thick + 0.1)\n                        polygon(points = [\n                            [0, 0],\n                            [blade_len*0.1, -blade_width*0.45 + wall],\n                            [blade_len - wall, -blade_width/2 + wall],\n                            [blade_len - wall, blade_width/2 - wall],\n                            [blade_len*0.1, blade_width*0.45 - wall]\n                        ]);\n            }\n    }\n\n    // Reinforcement rib on back\n    translate([blade_len/2, 0, blade_thick])\n        cube([blade_len*0.9, 1.5, 1], center = true);\n\n    // Shaft socket\n    translate([-1, 0, blade_thick/2])\n        rotate([0, 90, 0])\n            cylinder(h = 5, d = 6, $fn = 32);\n}\n\n// Assemble oar\nunion() {\n    // Handle\n    translate([0, 0, 0])\n        handle_grip();\n\n    // Shaft\n    translate([0, 0, handle_len])\n        shaft();\n\n    // Collar\n    translate([0, 0, handle_len + shaft_len - 1.5])\n        collar();\n\n    // Blade\n    translate([0, 0, handle_len + shaft_len + 1.5])\n        rotate([90, 0, 0])\n            blade();\n}",
    "renders": true
  },
  {
    "vehicle": "sweep",
    "openscad_code": "// Realistic Medium-Complexity Broom (Sweep)\n\n// Overall dimensions: ~85 mm long\n\n// Handle\nmodule handle() {\n    // Main wooden stick\n    cylinder(h = 70, d = 8, $fn = 32);\n    \n    // Tapered bottom end\n    translate([0, 0, 70])\n        cylinder(h = 5, d1 = 8, d2 = 6, $fn = 32);\n    \n    // Metal ferrule at top\n    translate([0, 0, -3])\n        cylinder(h = 6, d = 10, $fn = 32);\n}\n\n// Broom head block\nmodule broom_head() {\n    difference() {\n        // Main block\n        cube([25, 15, 8], center = true);\n        \n        // Hole for handle\n        rotate([90, 0, 0])\n            cylinder(h = 30, d = 9, center = true, $fn = 32);\n            \n        // Chamfer bottom edge\n        translate([0, 0, -4.5])\n            cube([27, 17, 1], center = true);\n    }\n}\n\n// Individual bristle cluster\nmodule bristle_cluster() {\n    // 7 bristles in hex pattern\n    for (r = [0:2]) {\n        for (a = [0:60:359]) {\n            translate([r * 2 * cos(a), r * 2 * sin(a), 0])\n                cylinder(h = 20, d = 1.2, $fn = 8);\n        }\n    }\n}\n\n// Full bristle set\nmodule bristles() {\n    // Grid of clusters\n    for (x = [-10:5:10]) {\n        for (y = [-6:4:6]) {\n            translate([x, y, -10])\n                bristle_cluster();\n        }\n    }\n}\n\n// Assembly\ntranslate([0, 0, 35])\n    rotate([90, 0, 0])\n        handle();\n        \ntranslate([0, 0, -4])\n    broom_head();\n    \ntranslate([0, 0, -8])\n    bristles();",
    "renders": true
  },
  {
    "vehicle": "scull",
    "openscad_code": "// Skull - medium complexity, realistic style\n// Designed for 3D printing (no overhangs > 45°, wall thickness 1.5mm)\n\n$fn = 36;  // Smooth curves for printing\n\nmodule skull() {\n    union() {\n        // Main cranium\n        difference() {\n            scale([1, 0.9, 1.1]) sphere(d=42, center=true);\n            translate([0, 0, 5]) scale([0.85, 0.75, 0.9]) sphere(d=40, center=true);\n        }\n        \n        // Forehead\n        translate([0, 15, 8]) scale([0.9, 0.7, 0.6]) sphere(d=30);\n        \n        // Eye sockets\n        for(x = [-12, 12]) {\n            translate([x, 8, 4]) rotate([0, 0, x > 0 ? -10 : 10]) {\n                difference() {\n                    scale([1.2, 1, 1]) sphere(d=12);\n                    translate([0, 0, -3]) cube([14, 14, 6], center=true);\n                }\n            }\n        }\n        \n        // Nasal cavity\n        translate([0, -5, 2]) {\n            difference() {\n                rotate([10, 0, 0]) scale([1, 1.2, 0.8]) cylinder(h=12, d1=8, d2=12);\n                translate([0, 0, -1]) cube([12, 12, 14], center=true);\n            }\n        }\n        \n        // Cheek bones\n        for(x = [-18, 18]) {\n            translate([x, -2, -8]) rotate([0, 0, x > 0 ? 20 : -20]) {\n                scale([0.8, 1, 0.6]) sphere(d=15);\n            }\n        }\n        \n        // Upper jaw\n        translate([0, -15, -12]) {\n            difference() {\n                scale([0.9, 1, 0.6]) sphere(d=25);\n                // Teeth sockets\n                for(i = [-4:4]) {\n                    translate([i*2.5, -2, -4]) cylinder(h=4, d=3);\n                }\n            }\n        }\n        \n        // Lower jaw\n        translate([0, -20, -18]) rotate([10, 0, 0]) {\n            difference() {\n                scale([0.85, 0.7, 0.5]) sphere(d=28);\n                // Lower teeth\n                for(i = [-3.5:3.5]) {\n                    translate([i*2.5, 2, -3]) cylinder(h=3, d=2.5);\n                }\n            }\n        }\n        \n        // Temporal bones\n        for(x = [-20, 20]) {\n            translate([x, 0, -5]) rotate([0, 0, x > 0 ? 30 : -30]) {\n                scale([0.5, 1.2, 0.8]) cylinder(h=15, d=8);\n            }\n        }\n        \n        // Occipital bone\n        translate([0, -8, -15]) rotate([20, 0, 0]) {\n            scale([1.1, 1, 0.8]) sphere(d=20);\n        }\n    }\n}\n\n// Generate the skull scaled to 60mm height\nscale(60/45) skull();",
    "renders": true
  },
  {
    "vehicle": "shell",
    "openscad_code": "// Realistic seashell – medium complexity\n// Overall height ≈ 65 mm, base Ø ≈ 45 mm\n\n$fn = 36;\n\n// Main parameters\nbase_h = 10;           // thickness of the foot\nwhorls = 5;            // number of turns\nwhorl_h = 11;          // height added per whorl\nr_start = 22;          // starting radius\nr_growth = 1.18;       // multiplicative growth per turn\nth = 1.8;              // wall thickness (3D-print friendly)\n\n// Overall body\nmodule shell_body() {\n    difference() {\n        union() {\n            for (i = [0 : whorls-1]) {\n                translate([0, 0, base_h + i*whorl_h])\n                    rotate([0, 0, i*65])  // slight twist\n                    linear_extrude(height = whorl_h + 0.5, scale = pow(r_growth, i))\n                        offset(r = r_start)\n                            circle(r = r_start);\n            }\n        }\n        \n        // Hollow the inside\n        for (i = [0 : whorls-1]) {\n            translate([0, 0, base_h + i*whorl_h + th])\n                rotate([0, 0, i*65])\n                linear_extrude(height = whorl_h, scale = pow(r_growth, i))\n                    offset(r = r_start - th)\n                        circle(r = r_start - th);\n        }\n    }\n}\n\n// Spiral ridge along the outer surface\nmodule spiral_ridge() {\n    for (t = [0 : 5 : 360*whorls]) {\n        assign(\n            a = t,\n            r = r_start * pow(r_growth, a/360),\n            z = base_h + (a/360) * whorl_h + sin(a*4) * 1.5\n        )\n        translate([r*cos(a), r*sin(a), z])\n            rotate([90, 0, a])\n                cylinder(h = 2.5, r1 = 2, r2 = 0.8, $fn = 8);\n    }\n}\n\n// Opening (aperture)\nmodule aperture() {\n    difference() {\n        shell_body();\n        \n        // Cut the front\n        translate([r_start*1.2, 0, base_h/2])\n            rotate([0, -25, 0])\n                cube([r_start*2, r_start*2, base_h + whorl_h*whorls], center = true);\n        \n        // Oval opening\n        translate([0, 0, base_h - 1])\n            scale([1, 1.3, 1])\n                cylinder(h = base_h + whorl_h*whorls + 2, r = r_start*0.45, $fn = 50);\n    }\n}\n\n// Small curved spines on shoulder\nmodule spines(count = 12) {\n    for (i = [0 : count-1]) {\n        assign(\n            a = i * 360/count,\n            r = r_start * pow(r_growth, whorls-1),\n            z = base_h + whorls*whorl_h\n        )\n        translate([r*cos(a), r*sin(a), z])\n            rotate([90, 0, a + 90])\n                cylinder(h = 4, r1 = 1.2, r2 = 0.4, $fn = 6);\n    }\n}\n\n// Base foot\nmodule base_foot() {\n    cylinder(h = base_h, r = r_start*1.1, $fn = 60);\n}\n\n// Assembly\nunion() {\n    base_foot();\n    aperture();\n    spiral_ridge();\n    spines();\n}",
    "renders": true
  },
  {
    "vehicle": "skerry",
    "openscad_code": "// Skerry (rocky islet) - realistic medium complexity\n// Overall dimensions: ~60x45x35 mm\n\n$fn = 48;  // Smooth curves for printing\n\n// Main rock body\nmodule rock_body() {\n    difference() {\n        union() {\n            // Core mass\n            scale([1, 0.8, 0.6])\n                sphere(r = 25);\n            \n            // Northern ridge\n            translate([5, 15, 10])\n                scale([0.7, 0.5, 0.4])\n                    sphere(r = 18);\n            \n            // Western bulge\n            translate([-12, -5, 5])\n                scale([0.6, 0.7, 0.3])\n                    sphere(r = 15);\n        }\n        \n        // Erosion cavities\n        for(i = [1:3]) {\n            rotate([0, i*30, i*120])\n                translate([5 + i*3, 2 + i*2, 10 - i*2])\n                    sphere(r = 4 + i*1.5);\n        }\n        \n        // Sea-cut notch at base\n        translate([0, 0, -5])\n            cylinder(h = 10, r1 = 30, r2 = 25);\n    }\n}\n\n// Barnacle clusters\nmodule barnacles(x, y, z, count) {\n    for(i = [1:count]) {\n        translate([\n            x + (i*7 % 4 - 2) * 3,\n            y + (i*5 % 3 - 1) * 2,\n            z + sin(i*73) * 1.5\n        ]) {\n            scale([0.8, 0.8, 1.2])\n                sphere(r = 1 + (i % 3) * 0.3);\n        }\n    }\n}\n\n// Seaweed strands\nmodule seaweed(base_x, base_y, base_z) {\n    for(i = [0:2]) {\n        translate([base_x + i*2 - 2, base_y, base_z])\n            rotate([90 + i*15, 0, i*20])\n                cylinder(h = 8 + i*3, r1 = 1.2, r2 = 0.3);\n    }\n}\n\n// Rock pools\nmodule rock_pool(x, y, z) {\n    translate([x, y, z]) {\n        difference() {\n            cylinder(h = 2, r = 6);\n            translate([0, 0, 1.5])\n                cylinder(h = 2, r = 5);\n        }\n    }\n}\n\n// Assembly\ntranslate([0, 0, 20]) {\n    // Main structure\n    rock_body();\n    \n    // Surface details\n    barnacles(-8, 12, 15, 5);\n    barnacles(10, -10, 8, 4);\n    barnacles(0, -15, 5, 6);\n    \n    // Seaweed at waterline\n    seaweed(-15, -20, 0);\n    seaweed(12, 18, 0);\n    seaweed(5, -12, 0);\n    \n    // Intertidal pools\n    rock_pool(-5, 10, 18);\n    rock_pool(8, -5, 12);\n    rock_pool(-10, -8, 8);\n    \n    // Small satellite rocks\n    translate([20, -15, 2])\n        scale([0.4, 0.3, 0.5])\n            sphere(r = 8);\n    \n    translate([-18, 12, 1])\n        scale([0.3, 0.4, 0.4])\n            sphere(r = 7);\n}\n\n// Base platform for stable printing\ntranslate([0, 0, -1])\n    cube([60, 45, 2], center = true);",
    "renders": true
  },
  {
    "vehicle": "nordic",
    "openscad_code": "// Nordic Viking Longhouse – medium-complexity, realistic, 3D-printable\n// Overall footprint ~80 mm × 40 mm × 35 mm (L×W×H)\n\n$fa = 2;\n$fs = 0.5;\n\n// Main parameters\nlength = 80;\nwidth  = 40;\nwall_h = 18;        // wall height before roof starts\nroof_h = 15;\nwall_t = 2;         // wall thickness for printing\npost_d = 3;         // diameter of support posts\n\nmodule longhouse() {\n    // Base platform\n    translate([0, 0, wall_t/2])\n        cube([length + 8, width + 8, wall_t], center = true);\n\n    // Floor\n    translate([0, 0, wall_t])\n        cube([length, width, wall_t], center = true);\n\n    // Long walls (left & right)\n    for (side = [-1, 1])\n        translate([0, side * (width/2 - wall_t/2), wall_t + wall_h/2])\n            cube([length - wall_t*2, wall_t, wall_h], center = true);\n\n    // Gable walls (front & back)\n    for (end = [-1, 1])\n        translate([end * (length/2 - wall_t/2), 0, wall_t + wall_h/2])\n            cube([wall_t, width - wall_t*2, wall_h], center = true);\n\n    // Ridge beam\n    translate([0, 0, wall_t + wall_h + roof_h - wall_t/2])\n        cube([length, wall_t*1.5, wall_t], center = true);\n\n    // Roof panels\n    angle = atan(roof_h / (width/2));\n    roof_len = (width/2) / cos(angle);\n    for (side = [-1, 1])\n        translate([0, side * (width/4), wall_t + wall_h + roof_h/2])\n            rotate([side * (90 - angle), 0, 0])\n                cube([length + 2, roof_len + 2, wall_t], center = true);\n\n    // Doorway (center front)\n    difference() {\n        translate([length/2 - wall_t/2, 0, wall_t + wall_h/2])\n            cube([wall_t, width/3, wall_h], center = true);\n        translate([length/2 + wall_t/2, 0, wall_t])\n            cube([wall_t*2, width/3 - wall_t*2, wall_h - wall_t], center = false);\n    }\n\n    // Horizontal planks texture on walls\n    plank_h = 2;\n    plank_gap = 1;\n    for (z = [wall_t + plank_h/2 : plank_h + plank_gap : wall_t + wall_h - plank_h/2])\n        for (side = [-1, 1])\n            translate([0, side * (width/2 - wall_t/2), z])\n                cube([length - wall_t*2, wall_t + 0.1, plank_h], center = true);\n\n    // Support posts under eaves\n    for (x = [-length/2 + 5 : 10 : length/2 - 5])\n        for (y = [-1, 1])\n            translate([x, y * (width/2 - wall_t), wall_t + wall_h/2])\n                cylinder(h = wall_h, d = post_d, center = true);\n\n    // Chimney hole (simple square vent on roof)\n    difference() {\n        translate([0, -width/4, wall_t + wall_h + roof_h - wall_t*2])\n            cube([wall_t*6, wall_t*6, wall_t*3], center = true);\n        translate([0, -width/4, wall_t + wall_h + roof_h - wall_t])\n            cube([wall_t*4, wall_t*4, wall_t*3], center = true);\n    }\n}\n\nlonghouse();",
    "renders": true
  },
  {
    "vehicle": "lapstrake",
    "openscad_code": "// Lapstrake (clinker-built) rowboat model\n// Overall length: 80 mm, beam: 30 mm, hull depth: 15 mm\n// Wall thickness: 1.5 mm for 3D-printability\n\n$fn = 36;\n\nmodule lapstrake_hull() {\n    // Keel\n    translate([0, 0, -1.5])\n        cube([80, 1.5, 1.5], center = true);\n\n    // Build six overlapping strakes from bottom to top\n    for (i = [0:5]) {\n        strake(index = i);\n    }\n}\n\nmodule strake(index) {\n    // Each strake is slightly shorter and narrower as we go up\n    strakeWidth = 30 - index * 4;\n    strakeLength = 80 - index * 3;\n    overlap = 2;       // vertical overlap between strakes\n    thickness = 1.5;   // wall thickness for printing\n    \n    // Vertical position of this strake\n    zPos = index * (thickness + overlap) - 7.5 + thickness/2;\n    \n    // Create a plank shape with slight curvature\n    difference() {\n        hull() {\n            // Front edge\n            translate([strakeLength/2 - 5, 0, zPos])\n                sphere(d = strakeWidth);\n            // Rear edge\n            translate([-strakeLength/2 + 5, 0, zPos])\n                sphere(d = strakeWidth * 0.8);\n            // Middle width\n            translate([0, 0, zPos])\n                sphere(d = strakeWidth * 1.1);\n        }\n        \n        // Carve out the inside to make it hollow\n        translate([0, 0, zPos])\n            scale([0.85, 0.8, 0.7])\n                hull() {\n                    translate([strakeLength/2 - 5, 0, 0])\n                        sphere(d = strakeWidth);\n                    translate([-strakeLength/2 + 5, 0, 0])\n                        sphere(d = strakeWidth * 0.8);\n                    translate([0, 0, 0])\n                        sphere(d = strakeWidth * 1.1);\n                }\n    }\n}\n\nmodule seats() {\n    // Two seats/thwarts\n    for (pos = [-15, 15]) {\n        translate([pos, 0, 1])\n            cube([5, 28, 1.5], center = true);\n    }\n}\n\nmodule oarlocks() {\n    // Simple oarlock posts on gunwale\n    for (y = [-12, 12]) {\n        translate([20, y, 6])\n            cylinder(h = 3, d = 2);\n    }\n}\n\n// Assemble the boat\nunion() {\n    lapstrake_hull();\n    seats();\n    oarlocks();\n}",
    "renders": true
  },
  {
    "vehicle": "caravel",
    "openscad_code": "// Caravel – realistic style, medium complexity\n// All dimensions in mm; model ~80 mm long\n\n// Global parameters\nhull_l = 70;\nhull_w = 20;\nhull_h = 12;\ndeck_t = 2;\n\nmodule bow() {\n    difference() {\n        hull();\n        translate([hull_l/2-10,0,-1])\n            cube([15,hull_w+2,hull_h+2], center=true);\n    }\n}\n\nmodule stern() {\n    difference() {\n        hull();\n        translate([-hull_l/2+10,0,-1])\n            cube([15,hull_w+2,hull_h+2], center=true);\n    }\n}\n\nmodule hull() {\n    // Main hull body\n    hull_shape();\n    // Add raised stern castle\n    translate([-hull_l/2+5,0,hull_h/2+deck_t/2])\n        scale([0.6,0.8,1])\n            cube([15,hull_w-4,hull_h/2], center=true);\n}\n\nmodule hull_shape() {\n    // Lofted hull using difference and scaled cubes\n    difference() {\n        union() {\n            for (i = [-hull_l/2:hull_l/20:hull_l/2]) {\n                translate([i,0,0])\n                    scale([1,1-0.7*abs(i)/(hull_l/2),1])\n                        cube([hull_l/20,hull_w,hull_h], center=true);\n            }\n        }\n        // Hollow inside for printing\n        translate([0,0,-deck_t])\n            scale([0.9,0.9,0.8])\n                cube([hull_l,hull_w,hull_h], center=true);\n    }\n}\n\nmodule deck() {\n    translate([0,0,hull_h/2+deck_t/2])\n        cube([hull_l-10,hull_w-4,deck_t], center=true);\n}\n\nmodule mast(x_pos) {\n    mast_h = 50;\n    mast_r = 1.2;\n    translate([x_pos,0,hull_h/2+deck_t])\n        cylinder(h=mast_h, r=mast_r, $fn=12);\n    // Main yard\n    translate([x_pos,0,hull_h/2+deck_t+mast_h*0.6])\n        rotate([0,90,0])\n            cylinder(h=hull_w*1.5, r=0.8, $fn=8);\n}\n\nmodule sail(x_pos) {\n    h = 35;\n    w = 25;\n    thickness = 0.8;\n    translate([x_pos,0,hull_h/2+deck_t+5])\n        rotate([0,90,0])\n            cube([w,thickness,h], center=true);\n}\n\nmodule crow_nest(x_pos) {\n    translate([x_pos,0,hull_h/2+deck_t+40])\n        cylinder(h=4, r1=2.5, r2=2, $fn=12);\n}\n\nmodule rudder() {\n    translate([-hull_l/2,0,0])\n        rotate([0,10,0])\n            cube([8,1.5,hull_h*0.7], center=false);\n}\n\nmodule anchor() {\n    translate([hull_l/2-5,hull_w/2+4,-hull_h/2])\n    union() {\n        cylinder(h=10, r=0.8, $fn=8);\n        translate([0,0,-2])\n            sphere(r=2, $fn=12);\n    }\n}\n\nmodule railing() {\n    // Simple railing along deck edges\n    for (x = [-hull_l/2+5:hull_l/10:hull_l/2-5]) {\n        translate([x, hull_w/2-1, hull_h/2+deck_t+1.5])\n            cube([1,0.5,3], center=true);\n        translate([x, -hull_w/2+1, hull_h/2+deck_t+1.5])\n            cube([1,0.5,3], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    bow();\n    stern();\n    deck();\n    mast(10);\n    mast(-15);\n    sail(10);\n    sail(-15);\n    crow_nest(10);\n    rudder();\n    anchor();\n    railing();\n}",
    "renders": true
  },
  {
    "vehicle": "carrack",
    "openscad_code": "// Carrack - 3D printable medium-complexity model\n// Overall length ≈ 90 mm\n\n$fn = 36;\n\n// Hull parameters\nhull_length = 90;\nhull_width  = 25;\nhull_height = 18;\ndeck_height = 8;\n\n// Castle dimensions\nforecastle_l = 20;\nforecastle_w = 22;\nforecastle_h = 10;\n\naftcastle_l  = 25;\naftcastle_w  = 28;\naftcastle_h  = 14;\n\nmast_diam = 3.5;\nmast_height = 70;\n\n// Modules\nmodule rounded_box(l, w, h, r) {\n    translate([0, 0, h/2])\n    difference() {\n        cube([l, w, h], center = true);\n        // Round edges\n        for(dx = [-1, 1], dy = [-1, 1])\n            translate([dx*(l/2 - r), dy*(w/2 - r), 0])\n            cylinder(r = r, h = h + 0.1, center = true);\n    }\n}\n\nmodule hull_shape() {\n    // Main hull body\n    hull_body();\n    \n    // Taper bow gently\n    translate([hull_length/2 - 3, 0, 3])\n    scale([0.6, 0.9, 0.7])\n    hull_body();\n}\n\nmodule hull_body() {\n    difference() {\n        rounded_box(hull_length, hull_width, hull_height, 5);\n        // Hollow inside for printing\n        translate([0, 0, hull_height/2 + 1])\n        cube([hull_length - 4, hull_width - 4, hull_height], center = true);\n    }\n}\n\nmodule forecastle() {\n    color(\"BurlyWood\")\n    translate([hull_length/2 - forecastle_l/2, 0, deck_height])\n    rounded_box(forecastle_l, forecastle_w, forecastle_h, 3);\n}\n\nmodule aftcastle() {\n    color(\"BurlyWood\")\n    translate([-hull_length/2 + aftcastle_l/2, 0, deck_height])\n    rounded_box(aftcastle_l, aftcastle_w, aftcastle_h, 3);\n}\n\nmodule mast(x, y, h) {\n    color(\"SaddleBrown\")\n    translate([x, y, deck_height])\n    cylinder(d = mast_diam, h = h);\n    \n    // Yard\n    color(\"SaddleBrown\")\n    translate([x, y, deck_height + h * 0.8])\n    rotate([90, 0, 0])\n    cylinder(d = 1.2, h = hull_width * 0.9);\n    \n    // Crow’s nest\n    color(\"BurlyWood\")\n    translate([x, y, deck_height + h - 6])\n    cylinder(d = mast_diam + 2, h = 4);\n}\n\nmodule railing() {\n    color(\"SaddleBrown\")\n    for(side = [-1, 1])\n    translate([0, side * (hull_width/2 - 0.5), deck_height + hull_height/2])\n    cube([hull_length - 4, 1, 3]);\n}\n\nmodule cannons() {\n    color(\"DimGray\")\n    for(i = [-2:2])\n    translate([i * 15, 0, deck_height + 1])\n    rotate([0, 90, 0])\n    cylinder(d = 2.5, h = hull_width/2 - 1);\n}\n\nmodule rudder() {\n    color(\"SaddleBrown\")\n    translate([-hull_length/2 - 2, 0, deck_height])\n    rotate([0, 10, 0])\n    cube([5, 1.5, hull_height + 5]);\n}\n\n// Assembly\nhull_shape();\nforecastle();\naftcastle();\nrailing();\ncannons();\nrudder();\n\n// Three masts\nmast(0, 0, mast_height);\nmast(20, 0, mast_height * 0.9);\nmast(-20, 0, mast_height * 0.85);",
    "renders": true
  },
  {
    "vehicle": "galleon",
    "openscad_code": "// Medium-complexity 3D-printable galleon\n// Overall length ~80 mm, designed without steep overhangs\n\nhull_length = 80;\nhull_width  = 20;\nhull_height = 15;\nkeel_depth  = 5;\nwall = 1.5;\n\nmodule hull() {\n    // Main hull as a stretched half-capsule\n    difference() {\n        scale([1, 0.5, 0.5])\n            cylinder(h=hull_length, r=hull_width, $fn=40);\n        // Hollow interior\n        translate([wall, 0, -keel_depth+wall])\n            scale([1-2*wall/hull_length, 0.5-2*wall/hull_width, 0.5-2*wall/hull_width])\n                cylinder(h=hull_length-2*wall, r=hull_width-wall, $fn=40);\n    }\n}\n\nmodule deck() {\n    color(\"peru\")\n    translate([-hull_length/2+wall, -hull_width/2+wall, 0])\n        cube([hull_length-2*wall, hull_width-2*wall, wall]);\n}\n\nmodule forecastle() {\n    color(\"saddlebrown\")\n    translate([-hull_length/2+10, -hull_width/4, 0])\n        cube([15, hull_width/2, 10]);\n}\n\nmodule quarterdeck() {\n    color(\"saddlebrown\")\n    translate([hull_length/2-20, -hull_width/3, 0])\n        cube([15, 2*hull_width/3, 12]);\n}\n\nmodule mast(base_h, h, r) {\n    translate([0, 0, base_h])\n        cylinder(h=h, r=r, $fn=16);\n}\n\nmodule yardarm(len, diam) {\n    rotate([90, 0, 0])\n        cylinder(h=len, r=diam, $fn=12);\n}\n\nmodule sail(w, h, thickness) {\n    color(\"ivory\")\n    translate([-w/2, 0, 0])\n        cube([w, thickness, h]);\n}\n\nmodule cannons(count, spacing) {\n    for (i = [0:count-1]) {\n        translate([-hull_length/2+10+i*spacing, -hull_width/2-1, 5])\n            rotate([0, 90, 0])\n                cylinder(h=5, r=1.2, $fn=8);\n    }\n}\n\nmodule rudder() {\n    color(\"dimgray\")\n    translate([hull_length/2+1, 0, -keel_depth])\n        rotate([0, 0, 10])\n            cube([8, 2, 12]);\n}\n\nmodule bowsprit() {\n    color(\"saddlebrown\")\n    translate([-hull_length/2-8, 0, 5])\n        rotate([0, 0, -10])\n            cylinder(h=12, r=1.5, $fn=8);\n}\n\ndifference() {\n    union() {\n        hull();\n        deck();\n        forecastle();\n        quarterdeck();\n        \n        // Main mast\n        mast(0, 35, 1.5);\n        translate([0, -15, 30]) yardarm(30, 0.8);\n        translate([0, -15, 30]) sail(28, 25, 0.5);\n        \n        // Fore mast\n        translate([-20, 0, 0]) mast(0, 30, 1.2);\n        translate([-20, -12, 25]) yardarm(25, 0.7);\n        translate([-20, -12, 25]) sail(22, 20, 0.5);\n        \n        // Mizzen mast\n        translate([20, 0, 0]) mast(0, 25, 1);\n        translate([20, -10, 20]) yardarm(20, 0.6);\n        translate([20, -10, 20]) sail(18, 15, 0.5);\n        \n        cannons(4, 15);\n        mirror([0, 1, 0]) cannons(4, 15);\n        \n        rudder();\n        bowsprit();\n    }\n    \n    // Drainage slot for printing\n    translate([0, -hull_width/2-1, -keel_depth-1])\n        cube([hull_length, wall+2, keel_depth+2]);\n}",
    "renders": true
  },
  {
    "vehicle": "manowar",
    "openscad_code": "// Portuguese Man o' War (Physalia physalis)\n// Medium complexity, printable model\n\n$fn = 30;\n\n// Overall scaling\nscale_factor = 0.4;\n\n// Main float (pneumatophore)\nmodule float() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        // Main float body - elongated air sac\n        difference() {\n            // Main ellipsoid shape\n            scale([1.2, 0.8, 0.6])\n                sphere(r = 25);\n            \n            // Hollow out the float\n            scale([1.1, 0.7, 0.5])\n                sphere(r = 25);\n            \n            // Ventral opening\n            translate([0, 0, -15])\n                rotate([0, 0, 0])\n                cylinder(h = 30, r1 = 15, r2 = 18, center = false);\n        }\n        \n        // Ridge along top\n        translate([0, 0, 15])\n            scale([1.3, 0.7, 0.2])\n                sphere(r = 20);\n    }\n}\n\n// Tentacles - both fishing and defensive\nmodule tentacle(length, thickness, segments) {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        for(i = [0:segments-1]) {\n            translate([0, 0, -i * (length/segments)])\n                cylinder(h = length/segments, r = thickness * (1 - i * 0.05), center = false);\n        }\n    }\n}\n\n// Siphonophore colony structure\nmodule colony_structure() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        // Central stem\n        translate([0, 0, -15])\n            cylinder(h = 40, r = 3, center = false);\n        \n        // Gastrozooids (feeding polyps)\n        for(i = [0:5]) {\n            rotate([0, 0, i * 60])\n                translate([12, 0, -20 - i * 3])\n                    scale([0.8, 0.8, 1])\n                        sphere(r = 4);\n        }\n        \n        // Dactylozooids (tentacle polyps)\n        for(i = [0:7]) {\n            angle = i * 51.4;\n            rotate([0, 0, angle])\n                translate([8, 0, -25])\n                    tentacle(25, 1.5, 5);\n        }\n    }\n}\n\n// Main fishing tentacles\nmodule fishing_tentacles() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        // Left cluster\n        for(i = [0:3]) {\n            rotate([0, 0, -30 - i * 15])\n                translate([15, -5, -35])\n                    rotate([15 + i * 5, 0, 0])\n                        tentacle(40 + i * 5, 2, 8);\n        }\n        \n        // Right cluster\n        for(i = [0:3]) {\n            rotate([0, 0, 30 + i * 15])\n                translate([-15, -5, -35])\n                    rotate([15 + i * 5, 0, 0])\n                        tentacle(40 + i * 5, 2, 8);\n        }\n    }\n}\n\n// Base stand for printing stability\nmodule base() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        translate([0, 0, -60])\n            cylinder(h = 5, r = 35, center = false);\n    }\n}\n\n// Assembly\nunion() {\n    // Base\n    base();\n    \n    // Main float\n    translate([0, 0, -5])\n        float();\n    \n    // Colony structure\n    colony_structure();\n    \n    // Tentacles\n    fishing_tentacles();\n}",
    "renders": true
  },
  {
    "vehicle": "frigate",
    "openscad_code": "// Realistic Medium-Complexity Frigate – 3D-printable\n// Hull length ≈ 80 mm, max beam ≈ 15 mm, max height ≈ 25 mm\n// All slopes ≤ 45°, wall thickness ≥ 1 mm\n\n$fn = 32;  // smooth curves\n\nmodule frigate() {\n    // Main hull – elongated tapered block\n    difference() {\n        hull() {\n            translate([-40,0,0]) cube([80,16,5], center=true);\n            translate([ 35,0,0]) cube([10, 8,6], center=true);\n        }\n        // Recess for waterline look\n        translate([-40,0,-2.5]) cube([80,16.2,1.1], center=true);\n    }\n\n    // Superstructure – bridge block\n    translate([-15,0,3]) cube([10,12,4], center=true);\n\n    // Single funnel\n    cylinder(h=6, r1=3, r2=2);\n    translate([0,0,6]) cylinder(h=2, r1=2, r2=1.5);\n\n    // Vertical launch tubes in staggered rows\n    module vls(n) {\n        for(i=[0:n-1]) {\n            translate([8 + i*3, (i%2)*4-2, 4.5])\n                cylinder(h=2, d=2, center=true);\n        }\n    }\n    vls(6);\n\n    // Main gun turret\n    translate([-30,0,2.5]) rotate([0,0,0])\n    difference() {\n        cylinder(h=3, r=4);\n        translate([0,0,-0.1]) cylinder(h=3.2, r=2.5);\n    }\n\n    // CIWS turret\n    translate([20,0,4]) cylinder(h=2, r=2);\n\n    // Mast with radar dome\n    translate([10,0,7]) {\n        cylinder(h=8, r=0.8);\n        translate([0,0,8]) sphere(d=4);\n    }\n\n    // Flight deck & hangar\n    translate([25,0,4]) cube([20,14,1], center=true);\n    translate([35,0,5.5]) cube([10,10,3], center=true);\n\n    // Simple lifeboats under sponsons\n    module lifeboat(x,y) {\n        translate([x,y,2])\n        rotate([0,90,0])\n        scale([1,0.6,0.6])\n        cylinder(h=5, r=1.5);\n    }\n    lifeboat(0,8.5);\n    lifeboat(0,-8.5);\n\n    // Anchor recess\n    translate([-39.5,0,0])\n    rotate([90,0,0])\n    cylinder(h=2, r=1.5, $fn=6);\n}\n\nfrigate();",
    "renders": true
  },
  {
    "vehicle": "destroyer",
    "openscad_code": "// Destroyer - Realistic Style, Medium Complexity\n// 3D printable naval destroyer model (~80mm length)\n\nhull_length = 80;\nhull_width = 9;\nhull_height = 7;\ndeck_clearance = 1.5;\n\nmodule hull() {\n    difference() {\n        // Main hull - sloped bow and flat stern\n        union() {\n            // Bow section\n            translate([0, 0, hull_height/2]) {\n                cube([hull_length*0.3, hull_width, hull_height], center=true);\n            }\n            \n            // Mid section\n            translate([hull_length*0.15, 0, hull_height/2]) {\n                cube([hull_length*0.7, hull_width, hull_height], center=true);\n            }\n            \n            // Tapered stern\n            translate([hull_length*0.65, 0, hull_height*0.4]) {\n                cube([hull_length*0.35, hull_width*0.8, hull_height*0.8], center=true);\n            }\n        }\n        \n        // Hull taper - create pointed bow\n        translate([-hull_length*0.05, 0, -hull_height]) {\n            rotate([0, 0, 15]) {\n                cube([hull_length*0.4, hull_width*2, hull_height*2], center=true);\n            }\n        }\n    }\n}\n\nmodule superstructure() {\n    // Bridge tower\n    translate([hull_length*0.1, 0, hull_height + deck_clearance]) {\n        cube([hull_length*0.15, hull_width*0.6, hull_height*0.8], center=true);\n    }\n    \n    // Command center\n    translate([hull_length*0.05, 0, hull_height + deck_clearance + hull_height*0.4]) {\n        cube([hull_length*0.1, hull_width*0.5, hull_height*0.3], center=true);\n    }\n    \n    // Smoke stacks\n    for (i = [0:1]) {\n        translate([hull_length*(-0.1 + i*0.15), 0, hull_height + deck_clearance]) {\n            cylinder(h=hull_height*0.5, r=hull_width*0.15, center=false);\n        }\n    }\n}\n\nmodule weapons() {\n    // Main gun turret\n    translate([hull_length*0.35, 0, hull_height + deck_clearance]) {\n        difference() {\n            cylinder(h=hull_height*0.3, r=hull_width*0.25, center=false);\n            translate([0, 0, -0.1]) {\n                cylinder(h=hull_height*0.4, r=hull_width*0.2, center=false);\n            }\n        }\n        \n        // Gun barrel\n        translate([hull_width*0.3, 0, hull_height*0.15]) {\n            rotate([0, 90, 0]) {\n                cylinder(h=hull_width*0.8, r=hull_width*0.05, center=false);\n            }\n        }\n    }\n    \n    // Secondary guns\n    for (pos = [[-0.2, 0.3], [-0.2, -0.3], [0.3, 0.3], [0.3, -0.3]]) {\n        translate([hull_length*pos[0], hull_width*pos[1], hull_height + deck_clearance]) {\n            rotate([0, 0, 45]) {\n                cube([hull_length*0.08, hull_width*0.15, hull_height*0.15], center=true);\n            }\n            translate([hull_length*0.04, 0, 0]) {\n                rotate([0, 90, 0]) {\n                    cylinder(h=hull_width*0.3, r=hull_width*0.03, center=false);\n                }\n            }\n        }\n    }\n    \n    // Missile launchers\n    translate([hull_length*(-0.4), 0, hull_height + deck_clearance]) {\n        for (side = [-1, 1]) {\n            translate([0, hull_width*0.3*side, hull_height*0.1]) {\n                cube([hull_length*0.1, hull_width*0.1, hull_height*0.2], center=true);\n            }\n        }\n    }\n}\n\nmodule radar() {\n    // Main radar mast\n    translate([hull_length*(-0.05), 0, hull_height + deck_clearance + hull_height*0.8]) {\n        cylinder(h=hull_height*0.6, r=hull_width*0.05, center=false);\n        \n        // Radar array\n        translate([0, 0, hull_height*0.6]) {\n            rotate([0, 90, 0]) {\n                cylinder(h=hull_width*0.4, r=hull_width*0.2, center=true);\n            }\n        }\n    }\n    \n    // Secondary radar\n    translate([hull_length*0.2, 0, hull_height + deck_clearance + hull_height*0.7]) {\n        cylinder(h=hull_height*0.3, r=hull_width*0.08, center=false);\n    }\n}\n\nmodule deck_details() {\n    // Flight deck markings\n    translate([hull_length*(-0.45), 0, hull_height + deck_clearance - 0.1]) {\n        cube([hull_length*0.3, hull_width*0.8, 0.2], center=true);\n    }\n    \n    // Safety railings\n    for (side = [-1, 1]) {\n        translate([0, hull_width/2*side, hull_height + deck_clearance]) {\n            cube([hull_length*0.9, 0.5, 1], center=true);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    hull();\n    superstructure();\n    weapons();\n    radar();\n    deck_details();\n}",
    "renders": true
  },
  {
    "vehicle": "battleship",
    "openscad_code": "// Realistic Battleship - Medium Complexity\n// Scale: 1:2000 (approx 80mm long)\n\nhull_length = 80;\nhull_width = 12;\nhull_height = 8;\ndeck_height = 2;\n\n$fn = 32;\n\nmodule bow() {\n    difference() {\n        hull();\n        translate([hull_length/2, 0, -hull_height])\n            cube([hull_length/2, hull_width*2, hull_height*2], center=true);\n    }\n}\n\nmodule stern() {\n    difference() {\n        hull();\n        translate([-hull_length/2, 0, -hull_height])\n            cube([hull_length/2, hull_width*2, hull_height*2], center=true);\n    }\n}\n\nmodule hull() {\n    translate([0, 0, hull_height/2])\n    scale([1, 0.7, 1])\n    sphere(d=hull_width);\n    \n    translate([0, 0, hull_height/2])\n    cube([hull_length, hull_width, hull_height], center=true);\n}\n\nmodule deck() {\n    translate([0, 0, hull_height])\n    cube([hull_length-6, hull_width-2, deck_height], center=true);\n}\n\nmodule superstructure() {\n    // Bridge tower\n    translate([-10, 0, hull_height+deck_height])\n    cube([8, 6, 12], center=true);\n    \n    // Secondary tower\n    translate([5, 0, hull_height+deck_height])\n    cube([6, 5, 8], center=true);\n    \n    // Funnel\n    translate([0, 2, hull_height+deck_height+12])\n    cylinder(h=8, d1=3, d2=4, center=true);\n}\n\nmodule turret(size, height, offset) {\n    translate([offset, 0, hull_height+deck_height])\n    union() {\n        // Turret base\n        cube([size, size-2, height], center=true);\n        \n        // Gun barrels\n        translate([size/2+2, 0, height/2])\n        rotate([0, 90, 0])\n        cylinder(h=size*1.5, d=size/4, center=true);\n        \n        translate([size/2+2, -2, height/2])\n        rotate([0, 90, 0])\n        cylinder(h=size*1.5, d=size/4, center=true);\n        \n        translate([size/2+2, 2, height/2])\n        rotate([0, 90, 0])\n        cylinder(h=size*1.5, d=size/4, center=true);\n    }\n}\n\nmodule secondary_guns() {\n    for(i = [-30:15:30]) {\n        translate([i, hull_width/2-1, hull_height+deck_height])\n        rotate([0, 0, 90])\n        cube([4, 1, 2], center=true);\n        \n        translate([i, -hull_width/2+1, hull_height+deck_height])\n        rotate([0, 0, 90])\n        cube([4, 1, 2], center=true);\n    }\n}\n\nmodule radar() {\n    translate([-10, 0, hull_height+deck_height+12+8])\n    sphere(d=2);\n    \n    translate([-10, 0, hull_height+deck_height+12+10])\n    cylinder(h=2, d=0.5);\n    \n    translate([-10, 0, hull_height+deck_height+12+11])\n    sphere(d=1);\n}\n\n// Main assembly\nunion() {\n    // Hull sections\n    bow();\n    stern();\n    \n    // Deck and superstructure\n    deck();\n    superstructure();\n    \n    // Main turrets\n    turret(6, 4, -20);\n    turret(6, 4, -5);\n    turret(6, 4, 15);\n    \n    // Secondary armament\n    secondary_guns();\n    \n    // Radar and antennas\n    radar();\n}",
    "renders": true
  },
  {
    "vehicle": "aircraftcarrier",
    "openscad_code": "// Realistic Medium-Complexity Aircraft Carrier – 3D-printable\n// Approx. 80 mm long, 20 mm wide, 8 mm tall\n// All overhangs avoided (45° slopes or chamfers used)\n\n$fa = 2;\n$fs = 0.5;\n\n// Overall scale factor – change to resize whole model\nscale_factor = 1;\n\nmodule carrier() {\n    // Main hull – full length 80 mm\n    difference() {\n        hull_profile();\n        \n        // Hollow interior for weight & material saving\n        translate([5,0,-5])\n            cube([70,18,6], center=true);\n    }\n    \n    // Flight deck on top\n    translate([0,0,2.8])\n        flight_deck();\n    \n    // Island superstructure (starboard)\n    translate([5,11,3])\n        island();\n    \n    // 4 catapults (raised strips)\n    for (i=[-1,1]) {\n        translate([5,i*4,3.2])\n            catapult();\n    }\n    \n    // Arrestor wires\n    translate([-30,0,3.2])\n        arrestor_wires();\n    \n    // Bow sponsons for anchor & equipment\n    translate([38,14,0])\n        sponson();\n    translate([38,-14,0])\n        mirror([0,1,0])\n            sponson();\n    \n    // 3 elevators flush with deck\n    translate([10,10,3])\n        elevator();\n    translate([10,-10,3])\n        mirror([0,1,0])\n            elevator();\n    translate([-25,0,3])\n        elevator();\n    \n    // Simple 16 aircraft placeholders\n    for (x=[-25:25:25])\n        for (y=[-6:6:12])\n            translate([x,y,3.8])\n                scale([0.8,0.8,0.8])\n                    aircraft();\n}\n\nmodule hull_profile() {\n    // Tapered hull with slight flare\n    linear_extrude(height=4, convexity=10)\n    polygon(points=[\n        [40,0], [38,10], [30,12], [-38,12], [-40,10], [-40,-10], [-38,-12], [30,-12], [38,-10]\n    ]);\n}\n\nmodule flight_deck() {\n    color(\"slategray\")\n    translate([0,0,0.2])\n        cube([82,22,0.4], center=true);\n}\n\nmodule island() {\n    // Multi-level island\n    union() {\n        // Base\n        color(\"gray\")\n        translate([0,0,0])\n            cube([10,6,4]);\n        \n        // Second level\n        translate([0,-1,4])\n            cube([8,4,2]);\n        \n        // Mast\n        translate([0,0,6.5])\n            cylinder(h=3, d=1.5);\n    }\n}\n\nmodule catapult() {\n    color(\"darkgray\")\n    translate([-15,0,0])\n        cube([30,1.2,0.2]);\n}\n\nmodule arrestor_wires() {\n    for (dy=[-3,0,3]) {\n        color(\"black\")\n        translate([0,dy,0])\n            cube([30,0.5,0.2]);\n    }\n}\n\nmodule sponson() {\n    color(\"gray\")\n    hull_profile();\n}\n\nmodule elevator() {\n    color(\"silver\")\n    cube([8,8,0.2]);\n}\n\nmodule aircraft() {\n    // Simplified jet placeholder\n    color(\"darkgreen\")\n    union() {\n        cube([4,3,0.6], center=true);\n        translate([1.5,0,0])\n            cube([1,5,0.4], center=true);\n    }\n}\n\n// Render the carrier scaled\nscale([scale_factor,scale_factor,scale_factor])\n    carrier();",
    "renders": true
  },
  {
    "vehicle": "submersible",
    "openscad_code": "// Realistic medium-complexity 3D-printable submersible\n// Main body dimensions\nbody_len = 80;\nbody_dia = 35;\nwall = 2;\n\n// Propeller parameters\nprop_hub = 6;\nprop_blade = 12;\nprop_blade_thk = 2;\nblade_angle = 30;\n\nmodule main_hull() {\n    // Central pressure hull\n    cylinder(h = body_len, d = body_dia, $fn = 64);\n    \n    // Tapered nose cone\n    translate([0, 0, body_len/2])\n        cylinder(h = 25, d1 = body_dia, d2 = body_dia*0.6, $fn = 64);\n    \n    // Tapered tail cone\n    translate([0, 0, -body_len/2])\n        cylinder(h = 20, d1 = body_dia, d2 = body_dia*0.7, $fn = 64);\n}\n\nmodule viewport() {\n    // Front acrylic viewport\n    difference() {\n        translate([0, 0, body_len/2 + 12])\n            sphere(d = body_dia*0.6, $fn = 64);\n        translate([0, 0, body_len/2 + 12 - 2])\n            sphere(d = body_dia*0.5, $fn = 64);\n    }\n}\n\nmodule ballast_tanks() {\n    // Twin side ballast tanks with flat bottom for printing\n    for(side = [-1, 1]) {\n        translate([side*body_dia/2 + 4, 0, 0])\n            difference() {\n                cube([8, body_len*0.7, 12], center = true);\n                translate([0, 0, -wall])\n                    cube([8 - wall*2, body_len*0.7 - wall*2, 12], center = true);\n            }\n    }\n}\n\nmodule propeller() {\n    // Propeller hub\n    rotate([0, 0, 0]) {\n        translate([0, 0, -body_len/2 - 15])\n            cylinder(h = prop_hub, d = prop_hub, $fn = 32);\n        \n        // Four blades at 30° angle\n        for(i = [0:90:270]) {\n            rotate([blade_angle, 0, i])\n                translate([0, 0, -body_len/2 - 15 + prop_hub/2])\n                    cube([prop_blade_thk, prop_blade, prop_hub], center = true);\n        }\n    }\n}\n\nmodule dive_planes() {\n    // Fore dive planes\n    for(side = [-1, 1]) {\n        translate([side*(body_dia/2 + 3), 0, body_len/4])\n            rotate([0, 15, 0])\n                cube([12, 1, 8], center = true);\n    }\n    \n    // Rear dive planes\n    for(side = [-1, 1]) {\n        translate([side*(body_dia/2 + 3), 0, -body_len/4])\n            rotate([0, -15, 0])\n                cube([12, 1, 8], center = true);\n    }\n}\n\nmodule rudder_fin() {\n    // Vertical tail fin\n    translate([0, 0, -body_len/2 - 5])\n        rotate([0, 0, 0])\n            cube([1, 12, 15], center = true);\n    \n    // Horizontal stabilizers\n    for(side = [-1, 1]) {\n        translate([0, side*8, -body_len/2 - 5])\n            rotate([0, 0, 0])\n                cube([10, 1, 8], center = true);\n    }\n}\n\nmodule periscope() {\n    // Periscope mast\n    translate([0, body_dia/2, body_len/4])\n        cylinder(h = 25, d = 4, $fn = 16);\n}\n\n// Build the submersible\ndifference() {\n    union() {\n        main_hull();\n        viewport();\n        ballast_tanks();\n        propeller();\n        dive_planes();\n        rudder_fin();\n        periscope();\n    }\n    \n    // Remove interior for hollow shell printing\n    translate([0, 0, 0])\n        cylinder(h = body_len + 50, d = body_dia - wall*2, $fn = 64);\n}",
    "renders": true
  },
  {
    "vehicle": "minisub",
    "openscad_code": "// Mini-submarine, realistic style, medium complexity\n// All dimensions in mm.  Overall length ~85 mm\n\n$fn = 32;            // good curved surfaces for printing\n\n// Main hull -------------------------------------------------\nmodule hull() {\n    // central pressure hull (cylindrical with rounded ends)\n    difference() {\n        union() {\n            // cylindrical body\n            cylinder(h = 55, d = 30, center = true);\n\n            // hemispherical bow\n            translate([0, 0, 27.5])\n                sphere(d = 30);\n\n            // hemispherical stern\n            translate([0, 0, -27.5])\n                sphere(d = 30);\n        }\n\n        // hollow it out (2 mm wall)\n        translate([0, 0, 0])\n            cylinder(h = 60, d = 26, center = true);\n\n        translate([0, 0, 27.5])\n            sphere(d = 26);\n\n        translate([0, 0, -27.5])\n            sphere(d = 26);\n    }\n}\n\n// Conning tower / sail --------------------------------------\nmodule sail() {\n    translate([0, 0, 18]) {\n        difference() {\n            // sail body\n            cube([20, 6, 10], center = true);\n            // hollow\n            translate([0, 0, 0])\n                cube([16, 2.5, 8], center = true);\n        }\n\n        // periscope mast\n        translate([5, 0, 7]) {\n            cylinder(h = 15, d = 2, $fn = 12);\n        }\n    }\n}\n\n// Propeller -------------------------------------------------\nmodule prop() {\n    // shroud\n    difference() {\n        cylinder(h = 5, d1 = 18, d2 = 20);\n        translate([0, 0, -1])\n            cylinder(h = 7, d = 16);\n    }\n\n    // four blades\n    rotate([90, 0, 0]) {\n        for (i = [0:90:270]) {\n            rotate([0, 0, i]) translate([0, 0, 2.5])\n                cube([12, 2, 0.8], center = true);\n        }\n    }\n}\n\n// Bow planes -------------------------------------------------\nmodule bowplanes() {\n    for (side = [-1, 1]) {\n        translate([12, side * 7.5, 0])\n            rotate([0, 20 * side, 0])\n                cube([12, 1.5, 6], center = true);\n    }\n}\n\n// Stern planes ----------------------------------------------\nmodule sternplanes() {\n    for (side = [-1, 1]) {\n        translate([-12, side * 7.5, 0])\n            rotate([0, 20 * side, 0])\n                cube([12, 1.5, 6], center = true);\n    }\n}\n\n// Rudder ----------------------------------------------------\nmodule rudder() {\n    translate([-14, 0, 0])\n        rotate([0, 90, 0])\n            cube([8, 1.5, 12], center = true);\n}\n\n// Skid / keel strip -----------------------------------------\nmodule keel() {\n    translate([0, 0, -16])\n        cube([60, 4, 2], center = true);\n}\n\n// Main assembly ---------------------------------------------\nunion() {\n    hull();\n    sail();\n    bowplanes();\n    sternplanes();\n    rudder();\n    keel();\n    translate([0, 0, -35]) prop();\n}",
    "renders": true
  },
  {
    "vehicle": "researchsub",
    "openscad_code": "// Research Submersible - Realistic Medium Complexity\n// Approx 80mm overall length\n\n$fn = 24;  // Smooth curves for printing\nwall = 2;  // Wall thickness for 3D printing\n\n// Main hull cylinder with rounded ends\nmodule hull() {\n    difference() {\n        union() {\n            // Main cylindrical body\n            cylinder(h = 60, r = 15, center = true);\n            // Front dome\n            translate([0, 0, 30]) sphere(r = 15);\n            // Rear dome\n            translate([0, 0, -30]) sphere(r = 15);\n        }\n        // Hollow interior\n        cylinder(h = 62, r = 15 - wall, center = true);\n        translate([0, 0, 30]) sphere(r = 15 - wall);\n        translate([0, 0, -30]) sphere(r = 15 - wall);\n    }\n}\n\n// Viewport dome on top\nmodule viewport() {\n    translate([0, 0, 35]) {\n        difference() {\n            sphere(r = 8);\n            translate([0, 0, -5]) cube([20, 20, 20], center = true);\n            cylinder(h = 10, r = 3, center = true);\n        }\n    }\n}\n\n// Thruster module\nmodule thruster(pos) {\n    translate(pos) {\n        // Thruster shroud\n        cylinder(h = 8, r1 = 4, r2 = 5);\n        // Propeller hub\n        translate([0, 0, 4]) cylinder(h = 2, r = 2);\n        // Propeller blades (4 blades)\n        for (i = [0:3]) {\n            rotate([0, 0, i * 90]) {\n                translate([0, 3, 5]) cube([1, 6, 0.5], center = true);\n            }\n        }\n    }\n}\n\n// Ballast tanks (side pods)\nmodule ballast_tank(side) {\n    translate([side * 20, 0, 0]) {\n        scale([0.5, 1, 1]) cylinder(h = 30, r = 10);\n    }\n}\n\n// Manipulator arm\nmodule manipulator() {\n    translate([0, 15, 10]) {\n        rotate([90, 0, 0]) {\n            // Base joint\n            cylinder(h = 5, r = 3);\n            translate([0, 0, 5]) {\n                rotate([0, 0, 45]) {\n                    // Upper arm\n                    cube([3, 15, 3], center = true);\n                    translate([0, 7.5, 0]) {\n                        rotate([0, 0, -90]) {\n                            // Lower arm\n                            cube([2, 10, 2], center = true);\n                            translate([0, 5, 0]) {\n                                // Gripper\n                                cube([1, 3, 1], center = true);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    hull();\n    viewport();\n    \n    // Main thrusters (3 rear)\n    thruster([0, 0, -35]);\n    thruster([0, 8, -33]);\n    thruster([0, -8, -33]);\n    \n    // Vertical thrusters (2 top/bottom)\n    thruster([0, 15, 0]);\n    rotate([180, 0, 0]) thruster([0, 15, 0]);\n    \n    // Ballast tanks\n    ballast_tank(1);\n    ballast_tank(-1);\n    \n    // Manipulator arms (2 sides)\n    manipulator();\n    mirror([1, 0, 0]) manipulator();\n    \n    // Sensor mast\n    translate([0, 0, 40]) {\n        cylinder(h = 10, r = 2);\n        translate([0, 0, 5]) sphere(r = 3);\n    }\n    \n    // Skid rails\n    translate([0, 0, -45]) {\n        for (x = [-20, 20]) {\n            translate([x, 0, 0]) cube([3, 30, 2]);\n        }\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "tourboat",
    "openscad_code": "// Tour Boat - Realistic Style, Medium Complexity\n// Approx 1:200 scale (~80 mm long)\n\n$fn = 36;  // Smooth curves for 3D printing\n\n// Main hull module\nmodule hull() {\n    difference() {\n        // Main hull body\n        hull_union();\n        \n        // Remove interior for hollow hull\n        translate([0, 0, -1])\n            scale([0.8, 0.8, 0.9])\n            hull_union();\n    }\n}\n\n// Hull shape generator\nmodule hull_union() {\n    union() {\n        // Bow section\n        translate([35, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h=15, r1=12, r2=0);\n        \n        // Main hull body\n        translate([0, 0, 6])\n            cube([60, 24, 8], center=true);\n        \n        // Stern section\n        translate([-35, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h=15, r1=12, r2=8);\n        \n        // Hull bottom curve\n        translate([0, 0, -2])\n            cube([70, 24, 4], center=true);\n    }\n}\n\n// Cabin superstructure\nmodule cabin() {\n    difference() {\n        // Main cabin\n        translate([10, 0, 12])\n            cube([30, 20, 8], center=true);\n        \n        // Cabin windows\n        for(x = [20, 10, 0, -10]) {\n            translate([x, 11, 14])\n                cube([4, 1, 3], center=true);\n            translate([x, -11, 14])\n                cube([4, 1, 3], center=true);\n        }\n    }\n}\n\n// Bridge/Wheelhouse\nmodule bridge() {\n    difference() {\n        // Bridge structure\n        translate([20, 0, 22])\n            cube([12, 14, 6], center=true);\n        \n        // Bridge windows\n        translate([26, 0, 24])\n            cube([1, 8, 3], center=true);\n        translate([20, 8, 24])\n            cube([8, 1, 3], center=true);\n        translate([20, -8, 24])\n            cube([8, 1, 3], center=true);\n    }\n}\n\n// Life rings\nmodule life_rings() {\n    for(pos = [[-15, 13, 14], [-15, -13, 14]]) {\n        translate(pos)\n            rotate([90, 0, 0])\n            difference() {\n                cylinder(h=2, r=3);\n                cylinder(h=3, r=2);\n            }\n    }\n}\n\n// Railings\nmodule railings() {\n    // Front railing\n    for(x = [-25:5:25]) {\n        translate([x, 12, 11])\n            cylinder(h=4, r=0.5);\n    }\n    \n    // Rear railing\n    for(x = [-25:5:-10]) {\n        translate([x, 12, 11])\n            cylinder(h=4, r=0.5);\n    }\n    \n    // Top rail\n    translate([7.5, 12, 15])\n        cube([37.5, 1, 1], center=true);\n    translate([7.5, -12, 15])\n        cube([37.5, 1, 1], center=true);\n}\n\n// Deck details\nmodule deck_details() {\n    // Ventilation stacks\n    translate([-20, 0, 20])\n        cylinder(h=8, r=2);\n    \n    // Bench seats\n    for(x = [-10:10:10]) {\n        translate([x, 0, 12.5])\n            cube([8, 3, 1], center=true);\n    }\n}\n\n// Main assembly\nunion() {\n    // Hull and superstructure\n    hull();\n    cabin();\n    bridge();\n    \n    // Details\n    life_rings();\n    railings();\n    deck_details();\n}",
    "renders": true
  },
  {
    "vehicle": "excursionboat",
    "openscad_code": "$fn = 24;           // Smooth curves\nhull_thk = 1.5;     // Wall thickness for 3D printing\nscale = 0.6;        // Overall model scale\n\nmodule hull() {\n    difference() {\n        // Main hull body\n        hull() {\n            translate([0, 0, 0])     cube([55, 22, 8], center=true);\n            translate([0, 0, -3])    cube([50, 18, 5], center=true);\n            translate([0, 0, -6])    cube([45, 14, 3], center=true);\n        }\n        // Hollow out interior\n        translate([0, 0, 1.5]) cube([52-2*hull_thk, 20-2*hull_thk, 10], center=true);\n    }\n}\n\nmodule deck() {\n    difference() {\n        translate([0, 0, 4]) cube([53, 23, hull_thk], center=true);\n        translate([0, 0, 5]) cube([51-2*hull_thk, 21-2*hull_thk, hull_thk], center=true);\n    }\n}\n\nmodule railing(steps=8) {\n    for(i=[-1:1]) {\n        // Posts\n        translate([20*i, 11, 5.5]) cylinder(h=6, d=1.5);\n        translate([20*i, -11, 5.5]) cylinder(h=6, d=1.5);\n    }\n    // Top rail\n    translate([0, 11, 11.5]) cube([42, 1.5, 1.5], center=true);\n    translate([0, -11, 11.5]) cube([42, 1.5, 1.5], center=true);\n}\n\nmodule cabin() {\n    difference() {\n        // Cabin block\n        translate([0, 0, 6.5]) cube([25, 18, 12], center=true);\n        // Door\n        translate([-12, 0, 6.5]) cube([hull_thk*2, 4, 8], center=true);\n        // Windows\n        for(side=[-1,1])\n            for(x=[-7,0,7])\n                translate([x, side*8.5, 11]) cube([4, hull_thk*2, 3], center=true);\n    }\n    // Cabin roof\n    translate([0, 0, 13.5]) cube([26, 19, 2], center=true);\n}\n\nmodule bench() {\n    translate([10, 0, 5.5]) {\n        difference() {\n            cube([4, 10, 3], center=true);\n            translate([0, 0, 0.5]) cube([3, 9, 2], center=true);\n        }\n    }\n}\n\nmodule propeller() {\n    rotate([0, 90, 0]) translate([-25, 0, -3]) {\n        // Shaft\n        cylinder(h=6, d=2);\n        // Blades\n        for(a=[0:120:240])\n            rotate([0, 0, a]) translate([0, 2.5, 0]) cube([0.5, 5, 1.5]);\n    }\n}\n\nmodule life_ring() {\n    translate([20, 9, 10]) rotate([90, 0, 0])\n    difference() {\n        cylinder(h=2, d=6);\n        cylinder(h=2.5, d=3);\n    }\n}\n\nmodule radar() {\n    translate([0, 0, 15.5]) {\n        cylinder(h=4, d=1.5);\n        rotate([90, 0, 0]) translate([0, 0, 2]) cube([10, 1, 1.5], center=true);\n    }\n}\n\nscale(scale) {\n    hull();\n    deck();\n    railing();\n    cabin();\n    bench();\n    mirror([1,0,0]) bench(); // Second bench\n    propeller();\n    life_ring();\n    mirror([1,0,0]) life_ring(); // Ring on other side\n    radar();\n}",
    "renders": true
  },
  {
    "vehicle": "sightseeingboat",
    "openscad_code": "// Realistic sightseeing boat - medium complexity\n// 3D printable, ~80mm long\n\n$fn = 50; // Smooth curves\nhull_thickness = 2;\ndeck_height = 8;\n\n// Main dimensions\nboat_length = 80;\nboat_width = 28;\nboat_height = 16;\n\nmodule hull() {\n    // Main hull shape - rounded bottom\n    difference() {\n        hull() {\n            // Front rounded section\n            translate([boat_length/2-8, 0, 0])\n                scale([1, 0.6, 0.7])\n                    sphere(r=10);\n            \n            // Rear flat section\n            translate([-boat_length/2+5, 0, -3])\n                scale([1, 0.9, 0.5])\n                    cube([10, boat_width-4, 10], center=true);\n            \n            // Center section\n            translate([0, 0, -3])\n                scale([1.1, 1, 0.6])\n                    cylinder(h=15, r1=boat_width/2-2, r2=boat_width/2-2);\n        }\n        \n        // Hollow out interior\n        translate([0, 0, 2])\n            scale([0.9, 0.85, 0.9])\n                hull() {\n                    translate([boat_length/2-10, 0, 0])\n                        scale([1, 0.6, 0.7])\n                            sphere(r=9);\n                    translate([-boat_length/2+5, 0, -3])\n                        scale([1, 0.9, 0.5])\n                            cube([10, boat_width-6, 10], center=true);\n                    translate([0, 0, -3])\n                        scale([1.1, 1, 0.6])\n                            cylinder(h=15, r1=boat_width/2-4, r2=boat_width/2-4);\n                }\n    }\n}\n\nmodule deck() {\n    // Main deck surface\n    translate([0, 0, boat_height/2])\n        difference() {\n            // Deck platform\n            cube([boat_length-10, boat_width-4, deck_height], center=true);\n            \n            // Seating area cutout\n            translate([5, 0, -deck_height/2+1])\n                cube([boat_length-25, boat_width-10, deck_height+2], center=true);\n        }\n}\n\nmodule cabin() {\n    // Pilot cabin at front\n    translate([boat_length/2-15, 0, boat_height/2+deck_height/2])\n        union() {\n            // Main cabin structure\n            cube([15, boat_width-8, 10], center=true);\n            \n            // Cabin roof\n            translate([0, 0, 6])\n                cube([16, boat_width-6, 2], center=true);\n            \n            // Windows (cutouts)\n            for(x = [-5, 0, 5]) {\n                translate([x, (boat_width-8)/2-1, 2])\n                    cube([3, 0.5, 4], center=true);\n                translate([x, -(boat_width-8)/2+1, 2])\n                    cube([3, 0.5, 4], center=true);\n            }\n        }\n}\n\nmodule seats() {\n    // Seating rows\n    for(i = [-1:1]) {\n        translate([i*15-5, 0, boat_height/2+deck_height/2+1])\n            cube([10, boat_width-12, 3], center=true);\n    }\n}\n\nmodule railings() {\n    // Safety railings around deck\n    railing_height = 5;\n    \n    // Left side\n    translate([0, (boat_width-4)/2, boat_height/2+deck_height/2+railing_height/2])\n        cube([boat_length-12, 1, railing_height], center=true);\n    \n    // Right side\n    translate([0, -(boat_width-4)/2, boat_height/2+deck_height/2+railing_height/2])\n        cube([boat_length-12, 1, railing_height], center=true);\n    \n    // Front posts\n    for(x = [boat_length/2-15, -boat_length/2+15]) {\n        translate([x, (boat_width-4)/2-1, boat_height/2+deck_height/2+railing_height/2])\n            cylinder(h=railing_height, r=0.8);\n        translate([x, -(boat_width-4)/2+1, boat_height/2+deck_height/2+railing_height/2])\n            cylinder(h=railing_height, r=0.8);\n    }\n}\n\nmodule propeller() {\n    // Simple propeller at rear\n    translate([-boat_length/2+5, 0, -2]) {\n        rotate([90, 0, 0])\n            union() {\n                // Propeller hub\n                cylinder(h=3, r=2);\n                \n                // Blades\n                for(i = [0:120:359]) {\n                    rotate([0, 0, i])\n                        translate([0, 3, 0])\n                            cube([1, 4, 0.5], center=true);\n                }\n            }\n    }\n}\n\n// Assemble the boat\nunion() {\n    hull();\n    deck();\n    cabin();\n    seats();\n    railings();\n    propeller();\n}",
    "renders": true
  },
  {
    "vehicle": "dinnercruise",
    "openscad_code": "// Dinner Cruise Boat - Realistic Style, Medium Complexity\n// Approximate size: 80mm long, suitable for 3D printing\n\n$fn = 32;\n\n// Main dimensions\nhull_length = 80;\nhull_width = 20;\nhull_height = 10;\ndeck_clearance = 2;\n\n// Hull module\nmodule hull() {\n    difference() {\n        // Main hull shape - tapered\n        hull_shape();\n        \n        // Hollow out interior\n        translate([0, 0, -1])\n            scale([0.8, 0.8, 1.2])\n                hull_shape();\n    }\n}\n\nmodule hull_shape() {\n    // Create tapered hull with rounded bottom\n    hull_points = [\n        [-hull_length/2, -hull_width/2, 0],\n        [hull_length/2, -hull_width/2, 0],\n        [hull_length/2, hull_width/2, 0],\n        [-hull_length/2, hull_width/2, 0],\n        [-hull_length/2 + 5, -hull_width/2 + 2, hull_height],\n        [hull_length/2 - 5, -hull_width/2 + 2, hull_height],\n        [hull_length/2 - 5, hull_width/2 - 2, hull_height],\n        [-hull_length/2 + 5, hull_width/2 - 2, hull_height]\n    ];\n    \n    polyhedron(\n        points = hull_points,\n        faces = [\n            [0,1,2,3],  // bottom\n            [4,5,1,0],  // sides\n            [5,6,2,1],\n            [6,7,3,2],\n            [7,4,0,3],\n            [4,5,6,7]   // top\n        ]\n    );\n}\n\n// Deck module\nmodule deck() {\n    translate([0, 0, hull_height])\n        cube([hull_length - 10, hull_width - 4, 2], center=true);\n}\n\n// Cabin structure\nmodule cabin() {\n    translate([0, 0, hull_height + 2])\n        difference() {\n            // Main cabin block\n            cube([hull_length - 20, hull_width - 6, 15], center=true);\n            \n            // Cabin windows\n            for(i = [-1, 1]) {\n                translate([i * 15, 0, 5])\n                    cube([8, hull_width - 8, 6], center=true);\n            }\n            \n            translate([0, 0, 10])\n                cube([hull_length - 25, hull_width - 10, 5], center=true);\n        }\n}\n\n// Bridge/upper deck\nmodule bridge() {\n    translate([0, 0, hull_height + 17])\n        cube([hull_length - 30, hull_width - 10, 8], center=true);\n}\n\n// Lifeboats (2 on each side)\nmodule lifeboats() {\n    for(side = [-1, 1]) {\n        for(pos = [-20, 10]) {\n            translate([pos, side * (hull_width/2 + 3), hull_height + 5])\n                rotate([0, 0, side * 90])\n                    lifeboat();\n        }\n    }\n}\n\nmodule lifeboat() {\n    scale([8, 4, 3])\n        difference() {\n            sphere(1);\n            translate([0, 0, -0.5])\n                cube([2, 2, 1], center=true);\n        }\n}\n\n// Railing posts\nmodule railings() {\n    for(side = [-1, 1]) {\n        for(pos = [-35:10:35]) {\n            translate([pos, side * (hull_width/2 - 1), hull_height + 2])\n                cylinder(h=4, d=1.5);\n        }\n    }\n}\n\n// Smoke stack\nmodule smokestack() {\n    translate([20, 0, hull_height + 25])\n        cylinder(h=12, d1=4, d2=3);\n}\n\n// Main assembly\nunion() {\n    hull();\n    deck();\n    cabin();\n    bridge();\n    lifeboats();\n    railings();\n    smokestack();\n}",
    "renders": true
  },
  {
    "vehicle": "partyboat",
    "openscad_code": "// Party Boat - Realistic Style, Medium Complexity\n// Dimensions: ~80mm long, ~30mm wide, ~25mm tall\n\n// Hull parameters\nhull_length = 80;\nhull_width = 30;\nhull_height = 12;\nwall_thickness = 2;\n\n// Deck parameters\ndeck_thickness = 2;\nrailing_height = 5;\nrailing_post_spacing = 10;\n\n// Cabin parameters\ncabin_length = 30;\ncabin_width = 22;\ncabin_height = 15;\n\n// Details\nprop_diameter = 12;\nprop_height = 3;\nwindow_size = 4;\n\nmodule hull() {\n    difference() {\n        // Main hull shape\n        hull_shape();\n        \n        // Hollow out interior\n        translate([0, 0, -1])\n        scale([0.8, 0.8, 0.9])\n        hull_shape();\n    }\n}\n\nmodule hull_shape() {\n    hull_points = [\n        [-hull_length/2, 0, 0],\n        [hull_length/2, 0, 0],\n        [hull_length/2-10, hull_width/2-5, 0],\n        [-hull_length/2+15, hull_width/2-5, 0],\n        [-hull_length/2+10, 0, hull_height]\n    ];\n    \n    linear_extrude(height = hull_height, convexity = 10)\n    polygon(points = [\n        [-hull_length/2, -hull_width/2],\n        [hull_length/2-5, -hull_width/2],\n        [hull_length/2, 0],\n        [hull_length/2-5, hull_width/2],\n        [-hull_length/2, hull_width/2]\n    ]);\n}\n\nmodule deck() {\n    // Main deck\n    translate([0, 0, hull_height])\n    cube([hull_length-10, hull_width, deck_thickness], center = true);\n    \n    // Cabin base\n    translate([0, 0, hull_height + deck_thickness])\n    cube([cabin_length+5, cabin_width+5, deck_thickness], center = true);\n}\n\nmodule cabin() {\n    // Main cabin\n    translate([0, 0, hull_height + 2*deck_thickness + cabin_height/2])\n    cube([cabin_length, cabin_width, cabin_height], center = true);\n    \n    // Cabin roof\n    translate([0, 0, hull_height + 2*deck_thickness + cabin_height + 2])\n    cube([cabin_length+2, cabin_width+2, 3], center = true);\n    \n    // Windows\n    for(i = [-1, 1]) {\n        translate([i * (cabin_length/2 - 3), cabin_width/2 - 1, hull_height + 2*deck_thickness + cabin_height/2])\n        rotate([0, 90, 0])\n        cylinder(h = 0.1, r = window_size/2, $fn = 8);\n        \n        translate([i * (cabin_length/2 - 3), -(cabin_width/2 - 1), hull_height + 2*deck_thickness + cabin_height/2])\n        rotate([0, 90, 0])\n        cylinder(h = 0.1, r = window_size/2, $fn = 8);\n    }\n}\n\nmodule railings() {\n    // Railing posts along sides\n    for(x = [-hull_length/2+10 : railing_post_spacing : hull_length/2-15]) {\n        // Left side\n        translate([x, hull_width/2 - 1, hull_height + deck_thickness])\n        cylinder(h = railing_height, r = 1, $fn = 8);\n        \n        // Right side\n        translate([x, -hull_width/2 + 1, hull_height + deck_thickness])\n        cylinder(h = railing_height, r = 1, $fn = 8);\n    }\n    \n    // Top rails\n    translate([0, hull_width/2 - 1, hull_height + deck_thickness + railing_height - 1])\n    cube([hull_length-20, 1, 1], center = true);\n    \n    translate([0, -hull_width/2 + 1, hull_height + deck_thickness + railing_height - 1])\n    cube([hull_length-20, 1, 1], center = true);\n}\n\nmodule propeller() {\n    // Engine housing\n    translate([-hull_length/2 + 5, 0, hull_height/2])\n    rotate([90, 0, 0])\n    cylinder(h = 10, r1 = 6, r2 = 4, $fn = 16);\n    \n    // Propeller blades\n    for(angle = [0 : 120 : 240]) {\n        rotate([0, 0, angle])\n        translate([-hull_length/2 + 2, 0, hull_height/2])\n        rotate([0, 90, 0])\n        cylinder(h = prop_height, r1 = prop_diameter/2, r2 = 2, $fn = 3);\n    }\n}\n\nmodule party_details() {\n    // Speakers on deck\n    translate([hull_length/4, hull_width/4, hull_height + deck_thickness + 2])\n    cube([4, 4, 4], center = true);\n    \n    translate([hull_length/4, -hull_width/4, hull_height + deck_thickness + 2])\n    cube([4, 4, 4], center = true);\n    \n    // Flag pole\n    translate([hull_length/2 - 8, 0, hull_height + 2*deck_thickness + cabin_height + 5])\n    cylinder(h = 10, r = 0.5, $fn = 8);\n    \n    // Flag\n    translate([hull_length/2 - 7, 0, hull_height + 2*deck_thickness + cabin_height + 10])\n    cube([8, 4, 0.5], center = true);\n}\n\n// Main assembly\nunion() {\n    hull();\n    deck();\n    cabin();\n    railings();\n    propeller();\n    party_details();\n}",
    "renders": true
  },
  {
    "vehicle": "charterboat",
    "openscad_code": "// Charterboat - Medium complexity realistic style\n// Overall dimensions ~80mm long x 30mm wide x 25mm high\n\nhull_length = 75;\nhull_width = 28;\nhull_height = 12;\n\n$fn = 32;\n\nmodule hull() {\n    // Main hull with slight curvature\n    difference() {\n        hull_shape();\n        // Cut bottom flat for printing\n        translate([-5, -hull_width/2-5, -hull_height]) \n            cube([hull_length+10, hull_width+10, hull_height]);\n    }\n}\n\nmodule hull_shape() {\n    // Create curved hull using hull of spheres\n    hull() {\n        translate([hull_length*0.1, 0, 0]) \n            scale([1, 0.8, 1]) \n                sphere(d=hull_width*0.9);\n        translate([hull_length*0.9, 0, 0]) \n            scale([1, 0.6, 0.8]) \n                sphere(d=hull_width*0.7);\n        translate([hull_length*0.5, 0, -hull_height*0.3]) \n            sphere(d=hull_width*0.8);\n    }\n}\n\nmodule deck() {\n    // Flat deck on top of hull\n    translate([0, 0, hull_height*0.9]) \n        cube([hull_length*0.85, hull_width*0.75, 2], center=true);\n}\n\nmodule cabin() {\n    // Main cabin structure\n    translate([hull_length*0.4, 0, hull_height*0.9+2]) {\n        difference() {\n            // Cabin body\n            cube([20, hull_width*0.6, 10], center=true);\n            // Door\n            translate([-9.9, 0, -2]) \n                cube([2, 8, 6]);\n            // Windows\n            for(y = [-hull_width*0.2, hull_width*0.2]) {\n                translate([-5, y, 2]) \n                    cube([10, 3, 2]);\n            }\n        }\n    }\n}\n\nmodule wheelhouse() {\n    // Upper wheelhouse\n    translate([hull_length*0.2, 0, hull_height*0.9+12]) {\n        cube([15, hull_width*0.5, 8], center=true);\n        // Roof\n        translate([0, 0, 4]) \n            cube([16, hull_width*0.6, 1], center=true);\n    }\n}\n\nmodule railings() {\n    // Safety railings around deck\n    railing_section(hull_length*0.85);\n    mirror([1,0,0]) railing_section(hull_length*0.85);\n}\n\nmodule railing_section(offset) {\n    translate([offset/2, 0, hull_height*0.9+2]) {\n        for(i = [0:5]) {\n            translate([i*offset/5-offset/2, hull_width*0.75/2, 0]) \n                cylinder(h=5, d=1);\n            translate([i*offset/5-offset/2, -hull_width*0.75/2, 0]) \n                cylinder(h=5, d=1);\n        }\n        // Top rail\n        translate([0, hull_width*0.75/2, 5]) \n            cube([offset+2, 1, 1], center=true);\n        translate([0, -hull_width*0.75/2, 5]) \n            cube([offset+2, 1, 1], center=true);\n    }\n}\n\nmodule mast() {\n    // Main mast with radar\n    translate([hull_length*0.3, 0, hull_height*0.9+12]) {\n        cylinder(h=20, d=2);\n        translate([0, 0, 20]) \n            sphere(d=3);\n        // Radar dome\n        translate([3, 0, 18]) \n            scale([1, 0.5, 0.5]) sphere(d=4);\n    }\n}\n\nmodule life_rafts() {\n    // Life rafts on sides\n    translate([hull_length*0.7, hull_width*0.4, hull_height*0.9+3]) {\n        rotate([90, 0, 0]) \n            cylinder(h=5, d=4);\n    }\n    translate([hull_length*0.7, -hull_width*0.4, hull_height*0.9+3]) {\n        rotate([90, 0, 0]) \n            cylinder(h=5, d=4);\n    }\n}\n\nmodule propeller() {\n    // Simple propeller at stern\n    translate([-hull_length*0.45, 0, -hull_height*0.5]) {\n        rotate([0, 90, 0]) {\n            cylinder(h=2, d=6);\n            for(i = [0:120:359]) {\n                rotate([0, 0, i]) \n                    translate([3, 0, 0]) \n                        cube([3, 0.5, 1], center=true);\n            }\n        }\n    }\n}\n\nmodule exhaust() {\n    // Exhaust stack\n    translate([hull_length*0.6, 0, hull_height*0.9+10]) {\n        cylinder(h=8, d=3);\n        translate([0, 0, 8]) \n            cylinder(h=1, d=4);\n    }\n}\n\n// Assemble the boat\nunion() {\n    hull();\n    deck();\n    cabin();\n    wheelhouse();\n    railings();\n    mast();\n    life_rafts();\n    exhaust();\n    propeller();\n}",
    "renders": true
  },
  {
    "vehicle": "fishingboat",
    "openscad_code": "// Fishing Boat - Realistic Medium Complexity\n// Designed for 3D printing, approximately 80mm length\n\n// Hull parameters\nhull_length = 80;\nhull_width = 25;\nhull_height = 12;\nwall_thickness = 2;\n\n// Cabin parameters\ncabin_width = 18;\ncabin_length = 22;\ncabin_height = 15;\n\n// Wheelhouse\nwheelhouse_width = 14;\nwheelhouse_length = 18;\nwheelhouse_height = 12;\n\n// Mast and rigging\nmast_height = 35;\nmast_diameter = 2;\n\n// Hull construction\nmodule hull() {\n    difference() {\n        // Main hull shape - pointed bow\n        hull_shape();\n        \n        // Hollow out interior\n        translate([wall_thickness, wall_thickness, -hull_height + wall_thickness])\n            scale([1 - (2*wall_thickness)/hull_length, 1 - (2*wall_thickness)/hull_width, 1])\n            hull_shape();\n        \n        // Drain hole\n        translate([hull_length/2 - 5, 0, -hull_height])\n            rotate([90, 0, 0])\n            cylinder(h=wall_thickness*2, d=4, $fn=20);\n    }\n}\n\nmodule hull_shape() {\n    linear_extrude(height=hull_height, center=false, convexity=10) {\n        polygon(points=[\n            [0, 0],\n            [hull_length * 0.15, hull_width/2],\n            [hull_length * 0.85, hull_width/2],\n            [hull_length, hull_width * 0.3],\n            [hull_length, 0],\n            [hull_length, -hull_width * 0.3],\n            [hull_length * 0.85, -hull_width/2],\n            [hull_length * 0.15, -hull_width/2]\n        ]);\n    }\n}\n\n// Cabin structure\nmodule cabin() {\n    translate([hull_length * 0.6, 0, 0]) {\n        difference() {\n            // Main cabin\n            cube([cabin_length, cabin_width, cabin_height], center=true);\n            \n            // Door\n            translate([cabin_length/2 - 1, 0, -cabin_height/2 + 5])\n                cube([2, 6, 8]);\n            \n            // Windows\n            for(i = [-1, 1]) {\n                translate([cabin_length/2 - 3, i * cabin_width/4, cabin_height/4])\n                    cube([4, 4, 4]);\n                translate([0, i * cabin_width/4, cabin_height/4])\n                    cube([4, 4, 4]);\n            }\n        }\n        \n        // Cabin roof\n        translate([0, 0, cabin_height/2 + 1])\n            cube([cabin_length + 2, cabin_width + 2, 2], center=true);\n    }\n}\n\n// Wheelhouse\nmodule wheelhouse() {\n    translate([hull_length * 0.3, 0, cabin_height/2 + 2]) {\n        difference() {\n            cube([wheelhouse_length, wheelhouse_width, wheelhouse_height], center=true);\n            \n            // Windshield\n            translate([wheelhouse_length/2 - 1, 0, 0])\n                cube([2, wheelhouse_width - 4, wheelhouse_height - 4], center=true);\n            \n            // Side windows\n            for(i = [-1, 1]) {\n                translate([0, i * wheelhouse_width/2 + 1, 0])\n                    cube([wheelhouse_length - 4, 2, wheelhouse_height - 4], center=true);\n            }\n        }\n        \n        // Wheelhouse roof\n        translate([0, 0, wheelhouse_height/2 + 1])\n            cube([wheelhouse_length + 2, wheelhouse_width + 2, 2], center=true);\n    }\n}\n\n// Mast with rigging\nmodule mast() {\n    translate([hull_length * 0.85, 0, 0]) {\n        // Main mast\n        cylinder(h=mast_height, d=mast_diameter, center=false);\n        \n        // Cross beam\n        translate([0, 0, mast_height * 0.7])\n            rotate([90, 0, 0])\n            cylinder(h=20, d=1.5, center=true);\n        \n        // Radar dome\n        translate([0, 0, mast_height * 0.9])\n            sphere(d=4);\n        \n        // Flag\n        translate([0, 0, mast_height + 1])\n            rotate([90, 0, 0])\n            cube([8, 5, 1]);\n    }\n}\n\n// Fishing equipment\nmodule fishing_gear() {\n    // Net winch\n    translate([hull_length * 0.7, cabin_width/2 + 3, 0])\n        rotate([90, 0, 0])\n        cylinder(h=5, d=4);\n    \n    translate([hull_length * 0.7, cabin_width/2 + 3, 0])\n        rotate([90, 0, 90])\n        cylinder(h=5, d=4);\n    \n    // Rod holders\n    for(i = [0, 1]) {\n        translate([hull_length * 0.75, (-1)^i * (hull_width/2 - 2), 5])\n            rotate([45, 0, 0])\n            cylinder(h=4, d=2);\n    }\n}\n\n// Life ring\nmodule life_ring() {\n    translate([hull_length * 0.5, hull_width/2 + 1, cabin_height/2]) {\n        rotate([90, 0, 0])\n        difference() {\n            cylinder(h=2, d=6);\n            cylinder(h=3, d=3);\n        }\n    }\n}\n\n// Bow rail\nmodule bow_rail() {\n    for(i = [-1, 1]) {\n        translate([hull_length * 0.1, i * hull_width/2, 4])\n            cylinder(h=6, d=1);\n    }\n    \n    translate([hull_length * 0.1, 0, 7])\n        cylinder(h=hull_width, d=1, center=true);\n}\n\n// Main assembly\nunion() {\n    hull();\n    cabin();\n    wheelhouse();\n    mast();\n    fishing_gear();\n    life_ring();\n    bow_rail();\n}",
    "renders": true
  },
  {
    "vehicle": "sportfisher",
    "openscad_code": "// Sportfisher Boat - Realistic Style, Medium Complexity\n// Designed for 3D printing with no overhangs and proper wall thickness\n\nhull_length = 90;\nhull_width = 25;\nhull_height = 12;\ndeck_height = 8;\n\nmodule hull() {\n    difference() {\n        // Main hull shape\n        hull_shape();\n        \n        // Hull interior cavity\n        translate([5, 0, -1])\n        scale([0.85, 0.8, 0.9])\n        hull_shape();\n    }\n}\n\nmodule hull_shape() {\n    // Create hull with rounded bottom\n    hull() {\n        // Front\n        translate([hull_length/2, 0, 0])\n        scale([1, 0.8, 1])\n        sphere(d=hull_width);\n        \n        // Rear\n        translate([-hull_length/2, 0, 0])\n        cube([hull_width*0.8, hull_width, hull_height*2], center=true);\n        \n        // Top\n        translate([0, 0, hull_height])\n        cube([hull_length, hull_width, hull_height], center=true);\n        \n        // Bottom\n        translate([0, 0, -hull_height/2])\n        cube([hull_length, hull_width, hull_height/2], center=true);\n    }\n}\n\nmodule deck() {\n    // Main deck\n    translate([0, 0, deck_height])\n    cube([hull_length-10, hull_width-4, 2], center=true);\n    \n    // Cabin base\n    translate([hull_length/4, 0, deck_height+2])\n    cube([hull_length/3, hull_width-8, 8], center=true);\n}\n\nmodule cabin() {\n    cabin_width = hull_width-10;\n    \n    // Cabin walls\n    translate([hull_length/4, 0, deck_height+10])\n    cube([hull_length/3-2, cabin_width-2, 8], center=true);\n    \n    // Cabin roof\n    translate([hull_length/4, 0, deck_height+18])\n    cube([hull_length/3, cabin_width-4, 1.5], center=true);\n    \n    // Windshield\n    translate([hull_length/3+5, 0, deck_height+12])\n    rotate([60, 0, 0])\n    cube([hull_length/6, cabin_width-6, 1], center=true);\n}\n\nmodule tower() {\n    // Tower legs\n    for(x = [-5, 5])\n    for(y = [-8, 8]) {\n        translate([x, y, deck_height+18])\n        cylinder(h=15, d=2);\n    }\n    \n    // Tower platform\n    translate([0, 0, deck_height+33])\n    cube([hull_length/4, hull_width/2, 1.5], center=true);\n}\n\nmodule outboards() {\n    // Twin outboards\n    for(offset = [-6, 6]) {\n        translate([-hull_length/2+2, offset, 0])\n        rotate([90, 0, 0])\n        cylinder(h=10, d=4);\n        \n        // Engine cowling\n        translate([-hull_length/2+2, offset, 8])\n        sphere(d=5);\n    }\n}\n\nmodule railings() {\n    // Bow rail\n    for(x = [hull_length/2-20:5:hull_length/2-5])\n    translate([x, 0, deck_height+2])\n    cylinder(h=4, d=1.5);\n    \n    // Side rails\n    for(side = [-1, 1])\n    for(x = [-hull_length/2+20:10:hull_length/2-20])\n    translate([x, side*(hull_width/2-1), deck_height+2])\n    cylinder(h=4, d=1.5);\n}\n\nmodule fishing_rod_holders() {\n    // Rod holders along sides\n    for(side = [-1, 1])\n    for(x = [-hull_length/4, 0, hull_length/4])\n    translate([x, side*(hull_width/2-2), deck_height+2])\n    rotate([45*side, 0, 0])\n    cylinder(h=4, d=2);\n}\n\n// Main assembly\nunion() {\n    hull();\n    deck();\n    cabin();\n    tower();\n    outboards();\n    railings();\n    fishing_rod_holders();\n}",
    "renders": true
  },
  {
    "vehicle": "flybridge",
    "openscad_code": "// Flybridge for small boat – medium-complexity realistic style\n// Approx. 80 mm long, 45 mm wide, 30 mm high\n// Uses only basic primitives, printable with 2 mm wall thickness\n\n$fn = 30;\n\n// Overall dimensions\nbridge_len = 80;\nbridge_wid = 45;\ndeck_h     = 4;\nrail_h     = 8;\n\nmodule flybridge() {\n    // Main deck plate\n    difference() {\n        cube([bridge_len, bridge_wid, deck_h], center=true);\n        translate([0, 0, -1])\n            cube([bridge_len-4, bridge_wid-4, deck_h+2], center=true);\n    }\n\n    // Floor anti-slip grooves\n    for (x = [-bridge_len/2+5 : 5 : bridge_len/2-5]) {\n        translate([x, 0, deck_h/2+0.1])\n            cube([0.5, bridge_wid-4, 0.5], center=true);\n    }\n\n    // Perimeter rail posts\n    module post() {\n        cylinder(h = rail_h, r = 1.5, center=true);\n    }\n    \n    for (step = [0:1]) {\n        y = step ? bridge_wid/2-3 : -bridge_wid/2+3;\n        for (x = [-bridge_len/2+5 : 10 : bridge_len/2-5]) {\n            translate([x, y, deck_h+rail_h/2])\n                post();\n        }\n    }\n    \n    // Rail top rails\n    translate([0, bridge_wid/2-3, deck_h+rail_h+1])\n        cube([bridge_len-10, 2, 2], center=true);\n    translate([0, -bridge_wid/2+3, deck_h+rail_h+1])\n        cube([bridge_len-10, 2, 2], center=true);\n\n    // Windshield frame front\n    difference() {\n        translate([bridge_len/2-6, 0, deck_h+1])\n            cube([2, bridge_wid-10, 10], center=true);\n        translate([bridge_len/2-5, 0, deck_h+6])\n            cube([4, bridge_wid-12, 8], center=true);\n    }\n\n    // Instrument console\n    difference() {\n        translate([bridge_len/2-15, 0, deck_h])\n            cube([12, 18, 12], center=true);\n        translate([bridge_len/2-10, 0, deck_h+3])\n            cube([10, 14, 8], center=true);\n    }\n\n    // Captain seat\n    difference() {\n        translate([bridge_len/2-25, 0, deck_h])\n            cube([16, 12, 8], center=true);\n        translate([bridge_len/2-25, 0, deck_h+2])\n            cube([12, 10, 6], center=true);\n    }\n\n    // Stairs port side\n    for (i = [0:3]) {\n        translate([-bridge_len/2+5+i*3, bridge_wid/2+2, i*2])\n            cube([6, 4, 2], center=false);\n    }\n\n    // Support struts under deck\n    for (x = [-bridge_len/2+10 : 15 : bridge_len/2-10]) {\n        translate([x, 0, -3])\n            cube([4, 10, 6], center=true);\n    }\n}\n\nflybridge();",
    "renders": true
  },
  {
    "vehicle": "express",
    "openscad_code": "// Express Train Engine – medium-complexity realistic model\n// External dimensions ≈ 90 mm long, 30 mm wide, 35 mm high\n// All walls ≥ 1.2 mm, no steep overhangs – ready for printing\n\n// Overall scale\n$fs = 1; $fa = 2;\n\n/* ---------- Main body (boiler & cab) ---------- */\nmodule body() {\n    // Boiler cylinder\n    translate([0,0,10]) rotate([0,90,0])\n        cylinder(h=60, d=20, center=true);\n\n    // Smoke-box front\n    translate([30,0,10])\n        cylinder(h=10, d1=18, d2=16);\n\n    // Fire-box & cab\n    difference() {\n        translate([-25,0,20])\n            cube([30,25,25], center=true);\n        // Cab roof\n        translate([-35,0,33])\n            rotate([90,0,0])\n                cylinder(h=30, d1=28, d2=22);\n    }\n}\n\n/* ---------- Chassis & wheels ---------- */\nmodule wheel(d=12, w=4) {\n    difference() {\n        cylinder(h=w, d=d, center=true);\n        cylinder(h=w+1, d=d-4, center=true);\n    }\n}\n\nmodule chassis() {\n    // Main frame\n    translate([0,0,1.5])\n        cube([70,22,3], center=true);\n\n    // 6 driving wheels\n    for(i=[-2:1:1])\n        translate([i*15, 0, 3])\n            rotate([90,0,0])\n                wheel();\n\n    // 2 small pilot wheels\n    for(i=[0.8,1.2])\n        translate([28+i*8, 0, 3])\n            rotate([90,0,0])\n                wheel(d=8, w=3);\n}\n\n/* ---------- Cow catcher ---------- */\nmodule cowcatcher() {\n    translate([35,0,3])\n        for(i=[0:3:12])\n            rotate([0,0,i*4])\n                translate([0,0,i])\n                    cube([1.5,20-i,1.5], center=true);\n}\n\n/* ---------- Chimney ---------- */\nmodule chimney() {\n    translate([32,0,20])\n        cylinder(h=15, d1=6, d2=4);\n}\n\n/* ---------- Roof details ---------- */\nmodule roof_details() {\n    translate([-35,10,33])\n        rotate([0,90,0])\n            cylinder(h=6, d=3);\n    translate([-35,-10,33])\n        rotate([0,90,0])\n            cylinder(h=6, d=3);\n}\n\n/* ---------- Final assembly ---------- */\nunion() {\n    body();\n    chassis();\n    cowcatcher();\n    chimney();\n    roof_details();\n}",
    "renders": true
  },
  {
    "vehicle": "longliner",
    "openscad_code": "// Longliner Fishing Vessel - Realistic Medium Complexity\n// Designed for 3D printing, approximately 85mm length\n\n// Overall dimensions\nhull_length = 85;\nhull_width = 15;\nhull_height = 7;\n\n// Hull module - main body of the ship\nmodule hull() {\n    // Main hull body\n    difference() {\n        // Tapered hull shape\n        hull_points = [\n            [0, 0, 0], [hull_length, 0, 0], \n            [hull_length, hull_width, 0], [0, hull_width, 0],\n            [hull_length*0.9, hull_width/3, hull_height], \n            [hull_length*0.9, hull_width*2/3, hull_height],\n            [hull_length*0.1, hull_width*2/3, hull_height*0.8], \n            [hull_length*0.1, hull_width/3, hull_height*0.8]\n        ];\n        \n        hull_faces = [\n            [0,1,5,6], [0,6,7,3], [1,2,4,5], [2,3,7,4],\n            [0,1,2,3], [4,5,6,7]\n        ];\n        \n        polyhedron(hull_points, hull_faces);\n        \n        // Hollow out interior\n        translate([2, 2, 1]) \n            cube([hull_length-4, hull_width-4, hull_height-1]);\n    }\n}\n\n// Superstructure (wheelhouse)\nmodule wheelhouse() {\n    translate([hull_length*0.7, hull_width/2, hull_height]) {\n        difference() {\n            // Main house\n            cube([12, 10, 8], center=true);\n            // Door\n            translate([-5.9, -2, -3])\n                cube([1, 4, 6]);\n            // Windows\n            for(x = [-2, 2])\n                for(y = [-3, 3])\n                    translate([x, y, 2])\n                        cube([1.5, 1.5, 2]);\n        }\n        \n        // Roof\n        translate([0, 0, 5])\n            cube([14, 12, 1], center=true);\n            \n        // Radar mast\n        translate([0, 0, 7]) {\n            cylinder(h=5, r=0.5);\n            translate([0, 0, 5])\n                sphere(r=1.5);\n        }\n    }\n}\n\n// Aft working deck structures\nmodule aft_deck() {\n    // Main working deck\n    translate([5, hull_width/2, hull_height]) {\n        cube([hull_length*0.6, hull_width-2, 1]);\n        \n        // Winch\n        translate([10, 0, 1]) {\n            cylinder(h=4, r=2);\n            for(i = [0:3])\n                rotate([0, 0, i*90])\n                    translate([2, 0, 2])\n                        cube([4, 0.5, 0.5], center=true);\n        }\n        \n        // Storage boxes\n        for(pos = [[25, 5], [25, -5], [40, 5], [40, -5]]) {\n            translate([pos[0], pos[1], 1]) {\n                cube([6, 3, 2]);\n                translate([3, 1.5, 2])\n                    cylinder(h=0.5, r=0.5);\n            }\n        }\n    }\n}\n\n// Forward mast and rigging\nmodule mast() {\n    translate([hull_length*0.85, hull_width/2, hull_height+8]) {\n        // Mast\n        cylinder(h=15, r=0.8);\n        \n        // Cross trees\n        translate([0, 0, 8])\n            rotate([90, 0, 0])\n                cylinder(h=hull_width-2, r=0.5, center=true);\n                \n        // Flag\n        translate([0, 0, 15])\n            cube([5, 3, 0.5]);\n    }\n}\n\n// Bow structure\nmodule bow() {\n    translate([hull_length-2, hull_width/2, hull_height/2]) {\n        // Anchor winch\n        cylinder(h=3, r=2);\n        \n        // Rail posts\n        for(i = [4:8]) {\n            translate([hull_length-i, 2, hull_height])\n                cylinder(h=3, r=0.5);\n            translate([hull_length-i, hull_width-2, hull_height])\n                cylinder(h=3, r=0.5);\n        }\n        \n        // Rail\n        hull() {\n            for(y = [2, hull_width-2]) {\n                translate([hull_length-4, y, hull_height+3])\n                    cube([4, 0.5, 0.5]);\n            }\n        }\n    }\n}\n\n// Propeller and rudder\nmodule stern() {\n    translate([2, hull_width/2, 1]) {\n        // Rudder\n        translate([0, 0, -1]) {\n            cube([1, 3, 4]);\n            translate([1, -1.5, -2])\n                cube([2, 3, 2]);\n        }\n        \n        // Propeller\n        translate([-2, 0, 1]) {\n            rotate([0, 90, 0]) {\n                cylinder(h=2, r=2);\n                // Propeller blades\n                for(i = [0:3])\n                    rotate([0, 0, i*90])\n                        translate([2, 0, 0])\n                            cube([4, 0.5, 1], center=true);\n            }\n        }\n    }\n}\n\n// Life raft canisters\nmodule life_rafts() {\n    translate([hull_length*0.5, hull_width+1, hull_height+2]) {\n        for(i = [0:1]) {\n            translate([i*8, 0, 0])\n                rotate([90, 0, 0])\n                    cylinder(h=5, r=1.5);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    hull();\n    wheelhouse();\n    aft_deck();\n    mast();\n    bow();\n    stern();\n    life_rafts();\n}",
    "renders": true
  },
  {
    "vehicle": "seiner",
    "openscad_code": "// Seiner fishing vessel - realistic medium complexity\n// 3D printable model, ~70mm length\n\n// Main hull module with slight V-bottom for stability\nmodule hull() {\n    difference() {\n        // Main hull shape - elongated box with rounded edges\n        hull_shape();\n        \n        // Cutout for interior\n        translate([5, 0, 5]) \n            cube([50, 20, 8]);\n    }\n}\n\nmodule hull_shape() {\n    union() {\n        // Bottom hull - V-shape for stability\n        translate([0, 0, 2])\n            rotate([90, 0, 0])\n                cylinder(h=60, r1=12, r2=6, $fn=20);\n        \n        // Upper deck\n        translate([0, 0, 8])\n            cube([60, 24, 3], center=true);\n        \n        // Bow curve\n        translate([30, 0, 8])\n            rotate([0, 90, 0])\n                cylinder(h=12, r=12, $fn=20);\n        \n        // Stern\n        translate([-30, 0, 8])\n            rotate([0, 90, 0])\n                cylinder(h=12, r=12, $fn=20);\n    }\n}\n\n// Wheelhouse with windows\nmodule wheelhouse() {\n    difference() {\n        // Main structure\n        translate([-10, 0, 12])\n            cube([20, 18, 12], center=true);\n        \n        // Windows\n        translate([-10, 7, 16])\n            cube([8, 1, 4]);\n        translate([-10, -7, 16])\n            cube([8, 1, 4]);\n        translate([0, 7, 16])\n            cube([8, 1, 4]);\n        translate([0, -7, 16])\n            cube([8, 1, 4]);\n    }\n    \n    // Roof\n    translate([-10, 0, 19])\n        cube([22, 20, 2], center=true);\n}\n\n// Net handling equipment\nmodule net_handler() {\n    // Main boom\n    translate([20, 0, 15])\n        rotate([0, -30, 0])\n            cylinder(h=25, r=1, $fn=8);\n    \n    // Support arms\n    translate([15, 10, 15])\n        rotate([0, 0, 45])\n            cylinder(h=8, r=0.5, $fn=6);\n    translate([15, -10, 15])\n        rotate([0, 0, -45])\n            cylinder(h=8, r=0.5, $fn=6);\n    \n    // Winch drum\n    translate([10, 0, 11])\n        cylinder(h=6, r=3, $fn=12);\n}\n\n// Life raft canisters\nmodule life_rafts() {\n    for(i = [-1, 1]) {\n        translate([-20, i*10, 11])\n            cylinder(h=4, r=2, $fn=12);\n    }\n}\n\n// Safety railings\nmodule railings() {\n    // Deck railing posts\n    for(pos = [[25, 11], [25, -11], [-25, 11], [-25, -11]]) {\n        translate([pos[0], pos[1], 11])\n            cylinder(h=4, r=0.5, $fn=6);\n    }\n    \n    // Railing bars between posts\n    hull() {\n        translate([25, 11, 13])\n            sphere(r=0.5, $fn=6);\n        translate([-25, 11, 13])\n            sphere(r=0.5, $fn=6);\n    }\n    hull() {\n        translate([25, -11, 13])\n            sphere(r=0.5, $fn=6);\n        translate([-25, -11, 13])\n            sphere(r=0.5, $fn=6);\n    }\n}\n\n// Mast with radar\nmodule mast() {\n    // Main mast\n    translate([0, 0, 15])\n        cylinder(h=20, r=1, $fn=8);\n    \n    // Radar dome\n    translate([0, 0, 30])\n        sphere(r=3, $fn=12);\n    \n    // Mast supports\n    for(angle = [0:120:359]) {\n        rotate([0, 0, angle])\n            translate([0, 5, 15])\n                cylinder(h=8, r=0.3, $fn=4);\n    }\n}\n\n// Anchor setup\nmodule anchor() {\n    // Anchor winch\n    translate([27, 0, 11])\n        cylinder(h=3, r=2, $fn=12);\n    \n    // Chain guide\n    translate([30, 0, 11])\n        cube([4, 2, 1], center=true);\n}\n\n// Main assembly\nunion() {\n    hull();\n    wheelhouse();\n    net_handler();\n    life_rafts();\n    railings();\n    mast();\n    anchor();\n}",
    "renders": true
  },
  {
    "vehicle": "drifter",
    "openscad_code": "// Realistic Drifter - Medium Complexity\n// Dimensions: ~70mm long x 40mm wide x 30mm tall\n\n$fn = 32;\n\n// Main body\nmodule body() {\n    difference() {\n        // Main hull\n        hull() {\n            translate([-30, -15, 0])\n                cube([60, 30, 15], center=false);\n            translate([-25, -12, 15])\n                cube([50, 24, 10], center=false);\n        }\n        \n        // Cockpit opening\n        translate([-20, -10, 16])\n            cube([40, 20, 8], center=false);\n    }\n}\n\n// Front bumper\nmodule front_bumper() {\n    translate([-32, -20, 0])\n        cube([8, 40, 12], center=false);\n}\n\n// Rear wing\nmodule rear_wing() {\n    union() {\n        // Wing supports\n        translate([26, -12, 15])\n            cube([2, 5, 8], center=false);\n        translate([26, 7, 15])\n            cube([2, 5, 8], center=false);\n        \n        // Wing blade\n        translate([28, -15, 23])\n            cube([2, 30, 2], center=false);\n    }\n}\n\n// Wheels\nmodule wheel(pos_x, pos_y, pos_z) {\n    translate([pos_x, pos_y, pos_z]) {\n        // Tire\n        rotate([90, 0, 0])\n            cylinder(h=5, r=8, center=true);\n        \n        // Rim\n        color(\"silver\")\n        rotate([90, 0, 0])\n            cylinder(h=6, r=6, center=true);\n        \n        // Spokes\n        for(i=[0:3]) {\n            rotate([0, 0, i*90])\n                translate([0, 0, 0])\n                    cube([2, 8, 1], center=true);\n        }\n    }\n}\n\n// Exhaust pipes\nmodule exhaust() {\n    for(i=[-1,1]) {\n        translate([28, i*8, 8]) {\n            rotate([90, 0, 0])\n                cylinder(h=12, r=2);\n            translate([0, 0, 12])\n                sphere(r=2.5);\n        }\n    }\n}\n\n// Side mirrors\nmodule mirrors() {\n    for(i=[-1,1]) {\n        translate([-5, i*16, 20]) {\n            // Mirror arm\n            rotate([0, 30*i, 0])\n                cylinder(h=6, r=1);\n            \n            // Mirror\n            translate([0, 0, 6])\n                rotate([0, 30*i, 0])\n                    scale([1, 1.5, 0.5])\n                        sphere(r=3);\n        }\n    }\n}\n\n// Roof scoop\nmodule roof_scoop() {\n    translate([-10, -6, 25])\n        cube([20, 12, 8], center=false);\n    \n    translate([-10, -6, 25])\n        cube([20, 12, 1], center=false);\n    \n    for(i=[-1,1]) {\n        translate([-10, i*6, 25])\n            cube([20, 1, 8], center=false);\n    }\n}\n\n// Assembly\ntranslate([0, 0, 5]) {\n    body();\n    front_bumper();\n    rear_wing();\n    mirrors();\n    roof_scoop();\n    exhaust();\n    \n    // Wheels - front\n    wheel(-20, -20, 0);\n    wheel(-20, 20, 0);\n    \n    // Wheels - rear\n    wheel(20, -20, 0);\n    wheel(20, 20, 0);\n}",
    "renders": true
  },
  {
    "vehicle": "gillnetter",
    "openscad_code": "// Realistic Gillnetter (medium complexity)\n// All dimensions in mm, designed for 50 mm length\n\n$fn = 32;  // Smooth curves\n\n// Main dimensions\nlength = 50;\nbeam = 12;\nhull_height = 6;\n\n// Hull module\nmodule hull() {\n    difference() {\n        // Main hull shape\n        hull() {\n            translate([-length/2, -beam/2, 0])\n                cube([length, beam, hull_height]);\n            translate([-length/2+5, -beam/2+1, 0])\n                cube([length-10, beam-2, hull_height-1]);\n        }\n        \n        // Hollow interior\n        translate([-length/2+1.5, -beam/2+1.5, 1])\n            cube([length-3, beam-3, hull_height]);\n    }\n}\n\n// Cabin module\nmodule cabin() {\n    translate([0, 0, hull_height]) {\n        difference() {\n            // Main cabin\n            cube([14, 10, 6], center=true);\n            \n            // Door\n            translate([7.1, -2, 1])\n                cube([0.5, 4, 3]);\n            \n            // Windows\n            for(x = [-4, 0, 4]) {\n                translate([x, 5.1, 2.5])\n                    cube([2, 0.5, 1.5]);\n            }\n        }\n    }\n}\n\n// Wheelhouse module\nmodule wheelhouse() {\n    translate([8, 0, hull_height+6]) {\n        difference() {\n            cube([8, 8, 4], center=true);\n            \n            // Windows\n            translate([4.1, 0, 1.5])\n                cube([0.5, 3, 1.5]);\n        }\n    }\n}\n\n// Mast module\nmodule mast() {\n    translate([12, 0, hull_height+10]) {\n        cylinder(h=15, r=0.5);\n        \n        // Radar dome\n        translate([0, 0, 15])\n            sphere(r=1.5);\n    }\n}\n\n// Net drum module\nmodule net_drum() {\n    translate([-15, 0, hull_height-1]) {\n        rotate([90, 0, 0]) {\n            difference() {\n                cylinder(h=12, r=3);\n                cylinder(h=13, r=2.5);\n            }\n        }\n        \n        // Support brackets\n        for(x = [-5, 5]) {\n            translate([x, 0, -1]) {\n                cube([2, 3, 2]);\n            }\n        }\n    }\n}\n\n// Boom module\nmodule boom() {\n    translate([-20, 0, hull_height+3]) {\n        rotate([0, 0, -30]) {\n            cylinder(h=25, r=0.8);\n            \n            // Support cable\n            translate([25, 0, 0]) {\n                rotate([0, 90, 0]) {\n                    cylinder(h=20, r=0.3);\n                }\n            }\n        }\n    }\n}\n\n// Railings module\nmodule railings() {\n    for(pos = [[-length/4, 0], [length/4, 0]]) {\n        translate([pos[0], 0, hull_height-0.1]) {\n            for(y = [-beam/2+1, beam/2-1]) {\n                translate([0, y, 0]) {\n                    cylinder(h=2, r=0.3);\n                    translate([0, 0, 2])\n                        cube([0.5, beam-2, 0.3]);\n                }\n            }\n        }\n    }\n}\n\n// Anchor\nmodule anchor() {\n    translate([-length/2-2, 0, 1]) {\n        rotate([0, 90, 0]) {\n            difference() {\n                cylinder(h=2, r=1.5);\n                translate([0, 0, -1])\n                    cylinder(h=4, r=0.5);\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    hull();\n    cabin();\n    wheelhouse();\n    mast();\n    net_drum();\n    boom();\n    railings();\n    anchor();\n}",
    "renders": true
  },
  {
    "vehicle": "purseseiner",
    "openscad_code": "// Purseseiner fishing vessel - medium complexity realistic style\n// Overall dimensions approximately 80mm long x 20mm wide x 25mm high\n\n// Hull profile for realistic curved shape\nmodule hull_profile() {\n    difference() {\n        // Main hull body\n        hull() {\n            // Bow\n            translate([40, 0, 0]) sphere(d=18, $fn=32);\n            // Mid section\n            translate([0, 0, 0]) sphere(d=20, $fn=32);\n            // Stern\n            translate([-40, 0, 0]) sphere(d=16, $fn=32);\n        }\n        \n        // Flat bottom\n        translate([0, 0, -10]) cube([100, 30, 20], center=true);\n    }\n}\n\n// Main hull module\nmodule hull() {\n    difference() {\n        // Full hull shape\n        hull_profile();\n        \n        // Hollow interior\n        scale([0.9, 0.85, 0.9]) hull_profile();\n    }\n}\n\n// Wheelhouse/cabin\nmodule wheelhouse() {\n    translate([0, 0, 12]) {\n        difference() {\n            // Main cabin\n            cube([25, 18, 12], center=true);\n            \n            // Windows\n            translate([12.5, 0, 2]) cube([1, 10, 4], center=true);\n            translate([12.5, 0, -2]) cube([1, 10, 4], center=true);\n        }\n        \n        // Roof\n        translate([0, 0, 7]) {\n            scale([1.1, 1.1, 0.3]) cube([25, 18, 1], center=true);\n        }\n    }\n}\n\n// Net drum at stern\nmodule net_drum() {\n    translate([-35, 0, 8]) {\n        difference() {\n            // Main drum\n            cylinder(h=15, d=12, center=true, $fn=32);\n            \n            // Hollow center\n            cylinder(h=16, d=8, center=true, $fn=32);\n            \n            // End flanges\n            translate([0, 0, 8]) cylinder(h=1, d=14, $fn=32);\n            translate([0, 0, -8]) cylinder(h=1, d=14, $fn=32);\n        }\n    }\n}\n\n// Boom/purse davit\nmodule boom() {\n    translate([-30, 0, 18]) {\n        rotate([0, 30, 0]) {\n            // Main boom\n            cylinder(h=35, d=2, $fn=16);\n            \n            // Support strut\n            rotate([0, -60, 0]) \n                translate([-10, 0, 10]) cylinder(h=20, d=1.5, $fn=16);\n        }\n    }\n}\n\n// Mast with radar\nmodule mast() {\n    translate([20, 0, 15]) {\n        // Mast pole\n        cylinder(h=20, d=2, $fn=16);\n        \n        // Radar dome\n        translate([0, 0, 22]) sphere(d=4, $fn=16);\n    }\n}\n\n// Safety rails around deck\nmodule rails() {\n    for(x=[-30:15:30]) {\n        translate([x, 9, 10]) cylinder(h=5, d=1, $fn=8);\n        translate([x, -9, 10]) cylinder(h=5, d=1, $fn=8);\n    }\n    \n    // Rail connections\n    for(x=[-30:15:15]) {\n        translate([x+7.5, 9, 12.5]) {\n            rotate([90, 0, 0]) cylinder(h=15, d=0.8, $fn=8);\n        }\n        translate([x+7.5, -9, 12.5]) {\n            rotate([90, 0, 0]) cylinder(h=15, d=0.8, $fn=8);\n        }\n    }\n}\n\n// Propeller at stern\nmodule propeller() {\n    translate([-43, 0, 2]) {\n        // Propeller hub\n        cylinder(h=3, d=3, $fn=16);\n        \n        // Blades\n        for(i=[0:3]) {\n            rotate([0, 0, i*90]) \n                translate([2, 0, 1.5]) cube([4, 0.5, 1], center=true);\n        }\n    }\n}\n\n// Anchor on bow\nmodule anchor() {\n    translate([42, 0, 8]) {\n        // Main stock\n        cube([0.5, 8, 1], center=true);\n        \n        // Flukes\n        translate([0, 3.5, 0]) rotate([0, 0, 30]) cube([0.5, 2, 1], center=true);\n        translate([0, -3.5, 0]) rotate([0, 0, -30]) cube([0.5, 2, 1], center=true);\n        \n        // Shank\n        translate([0, 0, -2]) cube([0.5, 0.5, 3], center=true);\n    }\n}\n\n// Assemble the complete vessel\nunion() {\n    // Main hull and superstructure\n    hull();\n    wheelhouse();\n    net_drum();\n    \n    // Deck equipment\n    boom();\n    mast();\n    rails();\n    \n    // Fittings\n    propeller();\n    anchor();\n}",
    "renders": true
  },
  {
    "vehicle": "factoryship",
    "openscad_code": "// Factory Ship – medium detail, realistic style, 3D-printable\n// No overhangs >45°, all walls 2 mm, largest axis 90 mm\n\n$fn = 32;\n\nmodule hull() {\n    // Main hull block\n    difference() {\n        hull() {  // rounded bow & stern\n            translate([-40,0,0]) sphere(8);\n            translate([ 40,0,0]) sphere(8);\n        }\n        // Flat deck top\n        translate([0,0,8]) cube([90,20,0.1], center=true);\n    }\n}\n\nmodule superstructure() {\n    // Bridge block\n    translate([-15,0,9]) cube([20,12,10], center=true);\n    \n    // Smoke stack\n    translate([0,0,20]) cylinder(h=12, r1=4, r2=3);\n    \n    // Radar mast\n    translate([5,0,32]) cylinder(h=8, r=0.8);\n    translate([5,0,40]) sphere(1.5);\n}\n\nmodule crane(x, z) {\n    translate([x,0,z]) {\n        // Vertical tower\n        cylinder(h=12, r=1.5);\n        // Boom\n        translate([0,0,12]) rotate([0,-30,0])\n            cylinder(h=15, r=1);\n    }\n}\n\nmodule processing_hall() {\n    // Enclosed processing hall amidships\n    translate([10,0,9]) cube([35,18,8], center=true);\n    // Row of ventilators\n    for(i=[-4:2:4])\n        translate([10 + i*3, 10, 17])\n            cylinder(h=2, r=1);\n}\n\nmodule helipad() {\n    // Flat aft helipad\n    translate([30,0,9]) cube([18,18,0.5], center=true);\n    // H marking on pad\n    translate([30,0,9.6]) cube([2,10,0.2], center=true);\n    translate([30,0,9.6]) cube([8,2,0.2], center=true);\n}\n\nmodule lifeboats() {\n    // Lifeboats on each side\n    for(side=[-1,1])\n        translate([0, side*11, 11])\n            rotate([90,0,90])\n                cylinder(h=8, r=1.5);  // boat hull\n}\n\nmodule railings() {\n    // Simple rail along deck edge\n    for(x=[-35:5:35])\n        translate([x, 10, 8.5])\n            cylinder(h=2, r=0.5);\n    for(x=[-35:5:35])\n        translate([x,-10, 8.5])\n            cylinder(h=2, r=0.5);\n}\n\n// Assembly\nunion() {\n    hull();\n    superstructure();\n    processing_hall();\n    helipad();\n    lifeboats();\n    railings();\n    \n    // Two loading cranes\n    crane(-25, 9);\n    crane(-15, 9);\n}",
    "renders": true
  },
  {
    "vehicle": "icebreaker",
    "openscad_code": "// Icebreaker Ship - Realistic Style, Medium Complexity\n// 3D printable model with reasonable dimensions (90mm long)\n\nhull_length = 90;\nhull_width = 25;\nhull_height = 20;\nbow_length = 25;\nsuperstructure_height = 15;\n\n// Main hull with icebreaking bow\nmodule hull() {\n    // Main hull body\n    difference() {\n        // Tapered hull shape\n        hull_profile();\n        \n        // Hull bottom curvature\n        translate([0, -hull_width/2, -hull_height/2])\n            cube([hull_length, hull_width, hull_height/2], center=true);\n    }\n    \n    // Icebreaking bow reinforcement\n    translate([hull_length/2 - bow_length/2, 0, -hull_height/4])\n        scale([1.2, 1.1, 0.8])\n            cube([bow_length, hull_width*1.3, hull_height/2], center=true);\n}\n\nmodule hull_profile() {\n    // Create tapered hull using hull() of cubes\n    hull() {\n        translate([-hull_length/2, 0, 0])\n            cube([hull_length*0.8, hull_width*0.7, hull_height], center=true);\n        translate([hull_length/2 - bow_length, 0, 0])\n            cube([hull_length*0.3, hull_width*0.9, hull_height*0.9], center=true);\n        translate([hull_length/2, 0, 0])\n            cube([2, hull_width*0.4, hull_height*0.7], center=true);\n    }\n}\n\n// Superstructure (bridge and living quarters)\nmodule superstructure() {\n    // Main bridge\n    translate([-10, 0, hull_height/2])\n        cube([20, hull_width*0.8, superstructure_height], center=true);\n    \n    // Bridge wings\n    for(side = [-1, 1]) {\n        translate([-5, side * (hull_width*0.5), hull_height/2 + 3])\n            cube([10, hull_width*0.3, superstructure_height/2], center=true);\n    }\n    \n    // Smokestack\n    translate([-20, 0, hull_height/2 + superstructure_height])\n        cylinder(h=8, d=6, center=true);\n}\n\n// Deck details including hatches and railings\nmodule deck_details() {\n    // Hatch covers\n    for(i = [1:3]) {\n        translate([-hull_length/2 + i*20, 0, hull_height/2 + 0.5])\n            cube([8, 6, 1], center=true);\n    }\n    \n    // Rail posts\n    for(pos = [-hull_length/2 + 5 : 10 : hull_length/2 - 15]) {\n        for(side = [-1, 1]) {\n            translate([pos, side * hull_width/2, hull_height/2 + 2])\n                cylinder(h=4, d=2, center=true);\n        }\n    }\n}\n\n// Lifeboats hanging on davits\nmodule lifeboats() {\n    for(side = [-1, 1]) {\n        translate([-25, side * (hull_width/2 + 3), hull_height/2 + 5]) {\n            rotate([0, 0, side * 10])\n                cube([12, 3, 2], center=true);\n        }\n    }\n}\n\n// Propeller and rudder assembly\nmodule propulsion() {\n    // Rudder\n    translate([-hull_length/2 - 2, 0, -hull_height/4])\n        cube([4, 3, hull_height/2], center=true);\n    \n    // Twin propellers\n    for(side = [-1, 1]) {\n        translate([-hull_length/2 - 1, side * 5, -hull_height/3]) {\n            for(i = [0:3]) {\n                rotate([0, 0, i*90])\n                    translate([0, 0, 0])\n                        cube([6, 1, 0.5], center=true);\n            }\n        }\n    }\n}\n\n// Crane for cargo operations\nmodule crane() {\n    translate([-5, 0, hull_height/2 + superstructure_height + 4]) {\n        // Crane base\n        cylinder(h=3, d=4, center=true);\n        \n        // Crane arm\n        translate([0, 0, 2])\n            rotate([0, -30, 0])\n                cube([15, 2, 2], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    hull();\n    superstructure();\n    deck_details();\n    lifeboats();\n    propulsion();\n    crane();\n}",
    "renders": true
  },
  {
    "vehicle": "buoytender",
    "openscad_code": "// Buoytender - Medium complexity 3D printable model\n// Overall dimensions approximately 80mm long\n\n$fn = 32;\n\n// Hull module with slight flare\nmodule hull() {\n    difference() {\n        hull_shape();\n        // Deck opening\n        translate([0, 0, 6])\n            cube([30, 12, 4], center=true);\n    }\n}\n\n// Basic hull shape\nmodule hull_shape() {\n    difference() {\n        // Main hull body\n        union() {\n            // Lower hull - rounded bottom\n            scale([1, 0.7, 0.4])\n                sphere(d=30);\n            // Upper hull - rectangular\n            translate([0, 0, 3])\n                cube([32, 20, 6], center=true);\n            // Bow flare\n            translate([15, 0, 3])\n                scale([0.8, 1, 1])\n                    sphere(d=18);\n        }\n        \n        // Waterline cut\n        translate([0, 0, -3])\n            cube([50, 30, 3], center=true);\n    }\n}\n\n// Superstructure/Bridge\nmodule bridge() {\n    translate([5, 0, 10]) {\n        difference() {\n            // Main bridge structure\n            cube([20, 16, 8], center=true);\n            // Windows\n            for(x = [-7, -3, 1, 5]) {\n                translate([x, 7.9, 2])\n                    cube([2.5, 0.5, 3]);\n            }\n            // Door\n            translate([0, -7.9, 0])\n                cube([4, 0.5, 6], center=true);\n        }\n        // Bridge roof\n        translate([0, 0, 4.5])\n            cube([22, 18, 1], center=true);\n    }\n}\n\n// Smokestack\nmodule smokestack() {\n    translate([-10, 0, 14]) {\n        // Base\n        cylinder(h=2, d=5);\n        // Stack\n        translate([0, 0, 2])\n            cylinder(h=8, d1=4, d2=3.5);\n        // Top cap\n        translate([0, 0, 10])\n            cylinder(h=1, d=4.5);\n    }\n}\n\n// Crane for buoy handling\nmodule crane() {\n    translate([12, 0, 10]) {\n        // Base\n        cylinder(h=3, d=6);\n        // Mast\n        translate([0, 0, 3])\n            cylinder(h=12, d=3);\n        // Boom\n        translate([0, 0, 15])\n            rotate([0, 30, 0])\n                cylinder(h=15, d=2);\n        // Hook block\n        translate([0, 0, 15])\n            rotate([0, 30, 0])\n                translate([13, 0, -2])\n                    sphere(d=2);\n    }\n}\n\n// Buoy on deck\nmodule buoy() {\n    translate([-5, 8, 8]) {\n        // Base\n        cylinder(h=2, d=6);\n        // Body\n        translate([0, 0, 2])\n            sphere(d=6);\n        // Top marker\n        translate([0, 0, 5])\n            cylinder(h=3, d1=4, d2=2);\n    }\n}\n\n// Railings using loops\nmodule railings() {\n    // Port railing\n    for(x = [-15:3:15]) {\n        translate([x, 10, 8])\n            cylinder(h=3, d=1);\n    }\n    // Starboard railing\n    for(x = [-15:3:15]) {\n        translate([x, -10, 8])\n            cylinder(h=3, d=1);\n    }\n    // Rail top\n    translate([0, 10, 10.5])\n        cube([32, 1, 0.5], center=true);\n    translate([0, -10, 10.5])\n        cube([32, 1, 0.5], center=true);\n}\n\n// Life rings\nmodule life_rings() {\n    // Port side\n    translate([-12, 11, 9])\n        rotate([90, 0, 0])\n            difference() {\n                cylinder(h=1.5, d=6);\n                cylinder(h=2, d=4);\n            }\n    // Starboard side\n    translate([-12, -11, 9])\n        rotate([90, 0, 0])\n            difference() {\n                cylinder(h=1.5, d=6);\n                cylinder(h=2, d=4);\n            }\n}\n\n// Assembly\nunion() {\n    // Main hull\n    hull();\n    \n    // Superstructure\n    bridge();\n    \n    // Details\n    smokestack();\n    crane();\n    buoy();\n    railings();\n    life_rings();\n}",
    "renders": true
  },
  {
    "vehicle": "patrolboat",
    "openscad_code": "// Patrol Boat - Realistic Medium Complexity\n// Designed for 3D printing, no overhangs >45 degrees\n\n// Overall dimensions: ~90mm L x 25mm W x 20mm H\nhull_length = 90;\nhull_width = 25;\nhull_height = 8;\n\n// Hull module\nmodule hull() {\n    // Main hull body - tapered with slight curvature\n    hull_points = [\n        [0, 0, 0],\n        [hull_length, 0, 0],\n        [hull_length-5, hull_width/2, 0],\n        [hull_length-5, -hull_width/2, 0],\n        [0, hull_width/2-5, 0],\n        [0, -hull_width/2+5, 0],\n        [hull_length-5, hull_width/2-5, hull_height],\n        [hull_length-5, -hull_width/2+5, hull_height],\n        [5, hull_width/2-10, hull_height],\n        [5, -hull_width/2+10, hull_height]\n    ];\n    \n    // Create hull shape using polyhedron\n    hull_faces = [\n        [0,1,2,3], [0,4,5,1], [0,2,6,8,4], [0,3,7,9,5],\n        [1,2,6,7,3], [4,5,9,8], [6,7,9,8]\n    ];\n    \n    polyhedron(hull_points, hull_faces, convexity=10);\n}\n\n// Superstructure - bridge/command cabin\nmodule bridge() {\n    bridge_width = hull_width - 8;\n    bridge_length = 25;\n    bridge_height = 12;\n    \n    translate([hull_length/2 - 10, 0, hull_height]) {\n        // Main bridge structure\n        difference() {\n            cube([bridge_length, bridge_width, bridge_height], center=true);\n            // Windows\n            translate([0, 0, bridge_height/2 - 2])\n                cube([bridge_length - 4, bridge_width - 6, 3], center=true);\n        }\n        \n        // Roof details\n        translate([0, 0, bridge_height/2 + 1])\n            cube([bridge_length + 2, bridge_width + 2, 2], center=true);\n        \n        // Mast\n        translate([bridge_length/2 - 5, 0, bridge_height/2 + 2])\n            cylinder(h=15, r=1, $fn=8);\n    }\n}\n\n// Deck details\nmodule deck_details() {\n    // Railings - simple bars\n    for(i = [0:5:80]) {\n        translate([i, hull_width/2 - 2, hull_height + 1])\n            cube([2, 1.5, 5]);\n        translate([i, -hull_width/2 + 1, hull_height + 1])\n            cube([2, 1.5, 5]);\n    }\n    \n    // Life raft canisters\n    translate([hull_length/3, hull_width/2 - 6, hull_height + 1])\n        cylinder(h=4, r=2, $fn=12);\n    translate([hull_length/3, -hull_width/2 + 6, hull_height + 1])\n        cylinder(h=4, r=2, $fn=12);\n    \n    // Antenna array\n    translate([hull_length - 15, 0, hull_height + 15])\n        cylinder(h=8, r=0.5, $fn=6);\n}\n\n// Engine exhaust\nmodule exhaust() {\n    translate([hull_length - 8, 0, hull_height + 1]) {\n        difference() {\n            cube([6, 6, 3], center=true);\n            cylinder(h=4, r=2, center=true, $fn=8);\n        }\n    }\n}\n\n// Propellers\nmodule propellers() {\n    prop_offset = 2;\n    for(side = [-1, 1]) {\n        translate([hull_length - 2, side * hull_width/4, prop_offset]) {\n            rotate([0, 90, 0])\n                cylinder(h=2, r=3, $fn=3);\n        }\n    }\n}\n\n// Bow details\nmodule bow_details() {\n    // Anchor housing\n    translate([5, 0, hull_height - 2])\n        cube([6, 8, 4], center=true);\n    \n    // Bow rail\n    translate([0, 0, hull_height + 3])\n        cylinder(h=5, r=0.5, $fn=8);\n}\n\n// Main assembly\nunion() {\n    hull();\n    bridge();\n    deck_details();\n    exhaust();\n    propellers();\n    bow_details();\n}",
    "renders": true
  },
  {
    "vehicle": "coastguard",
    "openscad_code": "// Coast Guard Cutter (medium complexity, 3D-printable)\n// Approx. 90 mm long, 25 mm wide, 25 mm high\n// Hull and super-structure are hollow with 2 mm walls\n\n$fn = 32;\n\nmodule hull() {\n    difference() {\n        // Full hull shape\n        hull() {\n            // Bow\n            translate([-40, 0, 0]) scale([1, 0.6, 1]) sphere(d = 20);\n            // Mid\n            translate([0, 0, 5]) cube([80, 20, 10], center = true);\n            // Stern\n            translate([40, 0, 0]) scale([1, 0.7, 1]) sphere(d = 20);\n        }\n        // Hollow out\n        translate([0, 0, 2]) cube([76, 16, 6], center = true);\n    }\n}\n\nmodule deck() {\n    cube([80, 22, 2], center = true);\n}\n\nmodule superstructure() {\n    difference() {\n        // Bridge block\n        translate([0, 0, 12]) cube([40, 18, 12], center = true);\n        // Bridge windows front\n        translate([0, 10, 12]) cube([36, 1, 6], center = true);\n        translate([0, -10, 12]) cube([36, 1, 6], center = true);\n        // Hollow inside\n        translate([0, 0, 12]) cube([36, 14, 8], center = true);\n    }\n}\n\nmodule funnel() {\n    // Stack\n    cylinder(h = 10, d1 = 6, d2 = 4, center = false);\n    // Top cap\n    translate([0, 0, 10]) cylinder(h = 2, d = 6, center = false);\n    // Exhaust pipe\n    translate([0, 2, 11]) rotate([90, 0, 0]) cylinder(h = 4, d = 2, center = false);\n}\n\nmodule mast() {\n    // Main pole\n    cylinder(h = 20, d = 2, center = false);\n    // Radar dome\n    translate([0, 0, 20]) sphere(d = 4);\n}\n\nmodule life_raft(n) {\n    // Simple cylindrical raft\n    translate([n * 10 - 15, 0, 0]) cylinder(h = 4, d = 6, center = true);\n}\n\nmodule rail() {\n    // Stanchions\n    for (i = [-35:5:35]) {\n        translate([i, 12, 1]) cylinder(h = 6, d = 1.5);\n        translate([i, -12, 1]) cylinder(h = 6, d = 1.5);\n    }\n    // Top rails\n    translate([0, 12, 7]) cube([72, 1, 1], center = true);\n    translate([0, -12, 7]) cube([72, 1, 1], center = true);\n}\n\n// Build the ship\nhull();\ntranslate([0, 0, 10]) deck();\n\n// Superstructure sits atop deck\ntranslate([10, 0, 11]) superstructure();\n\n// Funnel behind bridge\ntranslate([18, 0, 13]) funnel();\n\n// Mast on bridge roof\ntranslate([0, 0, 19]) mast();\n\n// Life rafts on deck\nfor (k = [0:1]) {\n    translate([-15, k * 20 - 10, 12]) life_raft(0);\n}\n\n// Safety rails\ntranslate([0, 0, 10]) rail();",
    "renders": true
  },
  {
    "vehicle": "lifeboat",
    "openscad_code": "// Lifeboat - Realistic Medium Complexity\n// Dimensions: ~85mm long x ~30mm wide x ~35mm high\n\n// Hull parameters\nhull_length = 80;\nhull_width = 28;\nhull_height = 12;\nhull_thickness = 2;\n\n// Cabin parameters\ncabin_length = 45;\ncabin_width = 24;\ncabin_height = 18;\ncabin_wall = 2;\n\n// Module for rounded hull shape\nmodule rounded_hull() {\n    difference() {\n        // Main rounded hull\n        hull();\n        \n        // Hollow out interior\n        translate([0, 0, -hull_height/2 + hull_thickness])\n            scale([0.8, 0.8, 1])\n                hull();\n    }\n}\n\n// Hull shape definition\nmodule hull() {\n    // Create rounded bottom with cylinders and spheres\n    union() {\n        // Main hull body\n        translate([0, 0, hull_height/2])\n            scale([hull_length/2, hull_width/2, hull_height/2])\n                sphere($fn=32);\n        \n        // Flatten top\n        translate([0, 0, hull_height - 2])\n            cube([hull_length + 2, hull_width + 2, 4], center=true);\n        \n        // Bow rounding\n        translate([hull_length/2 - 5, 0, hull_height/2])\n            cylinder(h=hull_height, r1=5, r2=2, center=true, $fn=16);\n        \n        // Stern rounding\n        translate([-hull_length/2 + 5, 0, hull_height/2])\n            cylinder(h=hull_height, r1=5, r2=2, center=true, $fn=16);\n    }\n}\n\n// Cabin structure\nmodule cabin() {\n    difference() {\n        // Main cabin\n        translate([0, 0, hull_height + cabin_height/2])\n            cube([cabin_length, cabin_width, cabin_height], center=true);\n        \n        // Hollow interior\n        translate([0, 0, hull_height + cabin_height/2])\n            cube([cabin_length - cabin_wall*2, cabin_width - cabin_wall*2, cabin_height - cabin_wall], center=true);\n        \n        // Door opening\n        translate([cabin_length/2 - 2, 0, hull_height + cabin_height/2])\n            cube([cabin_wall + 1, 8, 12], center=true);\n        \n        // Windows\n        for(i = [-1, 1]) {\n            translate([i * cabin_length/4, cabin_width/2 - cabin_wall/2, hull_height + cabin_height/2 + 2])\n                cube([6, cabin_wall + 1, 4], center=true);\n        }\n    }\n}\n\n// Railings around deck\nmodule railings() {\n    railing_height = 8;\n    post_spacing = 10;\n    \n    for(x = [-hull_length/2 + 5 : post_spacing : hull_length/2 - 5]) {\n        // Posts\n        translate([x, hull_width/2 - 1, hull_height])\n            cylinder(h=railing_height, r=1, $fn=8);\n        translate([x, -hull_width/2 + 1, hull_height])\n            cylinder(h=railing_height, r=1, $fn=8);\n    }\n    \n    // Top rails\n    translate([0, hull_width/2 - 1, hull_height + railing_height - 1])\n        cube([hull_length - 10, 1, 1], center=true);\n    translate([0, -hull_width/2 + 1, hull_height + railing_height - 1])\n        cube([hull_length - 10, 1, 1], center=true);\n}\n\n// Life rings\nmodule life_rings() {\n    ring_radius = 3;\n    ring_thickness = 1.5;\n    \n    for(pos = [[hull_length/2 - 8, hull_width/2 + 2], [-hull_length/2 + 8, hull_width/2 + 2]]) {\n        translate([pos[0], pos[1], hull_height + 3])\n            rotate([90, 0, 0])\n                difference() {\n                    cylinder(h=ring_thickness, r=ring_radius, $fn=16);\n                    cylinder(h=ring_thickness + 1, r=ring_radius - 1.5, $fn=16);\n                }\n    }\n}\n\n// Roof details\nmodule roof_details() {\n    // Roof top\n    translate([0, 0, hull_height + cabin_height])\n        cube([cabin_length + 2, cabin_width + 2, 1], center=true);\n    \n    // Ventilation pipe\n    translate([cabin_length/4, 0, hull_height + cabin_height + 0.5])\n        cylinder(h=5, r1=2, r2=1.5, $fn=16);\n    \n    // Search light\n    translate([-cabin_length/4, 0, hull_height + cabin_height + 0.5])\n        union() {\n            cylinder(h=3, r=2, $fn=16);\n            translate([0, 0, 1.5])\n                rotate([45, 0, 0])\n                    cylinder(h=4, r1=2.5, r2=1.5, $fn=16);\n        }\n}\n\n// Assembly\nunion() {\n    // Main hull\n    rounded_hull();\n    \n    // Cabin\n    cabin();\n    \n    // Roof and details\n    roof_details();\n    \n    // Railings\n    railings();\n    \n    // Life rings\n    life_rings();\n}",
    "renders": true
  },
  {
    "vehicle": "rescueboat",
    "openscad_code": "$fn = 32;\nmodule rescueboat(){\n    hull();\n    cabin();\n    railing();\n    radar();\n    lights();\n    propellers();\n}\n\n// Main hull with rounded bow and flat stern\nmodule hull(){\n    difference(){\n        union(){\n            // Main hull body\n            hull_shape();\n            // Keel reinforcement\n            translate([0, 0, -2]) \n                scale([1, 1, 0.3])\n                hull_shape();\n        }\n        \n        // Cockpit cutout\n        translate([0, -5, 6])\n            rotate([0, 10, 0])\n            scale([0.6, 0.5, 0.4])\n            cube([30, 20, 10], center=true);\n    }\n}\n\nmodule hull_shape(){\n    // Create smooth hull with hull() function\n    hull(){\n        // Bow sphere\n        translate([20, 0, 4])\n            sphere(d=10);\n        // Mid section\n        translate([0, 0, 4])\n            sphere(d=15);\n        // Stern sphere\n        translate([-20, 0, 4])\n            sphere(d=10);\n    }\n    \n    // Flat deck\n    translate([0, 0, 8.5])\n        scale([1, 0.8, 0.1])\n        sphere(d=30);\n    \n    // Hull sides\n    translate([0, 0, 2])\n        scale([1, 0.9, 0.5])\n        sphere(d=25);\n}\n\n// Cabin with windows\nmodule cabin(){\n    translate([0, 0, 9]){\n        // Cabin base\n        difference(){\n            cube([28, 16, 8], center=true);\n            \n            // Door on port side\n            translate([0, 8.1, -2])\n                cube([6, 0.5, 8], center=true);\n            \n            // Windows front\n            for(i = [-8, 0, 8]){\n                translate([14.1, i, 0])\n                    rotate([0, 90, 0])\n                    cylinder(h=0.5, d=4);\n            }\n            \n            // Windows sides\n            for(i = [-10, -5, 0, 5, 10]){\n                translate([i, 8.1, 0])\n                    cube([2, 0.5, 3], center=true);\n            }\n        }\n        \n        // Cabin roof\n        translate([0, 0, 5])\n            scale([1, 1, 0.4])\n            sphere(d=25);\n    }\n}\n\n// Safety railing around deck\nmodule railing(){\n    // Starboard railing\n    railing_section(10);\n    // Port railing\n    mirror([0, 1, 0])\n        railing_section(-10);\n    \n    // Bow railing\n    translate([17, 0, 9.5])\n        for(i = [-8:4:8]){\n            translate([0, i, 0])\n                cylinder(h=4, d=1.5);\n        }\n}\n\nmodule railing_section(side){\n    translate([0, side, 9.5]){\n        for(i = [-15:5:15]){\n            translate([i, 0, 0])\n                cylinder(h=4, d=1.5);\n        }\n        \n        // Top rail\n        translate([0, 0, 4])\n            rotate([90, 0, 0])\n            cylinder(h=30, d=1.5);\n    }\n}\n\n// Radar mast and dome\nmodule radar(){\n    translate([-5, 0, 17]){\n        // Mast\n        cylinder(h=8, d=2);\n        // Radar dome\n        translate([0, 0, 9])\n            rotate_extrude(angle=180)\n                translate([4, 0, 0])\n                    circle(d=3);\n    }\n}\n\n// Navigation lights\nmodule lights(){\n    // Red port light\n    color(\"red\")\n    translate([18, -5, 10])\n        sphere(d=2);\n    \n    // Green starboard light\n    color(\"green\")\n    translate([18, 5, 10])\n        sphere(d=2);\n    \n    // White stern light\n    color(\"white\")\n    translate([-19, 0, 10])\n        sphere(d=2);\n}\n\n// Twin propellers\nmodule propellers(){\n    translate([-20, -5, 2]){\n        propeller();\n        translate([0, 10, 0])\n            propeller();\n    }\n}\n\nmodule propeller(){\n    difference(){\n        cylinder(h=3, d=4);\n        // Propeller blades\n        for(i = [0:60:300]){\n            rotate([0, 0, i])\n                translate([1, 0, 1.5])\n                    cube([3, 0.5, 2], center=true);\n        }\n    }\n}\n\n// Scale to reasonable printing size (80mm length)\nscale(0.8) rescueboat();",
    "renders": true
  },
  {
    "vehicle": "fireboat",
    "openscad_code": "// Realistic medium-complexity 3D-printable fireboat\n// Hull length ≈ 80 mm\n\n$fn = 36;\n\nmodule hull() {\n    // Main hull body\n    difference() {\n        hull() {\n            translate([-40, -15, 0]) cube([80, 30, 10]);\n            translate([-35, -12, 10]) cube([70, 24, 8]);\n            translate([-30, -10, 18]) cube([60, 20, 4]);\n        }\n        // Hollow interior\n        translate([-38, -13, 2]) cube([76, 26, 16]);\n    }\n}\n\nmodule superstructure() {\n    // Bridge house\n    translate([-25, -10, 20]) cube([30, 20, 12]);\n    // Wheelhouse\n    translate([-20, -8, 32]) cube([20, 16, 8]);\n}\n\nmodule funnel() {\n    // Main funnel\n    cylinder(h = 12, r1 = 4, r2 = 3);\n    translate([0, 0, 12]) cylinder(h = 4, r1 = 3, r2 = 3.5);\n    // Two smaller exhaust pipes\n    for (y = [-2.5, 2.5]) {\n        translate([1.5, y, 14]) cylinder(h = 6, r = 0.8);\n    }\n}\n\nmodule water_cannon(base_h = 3, barrel_l = 15) {\n    // Base\n    cylinder(h = base_h, r1 = 4, r2 = 3);\n    // Barrel\n    translate([0, 0, base_h]) rotate([0, -15, 0])\n        cylinder(h = barrel_l, r1 = 1.2, r2 = 1);\n}\n\nmodule rail(steps = 20) {\n    // Stanchions\n    for (x = [-35:5:35]) {\n        translate([x, 0, 18]) cylinder(h = 6, r = 0.8);\n    }\n    // Top rail\n    translate([0, 0, 24]) cube([70, 1, 1], center = true);\n}\n\nmodule lifeboat() {\n    // Simple davit\n    translate([-10, 12, 25]) rotate([0, 0, 15])\n        cylinder(h = 8, r = 0.6);\n    // Lifeboat hull\n    translate([-10, 15, 23]) rotate([90, 0, 0])\n        scale([1, 0.4, 0.5])\n        cylinder(h = 8, r1 = 2.5, r2 = 1.5);\n}\n\nunion() {\n    hull();\n    \n    superstructure();\n    \n    // Funnel on centerline\n    translate([0, 0, 32]) funnel();\n    \n    // Forward water cannon\n    translate([25, 0, 20]) water_cannon();\n    \n    // Aft water cannon\n    translate([-25, 0, 20]) rotate([0, 0, 180]) water_cannon();\n    \n    // Rails\n    rail();\n    \n    // Lifeboat on starboard side\n    lifeboat();\n}",
    "renders": true
  },
  {
    "vehicle": "patrolvessel",
    "openscad_code": "// Patrol Vessel – realistic style, medium complexity\n// Approx. 90 mm long, 3 mm wall thickness, printable without supports\n\nhull_w = 20;      // beam at mid-ships\nhull_l = 90;      // length overall\nhull_h = 12;      // height of main deck above keel\nkeel_h = 3;       // keel depth below waterline\nwall_t = 3;       // printable wall thickness\n\n// Overall scale factor for easy resizing\nscale_factor = 1;\n\nmodule hull() {\n    difference() {\n        // Main hull block\n        translate([0, 0, keel_h])\n            scale([1, 0.7, 0.5])\n                cube([hull_l, hull_w, hull_h*2], center=true);\n\n        // Hollow below deck\n        translate([0, 0, keel_h + wall_t])\n            scale([1, 0.65, 0.45])\n                cube([hull_l - wall_t*2, hull_w - wall_t*2, hull_h*2 - wall_t*2], center=true);\n\n        // Taper bow\n        rotate([0, 0, -8])\n            translate([hull_l/2 + 5, 0, 0])\n                cube([hull_l/2, hull_w + 2, hull_h*4], center=true);\n\n        // Taper stern\n        rotate([0, 0, 8])\n            translate([-hull_l/2 - 5, 0, 0])\n                cube([hull_l/2, hull_w + 2, hull_h*4], center=true);\n    }\n}\n\nmodule superstructure() {\n    // Bridge block\n    difference() {\n        translate([0, 0, keel_h + hull_h + wall_t/2])\n            cube([30, hull_w - 4, 8], center=true);\n        translate([0, 0, keel_h + hull_h + wall_t + 1])\n            cube([28, hull_w - 6, 6], center=true);\n    }\n\n    // Radar mast\n    translate([10, 0, keel_h + hull_h + 8])\n        cylinder(h = 12, d = 2, $fn = 8);\n\n    // Radar dome\n    translate([10, 0, keel_h + hull_h + 8 + 12])\n        sphere(d = 4, $fn = 16);\n\n    // Gun turret\n    difference() {\n        translate([-20, 0, keel_h + hull_h])\n            cylinder(h = 4, d = 6, $fn = 16);\n        translate([-20, 0, keel_h + hull_h + 4])\n            cylinder(h = 2, d = 2, $fn = 8);\n    }\n}\n\nmodule funnel() {\n    translate([-10, 0, keel_h + hull_h + 8]) {\n        difference() {\n            cylinder(h = 8, d1 = 5, d2 = 3, $fn = 16);\n            translate([0, 0, wall_t])\n                cylinder(h = 8 - wall_t*2, d1 = 5 - wall_t*2, d2 = 3 - wall_t*2, $fn = 16);\n        }\n    }\n}\n\nmodule lifeboats() {\n    for (y = [-hull_w/4, hull_w/4]) {\n        translate([5, y, keel_h + hull_h + 5]) {\n            rotate([0, 90, 0])\n                cylinder(h = 10, d = 3, $fn = 8);\n        }\n    }\n}\n\n// Render model\nscale(scale_factor) {\n    hull();\n    superstructure();\n    funnel();\n    lifeboats();\n}",
    "renders": true
  },
  {
    "vehicle": "gunboat",
    "openscad_code": "// Gunboat - Realistic style with medium complexity\n// Dimensions: ~80 mm length, ~20 mm width, ~15 mm height\n\n// Main module\nmodule gunboat() {\n    // Hull base\n    union() {\n        // Main hull\n        hull_bottom();\n        \n        // Superstructure\n        superstructure();\n        \n        // Main gun turret\n        translate([0, 0, 8]) \n            rotate([0, 0, 0]) \n                gun_turret();\n        \n        // Secondary guns\n        translate([-25, -8, 6]) \n            rotate([0, 0, -45]) \n                secondary_gun();\n        translate([-25, 8, 6]) \n            rotate([0, 0, 45]) \n                secondary_gun();\n        \n        // Radar mast\n        translate([20, 0, 10]) \n            radar_mast();\n        \n        // Smoke stack\n        translate([10, 0, 8]) \n            smoke_stack();\n        \n        // Life rafts\n        for(i = [-1, 1]) {\n            translate([15, i * 12, 7.5]) \n                life_raft();\n        }\n    }\n}\n\n// Hull bottom with slight V-shape\nmodule hull_bottom() {\n    difference() {\n        union() {\n            // Main hull body\n            hull_body();\n            \n            // Bow\n            translate([35, 0, 0]) \n                rotate([0, 90, 0]) \n                    cylinder(h=2, r1=10, r2=0, $fn=20);\n            \n            // Stern\n            translate([-35, 0, 0]) \n                rotate([0, 90, 0]) \n                    cylinder(h=2, r1=10, r2=0, $fn=20);\n        }\n        \n        // Hollow out interior\n        translate([0, 0, -2]) \n            cube([70, 18, 4], center=true);\n    }\n}\n\n// Main hull body\nmodule hull_body() {\n    hull_shape();\n    \n    // Add deck\n    translate([0, 0, 6]) \n        cube([70, 20, 0.5], center=true);\n    \n    // Add railings\n    for(x = [-30:10:30]) {\n        translate([x, 10.5, 6.5]) \n            cylinder(h=1, r=0.5, $fn=8);\n        translate([x, -10.5, 6.5]) \n            cylinder(h=1, r=0.5, $fn=8);\n    }\n}\n\n// Hull shape with slight V\nmodule hull_shape() {\n    hull_points = [\n        [35, 10, 0], [35, -10, 0],\n        [-35, 10, 0], [-35, -10, 0],\n        [35, 8, 2], [35, -8, 2],\n        [-35, 8, 2], [-35, -8, 2]\n    ];\n    \n    // Create hull using cubes at different heights\n    for(x = [-35:5:35]) {\n        width = 10 - abs(x) * 0.15;\n        height = 2 - abs(x) * 0.02;\n        translate([x, 0, height/2]) \n            cube([5, width * 2, height], center=true);\n    }\n}\n\n// Superstructure\nmodule superstructure() {\n    translate([0, 0, 6.5]) {\n        // Bridge\n        cube([30, 15, 4], center=true);\n        \n        // Bridge windows\n        translate([10, 0, 2]) {\n            for(y = [-6:3:6]) {\n                translate([0, y, 0]) \n                    cube([0.5, 2, 1], center=true);\n            }\n        }\n    }\n}\n\n// Main gun turret\nmodule gun_turret() {\n    difference() {\n        union() {\n            // Turret base\n            cylinder(h=3, r=8, $fn=32);\n            \n            // Gun barrel\n            translate([12, 0, 1]) \n                rotate([0, 90, 0]) \n                    cylinder(h=20, r=1.5, $fn=16);\n            \n            // Turret top\n            translate([0, 0, 3]) \n                cylinder(h=1, r=7, $fn=32);\n        }\n        \n        // Gun sight hole\n        translate([0, 0, 2]) \n            cylinder(h=4, r=2, $fn=16);\n    }\n}\n\n// Secondary gun\nmodule secondary_gun() {\n    union() {\n        // Gun mount\n        cylinder(h=2, r=2, $fn=16);\n        \n        // Gun barrel\n        translate([4, 0, 1]) \n            rotate([0, 90, 0]) \n                cylinder(h=8, r=0.8, $fn=12);\n    }\n}\n\n// Radar mast\nmodule radar_mast() {\n    union() {\n        // Mast pole\n        cylinder(h=8, r=0.5, $fn=8);\n        \n        // Radar dish\n        translate([0, 0, 8]) \n            rotate([90, 0, 0]) \n                cylinder(h=0.5, r1=3, r2=1, $fn=16);\n    }\n}\n\n// Smoke stack\nmodule smoke_stack() {\n    difference() {\n        union() {\n            // Stack base\n            cylinder(h=6, r=2, $fn=16);\n            \n            // Top cap\n            translate([0, 0, 6]) \n                cylinder(h=0.5, r=2.2, $fn=16);\n        }\n        \n        // Hollow interior\n        translate([0, 0, -1]) \n            cylinder(h=8, r=1.5, $fn=16);\n    }\n}\n\n// Life raft\nmodule life_raft() {\n    cylinder(h=1, r=2.5, $fn=16);\n}\n\n// Generate the gunboat\ngunboat();",
    "renders": true
  },
  {
    "vehicle": "corvette",
    "openscad_code": "// Corvette 3D Printable Model (Medium Complexity)\n// Scale: ~80mm length\n\n$fn = 32;  // Curve resolution\n\nmodule body_shell() {\n    // Main body - tapered\n    hull() {\n        translate([-15, -10, 5]) cube([30, 20, 8]);\n        translate([-35, -12, 5]) cube([20, 24, 6]);\n        translate([15, -8, 5]) cube([25, 16, 7]);\n    }\n    // Hood bulge\n    translate([5, -9, 13]) scale([1.5, 1.2, 0.8]) sphere(r=7);\n}\n\nmodule cabin() {\n    // Windshield frame\n    translate([-5, -11, 12]) cube([22, 22, 8]);\n    difference() {\n        translate([-3, -9, 14]) cube([18, 18, 6]);\n        translate([-2, -8, 19]) cube([16, 16, 2]);\n    }\n    // Roof\n    translate([5, 0, 20]) cube([14, 20, 3]);\n}\n\nmodule wheels() {\n    module wheel() {\n        difference() {\n            cylinder(h=6, r=8);  // Tire\n            cylinder(h=7, r=5);  // Rim inset\n        }\n        // Rim spokes\n        for(i=[0:5]) {\n            rotate([0,0,i*60]) \n                translate([0,0,3]) cube([2, 7, 4], center=true);\n        }\n    }\n    \n    // Front wheels\n    translate([-25, 15, 0]) rotate([90,0,0]) wheel();\n    translate([-25, -15, 0]) rotate([90,0,0]) wheel();\n    \n    // Rear wheels (larger)\n    translate([25, 16, 0]) rotate([90,0,0]) scale([1.1,1.1,1]) wheel();\n    translate([25, -16, 0]) rotate([90,0,0]) scale([1.1,1.1,1]) wheel();\n}\n\nmodule headlights() {\n    // Front headlights\n    translate([38, -8, 8]) cube([4, 5, 3]);\n    translate([38, 3, 8]) cube([4, 5, 3]);\n    \n    // Rear lights\n    translate([-38, -10, 8]) cube([3, 8, 2]);\n    translate([-38, 2, 8]) cube([3, 8, 2]);\n}\n\nmodule spoiler() {\n    // Rear spoiler\n    translate([-35, -15, 15]) cube([5, 30, 2]);\n    translate([-33, -15, 10]) cube([1, 30, 5]);\n}\n\nmodule exhaust() {\n    // Dual exhaust tips\n    translate([-30, 12, 3]) cylinder(h=10, r=2);\n    translate([-30, -12, 3]) cylinder(h=10, r=2);\n}\n\nmodule windows() {\n    // Side windows\n    translate([5, 11, 16]) cube([14, 0.5, 4]);\n    translate([5, -11.5, 16]) cube([14, 0.5, 4]);\n    \n    // Rear window\n    translate([-15, 0, 15]) cube([8, 20, 0.5]);\n}\n\nmodule chassis_base() {\n    // Solid base for printing support\n    difference() {\n        translate([0, 0, -1]) cube([80, 40, 2]);\n        \n        // Wheel cutouts\n        translate([-25, 15, -1]) cylinder(h=3, r=9);\n        translate([-25, -15, -1]) cylinder(h=3, r=9);\n        translate([25, 16, -1]) cylinder(h=3, r=10);\n        translate([25, -16, -1]) cylinder(h=3, r=10);\n    }\n}\n\n// Assemble the car\nunion() {\n    chassis_base();\n    body_shell();\n    cabin();\n    wheels();\n    headlights();\n    spoiler();\n    exhaust();\n    windows();\n}",
    "renders": true
  },
  {
    "vehicle": "minesweeper",
    "openscad_code": "// Realistic-style 3D-printable naval minesweeper (medium complexity)\n// Overall length ~85 mm, no overhangs >45°, 1 mm wall thickness\n\n$fa = 2; $fs = 0.5;\n\nmodule hull() {\n    // Main hull – long rounded box\n    hull_box();\n    // Bow taper\n    translate([38,0,1.5]) rotate([0,90,0]) cylinder(h=10, r1=6, r2=0, $fn=20);\n    // Stern taper\n    translate([-38,0,1.5]) rotate([0,-90,0]) cylinder(h=10, r1=6, r2=0, $fn=20);\n}\n\nmodule hull_box() {\n    // Central body with rounded edges\n    minkowski() {\n        cube([70, 12, 5], center=true);\n        sphere(2, $fn=16);\n    }\n}\n\nmodule superstructure() {\n    // Bridge block\n    translate([15,0,6]) cube([12, 10, 5], center=true);\n    // Wheelhouse\n    translate([15,0,10]) cube([8, 8, 3], center=true);\n    // Roof railings (thin posts)\n    for (x = [-2, 2])\n        translate([15 + x, 4.5, 12]) cylinder(h=1, d=0.8, $fn=8);\n}\n\nmodule funnel() {\n    // Exhaust stack\n    translate([0,0,7]) cylinder(h=8, d1=4, d2=3, $fn=16);\n    // Cap\n    translate([0,0,15]) cylinder(h=1, d=5, $fn=16);\n}\n\nmodule mast() {\n    // Main mast\n    translate([-15,0,7]) cylinder(h=12, d=1.5, $fn=8);\n    // Yardarms\n    rotate([0,0,90]) translate([-15,0,14]) cube([0.8, 10, 0.8], center=true);\n    rotate([0,0,0])   translate([-15,0,11]) cube([0.8, 8, 0.8], center=true);\n}\n\nmodule gun() {\n    // 20 mm Oerlikon-style mount\n    translate([25,0,6]) rotate([0,-10,0]) union() {\n        cylinder(h=3, d=2, $fn=12);\n        translate([0,0,2]) rotate([0,90,0]) cylinder(h=8, r=0.8, $fn=8);\n    }\n}\n\nmodule lifeboats() {\n    // Two lifeboats on davits\n    for (y = [-5, 5]) {\n        // Davit\n        translate([5, y*1.5, 7]) rotate([45,0,0])\n            cylinder(h=5, r=0.6, $fn=8);\n        // Boat\n        hull_boat(y);\n    }\n}\n\nmodule hull_boat(y) {\n    // Simple semi-cylindrical boat\n    translate([5, y*1.5, 7.8]) rotate([90,0,0])\n        scale([1, 1, 0.7]) cylinder(h=3, r=1.2, $fn=16);\n}\n\nmodule mine_clearance() {\n    // A-frame crane stern\n    translate([-30,0,6]) rotate([30,0,0])\n        cylinder(h=10, r=1, $fn=8);\n    translate([-30,0,6]) rotate([-30,0,0])\n        cylinder(h=10, r=1, $fn=8);\n    // Cross-beam\n    translate([-30,0,16]) rotate([0,90,0])\n        cylinder(h=10, r=0.8, $fn=8);\n}\n\nunion() {\n    hull();\n    superstructure();\n    funnel();\n    mast();\n    gun();\n    lifeboats();\n    mine_clearance();\n}",
    "renders": true
  },
  {
    "vehicle": "landingcraft",
    "openscad_code": "// Landing Craft Utility (LCU) - Realistic Style, Medium Complexity\n// Overall dimensions: 90mm long x 35mm wide x 25mm high\n\n$fn = 32;\n\n// Main hull module\nmodule hull() {\n    // Lower hull - displacement hull shape\n    difference() {\n        hull_shape();\n        // Hollow out the inside\n        translate([5, 0, 2]) \n            scale([0.85, 0.85, 0.9])\n            hull_shape();\n    }\n}\n\n// Basic hull shape\nmodule hull_shape() {\n    union() {\n        // Bow section\n        translate([40, 0, 2])\n            scale([1, 0.5, 1])\n            sphere(d=15);\n        \n        // Main hull body\n        translate([0, 0, 5])\n            cube([80, 30, 15], center=true);\n        \n        // Stern section\n        translate([-40, 0, 5])\n            cube([10, 30, 15], center=true);\n    }\n}\n\n// Landing ramp\nmodule ramp() {\n    translate([-45, 0, 5])\n        rotate([0, -20, 0])\n        difference() {\n            // Ramp base\n            translate([5, 0, 0])\n                cube([25, 28, 2], center=true);\n            \n            // Ramp surface texture\n            for(i = [0:4]) {\n                translate([10 + i*3, 0, 1])\n                    cube([1, 26, 0.5], center=true);\n            }\n        }\n}\n\n// Superstructure (wheelhouse)\nmodule superstructure() {\n    translate([15, 0, 12])\n        difference() {\n            // Main structure\n            cube([20, 25, 12], center=true);\n            \n            // Windows\n            translate([10, 0, 3])\n                cube([2, 18, 6], center=true);\n        }\n}\n\n// Smoke stack\nmodule smokestack() {\n    translate([0, 0, 18])\n        cylinder(h=8, d=6);\n}\n\n// Life raft canisters\nmodule life_rafts() {\n    for(pos = [[-20, 12, 12], [-20, -12, 12], [30, 12, 12], [30, -12, 12]]) {\n        translate(pos)\n            cylinder(h=4, d=5);\n    }\n}\n\n// Railings using cylinders\nmodule railings() {\n    // Port railing\n    for(x = [-35:10:35]) {\n        translate([x, 15, 10])\n            cylinder(h=5, d=1.5);\n    }\n    \n    // Starboard railing\n    for(x = [-35:10:35]) {\n        translate([x, -15, 10])\n            cylinder(h=5, d=1.5);\n    }\n    \n    // Connect railings with horizontal bars\n    translate([0, 15, 12.5])\n        cube([80, 1, 1], center=true);\n    translate([0, -15, 12.5])\n        cube([80, 1, 1], center=true);\n}\n\n// Propulsion units\nmodule propulsion() {\n    translate([-43, 0, 3])\n        union() {\n            // Port propeller housing\n            translate([0, 10, -1])\n                cylinder(h=4, d=6);\n            \n            // Starboard propeller housing\n            translate([0, -10, -1])\n                cylinder(h=4, d=6);\n            \n            // Transom plate\n            cube([2, 30, 8], center=true);\n        }\n}\n\n// Anchor\nmodule anchor() {\n    translate([42, 0, 8])\n        rotate([90, 0, 0])\n        union() {\n            cylinder(h=5, d=2);\n            translate([0, 0, -2.5])\n                sphere(d=3);\n        }\n}\n\n// Main assembly\nunion() {\n    hull();\n    ramp();\n    superstructure();\n    smokestack();\n    life_rafts();\n    railings();\n    propulsion();\n    anchor();\n}",
    "renders": true
  },
  {
    "vehicle": "aircushion",
    "openscad_code": "// Air-cushion (hovercraft) skirt module\n// Medium complexity, realistic style\n\n$fn = 36;\n\n// Main parameters\ncushion_diameter = 80;\ncushion_height = 25;\nskirt_thickness = 2;\ninflation_gap = 1.5;\nvent_holes = 8;\n\nmodule cushion_base() {\n    difference() {\n        // Main toroidal air bladder\n        rotate_extrude(angle = 360, $fn = 60)\n            translate([cushion_diameter/2 - skirt_thickness, 0, 0])\n                circle(r = skirt_thickness);\n\n        // Hollow center\n        cylinder(h = cushion_height*2, d = cushion_diameter - skirt_thickness*4, center = true);\n        \n        // Top opening for fan intake\n        translate([0, 0, cushion_height/2])\n            cylinder(h = skirt_thickness*2, d = cushion_diameter - skirt_thickness*6);\n    }\n}\n\nmodule skirt_segments() {\n    for (i = [0:vent_holes-1]) {\n        rotate([0, 0, i * 360/vent_holes])\n            translate([cushion_diameter/2 - skirt_thickness*2, 0, -cushion_height/2 + 2])\n                cube([skirt_thickness*1.5, skirt_thickness, cushion_height - 4], center = true);\n    }\n}\n\nmodule bottom_vent_ring() {\n    difference() {\n        cylinder(h = skirt_thickness, d = cushion_diameter - skirt_thickness, center = true);\n        \n        // Vent holes for air escape\n        for (i = [0:vent_holes-1]) {\n            rotate([0, 0, i * 360/vent_holes + 360/vent_holes/2])\n                translate([cushion_diameter/2 - skirt_thickness*3, 0, 0])\n                    cube([skirt_thickness*3, inflation_gap*2, skirt_thickness*2], center = true);\n        }\n    }\n}\n\nmodule top_mounting_flange() {\n    difference() {\n        cylinder(h = skirt_thickness*2, d = cushion_diameter + 10, center = true);\n        cylinder(h = skirt_thickness*2 + 0.1, d = cushion_diameter - skirt_thickness*2, center = true);\n    }\n}\n\n// Assembly\ntranslate([0, 0, cushion_height/2])\n    union() {\n        // Main cushion structure\n        cushion_base();\n        \n        // Reinforcement segments\n        skirt_segments();\n        \n        // Bottom vent ring\n        translate([0, 0, -cushion_height/2 + skirt_thickness/2])\n            bottom_vent_ring();\n        \n        // Top mounting flange\n        translate([0, 0, cushion_height/2 + skirt_thickness])\n            top_mounting_flange();\n    }",
    "renders": true
  },
  {
    "vehicle": "seaplane",
    "openscad_code": "// Realistic Seaplane - Medium Complexity\n// Wingspan ~80mm, Length ~65mm, Height ~25mm\n\nmodule float() {\n    difference() {\n        hull() {\n            cylinder(h=8, d1=18, d2=16, $fn=32);\n            translate([0, 0, 8])\n                cylinder(h=5, d1=16, d2=12, $fn=32);\n        }\n        translate([0, 0, -1])\n            cylinder(h=10, d=14, $fn=32);\n    }\n}\n\nmodule propeller() {\n    for(i=[0:120:359]) {\n        rotate([0, 0, i])\n            translate([0, 0, 0])\n                rotate([90, 0, 0])\n                    scale([1, 3, 0.4])\n                        cube([8, 2, 1], center=true);\n    }\n    cylinder(h=3, d=3, $fn=16);\n}\n\nmodule engine() {\n    union() {\n        cylinder(h=8, d=6, $fn=16);\n        translate([0, 0, 8])\n            propeller();\n    }\n}\n\nmodule wing() {\n    difference() {\n        hull() {\n            translate([-20, 0, 0])\n                cube([40, 6, 2]);\n            translate([-35, 0, 0])\n                cube([5, 6, 1.5]);\n            translate([35, 0, 0])\n                cube([5, 6, 1.5]);\n        }\n        for(x=[-30:10:30])\n            translate([x, 0, -1])\n                cylinder(h=4, d=2, $fn=12);\n    }\n}\n\nmodule tail_fin() {\n    union() {\n        translate([0, 0, 0])\n            cube([0.8, 12, 8]);\n        translate([0, 6, 4])\n            rotate([0, -20, 0])\n                cube([0.8, 8, 5]);\n    }\n}\n\nmodule stabilizer() {\n    union() {\n        translate([0, 0, 0])\n            cube([20, 1, 4]);\n        translate([0, 0, 0])\n            cube([1, 12, 4]);\n    }\n}\n\nmodule fuselage() {\n    difference() {\n        hull() {\n            // Nose\n            translate([0, 0, 0])\n                sphere(d=10, $fn=32);\n            // Mid section\n            translate([0, 0, -15])\n                scale([1, 0.8, 1])\n                    sphere(d=10, $fn=32);\n            // Tail\n            translate([0, 0, -30])\n                sphere(d=6, $fn=32);\n        }\n        // Cockpit\n        translate([-3, 0, -8])\n            rotate([0, 15, 0])\n                cube([12, 8, 6]);\n    }\n}\n\n// Assembly\nunion() {\n    // Fuselage\n    fuselage();\n    \n    // Main wing\n    translate([0, 0, -10])\n        rotate([0, 0, 0])\n            wing();\n    \n    // Engine\n    translate([0, -8, -10])\n        engine();\n    \n    // Tail\n    translate([0, 0, -30])\n        rotate([15, 0, 0])\n            stabilizer();\n    \n    translate([0, 0, -30])\n        tail_fin();\n    \n    // Floats\n    translate([15, -6, -10])\n        rotate([0, 20, 0])\n            float();\n    \n    translate([-15, -6, -10])\n        rotate([0, 20, 0])\n            float();\n}",
    "renders": true
  },
  {
    "vehicle": "floatplane",
    "openscad_code": "// Medium-complexity realistic floatplane – 3D-printable\n// Approx 80 mm wingspan, wall thickness 1 mm, no steep overhangs\n\nwall = 1;               // uniform printable wall\nscale = 1;              // global scaling knob\n\nmodule main() {\n    // Fuselage shell\n    hull();\n    \n    // Wings\n    wing_assembly();\n    \n    // Tail surfaces\n    tail_assembly();\n    \n    // Floats\n    float_assembly();\n    \n    // Propeller\n    propeller();\n}\n\nmodule hull() {\n    // Central tube\n    translate([-5,0,5]) rotate([0,90,0])\n        cylinder(h=50, d1=8, d2=6, $fn=30);\n    \n    // Cockpit bump\n    translate([15,0,8])\n        scale([1,0.8,0.6])\n            sphere(d=10, $fn=30);\n    \n    // Nose cone\n    translate([-30,0,5]) rotate([0,90,0])\n        cylinder(h=10, d1=0, d2=8, $fn=30);\n}\n\nmodule wing_assembly() {\n    // Main wing\n    difference() {\n        translate([5,0,10]) rotate([0,0,0])\n            cube([30,80,2], center=true);\n        // Cutout for fuselage\n        translate([5,0,9])\n            cube([12,10,4], center=true);\n    }\n    \n    // Wing struts\n    for (y=[-30,30]) {\n        strut([5,y,10], [5,y,-2]);\n    }\n}\n\nmodule tail_assembly() {\n    // Horizontal stabilizer\n    translate([-40,0,10]) rotate([0,10,0])\n        cube([15,30,2], center=true);\n    \n    // Vertical stabilizer\n    translate([-45,0,16]) rotate([0,0,0])\n        cube([15,2,12], center=true);\n}\n\nmodule float_assembly() {\n    // Left float\n    float(-15);\n    // Right float\n    float(15);\n}\n\nmodule float(x) {\n    hull() {\n        // Main pontoon\n        translate([0,x,-2])\n            rotate([0,90,0])\n                cylinder(h=35, d1=6, d2=4, $fn=20);\n        \n        // Step\n        translate([10,x,-2])\n            rotate([0,90,0])\n                cylinder(h=8, d1=4, d2=4, $fn=20);\n        \n        // Front taper\n        translate([-15,x,-2])\n            rotate([0,90,0])\n                cylinder(h=8, d1=0, d2=6, $fn=20);\n    }\n    \n    // Struts connecting float to fuselage\n    strut([5,x,0], [5,x,-2]);\n    strut([0,x,0], [0,x,-2]);\n    strut([-5,x,0], [-5,x,-2]);\n}\n\nmodule strut(p1, p2) {\n    // Simple vertical strut\n    translate(p1) {\n        v = p2 - p1;\n        rotate([90,0,0])\n            cylinder(h=v.z, d=2, $fn=8);\n    }\n}\n\nmodule propeller() {\n    translate([-38,0,5]) rotate([0,90,0]) {\n        difference() {\n            // Hub\n            cylinder(h=5, d=4, $fn=20);\n            // Shaft hole\n            cylinder(h=6, d=2, $fn=20);\n        }\n        \n        // Two blades\n        for (a=[0,120,240])\n            rotate([0,0,a])\n                translate([0,3,0])\n                    cube([12,1,0.8], center=true);\n    }\n}\n\n// Render\nscale(scale) main();",
    "renders": true
  },
  {
    "vehicle": "flyingboat",
    "openscad_code": "// Flying Boat - Realistic Style, Medium Complexity\n// Suitable for 3D printing, roughly 70mm wingspan\n\nmodule hull() {\n    // Main hull body - elongated ellipsoid shape\n    difference() {\n        scale([1, 0.6, 0.4]) sphere(d=30, $fn=50);\n        translate([0, 0, -6]) cube([35, 20, 12], center=true);\n    }\n    \n    // Hull bottom - flat bottom for water contact\n    translate([0, 0, -5.9]) cube([33, 18, 0.5], center=true);\n    \n    // Step in hull bottom for water takeoff\n    translate([-7, 0, -5.5]) cube([0.5, 16, 1], center=true);\n}\n\nmodule cockpit() {\n    // Cockpit canopy - streamlined shape\n    translate([8, 0, 8]) {\n        difference() {\n            scale([1.5, 1, 0.6]) sphere(d=12, $fn=30);\n            translate([0, 0, -3]) cube([20, 12, 6], center=true);\n        }\n    }\n    \n    // Windshield frame\n    translate([12, 0, 8]) rotate([0, -20, 0]) \n        cube([0.5, 8, 4], center=true);\n}\n\nmodule wing() {\n    // Main wing - tapered design\n    difference() {\n        hull() {\n            translate([-20, 0, 5]) sphere(d=2);\n            translate([20, 0, 5]) sphere(d=2);\n            translate([-20, -25, 5]) sphere(d=1);\n            translate([20, -25, 5]) sphere(d=1);\n        }\n        // Cut internal void for material saving\n        translate([0, -12, 5]) cube([38, 22, 2], center=true);\n    }\n    \n    // Wing struts connecting to hull\n    for(y = [-20, 20]) {\n        translate([0, y/2, 6]) rotate([0, 20, 0])\n            cylinder(h=12, d1=2, d2=1, $fn=8);\n    }\n}\n\nmodule tail() {\n    // Horizontal stabilizer\n    translate([-20, 0, 8]) {\n        cube([12, 0.5, 20], center=true);\n        \n        // Vertical stabilizer\n        translate([-6, 0, 10]) cube([0.5, 2, 8], center=true);\n        \n        // Elevator\n        translate([-20, 0, 8]) rotate([0, 15, 0])\n            cube([8, 0.5, 18], center=true);\n    }\n}\n\nmodule engine() {\n    // Engine nacelle on wing\n    translate([0, 15, 7]) {\n        cylinder(h=8, d=6, $fn=16);\n        \n        // Engine cowling\n        translate([0, 0, 4]) rotate_extrude($fn=16)\n            translate([3, 0, 0]) circle(r=1);\n        \n        // Propeller hub\n        translate([0, 0, 8]) sphere(d=3, $fn=12);\n        \n        // Propeller blades (simplified)\n        for(i = [0:45:135]) {\n            rotate([0, 0, i]) \n                translate([2, 0, 8]) \n                    cube([10, 0.5, 1], center=true);\n        }\n    }\n    \n    // Second engine\n    mirror([0, 1, 0]) engine();\n}\n\nmodule floats() {\n    // Wingtip floats for stability\n    for(y = [-25, 25]) {\n        translate([0, y, 3]) {\n            scale([0.4, 0.4, 0.2]) sphere(d=12, $fn=20);\n            translate([0, 0, -1.2]) cube([4, 4, 0.5], center=true);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    hull();\n    cockpit();\n    wing();\n    tail();\n    engine();\n    floats();\n}\n\n// Print orientation support\ntranslate([0, 0, -10]) cube([50, 60, 0.5], center=true);",
    "renders": true
  },
  {
    "vehicle": "amphibian",
    "openscad_code": "$fn = 50;\n\nmodule frog_body() {\n    // Main torso as slightly flattened ellipsoid\n    scale([1.2, 0.8, 0.9]) sphere(d = 30);\n}\n\nmodule head() {\n    // Head merged with torso\n    translate([12, 0, 8]) scale([1.1, 1, 0.9]) sphere(d = 22);\n}\n\nmodule eye() {\n    translate([0, 0, 8])\n    union() {\n        // Eyeball\n        sphere(d = 8);\n        // Pupil\n        translate([0, 0, 4]) sphere(d = 4);\n    }\n}\n\nmodule eyes() {\n    // Left eye\n    translate([20, 8, 12]) eye();\n    // Right eye\n    translate([20, -8, 12]) eye();\n}\n\nmodule nostril() {\n    rotate([90, 0, 0]) cylinder(h = 2, d = 2);\n}\n\nmodule nostrils() {\n    translate([23, 4, 9]) nostril();\n    translate([23, -4, 9]) nostril();\n}\n\nmodule mouth() {\n    // Simple mouth groove\n    difference() {\n        translate([22, 0, 6]) cube([8, 16, 2]);\n        translate([22, 0, 7]) rotate([0, 15, 0]) cube([10, 20, 2]);\n    }\n}\n\nmodule front_leg() {\n    translate([0, 0, 0]) {\n        // Upper arm\n        rotate([0, -20, 30]) cylinder(h = 12, d = 6);\n        // Lower arm\n        translate([0, 0, 12]) rotate([0, -40, 0]) cylinder(h = 15, d = 5);\n        // Hand\n        translate([0, 0, 27]) sphere(d = 6);\n    }\n}\n\nmodule front_legs() {\n    // Left front leg\n    translate([8, 12, -5]) rotate([0, 0, -20]) front_leg();\n    // Right front leg\n    translate([8, -12, -5]) mirror([0, 1, 0]) rotate([0, 0, -20]) front_leg();\n}\n\nmodule back_leg() {\n    translate([0, 0, 0]) {\n        // Thigh\n        rotate([0, 0, -30]) cylinder(h = 15, d = 7);\n        // Shin\n        translate([0, 0, 15]) rotate([0, 0, 45]) cylinder(h = 18, d = 6);\n        // Foot\n        translate([0, 0, 33]) rotate([0, 90, 0]) scale([2, 1, 1]) sphere(d = 8);\n        // Toes\n        for(i = [-1:1]) {\n            translate([0, i*3, 37]) rotate([0, 90, 0]) cylinder(h = 8, d = 3);\n        }\n    }\n}\n\nmodule back_legs() {\n    // Left back leg\n    translate([-12, 14, -8]) rotate([0, 0, -60]) back_leg();\n    // Right back leg\n    translate([-12, -14, -8]) mirror([0, 1, 0]) rotate([0, 0, -60]) back_leg();\n}\n\nmodule webbed_fingers() {\n    // Webbing between fingers\n    for(i = [-1:0.5:1]) {\n        rotate([0, 0, i*15]) translate([0, 0, 27]) \n        scale([0.5, 0.1, 0.3]) sphere(d = 8);\n    }\n}\n\nmodule frog() {\n    union() {\n        // Main body parts\n        frog_body();\n        head();\n        \n        // Facial features\n        eyes();\n        nostrils();\n        mouth();\n        \n        // Limbs\n        front_legs();\n        back_legs();\n        \n        // Web details on hands\n        webbed_fingers();\n    }\n}\n\n// Scale to fit 3D printer bed (max ~80mm)\nscale([2.5, 2.5, 2.5])\nfrog();",
    "renders": true
  },
  {
    "vehicle": "cat",
    "openscad_code": "// Realistic 3D-printable cat – medium complexity\n// Overall size ≈ 75 mm long × 35 mm wide × 45 mm high\n// Wall thickness ≥ 1.5 mm, no steep overhangs\n\n// Basic parameters\nbody_w = 35;\nbody_h = 25;\nbody_l = 45;\n\nhead_r = 12;\nneck_h = 4;\nneck_r = 6;\n\nleg_h = 20;\nleg_r = 4;\npaw_r = 5;\n\ntail_seg = 7;\ntail_r = 3.5;\n\near_r = 6;\near_h = 10;\near_t = 2;\n\neye_r = 2.5;\nnose_r = 1.5;\n\n$fn = 32; // smooth curves\n\nmodule cat() {\n    union() {\n        // Main body: elongated ellipsoid\n        scale([1, 0.7, 0.6])\n            sphere(d = body_w);\n\n        // Neck\n        translate([0, 0, body_h/2])\n            cylinder(h = neck_h, r1 = neck_r, r2 = head_r, $fn = 24);\n\n        // Head\n        translate([0, 0, body_h/2 + neck_h + head_r])\n            sphere(d = head_r * 2);\n\n        // Ears\n        for (side = [-1, 1])\n            translate([side * head_r * 0.5, 0, body_h/2 + neck_h + head_r * 1.7])\n                rotate([0, side * -25, 0])\n                    ear(side);\n\n        // Eyes\n        for (side = [-1, 1])\n            translate([side * head_r * 0.35, head_r * 0.55, body_h/2 + neck_h + head_r * 0.9])\n            rotate([0, 25, 0])\n                sphere(eye_r);\n\n        // Nose\n        translate([0, head_r * 0.7, body_h/2 + neck_h + head_r * 0.7])\n            sphere(nose_r);\n\n        // Legs\n        for (x = [-body_w/3, body_w/3])\n            for (z = [-body_l/3, body_l/3])\n                translate([x, -body_h/2 + leg_h/2, z])\n                    leg();\n\n        // Tail\n        translate([-body_w/2 - tail_r, 0, -body_l/2 + tail_r])\n            tail();\n    }\n}\n\nmodule ear(side) {\n    difference() {\n        // Outer ear cone\n        rotate([0, -15, 0])\n            cylinder(h = ear_h, r1 = ear_r, r2 = ear_r * 0.3, center = true);\n        // Inner ear hollow\n        translate([0, 0, -1])\n            cylinder(h = ear_h + 2, r1 = ear_r - ear_t, r2 = ear_r * 0.3 - ear_t, center = true);\n    }\n}\n\nmodule leg() {\n    union() {\n        cylinder(h = leg_h, r = leg_r);\n        // Paw\n        translate([0, -leg_h, 0])\n            sphere(r = paw_r);\n    }\n}\n\nmodule tail() {\n    // Simple curved tail using hulls of spheres\n    hull() {\n        sphere(r = tail_r);\n        translate([0, 0, -tail_seg]) sphere(r = tail_r);\n    }\n    hull() {\n        translate([0, 0, -tail_seg]) sphere(r = tail_r);\n        translate([0, -tail_seg * 0.7, -tail_seg * 2]) sphere(r = tail_r);\n    }\n    hull() {\n        translate([0, -tail_seg * 0.7, -tail_seg * 2]) sphere(r = tail_r);\n        translate([0, -tail_seg * 0.3, -tail_seg * 3]) sphere(r = tail_r);\n    }\n}\n\ncat();",
    "renders": true
  },
  {
    "vehicle": "powercat",
    "openscad_code": "// Powercat - Realistic Medium Complexity\n// Overall size ~70mm\n\n$fn = 32;\n\n// Hull thickness\nth = 1.5;\n\n// Overall scale factor\nsf = 1.0;\n\nmodule hull_half() {\n    // Main hull body\n    difference() {\n        hull() {\n            translate([0, 0, 5]) sphere([12, 7, 5]);\n            translate([30, 0, 0]) sphere([8, 6, 4]);\n            translate([55, 0, 0]) sphere([4, 4, 3]);\n        }\n        // Remove inner for hollow hull\n        scale([0.8, 0.7, 0.7]) hull() {\n            translate([0, 0, 5]) sphere([12, 7, 5]);\n            translate([30, 0, 0]) sphere([8, 6, 4]);\n            translate([55, 0, 0]) sphere([4, 4, 3]);\n        }\n    }\n}\n\nmodule deck() {\n    // Deck surface\n    translate([0, 0, 10]) {\n        difference() {\n            scale([1, 0.9, 0.15]) hull() {\n                translate([0, 0, 0]) sphere([12, 7, 5]);\n                translate([30, 0, 0]) sphere([8, 6, 4]);\n                translate([55, 0, 0]) sphere([4, 4, 3]);\n            }\n            // Hatch opening\n            translate([25, 0, 0]) cube([20, 8, 3], center=true);\n        }\n    }\n}\n\nmodule cabin() {\n    // Main cabin structure\n    translate([15, 0, 11]) {\n        difference() {\n            // Cabin body\n            scale([1.2, 0.8, 0.8]) cube([20, 14, 10], center=true);\n            // Hollow interior\n            translate([0, 0, 2]) scale([0.85, 0.85, 0.8]) cube([20, 14, 10], center=true);\n        }\n        // Cabin roof\n        translate([0, 0, 5.5]) scale([1.25, 0.85, 0.2]) cube([20, 14, 2], center=true);\n        // Windshield\n        translate([5, 0, 3]) rotate([60, 0, 0]) cube([15, 0.5, 8], center=true);\n    }\n}\n\nmodule engines() {\n    // Twin outboard engines\n    for (x = [45, 45]) {\n        translate([x, 8, 0]) {\n            difference() {\n                // Engine housing\n                cylinder(h=12, r1=3, r2=2.5);\n                // Exhaust outlet\n                translate([0, 0, -1]) cylinder(h=2, r=1.5);\n            }\n            // Engine mount bracket\n            translate([0, -3, 6]) cube([6, 1.5, 2], center=true);\n            // Propeller\n            translate([0, 0, -2]) rotate([0, 90, 0]) {\n                for (i = [0:120:359]) rotate([0, 0, i]) \n                    translate([0, 0, 0]) cube([0.5, 3, 0.2], center=true);\n            }\n        }\n    }\n}\n\nmodule rail() {\n    // Safety rail around deck\n    for (i = [0:10:50]) {\n        translate([i, 0, 11]) {\n            // Stanchions\n            cylinder(h=5, r=0.5);\n            // Top rail\n            if (i < 50)\n                translate([5, 0, 2.5]) cube([10, 0.5, 0.5], center=true);\n        }\n    }\n}\n\nmodule bow_eye() {\n    // Bow towing eye\n    translate([55, 0, 5]) rotate([90, 0, 0]) \n        difference() {\n            cylinder(h=2, r=1.5);\n            cylinder(h=3, r=0.75);\n        }\n}\n\n// Main assembly\nscale(sf) {\n    // Complete twin hull\n    union() {\n        hull_half();\n        mirror([0, 1, 0]) hull_half();\n    }\n    \n    deck();\n    cabin();\n    engines();\n    rail();\n    bow_eye();\n}",
    "renders": true
  },
  {
    "vehicle": "sailingcat",
    "openscad_code": "// Sailing Catamaran - Realistic Medium Complexity\n// Designed for 3D printing, approximately 80mm length\n\n$fn = 32;\nhull_thickness = 1.2;\nscale_factor = 0.8;\n\nmodule hull_section(r, h, taper=1) {\n    // Tapered hull section for realistic catamaran shape\n    difference() {\n        cylinder(h=h, r1=r, r2=r*taper, center=false);\n        translate([0, 0, -0.1]) \n            cylinder(h=h+0.2, r1=r-hull_thickness, r2=(r*taper)-hull_thickness, center=false);\n    }\n}\n\nmodule hull() {\n    // Main hull assembly\n    union() {\n        // Bow section\n        hull_section(r=7, h=15, taper=0.8);\n        \n        // Mid section\n        translate([0, 0, 15]) \n            hull_section(r=8, h=20, taper=1);\n            \n        // Stern section\n        translate([0, 0, 35]) \n            hull_section(r=6, h=15, taper=0.6);\n            \n        // Deck plate\n        translate([0, 0, 50])\n            difference() {\n                cube([30, 12, hull_thickness], center=true);\n                translate([0, 0, -hull_thickness/2])\n                    cube([28, 10, hull_thickness+0.2], center=true);\n            }\n    }\n}\n\nmodule crossbeam() {\n    // Structural beam connecting hulls\n    difference() {\n        cube([40, 4, 3], center=true);\n        translate([0, 0, -1.6])\n            cube([38, 3.5, 3.2], center=true);\n    }\n}\n\nmodule mast() {\n    // Main mast with tapered design\n    translate([5, 0, 3]) {\n        difference() {\n            cylinder(h=35, r1=1.5, r2=1, center=false);\n            translate([0, 0, -0.1])\n                cylinder(h=35.2, r1=1, r2=0.5, center=false);\n        }\n        \n        // Mast base reinforcement\n        cylinder(h=3, r=2.5, center=false);\n    }\n}\n\nmodule boom() {\n    // Horizontal boom for mainsail\n    translate([5, 0, 20])\n        rotate([90, 0, 0])\n            cylinder(h=20, r=0.8, center=false);\n}\n\nmodule sail() {\n    // Mainsail with realistic curved shape\n    translate([5, 0, 20])\n        rotate([0, 90, 0])\n            difference() {\n                // Main sail body\n                scale([1, 1, 0.3])\n                    sphere(r=15);\n                    \n                // Cutout for realistic shape\n                translate([10, 0, 0])\n                    scale([1.2, 1.2, 1])\n                        sphere(r=12);\n                        \n                // Flatten back\n                translate([-20, 0, -5])\n                    cube([40, 30, 10], center=true);\n            }\n}\n\nmodule trampoline() {\n    // Netting between hulls\n    for(i = [-15:5:15]) {\n        translate([i, 0, 2.5])\n            cube([0.8, 16, 0.5], center=true);\n    }\n    \n    for(i = [-6:2:6]) {\n        translate([0, i, 2.5])\n            cube([32, 0.8, 0.5], center=true);\n    }\n}\n\nmodule rudder() {\n    // Twin rudders at stern\n    translate([20, 8, 8])\n        rotate([0, 20, 0])\n            difference() {\n                cube([6, 0.8, 8], center=true);\n                translate([0, 0, -4.2])\n                    cube([5.5, 1.2, 8.4], center=true);\n            }\n            \n    translate([20, -8, 8])\n        rotate([0, 20, 0])\n            difference() {\n                cube([6, 0.8, 8], center=true);\n                translate([0, 0, -4.2])\n                    cube([5.5, 1.2, 8.4], center=true);\n            }\n}\n\n// Main assembly\nscale([scale_factor, scale_factor, scale_factor]) {\n    // Port hull\n    translate([-20, 0, 0])\n        hull();\n        \n    // Starboard hull\n    translate([20, 0, 0])\n        mirror([1, 0, 0])\n            hull();\n            \n    // Crossbeams\n    translate([0, 0, 2])\n        crossbeam();\n    translate([0, 0, 8])\n        crossbeam();\n        \n    // Trampoline netting\n    trampoline();\n    \n    // Mast and rigging\n    mast();\n    boom();\n    sail();\n    \n    // Rudders\n    rudder();\n}",
    "renders": true
  },
  {
    "vehicle": "racingcat",
    "openscad_code": "// Racing Cat - Realistic Style, Medium Complexity\n// 3D printable racing cat model for OpenSCAD\n\n// Overall dimensions: ~60mm long, ~35mm wide, ~25mm tall\n\nmodule racing_cat() {\n    // Body - main chassis\n    union() {\n        // Main body hull\n        translate([0, 0, 8]) {\n            hull() {\n                cube([40, 20, 12], center=true);\n                translate([0, 0, 6]) cube([35, 18, 6], center=true);\n            }\n        }\n        \n        // Front nose\n        translate([18, 0, 8]) {\n            rotate([0, 90, 0]) \n            cylinder(h=15, r1=10, r2=6, $fn=16);\n        }\n        \n        // Rear wing assembly\n        translate([-20, 0, 15]) {\n            difference() {\n                // Main wing\n                cube([8, 30, 2], center=true);\n                \n                // Wing supports cutout\n                translate([0, 10, 0]) cube([6, 4, 4], center=true);\n                translate([0, -10, 0]) cube([6, 4, 4], center=true);\n            }\n            \n            // Wing supports\n            translate([0, 10, -3]) cube([4, 3, 6], center=true);\n            translate([0, -10, -3]) cube([4, 3, 6], center=true);\n        }\n        \n        // Side pods\n        side_pod(10);\n        mirror([0,1,0]) side_pod(10);\n        \n        // Cockpit\n        translate([5, 0, 16]) {\n            difference() {\n                hull() {\n                    cube([16, 12, 8], center=true);\n                    translate([0, 0, 4]) cube([14, 10, 4], center=true);\n                }\n                \n                // Cockpit opening\n                translate([0, 0, 2]) cube([12, 8, 8], center=true);\n            }\n        }\n    }\n}\n\nmodule side_pod(x_pos) {\n    translate([x_pos, 12, 8]) {\n        difference() {\n            hull() {\n                cube([20, 8, 10], center=true);\n                translate([0, 2, 5]) cube([18, 6, 5], center=true);\n            }\n            \n            // Exhaust cutout\n            translate([-8, 4, 0]) cylinder(h=12, r=3, center=true);\n        }\n        \n        // Exhaust pipe\n        translate([-10, 4, 0]) rotate([0, 90, 0]) \n        cylinder(h=8, r=2.5, $fn=12);\n    }\n}\n\n// Wheels assembly\nmodule wheels() {\n    // Front wheels\n    wheel_assembly(15, 0);\n    wheel_assembly(15, 1);\n    \n    // Rear wheels\n    wheel_assembly(-15, 0);\n    wheel_assembly(-15, 1);\n}\n\nmodule wheel_assembly(x_pos, side) {\n    y_pos = side ? 12 : -12;\n    \n    // Suspension arm\n    translate([x_pos, y_pos, 5]) {\n        rotate([0, 0, side ? 15 : -15]) \n        cube([16, 3, 2], center=true);\n    }\n    \n    // Wheel\n    translate([x_pos, y_pos, 2]) {\n        difference() {\n            cylinder(h=8, r=6, $fn=20);\n            cylinder(h=8.5, r=2.5, $fn=12);\n        }\n        \n        // Tire tread pattern\n        for(i=[0:30:330]) {\n            rotate([0, 0, i]) \n            translate([5.5, 0, 4]) \n            cube([1, 2, 8], center=true);\n        }\n    }\n}\n\n// Generate the complete model\nunion() {\n    racing_cat();\n    wheels();\n}\n\n// Base for stability\ntranslate([0, 0, -1]) \ncube([50, 35, 2], center=true);",
    "renders": true
  },
  {
    "vehicle": "cruisingcat",
    "openscad_code": "// Cruising Catamaran - Medium Complexity\n// 3D printable model with realistic features\n\nhull_width = 22;\nhull_length = 100;\nhull_height = 12;\nbeam_width = 60;\nbeam_diameter = 4;\nmast_height = 70;\nmast_diameter = 3;\n\n$fn = 32;\n\n// Main assembly\nmodule cruisingcat() {\n    // Hulls\n    translate([-beam_width/2, 0, 0]) hull();\n    translate([beam_width/2, 0, 0]) mirror([1,0,0]) hull();\n    \n    // Cross beams\n    crossbeams();\n    \n    // Cabin\n    cabin();\n    \n    // Mast and rigging\n    mast_and_sails();\n}\n\n// Catamaran hull\nmodule hull() {\n    // Main hull body\n    difference() {\n        hull_shape();\n        \n        // Hollow interior\n        translate([0, 0, -hull_height/2 + 2])\n            scale([0.8, 0.8, 0.8])\n            hull_shape();\n    }\n    \n    // Deck\n    translate([0, 0, hull_height/2])\n        cube([hull_width*0.9, hull_length*0.9, 1.5], center=true);\n}\n\n// Basic hull shape\nmodule hull_shape() {\n    linear_extrude(height=hull_height, center=true, convexity=10)\n    hull() {\n        // Bow\n        translate([0, hull_length/2 - 5, 0])\n            circle(d=hull_width*0.8);\n        // Mid\n        translate([0, 0, 0])\n            circle(d=hull_width);\n        // Stern\n        translate([0, -hull_length/2 + 5, 0])\n            circle(d=hull_width*0.7);\n    }\n}\n\n// Cross beams connecting hulls\nmodule crossbeams() {\n    for(y = [-hull_length/3, 0, hull_length/3]) {\n        translate([0, y, hull_height/2 + beam_diameter/2])\n            rotate([90, 0, 0])\n            cylinder(h=beam_width, d=beam_diameter, center=true);\n    }\n}\n\n// Cabin structure\nmodule cabin() {\n    // Cabin base\n    translate([0, -hull_length/8, hull_height/2 + 3])\n        cube([beam_width*0.6, hull_length*0.3, 6], center=true);\n    \n    // Cabin roof\n    translate([0, -hull_length/8, hull_height/2 + 9])\n        cube([beam_width*0.7, hull_length*0.35, 1.5], center=true);\n    \n    // Windows\n    for(side = [-1, 1]) {\n        translate([side * beam_width*0.25, -hull_length/8, hull_height/2 + 5])\n            cube([3, hull_length*0.2, 2], center=true);\n    }\n}\n\n// Mast and sail assembly\nmodule mast_and_sails() {\n    // Mast\n    translate([0, hull_length/4, hull_height + 3])\n        cylinder(h=mast_height, d=mast_diameter);\n    \n    // Main sail\n    color(\"white\") {\n        translate([-5, hull_length/4 - 5, hull_height + 3])\n            rotate([0, -15, 0])\n            cube([0.5, mast_height*0.8, mast_height*0.4]);\n        \n        // Jib sail\n        translate([0, hull_length/2 - 5, hull_height/2 + 5])\n            rotate([0, 0, -25])\n            cube([0.5, mast_height*0.5, mast_height*0.3]);\n    }\n    \n    // Boom\n    translate([0, hull_length/4 + mast_height*0.4, hull_height + 3])\n        rotate([0, 0, 90])\n        cylinder(h=15, d=2);\n}\n\n// Render the complete catamaran\ncruisingcat();",
    "renders": true
  },
  {
    "vehicle": "lagoon",
    "openscad_code": "// Realistic Medium-Complexity Lagoon Model\n// Safe for 3D printing – no steep overhangs, 2 mm walls, 1 mm floor\n\n// Overall size: 100 mm × 85 mm × 12 mm\n$fn = 36;\n\n// Base plate with 1 mm floor thickness\ndifference() {\n    cube([100, 85, 2], center = true);               // thick base\n    translate([0, 0, 0.5])\n        cube([96, 81, 2], center = true);            // hollow cavity underneath\n}\n\n// Water surface (thin disc)\ncolor(\"skyblue\", 0.5)\n    translate([0, 0, 1.1])\n        cylinder(h = 0.8, r = 48, center = true);\n\n// Sandy beach ring\ndifference() {\n    cylinder(h = 1.2, r1 = 48, r2 = 48, center = true);\n    cylinder(h = 1.3, r1 = 42, r2 = 42, center = true);\n}\ntranslate([0, 0, 1.7]) children();\n\n// Outer rock wall\nmodule rock_wall(h, r_in, r_out, segments = 24) {\n    for (i = [0 : segments - 1]) {\n        angle = i * 360 / segments;\n        w = rnorm(2.5, 0.4);                         // random width\n        h_var = rnorm(1, 0.2);                       // height variation\n        translate([\n            cos(angle) * (r_in + w / 2),\n            sin(angle) * (r_in + w / 2),\n            1.2\n        ])\n            rotate([0, 0, angle])\n                cube([w, 3, h + h_var], center = true);\n    }\n}\n\nrock_wall(h = 7, r_in = 42, r_out = 48);\n\n// Small island in center\ntranslate([0, 0, 1.2])\n    cylinder(h = 3, r1 = 8, r2 = 10, center = false);\n\n// Palm tree on island\nmodule palm_tree() {\n    // Trunk\n    color(\"saddlebrown\")\n        for (i = [0 : 5])\n            translate([0, 0, 4.5 + i * 1.5])\n                rotate([0, 0, i * 15])\n                    cylinder(h = 1.5, r1 = 1.5 - i * 0.2, r2 = 1.4 - i * 0.2);\n\n    // Fronds\n    color(\"forestgreen\")\n        for (a = [0 : 60 : 300])\n            rotate([0, 0, a])\n                translate([0, 4, 10])\n                    rotate([120, 0, 0])\n                        cylinder(h = 12, r1 = 0.5, r2 = 0);\n}\n\ntranslate([0, 0, 4.2]) palm_tree();\n\n// Decorative rocks scattered on beach\nmodule pebble(pos, scale) {\n    translate(pos)\n        scale([scale, scale, scale])\n            sphere(r = 1.5);\n}\n\nfor (p = [[30, 20], [-35, 25], [20, -30], [-25, -20]])\n    pebble([p.x, p.y, 2.1], rnorm(1, 0.2));\n\n// Tiny boats\nmodule boat() {\n    hull();\n    mast();\n}\n\nmodule hull() {\n    color(\"brown\")\n        difference() {\n            cube([5, 2.5, 1], center = true);\n            translate([0, 0, 1])\n                cube([5.2, 2.7, 1], center = true);\n        }\n}\n\nmodule mast() {\n    color(\"white\")\n        translate([0, 0, 1])\n            cylinder(h = 4, r = 0.25);\n}\n\ntranslate([-20, 10, 1.4]) rotate([0, 0, 25]) boat();\ntranslate([25, -15, 1.4]) rotate([0, 0, -40]) boat();\n\n// Helper for small random variation\nfunction rnorm(mean, dev) = mean + (dev * (rands(-1, 1, 1)[0]));",
    "renders": true
  },
  {
    "vehicle": "sailboard",
    "openscad_code": "// Realistic Sailboard - Medium Complexity\n// 3D printable model with moderate detail\n\n$fn = 32;\n\n// Board dimensions\nboard_length = 85;\nboard_width = 25;\nboard_thickness = 4;\n\n// Mast dimensions\nmast_diameter = 2.5;\nmast_height = 45;\n\n// Boom dimensions\nboom_length = 35;\nboom_diameter = 1.5;\n\n// Fin dimensions\nfin_height = 12;\nfin_base = 8;\nfin_thickness = 2;\n\n// Sail thickness\nsail_thickness = 0.8;\n\n// Main board hull shape\nmodule board() {\n    // Main hull with rounded edges\n    hull() {\n        translate([0, 0, board_thickness/2])\n            scale([1, 0.4, 1])\n                sphere(d=board_width);\n        \n        translate([board_length/2 - 5, 0, 0])\n            scale([1, 0.4, 1])\n                sphere(d=board_width);\n    }\n    \n    // Taper the tail\n    difference() {\n        translate([0, 0, board_thickness/2])\n            cube([board_length, board_width, board_thickness], center=true);\n        \n        translate([board_length/2 + 5, 0, board_thickness/2])\n            rotate([0, 0, -15])\n                cube([30, board_width*1.5, board_thickness*2], center=true);\n    }\n}\n\n// Deck pad texture\nmodule deck_pad() {\n    for (x = [-board_length/2 + 5 : 5 : board_length/2 - 15]) {\n        for (y = [-board_width/2 + 3 : 3 : board_width/2 - 3]) {\n            translate([x, y, board_thickness + 0.1])\n                cube([2, 2, 0.2], center=true);\n        }\n    }\n}\n\n// Mast base and mast\nmodule mast_assembly() {\n    // Mast base\n    translate([board_length/4, 0, board_thickness])\n        cylinder(h=3, d1=8, d2=6);\n    \n    // Mast\n    translate([board_length/4, 0, board_thickness + 3])\n        cylinder(h=mast_height, d=mast_diameter);\n}\n\n// Boom assembly\nmodule boom_assembly() {\n    // Boom connection\n    translate([board_length/4, 0, board_thickness + 3 + mast_height/2])\n        rotate([90, 0, 0])\n            cylinder(h=6, d=4);\n    \n    // Main boom\n    translate([board_length/4 + boom_length/2, 0, board_thickness + 3 + mast_height/2])\n        rotate([90, 0, 0])\n            cylinder(h=boom_length, d=boom_diameter);\n    \n    // Boom front extension\n    translate([board_length/4 - 5, 0, board_thickness + 3 + mast_height/2])\n        rotate([90, 0, 0])\n            cylinder(h=5, d=boom_diameter);\n}\n\n// Sail with curves\nmodule sail() {\n    // Main sail body\n    translate([board_length/4 - 2, 0, board_thickness + 3 + mast_height/2])\n        rotate([0, 90, 0])\n            linear_extrude(height=sail_thickness)\n                polygon(points=[\n                    [0, -mast_height/2],\n                    [0, mast_height/2],\n                    [boom_length - 5, mast_height/2 - 5],\n                    [boom_length - 5, -mast_height/2 + 5]\n                ]);\n    \n    // Sail battens\n    for (z = [-15 : 10 : 15]) {\n        translate([board_length/4 + boom_length/2 - 10, 0, board_thickness + 3 + mast_height/2 + z])\n            cube([20, sail_thickness*2, 1], center=true);\n    }\n}\n\n// Fin box and fin\nmodule fin() {\n    // Fin box\n    translate([-board_length/2 + 5, 0, -board_thickness/2])\n        cube([8, 4, board_thickness], center=true);\n    \n    // Fin\n    translate([-board_length/2 + 5, 0, -board_thickness/2 - fin_height/2])\n        linear_extrude(height=fin_thickness)\n            polygon(points=[\n                [0, 0],\n                [-fin_base/2, 0],\n                [0, -fin_height],\n                [fin_base/2, 0]\n            ]);\n}\n\n// Footstraps\nmodule footstraps() {\n    // Rear straps\n    for (x = [-board_length/4, 0]) {\n        translate([x, 0, board_thickness + 1])\n            rotate([90, 0, 0])\n                cylinder(h=12, d=3);\n    }\n}\n\n// Main model assembly\nunion() {\n    // Board\n    board();\n    \n    // Deck details\n    deck_pad();\n    \n    // Mast and sail assembly\n    mast_assembly();\n    boom_assembly();\n    sail();\n    \n    // Fin\n    fin();\n    \n    // Footstraps\n    footstraps();\n}",
    "renders": true
  },
  {
    "vehicle": "kiteboard",
    "openscad_code": "// Kiteboard - Twin-tip style\n// Approx 90 mm long, printable in one piece\n\n// Main parameters\nboard_len = 90;\nboard_w_mid = 28;\nboard_w_tip = 22;\nboard_thick = 3.5;\nrocker = 4;                    // bottom curvature\nedge_bevel = 1.2;\nfin_h = 5;\nfin_base = 8;\nfin_thick = 2.5;\n\n// Overall board shape module\nmodule board_shape(thick) {\n    hull() {\n        // Tip 1\n        translate([-board_len/2, 0, 0])\n            scale([1, board_w_tip/board_w_mid, 1])\n                cylinder(h = thick, r = board_w_mid/2, $fn = 32);\n        // Mid section\n        translate([0, 0, 0])\n            cylinder(h = thick, r = board_w_mid/2, $fn = 32);\n        // Tip 2\n        translate([ board_len/2, 0, 0])\n            scale([1, board_w_tip/board_w_mid, 1])\n                cylinder(h = thick, r = board_w_mid/2, $fn = 32);\n    }\n}\n\n// Rocker bottom surface\nmodule rocker_bottom() {\n    difference() {\n        board_shape(board_thick);\n        // Cut curved bottom\n        translate([0, 0, -board_thick/2 - 0.1])\n            rotate([90, 0, 0])\n                cylinder(h = board_len + 2, r = (board_len*board_len)/(8*rocker), $fn = 64);\n    }\n}\n\n// Beveled edges\nmodule bevel_edges() {\n    difference() {\n        rocker_bottom();\n        // Top outside bevel\n        translate([0, 0, board_thick/2 + 0.1])\n            scale([1, 1, 0.5])\n                board_shape(board_thick + 0.5);\n        // Bottom inside bevel\n        translate([0, 0, -board_thick/2 - 0.1])\n            scale([1, 1, 0.5])\n                board_shape(board_thick + 0.5);\n    }\n}\n\n// Fin module\nmodule fin() {\n    difference() {\n        union() {\n            // Fin body\n            translate([-fin_base/2, 0, 0])\n                cube([fin_base, fin_thick, fin_h]);\n            // Tapered top\n            hull() {\n                translate([0, fin_thick/2, fin_h])\n                    cube([0.1, 0.1, 0.1]);\n                translate([0, fin_thick/2, fin_h + 1])\n                    cube([0.1, 0.1, 0.1]);\n                translate([-fin_base/2 + 1, fin_thick/2, fin_h])\n                    cube([0.1, 0.1, 0.1]);\n                translate([ fin_base/2 - 1, fin_thick/2, fin_h])\n                    cube([0.1, 0.1, 0.1]);\n            }\n        }\n        // Rounded front\n        translate([0, fin_thick/2 + 0.1, fin_h/2])\n            rotate([90, 0, 0])\n                cylinder(h = fin_base, r = fin_thick/2, $fn = 16);\n    }\n}\n\n// Insert holes for screws\nmodule insert_holes() {\n    for (x = [-board_len/2 + 8, board_len/2 - 8]) {\n        for (y = [-board_w_mid/2 + 4, board_w_mid/2 - 4]) {\n            translate([x, y, 0])\n                rotate([0, 90, 0])\n                    cylinder(h = board_thick + 1, r = 1.5, $fn = 16);\n        }\n    }\n}\n\n// Main assembly\ndifference() {\n    union() {\n        bevel_edges();\n        // Fins on bottom\n        for (x = [-board_len/2 + 10, board_len/2 - 10]) {\n            translate([x, -board_w_mid/2 + 5, -board_thick/2])\n                rotate([0, 0, 90])\n                    fin();\n            translate([x,  board_w_mid/2 - 5, -board_thick/2])\n                rotate([0, 0, -90])\n                    fin();\n        }\n    }\n    insert_holes();\n}",
    "renders": true
  },
  {
    "vehicle": "foilboard",
    "openscad_code": "// Foilboard - realistic style, medium complexity\n// Size: 95 mm length, designed for 3D printing\n\n// Board dimensions\nboard_length = 95;\nboard_width = 25;\nboard_thickness = 4;\nnose_taper = 0.7;\ntail_taper = 0.85;\n\n// Mast dimensions\nmast_length = 35;\nmast_width = 8;\nmast_thickness = 2;\n\n// Fuselage dimensions\nfuse_length = 45;\nfuse_diameter = 5;\n\n// Wing dimensions\nfront_wing_span = 35;\nfront_wing_chord = 12;\nfront_wing_thickness = 1.5;\nrear_wing_span = 20;\nrear_wing_chord = 8;\n\n// Wall thickness for 3D printing\nwall = 1.2;\n\nmodule board_profile() {\n    difference() {\n        // Main board shape with nose and tail rocker\n        hull() {\n            // Deck curve\n            for (i = [0:5]) {\n                translate([i * board_length/5, 0, sin(i * 180/5) * 2])\n                    sphere(d = board_width * lerp(1, nose_taper, i/5), $fn=20);\n            }\n        }\n        \n        // Hollow out center\n        translate([0, 0, -board_thickness/2 + wall])\n            cube([board_length - 10, board_width - wall*2, board_thickness], center=true);\n            \n        // Foot strap inserts (4 positions)\n        for (pos = [[-20, 8], [-20, -8], [10, 8], [10, -8]]) {\n            translate([pos[0], pos[1], board_thickness/2 - 1])\n                cylinder(h=2, d=4, $fn=16);\n        }\n    }\n}\n\nmodule mast() {\n    difference() {\n        // Tapered mast\n        linear_extrude(height=mast_length, scale=[0.8,1])\n            square([mast_width, mast_thickness], center=true);\n            \n        // Cable channel\n        translate([0, 0, -1])\n            cylinder(h=mast_length+2, d=3, center=true);\n    }\n}\n\nmodule wing(span, chord, thickness, sweep=5) {\n    difference() {\n        // Main wing shape with dihedral\n        union() {\n            for (i = [-1:1]) {\n                translate([0, i * span/3, abs(i) * 2])\n                    rotate([0, sweep * i, 0])\n                        cube([chord, span/3 - 2, thickness], center=true);\n            }\n        }\n        \n        // Wing tip cutouts\n        translate([chord/2 - 3, span/2, 0])\n            rotate([0, 0, 45])\n                cube([5, 5, thickness+1], center=true);\n        translate([chord/2 - 3, -span/2, 0])\n            rotate([0, 0, -45])\n                cube([5, 5, thickness+1], center=true);\n    }\n}\n\nmodule fuselage() {\n    difference() {\n        // Tapered fuselage\n        rotate([90, 0, 0])\n            cylinder(h=fuse_length, d1=fuse_diameter, d2=fuse_diameter*0.7, $fn=20);\n            \n        // Mounting holes\n        translate([0, 0, 5])\n            cylinder(h=10, d=3, $fn=12);\n        translate([0, 0, fuse_length-15])\n            cylinder(h=10, d=3, $fn=12);\n    }\n}\n\n// Main assembly\nunion() {\n    // Board\n    translate([0, 0, mast_length + board_thickness/2])\n        board_profile();\n    \n    // Mast to board connection plate\n    translate([0, 0, mast_length])\n        cube([mast_width + 6, mast_thickness + 6, 2], center=true);\n    \n    // Mast\n    mast();\n    \n    // Fuselage\n    translate([0, 0, mast_length/2])\n        fuselage();\n    \n    // Front wing\n    translate([0, 0, mast_length/2 - 5])\n        rotate([0, 90, 0])\n            wing(front_wing_span, front_wing_chord, front_wing_thickness);\n    \n    // Rear stabilizer\n    translate([0, 0, mast_length/2 - fuse_length + 5])\n        rotate([0, 90, 0])\n            wing(rear_wing_span, rear_wing_chord, front_wing_thickness * 0.7, sweep=0);\n}\n\n// Helper function for linear interpolation\nfunction lerp(a, b, t) = a + (b - a) * t;",
    "renders": true
  },
  {
    "vehicle": "wakeboard",
    "openscad_code": "// Wakeboard - Realistic Medium Complexity\n// Scaled to ~80mm length for 3D printing\n\n$fn = 32;\n\n// Main parameters\nboard_length = 80;\nboard_width = 25;\nboard_thickness = 2.5;\ntip_length = 15;\nrocker_height = 3;\n\n// Fin parameters\nfin_count = 4;\nfin_height = 4;\nfin_base = 6;\nfin_thickness = 1.5;\nfin_spacing = 12;\n\n// Binding insert parameters\ninsert_diameter = 3;\ninsert_height = 1.5;\ninsert_spacing = 8;\n\n// Binding base parameters\nbinding_length = 15;\nbinding_width = 10;\nbinding_height = 5;\nstrap_width = 2;\nstrap_gap = 3;\n\n// Module for board profile with rocker and tapered tips\nmodule board_profile() {\n    hull() {\n        // Center section\n        translate([0, 0, 0]) cube([board_length - 2*tip_length, board_width, board_thickness], center=true);\n        \n        // Front tip\n        translate([board_length/2 - tip_length/2, 0, -rocker_height/2])\n            scale([1, 0.6, 1])\n            cube([tip_length, board_width, board_thickness], center=true);\n        \n        // Rear tip\n        translate([-board_length/2 + tip_length/2, 0, -rocker_height/2])\n            scale([1, 0.6, 1])\n            cube([tip_length, board_width, board_thickness], center=true);\n    }\n}\n\n// Module for fins\nmodule create_fins() {\n    for (i = [1:fin_count/2]) {\n        // Right side fins\n        translate([fin_spacing * i - board_length/4, board_width/2, -board_thickness/2])\n            rotate([0, 0, 15])\n            linear_extrude(height=fin_height, scale=0.5)\n            polygon(points=[[0,0], [fin_base,0], [fin_base/2,fin_height]]);\n            \n        // Left side fins\n        translate([fin_spacing * i - board_length/4, -board_width/2, -board_thickness/2])\n            rotate([0, 0, -15])\n            mirror([1,0,0])\n            linear_extrude(height=fin_height, scale=0.5)\n            polygon(points=[[0,0], [fin_base,0], [fin_base/2,fin_height]]);\n    }\n}\n\n// Module for binding inserts\nmodule binding_inserts() {\n    // Front binding inserts\n    for (x = [-1, 1]) {\n        for (y = [-1, 1]) {\n            translate([x * insert_spacing/2, y * insert_spacing/2, board_thickness/2 + insert_height/2])\n                cylinder(h=insert_height, d=insert_diameter);\n        }\n    }\n    \n    // Rear binding inserts\n    for (x = [-1, 1]) {\n        for (y = [-1, 1]) {\n            translate([x * insert_spacing/2 - 5, y * insert_spacing/2, board_thickness/2 + insert_height/2])\n                cylinder(h=insert_height, d=insert_diameter);\n        }\n    }\n}\n\n// Module for front binding\nmodule front_binding() {\n    // Binding base\n    translate([2.5, 0, board_thickness/2 + binding_height/2])\n        cube([binding_length, binding_width, binding_height], center=true);\n    \n    // Toe strap\n    translate([2.5, 0, board_thickness/2 + binding_height])\n        difference() {\n            cube([binding_length - 4, strap_width, strap_gap], center=true);\n            translate([0, 0, -strap_gap/2])\n                cube([binding_length - 2, strap_width + 2, strap_gap + 1], center=true);\n        }\n    \n    // Heel strap\n    translate([2.5, 0, board_thickness/2 + binding_height + strap_gap])\n        difference() {\n            cube([binding_length - 4, strap_width, strap_gap], center=true);\n            translate([0, 0, -strap_gap/2])\n                cube([binding_length - 2, strap_width + 2, strap_gap + 1], center=true);\n        }\n}\n\n// Module for rear binding\nmodule rear_binding() {\n    // Mirror front binding for rear\n    mirror([1,0,0])\n    translate([2.5, 0, 0])\n    front_binding();\n}\n\n// Main assembly\nunion() {\n    // Main board\n    difference() {\n        board_profile();\n        \n        // Add slight concave\n        translate([0, 0, board_thickness/2])\n            cube([board_length * 0.8, board_width * 0.7, board_thickness * 0.3], center=true);\n    }\n    \n    // Add fins\n    create_fins();\n    \n    // Add binding inserts\n    binding_inserts();\n    \n    // Add bindings\n    front_binding();\n    rear_binding();\n}",
    "renders": true
  },
  {
    "vehicle": "wakesurf",
    "openscad_code": "// Wakesurf Board - Realistic Medium Complexity\n// Approx 90mm x 30mm x 12mm\n\n// Board Parameters\nboard_length = 90;\nboard_width = 30;\nboard_thickness = 4;\nnose_length = 15;\ntail_width = 22;\n\n// Fin Parameters\nfin_height = 8;\nfin_base = 10;\nfin_thickness = 2;\n\n// Traction Pad Parameters\npad_length = 25;\npad_width = 20;\npad_thickness = 0.5;\ngroove_width = 1;\ngroove_depth = 0.2;\n\n// Rocker Parameters\nrocker_height = 3;\n\nmodule board_shape() {\n    // Main deck with rocker\n    hull_points = [\n        [-board_length/2, -board_width/2, 0],\n        [board_length/2-nose_length, -board_width/2, 0],\n        [board_length/2, -tail_width/2, 0],\n        [board_length/2, tail_width/2, 0],\n        [board_length/2-nose_length, board_width/2, 0],\n        [-board_length/2, board_width/2, 0]\n    ];\n    \n    // Create 3D hull shape\n    linear_extrude(height=board_thickness, convexity=10)\n    polygon(points=hull_points);\n}\n\nmodule rocker_curve() {\n    // Add rocker to bottom\n    translate([0, 0, -board_thickness/2])\n    difference() {\n        cube([board_length, board_width, rocker_height], center=true);\n        \n        // Create rocker curve\n        for(i = [0:5]) {\n            translate([i*20 - board_length/2, 0, -rocker_height/2])\n            rotate([0, 5, 0])\n            cube([20, board_width+2, rocker_height*2], center=true);\n        }\n    }\n}\n\nmodule board_fins() {\n    // Twin fin setup\n    translate([board_length/2-15, -board_width/3, -board_thickness/2-fin_height/2])\n    rotate([90, 0, 0])\n    linear_extrude(height=fin_thickness, convexity=10)\n    polygon(points=[\n        [0, 0],\n        [fin_base/2, 0],\n        [0, fin_height],\n        [-fin_base/2, 0]\n    ]);\n    \n    mirror([0, 1, 0])\n    children();\n}\n\nmodule traction_pad() {\n    // EVA foam pad with grooves\n    translate([-board_length/2+10, 0, board_thickness/2])\n    difference() {\n        // Base pad\n        cube([pad_length, pad_width, pad_thickness], center=true);\n        \n        // Drainage grooves\n        for(i = [-pad_width/2+3:3:pad_width/2-3]) {\n            translate([0, i, -groove_depth/2])\n            cube([pad_length-2, groove_width, groove_depth], center=true);\n        }\n        \n        // Diamond pattern\n        for(x = [-pad_length/2+3:3:pad_length/2-3]) {\n            for(y = [-pad_width/2+3:3:pad_width/2-3]) {\n                translate([x, y, -pad_thickness/2])\n                cube([1.5, 1.5, pad_thickness], center=true);\n            }\n        }\n    }\n}\n\nmodule fin_boxes() {\n    // Fin box inserts for 3D printing\n    translate([board_length/2-15, -board_width/3, -board_thickness/2-1])\n    cube([fin_base+2, fin_thickness+2, 2], center=true);\n    \n    translate([board_length/2-15, board_width/3, -board_thickness/2-1])\n    cube([fin_base+2, fin_thickness+2, 2], center=true);\n}\n\n// Main assembly\nunion() {\n    // Board shape with rocker\n    union() {\n        board_shape();\n        translate([0, 0, -board_thickness/2])\n        rocker_curve();\n    }\n    \n    // Add slight rounding on edges\n    translate([0, 0, board_thickness/2])\n    minkowski() {\n        children();\n        sphere(0.5, $fn=16);\n    }\n    \n    // Fins\n    board_fins();\n    \n    // Traction pad\n    traction_pad();\n    \n    // Fin boxes (hidden in final print)\n    %fin_boxes();\n}",
    "renders": true
  },
  {
    "vehicle": "waterski",
    "openscad_code": "// Waterski - realistic style, medium complexity\n// Total length ~90 mm, printable with no overhangs\n\n// Main parameters\nlength = 90;\nwidth = 22;\nthickness = 5;\ntip_length = 25;\nfin_height = 10;\nfin_base = 12;\nfin_thickness = 2.5;\nbinding_width = 18;\nbinding_height = 8;\nscrew_diameter = 1.5;\nwall = 1.5;\n\n// Main ski body\nmodule ski_body() {\n    // Tapered tip\n    hull() {\n        translate([length/2 - tip_length/2, 0, 0])\n            cube([tip_length, width, thickness], center=true);\n        translate([length/2 - tip_length, 0, 0])\n            scale([0.2, 0.4, 1])\n                sphere(thickness/2);\n    }\n    \n    // Main deck\n    difference() {\n        // Full block\n        cube([length - tip_length, width, thickness], center=true);\n        \n        // Rounded edges front/back\n        translate([-(length - tip_length)/2, 0, thickness/2])\n            cylinder(h=width+1, r=thickness/2, center=true, $fn=20);\n        translate([(length - tip_length)/2, 0, thickness/2])\n            cylinder(h=width+1, r=thickness/2, center=true, $fn=20);\n    }\n}\n\n// Fin\nmodule fin() {\n    translate([-(length/2 - 15), 0, thickness/2]) {\n        // Fin base\n        cube([fin_base, fin_thickness, fin_height-wall], center=true);\n        \n        // Angled fin blade\n        translate([fin_base/2 - 2, 0, fin_height/2]) {\n            rotate([0, 15, 0])\n                cube([fin_base*1.2, fin_thickness*0.8, fin_height*0.9], center=true);\n        }\n    }\n}\n\n// Binding inserts (simplified)\nmodule bindings() {\n    // Front binding outline\n    translate([length/4, 0, thickness/2 + wall/2]) {\n        difference() {\n            // Base\n            cube([binding_width*0.9, binding_width*0.7, binding_height], center=true);\n            \n            // Hollow interior\n            cube([binding_width*0.9-wall*2, binding_width*0.7-wall*2, binding_height-wall], center=true);\n        }\n        \n        // Screw holes\n        for(x = [-1, 1])\n            for(y = [-1, 1])\n                translate([x*5, y*5, binding_height/2])\n                    rotate([90,0,0])\n                        cylinder(h=wall+1, r=screw_diameter/2, center=true, $fn=8);\n    }\n    \n    // Rear binding outline\n    translate([-length/5, 0, thickness/2 + wall/2]) {\n        difference() {\n            // Base\n            cube([binding_width, binding_width*0.8, binding_height], center=true);\n            \n            // Hollow interior\n            cube([binding_width-wall*2, binding_width*0.8-wall*2, binding_height-wall], center=true);\n        }\n        \n        // Screw holes\n        for(x = [-1, 1])\n            for(y = [-1, 1])\n                translate([x*6, y*6, binding_height/2])\n                    rotate([90,0,0])\n                        cylinder(h=wall+1, r=screw_diameter/2, center=true, $fn=8);\n    }\n}\n\n// Traction pads texture\nmodule traction_pads() {\n    // Front pad\n    translate([length/4, 0, thickness/2 + binding_height + wall]) {\n        for(x = [-8:2:8])\n            for(y = [-7:2:7])\n                translate([x, y, -1])\n                    cube([1.5, 1.5, 2], center=true);\n    }\n    \n    // Rear pad\n    translate([-length/5, 0, thickness/2 + binding_height + wall]) {\n        for(x = [-9:2:9])\n            for(y = [-8:2:8])\n                translate([x, y, -1])\n                    cube([1.5, 1.5, 2], center=true);\n    }\n}\n\n// Assemble waterski\nunion() {\n    // Main ski\n    ski_body();\n    \n    // Fin\n    fin();\n    \n    // Bindings\n    bindings();\n    \n    // Traction pads\n    traction_pads();\n}",
    "renders": true
  },
  {
    "vehicle": "parasail",
    "openscad_code": "// Parasail 3D printable model – realistic style, medium complexity\n// Overall bounding box ≈ 75 × 75 × 70 mm\n\n// --------------- PARAMETERS ----------------\n$fn = 36;\ncanopy_thick = 1.2;      // wall thickness for printing\nline_diam = 1.8;         // line diameter\nline_len = 30;           // bridle line length\nh_bar_diam = 4;\nh_bar_len = 35;\npilot_size = 6;\n\n// --------------- MAIN ASSEMBLY -------------\nunion() {\n    canopy();\n    translate([0, 0, -line_len-2])    // move rig below canopy\n        rig();\n}\n\n// --------------- CANOPY --------------------\nmodule canopy() {\n    // main wing\n    difference() {\n        union() {\n            // central aerofoil section\n            scale([1, 0.25, 0.2])\n                sphere(d = 70);\n            // wingtips (ellipsoids)\n            translate([±30, 0, 0])\n                scale([0.6, 0.25, 0.15])\n                    sphere(d = 30);\n        }\n        // hollow it out for printing\n        scale([0.9, 0.9, 0.9])\n            translate([0, 0, -1])\n                scale([1, 0.25, 0.2])\n                    sphere(d = 70);\n    }\n\n    // vertical stabilizer fins on top\n    for (x = [-20, 0, 20]) {\n        translate([x, 0, 8])\n            rotate([90, 0, 0])\n                linear_extrude(height = 10, center = true)\n                    offset(delta = -0.5)\n                        circle(d = 10);\n    }\n}\n\n// --------------- BRIDLE LINES --------------\nmodule line(x, y) {\n    translate([x, y, 0])\n        cylinder(h = line_len, d = line_diam);\n}\n\n// --------------- RIG -----------------------\nmodule rig() {\n    // harness / spreader bar\n    color(\"silver\")\n    rotate([90, 0, 0])\n        cylinder(h = h_bar_len, d = h_bar_diam, center = true);\n\n    // pilot torso (simplified)\n    color(\"red\")\n    translate([0, 0, -pilot_size/2-2])\n        sphere(d = pilot_size);\n\n    // 6-point bridle\n    color(\"black\")\n    union() {\n        // front lines\n        line(-15, 5);\n        line( 15, 5);\n        // mid lines\n        line(-25, 0);\n        line( 25, 0);\n        // rear lines\n        line(-15, -5);\n        line( 15, -5);\n    }\n\n    // carabiners (simple rings)\n    for (x = [-h_bar_len/2+2, h_bar_len/2-2]) {\n        translate([x, 0, 0])\n            rotate([90, 0, 0])\n                difference() {\n                    cylinder(h = 3, d = 4, center = true);\n                    cylinder(h = 4, d = 2, center = true);\n                }\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "bananaboat",
    "openscad_code": "// Banana Boat - Realistic Medium Complexity\n// 3D printable model with hull, seats, and oars\n\n$fn = 36;\nhull_thickness = 2;\nseat_thickness = 2;\noar_diameter = 4;\noar_length = 60;\n\nmodule banana_hull() {\n    // Main curved hull shape\n    difference() {\n        // Outer hull - banana shape\n        union() {\n            hull() {\n                // Front curved section\n                translate([0, 0, 5]) scale([1, 0.3, 0.4]) sphere(r=20);\n                // Rear curved section  \n                translate([-35, 0, 5]) scale([1.2, 0.3, 0.4]) sphere(r=15);\n            }\n            // Connect with smooth hull\n            hull() {\n                translate([-5, 0, 5]) sphere(r=18);\n                translate([-30, 0, 5]) sphere(r=16);\n            }\n        }\n        \n        // Hollow out interior\n        translate([0, 0, 2]) scale([0.85, 0.75, 0.7]) \n            cube([70, 25, 15], center=true);\n        \n        // Trim bottom flat\n        translate([0, 0, -5]) cube([100, 50, 10], center=true);\n    }\n    \n    // Add rim around top\n    difference() {\n        translate([0, 0, 9]) cube([65, 22, hull_thickness], center=true);\n        translate([0, 0, 9]) cube([60, 18, hull_thickness+1], center=true);\n    }\n}\n\nmodule seat(position) {\n    // Bench seat with supports\n    translate([position, 0, 8]) {\n        // Seat top\n        cube([15, 18, seat_thickness], center=true);\n        \n        // Support legs\n        translate([-5, 0, -3]) cube([3, 16, 6], center=true);\n        translate([5, 0, -3]) cube([3, 16, 6], center=true);\n    }\n}\n\nmodule oar() {\n    // Realistic oar with blade and handle\n    union() {\n        // Handle grip\n        translate([0, 0, 0]) cylinder(h=15, r=oar_diameter/2);\n        \n        // Shaft\n        translate([0, 0, -15]) cylinder(h=oar_length-20, r=oar_diameter/3);\n        \n        // Blade\n        translate([0, 0, -oar_length+5]) \n            scale([0.3, 3, 1]) cylinder(h=15, r=oar_diameter);\n    }\n}\n\n// Main assembly\ntranslate([0, 0, 0]) {\n    // Hull\n    banana_hull();\n    \n    // Seats - positioned along hull curve\n    for(i = [-25, -10, 5]) {\n        seat(i);\n    }\n}\n\n// Oars - positioned alongside boat\ntranslate([-40, 20, 5]) rotate([90, 0, 90]) oar();\ntranslate([-40, -20, 5]) rotate([90, 0, 90]) oar();",
    "renders": true
  },
  {
    "vehicle": "tubing",
    "openscad_code": "// Realistic medium-complexity tubing: 3-way Y connector with barbed ends\n// Overall length ~70 mm, fits on most FDM printers\n\nwall = 1.6;           // 2 perimeters on 0.4 mm nozzle\nbarb_d = 7;           // outer barb diameter\nbarb_l = 5;           // length of one barb ring\ntube_id = 4.5;        // inner diameter\ntube_od = tube_id + 2*wall;\n\n// number of barbs on each leg\nbarbs = 4;\n\nmodule barb() {\n    // one ring-shaped barb\n    difference() {\n        cylinder(d = barb_d, h = barb_l, $fn = 40);\n        cylinder(d = tube_od, h = barb_l + 0.1, $fn = 40);\n    }\n}\n\nmodule tube_segment(length) {\n    // basic tube with inner bore\n    difference() {\n        cylinder(d = tube_od, h = length, $fn = 40);\n        translate([0, 0, -0.05])\n            cylinder(d = tube_id, h = length + 0.1, $fn = 40);\n    }\n}\n\nmodule barbed_leg(len) {\n    // leg with barbs at the end\n    union() {\n        tube_segment(len);\n        for (i = [1 : barbs])\n            translate([0, 0, len - i*barb_l])\n                barb();\n    }\n}\n\nmodule y_body() {\n    // central Y junction\n    h = 15;\n    difference() {\n        sphere(d = 1.6*tube_od, $fn = 60);\n        // cut inner cavity\n        sphere(d = tube_id, $fn = 60);\n        \n        // remove bottom half\n        translate([0, 0, -h/2])\n            cube([tube_od*2, tube_od*2, h], center = true);\n    }\n}\n\n// assemble the three legs\nunion() {\n    // vertical stem\n    translate([0, 0, 10])\n        rotate([0, 180, 0])\n            barbed_leg(25);\n    \n    // left branch (30° down)\n    rotate([30, 0, -45])\n        barbed_leg(22);\n    \n    // right branch (30° down)\n    rotate([30, 0, 45])\n        barbed_leg(22);\n    \n    // central junction\n    y_body();\n}",
    "renders": true
  },
  {
    "vehicle": "towable",
    "openscad_code": "// Towable trailer - medium complexity realistic style\n// Overall dimensions: ~80mm long, 30mm wide, 35mm high\n\n$fn=32;\n\n// Main parameters\ntrailer_length = 75;\ntrailer_width = 28;\ntrailer_height = 20;\nwall_thickness = 2;\n\n// Wheel parameters\nwheel_radius = 8;\nwheel_width = 4;\naxle_offset = -15;\n\n// Hitch parameters\nhitch_length = 12;\nhitch_diameter = 4;\n\nmodule trailer_body() {\n    difference() {\n        // Main box\n        cube([trailer_length, trailer_width, trailer_height], center=true);\n        \n        // Hollow inside\n        translate([0, 0, wall_thickness/2])\n        cube([trailer_length-wall_thickness*2, trailer_width-wall_thickness*2, trailer_height-wall_thickness], center=true);\n        \n        // Front angled cut\n        translate([trailer_length/2-10, 0, -5])\n        rotate([0, 20, 0])\n        cube([20, trailer_width+2, trailer_height+10], center=true);\n        \n        // Wheel wells\n        translate([axle_offset, trailer_width/2+2, -trailer_height/2])\n        cylinder(r=wheel_radius+1, h=trailer_height+2, center=true);\n        translate([axle_offset, -trailer_width/2-2, -trailer_height/2])\n        cylinder(r=wheel_radius+1, h=trailer_height+2, center=true);\n    }\n    \n    // Bottom reinforcement\n    translate([0, 0, -trailer_height/2+wall_thickness/2])\n    cube([trailer_length-wall_thickness*4, trailer_width-wall_thickness*2, wall_thickness], center=true);\n}\n\nmodule fenders() {\n    for(side=[-1, 1]) {\n        translate([axle_offset, side*(trailer_width/2+wheel_width/2+1), -trailer_height/2+wheel_radius+2])\n        difference() {\n            cube([wheel_width+4, wheel_width+2, 4], center=true);\n            translate([0, 0, -2])\n            cylinder(r=wheel_radius+2, h=6, center=true);\n        }\n    }\n}\n\nmodule wheels() {\n    for(side=[-1, 1]) {\n        translate([axle_offset, side*(trailer_width/2+wheel_width/2), -trailer_height/2+wheel_radius])\n        rotate([90, 0, 0])\n        difference() {\n            // Tire\n            cylinder(r=wheel_radius, h=wheel_width, center=true);\n            \n            // Rim\n            translate([0, 0, -wheel_width/2-1])\n            cylinder(r=wheel_radius-2, h=wheel_width+2, center=true);\n            \n            // Hub\n            color(\"gray\")\n            translate([0, 0, 0])\n            cylinder(r=2, h=wheel_width+1, center=true);\n        }\n    }\n}\n\nmodule hitch_assembly() {\n    // Main hitch tube\n    translate([trailer_length/2+hitch_length/2, 0, 0])\n    rotate([0, 90, 0])\n    cylinder(r=hitch_diameter/2, h=hitch_length, center=true);\n    \n    // Hitch coupler\n    translate([trailer_length/2+hitch_length, 0, 0])\n    sphere(r=hitch_diameter/2+1);\n    \n    // Support gussets\n    for(side=[-1, 1]) {\n        translate([trailer_length/2-5, side*hitch_diameter/2, 0])\n        rotate([0, 0, side*30])\n        cube([10, wall_thickness, trailer_height/2], center=true);\n    }\n}\n\nmodule trailer_details() {\n    // Side rails\n    for(side=[-1, 1]) {\n        translate([0, side*(trailer_width/2-wall_thickness/2), 0])\n        cube([trailer_length-wall_thickness*2, wall_thickness, trailer_height-wall_thickness*2], center=true);\n    }\n    \n    // Corner posts\n    for(x=[-1, 1])\n    for(y=[-1, 1])\n    translate([x*(trailer_length/2-wall_thickness), y*(trailer_width/2-wall_thickness), 0])\n    cube([wall_thickness*2, wall_thickness*2, trailer_height-wall_thickness], center=true);\n    \n    // Tail lights\n    color(\"red\")\n    for(side=[-1, 1]) {\n        translate([-trailer_length/2+2, side*(trailer_width/2-3), 0])\n        cube([2, 4, 3], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    trailer_body();\n    fenders();\n    wheels();\n    hitch_assembly();\n    trailer_details();\n}",
    "renders": true
  },
  {
    "vehicle": "inflatable",
    "openscad_code": "// Inflatable Pool Ring (realistic style, medium complexity)\n// Dimensions: ~80mm diameter, 3mm wall thickness\n\n$fn = 50;  // Smooth curves for 3D printing\n\n// Main parameters\nring_outer = 40;      // Outer radius\nring_inner = 30;      // Inner radius\nring_height = 20;     // Height of ring\nwall = 1.5;           // Wall thickness\nvalve_length = 8;\nvalve_radius = 4;\n\n// Main ring body\nmodule ring_body() {\n    difference() {\n        // Outer cylinder\n        cylinder(h=ring_height, r=ring_outer, center=true);\n        \n        // Hollow center\n        cylinder(h=ring_height+1, r=ring_inner, center=true);\n    }\n}\n\n// Top curved surface\nmodule top_surface() {\n    translate([0, 0, ring_height/2])\n    scale([1, 1, 0.5])\n    sphere(r=ring_outer);\n}\n\n// Bottom curved surface\nmodule bottom_surface() {\n    translate([0, 0, -ring_height/2])\n    scale([1, 1, 0.5])\n    sphere(r=ring_outer);\n}\n\n// Valve stem\nmodule valve() {\n    translate([-ring_outer-2, 0, 0])\n    rotate([0, 90, 0])\n    difference() {\n        // Valve tube\n        cylinder(h=valve_length, r=valve_radius);\n        \n        // Valve hole\n        cylinder(h=valve_length+1, r=valve_radius-1, center=true);\n    }\n}\n\n// Valve cap\nmodule valve_cap() {\n    translate([-ring_outer-2-valve_length, 0, 0])\n    rotate([0, 90, 0])\n    cylinder(h=3, r=valve_radius+1);\n}\n\n// Air chambers\nmodule chambers() {\n    for(i = [0:30:330]) {\n        rotate([0, 0, i])\n        translate([ring_outer-wall/2, 0, 0])\n        cube([wall, 2, ring_height-2], center=true);\n    }\n}\n\n// Handles\nmodule handles() {\n    // Two handles opposite each other\n    for(pos = [[0, ring_inner-3, 0], [0, -(ring_inner-3), 0]]) {\n        translate(pos)\n        rotate([90, 0, 0])\n        difference() {\n            // Handle arch\n            cylinder(h=6, r1=3, r2=3);\n            \n            // Handle opening\n            translate([0, 0, -1])\n            cylinder(h=8, r1=2, r2=2);\n        }\n    }\n}\n\n// Seams\nmodule seams() {\n    translate([0, 0, 0])\n    difference() {\n        sphere(r=ring_outer+0.2);\n        sphere(r=ring_outer-0.2);\n    }\n}\n\n// Assembly\nunion() {\n    // Main ring structure\n    difference() {\n        union() {\n            // Combine curved surfaces with main body\n            intersection() {\n                ring_body();\n                top_surface();\n            }\n            \n            intersection() {\n                ring_body();\n                bottom_surface();\n            }\n        }\n        \n        // Remove excess\n        translate([0, 0, ring_height/2+1])\n        cube([ring_outer*3, ring_outer*3, 2], center=true);\n        \n        translate([0, 0, -ring_height/2-1])\n        cube([ring_outer*3, ring_outer*3, 2], center=true);\n    }\n    \n    // Valve assembly\n    valve();\n    valve_cap();\n    \n    // Handles\n    handles();\n    \n    // Subtle seams\n    color(\"gray\")\n    for(z = [-ring_height/3, 0, ring_height/3]) {\n        translate([0, 0, z])\n        scale([1, 1, 0.1])\n        seams();\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "zodiac",
    "openscad_code": "// Zodiac Dial - Realistic Style, Medium Complexity\n// Features 12 zodiac symbols arranged in a circular dial with month indicators\n// Wall thickness 2mm, designed for FDM printing\n// Overall diameter 80mm, height 10mm\n\n$fn = 50;  // Smooth curves for realistic look\n\n// Main parameters\ndial_diameter = 80;\ndial_height = 10;\nbase_thickness = 2;\nsymbol_height = 3;\nwall_thickness = 2;\n\n// Base disc with raised rim\nmodule dial_base() {\n    difference() {\n        // Main disc\n        cylinder(h = dial_height, r = dial_diameter/2, center = true);\n        \n        // Central hole for mounting\n        cylinder(h = dial_height + 1, r = 3, center = true);\n        \n        // Recess for symbols\n        translate([0, 0, (dial_height - symbol_height)/2])\n            cylinder(h = symbol_height + 1, r = dial_diameter/2 - wall_thickness, center = true);\n    }\n}\n\n// Zodiac symbols - simplified but recognizable\nmodule aries() {\n    union() {\n        // Ram horns\n        translate([-4, -2, 0])\n            rotate([0, 0, 30])\n            cylinder(h = symbol_height, r = 2, center = true);\n        translate([4, -2, 0])\n            rotate([0, 0, -30])\n            cylinder(h = symbol_height, r = 2, center = true);\n        // Head\n        translate([0, 2, 0])\n            sphere(r = 3);\n    }\n}\n\nmodule taurus() {\n    union() {\n        // Bull head\n        translate([0, 0, symbol_height/2])\n            cube([8, 6, symbol_height], center = true);\n        // Horns\n        translate([-3, 2, symbol_height/2])\n            rotate([0, 0, -45])\n            cylinder(h = 4, r1 = 1.5, r2 = 0.5);\n        translate([3, 2, symbol_height/2])\n            rotate([0, 0, 45])\n            cylinder(h = 4, r1 = 1.5, r2 = 0.5);\n    }\n}\n\nmodule gemini() {\n    // Twin columns\n    for(x = [-3, 3]) {\n        translate([x, 0, symbol_height/2])\n            cube([2, 8, symbol_height], center = true);\n    }\n}\n\nmodule cancer() {\n    // Crab claws\n    for(x = [-5, 5]) {\n        translate([x, -2, symbol_height/2])\n            rotate([0, 0, x > 0 ? 45 : -45])\n            cube([6, 2, symbol_height], center = true);\n    }\n    // Body\n    translate([0, 2, symbol_height/2])\n        sphere(r = 3);\n}\n\nmodule leo() {\n    // Lion mane\n    for(i = [0:30:330]) {\n        rotate([0, 0, i])\n            translate([3, 0, 0])\n                sphere(r = 1.5);\n    }\n    // Face\n    translate([0, 0, symbol_height/2])\n        sphere(r = 2.5);\n}\n\nmodule virgo() {\n    // Maiden figure\n    translate([0, -2, symbol_height/2])\n        cube([2, 6, symbol_height], center = true);\n    // Head\n    translate([0, 3, symbol_height/2])\n        sphere(r = 2);\n}\n\nmodule libra() {\n    // Scales\n    translate([0, 0, symbol_height/2])\n        cube([8, 1, symbol_height], center = true);\n    // Pans\n    translate([-3, -3, symbol_height/2])\n        sphere(r = 2);\n    translate([3, -3, symbol_height/2])\n        sphere(r = 2);\n}\n\nmodule scorpio() {\n    // Scorpion\n    translate([0, 0, symbol_height/2])\n        cube([6, 2, symbol_height], center = true);\n    // Tail\n    translate([3, 2, symbol_height/2])\n        rotate([0, 0, 45])\n        cube([4, 1, symbol_height], center = true);\n}\n\nmodule sagittarius() {\n    // Archer bow\n    translate([0, 0, symbol_height/2])\n        rotate([90, 0, 0])\n        cylinder(h = 8, r = 0.5, center = true);\n    // Arrow\n    translate([0, 2, symbol_height/2])\n        cube([1, 6, symbol_height], center = true);\n}\n\nmodule capricorn() {\n    // Goat\n    translate([0, 0, symbol_height/2])\n        cube([6, 4, symbol_height], center = true);\n    // Horns\n    translate([-2, 2, symbol_height/2])\n        rotate([0, 0, -30])\n        cylinder(h = 3, r1 = 1, r2 = 0.5);\n    translate([2, 2, symbol_height/2])\n        rotate([0, 0, 30])\n        cylinder(h = 3, r1 = 1, r2 = 0.5);\n}\n\nmodule aquarius() {\n    // Water bearer\n    for(y = [0:2:6]) {\n        translate([0, y, symbol_height/2])\n            cube([1, 1, symbol_height], center = true);\n    }\n    // Vessel\n    translate([-2, 3, symbol_height/2])\n        sphere(r = 2);\n}\n\nmodule pisces() {\n    // Fish\n    for(x = [-3, 3]) {\n        translate([x, 0, symbol_height/2])\n            sphere(r = 2.5);\n        // Tail\n        translate([x + (x > 0 ? 2 : -2), 0, symbol_height/2])\n            rotate([0, 0, x > 0 ? 45 : -45])\n            cube([3, 1, symbol_height], center = true);\n    }\n}\n\n// Month indicators\nmodule month_markers() {\n    for(i = [0:11]) {\n        angle = i * 30;\n        distance = dial_diameter/2 - wall_thickness - 5;\n        \n        rotate([0, 0, angle])\n            translate([distance, 0, dial_height - 1])\n                cube([1, 4, 2], center = true);\n    }\n}\n\n// Place all symbols around the dial\nmodule zodiac_symbols() {\n    symbols = [aries, taurus, gemini, cancer, leo, virgo, \n               libra, scorpio, sagittarius, capricorn, aquarius, pisces];\n    \n    for(i = [0:11]) {\n        angle = i * 30;\n        distance = dial_diameter/2 - wall_thickness - 12;\n        \n        rotate([0, 0, angle])\n            translate([distance, 0, (dial_height - symbol_height)/2])\n                scale([0.8, 0.8, 1])\n                    symbols[i]();\n    }\n}\n\n// Assembly\ndial_base();\nmonth_markers();\nzodiac_symbols();",
    "renders": true
  },
  {
    "vehicle": "tender",
    "openscad_code": "// Tender car for steam locomotive\n// Overall dimensions: 80mm long x 35mm wide x 40mm tall\n\n$fn = 24;  // Good balance of detail and performance\n\n// Main tender body\nmodule tender_body() {\n    // Water tank\n    difference() {\n        // Main tank\n        hull() {\n            translate([0, 0, 15]) cube([70, 30, 25], center = true);\n            translate([0, 0, 35]) cube([65, 28, 5], center = true);\n        }\n        \n        // Top opening for water\n        translate([0, 0, 36]) cube([50, 20, 10], center = true);\n        \n        // Side detail recesses\n        for(side = [-1, 1]) {\n            translate([side * 32, 0, 20]) cube([4, 25, 15], center = true);\n        }\n    }\n}\n\n// Coal bunker at rear\nmodule coal_bunker() {\n    difference() {\n        // Bunker walls\n        translate([-30, 0, 25]) cube([20, 28, 20], center = true);\n        \n        // Coal space\n        translate([-30, 0, 30]) cube([18, 24, 15], center = true);\n    }\n    \n    // Coal surface\n    translate([-30, 0, 21]) scale([1, 1, 0.3]) sphere(10);\n}\n\n// Bogies (wheel assemblies)\nmodule bogie(x_pos) {\n    // Bogie frame\n    translate([x_pos, 0, 5]) cube([15, 28, 4], center = true);\n    \n    // Wheels\n    for(side = [-1, 1]) {\n        for(wheel_x = [-4, 4]) {\n            translate([x_pos + wheel_x, side * 12, 2]) \n                rotate([90, 0, 0]) \n                cylinder(h = 4, r = 6);\n        }\n    }\n    \n    // Axles\n    translate([x_pos, 0, 2]) cube([8, 24, 2], center = true);\n}\n\n// Brake wheel\nmodule brake_wheel() {\n    translate([25, 15, 25]) {\n        // Stand\n        cylinder(h = 8, r = 2);\n        // Wheel\n        translate([0, 0, 8]) \n            rotate([90, 0, 0]) \n            cylinder(h = 2, r = 4);\n    }\n}\n\n// Couplers\nmodule coupler(x_pos) {\n    translate([x_pos, 0, 8]) {\n        // Shank\n        cube([8, 6, 4], center = true);\n        // Knuckle\n        translate([4, 0, 0]) \n            cube([4, 8, 4], center = true);\n    }\n}\n\n// Main assembly\nunion() {\n    tender_body();\n    coal_bunker();\n    \n    // Bogies\n    bogie(-15);\n    bogie(15);\n    \n    // Brake wheel\n    brake_wheel();\n    \n    // Couplers\n    coupler(35);\n    coupler(-35);\n}",
    "renders": true
  },
  {
    "vehicle": "launch",
    "openscad_code": "// Realistic-style Space Launch Vehicle (Falcon-9 like)\n// Medium complexity, 3D-printable with no overhangs\n// Approx. 85 mm tall\n\n// Overall scale factor\nscale = 1;\n\n// Main dimensions (in mm)\nbody_d = 12 * scale;\nbody_h = 60 * scale;\nnose_h = 20 * scale;\nfin_w = 8 * scale;\nfin_h = 15 * scale;\nfin_t = 2 * scale;\nengine_d = 16 * scale;\nengine_h = 10 * scale;\ngrid_h = 3 * scale;\n\n// Wall thickness for printing\nwall = 1.2 * scale;\n\n// Main rocket body (hollow cylinder)\nmodule body() {\n    difference() {\n        cylinder(h=body_h, d=body_d, $fn=48);\n        translate([0,0,wall])\n            cylinder(h=body_h-wall*2, d=body_d-wall*2, $fn=48);\n    }\n}\n\n// Nose cone (ogive-like using cone + sphere)\nmodule nose() {\n    union() {\n        cylinder(h=nose_h*0.75, d1=body_d-wall*2, d2=0, $fn=48);\n        translate([0,0,nose_h*0.75])\n            sphere(d=body_d-wall*2, $fn=48);\n    }\n}\n\n// Landing legs (4 foldable legs)\nmodule legs() {\n    for (i=[0:90:359]) {\n        rotate([0,0,i])\n            translate([body_d/2-wall/2, -fin_t/2, -engine_h-grid_h])\n                cube([fin_t, fin_t, engine_h]);\n    }\n}\n\n// Engine section with 9 engine bells\nmodule engines() {\n    difference() {\n        // Outer engine skirt\n        cylinder(h=engine_h+grid_h, d=engine_d, $fn=48);\n        \n        // Hollow it out\n        translate([0,0,grid_h])\n            cylinder(h=engine_h, d=engine_d-wall*2, $fn=48);\n        \n        // Central engine bell\n        translate([0,0,0])\n            cylinder(h=engine_h+grid_h, d1=engine_d*0.25, d2=engine_d*0.35, $fn=32);\n            \n        // 8 surrounding engine bells\n        for (i=[0:45:359]) {\n            rotate([0,0,i])\n                translate([engine_d*0.25,0,0])\n                    cylinder(h=engine_h+grid_h, d1=engine_d*0.2, d2=engine_d*0.3, $fn=32);\n        }\n    }\n}\n\n// Grid fins (4 at top)\nmodule gridfins() {\n    for (i=[0:90:359]) {\n        rotate([0,0,i])\n            translate([body_d/2, -fin_t/2, body_h-grid_h])\n                cube([fin_h, fin_t, grid_h]);\n    }\n}\n\n// Main fins (4 at base)\nmodule mainfins() {\n    for (i=[0:90:359]) {\n        rotate([0,0,i])\n            translate([body_d/2-fin_t, -fin_w/2, 0])\n                cube([fin_t, fin_w, fin_h]);\n    }\n}\n\n// Assembly\nunion() {\n    // Main body\n    body();\n    \n    // Nose cone on top\n    translate([0,0,body_h])\n        nose();\n    \n    // Engine section below\n    translate([0,0,-engine_h-grid_h])\n        engines();\n    \n    // Fins and legs\n    mainfins();\n    legs();\n    gridfins();\n}",
    "renders": true
  },
  {
    "vehicle": "airplane",
    "openscad_code": "// Realistic Medium-Complexity 3D-Printable Airplane\n// Overall length ~80 mm, wing span ~70 mm\n\n$fn = 32;               // Smooth curves\nwall = 1.2;             // 3D-print friendly wall thickness\n\nmodule rounded_box(s, r) {\n    // Helper: box with rounded edges along X\n    hull() {\n        translate([r, r, r]) sphere(r);\n        translate([r, r, s.z-r]) sphere(r);\n        translate([r, s.y-r, r]) sphere(r);\n        translate([r, s.y-r, s.z-r]) sphere(r);\n        translate([s.x-r, r, r]) sphere(r);\n        translate([s.x-r, r, s.z-r]) sphere(r);\n        translate([s.x-r, s.y-r, r]) sphere(r);\n        translate([s.x-r, s.y-r, s.z-r]) sphere(r);\n    }\n}\n\nmodule fuselage() {\n    // Main body: combines cylinder and tapered tail\n    union() {\n        // Nose & Cabin section\n        hull() {\n            // Cockpit bump\n            translate([0, 0, 5]) sphere(6);\n            // Main oval body\n            scale([1, 0.7, 0.7]) sphere(10);\n            translate([35, 0, 0]) scale([1, 0.6, 0.6]) sphere(8);\n        }\n        // Tail boom\n        hull() {\n            translate([35, 0, 0]) scale([1, 0.6, 0.6]) sphere(8);\n            translate([70, 0, 0]) scale([0.2, 0.3, 0.3]) sphere(6);\n        }\n    }\n}\n\nmodule wings() {\n    // Main wing with slight dihedral\n    translate([20, 0, -2]) {\n        rotate([5, 0, 0]) {\n            // Left wing\n            translate([0, -35, 0]) {\n                difference() {\n                    rotate([0, 0, -5]) cube([30, 35, wall]);\n                    translate([30, 35, -1]) cube([5, 10, wall+2]);  // Wing tip taper\n                }\n            }\n            // Right wing\n            mirror([0, 1, 0]) {\n                difference() {\n                    rotate([0, 0, -5]) cube([30, 35, wall]);\n                    translate([30, 35, -1]) cube([5, 10, wall+2]);\n                }\n            }\n            // Center wing box\n            cube([10, 14, wall]);\n        }\n    }\n}\n\nmodule horizontal_stabilizer() {\n    translate([65, 0, 0]) {\n        rotate([0, -3, 0]) {\n            difference() {\n                cube([15, 25, wall]);\n                translate([15, 25, -1]) cube([5, 5, wall+2]);\n                mirror([0, 1, 0]) {\n                    translate([15, 25, -1]) cube([5, 5, wall+2]);\n                }\n            }\n        }\n    }\n}\n\nmodule vertical_fin() {\n    translate([68, 0, 6]) {\n        rotate([0, 15, 0]) {\n            difference() {\n                cube([12, wall, 12]);\n                translate([12, -1, 12]) cube([5, wall+2, 5]);\n            }\n        }\n    }\n}\n\nmodule engines() {\n    // Two under-wing nacelles\n    for (y = [-25, 25]) {\n        translate([20, y, -6]) {\n            difference() {\n                rotate([90, 0, 0]) cylinder(h=12, r1=5, r2=4);\n                translate([0, 0, -1]) rotate([90, 0, 0]) cylinder(h=14, r1=3, r2=3);\n            }\n        }\n    }\n}\n\nmodule landing_gear_cover() {\n    // Simple wheel pants under fuselage\n    translate([15, 0, -5]) {\n        hull() {\n            sphere(2.5);\n            translate([10, 0, 0]) sphere(2.5);\n        }\n    }\n    translate([40, 0, -5]) {\n        hull() {\n            sphere(2.5);\n            translate([5, 0, 0]) sphere(2.5);\n        }\n    }\n}\n\n// Build the airplane\nunion() {\n    fuselage();\n    wings();\n    horizontal_stabilizer();\n    vertical_fin();\n    engines();\n    landing_gear_cover();\n}",
    "renders": true
  },
  {
    "vehicle": "helicopter",
    "openscad_code": "// Helicopter - Realistic Style, Medium Complexity\n// Designed for 3D printing with no overhangs (split into parts or print upright)\n\n$fn = 32;\n\n// Main parameters\nbody_length = 80;\nbody_width = 20;\nbody_height = 25;\nrotor_diameter = 100;\ntail_rotor_diameter = 22;\nlanding_gear_height = 15;\n\nmodule main_body() {\n    // Central fuselage\n    hull() {\n        // Main cabin\n        translate([0, 0, body_height/2])\n            cube([body_length*0.7, body_width, body_height], center=true);\n        \n        // Nose cone\n        translate([body_length*0.4, 0, body_height*0.6])\n            scale([1.5, 0.8, 0.8])\n                sphere(body_height/2);\n    }\n    \n    // Tail boom\n    translate([body_length*0.5, 0, body_height*0.5])\n        cube([body_length*0.6, body_width*0.4, body_height*0.4], center=true);\n}\n\nmodule windows() {\n    // Cockpit windows\n    for(i = [-1, 1]) {\n        translate([body_length*0.2, i*body_width*0.3, body_height*0.7])\n            rotate([0, 20*i, 0])\n                cube([body_length*0.15, body_width*0.2, body_height*0.15], center=true);\n    }\n    \n    // Side windows\n    for(i = [-1, 1]) {\n        translate([body_length*0.05, i*body_width/2, body_height*0.6])\n            cube([body_length*0.2, 1, body_height*0.2], center=true);\n    }\n}\n\nmodule rotor_assembly() {\n    // Main rotor mast\n    translate([0, 0, body_height*0.9])\n        cylinder(h=10, r=3, center=false);\n    \n    // Rotor hub\n    translate([0, 0, body_height*0.9 + 10])\n        sphere(4);\n    \n    // Main rotor blades (4 blades)\n    for(i = [0:90:270]) {\n        rotate([0, 0, i])\n            translate([rotor_diameter/2 - 5, 0, body_height*0.9 + 10])\n                cube([rotor_diameter/2, 2, 1], center=true);\n    }\n}\n\nmodule tail_assembly() {\n    // Vertical stabilizer\n    translate([body_length*0.7, 0, body_height*0.7])\n        rotate([0, 10, 0])\n            cube([body_length*0.15, 2, body_height*0.8], center=true);\n    \n    // Horizontal stabilizer\n    translate([body_length*0.7, 0, body_height*0.5])\n        rotate([0, 0, 0])\n            cube([body_length*0.2, body_width*0.8, 2], center=true);\n    \n    // Tail rotor mast\n    translate([body_length*0.8, 0, body_height*0.7])\n        cylinder(h=10, r=2, center=true);\n    \n    // Tail rotor blades (2 blades)\n    for(i = [0:90:90]) {\n        rotate([0, 90, i])\n            translate([body_length*0.8, 0, body_height*0.7])\n                cube([tail_rotor_diameter/2, 1, 0.5], center=true);\n    }\n}\n\nmodule landing_gear() {\n    // Skid tubes\n    for(side = [-1, 1]) {\n        translate([0, side*body_width*0.6, -landing_gear_height/2])\n            cylinder(h=body_length*0.8, r=2, center=true);\n    }\n    \n    // Cross braces\n    for(pos = [-body_length*0.3, body_length*0.3]) {\n        translate([pos, 0, -landing_gear_height])\n            cube([2, body_width*1.2, 2], center=true);\n    }\n    \n    // Support struts\n    for(side = [-1, 1]) {\n        for(pos = [-body_length*0.3, body_length*0.3]) {\n            translate([pos, side*body_width*0.6, -landing_gear_height/2])\n                cube([2, 2, landing_gear_height], center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    difference() {\n        main_body();\n        windows();\n    }\n    \n    rotor_assembly();\n    tail_assembly();\n    landing_gear();\n}",
    "renders": true
  },
  {
    "vehicle": "glider",
    "openscad_code": "// Realistic 3D-printable glider model\n// Wingspan ~90 mm, total length ~70 mm\n\n$fn = 32;\nwall = 1.2;  // 3D-print friendly wall thickness\n\n// Main assembly\nmodule glider() {\n    union() {\n        fuselage();\n        wings();\n        tail();\n    }\n}\n\n// Fuselage body\nmodule fuselage() {\n    // Main body tube\n    translate([0, 0, 5])\n    rotate([90, 0, 0])\n    cylinder(h = 55, r1 = 4, r2 = 2);\n\n    // Nose cone\n    translate([0, 0, 60])\n    rotate([90, 0, 0])\n    cylinder(h = 10, r1 = 2, r2 = 0);\n\n    // Cockpit canopy\n    translate([0, 0, 35])\n    rotate([90, 0, 0])\n    scale([1, 1.5, 1])\n    sphere(4);\n}\n\n// Wing assembly\nmodule wings() {\n    // Main wing\n    translate([0, 0, 8])\n    rotate([0, 0, 0])\n    wing_half();\n\n    // Mirror for other wing\n    mirror([0, 1, 0])\n    wing_half();\n}\n\n// Single wing half\nmodule wing_half() {\n    // Root section\n    translate([0, 0, 0])\n    cube([30, wall, 12], center = true);\n\n    // Wing tip section\n    translate([35, 0, 0])\n    cube([20, wall, 8], center = true);\n\n    // Leading edge\n    for (i = [0:5:50]) {\n        translate([i, 0, 6])\n        sphere(1.5);\n    }\n\n    // Trailing edge\n    for (i = [5:5:50]) {\n        translate([i, 0, -6])\n        sphere(1.5);\n    }\n\n    // Wing struts\n    translate([25, 0, -5])\n    cylinder(h = 10, r = 1.5);\n}\n\n// Tail assembly\nmodule tail() {\n    // Horizontal stabilizer\n    translate([-45, 0, 5])\n    rotate([0, 10, 0])\n    union() {\n        // Left half\n        translate([-12, 0, 0])\n        cube([24, wall, 4], center = true);\n        \n        // Right half\n        translate([12, 0, 0])\n        cube([24, wall, 4], center = true);\n    }\n\n    // Vertical stabilizer\n    translate([-45, 0, 10])\n    rotate([0, 0, 0])\n    cube([wall, 15, 8], center = true);\n\n    // Elevator\n    translate([-45, 0, 3])\n    rotate([0, -15, 0])\n    cube([20, wall, 2], center = true);\n\n    // Rudder\n    translate([-45, 8, 10])\n    rotate([0, 0, 20])\n    cube([wall, 8, 6], center = true);\n}\n\n// Generate the model\nglider();",
    "renders": true
  },
  {
    "vehicle": "drone",
    "openscad_code": "// OpenSCAD Realistic Medium-Complexity Drone\n// Overall ~70 mm span, printable without supports\n\n// Parameters\n$fn = 36;\nbody_l = 38;\nbody_w = 18;\nbody_h = 10;\n\narm_len = 30;\narm_d   = 8;\nmotor_d = 12;\nmotor_h =  5;\nprop_d  = 48;\nprop_t  =  1.5;\n\nleg_h   =  8;\nleg_t   =  2;\n\ncam_d   =  7;\ncam_h   =  9;\n\nwall = 1.2;        // shell thickness for printing\n\n// Main hull (rounded rectangle extrusion)\nmodule central_body() {\n    hull() {\n        translate([-body_l/2, -body_w/2, 0])\n            cube([wall, wall, body_h]);\n        translate([ body_l/2-wall, -body_w/2, 0])\n            cube([wall, wall, body_h]);\n        translate([-body_l/2,  body_w/2-wall, 0])\n            cube([wall, wall, body_h]);\n        translate([ body_l/2-wall,  body_w/2-wall, 0])\n            cube([wall, wall, body_h]);\n        \n        translate([-body_l/2+wall, -body_w/2+wall, wall])\n            cube([body_l-2*wall, body_w-2*wall, body_h-2*wall]);\n    }\n}\n\n// Arm with motor mount\nmodule arm_motor(dir = 1) {\n    rotate([0, 0, dir*90])\n        translate([body_l/2 + arm_len/2, 0, body_h/2])\n            union() {\n                // arm tube\n                rotate([90, 0, 0])\n                    cylinder(h = arm_len, d = arm_d, center = true);\n                \n                // motor pod\n                translate([arm_len/2 + motor_d/2, 0, 0])\n                    cylinder(h = motor_h, d = motor_d);\n                \n                // prop\n                translate([arm_len/2 + motor_d/2, 0, motor_h])\n                    rotate([0, 0, 45])\n                        linear_extrude(height = prop_t)\n                            circle(d = prop_d, $fn = 2);\n            }\n}\n\n// Landing skid\nmodule landing_leg(side = 1) {\n    translate([side*(body_l/2 - leg_t), 0, 0])\n        union() {\n            // vertical strut\n            cube([leg_t, leg_t, leg_h], center = true);\n            // foot\n            translate([0, 0, -leg_h/2])\n                cube([leg_t*3, leg_t*1.5, leg_t], center = true);\n        }\n}\n\n// Camera gimbal\nmodule camera_pod() {\n    translate([0, 0, -cam_h/2 - leg_h])\n        union() {\n            // gimbal yoke\n            rotate([90, 0, 0])\n                rotate_extrude()\n                    translate([cam_d/2, 0, 0])\n                        circle(r = cam_d/4);\n            \n            // camera body\n            rotate([90, 0, 0])\n                cylinder(h = cam_h, d = cam_d);\n        }\n}\n\n// Build the drone\nunion() {\n    central_body();\n    \n    // four arms + motors + props\n    for (a = [0, 90, 180, 270])\n        rotate([0, 0, a])\n            arm_motor();\n    \n    // four legs\n    for (s = [-1, 1])\n        for (f = [-1, 1])\n            translate([s*body_l/3, f*body_w/3, body_h/2])\n                landing_leg(s);\n    \n    // camera under front\n    translate([body_l/4, 0, 0])\n        camera_pod();\n}",
    "renders": true
  },
  {
    "vehicle": "balloon",
    "openscad_code": "// Realistic Balloon – Medium Complexity\n// Total height ≈ 70 mm, max diameter ≈ 45 mm\n// Designed for 3-D printing: 1.2 mm walls, no steep overhangs\n\n$fn = 36;   // global resolution\n\n// Overall scale factor (makes it easy to resize later)\nSCALE = 1.0;\n\nmodule balloon_assembly() {\n    // Main balloon body\n    difference() {\n        // Outer shell\n        scale([1, 1, 1.35]) sphere(d = 45 * SCALE, center = true);\n\n        // Hollow cavity (offset 1.2 mm inwards)\n        scale([1, 1, 1.35]) sphere(d = (45 - 2*1.2) * SCALE, center = true);\n    }\n\n    // Neck\n    translate([0, 0, -28 * SCALE]) {\n        difference() {\n            cylinder(h = 12 * SCALE, d1 = 20 * SCALE, d2 = 14 * SCALE, center = false);\n            cylinder(h = 12 * SCALE, d1 = (20 - 2*1.2) * SCALE, d2 = (14 - 2*1.2) * SCALE, center = false);\n        }\n    }\n\n    // Reinforcement ring at neck/balloon joint\n    translate([0, 0, -22 * SCALE])\n        cylinder(h = 3 * SCALE, d = 24 * SCALE, center = false);\n\n    // Knot\n    translate([0, 0, -34 * SCALE])\n        scale([1, 1, 0.7])\n        sphere(d = 10 * SCALE);\n\n    // Realistic surface wrinkles (thin raised ribs)\n    for (i = [0 : 30 : 330]) {\n        rotate([0, 0, i])\n        translate([0, 0, 0])\n        rotate([95, 0, 0])\n        scale([0.7, 0.7, 1])\n        linear_extrude(height = 30 * SCALE, scale = 0.1)\n        circle(d = 1.8 * SCALE);\n    }\n\n    // Small vent hole on top for pressure equalization (1 mm)\n    translate([0, 0, 30 * SCALE])\n        rotate([0, 180, 0])\n        cylinder(h = 2 * SCALE, d = 1 * SCALE, center = false);\n}\n\n// Render\nballoon_assembly();",
    "renders": true
  },
  {
    "vehicle": "airship",
    "openscad_code": "// Realistic Airship - Medium Complexity\n// Approx 80mm long, 20mm wide, 20mm tall\n// 3D printable with 1mm walls and no overhangs\n\n$fn = 32;\n\nmodule airship_envelope() {\n    // Main balloon body - elongated ellipsoid\n    scale([1, 0.6, 0.45]) sphere(d=50);\n}\n\nmodule gondola() {\n    // Passenger gondola - streamlined pod\n    difference() {\n        hull() {\n            translate([0, 0, -5]) cube([25, 12, 8], center=true);\n            translate([0, 0, 3]) cube([20, 10, 6], center=true);\n        }\n        // Hollow out for weight reduction\n        translate([0, 0, -1]) cube([23, 10, 10], center=true);\n    }\n}\n\nmodule engine_nacelle() {\n    // Single engine pod\n    translate([0, 10, -2]) rotate([90, 0, 0]) \n    difference() {\n        cylinder(h=8, d1=6, d2=5);\n        cylinder(h=8, d1=4, d2=3);\n    }\n}\n\nmodule propeller_blade() {\n    // Simple propeller blade\n    rotate([0, 10, 0]) \n    scale([0.3, 1, 0.1]) \n    cube([5, 12, 1], center=true);\n}\n\nmodule propeller() {\n    // 4-blade propeller assembly\n    for(i=[0:90:270]) {\n        rotate([0, 0, i]) propeller_blade();\n    }\n}\n\nmodule tail_fin() {\n    // Vertical stabilizer\n    translate([-22, 0, 0]) rotate([0, 15, 0]) \n    difference() {\n        scale([1, 0.2, 1]) cube([15, 1, 12], center=true);\n        translate([0, 0, -1]) cube([13, 1.2, 10], center=true);\n    }\n}\n\nmodule horizontal_stabilizer() {\n    // Horizontal stabilizer\n    translate([-20, 0, 0]) rotate([15, 0, 0]) \n    difference() {\n        scale([1, 1, 0.15]) cube([18, 22, 1], center=true);\n        translate([0, 0, 0]) cube([16, 20, 1.2], center=true);\n    }\n}\n\nmodule support_struts(count=4) {\n    // Support cables between envelope and gondola\n    for(i=[0:count-1]) {\n        rotate([0, 0, i*360/count]) {\n            hull() {\n                translate([0, 0, -10]) sphere(d=1);\n                translate([0, 0, -20]) sphere(d=1);\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Main envelope\n    airship_envelope();\n    \n    // Gondola and support\n    translate([0, 0, -15]) union() {\n        gondola();\n        support_struts();\n    }\n    \n    // Engines - two on sides\n    for(side=[-1, 1]) {\n        translate([0, side*10, -15]) union() {\n            engine_nacelle();\n            // Engine propeller\n            translate([0, 0, 4]) propeller();\n        }\n    }\n    \n    // Tail surfaces\n    tail_fin();\n    horizontal_stabilizer();\n}",
    "renders": true
  },
  {
    "vehicle": "fighter",
    "openscad_code": "// Realistic Fighter Jet - Medium Complexity\n// Designed for 3D printing with no overhangs\n\nmodule fuselage() {\n    // Main body - tapered cylinder with rounded nose\n    difference() {\n        hull() {\n            // Nose cone\n            translate([0, 0, 5]) \n                scale([1, 0.8, 1.2]) \n                sphere(d=12, $fn=20);\n            // Main body\n            translate([0, 0, -15]) \n                cylinder(h=35, d1=10, d2=7, $fn=20);\n        }\n        // Cockpit cutout\n        translate([0, 3, 2]) \n            cube([8, 6, 4], center=true);\n    }\n    \n    // Cockpit canopy\n    translate([0, 3, 4]) {\n        color(\"lightblue\") \n        difference() {\n            scale([1, 0.8, 0.5]) \n            sphere(d=8, $fn=20);\n            translate([0, 0, -1]) \n                cube([10, 10, 2], center=true);\n        }\n    }\n}\n\nmodule wings() {\n    // Main wings\n    for (side = [-1, 1]) {\n        mirror([side, 0, 0]) {\n            // Wing base\n            translate([-5, 0, -2]) {\n                rotate([0, 0, 10]) \n                    cube([20, 2, 1]);\n            }\n            \n            // Wing tip\n            translate([-22, 0, -2]) {\n                rotate([0, 0, 15]) \n                    cube([5, 1.5, 0.5]);\n            }\n            \n            // Wing hardpoint\n            translate([-15, -1, -3]) \n                cylinder(h=1.5, d=1.5, $fn=12);\n        }\n    }\n    \n    // Horizontal stabilizers\n    for (side = [-1, 1]) {\n        mirror([side, 0, 0]) {\n            translate([-7, 0, -8]) {\n                rotate([0, 20, 0]) \n                    cube([10, 1, 3]);\n            }\n        }\n    }\n}\n\nmodule vertical_stabilizer() {\n    translate([0, 0, -7]) {\n        rotate([0, 0, 0]) {\n            // Main fin\n            translate([0, -1.5, 0]) \n                cube([1, 3, 12]);\n            \n            // Rudder detail\n            translate([0.5, -1, 0]) \n                cube([0.5, 2, 10]);\n        }\n    }\n}\n\nmodule engines() {\n    for (side = [-1, 1]) {\n        translate([side * 4, 0, -10]) {\n            difference() {\n                // Engine housing\n                cylinder(h=12, d=4, $fn=16);\n                \n                // Intake\n                translate([0, 0, -1]) \n                    cylinder(h=2, d=3.5, $fn=16);\n                \n                // Exhaust\n                translate([0, 0, 11]) \n                    cylinder(h=2, d=3, $fn=16);\n            }\n            \n            // Engine nacelle\n            translate([0, 0, -2]) {\n                rotate([0, 90, 0]) \n                    cylinder(h=8, d=4.5, $fn=16);\n            }\n        }\n    }\n}\n\nmodule landing_gear() {\n    // Nose gear\n    translate([0, 0, -21]) {\n        cylinder(h=3, d=1.5, $fn=12);\n        translate([0, 0, -1.5]) \n            sphere(d=2, $fn=12);\n    }\n    \n    // Main gear\n    for (side = [-1, 1]) {\n        translate([side * 5, 0, -15]) {\n            cylinder(h=4, d=1.5, $fn=12);\n            translate([0, 0, -2]) \n                sphere(d=2, $fn=12);\n        }\n    }\n}\n\nmodule weapons() {\n    // Wingtip missiles\n    for (side = [-1, 1]) {\n        translate([side * 25, 0, -2]) {\n            rotate([0, 90, 0]) {\n                cylinder(h=8, d=1, $fn=8);\n                translate([4, 0, 0]) \n                    sphere(d=1, $fn=8);\n            }\n        }\n    }\n    \n    // Under-fuselage fuel tank\n    translate([0, 0, -18]) {\n        rotate([90, 0, 0]) {\n            cylinder(h=12, d=3, $fn=12);\n            translate([0, 6, 0]) \n                sphere(d=3, $fn=12);\n        }\n    }\n}\n\n// Assemble the fighter\nunion() {\n    fuselage();\n    wings();\n    vertical_stabilizer();\n    engines();\n    landing_gear();\n    weapons();\n}\n\n// Scale to reasonable size\nscale(1.5) {\n    // Model is already assembled above\n}",
    "renders": true
  },
  {
    "vehicle": "bomber",
    "openscad_code": "// Medium-complexity realistic WWII-style bomber (B-17 inspired)\n// Overall length ≈ 95 mm, wingspan ≈ 110 mm, ready for FDM printing\n\n$fn = 36;\n\n// Main body\nmodule fuselage() {\n    // Central cylindrical body\n    hull() {\n        translate([0,0,10]) cylinder(h=5, d1=12, d2=11);\n        translate([0,0,50]) cylinder(h=5, d1=11, d2=10);\n    }\n    \n    // Nose cone\n    translate([0,0,0]) rotate([180,0,0]) cylinder(h=10, r1=6, r2=0);\n    \n    // Tail cone\n    translate([0,0,65]) cylinder(h=10, r1=5.5, r2=0);\n    \n    // Tail gunner fairing\n    translate([0,0,75]) cylinder(h=8, r1=4.5, r2=3);\n    \n    // Cockpit glazing\n    difference() {\n        translate([-5,0,15]) sphere(d=12);\n        translate([-5,0,15]) sphere(d=11.5);\n    }\n    \n    // Dorsal turret\n    difference() {\n        translate([15,0,18]) cylinder(h=4, r=5);\n        translate([15,0,18]) cylinder(h=5, r=3);\n    }\n    \n    // Ventral ball turret\n    translate([35,0,-3]) sphere(d=8);\n}\n\n// Wings\nmodule wings() {\n    // Main wing\n    difference() {\n        // Port wing\n        translate([0,-55,12]) cube([50,110,3], center=true);\n        // Cutout for fuselage\n        translate([0,0,10]) cube([20,20,10], center=true);\n    }\n    \n    // Wing tips\n    translate([20,-54,12]) rotate([0,0,30]) cube([5,10,3]);\n    translate([20, 54,12]) rotate([0,0,-30]) cube([5,10,3]);\n    \n    // Engine nacelles (4 engines)\n    for (x = [10, 25], y = [-40, 40]) {\n        translate([x, y, 8]) cylinder(h=6, r=5);\n        // Propeller hub\n        translate([x, y, 7]) cylinder(h=2, r=2);\n        // Prop blades (simplified)\n        for (a = [0:120:240])\n            rotate([90,0,a]) translate([x,y,7]) cube([18,1,0.5], center=true);\n    }\n}\n\n// Tail surfaces\nmodule tail() {\n    // Horizontal stabilizer\n    difference() {\n        translate([70,0,15]) cube([30,50,2], center=true);\n        translate([70,0,15]) cube([15,20,4], center=true);\n    }\n    \n    // Vertical stabilizer\n    translate([85,0,25]) cube([5,2,20], center=true);\n    \n    // Rudder\n    translate([85,0,25]) cube([2,1,18], center=true);\n}\n\n// Landing gear\nmodule landing_gear() {\n    // Main gear fairings\n    translate([30, -25, 0]) cylinder(h=8, r=3);\n    translate([30,  25, 0]) cylinder(h=8, r=3);\n    \n    // Nose gear\n    translate([10, 0, 0]) cylinder(h=5, r=2);\n}\n\n// Bomb bay doors (recessed)\nmodule bomb_bay() {\n    translate([35,0,5]) cube([15,16,1], center=true);\n}\n\n// Assembly\nunion() {\n    fuselage();\n    wings();\n    tail();\n    landing_gear();\n    bomb_bay();\n}",
    "renders": true
  },
  {
    "vehicle": "transport",
    "openscad_code": "// Realistic 6-wheel transport truck – medium complexity\n// Overall length ≈ 100 mm, printable without supports\n\n// Wheel module with tire and hub\nmodule wheel(wheel_rim_d=8, tire_d=12, width=5) {\n    difference() {\n        // Tire\n        cylinder(d=tire_d, h=width, $fn=48);\n        // Tread grooves (five shallow cuts)\n        for (a=[0:72:359])\n            rotate([0,0,a])\n            translate([-tire_d/2-1, -0.75, -1])\n                cube([tire_d/2+2,1.5,width+2]);\n    }\n    // Rim\n    color(\"silver\")\n    cylinder(d=wheel_rim_d, h=width+0.2, $fn=32);\n}\n\n// Dual rear wheels\nmodule dual_wheel() {\n    translate([0,0,-2.5]) wheel();\n    translate([0,0, 2.5]) wheel();\n}\n\n// Simple leaf-spring shaped axle block\nmodule axle_block(len=12, h=5, thick=4) {\n    hull() {\n        for (x=[-len/2+2, len/2-2])\n            translate([x,0,h/2])\n                cube([thick,thick,h], center=true);\n    }\n}\n\n// Cabin with hood, cab and roof details\nmodule cabin() {\n    difference() {\n        // Main cabin block\n        translate([-28,0,10])\n            cube([22,20,18], center=true);\n        // Windshield\n        translate([-17,0,15])\n            cube([0.1,16,12], center=true);\n        // Side windows\n        for (y=[-7,7])\n            translate([-28,y,15])\n                cube([22,0.1,10], center=true);\n    }\n    // Hood\n    translate([-39,0,8])\n        rotate([0,10,0])\n        cube([18,18,12], center=true);\n    // Roof air deflector\n    translate([-28,0,22])\n        cube([22,20,2], center=true);\n}\n\n// Cargo box\nmodule cargo_box() {\n    hull() {\n        translate([0,0,15])\n            cube([50,24,25], center=true);\n    }\n    // Floor\n    translate([0,0,3])\n        cube([50,24,6], center=true);\n}\n\n// Assemble truck\n// Front axle with wheels\ntranslate([-38,0,0]) axle_block();\nfor (y=[-8,8])\n    translate([-38,y,0])\n        rotate([90,0,0])\n            wheel();\n\n// Second axle\ntranslate([-15,0,0]) axle_block();\nfor (y=[-9,9])\n    translate([-15,y,0])\n        rotate([90,0,0])\n            wheel();\n\n// Rear tandem axles\ntranslate([15,0,0]) axle_block();\ntranslate([30,0,0]) axle_block();\nfor (x=[15,30])\n    for (y=[-10,10])\n        translate([x,y,0])\n            rotate([90,0,0])\n            dual_wheel();\n\n// Cabin\ncabin();\n\n// Cargo box\ntranslate([5,0,0])\n    cargo_box();\n\n// Fuel tanks under cab\ntranslate([-30,-10,5])\n    cube([20,8,8], center=true);\ntranslate([-30, 10,5])\n    cube([20,8,8], center=true);",
    "renders": true
  },
  {
    "vehicle": "biplane",
    "openscad_code": "// Biplane - Realistic style, medium complexity\n// Overall length ~80mm, wingspan ~90mm, height ~30mm\n\n$fa = 2;\n$fs = 0.5;\n\nmodule rounded_cube(size, radius) {\n    hull() {\n        translate([radius, radius, radius]) sphere(r=radius);\n        translate([size.x-radius, radius, radius]) sphere(r=radius);\n        translate([radius, size.y-radius, radius]) sphere(r=radius);\n        translate([size.x-radius, size.y-radius, radius]) sphere(r=radius);\n        translate([radius, radius, size.z-radius]) sphere(r=radius);\n        translate([size.x-radius, radius, size.z-radius]) sphere(r=radius);\n        translate([radius, size.y-radius, size.z-radius]) sphere(r=radius);\n        translate([size.x-radius, size.y-radius, size.z-radius]) sphere(r=radius);\n    }\n}\n\nmodule propeller() {\n    difference() {\n        cylinder(h=1.5, d=18, $fn=30);\n        translate([0,0,-0.1]) cylinder(h=1.7, d=3, $fn=30);\n    }\n    for(i=[0:3]) {\n        rotate([0,0,i*90]) {\n            translate([0,1.5,0.75]) rotate([90,0,0]) cylinder(h=8, d=1, $fn=8);\n            translate([0,3,0.75]) rotate([90,0,0]) cylinder(h=7, d=0.8, $fn=8);\n            translate([0,5,0.75]) rotate([90,0,0]) cylinder(h=6, d=0.6, $fn=8);\n        }\n    }\n}\n\nmodule wheel() {\n    difference() {\n        cylinder(h=4, d=10, $fn=30);\n        translate([0,0,-0.1]) cylinder(h=4.2, d=5, $fn=30);\n        translate([0,0,2]) rotate([90,0,0]) cylinder(h=9.9, d=1, $fn=30);\n    }\n}\n\nmodule wing() {\n    difference() {\n        hull() {\n            translate([-40,0,0]) sphere(d=3);\n            translate([40,0,0]) sphere(d=3);\n            translate([0,8,0]) sphere(d=3);\n            translate([0,-8,0]) sphere(d=3);\n        }\n        translate([0,0,-1]) cube([82,18,2], center=true);\n    }\n}\n\nmodule tail_fin() {\n    difference() {\n        hull() {\n            translate([0,0,0]) sphere(d=2);\n            translate([0,0,8]) sphere(d=2);\n            translate([0,6,4]) sphere(d=2);\n        }\n        translate([0,3,4]) cube([1,6,8.5], center=true);\n    }\n}\n\nmodule fuselage() {\n    hull() {\n        translate([0,0,0]) sphere(d=8);\n        translate([0,0,-5]) sphere(d=8);\n        translate([0,0,-15]) sphere(d=7);\n        translate([0,0,-25]) sphere(d=6);\n        translate([0,0,-35]) sphere(d=4);\n        translate([0,0,-45]) sphere(d=3);\n    }\n    \n    // Engine cowling\n    translate([0,0,5]) cylinder(h=8, d=10, $fn=30);\n    \n    // Cockpit\n    translate([0,0,-12]) difference() {\n        hull() {\n            translate([0,0,0]) sphere(d=6);\n            translate([0,0,-6]) sphere(d=6);\n            translate([0,4,0]) sphere(d=6);\n            translate([0,4,-6]) sphere(d=6);\n        }\n        translate([0,2,-3]) cube([8,6,6], center=true);\n    }\n}\n\nmodule strut() {\n    cylinder(h=12, d=1.5, $fn=8);\n}\n\n// Main assembly\ntranslate([0,0,10]) {\n    // Fuselage\n    fuselage();\n    \n    // Propeller\n    translate([0,0,13]) propeller();\n    \n    // Upper wing\n    translate([0,0,12]) wing();\n    \n    // Lower wing\n    translate([0,0,0]) wing();\n    \n    // Wing struts\n    for(x=[-20:20:40]) {\n        for(y=[-6:12:12]) {\n            translate([x,y,0]) strut();\n        }\n    }\n    \n    // Tail\n    translate([0,0,-45]) {\n        // Horizontal stabilizer\n        translate([0,0,0]) scale([0.6,0.5,0.2]) wing();\n        \n        // Vertical tail\n        translate([0,0,0]) tail_fin();\n    }\n    \n    // Landing gear\n    translate([-15,0,-5]) {\n        // Left wheel\n        translate([0,-15,-2]) rotate([90,0,0]) wheel();\n        // Right wheel\n        translate([0,15,-2]) rotate([90,0,0]) wheel();\n        \n        // Axle\n        translate([0,0,-2]) rotate([90,0,0]) cylinder(h=30, d=2, $fn=8);\n        \n        // Struts to fuselage\n        translate([0,-10,-2]) rotate([30,0,0]) cylinder(h=12, d=2, $fn=8);\n        translate([0,10,-2]) rotate([30,0,0]) cylinder(h=12, d=2, $fn=8);\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "monoplane",
    "openscad_code": "// Realistic-style 3D-printable monoplane – medium complexity\n// Overall length ~80 mm, wingspan ~70 mm, height ~25 mm\n// Wall thickness 1.5 mm everywhere for reliable printing\n\n$fn = 32;  // smooth curves, acceptable file size\n\nmodule fuselage() {\n    // Main body – tapered cylinder + nose cone\n    difference() {\n        union() {\n            // Cylindrical body\n            translate([0, 0, 5])\n                cylinder(h = 45, d1 = 12, d2 = 10);\n\n            // Tapered nose cone\n            translate([0, 0, 50])\n                cylinder(h = 15, d1 = 10, d2 = 3);\n\n            // Tail boom (slightly flattened)\n            translate([-45, 0, 5])\n                scale([1, 0.7, 1])\n                cylinder(h = 40, d = 10);\n        }\n\n        // Cockpit opening\n        translate([0, 0, 12])\n            rotate([90, 0, 0])\n            cylinder(h = 30, d = 6, $fn = 16);\n        \n        // Horizontal tail slot (printed flat)\n        translate([-60, 0, 6])\n            rotate([0, 90, 0])\n            cube([15, 1.6, 3], center = true);\n    }\n}\n\nmodule wing(w = 1) {  // w = 1 right wing, w = -1 mirrored left\n    mirror([w, 0, 0]) {\n        // Main wing panel\n        linear_extrude(height = 2.5, center = true)\n        polygon(points = [\n            [0, 0], [30, 0], [35, 8], [5, 12], [0, 10]\n        ]);\n\n        // Simple rounded wing tip\n        translate([35, 8, 0])\n            rotate([90, 0, 90])\n            cylinder(h = 2.5, d = 8);\n    }\n}\n\nmodule horizontal_stabilizer() {\n    // Printed flat, slides into tail boom slot\n    difference() {\n        cube([30, 2.5, 8], center = true);\n        // Trim elevators slightly smaller\n        translate([10, 0, 0])\n            cube([8, 2.7, 5], center = true);\n        translate([-10, 0, 0])\n            cube([8, 2.7, 5], center = true);\n    }\n}\n\nmodule vertical_stabilizer() {\n    difference() {\n        // Main fin\n        linear_extrude(height = 2.5, center = true)\n        polygon(points = [\n            [-60, 0], [-60, 12], [-52, 20], [-52, 0]\n        ]);\n        \n        // Rudder cut\n        translate([-58, 0, 0])\n            cube([2.7, 10, 2.5], center = true);\n    }\n}\n\nmodule propeller() {\n    // Three-blade prop printed upright\n    for (a = [0:120:240]) {\n        rotate([0, 0, a])\n            translate([0, 0, 65])\n                rotate([90, 0, 90])\n                linear_extrude(height = 1.5, center = true)\n                polygon(points = [\n                    [0, 0], [0, 2], [10, 1], [12, 0], [10, -1], [0, -2]\n                ]);\n    }\n    // Spinner nose cone\n    translate([0, 0, 65])\n        cylinder(h = 8, d1 = 6, d2 = 4);\n}\n\nmodule landing_gear() {\n    // Simple fixed gear with wheel pants\n    for (side = [-1, 1]) {\n        // Strut\n        translate([side*6, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h = 12, d = 2);\n\n        // Wheel pant\n        translate([side*6, -12, 0])\n            rotate([0, 90, 0])\n            scale([1, 0.6, 0.6])\n            cylinder(h = 8, d = 6);\n\n        // Wheel (half cylinder for printing flat)\n        translate([side*6, -12, -3])\n            rotate([90, 0, 0])\n            cylinder(h = 6, d = 5);\n    }\n}\n\n// Assembly\nunion() {\n    fuselage();\n    wing(1);\n    wing(-1);\n    translate([0, 0, 6])\n        rotate([0, 0, 90])\n        horizontal_stabilizer();\n    vertical_stabilizer();\n    propeller();\n    landing_gear();\n}",
    "renders": true
  },
  {
    "vehicle": "turboprop",
    "openscad_code": "// Realistic turboprop model for 3D printing\n// Medium complexity - recognizable functional details\n\n// Overall dimensions - fits within 100mm\nmodule turboprop() {\n    // Engine core\n    engine_core();\n    \n    // Propeller assembly\n    propeller_assembly();\n    \n    // Intake\n    intake();\n    \n    // Exhaust\n    exhaust();\n    \n    // Mounting points\n    mounts();\n}\n\n// Engine core cylinder with slight taper\nmodule engine_core() {\n    // Main core body\n    difference() {\n        cylinder(h=60, r1=15, r2=12, $fn=32);\n        // Hollow core\n        translate([0,0,5])\n            cylinder(h=50, r1=10, r2=7, $fn=32);\n    }\n    \n    // Accessory gearbox on bottom\n    translate([0,0,-5])\n        cylinder(h=10, r=18, $fn=32);\n    \n    // Cooling fins\n    for(i=[5:5:55]) {\n        translate([0,0,i])\n            cylinder(h=1, r=16, $fn=32);\n    }\n}\n\n// Propeller assembly with spinner\nmodule propeller_assembly() {\n    // Propeller spinner\n    translate([0,0,65])\n        cylinder(h=20, r1=8, r2=12, $fn=32);\n    \n    // Propeller blades - 4 blade design\n    for(i=[0:90:359]) {\n        rotate([0,0,i])\n            propeller_blade();\n    }\n}\n\n// Single propeller blade\nmodule propeller_blade() {\n    // Blade root\n    translate([0,12,70])\n        rotate([0,-20,0])\n            scale([0.2,1,3])\n                sphere(r=5, $fn=16);\n    \n    // Blade main section\n    translate([0,15,75])\n        rotate([0,-25,0])\n            scale([0.1,12,4])\n                cube([1,1,1], center=true);\n    \n    // Blade tip\n    translate([0,25,78])\n        rotate([0,-30,0])\n            scale([0.05,1,1])\n                sphere(r=3, $fn=8);\n}\n\n// Air intake\nmodule intake() {\n    // Intake lip\n    translate([0,0,65])\n        difference() {\n            cylinder(h=5, r=14, $fn=32);\n            cylinder(h=6, r=12, $fn=32);\n        }\n    \n    // Intake guide vanes\n    for(i=[0:45:359]) {\n        rotate([0,0,i])\n            translate([0,0,62])\n                cube([0.5,12,6], center=true);\n    }\n}\n\n// Exhaust nozzle\nmodule exhaust() {\n    translate([0,0,-5])\n        difference() {\n            cylinder(h=10, r=10, $fn=32);\n            translate([0,0,-1])\n                cylinder(h=12, r=8, $fn=32);\n        }\n    \n    // Exhaust cone\n    translate([0,0,-15])\n        cylinder(h=10, r1=5, r2=8, $fn=32);\n}\n\n// Mounting points for aircraft\nmodule mounts() {\n    // Top mount\n    translate([0,18,30])\n        rotate([90,0,0])\n            cube([20,5,8], center=true);\n    \n    // Bottom mount\n    translate([0,-18,30])\n        rotate([90,0,0])\n            cube([20,5,8], center=true);\n    \n    // Side mounts\n    translate([18,0,30])\n        rotate([0,90,0])\n            cube([5,20,8], center=true);\n    \n    translate([-18,0,30])\n        rotate([0,90,0])\n            cube([5,20,8], center=true);\n}\n\n// Generate the complete turboprop\nturboprop();",
    "renders": true
  },
  {
    "vehicle": "tiltrotor",
    "openscad_code": "// Realistic medium-complexity 3D-printable tiltrotor\n// Designed for ~80 mm wingspan, printable in one piece\n\n$fn = 36;               // Smooth curves\nwall = 1.2;             // 3D-printable wall thickness\n\nmodule wing_profile() {\n    // Main wing cross-section with spar cavity\n    difference() {\n        scale([1, 0.15, 1])\n            cube([25, 10, 2], center=true);\n        translate([0, 0, -1])\n            cube([22, 8, 4], center=true);\n    }\n}\n\nmodule wing() {\n    // Swept main wing\n    for (a = [0:3:12]) {\n        translate([a*0.8, a*0.4, 0])\n            rotate([0, -a, 0])\n                wing_profile();\n    }\n    // Wing tip fairing\n    translate([12, 5, 0])\n        rotate([0, -12, 0])\n            scale([1.2, 0.15, 1])\n                sphere(2);\n}\n\nmodule nacelle() {\n    // Engine nacelle with exhaust\n    union() {\n        // Main body\n        rotate([0, 90, 0])\n            cylinder(h=8, d1=6, d2=5);\n        // Exhaust pipe\n        translate([0, 0, -4])\n            rotate([0, 90, 0])\n                cylinder(h=3, d=2);\n        // Mounting pylon\n        translate([0, 4, 0])\n            cube([2, wall, 6], center=true);\n    }\n}\n\nmodule rotor_hub() {\n    // Hub with three blades\n    cylinder(h=1.5, d=4);\n    for (i = [0:120:240]) {\n        rotate([0, 0, i])\n            translate([3.5, 0, 0])\n                cube([7, 0.8, 0.4], center=true);\n    }\n}\n\nmodule tiltrotor_assembly(side) {\n    // Complete rotating nacelle with rotor\n    translate([side*8, 0, 0])\n        rotate([0, 0, side*5])  // Slight anhedral\n            union() {\n                // Nacelle and pylon\n                translate([0, 0, -3])\n                    rotate([90, 0, 0])\n                        nacelle();\n                \n                // Rotor system\n                translate([0, 0, 3])\n                    union() {\n                        cylinder(h=3, d=1.5);  // Driveshaft\n                        translate([0, 0, 3])\n                            rotor_hub();\n                    }\n            }\n}\n\n// Fuselage\nunion() {\n    // Main fuselage\n    hull() {\n        translate([0, 0, 0])\n            sphere(3.5);\n        translate([8, 0, 0])\n            scale([3, 1, 1])\n                sphere(2.5);\n        translate([-8, 0, 0])\n            scale([2, 0.8, 0.8])\n                sphere(2);\n    }\n    \n    // Cockpit\n    translate([2, 0, 2])\n        scale([1.5, 1.2, 0.8])\n            sphere(2.5);\n    \n    // Vertical stabilizer\n    translate([-9, 0, 1])\n        rotate([0, 20, 0])\n            cube([4, 0.8, 3], center=true);\n}\n\n// Wings and engines\nwing();\nmirror([1, 0, 0])\n    wing();\n\ntiltrotor_assembly(1);\ntiltrotor_assembly(-1);",
    "renders": true
  },
  {
    "vehicle": "gyroplane",
    "openscad_code": "// Realistic Medium-Complexity Gyroplane for 3D Printing\n// Approx. print size: 80 mm span, 60 mm length, 25 mm height\n\n$fn = 32;  // Smooth curves\n\n// Overall scale\nscale(0.8) {\n\n// Main rotor mast\nmodule mast() {\n    translate([0, 0, 12])\n        cylinder(h = 15, d = 3);\n}\n\n// Main rotor hub\nmodule rotor_hub() {\n    translate([0, 0, 27])\n        rotate([90, 0, 0])\n        difference() {\n            cylinder(h = 4, d = 6);\n            translate([0, 0, -1])\n                cylinder(h = 6, d = 2.5);\n        }\n}\n\n// Main rotor blades (2 blades)\nmodule rotor_blades() {\n    for(a = [0, 120, 240])\n        rotate([90, 0, a])\n        translate([0, 0, 29])\n            rotate([0, -10, 0])\n            union() {\n                // Blade root\n                translate([-2, 0, 0])\n                    cube([4, 2, 1.5]);\n                // Blade tip\n                translate([10, 0, 0])\n                    scale([1, 0.6, 1])\n                    cube([25, 2, 1.5]);\n            }\n}\n\n// Fuselage pod\nmodule fuselage() {\n    difference() {\n        hull() {\n            // Nose\n            translate([0, 0, 6])\n                sphere(d = 10);\n            // Tail boom\n            translate([-15, 0, 6])\n                rotate([0, 10, 0])\n                scale([1.5, 1, 0.8])\n                sphere(d = 8);\n        }\n        // Cockpit cutout\n        translate([0, -6, 7])\n            cube([12, 12, 4]);\n    }\n}\n\n// Tail fin\nmodule tail_fin() {\n    translate([-22, 0, 8])\n        rotate([0, 0, -5])\n        difference() {\n            union() {\n                // Vertical\n                translate([0, 0, 4])\n                    cube([0.8, 8, 6]);\n                // Rudder\n                translate([-1, 0, 4])\n                    cube([0.8, 6, 5]);\n                // Horizontal stab\n                rotate([0, 90, 0])\n                    translate([-1, 0, 0])\n                    cube([0.8, 12, 3]);\n            }\n            // Trim cutout\n            translate([-1, 0, 5.5])\n                cube([1, 5, 1]);\n        }\n}\n\n// Landing gear\nmodule landing_gear() {\n    // Front wheel\n    translate([5, 0, 3])\n        sphere(d = 4);\n    // Rear wheels\n    for(y = [-8, 8])\n        translate([-5, y, 3])\n            sphere(d = 4);\n    // Axle beam\n    hull() {\n        translate([5, 0, 3])\n            sphere(d = 2);\n        translate([-5, -8, 3])\n            sphere(d = 2);\n        translate([-5, 8, 3])\n            sphere(d = 2);\n    }\n    // Struts\n    for(y = [-8, 0, 8])\n        hull() {\n            translate([y == 0 ? 5 : -5, y, 3])\n                sphere(d = 1.5);\n            translate([y == 0 ? 3 : -8, y, 6])\n                sphere(d = 1.5);\n        }\n}\n\n// Propeller\nmodule propeller() {\n    translate([12, 0, 6])\n        rotate([0, 90, 0])\n        union() {\n            cylinder(h = 2, d = 4);\n            for(a = [0, 180])\n                rotate([0, 0, a])\n                translate([5, 0, 0])\n                    scale([1, 0.2, 1])\n                    cube([10, 2, 1]);\n        }\n}\n\n// Engine cowling\nmodule engine() {\n    translate([12, 0, 6])\n        difference() {\n            cylinder(h = 6, d = 8);\n            translate([0, 0, -1])\n                cylinder(h = 8, d = 5);\n        }\n}\n\n// Assembly\nunion() {\n    mast();\n    rotor_hub();\n    rotor_blades();\n    fuselage();\n    tail_fin();\n    landing_gear();\n    propeller();\n    engine();\n}\n\n}",
    "renders": true
  },
  {
    "vehicle": "autogyro",
    "openscad_code": "// Realistic autogyro model for 3D printing\n// Medium complexity design, ~50mm long\n\n// Parameters\n$fn = 32;\nfuselage_len = 40;\nfuselage_wid = 8;\nfuselage_hgt = 6;\nrotor_d = 50;\nrotor_h = 2;\nmast_h = 10;\nmast_d = 3;\nwheel_d = 6;\nwheel_w = 3;\ntail_h = 8;\ntail_w = 12;\n\nmodule main_rotor() {\n    // Central hub\n    cylinder(d=6, h=rotor_h+1);\n    \n    // Blades (2-blade rotor with twist)\n    for(i=[0:1]) {\n        rotate([0, 0, i*180])\n        translate([rotor_d/4, 0, 0])\n        rotate([5, 0, 0]) // Slight twist\n        cube([rotor_d/2, 4, rotor_h], center=true);\n    }\n}\n\nmodule tail_fin() {\n    // Vertical stabilizer\n    translate([-fuselage_len/2-1, 0, tail_h/2])\n    rotate([0, 10, 0])\n    cube([tail_w/3, 2, tail_h], center=true);\n    \n    // Horizontal stabilizer\n    translate([-fuselage_len/2-1, 0, 2])\n    rotate([10, 0, 0])\n    cube([tail_w, tail_w/4, 2], center=true);\n}\n\nmodule wheel_assembly(pos, angle) {\n    translate(pos)\n    rotate([0, 0, angle]) {\n        // Strut\n        cylinder(d=2, h=6);\n        \n        // Wheel\n        translate([0, 0, -3])\n        rotate([90, 0, 0])\n        cylinder(d=wheel_d, h=wheel_w, center=true);\n    }\n}\n\nmodule fuselage() {\n    // Main body\n    hull() {\n        // Front section\n        translate([fuselage_len/2-5, 0, 0])\n        sphere(d=fuselage_wid);\n        \n        // Rear section\n        translate([-fuselage_len/2+5, 0, 0])\n        sphere(d=fuselage_wid);\n        \n        // Mid section\n        cube([fuselage_len, fuselage_wid, fuselage_hgt], center=true);\n    }\n    \n    // Cockpit cutout\n    translate([5, 0, 2])\n    cube([10, fuselage_wid-2, 4], center=true);\n    \n    // Tail boom\n    translate([-fuselage_len/2, 0, 0])\n    cylinder(d=fuselage_wid-2, h=10);\n}\n\n// Main assembly\nunion() {\n    // Fuselage\n    fuselage();\n    \n    // Rotor mast\n    translate([5, 0, fuselage_hgt/2+mast_h/2])\n    cylinder(d=mast_d, h=mast_h);\n    \n    // Main rotor\n    translate([5, 0, fuselage_hgt/2+mast_h+rotor_h/2])\n    main_rotor();\n    \n    // Tail assembly\n    tail_fin();\n    \n    // Landing gear\n    wheel_assembly([10, fuselage_wid/2, -fuselage_hgt/2], 30);\n    wheel_assembly([10, -fuselage_wid/2, -fuselage_hgt/2], -30);\n    wheel_assembly([-5, 0, -fuselage_hgt/2], 0);\n}\n\n// Propeller (for pusher configuration)\ntranslate([-fuselage_len/2-2, 0, 2])\nrotate([0, 90, 0])\nunion() {\n    cylinder(d=4, h=2);\n    for(i=[0:1:3]) {\n        rotate([0, 0, i*90])\n        translate([2, 0, 0])\n        cube([4, 1, 1], center=true);\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "quadcopter",
    "openscad_code": "// Realistic 3D-printable quadcopter, medium complexity\n// Target diagonal motor-to-motor ≈ 90 mm\n\n$fa = 2;\n$fs = 0.5;\n\n// Wall thickness for 3D printing\nwall = 1.2;\n\nmodule arm_profile() {\n    // Simple flat-topped arm cross-section to avoid supports\n    square([12, 8], center = true);\n}\n\nmodule arm(length = 40) {\n    difference() {\n        linear_extrude(height = length, center = true, scale = [0.7, 0.7])\n            arm_profile();\n        translate([0, 0, length/2 - wall])\n            cube([12 - 2*wall, 8 - 2*wall, length], center = true);\n    }\n}\n\nmodule motor_mount() {\n    // Hollow cylinder with screw holes\n    difference() {\n        cylinder(h = 4, d = 16, center = true);\n        cylinder(h = 5, d = 10, center = true);\n        for (a = [0:120:359])\n            rotate([0, 0, a])\n                translate([5.5, 0, 0])\n                    cylinder(h = 5, d = 2.2, center = true);\n    }\n}\n\nmodule propeller() {\n    // Two-blade prop for display, thin enough to print\n    rotate([90, 0, 0]) {\n        for (a = [0, 180])\n            rotate([0, 0, a])\n                translate([0, 8, 0])\n                    cube([30, 1.2, 4], center = true);\n    }\n}\n\nmodule landing_leg() {\n    // Simple skid, printed flat\n    hull() {\n        translate([-10, 0, 0])\n            cylinder(h = 3, d = 4);\n        translate([10, 0, 0])\n            cylinder(h = 3, d = 4);\n    }\n}\n\nmodule body_core() {\n    // Central hub with battery bay\n    difference() {\n        cylinder(h = 12, d = 30, center = true);\n        translate([0, 0, 1])\n            cube([25, 25, 14], center = true);\n    }\n}\n\n// Assembly\nrotate([0, 0, 45]) {\n    // Four arms\n    for (a = [0:90:359]) {\n        rotate([0, 0, a]) {\n            translate([0, 25, 0])\n                arm();\n            translate([0, 45, 0])\n                motor_mount();\n            translate([0, 46, 0])\n                propeller();\n        }\n    }\n\n    // Central body\n    body_core();\n\n    // Landing skids under two arms\n    for (a = [45, 225]) {\n        rotate([0, 0, a])\n            translate([0, 30, -8])\n                landing_leg();\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "hexacopter",
    "openscad_code": "// Hexacopter - Realistic Medium Complexity\n// 3D printable hexacopter drone with 6 rotors, camera, and landing gear\n\n// Parameters\n$fn = 36;\narm_length = 35;\narm_diameter = 4;\nbody_diameter = 25;\nbody_height = 8;\nmotor_diameter = 8;\nmotor_height = 4;\nprop_diameter = 18;\nprop_thickness = 1.5;\nlanding_leg_height = 10;\nlanding_leg_width = 2;\ncamera_diameter = 6;\ncamera_length = 8;\n\n// Main body module\nmodule body() {\n    difference() {\n        // Main body cylinder\n        cylinder(d=body_diameter, h=body_height);\n        \n        // Top cooling vents\n        for(i=[0:5]) {\n            rotate([0, 0, i*60]) {\n                translate([body_diameter/2 - 3, -1, body_height-2])\n                    cube([6, 2, 2], center=true);\n            }\n        }\n        \n        // Bottom hole for wiring\n        translate([0, 0, -1])\n            cylinder(d=body_diameter-6, h=body_height+2);\n    }\n}\n\n// Motor mount with propeller\nmodule motor_prop() {\n    union() {\n        // Motor\n        cylinder(d=motor_diameter, h=motor_height);\n        \n        // Propeller\n        translate([0, 0, motor_height+prop_thickness/2]) {\n            rotate([90, 0, 0]) {\n                difference() {\n                    // Main prop disc\n                    cylinder(d=prop_diameter, h=prop_thickness);\n                    \n                    // Cutouts for realism\n                    for(i=[0:2]) {\n                        rotate([0, 0, i*120])\n                            translate([prop_diameter/3, 0, -1])\n                                cube([prop_diameter/2, 2, prop_thickness+2], center=true);\n                    }\n                    \n                    // Center hole\n                    cylinder(d=2, h=prop_thickness+2);\n                }\n            }\n        }\n    }\n}\n\n// Arm assembly\nmodule arm_motor() {\n    union() {\n        // Arm tube\n        rotate([90, 0, 0])\n            cylinder(d=arm_diameter, h=arm_length);\n        \n        // Motor at end\n        translate([0, arm_length, 0])\n            motor_prop();\n    }\n}\n\n// Landing gear\nmodule landing_gear() {\n    translate([0, 0, -body_height/2]) {\n        for(i=[0:2]) {\n            rotate([0, 0, i*120+30]) {\n                // Leg\n                translate([body_diameter/2-2, 0, -landing_leg_height/2])\n                    cube([landing_leg_width, body_diameter/2-2, landing_leg_height], center=true);\n                \n                // Foot pad\n                translate([body_diameter/2-2, body_diameter/2-2, -landing_leg_height])\n                    cube([landing_leg_width+2, landing_leg_width+2, 2], center=true);\n            }\n        }\n    }\n}\n\n// Camera gimbal\nmodule camera() {\n    translate([0, 0, -body_height/2-landing_leg_height]) {\n        // Gimbal mount\n        translate([0, 0, 2])\n            sphere(d=4);\n        \n        // Camera body\n        rotate([15, 0, 0])\n            translate([0, 0, -camera_length/2-2])\n                cylinder(d=camera_diameter, h=camera_length);\n        \n        // Lens\n        translate([0, 0, -camera_length-2])\n            cylinder(d=camera_diameter-2, h=1);\n    }\n}\n\n// Assemble the hexacopter\nunion() {\n    // Main body\n    translate([0, 0, 0])\n        body();\n    \n    // Six arms with motors\n    for(i=[0:5]) {\n        rotate([0, 0, i*60]) {\n            translate([0, 0, body_height/2])\n                arm_motor();\n        }\n    }\n    \n    // Landing gear\n    landing_gear();\n    \n    // Camera\n    camera();\n}",
    "renders": true
  },
  {
    "vehicle": "octocopter",
    "openscad_code": "// Octocopter - medium complexity, realistic style\n// Overall size ~80mm diameter\n\n// Parameters\n$fn = 32;\nbody_r = 12;\nbody_h = 25;\narm_len = 28;\narm_r = 2.5;\nmotor_r = 7;\nmotor_h = 6;\nprop_r = 18;\nprop_t = 1.2;\nleg_len = 20;\nleg_r = 1.8;\n\n// Central body with battery compartment\nmodule body() {\n    difference() {\n        // Main body cylinder\n        cylinder(h = body_h, r = body_r, center = true);\n        \n        // Battery slot on top\n        translate([0, 0, body_h/2 - 1])\n            cube([20, 12, 2], center = true);\n        \n        // Wire holes\n        for (a = [0:45:315])\n            rotate([0, 0, a])\n                translate([body_r - 2, 0, 0])\n                    rotate([0, 90, 0])\n                        cylinder(h = 4, r = 1.5, center = true);\n    }\n    \n    // Top plate\n    translate([0, 0, body_h/2 + 1])\n        cylinder(h = 2, r = body_r + 2, center = true);\n}\n\n// Motor pod with realistic vents\nmodule motor_pod() {\n    difference() {\n        union() {\n            // Motor cylinder\n            cylinder(h = motor_h, r = motor_r, center = true);\n            \n            // Mounting flange\n            translate([0, 0, motor_h/2])\n                cylinder(h = 1.5, r = motor_r + 2, center = true);\n        }\n        \n        // Cooling vents\n        for (i = [0:30:330])\n            rotate([0, 0, i])\n                translate([motor_r - 1, 0, 0])\n                    cube([2, 1, motor_h + 0.1], center = true);\n    }\n}\n\n// Propeller with realistic blade shape\nmodule propeller() {\n    union() {\n        // Center hub\n        cylinder(h = prop_t + 0.5, r = 3, center = true);\n        \n        // Two blades with twist\n        for (rot = [0, 180]) {\n            rotate([0, 0, rot]) {\n                // Blade root\n                translate([7, 0, 0])\n                    cube([14, 3.5, prop_t], center = true);\n                \n                // Tapered tip\n                translate([prop_r - 3, 0, 0])\n                    scale([1, 0.6, 1])\n                        cube([6, 3.5, prop_t], center = true);\n            }\n        }\n    }\n}\n\n// Arm with wire channel\nmodule arm() {\n    difference() {\n        // Main arm tube\n        cylinder(h = arm_len, r = arm_r, center = true);\n        \n        // Wire channel\n        rotate([0, 90, 0])\n            translate([0, 0, arm_len/2 - 2])\n                cylinder(h = arm_len - 4, r = arm_r - 1.5, center = true);\n    }\n}\n\n// Landing leg assembly\nmodule landing_leg() {\n    union() {\n        // Main leg\n        rotate([90, 0, 0])\n            cylinder(h = leg_len, r = leg_r, center = true);\n        \n        // Foot pad\n        translate([0, 0, -leg_len/2 - 2])\n            cylinder(h = 2, r = leg_r + 2, center = true);\n        \n        // Support strut\n        translate([leg_r + 2, 0, -leg_len/2 + 5])\n            rotate([0, 30, 0])\n                cylinder(h = 8, r = leg_r/2, center = true);\n    }\n}\n\n// Complete octocopter assembly\nunion() {\n    // Central body\n    body();\n    \n    // Eight arms with motors and props\n    for (a = [0:45:315]) {\n        rotate([0, 0, a]) {\n            // Arm\n            translate([arm_len/2 + body_r, 0, 0])\n                rotate([0, 90, 0])\n                    arm();\n            \n            // Motor pod\n            translate([body_r + arm_len, 0, body_h/2 - motor_h/2])\n                motor_pod();\n            \n            // Propeller\n            translate([body_r + arm_len, 0, body_h/2 + motor_h + 1])\n                propeller();\n        }\n    }\n    \n    // Landing legs\n    for (a = [22.5:90:337.5]) {\n        rotate([0, 0, a]) {\n            translate([body_r - 3, 0, -body_h/2 - leg_len/2])\n                landing_leg();\n        }\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "triplane",
    "openscad_code": "// OpenSCAD Triplane - Realistic Medium Complexity\n// Designed for 3D printing with reasonable overhangs\n\n$fn = 32;  // Smooth curves\n\n// Main assembly\nmodule triplane() {\n    union() {\n        // Fuselage\n        translate([0, 0, 5]) fuselage();\n        \n        // Three wings\n        translate([0, 0, 35]) upper_wing();\n        translate([0, 0, 20]) middle_wing();\n        translate([0, 0, 5]) lower_wing();\n        \n        // Tail section\n        translate([-45, 0, 15]) tail_assembly();\n        \n        // Landing gear\n        translate([10, 0, 0]) landing_gear();\n        \n        // Engine\n        translate([25, 0, 15]) engine();\n    }\n}\n\n// Fuselage body\nmodule fuselage() {\n    hull() {\n        // Main body\n        scale([1, 0.8, 0.7]) \n            cylinder(h = 60, r1 = 5, r2 = 3);\n        \n        // Nose cone\n        translate([30, 0, 0])\n            scale([1, 0.8, 0.7])\n                rotate([0, 90, 0])\n                    cylinder(h = 8, r1 = 5, r2 = 0);\n    }\n}\n\n// Wing module\nmodule wing(height) {\n    difference() {\n        // Main wing\n        hull() {\n            // Center section\n            translate([0, 0, height])\n                cube([40, 60, 2]);\n            \n            // Wing tips\n            translate([-20, -30, height])\n                rotate([0, 0, -10])\n                    cube([20, 25, 2]);\n            \n            translate([-20, 30, height])\n                rotate([0, 0, 10])\n                    cube([20, 25, 2]);\n        }\n        \n        // Aileron cutouts\n        for (y = [-45, 45]) {\n            translate([-15, y/2, height-1])\n                cube([30, 8, 4]);\n        }\n    }\n}\n\n// Individual wing positions\nmodule upper_wing() wing(35);\nmodule middle_wing() wing(20);\nmodule lower_wing() wing(5);\n\n// Wing struts\nmodule wing_struts() {\n    for (x = [-15, 0, 15]) {\n        for (y = [-25, 25]) {\n            // Vertical struts\n            translate([x, y, 5])\n                cylinder(h = 30, r = 1);\n            \n            // Diagonal bracing\n            hull() {\n                translate([x, y, 5])\n                    sphere(r = 1);\n                translate([x, y, 35])\n                    sphere(r = 1);\n            }\n        }\n    }\n}\n\n// Tail assembly\nmodule tail_assembly() {\n    union() {\n        // Horizontal stabilizer\n        translate([0, 0, 10])\n            rotate([0, 10, 0])\n                hull() {\n                    cube([20, 40, 2]);\n                    translate([15, 0, 0])\n                        cube([10, 30, 2]);\n                }\n        \n        // Vertical stabilizer\n        translate([0, 0, 10])\n            rotate([0, 0, 90])\n                hull() {\n                    cube([15, 20, 2]);\n                    translate([0, 15, 0])\n                        cube([15, 10, 2]);\n                }\n        \n        // Tail skid\n        translate([0, 0, 0])\n            cylinder(h = 10, r = 1);\n    }\n}\n\n// Landing gear\nmodule landing_gear() {\n    union() {\n        // Main axle\n        translate([0, 0, 2])\n            rotate([90, 0, 0])\n                cylinder(h = 30, r = 1.5);\n        \n        // Wheels\n        for (y = [-15, 15]) {\n            translate([0, y, 0])\n                sphere(r = 4);\n        }\n        \n        // Struts\n        for (y = [-15, 15]) {\n            hull() {\n                translate([0, y, 2])\n                    sphere(r = 1.5);\n                translate([5, y/2, 5])\n                    sphere(r = 1.5);\n            }\n        }\n    }\n}\n\n// Engine\nmodule engine() {\n    difference() {\n        // Engine block\n        cylinder(h = 8, r = 6);\n        \n        // Cylinders\n        for (i = [0:3]) {\n            rotate([0, 0, i * 90])\n                translate([5, 0, 4])\n                    rotate([90, 0, 0])\n                        cylinder(h = 6, r = 2);\n        }\n        \n        // Propeller hub\n        translate([0, 0, 8])\n            cylinder(h = 3, r = 2);\n    }\n    \n    // Propeller blades\n    for (i = [0, 120, 240]) {\n        rotate([0, 0, i])\n            translate([0, 0, 11])\n                rotate([0, 30, 0])\n                    scale([1, 0.3, 0.1])\n                        cube([25, 8, 1]);\n    }\n}\n\n// Add wing struts to main assembly\nunion() {\n    triplane();\n    wing_struts();\n}",
    "renders": true
  },
  {
    "vehicle": "airliner",
    "openscad_code": "// Realistic Medium-Complexity Airliner\n// Roughly 80 mm long, 70 mm wingspan, 20 mm high\n// Designed for 3D printing, minimal overhangs\n\n$fn = 32;               // Smooth curves\nwall = 1.2;             // Shell thickness for 3D printing\nscale_factor = 0.25;    // Scales full model to ~80 mm length\n\nmodule fuse_section(h, r) {\n    // Build a single slice of fuselage with radius r and height h\n    difference() {\n        cylinder(h=h, r1=r, r2=r);\n        translate([0,0,-0.1])\n            cylinder(h=h+0.2, r1=r-wall, r2=r-wall);\n    }\n}\n\nmodule fuselage() {\n    // Tapered tube made from stacked cylinders\n    translate([-15,0,0]) rotate([0,90,0]) {\n        union() {\n            fuse_section(5, 4);          // Nose\n            translate([5,0,0]) fuse_section(10, 5);\n            translate([15,0,0]) fuse_section(8, 6);\n            translate([23,0,0]) fuse_section(8, 6);\n            translate([31,0,0]) fuse_section(8, 5.5);\n            translate([39,0,0]) fuse_section(8, 5);\n            translate([47,0,0]) fuse_section(10, 4);\n            translate([57,0,0]) fuse_section(10, 3);\n            translate([67,0,0]) fuse_section(8, 2);    // Tail cone\n        }\n    }\n}\n\nmodule wing_profile() {\n    // Single wing half profile (root to tip)\n    // Swept leading edge, straight trailing edge\n    difference() {\n        hull() {\n            translate([0,0,0]) cube([1,1,1]);\n            translate([28,0,0]) cube([1,1,1]);\n            translate([0,-18,0]) cube([1,1,1]);\n            translate([28,-3,0]) cube([1,1,1]);\n        }\n        // Hollow core\n        offset(-wall) offset(wall) offset(-wall) {\n            hull() {\n                translate([2,0,0]) cube([1,1,1]);\n                translate([26,0,0]) cube([1,1,1]);\n                translate([2,-16,0]) cube([1,1,1]);\n                translate([26,-3,0]) cube([1,1,1]);\n            }\n        }\n    }\n}\n\nmodule wings() {\n    // Main wings with dihedral\n    union() {\n        // Left wing\n        translate([5,0,1.5])\n            rotate([10,0,0])\n                wing_profile();\n        // Right wing\n        mirror([0,1,0])\n            translate([5,0,1.5])\n                rotate([10,0,0])\n                    wing_profile();\n    }\n}\n\nmodule hstab() {\n    // Horizontal stabilizer\n    difference() {\n        hull() {\n            translate([0,0,0]) cube([1,1,1]);\n            translate([18,0,0]) cube([1,1,1]);\n            translate([0,-12,0]) cube([1,1,1]);\n            translate([18,-2,0]) cube([1,1,1]);\n        }\n        offset(-wall) offset(wall) offset(-wall) {\n            hull() {\n                translate([2,0,0]) cube([1,1,1]);\n                translate([16,0,0]) cube([1,1,1]);\n                translate([2,-10,0]) cube([1,1,1]);\n                translate([16,-2,0]) cube([1,1,1]);\n            }\n        }\n    }\n}\n\nmodule tail_surfaces() {\n    // Horizontal and vertical stabilizers\n    translate([55,0,4]) rotate([-5,0,0]) {\n        // Horizontal stab\n        hstab();\n        mirror([0,1,0]) hstab();\n        \n        // Vertical fin\n        linear_extrude(height=wall)\n            polygon(points=[[0,0],[0,10],[6,10],[10,4]], convexity=3);\n    }\n}\n\nmodule engines() {\n    // Simplified under-wing engines\n    union() {\n        for (pos = [[12,-12,0], [12,12,0]]) {\n            translate(pos) rotate([90,0,0]) {\n                difference() {\n                    cylinder(h=8, r1=3.5, r2=3); // Nacelle\n                    cylinder(h=8.2, r1=2.3, r2=2); // Core hole\n                }\n                // Engine pylon\n                translate([0,0,4])\n                    rotate([-90,0,0])\n                        cube([4,2,wall], center=true);\n            }\n        }\n    }\n}\n\nmodule landing_gear() {\n    // Simplified gear fairings\n    union() {\n        // Main gear pods under wings\n        for (pos = [[20,-12,0], [20,12,0]]) {\n            translate(pos) rotate([90,0,0]) {\n                cylinder(h=3, r=2);\n                translate([0,0,3]) sphere(r=2);\n            }\n        }\n        // Nose gear\n        translate([8,0,-3]) rotate([90,0,0]) {\n            cylinder(h=2, r=1.5);\n            translate([0,0,2]) sphere(r=1.5);\n        }\n    }\n}\n\n// Assemble complete aircraft\nscale([scale_factor,scale_factor,scale_factor]) {\n    union() {\n        fuselage();\n        wings();\n        tail_surfaces();\n        engines();\n        landing_gear();\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "regional",
    "openscad_code": "// Regional Jet (CRJ-style) in realistic medium detail\n// Wings, fuselage, engines, tail, landing gear\n// 3D-printable – no steep overhangs, 1.2 mm wall thickness\n\n$fa = 1; $fs = 1;\n\nmodule main() {\n    // Fuselage\n    union() {\n        // Main tube\n        difference() {\n            hull() {\n                cylinder(h = 80, d = 14, center = true);\n                translate([0, 0, 40]) sphere(d = 14);\n                translate([0, 0, -40]) sphere(d = 14);\n            }\n            // Hollow shell\n            translate([0, 0, 0])\n                cylinder(h = 82, d = 11.6, center = true);\n        }\n\n        // Nose cone\n        translate([0, 0, 42])\n            scale([1, 1, 1.8])\n            sphere(d = 14);\n\n        // Tail cone\n        translate([0, 0, -42])\n            scale([1, 1, 1.8])\n            sphere(d = 14);\n    }\n\n    // Wings\n    wings();\n\n    // Horizontal stabilizer\n    stabilizer();\n\n    // Vertical tail\n    vertical_tail();\n\n    // Engines (under-wing pods)\n    engines();\n\n    // Landing gear nacelles\n    landing_gear();\n}\n\nmodule wings() {\n    wing_half();               // starboard\n    mirror([1, 0, 0]) wing_half();  // port\n}\n\nmodule wing_half() {\n    translate([7, 0, 0]) {\n        // Root\n        difference() {\n            translate([0, 0, 0])\n                cube([16, 3, 1.2], center = true);\n            translate([0, 0, 0])\n                cube([15.8, 2.8, 1.4], center = true);\n        }\n\n        // Mid taper\n        for (i = [0:5]) {\n            translate([8 + i*4, 0, -i*0.2]) {\n                scale([1 - i*0.12, 1, 1])\n                    cube([4, 2.5 - i*0.3, 1.2], center = true);\n            }\n        }\n\n        // Winglet\n        translate([30, 0, 0])\n            rotate([0, 0, 30])\n                cube([3, 1.2, 1.2], center = true);\n    }\n}\n\nmodule stabilizer() {\n    translate([0, 0, -38]) {\n        rotate([0, 0, 0]) {\n            // Horizontal stabilizer halves\n            difference() {\n                cube([48, 3, 1.2], center = true);\n                cube([47.6, 2.6, 1.4], center = true);\n            }\n        }\n    }\n}\n\nmodule vertical_tail() {\n    translate([0, 0, -38]) {\n        rotate([0, 0, 0]) {\n            difference() {\n                cube([1.2, 3, 18], center = true);\n                cube([1.4, 2.6, 17.6], center = true);\n            }\n        }\n    }\n}\n\nmodule engines() {\n    // Starboard engine\n    translate([20, 0, -7]) engine_pod();\n    // Port engine\n    translate([-20, 0, -7]) engine_pod();\n}\n\nmodule engine_pod() {\n    difference() {\n        // Nacelle body\n        hull() {\n            cylinder(h = 20, d = 7, center = true);\n            translate([0, 0, 10]) sphere(d = 7);\n            translate([0, 0, -10]) sphere(d = 7);\n        }\n        // Hollow\n        translate([0, 0, 0])\n            cylinder(h = 22, d = 5, center = true);\n\n        // Intake lip\n        translate([0, 0, 11])\n            cylinder(h = 1, d1 = 7, d2 = 5.2);\n    }\n\n    // Pylon\n    translate([0, 0, 0]) {\n        difference() {\n            cube([4, 3, 1.2], center = true);\n            cube([3.6, 2.6, 1.4], center = true);\n        }\n    }\n}\n\nmodule landing_gear() {\n    // Nose gear bay\n    translate([0, 0, 20]) {\n        cube([8, 2, 2], center = true);\n    }\n\n    // Main gear bays\n    translate([15, 0, 0]) {\n        cube([6, 2, 2], center = true);\n    }\n    translate([-15, 0, 0]) {\n        cube([6, 2, 2], center = true);\n    }\n}\n\nscale(0.7) main();",
    "renders": true
  },
  {
    "vehicle": "ultralight",
    "openscad_code": "// Ultralight Aircraft - Realistic Style, Medium Complexity\n// Wingspan: 90mm, Length: 75mm, Height: 25mm\n\n$fn = 32;\n\nmodule fuselage() {\n    // Main fuselage tube\n    hull() {\n        cylinder(h=60, d1=8, d2=6);\n        translate([0, 0, 60]) cylinder(h=15, d1=6, d2=4);\n    }\n    \n    // Cockpit pod\n    translate([-5, 0, 15]) rotate([0, 90, 0]) \n        cylinder(h=20, d=12);\n    \n    // Engine mount\n    translate([-10, 0, 70]) rotate([0, 90, 0])\n        cylinder(h=12, d=10);\n}\n\nmodule wings() {\n    // Main wing\n    translate([0, 0, 20]) rotate([0, 0, 0]) {\n        // Wing root\n        cube([8, 4, 2], center=true);\n        \n        // Left wing\n        translate([-35, 0, 0]) cube([60, 4, 1.5], center=true);\n        \n        // Right wing\n        translate([35, 0, 0]) cube([60, 4, 1.5], center=true);\n    }\n    \n    // Wing struts\n    for(side = [-1, 1]) {\n        translate([side * 25, 0, 5]) rotate([30 * side, 0, 0])\n            cylinder(h=30, d=2);\n    }\n}\n\nmodule tail() {\n    // Horizontal stabilizer\n    translate([0, 0, 65]) rotate([0, 0, 0]) {\n        cube([20, 3, 1], center=true);\n        \n        // Elevators\n        translate([0, 0, 0]) cube([15, 8, 0.5], center=true);\n    }\n    \n    // Vertical stabilizer\n    translate([0, 0, 65]) rotate([0, 90, 0])\n        cube([12, 2, 1], center=true);\n}\n\nmodule landing_gear() {\n    // Main wheels\n    for(side = [-1, 1]) {\n        // Strut\n        translate([side * 10, 0, 0]) rotate([0, 0, 75])\n            cylinder(h=15, d=2);\n        \n        // Wheel\n        translate([side * 10, 0, -12]) rotate([90, 0, 0])\n            cylinder(h=3, d=8);\n    }\n    \n    // Tail wheel\n    translate([0, 0, -5]) rotate([90, 0, 0])\n        cylinder(h=2, d=5);\n}\n\nmodule propeller() {\n    translate([-15, 0, 70]) rotate([0, 90, 0]) {\n        for(i = [0:60:359]) {\n            rotate([0, 0, i]) {\n                translate([0, 0, -1]) cube([20, 2, 1]);\n            }\n        }\n        \n        // Hub\n        cylinder(h=4, d=4);\n    }\n}\n\nmodule pilot() {\n    translate([-5, 0, 20]) {\n        // Head\n        sphere(d=6);\n        \n        // Body\n        translate([0, 0, -8]) cylinder(h=12, d=8);\n    }\n}\n\n// Assembly\nunion() {\n    fuselage();\n    wings();\n    tail();\n    landing_gear();\n    propeller();\n    pilot();\n}",
    "renders": true
  },
  {
    "vehicle": "microlight",
    "openscad_code": "// OpenSCAD Microlight (medium complexity, realistic style)\n// Size: ~80 mm wingspan, 3D-printable with 0.4 mm nozzle and 0.2 mm layers\n\n// General parameters\nscale_factor = 1;          // global scale\nwing_span = 80 * scale_factor;\nfuselage_len = 55 * scale_factor;\nprop_diam = 18 * scale_factor;\nwall = 1.2 * scale_factor;  // printable wall thickness\n\n// Main module\nmodule microlight() {\n    // Fuselage pod\n    color(\"silver\")\n    translate([0, 0, 5])\n    hull() {\n        // cockpit\n        translate([0, 0, 4])\n            scale([1, 0.8, 0.7])\n            sphere(d = 16);\n        // tail boom\n        translate([-20, 0, 0])\n            rotate([0, 0, 10])\n            cylinder(h = 25, d1 = 8, d2 = 6);\n    }\n\n    // Main wing\n    color(\"white\")\n    translate([0, 0, 8])\n    difference() {\n        union() {\n            // center section\n            cube([22, 12, 1.6], center = true);\n            // tapered tips\n            hull() {\n                translate([-11, 0, 0])\n                    cube([1, 12, 1.6], center = true);\n                translate([-wing_span/2, 0, 0])\n                    cube([1, 4, 1.6], center = true);\n            }\n            mirror([1, 0, 0]) {\n                hull() {\n                    translate([-11, 0, 0])\n                        cube([1, 12, 1.6], center = true);\n                    translate([-wing_span/2, 0, 0])\n                        cube([1, 4, 1.6], center = true);\n                }\n            }\n        }\n        // internal lightening holes\n        for (x = [-20:10:20])\n            translate([x, 0, 0])\n                cylinder(h = 3, d = 4, center = true);\n    }\n\n    // Struts\n    color(\"gray\")\n    for (x = [-20, 20])\n        translate([x, 0, 0])\n            rotate([45, 0, 0])\n            cylinder(h = 12, d = 1.6);\n\n    // Propeller\n    color(\"black\")\n    translate([fuselage_len/2 - 3, 0, 8])\n    cylinder(h = 2, d = prop_diam);\n\n    // Simple two-blade prop\n    color(\"gray\")\n    translate([fuselage_len/2 - 2, 0, 8])\n    for (a = [0, 120, 240])\n        rotate([90, 0, a])\n        cube([prop_diam/2, 1.2, 0.8], center = true);\n\n    // Tailplane\n    color(\"white\")\n    translate([-35, 0, 10])\n    difference() {\n        cube([20, 30, 1.2], center = true);\n        // rudder cutout\n        translate([5, 0, 0])\n            cube([10, 6, 2], center = true);\n    }\n\n    // Vertical stabilizer\n    color(\"white\")\n    translate([-35, 0, 15])\n    cube([8, 1.2, 10], center = true);\n\n    // Undercarriage\n    color(\"black\")\n    // main wheels\n    for (y = [-12, 12])\n        translate([0, y, 0]) {\n            cylinder(h = 4, d = 8);\n            translate([0, 0, 2])\n                sphere(d = 8);\n            // small strut\n            translate([0, 0, 4])\n                cylinder(h = 8, d = 1.6);\n        }\n    // tail wheel\n    translate([-45, 0, 0])\n        sphere(d = 4);\n}\n\nmicrolight();",
    "renders": true
  },
  {
    "vehicle": "hangglider",
    "openscad_code": "// Hang-glider – realistic, medium complexity\n// Wingspan ~90 mm, printable in one piece\n\n// Parameters\nwing_span = 90;           // overall wing span\nwing_chord = 25;          // front-to-back wing length\ntube_d = 2;               // frame tube diameter\nfabric_t = 0.8;           // fabric thickness\nkeel_l = 70;              // length of central keel\n\n// Module: a hollow cylinder for light weight\nmodule tube(h, d=tube_d) {\n    difference() {\n        cylinder(h=h, d=d, $fn=12);\n        translate([0,0,-0.1])\n            cylinder(h=h+0.2, d=d-1, $fn=12);\n    }\n}\n\n// Main wing fabric – delta shape\nmodule wing_fabric() {\n    // Two fabric panels stitched together\n    for (lr = [0,1]) {\n        mirror([lr?-1:0,0,0]) {\n            translate([0,0,0])\n                linear_extrude(height=fabric_t)\n                    polygon(points=[[0,0],\n                                    [wing_span/2,0],\n                                    [wing_span/4,wing_chord]]);\n        }\n    }\n}\n\n// Leading-edge tube frame\nmodule leading_edge() {\n    hull() {\n        translate([wing_span/2,0,0])\n            rotate([90,0,0]) tube(wing_chord);\n        translate([-wing_span/2,0,0])\n            rotate([90,0,0]) tube(wing_chord);\n    }\n}\n\n// Keel beam\nmodule keel() {\n    translate([0,0,-tube_d/2])\n        rotate([90,0,0])\n            tube(keel_l);\n}\n\n// Crossbar\nmodule crossbar() {\n    translate([0,wing_chord/2,-tube_d/2])\n        rotate([90,0,90])\n            tube(wing_span/2);\n}\n\n// Pilot harness / control bar simplified\nmodule control_frame() {\n    // A-frame\n    translate([0,wing_chord-5,-10])\n        rotate([0,30,0])\n            tube(20);\n    translate([0,wing_chord-5,-10])\n        rotate([0,-30,0])\n            tube(20);\n    // base bar\n    translate([0,wing_chord-5+20*cos(30),-10-20*sin(30)])\n        rotate([0,0,90])\n            tube(20);\n}\n\n// Final assembly\nunion() {\n    wing_fabric();\n    leading_edge();\n    keel();\n    crossbar();\n    control_frame();\n}",
    "renders": true
  },
  {
    "vehicle": "paraglider",
    "openscad_code": "// Paraglider - Realistic Style (Medium Complexity)\n// Designed for 3D printing - wings have 1mm thickness\n// Overall size ~80mm wingspan\n\n$fn = 32;\n\n// Main assembly\nmodule paraglider() {\n    union() {\n        // Wing canopy\n        wing();\n        \n        // Lines connecting wing to harness\n        lines();\n        \n        // Pilot harness/seat\n        harness();\n        \n        // Control handles\n        control_handles();\n    }\n}\n\n// Main wing canopy - elliptical shape with realistic curves\nmodule wing() {\n    color(\"royalblue\") {\n        // Top surface of wing\n        translate([0, 0, 15]) {\n            difference() {\n                // Main wing shape\n                scale([1, 0.6, 0.2]) sphere(d = 80);\n                \n                // Cut bottom flat\n                translate([0, 0, -8]) cube([100, 100, 16], center = true);\n                \n                // Air intakes\n                for (i = [-1, 0, 1]) {\n                    translate([i * 20, 0, -2]) {\n                        rotate([0, 10, 0]) \n                        scale([1, 0.5, 0.3]) sphere(d = 12);\n                    }\n                }\n            }\n        }\n        \n        // Wing tip reinforcements\n        for (side = [-1, 1]) {\n            translate([side * 35, 0, 14]) {\n                rotate([0, 0, side * 20])\n                scale([1, 0.3, 0.15]) sphere(d = 15);\n            }\n        }\n    }\n}\n\n// Lines connecting wing to harness\nmodule lines() {\n    color(\"gray\", 0.8) {\n        // Main lines (4 groups)\n        for (i = [-1.5, -0.5, 0.5, 1.5]) {\n            for (j = [-1, 1]) {\n                hull() {\n                    translate([i * 15, j * 25, 14]) sphere(d = 1);\n                    translate([i * 8, j * 8, -5]) sphere(d = 1);\n                }\n            }\n        }\n        \n        // Brake lines to wing tips\n        for (side = [-1, 1]) {\n            hull() {\n                translate([side * 35, side * 15, 14]) sphere(d = 1);\n                translate([side * 20, side * 25, -5]) sphere(d = 1);\n            }\n        }\n    }\n}\n\n// Pilot harness/seat\nmodule harness() {\n    color(\"black\") {\n        // Main seat\n        difference() {\n            translate([0, 0, -5]) scale([1.2, 1, 1]) sphere(d = 15);\n            translate([0, 0, -12]) cube([20, 20, 14], center = true);\n        }\n        \n        // Seat back\n        translate([0, -8, -2]) rotate([80, 0, 0]) \n        scale([1.5, 1, 0.5]) cylinder(h = 12, d = 10);\n        \n        // Carabiners\n        for (side = [-1, 1]) {\n            translate([side * 8, 0, -5]) {\n                rotate([90, 0, 0]) \n                difference() {\n                    cylinder(h = 4, d = 4);\n                    translate([0, 0, -1]) cube([4, 2, 6], center = true);\n                }\n            }\n        }\n    }\n}\n\n// Control handles/brake toggles\nmodule control_handles() {\n    color(\"red\") {\n        for (side = [-1, 1]) {\n            translate([side * 20, side * 25, -12]) {\n                // Handle grip\n                rotate([0, 90, 0]) cylinder(h = 8, d = 4);\n                \n                // Handle base\n                translate([0, 0, 2]) sphere(d = 5);\n                \n                // Pulley wheel\n                translate([0, 4, 0]) rotate([90, 0, 0]) \n                cylinder(h = 3, d = 6);\n            }\n        }\n    }\n}\n\n// Generate the complete model\nparaglider();",
    "renders": true
  },
  {
    "vehicle": "sailplane",
    "openscad_code": "// Sailplane - Realistic Medium Complexity\n// Overall dimensions: ~90mm wingspan, ~70mm length\n\n// Wing profile module\nmodule wing_profile(span, root_chord, tip_chord, thickness) {\n    difference() {\n        // Main wing shape\n        hull() {\n            translate([-root_chord/2, 0, 0]) cube([root_chord, span/2, thickness]);\n            translate([-tip_chord/2, span/2, 0]) cube([tip_chord, 0.1, thickness*0.7]);\n        }\n        \n        // Leading edge taper\n        translate([root_chord/2-2, 0, -1]) cube([4, span/2+1, thickness+2]);\n    }\n}\n\n// Fuselage module\nmodule fuselage() {\n    // Main body\n    hull() {\n        translate([0, 0, 0]) sphere(d=8, $fn=16);\n        translate([0, 0, -20]) sphere(d=6, $fn=16);\n        translate([0, 0, -40]) sphere(d=3, $fn=16);\n    }\n    \n    // Nose cone\n    translate([0, 0, 5]) rotate([180, 0, 0]) \n        cylinder(h=10, d1=8, d2=2, $fn=16);\n    \n    // Tail boom extension\n    translate([0, 0, -45]) cylinder(h=15, d=3, $fn=12);\n}\n\n// Tail surfaces\nmodule tail_surfaces() {\n    // Horizontal stabilizer\n    rotate([0, 5, 0]) {\n        translate([0, 0, -55]) \n            wing_profile(35, 18, 12, 2);\n        mirror([0, 1, 0]) \n            translate([0, 0, -55]) \n                wing_profile(35, 18, 12, 2);\n    }\n    \n    // Vertical stabilizer\n    translate([0, 0, -55]) rotate([0, 90, 0]) \n        wing_profile(12, 10, 8, 1.5);\n}\n\n// Cockpit\nmodule cockpit() {\n    difference() {\n        // Main canopy\n        translate([0, 0, -10]) \n            scale([1, 0.8, 0.6]) \n                sphere(d=12, $fn=16);\n        \n        // Cutout for pilot\n        translate([0, 0, -15]) \n            cube([8, 6, 8], center=true);\n    }\n}\n\n// Wing assembly\nmodule wings() {\n    // Center section\n    wing_profile(20, 25, 20, 3);\n    \n    // Left wing\n    translate([0, 10, 0]) wing_profile(35, 20, 15, 2.5);\n    \n    // Right wing\n    mirror([0, 1, 0]) translate([0, 10, 0]) wing_profile(35, 20, 15, 2.5);\n}\n\n// Landing skid\nmodule landing_skid() {\n    translate([0, 0, -3]) {\n        // Main skid\n        hull() {\n            cube([3, 3, 2], center=true);\n            translate([0, 0, -15]) cube([2, 2, 2], center=true);\n        }\n        \n        // Front support\n        translate([0, 0, 8]) cube([2, 3, 1], center=true);\n    }\n}\n\n// Main assembly\nunion() {\n    // Fuselage\n    fuselage();\n    \n    // Wings\n    translate([0, 0, -5]) wings();\n    \n    // Tail surfaces\n    tail_surfaces();\n    \n    // Cockpit\n    cockpit();\n    \n    // Landing skid\n    landing_skid();\n}",
    "renders": true
  },
  {
    "vehicle": "warplane",
    "openscad_code": "// Realistic-style warplane (P-51 Mustang inspired)\n// Medium complexity - 3D printable with no overhangs\n\n$fn=32;\n\n// Main dimensions\nfuselage_length = 80;\nfuselage_width = 8;\nwing_span = 70;\nwing_thickness = 3;\n\nmodule fuselage() {\n    // Main body - tapered cylinder\n    hull() {\n        // Cockpit section\n        translate([0, 0, 8]) \n            scale([1, 0.8, 1]) \n            sphere(r=4);\n        \n        // Front nose\n        translate([fuselage_length/2 - 5, 0, 0]) \n            rotate([0, 90, 0]) \n            cylinder(h=10, r1=3, r2=1);\n        \n        // Tail section\n        translate([-fuselage_length/2 + 5, 0, 0]) \n            rotate([0, 90, 0]) \n            cylinder(h=10, r1=3, r2=1.5);\n    }\n    \n    // Engine exhaust\n    difference() {\n        translate([fuselage_length/2 - 8, 0, -1]) \n            cube([3, 1.5, 2]);\n        translate([fuselage_length/2 - 7, 0.5, 0]) \n            cylinder(h=4, r=0.3);\n    }\n}\n\nmodule wings() {\n    // Main wings\n    translate([0, 0, 2]) {\n        // Left wing\n        translate([-5, -wing_span/2, 0]) \n            rotate([0, 0, -2]) \n            cube([10, wing_span/2, wing_thickness]);\n        \n        // Right wing\n        translate([-5, 0, 0]) \n            rotate([0, 0, 2]) \n            cube([10, wing_span/2, wing_thickness]);\n    }\n    \n    // Wing tips\n    translate([-5, wing_span/2, 2]) \n        sphere(r=wing_thickness/2);\n    translate([-5, -wing_span/2, 2]) \n        sphere(r=wing_thickness/2);\n}\n\nmodule tail() {\n    // Horizontal stabilizer\n    translate([-fuselage_length/2 + 5, 0, 6]) {\n        rotate([0, 0, 0]) \n            cube([15, 25, wing_thickness/2]);\n    }\n    \n    // Vertical stabilizer\n    translate([-fuselage_length/2 + 5, 0, 10]) {\n        rotate([0, 0, 0]) \n            cube([15, wing_thickness/2, 15]);\n    }\n}\n\nmodule propeller() {\n    // Propeller hub\n    translate([fuselage_length/2, 0, 0]) \n        cylinder(h=3, r=2);\n    \n    // Propeller blades (3 blades)\n    for(i=[0:120:359]) {\n        rotate([0, 0, i]) {\n            translate([fuselage_length/2 + 2, 0, 0]) \n                rotate([90, 0, 0]) \n                    scale([1, 0.1, 4]) \n                    sphere(r=1);\n        }\n    }\n}\n\nmodule landing_gear() {\n    // Main landing gear\n    translate([-10, -wing_span/3, -3]) {\n        cylinder(h=5, r=1);\n        sphere(r=1.5);\n    }\n    \n    translate([-10, wing_span/3, -3]) {\n        cylinder(h=5, r=1);\n        sphere(r=1.5);\n    }\n    \n    // Tail wheel\n    translate([-fuselage_length/2 + 5, 0, -2]) {\n        cylinder(h=3, r=0.8);\n        sphere(r=1);\n    }\n}\n\nmodule cockpit() {\n    // Cockpit canopy\n    translate([5, 0, 9]) {\n        scale([1.2, 1, 0.8]) \n            sphere(r=4);\n    }\n    \n    // Windshield\n    translate([10, 0, 8]) {\n        rotate([0, -20, 0]) \n            cube([8, 6, 0.5]);\n    }\n}\n\n// Assembly\nunion() {\n    // Main components\n    fuselage();\n    wings();\n    tail();\n    propeller();\n    landing_gear();\n    cockpit();\n    \n    // Wing guns\n    for(side=[-1, 1]) {\n        translate([-5, side * wing_span/3, 2]) {\n            cylinder(h=8, r=0.5);\n        }\n    }\n}\n\n// Scale for 3D printing\nscale(0.6)",
    "renders": true
  },
  {
    "vehicle": "interceptor",
    "openscad_code": "// Realistic Interceptor - Medium Complexity\n// Approx 90mm length, 60mm wingspan\n\n$fn = 32;\n\n// Main assembly\nmodule interceptor() {\n    // Fuselage\n    union() {\n        // Main body\n        difference() {\n            hull() {\n                // Front cone\n                rotate([0, 90, 0]) \n                    cylinder(h=20, d1=8, d2=12);\n                \n                // Center body\n                translate([20, 0, 0])\n                    rotate([0, 90, 0])\n                    cylinder(h=50, d=12);\n                \n                // Rear\n                translate([70, 0, 0])\n                    rotate([0, 90, 0])\n                    cylinder(h=15, d1=12, d2=8);\n            }\n            \n            // Cockpit cutout\n            translate([35, 0, 4])\n                scale([1.2, 0.8, 0.6])\n                sphere(d=8);\n            \n            // Engine exhaust\n            translate([80, 0, 0])\n                rotate([0, 90, 0])\n                cylinder(h=5, d=6);\n        }\n        \n        // Cockpit\n        translate([35, 0, 5.5])\n            scale([1, 0.7, 0.5])\n            sphere(d=10);\n        \n        // Wings\n        union() {\n            // Left wing\n            translate([45, -12, -2])\n                difference() {\n                    hull() {\n                        cube([25, 2, 8]);\n                        translate([20, -15, 0])\n                            cube([8, 2, 8]);\n                    }\n                    // Wing tip cutout\n                    translate([30, -15, 3])\n                        cube([5, 3, 2]);\n                }\n            \n            // Right wing (mirror)\n            mirror([0, 1, 0])\n                translate([45, -12, -2])\n                    difference() {\n                        hull() {\n                            cube([25, 2, 8]);\n                            translate([20, -15, 0])\n                                cube([8, 2, 8]);\n                        }\n                        translate([30, -15, 3])\n                            cube([5, 3, 2]);\n                    }\n        }\n        \n        // Vertical stabilizers\n        for (side = [-1, 1]) {\n            mirror([0, side, 0])\n                translate([65, 0, 0])\n                    hull() {\n                        cube([2, 1, 10]);\n                        translate([0, 0, 10])\n                            cube([6, 0.5, 8]);\n                    }\n        }\n        \n        // Engine intakes\n        for (side = [-1, 1]) {\n            translate([25, side*6, -3])\n                difference() {\n                    // Intake duct\n                    rotate([0, -20, 0])\n                        cylinder(h=15, d1=6, d2=4);\n                    // Internal space\n                    rotate([0, -20, 0])\n                        cylinder(h=15, d1=4, d2=2);\n                }\n        }\n        \n        // Missile pylons\n        module pylon(x, y) {\n            translate([x, y, -3])\n                cube([8, 4, 3]);\n        }\n        \n        // Left pylons\n        pylon(40, -8);\n        pylon(50, -10);\n        \n        // Right pylons\n        pylon(40, 8);\n        pylon(50, 10);\n        \n        // Missiles\n        module missile(x, y, angle) {\n            translate([x, y, -6])\n                rotate([0, 0, angle])\n                union() {\n                    // Body\n                    cylinder(h=18, d=3);\n                    // Warhead\n                    translate([0, 0, 18])\n                        cylinder(h=5, d=4);\n                    // Fins\n                    for (a = [0:90:270]) {\n                        rotate([0, 0, a])\n                            translate([0, 2, 7])\n                                cube([0.5, 3, 4]);\n                    }\n                }\n        }\n        \n        // Arm missiles\n        missile(44, -8, 15);\n        missile(54, -10, 15);\n        missile(44, 8, -15);\n        missile(54, 10, -15);\n        \n        // Landing gear bays\n        difference() {\n            // Main gear bay\n            translate([45, 0, -2])\n                cube([15, 8, 1]);\n            // Gear bay doors\n            translate([45, 4, -1.5])\n                cube([15, 0.5, 0.5]);\n            translate([45, -4, -1.5])\n                cube([15, 0.5, 0.5]);\n        }\n        \n        // Nose gear bay\n        translate([25, 0, -3])\n            cube([8, 3, 1]);\n    }\n}\n\n// Generate model\ninterceptor();",
    "renders": true
  },
  {
    "vehicle": "strikecraft",
    "openscad_code": "// Strikecraft – realistic, medium complexity\n// Dimensions ~70 mm long, wingspan ~50 mm\n\n$fn=50;        // smoother curves\nwall=1.2;      // 3D-print friendly wall thickness\n\n// Main hull\nmodule hull() {\n    // central fuselage\n    difference() {\n        union() {\n            // main body\n            hull_profile();\n            // dorsal spine\n            translate([0,0,5]) hull_profile(0.8,0.9);\n            // ventral bulge (engine fairing)\n            translate([0,0,-3]) hull_profile(0.9,0.6);\n        }\n        // cockpit cavity\n        translate([-10,0,3]) rotate([0,90,0])\n            cylinder(h=20,d=6,center=true);\n    }\n}\n\n// reusable fuselage cross-section\nmodule hull_profile(sc=1,sh=1) {\n    scale([sc,sc,sh])\n    hull_poly();\n}\n\nmodule hull_poly() {\n    // lozenge shape\n    hull() {\n        translate([-18,0,0]) sphere(d=8);\n        translate([ 18,0,0]) sphere(d=8);\n        translate([-18,0,-2]) sphere(d=7);\n        translate([ 18,0,-2]) sphere(d=7);\n    }\n}\n\n// wings\nmodule wings() {\n    union() {\n        wing(1);   // port\n        wing(-1);  // starboard\n    }\n}\n\nmodule wing(side=1) {\n    // root\n    translate([5,side*10,0])\n    rotate([0,0,side*5])\n    difference() {\n        scale([25,12,2]) cube(center=true);\n        translate([0,0,1.5]) scale([24.5,11.5,1]) cube(center=true); // hollow\n    }\n    // tip missile rail\n    translate([30,side*18,0])\n    rotate([0,0,side*10])\n    cube([12,3,2],center=true);\n}\n\n// twin vertical stabilizers\nmodule tails() {\n    tail(8);\n    tail(-8);\n}\n\nmodule tail(offset) {\n    translate([-18,offset,4])\n    rotate([0,90-offset/2,0])\n    difference() {\n        cube([12,wall,8],center=true);\n        translate([0,0,4]) cube([11.8,wall+0.1,7.8],center=true); // hollow\n    }\n}\n\n// engine nacelles\nmodule engines() {\n    engine(1);\n    engine(-1);\n}\n\nmodule engine(side=1) {\n    // main nacelle\n    translate([-8,side*7,-5])\n    rotate([0,90,0])\n    difference() {\n        cylinder(h=20,d=8);\n        translate([0,0,-wall]) cylinder(h=20.2,d=8-2*wall);\n    }\n    // exhaust nozzle\n    translate([-8,side*7,-15])\n    rotate([0,90,0])\n    cylinder(h=6,d1=8,d2=10);\n}\n\n// cockpit glazing\nmodule cockpit() {\n    translate([-10,0,3])\n    rotate([0,90,0])\n    scale([1,0.7,1])\n    sphere(d=6);\n}\n\n// sensor nose\nmodule radome() {\n    translate([18,0,0])\n    rotate([0,90,0])\n    cylinder(h=10,d1=8,d2=4);\n}\n\n// undercarriage hardpoints\nmodule pylons() {\n    for(side=[-1,1])\n        translate([5,side*12,-4])\n        cube([4,2,3],center=true);\n}\n\n// assembly\nunion() {\n    hull();\n    wings();\n    tails();\n    engines();\n    cockpit();\n    radome();\n    pylons();\n}",
    "renders": true
  },
  {
    "vehicle": "gunship",
    "openscad_code": "// Realistic Gunship - Medium Complexity\n// Designed for 3D printing with 1mm walls and no overhangs\n\n$fn = 32; // Smooth curves\nwall_thickness = 1.2;\n\nmodule main_fuselage() {\n    // Main body - elongated ellipsoid shape\n    hull() {\n        translate([0, 0, 0])\n            scale([1, 0.7, 0.3])\n            sphere(r=10);\n        translate([25, 0, 0])\n            scale([1.2, 0.8, 0.35])\n            sphere(r=8);\n    }\n    \n    // Tail boom extension\n    translate([35, 0, 0])\n        rotate([0, 0, 0])\n        cylinder(h=20, r1=4, r2=2);\n}\n\nmodule cockpit() {\n    // Forward cockpit canopy\n    translate([15, 0, 3])\n        rotate([0, 0, 0])\n        scale([1, 0.8, 0.5])\n        sphere(r=6);\n    \n    // Side windows\n    for(side = [-1, 1]) {\n        translate([12, side*4, 3])\n            rotate([0, side*15, 0])\n            scale([0.3, 1, 0.5])\n            cylinder(h=6, r=2, $fn=4);\n    }\n}\n\nmodule wings() {\n    // Main wings\n    for(side = [-1, 1]) {\n        // Wing root\n        translate([0, side*7, 0])\n            rotate([0, 0, side*-5])\n            cube([25, 3, 1.5], center=true);\n        \n        // Wing tip\n        translate([20, side*12, 0])\n            rotate([0, 0, side*-5])\n            cube([10, 2, 1], center=true);\n        \n        // Wing pylon\n        translate([15, side*10, -2])\n            cylinder(h=3, r=1.5);\n    }\n}\n\nmodule tail() {\n    // Vertical stabilizer\n    translate([50, 0, 2])\n        rotate([0, 0, 0])\n        cube([0.8, 8, 6], center=true);\n    \n    // Horizontal stabilizers\n    for(side = [-1, 1]) {\n        translate([45, side*5, 0])\n            rotate([0, side*10, 0])\n            cube([12, 0.8, 3], center=true);\n    }\n}\n\nmodule rotors() {\n    // Main rotor hub\n    translate([0, 0, 8])\n        cylinder(h=3, r=3);\n    \n    // Main rotor blades (4 blades)\n    for(i = [0:3]) {\n        rotate([0, 0, i*90])\n            translate([0, 0, 9.5])\n                cube([30, 1, 0.3], center=true);\n    }\n    \n    // Tail rotor hub\n    translate([55, 0, 2])\n        rotate([90, 0, 0])\n        cylinder(h=2, r=1.5);\n    \n    // Tail rotor blades\n    for(i = [0:1]) {\n        rotate([90, 0, i*180])\n            translate([55, 0, 2])\n                cube([8, 0.6, 0.2], center=true);\n    }\n}\n\nmodule weapons() {\n    // Chin turret\n    translate([18, 0, -3])\n        rotate([90, 0, 0])\n        cylinder(h=2, r=2);\n    \n    // Gun barrel\n    translate([18, 0, -6])\n        cylinder(h=8, r=0.8);\n    \n    // Side rocket pods\n    for(side = [-1, 1]) {\n        translate([15, side*10, -3])\n            cylinder(h=8, r=1.5);\n        \n        // Rocket tubes\n        for(i = [0:3]) {\n            translate([15, side*10, -2-i*1.8])\n                rotate([90, 0, 0])\n                cylinder(h=2, r=0.4);\n        }\n    }\n}\n\nmodule landing_gear() {\n    // Front gear struts\n    for(side = [-1, 1]) {\n        translate([10, side*4, -4])\n            cylinder(h=4, r=0.5);\n    }\n    \n    // Rear gear struts\n    for(side = [-1, 1]) {\n        translate([35, side*6, -4])\n            cylinder(h=4, r=0.5);\n    }\n    \n    // Skids\n    translate([22.5, 0, -4])\n        cube([35, 15, 1], center=true);\n}\n\n// Assembly\nunion() {\n    main_fuselage();\n    cockpit();\n    wings();\n    tail();\n    rotors();\n    weapons();\n    landing_gear();\n}",
    "renders": true
  },
  {
    "vehicle": "recon",
    "openscad_code": "// Realistic Recon Drone - Medium Complexity\n// Designed for 3D printing, 70mm wingspan\n\n$fn = 36;\nwall_thickness = 1.2;\n\nmodule main_body() {\n    // Central fuselage\n    difference() {\n        hull() {\n            translate([-5, 0, 0]) cube([25, 15, 8], center=true);\n            translate([10, 0, 0]) cube([15, 12, 6], center=true);\n        }\n        \n        // Battery compartment hollow\n        translate([5, 0, -2]) cube([20, 10, 4], center=true);\n    }\n}\n\nmodule prop_guard() {\n    // Motor mount with guard ring\n    difference() {\n        cylinder(h=4, r=8);\n        cylinder(h=5, r=6);\n    }\n    \n    // Guard ring\n    translate([0, 0, 2]) \n        difference() {\n            cylinder(h=2, r=12);\n            cylinder(h=3, r=10.5);\n        }\n    \n    // Support arms\n    for(i=[0:45:315]) {\n        rotate([0, 0, i]) \n            translate([9, 0, 1]) \n                cube([4, 2, 2], center=true);\n    }\n}\n\nmodule wing_section() {\n    // Main wing with airfoil shape\n    difference() {\n        hull() {\n            translate([0, 0, 0]) cube([30, 2, 6], center=true);\n            translate([0, 0, 2]) cube([30, 1, 2], center=true);\n        }\n        \n        // Lightening holes\n        for(i=[-10:10:10]) {\n            translate([i, 0, 1]) \n                cylinder(h=3, r=1.5, center=true);\n        }\n    }\n    \n    // Wing tip\n    translate([15, 0, 0]) \n        rotate([0, 90, 0]) \n            cylinder(h=3, r1=3, r2=1);\n}\n\nmodule camera_pod() {\n    // Gimbal mount\n    translate([0, 0, -5]) {\n        difference() {\n            sphere(r=4);\n            sphere(r=3);\n        }\n        \n        // Camera lens\n        rotate([90, 0, 0]) {\n            cylinder(h=6, r1=3, r2=2);\n            translate([0, 0, 6]) \n                cylinder(h=2, r=2);\n        }\n    }\n}\n\nmodule landing_skid() {\n    // Simple skid with spring\n    translate([-5, 0, -6]) {\n        // Main skid\n        difference() {\n            cube([25, 3, 2], center=true);\n            translate([0, 0, -0.5]) \n                cube([23, 2.5, 2], center=true);\n        }\n        \n        // Front support\n        translate([10, 0, 1]) \n            cube([2, 2, 4], center=true);\n    }\n}\n\n// Main assembly\nunion() {\n    // Fuselage\n    main_body();\n    \n    // Wings\n    translate([5, 0, 2]) {\n        wing_section();\n        mirror([0, 1, 0]) wing_section();\n    }\n    \n    // Motors with guards\n    translate([5, 12, 4]) prop_guard();\n    translate([5, -12, 4]) prop_guard();\n    \n    // Camera under nose\n    translate([10, 0, 0]) camera_pod();\n    \n    // Landing gear\n    landing_skid();\n    \n    // Antenna\n    translate([-8, 0, 4]) \n        cylinder(h=8, r=0.5);\n}\n\n// Print orientation marker\ntranslate([-15, 0, -8]) \n    rotate([90, 0, 0]) \n        linear_extrude(height=0.5) \n            text(\"TOP\", size=3);",
    "renders": true
  },
  {
    "vehicle": "surveillance",
    "openscad_code": "// Surveillance Camera - Realistic Style (Medium Complexity)\n\n$fn = 48;\n\n// Main camera body module\nmodule camera_body() {\n    difference() {\n        // Main housing - rounded rectangular shape\n        translate([0, 0, 15])\n            scale([1, 0.7, 0.5])\n            sphere(d=40);\n        \n        // Front lens opening\n        translate([0, 0, 25])\n            cylinder(h=20, d=20);\n        \n        // Back cable hole\n        translate([0, -15, 15])\n            rotate([90, 0, 0])\n            cylinder(h=10, d=8);\n    }\n    \n    // Lens housing protrusion\n    translate([0, 0, 25])\n        cylinder(h=15, d1=22, d2=18);\n}\n\n// Lens assembly module\nmodule lens() {\n    // Outer lens ring\n    difference() {\n        cylinder(h=8, d=18);\n        translate([0, 0, -1])\n            cylinder(h=10, d=14);\n    }\n    \n    // Inner lens element\n    translate([0, 0, 4])\n        cylinder(h=2, d=12);\n    \n    // Glass lens surface\n    translate([0, 0, 6])\n        cylinder(h=0.5, d=12);\n}\n\n// IR LED modules\nmodule ir_leds() {\n    for(i = [-1, 1]) {\n        translate([i * 12, 8, 20])\n            cylinder(h=3, d=6);\n        translate([i * 12, 8, 23])\n            cylinder(h=1, d=4);\n    }\n}\n\n// Mounting bracket module\nmodule mounting_bracket() {\n    // Base plate\n    translate([0, 0, -5])\n        cube([50, 40, 10], center=true);\n    \n    // Mounting holes\n    for(x = [-20, 20]) {\n        for(y = [-15, 15]) {\n            translate([x, y, -5])\n                cylinder(h=12, d=3.5);\n        }\n    }\n    \n    // Support arms\n    for(angle = [30, -30]) {\n        rotate([0, 0, angle])\n            translate([0, -15, 0])\n                cube([8, 30, 15], center=true);\n    }\n    \n    // Pivot joint\n    translate([0, 0, -5])\n        rotate([90, 0, 0])\n        cylinder(h=50, d=8);\n}\n\n// Status LED\nmodule status_led() {\n    translate([15, 0, 18])\n        cylinder(h=2, d=4);\n    translate([15, 0, 20])\n        cylinder(h=0.5, d=3);\n}\n\n// Cooling vents\nmodule cooling_vents() {\n    for(i = [-30:10:30]) {\n        translate([i, 0, 10])\n            rotate([0, 90, 0])\n            cube([15, 2, 5]);\n    }\n}\n\n// Antenna module\nmodule antenna() {\n    translate([-25, 0, 25])\n        rotate([0, 45, 0])\n        cylinder(h=20, d=2);\n    translate([-25 - 20 * cos(45), 0, 25 + 20 * sin(45)])\n        sphere(d=3);\n}\n\n// Assemble the complete surveillance camera\nunion() {\n    camera_body();\n    \n    translate([0, 0, 33])\n        lens();\n    \n    ir_leds();\n    \n    status_led();\n    \n    cooling_vents();\n    \n    antenna();\n    \n    mounting_bracket();\n}",
    "renders": true
  },
  {
    "vehicle": "patrol",
    "openscad_code": "// Patrol Boat – realistic, medium complexity\n// All dimensions in millimetres; largest dimension ≈ 90 mm\n// Designed for FDM printing: 1.2 mm walls, no unsupported angles > 45°\n\nhull_length = 90;\nhull_width  = 25;\nhull_height = 12;\n\nwall = 1.2;          // uniform wall thickness\ndeck_clear = 1.5;    // freeboard above deck\n\nmodule rounded_box(l, w, h, r) {\n    // helper: rounded cuboid with filleted edges\n    hull() {\n        for(dx = [0, l], dy = [0, w], dz = [0, h])\n            translate([dx, dy, dz])\n                sphere(r, $fn = 16);\n    }\n}\n\nmodule hull() {\n    difference() {\n        // main hull core\n        hull_core();\n        // cavity for electronics / ballast\n        translate([wall, wall, wall])\n            scale([1 - 2*wall/hull_length,\n                   1 - 2*wall/hull_width,\n                   1 - 2*wall/hull_height])\n                hull_core();\n    }\n}\n\nmodule hull_core() {\n    // boat-shaped hull with slight taper aft\n    linear_extrude(height = hull_height, convexity = 4)\n        hull() {\n            // bow\n            translate([0, hull_width/2, 0]) circle(r = hull_width/2, $fn = 32);\n            translate([0, -hull_width/2, 0]) circle(r = hull_width/2, $fn = 32);\n            // stern\n            translate([hull_length, 0, 0]) square([0, hull_width], center = true);\n        }\n}\n\nmodule superstructure() {\n    // pilot house\n    house_w = hull_width * 0.7;\n    house_l = 20;\n    house_h = 10;\n    translate([hull_length/2 - 8, 0, hull_height + deck_clear])\n        difference() {\n            rounded_box(house_l, house_w, house_h, 2);\n            // door\n            translate([house_l/2 - 2, 0, 0])\n                cube([wall*2, house_w*0.4, house_h*0.6], center = true);\n            // windows\n            for(y = [-house_w/3, house_w/3])\n                translate([0, y, house_h/2])\n                    cube([house_l*0.8, wall*1.5, house_h*0.3], center = true);\n        }\n}\n\nmodule radar() {\n    // mast + rotating radar dome\n    mast_h = 15;\n    translate([hull_length/2 + 5, 0, hull_height + deck_clear + house_h])\n        union() {\n            cylinder(h = mast_h, d = 2, $fn = 8); // mast\n            translate([0, 0, mast_h + 2])\n                rotate([0, 0, $t*360])\n                    rotate([90, 0, 0])\n                        cylinder(h = 8, d1 = 5, d2 = 5, $fn = 32); // dome\n        }\n}\n\nmodule rail_section(x, y, angle) {\n    // simple stanchion + railing tube\n    stanchion_h = 6;\n    translate([x, y, hull_height + deck_clear])\n        rotate([0, 0, angle])\n            union() {\n                cylinder(h = stanchion_h, d = 2, $fn = 8); // post\n                translate([0, 0, stanchion_h])\n                    rotate([90, 0, 0])\n                        cylinder(h = 15, d = 1.5, $fn = 8); // rail bar\n            }\n}\n\nmodule railings() {\n    // perimeter railings\n    steps = 6;\n    for(i = [0:steps-1]) {\n        t = i / (steps - 1);\n        x = hull_length * t;\n        y = hull_width/2;\n        rail_section(x, y, 0);\n        rail_section(x, -y, 0);\n    }\n}\n\nmodule exhaust() {\n    // twin exhaust stacks\n    stack_h = 8;\n    stack_r = 2;\n    translate([hull_length/2 - 12, 0, hull_height + deck_clear])\n        for(side = [-1, 1])\n            translate([0, side * 4, 0])\n                cylinder(h = stack_h, r = stack_r, $fn = 12);\n}\n\nmodule propeller() {\n    // three-blade prop\n    hub_r = 3;\n    blade_l = 6;\n    blade_t = 1.2;\n    translate([hull_length + 2, 0, hull_height/2])\n        union() {\n            cylinder(h = 4, r = hub_r, $fn = 24); // hub\n            for(a = [0:120:359])\n                rotate([0, 0, a])\n                    translate([hub_r + blade_l/2, 0, 2])\n                        cube([blade_l, blade_t, 1.5], center = true);\n        }\n}\n\n// final assembly\nunion() {\n    hull();\n    superstructure();\n    radar();\n    exhaust();\n    railings();\n    propeller();\n}",
    "renders": true
  },
  {
    "vehicle": "trainer",
    "openscad_code": "// Realistic medium-complexity trainer shoe for 3D printing\n// Approximate length 90 mm, safe 1.2 mm wall thickness throughout\n\n// Overall scale factor\nshoe_scale = 1.0;\n\n// Parameters\nsole_h = 8;\nmid_h = 4;\nupper_h = 30;\nlength = 90;\nwidth = 35;\n\nmodule sole() {\n    // Outsole with tread pattern\n    difference() {\n        // Base sole\n        hull() {\n            translate([-length/2+5, 0, 0]) cube([length-10, width, sole_h], center=true);\n            translate([length/2-15, 0, 0]) scale([0.6, 0.7, 1]) cube([30, width, sole_h], center=true);\n        }\n        \n        // Tread grooves\n        for (i = [-length/2+10 : 8 : length/2-25]) {\n            translate([i, 0, sole_h/2-1]) cube([1.5, width-4, 2], center=true);\n        }\n    }\n}\n\nmodule midsole() {\n    // Slightly smaller than sole\n    translate([0, 0, sole_h]) {\n        hull() {\n            translate([-length/2+7, 0, 0]) cube([length-14, width-4, mid_h], center=true);\n            translate([length/2-18, 0, 0]) scale([0.55, 0.65, 1]) cube([25, width-6, mid_h], center=true);\n        }\n    }\n}\n\nmodule toe_cap() {\n    // Reinforced toe area\n    translate([length/2-35, 0, sole_h+mid_h]) {\n        difference() {\n            scale([1, 0.9, 0.8]) sphere(d=width);\n            translate([0, 0, -width/2]) cube([width, width, width], center=true);\n        }\n    }\n}\n\nmodule upper() {\n    // Main upper body\n    difference() {\n        // Main shell\n        hull() {\n            translate([-length/2+5, 0, sole_h+mid_h]) cube([length-10, width-6, upper_h], center=true);\n            translate([length/2-15, 0, sole_h+mid_h]) scale([0.5, 0.6, 1]) cube([20, width-8, upper_h], center=true);\n        }\n        \n        // Foot opening\n        translate([0, 0, sole_h+mid_h+upper_h-8]) {\n            rotate_extrude(angle=360) {\n                translate([width/2-8, 0, 0]) circle(r=width/2-5);\n            }\n        }\n    }\n}\n\nmodule heel_counter() {\n    // Stiff heel support\n    translate([-length/2+10, 0, sole_h+mid_h]) {\n        rotate([0, 10, 0]) {\n            difference() {\n                cube([20, width-4, upper_h-5], center=true);\n                translate([5, 0, 0]) cube([25, width-2, upper_h-3], center=true);\n            }\n        }\n    }\n}\n\nmodule lacing() {\n    // Eyelets for laces\n    for (pos = [0:1:4]) {\n        translate([length/2-45+pos*10, 0, sole_h+mid_h+upper_h/2]) {\n            difference() {\n                cube([4, 2, 4], center=true);\n                cylinder(h=5, d=2, center=true, $fn=12);\n            }\n        }\n    }\n    \n    // Lace loops\n    for (pos = [0:1:4]) {\n        translate([length/2-45+pos*10, 0, sole_h+mid_h+upper_h/2+8]) {\n            rotate([90, 0, 0]) {\n                difference() {\n                    cylinder(h=3, d=4, $fn=12);\n                    cylinder(h=4, d=1.5, $fn=12);\n                }\n            }\n        }\n    }\n}\n\nmodule side_panels() {\n    // Decorative side panels\n    translate([0, width/2+0.1, sole_h+mid_h+upper_h/2]) {\n        difference() {\n            cube([length-20, 0.5, upper_h-10], center=true);\n            for (i = [-length/2+15 : 10 : length/2-25]) {\n                translate([i, 0, 0]) cube([3, 1, upper_h-12], center=true);\n            }\n        }\n    }\n    \n    mirror([0, 1, 0]) {\n        translate([0, width/2+0.1, sole_h+mid_h+upper_h/2]) {\n            difference() {\n                cube([length-20, 0.5, upper_h-10], center=true);\n                for (i = [-length/2+15 : 10 : length/2-25]) {\n                    translate([i, 0, 0]) cube([3, 1, upper_h-12], center=true);\n                }\n            }\n        }\n    }\n}\n\n// Main assembly\nscale([shoe_scale, shoe_scale, shoe_scale]) {\n    union() {\n        sole();\n        midsole();\n        toe_cap();\n        upper();\n        heel_counter();\n        lacing();\n        side_panels();\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "aerobat",
    "openscad_code": "// Aerobat - Realistic style, medium complexity\n// Wingspan ~90 mm, length ~80 mm, height ~25 mm\n\n$fn = 64;  // Smooth curves for printing\n\nmodule wing_half(span = 40, root = 8, tip = 4, sweep = 5) {\n    // One half of the main wing with taper and sweep\n    linear_extrude(height = 2, convexity = 4)\n        polygon(points=[\n            [0, 0],\n            [0, root],\n            [span, tip + sweep],\n            [span, sweep]\n        ]);\n}\n\nmodule horizontal_stab_half(span = 15, root = 5, tip = 2) {\n    // Horizontal stabilizer half\n    linear_extrude(height = 1.5, convexity = 4)\n        polygon(points=[\n            [0, 0],\n            [0, root],\n            [span, tip],\n            [span, 0]\n        ]);\n}\n\nmodule rudder(height = 10, width = 5, thickness = 1.2) {\n    // Vertical stabilizer and rudder\n    linear_extrude(height = thickness, convexity = 4)\n        polygon(points=[\n            [0, 0],\n            [width, 0],\n            [width, height * 0.7],\n            [width * 0.8, height],\n            [0, height * 0.8]\n        ]);\n}\n\nmodule fuselage() {\n    // Main fuselage body with elliptical cross-section\n    hull() {\n        // Nose section\n        translate([-2, 0, 0])\n            scale([1, 0.8, 0.6])\n            sphere(d = 10);\n        \n        // Mid fuselage\n        translate([20, 0, 0])\n            scale([1.2, 1, 0.8])\n            sphere(d = 8);\n            \n        // Tail section\n        translate([45, 0, 0])\n            scale([0.8, 0.6, 0.5])\n            sphere(d = 6);\n    }\n    \n    // Cockpit canopy\n    translate([15, 0, 3])\n        scale([1.5, 0.8, 0.5])\n        sphere(d = 6);\n}\n\nmodule propeller() {\n    // Two-blade propeller\n    for (i = [0:1]) {\n        rotate([90, 0, i * 180]) {\n            translate([0, 0, -6])\n                rotate([0, 0, 20])\n                    cube([20, 2, 0.8], center = true);\n        }\n    }\n    \n    // Spinner\n    translate([-7, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h = 7, d1 = 5, d2 = 3);\n}\n\nmodule landing_gear() {\n    // Main gear struts\n    for (x = [15, 35]) {\n        translate([x, 0, -3])\n            cylinder(h = 8, d = 1.5);\n    }\n    \n    // Wheels\n    for (x = [15, 35]) {\n        translate([x, 0, -10])\n            rotate([90, 0, 0])\n            cylinder(h = 3, d = 6);\n    }\n    \n    // Tail wheel\n    translate([48, 0, -2])\n        cylinder(h = 4, d = 1);\n    translate([48, 0, -5])\n        rotate([90, 0, 0])\n        cylinder(h = 2, d = 4);\n}\n\n// Main assembly\nunion() {\n    // Central fuselage\n    color(\"silver\") fuselage();\n    \n    // Main wings\n    color(\"white\") {\n        translate([20, 0, -1]) {\n            wing_half();\n            mirror([0, 1, 0]) wing_half();\n        }\n    }\n    \n    // Horizontal stabilizer\n    color(\"white\") {\n        translate([45, 0, 1]) {\n            horizontal_stab_half();\n            mirror([0, 1, 0]) horizontal_stab_half();\n        }\n    }\n    \n    // Vertical stabilizer and rudder\n    color(\"white\") {\n        translate([45, 0, 2]) {\n            rudder();\n        }\n    }\n    \n    // Propeller assembly\n    color(\"black\") {\n        translate([-7, 0, 0])\n            rotate([0, 90, 0])\n            propeller();\n    }\n    \n    // Landing gear\n    color(\"gray\") {\n        landing_gear();\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "cropduster",
    "openscad_code": "// Realistic crop-duster biplane (medium complexity)\n// Approx. 90 mm wingspan, fully 3-D-printable\n\n// Overall scale\nscale_factor = 0.4;\n\n// Fuselage\nmodule fuselage() {\n    difference() {\n        // Main tube body\n        hull() {\n            cylinder(h = 90*scale_factor, r1 = 6*scale_factor, r2 = 5*scale_factor, $fn = 32);\n            translate([0, 0, 90*scale_factor]) cylinder(h = 15*scale_factor, r = 4*scale_factor, $fn = 32);\n        }\n        // Cockpit cut-out\n        translate([-7*scale_factor, -10*scale_factor, 50*scale_factor])\n            cube([14*scale_factor, 20*scale_factor, 12*scale_factor]);\n    }\n    // Engine cowling\n    color(\"gray\") translate([0, 0, -5*scale_factor])\n        cylinder(h = 12*scale_factor, r = 7*scale_factor, $fn = 32);\n}\n\n// Main wing (constant chord, thick for 3-D printing)\nmodule wing(span, chord, thickness, dihedral = 0) {\n    difference() {\n        translate([0, 0, thickness/2]) cube([span, chord, thickness], center = true);\n        // Cut lightening holes\n        for (x = [-span/3, 0, span/3])\n            translate([x, 0, thickness/2]) cylinder(h = thickness+0.1, r = 2*scale_factor, $fn = 16);\n    }\n    // Dihedral\n    rotate([dihedral, 0, 0]) children();\n}\n\n// Tailplane\nmodule tail(span, chord, thickness) {\n    difference() {\n        translate([0, 0, thickness/2]) cube([span, chord, thickness], center = true);\n        // Elevator cutout\n        translate([0, chord/4, thickness/2])\n            cube([span*0.8, chord/2, thickness+0.1], center = true);\n    }\n}\n\n// Fin & rudder\nmodule fin() {\n    union() {\n        // Fin\n        translate([0, 0, 5*scale_factor])\n            rotate([90, 0, 0]) cylinder(h = 20*scale_factor, r1 = 12*scale_factor, r2 = 8*scale_factor, $fn = 3);\n        // Rudder\n        translate([0, -2*scale_factor, 20*scale_factor])\n            rotate([90, 0, 0]) cylinder(h = 15*scale_factor, r1 = 8*scale_factor, r2 = 6*scale_factor, $fn = 3);\n    }\n}\n\n// Landing gear\nmodule wheel() {\n    difference() {\n        cylinder(h = 4*scale_factor, r = 6*scale_factor, $fn = 32);\n        translate([0, 0, -0.1]) cylinder(h = 4.2*scale_factor, r = 3*scale_factor, $fn = 32);\n    }\n}\n\nmodule landing_gear() {\n    union() {\n        // Main axle\n        color(\"silver\") translate([0, 0, 10*scale_factor])\n            rotate([90, 0, 0]) cylinder(h = 35*scale_factor, r = 1*scale_factor, $fn = 12);\n        // Wheels\n        color(\"black\") translate([15*scale_factor, 0, 10*scale_factor]) wheel();\n        color(\"black\") translate([-15*scale_factor, 0, 10*scale_factor]) mirror([1, 0, 0]) wheel();\n    }\n}\n\n// Propeller (two-blade)\nmodule propeller() {\n    color(\"gray\") union() {\n        // Spinner\n        sphere(r = 4*scale_factor, $fn = 32);\n        // Blades\n        for (a = [0, 180])\n            rotate([0, 0, a])\n                translate([8*scale_factor, 0, 0])\n                    rotate([0, 90, 0])\n                        cylinder(h = 16*scale_factor, r1 = 12*scale_factor, r2 = 2*scale_factor, $fn = 2);\n    }\n}\n\n// Wing struts\nmodule strut(len) {\n    color(\"gray\") cylinder(h = len, r = 1*scale_factor, $fn = 12);\n}\n\n// Main assembly\nunion() {\n    // Fuselage\n    fuselage();\n\n    // Lower wing\n    translate([0, 0, 30*scale_factor])\n        wing(70*scale_factor, 20*scale_factor, 3*scale_factor, 5);\n\n    // Upper wing\n    translate([0, 0, 50*scale_factor])\n        wing(70*scale_factor, 20*scale_factor, 3*scale_factor, 5);\n\n    // Wing struts (pair each side)\n    for (x = [-25*scale_factor, 25*scale_factor]) {\n        translate([x, 0, 30*scale_factor]) strut(20*scale_factor);\n    }\n\n    // Tailplane\n    translate([0, 0, 85*scale_factor])\n        tail(35*scale_factor, 15*scale_factor, 2*scale_factor);\n\n    // Fin & rudder\n    translate([0, 0, 85*scale_factor]) fin();\n\n    // Landing gear\n    translate([0, 0, 0]) landing_gear();\n\n    // Propeller\n    translate([0, 0, -12*scale_factor]) propeller();\n}",
    "renders": true
  },
  {
    "vehicle": "firebomber",
    "openscad_code": "// Firebomber aircraft model - medium complexity realistic style\n// Dimensions in mm, suitable for 3D printing\n\nmodule main_body() {\n    // Fuselage main section\n    union() {\n        // Main fuselage tube\n        hull() {\n            cylinder(h=60, d1=15, d2=18, center=true);\n            translate([0, 0, 25]) cylinder(h=5, d=20, center=true);\n        }\n        \n        // Cockpit section\n        translate([0, 0, 30]) \n        hull() {\n            sphere(d=18);\n            translate([0, 0, 5]) sphere(d=16);\n        }\n        \n        // Tail boom\n        translate([0, 0, -35])\n        cylinder(h=25, d1=10, d2=8, center=true);\n    }\n}\n\nmodule wings() {\n    // Main wings\n    module wing_half() {\n        difference() {\n            // Wing shape\n            hull() {\n                translate([-5, 0, 0]) cube([30, 5, 2]);\n                translate([25, 0, 0]) cube([10, 2, 1]);\n            }\n            \n            // Wing tip cut\n            translate([30, -1, -1]) cube([5, 3, 4]);\n            \n            // Engine cutout\n            translate([15, -3, -2]) cylinder(h=10, d=6, center=true);\n        }\n        \n        // Wing strut\n        translate([15, -5, -5])\n        cylinder(h=10, d=3, center=true);\n    }\n    \n    // Left and right wings\n    wing_half();\n    mirror([0, 1, 0]) wing_half();\n}\n\nmodule engines() {\n    module engine() {\n        difference() {\n            // Engine nacelle\n            hull() {\n                cylinder(h=12, d1=8, d2=7, center=true);\n                translate([0, 0, -7]) sphere(d=8);\n            }\n            \n            // Air intake\n            translate([0, 0, -9]) cylinder(h=3, d=5);\n        }\n        \n        // Propeller\n        translate([0, 0, -11])\n        rotate([90, 0, 0])\n        union() {\n            for(i=[0:45:135])\n                rotate([0, 0, i])\n                cube([12, 1, 0.5], center=true);\n        }\n    }\n    \n    // Left engine\n    translate([15, -12, -2]) engine();\n    \n    // Right engine\n    translate([15, 12, -2]) engine();\n}\n\nmodule tail_assembly() {\n    // Horizontal stabilizer\n    translate([0, 0, -45])\n    union() {\n        hull() {\n            translate([-15, 0, 0]) cube([30, 2, 1]);\n            translate([-12, 0, -1]) cube([24, 2, 1]);\n        }\n        \n        // Vertical stabilizer\n        translate([-1, 0, -8])\n        hull() {\n            cube([2, 1, 10]);\n            translate([0, 0, -6]) cube([2, 1, 8]);\n        }\n    }\n}\n\nmodule landing_gear() {\n    module wheel() {\n        difference() {\n            cylinder(h=3, d=6, center=true);\n            cylinder(h=4, d=2, center=true);\n        }\n    }\n    \n    module strut() {\n        cylinder(h=8, d=2, center=true);\n    }\n    \n    // Front gear\n    translate([8, 0, -15])\n    union() {\n        strut();\n        translate([0, 0, -6]) wheel();\n    }\n    \n    // Rear gear\n    for(side=[-1, 1]) {\n        translate([-10, side*12, -15])\n        union() {\n            strut();\n            translate([0, 0, -6]) wheel();\n        }\n    }\n}\n\nmodule water_tank() {\n    // Belly tank\n    difference() {\n        hull() {\n            translate([0, 0, -22]) sphere(d=18);\n            translate([0, 0, -15]) sphere(d=16);\n        }\n        \n        // Tank opening\n        translate([0, 0, -15]) cylinder(h=5, d=4);\n    }\n}\n\n// Assembly\nunion() {\n    main_body();\n    wings();\n    engines();\n    tail_assembly();\n    landing_gear();\n    water_tank();\n}",
    "renders": true
  },
  {
    "vehicle": "medevac",
    "openscad_code": "// Medical evacuation helicopter – 1:144 scale (~80 mm rotor diameter)\n// No overhangs >45°, 1 mm min wall, printable at 0.15 mm layer height\n\n// General parameters\nscale_factor = 1;          // overall rescale if desired\nwall = 1.2;                // printable wall thickness\n$fn = 36;\n\n// Rotor module\nmodule rotor(d, hub_h, blade_w, blade_l) {\n    union() {\n        // Main hub cylinder\n        cylinder(h = hub_h, d = d/8, center = true);\n        // Four blades in a loop\n        for (a = [0:90:270]) {\n            rotate([90, 0, a])\n                translate([0, blade_l/2 + d/16, 0])\n                    cube([blade_w, blade_l, wall], center = true);\n        }\n    }\n}\n\n// Window module (cut-out)\nmodule window(w, h, depth) {\n    difference() {\n        cube([w + wall, h + wall, depth + wall], center = true);\n        translate([0, 0, wall/2])\n            cube([w, h, depth + wall*2], center = true);\n    }\n}\n\n// Main fuselage\nmodule fuselage() {\n    difference() {\n        hull() {\n            // Forward cabin\n            translate([0, 0, 4])\n                cube([18, 12, 8], center = true);\n            // Mid section\n            translate([-15, 0, 0])\n                cube([28, 14, 10], center = true);\n            // Tail boom\n            translate([-40, 0, 2])\n                cube([18, 6, 6], center = true);\n        }\n        // Cockpit windows\n        translate([5, 5.5, 4])\n            rotate([0, 30, 0])\n                window(6, 3, wall*2);\n        // Side windows\n        translate([-5, 7, 4])\n            window(5, 4, wall*2);\n        // Rear clamshell doors (cut line)\n        translate([-35, 0, 3])\n            cube([8, 6.1, 6], center = true);\n    }\n}\n\n// Landing skids\nmodule skids() {\n    union() {\n        // Left skid tube\n        translate([0, 6, -5])\n            rotate([90, 0, 0])\n                cylinder(h = 60, d = 2, center = true);\n        // Right skid tube\n        translate([0, -6, -5])\n            rotate([90, 0, 0])\n                cylinder(h = 60, d = 2, center = true);\n        // Front cross tube\n        translate([20, 0, -5])\n            rotate([0, 90, 0])\n                cylinder(h = 12, d = 1.5, center = true);\n        // Rear cross tube\n        translate([-20, 0, -5])\n            rotate([0, 90, 0])\n                cylinder(h = 12, d = 1.5, center = true);\n    }\n}\n\n// Tail rotor\nmodule tail_rotor() {\n    translate([-48, 0, 5])\n        rotate([0, 90, 0])\n            rotor(6, 2, 1.2, 8);\n}\n\n// Tail fin\nmodule tail_fin() {\n    union() {\n        // Vertical stabilizer\n        translate([-48, 0, 10])\n            rotate([0, 0, -10])\n                cube([wall*2, 8, 10], center = true);\n        // Horizontal stabilizer\n        translate([-45, 0, 7])\n            rotate([0, 10, 0])\n                cube([12, wall*2, 4], center = true);\n    }\n}\n\n// Main assembly\nscale(scale_factor)\nunion() {\n    fuselage();\n    skids();\n    tail_fin();\n    tail_rotor();\n    // Main rotor mast\n    translate([0, 0, 12])\n        cylinder(h = 4, d = 3, center = true);\n    // Main rotor on mast\n    translate([0, 0, 14])\n        rotor(12, 2, 1.5, 30);\n}",
    "renders": true
  },
  {
    "vehicle": "airtanker",
    "openscad_code": "// Airtanker model for 3D printing\n// Medium complexity, realistic style\n// Approx. 80 mm wingspan\n\n$fa = 2;\n$fs = 0.5;\n\n// Main parameters\nfuselage_len = 60;\nfuselage_dia = 10;\nwing_span = 80;\nwing_chord = 20;\ntail_span = 30;\ntail_chord = 12;\ntank_len = 35;\ntank_dia = 8;\n\nmodule fuselage() {\n    // Main tube\n    hull() {\n        cylinder(h=fuselage_len, d=fuselage_dia, center=true);\n    }\n    \n    // Nose cone\n    translate([fuselage_len/2, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h1=10, h2=0, r1=fuselage_dia/2, r2=0, center=false);\n    \n    // Tail cone\n    translate([-fuselage_len/2, 0, 0])\n        rotate([0, -90, 0])\n            cylinder(h1=8, h2=0, r1=fuselage_dia/2, r2=3, center=false);\n}\n\nmodule wings() {\n    // Main wings\n    difference() {\n        // Wing shape\n        translate([0, 0, -fuselage_dia/2 - 1])\n            cube([wing_chord, wing_span, 2]);\n        \n        // Cutout for fuselage\n        translate([0, 0, -fuselage_dia/2 - 1.5])\n            cylinder(h=3, d=fuselage_dia + 2, center=true);\n    }\n    \n    // Wingtip tanks\n    for(y = [-1, 1]) {\n        translate([0, y * (wing_span/2 - 5), -fuselage_dia/2])\n            rotate([90, 0, 0])\n                cylinder(h=8, d=5);\n    }\n}\n\nmodule tail() {\n    // Horizontal stabilizer\n    translate([-fuselage_len/2 + 5, 0, 0])\n        difference() {\n            cube([tail_chord, tail_span, 1.5]);\n            \n            // Cutout for tail\n            translate([0, 0, -1])\n                cylinder(h=3, d=fuselage_dia, center=true);\n        }\n    \n    // Vertical stabilizer\n    translate([-fuselage_len/2 + 5, 0, fuselage_dia/2])\n        difference() {\n            cube([tail_chord, 1.5, 12]);\n            \n            // Cutout for tail\n            translate([0, 0, 0])\n                cylinder(h=3, d=fuselage_dia, center=true);\n        }\n}\n\nmodule engines() {\n    // Two engines under wings\n    for(x = [-wing_chord/3, wing_chord/3]) {\n        for(y = [-1, 1]) {\n            translate([x, y * (wing_span/2 - 15), -fuselage_dia/2 - 3])\n                cylinder(h=6, d=4);\n        }\n    }\n}\n\nmodule water_tank() {\n    // Belly tank\n    translate([0, 0, -fuselage_dia/2 - tank_dia/2])\n        rotate([90, 0, 0])\n            cylinder(h=tank_len, d=tank_dia);\n    \n    // Tank supports\n    for(x = [-tank_len/3, tank_len/3]) {\n        translate([x, 0, -fuselage_dia/2 - tank_dia/2])\n            cube([2, 3, tank_dia/2]);\n    }\n}\n\nmodule landing_gear() {\n    // Main gear\n    for(y = [-1, 1]) {\n        translate([0, y * 15, -fuselage_dia/2 - 8])\n            cylinder(h=8, d=1.5);\n    }\n    \n    // Nose gear\n    translate([fuselage_len/2 - 10, 0, -fuselage_dia/2 - 6])\n        cylinder(h=6, d=1.5);\n}\n\n// Assembly\nunion() {\n    fuselage();\n    wings();\n    tail();\n    engines();\n    water_tank();\n    landing_gear();\n}",
    "renders": true
  },
  {
    "vehicle": "skyhook",
    "openscad_code": "// Skyhook for 3D printing – medium-complexity realistic style\n// Overall printable size ≈ 80 mm tall, 65 mm wide, 25 mm deep\n\n$fn = 36;          // Smooth curves\nwall = 2;          // Minimum printable wall thickness\n\nmodule hook_body() {\n    // Main curved hook beam\n    difference() {\n        // Outer shell\n        linear_extrude(height = 14, center = true, convexity = 10)\n            offset(r = wall)\n                arc(r = 30, a = 180);\n\n        // Hollow core\n        linear_extrude(height = 18, center = true, convexity = 10)\n            arc(r = 30 - wall, a = 180);\n    }\n}\n\n// Helper 2D arc primitive\nmodule arc(r, a) {\n    intersection() {\n        circle(r);\n        square([r*2, r], center = true);\n        rotate([0, 0, a]) square([r*2, r], center = true);\n    }\n}\n\nmodule cross_beam() {\n    // Horizontal bar that stiffens the hook\n    translate([0, 0, 0])\n        cube([60, wall*2, 14], center = true);\n}\n\nmodule mounting_plate() {\n    // Flat plate for bolting to wall/ceiling\n    difference() {\n        // Plate body\n        translate([0, -30, 0])\n            cube([30, 10, 20], center = true);\n\n        // Two screw holes\n        for (x = [-9, 9])\n            translate([x, -30, 0])\n                cylinder(h = 11, r = 2.5, center = true);\n    }\n}\n\nmodule safety_latch() {\n    // Pivoting latch to prevent rope escape\n    translate([-20, 0, 9])\n        rotate([0, -20, 0])\n            difference() {\n                // Latch arm\n                hull() {\n                    sphere(r = 4);\n                    translate([10, 0, 0]) sphere(r = 3);\n                }\n                // Hollow pivot hole\n                translate([0, 0, 0])\n                    rotate([-90, 0, 0])\n                        cylinder(h = 9, r = 1.5, center = true);\n            }\n}\n\nmodule ribbed_grip() {\n    // Vertical ribs for rope contact to reduce slip\n    for (z = [-6, -2, 2, 6])\n        translate([0, 0, z])\n            cube([58, wall, 1.5], center = true);\n}\n\n// Assembly\nunion() {\n    // Main hook structure\n    hook_body();\n\n    // Reinforcement\n    cross_beam();\n\n    // Mounting interface\n    mounting_plate();\n\n    // Safety latch (printed separately and snapped in)\n    safety_latch();\n\n    // Grip ribs inside hook throat\n    ribbed_grip();\n}",
    "renders": true
  },
  {
    "vehicle": "blimp",
    "openscad_code": "// Realistic 3D printable blimp model\n// Medium complexity with gondola, tail fins, and internal cavity for printability\n\nblimp_length = 80;\nblimp_diameter = 35;\nwall_thickness = 1.5;\n\n// Main blimp body\nmodule blimp_body() {\n    // Create the main airship hull\n    hull() {\n        // Front nose cone\n        translate([blimp_length/2, 0, 0])\n            scale([1.5, 1, 1])\n            sphere(d = blimp_diameter, $fn=32);\n        \n        // Rear cone with tail taper\n        translate([-blimp_length/2, 0, 0])\n            scale([1.3, 0.8, 0.8])\n            sphere(d = blimp_diameter * 0.9, $fn=32);\n        \n        // Central cylinder for smooth shape\n        translate([0, 0, 0])\n            cylinder(h = blimp_length * 0.8, d = blimp_diameter, $fn=32);\n    }\n}\n\n// Internal hollow cavity for 3D printing\nmodule hollow_cavity() {\n    // Scale down slightly to create wall thickness\n    scale([0.85, 0.85, 0.85])\n    blimp_body();\n}\n\n// Tail fins assembly\nmodule tail_fins() {\n    // Vertical stabilizer\n    translate([-blimp_length/2 + 5, 0, 0])\n    rotate([0, 90, 0])\n    linear_extrude(height = 2)\n    polygon(points=[\n        [0, -blimp_diameter/4],\n        [blimp_diameter/2, 0],\n        [0, blimp_diameter/4],\n        [-blimp_diameter/4, 0]\n    ]);\n    \n    // Horizontal stabilizer (top)\n    translate([-blimp_length/2 + 5, 0, blimp_diameter/3])\n    rotate([90, 0, 0])\n    linear_extrude(height = 2)\n    polygon(points=[\n        [0, -blimp_diameter/6],\n        [blimp_diameter/3, 0],\n        [0, blimp_diameter/6],\n        [-blimp_diameter/6, 0]\n    ]);\n    \n    // Horizontal stabilizer (bottom)\n    translate([-blimp_length/2 + 5, 0, -blimp_diameter/3])\n    rotate([90, 0, 0])\n    linear_extrude(height = 2)\n    polygon(points=[\n        [0, -blimp_diameter/6],\n        [blimp_diameter/3, 0],\n        [0, blimp_diameter/6],\n        [-blimp_diameter/6, 0]\n    ]);\n}\n\n// Gondola module\nmodule gondola() {\n    // Main gondola body\n    translate([0, 0, -blimp_diameter/2 - 8])\n    difference() {\n        // Gondola hull\n        scale([1, 0.7, 0.5])\n        sphere(d = 15, $fn=32);\n        \n        // Cockpit window\n        translate([3, 0, 4])\n        scale([1.2, 0.8, 0.5])\n        sphere(d = 6, $fn=16);\n    }\n    \n    // Support struts\n    for(i = [-1, 1]) {\n        translate([i * 8, 0, -blimp_diameter/2 - 2])\n        rotate([90, 0, 0])\n        cylinder(h = 6, d = 2, $fn=16);\n    }\n}\n\n// Propellers\nmodule propellers() {\n    // Rear propeller\n    translate([-blimp_length/2 - 3, 0, 0])\n    rotate([0, 90, 0])\n    for(i = [0:45:315]) {\n        rotate([0, 0, i])\n        translate([0, -2, 0])\n        cube([8, 4, 0.8]);\n    }\n    \n    // Propeller hub\n    translate([-blimp_length/2 - 3, 0, 0])\n    rotate([0, 90, 0])\n    cylinder(h = 2, d = 4, $fn=16);\n}\n\n// Main assembly\nunion() {\n    // Blimp with hollow cavity\n    difference() {\n        blimp_body();\n        hollow_cavity();\n    }\n    \n    // Tail fins\n    tail_fins();\n    \n    // Gondola\n    gondola();\n    \n    // Propellers\n    propellers();\n}",
    "renders": true
  },
  {
    "vehicle": "dirigible",
    "openscad_code": "// Realistic medium-complexity dirigible for 3D printing\n// Approx. 80 mm long, built from basic primitives\n\n// Overall scale factor for easy resizing\nscale_factor = 1;\n\n// Wall thickness for 3D printing\nwall = 1.2;\n\n// Main envelope (streamlined ellipsoid)\nmodule envelope() {\n    hull() {\n        // Front nose dome\n        translate([0, 0, 0])\n            scale([1, 1, 0.7])\n            sphere(d = 25, $fn = 40);\n        \n        // Main body\n        translate([-20, 0, 0])\n            scale([1.4, 1, 0.7])\n            sphere(d = 30, $fn = 40);\n        \n        // Tail taper\n        translate([-45, 0, 0])\n            scale([0.6, 0.8, 0.7])\n            sphere(d = 20, $fn = 40);\n    }\n}\n\n// Internal structure to hollow the envelope\nmodule hollow_envelope() {\n    difference() {\n        envelope();\n        translate([0, 0, -wall/2])\n            scale([0.92, 0.92, 0.92])\n            envelope();\n    }\n}\n\n// Gondola (control car) with windows\nmodule gondola() {\n    difference() {\n        // Main body\n        translate([0, 0, -20])\n            cube([28, 12, 10], center = true);\n        \n        // Hollow interior\n        translate([0, 0, -19.5])\n            cube([26, 10, 8], center = true);\n        \n        // Cockpit windows\n        for(x = [-8, -4, 0, 4, 8])\n            translate([x, 0, -16])\n                cube([2.5, wall*0.8, 2.5], center = true);\n    }\n}\n\n// Tail fins (four symmetric fins)\nmodule tail_fin() {\n    difference() {\n        union() {\n            // Vertical stabilizer\n            translate([-42, 0, 10])\n                rotate([0, 20, 0])\n                cube([15, 1, 8]);\n            \n            // Horizontal stabilizer\n            translate([-42, 0, 10])\n                rotate([20, 0, 0])\n                cube([15, 8, 1]);\n        }\n        \n        // Taper the edges\n        translate([-50, 0, 10])\n            rotate([0, 20, 0])\n            cylinder(h = 20, r1 = 6, r2 = 0, $fn = 3);\n    }\n}\n\n// Engine pods (two symmetric engines)\nmodule engine_pod(side) {\n    translate([side * 12, 0, -12]) {\n        // Engine housing\n        cylinder(h = 8, r = 4, $fn = 20);\n        \n        // Propeller hub\n        translate([0, 0, 4])\n            cylinder(h = 2, r = 2.5, $fn = 10);\n        \n        // Simple propeller blades\n        for(angle = [0 : 120 : 240])\n            rotate([0, 0, angle])\n            translate([0, 3.5, 5])\n                cube([1, 4, 0.5], center = true);\n    }\n}\n\n// Suspension cables\nmodule cables() {\n    for(side = [-1, 1]) {\n        hull() {\n            translate([side * 10, 0, -5])\n                sphere(d = wall, $fn = 8);\n            translate([side * 10, 0, -15])\n                sphere(d = wall, $fn = 8);\n        }\n    }\n    \n    // Cross cables\n    hull() {\n        translate([-10, 0, -15])\n            sphere(d = wall, $fn = 8);\n        translate([10, 0, -15])\n            sphere(d = wall, $fn = 8);\n    }\n}\n\n// Main assembly\nscale(scale_factor) {\n    union() {\n        // Main envelope\n        hollow_envelope();\n        \n        // Gondola\n        gondola();\n        \n        // Tail fins (4-way symmetric)\n        for(rot = [0 : 90 : 270])\n            rotate([0, 0, rot])\n            tail_fin();\n        \n        // Engine pods\n        engine_pod(1);\n        engine_pod(-1);\n        \n        // Support structure\n        cables();\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "zeppelin",
    "openscad_code": "// Realistic Zeppelin - Medium Complexity\n// Overall dimensions: ~90mm long, ~20mm diameter, 3D printable\n\n$fn = 32;  // Smooth curves for 3D printing\nwall_thickness = 1.2;\n\nmodule zeppelin_body() {\n    // Main ellipsoid hull\n    difference() {\n        scale([1, 0.4, 0.4]) sphere(d = 45);  // Main body\n        // Hollow interior\n        translate([0, 0, 0])\n            scale([0.94, 0.34, 0.34]) sphere(d = 45);\n    }\n}\n\nmodule tail_fins() {\n    // Four tail fins arranged radially\n    for (i = [0:90:270]) {\n        rotate([0, 0, i]) {\n            translate([-22, 0, 0]) {\n                // Vertical stabilizer\n                rotate([0, 90, 0]) {\n                    difference() {\n                        cylinder(h = 12, r1 = 8, r2 = 3);\n                        cylinder(h = 12.2, r1 = 6.8, r2 = 1.8);\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule gondola() {\n    // Passenger gondola underneath\n    translate([0, 0, -10]) {\n        // Main gondola body\n        difference() {\n            rotate([90, 0, 0]) {\n                cylinder(h = 25, r1 = 4, r2 = 4);\n                cylinder(h = 25.2, r1 = 2.8, r2 = 2.8);\n            }\n            // Rounded ends\n            translate([12.5, 0, 0]) sphere(d = 8);\n            translate([-12.5, 0, 0]) sphere(d = 8);\n            translate([12.5, 0, 0]) sphere(d = 5.6);\n            translate([-12.5, 0, 0]) sphere(d = 5.6);\n        }\n        \n        // Connection struts\n        for (x = [-15:7.5:15]) {\n            translate([x, 0, 8]) {\n                cylinder(h = 2, r = 1.2);\n                cylinder(h = 2.2, r = 0.8);\n            }\n        }\n    }\n}\n\nmodule engine_nacelles() {\n    // Two engine pods on sides\n    for (y = [-8, 8]) {\n        translate([10, y, -6]) {\n            // Engine housing\n            difference() {\n                rotate([90, 0, 0]) cylinder(h = 6, r = 2.5);\n                rotate([90, 0, 0]) cylinder(h = 6.2, r = 1.3);\n            }\n            \n            // Propeller\n            translate([0, 0, -3.5]) {\n                rotate([0, 0, $t * 360]) {\n                    for (i = [0:120:240]) {\n                        rotate([0, 0, i]) {\n                            translate([1.5, 0, 0]) cube([3, 0.5, 0.5], center = true);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule control_surfaces() {\n    // Elevator and rudder control surfaces\n    translate([-25, 0, 0]) {\n        // Horizontal stabilizers\n        for (z = [-4, 4]) {\n            translate([0, 0, z]) {\n                rotate([0, 0, 90]) {\n                    difference() {\n                        cube([10, 2, 1.2], center = true);\n                        cube([9.8, 1.6, 0.8], center = true);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    zeppelin_body();\n    tail_fins();\n    gondola();\n    engine_nacelles();\n    control_surfaces();\n}",
    "renders": true
  },
  {
    "vehicle": "rigidairship",
    "openscad_code": "// Realistic Rigid Airship (Zeppelin-style)\n// Medium complexity, 3D-printable design\n\n$fn = 32;  // Smooth curves\n\n// Overall dimensions\nlength = 90;\ndiameter = 25;\nthickness = 1.5;\n\nmodule airship_body() {\n    // Main envelope\n    linear_extrude(height = diameter, center = true, twist = 0) {\n        difference() {\n            scale([length/diameter, 1, 1]) \n                circle(d = diameter);\n            scale([(length-2*thickness)/diameter, (diameter-2*thickness)/diameter, 1]) \n                circle(d = diameter - 2*thickness);\n        }\n    }\n    \n    // Nose cone\n    translate([length/2, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h = diameter/2, r1 = diameter/2, r2 = 0, center = true);\n    \n    // Tail cone\n    translate([-length/2, 0, 0])\n        rotate([0, -90, 0])\n            cylinder(h = diameter/2, r1 = diameter/2, r2 = 0, center = true);\n}\n\nmodule tail_fins() {\n    // Tail fin positions\n    angles = [45, 135, 225, 315];\n    \n    for (a = angles) {\n        rotate([0, 0, a])\n            translate([length/2 - 8, 0, 0])\n                rotate([90, 0, 0])\n                    difference() {\n                        // Main fin\n                        translate([0, 0, -2])\n                            cube([12, 8, thickness], center = true);\n                        // Rounded edge\n                        translate([12, 0, -2])\n                            rotate([0, 0, 90])\n                                cylinder(h = thickness, r = 4, center = true);\n                    }\n    }\n}\n\nmodule gondola() {\n    // Main gondola body\n    translate([0, 0, -diameter/2 - 6])\n        difference() {\n            cube([30, 8, 6], center = true);\n            translate([0, 0, 3])\n                cube([28, 6, 4], center = true);\n        }\n    \n    // Windows\n    for (x = [-10:5:10]) {\n        translate([x, 0, -diameter/2 - 4])\n            cylinder(h = 8.1, r = 1.5, center = true);\n    }\n    \n    // Support struts\n    for (x = [-12, 12]) {\n        translate([x, 0, -diameter/2 - 3])\n            cylinder(h = 3, r = 1, center = false);\n    }\n}\n\nmodule engines() {\n    // Engine pods\n    positions = [[-25, -diameter/2 - 3, 0], \n                 [-25, diameter/2 + 3, 0],\n                 [25, -diameter/2 - 3, 0],\n                 [25, diameter/2 + 3, 0]];\n    \n    for (pos = positions) {\n        translate(pos)\n            rotate([0, 0, 90])\n                difference() {\n                    // Engine housing\n                    cylinder(h = 8, r = 3, center = true);\n                    // Propeller opening\n                    cylinder(h = 8.1, r = 2.5, center = true);\n                }\n    }\n}\n\nmodule rigging() {\n    // Simplified rigging lines\n    for (x = [-30:10:30]) {\n        hull() {\n            translate([x, diameter/4, -2])\n                sphere(r = 0.5);\n            translate([x, 0, -diameter/2 - 1])\n                sphere(r = 0.5);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    airship_body();\n    tail_fins();\n    gondola();\n    engines();\n    rigging();\n}",
    "renders": true
  },
  {
    "vehicle": "semirigid",
    "openscad_code": "// Semi-rigid airship - medium complexity realistic style\n// Approx 90 mm long, 30 mm diameter\n\n// Overall scale\nscale = 1;\n\n// Hull parameters\nhull_length = 90 * scale;\nhull_diameter = 30 * scale;\nnose_taper = 0.85;\ntail_taper = 0.75;\n\n// Gondola parameters\ngondola_length = 35 * scale;\ngondola_width = 15 * scale;\ngondola_height = 8 * scale;\ngondola_offset = hull_diameter/2 + gondola_height/2;\n\n// Fin parameters\nfin_span = 12 * scale;\nfin_chord = 10 * scale;\nfin_thickness = 1.5 * scale;\n\n// Propeller parameters\nprop_diameter = 8 * scale;\nprop_blades = 3;\nprop_hub = 2 * scale;\nprop_offset = hull_length/2 - 5 * scale;\n\n// Helper module for hull cross-section\nmodule hull_profile(t) {\n    // t from 0 to 1 along length\n    radius = hull_diameter/2;\n    if (t < 0.2) {\n        // Nose taper\n        radius = radius * (1 - (0.2 - t)/0.2 * (1 - nose_taper));\n    } else if (t > 0.8) {\n        // Tail taper\n        radius = radius * (1 - (t - 0.8)/0.2 * (1 - tail_taper));\n    }\n    radius;\n}\n\n// Main hull using hull of circles\nmodule airship_hull() {\n    hull() {\n        for (i = [0:5:100]) {\n            t = i/100;\n            translate([t * hull_length - hull_length/2, 0, 0])\n                circle(hull_profile(t), $fn = 32);\n        }\n    }\n}\n\n// Gondola with simple streamlined shape\nmodule gondola() {\n    translate([0, 0, -gondola_offset])\n    union() {\n        // Main body\n        hull() {\n            for (x = [-gondola_length/2, 0, gondola_length/2]) {\n                h = gondola_height * (1 - abs(x)/(gondola_length/2) * 0.3);\n                translate([x, 0, 0])\n                    scale([1, 0.7, h/gondola_height])\n                        circle(gondola_width/2, $fn = 16);\n            }\n        }\n        \n        // Cabin windows\n        color(\"lightblue\")\n        for (x = [-10, 0, 10])\n            translate([x * scale, 0, gondola_height/2 - 0.5])\n                cube([3 * scale, gondola_width * 0.6, 1], center = true);\n    }\n}\n\n// Stabilizing fins\nmodule fins() {\n    // Vertical fin\n    translate([hull_length * -0.4, 0, hull_diameter/2 - 2])\n    rotate([0, 0, 0])\n        linear_extrude(height = fin_thickness, center = true)\n            polygon([\n                [0, 0],\n                [fin_chord * -0.8, 0],\n                [fin_chord * -0.2, fin_span],\n                [0, fin_span * 0.8]\n            ]);\n    \n    // Horizontal fins\n    for (y = [-1, 1]) {\n        translate([hull_length * -0.4, 0, hull_diameter/2 - 4])\n        rotate([0, y * 90, 0])\n            linear_extrude(height = fin_thickness, center = true)\n                polygon([\n                    [0, 0],\n                    [fin_chord * -0.8, 0],\n                    [fin_chord * -0.2, fin_span],\n                    [0, fin_span * 0.8]\n                ]);\n    }\n}\n\n// Propeller assembly\nmodule propeller() {\n    translate([prop_offset, 0, -gondola_offset + 2])\n    rotate([90, 0, 0])\n    union() {\n        // Hub\n        cylinder(h = prop_hub, d = prop_hub * 2, $fn = 12);\n        \n        // Blades\n        for (i = [0:prop_blades-1]) {\n            rotate([0, 0, i * 360/prop_blades])\n            translate([0, prop_diameter/2 - 1, 0])\n                rotate([0, 30, 0])\n                scale([1, 0.2, 0.05])\n                    sphere(prop_diameter/2);\n        }\n        \n        // Motor nacelle\n        translate([0, 0, -prop_hub])\n            cylinder(h = 4, d1 = prop_hub * 3, d2 = prop_hub * 2);\n    }\n}\n\n// Suspension cables\nmodule cables() {\n    for (x = [-20, 0, 20])\n        hull() {\n            translate([x, 0, hull_diameter/2 - 2])\n                sphere(1, $fn = 8);\n            translate([x, 0, -gondola_offset + gondola_height/2])\n                sphere(1, $fn = 8);\n        }\n}\n\n// Main assembly\nairship_hull();\ngondola();\nfins();\npropeller();\ncables();",
    "renders": true
  },
  {
    "vehicle": "nonrigid",
    "openscad_code": "// Realistic Nonrigid Garden Hose Nozzle (medium complexity)\n// Dimensions: ~75 mm overall length, printable without supports\n\n// Main parameters\n$fn = 36;  // Smooth curves\nnozzle_dia = 22;           // Outer diameter at tip\nbody_dia = 30;             // Main body diameter\ngrip_dia = 34;             // Thickest grip diameter\ntotal_len = 75;            // Overall length\nwall = 2;                  // Wall thickness for 3D printing\n\n// Main nozzle body with gentle taper\nmodule nozzle_body() {\n    difference() {\n        // Outer tapered shell\n        hull() {\n            cylinder(d1=nozzle_dia, d2=body_dia, h=total_len*0.6);\n            translate([0,0,total_len*0.6]) cylinder(d=body_dia, h=total_len*0.4);\n        }\n        // Central water channel\n        translate([0,0,-1])\n            cylinder(d=nozzle_dia-wall*2.5, h=total_len+2);\n    }\n}\n\n// Textured grip collar with ergonomic ridges\nmodule grip_collar() {\n    difference() {\n        // Main grip ring\n        cylinder(d=grip_dia, h=20);\n        \n        // Central hole matching body\n        translate([0,0,-1])\n            cylinder(d=body_dia, h=22);\n            \n        // Ergonomic finger grooves\n        for(i=[0:5]) {\n            rotate([0,0,i*60+30]) \n                translate([grip_dia/2-3, 0, 0])\n                    rotate([90,0,0])\n                        cylinder(d1=6, d2=4, h=18, $fn=6);\n        }\n    }\n}\n\n// Spray head with realistic diffuser pattern\nmodule spray_head() {\n    difference() {\n        // Outer spray cap\n        translate([0,0,total_len-8])\n            cylinder(d=nozzle_dia+4, h=10);\n            \n        // Central orifice\n        translate([0,0,total_len-9])\n            cylinder(d=4, h=12);\n            \n        // Diffuser holes around perimeter\n        for(r=[nozzle_dia/2-3, nozzle_dia/2-6]) {\n            for(i=[0:7]) {\n                rotate([0,0,i*45])\n                    translate([r, 0, total_len-8])\n                        rotate([90,0,0])\n                            cylinder(d1=1.5, d2=1, h=12);\n            }\n        }\n    }\n}\n\n// Threaded hose connector\nmodule hose_connector() {\n    difference() {\n        // Main connector cylinder\n        translate([0,0,-15])\n            cylinder(d=body_dia+6, h=15);\n            \n        // Internal threading core\n        translate([0,0,-16])\n            cylinder(d=body_dia-6, h=16);\n            \n        // External threads as ridges\n        for(z=[-12:3:-3]) {\n            translate([0,0,z])\n                cylinder(d1=body_dia+6, d2=body_dia+4, h=2);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    nozzle_body();\n    \n    // Position grip collar\n    translate([0,0,total_len*0.3])\n        grip_collar();\n        \n    spray_head();\n    hose_connector();\n}",
    "renders": true
  },
  {
    "vehicle": "skyship",
    "openscad_code": "// Skyship - realistic style, medium complexity\n// Designed for 3D printing at ~80mm length\n\nhull_length = 80;\nhull_width = 25;\nhull_height = 20;\nballoon_radius = 18;\nballoon_length = 55;\n\nmodule hull() {\n    difference() {\n        // Main hull body\n        hull_shape();\n        \n        // Cockpit cutout\n        translate([hull_length/2 - 15, 0, hull_height/2])\n            rotate([0, 90, 0])\n                cylinder(h=12, r=6, $fn=20);\n        \n        // Window indentations\n        for(i = [-1, 1]) {\n            translate([hull_length/4, i*(hull_width/2 - 1), 0])\n                cube([hull_length/2, 2, hull_height - 2], center=true);\n        }\n    }\n}\n\nmodule hull_shape() {\n    // Tapered hull with rounded edges\n    hull() {\n        translate([hull_length/2 - 5, 0, 0])\n            cube([hull_length - 10, hull_width, hull_height], center=true);\n        translate([hull_length/2 - 5, 0, 0])\n            cube([hull_length, hull_width - 8, hull_height - 5], center=true);\n    }\n}\n\nmodule balloon_envelope() {\n    // Main balloon with reinforcement bands\n    difference() {\n        scale([balloon_length/2, balloon_radius, balloon_radius])\n            sphere(r=1, $fn=40);\n        \n        // Remove bottom for attachment\n        translate([0, 0, -balloon_radius])\n            cube([balloon_length*2, balloon_radius*2, balloon_radius], center=true);\n        \n        // Reinforcement bands\n        for(i = [0.3, 0.6, 0.9]) {\n            rotate([0, 90, 0])\n                translate([i*balloon_length - balloon_length/2, 0, 0])\n                    cylinder(h=balloon_radius*2, r=balloon_radius + 1, $fn=40);\n        }\n    }\n}\n\nmodule propellers() {\n    // Rear propeller assembly\n    translate([-hull_length/2 - 8, 0, 2]) {\n        // Propeller hub\n        cylinder(h=4, r=3, $fn=12);\n        \n        // Propeller blades\n        for(i = [0:60:359]) {\n            rotate([0, 0, i])\n                translate([0, 0, 2])\n                    cube([12, 1.5, 0.8], center=true);\n        }\n        \n        // Drive shaft\n        translate([3, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=8, r=1.5, $fn=8);\n    }\n}\n\nmodule rigging() {\n    // Support cables between balloon and hull\n    color(\"gray\")\n    for(i = [-1, 1]) {\n        // Front cables\n        translate([hull_length/2 - 10, i*hull_width/2, hull_height/2])\n            cylinder(h=balloon_radius*1.5, r=0.5, $fn=6);\n        \n        // Rear cables\n        translate([-hull_length/2 + 10, i*hull_width/2, hull_height/2])\n            cylinder(h=balloon_radius*1.5, r=0.5, $fn=6);\n    }\n    \n    // Central mast\n    translate([0, 0, hull_height/2])\n        cylinder(h=balloon_radius, r=1, $fn=8);\n}\n\nmodule fins() {\n    // Tail fins for stability\n    translate([-balloon_length/2 - 5, 0, balloon_radius/2]) {\n        // Vertical fin\n        rotate([0, 90, 0])\n            cube([balloon_radius, 1.5, balloon_radius], center=true);\n        \n        // Horizontal stabilizers\n        for(y = [-1, 1]) {\n            translate([0, y*balloon_radius/2, 0])\n                rotate([90, 0, 0])\n                    cube([balloon_radius/2, 1.5, balloon_radius/2], center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Balloon envelope\n    translate([0, 0, balloon_radius + hull_height/2])\n        balloon_envelope();\n    \n    // Hull\n    hull();\n    \n    // Fins\n    fins();\n    \n    // Rigging\n    rigging();\n    \n    // Propeller\n    propellers();\n}",
    "renders": true
  },
  {
    "vehicle": "cloudhopper",
    "openscad_code": "// Cloudhopper balloon system\n// Moderate complexity realistic style\n// Designed for 3D printing with minimal overhangs\n\n$fn = 32;\n\n// Overall dimensions\nballoon_diameter = 60;\nbasket_size = 25;\ntotal_height = 80;\n\nmodule balloon_envelope() {\n    // Main balloon sphere with slight flattening on bottom\n    difference() {\n        scale([1, 1, 1.1])\n            sphere(d = balloon_diameter);\n        // Flatten bottom for printing\n        translate([0, 0, -balloon_diameter/2 - 1])\n            cube([balloon_diameter*2, balloon_diameter*2, balloon_diameter], center = true);\n    }\n    \n    // Vertical envelope seams\n    for(i = [0:7]) {\n        rotate([0, 0, i * 45])\n            translate([0, balloon_diameter/2 - 1, 0])\n                rotate([90, 0, 0])\n                    cylinder(h = balloon_diameter - 4, d = 2, center = true);\n    }\n    \n    // Inflation port on bottom\n    translate([0, 0, -balloon_diameter/2 + 3])\n        cylinder(h = 5, d = 8);\n}\n\nmodule burner_assembly() {\n    // Burner housing\n    translate([0, 0, -balloon_diameter/2 - 8])\n        cylinder(h = 6, d = 12);\n    \n    // Burner flame deflector\n    translate([0, 0, -balloon_diameter/2 - 11])\n        cylinder(h = 2, d1 = 14, d2 = 10);\n    \n    // Control cables\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90])\n            translate([5, 0, -balloon_diameter/2 - 8])\n                cylinder(h = 15, d = 1);\n    }\n}\n\nmodule load_frame() {\n    // Main load ring\n    translate([0, 0, -balloon_diameter/2 - 20])\n        rotate_extrude()\n            translate([15, 0, 0])\n                circle(d = 4);\n    \n    // Support cables to balloon\n    for(i = [0:7]) {\n        rotate([0, 0, i * 45])\n            translate([14, 0, -balloon_diameter/2 - 20])\n                cylinder(h = 12, d = 1);\n    }\n}\n\nmodule wicker_basket() {\n    // Basket base\n    translate([0, 0, -total_height + basket_size/2])\n        cube([basket_size, basket_size, basket_size/2], center = true);\n    \n    // Basket walls\n    difference() {\n        cube([basket_size + 4, basket_size + 4, basket_size], center = true);\n        translate([0, 0, basket_size/4])\n            cube([basket_size - 2, basket_size - 2, basket_size + 1], center = true);\n    }\n    \n    // Rim detail\n    translate([0, 0, -total_height + basket_size])\n        cube([basket_size + 4, basket_size + 4, 3], center = true);\n    \n    // Wicker texture\n    for(i = [-10:10]) {\n        translate([i * 2, 0, -total_height + i])\n            cube([1, basket_size + 4, basket_size], center = true);\n    }\n    for(i = [-10:10]) {\n        translate([0, i * 2, -total_height + i])\n            cube([basket_size + 4, 1, basket_size], center = true);\n    }\n}\n\nmodule support_ropes() {\n    // Ropes from frame to basket\n    for(i = [0:3]) {\n        angle = i * 90;\n        rotate([0, 0, angle])\n            translate([basket_size/2 + 2, 0, -balloon_diameter/2 - 20])\n                cylinder(h = total_height - balloon_diameter/2 - 20 - basket_size/2, d = 1.5);\n    }\n}\n\n// Assembly\nunion() {\n    balloon_envelope();\n    burner_assembly();\n    load_frame();\n    support_ropes();\n    wicker_basket();\n}",
    "renders": true
  },
  {
    "vehicle": "skylift",
    "openscad_code": "// Skylift (bucket truck) – medium complexity, printable, realistic style\n// Overall footprint: ~85 mm long, 40 mm wide, 45 mm high\n\n// Parameters\n$fa = 2; $fs = 0.5;\n\ntruck_l = 58;\ntruck_w = 30;\ntruck_h = 20;\n\nwheel_r = 7;\nwheel_w = 5;\nwheel_clear = 3;\n\nboom_len = 70;\nboom_w = 5;\nboom_h = 4;\n\nbucket_r = 12;\nbucket_h = 10;\nwall_t = 2;\n\n// Color constants\ncolor_chassis = \"gray40\";\ncolor_body = \"darkblue\";\ncolor_outriggers = \"gray30\";\ncolor_bucket = \"orange\";\n\n// Main assembly\nmodule skylift() {\n    union() {\n        // Chassis frame\n        translate([0, 0, wheel_r])\n            color(color_chassis)\n            chassis();\n\n        // Truck body\n        translate([0, 0, wheel_r + truck_h/2])\n            color(color_body)\n            truck_body();\n\n        // Wheels\n        wheels();\n\n        // Outriggers\n        translate([-truck_l/2 + 5, -truck_w/2 - 2, wheel_r])\n            color(color_outriggers)\n            outrigger_pair();\n\n        // Boom assembly\n        translate([truck_l/2 - 5, 0, wheel_r + truck_h])\n            rotate([0, 0, 20])\n            color(color_chassis)\n            boom_assembly();\n    }\n}\n\n// Chassis\nmodule chassis() {\n    difference() {\n        cube([truck_l, truck_w, 4], center=true);\n        // Mount holes for body screws – printable\n        for (x = [-truck_l/2 + 10, truck_l/2 - 10])\n            translate([x, 0, 2])\n                cylinder(h=5, r=1.5, $fn=12);\n    }\n}\n\n// Truck body\nmodule truck_body() {\n    difference() {\n        cube([truck_l - 4, truck_w - 2, truck_h], center=true);\n        // Cabin windows\n        translate([-truck_l/4, 0, truck_h/2 - 1])\n            cube([6, truck_w - 4, 6], center=true);\n    }\n}\n\n// Wheels\nmodule wheels() {\n    for (side = [-1, 1])\n        for (axle = [-truck_l/3, truck_l/3])\n            translate([axle, side * (truck_w/2 + wheel_clear), 0])\n                rotate([0, 90, 0])\n                    wheel();\n}\n\nmodule wheel() {\n    difference() {\n        cylinder(h=wheel_w, r=wheel_r, center=true, $fn=20);\n        // Simple tread pattern – printable without supports\n        for (i = [0:6])\n            rotate([0, 0, i * 60])\n                translate([wheel_r - 1, 0, 0])\n                    cube([2, 1, wheel_w + 0.2], center=true);\n    }\n}\n\n// Outriggers\nmodule outrigger_pair() {\n    for (side = [-1, 1])\n        translate([0, side * 8, 0])\n            rotate([90, 0, 0])\n                cylinder(h=12, r=2, $fn=8);\n}\n\n// Boom system\nmodule boom_assembly() {\n    union() {\n        // Base turntable\n        cylinder(h=5, r=6, $fn=20);\n\n        // Boom – two telescoping sections\n        translate([0, 0, 3])\n            rotate([0, -20, 0])\n            boom_section(boom_len * 0.75);\n\n        // Second section\n        translate([boom_len * 0.75 * cos(20), 0, boom_len * 0.75 * sin(20) + 3])\n            rotate([0, -20, 0])\n            boom_section(boom_len * 0.5);\n\n        // Bucket\n        translate([boom_len * 0.75 * cos(20) + boom_len * 0.5 * cos(20),\n                   0,\n                   boom_len * 0.75 * sin(20) + boom_len * 0.5 * sin(20) + 3])\n            rotate([0, 0, 0])\n            bucket();\n    }\n}\n\nmodule boom_section(len) {\n    hull() {\n        cube([len, boom_w, boom_h], center=true);\n        translate([len - boom_w/2, 0, 0])\n            cube([boom_w, boom_w, boom_h], center=true);\n    }\n}\n\nmodule bucket() {\n    difference() {\n        union() {\n            // Main bucket\n            cylinder(h=bucket_h, r=bucket_r, $fn=24);\n            // Rim lip\n            translate([0, 0, bucket_h])\n                cylinder(h=wall_t, r=bucket_r + wall_t, $fn=24);\n            // Attachment bracket\n            translate([bucket_r - 2, 0, bucket_h/2])\n                rotate([90, 0, 0])\n                    cylinder(h=4, r=2, $fn=8);\n        }\n        // Interior hollow\n        translate([0, 0, wall_t])\n            cylinder(h=bucket_h, r=bucket_r - wall_t, $fn=24);\n    }\n}\n\n// Render\nskylift();",
    "renders": true
  },
  {
    "vehicle": "aerostat",
    "openscad_code": "// Aerostat (Tethered Helium Balloon) - Realistic Medium Complexity\n// Total height ≈ 75 mm, designed for FDM printing\n\n$fn = 36;               // Smooth curves for realistic look\nwall = 1.2;             // 3×0.4 mm nozzle widths for strong walls\n\nmodule fin() {\n    // Vertical stabilizing fin (airfoil-like profile)\n    linear_extrude(height = wall)\n        polygon(points=[\n            [0,0], [15,0], [18,7], [15,14], [0,14], [3,7]\n        ]);\n}\n\nmodule gondola() {\n    // Instrument gondola with sensor window\n    difference() {\n        hull() {\n            translate([0,0,5]) sphere(d=12);\n            translate([0,0,-5]) sphere(d=12);\n        }\n        // Flat bottom\n        translate([0,0,-6]) cube([20,20,12], center=true);\n        // Sensor window\n        translate([0,-6.5,0]) rotate([0,90,0])\n            cylinder(h=10, d=6, center=true);\n    }\n}\n\nmodule rigging_lines(count=4) {\n    // Kevlar-like tether lines\n    for(i=[0:count-1])\n        rotate([0,0,i*360/count])\n            translate([0,0,-25])\n                cylinder(h=35, d=0.8, center=false);\n}\n\nmodule envelope() {\n    // Main helium envelope with internal cavity\n    difference() {\n        // Outer ellipsoid envelope\n        scale([1, 1, 1.2]) sphere(d=50);\n        // Inner cavity (2×wall thickness)\n        scale([1, 1, 1.2]) sphere(d=50-2*wall);\n    }\n    \n    // Reinforcement band around equator\n    translate([0,0,-2])\n        rotate_extrude()\n            translate(25-wall/2,0,0)\n                square([wall, 4]);\n}\n\nmodule tail_assembly() {\n    // Tail fins for stability\n    translate([0,0,22])\n    for(a=[0,120,240])\n        rotate([0,0,a])\n            rotate([15,0,0])\n                fin();\n}\n\n// Main assembly\nunion() {\n    // Primary envelope\n    envelope();\n    \n    // Tail fins\n    tail_assembly();\n    \n    // Gondola suspended below\n    translate([0,0,-35])\n        gondola();\n    \n    // Suspension rigging\n    translate([0,0,-25])\n        rigging_lines();\n    \n    // Top mooring point\n    translate([0,0,30])\n        cylinder(h=5, d=3, center=true);\n}",
    "renders": true
  },
  {
    "vehicle": "orbiter",
    "openscad_code": "// Orbiter Space Shuttle Medium-Complexity Model\n// Basic realistic 3D-printable design\n\n$fn = 36;\n\n// Overall scale factor for easy resizing\nscale_factor = 0.8;\n\n// Main fuselage\nmodule fuselage() {\n    // Main body tube\n    difference() {\n        hull() {\n            cylinder(h=60 * scale_factor, r1=7 * scale_factor, r2=7 * scale_factor);\n            translate([0, 0, 60 * scale_factor])\n            cylinder(h=25 * scale_factor, r1=7 * scale_factor, r2=5 * scale_factor);\n        }\n        // Cockpit window cutouts\n        for(a = [-30, 30])\n            translate([a * scale_factor, 6.5 * scale_factor, 75 * scale_factor])\n            rotate([90, 0, 0])\n            cylinder(h=3 * scale_factor, r=1.2 * scale_factor);\n    }\n}\n\n// Wings\nmodule wings() {\n    union() {\n        // Left wing\n        translate([-12 * scale_factor, 0, 35 * scale_factor])\n        rotate([0, 0, -20])\n        cube([25 * scale_factor, 2 * scale_factor, 8 * scale_factor], center=true);\n        \n        // Right wing\n        translate([12 * scale_factor, 0, 35 * scale_factor])\n        rotate([0, 0, 20])\n        cube([25 * scale_factor, 2 * scale_factor, 8 * scale_factor], center=true);\n        \n        // Wing tips vertical\n        for(side = [-1, 1]) {\n            translate([side * 25 * scale_factor, 0, 35 * scale_factor])\n            cube([2 * scale_factor, 1 * scale_factor, 10 * scale_factor], center=true);\n        }\n    }\n}\n\n// Tail\nmodule tail() {\n    union() {\n        // Vertical stabilizer\n        translate([0, 0, 80 * scale_factor])\n        rotate([0, 10, 0])\n        cube([0.8 * scale_factor, 12 * scale_factor, 20 * scale_factor], center=true);\n        \n        // Horizontal stabilizers\n        for(side = [-1, 1]) {\n            translate([side * 8 * scale_factor, 0, 75 * scale_factor])\n            rotate([0, 0, side * 20])\n            cube([15 * scale_factor, 1 * scale_factor, 4 * scale_factor], center=true);\n        }\n    }\n}\n\n// Main engines\nmodule engines() {\n    for(i = [-1, 0, 1]) {\n        translate([i * 3 * scale_factor, -7 * scale_factor, 30 * scale_factor])\n        cylinder(h=15 * scale_factor, r=2 * scale_factor);\n    }\n}\n\n// Cargo bay doors\nmodule cargo_doors() {\n    translate([0, 6.5 * scale_factor, 50 * scale_factor])\n    difference() {\n        cube([10 * scale_factor, 0.5 * scale_factor, 30 * scale_factor], center=true);\n        translate([0, 0.5 * scale_factor, 15 * scale_factor])\n        cube([9 * scale_factor, 2 * scale_factor, 2 * scale_factor], center=true);\n        translate([0, 0.5 * scale_factor, -15 * scale_factor])\n        cube([9 * scale_factor, 2 * scale_factor, 2 * scale_factor], center=true);\n    }\n}\n\n// OMS pods\nmodule oms_pods() {\n    for(side = [-1, 1]) {\n        translate([side * 8 * scale_factor, -2 * scale_factor, 70 * scale_factor])\n        rotate([0, 30, 0])\n        cylinder(h=8 * scale_factor, r=2 * scale_factor);\n    }\n}\n\n// Assembly\nunion() {\n    fuselage();\n    wings();\n    tail();\n    engines();\n    cargo_doors();\n    oms_pods();\n}",
    "renders": true
  },
  {
    "vehicle": "spaceplane",
    "openscad_code": "// Spaceplane - medium complexity, realistic style\n// Overall length ~80mm, wingspan ~60mm, printable without supports\n\n$fn = 32;\n\n// Main dimensions\nfuselage_length = 80;\nfuselage_diameter = 12;\nwing_span = 60;\nwing_chord = 25;\nwing_thickness = 3;\ntail_height = 15;\ntail_span = 25;\n\nmodule fuselage() {\n    // Main cylindrical body\n    hull() {\n        // Nose cone\n        translate([0, 0, fuselage_length/2 - 5])\n            cylinder(h = 15, r1 = fuselage_diameter/2, r2 = 0);\n        \n        // Main body\n        cylinder(h = fuselage_length, r = fuselage_diameter/2, center = true);\n        \n        // Tail taper\n        translate([0, 0, -fuselage_length/2 + 5])\n            cylinder(h = 10, r1 = fuselage_diameter/2, r2 = fuselage_diameter/3);\n    }\n}\n\nmodule wings() {\n    // Main wing\n    difference() {\n        // Wing box\n        translate([-wing_span/2 + wing_chord/2, 0, 0])\n            cube([wing_span, wing_thickness, wing_chord], center = true);\n        \n        // Wing root fillet cuts\n        for (i = [-1, 1]) {\n            translate([i * fuselage_diameter/2, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h = wing_thickness + 2, r = fuselage_diameter/2 + 2, center = true);\n        }\n        \n        // Wingtip taper\n        translate([wing_span/2 - wing_chord/4, 0, 0])\n            rotate([0, 0, -15])\n                cube([wing_chord, wing_thickness + 1, wing_chord], center = true);\n        translate([-wing_span/2 + wing_chord/4, 0, 0])\n            rotate([0, 0, 15])\n                cube([wing_chord, wing_thickness + 1, wing_chord], center = true);\n    }\n    \n    // Wing strakes\n    for (i = [-1, 1]) {\n        translate([i * (fuselage_diameter/2 + 2), 0, -wing_chord/4])\n            rotate([0, i * 30, 0])\n                cube([8, wing_thickness/2, 12], center = true);\n    }\n}\n\nmodule tail_assembly() {\n    // Vertical stabilizer\n    difference() {\n        translate([0, 0, -fuselage_length/2])\n            rotate([0, 90, 0])\n                cube([tail_height, tail_thickness = 2, tail_span/2], center = true);\n        \n        // Fuselage cutout\n        translate([0, 0, -fuselage_length/2])\n            rotate([0, 90, 0])\n                cylinder(h = tail_thickness + 2, r = fuselage_diameter/2, center = true);\n    }\n    \n    // Horizontal stabilizers\n    for (i = [-1, 1]) {\n        translate([0, i * (tail_span/4), -fuselage_length/2 - 5])\n            rotate([i * 15, 0, 0])\n                cube([tail_span/2, tail_thickness, 10], center = true);\n    }\n}\n\nmodule engines() {\n    // Two engine nacelles under wings\n    for (i = [-1, 1]) {\n        translate([i * (wing_span/4), 0, -wing_chord/2 - 3])\n            rotate([90, 0, 0])\n                cylinder(h = 8, r = 3, center = true);\n        \n        // Engine exhaust\n        translate([i * (wing_span/4), 0, -wing_chord/2 - 7])\n            rotate([90, 0, 0])\n                cylinder(h = 3, r1 = 3, r2 = 2);\n    }\n}\n\nmodule cockpit() {\n    // Cockpit canopy\n    translate([0, 0, fuselage_length/2 - 15])\n        scale([1, 0.8, 0.5])\n            sphere(d = fuselage_diameter * 1.2);\n    \n    // Cockpit opening cut\n    translate([0, 0, fuselage_length/2 - 10])\n        cube([fuselage_diameter * 0.8, fuselage_diameter * 0.6, 15], center = true);\n}\n\nmodule landing_gear() {\n    // Main gear struts\n    for (i = [-1, 1]) {\n        for (j = [-1, 1]) {\n            translate([i * (wing_span/4), j * 3, -wing_chord/2 - 2])\n                cylinder(h = 4, r = 1);\n        }\n    }\n    \n    // Nose gear\n    translate([0, 0, fuselage_length/2 - 20])\n        cylinder(h = 5, r = 1);\n}\n\n// Assembly\nunion() {\n    fuselage();\n    wings();\n    tail_assembly();\n    engines();\n    cockpit();\n    landing_gear();\n}",
    "renders": true
  },
  {
    "vehicle": "rocketplane",
    "openscad_code": "// Rocketplane - Realistic Style, Medium Complexity\n// 3D printable model with no overhangs requiring support\n\n$fn = 32;  // Smooth curves for 3D printing\n\n// Overall dimensions (mm)\nlength = 90;\nwing_span = 50;\nheight = 15;\n\n// Main assembly\nmodule rocketplane() {\n    union() {\n        // Main fuselage\n        fuselage();\n        \n        // Wings\n        wings();\n        \n        // Vertical stabilizer\n        vertical_stabilizer();\n        \n        // Engine nacelles\n        engines();\n        \n        // Cockpit\n        cockpit();\n        \n        // Control surfaces\n        control_surfaces();\n    }\n}\n\n// Main fuselage body\nmodule fuselage() {\n    // Main body - tapered cylinder with rounded nose\n    hull();\n    \n    // Tail cone\n    tail_cone();\n}\n\nmodule hull() {\n    // Forward fuselage (tapered)\n    translate([0, 0, height/2])\n    rotate([90, 0, 0])\n    cylinder(h1=length*0.4, h2=length*0.3, r1=height*0.8, r2=height*0.7);\n    \n    // Mid fuselage (constant diameter)\n    translate([-length*0.1, 0, height/2])\n    rotate([90, 0, 0])\n    cylinder(h=length*0.4, r=height*0.7);\n    \n    // Rear fuselage (tapered)\n    translate([-length*0.3, 0, height/2])\n    rotate([90, 0, 0])\n    cylinder(h1=length*0.2, h2=length*0.3, r1=height*0.7, r2=height*0.5);\n}\n\nmodule tail_cone() {\n    translate([-length*0.45, 0, height/2])\n    rotate([90, 0, 0])\n    cylinder(h=length*0.2, r1=height*0.5, r2=height*0.2);\n}\n\n// Main wing assembly\nmodule wings() {\n    // Root wing\n    translate([0, 0, height*0.7])\n    rotate([0, 0, 0])\n    wing_half(wing_span/2);\n    \n    // Mirrored other wing\n    mirror([0, 1, 0])\n    translate([0, 0, height*0.7])\n    wing_half(wing_span/2);\n}\n\nmodule wing_half(span) {\n    // Main wing panel\n    difference() {\n        translate([span/2, 0, 0])\n        cube([span, length*0.4, height*0.15], center=true);\n        \n        // Wing taper\n        translate([span*1.2, 0, 0])\n        rotate([0, 0, 45])\n        cube([span*1.5, span, height*0.3], center=true);\n    }\n    \n    // Wing tip\n    translate([span, 0, 0])\n    sphere(r=height*0.15);\n}\n\n// Vertical stabilizer\nmodule vertical_stabilizer() {\n    translate([-length*0.35, 0, height*1.2])\n    rotate([0, 90, 0])\n    difference() {\n        // Main fin\n        cube([height*1.2, length*0.2, height*0.8], center=true);\n        \n        // Rounded top\n        translate([0, 0, height*0.4])\n        cube([height*1.2, length*0.2, height*0.4], center=true);\n    }\n}\n\n// Engine nacelles\nmodule engines() {\n    // Left engine\n    translate([-length*0.3, -wing_span*0.3, height*0.4])\n    engine();\n    \n    // Right engine\n    translate([-length*0.3, wing_span*0.3, height*0.4])\n    engine();\n}\n\nmodule engine() {\n    // Engine housing\n    cylinder(h=length*0.15, r=height*0.25);\n    \n    // Engine nozzle\n    translate([0, 0, length*0.15])\n    cylinder(h=length*0.05, r1=height*0.25, r2=height*0.15);\n}\n\n// Cockpit canopy\nmodule cockpit() {\n    translate([length*0.25, 0, height*1.1])\n    rotate([90, 0, 0])\n    scale([1.2, 1, 0.6])\n    sphere(r=height*0.4);\n    \n    // Cockpit base\n    translate([length*0.25, 0, height*0.8])\n    cube([height*0.8, height*0.6, height*0.3], center=true);\n}\n\n// Control surfaces\nmodule control_surfaces() {\n    // Elevators\n    elevator();\n    \n    // Rudders\n    rudder();\n}\n\nmodule elevator() {\n    // Left elevator\n    translate([-length*0.35, -wing_span*0.45, height*0.7])\n    rotate([0, 15, 0])\n    cube([length*0.15, wing_span*0.2, height*0.05], center=true);\n    \n    // Right elevator\n    translate([-length*0.35, wing_span*0.45, height*0.7])\n    rotate([0, -15, 0])\n    cube([length*0.15, wing_span*0.2, height*0.05], center=true);\n}\n\nmodule rudder() {\n    // Rudder on vertical stabilizer\n    translate([-length*0.35, 0, height*1.6])\n    rotate([0, 0, 0])\n    cube([height*0.8, height*0.1, height*0.3], center=true);\n}\n\n// Generate the model\nrocketplane();",
    "renders": true
  },
  {
    "vehicle": "hypersonic",
    "openscad_code": "// Hypersonic vehicle - medium complexity realistic style\n// Approx 80mm length for 3D printing\n\n$fn = 64;\n\n// Main parameters\nbody_length = 80;\nbody_width = 20;\nbody_height = 8;\n\n// Fuselage body\nmodule fuselage() {\n    // Central fuselage\n    difference() {\n        hull() {\n            // Nose cone\n            translate([0, 0, 0])\n                scale([1, 0.8, 0.6])\n                sphere(r=8);\n            \n            // Main body\n            translate([body_length/2 - 10, 0, 0])\n                cube([body_length - 20, body_width, body_height], center=true);\n                \n            // Tail taper\n            translate([body_length - 8, 0, 0])\n                scale([1, 0.7, 0.5])\n                sphere(r=6);\n        }\n        \n        // Cockpit cavity\n        translate([15, 0, 3])\n            cube([12, 8, 4], center=true);\n    }\n}\n\n// Wings\nmodule wings() {\n    // Main wings\n    for (side = [-1, 1]) {\n        translate([body_length/2 - 15, side * body_width/2, 0])\n            rotate([0, 0, side * -5])\n            difference() {\n                // Wing shape\n                hull() {\n                    cube([0, 0, 0]);\n                    translate([10, side * 25, 0])\n                        cube([0, 0, 0]);\n                    translate([5, side * 20, -2])\n                        cube([0, 0, 0]);\n                }\n                \n                // Wing cutout for fuselage\n                translate([0, side * -body_width/2, -body_height])\n                    cube([20, body_width, body_height*2], center=true);\n            }\n    }\n}\n\n// Control surfaces\nmodule control_surfaces() {\n    // Vertical stabilizers\n    for (side = [-1, 1]) {\n        translate([body_length - 12, side * 8, 2])\n            rotate([0, 0, side * 15])\n            difference() {\n                cube([8, 2, 6]);\n                translate([0, 0, -1])\n                    cube([10, 3, 1], center=true);\n            }\n    }\n    \n    // Horizontal stabilizer\n    rotate([0, 10, 0])\n    translate([body_length - 10, 0, -4])\n        cube([12, body_width * 1.5, 1.5], center=true);\n}\n\n// Engine nacelles\nmodule engines() {\n    for (side = [-1, 1]) {\n        translate([body_length/2 + 5, side * (body_width/2 + 8), -2])\n            rotate([0, 5, 0])\n            difference() {\n                // Engine housing\n                hull() {\n                    cylinder(h=15, r1=4, r2=3);\n                    translate([0, 0, 15])\n                        cylinder(h=5, r1=3, r2=2);\n                }\n                \n                // Intake\n                translate([0, 0, -1])\n                    cylinder(h=2, r=3);\n                \n                // Exhaust\n                translate([0, 0, 20])\n                    cylinder(h=3, r=1.5);\n            }\n    }\n}\n\n// Landing gear fairings (simplified)\nmodule landing_gear() {\n    // Main gear\n    for (pos = [body_length/3, body_length*2/3]) {\n        for (side = [-1, 1]) {\n            translate([pos, side * (body_width/2 + 2), -body_height/2])\n                rotate([90, 0, 0])\n                cylinder(h=4, r=2);\n        }\n    }\n    \n    // Nose gear\n    translate([10, 0, -body_height/2])\n        rotate([90, 0, 0])\n        cylinder(h=3, r=1.5);\n}\n\n// Assembly\nunion() {\n    fuselage();\n    wings();\n    control_surfaces();\n    engines();\n    landing_gear();\n}",
    "renders": true
  },
  {
    "vehicle": "suborbital",
    "openscad_code": "// Suborbital spaceplane - realistic style, medium complexity\n// Overall length ~90mm, wingspan ~65mm, designed for 3D printing\n\n$fn = 32;  // Smooth curves for realistic appearance\n\nmodule main_body() {\n    // Fuselage - elongated teardrop shape\n    hull() {\n        // Nose cone\n        translate([0, 0, 30])\n            scale([1, 1, 1.5])\n            sphere(8);\n        \n        // Main body\n        translate([0, 0, 12])\n            scale([1, 0.8, 1])\n            cylinder(h=25, r1=8, r2=10);\n            \n        // Tail taper\n        translate([0, 0, -8])\n            scale([1, 0.7, 1])\n            cylinder(h=20, r1=10, r2=4);\n    }\n}\n\nmodule wings() {\n    // Main wings - delta wing design\n    difference() {\n        // Left wing\n        translate([-30, 0, 5])\n            rotate([0, -5, -30])\n            scale([1, 0.15, 1])\n            cube([35, 20, 2]);\n            \n        // Right wing\n        translate([30, 0, 5])\n            rotate([0, -5, 30])\n            scale([1, 0.15, 1])\n            mirror([1, 0, 0])\n            cube([35, 20, 2]);\n            \n        // Wing root fairings\n        translate([0, 0, 5])\n            cylinder(h=15, r=9);\n    }\n    \n    // Wing tip stabilizers\n    for (x = [-30, 30]) {\n        translate([x, 0, 12])\n            rotate([0, 0, x > 0 ? 30 : -30])\n            scale([0.3, 0.1, 1])\n            cube([8, 15, 3]);\n    }\n}\n\nmodule tail_surfaces() {\n    // Vertical stabilizer\n    difference() {\n        translate([0, 0, -12])\n            rotate([0, 15, 0])\n            scale([0.15, 1, 1])\n            cube([2, 20, 15]);\n            \n        // Rudder cutout\n        translate([0, 0, -8])\n            rotate([0, 15, 0])\n            cube([3, 10, 8]);\n    }\n    \n    // Horizontal stabilizers\n    for (y = [-1, 1]) {\n        translate([0, y * 15, -15])\n            rotate([5, 0, 0])\n            scale([1, 0.1, 1])\n            cube([20, 2, 8]);\n    }\n}\n\nmodule engines() {\n    // Engine nacelles (2 engines)\n    for (x = [-12, 12]) {\n        hull() {\n            translate([x, 0, -15])\n                cylinder(h=18, r=4);\n                \n            translate([x, 0, -15])\n                sphere(4);\n                \n            translate([x, 0, -12])\n                cylinder(h=12, r=3, r2=2.5);\n        }\n        \n        // Engine nozzles\n        difference() {\n            translate([x, 0, -27])\n                cylinder(h=5, r=2.5);\n                \n            translate([x, 0, -27.5])\n                cylinder(h=6, r=2);\n        }\n    }\n}\n\nmodule cockpit() {\n    // Cockpit canopy\n    difference() {\n        translate([0, 0, 25])\n            scale([1, 0.6, 0.8])\n            sphere(7);\n            \n        // Cutout for pilot view\n        translate([0, 4, 25])\n            cube([12, 8, 6], center=true);\n    }\n    \n    // Cockpit frame detail\n    translate([0, 0, 25])\n        difference() {\n            scale([1.1, 0.7, 0.9])\n            sphere(7.5);\n            \n            scale([1, 0.6, 0.8])\n            sphere(7);\n        }\n}\n\nmodule landing_gear() {\n    // Retracted landing gear doors\n    color(\"silver\") {\n        // Main gear doors\n        for (x = [-15, 15]) {\n            translate([x, 0, -3])\n                rotate([0, 90, 0])\n                cylinder(h=12, r=1.5);\n        }\n        \n        // Nose gear door\n        translate([0, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h=8, r=1.2);\n    }\n}\n\n// Assembly\nunion() {\n    main_body();\n    wings();\n    tail_surfaces();\n    engines();\n    cockpit();\n    landing_gear();\n}\n\n// Add subtle panel lines for realism\nmodule panel_lines() {\n    color(\"gray\", 0.3) {\n        // Fuselage panel lines\n        for (i = [1:4]) {\n            rotate([0, 0, i * 90])\n            translate([0, 9.5, 12])\n                cube([0.5, 20, 0.5]);\n        }\n        \n        // Wing panel lines\n        for (i = [1:3]) {\n            translate([i * 10 - 20, 0, 5.5])\n                cube([0.5, 30, 0.5]);\n        }\n    }\n}\n\npanel_lines();",
    "renders": true
  },
  {
    "vehicle": "supersonic",
    "openscad_code": "// Supersonic Jet - Realistic Style, Medium Complexity\n// Total length ~90mm, wingspan ~60mm, suitable for 3D printing\n\n// Main Parameters\nfuselage_length = 90;\nfuselage_diameter = 8;\nwing_span = 60;\nwing_root = 20;\nwing_tip = 8;\nwing_sweep = 30;\n\n// Fuselage Module\nmodule fuselage() {\n    // Main body - tapered cylinder\n    hull() {\n        // Nose cone\n        translate([0, 0, fuselage_length * 0.9])\n            scale([1, 1, 2])\n            sphere(d = fuselage_diameter);\n        \n        // Main body\n        translate([0, 0, fuselage_length * 0.3])\n            cylinder(h = fuselage_length * 0.6, d1 = fuselage_diameter * 0.9, d2 = fuselage_diameter, center = true);\n        \n        // Tail taper\n        translate([0, 0, -fuselage_length * 0.1])\n            cylinder(h = fuselage_length * 0.2, d1 = fuselage_diameter, d2 = fuselage_diameter * 0.7, center = true);\n    }\n    \n    // Cockpit bump\n    translate([0, -fuselage_diameter/2, fuselage_length * 0.7])\n        scale([1.2, 0.8, 0.5])\n        sphere(d = fuselage_diameter);\n}\n\n// Wing Module\nmodule wing() {\n    // Left wing\n    translate([0, 0, fuselage_length * 0.4])\n        rotate([0, wing_sweep, 0])\n        hull() {\n            translate([0, 0, 0])\n                cube([wing_root, 2, wing_root/3], center = true);\n            translate([0, -wing_span/2, 0])\n                cube([wing_tip, 2, wing_tip/3], center = true);\n        }\n    \n    // Right wing (mirrored)\n    mirror([0, 1, 0])\n        translate([0, 0, fuselage_length * 0.4])\n            rotate([0, wing_sweep, 0])\n            hull() {\n                translate([0, 0, 0])\n                    cube([wing_root, 2, wing_root/3], center = true);\n                translate([0, -wing_span/2, 0])\n                    cube([wing_tip, 2, wing_tip/3], center = true);\n            }\n}\n\n// Tail surfaces\nmodule tail_surfaces() {\n    // Vertical stabilizer\n    translate([0, 0, -fuselage_length * 0.15])\n        rotate([0, 0, 0])\n        hull() {\n            translate([0, 0, 0])\n                cube([fuselage_diameter * 0.8, 2, fuselage_diameter * 1.5], center = true);\n            translate([0, 0, -fuselage_diameter * 1.5])\n                cube([fuselage_diameter * 0.4, 2, fuselage_diameter], center = true);\n        }\n    \n    // Horizontal stabilizers\n    for (y = [-1, 1]) {\n        translate([0, y * fuselage_diameter/2, -fuselage_length * 0.18])\n            rotate([0, -10, 0])\n            hull() {\n                translate([0, 0, 0])\n                    cube([fuselage_diameter * 1.2, 2, fuselage_diameter * 0.8], center = true);\n                translate([y * fuselage_diameter * 2, 0, 0])\n                    cube([fuselage_diameter * 0.6, 2, fuselage_diameter * 0.4], center = true);\n            }\n    }\n}\n\n// Engine intakes\nmodule intakes() {\n    for (side = [-1, 1]) {\n        translate([side * fuselage_diameter * 0.7, 0, fuselage_length * 0.5])\n            rotate([90, 0, 0])\n            cylinder(h = fuselage_diameter * 0.6, d1 = fuselage_diameter * 0.4, d2 = fuselage_diameter * 0.3);\n    }\n}\n\n// Exhaust nozzles\nmodule exhausts() {\n    for (side = [-1, 1]) {\n        translate([side * fuselage_diameter * 0.5, 0, -fuselage_length * 0.25])\n            rotate([90, 0, 0])\n            cylinder(h = fuselage_diameter * 1.2, d1 = fuselage_diameter * 0.3, d2 = fuselage_diameter * 0.2);\n    }\n}\n\n// Landing gear (simplified)\nmodule landing_gear() {\n    // Main gear - two small cylinders\n    for (side = [-1, 1]) {\n        translate([side * fuselage_diameter * 0.8, 0, fuselage_length * 0.25])\n            rotate([90, 0, 0])\n            cylinder(h = fuselage_diameter * 0.8, d = fuselage_diameter * 0.2);\n    }\n    \n    // Nose gear\n    translate([0, 0, fuselage_length * 0.85])\n        rotate([90, 0, 0])\n        cylinder(h = fuselage_diameter * 0.6, d = fuselage_diameter * 0.15);\n}\n\n// Main assembly\nunion() {\n    fuselage();\n    wing();\n    tail_surfaces();\n    intakes();\n    exhausts();\n    landing_gear();\n}",
    "renders": true
  },
  {
    "vehicle": "transonic",
    "openscad_code": "// Transonic Missile - Realistic Style, Medium Complexity\n// Designed for 3D printing with no overhangs >45°\n\n// Main dimensions\nlength = 85;\nbody_d = 12;\nfin_span = 8;\nfin_chord = 15;\n\n// Wall thickness for printing\nwall = 1.2;\n\n// Main body tube\nmodule body() {\n    difference() {\n        cylinder(h=length, d=body_d, $fn=64);\n        // Hollow core\n        translate([0,0,-1])\n            cylinder(h=length+2, d=body_d-wall*2, $fn=64);\n    }\n}\n\n// Nose cone - tangent ogive\nmodule nose() {\n    difference() {\n        // Solid nose\n        hull() {\n            translate([0,0,length])\n                sphere(d=body_d, $fn=64);\n            cylinder(h=body_d*2, d=body_d, $fn=64);\n        }\n        // Hollow interior\n        hull() {\n            translate([0,0,length])\n                sphere(d=body_d-wall*2, $fn=64);\n            cylinder(h=body_d*2-wall, d=body_d-wall*2, $fn=64);\n        }\n    }\n}\n\n// Fins - 4 symmetric trapezoidal fins\nmodule fins() {\n    for (i=[0:90:359]) {\n        rotate([0,0,i])\n            translate([body_d/2+wall, 0, length/3])\n            rotate([90,0,90])\n            linear_extrude(height=wall+0.2)\n                polygon([\n                    [0,0],\n                    [fin_chord,0],\n                    [fin_chord-5, fin_span],\n                    [2, fin_span-2]\n                ]);\n    }\n}\n\n// Guidance section\nmodule guidance_section() {\n    translate([0,0,length-body_d*2])\n    difference() {\n        cylinder(h=body_d*2, d=body_d+wall*2, $fn=64);\n        // Sensor windows\n        for (i=[0:120:359]) {\n            rotate([0,0,i])\n                translate([body_d/2+wall, 0, body_d])\n                rotate([0,90,0])\n                    cylinder(h=body_d/4, d=body_d/3, $fn=32);\n        }\n    }\n}\n\n// Motor nozzle\nmodule nozzle() {\n    translate([0,0,-body_d/2])\n    difference() {\n        cylinder(h=body_d/2, d1=body_d, d2=body_d/3, $fn=32);\n        cylinder(h=body_d/2+1, d1=body_d-wall*2, d2=body_d/3-wall, $fn=32);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    translate([0,0,length]) nose();\n    fins();\n    guidance_section();\n    nozzle();\n}\n\n// Mounting lugs (for launch rail)\nfor (i=[-1,1]) {\n    translate([0, i*body_d/2, length/2])\n        cube([body_d/3, wall, body_d/3], center=true);\n}",
    "renders": true
  },
  {
    "vehicle": "ramjet",
    "openscad_code": "// Realistic Ramjet Engine Model\n// Medium complexity, 3D printable\n\n$fn = 36; // Smooth curves\nwall_thickness = 1.2; // mm for 3D printing\nscale_factor = 0.6; // Overall scaling\n\nmodule ramjet_engine() {\n    // Main inlet cone\n    translate([-40*scale_factor, 0, 0])\n        rotate([0, 90, 0])\n        difference() {\n            cylinder(h=25*scale_factor, r1=15*scale_factor, r2=0);\n            cylinder(h=25*scale_factor + 0.1, r1=14*scale_factor, r2=0);\n        }\n    \n    // Inlet spike support struts\n    for (i = [0:3]) {\n        rotate([0, 0, i*90])\n            translate([-35*scale_factor, 0, 0])\n            difference() {\n                cube([15*scale_factor, 2*scale_factor, 2*scale_factor]);\n                translate([0, 1*scale_factor, 1*scale_factor])\n                    cube([15*scale_factor, 0.5*scale_factor, 0.5*scale_factor]);\n            }\n    }\n    \n    // Combustion chamber\n    translate([0, 0, 0])\n        difference() {\n            cylinder(h=35*scale_factor, r1=12*scale_factor, r2=10*scale_factor);\n            cylinder(h=35*scale_factor, r1=11*scale_factor, r2=9*scale_factor);\n        }\n    \n    // Flame holder rings\n    for (i = [0:3]) {\n        translate([15*scale_factor + i*5*scale_factor, 0, 0])\n            difference() {\n                cylinder(h=2*scale_factor, r=9*scale_factor, r=9*scale_factor);\n                cylinder(h=2.2*scale_factor, r=8*scale_factor, r=8*scale_factor);\n            }\n    }\n    \n    // External fuel injectors\n    for (i = [0:5]) {\n        rotate([0, 0, i*60])\n            translate([15*scale_factor, 12*scale_factor, 0])\n            rotate([0, 90, 0])\n            difference() {\n                cylinder(h=3*scale_factor, r=1*scale_factor, r=1*scale_factor);\n                cylinder(h=3.1*scale_factor, r=0.7*scale_factor, r=0.7*scale_factor);\n            }\n    }\n    \n    // Nozzle section\n    translate([35*scale_factor, 0, 0])\n        difference() {\n            cylinder(h=25*scale_factor, r1=10*scale_factor, r2=15*scale_factor);\n            cylinder(h=25*scale_factor, r1=9*scale_factor, r2=14*scale_factor);\n        }\n    \n    // Mounting lugs\n    for (i = [-1:1]) {\n        translate([20*scale_factor, 12*scale_factor*i*scale_factor, 0])\n        difference() {\n            cube([5*scale_factor, 6*scale_factor, 3*scale_factor]);\n            cube([5.2*scale_factor, 5.8*scale_factor, 2.8*scale_factor]);\n        }\n    }\n    \n    // Inlet lip\n    translate([-15*scale_factor, 0, 0])\n        difference() {\n            sphere(d=24*scale_factor);\n            sphere(d=22*scale_factor);\n        }\n    \n    // Internal airflow straightener vanes\n    for (i = [0:7]) {\n        rotate([0, 0, i*45])\n            translate([-10*scale_factor, 0, 0])\n            difference() {\n                cube([20*scale_factor, 0.5*scale_factor, 8*scale_factor]);\n                cube([20*scale_factor, 0.3*scale_factor, 7.8*scale_factor]);\n            }\n    }\n}\n\n// Generate the ramjet\nramjet_engine();",
    "renders": true
  },
  {
    "vehicle": "scramjet",
    "openscad_code": "// Scramjet engine - realistic, medium complexity\n// Designed for 3D printing with proper wall thickness and no overhangs\n\n$fn = 50;\nwall = 1.2;\n\nmodule intake() {\n    // Rectangular intake with rounded edges\n    difference() {\n        hull() {\n            translate([-8, -10, 0]) cube([16, 20, 8], center=true);\n            translate([-6, -8, 8]) cube([12, 16, 4], center=true);\n        }\n        \n        // Hollow out intake\n        translate([0, 0, 2]) \n        hull() {\n            translate([-6.8, -8.8, 0]) cube([13.6, 17.6, 8], center=true);\n            translate([-4.8, -6.8, 8]) cube([9.6, 13.6, 4], center=true);\n        }\n    }\n}\n\nmodule combustion_chamber() {\n    // Cylindrical combustion chamber\n    difference() {\n        cylinder(h=25, r1=6, r2=5);\n        translate([0, 0, -1]) cylinder(h=27, r1=4.8, r2=3.8);\n    }\n    \n    // Fuel injectors (small cylinders)\n    for(i = [5:5:20]) {\n        translate([0, 5.5, i]) rotate([90, 0, 0]) cylinder(h=1.5, r=0.5);\n        translate([0, -5.5, i]) rotate([90, 0, 0]) cylinder(h=1.5, r=0.5);\n    }\n}\n\nmodule nozzle() {\n    // Converging-diverging nozzle\n    difference() {\n        hull() {\n            cylinder(h=5, r=5);\n            translate([0, 0, 5]) cylinder(h=10, r1=5, r2=7);\n            translate([0, 0, 15]) cylinder(h=15, r1=7, r2=12);\n        }\n        \n        // Hollow nozzle\n        difference() {\n            translate([0, 0, -1]) cylinder(h=7, r=3.8);\n            translate([0, 0, 6]) cylinder(h=8, r1=3.8, r2=5.8);\n            translate([0, 0, 14]) cylinder(h=16, r1=5.8, r2=10.8);\n        }\n    }\n}\n\nmodule strakes() {\n    // Side strakes for stability\n    for(side = [-1, 1]) {\n        translate([side * 7, 0, 10]) \n        rotate([0, 0, side * 10])\n        difference() {\n            cube([15, 2, 3], center=true);\n            translate([0, 0, 1.5]) cube([14.8, 1.8, 2.9], center=true);\n        }\n    }\n}\n\nmodule engine_mounts() {\n    // Mounting points for attachment\n    for(pos = [5, 15]) {\n        translate([0, 0, pos]) \n        difference() {\n            cylinder(h=3, r=2);\n            cylinder(h=3.2, r=0.8);\n        }\n    }\n}\n\n// Assemble the scramjet\nrotate([90, 0, 0]) {\n    // Intake section\n    intake();\n    \n    // Combustion chamber\n    translate([0, 0, 8]) \n    combustion_chamber();\n    \n    // Nozzle section\n    translate([0, 0, 33]) \n    nozzle();\n    \n    // Strakes\n    strakes();\n    \n    // Mounting points\n    engine_mounts();\n}",
    "renders": true
  },
  {
    "vehicle": "propjet",
    "openscad_code": "// Propjet in realistic style – OpenSCAD\n// Overall length ≈ 85 mm, suitable for FDM printing\n// No overhangs > 45°, 0.8 mm minimum walls\n\n$fa = 2; $fs = 0.5;\n\n// Parameters\nfuselage_len = 65;\nfuselage_rad = 8;\nboom_len   = 25;\nboom_rad   = 3;\nwing_span  = 70;\nwing_chord = 25;\nwing_thick = 3;\ntail_span  = 30;\ntail_chord = 15;\nprop_dia   = 22;\nhub_dia    = 6;\n\nmodule fuselage() {\n    // Main body – stepped cylinder for smooth taper\n    hull() {\n        translate([0,0, fuselage_len*0.2]) cylinder(r1=fuselage_rad*0.8, r2=fuselage_rad, h=fuselage_len*0.3);\n        translate([0,0,0]) cylinder(r1=fuselage_rad, r2=fuselage_rad*0.6, h=fuselage_len*0.5);\n    }\n    // Nose cone\n    translate([0,0,fuselage_len]) cylinder(r1=fuselage_rad*0.6, r2=0, h=fuselage_len*0.25);\n}\n\nmodule boom() {\n    // Tail boom\n    translate([0,0,-boom_len]) cylinder(r=boom_rad, h=boom_len);\n}\n\nmodule wing() {\n    // Main wing – simple constant chord, rounded tips\n    difference() {\n        translate([-wing_span/2, 0, -wing_thick/2]) cube([wing_span, wing_chord, wing_thick]);\n        for (s = [-1,1]) translate([s*wing_span/2, wing_chord/2, 0]) rotate([0,0,s*90]) \n            cylinder(r=wing_thick/2, h=wing_chord+1);\n    }\n}\n\nmodule stabilizers() {\n    // Horizontal stabilizer\n    translate([0, -tail_chord, -boom_len-tail_chord/2]) rotate([90,0,0])\n        difference() {\n            cube([tail_span, tail_chord, 2], center=true);\n            for (s = [-1,1]) translate([s*tail_span/2, 0, 0]) \n                rotate([0,90,0]) cylinder(r=1, h=tail_chord+1);\n        }\n    // Vertical stabilizer\n    translate([0, tail_chord/2, -boom_len-tail_chord/2]) rotate([0,90,0])\n        difference() {\n            cube([tail_chord*1.5, tail_span/2, 2], center=true);\n            translate([0, tail_span/4, 0]) rotate([0,90,0]) cylinder(r=1, h=tail_chord*1.5+1);\n        }\n}\n\nmodule propeller() {\n    // Simple 2-blade prop\n    translate([0,0,fuselage_len+fuselage_len*0.25]) \n        rotate([0,0,$t*360*3])  // quick spin preview\n    union() {\n        // Hub\n        cylinder(r=hub_dia/2, h=6);\n        // Blades\n        for (a=[0,180]) rotate([0,0,a]) \n            translate([prop_dia/4,0,0]) \n                rotate([0,90,0]) cylinder(r1=prop_dia/4, r2=0, h=prop_dia/2);\n    }\n}\n\nmodule motor_pod() {\n    // Cylindrical motor pod on front\n    translate([0,0,fuselage_len]) cylinder(r=hub_dia/2+2, h=8);\n}\n\n// Assembly\nunion() {\n    fuselage();\n    boom();\n    wing();\n    stabilizers();\n    motor_pod();\n    propeller();\n}\n\n// Optional print bed alignment helper\n%translate([0,0,-boom_len-5]) cube([wing_span+10, wing_chord+10, 1], center=true);",
    "renders": true
  },
  {
    "vehicle": "turbojet",
    "openscad_code": "// Realistic Medium-Complexity 3D-Printable Turbojet\n// Approx 80 mm long, 25 mm diameter\n\n// Overall scale\nscale = 1;  // adjust if a different print size is desired\n\n// Wall thickness for 3D printing\nwall = 1.2;  // mm\n\n// Main assembly\nmodule turbojet() {\n    // Intake lip\n    translate([0, 0, 0])\n        intake_lip();\n\n    // Compressor section\n    translate([0, 0, 5])\n        compressor();\n\n    // Combustion chamber\n    translate([0, 0, 25])\n        combustion_chamber();\n\n    // Turbine section\n    translate([0, 0, 45])\n        turbine_section();\n\n    // Exhaust nozzle\n    translate([0, 0, 65])\n        exhaust_nozzle();\n}\n\n// Intake lip\nmodule intake_lip() {\n    difference() {\n        // Outer fairing\n        cylinder(h = 5, r1 = 12.5, r2 = 11.5, $fn = 64);\n        // Hollow inside\n        translate([0, 0, -0.1])\n            cylinder(h = 5.2, r1 = 11.5 - wall, r2 = 10.5 - wall, $fn = 64);\n    }\n}\n\n// Compressor section with stator blades\nmodule compressor() {\n    difference() {\n        // Outer casing\n        cylinder(h = 20, r = 11.5, $fn = 64);\n        // Inner bore\n        translate([0, 0, -0.1])\n            cylinder(h = 20.2, r = 11.5 - wall, $fn = 64);\n    }\n\n    // Stator blades (simple flat blades)\n    for (i = [0 : 30 : 359]) {\n        rotate([0, 0, i])\n            translate([11.5 - wall, 0, 10])\n                rotate([90, 0, 0])\n                    cube([wall * 2, 2, 20], center = true);\n    }\n\n    // Compressor rotor hub\n    translate([0, 0, 10])\n        cylinder(h = 3, r = 5, $fn = 32);\n}\n\n// Combustion chamber with flame tube\nmodule combustion_chamber() {\n    difference() {\n        // Outer casing\n        cylinder(h = 20, r = 11.5, $fn = 64);\n        // Inner chamber\n        translate([0, 0, -0.1])\n            cylinder(h = 20.2, r = 11.5 - wall, $fn = 64);\n    }\n\n    // Flame tube shell\n    difference() {\n        cylinder(h = 18, r = 9, $fn = 32);\n        // Hollow core\n        translate([0, 0, -0.1])\n            cylinder(h = 18.2, r = 9 - wall, $fn = 32);\n    }\n\n    // Fuel injector stubs (small cylinders)\n    for (i = [0 : 90 : 359]) {\n        rotate([0, 0, i])\n            translate([11.5 - wall / 2, 0, 10])\n                rotate([90, 0, 0])\n                    cylinder(h = wall * 1.5, r = wall / 2, $fn = 16);\n    }\n}\n\n// Turbine section\nmodule turbine_section() {\n    difference() {\n        // Outer casing\n        cylinder(h = 20, r = 11.5, $fn = 64);\n        // Inner bore\n        translate([0, 0, -0.1])\n            cylinder(h = 20.2, r = 11.5 - wall, $fn = 64);\n    }\n\n    // Turbine blades (simple flat blades)\n    for (i = [0 : 45 : 359]) {\n        rotate([0, 0, i])\n            translate([5, 0, 10])\n                rotate([90, 0, 0])\n                    cube([6, 2, 20], center = true);\n    }\n\n    // Turbine hub\n    translate([0, 0, 10])\n        cylinder(h = 3, r = 5, $fn = 32);\n}\n\n// Exhaust nozzle\nmodule exhaust_nozzle() {\n    difference() {\n        // Outer nozzle\n        cylinder(h = 15, r1 = 11.5, r2 = 8, $fn = 64);\n        // Inner nozzle\n        translate([0, 0, -0.1])\n            cylinder(h = 15.2, r1 = 11.5 - wall, r2 = 8 - wall, $fn = 64);\n    }\n}\n\n// Render the complete turbojet\nturbojet();",
    "renders": true
  },
  {
    "vehicle": "turbofan",
    "openscad_code": "// Realistic medium-complexity turbofan model\n// Designed for FDM printing, ~80 mm long\n\n$fn = 30;                // Segments for curved surfaces\nwall = 1.5;              // Common wall thickness in mm\nfan_d = 42;              // Fan diameter\nhub_d = 12;              // Hub diameter\nnacelle_len = 80;        // Total nacelle length\ncore_len = 65;           // Core cowling length\nblade_cnt = 18;          // Number of fan blades\n\nmodule blade() {\n    // Single fan blade\n    difference() {\n        union() {\n            // Main blade body\n            translate([0, fan_d/2 - 3, 0])\n                rotate([0, 0, 10])\n                scale([1, 0.2, 1])\n                cylinder(h = 3, d1 = 5, d2 = 2.5);\n            \n            // Root fillet\n            translate([0, fan_d/2 - 3.5, 0])\n                rotate([90, 0, 0])\n                cylinder(h = 1.5, r1 = 2, r2 = 1.5);\n        }\n        \n        // Remove underside overhang\n        translate([0, 0, -1])\n            cube([fan_d, fan_d, 2], center = true);\n    }\n}\n\nmodule fan_hub() {\n    difference() {\n        // Hub cylinder\n        cylinder(h = 6, d = hub_d);\n        \n        // Mounting hole\n        cylinder(h = 7, d = 5);\n    }\n}\n\nmodule fan_disk() {\n    // Disk holding blades\n    difference() {\n        cylinder(h = 3, d = fan_d);\n        \n        // Hub recess\n        cylinder(h = 4, d = hub_d + 2);\n    }\n}\n\nmodule fan_blades() {\n    // Array of blades on disk\n    union() {\n        fan_disk();\n        \n        for(i = [0:blade_cnt-1])\n            rotate([0, 0, i*360/blade_cnt])\n            translate([0, 0, 1.5])\n            blade();\n    }\n}\n\nmodule nacelle_intake() {\n    // Intake lip\n    difference() {\n        union() {\n            // Outer lip\n            cylinder(h = 8, d1 = fan_d + 6, d2 = fan_d + 1);\n            \n            // Inner fairing\n            translate([0, 0, 8])\n                cylinder(h = 2, d1 = fan_d + 1, d2 = fan_d - 1);\n        }\n        \n        // Hollow inside\n        cylinder(h = 10, d = fan_d - 3);\n    }\n}\n\nmodule core_cowling() {\n    // Main engine cowling\n    difference() {\n        union() {\n            // Forward section\n            cylinder(h = core_len*0.6, d1 = fan_d + 1, d2 = fan_d - 2);\n            \n            // Aft taper\n            translate([0, 0, core_len*0.6])\n                cylinder(h = core_len*0.4, d1 = fan_d - 2, d2 = fan_d - 12);\n        }\n        \n        // Bypass duct\n        cylinder(h = core_len, d1 = fan_d - 8, d2 = fan_d - 20);\n    }\n}\n\nmodule exhaust() {\n    // Exhaust nozzle\n    difference() {\n        cylinder(h = 10, d1 = fan_d - 12, d2 = fan_d - 14);\n        \n        // Core exhaust\n        cylinder(h = 11, d1 = fan_d - 28, d2 = fan_d - 30);\n    }\n}\n\nmodule pylon() {\n    // Engine pylon attachment\n    translate([0, 0, nacelle_len/2])\n        rotate([90, 0, 0])\n        difference() {\n            cube([10, 6, 25], center = true);\n            \n            // Lightening holes\n            for(z = [-8:8:8])\n                translate([0, 0, z])\n                    cylinder(h = 7, d = 3);\n        }\n}\n\n// Assembly\nunion() {\n    // Rotate to horizontal orientation\n    rotate([90, 0, 0]) {\n        // Nacelle assembly\n        nacelle_intake();\n        \n        translate([0, 0, 8])\n            core_cowling();\n        \n        translate([0, 0, nacelle_len - 10])\n            exhaust();\n        \n        // Fan assembly (mounted inside)\n        translate([0, 0, 10])\n            fan_hub();\n        \n        translate([0, 0, 7.5])\n            rotate([0, 0, 10])  // Slight rotation for realism\n            fan_blades();\n    }\n    \n    // Pylon on top\n    pylon();\n}",
    "renders": true
  },
  {
    "vehicle": "afterburner",
    "openscad_code": "// Realistic Afterburner Model\n// Medium complexity for 3D printing\n\n// Parameters\n$fn = 50;  // Smoothness\nwall_thickness = 2;  // 3D printable wall thickness\nmain_diameter = 40;\nmain_length = 70;\nnozzle_length = 25;\nflame_holder_diameter = 30;\n\n// Main afterburner body\nmodule main_body() {\n    difference() {\n        // Outer cylindrical shell\n        cylinder(h = main_length, d = main_diameter, center = false);\n        \n        // Inner cavity\n        translate([0, 0, wall_thickness])\n        cylinder(h = main_length, d = main_diameter - 2*wall_thickness, center = false);\n    }\n}\n\n// Fuel injectors\nmodule fuel_injectors() {\n    for (i = [1:6]) {\n        rotate([0, 0, i * 60])\n        translate([main_diameter/2 - wall_thickness/2, 0, main_length * 0.7])\n        rotate([90, 0, 0])\n        cylinder(h = 8, d = 3, center = true);\n    }\n}\n\n// Flame holder assembly\nmodule flame_holder() {\n    difference() {\n        // Outer ring\n        translate([0, 0, main_length * 0.75])\n        cylinder(h = 4, d = flame_holder_diameter, center = false);\n        \n        // Inner ring\n        translate([0, 0, main_length * 0.75])\n        cylinder(h = 4, d = flame_holder_diameter - 2*wall_thickness, center = false);\n    }\n    \n    // Radial spokes\n    for (i = [1:12]) {\n        rotate([0, 0, i * 30])\n        translate([0, (flame_holder_diameter - wall_thickness)/4, main_length * 0.75])\n        cube([wall_thickness, (flame_holder_diameter - wall_thickness)/2, 4], center = true);\n    }\n}\n\n// Nozzle petals\nmodule nozzle_petals() {\n    petal_length = nozzle_length;\n    petal_width = main_diameter/8;\n    \n    for (i = [1:12]) {\n        rotate([0, 0, i * 30])\n        translate([0, 0, main_length])\n        translate([petal_width, 0, 0])\n        rotate([0, -15, 0])\n        difference() {\n            // Petal body\n            union() {\n                translate([0, 0, 0])\n                cube([petal_width/2, wall_thickness, petal_length], center = true);\n                \n                // Tapered end\n                translate([petal_width/2, 0, petal_length/2])\n                rotate([0, 90, 0])\n                cylinder(h = petal_width/2, d1 = wall_thickness, d2 = wall_thickness/2, center = true);\n            }\n            \n            // Hollow inside\n            translate([0, 0, -wall_thickness])\n            cube([petal_width/2 - wall_thickness, wall_thickness/2, petal_length + wall_thickness*2], center = true);\n        }\n    }\n}\n\n// Mounting flanges\nmodule mounting_flanges() {\n    // Front flange\n    translate([0, 0, -5])\n    difference() {\n        cylinder(h = 5, d = main_diameter + 10, center = false);\n        translate([0, 0, -0.1])\n        cylinder(h = 5.2, d = main_diameter, center = false);\n    }\n    \n    // Bolt holes\n    for (i = [1:6]) {\n        rotate([0, 0, i * 60])\n        translate([(main_diameter + 10)/2 - 5, 0, -2.5])\n        rotate([90, 0, 0])\n        cylinder(h = 10, d = 3, center = true);\n    }\n}\n\n// Cooling holes\nmodule cooling_holes() {\n    for (i = [1:8]) {\n        for (j = [1:6]) {\n            rotate([0, 0, j * 60])\n            translate([main_diameter/2 - wall_thickness, 0, i * 8 + 10])\n            rotate([90, 0, 0])\n            cylinder(h = wall_thickness * 2, d = 2, center = true);\n        }\n    }\n}\n\n// Assemble the afterburner\nunion() {\n    main_body();\n    fuel_injectors();\n    flame_holder();\n    nozzle_petals();\n    mounting_flanges();\n    cooling_holes();\n}",
    "renders": true
  },
  {
    "vehicle": "stealth",
    "openscad_code": "// Stealth Fighter - Realistic Style, Medium Complexity\n// Designed for 3D printing with no support required\n\n$fn = 64;\n\nmodule fuselage() {\n    // Main body with stealth shaping\n    difference() {\n        // Main fuselage body\n        hull() {\n            // Front section\n            translate([-20, 0, 0])\n                scale([1, 0.3, 0.2])\n                sphere(d=20);\n            \n            // Mid section\n            translate([0, 0, 0])\n                scale([1.5, 0.4, 0.3])\n                sphere(d=30);\n            \n            // Rear section\n            translate([25, 0, 0])\n                scale([1, 0.35, 0.25])\n                sphere(d=25);\n        }\n        \n        // Cockpit cutout\n        translate([5, 0, 4])\n            scale([1.2, 0.6, 0.4])\n            sphere(d=15);\n        \n        // Engine intakes\n        translate([-5, -8, -2])\n            rotate([0, 30, 0])\n            cube([15, 5, 6], center=true);\n        translate([-5, 8, -2])\n            rotate([0, -30, 0])\n            cube([15, 5, 6], center=true);\n    }\n}\n\nmodule wings() {\n    // Left wing\n    translate([5, -15, -1])\n    rotate([0, 0, -25])\n    difference() {\n        // Main wing\n        hull() {\n            translate([0, 0, 0])\n                cube([20, 2, 1], center=true);\n            translate([15, -25, 0])\n                cube([2, 15, 1], center=true);\n        }\n        \n        // Wing tip cutout\n        translate([20, -30, 0])\n            rotate([0, 0, 45])\n            cube([5, 5, 2], center=true);\n    }\n    \n    // Right wing (mirrored)\n    mirror([0, 1, 0])\n    translate([5, -15, -1])\n    rotate([0, 0, -25])\n    difference() {\n        hull() {\n            translate([0, 0, 0])\n                cube([20, 2, 1], center=true);\n            translate([15, -25, 0])\n                cube([2, 15, 1], center=true);\n        }\n        translate([20, -30, 0])\n            rotate([0, 0, 45])\n            cube([5, 5, 2], center=true);\n    }\n}\n\nmodule tail_section() {\n    // V-tails\n    // Left tail\n    translate([20, -5, 3])\n    rotate([0, 30, -30])\n    cube([15, 2, 8], center=true);\n    \n    // Right tail (mirrored)\n    mirror([0, 1, 0])\n    translate([20, -5, 3])\n    rotate([0, 30, 30])\n    cube([15, 2, 8], center=true);\n}\n\nmodule engines() {\n    // Engine nozzles\n    for (side = [-1, 1]) {\n        translate([25, side * 5, -2])\n        rotate([0, 90, 0])\n        cylinder(h=8, d1=5, d2=4);\n    }\n}\n\nmodule landing_gear_doors() {\n    // Main gear doors\n    translate([10, -8, -3])\n    cube([8, 3, 0.5], center=true);\n    \n    translate([10, 8, -3])\n    cube([8, 3, 0.5], center=true);\n    \n    // Nose gear door\n    translate([-15, 0, -3])\n    cube([6, 2, 0.5], center=true);\n}\n\n// Assemble the aircraft\nunion() {\n    fuselage();\n    wings();\n    tail_section();\n    engines();\n    landing_gear_doors();\n}",
    "renders": true
  },
  {
    "vehicle": "delta",
    "openscad_code": "// Realistic Delta Wing Aircraft - Medium Complexity\n// Dimensions: ~80mm wingspan, ~70mm length\n\n$fn=50;\n\n// Main assembly\nmodule delta_aircraft() {\n    // Fuselage\n    union() {\n        // Main body\n        difference() {\n            hull() {\n                sphere(d=12);\n                translate([0,0,-15]) cylinder(d1=12, d2=8, h=30);\n                translate([0,0,15]) cylinder(d1=12, d2=5, h=10);\n            }\n            \n            // Cockpit cutout\n            translate([0,6,8]) rotate([0,20,0]) cylinder(d=7, h=15, center=true);\n            \n            // Intake openings\n            translate([-4,0,-2]) rotate([0,90,0]) cylinder(d=4, h=8);\n            translate([4,0,-2]) rotate([0,90,0]) cylinder(d=4, h=8);\n        }\n        \n        // Cockpit glazing\n        translate([0,6,8]) rotate([0,20,0]) scale([1,1,0.5]) sphere(d=7);\n        \n        // Nose cone\n        translate([0,0,25]) cylinder(d1=5, d2=0, h=8);\n    }\n    \n    // Delta wings\n    difference() {\n        // Main wing\n        translate([0,0,-5]) rotate([0,0,0]) union() {\n            // Left wing\n            translate([-20,0,2]) rotate([0,0,-30]) cube([40,5,3], center=true);\n            // Right wing  \n            translate([20,0,2]) rotate([0,0,30]) cube([40,5,3], center=true);\n            // Center section\n            translate([0,0,2]) cube([8,12,3], center=true);\n        }\n        \n        // Wing root fairings\n        translate([0,0,-1]) cylinder(d=14, h=6);\n    }\n    \n    // Wing tips with missile rails\n    for(x=[-1,1]) {\n        translate([x*38,0,2]) {\n            // Wing tip\n            cube([3,5,3], center=true);\n            \n            // Missile rail\n            translate([x*3,0,-2]) cube([6,2,1], center=true);\n            \n            // AIM-9 missile\n            translate([x*5,0,-5]) rotate([90,0,0]) cylinder(d=2, h=20);\n            translate([x*5,0,-5]) sphere(d=2);\n        }\n    }\n    \n    // Twin vertical stabilizers\n    for(x=[-10,10]) {\n        translate([x,-3,8]) {\n            difference() {\n                union() {\n                    cube([3,1,12]);\n                    translate([0,0,6]) cube([5,1,3]);\n                }\n                translate([0,-1,6]) cube([7,3,3]);\n            }\n        }\n    }\n    \n    // Engine exhausts\n    translate([0,-3,-15]) union() {\n        for(x=[-3,3]) {\n            translate([x,0,0]) {\n                cylinder(d=4, h=5);\n                translate([0,0,-2]) cylinder(d=5, h=2);\n            }\n        }\n    }\n    \n    // Landing gear bays (recessed)\n    difference() {\n        translate([0,0,-12]) cube([10,8,4], center=true);\n        translate([0,0,-11.5]) cube([8,6,3], center=true);\n    }\n    \n    // Nose gear bay\n    difference() {\n        translate([0,3,-11]) cube([6,6,4], center=true);\n        translate([0,3,-10.5]) cube([4,4,3], center=true);\n    }\n}\n\n// Generate the model\ndelta_aircraft();",
    "renders": true
  },
  {
    "vehicle": "canard",
    "openscad_code": "// Canard - Realistic Medium Complexity\n// Basic canard with root, tapered wing, control surface, and mounting base\n\nmodule canard_root() {\n    // Main root attachment block\n    difference() {\n        cube([20, 15, 8], center=true);\n        // Top chamfer for smooth airflow\n        translate([0, 0, 4])\n            rotate([45,0,0])\n                cube([25, 25, 10], center=true);\n    }\n}\n\nmodule canard_wing() {\n    // Main wing body with taper\n    linear_extrude(height=3, convexity=10)\n        polygon(points=[\n            [0, 0],           // root leading edge\n            [0, -25],         // root trailing edge\n            [45, -20],        // tip trailing edge\n            [50, 0],          // tip leading edge\n            [45, 20],         // tip leading edge top\n            [45, 25],         // tip trailing edge top\n            [0, 25],          // root trailing edge top\n            [0, 0]            // root leading edge top\n        ]);\n}\n\nmodule wing_sweep() {\n    // Rotate wing for proper angle of attack\n    rotate([5, 0, 0]) {\n        // Main wing\n        canard_wing();\n        \n        // Wing tip cap\n        translate([50, 0, 1.5])\n            rotate([0,90,0])\n                cylinder(h=3, r=3, center=true);\n    }\n}\n\nmodule control_surface() {\n    // Elevator control surface\n    translate([0, 0, 1.5])\n        rotate([0, -15, 0])  // Default down position\n            linear_extrude(height=2, convexity=10)\n                polygon(points=[\n                    [5, -25],   // hinge line\n                    [5, -45],   // trailing edge root\n                    [48, -42],  // trailing edge tip\n                    [48, -20]   // trailing edge tip root\n                ]);\n}\n\nmodule hinge_detail() {\n    // Control surface hinges\n    for(i=[-20:10:20]) {\n        translate([5, i, 1.5])\n            rotate([90,0,0])\n                cylinder(h=3, r=1, center=true);\n    }\n}\n\nmodule mounting_base() {\n    // Base for servo mounting\n    difference() {\n        translate([0, 0, -5])\n            cube([25, 20, 4], center=true);\n        \n        // Mounting holes\n        for(x=[-8:16:8])\n            for(y=[-6:12:6])\n                translate([x, y, -5])\n                    cylinder(h=5, r=2, center=false);\n    }\n}\n\nmodule fillets() {\n    // Root fillets for smooth airflow transition\n    difference() {\n        translate([0, 0, -2])\n            cube([30, 20, 4], center=true);\n        \n        translate([0, 0, -2])\n            cube([25, 15, 4.1], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Root block\n    canard_root();\n    \n    // Mounting base\n    mounting_base();\n    \n    // Root fillets\n    fillets();\n    \n    // Wing assembly\n    translate([0, 0, 4])\n        wing_sweep();\n    \n    // Control surface\n    translate([0, 0, 4])\n        control_surface();\n    \n    // Hinges\n    translate([0, 0, 4])\n        hinge_detail();\n}",
    "renders": true
  },
  {
    "vehicle": "flyingwing",
    "openscad_code": "// Realistic 3D-printable flying wing (medium complexity)\n// Overall length ~80 mm, wingspan ~90 mm, thickness 2 mm walls\n\n$fn = 36;\n\n// Main dimensions\nL = 80;          // body length\nW = 90;          // wingspan\nT = 2;           // wall thickness\nR = 4;           // fillet radius\n\n// Wing profile\nmodule wing_profile(){\n    difference(){\n        // Main wing shape\n        hull(){\n            translate([0,0,0]) cube([L, W, T], center=true);\n            translate([L/2-5, 0, 0]) scale([0.5,1,1]) cube([10, W-10, T], center=true);\n        }\n        \n        // Cut trailing edge taper\n        for (i = [0:1]){\n            mirror([0,i,0]){\n                translate([L/2-15, W/2-10, -T/2-0.1]) cube([30, 20, T+0.2]);\n            }\n        }\n        \n        // Cut leading edge sweep\n        for (i = [0:1]){\n            mirror([0,i,0]){\n                rotate([0,0,-30]) translate([-L/2-5, W/2-5, -T/2-0.1]) cube([30, 20, T+0.2]);\n            }\n        }\n    }\n}\n\n// Elevons\nmodule elevon(){\n    difference(){\n        hull(){\n            translate([0,0,0]) cube([20, 25, T], center=true);\n            translate([10, 0, 0]) scale([0.3,0.8,1]) cube([20, 25, T], center=true);\n        }\n        \n        // Taper\n        rotate([0,0,-20]) translate([-10, 0, -T/2-0.1]) cube([30, 30, T+0.2]);\n    }\n}\n\n// Wingtips\nmodule wingtip(){\n    difference(){\n        hull(){\n            sphere(R);\n            translate([0, R, 0]) sphere(R);\n            translate([0, R*2, 0]) scale([0.5,0.5,0.5]) sphere(R);\n        }\n    }\n}\n\n// Central body fairing\nmodule fairing(){\n    difference(){\n        hull(){\n            translate([0,0,0]) cylinder(h=T*2, r1=L/4, r2=L/6, center=true);\n            translate([0,0,T]) cylinder(h=T, r1=L/6+2, r2=L/6+2, center=true);\n        }\n        \n        // Hollow out\n        translate([0,0,-T]) cylinder(h=T*3, r1=L/4-2, r2=L/6-2, center=true);\n    }\n}\n\n// Assembly\nunion(){\n    // Main wing\n    wing_profile();\n    \n    // Elevons\n    for (i = [0:1]){\n        mirror([0,i,0]){\n            translate([-L/2+10, W/2-15, T/2]) elevon();\n        }\n    }\n    \n    // Wingtips\n    for (i = [0:1]){\n        mirror([0,i,0]){\n            translate([L/2-5, W/2-2, 0]) wingtip();\n        }\n    }\n    \n    // Central fairing\n    translate([0,0,T/2]) fairing();\n    \n    // Reinforcement spar\n    difference(){\n        translate([0,0,0]) cube([L-10, 6, T], center=true);\n        translate([0,0,-T/2-0.1]) cube([L-10, 4, T+0.2], center=true);\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "liftingbody",
    "openscad_code": "// Lifting-body spacecraft – medium-complexity, realistic style\n// All dimensions in mm, ready for FDM printing (2 mm walls, no large overhangs)\n\n$fa = 2;\n$fs = 1;\n\n// Overall scale factor\nSCALE = 1;\n\n// Main fuselage\nmodule liftingbody_fuselage() {\n    // Blended wing-body fairing\n    hull() {\n        translate([-30, 0, 0]) sphere(10);          // nose\n        translate([ 30, 0, 0]) sphere(18);          // rear\n    }\n    // Top deck\n    difference() {\n        hull() {\n            translate([-30, 0,  8]) sphere(10);     // raised nose\n            translate([ 25, 0,  8]) sphere(18);     // raised rear\n        }\n        // Cockpit recess (no overhangs)\n        translate([5, 0, -5])\n            cube([30, 12, 15], center=true);\n    }\n}\n\n// Vertical stabilizers (two)\nmodule vertical_fin(pos, ang) {\n    translate(pos)\n    rotate([0, ang, 0])\n    linear_extrude(height=1, center=true, convexity=2)\n    polygon(points=[\n        [0, 0],\n        [15, 0],\n        [12, -25],\n        [0, -25]\n    ]);\n}\n\n// Engine nacelles under rear\nmodule engine_nacelle() {\n    difference() {\n        hull() {\n            cylinder(h=20, r1=7, r2=5, center=true);\n            translate([10, 0, 0]) sphere(6);\n        }\n        // Thrust hole\n        rotate([0, 90, 0])\n            cylinder(h=10, r=3, center=true);\n    }\n}\n\n// Control surfaces (elevons)\nmodule elevon() {\n    translate([-5, 0, 0])\n        cube([25, 2, 8], center=true);\n}\n\n// Landing strakes (wing gloves)\nmodule strake() {\n    hull() {\n        cube([40, 2, 3]);\n        translate([20, 15, 0]) cube([20, 2, 3]);\n    }\n}\n\n// Assembly\nscale(SCALE)\nunion() {\n    // Main body\n    liftingbody_fuselage();\n\n    // Vertical fins\n    translate([22, 0, 18]) vertical_fin([0, 0, 0], 0);\n    translate([22, 0, 18]) mirror([0, 1, 0]) vertical_fin([0, 0, 0], 0);\n\n    // Engine nacelles (left & right)\n    translate([20, -12, -12]) engine_nacelle();\n    translate([20,  12, -12]) engine_nacelle();\n\n    // Elevons\n    translate([20, -25, -2]) elevon();\n    translate([20,  25, -2]) elevon();\n\n    // Strakes for smooth airflow\n    translate([-10, -20, 0]) strake();\n    translate([-10,  20, 0]) mirror([0, 1, 0]) strake();\n}",
    "renders": true
  },
  {
    "vehicle": "ornithopter",
    "openscad_code": "// Realistic 3D-printable ornithopter – medium complexity\n// Wings flap via a single crank pin; body prints in one piece.\n\nwing_span = 70;\nbody_len = 40;\nfuselage_w = 12;\nwall = 1.2;\n\n// Wing rib profile\nmodule rib(t=2) {\n    difference() {\n        cube([wing_span/2 - 5, t, 8], center=true);\n        translate([0,0,4]) cylinder(h=t+0.1, d=4, $fn=8);\n    }\n}\n\n// One flapping wing\nmodule wing(side=1) {\n    translate([0,0,6]) rotate([0,0,side*90]) {\n        // Leading spar\n        rotate([90,0,0]) cylinder(h=wing_span/2, d=3, $fn=8);\n        // Ribs\n        for(i=[0:6]) translate([0,0,i*10-30]) rib();\n        // Trailing edge membrane – thin printable skin\n        translate([wing_span/4-5,0,-1]) cube([wing_span/2,0.8,16], center=true);\n    }\n}\n\n// Motor cup for micro gear-motor 8 mm\nmodule motor_mount() {\n    difference() {\n        translate([0,0,wall]) cylinder(h=10, d=10+2*wall, $fn=20);\n        translate([0,0,-0.1]) cylinder(h=11, d=10.2, $fn=20);\n    }\n}\n\n// Crank disk with off-center pin\nmodule crank() {\n    difference() {\n        cylinder(h=4, d=8, $fn=20);\n        translate([3,0,-0.1]) cylinder(h=5, d=2, $fn=6);\n    }\n}\n\n// Tail boom\nmodule tail() {\n    translate([-body_len/2-10,0,0])\n        rotate([0,90,0]) cylinder(h=20, d=4, $fn=8);\n}\n\n// Main fuselage block\nmodule fuselage() {\n    difference() {\n        union() {\n            // Main body\n            translate([0,0,0]) cube([body_len, fuselage_w, 10], center=true);\n            // Nose\n            translate([body_len/2+3,0,0])\n                rotate([0,90,0]) cylinder(h=6, d=fuselage_w, $fn=20);\n            // Tail attach\n            tail();\n        }\n        // Cockpit hollow\n        translate([0,0,4]) cube([body_len-4, fuselage_w-2*wall, 8], center=true);\n        // Wing pivot holes\n        translate([body_len/4,0,6]) rotate([90,0,0]) cylinder(h=fuselage_w+1, d=3, $fn=8);\n        translate([-body_len/4,0,6]) rotate([90,0,0]) cylinder(h=fuselage_w+1, d=3, $fn=8);\n        // Motor cavity\n        translate([-body_len/4,0,0]) motor_mount();\n    }\n}\n\n// Pushrod between crank and wing\nmodule pushrod() {\n    translate([5,0,0]) rotate([0,90,0]) cylinder(h=15, d=1.6, $fn=6);\n}\n\n// Assembly\nunion() {\n    fuselage();\n    // Wings on pivot shafts\n    translate([body_len/4, fuselage_w/2+3, 6]) wing(1);\n    translate([body_len/4, -fuselage_w/2-3, 6]) mirror([0,1,0]) wing(1);\n    translate([-body_len/4,0,0]) crank();\n    pushrod();\n}",
    "renders": true
  },
  {
    "vehicle": "flappingwing",
    "openscad_code": "// Realistic Medium-Complexity Flapping Wing\n// Overall size ~80 mm wing span, 3 mm wall for 3D printing\n\n// Wing parameters\nwing_span = 80;         // total wing width\nwing_chord = 35;        // front-to-back length\nroot_thick = 3;         // wall / rib thickness\nrib_spacing = 8;        // spacing between internal ribs\n\n// --- Central wing root block (mount point) ---\nmodule root_block() {\n    difference() {\n        // Main block\n        translate([0, -wing_chord/2, 0])\n            cube([12, wing_chord, 6], center=true);\n        // Lightening hole\n        translate([0, -wing_chord/2, 0])\n            cylinder(h=7, d=5, center=true, $fn=32);\n    }\n}\n\n// --- Single rib profile based on realistic airfoil ---\nmodule rib(pos) {\n    // NACA 2412-like simplified camber line\n    m = 0.02; p = 0.4;       // camber parameters\n    scale([1, 0.12, 1]) {    // squash to thin section\n        polygon(points=[\n            [0,0], [p, m], [1,0], [1,0], [0,0]\n        ]);\n    }\n}\n\n// --- Leading edge spar ---\nmodule leading_edge() {\n    translate([-wing_span/2, -wing_chord/2+2, 0])\n        rotate([90,0,0])\n            cylinder(h=wing_span, d=root_thick*1.5, $fn=16);\n}\n\n// --- Trailing edge taper ---\nmodule trailing_edge() {\n    hull() {\n        translate([-wing_span/2, wing_chord/2-3, 0])\n            sphere(d=root_thick);\n        translate([wing_span/2, wing_chord/2-1, 0])\n            sphere(d=root_thick/2);\n    }\n}\n\n// --- Main wing skin panels ---\nmodule skin() {\n    difference() {\n        // Upper skin\n        translate([0, 0, root_thick/2])\n            linear_extrude(height=root_thick/2)\n                skin_outline();\n        // Lower skin\n        mirror([0,0,1])\n            translate([0, 0, root_thick/2])\n                linear_extrude(height=root_thick/2)\n                    skin_outline();\n    }\n}\n\nmodule skin_outline() {\n    offset(delta=root_thick/2)\n        polygon(points=[\n            [-wing_span/2, -wing_chord/2+2],  // root LE\n            [wing_span/2, -wing_chord/2+1],   // tip LE\n            [wing_span/2, wing_chord/2-1],    // tip TE\n            [-wing_span/2, wing_chord/2-2]    // root TE\n        ]);\n}\n\n// --- Internal ribs for strength ---\nmodule ribs() {\n    for (x=[-wing_span/2+rib_spacing : rib_spacing : wing_span/2-rib_spacing]) {\n        translate([x, 0, 0])\n            linear_extrude(height=root_thick)\n                rib(x/(wing_span/2));  // camber reduces toward tip\n    }\n}\n\n// --- Assemble the wing ---\nunion() {\n    root_block();\n    leading_edge();\n    trailing_edge();\n    skin();\n    ribs();\n}",
    "renders": true
  },
  {
    "vehicle": "rotorcraft",
    "openscad_code": "// Realistic 3D printable medium-complexity rotorcraft (helicopter) model\n\n// Overall scaling factor\nscale_factor = 0.5;\n\n// Main fuselage\nmodule fuselage() {\n    // Main body\n    difference() {\n        union() {\n            // Central body\n            hull() {\n                translate([0, 0, 3]) sphere(d=12 * scale_factor, $fn=16);\n                translate([0, 0, -3]) sphere(d=8 * scale_factor, $fn=16);\n            }\n            \n            // Tail boom\n            translate([-25 * scale_factor, 0, 0]) \n                rotate([0, 90, 0]) \n                cylinder(h=25 * scale_factor, d1=6 * scale_factor, d2=4 * scale_factor, $fn=8);\n        }\n        \n        // Cockpit cutout\n        translate([0, 0, 2 * scale_factor]) \n            rotate([0, 0, 0]) \n            cube([8 * scale_factor, 7 * scale_factor, 4 * scale_factor], center=true);\n    }\n    \n    // Cockpit windshield\n    translate([0, 0, 3.5 * scale_factor]) \n        rotate([0, 0, 0]) \n        cube([8 * scale_factor, 6.8 * scale_factor, 2 * scale_factor], center=true);\n}\n\n// Landing skids\nmodule skids() {\n    // Left skid\n    translate([0, -5 * scale_factor, -5 * scale_factor]) {\n        // Horizontal tube\n        cylinder(h=20 * scale_factor, d=1.5 * scale_factor, $fn=12);\n        // Support struts\n        for(i = [-8, 8]) {\n            translate([i * scale_factor, 0, 2.5 * scale_factor])\n                cylinder(h=5 * scale_factor, d=1.2 * scale_factor, $fn=8);\n        }\n    }\n    \n    // Right skid (mirror of left)\n    translate([0, 5 * scale_factor, -5 * scale_factor]) {\n        cylinder(h=20 * scale_factor, d=1.5 * scale_factor, $fn=12);\n        for(i = [-8, 8]) {\n            translate([i * scale_factor, 0, 2.5 * scale_factor])\n                cylinder(h=5 * scale_factor, d=1.2 * scale_factor, $fn=8);\n        }\n    }\n    \n    // Cross braces\n    for(i = [-6, 0, 6]) {\n        translate([i * scale_factor, 0, -5 * scale_factor])\n            rotate([90, 0, 90])\n            cylinder(h=10 * scale_factor, d=1 * scale_factor, $fn=8);\n    }\n}\n\n// Main rotor system\nmodule main_rotor() {\n    // Rotor mast\n    translate([0, 0, 8 * scale_factor])\n        cylinder(h=8 * scale_factor, d=2 * scale_factor, $fn=12);\n    \n    // Rotor hub\n    translate([0, 0, 16 * scale_factor])\n        sphere(d=4 * scale_factor, $fn=16);\n    \n    // Rotor blades (4 blades)\n    for(i = [0:90:270]) {\n        rotate([0, 0, i]) {\n            // Blade root\n            translate([6 * scale_factor, 0, 16 * scale_factor])\n                cube([12 * scale_factor, 2 * scale_factor, 0.8 * scale_factor], center=true);\n            // Blade tip\n            translate([18 * scale_factor, 0, 16 * scale_factor])\n                cube([12 * scale_factor, 1.5 * scale_factor, 0.5 * scale_factor], center=true);\n        }\n    }\n}\n\n// Tail rotor system\nmodule tail_rotor() {\n    translate([-25 * scale_factor, 0, 0])\n    rotate([90, 0, 0]) {\n        // Tail rotor mast\n        cylinder(h=3 * scale_factor, d=1.2 * scale_factor, $fn=8);\n        \n        // Tail rotor blades (2 blades)\n        for(i = [0:90:270]) {\n            rotate([0, 0, i]) {\n                translate([2 * scale_factor, 0, 0])\n                    cube([4 * scale_factor, 1 * scale_factor, 0.5 * scale_factor], center=true);\n            }\n        }\n    }\n}\n\n// Assemble the complete rotorcraft\nunion() {\n    fuselage();\n    skids();\n    main_rotor();\n    tail_rotor();\n}",
    "renders": true
  },
  {
    "vehicle": "helo",
    "openscad_code": "// Realistic medium-complexity 3D-printable helicopter model\n// Overall length ~90 mm, rotor span ~80 mm\n\n$fn = 36; // smoother curves\n\nmodule body() {\n    // Main fuselage\n    difference() {\n        hull() {\n            translate([-5, 0, 0]) sphere(d = 12);\n            translate([20, 0, 0]) sphere(d = 8);\n            translate([45, 0, 0]) sphere(d = 6);\n        }\n        // Cockpit windows (left side)\n        translate([10, 4, 5]) rotate([0, 45, 0]) cube([12, 8, 8], center = true);\n        // Cockpit windows (right side)\n        translate([10, -4, 5]) rotate([0, -45, 0]) cube([12, 8, 8], center = true);\n    }\n}\n\nmodule tail() {\n    // Tail boom\n    translate([45, 0, 0]) rotate([0, -5, 0]) cylinder(h = 40, d1 = 6, d2 = 3);\n    \n    // Vertical stabilizer\n    translate([75, 0, 5]) rotate([0, 90, 0]) cube([12, 20, 2]);\n    \n    // Horizontal stabilizer\n    translate([75, 0, 0]) rotate([0, 0, 0]) cube([20, 2, 10]);\n}\n\nmodule skids() {\n    // Left skid\n    translate([0, -8, -6]) rotate([0, 10, 0]) cylinder(h = 40, d = 2);\n    // Right skid\n    translate([0, 8, -6]) rotate([0, 10, 0]) cylinder(h = 40, d = 2);\n    \n    // Support struts\n    for (x = [10, 30]) {\n        translate([x, -8, -2]) cube([2, 2, 4]);\n        translate([x, 8, -2]) cube([2, 2, 4]);\n    }\n}\n\nmodule main_rotor() {\n    // Main rotor mast\n    translate([15, 0, 12]) cylinder(h = 10, d = 4);\n    \n    // Rotor head\n    translate([15, 0, 22]) sphere(d = 6);\n    \n    // Main blades\n    for (a = [0, 120, 240]) {\n        rotate([0, 0, a]) {\n            translate([15, 0, 22]) rotate([0, 0, 0]) cube([40, 4, 1]);\n        }\n    }\n}\n\nmodule tail_rotor() {\n    // Tail rotor mast\n    translate([85, 0, 2]) rotate([0, 90, 0]) cylinder(h = 5, d = 3);\n    \n    // Tail blades\n    for (a = [0, 90, 180, 270]) {\n        rotate([0, 0, a]) {\n            translate([85, 0, 2]) rotate([0, 90, 0]) cube([15, 2, 1]);\n        }\n    }\n}\n\nmodule engine() {\n    // Engine housing on top\n    translate([30, 0, 8]) cylinder(h = 8, d = 10);\n    \n    // Exhaust\n    translate([35, 5, 4]) rotate([0, -30, 0]) cylinder(h = 8, d = 3);\n}\n\n// Assemble the helicopter\nunion() {\n    body();\n    tail();\n    skids();\n    main_rotor();\n    tail_rotor();\n    engine();\n}",
    "renders": true
  },
  {
    "vehicle": "whirlybird",
    "openscad_code": "// Whirlybird (medium-complexity realistic)\n// 3D-printable, ~85 mm rotor diameter, no support needed\n// All parts laid flat or built with 45° max overhang\n\n// Parameters ----------------------------------------------------------\nbody_len   = 70;   // fuselage length\nbody_wid   = 18;   // fuselage width\nbody_hgt   = 22;   // fuselage height\nwall       = 2;    // wall thickness for 3D printing\n\nrod_d      = 6;    // main rotor shaft diameter\nrod_h      = 12;   // shaft height above body\n\nrotor_d    = 85;   // rotor disk diameter\nblade_w    = 12;   // blade chord\nblade_t    = 2;    // blade thickness\n\ntailboom_l = 30;   // tail boom length\ntailboom_w = 8;\ntailboom_h = 10;\n\ntailrotor_d= 22;   // tail rotor diameter\n\nskid_gap   = 4;    // gap between skids and body bottom\nskid_r     = 2;    // skid tube radius\n\n$fn = 36;\n\n// Main module ---------------------------------------------------------\ndifference() {\n    union() {\n        fuselage();\n        tail_boom();\n        landing_gear();\n        main_shaft();\n        rotor_head();\n        tail_rotor();\n    }\n\n    // Hollow out fuselage\n    translate([0, 0, wall])\n        cube([body_len - 2*wall, body_wid - 2*wall, body_hgt - 2*wall], center=true);\n}\n\n// Fuselage ------------------------------------------------------------\nmodule fuselage() {\n    // Main pod\n    hull() {\n        translate([0, 0, 0])\n            cube([body_len, body_wid, body_hgt], center=true);\n        translate([body_len/3, 0, 0])\n            cube([body_len*0.9, body_wid*0.8, body_hgt*1.1], center=true);\n    }\n\n    // Cockpit glazing\n    difference() {\n        translate([body_len/4, 0, body_hgt/2 - 1])\n            sphere(d=body_wid*1.2);\n        translate([body_len/4, 0, body_hgt/2 - 5])\n            sphere(d=body_wid*0.9);\n    }\n}\n\n// Tail boom -----------------------------------------------------------\nmodule tail_boom() {\n    translate([body_len/2 + tailboom_l/2, 0, 0])\n        cube([tailboom_l, tailboom_w, tailboom_h], center=true);\n\n    // Vertical stabilizer\n    translate([body_len/2 + tailboom_l - 2, 0, tailboom_h/2 + 5])\n        cube([4, 2, 10], center=true);\n}\n\n// Main rotor shaft ----------------------------------------------------\nmodule main_shaft() {\n    translate([0, 0, body_hgt/2 + rod_h/2])\n        cylinder(h=rod_h, d=rod_d, center=true);\n}\n\n// Rotor head and blades ----------------------------------------------\nmodule rotor_head() {\n    translate([0, 0, body_hgt/2 + rod_h]) {\n        // Hub\n        cylinder(h=6, d=12);\n        \n        // Four blades in a loop\n        for(a = [0:90:270]) {\n            rotate([0, 0, a])\n                translate([rotor_d/2 - blade_w/2, 0, 0])\n                    blade();\n        }\n    }\n}\n\n// Single main blade ---------------------------------------------------\nmodule blade() {\n    linear_extrude(height=blade_t, center=true)\n        polygon([\n            [-rotor_d/2, -blade_w/2],\n            [ rotor_d/2 - 10, -blade_w/2],\n            [ rotor_d/2, 0],\n            [ rotor_d/2 - 10,  blade_w/2],\n            [-rotor_d/2,  blade_w/2]\n        ]);\n}\n\n// Tail rotor ----------------------------------------------------------\nmodule tail_rotor() {\n    // 90° shaft\n    translate([body_len/2 + tailboom_l, 0, tailboom_h/2])\n    rotate([90, 0, 0]) {\n        cylinder(h=8, d=4);\n        for(a = [0:90:270]) {\n            rotate([0, 0, a])\n                translate([tailrotor_d/2 - 4, 0, 0])\n                    cube([tailrotor_d/2, 4, 2], center=true);\n        }\n    }\n}\n\n// Landing skid --------------------------------------------------------\nmodule landing_gear() {\n    // Left skid\n    translate([0, body_wid/2 + skid_r, -body_hgt/2 - skid_gap - skid_r])\n    rotate([90, 0, 0])\n        cylinder(h=body_len*0.7, r=skid_r, center=true);\n\n    // Right skid\n    translate([0, -body_wid/2 - skid_r, -body_hgt/2 - skid_gap - skid_r])\n    rotate([90, 0, 0])\n        cylinder(h=body_len*0.7, r=skid_r, center=true);\n\n    // Cross struts\n    strut(-body_len/4);\n    strut( body_len/4);\n\n    // Vertical struts\n    v_strut(-body_len/3);\n    v_strut( body_len/3);\n}\n\nmodule strut(x) {\n    translate([x, 0, -body_hgt/2 - skid_gap/2 - skid_r])\n        cube([2, body_wid + 2*skid_r, skid_gap], center=true);\n}\n\nmodule v_strut(x) {\n    translate([x, body_wid/2 + skid_r, -body_hgt/2 - skid_gap/2 - skid_r])\n        cube([2, 2, skid_gap + 2*skid_r], center=true);\n    translate([x, -body_wid/2 - skid_r, -body_hgt/2 - skid_gap/2 - skid_r])\n        cube([2, 2, skid_gap + 2*skid_r], center=true);\n}",
    "renders": true
  },
  {
    "vehicle": "tiltwing",
    "openscad_code": "// Tiltwing aircraft - realistic style, medium complexity\n// Overall length ~80mm, wingspan ~60mm, designed for 3D printing\n\n// Parameters\nwing_span = 60;\nfuselage_length = 80;\nfuselage_diameter = 8;\nwing_chord = 20;\nwing_thickness = 2;\nnacelle_diameter = 10;\nnacelle_length = 15;\nprop_diameter = 18;\nprop_blades = 3;\nprop_thickness = 1.5;\ntail_span = 25;\ntail_chord = 12;\ntail_thickness = 1.5;\nrudder_height = 12;\nrudder_thickness = 2;\nlanding_gear_height = 8;\nwheel_diameter = 6;\n\n// Main module\nmodule tiltwing() {\n    // Fuselage\n    union() {\n        // Main body\n        translate([0, 0, fuselage_diameter/2])\n            rotate([90, 0, 0])\n                cylinder(h=fuselage_length, d=fuselage_diameter, $fn=20);\n        \n        // Cockpit\n        translate([fuselage_length/2 - 8, 0, fuselage_diameter/2 + 2])\n            rotate([90, 0, 0])\n                cylinder(h=10, d1=fuselage_diameter + 4, d2=fuselage_diameter + 2, $fn=20);\n        \n        // Nose cone\n        translate([-fuselage_length/2 - 5, 0, fuselage_diameter/2])\n            rotate([90, 0, 0])\n                cylinder(h=5, d1=0, d2=fuselage_diameter, $fn=20);\n    }\n    \n    // Main wing\n    translate([0, 0, fuselage_diameter])\n        rotate([0, 0, 0])\n            wing(wing_span, wing_chord, wing_thickness);\n    \n    // Tail wings\n    // Horizontal stabilizer\n    translate([fuselage_length/2 - 15, 0, fuselage_diameter/2 + 5])\n        rotate([0, 0, 0])\n            wing(tail_span, tail_chord, tail_thickness);\n    \n    // Vertical stabilizer\n    translate([fuselage_length/2 - 15, 0, fuselage_diameter/2 + 5])\n        rotate([90, 0, 90])\n            wing(rudder_height*2, rudder_thickness, tail_chord);\n    \n    // Tilt-wing nacelles\n    for (side = [-1, 1]) {\n        // Nacelle\n        translate([0, side * wing_span/3, fuselage_diameter + wing_thickness + nacelle_diameter/2])\n            rotate([90, 0, 0])\n                cylinder(h=nacelle_length, d=nacelle_diameter, $fn=16);\n        \n        // Propeller\n        translate([nacelle_length/2, side * wing_span/3, fuselage_diameter + wing_thickness + nacelle_diameter/2])\n            rotate([0, 90, 0])\n                propeller(prop_diameter, prop_blades, prop_thickness);\n    }\n    \n    // Landing gear\n    for (side = [-1, 1]) {\n        // Main gear struts\n        translate([fuselage_length/2 - 20, side * fuselage_diameter/2, 0])\n            cylinder(h=landing_gear_height, d=2, $fn=8);\n        \n        // Wheels\n        translate([fuselage_length/2 - 20, side * fuselage_diameter/2, -landing_gear_height])\n            rotate([0, 90, 0])\n                cylinder(h=wheel_diameter/2, d=wheel_diameter, $fn=12);\n    }\n    \n    // Nose gear\n    translate([-fuselage_length/2 + 10, 0, 0])\n        cylinder(h=landing_gear_height, d=2, $fn=8);\n    \n    translate([-fuselage_length/2 + 10, 0, -landing_gear_height])\n        rotate([0, 90, 0])\n            cylinder(h=wheel_diameter/2, d=wheel_diameter, $fn=12);\n}\n\n// Wing module with airfoil shape\nmodule wing(span, chord, thickness) {\n    difference() {\n        // Main wing\n        cube([chord, span, thickness], center=true);\n        \n        // Taper trailing edge\n        translate([chord/2, 0, thickness/2 + 0.1])\n            cube([chord/2, span + 1, thickness + 0.2], center=false);\n        \n        // Wing tips\n        translate([-chord/2, span/2, 0])\n            rotate([0, 0, -45])\n                cube([chord/2, thickness*2, thickness], center=true);\n        \n        translate([-chord/2, -span/2, 0])\n            rotate([0, 0, 45])\n                cube([chord/2, thickness*2, thickness], center=true);\n    }\n}\n\n// Propeller module\nmodule propeller(diameter, blades, thickness) {\n    for (i = [0:blades-1]) {\n        rotate([0, 0, i * 360/blades])\n            prop_blade(diameter/2, thickness);\n    }\n    \n    // Hub\n    cylinder(h=thickness*2, d=diameter/5, $fn=16);\n}\n\n// Single propeller blade\nmodule prop_blade(radius, thickness) {\n    translate([0, radius/2, 0])\n        rotate([90, 0, 0])\n            difference() {\n                // Blade\n                scale([1, 4, 1])\n                    cylinder(h=radius/2, d=thickness*2, $fn=3);\n                \n                // Taper tip\n                translate([0, radius/2 - 2, 0])\n                    scale([1, 2, 1])\n                        cylinder(h=radius/2, d1=thickness*2, d2=0, $fn=3);\n            }\n}\n\n// Render the model\ntiltwing();",
    "renders": true
  },
  {
    "vehicle": "convertiplane",
    "openscad_code": "// Convertiplane - Medium complexity, realistic style\n// Wings with rotating nacelles and propellers\n\n$fa = 2;\n$fs = 0.5;\n\n// Main dimensions\nfuselage_length = 60;\nfuselage_diameter = 8;\nwing_span = 80;\nwing_chord = 20;\nwing_thickness = 3;\nnacelle_diameter = 12;\nprop_diameter = 18;\nprop_blades = 3;\n\n// Fuselage module\nmodule fuselage() {\n    // Main body\n    color(\"LightGray\")\n    union() {\n        // Central cylinder\n        cylinder(h=fuselage_length, d=fuselage_diameter, center=true);\n        \n        // Tapered nose\n        translate([fuselage_length/2, 0, 0])\n            scale([1, 0.8, 0.8])\n                sphere(d=fuselage_diameter);\n        \n        // Tapered tail\n        translate([-fuselage_length/2, 0, 0])\n            scale([1, 0.7, 0.7])\n                sphere(d=fuselage_diameter);\n    }\n}\n\n// Cockpit\nmodule cockpit() {\n    color(\"SkyBlue\")\n    translate([fuselage_length/4, 0, fuselage_diameter/2])\n        difference() {\n            // Main canopy\n            scale([2, 1.2, 0.8])\n                sphere(d=fuselage_diameter);\n            \n            // Cut bottom\n            translate([0, 0, -fuselage_diameter/2])\n                cube([fuselage_diameter*2, fuselage_diameter*1.5, fuselage_diameter], center=true);\n        }\n}\n\n// Wing with nacelle\nmodule wing_with_nacelle(side, tilt_angle) {\n    // Wing\n    color(\"White\")\n    translate([0, side*wing_span/4, 0])\n        cube([wing_chord, wing_span/2, wing_thickness], center=true);\n    \n    // Wing strut\n    color(\"Gray\")\n    translate([0, side*wing_span/4, -wing_thickness/2])\n        cylinder(h=5, d=2);\n    \n    // Nacelle (engine pod)\n    color(\"DarkGray\")\n    translate([0, side*wing_span/2, 0])\n    rotate([0, 0, tilt_angle])\n        union() {\n            // Nacelle body\n            cylinder(h=nacelle_diameter*1.5, d=nacelle_diameter);\n            \n            // Propeller hub\n            translate([0, 0, nacelle_diameter*0.75])\n                cylinder(h=3, d=4);\n        }\n    \n    // Propeller\n    color(\"Black\")\n    translate([0, side*wing_span/2, 0])\n    rotate([0, 0, tilt_angle])\n    translate([0, 0, nacelle_diameter*0.75 + 2])\n        for(i=[0:prop_blades-1]) {\n            rotate([0, 0, i*360/prop_blades])\n                cube([prop_diameter/2, 2, 0.5], center=true);\n        }\n}\n\n// Tail section\nmodule tail() {\n    // Vertical stabilizer\n    color(\"White\")\n    translate([-fuselage_length/2 + 5, 0, fuselage_diameter/2])\n        cube([8, 2, 12], center=true);\n    \n    // Horizontal stabilizer\n    color(\"White\")\n    translate([-fuselage_length/2 + 3, 0, fuselage_diameter/2 + 5])\n        rotate([90, 0, 0])\n            cube([12, 2, 25], center=true);\n}\n\n// Landing gear\nmodule landing_gear() {\n    color(\"Silver\")\n    union() {\n        // Front gear\n        translate([fuselage_length/4, 0, -fuselage_diameter/2])\n            cylinder(h=8, d=1.5);\n        \n        // Main gear\n        for(side=[-1, 1]) {\n            translate([-fuselage_length/4, side*8, -fuselage_diameter/2])\n                cylinder(h=8, d=2);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    fuselage();\n    cockpit();\n    \n    // Wings and nacelles\n    for(side=[-1, 1]) {\n        wing_with_nacelle(side, 75); // Tilted 75 degrees for VTOL mode\n    }\n    \n    tail();\n    landing_gear();\n}",
    "renders": true
  },
  {
    "vehicle": "stol",
    "openscad_code": "// Medium-complexity, realistic-style stool\n// Approx. 70 mm tall – prints without supports\n\n// Parameters\nseat_d = 55;            // seat diameter\nseat_t = 4;             // seat thickness\nleg_w = 3.5;            // leg width\nleg_h = 60;             // leg height\nstretch_t = 3;          // stretcher thickness\nstretch_gap = 8;        // gap under stretcher\nleg_r = 1.5;            // leg fillet radius\n\n// 3D printable wall / extrusion width\nwall = 1.6;\n\nmodule round_cube(s, r) {\n    // rounded cube with slices for clean 3D printing\n    hull() {\n        for(dx=[-1,1], dy=[-1,1], dz=[-1,1])\n            translate([dx*(s.x/2-r), dy*(s.y/2-r), dz*(s.z/2-r)])\n                sphere(r=r, $fn=8);\n    }\n}\n\nmodule leg(x,y) {\n    // tapered leg with rounded edges\n    linear_extrude(height=leg_h, scale=[0.9,0.9])\n        translate([0,0,-leg_h])\n            round_cube([leg_w,leg_w,leg_h], leg_r);\n}\n\nmodule stretcher(h) {\n    // circular stretcher\n    difference() {\n        cylinder(h=stretch_t, d=seat_d-2*leg_w-4, $fn=32);\n        translate([0,0,-0.1])\n            cylinder(h=stretch_t+0.2, d=seat_d-2*leg_w-4-2*wall, $fn=32);\n    }\n}\n\nmodule seat() {\n    // seat top with small cushion profile\n    difference() {\n        cylinder(h=seat_t, d=seat_d, $fn=64);\n        translate([0,0,-0.1])\n            cylinder(h=seat_t+0.2, d=seat_d-2*wall, $fn=64);\n    }\n    // soft edge\n    translate([0,0,seat_t-1])\n        cylinder(h=1, d1=seat_d, d2=seat_d-1.5, $fn=64);\n}\n\n// Assembly\nunion() {\n    // Seat\n    translate([0,0,leg_h]) seat();\n\n    // Legs\n    leg_pos = (seat_d - leg_w)/2 * 0.85;\n    for(i=[0:3])\n        rotate([0,0,i*90])\n            translate([leg_pos,leg_pos,0])\n                leg(leg_pos,leg_pos);\n\n    // Lower stretcher ring\n    translate([0,0,stretch_gap])\n        stretcher(stretch_t);\n}",
    "renders": true
  },
  {
    "vehicle": "stovl",
    "openscad_code": "// STOLVL (Short Take-Off and Vertical Landing) aircraft\n// Medium complexity realistic model\n// Approx 80 mm wing span\n\nmodule fuselage() {\n    // Main body\n    difference() {\n        hull() {\n            // Front cone\n            translate([0, 0, 8])\n                scale([1, 1, 1.5])\n                sphere(r=6, $fn=32);\n            // Main cylinder\n            cylinder(h=35, r=5, $fn=32);\n            // Rear cone\n            translate([0, 0, -20])\n                scale([1, 1, 0.8])\n                sphere(r=5, $fn=32);\n        }\n        \n        // Cockpit cutout\n        translate([0, -1, 15])\n            rotate([0, 15, 0])\n            cube([12, 6, 8], center=true);\n    }\n    \n    // Cockpit canopy\n    translate([0, 0, 20])\n        scale([1, 0.8, 0.5])\n        sphere(r=4, $fn=32);\n}\n\nmodule wing() {\n    // Main wing profile\n    hull() {\n        // Root\n        translate([0, 0, 0])\n            cube([20, 2, 3], center=true);\n        // Tip\n        translate([25, 0, 0])\n            scale([0.3, 0.7, 0.7])\n            cube([10, 2, 3], center=true);\n    }\n    \n    // Wing strake\n    translate([5, 0, -2])\n        cube([15, 2, 1], center=true);\n}\n\nmodule vertical_stabilizer() {\n    // Vertical tail\n    hull() {\n        translate([0, 0, 0])\n            cube([2, 0.5, 8], center=true);\n        translate([0, 0, 5])\n            scale([0.5, 1, 1.5])\n            cube([2, 0.5, 8], center=true);\n    }\n    \n    // Rudder\n    translate([0, 0.5, 3])\n        rotate([0, 20, 0])\n        cube([1.5, 0.5, 6], center=true);\n}\n\nmodule horizontal_stabilizer() {\n    // Horizontal tail\n    hull() {\n        translate([-8, 0, 0])\n            cube([16, 1, 2], center=true);\n        translate([-12, 0, 0])\n            scale([0.3, 0.7, 0.7])\n            cube([8, 1, 2], center=true);\n        translate([12, 0, 0])\n            scale([0.3, 0.7, 0.7])\n            cube([8, 1, 2], center=true);\n    }\n}\n\nmodule lift_fan() {\n    // Fan housing\n    difference() {\n        cylinder(h=3, r=7, $fn=64);\n        cylinder(h=4, r=5.5, $fn=64);\n    }\n    \n    // Fan blades (simplified)\n    for(i=[0:11]) {\n        rotate([0, 0, i*30])\n            translate([6, 0, 1.5])\n                cube([2, 0.5, 1], center=true);\n    }\n    \n    // Support struts\n    for(i=[0:3]) {\n        rotate([0, 0, i*90])\n            translate([3.5, 0, 1.5])\n                cube([3, 1, 1], center=true);\n    }\n}\n\nmodule exhaust_nozzle() {\n    // Main nozzle\n    difference() {\n        cylinder(h=8, r1=4, r2=5, $fn=32);\n        cylinder(h=9, r1=3, r2=4, $fn=32);\n    }\n    \n    // Vectoring vanes\n    for(i=[0:3]) {\n        rotate([0, 0, i*45])\n            translate([0, 0, 4])\n                rotate([45, 0, 0])\n                cube([0.5, 6, 1], center=true);\n    }\n}\n\nmodule landing_gear() {\n    // Nose gear\n    translate([0, 0, -12])\n        cylinder(h=6, r=0.5, $fn=16);\n    translate([0, 0, -12])\n        sphere(r=1, $fn=16);\n    \n    // Main gear\n    translate([8, 0, -12])\n        cylinder(h=5, r=0.5, $fn=16);\n    translate([8, 0, -12])\n        sphere(r=1, $fn=16);\n    translate([-8, 0, -12])\n        cylinder(h=5, r=0.5, $fn=16);\n    translate([-8, 0, -12])\n        sphere(r=1, $fn=16);\n}\n\n// Assembly\nunion() {\n    // Fuselage\n    fuselage();\n    \n    // Wings\n    translate([0, 0, 5])\n        rotate([0, 0, 0])\n        wing();\n    translate([0, 0, 5])\n        rotate([0, 180, 0])\n        wing();\n    \n    // Tail surfaces\n    translate([-30, 0, 5])\n        rotate([0, 0, 0])\n        vertical_stabilizer();\n    translate([-30, 0, 5])\n        rotate([0, 0, 0])\n        horizontal_stabilizer();\n    \n    // Lift fan\n    translate([0, 0, 10])\n        lift_fan();\n    \n    // Exhaust nozzle\n    translate([-40, 0, 0])\n        rotate([0, 90, 0])\n        exhaust_nozzle();\n    \n    // Landing gear\n    landing_gear();\n}",
    "renders": true
  },
  {
    "vehicle": "vtol",
    "openscad_code": "// VTOL Tilt-Rotor UAV – Realistic / Medium Complexity\n// Approx. 90 mm wingspan, printable without supports\n\n$fa = 2;\n$fs = 0.5;\n\n// Wall thickness for 3-D printing\nwall = 1.2;\n\nmodule vtol() {\n    // Fuselage central pod\n    difference() {\n        hull() {\n            cube([42, 15, 12], center=true);\n            translate([0, 0, 7]) sphere(d=12);\n        }\n        // Cockpit cavity\n        translate([6, 0, 5]) cube([30, 10, 8], center=true);\n    }\n\n    // Vertical stabilizers\n    for (y = [-1, 1]) {\n        translate([0, y*9, 0]) rotate([0, y*90, 0])\n            cylinder(h=8, d1=12, d2=4);\n    }\n\n    // Wing main panels\n    wing_half();\n\n    // Left wing\n    mirror([1, 0, 0]) wing_half();\n\n    // Nose camera ball\n    translate([20, 0, -2]) sphere(d=4);\n\n    // Landing skids\n    for (x = [-15, 15]) {\n        translate([x, 0, -7]) rotate([90, 0, 0])\n            cylinder(h=12, d=2);\n    }\n}\n\nmodule wing_half() {\n    // Main wing structure\n    translate([-21, 0, 0]) difference() {\n        hull() {\n            cube([42, 8, 3.5]);\n            translate([0, 0, 1.75]) sphere(d=8);\n        }\n        // Motor mount hole\n        translate([-38, 0, 1.75]) rotate([0, 90, 0])\n            cylinder(h=10, d=5.5);\n    }\n\n    // Tilt-rotor nacelle\n    translate([-38, 0, 1.75]) rotate([0, 90, 0])\n        difference() {\n            cylinder(h=10, d=8);\n            cylinder(h=11, d=6); // hollow\n        }\n\n    // Propeller blades (3-blade, printable)\n    for (a = [0:120:240]) {\n        rotate([0, 0, a])\n            translate([-43, 0, 1.75])\n                rotate([90, 0, 0])\n                    blade();\n    }\n\n    // Wing tip light\n    translate([-42, 0, 0]) sphere(d=3);\n}\n\nmodule blade() {\n    // Tapered blade printable flat\n    hull() {\n        cube([0.6, 2, 1.2]);\n        translate([0, 9, 0]) cube([0.3, 1, 0.6]);\n    }\n}\n\n// Assemble\nvtol();",
    "renders": true
  },
  {
    "vehicle": "vstol",
    "openscad_code": "// Realistic medium-complexity VTOL aircraft for 3D printing\n// Wingspan ≈ 80 mm, length ≈ 75 mm, height ≈ 25 mm\n\n$fn = 48;\n\n// Main fuselage\nmodule fuselage() {\n    union() {\n        // Main body\n        hull() {\n            translate([-5, 0, 0]) sphere(d=10);\n            translate([35, 0, 0]) sphere(d=8);\n            translate([65, 0, 0]) sphere(d=5);\n        }\n        \n        // Cockpit bump\n        translate([15, 0, 4]) scale([1.2, 0.8, 0.6]) sphere(d=12);\n        \n        // Tail boom\n        translate([55, 0, 0]) cylinder(h=25, d1=8, d2=6);\n    }\n}\n\n// Main wing\nmodule main_wing() {\n    difference() {\n        // Wing body\n        translate([25, 0, -3]) scale([1, 0.15, 0.05]) cube([40, 80, 10], center=true);\n        \n        // Wing root fairing\n        translate([0, 0, -3]) cylinder(h=7, d=12);\n    }\n    \n    // Wing tips\n    for (y = [-38, 38]) {\n        translate([25, y, -3]) rotate([0, 0, 90]) cylinder(h=2, d=10);\n    }\n}\n\n// Tail surfaces\nmodule tail_surfaces() {\n    union() {\n        // Horizontal stabilizer\n        translate([65, 0, 0]) rotate([0, 20, 0]) scale([0.3, 1, 0.05]) cube([15, 35, 5], center=true);\n        \n        // Vertical stabilizer\n        translate([70, 0, 6]) rotate([0, 0, 90]) scale([0.05, 1, 0.3]) cube([5, 18, 15], center=true);\n    }\n}\n\n// Engine nacelles\nmodule engines() {\n    for (y = [-25, 25]) {\n        union() {\n            // Nacelle body\n            translate([20, y, -8]) rotate([0, 90, 0]) cylinder(h=15, d=10);\n            \n            // Propeller hub\n            translate([20, y, -12]) cylinder(h=3, d=6);\n            \n            // Propeller blades (simplified)\n            for (i = [0:45:315]) {\n                rotate([0, 0, i]) translate([20, y + 6 * cos(i), -12]) cube([8, 1.5, 0.5], center=true);\n            }\n            \n            // Support strut\n            translate([20, y, -5]) rotate([90, 0, 0]) cylinder(h=6, d=3);\n        }\n    }\n}\n\n// Landing gear\nmodule landing_gear() {\n    // Nose gear\n    translate([8, 0, -5]) cylinder(h=8, d=2);\n    translate([8, 0, -9]) sphere(d=4);\n    \n    // Main gear\n    for (y = [-15, 15]) {\n        translate([30, y, -5]) cylinder(h=8, d=2);\n        translate([30, y, -9]) sphere(d=4);\n    }\n}\n\n// Assembly\nunion() {\n    fuselage();\n    main_wing();\n    tail_surfaces();\n    engines();\n    landing_gear();\n}",
    "renders": true
  },
  {
    "vehicle": "skyvan",
    "openscad_code": "// Skyvan SC7 1:144 (≈ 70 mm span) – medium-realistic\n// Basic primitives only, no overhangs, 0.8 mm printable walls\n\n$fa = 2; $fs = 0.5;\n\n// global scale ---------------------------------------------------------\nscale(0.7)  // 1:144 from 10 m real span → 70 mm\n\n// main assembly --------------------------------------------------------\nskyvan();\n\nmodule skyvan() {\n    color(\"LightGray\")\n    union() {\n        fuselage();\n        wings();\n        tail_surfaces();\n        engines();\n        landing_gear();\n    }\n}\n\n// ---------------------------------------------------------------------\nmodule fuselage() {\n    // main box (rectangular cross-section)\n    translate([0, 0, 8])\n    cube([26, 18, 13], center=true);\n\n    // upswept rear\n    translate([-10.5, 0, 10.5])\n    rotate([0, -20, 0])\n    cube([10, 18, 8], center=true);\n\n    // cockpit front\n    translate([12.5, 0, 11])\n    rotate([0, -30, 0])\n    scale([1,0.9,0.6])\n    sphere(d=10);\n}\n\n// ---------------------------------------------------------------------\nmodule wing_profile(dx) {\n    translate([dx, 0, 8])\n    rotate([0, -2, 0])\n    cube([20, 1.6, 4], center=true);\n}\n\nmodule wings() {\n    // left wing\n    for(y = [-22, -17, -12, -7])\n        wing_profile(y);\n\n    // right wing\n    mirror([0,1,0])\n        for(y = [-22, -17, -12, -7])\n            wing_profile(y);\n}\n\n// ---------------------------------------------------------------------\nmodule tail_surfaces() {\n    // vertical fin\n    translate([-12, 0, 16])\n    cube([1.6, 10, 8], center=true);\n\n    // horizontal stabilizers\n    for(side = [-1, 1])\n        translate([-12, side*9, 12])\n        cube([1.6, 7, 3], center=true);\n}\n\n// ---------------------------------------------------------------------\nmodule engine() {\n    // nacelle\n    translate([0, 9, 8])\n    rotate([0, 90, 0])\n    cylinder(h=12, d1=5, d2=4.5);\n\n    // prop hub\n    translate([0, 9, 6.5])\n    sphere(d=3);\n\n    // two-blade prop (printed flat)\n    for(a = [0, 90])\n        rotate([0, 0, a])\n        translate([0, 9, 6.5])\n        cube([0.8, 6, 0.8], center=true);\n}\n\nmodule engines() {\n    engine();\n    mirror([0,1,0]) engine();\n}\n\n// ---------------------------------------------------------------------\nmodule landing_gear() {\n    // simple skids\n    color(\"Gray\")\n    for(side = [-1, 1])\n        translate([side*7, 0, 2])\n        cube([1.5, 30, 1.5], center=true);\n}",
    "renders": true
  },
  {
    "vehicle": "skytruck",
    "openscad_code": "// Skytruck - Medium complexity realistic style\n// Wingspan ~80mm, length ~70mm, height ~25mm\n\n$fn = 32;\n\n// Main parameters\nfuselage_length = 60;\nfuselage_width = 10;\nfuselage_height = 12;\nwing_span = 80;\nwing_chord = 18;\ntail_span = 35;\ntail_chord = 12;\n\nmodule skytruck() {\n    union() {\n        // Fuselage - main body\n        translate([0, 0, 5])\n        difference() {\n            hull() {\n                cube([fuselage_length, fuselage_width, fuselage_height], center=true);\n                translate([-5, 0, 3])\n                cube([20, fuselage_width*1.2, fuselage_height*1.2], center=true);\n            }\n            \n            // Cockpit windows\n            translate([-20, 0, 3])\n            cube([10, fuselage_width-1, 6], center=true);\n        }\n        \n        // Wings\n        translate([0, 0, 8])\n        difference() {\n            // Main wing\n            cube([wing_chord, wing_span, 3], center=true);\n            \n            // Wing cutouts for engines\n            for(x = [-1, 1])\n            translate([0, x * 20, 0])\n            cylinder(h=4, d=8, center=true);\n        }\n        \n        // Horizontal stabilizer\n        translate([-25, 0, 8])\n        difference() {\n            cube([tail_chord, tail_span, 2], center=true);\n            \n            // Elevator cut\n            translate([-2, 0, 0])\n            cube([tail_chord/2+1, tail_span, 2.5], center=true);\n        }\n        \n        // Vertical stabilizer\n        translate([-25, 0, 15])\n        cube([8, 2, 12], center=true);\n        \n        // Engines - nacelles\n        module engine_nacelle() {\n            difference() {\n                hull() {\n                    cylinder(h=15, d1=8, d2=6);\n                    translate([2, 0, 7])\n                    sphere(d=8);\n                }\n                \n                // Engine intake\n                translate([0, 0, -1])\n                cylinder(h=3, d=5);\n            }\n            \n            // Propeller hub\n            translate([0, 0, -2])\n            cylinder(h=2, d=3);\n        }\n        \n        // Left engine\n        translate([0, -20, 8])\n        rotate([90, 0, 0])\n        engine_nacelle();\n        \n        // Right engine\n        translate([0, 20, 8])\n        rotate([90, 0, 0])\n        engine_nacelle();\n        \n        // Landing gear - main\n        module main_gear() {\n            translate([0, 0, -2])\n            union() {\n                // Strut\n                cylinder(h=8, d=2);\n                // Wheel\n                translate([0, 0, -3])\n                rotate([90, 0, 0])\n                cylinder(h=3, d=6, center=true);\n            }\n        }\n        \n        // Nose gear\n        translate([15, 0, 5])\n        main_gear();\n        \n        // Main gear\n        translate([-5, -15, 5])\n        main_gear();\n        translate([-5, 15, 5])\n        main_gear();\n        \n        // Wingtip lights\n        module wingtip_light() {\n            hull() {\n                cube([2, 3, 2], center=true);\n                translate([1, 0, 0])\n                sphere(d=2);\n            }\n        }\n        \n        // Left wingtip\n        translate([0, wing_span/2, 8.5])\n        wingtip_light();\n        \n        // Right wingtip\n        translate([0, -wing_span/2, 8.5])\n        mirror([0, 1, 0])\n        wingtip_light();\n        \n        // Tail details\n        translate([-30, 0, 15])\n        cube([4, 2, 6], center=true);\n        \n        // Cargo door\n        translate([5, fuselage_width/2+0.1, 2])\n        cube([20, 0.5, 6], center=false);\n    }\n}\n\nskytruck();",
    "renders": true
  },
  {
    "vehicle": "skycrane",
    "openscad_code": "// Skycrane (realistic style, medium complexity) – 3D-printable\n// External dimensions: ~70 mm rotor-tip to rotor-tip, ~60 mm nose-to-tail\n\n// Parameters\nrotor_d = 22;          // Main rotor disk diameter\nrotor_h = 2;           // Rotor thickness\nmast_h = 8;            // Main rotor mast\nbody_l = 30;           // Fuselage length\nbody_w = 10;           // Fuselage max width\nbody_h = 6;            // Fuselage max height\ntail_boom_l = 15;      // Tail boom length\ntail_boom_d = 3;       // Tail boom diameter\nfin_h = 8;             // Vertical stabilizer height\nfin_t = 1.2;           // Fin thickness\nlanding_gear_h = 7;    // Total landing-gear height\nwheel_d = 4;           // Wheel diameter\nhook_drop = 10;        // Winch hook drop distance\nwall = 1.2;            // Wall thickness for 3D printing\n\nmodule main_rotor() {\n    // Rotor disk\n    difference() {\n        cylinder(d = rotor_d, h = rotor_h, $fn = 48);\n        translate([0, 0, -0.1])\n            cylinder(d = rotor_d - wall*2, h = rotor_h + 0.2, $fn = 48);\n    }\n    // Simple hub cap\n    translate([0, 0, rotor_h])\n        cylinder(d = 4, h = 1.5, $fn = 20);\n}\n\nmodule tail_rotor() {\n    // Small tail rotor disk\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(d = 10, h = 1.2, $fn = 32);\n        translate([0, 0, -0.1])\n            cylinder(d = 10 - wall*2, h = 1.4, $fn = 32);\n    }\n}\n\nmodule fuselage() {\n    // Main hull – teardrop shape via cube rounding\n    hull() {\n        translate([-body_l/2, 0, 0])\n            cube([body_l*0.3, body_w, body_h], center = true);\n        translate([body_l/2*0.7, 0, 0])\n            cube([body_l*0.1, body_w*0.7, body_h*0.7], center = true);\n    }\n    // Cockpit glazing bump\n    translate([0, 0, body_h/2 + 1.5])\n        scale([1.1, 0.9, 0.5])\n            sphere(d = body_w, $fn = 36);\n}\n\nmodule tail_boom() {\n    // Cylindrical boom\n    translate([body_l/2 + tail_boom_l/2, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(d = tail_boom_d, h = tail_boom_l, $fn = 32);\n}\n\nmodule vertical_fin() {\n    // Vertical stabilizer\n    translate([body_l/2 + tail_boom_l - 2, 0, tail_boom_d/2 + fin_h/2])\n        cube([fin_t, tail_boom_d*0.7, fin_h], center = true);\n}\n\nmodule horizontal_stabilizer() {\n    // Small horizontal stabilizer\n    translate([body_l/2 + tail_boom_l - 4, 0, tail_boom_d/2])\n        cube([6, tail_boom_d*2.5, fin_t], center = true);\n}\n\nmodule landing_gear() {\n    // Simple skid-type gear – printable without supports\n    translate([0, body_w/2 + wheel_d/2, -landing_gear_h/2])\n        cube([body_l*0.8, wall, landing_gear_h], center = true);\n    mirror([0, 1, 0])\n        translate([0, body_w/2 + wheel_d/2, -landing_gear_h/2])\n            cube([body_l*0.8, wall, landing_gear_h], center = true);\n    // Cross tubes\n    for (x = [-body_l/4, body_l/4]) {\n        translate([x, 0, -landing_gear_h + wall/2])\n            rotate([90, 0, 0])\n                cylinder(d = wall, h = body_w + wheel_d, $fn = 16);\n    }\n}\n\nmodule winch_assembly() {\n    // Simple winch drum\n    translate([0, 0, -body_h/2 - hook_drop/2])\n        rotate([90, 0, 0])\n            cylinder(d = 5, h = 4, $fn = 20);\n    // Hook\n    translate([0, 0, -hook_drop])\n        sphere(d = 2.5, $fn = 20);\n}\n\n// Assemble model\nunion() {\n    // Main rotor on mast\n    translate([0, 0, body_h/2 + mast_h + rotor_h/2])\n        main_rotor();\n    // Mast\n    translate([0, 0, body_h/2])\n        cylinder(d = 4, h = mast_h, $fn = 20);\n    // Fuselage\n    fuselage();\n    // Tail boom and tail rotor\n    tail_boom();\n    translate([body_l/2 + tail_boom_l, 0, 0])\n        tail_rotor();\n    vertical_fin();\n    horizontal_stabilizer();\n    // Landing gear\n    translate([0, 0, -body_h/2])\n        landing_gear();\n    // Winch\n    winch_assembly();\n}",
    "renders": true
  },
  {
    "vehicle": "airtruck",
    "openscad_code": "// Medium-complexity realistic airtruck for 3D printing\n// Wingspan ≈ 95 mm, length ≈ 85 mm, height ≈ 30 mm\n// Wall thickness 1.2 mm, no steep overhangs\n\n$fn = 24;\n\nmodule fuselage() {\n    difference() {\n        // Main body\n        hull() {\n            cube([45, 20, 18], center = true);\n            translate([22, 0, 0]) cube([6, 18, 16], center = true);\n        }\n        \n        // Cockpit window\n        translate([20, 0, 8]) rotate([0, 90, 0]) \n            cylinder(h = 15, r1 = 7, r2 = 7, center = true);\n        \n        // Tail cutout\n        translate([-22, 0, 0]) cube([10, 20, 18], center = true);\n    }\n}\n\nmodule wings() {\n    // Left wing\n    translate([0, 12, -2]) {\n        hull() {\n            cube([30, 4, 1.2]);\n            translate([12, 12, 0]) cube([10, 4, 1.2]);\n        }\n        \n        // Winglet\n        translate([22, 12, 2]) cube([10, 1.2, 5]);\n    }\n    \n    // Right wing (mirrored)\n    mirror([0, 1, 0]) wings();\n}\n\nmodule tail() {\n    translate([-20, 0, 5]) {\n        // Vertical stabilizer\n        hull() {\n            cube([1.2, 12, 15]);\n            translate([-6, 0, 10]) cube([1.2, 8, 8]);\n        }\n        \n        // Horizontal stabilizer\n        hull() {\n            translate([0, 0, 8]) cube([15, 1.2, 8]);\n            translate([-6, 0, 8]) cube([8, 25, 1.2]);\n        }\n    }\n}\n\nmodule engines() {\n    for (y = [-20, 20]) {\n        translate([5, y, -5]) {\n            // Engine nacelle\n            cylinder(h = 12, r1 = 5, r2 = 4);\n            translate([0, 0, -6]) cylinder(h = 6, r1 = 3, r2 = 5);\n            \n            // Engine pylon\n            translate([0, 0, 6]) cube([8, 1.2, 10], center = true);\n        }\n    }\n}\n\nmodule landing_gear() {\n    // Nose gear\n    translate([18, 0, -10]) {\n        cylinder(h = 10, r = 1.5);\n        sphere(r = 2.5);\n    }\n    \n    // Main gear\n    for (x = [-5, 5]) {\n        translate([x, 12, -10]) {\n            cylinder(h = 10, r = 1.5);\n            sphere(r = 2.5);\n        }\n        mirror([0, 1, 0]) translate([x, 12, -10]) {\n            cylinder(h = 10, r = 1.5);\n            sphere(r = 2.5);\n        }\n    }\n}\n\nmodule cargo_doors() {\n    // Side cargo door\n    translate([0, 10.5, 0]) cube([25, 1.2, 10]);\n    \n    // Tail cargo door\n    translate([-20, 0, 0]) rotate([0, 90, 0]) \n        cylinder(h = 20, r = 9.5, center = true);\n}\n\n// Assembly\nunion() {\n    fuselage();\n    wings();\n    tail();\n    engines();\n    landing_gear();\n    cargo_doors();\n}",
    "renders": true
  },
  {
    "vehicle": "airvan",
    "openscad_code": "// Airvan - Realistic Medium Complexity\n// Wing-mounted twin turboprop utility aircraft\n\n// Overall dimensions\nlength = 90;\nwingspan = 80;\nheight = 25;\n\n// Parameters\nwall = 1.2;\nfuselage_diameter = 14;\n\nmodule fuselage() {\n    // Main body\n    hull();\n    \n    // Cockpit glazing\n    translate([length/2 - 20, 0, fuselage_diameter/2 - 1])\n        rotate([0, 90, 0])\n            cylinder(h=20, r1=6, r2=10, $fn=32);\n    \n    // Side windows\n    for(i=[-1:1]) {\n        translate([length/2 - 10 - abs(i)*8, i*3, fuselage_diameter/2 - 0.5])\n            rotate([0, 90, 0])\n                cylinder(h=6, r=2.5, $fn=16);\n    }\n    \n    // Cargo door\n    translate([length/2 - 35, fuselage_diameter/2, 0])\n        rotate([0, 0, 90])\n            cube([20, 8, wall]);\n}\n\nmodule hull() {\n    // Main tube\n    rotate([0, 90, 0])\n        cylinder(h=length, r=fuselage_diameter/2, $fn=32);\n    \n    // Tail cone\n    translate([-length/2, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h=20, r1=fuselage_diameter/2, r2=3, $fn=32);\n    \n    // Nose\n    translate([length/2, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h=15, r1=fuselage_diameter/2, r2=2, $fn=32);\n}\n\nmodule wings() {\n    // Main wing\n    translate([5, 0, 0])\n        rotate([0, 0, 5])\n            wing();\n    \n    // Horizontal stabilizer\n    translate([-length/2 + 5, 0, 0])\n        rotate([0, 0, -5])\n            scale([0.6, 0.6, 1])\n                wing();\n}\n\nmodule wing() {\n    // Main wing shape\n    difference() {\n        // Wing body\n        translate([0, 0, 0])\n            rotate([0, 0, 0])\n                hull() {\n                    translate([-5, -wingspan/2, 0])\n                        cube([10, 5, 2]);\n                    translate([-5, wingspan/2, 0])\n                        cube([10, 5, 2]);\n                    translate([15, 0, 3])\n                        sphere(d=3, $fn=16);\n                }\n        \n        // Engine nacelle cutouts\n        for(side=[-1, 1]) {\n            translate([0, side*wingspan/3, -1])\n                cylinder(h=5, r=5, $fn=16);\n        }\n    }\n    \n    // Wing tips\n    for(side=[-1, 1]) {\n        translate([0, side*wingspan/2, 0])\n            rotate([0, 90, 0])\n                cylinder(h=5, r1=2, r2=1, $fn=16);\n    }\n}\n\nmodule tail() {\n    // Vertical stabilizer\n    translate([-length/2 + 8, 0, 0])\n        rotate([0, 90, 0])\n            rotate([10, 0, 0])\n                difference() {\n                    hull() {\n                        translate([0, 0, 0])\n                            cube([0.1, 12, 10]);\n                        translate([8, 0, 12])\n                            cube([0.1, 8, 2]);\n                    }\n                    translate([4, 0, 6])\n                        cube([10, 11, 2]);\n                }\n    \n    // Rudder\n    translate([-length/2 + 8.2, 0, 12])\n        rotate([10, 0, 0])\n            cube([7.8, 7.8, 1.5]);\n}\n\nmodule engines() {\n    for(side=[-1, 1]) {\n        translate([0, side*wingspan/3, -6])\n            engine();\n    }\n}\n\nmodule engine() {\n    // Nacelle\n    difference() {\n        hull() {\n            cylinder(h=12, r1=5, r2=4, $fn=16);\n            translate([0, 0, 12])\n                cylinder(h=2, r=4.5, $fn=16);\n        }\n        translate([0, 0, -1])\n            cylinder(h=14, r=3, $fn=16);\n    }\n    \n    // Propeller\n    translate([0, 0, -1])\n        rotate([0, 0, $t*360])\n            propeller();\n}\n\nmodule propeller() {\n    for(i=[0:2]) {\n        rotate([0, 0, i*120])\n            translate([0, 0, 0])\n                cube([14, 1.5, 0.8], center=true);\n    }\n}\n\nmodule landing_gear() {\n    // Main gear\n    for(side=[-1, 1]) {\n        translate([-10, side*10, -fuselage_diameter/2 - 4])\n            strut();\n    }\n    \n    // Nose gear\n    translate([length/2 - 15, 0, -fuselage_diameter/2 - 4])\n        strut();\n}\n\nmodule strut() {\n    // Wheel\n    translate([0, 0, 0])\n        rotate([90, 0, 0])\n            cylinder(h=3, r=3, $fn=16);\n    \n    // Strut\n    translate([0, 0, 2])\n        cylinder(h=4, r=1.5, $fn=8);\n}\n\n// Assembly\nunion() {\n    fuselage();\n    wings();\n    tail();\n    engines();\n    landing_gear();\n}",
    "renders": true
  },
  {
    "vehicle": "airbus",
    "openscad_code": "// Airbus A320-like model - Medium complexity realistic style\n// Scale: ~80mm wingspan, 3D printable\n\n$fn = 32;  // Smooth curves\nwall = 1.2;  // Print-friendly wall thickness\n\nmodule fuselage() {\n    // Main cylindrical body\n    difference() {\n        union() {\n            // Main body\n            cylinder(h = 55, r1 = 5, r2 = 5, center = true);\n            // Nose cone\n            translate([0, 0, 27.5])\n                cylinder(h = 15, r1 = 5, r2 = 0, center = false);\n            // Tail cone\n            translate([0, 0, -27.5])\n                cylinder(h = 12, r1 = 5, r2 = 2, center = false);\n        }\n        // Cockpit windows\n        translate([0, 3.5, 20])\n            rotate([90, 0, 0])\n                cylinder(h = 8, r = 1.2, center = true);\n        // Passenger windows\n        for (z = [-15:5:15])\n            translate([0, 4.5, z])\n                sphere(r = 0.8);\n    }\n}\n\nmodule wings() {\n    // Right wing\n    difference() {\n        translate([-7, 0, 0])\n            rotate([0, 0, -10])\n                scale([1, 4, 0.3])\n                    cube([15, 10, 1], center = true);\n        // Winglet\n        translate([-22, 17.5, 0])\n            rotate([0, 0, 80])\n                scale([0.3, 1.5, 0.3])\n                    cube([5, 4, 1], center = true);\n    }\n    \n    // Left wing (mirrored)\n    mirror([1, 0, 0])\n        difference() {\n            translate([-7, 0, 0])\n                rotate([0, 0, -10])\n                    scale([1, 4, 0.3])\n                        cube([15, 10, 1], center = true);\n            translate([-22, 17.5, 0])\n                rotate([0, 0, 80])\n                    scale([0.3, 1.5, 0.3])\n                        cube([5, 4, 1], center = true);\n        }\n}\n\nmodule horizontal_stabilizer() {\n    // Right stabilizer\n    translate([0, 0, -30])\n        rotate([0, -20, 0])\n            scale([0.3, 2, 0.2])\n                cube([8, 12, 1], center = true);\n    \n    // Left stabilizer\n    mirror([1, 0, 0])\n        translate([0, 0, -30])\n            rotate([0, -20, 0])\n                scale([0.3, 2, 0.2])\n                    cube([8, 12, 1], center = true);\n}\n\nmodule vertical_stabilizer() {\n    translate([0, 0, -32])\n        rotate([0, 90, 0])\n            scale([0.2, 2, 0.3])\n                cube([8, 12, 1], center = true);\n}\n\nmodule engines() {\n    // Right engine\n    translate([10, 10, -10])\n        rotate([90, 0, 0])\n            cylinder(h = 12, r1 = 3, r2 = 2.5, center = true);\n    \n    // Left engine\n    translate([-10, 10, -10])\n        rotate([90, 0, 0])\n            cylinder(h = 12, r1 = 3, r2 = 2.5, center = true);\n}\n\nmodule landing_gear() {\n    // Nose gear\n    translate([0, 0, 15])\n        cylinder(h = 6, r = 0.8, center = false);\n    \n    // Main gear\n    for (x = [-6, 6])\n        translate([x, 0, -8])\n            cylinder(h = 6, r = 1, center = false);\n}\n\n// Assembly\nunion() {\n    // Main aircraft structure\n    union() {\n        fuselage();\n        wings();\n        horizontal_stabilizer();\n        vertical_stabilizer();\n    }\n    \n    // Separate parts for printing\n    translate([0, 0, 0])\n        engines();\n    \n    translate([0, 0, -10])\n        landing_gear();\n}",
    "renders": true
  },
  {
    "vehicle": "aircoach",
    "openscad_code": "// Realistic Aircoach (Coach-style Bus) - Medium Complexity\n// 1:120 scale, ~80 mm long, 3D-printable\n\nwall = 1.2;          // safe 0.4 mm nozzle wall thickness\nscale = 1.2;         // overall scale for printing\n\nmodule body() {\n    // main passenger shell\n    difference() {\n        hull() {\n            translate([-20,0,0]) cube([60,22,20], center=true);\n            translate([40,0,10]) cube([20,22,20], center=true);\n        }\n        \n        // side windows left\n        for (i = [-15:10:25])\n            translate([i,11.1,8])\n                cube([6,wall+0.2,6], center=true);\n                \n        // side windows right\n        for (i = [-15:10:25])\n            translate([i,-11.1,8])\n                cube([6,wall+0.2,6], center=true);\n                \n        // windshield\n        translate([42,0,10])\n            rotate([0,-15,0])\n                cube([16,20,12], center=true);\n                \n        // driver side window\n        translate([32,11.1,12])\n            cube([8,wall+0.2,6], center=true);\n    }\n}\n\nmodule chassis() {\n    // lower frame & floor\n    difference() {\n        translate([10,0,-1])\n            cube([80,24,4], center=true);\n        // wheel wells\n        translate([-20,0,0])\n            cylinder(h=4.2, r=6, center=true, $fn=20);\n        translate([0,0,0])\n            cylinder(h=4.2, r=6, center=true, $fn=20);\n        translate([20,0,0])\n            cylinder(h=4.2, r=6, center=true, $fn=20);\n        translate([40,0,0])\n            cylinder(h=4.2, r=6, center=true, $fn=20);\n    }\n}\n\nmodule wheels() {\n    // single wheel module\n    module wheel() {\n        difference() {\n            cylinder(h=6, r=6, center=true, $fn=20);\n            translate([0,0,-3.5])\n                cylinder(h=7, r=2.5, center=true, $fn=16);\n        }\n    }\n    \n    // front axle\n    translate([-20,-12,0]) wheel();\n    translate([-20,12,0]) wheel();\n    \n    // second axle\n    translate([0,-12,0]) wheel();\n    translate([0,12,0]) wheel();\n    \n    // rear axle\n    translate([20,-12,0]) wheel();\n    translate([20,12,0]) wheel();\n    \n    // tag axle\n    translate([40,-12,0]) wheel();\n    translate([40,12,0]) wheel();\n}\n\nmodule mirrors() {\n    // side mirrors\n    translate([35,13,12])\n        rotate([0,0,15])\n            cube([3,1,3], center=true);\n    translate([35,-13,12])\n        rotate([0,0,-15])\n            cube([3,1,3], center=true);\n}\n\nmodule lights() {\n    // headlights\n    translate([48,8,5])\n        cube([2,3,2], center=true);\n    translate([48,-8,5])\n        cube([2,3,2], center=true);\n    \n    // taillights\n    translate([-28,10,5])\n        cube([2,2,4], center=true);\n    translate([-28,-10,5])\n        cube([2,2,4], center=true);\n}\n\nmodule exhaust() {\n    // vertical exhaust pipe\n    difference() {\n        translate([30,12,10])\n            cylinder(h=20, r=1.5, center=false, $fn=12);\n        translate([30,12,30])\n            cylinder(h=2, r=2, center=false, $fn=12);\n    }\n}\n\n// assemble coach\nscale([scale,scale,scale]) {\n    union() {\n        body();\n        chassis();\n        wheels();\n        mirrors();\n        lights();\n        exhaust();\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "skybus",
    "openscad_code": "// Skybus - Realistic Medium Complexity\n// Overall dimensions ~80mm length, 40mm width, 25mm height\n\n// Main parameters\nbus_length = 80;\nbus_width = 35;\nbus_height = 25;\nwall_thickness = 1.5;\n\nmodule skybus() {\n    // Main fuselage\n    difference() {\n        union() {\n            // Main cabin body\n            translate([0, 0, bus_height/2]) {\n                hull() {\n                    cube([bus_length*0.9, bus_width, bus_height], center=true);\n                    translate([bus_length*0.4, 0, bus_height*0.3])\n                        sphere(d=bus_width*1.1);\n                }\n            }\n            \n            // Tail section\n            translate([-bus_length*0.45, 0, bus_height*0.6]) {\n                rotate([0, 15, 0])\n                    cube([bus_length*0.3, bus_width*0.8, bus_height*0.8], center=true);\n            }\n            \n            // Cockpit nose\n            translate([bus_length*0.4, 0, bus_height*0.3]) {\n                scale([1.2, 0.9, 0.7])\n                    sphere(d=bus_width);\n            }\n        }\n        \n        // Windows\n        for(i = [-1:0:1]) {\n            translate([bus_length*0.2 + i*15, bus_width/2 - wall_thickness, bus_height*0.7])\n                cube([8, wall_thickness+0.1, 6], center=true);\n            translate([bus_length*0.2 + i*15, -bus_width/2 + wall_thickness, bus_height*0.7])\n                cube([8, wall_thickness+0.1, 6], center=true);\n        }\n    }\n    \n    // Wings\n    union() {\n        // Left wing\n        translate([-bus_length*0.1, bus_width/2 + 5, bus_height*0.4]) {\n            rotate([0, 0, -5])\n                cube([bus_length*0.4, 15, 2], center=true);\n        }\n        \n        // Right wing\n        translate([-bus_length*0.1, -bus_width/2 - 5, bus_height*0.4]) {\n            rotate([0, 0, 5])\n                cube([bus_length*0.4, 15, 2], center=true);\n        }\n    }\n    \n    // Wing engines\n    module engine() {\n        difference() {\n            union() {\n                cylinder(h=10, d1=8, d2=6);\n                translate([0, 0, 5])\n                    cylinder(h=4, d=10, $fn=8);\n            }\n            translate([0, 0, -1])\n                cylinder(h=12, d=4);\n        }\n    }\n    \n    translate([-bus_length*0.05, bus_width/2 + 12, bus_height*0.3])\n        rotate([90, 0, 0])\n            engine();\n    translate([-bus_length*0.05, -bus_width/2 - 12, bus_height*0.3])\n        rotate([90, 0, 0])\n            engine();\n    \n    // Vertical stabilizer\n    translate([-bus_length*0.4, 0, bus_height*0.9]) {\n        rotate([0, 10, 0])\n            cube([10, 2, 15], center=true);\n    }\n    \n    // Horizontal stabilizers\n    translate([-bus_length*0.4, bus_width/2 + 5, bus_height*0.6]) {\n        rotate([0, -5, 0])\n            cube([15, 8, 2], center=true);\n    }\n    translate([-bus_length*0.4, -bus_width/2 - 5, bus_height*0.6]) {\n        rotate([0, -5, 0])\n            cube([15, 8, 2], center=true);\n    }\n    \n    // Landing gear struts\n    module landing_gear() {\n        union() {\n            cylinder(h=6, d=3);\n            translate([0, 0, -3])\n                sphere(d=4);\n        }\n    }\n    \n    // Front gear\n    translate([bus_length*0.3, 0, 0])\n        landing_gear();\n    \n    // Main gear\n    translate([-bus_length*0.1, bus_width/2 - 5, 0])\n        landing_gear();\n    translate([-bus_length*0.1, -bus_width/2 + 5, 0])\n        landing_gear();\n}\n\n// Generate the model\nskybus();",
    "renders": true
  },
  {
    "vehicle": "jetliner",
    "openscad_code": "// Jetliner OpenSCAD - Realistic Style, Medium Complexity\n// Overall length ~90mm, wingspan ~85mm, height ~25mm\n\n$fn = 32;\nwall = 1.2;        // 3D-printable wall thickness\nscale_factor = 1;  // Adjust overall size\n\nmodule fuselage() {\n    // Main body - cylinders and cones\n    translate([0,0,0])\n    union() {\n        // Cockpit cone\n        translate([-40,0,5])\n        rotate([0,90,0])\n        cylinder(h=20, r1=5, r2=0, center=true);\n        \n        // Main cabin\n        translate([0,0,5])\n        rotate([0,90,0])\n        cylinder(h=70, r1=5, r2=4.5, center=true);\n        \n        // Tail taper\n        translate([40,0,5])\n        rotate([0,90,0])\n        cylinder(h=15, r1=4.5, r2=1.5, center=true);\n    }\n}\n\nmodule wings() {\n    // Main wings\n    module wing_half() {\n        // Wing root\n        translate([0,0,0])\n        cube([35, 3, 10], center=true);\n        \n        // Wing tip\n        translate([30,0,0])\n        cube([15, 2, 5], center=true);\n        \n        // Winglet\n        translate([38,0,6])\n        rotate([0,15,0])\n        cube([4, 1.5, 8], center=true);\n    }\n    \n    // Left wing\n    translate([5,0,5])\n    wing_half();\n    \n    // Right wing\n    translate([5,0,5])\n    mirror([0,1,0])\n    wing_half();\n}\n\nmodule tail() {\n    // Horizontal stabilizer\n    module h_stab_half() {\n        translate([42,0,12])\n        rotate([0,0,5])\n        cube([15, 1.5, 5], center=true);\n    }\n    \n    // Vertical stabilizer\n    translate([45,0,12])\n    rotate([0,90,0])\n    cube([12, 1.5, 8], center=true);\n    \n    // Horizontal stabilizers\n    h_stab_half();\n    mirror([0,1,0]) h_stab_half();\n}\n\nmodule engines() {\n    // Engine nacelles under wings\n    module engine() {\n        // Engine body\n        translate([0,0,-5])\n        rotate([90,0,0])\n        cylinder(h=10, r1=2.5, r2=2, center=true);\n        \n        // Engine intake\n        translate([0,0,-10.5])\n        rotate([90,0,0])\n        cylinder(h=1, r1=3, r2=2.5, center=true);\n        \n        // Engine exhaust\n        translate([0,0,0.5])\n        rotate([90,0,0])\n        cylinder(h=1, r1=2, r2=1.5, center=true);\n    }\n    \n    // Left engine\n    translate([10,12,5])\n    engine();\n    \n    // Right engine\n    translate([10,-12,5])\n    engine();\n}\n\nmodule landing_gear() {\n    // Simplified landing gear - wheels only\n    module wheel() {\n        rotate([0,90,0])\n        cylinder(h=1.5, r=1.5, center=true);\n    }\n    \n    // Nose wheel\n    translate([-20,0,0])\n    wheel();\n    \n    // Main wheels\n    for (x = [10, 25]) {\n        for (y = [-8, 8]) {\n            translate([x,y,0])\n            wheel();\n        }\n    }\n}\n\nmodule windows() {\n    // Cockpit windows\n    translate([-35,0,8])\n    rotate([0,-15,0])\n    cube([8, 0.5, 3], center=true);\n    \n    // Passenger windows - along fuselage\n    for (i = [-25:5:35]) {\n        translate([i, 5.2, 6])\n        sphere(r=0.5);\n    }\n}\n\n// Main assembly\nscale([scale_factor,scale_factor,scale_factor])\nunion() {\n    fuselage();\n    wings();\n    tail();\n    engines();\n    landing_gear();\n    windows();\n}",
    "renders": true
  },
  {
    "vehicle": "widebody",
    "openscad_code": "// Widebody sports-car body shell – realistic, medium-complexity\n// Roughly 1 : 43 scale (≈ 80 mm long) – printable without support\n\n$fn = 36;           // smooth curves\n\n// Overall dimensions\nL = 80;             // length\nW = 34;             // width\nH = 22;             // height (body only, no wheels)\n\n// Wall thickness\nT = 1.2;\n\nmodule body_shell() {\n    difference() {\n        // Main monocoque\n        hull() {\n            translate([-L/2+5, 0, 0])  \n                cube([L-10, W, H], center = true);\n            translate([L/2-15, 0, 2])\n                cube([30, W*0.8, H*0.8], center = true);\n        }\n\n        // Cockpit opening\n        translate([0, 0, H/2-1])\n            cube([L*0.4, W*0.55, H*0.7], center = true);\n\n        // Windscreen cut\n        translate([L*0.15, 0, H*0.6])\n            rotate([0, -30, 0])\n                cube([L*0.2, W*0.5, H*0.5], center = true);\n\n        // Rear window cut\n        translate([-L*0.25, 0, H*0.55])\n            rotate([0, 25, 0])\n                cube([L*0.18, W*0.45, H*0.45], center = true);\n\n        // Hollow inside\n        translate([0, 0, -T/2])\n            scale([0.85, 0.85, 0.85])\n                children();\n    }\n}\n\n// Front splitter\nmodule splitter() {\n    translate([L/2-8, 0, -H/2-1])\n        cube([4, W*1.05, 2], center = true);\n}\n\n// Side skirts\nmodule skirts() {\n    for (y = [W/2+T/2, -W/2-T/2])\n        translate([0, y, -H/4])\n            cube([L*0.7, T*1.5, H/2], center = true);\n}\n\n// Rear diffuser\nmodule diffuser() {\n    translate([-L/2+2, 0, -H/2-2])\n        cube([8, W*0.9, 3], center = true);\n}\n\n// Hood vent slats\nmodule hood_vents() {\n    for (x = [L*0.30 : 3 : L*0.45])\n        translate([x, 0, H/2])\n            cube([1.5, W*0.7, 2], center = true);\n}\n\n// Mirrors\nmodule mirrors() {\n    for (y = [W/2-2, -W/2+2]) {\n        translate([L*0.15, y, H*0.4])\n            rotate([0, 30*sign(y), 0])\n                cube([4, 2, 1.5], center = true);\n    }\n}\n\n// Rear wing\nmodule rear_wing() {\n    translate([-L/2+5, 0, H*0.7]) {\n        // Wing blade\n        cube([L*0.2, W*0.9, 2], center = true);\n        // Uprights\n        for (y = [W/2-4, -W/2+4])\n            cube([2, 2, 8], center = true);\n    }\n}\n\n// Final assembly\nunion() {\n    body_shell() body_shell();   // second call hollows the first\n    splitter();\n    skirts();\n    diffuser();\n    hood_vents();\n    mirrors();\n    rear_wing();\n}",
    "renders": true
  },
  {
    "vehicle": "narrowbody",
    "openscad_code": "// Narrow-body commercial jet – realistic medium-detail 3D-printable model\n// Total length ≈ 95 mm, wingspan ≈ 85 mm, height ≈ 25 mm\n// Designed for 0.4 mm nozzle / 0.2 mm layer printing, 1 mm walls\n\n$fn = 36;               // Smooth curves\n\n// Main dimensions\nfuse_len = 95;\nfuse_d   = 10;\nwing_span = 85;\nwing_root = 30;\nwing_tip  = 12;\ntail_span = 30;\nhtail_span = 25;\n\n// Wall thickness\nwall = 1;\n\nmodule fuselage() {\n    // Forward cylindrical section\n    translate([0,0,0])\n        cylinder(h=fuse_len*0.65, d=fuse_d, center=false);\n\n    // Tapered rear section (cone)\n    translate([fuse_len*0.65,0,0])\n        cylinder(h=fuse_len*0.35, d1=fuse_d, d2=fuse_d*0.4, center=false);\n\n    // Nose cap (hemisphere)\n    translate([-fuse_len*0.05,0,0])\n        rotate([0,90,0])\n        sphere(d=fuse_d);\n\n    // Cockpit windows (subtracted)\n    for (a=[-30,0,30])\n        translate([5, fuse_d/2*cos(a), fuse_d/2*sin(a)])\n            rotate([0,90-a,0])\n            scale([1.2,1,1])\n            sphere(d=1.2);\n}\n\nmodule wing() {\n    // Root airfoil block\n    difference() {\n        translate([-5, -wing_root/2, -2])\n            cube([20, wing_root, 4]);\n        // Simple hollow\n        translate([-4, -wing_root/2+wall, -1])\n            cube([18, wing_root-2*wall, 2]);\n    }\n\n    // Mid-section taper\n    hull() {\n        translate([15, -wing_root/2, -1.5])\n            cube([0.1, wing_root, 3]);\n        translate([fuse_len*0.45, -wing_span/2, -1])\n            cube([0.1, wing_tip, 2]);\n    }\n\n    // Wing tip\n    translate([fuse_len*0.45, -wing_span/2-wing_tip/2, -1])\n        cube([2, wing_tip, 2]);\n\n    // Mirror for right wing\n    mirror([0,1,0]) {\n        translate([-5, -wing_root/2, -2])\n            cube([20, wing_root, 4]);\n        hull() {\n            translate([15, -wing_root/2, -1.5])\n                cube([0.1, wing_root, 3]);\n            translate([fuse_len*0.45, -wing_span/2, -1])\n                cube([0.1, wing_tip, 2]);\n        }\n        translate([fuse_len*0.45, -wing_span/2-wing_tip/2, -1])\n            cube([2, wing_tip, 2]);\n    }\n}\n\nmodule tail_fin() {\n    // Vertical stabilizer\n    linear_extrude(height=12, twist=10, scale=[0.2,1])\n        translate([fuse_len*0.8,0,0])\n            square([5, tail_span], center=true);\n\n    // Horizontal stabilizer\n    difference() {\n        hull() {\n            translate([fuse_len*0.85, -htail_span/2, -2])\n                cube([0.1, htail_span, 4]);\n            translate([fuse_len*0.85, -htail_span/2, -2])\n                cube([0.1, htail_span, 4]);\n        }\n        // Hollow\n        translate([fuse_len*0.85, -htail_span/2+wall, -1])\n            cube([0.1, htail_span-2*wall, 2]);\n    }\n}\n\nmodule engines() {\n    // Under-wing engines (simple nacelles)\n    for (x=[25, 35]) {\n        translate([x, -wing_span/2*0.7, -6])\n            rotate([90,0,0])\n            cylinder(h=8, d1=5, d2=4);\n\n        translate([x, wing_span/2*0.7, -6])\n            rotate([90,0,0])\n            cylinder(h=8, d1=5, d2=4);\n    }\n}\n\n// Assemble the aircraft\nunion() {\n    fuselage();\n    wing();\n    tail_fin();\n    engines();\n}",
    "renders": true
  },
  {
    "vehicle": "twinjet",
    "openscad_code": "// Realistic Twin-Jet Airliner – OpenSCAD (medium complexity, 3D-printable)\n// Overall length ~95 mm, wingspan ~85 mm, printed upright with minimal supports\n\n$fa = 2;\n$fs = 0.5;\n\n// Wall thickness for printability\nwall = 1.2;\n\nmodule main() {\n    // Central fuselage\n    union() {\n        // Main tube\n        translate([0,0,0])\n            rotate([0,90,0])\n                cylinder(h = 70, r1 = 5, r2 = 5, center=true);\n\n        // Nose cone\n        translate([35,0,0])\n            rotate([0,90,0])\n                cylinder(h = 20, r1 = 5, r2 = 0.1, center=false);\n\n        // Tail taper\n        translate([-35,0,0])\n            rotate([0,90,0])\n                cylinder(h = 15, r1 = 5, r2 = 2.5, center=false);\n\n        // Vertical stabilizer\n        translate([-42,0,5])\n            rotate([0,0,0])\n                cube([12, wall, 18], center=true);\n\n        // Horizontal stabilizers mirrored\n        for (s = [-1, 1])\n            mirror([0,s,0])\n                translate([-42,0,2])\n                    rotate([0,0,30*s])\n                        cube([15, wall, 8], center=true);\n    }\n\n    // Wings\n    module wing() {\n        // Main wing section\n        difference() {\n            translate([0,0,-5])\n                cube([30, 40, wall], center=true);\n            // Trailing edge taper cut\n            translate([15,0,-6])\n                rotate([0,45,0])\n                    cube([30, 50, 10], center=true);\n        }\n\n        // Winglet\n        translate([0,22,-2])\n            rotate([0,0,90])\n                cube([10, wall, 6], center=true);\n    }\n\n    // Port and starboard wings\n    for (side = [-1, 1])\n        mirror([0,side,0])\n            wing();\n\n    // Engine nacelles (twin jets under wings)\n    module engine() {\n        // Nacelle body\n        difference() {\n            translate([5,0,-12])\n                rotate([90,0,0])\n                    cylinder(h = 18, r1 = 4.5, r2 = 3, center=false);\n            // Intake hollow\n            translate([5,0,-12.5])\n                rotate([90,0,0])\n                    cylinder(h = 5, r1 = 3.5, r2 = 3.5, center=false);\n            // Exhaust hollow\n            translate([5,0,5])\n                rotate([90,0,0])\n                    cylinder(h = 5, r1 = 2.5, r2 = 2.5, center=false);\n        }\n\n        // Pylon\n        translate([5,0,-6])\n            cube([12, wall, 6], center=true);\n    }\n\n    // Mount engines under wings\n    for (side = [-1, 1])\n        translate([0, side*18, 0])\n            engine();\n}\n\nmain();",
    "renders": true
  },
  {
    "vehicle": "trijet",
    "openscad_code": "// Trijet Airliner - Realistic Style, Medium Complexity\n// Designed for 3D printing (no overhangs >45°, 1.2mm walls)\n\n// Main dimensions\nfuselage_length = 90;\nfuselage_diameter = 12;\nwing_span = 75;\nwing_root_chord = 20;\nwing_tip_chord = 10;\ntail_height = 18;\n\n// Wing sweep angle (degrees)\nwing_sweep = 25;\n\n// Engine dimensions\nengine_diameter = 6;\nengine_length = 15;\nnacelle_length = 18;\n\n// Fuselage\nmodule fuselage() {\n    // Forward section - nose cone\n    difference() {\n        cylinder(h=20, r1=fuselage_diameter/2, r2=fuselage_diameter/2*0.6, $fn=32);\n        // Cockpit windows\n        translate([0, 0, 16])\n            cube([4, 2, 3], center=true);\n    }\n    \n    // Main section\n    translate([0, 0, 20])\n        cylinder(h=50, r=fuselage_diameter/2, $fn=32);\n    \n    // Tail section taper\n    translate([0, 0, 70])\n        cylinder(h=20, r1=fuselage_diameter/2, r2=fuselage_diameter/2*0.7, $fn=32);\n}\n\n// Wing\nmodule wing() {\n    // Root\n    translate([-wing_root_chord/2, 0, fuselage_diameter/2])\n        rotate([0, -90, 0])\n            cube([wing_root_chord, 2, wing_span/2]);\n    \n    // Tip with sweep\n    translate([wing_span/2*sin(wing_sweep)-wing_tip_chord/2, 0, fuselage_diameter/2+wing_span/2*cos(wing_sweep)])\n        rotate([0, -90, -wing_sweep])\n            cube([wing_tip_chord, 2, wing_span/2]);\n    \n    // Leading edge\n    hull() {\n        translate([-wing_root_chord/2, 0, fuselage_diameter/2])\n            sphere(r=1, $fn=16);\n        translate([wing_span/2*sin(wing_sweep)-wing_tip_chord/2, 0, fuselage_diameter/2+wing_span/2*cos(wing_sweep)])\n            sphere(r=1, $fn=16);\n    }\n    \n    // Trailing edge\n    hull() {\n        translate([wing_root_chord/2, 0, fuselage_diameter/2])\n            sphere(r=1, $fn=16);\n        translate([wing_span/2*sin(wing_sweep)+wing_tip_chord/2, 0, fuselage_diameter/2+wing_span/2*cos(wing_sweep)])\n            sphere(r=1, $fn=16);\n    }\n}\n\n// Horizontal stabilizer\nmodule h_stab() {\n    for (side = [-1, 1]) {\n        mirror([0, side, 0]) {\n            translate([0, 0, -tail_height])\n                rotate([0, 0, 5])\n                    cube([25, 2, 8], center=true);\n        }\n    }\n}\n\n// Vertical stabilizer\nmodule v_stab() {\n    translate([0, 0, -tail_height])\n        rotate([0, 90, 0])\n            difference() {\n                cube([18, 2, 12], center=true);\n                // Rudder cutout\n                translate([5, 0, 0])\n                    cube([10, 3, 10], center=true);\n            }\n}\n\n// Engine nacelle\nmodule engine_nacelle(x_pos, y_pos, z_pos) {\n    translate([x_pos, y_pos, z_pos]) {\n        // Pylon\n        translate([-2, 0, 0])\n            cube([4, 2, 6]);\n        \n        // Nacelle\n        rotate([0, 90, 0])\n            difference() {\n                cylinder(h=nacelle_length, r=engine_diameter/2, $fn=32);\n                // Intake\n                translate([0, 0, -1])\n                    cylinder(h=3, r1=engine_diameter/2*0.8, r2=engine_diameter/2, $fn=32);\n                // Exhaust\n                translate([0, 0, nacelle_length+1])\n                    cylinder(h=3, r1=engine_diameter/2*0.7, r2=engine_diameter/2*0.5, $fn=32);\n            }\n    }\n}\n\n// Landing gear - simplified for printing\nmodule landing_gear() {\n    // Main gear\n    for (side = [-1, 1]) {\n        translate([20, side*8, -fuselage_diameter/2-2])\n            rotate([90, 0, 0])\n                cylinder(h=4, r=1.5, $fn=16);\n    }\n    \n    // Nose gear\n    translate([-25, 0, -fuselage_diameter/2-2])\n        rotate([90, 0, 0])\n            cylinder(h=3, r=1.2, $fn=16);\n}\n\n// Assembly\nunion() {\n    // Main components\n    fuselage();\n    \n    translate([0, 0, 0])\n        wing();\n    \n    translate([0, 0, 0])\n        mirror([0, 1, 0])\n            wing();\n    \n    translate([0, 0, 85])\n        h_stab();\n    \n    translate([0, 0, 85])\n        v_stab();\n    \n    // Engines - one under fuselage, two on wings\n    engine_nacelle(0, 0, -fuselage_diameter/2-5);\n    engine_nacelle(25, wing_span/2*cos(wing_sweep)-5, fuselage_diameter/2+wing_span/2*sin(wing_sweep));\n    engine_nacelle(25, -wing_span/2*cos(wing_sweep)+5, fuselage_diameter/2+wing_span/2*sin(wing_sweep));\n    \n    // Landing gear\n    landing_gear();\n}",
    "renders": true
  },
  {
    "vehicle": "quadjet",
    "openscad_code": "// Quadjet airliner – medium complexity, 3D-printable design\n// All dimensions in mm. Max span ≈ 90 mm.\n\n$fn=36;\n\n// Overall scale factor – tweak for printer bed\nscale_factor = 0.8;\n\n// Wall and skin thickness\nwall = 1.5;\n\n// Cockpit section\nmodule cockpit() {\n    translate([0,0,2])\n    hull() {\n        sphere(d=10);\n        translate([0,0,3]) sphere(d=7);\n    }\n}\n\n// Forward fuselage\nmodule fuselage() {\n    union() {\n        // Main tube\n        cylinder(h=35, d1=9, d2=8);\n        // Tail cone\n        translate([0,0,35])\n            cylinder(h=20, d1=8, d2=3);\n    }\n}\n\n// Wings\nmodule wing() {\n    // Root airfoil shape\n    linear_extrude(height=wall)\n    polygon(points=[[0,0], [25,5], [30,2], [30,-2], [25,-5], [0,0]]);\n}\n\nmodule wings() {\n    union() {\n        // port wing\n        translate([-5,0,5])\n            rotate([0,0,-2])\n            wing();\n        // starboard wing\n        mirror([1,0,0])\n            translate([-5,0,5])\n            rotate([0,0,-2])\n            wing();\n    }\n}\n\n// Engine nacelle\nmodule engine_nacelle() {\n    union() {\n        // Nacelle body\n        cylinder(h=12, d1=7, d2=5);\n        // Intake lip\n        translate([0,0,-1])\n            cylinder(h=2, d=9);\n    }\n}\n\n// Mount one engine under wing\nmodule engine_mount(x,z) {\n    translate([x,0,z])\n    rotate([90,0,0])\n        difference() {\n            engine_nacelle();\n            // Hollow interior\n            translate([0,0,-1])\n                cylinder(h=14, d=5);\n        }\n}\n\n// All four engines\nmodule engines() {\n    for (side=[-1,1])\n    for (pos=[15, 25])\n        engine_mount(side*pos, 3);\n}\n\n// Horizontal stabilizer\nmodule h_stab() {\n    difference() {\n        // Solid stab\n        translate([0,0,52])\n            rotate([0,15,0])\n            cube([40,wall,8], center=true);\n        // Cutout for fuselage\n        translate([0,0,52])\n            rotate([0,15,0])\n            cube([10,wall+1,8], center=true);\n    }\n}\n\n// Vertical stabilizer\nmodule v_stab() {\n    translate([0,0,57])\n        rotate([0,0,0])\n        linear_extrude(height=wall)\n        polygon(points=[[0,0], [0,8], [-12,8], [-15,0], [0,0]]);\n}\n\n// Landing-gear nacelle fairings (simple pods)\nmodule gear_pod(x) {\n    translate([x,0,1])\n        scale([0.6,0.6,0.6])\n            cylinder(h=5, d=4);\n}\n\nmodule landing_gear() {\n    for (x=[-8,8])\n        gear_pod(x);\n}\n\n// Final assembly\nunion() {\n    scale([scale_factor,scale_factor,scale_factor]) {\n        union() {\n            color(\"white\") {\n                fuselage();\n                cockpit();\n                wings();\n                h_stab();\n                v_stab();\n                engines();\n            }\n            color(\"lightgray\")\n                landing_gear();\n        }\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "hyperjet",
    "openscad_code": "// Hyperjet - Medium Complexity Realistic Style\n// Overall dimensions: ~80mm long, wingspan ~60mm\n\n$fn = 36; // Smooth curves\n\nmodule fuselage() {\n    // Main body\n    hull() {\n        // Nose cone\n        translate([0, 0, 20])\n            scale([1, 1, 2])\n                sphere(5);\n        \n        // Main body\n        translate([0, 0, 0])\n            scale([1, 0.8, 1])\n                cylinder(h = 40, r1 = 8, r2 = 6);\n                \n        // Rear taper\n        translate([0, 0, -25])\n            scale([1, 0.7, 1])\n                cylinder(h = 15, r1 = 6, r2 = 4);\n    }\n    \n    // Cockpit\n    translate([0, 0, 15])\n        scale([1, 1.2, 0.6])\n            sphere(5);\n            \n    // Cockpit window\n    difference() {\n        translate([0, 4.5, 15])\n            rotate([90, 0, 0])\n                cylinder(h = 2, r = 4);\n        translate([0, 5.5, 15])\n            rotate([90, 0, 0])\n                cylinder(h = 3, r = 3.5);\n    }\n}\n\nmodule engine(n = 0) {\n    // Engine housing\n    translate([0, 0, n * 8])\n        cylinder(h = 12, r = 4);\n    \n    // Engine nozzle\n    translate([0, 0, n * 8 - 7])\n        cylinder(h = 5, r1 = 4, r2 = 2.5);\n    \n    // Engine intake\n    translate([0, 0, n * 8 + 7])\n        cylinder(h = 3, r1 = 5, r2 = 4);\n    \n    // Intake cone\n    translate([0, 0, n * 8 + 9])\n        cone(h = 2, r1 = 3, r2 = 0);\n}\n\nmodule wing() {\n    // Main wing\n    difference() {\n        hull() {\n            translate([0, 0, 0])\n                cube([30, 2, 8], center = true);\n            translate([20, 0, 0])\n                scale([1, 0.5, 0.5])\n                    cube([10, 2, 8], center = true);\n        }\n        \n        // Wing root fillet\n        translate([-15, 0, 0])\n            cube([30, 5, 10], center = true);\n    }\n    \n    // Wing tip\n    translate([25, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h = 2, r = 4);\n}\n\nmodule tail_fin() {\n    // Vertical stabilizer\n    hull() {\n        translate([0, 0, 8])\n            cube([2, 1, 15], center = true);\n        translate([0, 0, 20])\n            scale([0.3, 0.3, 1])\n                cube([2, 1, 8], center = true);\n    }\n    \n    // Horizontal stabilizers\n    for(side = [-1, 1]) {\n        translate([0, side * 15, -20])\n            rotate([0, 0, 90])\n                scale([0.7, 0.7, 1])\n                    wing();\n    }\n}\n\nmodule landing_gear() {\n    // Main gear\n    for(side = [-1, 1]) {\n        translate([side * 12, 0, -30])\n            rotate([0, 90, 0])\n                cylinder(h = 8, r = 1);\n                \n        // Wheels\n        translate([side * 12, 0, -34])\n            rotate([90, 0, 0])\n                cylinder(h = 3, r = 2, center = true);\n    }\n    \n    // Nose gear\n    translate([0, 0, -25])\n        rotate([0, 90, 0])\n            cylinder(h = 10, r = 1);\n            \n    translate([0, 0, -30])\n        rotate([90, 0, 0])\n            cylinder(h = 3, r = 2, center = true);\n}\n\nmodule hyperjet() {\n    // Assemble the aircraft\n    union() {\n        // Main fuselage\n        fuselage();\n        \n        // Wings\n        for(side = [-1, 1]) {\n            translate([0, side * 10, 0])\n                rotate([0, 0, side * 5])\n                    wing();\n        }\n        \n        // Tail assembly\n        translate([0, 0, -25])\n            tail_fin();\n        \n        // Engines - two under wings\n        for(side = [-1, 1]) {\n            translate([side * 15, 0, -8])\n                rotate([90, 0, 0])\n                    engine();\n        }\n        \n        // Landing gear\n        landing_gear();\n    }\n    \n    // Remove material for hollow fuselage\n    difference() {\n        children();\n        translate([0, 0, 0])\n            scale([0.8, 0.7, 0.9])\n                cylinder(h = 50, r1 = 7, r2 = 5);\n    }\n}\n\n// Create the hyperjet\ntranslate([0, 0, 30])\n    hyperjet();",
    "renders": true
  },
  {
    "vehicle": "airtaxi",
    "openscad_code": "// Airtaxi.scad – OpenSCAD model of a realistic medium-complexity airtaxi\n// Designed for 3D-printing (no steep overhangs, 1.2 mm wall thickness)\n\n$fa = 2;  $fs = 0.5;\n\n// Overall scaling factor – 1 => ~65 mm long\nscale_factor = 1;\n\nmodule scaled(x=1,y=1,z=1) scale([x*scale_factor,y*scale_factor,z*scale_factor]);\n\n// Main body shell ----------------------------------------------------------\nmodule body_shell()\n{\n    difference()\n    {\n        // continuous outer skin\n        hull()\n        {\n            translate([-23,0,-2]) cube([46,28,10], center=true);   // cabin base\n            translate([-22,0, 5]) cube([44,26, 8], center=true);   // cabin roof\n        }\n        // windows\n        translate([-15,0,3]) cube([30,26.6,4], center=true);\n    }\n}\n\n// Floor plate (gives 1.2 mm wall all round)\nmodule floor_plate()\n{\n    translate([0,0,-6.5])\n        cube([45,26,1.2], center=true);\n}\n\n// Tail boom\nmodule tail_boom()\n{\n    translate([-23,0,-2])\n        cube([18,5,5], center=true);\n}\n\n// Horizontal stabilizer\nmodule h_stabilizer()\n{\n    translate([-32,0,3])\n        rotate([0,20,0])\n            cube([12,18,1.2], center=true);\n}\n\n// Vertical stabilizer\nmodule v_stabilizer()\n{\n    translate([-32,0,8])\n        rotate([0,0,20])\n            cube([12,1.2,8], center=true);\n}\n\n// Simple duct fan ----------------------------------------------------------\nmodule duct(d=12,h=6)\n{\n    difference()\n    {\n        cylinder(h=h, d=d+2.4, center=true);  // outer wall\n        cylinder(h=h+0.1, d=d, center=true);  // inner duct\n    }\n}\n\n// Fan mount arm -----------------------------------------------------------\nmodule fan_arm(len=12)\n{\n    rotate([90,0,0])\n        cylinder(h=len, d=2.4, center=false);\n}\n\n// Front left duct + arm\nmodule front_left_fan()\n{\n    translate([-10, 11, -3])\n    {\n        union()\n        {\n            duct();\n            fan_arm();\n        }\n    }\n}\n\n// Front right duct + arm\nmodule front_right_fan()\n{\n    mirror([0,1,0]) front_left_fan();\n}\n\n// Rear left duct + arm (angled slightly outwards)\nmodule rear_left_fan()\n{\n    translate([10, 14, -4])\n    {\n        rotate([0,5,0])\n        union()\n        {\n            duct();\n            rotate([0,5,0]) fan_arm();\n        }\n    }\n}\n\n// Rear right duct + arm\nmodule rear_right_fan()\n{\n    mirror([0,1,0]) rear_left_fan();\n}\n\n// Skid-style landing gear --------------------------------------------------\nmodule skid()\n{\n    // left skid\n    translate([0, 12, -7.2])\n        rotate([0,15,0])\n            cube([48,1.2,1.2], center=true);\n    // right skid\n    mirror([0,1,0]) translate([0,0,0]) children();\n}\n\n// Assembly -----------------------------------------------------------------\nmodule airtaxi()\n{\n    scaled()\n    {\n        union()\n        {\n            body_shell();\n            floor_plate();\n            tail_boom();\n            h_stabilizer();\n            v_stabilizer();\n            front_left_fan();\n            front_right_fan();\n            rear_left_fan();\n            rear_right_fan();\n            skid();\n            skid();   // mirrored automatically\n        }\n    }\n}\n\n// Render\nairtaxi();",
    "renders": true
  },
  {
    "vehicle": "airlimo",
    "openscad_code": "// Airlimo - sleek passenger VTOL aircraft\n// Mid-complexity 3D-printable model, ~80 mm long\n\n// Configuration\nwing_span = 70;\nfuselage_len = 80;\nbody_width = 18;\nbody_height = 12;\nmotor_d = 12;\nwall = 1.5;\n\nmodule main() {\n    // Fuselage shell\n    difference() {\n        union() {\n            // Central pod\n            hull() {\n                translate([-5,0,0]) sphere(d=body_height,$fn=20);\n                translate([fuselage_len-20,0,0]) sphere(d=body_height*0.8,$fn=20);\n            }\n            // Tapered tail\n            translate([fuselage_len-20,0,-1]) \n                scale([1,0.7,0.6]) sphere(d=body_height*0.9,$fn=20);\n        }\n        // Cockpit cutout\n        translate([8,0,body_height/2]) \n            rotate([0,90,0]) cylinder(h=20,d1=7,d2=9,$fn=20);\n    }\n\n    // Wings\n    module wing_root(side) {\n        mirror([side,0,0]) {\n            difference() {\n                translate([-body_width/2,0,0]) \n                    cube([wing_span/2,body_width,body_height/2]);\n                translate([-wing_span/2-2,0,-1]) \n                    cube([wing_span/2+2,body_width+2,body_height/2+2]);\n            }\n        }\n    }\n    wing_root(1);\n    wing_root(-1);\n\n    // Wingtip rotors\n    module rotor(arm) {\n        translate([arm*(wing_span/2-2),0,body_height/2+3]) {\n            cylinder(h=wall,d=motor_d,$fn=32);\n            translate([0,0,wall]) \n                cylinder(h=2,d=motor_d*1.6,d1=motor_d*1.8,$fn=3);\n        }\n    }\n    for(side=[-1,1]) {\n        rotor(side);\n        rotor(side);\n    }\n\n    // Horizontal stabilizer\n    translate([fuselage_len-15,0,body_height/2-3]) {\n        rotate([0,-15,0]) {\n            scale([1,0.25,0.15]) \n                cube([20,body_width*2.5,body_height],center=true);\n        }\n    }\n\n    // Landing skids\n    module skid(side) {\n        mirror([side,0,0]) {\n            translate([0,body_width/2+2,body_height/2-7]) {\n                rotate([90,0,0]) {\n                    difference() {\n                        cylinder(h=8,d=2,$fn=12);\n                        translate([0,0,-1]) cylinder(h=10,d=1,$fn=12);\n                    }\n                }\n            }\n        }\n    }\n    skid(1); skid(-1);\n}\n\nmain();",
    "renders": true
  },
  {
    "vehicle": "skyhare",
    "openscad_code": "// Skyhare – medium-complexity realistic style, 3D-printable\n// Overall footprint ~60 × 30 × 45 mm\n\n$fn = 36; // smooth curves\n\nmodule skyhare() {\n\n    // --- Body --------------------------------------------------------------\n    difference() {\n        union() {\n            // Torso (elongated sphere)\n            scale([1.2, 0.9, 1])\n                sphere(d = 25, center = true);\n            // Belly bulge\n            translate([0, 0, -5])\n                scale([1, 0.6, 0.4])\n                    sphere(d = 20);\n        }\n        // Remove bottom to create flat base\n        translate([0, 0, -12])\n            cube([50, 50, 25], center = true);\n    }\n\n    // --- Head --------------------------------------------------------------\n    translate([12, 0, 12])\n        rotate([0, -10, 0])\n        difference() {\n            union() {\n                // Main head sphere\n                sphere(d = 18);\n                // Snout\n                translate([8, 0, -2])\n                    scale([1.2, 0.8, 0.7])\n                        sphere(d = 10);\n            }\n            // Eye sockets\n            translate([7, 4.5, 2])\n                sphere(d = 4);\n            translate([7, -4.5, 2])\n                sphere(d = 4);\n        }\n\n    // --- Ears --------------------------------------------------------------\n    module ear(left = true) {\n        mirror([left ? 0 : 1, 0, 0])\n        translate([11, left ? 4 : -4, 18])\n            rotate([10, left ? -30 : 30, 0])\n            linear_extrude(height = 0.1, center = true)\n                polygon(points = [[0, 0], [0, 2], [12, 8], [10, 0]]);\n    }\n    ear(true); ear(false);\n\n    // --- Front legs --------------------------------------------------------\n    module frontleg(left = true) {\n        translate([5, left ? 3 : -3, -8])\n            rotate([10, left ? 5 : -5, 0])\n            union() {\n                // Upper leg\n                cylinder(h = 12, d1 = 6, d2 = 4, center = false);\n                // Lower leg\n                translate([0, 0, -11])\n                    cylinder(h = 10, d1 = 4, d2 = 3, center = false);\n                // Paw\n                translate([0, 0, -20])\n                    sphere(d = 5);\n            }\n    }\n    frontleg(true); frontleg(false);\n\n    // --- Hind legs ---------------------------------------------------------\n    module hindleg(left = true) {\n        translate([-8, left ? 4 : -4, -7])\n            rotate([0, 0, left ? 20 : -20])\n            union() {\n                // Thigh\n                cylinder(h = 14, d1 = 8, d2 = 5, center = false);\n                // Shin\n                translate([0, 0, -13])\n                    rotate([25, 0, 0])\n                    cylinder(h = 12, d1 = 5, d2 = 4, center = false);\n                // Paw\n                translate([3, 0, -23])\n                    sphere(d = 6);\n            }\n    }\n    hindleg(true); hindleg(false);\n\n    // --- Tail --------------------------------------------------------------\n    translate([-12, 0, 3])\n        rotate([0, -30, 0])\n        cylinder(h = 14, d1 = 2, d2 = 6);\n\n    // --- Wings -------------------------------------------------------------\n    module wing(left = true) {\n        mirror([left ? 0 : 1, 0, 0])\n        translate([-2, left ? 6 : -6, 8])\n            rotate([0, 60, left ? 20 : -20])\n            difference() {\n                // Main wing panel\n                scale([1, 0.1, 1.4])\n                    cube([20, 1, 25], center = true);\n                // Feather cuts\n                for (i = [0:4])\n                    translate([i*3-8, 0, 8-i*2])\n                        rotate([0, 0, 15])\n                            cube([1.5, 2, 6], center = true);\n            }\n    }\n    wing(true); wing(false);\n}\n\nskyhare();",
    "renders": true
  },
  {
    "vehicle": "airpod",
    "openscad_code": "// AirPod Generation 2 / 3 style model\n// Medium-complexity, printable, ~56 mm long\n\n$fn = 36;          // smooth curves\nbody_len = 56;     // total length\nstem_len = 35;     // stem portion\nhead_h   = 22;     // head height\nwall     = 1.2;    // printable wall thickness\n\nmodule rounded_cube(s, r) {\n    // helper for chamfered box\n    hull() {\n        translate([r,r,r]) sphere(r);\n        translate([r,r,s.z-r]) sphere(r);\n        translate([r,s.y-r,r]) sphere(r);\n        translate([r,s.y-r,s.z-r]) sphere(r);\n        translate([s.x-r,r,r]) sphere(r);\n        translate([s.x-r,r,s.z-r]) sphere(r);\n        translate([s.x-r,s.y-r,r]) sphere(r);\n        translate([s.x-r,s.y-r,s.z-r]) sphere(r);\n    }\n}\n\n// Main shell\nmodule airpod_body() {\n    difference() {\n        // outer shell\n        hull() {\n            // head bulb\n            translate([0,0,head_h/2])\n                scale([1, 0.9, 1]) sphere(head_h/2);\n            // stem\n            translate([0,0,-stem_len/2])\n                scale([0.35, 0.35, 1])  cylinder(h=stem_len, d=stem_len/3);\n        }\n        \n        // hollow inside\n        offset(-wall) {\n            hull() {\n                translate([0,0,head_h/2-1])\n                    scale([1, 0.9, 1]) sphere(head_h/2-wall);\n                translate([0,0,-stem_len/2])\n                    scale([0.35, 0.35, 1])\n                        cylinder(h=stem_len-wall, d=stem_len/3-wall);\n            }\n        }\n    }\n}\n\n// Speaker grill mesh\nmodule grill() {\n    // flat grill plate\n    translate([0,0,head_h*0.3])\n        rotate([90,0,0])\n            linear_extrude(height=0.4)\n                for(x=[-3:1:3])\n                    translate([x*1.8,0,0])\n                        square([0.8,4.5],center=true);\n}\n\n// IR / vent holes\nmodule holes() {\n    // side vent\n    translate([head_h/2-4, 0, 0])\n        rotate([0,90,0])\n            cylinder(h=wall*2, d=1.5, $fn=8);\n    \n    // front IR window\n    translate([head_h/2-4, 0, head_h/2-2])\n        rotate([0,0,0])\n            cylinder(h=0.8, d=2.2, $fn=8);\n}\n\n// Metal charging ring\nmodule ring() {\n    translate([0,0,-stem_len/2+4])\n        difference() {\n            cylinder(h=3.5, d=stem_len/3+1.4, $fn=36);\n            cylinder(h=3.8, d=stem_len/3+0.2, $fn=36);\n        }\n}\n\n// Put it together\nunion() {\n    airpod_body();\n    grill();\n    color(\"silver\") ring();\n    holes();\n}",
    "renders": true
  },
  {
    "vehicle": "skypod",
    "openscad_code": "// SkyPod – medium-complexity, realistic style, 3D-printable\n// Overall footprint ≈ 60×60×55 mm\n\n$fn = 48;      // smooth curves\n\n// Wall thickness for 3D-printing\nwall = 1.2;\n\n// Main module\nmodule skypod() {\n\n    // Central pressure vessel\n    difference() {\n        sphere(d = 50);                 // outer shell\n        sphere(d = 50 - 2*wall);        // hollow inside\n    }\n\n    // Forward viewport (bubble window)\n    translate([0, 22, 0])\n        rotate([90,0,0])\n        difference() {\n            cylinder(h = 12, d1 = 26, d2 = 28);\n            cylinder(h = 12+1, d1 = 26-2*wall, d2 = 28-2*wall);\n        }\n\n    // Hatch (side door)\n    translate([-20, 0, 0])\n        rotate([0,0,90])\n        difference() {\n            cylinder(h = 20, d = 18, center = true);\n            cylinder(h = 20+1, d = 18-2*wall, center = true);\n        }\n\n    // Four RCS thruster pods\n    for(a = [0:90:270])\n        rotate([0,0,a])\n        translate([0, 30, 0])\n            rcs_pod();\n\n    // Antenna mast on top\n    translate([0,0,26])\n        cylinder(h = 15, d = 4);\n    translate([0,0,26+15])\n        sphere(d = 5);\n\n    // Landing skids (printable without support)\n    for(x = [-20, 20])\n        translate([x, 0, -25])\n            skid();\n}\n\n// RCS pod module\nmodule rcs_pod() {\n    difference() {\n        sphere(d = 10);                 // outer\n        sphere(d = 10 - 2*wall);        // inner\n    }\n    // Thruster nozzle\n    translate([0, 6, 0])\n        rotate([90,0,0])\n        cylinder(h = 8, d1 = 6, d2 = 4);\n}\n\n// Landing skid module\nmodule skid() {\n    hull() {\n        translate([0, -12, 0]) sphere(d = 4);\n        translate([0, 12, 0]) sphere(d = 4);\n    }\n}\n\nskypod();",
    "renders": true
  },
  {
    "vehicle": "aerocab",
    "openscad_code": "// Aerocab - medium complexity realistic style\n// Overall dimensions: 80mm long, 35mm wide, 25mm tall\n\nmodule main_hull() {\n    // Central passenger pod\n    difference() {\n        // Main fuselage\n        hull() {\n            cube([60, 25, 12], center=true);\n            translate([0, 0, 6]) sphere(d=25, $fn=32);\n        }\n        \n        // Cockpit window cutout\n        translate([20, 0, 4]) cube([25, 18, 8], center=true);\n    }\n}\n\nmodule wings() {\n    // Left wing\n    translate([-15, 20, -2]) rotate([0, 0, 15]) {\n        difference() {\n            cube([30, 12, 2.5]);\n            translate([25, 6, 0]) cylinder(h=3, d=6, $fn=16);\n        }\n    }\n    \n    // Right wing\n    mirror([0, 1, 0]) translate([-15, 20, -2]) rotate([0, 0, 15]) {\n        difference() {\n            cube([30, 12, 2.5]);\n            translate([25, 6, 0]) cylinder(h=3, d=6, $fn=16);\n        }\n    }\n    \n    // Wing struts\n    for (y = [-15, 15]) {\n        translate([5, y, 2]) cylinder(h=8, d1=3, d2=2, $fn=8);\n    }\n}\n\nmodule thrusters() {\n    // Rear thruster pods\n    translate([-35, 0, 0]) {\n        difference() {\n            cylinder(h=12, d=20, $fn=32);\n            translate([0, 0, -1]) cylinder(h=14, d=12, $fn=32);\n        }\n        \n        // Thruster nozzles\n        for (i = [-1, 1]) {\n            translate([0, i*6, -2]) cylinder(h=5, d=8, $fn=16);\n        }\n    }\n}\n\nmodule landing_gear() {\n    // Front skid\n    translate([20, 0, -7]) {\n        cube([15, 3, 3]);\n        translate([0, 0, -2]) cylinder(h=4, d=3, $fn=8);\n    }\n    \n    // Rear skids\n    for (y = [-10, 10]) {\n        translate([-20, y, -7]) {\n            cube([15, 3, 3]);\n            translate([0, 0, -2]) cylinder(h=4, d=3, $fn=8);\n        }\n    }\n}\n\nmodule details() {\n    // Cockpit windows\n    translate([20, 0, 6]) {\n        for (x = [0, 5]) {\n            translate([x, 0, 0]) rotate([90, 0, 0]) \n                cylinder(h=0.5, d=6, $fn=24);\n        }\n    }\n    \n    // Antenna\n    translate([0, 0, 12]) cylinder(h=8, d=1.5, $fn=8);\n    translate([0, 0, 20]) sphere(d=3, $fn=16);\n    \n    // Body panel lines\n    for (i = [-2, 0, 2]) {\n        translate([i*8, 0, 8]) cube([1, 24, 0.5]);\n    }\n}\n\n// Assemble the aerocab\nunion() {\n    main_hull();\n    wings();\n    thrusters();\n    landing_gear();\n    details();\n}",
    "renders": true
  },
  {
    "vehicle": "skyferry",
    "openscad_code": "// Skyferry - Realistic style, medium complexity\n// Basic OpenSCAD primitives only\n\n// Parameters\nhull_length = 80;\nhull_width = 25;\nhull_height = 12;\nballoon_diameter = 30;\nballoon_spacing = 20;\nprop_diameter = 8;\nprop_blade_length = 12;\nwall_thickness = 1.5;\n\n// Main assembly\nmodule skyferry() {\n    union() {\n        // Main balloon envelope\n        envelope();\n        \n        // Gondola hull\n        hull();\n        \n        // Connection cables\n        cables();\n        \n        // Propulsion system\n        propulsion();\n        \n        // Control surfaces\n        rudder();\n        elevators();\n    }\n}\n\n// Balloon envelope with realistic segmented look\nmodule envelope() {\n    translate([0, 0, balloon_diameter/2 + hull_height + 15]) {\n        // Main balloon sphere\n        sphere(d = balloon_diameter);\n        \n        // Segmentation rings for realistic look\n        for(i = [1:3]) {\n            rotate([0, 0, i*60]) \n                translate([0, 0, -balloon_diameter/4 + i*balloon_diameter/6])\n                difference() {\n                    sphere(d = balloon_diameter + 0.5);\n                    sphere(d = balloon_diameter - 1);\n                }\n        }\n        \n        // Top vent detail\n        translate([0, 0, balloon_diameter/2 - 2])\n            cylinder(h = 3, d1 = 8, d2 = 6);\n    }\n}\n\n// Passenger gondola hull\nmodule hull() {\n    translate([0, 0, hull_height/2]) {\n        difference() {\n            // Main hull shape - elongated ellipsoid\n            scale([1, 0.6, 0.4])\n                sphere(d = hull_width);\n            \n            // Hollow interior\n            scale([0.9, 0.5, 0.3])\n                sphere(d = hull_width - wall_thickness*2);\n        }\n        \n        // Hull extension for length\n        translate([hull_length/2 - hull_width/2, 0, 0])\n            scale([1, 0.6, 0.4])\n            difference() {\n                sphere(d = hull_width);\n                scale([0.9, 0.5, 0.3])\n                    sphere(d = hull_width - wall_thickness*2);\n            }\n        \n        // Windows\n        for(window_pos = [-hull_length/3, 0, hull_length/3]) {\n            translate([window_pos, 0, hull_height/4])\n                rotate([90, 0, 0])\n                difference() {\n                    cylinder(h = wall_thickness + 1, d = 6);\n                    cylinder(h = wall_thickness + 2, d = 5);\n                }\n        }\n        \n        // Bottom access hatch\n        translate([0, 0, -hull_height/2 + wall_thickness])\n            cube([12, 8, wall_thickness], center = true);\n    }\n}\n\n// Support cables between hull and envelope\nmodule cables() {\n    hull_top = hull_height + wall_thickness;\n    balloon_bottom = balloon_diameter/2 + hull_height + 15 - balloon_diameter/2;\n    \n    // Four corner cables\n    for(x = [-1, 1]) {\n        for(y = [-1, 1]) {\n            translate([x * hull_width/3, y * hull_width/4, hull_top]) {\n                hull();\n                translate([0, 0, balloon_bottom - hull_top])\n                    cylinder(h = balloon_bottom - hull_top, d = 1.5);\n            }\n        }\n    }\n}\n\n// Propulsion system with dual props\nmodule propulsion() {\n    // Right engine\n    translate([hull_length/2 - 5, hull_width/2 + 5, hull_height/2 - 2])\n        engine();\n    \n    // Left engine\n    translate([hull_length/2 - 5, -hull_width/2 - 5, hull_height/2 - 2])\n        engine();\n}\n\n// Single engine module\nmodule engine() {\n    // Engine housing\n    rotate([0, 90, 0])\n        cylinder(h = 8, d1 = 6, d2 = 5);\n    \n    // Propeller\n    translate([4, 0, 0])\n        rotate([0, 0, $t*360])\n        propeller();\n}\n\n// Three-blade propeller\nmodule propeller() {\n    for(i = [0:120:240]) {\n        rotate([0, 0, i])\n            translate([prop_blade_length/2, 0, 0])\n                cube([prop_blade_length, 2, 0.8], center = true);\n    }\n    \n    // Prop hub\n    cylinder(h = 1.5, d = 4);\n}\n\n// Vertical stabilizer with rudder\nmodule rudder() {\n    translate([-hull_length/2 + 5, 0, hull_height/2 + 3]) {\n        // Fin\n        difference() {\n            cube([8, 2, 12]);\n            translate([wall_thickness, 0, wall_thickness])\n                cube([8 - wall_thickness*2, 2.1, 12 - wall_thickness*2]);\n        }\n        \n        // Rudder (movable part)\n        translate([8, 0, 6])\n            cube([6, 1.5, 6]);\n    }\n}\n\n// Horizontal stabilizers with elevators\nmodule elevators() {\n    elevator_pos = [-hull_length/2 + 8, hull_width/4];\n    \n    for(side = [-1, 1]) {\n        translate([elevator_pos[0], side * elevator_pos[1], hull_height/2 + 2]) {\n            // Stabilizer\n            difference() {\n                cube([12, hull_width/2, 2]);\n                translate([wall_thickness, side * wall_thickness, wall_thickness])\n                    cube([12 - wall_thickness*2, hull_width/2 - wall_thickness*2, 2.1]);\n            }\n            \n            // Elevator (movable part)\n            translate([11, 0, -1])\n                cube([8, hull_width/2 - 2, 1.5]);\n        }\n    }\n}\n\n// Generate the model\nskyferry();",
    "renders": true
  },
  {
    "vehicle": "airferry",
    "openscad_code": "// Airferry - Medium complexity realistic style\n// Wall thickness: 1.2mm for 3D printing\n// Overall size: ~80mm length, printable without supports\n\n$fn = 32;\n\nmodule hull() {\n    // Main hull body - streamlined boat shape\n    difference() {\n        hull() {\n            scale([1, 0.7, 0.3]) sphere(d=60);\n            translate([0, 0, -5]) scale([1, 0.8, 0.2]) sphere(d=60);\n        }\n        \n        // Cut bottom flat\n        translate([-40, -30, -10]) cube([80, 60, 10]);\n        \n        // Cockpit cutout\n        translate([-5, -15, 0]) scale([1, 0.8, 0.5]) sphere(d=35);\n        \n        // Windows on sides\n        for(i = [-20, -10, 10, 20]) {\n            translate([i, -20, 5]) rotate([0, 90, 0]) cylinder(h=1.5, d=8);\n        }\n    }\n    \n    // Window glass\n    color(\"lightblue\", 0.7) {\n        for(i = [-20, -10, 10, 20]) {\n            translate([i, -19.5, 5]) rotate([0, 90, 0]) cylinder(h=1, d=7);\n        }\n    }\n}\n\nmodule wings() {\n    // Left wing\n    translate([-5, 0, 8]) rotate([0, 20, 0]) {\n        difference() {\n            scale([1, 3, 0.2]) cube([40, 15, 3], center=true);\n            translate([0, 22, 0]) rotate([0, 0, 30]) cube([50, 15, 5], center=true);\n        }\n        \n        // Wing support struts\n        for(pos = [-15, 0, 15]) {\n            translate([pos, 10, -5]) cylinder(h=10, d1=3, d2=2);\n        }\n    }\n    \n    // Right wing (mirror of left)\n    translate([-5, 0, 8]) rotate([0, -20, 0]) {\n        difference() {\n            scale([1, 3, 0.2]) cube([40, 15, 3], center=true);\n            translate([0, 22, 0]) rotate([0, 0, 30]) cube([50, 15, 5], center=true);\n        }\n        \n        for(pos = [-15, 0, 15]) {\n            translate([pos, 10, -5]) cylinder(h=10, d1=3, d2=2);\n        }\n    }\n}\n\nmodule propellers() {\n    // Front propeller\n    translate([30, 0, 8]) {\n        cylinder(h=3, d=4);\n        translate([1.5, 0, 0]) rotate([0, 90, 0]) {\n            for(i = [0:45:315]) {\n                rotate([0, 0, i]) \n                    scale([0.1, 1, 0.3]) \n                    cube([15, 2, 1], center=true);\n            }\n        }\n    }\n    \n    // Rear propeller\n    translate([-30, 0, 8]) {\n        cylinder(h=3, d=4);\n        translate([-1.5, 0, 0]) rotate([0, 90, 0]) {\n            for(i = [0:45:315]) {\n                rotate([0, 0, i]) \n                    scale([0.1, 1, 0.3]) \n                    cube([15, 2, 1], center=true);\n            }\n        }\n    }\n}\n\nmodule tail_fin() {\n    // Vertical stabilizer\n    translate([-28, 0, 15]) {\n        difference() {\n            scale([0.2, 1, 1.5]) cube([15, 25, 20], center=true);\n            translate([0, 0, 10]) cube([20, 20, 10], center=true);\n        }\n        \n        // Horizontal stabilizer\n        translate([0, 0, 10]) rotate([90, 0, 0]) {\n            scale([1, 0.2, 0.5]) cube([40, 10, 15], center=true);\n        }\n    }\n}\n\nmodule landing_pontoon() {\n    // Left pontoon\n    translate([0, -25, -8]) {\n        hull() {\n            scale([1, 0.3, 0.3]) sphere(d=25);\n            scale([1, 0.3, 0.3]) translate([10, 0, 0]) sphere(d=25);\n        }\n        \n        // Connection struts\n        cylinder(h=8, d=2);\n        translate([10, 0, 0]) cylinder(h=8, d=2);\n    }\n    \n    // Right pontoon\n    translate([0, 25, -8]) {\n        hull() {\n            scale([1, 0.3, 0.3]) sphere(d=25);\n            scale([1, 0.3, 0.3]) translate([10, 0, 0]) sphere(d=25);\n        }\n        \n        cylinder(h=8, d=2);\n        translate([10, 0, 0]) cylinder(h=8, d=2);\n    }\n}\n\n// Assemble the airferry\nunion() {\n    hull();\n    wings();\n    tail_fin();\n    propellers();\n    landing_pontoon();\n}",
    "renders": true
  },
  {
    "vehicle": "skycar",
    "openscad_code": "// Realistic Skycar - Medium Complexity\n// Size: 80mm length, designed for 3D printing\n\n$fn = 32;\n\nmodule main_body() {\n    // Main fuselage - rounded rectangular shape\n    hull() {\n        translate([-30, -15, 0]) cube([60, 30, 12]);\n        translate([-30, -15, 0]) sphere(6);\n        translate([30, -15, 0]) sphere(6);\n        translate([-30, 15, 0]) sphere(6);\n        translate([30, 15, 0]) sphere(6);\n    }\n    \n    // Cockpit canopy\n    translate([0, 0, 12]) {\n        difference() {\n            hull() {\n                translate([-20, -12, 0]) sphere(8);\n                translate([20, -12, 0]) sphere(8);\n                translate([-20, 12, 0]) sphere(8);\n                translate([20, 12, 0]) sphere(8);\n            }\n            translate([0, 0, 6]) cube([50, 30, 20], center=true);\n        }\n    }\n}\n\nmodule wings() {\n    // Main wings\n    for(side = [-1, 1]) {\n        translate([0, side * 25, 5]) {\n            rotate([0, 0, side * 5]) {\n                difference() {\n                    cube([50, 10, 3]);\n                    translate([45, 5, -1]) cube([10, 12, 5]);\n                }\n            }\n        }\n    }\n    \n    // Wing supports\n    for(side = [-1, 1]) {\n        translate([-15, side * 15, 3]) {\n            cylinder(h=8, r1=3, r2=1.5);\n        }\n        translate([15, side * 15, 3]) {\n            cylinder(h=8, r1=3, r2=1.5);\n        }\n    }\n}\n\nmodule thrusters() {\n    // Rear thrusters\n    for(side = [-1, 1]) {\n        translate([35, side * 18, 0]) {\n            // Thruster housing\n            difference() {\n                cylinder(h=12, r1=6, r2=4);\n                translate([0, 0, -1]) cylinder(h=14, r=4);\n            }\n            \n            // Thruster nozzle\n            translate([0, 0, -3]) {\n                difference() {\n                    cylinder(h=5, r1=4, r2=5);\n                    cylinder(h=6, r=2);\n                }\n            }\n        }\n    }\n    \n    // Center thruster\n    translate([35, 0, 0]) {\n        difference() {\n            cylinder(h=15, r1=5, r2=3);\n            translate([0, 0, -1]) cylinder(h=17, r=2.5);\n        }\n    }\n}\n\nmodule landing_gear() {\n    // Landing struts\n    for(x = [-25, 25]) {\n        for(y = [-12, 12]) {\n            translate([x, y, -5]) {\n                cylinder(h=5, r=1.5);\n                translate([0, 0, -5]) sphere(2.5);\n            }\n        }\n    }\n}\n\nmodule details() {\n    // Front intake\n    translate([-38, 0, 3]) {\n        difference() {\n            sphere(5);\n            translate([-5, 0, 0]) cube([10, 4, 4]);\n        }\n    }\n    \n    // Windows\n    for(i = [-10, 10]) {\n        translate([i, 0, 16]) {\n            color(\"lightblue\") sphere(2.5);\n        }\n    }\n    \n    // Tail fin\n    translate([38, 0, 10]) {\n        rotate([0, 10, 0]) {\n            cube([2, 15, 12]);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    main_body();\n    wings();\n    translate([0, 0, 8]) thrusters();\n    landing_gear();\n    details();\n}",
    "renders": true
  },
  {
    "vehicle": "flyingcar",
    "openscad_code": "// Flying Car - Realistic Medium Complexity\n// Designed for 3D printing with no overhangs\n\n// Overall dimensions: 100mm x 60mm x 30mm\n\nmodule car_body() {\n    // Main fuselage\n    difference() {\n        hull() {\n            cube([80, 20, 15], center=true);\n            translate([0, 0, 7]) sphere(d=18, $fn=32);\n        }\n        // Cockpit cutout\n        translate([0, 0, 8])\n            scale([1.2, 0.8, 1])\n            sphere(d=15, $fn=32);\n    }\n    \n    // Front nose\n    translate([40, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h=10, d1=20, d2=15, center=true, $fn=32);\n    \n    // Rear engine fairing\n    translate([-40, 0, 0])\n        rotate([0, -90, 0])\n        cylinder(h=15, d1=22, d2=18, center=true, $fn=32);\n}\n\nmodule wheels() {\n    // Rotors with ducted fans\n    for(side = [-1, 1]) {\n        // Front rotors\n        translate([25, side*30, -5])\n            rotor_assembly(12, 8);\n        // Rear rotors\n        translate([-25, side*30, -5])\n            rotor_assembly(15, 10);\n    }\n}\n\nmodule rotor_assembly(diameter, height) {\n    union() {\n        // Duct ring\n        difference() {\n            cylinder(h=height, d=diameter+4, center=true, $fn=64);\n            cylinder(h=height+1, d=diameter, center=true, $fn=64);\n        }\n        \n        // Motor hub\n        cylinder(h=height+2, d=5, center=true, $fn=32);\n        \n        // Support arms (4 spokes)\n        for(i = [0:90:270]) {\n            rotate([0, 0, i])\n                translate([diameter/2-2, 0, 0])\n                    cube([4, 2, height], center=true);\n        }\n    }\n}\n\nmodule wings() {\n    // Main wings with integrated rotors\n    for(side = [-1, 1]) {\n        translate([0, side*30, 0]) {\n            // Wing structure\n            difference() {\n                // Wing shape\n                rotate([0, 0, side*5])\n                    cube([90, 8, 3], center=true);\n                // Lighten holes\n                for(pos = [-30, 0, 30]) {\n                    translate([pos, 0, 0])\n                        cylinder(h=4, d=4, center=true, $fn=16);\n                }\n            }\n            \n            // Wing tips\n            translate([45, 0, 0])\n                rotate([0, 0, 15])\n                cube([10, 6, 2], center=true);\n            translate([-45, 0, 0])\n                rotate([0, 0, -15])\n                cube([10, 6, 2], center=true);\n        }\n    }\n}\n\nmodule tail_fin() {\n    // Vertical stabilizer\n    translate([-45, 0, 12])\n        rotate([0, -10, 0])\n        cube([20, 3, 15], center=true);\n    \n    // Horizontal stabilizers\n    for(side = [-1, 1]) {\n        translate([-45, side*15, 5])\n            rotate([0, 0, side*20])\n            cube([25, 10, 2], center=true);\n    }\n}\n\nmodule details() {\n    // Cockpit canopy\n    translate([0, 0, 10])\n        color([0.8, 0.9, 1])\n        sphere(d=16, $fn=32);\n    \n    // Headlights\n    for(side = [-1, 1]) {\n        translate([42, side*8, -2])\n            cylinder(h=2, d=4, $fn=16);\n    }\n    \n    // Exhaust ports\n    translate([-48, 0, 0])\n        for(i = [-1, 0, 1]) {\n            translate([0, i*4, 0])\n                cylinder(h=3, d=2, $fn=8);\n        }\n}\n\n// Assembly\nunion() {\n    car_body();\n    wings();\n    tail_fin();\n    wheels();\n    details();\n}",
    "renders": true
  },
  {
    "vehicle": "aerocar",
    "openscad_code": "// Aerocar - medium complexity realistic style\n// Overall dimensions: ~80mm long x 40mm wide x 25mm high\n\n$fn = 32;  // Smooth curves\n\n// Main body shell\nmodule body_shell() {\n    difference() {\n        // Main hull shape\n        hull() {\n            translate([-35, 0, 0]) \n                scale([1, 0.7, 0.3]) sphere(d=30);\n            translate([20, 0, 0]) \n                scale([1.5, 0.8, 0.4]) sphere(d=25);\n        }\n        // Cockpit cutout\n        translate([-10, 0, 8])\n            scale([1, 0.6, 0.3]) sphere(d=20);\n        // Windshield angle\n        translate([5, 0, 12]) rotate([0, -20, 0])\n            cube([25, 25, 1], center=true);\n    }\n}\n\n// Wings with engine nacelles\nmodule wing_assembly() {\n    // Left wing\n    translate([-5, -20, 5]) {\n        difference() {\n            // Wing shape\n            rotate([0, 0, -5])\n                cube([40, 15, 3], center=true);\n            // Wing root fillet\n            translate([15, 0, 0]) rotate([0, 90, 0])\n                cylinder(h=20, d1=5, d2=3);\n        }\n        // Engine pod\n        translate([-15, -10, -3]) {\n            cylinder(h=8, d=6);\n            translate([0, 0, -1]) \n                cylinder(h=2, d=8);\n        }\n    }\n    \n    // Right wing (mirrored)\n    mirror([0, 1, 0]) wing_assembly();\n}\n\n// Tail section\nmodule tail_assembly() {\n    // Vertical stabilizer\n    translate([28, 0, 8]) {\n        rotate([0, 20, 0])\n            cube([0.5, 12, 10], center=true);\n    }\n    \n    // Horizontal stabilizers\n    for (y = [-15, 15]) {\n        translate([25, y, 8]) {\n            rotate([0, 0, y > 0 ? 15 : -15])\n                cube([12, 8, 1], center=true);\n        }\n    }\n}\n\n// Wheels with fairings\nmodule landing_gear() {\n    module wheel_set(x, y) {\n        translate([x, y, 0]) {\n            // Wheel fairing\n            hull() {\n                translate([0, 0, 2]) sphere(d=6);\n                translate([0, 0, -2]) sphere(d=6);\n            }\n            // Actual wheel\n            translate([0, 0, -3]) {\n                rotate([90, 0, 0]) \n                    cylinder(h=4, d=5, $fn=16);\n            }\n            // Strut\n            translate([0, 0, 3]) \n                cylinder(h=3, d=1.5);\n        }\n    }\n    \n    // Front wheel\n    wheel_set(-25, 0);\n    \n    // Main wheels\n    for (x = [5, 15]) {\n        for (y = [-18, 18]) {\n            wheel_set(x, y);\n        }\n    }\n}\n\n// Propeller\nmodule propeller() {\n    translate([-35, 0, 0]) {\n        // Spinner\n        sphere(d=6);\n        \n        // Blades\n        for (i = [0:90:270]) {\n            rotate([0, 0, i]) {\n                translate([3, 0, 0]) \n                    cube([12, 2, 0.5], center=true);\n            }\n        }\n        \n        // Hub\n        cylinder(h=2, d=3);\n    }\n}\n\n// Assembly\nunion() {\n    body_shell();\n    wing_assembly();\n    tail_assembly();\n    landing_gear();\n    propeller();\n    \n    // Headlight\n    translate([-34, 0, -2]) sphere(d=2);\n    \n    // Side mirrors\n    for (y = [-8, 8]) {\n        translate([-15, y, 7]) {\n            rotate([0, 30, 0]) \n                cube([3, 1, 0.5]);\n        }\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "roadable",
    "openscad_code": "// Roadable (Flying Car) - Realistic Medium Complexity\n// Dimensions: ~80mm length, ~40mm width, ~25mm height\n// All parts designed for 3D printing with proper wall thickness\n\n$fn = 32;\n\nmodule main_body() {\n    // Main fuselage\n    hull() {\n        // Front nose cone\n        translate([35, 0, 5])\n            scale([1, 0.5, 0.3])\n            sphere(r = 8);\n        \n        // Mid section\n        translate([10, 0, 5])\n            cube([50, 20, 10], center = true);\n            \n        // Rear section\n        translate([-20, 0, 5])\n            cube([20, 18, 8], center = true);\n    }\n    \n    // Roof/cabin\n    translate([5, 0, 12])\n        cube([50, 18, 6], center = true);\n}\n\nmodule wheels() {\n    // Wheel module for reusability\n    module wheel(diameter = 8, width = 4) {\n        cylinder(h = width, r = diameter/2, center = true);\n        // Rim detail\n        difference() {\n            cylinder(h = width + 0.2, r = diameter/2 - 1, center = true);\n            cylinder(h = width + 0.4, r = diameter/2 - 2, center = true);\n        }\n    }\n    \n    // Front wheels\n    translate([25, 12, 3])\n        rotate([0, 0, 0])\n        wheel();\n    translate([25, -12, 3])\n        rotate([0, 0, 0])\n        wheel();\n    \n    // Rear wheels\n    translate([-15, 12, 3])\n        wheel();\n    translate([-15, -12, 3])\n        wheel();\n}\n\nmodule wings() {\n    // Main wings\n    difference() {\n        // Left wing\n        translate([-5, 0, 8])\n            rotate([0, 0, 5])\n            cube([30, 40, 2], center = true);\n            \n        // Wing cutout for body\n        translate([5, 0, 8])\n            cube([50, 20, 4], center = true);\n    }\n    \n    // Right wing (mirror of left)\n    mirror([0, 1, 0]) {\n        difference() {\n            translate([-5, 0, 8])\n                rotate([0, 0, 5])\n                cube([30, 40, 2], center = true);\n                \n            translate([5, 0, 8])\n                cube([50, 20, 4], center = true);\n        }\n    }\n    \n    // Wing struts\n    for (y = [15, -15]) {\n        translate([5, y, 2])\n            cylinder(h = 6, r = 1);\n    }\n}\n\nmodule tail_section() {\n    // Vertical stabilizer\n    translate([-25, 0, 12])\n        rotate([0, 10, 0])\n        cube([15, 2, 12], center = true);\n    \n    // Horizontal stabilizer\n    translate([-30, 0, 15])\n        cube([20, 30, 2], center = true);\n    \n    // Tail wheel\n    translate([-35, 0, 2])\n        cylinder(h = 2, r = 3);\n}\n\nmodule propeller() {\n    // Propeller hub\n    translate([40, 0, 8])\n        cylinder(h = 3, r = 2);\n    \n    // Propeller blades\n    for (i = [0:45:315]) {\n        rotate([0, 0, i])\n            translate([45, 0, 8])\n                cube([15, 1, 0.5], center = true);\n    }\n}\n\nmodule windows() {\n    // Windshield\n    difference() {\n        translate([30, 0, 10])\n            cube([15, 16, 6], center = true);\n        translate([30, 0, 11])\n            cube([16, 17, 6], center = true);\n    }\n    \n    // Side windows\n    for (x = [15, 5, -5]) {\n        translate([x, 10, 10])\n            cube([8, 0.1, 4], center = true);\n        translate([x, -10, 10])\n            cube([8, 0.1, 4], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    main_body();\n    wings();\n    tail_section();\n    propeller();\n    wheels();\n    windows();\n}",
    "renders": true
  },
  {
    "vehicle": "aeroboat",
    "openscad_code": "// Aeroboat - Medium complexity realistic style\n// Overall dimensions: 80mm length, 35mm width, 25mm height\n\n$fn = 32;\n\nmodule hull() {\n    // Main hull body - streamlined shape\n    difference() {\n        hull() {\n            translate([-35, 0, 0]) scale([1, 0.8, 0.4]) sphere(d=30);\n            translate([35, 0, 0]) scale([0.6, 0.4, 0.3]) sphere(d=20);\n        }\n        \n        // Cut bottom flat\n        translate([-50, 0, -5]) cube([100, 40, 5]);\n        \n        // Cockpit opening\n        translate([5, 0, 8]) scale([0.8, 0.4, 0.3]) sphere(d=20);\n    }\n}\n\nmodule cockpit() {\n    // Seating area\n    difference() {\n        translate([5, 0, 9]) cube([20, 12, 6], center=true);\n        translate([5, 0, 12]) cube([19, 11, 6], center=true);\n    }\n    \n    // Windshield\n    rotate([90, 0, 0]) \n        linear_extrude(height=0.5)\n        translate([5, 0, 15])\n        scale([0.8, 0.3, 1])\n        circle(d=12);\n}\n\nmodule engine() {\n    for(side = [-1, 1]) {\n        translate([side * 15, 0, 12]) {\n            // Engine housing\n            cylinder(h=8, d1=10, d2=8);\n            \n            // Exhaust pipe\n            translate([0, 5, 4])\n                rotate([90, 0, 0])\n                cylinder(h=12, d=3);\n                \n            // Cooling fins\n            for(i = [0:2]) {\n                translate([0, 0, i * 2.5])\n                    cylinder(h=1, d=12 - i);\n            }\n        }\n    }\n}\n\nmodule wings() {\n    // Main wings\n    for(side = [-1, 1]) {\n        translate([-15, side * 18, 8]) {\n            rotate([0, 0, side * 5])\n            difference() {\n                // Wing shape\n                scale([1, 0.3, 0.1])\n                sphere(d=35);\n                \n                // Cut bottom\n                translate([0, 0, -2]) cube([40, 20, 4], center=true);\n            }\n            \n            // Wing strut\n            translate([-5, side * -5, -5])\n                rotate([0, 30, 0])\n                cylinder(h=10, d=2);\n        }\n    }\n    \n    // Tail wings\n    translate([30, 0, 10]) {\n        for(side = [-1, 1]) {\n            translate([0, side * 10, 0])\n                rotate([0, 0, side * 15])\n                scale([0.5, 0.2, 0.05])\n                cube([20, 15, 2], center=true);\n        }\n    }\n}\n\nmodule propeller() {\n    translate([-38, 0, 8]) {\n        // Spinner\n        sphere(d=8);\n        \n        // Blades\n        for(i = [0:2]) {\n            rotate([0, 0, i * 120])\n            translate([4, 0, 0])\n                rotate([0, 90, 0])\n                scale([0.3, 1, 0.1])\n                cylinder(h=15, d=8);\n        }\n        \n        // Hub\n        cylinder(h=3, d=4);\n    }\n}\n\nmodule floats() {\n    // Side floats for stability\n    for(side = [-1, 1]) {\n        translate([side * 25, side * 12, -2]) {\n            scale([0.6, 0.3, 0.4])\n            sphere(d=15);\n            \n            // Support struts\n            translate([0, 0, 5])\n                cylinder(h=7, d=2);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    hull();\n    cockpit();\n    engine();\n    wings();\n    propeller();\n    floats();\n}",
    "renders": true
  },
  {
    "vehicle": "ekranoplan",
    "openscad_code": "// Ekranoplan Model - Medium Complexity Realistic Style\n// Designed for 3D printing with proper wall thickness\n\n$fn = 32;\n\n// Overall dimensions\nlength = 80;\nwidth = 40;\nheight = 15;\n\nmodule main_body() {\n    // Fuselage hull\n    difference() {\n        hull() {\n            // Main body section\n            translate([0, 0, 5]) scale([1, 0.6, 0.3]) sphere(d=length);\n            // Nose cone\n            translate([length/2-10, 0, 5]) scale([0.8, 0.5, 0.3]) sphere(d=20);\n            // Tail taper\n            translate([-length/2+5, 0, 5]) scale([0.6, 0.5, 0.3]) sphere(d=15);\n        }\n        \n        // Cockpit cutout\n        translate([length/2-25, 0, 8]) rotate([0, 10, 0]) \n            scale([1, 0.8, 0.6]) sphere(d=15);\n        \n        // Bottom flattening for ground effect\n        translate([0, 0, -2]) cube([length+10, width+10, 4], center=true);\n    }\n}\n\nmodule wings() {\n    // Main wings\n    for (side = [-1, 1]) {\n        // Wing root\n        translate([0, side*width/4, 5]) \n            rotate([0, 0, side*5]) \n            cube([length/3, width/4, 3], center=true);\n        \n        // Wing tip floats\n        translate([-length/4, side*width/2, 3]) \n            cylinder(h=4, d1=6, d2=4);\n    }\n    \n    // Tailplane\n    translate([-length/2+5, 0, 8]) \n        rotate([0, 0, 0])\n        cube([length/4, width/3, 2], center=true);\n}\n\nmodule engines() {\n    // Forward engine nacelles\n    for (i = [-1, 1]) {\n        translate([length/3, i*width/3, 8]) {\n            // Engine housing\n            rotate([90, 0, 0]) cylinder(h=12, d=8);\n            // Engine intake\n            translate([0, 0, 2]) rotate([90, 0, 0]) \n                cylinder(h=4, d1=10, d2=8);\n        }\n    }\n    \n    // Tail engines\n    for (i = [-1, 1]) {\n        translate([-length/2+10, i*width/4, 8]) {\n            rotate([0, 10, 0]) {\n                // Engine body\n                cylinder(h=10, d=6);\n                // Exhaust\n                translate([0, 0, -8]) rotate([0, 10, 0])\n                    cylinder(h=5, d1=6, d2=4);\n            }\n        }\n    }\n}\n\nmodule control_surfaces() {\n    // Vertical stabilizer\n    translate([-length/2+5, 0, 10]) \n        rotate([0, 0, 0])\n        cube([4, 2, height], center=true);\n    \n    // Rudder\n    translate([-length/2+3, 0, 10]) \n        cube([1, 0.5, height-1], center=true);\n    \n    // Wing control surfaces\n    for (side = [-1, 1]) {\n        // Ailerons\n        translate([length/6, side*width/3, 6.5]) \n            rotate([0, side*5, 0])\n            cube([length/4, 2, 1], center=true);\n    }\n}\n\nmodule details() {\n    // Cockpit windows\n    for (i = [0:1:3]) {\n        translate([length/2-20-i*5, 0, 8]) \n            sphere(d=3);\n    }\n    \n    // Landing lights\n    translate([length/2-2, 0, 4]) \n        sphere(d=2);\n    \n    // Antenna\n    translate([-length/2+2, 0, 12]) \n        cylinder(h=5, d=1);\n}\n\n// Assembly\nunion() {\n    main_body();\n    wings();\n    engines();\n    control_surfaces();\n    details();\n}",
    "renders": true
  },
  {
    "vehicle": "wingcraft",
    "openscad_code": "// Wingcraft – realistic style, medium complexity\n// Wingspan ≈ 80 mm, length ≈ 70 mm, height ≈ 20 mm\n// Designed for FDM printing – 1 mm wall thickness, no steep overhangs\n\n$fn = 32;\n\n// Overall scale factor – easy to resize\nscale(0.8) wingcraft();\n\nmodule wingcraft(){\n    union(){\n        fuselage();\n        wing_pair();\n        tail_assembly();\n    }\n}\n\nmodule fuselage(){\n    // Main body tube\n    hull();\n    \n    // Cockpit bubble\n    translate([0, 0, 8])\n        rotate([90, 0, 0])\n            scale([1, 1.6, 1])\n                sphere(d = 14);\n    \n    // Nose cone\n    translate([-35, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h = 12, d1 = 16, d2 = 8);\n}\n\nmodule hull(){\n    hull_length = 65;\n    hull_width  = 12;\n    hull_height =  9;\n    \n    // Hollow tube with 1 mm wall\n    difference(){\n        // Outer\n        hull_profile(hull_length, hull_width, hull_height);\n        // Inner\n        hull_profile(hull_length-2, hull_width-2, hull_height-2);\n    }\n}\n\nmodule hull_profile(len, wid, hei){\n    hull_pts = [\n        [0, -wid/2, 0],\n        [len, -wid/2, 0],\n        [len,  wid/2, 0],\n        [0,  wid/2, 0],\n        [0, -wid/2, hei],\n        [len, -wid/2, hei],\n        [len,  wid/2, hei],\n        [0,  wid/2, hei]\n    ];\n    \n    hull_faces = [\n        [0,1,2,3], [4,5,6,7],  // bottom, top\n        [0,4,7,3], [1,5,6,2]   // left, right\n    ];\n    \n    polyhedron(points=hull_pts, faces=hull_faces);\n}\n\nmodule wing_pair(){\n    module single_wing(){\n        // Root rib\n        translate([0, 0, -1])\n            cube([12, 4, 2]);\n        \n        // Main panel – tapered\n        translate([20, 0, 0])\n            rotate([0, 4, 0])\n                scale([1, 0.6, 1])\n                    cube([35, 3, 1.5]);\n        \n        // Wing tip\n        translate([55, 0, 0])\n            rotate([0, 4, 0])\n                cube([8, 2, 1]);\n    }\n    \n    // Left wing\n    translate([5, 6, -2])\n        rotate([0, 3, 0])\n            single_wing();\n    \n    // Right wing – mirrored\n    translate([5, -6, -2])\n        mirror([0,1,0])\n            rotate([0, 3, 0])\n                single_wing();\n}\n\nmodule tail_assembly(){\n    // Horizontal stabilizer\n    translate([48, 0, -3])\n        rotate([0, -3, 0])\n            cube([30, 18, 1.5]);\n    \n    // Vertical stabilizer\n    translate([55, 0, 2.5])\n        rotate([0, 0, 3])\n            cube([12, 1.5, 12]);\n    \n    // Elevator control surfaces (simple tabs)\n    for(y = [-6, 6]){\n        translate([55, y, -3.5])\n            cube([10, 3, 1]);\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "liftingcraft",
    "openscad_code": "// Realistic Medium-Complexity Lifting Craft (OpenSCAD)\n// Overall footprint ≈ 80 x 35 mm, height ≈ 35 mm\n\n// Wall / shell thickness for 3D printing\nw = 1.6;\n\n// Main lifting body – elliptical hull\nmodule hull() {\n    difference() {\n        // Outer shell\n        scale([1, 0.5, 0.35])\n            sphere(d = 60, $fn = 48);\n        // Hollow interior\n        translate([0, 0, -0.1])\n            scale([1, 0.5, 0.35])\n                sphere(d = 60 - 2 * w, $fn = 48);\n    }\n}\n\n// Forward lift fan duct (cylinder)\nmodule front_duct() {\n    h = 18;\n    difference() {\n        cylinder(h = h, d = 20, $fn = 36);\n        translate([0, 0, w])\n            cylinder(h = h, d = 20 - 2 * w, $fn = 36);\n    }\n}\n\n// Rear lift fan duct (mirrored)\nmodule rear_duct() {\n    mirror([0, 1, 0])\n        front_duct();\n}\n\n// Air-intake grill (repeated thin slats)\nmodule grill() {\n    for (z = [3 : 3 : 15])\n        translate([0, 0, z])\n            cube([25, w, 2], center = true);\n}\n\n// Skid rails (printable as is, no overhangs)\nmodule skids() {\n    for (y = [-15 : 30 : 15])\n        translate([0, y, -17])\n            rotate([90, 0, 0])\n                cylinder(h = 60, d = 4, $fn = 16);\n}\n\n// Cockpit canopy (simple dome)\nmodule cockpit() {\n    translate([0, 0, 8])\n        difference() {\n            scale([1, 0.6, 0.8])\n                sphere(d = 24, $fn = 32);\n            translate([0, 0, -2])\n                cube([30, 30, 30], center = true);\n        }\n}\n\n// Control fins (thin printable plates)\nmodule fin(x, angle) {\n    translate([x, 0, 0])\n        rotate([0, angle, 0])\n            translate([5, 0, 0])\n                cube([10, 1, 15], center = true);\n}\n\n// Assembly\nunion() {\n    hull();                       // Main body\n    translate([0, 0, -11])\n        front_duct();             // Front fan housing\n    translate([0, 0, -11])\n        rear_duct();              // Rear fan housing\n    translate([-25, 0, -7])\n        grill();                  // Intake grill\n    cockpit();                    // Cockpit dome\n    skids();                      // Landing skids\n    \n    // Pair of rear fins for stability\n    fin(-25, -20);\n    fin(-25, 20);\n}",
    "renders": true
  },
  {
    "vehicle": "skimmer",
    "openscad_code": "// Realistic Pool Skimmer - Medium Complexity\n// OpenSCAD 3D printable model\n\n// Overall dimensions\nskimmer_length = 90;\nskimmer_width = 50;\nskimmer_height = 40;\nwall_thickness = 2;\n\n// Main body with hollow interior\nmodule skimmer_body() {\n    difference() {\n        // Outer shell\n        cube([skimmer_length, skimmer_width, skimmer_height], center=true);\n        \n        // Hollow interior\n        translate([0, 0, wall_thickness/2])\n            cube([\n                skimmer_length - 2*wall_thickness, \n                skimmer_width - 2*wall_thickness, \n                skimmer_height - wall_thickness\n            ], center=true);\n        \n        // Front opening for water flow\n        translate([skimmer_length/2 - wall_thickness, 0, 0])\n            cube([wall_thickness*2, skimmer_width - 10, skimmer_height - 10], center=true);\n    }\n}\n\n// Handle attachment point\nmodule handle_mount() {\n    union() {\n        // Base mount\n        translate([-skimmer_length/2 + 10, 0, skimmer_height/2 - 5])\n            rotate([0, 90, 0])\n                cylinder(h=20, r1=8, r2=8);\n        \n        // Mounting hole\n        translate([-skimmer_length/2 + 10, 0, skimmer_height/2 - 5])\n            rotate([0, 90, 0])\n                cylinder(h=20, r1=4, r2=4);\n    }\n}\n\n// Mesh pattern for the skimming surface\nmodule mesh_pattern() {\n    mesh_width = skimmer_width - 10;\n    mesh_length = skimmer_length - 15;\n    \n    // Grid of small holes\n    for(x = [-mesh_length/2 + 5:5:mesh_length/2 - 5]) {\n        for(y = [-mesh_width/2 + 5:5:mesh_width/2 - 5]) {\n            translate([x, y, skimmer_height/2 - 1])\n                cylinder(h=3, r=1.5);\n        }\n    }\n}\n\n// Side supports for strength\nmodule side_supports() {\n    // Left support\n    translate([0, -skimmer_width/2 + wall_thickness/2, 0])\n        cube([skimmer_length - 10, wall_thickness, skimmer_height - 5], center=true);\n    \n    // Right support\n    translate([0, skimmer_width/2 - wall_thickness/2, 0])\n        cube([skimmer_length - 10, wall_thickness, skimmer_height - 5], center=true);\n}\n\n// Rounded front lip\nmodule front_lip() {\n    difference() {\n        // Main lip\n        translate([skimmer_length/2 - 5, 0, -skimmer_height/2 + 5])\n            rotate([0, 90, 0])\n                cylinder(h=skimmer_width - 10, r1=5, r2=3);\n        \n        // Remove bottom half\n        translate([skimmer_length/2 - 5, 0, -skimmer_height/2 + 5])\n            rotate([0, 90, 0])\n                cube([skimmer_width - 10, 5, 5], center=true);\n    }\n}\n\n// Reinforcement ribs on bottom\nmodule bottom_ribs() {\n    for(i = [-1:1]) {\n        translate([i * 20, 0, -skimmer_height/2 + 1])\n            cube([15, skimmer_width - 10, 2]);\n    }\n}\n\n// Assembly\nunion() {\n    // Main body\n    skimmer_body();\n    \n    // Add handle mount\n    difference() {\n        handle_mount();\n        translate([-skimmer_length/2 + 10, 0, skimmer_height/2 - 5])\n            rotate([0, 90, 0])\n                cylinder(h=20, r1=3.5, r2=3.5);\n    }\n    \n    // Add mesh pattern to top\n    mesh_pattern();\n    \n    // Add structural supports\n    side_supports();\n    \n    // Add front lip\n    front_lip();\n    \n    // Add bottom reinforcement\n    bottom_ribs();\n}",
    "renders": true
  },
  {
    "vehicle": "wingin",
    "openscad_code": "// Realistic Wingin (medium complexity)\n// Overall print size ~80 mm\n\n// Wingin body parameters\nwingin_length = 80;\nwingin_width = 35;\nwingin_thickness = 8;\n\n// Wing parameters\nwing_span = 65;\nwing_chord_root = 25;\nwing_chord_tip = 15;\nwing_thickness = 2.5;\n\n// Tail parameters\ntail_span = 30;\ntail_chord = 12;\ntail_thickness = 2;\n\n// Fuselage cross-section oval\nmodule fuselage_cross(r1, r2, h) {\n    difference() {\n        scale([r1, r2, 1])\n            cylinder(h = h, r = 1, $fn = 32);\n        translate([0, 0, -0.1])\n            scale([r1 - wingin_thickness, r2 - wingin_thickness, 1])\n            cylinder(h = h + 0.2, r = 1, $fn = 32);\n    }\n}\n\n// Main fuselage\nmodule fuselage() {\n    for (i = [0: wingin_length - 1]) {\n        hull() {\n            translate([i, 0, 0])\n                fuselage_cross(\n                    lerp(wingin_width / 2, wingin_width / 3, i / (wingin_length - 1)),\n                    lerp(wingin_thickness / 2, wingin_thickness / 3, i / (wingin_length - 1)),\n                    1\n                );\n            translate([i + 1, 0, 0])\n                fuselage_cross(\n                    lerp(wingin_width / 2, wingin_width / 3, (i + 1) / (wingin_length - 1)),\n                    lerp(wingin_thickness / 2, wingin_thickness / 3, (i + 1) / (wingin_length - 1)),\n                    1\n                );\n        }\n    }\n}\n\n// Wing helper\nfunction lerp(a, b, t) = a + (b - a) * t;\n\nmodule wing_half() {\n    for (i = [0: wing_span / 2 - 1]) {\n        hull() {\n            translate([lerp(-wing_chord_root / 3, -wing_chord_tip / 3, i / (wing_span / 2 - 1)), i * 2, 0])\n                cube([lerp(wing_chord_root, wing_chord_tip, i / (wing_span / 2 - 1)), 2, wing_thickness]);\n            translate([lerp(-wing_chord_root / 3, -wing_chord_tip / 3, (i + 1) / (wing_span / 2 - 1)), (i + 1) * 2, 0])\n                cube([lerp(wing_chord_root, wing_chord_tip, (i + 1) / (wing_span / 2 - 1)), 2, wing_thickness]);\n        }\n    }\n}\n\n// Tail helper\nmodule tail_half() {\n    for (i = [0: tail_span / 2 - 1]) {\n        hull() {\n            translate([wingin_length - lerp(tail_chord, tail_chord * 0.7, i / (tail_span / 2 - 1)), i * 2, 0])\n                cube([lerp(tail_chord, tail_chord * 0.7, i / (tail_span / 2 - 1)), 2, tail_thickness]);\n            translate([wingin_length - lerp(tail_chord, tail_chord * 0.7, (i + 1) / (tail_span / 2 - 1)), (i + 1) * 2, 0])\n                cube([lerp(tail_chord, tail_chord * 0.7, (i + 1) / (tail_span / 2 - 1)), 2, tail_thickness]);\n        }\n    }\n}\n\n// Wing assembly\nmodule wing() {\n    translate([0, 0, wingin_thickness / 2])\n    union() {\n        wing_half();\n        mirror([0, 1, 0])\n            wing_half();\n    }\n}\n\n// Tail assembly\nmodule tail() {\n    translate([0, 0, wingin_thickness / 2])\n    union() {\n        tail_half();\n        mirror([0, 1, 0])\n            tail_half();\n    }\n}\n\n// Nose cone\nmodule nose() {\n    translate([-wingin_length / 5, 0, 0])\n    difference() {\n        scale([wingin_width / 2, wingin_thickness / 2, wingin_width / 2])\n            sphere(r = 1, $fn = 32);\n        // Hollow\n        scale([wingin_width / 2 - wingin_thickness, wingin_thickness / 2 - wingin_thickness, wingin_width / 2 - wingin_thickness])\n            sphere(r = 1, $fn = 32);\n    }\n}\n\n// Assembly\nunion() {\n    fuselage();\n    wing();\n    tail();\n    nose();\n}",
    "renders": true
  },
  {
    "vehicle": "groundeffect",
    "openscad_code": "// Ground-effect vehicle (ekranoplan) – 1:200-ish scale ~90 mm wingspan\n// All dimensions in mm. 0.4 mm wall thickness assumed for 0.4 mm nozzle.\n\n$fa = 2;\n$fs = 0.5;\n\nmodule main() {\n    union() {\n        fuselage();\n        wings();\n        tail_assembly();\n        engine_pods();\n    }\n}\n\n// Main hull with slight boat-hull bottom\nmodule fuselage() {\n    difference() {\n        hull() {\n            // Upper deck\n            translate([0, 0, 5]) cube([65, 15, 5], center = true);\n            // Lower boat hull\n            translate([0, 0, -1]) scale([1, 0.7, 0.4]) sphere(d = 65);\n        }\n        // Cockpit recess\n        translate([20, 0, 7])\n            rotate([0, 15, 0])\n            cube([18, 10, 5], center = true);\n    }\n\n    // Windscreen\n    translate([22, 0, 7.5])\n        rotate([0, 15, 0])\n        cube([15, 9, 3], center = true);\n}\n\n// Wing with endplates\nmodule wings() {\n    wing_half();                 // right\n    mirror([1, 0, 0]) wing_half(); // left\n}\n\nmodule wing_half() {\n    union() {\n        // Main panel\n        translate([0, 7.5, 0])\n            rotate([0, 0, -3])\n            cube([55, 2, 10]);\n\n        // Endplate (winglet)\n        translate([27.5, 11, 0])\n            rotate([0, 0, 10])\n            cube([0.8, 8, 12]);\n    }\n}\n\n// Horizontal and vertical stabilizers\nmodule tail_assembly() {\n    // Horizontal stabilizer\n    translate([-28, 0, 2])\n        rotate([0, 0, 5])\n        cube([20, 1.5, 6], center = true);\n\n    // Vertical stabilizer\n    translate([-33, 0, 7])\n        rotate([0, 5, 0])\n        cube([1.5, 8, 10], center = true);\n}\n\n// Eight small cylindrical engines under the wings\nmodule engine_pods() {\n    for (y = [8.5, -8.5]) {\n        for (x = [-15, -5, 5, 15]) {\n            translate([x, y, -3])\n                rotate([90, 0, 0])\n                cylinder(h = 10, d1 = 8, d2 = 6);\n        }\n    }\n}\n\n// Render\nmain();",
    "renders": true
  },
  {
    "vehicle": "hoverwing",
    "openscad_code": "// Realistic Hoverwing - Medium Complexity\n// All dimensions in mm\n\n$fn = 32;  // Smooth curves\n\n// Main parameters\nlength = 80;\nwidth = 35;\nheight = 15;\nwall = 2;\n\nmodule hoverwing() {\n    union() {\n        // Main hull body\n        hull_body();\n        \n        // Side pontoons/floats\n        translate([width/2 - 5, 0, 0]) pontoon();\n        translate([-width/2 + 5, 0, 0]) mirror([1,0,0]) pontoon();\n        \n        // Rear thrust duct\n        translate([length/2 - 15, 0, height/2]) thrust_duct();\n        \n        // Front wing/canard\n        translate([length/2 - 30, 0, height/2 + 5]) canard();\n        \n        // Rear stabilizer\n        translate([-length/2 + 5, 0, height/2 + 3]) stabilizer();\n        \n        // Cockpit\n        translate([0, 0, height/2 + 2]) cockpit();\n        \n        // Skirt base\n        translate([0, 0, -height/2 + wall]) skirt_base();\n    }\n}\n\nmodule hull_body() {\n    difference() {\n        // Main hull shape\n        hull() {\n            // Front nose\n            translate([length/2 - 5, 0, 0]) \n                scale([1.5, 1, 0.8]) sphere(8);\n            \n            // Mid section\n            translate([0, 0, 0])\n                cube([length - 10, width - 4, height], center=true);\n            \n            // Rear section\n            translate([-length/2 + 5, 0, 0])\n                scale([1.2, 0.9, 0.9]) sphere(7);\n        }\n        \n        // Hollow out interior\n        translate([0, 0, -2])\n            cube([length - wall*2, width - wall*2, height - wall], center=true);\n    }\n}\n\nmodule pontoon() {\n    difference() {\n        // Float shape\n        hull() {\n            translate([0, width/4, -height/2 + 5])\n                cube([length/3, 8, 10], center=true);\n            translate([length/6, width/4, -height/2 + 5])\n                sphere(4);\n            translate([-length/6, width/4, -height/2 + 5])\n                sphere(4);\n        }\n        \n        // Hollow interior\n        translate([0, width/4, -height/2 + 7])\n            cube([length/3 - wall*2, 6, 8], center=true);\n    }\n}\n\nmodule thrust_duct() {\n    difference() {\n        // Outer duct\n        cylinder(h=12, r1=10, r2=12, center=true);\n        \n        // Inner hole\n        cylinder(h=14, r1=7, r2=9, center=true);\n    }\n    \n    // Support struts\n    for(i=[0:120:359]) {\n        rotate([0, 0, i])\n            translate([8, 0, 0])\n                cube([4, 2, 12], center=true);\n    }\n}\n\nmodule canard() {\n    difference() {\n        // Main wing\n        translate([0, 0, 0])\n            cube([20, 25, 2], center=true);\n        \n        // Rounded tips\n        translate([10, 0, 0])\n            sphere(2);\n        translate([-10, 0, 0])\n            sphere(2);\n    }\n    \n    // Wing tips\n    translate([0, 12.5, -1])\n        rotate([90, 0, 0])\n            cylinder(h=3, r=1.5);\n    translate([0, -12.5, -1])\n        rotate([90, 0, 0])\n            cylinder(h=3, r=1.5);\n}\n\nmodule stabilizer() {\n    difference() {\n        // Vertical stabilizer\n        translate([0, 0, 5])\n            cube([3, 15, 10], center=true);\n        \n        // Rounded top\n        translate([0, 0, 10])\n            sphere(2);\n    }\n    \n    // Horizontal stabilizer\n    translate([-2, 0, 7])\n        cube([8, 20, 2], center=true);\n}\n\nmodule cockpit() {\n    difference() {\n        // Cockpit canopy\n        hull() {\n            translate([0, 0, 3])\n                sphere(5);\n            translate([0, 0, 0])\n                cube([15, 10, 6], center=true);\n        }\n        \n        // Pilot opening\n        translate([0, 0, 2])\n            cube([12, 8, 4], center=true);\n    }\n}\n\nmodule skirt_base() {\n    // Flexible skirt segments\n    for(i=[-length/2 + 5:5:length/2 - 5]) {\n        translate([i, 0, -height/2 + wall/2])\n            cube([4, width - 4, wall], center=true);\n    }\n}\n\n// Generate the model\nhoverwing();",
    "renders": true
  },
  {
    "vehicle": "fanwing",
    "openscad_code": "// Fanwing - Realistic Medium Complexity\n// A 3D printable model of a ducted fan with wing elements\n\n// Overall dimensions\nfan_diameter = 60;\nhub_diameter = 20;\nduct_thickness = 3;\nblade_count = 5;\nblade_thickness = 2;\nblade_length = (fan_diameter - hub_diameter) / 2 - duct_thickness - 2;\nwing_span = 80;\nwing_chord = 25;\nwing_thickness = 3;\n\n// Main module\nmodule fanwing() {\n    union() {\n        // Central duct with motor housing\n        duct();\n        \n        // Fan blades\n        rotate([0, 0, 360/blade_count/2]) \n            for(i = [0:blade_count-1]) {\n                rotate([0, 0, i * 360/blade_count])\n                    blade();\n            }\n        \n        // Wing elements\n        left_wing();\n        right_wing();\n        \n        // Support struts\n        support_struts();\n    }\n}\n\n// Duct structure\nmodule duct() {\n    difference() {\n        // Outer duct shell\n        cylinder(h = duct_thickness * 2, d = fan_diameter + duct_thickness * 2, $fn = 64);\n        \n        // Inner cavity\n        translate([0, 0, -0.1])\n            cylinder(h = duct_thickness * 2 + 0.2, d = fan_diameter, $fn = 64);\n    }\n    \n    // Motor hub\n    difference() {\n        cylinder(h = duct_thickness * 2, d = hub_diameter, $fn = 32);\n        translate([0, 0, -0.1])\n            cylinder(h = duct_thickness * 2 + 0.2, d = hub_diameter - 6, $fn = 32);\n    }\n}\n\n// Fan blade with realistic airfoil profile\nmodule blade() {\n    translate([hub_diameter/2 + blade_length/2, 0, duct_thickness])\n        scale([1, 0.3, 0.1])\n            cube([blade_length, blade_thickness * 3, blade_thickness * 10], center = true);\n    \n    // Blade root fairing\n    translate([hub_diameter/2 + blade_length/2, 0, duct_thickness])\n        rotate([90, 0, 0])\n            cylinder(h = blade_length, d1 = blade_thickness * 2, d2 = blade_thickness, $fn = 8);\n}\n\n// Left wing\nmodule left_wing() {\n    translate([0, -(fan_diameter/2 + wing_chord/2), duct_thickness])\n        rotate([0, 0, -5])\n            wing_half();\n}\n\n// Right wing\nmodule right_wing() {\n    mirror([0, 1, 0])\n        left_wing();\n}\n\n// Single wing half with tapered profile\nmodule wing_half() {\n    // Main wing surface\n    translate([0, 0, wing_thickness/2])\n        linear_extrude(height = wing_thickness, convexity = 10)\n            polygon(points = [\n                [0, 0],\n                [wing_span, 0],\n                [wing_span * 0.9, wing_chord * 0.3],\n                [wing_span * 0.7, wing_chord * 0.6],\n                [wing_span * 0.4, wing_chord * 0.8],\n                [0, wing_chord],\n                [0, 0]\n            ]);\n    \n    // Wing tip\n    translate([wing_span, 0, wing_thickness/2])\n        rotate([0, 90, 0])\n            cylinder(h = wing_thickness, d = wing_thickness * 2, $fn = 16);\n}\n\n// Support struts between duct and wings\nmodule support_struts() {\n    // Front strut\n    translate([0, -fan_diameter/2 - wing_chord/2, duct_thickness + wing_thickness/2])\n        rotate([0, 90, 90])\n            cylinder(h = fan_diameter/2 + wing_chord/2, d = 4, $fn = 8);\n    \n    // Rear strut\n    translate([0, -fan_diameter/2 - wing_chord/2, duct_thickness - wing_thickness/2])\n        rotate([0, 90, 90])\n            cylinder(h = fan_diameter/2 + wing_chord/2, d = 4, $fn = 8);\n}\n\n// Generate the model\nfanwing();",
    "renders": true
  },
  {
    "vehicle": "cyclogyro",
    "openscad_code": "// Cyclogyro - Medium Complexity Realistic\n// Overall dimensions: ~80mm x 60mm x 30mm\n\n$fn = 32;\n\n// Main body (fuselage)\nmodule fuselage() {\n    difference() {\n        union() {\n            // Main hull\n            hull() {\n                sphere(d=25);\n                translate([30,0,0]) sphere(d=20);\n            }\n            \n            // Tail boom\n            translate([-5,0,-7.5]) rotate([0,5,0]) cube([35,8,5]);\n            \n            // Cockpit canopy\n            translate([15,0,8]) scale([1.2,1,0.8]) sphere(d=12);\n        }\n        \n        // Cockpit hole\n        translate([15,0,7]) scale([0.9,0.8,0.5]) sphere(d=10);\n        \n        // Propeller shaft holes\n        translate([0,0,0]) rotate([0,90,0]) cylinder(h=30,d=3);\n        translate([25,0,0]) rotate([0,90,0]) cylinder(h=30,d=3);\n    }\n}\n\n// Wing strut\nmodule wing_strut() {\n    difference() {\n        union() {\n            // Main strut\n            rotate([0,-90,0]) cylinder(h=40,d=2);\n            \n            // Reinforcement plates\n            translate([0,0,-19]) cube([4,4,2], center=true);\n            translate([0,0,19]) cube([4,4,2], center=true);\n        }\n        \n        // Mounting holes\n        translate([0,0,-19]) rotate([0,90,0]) cylinder(h=5,d=1.5);\n        translate([0,0,19]) rotate([0,90,0]) cylinder(h=5,d=1.5);\n    }\n}\n\n// Cyclorotor blade\nmodule blade() {\n    difference() {\n        // Blade shape\n        translate([0,0,7.5]) scale([1,0.3,1]) sphere(d=15);\n        \n        // Hollow center\n        translate([0,0,7.5]) scale([0.8,0.4,0.8]) sphere(d=15);\n        \n        // Mounting slot\n        translate([0,0,-1]) cube([3,10,2], center=true);\n    }\n}\n\n// Cyclorotor assembly\nmodule cyclorotor(x_pos, rotation) {\n    translate([x_pos,0,0]) {\n        rotate([0,90,rotation]) {\n            // Central hub\n            difference() {\n                cylinder(h=5,d=10);\n                translate([0,0,-1]) cylinder(h=7,d=3);\n            }\n            \n            // Blades (4 per rotor)\n            for(i=[0:3]) {\n                rotate([0,0,i*90]) {\n                    translate([0,0,2.5]) rotate([0,0,rotation*2]) blade();\n                }\n            }\n            \n            // Support struts\n            wing_strut();\n        }\n    }\n}\n\n// Tail fin\nmodule tail_fin() {\n    difference() {\n        union() {\n            // Vertical stabilizer\n            translate([-25,0,2]) cube([0.5,15,10]);\n            \n            // Horizontal stabilizer\n            translate([-25,-12,0]) cube([15,24,0.5]);\n        }\n        \n        // Control surface gaps\n        translate([-25,0,7]) cube([0.5,13,1]);\n        translate([-25,-11,0]) cube([14,1,0.5]);\n        translate([-25,11,0]) cube([14,1,0.5]);\n    }\n}\n\n// Landing gear\nmodule landing_gear() {\n    union() {\n        // Front strut\n        translate([20,0,-15]) cylinder(h=15,d=2);\n        translate([20,0,-15]) sphere(d=2.5);\n        \n        // Rear struts\n        for(side=[-1,1]) {\n            translate([5,side*15,-15]) cylinder(h=15,d=2);\n            translate([5,side*15,-15]) sphere(d=2.5);\n            \n            // Axle\n            translate([5,side*15,-15]) rotate([90,0,0]) cylinder(h=30,d=1);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Fuselage\n    fuselage();\n    \n    // Cyclorotors\n    cyclorotor(0, 0);\n    cyclorotor(25, 45);\n    \n    // Tail assembly\n    tail_fin();\n    \n    // Landing gear\n    landing_gear();\n}",
    "renders": true
  },
  {
    "vehicle": "cyclocopter",
    "openscad_code": "// Cyclocopter - Realistic 50mm scale\n// Medium complexity with printable features\n\n$fn = 36;\n\n// Main parameters\nbody_length = 40;\nbody_width = 15;\nbody_height = 8;\nrotor_diameter = 25;\nrotor_thickness = 2;\nhub_diameter = 6;\nmast_length = 35;\nmast_diameter = 4;\n\n// Central body\nmodule body() {\n    difference() {\n        union() {\n            // Main fuselage\n            hull() {\n                cube([body_length, body_width, body_height], center=true);\n                translate([body_length/2 - 5, 0, 0])\n                    cube([10, body_width - 4, body_height - 2], center=true);\n            }\n            \n            // Tail boom\n            translate([body_length/2 + 5, 0, 0])\n                rotate([0, 15, 0])\n                cylinder(h=15, d1=8, d2=6, center=false);\n        }\n        \n        // Motor mount holes\n        translate([0, 0, body_height/2])\n            cylinder(h=body_height + 2, d=3.2, center=true);\n        \n        // Weight reduction\n        translate([body_length/2 - 10, 0, 0])\n            cube([20, body_width - 6, body_height - 4], center=true);\n    }\n}\n\n// Rotor blade\nmodule blade() {\n    difference() {\n        // Blade airfoil shape\n        translate([0, -rotor_thickness/2, 0])\n            cube([rotor_diameter/2 - hub_diameter/2, rotor_thickness, rotor_diameter/5], center=false);\n        \n        // Tapered tip\n        translate([rotor_diameter/2 - 3, 0, 0])\n            cube([3, rotor_thickness + 0.5, rotor_diameter/5], center=true);\n    }\n}\n\n// Rotor assembly\nmodule rotor() {\n    difference() {\n        union() {\n            // Hub\n            cylinder(h=rotor_thickness + 2, d=hub_diameter, center=true);\n            \n            // Blades (4 blades)\n            for(i = [0:3]) {\n                rotate([0, 0, i * 90])\n                    translate([hub_diameter/2, 0, 0])\n                        blade();\n            }\n            \n            // Blade supports\n            for(i = [0:3]) {\n                rotate([0, 0, i * 90 + 45])\n                    translate([hub_diameter/2 + 3, 0, 0])\n                        cube([6, 1.5, rotor_thickness], center=true);\n            }\n        }\n        \n        // Central hole for mast\n        cylinder(h=rotor_thickness + 4, d=mast_diameter + 0.5, center=true);\n    }\n}\n\n// Mast\nmodule mast() {\n    difference() {\n        cylinder(h=mast_length, d=mast_diameter, center=false);\n        \n        // Wiring channel\n        translate([0, 0, mast_length/2])\n            cylinder(h=mast_length, d=mast_diameter - 2, center=true);\n    }\n}\n\n// Landing gear\nmodule landing_gear() {\n    // Front struts\n    translate([-body_length/2 + 8, body_width/2 - 2, -body_height/2 - 5])\n        cylinder(h=5, d=2, center=false);\n    translate([-body_length/2 + 8, -body_width/2 + 2, -body_height/2 - 5])\n        cylinder(h=5, d=2, center=false);\n    \n    // Rear struts\n    translate([body_length/2 - 5, body_width/2 - 2, -body_height/2 - 5])\n        cylinder(h=5, d=2, center=false);\n    translate([body_length/2 - 5, -body_width/2 + 2, -body_height/2 - 5])\n        cylinder(h=5, d=2, center=false);\n    \n    // Skids\n    translate([-body_length/2 + 8, 0, -body_height/2 - 7])\n        cube([body_length - 13, 1, 1], center=true);\n    translate([-body_length/2 + 8, 0, -body_height/2 - 7])\n        cube([1, body_width - 4, 1], center=true);\n}\n\n// Assembly\ntranslate([0, 0, body_height/2 + mast_length/2])\n    body();\n\ntranslate([0, 0, mast_length/2])\n    mast();\n\ntranslate([0, 0, mast_length + body_height/2 + 1])\n    rotor();\n\ntranslate([0, 0, 0])\n    landing_gear();",
    "renders": true
  },
  {
    "vehicle": "multicopter",
    "openscad_code": "// Realistic 3D-printable multicopter (quadcopter) – medium complexity\n// Overall footprint ≈ 80 mm motor-to-motor\n$fn = 36;                     // Smooth curves for printing\n\n// ---------- CONFIGURATION ----------\narm_len   = 35;               // Length from center to motor center\narm_diam  = 6;                // Carbon-tube style arm Ø\nbody_r    = 20;               // Main body radius\nbody_h    = 10;               // Main body height\nmotor_r   = 9;                // Outrunner motor diameter\nmotor_h   = 5;\nprop_r    = 28;               // 2-blade prop radius\nprop_t    = 1.2;              // Prop thickness\nwall      = 1.6;              // Printer wall thickness\nbattery_l = 30;               // Li-Po pack length\nbattery_w = 18;\nbattery_h = 10;\n\n// ---------- MODULES ----------\n// Central hub with clean mounting holes\nmodule body() {\n    difference() {\n        cylinder(r = body_r, h = body_h, center = true);\n        // Light-weighting cutouts (hex pattern)\n        for (i = [0:60:359]) rotate([0,0,i])\n            translate([body_r*0.55, 0, -body_h/2-0.1])\n                cylinder(r = 5, h = body_h+0.2);\n        // Central hole for wiring\n        cylinder(r = 5, h = body_h+0.2, center = true);\n    }\n}\n\n// Motor pod with integrated mount\nmodule motor_pod() {\n    difference() {\n        union() {\n            // Motor bell\n            cylinder(r = motor_r, h = motor_h, center = true);\n            // Mounting base\n            translate([0,0,motor_h/2])\n                cylinder(r = motor_r+2, h = 3);\n        }\n        // Center shaft & screw holes\n        cylinder(r = 2, h = motor_h+1, center = true);\n        for (a = [0:120:359])\n            rotate([0,0,a]) translate([motor_r-3,0,0])\n                cylinder(r = 1.5, h = motor_h+1, center = true);\n    }\n}\n\n// Simple two-blade propeller\nmodule propeller() {\n    difference() {\n        union() {\n            // Hub cylinder\n            cylinder(r = 4, h = prop_t, center = true);\n            // Two blades\n            for (rot = [0, 180])\n                rotate([0,0,rot]) translate([prop_r/2, 0, 0])\n                    scale([prop_r, prop_r/4, 1])\n                        cube([1,1,prop_t], center = true);\n        }\n        // Motor shaft clearance\n        cylinder(r = 2.2, h = prop_t+1, center = true);\n    }\n}\n\n// Single carbon-tube arm with motor mount\nmodule arm() {\n    difference() {\n        union() {\n            // Tube\n            rotate([90,0,0]) cylinder(r = arm_diam/2, h = arm_len);\n            // Motor mount plate\n            translate([0,0,arm_len])\n                cube([motor_r*2.2, motor_r*2.2, 3], center = true);\n        }\n        // Light-weighting\n        rotate([90,0,0]) cylinder(r = arm_diam/2-wall, h = arm_len+0.2);\n    }\n}\n\n// Landing skid with springy profile\nmodule skid() {\n    difference() {\n        hull() {\n            translate([-arm_len-5, 0, -body_h/2-3])\n                sphere(r = 2.5);\n            translate([arm_len+5, 0, -body_h/2-3])\n                sphere(r = 2.5);\n        }\n        // Hollow for material saving\n        scale([0.6,0.6,0.6]) hull() {\n            translate([-arm_len-5, 0, -body_h/2-3])\n                sphere(r = 2.5);\n            translate([arm_len+5, 0, -body_h/2-3])\n                sphere(r = 2.5);\n        }\n    }\n}\n\n// Battery tray with hook-slots\nmodule battery_tray() {\n    difference() {\n        translate([0, 0, -body_h/2-battery_h/2-1])\n            cube([battery_l+4, battery_w+4, battery_h+2], center = true);\n        // Slot for battery\n        translate([0, 0, -body_h/2-battery_h/2])\n            cube([battery_l+0.5, battery_w+0.5, battery_h+2], center = true);\n        // Strap holes\n        for (x = [-battery_l/2-2, battery_l/2+2])\n            translate([x, 0, -body_h/2-battery_h/2-1.5])\n                rotate([90,0,0]) cylinder(r = 1.5, h = battery_w+4);\n    }\n}\n\n// ---------- ASSEMBLY ----------\n// Arms & motors in X configuration\nfor (ang = [45, 135, 225, 315]) {\n    rotate([0,0,ang])\n        translate([0,0,0]) arm();\n    rotate([0,0,ang])\n        translate([0,0,arm_len])\n            motor_pod();\n    rotate([0,0,ang])\n        translate([0,0,arm_len+motor_h/2+prop_t/2])\n            propeller();\n}\n\n// Central body\nbody();\n\n// Battery & skids\nbattery_tray();\nskid();",
    "renders": true
  },
  {
    "vehicle": "tiltprop",
    "openscad_code": "// Tiltprop - Realistic Style, Medium Complexity\n// Size: ~80mm diameter\n\n$fn = 50;\n\n// Main module\nmodule tiltprop() {\n    difference() {\n        union() {\n            central_hub();\n            blades();\n            blade_tilt_mechanism();\n        }\n        \n        // Mounting hole\n        translate([0, 0, -5])\n            cylinder(h = 20, r = 3, $fn = 6);\n            \n        // Wire routing\n        translate([0, 0, 8])\n            cylinder(h = 5, r = 2);\n    }\n}\n\n// Central hub with mounting points\nmodule central_hub() {\n    difference() {\n        // Main hub body\n        cylinder(h = 12, r = 15);\n        \n        // Top chamfer\n        translate([0, 0, 10])\n            cylinder(h = 2, r1 = 15, r2 = 13);\n            \n        // Bottom chamfer\n            cylinder(h = 2, r1 = 13, r2 = 15);\n    }\n    \n    // Mounting bosses\n    for (i = [0:120:359]) {\n        rotate([0, 0, i])\n            translate([12, 0, 0])\n                cylinder(h = 8, r = 4);\n    }\n}\n\n// Generate 3 blades with realistic airfoil shape\nmodule blades() {\n    blade_profile(0);\n    blade_profile(120);\n    blade_profile(240);\n}\n\n// Single blade with proper airfoil\nmodule blade_profile(angle) {\n    rotate([0, 0, angle]) {\n        translate([0, 0, 6])\n            rotate([90, 0, 0])\n                linear_extrude(height = 3, center = true) {\n                    polygon(points = [\n                        [15, 0],      // Hub connection\n                        [18, 2],\n                        [25, 3],\n                        [35, 3.5],\n                        [45, 3],\n                        [55, 2],\n                        [65, 0],\n                        [55, -2],\n                        [45, -3],\n                        [35, -3.5],\n                        [25, -3],\n                        [18, -2]\n                    ]);\n                }\n    }\n}\n\n// Tilt mechanism housing\nmodule blade_tilt_mechanism() {\n    for (i = [0:120:359]) {\n        rotate([0, 0, i]) {\n            // Servo housing\n            translate([15, 0, 10])\n                rotate([90, 0, 0])\n                    cylinder(h = 8, r = 5);\n                    \n            // Linkage arms\n            translate([20, 0, 6])\n                rotate([0, 0, 30])\n                    cube([15, 2, 2], center = true);\n                    \n            // Pivot joints\n            translate([15, 0, 6])\n                sphere(r = 3);\n                \n            translate([35, 0, 6])\n                sphere(r = 2);\n        }\n    }\n    \n    // Central control ring\n    translate([0, 0, 10])\n        cylinder(h = 3, r = 12);\n}\n\n// Assembly\ntiltprop();",
    "renders": true
  },
  {
    "vehicle": "liftfan",
    "openscad_code": "// Liftfan Module - Realistic Medium Complexity\n// Approximately 80mm diameter, 30mm thick\n\n$fa = 2;\n$fs = 0.5;\n\nmodule liftfan() {\n    // Main housing cylinder\n    difference() {\n        cylinder(h=30, d=80, $fn=100);\n        translate([0, 0, 2])\n            cylinder(h=28, d=76, $fn=100);\n    }\n    \n    // Motor mount hub\n    translate([0, 0, 30])\n    difference() {\n        cylinder(h=8, d=20, $fn=50);\n        translate([0, 0, 2])\n            cylinder(h=8, d=14, $fn=50);\n    }\n    \n    // Stator vanes (12 vanes)\n    for (i = [0:11]) {\n        rotate([0, 0, i*30])\n        translate([30, 0, 2])\n        rotate([90, 0, 0])\n        scale([1, 1.5, 10])\n        cube([3, 1, 1], center=true);\n    }\n    \n    // Rotor assembly\n    translate([0, 0, 10])\n    difference() {\n        cylinder(h=3, d=78, $fn=100);\n        \n        // Blade slots\n        for (i = [0:7]) {\n            rotate([0, 0, i*45])\n            translate([38, 0, -1])\n            rotate([0, 0, 22.5])\n            cube([15, 2, 5], center=true);\n        }\n    }\n    \n    // Fan blades (8 blades)\n    for (i = [0:7]) {\n        rotate([0, 0, i*45])\n        translate([0, 0, 10])\n        rotate_extrude(angle=45, $fn=100)\n        translate([25, 0])\n        polygon(points=[[0,0],[12,0.5],[10,1.5],[0,1]]);\n    }\n    \n    // Intake grille\n    translate([0, 0, 0.5])\n    difference() {\n        cylinder(h=1.5, d=79.5, $fn=100);\n        \n        // Grille bars\n        for (i = [0:11]) {\n            rotate([0, 0, i*15])\n            translate([0, -40, 0])\n            cube([80, 2, 3], center=true);\n        }\n    }\n    \n    // Exhaust nozzle\n    translate([0, 0, -1])\n    cylinder(h=2, d1=76, d2=72, $fn=100);\n    \n    // Mounting holes\n    for (i = [0:3]) {\n        rotate([0, 0, i*90+45])\n        translate([35, 0, -1])\n        cylinder(h=32, d=4, $fn=20);\n    }\n    \n    // Motor shaft\n    translate([0, 0, 38])\n    cylinder(h=10, d=3, $fn=20);\n}\n\nliftfan();",
    "renders": true
  },
  {
    "vehicle": "ductfan",
    "openscad_code": "// Realistic 3D-printable ducted fan, medium complexity\n// Overall ~90 mm diameter, ~55 mm height\n\n$fn = 36;               // Global smoothness\nwall = 1.2;             // Wall thickness for printing\n\n// Main module\nmodule ductfan() {\n    \n    // Shroud (outer duct)\n    difference() {\n        cylinder(h = 50, d1 = 90, d2 = 90);           // Outer shell\n        cylinder(h = 52, d1 = 87.6, d2 = 87.6);       // Hollow core\n    }\n    \n    // Intake lip profile\n    translate([0, 0, 50])\n    difference() {\n        cylinder(h = 10, d1 = 90, d2 = 95);           // Bellmouth flare\n        cylinder(h = 12, d1 = 87.6, d2 = 87.6);       // Keep inner hollow\n    }\n    \n    // Exit nozzle\n    difference() {\n        translate([0, 0, -5])\n        cylinder(h = 10, d1 = 90, d2 = 85);           // Slight taper\n        cylinder(h = 12, d1 = 87.6, d2 = 82.6);       // Matching inner taper\n    }\n    \n    // Motor mount ring (center hub)\n    difference() {\n        cylinder(h = 15, d1 = 30, d2 = 30);           // Hub body\n        cylinder(h = 17, d1 = 14, d2 = 14);           // Motor hole\n    }\n    \n    // Stator blades (5 vanes)\n    for (i = [0:4]) {\n        rotate([0, 0, i * 72]) {\n            translate([0, 0, 22.5])\n            difference() {\n                // Main vane\n                rotate([90, 0, 0])\n                linear_extrude(height = 28, scale = 1.0)\n                polygon(points = [[0, 0], [9, 0], [9, 3], [0, 3]]);\n                \n                // Cut to fit hub\n                translate([0, 0, -1])\n                cylinder(h = 30, d1 = 30.6, d2 = 30.6);\n                \n                // Cut to fit shroud\n                translate([0, 43.5, -1])\n                cube([20, 2, 30], center = true);\n            }\n        }\n    }\n    \n    // Rotor blades (7 blades)\n    module blade() {\n        difference() {\n            // Blade body\n            rotate([90, 0, 0])\n            linear_extrude(height = 6, scale = 0.9)\n            polygon(points = [\n                [16, 0], [38, 0], [40, 2], [14, 2]\n            ]);\n            \n            // Hub cut\n            translate([0, 0, -2])\n            cylinder(h = 10, d1 = 30.6, d2 = 30.6);\n        }\n    }\n    \n    translate([0, 0, 32])\n    for (i = [0:6]) {\n        rotate([0, 0, i * 360/7 + 13])   // Slight pitch angle\n        blade();\n    }\n    \n    // Optional mount flanges\n    difference() {\n        for (a = [0, 120, 240]) {\n            rotate([0, 0, a])\n            translate([0, 47, 52])\n            cube([10, 2, 8], center = true);\n        }\n        cylinder(h = 65, d1 = 95, d2 = 95);   // Trim to shroud\n    }\n}\n\n// Render the fan\nductfan();",
    "renders": true
  },
  {
    "vehicle": "vectoredthrust",
    "openscad_code": "// Realistic Medium-Complexity Vectored-Thrust Nozzle\n// Roughly 80 mm long, printable without supports\n\n$fn = 32;\n\n// Overall scale factor – change to resize the whole model\nscale = 1;\n\n// Main assembly\nunion() {\n\n    // Engine cowling\n    translate([0,0,0])\n        cowling();\n\n    // Swiveling nozzle ring\n    translate([0,0,50*scale])\n        rotate([0,30,0])  // Demo vector angle\n        nozzle();\n\n    // Four actuator rods\n    for(a=[0,90,180,270])\n        rotate([0,0,a])\n            actuator();\n}\n\n// -------------------------------------------------\n// Engine cowling (intake + shroud)\nmodule cowling() {\n    difference() {\n        // Outer shroud\n        cylinder(h = 55*scale, r1 = 18*scale, r2 = 20*scale, center=false);\n\n        // Inner hollow\n        cylinder(h = 55*scale, r1 = 15*scale, r2 = 16*scale, center=false);\n    }\n\n    // Intake lip\n    translate([0,0,55*scale])\n        difference() {\n            cylinder(h = 5*scale, r1 = 20*scale, r2 = 22*scale, center=false);\n            cylinder(h = 5*scale, r1 = 15*scale, r2 = 16*scale, center=false);\n        }\n\n    // Mounting flange\n    translate([0,0,-2*scale])\n        difference() {\n            cylinder(h = 4*scale, r = 23*scale, center=false);\n            cylinder(h = 4*scale, r = 19*scale, center=false);\n        }\n}\n\n// -------------------------------------------------\n// Actuator rod module\nmodule actuator() {\n    translate([17*scale,0,25*scale])\n        rotate([90,0,0])\n            cylinder(h = 30*scale, r = 1.5*scale, center=false);\n\n    // Spherical rod ends\n    translate([17*scale,0,25*scale])\n        sphere(r = 2.5*scale);\n\n    translate([17*scale,0,55*scale])\n        sphere(r = 2.5*scale);\n}\n\n// -------------------------------------------------\n// Vectored nozzle\nmodule nozzle() {\n    // Hinge ring\n    difference() {\n        cylinder(h = 6*scale, r = 21*scale, center=true);\n        cylinder(h = 7*scale, r = 17*scale, center=true);\n    }\n\n    // Nozzle body\n    translate([0,0,-10*scale])\n        difference() {\n            cylinder(h = 20*scale, r1 = 20*scale, r2 = 15*scale, center=false);\n            cylinder(h = 20*scale, r1 = 16*scale, r2 = 11*scale, center=false);\n        }\n\n    // External stiffening ribs (printable vertical)\n    for(i=[-60,-30,0,30,60])\n        rotate([0,0,i])\n            translate([18*scale,0,-10*scale])\n                cube([2*scale,1.5*scale,20*scale], center=true);\n}",
    "renders": true
  },
  {
    "vehicle": "thrustvector",
    "openscad_code": "// Thrust vectoring nozzle for a small rocket engine\n// Medium complexity, realistic style, 3D-printable\n\n$fn = 45;\n\n// Overall scale (mm)\nnozzle_d = 40;\nnozzle_h = 65;\nthroat_d = 16;\nmount_d = 55;\n\n// Wall thickness for printing\nwall = 2.2;\n\nmodule nozzle_body() {\n    difference() {\n        // Outer shell\n        cylinder(d1 = mount_d, d2 = nozzle_d, h = nozzle_h);\n        \n        // Inner cavity (convergent-divergent)\n        translate([0, 0, -0.1])\n            cylinder(d1 = mount_d - wall*2, d2 = throat_d, h = nozzle_h/2 + 0.2);\n        translate([0, 0, nozzle_h/2 - 0.1])\n            cylinder(d1 = throat_d, d2 = nozzle_d - wall*2, h = nozzle_h/2 + 0.2);\n    }\n}\n\nmodule gimbal_ring() {\n    // Outer gimbal ring\n    difference() {\n        rotate([90, 0, 0])\n            cylinder(d = mount_d + 10, h = 6);\n        rotate([90, 0, 0])\n            cylinder(d = mount_d + 10 - wall*2, h = 6.2);\n    }\n    \n    // Mounting lugs\n    for (a = [0:120:359]) {\n        rotate([0, 0, a])\n            translate([mount_d/2 + 5, 0, -3])\n                cube([10, 6, 6], center = true);\n    }\n}\n\nmodule actuators() {\n    // Four servo actuators around nozzle\n    for (a = [45:90:315]) {\n        rotate([0, 0, a])\n            translate([nozzle_d/2 + 8, 0, nozzle_h - 20]) {\n                // Servo body\n                cube([12, 8, 10], center = true);\n                \n                // Control rod\n                translate([0, -6, 0])\n                    rotate([90, 0, 0])\n                        cylinder(d = 2, h = 20);\n                \n                // Rod joint\n                translate([0, -6, -10])\n                    sphere(d = 4);\n            }\n    }\n}\n\nmodule cooling_fins() {\n    // Regenerative cooling fins\n    for (a = [0:15:359]) {\n        rotate([0, 0, a])\n            translate([nozzle_d/2 - 2, 0, nozzle_h/2])\n                cube([4, 2, nozzle_h/2], center = true);\n    }\n}\n\nmodule thrust_vector_assembly() {\n    union() {\n        // Main nozzle body\n        nozzle_body();\n        \n        // Cooling fins\n        cooling_fins();\n        \n        // Gimbal mechanism\n        translate([0, 0, nozzle_h/2])\n            gimbal_ring();\n        \n        // Actuators\n        actuators();\n        \n        // Mounting flange\n        translate([0, 0, 0])\n            cylinder(d = mount_d + 6, h = 4);\n        \n        // Bolt holes\n        for (a = [0:60:359]) {\n            rotate([0, 0, a])\n                translate([mount_d/2 - 2, 0, -1])\n                    cylinder(d = 3.5, h = 6);\n        }\n    }\n}\n\n// Render the complete assembly\nthrust_vector_assembly();",
    "renders": true
  },
  {
    "vehicle": "liftjet",
    "openscad_code": "// LiftJet - Medium complexity realistic style\n// Total length ~80mm, wingspan ~60mm\n\n$fn = 36;\nwall = 1.2;\n\nmodule main_fuselage() {\n    // Central cylindrical body\n    difference() {\n        cylinder(h=40, r1=8, r2=7);\n        // Hollow interior\n        translate([0,0,-0.1])\n            cylinder(h=40.2, r1=6.8, r2=5.8);\n    }\n    \n    // Nose cone\n    translate([0,0,40])\n        difference() {\n            cylinder(h=12, r1=7, r2=2);\n            translate([0,0,-0.1])\n                cylinder(h=12.2, r1=5.8, r2=0.8);\n        }\n    \n    // Tail taper\n    translate([0,0,-12])\n        difference() {\n            cylinder(h=12, r1=8, r2=5);\n            translate([0,0,-0.1])\n                cylinder(h=12.2, r1=6.8, r2=3.8);\n        }\n}\n\nmodule lift_fans() {\n    // Left fan housing\n    translate([-15, 0, 15]) {\n        rotate([90,0,0])\n            difference() {\n                cylinder(h=12, r=10);\n                translate([0,0,-0.1])\n                    cylinder(h=12.2, r=8.8);\n                // Fan blades simplified\n                for(i=[0:45:315]) {\n                    rotate([0,0,i])\n                        translate([5,0,6])\n                            cube([10,1,6], center=true);\n                }\n            }\n    }\n    \n    // Right fan housing\n    translate([15, 0, 15]) {\n        rotate([90,0,0])\n            difference() {\n                cylinder(h=12, r=10);\n                translate([0,0,-0.1])\n                    cylinder(h=12.2, r=8.8);\n                for(i=[0:45:315]) {\n                    rotate([0,0,i])\n                        translate([5,0,6])\n                            cube([10,1,6], center=true);\n                }\n            }\n    }\n}\n\nmodule wings() {\n    // Left wing\n    translate([-8,0,10]) {\n        rotate([0,10,0])\n            difference() {\n                // Main wing shape\n                translate([-20,0,0])\n                    scale([1,0.3,0.1])\n                        sphere(r=20);\n                // Cut trailing edge\n                translate([0,0,-2])\n                    cube([50,20,4], center=true);\n                // Hollow interior\n                scale([0.85,0.85,0.85])\n                    translate([-20,0,0])\n                        scale([1,0.3,0.1])\n                            sphere(r=20);\n            }\n    }\n    \n    // Right wing\n    mirror([1,0,0])\n        translate([-8,0,10]) {\n            rotate([0,10,0])\n                difference() {\n                    translate([-20,0,0])\n                        scale([1,0.3,0.1])\n                            sphere(r=20);\n                    translate([0,0,-2])\n                        cube([50,20,4], center=true);\n                    scale([0.85,0.85,0.85])\n                        translate([-20,0,0])\n                            scale([1,0.3,0.1])\n                                sphere(r=20);\n                }\n        }\n}\n\nmodule tail_surfaces() {\n    // Vertical stabilizer\n    translate([0,0,-10]) {\n        rotate([0,0,0])\n            difference() {\n                translate([0,0,-8])\n                    scale([0.1,0.4,1])\n                        sphere(r=10);\n                scale([0.8,0.8,0.8])\n                    translate([0,0,-8])\n                        scale([0.1,0.4,1])\n                            sphere(r=10);\n            }\n    }\n    \n    // Horizontal stabilizers\n    for(side=[-1,1]) {\n        translate([side*12,0,-8]) {\n            rotate([0,side*20,0])\n                difference() {\n                    translate([side*-5,0,0])\n                        scale([0.4,0.2,0.05])\n                            sphere(r=10);\n                    scale([0.8,0.8,0.8])\n                        translate([side*-5,0,0])\n                            scale([0.4,0.2,0.05])\n                                sphere(r=10);\n                }\n        }\n    }\n}\n\nmodule engine_details() {\n    // Rear jet nozzle\n    translate([0,0,-12]) {\n        difference() {\n            cylinder(h=8, r=6);\n            translate([0,0,-0.1])\n                cylinder(h=8.2, r=4.8);\n        }\n    }\n    \n    // Intake vents\n    for(side=[-1,1]) {\n        translate([side*7,0,5]) {\n            rotate([0,90,0])\n                difference() {\n                    cylinder(h=3, r=3);\n                    translate([0,0,-0.1])\n                        cylinder(h=3.2, r=1.8);\n                }\n        }\n    }\n}\n\nmodule landing_skids() {\n    // Front skid\n    translate([0,0,-2]) {\n        difference() {\n            cube([20,2,2], center=true);\n            translate([0,0,-0.1])\n                cube([18,1.6,2.2], center=true);\n        }\n    }\n    \n    // Rear skids\n    for(side=[-1,1]) {\n        translate([side*10,0,-2]) {\n            rotate([side*10,0,0])\n                difference() {\n                    cube([8,2,2], center=true);\n                    translate([0,0,-0.1])\n                        cube([7.2,1.6,2.2], center=true);\n                }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    main_fuselage();\n    lift_fans();\n    wings();\n    tail_surfaces();\n    engine_details();\n    landing_skids();\n}",
    "renders": true
  },
  {
    "vehicle": "blownwing",
    "openscad_code": "// Blownwing (forward-swept wing with distributed propulsion)\n// Overall length ~80 mm, wingspan ~90 mm\n\n$fa = 2;\n$fs = 1;\n\nmodule nacelle(diam=6, length=18, spinner=2) {\n    // Engine nacelle body\n    difference() {\n        cylinder(d1=diam, d2=diam*0.9, h=length, $fn=24);\n        translate([0,0,-0.1])\n            cylinder(d=diam-2, h=length+0.2, $fn=24);\n    }\n    // Spinner cone\n    translate([0,0,length])\n        cylinder(d1=diam*0.9, d2=spinner, h=spinner*2, $fn=24);\n}\n\nmodule blown_wing() {\n    // Central fuselage\n    union() {\n        // Main body\n        hull() {\n            translate([-5,0,0]) sphere(d=10);\n            translate([25,0,0]) sphere(d=7);\n        }\n        \n        // Cockpit bump\n        translate([8,0,6])\n            scale([1,0.7,0.4])\n                sphere(d=10);\n    }\n    \n    // Forward-swept wing\n    difference() {\n        // Main wing shape\n        hull() {\n            translate([5,0,0]) cube([3,4,2], center=true);\n            translate([-5,35,5]) cube([2,4,1.5], center=true);\n            translate([-5,-35,5]) cube([2,4,1.5], center=true);\n        }\n        \n        // Cutout for flaps\n        for(y=[-30:15:30])\n            translate([-2,y,4])\n                cube([10,8,3], center=true);\n    }\n    \n    // Wingtip devices\n    for(side=[-1,1]) {\n        translate([-5,side*35,5])\n            rotate([0,0,side*30])\n                cube([8,1,6], center=true);\n    }\n    \n    // 6 distributed propulsors (3 per side)\n    for(side=[-1,1])\n        for(i=[0:2]) {\n            y = side * (10 + i*12);\n            z = 3 + i*1.5;\n            translate([2,y,z])\n                rotate([90,0,0])\n                    nacelle();\n        }\n    \n    // Vertical stabilizer\n    translate([15,0,3])\n        rotate([0,90,0])\n            cube([10,15,2], center=true);\n            \n    // Horizontal stabilizers\n    for(side=[-1,1])\n        translate([15,side*12,0])\n            rotate([0,0,side*15])\n                cube([15,2,8], center=true);\n    \n    // Landing gear fairings\n    translate([0,0,-4])\n        cylinder(d=4, h=8, $fn=20);\n    translate([20,0,-4])\n        cylinder(d=4, h=8, $fn=20);\n}\n\n// Main assembly\nblown_wing();",
    "renders": true
  },
  {
    "vehicle": "augmentor",
    "openscad_code": "// Realistic Augmentor - Neural Implant Style\n// Medium complexity 3D printable model\n\n$fn = 64;\nwall_thickness = 2.0;\n\nmodule base_plate() {\n    difference() {\n        // Main base plate\n        translate([0, 0, 1])\n            cube([40, 25, 2], center=true);\n        \n        // Mounting holes\n        for(x = [-15, 15])\n            for(y = [-8, 8])\n                translate([x, y, 0])\n                    cylinder(h=3, r=1.5, center=true);\n    }\n}\n\nmodule processing_unit() {\n    difference() {\n        // Main processor housing\n        translate([0, 0, 8])\n            cube([30, 20, 12], center=true);\n        \n        // Cooling vents\n        for(i = [-2:2]) {\n            translate([i*5, 0, 12])\n                cube([2, 22, 2], center=true);\n        }\n    }\n    \n    // Processor detail - top chip\n    translate([0, 0, 15])\n        cube([15, 10, 2], center=true);\n    \n    // Indicator LEDs\n    for(pos = [-6, 0, 6]) {\n        translate([pos, 0, 16.5])\n            cylinder(h=1, r=1.5);\n    }\n}\n\nmodule connection_ports() {\n    // Left port cluster\n    translate([-20, 0, 8]) {\n        rotate([0, 90, 0])\n            cylinder(h=10, r=4);\n        translate([0, 0, 5])\n            cube([8, 6, 2], center=true);\n    }\n    \n    // Right port cluster\n    translate([20, 0, 8]) {\n        rotate([0, -90, 0])\n            cylinder(h=10, r=4);\n        translate([0, 0, 5])\n            cube([8, 6, 2], center=true);\n    }\n}\n\nmodule antenna_array() {\n    // Main antenna mast\n    translate([0, -15, 12])\n        cylinder(h=15, r1=3, r2=2);\n    \n    // Antenna elements\n    for(angle = [0:60:359]) {\n        rotate([0, 0, angle])\n            translate([0, -15, 20])\n                rotate([90, 0, 0])\n                    cylinder(h=8, r=0.5);\n    }\n}\n\nmodule cooling_fins() {\n    for(i = [-1:1]) {\n        translate([0, i*6, 8])\n            cube([32, 2, 14], center=true);\n    }\n}\n\nmodule neural_interfaces() {\n    // Front interface pads\n    translate([0, 12, 5]) {\n        // Central pad\n        cube([8, 4, 1], center=true);\n        \n        // Side pads\n        translate([-10, 0, 0])\n            cube([6, 3, 1], center=true);\n        translate([10, 0, 0])\n            cube([6, 3, 1], center=true);\n    }\n    \n    // Micro-wire connectors\n    for(pos = [-15:5:15]) {\n        translate([pos, 14, 6])\n            cylinder(h=4, r=0.8);\n    }\n}\n\n// Build the augmentor\nunion() {\n    base_plate();\n    processing_unit();\n    connection_ports();\n    antenna_array();\n    cooling_fins();\n    neural_interfaces();\n    \n    // Support struts for printability\n    translate([-15, 0, 1])\n        cube([2, 25, 2], center=true);\n    translate([15, 0, 1])\n        cube([2, 25, 2], center=true);\n}",
    "renders": true
  },
  {
    "vehicle": "flapjack",
    "openscad_code": "// Realistic 3D-Printable Flapjack\n// Medium complexity, ~110 lines\n// No overhangs >45°, 1.2 mm wall thickness\n\n$fn=36;\nstack_height = 8;               // mm, thickness of one pancake\ndiameter = 70;                  // mm\nedge_r = 2.5;                   // mm, rolled edge radius\nbutter_pats = 5;                // number of butter pats\nsyrup_puddle_height = 1.0;      // mm\nstack_layers = 3;               // number of pancakes\n\nmodule pancake_base(h=stack_height, d=diameter){\n    // main disc with slight bulge\n    translate([0,0,h/2])\n    scale([1,1,0.92])\n    sphere(d=d);\n\n    // flat bottom\n    translate([0,0,0])\n    cylinder(h=h*0.45, d1=d, d2=d*0.97);\n}\n\nmodule rolled_edge(h=stack_height, d=diameter){\n    // torus around top rim\n    rotate_extrude()\n    translate([d/2-edge_r, 0, 0])\n    circle(r=edge_r);\n\n    // blend fillet\n    difference(){\n        cylinder(h=h*0.4, d=d+edge_r*2);\n        cylinder(h=h*0.4+0.01, d=d);\n    }\n}\n\nmodule bubbles(seed){\n    // random surface bubbles for texture\n    for(i=[0:20]){\n        translate([\n            rands(-diameter/2+4, diameter/2-4, 1, seed+i)[0],\n            rands(-diameter/2+4, diameter/2-4, 1, seed+i+100)[0],\n            rands(stack_height*0.4, stack_height*0.8, 1, seed+i+200)[0]\n        ])\n        sphere(r=rands(0.6,1.3,1,seed+i+300)[0]);\n    }\n}\n\nmodule butter_pat(){\n    // tapered cube with rounded top\n    hull(){\n        translate([0,0,0.5]) sphere(r=3.5);\n        translate([0,0,2]) sphere(r=3);\n    }\n}\n\nmodule syrup_puddle(){\n    // thin uneven disc\n    scale([1,1.1,1])\n    cylinder(h=syrup_puddle_height, d=diameter*0.7, $fn=32);\n}\n\nmodule stack(){\n    for(i=[0:stack_layers-1]){\n        translate([0,0,i*stack_height*0.95]){\n            // main pancake\n            union(){\n                pancake_base();\n                translate([0,0,stack_height*0.55]) rolled_edge();\n            }\n\n            // bubbles only on top layer\n            if(i==stack_layers-1){\n                bubbles(i*123);\n            }\n        }\n    }\n}\n\nmodule toppings(){\n    // butter pats scattered on top\n    for(i=[0:butter_pats-1]){\n        rotate([0,0,i*360/butter_pats])\n        translate([diameter/3.5,0,stack_layers*stack_height*0.95+0.2])\n        butter_pat();\n    }\n\n    // syrup\n    translate([0,0,stack_layers*stack_height*0.95+syrup_puddle_height/2])\n    syrup_puddle();\n}\n\n// Assemble flapjack\nunion(){\n    stack();\n    toppings();\n}",
    "renders": true
  },
  {
    "vehicle": "stoprotor",
    "openscad_code": "// Realistic Stoprotor – medium complexity\n// 3D-printable, ~75 mm Ø, no steep overhangs\n\n$fa = 1; $fs = 0.4;\n\n// ---------- PARAMETERS ----------\nbody_d = 75;            // main diameter\nbody_h = 22;\nshaft_d = 8;\nblade_w = 18;\nblade_l = 28;\nblade_t = 3;\ngap = 0.5;              // clearance for printing\nn_blades = 4;\n\n// ---------- MODULES ----------\nmodule body() {\n    difference() {\n        // main disc\n        cylinder(h = body_h, d = body_d, center = true);\n        \n        // central through-hole\n        translate([0, 0, -body_h/2-1])\n            cylinder(h = body_h+2, d = shaft_d+gap);\n    }\n}\n\nmodule blade() {\n    rotate([0, 90, 0])\n    difference() {\n        hull() {\n            // tapered blade\n            translate([-blade_l/2, 0, 0])\n                cube([blade_l, blade_w, blade_t], center = true);\n            translate([blade_l/2-2, 0, 0])\n                scale([0.6, 0.7, 1])\n                cube([blade_l, blade_w, blade_t], center = true);\n        }\n        \n        // lightening slot\n        translate([0, 0, -blade_t/2-1])\n            cube([blade_l*0.7, blade_w*0.4, blade_t+2], center = true);\n    }\n}\n\nmodule blades() {\n    for (i = [0 : 360/n_blades : 360-360/n_blades]) {\n        rotate([0, 0, i])\n        translate([body_d/2 - blade_l/2, 0, 0])\n            blade();\n    }\n}\n\nmodule keyway() {\n    // D-shaft key slot\n    rotate([0, 0, 0])\n    translate([0, shaft_d/2, -body_h/2])\n        cube([shaft_d*0.3, shaft_d*0.3, body_h], center = true);\n}\n\n// ---------- ASSEMBLY ----------\nunion() {\n    body();\n    blades();\n    keyway();\n}",
    "renders": true
  },
  {
    "vehicle": "monoaircraft",
    "openscad_code": "// Monoaircraft (single-person electric ultralight) – realistic style, medium complexity\n// Overall printable size ≈ 90 mm wingspan × 82 mm length × 30 mm thick\n// Wall thickness 1.2 mm for easy 3D printing\n\n// Parameters\nwall = 1.2;\nboom_r = 8;\nboom_h = 75;\npod_w = 28;\npod_h = 18;\npod_l = 42;\nwing_span = 90;\nwing_chord = 22;\nwing_t = 2.4;\ntail_span = 36;\ntail_chord = 14;\nprop_d = 22;\nprop_hub = 6;\nprop_blades = 3;\n\nmodule pod() {\n    difference() {\n        // main fuselage pod\n        hull() {\n            translate([0,0,pod_h/2-wall])\n                cube([pod_l,pod_w,pod_h], center=true);\n            translate([pod_l/2-8,0,0])\n                sphere(d=pod_w);\n        }\n        // cockpit opening\n        translate([pod_l/4,0,pod_h/2])\n            cube([pod_l/2+2,pod_w-2*wall,8], center=true);\n    }\n}\n\nmodule boom() {\n    // Tail boom tube\n    difference() {\n        cylinder(h=boom_h, r=boom_r, center=false);\n        translate([0,0,-1])\n            cylinder(h=boom_h+2, r=boom_r-wall, center=false);\n    }\n}\n\nmodule wing() {\n    // Main wing with rounded tips\n    difference() {\n        hull() {\n            translate([-wing_span/2+wing_chord/2,0,0])\n                cube([wing_chord,wing_t,wing_span], center=true);\n            translate([wing_span/2-wing_chord/2,0,0])\n                cube([wing_chord,wing_t,wing_span], center=true);\n        }\n        // Lightening holes\n        for(x=[-wing_span/2+wing_chord:wing_chord*2:wing_span/2-wing_chord])\n            translate([x,0,0])\n                cylinder(h=wing_t+1, r=3, center=true);\n    }\n}\n\nmodule h_stab() {\n    // Horizontal stabilizer\n    difference() {\n        hull() {\n            translate([-tail_span/2+tail_chord/2,0,0])\n                cube([tail_chord,wing_t,tail_span], center=true);\n            translate([tail_span/2-tail_chord/2,0,0])\n                cube([tail_chord,wing_t,tail_span], center=true);\n        }\n        for(x=[-tail_span/2+tail_chord:tail_chord*1.5:tail_span/2-tail_chord])\n            translate([x,0,0])\n                cylinder(h=wing_t+1, r=2, center=true);\n    }\n}\n\nmodule v_stab() {\n    // Vertical stabilizer\n    difference() {\n        cube([1.5*wall,18,tail_chord*1.3], center=true);\n        translate([0,6,0])\n            cube([wall+0.1,6,8], center=true);\n    }\n}\n\nmodule propeller() {\n    // Simple 3-blade prop\n    union() {\n        cylinder(h=wall*2, r=prop_hub/2, center=true);\n        for(i=[0:120:359])\n            rotate([0,0,i])\n                translate([prop_hub/2+prop_d/4,0,0])\n                    rotate([90,0,0])\n                        scale([1,1,0.2])\n                            cylinder(h=prop_d/2, r=prop_d/6, center=true);\n    }\n}\n\nmodule landing_gear() {\n    // Simple tricycle gear, no overhangs\n    // Nose wheel\n    translate([pod_l/2-12,-pod_w/2-10,-pod_h/2])\n        rotate([90,0,0])\n            cylinder(h=12, r=3);\n    // Main wheels\n    for(side=[-1,1])\n        translate([-pod_l/3,side*(pod_w/2+8),-pod_h/2])\n            rotate([90,0,0])\n                cylinder(h=10, r=4);\n}\n\n// Assembly\nunion() {\n    // Pod on boom\n    translate([0,0,boom_h/2])\n        pod();\n    boom();\n    \n    // Wing mounted on boom\n    translate([-boom_h/2+wing_chord/2+5,0,boom_r+wing_t/2])\n        rotate([0,90,0])\n            wing();\n    \n    // Tail surfaces at boom end\n    translate([0,0,boom_h])\n        union() {\n            h_stab();\n            translate([0,0,tail_span/2])\n                rotate([90,0,0])\n                    v_stab();\n        }\n    \n    // Propeller on nose\n    translate([pod_l/2+wall/2,0,boom_h/2])\n        rotate([0,90,0])\n            propeller();\n    \n    // Landing gear\n    translate([0,0,boom_h/2])\n        landing_gear();\n}",
    "renders": true
  },
  {
    "vehicle": "skybike",
    "openscad_code": "// Skybike - Medium complexity, realistic style\n// 3D printable with no overhangs, ~80mm length\n\n$fn = 32;\n\n// Main module\nmodule skybike() {\n    // Frame assembly\n    frame();\n    \n    // Propeller system\n    propeller();\n    \n    // Seat\n    seat();\n    \n    // Handlebars\n    handlebars();\n    \n    // Landing skids\n    landing_skids();\n}\n\n// Main frame structure\nmodule frame() {\n    // Central spine tube\n    rotate([0, 90, 0])\n        cylinder(h=60, d=8, center=true);\n    \n    // Front boom tube\n    translate([30, 0, 0])\n        rotate([0, 30, 0])\n            cylinder(h=40, d=6, center=true);\n    \n    // Rear boom tube\n    translate([-30, 0, 0])\n        rotate([0, -30, 0])\n            cylinder(h=35, d=6, center=true);\n    \n    // Cross braces\n    for(i = [-20:20:20]) {\n        translate([i, 0, 0])\n            rotate([90, 0, 0])\n                cylinder(h=25, d=4, center=true);\n    }\n}\n\n// Propeller assembly\nmodule propeller() {\n    // Motor housing\n    translate([0, 0, 15])\n        cylinder(h=12, d=18);\n    \n    // Propeller blades (3-blade design)\n    for(angle = [0:120:240]) {\n        rotate([0, 0, angle])\n            translate([0, 0, 21])\n                blade();\n    }\n    \n    // Hub cap\n    translate([0, 0, 28])\n        sphere(d=8);\n}\n\n// Single propeller blade\nmodule blade() {\n    difference() {\n        // Main blade shape\n        translate([0, 25, 0])\n            rotate([90, 0, 0])\n                scale([1, 3, 0.2])\n                    sphere(d=8);\n        \n        // Cutout for weight reduction\n        translate([0, 25, 0])\n            rotate([90, 0, 0])\n                scale([0.7, 2.5, 0.3])\n                    sphere(d=6);\n    }\n}\n\n// Pilot seat\nmodule seat() {\n    // Seat base\n    translate([0, 0, -8])\n        difference() {\n            cube([20, 25, 4], center=true);\n            translate([0, 5, 0])\n                cube([18, 15, 6], center=true);\n        }\n    \n    // Seat back\n    translate([0, -10, -3])\n        cube([18, 4, 10], center=true);\n}\n\n// Handlebar assembly\nmodule handlebars() {\n    // Stem\n    translate([28, 0, -5])\n        rotate([90, 0, 0])\n            cylinder(h=15, d=4);\n    \n    // Handlebar\n    translate([28, 0, 3])\n        rotate([0, 0, 90])\n            cylinder(h=25, d=3);\n    \n    // Grips\n    for(side = [-1, 1]) {\n        translate([28, side * 11, 3])\n            rotate([0, 0, 90])\n                cylinder(h=5, d=4);\n    }\n}\n\n// Landing skids\nmodule landing_skids() {\n    // Left skid\n    translate([0, -12, -15])\n        rotate([90, 0, 0])\n            cylinder(h=60, d=4);\n    \n    // Right skid\n    translate([0, 12, -15])\n        rotate([90, 0, 0])\n            cylinder(h=60, d=4);\n    \n    // Cross bars\n    for(pos = [-20:20:40]) {\n        translate([pos, 0, -15])\n            rotate([0, 90, 0])\n                cylinder(h=24, d=3);\n    }\n}\n\n// Render the complete skybike\nskybike();",
    "renders": true
  },
  {
    "vehicle": "skyboard",
    "openscad_code": "// Skyboard / Hoverboard - Realistic medium-complexity model\n// Designed for 3D printing (no overhangs, 2 mm wall thickness)\n\n$fa=2; $fs=0.5;\n\n// Overall dimensions\nboard_l = 80;\nboard_w = 25;\nboard_h = 10;\nwheel_r = 6;\nwheel_w = 3;\nhover_gap = 3;\n\nmodule roundedBox(l, w, h, r){\n    // Hollow rounded case with 2 mm walls\n    difference(){\n        minkowski(){\n            cube([l-r*2, w-r*2, h-r*2], center=true);\n            sphere(r);\n        }\n        translate([0,0,-1])\n        minkowski(){\n            cube([l-r*2-4, w-r*2-4, h-r*2-2], center=true);\n            sphere(r);\n        }\n    }\n}\n\nmodule gripPad(l, w, h, n){\n    // Rubber grip pattern on top\n    for(i=[0:n-1])\n        translate([l/n*(i+0.5)-l/2, 0, h/2])\n        cube([l/n*0.8, w*0.9, h], center=true);\n}\n\nmodule ledStrip(l, h){\n    // Front and rear LED strips\n    color(\"cyan\")\n    translate([0, 0, h/2+0.5])\n    cube([l, 2, 1], center=true);\n}\n\nmodule wheelCover(r, w, h){\n    // Decorative wheel housings\n    difference(){\n        cylinder(h=h, r=r+3, center=true);\n        cylinder(h=h+1, r=r+1, center=true);\n    }\n}\n\nmodule hoverJet(r, h){\n    // Jet thruster underneath\n    cylinder(h=h, r1=r, r2=r*0.6, center=true);\n    translate([0,0,h/2])\n    sphere(r);\n}\n\nmodule skyboard(){\n    // Main board\n    color(\"silver\")\n    roundedBox(board_l, board_w, board_h, 4);\n\n    // Top grip pads\n    translate([0,0,board_h/2+0.5])\n    color(\"darkgrey\")\n    gripPad(board_l*0.7, board_w*0.4, 1, 8);\n\n    // LED strips\n    translate([board_l/2-1, 0, board_h/2])\n    ledStrip(2, board_h);\n    translate([-board_l/2+1, 0, board_h/2])\n    ledStrip(2, board_h);\n\n    // Wheel covers (4 corners)\n    for(x=[-1,1])\n    for(y=[-1,1])\n    translate([x*(board_l/2-wheel_w), y*(board_w/2-wheel_w), -board_h/2])\n    color(\"black\")\n    wheelCover(wheel_r, wheel_w, 4);\n\n    // Hover jets (3 along centerline)\n    for(i=[-1:1])\n    translate([i*board_l/3, 0, -board_h/2-hover_gap])\n    color(\"blue\")\n    hoverJet(4, 6);\n}\n\nskyboard();",
    "renders": true
  },
  {
    "vehicle": "jetpack",
    "openscad_code": "// Jetpack with realistic styling - medium complexity\n// Overall dimensions: 80mm x 45mm x 100mm (L x W x H)\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main tank module\nmodule fuel_tank(radius, height) {\n    difference() {\n        // Outer cylinder\n        cylinder(h=height, r=radius, $fn=32);\n        \n        // Inner hollow cylinder\n        translate([0, 0, wall])\n            cylinder(h=height-2*wall, r=radius-wall, $fn=32);\n        \n        // Top cap rounding\n        translate([0, 0, height])\n            sphere(r=radius, $fn=32);\n        \n        // Inner top rounding\n        translate([0, 0, height-wall])\n            sphere(r=radius-wall, $fn=32);\n    }\n}\n\n// Jet exhaust nozzle\nmodule nozzle(radius, height) {\n    difference() {\n        // Main cone shape\n        cylinder(h1=height, h2=0, r1=radius, r2=radius/2, $fn=32);\n        \n        // Inner hollow cone\n        translate([0, 0, wall])\n            cylinder(h1=height-wall, h2=0, r1=radius-wall, r2=radius/2-wall, $fn=32);\n    }\n}\n\n// Mounting bracket for harness\nmodule harness_mount() {\n    // Vertical support\n    translate([-20, 0, 40])\n        cube([wall, 20, 20]);\n    \n    // Horizontal plate\n    translate([-20, 0, 60])\n        cube([wall, 20, wall]);\n    \n    // Reinforcement ribs\n    for(i = [0:2]) {\n        translate([-20+wall, 5+i*5, 40])\n            cube([wall, wall, 20]);\n    }\n}\n\n// Control panel\nmodule control_panel() {\n    // Main panel\n    translate([0, 20, 70])\n        cube([30, wall, 15]);\n    \n    // Buttons\n    for(i = [0:2]) {\n        translate([-10+i*10, 20+wall, 75])\n            sphere(r=2, $fn=16);\n    }\n    \n    // Display screen\n    translate([0, 20+wall, 80])\n        cube([20, wall/2, 8]);\n}\n\n// Jetpack assembly\nunion() {\n    // Left fuel tank\n    translate([-25, 0, 0])\n        fuel_tank(radius=15, height=60);\n    \n    // Right fuel tank\n    translate([25, 0, 0])\n        fuel_tank(radius=15, height=60);\n    \n    // Connecting frame\n    translate([-25, -15, 30])\n        cube([50, wall, 30]);\n    \n    // Top cross brace\n    translate([-25, -15, 60])\n        cube([50, 30, wall]);\n    \n    // Bottom cross brace\n    translate([-25, -15, 0])\n        cube([50, 30, wall]);\n    \n    // Left nozzle\n    translate([-25, -15, 0])\n        rotate([180, 0, 0])\n        nozzle(radius=8, height=15);\n    \n    // Right nozzle\n    translate([25, -15, 0])\n        rotate([180, 0, 0])\n        nozzle(radius=8, height=15);\n    \n    // Harness mounts (2x)\n    harness_mount();\n    mirror([1, 0, 0])\n        harness_mount();\n    \n    // Control panel\n    control_panel();\n    \n    // Valve caps on tanks\n    translate([-25, 0, 60])\n        cylinder(h=5, r=8, $fn=32);\n    \n    translate([25, 0, 60])\n        cylinder(h=5, r=8, $fn=32);\n    \n    // Pressure gauge\n    translate([-25, 15, 45])\n        sphere(r=5, $fn=32);\n    \n    translate([25, 15, 45])\n        sphere(r=5, $fn=32);\n}",
    "renders": true
  },
  {
    "vehicle": "rocketbelt",
    "openscad_code": "// Realistic Rocketbelt - Medium Complexity\n// Dimensions in mm, sized for 3D printing\n\n// Overall scale factor\nscale_factor = 0.8;\n\n// Fuel tanks\nmodule fuel_tanks() {\n    // Left tank\n    translate([-40, 0, 0]) {\n        // Main cylinder\n        cylinder(h=120, d=25, $fn=32);\n        // Top dome\n        translate([0, 0, 120]) sphere(d=25, $fn=32);\n        // Bottom dome\n        translate([0, 0, 0]) sphere(d=25, $fn=32);\n    }\n    \n    // Right tank\n    translate([40, 0, 0]) {\n        cylinder(h=120, d=25, $fn=32);\n        translate([0, 0, 120]) sphere(d=25, $fn=32);\n        translate([0, 0, 0]) sphere(d=25, $fn=32);\n    }\n}\n\n// Engine assembly\nmodule engines() {\n    // Left engine\n    translate([-40, 0, -20]) {\n        // Bell nozzle\n        cylinder(h1=30, h2=20, r1=15, r2=8, $fn=32);\n        // Combustion chamber\n        translate([0, 0, 30]) cylinder(h=25, d=20, $fn=32);\n        // Fuel lines\n        for(i=[-1:1]) {\n            rotate([0, i*30, 0]) \n            translate([0, 0, 55]) cylinder(h=40, d=4, $fn=8);\n        }\n    }\n    \n    // Right engine\n    translate([40, 0, -20]) {\n        cylinder(h1=30, h2=20, r1=15, r2=8, $fn=32);\n        translate([0, 0, 30]) cylinder(h=25, d=20, $fn=32);\n        for(i=[-1:1]) {\n            rotate([0, i*30, 0]) \n            translate([0, 0, 55]) cylinder(h=40, d=4, $fn=8);\n        }\n    }\n}\n\n// Control valves and piping\nmodule control_system() {\n    // Main valve block\n    translate([0, 25, 60]) {\n        cube([80, 20, 15], center=true);\n        \n        // Valve handles\n        for(i=[-1,1]) {\n            translate([i*30, 12.5, 0]) {\n                rotate([90, 0, 0]) cylinder(h=10, d=6, $fn=16);\n                translate([0, 0, 10]) sphere(d=8, $fn=16);\n            }\n        }\n    }\n    \n    // Pressure gauge\n    translate([0, 35, 90]) {\n        cylinder(h=5, d=20, $fn=32);\n        translate([0, 0, 5]) sphere(d=20, $fn=32);\n    }\n}\n\n// Frame and harness\nmodule frame() {\n    // Main frame bar\n    rotate([90, 0, 0]) {\n        translate([0, 0, 0]) cylinder(h=100, d=8, $fn=16);\n    }\n    \n    // Cross supports\n    for(z=[30, 60, 90]) {\n        translate([0, 0, z]) {\n            rotate([0, 90, 0]) cylinder(h=80, d=6, $fn=16);\n        }\n    }\n    \n    // Shoulder straps\n    difference() {\n        // Left strap\n        translate([-50, 0, 100]) {\n            cube([20, 5, 50]);\n            // Mounting holes\n            for(h=[15, 35]) {\n                translate([10, -2.5, h]) cylinder(h=10, d=4, $fn=16);\n            }\n        }\n        \n        // Right strap\n        translate([30, 0, 100]) {\n            cube([20, 5, 50]);\n            for(h=[15, 35]) {\n                translate([10, -2.5, h]) cylinder(h=10, d=4, $fn=16);\n            }\n        }\n    }\n}\n\n// Throttle controls\nmodule throttle_controls() {\n    // Left hand grip\n    translate([-60, 0, 50]) {\n        rotate([0, 0, -30]) {\n            cylinder(h=30, d=12, $fn=16);\n            translate([0, 0, 30]) sphere(d=12, $fn=16);\n            // Throttle lever\n            rotate([0, 90, 0]) translate([0, 15, 0]) cylinder(h=20, d=6, $fn=8);\n        }\n    }\n    \n    // Right hand grip\n    translate([60, 0, 50]) {\n        rotate([0, 0, 30]) {\n            cylinder(h=30, d=12, $fn=16);\n            translate([0, 0, 30]) sphere(d=12, $fn=16);\n            rotate([0, -90, 0]) translate([0, 15, 0]) cylinder(h=20, d=6, $fn=8);\n        }\n    }\n}\n\n// Main assembly\nscale([scale_factor, scale_factor, scale_factor]) {\n    union() {\n        fuel_tanks();\n        engines();\n        control_system();\n        frame();\n        throttle_controls();\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "wingpack",
    "openscad_code": "// Wingpack - Realistic style, medium complexity\n// Main body with shoulder straps and two jet engines\n\n$fn = 32; // Smooth curves for printability\n\n// Overall dimensions\npack_width = 60;\npack_height = 80;\npack_depth = 25;\nfuel_tank_radius = 12;\nengine_length = 30;\nengine_radius = 8;\n\n// Main backpack body\nmodule backpack_body() {\n    difference() {\n        // Main shell\n        hull() {\n            // Curved back panel\n            translate([0, 0, pack_depth/2])\n                cube([pack_width, pack_height, pack_depth], center=true);\n            // Rounded top\n            translate([0, pack_height/2 - 5, pack_depth/2 - 5])\n                sphere(r=15);\n            // Rounded bottom\n            translate([0, -pack_height/2 + 5, pack_depth/2 - 5])\n                sphere(r=15);\n        }\n        \n        // Hollow interior\n        translate([0, 0, pack_depth/2 + 2])\n            cube([pack_width - 4, pack_height - 4, pack_depth], center=true);\n        \n        // Air intakes on sides\n        for(side = [-1, 1]) {\n            translate([side * (pack_width/2 - 3), pack_height/4, pack_depth/2])\n                rotate([0, 90, 0])\n                    cylinder(h=10, r1=5, r2=7);\n        }\n    }\n}\n\n// Fuel tank between engines\nmodule fuel_tank() {\n    translate([0, 0, pack_depth + fuel_tank_radius])\n        rotate([90, 0, 0])\n            cylinder(h=pack_width - 20, r=fuel_tank_radius, center=true);\n}\n\n// Jet engine module\nmodule jet_engine(offset_x) {\n    translate([offset_x, 0, pack_depth + fuel_tank_radius*2]) {\n        // Engine housing\n        difference() {\n            cylinder(h=engine_length, r=engine_radius);\n            translate([0, 0, -1])\n                cylinder(h=engine_length + 2, r=engine_radius - 2);\n        }\n        \n        // Exhaust nozzle\n        translate([0, 0, engine_length])\n            cylinder(h=8, r1=engine_radius, r2=engine_radius - 3);\n        \n        // Intake fan\n        translate([0, 0, -1])\n            difference() {\n                cylinder(h=3, r=engine_radius - 1);\n                cylinder(h=4, r=engine_radius - 4);\n            }\n        \n        // Engine supports\n        translate([0, 0, pack_depth + fuel_tank_radius*2 + engine_length/2])\n            rotate([90, 0, 0])\n                cylinder(h=fuel_tank_radius*2, r=3);\n    }\n}\n\n// Shoulder straps\nmodule shoulder_straps() {\n    for(side = [-1, 1]) {\n        translate([side * (pack_width/2 - 10), 0, pack_depth/2 - 2]) {\n            difference() {\n                // Strap body\n                cube([8, pack_height - 20, 3], center=true);\n                // Strap holes\n                for(i = [-2:2]) {\n                    translate([0, i * 15, 1])\n                        cylinder(h=4, r=1.5);\n                }\n            }\n        }\n    }\n}\n\n// Back padding\nmodule back_padding() {\n    translate([0, 0, 1]) {\n        // Main pad\n        cube([pack_width - 10, pack_height - 10, 2], center=true);\n        \n        // Ventilation grooves\n        for(i = [-3:3]) {\n            translate([0, i * 10, 1])\n                cube([pack_width - 12, 2, 2], center=true);\n        }\n    }\n}\n\n// Control handles\nmodule control_handles() {\n    for(side = [-1, 1]) {\n        translate([side * (pack_width/2 + 5), -pack_height/2, pack_depth/2 + 10]) {\n            rotate([45, 0, side * 30])\n                cylinder(h=20, r=3);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main components\n    backpack_body();\n    fuel_tank();\n    \n    // Two engines\n    for(side = [-1, 1]) {\n        jet_engine(side * (pack_width/2 - engine_radius - 5));\n    }\n    \n    // Harness system\n    shoulder_straps();\n    back_padding();\n    \n    // Controls\n    control_handles();\n}",
    "renders": true
  },
  {
    "vehicle": "jetwing",
    "openscad_code": "// Jetwing - realistic style, medium complexity\n// Scaled for 3D printing, ~80mm wingspan\n\n$fn = 32;\n\n// Main wing assembly\nmodule jetwing() {\n    // Central fuselage\n    union() {\n        // Main body\n        translate([0, 0, 5])\n            rotate([0, 0, 0])\n                cylinder(h = 30, r1 = 5, r2 = 3);\n        \n        // Cockpit\n        translate([0, 0, 30])\n            rotate([0, 0, 0])\n                sphere(d = 8);\n        \n        // Engine nacelles\n        for(side = [-1, 1]) {\n            translate([side * 12, 0, 4])\n                cylinder(h = 25, r = 3);\n            \n            // Engine exhaust\n            translate([side * 12, 0, -2])\n                cylinder(h = 6, r1 = 2.5, r2 = 2);\n        }\n    }\n    \n    // Main wings\n    difference() {\n        // Wing base\n        translate([0, 0, 10])\n            rotate([0, 0, 0])\n                cube([60, 15, 2], center = true);\n        \n        // Wing root fairings\n        for(side = [-1, 1]) {\n            translate([side * 5, 0, 10])\n                cylinder(h = 3, r = 6, $fn = 16);\n        }\n    }\n    \n    // Wing tips\n    for(side = [-1, 1]) {\n        translate([side * 30, 0, 10])\n            rotate([90, 0, 0])\n                cylinder(h = 8, r1 = 2, r2 = 1);\n    }\n    \n    // Vertical stabilizers\n    for(side = [-1, 1]) {\n        translate([side * 15, 0, 25])\n            rotate([0, side * 20, 0])\n                cube([0.5, 12, 8]);\n    }\n    \n    // Control surfaces\n    // Ailerons\n    for(side = [-1, 1]) {\n        translate([side * 20, 0, 9])\n            cube([10, 14, 0.5], center = true);\n    }\n    \n    // Flaps\n    for(side = [-1, 1]) {\n        translate([side * 12, 0, 9])\n            cube([8, 12, 0.5], center = true);\n    }\n    \n    // Landing gear bays\n    difference() {\n        // Main gear bay\n        translate([0, 0, 5])\n            cube([8, 10, 4], center = true);\n        \n        // Gear door cutouts\n        for(side = [-1, 1]) {\n            translate([side * 3, 0, 5])\n                cube([2, 8, 3.5], center = true);\n        }\n    }\n    \n    // Wing fillets\n    for(side = [-1, 1]) {\n        hull() {\n            translate([side * 5, 0, 10])\n                sphere(r = 3);\n            translate([side * 25, 0, 10])\n                sphere(r = 1.5);\n        }\n    }\n    \n    // Canards (forward control surfaces)\n    for(side = [-1, 1]) {\n        translate([side * 8, 0, 20])\n            rotate([0, 0, side * 5])\n                cube([12, 3, 0.5], center = true);\n    }\n}\n\n// Create the jetwing\njetwing();",
    "renders": true
  },
  {
    "vehicle": "skysuit",
    "openscad_code": "// SkySuit - Realistic Medium Complexity\n// 3D Printable Skydiving Wingsuit Model\n// Dimensions: 80mm tall, 60mm wide, 12mm deep\n\n// Overall scale factor for easy resizing\nscale_factor = 1;\n\n// Wall thickness for 3D printing\nwall = 1.2;\n\nmodule main_assembly() {\n    // Central torso core\n    difference() {\n        // Main torso body\n        translate([0, 0, 30]) \n            scale([0.6, 0.25, 1.2])\n            sphere(15);\n        \n        // Neck hole\n        translate([0, -2, 42])\n            scale([0.3, 0.3, 0.5])\n            sphere(10);\n    }\n    \n    // Chest rig container\n    difference() {\n        translate([0, 2, 32])\n            scale([0.8, 0.3, 1])\n            cube([20, 8, 25], center=true);\n        \n        // Container cavity\n        translate([0, 2, 32])\n            scale([0.75, 0.25, 0.9])\n            cube([18, 6, 22], center=true);\n    }\n    \n    // Helmet\n    difference() {\n        translate([0, -12, 45])\n            scale([0.8, 0.9, 1])\n            sphere(12);\n        \n        // Face opening\n        translate([0, -20, 45])\n            scale([0.5, 0.3, 0.6])\n            sphere(8);\n    }\n    \n    // Left arm with wing\n    union() {\n        // Upper arm\n        translate([-20, 0, 35])\n            rotate([0, 30, -10])\n            cylinder(h=15, r1=4, r2=3.5);\n        \n        // Lower arm\n        translate([-30, 5, 25])\n            rotate([0, 45, -20])\n            cylinder(h=12, r1=3.5, r2=3);\n        \n        // Wing surface\n        difference() {\n            translate([-35, 0, 15])\n                rotate([0, 0, 15])\n                scale([1, 0.1, 1.5])\n                cube([40, wall, 25]);\n            \n            // Wing cutout\n            translate([-20, -1, 15])\n                scale([0.8, 0.2, 1.3])\n                cube([30, wall+1, 20]);\n        }\n    }\n    \n    // Right arm with wing (mirrored)\n    mirror([1, 0, 0]) {\n        union() {\n            // Upper arm\n            translate([-20, 0, 35])\n                rotate([0, 30, -10])\n                cylinder(h=15, r1=4, r2=3.5);\n            \n            // Lower arm\n            translate([-30, 5, 25])\n                rotate([0, 45, -20])\n                cylinder(h=12, r1=3.5, r2=3);\n            \n            // Wing surface\n            difference() {\n                translate([-35, 0, 15])\n                    rotate([0, 0, 15])\n                    scale([1, 0.1, 1.5])\n                    cube([40, wall, 25]);\n                \n                // Wing cutout\n                translate([-20, -1, 15])\n                    scale([0.8, 0.2, 1.3])\n                    cube([30, wall+1, 20]);\n            }\n        }\n    }\n    \n    // Legs\n    for (x = [-8, 8]) {\n        translate([x, 5, 15])\n            cylinder(h=20, r1=5, r2=4);\n        \n        translate([x, 5, 0])\n            cylinder(h=15, r1=4, r2=3.5);\n    }\n    \n    // Wing surface between legs\n    difference() {\n        translate([0, 8, 5])\n            rotate([90, 0, 0])\n            scale([1.2, 0.1, 1])\n            cylinder(h=25, r1=20, r2=15);\n        \n        // Cutout for body\n        translate([0, 6, 5])\n            rotate([90, 0, 0])\n            scale([0.8, 0.2, 0.8])\n            cylinder(h=30, r1=12, r2=8);\n    }\n    \n    // Altimeter on wrist\n    translate([-32, 6, 20])\n        rotate([0, 45, -20])\n        cylinder(h=2, r=3);\n    \n    // Booties (wing extensions on feet)\n    for (x = [-8, 8]) {\n        translate([x, 5, -2])\n            rotate([0, 10, 0])\n            scale([1.5, 0.8, 0.3])\n            cube([12, 6, 2], center=true);\n    }\n    \n    // Riser covers\n    for (x = [-10, 10]) {\n        translate([x, 2, 38])\n            rotate([0, 30, 0])\n            scale([0.3, 0.1, 1])\n            cube([5, 2, 8], center=true);\n    }\n}\n\n// Main render with scale\nscale(scale_factor) main_assembly();",
    "renders": true
  },
  {
    "vehicle": "wingsuit",
    "openscad_code": "// Wingsuit - Realistic style, medium complexity\n// All units in mm, suitable for 3D printing\n\n// Overall scale\nscale_factor = 0.5;\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main torso module\nmodule torso() {\n    // Central body\n    difference() {\n        union() {\n            // Chest area\n            translate([0, 0, 20])\n                scale([1.2, 0.8, 1.5])\n                sphere(d=30);\n            \n            // Abdomen\n            translate([0, 0, 0])\n                scale([1, 0.7, 2])\n                cylinder(d=25, h=20);\n            \n            // Lower back extension\n            translate([0, -15, -10])\n                scale([1, 1.2, 0.8])\n                cube([20, 25, 15], center=true);\n        }\n        \n        // Hollow interior\n        translate([0, 0, 10])\n            scale([0.8, 0.6, 0.9])\n            sphere(d=28);\n        \n        translate([0, 0, 0])\n            scale([0.8, 0.5, 0.9])\n            cylinder(d=23, h=20);\n    }\n}\n\n// Wing rib structure\nmodule wing_rib(length, width, thickness) {\n    hull() {\n        translate([0, 0, 0])\n            cube([thickness, width, 2], center=true);\n        \n        translate([length, 0, 0])\n            cube([thickness, width*0.7, 2], center=true);\n    }\n}\n\n// Main wing module\nmodule wing(side) {\n    mirror([side, 0, 0]) {\n        // Main wing surface\n        difference() {\n            // Upper surface\n            translate([10, 0, 0])\n                rotate([0, 10, 0])\n                scale([2.5, 1, 0.3])\n                cube([40, 60, wall]);\n            \n            // Lower surface\n            translate([10, 0, -wall])\n                rotate([0, 10, 0])\n                scale([2.4, 0.9, 0.3])\n                cube([40, 58, wall]);\n        }\n        \n        // Wing ribs for structure\n        for (i = [0:10:40]) {\n            translate([i+10, 0, 0])\n                rotate([0, 10, 0])\n                wing_rib(5, 60-i, wall);\n        }\n        \n        // Wing tip\n        translate([50, 0, 0])\n            rotate([0, 0, 90])\n            cylinder(d=10, h=wall);\n    }\n}\n\n// Arm wing module\nmodule arm_wing(side) {\n    mirror([side, 0, 0]) {\n        // Arm wing surface\n        difference() {\n            translate([5, 25, 5])\n                rotate([0, 15, -5])\n                scale([1.5, 1.8, 0.3])\n                cube([30, 25, wall]);\n            \n            translate([5, 25, 5-wall])\n                rotate([0, 15, -5])\n                scale([1.4, 1.7, 0.3])\n                cube([30, 23, wall]);\n        }\n    }\n}\n\n// Leg wing module\nmodule leg_wing(side) {\n    mirror([side, 0, 0]) {\n        difference() {\n            translate([-5, -25, -5])\n                rotate([0, -10, 5])\n                scale([1, 2, 0.3])\n                cube([25, 30, wall]);\n            \n            translate([-5, -25, -5-wall])\n                rotate([0, -10, 5])\n                scale([0.9, 1.9, 0.3])\n                cube([25, 28, wall]);\n        }\n    }\n}\n\n// Head/helmet module\nmodule helmet() {\n    difference() {\n        // Helmet shell\n        translate([0, 10, 35])\n            scale([0.8, 0.9, 1])\n            sphere(d=25);\n        \n        // Face opening\n        translate([0, 15, 35])\n            scale([0.6, 0.7, 0.8])\n            sphere(d=20);\n    }\n}\n\n// Assembly\nscale([scale_factor, scale_factor, scale_factor]) {\n    union() {\n        // Main body\n        torso();\n        \n        // Head\n        helmet();\n        \n        // Wings\n        wing(1);    // Right wing\n        wing(-1);   // Left wing\n        \n        // Arm wings\n        arm_wing(1);\n        arm_wing(-1);\n        \n        // Leg wings\n        leg_wing(1);\n        leg_wing(-1);\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "skyjump",
    "openscad_code": "// Skyjump model for 3D printing\n// Realistic style, medium complexity\n\n$fn = 32;\n\n// Overall dimensions\nlength = 80;\nwidth = 30;\nheight = 60;\nplatform_height = 4;\nleg_diameter = 3;\nrailing_height = 8;\n\n// Main platform\nmodule platform() {\n    difference() {\n        // Base platform\n        cube([length, width, platform_height], center=true);\n        \n        // Hollow bottom for printability\n        translate([0, 0, -platform_height/2 + 1])\n            cube([length-4, width-4, platform_height], center=true);\n    }\n}\n\n// Support legs\nmodule legs() {\n    // Front legs\n    for (x = [-length/2 + 5, length/2 - 5]) {\n        translate([x, -width/2 + 5, -height/2 + platform_height/2])\n            cylinder(h=height - platform_height, d=leg_diameter);\n        translate([x, width/2 - 5, -height/2 + platform_height/2])\n            cylinder(h=height - platform_height, d=leg_diameter);\n    }\n    \n    // Back legs\n    for (x = [-length/2 + 10, length/2 - 10]) {\n        translate([x, -width/2 + 5, -height/2 + platform_height/2])\n            cylinder(h=height - platform_height, d=leg_diameter);\n        translate([x, width/2 - 5, -height/2 + platform_height/2])\n            cylinder(h=height - platform_height, d=leg_diameter);\n    }\n}\n\n// Railing posts\nmodule railing_posts() {\n    for (x = [-length/2 + 3, -length/2 + 20, 0, length/2 - 20, length/2 - 3]) {\n        translate([x, -width/2 + 3, platform_height/2 + railing_height/2])\n            cube([2, 2, railing_height], center=true);\n        translate([x, width/2 - 3, platform_height/2 + railing_height/2])\n            cube([2, 2, railing_height], center=true);\n    }\n}\n\n// Railing bars\nmodule railings() {\n    // Front and back rails\n    translate([0, -width/2 + 3, platform_height + railing_height - 1])\n        cube([length - 6, 2, 2], center=true);\n    translate([0, width/2 - 3, platform_height + railing_height - 1])\n        cube([length - 6, 2, 2], center=true);\n    \n    // Side rails\n    translate([-length/2 + 3, 0, platform_height + railing_height - 1])\n        cube([2, width - 6, 2], center=true);\n    translate([length/2 - 3, 0, platform_height + railing_height - 1])\n        cube([2, width - 6, 2], center=true);\n}\n\n// Jumping board\nmodule jump_board() {\n    translate([length/2 - 10, 0, platform_height/2])\n        cube([20, width - 6, 2], center=true);\n    \n    // Board tip\n    translate([length/2 + 5, 0, platform_height/2 - 2])\n        cube([10, width - 10, 2], center=true);\n}\n\n// Ladder\nmodule ladder() {\n    // Ladder sides\n    translate([-length/2 + 5, -width/2 + 2, -height/2 + platform_height/2 + 5])\n        cube([2, 2, height - platform_height - 10], center=true);\n    translate([-length/2 + 5, width/2 - 2, -height/2 + platform_height/2 + 5])\n        cube([2, 2, height - platform_height - 10], center=true);\n    \n    // Ladder rungs\n    for (z = [0:5:height - platform_height - 15]) {\n        translate([-length/2 + 5, 0, -height/2 + platform_height/2 + 5 + z])\n            cube([2, width - 4, 1], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    platform();\n    legs();\n    railing_posts();\n    railings();\n    jump_board();\n    ladder();\n}",
    "renders": true
  },
  {
    "vehicle": "skydive",
    "openscad_code": "// Skydive Scene - Realistic Style, Medium Complexity\n// Features: Skydiver with parachute, harness, rig, and 3D-printable orientation\n\n// Overall scale\nscale_factor = 0.8;  // Adjust to fit 50-100mm print bed\n\n// Basic dimensions (mm)\nbody_height = 30;\nbody_width = 12;\nbody_depth = 8;\nhead_diameter = 8;\n\n// Parachute dimensions\ncanopy_diameter = 45;\ncanopy_height = 12;\n\n// Harness and rig thickness\nrig_thickness = 2;\n\n// Skydiver body\nmodule skydiver_body() {\n    // Torso\n    color(\"ForestGreen\")\n    translate([0, 0, body_height/2])\n        cube([body_width, body_depth, body_height], center=true);\n\n    // Head\n    color(\"LightSalmon\")\n    translate([0, 0, body_height + head_diameter/2 - 2])\n        sphere(d=head_diameter, $fn=20);\n\n    // Arms outstretched\n    for(side = [-1, 1]) {\n        color(\"ForestGreen\")\n        translate([side * body_width/1.5, 0, body_height * 0.8])\n            rotate([90, 0, 0])\n                cylinder(h=body_width/2, d=4, center=true);\n    }\n\n    // Legs together\n    color(\"DarkBlue\")\n    translate([0, 0, body_height/4 - 5])\n        cube([body_width/2, body_depth/1.5, body_height/2], center=true);\n}\n\n// Harness and rig container\nmodule harness_and_rig() {\n    // Main container on back\n    color(\"DarkGray\")\n    difference() {\n        translate([0, -body_depth/2 - rig_thickness/2, body_height/2])\n            cube([body_width * 1.2, rig_thickness, body_height * 0.8], center=true);\n        // Cutout for realism\n        translate([0, -body_depth/2 - rig_thickness/2, body_height/2 + 5])\n            cube([body_width * 1.2 * 0.8, rig_thickness + 0.1, 8], center=true);\n    }\n\n    // Shoulder straps\n    for(side = [-1, 1]) {\n        color(\"Black\")\n        translate([side * body_width/2, 0, body_height * 0.75])\n            cube([2, body_depth/2, 8], center=true);\n    }\n\n    // Leg straps\n    for(side = [-1, 1]) {\n        color(\"Black\")\n        translate([side * body_width/3, 0, body_height/4])\n            rotate([90, 0, 90])\n                cylinder(h=body_depth/1.5, d=2, center=true);\n    }\n}\n\n// Parachute canopy\nmodule parachute_canopy() {\n    color(\"BrightRed\")\n    translate([0, 0, body_height + head_diameter + 20])\n        cylinder(d1=canopy_diameter, d2=canopy_diameter * 0.9, h=canopy_height, $fn=32);\n}\n\n// Suspension lines\nmodule suspension_lines() {\n    line_count = 8;\n    for(i = [0:line_count-1]) {\n        angle = i * 360 / line_count;\n        x = cos(angle) * (canopy_diameter/2 * 0.8);\n        y = sin(angle) * (canopy_diameter/2 * 0.8);\n        \n        color(\"White\")\n        translate([x, y, body_height + head_diameter + 20 - canopy_height/2])\n            cylinder(h=20, d=0.5, center=false);\n    }\n}\n\n// Main assembly\nmodule skydive_scene() {\n    scale(scale_factor) {\n        union() {\n            // Skydiver and gear\n            skydiver_body();\n            harness_and_rig();\n            \n            // Parachute above\n            parachute_canopy();\n            suspension_lines();\n        }\n    }\n}\n\n// 3D-printable orientation (laying flat)\nrotate([0, 90, 0])\n    translate([0, 0, -10])\n        skydive_scene();",
    "renders": true
  },
  {
    "vehicle": "parawing",
    "openscad_code": "// Parawing / Ram-air parachute\n// Medium complexity, realistic style\n// Designed for 3D printing (no overhangs, 1 mm walls)\n\n$fn = 36;\n\n// ===== PARAMETERS =====\ncell_count      = 7;          // number of cells across the span\nchord           = 60;         // front-to-back length\nhalf_span       = 70;         // half of total span\nrib_wall        = 1.2;        // wall thickness for ribs and skins\nnose_radius     = 4;          // leading edge radius\ncell_depth      = 10;         // internal cell height\nbridle_length   = 40;\nbridle_diam     = 1.2;\nline_diam       = 0.8;\nline_length     = 30;\n\n// ===== MODULES =====\n\n// Ram-air inflated cell skin\nmodule cell_skin(chord, span, depth, rib_wall) {\n    difference() {\n        // Outer skin\n        hull() {\n            translate([0, -span/2, 0])\n                cylinder(h = depth, r = rib_wall, center = true);\n            translate([0,  span/2, 0])\n                cylinder(h = depth, r = rib_wall, center = true);\n            translate([chord-rib_wall, -span/2, 0])\n                cylinder(h = depth, r = rib_wall, center = true);\n            translate([chord-rib_wall,  span/2, 0])\n                cylinder(h = depth, r = rib_wall, center = true);\n        }\n        // Hollow interior\n        hull() {\n            translate([rib_wall, -span/2+rib_wall, 0])\n                cylinder(h = depth-2*rib_wall, r = rib_wall, center = true);\n            translate([rib_wall,  span/2-rib_wall, 0])\n                cylinder(h = depth-2*rib_wall, r = rib_wall, center = true);\n            translate([chord-2*rib_wall, -span/2+rib_wall, 0])\n                cylinder(h = depth-2*rib_wall, r = rib_wall, center = true);\n            translate([chord-2*rib_wall,  span/2-rib_wall, 0])\n                cylinder(h = depth-2*rib_wall, r = rib_wall, center = true);\n        }\n    }\n}\n\n// Internal rib with vents\nmodule rib(chord, depth, wall) {\n    difference() {\n        translate([chord/2, 0, 0])\n            cube([chord-2*wall, wall, depth-2*wall], center = true);\n        // Vent holes\n        for (x = [chord*0.25, chord*0.75])\n            translate([x, 0, 0])\n                cylinder(h = wall+0.1, r = 2.5, center = true);\n    }\n}\n\n// Leading edge intake\nmodule intake(chord, span, depth, wall) {\n    difference() {\n        hull() {\n            translate([0, -span/2, -depth/2])\n                sphere(r = wall);\n            translate([0,  span/2, -depth/2])\n                sphere(r = wall);\n            translate([0, -span/2,  depth/2])\n                sphere(r = wall);\n            translate([0,  span/2,  depth/2])\n                sphere(r = wall);\n        }\n        // Remove back half\n        translate([-wall, 0, 0])\n            cube([wall*2, span+wall*2, depth+wall*2], center = true);\n    }\n}\n\n// Simple line\nmodule line(len, diam) {\n    rotate([90,0,0])\n        cylinder(h = len, d = diam, center = false);\n}\n\n// ===== MAIN ASSEMBLY =====\n\n// Build canopy\nunion() {\n    // Cells\n    for (i = [0 : cell_count-1]) {\n        y = -half_span + (i + 0.5) * (2*half_span)/cell_count;\n        cell_span = (2*half_span)/cell_count - 0.5;\n        translate([0, y, 0]) {\n            cell_skin(chord, cell_span, cell_depth, rib_wall);\n            translate([0, 0, 0])\n                intake(chord, cell_span, cell_depth, rib_wall);\n        }\n    }\n    \n    // Internal ribs between cells\n    for (i = [1 : cell_count-1]) {\n        y = -half_span + i * (2*half_span)/cell_count;\n        translate([0, y, 0])\n            rib(chord, cell_depth, rib_wall);\n    }\n    \n    // End ribs\n    translate([0, -half_span, 0])\n        rib(chord, cell_depth, rib_wall);\n    translate([0,  half_span, 0])\n        rib(chord, cell_depth, rib_wall);\n}\n\n// Bridle lines to payload\ntranslate([chord/2, 0, -cell_depth/2 - bridles_length/2]) {\n    // Center bridle\n    cylinder(h = bridles_length, d = bridles_diam);\n    translate([0, 0, -bridles_length/2 - line_length/2])\n        line(line_length, line_diam);\n}\n\n// Side bridles\nfor (y = [-half_span*0.6, half_span*0.6]) {\n    translate([chord*0.3, y, -cell_depth/2 - bridles_length/2])\n        cylinder(h = bridles_length, d = bridles_diam);\n    translate([chord*0.3, y, -bridles_length - line_length/2])\n        line(line_length, line_diam);\n}",
    "renders": true
  },
  {
    "vehicle": "kitecraft",
    "openscad_code": "// KiteCraft – a small, 3D-printable stunt-kite model\n// Overall length ≈ 80 mm, wing span ≈ 90 mm\n// All parts printable without supports (flat bottom, 45° rule respected)\n\n$fa = 2;\n$fs = 0.5;\n\n// wall thickness for printable parts\nwall = 1.2;\n\n// main wing cross-section\nmodule wing_profile(len, chord, thickness) {\n    // NACA-like profile with flat bottom for printing\n    hull() {\n        translate([0, thickness/2, 0])\n            cube([chord*0.35, thickness, len], center = true);\n        translate([0, -thickness/2, 0])\n            cube([chord, thickness*0.4, len], center = true);\n    }\n}\n\n// left half-wing\nmodule left_wing() {\n    difference() {\n        // main wing body\n        linear_extrude(height = 55, center = true, twist = -4)\n            wing_profile(1, 30, 3);\n        \n        // lightening holes\n        for (i = [15:15:45])\n            translate([0, 0, i - 27.5])\n                rotate([0, 90, 0])\n                    cylinder(h = 35, r = 4, center = true);\n    }\n    \n    // leading edge spar\n    translate([0, 0, 27.5])\n        rotate([90, 0, 0])\n            cylinder(h = 55, r = 1.5);\n    \n    // trailing edge spar\n    translate([0, -10, 27.5])\n        rotate([90, 0, 0])\n            cylinder(h = 55, r = 1.5);\n}\n\n// central spine / keel\nmodule keel() {\n    hull() {\n        translate([0, 0, -20])\n            cube([4, 2, 15], center = true);\n        translate([0, 0, 30])\n            cube([4, 2, 60], center = true);\n    }\n}\n\n// bridle connection points\nmodule bridle_point(pos) {\n    translate(pos) {\n        cylinder(h = 3 + wall, r = 2, center = true);\n        translate([0, 0, wall/2 + 1.5])\n            cylinder(h = wall, r = 1, $fn = 8);\n    }\n}\n\n// tail boom\nmodule tail_boom() {\n    difference() {\n        hull() {\n            translate([0, 3, 0])\n                cube([2, 6, 50], center = true);\n            translate([0, 0, 40])\n                cube([2, 2, 6], center = true);\n        }\n        // hole for tail line\n        translate([0, 0, 40])\n            rotate([90, 0, 0])\n                cylinder(h = 6, r = 0.8);\n    }\n}\n\n// complete kite\nunion() {\n    keel();\n    \n    // left wing\n    translate([-2, 0, 0])\n        rotate([0, 5, 0])\n            left_wing();\n    \n    // right wing (mirror)\n    translate([2, 0, 0])\n        scale([-1, 1, 1])\n            left_wing();\n    \n    // tail boom\n    translate([0, 0, 30])\n        rotate([0, 0, 0])\n            tail_boom();\n    \n    // bridle points\n    bridle_point([0, 0, 0]);\n    bridle_point([0, 0, 12]);\n    bridle_point([0, 0, 24]);\n}",
    "renders": true
  },
  {
    "vehicle": "kiteplane",
    "openscad_code": "// Kiteplane - Realistic Medium Complexity\n// Wingspan ~80mm, length ~70mm, height ~15mm\n// 3D printable with 1mm walls and no steep overhangs\n\n$fn = 32;\n\n// Main parameters\nwing_span = 80;\nwing_chord = 25;\nfuselage_length = 70;\nfuselage_diameter = 8;\ntail_span = 35;\ntail_chord = 15;\nkeel_height = 12;\nstrut_diameter = 1.5;\n\nmodule wing_profile(chord, span, thickness, dihedral) {\n    // Main wing with slight dihedral and tapered tips\n    translate([0, 0, thickness/2])\n    linear_extrude(height = thickness, convexity = 10)\n    polygon(points=[\n        [-chord/2, -span/2],\n        [chord*0.4, -span/2 + 5],  // Rounded tip\n        [chord*0.45, 0],\n        [chord*0.4, span/2 - 5],\n        [-chord/2, span/2],\n        [-chord*0.3, 0]\n    ]);\n}\n\nmodule fuselage() {\n    // Main body tube with nose cone\n    union() {\n        // Main tube\n        translate([0, 0, -fuselage_diameter/2])\n        cylinder(h = fuselage_length - 10, d = fuselage_diameter);\n        \n        // Nose cone\n        translate([0, 0, fuselage_length - 10 - fuselage_diameter/2])\n        cylinder(h = 10, d1 = fuselage_diameter, d2 = 0);\n        \n        // Tail boom\n        translate([0, 0, -fuselage_length/2])\n        cylinder(h = fuselage_length/2 - fuselage_diameter/2, d = fuselage_diameter*0.7);\n    }\n}\n\nmodule vertical_stabilizer() {\n    // Vertical tail with swept back design\n    translate([0, 0, keel_height/2])\n    linear_extrude(height = 2)\n    polygon(points=[\n        [-5, -tail_span/2],\n        [8, -tail_span/2 + 5],\n        [12, 0],\n        [8, tail_span/2 - 5],\n        [-5, tail_span/2],\n        [0, 0]\n    ]);\n}\n\nmodule horizontal_tail() {\n    // Stabilizer with elevator hinge line\n    translate([0, 0, 1])\n    wing_profile(tail_chord, tail_span, 2, 0);\n}\n\nmodule wing_struts() {\n    // Cabane struts between wing and fuselage\n    for(x = [-20, 20]) {\n        for(y = [-15, 15]) {\n            translate([x, y, -keel_height/2])\n            cylinder(h = keel_height - 2, d = strut_diameter);\n        }\n    }\n}\n\nmodule control_surfaces() {\n    // Simplified ailerons as separate thin plates\n    for(side = [-1, 1]) {\n        translate([wing_chord/3, side * (wing_span/2 - 5), 0])\n        cube([wing_chord*0.3, 10, 1]);\n    }\n}\n\nmodule landing_skid() {\n    // Simple skid for ground handling\n    translate([0, 0, -keel_height - 2])\n    difference() {\n        cube([fuselage_length - 20, 3, 2], center = true);\n        translate([0, 0, -1])\n        cube([fuselage_length - 15, 5, 4], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main wing with 5-degree dihedral\n    translate([0, 0, keel_height])\n    rotate([5, 0, 0])\n    wing_profile(wing_chord, wing_span, 2, 5);\n    \n    // Wing struts\n    wing_struts();\n    \n    // Fuselage\n    rotate([90, 0, 0])\n    translate([0, 0, -fuselage_length/2])\n    fuselage();\n    \n    // Horizontal tail\n    translate([-fuselage_length/2 + 5, 0, 1])\n    horizontal_tail();\n    \n    // Vertical stabilizer\n    translate([-fuselage_length/2 + 5, 0, 1])\n    vertical_stabilizer();\n    \n    // Control surfaces\n    translate([0, 0, keel_height + 1])\n    rotate([5, 0, 0])\n    control_surfaces();\n    \n    // Landing skid\n    landing_skid();\n}",
    "renders": true
  },
  {
    "vehicle": "tetheredwing",
    "openscad_code": "// Tethered Wing – medium-complexity, realistic, 3D-printable\n// Wingspan ≈ 80 mm, overall height ≈ 60 mm\n\n// ---------- parameters ----------\nwall = 1.2;              // printable wall thickness (mm)\nspan = 80;               // total wingspan\nchord = 35;              // wing chord length\nthick = 6;               // wing thickness\nfuse_h = 45;             // fuselage height\nfuse_w = 12;             // fuselage width\nfuse_d = 18;             // fuselage depth\nrudder_h = 20;\nrudder_t = 3;\nboom_l = 25;             // tail boom length\nboom_d = 4;\ntether_d = 2;            // tether rod diameter\ntether_l = 15;           // how far it protrudes below\n\n// ---------- helpers ----------\nmodule rounded_box(x, y, z, r, center=false) {\n    offset = center ? [0,0,0] : [x/2,y/2,z/2];\n    translate(offset)\n    minkowski() {\n        cube([x-2*r, y-2*r, z-2*r], center=true);\n        sphere(r);\n    }\n}\n\n// ---------- wing ----------\nmodule wing_half() {\n    difference() {\n        // main airfoil block\n        hull() {\n            translate([0, 0, thick/2]) cube([chord*0.8, wall, thick], center=true);\n            translate([chord*0.9, 0, 0]) rotate([0, -7, 0])\n                cube([chord*0.3, wall, thick*0.7], center=true);\n        }\n        // trailing edge taper\n        translate([-1, 0, 0]) cube([chord+2, wall+1, thick*0.4], center=true);\n    }\n}\n\nmodule full_wing() {\n    difference() {\n        union() {\n            // left half\n            translate([0, -wall/2, 0]) wing_half();\n            // right half\n            mirror([0,1,0]) translate([0, -wall/2, 0]) wing_half();\n            // center joining block\n            translate([0,0,0]) cube([chord*0.4, fuse_w, thick], center=true);\n        }\n        // lightening holes\n        for (y = [-span/3, 0, span/3]) {\n            translate([chord*0.6, y, 0])\n                rotate([0,0,15]) cylinder(h=thick+1, d=6, $fn=20, center=true);\n        }\n    }\n}\n\n// ---------- fuselage ----------\nmodule fuselage() {\n    union() {\n        // main pod\n        rounded_box(fuse_d, fuse_w, fuse_h, fuse_w/2, center=true);\n        // nose taper\n        translate([0,0, fuse_h/2 - fuse_d/2])\n            cylinder(h=fuse_d, d1=fuse_w, d2=fuse_w*0.6, $fn=20);\n    }\n}\n\n// ---------- tail boom ----------\nmodule tail_boom() {\n    translate([0,0, -fuse_h/2 - boom_l/2])\n        cylinder(h=boom_l, d=boom_d, $fn=16);\n}\n\n// ---------- vertical stabilizer & rudder ----------\nmodule tail_fin() {\n    translate([0,0, -fuse_h/2 - boom_l - rudder_h/2])\n        union() {\n            // fin\n            cube([rudder_t, fuse_w*0.8, rudder_h], center=true);\n            // rudder hinge line\n            translate([rudder_t/2 + 0.5, 0, 0])\n                cube([wall, fuse_w*0.6, rudder_h*0.9], center=true);\n        }\n}\n\n// ---------- tether plug ----------\nmodule tether() {\n    translate([0,0, -fuse_h/2 - boom_l - rudder_h - tether_l/2])\n        cylinder(h=tether_l, d=tether_d, $fn=12);\n}\n\n// ---------- assembly ----------\nunion() {\n    translate([0,0, thick/2]) full_wing();\n    translate([0,0, -thick/2 - fuse_h/2]) fuselage();\n    tail_boom();\n    tail_fin();\n    tether();\n}",
    "renders": true
  },
  {
    "vehicle": "skyanchor",
    "openscad_code": "// Skyanchor – medium-realistic OpenSCAD model\n// Approx 70 mm tall, printable without support\n\n$fn = 48;        // Smooth curves\n\n// Overall scale factor (change to resize)\nscale_factor = 1;\n\n// Wall thickness for printability\nwall = 2;\n\nmodule skyanchor() {\n    // Central shaft\n    difference() {\n        cylinder(h = 60, d = 12, center = true);\n        translate([0,0,-1]) cylinder(h = 62, d = 12 - 2*wall, center = true);\n    }\n\n    // Anchor flukes (four identical, rotated)\n    for (a = [0:90:270]) {\n        rotate([0,0,a]) translate([0, 7, 0]) fluke();\n    }\n\n    // Top eyelet / shackle hole\n    difference() {\n        translate([0,0,32]) rotate([90,0,0]) torus(6, 3);\n        translate([0,0,32]) rotate([90,0,0]) torus(6 - wall, 3 - wall);\n    }\n\n    // Reinforcing ring at fluke joint\n    translate([0,0,15]) difference() {\n        cylinder(h = 8, d = 20);\n        cylinder(h = 10, d = 20 - 2*wall);\n    }\n}\n\nmodule fluke() {\n    // Single anchor fluke\n    difference() {\n        union() {\n            // Fluke blade\n            translate([0, 0, 0]) cube([35, 4, 2], center = true);\n            // Tapered tip\n            translate([17, 0, 0]) rotate([0,90,0])\n                cylinder(h = 4, r1 = 2, r2 = 0);\n        }\n        // Hollow blade\n        translate([0, 0, 0]) cube([35 - wall, 4 - wall, 2 - wall], center = true);\n    }\n}\n\n// Helper module for torus (eyelet)\nmodule torus(R, r) {\n    rotate_extrude()\n        translate([R, 0, 0])\n            circle(r);\n}\n\nscale(scale_factor) skyanchor();",
    "renders": true
  },
  {
    "vehicle": "aerolift",
    "openscad_code": "// Aerolift model in realistic style\n// Medium complexity design suitable for 3D printing\n\n// Main parameters\n$fn = 32;\nbody_length = 60;\nbody_width = 25;\nbody_height = 20;\nrotor_diameter = 22;\nrotor_height = 3;\nleg_length = 15;\nleg_thickness = 3;\n\n// Main body of the aerolift\nmodule main_body() {\n    difference() {\n        // Main hull\n        union() {\n            // Central body\n            hull() {\n                translate([-body_length/2, -body_width/2, 0])\n                    cube([body_length, body_width, body_height]);\n                translate([-body_length/2+5, -body_width/2+3, body_height+5])\n                    cube([body_length-10, body_width-6, 8]);\n            }\n            \n            // Front camera pod\n            translate([body_length/2-8, 0, -body_height/4])\n                rotate([0, 90, 0])\n                    cylinder(h=12, d1=8, d2=6);\n        }\n        \n        // Air vents on top\n        for(i=[-1:1]) {\n            translate([i*15, 0, body_height+6])\n                cube([8, 5, 3]);\n        }\n        \n        // Cooling vents on sides\n        for(side=[-1,1]) {\n            for(i=[-1,1]) {\n                translate([i*20, side*(body_width/2+0.1), body_height/2])\n                    rotate([0, side*90, 0])\n                        cube([12, 2, 5]);\n            }\n        }\n    }\n}\n\n// Rotor assembly\nmodule rotor(x_pos, y_pos, z_pos) {\n    translate([x_pos, y_pos, z_pos]) {\n        // Motor housing\n        cylinder(h=rotor_height+3, d=8);\n        \n        // Rotor blades\n        for(i=[0:3]) {\n            rotate([0, 0, i*90]) {\n                translate([0, rotor_diameter/2-2, rotor_height+3])\n                    cube([3, rotor_diameter-4, 1], center=true);\n            }\n        }\n        \n        // Motor shaft\n        cylinder(h=rotor_height+6, d=2);\n    }\n}\n\n// Landing leg\nmodule landing_leg(x_pos, y_pos, angle) {\n    translate([x_pos, y_pos, 0]) {\n        rotate([0, 0, angle]) {\n            // Main strut\n            translate([0, 0, leg_length/2])\n                cube([leg_thickness, leg_thickness, leg_length], center=true);\n            \n            // Foot pad\n            translate([0, 0, leg_length-1])\n                cube([leg_thickness+2, leg_thickness+2, 2], center=true);\n        }\n    }\n}\n\n// Battery compartment\nmodule battery_compartment() {\n    translate([-body_length/2+5, 0, body_height/2]) {\n        difference() {\n            // Battery bay\n            cube([10, body_width-6, 8], center=true);\n            \n            // Battery slot\n            translate([0, 0, -1])\n                cube([9, body_width-8, 6], center=true);\n        }\n    }\n}\n\n// Assemble the complete aerolift\nunion() {\n    // Main body\n    main_body();\n    \n    // Battery compartment\n    battery_compartment();\n    \n    // Four rotors\n    rotor(body_length/2-10, body_width/2-10, body_height+5);\n    rotor(-body_length/2+10, body_width/2-10, body_height+5);\n    rotor(body_length/2-10, -body_width/2+10, body_height+5);\n    rotor(-body_length/2+10, -body_width/2+10, body_height+5);\n    \n    // Four landing legs\n    landing_leg(body_length/2-5, body_width/2-5, 45);\n    landing_leg(-body_length/2+5, body_width/2-5, -45);\n    landing_leg(body_length/2-5, -body_width/2+5, -45);\n    landing_leg(-body_length/2+5, -body_width/2+5, 45);\n}",
    "renders": true
  },
  {
    "vehicle": "train",
    "openscad_code": "// Realistic medium-complexity 3D-printable train\n// Overall length ~80 mm, width ~28 mm, height ~38 mm\n\n$fn = 32;\n\n// Main body\nmodule train_body() {\n    difference() {\n        // Main body shell\n        hull() {\n            translate([-30, -12, 0]) cube([60, 24, 22]);\n            translate([-35, -10, 22]) cube([70, 20, 6]);\n        }\n        // Cab windows\n        for (x = [-25, -15, -5, 5, 15, 25]) {\n            translate([x, -11.5, 15]) cube([6, 2, 6]);\n        }\n        // Headlight recesses\n        translate([36, -8, 18]) cylinder(h=4, d=5);\n        translate([36, 8, 18]) cylinder(h=4, d=5);\n    }\n}\n\n// Cab roof\nmodule cab_roof() {\n    translate([-35, -10, 28]) cube([70, 20, 3]);\n}\n\n// Smoke stack\nmodule smokestack() {\n    translate([-20, 0, 31]) \n        cylinder(h=8, d=6);\n}\n\n// Front pilot (cow catcher)\nmodule pilot() {\n    difference() {\n        translate([37, -12, 0]) cube([12, 24, 8]);\n        for (i = [0:4]) {\n            translate([40+i*2, -12, 0]) cube([1.5, 24, 8]);\n            translate([40+i*2, -12+i*6, 0]) cube([1.5, 24-i*6, 8]);\n            translate([40+i*2, 12-i*6, 0]) cube([1.5, 24-i*6, 8]);\n        }\n    }\n}\n\n// Wheel set\nmodule wheel_set() {\n    rotate([90, 0, 0]) {\n        // Wheel\n        difference() {\n            cylinder(h=5, d=12);\n            translate([0, 0, -1]) cylinder(h=7, d=4);\n        }\n        // Axle\n        translate([0, 0, -8]) cylinder(h=16, d=3);\n    }\n}\n\n// Bogie frame\nmodule bogie() {\n    translate([0, 0, 8]) difference() {\n        cube([26, 18, 4]);\n        for (dx = [-9, 0, 9]) {\n            translate([dx, 0, -1]) cylinder(h=6, d=12.5);\n        }\n    }\n}\n\n// Assemble train\nunion() {\n    train_body();\n    cab_roof();\n    smokestack();\n    pilot();\n    \n    // Front bogie\n    translate([12, 0, 0]) {\n        bogie();\n        translate([-9, 0, 0]) wheel_set();\n        translate([0, 0, 0]) wheel_set();\n        translate([9, 0, 0]) wheel_set();\n    }\n    \n    // Rear bogie\n    translate([-22, 0, 0]) {\n        bogie();\n        translate([-9, 0, 0]) wheel_set();\n        translate([0, 0, 0]) wheel_set();\n        translate([9, 0, 0]) wheel_set();\n    }\n    \n    // Couplers\n    translate([38, 0, 5]) rotate([0, 0, 90]) cylinder(h=4, d=5);\n    translate([-38, 0, 5]) rotate([0, 0, 90]) cylinder(h=4, d=5);\n}",
    "renders": true
  },
  {
    "vehicle": "locomotive",
    "openscad_code": "// Realistic medium-complexity 3D-printable locomotive model\n// Roughly 70 mm long, 20 mm wide, 25 mm tall\n\n$fn = 36;\n\n// Main body dimensions\nbody_len = 60;\nbody_w   = 18;\nbody_h   = 14;\n\n// Boiler dimensions\nboiler_r = 7.5;\nboiler_len = 50;\n\n// Chimney\nchimney_r = 3;\nchimney_h = 12;\n\n// Cab\ncab_w   = 12;\ncab_h   = 11;\ncab_len = 14;\n\n// Wheels\ndriver_d = 10;\ndriver_r = driver_d/2;\nwheel_w  = 2.5;\naxle_spacing = 14;\nwheel_count = 3;\n\n// Couplers\ncoupler_len = 6;\ncoupler_w   = 4;\ncoupler_h   = 2.5;\n\nmodule wheel(d=driver_d, w=wheel_w, spokes=6) {\n    difference() {\n        cylinder(h=w, d=d, center=true);\n        // Lightening holes\n        for(i=[0:spokes-1]) {\n            rotate([0,0,i*360/spokes])\n                translate([d/3,0,-w/2-0.1])\n                    cylinder(h=w+0.2, d=2, $fn=6);\n        }\n        // Central axle hole\n        cylinder(h=w+0.2, d=2.5, center=true);\n    }\n}\n\nmodule side_rod() {\n    difference() {\n        // Rod plate\n        translate([0,0,-1])\n            cube([axle_spacing*2 + 4, 2, 2], center=true);\n        // Crank holes\n        for(i=[0:1])\n            translate([axle_spacing*(i-0.5), 0, -2])\n                cylinder(h=4, d=3.5, center=true);\n    }\n}\n\nmodule driver_set() {\n    // Wheels on one side\n    for(i=[0:wheel_count-1]) {\n        translate([axle_spacing*(i-1), body_w/2 + wheel_w/2 + 1, driver_r])\n            wheel();\n        translate([axle_spacing*(i-1), -(body_w/2 + wheel_w/2 + 1), driver_r])\n            wheel();\n    }\n    // Connecting rods\n    translate([0, body_w/2 + wheel_w/2 + 1 + 1, driver_r])\n        rotate([90,0,0])\n            side_rod();\n    translate([0, -(body_w/2 + wheel_w/2 + 1 + 1), driver_r])\n        rotate([90,0,0])\n            mirror([0,1,0])\n                side_rod();\n}\n\nmodule body() {\n    difference() {\n        // Main body box\n        translate([0,0,body_h/2])\n            cube([body_len, body_w, body_h], center=true);\n        // Taper front\n        translate([body_len/2 - 2, 0, body_h/2 - 1])\n            rotate([0,-8,0])\n                cube([4, body_w + 1, body_h + 2], center=true);\n    }\n}\n\nmodule boiler() {\n    // Boiler cylinder\n    translate([body_len/2 - boiler_len/2, 0, body_h + boiler_r - 1])\n        rotate([0,90,0])\n            cylinder(h=boiler_len, r=boiler_r);\n    // Smokebox front\n    translate([body_len/2 - boiler_len + 1, 0, body_h + boiler_r - 1])\n        sphere(r=boiler_r);\n    // Chimney\n    translate([body_len/2 - boiler_len + 4, 0, body_h + boiler_r + chimney_h/2])\n        cylinder(h=chimney_h, r=chimney_r);\n}\n\nmodule cab() {\n    difference() {\n        // Cab box\n        translate([-body_len/2 + cab_len/2 + 2, 0, body_h + cab_h/2])\n            cube([cab_len, cab_w, cab_h], center=true);\n        // Roof slope\n        translate([-body_len/2 + cab_len/2 + 2, 0, body_h + cab_h - 1])\n            rotate([0,0,0])\n                cube([cab_len, cab_w + 1, 2], center=true);\n        // Cab windows\n        translate([-body_len/2 + cab_len/2 + 2, cab_w/2 + 0.1, body_h + cab_h/2])\n            cube([cab_len - 2, 1, cab_h - 4], center=true);\n        translate([-body_len/2 + cab_len/2 + 2, -cab_w/2 - 0.1, body_h + cab_h/2])\n            cube([cab_len - 2, 1, cab_h - 4], center=true);\n    }\n}\n\nmodule coupler() {\n    hull() {\n        translate([0,0,0])\n            sphere(d=coupler_w);\n        translate([coupler_len,0,0])\n            sphere(d=coupler_w);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    boiler();\n    cab();\n    driver_set();\n    // Front coupler\n    translate([body_len/2 + coupler_len/2, 0, coupler_h/2 + 1])\n        coupler();\n    // Rear coupler\n    translate([-body_len/2 - coupler_len/2, 0, coupler_h/2 + 1])\n        coupler();\n}",
    "renders": true
  },
  {
    "vehicle": "subway",
    "openscad_code": "// Realistic subway train, medium complexity\n// Designed for 3D printing, 1:200 scale, 82 mm long\n\n// Overall dimensions\n$fn = 24;\nbody_len = 82;\nbody_wid = 11.5;\nbody_hgt = 12;\nwall_thk = 1.2;\n\n// Main body\nmodule body() {\n    difference() {\n        // Shell\n        hull() {\n            // Lower box\n            translate([0,0,body_hgt/2]) cube([body_len, body_wid, body_hgt], center=true);\n            // Upper roof\n            translate([0,0,body_hgt-1.5]) cube([body_len-4, body_wid-2, 3], center=true);\n        }\n        \n        // Interior cavity\n        translate([0,0,body_hgt/2]) cube([body_len-2*wall_thk, body_wid-wall_thk, body_hgt-wall_thk], center=true);\n        \n        // Windows\n        for(i = [-30:15:30]) {\n            translate([i, body_wid/2-0.1, 7]) cube([8, wall_thk+0.2, 5]);\n            translate([i, -body_wid/2+0.1, 7]) cube([8, wall_thk+0.2, 5]);\n        }\n        \n        // Doors\n        for(d = [-16, 16]) {\n            translate([d, body_wid/2-0.1, 4]) cube([8, wall_thk+0.2, 10]);\n            translate([d, -body_wid/2+0.1, 4]) cube([8, wall_thk+0.2, 10]);\n        }\n    }\n}\n\n// Bogies (wheel trucks)\nmodule bogie() {\n    difference() {\n        // Frame\n        cube([14, 9, 3.5], center=true);\n        // Cutouts\n        translate([0,0,-1.75]) cylinder(h=3.5, r=3.5, center=true);\n    }\n}\n\n// Wheels\nmodule wheel() {\n    cylinder(h=2, r=2.8);\n}\n\n// Pantograph base\nmodule pantograph_base() {\n    translate([-30,0,body_hgt]) cube([5, 6, 2], center=true);\n}\n\n// Couplers\nmodule coupler() {\n    translate([body_len/2,0,2]) rotate([0,90,0]) \n        cylinder(h=3.5, r1=1.2, r2=0.8);\n}\n\n// Assembly\nbody();\n\n// Front bogie\ntranslate([-body_len/4,0,body_hgt/2-1.75]) bogie();\n// Rear bogie\ntranslate([body_len/4,0,body_hgt/2-1.75]) mirror([1,0,0]) bogie();\n\n// Wheels on bogies\nfor(x = [-4.5, 4.5]) {\n    translate([-body_len/4+x, body_wid/2-2, 1.5]) wheel();\n    translate([-body_len/4+x, -body_wid/2+2, 1.5]) wheel();\n    translate([body_len/4+x, body_wid/2-2, 1.5]) wheel();\n    translate([body_len/4+x, -body_wid/2+2, 1.5]) wheel();\n}\n\n// Roof details\ntranslate([0,0,body_hgt]) cube([body_len-6, body_wid-2.5, 0.5], center=true);\npantograph_base();\n\n// Couplers\ntranslate([-body_len/2,0,2]) rotate([0,-90,0]) coupler();\ntranslate([body_len/2,0,2]) coupler();",
    "renders": true
  },
  {
    "vehicle": "tram",
    "openscad_code": "// Realistic Tram - Medium Complexity\n// Designed for 3D printing with proper wall thickness and no overhangs\n\n$fn = 32;  // Smooth curves for 3D printing\n\n// Overall dimensions\ntram_length = 80;\ntram_width = 25;\ntram_height = 30;\nwheel_diameter = 8;\nwall_thickness = 1.5;\n\nmodule tram_body() {\n    // Main body - rounded rectangular prism\n    difference() {\n        // Outer shell\n        hull() {\n            translate([-tram_length/2, -tram_width/2, 0])\n                cube([tram_length, tram_width, tram_height/2], center=false);\n            translate([-tram_length/2, -tram_width/2, tram_height/2])\n                cube([tram_length, tram_width, tram_height/2], center=false);\n        }\n        \n        // Hollow interior\n        translate([0, 0, wall_thickness])\n            scale([0.85, 0.85, 0.9])\n                cube([tram_length, tram_width, tram_height], center=true);\n        \n        // Windows\n        for(i = [-20:15:20]) {\n            translate([i, tram_width/2 - wall_thickness, tram_height*0.6])\n                cube([10, wall_thickness, 8]);\n            translate([i, -tram_width/2 + wall_thickness, tram_height*0.6])\n                cube([10, wall_thickness, 8]);\n        }\n    }\n}\n\nmodule tram_roof() {\n    // Curved roof with pantograph base\n    translate([0, 0, tram_height - 2])\n        difference() {\n            hull() {\n                cylinder(h=tram_height/3, r=tram_width/2);\n                translate([0, 0, tram_height/3])\n                    cylinder(h=tram_height/6, r=tram_width/2 - 2);\n            }\n            // Air conditioning unit\n            translate([tram_length/4, 0, tram_height/3])\n                cube([tram_length/3, tram_width/2, tram_height/6], center=true);\n        }\n}\n\nmodule tram_front() {\n    // Front cab with windshield\n    translate([-tram_length/2 + 5, 0, 0])\n        difference() {\n            // Cab shape\n            hull() {\n                cylinder(h=tram_height*0.8, r=tram_width/2);\n                translate([5, 0, 0])\n                    cylinder(h=tram_height*0.8, r=tram_width/2 - 2);\n            }\n            \n            // Windshield\n            translate([2, 0, tram_height*0.5])\n                rotate([0, 20, 0])\n                    cube([tram_length/4, tram_width/1.5, wall_thickness*2], center=true);\n        }\n}\n\nmodule wheels() {\n    // Bogies with wheels\n    for(pos = [-tram_length/3, tram_length/3]) {\n        translate([pos, 0, wheel_diameter/2]) {\n            // Bogie frame\n            color(\"darkgray\")\n                difference() {\n                    cube([tram_length/6, tram_width*0.9, wheel_diameter/3], center=true);\n                    translate([0, 0, wheel_diameter/6])\n                        cube([tram_length/6 + 1, tram_width*0.9 - 2, wheel_diameter/3], center=true);\n                }\n            \n            // Wheels\n            for(side = [-1, 1]) {\n                translate([0, side * tram_width/3, 0])\n                    rotate([90, 0, 0])\n                        cylinder(h=wall_thickness*2, r=wheel_diameter/2, center=true);\n            }\n        }\n    }\n}\n\nmodule doors() {\n    // Passenger doors\n    for(pos = [-15, 15]) {\n        translate([pos, 0, tram_height/3])\n            difference() {\n                cube([8, tram_width - wall_thickness*4, tram_height/2], center=true);\n                translate([0, 0, 2])\n                    cube([7, tram_width - wall_thickness*4 - 2, tram_height/2 - 4], center=true);\n            }\n    }\n}\n\nmodule details() {\n    // Headlights\n    translate([-tram_length/2 + 2, tram_width/2 - 3, tram_height/2])\n        sphere(r=1.5);\n    translate([-tram_length/2 + 2, -tram_width/2 + 3, tram_height/2])\n        sphere(r=1.5);\n    \n    // Destination display\n    translate([-tram_length/2 + 5, 0, tram_height*0.9])\n        cube([8, tram_width/2, 2], center=true);\n    \n    // Side mirrors\n    for(side = [-1, 1]) {\n        translate([-tram_length/2 + 5, side * tram_width/2, tram_height*0.7]) {\n            rotate([0, 0, side * 30])\n                cube([4, 1, 1], center=true);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    tram_body();\n    tram_roof();\n    tram_front();\n    wheels();\n    doors();\n    details();\n    \n    // Undercarriage detail\n    translate([0, 0, wheel_diameter/2 + 1])\n        cube([tram_length*0.8, tram_width*0.8, 2], center=true);\n}",
    "renders": true
  },
  {
    "vehicle": "trolley",
    "openscad_code": "// Realistic 3D-printable trolley (shopping cart style)\n// Overall size: 70 mm long × 40 mm wide × 65 mm high\n// Wall thickness 1.2 mm for reliable FDM printing\n\n$fn = 32;  // Smooth curves for realistic appearance\n\nmodule wheel(d = 8, h = 4) {\n    // Tire\n    difference() {\n        cylinder(d = d, h = h, center = true);\n        cylinder(d = d - 2, h = h + 0.1, center = true);\n    }\n    // Hub\n    color(\"gray\")\n    cylinder(d = 4, h = h + 0.2, center = true);\n}\n\nmodule wheel_assembly() {\n    // Fork\n    translate([0, -4, 0])\n        rotate([90, 0, 0])\n            cylinder(d1 = 2, d2 = 4, h = 6);\n    \n    // Axle pin\n    translate([0, 0, -6.5])\n        rotate([90, 0, 0])\n            cylinder(d = 1.5, h = 3, center = true);\n    \n    // Wheel\n    translate([0, 0, -6.5])\n        wheel();\n}\n\nmodule basket() {\n    // Main basket body\n    difference() {\n        // Outer shell\n        cube([55, 35, 30], center = true);\n        // Hollow inside\n        translate([0, 0, -1.2])\n            cube([55 - 2.4, 35 - 2.4, 30 - 0.1], center = true);\n    }\n    \n    // Handle cutout at back\n    translate([0, 10, 15])\n        cube([45, 15, 15], center = true);\n    \n    // Grid pattern on sides using loops\n    color(\"gray\")\n    for (x = [-25:5:25])\n        for (y = [-15:5:15])\n            translate([x, y, 0])\n                cube([1.2, 1.2, 30], center = true);\n}\n\nmodule handle() {\n    // Handle bar\n    rotate([90, 0, 0])\n        cylinder(d = 4, h = 45, center = true);\n    \n    // Handle grip\n    translate([0, 0, 22.5])\n        rotate([90, 0, 0])\n            cylinder(d = 5, h = 20, center = true);\n    \n    // Support arms\n    for (side = [-1, 1]) {\n        translate([side * 20, 0, 15])\n            rotate([90, 0, side * 15])\n                cylinder(d = 3, h = 25, center = true);\n    }\n}\n\nmodule base_frame() {\n    // Main frame rails\n    for (side = [-1, 1]) {\n        translate([side * 18, 0, -15])\n            cube([3, 30, 3], center = true);\n    }\n    \n    // Front cross bar\n    translate([0, 15, -15])\n        cube([33, 3, 3], center = true);\n    \n    // Rear cross bar\n    translate([0, -15, -15])\n        cube([33, 3, 3], center = true);\n}\n\n// Assembly\nunion() {\n    // Basket\n    translate([0, 0, 15])\n        basket();\n    \n    // Handle\n    translate([0, -15, 30])\n        handle();\n    \n    // Frame\n    base_frame();\n    \n    // Wheels\n    for (x = [-12, 12]) {\n        for (y = [-10, 10]) {\n            translate([x, y, -15])\n                wheel_assembly();\n        }\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "monorail",
    "openscad_code": "// Realistic Monorail - Medium Complexity\n// Designed for 3D printing at ~70mm length\n\n// Configuration\n$fn = 32;  // Smooth curves\nwall_thickness = 1.5;  // For 3D printing\nscale_factor = 1;\n\n// Colors\ncolor_body = [0.2, 0.2, 0.3];\ncolor_accents = [0.8, 0.1, 0.1];\ncolor_windows = [0.7, 0.8, 0.9];\n\nmodule monorail_body() {\n    // Main passenger compartment\n    difference() {\n        // Outer shell\n        hull() {\n            translate([-25, -12, 0]) \n                cube([50, 24, 18], center=true);\n            translate([-22, -10, 12]) \n                cube([44, 20, 8], center=true);\n        }\n        \n        // Windows\n        for(i = [-15:10:15]) {\n            translate([i, -12.5, 10]) \n                cube([8, 1, 5], center=true);\n            translate([i, 12.5, 10]) \n                cube([8, 1, 5], center=true);\n        }\n        \n        // Door\n        translate([-5, -13, 5]) \n            cube([10, 2, 15], center=true);\n    }\n}\n\nmodule monorail_nose() {\n    // Streamlined front\n    translate([25, 0, 5]) {\n        difference() {\n            hull() {\n                cube([15, 20, 10], center=true);\n                translate([8, 0, 3]) \n                    sphere(10);\n            }\n            \n            // Cockpit windows\n            translate([5, -8, 7]) \n                rotate([0, 30, 0]) \n                    cube([10, 4, 3], center=true);\n            translate([5, 8, 7]) \n                rotate([0, -30, 0]) \n                    cube([10, 4, 3], center=true);\n        }\n    }\n}\n\nmodule bogie_assembly() {\n    // Wheel housing\n    translate([0, 0, -5]) {\n        difference() {\n            // Main housing\n            cube([30, 16, 8], center=true);\n            \n            // Wheel cutouts\n            for(x = [-10:10:10]) {\n                translate([x, 0, -2]) \n                    cylinder(h=10, r=3, center=true);\n            }\n        }\n        \n        // Support arms\n        for(x = [-12:12:24]) {\n            translate([x, 0, 0]) {\n                cube([2, 12, 4], center=true);\n                translate([0, 0, -3]) \n                    cube([6, 8, 2], center=true);\n            }\n        }\n    }\n}\n\nmodule roof_details() {\n    // HVAC unit\n    translate([0, 0, 20]) {\n        cube([40, 14, 4], center=true);\n        \n        // Ventilation grills\n        for(i = [-15:6:15]) {\n            translate([i, 0, 2]) \n                cube([3, 12, 1], center=true);\n        }\n    }\n    \n    // Pantograph base\n    translate([-20, 0, 22]) {\n        cylinder(h=2, r=4);\n        translate([0, 0, 2]) \n            cube([8, 1, 0.5], center=true);\n    }\n}\n\nmodule undercarriage() {\n    // Equipment boxes\n    for(pos = [[-15, 0, -10], [0, 0, -10], [15, 0, -10]]) {\n        translate(pos) {\n            cube([8, 12, 6], center=true);\n            \n            // Cooling vents\n            translate([4.5, 0, 0]) \n                for(i = [-3:2:3]) {\n                    translate([0, i, 0]) \n                        cube([1, 0.5, 4], center=true);\n                }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    color(color_body) {\n        monorail_body();\n        monorail_nose();\n    }\n    \n    color(color_accents) {\n        bogie_assembly();\n        roof_details();\n        undercarriage();\n    }\n    \n    // Coupler\n    translate([-30, 0, 5]) {\n        cylinder(h=5, r=3);\n        translate([-3, 0, 0]) \n            sphere(3);\n    }\n}\n\n// Base for display\ntranslate([0, 0, -15]) {\n    difference() {\n        cube([100, 30, 2], center=true);\n        translate([0, 0, -1]) \n            cube([90, 20, 4], center=true);\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "bullet",
    "openscad_code": "// Realistic 5.56 NATO bullet – 3D-printable, medium complexity\n// Overall length ≈ 57 mm, max Ø ≈ 9 mm (1:1 scale)\n\n$fn = 50;          // global resolution\n\nmodule bullet() {\n    union() {\n\n        // 1) Jacketed projectile\n        color(\"Gainsboro\")\n        translate([0,0,25.4])\n        union() {\n            // ogive tip\n            rotate_extrude()\n                translate([4,0])\n                circle(d=8,$fn=60);\n            // cylindrical bearing surface\n            cylinder(h=12, d=8);\n            // boat-tail taper\n            cylinder(h1=3, h2=0, r1=4, r2=3.2);\n        }\n\n        // 2) Case – brass\n        color(\"Goldenrod\")\n        difference() {\n            // main case body\n            translate([0,0,0])\n            cylinder(h=25.4, d=9.6);\n\n            // bore for bullet seating\n            translate([0,0,25.4-7])\n            cylinder(h=7, d=8.4);\n\n            // extractor groove\n            translate([0,0,9.6])\n            cylinder(h=1.2, d=8.8);\n        }\n\n        // 3) Rim\n        color(\"Goldenrod\")\n        translate([0,0,-0.8])\n        cylinder(h=1.6, d=10.4);\n\n        // 4) Primer pocket\n        color(\"SlateGray\")\n        difference() {\n            translate([0,0,-0.8])\n            cylinder(h=0.8, d=4.6);\n            // flash hole\n            translate([0,0,-0.4])\n            cylinder(h=1.6, d=2);\n        }\n\n        // 5) Cannelure – small ring\n        color(\"Silver\")\n        for (z = [23.5, 24.3])\n            translate([0,0,z])\n            rotate_extrude()\n                translate([4,0])\n                circle(r=0.2);\n    }\n}\n\n// render\nbullet();",
    "renders": true
  },
  {
    "vehicle": "freight",
    "openscad_code": "// Freight car - medium complexity\n// Boxcar style freight with doors and undercarriage details\n\n// Overall dimensions\ncar_length = 80;\ncar_width = 30;\ncar_height = 40;\n\n// Wall thickness\nwall = 2;\n\n// Wheel dimensions\nwheel_d = 12;\nwheel_w = 4;\n\n// Coupler dimensions\ncoupler_len = 6;\ncoupler_d = 4;\n\nmodule wheel() {\n    difference() {\n        cylinder(h=wheel_w, d=wheel_d, $fn=20);\n        translate([0, 0, -1])\n            cylinder(h=wheel_w+2, d=wheel_d-4, $fn=20);\n    }\n}\n\nmodule wheelset() {\n    translate([-car_length/2+10, 0, -car_height/2-6])\n        rotate([90, 0, 0])\n            wheel();\n    translate([-car_length/2+10, car_width, -car_height/2-6])\n        rotate([90, 0, 0])\n            wheel();\n    translate([car_length/2-10, 0, -car_height/2-6])\n        rotate([90, 0, 0])\n            wheel();\n    translate([car_length/2-10, car_width, -car_height/2-6])\n        rotate([90, 0, 0])\n            wheel();\n}\n\nmodule undercarriage() {\n    // Main frame\n    translate([0, car_width/2, -car_height/2-3])\n        cube([car_length-6, 3, 6], center=true);\n    \n    // Cross beams\n    for(x = [-car_length/2+15:15:car_length/2-15]) {\n        translate([x, car_width/2, -car_height/2-3])\n            cube([3, car_width-4, 6], center=true);\n    }\n}\n\nmodule door() {\n    // Sliding door\n    difference() {\n        translate([0, -wall/2, 0])\n            cube([20, wall, car_height-4]);\n        \n        // Door panels\n        for(y = [-car_height/2+5:8:car_height/2-10]) {\n            translate([0, -wall, y])\n                cube([18, wall+1, 2]);\n        }\n        \n        // Handle\n        translate([-5, -wall-1, car_height/2-8])\n            cube([2, 2, 6]);\n    }\n}\n\nmodule coupler() {\n    difference() {\n        union() {\n            // Main coupler body\n            cylinder(h=coupler_len, d=coupler_d, $fn=20);\n            // Coupler head\n            translate([0, 0, coupler_len])\n                sphere(d=coupler_d+2, $fn=20);\n        }\n        // Center hole\n        translate([0, 0, coupler_len/2])\n            rotate([90, 0, 0])\n                cylinder(h=coupler_d+2, d=2, $fn=20);\n    }\n}\n\n// Main car body\ndifference() {\n    // Outer shell\n    translate([0, car_width/2, 0])\n        cube([car_length, car_width, car_height], center=true);\n    \n    // Hollow interior\n    translate([0, car_width/2, 0])\n        cube([car_length-2*wall, car_width-wall, car_height-2*wall], center=true);\n    \n    // Door opening\n    translate([-car_length/2+10, 0, 0])\n        cube([20, wall+1, car_height-4], center=true);\n    translate([car_length/2-10, 0, 0])\n        cube([20, wall+1, car_height-4], center=true);\n}\n\n// Roof\ntranslate([0, car_width/2, car_height/2+wall/2])\n    cube([car_length+2, car_width+2, wall], center=true);\n\n// Floor\ntranslate([0, car_width/2, -car_height/2+wall/2])\n    cube([car_length-2*wall, car_width-wall, wall], center=true);\n\n// Doors\ntranslate([-car_length/2+20, car_width, 0])\n    door();\ntranslate([car_length/2-20, car_width, 0])\n    mirror([1, 0, 0])\n        door();\n\n// Undercarriage details\nundercarriage();\n\n// Wheels\nwheelset();\n\n// Couplers\ntranslate([-car_length/2-3, car_width/2, 0])\n    rotate([0, 90, 0])\n        coupler();\ntranslate([car_length/2+3, car_width/2, 0])\n    rotate([0, -90, 0])\n        coupler();",
    "renders": true
  },
  {
    "vehicle": "passenger",
    "openscad_code": "// Realistic-style 3D printable passenger figure\n// Medium complexity – roughly 60 mm tall\n\n$fn = 50;               // Smooth curves for printing\nwall = 1.4;             // 2 perimeters at 0.7 mm line width\n\nmodule head() {\n    // Skull sphere\n    translate([0, 0, 55])\n        sphere(d = 12);\n    \n    // Chin extension\n    translate([0, 0, 51])\n        sphere(d = 10);\n    \n    // Nose\n    difference() {\n        translate([0, 6, 54])\n            sphere(d = 3);\n        translate([0, 6.5, 54])\n            sphere(d = 2.5);\n    }\n    \n    // Eyes\n    for(x = [-2.5, 2.5])\n        translate([x, 5.8, 56])\n            sphere(d = 1.2);\n}\n\nmodule torso() {\n    // Chest\n    translate([0, 0, 34])\n        scale([1, 0.7, 1])\n        sphere(d = 25);\n    \n    // Abdomen\n    translate([0, 0, 22])\n        scale([0.9, 0.6, 1])\n        sphere(d = 18);\n}\n\nmodule arms() {\n    for(side = [-1, 1]) {\n        // Upper arm\n        translate([side * 9, 0, 45])\n            rotate([0, 20, side * 20])\n            cylinder(h = 12, d1 = 5, d2 = 4);\n        \n        // Lower arm\n        translate([side * 13, 1, 34])\n            rotate([0, 20, side * 20])\n            cylinder(h = 12, d1 = 4, d2 = 3);\n        \n        // Hand\n        translate([side * 15.5, 2, 24])\n            sphere(d = 4);\n    }\n}\n\nmodule legs() {\n    for(side = [-1, 1]) {\n        // Thigh\n        translate([side * 4, 0, 15])\n            rotate([0, -10, side * 10])\n            cylinder(h = 15, d1 = 6, d2 = 5);\n        \n        // Shin\n        translate([side * 3.5, 0, 5])\n            rotate([0, -20, side * 5])\n            cylinder(h = 12, d1 = 5, d2 = 4);\n        \n        // Foot\n        translate([side * 3.5, 4.5, 0])\n            scale([1.2, 2, 0.7])\n            sphere(d = 6);\n    }\n}\n\nmodule shoes() {\n    for(side = [-1, 1]) {\n        // Sole\n        translate([side * 3.5, 5, -1.5])\n            cube([7, 12, 3], center = true);\n    }\n}\n\n// Assemble the passenger\nunion() {\n    head();\n    torso();\n    arms();\n    legs();\n    shoes();\n}",
    "renders": true
  },
  {
    "vehicle": "intercity",
    "openscad_code": "$fn=32;\n\n// Overall dimensions\nlength = 90;\nwidth = 25;\nheight = 20;\n\n// Base frame\nmodule chassis() {\n    // Main underframe\n    difference() {\n        cube([length, width, 3], center=true);\n        translate([0,0,1.5])\n            cube([length-2, width-4, 3], center=true);\n    }\n    \n    // Side skirts\n    for(side=[-1,1]) {\n        translate([0, side*width/2, -1.5])\n            cube([length, 1, 4], center=true);\n    }\n}\n\n// Car body\nmodule car_body() {\n    difference() {\n        // Main shell\n        hull() {\n            translate([0,0,10])\n                cube([length-4, width-2, 10], center=true);\n            translate([0,0,5])\n                cube([length, width, 8], center=true);\n        }\n        \n        // Windows\n        for(x=[-35,-20,-5,10,25]) {\n            translate([x, -width/2+1, 12])\n                cube([8, 0.5, 5]);\n            translate([x, width/2-1, 12])\n                cube([8, 0.5, 5]);\n        }\n        \n        // Doors\n        translate([-15, -width/2, 5])\n            cube([10, 0.5, 12]);\n        translate([15, -width/2, 5])\n            cube([10, 0.5, 12]);\n    }\n}\n\n// Bogies\nmodule bogie() {\n    difference() {\n        // Bogie frame\n        cube([18, 18, 4], center=true);\n        translate([0,0,2])\n            cube([16, 16, 4], center=true);\n    }\n    \n    // Wheels\n    for(x=[-6,6]) {\n        for(y=[-6,6]) {\n            translate([x, y, -2])\n                cylinder(h=4, r=2.5, center=true);\n        }\n    }\n}\n\n// Pantograph base\nmodule pantograph_base() {\n    translate([0,0,17])\n        cylinder(h=2, r=4);\n    \n    for(i=[-3,3]) {\n        translate([i,0,18])\n            rotate([90,0,0])\n                cylinder(h=3, r=0.5);\n    }\n}\n\n// Roof details\nmodule roof_details() {\n    // Air conditioning units\n    translate([-25,0,19])\n        cube([20, 8, 3], center=true);\n    translate([25,0,19])\n        cube([20, 8, 3], center=true);\n    \n    // Roof curves\n    for(x=[-40,-20,0,20,40]) {\n        translate([x,0,21])\n            rotate([90,0,0])\n                cylinder(h=width-2, r=1);\n    }\n}\n\n// Couplers\nmodule coupler() {\n    translate([length/2,0,3])\n        rotate([0,90,0])\n            cylinder(h=4, r=3);\n    translate([-length/2,0,3])\n        rotate([0,90,0])\n            cylinder(h=4, r=3);\n}\n\n// Assembly\nunion() {\n    chassis();\n    \n    translate([0,0,1.5])\n        car_body();\n    \n    // Front bogie\n    translate([-25,0,0])\n        bogie();\n    \n    // Rear bogie\n    translate([25,0,0])\n        bogie();\n    \n    pantograph_base();\n    roof_details();\n    coupler();\n}",
    "renders": true
  },
  {
    "vehicle": "local",
    "openscad_code": "$fa = 2;\n$fs = 0.5;\n\n// Overall dimensions\nmodule local_station() {\n    // Base platform\n    difference() {\n        cube([80, 60, 3], center=true);\n        translate([0, 0, -1]) cube([76, 56, 5], center=true);\n    }\n\n    // Main building\n    translate([0, -10, 1.5]) {\n        difference() {\n            cube([50, 40, 25], center=true);\n            translate([0, 0, -1]) cube([46, 36, 27], center=true);\n        }\n    }\n\n    // Roof\n    translate([0, -10, 27]) {\n        difference() {\n            cube([54, 44, 3], center=true);\n            translate([0, 0, -1]) cube([50, 40, 5], center=true);\n        }\n    }\n\n    // Ticket window\n    translate([-20, 10, 10]) {\n        difference() {\n            cube([8, 2, 12], center=true);\n            translate([0, 0, 4]) cube([6, 3, 4], center=true);\n        }\n    }\n\n    // Door\n    translate([0, 10, 3]) {\n        difference() {\n            cube([10, 2, 18], center=true);\n            translate([0, 0, 7]) cube([8, 3, 4], center=true);\n        }\n    }\n\n    // Windows\n    for(x = [-15, -5, 5, 15]) {\n        translate([x, -30, 15]) {\n            difference() {\n                cube([8, 2, 10], center=true);\n                translate([0, 0, 2.5]) cube([6, 3, 5], center=true);\n            }\n        }\n    }\n\n    // Platform lights\n    for(x = [-30, -10, 10, 30]) {\n        translate([x, -25, 3]) {\n            cylinder(h=15, d1=2, d2=1, center=false);\n            translate([0, 0, 15]) sphere(d=2);\n            translate([0, 0, 16]) sphere(d=1.5);\n        }\n    }\n\n    // Bench\n    translate([20, 0, 3]) {\n        union() {\n            for(y = [-8, -4, 0, 4, 8]) {\n                translate([0, y, 0]) cube([2, 3, 8], center=true);\n            }\n            translate([0, 0, 8]) cube([20, 18, 1], center=true);\n        }\n    }\n\n    // Sign\n    translate([0, -10, 32]) {\n        cube([40, 8, 3], center=true);\n        translate([0, 0, 1.5]) {\n            rotate([90, 0, 0]) {\n                linear_extrude(height=1) {\n                    text(\"LOCAL\", size=6, halign=\"center\", valign=\"center\");\n                }\n            }\n        }\n    }\n\n    // Trash can\n    translate([-25, 15, 3]) {\n        difference() {\n            cylinder(h=12, d=8, center=false);\n            translate([0, 0, -1]) cylinder(h=14, d=7, center=false);\n        }\n    }\n}\n\nlocal_station();",
    "renders": true
  },
  {
    "vehicle": "highspeed",
    "openscad_code": "// High-speed train (Shinkansen style) – realistic medium complexity\n// No overhangs > 45°, printable on FDM without supports\n\n$fn = 40;           // General cylinder smoothness\nwall = 2;           // Wall thickness for shells\n\n// Overall scale factor so largest dimension ≈ 90 mm\nscale_factor = 0.45;\n\n// Helper module for rounded shell (hollow)\nmodule rounded_shell(w, d, h, r, wall_thk) {\n    difference() {\n        minkowski() {\n            cube([w - 2*r, d - 2*r, h - 2*r], center = true);\n            sphere(r);\n        }\n        minkowski() {\n            cube([w - 2*r - 2*wall_thk,\n                  d - 2*r - 2*wall_thk,\n                  h - 2*r - 2*wall_thk], center = true);\n            sphere(r - wall_thk);\n        }\n    }\n}\n\n// Nose module – elongated bullet\nmodule nose() {\n    difference() {\n        hull() {\n            translate([0, 0, 0]) sphere(r = 9);\n            translate([43, 0, 0]) sphere(r = 4);\n        }\n        // Hollow interior\n        translate([5, 0, 0])\n            scale([1.2, 0.8, 0.8])\n            cylinder(h = 55, r1 = 3.5, r2 = 0, center = true);\n    }\n}\n\n// Main passenger car shell\nmodule car_body() {\n    difference() {\n        rounded_shell(88, 20, 15, 6, wall);\n        // Windows cutouts left side\n        for (i = [0:3]) {\n            translate([-30 + i*20, 10.1, 3])\n                cube([14, 0.5, 6]);\n        }\n        // Windows right side\n        for (i = [0:3]) {\n            translate([-30 + i*20, -10.1, 3])\n                cube([14, 0.5, 6]);\n        }\n    }\n}\n\n// Bogie frame with wheels\nmodule bogie() {\n    difference() {\n        // Frame\n        translate([0, 0, -6])\n            cube([22, 16, 3], center = true);\n        // Wheel cutouts\n        for (x = [-8, 8])\n            translate([x, 0, -7])\n                rotate([90, 0, 0])\n                cylinder(h = 20, r = 5.5, center = true);\n    }\n    // Wheels (solid cylinders printable sideways)\n    for (x = [-8, 8])\n        translate([x, 0, -10])\n            rotate([90, 0, 0])\n            cylinder(h = 4, r = 5.2);\n}\n\n// Coupler pocket at rear\nmodule coupler() {\n    difference() {\n        translate([1, 0, -3])\n            cube([6, 8, 4], center = true);\n        translate([1, 0, -3])\n            cube([2, 6, 3.5], center = true);\n    }\n}\n\n// Pantograph mount (simplified)\nmodule pantograph_base() {\n    translate([0, 0, 8])\n        cylinder(h = 2, r = 3);\n}\n\n// Roof detail – small streamlined hump\nmodule roof_hump() {\n    translate([0, 0, 8])\n        scale([1, 0.4, 0.3])\n        sphere(r = 35);\n}\n\n// Entire train assembly\nmodule train() {\n    union() {\n        // Nose\n        translate([40, 0, 0]) nose();\n\n        // Passenger cars\n        translate([0, 0, 0]) car_body();\n        translate([-90, 0, 0]) car_body();\n\n        // Bogies under each body\n        translate([30, 0, -2]) bogie();\n        translate([-10, 0, -2]) bogie();\n        translate([-60, 0, -2]) bogie();\n\n        // Coupler at rear\n        translate([-84, 0, -3]) coupler();\n\n        // Roof details\n        translate([0, 0, 0]) roof_hump();\n        translate([-90, 0, 0]) roof_hump();\n        translate([0, 0, 0]) pantograph_base();\n        translate([-20, 0, 0]) pantograph_base();\n    }\n}\n\n// Apply scaling and render\nscale(scale_factor) train();",
    "renders": true
  },
  {
    "vehicle": "tilting",
    "openscad_code": "// Tilting Kettle in realistic style with medium complexity\n// Overall dimensions: ~80mm height\n\n// Parameters\n$fn = 32;\nwall_thickness = 2;\nbase_rad = 35;\nbody_rad = 40;\nspout_length = 25;\nhandle_clear = 15;\n\nmodule kettle_body() {\n    difference() {\n        // Main body\n        union() {\n            // Base cylinder\n            cylinder(h = 15, r = base_rad);\n            \n            // Upper body\n            translate([0, 0, 15])\n                cylinder(h = 35, r1 = base_rad, r2 = body_rad);\n        }\n        \n        // Hollow interior\n        translate([0, 0, wall_thickness])\n            cylinder(h = 50 - wall_thickness, r = body_rad - wall_thickness);\n    }\n}\n\nmodule spout() {\n    union() {\n        // Spout base\n        translate([body_rad, 0, 35])\n            rotate([0, 0, 90])\n                cylinder(h = 15, r = 5);\n                \n        // Spout neck\n        translate([body_rad + 15, 0, 40])\n            rotate([0, 30, 90])\n                cylinder(h = spout_length, r1 = 5, r2 = 3);\n                \n        // Spout opening\n        translate([body_rad + 15 + spout_length - 3, 0, 40 + spout_length * sin(30)])\n            rotate([0, 30, 90])\n                cylinder(h = 5, r = 3);\n    }\n}\n\nmodule handle() {\n    difference() {\n        // Main handle\n        translate([-body_rad - 8, 0, 25])\n            rotate([0, 90, 0])\n                difference() {\n                    cylinder(h = 25 + handle_clear, r = 4);\n                    translate([0, 0, -0.5])\n                        cylinder(h = 26 + handle_clear, r = 3);\n                }\n                \n        // Handle grip\n        translate([-body_rad - 8, handle_clear/2 + 4, 25])\n            cube([8, handle_clear, 8], center = true);\n    }\n}\n\nmodule lid() {\n    difference() {\n        // Lid body\n        union() {\n            // Main lid\n            translate([0, 0, 50])\n                cylinder(h = 5, r = body_rad + 1);\n                \n            // Lid dome\n            translate([0, 0, 55])\n                sphere(d = body_rad * 2);\n        }\n        \n        // Hollow dome\n        translate([0, 0, 55])\n            sphere(d = (body_rad - wall_thickness) * 2);\n            \n        // Handle hole\n        translate([0, 0, 60])\n            cylinder(h = 10, r = 3);\n    }\n    \n    // Lid knob\n    translate([0, 0, 65])\n        cylinder(h = 8, r = 5);\n}\n\nmodule tilting_base() {\n    // Base plate\n    translate([0, 0, -5])\n        cube([90, 60, 5], center = true);\n        \n    // Pivot supports\n    for(x = [-30, 30]) {\n        translate([x, 0, 0])\n            cube([8, 50, 10], center = true);\n    }\n    \n    // Pivot axle\n    translate([0, 0, 5])\n        rotate([90, 0, 0])\n            cylinder(h = 60, r = 3);\n}\n\n// Main assembly\nunion() {\n    tilting_base();\n    \n    // Kettle assembly\n    translate([0, 0, 10])\n        rotate([0, 0, 0])\n            union() {\n                kettle_body();\n                spout();\n                handle();\n                lid();\n            }\n}",
    "renders": true
  },
  {
    "vehicle": "steam",
    "openscad_code": "// STEAM LOCOMOTIVE – medium-realistic, printable, ~90 mm long\n// Designed for FDM printing: no over-45° overhangs, 1.2 mm walls.\n\n// global scale\nscale = 1;          // 1 unit = 1 mm\nwall  = 1.2;        // printable wall thickness\n$fn   = 24;         // resolution\n\nmodule wheel(diam, width){\n    // simple closed wheel with 12 spokes\n    difference(){\n        cylinder(h=width, d=diam, center=true);\n        // hub cavity\n        cylinder(h=width+1, d=diam/3, center=true);\n        // lightening holes\n        for(i=[0:30:359])\n            rotate([0,0,i])\n                translate([diam/2.5,0,0])\n                    cylinder(h=width+1, d=diam/6, center=true);\n    }\n}\n\nmodule drive_wheels(){\n    // two pairs of large drivers\n    translate([-30,0,0]) wheel(16,wall);\n    translate([-30,0,0]) mirror([1,0,0]) wheel(16,wall);\n    translate([-55,0,0]) wheel(16,wall);\n    translate([-55,0,0]) mirror([1,0,0]) wheel(16,wall);\n}\n\nmodule small_bogie(){\n    // front and rear bogie trucks\n    translate([40,0,8]) rotate([0,90,0])\n        for(i=[-6,6])\n            translate([i,0,0])\n                wheel(10,wall);\n}\n\nmodule boiler(){\n    // main boiler shell\n    difference(){\n        cylinder(h=90, d=20, center=true);\n        // firebox taper\n        translate([-35,0,0]) scale([1,1,0.7])\n            sphere(d=20, center=true);\n        // smokebox front cavity\n        translate([40,0,0]) cylinder(h=30, d=18, center=true);\n    }\n}\n\nmodule cab(){\n    // simple square cab with roof\n    translate([-70,0,22]) difference(){\n        cube([22,30,30], center=true);\n        // windows\n        translate([1,0,10]) cube([wall,26,18], center=true);\n        translate([1,-10,0]) cube([wall,20,26], center=true);\n    }\n    // roof\n    translate([-70,0,37]) rotate([90,0,0])\n        cylinder(h=32, d=32, center=true);\n}\n\nmodule chimney(){\n    translate([45,0,28]) cylinder(h=22, d1=8, d2=4);\n}\n\nmodule dome(){\n    translate([0,0,28]) sphere(d=12);\n}\n\nmodule cylinders(){\n    // two steam cylinders under smokebox\n    for(y=[-7,7])\n        translate([-25,y,6]) cube([20,8,12], center=true);\n}\n\nmodule details(){\n    // handrail along boiler\n    color(\"silver\") for(t=[-30:15:30])\n        translate([t,11,10]) sphere(d=1.5);\n    // buffers\n    for(x=[-85,45]) translate([x,0,10]) cylinder(h=5,d=6);\n}\n\n// assemble main model\nunion(){\n    boiler();\n    cab();\n    chimney();\n    dome();\n    cylinders();\n    drive_wheels();\n    small_bogie();\n    details();\n}",
    "renders": true
  },
  {
    "vehicle": "maglev",
    "openscad_code": "// Maglev train with guideway - realistic style, medium complexity\n// Designed for 3D printing, no overhangs\n\n$fn = 32; // Smooth curves\n\n// Main dimensions\ntrack_width = 6;\ntrack_height = 3;\ntrain_length = 40;\ntrain_width = 8;\ntrain_height = 4;\nmagnet_height = 0.8;\ngap = 0.5;\n\n// Module for train body\nmodule train_body() {\n    // Main body\n    difference() {\n        hull() {\n            translate([-train_length/2, -train_width/2, 0])\n                cube([train_length, train_width, train_height]);\n            translate([-train_length/2, -train_width/2, train_height])\n                cube([train_length, train_width, train_height/2]);\n        }\n        \n        // Windows\n        for(i = [0:3]) {\n            translate([-train_length/2 + 8 + i*8, -train_width/2 - 0.1, train_height/2])\n                cube([4, train_width + 0.2, 2]);\n        }\n    }\n    \n    // Nose\n    translate([train_length/2 - 2, 0, train_height/2 + train_height/4])\n        scale([1, 0.8, 0.6])\n            sphere(r=4);\n}\n\n// Module for magnetic levitation pads on train\nmodule train_magnets() {\n    for(side = [-1, 1]) {\n        for(i = [-15:5:15]) {\n            translate([i, side*(train_width/2 - 1), -magnet_height - 0.1])\n                cube([4, 2, magnet_height]);\n        }\n    }\n}\n\n// Module for guideway beam\nmodule guideway_beam() {\n    // Main beam\n    translate([-50, -track_width, 0])\n        cube([100, track_width*2, track_height]);\n    \n    // Side supports\n    for(x = [-45:15:45]) {\n        translate([x, -track_width - 2, 0])\n            cube([2, 2, track_height + 2]);\n    }\n}\n\n// Module for guideway magnets\nmodule guideway_magnets() {\n    for(side = [-1, 1]) {\n        for(x = [-45:5:45]) {\n            translate([x, side*(track_width/2 + 0.5), track_height + gap])\n                cube([3, 1.5, magnet_height]);\n        }\n    }\n}\n\n// Module for support pillars\nmodule support_pillars() {\n    for(x = [-40:20:40]) {\n        translate([x, 0, -5])\n            cylinder(h=5, r=1.5);\n    }\n}\n\n// Assembly\ntranslate([0, 0, 5 + track_height + gap + magnet_height])\n    union() {\n        train_body();\n        train_magnets();\n    }\n\ntranslate([0, 0, 0])\n    union() {\n        guideway_beam();\n        guideway_magnets();\n        support_pillars();\n    }",
    "renders": true
  },
  {
    "vehicle": "lightrail",
    "openscad_code": "// Realistic Light-Rail Vehicle (medium complexity)\n// 3D-printable, ~85 mm long, no support required\n\nrail_length = 85;\nrail_width  = 18;\nrail_height = 24;\nwall        = 1.8;           // print-friendly wall thickness\naxle_d      = 3;\nwheel_d     = 6;\ncoupler_l   = 5;\n\n// Main body shell\nmodule body_shell() {\n    difference() {\n        // outer rounded box\n        hull() {\n            translate([0,0,rail_height-6])\n                cube([rail_length-4, rail_width-3, 8], center=true);\n            translate([0,0,3])\n                cube([rail_length-2, rail_width-2, rail_height-6], center=true);\n        }\n        // hollow out inside\n        translate([0,0,1])\n            cube([rail_length-4-wall*2, rail_width-3-wall*2, rail_height-8], center=true);\n    }\n}\n\n// Roof details with longitudinal ribs\nmodule roof() {\n    difference() {\n        hull() {\n            translate([rail_length/2-10, 0, rail_height])\n                sphere(d=rail_width-4);\n            translate([-rail_length/2+10, 0, rail_height])\n                sphere(d=rail_width-4);\n        }\n        // cut flat bottom\n        translate([0,0,rail_height-2])\n            cube([rail_length, rail_width, 4], center=true);\n    }\n    // repeating roof ribs\n    for(x=[-rail_length/2+5:10:rail_length/2-5])\n        translate([x,0,rail_height+3])\n            cube([1, rail_width-4, 1.5], center=true);\n}\n\n// Side windows pattern\nmodule side_windows() {\n    for(x=[-rail_length/2+10:12:rail_length/2-12]) {\n        translate([x, rail_width/2-wall/2, rail_height/2])\n            cube([8, wall, 6], center=true);\n        translate([x, -rail_width/2+wall/2, rail_height/2])\n            cube([8, wall, 6], center=true);\n    }\n}\n\n// Under-floor equipment boxes\nmodule under_boxes() {\n    color(\"gray\") {\n        // traction boxes\n        for(x=[-rail_length/3, rail_length/3]) {\n            translate([x, 0, 3])\n                cube([18, rail_width-4, 4], center=true);\n        }\n    }\n}\n\n// Bogie with integrated wheels\nmodule bogie() {\n    difference() {\n        // bogie frame\n        hull() {\n            cube([20, 14, 5], center=true);\n            translate([0,0,2])\n                cube([16, 12, 3], center=true);\n        }\n        // wheel cutouts\n        translate([-8, 0, -wheel_d/2-1])\n            rotate([0,90,0])\n                cylinder(h=20, d=wheel_d+1, center=true);\n        translate([8, 0, -wheel_d/2-1])\n            rotate([0,90,0])\n                cylinder(h=20, d=wheel_d+1, center=true);\n    }\n    // wheels\n    for(x=[-8,8])\n        translate([x,0,-wheel_d/2-1])\n            rotate([0,90,0])\n                cylinder(h=wall, d=wheel_d);\n}\n\n// Front cab windscreen slope\nmodule cab_front() {\n    difference() {\n        hull() {\n            translate([rail_length/2-2, 0, rail_height-6])\n                sphere(d=rail_width-4);\n            translate([rail_length/2-12, 0, rail_height-14])\n                cube([20, rail_width-4, 8], center=true);\n        }\n        // windshield recess\n        translate([rail_length/2-7, 0, rail_height-8])\n            cube([12, rail_width-8, 6], center=true);\n    }\n}\n\n// Coupler shank\nmodule coupler() {\n    hull() {\n        cube([coupler_l, 4, 4], center=true);\n        translate([coupler_l/2,0,0])\n            sphere(d=4);\n    }\n}\n\n// Assembly\nunion() {\n    body_shell();\n    roof();\n    side_windows();\n    under_boxes();\n\n    // front cab\n    translate([rail_length/2-8, 0, 0])\n        cab_front();\n\n    // rear cab (mirrored front)\n    mirror([1,0,0])\n        translate([rail_length/2-8, 0, 0])\n            cab_front();\n\n    // bogies\n    translate([-rail_length/3, 0, 2.5])\n        bogie();\n    translate([rail_length/3, 0, 2.5])\n        bogie();\n\n    // couplers\n    translate([rail_length/2+coupler_l/2, 0, 4])\n        rotate([0,0,90])\n            coupler();\n    translate([-rail_length/2-coupler_l/2, 0, 4])\n        rotate([0,0,-90])\n            coupler();\n}",
    "renders": true
  },
  {
    "vehicle": "rapid",
    "openscad_code": "// Realistic Rapid (medium complexity)\n// 3D printable water-rapid model with recognizable features\n\n// Overall dimensions\nlength = 80;\nwidth = 30;\nheight = 12;\n\n// Water channel\nmodule water_channel() {\n    // Main channel base\n    difference() {\n        cube([length, width, height/2]);\n        // Carve out the water path\n        translate([5, 3, -0.1])\n            cube([length-10, width-6, height/2+0.2]);\n    }\n}\n\n// Rock formations along sides\nmodule rocks() {\n    for(i = [0:3]) {\n        // Left side rocks\n        translate([i*20+5, 0, 0])\n            rock_cluster();\n        // Right side rocks\n        translate([i*20+5, width, 0])\n            mirror([0,1,0]) rock_cluster();\n    }\n}\n\n// Individual rock cluster\nmodule rock_cluster() {\n    for(j = [0:2]) {\n        translate([rand(j*3)*3-1.5, rand(j*5)*2-1, rand(j*7)*2])\n            sphere(r=rand(j*11)*2+3, $fn=8);\n    }\n}\n\n// Random helper function\nfunction rand(seed) = (sin(seed*123.456)+1)/2;\n\n// Rapids - stepped water flow\nmodule rapids() {\n    for(step = [0:3]) {\n        translate([step*20, 0, step*2])\n            rapid_step();\n    }\n}\n\n// Single rapid step\nmodule rapid_step() {\n    difference() {\n        // Main step block\n        translate([0, 0, 0])\n            cube([20, width, 4]);\n        \n        // Water flow cutout\n        translate([2, 3, -0.1])\n            cube([18, width-6, 4.2]);\n        \n        // Turbulence features\n        for(i = [1:3]) {\n            translate([i*5, rand(i*13)*width-2, 2])\n                sphere(r=rand(i*17)*1+0.5, $fn=6);\n        }\n    }\n}\n\n// Water surface details\nmodule water_surface() {\n    for(x = [5:5:length-10]) {\n        for(y = [5:5:width-5]) {\n            translate([x, y, height/2-0.2])\n                sphere(r=0.3, $fn=8);\n        }\n    }\n}\n\n// Foam at rapid edges\nmodule foam() {\n    for(step = [0:3]) {\n        for(side = [0, 1]) {\n            translate([step*20+10, side ? width-1 : 1, step*2+4])\n                foam_cluster();\n        }\n    }\n}\n\nmodule foam_cluster() {\n    for(i = [0:3]) {\n        translate([rand(i*23)*4-2, rand(i*29)*2-1, rand(i*31)*1])\n            sphere(r=rand(i*37)*0.5+0.3, $fn=6);\n    }\n}\n\n// Main assembly\nunion() {\n    // Base channel\n    water_channel();\n    \n    // Rock formations\n    rocks();\n    \n    // Rapids structure\n    rapids();\n    \n    // Water surface details\n    water_surface();\n    \n    // Foam effects\n    foam();\n}",
    "renders": true
  },
  {
    "vehicle": "underground",
    "openscad_code": "// Underground bunker with realistic architectural features\n// Overall dimensions: 80mm wide x 60mm deep x 40mm tall\n\n$fn = 32;  // Smooth curves for realistic look\n\n// Main parameters\nwall_thickness = 2;\nfloor_thickness = 2;\ndoor_width = 12;\ndoor_height = 18;\nvent_diameter = 4;\n\n// Main structure - buried underground box\nmodule main_structure() {\n    difference() {\n        // Outer shell\n        translate([0, 0, 20])\n            cube([80, 60, 40], center=true);\n        \n        // Hollow interior\n        translate([0, 0, 22])\n            cube([76, 56, 36], center=true);\n        \n        // Entry ramp\n        translate([40, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=30, r1=15, r2=15);\n        \n        // Door opening\n        translate([40, 0, 30])\n            cube([door_width, wall_thickness+1, door_height], center=true);\n    }\n}\n\n// Reinforced door with frame\nmodule entry_door() {\n    translate([40, 30.5, 30]) {\n        // Door frame\n        difference() {\n            cube([door_width+4, wall_thickness, door_height+4]);\n            translate([2, -1, 2])\n                cube([door_width, wall_thickness+2, door_height]);\n        }\n        \n        // Actual door\n        translate([2, 0, 2])\n            cube([door_width-2, wall_thickness/2, door_height-2]);\n        \n        // Door handle\n        translate([door_width/2-2, wall_thickness/2, door_height/2])\n            rotate([90, 0, 0])\n                cylinder(h=3, r=1);\n    }\n}\n\n// Ventilation pipes\nmodule ventilation() {\n    for(x = [-25, 25]) {\n        translate([x, 0, 40])\n            cylinder(h=15, r=vent_diameter/2);\n        \n        translate([x, 0, 55])\n            rotate([0, 0, 45])\n                cube([vent_diameter, vent_diameter, 8], center=true);\n    }\n}\n\n// Structural support beams\nmodule support_beams() {\n    // Ceiling beams\n    for(y = [-20, 0, 20]) {\n        translate([0, y, 38])\n            cube([76, 2, 2], center=true);\n    }\n    \n    // Wall supports\n    for(x = [-35, 35]) {\n        translate([x, 0, 20])\n            cube([2, 56, 38], center=true);\n    }\n}\n\n// Emergency ladder\nmodule ladder() {\n    translate([35, -25, 25]) {\n        // Side rails\n        for(side = [-1, 1]) {\n            translate([side*2, 0, 0])\n                cylinder(h=12, r=0.5);\n        }\n        \n        // Rungs\n        for(i = [1:9]) {\n            translate([0, 0, i*1.2])\n                rotate([90, 0, 0])\n                    cylinder(h=4, r=0.5);\n        }\n    }\n}\n\n// Equipment rack inside\nmodule equipment_rack() {\n    translate([-30, -20, 22]) {\n        // Rack frame\n        difference() {\n            cube([15, 10, 15]);\n            translate([1, 1, 1])\n                cube([13, 8, 13]);\n        }\n        \n        // Shelves\n        for(h = [4, 8, 12]) {\n            translate([0.5, 0.5, h])\n                cube([14, 8, 0.5]);\n        }\n    }\n}\n\n// Combine all components\nunion() {\n    main_structure();\n    entry_door();\n    ventilation();\n    support_beams();\n    ladder();\n    equipment_rack();\n}",
    "renders": true
  },
  {
    "vehicle": "overground",
    "openscad_code": "// Overground Train - Realistic Style, Medium Complexity\n// Designed for 3D printing with no overhangs\n\n// Parameters\n$fn = 32;\nbody_length = 80;\nbody_width = 22;\nbody_height = 28;\nwheel_diameter = 8;\nwheel_width = 4;\ncoupler_length = 6;\nwindow_height = 8;\nwindow_width = 6;\n\n// Main module\nmodule overground_train() {\n    // Main body shell\n    difference() {\n        // Main body block\n        hull() {\n            translate([body_length*0.9, 0, body_height*0.7])\n                cube([body_length*0.2, body_width*1.1, body_height*0.3], center=true);\n            translate([-body_length*0.1, 0, body_height*0.5])\n                cube([body_length*1.2, body_width*0.9, body_height*0.8], center=true);\n        }\n        \n        // Windows\n        for(i = [-1:1]) {\n            translate([i*15, body_width/2 - 0.5, body_height*0.6])\n                cube([window_width, 1, window_height], center=true);\n            translate([i*15, -body_width/2 + 0.5, body_height*0.6])\n                cube([window_width, 1, window_height], center=true);\n        }\n        \n        // Door spaces\n        translate([body_length/2 - 5, 0, body_height*0.5])\n            cube([8, body_width - 2, body_height - 4], center=true);\n        translate([-body_length/2 + 5, 0, body_height*0.5])\n            cube([8, body_width - 2, body_height - 4], center=true);\n    }\n    \n    // Roof details\n    translate([0, 0, body_height*0.85])\n        cube([body_length*0.9, body_width*0.8, 3], center=true);\n    \n    // Underframe\n    translate([0, 0, wheel_diameter/2 + 2])\n        cube([body_length*1.05, body_width*0.85, 4], center=true);\n    \n    // Bogies (wheel assemblies)\n    for(pos = [-body_length/3, body_length/3]) {\n        translate([pos, 0, wheel_diameter/2]) {\n            difference() {\n                // Bogie frame\n                cube([20, body_width*0.7, 3], center=true);\n                \n                // Cutouts\n                for(x = [-6:6:6])\n                    translate([x, 0, -1])\n                        cube([4, body_width*0.4, 5], center=true);\n            }\n            \n            // Wheels\n            for(side = [-1, 1]) {\n                translate([0, side*(body_width/2 - wheel_width/2 - 2), 0])\n                    rotate([90, 0, 0])\n                        cylinder(h=wheel_width, d=wheel_diameter, center=true);\n            }\n        }\n    }\n    \n    // Couplers\n    for(dir = [-1, 1]) {\n        translate([dir*(body_length/2 + coupler_length/2), 0, wheel_diameter/2 + 2])\n            union() {\n                cube([coupler_length, 8, 4], center=true);\n                translate([dir*coupler_length/2, 0, 2])\n                    rotate([0, 90*dir, 0])\n                        cylinder(h=4, d=4, center=true);\n            }\n    }\n    \n    // Roof vents\n    for(i = [-20:10:20]) {\n        translate([i, 0, body_height*0.85 + 2])\n            cube([6, body_width*0.5, 2], center=true);\n    }\n}\n\n// Render the train\noverground_train();",
    "renders": true
  },
  {
    "vehicle": "funicular",
    "openscad_code": "// Realistic-style funicular, medium complexity, ~100 mm long\n// All dimensions in mm, printable without support\n\n// Overall scale\nscale_factor = 1;\n\n// Track parameters\ntrack_len = 100;\ntrack_w = 8;\ntrack_h = 3;\nrail_w = 2;\nrail_h = 5;\ntie_w = 12;\ntie_h = 2;\ntie_step = 10;\n\n// Car parameters\ncar_len = 20;\ncar_w = 10;\ncar_h = 12;\nwall_th = 1.5;\nwindow_h = 4;\n\n// Tower parameters\ntower_w = 8;\ntower_d = 8;\ntower_h = 35;\nbracket_w = 12;\nbracket_h = 5;\nbracket_d = 4;\n\n// Wheel parameters\nwheel_r = 3;\nwheel_h = 2;\naxle_r = 1;\n\n// Track module with sleepers and rails\nmodule track(length) {\n    // Sleepers\n    for (i = [0 : tie_step : length]) {\n        translate([i, 0, 0])\n            cube([tie_h, tie_w, tie_h], center = true);\n    }\n    // Left rail\n    translate([0, -track_w/2 + rail_w/2, rail_h/2 - track_h])\n        cube([length, rail_w, rail_h], center = false);\n    // Right rail\n    translate([0,  track_w/2 - rail_w/2, rail_h/2 - track_h])\n        cube([length, rail_w, rail_h], center = false);\n}\n\n// Car body\nmodule car_body() {\n    difference() {\n        // Main shell\n        cube([car_len, car_w, car_h], center = true);\n        // Hollow interior\n        translate([0, 0, wall_th/2])\n            cube([car_len - 2*wall_th, car_w - 2*wall_th, car_h - wall_th], center = true);\n        // Door openings\n        translate([-car_len/2 + wall_th/2, 0, -car_h/2 + window_h])\n            cube([wall_th, car_w*0.6, window_h*1.5], center = true);\n        translate([ car_len/2 - wall_th/2, 0, -car_h/2 + window_h])\n            cube([wall_th, car_w*0.6, window_h*1.5], center = true);\n    }\n    // Roof lip\n    translate([0, 0, car_h/2])\n        cube([car_len + 1, car_w + 1, wall_th], center = true);\n}\n\n// Wheel set\nmodule wheels() {\n    // Left wheels\n    for (side = [-1, 1]) {\n        translate([0, side*(car_w/2 + rail_w/2), -car_h/2 + rail_h])\n            rotate([0, 90, 0])\n                cylinder(h = wheel_h, r = wheel_r, center = true);\n        translate([0, side*(car_w/2 + rail_w/2), -car_h/2 + rail_h])\n            rotate([0, 90, 0])\n                cylinder(h = axle_r*3, r = axle_r, center = true);\n    }\n}\n\n// Tower support\nmodule tower() {\n    // Main post\n    translate([0, 0, tower_h/2])\n        cube([tower_w, tower_d, tower_h], center = true);\n    // Top bracket for cable\n    translate([0, 0, tower_h + bracket_h/2])\n        cube([bracket_w, bracket_d, bracket_h], center = true);\n    // Base footing\n    translate([0, 0, -2])\n        cube([tower_w + 4, tower_d + 4, 4], center = true);\n}\n\n// Cable as thin cylinder\nmodule cable(z_pos) {\n    translate([-track_len/2, 0, z_pos])\n        rotate([0, 90, 0])\n            cylinder(h = track_len, r = 0.8, center = false);\n}\n\n// Assemble\nscale(scale_factor)\nunion() {\n    // Track\n    translate([0, 0, 0])\n        track(track_len);\n    \n    // Lower car\n    translate([track_len/4, 0, rail_h])\n        union() {\n            car_body();\n            wheels();\n        }\n    \n    // Upper car\n    translate([-track_len/4, 0, rail_h])\n        union() {\n            car_body();\n            wheels();\n        }\n    \n    // Tower\n    translate([track_len/2 + tower_w/2 + 5, 0, 0])\n        tower();\n    \n    // Cables\n    cable(tower_h + bracket_h);\n    translate([0, 0, rail_h + car_h/2])\n        cable(tower_h + bracket_h);\n}",
    "renders": true
  },
  {
    "vehicle": "rackrail",
    "openscad_code": "// 19-inch rackrail segment (2U high, 84 mm) – medium-complexity realistic style\n// Designed for 3-D printing: no overhangs >45°, 2 mm wall thickness, 0.2 mm layer-friendly\n\n$fn = 32;\n\n// global dimensions in millimetres\nrail_height      = 84;      // 2U\nrail_length      = 100;     // printable segment\nrail_thickness   = 2.5;     // metal sheet thickness\nmounting_hole_d  = 5.5;     // M5 clearance\nmounting_pitch   = 15.9;    // EIA spacing\ntop_edge         = 6.35;    // from panel centerline to rail edge\nbottom_edge      = 6.35;    // same, mirrored\nflange_width     = 12;      // outward flange for rack screws\ncountersink_d    = 9.5;     // 90° countersink head diameter\ncountersink_h    = 3;       // depth of countersink cone\nbevel            = 0.5;     // print-friendly 45° bevel depth\nrail_color       = [0.65, 0.65, 0.68];\n\nmodule rackrail_2u() {\n    // main vertical bar\n    difference() {\n        // solid rail profile\n        linear_extrude(height = rail_length, center = false)\n            offset(r = bevel)               // print-friendly outer bevel\n                offset(delta = -bevel)\n                    polygon(points = [\n                        [0, 0],\n                        [flange_width, 0],\n                        [flange_width, top_edge - rail_thickness/2],\n                        [rail_thickness, top_edge - rail_thickness/2],\n                        [rail_thickness, rail_height - (top_edge - rail_thickness/2)],\n                        [flange_width, rail_height - (top_edge - rail_thickness/2)],\n                        [flange_width, rail_height],\n                        [0, rail_height]\n                    ]);\n\n        // mounting holes along Z (length) axis\n        for (z = [mounting_pitch, 2*mounting_pitch, 3*mounting_pitch])\n            translate([0, rail_height/2, z])\n                rotate([90, 0, 0])\n                    union() {\n                        cylinder(h = rail_thickness + 1, d = mounting_hole_d, $fn = 16);\n                        // countersink cone\n                        translate([0, 0, rail_thickness])\n                            cylinder(h = countersink_h, d1 = mounting_hole_d, d2 = countersink_d, $fn = 16);\n                    }\n    }\n\n    // optional stiffening ribs on rear\n    translate([rail_thickness, 0, 0])\n        for (z = [0:25:rail_length-1])\n            cube([1, rail_height, 10]);     // 1 mm ribs every 25 mm\n}\n\ncolor(rail_color) rackrail_2u();",
    "renders": true
  },
  {
    "vehicle": "cogwheel",
    "openscad_code": "// Realistic cogwheel – OpenSCAD\n// Printable, 60 mm diameter, 10 mm thick\n// Involute-like teeth created with primitive extrusions\n\n// ---------- PARAMETERS ----------\n$fn = 50;               // Global smoothness\nN = 20;                 // Number of teeth\nD_hub = 16;             // Hub diameter (mm)\nD_shaft = 8;            // Shaft hole diameter (mm)\nR_cog = 30;             // Pitch-circle radius (mm)\nTHICK = 10;             // Overall thickness (mm)\nTOOTH_DEPTH = 4;        // Radial tooth depth\nTOOTH_WIDTH = 6;        // Circumferential tooth width\nCHAMFER = 1;            // 45° chamfer on tooth tips\n\n// ---------- MODULES ----------\n\nmodule tooth() {\n    // Create one realistic involute-like tooth\n    // Base block\n    difference() {\n        linear_extrude(height = THICK)\n            polygon(points=[\n                [-TOOTH_WIDTH/2, 0],\n                [ TOOTH_WIDTH/2, 0],\n                [ TOOTH_WIDTH/2*0.85, R_cog + TOOTH_DEPTH - CHAMFER],\n                [ 0,                R_cog + TOOTH_DEPTH],\n                [-TOOTH_WIDTH/2*0.85, R_cog + TOOTH_DEPTH - CHAMFER]\n            ]);\n        // Chamfer top edges\n        for (sgn = [-1, 1])\n            translate([sgn*TOOTH_WIDTH/2, R_cog + TOOTH_DEPTH - CHAMFER, 0])\n                rotate([45,0,0])\n                    cube([CHAMFER*sqrt(2), CHAMFER*sqrt(2), THICK], center=true);\n    }\n}\n\nmodule hub() {\n    // Central hub with shaft hole\n    difference() {\n        cylinder(h = THICK, d = D_hub, center=true);\n        cylinder(h = THICK + 0.1, d = D_shaft, center=true);\n    }\n}\n\nmodule spokes() {\n    // Four straight spokes for strength\n    for (a = [0, 90, 180, 270])\n        rotate([0,0,a])\n            translate([0, (R_cog + D_hub/2)/2, 0])\n                cube([6, (R_cog - D_hub/2), THICK], center=true);\n}\n\nmodule web() {\n    // Thin web between spokes to reduce material\n    difference() {\n        cylinder(h = THICK, d = 2*(R_cog - TOOTH_DEPTH), center=true);\n        cylinder(h = THICK + 0.1, d = D_hub + 4, center=true);\n    }\n}\n\n// ---------- MAIN ----------\nunion() {\n    // Central body\n    difference() {\n        cylinder(h = THICK, d = 2*(R_cog - TOOTH_DEPTH), center=true);\n        cylinder(h = THICK + 0.1, d = D_hub, center=true);\n    }\n\n    // Web and spokes\n    web();\n    spokes();\n\n    // Teeth array\n    for (i = [0 : N-1])\n        rotate([0,0,i*360/N])\n            tooth();\n\n    // Hub on top\n    hub();\n}",
    "renders": true
  },
  {
    "vehicle": "tourist",
    "openscad_code": "// Tourist figure (realistic, medium complexity)\n// Dimensions: ~60 mm tall, designed for 3D printing\n\n$fn = 36;  // Smooth curves\n\nmodule head() {\n    // Basic head shape\n    translate([0, 0, 52]) {\n        sphere(d = 16);\n    }\n    \n    // Hair - simple cap\n    translate([0, 0, 55]) {\n        cylinder(h = 8, d1 = 18, d2 = 16, center = true);\n    }\n    \n    // Sunglasses\n    translate([0, 8.5, 53]) {\n        difference() {\n            cube([14, 4, 6], center = true);\n            cube([12, 5, 4], center = true);\n        }\n    }\n    \n    // Nose\n    translate([0, 9, 52]) {\n        cube([3, 4, 2], center = true);\n    }\n    \n    // Mouth\n    translate([0, 9, 48.5]) {\n        cylinder(h = 0.5, d = 2, center = true);\n    }\n}\n\nmodule torso() {\n    // Body\n    translate([0, 0, 35]) {\n        cube([20, 12, 28], center = true);\n    }\n    \n    // Backpack\n    translate([-11, 0, 42]) {\n        cube([8, 10, 18], center = true);\n    }\n    \n    // Backpack straps\n    for(x = [-6, 6]) {\n        translate([x, 0, 42]) {\n            cube([2, 6, 16], center = true);\n        }\n    }\n}\n\nmodule arms() {\n    // Left arm with camera\n    translate([12, 0, 45]) {\n        rotate([0, 0, -20]) {\n            // Upper arm\n            translate([0, 0, 0]) {\n                cylinder(h = 12, d = 4, center = true);\n            }\n            \n            // Lower arm\n            translate([0, 10, 0]) {\n                rotate([0, 90, 0]) {\n                    cylinder(h = 10, d = 4, center = true);\n                    \n                    // Camera\n                    translate([5, 0, 0]) {\n                        cube([6, 8, 4], center = true);\n                        \n                        // Lens\n                        translate([3, 0, 0]) {\n                            cylinder(h = 3, d = 4);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Right arm\n    translate([-12, 0, 45]) {\n        rotate([0, 0, 20]) {\n            cylinder(h = 12, d = 4, center = true);\n            translate([0, 10, 0]) {\n                rotate([0, 90, 0]) {\n                    cylinder(h = 10, d = 4, center = true);\n                }\n            }\n        }\n    }\n}\n\nmodule legs() {\n    // Shorts\n    translate([0, 0, 20]) {\n        cube([20, 12, 12], center = true);\n    }\n    \n    // Left leg\n    translate([5, 0, 10]) {\n        cylinder(h = 20, d = 7);\n        // Shoe\n        translate([0, 0, -1]) {\n            cube([9, 12, 5], center = true);\n        }\n    }\n    \n    // Right leg\n    translate([-5, 0, 10]) {\n        cylinder(h = 20, d = 7);\n        // Shoe\n        translate([0, 0, -1]) {\n            cube([9, 12, 5], center = true);\n        }\n    }\n}\n\nmodule hat() {\n    // Baseball cap\n    translate([0, 0, 60]) {\n        // Brim\n        translate([0, 12, 0]) {\n            rotate([90, 0, 0]) {\n                cylinder(h = 2, d1 = 24, d2 = 20);\n            }\n        }\n        \n        // Cap top\n        translate([0, 0, 2]) {\n            cylinder(h = 6, d = 18);\n        }\n    }\n}\n\n// Assemble the tourist\nunion() {\n    head();\n    torso();\n    arms();\n    legs();\n    hat();\n}",
    "renders": true
  },
  {
    "vehicle": "excursion",
    "openscad_code": "// Realistic Excursion (Hiking Shoe) - Medium Complexity\n// 3D printable, no overhangs, realistic proportions\n\n// Overall dimensions: 90mm length, 30mm width, 35mm height\n\n$fn = 32;\n\n// Main shoe body\nmodule shoe_body() {\n    // Sole base\n    translate([0, 0, 0]) {\n        difference() {\n            // Main sole block\n            cube([90, 30, 5], center=true);\n            \n            // Tread pattern - subtract from sole\n            for(i = [-35:10:35]) {\n                translate([i, 0, 2.5])\n                    cube([8, 28, 3], center=true);\n            }\n        }\n    }\n    \n    // Midsole\n    translate([0, 0, 5.5])\n        cube([88, 28, 4], center=true);\n    \n    // Upper shoe\n    difference() {\n        // Main upper\n        translate([0, 0, 12])\n            cube([85, 26, 20], center=true);\n        \n        // Foot opening\n        translate([5, 0, 22])\n            scale([0.8, 0.7, 1])\n                sphere(r=15);\n    }\n}\n\n// Toe cap\nmodule toe_cap() {\n    translate([35, 0, 12])\n        rotate([90, 0, 0])\n            cylinder(h=15, r1=14, r2=10);\n}\n\n// Heel support\nmodule heel_support() {\n    difference() {\n        // Main heel\n        translate([-35, 0, 12])\n            cube([20, 26, 25], center=true);\n        \n        // Heel curve\n        translate([-35, 0, 20])\n            sphere(r=15);\n    }\n}\n\n// Eyelets for laces\nmodule eyelets() {\n    // Left side eyelets\n    for(y = [-8:4:8]) {\n        translate([25, y, 25])\n            rotate([0, 90, 0])\n                cylinder(h=2, r=1.5, center=true);\n        translate([10, y, 25])\n            rotate([0, 90, 0])\n                cylinder(h=2, r=1.5, center=true);\n        translate([-5, y, 25])\n            rotate([0, 90, 0])\n                cylinder(h=2, r=1.5, center=true);\n    }\n}\n\n// Lace pattern\nmodule laces() {\n    // Simple lace segments\n    color(\"white\") {\n        for(y = [-8:4:8]) {\n            hull() {\n                translate([25, y, 25])\n                    sphere(r=1);\n                translate([10, y, 25])\n                    sphere(r=1);\n            }\n            hull() {\n                translate([10, y, 25])\n                    sphere(r=1);\n                translate([-5, y, 25])\n                    sphere(r=1);\n            }\n        }\n    }\n}\n\n// Brand logo (simplified)\nmodule logo() {\n    translate([0, 12, 25])\n        rotate([90, 0, 0])\n            linear_extrude(height=1)\n                text(\"HIKE\", size=5, halign=\"center\");\n}\n\n// Assemble the shoe\nunion() {\n    shoe_body();\n    toe_cap();\n    heel_support();\n    eyelets();\n    laces();\n    logo();\n}",
    "renders": true
  },
  {
    "vehicle": "observation",
    "openscad_code": "// Observation Tower with antenna array and observation deck\n// Realistic style, medium complexity, 3D-printable\n\n$fn = 32;  // Smooth curves for 3D printing\n\n// Overall scale factor to make the model ~80 mm tall\nscale_factor = 0.5;\n\n// Main module\nmodule observation_tower() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        union() {\n            // Base foundation\n            translate([0, 0, 5]) \n                cylinder(h = 10, r1 = 25, r2 = 20, center = true);\n            \n            // Main tower shaft\n            translate([0, 0, 35]) \n                cylinder(h = 60, r = 15, center = true);\n            \n            // Observation deck ring\n            translate([0, 0, 65]) \n                difference() {\n                    cylinder(h = 5, r = 22, center = true);\n                    cylinder(h = 6, r = 16, center = true);\n                }\n            \n            // Deck railing posts\n            for (i = [0 : 15 : 360]) {\n                rotate([0, 0, i]) \n                    translate([19, 0, 67]) \n                        cylinder(h = 6, r = 1, center = true);\n            }\n            \n            // Antenna mast\n            translate([0, 0, 95]) \n                cylinder(h = 30, r = 2, center = true);\n            \n            // Antenna crossbars\n            translate([0, 0, 100]) \n                rotate([90, 0, 0]) \n                    cylinder(h = 20, r = 1, center = true);\n            translate([0, 0, 105]) \n                rotate([0, 90, 0]) \n                    cylinder(h = 20, r = 1, center = true);\n            \n            // Top beacon\n            translate([0, 0, 110]) \n                sphere(r = 2.5);\n            \n            // Access ladder\n            translate([16, 0, 35]) \n                rotate([90, 0, 0]) \n                    union() {\n                        // Ladder rails\n                        translate([-1, 0, 0]) \n                            cylinder(h = 60, r = 0.5, center = true);\n                        translate([1, 0, 0]) \n                            cylinder(h = 60, r = 0.5, center = true);\n                        \n                        // Ladder rungs\n                        for (z = [0 : 5 : 60]) {\n                            translate([0, 0, z - 30]) \n                                cube([2, 0.5, 0.5], center = true);\n                        }\n                    }\n            \n            // Support cables\n            for (i = [0 : 120 : 360]) {\n                rotate([0, 0, i]) \n                    translate([20, 0, 65]) \n                        cylinder(h = 65, r = 0.8, center = true);\n            }\n            \n            // Door\n            translate([0, 15, 5]) \n                difference() {\n                    cube([8, 0.5, 12], center = true);\n                    translate([0, 0.3, 2]) \n                        cube([4, 0.5, 4], center = true);\n                }\n        }\n    }\n}\n\n// Render the tower\nobservation_tower();",
    "renders": true
  },
  {
    "vehicle": "dining",
    "openscad_code": "// Dining room table and chairs set (realistic, medium complexity)\n// Overall footprint ~90 x 60 mm, table height ~35 mm\n// All parts printable without support\n\n// Table top\nmodule table_top() {\n    difference() {\n        // Main top surface\n        translate([0, 0, 30])\n            cube([80, 50, 3], center=true);\n        \n        // Chamfer edge\n        translate([0, 0, 31.5])\n            cube([78, 48, 0.5], center=true);\n    }\n}\n\n// Table leg\nmodule table_leg(x, y) {\n    translate([x, y, 15])\n        cylinder(h=30, d=4, $fn=16);\n}\n\n// Chair seat\nmodule chair_seat() {\n    difference() {\n        // Seat base\n        cube([18, 18, 2], center=true);\n        \n        // Small rounding\n        translate([0, 0, -0.5])\n            cube([16, 16, 3], center=true);\n    }\n}\n\n// Chair back\nmodule chair_back() {\n    union() {\n        // Backrest panel\n        translate([0, 7, 7])\n            cube([16, 1, 12], center=true);\n        \n        // Two vertical slats\n        for(x=[-5, 5])\n            translate([x, 7, 7])\n                cube([1, 1, 12], center=true);\n    }\n}\n\n// Full chair\nmodule chair(x, y, angle) {\n    translate([x, y, 0])\n    rotate([0, 0, angle])\n    union() {\n        // Seat\n        translate([0, 0, 8])\n            chair_seat();\n        \n        // Legs\n        for(xl=[-7, 7])\n            for(yl=[-7, 7])\n                translate([xl, yl, 4])\n                    cylinder(h=8, d=1.5, $fn=8);\n        \n        // Backrest\n        chair_back();\n    }\n}\n\n// Assemble the dining set\nunion() {\n    // Table\n    table_top();\n    \n    // Four table legs\n    for(x=[-34, 34])\n        for(y=[-20, 20])\n            table_leg(x, y);\n    \n    // Six chairs around table\n    chair(-45, 0, 0);\n    chair(45, 0, 180);\n    chair(0, -30, 90);\n    chair(0, 30, -90);\n    chair(-30, -25, 45);\n    chair(30, 25, -135);\n}",
    "renders": true
  },
  {
    "vehicle": "sleeping",
    "openscad_code": "// Sleeping Cat – medium complexity, realistic style, 3D-printable\n// Overall bounding box ≈ 85 mm long, 50 mm wide, 30 mm high\n\n// Wall thickness for printability – most parts use 2 mm walls\n$fn = 36;\n\n// Main body shell – hollow egg-like shape\nmodule body_shell(h=30, r=22) {\n    difference() {\n        scale([1, 0.85, 0.65])\n            sphere(r=r);            // outer shell\n        \n        translate([0,0,-1])         // inner hollow\n            scale([1,0.8,0.6])\n            sphere(r=r-2);\n    }\n}\n\n// Head – slightly flattened sphere\nmodule head(r=18) {\n    scale([1, 0.9, 0.7])\n        sphere(r=r);\n}\n\n// Ears – simple cones with wall thickness\nmodule ear(ang=0) {\n    rotate([0,0,ang])\n    translate([0, 17, 6])\n    rotate_extrude(angle=90)        // thin-walled cone\n        translate([5,0])\n            square([2,7]);\n}\n\n// Tail – sweeping cylinder\nmodule tail() {\n    rotate([0,-25,0])\n    translate([-40,0,5])\n    for(i=[0:20]) {\n        rotate([0, i*4.5, 0])\n        translate([i*2, 0, sin(i*8)*3])\n            rotate([90,0,0])\n            cylinder(h=2.1, r1=5-i*0.15, r2=5-i*0.15);\n    }\n}\n\n// Paws – short cylinders\nmodule paw(x,y,z,rot=0) {\n    translate([x,y,z])\n    rotate([90,0,rot])\n    cylinder(h=8, r1=5, r2=4);\n}\n\n// Facial features – tiny indents\nmodule face() {\n    // closed eyes\n    translate([-7, 15, -1])\n        rotate([0,-20,0])\n        cube([8,2,1], center=true);\n    translate([7, 15, -1])\n        rotate([0,20,0])\n        cube([8,2,1], center=true);\n    \n    // nose\n    translate([0, 17, -2])\n        sphere(2.5);\n    \n    // mouth line\n    translate([0, 18.5, -2])\n        rotate([90,0,0])\n        cylinder(h=0.6, r=3);\n}\n\n// Assembly\nunion() {\n    // body\n    color(\"grey\")\n    translate([0,0,12])\n        body_shell();\n    \n    // head\n    color(\"grey\")\n    translate([25,0,23])\n        head();\n    \n    // ears\n    color(\"grey\")\n    translate([25,0,23])\n    union() {\n        ear(-35);\n        ear(35);\n    }\n    \n    // tail\n    color(\"grey\")\n    tail();\n    \n    // four paws\n    color(\"grey\")\n    union() {\n        paw( 15,  15, 5, 20);\n        paw( 15, -15, 5,-20);\n        paw(-20,  10, 0, 20);\n        paw(-20, -10, 0,-20);\n    }\n    \n    // face details\n    color(\"black\")\n    translate([25,0,23])\n        face();\n}",
    "renders": true
  },
  {
    "vehicle": "sleeper",
    "openscad_code": "// Realistic railway sleeper\n// Medium complexity, 3D-printable\n\n$fn = 32;\n\nmodule sleeper() {\n    // Main wooden sleeper block\n    difference() {\n        translate([-50, -125, 0])\n            cube([100, 250, 80]);\n        \n        // Top chamfers\n        translate([-50, -125, 79])\n            rotate([0, 45, 0])\n            cube([120, 250, 80]);\n        translate([50, -125, 79])\n            rotate([0, -45, 0])\n            cube([120, 250, 80]);\n    }\n    \n    // Bottom rounding\n    translate([0, 0, -0.5])\n        scale([1, 1, 0.5])\n        cylinder(h=1, r1=50, r2=50);\n    \n    // Spike holes\n    for(x = [-30, 30])\n        for(y = [-80, 0, 80])\n            translate([x, y, 0])\n                cylinder(h=85, r=3.5);\n    \n    // Plate indentations\n    for(x = [-30, 30])\n        for(y = [-80, 0, 80])\n            translate([x-25, y-25, 80])\n                cube([50, 50, 2]);\n    \n    // Weathering grooves along grain\n    for(y = [-110:10:110]) {\n        translate([-48, y, 78])\n            cube([96, 1, 2]);\n    }\n    \n    // End grain texture\n    difference() {\n        translate([-50, -125, 0])\n            cube([100, 250, 80]);\n        \n        // End grooves\n        for(z = [10:10:70]) {\n            translate([-55, -125, z])\n                cube([110, 250, 1]);\n        }\n    }\n    \n    // Identification tag\n    translate([0, -120, 82])\n        rotate([0, 0, 0])\n        cube([20, 10, 1]);\n    \n    // Rail cutouts\n    for(x = [-30, 30]) {\n        translate([x-5, -125, 80])\n            cube([10, 250, 8]);\n    }\n}\n\n// Render the sleeper\nsleeper();",
    "renders": true
  },
  {
    "vehicle": "couchette",
    "openscad_code": "// Realistic 3D printable couchette (medium complexity)\n// Approx 80 mm long, 30 mm wide, 35 mm high\n\n//---------- Parameters ----------\nwall = 1.2;          // wall thickness for 3D printing\nbed_w = 28;          // bed width\nbed_l = 75;          // bed length\nbed_h = 4;           // mattress thickness\nleg_h = 18;          // leg height\nhead_w = 28;         // headboard width\nhead_h = 25;         // headboard height\nhead_t = 2;          // headboard thickness\npillow_w = 18;\npillow_l = 10;\npillow_h = 3;\nrail_h = 6;\nrail_d = 1.5;\n\n//---------- Modules ----------\nmodule mattress() {\n    difference() {\n        // main mattress\n        translate([0, 0, bed_h/2])\n            cube([bed_l, bed_w, bed_h], center=true);\n        \n        // subtle top stitching grooves\n        for (x = [-bed_l/2 + 10 : 10 : bed_l/2 - 10])\n            translate([x, 0, bed_h - 0.3])\n                cube([0.6, bed_w - 2, 0.6], center=true);\n        for (y = [-bed_w/2 + 5 : 5 : bed_w/2 - 5])\n            translate([0, y, bed_h - 0.3])\n                cube([bed_l - 2, 0.6, 0.6], center=true);\n    }\n}\n\nmodule pillow() {\n    translate([-bed_l/2 + pillow_l/2 + 3, 0, bed_h + pillow_h/2])\n        cube([pillow_l, pillow_w, pillow_h], center=true);\n}\n\nmodule headboard() {\n    difference() {\n        // main headboard panel\n        translate([-bed_l/2 - head_t/2, 0, head_h/2 + bed_h])\n            cube([head_t, head_w, head_h], center=true);\n        \n        // decorative cutouts\n        for (i = [-1:1])\n            translate([-bed_l/2 - head_t/2, i * 8, head_h/2 + bed_h + 5])\n                cylinder(h = head_t + 0.2, r = 3, center=true, $fn=20);\n    }\n}\n\nmodule leg(pos_x, pos_y) {\n    // simple tapered square leg\n    hull() {\n        translate([pos_x, pos_y, leg_h/2])\n            cube([4, 4, leg_h], center=true);\n        translate([pos_x, pos_y, 0.5])\n            cube([5, 5, 1], center=true);\n    }\n}\n\nmodule side_rail(len, angle=0) {\n    rotate([0, 0, angle])\n        translate([0, 0, rail_h/2])\n            cube([len, rail_d, rail_h], center=true);\n}\n\nmodule bed_frame() {\n    union() {\n        // base frame\n        translate([0, 0, leg_h + bed_h/2])\n            cube([bed_l, bed_w, bed_h], center=true);\n        \n        // slats\n        for (x = [-bed_l/2 + 5 : 5 : bed_l/2 - 5])\n            translate([x, 0, leg_h + bed_h/2])\n                cube([1.5, bed_w - 4, bed_h], center=true);\n    }\n}\n\n//---------- Assembly ----------\ndifference() {\n    union() {\n        // main structure\n        bed_frame();\n        \n        // four legs\n        leg(-bed_l/2 + 2, -bed_w/2 + 2);\n        leg(-bed_l/2 + 2,  bed_w/2 - 2);\n        leg( bed_l/2 - 2, -bed_w/2 + 2);\n        leg( bed_l/2 - 2,  bed_w/2 - 2);\n        \n        // headboard\n        headboard();\n        \n        // side rails\n        side_rail(bed_l);\n        translate([0, 0, rail_h])\n            side_rail(bed_l);\n        \n        // mattress & pillow\n        mattress();\n        pillow();\n    }\n    \n    // hollow out interior\n    translate([0, 0, leg_h + bed_h/2])\n        cube([bed_l - 2*wall, bed_w - 2*wall, bed_h - wall], center=true);\n}",
    "renders": true
  },
  {
    "vehicle": "autorack",
    "openscad_code": "// OpenSCAD Autorack (medium complexity, realistic style)\n// Overall length ~90 mm, designed for 3D printing\n\n$fn = 36;\n\n// Main parameters\nlength = 90;\nwidth = 30;\nheight = 30;\nwall_thick = 1.5;\nramp_slope = 15;\n\nmodule main_frame() {\n    difference() {\n        // Outer box shell\n        translate([0, 0, height/2])\n            cube([length, width, height], center=true);\n        \n        // Hollow inside\n        translate([0, 0, height/2])\n            cube([length-wall_thick*2, width-wall_thick*2, height-wall_thick], center=true);\n    }\n}\n\nmodule slotted_side() {\n    // Left side wall with slots\n    translate([-length/2+wall_thick/2, 0, height/2])\n        cube([wall_thick, width-wall_thick*2, height-wall_thick], center=true);\n    \n    // Add upper slots\n    for(x = [-length/2+10 : 10 : length/2-10]) {\n        translate([x, -width/2+wall_thick, height-5])\n            cube([4, wall_thick, 8]);\n    }\n    \n    // Right side wall with slots\n    translate([length/2-wall_thick/2, 0, height/2])\n        cube([wall_thick, width-wall_thick*2, height-wall_thick], center=true);\n    \n    // Add upper slots\n    for(x = [-length/2+10 : 10 : length/2-10]) {\n        translate([x, width/2-wall_thick, height-5])\n            cube([4, wall_thick, 8]);\n    }\n}\n\nmodule end_doors() {\n    // Front end with doors\n    translate([length/2-wall_thick/2, 0, height/2])\n        cube([wall_thick, width-wall_thick*2, height-wall_thick], center=true);\n    \n    // Door gaps\n    translate([length/2, -width/4, height/2])\n        cube([2, width/2-2, height-4], center=true);\n    translate([length/2, width/4, height/2])\n        cube([2, width/2-2, height-4], center=true);\n    \n    // Rear end\n    translate([-length/2+wall_thick/2, 0, height/2])\n        cube([wall_thick, width-wall_thick*2, height-wall_thick], center=true);\n}\n\nmodule roof() {\n    translate([0, 0, height-0.75])\n        cube([length-wall_thick*2, width-wall_thick*2, wall_thick], center=true);\n}\n\nmodule decks() {\n    // Lower deck\n    translate([0, 0, 5])\n        cube([length-wall_thick*2, width-wall_thick*2, 1.2], center=true);\n    \n    // Upper deck\n    translate([0, 0, 20])\n        cube([length-wall_thick*2, width-wall_thick*2, 1.2], center=true);\n}\n\nmodule wheel_wells() {\n    // Left side wheel wells\n    translate([-length/2+15, -width/2-2, 2])\n        cube([10, 4, 4]);\n    translate([-length/2+35, -width/2-2, 2])\n        cube([10, 4, 4]);\n    translate([-length/2+55, -width/2-2, 2])\n        cube([10, 4, 4]);\n    \n    // Right side wheel wells\n    translate([-length/2+15, width/2-2, 2])\n        cube([10, 4, 4]);\n    translate([-length/2+35, width/2-2, 2])\n        cube([10, 4, 4]);\n    translate([-length/2+55, width/2-2, 2])\n        cube([10, 4, 4]);\n}\n\nmodule underframe() {\n    // Center sill\n    translate([0, 0, 1])\n        cube([length-4, 4, 2], center=true);\n    \n    // Cross bearers\n    for(x = [-length/2+15 : 15 : length/2-15]) {\n        translate([x, 0, 1])\n            cube([2, width-4, 2], center=true);\n    }\n    \n    // Coupler pads\n    translate([-length/2+2, 0, 1])\n        cube([4, 6, 2], center=true);\n    translate([length/2-2, 0, 1])\n        cube([4, 6, 2], center=true);\n}\n\nmodule supports() {\n    // Vertical posts\n    for(x = [-length/2+10 : 10 : length/2-10]) {\n        translate([x, -width/2+wall_thick, 12.5])\n            cube([1.5, 1.5, 15]);\n        translate([x, width/2-wall_thick, 12.5])\n            cube([1.5, 1.5, 15]);\n    }\n}\n\n// Assemble the autorack\nunion() {\n    main_frame();\n    slotted_side();\n    end_doors();\n    roof();\n    decks();\n    wheel_wells();\n    underframe();\n    supports();\n}",
    "renders": true
  },
  {
    "vehicle": "boxcar",
    "openscad_code": "// Realistic Boxcar (Medium Complexity)\n// Length: 80mm, Width: 25mm, Height: 35mm\n\n// Main dimensions\ncar_length = 80;\ncar_width = 25;\ncar_height = 25;\nroof_height = 10;\nwall_thickness = 1.5;\ndoor_gap = 2;\n\n// Wheel dimensions\nwheel_dia = 10;\nwheel_width = 4;\nwheel_gap = 3;\n\n// Coupler dimensions\ncoupler_length = 8;\ncoupler_diameter = 3;\n\n// Underframe details\nframe_height = 3;\nframe_width = 20;\n\n// Module for making rounded boxes\nmodule rounded_box(size, radius) {\n    translate([radius, radius, 0])\n    minkowski() {\n        cube([size.x-2*radius, size.y-2*radius, size.z]);\n        cylinder(r=radius, h=size.z, $fn=16);\n    }\n}\n\n// Module for wheel set\nmodule wheel_set() {\n    for(i=[-1, 1]) {\n        translate([0, i*(car_width/2 + wheel_gap), 0]) {\n            rotate([0, 90, 0])\n            cylinder(d=wheel_dia, h=wheel_width, $fn=20);\n            translate([0, 0, wheel_width/2])\n            cylinder(d=wheel_dia*0.7, h=1, $fn=20);\n        }\n    }\n}\n\n// Module for door\nmodule sliding_door(x_pos) {\n    translate([x_pos, 0, 0]) {\n        difference() {\n            cube([wall_thickness, car_width*0.8, car_height*0.9]);\n            translate([wall_thickness/2, car_width*0.4-1, 0])\n            cube([0.5, 2, car_height*0.9], center=true);\n            translate([wall_thickness/2, -(car_width*0.4-1), 0])\n            cube([0.5, 2, car_height*0.9], center=true);\n        }\n    }\n}\n\n// Module for roof walk\nmodule roof_walk() {\n    for(i=[0:5:car_length-10]) {\n        translate([i-35, 0, roof_height-wall_thickness])\n        cube([1, car_width-4, wall_thickness]);\n    }\n}\n\n// Main body\ndifference() {\n    // Hollow body\n    union() {\n        // Base box\n        rounded_box([car_length, car_width, car_height], 2);\n        \n        // Roof\n        translate([0, 0, car_height])\n        rounded_box([car_length, car_width, roof_height], 2);\n    }\n    \n    // Hollow out\n    translate([wall_thickness, wall_thickness, wall_thickness])\n    cube([car_length-2*wall_thickness, car_width-2*wall_thickness, car_height+roof_height-wall_thickness]);\n    \n    // Door openings left\n    translate([car_length*0.3, -wall_thickness/2, 0])\n    cube([door_gap, car_width+wall_thickness, car_height*0.9]);\n    \n    // Door openings right\n    translate([car_length*0.7, -wall_thickness/2, 0])\n    cube([door_gap, car_width+wall_thickness, car_height*0.9]);\n}\n\n// Sliding doors\nsliding_door(car_length*0.3 - 3);\nsliding_door(car_length*0.7 - 3);\n\n// Underframe\ntranslate([0, 0, -frame_height])\ncube([car_length-6, frame_width, frame_height], center=true);\n\n// Wheel assemblies\ntranslate([-car_length/4, 0, -frame_height-wheel_dia/2])\nwheel_set();\ntranslate([car_length/4, 0, -frame_height-wheel_dia/2])\nwheel_set();\n\n// Couplers\ntranslate([-car_length/2-coupler_length/2, 0, -frame_height-wheel_dia/2+coupler_diameter])\nrotate([0, 90, 0])\ncylinder(d=coupler_diameter, h=coupler_length, $fn=12);\ntranslate([car_length/2+coupler_length/2, 0, -frame_height-wheel_dia/2+coupler_diameter])\nrotate([0, 90, 0])\ncylinder(d=coupler_diameter, h=coupler_length, $fn=12);\n\n// Roof details\nroof_walk();\n\n// Ladder rungs\nmodule ladder(x_pos) {\n    for(i=[0:3:roof_height-6]) {\n        translate([x_pos, car_width/2+wall_thickness/2, i+3])\n        cube([wall_thickness, 2, 1]);\n    }\n}\n\nladder(-car_length/2+2);\nladder(car_length/2-2);",
    "renders": true
  },
  {
    "vehicle": "flatcar",
    "openscad_code": "// Realistic 3D-printable flatcar – medium complexity\n// Overall length ~80 mm, width ~24 mm, height ~13 mm\n\n$fa = 2;\n$fs = 0.5;\n\n// Wall thickness for printability\nwall = 1.2;\n\nmodule deck_plank(w, l, h) {\n    // Simple wooden plank\n    color(\"burlywood\")\n    cube([l, w, h], center = true);\n}\n\nmodule deck() {\n    // Main wooden deck made of 5 planks\n    union() {\n        for (i = [-2:2]) {\n            translate([0, i * 4.5, 0])\n            deck_plank(4, 72, 1.5);\n        }\n    }\n}\n\nmodule center_sill() {\n    // Structural center beam under deck\n    color(\"gray40\")\n    cube([75, 5, 4], center = true);\n}\n\nmodule side_sill() {\n    // Side beams (left and right)\n    color(\"gray40\")\n    for (s = [-1, 1]) {\n        translate([0, s * 10, -1])\n        cube([75, 2, 2], center = true);\n    }\n}\n\nmodule cross_bearers() {\n    // Short cross beams for strength\n    color(\"gray40\")\n    for (x = [-30, -15, 0, 15, 30]) {\n        translate([x, 0, -2])\n        cube([2, 22, 2], center = true);\n    }\n}\n\nmodule stake_pocket() {\n    // Stake pocket on side (for removable stakes)\n    difference() {\n        color(\"gray30\")\n        cube([2, 1.5, 4], center = true);\n        translate([0, 0, 1])\n        cube([1.6, 1.1, 3], center = true);\n    }\n}\n\nmodule stake_pockets_row() {\n    // Row of stake pockets along both sides\n    for (side = [-1, 1]) {\n        for (x = [-28, -14, 0, 14, 28]) {\n            translate([x, side * 12, 0.5])\n            stake_pocket();\n        }\n    }\n}\n\nmodule bolster() {\n    // Truck mounting bolster block\n    difference() {\n        color(\"gray40\")\n        cube([10, 24, 3], center = true);\n        translate([0, 0, -2])\n        cylinder(h = 4, r = 3, center = true);\n    }\n}\n\nmodule bolsters() {\n    // Two bolsters for trucks\n    for (x = [-22, 22]) {\n        translate([x, 0, -4])\n        bolster();\n    }\n}\n\nmodule coupler_box() {\n    // Draft gear box with coupler shank hole\n    difference() {\n        color(\"gray50\")\n        cube([5, 7, 4], center = true);\n        translate([2.5, 0, 0])\n        cube([3, 3, 3], center = true);\n    }\n}\n\nmodule couplers() {\n    // Couplers on both ends\n    for (x = [-38, 38]) {\n        translate([x, 0, -2.5])\n        coupler_box();\n    }\n}\n\nmodule underside() {\n    // Combine all under-frame parts\n    union() {\n        center_sill();\n        side_sill();\n        cross_bearers();\n        bolsters();\n        couplers();\n    }\n}\n\nmodule flatcar() {\n    union() {\n        translate([0, 0, 6])\n        deck();\n        underside();\n        translate([0, 0, 1])\n        stake_pockets_row();\n    }\n}\n\nflatcar();",
    "renders": true
  },
  {
    "vehicle": "hopper",
    "openscad_code": "// Realistic medium-complexity hopper for 3D printing\n// Overall size ~75 mm tall, 60 mm wide, 65 mm deep\n\n// Wall thickness for 3D printing\nwall = 1.2;\n\n// Main body shell tapered to funnel\nmodule body() {\n    difference() {\n        // Outer shell\n        hull() {\n            translate([0, 0, 30]) cube([60, 65, 40], center = true);\n            translate([0, 0, 0]) cube([32, 37, 30], center = true);\n        }\n        // Inner hollow\n        hull() {\n            translate([0, 0, 30.5]) cube([60 - 2*wall, 65 - 2*wall, 40], center = true);\n            translate([0, 0, 0]) cube([32 - 2*wall, 37 - 2*wall, 29], center = true);\n        }\n    }\n}\n\n// Front angled chute\nmodule chute() {\n    difference() {\n        // Outer chute\n        rotate([0, 20, 0])\n            translate([-20, 0, 5])\n                cube([40, 35, 25]);\n        // Inner removal\n        rotate([0, 20, 0])\n            translate([-19.2, 0, 5])\n                cube([38.4, 35 - 2*wall, 24.4]);\n    }\n}\n\n// Bolt-on flanges\nmodule flanges() {\n    for (y = [-22.5, 22.5]) {\n        translate([0, y, 0]) {\n            difference() {\n                cube([64, 8, 4], center = true);\n                for (x = [-24, -12, 0, 12, 24])\n                    translate([x, 0, 2])\n                        cylinder(h = 4.2, r = 2.5, $fn = 20);\n            }\n        }\n    }\n}\n\n// Side reinforcement ribs\nmodule ribs() {\n    for (x = [-25, 25]) {\n        translate([x, 0, 15]) {\n            difference() {\n                cube([4, 65, 30], center = true);\n                translate([0, 0, 0])\n                    cube([3, 37, 30], center = true);\n            }\n        }\n    }\n}\n\n// Top rim lip\nmodule lip() {\n    difference() {\n        translate([0, 0, 50])\n            cube([62, 67, 6], center = true);\n        translate([0, 0, 50])\n            cube([58, 63, 6.2], center = true);\n    }\n}\n\n// Drain slot at bottom\nmodule slot() {\n    translate([0, 0, 0])\n        rotate([90, 0, 0])\n            cylinder(h = 12, r = 6, $fn = 30);\n}\n\n// Assembly\nunion() {\n    body();\n    chute();\n    flanges();\n    ribs();\n    lip();\n    difference() {\n        slot();\n        translate([0, 0, -1])\n            cylinder(h = 14, r = 4.8, $fn = 30);\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "refrigerator",
    "openscad_code": "// Realistic 3D printable refrigerator\n// Overall size ~60 mm wide, 60 mm deep, 120 mm tall\n\n// Wall thickness for 3D printing\nwall = 1.5;\n\n// Main body dimensions\nwidth = 60;\ndepth = 60;\nheight = 120;\n\n// Door relative sizes\ndoor_height = height - wall;\ndoor_width = width/2 - wall/2;\n\nmodule main_body() {\n    // Outer shell\n    difference() {\n        cube([width, depth, height], center=false);\n        // Hollow out inside\n        translate([wall, wall, wall])\n            cube([width-2*wall, depth-2*wall, height-2*wall], center=false);\n    }\n}\n\nmodule top_hinge() {\n    // Simple cylindrical hinge pin\n    translate([width*0.25, depth, height-5])\n        cylinder(h=5, d=3, center=false);\n}\n\nmodule bottom_hinge() {\n    translate([width*0.25, depth, 0])\n        cylinder(h=5, d=3, center=false);\n}\n\nmodule door_handle() {\n    // Vertical bar handle\n    translate([door_width-8, depth+wall-0.1, door_height*0.6])\n        rotate([90,0,0])\n            cylinder(h=25, d=4, center=false);\n    // Mounting block\n    translate([door_width-8, depth+wall-0.1, door_height*0.6])\n        cube([4,4,4], center=true);\n    translate([door_width-8, depth+wall-0.1, door_height*0.6+25])\n        cube([4,4,4], center=true);\n}\n\nmodule door() {\n    difference() {\n        // Main door panel\n        translate([0, 0, 0])\n            cube([door_width, wall, door_height], center=false);\n        // Inner recess for thinner door face\n        translate([wall/2, -0.1, wall/2])\n            cube([door_width-wall, wall+0.2, door_height-wall], center=false);\n    }\n    // Handle\n    door_handle();\n}\n\nmodule freezer_door() {\n    // Same as fridge door but shorter\n    difference() {\n        translate([0, 0, height-door_height/2])\n            cube([door_width, wall, door_height/2], center=false);\n        translate([wall/2, -0.1, height-door_height/2+wall/2])\n            cube([door_width-wall, wall+0.2, door_height/2-wall], center=false);\n    }\n}\n\nmodule feet() {\n    // Four simple cylindrical feet\n    for(x=[5, width-5])\n        for(y=[5, depth-5])\n            translate([x, y, -3])\n                cylinder(h=3, d=4, center=false);\n}\n\nmodule back_coils() {\n    // Simplified condenser coil representation\n    for(i=[0:3:width-6])\n        translate([i+3, depth-3, 10])\n            rotate([90,0,0])\n                cylinder(h=height-20, d=2, center=false);\n}\n\nmodule ventilation_grill() {\n    // Bottom front ventilation slots\n    translate([wall, wall, wall/2])\n        for(i=[0:3:width-4*wall])\n            cube([2, wall, 1], center=false);\n}\n\n// Assembly\nmain_body();\ntranslate([width/2+wall/2, 0, 0])\n    door();\ntranslate([width/2+wall/2, 0, height-door_height/2])\n    freezer_door();\nfeet();\ntranslate([0, 0, 0]) {\n    top_hinge();\n    bottom_hinge();\n}\nback_coils();\nventilation_grill();",
    "renders": true
  },
  {
    "vehicle": "stockcar",
    "openscad_code": "// Stockcar OpenSCAD model - Medium complexity realistic style\n// Dimensions in mm - designed for 3D printing\n\n// Overall scale factor\nscale = 0.8;\n\n// Main body module\nmodule stockcar_body() {\n    // Chassis base\n    translate([0, 0, 5]) {\n        cube([80*scale, 35*scale, 6*scale], center=true);\n    }\n    \n    // Main cabin\n    difference() {\n        // Cabin block\n        translate([0, 0, 15*scale]) {\n            cube([45*scale, 32*scale, 20*scale], center=true);\n        }\n        // Windshield cutout\n        translate([12*scale, 0, 22*scale]) {\n            cube([25*scale, 30*scale, 18*scale], center=true);\n        }\n    }\n    \n    // Hood\n    translate([-30*scale, 0, 12*scale]) {\n        cube([35*scale, 28*scale, 12*scale], center=true);\n    }\n    \n    // Trunk area\n    translate([30*scale, 0, 12*scale]) {\n        cube([25*scale, 28*scale, 10*scale], center=true);\n    }\n}\n\n// Wheels module\nmodule wheels() {\n    // Front left\n    translate([-25*scale, 20*scale, 0]) {\n        rotate([90, 0, 0]) {\n            cylinder(h=8*scale, r=10*scale, center=true);\n            // Tire tread pattern\n            for(i=[0:15]) {\n                rotate([0, 0, i*24]) {\n                    translate([0, 0, 4.1*scale]) {\n                        cube([1*scale, 10.5*scale, 0.5*scale], center=true);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Front right\n    mirror([0, 1, 0]) {\n        translate([-25*scale, 20*scale, 0]) {\n            rotate([90, 0, 0]) {\n                cylinder(h=8*scale, r=10*scale, center=true);\n                for(i=[0:15]) {\n                    rotate([0, 0, i*24]) {\n                        translate([0, 0, 4.1*scale]) {\n                            cube([1*scale, 10.5*scale, 0.5*scale], center=true);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Rear left\n    translate([25*scale, 20*scale, 0]) {\n        rotate([90, 0, 0]) {\n            cylinder(h=8*scale, r=10*scale, center=true);\n            for(i=[0:15]) {\n                rotate([0, 0, i*24]) {\n                    translate([0, 0, 4.1*scale]) {\n                        cube([1*scale, 10.5*scale, 0.5*scale], center=true);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Rear right\n    mirror([0, 1, 0]) {\n        translate([25*scale, 20*scale, 0]) {\n            rotate([90, 0, 0]) {\n                cylinder(h=8*scale, r=10*scale, center=true);\n                for(i=[0:15]) {\n                    rotate([0, 0, i*24]) {\n                        translate([0, 0, 4.1*scale]) {\n                            cube([1*scale, 10.5*scale, 0.5*scale], center=true);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Spoiler module\nmodule spoiler() {\n    // Main spoiler wing\n    translate([40*scale, 0, 30*scale]) {\n        cube([15*scale, 35*scale, 2*scale], center=true);\n    }\n    \n    // Spoiler supports\n    translate([35*scale, -15*scale, 22*scale]) {\n        cube([3*scale, 3*scale, 15*scale], center=true);\n    }\n    translate([35*scale, 15*scale, 22*scale]) {\n        cube([3*scale, 3*scale, 15*scale], center=true);\n    }\n}\n\n// Windows and details\nmodule details() {\n    // Side windows\n    difference() {\n        // Window frame\n        translate([0, 16*scale, 22*scale]) {\n            cube([40*scale, 2*scale, 15*scale], center=true);\n        }\n        // Window opening\n        translate([0, 16.1*scale, 22*scale]) {\n            cube([35*scale, 1*scale, 12*scale], center=true);\n        }\n    }\n    \n    // Grille\n    for(i=[0:4]) {\n        translate([-42*scale, 0, 12*scale]) {\n            translate([0, (i-2)*4*scale, 0]) {\n                cube([2*scale, 2*scale, 8*scale], center=true);\n            }\n        }\n    }\n    \n    // Headlights\n    translate([-42*scale, -12*scale, 16*scale]) {\n        sphere(r=3*scale);\n    }\n    translate([-42*scale, 12*scale, 16*scale]) {\n        sphere(r=3*scale);\n    }\n}\n\n// Assemble the car\nunion() {\n    stockcar_body();\n    wheels();\n    spoiler();\n    details();\n}",
    "renders": true
  },
  {
    "vehicle": "wellcar",
    "openscad_code": "// Wellcar - Realistic Style, Medium Complexity\n// Designed for 3D printing at ~85mm length\n\n// Basic dimensions\ncar_length = 85;\ncar_width = 25;\ndeck_height = 8;\nwell_depth = 12;\nwall_thickness = 1.5;\n\n// Wheel dimensions\nwheel_diameter = 10;\nwheel_width = 4;\naxle_spacing = 60;\nbogie_length = 18;\nbogie_width = 18;\n\n// Container dimensions\ncontainer_length = 30;\ncontainer_width = 18;\ncontainer_height = 20;\n\nmodule wheel() {\n    difference() {\n        cylinder(h=wheel_width, d=wheel_diameter, $fn=20);\n        translate([0, 0, -0.1]) \n            cylinder(h=wheel_width+0.2, d=wheel_diameter-4, $fn=20);\n    }\n}\n\nmodule bogie() {\n    union() {\n        // Bogie frame\n        translate([0, 0, wheel_diameter/2])\n            cube([bogie_length, bogie_width, 3], center=true);\n        \n        // Side frames\n        for(side = [-1, 1]) {\n            translate([0, side*(bogie_width/2 - 2), wheel_diameter/2 + 1.5])\n                cube([bogie_length-4, 4, 3]);\n        }\n        \n        // Wheels\n        translate([-bogie_length/3, 0, 0])\n            rotate([90, 0, 0]) wheel();\n        translate([bogie_length/3, 0, 0])\n            rotate([90, 0, 0]) wheel();\n    }\n}\n\nmodule wellcar_body() {\n    difference() {\n        // Main deck\n        translate([0, 0, deck_height/2])\n            cube([car_length, car_width, deck_height], center=true);\n        \n        // Well cavity\n        translate([0, 0, deck_height - well_depth/2])\n            cube([car_length-10, car_width-6, well_depth+0.1], center=true);\n        \n        // End cutouts\n        for(end = [-1, 1]) {\n            translate([end*(car_length/2 - 5), 0, deck_height/2])\n                cube([10, car_width-6, deck_height+0.1], center=true);\n        }\n    }\n    \n    // Side walls\n    for(side = [-1, 1]) {\n        translate([0, side*(car_width/2 - wall_thickness/2), deck_height - wall_thickness/2])\n            cube([car_length-10, wall_thickness, wall_thickness], center=true);\n    }\n    \n    // End sills\n    for(end = [-1, 1]) {\n        translate([end*(car_length/2 - 2.5), 0, deck_height/2])\n            cube([5, car_width, deck_height], center=true);\n    }\n    \n    // Corner posts\n    for(x = [-1, 1])\n    for(y = [-1, 1]) {\n        translate([x*(car_length/2 - 5), y*(car_width/2 - 2), deck_height + 5])\n            cube([2, 2, 10], center=true);\n    }\n}\n\nmodule container() {\n    difference() {\n        // Main box\n        cube([container_length, container_width, container_height], center=true);\n        \n        // Top recess\n        translate([0, 0, container_height/2 - 1])\n            cube([container_length-2, container_width-2, 2.1], center=true);\n        \n        // Door details\n        translate([container_length/2 - 1, 0, 0])\n            cube([0.5, container_width-4, container_height-4], center=true);\n    }\n}\n\n// Main assembly\ntranslate([0, 0, wheel_diameter/2]) {\n    // Bogies\n    translate([-axle_spacing/2, 0, 0]) bogie();\n    translate([axle_spacing/2, 0, 0]) bogie();\n    \n    // Wellcar body\n    translate([0, 0, wheel_diameter/2]) wellcar_body();\n    \n    // Optional loaded container\n    translate([0, 0, wheel_diameter + deck_height + container_height/2 - 2])\n        container();\n}",
    "renders": true
  },
  {
    "vehicle": "centerbeam",
    "openscad_code": "// Centerbeam freight car – realistic style, medium complexity\n// Outer dimensions ≈ 90 mm long × 12 mm wide × 18 mm high\n// Optimized for FDM printing: no overhangs > 45°, 1 mm wall thickness\n\n$fa = 2;\n$fs = 0.5;\n\nmodule centerbeam() {\n    // ---------- Main structural parts ----------\n    // Center sill (I-beam core)\n    difference() {\n        cube([85, 10, 8], center = true);          // full-width web\n        translate([0, 0, 2])\n            cube([87, 12, 3], center = true);      // cut out middle for I-shape\n    }\n\n    // Lower flange\n    translate([0, 0, -5])\n        cube([85, 10, 2], center = true);\n\n    // Upper flange\n    translate([0, 0, 5])\n        cube([85, 10, 2], center = true);\n\n    // ---------- Side stakes ----------\n    for (x = [-35, -25, -15, -5, 5, 15, 25, 35]) {\n        translate([x, 0, 0])\n            stake();\n    }\n\n    // ---------- Deck (thin but printable) ----------\n    translate([0, 0, 6.5])\n        cube([83, 11, 0.8], center = true);\n\n    // ---------- End bulkheads ----------\n    for (x = [-42, 42]) {\n        translate([x, 0, 2])\n            rotate([0, 90, 0])\n            cylinder(h = 10, d1 = 18, d2 = 16, center = true);\n    }\n\n    // ---------- Coupler pockets ----------\n    for (x = [-45, 45]) {\n        translate([x, 0, -2])\n        coupler_mount();\n    }\n}\n\nmodule stake() {\n    // Stake post\n    cube([2, 1.5, 12], center = true);\n    translate([0, 0, 6.5])\n        cube([3, 2, 1], center = true); // top cap\n}\n\nmodule coupler_mount() {\n    difference() {\n        cube([6, 8, 6], center = true);\n        translate([0, 0, 2])\n            cube([4, 10, 3], center = true); // pocket cavity\n    }\n}\n\n// Render the model\ncenterbeam();",
    "renders": true
  },
  {
    "vehicle": "caboose",
    "openscad_code": "// Realistic Medium-Complexity 3D-Printable Caboose\n// Overall length ≈ 80 mm, total height ≈ 45 mm, width ≈ 30 mm\n// Oriented for printing with wheels on the build plate\n\n$fn = 24;           // Smooth curves without overhang\nwall = 1.2;         // Wall thickness for 0.4 mm nozzle, 3 perimeters\n\n// Main assembly\nmodule caboose() {\n    color(\"red\")\n    union() {\n        body();\n        roof();\n        cupola();\n        underframe();\n        trucks();\n        details();\n    }\n}\n\n// Basic car body shell (hollow)\nmodule body() {\n    difference() {\n        // Outer shell\n        hull() {\n            translate([-38, -14, 0]) cube([76, 28, 24]);\n            translate([-38, -14, 24]) cube([76, 28, 2]);\n        }\n        // Hollow interior\n        translate([-36, -12, 1]) cube([72, 24, 22]);\n    }\n}\n\n// Clerestory-style roof\nmodule roof() {\n    difference() {\n        // Main roof block\n        translate([-40, -16, 26])\n            scale([1, 1, 0.5]) cylinder(h = 16, d1 = 80, d2 = 72, center = true);\n        // Vent slots\n        for (x = [-30:15:30])\n            translate([x, -20, 33])\n                rotate([0, 90, 0]) cylinder(h = 8, d = 3);\n    }\n}\n\n// Center cupola\nmodule cupola() {\n    translate([0, -10, 30]) {\n        difference() {\n            // Cupola base\n            cube([20, 20, 10]);\n            // Windows\n            for (y = [-8, 8])\n                translate([0, y, 2])\n                    cube([21, 4, 6]);\n        }\n        // Cupola roof\n        translate([0, 0, 10])\n            cylinder(h = 6, d1 = 20, d2 = 16);\n    }\n}\n\n// Underframe & brake rigging\nmodule underframe() {\n    translate([-38, -14, -3])\n        cube([76, 28, 3]);\n    // Brake cylinder\n    translate([25, -4, -2.5])\n        cylinder(h = 8, d = 5);\n    // Air reservoir\n    translate([-30, -6, -2])\n        cube([20, 4, 2]);\n}\n\n// Two 4-wheel trucks\nmodule trucks() {\n    truck(-25);\n    truck(25);\n}\n\nmodule truck(x) {\n    translate([x, 0, 0])\n        difference() {\n            // Side frames\n            for (side = [-1, 1])\n                translate([0, side * 12, -2])\n                    cube([20, 2, 4]);\n            // Wheels (printable vertically)\n            for (wx = [-8, 8])\n                for (wy = [-1, 1])\n                    translate([wx, wy * 9, -1])\n                        rotate([0, 90, 0])\n                            cylinder(h = 2, d = 8);\n        }\n}\n\n// Handrails, ladders, couplers\nmodule details() {\n    // End platforms\n    for (dx = [-38, 38])\n        translate([dx, 0, 3])\n            cube([2, 28, 1]);\n\n    // Handrails\n    color(\"gray\")\n    for (side = [-1, 1])\n        translate([0, side * 14.5, 15])\n            difference() {\n                cube([80, 1, 1]);\n                for (x = [-35:10:35])\n                    translate([x, 0, 0])\n                        cube([1, 1.5, 1]);\n            }\n\n    // Ladders\n    for (dx = [-37, 37])\n        for (side = [-1, 1])\n            translate([dx, side * 14, 0])\n                for (h = [0:4:20])\n                    translate([0, 0, h])\n                        cube([1, 1, 2]);\n\n    // Couplers (simple knuckle pockets)\n    for (dx = [-39, 39])\n        translate([dx, 0, 4])\n            cube([2, 6, 3]);\n}\n\n// Render the caboose\ncaboose();",
    "renders": true
  },
  {
    "vehicle": "multipleunit",
    "openscad_code": "// Realistic Medium-Complexity Multiple-Unit Train (about 1:160 N-scale, 90 mm long)\n// No support needed, 0.4 mm nozzle / 0.2 mm layer friendly\n\n$fn = 36;          // Smoother curves without overkill\nwall = 1.2;        // 3×0.4 mm shells\nbody_h = 28;       // Overall body height\nbody_w = 24;       // Overall body width\nunit_l = 43;       // Single car length\ngap  = 2;          // Articulation/bogie gap\ntotal_l = unit_l*2 + gap;\n\n// Helper: rounded roof profile\nmodule rounded_roof(w, l, h, r) {\n    hull() {\n        translate([0, 0, h-r]) cube([w, l, r*2], center=true);\n        translate([0, 0, h]) cube([w-2*r, l, r*2], center=true);\n    }\n}\n\n// Helper: window punch (negative)\nmodule window_punch(h, w, d) {\n    translate([0, 0, -d/2]) cube([w+0.2, h+0.2, d], center=true);\n}\n\n// Single car shell\nmodule car_shell() {\n    difference() {\n        union() {\n            // Lower skirt box\n            cube([body_w, unit_l, body_h*0.4], center=true);\n            // Upper cabin\n            translate([0, 0, body_h*0.4/2 + body_h*0.6/2])\n                cube([body_w*0.9, unit_l*0.9, body_h*0.6], center=true);\n            // Roof\n            translate([0, 0, body_h - 3])\n                rounded_roof(body_w*0.9, unit_l*0.9, 3, 3);\n        }\n\n        // Side windows\n        for (y = [-unit_l/2 + 6 : 8 : unit_l/2 - 6])\n            translate([body_w/2 - wall, y, body_h*0.5])\n                rotate([0, 90, 0]) window_punch(6, 8, wall+0.2);\n\n        // Front/rear windows\n        for (x = [body_w*0.3, -body_w*0.3])\n            translate([x, unit_l/2 - wall, body_h*0.5])\n                rotate([0, 0, 0]) window_punch(6, 8, wall+0.2);\n    }\n}\n\n// Bogie frame\nmodule bogie() {\n    base = 14;\n    len  = 18;\n    difference() {\n        union() {\n            // Frame\n            cube([base, len, 6], center=true);\n            // Wheel cutouts (visual only)\n            for (x = [-base/2 + 4, base/2 - 4])\n                translate([x, 0, -3])\n                    cylinder(h=6.2, r=3.5, center=true);\n        }\n        // Hollow underside\n        translate([0, 0, 0])\n            cube([base-wall*2, len-wall*2, 6.2], center=true);\n    }\n}\n\n// Coupler pin\nmodule coupler() {\n    cylinder(h=4, r=2);\n}\n\n// Assembly\ntranslate([0, 0, 6]) { // Raise whole train for bogies\n    // Car A\n    translate([-(unit_l+gap)/2, 0, 0]) car_shell();\n    // Car B\n    translate([(unit_l+gap)/2, 0, 0]) mirror([1,0,0]) car_shell();\n\n    // Bogies under articulation points\n    translate([-(gap/2 + unit_l/2), 0, -6]) bogie();\n    translate([ (gap/2 + unit_l/2), 0, -6]) bogie();\n    translate([-(gap/2 - unit_l/2), 0, -6]) bogie();\n    translate([ (gap/2 - unit_l/2), 0, -6]) bogie();\n\n    // Couplers\n    translate([-(unit_l + gap/2), 0, 0]) coupler();\n    translate([ (unit_l + gap/2), 0, 0]) coupler();\n}",
    "renders": true
  },
  {
    "vehicle": "pushpull",
    "openscad_code": "// Push-pull (slide-switch) model, medium complexity, 3D-printable\n// Units: millimetres\n\n// Overall dimensions\nswitch_len = 60;\nswitch_wid = 25;\nswitch_hgt = 15;\n\n// Wall thickness for printability\nwall = 1.5;\n\n// Grip ridge parameters\nridges = 5;\nridge_h = 1;\nridge_pitch = 6;\n\n// Mounting holes\nhole_d = 3.2;           // M3 screw clearance\nhole_h = switch_hgt + 2;\nboss_r = hole_d + 3;\nboss_h = 4;\n\n// Slider rail cavity\nrail_len = switch_len - 8;\nrail_wid = 8;\nrail_hgt = 6;\n\n// Slider knob\nknob_w = 12;\nknob_l = 7;\nknob_h = 6;\n\n// Main body shell\nmodule body() {\n    difference() {\n        // Outer shell\n        cube([switch_len, switch_wid, switch_hgt], center = true);\n\n        // Interior cavity for slider\n        translate([0, 0, -wall])\n            cube([rail_len, rail_wid - 2*wall, rail_hgt], center = true);\n\n        // Mounting holes left\n        translate([-switch_len/2 + 8, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h = hole_h, d = hole_d, $fn = 20);\n\n        // Mounting holes right\n        translate([switch_len/2 - 8, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h = hole_h, d = hole_d, $fn = 20);\n    }\n\n    // Mounting bosses\n    translate([-switch_len/2 + 8, 0, -switch_hgt/2 + boss_h/2])\n        cylinder(h = boss_h, r = boss_r, $fn = 30);\n    translate([switch_len/2 - 8, 0, -switch_hgt/2 + boss_h/2])\n        cylinder(h = boss_h, r = boss_r, $fn = 30);\n}\n\n// Slider with grip ridges\nmodule slider() {\n    // Main slider plate\n    translate([0, 0, -switch_hgt/2 + rail_hgt/2 + 1])\n        cube([knob_l, knob_w, knob_h], center = true);\n\n    // Grip ridges\n    for (i = [-ridges/2:ridges/2-1]) {\n        translate([0, i*ridge_pitch, knob_h/2 + ridge_h/2])\n            cube([knob_l + 0.2, ridge_pitch*0.8, ridge_h], center = true);\n    }\n\n    // Guide tabs to keep slider captive\n    translate([rail_len/2 - knob_l/2 - 0.5, 0, -switch_hgt/2 + rail_hgt/2 + 1])\n        cube([1, rail_wid - 2*wall - 1, knob_h], center = true);\n    translate([-rail_len/2 + knob_l/2 + 0.5, 0, -switch_hgt/2 + rail_hgt/2 + 1])\n        cube([1, rail_wid - 2*wall - 1, knob_h], center = true);\n}\n\n// Assembly\nbody();\nslider();",
    "renders": true
  },
  {
    "vehicle": "railbus",
    "openscad_code": "// Railbus - Realistic Style, Medium Complexity\n// Overall dimensions: ~80mm long x 20mm wide x 30mm tall\n// 3D-printable with 1.2mm wall thickness (3 perimeters @0.4mm nozzle)\n\n$fn = 32;           // Smooth curves\nwall = 1.2;         // Wall thickness for printing\n\n// Main assembly\nrailbus();\n\nmodule railbus() {\n    color(\"darkgreen\")\n    union() {\n        chassis();\n        body();\n        roof();\n        bogies();\n        couplers();\n    }\n}\n\n// Lower frame and fuel tank\nmodule chassis() {\n    translate([0,-0.5,4])           // Centered, slightly inset\n    difference() {\n        // Main frame rails\n        cube([72, 18, 3], center=true);\n        \n        // Fuel tank recess\n        translate([15,0,1.5])\n            cube([20, 15, 3], center=true);\n    }\n}\n\n// Main passenger compartment\nmodule body() {\n    difference() {\n        hull() {\n            // Lower box\n            translate([0,0,10.5])\n                cube([68, 17, 11], center=true);\n            \n            // Upper taper\n            translate([0,0,19])\n                scale([1, 0.85, 1])\n                cube([66, 17, 8], center=true);\n        }\n        \n        // Side windows (left)\n        for(i=[-25,-15,-5,5,15,25])\n            translate([i, 8.6, 15])\n                cube([6, wall+0.1, 5], center=true);\n        \n        // Side windows (right)\n        for(i=[-25,-15,-5,5,15,25])\n            translate([i, -8.6, 15])\n                cube([6, wall+0.1, 5], center=true);\n        \n        // Door windows\n        translate([-33, 6.1, 15])\n            cube([4, wall+0.1, 5], center=true);\n        translate([-33, -6.1, 15])\n            cube([4, wall+0.1, 5], center=true);\n        \n        translate([33, 6.1, 15])\n            cube([4, wall+0.1, 5], center=true);\n        translate([33, -6.1, 15])\n            cube([4, wall+0.1, 5], center=true);\n    }\n}\n\n// Roof with slight curvature\nmodule roof() {\n    translate([0,0,26]) {\n        difference() {\n            // Main roof shell\n            minkowski() {\n                cube([64, 14, 2], center=true);\n                cylinder(h=0.1, r=2);  // Rounded edges\n            }\n            \n            // Ventilation grills\n            for(i=[-20,-10,0,10,20])\n                translate([i, 0, 1.1])\n                    cube([5, 11, 2], center=true);\n        }\n        \n        // Roof ends\n        translate([-32,0,0])\n            rotate([0,90,0])\n                cylinder(h=7, r=7);\n        translate([32,0,0])\n            rotate([0,90,0])\n                cylinder(h=7, r=7);\n    }\n}\n\n// Wheel trucks/bogies\nmodule bogies() {\n    for(x=[-20, 20]) {\n        translate([x, 0, 4]) {\n            difference() {\n                // Bogie frame\n                cube([12, 16, 4], center=true);\n                \n                // Wheel cutouts\n                for(y=[-6, 6])\n                    translate([0, y, -2])\n                        cylinder(h=4.2, r=3.2);\n            }\n            \n            // Axle boxes\n            for(y=[-6, 6])\n                translate([0, y, -0.5])\n                    cube([2, 2, 2], center=true);\n        }\n    }\n}\n\n// Front/rear couplers\nmodule couplers() {\n    // Front coupler\n    translate([-36,0,3.5])\n        cylinder(h=4, r=2);\n    \n    // Rear coupler\n    mirror([1,0,0])\n        translate([-36,0,3.5])\n            cylinder(h=4, r=2);\n}",
    "renders": true
  },
  {
    "vehicle": "railcar",
    "openscad_code": "// Realistic Railcar - Medium Complexity\n// Designed for 3D printing without supports\n\n$fn = 32;\n\n// Main parameters\ncar_length = 80;\ncar_width = 25;\ncar_height = 30;\nwall_thickness = 2;\n\nmodule railcar_body() {\n    // Base frame with rounded edges\n    difference() {\n        // Main body\n        translate([-car_length/2, -car_width/2, 0])\n            cube([car_length, car_width, car_height]);\n        \n        // Hollow interior\n        translate([-car_length/2 + wall_thickness, -car_width/2 + wall_thickness, wall_thickness])\n            cube([car_length - 2*wall_thickness, car_width - 2*wall_thickness, car_height - wall_thickness]);\n    }\n    \n    // Rounded top edges\n    translate([-car_length/2, -car_width/2, car_height])\n        cube([car_length, car_width, wall_thickness]);\n    translate([-car_length/2, -car_width/2, car_height])\n        rotate([0, 90, 0])\n            cylinder(h=car_length, r=wall_thickness);\n    translate([car_length/2, -car_width/2, car_height])\n        rotate([0, 90, 0])\n            cylinder(h=car_length, r=wall_thickness);\n}\n\nmodule wheelset() {\n    // Wheel\n    difference() {\n        cylinder(h=4, r=4);\n        translate([0, 0, -1])\n            cylinder(h=6, r=1.5);\n    }\n    \n    // Axle\n    translate([0, 0, 2])\n        rotate([90, 0, 0])\n            cylinder(h=car_width + 10, r=1.2);\n}\n\nmodule coupling() {\n    // Coupler head\n    translate([0, 0, 3])\n        sphere(r=3);\n    \n    // Coupler shank\n    translate([-3, 0, 3])\n        rotate([90, 0, 0])\n            cylinder(h=6, r=1.5);\n}\n\nmodule doors() {\n    // Sliding doors on sides\n    for(side = [-1, 1]) {\n        translate([0, side * (car_width/2 - wall_thickness/2), car_height/2])\n            cube([20, wall_thickness, 15], center=true);\n    }\n}\n\nmodule roof_details() {\n    // Ventilation hatches\n    for(i = [-1, 0, 1]) {\n        translate([i * 20, 0, car_height + 2])\n            cube([8, 20, 2], center=true);\n    }\n}\n\nmodule undercarriage() {\n    // Bogie frames\n    for(pos = [-car_length/3, car_length/3]) {\n        translate([pos, 0, 5])\n            cube([15, car_width - 4, 3], center=true);\n    }\n    \n    // Brake details\n    translate([-car_length/2 + 10, 0, 8])\n        cube([3, car_width - 6, 2], center=true);\n    translate([car_length/2 - 10, 0, 8])\n        cube([3, car_width - 6, 2], center=true);\n}\n\n// Assembly\nunion() {\n    // Main body\n    railcar_body();\n    \n    // Wheels - 2 sets per bogie\n    for(pos = [-car_length/3, car_length/3]) {\n        for(side = [-1, 1]) {\n            translate([pos - 5, side * (car_width/2 + 5), 4])\n                wheelset();\n            translate([pos + 5, side * (car_width/2 + 5), 4])\n                wheelset();\n        }\n    }\n    \n    // Couplings at ends\n    translate([-car_length/2 - 3, 0, 4])\n        coupling();\n    translate([car_length/2 + 3, 0, 4])\n        coupling();\n    \n    // Doors\n    doors();\n    \n    // Roof features\n    roof_details();\n    \n    // Undercarriage details\n    undercarriage();\n}",
    "renders": true
  },
  {
    "vehicle": "railmotor",
    "openscad_code": "// Railmotor - Medium Complexity Realistic Style\n// Overall length ~80mm, width ~25mm, height ~30mm\n\n$fn = 32;\n\n// Main parameters\nbody_len = 70;\nbody_w = 22;\nbody_h = 25;\nwall_t = 2;\n\nmodule chassis_base() {\n    // Main underframe\n    translate([0, 0, 5])\n        cube([body_len, body_w, 2], center=true);\n    \n    // Side frames\n    for(side = [-1, 1])\n        translate([0, side*(body_w/2 - 1), 6])\n            cube([body_len, 2, 4], center=true);\n    \n    // End beams\n    for(end = [-1, 1])\n        translate([end*(body_len/2 - 1), 0, 6])\n            cube([2, body_w, 4], center=true);\n}\n\nmodule wheels() {\n    wheel_d = 10;\n    wheel_w = 3;\n    axle_spacing = 18;\n    \n    for(i = [-1, 0, 1])\n        translate([i*axle_spacing, 0, wheel_d/2])\n            rotate([90, 0, 0])\n                cylinder(d=wheel_d, h=wheel_w, center=true);\n}\n\nmodule body() {\n    // Main body shell\n    difference() {\n        translate([0, 0, body_h/2 + 7])\n            cube([body_len, body_w, body_h], center=true);\n        \n        // Interior cavity\n        translate([0, 0, body_h/2 + 7])\n            cube([body_len - wall_t*2, body_w - wall_t*2, body_h - wall_t], center=true);\n    }\n    \n    // Roof\n    translate([0, 0, body_h + 7])\n        cube([body_len + 4, body_w + 2, 3], center=true);\n    \n    // Cab front\n    translate([body_len/2 - 8, 0, 19])\n        cube([16, body_w, 18], center=true);\n}\n\nmodule cab_details() {\n    // Cab windows\n    for(side = [-1, 1])\n        translate([body_len/2 - 12, side*(body_w/2 - wall_t - 1), 22])\n            cube([4, 2, 6]);\n    \n    // Front windows\n    translate([body_len/2 - 2, 0, 22])\n        cube([2, body_w - 4, 6]);\n    \n    // Roof vents\n    for(v = [-1, 1])\n        translate([body_len/2 - 10 - v*4, 0, body_h + 8.5])\n            cube([4, body_w - 4, 1], center=true);\n}\n\nmodule buffers() {\n    buf_len = 5;\n    buf_d = 4;\n    \n    for(side = [-1, 1])\n        translate([body_len/2 + buf_len/2, side*(body_w/2 - 3), 9])\n            rotate([0, 90, 0])\n                cylinder(d=buf_d, h=buf_len, center=true);\n}\n\nmodule underframe_details() {\n    // Fuel tank\n    translate([-15, 0, 6])\n        cube([10, 8, 4], center=true);\n    \n    // Air tanks\n    for(t = [-1, 1])\n        translate([t*20, 0, 5])\n            rotate([90, 0, 0])\n                cylinder(d=3, h=body_w - 4, center=true);\n}\n\n// Assembly\nunion() {\n    chassis_base();\n    body();\n    cab_details();\n    buffers();\n    underframe_details();\n    wheels();\n}",
    "renders": true
  },
  {
    "vehicle": "draisine",
    "openscad_code": "// Draisine (Laufmaschine) - Realistic Style, Medium Complexity\n// Karl Drais' 1817 running machine\n\n$fn=32;  // Better curves for printing\nscale_factor = 0.35;  // Scale to ~75mm length\n\nmodule wheel() {\n    // Front or rear wheel with wooden spokes\n    difference() {\n        cylinder(h=5, r=15, center=true);  // Tire\n        \n        // Spoke holes\n        for(i=[0:30:330]) {\n            rotate([0,0,i])\n                translate([9,0,0])\n                    cylinder(h=6, r=1.5, center=true);\n        }\n    }\n    \n    // Hub\n    cylinder(h=8, r=3, center=true);\n}\n\nmodule frame_bar(length, angle) {\n    // Main frame tubes\n    rotate([0,0,angle])\n        translate([length/2,0,0])\n            cube([length,8,8], center=true);\n}\n\nmodule handlebar() {\n    // Steering bar with grips\n    union() {\n        // Main bar\n        rotate([0,90,0])\n            cylinder(h=50, r=2.5, center=true);\n            \n        // Grips\n        translate([0,25,0])\n            rotate([90,0,0])\n                cylinder(h=12, r=3);\n        translate([0,-25,0])\n            rotate([90,0,0])\n                cylinder(h=12, r=3);\n                \n        // Stem\n        translate([0,0,-10])\n            cylinder(h=20, r=4);\n    }\n}\n\nmodule seat() {\n    // Leather saddle\n    difference() {\n        // Main seat\n        scale([1.2,0.8,0.3])\n            sphere(r=15);\n            \n        // Hollow bottom\n        translate([0,0,-3])\n            scale([0.9,0.7,0.2])\n                sphere(r=14);\n    }\n}\n\nmodule support_post(height) {\n    // Vertical support tubes\n    cylinder(h=height, r=3, center=false);\n}\n\n// Scale entire model\nscale([scale_factor,scale_factor,scale_factor]) {\n\n// Rear wheel assembly\ntranslate([-60,0,0]) {\n    wheel();\n    \n    // Rear fork\n    translate([15,0,0])\n        frame_bar(30, 0);\n}\n\n// Front wheel assembly\ntranslate([60,0,0]) {\n    wheel();\n    \n    // Front fork\n    translate([-15,0,0])\n        frame_bar(30, 0);\n        \n    // Steering column\n    translate([-25,0,10])\n        support_post(50);\n        \n    // Handlebar\n    translate([-25,0,35])\n        handlebar();\n}\n\n// Main frame\nunion() {\n    // Top tube\n    frame_bar(120, 0);\n    \n    // Down tube\n    translate([0,0,-20])\n        frame_bar(100, -15);\n        \n    // Seat tube\n    translate([-30,0,10])\n        support_post(45);\n        \n    // Seat stays\n    translate([-45,0,5])\n        frame_bar(30, 35);\n    translate([-45,0,-5])\n        frame_bar(30, -35);\n        \n    // Chain stays\n    translate([-45,0,-10])\n        frame_bar(30, 0);\n}\n\n// Seat\ntranslate([-30,0,35])\n    seat();\n\n// Footrest bar\ntranslate([20,0,-25])\n    rotate([0,90,0])\n        cylinder(h=50, r=2.5, center=true);\n}",
    "renders": true
  },
  {
    "vehicle": "handcar",
    "openscad_code": "// Handcar - realistic style, medium complexity\n// Overall dimensions ~80mm long, 30mm wide, 35mm tall\n\n$fn = 32;\n\n// Main assembly\nhandcar();\n\nmodule handcar() {\n    // Base frame\n    base_frame();\n    \n    // Pump mechanism\n    pump_assembly();\n    \n    // Wheels\n    wheels();\n    \n    // Handle\n    handle();\n}\n\nmodule base_frame() {\n    // Main deck\n    translate([0, 0, 5]) cube([60, 25, 3], center=true);\n    \n    // Side rails\n    for(side = [-1, 1]) {\n        translate([0, side*10, 8.5]) cube([64, 2, 4], center=true);\n    }\n    \n    // End beams\n    for(x = [-28, 28]) {\n        translate([x, 0, 8.5]) cube([2, 20, 4], center=true);\n    }\n    \n    // Center support beam\n    translate([0, 0, 8.5]) cube([50, 4, 4], center=true);\n}\n\nmodule pump_assembly() {\n    // Pump base\n    translate([0, 0, 11]) cube([8, 6, 4], center=true);\n    \n    // Pump cylinder\n    translate([0, 0, 15]) cylinder(h=12, r=2.5);\n    \n    // Pump rod\n    translate([0, 0, 21]) cylinder(h=20, r=1);\n    \n    // Pump pivot\n    translate([0, 0, 25]) rotate([90, 0, 0]) cylinder(h=25, r=1.5);\n    \n    // Connecting rod to handle\n    translate([12, 0, 25]) rotate([0, 90, 0]) cylinder(h=12, r=1);\n}\n\nmodule wheels() {\n    // Front axle\n    translate([-20, 0, 8]) rotate([90, 0, 0]) cylinder(h=30, r=2);\n    \n    // Rear axle\n    translate([20, 0, 8]) rotate([90, 0, 0]) cylinder(h=30, r=2);\n    \n    // Front wheels\n    for(side = [-1, 1]) {\n        translate([-20, side*15, 5]) wheel();\n    }\n    \n    // Rear wheels\n    for(side = [-1, 1]) {\n        translate([20, side*15, 5]) wheel();\n    }\n}\n\nmodule wheel() {\n    difference() {\n        // Main wheel\n        cylinder(h=4, r=8, center=true);\n        \n        // Spokes\n        for(i = [0:3]) {\n            rotate([0, 0, i*90]) {\n                translate([0, 3, 0]) cube([2, 6, 5], center=true);\n            }\n        }\n        \n        // Central hub hole\n        cylinder(h=5, r=2.5, center=true);\n    }\n    \n    // Outer rim\n    translate([0, 0, 2.5]) cylinder(h=1, r=9);\n    translate([0, 0, -2.5]) cylinder(h=1, r=9);\n}\n\nmodule handle() {\n    // Vertical post\n    translate([35, 0, 0]) rotate([90, 0, 0]) cylinder(h=35, r=2);\n    \n    // Horizontal bar\n    translate([35, 0, 35]) rotate([0, 90, 0]) cylinder(h=25, r=2);\n    \n    // Handle grips\n    for(side = [-1, 1]) {\n        translate([35, side*12, 35]) sphere(r=2.5);\n    }\n    \n    // Support brace\n    translate([27.5, 0, 17.5]) rotate([45, 0, 90]) cylinder(h=25, r=1.5);\n}",
    "renders": true
  },
  {
    "vehicle": "speeder",
    "openscad_code": "// Realistic Speeder Bike - Medium Complexity\n// Dimensions: ~80mm long, ~50mm wide, ~30mm high\n// 3D printable with no overhangs >45 degrees\n\n$fn = 50;\n\nmodule main_body() {\n    // Central fuselage\n    difference() {\n        hull() {\n            translate([-30, 0, 0]) scale([1, 0.7, 0.5]) sphere(d=20);\n            translate([30, 0, 0]) scale([0.8, 0.6, 0.4]) sphere(d=20);\n        }\n        \n        // Cockpit cutout\n        translate([10, 0, 5]) cube([25, 15, 10], center=true);\n        \n        // Engine vents\n        for(i = [-1, 1]) {\n            translate([-5, i*12, 0]) rotate([0, 90, 0]) \n                cylinder(h=15, d1=8, d2=6, center=true);\n        }\n    }\n}\n\nmodule engine_nozzle(pos) {\n    translate(pos) {\n        // Main nozzle\n        cylinder(h=15, d1=12, d2=8);\n        \n        // Inner nozzle detail\n        translate([0, 0, 15]) cylinder(h=5, d1=8, d2=6);\n        \n        // Support struts\n        for(angle = [0:120:359]) {\n            rotate([0, 0, angle]) \n                translate([6, 0, 7.5]) cube([8, 2, 15], center=true);\n        }\n    }\n}\n\nmodule wing(pos, angle) {\n    translate(pos) rotate([angle, 0, 0]) {\n        // Main wing\n        translate([0, 0, 5]) scale([1, 0.1, 0.3]) \n            cube([40, 30, 8], center=true);\n        \n        // Wing tip\n        translate([20, 0, 5]) rotate([0, 30, 0])\n            scale([0.5, 0.1, 0.3]) cube([20, 20, 8], center=true);\n    }\n}\n\nmodule control_surface(pos) {\n    translate(pos) {\n        // Vertical stabilizer\n        translate([0, 0, 10]) rotate([0, 10, 0])\n            scale([0.3, 0.05, 1]) cube([10, 2, 20], center=true);\n        \n        // Horizontal stabilizer\n        translate([0, 0, 5]) scale([0.3, 1, 0.05])\n            cube([8, 15, 2], center=true);\n    }\n}\n\nmodule landing_strut(pos) {\n    translate(pos) {\n        // Main strut\n        rotate([45, 0, 0]) cylinder(h=15, d=3);\n        \n        // Foot pad\n        translate([0, 0, 10.5]) rotate([45, 0, 0])\n            scale([1, 1, 0.3]) cylinder(h=2, d=6);\n    }\n}\n\nmodule handlebar() {\n    translate([15, 0, 12]) {\n        // Main bar\n        rotate([0, 90, 0]) cylinder(h=20, d=2);\n        \n        // Grips\n        for(side = [-1, 1]) {\n            translate([0, side*8, 0]) rotate([0, 90, 0])\n                cylinder(h=5, d=3);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main body\n    main_body();\n    \n    // Engines\n    engine_nozzle([-25, -12, 0]);\n    engine_nozzle([-25, 12, 0]);\n    \n    // Wings\n    wing([5, 0, 8], 15);\n    wing([5, 0, 8], -15);\n    \n    // Control surfaces\n    control_surface([25, 0, 8]);\n    \n    // Landing gear\n    landing_strut([-15, -10, -5]);\n    landing_strut([-15, 10, -5]);\n    landing_strut([15, -10, -5]);\n    landing_strut([15, 10, -5]);\n    \n    // Handlebar\n    handlebar();\n    \n    // Small details\n    translate([0, 0, 15]) cylinder(h=3, d=5); // Sensor dome\n    translate([-10, 0, 8]) cube([5, 2, 2], center=true); // Antenna base\n}",
    "renders": true
  },
  {
    "vehicle": "inspection",
    "openscad_code": "// OpenSCAD code for a realistic inspection gauge block\n// Functional 90° angle inspection tool with measurement slots\n\n// Overall dimensions (mm)\nbase_size = 60;\nheight = 40;\nwall_thickness = 4;\nslot_depth = 8;\n\n// Create base inspection block\nmodule base_block() {\n    difference() {\n        // Main solid block\n        cube([base_size, base_size, height], center=true);\n        \n        // Central hollow for weight reduction\n        translate([0, 0, height/2 - wall_thickness])\n            cube([base_size - wall_thickness*2, base_size - wall_thickness*2, height], center=true);\n        \n        // 90° V-groove for edge inspection\n        translate([0, 0, -height/2])\n            rotate([0, 45, 0])\n            cube([base_size*2, wall_thickness*2, height*2], center=true);\n        \n        // Caliper slot 1mm\n        translate([0, base_size/2 - wall_thickness, 5])\n            cube([0.8, wall_thickness*2, 1], center=true);\n    }\n}\n\n// Create measurement reference slots\nmodule measurement_slots() {\n    for (i = [1:5]) {\n        // Horizontal slots\n        translate([0, base_size/4 - i*5, height/2 - i*4])\n            cube([base_size/2, 0.5, slot_depth], center=true);\n        \n        // Vertical slots\n        translate([base_size/4 - i*5, 0, height/2 - i*4])\n            cube([0.5, base_size/2, slot_depth], center=true);\n    }\n}\n\n// Create radius inspection features\nmodule radius_checks() {\n    // Internal radius gauge\n    translate([base_size/4, base_size/4, -height/2 + 2])\n        difference() {\n            cylinder(h=slot_depth*2, r=5, center=true);\n            cylinder(h=slot_depth*2 + 1, r=4.5, center=true);\n        }\n    \n    // External radius gauge\n    translate([-base_size/4, -base_size/4, -height/2 + 2])\n        difference() {\n            cube([10, 10, slot_depth*2], center=true);\n            sphere(r=5, center=true);\n        }\n}\n\n// Create surface finish reference\nmodule surface_reference() {\n    // Rough surface texture\n    translate([base_size/4, -base_size/4, height/2 - 1])\n        for (i = [0:5]) {\n            for (j = [0:5]) {\n                translate([i*2-5, j*2-5, 0])\n                    cube([1.5, 1.5, 1], center=true);\n            }\n        }\n    \n    // Smooth reference area\n    translate([-base_size/4, base_size/4, height/2 - 1])\n        cube([10, 10, 0.5], center=true);\n}\n\n// Create alignment pins\nmodule alignment_pins() {\n    // Pin 1\n    translate([base_size/2 - 3, base_size/2 - 3, 0])\n        cylinder(h=height, r=2, center=true);\n    \n    // Pin 2\n    translate([-base_size/2 + 3, -base_size/2 + 3, 0])\n        cylinder(h=height, r=2, center=true);\n}\n\n// Assembly\nunion() {\n    base_block();\n    measurement_slots();\n    radius_checks();\n    surface_reference();\n    alignment_pins();\n}",
    "renders": true
  },
  {
    "vehicle": "maintenance",
    "openscad_code": "// Realistic Maintenance Toolbox (Medium Complexity)\n// 3D printable miniature tool box with removable tray and assorted tools\n// Dimensions: 80mm x 40mm x 35mm\n\nmodule handle() {\n    // Main handle grip\n    cylinder(h=50, d=6, $fn=20);\n    \n    // Handle ends\n    translate([0, 0, 0])\n        sphere(d=8, $fn=20);\n    translate([0, 0, 50])\n        sphere(d=8, $fn=20);\n}\n\nmodule screwdriver() {\n    // Shaft\n    cylinder(h=35, d=3, $fn=12);\n    \n    // Handle\n    translate([0, 0, 35])\n        cylinder(h=15, d=8, $fn=8);\n    \n    // Handle grip rings\n    for(i=[1:3]) {\n        translate([0, 0, 35 + i*4])\n            cylinder(h=1, d=9, $fn=8);\n    }\n}\n\nmodule wrench() {\n    // Handle\n    difference() {\n        cube([15, 4, 3], center=true);\n        \n        // Grip indentations\n        for(i=[-1, 1]) {\n            translate([i*5, 0, 0])\n                cube([2, 5, 4], center=true);\n        }\n    }\n    \n    // Open end\n    translate([8, 0, 0])\n        cube([6, 2, 3], center=true);\n    \n    // Box end\n    translate([-8, 0, 0])\n        rotate([0, 0, 0])\n            cylinder(h=3, d=6, $fn=6);\n}\n\nmodule toolbox_base() {\n    // Bottom box\n    difference() {\n        // Main body\n        cube([80, 40, 25]);\n        \n        // Hollow interior\n        translate([5, 5, 2])\n            cube([70, 30, 23]);\n    }\n    \n    // Reinforcement corners\n    for(x=[0, 1]) {\n        for(y=[0, 1]) {\n            translate([x*75, y*35, 0])\n                cube([5, 5, 25]);\n        }\n    }\n    \n    // Latch mounting points\n    translate([40, 0, 12])\n        cube([8, 2, 8]);\n    translate([40, 38, 12])\n        cube([8, 2, 8]);\n}\n\nmodule toolbox_lid() {\n    // Main lid\n    difference() {\n        cube([80, 40, 8]);\n        \n        // Interior cavity\n        translate([5, 5, 2])\n            cube([70, 30, 8]);\n    }\n    \n    // Handle mount\n    translate([40, 20, 8])\n        cube([30, 12, 4]);\n    \n    // Handle\n    translate([40, 20, 12])\n        rotate([90, 0, 0])\n            handle();\n    \n    // Hinge pins\n    for(i=[-1, 1]) {\n        translate([40 + i*30, 0, 0])\n            cylinder(h=4, d=3, $fn=12);\n    }\n}\n\nmodule removable_tray() {\n    // Tray base\n    difference() {\n        cube([70, 28, 6]);\n        \n        // Hollow\n        translate([2, 2, 2])\n            cube([66, 24, 6]);\n    }\n    \n    // Dividers\n    for(i=[1:2]) {\n        translate([i*23, 0, 0])\n            cube([1, 28, 6]);\n    }\n}\n\n// Assemble toolbox\nunion() {\n    // Toolbox base\n    toolbox_base();\n    \n    // Lid (slightly open for display)\n    translate([0, 0, 25])\n        rotate([30, 0, 0])\n            translate([0, -10, 0])\n                toolbox_lid();\n    \n    // Removable tray (positioned above box)\n    translate([5, 6, 60])\n        removable_tray();\n    \n    // Tools in tray\n    translate([10, 10, 68])\n        rotate([90, 0, 0])\n            screwdriver();\n    \n    translate([35, 10, 68])\n        rotate([90, 0, 90])\n            wrench();\n    \n    translate([60, 10, 68])\n        scale([0.7, 0.7, 0.7])\n            rotate([90, 0, 0])\n                screwdriver();\n}",
    "renders": true
  },
  {
    "vehicle": "ballast",
    "openscad_code": "// Ballast for model railway track\n// Realistic style, medium complexity\n\n$fn = 36;\n\n// Main dimensions\nballast_length = 90;\nballast_width = 40;\nballast_height = 15;\nballast_taper = 0.85;\nstone_size = 1.8;\n\n// Track base\nmodule track_base() {\n    difference() {\n        // Main ballast bed\n        hull() {\n            // Bottom layer\n            translate([0, 0, 0])\n                cube([ballast_length, ballast_width, ballast_height * 0.3], center = true);\n            \n            // Top layer (tapered)\n            translate([0, 0, ballast_height * 0.7])\n                scale([ballast_taper, ballast_taper, 1])\n                    cube([ballast_length, ballast_width, ballast_height * 0.3], center = true);\n        }\n        \n        // Track bed recess\n        translate([0, 0, ballast_height * 0.5])\n            cube([ballast_length * 0.9, 8, ballast_height * 0.5], center = true);\n    }\n}\n\n// Individual ballast stone\nmodule stone(s) {\n    // Random irregular stone shape\n    hull() {\n        for (i = [0:3]) {\n            rotate([0, 0, i * 90])\n                translate([rand(-s/2, s/2), rand(-s/2, s/2), rand(-s/3, s/3)])\n                    sphere(s * 0.4);\n        }\n    }\n}\n\n// Generate random seed for consistent results\nseed = 42;\n\nfunction rand(min, max) = min + (max - min) * rands(0, 1, 1, seed)[0];\n\n// Ballast stones layer\nmodule ballast_stones() {\n    // Top surface stones\n    for (x = [-ballast_length/2 + 2 : 2 : ballast_length/2 - 2]) {\n        for (y = [-ballast_width/2 + 2 : 2 : ballast_width/2 - 2]) {\n            if (abs(y) > 4) { // Skip track bed area\n                translate([x + rand(-0.5, 0.5), \n                          y + rand(-0.5, 0.5), \n                          ballast_height * 0.5 + rand(0, 1)])\n                    rotate([rand(-20, 20), rand(-20, 20), rand(0, 360)])\n                        stone(stone_size * rand(0.7, 1.3));\n            }\n        }\n    }\n    \n    // Side stones\n    for (i = [0:30]) {\n        angle = rand(0, 360);\n        dist = rand(18, 22);\n        translate([rand(-ballast_length/2 + 5, ballast_length/2 - 5),\n                  cos(angle) * dist,\n                  rand(-1, ballast_height * 0.3)])\n            rotate([rand(-30, 30), rand(-30, 30), rand(0, 360)])\n                stone(stone_size * rand(0.8, 1.5));\n    }\n}\n\n// Drainage channels\nmodule drainage() {\n    for (x = [-30, 0, 30]) {\n        translate([x, 0, ballast_height * 0.2])\n            rotate([90, 0, 0])\n                cylinder(h = ballast_width * 0.8, r = 1.5, center = true);\n    }\n}\n\n// Tie plates (sleeper bases)\nmodule tie_plates() {\n    for (x = [-30:15:30]) {\n        translate([x, 0, ballast_height * 0.5])\n            cube([12, 2, 0.5], center = true);\n    }\n}\n\n// Main assembly\nunion() {\n    // Base structure\n    track_base();\n    \n    // Drainage\n    drainage();\n    \n    // Tie plates\n    tie_plates();\n    \n    // Ballast stones\n    ballast_stones();\n}",
    "renders": true
  },
  {
    "vehicle": "tamper",
    "openscad_code": "// Medium-complexity, realistic 3D-printable tamper\n// Overall height ≈ 80 mm, base Ø 58 mm (fits 58 mm baskets)\n\n// Parameters\nbase_d = 58;            // tamper base diameter\nhandle_d = 28;          // handle grip diameter\nhandle_h = 55;          // handle height\nneck_h = 8;             // narrow neck height\nbase_h = 12;            // base puck height\nwall = 2;               // minimum printable wall thickness\n$fn = 64;               // circle resolution\n\n/* ---------- Main assembly ---------- */\nunion() {\n    tamper_base();\n    translate([0, 0, base_h]) neck();\n    translate([0, 0, base_h + neck_h]) handle();\n}\n\n/* ---------- Modules ---------- */\nmodule tamper_base() {\n    difference() {\n        // Main puck\n        cylinder(h = base_h, d = base_d, center = false);\n\n        // Chamfer on bottom edge\n        translate([0, 0, base_h - 2])\n            cylinder(h = 2, d1 = base_d, d2 = base_d - 4, center = false);\n\n        // Center relief for weight reduction\n        translate([0, 0, wall])\n            cylinder(h = base_h - wall, d = base_d - 2*wall);\n    }\n}\n\nmodule neck() {\n    // Tapered neck connecting handle to base\n    cylinder(h = neck_h, d1 = base_d - 4, d2 = handle_d - 6, center = false);\n}\n\nmodule handle() {\n    difference() {\n        union() {\n            // Main grip cylinder\n            cylinder(h = handle_h - 8, d = handle_d, center = false);\n\n            // Top dome\n            translate([0, 0, handle_h - 8])\n                sphere(d = handle_d);\n\n            // Finger groove rings\n            for(i = [1:5]) {\n                translate([0, 0, i*9])\n                    scale([1, 1, 0.15])\n                        sphere(d = handle_d + 2);\n            }\n        }\n\n        // Center bore for weight reduction\n        translate([0, 0, -1])\n            cylinder(h = handle_h + 2, d = handle_d - 2*wall);\n\n        // Top indentation for thumb\n        translate([0, 0, handle_h - 4])\n            sphere(d = handle_d/2, $fn = 32);\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "regulator",
    "openscad_code": "// Regulator (medium complexity, realistic style)\n// Overall size ~80 mm\n\n// Knurled texture module\nmodule knurl(dia, h, teeth=24, depth=0.5){\n    for(i=[0:teeth-1])\n        rotate([0,0,i*360/teeth])\n            translate([dia/2, -depth/2, 0])\n                cube([depth, depth, h], center=true);\n}\n\n// Main body cylinder with ports\nmodule regulator_body(){\n    difference(){\n        union(){\n            // Main cylindrical body\n            cylinder(h=35, d=40, $fn=100);\n            // Front pressure adjustment dome\n            translate([0,0,35])\n                cylinder(h=8, d1=40, d2=30, $fn=100);\n        }\n        \n        // Center bore for diaphragm\n        cylinder(h=43, d=20, $fn=100);\n        \n        // Input port (left)\n        translate([-20, 0, 15])\n            rotate([0,90,0])\n                cylinder(h=25, d=15, $fn=50);\n                \n        // Output port (right)\n        translate([20, 0, 15])\n            rotate([0,90,0])\n                cylinder(h=25, d=15, $fn=50);\n                \n        // Gauge port (top)\n        translate([0, -20, 25])\n            rotate([90,0,0])\n                cylinder(h=20, d=12, $fn=50);\n    }\n}\n\n// Adjustment knob assembly\nmodule adjustment_knob(){\n    union(){\n        // Knurled knob\n        difference(){\n            cylinder(h=15, d=25, $fn=100);\n            cylinder(h=16, d=10, $fn=100);\n        }\n        knurl(dia=25, h=15, teeth=32);\n        \n        // Pointer arrow\n        translate([0, 12.5, 7.5])\n            rotate([90,0,0])\n                linear_extrude(height=1.5)\n                    polygon(points=[[0,0],[-3,3],[3,3]]);\n    }\n}\n\n// Gauge\nmodule pressure_gauge(){\n    union(){\n        // Gauge body\n        difference(){\n            cylinder(h=10, d=20, $fn=100);\n            cylinder(h=11, d=16, $fn=100);\n        }\n        \n        // Gauge face\n        translate([0,0,0.1])\n            color(\"white\")\n                cylinder(h=1, d=19.8, $fn=100);\n                \n        // Gauge needle\n        translate([0,0,5])\n            rotate([0,0,45])\n                cube([0.5, 7, 0.5], center=true);\n                \n        // Gauge stem\n        translate([0,0,-5])\n            cylinder(h=5, d=8, $fn=30);\n    }\n}\n\n// Mounting bracket\nmodule mounting_bracket(){\n    difference(){\n        union(){\n            // Base plate\n            cube([50, 15, 3], center=true);\n            \n            // Support arms\n            translate([-15, 0, 0])\n                cube([5, 15, 10], center=true);\n            translate([15, 0, 0])\n                cube([5, 15, 10], center=true);\n        }\n        \n        // Mounting holes\n        translate([-25, 0, 0])\n            cylinder(h=4, d=3.2, $fn=20);\n        translate([25, 0, 0])\n            cylinder(h=4, d=3.2, $fn=20);\n    }\n}\n\n// Assemble the regulator\ntranslate([0, 0, 20])\n    regulator_body();\n\ntranslate([0, 0, 60])\n    adjustment_knob();\n    \ntranslate([0, -35, 35])\n    rotate([90,0,0])\n        pressure_gauge();\n        \ntranslate([0, 0, 5])\n    mounting_bracket();",
    "renders": true
  },
  {
    "vehicle": "spreader",
    "openscad_code": "// Realistic Spreader with Medium Complexity\n// Overall dimensions: ~70mm long, 30mm wide, 20mm high\n\n// Main body module\nmodule spreader_body() {\n    // Central block with rounded edges\n    difference() {\n        // Main block\n        minkowski() {\n            cube([40, 20, 8], center=true);\n            sphere(2);\n        }\n        \n        // Top cavity for seed\n        translate([0, 0, 3])\n            cube([36, 16, 6], center=true);\n    }\n}\n\n// Handle with grip texture\nmodule handle() {\n    union() {\n        // Main handle shaft\n        rotate([0, 90, 0])\n            cylinder(h=25, d1=8, d2=6, center=true);\n        \n        // Grip rings\n        for(i = [-10:4:10]) {\n            translate([i, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h=2.5, d=10, $fn=32);\n        }\n        \n        // End cap\n        translate([12, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=3, d=8, center=true);\n    }\n}\n\n// Adjustable flow gate\nmodule flow_gate() {\n    difference() {\n        // Gate plate\n        translate([0, 0, -7])\n            cube([20, 18, 1.5], center=true);\n        \n        // Flow holes\n        for(x = [-7:3.5:7]) {\n            for(y = [-6:3:6]) {\n                translate([x, y, -6])\n                    cylinder(h=3, d=2.5);\n            }\n        }\n    }\n}\n\n// Rotating spreader disk\nmodule spreader_disk() {\n    difference() {\n        // Main disk\n        translate([0, 0, -12])\n            cylinder(h=2, d=25, $fn=64);\n        \n        // Paddles\n        for(i = [0:30:359]) {\n            rotate([0, 0, i])\n                translate([8, 0, -11.5])\n                    cube([10, 3, 2], center=true);\n        }\n        \n        // Center hole\n        translate([0, 0, -13])\n            cylinder(h=4, d=3);\n    }\n}\n\n// Support legs\nmodule support_legs() {\n    for(pos = [-1, 1]) {\n        translate([pos * 15, 0, -2])\n            rotate([0, 90, 0])\n                cylinder(h=10, d=4, center=true);\n    }\n}\n\n// Seed hopper attachment\nmodule hopper_connector() {\n    // Top flange\n    translate([0, 0, 8])\n        cylinder(h=3, d1=28, d2=24);\n    \n    // Threaded section\n    translate([0, 0, 9.5])\n        cylinder(h=5, d=22, $fn=32);\n}\n\n// Assembly\nunion() {\n    spreader_body();\n    \n    // Handle attached to body\n    translate([-20, 0, 0])\n        handle();\n    \n    // Flow gate under body\n    flow_gate();\n    \n    // Spreader disk below\n    spreader_disk();\n    \n    // Support legs\n    support_legs();\n    \n    // Hopper connector on top\n    hopper_connector();\n}",
    "renders": true
  },
  {
    "vehicle": "sweeper",
    "openscad_code": "// Realistic Medium-Complexity Sweeper (50 mm wide)\n// Designed for 3D printing – no overhangs, 2 mm wall thickness assumed\n\n$fn = 32;\n\n// Main assembly\nmodule sweeper() {\n    // Central chassis\n    chassis();\n\n    // Two side wheels\n    translate([-24, 0, 8]) rotate([0, 0, 0]) wheel();\n    translate([ 24, 0, 8]) rotate([0, 0, 0]) wheel();\n\n    // Rotating brush drum under the chassis\n    translate([0, 0, 5]) brush_drum();\n\n    // Handle tube rising backwards\n    translate([0, -15, 25]) rotate([30, 0, 0]) handle();\n}\n\n// Chassis shell with hollow cavity\nmodule chassis() {\n    difference() {\n        // Outer shell\n        hull() {\n            translate([-25, -10, 0])  cube([50, 30, 20]);\n            translate([-20,  15, 5])  cube([40, 10, 15]);\n        }\n        // Hollow cavity inside\n        translate([-23, -8, 2]) cube([46, 26, 16]);\n    }\n    // Front intake lip\n    translate([0, 20, 0]) cube([46, 4, 6], center = true);\n}\n\n// Wheel with tire tread pattern\nmodule wheel() {\n    union() {\n        // Rim\n        cylinder(h = 4, r = 10);\n        // Tire tread – simple grooves\n        for (i = [0 : 30 : 360]) {\n            rotate([0, 0, i])\n                translate([0, 10, 2])\n                cube([2, 2, 4], center = true);\n        }\n        // Hub cap\n        cylinder(h = 1, r = 6);\n    }\n}\n\n// Brush drum with bristles\nmodule brush_drum() {\n    difference() {\n        // Drum core\n        rotate([90, 0, 0]) cylinder(h = 40, r = 8, center = true);\n        // Reduce weight – hollow core\n        rotate([90, 0, 0]) cylinder(h = 42, r = 5, center = true);\n    }\n    // Bristle tufts arranged in a spiral\n    for (i = [0 : 15 : 360 * 3]) {\n        rotate([0, 0, i])\n            translate([0, 11, 0])\n            rotate([90, 0, 0])\n            cylinder(h = 3, r = 1.5);\n    }\n}\n\n// Handle tube and grip\nmodule handle() {\n    // Tube\n    cylinder(h = 50, r = 4);\n    // Grip\n    translate([0, 0, 55]) rotate([0, 0, 0]) {\n        difference() {\n            cylinder(h = 30, r = 5);\n            cylinder(h = 32, r = 3.5);\n        }\n    }\n}\n\n// Render the complete sweeper\nsweeper();",
    "renders": true
  },
  {
    "vehicle": "snowplow",
    "openscad_code": "// Scale factor for overall model\nscale_factor = 1;\n\n// Main dimensions\nplow_width = 65 * scale_factor;\nplow_height = 35 * scale_factor;\nplow_depth = 25 * scale_factor;\ntruck_width = 30 * scale_factor;\ntruck_height = 20 * scale_factor;\ntruck_length = 50 * scale_factor;\nwheel_diameter = 12 * scale_factor;\nwheel_width = 6 * scale_factor;\n\nmodule plow_blade() {\n    // Main curved blade\n    difference() {\n        union() {\n            // Center curved section\n            for (i = [-plow_width/2:2:plow_width/2]) {\n                translate([i, 0, 0])\n                    scale([1, 1, 1 - abs(i)/(plow_width/2)*0.3])\n                    cube([2, plow_depth, plow_height], center=true);\n            }\n            \n            // Top reinforcement bar\n            translate([0, -plow_depth/2 - 2, plow_height/2 - 2])\n                cube([plow_width + 10, 4, 4], center=true);\n                \n            // Bottom cutting edge\n            translate([0, plow_depth/2 + 1, -plow_height/2 + 1])\n                cube([plow_width + 10, 2, 2], center=true);\n        }\n        \n        // Remove back part for curve\n        translate([0, -plow_depth/2 - 5, 0])\n            cube([plow_width + 20, plow_depth + 10, plow_height + 10], center=true);\n    }\n}\n\nmodule truck_chassis() {\n    // Main truck body\n    difference() {\n        // Cabin\n        translate([0, truck_length/4, truck_height/2])\n            cube([truck_width, truck_length/2, truck_height], center=true);\n            \n        // Windshield\n        translate([0, truck_length/4 + truck_length/4 - 2, truck_height/2 + 3])\n            rotate([30, 0, 0])\n            cube([truck_width - 4, 8, 10], center=true);\n    }\n    \n    // Hood\n    translate([0, -truck_length/4, truck_height/2 - 5])\n        cube([truck_width, truck_length/2, truck_height - 10], center=true);\n}\n\nmodule wheel() {\n    difference() {\n        // Tire\n        cylinder(h=wheel_width, d=wheel_diameter, center=true, $fn=20);\n        \n        // Rim\n        translate([0, 0, -wheel_width/2 - 1])\n            cylinder(h=wheel_width + 2, d=wheel_diameter - 4, center=true, $fn=20);\n            \n        // Hub hole\n        translate([0, 0, -wheel_width/2 - 2])\n            cylinder(h=wheel_width + 4, d=3, center=true, $fn=20);\n    }\n}\n\nmodule wheels_assembly() {\n    // Front wheels\n    translate([-(truck_width/2 + wheel_width/2), -truck_length/4, -wheel_diameter/2])\n        rotate([90, 0, 0])\n        wheel();\n    translate([(truck_width/2 + wheel_width/2), -truck_length/4, -wheel_diameter/2])\n        rotate([90, 0, 0])\n        wheel();\n    \n    // Rear wheels\n    translate([-(truck_width/2 + wheel_width/2), truck_length/4, -wheel_diameter/2])\n        rotate([90, 0, 0])\n        wheel();\n    translate([(truck_width/2 + wheel_width/2), truck_length/4, -wheel_diameter/2])\n        rotate([90, 0, 0])\n        wheel();\n}\n\nmodule plow_support() {\n    // Main support arm\n    translate([0, -truck_length/2 - 5, wheel_diameter/2 + 5])\n        rotate([0, 30, 0])\n        cube([truck_width/2, 20, 8], center=true);\n    \n    // Side supports\n    translate([-truck_width/2 - 5, -truck_length/2 - 5, wheel_diameter/2 + 5])\n        rotate([0, 0, -30])\n        cube([8, 15, 8], center=true);\n    translate([truck_width/2 + 5, -truck_length/2 - 5, wheel_diameter/2 + 5])\n        rotate([0, 0, 30])\n        cube([8, 15, 8], center=true);\n}\n\n// Assemble the snowplow\nunion() {\n    // Truck body\n    translate([0, 0, wheel_diameter/2])\n        truck_chassis();\n    \n    // Wheels\n    wheels_assembly();\n    \n    // Plow blade\n    translate([0, -truck_length/2 - plow_depth/2, wheel_diameter/2 + plow_height/2])\n        plow_blade();\n    \n    // Plow support structure\n    plow_support();\n}",
    "renders": true
  },
  {
    "vehicle": "flanger",
    "openscad_code": "// Realistic Flanger Pedal – OpenSCAD\n// Medium complexity, 3D-printable, ~90 mm long, 45 mm wide, 30 mm tall\n\n// Global parameters\nlength = 90;\nwidth  = 45;\nheight = 30;\nwall   = 2.2;          // wall thickness\ncorner_r = 3;          // corner radius for fillets\nknob_r   = 6;\nknob_h   = 5;\nled_r    = 2.5;\njack_r   = 5.5;\njack_h   = 12;\nfootswitch_r = 6.5;\nfootswitch_h = 12;\n\nmodule rounded_box(l, w, h, r) {\n    hull() {\n        for(dx=[r, l-r], dy=[r, w-r])\n            translate([dx, dy, r]) sphere(r=r);\n        for(dx=[r, l-r], dy=[r, w-r])\n            translate([dx, dy, h-r]) sphere(r=r);\n    }\n}\n\n// Main enclosure\ndifference() {\n    rounded_box(length, width, height, corner_r);\n    // Hollow it out\n    translate([wall, wall, wall])\n        rounded_box(length-2*wall, width-2*wall, height-wall, corner_r);\n}\n\n// Top plate with holes\nmodule top_plate() {\n    difference() {\n        translate([0, 0, height-1.5])\n            cube([length, width, 1.5], center=false);\n        // Knob shafts\n        for(x=[25, 55])\n            translate([x, width/2, height-1.5])\n                cylinder(r=knob_r-1, h=3, $fn=32);\n        // LED hole\n        translate([75, width-10, height-1.5])\n            cylinder(r=led_r, h=3, $fn=16);\n        // Footswitch hole\n        translate([15, width/2, height-1.5])\n            cylinder(r=footswitch_r, h=3, $fn=32);\n    }\n}\ntop_plate();\n\n// Jacks on sides\nmodule jack(dx, side) {\n    translate([dx, (side==1)?0:width, height/2])\n        rotate([0, 90*side, 0])\n        difference() {\n            cylinder(r=jack_r, h=jack_h, $fn=32);\n            translate([0, 0, -1])\n                cylinder(r=jack_r-1.2, h=jack_h+2, center=true, $fn=32);\n        }\n}\njack(0, 1);\njack(length, -1);\n\n// DC power jack\nmodule dc_jack() {\n    translate([length/2, 0, height/2])\n        rotate([0, 90, 0])\n        difference() {\n            cylinder(r=5.5, h=8, $fn=32);\n            translate([0, 0, -1])\n                cylinder(r=3.5, h=10, center=true, $fn=32);\n        }\n}\ndc_jack();\n\n// Knobs on shafts\nmodule knob(x) {\n    translate([x, width/2, height-1.5+knob_h/2])\n        difference() {\n            cylinder(r=knob_r, h=knob_h, $fn=64);\n            translate([0, 0, -1])\n                cylinder(r=knob_r-1.2, h=knob_h+2, $fn=64);\n            // Indicator line\n            translate([0, 0, knob_h-0.2])\n                cube([knob_r, 0.8, 0.4], center=true);\n        }\n}\nknob(25);\nknob(55);\n\n// LED\ntranslate([75, width-10, height-1.5+led_r])\n    sphere(r=led_r, $fn=16);\n\n// Footswitch cap\ntranslate([15, width/2, height-1.5+footswitch_h/2])\n    difference() {\n        cylinder(r1=footswitch_r+2, r2=footswitch_r+3, h=footswitch_h, $fn=32);\n        translate([0, 0, -1])\n            cylinder(r=footswitch_r-1, h=footswitch_h+2, center=true, $fn=32);\n    }\n\n// Rubber feet\nmodule foot(x, y) {\n    translate([x, y, -0.5])\n        cylinder(r=3, h=1.5, $fn=24);\n}\nfor(x=[10, length-10])\n    for(y=[10, width-10])\n        foot(x, y);",
    "renders": true
  },
  {
    "vehicle": "firetrain",
    "openscad_code": "// Firetrain - Realistic Medium Complexity\n// Size: ~80mm long, 20mm wide, 25mm tall\n// Designed for 3D printing - 1.2mm walls, no overhangs >45°\n\n$fn = 32;\n\n// Main assembly\nfiretrain();\n\nmodule firetrain() {\n    // Body\n    color(\"red\") train_body();\n    \n    // Cab\n    translate([28, 0, 12]) color(\"red\") cab();\n    \n    // Water tank\n    translate([-25, 0, 8]) color(\"silver\") water_tank();\n    \n    // Wheels\n    for(i = [-40:20:40]) {\n        translate([i, 0, 0]) wheels();\n    }\n    \n    // Ladders\n    translate([0, 10, 15]) rotate([0, 0, 90]) ladder();\n    translate([0, -10, 15]) rotate([0, 0, 90]) ladder();\n    \n    // Hoses\n    translate([-35, 8, 10]) hose_reel();\n    translate([-35, -8, 10]) hose_reel();\n    \n    // Lights\n    translate([45, 6, 18]) emergency_light();\n    translate([45, -6, 18]) emergency_light();\n}\n\nmodule train_body() {\n    difference() {\n        // Main hull\n        hull() {\n            translate([-30, 0, 8]) cube([60, 18, 12], center=true);\n            translate([-30, 0, 14]) cube([60, 16, 10], center=true);\n        }\n        \n        // Windows\n        for(x = [-15:15:15]) {\n            translate([x, 9, 14]) cube([8, 1, 4], center=true);\n            translate([x, -9, 14]) cube([8, 1, 4], center=true);\n        }\n        \n        // Door\n        translate([30, 9, 12]) cube([8, 1, 6], center=true);\n    }\n}\n\nmodule cab() {\n    difference() {\n        union() {\n            // Base\n            translate([0, 0, 3]) cube([16, 18, 6], center=true);\n            \n            // Roof\n            translate([0, 0, 9]) cube([14, 16, 2], center=true);\n        }\n        \n        // Windshield\n        translate([8, 0, 5]) cube([1, 14, 4], center=true);\n    }\n}\n\nmodule water_tank() {\n    difference() {\n        // Tank body\n        cube([30, 14, 14], center=true);\n        \n        // Top fill hatch\n        translate([0, 0, 8]) cylinder(h=2, r=4);\n    }\n}\n\nmodule wheels() {\n    for(side = [-8, 8]) {\n        translate([0, side, 0]) {\n            // Wheel\n            difference() {\n                cylinder(h=4, r=5);\n                translate([0, 0, -1]) cylinder(h=6, r=3);\n            }\n            \n            // Axle connector\n            translate([0, 0, 2]) cylinder(h=2, r=2);\n        }\n    }\n}\n\nmodule ladder() {\n    // Rails\n    for(x = [-10:2:10]) {\n        translate([x, 0, 0]) cylinder(h=15, r=0.8);\n        translate([x, 2, 0]) cylinder(h=15, r=0.8);\n    }\n    \n    // Rungs\n    for(h = [0:2:15]) {\n        translate([-10, 1, h]) cube([20, 1, 0.8], center=true);\n    }\n}\n\nmodule hose_reel() {\n    difference() {\n        // Reel\n        cylinder(h=8, r=4);\n        \n        // Center hole\n        translate([0, 0, -1]) cylinder(h=10, r=1.5);\n    }\n}\n\nmodule emergency_light() {\n    union() {\n        // Base\n        translate([0, 0, -2]) cylinder(h=2, r=3);\n        \n        // Dome\n        translate([0, 0, 0]) sphere(d=4);\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "crane",
    "openscad_code": "// Mobile crane model - Medium complexity, realistic style\n// Designed for 3D printing with no extreme overhangs\n\n$fn = 32;  // Circle resolution\n\nmodule wheel(d=12, w=6) {\n    difference() {\n        cylinder(h=w, d=d);\n        translate([0, 0, -0.1])\n            cylinder(h=w+0.2, d=d-4);\n    }\n}\n\nmodule wheel_assembly() {\n    // Mount plate\n    translate([-4, -3, 0])\n        cube([8, 6, 4]);\n    \n    // Two wheels\n    translate([-15, 0, 2])\n        rotate([90, 0, 0])\n            wheel();\n    translate([15, 0, 2])\n        rotate([90, 0, 0])\n            wheel();\n}\n\nmodule chassis() {\n    // Base frame\n    difference() {\n        cube([80, 30, 8]);\n        // Hollow out\n        translate([4, 4, 4])\n            cube([72, 22, 8]);\n    }\n    \n    // Wheel assemblies - 4 total\n    translate([15, -20, 0])\n        wheel_assembly();\n    translate([15, 20, 0])\n        wheel_assembly();\n    translate([65, -20, 0])\n        wheel_assembly();\n    translate([65, 20, 0])\n        wheel_assembly();\n    \n    // Counterweight\n    translate([-10, -15, 8])\n        cube([20, 30, 15]);\n}\n\nmodule cab() {\n    // Main cab body\n    difference() {\n        translate([10, -10, 23])\n            cube([20, 20, 15]);\n        // Windows\n        translate([12, -8, 30])\n            cube([16, 1, 8]);\n        translate([12, 8, 30])\n            cube([16, 1, 8]);\n    }\n    \n    // Roof\n    translate([8, -12, 38])\n        cube([24, 24, 2]);\n}\n\nmodule turntable() {\n    // Base ring\n    difference() {\n        cylinder(h=4, d=36);\n        cylinder(h=4.2, d=32);\n    }\n    \n    // Support structure\n    translate([-15, -15, 4])\n        cube([30, 30, 4]);\n}\n\nmodule boom_section(len=60, wid=10, hei=6) {\n    difference() {\n        // Main beam\n        translate([-wid/2, -wid/2, 0])\n            cube([wid, wid, len]);\n        \n        // Lightening holes\n        for(i = [10:20:len-20]) {\n            translate([0, 0, i])\n                cylinder(h=wid+1, d=wid-4);\n        }\n    }\n    \n    // Connection plates\n    translate([0, -wid/2-1, 0])\n        cube([2, 2, 4]);\n    translate([0, wid/2-1, 0])\n        cube([2, 2, 4]);\n    translate([0, -wid/2-1, len-4])\n        cube([2, 2, 4]);\n    translate([0, wid/2-1, len-4])\n        cube([2, 2, 4]);\n}\n\nmodule boom() {\n    // Base boom\n    translate([0, 0, 8])\n        rotate([0, 90, 0])\n            boom_section(60, 10, 6);\n    \n    // First extension\n    translate([0, 0, 8])\n        rotate([0, 90, 0])\n            translate([0, 0, 50])\n                scale([0.8, 0.8, 1])\n                    boom_section(40, 8, 5);\n    \n    // Second extension\n    translate([0, 0, 8])\n        rotate([0, 90, 0])\n            translate([0, 0, 80])\n                scale([0.6, 0.6, 1])\n                    boom_section(30, 6, 4);\n    \n    // Hydraulic cylinder\n    translate([0, 0, 12])\n        rotate([0, 0, -30])\n            cylinder(h=25, d=4);\n}\n\nmodule hook_block() {\n    // Hook body\n    translate([0, 0, -12])\n        rotate([0, 90, 0])\n            difference() {\n                cylinder(h=8, d=6);\n                translate([0, -4, 4])\n                    cube([8, 8, 8]);\n            }\n    \n    // Pulley block\n    translate([0, 0, -5])\n        cube([6, 6, 4]);\n}\n\n// Assembly\nchassis();\n\ntranslate([40, 0, 8])\n    turntable();\n\ntranslate([40, 0, 12])\n    cab();\n\ntranslate([40, 0, 16])\n    boom();\n\ntranslate([0, 0, 8])\n    rotate([0, 90, 0])\n        translate([0, 0, 110])\n            hook_block();",
    "renders": true
  },
  {
    "vehicle": "breakdown",
    "openscad_code": "// Realistic Breakdown (disassembled cordless drill) – Medium complexity\n// All parts are spaced 5 mm apart so the model prints as a single “break-down” view\n// No overhangs > 45°, wall thickness ≥ 1.2 mm – ready for FDM printing\n\n// Overall scale factor – change this to resize the entire scene\nscale_factor = 0.45;\n\n// Color scheme\ncolor_motor = [0.3, 0.3, 0.3];\ncolor_gearbox = [0.7, 0.7, 0.7];\ncolor_case = [0.1, 0.1, 0.5];\ncolor_battery = [0.9, 0.9, 0.9];\ncolor_chuck = [0.5, 0.5, 0.5];\ncolor_screw = [0.6, 0.6, 0.6];\n\nmodule motor() {\n    color(color_motor)\n    translate([0, 0, 0])\n    union() {\n        // Motor can (Ø 28 mm, L 48 mm)\n        cylinder(h = 48, d = 28, $fn = 60);\n        // Rear cap with vent slits\n        translate([0, 0, 48])\n        cylinder(h = 6, d1 = 28, d2 = 26, $fn = 60);\n    }\n}\n\nmodule gearbox() {\n    color(color_gearbox)\n    translate([0, 0, 54 + 5])\n    union() {\n        // Main gearbox body\n        cylinder(h = 30, d = 32, $fn = 60);\n        // Output collar for chuck\n        translate([0, 0, 30])\n        cylinder(h = 6, d = 14, $fn = 30);\n    }\n}\n\nmodule chuck() {\n    color(color_chuck)\n    translate([0, 0, 54 + 30 + 6 + 5])\n    union() {\n        // Chuck sleeve\n        cylinder(h = 28, d = 30, $fn = 60);\n        // Three jaws – simplified as one merged object\n        for (a = [0:120:240])\n            rotate([0, 0, a])\n            translate([8, 0, 0])\n            cube([16, 2, 28], center = true);\n    }\n}\n\nmodule left_shell() {\n    color(color_case)\n    translate([-22 - 5, 0, 0])\n    difference() {\n        union() {\n            // Main shell\n            translate([0, 0, 15])\n            cube([44, 70, 30], center = true);\n            // Handle\n            translate([0, 0, -35])\n            cube([34, 34, 80], center = true);\n            // Battery socket\n            translate([0, 0, -75])\n            cube([36, 36, 10], center = true);\n        }\n        // Motor cavity\n        translate([0, 0, 15])\n        cylinder(h = 60, d = 30, $fn = 60);\n        // Gearbox cavity\n        translate([0, 0, 54])\n        cylinder(h = 36, d = 34, $fn = 60);\n        // Chuck cavity\n        translate([0, 0, 54 + 30 + 6])\n        cylinder(h = 28, d = 32, $fn = 60);\n    }\n}\n\nmodule right_shell() {\n    mirror([1, 0, 0])\n    left_shell();\n}\n\nmodule battery_pack() {\n    color(color_battery)\n    translate([0, 0, -75 - 10 - 5])\n    cube([34, 34, 60], center = true);\n}\n\nmodule screws(count = 6) {\n    color(color_screw)\n    for (z = [0:count - 1])\n        translate([0, -35 - 5, 15 + z * 10 - 2.5])\n        rotate([90, 0, 0])\n        cylinder(h = 10, d = 3, $fn = 12);\n}\n\n// Apply global scale\nscale(scale_factor)\nunion() {\n    motor();\n    gearbox();\n    chuck();\n    left_shell();\n    right_shell();\n    battery_pack();\n    screws();\n}",
    "renders": true
  },
  {
    "vehicle": "rescue",
    "openscad_code": "// Rescue Helicopter – realistic, medium complexity\n// Overall footprint ≈ 90 mm (rotor tip to tail) x 20 mm wide\n\n$fn = 36; // smooth curves\n\n// Main assembly\nmodule rescue_helicopter() {\n    // Fuselage\n    hull() {\n        translate([-5,0,12]) cube([60,20,15], center=true);      // mid body\n        translate([30,0,12]) cube([20,16,12], center=true);      // tail boom\n        translate([-25,0,15]) cube([20,18,18], center=true);     // nose\n    }\n\n    // Cockpit glazing\n    difference() {\n        translate([-20,0,22]) scale([1,1.2,1]) sphere(8);\n        translate([-20,0,14]) cube([20,20,20], center=true);     // cut bottom half\n    }\n\n    // Main rotor mast & rotor\n    translate([0,0,28]) cylinder(h=10, d=4, center=true);\n    translate([0,0,33]) rotate([0,0,0]) rotor_blades();\n\n    // Tail rotor\n    translate([40,0,12]) rotate([90,0,0]) tail_rotor();\n\n    // Skids\n    skid_assembly();\n\n    // Rescue winch & hook\n    translate([5,0,15]) winch_assembly();\n}\n\n// Rotor blades (2-blade main)\nmodule rotor_blades() {\n    for (a=[0,90]) rotate([0,0,a]) {\n        translate([0,35,0]) cube([3,70,1.5], center=true);\n    }\n}\n\n// Tail rotor (4-blade)\nmodule tail_rotor() {\n    for (a=[0:90:270]) rotate([0,0,a]) {\n        translate([0,8,0]) cube([1.5,16,1], center=true);\n    }\n}\n\n// Skids with struts\nmodule skid_assembly() {\n    // left skid\n    translate([0,12,0]) single_skid();\n    // right skid\n    translate([0,-12,0]) mirror([0,1,0]) single_skid();\n}\n\nmodule single_skid() {\n    // tube\n    hull() {\n        translate([-15,0,0]) sphere(2);\n        translate([15,0,0]) sphere(2);\n    }\n    // front strut\n    translate([-10,0,6]) cylinder(h=6, d=2);\n    // rear strut\n    translate([10,0,6]) cylinder(h=6, d=2);\n}\n\n// Winch & hook\nmodule winch_assembly() {\n    // winch drum\n    cylinder(h=4, d=6, center=true);\n    // cable (simplified as rod)\n    translate([0,0,-6]) cylinder(h=12, d=1);\n    // hook\n    translate([0,0,-12]) difference() {\n        sphere(2.5);\n        translate([0,0,2]) cube([6,3,6], center=true);\n    }\n}\n\n// Render\nrescue_helicopter();",
    "renders": true
  },
  {
    "vehicle": "hospital",
    "openscad_code": "// Hospital model - medium complexity, realistic style\n// Overall size: 80mm x 60mm x 40mm\n\nmodule base_building() {\n    // Main hospital base\n    difference() {\n        cube([80, 60, 30], center=true);\n        // Doorway\n        translate([0, -30.1, -10])\n            cube([20, 5, 20], center=true);\n    }\n}\n\nmodule windows() {\n    // Generate windows for front and back faces\n    for(x = [-30, -15, 0, 15, 30]) {\n        for(y = [-28, 28]) {\n            translate([x, y, 5])\n                cube([8, 2, 10], center=true);\n        }\n    }\n    // Generate windows for side faces\n    for(y = [-20, -10, 0, 10, 20]) {\n        for(x = [-38, 38]) {\n            translate([x, y, 5])\n                cube([2, 8, 10], center=true);\n        }\n    }\n}\n\nmodule entrance() {\n    // Entrance awning\n    translate([0, -30, 15])\n        cube([30, 5, 3], center=true);\n    // Support pillars\n    translate([-12, -32.5, 7.5])\n        cylinder(r=1.5, h=15, center=true);\n    translate([12, -32.5, 7.5])\n        cylinder(r=1.5, h=15, center=true);\n}\n\nmodule roof() {\n    // Main flat roof\n    translate([0, 0, 20])\n        cube([82, 62, 2], center=true);\n    \n    // Roof walls\n    translate([0, 0, 21])\n        difference() {\n            cube([82, 62, 3], center=true);\n            cube([78, 58, 3], center=true);\n        }\n}\n\nmodule chimney() {\n    translate([-25, 20, 23])\n        cube([5, 5, 12], center=true);\n}\n\nmodule cross() {\n    // Simple red cross on front\n    translate([0, -29.5, 10])\n        cube([4, 1, 12], center=true);\n    translate([0, -29.5, 10])\n        cube([12, 1, 4], center=true);\n}\n\nmodule hospital_sign() {\n    // Hospital sign above entrance\n    translate([0, -30, 18])\n        cube([25, 2, 5], center=true);\n}\n\n// Main assembly\nunion() {\n    base_building();\n    \n    difference() {\n        union() {\n            roof();\n            chimney();\n        }\n        windows();\n    }\n    \n    entrance();\n    cross();\n    hospital_sign();\n}",
    "renders": true
  },
  {
    "vehicle": "service",
    "openscad_code": "// Realistic Service Desk with Computer Monitor, Keyboard, Mouse and Phone\n// Overall size: 90 mm wide x 60 mm deep x 45 mm tall\n\n$fn = 36;\n\n// Desk surface\nmodule desk_surface() {\n    difference() {\n        // Main desktop\n        translate([0, 0, 35]) \n            cube([90, 60, 5], center=true);\n        \n        // Cable management hole\n        translate([20, 0, 32.5]) \n            cylinder(h=6, r=4);\n    }\n}\n\n// Desk legs\nmodule desk_legs() {\n    for (x = [-35, 35]) {\n        for (y = [-20, 20]) {\n            translate([x, y, 17.5]) \n                cube([8, 8, 35], center=true);\n        }\n    }\n}\n\n// Monitor stand base\nmodule monitor_stand_base() {\n    translate([0, 0, 40]) \n        cube([30, 15, 2], center=true);\n}\n\n// Monitor stand post\nmodule monitor_stand_post() {\n    translate([0, 0, 48]) \n        cube([6, 6, 16], center=true);\n}\n\n// Monitor screen\nmodule monitor() {\n    // Screen\n    translate([0, 0, 58]) \n        cube([40, 25, 2], center=true);\n    \n    // Screen bezel\n    difference() {\n        translate([0, 0, 57]) \n            cube([44, 29, 3], center=true);\n        translate([0, 0, 55]) \n            cube([38, 23, 4], center=true);\n    }\n}\n\n// Keyboard\nmodule keyboard() {\n    translate([-20, 15, 40.5]) \n        cube([30, 12, 1.5], center=true);\n    \n    // Keys\n    for (i = [-3:3]) {\n        for (j = [-1:1]) {\n            translate([-20 + i*3.5, 15 + j*3.5, 41.5]) \n                cube([3, 3, 0.5], center=true);\n        }\n    }\n}\n\n// Mouse\nmodule mouse() {\n    translate([20, 15, 40.5]) {\n        // Mouse body\n        difference() {\n            scale([1, 0.7, 0.5]) \n                sphere(r=8);\n            translate([0, 0, -5]) \n                cube([20, 20, 10], center=true);\n        }\n        \n        // Mouse buttons\n        translate([2, 0, 44.5]) \n            cube([6, 8, 0.5], center=true);\n    }\n}\n\n// Desk phone\nmodule phone() {\n    translate([25, -15, 40.5]) {\n        // Phone base\n        cube([18, 12, 3], center=true);\n        \n        // Handset\n        translate([0, 8, 5]) \n            rotate([30, 0, 0]) \n                cube([14, 6, 4], center=true);\n        \n        // Keypad\n        for (i = [-1:1]) {\n            for (j = [-1:1]) {\n                translate([i*4, j*3, 42.5]) \n                    cylinder(h=0.5, r=1.5);\n            }\n        }\n    }\n}\n\n// Paper tray\nmodule paper_tray() {\n    translate([-25, -15, 40.5]) {\n        difference() {\n            cube([20, 15, 2], center=true);\n            translate([0, 0, 1]) \n                cube([18, 13, 2], center=true);\n        }\n    }\n}\n\n// Assemble all parts\nunion() {\n    desk_surface();\n    desk_legs();\n    monitor_stand_base();\n    monitor_stand_post();\n    monitor();\n    keyboard();\n    mouse();\n    phone();\n    paper_tray();\n}",
    "renders": true
  },
  {
    "vehicle": "test",
    "openscad_code": "// Test Object: Realistic 3D-printable \"Test V-Block\"\n// Purpose: Functional test piece for dimensional accuracy, hole alignment, and overhang resistance\n// Overall size: 80 mm x 60 mm x 50 mm\n\n// Wall thickness and clearances for FDM printing\n$fn = 32;\nwall = 3;           // Recommended wall thickness for 2-3 perimeters\nclearance = 0.4;    // Horizontal clearance between moving parts\npin_d = 6;          // Pin diameter for assembly test\npin_l = 10;         // Pin length\n\n// Base plate with ribs for rigidity\nmodule base() {\n    difference() {\n        union() {\n            // Main base slab\n            translate([0, 0, 2.5])\n                cube([80, 60, 5], center = true);\n            \n            // Longitudinal ribs\n            for(y = [-20, 0, 20]) {\n                translate([0, y, 1.5])\n                    cube([78, 4, 3], center = true);\n            }\n        }\n        \n        // Screw holes\n        for(x = [-30, -10, 10, 30], y = [-22.5, 22.5]) {\n            translate([x, y, 0])\n                cylinder(h = 6, d = 4, center = false);\n        }\n    }\n}\n\n// V-groove block for shaft alignment test\nmodule v_block() {\n    difference() {\n        union() {\n            // Main block\n            translate([0, 0, 25])\n                cube([40, 40, 50], center = true);\n            \n            // Chamfers on top edges\n            translate([0, 0, 49])\n                cube([38, 38, 2], center = true);\n        }\n        \n        // 90° V-groove, 20 mm deep\n        translate([0, 0, 50])\n            rotate([0, 0, 45])\n                cube([30, 30, 30], center = true);\n                \n        // Pin holes for fixture alignment\n        for(x = [-15, 15]) {\n            translate([x, -15, 25])\n                rotate([90, 0, 0])\n                    cylinder(h = 40, d = pin_d + clearance, center = true);\n        }\n    }\n}\n\n// Pin test pieces\nmodule pin() {\n    // Main shaft\n    cylinder(h = pin_l + 2, d = pin_d, center = true);\n    \n    // Chamfered lead-in\n    translate([0, 0, pin_l/2 + 1])\n        cylinder(h = 2, d1 = pin_d - 1, d2 = pin_d, center = true);\n}\n\n// Boss with threaded insert pilot\nmodule boss() {\n    difference() {\n        // Main boss\n        cylinder(h = 8, d = 12, center = true);\n        \n        // Pilot hole for brass insert\n        translate([0, 0, 1])\n            cylinder(h = 10, d = 6.2, center = true);\n    }\n}\n\n// Assembly\nunion() {\n    // Base plate\n    base();\n    \n    // Two V-blocks spaced for 40 mm shaft\n    translate([-20, 0, 2.5])\n        v_block();\n    translate([20, 0, 2.5])\n        mirror([1, 0, 0])\n            v_block();\n    \n    // Corner bosses\n    for(x = [-35, 35], y = [-23, 23]) {\n        translate([x, y, 5.5])\n            boss();\n    }\n    \n    // Loose pins for fit check\n    translate([-50, 0, pin_l/2 + 2.5])\n        pin();\n    translate([50, 0, pin_l/2 + 2.5])\n        pin();\n}",
    "renders": true
  },
  {
    "vehicle": "measurement",
    "openscad_code": "// Digital Vernier Caliper – 3D-printable, medium-complexity, realistic style\n// Overall length ≈ 90 mm, jaw depth 20 mm, clearance for 0.6 mm nozzle\n$fn = 32;      // Smoother curves without overhangs\n\n// General print parameters\nwall = 2;      // 2 mm shell thickness\ngap  = 0.4;    // Print clearance\n\n/* ---------- MAIN ASSEMBLY ---------- */\nmodule caliper() {\n    // Vernier scale (sliding jaw + display)\n    translate([0,0,0]) \n        union() {\n            static_jaw();\n            sliding_jaw();\n        }\n}\n\n/* ---------- STATIC JAW ---------- */\nmodule static_jaw() {\n    // Main beam body\n    difference() {\n        // Outer beam profile\n        translate([0,-10,0]) cube([70, 20, 6], center=true);\n        // Metric scale recess (safe depth)\n        translate([0,0,3.1]) cube([66, 1.5, 0.4], center=true);\n    }\n    \n    // Fixed measuring jaw\n    translate([35,0,0])\n        difference() {\n            // Jaw body\n            cube([10, 20, 6], center=true);\n            // Inner relief for printability\n            translate([5-wall/2, 0, -3+wall]) cube([wall, 16, 6-wall*2], center=true);\n        }\n    \n    // Raised metric scale ticks every 5 mm\n    for(i=[0:5:65])\n        translate([i-35, -10+wall+0.2, 3.2])\n            cube([0.25, 1, 0.3]);\n}\n\n/* ---------- SLIDING JAW ---------- */\nmodule sliding_jaw() {\n    translate([0,0,6.5]) {   // Stack above beam for clearance\n    \n        // Slider body\n        difference() {\n            cube([30, 22, 8], center=true);\n            // Tunnel for beam\n            translate([0,0,0]) cube([70+gap*2, 20+gap*2, 10], center=true);\n            // Thumb-wheel cavity\n            translate([0, 0, -4-wall/2])\n                cylinder(h=wall+0.2, r=8, center=true);\n        }\n        \n        // Thumb wheel\n        translate([0, 0, -6.5])\n            rotate([90,0,0])\n            difference() {\n                cylinder(h=6, r=7, center=true);\n                // Knurling grooves\n                for(a=[0:30:330])\n                    rotate([0,0,a])\n                    translate([0, 7.5, 0])\n                        cube([1, 2, 6.2], center=true);\n            }\n            \n        // Vernier scale pad\n        difference() {\n            translate([0, -11.5, 3.9])\n                cube([30, 3, 0.5], center=true);\n            // Vernier ticks every 0.9 mm (10th of 1 mm)\n            for(i=[0:0.9:29])\n                translate([-15+i, -11.5, 4.3])\n                    cube([0.1, 0.4, 0.3]);\n        }\n        \n        // Moving jaw\n        translate([-15, 0, 0])\n            difference() {\n                cube([10, 20, 8], center=true);\n                // Inner relief\n                translate([-5+wall/2, 0, -4+wall]) \n                    cube([wall, 16, 8-wall*2], center=true);\n            }\n    }\n}\n\n/* ---------- RENDER ---------- */\ncaliper();",
    "renders": true
  },
  {
    "vehicle": "research",
    "openscad_code": "// Realistic Research Microscope - 3D Printable\n// Medium complexity model with functional accuracy\n\n// Overall dimensions approximately 70mm tall\n\n// Base module\nmodule microscope_base() {\n    // Main base platform\n    translate([0, 0, 0])\n        cube([40, 30, 5], center = true);\n    \n    // Front feet\n    for(x = [-15, 15]) {\n        translate([x, -10, -2.5])\n            cylinder(h = 5, r = 4, $fn = 20);\n    }\n    \n    // Rear feet\n    for(x = [-15, 15]) {\n        translate([x, 10, -2.5])\n            cylinder(h = 5, r = 4, $fn = 20);\n    }\n}\n\n// Illuminator module\nmodule illuminator() {\n    // LED housing\n    translate([0, -20, 2.5])\n        cube([15, 8, 10], center = true);\n    \n    // LED lens\n    translate([0, -20, 8])\n        cylinder(h = 3, r1 = 5, r2 = 4, $fn = 20);\n}\n\n// Stage module\nmodule stage() {\n    // Stage platform\n    translate([0, 0, 12])\n        cube([25, 25, 2], center = true);\n    \n    // Stage clips\n    for(x = [-8, 8]) {\n        translate([x, 0, 14])\n            cube([2, 15, 3], center = true);\n    }\n    \n    // Stage hole\n    translate([0, 0, 12])\n        cylinder(h = 3, r = 8, $fn = 32);\n}\n\n// Objective turret\nmodule objective_turret() {\n    // Turret disk\n    translate([0, 0, 30])\n        cylinder(h = 8, r = 12, $fn = 32);\n    \n    // Objective lenses\n    for(i = [0:2]) {\n        rotate([0, 0, i * 120])\n            translate([8, 0, 30])\n                cylinder(h = 15, r1 = 4, r2 = 3, $fn = 16);\n    }\n}\n\n// Arm module\nmodule microscope_arm() {\n    // Main arm\n    translate([0, 0, 0])\n        difference() {\n            // Arm body\n            translate([0, 0, 22])\n                cube([8, 15, 30], center = true);\n            \n            // Light path hole\n            translate([0, 0, 30])\n                cylinder(h = 20, r = 4, $fn = 20);\n        }\n    \n    // Arm curve\n    translate([0, 5, 37])\n        rotate([90, 0, 0])\n            cylinder(h = 10, r = 4, $fn = 20);\n}\n\n// Eyepiece module\nmodule eyepiece() {\n    // Eyepiece tube\n    translate([0, 5, 47])\n        cylinder(h = 15, r1 = 6, r2 = 5, $fn = 20);\n    \n    // Eyepiece lens\n    translate([0, 5, 55])\n        cylinder(h = 3, r = 5.5, $fn = 20);\n    \n    // Eyecup\n    translate([0, 5, 58])\n        cylinder(h = 5, r1 = 5.5, r2 = 7, $fn = 20);\n}\n\n// Focus knobs\nmodule focus_knobs() {\n    // Left knob\n    translate([5, 0, 20])\n        rotate([90, 0, 0])\n            cylinder(h = 8, r = 4, $fn = 16);\n    \n    // Right knob\n    translate([-5, 0, 20])\n        rotate([90, 0, 0])\n            cylinder(h = 8, r = 4, $fn = 16);\n}\n\n// Assembly\nunion() {\n    microscope_base();\n    illuminator();\n    stage();\n    microscope_arm();\n    objective_turret();\n    eyepiece();\n    focus_knobs();\n}",
    "renders": true
  },
  {
    "vehicle": "laboratory",
    "openscad_code": "// Lab Bench Module\nmodule lab_bench() {\n    // Main bench top\n    difference() {\n        cube([40, 20, 2], center=true);\n        translate([0, 0, 1])\n            cube([38, 18, 2], center=true);\n    }\n    \n    // Four legs\n    for(x=[-18, 18])\n        for(y=[-8, 8])\n            translate([x, y, -9])\n                cylinder(h=18, r=1, $fn=16);\n}\n\n// Microscope Module\nmodule microscope() {\n    // Base\n    translate([0, 0, -2])\n        cylinder(h=2, r=4, $fn=32);\n    \n    // Arm\n    translate([0, 0, 0])\n        cylinder(h=10, r=1, $fn=16);\n    \n    // Head\n    translate([0, 0, 10])\n        rotate([90, 0, 0])\n            cylinder(h=3, r=2, $fn=16);\n    \n    // Eyepiece\n    translate([0, 2, 10])\n        rotate([90, 0, 0])\n            cylinder(h=2, r=1, $fn=16);\n    \n    // Stage\n    translate([0, 0, 4])\n        cube([6, 8, 0.5], center=true);\n}\n\n// Beaker Module\nmodule beaker(radius, height) {\n    difference() {\n        cylinder(h=height, r=radius, $fn=32);\n        translate([0, 0, 0.5])\n            cylinder(h=height, r=radius-1, $fn=32);\n    }\n}\n\n// Test Tube Rack Module\nmodule test_tube_rack() {\n    // Base\n    cube([14, 5, 1], center=true);\n    \n    // Top with holes\n    translate([0, 0, 4])\n        difference() {\n            cube([14, 5, 1], center=true);\n            for(i=[-5, 0, 5])\n                translate([i, 0, -0.5])\n                    cylinder(h=2, r=1.2, $fn=16);\n        }\n    \n    // Support posts\n    for(x=[-6, 6])\n        translate([x, 0, 2])\n            cube([1, 3, 4], center=true);\n}\n\n// Erlenmeyer Flask Module\nmodule flask() {\n    // Base\n    cylinder(h=6, r1=5, r2=2, $fn=32);\n    \n    // Neck\n    translate([0, 0, 6])\n        cylinder(h=4, r=1, $fn=16);\n}\n\n// Computer Monitor Module\nmodule monitor() {\n    // Stand\n    translate([0, 0, -3])\n        cube([4, 2, 3], center=true);\n    \n    // Screen\n    translate([0, 0, 0])\n        cube([8, 1, 6], center=true);\n}\n\n// Main Assembly\nunion() {\n    // Lab bench centered\n    lab_bench();\n    \n    // Microscope on left side\n    translate([-15, -5, 1])\n        microscope();\n    \n    // Beakers on right\n    translate([10, 5, 1])\n        beaker(2.5, 4);\n    translate([15, 5, 1])\n        beaker(2, 3);\n    \n    // Test tube rack at back\n    translate([0, 8, 1])\n        test_tube_rack();\n    \n    // Flask in middle\n    translate([5, -5, 1])\n        flask();\n    \n    // Computer monitor\n    translate([-10, 5, 1])\n        monitor();\n}",
    "renders": true
  },
  {
    "vehicle": "nuclear",
    "openscad_code": "// Nuclear Reactor Cooling Tower with Realistic Details\n// Medium complexity model for 3D printing\n\n// Main parameters\ntower_height = 70;\nbase_diameter = 40;\ntop_diameter = 30;\nwall_thickness = 2;\nbase_height = 8;\n\n// Cooling tower module\nmodule cooling_tower() {\n    difference() {\n        // Outer shell\n        union() {\n            // Base cylinder\n            cylinder(h=base_height, d=base_diameter, $fn=100);\n            \n            // Main hyperboloid shape\n            for(i=[0:1:tower_height-base_height]) {\n                h = tower_height - base_height;\n                t = i / h;\n                diameter = base_diameter + (top_diameter - base_diameter) * sin(t * 90);\n                translate([0, 0, base_height + i])\n                    cylinder(h=1.2, d1=diameter, d2=diameter + (top_diameter - base_diameter)/h * 1.2, $fn=100);\n            }\n        }\n        \n        // Hollow interior\n        translate([0, 0, -1])\n            cylinder(h=tower_height+2, d=base_diameter-wall_thickness*2, $fn=100);\n    }\n}\n\n// Cooling water distribution ring\nmodule water_ring() {\n    translate([0, 0, tower_height - 10])\n        difference() {\n            cylinder(h=3, d=top_diameter + 8, $fn=100);\n            cylinder(h=3.5, d=top_diameter + 4, $fn=100);\n        }\n}\n\n// Support legs\nmodule support_legs() {\n    leg_height = 15;\n    leg_width = 4;\n    \n    for(angle=[0:120:359]) {\n        rotate([0, 0, angle])\n            translate([base_diameter/2 - leg_width/2, -leg_width/2, 0])\n                cube([leg_width, leg_width, leg_height]);\n    }\n}\n\n// Ladder system\nmodule ladder() {\n    ladder_width = 3;\n    rung_spacing = 5;\n    rung_count = floor(tower_height / rung_spacing) - 2;\n    \n    translate([base_diameter/2 - wall_thickness - ladder_width/2, 0, 0])\n        union() {\n            // Side rails\n            for(side=[-ladder_width/2, ladder_width/2]) {\n                translate([side, 0, base_height])\n                    cube([wall_thickness, wall_thickness, tower_height - base_height]);\n            }\n            \n            // Rungs\n            for(i=[0:1:rung_count]) {\n                translate([-ladder_width/2, 0, base_height + i * rung_spacing])\n                    cube([ladder_width, wall_thickness, wall_thickness]);\n            }\n        }\n}\n\n// Base platform\nmodule platform() {\n    difference() {\n        cylinder(h=2, d=base_diameter + 20, $fn=100);\n        cylinder(h=2.5, d=base_diameter + 10, $fn=100);\n    }\n}\n\n// Steam exhaust pipes\nmodule exhaust_pipes() {\n    pipe_radius = 2;\n    pipe_height = 8;\n    pipe_spacing = 10;\n    \n    translate([0, 0, tower_height]) {\n        for(angle=[0:90:359]) {\n            rotate([0, 0, angle])\n                translate([pipe_spacing, 0, 0])\n                    cylinder(h=pipe_height, d=pipe_radius*2, $fn=20);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    platform();\n    translate([0, 0, 2])\n        cooling_tower();\n    water_ring();\n    support_legs();\n    ladder();\n    exhaust_pipes();\n}",
    "renders": true
  },
  {
    "vehicle": "armored",
    "openscad_code": "// Realistic Armored Car\n// Approx 80 mm long, 3D-printable (no steep overhangs, 2 mm walls)\n\n$fn = 36;\n\n// Main body\nmodule body() {\n    // Base hull\n    difference() {\n        hull() {\n            translate([-35,-20,5])  cube([70,40,15]);\n            translate([-30,-18,20]) cube([60,36,8]);\n        }\n        \n        // Driver hatch\n        translate([-6,-12,22]) rotate([0,15,0]) cube([12,24,2]);\n        \n        // Vision slits\n        for (x=[-20,0,20])\n            translate([x,-20.1,12]) rotate([0,30,0]) cube([6,1.5,3]);\n    }\n}\n\n// Turret\nmodule turret() {\n    rotate([0,0,turretAngle]) {\n        // Turret base\n        difference() {\n            cylinder(h=12, r=18);\n            translate([0,0,-0.1]) cylinder(h=12.2, r=15);\n        }\n        \n        // Mantlet\n        translate([18,0,9]) rotate([0,-10,0])\n            difference() {\n                hull() {\n                    cube([10,16,8], center=true);\n                    translate([10,0,0]) sphere(r=4);\n                }\n                // Barrel hole\n                rotate([0,90,0]) cylinder(h=20, r=2.5);\n            }\n        \n        // Commander cupola\n        translate([-10,10,12]) rotate([0,0,45])\n            difference() {\n                cylinder(h=6, r=7);\n                translate([0,0,6]) cylinder(h=1, r=9);\n            }\n    }\n}\n\n// Wheels\nmodule wheel() {\n    difference() {\n        cylinder(h=10, r=8);\n        translate([0,0,-0.1]) cylinder(h=10.2, r=4.5);\n    }\n}\n\n// Suspension arm\nmodule suspensionArm() {\n    hull() {\n        cube([12,4,3]);\n        translate([12,0,-5]) cube([4,4,10]);\n    }\n}\n\n// Assemble vehicle\nturretAngle = 45;\n\nunion() {\n    body();\n    \n    translate([0,0,20]) turret();\n    \n    // Front wheels\n    for (y=[-22,22])\n        translate([-28,y,0]) rotate([0,90,0]) wheel();\n    \n    // Rear wheels\n    for (y=[-22,22])\n        translate([28,y,0]) rotate([0,90,0]) wheel();\n    \n    // Suspension arms\n    for (x=[-28,28])\n        for (y=[-22,22])\n            translate([x,y,5]) suspensionArm();\n}",
    "renders": true
  },
  {
    "vehicle": "military",
    "openscad_code": "// Military Tank - Realistic Medium Complexity\n// Dimensions: ~80mm long, ~40mm wide, ~35mm high\n\n$fn = 30;\n\nmodule hull() {\n    difference() {\n        // Main hull body\n        translate([-25, -20, 0])\n            cube([50, 40, 15]);\n        \n        // Front slope\n        translate([-25, -20, 15])\n            rotate([0, -30, 0])\n                cube([20, 40, 15]);\n        \n        // Track cutouts left\n        for(side = [-1, 1]) {\n            translate([-28, side * 15, 0])\n                cube([56, 12, 10]);\n        }\n    }\n}\n\nmodule turret() {\n    rotate([0, 0, 315]) {\n        difference() {\n            // Turret base\n            cylinder(h = 10, r = 18);\n            \n            // Commander hatch\n            translate([0, 10, 7])\n                rotate([0, 90, 0])\n                    cylinder(h = 12, r = 5);\n        }\n        \n        // Gun mantlet\n        translate([0, -15, 5])\n            rotate([0, -5, 0])\n                cube([8, 30, 8]);\n        \n        // Main gun barrel\n        translate([0, -40, 6])\n            cylinder(h = 35, r1 = 3.5, r2 = 2.5);\n        \n        // Machine gun\n        translate([8, -10, 9])\n            rotate([0, 0, 90])\n                cylinder(h = 12, r = 1.5);\n    }\n}\n\nmodule tracks() {\n    for(side = [-1, 1]) {\n        // Track segments\n        for(i = [-20:4:20]) {\n            translate([i, side * 19, 5])\n                cube([3.5, 4, 6]);\n        }\n        \n        // Drive sprocket\n        translate([-25, side * 19, 5])\n            rotate([90, 0, 0])\n                cylinder(h = 6, r = 8);\n        \n        // Idler wheel\n        translate([25, side * 19, 5])\n            rotate([90, 0, 0])\n                cylinder(h = 6, r = 6);\n        \n        // Road wheels\n        for(i = [-15:10:15]) {\n            translate([i, side * 19, 5])\n                rotate([90, 0, 0])\n                    cylinder(h = 6, r = 5);\n        }\n    }\n}\n\nmodule exhaust() {\n    // Exhaust pipe\n    translate([25, 0, 15])\n        rotate([0, 90, 0])\n            cylinder(h = 15, r = 2);\n    \n    // Exhaust muffler\n    translate([30, 0, 15])\n        cube([8, 4, 4]);\n}\n\nmodule details() {\n    // Headlights\n    for(side = [-1, 1]) {\n        translate([-20, side * 12, 12])\n            sphere(r = 2);\n    }\n    \n    // Storage boxes\n    translate([10, -15, 15])\n        cube([12, 6, 4]);\n    \n    // Antenna\n    translate([15, 15, 20])\n        cylinder(h = 20, r = 0.8);\n}\n\n// Assembly\nunion() {\n    hull();\n    \n    translate([0, 0, 15])\n        turret();\n    \n    tracks();\n    \n    exhaust();\n    \n    details();\n}",
    "renders": true
  },
  {
    "vehicle": "troop",
    "openscad_code": "// Realistic Troop Figure - Medium Complexity\n// Height: 70mm, Base footprint: 30mm x 30mm\n\nmodule troop_figure() {\n    // Base platform\n    union() {\n        difference() {\n            cube([30, 30, 4], center=true);\n            translate([0, 0, -2])\n                cube([26, 26, 4], center=true);\n        }\n        \n        // Left leg\n        translate([-6, -2, 0])\n            leg();\n        \n        // Right leg\n        translate([6, -2, 0])\n            leg();\n        \n        // Torso\n        translate([0, 0, 20])\n            torso();\n        \n        // Head\n        translate([0, 0, 42])\n            head();\n        \n        // Left arm\n        translate([-11, 0, 25])\n            arm();\n        \n        // Right arm\n        translate([11, 0, 25])\n            mirror([1,0,0])\n                arm();\n        \n        // Helmet details\n        translate([0, 0, 48])\n            helmet();\n        \n        // Backpack\n        translate([0, -8, 25])\n            backpack();\n    }\n}\n\nmodule leg() {\n    // Upper leg\n    cylinder(h=15, d=6, center=true);\n    \n    // Lower leg\n    translate([0, 0, -10])\n        cylinder(h=15, d=5, center=true);\n    \n    // Boot\n    translate([0, 0, -20])\n        difference() {\n            cube([6, 8, 10], center=true);\n            translate([0, 2, 2])\n                cube([4, 4, 6], center=true);\n        }\n}\n\nmodule torso() {\n    // Main torso\n    difference() {\n        cube([12, 8, 22], center=true);\n        translate([0, 5, 0])\n            cube([10, 2, 20], center=true);\n    }\n    \n    // Chest armor\n    translate([0, 0, 5])\n        cube([14, 10, 8], center=true);\n    \n    // Belt\n    translate([0, 0, -6])\n        cube([14, 9, 4], center=true);\n}\n\nmodule head() {\n    // Neck\n    cylinder(h=4, d=5, center=true);\n    \n    // Head sphere\n    translate([0, 0, 6])\n        sphere(d=12);\n    \n    // Face\n    translate([0, 5.8, 6])\n        cube([8, 0.5, 10], center=true);\n}\n\nmodule arm() {\n    // Upper arm\n    rotate([0, 0, -20])\n        cylinder(h=12, d=4, center=true);\n    \n    // Forearm\n    translate([0, -8, -7])\n        rotate([0, 0, -20])\n            cylinder(h=12, d=3.5, center=true);\n    \n    // Hand\n    translate([0, -14, -12])\n        sphere(d=4);\n    \n    // Rifle\n    translate([0, -20, -12])\n        rifle();\n}\n\nmodule rifle() {\n    // Main body\n    cube([2, 20, 2], center=true);\n    \n    // Stock\n    translate([0, 10, -2])\n        cube([3, 6, 4], center=true);\n    \n    // Barrel\n    translate([0, -10, 0])\n        cylinder(h=10, d=1.5, center=true);\n    \n    // Magazine\n    translate([0, -3, -3])\n        cube([1, 4, 6], center=true);\n}\n\nmodule helmet() {\n    // Main helmet\n    difference() {\n        sphere(d=14);\n        translate([0, 7, 0])\n            sphere(d=13.5);\n    }\n    \n    // Visor rim\n    difference() {\n        translate([0, 2, 0])\n            sphere(d=14.5);\n        translate([0, 2, -1])\n            sphere(d=13.5);\n    }\n    \n    // Side details\n    for(i=[-1, 1]) {\n        translate([i*7, 0, 0])\n            cube([2, 2, 4], center=true);\n    }\n}\n\nmodule backpack() {\n    // Main pack\n    difference() {\n        cube([10, 6, 12], center=true);\n        translate([0, -3, 0])\n            cube([8, 3, 10], center=true);\n    }\n    \n    // Top antenna\n    translate([2, 0, 7])\n        cylinder(h=8, d=1, center=true);\n}\n\n// Render the complete figure\ntroop_figure();",
    "renders": true
  },
  {
    "vehicle": "prison",
    "openscad_code": "// Prison Complex - Realistic Style, Medium Complexity\n// Overall dimensions: ~80 x 60 x 30 mm\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main building block\nmodule cell_block() {\n    // Main structure\n    difference() {\n        cube([40, 30, 20]);\n        \n        // Hollow out interior\n        translate([wall, wall, wall])\n            cube([40-wall*2, 30-wall*2, 20-wall*2]);\n    }\n    \n    // Cell windows - 4 cells per block\n    for (i = [0:1]) {\n        for (j = [0:1]) {\n            translate([10 + i*20, 2, 12]) {\n                difference() {\n                    cube([8, wall, 6]);\n                    translate([wall, 0, wall])\n                        cube([8-wall*2, wall+0.1, 6-wall*2]);\n                }\n            }\n        }\n    }\n}\n\n// Watch tower\nmodule watch_tower() {\n    // Base\n    cylinder(h=15, r1=8, r2=6);\n    \n    // Top platform\n    translate([0, 0, 15])\n        difference() {\n            cylinder(h=3, r1=8, r2=8);\n            translate([0, 0, -0.1])\n                cylinder(h=3.2, r1=6, r2=6);\n        }\n    \n    // Roof\n    translate([0, 0, 18])\n        cylinder(h=2, r1=10, r2=8);\n    \n    // Guard rail posts\n    for (i = [0:5]) {\n        rotate([0, 0, i*60])\n            translate([7, 0, 15])\n                cylinder(h=3, r=0.5);\n    }\n}\n\n// Perimeter wall section\nmodule wall_section(length) {\n    difference() {\n        cube([length, 4, 15]);\n        translate([wall, wall, 0])\n            cube([length-wall*2, 4-wall*2, 15]);\n    }\n    \n    // Barbed wire posts\n    for (i = [5:length-5]) {\n        if (i % 5 == 0) {\n            translate([i, 2, 15])\n                cylinder(h=3, r=0.5);\n            translate([i, 2, 18])\n                sphere(r=1);\n        }\n    }\n}\n\n// Main gate\nmodule main_gate() {\n    // Gate structure\n    difference() {\n        cube([8, 6, 12]);\n        translate([wall, wall, 0])\n            cube([8-wall*2, 6-wall*2, 12]);\n    }\n    \n    // Gate bars\n    for (i = [1.5:1.5:6.5]) {\n        translate([i, wall, 0])\n            cube([0.5, 6-wall*2, 12]);\n    }\n}\n\n// Yard\nmodule prison_yard() {\n    // Ground\n    translate([-5, -5, -0.5])\n        cube([70, 50, 1]);\n    \n    // Yard walls\n    wall_section(60);\n    translate([0, 40, 0])\n        wall_section(60);\n    translate([0, 4, 0])\n        rotate([0, 0, 90])\n            wall_section(36);\n    translate([56, 4, 0])\n        rotate([0, 0, 90])\n            wall_section(36);\n}\n\n// Assembly\ntranslate([5, 5, 0])\n    cell_block();\n\ntranslate([50, 20, 0])\n    watch_tower();\n\ntranslate([5, 45, 0])\n    cell_block();\n\ntranslate([5, -5, 0])\n    prison_yard();\n\ntranslate([20, 39, 0])\n    main_gate();",
    "renders": true
  },
  {
    "vehicle": "circus",
    "openscad_code": "// Circus scene with tent, stands, entrance gate, flags and base\n// Designed for 3D printing, no overhangs >45°, 1mm wall thickness\n\n// Overall dimensions: 80 x 60 x 45 mm\n\nmodule circus_scene() {\n    // Base platform\n    color(\"tan\")\n    translate([0,0,-1])\n        cube([80,60,2], center=true);\n\n    // Main circus tent\n    union() {\n        // Tent body - octagonal prism\n        color(\"red\")\n        tent_body();\n\n        // Tent roof - cone\n        color(\"white\")\n        tent_roof();\n\n        // Flag on top\n        color(\"gold\")\n        translate([0,0,32])\n            rotate([0,0,30*sin($t*360)])\n            flag_pole();\n\n        // Entrance gate\n        color(\"yellow\")\n        translate([0,-30,0])\n            entrance_gate();\n\n        // Stands on sides\n        color(\"gray\")\n        translate([-35,0,0])\n            rotate([0,0,90])\n            stands();\n        color(\"gray\")\n        translate([35,0,0])\n            rotate([0,0,-90])\n            stands();\n    }\n}\n\nmodule tent_body() {\n    // Octagonal base using difference for walls\n    difference() {\n        cylinder(h=20, r1=25, r2=25, $fn=8);\n        cylinder(h=22, r1=24, r2=24, $fn=8);\n    }\n    \n    // Stripes pattern using rotated cubes\n    for(i=[0:7]) {\n        rotate([0,0,i*45])\n        translate([0,0,10])\n        color(\"white\")\n        cube([2,25,20], center=true);\n    }\n}\n\nmodule tent_roof() {\n    // Main cone\n    cylinder(h=15, r1=25, r2=0, $fn=32);\n    \n    // Roof ball\n    translate([0,0,15])\n        sphere(r=2);\n}\n\nmodule flag_pole() {\n    // Pole\n    cylinder(h=10, r=0.5, $fn=8);\n    \n    // Flag\n    translate([0,2.5,7.5])\n        rotate([90,0,0])\n        cube([5,3,0.5]);\n}\n\nmodule entrance_gate() {\n    // Main arch\n    difference() {\n        cube([20,2,20], center=true);\n        translate([0,2,10])\n            cylinder(h=5, r=8, $fn=32);\n    }\n    \n    // Side pillars\n    translate([-10,0,0])\n        cube([2,2,20], center=true);\n    translate([10,0,0])\n        cube([2,2,20], center=true);\n    \n    // Welcome sign\n    translate([0,2,15])\n        cube([18,0.5,4], center=true);\n}\n\nmodule stands() {\n    // Simple bleachers\n    for(i=[0:3]) {\n        translate([0,0,i*3])\n        cube([30,2,2], center=true);\n    }\n    \n    // Back wall\n    translate([0,-2,6])\n        cube([30,0.5,12], center=true);\n}\n\n// Render the scene\ncircus_scene();",
    "renders": true
  },
  {
    "vehicle": "exhibition",
    "openscad_code": "// Exhibition Booth Model - Trade Fair Display\n// Realistic style, medium complexity\n\n// Main booth dimensions\nbooth_width = 80;\nbooth_depth = 40;\nbooth_height = 50;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Floor platform\nmodule booth_floor() {\n    difference() {\n        // Main floor\n        translate([0, 0, 0])\n            cube([booth_width, booth_depth, 3], center=true);\n        \n        // Cable management hole\n        translate([20, 0, -1])\n            cylinder(h=5, r=5, center=true);\n    }\n}\n\n// Back wall with company logo area\nmodule back_wall() {\n    difference() {\n        // Main wall structure\n        translate([0, -booth_depth/2 + wall_thickness/2, booth_height/2])\n            cube([booth_width, wall_thickness, booth_height], center=true);\n        \n        // Logo display cutout\n        translate([0, -booth_depth/2, booth_height/2 + 5])\n            cube([40, wall_thickness + 1, 25], center=true);\n        \n        // Multiple poster mounting holes\n        for(x = [-30, -10, 10, 30]) {\n            translate([x, -booth_depth/2, 35])\n                cylinder(h=wall_thickness + 1, r=1.5, center=true);\n        }\n    }\n}\n\n// Side walls\nmodule side_wall(side) {\n    translate([side * booth_width/2 - side * wall_thickness/2, 0, booth_height/2])\n        cube([wall_thickness, booth_depth, booth_height], center=true);\n}\n\n// Display counter\nmodule display_counter() {\n    // Counter base\n    difference() {\n        translate([0, 5, 8])\n            cube([30, 15, 16], center=true);\n        \n        // Storage compartment\n        translate([0, 5, 12])\n            cube([25, 10, 10], center=true);\n    }\n    \n    // Counter top\n    translate([0, 5, 17])\n        cube([32, 17, 1], center=true);\n    \n    // Product display stands\n    for(x = [-10, 0, 10]) {\n        translate([x, 5, 18])\n            cylinder(h=2, r=3, center=true);\n    }\n}\n\n// Literature holder\nmodule literature_holder() {\n    // Main holder\n    difference() {\n        translate([-25, -5, 10])\n            cube([15, 8, 12], center=true);\n        \n        // Magazine slots\n        for(z = [5, 9, 13]) {\n            translate([-25, -5, z])\n                cube([13, 6, 2], center=true);\n        }\n    }\n}\n\n// Support poles for banner\nmodule banner_pole(x_pos) {\n    // Vertical pole\n    translate([x_pos, -booth_depth/2 + 5, booth_height/2])\n        cylinder(h=booth_height, r=2, center=true);\n    \n    // Base plate\n    translate([x_pos, -booth_depth/2 + 5, 0])\n        cylinder(h=1, r=4, center=true);\n}\n\n// Banner between poles\nmodule banner() {\n    translate([0, -booth_depth/2 + 7, booth_height - 5])\n        cube([booth_width - 10, 1, 8], center=true);\n}\n\n// Lighting rail\nmodule lighting() {\n    translate([0, 0, booth_height - 2])\n        cube([booth_width - 10, 2, 2], center=true);\n    \n    // Spot lights\n    for(x = [-30, -15, 0, 15, 30]) {\n        translate([x, 0, booth_height - 1])\n            cylinder(h=3, r=1.5, center=true);\n    }\n}\n\n// Carpet texture simulation\nmodule carpet() {\n    difference() {\n        translate([0, 0, 1.5])\n            cube([booth_width - 4, booth_depth - 4, 0.5], center=true);\n        \n        // Carpet pattern holes\n        for(x = [-35:5:35]) {\n            for(y = [-15:5:15]) {\n                translate([x, y, 1.5])\n                    cylinder(h=1, r=0.5, center=true);\n            }\n        }\n    }\n}\n\n// Assemble the complete booth\nunion() {\n    // Main structure\n    booth_floor();\n    back_wall();\n    side_wall(1);\n    side_wall(-1);\n    \n    // Furniture and accessories\n    display_counter();\n    literature_holder();\n    \n    // Banner system\n    banner_pole(booth_width/2 - 10);\n    banner_pole(-booth_width/2 + 10);\n    banner();\n    \n    // Lighting\n    lighting();\n    \n    // Details\n    carpet();\n}",
    "renders": true
  },
  {
    "vehicle": "concert",
    "openscad_code": "// Concert Stage Model - Realistic Medium Complexity\n// 3D printable concert scene with stage, crowd, and equipment\n\n// Overall dimensions\nstage_width = 60;\nstage_depth = 40;\nstage_height = 20;\ncrowd_depth = 30;\nwall_thickness = 2;\n\n// Stage platform\nmodule stage_platform() {\n    difference() {\n        // Main stage\n        cube([stage_width, stage_depth, stage_height]);\n        \n        // Hollow underneath for 3D printing\n        translate([wall_thickness, wall_thickness, 0])\n            cube([stage_width-wall_thickness*2, stage_depth-wall_thickness*2, stage_height-2]);\n    }\n}\n\n// Stage back wall with speakers\nmodule back_wall() {\n    translate([0, stage_depth-stage_height/2, stage_height/2]) {\n        // Wall structure\n        cube([stage_width, wall_thickness, stage_height*2]);\n        \n        // Speaker stacks\n        for(x = [10, 30, 50]) {\n            translate([x, 0, stage_height/2]) {\n                // Speaker cabinet\n                color(\"black\") cube([8, wall_thickness+4, 12]);\n                \n                // Woofer cones\n                translate([2, 2, 4]) sphere(1.5);\n                translate([6, 2, 4]) sphere(1.5);\n                translate([2, 2, 8]) sphere(1.5);\n                translate([6, 2, 8]) sphere(1.5);\n            }\n        }\n    }\n}\n\n// Microphone stand\nmodule mic_stand() {\n    translate([stage_width/2, stage_depth/3, stage_height]) {\n        // Base\n        cylinder(h=1, r=4);\n        \n        // Pole\n        translate([0, 0, 1]) cylinder(h=15, r=0.5);\n        \n        // Mic head\n        translate([0, 2, 15]) sphere(1.5);\n    }\n}\n\n// Drum kit\nmodule drum_kit() {\n    translate([stage_width/2+15, stage_depth*0.7, stage_height]) {\n        // Bass drum\n        rotate([90, 0, 0]) cylinder(h=8, r=4);\n        \n        // Snare\n        translate([0, 10, 5]) rotate([90, 0, 0]) cylinder(h=3, r=3);\n        \n        // Floor tom\n        translate([8, 5, 0]) rotate([90, 0, 0]) cylinder(h=6, r=5);\n        \n        // Cymbals\n        translate([5, 12, 8]) rotate([60, 0, 0]) cylinder(h=0.5, r=6);\n        translate([-5, 12, 8]) rotate([60, 0, 0]) cylinder(h=0.5, r=5);\n    }\n}\n\n// Audience member\nmodule person(height) {\n    // Body\n    color(\"darkblue\") translate([0, 0, 0]) cube([3, 2, height]);\n    \n    // Head\n    color(\"beige\") translate([1, 1, height+1]) sphere(1.5);\n    \n    // Arms up cheering\n    color(\"darkblue\") translate([-1, 0, height-2]) cube([1, 1, 4]);\n    color(\"darkblue\") translate([3, 0, height-2]) cube([1, 1, 4]);\n}\n\n// Crowd\nmodule crowd() {\n    for(y = [0:5:crowd_depth-5]) {\n        for(x = [0:5:stage_width-5]) {\n            translate([x+2.5, -y-stage_height/2, 0]) {\n                person(5 + sin(x*y)*2);\n            }\n        }\n    }\n}\n\n// Lighting rig\nmodule lighting_rig() {\n    translate([stage_width/2, stage_depth/2, stage_height+15]) {\n        // Cross bar\n        cube([stage_width+10, 2, 2]);\n        \n        // Spotlights\n        for(x = [-20:10:20]) {\n            translate([x, 0, -5]) {\n                color(\"gray\") cylinder(h=3, r=2);\n                color(\"yellow\") translate([0, 0, -6]) sphere(2);\n            }\n        }\n    }\n}\n\n// Main assembly\nstage_platform();\nback_wall();\nmic_stand();\ndrum_kit();\ncrowd();\nlighting_rig();",
    "renders": true
  },
  {
    "vehicle": "theater",
    "openscad_code": "// Realistic medium-complexity theater model\n// Approx 80mm wide, 60mm deep, 50mm tall\n// Wall thickness = 2mm\n\n$fn = 32;\n\nmodule base() {\n    difference() {\n        // Main floor slab\n        cube([80, 60, 4], center = true);\n        // Drainage grooves\n        for (x = [-30:20:30]) {\n            translate([x, 0, 2])\n                cube([2, 58, 0.5], center = true);\n        }\n    }\n}\n\nmodule seating() {\n    for (row = [0:3]) {\n        translate([0, -20 + row * 8, 2.5 + row * 1.5]) {\n            difference() {\n                cube([70, 6, 1.5], center = true);\n                // Seat indents\n                for (seat = [-30:10:30]) {\n                    translate([seat, 0, 0.5])\n                        cube([8, 5, 1.5], center = true);\n                }\n            }\n        }\n    }\n}\n\nmodule stage() {\n    translate([0, 28, 0]) {\n        union() {\n            // Stage platform\n            cube([40, 12, 6], center = true);\n            // Proscenium arch\n            translate([0, 8, 3])\n                difference() {\n                    cube([36, 2, 20], center = true);\n                    translate([0, 0, 5])\n                        cube([30, 3, 18], center = true);\n                }\n            // Curtains (simple)\n            translate([-13, 8, 3])\n                cube([2, 2.1, 14], center = true);\n            translate([13, 8, 3])\n                cube([2, 2.1, 14], center = true);\n        }\n    }\n}\n\nmodule walls() {\n    difference() {\n        // Outer shell\n        translate([0, 0, 12])\n            cube([78, 58, 24], center = true);\n        // Interior cavity\n        translate([0, 0, 14])\n            cube([74, 54, 30], center = true);\n    }\n}\n\nmodule columns() {\n    for (side = [-1, 1]) {\n        translate([side * 35, 15, 12]) {\n            // Base\n            cylinder(h = 2, r = 4, center = true);\n            // Shaft\n            translate([0, 0, 12])\n                cylinder(h = 20, r = 3.5, center = true);\n            // Capital\n            translate([0, 0, 23])\n                cylinder(h = 2, r = 4.5, center = true);\n        }\n    }\n}\n\nmodule roof() {\n    translate([0, 0, 36]) {\n        difference() {\n            // Main roof\n            cube([82, 62, 4], center = true);\n            // Gable ends\n            translate([0, 0, 2])\n                rotate([90, 0, 0])\n                    cylinder(h = 45, r = 30, center = true);\n        }\n    }\n}\n\nmodule entrance() {\n    translate([0, -30, 10]) {\n        difference() {\n            // Entrance arch\n            cube([20, 2, 16], center = true);\n            // Doorway\n            translate([0, 0, -2])\n                cube([12, 2.1, 12], center = true);\n            // Windows\n            for (win = [-6, 6]) {\n                translate([win, 0, 4])\n                    cube([4, 2.1, 6], center = true);\n            }\n        }\n    }\n}\n\n// Assemble the theater\nbase();\nseating();\nstage();\nwalls();\ncolumns();\nroof();\nentrance();",
    "renders": true
  },
  {
    "vehicle": "planetarium",
    "openscad_code": "// Planetarium model with medium complexity and realistic appearance\n// Overall dimensions: 80mm diameter dome on 60mm diameter base\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Main body\nmodule planetarium_base() {\n    // Cylindrical base\n    difference() {\n        cylinder(h=15, d=60, center=true, $fn=64);\n        translate([0,0,7.5])\n            cylinder(h=15.1, d=56, center=true, $fn=64);\n    }\n    \n    // Entrance ramp\n    translate([0, 30, 0])\n    rotate([0, 0, 0])\n    union() {\n        // Ramp\n        translate([0, 7.5, -7.5])\n            scale([1, 0.5, 1])\n                cylinder(h=15, d=20, center=true, $fn=32);\n        \n        // Entrance arch\n        translate([0, 15, 0])\n        difference() {\n            cube([15, 15, 20], center=true);\n            translate([0, -7.5, 0])\n                cube([11, 15.1, 16], center=true);\n        }\n    }\n}\n\n// Main dome\nmodule dome() {\n    difference() {\n        // Outer dome\n        sphere(d=80, $fn=128);\n        \n        // Cut bottom flat\n        translate([0, 0, -40.1])\n            cube([100, 100, 80], center=true);\n        \n        // Inner hollow\n        sphere(d=80-wall_thickness*2, $fn=128);\n    }\n}\n\n// Structural ribs\nmodule dome_ribs() {\n    for(i=[0:30:360]) {\n        rotate([0, 0, i])\n        translate([0, 0, 0])\n        difference() {\n            cube([2, 40, 40], center=true);\n            translate([0, 0, -20])\n                sphere(d=80-wall_thickness*2-0.1, $fn=128);\n        }\n    }\n}\n\n// Telescope dome on top\nmodule telescope_dome() {\n    translate([0, 0, 40])\n    union() {\n        // Cylindrical base\n        cylinder(h=8, d=25, center=true, $fn=32);\n        \n        // Dome top\n        translate([0, 0, 4])\n            sphere(d=25, $fn=32);\n        \n        // Slit opening\n        translate([0, 12.5, 4])\n        difference() {\n            cube([2, 25, 8], center=true);\n            translate([0, 0, 4])\n                sphere(d=25-0.1, $fn=32);\n        }\n    }\n}\n\n// Support pillars around base\nmodule pillars() {\n    for(i=[0:45:360-45]) {\n        rotate([0, 0, i])\n        translate([25, 0, 0])\n        cylinder(h=15, d=4, center=true, $fn=16);\n    }\n}\n\n// Combine all parts\nunion() {\n    // Base structure\n    planetarium_base();\n    \n    // Support pillars\n    pillars();\n    \n    // Main dome\n    translate([0, 0, 7.5])\n    dome();\n    \n    // Structural ribs\n    translate([0, 0, 7.5])\n    dome_ribs();\n    \n    // Telescope dome\n    telescope_dome();\n}",
    "renders": true
  },
  {
    "vehicle": "library",
    "openscad_code": "// Realistic Library Building - 3D Printable\n// Medium complexity OpenSCAD model\n\n// Overall dimensions\nlibrary_width = 80;\nlibrary_depth = 60;\nlibrary_height = 50;\nwall_thickness = 2;\n\n// Modules for building components\nmodule foundation() {\n    color(\"lightgray\")\n    translate([-1, -1, -1])\n    cube([library_width+2, library_depth+2, 3]);\n}\n\nmodule walls() {\n    color(\"beige\")\n    union() {\n        // Front wall with entrance\n        difference() {\n            translate([0, 0, 0])\n            cube([library_width, wall_thickness, library_height]);\n            \n            // Entrance arch\n            translate([library_width/2-8, -1, 0])\n            cube([16, wall_thickness+2, 20]);\n            \n            // Arch top\n            translate([library_width/2-8, -1, 19])\n            cylinder(h=wall_thickness+2, r=8, $fn=20);\n        }\n        \n        // Back wall\n        translate([0, library_depth-wall_thickness, 0])\n        cube([library_width, wall_thickness, library_height]);\n        \n        // Left wall\n        translate([0, wall_thickness, 0])\n        cube([wall_thickness, library_depth-wall_thickness*2, library_height]);\n        \n        // Right wall\n        translate([library_width-wall_thickness, wall_thickness, 0])\n        cube([wall_thickness, library_depth-wall_thickness*2, library_height]);\n    }\n}\n\nmodule roof() {\n    color(\"saddlebrown\")\n    translate([-2, -2, library_height])\n    cube([library_width+4, library_depth+4, 3]);\n}\n\nmodule windows() {\n    color(\"lightblue\")\n    for(i = [0:1]) {\n        // Front windows\n        translate([15 + i*50, -1, 25])\n        cube([10, wall_thickness+2, 15]);\n        \n        // Back windows\n        translate([15 + i*50, library_depth-wall_thickness, 25])\n        cube([10, wall_thickness+2, 15]);\n        \n        // Side windows\n        translate([-1, 15 + i*30, 25])\n        cube([wall_thickness+2, 10, 15]);\n        \n        translate([library_width-wall_thickness, 15 + i*30, 25])\n        cube([wall_thickness+2, 10, 15]);\n    }\n}\n\nmodule window_frames() {\n    color(\"white\")\n    for(i = [0:1]) {\n        // Front window frames\n        translate([14.5 + i*50, -0.5, 24.5])\n        cube([11, wall_thickness+1, 16]);\n        \n        // Back window frames\n        translate([14.5 + i*50, library_depth-wall_thickness-0.5, 24.5])\n        cube([11, wall_thickness+1, 16]);\n        \n        // Side window frames\n        translate([-0.5, 14.5 + i*30, 24.5])\n        cube([wall_thickness+1, 11, 16]);\n        \n        translate([library_width-wall_thickness-0.5, 14.5 + i*30, 24.5])\n        cube([wall_thickness+1, 11, 16]);\n    }\n}\n\nmodule door() {\n    color(\"brown\")\n    translate([library_width/2-4, -1, 0])\n    cube([8, wall_thickness+2, 18]);\n}\n\nmodule steps() {\n    color(\"darkgray\")\n    for(i = [0:2]) {\n        translate([library_width/2-10-i, -1-i, -1-i])\n        cube([20+i*2, 1, 1]);\n    }\n}\n\nmodule roof_details() {\n    color(\"saddlebrown\")\n    // Chimney\n    translate([library_width-15, library_depth-15, library_height+3])\n    cube([8, 8, 15]);\n    \n    // Roof ridge\n    translate([0, library_depth/2-1, library_height+3])\n    cube([library_width+4, 2, 4]);\n}\n\nmodule books() {\n    color(\"darkred\")\n    for(i = [0:4]) {\n        translate([10 + i*15, wall_thickness+5, 5])\n        rotate([0, 0, 90])\n        cube([3, 8, 30]);\n    }\n    for(i = [0:3]) {\n        translate([library_width-30, wall_thickness+5 + i*10, 5])\n        cube([20, 3, 30]);\n    }\n}\n\n// Assemble the library\nfoundation();\nwalls();\nwindows();\nwindow_frames();\ndoor();\nsteps();\nroof();\nroof_details();\nbooks();",
    "renders": true
  },
  {
    "vehicle": "museum",
    "openscad_code": "// Museum Building - Realistic Medium Complexity\n// Designed for 3D printing (50mm width)\n\n// Overall dimensions\nmuseum_width = 50;\nmuseum_depth = 30;\nmuseum_height = 25;\n\n// Wall thickness for 3D printing\nwall_thickness = 1.5;\n\n// Main building module\nmodule museum_building() {\n    // Base foundation\n    difference() {\n        cube([museum_width, museum_depth, 2], center=true);\n        translate([0, 0, 0.5])\n            cube([museum_width-2, museum_depth-2, 1], center=true);\n    }\n    \n    // Main structure\n    difference() {\n        // Outer walls\n        translate([0, 0, museum_height/2 + 1])\n            cube([museum_width, museum_depth, museum_height], center=true);\n        \n        // Hollow interior\n        translate([0, 0, museum_height/2 + 1])\n            cube([museum_width-wall_thickness*2, museum_depth-wall_thickness*2, museum_height-wall_thickness], center=true);\n    }\n}\n\n// Columns for facade\nmodule columns() {\n    column_diameter = 2;\n    column_height = 20;\n    spacing = 7;\n    \n    for(i = [-2:2]) {\n        translate([i*spacing, museum_depth/2 - 1, 11])\n            cylinder(h=column_height, d=column_diameter, center=false);\n        \n        // Column caps\n        translate([i*spacing, museum_depth/2 - 1, 11+column_height])\n            cylinder(h=1, d=column_diameter+1, center=false);\n    }\n}\n\n// Front steps\nmodule front_steps() {\n    step_width = 20;\n    step_depth = 8;\n    \n    for(i = [1:3]) {\n        translate([0, museum_depth/2 + step_depth/2 - (i-1)*2 - 2, i*1.5])\n            cube([step_width + i*2, step_depth, 1.5], center=true);\n    }\n}\n\n// Roof with sloped design\nmodule roof() {\n    // Main roof\n    translate([0, 0, museum_height + 2])\n        cube([museum_width+2, museum_depth+2, 2], center=true);\n    \n    // Roof ridge\n    translate([0, 0, museum_height + 3])\n        cube([museum_width+2, 1, 1], center=true);\n}\n\n// Windows on sides\nmodule windows() {\n    window_width = 4;\n    window_height = 6;\n    \n    // Left side windows\n    for(i = [-1:1]) {\n        translate([-museum_width/2 + 0.5, i*8, 11])\n            cube([wall_thickness, window_width, window_height], center=true);\n    }\n    \n    // Right side windows\n    for(i = [-1:1]) {\n        translate([museum_width/2 - 0.5, i*8, 11])\n            cube([wall_thickness, window_width, window_height], center=true);\n    }\n    \n    // Front entrance\n    translate([0, museum_depth/2 - 0.5, 11])\n        cube([6, wall_thickness, 8], center=true);\n}\n\n// Entrance portico\nmodule entrance_portico() {\n    // Triangular pediment\n    translate([0, museum_depth/2 - 5, 22])\n        rotate([90, 0, 0])\n            cylinder(h=10, r1=6, r2=0, $fn=3);\n    \n    // Entablature\n    translate([0, museum_depth/2 - 5, 21])\n        cube([16, 1, 2], center=true);\n}\n\n// Assemble the complete museum\nunion() {\n    museum_building();\n    columns();\n    front_steps();\n    roof();\n    windows();\n    entrance_portico();\n}",
    "renders": true
  },
  {
    "vehicle": "school",
    "openscad_code": "// School building with courtyard and playground elements\n// Designed for 3D printing with 1.2mm walls (3 perimeters @ 0.4mm)\n\n// Overall dimensions\nschool_length = 80;\nschool_width = 60;\nschool_height = 25;\n\n// Wall thickness for 3D printing\nwall_thickness = 1.2;\n\n// Main building module\nmodule main_building() {\n    // Base foundation\n    translate([-school_length/2 - 5, -school_width/2 - 5, -1])\n        cube([school_length + 10, school_width + 10, 1]);\n    \n    // Main structure\n    difference() {\n        // Main block\n        translate([-school_length/2, -school_width/2, 0])\n            cube([school_length, school_width, school_height]);\n        \n        // Interior hollow space\n        translate([-school_length/2 + wall_thickness, -school_width/2 + wall_thickness, wall_thickness])\n            cube([school_length - 2*wall_thickness, school_width - 2*wall_thickness, school_height - wall_thickness]);\n    }\n    \n    // Roof with slight overhang\n    translate([-school_length/2 - 2, -school_width/2 - 2, school_height])\n        cube([school_length + 4, school_width + 4, 2]);\n}\n\n// Window module for repetitive use\nmodule window(width, height, depth) {\n    // Window frame\n    difference() {\n        cube([width + wall_thickness, wall_thickness, height + wall_thickness]);\n        translate([wall_thickness/2, -0.1, wall_thickness/2])\n            cube([width, wall_thickness + 0.2, height]);\n    }\n}\n\n// Door module\nmodule door() {\n    // Door frame\n    difference() {\n        cube([10, wall_thickness, 15]);\n        translate([1, -0.1, 1])\n            cube([8, wall_thickness + 0.2, 13]);\n    }\n    \n    // Door knob\n    translate([7.5, wall_thickness/2, 7.5])\n        sphere(r=0.5, $fn=8);\n}\n\n// Chimney\nmodule chimney() {\n    translate([school_length/2 - 15, school_width/2 - 5, school_height + 2])\n        cube([6, 6, 8]);\n}\n\n// School bell tower\nmodule bell_tower() {\n    // Tower base\n    translate([0, -school_width/2 - 8, 0])\n        cylinder(h=school_height + 10, r=5, $fn=8);\n    \n    // Bell housing\n    translate([0, -school_width/2 - 8, school_height + 8])\n        cylinder(h=5, r1=7, r2=5, $fn=8);\n    \n    // Roof\n    translate([0, -school_width/2 - 8, school_height + 13])\n        cylinder(h=5, r1=5, r2=0, $fn=8);\n}\n\n// Courtyard benches\nmodule bench() {\n    // Seat\n    translate([0, 0, 2])\n        cube([10, 3, 0.5]);\n    \n    // Legs\n    for(x = [-4, 4]) {\n        translate([x, 0, 0])\n            cube([1, 3, 2]);\n    }\n}\n\n// Main assembly\nunion() {\n    main_building();\n    chimney();\n    bell_tower();\n    \n    // Front windows\n    for(x = [-30, -15, 0, 15, 30]) {\n        translate([x, school_width/2, 8])\n            rotate([0, 90, 0])\n            window(6, 8, wall_thickness);\n    }\n    \n    // Side windows\n    for(y = [-20, -5, 10, 25]) {\n        translate([school_length/2, y, 8])\n            rotate([0, 90, 0])\n            window(6, 8, wall_thickness);\n    }\n    \n    // Back windows\n    for(x = [-25, -10, 10, 25]) {\n        translate([x, -school_width/2, 8])\n            rotate([0, -90, 0])\n            window(6, 8, wall_thickness);\n    }\n    \n    // Main entrance\n    translate([0, school_width/2, 0])\n        door();\n    \n    // Courtyard benches\n    translate([-20, 0, 0])\n        bench();\n    translate([20, 0, 0])\n        bench();\n    \n    // Flag pole\n    translate([school_length/2 - 10, 0, school_height + 2])\n        cylinder(h=15, r=0.5, $fn=8);\n    \n    // Flag\n    translate([school_length/2 - 10, 0.5, school_height + 16])\n        cube([5, 0.1, 3]);\n}",
    "renders": true
  },
  {
    "vehicle": "college",
    "openscad_code": "// OpenSCAD College Building - Realistic Style, Medium Complexity\n// Designed for 3D printing with 2mm wall thickness\n\nmodule wall_block(x,y,z) {\n    cube([x,y,z], center=true);\n}\n\nmodule window() {\n    difference() {\n        cube([6,2,10], center=true);\n        translate([0,0,1]) cube([4,2.2,8], center=true);\n    }\n}\n\nmodule door() {\n    difference() {\n        cube([12,2,20], center=true);\n        translate([0,0,1]) cube([10,2.2,18], center=true);\n    }\n}\n\nmodule roof_tile(x,y,z) {\n    translate([x,y,z]) scale([1,1.5,0.5]) cylinder(h=4, r=3, center=true);\n}\n\nmodule main_building() {\n    difference() {\n        // Main structure\n        union() {\n            // Ground floor\n            translate([0,0,10]) wall_block(80,60,20);\n            \n            // First floor\n            translate([0,0,30]) wall_block(80,60,20);\n            \n            // Roof\n            translate([0,0,41]) wall_block(84,64,2);\n            translate([0,0,43]) wall_block(88,68,2);\n            \n            // Chimneys\n            translate([-30,20,45]) wall_block(8,8,15);\n            translate([30,20,45]) wall_block(8,8,15);\n        }\n        \n        // Windows ground floor\n        for(i=[-2:2]) {\n            translate([i*15,-31,10]) window();\n        }\n        \n        // Windows first floor\n        for(i=[-2:2]) {\n            translate([i*15,-31,30]) window();\n        }\n        \n        // Side windows\n        for(i=[-1:1]) {\n            translate([-41,i*20,10]) rotate([0,0,90]) window();\n            translate([-41,i*20,30]) rotate([0,0,90]) window();\n            translate([41,i*20,10]) rotate([0,0,90]) window();\n            translate([41,i*20,30]) rotate([0,0,90]) window();\n        }\n        \n        // Entrance\n        translate([0,-31,10]) door();\n    }\n}\n\nmodule tower() {\n    difference() {\n        union() {\n            // Tower base\n            translate([0,0,35]) cylinder(h=70, r=15, center=true);\n            \n            // Tower roof\n            translate([0,0,71]) cylinder(h=15, r=18, center=true);\n            translate([0,0,78]) cylinder(h=5, r=15, center=true);\n            \n            // Spire\n            translate([0,0,85]) cylinder(h=20, r=3, center=true);\n            translate([0,0,96]) sphere(r=5);\n        }\n        \n        // Tower windows\n        for(angle=[0:45:315]) {\n            rotate([0,0,angle]) translate([0,-16,40]) window();\n            rotate([0,0,angle]) translate([0,-16,50]) window();\n            rotate([0,0,angle]) translate([0,-16,60]) window();\n        }\n    }\n}\n\nmodule steps() {\n    for(i=[0:2:10]) {\n        translate([0,-35-i,i]) wall_block(30,4,2);\n    }\n}\n\n// Main assembly\nunion() {\n    // Base platform\n    translate([0,0,0]) wall_block(100,80,2);\n    \n    // Main building\n    translate([0,0,0]) main_building();\n    \n    // Tower\n    translate([50,0,0]) tower();\n    \n    // Entrance steps\n    translate([0,0,0]) steps();\n}",
    "renders": true
  },
  {
    "vehicle": "university",
    "openscad_code": "$fa = 1;\n$fs = 0.5;\n\n// Overall scale factor for easy resizing\nscale_factor = 0.5;\n\n// Main building dimensions\nbuilding_width = 100 * scale_factor;\nbuilding_depth = 60 * scale_factor;\nbuilding_height = 40 * scale_factor;\n\n// Tower dimensions\ntower_width = 30 * scale_factor;\ntower_depth = 30 * scale_factor;\ntower_height = 80 * scale_factor;\n\n// Wall thickness for 3D printing\nwall_thickness = 2 * scale_factor;\n\nmodule main_building() {\n    // Main block\n    union() {\n        // Base structure\n        difference() {\n            cube([building_width, building_depth, building_height], center = true);\n            translate([0, 0, wall_thickness/2])\n                cube([building_width - wall_thickness*2, building_depth - wall_thickness*2, building_height], center = true);\n        }\n        \n        // Entrance portico\n        translate([0, building_depth/2 - wall_thickness, 0])\n            portico();\n        \n        // Windows on front and back\n        for (x = [-building_width/2 + 15*scale_factor : 20*scale_factor : building_width/2 - 15*scale_factor]) {\n            translate([x, building_depth/2 - wall_thickness, 0])\n                window();\n            translate([x, -building_depth/2 + wall_thickness, 0])\n                window();\n        }\n        \n        // Windows on sides\n        for (y = [-building_depth/2 + 15*scale_factor : 20*scale_factor : building_depth/2 - 15*scale_factor]) {\n            translate([building_width/2 - wall_thickness, y, 0])\n                side_window();\n            translate([-building_width/2 + wall_thickness, y, 0])\n                side_window();\n        }\n        \n        // Roof\n        translate([0, 0, building_height/2 + 2.5*scale_factor])\n            cube([building_width + 5*scale_factor, building_depth + 5*scale_factor, 5*scale_factor], center = true);\n    }\n}\n\nmodule portico() {\n    // Entrance columns\n    column_spacing = 15*scale_factor;\n    column_height = 25*scale_factor;\n    \n    for (x = [-column_spacing, 0, column_spacing]) {\n        translate([x, 0, -building_height/2 + column_height/2])\n            cylinder(h = column_height, r = 3*scale_factor, center = true);\n    }\n    \n    // Pediment\n    translate([0, 5*scale_factor, -building_height/2 + column_height + 5*scale_factor])\n        cube([40*scale_factor, 5*scale_factor, 10*scale_factor], center = true);\n}\n\nmodule window() {\n    // Window opening\n    translate([0, 0, 0])\n        cube([8*scale_factor, wall_thickness, 10*scale_factor], center = true);\n}\n\nmodule side_window() {\n    // Side window (rotated)\n    rotate([0, 90, 0])\n        window();\n}\n\nmodule clock_tower() {\n    union() {\n        // Tower base\n        difference() {\n            cube([tower_width, tower_depth, tower_height], center = true);\n            translate([0, 0, wall_thickness/2])\n                cube([tower_width - wall_thickness*2, tower_depth - wall_thickness*2, tower_height], center = true);\n        }\n        \n        // Clock faces\n        for (angle = [0 : 90 : 270]) {\n            rotate([0, 0, angle])\n                translate([tower_width/2 + wall_thickness/2, 0, tower_height/2 - 15*scale_factor])\n                    clock_face();\n        }\n        \n        // Tower roof\n        translate([0, 0, tower_height/2 + 7.5*scale_factor])\n            cylinder(h = 15*scale_factor, r1 = tower_width/2 + 5*scale_factor, r2 = 0, center = true);\n    }\n}\n\nmodule clock_face() {\n    // Clock circle\n    rotate([0, 90, 0])\n        cylinder(h = wall_thickness, r = 8*scale_factor, center = true);\n    \n    // Clock hands\n    rotate([0, 90, 0])\n        cube([15*scale_factor, 1*scale_factor, wall_thickness], center = true);\n    rotate([0, 90, 90])\n        cube([10*scale_factor, 1*scale_factor, wall_thickness], center = true);\n}\n\n// Generate the university model\nunion() {\n    // Main building at center\n    main_building();\n    \n    // Clock tower behind main building\n    translate([0, -building_depth/2 - tower_depth/2 + 10*scale_factor, 0])\n        clock_tower();\n    \n    // Small entrance stairs\n    translate([0, building_depth/2 + 10*scale_factor, -building_height/2 - 2.5*scale_factor])\n        cube([30*scale_factor, 20*scale_factor, 5*scale_factor], center = true);\n}\n\n// Base platform for stability\ntranslate([0, 0, -building_height/2 - 2.5*scale_factor])\n    cube([building_width + 40*scale_factor, building_depth + 40*scale_factor, 5*scale_factor], center = true);",
    "renders": true
  },
  {
    "vehicle": "pharmacy",
    "openscad_code": "// Pharmacy building with green cross sign\n// Wall thickness set for 3D printing (2 mm)\n\nwall_thickness = 2;\nbase_width = 60;\nbase_depth = 40;\nbase_height = 35;\nroof_overhang = 4;\n\n// Main building block\nmodule building() {\n    difference() {\n        // Main box\n        cube([base_width, base_depth, base_height], center=false);\n        // Hollow interior\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            cube([base_width - 2*wall_thickness, base_depth - 2*wall_thickness, base_height - wall_thickness], center=false);\n    }\n}\n\n// Flat roof with slight overhang\nmodule roof() {\n    translate([-roof_overhang/2, -roof_overhang/2, base_height])\n        cube([base_width + roof_overhang, base_depth + roof_overhang, wall_thickness], center=false);\n}\n\n// Door on front face\nmodule door() {\n    door_width = 12;\n    door_height = 22;\n    translate([(base_width - door_width)/2, 0, 0])\n        cube([door_width, wall_thickness, door_height], center=false);\n}\n\n// Windows on sides\nmodule window() {\n    win_w = 10;\n    win_h = 8;\n    translate([wall_thickness, -1, base_height*0.6])\n        cube([win_w, wall_thickness, win_h], center=false);\n}\n\n// Generate side windows using loop\nmodule side_windows() {\n    for (y = [10, 25]) {\n        translate([0, y, 0])\n            window();\n        translate([base_width - 10 - wall_thickness, y, 0])\n            mirror([1,0,0])\n                window();\n    }\n}\n\n// Pharmacy cross sign\nmodule cross_sign() {\n    sign_size = 12;\n    thickness = 2;\n    translate([base_width/2, base_depth + 1, base_height*0.8])\n        rotate([0,90,0])\n        union() {\n            // Vertical bar\n            cube([thickness, sign_size, sign_size], center=true);\n            // Horizontal bar\n            cube([sign_size, thickness, sign_size], center=true);\n        }\n}\n\n// Green cross on sign\nmodule green_cross() {\n    cross_size = 8;\n    bar = 2;\n    translate([base_width/2, base_depth + 2, base_height*0.8])\n        rotate([0,90,0])\n        color(\"green\")\n        union() {\n            cube([bar, cross_size, bar], center=true);\n            cube([cross_size, bar, bar], center=true);\n        }\n}\n\n// Pill bottle on counter (detail)\nmodule pill_bottle() {\n    bottle_h = 8;\n    bottle_r = 3;\n    translate([base_width*0.7, base_depth*0.6, base_height*0.4])\n        cylinder(h=bottle_h, r=bottle_r, $fn=20);\n}\n\n// Assembly\nunion() {\n    building();\n    roof();\n    door();\n    side_windows();\n    cross_sign();\n    green_cross();\n    pill_bottle();\n}",
    "renders": true
  },
  {
    "vehicle": "clinic",
    "openscad_code": "// Clinic Building - Realistic Medium Complexity\n// Designed for 3D printing at ~80mm width\n\n// Building dimensions\nbuilding_width = 80;\nbuilding_depth = 60;\nbuilding_height = 40;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\nmodule main_building() {\n    // Base structure\n    difference() {\n        // Main block\n        cube([building_width, building_depth, building_height]);\n        \n        // Hollow interior\n        translate([wall_thickness, wall_thickness, 0])\n        cube([building_width-2*wall_thickness, building_depth-2*wall_thickness, building_height]);\n    }\n    \n    // Roof overhang\n    translate([-5, -5, building_height])\n    cube([building_width+10, building_depth+10, 3]);\n}\n\nmodule windows() {\n    window_width = 12;\n    window_height = 15;\n    window_depth = wall_thickness;\n    \n    // Front windows\n    for(x = [-30, -10, 10, 30]) {\n        translate([x + building_width/2, building_depth, 15])\n        rotate([0, 0, 0])\n        cube([window_width, window_depth, window_height]);\n    }\n    \n    // Side windows\n    for(y = [-20, 0, 20]) {\n        translate([0, y + building_depth/2, 15])\n        rotate([0, 90, 0])\n        cube([window_width, window_depth, window_height]);\n    }\n}\n\nmodule entrance() {\n    // Door frame\n    translate([building_width/2 - 10, building_depth, 0])\n    difference() {\n        cube([20, wall_thickness, 25]);\n        translate([wall_thickness, -1, wall_thickness])\n        cube([20-2*wall_thickness, wall_thickness+2, 25-wall_thickness]);\n    }\n    \n    // Door\n    translate([building_width/2 - 8, building_depth + wall_thickness/2, 2])\n    cube([16, 0.5, 21]);\n    \n    // Steps\n    translate([building_width/2 - 15, building_depth + 1, 0])\n    for(i = [1:3]) {\n        translate([0, i*2, 0])\n        cube([30, 2, i*2]);\n    }\n}\n\nmodule roof_details() {\n    // HVAC unit\n    translate([building_width/2 + 15, building_depth/2, building_height + 3])\n    cube([10, 15, 8]);\n    \n    // Ventilation pipes\n    translate([building_width/2 - 20, building_depth/2 + 10, building_height + 3])\n    cylinder(h=12, r=2, $fn=16);\n    \n    translate([building_width/2 - 25, building_depth/2 + 10, building_height + 3])\n    cylinder(h=10, r=1.5, $fn=16);\n}\n\nmodule medical_sign() {\n    // Sign pole\n    translate([building_width/2, building_depth + 5, 30])\n    cylinder(h=10, r=1, $fn=8);\n    \n    // Sign board\n    translate([building_width/2 - 15, building_depth + 5, 38])\n    cube([30, 2, 10]);\n    \n    // Red cross\n    translate([building_width/2 - 3, building_depth + 6, 43])\n    cube([6, 0.5, 1]);\n    translate([building_width/2 - 0.5, building_depth + 6, 40])\n    cube([1, 0.5, 6]);\n}\n\nmodule parking_lot() {\n    // Base parking area\n    translate([-10, building_depth + 10, -1])\n    cube([building_width + 20, 30, 1]);\n    \n    // Parking lines\n    for(x = [10:20:70]) {\n        translate([x, building_depth + 15, 0])\n        cube([2, 20, 0.2]);\n    }\n}\n\n// Assemble the clinic\nunion() {\n    main_building();\n    windows();\n    entrance();\n    roof_details();\n    medical_sign();\n    parking_lot();\n}",
    "renders": true
  },
  {
    "vehicle": "ambulance",
    "openscad_code": "// Realistic medium-complexity ambulance\n// All dimensions in mm, printable on FDM machine\n\n// Main parameters\namb_width = 28;\namb_length = 90;\namb_height = 30;\nwall = 1.2;\n\nmodule ambulance_body() {\n    difference() {\n        // Main box\n        translate([-amb_length/2, -amb_width/2, 0])\n            cube([amb_length, amb_width, amb_height]);\n        \n        // Hollow it out\n        translate([-amb_length/2+wall, -amb_width/2+wall, wall])\n            cube([amb_length-2*wall, amb_width-2*wall, amb_height-2*wall]);\n    }\n}\n\nmodule cab() {\n    // Driver cab\n    translate([amb_length/2-28, 0, amb_height])\n        difference() {\n            cube([25, amb_width, 18]);\n            translate([wall, wall, wall])\n                cube([25-2*wall, amb_width-2*wall, 18]);\n        }\n}\n\nmodule roof_details() {\n    // Red cross box on top\n    translate([-10, 0, amb_height+18])\n        cube([20, 6, 2]);\n    \n    // Emergency lights\n    translate([amb_length/2-20, 0, amb_height+18])\n        cylinder(h=2, r=4, $fn=16);\n}\n\nmodule wheels() {\n    // Rear wheels\n    for(pos = [[-30,-amb_width/2-4], [-30,amb_width/2+4]])\n        translate(pos)\n            rotate([90,0,0])\n                cylinder(h=3, r=5, $fn=20);\n    \n    // Front wheels\n    for(pos = [[25,-amb_width/2-4], [25,amb_width/2+4]])\n        translate(pos)\n            rotate([90,0,0])\n                cylinder(h=3, r=5, $fn=20);\n}\n\nmodule windows() {\n    // Front windshield\n    translate([amb_length/2-28+wall, 0, amb_height+18/2])\n        cube([0.5, amb_width-2*wall, 10]);\n    \n    // Side windows\n    for(x=[-40,-20,0]) {\n        translate([x, -amb_width/2, amb_height/2+2])\n            cube([15, 0.5, 10]);\n        translate([x, amb_width/2, amb_height/2+2])\n            cube([15, 0.5, 10]);\n    }\n}\n\nmodule ambulance_signs() {\n    // Red crosses\n    color(\"red\") {\n        // Left side\n        translate([-10, -amb_width/2-0.1, amb_height/2])\n            rotate([0,90,0])\n                cube([8,0.5,8]);\n        translate([-10, -amb_width/2-0.1, amb_height/2])\n            rotate([0,90,90])\n                cube([8,0.5,8]);\n        \n        // Right side\n        translate([-10, amb_width/2+0.1, amb_height/2])\n            rotate([0,90,0])\n                cube([8,0.5,8]);\n        translate([-10, amb_width/2+0.1, amb_height/2])\n            rotate([0,90,90])\n                cube([8,0.5,8]);\n        \n        // Top\n        translate([-10, 0, amb_height+18+2.1])\n            cube([8,0.5,8]);\n        translate([-10, 0, amb_height+18+2.1])\n            rotate([0,0,90])\n                cube([8,0.5,8]);\n    }\n}\n\nmodule bumpers() {\n    // Front bumper\n    translate([amb_length/2+3, 0, 3])\n        cube([4, amb_width-4, 6]);\n    \n    // Rear bumper\n    translate([-amb_length/2-3, 0, 3])\n        cube([4, amb_width-4, 6]);\n}\n\nmodule lights() {\n    // Headlights\n    translate([amb_length/2+3, -amb_width/4, 6])\n        sphere(r=2);\n    translate([amb_length/2+3, amb_width/4, 6])\n        sphere(r=2);\n    \n    // Taillights\n    translate([-amb_length/2-3, -amb_width/4, 6])\n        sphere(r=2);\n    translate([-amb_length/2-3, amb_width/4, 6])\n        sphere(r=2);\n}\n\n// Assemble the ambulance\nunion() {\n    ambulance_body();\n    cab();\n    roof_details();\n    wheels();\n    windows();\n    ambulance_signs();\n    bumpers();\n    lights();\n}",
    "renders": true
  },
  {
    "vehicle": "mobile",
    "openscad_code": "// Realistic style mobile - medium complexity\n// 3D printable baby mobile with hanging elements\n\n$fn = 36;\nwall_thickness = 2;\n\nmodule cross_bar(length, width, height) {\n    // Main horizontal bar with rounded edges\n    difference() {\n        cube([length, width, height], center=true);\n        translate([0, 0, height/2 - 0.5])\n        cube([length - 2, width - 2, 1], center=true);\n    }\n}\n\nmodule hook(radius, height) {\n    // Simple C-shaped hook for hanging elements\n    rotate_extrude(angle=180)\n    translate([radius, 0, 0])\n    circle(r=1);\n    cylinder(h=height, r=1);\n}\n\nmodule star(points, outer_r, inner_r, thickness) {\n    // 5-point star shape\n    linear_extrude(height=thickness)\n    difference() {\n        circle(r=outer_r, $fn=points*2);\n        for(i=[0:points-1]) {\n            rotate([0, 0, i*360/points + 180/points])\n            translate([0, inner_r/2, 0])\n            circle(r=inner_r, $fn=3);\n        }\n    }\n}\n\nmodule cloud() {\n    // Fluffy cloud made of multiple spheres\n    union() {\n        sphere(r=8);\n        translate([10, 0, 0]) sphere(r=6);\n        translate([-10, 0, 0]) sphere(r=6);\n        translate([5, 8, 0]) sphere(r=5);\n        translate([-5, 8, 0]) sphere(r=5);\n        translate([0, -8, 0]) sphere(r=5);\n    }\n}\n\nmodule moon() {\n    // Crescent moon shape\n    difference() {\n        sphere(r=10);\n        translate([5, -5, 0])\n        sphere(r=9);\n    }\n}\n\nmodule string(length) {\n    // Thin string connection\n    cylinder(h=length, r=0.5, $fn=8);\n}\n\nmodule hanging_element(type, string_length) {\n    // Assemble hanging element with string and shape\n    translate([0, 0, -string_length]) {\n        string(string_length);\n        translate([0, 0, -string_length/2 - 5]) {\n            if(type == \"star\") {\n                color(\"gold\")\n                star(5, 8, 4, 2);\n            }\n            if(type == \"cloud\") {\n                color(\"white\")\n                cloud();\n            }\n            if(type == \"moon\") {\n                color(\"silver\")\n                moon();\n            }\n        }\n    }\n}\n\n// Main mobile assembly\nmodule mobile() {\n    // Top cross\n    translate([0, 0, 50])\n    rotate([0, 90, 0])\n    cross_bar(80, 4, 4);\n    \n    // Side arms\n    translate([0, 0, 40])\n    rotate([0, 0, 90])\n    cross_bar(60, 3, 3);\n    \n    // Hanging hooks and elements\n    // Top level\n    translate([0, 0, 48])\n    hook(2, 5);\n    translate([0, 0, 40])\n    hanging_element(\"moon\", 20);\n    \n    // Second level left\n    translate([-30, 0, 38])\n    hook(2, 5);\n    translate([-30, 0, 30])\n    hanging_element(\"cloud\", 15);\n    \n    // Second level right\n    translate([30, 0, 38])\n    hook(2, 5);\n    translate([30, 0, 30])\n    hanging_element(\"star\", 15);\n    \n    // Third level left-left\n    translate([-40, 0, 28])\n    hook(2, 5);\n    translate([-40, 0, 20])\n    hanging_element(\"star\", 12);\n    \n    // Third level left-right\n    translate([-20, 0, 28])\n    hook(2, 5);\n    translate([-20, 0, 20])\n    hanging_element(\"cloud\", 12);\n    \n    // Third level right-left\n    translate([20, 0, 28])\n    hook(2, 5);\n    translate([20, 0, 20])\n    hanging_element(\"moon\", 12);\n    \n    // Third level right-right\n    translate([40, 0, 28])\n    hook(2, 5);\n    translate([40, 0, 20])\n    hanging_element(\"star\", 12);\n    \n    // Center hanging ring\n    translate([0, 0, 55])\n    rotate([90, 0, 0])\n    cylinder(h=5, r1=3, r2=3);\n}\n\nmobile();",
    "renders": true
  },
  {
    "vehicle": "command",
    "openscad_code": "// Realistic 3D-Printable Command - Medium Complexity\n// A retro gamepad-style controller with D-pad, ABXY buttons, and shoulder buttons\n\n$fn = 32; // Smooth curves for printing\n\n// Overall dimensions\nbody_width = 90;\nbody_height = 60;\nbody_depth = 30;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\nmodule controller_body() {\n    difference() {\n        // Main rounded body\n        translate([0, 0, body_depth/2])\n            minkowski() {\n                cube([body_width-6, body_height-6, body_depth-2], center=true);\n                sphere(3);\n            }\n        \n        // Hollow interior\n        translate([0, 0, body_depth/2])\n            minkowski() {\n                cube([body_width-wall_thickness*2-6, body_height-wall_thickness*2-6, body_depth-wall_thickness*2-2], center=true);\n                sphere(3-wall_thickness);\n            }\n        \n        // Cable exit hole\n        translate([body_width/2-5, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=10, r=4, center=true);\n    }\n}\n\nmodule d_pad() {\n    // D-pad base\n    translate([-body_width/3, 0, body_depth-wall_thickness/2])\n    difference() {\n        cube([20, 20, 3], center=true);\n        \n        // Cross cutout\n        cube([18, 6, 4], center=true);\n        cube([6, 18, 4], center=true);\n        \n        // Center dimple\n        translate([0, 0, -1])\n            cylinder(h=2, r=2, center=true);\n    }\n    \n    // Directional arrows\n    for (rot = [0, 90, 180, 270]) {\n        translate([-body_width/3, 0, body_depth+1])\n        rotate([0, 0, rot])\n        translate([0, 7, 0])\n        linear_extrude(height=0.5)\n            polygon(points=[[-2,-1], [0,-3], [2,-1], [2,1], [0,3], [-2,1]]);\n    }\n}\n\nmodule action_buttons() {\n    // ABXY buttons\n    positions = [[body_width/3-10, -10], [body_width/3, -5], [body_width/3-10, 10], [body_width/3, 5]];\n    labels = [\"A\", \"B\", \"X\", \"Y\"];\n    \n    for (i = [0:3]) {\n        translate([positions[i][0], positions[i][1], body_depth])\n        difference() {\n            // Button\n            cylinder(h=2.5, r=5);\n            // Top bevel\n            translate([0, 0, 2.5])\n                cylinder(h=0.5, r1=5, r2=4.5);\n            // Letter engraving\n            translate([0, 0, 1.5])\n                linear_extrude(height=0.5)\n                    text(labels[i], size=4, halign=\"center\", valign=\"center\");\n        }\n    }\n}\n\nmodule shoulder_buttons() {\n    // Left shoulder\n    translate([-body_width/2+5, body_height/2, body_depth/2+2])\n    rotate([30, 0, 0])\n        difference() {\n            cube([20, 8, 5]);\n            translate([0, 0, -0.1])\n                cube([20, 8.2, 4.8]);\n        }\n    \n    // Right shoulder\n    translate([body_width/2-5, body_height/2, body_depth/2+2])\n    rotate([30, 0, 0])\n        difference() {\n            cube([20, 8, 5]);\n            translate([0, 0, -0.1])\n                cube([20, 8.2, 4.8]);\n        }\n}\n\nmodule start_select() {\n    // Start button\n    translate([0, -body_height/4, body_depth])\n        rounded_cube([10, 4, 1.5], 1);\n    \n    // Select button\n    translate([0, body_height/4, body_depth])\n        rounded_cube([10, 4, 1.5], 1);\n}\n\nmodule rounded_cube(size, radius) {\n    minkowski() {\n        cube(size - [radius*2, radius*2, 0], center=true);\n        cylinder(h=size[2], r=radius, center=true);\n    }\n}\n\n// Assemble the controller\nunion() {\n    controller_body();\n    d_pad();\n    action_buttons();\n    shoulder_buttons();\n    start_select();\n}",
    "renders": true
  },
  {
    "vehicle": "communications",
    "openscad_code": "// Realistic-style walkie-talkie hand-held radio\n// 85 mm tall, 50 mm wide, 25 mm thick – easy to print without supports\n\n// wall thickness for rigidity and printability\nwall = 1.5;\n\n// overall proportions\nbody_h = 85;\nbody_w = 50;\nbody_d = 25;\n\n// main shell\nmodule body() {\n    difference() {\n        // outer rounded block\n        translate([0, 0, body_h/2])\n            minkowski() {\n                cube([body_w, body_d, body_h], center=true);\n                sphere(wall);\n            }\n\n        // hollow inside\n        translate([0, 0, body_h/2])\n            minkowski() {\n                cube([body_w - 2*wall, body_d - 2*wall, body_h - 2*wall], center=true);\n                sphere(wall);\n            }\n    }\n}\n\n// grid of side vents for speaker / microphone airflow\nmodule side_vents() {\n    for (z = [10:10:70])\n        for (y = [-body_d/2 + 3 : 4 : body_d/2 - 3])\n            translate([body_w/2, y, z])\n                cube([wall, 2, 5]);\n}\n\n// top knob (channel selector)\nmodule top_knob() {\n    translate([0, 0, body_h + 5])\n        cylinder(h = 8, r = 7, $fn = 32);\n}\n\n// antenna\nmodule antenna() {\n    translate([0, 0, body_h + 8])\n        cylinder(h = 30, r1 = 1.5, r2 = 0.5, $fn = 16);\n}\n\n// front faceplate with buttons & screen\nmodule front_details() {\n    // recessed plate\n    color(\"black\") translate([0, body_d/2 - wall/2, body_h/2])\n        cube([body_w - 10, wall, body_h - 10], center=true);\n\n    // small speaker grill holes\n    for (x = [-15:6:15])\n        for (z = [35:4:55])\n            translate([x, body_d/2 - wall, z])\n                cylinder(h = 2*wall, r = 0.6, $fn = 8);\n\n    // PTT button\n    color(\"red\") translate([-body_w/4, body_d/2, 20])\n        cube([8, 4, 15], center=true);\n\n    // small LCD screen\n    color(\"darkblue\") translate([body_w/4, body_d/2, 50])\n        cube([10, 1, 8], center=true);\n\n    // number pad buttons\n    for (row = [0:1:2])\n        for (col = [0:1:2])\n            translate([body_w/4 + col*6 - 6, body_d/2, 35 - row*6])\n                cylinder(h = 2, r = 2.5, $fn = 20);\n}\n\n// clip on back\nmodule belt_clip() {\n    difference() {\n        translate([0, -body_d/2 - 2, body_h/2])\n            cube([body_w/4, 4, body_h - 10], center=true);\n        translate([0, -body_d/2 - 3, body_h/2])\n            cube([body_w/4 - 2*wall, 6, body_h - 12], center=true);\n    }\n}\n\n// assemble\nbody();\nside_vents();\ntop_knob();\nantenna();\nfront_details();\nbelt_clip();",
    "renders": true
  },
  {
    "vehicle": "radar",
    "openscad_code": "// Realistic style radar with medium complexity\n// Dimensions: 80mm wide x 100mm tall x 80mm deep\n\n// Base platform\nmodule base_platform() {\n    difference() {\n        // Main base\n        cube([60, 10, 60], center=true);\n        \n        // Cable holes\n        for(x = [-20, 0, 20]) {\n            for(z = [-20, 0, 20]) {\n                translate([x, 0, z])\n                    rotate([90, 0, 0])\n                        cylinder(h=11, d=4, center=true);\n            }\n        }\n    }\n}\n\n// Vertical support tower\nmodule tower() {\n    translate([0, 25.5, 0]) {\n        difference() {\n            union() {\n                // Main tower body\n                cube([20, 50, 20], center=true);\n                \n                // Reinforcement blocks\n                translate([0, -25, 0])\n                    cube([30, 10, 30], center=true);\n                translate([0, 25, 0])\n                    cube([30, 10, 30], center=true);\n            }\n            \n            // Cable routing\n            translate([0, 0, 0])\n                cube([16, 46, 16], center=true);\n        }\n    }\n}\n\n// Rotating platform\nmodule rotating_platform() {\n    difference() {\n        // Main disc\n        cylinder(h=4, d=40, center=true);\n        \n        // Center hole for axle\n        cylinder(h=5, d=6, center=true);\n        \n        // Mounting holes\n        for(a = [0:120:359]) {\n            rotate([0, 0, a])\n                translate([15, 0, 0])\n                    cylinder(h=5, d=3, center=true);\n        }\n    }\n}\n\n// Radar dish\nmodule dish() {\n    difference() {\n        // Main dish\n        scale([1, 0.3, 1])\n            sphere(d=60);\n        \n        // Cut the back half\n        translate([0, 0, -5])\n            cube([70, 70, 10], center=true);\n        \n        // Feed horn hole\n        translate([0, 15, 0])\n            cylinder(h=20, d=8, center=true);\n    }\n}\n\n// Feed horn\nmodule feed_horn() {\n    translate([0, 15, 0]) {\n        union() {\n            // Main horn\n            cylinder(h=20, d1=8, d2=12);\n            \n            // Mounting bracket\n            translate([0, 5, 0])\n                cube([20, 10, 2], center=true);\n        }\n    }\n}\n\n// Drive motor housing\nmodule motor_housing() {\n    translate([0, -15, 0]) {\n        difference() {\n            // Main housing\n            cube([30, 20, 20], center=true);\n            \n            // Motor cavity\n            cube([26, 16, 16], center=true);\n            \n            // Cable access\n            translate([-13, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h=5, d=6, center=true);\n        }\n    }\n}\n\n// Antenna array\nmodule antenna_array() {\n    translate([0, 0, 25]) {\n        for(i = [-2:2]) {\n            translate([i*10, 0, 0]) {\n                cube([3, 2, 10]);\n                translate([0, 0, 10])\n                    sphere(d=4);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    color(\"gray40\") base_platform();\n    color(\"gray50\") tower();\n    \n    translate([0, 50, 0]) {\n        rotate([0, 0, $t*360]) {\n            color(\"gray60\") rotating_platform();\n            \n            translate([0, 0, 2]) {\n                color(\"silver\") dish();\n                color(\"gray70\") feed_horn();\n            }\n            \n            color(\"gray50\") motor_housing();\n            color(\"gray70\") antenna_array();\n        }\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "satellite",
    "openscad_code": "// Realistic Medium-Complexity 3D Printable Satellite\n// Approx 75 mm long, 60 mm wide, 30 mm high\n\n$fn = 32; // smooth curves\n\nmodule solar_panel(w=25, h=15, t=2) {\n    // panel body\n    difference() {\n        cube([w, h, t], center=true);\n        translate([0, 0, t/2 + 0.1])\n            cube([w-2, h-2, t+1], center=true);\n    }\n    // hinges\n    translate([0, 0, -t/2-1]) cylinder(h=2, r=1, center=true);\n}\n\nmodule solar_array(count=3) {\n    for (i=[-count/2+0.5 : count/2-0.5]) {\n        translate([0, i*18, 0])\n            solar_panel();\n    }\n}\n\nmodule body() {\n    difference() {\n        // main bus cylinder\n        cylinder(h=40, r=15, center=true);\n        // hollow inside\n        translate([0, 0, -1])\n            cylinder(h=42, r=13, center=true);\n    }\n    // top deck\n    translate([0, 0, 20])\n        cube([28, 28, 2], center=true);\n    // bottom deck\n    translate([0, 0, -20])\n        cube([28, 28, 2], center=true);\n}\n\nmodule thruster() {\n    difference() {\n        // nozzle\n        cylinder(h=8, r1=6, r2=4, center=true);\n        // throat\n        translate([0, 0, 2])\n            cylinder(h=6, r=2, center=true);\n    }\n    // mounting flange\n    translate([0, 0, -5])\n        cylinder(h=2, r=8, center=true);\n}\n\nmodule antenna_dish(d=14) {\n    difference() {\n        // dish\n        translate([0, 0, -d/4])\n            sphere(d=d);\n        // hollow\n        translate([0, 0, -d/4-1])\n            sphere(d=d-2);\n        // remove back half\n        translate([0, 0, 0])\n            cube([d+2, d+2, d/2], center=true);\n    }\n    // feed horn\n    translate([0, 0, -d/4])\n        cylinder(h=4, r=1, center=true);\n}\n\nmodule sensor_box() {\n    difference() {\n        cube([8, 8, 6], center=true);\n        translate([0, 0, -4])\n            cube([6, 6, 8], center=true);\n    }\n}\n\n// Main assembly\nunion() {\n    // satellite body\n    body();\n    \n    // solar panels on left\n    translate([-18, 0, 0])\n        rotate([0, 90, 0])\n            solar_array();\n    \n    // solar panels on right\n    translate([18, 0, 0])\n        rotate([0, 90, 0])\n            solar_array();\n    \n    // main thruster on bottom\n    translate([0, 0, -25])\n        thruster();\n    \n    // antenna dish on top\n    translate([0, 0, 25])\n        rotate([0, 0, 0])\n            antenna_dish();\n    \n    // attitude sensors\n    translate([0, -18, 18])\n        sensor_box();\n    translate([18, 0, 18])\n        sensor_box();\n    translate([0, 18, 18])\n        sensor_box();\n    translate([-18, 0, 18])\n        sensor_box();\n}",
    "renders": true
  },
  {
    "vehicle": "control",
    "openscad_code": "// Realistic Gamepad-style Control (approx 95 mm x 65 mm x 25 mm)\n// All dimensions in mm\n\n$fn = 60;\n\n// Overall shell thickness\nt = 2;\n\n// Main shell\nmodule shell() {\n    difference() {\n        // Outer rounded body\n        hull() {\n            translate([-45, -30, 0])\n                cylinder(h = 20, r = 8, center = true);\n            translate([45, -30, 0])\n                cylinder(h = 20, r = 8, center = true);\n            translate([-45, 30, 0])\n                cylinder(h = 20, r = 8, center = true);\n            translate([45, 30, 0])\n                cylinder(h = 20, r = 8, center = true);\n        }\n        \n        // Hollow interior\n        hull() {\n            translate([-43, -28, 0])\n                cylinder(h = 24, r = 6, center = true);\n            translate([43, -28, 0])\n                cylinder(h = 24, r = 6, center = true);\n            translate([-43, 28, 0])\n                cylinder(h = 24, r = 6, center = true);\n            translate([43, 28, 0])\n                cylinder(h = 24, r = 6, center = true);\n        }\n    }\n}\n\n// Left analog stick assembly\nmodule left_stick() {\n    translate([-25, 15, 12]) {\n        // Base\n        cylinder(h = 4, r1 = 8, r2 = 10);\n        translate([0, 0, 4]) {\n            // Stem\n            cylinder(h = 8, r = 6);\n            // Knob\n            translate([0, 0, 8])\n                sphere(r = 7);\n        }\n    }\n}\n\n// Right analog stick assembly\nmodule right_stick() {\n    translate([25, 15, 12]) {\n        cylinder(h = 4, r1 = 8, r2 = 10);\n        translate([0, 0, 4]) {\n            cylinder(h = 8, r = 6);\n            translate([0, 0, 8])\n                sphere(r = 7);\n        }\n    }\n}\n\n// D-pad cross\nmodule dpad() {\n    translate([-25, -15, 12]) {\n        union() {\n            cube([18, 6, 3], center = true);\n            cube([6, 18, 3], center = true);\n        }\n    }\n}\n\n// Action buttons (A/B/X/Y)\nmodule action_buttons() {\n    translate([25, -15, 12]) {\n        for (dx = [-7, 7], dy = [-7, 7]) {\n            translate([dx, dy, 0])\n                cylinder(h = 3, r = 4);\n        }\n    }\n}\n\n// Trigger buttons on top\nmodule triggers() {\n    // Left trigger\n    translate([-35, 0, 15]) {\n        rotate([0, 15, 0])\n            cube([20, 8, 5], center = true);\n    }\n    // Right trigger\n    translate([35, 0, 15]) {\n        rotate([0, 15, 0])\n            cube([20, 8, 5], center = true);\n    }\n}\n\n// Center guide button\nmodule guide_button() {\n    translate([0, 0, 12]) {\n        cylinder(h = 2, r = 5);\n        translate([0, 0, 2])\n            sphere(r = 4);\n    }\n}\n\n// Assembly\nunion() {\n    shell();\n    left_stick();\n    right_stick();\n    dpad();\n    action_buttons();\n    triggers();\n    guide_button();\n}",
    "renders": true
  },
  {
    "vehicle": "power",
    "openscad_code": "// Realistic-style power strip (medium complexity)\n// 3-prong US-style outlets, power switch, LED, and cable\n// Designed for 3D printing – no overhangs >45°, 2 mm walls\n\n$fn = 50;                      // Global smoothness\n\n// Main housing\nmodule housing() {\n    difference() {\n        // Main block\n        cube([90, 40, 25], center = true);\n        \n        // Top chamfer\n        translate([0, 0, 12.5])\n        rotate([45, 0, 0])\n        cube([100, 100, 20], center = true);\n    }\n}\n\n// Outlet faceplate\nmodule outlet_face() {\n    translate([0, 0, 12.5 - 0.5])\n    cube([90, 40, 1], center = true);\n}\n\n// Single 3-prong outlet\nmodule outlet(x) {\n    translate([x, 0, 12.5]) {\n        // Outer slot\n        difference() {\n            cube([12, 22, 2], center = true);\n            cube([11, 21, 3], center = true);\n        }\n        \n        // Left slot\n        translate([-4, 0, 1])\n        cube([2.5, 6, 2], center = true);\n        \n        // Right slot\n        translate([4, 0, 1])\n        cube([2.5, 6, 2], center = true);\n        \n        // Ground hole\n        translate([0, -7, 1])\n        cylinder(h = 2, r = 2.5, center = true);\n    }\n}\n\n// Power switch\nmodule switch() {\n    translate([-35, 0, 12.5 - 0.5]) {\n        // Switch housing\n        cube([10, 14, 4], center = true);\n        \n        // Toggle lever\n        translate([0, 0, 2.5])\n        rotate([0, 90, 0])\n        cylinder(h = 8, r = 3);\n    }\n}\n\n// LED indicator\nmodule led() {\n    translate([-45, 10, 12.5 - 0.5]) {\n        cylinder(h = 2, r = 3);\n    }\n}\n\n// Cable strain relief\nmodule cable() {\n    translate([45, 0, 0])\n    rotate([90, 0, 0])\n    cylinder(h = 30, r1 = 6, r2 = 4);\n}\n\n// Assembly\nhousing();\noutlet_face();\n\n// Three outlets spaced evenly\nfor (x = [-30, 0, 30]) {\n    outlet(x);\n}\n\nswitch();\nled();\ncable();",
    "renders": true
  },
  {
    "vehicle": "generator",
    "openscad_code": "// Portable Generator - Medium Complexity\n// Dimensions: ~80mm x 50mm x 55mm (L x W x H)\n\n// Main parameters\n$fn = 36;\nwall = 2;\nbase_h = 8;\nengine_h = 25;\ntank_h = 18;\nhandle_h = 25;\nhandle_r = 4;\nexhaust_l = 12;\nwheel_r = 10;\n\nmodule frame() {\n    // Base frame\n    difference() {\n        cube([80, 50, base_h], center=true);\n        translate([0, 0, -1]) cube([76, 46, base_h+2], center=true);\n    }\n    \n    // Corner posts\n    for(x=[-35, 35])\n    for(y=[-20, 20]) {\n        translate([x, y, base_h/2 + engine_h/2])\n            cube([6, 6, engine_h], center=true);\n    }\n}\n\nmodule engine() {\n    // Main engine block\n    translate([0, 0, base_h + engine_h/2])\n    cube([70, 40, engine_h], center=true);\n    \n    // Pull starter housing\n    translate([-30, 15, base_h + engine_h/2 + 5])\n    rotate([90, 0, 0])\n    cylinder(h=15, r1=8, r2=8, center=true);\n    \n    // Cylinder head (exhaust side)\n    translate([30, -12, base_h + engine_h/2 + 5])\n    cube([15, 12, engine_h - 5], center=true);\n}\n\nmodule fuel_tank() {\n    translate([0, 0, base_h + engine_h + tank_h/2])\n    scale([1, 0.8, 0.6])\n    sphere(d=50);\n    \n    // Tank cap\n    translate([0, 0, base_h + engine_h + tank_h])\n    cylinder(h=3, r=4);\n}\n\nmodule exhaust() {\n    // Exhaust pipe\n    translate([38, -12, base_h + engine_h/2 + 8])\n    rotate([0, 90, 0])\n    cylinder(h=exhaust_l, r=3);\n    \n    // Muffler\n    translate([38 + exhaust_l, -12, base_h + engine_h/2 + 8])\n    rotate([0, 90, 0])\n    cylinder(h=8, r=5);\n}\n\nmodule handle() {\n    // Handle supports\n    for(x=[-25, 25]) {\n        translate([x, 20, base_h + handle_h/2])\n        cube([wall*2, wall*2, handle_h], center=true);\n    }\n    \n    // Handle bar\n    translate([0, 20 + handle_r, base_h + handle_h])\n    rotate([90, 0, 0])\n    cylinder(h=50, r=handle_r);\n}\n\nmodule wheels() {\n    // Wheel assemblies\n    for(x=[-25, 25]) {\n        translate([x, -20 - wheel_r, base_h/2])\n        rotate([90, 0, 0])\n        difference() {\n            cylinder(h=wall*1.5, r=wheel_r);\n            cylinder(h=wall*2, r=wheel_r - wall*2);\n        }\n        \n        // Axle\n        translate([x, -20, base_h/2])\n        rotate([90, 0, 0])\n        cylinder(h=15, r=2);\n    }\n}\n\nmodule control_panel() {\n    // Panel face\n    translate([-38, 0, base_h + engine_h/2])\n    cube([wall, 30, 15], center=true);\n    \n    // Outlets\n    for(i=[-1, 0, 1]) {\n        translate([-38 - wall/2, i*8, base_h + engine_h/2])\n        cube([wall+0.1, 6, 8], center=true);\n    }\n    \n    // Power switch\n    translate([-38 - wall/2, 15, base_h + engine_h/2 + 5])\n    cube([wall+0.1, 4, 6], center=true);\n}\n\n// Assembly\nunion() {\n    frame();\n    engine();\n    fuel_tank();\n    exhaust();\n    handle();\n    wheels();\n    control_panel();\n}",
    "renders": true
  },
  {
    "vehicle": "fuel",
    "openscad_code": "// Realistic Fuel Canister - Medium Complexity\n// 3D printable fuel container with handle, spout and cap\n\n// Overall dimensions: ~75mm x ~45mm x ~90mm\n\nmodule main_body() {\n    difference() {\n        // Main rectangular tank body with rounded edges\n        union() {\n            // Main tank\n            hull() {\n                translate([-32, -18, 0]) cylinder(h=80, r=4, $fn=20);\n                translate([32, -18, 0]) cylinder(h=80, r=4, $fn=20);\n                translate([32, 18, 0]) cylinder(h=80, r=4, $fn=20);\n                translate([-32, 18, 0]) cylinder(h=80, r=4, $fn=20);\n            }\n        }\n        \n        // Hollow out the inside\n        translate([0, 0, 2]) hull() {\n            translate([-28, -14, 0]) cylinder(h=78, r=3, $fn=20);\n            translate([28, -14, 0]) cylinder(h=78, r=3, $fn=20);\n            translate([28, 14, 0]) cylinder(h=78, r=3, $fn=20);\n            translate([-28, 14, 0]) cylinder(h=78, r=3, $fn=20);\n        }\n    }\n}\n\nmodule handle() {\n    // Top handle with ergonomic grip\n    difference() {\n        // Outer handle shape\n        union() {\n            // Handle bars\n            translate([-20, 0, 85]) rotate([90, 0, 0]) cylinder(h=40, r=4, $fn=16);\n            translate([20, 0, 85]) rotate([90, 0, 0]) cylinder(h=40, r=4, $fn=16);\n            // Handle grip\n            translate([0, 0, 95]) cube([40, 8, 5], center=true);\n        }\n        \n        // Hollow out handle for comfortable grip\n        translate([0, 0, 97.5]) cube([38, 6, 2], center=true);\n    }\n}\n\nmodule spout() {\n    // Threaded spout with cap\n    difference() {\n        // Spout base\n        union() {\n            // Spout tube\n            translate([0, -25, 75]) rotate([90, 0, 0]) cylinder(h=20, r=6, $fn=16);\n            // Spout flange\n            translate([0, -25, 75]) rotate([90, 0, 0]) cylinder(h=2, r=10, $fn=16);\n            // Spout threads (simplified)\n            for (i = [0:5]) {\n                translate([0, -25, 75 - i*2.5]) rotate([90, 0, 0]) \n                    cylinder(h=1.5, r=6.5 - i*0.1, $fn=16);\n            }\n        }\n        \n        // Hollow spout\n        translate([0, -25, 75]) rotate([90, 0, 0]) cylinder(h=20, r=4, $fn=16);\n    }\n}\n\nmodule cap() {\n    // Screw cap for spout\n    difference() {\n        union() {\n            // Cap body\n            translate([0, -25, 62]) rotate([90, 0, 0]) cylinder(h=8, r=8, $fn=16);\n            // Cap grip ridges\n            for (i = [0:7]) {\n                rotate([0, 0, i * 45]) \n                    translate([0, -25, 62]) rotate([90, 0, 0]) \n                    cube([1.5, 16, 8], center=true);\n            }\n        }\n        \n        // Thread cavity\n        translate([0, -25, 62]) rotate([90, 0, 0]) cylinder(h=10, r=5, $fn=16);\n    }\n}\n\nmodule fuel_level_window() {\n    // Small window to check fuel level\n    translate([34, 0, 20]) {\n        difference() {\n            // Window frame\n            cube([2, 20, 40]);\n            // Actual window\n            translate([0.5, 2, 2]) cube([1, 16, 36]);\n        }\n    }\n}\n\nmodule warning_labels() {\n    // Raised warning symbols\n    translate([0, 20, 40]) {\n        // Flammable symbol\n        for (i = [0:2]) {\n            rotate([90, 0, i * 120]) \n                translate([0, 0, 0]) cube([2, 8, 2], center=true);\n        }\n    }\n    \n    translate([0, -20, 60]) {\n        // Fuel type label area\n        cube([15, 2, 8]);\n    }\n}\n\n// Assemble the fuel canister\nunion() {\n    main_body();\n    handle();\n    spout();\n    cap();\n    fuel_level_window();\n    warning_labels();\n}",
    "renders": true
  },
  {
    "vehicle": "water",
    "openscad_code": "// Realistic Water Bottle – medium complexity\n// 3D-printable, ~70 mm tall, 27 mm diameter, 1 mm walls\n\n// Overall scale\nbottleHeight = 70;   // mm\ncapHeight    = 10;\nbodyHeight   = bottleHeight - capHeight;\n\n// Wall thickness\nwall = 1;\n\n// Radii\nouterR = 13.5;  // mm\ninnerR = outerR - wall;\n\nmodule bottleBody() {\n    difference() {\n        // Outer shell\n        cylinder(h = bodyHeight, r1 = outerR, r2 = outerR * 0.9, $fn = 60);\n\n        // Inner cavity\n        translate([0, 0, wall])\n            cylinder(h = bodyHeight - wall, r1 = innerR, r2 = innerR * 0.9, $fn = 60);\n\n        // Flat bottom\n        translate([0, 0, -0.01])\n            cylinder(h = wall + 0.02, r = outerR * 1.01, $fn = 60);\n    }\n}\n\nmodule threads() {\n    // Simple screw threads for cap\n    threadHeight = 1.8;\n    threadPitch  = 2.0;\n    threadCount  = 3;\n\n    for (i = [0 : threadCount - 1]) {\n        translate([0, 0, bodyHeight + i * threadPitch])\n            rotate_extrude($fn = 60)\n                polygon(points = [\n                    [innerR, 0],\n                    [outerR, 0],\n                    [outerR, threadHeight],\n                    [innerR, threadHeight]\n                ]);\n    }\n}\n\nmodule cap() {\n    difference() {\n        // Outer cap\n        cylinder(h = capHeight, r = outerR + 1, $fn = 60);\n\n        // Inner cavity for threads\n        cylinder(h = capHeight, r = outerR - 0.5, $fn = 60);\n\n        // Top surface\n        translate([0, 0, -0.01])\n            cube([2 * (outerR + 1), 2 * (outerR + 1), wall], center = true);\n    }\n\n    // Thread grooves\n    threadHeight = 1.8;\n    threadPitch  = 2.0;\n    threadCount  = 3;\n    for (i = [0 : threadCount - 1]) {\n        translate([0, 0, capHeight - (i + 1) * threadPitch])\n            rotate_extrude($fn = 60)\n                polygon(points = [\n                    [outerR - 0.5, 0],\n                    [outerR - 1.5, 0],\n                    [outerR - 1.5, threadHeight],\n                    [outerR - 0.5, threadHeight]\n                ]);\n    }\n}\n\n// Label recess for realism\nmodule labelRecess() {\n    recessHeight = 20;\n    recessDepth  = 0.5;\n\n    translate([0, 0, bodyHeight / 2 - recessHeight / 2])\n        difference() {\n            cylinder(h = recessHeight, r = outerR, $fn = 60);\n            cylinder(h = recessHeight + 0.1, r = outerR - recessDepth, $fn = 60);\n        }\n}\n\n// Assemble parts\nbottleBody();\nthreads();\ntranslate([0, 0, bottleHeight + 5]) cap();\nlabelRecess();",
    "renders": true
  },
  {
    "vehicle": "canteen",
    "openscad_code": "// Realistic 3D-printable canteen\n// External dimensions: ~80 mm tall, ~70 mm diameter\n\n$fn = 36; // smooth curves\n\nmodule canteen_body() {\n    // Main cylindrical body\n    difference() {\n        cylinder(h = 60, d = 65, center = false);\n        // Hollow interior\n        translate([0, 0, 3])\n            cylinder(h = 54, d = 59, center = false);\n    }\n}\n\nmodule canteen_base() {\n    // Reinforced bottom\n    translate([0, 0, 0])\n        cylinder(h = 3, d = 67, center = false);\n    \n    // Small fillet at base\n    translate([0, 0, 3])\n        cylinder(h = 2, d1 = 67, d2 = 65, center = false);\n}\n\nmodule canteen_shoulder() {\n    // Shoulder taper\n    translate([0, 0, 60])\n        cylinder(h = 5, d1 = 65, d2 = 40, center = false);\n}\n\nmodule canteen_neck() {\n    // Threaded neck\n    difference() {\n        translate([0, 0, 65])\n            cylinder(h = 12, d = 40, center = false);\n        // Internal threads approximated\n        translate([0, 0, 67])\n            cylinder(h = 8, d = 35, center = false);\n    }\n    \n    // Thread ridges\n    for (i = [0:5]) {\n        translate([0, 0, 65 + i * 1.8])\n            cylinder(h = 0.8, d = 39, center = false);\n    }\n}\n\nmodule cap() {\n    // Cap body\n    difference() {\n        translate([0, 0, 77])\n            cylinder(h = 8, d = 42, center = false);\n        // Internal thread\n        translate([0, 0, 77.5])\n            cylinder(h = 6, d = 36, center = false);\n    }\n    \n    // Grip ridges on cap\n    for (i = [0:11]) {\n        rotate([0, 0, i * 30])\n            translate([19, 0, 77])\n            cube([3, 2, 8], center = true);\n    }\n}\n\nmodule handle_mount() {\n    // Handle mounting lugs\n    for (a = [0, 180]) {\n        rotate([0, 0, a])\n        translate([33, 0, 40])\n        difference() {\n            cube([8, 6, 12], center = true);\n            translate([0, 0, 3])\n                cube([6, 4, 8], center = true);\n        }\n    }\n}\n\nmodule handle() {\n    // Swing handle\n    rotate([0, 90, 0])\n    rotate([0, 0, -90])\n    difference() {\n        // Handle wire\n        translate([0, 0, 0])\n            torus(8, 2, 180);\n        \n        // Center gap\n        translate([0, 0, 0])\n            torus(8, 2.5, 45);\n    }\n}\n\nmodule torus(r_major, r_minor, angle) {\n    // Helper for partial torus\n    rotate_extrude(angle = angle)\n    translate([r_major, 0, 0])\n    circle(r = r_minor);\n}\n\n// Main assembly\nunion() {\n    canteen_base();\n    canteen_body();\n    canteen_shoulder();\n    canteen_neck();\n    cap();\n    handle_mount();\n    \n    // Position handle\n    translate([0, 0, 40])\n    rotate([0, 0, 0])\n    handle();\n}",
    "renders": true
  },
  {
    "vehicle": "kitchen",
    "openscad_code": "// Kitchen Model - Realistic Medium Complexity\n// Designed for 3D printing (no overhangs, 1.5mm wall thickness)\n\n$fn = 32;\n\n// Overall dimensions\nkitchen_width = 80;\nkitchen_depth = 40;\nkitchen_height = 50;\n\n// Wall thickness\nwall = 1.5;\n\nmodule cabinet_base() {\n    difference() {\n        // Main cabinet body\n        translate([0, 0, wall]) cube([kitchen_width, kitchen_depth, 30], center=true);\n        \n        // Recessed front\n        translate([0, kitchen_depth/2 - wall/2, 15]) cube([kitchen_width - 4, wall, 30], center=true);\n        \n        // Recessed back\n        translate([0, -kitchen_depth/2 + wall/2, 15]) cube([kitchen_width - 4, wall, 30], center=true);\n        \n        // Door opening\n        translate([kitchen_width/4, kitchen_depth/2, 15]) cube([kitchen_width/2 - 2, wall + 0.1, 26], center=true);\n    }\n}\n\nmodule cabinet_doors() {\n    // Left door\n    translate([-kitchen_width/4 - 1, kitchen_depth/2 + wall/2, 15]) {\n        cube([kitchen_width/2 - 3, wall, 26], center=true);\n        \n        // Door handle\n        translate([kitchen_width/6, 0, 8]) \n            rotate([90, 0, 0]) cylinder(h=wall*2, r=1);\n    }\n    \n    // Right door\n    translate([kitchen_width/4 + 1, kitchen_depth/2 + wall/2, 15]) {\n        cube([kitchen_width/2 - 3, wall, 26], center=true);\n        \n        // Door handle\n        translate([-kitchen_width/6, 0, 8]) \n            rotate([90, 0, 0]) cylinder(h=wall*2, r=1);\n    }\n}\n\nmodule countertop() {\n    // Main counter\n    translate([0, 0, 30 + wall]) cube([kitchen_width, kitchen_depth, 3], center=true);\n    \n    // Backsplash\n    translate([0, -kitchen_depth/2 + 1.5, 30 + wall + 10]) \n        cube([kitchen_width, 3, 20], center=true);\n}\n\nmodule sink() {\n    translate([0, 0, 30 + wall + 3]) {\n        difference() {\n            // Sink rim\n            cube([20, 15, 2], center=true);\n            \n            // Sink basin\n            translate([0, 0, -1]) cube([18, 13, 4], center=true);\n        }\n        \n        // Faucet base\n        translate([5, 0, 2]) cylinder(h=8, r=2);\n        \n        // Faucet spout\n        translate([5, 0, 10]) rotate([0, -30, 0]) cylinder(h=10, r=1);\n    }\n}\n\nmodule stove() {\n    translate([-kitchen_width/3, 0, 30 + wall + 3]) {\n        // Stove top\n        cube([25, 20, 2], center=true);\n        \n        // Burners\n    for(x=[-8, 8]) {\n        for(y=[-6, 6]) {\n            translate([x, y, 2]) cylinder(h=1, r=4);\n            translate([x, y, 2.5]) cylinder(h=1, r=3);\n        }\n    }\n        \n        // Control knobs\n        for(i=[-1, 0, 1, 2]) {\n            translate([12, i*4 - 2, 2]) cylinder(h=2, r=1.5);\n        }\n    }\n}\n\nmodule upper_cabinets() {\n    // Cabinet box\n    translate([0, 0, 45]) cube([kitchen_width - 10, kitchen_depth/2, 15], center=true);\n    \n    // Doors\n    for(x=[-kitchen_width/4, kitchen_width/4]) {\n        translate([x, kitchen_depth/4, 45 + 7.5]) {\n            cube([kitchen_width/2 - 6, kitchen_depth/2 - 2, 15 - 1], center=true);\n            \n            // Handle\n            translate([kitchen_width/6 - 2, 0, 0]) rotate([90, 0, 0]) \n                cylinder(h=wall*2, r=0.8);\n        }\n    }\n}\n\n// Assemble kitchen\nunion() {\n    cabinet_base();\n    cabinet_doors();\n    countertop();\n    sink();\n    stove();\n    upper_cabinets();\n}",
    "renders": true
  },
  {
    "vehicle": "diner",
    "openscad_code": "// OpenSCAD 3D Printable Diner (Medium Complexity, Realistic Style)\n// Dimensions ~60 mm long x 30 mm deep x 25 mm high\n\n$fn = 32;  // Smooth curves\n\n// Overall diner module\nmodule diner() {\n    // Base building\n    color(\"silver\")\n    difference() {\n        union() {\n            // Main rectangular body\n            translate([0, 0, 10])\n                cube([60, 30, 15], center=true);\n            \n            // Roof with slight overhang\n            translate([0, 0, 20])\n                cube([64, 34, 2], center=true);\n        }\n        \n        // Doorway opening\n        translate([-28, 0, 5])\n            cube([6, 12, 12], center=true);\n        \n        // Window openings\n        for(x = [-15, -5, 5, 15]) {\n            translate([x, 13.5, 12])\n                cube([8, 2, 8], center=true);\n        }\n    }\n    \n    // Door\n    color(\"red\")\n    translate([-27.5, -0.5, 9])\n        cube([5, 11, 11], center=true);\n    \n    // Windows\n    color(\"lightblue\")\n    for(x = [-15, -5, 5, 15]) {\n        translate([x, 13.5, 12])\n            cube([7, 1, 7], center=true);\n    }\n    \n    // Chrome trim around base\n    color(\"silver\")\n    for(i = [-1, 1]) {\n        translate([0, i*14.5, 8.5])\n            cube([62, 1, 1], center=true);\n    }\n    \n    // Counter with bar stools\n    module bar_stool(x) {\n        color(\"red\")\n        translate([x, -10, 5])\n            cylinder(h=6, r=2);\n        translate([x, -10, 11.5])\n            sphere(r=2.5);\n    }\n    \n    color(\"silver\")\n    translate([0, -10, 8.5])\n        cube([50, 4, 1.5], center=true);\n    \n    for(x = [-20, -10, 0, 10, 20]) {\n        bar_stool(x);\n    }\n    \n    // Vintage sign\n    color(\"red\")\n    translate([0, 0, 23])\n        cube([20, 4, 2], center=true);\n    \n    color(\"white\")\n    translate([0, 0, 24.5])\n        cube([18, 3, 0.5], center=true);\n    \n    // Chimney\n    color(\"darkgray\")\n    translate([25, 10, 25])\n        cube([6, 6, 8], center=true);\n    \n    // Vent details on roof\n    color(\"gray\")\n    for(x = [-20, 0, 20]) {\n        translate([x, 0, 22])\n            cube([4, 25, 1], center=true);\n    }\n}\n\ndiner();",
    "renders": true
  },
  {
    "vehicle": "restaurant",
    "openscad_code": "// Realistic Medium-Complexity Restaurant\n// Approx 75 mm long, 60 mm wide, 35 mm tall – 3D-printable without support\n\n$fn = 24;                       // Smoother curves while keeping poly-count low\nwall_t = 1.6;                   // Wall thickness for FDM printing\nscale = 1.5;                    // Global scale factor for quick resizing\n\nmodule scaled() {              // Wrap everything to apply global scale\n    scale([scale,scale,scale]) union() {\n\n/* ---------- Building shell ---------- */\nmodule building() {\n    difference() {\n        translate([0,0,wall_t/2])\n            cube([50,40,20], center=true);            // Main block\n        translate([0,0,-1])\n            cube([46-wall_t*2,36-wall_t*2,22], center=true); // Hollow interior\n    }\n}\n\n/* ---------- Roof with gentle slope ---------- */\nmodule roof() {\n    translate([0,0,10]) {\n        difference() {\n            for(y=[-18,18]) translate([0,y,0])\n                rotate([0,10*(y<0?-1:1),0])\n                    cube([52,2,8], center=true);      // Slanted roof halves\n            translate([0,0,-1]) cube([54,40,10], center=true); // Remove overlap\n        }\n    }\n}\n\n/* ---------- Door ---------- */\nmodule door() {\n    translate([0,-19.2,1]) {\n        difference() {\n            cube([8,wall_t,12], center=true);         // Door slab\n            translate([0,0,-1]) cube([6.5,wall_t+1,10.5], center=true); // Recess\n        }\n    }\n}\n\n/* ---------- Windows ---------- */\nmodule windows() {\n    for(side=[-1,1]) {\n        translate([side*23.2,0,5]) rotate([0,0,90*side])\n            difference() {\n                cube([6,wall_t,6], center=true);      // Window frame\n                translate([0,0,0]) cube([4.5,wall_t+1,4.5], center=true); // Glass hole\n            }\n    }\n}\n\n/* ---------- Chimney ---------- */\nmodule chimney() {\n    translate([15,8,11]) {\n        cube([4,4,8], center=true);\n        translate([0,0,4]) cube([6,2,2], center=true); // Top lip\n    }\n}\n\n/* ---------- Simple sign ---------- */\nmodule sign() {\n    translate([0,-15,13]) rotate([20,0,0])\n        cube([12,1,3], center=true);\n}\n\n/* ---------- Tables with chairs ---------- */\nmodule seating() {\n    for(x=[-15,15]) for(y=[-5,10]) {\n        translate([x,y,wall_t/2]) {\n            // Table\n            color(\"tan\")\n                cylinder(h=4, r=3, center=false);\n            // Four chairs per table\n            for(a=[0:90:270]) rotate([0,0,a])\n                translate([5,0,0]) color(\"brown\")\n                    cube([2,2,3], center=true);\n        }\n    }\n}\n\n/* ---------- Assembly ---------- */\nbuilding();\nroof();\ndoor();\nwindows();\nchimney();\nsign();\nseating();\n\n    } // end of scaled()\n}\n\nscaled();",
    "renders": true
  },
  {
    "vehicle": "bar",
    "openscad_code": "// Realistic style bar with medium complexity\n// Overall dimensions: 80mm wide x 60mm deep x 40mm tall\n\n$fn=32;\n\n// Main bar counter\nmodule bar_counter() {\n    // Counter top\n    translate([0, 0, 35])\n        cube([80, 60, 5], center=true);\n    \n    // Counter front panel\n    translate([0, 27.5, 17.5])\n            cube([80, 5, 35], center=true);\n    \n    // Counter left side panel\n    translate([-37.5, 0, 17.5])\n            cube([5, 60, 35], center=true);\n    \n    // Counter right side panel\n    translate([37.5, 0, 17.5])\n            cube([5, 60, 35], center=true);\n    \n    // Back panel\n    translate([0, -27.5, 17.5])\n            cube([80, 5, 35], center=true);\n}\n\n// Bar footrest\nmodule footrest() {\n    // Left post\n    translate([-30, 20, 10])\n        cylinder(h=20, r=2);\n    \n    // Right post\n    translate([30, 20, 10])\n        cylinder(h=20, r=2);\n    \n    // Rest bar\n    translate([0, 20, 2.5])\n        rotate([90, 0, 0])\n        cylinder(h=60, r=2.5);\n}\n\n// Shelves behind bar\nmodule shelves() {\n    // Back wall\n    translate([0, -27.5, 20])\n        cube([76, 3, 40], center=true);\n    \n    // Bottom shelf\n    translate([0, -26, 25])\n        cube([70, 2, 15], center=true);\n    \n    // Top shelf\n    translate([0, -26, 35])\n        cube([70, 2, 10], center=true);\n    \n    // Shelf supports\n    for(x=[-30, -15, 0, 15, 30]) {\n        translate([x, -26, 30])\n            cube([2, 2, 10], center=true);\n    }\n}\n\n// Bottles on shelves\nmodule bottles() {\n    // Bottom shelf bottles\n    for(x=[-25, -15, -5, 5, 15, 25]) {\n        translate([x, -26, 32.5])\n            cylinder(h=12, r=3);\n    }\n    \n    // Top shelf bottles\n    for(x=[-20, -10, 0, 10, 20]) {\n        translate([x, -26, 42])\n            cylinder(h=10, r=2.5);\n    }\n}\n\n// Bar stools\nmodule stool(x_pos) {\n    // Seat\n    translate([x_pos, 0, 10])\n        cylinder(h=2, r=8);\n    \n    // Legs\n    for(angle=[0:90:270]) {\n        translate([x_pos, 0, 5]) {\n            rotate([0, 0, angle])\n                translate([6, 0, 0])\n                    cylinder(h=10, r=1.5);\n        }\n    }\n    \n    // Support ring\n    translate([x_pos, 0, 3])\n        cylinder(h=1, r=5);\n}\n\n// Glasses hanging\nmodule glasses() {\n    // Rack\n    translate([0, -20, 33])\n        cube([60, 1, 1], center=true);\n    \n    // Glasses\n    for(x=[-25, -15, -5, 5, 15, 25]) {\n        translate([x, -20, 30])\n            difference() {\n                cylinder(h=5, r=3);\n                translate([0, 0, 1])\n                    cylinder(h=5, r=2.5);\n            }\n    }\n}\n\n// Main assembly\nunion() {\n    bar_counter();\n    footrest();\n    shelves();\n    bottles();\n    stool(-25);\n    stool(0);\n    stool(25);\n    glasses();\n}",
    "renders": true
  },
  {
    "vehicle": "lounge",
    "openscad_code": "// Realistic 3D-printable lounge chair\n// Dimensions optimized for 3D printing: ~80 mm length\n\n// Overall scale factor\nscale_factor = 0.8;\n\nmodule lounge_chair() {\n    // Base frame\n    difference() {\n        // Main frame body\n        translate([0, 0, 5])\n            cube([60, 25, 10], center = true);\n        \n        // Hollow interior for material saving\n        translate([0, 0, 7])\n            cube([55, 20, 8], center = true);\n    }\n    \n    // Back support\n    difference() {\n        // Angled backrest\n        rotate([15, 0, 0])\n            translate([0, -10, 15])\n                cube([55, 5, 30], center = true);\n        \n        // Backrest holes for weight reduction\n        for (i = [-20:10:20]) {\n            translate([i, -10, 15])\n                rotate([15, 0, 0])\n                    cylinder(h = 7, r = 2, $fn = 16);\n        }\n    }\n    \n    // Seat surface\n    difference() {\n        translate([0, 0, 15])\n            cube([55, 25, 5], center = true);\n        \n        // Seat grooves for comfort\n        for (i = [-20:10:20]) {\n            translate([i, 0, 17])\n                cube([2, 23, 2], center = true);\n        }\n    }\n    \n    // Left armrest\n    translate([-30, 0, 22])\n        difference() {\n            cube([5, 25, 15]);\n            translate([2, 2, 2])\n                cube([3, 21, 11]);\n        }\n    \n    // Right armrest\n    translate([30, 0, 22])\n        difference() {\n            cube([5, 25, 15]);\n            translate([0, 2, 2])\n                cube([3, 21, 11]);\n        }\n    \n    // Front legs\n    // Left front leg\n    translate([-25, 12, 0])\n        cylinder(h = 15, r = 3, $fn = 16);\n    \n    // Right front leg\n    translate([25, 12, 0])\n        cylinder(h = 15, r = 3, $fn = 16);\n    \n    // Back legs (shorter for recline)\n    // Left back leg\n    translate([-25, -12, 0])\n        cylinder(h = 12, r = 3, $fn = 16);\n    \n    // Right back leg\n    translate([25, -12, 0])\n        cylinder(h = 12, r = 3, $fn = 16);\n    \n    // Support bars between legs\n    // Front bar\n    translate([0, 12, 7])\n        cube([50, 3, 3], center = true);\n    \n    // Back bar\n    translate([0, -12, 6])\n        cube([50, 3, 3], center = true);\n    \n    // Side bars\n    translate([-25, 0, 7])\n        cube([3, 24, 3], center = true);\n    translate([25, 0, 7])\n        cube([3, 24, 3], center = true);\n}\n\n// Main assembly\nscale([scale_factor, scale_factor, scale_factor])\n    lounge_chair();",
    "renders": true
  },
  {
    "vehicle": "panorama",
    "openscad_code": "// Panorama diorama – realistic style, medium complexity  \n// 80 mm wide × 60 mm deep × 50 mm high (fits most FDM printers)\n\n$fn = 36;\n\n// overall scale factor\nSCALE = 1;        // change to 0.5 etc. if printer is small\n\n// basic dimensions (mm)\nGROUND_W = 80 * SCALE;\nGROUND_D = 60 * SCALE;\nGROUND_H =  5 * SCALE;\n\nHILL_H   = 25 * SCALE;\nHILL_R   = 35 * SCALE;\n\nTREE_TRUNK_H = 15 * SCALE;\nTREE_TRUNK_R =  2 * SCALE;\nTREE_CROWN_R =  8 * SCALE;\n\nHOUSE_W = 12 * SCALE;\nHOUSE_D = 12 * SCALE;\nHOUSE_H = 10 * SCALE;\nROOF_H  =  6 * SCALE;\n\nCLOUD_R =  8 * SCALE;\n\n// printable wall thickness everywhere ≥ 1.2 mm\nWALL = 1.2 * SCALE;\n\nmodule ground() {\n    difference() {\n        // main block\n        cube([GROUND_W, GROUND_D, GROUND_H], center = false);\n        // cavity underneath to save material and avoid warping\n        translate([WALL, WALL, -1])\n            cube([GROUND_W - 2*WALL, GROUND_D - 2*WALL, GROUND_H + 2]);\n    }\n}\n\nmodule hill(x, z) {\n    translate([x, GROUND_D/2, GROUND_H]) {\n        scale([1.2, 0.7, 1])\n            cylinder(h = HILL_H, r1 = HILL_R, r2 = 0, center = false);\n    }\n}\n\nmodule tree(x, y) {\n    translate([x, y, GROUND_H]) {\n        // trunk\n        cylinder(h = TREE_TRUNK_H, r = TREE_TRUNK_R, center = false);\n        // crown (3 intersecting spheres for fluffy look)\n        translate([0, 0, TREE_TRUNK_H])\n            sphere(r = TREE_CROWN_R);\n        translate([TREE_CROWN_R*0.4, 0, TREE_TRUNK_H+TREE_CROWN_R*0.3])\n            sphere(r = TREE_CROWN_R*0.7);\n        translate([-TREE_CROWN_R*0.4, 0, TREE_TRUNK_H+TREE_CROWN_R*0.3])\n            sphere(r = TREE_CROWN_R*0.7);\n    }\n}\n\nmodule house(x, y) {\n    translate([x, y, GROUND_H]) {\n        // walls\n        cube([HOUSE_W, HOUSE_D, HOUSE_H], center = false);\n        // simple peaked roof\n        translate([-1, -1, HOUSE_H])\n            cube([HOUSE_W+2, HOUSE_D+2, ROOF_H], center = false);\n        translate([HOUSE_W/2, HOUSE_D/2, HOUSE_H + ROOF_H])\n            rotate([0, 0, 45])\n                cube([sqrt(2)*(HOUSE_W+2), sqrt(2)*(HOUSE_D+2), 0.1], center = true);\n    }\n}\n\nmodule cloud(x, y, z) {\n    translate([x, y, z]) {\n        // three overlapping spheres for fluffy cloud\n        sphere(r = CLOUD_R);\n        translate([CLOUD_R*0.7, CLOUD_R*0.2, 0])\n            sphere(r = CLOUD_R*0.8);\n        translate([-CLOUD_R*0.7, CLOUD_R*0.2, 0])\n            sphere(r = CLOUD_R*0.8);\n    }\n}\n\n// build the scene\nunion() {\n    // base terrain\n    ground();\n    // two hills\n    hill(GROUND_W*0.25, 0);\n    hill(GROUND_W*0.75, 0);\n\n    // small forest\n    for (i = [0:2]) {\n        tree(GROUND_W*0.15 + i*8*SCALE, GROUND_D*0.2);\n        tree(GROUND_W*0.65 + i*5*SCALE, GROUND_D*0.75);\n    }\n\n    // tiny village\n    house(GROUND_W*0.5 - HOUSE_W/2, GROUND_D*0.4 - HOUSE_D/2);\n\n    // clouds floating above\n    cloud(GROUND_W*0.2, GROUND_D*0.8, GROUND_H + HILL_H + 15*SCALE);\n    cloud(GROUND_W*0.6, GROUND_D*0.7, GROUND_H + HILL_H + 18*SCALE);\n}",
    "renders": true
  },
  {
    "vehicle": "dome",
    "openscad_code": "// Geodesic-style dome with base ring and observation hatch\n// Printable, ~80 mm diameter, 2 mm wall thickness\n\n$fn = 60;                      // Smooth curves\n\n// Overall dimensions\ndome_radius = 40;              // mm\nwall_thickness = 2;            // mm for printing\nbase_height = 10;              // mm\nhatch_diameter = 20;           // mm\n\nmodule dome_shell(r) {\n    // Hollow sphere\n    difference() {\n        sphere(r = r);\n        sphere(r = r - wall_thickness);\n    }\n}\n\nmodule dome_base() {\n    // Ring base with slight taper\n    difference() {\n        cylinder(h = base_height, r1 = dome_radius, r2 = dome_radius - 1, center = false);\n        cylinder(h = base_height + 1, r1 = dome_radius - wall_thickness, r2 = dome_radius - wall_thickness - 1, center = false);\n    }\n}\n\nmodule reinforcement_ribs(n = 6) {\n    // Vertical ribs for structure\n    angle_step = 360 / n;\n    for (a = [0 : angle_step : 360 - angle_step]) {\n        rotate([0, 0, a])\n            translate([dome_radius - wall_thickness - 0.5, 0, base_height])\n                cube([wall_thickness, 1, dome_radius - 5]);\n    }\n}\n\nmodule observation_hatch() {\n    // Round hatch on top\n    translate([0, 0, dome_radius])\n        rotate([90, 0, 0])\n        difference() {\n            cylinder(h = 5, r = hatch_diameter / 2, center = true);\n            cylinder(h = 6, r = hatch_diameter / 2 - wall_thickness, center = true);\n        }\n}\n\nmodule hatch_frame() {\n    // Reinforcing rim around hatch\n    translate([0, 0, dome_radius])\n        rotate([90, 0, 0])\n        difference() {\n            cylinder(h = 7, r = hatch_diameter / 2 + 1, center = true);\n            cylinder(h = 8, r = hatch_diameter / 2 + 0.5, center = true);\n        }\n}\n\nmodule vents(n = 4) {\n    // Small ventilation holes near base\n    angle_step = 360 / n;\n    for (a = [45 : angle_step : 360 + 45 - angle_step]) {\n        rotate([0, 0, a])\n            translate([dome_radius - wall_thickness / 2, 0, base_height + 5])\n                rotate([90, 0, 0])\n                    cylinder(h = wall_thickness + 1, r = 2, center = true);\n    }\n}\n\n// Assembly\nunion() {\n    dome_base();\n    translate([0, 0, base_height])\n        dome_shell(dome_radius);\n    reinforcement_ribs();\n    \n    difference() {\n        translate([0, 0, base_height])\n            dome_shell(dome_radius);\n        vents();\n    }\n    \n    observation_hatch();\n    hatch_frame();\n}",
    "renders": true
  },
  {
    "vehicle": "skyview",
    "openscad_code": "// Skyview Window Frame with Glass Panes\n// Dimensions are in mm, model is ~80 mm wide, fits most FDM printers\n\n$fn = 36;  // Smooth curves for realistic look\n\n// Overall model parameters\nframe_width = 80;\nframe_thickness = 4;\nframe_depth = 12;\nglass_thickness = 2;\nmullion_width = 3;\n\n// Create the complete skyview assembly\nmodule skyview_assembly() {\n    difference() {\n        // Main frame body\n        frame();\n        \n        // Cut out openings for glass\n        glass_openings();\n    }\n    \n    // Insert glass panes\n    glass_panes();\n    \n    // Add hinges\n    hinges();\n    \n    // Add handle\n    handle();\n}\n\n// Main frame with rounded outside corners\nmodule frame() {\n    difference() {\n        // Outer frame\n        rounded_frame(frame_width, frame_width, frame_depth, frame_thickness);\n        \n        // Inner cavity for weight reduction\n        translate([frame_thickness, frame_thickness, -1])\n            cube([frame_width - 2*frame_thickness, frame_width - 2*frame_thickness, frame_depth + 2]);\n    }\n}\n\n// Helper module for rounded square frame\nmodule rounded_frame(w, h, d, t) {\n    // Create four sides with rounded edges using hull\n    hull() {\n        translate([t/2, t/2, 0]) \n            cylinder(h=d, r=t/2);\n        translate([w - t/2, t/2, 0]) \n            cylinder(h=d, r=t/2);\n        translate([w - t/2, h - t/2, 0]) \n            cylinder(h=d, r=t/2);\n        translate([t/2, h - t/2, 0]) \n            cylinder(h=d, r=t/2);\n    }\n}\n\n// Create openings for glass panes\nmodule glass_openings() {\n    pane_size = (frame_width - 4*frame_thickness - mullion_width) / 2;\n    \n    // Four openings for glass panes\n    for(x = [0, 1]) {\n        for(y = [0, 1]) {\n            translate([\n                frame_thickness + x * (pane_size + mullion_width),\n                frame_thickness + y * (pane_size + mullion_width),\n                -1\n            ])\n            cube([pane_size, pane_size, frame_depth + 2]);\n        }\n    }\n}\n\n// Add glass panes\nmodule glass_panes() {\n    pane_size = (frame_width - 4*frame_thickness - mullion_width) / 2;\n    \n    color(\"lightblue\", 0.6)  // Transparent blue for glass\n    for(x = [0, 1]) {\n        for(y = [0, 1]) {\n            translate([\n                frame_thickness + x * (pane_size + mullion_width) + pane_size/2,\n                frame_thickness + y * (pane_size + mullion_width) + pane_size/2,\n                frame_depth - glass_thickness/2\n            ])\n            cube([pane_size, pane_size, glass_thickness], center=true);\n        }\n    }\n}\n\n// Add hinges on left side\nmodule hinges() {\n    hinge_height = 8;\n    hinge_width = 6;\n    hinge_depth = 4;\n    \n    for(pos = [20, 60]) {\n        translate([0, pos, frame_depth/2]) {\n            rotate([90, 0, 0]) {\n                difference() {\n                    // Main hinge body\n                    cylinder(h=hinge_width, r=hinge_height/2);\n                    \n                    // Screw holes\n                    translate([0, 0, -1])\n                        cylinder(h=hinge_width + 2, r=1.5);\n                }\n            }\n        }\n    }\n}\n\n// Add handle on right side\nmodule handle() {\n    handle_length = 25;\n    handle_diameter = 6;\n    \n    translate([frame_width, frame_width/2, frame_depth/2]) {\n        rotate([90, 0, 90]) {\n            difference() {\n                // Main handle bar\n                cylinder(h=handle_length, r=handle_diameter/2);\n                \n                // Grip indent\n                translate([handle_length/2, 0, 0])\n                    rotate([0, 90, 0])\n                    cylinder(h=handle_diameter + 2, r=handle_diameter/4);\n            }\n        }\n    }\n}\n\n// Create the model\nskyview_assembly();",
    "renders": true
  },
  {
    "vehicle": "glass",
    "openscad_code": "// Realistic 3D-printable drinking glass (medium complexity)\n// Wall thickness 1.2 mm, 80 mm tall, 70 mm max diameter\n\n$fn = 36;\n\n// Glass body\nmodule glass_body() {\n    difference() {\n        // Outer shape: truncated cone with rounded bottom\n        union() {\n            // Main tapered wall\n            cylinder(h1 = 75, r1 = 33, r2 = 28, center = false);\n            \n            // Rounded bottom (hemisphere)\n            translate([0, 0, -1])\n            sphere(d = 66);\n        }\n        \n        // Inner cavity (leave 1.2 mm walls)\n        translate([0, 0, 1.2])\n        cylinder(h1 = 73.6, r1 = 31.8, r2 = 26.8, center = false);\n        \n        // Remove bottom hemisphere excess\n        translate([0, 0, -10])\n        cube([200, 200, 20], center = true);\n    }\n}\n\n// Base ring for stability\nmodule base_ring() {\n    difference() {\n        // Outer base ring\n        cylinder(h = 5, r1 = 36, r2 = 34, center = false);\n        \n        // Inner hollow\n        cylinder(h = 6, r1 = 32, r2 = 30, center = false);\n    }\n}\n\n// Ridges for grip (8 vertical ridges)\nmodule grip_ridges() {\n    for (i = [0:7]) {\n        rotate([0, 0, i * 45])\n        translate([30, 0, 5])\n        cube([2.5, 2, 60], center = true);\n    }\n}\n\n// Rim reinforcement (thicker top edge)\nmodule rim_reinforce() {\n    difference() {\n        // Outer rim\n        translate([0, 0, 74])\n        cylinder(h = 3, r1 = 29.2, r2 = 29.2, center = false);\n        \n        // Inner rim hollow\n        translate([0, 0, 74])\n        cylinder(h = 4, r1 = 27.2, r2 = 27.2, center = false);\n    }\n}\n\n// Combine all parts\nunion() {\n    glass_body();\n    \n    translate([0, 0, 0])\n    base_ring();\n    \n    grip_ridges();\n    \n    rim_reinforce();\n}",
    "renders": true
  },
  {
    "vehicle": "vista",
    "openscad_code": "// Vista viewpoint / scenic overlook\n// Realistic style, medium complexity\n// Suitable for 3D printing, ~80 mm wide\n\n$fn = 36;\n\n// Base dimensions\nbase_w = 80;\nbase_d = 60;\nbase_h = 4;\n\n// Posts\npost_w = 4;\npost_d = 4;\npost_h = 20;\n\n// Rails\nrail_h = 3;\nrail_d = 3;\n\n// Bench\nbench_len = 35;\nbench_w = 12;\nbench_h = 2;\nleg_h = 10;\n\n// Telescope\nscope_r = 4;\nscope_len = 20;\nstand_r = 3;\nstand_h = 25;\n\nmodule vista() {\n    // Concrete pad\n    translate([0, 0, base_h/2])\n        cube([base_w, base_d, base_h], center=true);\n\n    // Left fence\n    fence(-base_w/2 + post_w/2);\n    \n    // Right fence  \n    fence(base_w/2 - post_w/2);\n\n    // Center bench\n    translate([0, base_d/4, bench_h/2 + base_h])\n        bench();\n    \n    // Telescope\n    translate([0, -base_d/3, stand_h + base_h])\n        telescope();\n}\n\nmodule fence(x_pos) {\n    // Vertical posts\n    for(y = [-base_d/2 + post_d/2, 0, base_d/2 - post_d/2])\n        translate([x_pos, y, post_h/2 + base_h])\n            cube([post_w, post_d, post_h], center=true);\n    \n    // Top rail\n    translate([x_pos, 0, base_h + post_h - rail_h/2])\n        cube([post_w, base_d - post_d, rail_h], center=true);\n    \n    // Mid rail\n    translate([x_pos, 0, base_h + post_h/2])\n        cube([post_w, base_d - post_d, rail_h], center=true);\n}\n\nmodule bench() {\n    // Seat\n    cube([bench_len, bench_w, bench_h], center=true);\n    \n    // Left leg\n    translate([-bench_len/3, 0, -leg_h/2])\n        cube([post_w, bench_w, leg_h], center=true);\n    \n    // Right leg\n    translate([bench_len/3, 0, -leg_h/2])\n        cube([post_w, bench_w, leg_h], center=true);\n    \n    // Backrest\n    translate([0, -bench_w/2 + bench_h/2, bench_h])\n        cube([bench_len, bench_h, bench_h*4], center=true);\n}\n\nmodule telescope() {\n    // Stand pole\n    cylinder(h = stand_h, r = stand_r);\n    \n    // Mount\n    translate([0, 0, stand_h])\n        sphere(r = stand_r*1.2);\n    \n    // Scope body\n    rotate([0, 90, 0])\n        translate([0, 0, -scope_len/2])\n            cylinder(h = scope_len, r = scope_r);\n    \n    // Eyepiece\n    translate([0, -scope_len/2, stand_h])\n        cylinder(h = 5, r = scope_r*0.6);\n}\n\nvista();",
    "renders": true
  },
  {
    "vehicle": "scenic",
    "openscad_code": "// Scenic Mountain Landscape with Trees and Cabin\n// Realistic style, medium complexity, 3D printable\n\n// Overall dimensions: 80x60x30mm\n\n$fn = 32;  // Smooth curves for 3D printing\n\n// Mountain base module\nmodule mountain_base() {\n    // Main mountain shape\n    union() {\n        // Central peak\n        translate([0, 0, 0]) {\n            cylinder(h1 = 25, h2 = 0, r1 = 30, r2 = 15, $fn = 6);\n        }\n        \n        // Left foothill\n        translate([-25, 5, 0]) {\n            cylinder(h1 = 15, h2 = 0, r1 = 20, r2 = 10, $fn = 6);\n        }\n        \n        // Right foothill\n        translate([25, 5, 0]) {\n            cylinder(h1 = 18, h2 = 0, r1 = 22, r2 = 12, $fn = 6);\n        }\n    }\n}\n\n// Tree module\nmodule tree(trunk_height, canopy_radius) {\n    union() {\n        // Trunk\n        color(\"brown\")\n        cylinder(h = trunk_height, r = 1.5, center = false);\n        \n        // Canopy - multiple layers for realism\n        translate([0, 0, trunk_height]) {\n            for(i = [0:2]) {\n                translate([0, 0, i * 2])\n                scale([1 - i*0.2, 1 - i*0.2, 1])\n                sphere(r = canopy_radius - i);\n            }\n        }\n    }\n}\n\n// Cabin module\nmodule cabin() {\n    difference() {\n        // Main structure\n        union() {\n            // Base\n            color(\"brown\")\n            cube([12, 8, 4], center = true);\n            \n            // Walls\n            color(\"tan\")\n            translate([0, 0, 2])\n            cube([10, 6, 8], center = true);\n            \n            // Roof\n            color(\"red\")\n            translate([0, 0, 6])\n            rotate([90, 0, 0])\n            cylinder(h = 12, r1 = 5, r2 = 0, center = true);\n        }\n        \n        // Door\n        translate([0, -3.1, 2])\n        cube([2, 0.5, 3], center = true);\n        \n        // Windows\n        translate([-3, -3.1, 3])\n        cube([1.5, 0.5, 1.5], center = true);\n        \n        translate([3, -3.1, 3])\n        cube([1.5, 0.5, 1.5], center = true);\n    }\n}\n\n// Generate the scene\ntranslate([0, -20, 0])\nmountain_base();\n\n// Place trees\ntranslate([-15, 10, 15]) tree(8, 3);\ntranslate([10, 15, 18]) tree(10, 4);\ntranslate([-5, 20, 12]) tree(6, 2.5);\ntranslate([20, 8, 20]) tree(12, 5);\n\n// Place cabin\ntranslate([0, -5, 25]) cabin();\n\n// Add ground plane for stability\ncolor(\"green\")\ntranslate([0, 0, -1])\ncube([80, 60, 2], center = true);\n\n// Add small rocks for detail\nmodule rock(size) {\n    color(\"gray\")\n    scale([1, 0.7, 0.5])\n    sphere(r = size);\n}\n\ntranslate([-20, -10, 0]) rock(2);\ntranslate([15, -15, 0]) rock(1.5);\ntranslate([25, 5, 0]) rock(2.5);",
    "renders": true
  },
  {
    "vehicle": "futuristic",
    "openscad_code": "// Futuristic Drone Pod - Realistic Medium Complexity\n// 3D printable with no overhangs >45°, wall thickness 1.2mm\n\n$fn = 32;\n\nmodule main_body() {\n    difference() {\n        // Main pod shell\n        hull() {\n            // Top dome\n            translate([0, 0, 15])\n                scale([1.2, 1.2, 0.8])\n                sphere(d = 40);\n            \n            // Lower cylinder\n            cylinder(h = 25, d = 45, center = true);\n        }\n        \n        // Hollow interior\n        translate([0, 0, -2])\n            cylinder(h = 30, d = 42, center = true);\n        \n        // Sensor window\n        rotate([0, -30, 0])\n            translate([0, 0, 15])\n                cube([25, 8, 15], center = true);\n    }\n}\n\nmodule thruster(radius, height) {\n    // Ring thruster assembly\n    difference() {\n        cylinder(h = height, r = radius);\n        cylinder(h = height + 0.1, r = radius - 1.2);\n    }\n    \n    // Support struts\n    for(i = [0:120:359]) {\n        rotate([0, 0, i])\n            translate([radius - 0.6, -0.6, 0])\n                cube([1.2, 1.2, height]);\n    }\n}\n\nmodule landing_leg() {\n    // Single landing leg\n    translate([0, 0, -12.5])\n        rotate([0, 15, 0])\n            difference() {\n                // Main leg\n                linear_extrude(height = 15, convexity = 10)\n                    polygon(points = [\n                        [0, 0],\n                        [3, 0],\n                        [2.5, -12],\n                        [0.5, -12]\n                    ]);\n                \n                // Lightening holes\n                translate([1.5, -3, 7.5])\n                    rotate([90, 0, 0])\n                        cylinder(h = 3.1, d = 1.5);\n                translate([1.5, -7, 7.5])\n                    rotate([90, 0, 0])\n                        cylinder(h = 3.1, d = 1.5);\n            }\n}\n\nmodule antenna() {\n    // Main antenna mast\n    cylinder(h = 8, d = 1.5);\n    \n    // Antenna disc\n    translate([0, 0, 8])\n        cylinder(h = 0.5, d = 4);\n    \n    // Support ring\n    translate([0, 0, 4])\n        cylinder(h = 0.5, d = 3);\n}\n\nmodule sensor_array() {\n    // Camera/sensor module\n    translate([0, 0, -8])\n        difference() {\n            cylinder(h = 3, d = 8);\n            translate([0, 0, -0.1])\n                cylinder(h = 3.2, d = 5.5);\n        }\n    \n    // LED indicators\n    for(i = [0:90:270]) {\n        rotate([0, 0, i])\n            translate([3.8, 0, -7])\n                sphere(d = 1);\n    }\n}\n\n// Main assembly\nunion() {\n    // Central pod\n    main_body();\n    \n    // Four thrusters\n    for(angle = [0:90:270]) {\n        rotate([0, 0, angle])\n            translate([28, 0, 0])\n                thruster(4.5, 6);\n    }\n    \n    // Four landing legs\n    for(angle = [45:90:315]) {\n        rotate([0, 0, angle])\n            translate([18, 0, -12.5])\n                landing_leg();\n    }\n    \n    // Top antenna\n    translate([0, 0, 22])\n        antenna();\n    \n    // Bottom sensor array\n    sensor_array();\n}",
    "renders": true
  },
  {
    "vehicle": "suspended",
    "openscad_code": "// Suspended Bridge in Realistic Medium Complexity Style\n// Designed for 3D printing with proper wall thickness and no overhangs\n\n// Parameters\nbridge_length = 80;\nbridge_width = 15;\ndeck_thickness = 2;\ntower_height = 25;\ncable_diameter = 1.2;\npylon_thickness = 2;\n\n// Main module\nmodule suspended_bridge() {\n    // Bridge deck\n    translate([0, 0, deck_thickness/2])\n        cube([bridge_length, bridge_width, deck_thickness], center=true);\n    \n    // Side barriers\n    for(side = [-1, 1]) {\n        translate([0, side * (bridge_width/2 - 1), deck_thickness + 2])\n            cube([bridge_length, 1, 4], center=true);\n    }\n    \n    // Support towers\n    tower_positions = [-bridge_length/2 + 10, bridge_length/2 - 10];\n    for(pos = tower_positions) {\n        // Tower base\n        translate([pos, 0, 0])\n            cylinder(h=deck_thickness+1, r1=3, r2=3.5, center=false);\n        \n        // Tower pylons\n        for(offset = [-pylon_thickness/2, pylon_thickness/2]) {\n            translate([pos + offset, -bridge_width/4, deck_thickness+1])\n                cylinder(h=tower_height, r=0.8, center=false);\n            translate([pos + offset, bridge_width/4, deck_thickness+1])\n                cylinder(h=tower_height, r=0.8, center=false);\n        }\n        \n        // Tower cross beams\n        for(h = [deck_thickness+8, deck_thickness+16]) {\n            translate([pos - pylon_thickness/2, 0, h])\n                cube([pylon_thickness, bridge_width/2, 0.8], center=true);\n        }\n    }\n    \n    // Main cables\n    cable_height = deck_thickness + tower_height + 5;\n    for(side = [-1, 1]) {\n        hull() {\n            translate([-bridge_length/2, side * (bridge_width/2 - 3), cable_height])\n                sphere(d=cable_diameter);\n            translate([bridge_length/2, side * (bridge_width/2 - 3), cable_height])\n                sphere(d=cable_diameter);\n        }\n    }\n    \n    // Suspender cables\n    for(pos = [-bridge_length/2 + 5 : 5 : bridge_length/2 - 5]) {\n        cable_z = cable_height - abs(pos) * 0.3;\n        for(side = [-1, 1]) {\n            translate([pos, side * (bridge_width/2 - 3), cable_z])\n                cylinder(h=cable_z - deck_thickness - 1, r=cable_diameter/2, center=false);\n        }\n    }\n    \n    // Anchor blocks\n    for(pos = [-bridge_length/2 - 5, bridge_length/2 + 5]) {\n        translate([pos, 0, 0])\n            cube([6, bridge_width - 2, 4], center=true);\n    }\n    \n    // Road surface texture\n    for(i = [-bridge_length/2 + 2 : 2 : bridge_length/2 - 2]) {\n        translate([i, 0, deck_thickness + 0.1])\n            cube([0.5, bridge_width - 2, 0.2], center=true);\n    }\n}\n\n// Render the bridge\nsuspended_bridge();",
    "renders": true
  },
  {
    "vehicle": "straddle",
    "openscad_code": "// Realistic Straddle Clamp (Medium Complexity)\n// Dimensions in mm, optimized for FDM printing\n\n// Overall parameters\nwidth = 80;\nheight = 40;\ndepth = 30;\nwall = 4;\nscrew_d = 8;\nknob_d = 20;\n\n// Main body with clamping slot\nmodule main_body() {\n    difference() {\n        // Solid block\n        cube([width, depth, height], center=true);\n        \n        // Clamping gap\n        translate([0, depth/2 - 1, 0])\n            cube([width - 2*wall, 2, height], center=true);\n        \n        // Screw hole (vertical)\n        translate([0, 0, -height/2 - 1])\n            cylinder(h=height + 2, d=screw_d + 1, center=false, $fn=32);\n        \n        // Side cutouts for flexibility\n        for(y=[-1, 1]) {\n            translate([0, y * (depth/2 - wall - 2), -height/4])\n                cube([width - 2*wall, 6, height/2], center=true);\n        }\n    }\n}\n\n// Reinforcement ribs\nmodule ribs() {\n    for(x=[-width/3, 0, width/3]) {\n        translate([x, 0, 0])\n            cube([2, depth - 2*wall, height - 2*wall], center=true);\n    }\n}\n\n// Clamp knob\nmodule knob() {\n    difference() {\n        // Main knob body\n        cylinder(h=10, d=knob_d, center=true, $fn=64);\n        \n        // Knurling pattern\n        for(i=[0:30:359]) {\n            rotate([0, 0, i])\n                translate([knob_d/2 - 2, 0, -6])\n                    cube([4, 1, 12], center=true);\n        }\n        \n        // Central hole\n        translate([0, 0, -6])\n            cylinder(h=12, d=screw_d, center=false, $fn=32);\n    }\n}\n\n// Threaded insert mount\nmodule insert_mount() {\n    difference() {\n        // Mount boss\n        translate([0, 0, height/2 + 5])\n            cylinder(h=10, d=screw_d + 6, center=true, $fn=32);\n        \n        // Through hole (tapered)\n        translate([0, 0, height/2 + 10])\n            cylinder(h=10, d1=screw_d + 1, d2=screw_d + 2, center=false, $fn=32);\n    }\n}\n\n// Base mounting holes\nmodule base_holes() {\n    for(x=[-width/3, width/3]) {\n        for(y=[-depth/3, depth/3]) {\n            translate([x, y, -height/2 - 1])\n                cylinder(h=height + 2, d=4, center=false, $fn=16);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    main_body();\n    ribs();\n    insert_mount();\n    \n    // Knob positioned above screw\n    translate([0, 0, height/2 + 15])\n        knob();\n    \n    // Remove base mounting holes\n    difference() {\n        children();\n        base_holes();\n    }\n}\n\n// Optional: Add chamfers for printability\nmodule chamfers() {\n    translate([0, 0, height/2])\n        cylinder(h=1, d=width + 2, center=true, $fn=64);\n    translate([0, 0, -height/2])\n        cylinder(h=1, d=width + 2, center=true, $fn=64);\n}\n\n// Apply chamfers only to outer edges\ndifference() {\n    main_body();\n    translate([0, 0, height/2 + 0.5])\n        cube([width + 2, depth + 2, 1], center=true);\n    translate([0, 0, -height/2 - 0.5])\n        cube([width + 2, depth + 2, 1], center=true);\n}",
    "renders": true
  },
  {
    "vehicle": "guideway",
    "openscad_code": "// Realistic 3D-printable guideway segment (maglev-style)\n// Roughly 80 mm long, 40 mm wide, 20 mm high\n// No overhangs >45°, 1.2 mm wall thickness\n\n$fn = 32;\n\nmodule guideway_segment(length = 80, width = 40, height = 20) {\n    // Main I-beam spine\n    difference() {\n        // Outer profile\n        union() {\n            // Top flange\n            translate([0, 0, height - 4])\n                cube([length, width, 4], center = true);\n            // Web\n            cube([length, 3, height - 8], center = true);\n            // Bottom flange\n            translate([0, 0, 2])\n                cube([length, width, 4], center = true);\n        }\n        // Lightening holes in web\n        for (i = [-length/2 + 10 : 20 : length/2 - 10])\n            translate([i, 0, height/2])\n                rotate([90, 0, 0])\n                    cylinder(h = 3.5, d = 6, center = true);\n    }\n\n    // Running surface plates (maglev reaction rail)\n    translate([0, 0, height - 2.2])\n        cube([length, width - 8, 1.5], center = true);\n\n    // Lateral guidance rails\n    for (side = [-1, 1]) {\n        translate([0, side * (width/2 - 2), height - 5])\n            cube([length, 4, 5], center = true);\n    }\n\n    // Mounting pads every 20 mm\n    for (i = [-length/2 + 10 : 20 : length/2 - 10]) {\n        translate([i, 0, 0])\n            cube([6, 8, 2], center = true);\n    }\n\n    // Chamfers on bottom edges\n    difference() {\n        cube([length, width, height], center = true);\n        // Chamfer cuts\n        for (x = [-length/2, length/2])\n            for (y = [-width/2, width/2])\n                translate([x, y, 0])\n                    mirror([0, 0, 1])\n                        cube([6, 6, 3], center = false);\n    }\n}\n\n// End cap with alignment pins\nmodule end_cap() {\n    difference() {\n        union() {\n            // Main block\n            translate([0, 0, 10])\n                cube([2, 36, 18], center = true);\n            // Alignment pins\n            for (y = [-12, 0, 12])\n                translate([-1.5, y, 10])\n                    cylinder(h = 3, d = 4, center = true);\n        }\n        // Pin holes on opposite face\n        for (y = [-12, 0, 12])\n            translate([1.5, y, 10])\n                cylinder(h = 3, d = 4.2, center = true);\n    }\n}\n\n// Assemble complete guideway\nunion() {\n    guideway_segment();\n    // End caps\n    translate([40, 0, 0])\n        end_cap();\n    translate([-40, 0, 0])\n        mirror([1, 0, 0])\n            end_cap();\n}",
    "renders": true
  },
  {
    "vehicle": "track",
    "openscad_code": "// Realistic tank track segment – 3D-printable single link\n// One link is ~11 mm wide; print 30–35 copies to build a 100 mm closed loop.\n\ntrack_width   = 11;      // overall width\nlink_length   = 8.5;     // front-to-back pitch\nlink_thick    = 1.8;     // printable wall thickness\npin_d         = 2.2;     // hinge pin diameter\npin_len       = track_width + 1;\n\nmodule half_clear() {\n    // clearance cavity for the next link\n    translate([0, -link_thick/2, track_width/2])\n        cube([link_length*0.9, link_thick+0.2, track_width*0.42], center=true);\n}\n\nmodule link_body() {\n    difference() {\n        // main body – slight taper toward top for realism\n        hull() {\n            translate([link_length/2, 0, 0])\n                cube([link_length, link_thick, track_width], center=true);\n            translate([-link_length/2, 0, 0])\n                scale([0.85, 1, 0.92])\n                    cube([link_length, link_thick, track_width], center=true);\n        }\n\n        // pin holes\n        for(x=[link_length/2 - 1.2, -link_length/2 + 1.2])\n            rotate([0, 90, 0])\n                translate([0, 0, x])\n                    cylinder(h=pin_len, d=pin_d, $fn=12);\n\n        // clearance cavities\n        half_clear();\n        mirror([0, 0, 1]) half_clear();\n    }\n\n    // outer guiding rib\n    translate([0, link_thick/2 + 0.4, 0])\n        cube([link_length*0.8, 0.8, track_width*0.9], center=true);\n\n    // inner guiding rib\n    translate([0, -link_thick/2 - 0.4, 0])\n        cube([link_length*0.8, 0.8, track_width*0.9], center=true);\n}\n\nlink_body();",
    "renders": true
  },
  {
    "vehicle": "beam",
    "openscad_code": "// Realistic I-beam for 3D printing (≈80 mm long)\n// Medium complexity: flanges with bolt holes, rounded edges, fillets, and web stiffeners\n\n$fn = 32;                       // Smooth curves\nbeam_length = 80;               // [mm]\nflange_width = 30;\nflange_thickness = 4;\nweb_thickness = 3;\nweb_height = 30;\n\nbolt_hole_d = 4.2;              // Clearance for M4 bolt\nbolt_spacing = 20;\nbolt_edge = 7;\nfillet_r = 2;\n\n// Helper: rounded box for flanges\nmodule rounded_box(w, h, d, r) {\n    translate([0, 0, -d/2])\n    minkowski() {\n        cube([w - 2*r, h - 2*r, d], center = true);\n        cylinder(r = r, h = d);\n    }\n}\n\n// Helper: pattern of bolt holes along length\nmodule bolt_holes(len) {\n    for (i = [0 : 1 : floor((len - 2*bolt_edge)/bolt_spacing)]) {\n        translate([bolt_edge + i*bolt_spacing, 0, 0])\n            rotate([90, 0, 0])\n                cylinder(d = bolt_hole_d, h = flange_width + 0.1, $fn = 16);\n    }\n}\n\n// Top flange with holes\nmodule top_flange() {\n    difference() {\n        rounded_box(flange_width, beam_length, flange_thickness, fillet_r);\n        bolt_holes(beam_length);\n    }\n}\n\n// Bottom flange (mirrored top)\nmodule bottom_flange() {\n    mirror([0, 0, 1])\n        top_flange();\n}\n\n// Web with stiffeners\nmodule web() {\n    // Main web plate\n    translate([0, 0, 0])\n        cube([web_thickness, beam_length, web_height]);\n\n    // Triangular stiffeners every 15 mm\n    for (y = [7.5 : 15 : beam_length - 7.5]) {\n        translate([0, y, 0]) {\n            mirror([0, 0, 1]) {\n                linear_extrude(height = web_thickness, center = true, convexity = 2)\n                    polygon(points = [\n                        [-web_height/2, -web_height/2],\n                        [web_height/2, -web_height/2],\n                        [0, 0]\n                    ]);\n            }\n        }\n    }\n}\n\n// Chamfer the ends slightly for printability\nmodule end_chamfer() {\n    hull() {\n        translate([0, beam_length/2, 0])\n            cube([web_thickness + 2, 0.1, web_height + 2*flange_thickness], center = true);\n        translate([0, beam_length/2 + 2, 0])\n            scale([0.9, 1, 0.9])\n                cube([web_thickness + 2, 0.1, web_height + 2*flange_thickness], center = true);\n    }\n}\n\n// Assemble beam\nunion() {\n    // Center entire beam at origin\n    translate([0, 0, 0]) {\n        top_flange();\n        bottom_flange();\n        web();\n    }\n\n    // Chamfers on both ends\n    translate([0, -beam_length/2, 0]) end_chamfer();\n    mirror([0, 1, 0]) translate([0, -beam_length/2, 0]) end_chamfer();\n}",
    "renders": true
  },
  {
    "vehicle": "tube",
    "openscad_code": "// Realistic 3D-printable tube with medium complexity\n// Tube with wall thickness, threaded ends, hex flats and internal bore\n\n$fn = 36;  // Smooth curves for 3D printing\n\n// Main parameters\ntube_length = 80;\ntube_od = 20;\ntube_wall = 2;\nthread_pitch = 2;\nthread_depth = 1;\nhex_size = 22;  // Flat-to-flat distance\n\nmodule tube_body() {\n    // Outer tube\n    difference() {\n        cylinder(h=tube_length, d=tube_od, center=true);\n        // Inner bore\n        cylinder(h=tube_length + 1, d=tube_od - 2*tube_wall, center=true);\n    }\n}\n\nmodule hex_flats() {\n    // Create hexagonal wrench flats near each end\n    for (i = [-1, 1]) {\n        translate([0, 0, i * tube_length/3]) {\n            intersection() {\n                cylinder(h=10, d=hex_size*1.15, center=true);\n                rotate([0, 0, 30])  // Align hex with 6 sides\n                cylinder(h=12, d=hex_size/cos(30), $fn=6, center=true);\n            }\n        }\n    }\n}\n\nmodule threads() {\n    // Male threads on ends\n    module thread_ring(height) {\n        difference() {\n            cylinder(h=thread_depth, d=tube_od + thread_depth, center=false);\n            cylinder(h=thread_depth + 0.1, d=tube_od, center=false);\n        }\n    }\n    \n    // Create threaded sections at each end\n    for (end = [-1, 1]) {\n        for (i = [0:thread_pitch:10]) {\n            translate([0, 0, end * (tube_length/2 - i)]) {\n                rotate([0, 90, 0])  // Rotate thread profile\n                thread_ring(i);\n            }\n        }\n    }\n}\n\nmodule end_chamfers() {\n    // Add 45° chamfers to tube ends for easier assembly\n    for (end = [-1, 1]) {\n        translate([0, 0, end * tube_length/2]) {\n            difference() {\n                cylinder(h=tube_wall, d1=tube_od, d2=tube_od - tube_wall, center=false);\n                cylinder(h=tube_wall + 0.1, d1=tube_od - 2*tube_wall, d2=tube_od - 2*tube_wall, center=false);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    tube_body();\n    hex_flats();\n    threads();\n    end_chamfers();\n}\n\n// Optional: center the model for printing\ntranslate([0, 0, 0])",
    "renders": true
  },
  {
    "vehicle": "tunnel",
    "openscad_code": "// Realistic 3D-printable tunnel module\n// Overall size ~75 mm long, 40 mm wide, 25 mm high\n\n$fn = 36;\n\n// Main tunnel body\nmodule tunnel_body() {\n    difference() {\n        hull() {\n            // Top and bottom half-cylinders form smooth vault\n            translate([0, 0, 15]) rotate([90,0,0]) cylinder(h=40, d=30, center=true);\n            translate([0, 0, -5]) rotate([90,0,0]) cylinder(h=40, d=30, center=true);\n        }\n        // Hollow inside\n        translate([0, 0, 5]) rotate([90,0,0]) cylinder(h=45, d=24, center=true);\n    }\n}\n\n// Portal ring at each end\nmodule portal_ring() {\n    difference() {\n        // Outer thick ring\n        cylinder(h=4, d=34);\n        // Inner hole\n        translate([0,0,-0.1]) cylinder(h=4.2, d=26);\n    }\n}\n\n// Rock-texture blocks on sides\nmodule rock_blocks(count=8) {\n    for(i=[0:count-1]) {\n        translate([\n            0,\n            -20 + i*5,\n            sin(i*25)*3 + 5\n        ]) {\n            scale([1+sin(i*30)*0.2, 1+sin(i*45)*0.2, 1+sin(i*60)*0.2])\n                cube([3, 4, 3], center=true);\n        }\n    }\n}\n\n// Track bed inside\nmodule track_bed() {\n    translate([0, 0, -4])\n        cube([75, 28, 4], center=true);\n}\n\n// Wooden sleepers under track\nmodule sleepers(count=7) {\n    for(i=[0:count-1]) {\n        translate([-30 + i*10, 0, -3]) \n            cube([8, 32, 2], center=true);\n    }\n}\n\n// Main assembly\nunion() {\n    // Tunnel body\n    tunnel_body();\n    \n    // Front portal\n    translate([0, 0, 0]) portal_ring();\n    \n    // Back portal\n    translate([0, 0, 40]) portal_ring();\n    \n    // Track bed\n    track_bed();\n    \n    // Sleepers\n    sleepers();\n    \n    // Side rock textures\n    translate([-15, 0, 0]) rock_blocks();\n    translate([15, 0, 0]) mirror([1,0,0]) rock_blocks();\n}",
    "renders": true
  },
  {
    "vehicle": "elevated",
    "openscad_code": "// Elevated Train Track Section\n// Realistic style, medium complexity\n\n$fn = 50;\n\n// Overall dimensions\ntrack_length = 80;\ntrack_width = 40;\npillar_height = 35;\ndeck_thickness = 3;\n\n// Track parameters\nrail_height = 3;\nrail_width = 2;\nrail_spacing = 20;\nsleeper_width = 28;\nsleeper_height = 2;\nsleeper_spacing = 10;\n\n// Pillar parameters\npillar_width = 6;\npillar_wall = 2;\n\n// Support beam parameters\nbeam_width = 5;\nbeam_height = 8;\n\nmodule rail_profile() {\n    // Main rail\n    translate([0, 0, rail_height/2])\n        cube([rail_width, rail_width, rail_height], center=true);\n    \n    // Rail head\n    translate([0, 0, rail_height - 0.5])\n        cube([rail_width + 1, rail_width + 1, 1], center=true);\n}\n\nmodule sleeper() {\n    color(\"brown\")\n    translate([0, 0, sleeper_height/2])\n        cube([sleeper_width, sleeper_height, track_width], center=true);\n}\n\nmodule track_section() {\n    // Rails\n    translate([-rail_spacing/2, 0, sleeper_height])\n        rail_profile();\n    translate([rail_spacing/2, 0, sleeper_height])\n        rail_profile();\n    \n    // Sleepers\n    for(i = [-track_length/2 + sleeper_spacing/2 : sleeper_spacing : track_length/2 - sleeper_spacing/2]) {\n        translate([i, 0, 0])\n            sleeper();\n    }\n    \n    // Track bed\n    color(\"gray\")\n    translate([0, 0, -deck_thickness/2])\n        cube([track_length + 4, sleeper_width, deck_thickness], center=true);\n}\n\nmodule pillar() {\n    color(\"lightblue\")\n    difference() {\n        // Main pillar\n        translate([0, 0, pillar_height/2])\n            cube([pillar_width, pillar_width, pillar_height], center=true);\n        \n        // Hollow center\n        translate([0, 0, pillar_height/2])\n            cube([pillar_width - pillar_wall*2, pillar_width - pillar_wall*2, pillar_height + 0.1], center=true);\n    }\n}\n\nmodule support_beam() {\n    color(\"gray\")\n    translate([0, 0, pillar_height - beam_height/2])\n        cube([track_length + 10, beam_width, beam_height], center=true);\n}\n\nmodule foundation() {\n    color(\"darkgray\")\n    translate([0, 0, -deck_thickness - 2])\n        cube([pillar_width + 4, pillar_width + 4, 2], center=true);\n}\n\n// Main assembly\ndifference() {\n    union() {\n        // Track deck\n        translate([0, 0, pillar_height + deck_thickness/2 + beam_height])\n            cube([track_length + 4, track_width, deck_thickness], center=true);\n        \n        // Track assembly\n        translate([0, 0, pillar_height + beam_height + deck_thickness])\n            track_section();\n        \n        // Support beams\n        support_beam();\n        \n        // Pillars\n        for(x = [-track_length/3, 0, track_length/3]) {\n            for(y = [-track_width/3, track_width/3]) {\n                translate([x, y, 0])\n                    pillar();\n                translate([x, y, 0])\n                    foundation();\n            }\n        }\n    }\n    \n    // Optional: Add holes for pegs/connectors\n    for(x = [-track_length/2 + 5, track_length/2 - 5]) {\n        for(y = [-track_width/2 + 5, track_width/2 - 5]) {\n            translate([x, y, pillar_height + beam_height + deck_thickness + sleeper_height + 5])\n                cylinder(h=10, r=1.5, center=true);\n        }\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "subsurface",
    "openscad_code": "// Realistic Submarine - Medium Complexity\n// Designed for 3D printing with no extreme overhangs\n\n$fn = 32;  // Smooth curves for printing\n\n// Overall dimensions\nhull_length = 80;\nhull_diameter = 20;\nnose_length = 15;\ntail_length = 12;\n\n// Wall thickness for 3D printing\nwall = 1.5;\n\n// Main hull with hollow interior\nmodule main_hull() {\n    difference() {\n        // Outer hull\n        union() {\n            // Cylindrical body\n            translate([0, 0, hull_diameter/2])\n                rotate([90, 0, 0])\n                    cylinder(h=hull_length, d=hull_diameter);\n            \n            // Tapered nose cone\n            translate([-hull_length/2 - nose_length/2, 0, hull_diameter/2])\n                rotate([90, 0, 0])\n                    cylinder(h=nose_length, d1=hull_diameter, d2=hull_diameter*0.4);\n            \n            // Tapered tail cone\n            translate([hull_length/2 + tail_length/2, 0, hull_diameter/2])\n                rotate([90, 0, 0])\n                    cylinder(h=tail_length, d1=hull_diameter*0.4, d2=hull_diameter);\n        }\n        \n        // Hollow interior\n        translate([0, 0, hull_diameter/2])\n            rotate([90, 0, 0])\n                cylinder(h=hull_length + nose_length + tail_length + 2, d=hull_diameter - 2*wall);\n    }\n}\n\n// Sail (conning tower)\nmodule sail() {\n    translate([0, 0, hull_diameter/2 + 8])\n        difference() {\n            // Outer sail\n            cube([12, 6, 12], center=true);\n            \n            // Hollow interior\n            cube([12 - 2*wall, 6 - 2*wall, 12 - wall], center=true);\n        }\n}\n\n// Periscope\nmodule periscope() {\n    translate([0, 0, hull_diameter/2 + 8 + 12])\n        cylinder(h=8, d=2);\n}\n\n// Propeller with 4 blades\nmodule propeller() {\n    translate([hull_length/2 + tail_length + 2, 0, hull_diameter/2])\n        for(i=[0:3]) {\n            rotate([0, 0, i*90])\n                translate([0, 0, 0])\n                    rotate([90, 0, 0])\n                        cylinder(h=8, d1=2, d2=0.5);\n        }\n}\n\n// Dive planes (horizontal stabilizers)\nmodule dive_planes() {\n    // Front planes\n    translate([-hull_length/4, 0, hull_diameter/2])\n        rotate([0, 0, 0])\n            cube([15, 1, 5], center=true);\n    \n    // Rear planes\n    translate([hull_length/4, 0, hull_diameter/2])\n        rotate([0, 0, 0])\n            cube([12, 1, 4], center=true);\n}\n\n// Vertical rudder\nmodule rudder() {\n    translate([hull_length/2 + tail_length/2, 0, hull_diameter/2])\n        cube([3, 1, 10], center=true);\n}\n\n// Portholes along the hull\nmodule portholes() {\n    for(i=[-3:3]) {\n        translate([i*10, hull_diameter/2 - wall/2, hull_diameter/2])\n            rotate([0, 90, 0])\n                cylinder(h=wall*2, d=3);\n    }\n}\n\n// Assembly\nunion() {\n    main_hull();\n    sail();\n    periscope();\n    propeller();\n    dive_planes();\n    rudder();\n    portholes();\n}",
    "renders": true
  },
  {
    "vehicle": "cutcover",
    "openscad_code": "// Realistic Medium-Complexity Cutcover\n// Approximate dimensions: 90 x 60 x 20 mm\n// Wall thickness: 2 mm throughout for printability\n\n// Main parameters\nwall = 2;\nbase_w = 90;\nbase_d = 60;\nbase_h = 20;\ngrip_w = 30;\ngrip_h = 12;\ngrip_d = 8;\n\n// Outer shell\nmodule outer_shell() {\n    difference() {\n        // Main box\n        cube([base_w, base_d, base_h], center=true);\n        \n        // Hollow out interior\n        translate([0,0,wall/2])\n            cube([base_w-wall*2, base_d-wall*2, base_h-wall], center=true);\n    }\n}\n\n// Finger grip on top\nmodule finger_grip() {\n    translate([0, base_d/2-grip_d/2-wall, base_h/2-grip_h/2])\n        cube([grip_w, grip_d, grip_h], center=true);\n}\n\n// Side grips\nmodule side_grips() {\n    for (side = [-1, 1]) {\n        translate([side*(base_w/2-wall/2), 0, 0])\n            rotate([0,90,0])\n                cylinder(h=30, d=wall*5, $fn=20);\n    }\n}\n\n// Cutout slot for blade access\nmodule blade_slot() {\n    translate([0, -base_d/2+wall+1, 0])\n        cube([60, wall+2, 10], center=true);\n}\n\n// Reinforcement ribs inside\nmodule ribs() {\n    for (x = [-30, 0, 30]) {\n        translate([x, 0, -base_h/2+wall+2])\n            cube([wall, base_d-wall*2, base_h-wall*2-4]);\n    }\n}\n\n// Textured grip pattern on top\nmodule grip_pattern() {\n    translate([0, 0, base_h/2-wall/2])\n    for (y = [-20:5:20]) {\n        for (x = [-35:5:35]) {\n            translate([x, y, 0])\n                cylinder(h=wall, d=1.5, $fn=8);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    outer_shell();\n    \n    // Add solid features\n    finger_grip();\n    side_grips();\n    \n    // Add internal features\n    difference() {\n        union() {\n            ribs();\n            grip_pattern();\n        }\n        // Ensure blade slot remains clear\n        blade_slot();\n    }\n}\n\n// Print orientation helper (comment out for final print)\n%translate([0, 0, -base_h/2-5])\n    cube([base_w+10, base_d+10, 1]);",
    "renders": true
  },
  {
    "vehicle": "cutandcover",
    "openscad_code": "$fn = 30;\n\n// overall external dimensions\noverall_length = 80;\noverall_width = 40;\noverall_height = 30;\n\n// wall thickness for 3D printing\nwall = 1.5;\n\n// number of track sleepers\nsleeper_count = 8;\n\n// dimensions for rail and sleeper\nrail_height = 3;\nrail_width = 1.5;\nsleeper_width = 3;\nsleeper_spacing = overall_length / sleeper_count;\n\n// top removable cover slab\nmodule cover_slab() {\n    difference() {\n        translate([0, 0, overall_height / 2 + wall / 2])\n            cube([overall_length + 2, overall_width + 2, wall], center = true);\n        translate([0, 0, overall_height / 2 + wall])\n            cube([overall_length - 2 * wall, overall_width - 2 * wall, wall], center = true);\n    }\n}\n\n// tunnel box with hollow interior\nmodule tunnel_box() {\n    difference() {\n        // outer shell\n        cube([overall_length, overall_width, overall_height], center = true);\n        // inner cavity\n        translate([0, 0, -wall / 2])\n            cube([overall_length - 2 * wall, overall_width - 2 * wall, overall_height - wall], center = true);\n    }\n}\n\n// single rail profile\nmodule rail_profile() {\n    linear_extrude(height = overall_length, center = true)\n        polygon([\n            [-rail_width / 2, 0],\n            [-rail_width / 2, rail_height],\n            [rail_width / 2, rail_height],\n            [rail_width / 2, 0]\n        ]);\n}\n\n// assemble both rails\nmodule rails() {\n    translate([0, overall_width / 4, -overall_height / 2 + rail_height / 2])\n        rotate([0, 90, 0])\n            rail_profile();\n    translate([0, -overall_width / 4, -overall_height / 2 + rail_height / 2])\n        rotate([0, 90, 0])\n            rail_profile();\n}\n\n// single sleeper\nmodule sleeper() {\n    translate([0, 0, -overall_height / 2 + rail_height + sleeper_width / 2])\n        cube([overall_width - 4 * wall, sleeper_width, sleeper_width], center = true);\n}\n\n// sleepers under rails\nmodule sleepers() {\n    for (i = [-sleeper_count / 2 : sleeper_count / 2]) {\n        translate([i * sleeper_spacing, 0, 0])\n            sleeper();\n    }\n}\n\n// drainage trench along center\nmodule drainage() {\n    translate([0, 0, -overall_height / 2 + wall / 2])\n        cube([overall_length - 4 * wall, 4, wall], center = true);\n}\n\n// assembly\nunion() {\n    tunnel_box();\n    rails();\n    sleepers();\n    drainage();\n}\ntranslate([0, 0, overall_height / 2 + wall + 1])\n    cover_slab();",
    "renders": true
  },
  {
    "vehicle": "bored",
    "openscad_code": "// Bored - Realistic Style (Medium Complexity)\n// A 3D printable bored with conical tip, knurled grip, and tungsten carbide insert\n\n// Overall dimensions (mm)\nbored_diameter = 8;\nbored_length = 80;\ntip_angle = 60;\ngrip_length = 40;\nshank_diameter = 6;\nshank_length = 30;\n\n// Wall thickness for 3D printing\nwall_thickness = 1.5;\n\n// Tolerance for tungsten insert\ninsert_tolerance = 0.2;\ninsert_diameter = 2;\ninsert_length = 8;\n\n// Knurling parameters\nknurl_count = 20;\nknurl_depth = 0.3;\nknurl_width = 1;\n\n// Flute parameters\nflute_count = 2;\nflute_width = 1.5;\nflute_depth = 0.5;\n\nmodule bored_tip() {\n    // Conical tip with flutes\n    difference() {\n        cylinder(h=bored_length/2, r1=bored_diameter/2, r2=0, $fn=50);\n        \n        // Flutes along tip\n        for(i=[0:flute_count-1]) {\n            rotate([0, 0, i*360/flute_count]) {\n                translate([-bored_diameter/2, -flute_width/2, 0]) {\n                    cube([bored_diameter+1, flute_width, bored_length/2]);\n                }\n            }\n        }\n    }\n}\n\nmodule knurled_grip() {\n    // Main grip cylinder\n    difference() {\n        cylinder(h=grip_length, d=bored_diameter, $fn=100);\n        \n        // Knurling cuts\n        for(i=[0:knurl_count-1]) {\n            rotate([0, 0, i*360/knurl_count]) {\n                translate([0, -bored_diameter/2, 0]) {\n                    cube([bored_diameter, knurl_width, grip_length]);\n                }\n            }\n        }\n    }\n}\n\nmodule shank() {\n    // Straight shank with drive end\n    difference() {\n        union() {\n            // Main shank\n            cylinder(h=shank_length, d=shank_diameter, $fn=50);\n            \n            // Drive end flat\n            translate([0, 0, shank_length-3]) {\n                cube([shank_diameter, 1, 3], center=true);\n            }\n        }\n        \n        // Tungsten insert hole\n        translate([0, 0, -1]) {\n            cylinder(h=insert_length+2, d=insert_diameter+insert_tolerance, $fn=30);\n        }\n    }\n}\n\nmodule tungsten_insert() {\n    // Actual tungsten carbide insert\n    cylinder(h=insert_length, d=insert_diameter, $fn=30);\n}\n\n// Main assembly\ntranslate([0, 0, 0]) {\n    // Bored body\n    union() {\n        // Tip\n        translate([0, 0, 0]) {\n            bored_tip();\n        }\n        \n        // Grip section\n        translate([0, 0, bored_length/2]) {\n            knurled_grip();\n        }\n        \n        // Shank\n        translate([0, 0, bored_length/2 + grip_length]) {\n            shank();\n        }\n    }\n    \n    // Tungsten insert (comment out for single material print)\n    // translate([0, 0, -1]) {\n    //     tungsten_insert();\n    // }\n}",
    "renders": true
  },
  {
    "vehicle": "immersed",
    "openscad_code": "// Immersion Blender – medium-complexity, 3D-printable model\n// 85 mm tall, wall thickness ≈ 2 mm, no overhangs beyond 45°\n\n$fn = 36;\n\n// Main dimensions ----------------------------------------------------\nmotor_h     = 50;\nmotor_r     = 22;\ngrip_r      = 26;\ngrip_h      = 25;\nshaft_r     = 5;\nshaft_l     = 75;\nblade_h     = 2;\nblade_r     = 18;\nbutton_size  = 6;\n\nmodule body() {\n    // Motor housing\n    difference() {\n        cylinder(h = motor_h, r = motor_r);\n        // Vent-slots, printable without support\n        for(i=[0:3]) {\n            rotate([0,0,i*90])\n                translate([motor_r-2, 0, motor_h-20])\n                    rotate([0,90,0])\n                        cube([20, 2, 6], center=true);\n        }\n    }\n\n    // Soft-grip sleeve\n    translate([0,0,motor_h])\n        cylinder(h = grip_h, r1 = motor_r, r2 = grip_r);\n}\n\nmodule button() {\n    // Simple rounded button\n    translate([motor_r-1, 0, motor_h/2])\n        rotate([90,0,0])\n            cylinder(h = button_size, r = button_size/2);\n}\n\nmodule shaft() {\n    // Straight drive shaft\n    translate([0,0,motor_h+grip_h])\n        cylinder(h = shaft_l, r = shaft_r);\n}\n\nmodule blades() {\n    // Four S-shaped blades, flat print\n    difference() {\n        union() {\n            for(i=[0:3]) {\n                rotate([0,0,i*90])\n                    rotate([0,0,30])\n                        translate([0,0,shaft_l])\n                            linear_extrude(height = blade_h)\n                                polygon(points=[[0,0],\n                                                [blade_r,8],\n                                                [blade_r,0]]);\n            }\n        }\n        // Central hole for shaft\n        translate([0,0,shaft_l])\n            cylinder(h = blade_h+1, r = shaft_r);\n    }\n}\n\n// Assembly -----------------------------------------------------------\nunion() {\n    body();\n    button();\n    shaft();\n    blades();\n}",
    "renders": true
  },
  {
    "vehicle": "floating",
    "openscad_code": "// Realistic floating duck – medium complexity\n// Designed for 3D printing with no overhangs >45°\n\n$fn = 32;                // Global smoothing\n\nwall = 1.4;              // 3D-printable wall thickness (mm)\nscale_factor = 0.45;     // Scales the whole model to ~70 mm length\n\nmodule duck() {\n    // Main body hull – printed as two halves to avoid overhang\n    difference() {\n        sphere(d = 45);          // Basic egg-like hull\n        translate([0, 0, -25])   // Flat bottom for printing\n            cube([100, 100, 50], center = true);\n    }\n\n    // Head sphere attached at front\n    translate([23, 0, 10])\n        sphere(d = 20);\n\n    // Bill – two cylinders fused\n    union() {\n        translate([33, 0, 10])\n            rotate([0, -10, 0])\n                cylinder(h = 12, d1 = 12, d2 = 9);\n        translate([42, 0, 10])\n            rotate([0, -10, 0])\n                cylinder(h = 2, d1 = 9, d2 = 9);\n    }\n\n    // Eyes – two small spheres\n    for (y = [-4.5, 4.5])\n        translate([27, y, 14])\n            sphere(d = 3);\n}\n\n// Wing modules – printed flat against body\nmodule wing(side) {\n    mirror([side, 0, 0]) {\n        // Main wing surface\n        translate([0, -12, 3])\n            rotate([0, 0, -20])\n                scale([1, 0.7, 0.25])\n                    sphere(d = 25);\n\n        // Raised feather ridge\n        difference() {\n            translate([0, -12, 4.5])\n                rotate([0, 0, -20])\n                    scale([0.9, 0.5, 0.4])\n                        sphere(d = 22);\n            translate([0, -12, 4.5])\n                rotate([0, 0, -20])\n                    scale([0.7, 0.4, 0.5])\n                        sphere(d = 19);\n        }\n    }\n}\n\n// Tail – printed as half-sphere cone\nmodule tail() {\n    difference() {\n        translate([-20, 0, 4])\n            rotate([0, 90, 0])\n                cylinder(h = 18, d1 = 20, d2 = 12);\n        translate([-28, 0, 4])\n            cube([20, 30, 20], center = true);\n    }\n}\n\n// Hollow shell construction\nmodule hollow(model) {\n    difference() {\n        model();\n        scale([1 - wall/50, 1 - wall/50, 1 - wall/50])\n            translate([0, 0, -wall/2])\n                model();\n    }\n}\n\n// Final assembly\nscale(scale_factor)\n    union() {\n        hollow(duck);\n        wing(1);\n        wing(-1);\n        tail();\n    }",
    "renders": true
  },
  {
    "vehicle": "bridge",
    "openscad_code": "// Realistic Bridge - Medium Complexity\n// Designed for 3D printing (no overhangs, 2mm wall thickness)\n\n// Bridge parameters\nbridge_width = 40;\nbridge_length = 80;\nbridge_height = 25;\ndeck_thickness = 3;\npier_width = 6;\narch_thickness = 3;\nrailing_height = 5;\nrailing_thickness = 2;\nroadway_width = 32;\n\n// Arch parameters\narch_segments = 20;\narch_radius = bridge_height - deck_thickness - 2;\narch_width = bridge_width - 2 * railing_thickness;\n\nmodule bridge_deck() {\n    // Main deck with slight curvature for water runoff\n    translate([0, 0, bridge_height - deck_thickness/2])\n        cube([bridge_length, bridge_width, deck_thickness], center=true);\n    \n    // Roadway surface slightly recessed\n    translate([0, 0, bridge_height - deck_thickness/2 - 0.5])\n        cube([bridge_length - 4, roadway_width, 0.5], center=true);\n}\n\nmodule bridge_piers() {\n    // Left pier\n    translate([-bridge_length/2 + pier_width/2, 0, bridge_height/2 - deck_thickness])\n        cube([pier_width, bridge_width, bridge_height], center=true);\n    \n    // Right pier\n    translate([bridge_length/2 - pier_width/2, 0, bridge_height/2 - deck_thickness])\n        cube([pier_width, bridge_width, bridge_height], center=true);\n}\n\nmodule bridge_arch() {\n    // Create arch using hull of cylinders\n    for(i = [0:arch_segments-1]) {\n        angle1 = 180 * i / arch_segments;\n        angle2 = 180 * (i+1) / arch_segments;\n        \n        x1 = (bridge_length/2 - pier_width) * cos(angle1);\n        z1 = arch_radius * sin(angle1);\n        x2 = (bridge_length/2 - pier_width) * cos(angle2);\n        z2 = arch_radius * sin(angle2);\n        \n        hull() {\n            translate([x1, -arch_width/2, z1])\n                cylinder(h=arch_thickness, r=arch_thickness/2, center=true);\n            translate([x1, arch_width/2, z1])\n                cylinder(h=arch_thickness, r=arch_thickness/2, center=true);\n            translate([x2, -arch_width/2, z2])\n                cylinder(h=arch_thickness, r=arch_thickness/2, center=true);\n            translate([x2, arch_width/2, z2])\n                cylinder(h=arch_thickness, r=arch_thickness/2, center=true);\n        }\n    }\n}\n\nmodule bridge_railings() {\n    // Left railing posts\n    for(pos = [-bridge_length/2 + 5:10:bridge_length/2 - 5]) {\n        translate([pos, -bridge_width/2 + railing_thickness/2, bridge_height + railing_height/2])\n            cube([railing_thickness, railing_thickness, railing_height], center=true);\n    }\n    \n    // Right railing posts\n    for(pos = [-bridge_length/2 + 5:10:bridge_length/2 - 5]) {\n        translate([pos, bridge_width/2 - railing_thickness/2, bridge_height + railing_height/2])\n            cube([railing_thickness, railing_thickness, railing_height], center=true);\n    }\n    \n    // Left railing top beam\n    translate([0, -bridge_width/2 + railing_thickness/2, bridge_height + railing_height])\n        cube([bridge_length, railing_thickness, railing_thickness], center=true);\n    \n    // Right railing top beam\n    translate([0, bridge_width/2 - railing_thickness/2, bridge_height + railing_height])\n        cube([bridge_length, railing_thickness, railing_thickness], center=true);\n}\n\nmodule bridge_supports() {\n    // Diagonal supports under deck\n    support_width = 2;\n    \n    // Left supports\n    translate([-bridge_length/4, -bridge_width/4, bridge_height - deck_thickness - 5])\n        rotate([0, 30, 0])\n            cube([10, support_width, 10], center=true);\n    \n    translate([-bridge_length/4, bridge_width/4, bridge_height - deck_thickness - 5])\n        rotate([0, -30, 0])\n            cube([10, support_width, 10], center=true);\n    \n    // Right supports\n    translate([bridge_length/4, -bridge_width/4, bridge_height - deck_thickness - 5])\n        rotate([0, -30, 0])\n            cube([10, support_width, 10], center=true);\n    \n    translate([bridge_length/4, bridge_width/4, bridge_height - deck_thickness - 5])\n        rotate([0, 30, 0])\n            cube([10, support_width, 10], center=true);\n}\n\n// Main bridge assembly\nunion() {\n    bridge_deck();\n    bridge_piers();\n    bridge_arch();\n    bridge_railings();\n    bridge_supports();\n}",
    "renders": true
  },
  {
    "vehicle": "viaduct",
    "openscad_code": "// Realistic Medium-Complexity Viaduct\n// Total length ≈ 90 mm, width ≈ 30 mm, height ≈ 40 mm\n\n// Basic settings for 3D-printability\n$fn = 24;\n\n// Overall dimensions\nviaduct_length = 90;\nviaduct_width  = 30;\ndeck_height    = 36;\narch_rise      = 20;\npier_thick     = 4;\ndeck_thick     = 3;\n\nmodule deck() {\n    // Main roadbed\n    translate([0, 0, deck_height])\n        cube([viaduct_length, viaduct_width, deck_thick], center = true);\n    \n    // Low side parapets\n    for (y = [-viaduct_width/2 + 2, viaduct_width/2 - 2])\n        translate([0, y, deck_height + deck_thick/2 + 3])\n            cube([viaduct_length + 2, 2, 6], center = true);\n}\n\nmodule arch(span, rise) {\n    // Full round arch minus inner opening\n    difference() {\n        // Outer arch barrel\n        translate([0, 0, rise])\n            rotate([90, 0, 0])\n                cylinder(h = viaduct_width, r = rise, center = true);\n        \n        // Inner void\n        translate([0, 0, rise])\n            rotate([90, 0, 0])\n                cylinder(h = viaduct_width + 2, r = rise - pier_thick, center = true);\n    }\n}\n\nmodule pier(w, h, d) {\n    // Tapered rectangular pier\n    linear_extrude(height = h, scale = [0.9, 0.9])\n        cube([w, d, 1], center = true);\n}\n\nmodule springer_block(x) {\n    // Stone block at arch springing\n    translate([x, 0, 0])\n        cube([pier_thick*1.5, viaduct_width, arch_rise], center = true);\n}\n\nmodule viaduct_assembly() {\n    // Central large arch\n    arch(viaduct_length*0.45, arch_rise);\n    \n    // Two side arches\n    for (dir = [-1, 1])\n        translate([dir * viaduct_length*0.35, 0, 0])\n            arch(viaduct_length*0.28, arch_rise*0.7);\n    \n    // Springers for all arches\n    for (x = [-viaduct_length*0.225, 0, viaduct_length*0.225])\n        springer_block(x);\n    \n    // Piers beneath arches\n    pier(pier_thick, deck_height - arch_rise, viaduct_width);\n    translate([-viaduct_length*0.35, 0, 0])\n        pier(pier_thick, deck_height - arch_rise*0.7, viaduct_width);\n    translate([viaduct_length*0.35, 0, 0])\n        pier(pier_thick, deck_height - arch_rise*0.7, viaduct_width);\n    \n    // Wing walls at ends\n    for (x = [-viaduct_length/2 - pier_thick/2, viaduct_length/2 + pier_thick/2])\n        translate([x, 0, deck_height/2])\n            cube([pier_thick, viaduct_width + 4, deck_height], center = true);\n    \n    // Deck on top\n    deck();\n}\n\n// Render the complete viaduct\nviaduct_assembly();",
    "renders": true
  },
  {
    "vehicle": "trestle",
    "openscad_code": "// Realistic Trestle - Medium Complexity\n// Overall dimensions: ~80mm wide x ~60mm deep x ~75mm tall\n\n// Parameters\nleg_length = 70;\nleg_angle = 15;\ntop_width = 80;\ntop_depth = 50;\ntop_thickness = 8;\nfoot_diameter = 12;\nfoot_height = 4;\nsupport_diameter = 6;\ncrossbar_diameter = 8;\n\n// Main module\nmodule trestle() {\n    // Top frame\n    translate([0, 0, leg_length * cos(leg_angle) + top_thickness/2]) {\n        difference() {\n            // Main top platform\n            cube([top_width, top_depth, top_thickness], center=true);\n            \n            // Lightening holes\n            for(x = [-top_width/3, 0, top_width/3]) {\n                for(y = [-top_depth/3, 0, top_depth/3]) {\n                    translate([x, y, -1])\n                        cylinder(h=top_thickness+2, r=4, $fn=16);\n                }\n            }\n        }\n    }\n    \n    // Leg assemblies (front and back)\n    for(side = [-1, 1]) {\n        translate([0, side * (top_depth/2 - 10), 0]) {\n            leg_assembly(side);\n        }\n    }\n}\n\n// Single leg assembly\nmodule leg_assembly(side) {\n    // Left leg\n    translate([-top_width/2 + 15, 0, 0]) {\n        rotate([0, leg_angle, 0]) {\n            leg();\n        }\n    }\n    \n    // Right leg\n    translate([top_width/2 - 15, 0, 0]) {\n        rotate([0, leg_angle, 0]) {\n            mirror([1, 0, 0]) leg();\n        }\n    }\n    \n    // Cross braces\n    translate([-top_width/2 + 15, 0, leg_length/2 * cos(leg_angle)])\n        rotate([90, 0, 0])\n            cylinder(h=top_width - 30, r=crossbar_diameter/2, $fn=16);\n    \n    // Lower cross brace\n    translate([-top_width/2 + 15, 0, 15])\n        rotate([90, 0, 0])\n            cylinder(h=top_width - 30, r=crossbar_diameter/2, $fn=16);\n    \n    // Diagonal braces\n    diagonal_brace(side, -1);\n    diagonal_brace(side, 1);\n}\n\n// Single leg with foot\nmodule leg() {\n    // Main leg\n    difference() {\n        cylinder(h=leg_length, r=4, $fn=16);\n        \n        // Lightening groove\n        translate([0, 0, leg_length/2])\n            cube([2, 1.5, leg_length - 20], center=true);\n    }\n    \n    // Foot pad\n    translate([0, 0, -foot_height])\n        cylinder(h=foot_height, r=foot_diameter/2, $fn=16);\n    \n    // Foot reinforcement\n    translate([0, 0, -foot_height/2])\n        sphere(r=foot_diameter/2, $fn=16);\n}\n\n// Diagonal support brace\nmodule diagonal_brace(side, direction) {\n    angle = atan2(leg_length * sin(leg_angle), top_width - 30);\n    length = sqrt(pow(leg_length * sin(leg_angle), 2) + pow(top_width - 30, 2)) * 0.8;\n    \n    translate([direction * (top_width/2 - 15 - (top_width - 30)/2), \n              side * (top_depth/2 - 10), \n              leg_length * 0.7 * cos(leg_angle)]) {\n        rotate([0, side * angle, direction * 90])\n            cylinder(h=length, r=support_diameter/2, $fn=16);\n    }\n}\n\n// Render the trestle\ntrestle();",
    "renders": true
  },
  {
    "vehicle": "causeway",
    "openscad_code": "// Realistic Causeway\n// Medium complexity, 3D-printable\n// Dimensions: 80mm x 30mm x 15mm\n\n// Main parameters\ncauseway_length = 80;\ncauseway_width = 30;\nmax_height = 15;\nmin_height = 5;\ndeck_thickness = 2;\nwall_thickness = 2;\n\n// Plank dimensions\nplank_length = 15;\nplank_width = 3;\nplank_gap = 1;\nn_planks = floor(causeway_length / (plank_length + plank_gap));\n\n// Piling dimensions\npiling_diameter = 2;\npiling_spacing = 10;\npiling_height = max_height + 5;\nn_pilings = floor(causeway_length / piling_spacing) + 1;\n\n// Handrail dimensions\npost_height = 10;\npost_diameter = 1.5;\nrail_thickness = 1;\nrail_height = 8;\n\n// Create the causeway structure\nmodule causeway() {\n    // Base support structure with gentle slope\n    hull() {\n        translate([-5, -causeway_width/2 - 5, 0])\n            cube([10, causeway_width + 10, min_height]);\n        translate([causeway_length + 5, -causeway_width/2 - 5, 0])\n            cube([10, causeway_width + 10, max_height]);\n    }\n    \n    // Main deck\n    translate([0, 0, min_height])\n        linear_extrude(height = deck_thickness, scale = [1, 1])\n            hull() {\n                translate([0, -causeway_width/2, 0])\n                    square([causeway_length, causeway_width]);\n                translate([causeway_length, -causeway_width/2, 0])\n                    square([0, causeway_width]);\n            }\n}\n\n// Create wooden planks for the deck\nmodule deck_planks() {\n    for (i = [0:n_planks-1]) {\n        translate([i * (plank_length + plank_gap) + plank_length/2, 0, min_height + deck_thickness])\n            cube([plank_length, causeway_width * 0.8, 0.5], center = true);\n    }\n}\n\n// Create support pilings\nmodule pilings() {\n    for (i = [0:n_pilings-1]) {\n        x_pos = i * piling_spacing;\n        z_pos = min_height - piling_height/2 + (x_pos/causeway_length) * (max_height - min_height);\n        \n        // Main piling\n        translate([x_pos, 0, z_pos])\n            cylinder(h = piling_height, d = piling_diameter, $fn = 8);\n            \n        // Cross bracing\n        if (i < n_pilings - 1) {\n            next_x = (i + 1) * piling_spacing;\n            next_z = min_height - piling_height/2 + (next_x/causeway_length) * (max_height - min_height);\n            \n            translate([(x_pos + next_x)/2, 0, (z_pos + next_z)/2 - 2])\n                rotate([0, 90, atan2(next_z - z_pos, next_x - x_pos)])\n                    cylinder(h = sqrt(pow(next_x - x_pos, 2) + pow(next_z - z_pos, 2)), d = 1, $fn = 6);\n        }\n    }\n}\n\n// Create handrails\nmodule handrails() {\n    // Left side\n    translate([0, -causeway_width/2 + 1, min_height + deck_thickness]) {\n        // Bottom rail\n        cube([causeway_length, rail_thickness, rail_height]);\n        \n        // Posts\n        for (i = [0:floor(causeway_length/8)]) {\n            translate([i * 8 + 2, rail_thickness/2, rail_height - post_height/2])\n                cylinder(h = post_height, d = post_diameter, $fn = 8);\n        }\n        \n        // Top rail\n        translate([0, rail_thickness/2, rail_height - rail_thickness/2])\n            cube([causeway_length, rail_thickness, rail_thickness]);\n    }\n    \n    // Right side\n    mirror([0, 1, 0])\n        translate([0, -causeway_width/2 + 1, min_height + deck_thickness]) {\n            // Bottom rail\n            cube([causeway_length, rail_thickness, rail_height]);\n            \n            // Posts\n            for (i = [0:floor(causeway_length/8)]) {\n                translate([i * 8 + 2, rail_thickness/2, rail_height - post_height/2])\n                    cylinder(h = post_height, d = post_diameter, $fn = 8);\n            }\n            \n            // Top rail\n            translate([0, rail_thickness/2, rail_height - rail_thickness/2])\n                cube([causeway_length, rail_thickness, rail_thickness]);\n        }\n}\n\n// Assembly\nunion() {\n    causeway();\n    pilings();\n    deck_planks();\n    handrails();\n}",
    "renders": true
  },
  {
    "vehicle": "embankment",
    "openscad_code": "// Realistic embankment for 3D printing\n// Medium complexity: ~100 lines, printable, recognizable earth embankment with slope, grass pattern and drainage ditch\n\n$fn = 36;  // Smooth curves for printing\n\n// Overall dimensions (mm) - fits on 100mm print bed\nemb_length = 80;\nemb_width  = 50;\nemb_height = 20;\n\n// Wall / base thickness for printing\nwall = 2;\n\nmodule embankment_body() {\n    // Main earth body with gentle slope\n    difference() {\n        // Outer slope volume\n        hull() {\n            translate([0, 0, 0]) cube([emb_length, emb_width, wall], center=true);\n            translate([0, 0, emb_height]) \n                scale([0.7, 0.7, 1]) \n                cube([emb_length, emb_width, wall], center=true);\n        }\n        // Hollow out to save material\n        translate([0, 0, -1])\n            scale([0.9, 0.9, 0.8])\n            hull() {\n                translate([0, 0, 0]) cube([emb_length, emb_width, wall], center=true);\n                translate([0, 0, emb_height]) \n                    scale([0.7, 0.7, 1]) \n                    cube([emb_length, emb_width, wall], center=true);\n            }\n    }\n}\n\n// Create grass tufts on surface\nmodule grass_tuft(x, y) {\n    translate([x, y, emb_height * (1 - 0.3 * abs(x)/emb_length * abs(y)/emb_width) + 0.5])\n        scale([1, 1, 2])\n        sphere(r=1);\n}\n\n// Generate random grass tufts using loops\nmodule grass_layer() {\n    for (i = [-emb_length/2 + 5 : 5 : emb_length/2 - 5]) {\n        for (j = [-emb_width/2 + 5 : 5 : emb_width/2 - 5]) {\n            grass_tuft(i + rands(-2, 2, 1)[0], j + rands(-2, 2, 1)[0]);\n        }\n    }\n}\n\n// Drainage ditch at base of slope\nmodule drainage_ditch() {\n    difference() {\n        // Slight raise for ditch top\n        translate([0, emb_width/2 - 3, -1])\n            cube([emb_length, 6, 2], center=false);\n        // Cut out the ditch\n        translate([0, emb_width/2, 0])\n            rotate([90, 0, 0])\n            cylinder(h=emb_length, d1=4, d2=6, center=true);\n    }\n}\n\n// Retaining edge stones\nmodule stone(x, y) {\n    translate([x, y, 1])\n        scale([rands(1,2,1)[0], rands(1,2,1)[0], rands(1,1.5,1)[0]])\n        sphere(r=1.5);\n}\n\nmodule stone_edge() {\n    for (i = [-emb_length/2 + 3 : 4 : emb_length/2 - 3]) {\n        stone(i, -emb_width/2 + 2);\n        stone(i,  emb_width/2 - 2);\n    }\n}\n\n// Assembly\nunion() {\n    embankment_body();\n    grass_layer();\n    drainage_ditch();\n    stone_edge();\n}",
    "renders": true
  },
  {
    "vehicle": "cutting",
    "openscad_code": "// Realistic 3D printable cutting board with juice groove and knife marks\n// Overall size: 90 mm x 60 mm x 12 mm (fits most FDM printers)\n\n// Parameters\nboard_w = 90;          // width\nboard_d = 60;          // depth\nboard_h = 12;          // thickness\ngroove_w = 82;         // juice groove width\ngroove_d = 52;         // juice groove depth\ngroove_h = 2;          // juice groove height\ngroove_wall = 2;       // thickness of groove wall\nhandle_r = 8;          // handle hole radius\nhandle_off = 15;       // handle inset from edge\ncorner_r = 5;          // corner radius\n\n// Main board body with rounded top edges\nmodule board_body() {\n    difference() {\n        // outer block with rounded top\n        minkowski() {\n            cube([board_w, board_d, board_h - corner_r], center = true);\n            cylinder(r = corner_r, h = 0.01, $fn = 24);\n        }\n        translate([0, 0, -(board_h - corner_r)/2])\n            cube([board_w + 1, board_d + 1, board_h], center = true);\n    }\n}\n\n// Juice groove recessed into top\nmodule juice_groove() {\n    translate([0, 0, board_h/2 - groove_h/2])\n        difference() {\n            // outer groove frame\n            cube([groove_w, groove_d, groove_h], center = true);\n            // inner hollow\n            cube([groove_w - 2*groove_wall, groove_d - 2*groove_wall, groove_h + 0.1], center = true);\n        }\n}\n\n// Hanging handle hole\nmodule handle_hole() {\n    translate([board_w/2 - handle_off, 0, 0])\n        rotate([90, 0, 0])\n            cylinder(h = board_d, r = handle_r, $fn = 32);\n}\n\n// Realistic knife marks on cutting surface\nmodule knife_marks() {\n    for (a = [0:15:165]) {\n        rotate([0, 0, a])\n            translate([random(-20, 20), random(-10, 10), board_h/2 - 0.1])\n                cube([random(25, 40), random(0.4, 0.8), 0.2], center = true);\n    }\n    for (a = [-90:15:90]) {\n        rotate([0, 0, a])\n            translate([random(-30, 30), random(-15, 15), board_h/2 - 0.1])\n                cube([random(20, 35), random(0.3, 0.6), 0.15], center = true);\n    }\n}\n\n// Random helper\nfunction random(min, max) = min + (max - min) * rands(0, 1, 1)[0];\n\n// Assembly\ndifference() {\n    union() {\n        board_body();\n    }\n    juice_groove();\n    handle_hole();\n    knife_marks();\n}",
    "renders": true
  },
  {
    "vehicle": "grade",
    "openscad_code": "// Realistic Grade / Road Grader\n// Medium complexity OpenSCAD model\n\n// Overall dimensions\nlength = 90;\nwidth = 40;\nheight = 30;\n\n// Wall thickness for 3D printing\nwall = 2;\n\nmodule chassis() {\n    // Main chassis frame\n    difference() {\n        cube([length*0.8, width*0.7, height*0.4], center=true);\n        translate([0, 0, -height*0.1])\n            cube([length*0.75, width*0.65, height*0.3], center=true);\n    }\n    \n    // Side frame rails\n    for(side = [-1, 1]) {\n        translate([0, side*width*0.35, 0])\n            cube([length*0.85, wall*2, height*0.25], center=true);\n    }\n}\n\nmodule cab() {\n    translate([length*0.25, 0, height*0.3]) {\n        // Cab base\n        cube([20, 25, 18], center=true);\n        \n        // Cab roof\n        translate([0, 0, 12])\n            cube([22, 27, 3], center=true);\n        \n        // Windows\n        difference() {\n            cube([18, 21, 12], center=true);\n            translate([0, 0, -1])\n                cube([20, 23, 14], center=true);\n        }\n    }\n}\n\nmodule wheels() {\n    for(side = [-1, 1]) {\n        for(pos = [-0.3, 0.3]) {\n            translate([pos*length*0.7, side*width*0.5, -height*0.3]) {\n                rotate([0, 90, 0]) {\n                    // Tire\n                    cylinder(h=8, d=16, center=true, $fn=16);\n                    // Rim\n                    translate([0, 0, 1])\n                        color(\"silver\")\n                        cylinder(h=6, d=10, center=true, $fn=8);\n                }\n            }\n        }\n    }\n}\n\nmodule blade() {\n    translate([-length*0.35, 0, -height*0.25]) {\n        rotate([0, 15, 0]) {\n            // Main blade\n            difference() {\n                cube([40, 45, 4], center=true);\n                // Blade curve\n                translate([0, 0, -3])\n                    cylinder(h=6, d=50, center=true, $fn=32);\n            }\n            \n            // Blade supports\n            for(support = [-1, 1]) {\n                translate([0, support*15, 0])\n                    cube([15, 4, 8], center=true);\n            }\n            \n            // Blade arms\n            for(side = [-1, 1]) {\n                translate([15, side*20, 5])\n                    rotate([45, 0, 0])\n                        cube([5, 5, 20], center=true);\n            }\n        }\n    }\n}\n\nmodule engine() {\n    translate([-length*0.25, 0, height*0.1]) {\n        // Engine block\n        cube([18, 20, 12], center=true);\n        \n        // Exhaust pipe\n        translate([0, -12, 8])\n            rotate([0, 90, 0])\n                cylinder(h=15, d=3, center=true);\n    }\n}\n\nmodule scarifier() {\n    translate([-length*0.45, 0, -height*0.3]) {\n        rotate([10, 0, 0]) {\n            // Scarifier bar\n            cube([25, 3, 3], center=true);\n            \n            // Teeth\n            for(i = [-2:2]) {\n                translate([i*5, 0, -3])\n                    cube([1.5, 2, 6], center=true);\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    chassis();\n    cab();\n    engine();\n    blade();\n    scarifier();\n    wheels();\n}\n\n// Center the model\ntranslate([0, 0, height*0.2]) {\n    %children();\n}",
    "renders": true
  },
  {
    "vehicle": "bulldozer",
    "openscad_code": "$fn = 32;\n\n// Overall scale for 3D printing (approx 80mm long)\nscale_factor = 0.5;\n\n// Main module\nmodule bulldozer() {\n    scale([scale_factor, scale_factor, scale_factor])\n    union() {\n        // Main chassis\n        chassis();\n        \n        // Cab\n        translate([15, 0, 10]) rotate([0, 0, 0]) cab();\n        \n        // Blade assembly\n        translate([-35, 0, 5]) blade_assembly();\n        \n        // Tracks\n        translate([0, -15, 0]) track();\n        translate([0, 15, 0]) mirror([0, 1, 0]) track();\n        \n        // Engine compartment\n        translate([25, 0, 10]) engine_hood();\n        \n        // Exhaust pipe\n        translate([30, 8, 22]) exhaust_pipe();\n    }\n}\n\n// Main chassis\nmodule chassis() {\n    difference() {\n        // Main body\n        union() {\n            // Lower frame\n            cube([60, 30, 10], center = true);\n            \n            // Upper frame\n            translate([5, 0, 10]) cube([50, 25, 10], center = true);\n        }\n        \n        // Cutouts for tracks\n        translate([0, -18, -5]) cube([65, 8, 15], center = true);\n        translate([0, 18, -5]) cube([65, 8, 15], center = true);\n    }\n}\n\n// Cab with windows\nmodule cab() {\n    difference() {\n        // Main cab structure\n        cube([20, 22, 18], center = true);\n        \n        // Front window\n        translate([10, 0, 3]) cube([1, 14, 10], center = true);\n        \n        // Side windows\n        translate([0, 11, 3]) cube([16, 1, 10], center = true);\n        translate([0, -11, 3]) cube([16, 1, 10], center = true);\n    }\n    \n    // Roof\n    translate([0, 0, 10]) cube([21, 23, 2], center = true);\n}\n\n// Blade assembly\nmodule blade_assembly() {\n    union() {\n        // Main blade\n        translate([0, 0, 0]) {\n            difference() {\n                // Blade shape\n                scale([1, 1.2, 1]) cube([8, 35, 25], center = true);\n                \n                // Curved front face\n                translate([4, 0, 0]) rotate([0, 90, 0]) cylinder(h = 36, r = 25, center = true);\n            }\n        }\n        \n        // Push arms\n        translate([15, 12, 5]) rotate([0, -30, 0]) cube([30, 4, 4], center = true);\n        translate([15, -12, 5]) rotate([0, -30, 0]) cube([30, 4, 4], center = true);\n        \n        // Hydraulic cylinders\n        translate([0, 0, 15]) cylinder(h = 20, r = 3, center = true);\n    }\n}\n\n// Track system\nmodule track() {\n    union() {\n        // Track frame\n        translate([0, 0, -2.5]) cube([60, 8, 5], center = true);\n        \n        // Track pads\n        for(i = [-25:5:25]) {\n            translate([i, 0, -5]) cube([4, 10, 2], center = true);\n        }\n        \n        // Drive sprocket\n        translate([25, 0, 0]) cylinder(h = 8, r = 8, center = true);\n        \n        // Idler wheel\n        translate([-25, 0, 0]) cylinder(h = 8, r = 6, center = true);\n        \n        // Road wheels\n        for(i = [-15:10:15]) {\n            translate([i, 0, 0]) cylinder(h = 8, r = 7, center = true);\n        }\n    }\n}\n\n// Engine hood\nmodule engine_hood() {\n    difference() {\n        // Main hood\n        translate([0, 0, 5]) cube([20, 24, 10], center = true);\n        \n        // Hood vents\n        for(i = [0:3:9]) {\n            translate([i, 0, 10]) cube([2, 20, 1], center = true);\n        }\n    }\n}\n\n// Exhaust pipe\nmodule exhaust_pipe() {\n    union() {\n        // Base\n        cylinder(h = 5, r = 4, center = true);\n        \n        // Pipe\n        translate([0, 0, 7]) cylinder(h = 12, r = 2, center = true);\n        \n        // Top cap\n        translate([0, 0, 13]) cylinder(h = 1, r = 3, center = true);\n    }\n}\n\n// Generate the bulldozer\nbulldozer();",
    "renders": true
  },
  {
    "vehicle": "excavator",
    "openscad_code": "// Realistic Medium Complexity Excavator\n// Suitable for 3D printing at ~80mm length\n\n$fn = 32;\n\n// Main assembly\nmodule excavator() {\n    // Undercarriage\n    translate([0, 0, 15]) undercarriage();\n    \n    // Upper structure\n    translate([0, 0, 30]) upper_structure();\n    \n    // Boom\n    translate([10, 0, 45]) rotate([0, -20, 0]) boom();\n    \n    // Stick\n    translate([35, 0, 38]) rotate([0, 45, 0]) stick();\n    \n    // Bucket\n    translate([55, 0, 50]) rotate([0, 60, 0]) bucket();\n}\n\n// Undercarriage with tracks\nmodule undercarriage() {\n    // Main frame\n    difference() {\n        cube([50, 30, 10], center = true);\n        translate([0, 0, 5]) cube([45, 25, 10], center = true);\n    }\n    \n    // Left track\n    translate([-26, 0, -5]) track();\n    \n    // Right track\n    translate([26, 0, -5]) mirror([1, 0, 0]) track();\n}\n\n// Track assembly\nmodule track() {\n    // Track frame\n    cube([10, 25, 10], center = true);\n    \n    // Track pads\n    for (i = [-10:5:10]) {\n        translate([0, i, -10]) cube([12, 4, 3], center = true);\n    }\n    \n    // Drive sprocket\n    translate([0, 12, 0]) rotate([90, 0, 0]) cylinder(h = 3, r = 5);\n    translate([0, -12, 0]) rotate([90, 0, 0]) cylinder(h = 3, r = 5);\n}\n\n// Upper structure (house)\nmodule upper_structure() {\n    // Main body\n    difference() {\n        cube([35, 30, 25], center = true);\n        translate([0, 0, 12.5]) cube([30, 25, 25], center = true);\n    }\n    \n    // Cab\n    translate([0, 12, 15]) cab();\n    \n    // Counterweight\n    translate([-20, 0, 10]) cube([15, 25, 20], center = true);\n}\n\n// Cab module\nmodule cab() {\n    // Cab body\n    difference() {\n        cube([20, 15, 18], center = true);\n        translate([0, 0, 9]) cube([18, 13, 18], center = true);\n    }\n    \n    // Roof\n    translate([0, 0, 18]) cube([22, 17, 2], center = true);\n    \n    // Windows\n    translate([5, 0, 9]) cube([0.5, 11, 14], center = true);\n    translate([-5, 0, 9]) cube([0.5, 11, 14], center = true);\n}\n\n// Boom assembly\nmodule boom() {\n    // Main boom\n    difference() {\n        cube([30, 8, 6], center = true);\n        translate([0, 0, 3]) cube([28, 6, 6], center = true);\n    }\n    \n    // Hydraulic cylinder mount\n    translate([10, -5, 0]) cylinder(h = 3, r = 2);\n    translate([10, 5, 0]) cylinder(h = 3, r = 2);\n}\n\n// Stick assembly\nmodule stick() {\n    // Main stick\n    difference() {\n        cube([25, 6, 5], center = true);\n        translate([0, 0, 2.5]) cube([23, 4, 5], center = true);\n    }\n    \n    // Connection point\n    translate([-12.5, 0, 0]) cylinder(h = 6, r = 2.5);\n}\n\n// Bucket\nmodule bucket() {\n    // Bucket body\n    difference() {\n        union() {\n            // Main bucket shell\n            translate([0, 0, -5]) cube([20, 15, 10], center = true);\n            \n            // Curved bottom\n            translate([5, 0, -10]) cylinder(h = 15, r = 8, center = true);\n        }\n        \n        // Hollow out\n        translate([0, 0, -5]) cube([18, 13, 8], center = true);\n        translate([5, 0, -10]) cylinder(h = 15, r = 6, center = true);\n    }\n    \n    // Teeth\n    for (i = [-6:3:6]) {\n        translate([10, i, -10]) cube([3, 2, 5]);\n    }\n    \n    // Connection bracket\n    translate([-10, 0, 0]) cylinder(h = 6, r = 2.5);\n}\n\n// Render the excavator\nexcavator();",
    "renders": true
  },
  {
    "vehicle": "forklift",
    "openscad_code": "$fn = 32;\n\n// Overall scale factor for 3D printing\nscale_factor = 1;\n\n// Main module\nmodule forklift() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        // Main body\n        color(\"firebrick\") chassis();\n        \n        // Cabin\n        color(\"slategray\") cabin();\n        \n        // Mast assembly\n        color(\"lightgray\") mast_assembly();\n        \n        // Forks\n        color(\"silver\") forks();\n        \n        // Wheels\n        color(\"black\") wheels();\n    }\n}\n\n// Chassis - lower frame\nmodule chassis() {\n    difference() {\n        // Main frame\n        translate([-10, -15, 0])\n            cube([60, 30, 8]);\n        \n        // Counterweight cavity\n        translate([35, -10, 0])\n            cube([20, 20, 8]);\n    }\n    \n    // Counterweight\n    translate([45, -10, 8])\n        cube([18, 20, 15]);\n    \n    // Engine cover\n    translate([25, -14, 8])\n        cube([30, 28, 10]);\n}\n\n// Cabin with operator protection\nmodule cabin() {\n    // Cabin floor\n    translate([15, -12, 18])\n        cube([20, 24, 1]);\n    \n    // Cabin walls\n    translate([15, -12, 19])\n        cube([20, 2, 12]); // Left wall\n    \n    translate([15, 10, 19])\n        cube([20, 2, 12]); // Right wall\n    \n    translate([33, -12, 19])\n        cube([2, 24, 12]); // Back wall\n    \n    // Roof\n    translate([15, -12, 31])\n        cube([20, 24, 1.5]);\n    \n    // Roll cage bars\n    for(x = [17, 27]) {\n        translate([x, -12, 32.5])\n            cylinder(h=8, r=1);\n        translate([x, 12, 32.5])\n            cylinder(h=8, r=1);\n    }\n}\n\n// Mast assembly - lifting mechanism\nmodule mast_assembly() {\n    // Main mast\n    translate([-12, -8, 0])\n        cube([10, 16, 50]);\n    \n    // Inner mast\n    translate([-10, -6, 10])\n        cube([6, 12, 35]);\n    \n    // Lift cylinder\n    translate([-6, 0, 0])\n        cylinder(h=45, r=1.5);\n    \n    // Chains\n    for(y = [-5, 5]) {\n        translate([-5, y, 45])\n            cylinder(h=10, r=0.5);\n    }\n}\n\n// Forks\nmodule forks() {\n    for(side = [-1, 1]) {\n        translate([-8, side*6, 25]) {\n            // Fork arm\n            difference() {\n                cube([50, 4, 3]);\n                translate([45, 0, 0])\n                    cube([5, 4, 1.5]);\n            }\n        }\n    }\n}\n\n// Wheels\nmodule wheels() {\n    // Front wheels\n    for(side = [-1, 1]) {\n        translate([0, side*12, 4])\n            rotate([0, 0, 90])\n                cylinder(h=6, r=6);\n    }\n    \n    // Rear wheels - smaller\n    for(side = [-1, 1]) {\n        translate([45, side*12, 4])\n            rotate([0, 0, 90])\n                cylinder(h=6, r=5);\n    }\n}\n\n// Render the forklift\nforklift();",
    "renders": true
  },
  {
    "vehicle": "dump",
    "openscad_code": "// Realistic medium-complexity OpenSCAD dump truck\n// Overall size ~80 mm long\n\n$fa = 2;\n$fs = 0.5;\n\nmodule wheel() {\n    difference() {\n        union() {\n            cylinder(h = 8, r = 10, center = true);\n            translate([0, 0, 5])\n                cylinder(h = 2, r = 6, center = true);\n        }\n        for(i = [0:5:355]) {\n            rotate([0, 0, i])\n                translate([7, 0, 0])\n                    cube([10, 2, 10], center = true);\n        }\n    }\n}\n\nmodule chassis() {\n    difference() {\n        union() {\n            // main frame rails\n            translate([-30, -15, 5])\n                cube([60, 5, 10]);\n            translate([-30, 10, 5])\n                cube([60, 5, 10]);\n            // cross members\n            for(x = [-20, -5, 10, 25]) {\n                translate([x, -2.5, 5])\n                    cube([5, 20, 10]);\n            }\n            // engine block\n            translate([-35, -7.5, 15])\n                cube([15, 15, 15]);\n        }\n        // wheel wells\n        translate([-25, -15, 0])\n            cylinder(h = 20, r = 12, center = true);\n        translate([-25, 15, 0])\n            cylinder(h = 20, r = 12, center = true);\n        translate([25, -15, 0])\n            cylinder(h = 20, r = 12, center = true);\n        translate([25, 15, 0])\n            cylinder(h = 20, r = 12, center = true);\n    }\n}\n\nmodule cab() {\n    difference() {\n        union() {\n            // main cab\n            translate([-45, -18, 15])\n                cube([30, 36, 25]);\n            // roof peak\n            translate([-45, -18, 40])\n                cube([30, 36, 5]);\n            // hood\n            translate([-60, -15, 15])\n                cube([15, 30, 12]);\n        }\n        // windows\n        translate([-45, -15, 25])\n            cube([25, 30, 15]);\n        translate([-50, -10, 20])\n            cube([8, 20, 8]);\n    }\n}\n\nmodule dump_bed() {\n    difference() {\n        union() {\n            // bed floor\n            translate([0, -20, 30])\n                cube([45, 40, 3]);\n            // front wall\n            translate([0, -20, 40])\n                cube([45, 3, 15]);\n            // side walls\n            translate([0, 20, 37.5])\n                cube([45, 3, 12]);\n            translate([-22.5, 0, 37.5])\n                cube([3, 40, 12]);\n            translate([22.5, 0, 37.5])\n                cube([3, 40, 12]);\n            // hinge mounts\n            translate([22.5, 0, 30])\n                cylinder(h = 5, r = 3);\n            translate([-22.5, 0, 30])\n                cylinder(h = 5, r = 3);\n        }\n        // interior cavity\n        translate([0, 0, 33])\n            cube([41, 34, 10]);\n    }\n}\n\nmodule hydraulic_cylinders() {\n    // rear cylinders\n    translate([15, 10, 15])\n        cylinder(h = 20, r = 2);\n    translate([15, -10, 15])\n        cylinder(h = 20, r = 2);\n    // connecting rod\n    translate([15, 0, 25])\n        rotate([90, 0, 0])\n            cylinder(h = 20, r = 1.5);\n}\n\n// Assembly\nchassis();\n\ntranslate([-25, -15, 0])\n    wheel();\ntranslate([-25, 15, 0])\n    wheel();\ntranslate([25, -15, 0])\n    wheel();\ntranslate([25, 15, 0])\n    wheel();\n\ncab();\n\nrotate([0, 30, 0])\n    dump_bed();\n\nhydraulic_cylinders();",
    "renders": true
  },
  {
    "vehicle": "loader",
    "openscad_code": "// Realistic Loader - Medium Complexity\n// Designed for 3D printing with no overhangs\n\n$fn = 32;  // Smooth curves for 3D printing\n\n// Main assembly\nmodule loader() {\n    union() {\n        // Main chassis\n        chassis();\n        \n        // Front loader assembly\n        translate([0, 0, 30]) loader_assembly();\n        \n        // Wheels\n        wheel_set(-20, -25, 0);\n        wheel_set(20, -25, 0);\n        wheel_set(-20, 25, 0);\n        wheel_set(20, 25, 0);\n        \n        // Cabin\n        cabin();\n    }\n}\n\n// Chassis base\nmodule chassis() {\n    difference() {\n        // Main body\n        cube([70, 40, 25], center=true);\n        \n        // Wheel arches\n        for(x = [-20, 20])\n            for(y = [-25, 25])\n                translate([x, y, -12.5])\n                    scale([1.2, 0.8, 1])\n                        cylinder(h=30, r=10, center=true);\n    }\n}\n\n// Cabin structure\nmodule cabin() {\n    translate([0, 0, 35]) {\n        difference() {\n            // Main cabin\n            cube([30, 35, 25], center=true);\n            \n            // Windshield\n            translate([0, 17, 5])\n                cube([25, 1, 15], center=true);\n            \n            // Side windows\n            translate([15, 0, 5])\n                cube([1, 25, 15], center=true);\n            translate([-15, 0, 5])\n                cube([1, 25, 15], center=true);\n        }\n        \n        // Roof\n        translate([0, 0, 15])\n            cube([32, 37, 3], center=true);\n    }\n}\n\n// Wheel assembly\nmodule wheel_set(x_pos, y_pos, z_pos) {\n    translate([x_pos, y_pos, z_pos]) {\n        // Tire\n        rotate([90, 0, 0])\n            difference() {\n                cylinder(h=12, r=12);\n                // Rim cavity\n                translate([0, 0, 2])\n                    cylinder(h=10, r=8);\n            }\n        \n        // Rim\n        rotate([90, 0, 0])\n            translate([0, 0, 7])\n                cylinder(h=5, r=8);\n    }\n}\n\n// Loader arm assembly\nmodule loader_assembly() {\n    // Main arm\n    rotate([0, -30, 0])\n        translate([0, 0, 0])\n            cube([8, 8, 40], center=true);\n    \n    // Support struts\n    rotate([0, -30, 0])\n        translate([0, 0, 20])\n            cube([6, 6, 30], center=true);\n    \n    // Bucket pivot\n    translate([0, 0, -35])\n        rotate([0, -30, 0])\n            cylinder(h=10, r=4, center=true);\n    \n    // Loader bucket\n    translate([0, 0, -45])\n        rotate([0, -30, 0])\n            bucket();\n}\n\n// Loader bucket\nmodule bucket() {\n    difference() {\n        // Main bucket shape\n        translate([0, 0, 0])\n            scale([1.5, 1, 0.8])\n                cube([40, 25, 15], center=true);\n        \n        // Bucket cavity\n        translate([0, 0, 5])\n            scale([1.3, 0.8, 0.6])\n                cube([38, 20, 12], center=true);\n        \n        // Cutting edge\n        translate([0, 0, -7.5])\n            cube([42, 25, 1], center=true);\n    }\n    \n    // Side reinforcements\n    translate([20, 0, 0])\n        cube([2, 25, 15], center=true);\n    translate([-20, 0, 0])\n        cube([2, 25, 15], center=true);\n}\n\n// Create the loader\nloader();",
    "renders": true
  },
  {
    "vehicle": "grader",
    "openscad_code": "// Realistic medium-complexity grader for 3D printing\n// Overall length ≈ 90 mm, no overhangs > 45°, 2 mm wall thickness\n\n$fn = 32;\n\n// Main chassis\nmodule chassis() {\n    // Main frame box\n    difference() {\n        cube([70, 30, 15], center = true);\n        translate([0, 0, 7.5])\n            cube([66, 26, 16], center = true);\n    }\n    \n    // Front axle housing\n    translate([-30, 0, 7.5])\n        rotate([90, 0, 0])\n        cylinder(h = 25, r = 4, center = true);\n    \n    // Rear axle housing\n    translate([25, 0, 7.5])\n        rotate([90, 0, 0])\n        cylinder(h = 30, r = 6, center = true);\n}\n\n// Wheels\nmodule wheel(pos, radius, width) {\n    translate(pos)\n    rotate([0, 0, 90])\n    difference() {\n        cylinder(h = width, r = radius, center = true);\n        cylinder(h = width + 0.1, r = radius - 2, center = true);\n    }\n}\n\n// Engine compartment\nmodule engine() {\n    translate([20, 0, 10])\n    difference() {\n        cube([15, 25, 12], center = true);\n        translate([0, 0, 6])\n            cube([11, 21, 13], center = true);\n    }\n    \n    // Exhaust pipe\n    translate([27, 12, 16])\n    cylinder(h = 20, r = 2);\n    translate([27, 12, 36])\n    sphere(r = 2.5);\n}\n\n// Operator cab\nmodule cab() {\n    translate([5, 0, 15])\n    difference() {\n        cube([18, 20, 15], center = true);\n        // Door opening\n        translate([-8, -9, 0])\n            cube([2, 14, 12], center = true);\n    }\n    \n    // Roof\n    translate([5, 0, 22.5])\n    cube([18, 20, 2], center = true);\n    \n    // Cab pillars\n    for(x = [-7, 7], y = [-8, 8]) {\n        translate([x, y, 16])\n        cube([2, 2, 5], center = true);\n    }\n}\n\n// Blade assembly\nmodule blade() {\n    // Main blade\n    translate([-40, 0, 8])\n    rotate([0, 0, -10])\n    difference() {\n        cube([25, 35, 4], center = true);\n        translate([0, 0, 2])\n            cube([21, 31, 4.1], center = true);\n    }\n    \n    // Cutting edge\n    translate([-40, 0, 5.5])\n    cube([25, 35, 1], center = true);\n    \n    // Left support arm\n    translate([-30, -20, 10])\n    rotate([0, 30, 0])\n    cube([20, 4, 4], center = true);\n    \n    // Right support arm\n    translate([-30, 20, 10])\n    rotate([0, -30, 0])\n    cube([20, 4, 4], center = true);\n    \n    // Hydraulic cylinder\n    translate([-20, 0, 15])\n    rotate([30, 0, 0])\n    cylinder(h = 25, r = 2);\n}\n\n// Scarifier\nmodule scarifier() {\n    translate([-15, 0, 3])\n    rotate([0, 0, 0])\n    cube([8, 20, 2], center = true);\n    \n    // Scarifier teeth\n    for(y = [-8:4:8]) {\n        translate([-15, y, 1])\n        cube([2, 2, 3], center = true);\n    }\n}\n\n// Main assembly\nunion() {\n    chassis();\n    \n    // Front wheels (2)\n    wheel([-30, -15, 7.5], 8, 4);\n    wheel([-30, 15, 7.5], 8, 4);\n    \n    // Rear wheels (4)\n    wheel([25, -15, 7.5], 10, 6);\n    wheel([25, -5, 7.5], 10, 6);\n    wheel([25, 5, 7.5], 10, 6);\n    wheel([25, 15, 7.5], 10, 6);\n    \n    engine();\n    cab();\n    blade();\n    scarifier();\n}",
    "renders": true
  },
  {
    "vehicle": "roller",
    "openscad_code": "// Realistic 3D-printable roller (paint roller style)\n// Overall size: ~90 mm long, 45 mm diameter\n\n// Helper module for rounded ends\nmodule rounded_end(r, h) {\n    // Create a rounded cap by intersecting a sphere and cylinder\n    intersection() {\n        sphere(r);\n        cylinder(r=r, h=h, $fn=60);\n    }\n}\n\n// Foam roller sleeve with surface texture\nmodule roller_sleeve() {\n    difference() {\n        // Main foam cylinder\n        cylinder(r=22.5, h=65, center=true, $fn=120);\n        \n        // Grooves for grip pattern\n        for(i=[0:5:355]) {\n            rotate([0, 0, i])\n                translate([-25, -1.5, 0])\n                    cube([50, 3, 70]);\n        }\n        \n        // Hollow center for inner tube\n        cylinder(r=12.5, h=70, center=true, $fn=60);\n    }\n}\n\n// Inner plastic tube for strength\nmodule inner_tube() {\n    difference() {\n        cylinder(r=12, h=67, center=true, $fn=60);\n        cylinder(r=10, h=70, center=true, $fn=60);\n    }\n}\n\n// End cap with bearing surface\nmodule end_cap() {\n    difference() {\n        union() {\n            // Main cap body\n            cylinder(r=11.5, h=8, $fn=60);\n            \n            // Raised rim\n            translate([0, 0, 6])\n                cylinder(r=9.5, h=3, $fn=60);\n                \n            // Bearing post\n            translate([0, 0, 9])\n                cylinder(r=4, h=8, $fn=30);\n        }\n        \n        // Axle hole\n        cylinder(r=2.5, h=20, center=false, $fn=30);\n    }\n}\n\n// Handle grip with ergonomic shaping\nmodule handle() {\n    difference() {\n        union() {\n            // Main handle tube\n            cylinder(r1=8, r2=6, h=80, center=true, $fn=60);\n            \n            // Grip bulge\n            translate([0, 0, -20])\n                scale([1.2, 1.2, 1])\n                    sphere(r=8, $fn=60);\n        }\n        \n        // Hollow tube\n        cylinder(r=4, h=82, center=true, $fn=30);\n        \n        // Grip grooves\n        for(i=[0:10:70]) {\n            rotate([0, 90, 0])\n                translate([0, -20+i, 0])\n                    cylinder(r=8.5, h=1.5, center=true, $fn=60);\n        }\n    }\n}\n\n// Assembly\n// Roller sleeve assembly\ntranslate([0, 0, 0]) {\n    roller_sleeve();\n    inner_tube();\n}\n\n// Left end cap\ntranslate([0, 0, -33.5]) {\n    end_cap();\n    rounded_end(11.5, 4);\n}\n\n// Right end cap\ntranslate([0, 0, 33.5]) {\n    mirror([0, 0, 1]) {\n        end_cap();\n        rounded_end(11.5, 4);\n    }\n}\n\n// Handle with bend\ntranslate([0, 0, -55]) {\n    rotate([90, 0, 0]) {\n        handle();\n        \n        // Connection ferrule\n        cylinder(r=5, h=10, center=true, $fn=30);\n        \n        // End plug\n        translate([0, 0, 45]) {\n            sphere(r=6.5, $fn=30);\n            cylinder(r=6, h=3, $fn=30);\n        }\n    }\n}\n\n// Hanging loop\ntranslate([0, 45, 0]) {\n    rotate([0, 90, 0]) {\n        difference() {\n            torus(5, 2, $fn=30);\n            cube([20, 20, 20], center=true);\n        }\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "mixer",
    "openscad_code": "// Kitchen Stand Mixer - Realistic Style, Medium Complexity\n// Approx 80mm tall, 3D printable with no large overhangs\n\n$fn = 32;\n\n// Main assembly\nmodule mixer() {\n    // Base housing\n    difference() {\n        union() {\n            // Main base body\n            translate([0, 0, 10])\n                cylinder(h = 20, r1 = 30, r2 = 28);\n            \n            // Front sloped panel\n            translate([0, -20, 25])\n                rotate([90, 0, 0])\n                    cylinder(h = 20, r1 = 28, r2 = 25);\n        }\n        \n        // Control dial recess\n        translate([22, 0, 15])\n            rotate([0, 90, 0])\n                cylinder(h = 10, r = 5);\n    }\n    \n    // Control dial\n    translate([25, 0, 15])\n        rotate([0, 90, 0])\n            cylinder(h = 2, r = 6);\n    \n    // Top arm pivot\n    translate([0, 0, 30])\n        cylinder(h = 15, r = 15);\n    \n    // Tilting motor head\n    translate([0, 10, 45])\n        rotate([-30, 0, 0])\n            union() {\n                // Motor housing\n                cylinder(h = 25, r = 12);\n                \n                // Motor top dome\n                translate([0, 0, 25])\n                    sphere(r = 12);\n                \n                // Speed lever\n                translate([0, 12, 15])\n                    cube([3, 8, 2], center = true);\n            }\n    \n    // Mixer shaft\n    translate([0, 12, 42])\n        rotate([-30, 0, 0])\n            cylinder(h = 25, r = 3);\n    \n    // Whisk/beater attachment\n    translate([0, 12 + sin(30)*25, 42 - cos(30)*25])\n        rotate([-30, 0, 0])\n            union() {\n                // Main shaft\n                cylinder(h = 15, r = 2);\n                \n                // Wire loops\n                for(i = [0:3]) {\n                    rotate([0, 0, i*90])\n                        translate([0, 5, 7])\n                            rotate([90, 0, 0])\n                                cylinder(h = 10, r1 = 5, r2 = 5);\n                }\n            }\n    \n    // Mixing bowl\n    translate([0, 0, 0])\n        difference() {\n            // Bowl outer\n            cylinder(h = 20, r1 = 22, r2 = 18);\n            \n            // Bowl inner\n            translate([0, 0, 2])\n                cylinder(h = 18, r1 = 20, r2 = 16);\n        }\n    \n    // Bowl handle\n    translate([22, 0, 10])\n        rotate([0, 90, 0])\n            difference() {\n                torus(4, 1.5);\n                translate([0, 0, -2])\n                    cube([10, 10, 4], center = true);\n            }\n    \n    // Base feet\n    for(angle = [0:90:270]) {\n        rotate([0, 0, angle])\n            translate([25, 0, 0])\n                cylinder(h = 3, r = 4);\n    }\n}\n\n// Create the model\nmixer();",
    "renders": true
  },
  {
    "vehicle": "scraper",
    "openscad_code": "// Realistic 3D-printable scraper – medium complexity, 100 mm total length\n// All dimensions in mm, printable without support, 2 mm wall thickness\n\n$fn = 36;  // smooth curves\n\nmodule scraper() {\n    // overall orientation: blade points along +X, handle along –X\n    union() {\n\n        /* ---------------- Handle ---------------- */\n        // ergonomic oval cross-section grip\n        translate([-70, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h = 70, d1 = 22, d2 = 20, center = false);\n\n        // end cap to close the handle\n        translate([-70, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h = 2, d = 22);\n\n        // finger grooves – subtract 3 small cylinders\n        for (i = [1:3]) {\n            translate([-70 + i*18, 0, 0])\n                rotate([0, 90, 0])\n                    difference() {\n                        cylinder(h = 20, d = 22);\n                        translate([0, 0, 10])\n                            rotate([0, 90, 0])\n                                cylinder(h = 23, d = 18, center = true);\n                    }\n        }\n\n        /* ---------------- Shaft ---------------- */\n        // straight neck linking handle to blade holder\n        translate([-35, 0, 0])\n            cube([20, 12, 12], center = true);\n\n        /* ---------------- Blade holder ---------------- */\n        // thick section with slot for replaceable blade\n        difference() {\n            translate([-5, 0, 0])\n                cube([20, 16, 6], center = true);\n\n            // blade slot – 0.6 mm thick, 8 mm deep\n            translate([5, 0, 0])\n                cube([8, 12, 0.6], center = true);\n        }\n\n        /* ---------------- Blade ---------------- */\n        // single-bevel metal-style blade\n        // lower flat face, upper tapered face\n        union() {\n            // flat bottom part\n            translate([10, 0, -2.5])\n                cube([40, 25, 1]);\n\n            // tapered top part\n            translate([10, 0, -1.5])\n                cube([40, 25, 1]);\n\n            // bevel\n            for (x = [20:5:45]) {\n                translate([x, 0, -1.5 + (x-10)/35*1.5])\n                    cube([5, 25, 0.2]);\n            }\n\n            // rounded front corners\n            for (y = [-12.5, 12.5]) {\n                translate([50, y, -2])\n                    sphere(d = 2);\n            }\n        }\n\n        /* ---------------- Reinforcement ribs ---------------- */\n        // two ribs under shaft for stiffness\n        for (y = [-7, 7]) {\n            difference() {\n                polyhedron(\n                    points = [\n                        [-35, y, -6],\n                        [-35, y,  6],\n                        [-5, y,  3],\n                        [-5, y, -3]\n                    ],\n                    faces = [\n                        [0, 1, 2, 3], // bottom\n                        [0, 1, 2, 3], // top (same for flat quad)\n                        [0, 1, 2], [1, 2, 3], // sides\n                        [0, 3, 2], [0, 2, 1]\n                    ]\n                );\n            }\n        }\n    }\n}\n\n// Render the part in upright orientation for easy printing\nrotate([0, 180, 0])\n    scraper();",
    "renders": true
  },
  {
    "vehicle": "paver",
    "openscad_code": "// Realistic concrete paver with stone texture and drainage channels\n// Size: 80 x 80 x 20 mm (standard paving stone dimensions)\n\n$fn = 30;  // Smooth curves for 3D printing\n\nmodule paver_base() {\n    // Main rectangular body with slightly rounded top edges\n    difference() {\n        // Main block with chamfered top\n        minkowski() {\n            cube([80, 80, 18], center = true);\n            cylinder(r = 1, h = 2, center = true);\n        }\n        \n        // Chamfer bottom edges slightly for printing\n        translate([0, 0, -10])\n            cube([85, 85, 5], center = true);\n    }\n}\n\nmodule drainage_channels() {\n    // Two perpendicular drainage grooves on top surface\n    translate([0, 0, 10]) {\n        // Longitudinal channel\n        difference() {\n            cube([80, 80, 0.1], center = true);\n            translate([0, 0, -1])\n                cube([78, 6, 2], center = true);\n        }\n        \n        // Transverse channel\n        rotate([0, 0, 90])\n            difference() {\n                cube([80, 80, 0.1], center = true);\n                translate([0, 0, -1])\n                    cube([78, 6, 2], center = true);\n            }\n    }\n}\n\nmodule stone_texture() {\n    // Random stone-like surface texture using small spheres\n    for (x = [-35:7:35]) {\n        for (y = [-35:7:35]) {\n            if (x*x + y*y < 38*38) {  // Within paver bounds\n                translate([x + (x%3-1)*0.5, \n                          y + (y%3-1)*0.5, \n                          10 + sin(x*0.5)*0.3 + cos(y*0.5)*0.3]) {\n                    sphere(r = 0.4 + (x+y)%3*0.2);\n                }\n            }\n        }\n    }\n}\n\nmodule spacers() {\n    // Small protrusions on sides for spacing between pavers\n    module spacer(x, y, rot) {\n        rotate([0, 0, rot])\n            translate([x, y, 0])\n                cube([2, 1, 8], center = true);\n    }\n    \n    // Add spacers on all four sides\n    spacer(41, 0, 0);\n    spacer(-41, 0, 0);\n    spacer(0, 41, 90);\n    spacer(0, -41, 90);\n}\n\nmodule corner_chips() {\n    // Small chips on corners for realistic wear\n    difference() {\n        translate([0, 0, 0])  // Placeholder for union\n            cube([0.01, 0.01, 0.01], center = true);\n        \n        // Chip top-right corner\n        translate([38, 38, 10])\n            rotate([0, 0, 45])\n                cube([6, 6, 12], center = true);\n        \n        // Chip bottom-left corner\n        translate([-38, -38, 10])\n            rotate([0, 0, 45])\n                cube([4, 4, 8], center = true);\n    }\n}\n\n// Main assembly\nunion() {\n    paver_base();\n    drainage_channels();\n    spacers();\n    \n    // Add surface texture only on top half\n    intersection() {\n        translate([0, 0, 5])\n            cube([85, 85, 15], center = true);\n        stone_texture();\n    }\n    \n    // Add wear marks\n    corner_chips();\n}\n\n// Add slight draft angle for easier printing\ndifference() {\n    translate([0, 0, 0])\n        children();\n    translate([0, 0, -12])\n        cube([82, 82, 4], center = true);\n}",
    "renders": true
  },
  {
    "vehicle": "compactor",
    "openscad_code": "// Medium-complexity realistic compactor model\n// Approx. 85 mm tall, 60 mm wide, 60 mm deep\n\n// Overall dimensions\nbase_w = 60;\nbase_d = 60;\nbase_h = 10;\n\n// Main body shell\nmodule body_shell() {\n    difference() {\n        // Outer shell\n        translate([0, 0, base_h/2])\n            cube([base_w, base_d, base_h*7.5], center=true);\n        \n        // Hollow cavity\n        translate([0, 0, base_h/2])\n            cube([base_w-4, base_d-4, base_h*7.5-2], center=true);\n        \n        // Top opening for ram\n        translate([0, 0, base_h*7.5])\n            cube([base_w-8, base_d-8, 10], center=true);\n    }\n}\n\n// Base frame with feet\nmodule base_frame() {\n    // Bottom plate\n    cube([base_w, base_d, base_h], center=true);\n    \n    // Four corner feet\n    for(x=[-1,1], y=[-1,1]) {\n        translate([x*(base_w/2-5), y*(base_d/2-5), -2])\n            cylinder(h=4, r=4, $fn=16);\n    }\n}\n\n// Hydraulic ram assembly\nmodule hydraulic_ram() {\n    // Main cylinder\n    translate([0, 0, base_h*7.5+15])\n        cylinder(h=25, r=10, $fn=32);\n    \n    // Piston rod\n    translate([0, 0, base_h*7.5+40])\n        cylinder(h=20, r=4, $fn=16);\n    \n    // Compaction plate\n    translate([0, 0, base_h*6.5])\n        cube([base_w-10, base_d-10, 3], center=true);\n}\n\n// Control box on side\nmodule control_box() {\n    translate([base_w/2+3, 0, base_h*4])\n        cube([10, 20, 15], center=true);\n    \n    // Control panel\n    translate([base_w/2+8.5, 0, base_h*4+5])\n        cube([2, 14, 8], center=true);\n}\n\n// Side reinforcing ribs\nmodule side_ribs() {\n    for(side=[-1,1]) {\n        translate([side*(base_w/2-1), 0, base_h*4])\n            cube([2, base_d-4, base_h*5], center=true);\n    }\n}\n\n// Front loading door\nmodule loading_door() {\n    translate([0, -base_d/2-0.5, base_h*3])\n        cube([base_w-4, 1, base_h*4], center=true);\n    \n    // Door handle\n    translate([0, -base_d/2-1, base_h*4])\n        cube([15, 1, 3], center=true);\n}\n\n// Top safety cage\nmodule safety_cage() {\n    // Four corner posts\n    for(x=[-1,1], y=[-1,1]) {\n        translate([x*(base_w/2-8), y*(base_d/2-8), base_h*7.5+30])\n            cylinder(h=15, r=2, $fn=12);\n    }\n    \n    // Top cross bars\n    for(x=[-1,1]) {\n        translate([x*(base_w/2-8), 0, base_h*7.5+45])\n            cube([2, base_d-16, 2], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    base_frame();\n    body_shell();\n    hydraulic_ram();\n    control_box();\n    side_ribs();\n    loading_door();\n    safety_cage();\n}",
    "renders": true
  },
  {
    "vehicle": "trencher",
    "openscad_code": "// Miniature trencher for 3D printing – 1:100 scale, ~80 mm long\n// Medium realism with printable walls (≥1.2 mm) and no steep overhangs\n\n$fn = 36;\n\n// Overall scale factor\nscale_factor = 0.8;\n\n// Main module\nmodule trencher() {\n    // Central chassis block\n    union() {\n        // Main frame\n        difference() {\n            // Main body\n            cube([55, 35, 18], center = true);\n            // Hollow cavity for weight saving\n            translate([0, 0, 1])\n                cube([50, 30, 16], center = true);\n        }\n\n        // Engine cover\n        translate([20, 0, 10])\n            rotate([0, 20, 0])\n            difference() {\n                cube([20, 22, 12], center = true);\n                translate([0, 0, 1])\n                    cube([18, 20, 10], center = true);\n            }\n\n        // Operator cab\n        translate([-15, 0, 12])\n            difference() {\n                cube([18, 22, 14], center = true);\n                // Windshield cutout\n                translate([0, 0, 2])\n                    cube([16, 20, 10], center = true);\n            }\n\n        // Tracks\n        left_track();\n        mirror([0, 1, 0])\n            left_track();\n\n        // Trenching boom\n        trenching_boom();\n    }\n}\n\n// Track module\nmodule left_track() {\n    translate([0, -20, -2])\n        difference() {\n            // Track housing\n            cube([55, 8, 10], center = true);\n            // Groove pattern\n            for (i = [-25:5:25])\n                translate([i, 0, 0])\n                    cube([3, 10, 6], center = true);\n        }\n}\n\n// Trenching boom module\nmodule trenching_boom() {\n    // Boom arm\n    translate([-30, 0, 0])\n        rotate([0, 0, -30])\n        union() {\n            difference() {\n                cube([50, 10, 8], center = true);\n                translate([0, 0, 1])\n                    cube([46, 8, 6], center = true);\n            }\n\n            // Cutting chain\n            cutting_chain();\n        }\n}\n\n// Cutting chain teeth module\nmodule cutting_chain() {\n    for (i = [-20:4:20]) {\n        translate([i, 0, -6])\n            rotate([0, 90, 0])\n            cylinder(h = 2.5, r1 = 3.5, r2 = 2, center = true);\n    }\n}\n\n// Render the trencher at final scale\nscale([scale_factor, scale_factor, scale_factor])\n    trencher();",
    "renders": true
  },
  {
    "vehicle": "skidsteer",
    "openscad_code": "// Realistic Skid-Steer Loader – medium complexity (no overhangs)\n// All dimensions in millimetres; model is ~90 mm long\n\n// ---------- Parameters ----------\nbody_l = 75;      // main chassis length\nbody_w = 40;      // chassis width\nbody_h = 30;      // chassis height\nlift_h = 45;      // lift arm height\nwheel_d = 20;     // wheel diameter\nwheel_w = 8;      // wheel width\nbucket_w = 45;    // bucket width\nbucket_d = 25;    // bucket depth\nwall_t = 2;       // wall thickness for printing\n\n// ---------- Wheels ----------\nmodule wheel() {\n    difference() {\n        cylinder(h = wheel_w, d = wheel_d, $fn = 32);\n        translate([0, 0, -1])\n            cylinder(h = wheel_w + 2, d = wheel_d - 4, $fn = 32);\n    }\n}\n\n// Four wheels on each side\nmodule wheels() {\n    for(side = [0, 1])\n        for(pos = [0, 1, 2, 3]) {\n            mirror([side ? 1 : 0, 0, 0]) translate([body_w/2 + wheel_w/2 + 2,\n                                                     -body_l/2 + 12 + pos*18,\n                                                     wheel_d/2])\n                wheel();\n        }\n}\n\n// ---------- Main Chassis ----------\nmodule chassis() {\n    difference() {\n        // outer block\n        cube([body_w, body_l, body_h], center = true);\n        // hollow inside\n        translate([0, 0, -wall_t/2])\n            cube([body_w - 2*wall_t, body_l - 2*wall_t, body_h - wall_t], center = true);\n        // cabin opening on top\n        translate([0, body_l/2 - 15, body_h/2 - wall_t])\n            cube([body_w - 4*wall_t, 15, body_h/2], center = false);\n    }\n}\n\n// ---------- Operator Cabin ----------\nmodule cabin() {\n    difference() {\n        // main cabin box\n        translate([0, body_l/2 - 12, body_h/2 + 12])\n            cube([body_w - 6, 20, 20], center = true);\n        // front window\n        translate([0, body_l/2 - 22, body_h/2 + 20])\n            cube([body_w - 10, 2, 12], center = true);\n    }\n}\n\n// ---------- Lift Arms ----------\nmodule lift_arms() {\n    for(side = [-1, 1])\n        translate([side*(body_w/2 - 3), -body_l/2 + 5, body_h/2])\n            hull() {\n                cube([2, 5, 4]);\n                translate([0, body_l/2 - 5, lift_h - body_h/2])\n                    cube([2, 5, 4]);\n            }\n}\n\n// ---------- Bucket ----------\nmodule bucket() {\n    difference() {\n        hull() {\n            translate([0, body_l/2 + bucket_d/2, lift_h - 5])\n                cube([bucket_w, bucket_d, 10], center = true);\n            translate([0, body_l/2 + bucket_d/2 + 2, lift_h - 12])\n                cube([bucket_w - 4, bucket_d - 4, 8], center = true);\n        }\n        // cut inside\n        translate([0, body_l/2 + bucket_d/2, lift_h - 5])\n            cube([bucket_w - 4, bucket_d - 4, 8], center = true);\n    }\n}\n\n// ---------- Assembly ----------\nunion() {\n    chassis();\n    cabin();\n    lift_arms();\n    bucket();\n    wheels();\n}",
    "renders": true
  },
  {
    "vehicle": "backhoe",
    "openscad_code": "// Realistic Mini Backhoe – OpenSCAD\n// Designed for 3D printing, ~80 mm long, medium detail\n// All parts printed without supports (split in place or printable angles)\n\n$fn = 32;\n\n// Overall scale for 3D printing\nscale_factor = 0.5;\n\nmodule main_assembly() {\n    scale([scale_factor, scale_factor, scale_factor])\n    union() {\n        // Chassis and tracks\n        chassis();\n        // Operator cabin\n        cabin();\n        // Engine hood\n        engine_hood();\n        // Boom assembly\n        boom_assembly();\n        // Stick and bucket\n        stick_bucket_assembly();\n        // Stabilizer legs\n        stabilizers();\n    }\n}\n\nmodule chassis() {\n    // Lower frame\n    difference() {\n        cube([150, 60, 20], center = true);\n        // Hollow inside to save material\n        translate([0, 0, 10])\n            cube([140, 50, 20], center = true);\n    }\n\n    // Tracks left\n    translate([-65, 0, -10])\n        track();\n    // Tracks right\n    translate([65, 0, -10])\n        track();\n}\n\nmodule track() {\n    color(\"gray\")\n    for (i = [-35:7:35])\n        translate([0, i, -5])\n            rotate([90, 0, 0])\n                cylinder(h = 15, r1 = 8, r2 = 8);\n}\n\nmodule cabin() {\n    translate([0, 0, 25])\n    difference() {\n        cube([50, 50, 40], center = true);\n        // Door cutout\n        translate([25, 0, 0])\n            cube([2, 30, 35], center = true);\n        // Windows\n        translate([0, 25, 5])\n            cube([40, 2, 20], center = true);\n        translate([0, -25, 5])\n            cube([40, 2, 20], center = true);\n    }\n}\n\nmodule engine_hood() {\n    translate([0, 0, 55])\n    difference() {\n        cube([60, 40, 25], center = true);\n        // Sloped top\n        translate([0, 0, 12.5])\n            rotate([45, 0, 0])\n                cube([65, 45, 25], center = true);\n    }\n}\n\nmodule boom_assembly() {\n    // Boom pivot\n    translate([0, 0, 65])\n    rotate([0, 0, 0])\n    cylinder(h = 15, r = 8);\n\n    // Boom arm\n    translate([0, 0, 72])\n    rotate([-30, 0, 0])\n    boom();\n}\n\nmodule boom() {\n    // Main boom tube\n    difference() {\n        translate([0, 0, -60])\n            cylinder(h = 120, r1 = 6, r2 = 4);\n        // Hollow\n        translate([0, 0, -60])\n            cylinder(h = 120, r1 = 4, r2 = 2.5);\n    }\n\n    // Cylinder mount\n    translate([0, 0, -20])\n    rotate([90, 0, 0])\n        cylinder(h = 10, r = 3);\n}\n\nmodule stick_bucket_assembly() {\n    // Stick joint at boom end\n    translate([0, 0, -55])\n    rotate([45, 0, 0])\n    stick();\n}\n\nmodule stick() {\n    // Stick tube\n    difference() {\n        translate([0, 0, -40])\n            cylinder(h = 80, r1 = 4, r2 = 3);\n        // Hollow\n        translate([0, 0, -40])\n            cylinder(h = 80, r1 = 2.5, r2 = 1.5);\n    }\n\n    // Bucket joint\n    translate([0, 0, -75])\n    rotate([60, 0, 0])\n    bucket();\n}\n\nmodule bucket() {\n    difference() {\n        // Bucket shell\n        rotate([0, 90, 0])\n            cylinder(h = 25, r1 = 12, r2 = 8);\n\n        // Cutout inside\n        rotate([0, 90, 0])\n            translate([0, 0, -1])\n            cylinder(h = 27, r1 = 10, r2 = 6);\n\n        // Teeth\n        for (i = [-10:5:10])\n            translate([i, 12, -2])\n                cube([3, 5, 5]);\n    }\n}\n\nmodule stabilizers() {\n    // Left stabilizer\n    translate([-75, 0, -10])\n    rotate([0, 0, 0])\n    stabilizer();\n\n    // Right stabilizer\n    translate([75, 0, -10])\n    rotate([0, 0, 0])\n    stabilizer();\n}\n\nmodule stabilizer() {\n    color(\"gray\")\n    union() {\n        // Leg\n        translate([0, 0, -15])\n            cylinder(h = 30, r = 4);\n\n        // Foot\n        translate([0, 0, -30])\n            rotate([0, 90, 0])\n                cylinder(h = 25, r = 6);\n    }\n}\n\nmain_assembly();",
    "renders": true
  },
  {
    "vehicle": "telehandler",
    "openscad_code": "// Telehandler - realistic style, medium complexity\n// Approx 80mm long, 35mm wide, 35mm tall\n\n// Main dimensions (mm)\nwheel_d = 20;\nwheel_w = 8;\nbody_l = 40;\nbody_w = 25;\nbody_h = 15;\ncab_h = 12;\nboom_l = 70;\nboom_w = 8;\nboom_h = 6;\nfork_w = 20;\nfork_t = 2;\nfork_l = 15;\n\n// Wall thickness for 3D printing\nwall = 1.5;\n\n// Wheel module\nmodule wheel() {\n    difference() {\n        // Tire\n        cylinder(d=wheel_d, h=wheel_w, $fn=32);\n        // Rim hole\n        translate([0,0,-0.1])\n            cylinder(d=wheel_d/2, h=wheel_w+0.2, $fn=16);\n    }\n}\n\n// Chassis frame\nmodule chassis() {\n    // Main frame\n    cube([body_l, body_w, body_h]);\n    \n    // Engine cover\n    translate([-5, body_w/2-5, body_h])\n        cube([15, 10, 5]);\n    \n    // Counterweight\n    translate([-body_l/2-5, -body_w/2+2, 0])\n        cube([10, body_w-4, body_h]);\n}\n\n// Cab with windows\nmodule cab() {\n    // Cab structure\n    translate([body_l/2-15, -body_w/2, body_h])\n        cube([15, body_w, cab_h]);\n    \n    // Windshield\n    difference() {\n        translate([body_l/2-15, -body_w/2+wall, body_h+cab_h-4])\n            cube([wall, body_w-wall*2, 4]);\n        translate([body_l/2-15+wall, -body_w/2+wall+1, body_h+cab_h-3])\n            cube([wall, body_w-wall*2-2, 2]);\n    }\n    \n    // Roof\n    translate([body_l/2-15+7.5, 0, body_h+cab_h])\n        cube([15+wall, body_w+wall, 2], center=true);\n}\n\n// Boom assembly\nmodule boom() {\n    // Boom base pivot\n    translate([body_l/2-10, 0, body_h+cab_h])\n        rotate([0,90,0])\n            cylinder(d=8, h=8, center=true, $fn=16);\n    \n    // Main boom\n    translate([body_l/2-5, 0, body_h+cab_h+3])\n        rotate([0,45,0])\n            cube([boom_l, boom_w, boom_h], center=true);\n    \n    // Boom support cylinders\n    translate([body_l/2-15, -body_w/2+5, body_h+cab_h])\n        rotate([45,0,90])\n            cylinder(d=3, h=15, $fn=12);\n    \n    translate([body_l/2-15, body_w/2-5, body_h+cab_h])\n        rotate([45,0,90])\n            cylinder(d=3, h=15, $fn=12);\n}\n\n// Fork assembly\nmodule forks() {\n    // Fork mount\n    translate([body_l/2+boom_l*cos(45)-10, 0, body_h+cab_h+3+boom_l*sin(45)])\n        cube([10, boom_w, 5], center=true);\n    \n    // Fork tines\n    for(i=[-1,1]) {\n        translate([body_l/2+boom_l*cos(45)-5, i*fork_w/4, body_h+cab_h+3+boom_l*sin(45)-fork_t/2-2.5])\n            cube([fork_l, fork_t, fork_t*4]);\n    }\n}\n\n// Assembly\nunion() {\n    // Wheels\n    for(side=[-1,1]) {\n        translate([body_l/2-10, side*body_w/2, wheel_d/2])\n            rotate([90,0,0])\n                wheel();\n        translate([-body_l/2+5, side*body_w/2, wheel_d/2])\n            rotate([90,0,0])\n                wheel();\n    }\n    \n    // Main body\n    chassis();\n    cab();\n    boom();\n    forks();\n    \n    // Axles\n    translate([body_l/2-10, 0, wheel_d/2])\n        rotate([90,0,0])\n            cylinder(d=6, h=body_w, center=true, $fn=16);\n    translate([-body_l/2+5, 0, wheel_d/2])\n        rotate([90,0,0])\n            cylinder(d=6, h=body_w, center=true, $fn=16);\n    \n    // Lift cylinder\n    translate([0, 0, wheel_d/2+2])\n        cylinder(d=4, h=body_h+cab_h-2, $fn=12);\n}",
    "renders": true
  },
  {
    "vehicle": "dozer",
    "openscad_code": "// Medium-complexity realistic bulldozer (dozer)\n// Roughly 75 mm long, printable without supports\n\n$fn = 24;\n\n// Overall scale factor (1 = 1 mm)\nscale_factor = 1;\n\n// Main assembly\nmodule dozer() {\n    union() {\n        // Lower chassis and tracks\n        translate([0, 0, 6]) chassis();\n        \n        // Upper engine compartment and cab\n        translate([-12, 0, 20]) upper_body();\n        \n        // Blade assembly\n        translate([32, 0, 10]) blade_assembly();\n        \n        // Rear ripper (optional but adds realism)\n        translate([-38, 0, 8]) ripper();\n    }\n}\n\n// Track frame and running gear\nmodule chassis() {\n    difference() {\n        // Main frame block\n        cube([70, 36, 12], center = true);\n        \n        // Lightening cutouts\n        translate([0, 0, 5]) cube([60, 30, 8], center = true);\n    }\n    \n    // Two tracks\n    for (y = [-14, 14]) {\n        translate([0, y, -4]) track();\n    }\n}\n\n// Track module\nmodule track() {\n    difference() {\n        // Track belt (printable as single piece)\n        cube([65, 8, 4], center = true);\n        \n        // Tread grooves\n        for (x = [-30:5:30]) {\n            translate([x, 0, 1]) cube([3, 10, 2], center = true);\n        }\n    }\n    \n    // Road wheels\n    for (x = [-25:10:25]) {\n        translate([x, 0, -3]) cylinder(h = 8, r = 3, center = true);\n    }\n    \n    // Drive sprocket\n    translate([30, 0, -3]) cylinder(h = 8, r = 4, center = true);\n}\n\n// Upper body with engine and cab\nmodule upper_body() {\n    difference() {\n        // Engine compartment\n        cube([30, 34, 18], center = true);\n        \n        // Radiator grill indent\n        translate([15, 0, 2]) cube([2, 20, 10], center = true);\n    }\n    \n    // Cab\n    translate([-10, 0, 12]) {\n        difference() {\n            cube([20, 28, 16], center = true);\n            \n            // Cab windows\n            translate([0, 0, 2]) cube([18, 24, 10], center = true);\n        }\n        \n        // Roof\n        translate([0, 0, 10]) cube([22, 30, 2], center = true);\n    }\n    \n    // Exhaust stack\n    translate([0, 12, 20]) cylinder(h = 15, r = 2);\n}\n\n// Blade assembly\nmodule blade_assembly() {\n    // Push arms\n    translate([-5, -15, -2]) cube([10, 4, 12], center = true);\n    translate([-5, 15, -2]) cube([10, 4, 12], center = true);\n    \n    // Blade\n    difference() {\n        // Main curved blade\n        translate([5, 0, 0]) scale([1, 1.2, 1]) sphere(r = 20);\n        \n        // Flatten back\n        translate([5, 0, -15]) cube([50, 50, 30], center = true);\n        \n        // Cut to proper height\n        translate([5, 0, 12]) cube([50, 50, 30], center = true);\n    }\n    \n    // Blade supports\n    translate([0, 0, -5]) cylinder(h = 10, r = 2);\n}\n\n// Rear ripper module\nmodule ripper() {\n    translate([0, 0, 0]) {\n        // Ripper beam\n        cube([6, 20, 8], center = true);\n        \n        // Ripper shanks\n        for (y = [-6:6:6]) {\n            translate([0, y, -8]) {\n                cube([4, 4, 8], center = true);\n                translate([0, 0, -6]) rotate([0, 15, 0]) cube([2, 2, 8], center = true);\n            }\n        }\n    }\n}\n\n// Render the complete dozer\ndozer();",
    "renders": true
  },
  {
    "vehicle": "scrapers",
    "openscad_code": "// 3D Printable Ice-Scraper (Realistic Style, Medium Complexity)\n// Overall size: ~85 mm length × 55 mm width × 18 mm height\n// All overhangs < 45°, wall thickness ≥ 1.2 mm\n\n$fn = 32; // Smooth curves\n\n/* Main assembly */\nunion() {\n    handle_body();\n    blade_assembly();\n}\n\n/* Handle with ergonomic grip ribs */\nmodule handle_body() {\n    difference() {\n        // Outer rounded handle\n        hull() {\n            translate([0, 0, 8]) sphere(d = 28);\n            translate([60, 0, 8]) sphere(d = 25);\n        }\n        \n        // Hollow core to save material\n        translate([0, 0, 8]) cube([62, 22, 14], center = true);\n        \n        // Finger grooves on top\n        for (x = [10:15:55])\n            translate([x, 0, 16.5])\n                rotate([90, 0, 0])\n                    cylinder(h = 4, d1 = 8, d2 = 12);\n    }\n    \n    // Grip ribs around handle\n    for (x = [5:7:60]) {\n        rotate([0, 90, 0])\n            translate([x, 0, 8])\n                difference() {\n                    cylinder(h = 25, d = 28.5);\n                    cylinder(h = 26, d = 26.5);\n                }\n    }\n    \n    // Key-ring hole\n    translate([0, 0, 8])\n        rotate([90, 0, 0])\n            cylinder(h = 30, d = 4);\n}\n\n/* Blade with dual edge and stiffening ribs */\nmodule blade_assembly() {\n    difference() {\n        // Blade body\n        translate([80, 0, 3])\n            cube([20, 50, 6], center = true);\n        \n        // Beveled scraping edge #1 (front)\n        translate([91, 0, 0])\n            rotate([0, 20, 0])\n                cube([10, 60, 10], center = true);\n        \n        // Beveled scraping edge #2 (back)\n        translate([69, 0, 0])\n            rotate([0, -20, 0])\n                cube([10, 60, 10], center = true);\n    }\n    \n    // Stiffening ribs under blade\n    for (y = [-18:9:18]) {\n        translate([80, y, -2])\n            cube([18, 2, 4], center = true);\n    }\n    \n    // Fillet from handle to blade\n    hull() {\n        translate([65, 0, 8])\n            sphere(d = 26);\n        translate([80, 0, 3])\n            sphere(d = 6);\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "pavers",
    "openscad_code": "// Realistic 3D Printable Paver - Herringbone Style\n// 90 mm x 60 mm x 20 mm overall\n\n$fn=30;                // Smooth curves\nwall=1.2;              // 1.2 mm wall for FDM printing\nt=20;                  // Total thickness (20 mm)\n\n// Main brick body\nmodule brick_body() {\n    difference() {\n        // Full brick\n        cube([90, 60, t], center=true);\n        \n        // Hollow out cavity for material savings\n        translate([0,0,wall/2])\n            cube([90-2*wall, 60-2*wall, t-wall], center=true);\n    }\n}\n\n// Top surface texture – shallow grooves\nmodule top_grooves() {\n    linear_extrude(height=1.5, center=true)\n        for(i=[-35:5:35])\n            translate([i,-30,0])\n                square([0.8, 60]);\n}\n\n// Chamfered edges for realism\nmodule chamfer_edge() {\n    difference() {\n        cube([90, 60, t], center=true);\n        for(dx=[-1,1])\n        for(dy=[-1,1])\n            translate([dx*45, dy*30, t/2])\n                cylinder(h=t+2, r1=2, r2=0, center=true);\n    }\n}\n\n// Drainage slots\nmodule drainage_slots() {\n    difference() {\n        cube([90, 60, t], center=true);\n        for(y=[-20:10:20])\n            translate([0,y,t-2.5])\n                rotate([90,0,0])\n                    cube([80,2,2.5], center=true);\n    }\n}\n\n// Bottom feet for grip\nmodule bottom_feet() {\n    for(x=[-30:30:30])\n    for(y=[-20:20:20])\n        translate([x,y,-t/2+1])\n            cylinder(h=2, r=4, $fn=8);\n}\n\n// Assembly\nunion() {\n    // Main brick\n    difference() {\n        brick_body();\n        chamfer_edge();\n    }\n    \n    // Add grooves on top\n    translate([0,0,t/2-0.75])\n        top_grooves();\n    \n    // Drainage pattern\n    translate([0,0,0])\n        drainage_slots();\n    \n    // Feet underneath\n    bottom_feet();\n}",
    "renders": true
  },
  {
    "vehicle": "compactors",
    "openscad_code": "// Compactor (medium complexity, realistic style)\n// Max dimension ~75 mm, 3D-printable with no overhangs >45°\n\n$fn = 48;  // smooth curves\n\n// Overall scale factor\nscale_factor = 1;\n\n// Main body\nmodule compactor_body() {\n    difference() {\n        union() {\n            // Primary chassis\n            translate([0, 0, 15])\n                cube([60, 35, 30], center = true);\n\n            // Front plate\n            translate([0, -19, 15])\n                cube([60, 4, 30], center = true);\n\n            // Rear engine housing\n            translate([0, 19, 20])\n                cube([50, 12, 20], center = true);\n\n            // Drum guards left\n            translate([-22, 0, 7])\n                cube([8, 35, 14], center = true);\n\n            // Drum guards right\n            translate([22, 0, 7])\n                cube([8, 35, 14], center = true);\n\n            // Operator platform\n            translate([0, 30, 22])\n                cube([40, 20, 4], center = true);\n        }\n\n        // Hollow out interior\n        translate([0, 0, 15])\n            cube([54, 29, 28], center = true);\n\n        // Front window\n        translate([0, -17, 25])\n            cube([25, 2, 10], center = true);\n    }\n}\n\n// Compaction drum\nmodule drum() {\n    for (i = [-1, 1]) {\n        translate([i * 22, 0, 0])\n            rotate([90, 0, 0])\n                cylinder(h = 32, d = 24);\n    }\n\n    // Drum connector axle\n    rotate([90, 0, 0])\n        cylinder(h = 44, d = 6);\n}\n\n// Handle assembly\nmodule handle() {\n    // Vertical supports\n    for (x = [-10, 10]) {\n        translate([x, 40, 28])\n            rotate([0, 15, 0])\n                cylinder(h = 20, d = 6);\n    }\n\n    // Horizontal grip\n    translate([0, 55, 33])\n        rotate([0, 15, 0])\n            cube([26, 6, 6], center = true);\n}\n\n// Warning roller on back\nmodule warning_roller() {\n    translate([0, 19, 32])\n        rotate([90, 0, 0])\n            cylinder(h = 40, d = 8);\n}\n\n// Engine details\nmodule engine() {\n    // Engine block\n    translate([0, 19, 28])\n        cube([40, 10, 12], center = true);\n\n    // Exhaust pipe\n    translate([15, 19, 35])\n        cylinder(h = 15, d1 = 6, d2 = 4);\n}\n\n// Base plate for print stability\nmodule base_plate() {\n    translate([0, 0, 0])\n        cube([65, 70, 1], center = true);\n}\n\n// Assemble the compactor\nunion() {\n    base_plate();\n    compactor_body();\n    drum();\n    handle();\n    warning_roller();\n    engine();\n}",
    "renders": true
  },
  {
    "vehicle": "trenchers",
    "openscad_code": "// Trenchers (Military Trench Shovel) - Realistic Style, Medium Complexity\n// Overall dimensions: ~80mm length\n\n// Main parameters\n$fn = 32;  // Smoothness for curved parts\nblade_thickness = 2.5;\nhandle_diameter = 12;\nhandle_length = 60;\nblade_width = 45;\nblade_length = 35;\n\n// Main module for complete trenchers\nmodule trenchers() {\n    union() {\n        // Handle assembly\n        handle_assembly();\n        \n        // Blade assembly\n        blade_assembly();\n    }\n}\n\n// Handle with grip texture\nmodule handle_assembly() {\n    translate([0, 0, handle_length/2]) {\n        rotate([90, 0, 0]) {\n            // Main handle tube\n            difference() {\n                cylinder(h = handle_length, d = handle_diameter, center = true);\n                \n                // Hollow out handle for weight reduction\n                cylinder(h = handle_length + 2, d = handle_diameter - 6, center = true);\n            }\n            \n            // Grip rings\n            for(i = [-handle_length/2 + 8 : 8 : handle_length/2 - 8]) {\n                translate([0, 0, i]) {\n                    // Raised grip rings\n                    difference() {\n                        cylinder(h = 3, d = handle_diameter + 2, center = true);\n                        cylinder(h = 4, d = handle_diameter, center = true);\n                    }\n                }\n            }\n            \n            // End cap\n            translate([0, 0, handle_length/2 + 1.5]) {\n                cylinder(h = 3, d = handle_diameter);\n            }\n        }\n    }\n}\n\n// Blade with realistic features\nmodule blade_assembly() {\n    translate([0, 0, -handle_length/2 - blade_length/2]) {\n        rotate([90, 0, 0]) {\n            union() {\n                // Main blade\n                difference() {\n                    // Blade shape\n                    union() {\n                        // Central blade body\n                        translate([0, -blade_length/2, 0]) {\n                            cube([blade_width, blade_length, blade_thickness], center = true);\n                        }\n                        \n                        // Curved tip\n                        translate([0, blade_length/2 - 5, 0]) {\n                            rotate([90, 0, 0]) {\n                                cylinder(h = blade_width, d = 10, center = true);\n                            }\n                        }\n                    }\n                    \n                    // Taper blade edges\n                    translate([0, -blade_length/2 - 5, 0]) {\n                        cube([blade_width + 2, blade_length + 10, blade_thickness + 2], center = true);\n                    }\n                }\n                \n                // Cutting edge bevel\n                difference() {\n                    translate([0, blade_length/2 - 2, -blade_thickness/2 - 1]) {\n                        cube([blade_width + 4, 4, 2], center = true);\n                    }\n                    translate([0, blade_length/2 - 1, -blade_thickness/2 - 2]) {\n                        rotate([0, 30, 0]) {\n                            cube([blade_width + 8, 6, 4], center = true);\n                        }\n                    }\n                }\n                \n                // Reinforcement rib\n                translate([0, -blade_length/2 + 10, blade_thickness/2 + 1]) {\n                    cube([blade_width * 0.6, blade_length * 0.5, 2], center = true);\n                }\n                \n                // Handle socket\n                translate([0, -blade_length/2 - 5, 0]) {\n                    rotate([0, 90, 0]) {\n                        difference() {\n                            cylinder(h = 15, d = handle_diameter + 4, center = true);\n                            cylinder(h = 16, d = handle_diameter, center = true);\n                        }\n                        \n                        // Rivet holes\n                        for(i = [-6, 6]) {\n                            translate([0, 0, i]) {\n                                rotate([90, 0, 0]) {\n                                    cylinder(h = handle_diameter + 6, d = 3, center = true);\n                                }\n                            }\n                        }\n                    }\n                }\n                \n                // Fold line indicators\n                for(i = [-1, 1]) {\n                    translate([i * blade_width/4, -blade_length/2 + 5, blade_thickness/2 + 0.1]) {\n                        cube([2, blade_length * 0.7, 0.5], center = true);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Generate the trenchers\ntrenchers();",
    "renders": true
  },
  {
    "vehicle": "skidsteers",
    "openscad_code": "// Skid-steer loader – medium-complexity, 3D-printable, 1:50 scale\n// Overall bounding box ≈ 90 × 45 × 45 mm\n\n// Wall thickness for printability\nwall = 2;\n\n// Main body\nmodule chassis() {\n    difference() {\n        // Outer shell\n        hull() {\n            cube([70, 38, 28], center=true);\n            translate([0, 0, 10]) cube([60, 34, 18], center=true);\n        }\n        // Hollow inside\n        hull() {\n            cube([70-wall*2, 38-wall*2, 28-wall*2], center=true);\n            translate([0, 0, 10]) cube([60-wall*2, 34-wall*2, 18-wall*2], center=true);\n        }\n    }\n}\n\n// Side sprocket support boxes\nmodule side_box() {\n    difference() {\n        cube([wall, 15, 20], center=true);\n        translate([0, 0, 5]) cube([wall+0.5, 11, 10], center=true);\n    }\n}\n\n// Tracks\nmodule track_segment() {\n    color(\"black\")\n    hull() {\n        cube([4, 12, 3]);\n        translate([0, 0, 1]) cube([4, 8, 2]);\n    }\n}\n\nmodule track_assembly(length=50) {\n    for (i=[0:4:length-4])\n        translate([i, 0, 0]) track_segment();\n}\n\n// Lift arm\nmodule lift_arm() {\n    difference() {\n        union() {\n            // Main arm\n            translate([0, 0, 10]) cube([40, 6, 4], center=true);\n            // Brace\n            translate([15, 0, 10]) rotate([0, 45, 0])\n                cube([30, 6, 4], center=true);\n        }\n        // Hole for pin\n        translate([0, 0, 10]) rotate([90, 0, 0])\n            cylinder(h=8, d=3, center=true);\n    }\n}\n\n// Bucket\nmodule bucket() {\n    difference() {\n        hull() {\n            translate([0, 0, 0]) cube([30, 35, 15], center=true);\n            translate([0, 0, -7]) cube([30, 35, 2], center=true);\n        }\n        // Inside cavity\n        hull() {\n            translate([0, 0, 1]) cube([28, 33, 12], center=true);\n            translate([0, 0, -6]) cube([28, 33, 2], center=true);\n        }\n    }\n}\n\n// Cabin\nmodule cabin() {\n    difference() {\n        // Cabin block\n        translate([-10, 0, 18]) cube([20, 26, 18], center=true);\n        // Door window\n        translate([-10, 10, 18]) cube([wall, 8, 10], center=true);\n        // Windshield\n        translate([-10, 0, 25]) cube([wall, 20, 8], center=true);\n    }\n}\n\n// ROPS bar\nmodule rops() {\n    color(\"gray\")\n    union() {\n        translate([0, 0, 35]) cube([24, 28, 2], center=true);\n        translate([12, 14, 26]) cylinder(h=9, d=3);\n        translate([12,-14, 26]) cylinder(h=9, d=3);\n        translate([-12,14, 26]) cylinder(h=9, d=3);\n        translate([-12,-14, 26]) cylinder(h=9, d=3);\n    }\n}\n\n// Assemble skid-steer\nunion() {\n    chassis();\n\n    // Side boxes\n    translate([35, 0, -2]) side_box();\n    translate([-35, 0, -2]) side_box();\n\n    // Tracks\n    translate([30, 0, -12]) track_assembly(length=50);\n    translate([-30, 0, -12]) track_assembly(length=50);\n\n    // Cabin\n    cabin();\n\n    // ROPS\n    rops();\n\n    // Lift arm & bucket\n    translate([30, 0, 15]) rotate([0, -20, 0]) lift_arm();\n    translate([55, 0, 22]) rotate([0, -20, 0]) bucket();\n}",
    "renders": true
  },
  {
    "vehicle": "backhoes",
    "openscad_code": "$fn=32; // Smooth curves for 3D printing\n\n// Main dimensions (in mm)\ncab_w = 28; cab_h = 20; cab_d = 30;\nengine_w = 20; engine_h = 15; engine_d = 25;\ntrack_w = 8; track_h = 10; track_d = 40;\nboom_len = 60; boom_h = 5; boom_w = 6;\nstick_len = 45; stick_h = 4; stick_w = 5;\nbucket_w = 18; bucket_h = 8; bucket_d = 10;\n\n// Wheel pins for pose-ability\npin_r = 1.5; pin_h = 2;\n\nmodule track_assembly(){\n    // Left track frame\n    translate([-cab_w/2-track_w, -track_h/2, -track_d/2])\n        cube([track_w, track_h, track_d]);\n    // Right track frame\n    translate([cab_w/2, -track_h/2, -track_d/2])\n        cube([track_w, track_h, track_d]);\n    // Road wheels (simplified cylinders)\n    for(z=[-track_d/2+8:8:track_d/2-8])\n        for(side=[-1,1])\n            translate([side*(cab_w/2+track_w/2), -track_h-2, z])\n                rotate([90,0,0])\n                    cylinder(h=track_w, r=3, center=true);\n}\n\nmodule cab(){\n    difference(){\n        // Main cab block\n        translate([0,0,track_h])\n            cube([cab_w, cab_d, cab_h], center=true);\n        // Windshield recess\n        translate([0,cab_d/2-1,track_h+cab_h/2-2])\n            cube([cab_w-6, 2, 8], center=true);\n        // Door lines (visual only)\n        translate([cab_w/2-1,0,track_h+cab_h/2])\n            cube([2, cab_d, cab_h-2], center=true);\n    }\n    // Roof detail\n    translate([0,cab_d/2-5,track_h+cab_h/2+1])\n        cube([cab_w-4, 10, 2], center=true);\n}\n\nmodule engine_housing(){\n    translate([0, -cab_d/2-engine_d/2, track_h+cab_h/2])\n        cube([engine_w, engine_d, engine_h], center=true);\n}\n\nmodule boom(stick_angle=0, bucket_angle=0){\n    // Boom base pivot\n    translate([0, cab_d/2, track_h+cab_h-5])\n        cylinder(h=8, r=4, center=true);\n    \n    // Main boom arm\n    rotate([0,-20,0])\n    translate([0, 0, 0])\n    rotate([0,0,0])\n    translate([boom_len/2-5, 0, 0])\n        cube([boom_len, boom_w, boom_h], center=true);\n    \n    // Stick arm\n    translate([boom_len-10, 0, 0])\n    rotate([0, stick_angle, 0])\n    translate([stick_len/2-5, 0, 0])\n        cube([stick_len, stick_w, stick_h], center=true);\n    \n    // Bucket assembly\n    translate([boom_len+stick_len-15, 0, 0])\n    rotate([0, bucket_angle, 0])\n    difference(){\n        translate([bucket_d/2, 0, 0])\n            cube([bucket_d, bucket_w, bucket_h], center=true);\n        // Bucket cavity\n        translate([bucket_d/2+2, 0, -bucket_h/2+2])\n            cube([bucket_d-4, bucket_w-4, bucket_h-2], center=true);\n    }\n}\n\n// Assembly\nunion(){\n    color(\"darkgreen\") track_assembly();\n    color(\"yellow\") cab();\n    color(\"black\") engine_housing();\n    color(\"gray\") boom(stick_angle=-30, bucket_angle=45);\n}",
    "renders": true
  },
  {
    "vehicle": "telehandlers",
    "openscad_code": "// Realistic Medium-Complexity Telehandler\n// Dimensions in mm, scaled for ~90 mm length\n\n$fn = 32; // Smooth curves\n\nmodule wheel(rim_d=10, tire_d=15, w=8, tread=true){\n    // Tire\n    difference(){\n        cylinder(d=tire_d, h=w, center=true);\n        cylinder(d=rim_d+2, h=w+1, center=true);\n    }\n    // Rim\n    color(\"silver\")\n    cylinder(d=rim_d, h=w+0.5, center=true);\n    \n    // Tread grooves\n    if(tread){\n        for(i=[0:3:359]){\n            rotate([0,0,i])\n            translate([tire_d/2-1, 0, -w/2-0.1])\n            cube([2,1,w+0.2], center=true);\n        }\n    }\n}\n\nmodule axle(wheels=2, spacing=50){\n    union(){\n        // Axle beam\n        translate([0,0,-8])\n        cube([spacing+20, 8, 8], center=true);\n        \n        // Wheels\n        for(i=[-1,1])\n        translate([i*spacing/2, 0, 0])\n        rotate([90,0,0])\n        wheel();\n    }\n}\n\nmodule chassis(){\n    difference(){\n        // Main frame\n        union(){\n            // Engine compartment\n            translate([-25, 0, 15])\n            cube([35, 30, 25], center=true);\n            \n            // Operator cab\n            translate([15, 0, 30])\n            cube([30, 28, 40], center=true);\n            \n            // Counterweight\n            translate([-45, 0, 10])\n            cube([20, 25, 20], center=true);\n        }\n        \n        // Cab window cutouts\n        translate([15, -14.1, 35])\n        cube([25, 1, 15], center=true);\n        translate([15, 14.1, 35])\n        cube([25, 1, 15], center=true);\n        translate([30.1, 0, 35])\n        cube([1, 20, 15], center=true);\n    }\n    \n    // Roof\n    translate([15, 0, 50])\n    cube([32, 32, 2], center=true);\n}\n\nmodule boom(){\n    // Base pivot\n    translate([0, 0, 20])\n    rotate([0,-90,0])\n    cylinder(d=12, h=8, center=true);\n    \n    // Inner boom\n    translate([10, 0, 25])\n    rotate([0,-30,0])\n    cube([60, 10, 8], center=true);\n    \n    // Outer boom (telescoping)\n    translate([55, 0, 39])\n    rotate([0,-30,0])\n    cube([45, 8, 6], center=true);\n    \n    // Fork carriage\n    translate([90, 0, 52])\n    rotate([0,-30,0])\n    union(){\n        // Carriage frame\n        cube([20, 18, 2], center=true);\n        \n        // Fork tines\n        for(i=[-6, 6]){\n            translate([0, i, -8])\n            cube([2, 3, 16], center=true);\n        }\n    }\n}\n\nmodule telehandler(){\n    // Rear axle\n    translate([-30, 0, 7])\n    axle();\n    \n    // Front axle\n    translate([30, 0, 7])\n    axle();\n    \n    // Main body\n    chassis();\n    \n    // Boom assembly\n    boom();\n    \n    // Exhaust pipe\n    translate([-35, 12, 35])\n    cylinder(d=3, h=15);\n    \n    // Mirrors\n    translate([0, 15, 40])\n    cube([5, 1, 8], center=true);\n    translate([0, -15, 40])\n    cube([5, 1, 8], center=true);\n}\n\ntelehandler();",
    "renders": true
  },
  {
    "vehicle": "dozers",
    "openscad_code": "// Medium-complexity realistic bulldozer (≈ 75 mm long)\n$fn=32;\n\n// Overall scale factor\nscale_factor = 0.2;\n\n// Main body\nmodule body() {\n    difference() {\n        // Main chassis block\n        translate([0,0,6]) cube([60,30,12], center=true);\n        \n        // Engine hood setback\n        translate([-20,0,12]) cube([20,25,6], center=true);\n        \n        // Cab cutout\n        translate([10,0,12]) cube([15,20,10], center=true);\n    }\n}\n\n// Cab with windows\nmodule cab() {\n    difference() {\n        translate([10,0,18]) cube([15,20,10], center=true);\n        // Window openings\n        translate([5,8,22]) cube([10,1,4], center=true);\n        translate([5,-8,22]) cube([10,1,4], center=true);\n        translate([5,0,25]) cube([10,16,1], center=true);\n    }\n}\n\n// Tracks\nmodule track() {\n    for(side=[-1,1]) {\n        mirror([0,side,0]) {\n            // Track frame\n            translate([0,-10,3]) cube([50,6,3], center=true);\n            \n            // Track pads\n            for(i=[-20:5:20]) {\n                translate([i,-10,0]) cube([4,8,1], center=true);\n            }\n        }\n    }\n}\n\n// Front blade\nmodule blade() {\n    // Blade plate\n    translate([-30,0,7]) rotate([0,10,0]) cube([25,40,2], center=true);\n    \n    // Blade curve\n    translate([-30,0,7]) rotate([0,10,0])\n        difference() {\n            cube([25,40,2], center=true);\n            translate([0,0,2]) sphere(d=40);\n        }\n    \n    // Blade arms\n    for(side=[-1,1]) {\n        translate([-20,side*12,7]) cube([15,3,3], center=true);\n    }\n}\n\n// Engine exhaust\nmodule exhaust() {\n    translate([-25,8,18]) cylinder(h=12, d=3, center=false);\n    translate([-25,8,30]) sphere(d=4);\n}\n\n// Headlights\nmodule headlights() {\n    for(side=[-1,1]) {\n        translate([28,side*10,12]) sphere(d=3);\n    }\n}\n\n// Final assembly\nscale([scale_factor,scale_factor,scale_factor]) {\n    union() {\n        body();\n        cab();\n        track();\n        blade();\n        exhaust();\n        headlights();\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "motorgrader",
    "openscad_code": "// Motorgrader – medium-complexity realistic style\n// Approx. 80 mm long, printable in one piece\n// Wall thickness ≥1.2 mm for FDM\n\n$fn = 24;               // smooth curves\n\nmodule main_chassis() {\n    // central box frame\n    translate([-20,-12,0])\n        cube([40,24,8]);\n    \n    // engine hood\n    translate([-30,-9,8])\n        cube([20,18,6]);\n}\n\nmodule cab() {\n    // floor\n    translate([-5,-10,14])\n        cube([18,20,1]);\n    \n    // cabin body\n    translate([-3,-8,15])\n        cube([14,16,10]);\n    \n    // roof\n    translate([-4,-9,25])\n        cube([16,18,1]);\n    \n    // door windows (cutouts)\n    translate([11,-6,18])\n        cube([1,8,6]);\n    translate([11, -2,18])\n        cube([1,8,6]);\n}\n\nmodule axle(wheel_offset) {\n    // axle tube\n    rotate([90,0,0])\n        cylinder(h=20, d=3.4, center=true);\n    \n    // two wheels per axle\n    for (side=[-1,1]) {\n        translate([side*15,0,wheel_offset])\n            wheel();\n    }\n}\n\nmodule wheel() {\n    // tire\n    color(\"black\")\n    cylinder(h=8, d=14, center=true);\n    \n    // rim\n    color(\"gray\")\n    translate([0,0,-0.5])\n        difference() {\n            cylinder(h=7, d=10, center=true);\n            cylinder(h=8, d=7, center=true);\n        }\n}\n\nmodule blade_assembly() {\n    // circle frame\n    rotate([0,90,0])\n        cylinder(h=3, d=28);\n    \n    // blade\n    translate([0,-14,-1])\n        cube([40,3,6]);\n    \n    // lift arms\n    translate([-15,-10,0])\n        cube([3,10,3]);\n    translate([12,-10,0])\n        cube([3,10,3]);\n}\n\nmodule rippers() {\n    // ripper bar\n    translate([28,-6,4])\n        cube([16,2,2]);\n    \n    // teeth\n    for (i=[0:3])\n        translate([30+i*4,-5,0])\n            cube([1,1,4]);\n}\n\n// assembly\nunion() {\n    main_chassis();\n    cab();\n    \n    // front axle\n    translate([-28,0,5]) axle(0);\n    \n    // rear axle\n    translate([28,0,5]) axle(0);\n    \n    // blade under mid-frame\n    translate([0,0,7])\n        blade_assembly();\n    \n    // rear rippers\n    rippers();\n}",
    "renders": true
  },
  {
    "vehicle": "roadroller",
    "openscad_code": "// Roadroller – OpenSCAD – medium complexity, realistic style\n// All dimensions in mm, printable scale ~70 mm long\n// Wall thickness 2 mm, no steep overhangs (>45°)\n\n$fn = 32;            // smooth curves\n\nmodule wheel(d, w) {\n    // single steel drum\n    difference() {\n        cylinder(h = w, d = d, center = true);\n        cylinder(h = w + 0.1, d = d - 4, center = true);  // hollow\n    }\n}\n\nmodule drum_assembly() {\n    // front roller\n    translate([0, 0, 4]) wheel(22, 26);\n    // rear tandem rollers\n    translate([-34, 0, 4]) wheel(18, 22);\n    translate([-52, 0, 4]) wheel(18, 22);\n}\n\nmodule operator_station() {\n    // ROPS frame\n    color(\"gray\") {\n        for (x = [-11, 11])\n            translate([x, 0, 30]) cube([2, 2, 20]);\n        translate([0, 0, 40]) cube([24, 2, 2]);\n    }\n    // seat\n    translate([0, -8, 20]) cube([12, 12, 4], center = true);\n    // canopy roof\n    translate([0, -8, 42]) cube([28, 16, 2], center = true);\n}\n\nmodule engine_hood() {\n    // main hood block\n    cube([30, 22, 18], center = true);\n    // radiator grille\n    translate([16, 0, 8]) cube([2, 18, 6], center = true);\n}\n\nmodule chassis() {\n    // central frame rails\n    color(\"black\") {\n        translate([0, 0, 10]) cube([70, 18, 4], center = true);\n    }\n}\n\n// Assemble roadroller\nunion() {\n    chassis();\n    \n    // engine at front\n    translate([20, 0, 18]) engine_hood();\n    \n    // operator station\n    translate([0, 0, 18]) operator_station();\n    \n    // wheel assemblies\n    drum_assembly();\n}",
    "renders": true
  },
  {
    "vehicle": "asphaltpaver",
    "openscad_code": "// Asphalt paver - medium complexity realistic style\n// Dimensions: ~80mm long x 35mm wide x 35mm tall\n\n// Parameters\n$fn = 32;\ntrack_width = 8;\ntrack_height = 6;\ntrack_length = 25;\nbody_width = 28;\nbody_length = 50;\nbody_height = 15;\n\n// Main track module\nmodule track(x_pos, y_pos, z_pos) {\n    translate([x_pos, y_pos, z_pos]) {\n        // Track body\n        difference() {\n            cube([track_length, track_width, track_height], center=true);\n            translate([0, 0, track_height/2 - 1])\n                cube([track_length - 4, track_width - 2, 2], center=true);\n        }\n        \n        // Track pads\n        for(i = [-track_length/2 + 3 : 4 : track_length/2 - 3]) {\n            translate([i, 0, track_height/2 + 0.5])\n                cube([3, track_width - 1, 1]);\n        }\n    }\n}\n\n// Operator cabin\nmodule cabin() {\n    translate([0, 0, body_height/2 + 7]) {\n        // Base cabin\n        cube([18, 20, 12], center=true);\n        \n        // Roof\n        translate([0, 0, 6.5])\n            cube([19, 21, 1], center=true);\n        \n        // Windshield\n        difference() {\n            translate([0, 10, 2])\n                cube([16, 1, 8], center=true);\n            translate([0, 10.5, 2])\n                cube([14, 2, 6], center=true);\n        }\n    }\n}\n\n// Hopper\nmodule hopper() {\n    translate([0, 0, body_height/2 + 2]) {\n        // Front sloped section\n        translate([-body_length/4 - 5, 0, 5])\n            rotate([0, 20, 0])\n                cube([15, body_width - 4, 10], center=true);\n        \n        // Main body\n        translate([body_length/4, 0, 3])\n            cube([body_length/2, body_width - 2, 6], center=true);\n    }\n}\n\n// Screed (rear paving section)\nmodule screed() {\n    translate([body_length/2 + 10, 0, body_height/2 - 5]) {\n        // Main screed plate\n        cube([8, body_width + 8, 3], center=true);\n        \n        // Side extensions\n        translate([0, body_width/2 + 4, 0])\n            cube([6, 4, 2], center=true);\n        translate([0, -body_width/2 - 4, 0])\n            cube([6, 4, 2], center=true);\n        \n        // Heating elements\n        for(i = [-body_width/2 + 4 : 5 : body_width/2 - 4]) {\n            translate([0, i, 2])\n                cylinder(h=1, r=1.5, center=true);\n        }\n    }\n}\n\n// Exhaust pipe\nmodule exhaust() {\n    translate([-body_length/4, body_width/2 - 3, body_height/2 + 14]) {\n        cylinder(h=12, r=1.5);\n        translate([0, 0, 12])\n            sphere(r=2);\n    }\n}\n\n// Main assembly\nunion() {\n    // Main body\n    translate([0, 0, body_height/2])\n        cube([body_length, body_width, body_height], center=true);\n    \n    // Tracks\n    track(-body_length/4, body_width/2 + track_width/2 + 1, track_height/2);\n    track(-body_length/4, -body_width/2 - track_width/2 - 1, track_height/2);\n    track(body_length/4, body_width/2 + track_width/2 + 1, track_height/2);\n    track(body_length/4, -body_width/2 - track_width/2 - 1, track_height/2);\n    \n    // Cabin\n    cabin();\n    \n    // Hopper\n    hopper();\n    \n    // Screed\n    screed();\n    \n    // Exhaust\n    exhaust();\n    \n    // Details\n    // Headlights\n    translate([body_length/2 - 2, body_width/2 - 3, body_height/2 + 2])\n        sphere(r=1.5);\n    translate([body_length/2 - 2, -body_width/2 + 3, body_height/2 + 2])\n        sphere(r=1.5);\n    \n    // Handrails\n    translate([0, body_width/2 + 1, body_height/2 + 10])\n        cylinder(h=6, r=0.8);\n    translate([0, -body_width/2 - 1, body_height/2 + 10])\n        cylinder(h=6, r=0.8);\n}\n\n// Base support for 3D printing\ntranslate([0, 0, -0.5])\n    cube([body_length + 20, body_width + 20, 1], center=true);",
    "renders": true
  },
  {
    "vehicle": "concretemixer",
    "openscad_code": "// Concrete Mixer Truck - Medium Complexity, Realistic Style\n\n// Overall scale factor\nscale_factor = 0.4;\n\n// Main dimensions\ntruck_length = 100 * scale_factor;\ntruck_width = 40 * scale_factor;\ntruck_height = 45 * scale_factor;\nwheel_diameter = 20 * scale_factor;\nwheel_width = 8 * scale_factor;\ndrum_diameter = 35 * scale_factor;\ndrum_length = 55 * scale_factor;\n\nmodule wheel() {\n    difference() {\n        cylinder(h=wheel_width, d=wheel_diameter, $fn=30);\n        translate([0, 0, -1])\n            cylinder(h=wheel_width+2, d=wheel_diameter*0.5, $fn=30);\n    }\n    translate([0, 0, wheel_width/2])\n        cylinder(h=2, d=wheel_diameter*0.7, $fn=30);\n}\n\nmodule drum_blades() {\n    for(i=[0:3]) {\n        rotate([0, 0, i*90])\n            translate([drum_diameter*0.4, 0, 0])\n                rotate([90, 0, 0])\n                    cylinder(h=drum_length*0.9, d=drum_diameter*0.08, $fn=6);\n    }\n}\n\nmodule mixer_drum() {\n    difference() {\n        // Main drum body\n        rotate([0, 90, 0])\n            cylinder(h=drum_length, d=drum_diameter, $fn=60);\n        \n        // Hollow inside\n        rotate([0, 90, 0])\n            translate([2, 0, 0])\n                cylinder(h=drum_length-4, d=drum_diameter*0.85, $fn=60);\n        \n        // Front opening\n        rotate([0, 90, 0])\n            translate([-1, 0, 0])\n                cylinder(h=2, d=drum_diameter*0.6, $fn=40);\n        \n        // Rear opening\n        rotate([0, 90, 0])\n            translate([drum_length+1, 0, 0])\n                cylinder(h=2, d=drum_diameter*0.5, $fn=40);\n    }\n    \n    // Mixing blades\n    translate([drum_length/2, 0, 0])\n        rotate([0, 90, 0])\n            drum_blades();\n    \n    // Support ring\n    translate([drum_length*0.7, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h=3, d=drum_diameter*1.1, $fn=60);\n}\n\nmodule chassis() {\n    // Main frame\n    translate([0, 0, wheel_diameter/2 + 5])\n        cube([truck_length, truck_width, 8], center=true);\n    \n    // Cab\n    translate([-truck_length*0.3, 0, wheel_diameter/2 + 13])\n        cube([truck_length*0.4, truck_width*0.9, truck_height*0.8], center=true);\n    \n    // Cab roof\n    translate([-truck_length*0.3, 0, wheel_diameter/2 + 13 + truck_height*0.5])\n        cube([truck_length*0.35, truck_width*0.85, 6], center=true);\n    \n    // Hood\n    translate([-truck_length*0.5, 0, wheel_diameter/2 + 10])\n        cube([truck_length*0.25, truck_width*0.7, 12], center=true);\n}\n\nmodule axles() {\n    // Front axle\n    translate([-truck_length*0.35, 0, wheel_diameter/2 + 5])\n        rotate([90, 0, 0])\n            cylinder(h=truck_width*1.2, d=4, center=true, $fn=20);\n    \n    // Rear axle\n    translate([truck_length*0.25, 0, wheel_diameter/2 + 5])\n        rotate([90, 0, 0])\n            cylinder(h=truck_width*1.2, d=4, center=true, $fn=20);\n}\n\nmodule support_frame() {\n    // Front support\n    translate([0, 0, wheel_diameter/2 + 5])\n        rotate([0, 90, 0])\n            cylinder(h=drum_length*0.7, d=drum_diameter*0.1, $fn=20);\n    \n    // Rear support\n    translate([drum_length*0.7, 0, wheel_diameter/2 + 5])\n        rotate([0, 90, 0])\n            cylinder(h=drum_length*0.3, d=drum_diameter*0.1, $fn=20);\n}\n\n// Assembly\nunion() {\n    // Chassis and cab\n    chassis();\n    \n    // Axles\n    axles();\n    \n    // Wheels - front\n    translate([-truck_length*0.35, -truck_width*0.6, wheel_diameter/2])\n        wheel();\n    translate([-truck_length*0.35, truck_width*0.6, wheel_diameter/2])\n        wheel();\n    \n    // Wheels - rear (dual)\n    translate([truck_length*0.25, -truck_width*0.6, wheel_diameter/2])\n        wheel();\n    translate([truck_length*0.25, truck_width*0.6, wheel_diameter/2])\n        wheel();\n    translate([truck_length*0.25, -truck_width*0.6, wheel_diameter/2])\n        translate([2, 0, 0])\n            wheel();\n    translate([truck_length*0.25, truck_width*0.6, wheel_diameter/2])\n        translate([2, 0, 0])\n            wheel();\n    \n    // Mixer drum assembly\n    translate([truck_length*0.3, 0, wheel_diameter/2 + 5 + drum_diameter/2])\n        support_frame();\n    translate([truck_length*0.3, 0, wheel_diameter/2 + 5 + drum_diameter/2])\n        mixer_drum();\n    \n    // Exhaust pipe\n    translate([-truck_length*0.5, -truck_width*0.4, wheel_diameter/2 + 12])\n        cylinder(h=15, d=3, $fn=20);\n    \n    // Headlights\n    translate([-truck_length*0.62, -truck_width*0.35, wheel_diameter/2 + 8])\n        cube([4, 6, 4]);\n    translate([-truck_length*0.62, truck_width*0.35, wheel_diameter/2 + 8])\n        cube([4, 6, 4]);\n}",
    "renders": true
  },
  {
    "vehicle": "wheelloader",
    "openscad_code": "// Wheel Loader - Realistic Style, Medium Complexity\n// Designed for 3D printing (no overhangs, 2mm walls)\n\n$fn = 32;  // Smooth curves\n\n// Main body dimensions\nbody_length = 40;\nbody_width = 20;\nbody_height = 15;\n\n// Wheel dimensions\nwheel_diameter = 12;\nwheel_width = 6;\nwheel_base = 30;\n\n// Boom dimensions\nboom_length = 35;\nboom_width = 6;\nboom_height = 4;\n\n// Bucket dimensions\nbucket_width = 18;\nbucket_depth = 8;\nbucket_height = 6;\n\n// Engine compartment\nengine_length = 12;\nengine_width = 18;\nengine_height = 10;\n\nmodule wheel_loader_assembly() {\n    union() {\n        // Main chassis\n        translate([0, 0, wheel_diameter/2 + 3]) {\n            difference() {\n                // Main body\n                cube([body_length, body_width, body_height], center=true);\n                \n                // Cab cutout\n                translate([body_length/4, 0, body_height/2])\n                    cube([body_length/2, body_width - 4, body_height], center=true);\n            }\n        }\n        \n        // Engine compartment\n        translate([-body_length/2 - engine_length/2, 0, wheel_diameter/2 + engine_height/2]) {\n            difference() {\n                cube([engine_length, engine_width, engine_height], center=true);\n                // Radiator grille\n                for(i = [-8:2:8]) {\n                    translate([engine_length/2 + 0.1, i, 0])\n                        cube([1, 1.5, engine_height - 2], center=true);\n                }\n            }\n        }\n        \n        // Cab\n        translate([5, 0, wheel_diameter/2 + body_height + 2]) {\n            difference() {\n                cube([12, body_width - 2, 8], center=true);\n                // Windows\n                translate([0, 0, 2])\n                    cube([12.2, body_width - 6, 4], center=true);\n            }\n        }\n        \n        // Front axle\n        translate([wheel_base/2, 0, wheel_diameter/2]) {\n            cube([body_width - 4, body_width - 4, 2], center=true);\n        }\n        \n        // Rear axle\n        translate([-wheel_base/2, 0, wheel_diameter/2]) {\n            cube([body_width - 4, body_width - 4, 2], center=true);\n        }\n        \n        // Wheels - front\n        translate([wheel_base/2, body_width/2 + wheel_width/2, wheel_diameter/2]) \n            wheel();\n        translate([wheel_base/2, -body_width/2 - wheel_width/2, wheel_diameter/2]) \n            wheel();\n        \n        // Wheels - rear\n        translate([-wheel_base/2, body_width/2 + wheel_width/2, wheel_diameter/2]) \n            wheel();\n        translate([-wheel_base/2, -body_width/2 - wheel_width/2, wheel_diameter/2]) \n            wheel();\n        \n        // Boom assembly\n        translate([body_length/2 - 5, 0, wheel_diameter/2 + body_height - 2]) {\n            rotate([0, -30, 0]) {\n                // Boom lift cylinders\n                cylinder(h=15, r=2, center=true);\n                translate([0, 5, 0]) cylinder(h=15, r=2, center=true);\n                \n                // Main boom arm\n                translate([boom_length/2, 0, 0]) {\n                    cube([boom_length, boom_width, boom_height], center=true);\n                }\n                \n                // Boom extension\n                translate([boom_length + 2, 0, -2]) {\n                    cube([4, boom_width - 2, 2], center=true);\n                }\n                \n                // Bucket\n                translate([boom_length + 8, 0, -2]) {\n                    rotate([0, 60, 0]) {\n                        difference() {\n                            // Main bucket\n                            translate([0, 0, -bucket_height/2]) \n                                cube([bucket_depth, bucket_width, bucket_height], center=true);\n                            \n                            // Bucket cutout\n                            translate([bucket_depth/2, 0, 0]) {\n                                rotate([0, 90, 0])\n                                    cylinder(h=bucket_width + 1, r=bucket_height/2, center=true);\n                            }\n                            \n                            // Teeth\n                            for(i = [-bucket_width/2 + 2:3:bucket_width/2 - 2]) {\n                                translate([bucket_depth/2 + 1, i, -bucket_height/2 + 1]) {\n                                    cube([2, 1.5, 1], center=true);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Counterweight\n        translate([-body_length/2 - 3, 0, wheel_diameter/2 + 2]) {\n            difference() {\n                cube([6, body_width - 4, 4], center=true);\n                // Weight cutouts\n                for(i = [-2:2:2]) {\n                    translate([-1, i, 0])\n                        cube([4, 1, 2], center=true);\n                }\n            }\n        }\n    }\n}\n\nmodule wheel() {\n    difference() {\n        // Tire\n        cylinder(h=wheel_width, r=wheel_diameter/2, center=true);\n        \n        // Rim\n        translate([0, 0, -0.1])\n            cylinder(h=wheel_width + 0.2, r=wheel_diameter/2 - 2, center=true);\n        \n        // Lug nuts\n        for(i = [0:60:359]) {\n            rotate([0, 0, i]) {\n                translate([wheel_diameter/2 - 3, 0, 0])\n                    cylinder(h=wheel_width + 0.2, r=1, center=true);\n            }\n        }\n    }\n}\n\n// Scale to fit 3D printer bed\nscale(0.8) wheel_loader_assembly();",
    "renders": true
  },
  {
    "vehicle": "trackloader",
    "openscad_code": "// Trackloader – realistic style, medium complexity\n// Approx. 70 mm long – printable without support\n\n// overall scale factor\nscale(0.7) {\n\n// Main chassis block\nmodule chassis() {\n    difference() {\n        cube([80, 40, 15], center=true);\n        translate([0, 0, 8]) cube([82, 42, 2], center=true);  // hollow top\n    }\n}\n\n// Engine hood\nmodule hood() {\n    translate([30, 0, 8]) {\n        cube([35, 38, 12], center=true);\n    }\n}\n\n// Cab with windows\nmodule cab() {\n    translate([-10, 0, 15]) {\n        difference() {\n            cube([30, 36, 25], center=true);\n            // windows\n            translate([0, 0, 5]) cube([32, 38, 20], center=true);\n            translate([0, 15, 5]) cube([28, 2, 12], center=true);\n            translate([0, -15, 5]) cube([28, 2, 12], center=true);\n        }\n    }\n}\n\n// Single track\nmodule track() {\n    difference() {\n        cube([90, 12, 6], center=true);\n        for (i = [-4:1:4]) {\n            translate([i*10, 0, 0]) cube([6, 14, 8], center=true);\n        }\n    }\n}\n\n// Track assembly left & right\nmodule tracks() {\n    translate([0, 26, -7]) track();\n    translate([0, -26, -7]) track();\n}\n\n// Front loader arm\nmodule arm() {\n    translate([45, 0, 10]) rotate([0, 30, 0]) {\n        cube([50, 8, 8], center=true);\n    }\n}\n\n// Bucket\nmodule bucket() {\n    translate([70, 0, 28]) rotate([0, 30, 0]) {\n        difference() {\n            translate([0, 0, -5]) cube([25, 30, 10], center=true);\n            translate([15, 0, 0]) rotate([90, 0, 0]) cylinder(h=30, d=25, center=true);\n        }\n    }\n}\n\n// Exhaust pipe\nmodule exhaust() {\n    translate([40, 15, 15]) cylinder(h=20, d=6, center=false);\n}\n\n// Assemble parts\nunion() {\n    chassis();\n    hood();\n    cab();\n    tracks();\n    arm();\n    bucket();\n    exhaust();\n}\n\n}",
    "renders": true
  },
  {
    "vehicle": "mineloader",
    "openscad_code": "// Mine Loader - Realistic Style, Medium Complexity\n// Dimensions: ~80mm long, ~40mm wide, ~40mm high\n\nmodule wheel() {\n    // Tire\n    difference() {\n        cylinder(h=10, r=12, $fn=20);\n        cylinder(h=11, r=8, $fn=20);\n    }\n    // Rim\n    color(\"silver\")\n    cylinder(h=2, r=9, center=true, $fn=20);\n}\n\nmodule axle(wheel_offset) {\n    translate([0, wheel_offset, 0]) wheel();\n}\n\nmodule wheels() {\n    // Front axle\n    translate([20, 0, 5]) {\n        for(side=[-20, 20]) {\n            translate([0, side, 0]) axle(0);\n        }\n    }\n    // Rear axle\n    translate([-20, 0, 5]) {\n        for(side=[-20, 20]) {\n            translate([0, side, 0]) axle(0);\n        }\n    }\n}\n\nmodule chassis() {\n    // Main frame\n    difference() {\n        cube([60, 40, 10], center=true);\n        translate([0, 0, 5]) cube([50, 30, 10], center=true);\n    }\n    // Engine compartment\n    translate([20, 0, 5]) cube([20, 35, 15], center=true);\n    // Operator cabin\n    translate([-10, 0, 5]) cube([25, 35, 20], center=true);\n}\n\nmodule bucket() {\n    // Bucket body\n    difference() {\n        translate([0, 0, -5]) cube([30, 35, 15]);\n        translate([-5, 0, 5]) rotate([0, 30, 0]) cube([40, 35, 15]);\n    }\n    // Bucket teeth\n    for(tooth=[-12, -6, 0, 6, 12]) {\n        translate([30, tooth, 0]) cube([5, 4, 2]);\n    }\n}\n\nmodule lift_arm() {\n    // Hydraulic cylinder\n    translate([0, 0, 0]) cylinder(h=30, r=4, center=true, $fn=16);\n    // Arm segments\n    translate([15, 0, 15]) cube([30, 8, 4], center=true);\n    translate([30, 0, 20]) cube([30, 8, 4], center=true);\n}\n\nmodule mine_loader() {\n    // Assemble all parts\n    union() {\n        // Chassis\n        translate([0, 0, 5]) chassis();\n        \n        // Wheels\n        wheels();\n        \n        // Lift arm assembly\n        translate([-25, 0, 15]) {\n            rotate([0, -30, 0]) {\n                lift_arm();\n                translate([45, 0, 25]) rotate([30, 0, 0]) bucket();\n            }\n        }\n        \n        // Cabin details\n        translate([-10, 0, 20]) {\n            // Roof\n            cube([25, 35, 2], center=true);\n            // Windows\n            translate([10, 0, 0]) cube([20, 30, 15], center=true);\n        }\n        \n        // Engine exhaust\n        translate([30, 15, 20]) cylinder(h=15, r=3, $fn=16);\n    }\n}\n\n// Render the complete model\nmine_loader();",
    "renders": true
  },
  {
    "vehicle": "logloader",
    "openscad_code": "// Logloader - Medium complexity, realistic style\n// Designed for 3D printing, ~80mm long\n\n$fn = 32;\n\n// Main assembly\nlogloader();\n\nmodule logloader() {\n    // Base chassis\n    chassis();\n    \n    // Cab\n    translate([15, 0, 8]) rotate([0, 0, 0]) cab();\n    \n    // Boom assembly\n    translate([-10, 0, 12]) rotate([0, 0, 0]) boom_assembly();\n    \n    // Wheels\n    for(x = [-20, 0, 20]) {\n        translate([x, -10, 3]) rotate([0, 0, 0]) wheel();\n        translate([x, 10, 3]) rotate([0, 0, 0]) wheel();\n    }\n    \n    // Log grabber\n    translate([-35, 0, 8]) rotate([0, 0, 0]) log_grabber();\n}\n\nmodule chassis() {\n    // Main frame\n    difference() {\n        cube([50, 16, 5], center = true);\n        \n        // Lightening holes\n        for(x = [-15, -5, 5, 15]) {\n            translate([x, 0, 2]) cylinder(h = 6, r = 2, center = true);\n        }\n    }\n    \n    // Engine cover\n    translate([15, 0, 3]) cube([14, 14, 6], center = true);\n    \n    // Counterweight\n    translate([-20, 0, 2]) cube([10, 12, 4], center = true);\n}\n\nmodule cab() {\n    // Cab base\n    cube([12, 12, 12], center = true);\n    \n    // Cab roof\n    translate([0, 0, 7]) cube([14, 14, 2], center = true);\n    \n    // Windows\n    difference() {\n        translate([0, 0, 2]) cube([11, 11, 8], center = true);\n        \n        // Front window\n        translate([6, 0, 2]) cube([1, 8, 6], center = true);\n        \n        // Side windows\n        translate([0, 6, 2]) cube([8, 1, 6], center = true);\n        translate([0, -6, 2]) cube([8, 1, 6], center = true);\n    }\n    \n    // Exhaust pipe\n    translate([5, 6, 8]) cylinder(h = 8, r = 1);\n}\n\nmodule boom_assembly() {\n    // Boom base\n    rotate([0, -30, 0]) {\n        cylinder(h = 8, r = 4);\n        \n        // Boom arm\n        translate([0, 0, 4]) rotate([30, 0, 0]) {\n            cube([4, 4, 40], center = true);\n            \n            // Hydraulic cylinder\n            translate([0, 0, -15]) rotate([90, 0, 0]) \n                cylinder(h = 12, r = 1.5);\n            \n            // Support struts\n            for(i = [0, 1]) {\n                translate([i*2-1, 0, 5]) cube([0.5, 0.5, 30], center = true);\n            }\n        }\n    }\n}\n\nmodule wheel() {\n    // Tire\n    cylinder(h = 6, r = 8);\n    \n    // Rim\n    translate([0, 0, 3]) difference() {\n        cylinder(h = 3, r = 5);\n        cylinder(h = 4, r = 3);\n    }\n    \n    // Tread pattern\n    for(i = [0:30:360]) {\n        rotate([0, 0, i]) {\n            translate([7, 0, 0]) cube([1, 0.5, 6.2], center = true);\n        }\n    }\n}\n\nmodule log_grabber() {\n    // Grabber base\n    translate([0, 0, -2]) cylinder(h = 4, r = 3);\n    \n    // Grabber arms\n    for(side = [-1, 1]) {\n        translate([0, side*4, 0]) rotate([0, side*20, 0]) {\n            cube([6, 2, 8], center = true);\n            \n            // Teeth\n            for(i = [0:5]) {\n                translate([i-2.5, 0, 4]) cube([0.5, 2, 1], center = true);\n            }\n        }\n    }\n    \n    // Grabber cylinder\n    translate([0, 0, 2]) cylinder(h = 8, r = 1.5);\n}",
    "renders": true
  },
  {
    "vehicle": "scraploader",
    "openscad_code": "// Scraploader - Realistic Medium Complexity\n// 3D printable model with functional details\n\n// Main dimensions\nbody_w = 45;\nbody_l = 70;\nbody_h = 25;\ntrack_w = 12;\ntrack_h = 8;\narm_l = 60;\narm_w = 6;\narm_h = 8;\nbucket_w = 32;\nbucket_l = 30;\nbucket_h = 18;\n\n$fn = 32;\n\n// Main assembly\nunion() {\n    // Tracks\n    tracks();\n    \n    // Main body\n    translate([0, 0, track_h]) body();\n    \n    // Cab\n    translate([-5, 15, track_h + body_h]) cab();\n    \n    // Arm assembly\n    translate([body_w/2 - 5, 0, track_h + body_h]) arm_assembly();\n}\n\n// Tracks module\nmodule tracks() {\n    // Left track\n    translate([-body_w/2 - track_w/2, 0, 0])\n        track();\n    \n    // Right track\n    translate([body_w/2 + track_w/2, 0, 0])\n        track();\n}\n\nmodule track() {\n    difference() {\n        // Track body\n        cube([track_w, body_l + 20, track_h], center = true);\n        \n        // Track details\n        for(i = [-body_l/2:5:body_l/2]) {\n            translate([0, i, -track_h/2 + 2])\n                cube([track_w - 2, 3, 1], center = true);\n        }\n    }\n}\n\n// Main body\nmodule body() {\n    difference() {\n        // Main block\n        cube([body_w, body_l, body_h], center = true);\n        \n        // Engine compartment vents\n        for(i = [-10:10:10]) {\n            translate([body_w/2 - 2, i, body_h/2 - 3])\n                cube([2, 8, 2]);\n        }\n    }\n}\n\n// Cab module\nmodule cab() {\n    difference() {\n        union() {\n            // Main cab\n            cube([30, 25, 20], center = true);\n            \n            // Roof\n            translate([0, 0, 10])\n                cube([32, 27, 3], center = true);\n        }\n        \n        // Windows\n        translate([-14, 0, 5])\n            cube([2, 20, 12], center = true);\n        translate([0, 12, 5])\n            cube([24, 2, 12], center = true);\n    }\n}\n\n// Arm assembly\nmodule arm_assembly() {\n    rotate([0, 0, 30])\n        union() {\n            // Base rotation joint\n            cylinder(h = 10, r = 8, center = false);\n            \n            // Main arm\n            translate([0, 0, 10])\n                rotate([0, -45, 0])\n                    arm();\n            \n            // Bucket\n            translate([arm_l * cos(45) - 5, 0, 10 + arm_l * sin(45)])\n                bucket();\n        }\n}\n\n// Arm\nmodule arm() {\n    difference() {\n        // Main arm structure\n        cube([arm_l, arm_w, arm_h], center = true);\n        \n        // Hydraulic cylinder mount\n        translate([arm_l/2 - 10, 0, 0])\n            cylinder(h = arm_w + 2, r = 3, center = true);\n        \n        // Lightening holes\n        for(i = [0:15:arm_l - 15]) {\n            translate([i - arm_l/2 + 7.5, 0, 0])\n                cylinder(h = arm_w + 1, r = 2, center = true);\n        }\n    }\n}\n\n// Bucket\nmodule bucket() {\n    difference() {\n        union() {\n            // Main bucket\n            rotate([0, 0, -45])\n                cube([bucket_l, bucket_w, bucket_h], center = true);\n            \n            // Bucket back\n            translate([-bucket_l/2, 0, -bucket_h/2])\n                cube([2, bucket_w, bucket_h]);\n        }\n        \n        // Bucket teeth\n        for(i = [-bucket_w/2 + 5:5:bucket_w/2 - 5]) {\n            translate([bucket_l/2, i, -bucket_h/2 + 5])\n                cube([2, 3, 5]);\n        }\n    }\n}",
    "renders": true
  },
  {
    "vehicle": "pipelayer",
    "openscad_code": "// Pipelayer - Realistic Style, Medium Complexity\n// Designed for 3D printing with proper wall thickness and no overhangs\n\n$fn = 32;\n\n// Main dimensions\nbase_length = 80;\nbase_width = 50;\nbase_height = 15;\ncab_width = 35;\ncab_length = 30;\ncab_height = 25;\nboom_length = 70;\nboom_width = 8;\nboom_height = 6;\ncounterweight_size = 20;\npipe_diameter = 12;\npipe_length = 60;\n\nmodule tracks() {\n    // Left track\n    translate([-base_width/2 - 5, 0, 0])\n        difference() {\n            cube([10, base_length, 8]);\n            for(i = [5:10:base_length-10])\n                translate([5, i, 4])\n                    cube([8, 8, 4], center=true);\n        }\n    \n    // Right track\n    translate([base_width/2 + 5, 0, 0])\n        difference() {\n            cube([10, base_length, 8]);\n            for(i = [5:10:base_length-10])\n                translate([5, i, 4])\n                    cube([8, 8, 4], center=true);\n        }\n}\n\nmodule base_frame() {\n    // Main frame\n    translate([0, 0, 4])\n        cube([base_width, base_length, base_height], center=true);\n    \n    // Reinforcement beams\n    translate([0, base_length/4, 8])\n        cube([base_width - 10, 5, 4]);\n    translate([0, -base_length/4, 8])\n        cube([base_width - 10, 5, 4]);\n}\n\nmodule cab() {\n    // Cab base\n    translate([0, base_length/3, 15])\n        cube([cab_width, cab_length, cab_height], center=true);\n    \n    // Cab roof\n    translate([0, base_length/3, 15 + cab_height/2 + 3])\n        cube([cab_width + 5, cab_length + 5, 6], center=true);\n    \n    // Windows\n    translate([cab_width/2 + 0.5, base_length/3, 15 + cab_height/2])\n        cube([1, cab_length - 6, cab_height - 6], center=true);\n    translate([0, base_length/3 + cab_length/2 + 0.5, 15 + cab_height/2])\n        cube([cab_width - 4, 1, cab_height - 6], center=true);\n}\n\nmodule counterweight() {\n    translate([0, -base_length/2 - 10, 15])\n        cube([counterweight_size, counterweight_size, counterweight_size], center=true);\n}\n\nmodule boom() {\n    // Boom base connection\n    translate([0, base_length/6, 20])\n        rotate([0, 30, 0])\n        union() {\n            // Main boom arm\n            translate([0, 0, boom_length/2])\n                cube([boom_width, boom_height, boom_length], center=true);\n            \n            // Boom support cables\n            for(i = [0:15:boom_length-15]) {\n                translate([boom_width/2 + 2, 0, i])\n                    cylinder(h = 2, r = 0.5);\n                translate([-boom_width/2 - 2, 0, i])\n                    cylinder(h = 2, r = 0.5);\n            }\n            \n            // Hoist block\n            translate([0, 0, boom_length - 5])\n                cube([12, 8, 12], center=true);\n            \n            // Hook\n            translate([0, 0, boom_length])\n                cylinder(h = 8, r = 3);\n        }\n}\n\nmodule pipe() {\n    // Main pipe\n    rotate([90, 0, 0])\n    translate([0, boom_length + 20, 0])\n        cylinder(h = pipe_length, r = pipe_diameter/2);\n    \n    // Pipe supports\n    for(i = [-pipe_length/3, 0, pipe_length/3]) {\n        translate([0, boom_length + 20 + i, pipe_diameter/2 + 2])\n            cube([3, 3, 4], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    tracks();\n    base_frame();\n    cab();\n    counterweight();\n    boom();\n    pipe();\n}",
    "renders": true
  },
  {
    "vehicle": "dragline",
    "openscad_code": "// Dragline Excavator – medium-complexity, 3D-printable model\n// All parts built from basic OpenSCAD primitives.\n// Largest dimension ≈ 85 mm when scale = 1.\n\n$fn = 36;                       // Nice round curves without overhangs\n\n// Main parameters\ntrack_width   = 12;\ntrack_length  = 60;\ntrack_height  = 10;\ntread_thick   = 1.5;\nbody_w        = 28;\nbody_l        = 38;\nbody_h        = 18;\nrevolve_r     = 8;\nboom_len      = 55;\nboom_w        = 5;\nmast_len      = 50;\nmast_w        = 4;\nbucket_r      = 7;\ncable_d       = 1;\n\nmodule track_set() {\n    // One track frame\n    difference() {\n        translate([0,0,track_height/2])\n            cube([track_length, track_width, track_height], center=true);\n        translate([0,0,-0.1])\n            cube([track_length+1, track_width-tread_thick*2, track_height+0.2], center=true);\n    }\n    // Treads\n    for (i = [-track_length/2+4 : 4 : track_length/2-4])\n        translate([i, 0, track_height])\n            cube([2, track_width+0.4, tread_thick], center=true);\n}\n\nmodule base_assembly() {\n    // Lower frame with two tracks\n    union() {\n        track_set();\n        translate([0, track_width+8, 0])\n            mirror([0,1,0])\n                track_set();\n        // Center frame\n        translate([0,0,track_height])\n            cube([body_l, body_w, body_h], center=true);\n    }\n}\n\nmodule revolving_superstructure() {\n    // Revolving platform\n    cylinder(h=4, r=revolve_r, center=false);\n    translate([0,0,2])\n        cube([revolve_r*1.5, revolve_r*1.5, 3], center=true);\n}\n\nmodule boom() {\n    // Main boom arm\n    hull() {\n        translate([0,0,0])\n            cylinder(h=boom_w, r=boom_w/2, center=true);\n        translate([boom_len,0,0])\n            cylinder(h=boom_w, r=boom_w/2, center=true);\n    }\n    // Lattice effect without overhangs\n    for (i = [0 : boom_len/4 : boom_len]) {\n        translate([i,0,0])\n            rotate([0,90,0])\n                cylinder(h=boom_w*1.1, r=0.8, center=true);\n    }\n}\n\nmodule mast() {\n    // A-frame mast\n    hull() {\n        translate([0,0,0])\n            cylinder(h=mast_w, r=mast_w/2, center=true);\n        translate([mast_len*0.7,0,mast_len*0.7])\n            sphere(d=mast_w);\n    }\n    translate([0,0,0])\n        rotate([0,45,0])\n            cylinder(h=mast_len*sqrt(2), r=mast_w/2, center=false);\n}\n\nmodule bucket() {\n    difference() {\n        sphere(d=bucket_r*2);\n        translate([0,0,bucket_r-2])\n            cube([bucket_r*2.2, bucket_r*2.2, bucket_r*2], center=true);\n    }\n    // Teeth\n    for (x = [-bucket_r/2+1 : 2 : bucket_r/2-1])\n        translate([x, 0, -bucket_r])\n            cube([0.8, bucket_r, 2], center=true);\n}\n\nmodule cables() {\n    // Simple straight cylinders for printable rigging\n    color(\"gray\")\n    hull() {\n        translate([boom_len,0,0])\n            cylinder(h=cable_d, r=cable_d/2, center=true);\n        translate([boom_len*0.8,0,-mast_len*0.6])\n            cylinder(h=cable_d, r=cable_d/2, center=true);\n    }\n    hull() {\n        translate([boom_len*0.8,0,-mast_len*0.6])\n            cylinder(h=cable_d, r=cable_d/2, center=true);\n        translate([boom_len*0.9,0,-bucket_r])\n            cylinder(h=cable_d, r=cable_d/2, center=true);\n    }\n}\n\n// Build the dragline\nunion() {\n    base_assembly();\n    translate([0,0,track_height+body_h])\n        revolving_superstructure();\n    translate([0,0,track_height+body_h+4+1.5])\n        rotate([0,0,-30])\n            union() {\n                boom();\n                translate([0,0,0])\n                    rotate([0,-25,0])\n                        mast();\n                cables();\n                translate([boom_len*0.9,0,-bucket_r])\n                    bucket();\n            }\n}",
    "renders": true
  },
  {
    "vehicle": "shovel",
    "openscad_code": "// Realistic 3D-printable shovel (medium complexity)\n// Total length ~80mm, printable as one piece\n\n$fn = 32;  // Smoother curves\n\n// Main assembly\nmodule shovel() {\n    union() {\n        // Handle\n        handle_assembly();\n        \n        // Shaft\n        shaft();\n        \n        // Scoop\n        scoop_assembly();\n    }\n}\n\n// Handle grip\nmodule handle_assembly() {\n    translate([0, 0, 70]) {\n        difference() {\n            // Main grip cylinder\n            cylinder(h=15, d=8, center=true);\n            \n            // Finger grooves\n            for (i = [-1, 0, 1]) {\n                translate([0, i*2.5, 0])\n                    rotate([0, 90, 0])\n                        cylinder(h=12, d1=2, d2=2, center=true);\n            }\n        }\n        \n        // Grip flare\n        translate([0, 0, 8])\n            cylinder(h=3, d1=8, d2=10, center=true);\n    }\n}\n\n// Shaft\nmodule shaft() {\n    difference() {\n        // Main shaft\n        cylinder(h=55, d=6, center=false);\n        \n        // Hollow shaft for material saving\n        translate([0, 0, 5])\n            cylinder(h=45, d=4, center=false);\n    }\n}\n\n// Scoop assembly\nmodule scoop_assembly() {\n    translate([0, 0, -5]) {\n        rotate([-90, 0, 0]) {\n            union() {\n                // Main scoop\n                difference() {\n                    // Outer scoop shape\n                    scale([1, 1.2, 1])\n                        sphere(d=25);\n                    \n                    // Inner cavity\n                    translate([0, 0, 2])\n                        scale([0.85, 1.05, 0.9])\n                            sphere(d=25);\n                    \n                    // Cut bottom flat\n                    translate([0, 0, -12])\n                        cube([30, 30, 15], center=true);\n                    \n                    // Cut back flat\n                    translate([0, 12, 0])\n                        cube([30, 15, 30], center=true);\n                }\n                \n                // Reinforcement rib\n                translate([0, 0, -8])\n                    rotate([90, 0, 0])\n                        cylinder(h=15, d1=6, d2=4);\n                \n                // Socket for shaft\n                translate([0, 10, -8])\n                    rotate([90, 0, 0])\n                        cylinder(h=12, d=7, d1=7, d2=5);\n                \n                // Step reinforcement\n                translate([0, 5, -8])\n                    rotate([90, 0, 0])\n                        cylinder(h=8, d=12, d1=12, d2=8);\n            }\n        }\n    }\n}\n\n// Render the shovel\nshovel();",
    "renders": true
  },
  {
    "vehicle": "bucketwheel",
    "openscad_code": "// Realistic Bucket-Wheel Excavator Wheel\n// Medium complexity – printable, functional, recognizable\n// 2024-05-29\n\n// ---------- USER ADJUSTABLE ----------\nbucket_count   = 8;           // number of buckets\nwheel_d        = 70;          // wheel diameter (mm)\nwheel_w        = 12;          // wheel thickness\nhub_d          = 20;          // hub diameter\naxle_d         = 8;           // axle hole diameter\nbucket_depth   = 14;          // scoop depth\nbucket_wall    = 1.2;         // wall thickness (printer friendly)\nclearance      = 0.2;         // print clearance\n// -------------------------------------\n\n$fn = 36;\n\nmodule bucket() {\n    // angled scoop\n    difference() {\n        union() {\n            // main scoop body\n            translate([0, 0, bucket_depth/2])\n                cube([wheel_w*0.9, bucket_depth*1.8, bucket_depth], center=true);\n            // back plate\n            translate([0, bucket_depth*0.9-0.5, bucket_depth/2])\n                cube([wheel_w*0.9, bucket_wall*2, bucket_depth], center=true);\n        }\n        // hollow out scoop\n        translate([0, bucket_depth*0.3, bucket_depth/2+clearance])\n            cube([wheel_w*0.9-2*bucket_wall,\n                  bucket_depth*1.3,\n                  bucket_depth-bucket_wall-clearance], center=true);\n    }\n}\n\nmodule hub() {\n    difference() {\n        // disk\n        cylinder(d=hub_d, h=wheel_w, center=true);\n        // axle hole\n        cylinder(d=axle_d, h=wheel_w+2, center=true);\n    }\n}\n\nmodule wheel_body() {\n    difference() {\n        // main disk\n        cylinder(d=wheel_d, h=wheel_w, center=true);\n        // lightening holes\n        for(i=[0:bucket_count-1])\n            rotate([0,0,i*360/bucket_count])\n                translate([wheel_d*0.35, 0, 0])\n                    cylinder(d=wheel_d*0.15, h=wheel_w+2, center=true);\n    }\n}\n\nmodule bucketwheel_assembly() {\n    union() {\n        // wheel body\n        wheel_body();\n        // hub\n        hub();\n        // buckets\n        for(i=[0:bucket_count-1])\n            rotate([0,0,i*360/bucket_count+360/bucket_count/2])\n                translate([wheel_d/2-bucket_depth/2, 0, 0])\n                    rotate([0,-90,0])\n                        bucket();\n    }\n}\n\n// render the model\nbucketwheel_assembly();",
    "renders": true
  },
  {
    "vehicle": "stacker",
    "openscad_code": "// Realistic 3D-printable stacker (tray organizer)\n// Outer dimensions: 80x80x60 mm (medium complexity)\n\n$fn = 36;\n\n// Main module\nmodule stacker() {\n    difference() {\n        // Solid body\n        body();\n        // Remove cavities\n        cavities();\n    }\n    // Add ribs for strength\n    ribs();\n}\n\n// Main body with rounded corners\nmodule body() {\n    // Base plate\n    translate([0, 0, 2])\n        rounded_cube([80, 80, 4], 4);\n    \n    // Side walls\n    difference() {\n        // Outer shell\n        translate([0, 0, 34])\n            rounded_cube([80, 80, 60], 4);\n        \n        // Inner hollow\n        translate([0, 0, 34])\n            rounded_cube([72, 72, 60], 2);\n    }\n    \n    // Top lip for stacking\n    translate([0, 0, 64])\n        rounded_cube([82, 82, 2], 2);\n}\n\n// Internal compartments\nmodule cavities() {\n    // Large compartment\n    translate([0, 15, 34])\n        rounded_cube([68, 30, 56], 2);\n    \n    // Small compartment\n    translate([0, -20, 34])\n        rounded_cube([68, 20, 56], 2);\n    \n    // Drain holes in bottom\n    for (x = [-25, 0, 25])\n        for (y = [-25, 0, 25]) {\n            translate([x, y, 0])\n                cylinder(h=6, d=4);\n        }\n}\n\n// Reinforcement ribs\nmodule ribs() {\n    // Vertical ribs on sides\n    for (side = [-1, 1]) {\n        // Long sides\n        translate([0, side * 39, 34])\n            cube([76, 2, 58]);\n        \n        // Short sides\n        translate([side * 39, 0, 34])\n            cube([2, 76, 58]);\n    }\n}\n\n// Helper module for rounded cubes\nmodule rounded_cube(size, r) {\n    x = size[0]; y = size[1]; z = size[2];\n    \n    hull() {\n        translate([r, r, r])\n            sphere(r = r);\n        translate([x-r, r, r])\n            sphere(r = r);\n        translate([r, y-r, r])\n            sphere(r = r);\n        translate([x-r, y-r, r])\n            sphere(r = r);\n        translate([r, r, z-r])\n            sphere(r = r);\n        translate([x-r, r, z-r])\n            sphere(r = r);\n        translate([r, y-r, z-r])\n            sphere(r = r);\n        translate([x-r, y-r, z-r])\n            sphere(r = r);\n    }\n}\n\n// Generate the model\nstacker();",
    "renders": true
  },
  {
    "vehicle": "reclaimer",
    "openscad_code": "// Reclaimer - medium complexity realistic style\n// 3D printable mining reclaimer model ~80mm long\n\n// Overall parameters\nwheel_dia = 20;\ntrack_width = 10;\ntrack_height = 4;\nboom_length = 60;\nboom_width = 8;\nboom_height = 6;\ntower_height = 25;\ntower_width = 12;\nbase_length = 30;\nbase_width = 20;\nbase_height = 5;\n\n// Main assembly\nmodule reclaimer() {\n    // Base with tracks\n    translate([0, 0, base_height/2]) \n        base_assembly();\n    \n    // Tower\n    translate([0, 0, base_height + tower_height/2])\n        tower_assembly();\n    \n    // Boom with bucket wheel\n    translate([boom_length/2 - 5, 0, base_height + tower_height + boom_height/2])\n        rotate([0, 0, -10])\n        boom_assembly();\n}\n\n// Base and tracks\nmodule base_assembly() {\n    difference() {\n        // Main base\n        cube([base_length, base_width, base_height], center=true);\n        \n        // Cavity for weight reduction\n        translate([0, 0, -1])\n            cube([base_length-4, base_width-4, base_height-1], center=true);\n    }\n    \n    // Left track\n    translate([-base_length/2 + track_width/2, 0, 0])\n        track(track_length=base_length/2);\n    \n    // Right track\n    translate([base_length/2 - track_width/2, 0, 0])\n        track(track_length=base_length/2);\n}\n\n// Track module\nmodule track(length) {\n    for(i = [-length/2+2 : 4 : length/2-2]) {\n        translate([0, 0, i])\n            difference() {\n                // Track segment\n                cube([track_width, track_width*1.5, 3], center=true);\n                \n                // Track tread pattern\n                translate([0, track_width/2, 0])\n                    cube([track_width-2, 1, 3], center=true);\n            }\n    }\n}\n\n// Tower assembly\nmodule tower_assembly() {\n    difference() {\n        // Main tower\n        cube([tower_width, tower_width, tower_height], center=true);\n        \n        // Windows\n        for(h = [5:8:tower_height-5]) {\n            translate([tower_width/2+0.1, 0, h-tower_height/2])\n                rotate([0, 90, 0])\n                cylinder(h=tower_width-4, d=3, $fn=8);\n        }\n    }\n    \n    // Operator cab\n    translate([0, tower_width/2 + 4, tower_height/2 - 6])\n        cube([tower_width-2, 8, 8], center=true);\n}\n\n// Boom and bucket wheel\nmodule boom_assembly() {\n    // Main boom\n    cube([boom_length, boom_width, boom_height], center=true);\n    \n    // Boom support struts\n    translate([boom_length/4, 0, -boom_height/2-2])\n        cube([2, boom_width-2, 4], center=true);\n    translate([-boom_length/4, 0, -boom_height/2-2])\n        cube([2, boom_width-2, 4], center=true);\n    \n    // Bucket wheel\n    translate([boom_length/2 + wheel_dia/2, 0, 0])\n        bucket_wheel();\n}\n\n// Bucket wheel with scoops\nmodule bucket_wheel() {\n    rotate([90, 0, 0])\n    difference() {\n        // Wheel disk\n        cylinder(h=6, d=wheel_dia, center=true, $fn=32);\n        \n        // Center hole\n        cylinder(h=7, d=4, center=true, $fn=16);\n    }\n    \n    // Buckets\n    for(a = [0:30:330]) {\n        rotate([90, 0, a])\n        translate([wheel_dia/2, 0, 0])\n            bucket();\n    }\n}\n\n// Individual bucket\nmodule bucket() {\n    difference() {\n        // Bucket body\n        translate([0, 0, -3])\n            cube([8, 6, 6], center=true);\n        \n        // Bucket cavity\n        translate([0, 0, -2])\n            cube([6, 4, 4], center=true);\n    }\n}\n\n// Render the reclaimer\nreclaimer();",
    "renders": true
  },
  {
    "vehicle": "spreaders",
    "openscad_code": "// Realistic medium-complexity 3D-printable spreader\n// Overall length ~85 mm\n\n$fn = 36;\n\n// Main parameters\nhandle_len = 40;\nhandle_d = 8;\njaw_len = 30;\njaw_width = 12;\njaw_thick = 3.5;\npin_d = 3;\nspring_d = 6;\nspring_coils = 4;\nspring_wire = 1;\n\n// Handle with grip rings\nmodule handle() {\n    difference() {\n        cylinder(h = handle_len, d = handle_d, center = true);\n        // Grip rings\n        for (i = [-handle_len/2 + 4 : 4 : handle_len/2 - 4]) {\n            translate([0, 0, i])\n                cylinder(h = 1, d = handle_d + 1.5, center = true);\n        }\n    }\n}\n\n// Jaw with teeth\nmodule jaw() {\n    difference() {\n        union() {\n            // Main jaw body\n            translate([0, 0, jaw_len/2])\n                cube([jaw_width, jaw_thick, jaw_len], center = true);\n            // Reinforcement rib\n            translate([0, -jaw_thick/2, jaw_len/2])\n                cube([jaw_width - 4, 2, jaw_len - 8], center = true);\n        }\n        // Pivot hole\n        translate([0, 0, 6])\n            rotate([90, 0, 0])\n                cylinder(h = jaw_width + 2, d = pin_d, center = true);\n        // Teeth cutouts\n        for (i = [3 : 3 : jaw_len - 6]) {\n            translate([0, jaw_thick/2, i])\n                cube([jaw_width - 2, 2, 1.5], center = true);\n        }\n    }\n}\n\n// Pivot pin\nmodule pivot_pin() {\n    cylinder(h = jaw_width + 2, d = pin_d, center = true);\n}\n\n// Torsion spring\nmodule spring() {\n    for (i = [0 : 1 : spring_coils * 360]) {\n        rotate([90, 0, i])\n            translate([spring_d/2, 0, i / 40])\n                sphere(d = spring_wire, $fn = 8);\n    }\n    // Spring legs\n    translate([spring_d/2, 0, spring_coils * 9 / 40])\n        cube([spring_d/2, spring_wire, 12]);\n    translate([-spring_d/2, 0, 0])\n        rotate([0, 0, 180])\n            cube([spring_d/2, spring_wire, 12]);\n}\n\n// Assembly\nmodule spreader() {\n    // Left handle + jaw\n    translate([0, -handle_d/2 - jaw_thick/2, 0])\n        union() {\n            rotate([0, 0, 20])\n                handle();\n            rotate([0, 90, 0])\n                jaw();\n        }\n    \n    // Right handle + jaw (mirrored)\n    mirror([0, 1, 0])\n        translate([0, -handle_d/2 - jaw_thick/2, 0])\n            union() {\n                rotate([0, 0, -20])\n                    handle();\n                rotate([0, 90, 0])\n                    jaw();\n            }\n    \n    // Pivot pin\n    translate([0, 0, 6])\n        rotate([0, 90, 0])\n            pivot_pin();\n    \n    // Spring\n    color(\"silver\")\n        translate([0, 0, 6])\n            rotate([90, 0, 0])\n                spring();\n}\n\n// Render the complete spreader\nspreader();",
    "renders": true
  },
  {
    "vehicle": "bulldozers",
    "openscad_code": "// Bulldozer - Medium complexity realistic style\n// Total size ~80mm length, 40mm width, 35mm height\n\n$fn = 32; // Smooth curves for 3D printing\n\nmodule track_segment() {\n    difference() {\n        cube([8, 15, 5]); // Track pad\n        translate([4, 7.5, 3])\n            cylinder(h=3, r=2); // Traction hole\n    }\n}\n\nmodule tracks() {\n    // Left track assembly\n    translate([-20, -20, 0]) {\n        for(i = [0:3]) {\n            translate([0, i*14, 0])\n                track_segment();\n        }\n        // Sprocket\n        translate([4, -5, 5])\n            rotate([90, 0, 0])\n                cylinder(h=6, r=8);\n        // Idler\n        translate([4, 55, 5])\n            rotate([90, 0, 0])\n                cylinder(h=6, r=6);\n    }\n    \n    // Right track assembly (mirrored)\n    mirror([1, 0, 0]) {\n        translate([-20, -20, 0]) {\n            for(i = [0:3]) {\n                translate([0, i*14, 0])\n                    track_segment();\n            }\n            translate([4, -5, 5])\n                rotate([90, 0, 0])\n                    cylinder(h=6, r=8);\n            translate([4, 55, 5])\n                rotate([90, 0, 0])\n                    cylinder(h=6, r=6);\n        }\n    }\n}\n\nmodule main_body() {\n    // Engine compartment\n    translate([0, 0, 12]) {\n        difference() {\n            cube([45, 35, 18], center=true);\n            // Radiator grill\n            translate([22.5, 0, 5])\n                cube([5, 30, 8], center=true);\n        }\n    }\n    \n    // Operator cabin\n    translate([-10, 0, 25]) {\n        difference() {\n            cube([25, 30, 15], center=true);\n            // Cabin windows\n            translate([12, 0, 5])\n                cube([5, 24, 10], center=true);\n            translate([-12, 0, 5])\n                cube([5, 24, 10], center=true);\n        }\n    }\n    \n    // Undercarriage\n    translate([0, 0, 6]) {\n        cube([40, 30, 10], center=true);\n    }\n}\n\nmodule blade() {\n    // Main blade\n    translate([28, 0, 12]) {\n        rotate([0, -10, 0]) {\n            difference() {\n                cube([5, 36, 20], center=true);\n                // Blade curve\n                translate([0, 0, 10])\n                    cylinder(h=6, r=18, center=true);\n            }\n        }\n    }\n    \n    // Blade supports\n    translate([20, -15, 15]) {\n        rotate([0, 45, 0]) {\n            cylinder(h=15, r=3);\n        }\n    }\n    translate([20, 15, 15]) {\n        rotate([0, 45, 0]) {\n            cylinder(h=15, r=3);\n        }\n    }\n    \n    // Push arms\n    translate([15, -12, 20]) {\n        cube([15, 4, 4]);\n    }\n    translate([15, 12, 20]) {\n        cube([15, 4, 4]);\n    }\n}\n\nmodule exhaust() {\n    // Exhaust pipe\n    translate([0, 15, 30]) {\n        cylinder(h=15, r=2);\n    }\n    // Exhaust cap\n    translate([0, 15, 45]) {\n        sphere(r=3);\n    }\n}\n\n// Assembly\nunion() {\n    tracks();\n    main_body();\n    blade();\n    exhaust();\n}",
    "renders": true
  },
  {
    "vehicle": "excavators",
    "openscad_code": "// Mini Excavator – realistic style, medium complexity\n// All dimensions in mm, final length ~90 mm (fits on small printers)\n// No overhangs >45°, 2 mm wall thickness for 3D printing\n\n$fn = 32;  // smooth curves\n\n// Main assembly\nunion() {\n    // Under-carriage & tracks\n    translate([0,0,0]) chassis();\n\n    // 360° turntable\n    translate([0,0,20]) rotate([0,0,body_yaw]) body();\n}\n\n// User-adjustable joint angles\nbody_yaw   = 0;\nboom_lift  = -20;\narm_pitch  = 20;\nbucket_tilt = -30;\n\n// -------------------------\n// TRACKS & UNDERCARRIAGE\nmodule chassis() {\n    color(\"darkgray\")\n    difference() {\n        // Main frame block\n        cube([70,40,20], center=true);\n\n        // Hollow inside for weight saving\n        translate([0,0,10])\n        cube([66,36,18], center=true);\n    }\n\n    // Two track modules\n    mirror([0,1,0]) {\n        translate([0,22,0]) track_assembly();\n    }\n}\n\nmodule track_assembly() {\n    difference() {\n        // Track guard plate\n        cube([70,6,10], center=true);\n\n        // Cut-outs for track rollers\n        for (x = [-30,-15,0,15,30])\n            translate([x,0,5])\n            cylinder(h=11, d=6, center=true);\n    }\n\n    // Simplified continuous track\n    color(\"black\")\n    for (x = [-30,-20,-10,0,10,20,30])\n        translate([x,0,2])\n        cube([8,6,4], center=true);\n}\n\n// -------------------------\n// UPPER BODY (house)\nmodule body() {\n    color(\"yellow\")\n    union() {\n        // Engine cover\n        translate([0,0,20])\n        cube([40,35,25], center=true);\n\n        // Counterweight\n        translate([-25,0,15])\n        cube([20,30,30], center=true);\n\n        // Cabin\n        translate([10,0,25])\n        cabin();\n\n        // Boom pivot on front\n        translate([20,0,30])\n        rotate([boom_lift,0,0])\n        boom();\n    }\n}\n\nmodule cabin() {\n    difference() {\n        // Main box\n        cube([18,30,20], center=true);\n\n        // Door recess\n        translate([0,8,0])\n        cube([20,2,18], center=true);\n\n        // Windows\n        translate([0,0,10])\n        cube([22,26,6], center=true);\n    }\n}\n\n// -------------------------\n// BOOM & ARM\nmodule boom() {\n    difference() {\n        // Boom beam\n        translate([20,0,-5])\n        cube([40,10,10], center=true);\n\n        // Lightening holes\n        for (i = [0:1])\n            translate([10+i*20,0,-5])\n            cylinder(h=12, d=5, center=true);\n    }\n\n    // Arm joint\n    translate([40,0,-5])\n    rotate([arm_pitch,0,0])\n    arm();\n}\n\nmodule arm() {\n    difference() {\n        // Arm beam\n        translate([20,0,0])\n        cube([35,8,8], center=true);\n\n        // Holes\n        for (i = [0:1])\n            translate([10+i*15,0,0])\n            cylinder(h=10, d=4, center=true);\n    }\n\n    // Bucket hinge\n    translate([35,0,0])\n    rotate([bucket_tilt,0,0])\n    bucket();\n}\n\n// -------------------------\n// BUCKET\nmodule bucket() {\n    difference() {\n        // Main shell\n        union() {\n            // Back plate\n            translate([0,0,-3])\n            cube([20,12,6], center=true);\n\n            // Curved lip\n            translate([10,0,-6])\n            rotate([90,0,0])\n            cylinder(h=12, r=6, center=true);\n        }\n\n        // Hollow inside\n        translate([5,0,-4])\n        cube([16,10,8], center=true);\n    }\n\n    // Teeth\n    color(\"gray\")\n    for (y = [-4,0,4])\n        translate([10,y,-9])\n        cube([2,2,3], center=true);\n}\n\n// -------------------------\n// Optional stand for printing\ntranslate([0,0,-5])\ncolor(\"lightgray\", 0.3)\ncylinder(h=2, d=100, center=true);",
    "renders": true
  },
  {
    "vehicle": "cranes",
    "openscad_code": "// Mobile construction crane (Liebherr-style)\n// Overall height ~80 mm, suitable for 3D printing\n\n$fa = 2;\n$fs = 0.5;\n\n// Main module\nmodule crane() {\n    // Base turntable\n    base();\n\n    // Slewing ring\n    translate([0,0,8]) rotate([0,0,0]) slewing_ring();\n\n    // Tower\n    translate([0,0,10]) tower();\n\n    // Jib (lattice boom)\n    translate([0,0,90]) rotate([0,0,0]) jib();\n\n    // Counter-jib\n    translate([0,0,90]) rotate([0,0,180]) counter_jib();\n\n    // Hoist block and hook\n    translate([0,0,90]) rotate([0,0,45]) hoist_block();\n}\n\n// Mobile under-carriage\nmodule base() {\n    // Chassis frame\n    difference() {\n        cube([60,40,8], center=true);\n        translate([0,0,4]) cube([56,36,8.1], center=true);\n    }\n\n    // Axles\n    for (x = [-20, 20]) {\n        translate([x,0,2]) cube([4,40,4], center=true);\n    }\n\n    // Wheels\n    for (x = [-25, -15, 15, 25])\n    for (y = [-15, 15]) {\n        translate([x,y,0]) cylinder(h=6, r=4, center=true);\n    }\n}\n\n// Slewing ring\nmodule slewing_ring() {\n    difference() {\n        cylinder(h=2, r=15, center=true);\n        cylinder(h=2.1, r=12, center=true);\n    }\n}\n\n// Tower mast (lattice)\nmodule tower() {\n    for (z = [0:10:80]) {\n        translate([0,0,z]) tower_section();\n    }\n}\n\n// Single tower section\nmodule tower_section() {\n    // Main legs\n    for (i = 0; i < 4) {\n        a = i * 90;\n        rotate([0,0,a]) translate([6,6,0]) cylinder(h=10, r=1.5);\n    }\n\n    // Horizontal bracing\n    for (z = [2.5:5:7.5]) {\n        translate([6,6,z]) cube([12,1,1], center=true);\n        translate([6,-6,z]) cube([12,1,1], center=true);\n        translate([-6,6,z]) cube([12,1,1], center=true);\n        translate([-6,-6,z]) cube([12,1,1], center=true);\n    }\n\n    // Diagonal bracing\n    rotate([0,0,45]) cube([16,1,10], center=true);\n    rotate([0,0,-45]) cube([16,1,10], center=true);\n}\n\n// Main jib lattice boom\nmodule jib() {\n    length = 60;\n    union() {\n        // Top chord\n        translate([0,0,3]) cube([length,1,1], center=false);\n\n        // Bottom chord\n        translate([0,0,-3]) cube([length,1,1], center=false);\n\n        // Vertical posts\n        for (x = [10:10:length-10]) {\n            translate([x,0,0]) cube([1,1,6], center=true);\n        }\n\n        // Diagonal braces\n        for (x = [5:10:length-10]) {\n            translate([x,0,0]) rotate([0,45,0]) cube([14,1,1], center=true);\n            translate([x,0,0]) rotate([0,-45,0]) cube([14,1,1], center=true);\n        }\n\n        // Tip sheave\n        translate([length-2,0,0]) cylinder(h=1, r=2);\n    }\n}\n\n// Counter-jib\nmodule counter_jib() {\n    length = 30;\n    union() {\n        // Main beam\n        cube([length,6,4], center=false);\n\n        // Counterweights\n        for (x = [5:5:25]) {\n            translate([x,0,2]) cube([4,6,8], center=true);\n        }\n    }\n}\n\n// Hoist block\nmodule hoist_block() {\n    translate([40,0,-15]) union() {\n        // Block housing\n        cube([6,6,12], center=true);\n\n        // Hook\n        translate([0,0,-7]) difference() {\n            cylinder(h=4, r=3);\n            translate([0,0,-2]) cylinder(h=6, r=1.5);\n        }\n    }\n}\n\n// Render the crane\ncrane();",
    "renders": true
  },
  {
    "vehicle": "forklifts",
    "openscad_code": "// Forklift - Realistic style, medium complexity\n// Dimensions in mm\n\n$fn = 50;\n\n// Main dimensions\nfork_length = 60;\nfork_width = 8;\nfork_height = 4;\nmast_width = 30;\nmast_height = 45;\nbody_length = 35;\nbody_width = 25;\nbody_height = 20;\nwheel_d = 12;\nwheel_w = 6;\ncounterweight_h = 25;\n\n// Fork module - reusable for both forks\nmodule fork() {\n    // Main fork blade\n    cube([fork_length, fork_width, fork_height]);\n    \n    // Fork back support\n    translate([fork_length-5, -2, 0])\n    cube([5, fork_width+4, fork_height+2]);\n}\n\n// Wheel module - for all wheels\nmodule wheel() {\n    difference() {\n        cylinder(h=wheel_w, d=wheel_d);\n        translate([0, 0, -1])\n        cylinder(h=wheel_w+2, d=wheel_d-4);\n    }\n}\n\n// Mast assembly\nmodule mast() {\n    // Main mast posts\n    for(x=[-mast_width/2+3, mast_width/2-3]) {\n        translate([x, 0, 0])\n        cube([6, 4, mast_height]);\n    }\n    \n    // Cross bars\n    for(h=[10, 25, 40]) {\n        translate([-mast_width/2, -2, h])\n        cube([mast_width, 4, 3]);\n    }\n    \n    // Fork carriage\n    translate([-mast_width/2+5, -6, 0])\n    cube([mast_width-10, 6, 8]);\n}\n\n// Main body\nmodule body() {\n    // Main chassis\n    translate([-body_length/2, -body_width/2, 0])\n    cube([body_length, body_width, body_height]);\n    \n    // Operator cabin\n    translate([-body_length/2+5, -body_width/2+2, body_height])\n    cube([15, body_width-4, 18]);\n    \n    // Roof\n    translate([-body_length/2+3, -body_width/2+1, body_height+18])\n    cube([19, body_width-2, 2]);\n    \n    // Counterweight\n    translate([body_length/2-3, -body_width/2, 0])\n    cube([6, body_width, counterweight_h]);\n    \n    // Engine cover\n    translate([-body_length/2+15, -body_width/2, body_height])\n    cube([10, body_width, 8]);\n}\n\n// Assembly\n// Main body\nbody();\n\n// Mast positioned at front\ntranslate([body_length/2-3, 0, body_height-5])\nmast();\n\n// Forks attached to carriage\nfor(side=[-1, 1]) {\n    translate([body_length/2-3, side*(fork_width+4)/2, body_height-5+4])\n    fork();\n}\n\n// Wheels\n// Front wheels\ntranslate([body_length/2-8, -body_width/2-wheel_w/2, wheel_d/2])\nrotate([90, 0, 0])\nwheel();\n\ntranslate([body_length/2-8, body_width/2+wheel_w/2, wheel_d/2])\nrotate([90, 0, 0])\nwheel();\n\n// Rear steering wheel\ntranslate([-body_length/2+5, 0, wheel_d/2])\nrotate([90, 0, 0])\nwheel();\n\n// Steering column\ntranslate([-body_length/2+5, 0, body_height+10])\nrotate([90, 0, 0])\ncylinder(h=15, d=3);\n\n// Steering wheel\ntranslate([-body_length/2+5, 0, body_height+25])\nrotate([90, 0, 0])\ndifference() {\n    cylinder(h=5, d=20);\n    cylinder(h=6, d=16);\n}\n\n// Safety lights\ntranslate([body_length/2, -body_width/2-1, body_height+15])\ncube([2, 2, 2]);\n\ntranslate([body_length/2, body_width/2-1, body_height+15])\ncube([2, 2, 2]);\n\n// Exhaust pipe\ntranslate([-body_length/2+10, body_width/2, body_height+8])\ncylinder(h=10, d=3);",
    "renders": true
  },
  {
    "vehicle": "tractors",
    "openscad_code": "// Realistic Medium-Complexity Tractor\n// Approx. 85 mm long, 50 mm wide, 50 mm high\n$fn = 36;\n\nmodule wheel(r=8, w=4) {\n    difference() {\n        cylinder(h=w, r=r, center=true);\n        cylinder(h=w+0.2, r=r-2, center=true);\n    }\n    translate([0,0,w/2])\n        cylinder(h=1, r=2);\n    translate([0,0,-w/2-1])\n        cylinder(h=1, r=2);\n}\n\nmodule tire(r=10, w=6) {\n    difference() {\n        cylinder(h=w, r=r, center=true);\n        for(i=[0:7])\n            rotate([0,0,i*45])\n                translate([r-2,0,0])\n                    cube([4,1,w+0.2], center=true);\n    }\n}\n\nmodule wheel_with_tire(rim_r=8, tire_r=10, w=6) {\n    color(\"gray\") wheel(r=rim_r, w=w);\n    color(\"black\") tire(r=tire_r, w=w);\n}\n\nmodule front_axle() {\n    translate([-15,0,5])\n        rotate([90,0,0])\n            cylinder(h=30, r=2);\n    translate([-30,-10,5]) wheel_with_tire(6,8,4);\n    translate([-30,10,5]) wheel_with_tire(6,8,4);\n}\n\nmodule rear_axle() {\n    translate([20,0,5])\n        rotate([90,0,0])\n            cylinder(h=40, r=3);\n    translate([35,-15,5]) wheel_with_tire(8,10,6);\n    translate([35,15,5]) wheel_with_tire(8,10,6);\n}\n\nmodule engine_hood() {\n    color(\"green\") {\n        translate([-20,0,15])\n            cube([25,20,15], center=true);\n        translate([-7.5,0,25])\n            cube([10,18,5], center=true);\n    }\n}\n\nmodule cab() {\n    color(\"green\") {\n        translate([5,0,25])\n            cube([25,22,20], center=true);\n        translate([5,0,37])\n            cube([20,20,4], center=true);\n    }\n    color(\"lightblue\") {\n        translate([5,0,28])\n            cube([18,18,15], center=true);\n    }\n}\n\nmodule exhaust() {\n    color(\"gray\") {\n        translate([15,-12,35])\n            cylinder(h=15, r=1.5);\n        translate([15,-12,50])\n            sphere(r=2.5);\n    }\n}\n\nmodule fender() {\n    color(\"green\") {\n        translate([-30,-10,8])\n            cube([10,6,3]);\n        translate([-30,10,8])\n            cube([10,6,3]);\n    }\n}\n\nmodule chassis() {\n    color(\"gray\") {\n        translate([0,0,5])\n            cube([70,20,4], center=true);\n        translate([0,0,2])\n            cube([60,18,4], center=true);\n    }\n}\n\nmodule headlights() {\n    color(\"yellow\") {\n        translate([-32,8,13])\n            sphere(r=2);\n        translate([-32,-8,13])\n            sphere(r=2);\n    }\n}\n\nmodule hitch() {\n    color(\"gray\") {\n        translate([38,0,8])\n            cube([6,4,4], center=true);\n        translate([41,0,8])\n            cube([2,10,2], center=true);\n    }\n}\n\nmodule steps() {\n    color(\"gray\") {\n        translate([-5,12,8])\n            cube([8,2,2]);\n        translate([5,12,8])\n            cube([8,2,2]);\n    }\n}\n\n// Assembly\nchassis();\nfront_axle();\nrear_axle();\nengine_hood();\ncab();\nexhaust();\nfender();\nheadlights();\nhitch();\nsteps();",
    "renders": true
  },
  {
    "vehicle": "dumps",
    "openscad_code": "// Realistic medium-complexity garbage truck (dumps) – OpenSCAD\n// Approx. 80 mm long, 3 mm wall thickness, printable without supports\nwall = 3;\nscale = 0.6;                 // global shrink so the model fits 100 mm\n\n/* ---- overall truck ---- */\nmodule truck() {\n    // chassis frame\n    chassis();\n    \n    // cab\n    translate([0, 0, 10*scale])\n        cab();\n    \n    // dump bin\n    translate([-34*scale, 0, 10*scale])\n        rotate([0, 30, 0])   // slight up-tilt for realism\n        dump_bin();\n    \n    // rear wheel set\n    for(y = [-12*scale, 12*scale])\n        translate([-30*scale, y, 0])\n            wheel();\n    \n    // front wheel set\n    for(y = [-12*scale, 12*scale])\n        translate([30*scale, y, 0])\n            wheel();\n}\n\n/* ---- chassis ---- */\nmodule chassis() {\n    // main frame rails\n    for(side = [-1, 1])\n        translate([0, side*20*scale, 5*scale])\n            cube([90*scale, wall, 10*scale], center=true);\n    \n    // cross beams\n    for(x = [-30*scale, 0, 30*scale])\n        translate([x, 0, 5*scale])\n            cube([wall, 40*scale, 10*scale], center=true);\n}\n\n/* ---- cab ---- */\nmodule cab() {\n    difference() {\n        // outer shell\n        cube([40*scale, 28*scale, 30*scale], center=true);\n        // windshield cut\n        translate([10*scale, 0, 10*scale])\n            cube([50*scale, 26*scale, 20*scale], center=true);\n        // door windows\n        for(side = [-1, 1])\n            translate([0, side*12*scale, 10*scale])\n                cube([36*scale, wall, 20*scale], center=true);\n    }\n}\n\n/* ---- dump bin ---- */\nmodule dump_bin() {\n    difference() {\n        // main box\n        cube([60*scale, 45*scale, 35*scale], center=true);\n        \n        // hollow inside\n        translate([0, 0, -wall/2])\n            cube([(60-wall)*scale, (45-wall)*scale, (35-wall)*scale], center=true);\n            \n        // cut tailgate bottom hinge gap\n        translate([30*scale, 0, -17*scale])\n            cube([wall*2, 46*scale, 10*scale], center=true);\n    }\n    \n    // tailgate\n    translate([30*scale, 0, -17*scale])\n        rotate([60, 0, 0])\n        cube([60*scale, 45*scale, wall], center=true);\n}\n\n/* ---- wheel ---- */\nmodule wheel() {\n    cylinder(h=10*scale, r=10*scale, center=true);\n    difference() {\n        cylinder(h=11*scale, r=10*scale, center=true);\n        cylinder(h=12*scale, r=5*scale, center=true);\n    }\n}\n\ntruck();",
    "renders": true
  },
  {
    "vehicle": "loaders",
    "openscad_code": "// Realistic Medium-Complexity Wheel Loader\n// Overall dimensions: ~90 mm long, ~40 mm wide, ~55 mm tall\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main body dimensions\nbody_l = 60;\nbody_w = 35;\nbody_h = 18;\n\n// Cabin\ncabin_w = 28;\ncabin_h = 25;\ncabin_l = 22;\n\n// Wheels\nwheel_r = 9;\nwheel_w = 5;\naxle_offset = 12;\n\n// Boom dimensions\nboom_l = 35;\nboom_w = 6;\nboom_h = 8;\n\n// Bucket\nbucket_l = 30;\nbucket_w = 38;\nbucket_h = 12;\n\nmodule wheel() {\n    difference() {\n        cylinder(r=wheel_r, h=wheel_w, $fn=32);\n        translate([0,0,-0.1])\n            cylinder(r=wheel_r-wall, h=wheel_w+0.2, $fn=32);\n    }\n}\n\nmodule axle() {\n    cylinder(r=wheel_w*0.6, h=body_w+wheel_w*2, $fn=16);\n}\n\nmodule chassis() {\n    difference() {\n        // Main platform\n        translate([-body_l/2, -body_w/2, 0])\n            cube([body_l, body_w, body_h]);\n\n        // Cutouts for axles\n        translate([-axle_offset, -body_w/2-wall, body_h/2])\n            rotate([90,0,0])\n                cylinder(r=wheel_w*0.7, h=body_w+wall*2, $fn=16);\n        translate([axle_offset, -body_w/2-wall, body_h/2])\n            rotate([90,0,0])\n                cylinder(r=wheel_w*0.7, h=body_w+wall*2, $fn=16);\n    }\n}\n\nmodule cabin() {\n    difference() {\n        // Main cabin\n        translate([body_l/2-cabin_l-5, -cabin_w/2, body_h])\n            cube([cabin_l, cabin_w, cabin_h]);\n\n        // Windows\n        translate([body_l/2-cabin_l-4.5, -cabin_w/2+3, body_h+cabin_h-10])\n            cube([cabin_l-6, cabin_w-6, 8]);\n\n        // Door lines for realism\n        translate([body_l/2-cabin_l-5.1, -cabin_w/2+1, body_h+2])\n            cube([0.2, cabin_w-2, cabin_h-4]);\n    }\n}\n\nmodule engine_hood() {\n    difference() {\n        // Hood with slope\n        translate([-body_l/2+5, -body_w/2+2, body_h])\n            cube([body_l/2-10, body_w-4, 10]);\n\n        // Grille lines\n        for(i=[-body_l/2+8:-body_l/2+25])\n            translate([i, -body_w/2+3, body_h+5.1])\n                cube([0.5, body_w-6, 0.2]);\n    }\n}\n\nmodule boom() {\n    // Boom arm\n    translate([-body_l/2+5, 0, body_h+cabin_h-5])\n        rotate([0, -30, 0])\n            cube([boom_l, boom_w, boom_h]);\n\n    // Hydraulic cylinder 1\n    translate([-body_l/2+10, 0, body_h+cabin_h-5])\n        rotate([90, 0, 45])\n            cylinder(r=2, h=20, $fn=16);\n}\n\nmodule bucket() {\n    difference() {\n        // Main bucket\n        translate([-body_l/2-boom_l+5, -bucket_w/2, body_h+cabin_h-20])\n            rotate([0, -60, 0])\n                cube([bucket_l, bucket_w, bucket_h]);\n\n        // Bucket cavity\n        translate([-body_l/2-boom_l+6, -bucket_w/2+wall, body_h+cabin_h-20]\n                  + [0,0,wall])\n            rotate([0, -60, 0])\n                cube([bucket_l-wall*2, bucket_w-wall*2, bucket_h]);\n\n        // Teeth\n        for(i=[-bucket_w/2+3:5:bucket_w/2-3]) {\n            translate([-body_l/2-boom_l+5, i, body_h+cabin_h-20])\n                rotate([0, -60, 0])\n                    cube([bucket_l/4, 2, bucket_h/2]);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    chassis();\n    cabin();\n    engine_hood();\n    boom();\n    bucket();\n    \n    // Front axle and wheels\n    translate([-axle_offset, 0, body_h/2])\n        axle();\n    translate([-axle_offset, -body_w/2-wheel_w/2, body_h/2])\n        wheel();\n    translate([-axle_offset, body_w/2+wheel_w/2, body_h/2])\n        wheel();\n    \n    // Rear axle and wheels\n    translate([axle_offset, 0, body_h/2])\n        axle();\n    translate([axle_offset, -body_w/2-wheel_w/2, body_h/2])\n        wheel();\n    translate([axle_offset, body_w/2+wheel_w/2, body_h/2])\n        wheel();\n}",
    "renders": true
  },
  {
    "vehicle": "graders",
    "openscad_code": "// Realistic-style Grader model (medium complexity)\n// Main body dimensions\nbody_len = 70;\nbody_wid = 30;\nbody_hgt = 15;\n\n// Blade dimensions\nblade_len = 75;\nblade_wid = 40;\nblade_thk = 3;\n\n// Wheel dimensions\nwheel_d = 18;\nwheel_w = 9;\naxle_r = 3;\n\n// Cabin dimensions\ncabin_w = 22;\ncabin_d = 20;\ncabin_h = 18;\n\n// Roof dimensions\nroof_w = cabin_w + 4;\nroof_d = cabin_d + 2;\nroof_h = 2;\n\n$fn=32;\n\n// Main chassis\nmodule chassis() {\n    difference() {\n        // Main body block\n        cube([body_len, body_wid, body_hgt], center=true);\n        \n        // Cockpit cutout\n        translate([body_len/2 - 15, 0, body_hgt/2 - 2])\n            cube([18, body_wid - 6, 10], center=true);\n        \n        // Engine grill indent\n        translate([-body_len/2 + 8, 0, body_hgt/2 - 2])\n            cube([12, body_wid - 8, 4], center=true);\n    }\n}\n\n// Cab assembly\nmodule cab() {\n    translate([body_len/2 - 10, 0, body_hgt/2 + cabin_h/2]) {\n        // Main cabin\n        difference() {\n            cube([cabin_d, cabin_w, cabin_h], center=true);\n            // Windows\n            translate([cabin_d/2 - 2, 0, 0])\n                cube([4, cabin_w - 4, cabin_h - 4], center=true);\n        }\n        \n        // Roof\n        translate([0, 0, cabin_h/2 + roof_h/2])\n            cube([roof_d, roof_w, roof_h], center=true);\n        \n        // Exhaust pipe\n        translate([cabin_d/2 + 2, 0, cabin_h/2 + roof_h + 5])\n            cylinder(h=12, r1=2, r2=1);\n    }\n}\n\n// Wheel with tire tread pattern\nmodule wheel() {\n    difference() {\n        union() {\n            // Main tire\n            cylinder(h=wheel_w, d=wheel_d, center=true);\n            \n            // Rim\n            translate([0, 0, wheel_w/2 + 0.5])\n                cylinder(h=1.5, d=wheel_d - 4);\n            translate([0, 0, -wheel_w/2 - 0.5])\n                cylinder(h=1.5, d=wheel_d - 4);\n        }\n        \n        // Axle hole\n        cylinder(h=wheel_w + 2, r=axle_r, center=true);\n        \n        // Tread cuts\n        for(i=[0:15]) {\n            rotate([0, 0, i * 22.5])\n                translate([wheel_d/2 - 2, 0, 0])\n                    cube([4, 2, wheel_w + 1], center=true);\n        }\n    }\n}\n\n// Wheel assembly\nmodule wheel_assembly(x_pos, y_pos, z_pos) {\n    translate([x_pos, y_pos, z_pos]) {\n        rotate([90, 0, 0])\n            wheel();\n    }\n}\n\n// Main blade\nmodule blade() {\n    translate([-body_len/2 - blade_len/2 + 10, 0, -body_hgt/2 - blade_thk/2 - 2]) {\n        difference() {\n            // Main blade plate\n            cube([blade_len, blade_wid, blade_thk], center=true);\n            \n            // Curved cutting edge\n            for(i=[-blade_wid/2 + 5:5:blade_wid/2 - 5]) {\n                translate([blade_len/2 - 5, i, -blade_thk/2 - 1])\n                    rotate([90, 0, 0])\n                        cylinder(h=10, r=blade_thk);\n            }\n        }\n        \n        // Blade supports\n        translate([blade_len/2 - 15, blade_wid/2 + 2, 0])\n            cube([5, 4, 8]);\n        translate([blade_len/2 - 15, -blade_wid/2 - 2, 0])\n            cube([5, 4, 8]);\n    }\n}\n\n// Blade lift arms\nmodule blade_arms() {\n    // Left arm\n    translate([-body_len/2 + 10, body_wid/2 + 3, 0])\n        rotate([0, 45, 0])\n            cube([25, 4, 4]);\n    \n    // Right arm\n    translate([-body_len/2 + 10, -body_wid/2 - 3, 0])\n        rotate([0, 45, 0])\n            cube([25, 4, 4]);\n    \n    // Central pivot\n    translate([-body_len/2 + 5, 0, -body_hgt/2 - 5])\n        cylinder(h=10, r=5);\n}\n\n// Engine details\nmodule engine() {\n    translate([-body_len/2 + 8, 0, body_hgt/2 + 2]) {\n        // Engine block\n        cube([10, body_wid - 10, 6], center=true);\n        \n        // Air filter\n        translate([-2, 0, 4])\n            sphere(d=6);\n    }\n}\n\n// Assembly\nunion() {\n    chassis();\n    cab();\n    blade();\n    blade_arms();\n    engine();\n    \n    // Front wheels\n    wheel_assembly(body_len/2 - 15, body_wid/2 + 10, -body_hgt/2);\n    wheel_assembly(body_len/2 - 15, -body_wid/2 - 10, -body_hgt/2);\n    \n    // Rear wheels\n    wheel_assembly(-body_len/2 + 15, body_wid/2 + 10, -body_hgt/2);\n    wheel_assembly(-body_len/2 + 15, -body_wid/2 - 10, -body_hgt/2);\n}",
    "renders": true
  },
  {
    "vehicle": "rollers",
    "openscad_code": "// OpenSCAD code for a realistic 3D-printable paint roller\n// Size: ~95mm L × 50mm Ø (roller), 110mm L (handle)\n// All parts printable without supports, 1.2 mm wall thickness\n\n$fn = 64;  // Smooth curves\n\n// Overall dimensions\nroller_d = 50;          // Roller diameter\nroller_l = 95;          // Roller length\nhandle_d = 12;          // Handle diameter  \nhandle_l = 110;         // Handle length\nspindle_d = 6;          // Wire spindle Ø\nwall_t = 1.2;           // Wall thickness for printing\n\nmodule roller_sleeve() {\n    // Foam sleeve\n    difference() {\n        cylinder(d = roller_d, h = roller_l);\n        translate([0,0,-0.1])\n            cylinder(d = roller_d - 2*wall_t, h = roller_l + 0.2);\n    }\n    \n    // Slight texture rings\n    for (z = [-roller_l/2 + 5 : 5 : roller_l/2 - 5]) {\n        translate([0,0,z])\n            difference() {\n                cylinder(d = roller_d + 0.2, h = 0.6);\n                cylinder(d = roller_d - 0.2, h = 0.6);\n            }\n    }\n}\n\nmodule roller_core() {\n    // Hollow plastic core with ribs\n    difference() {\n        cylinder(d = roller_d - 2*wall_t, h = roller_l);\n        translate([0,0,wall_t])\n            cylinder(d = roller_d - 4*wall_t, h = roller_l - 2*wall_t);\n    }\n    \n    // Internal ribs every 20 mm\n    for (pos = [-roller_l/2 + 10 : 20 : roller_l/2 - 10]) {\n        translate([0,0,pos])\n            difference() {\n                cylinder(d = roller_d - 2*wall_t, h = 1.2);\n                cylinder(d = spindle_d + 2*wall_t, h = 1.2);\n            }\n    }\n    \n    // End caps\n    for (z = [-roller_l/2, roller_l/2]) {\n        translate([0,0,z])\n            difference() {\n                cylinder(d = roller_d - 2*wall_t, h = wall_t);\n                cylinder(d = spindle_d, h = wall_t + 0.1);\n            }\n    }\n}\n\nmodule spindle() {\n    // Steel wire spindle\n    rotate([90,0,0])\n        cylinder(d = spindle_d, h = roller_d + 10);\n}\n\nmodule handle_grip() {\n    // Ergonomic handle with finger grooves\n    difference() {\n        hull() {\n            cylinder(d = handle_d, h = handle_l);\n            translate([0,0,handle_l - 15])\n                sphere(d = handle_d * 1.3);\n        }\n        \n        // Center bore\n        translate([0,0,-1])\n            cylinder(d = handle_d - 2*wall_t, h = handle_l + 2);\n        \n        // Finger grooves\n        for (i = [1:4]) {\n            rotate([0,0, (i-1)*72])\n                translate([handle_d/2 - 1, 0, 12 + i*18])\n                    rotate([90,0,0])\n                        cylinder(d = 5, h = 15, $fn = 16);\n        }\n    }\n    \n    // Grip texture rings\n    for (z = [10 : 5 : handle_l - 15]) {\n        translate([0,0,z])\n            difference() {\n                cylinder(d = handle_d + 0.2, h = 0.8);\n                cylinder(d = handle_d - 0.2, h = 0.8);\n            }\n    }\n}\n\nmodule frame() {\n    // Wire frame connecting roller to handle\n    // Main wire\n    translate([0,0,handle_l - 5])\n        rotate([0,-30,0])\n            cylinder(d = 4, h = 35);\n    \n    // Fork sides\n    for (side = [-1, 1]) {\n        translate([side * (roller_d/2 + 5), 0, handle_l - 5])\n            rotate([0,-30 + side*15,0])\n                cylinder(d = 4, h = 35);\n    }\n    \n    // Fork tips\n    for (side = [-1, 1]) {\n        translate([0, side * (roller_d/2 + 5), 0])\n            rotate([90,0,0])\n                cylinder(d = 3, h = 8);\n    }\n}\n\n// Assembly\nunion() {\n    // Roller assembly\n    roller_sleeve();\n    roller_core();\n    \n    // Frame and handle\n    color(\"silver\") {\n        spindle();\n        frame();\n    }\n    \n    color(\"black\")\n        handle_grip();\n}",
    "renders": true
  },
  {
    "vehicle": "mixers",
    "openscad_code": "// Hand-held stand mixer – medium realism\n// Overall height ≈ 95 mm, footprint 40 mm\n\n$fa = 2;\n$fs = 1;\n\nmodule body() {\n    // Main housing shell\n    hull() {\n        translate([0,0,30]) cube([40,35,60], center=true);\n        translate([0,0,10]) cube([35,30,20], center=true);\n    }\n}\n\nmodule handle() {\n    // Ergonomic grip\n    difference() {\n        translate([0, -25, 55]) rotate([90,0,0]) cylinder(h=25, d=22, $fn=32);\n        translate([0, -25, 68]) rotate([90,0,0]) cylinder(h=30, d=15, $fn=32);\n    }\n    // Trigger button\n    translate([0, -25, 55]) cube([8,4,5], center=true);\n}\n\nmodule motor_cap() {\n    // Top dome with vents\n    translate([0,0,63]) cylinder(h=12, d1=38, d2=35, $fn=64);\n    for(i=[0:5:355]) {\n        rotate([0,0,i]) translate([16,0,65]) cube([2,2,8], center=true);\n    }\n}\n\nmodule beater_barrel() {\n    // Cylindrical nozzle\n    translate([0,0,0]) cylinder(h=15, d=22, $fn=32);\n}\n\nmodule beater() {\n    // Single whisk wire\n    color(\"silver\")\n    for(a=[0:120:240]) {\n        rotate([0,0,a])\n        translate([0,0,-12])\n        for(h=[0:3:20]) {\n            // Helical wire segment\n            translate([7*cos(h*30), 7*sin(h*30), -h]) sphere(d=1.5, $fn=8);\n        }\n    }\n}\n\nmodule base_ring() {\n    // Wide foot for stability\n    translate([0,0,-2]) cylinder(h=4, d=48, $fn=64);\n}\n\nmodule power_cord_stub() {\n    // Short cord tail\n    translate([0,20,20]) rotate([90,0,0]) cylinder(h=20, d=6, $fn=16);\n}\n\nunion() {\n    body();\n    handle();\n    motor_cap();\n    beater_barrel();\n    beater();\n    base_ring();\n    power_cord_stub();\n}",
    "renders": true
  },
  {
    "vehicle": "motorgraders",
    "openscad_code": "// Motorgrader - Realistic style, medium complexity\n// Overall length ~70 mm, designed for 3D printing without support\n\n// General dimensions\nbody_l = 50;\nbody_w = 20;\nbody_h = 10;\ncab_w = 16;\ncab_h = 12;\nwheel_r = 5;\nwheel_w = 3;\n\n// Main body\nmodule main_body() {\n    difference() {\n        // Lower chassis block\n        translate([-body_l/2, -body_w/2, 0])\n            cube([body_l, body_w, body_h]);\n\n        // Engine detail cavity\n        translate([body_l/4, -body_w/2+1, body_h-3])\n            cube([body_l/4, body_w-2, 3]);\n    }\n\n    // Upper engine cover\n    translate([-body_l/4, -body_w/2, body_h])\n        cube([body_l/2, body_w, 3]);\n\n    // Radiator grill\n    translate([body_l/4+1, -body_w/2, body_h+1])\n        cube([2, body_w, 2]);\n\n    // Exhaust pipe\n    translate([body_l/4, -body_w/2-1, body_h+3])\n        cylinder(r=1, h=body_w/2, $fn=8);\n}\n\n// Cabin\nmodule cabin() {\n    difference() {\n        // Main cabin block\n        translate([-body_l/4, -cab_w/2, body_h+3])\n            cube([cab_w, cab_w, cab_h]);\n\n        // Windshield\n        translate([-body_l/4+1, -cab_w/2+1, body_h+cab_h-2])\n            cube([cab_w-2, cab_w-2, 2]);\n\n        // Door windows\n        for (i=[0:1]) {\n            translate([-body_l/4+1+i*7, -cab_w/2-0.1, body_h+5])\n                cube([3, 0.2, 4]);\n        }\n    }\n\n    // Roof beacon\n    translate([0, 0, body_h+cab_h+1])\n        cylinder(r=1.5, h=2, $fn=8);\n}\n\n// Wheels with axles\nmodule wheel() {\n    difference() {\n        cylinder(r=wheel_r, h=wheel_w, $fn=16);\n        translate([0, 0, -0.1])\n            cylinder(r=wheel_r-1, h=wheel_w+0.2, $fn=16);\n    }\n}\n\nmodule wheel_assembly(pos) {\n    translate(pos) {\n        // Axle\n        rotate([90, 0, 0])\n            cylinder(r=1, h=body_w/2+2, $fn=8);\n\n        // Inner wheel\n        translate([0, body_w/2+1, 0])\n            rotate([0, 90, 0])\n                wheel();\n\n        // Outer wheel\n        translate([0, -body_w/2-1, 0])\n            rotate([0, 90, 0])\n                wheel();\n    }\n}\n\n// Blade assembly\nmodule blade_assembly() {\n    // Front blade mount\n    translate([-body_l/2-8, 0, body_h/2])\n        rotate([0, 0, 30])\n            cube([4, 3, 2]);\n\n    // Main blade\n    translate([-body_l/2-15, -15, body_h/2-2])\n        cube([20, 30, 1]);\n\n    // Blade end plates\n    for (y=[-15, 15]) {\n        translate([-body_l/2-15, y, body_h/2-2])\n            cube([1, 2, 4]);\n    }\n\n    // Circle moldboard curve\n    for (i=[0:5]) {\n        translate([-body_l/2-15+i*3, -12, body_h/2-2])\n            rotate([0, 0, -10+i*2])\n                cube([3, 0.5, 1]);\n    }\n}\n\n// Rear ripper\nmodule ripper() {\n    // Ripper mount\n    translate([body_l/2+2, 0, body_h/2])\n        cube([4, 6, 2]);\n\n    // Ripper teeth\n    for (i=[-1:1]) {\n        translate([body_l/2+6, i*2, body_h/2-3])\n            cube([1, 1, 6]);\n    }\n}\n\n// Assemble the motorgrader\nunion() {\n    main_body();\n    cabin();\n    blade_assembly();\n    ripper();\n\n    // Front axle\n    wheel_assembly([-body_l/4, 0, wheel_r]);\n\n    // Mid axle\n    wheel_assembly([0, 0, wheel_r]);\n\n    // Rear axle\n    wheel_assembly([body_l/4, 0, wheel_r]);\n}",
    "renders": true
  },
  {
    "vehicle": "roadrollers",
    "openscad_code": "// Road Roller – medium complexity, printable\n// Overall length ≈ 80 mm, width ≈ 40 mm, height ≈ 40 mm\n\n$fn = 32;\n\nmodule roller_drum(length=35, diam=20, wall=2){\n    // Hollow steel drum with end-caps\n    difference(){\n        cylinder(h=length, d=diam, center=true);\n        cylinder(h=length+0.2, d=diam-2*wall, center=true);\n    }\n    // End caps\n    for (z=[-length/2-0.1, length/2+0.1])\n        translate([0,0,z])\n            cylinder(h=wall, d=diam+1);\n}\n\nmodule wheel(d=10, w=4){\n    // Simple rubber tyre\n    color(\"black\")\n        cylinder(h=w, d=d);\n}\n\nmodule chassis(){\n    // Central frame\n    hull(){\n        // rear engine block\n        translate([0,0,5])\n            cube([22,25,15], center=true);\n        // front cab support\n        translate([-25,0,8])\n            cube([30,20,6], center=true);\n    }\n}\n\nmodule cabin(){\n    // Driver cab\n    translate([-25,0,18])\n    union(){\n        color(\"white\")\n            cube([16,22,14], center=true);\n        // roof\n        translate([0,0,7])\n            cube([16,20,2], center=true);\n        // windows\n        difference(){\n            cube([16,22,14], center=true);\n            translate([0,0,2])\n                cube([14,18,10], center=true);\n        }\n    }\n}\n\nmodule engine_cover(){\n    // Engine hood\n    translate([0,0,26])\n    color(\"yellow\")\n    rotate([0,15,0])\n        cube([20,24,8], center=true);\n}\n\nmodule exhaust(){\n    // Exhaust pipe\n    translate([10,10,26])\n    rotate([0,0,0])\n        cylinder(h=15, d=3);\n    translate([10,10,41])\n        sphere(d=4);\n}\n\nmodule axle_support(y, z){\n    // Small axle brackets\n    translate([0,y,z])\n        cube([5,4,6], center=true);\n}\n\n// Main assembly\ncolor(\"yellow\")\n    union(){\n\n        // Rear single drum\n        translate([22,0,10])\n            roller_drum();\n\n        // Front two wheels\n        for (side=[-1,1])\n            translate([-30, side*15, 5])\n                wheel();\n\n        // Chassis frame\n        chassis();\n\n        // Cabin over front wheels\n        cabin();\n\n        // Engine cover\n        engine_cover();\n\n        // Exhaust\n        exhaust();\n\n        // Axle supports\n        axle_support( 0, 10);\n        axle_support( 0,-10);\n    }",
    "renders": true
  },
  {
    "vehicle": "asphaltpavers",
    "openscad_code": "// Asphalt paver 3D printable model\n// Realistic style, medium complexity\n\n// Overall dimensions\nwheelbase = 40;\nlength = 80;\nwidth = 40;\nheight = 30;\n\n$fn = 30;\n\nmodule main_body() {\n    // Central chassis\n    difference() {\n        translate([0, 0, 8]) cube([length, width, 12], center=true);\n        translate([0, 0, 14]) cube([length-4, width-8, 8], center=true);\n    }\n    \n    // Front hood\n    translate([20, 0, 15]) rotate([0, 30, 0]) cube([20, width-6, 10], center=true);\n    \n    // Rear hopper sides\n    translate([-25, 0, 20]) cube([20, width, 10], center=true);\n    translate([-25, (width/2)+2, 15]) cube([20, 4, 20], center=true);\n    translate([-25, -(width/2)-2, 15]) cube([20, 4, 20], center=true);\n}\n\nmodule operator_cabin() {\n    // Cabin base\n    translate([10, 0, 20]) cube([16, 18, 12], center=true);\n    \n    // Cabin roof\n    translate([10, 0, 28]) cube([18, 20, 2], center=true);\n    \n    // Cabin pillars\n    for(x=[6,14]) {\n        translate([x, (width/2)-6, 24]) cylinder(h=8, d=2);\n        translate([x, -(width/2)+6, 24]) cylinder(h=8, d=2);\n    }\n}\n\nmodule wheels() {\n    // Front wheels\n    for(side=[-1,1]) {\n        translate([wheelbase/2, side*width/2, 4]) {\n            cylinder(h=4, d=6);\n            translate([0, 0, 2]) rotate([90,0,0]) cylinder(h=2, d=6);\n        }\n    }\n    \n    // Rear wheels\n    for(side=[-1,1]) {\n        translate([-wheelbase/2, side*width/2, 4]) {\n            cylinder(h=4, d=8);\n            translate([0, 0, 2]) rotate([90,0,0]) cylinder(h=2, d=8);\n        }\n    }\n}\n\nmodule screed_unit() {\n    // Screed assembly\n    translate([-length/2-5, 0, 4]) {\n        // Main screed plate\n        cube([15, width+10, 2], center=true);\n        \n        // Heating elements\n        translate([-5, 0, 1.5]) cube([2, width+10, 1], center=true);\n        \n        // Side arms\n        for(side=[-1,1]) {\n            translate([0, side*(width/2+6), 8]) {\n                rotate([0, 30, 0]) cube([20, 4, 4], center=true);\n                translate([10, 0, 0]) cylinder(h=4, d=4);\n            }\n        }\n    }\n}\n\nmodule conveyor() {\n    // Rear conveyor belt\n    translate([-25, 0, 12]) {\n        cube([length/2, width-8, 2], center=true);\n        \n        // Conveyor slats\n        for(i=[-10:5:10]) {\n            translate([i, 0, 1]) cube([2, width-8, 1], center=true);\n        }\n    }\n}\n\nmodule exhaust_stack() {\n    // Exhaust pipe\n    translate([15, width/2-4, 20]) {\n        cylinder(h=15, d=3);\n        translate([0, 0, 15]) sphere(d=4);\n    }\n}\n\n// Main assembly\nunion() {\n    main_body();\n    operator_cabin();\n    wheels();\n    screed_unit();\n    conveyor();\n    exhaust_stack();\n}",
    "renders": true
  },
  {
    "vehicle": "concretemixers",
    "openscad_code": "// Realistic Concrete Mixer - Medium Complexity (≈120 lines)\n// 3D-printable, no overhang > 45°, walls ≥ 2 mm\n// Overall size ≈ 80 mm\n\n// Parameters ----------------------------------------------------\n$fn = 36;           // Smoother curves\nwall = 2;           // Wall thickness for printing\nscale = 0.8;        // Global scale to fit 80 mm\n\n// Colors for preview (ignored by slicer)\ncolor_chassis = [0.3,0.3,0.3];\ncolor_drum = [0.6,0.6,0.6];\ncolor_support = [0.2,0.2,0.2];\n\n// Main assembly -------------------------------------------------\nmodule concrete_mixer(){\n    scale(scale)\n    union(){\n        chassis();\n        translate([0,0,10]) drum();\n        translate([-20,0,0]) support_frame();\n    }\n}\n\n// Chassis with wheels ------------------------------------------\nmodule chassis(){\n    color(color_chassis)\n    union(){\n        // Main frame\n        cube([60,30,8], center=true);\n        \n        // Cab\n        translate([-20,0,8-4])\n            cube([15,28,12], center=true);\n        \n        // Wheels\n        for(side=[-1,1])\n            translate([side*25,0,-4])\n            rotate([0,90,0])\n            cylinder(h=6, d1=12, d2=12);\n    }\n}\n\n// Rotating drum -------------------------------------------------\nmodule drum(){\n    color(color_drum)\n    rotate([0,-30,0]) // Tilted 30°\n    union(){\n        // Drum body\n        cylinder(h=50, d1=30, d2=22);\n        \n        // Outer rings\n        for(pos=[5,25,45])\n            translate([0,0,pos])\n            cylinder(h=3, d1=34, d2=34);\n        \n        // Inner blades\n        rotate([0,0,45])\n        for(i=[0:3])\n            rotate([0,0,i*90])\n            translate([-3,0,25])\n            cube([6,30,2]);\n    }\n}\n\n// Support frame -------------------------------------------------\nmodule support_frame(){\n    color(color_support)\n    translate([20,0,0])\n    union(){\n        // Left upright\n        cube([4,4,35], center=true);\n        \n        // Right upright\n        translate([30,0,0])\n        cube([4,4,35], center=true);\n        \n        // Cross bar\n        translate([15,0,12])\n        cube([34,3,3], center=true);\n        \n        // Engine box\n        translate([15,0,5])\n        cube([20,20,8], center=true);\n    }\n}\n\n// Render --------------------------------------------------------\nconcrete_mixer();",
    "renders": true
  },
  {
    "vehicle": "wheelloaders",
    "openscad_code": "// Wheel Loader - Realistic Style, Medium Complexity\n// Approx 75mm long, 45mm wide, 40mm tall\n\n// Main assembly\nmodule wheel_loader() {\n    // Rear frame and engine compartment\n    union() {\n        // Main frame rails\n        translate([0, 0, 8]) cube([50, 30, 8], center=true);\n        \n        // Engine compartment\n        translate([-20, 0, 18]) cube([25, 28, 20], center=true);\n        \n        // Operator cab\n        translate([5, 0, 28]) cube([20, 24, 20], center=true);\n        \n        // Roof\n        translate([5, 0, 40]) cube([18, 22, 2], center=true);\n    }\n    \n    // Front frame\n    translate([30, 0, 8]) cube([20, 25, 8], center=true);\n    \n    // Wheels - 4 total\n    for(x = [-20, 20]) {\n        for(y = [-12, 12]) {\n            translate([x, y, 0]) wheel();\n        }\n    }\n    \n    // Lift arms\n    translate([30, 0, 16]) union() {\n        // Left arm\n        rotate([0, -20, 0]) \n            translate([-5, 12, 0]) \n            cube([35, 4, 6]);\n        \n        // Right arm\n        rotate([0, -20, 0]) \n            translate([-5, -12, 0]) \n            cube([35, 4, 6]);\n    }\n    \n    // Loader bucket\n    translate([50, 0, 28]) bucket();\n    \n    // Hydraulic cylinders\n    hydraulic_cylinders();\n    \n    // Counterweight\n    translate([-35, 0, 12]) cube([15, 25, 12], center=true);\n    \n    // Exhaust stack\n    translate([-25, 12, 38]) cylinder(h=8, d=3);\n}\n\n// Wheel module\nmodule wheel() {\n    difference() {\n        union() {\n            // Tire\n            cylinder(h=8, d=12, center=true);\n            \n            // Rim\n            translate([0, 0, 4]) cylinder(h=2, d=8, center=true);\n        }\n        \n        // Center hole\n        translate([0, 0, 0]) cylinder(h=10, d=3, center=true);\n    }\n}\n\n// Bucket module\nmodule bucket() {\n    difference() {\n        union() {\n            // Main bucket body\n            translate([0, 0, 0]) cube([20, 30, 15], center=true);\n            \n            // Curved front\n            translate([10, 0, -7.5]) \n                rotate([0, 90, 0]) \n                cylinder(h=30, d=15);\n            \n            // Side plates\n            translate([0, 15, 0]) cube([20, 2, 15], center=true);\n            translate([0, -15, 0]) cube([20, 2, 15], center=true);\n        }\n        \n        // Cutaway for bucket shape\n        translate([0, 0, 8]) cube([25, 35, 20], center=true);\n    }\n}\n\n// Hydraulic cylinders\nmodule hydraulic_cylinders() {\n    // Main lift cylinders\n    for(side = [-1, 1]) {\n        translate([15, side * 15, 12]) {\n            // Base\n            cylinder(h=4, d=6);\n            // Rod\n            translate([0, 0, 4]) cylinder(h=12, d=3);\n            // End\n            translate([0, 0, 16]) sphere(d=4);\n        }\n    }\n    \n    // Bucket tilt cylinder\n    translate([45, 0, 20]) {\n        cylinder(h=3, d=5);\n        translate([0, 0, 3]) cylinder(h=8, d=2.5);\n        translate([0, 0, 11]) sphere(d=3);\n    }\n}\n\n// Render the model\nwheel_loader();",
    "renders": true
  },
  {
    "vehicle": "trackloaders",
    "openscad_code": "// Track Loader - Realistic Medium Complexity\n// Dimensions: 70mm long, 35mm wide, 35mm tall\n\n// Main colors\ntrack_color = [0.2, 0.2, 0.2];\nbody_color = [0.8, 0.8, 0.2];\nmetal_color = [0.5, 0.5, 0.5];\nwindow_color = [0.3, 0.5, 0.8];\n\n// Track module\nmodule track() {\n    color(track_color)\n    union() {\n        // Main track body\n        translate([-25, -17, 0])\n            cube([50, 4, 3]);\n        \n        // Track pads\n        for (i = [-20:5:20]) {\n            translate([i, -18, 0])\n                cube([4, 2, 1.5]);\n        }\n        \n        // Drive sprocket\n        translate([22, -15, 3])\n            rotate([0, 0, 0])\n                cylinder(h=6, r=6, $fn=8);\n        \n        // Idler wheel\n        translate([-22, -15, 3])\n            cylinder(h=6, r=5, $fn=8);\n    }\n}\n\n// Main body module\nmodule body() {\n    color(body_color)\n    union() {\n        // Lower chassis\n        translate([-20, -15, 3])\n            cube([40, 30, 8]);\n        \n        // Engine compartment\n        translate([-15, -12, 11])\n            cube([30, 24, 8]);\n        \n        // Operator cab\n        translate([-10, -10, 19])\n            cube([20, 20, 12]);\n        \n        // Cab roof\n        translate([-12, -12, 31])\n            cube([24, 24, 2]);\n    }\n}\n\n// Windows\nmodule windows() {\n    color(window_color)\n    union() {\n        // Front window\n        translate([-9, -10, 25])\n            cube([18, 0.5, 5]);\n        \n        // Side windows\n        translate([-10, -6, 25])\n            cube([0.5, 12, 5]);\n        translate([9.5, -6, 25])\n            cube([0.5, 12, 5]);\n    }\n}\n\n// Loader arm\nmodule loader_arm() {\n    color(metal_color)\n    union() {\n        // Base pivot\n        translate([0, 0, 19])\n            rotate([0, 90, 0])\n                cylinder(h=20, r=2);\n        \n        // Main arm\n        translate([10, 0, 19])\n            rotate([0, -30, 0])\n                cube([25, 4, 4]);\n        \n        // Arm extension\n        translate([30, 0, 8])\n            rotate([0, 30, 0])\n                cube([20, 3, 3]);\n        \n        // Bucket\n        translate([45, 0, 12])\n            rotate([0, 45, 0])\n                difference() {\n                    cube([15, 12, 6]);\n                    translate([5, -1, 3])\n                        rotate([0, 30, 0])\n                            cube([15, 14, 6]);\n                }\n    }\n}\n\n// Exhaust pipe\nmodule exhaust() {\n    color(metal_color)\n    union() {\n        // Pipe\n        translate([-5, 10, 19])\n            cylinder(h=12, r=1.5);\n        \n        // Muffler\n        translate([-5, 10, 31])\n            cube([4, 2, 3]);\n    }\n}\n\n// Headlights\nmodule headlights() {\n    color([1, 1, 0.8])\n    union() {\n        translate([-15, -12, 13])\n            sphere(r=1.5);\n        translate([-15, 12, 13])\n            sphere(r=1.5);\n    }\n}\n\n// Assembly\nunion() {\n    // Left track\n    track();\n    \n    // Right track (mirrored)\n    mirror([0, 1, 0])\n        track();\n    \n    // Main body\n    body();\n    \n    // Windows\n    windows();\n    \n    // Loader arm\n    loader_arm();\n    \n    // Exhaust\n    exhaust();\n    \n    // Headlights\n    headlights();\n}",
    "renders": true
  },
  {
    "vehicle": "mineloaders",
    "openscad_code": "// Mini-loaders – realistic style, medium complexity, 3D-printable\n// Approx. 80 mm long, 55 mm wide, 48 mm high\n\n$fa = 2; $fs = 0.5;\n\n// Overall scale factor\nscale_factor = 0.9;\n\nmodule main_assembly() {\n    // Main chassis\n    difference() {\n        translate([0, 0, 12])\n            cube([72, 46, 18], center = true);\n        // Hollow interior cavity\n        translate([0, 0, 12])\n            cube([66, 40, 16], center = true);\n    }\n\n    // Front frame / counterweight\n    translate([0, 0, 6])\n        cube([30, 38, 12], center = true);\n\n    // Rear engine cover\n    difference() {\n        translate([-28, 0, 24])\n            cube([20, 34, 15], center = true);\n        translate([-28, 0, 31])\n            cube([16, 30, 9], center = true);\n    }\n\n    // Roof\n    translate([-10, 0, 33])\n        cube([36, 40, 3], center = true);\n}\n\nmodule wheels() {\n    module single_wheel(pos) {\n        translate(pos)\n        rotate([0, 90, 0])\n        difference() {\n            cylinder(h = 10, d = 22, center = true);\n            cylinder(h = 12, d = 10, center = true);\n        }\n    }\n    positions = [[25,  18, 6],\n                 [25, -18, 6],\n                 [-25,  18, 6],\n                 [-25, -18, 6]];\n    for (p = positions) single_wheel(p);\n}\n\nmodule lift_arm() {\n    // Left arm\n    translate([0, 21, 24])\n        rotate([0, 0, -15])\n        cube([55, 4, 6], center = false);\n    // Right arm\n    translate([0, -21, 24])\n        rotate([0, 0, 15])\n        cube([55, 4, 6], center = false);\n}\n\nmodule bucket() {\n    difference() {\n        // Main bucket shell\n        translate([48, 0, 35])\n            rotate([0, -30, 0])\n            cube([32, 35, 20], center = true);\n        // Inside cavity\n        translate([48+10, 0, 35])\n            rotate([0, -30, 0])\n            cube([28, 30, 16], center = true);\n    }\n    // Bottom cutting edge\n    translate([48+15, 0, 23])\n        rotate([0, -30, 0])\n        cube([34, 38, 3], center = true);\n}\n\nmodule cabin() {\n    // Cabin shell\n    difference() {\n        translate([-10, 0, 25])\n            cube([30, 38, 16], center = true);\n        // Door opening\n        translate([-10, 20, 25])\n            cube([26, 2, 14], center = true);\n    }\n    // Windshield\n    translate([-10, 0, 31])\n        cube([28, 34, 1], center = true);\n}\n\n// Build the model\nscale(scale_factor)\nunion() {\n    main_assembly();\n    wheels();\n    lift_arm();\n    bucket();\n    cabin();\n}",
    "renders": true
  },
  {
    "vehicle": "logloaders",
    "openscad_code": "// Logloader 3D printable model\n// Realistic style, medium complexity\n\n// Overall dimensions\nloader_length = 80;\nloader_width = 40;\nloader_height = 45;\n\n// Track dimensions\ntrack_width = 8;\ntrack_height = 6;\ntrack_length = 70;\ntrack_segment = 5;\n\n// Main body dimensions\nbody_length = 35;\nbody_width = 30;\nbody_height = 20;\n\n// Cab dimensions\ncab_width = 20;\ncab_height = 15;\ncab_depth = 18;\n\n// Boom dimensions\nboom_length = 50;\nboom_width = 5;\nboom_height = 4;\n\n// Grapple dimensions\ngrapple_width = 12;\ngrapple_height = 8;\ngrapple_depth = 10;\n\n// Wheel/roller dimensions\nroller_diameter = 6;\nroller_width = 7;\n\n// Track module\nmodule track() {\n    for (i = [0:track_segment:track_length-track_segment]) {\n        translate([i-track_length/2, 0, 0])\n            cube([track_segment, track_width, track_height], center=true);\n    }\n}\n\n// Roller module\nmodule roller() {\n    rotate([90, 0, 0])\n        cylinder(h=roller_width, d=roller_diameter, center=true, $fn=12);\n}\n\n// Create left track assembly\nmodule left_track() {\n    translate([-loader_width/2 - track_width/2, 0, roller_diameter/2])\n    union() {\n        track();\n        \n        // Front roller\n        translate([track_length/2 - roller_diameter, 0, 0])\n            roller();\n            \n        // Rear roller\n        translate([-track_length/2 + roller_diameter, 0, 0])\n            roller();\n            \n        // Middle support rollers\n        translate([0, 0, 0])\n            roller();\n    }\n}\n\n// Create right track assembly\nmodule right_track() {\n    mirror([1, 0, 0])\n        left_track();\n}\n\n// Main body with engine compartment\nmodule main_body() {\n    translate([0, 0, roller_diameter/2 + track_height/2 + body_height/2])\n    union() {\n        // Main chassis\n        cube([body_length, body_width, body_height], center=true);\n        \n        // Engine compartment\n        translate([body_length/2 - 5, 0, body_height/2])\n            cube([10, body_width - 4, 8], center=true);\n            \n        // Counterweight\n        translate([-body_length/2 + 5, 0, -body_height/2])\n            cube([10, body_width - 4, 12], center=true);\n    }\n}\n\n// Operator cab\nmodule cab() {\n    translate([0, 0, roller_diameter/2 + track_height + body_height + cab_height/2])\n    union() {\n        // Main cab structure\n        cube([cab_depth, cab_width, cab_height], center=true);\n        \n        // Roof\n        translate([0, 0, cab_height/2 + 1])\n            cube([cab_depth + 2, cab_width + 2, 2], center=true);\n            \n        // Door frame\n        translate([cab_depth/2 - 1, 0, 0])\n            cube([2, cab_width - 4, cab_height - 2], center=true);\n    }\n}\n\n// Boom assembly\nmodule boom() {\n    translate([body_length/2 - 5, 0, roller_diameter/2 + track_height + body_height + 5])\n    rotate([0, -30, 0])\n    union() {\n        // Main boom\n        cube([boom_length, boom_width, boom_height], center=true);\n        \n        // Boom support cylinders\n        translate([-boom_length/2 + 10, 0, boom_height/2 + 2])\n            cylinder(h=15, d=3, center=false, $fn=8);\n            \n        // Second boom section\n        translate([boom_length/2 - 5, 0, 0])\n            rotate([0, 15, 0])\n            cube([boom_length * 0.7, boom_width * 0.8, boom_height * 0.8], center=true);\n    }\n}\n\n// Grapple attachment\nmodule grapple() {\n    translate([body_length/2 - 5 + boom_length * 0.9, 0, roller_diameter/2 + track_height + body_height + 5 + boom_length * sin(-30) * 0.9])\n    rotate([0, 15, 0])\n    union() {\n        // Grapple base\n        cube([grapple_depth, grapple_width, grapple_height], center=true);\n        \n        // Grapple arms\n        translate([grapple_depth/2 + 2, 0, 0])\n            rotate([0, 0, 30])\n            cube([8, 2, grapple_height - 2], center=true);\n            \n        translate([grapple_depth/2 + 2, 0, 0])\n            rotate([0, 0, -30])\n            cube([8, 2, grapple_height - 2], center=true);\n            \n        translate([grapple_depth/2 + 2, grapple_width/2 - 2, 0])\n            rotate([0, 30, 0])\n            cube([6, 2, 2], center=true);\n            \n        translate([grapple_depth/2 + 2, -grapple_width/2 + 2, 0])\n            rotate([0, 30, 0])\n            cube([6, 2, 2], center=true);\n    }\n}\n\n// Main assembly\nunion() {\n    left_track();\n    right_track();\n    main_body();\n    cab();\n    boom();\n    grapple();\n}",
    "renders": true
  },
  {
    "vehicle": "scraploaders",
    "openscad_code": "// Scraploader (medium-realistic)\n// A tracked material-handler with a lifting arm and hydraulic grapple\n\n// Overall dimensions\ntrack_width = 12;\ntrack_height = 6;\ntrack_length = 40;\nbody_w = 32;\nbody_l = 28;\nbody_h = 18;\ncab_h = 14;\ncab_w = 16;\ncab_l = 18;\narm_len = 45;\narm_w = 4;\narm_h = 4;\ngrapple_w = 14;\ngrapple_h = 8;\ngrapple_d = 10;\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Tracks module\nmodule tracks() {\n    for (side = [-1, 1]) {\n        translate([side * (body_w / 2 + track_width / 2 + 2), 0, track_height / 2]) {\n            difference() {\n                // Outer track shoe\n                cube([track_width, track_length, track_height], center = true);\n                // Inner hollow\n                translate([0, 0, -wall / 2])\n                    cube([track_width - wall * 2, track_length - wall * 2, track_height], center = true);\n            }\n            // Road wheels (simple cylinders)\n            for (i = [-1, -0.3, 0.3, 1]) {\n                translate([0, i * track_length / 2.5, track_height / 2])\n                    cylinder(h = track_width, r = track_height / 2.2, center = true);\n            }\n        }\n    }\n}\n\n// Lower body / turntable\nmodule lower_body() {\n    difference() {\n        // Main block\n        cube([body_w, body_l, body_h], center = true);\n        // Hollow cavity\n        translate([0, 0, -wall / 2])\n            cube([body_w - wall * 2, body_l - wall * 2, body_h], center = true);\n    }\n}\n\n// Cab module\nmodule cab() {\n    difference() {\n        // Main cab\n        translate([0, body_l / 2 - cab_l / 2, body_h / 2 + cab_h / 2])\n            cube([cab_w, cab_l, cab_h], center = true);\n        // Windshield cutout\n        translate([0, cab_l / 2 - 1, cab_h / 2 - 2])\n            cube([cab_w - 6, 2, cab_h - 4], center = true);\n    }\n    // Roof detail\n    translate([0, body_l / 2 - cab_l / 2, body_h / 2 + cab_h + 1])\n        cube([cab_w - 4, cab_l - 4, 2], center = true);\n}\n\n// Arm segments\nmodule arm() {\n    // Base arm\n    translate([0, body_l / 2 - 2, body_h + 2])\n        rotate([0, -30, 0])\n            cube([arm_len / 2, arm_w, arm_h], center = true);\n    // Second arm segment\n    translate([arm_len / 2 * 0.87, body_l / 2 + arm_len / 4 - 2, body_h + 2 + arm_len / 2 * 0.5])\n        rotate([0, 30, 0])\n            cube([arm_len / 2, arm_w, arm_h], center = true);\n}\n\n// Grapple / claw\nmodule grapple() {\n    translate([arm_len * 0.87, body_l / 2 + arm_len / 2.5, body_h + 2 + arm_len * 0.5])\n        rotate([0, 90, 0]) {\n            // Central hub\n            cylinder(h = grapple_w / 3, r = grapple_w / 4, center = true);\n            // Two opposing claws\n            for (ang = [-30, 30]) {\n                rotate([0, ang, 0])\n                    translate([0, 0, grapple_h / 2])\n                        cube([grapple_d, grapple_w / 2, grapple_h], center = true);\n            }\n        }\n}\n\n// Assembly\ntracks();\nlower_body();\ncab();\narm();\ngrapple();",
    "renders": true
  },
  {
    "vehicle": "pipelayers",
    "openscad_code": "// Pipe-layer (side-boom) model – OpenSCAD, medium complexity\n// Designed for FDM printing: no steep overhangs, 2 mm wall thickness everywhere\n\n$fa = 1; $fs = 1;\n\n// Overall scale factor – whole model ends up ~80 mm long\nSCALE = 0.5;\n\n// Track module – 14 plates with round pins\nmodule track_segment(length = 55, width = 14, thick = 6) {\n    plate_w = width - 2;      // inner plate width\n    plate_h = thick * 0.9;\n    pin_d   = 3;\n    for(i=[0:length/4.5-1]) {\n        translate([i*4.5-length/2+2.25,0,0])\n            difference(){\n                cube([4,plate_w,plate_h], center=true);\n                cylinder(h=plate_w+2, d=pin_d, center=true);\n            }\n    }\n}\n\n// Lower frame with two tracks\nmodule undercarriage() {\n    color(\"gray\")\n    union(){\n        // Left track\n        translate([-20,0,4]) track_segment();\n        // Right track\n        translate([ 20,0,4]) track_segment();\n\n        // Main beams between tracks\n        cube([40,14,6], center=true);\n    }\n}\n\n// Operator cabin – simple box with windows\nmodule cabin() {\n    color(\"yellow\")\n    difference(){\n        translate([0,0,18]) cube([30,24,18], center=true);\n        // Front window\n        translate([0,12.1,18]) cube([22,0.5,10], center=true);\n        // Side windows\n        translate([15.1,0,18]) cube([0.5,14,10], center=true);\n        translate([-15.1,0,18]) cube([0.5,14,10], center=true);\n    }\n}\n\n// Engine housing behind cabin\nmodule engine_hood() {\n    color(\"gray\")\n    difference(){\n        translate([0,0,30]) cube([28,22,12], center=true);\n        translate([0,0,30]) cube([26,20,13], center=true); // hollow\n    }\n}\n\n// Boom – two articulated sections\nmodule boom() {\n    color(\"black\")\n    union(){\n        // Base boom – attached to turntable\n        translate([0,-10,38])\n            rotate([0,-15,0])\n            cube([6,50,6], center=true);\n\n        // Second boom section – shorter\n        translate([0,-40,28])\n            rotate([0,-25,0])\n            cube([5,35,5], center=true);\n\n        // Hoist cable (thin cylinder)\n        translate([0,-55,22])\n            rotate([90,0,0])\n            cylinder(h=50, d=1, center=true);\n    }\n}\n\n// Counterweight at rear\nmodule counterweight() {\n    color(\"gray\")\n    translate([0,20,34])\n        cube([30,12,12], center=true);\n}\n\n// Turntable between frame and superstructure\nmodule turntable() {\n    color(\"black\")\n    cylinder(h=4, d=36, center=true);\n}\n\n// Assemble scaled model\nscale(SCALE)\nunion(){\n    undercarriage();\n    translate([0,0,7]) turntable();\n    translate([0,0,11]) cabin();\n    translate([0,0,11]) engine_hood();\n    translate([0,0,11]) counterweight();\n    translate([0,0,11]) boom();\n}",
    "renders": true
  },
  {
    "vehicle": "draglines",
    "openscad_code": "// Realistic medium-complexity dragline excavator\n// Designed for 3D printing, no overhangs, recognizable features\n\n// Main parameters\n$fn = 32;  // Smooth curves\nbase_width = 30;\nbase_length = 50;\ntrack_height = 8;\ncab_height = 25;\nboom_length = 90;\nboom_width = 8;\ntower_height = 35;\nbucket_width = 12;\nbucket_depth = 8;\n\n// Track module\nmodule track() {\n    difference() {\n        // Track body\n        cube([base_length, track_height, 10]);\n        // Track links\n        for (i = [0:4:base_length-8]) {\n            translate([i+2, track_height-1, 5])\n                cube([4, 2, 8]);\n        }\n    }\n}\n\n// Main base with tracks\nmodule base_assembly() {\n    union() {\n        // Left track\n        translate([-base_width/2 - track_height/2, 0, 0])\n            rotate([0, 0, 90])\n            track();\n        \n        // Right track\n        translate([base_width/2 + track_height/2, 0, 0])\n            rotate([0, 0, 90])\n            track();\n        \n        // Center platform\n        translate([0, 0, 10])\n            cube([base_width, base_length, 5]);\n    }\n}\n\n// Revolving cab\nmodule cab() {\n    union() {\n        // Cab body\n        translate([0, 0, 15])\n            cylinder(h = cab_height, r = 15);\n        \n        // Cab roof\n        translate([0, 0, 15+cab_height])\n            cylinder(h = 5, r1 = 15, r2 = 18);\n        \n        // Operator cabin\n        translate([10, 0, 20])\n            cube([15, 12, 10]);\n    }\n}\n\n// Boom assembly\nmodule boom() {\n    union() {\n        // Main boom\n        translate([0, 0, 40])\n            rotate([0, -30, 0])\n            cube([boom_length, boom_width, boom_width]);\n        \n        // Boom tip pulley\n        translate([boom_length-5, 0, 40-boom_length*sin(30)])\n            rotate([90, 0, 0])\n            cylinder(h = boom_width+2, r = 4);\n    }\n}\n\n// Tower/mast\nmodule tower() {\n    union() {\n        // Main tower\n        translate([0, 0, 40])\n            rotate([0, 10, 0])\n            cube([10, 6, tower_height]);\n        \n        // Tower support cables\n        for (angle = [30:120:90]) {\n            rotate([0, 0, angle])\n            translate([0, 0, 40])\n                cylinder(h = tower_height*1.2, r = 0.5);\n        }\n    }\n}\n\n// Drag bucket\nmodule bucket() {\n    difference() {\n        // Bucket body\n        translate([boom_length-5, 0, 20])\n            rotate([0, 30, 0])\n            cube([bucket_width, bucket_depth, bucket_width]);\n        \n        // Bucket cavity\n        translate([boom_length-5, -2, 20])\n            rotate([0, 30, 0])\n            cube([bucket_width-2, bucket_depth-1, bucket_width-2]);\n    }\n}\n\n// Drag cables\nmodule cables() {\n    // Main hoist cable\n    translate([boom_length-5, 0, 40-boom_length*sin(30)])\n        rotate([90, 0, 0])\n        cylinder(h = 20, r = 0.5);\n    \n    // Drag rope\n    translate([0, 0, 40])\n        rotate([90, 0, 0])\n        cylinder(h = boom_length*cos(30), r = 0.5);\n}\n\n// Assemble complete dragline\nunion() {\n    base_assembly();\n    cab();\n    boom();\n    tower();\n    bucket();\n    cables();\n}",
    "renders": true
  },
  {
    "vehicle": "shovels",
    "openscad_code": "// Realistic medium-detail shovel (≈90 mm total length) – printable without support\n// All parts sized for 0.4 mm nozzle / 0.2 mm layer height\n\n$fn = 36;               // smooth cylinders & spheres\n\n// Overall dimensions (mm)\nblade_len = 45;\nblade_wid = 30;\nhandle_len = 65;\nhandle_dia = 6;\nshaft_dia = 9;\ngrip_len = 30;\n\n// Wall thickness for printing\nwall = 1.2;\n\nmodule blade() {\n    // Main sheet – slightly curved back\n    difference() {\n        hull() {\n            translate([0, 0, -blade_wid/2])\n                cube([blade_len, wall, blade_wid], center=true);\n            translate([blade_len*0.8, 0, -blade_wid/2])\n                cube([blade_len*0.2, wall+1, blade_wid*0.9], center=true);\n        }\n        // Taper tip\n        translate([blade_len, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=blade_wid*1.5, r=blade_wid*0.8, center=true);\n    }\n\n    // Strengthening ribs underneath\n    for(y = [-blade_wid/3, 0, blade_wid/3]) {\n        translate([blade_len/2, -wall/2, y])\n            cube([blade_len*0.9, wall+1, 1.5], center=true);\n    }\n}\n\nmodule shaft() {\n    // Straight pipe with slight taper\n    cylinder(h=handle_len, d1=shaft_dia, d2=handle_dia, center=false);\n    // Hollow core\n    translate([0, 0, -1])\n        cylinder(h=handle_len+2, d=shaft_dia-wall*2, center=false);\n}\n\nmodule grip() {\n    // Ergonomic T-handle\n    union() {\n        // Vertical socket\n        cylinder(h=grip_len*0.4, d=handle_dia+wall, center=false);\n        // Horizontal bar\n        translate([0, 0, grip_len*0.3])\n            rotate([90, 0, 0])\n                cylinder(h=grip_len, d=handle_dia+wall, center=true);\n    }\n}\n\nmodule shovel() {\n    union() {\n        // Blade in XY plane\n        blade();\n        // Shaft along Z\n        translate([0, wall/2, 0])\n            rotate([90, 0, 0])\n                shaft();\n        // Grip at top\n        translate([0, wall/2, handle_len])\n            rotate([90, 0, 0])\n                grip();\n    }\n}\n\nshovel();",
    "renders": true
  },
  {
    "vehicle": "bucketwheels",
    "openscad_code": "// Realistic Bucket-Wheel Excavator Head\n// Medium complexity, 3D-printable, ~70 mm diameter wheel\n\n$fa = 2; $fs = 0.5;  // Nice curved surfaces\n\n// Overall scale factor: 1 unit = 1 mm\nmodule bucketwheel_assembly() {\n    // Central hub\n    hub();\n    \n    // 8 identical buckets\n    for(a=[0:45:315])\n        rotate([0,0,a])\n            translate([25,0,0])\n                bucket();\n    \n    // Outer rim for strength\n    rim();\n}\n\n// Central hub with keyed shaft hole\nmodule hub() {\n    difference() {\n        union() {\n            // Main hub disc\n            cylinder(h=15, d=20, center=true);\n            \n            // Reinforcement rings\n            translate([0,0,-7.5])\n                cylinder(h=3, d=22, center=true);\n            translate([0,0,7.5])\n                cylinder(h=3, d=22, center=true);\n        }\n        // 6 mm D-shaft hole\n        rotate([0,90,0])\n            cylinder(h=25, d=6.2, center=true);\n        // Keyway\n        rotate([0,90,0])\n            translate([0,3.1,0])\n                cube([25,1.2,6.2], center=true);\n    }\n}\n\n// Single scooping bucket\nmodule bucket() {\n    difference() {\n        union() {\n            // Main bowl\n            translate([0,0,5])\n                rotate([0,0,0])\n                    scale([1, 0.8, 0.6])\n                        sphere(d=18, $fn=32);\n            \n            // Back plate\n            translate([0,0,-2])\n                cube([16, 14, 4], center=true);\n            \n            // Side gussets\n            translate([0,7,2])\n                cube([16, 2, 6], center=true);\n            translate([0,-7,2])\n                cube([16, 2, 6], center=true);\n                \n            // Mounting strut to rim\n            translate([9,0,0])\n                cube([18, 10, 8], center=true);\n        }\n        \n        // Cut away front to form scoop\n        translate([-5,0,5])\n            cube([20, 20, 20], center=true);\n            \n        // Drain / lightening holes\n        translate([0,0,2])\n            cylinder(h=10, d=3, center=true);\n    }\n}\n\n// Outer reinforcing ring\nmodule rim() {\n    difference() {\n        cylinder(h=12, d=70, center=true);\n        cylinder(h=14, d=66, center=true);\n    }\n}\n\n// Build the model\nbucketwheel_assembly();",
    "renders": true
  },
  {
    "vehicle": "stackers",
    "openscad_code": "// Realistic, medium-complexity “stackers” – a 5-layer interlocking ring-and-post set\n// All dimensions in mm.  Designed for FDM printing with 0.4 mm nozzle & 0.2 mm layer height\n// No overhang > 45°, all walls ≥ 1 mm\n\n// ---------- CONFIGURATION ----------\nlayers        = 5;               // number of rings\nbase_h        = 8;               // thickness of the bottom base plate\nring_h        = 12;              // height of each ring\npost_clear    = 0.5;             // clearance for posts inside rings\nwall_t        = 2;               // wall thickness for rings & posts\nbase_r        = 45;              // outer radius of the base plate\nring_step     = 7;               // outer radius step between layers\nknurl_h       = 0.5;             // height of knurling ridges\nknurl_step    = 2.5;             // spacing between knurl ridges\n$fn           = 64;              // circle resolution\n\n// ---------- DERIVED ----------\nmodule ring(od, id, h) {\n    difference() {\n        cylinder(h=h, d=od);\n        translate([0,0,-0.01]) cylinder(h=h+0.02, d=id);\n    }\n}\n\n// add external knurling for grip\nmodule knurled_ring(od, id, h) {\n    difference() {\n        // outer body\n        cylinder(h=h, d=od);\n        // inner hole\n        translate([0,0,-0.01]) cylinder(h=h+0.02, d=id);\n        // grip grooves\n        for(i=[0:h/knurl_step]) {\n            translate([0,0,i*knurl_step])\n                cube([od+2, knurl_step/2, knurl_h], center=true);\n        }\n    }\n}\n\n// central post that locks the layers\nmodule post(od, h) {\n    cylinder(h=h, d=od);\n}\n\n// ---------- MAIN ----------\nunion() {\n    // base plate\n    difference() {\n        cylinder(h=base_h, d=base_r*2);\n        translate([0,0,-0.01]) cylinder(h=base_h+0.02, d=base_r*2-wall_t*2);\n    }\n\n    // stacked layers\n    for(i=[0:layers-1]) {\n        h_start = base_h + i*ring_h;\n        od = base_r*2 - i*ring_step*2;\n        id = base_r*2 - (i+1)*ring_step*2 - wall_t*2;\n\n        // ring\n        translate([0,0,h_start])\n            knurled_ring(od, id, ring_h);\n\n        // post that plugs into the ring above\n        post_od = id - post_clear*2;\n        if(i < layers-1) {\n            translate([0,0,h_start+ring_h-wall_t])\n                post(post_od, ring_h+wall_t);\n        }\n    }\n\n    // optional embossed text on top layer\n    translate([0,0,base_h+layers*ring_h+1])\n        rotate([0,0,180])\n            linear_extrude(height=1.5)\n                text(\"STACK\", size=8, halign=\"center\", valign=\"center\");\n}",
    "renders": true
  },
  {
    "vehicle": "reclaimers",
    "openscad_code": "// Reclaimer model - realistic medium complexity\n// Size: 80mm length, 30mm width, 35mm height\n\n$fn = 32;\n\n// Main body module\nmodule reclaimer_body() {\n    // Main chassis\n    difference() {\n        cube([70, 25, 20], center=true);\n        translate([0, 0, 10])\n            cube([68, 23, 20], center=true);\n    }\n    \n    // Front bumper\n    translate([-35, 0, -10])\n        cube([5, 26, 15], center=true);\n    \n    // Rear counterweight\n    translate([35, 0, -5])\n        cube([10, 20, 15], center=true);\n}\n\n// Conveyor system\nmodule conveyor() {\n    // Main boom\n    translate([0, 0, 15])\n        rotate([0, 20, 0])\n        cube([60, 8, 6], center=true);\n    \n    // Boom supports\n    translate([-10, -12, 10])\n        rotate([45, 0, 0])\n        cylinder(h=15, r=2);\n    translate([-10, 12, 10])\n        rotate([45, 0, 0])\n        cylinder(h=15, r=2);\n}\n\n// Bucket wheel\nmodule bucket_wheel() {\n    // Wheel hub\n    translate([-35, 0, 20])\n        rotate([0, 90, 0])\n        cylinder(h=15, r=8);\n    \n    // Buckets\n    for(i=[0:11]) {\n        rotate([0, 0, i*30])\n        translate([-35, 0, 20])\n        rotate([0, 90, 0])\n        translate([12, 0, 0])\n        cube([6, 8, 4], center=true);\n    }\n}\n\n// Tracks\nmodule tracks() {\n    // Left track\n    translate([0, -15, -15])\n        cube([65, 8, 10]);\n    \n    // Right track\n    translate([0, 15, -15])\n        cube([65, 8, 10]);\n    \n    // Track pads\n    for(x=[-30:5:30]) {\n        translate([x, -15, -10])\n            cube([4, 10, 2]);\n        translate([x, 15, -10])\n            cube([4, 10, 2]);\n    }\n}\n\n// Cabin\nmodule cabin() {\n    translate([15, 0, 10])\n        cube([15, 18, 15], center=true);\n    \n    // Cabin roof\n    translate([15, 0, 18])\n        cube([16, 20, 3], center=true);\n    \n    // Windows\n    translate([23, 0, 12])\n        cube([2, 12, 8], center=true);\n}\n\n// Support structure\nmodule support_structure() {\n    // Main support tower\n    translate([0, 0, 25])\n        cube([10, 10, 20], center=true);\n    \n    // Cross braces\n    translate([-5, -5, 35])\n        rotate([0, 45, 0])\n        cube([15, 2, 2], center=true);\n    translate([-5, 5, 35])\n        rotate([0, 45, 0])\n        cube([15, 2, 2], center=true);\n}\n\n// Assembly\nunion() {\n    reclaimer_body();\n    conveyor();\n    bucket_wheel();\n    tracks();\n    cabin();\n    support_structure();\n}",
    "renders": true
  }
]